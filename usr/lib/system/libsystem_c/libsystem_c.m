int sigaltstack(const stack_t *a1, stack_t *a2)
{
  if (!a1 || a1->ss_size >> 15) {
    return __sigaltstack();
  }
  *__error() = 12;
  return -1;
}

int sigvec(int a1, sigvec *a2, sigvec *a3)
{
  return sigvec__(a1, (const sigaction *)a2, (sigaction *)a3, 1);
}

uint64_t sigvec__(int a1, const sigaction *a2, sigaction *a3, int a4)
{
  if (a2) {
    a2->sa_flags ^= 2u;
  }
  if (a4)
  {
    uint64_t result = sigaction(a1, a2, a3);
    if (!a3) {
      return result;
    }
  }

  else
  {
    uint64_t result = _sigaction_nobind(a1, a2, a3);
    if (!a3) {
      return result;
    }
  }

  if (!(_DWORD)result) {
    a3->sa_flags ^= 2u;
  }
  return result;
}

uint64_t _sigvec_nobind(int a1, const sigaction *a2, sigaction *a3)
{
  return sigvec__(a1, a2, a3, 0);
}

int sigsetmask(int a1)
{
  sigset_t v3 = a1;
  int result = sigprocmask(3, &v3, &v2);
  if (!result) {
    return v2;
  }
  return result;
}

int sigblock(int a1)
{
  sigset_t v3 = a1;
  int result = sigprocmask(1, &v3, &v2);
  if (!result) {
    return v2;
  }
  return result;
}

uint64_t sigpause_NOCANCEL(int a1)
{
  char v1 = a1;
  if (!*MEMORY[0x1896005A8]) {
    *MEMORY[0x1896005A8] = 1;
  }
  if ((a1 - 32) > 0xFFFFFFE0)
  {
    if ((sigprocmask(1, 0LL, &v3) & 0x80000000) == 0)
    {
      v3 &= ~(1 << (v1 - 1));
      return sigsuspend_NOCANCEL();
    }
  }

  else
  {
    *__error() = 22;
  }

  return 0xFFFFFFFFLL;
}

int sighold(int a1)
{
  if ((a1 - 32) > 0xFFFFFFE0)
  {
    sigset_t v2 = 1 << (a1 - 1);
    return sigprocmask(1, &v2, 0LL);
  }

  else
  {
    *__error() = 22;
    return -1;
  }
}

int sigrelse(int a1)
{
  if ((a1 - 32) > 0xFFFFFFE0)
  {
    sigset_t v2 = 1 << (a1 - 1);
    return sigprocmask(2, &v2, 0LL);
  }

  else
  {
    *__error() = 22;
    return -1;
  }

int sigignore(int a1)
{
  else {
    return 0;
  }
}

void (__cdecl *__cdecl sigset(int a1, void (__cdecl *a2)(int)))(int)
{
  if ((a1 - 32) <= 0xFFFFFFE0)
  {
    *__error() = 22;
    return (void (__cdecl *)(int))-1LL;
  }

  if (sigprocmask(0, 0LL, &v9) == -1) {
    return (void (__cdecl *)(int))-1LL;
  }
  sigset_t v4 = v9 & (1 << (a1 - 1));
  if (a2 == (void (__cdecl *)(int))5)
  {
    if (v4) {
      return (void (__cdecl *)(int))5;
    }
    if (sigaction(a1, 0LL, &v8) != -1 && sighold(a1) != -1) {
      return v8.__sigaction_u.__sa_handler;
    }
    return (void (__cdecl *)(int))-1LL;
  }

  if (v4 && sigrelse(a1) == -1) {
    return (void (__cdecl *)(int))-1LL;
  }
  v5 = signal(a1, a2);
  uint64_t v6 = 5LL;
  if (!v4) {
    uint64_t v6 = (uint64_t)v5;
  }
  else {
    return (void (__cdecl *)(int))v6;
  }
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  switch(__clock_id)
  {
    case _CLOCK_PROCESS_CPUTIME_ID:
      if (!getrusage(0, &v6)) {
        return 1000000000 * (v6.ru_stime.tv_sec + v6.ru_utime.tv_sec)
      }
             + 1000 * (v6.ru_stime.tv_usec + (uint64_t)v6.ru_utime.tv_usec);
      return 0LL;
    case _CLOCK_MONOTONIC:
      return 0LL;
    case _CLOCK_REALTIME:
      int v2 = gettimeofday(&v6.ru_utime, 0LL);
      __uint64_t result = 0LL;
      if (!v2) {
        return 1000000000 * v6.ru_utime.tv_sec + 1000LL * v6.ru_utime.tv_usec;
      }
      return result;
  }

  if (mach_timebase_info((mach_timebase_info_t)&v6)) {
    return 0LL;
  }
  switch(__clock_id)
  {
    case _CLOCK_MONOTONIC_RAW:
      uint64_t v4 = mach_continuous_time();
      goto LABEL_21;
    case _CLOCK_MONOTONIC_RAW_APPROX:
      uint64_t v4 = mach_continuous_approximate_time();
      goto LABEL_21;
    case _CLOCK_MONOTONIC:
    case _CLOCK_MONOTONIC_RAW_APPROX|0x2:
      goto LABEL_17;
    case _CLOCK_UPTIME_RAW:
      uint64_t v4 = mach_absolute_time();
      goto LABEL_21;
    case _CLOCK_UPTIME_RAW_APPROX:
      uint64_t v4 = mach_approximate_time();
      goto LABEL_21;
    default:
      if (__clock_id == _CLOCK_THREAD_CPUTIME_ID)
      {
        uint64_t v4 = __thread_selfusage();
LABEL_21:
        __uint64_t result = v4 * LODWORD(v6.ru_utime.tv_sec) / HIDWORD(v6.ru_utime.tv_sec);
      }

      else
      {
LABEL_17:
        v5 = __error();
        __uint64_t result = 0LL;
        int *v5 = 22;
      }

      break;
  }

  return result;
}

uint64_t _mach_boottime_usec(uint64_t *a1, timeval *a2)
{
  while (1)
  {
    uint64_t v4 = mach_boottime_usec();
    if (!v4)
    {
      size_t v8 = 16LL;
      if (sysctlbyname("kern.boottime", &v9, &v8, 0LL, 0LL) == -1) {
        uint64_t v4 = 0LL;
      }
      else {
        uint64_t v4 = v10 + 1000000 * v9;
      }
    }

    __dmb(0xBu);
    uint64_t v5 = gettimeofday(a2, 0LL);
    if ((_DWORD)v5) {
      break;
    }
    __dmb(0xBu);
    uint64_t v6 = mach_boottime_usec();
    if (!v6)
    {
      size_t v8 = 16LL;
      if (sysctlbyname("kern.boottime", &v9, &v8, 0LL, 0LL) == -1) {
        uint64_t v6 = 0LL;
      }
      else {
        uint64_t v6 = v10 + 1000000 * v9;
      }
    }

    if (v4 == v6)
    {
      *a1 = v4;
      return v5;
    }
  }

  return v5;
}

int clock_gettime(clockid_t __clock_id, timespec *__tp)
{
  switch(__clock_id)
  {
    case _CLOCK_REALTIME:
      int result = gettimeofday(&v11.ru_utime, 0LL);
      unint64_t tv_sec = v11.ru_utime.tv_sec;
      uint64_t v7 = 1000LL * v11.ru_utime.tv_usec;
      goto LABEL_15;
    case _CLOCK_MONOTONIC_RAW:
    case _CLOCK_MONOTONIC_RAW_APPROX:
    case _CLOCK_UPTIME_RAW:
    case _CLOCK_UPTIME_RAW_APPROX:
    case _CLOCK_THREAD_CPUTIME_ID:
      __uint64_t v3 = clock_gettime_nsec_np(__clock_id);
      if (!v3) {
        goto LABEL_6;
      }
      __uint64_t v4 = v3;
      int result = 0;
      __tp->unint64_t tv_sec = v4 / 0x3B9ACA00;
      __tp->tv_nsec = v4 % 0x3B9ACA00;
      break;
    case _CLOCK_MONOTONIC:
      int result = _mach_boottime_usec((uint64_t *)&v12, &v11.ru_utime);
      int v8 = v11.ru_utime.tv_usec + 1000000 * (v12 / 0xF4240) - v12;
      if (v8 < 0) {
        int v9 = v8 + 1000000;
      }
      else {
        int v9 = v11.ru_utime.tv_usec + 1000000 * (v12 / 0xF4240) - v12;
      }
      unint64_t tv_sec = v11.ru_utime.tv_sec - v12 / 0xF4240 + (v8 >> 31);
      LODWORD(v7) = 1000 * v9;
      goto LABEL_14;
    case _CLOCK_PROCESS_CPUTIME_ID:
      int result = getrusage(0, &v11);
      unint64_t tv_sec = v11.ru_stime.tv_sec + v11.ru_utime.tv_sec;
      int v10 = v11.ru_stime.tv_usec + v11.ru_utime.tv_usec;
      if (v11.ru_stime.tv_usec + v11.ru_utime.tv_usec > 999999)
      {
        int v10 = v11.ru_stime.tv_usec + v11.ru_utime.tv_usec - 1000000;
        ++tv_sec;
      }

      LODWORD(v7) = 1000 * v10;
LABEL_14:
      uint64_t v7 = (int)v7;
LABEL_15:
      __tp->unint64_t tv_sec = tv_sec;
      __tp->tv_nsec = v7;
      break;
    default:
      *__error() = 22;
LABEL_6:
      int result = -1;
      break;
  }

  return result;
}

int clock_getres(clockid_t __clock_id, timespec *__res)
{
  if (__clock_id > _CLOCK_THREAD_CPUTIME_ID)
  {
LABEL_10:
    *__error() = 22;
    return -1;
  }

  if (((1 << __clock_id) & 0x10330) == 0)
  {
    if (((1 << __clock_id) & 0x1041) != 0)
    {
      int result = 0;
      *__res = (timespec)xmmword_180497A60;
      return result;
    }

    goto LABEL_10;
  }

  int result = mach_timebase_info(&info);
  if (result) {
    return -1;
  }
  uint32_t v4 = info.numer / info.denom;
  if (info.numer % info.denom) {
    uint64_t v5 = v4 + 1;
  }
  else {
    uint64_t v5 = v4;
  }
  __res->unint64_t tv_sec = 0LL;
  __res->tv_nsec = v5;
  return result;
}

int clock_settime(clockid_t __clock_id, const timespec *__tp)
{
  if (__clock_id)
  {
    *__error() = 22;
    return -1;
  }

  else
  {
    uint64_t tv_nsec = __tp->tv_nsec;
    v4.unint64_t tv_sec = __tp->tv_sec;
    v4.tv_usec = (int)tv_nsec / 1000;
    return settimeofday(&v4, 0LL);
  }

void *__cdecl sbrk(int a1)
{
  if ((sbrk_needs_init & 1) == 0)
  {
    sbrk_needs_init = 1;
    if (vm_allocate(*MEMORY[0x1895FFD48], (vm_address_t *)&sbrk_curbrk, sbrk_region_size, 83886081)) {
      goto LABEL_5;
    }
  }

  if (a1 <= 0) {
    return (void *)sbrk_curbrk;
  }
  if (sbrk_region_size < (unint64_t)a1)
  {
LABEL_5:
    *__error() = 12;
    return (void *)-1LL;
  }

  int result = (void *)sbrk_curbrk;
  sbrk_curbrk += a1;
  sbrk_region_size -= a1;
  return result;
}

void *__cdecl brk(const void *a1)
{
  *__error() = 12;
  return (void *)-1LL;
}

void (__cdecl *__cdecl bsd_signal(int a1, void (__cdecl *a2)(int)))(int)
{
  v5.__sigaction_u.__sa_handler = a2;
  sigset_t v2 = 1 << (a1 - 1);
  if (a1 > 32) {
    sigset_t v2 = 0;
  }
  v5.sa_mask = v2;
  v5.sa_flags = 2;
  if (sigaction(a1, &v5, &v4) == -1) {
    return (void (__cdecl *)(int))-1LL;
  }
  else {
    return v4.__sigaction_u.__sa_handler;
  }
}

uint64_t strtoencf16(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = __locale_key;
  sigaction v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  __int128 v7 = xmmword_180497A70;
  if (!v4) {
    sigaction v4 = &__global_locale;
  }
  uint64_t v8 = 0x5FFFFFFF9LL;
  int v9 = 22;
  uint64_t v10 = a1;
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  v13 = v4;
  uint64_t v14 = 0LL;
  int v15 = 0;
  uint64_t v16 = 0LL;
  uint64_t v17 = 0LL;
  char v18 = 0;
  uint64_t result = fastParse64((uint64_t)&v7);
  if ((_DWORD)result)
  {
    int v6 = fegetround();
    return generalSlowpath((uint64_t)&v7, v6, v19, 8);
  }

  return result;
}

uint64_t strtoencf32(float *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = __locale_key;
  sigaction v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    sigaction v5 = v4;
  }
  else {
    sigaction v5 = &__global_locale;
  }
  return _ffpp_strtoencf32_l(a1, a2, a3, (uint64_t)v5);
}

uint64_t _ffpp_strtoencf32_l(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v24 = xmmword_180497A80;
  uint64_t v25 = 0x28FFFFFFD2LL;
  int v26 = 113;
  v27 = a1;
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  unint64_t v31 = 0LL;
  int v32 = 0;
  uint64_t v33 = 0LL;
  uint64_t v34 = 0LL;
  char v35 = 0;
  uint64_t result = fastParse64((uint64_t)&v24);
  if ((_DWORD)result)
  {
    __int16 v5 = WORD2(v34);
    int v6 = v32;
    if ((HIDWORD(v34) + 10) > 0x14 || v32 > 7)
    {
      uint64_t result = fegetround();
      if (v6 >= 20) {
        uint64_t v10 = 36LL;
      }
      else {
        uint64_t v10 = 4LL;
      }
      unsigned int v11 = __clz(v31);
      if (v11 >= 5 && v6 >= 20) {
        _ffpp_strtoencf32_l_cold_1();
      }
      __int16 v12 = v6 + v5 - 19;
      if (v6 < 20) {
        __int16 v12 = v5;
      }
      unint64_t v13 = (powersOf10_Float[v12 + 70] * (unsigned __int128)(v31 << v11)) >> 64;
      unsigned int v14 = __clz(v13);
      if (v14 >= 2) {
        _ffpp_strtoencf32_l_cold_2();
      }
      unint64_t v15 = (unint64_t)(55732705LL * v12) >> 24;
      unint64_t v16 = v13 << v14;
      unint64_t v17 = v16 + v10;
      HIDWORD(v19) = result;
      LODWORD(v19) = result;
      int v18 = v19 >> 22;
      if (v18 == 1)
      {
        if (!v35)
        {
          v16 += 0xFFFFFFFFFFLL;
          v17 += 0x10000000000LL;
        }
      }

      else if (v18 != 3)
      {
        if (v18 == 2)
        {
          v17 += 0x10000000000LL;
          if (v35) {
            v16 += 0xFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v16 + 4;
          }
        }

        else
        {
          v16 += 0x7FFFFFFFFFLL;
          v17 += 0x8000000000LL;
        }
      }

      unint64_t v20 = v16 >> 40;
      int v21 = v15 - v11 - v14;
      if (!(_DWORD)v20) {
        ++v21;
      }
      int v22 = v21 + 65;
      if (v22 >= 129) {
        return overflow((uint64_t)&v24);
      }
      if (v22 > -126)
      {
        if (v17 >> 40 == (_DWORD)v20)
        {
          *(_DWORD *)v27 = (((v17 >> 40) & 0x7FFFFF | ((unsigned __int16)v22 << 23)) + 1056964608) | ((v35 != 0) << 31);
          return result;
        }
      }

      else if (v22 <= 0xFFFFFF6A)
      {
        return underflow((uint64_t)&v24);
      }

      int v23 = fegetround();
      return generalSlowpath((uint64_t)&v24, v23, v36, 32);
    }

    else
    {
      if (v35) {
        int v7 = -(int)v31;
      }
      else {
        int v7 = v31;
      }
      float v8 = (float)v7;
      if (v34 < 0) {
        float v9 = v8 / _ffpp_strtoencf32_l_floatPowerOf10[-HIDWORD(v34)];
      }
      else {
        float v9 = v8 * _ffpp_strtoencf32_l_floatPowerOf10[HIDWORD(v34)];
      }
      float *v27 = v9;
    }
  }

  return result;
}

float strtof(const char *a1, char **a2)
{
  uint64_t v2 = __locale_key;
  uint64_t v3 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    sigaction v4 = v3;
  }
  else {
    sigaction v4 = &__global_locale;
  }
  _ffpp_strtoencf32_l(&v6, (uint64_t)a1, (uint64_t)a2, (uint64_t)v4);
  return v6;
}

float strtof_l(const char *a1, char **a2, locale_t a3)
{
  return v4;
}

uint64_t strtoencf64(double *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = __locale_key;
  float v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    __int16 v5 = v4;
  }
  else {
    __int16 v5 = &__global_locale;
  }
  return _ffpp_strtoencf64_l(a1, a2, a3, (uint64_t)v5);
}

uint64_t _ffpp_strtoencf64_l(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v35 = xmmword_180497A90;
  uint64_t v36 = 0x136FFFFFEBBLL;
  int v37 = 768;
  v38 = a1;
  uint64_t v39 = a2;
  uint64_t v40 = a3;
  uint64_t v41 = a4;
  int64_t v42 = 0LL;
  int v43 = 0;
  uint64_t v44 = 0LL;
  uint64_t v45 = 0LL;
  char v46 = 0;
  uint64_t result = fastParse64((uint64_t)&v35);
  if (!(_DWORD)result) {
    return result;
  }
  __int16 v5 = WORD2(v45);
  if ((HIDWORD(v45) + 22) >= 0x29)
  {
    int v6 = v43;
    goto LABEL_10;
  }

  if (v45 < 0)
  {
    int v6 = v43;
    if (v43 <= 15)
    {
      uint64_t v27 = v42;
      int v7 = v38;
      if (v46) {
        uint64_t v27 = -v42;
      }
      double v9 = (double)v27 / _ffpp_strtoencf64_l_doublePowerOf10[-HIDWORD(v45)];
      goto LABEL_44;
    }
  }

  else
  {
    int v6 = v43;
    if (!HIDWORD(v45))
    {
      if (v43 > 19) {
        goto LABEL_10;
      }
      if (v46)
      {
        if (v42 < 0) {
          goto LABEL_10;
        }
        double v28 = (double)-v42;
      }

      else
      {
        double v28 = (double)(unint64_t)v42;
      }

      double *v38 = v28;
      return result;
    }

    if (v43 <= 19)
    {
      int v7 = v38;
      double v8 = _ffpp_strtoencf64_l_doublePowerOf10[HIDWORD(v45)];
      if (v46) {
        double v8 = -v8;
      }
      double v9 = (double)(v42 & 0x7FF) * v8 + (double)(v42 & 0xFFFFFFFFFFFFF800LL) * v8;
LABEL_44:
      *int v7 = v9;
      return result;
    }
  }

LABEL_10:
  uint64_t result = fegetround();
  if (v6 >= 20) {
    uint64_t v10 = 80LL;
  }
  else {
    uint64_t v10 = 12LL;
  }
  unsigned int v11 = __clz(v42);
  if (v11 >= 5 && v6 >= 20) {
    _ffpp_strtoencf64_l_cold_1();
  }
  __int16 v12 = v5 + v6 - 19;
  if (v6 < 20) {
    __int16 v12 = v5;
  }
  int v13 = (585 * v12 + 256) >> 14;
  __int16 v14 = v12 - 28 * v13;
  unsigned int v16 = __clz(v15);
  if (v16 >= 3) {
    _ffpp_strtoencf64_l_cold_2();
  }
  unint64_t v17 = v15 << v16;
  int v18 = ((unint64_t)(55732705LL * (__int16)(28 * v13)) >> 24)
      - v11
      + ((unint64_t)(55732705LL * v14) >> 24)
      - v16
      + 66;
  BOOL v19 = v46 != 0;
  HIDWORD(v21) = result;
  LODWORD(v21) = result;
  int v20 = v21 >> 22;
  if (v20 == 3)
  {
    uint64_t v24 = 0LL;
    unsigned int v23 = v10;
    goto LABEL_30;
  }

  if (v20 != 2)
  {
    if (v20 != 1)
    {
      unsigned int v23 = v10 | 0x400;
      uint64_t v24 = 1023LL;
      goto LABEL_30;
    }

    BOOL v19 = v46 == 0;
  }

  BOOL v22 = !v19;
  if (v19) {
    unsigned int v23 = v10 | 0x800;
  }
  else {
    unsigned int v23 = v10;
  }
  uint64_t v24 = 2047LL;
  if (v22) {
    uint64_t v24 = 0LL;
  }
LABEL_30:
  unint64_t v25 = v24 + v17;
  if (v25 >= 0x800) {
    int v26 = v18;
  }
  else {
    int v26 = v18 + 1;
  }
  if (v26 >= 1025) {
    return overflow((uint64_t)&v35);
  }
  if (v26 > -1022)
  {
    if ((v17 + v23) >> 11 == v25 >> 11)
    {
      *(void *)v38 = ((unint64_t)(v26 + 1022) << 52) | ((unint64_t)(v46 != 0) << 63) | (v25 >> 11) & 0xFFFFFFFFFFFFFLL;
      return result;
    }

    return generalSlowpath((uint64_t)&v35, result, v47, 164);
  }

  if (v18 < -1073) {
    return generalSlowpath((uint64_t)&v35, result, v47, 164);
  }
  if (v18 >= -1010) {
    _ffpp_strtoencf64_l_cold_3();
  }
  char v29 = 14 - v18;
  switch(v20)
  {
    case 3:
      goto LABEL_55;
    case 2:
      if (!v46) {
        goto LABEL_55;
      }
LABEL_59:
      uint64_t v30 = ~(-1LL << v29);
      uint64_t v10 = v30 + v10;
      goto LABEL_61;
    case 1:
      if (v46)
      {
LABEL_55:
        uint64_t v30 = 0LL;
        goto LABEL_61;
      }

      goto LABEL_59;
  }

  uint64_t v31 = 1LL << (13 - v18);
  uint64_t v30 = v31 - 1;
  uint64_t v10 = v31 + v10;
LABEL_61:
  unint64_t v32 = (v30 + v17) >> v29;
  if ((v10 + v17) >> v29 != v32) {
    return generalSlowpath((uint64_t)&v35, result, v47, 164);
  }
  uint64_t v33 = 1LL << (v18 + 50);
  if (v32) {
    uint64_t v33 = v32;
  }
  unint64_t v34 = v33 | ((unint64_t)(v46 != 0) << 63);
  if (v34 != 0x10000000000000LL)
  {
    uint64_t result = (uint64_t)__error();
    *(_DWORD *)uint64_t result = 34;
  }

  *(void *)v38 = v34;
  return result;
}

    *__error() = 22;
    return 0xFFFFFFFFLL;
  }

  return 0LL;
}

    *__error() = 22;
    return 0xFFFFFFFFLL;
  }

  if ((*(_BYTE *)(v5 + 68) & 8) == 0) {
    goto LABEL_10;
  }
  if (*(_DWORD *)(v5 + 616))
  {
    uint64_t result = rec_rdelete((MPOOL **)v5, *(_DWORD *)(v5 + 64) - 1);
    if ((_DWORD)result) {
      return result;
    }
    --*(_DWORD *)(v5 + 64);
    goto LABEL_14;
  }

  return 1LL;
}

    *__error() = 92;
    return -1LL;
  }

  double v8 = 0LL;
  if (!a3) {
    goto LABEL_24;
  }
LABEL_22:
  if (*v7 > 0)
  {
    __int16 v14 = 1LL;
    goto LABEL_27;
  }

  uint64_t v10 = malloc(4 * v6 + 4);
  unsigned int v11 = v10;
  if (v10)
  {
    __int16 v12 = (__int32 *)v10;
    memset(&v15, 0, sizeof(v15));
    if (!v6) {
      goto LABEL_19;
    }
    __int16 v12 = (__int32 *)v10;
    while (1)
    {
      int v13 = mbrtowc_l(v12, v4, v6, &v15, a3);
      if (v13 + 2 < 3) {
        break;
      }
      ++v12;
      v4 += v13;
      v6 -= v13;
      if (!v6) {
        goto LABEL_19;
      }
    }

    if (v13 < 0xFFFFFFFFFFFFFFFELL)
    {
LABEL_19:
      *__int16 v12 = 0;
      return v11;
    }

    free(v11);
    return 0LL;
  }

  return v11;
}

  *__error() = 22;
  return -1LL;
}

    *__error() = 92;
    return -1LL;
  }

  if (a3 && a5[1] >= 1 && *v7 >= 1) {
    goto LABEL_10;
  }
  double v8 = 0LL;
  if (!a3) {
    goto LABEL_24;
  }
LABEL_22:
  if (*v7 > 0)
  {
    __int16 v14 = 1LL;
    goto LABEL_27;
  }

  v1[2] = v3 + 1;
  int v7 = &v1[8 * v3];
  double v8 = a1[1];
  *((_OWORD *)v7 + 1) = *a1;
  *((_OWORD *)v7 + 2) = v8;
  __atexit_new_registration = 1;
  pthread_mutex_unlock(&atexit_mutex);
  return 0LL;
}

    int v7 = 0;
    goto LABEL_11;
  }

  if ((result & 0x80) == 0)
  {
    *a2 = *(_BYTE *)(a6 + 82);
    *a3 = *(_BYTE *)(a6 + 83);
    if ((result & 8) == 0)
    {
      int v7 = *(_BYTE *)(a6 + 86);
LABEL_11:
      *a4 = v7;
      double v8 = *(const char **)(a6 + 64);
      goto LABEL_17;
    }

    goto LABEL_10;
  }

  *a2 = *(_BYTE *)(a6 + 84);
  *a3 = *(_BYTE *)(a6 + 85);
  if ((result & 8) == 0)
  {
    int v6 = *(_BYTE *)(a6 + 87);
    goto LABEL_15;
  }

uint64_t strtoencf64x(double *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = __locale_key;
  float v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    __int16 v5 = v4;
  }
  else {
    __int16 v5 = &__global_locale;
  }
  return _ffpp_strtoencf64_l(a1, a2, a3, (uint64_t)v5);
}

double strtod(const char *a1, char **a2)
{
  uint64_t v2 = __locale_key;
  uint64_t v3 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    float v4 = v3;
  }
  else {
    float v4 = &__global_locale;
  }
  _ffpp_strtoencf64_l(&v6, (uint64_t)a1, (uint64_t)a2, (uint64_t)v4);
  return v6;
}

double strtod_l(const char *a1, char **a2, locale_t a3)
{
  return v4;
}

long double strtold(const char *a1, char **a2)
{
  uint64_t v2 = __locale_key;
  uint64_t v3 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    double v4 = v3;
  }
  else {
    double v4 = &__global_locale;
  }
  _ffpp_strtoencf64_l(&v6, (uint64_t)a1, (uint64_t)a2, (uint64_t)v4);
  return v6;
}

long double strtold_l(const char *a1, char **a2, locale_t a3)
{
  return v4;
}

uint64_t fastParse64(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 **)(a1 + 40);
  *(_BYTE *)(a1 + 96) = 0;
  int v3 = *v2;
  if ((v3 - 48) >= 0xA)
  {
    uint64_t v4 = __locale_key;
    ++v2;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      if (v3 != 32)
      {
        if (v3 == 45)
        {
          *(_BYTE *)(a1 + 96) = 1;
          goto LABEL_15;
        }

        double v6 = &_DefaultRuneLocale;
        if ((v3 & 0x80) != 0)
        {
          int v7 = *(void **)(StatusReg + 8 * v4);
          if (!v7) {
            int v7 = &__global_locale;
          }
          double v6 = *(_RuneLocale **)(v7[166] + 120LL);
        }
      }

      int v8 = *v2++;
      int v3 = v8;
      if ((v8 - 48) < 0xA)
      {
        --v2;
        goto LABEL_16;
      }
    }

    --v2;
LABEL_15:
    int v3 = *v2;
  }

LABEL_16:
  if (v3 > 77)
  {
    if (v3 == 78)
    {
LABEL_20:
      if ((v2[1] | 0x20) == 0x61 && (v2[2] | 0x20) == 0x6E)
      {
        uint64_t v141 = 0LL;
        uint64_t v142 = 0LL;
        int v143 = 0;
        double v9 = v2 + 3;
        if (v2[3] == 40)
        {
          unsigned int v11 = v2 + 4;
          unsigned int v10 = v2[4];
          if (v10 == 48)
          {
            if (v2[5] == 120) {
              unsigned int v12 = 16;
            }
            else {
              unsigned int v12 = 8;
            }
            uint64_t v13 = 5LL;
            if (v2[5] == 120)
            {
              uint64_t v13 = 6LL;
              unsigned int v11 = v2 + 6;
            }

            else
            {
              unsigned int v11 = v2 + 5;
            }

            unsigned int v10 = v2[v13];
          }

          else
          {
            unsigned int v12 = 10;
          }

          v139 = &v141;
          v140 = &v143;
          if (v12 > hexdigit[v10])
          {
            do
            {
              v52 = (int *)v139;
              if (v139 < (uint64_t *)&v143)
              {
                unint64_t v53 = 0LL;
                do
                {
                  unint64_t v54 = v53 + *v52 * (unint64_t)v12;
                  *v52++ = v54;
                  unint64_t v53 = HIDWORD(v54);
                }

                while (v52 < &v143);
                if (v53)
                {
                  int v143 = v53;
                  v140 = &v144;
                }
              }

              addToMP((uint64_t)&v139, hexdigit[*v11]);
              v140 = &v143;
              unsigned int v55 = *++v11;
              unsigned int v10 = v55;
            }

            while (v12 > hexdigit[v55]);
          }

          if (v10 == 41)
          {
            double v9 = v11 + 1;
          }

          else
          {
            uint64_t v141 = 0LL;
            uint64_t v142 = 0LL;
            v56 = v11 + 1;
            int v143 = 0;
            while (1)
            {
              int v57 = *(v56 - 1);
              if (!*(v56 - 1) || v57 == 41) {
                break;
              }
              ++v56;
            }

            if (v57 == 41) {
              double v9 = v56;
            }
          }
        }

        _platform_memmove();
        int v58 = *(_DWORD *)(a1 + 12);
        switch(v58)
        {
          case 8:
            *(_BYTE *)(*(void *)(a1 + 32) + 6LL) |= 0xF8u;
            if (*(_BYTE *)(a1 + 96)) {
              char v60 = -1;
            }
            else {
              char v60 = 127;
            }
            *(_BYTE *)(*(void *)(a1 + 32) + 7LL) = v60;
            break;
          case 4:
            *(_BYTE *)(*(void *)(a1 + 32) + 2LL) |= 0xC0u;
            if (*(_BYTE *)(a1 + 96)) {
              char v61 = -1;
            }
            else {
              char v61 = 127;
            }
            *(_BYTE *)(*(void *)(a1 + 32) + 3LL) = v61;
            break;
          case 2:
            if (*(_BYTE *)(a1 + 96)) {
              char v59 = -2;
            }
            else {
              char v59 = 126;
            }
            *(_BYTE *)(*(void *)(a1 + 32) + 1LL) |= v59;
            break;
        }

        v62 = *(unsigned __int8 ***)(a1 + 48);
        if (v62) {
          *v62 = v9;
        }
        return 0LL;
      }

  if (!v6) {
    goto LABEL_59;
  }
  if (_platform_memchr())
  {
    switch(v2)
    {
      case 0:
      case 1:
      case 2:
        goto LABEL_19;
      case 3:
        *a1 = v4;
        uint64_t result = 4LL;
        break;
      case 4:
        *a1 = v4;
        uint64_t result = 5LL;
        break;
      case 5:
        *a1 = v4;
        uint64_t result = 6LL;
        break;
      case 7:
        *a1 = v4;
        uint64_t result = 7LL;
        break;
      case 8:
        *a1 = v4;
        uint64_t result = 8LL;
        break;
      default:
        goto LABEL_59;
    }

    return result;
  }

  if (v6 != 110)
  {
    if (_platform_memchr())
    {
      *a1 = v4;
      if ((_DWORD)v7) {
        return 4LL;
      }
      else {
        return 24LL;
      }
    }

    if (_platform_memchr())
    {
      if (!v2 || v2 == 3)
      {
        *a1 = v4;
        return 17LL;
      }

      goto LABEL_59;
    }

    if (v6 > 98)
    {
      if (v6 == 115)
      {
        if (!v2)
        {
          *a1 = v4;
          return 19LL;
        }

        if (v2 == 3)
        {
          *a1 = v4;
          return 20LL;
        }

        goto LABEL_59;
      }

      if (v6 != 112)
      {
        if (v6 == 99)
        {
          if (!v2)
          {
LABEL_19:
            *a1 = v4;
            return 2LL;
          }

          if (v2 == 3)
          {
            *a1 = v4;
            return 3LL;
          }
        }

        goto LABEL_59;
      }

      *a1 = v4;
      uint64_t v13 = (_DWORD)v7 == 0;
      __int16 v14 = 4;
LABEL_63:
      if (v13) {
        return 24LL;
      }
      else {
        return v14;
      }
    }

    if (v6 == 67)
    {
      *a1 = v4;
      uint64_t v13 = (_DWORD)v7 == 0;
      __int16 v14 = 3;
      goto LABEL_63;
    }

    if (v6 == 83)
    {
      *a1 = v4;
      uint64_t v13 = (_DWORD)v7 == 0;
      __int16 v14 = 20;
      goto LABEL_63;
    }

      unsigned int v12 = *__error();
      if (v9) {
        free(v5);
      }
      if (v11) {
LABEL_19:
      }
        closedir(v11);
LABEL_20:
      __int16 v5 = 0LL;
      *__error() = v12;
      return v5;
    }

    free(v12);
LABEL_17:
    *__error() = 7;
    return 0xFFFFFFFFLL;
  }

    __stream->_flags |= 0x40u;
    funlockfile(__stream);
    return -1LL;
  }

  unsigned int v16 = 0LL;
  while (1)
  {
    p = __stream->_p;
    r = __stream->_r;
    unsigned int v10 = _platform_memchr();
    if (v10) {
      break;
    }
    if (__srefill((uint64_t)__stream))
    {
      if ((__stream->_flags & 0x40) != 0) {
        goto LABEL_16;
      }
      goto LABEL_27;
    }
  }

  __int16 v14 = (unsigned __int8 *)(v10 + 1);
  __stream->_r += LODWORD(__stream->_p) - (_DWORD)v14;
  __stream->_p = v14;
LABEL_27:
  unint64_t v15 = *__linep;
  unsigned int v11 = v16;
  v15[v16] = 0;
  funlockfile(__stream);
  return v11;
}

    unsigned int v17 = a2 + 2;
    LOBYTE(v15) = a2[1];
LABEL_17:
    unsigned int v19 = (char)v15;
    unsigned int v20 = v178;
    if ((v15 & 0x80) != 0)
    {
      goto LABEL_19;
    }

    double v6 = *__error();
    fclose(*(FILE **)(a1 + 720));
    *__error() = v6;
    *(void *)(a1 + 720) = 0LL;
    goto LABEL_17;
  }

LABEL_150:
      v72 = *(void **)(a1 + 48);
      if (v72) {
        void *v72 = *(void *)(a1 + 40);
      }
      _platform_bzero();
      return 0LL;
    }

    if (v3 != 105)
    {
      if (v3 == 110) {
        goto LABEL_20;
      }
      goto LABEL_61;
    }

LABEL_33:
    if ((v2[1] | 0x20) == 0x6E && (v2[2] | 0x20) == 0x66)
    {
      __int16 v14 = v2 + 3;
      if ((v2[3] | 0x20) == 0x69
        && (v2[4] | 0x20) == 0x6E
        && (v2[5] | 0x20) == 0x69
        && (v2[6] | 0x20) == 0x74
        && (v2[7] | 0x20) == 0x79)
      {
        __int16 v14 = v2 + 8;
      }

      unint64_t v15 = *(unsigned __int8 ***)(a1 + 48);
      if (v15) {
        *unint64_t v15 = v14;
      }
      infinity(a1);
      return 0LL;
    }

    goto LABEL_150;
  }

  if (v3 == 48)
  {
    unsigned int v16 = v2 + 1;
    if ((v2[1] | 0x20) != 0x78)
    {
      uint64_t v40 = v2 - 1;
      do
      {
        int v41 = *++v40;
        int v3 = v41;
      }

      while (v41 == 48);
      goto LABEL_72;
    }

    unsigned int v19 = v2[2];
    int v18 = v2 + 2;
    unsigned int v17 = v19;
    unsigned int v20 = hexdigit[v19];
    if (v20 > 0xF)
    {
      unint64_t v21 = 0LL;
      unint64_t v25 = 0LL;
      int v30 = 0;
      int v29 = 0;
      BOOL v22 = v18;
      goto LABEL_130;
    }

    unint64_t v21 = 0LL;
    BOOL v22 = v18;
    do
    {
      unsigned int v23 = *++v22;
      unsigned int v17 = v23;
      unint64_t v21 = 16 * v21 + v20;
      unsigned int v20 = hexdigit[v23];
    }

    while (v20 <= 0xF && v21 >> 60 == 0);
    if (v20 > 0xF)
    {
      unint64_t v25 = 0LL;
    }

    else
    {
      unint64_t v25 = 0LL;
      do
      {
        *((void *)&v26 + 1) = v25;
        *(void *)&__int128 v26 = v21;
        unint64_t v25 = v26 >> 60;
        unsigned int v27 = *++v22;
        unsigned int v17 = v27;
        unint64_t v21 = 16 * v21 + v20;
        unsigned int v20 = hexdigit[v27];
      }

      while (v20 <= 0xF && v25 >> 59 == 0);
      if (v20 <= 0xF)
      {
        int v29 = 0;
        int v30 = 0;
        do
        {
          v29 |= v20;
          v30 += 4;
          unsigned int v31 = *++v22;
          unsigned int v17 = v31;
          unsigned int v20 = hexdigit[v31];
        }

        while (v20 < 0x10);
LABEL_130:
        int v63 = (_DWORD)v22 - (_DWORD)v18;
        v64 = *(_xlocale **)(a1 + 56);
        if (v64)
        {
          v65 = localeconv_l(v64);
          int v66 = *(unsigned __int8 *)v65->decimal_point;
          if (*v65->decimal_point)
          {
            uint64_t v67 = 0LL;
            while (v22[v67] == v66)
            {
              int v66 = v65->decimal_point[++v67];
              if (!v66)
              {
                v22 += v67;
                goto LABEL_138;
              }
            }

            unsigned int v17 = *v22;
LABEL_168:
            if ((v17 | 0x20) == 0x70)
            {
              int v81 = v22[1];
              BOOL v82 = v81 == 45 || v81 == 43;
              uint64_t v83 = 1LL;
              if (v82)
              {
                uint64_t v83 = 2LL;
                v84 = v22 + 2;
              }

              else
              {
                v84 = v22 + 1;
              }

              int v85 = v22[v83];
              if ((v85 - 58) >= 0xFFFFFFF6)
              {
                int v86 = 0;
                int v87 = v85 - 48;
                BOOL v22 = v84;
                do
                {
                  int v88 = v87 + 10 * v86;
                  if (v86 <= 99999999) {
                    int v86 = v88;
                  }
                  else {
                    int v86 = 99999999;
                  }
                  int v89 = *++v22;
                  int v87 = v89 - 48;
                }

                while ((v89 - 48) < 0xA);
                if (v81 == 45) {
                  int v90 = -v86;
                }
                else {
                  int v90 = v86;
                }
                v30 += v90;
              }
            }

            if (!(v21 | v25))
            {
              unint64_t v91 = 0LL;
              if (!v63) {
                BOOL v22 = v16;
              }
              int v92 = *(_DWORD *)(a1 + 4);
              goto LABEL_290;
            }

            if (!v25)
            {
              if ((v21 & 0x8000000000000000LL) != 0)
              {
                unint64_t v25 = v21 >> 1;
                v21 <<= 63;
                v30 -= 63;
              }

              else
              {
                v30 -= 64;
                unint64_t v25 = v21;
                unint64_t v21 = 0LL;
              }
            }

            unsigned int v93 = __clz(v25);
            unint64_t v94 = v21 << (v93 - 1);
            int v95 = v30 - (v93 - 1);
            BOOL v96 = v93 >= 2;
            if (v93 >= 2)
            {
              unint64_t v97 = (v25 << (v93 - 1)) | (v21 >> (65 - v93));
            }

            else
            {
              int v95 = v30;
              unint64_t v97 = v25;
            }

            if (v96) {
              unint64_t v98 = v94;
            }
            else {
              unint64_t v98 = v21;
            }
            int v92 = v95 + 127;
            unint64_t v91 = v98 | (v29 != 0);
            if (v95 + 127 > *(_DWORD *)(a1 + 8)) {
              goto LABEL_290;
            }
            int v100 = *(_DWORD *)a1;
            int v99 = *(_DWORD *)(a1 + 4);
            if (v92 <= v99 - *(_DWORD *)a1) {
              goto LABEL_290;
            }
            int v101 = v99 - (v95 + v100);
            if (v92 <= v99) {
              int v102 = v101 + 1;
            }
            else {
              int v102 = 127 - v100;
            }
            if (v92 <= v99) {
              int v92 = *(_DWORD *)(a1 + 4);
            }
            if (v102 > 63)
            {
              unint64_t v104 = 0LL;
              unint64_t v103 = (v97 << -(char)v102) | (v91 >> v102) | (v91 << -(char)v102 != 0);
              unint64_t v91 = v97 >> v102;
            }

            else
            {
              unint64_t v103 = v91 << -(char)v102;
              unint64_t v91 = (v97 << -(char)v102) | (v91 >> v102);
              unint64_t v104 = v97 >> v102;
            }

            HIDWORD(v106) = fegetround();
            LODWORD(v106) = HIDWORD(v106);
            int v105 = v106 >> 22;
            switch(v105)
            {
              case 1:
                if (*(_BYTE *)(a1 + 96)) {
                  goto LABEL_279;
                }
                break;
              case 3:
                goto LABEL_279;
              case 2:
                if (!*(_BYTE *)(a1 + 96)) {
                  goto LABEL_279;
                }
                break;
              default:
                if (v103 <= 0x8000000000000000LL && (v103 != 0x8000000000000000LL || (v91 & 1) == 0)) {
                  goto LABEL_279;
                }
                goto LABEL_277;
            }

            if (!v103) {
              goto LABEL_279;
            }
LABEL_277:
            BOOL v96 = __CFADD__(v91++, 1LL);
            if (v96) {
              ++v104;
            }
LABEL_279:
            int v134 = *(_DWORD *)(a1 + 4);
            int v135 = *(_DWORD *)a1 - (v92 == v134);
            if (v135 < 65)
            {
              if ((v135 != 64 || !v104) && (v135 > 63 || !(v104 | (v91 >> v135))))
              {
LABEL_287:
                if (v92 == v134 && v103) {
                  *__error() = 34;
                }
                goto LABEL_290;
              }
            }

            else if (!(v104 >> v135))
            {
              goto LABEL_287;
            }

            v91 >>= v92++ > v134;
LABEL_290:
            v136 = *(void **)(a1 + 48);
            if (v136) {
              void *v136 = v22;
            }
            if (v92 > *(_DWORD *)(a1 + 8)) {
              goto LABEL_293;
            }
            int v137 = *(_DWORD *)(a1 + 4);
            if (v92 > v137 - *(_DWORD *)a1)
            {
              int v138 = *(_DWORD *)(a1 + 12);
              switch(v138)
              {
                case 8:
                  uint64_t result = 0LL;
                  **(void **)(a1 + 32) = v91 & 0xFFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)(v92 - v137) << 52) | ((unint64_t)(*(_BYTE *)(a1 + 96) != 0) << 63);
                  return result;
                case 4:
                  uint64_t result = 0LL;
                  **(_DWORD **)(a1 + 32) = v91 & 0x7FFFFF | ((unsigned __int16)(v92 - v137) << 23) | ((*(_BYTE *)(a1 + 96) != 0) << 31);
                  return result;
                case 2:
                  uint64_t result = 0LL;
                  **(_WORD **)(a1 + 32) = (*(unsigned __int8 *)(a1 + 96) << 15) | (((_WORD)v92 - (_WORD)v137) << 10) | v91 & 0x3FF;
                  return result;
              }

              return 0LL;
            }

      if (v13[v14 - 1] == 10) {
        unsigned __int8 v43 = --v14;
      }
      if (!v14 || !v10) {
        goto LABEL_45;
      }
      unsigned int v20 = &v13[v14 - 1];
      if (*v20 == v10 && v9)
      {
        unint64_t v21 = (unsigned __int8 *)(v20 - 1);
        BOOL v22 = 0;
        do
        {
          if (*v21 != v9) {
            break;
          }
          ++v22;
          --v21;
        }

        while (v21 >= (unsigned __int8 *)v13);
        if ((v22 & 1) == 0)
        {
LABEL_44:
          unsigned __int8 v43 = v14 - 1;
          unsigned int v12 = 1;
          --v14;
        }

        goto LABEL_45;
      }

  *unsigned int v12 = 0LL;
  unsigned int v23 = *(_DWORD *)(v4 + 24);
  if ((v23 & 0x80) == 0) {
    return glob0((uint64_t)v30, v4);
  }
  if (v30[0] == 123LL && v30[1] == 125LL && !v30[2])
  {
    if ((v23 & 0x1000) != 0)
    {
      uint64_t v24 = (*(void *)&v27[0])++;
      if (v24 >= 0x80)
      {
        *__error() = 7;
        return 0xFFFFFFFFLL;
      }
    }

    return glob0((uint64_t)v30, v4);
  }

  unint64_t v25 = *(void *)v4;
  uint64_t result = globexp1((uint64_t)v30, v4);
  if (!(_DWORD)result) {
    return globfinal(v4, (uint64_t)v27, v25, v5, v8);
  }
  return result;
}

    *__error() = v19;
  }

  else
  {
    double v9 = 0LL;
    int v8 = 0LL;
  }

  _simple_sfree();
  return v23;
}

  _simple_sfree();
  return v23;
}

  _simple_sfree();
  return v23;
}

      unint64_t v25 = &_DefaultRuneLocale;
      if ((v25->__runetype[v22] & 0x400) == 0)
      {
        __int128 v26 = -1;
        goto LABEL_44;
      }

      __int128 v26 = 0;
      while (1)
      {
        unsigned int v27 = &_DefaultRuneLocale;
        if ((v24 & 0x80) != 0) {
          unsigned int v27 = *(_RuneLocale **)(*((void *)v15 + 166) + 120LL);
        }
        if ((v27->__runetype[v24] & 0x400) == 0) {
          break;
        }
        __int128 v26 = 10 * v26 + (char)v24 - 48;
        if (v26 > 0xFFFFFF) {
          goto LABEL_255;
        }
        double v28 = *++a4;
        uint64_t v24 = v28;
      }

      if (i - v134 + v26 >= v135) {
        goto LABEL_255;
      }
LABEL_44:
      if (v24 == 35)
      {
        int v29 = (char)*++a4;
        uint64_t v24 = v29;
        int v30 = &_DefaultRuneLocale;
        if (v29 < 0) {
          int v30 = *(_RuneLocale **)(*((void *)v15 + 166) + 120LL);
        }
        if ((v30->__runetype[v24] & 0x400) == 0) {
          goto LABEL_262;
        }
        unsigned int v31 = 0;
        while (1)
        {
          unint64_t v32 = &_DefaultRuneLocale;
          if ((v24 & 0x80) != 0) {
            unint64_t v32 = *(_RuneLocale **)(*((void *)v15 + 166) + 120LL);
          }
          if ((v32->__runetype[v24] & 0x400) == 0) {
            break;
          }
          unsigned int v31 = 10 * v31 + (char)v24 - 48;
          if (v31 > 0xFFFFFF) {
            goto LABEL_255;
          }
          uint64_t v33 = *++a4;
          uint64_t v24 = v33;
        }
      }

      else
      {
        unsigned int v31 = -1;
      }

      if (v24 == 46)
      {
        int v34 = (char)*++a4;
        uint64_t v24 = v34;
        __int128 v35 = &_DefaultRuneLocale;
        if (v34 < 0) {
          __int128 v35 = *(_RuneLocale **)(*((void *)v15 + 166) + 120LL);
        }
        if ((v35->__runetype[v24] & 0x400) == 0) {
          goto LABEL_262;
        }
        int v36 = 0LL;
        while (1)
        {
          int v37 = &_DefaultRuneLocale;
          if ((v24 & 0x80) != 0) {
            int v37 = *(_RuneLocale **)(*((void *)v15 + 166) + 120LL);
          }
          if ((v37->__runetype[v24] & 0x400) == 0) {
            break;
          }
          int v36 = (10 * v36 + (char)v24 - 48);
          int v38 = *++a4;
          uint64_t v24 = v38;
        }
      }

      else
      {
        int v36 = 0xFFFFFFFFLL;
      }

      int v128 = v31;
      int v133 = (uint64_t)v9;
      int v124 = v15;
      int v126 = v10;
      if (v24 == 110)
      {
        int v39 = v21 & 0xFFFFFFBF;
      }

      else
      {
        if (v24 != 105) {
          goto LABEL_262;
        }
        int v39 = v21 | 0x40;
      }

      if (v11)
      {
        uint64_t v40 = v11;
        int v41 = v16;
        free(v40);
        unsigned int v16 = v41;
      }

      if ((v39 & 0x40) != 0)
      {
        uint64_t v42 = strdup(*(const char **)(v133 + 24));
        if (!v42) {
          goto LABEL_263;
        }
        unsigned __int8 v125 = v42[3];
        v42[3] = 0;
      }

      else
      {
        unsigned __int8 v125 = v16;
        uint64_t v42 = strdup(*(const char **)(v133 + 32));
        if (!v42)
        {
LABEL_263:
          unsigned int v11 = 0LL;
          goto LABEL_257;
        }
      }

      uint64_t v127 = (uint64_t)v42;
      unsigned __int8 v43 = v141++;
      int v44 = *v43;
      if (*v43 >= 0.0) {
        int v45 = v39;
      }
      else {
        int v45 = v39 | 0x80;
      }
      if (v44 >= 0.0) {
        char v46 = *v43;
      }
      else {
        char v46 = -v44;
      }
      int v47 = v128;
      if ((v128 & 0x80000000) == 0)
      {
        int v131 = __calc_left_pad(v45 ^ 0x80, (uint64_t)v42, v133);
        v48 = __calc_left_pad(v45, v127, v133);
        int v47 = v128;
        int v126 = (v131 - v48) & ~((v131 - v48) >> 31);
      }

      uint64_t v132 = v45;
      fixed = __fix_nogrouping(*(_BYTE **)(v133 + 56));
      uint64_t v50 = **(_BYTE **)(v133 + 40);
      if (!v50) {
        uint64_t v50 = **(_BYTE **)v133;
      }
      int v51 = *(_BYTE **)(v133 + 48);
      v52 = *v51;
      unint64_t v53 = 80LL;
      if (!*v51) {
        v52 = **(unsigned __int8 **)(v133 + 8);
      }
      if (v47 == -1) {
        unint64_t v54 = 0;
      }
      else {
        unint64_t v54 = v47;
      }
      if ((_DWORD)v36 == -1)
      {
        if ((v45 & 0x40) == 0) {
          unint64_t v53 = 81LL;
        }
        unsigned int v55 = *(unsigned __int8 *)(v133 + v53);
        if (v55 == 127) {
          LOBYTE(v55) = 2;
        }
        int v36 = (char)v55;
      }

      v123 = (char *)fixed;
      int v122 = v52;
      v120 = v50;
      if ((v45 & 1) != 0)
      {
        v56 = *fixed;
        if ((*fixed - 127) >= 0x82u)
        {
          int v57 = 0LL;
          int v58 = v54;
          while (v58 > (char)v56)
          {
            char v59 = fixed[++v57];
            if (v59 == 127) {
              break;
            }
            char v60 = (char)v56;
            v58 -= (char)v56;
            v56 = v59;
            if (!v59)
            {
              LODWORD(v57) = (v58 - 1) / v60 + v57;
              break;
            }
          }
        }

        else
        {
          LODWORD(v57) = 0;
        }

        v54 += v57;
      }

      snprintf_l(v143, 0x20uLL, v136, "%%%d.%df", (v36 + v54 + 1), v36);
      char v61 = asprintf_l(&v142, v136, v143, *(void *)&v46);
      if (v61 < 0)
      {
LABEL_265:
        int v119 = *__error();
        unsigned int v11 = (_BYTE *)v127;
        goto LABEL_260;
      }

      v62 = v61;
      int v63 = v142;
      v64 = (2 * _platform_strlen()) | 1;
      v65 = malloc(v64);
      if (!v65)
      {
        free(v63);
        goto LABEL_265;
      }

      v129 = v65;
      unsigned int v130 = v64;
      _platform_bzero();
      int v66 = 0LL;
      if (*v63 == 32)
      {
        do
          uint64_t v67 = v63[++v66];
        while (v67 == 32);
        v62 -= v66;
        unsigned int v68 = v66;
      }

      else
      {
        unsigned int v68 = 0;
      }

      int v121 = v68;
      BOOL v69 = (uint64_t)&v129[v130 - 1];
      if ((int)v36 >= 1)
      {
        v70 = v69 - v36;
        _platform_memmove();
        *(_BYTE *)(v70 - 1) = v120;
        BOOL v69 = v70 - 1;
        v62 += ~(_DWORD)v36;
      }

      int v71 = v123;
      if ((v132 & 1) != 0 && v122 && (v72 = *v123, (v72 - 1) <= 0x7D))
      {
        if (v62 <= v72)
        {
          v73 = 0;
          v75 = v132;
        }

        else
        {
          v73 = 0;
          unsigned int v74 = v66 - 1;
          v75 = v132;
          do
          {
            if (v72 >= 1)
            {
              __int128 v76 = v74 + v62;
              unsigned int v77 = v72 + 1;
              v62 -= v72;
              do
              {
                *(_BYTE *)--BOOL v69 = v142[v76--];
                --v77;
              }

              while (v77 > 1);
            }

            *(_BYTE *)--BOOL v69 = v122;
            ++v73;
            v72 = v71[1];
            if (v71[1])
            {
              if (v72 == 127) {
                break;
              }
              v72 = (char)v72;
              ++v71;
            }

            else
            {
              while (1)
              {
                v72 = *v71;
                if (v62 <= v72) {
                  break;
                }
                if (v72 >= 1)
                {
                  v78 = v74 + v62;
                  int v79 = v72 + 1;
                  v62 -= v72;
                  do
                  {
                    *(_BYTE *)--BOOL v69 = v142[v78--];
                    --v79;
                  }

                  while (v79 > 1);
                }

                *(_BYTE *)--BOOL v69 = v122;
                ++v73;
              }
            }
          }

          while (v62 > v72);
        }

        if (v62 < 1)
        {
          unsigned int v12 = v129;
          uint64_t v83 = v121;
        }

        else
        {
          int v81 = v66 + v62 - 1;
          BOOL v82 = v62 + 1;
          unsigned int v12 = v129;
          uint64_t v83 = v121;
          do
          {
            *(_BYTE *)--BOOL v69 = v142[v81--];
            --v82;
          }

          while (v82 > 1);
        }

        unsigned int v80 = v83 - v73;
      }

      else
      {
        _platform_memmove();
        unsigned int v80 = (__PAIR64__(v121, v36) - 1) >> 32;
        unsigned int v12 = v129;
        v75 = v132;
      }

      if (v80 >= 1) {
        _platform_memset();
      }
      a1 = v134;
      _platform_memmove();
      free(v142);
      __setup_vars(v75, &v140, &v139, &v138, &v137, v133);
      v84 = v126;
      unsigned int v17 = (unint64_t)i;
      if (v126 >= 1)
      {
        unsigned int v11 = (_BYTE *)v127;
        double v9 = (lconv *)v133;
        unint64_t v15 = v124;
        unsigned int v16 = v125;
        while (v17 < (unint64_t)v13)
        {
          *(_BYTE *)v17++ = 32;
          int v85 = __OFSUB__(v84--, 1);
          if ((v84 < 0) ^ v85 | (v84 == 0))
          {
            unsigned int v10 = v84 - 1;
            goto LABEL_150;
          }
        }

        goto LABEL_255;
      }

      unsigned int v10 = v126 - 1;
      unsigned int v11 = (_BYTE *)v127;
      double v9 = (lconv *)v133;
      unint64_t v15 = v124;
      unsigned int v16 = v125;
LABEL_150:
      if (v138) {
        int v86 = 1;
      }
      else {
        int v86 = (v75 & 0x80) == 0;
      }
      if (!v86)
      {
        *(_BYTE *)v17++ = 40;
      }

      if (v140 != 1)
      {
        if (v138 != 1) {
          goto LABEL_192;
        }
        int v95 = *v137;
        if (*v137)
        {
          BOOL v96 = v137 + 1;
          while (v17 < (unint64_t)v13)
          {
            *(_BYTE *)v17++ = v95;
            unint64_t v97 = *(unsigned __int8 *)v96++;
            int v95 = v97;
            if (!v97) {
              goto LABEL_186;
            }
          }

          goto LABEL_255;
        }

LABEL_299:
            underflow(a1);
            return 0LL;
          }
        }

        else
        {
          if (v17 != 46) {
            goto LABEL_168;
          }
          ++v22;
        }

LABEL_138:
        unsigned int v17 = *v22;
        unsigned int v68 = hexdigit[*v22];
        if (!v25 && (v68 <= 0xF ? (BOOL v69 = v21 >> 60 == 0) : (BOOL v69 = 0), v69))
        {
          v70 = v22;
          do
          {
            unsigned int v74 = *++v70;
            unsigned int v17 = v74;
            unint64_t v21 = 16 * v21 + v68;
            unsigned int v68 = hexdigit[v74];
          }

          while (v68 <= 0xF && v21 >> 60 == 0);
        }

        else
        {
          v70 = v22;
        }

        while (v68 <= 0xF && v25 >> 59 == 0)
        {
          *((void *)&v76 + 1) = v25;
          *(void *)&__int128 v76 = v21;
          unint64_t v25 = v76 >> 60;
          unsigned int v77 = *++v70;
          unsigned int v17 = v77;
          unint64_t v21 = 16 * v21 + v68;
          unsigned int v68 = hexdigit[v77];
        }

        v30 += 4 * ((_DWORD)v22 - (_DWORD)v70);
        int v79 = (int)v70;
        if (v68 <= 0xF)
        {
          do
          {
            v29 |= v68;
            unsigned int v80 = *++v70;
            unsigned int v17 = v80;
            unsigned int v68 = hexdigit[v80];
            ++v79;
          }

          while (v68 < 0x10);
        }

        int v63 = v63 - (_DWORD)v22 + v79;
        BOOL v22 = v70;
        goto LABEL_168;
      }
    }

    int v30 = 0;
    int v29 = 0;
    goto LABEL_130;
  }

  if (v3 == 73) {
    goto LABEL_33;
  }
LABEL_61:
  if ((v3 - 58) <= 0xF5u)
  {
    unint64_t v32 = *(_xlocale **)(a1 + 56);
    if (v32)
    {
      uint64_t v33 = localeconv_l(v32);
      int v34 = *(unsigned __int8 *)v33->decimal_point;
      if (v33->decimal_point[1])
      {
        if (*v33->decimal_point)
        {
          __int128 v35 = (unsigned __int8 *)(v33->decimal_point + 1);
          LOBYTE(v36) = 1;
          do
          {
            int v37 = *v2++;
            int v36 = v36 & (v37 == v34);
            int v38 = *v35++;
            int v34 = v38;
          }

          while (v38);
          if (!v36) {
            goto LABEL_150;
          }
        }

        int v39 = *v2;
        goto LABEL_148;
      }

      if (v34 != *v2) {
        goto LABEL_150;
      }
    }

    else if (v3 != 46)
    {
      goto LABEL_150;
    }

    int v71 = *++v2;
    int v39 = v71;
LABEL_148:
    uint64_t v42 = 0LL;
    goto LABEL_221;
  }

  uint64_t v40 = v2;
LABEL_72:
  if ((v3 - 48) > 9)
  {
    int v45 = 0;
    uint64_t v42 = 0LL;
    uint64_t v2 = v40;
  }

  else
  {
    uint64_t v42 = (v3 - 48);
    uint64_t v2 = v40 + 1;
    int v3 = v40[1];
    unsigned __int8 v43 = v3 - 48;
    if ((v3 - 48) <= 9)
    {
      do
      {
        uint64_t v42 = 10 * v42 + v43;
        int v44 = *++v2;
        int v3 = v44;
        unsigned __int8 v43 = v44 - 48;
      }

      while ((v44 - 48) < 0xA);
    }

    int v45 = (_DWORD)v2 - (_DWORD)v40;
  }

  char v46 = *(_xlocale **)(a1 + 56);
  if (v46)
  {
    int v47 = 0;
    if (v3 > 68)
    {
      if (v3 == 69 || v3 == 101) {
        goto LABEL_231;
      }
    }

    else if (!v3 || v3 == 32)
    {
      goto LABEL_231;
    }

    v48 = localeconv_l(v46);
    int v49 = *(unsigned __int8 *)v48->decimal_point;
    if (v48->decimal_point[1])
    {
      if (*v48->decimal_point)
      {
        uint64_t v50 = 0LL;
        LOBYTE(v51) = 1;
        do
        {
          int v51 = v51 & (v2[v50] == v49);
          int v49 = v48->decimal_point[++v50];
        }

        while (v49);
        if (!v51)
        {
          int v47 = 0;
          int v3 = *v2;
          goto LABEL_231;
        }

        v2 += v50;
      }
    }

    else if (v49 == *v2)
    {
      ++v2;
    }

LABEL_216:
    if (v45)
    {
      int v3 = *v2;
      if ((v3 - 48) > 9)
      {
        v107 = v2;
      }

      else
      {
        uint64_t v42 = 10 * v42 + (v3 - 48);
        v107 = v2 + 1;
        int v3 = v2[1];
        unsigned int v108 = v3 - 48;
        if ((v3 - 48) <= 9)
        {
          do
          {
            uint64_t v42 = 10 * v42 + v108;
            int v109 = *++v107;
            int v3 = v109;
            unsigned int v108 = v109 - 48;
          }

          while ((v109 - 48) < 0xA);
        }
      }

      v45 += (_DWORD)v107 - (_DWORD)v2;
      goto LABEL_230;
    }

LABEL_221:
    int v110 = (_DWORD)v2 - 1;
    v111 = v2;
    do
    {
      int v112 = *v111++;
      int v3 = v112;
      ++v110;
      uint64_t v113 = (v112 - 48);
    }

    while (v112 == 48);
    uint64_t v40 = v111 - 1;
    v107 = v111 - 1;
    if (v113 <= 9)
    {
      int v3 = *v111;
      unsigned int v114 = v3 - 48;
      if ((v3 - 48) <= 9)
      {
        do
        {
          uint64_t v113 = 10 * v113 + v114;
          int v115 = *++v111;
          int v3 = v115;
          unsigned int v114 = v115 - 48;
        }

        while ((v115 - 48) < 0xA);
      }

      uint64_t v42 = v113;
      v107 = v111;
    }

    int v45 = (_DWORD)v107 - v110;
LABEL_230:
    int v47 = (_DWORD)v2 - (_DWORD)v107;
    uint64_t v2 = v107;
    goto LABEL_231;
  }

  if (v3 == 46)
  {
    ++v2;
    goto LABEL_216;
  }

  int v47 = 0;
LABEL_231:
  if ((v3 | 0x20) == 0x65
    && ((v116 = v2 + 1, int v117 = v2[1], v117 == 45) ? (v118 = v2 + 2) : (v118 = v2 + 1),
        v117 == 45 ? (int v119 = -1) : (int v119 = 1),
        v117 != 43 ? (v120 = v118) : (v120 = v2 + 2),
        v117 != 43 ? (int v121 = v119) : (int v121 = 1),
        *v120 - 48 <= 9))
  {
    int v122 = (*v120 - 48);
    int v124 = v120[1];
    v123 = v120 + 1;
    unsigned __int8 v125 = v124 - 48;
    if ((v124 - 48) <= 9)
    {
      do
      {
        int v122 = 10 * v122 + v125;
        int v126 = *++v123;
        unsigned __int8 v125 = v126 - 48;
      }

      while ((v126 - 48) < 0xA);
    }

    if (v123 - v2 >= 10)
    {
      if (v117 == 45 || v117 == 43) {
        v116 = v2 + 2;
      }
      uint64_t v127 = v123 - v116 + 1;
      do
      {
        int v128 = *v116++;
        --v127;
      }

      while (v128 == 48);
      if (v127 > 8) {
        int v122 = 99999999;
      }
    }

    v47 += v122 * v121;
  }

  else
  {
    v123 = v2;
  }

  v129 = *(unsigned __int8 ***)(a1 + 48);
  if (v129) {
    *v129 = v123;
  }
  if (!v45)
  {
    _platform_bzero();
    uint64_t result = 0LL;
    *(_BYTE *)(*(int *)(a1 + 12) + *(void *)(a1 + 32) - 1LL) = (*(_BYTE *)(a1 + 96) != 0) << 7;
    return result;
  }

  if (v47 + v45 < *(_DWORD *)(a1 + 16)) {
    goto LABEL_299;
  }
  if (v47 + v45 > *(_DWORD *)(a1 + 20))
  {
LABEL_293:
    overflow(a1);
    return 0LL;
  }

  if (v45 < 20)
  {
    uint64_t v40 = 0LL;
    int v133 = 0;
  }

  else
  {
    unsigned int v130 = 0;
    uint64_t v42 = 0LL;
    do
    {
      int v131 = *v40++;
      uint64_t v132 = (v131 - 48);
      if (v132 < 0xA)
      {
        uint64_t v42 = v132 + 10 * v42;
        ++v130;
      }
    }

    while (v130 < 0x13);
    int v133 = v45 - 19;
  }

  *(_DWORD *)(a1 + 72) = v45;
  *(void *)(a1 + 80) = v40;
  *(void *)(a1 + 64) = v42;
  uint64_t result = 1LL;
  *(_DWORD *)(a1 + 88) = v133;
  *(_DWORD *)(a1 + 92) = v47;
  return result;
}

        unint64_t v106 = v138;
        if (v138 == 4)
        {
          if (v139 == 2)
          {
            *(_BYTE *)v17++ = 32;
          }

          v107 = *v137;
          if (*v137)
          {
            unsigned int v108 = v137 + 1;
            while (v17 < (unint64_t)v13)
            {
              *(_BYTE *)v17++ = v107;
              int v109 = *(unsigned __int8 *)v108++;
              v107 = v109;
              if (!v109) {
                goto LABEL_229;
              }
            }

            goto LABEL_255;
          }

          goto LABEL_229;
        }
      }

      if (v106 == 2)
      {
        if (v139 == 2)
        {
          *(_BYTE *)v17++ = 32;
        }

        int v110 = *v137;
        if (*v137)
        {
          v111 = v137 + 1;
          while (v17 < (unint64_t)v13)
          {
            *(_BYTE *)v17++ = v110;
            int v112 = *(unsigned __int8 *)v111++;
            int v110 = v112;
            if (!v112) {
              goto LABEL_238;
            }
          }

          goto LABEL_255;
        }
      }

uint64_t generalSlowpath(uint64_t a1, int a2, int *a3, int a4)
{
  int v7 = *(_DWORD *)(a1 + 72);
  int v8 = *(_DWORD *)(a1 + 24);
  if (v7 > v8) {
    int v9 = v8 + 1;
  }
  else {
    int v9 = *(_DWORD *)(a1 + 72);
  }
  int v10 = *(_DWORD *)(a1 + 92) - v9 + v7;
  int v11 = (1701 * v9) >> 9;
  if (v10 >= 0) {
    int v12 = v10;
  }
  else {
    int v12 = -v10;
  }
  int v13 = (1189 * v12 + 1189) >> 9;
  int v14 = v13 + 31;
  if (v13 < -31) {
    int v14 = v13 + 62;
  }
  int v15 = v14 >> 5;
  if ((v10 & 0x80000000) == 0)
  {
    int v17 = v11 + 31;
    BOOL v16 = v11 < -31;
    int v18 = v11 + 62;
    if (!v16) {
      int v18 = v17;
    }
    int v19 = v15 + (v18 >> 5);
    if (v19 > a4) {
      generalSlowpath_cold_1();
    }
    _platform_bzero();
    unint64_t v111 = (unint64_t)a3;
    int v112 = a3;
    initMPFromDigits((uint64_t)&v111, a1);
    multiplyByFiveToTheN(&v111, v10);
    unint64_t v21 = (int *)v111;
    unint64_t v20 = (unint64_t)v112;
    int v22 = bitCountMP(v111, (uint64_t)v112);
    int v23 = v22 + v10;
    uint64_t v24 = shiftRightMPWithRounding(v21, v20, v22 - *(_DWORD *)a1, 0, *(_BYTE *)(a1 + 96), a2);
    unint64_t v26 = v25;
    if ((int)bitCountMP((uint64_t)v24, v25) <= *(_DWORD *)a1)
    {
LABEL_88:
      if (v23 > *(_DWORD *)(a1 + 8)) {
        return overflow(a1);
      }
      goto LABEL_92;
    }

    unsigned int v27 = (unsigned int *)(v24 + 1);
    unint64_t v28 = (unint64_t)*v24 >> 1;
    if ((unint64_t)(v24 + 1) < v26)
    {
      do
      {
        unint64_t v29 = *v27;
        *(v27 - 1) = v28 | ((_DWORD)v29 << 31);
        unint64_t v28 = v29 >> 1;
        ++v27;
      }

      while ((unint64_t)v27 < v26);
LABEL_80:
      int v92 = (int *)(v27 - 1);
      goto LABEL_82;
    }

    goto LABEL_81;
  }

  int v30 = v13 + *(_DWORD *)a1 + 2;
  if (v11 <= v30) {
    int v11 = v30;
  }
  int v31 = v11 + 31;
  BOOL v16 = v11 < -31;
  int v32 = v11 + 62;
  if (!v16) {
    int v32 = v31;
  }
  int v33 = (v32 >> 5) + 2;
  if (v33 + v15 > a4) {
    generalSlowpath_cold_3();
  }
  _platform_bzero();
  v107 = a3;
  unsigned int v108 = a3;
  uint64_t v34 = v33;
  __int128 v35 = (char *)&a3[v33];
  int v105 = v35;
  if (-v10 >= 27) {
    int v36 = 27;
  }
  else {
    int v36 = -v10;
  }
  unint64_t v37 = powersOfFive[v36];
  do
  {
    *(_DWORD *)__int128 v35 = v37;
    v35 += 4;
    v37 >>= 32;
  }

  while (v37);
  unint64_t v106 = v35;
  multiplyByFiveToTheN(&v105, -v10 - v36);
  int v38 = (unsigned int *)v105;
  unint64_t v39 = (unint64_t)v106;
  int64_t v40 = v106 - v105;
  if (v15 < (v106 - v105) >> 2) {
    generalSlowpath_cold_4();
  }
  if (!*((_DWORD *)v106 - 1)) {
    generalSlowpath_cold_5();
  }
  initMPFromDigits((uint64_t)&v107, a1);
  int v41 = v108;
  if (!*(v108 - 1)) {
    generalSlowpath_cold_6();
  }
  int v42 = bitCountMP((uint64_t)v38, v39);
  unsigned __int8 v43 = v107;
  int v44 = v42 - bitCountMP((uint64_t)v107, (uint64_t)v41) + *(_DWORD *)a1;
  if (v44 < -1)
  {
    int v45 = 0;
  }

  else
  {
    int v45 = v44 + 2;
    shiftLeftMP((uint64_t)&v107, v44 + 2);
    int v41 = v108;
    if (!*(v108 - 1)) {
      generalSlowpath_cold_7();
    }
    unsigned __int8 v43 = v107;
    if (v34 <= v108 - v107) {
      generalSlowpath_cold_13();
    }
  }

  unint64_t v111 = (unint64_t)v43;
  int v112 = v41;
  int v109 = v38;
  unint64_t v110 = v39;
  if (v41 <= v43) {
    generalSlowpath_cold_12();
  }
  if (!*(v41 - 1)) {
    generalSlowpath_cold_8();
  }
  unsigned int v46 = *(_DWORD *)(v39 - 4);
  if (!v46) {
    generalSlowpath_cold_9();
  }
  if (v40 == 4)
  {
    unint64_t v47 = 0LL;
    unint64_t v48 = *v38;
    int v49 = v41;
    do
    {
      unsigned int v50 = *--v49;
      unint64_t v51 = v50 | (v47 << 32);
      *int v49 = v51 / v48;
      unint64_t v47 = v51 - (v51 / v48) * (unint64_t)v48;
    }

    while (v49 > v43);
    unint64_t v52 = (unint64_t)(v41 + 1);
    do
    {
      int v53 = *(_DWORD *)(v52 - 8);
      v52 -= 4LL;
    }

    while (!v53);
    BOOL v54 = v47 != 0;
  }

  else
  {
    int v55 = __clz(v46);
    shiftLeftMP((uint64_t)&v109, v55);
    shiftLeftMP((uint64_t)&v111, v55);
    v56 = v112;
    unint64_t v57 = v110;
    if (*(v112 - 1) >= *(_DWORD *)(v110 - 4))
    {
      *int v112 = 0;
      ++v56;
    }

    int v58 = v109;
    char v59 = (unsigned int *)v111;
    unsigned __int8 v43 = v56 + 1;
    int v60 = (((unint64_t)v56 - v111) >> 2) - ((v57 - (unint64_t)v109) >> 2);
    if (v60 < 1)
    {
      v62 = (unsigned int *)v56;
    }

    else
    {
      int v61 = 0;
      v62 = (unsigned int *)v56;
      do
      {
        int v63 = v62;
        unsigned int v64 = *--v62;
        unint64_t v65 = *(v62 - 1) | ((unint64_t)v64 << 32);
        unint64_t v66 = *(unsigned int *)(v57 - 4);
        if (v64 == (_DWORD)v66) {
          LODWORD(v67) = -1;
        }
        else {
          unint64_t v67 = v65 / v66;
        }
        do
        {
          int v68 = v67;
          unsigned int v69 = v67;
          unint64_t v67 = v65 - v66 * (unint64_t)v67;
          if (HIDWORD(v67)) {
            break;
          }
          unint64_t v70 = *(v63 - 3) | (v67 << 32);
          LODWORD(v67) = v68 - 1;
        }

        while (*(unsigned int *)(v57 - 8) * (unint64_t)v69 > v70);
        if ((unint64_t)v58 < v57)
        {
          unint64_t v71 = 0LL;
          uint64_t v72 = ~((v57 - (unint64_t)v58) >> 2);
          v73 = v58;
          do
          {
            unsigned int v74 = *v73++;
            unint64_t v75 = v71 + v74 * (unint64_t)v69;
            unsigned int v76 = v63[v72];
            BOOL v77 = v76 >= v75;
            v63[v72] = v76 - v75;
            unint64_t v71 = HIDWORD(v75);
            if (!v77) {
              ++v71;
            }
            ++v72;
          }

          while ((unint64_t)v73 < v57);
          if (v71 > *v62)
          {
            unint64_t v78 = 0LL;
            uint64_t v79 = ~((v57 - (unint64_t)v58) >> 2);
            unsigned int v80 = v58;
            do
            {
              unsigned int v81 = *v80++;
              unint64_t v82 = v78 + v81 + v63[v79];
              v63[v79] = v82;
              unint64_t v78 = HIDWORD(v82);
              ++v79;
            }

            while ((unint64_t)v80 < v57);
            --v68;
          }
        }

        *--unsigned __int8 v43 = v68;
        ++v61;
      }

      while (v61 != v60);
    }

    if (v59 >= v62)
    {
      BOOL v54 = 0;
    }

    else
    {
      int v83 = 0;
      do
      {
        int v84 = *v59++;
        v83 |= v84;
      }

      while (v59 < v62);
      BOOL v54 = v83 != 0;
    }

    unint64_t v52 = (unint64_t)(v56 + 2);
    do
    {
      int v85 = *(_DWORD *)(v52 - 8);
      v52 -= 4LL;
    }

    while (!v85);
  }

  int v86 = bitCountMP((uint64_t)v43, v52);
  int v87 = v10 - v45;
  int v23 = v10 - v45 + v86;
  int v88 = *(_DWORD *)a1;
  int v89 = *(_DWORD *)(a1 + 4);
  if (v23 > v89)
  {
    uint64_t v24 = shiftRightMPWithRounding(v43, v52, v86 - v88, v54, *(_BYTE *)(a1 + 96), a2);
    unint64_t v26 = v90;
    unsigned int v27 = (unsigned int *)(v24 + 1);
    unint64_t v28 = (unint64_t)*v24 >> 1;
    if ((unint64_t)(v24 + 1) < v26)
    {
      do
      {
        unint64_t v91 = *v27;
        *(v27 - 1) = v28 | ((_DWORD)v91 << 31);
        unint64_t v28 = v91 >> 1;
        ++v27;
      }

      while ((unint64_t)v27 < v26);
      goto LABEL_80;
    }

LABEL_81:
    int v92 = v24;
LABEL_82:
    ++v23;
    if (v28) {
      *int v92 = v28;
    }
    else {
      v26 -= 4LL;
    }
    goto LABEL_88;
  }

  int v93 = v89 - v88;
  if (v23 <= v93) {
    return underflow(a1);
  }
  uint64_t v24 = shiftRightMPWithRounding(v43, v52, v93 - v87 + 1, v54, *(_BYTE *)(a1 + 96), a2);
  unint64_t v26 = v94;
  if ((int)bitCountMP((uint64_t)v24, v94) >= *(_DWORD *)a1)
  {
    int v23 = v89 + 1;
  }

  else
  {
    *__error() = 34;
    int v23 = v89;
  }

        int v17 = v11;
        if (!v9) {
          goto LABEL_90;
        }
        continue;
      }

      if (v38 >= 0x21)
      {
        int v33 = __error();
        uint64_t v34 = 62;
        goto LABEL_85;
      }

      int v30 = readlink(v7, v43, 0x400uLL);
      int v31 = v30;
      if ((unint64_t)(v30 - 1024) <= 0xFFFFFFFFFFFFFC00LL)
      {
        if (v30 < 0) {
          goto LABEL_86;
        }
        int v33 = __error();
        if (!v31)
        {
          uint64_t v34 = 2;
          goto LABEL_85;
        }

        goto LABEL_84;
      }

      v43[v30] = 0;
      if (v43[0] == 47)
      {
        v7[1] = 0;
        st_dev = realpath_rootdev;
        int v11 = 1LL;
      }

      else
      {
        int v32 = strrchr(v7, 47);
        v32[1] = 0;
        int v11 = v32 + 1 - v7;
        st_dev = v2;
      }

      if (!v19) {
        goto LABEL_79;
      }
      if (v43[v31 - 1] != 47)
      {
        if (v31 >= 0x3FF) {
          goto LABEL_83;
        }
        *(_WORD *)&v43[v31] = 47;
      }

      if ((unint64_t)_platform_strlcat() < 0x400)
      {
LABEL_79:
        ++v38;
        int v9 = _platform_strlcpy();
        goto LABEL_81;
      }

        int v17 = v11;
        if (!v9) {
          goto LABEL_90;
        }
        continue;
      }

      if (v38 >= 0x21)
      {
        int v33 = __error();
        uint64_t v34 = 62;
        goto LABEL_85;
      }

      int v30 = readlink(v7, v43, 0x400uLL);
      int v31 = v30;
      if ((unint64_t)(v30 - 1024) <= 0xFFFFFFFFFFFFFC00LL)
      {
        if (v30 < 0) {
          goto LABEL_86;
        }
        int v33 = __error();
        if (!v31)
        {
          uint64_t v34 = 2;
          goto LABEL_85;
        }

        goto LABEL_84;
      }

      v43[v30] = 0;
      if (v43[0] == 47)
      {
        v7[1] = 0;
        st_dev = realpath_DARWIN_EXTSN_rootdev;
        int v11 = 1LL;
      }

      else
      {
        int v32 = strrchr(v7, 47);
        v32[1] = 0;
        int v11 = v32 + 1 - v7;
        st_dev = v2;
      }

      if (!v19) {
        goto LABEL_79;
      }
      if (v43[v31 - 1] != 47)
      {
        if (v31 >= 0x3FF) {
          goto LABEL_83;
        }
        *(_WORD *)&v43[v31] = 47;
      }

      if ((unint64_t)_platform_strlcat() < 0x400)
      {
LABEL_79:
        ++v38;
        int v9 = _platform_strlcpy();
        goto LABEL_81;
      }

LABEL_92:
  int v96 = *(_DWORD *)a1 + 31;
  uint64_t result = _platform_memmove();
  int v97 = v23 - *(_DWORD *)(a1 + 4);
  uint64_t v98 = *(int *)(a1 + 12);
  unsigned int v99 = v97 | (*(unsigned __int8 *)(a1 + 96) << 15);
  int v100 = *(_BYTE **)(a1 + 32);
  int v101 = &v100[v98];
  HIDWORD(v102) = *(_DWORD *)(a1 + 12);
  LODWORD(v102) = v98 - 2;
  switch((v102 >> 1))
  {
    case 0u:
      int v103 = v100[1] & 3 | (v99 >> 8);
      goto LABEL_105;
    case 1u:
      char v104 = v100[2] & 0x7F;
      goto LABEL_102;
    case 3u:
      char v104 = v100[6] & 0xF;
LABEL_102:
      LOBYTE(v97) = v104 | v97;
      goto LABEL_103;
    case 4u:
    case 7u:
LABEL_103:
      *(v101 - 2) = v97;
      break;
    default:
      break;
  }

  int v103 = v99 >> 8;
LABEL_105:
  *(v101 - 1) = v103;
  return result;
}

            free(v12);
            return 4294967294LL;
          }

          int v17 = v65;
          int v18 = (void **)((char *)v65 + NOCANCEL);
        }

        uint64_t v24 = *(unsigned __int8 *)v17;
        int v17 = (void **)((char *)v17 + 1);
        int v23 = v24;
        if (v24 == 10)
        {
          if (v19 <= v12 || (--v19, *(v20 - 1) != 92))
          {
            *unint64_t v20 = 0;
            int v19 = v12;
            if (*v12)
            {
              int v19 = v12;
              if (*v12 != 35)
              {
                int v19 = v12;
                if (!cgetmatch(v12, a5))
                {
                  a4 = v15;
                  goto LABEL_36;
                }
              }
            }
          }
        }

        else
        {
          *v19++ = v23;
          if ((unint64_t)(v20 + 1) >= v14)
          {
            uint64_t v25 = v14 - (void)v12 + 1024;
            unint64_t v26 = reallocf(v12, v25);
            if (!v26)
            {
              *__error() = 12;
              if ((a4 & 0x80000000) != 0) {
                close_NOCANCEL();
              }
              return 4294967294LL;
            }

            int v14 = (unint64_t)&v26[v25];
            int v19 = &v26[(_DWORD)v19 - (_DWORD)v12];
            int v12 = v26;
          }
        }
      }
    }

uint64_t infinity(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 12);
  switch(v1)
  {
    case 8:
      unint64_t v3 = 0xFFF0000000000000LL;
      if (!*(_BYTE *)(result + 96)) {
        unint64_t v3 = 0x7FF0000000000000LL;
      }
      **(void **)(result + 32) = v3;
      break;
    case 4:
      if (*(_BYTE *)(result + 96)) {
        int v4 = -8388608;
      }
      else {
        int v4 = 2139095040;
      }
      **(_DWORD **)(result + 32) = v4;
      break;
    case 2:
      if (*(_BYTE *)(result + 96)) {
        __int16 v2 = -1024;
      }
      else {
        __int16 v2 = 31744;
      }
      **(_WORD **)(result + 32) = v2;
      break;
    default:
      return _platform_bzero();
  }

  return result;
}

uint64_t underflow(uint64_t a1)
{
  *__error() = 34;
  uint64_t result = fegetround();
  if ((_DWORD)result == 0x400000)
  {
    if (!*(_BYTE *)(a1 + 96)) {
      goto LABEL_7;
    }
LABEL_6:
    unsigned int v3 = 0;
    goto LABEL_8;
  }

  if ((_DWORD)result != 0x800000) {
    goto LABEL_6;
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 96);
  if (*(_BYTE *)(a1 + 96)) {
LABEL_7:
  }
    unsigned int v3 = 1;
LABEL_8:
  int v4 = *(_DWORD *)(a1 + 12);
  switch(v4)
  {
    case 8:
      **(void **)(a1 + 32) = v3 | ((unint64_t)(*(_BYTE *)(a1 + 96) != 0) << 63);
      break;
    case 4:
      **(_DWORD **)(a1 + 32) = v3 | ((*(_BYTE *)(a1 + 96) != 0) << 31);
      break;
    case 2:
      **(_WORD **)(a1 + 32) = v3 | ((*(_BYTE *)(a1 + 96) != 0) << 15);
      break;
  }

  return result;
}

uint64_t overflow(uint64_t a1)
{
  *__error() = 34;
  uint64_t result = fegetround();
  BOOL v3 = result != 0x800000;
  BOOL v4 = (_DWORD)result == 0x400000;
  if (*(_BYTE *)(a1 + 96)) {
    BOOL v3 = 1;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4 && (_DWORD)result != 12582912 && v3) {
    return infinity(a1);
  }
  int v5 = *(_DWORD *)(a1 + 12);
  switch(v5)
  {
    case 8:
      unint64_t v7 = 0xFFEFFFFFFFFFFFFFLL;
      if (!*(_BYTE *)(a1 + 96)) {
        unint64_t v7 = 0x7FEFFFFFFFFFFFFFLL;
      }
      **(void **)(a1 + 32) = v7;
      break;
    case 4:
      if (*(_BYTE *)(a1 + 96)) {
        int v8 = -8388609;
      }
      else {
        int v8 = 2139095039;
      }
      **(_DWORD **)(a1 + 32) = v8;
      break;
    case 2:
      if (*(_BYTE *)(a1 + 96)) {
        __int16 v6 = -1025;
      }
      else {
        __int16 v6 = 31743;
      }
      **(_WORD **)(a1 + 32) = v6;
      break;
    default:
      return _platform_memset();
  }

  return result;
}

uint64_t addToMP(uint64_t result, unint64_t a2)
{
  __int16 v2 = *(_DWORD **)result;
  if (a2)
  {
    unint64_t v3 = *(void *)(result + 8);
    do
    {
      unint64_t v4 = a2 + *v2;
      *v2++ = v4;
      a2 = HIDWORD(v4);
    }

    while (HIDWORD(v4));
    for (; a2; a2 >>= 32)
      *v2++ = a2;
  }

  return result;
}

uint64_t initMPFromDigits(uint64_t result, uint64_t a2)
{
  __int16 v2 = (void *)result;
  unint64_t v3 = *(_DWORD **)result;
  for (unint64_t i = *(void *)(a2 + 64); i; i >>= 32)
    *v3++ = i;
  *(void *)(result + 8) = v3;
  int v5 = *(_DWORD *)(a2 + 72);
  int v6 = *(_DWORD *)(a2 + 24);
  if (v5 <= v6) {
    int v7 = *(_DWORD *)(a2 + 88);
  }
  else {
    int v7 = *(_DWORD *)(a2 + 88) - v5 + v6;
  }
  if (v5 <= v6) {
    int v8 = 0;
  }
  else {
    int v8 = v5 - v6;
  }
  int v9 = *(unsigned __int8 **)(a2 + 80);
  if (v7 >= 1)
  {
    do
    {
      int v10 = 0;
      unint64_t v11 = 0LL;
      if (v7 >= 9) {
        unsigned int v12 = 9;
      }
      else {
        unsigned int v12 = v7;
      }
      do
      {
        do
        {
          int v13 = *v9++;
          unsigned int v14 = v13 - 48;
        }

        while ((v13 - 48) > 9);
        unint64_t v11 = 10 * v11 + v14;
        ++v10;
      }

      while (v10 != v12);
      BOOL v16 = (_DWORD *)*v2;
      int v15 = (_DWORD *)v2[1];
      if (*v2 < (unint64_t)v15)
      {
        unint64_t v17 = 0LL;
        unsigned int v18 = initMPFromDigits_powersOfTen[v12];
        do
        {
          unint64_t v19 = v17 + *v16 * (unint64_t)v18;
          *v16++ = v19;
          unint64_t v17 = HIDWORD(v19);
        }

        while (v16 < v15);
        if (v17)
        {
          *int v15 = v17;
          v2[1] = v15 + 1;
        }
      }

      uint64_t result = addToMP((uint64_t)v2, v11);
      BOOL v20 = __OFSUB__(v7, v12);
      v7 -= v12;
    }

    while (!((v7 < 0) ^ v20 | (v7 == 0)));
  }

  if (v8 >= 1)
  {
    int v22 = (_DWORD *)*v2;
    unint64_t v21 = (_DWORD *)v2[1];
    if (*v2 < (unint64_t)v21)
    {
      unint64_t v23 = 0LL;
      do
      {
        unint64_t v24 = v23 + 10LL * *v22;
        *v22++ = v24;
        unint64_t v23 = HIDWORD(v24);
      }

      while (v22 < v21);
      if (v23)
      {
        *unint64_t v21 = v23;
        v2[1] = v21 + 1;
      }
    }

    do
    {
      int v25 = *v9;
      if (v25 == 48)
      {
        --v8;
      }

      else if ((v25 - 49) <= 8)
      {
        return addToMP((uint64_t)v2, 1uLL);
      }

      ++v9;
    }

    while (v8 > 0);
  }

  return result;
}

void *multiplyByFiveToTheN(void *result, int a2)
{
  if (a2 >= 41)
  {
    __int16 v2 = (_DWORD *)*result;
    unint64_t v3 = (_DWORD *)result[1];
    do
    {
      int v4 = a2;
      int v5 = v3;
      unint64_t v3 = v2;
      if (v2 < v5)
      {
        unint64_t v6 = 0LL;
        unint64_t v7 = 0LL;
        unint64_t v3 = v2;
        do
        {
          signed __int128 v8 = __PAIR128__(493038065LL, 0xC35CA4BFABB9F561LL) * *v3 + __PAIR128__(v7, v6);
          *v3++ = v8;
          unint64_t v6 = v8 >> 32;
          unint64_t v7 = HIDWORD(*((void *)&v8 + 1));
        }

        while (v3 < v5);
        if (*((void *)&v8 + 1) | DWORD1(v8))
        {
          do
          {
            *v3++ = v6;
            *((void *)&v9 + 1) = v7;
            *(void *)&__int128 v9 = v6;
            unint64_t v6 = v9 >> 32;
            unint64_t v10 = v6 | HIDWORD(v7);
            v7 >>= 32;
          }

          while (v10);
        }
      }

      a2 -= 40;
    }

    while (v4 > 80);
    result[1] = v3;
  }

  if (a2 >= 1)
  {
    unint64_t v11 = (_DWORD *)*result;
    unsigned int v12 = (_DWORD *)result[1];
    do
    {
      int v13 = v12;
      if (a2 >= 27) {
        unsigned int v14 = 27;
      }
      else {
        unsigned int v14 = a2;
      }
      unsigned int v12 = v11;
      if (v11 < v13)
      {
        unint64_t v15 = 0LL;
        unint64_t v16 = 0LL;
        unint64_t v17 = powersOfFive[v14];
        unsigned int v12 = v11;
        do
        {
          signed __int128 v18 = *v12 * (unsigned __int128)v17 + __PAIR128__(v16, v15);
          *v12++ = v18;
          unint64_t v15 = v18 >> 32;
          unint64_t v16 = HIDWORD(*((void *)&v18 + 1));
        }

        while (v12 < v13);
        if (*((void *)&v18 + 1) | DWORD1(v18))
        {
          do
          {
            *v12++ = v15;
            *((void *)&v19 + 1) = v16;
            *(void *)&__int128 v19 = v15;
            unint64_t v15 = v19 >> 32;
            unint64_t v20 = v15 | HIDWORD(v16);
            v16 >>= 32;
          }

          while (v20);
        }
      }

      BOOL v21 = __OFSUB__(a2, 27);
      a2 -= 27;
    }

    while (!((a2 < 0) ^ v21 | (a2 == 0)));
    result[1] = v12;
  }

  return result;
}

uint64_t bitCountMP(uint64_t a1, uint64_t a2)
{
  if (a2 == a1) {
    return 0LL;
  }
  unsigned int v2 = *(_DWORD *)(a2 - 4);
  if (!v2) {
    bitCountMP_cold_1();
  }
  return 8 * ((_DWORD)a2 - (_DWORD)a1) - __clz(v2);
}

int *shiftRightMPWithRounding(int *result, unint64_t a2, unsigned int a3, int a4, char a5, int a6)
{
  unint64_t v6 = result;
  v32[0] = result;
  v32[1] = a2;
  if (!a3) {
    return result;
  }
  if ((a3 & 0x80000000) != 0)
  {
    shiftLeftMP((uint64_t)v32, -a3);
    return (int *)v32[0];
  }

  result += a3 >> 5;
  char v7 = a3 & 0x1F;
  if ((a3 & 0x1F) == 0)
  {
    HIDWORD(v14) = a6;
    LODWORD(v14) = a6;
    int v13 = v14 >> 22;
    if (v13 != 1)
    {
      if (v13 == 3) {
        return result;
      }
      if (v13 != 2)
      {
        unint64_t v29 = result - 1;
        int v30 = *(result - 1);
        if ((v30 & 0x80000000) == 0) {
          return result;
        }
        if (v30 == 0x80000000)
        {
          for (; v6 < v29; a4 |= v31)
            int v31 = *v6++;
        }

LABEL_19:
        uint64_t v17 = 1LL;
        signed __int128 v18 = result;
        do
        {
          unint64_t v19 = v17 + *v18;
          *v18++ = v19;
          uint64_t v17 = HIDWORD(v19);
        }

        while (v17);
        goto LABEL_46;
      }

      a5 ^= 1u;
    }

    if (a3 >= 0x20)
    {
      do
      {
        int v15 = *v6++;
        a4 |= v15;
      }

      while (v6 < result);
    }

    if (a4) {
      char v16 = a5;
    }
    else {
      char v16 = 1;
    }
    if ((v16 & 1) != 0) {
      return result;
    }
    goto LABEL_19;
  }

  __int128 v9 = (unsigned int *)(result + 1);
  int v8 = *result;
  unint64_t v10 = *result >> v7;
  if ((unint64_t)(result + 1) >= a2)
  {
    unsigned int v12 = (unsigned int *)&v6[a3 >> 5];
  }

  else
  {
    do
    {
      unint64_t v11 = (unint64_t)*v9 << (32 - v7);
      *(v9 - 1) = v11 | v10;
      unint64_t v10 = HIDWORD(v11);
      ++v9;
    }

    while ((unint64_t)v9 < a2);
    unsigned int v12 = v9 - 1;
  }

  if (v10) {
    *unsigned int v12 = v10;
  }
  else {
    a2 -= 4LL;
  }
  unsigned int v20 = v8 & ~(-1 << v7);
  HIDWORD(v22) = a6;
  LODWORD(v22) = a6;
  int v21 = v22 >> 22;
  switch(v21)
  {
    case 1:
      goto LABEL_31;
    case 3:
      return result;
    case 2:
      a5 ^= 1u;
LABEL_31:
      int v23 = v20 | a4;
      if (a3 >= 0x20)
      {
        do
        {
          int v24 = *v6++;
          v23 |= v24;
        }

        while (v6 < result);
      }

      if (v23) {
        char v25 = a5;
      }
      else {
        char v25 = 1;
      }
      if ((v25 & 1) != 0) {
        return result;
      }
      goto LABEL_43;
  }

  unsigned int v26 = 1 << (v7 - 1);
  if (v20 >= v26)
  {
    if (v20 > v26) {
      goto LABEL_43;
    }
    if (a3 >= 0x20)
    {
      do
      {
        int v27 = *v6++;
        a4 |= v27;
      }

      while (v6 < result);
    }

    if (a4 || a2 > (unint64_t)result && (*(_BYTE *)result & 1) != 0)
    {
LABEL_43:
      uint64_t v17 = 1LL;
      signed __int128 v18 = result;
      do
      {
        unint64_t v28 = v17 + *v18;
        *v18++ = v28;
        uint64_t v17 = HIDWORD(v28);
      }

      while (v17);
LABEL_46:
      if (v17) {
        *signed __int128 v18 = v17;
      }
    }
  }

  return result;
}

  uint64_t result = 0xFFFFFFFFLL;
LABEL_21:
  *(void *)(v11 + 8LL * (*(void *)a2 + *(void *)(a2 + 16))) = 0LL;
  return result;
}

      ++v1;
    }
  }

  return v4;
}

    if (v8 <= __maxval)
    {
      unint64_t v10 = 0LL;
      __int128 v9 = v8;
      goto LABEL_6;
    }

        uint64_t v72 = v4;
LABEL_31:
        char v7 = v72;
        goto LABEL_7;
      case 'A':
      case 'E':
      case 'F':
      case 'G':
      case 'a':
      case 'e':
      case 'f':
      case 'g':
        uint64_t v72 = v4;
        if ((v6 & 8) != 0) {
          char v16 = 23;
        }
        else {
          char v16 = 22;
        }
        goto LABEL_83;
      case 'C':
        uint64_t v72 = v4;
        LOWORD(v6) = v6 | 0x10;
        goto LABEL_77;
      case 'D':
        uint64_t v72 = v4;
        LOWORD(v6) = v6 | 0x10;
        goto LABEL_41;
      case 'L':
        uint64_t v72 = v4;
        v6 |= 8u;
        goto LABEL_31;
      case 'O':
        uint64_t v72 = v4;
        LOWORD(v6) = v6 | 0x10;
        goto LABEL_119;
      case 'S':
        LOBYTE(v6) = 16;
        goto LABEL_50;
      case 'U':
        uint64_t v72 = v4;
        LOWORD(v6) = v6 | 0x10;
        goto LABEL_54;
      case 'X':
      case 'u':
      case 'x':
        uint64_t v72 = v4;
LABEL_54:
        int v24 = v71;
        char v25 = v70;
        unsigned int v26 = v71 < (int)v70;
        goto LABEL_55;
      case 'c':
        uint64_t v72 = v4;
LABEL_77:
        if ((v6 & 0x4000) != 0) {
          int v32 = 26;
        }
        else {
          int v32 = 2;
        }
        if ((v6 & 0x10) != 0) {
          char v16 = 24;
        }
        else {
          char v16 = v32;
        }
        goto LABEL_83;
      case 'd':
      case 'i':
        uint64_t v72 = v4;
LABEL_41:
        uint64_t v17 = v71;
        signed __int128 v18 = v70;
        unint64_t v19 = __ptr;
        else {
          unsigned int v20 = 2 * v70;
        }
        if ((_DWORD)v70 == 8)
        {
          int v21 = malloc(4LL * v20);
          if (!v21) {
            goto LABEL_182;
          }
          unint64_t v22 = v21;
          int v23 = v19[1];
          *int v21 = *v19;
          v21[1] = v23;
        }

        else
        {
          unint64_t v22 = realloc(__ptr, 4LL * v20);
          if (!v22) {
            goto LABEL_182;
          }
        }

        if (v18 < v20) {
          _platform_bzero();
        }
        __ptr = v22;
        LODWORD(v70) = v20;
        uint64_t v17 = v71;
LABEL_138:
        if (v17 > SHIDWORD(v70)) {
          HIDWORD(v70) = v17;
        }
        if ((v6 & 0x1000) != 0)
        {
          unint64_t v71 = v17 + 1;
          *((_DWORD *)__ptr + v17) = 16;
        }

        else if ((v6 & 0x400) != 0)
        {
          unint64_t v71 = v17 + 1;
          *((_DWORD *)__ptr + v17) = 13;
        }

        else if ((v6 & 0x800) != 0)
        {
          unint64_t v71 = v17 + 1;
          *((_DWORD *)__ptr + v17) = 11;
        }

        else if ((v6 & 0x20) != 0)
        {
          unint64_t v71 = v17 + 1;
          *((_DWORD *)__ptr + v17) = 8;
        }

        else
        {
          unint64_t v71 = v17 + 1;
          if ((v6 & 0x10) != 0) {
            *((_DWORD *)__ptr + v17) = 5;
          }
          else {
            *((_DWORD *)__ptr + v17) = 2;
          }
        }

        goto LABEL_3;
      case 'h':
        uint64_t v72 = v4;
        int v13 = v6 & 0xFFFFDFBF | 0x2000;
        unint64_t v14 = v6 | 0x40;
        int v15 = (v6 & 0x40) == 0;
        goto LABEL_25;
      case 'j':
        uint64_t v72 = v4;
        v6 |= 0x1000u;
        goto LABEL_31;
      case 'l':
        uint64_t v72 = v4;
        int v13 = v6 & 0xFFFFFFCF | 0x20;
        unint64_t v14 = v6 | 0x10;
        int v15 = (v6 & 0x10) == 0;
LABEL_25:
        if (v15) {
          unint64_t v6 = v14;
        }
        else {
          unint64_t v6 = v13;
        }
        goto LABEL_31;
      case 'n':
        uint64_t v72 = v4;
        if ((v6 & 0x1000) != 0)
        {
          int v58 = v71;
          char v59 = v70;
          if (v71 >= (int)v70)
          {
            int v60 = __ptr;
            else {
              int v61 = 2 * v70;
            }
            if ((_DWORD)v70 == 8)
            {
              v62 = malloc(4LL * v61);
              if (!v62) {
                goto LABEL_182;
              }
              int v63 = v62;
              unsigned int v64 = v60[1];
              unsigned int *v62 = *v60;
              v62[1] = v64;
            }

            else
            {
              int v63 = realloc(__ptr, 4LL * v61);
              if (!v63) {
                goto LABEL_182;
              }
            }

            if (v59 < v61) {
              _platform_bzero();
            }
            __ptr = v63;
            LODWORD(v70) = v61;
            int v58 = v71;
          }

          if (v58 > SHIDWORD(v70)) {
            HIDWORD(v70) = v58;
          }
          unint64_t v71 = v58 + 1;
          *((_DWORD *)__ptr + v58) = 18;
          goto LABEL_3;
        }

        if ((v6 & 0x2000) != 0) {
          int64_t v40 = 21;
        }
        else {
          int64_t v40 = 4;
        }
        if ((v6 & 0x40) != 0) {
          int v41 = 1;
        }
        else {
          int v41 = v40;
        }
        if ((v6 & 0x10) != 0) {
          int v42 = 7;
        }
        else {
          int v42 = v41;
        }
        if ((v6 & 0x20) != 0) {
          unsigned __int8 v43 = 10;
        }
        else {
          unsigned __int8 v43 = v42;
        }
        if ((v6 & 0x400) != 0) {
          int v44 = 15;
        }
        else {
          int v44 = v43;
        }
        if ((v6 & 0x800) != 0) {
          int v45 = 12;
        }
        else {
          int v45 = v44;
        }
LABEL_182:
        unint64_t v65 = 0;
LABEL_183:
        if (__ptr != v69) {
          free(__ptr);
        }
        return !v65 || *a3 == 0LL;
      case 'o':
        uint64_t v72 = v4;
LABEL_119:
        int v24 = v71;
        char v25 = v70;
        unsigned int v26 = v71 < (int)v70;
        if ((v6 & 0x4000) != 0)
        {
          if (v71 >= (int)v70)
          {
            unsigned int v46 = __ptr;
            else {
              unint64_t v47 = 2 * v70;
            }
            if ((_DWORD)v70 == 8)
            {
              unint64_t v48 = malloc(4LL * v47);
              if (!v48) {
                goto LABEL_182;
              }
              int v49 = v48;
              unsigned int v50 = v46[1];
              lconv *v48 = *v46;
              v48[1] = v50;
            }

            else
            {
              int v49 = realloc(__ptr, 4LL * v47);
              if (!v49) {
                goto LABEL_182;
              }
            }

            if (v25 < v47) {
              _platform_bzero();
            }
            __ptr = v49;
            LODWORD(v70) = v47;
            int v24 = v71;
          }

          if (v24 > SHIDWORD(v70)) {
            HIDWORD(v70) = v24;
          }
          unint64_t v71 = v24 + 1;
          *((_DWORD *)__ptr + v24) = 26;
        }

        else
        {
LABEL_55:
          if (!v26)
          {
            int v27 = __ptr;
            if (2 * v25 <= v24) {
              unint64_t v28 = v24 + 1;
            }
            else {
              unint64_t v28 = 2 * v25;
            }
            if (v25 == 8)
            {
              unint64_t v29 = malloc(4LL * v28);
              if (!v29) {
                goto LABEL_182;
              }
              int v30 = v29;
              int v31 = v27[1];
              *unint64_t v29 = *v27;
              v29[1] = v31;
            }

            else
            {
              int v30 = realloc(__ptr, 4LL * v28);
              if (!v30) {
                goto LABEL_182;
              }
            }

            if (v25 < v28) {
              _platform_bzero();
            }
            __ptr = v30;
            LODWORD(v70) = v28;
            int v24 = v71;
          }

          if (v24 > SHIDWORD(v70)) {
            HIDWORD(v70) = v24;
          }
          if ((v6 & 0x1000) != 0)
          {
            unint64_t v71 = v24 + 1;
            *((_DWORD *)__ptr + v24) = 17;
          }

          else if ((v6 & 0x400) != 0 || (v6 & 0x800) != 0)
          {
            unint64_t v71 = v24 + 1;
            *((_DWORD *)__ptr + v24) = 14;
          }

          else if ((v6 & 0x20) != 0)
          {
            unint64_t v71 = v24 + 1;
            *((_DWORD *)__ptr + v24) = 9;
          }

          else
          {
            unint64_t v71 = v24 + 1;
            if ((v6 & 0x10) != 0) {
              *((_DWORD *)__ptr + v24) = 6;
            }
            else {
              *((_DWORD *)__ptr + v24) = 3;
            }
          }
        }

        goto LABEL_3;
      case 'p':
        uint64_t v72 = v4;
        unint64_t v51 = v71;
        unint64_t v52 = v70;
        int v53 = __ptr;
        else {
          BOOL v54 = 2 * v70;
        }
        if ((_DWORD)v70 == 8)
        {
          int v55 = malloc(4LL * v54);
          if (!v55) {
            goto LABEL_182;
          }
          v56 = v55;
          unint64_t v57 = v53[1];
          *int v55 = *v53;
          v55[1] = v57;
        }

        else
        {
          v56 = realloc(__ptr, 4LL * v54);
          if (!v56) {
            goto LABEL_182;
          }
        }

        if (v52 < v54) {
          _platform_bzero();
        }
        __ptr = v56;
        LODWORD(v70) = v54;
        unint64_t v51 = v71;
LABEL_168:
        if (v51 > SHIDWORD(v70)) {
          HIDWORD(v70) = v51;
        }
        unint64_t v71 = v51 + 1;
        *((_DWORD *)__ptr + v51) = 19;
        goto LABEL_3;
      case 'q':
        uint64_t v72 = v4;
        v6 |= 0x20u;
        goto LABEL_31;
      case 's':
LABEL_50:
        uint64_t v72 = v4;
        if ((v6 & 0x10) != 0) {
          char v16 = 25;
        }
        else {
          char v16 = 20;
        }
LABEL_83:
        int v33 = v71;
        uint64_t v34 = v70;
        __int128 v35 = __ptr;
        else {
          int v36 = 2 * v70;
        }
        if ((_DWORD)v70 == 8)
        {
          unint64_t v37 = malloc(4LL * v36);
          if (!v37) {
            goto LABEL_182;
          }
          int v38 = v37;
          unint64_t v39 = v35[1];
          *unint64_t v37 = *v35;
          v37[1] = v39;
        }

        else
        {
          int v38 = realloc(__ptr, 4LL * v36);
          if (!v38) {
            goto LABEL_182;
          }
        }

        if (v34 < v36) {
          _platform_bzero();
        }
        __ptr = v38;
        LODWORD(v70) = v36;
        int v33 = v71;
LABEL_94:
        if (v33 > SHIDWORD(v70)) {
          HIDWORD(v70) = v33;
        }
        unint64_t v71 = v33 + 1;
        *((_DWORD *)__ptr + v33) = v16;
        goto LABEL_3;
      case 't':
        uint64_t v72 = v4;
        v6 |= 0x800u;
        goto LABEL_31;
      case 'z':
        uint64_t v72 = v4;
        v6 |= 0x400u;
        goto LABEL_31;
      default:
        uint64_t v72 = v4;
        if (!v8) {
          goto LABEL_181;
        }
        goto LABEL_3;
    }
  }

        unsigned int v69 = a1;
LABEL_31:
        char v7 = v69;
        goto LABEL_7;
      case 'A':
      case 'E':
      case 'F':
      case 'G':
      case 'a':
      case 'e':
      case 'f':
      case 'g':
        unsigned int v69 = a1;
        if ((v6 & 8) != 0) {
          uint64_t v17 = 23;
        }
        else {
          uint64_t v17 = 22;
        }
        goto LABEL_76;
      case 'C':
        LOBYTE(v6) = 16;
        goto LABEL_62;
      case 'D':
        unsigned int v69 = a1;
        LOWORD(v6) = v6 | 0x10;
        goto LABEL_64;
      case 'L':
        unsigned int v69 = a1;
        v6 |= 8u;
        goto LABEL_31;
      case 'O':
      case 'U':
        unsigned int v69 = a1;
        LOWORD(v6) = v6 | 0x10;
        goto LABEL_37;
      case 'S':
        LOBYTE(v6) = 16;
        goto LABEL_72;
      case 'X':
      case 'o':
      case 'u':
      case 'x':
        unsigned int v69 = a1;
LABEL_37:
        signed __int128 v18 = v68;
        unint64_t v19 = v67;
        unsigned int v20 = __ptr;
        else {
          int v21 = 2 * v67;
        }
        if ((_DWORD)v67 == 8)
        {
          unint64_t v22 = malloc(4LL * v21);
          if (!v22) {
            goto LABEL_159;
          }
          int v23 = v22;
          int v24 = v20[1];
          *unint64_t v22 = *v20;
          v22[1] = v24;
        }

        else
        {
          int v23 = realloc(__ptr, 4LL * v21);
          if (!v23) {
            goto LABEL_159;
          }
        }

        if (v19 < v21) {
          _platform_bzero();
        }
        __ptr = v23;
        LODWORD(v67) = v21;
        signed __int128 v18 = v68;
LABEL_49:
        if (v18 > SHIDWORD(v67)) {
          HIDWORD(v67) = v18;
        }
        if ((v6 & 0x1000) != 0)
        {
          int v68 = v18 + 1;
          *((_DWORD *)__ptr + v18) = 17;
        }

        else if ((v6 & 0x400) != 0 || (v6 & 0x800) != 0)
        {
          int v68 = v18 + 1;
          *((_DWORD *)__ptr + v18) = 14;
        }

        else if ((v6 & 0x20) != 0)
        {
          int v68 = v18 + 1;
          *((_DWORD *)__ptr + v18) = 9;
        }

        else
        {
          int v68 = v18 + 1;
          if ((v6 & 0x10) != 0) {
            *((_DWORD *)__ptr + v18) = 6;
          }
          else {
            *((_DWORD *)__ptr + v18) = 3;
          }
        }

        goto LABEL_3;
      case 'c':
LABEL_62:
        unsigned int v69 = a1;
        char v25 = (v6 & 0x10) == 0;
        unsigned int v26 = 24;
        int v27 = 2;
        goto LABEL_73;
      case 'd':
      case 'i':
        unsigned int v69 = a1;
LABEL_64:
        unint64_t v28 = v68;
        unint64_t v29 = v67;
        int v30 = __ptr;
        else {
          int v31 = 2 * v67;
        }
        if ((_DWORD)v67 == 8)
        {
          int v32 = malloc(4LL * v31);
          if (!v32) {
            goto LABEL_159;
          }
          int v33 = v32;
          uint64_t v34 = v30[1];
          *int v32 = *v30;
          v32[1] = v34;
        }

        else
        {
          int v33 = realloc(__ptr, 4LL * v31);
          if (!v33) {
            goto LABEL_159;
          }
        }

        if (v29 < v31) {
          _platform_bzero();
        }
        __ptr = v33;
        LODWORD(v67) = v31;
        unint64_t v28 = v68;
LABEL_122:
        if (v28 > SHIDWORD(v67)) {
          HIDWORD(v67) = v28;
        }
        if ((v6 & 0x1000) != 0)
        {
          int v68 = v28 + 1;
          *((_DWORD *)__ptr + v28) = 16;
        }

        else if ((v6 & 0x400) != 0)
        {
          int v68 = v28 + 1;
          *((_DWORD *)__ptr + v28) = 13;
        }

        else if ((v6 & 0x800) != 0)
        {
          int v68 = v28 + 1;
          *((_DWORD *)__ptr + v28) = 11;
        }

        else if ((v6 & 0x20) != 0)
        {
          int v68 = v28 + 1;
          *((_DWORD *)__ptr + v28) = 8;
        }

        else
        {
          int v68 = v28 + 1;
          if ((v6 & 0x10) != 0) {
            *((_DWORD *)__ptr + v28) = 5;
          }
          else {
            *((_DWORD *)__ptr + v28) = 2;
          }
        }

        goto LABEL_3;
      case 'h':
        unsigned int v69 = a1;
        unint64_t v14 = v6 & 0xFFFFDFBF | 0x2000;
        int v15 = v6 | 0x40;
        char v16 = (v6 & 0x40) == 0;
        goto LABEL_25;
      case 'j':
        unsigned int v69 = a1;
        v6 |= 0x1000u;
        goto LABEL_31;
      case 'l':
        unsigned int v69 = a1;
        unint64_t v14 = v6 & 0xFFFFFFCF | 0x20;
        int v15 = v6 | 0x10;
        char v16 = (v6 & 0x10) == 0;
LABEL_25:
        if (v16) {
          unint64_t v6 = v15;
        }
        else {
          unint64_t v6 = v14;
        }
        goto LABEL_31;
      case 'n':
        unsigned int v69 = a1;
        if ((v6 & 0x1000) != 0)
        {
          int v55 = v68;
          v56 = v67;
          if (v68 >= (int)v67)
          {
            unint64_t v57 = __ptr;
            else {
              int v58 = 2 * v67;
            }
            if ((_DWORD)v67 == 8)
            {
              char v59 = malloc(4LL * v58);
              if (!v59) {
                goto LABEL_159;
              }
              int v60 = v59;
              int v61 = v57[1];
              *char v59 = *v57;
              v59[1] = v61;
            }

            else
            {
              int v60 = realloc(__ptr, 4LL * v58);
              if (!v60) {
                goto LABEL_159;
              }
            }

            if (v56 < v58) {
              _platform_bzero();
            }
            __ptr = v60;
            LODWORD(v67) = v58;
            int v55 = v68;
          }

          if (v55 > SHIDWORD(v67)) {
            HIDWORD(v67) = v55;
          }
          int v68 = v55 + 1;
          *((_DWORD *)__ptr + v55) = 18;
          goto LABEL_3;
        }

        if ((v6 & 0x2000) != 0) {
          int v42 = 21;
        }
        else {
          int v42 = 4;
        }
        if ((v6 & 0x40) != 0) {
          unsigned __int8 v43 = 1;
        }
        else {
          unsigned __int8 v43 = v42;
        }
        if ((v6 & 0x10) != 0) {
          int v44 = 7;
        }
        else {
          int v44 = v43;
        }
        if ((v6 & 0x20) != 0) {
          int v45 = 10;
        }
        else {
          int v45 = v44;
        }
        if ((v6 & 0x400) != 0) {
          unsigned int v46 = 15;
        }
        else {
          unsigned int v46 = v45;
        }
        if ((v6 & 0x800) != 0) {
          unint64_t v47 = 12;
        }
        else {
          unint64_t v47 = v46;
        }
LABEL_159:
        v62 = 0;
LABEL_160:
        if (__ptr != v66) {
          free(__ptr);
        }
        return !v62 || *a3 == 0LL;
      case 'p':
        unsigned int v69 = a1;
        unint64_t v48 = v68;
        int v49 = v67;
        unsigned int v50 = __ptr;
        else {
          unint64_t v51 = 2 * v67;
        }
        if ((_DWORD)v67 == 8)
        {
          unint64_t v52 = malloc(4LL * v51);
          if (!v52) {
            goto LABEL_159;
          }
          int v53 = v52;
          BOOL v54 = v50[1];
          int *v52 = *v50;
          v52[1] = v54;
        }

        else
        {
          int v53 = realloc(__ptr, 4LL * v51);
          if (!v53) {
            goto LABEL_159;
          }
        }

        if (v49 < v51) {
          _platform_bzero();
        }
        __ptr = v53;
        LODWORD(v67) = v51;
        unint64_t v48 = v68;
LABEL_145:
        if (v48 > SHIDWORD(v67)) {
          HIDWORD(v67) = v48;
        }
        int v68 = v48 + 1;
        *((_DWORD *)__ptr + v48) = 19;
        goto LABEL_3;
      case 'q':
        unsigned int v69 = a1;
        v6 |= 0x20u;
        goto LABEL_31;
      case 's':
LABEL_72:
        unsigned int v69 = a1;
        char v25 = (v6 & 0x10) == 0;
        unsigned int v26 = 25;
        int v27 = 20;
LABEL_73:
        if (v25) {
          uint64_t v17 = v27;
        }
        else {
          uint64_t v17 = v26;
        }
LABEL_76:
        __int128 v35 = v68;
        int v36 = v67;
        unint64_t v37 = __ptr;
        else {
          int v38 = 2 * v67;
        }
        if ((_DWORD)v67 == 8)
        {
          unint64_t v39 = malloc(4LL * v38);
          if (!v39) {
            goto LABEL_159;
          }
          int64_t v40 = v39;
          int v41 = v37[1];
          *unint64_t v39 = *v37;
          v39[1] = v41;
        }

        else
        {
          int64_t v40 = realloc(__ptr, 4LL * v38);
          if (!v40) {
            goto LABEL_159;
          }
        }

        if (v36 < v38) {
          _platform_bzero();
        }
        __ptr = v40;
        LODWORD(v67) = v38;
        __int128 v35 = v68;
LABEL_87:
        if (v35 > SHIDWORD(v67)) {
          HIDWORD(v67) = v35;
        }
        int v68 = v35 + 1;
        *((_DWORD *)__ptr + v35) = v17;
        goto LABEL_3;
      case 't':
        unsigned int v69 = a1;
        v6 |= 0x800u;
        goto LABEL_31;
      case 'z':
        unsigned int v69 = a1;
        v6 |= 0x400u;
        goto LABEL_31;
      default:
        unsigned int v69 = a1;
        if (!v8) {
          goto LABEL_158;
        }
        goto LABEL_3;
    }
  }

    unint64_t v14 = v19 - 48;
    LOBYTE(v21) = *v17;
    if (!*v17)
    {
      LOBYTE(v15) = 0;
      goto LABEL_28;
    }

    while ((v21 & 0x80) == 0)
    {
LABEL_24:
      unint64_t v22 = v17 + 1;
      int v21 = v17[1];
      unint64_t v14 = (char)*v17++ + 10 * v14 - 48;
      if (!v21)
      {
        LOBYTE(v15) = 0;
        uint64_t v17 = v22;
        goto LABEL_28;
      }
    }

uint64_t shiftLeftMP(uint64_t result, int a2)
{
  uint64_t v2 = result;
  if (a2 <= 0) {
    int v3 = -(-a2 & 0x1F);
  }
  else {
    int v3 = a2 & 0x1F;
  }
  if (a2 >= 32)
  {
    unsigned int v4 = a2 >> 5;
    _platform_memmove();
    uint64_t result = _platform_bzero();
    *(void *)(v2 + 8) += 4LL * v4;
  }

  if (v3 >= 1)
  {
    int v5 = *(_DWORD **)v2;
    unint64_t v6 = *(void *)(v2 + 8);
    if (*(void *)v2 < v6)
    {
      LODWORD(v7) = 0;
      do
      {
        unint64_t v8 = (unint64_t)*v5 << v3;
        *v5++ = v8 | v7;
        unint64_t v7 = HIDWORD(v8);
      }

      while ((unint64_t)v5 < v6);
      if (v7)
      {
        _DWORD *v5 = HIDWORD(v8);
        *(void *)(v2 + 8) = v5 + 1;
      }
    }
  }

  return result;
}

int lchflags(const char *a1, __uint32_t a2)
{
  __uint32_t v5 = a2;
  __int128 v3 = xmmword_180498210;
  uint64_t v4 = 0LL;
  return setattrlist(a1, &v3, &v5, 4uLL, 1u);
}

int lchmod(const char *a1, mode_t a2)
{
  v4[1] = 0LL;
  v4[2] = 0LL;
  v4[0] = 0x2000000000005LL;
  int v3 = a2;
  return setattrlist(a1, v4, &v3, 4uLL, 1u);
}

int lutimes(const char *a1, const timeval *a2)
{
  if ((lstat(a1, &v13) & 0x80000000) == 0)
  {
    if ((v13.st_mode & 0xF000) != 0xA000) {
      return utimes(a1, a2);
    }
    v12[1] = 0LL;
    v12[2] = 0LL;
    v12[0] = 0x140000000005LL;
    if (a2)
    {
      uint64_t v4 = 1000LL * a2->tv_usec;
      __darwin_time_t tv_sec = a2->tv_sec;
      uint64_t v11 = v4;
      __darwin_time_t v5 = a2[1].tv_sec;
      uint64_t v6 = 1000LL * a2[1].tv_usec;
LABEL_8:
      v9[0] = v5;
      v9[1] = v6;
      return setattrlist(a1, v12, v9, 0x20uLL, 1u);
    }

    if ((gettimeofday(&v8, 0LL) & 0x80000000) == 0)
    {
      __darwin_time_t v5 = v8.tv_sec;
      uint64_t v6 = 1000LL * v8.tv_usec;
      __darwin_time_t tv_sec = v8.tv_sec;
      uint64_t v11 = v6;
      goto LABEL_8;
    }
  }

  return -1;
}

int fstatvfs(int a1, statvfs *a2)
{
  int result = fstatfs(a1, &v9);
  if (!result)
  {
    unint64_t f_bsize = v9.f_bsize;
    a2->unint64_t f_bsize = v9.f_iosize;
    a2->f_frsize = f_bsize;
    *(int32x4_t *)&a2->f_blocks = vuzp1q_s32(*(int32x4_t *)&v9.f_blocks, *(int32x4_t *)&v9.f_bavail);
    fsfilcnt_t f_ffree = v9.f_ffree;
    unint64_t v6 = v9.f_fsid.val[0];
    a2->fsfilcnt_t f_ffree = v9.f_ffree;
    a2->f_favail = f_ffree;
    a2->f_namemax = 255LL;
    char f_flags = v9.f_flags;
    unint64_t v8 = v9.f_flags & 1;
    a2->f_fsid = v6;
    a2->f_flag = v8;
    if ((f_flags & 8) != 0) {
      a2->f_flag = v8 | 2;
    }
  }

  return result;
}

int statvfs(const char *a1, statvfs *a2)
{
  int result = statfs(a1, &v9);
  if (!result)
  {
    unint64_t f_bsize = v9.f_bsize;
    a2->unint64_t f_bsize = v9.f_iosize;
    a2->f_frsize = f_bsize;
    *(int32x4_t *)&a2->f_blocks = vuzp1q_s32(*(int32x4_t *)&v9.f_blocks, *(int32x4_t *)&v9.f_bavail);
    fsfilcnt_t f_ffree = v9.f_ffree;
    unint64_t v6 = v9.f_fsid.val[0];
    a2->fsfilcnt_t f_ffree = v9.f_ffree;
    a2->f_favail = f_ffree;
    a2->f_namemax = 255LL;
    char f_flags = v9.f_flags;
    unint64_t v8 = v9.f_flags & 1;
    a2->f_fsid = v6;
    a2->f_flag = v8;
    if ((f_flags & 8) != 0) {
      a2->f_flag = v8 | 2;
    }
  }

  return result;
}

uint64_t (*backtrace_set_pcs_func( uint64_t (*result)(uint64_t a1, int a2, unsigned int *a3, int a4, uintptr_t a5)))(uint64_t a1, int a2, unsigned int *a3, int a4, uintptr_t a5)
{
  int v1 = _thread_stack_pcs;
  if (result) {
    int v1 = result;
  }
  backtrace_get_pcs_func = (uint64_t (*)(void, void, void, void, void))v1;
  return result;
}

int backtrace(void **a1, int a2)
{
  int result = v5;
  if (v5)
  {
    while (1)
    {
      uint64_t v4 = (result - 1);
      --result;
      if (!v4) {
        return 0;
      }
    }
  }

  return result;
}

size_t backtrace_async(void **array, size_t length, uint32_t *task_id)
{
  uint32_t v5 = _thread_stack_async_pcs((uint64_t)array, length, &v9, 1, 0LL);
  unsigned int v6 = v9;
  if (v9)
  {
    while (1)
    {
      uint64_t v7 = v6 - 1;
      --v6;
      if (!v7) {
        goto LABEL_4;
      }
    }
  }

  else
  {
LABEL_4:
    unsigned int v6 = 0;
  }

  if (task_id) {
    *task_id = v5;
  }
  return v6;
}

int backtrace_from_fp(void *startfp, void **array, int size)
{
  int result = v6;
  if (v6)
  {
    while (1)
    {
      uint64_t v5 = (result - 1);
      --result;
      if (!v5) {
        return 0;
      }
    }
  }

  return result;
}

char **__cdecl backtrace_symbols(void *const *a1, int a2)
{
  uint64_t v4 = a2;
  uint64_t v5 = (char **)calloc(a2, 0x20uLL);
  if (!v5) {
    return 0LL;
  }
  int v6 = v5;
  size_t v7 = 8 * v4;
  if (a2 < 1)
  {
    unint64_t v14 = (char **)malloc(v7);
    if (!v14) {
      goto LABEL_20;
    }
    goto LABEL_21;
  }

  uint64_t v8 = 0LL;
  uint64_t v21 = a2;
  unsigned int v9 = (const void **)a1;
  size_t v10 = v7;
  do
  {
    uint64_t v11 = (const char **)&v6[v8];
    dladdr(*v9, (Dl_info *)&v6[v8]);
    if (v6[v8 + 2])
    {
      if (!_platform_strcmp())
      {
        uint64_t v12 = 36LL;
        goto LABEL_10;
      }

      goto LABEL_9;
    }

    if (*v11)
    {
      strrchr(*v11, 47);
LABEL_9:
      uint64_t v12 = _platform_strlen();
      goto LABEL_10;
    }

    uint64_t v12 = 18LL;
LABEL_10:
    v10 += 83 + v12;
    v8 += 4LL;
    ++v9;
  }

  while (4LL * a2 != v8);
  stat v13 = (char **)malloc(v10);
  unint64_t v14 = v13;
  if (v13)
  {
    uint64_t v15 = 0LL;
    char v16 = (char *)v13 + v10;
    uint64_t v17 = (char *)&v13[v7 / 8];
    uint64_t v18 = (uint64_t)v6;
    while (1)
    {
      int v19 = _backtrace_snprintf(v17, v16 - v17, v15, (uint64_t)a1[v15], v18);
      if (v19 < 0) {
        break;
      }
      v14[v15] = v17;
      v17 += (v19 + 1);
      ++v15;
      v18 += 32LL;
      if (v21 == v15) {
        goto LABEL_21;
      }
    }
  }

LABEL_20:
  free(v6);
  int v6 = v14;
  unint64_t v14 = 0LL;
LABEL_21:
  free(v6);
  return v14;
}

  switch(v36)
  {
    case 0:
      unint64_t v28 = *(void *)(v16 + 32);
      unint64_t v29 = *(unsigned __int16 *)(v28 + 2LL * v18 + 2);
      if (v29 > 3)
      {
        int v32 = v28 + v29;
        int v33 = *(unsigned __int16 *)(v28 + 2LL * v18) - v29;
        *__int128 v35 = v32;
        v35[1] = v33;
      }

      else if (__big_return(a1, v16, v18, v35, 0LL))
      {
        return 0xFFFFFFFFLL;
      }

    char v16 = strdup("label:severity:text:action:tag");
    if (!v16) {
      return 3;
    }
    goto LABEL_21;
  }

  uint64_t v12 = 0;
  if ((a1 & 0x200) == 0) {
    return v12;
  }
LABEL_28:
  uint64_t v21 = printfmt((uint64_t)"label:severity:text:action:tag", (uint64_t)a2, a3, (uint64_t)a4, (uint64_t)v11, (uint64_t)a6);
  if (!v21) {
    return 2;
  }
  unint64_t v22 = v21;
  if (*v21)
  {
    int v23 = stat("/var/log/console", &v30);
    if ((v30.st_mode & 0xF000) == 0x4000 && v23 == 0) {
      char v25 = "/var/log/console";
    }
    else {
      char v25 = "/dev/console";
    }
    unsigned int v26 = fopen(v25, "a");
    if (v26)
    {
      int v27 = v26;
      fputs(v22, v26);
      fclose(v27);
    }

    else if (v12)
    {
      uint64_t v12 = 3;
    }

    else
    {
      uint64_t v12 = 2;
    }
  }

  free(v22);
  return v12;
}

          if (v12) {
            unint64_t v14 = v12;
          }
          else {
            unint64_t v14 = v9;
          }
          int v31 = v14;
          int v32 = v10;
LABEL_24:
          uint64_t v15 = (char)v13;
          int v33 = 0;
          uint64_t v34 = (char)v13;
LABEL_29:
          char v16 = 0;
          while (1)
          {
            switch(*++v1)
            {
              case 'g':
              case 'o':
              case 'u':
                if (!v16) {
                  goto LABEL_45;
                }
                if (v11 < v8) {
                  goto LABEL_44;
                }
                uint64_t v18 = v32;
                int v19 = realloc(v4, 4LL * (v32 + 4));
                if (!v19) {
                  goto LABEL_79;
                }
                uint64_t v11 = (unint64_t)v19 + v11 - (void)v4;
                v32 += 4;
                uint64_t v4 = v19;
                uint64_t v8 = (unint64_t)&v19[2 * v18 + 4];
                unsigned int v9 = v30;
                uint64_t v15 = v34;
LABEL_44:
                unsigned int v20 = addcmd(v11, v15, v12, v16, v9);
                uint64_t v15 = v34;
                uint64_t v11 = v20;
LABEL_45:
                if (v15 == 61) {
                  int v6 = 1;
                }
                if (v15 != 43 || !v33) {
                  goto LABEL_53;
                }
                if (v11 < v8) {
                  goto LABEL_52;
                }
                uint64_t v21 = realloc(v4, 4LL * (v32 + 4));
                if (!v21) {
                  goto LABEL_79;
                }
                uint64_t v11 = (unint64_t)v21 + v11 - (void)v4;
                uint64_t v8 = (unint64_t)&v21[2 * v32 + 4];
                v32 += 4;
                uint64_t v4 = v21;
LABEL_52:
                *(_BYTE *)uint64_t v11 = 88;
                *(_WORD *)(v11 + 2) = v33 & v31;
                v11 += 4LL;
                int v33 = 0;
LABEL_53:
                if (v11 < v8) {
                  goto LABEL_56;
                }
                unint64_t v22 = realloc(v4, 4LL * (v32 + 4));
                if (!v22) {
                  goto LABEL_79;
                }
                uint64_t v11 = (unint64_t)v22 + v11 - (void)v4;
                uint64_t v8 = (unint64_t)&v22[2 * v32 + 4];
                v32 += 4;
                uint64_t v4 = v22;
LABEL_56:
                int v23 = addcmd(v11, *v1, v12, v34, v9);
                uint64_t v15 = v34;
                uint64_t v11 = v23;
                goto LABEL_29;
              case 'h':
              case 'i':
              case 'j':
              case 'k':
              case 'l':
              case 'm':
              case 'n':
              case 'p':
              case 'q':
              case 'v':
                goto LABEL_57;
              case 'r':
                v16 |= 0x124u;
                continue;
              case 's':
                uint64_t v17 = v16 | 0xC00;
                goto LABEL_34;
              case 't':
                uint64_t v17 = v16 | 0x200;
LABEL_34:
                if (v12 - 1 >= 7) {
                  char v16 = v17;
                }
                continue;
              case 'w':
                v16 |= 0x92u;
                continue;
              case 'x':
                v16 |= 0x49u;
                continue;
              default:
                if (*v1 != 88)
                {
LABEL_57:
                  char v25 = v15 != 61 || v6 != 0;
                  if (v16 || !v25)
                  {
                    if (v15 == 61) {
                      int v6 = 1;
                    }
                    if (v11 >= v8)
                    {
                      unsigned int v26 = v32;
                      int v27 = realloc(v4, 4LL * (v32 + 4));
                      if (v27)
                      {
                        uint64_t v11 = (unint64_t)v27 + v11 - (void)v4;
                        v32 += 4;
                        uint64_t v4 = v27;
                        uint64_t v8 = (unint64_t)&v27[2 * v26 + 4];
                        unsigned int v9 = v30;
                        uint64_t v15 = v34;
                        goto LABEL_70;
                      }

    unsigned int v9 = 0LL;
    size_t v10 = 3LL;
    goto LABEL_6;
  }

  stat v13 = __error();
  unsigned int v9 = 0LL;
  size_t v10 = 2LL;
  if (*v13 != 34 && __minval == 0x8000000000000000LL) {
    goto LABEL_19;
  }
LABEL_6:
  if (__errstrp) {
    *__errstrp = *(const char **)&v15[v10];
  }
  uint64_t v11 = DWORD2(v15[v10]);
  *__error() = v11;
  return v9;
}

    a2 += v17;
    ++v16;
    v7 -= v17;
    if (!v7) {
      goto LABEL_21;
    }
  }

  if (!*a2)
  {
    uint64_t v17 = 1LL;
    goto LABEL_20;
  }

  uint64_t v15 = 2;
LABEL_23:
  free(v11);
  return v15;
}

    uint64_t v8 = tre_mem_alloc_impl(a1, 0, 0LL, 1, ((a5 + 7) >> 3) + 40);
    if (!v8) {
      return 12LL;
    }
    *((_DWORD *)v8 + 7) = 1;
    goto LABEL_22;
  }

uint64_t _backtrace_snprintf(char *a1, size_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)a5)
  {
    strrchr(*(const char **)a5, 47);
    size_t v10 = &v17;
    _platform_strlcpy();
  }

  else
  {
    size_t v10 = "???";
  }

  uint64_t v11 = *(char **)(a5 + 16);
  if (v11)
  {
    if (!_platform_strcmp())
    {
      uint64_t v12 = (void *)(a5 + 8);
      if ((_dyld_get_image_uuid() & 1) != 0)
      {
        uint64_t v11 = out;
        uuid_unparse(uu, out);
LABEL_14:
        uint64_t v13 = a4 - *v12;
        return snprintf(a1, a2, "%-4d%-35s 0x%016lx %s + %lu", a3, v10, a4, v11, v13);
      }

      uint64_t v11 = *(char **)(a5 + 16);
    }

    uint64_t v12 = (void *)(a5 + 24);
    goto LABEL_14;
  }

  if (*(void *)a5)
  {
    uint64_t v13 = a4 - *(void *)(a5 + 8);
    uint64_t v11 = (char *)v10;
  }

  else if (snprintf(out, 0x13uLL, "0x%lx", *(void *)(a5 + 24)) < 1)
  {
    uint64_t v11 = "0x0";
    uint64_t v13 = a4;
  }

  else
  {
    uint64_t v13 = a4 - *(void *)(a5 + 24);
    uint64_t v11 = out;
  }

  return snprintf(a1, a2, "%-4d%-35s 0x%016lx %s + %lu", a3, v10, a4, v11, v13);
}

void backtrace_symbols_fd(void *const *a1, int a2, int a3)
{
  size_t v7 = v11;
  unsigned int v9 = "\n";
  uint64_t v10 = 1LL;
  if (a2 >= 1)
  {
    uint64_t v4 = 0LL;
    uint64_t v5 = a2;
    do
    {
      memset(&v6, 0, sizeof(v6));
      dladdr(a1[v4], &v6);
      uint64_t v8 = (int)_backtrace_snprintf(v11, 0x400uLL, v4, (uint64_t)a1[v4], (uint64_t)&v6);
      writev_NOCANCEL();
      ++v4;
    }

    while (v5 != v4);
  }

void backtrace_image_offsets(void *const *array, image_offset *image_offsets, int size)
{
  uint64_t v5 = size;
  MEMORY[0x1895FE128](array, array);
  Dl_info v6 = (const unsigned __int8 *)(&v7 - 4 * v5);
  _dyld_images_for_addresses();
  if (size >= 1)
  {
    do
    {
      uuid_copy(image_offsets->uuid, v6);
      image_offsets->offset = *((void *)v6 + 2);
      v6 += 32;
      ++image_offsets;
      --v5;
    }

    while (v5);
  }

uint64_t __confstr_init(uint64_t result)
{
  __dirhelper_func = *(_UNKNOWN **)(result + 32);
  return result;
}

size_t confstr(int a1, char *a2, size_t a3)
{
  if (a1 >= 0x10000)
  {
    if (a1 != 0x10000)
    {
      if (a1 == 65537)
      {
        MEMORY[0x1895FE128](*(void *)&a1, a2);
        if (__dirhelper_func && __dirhelper_func(1LL, v15, 1024LL)) {
          goto LABEL_3;
        }
        int v9 = *__error();
        uint64_t v10 = getenv("TMPDIR");
        if (v10)
        {
          if (!access(v10, 2)) {
            goto LABEL_3;
          }
        }

        if (!access("/var/tmp/", 2)) {
          goto LABEL_3;
        }
        uint64_t v11 = __error();
        if (v9 != 12)
        {
LABEL_34:
          size_t result = 0LL;
          int v12 = 5;
          goto LABEL_35;
        }

        size_t result = 0LL;
        int v12 = 12;
      }

      else
      {
        if (a1 == 65538)
        {
          MEMORY[0x1895FE128](*(void *)&a1, a2);
          Dl_info v6 = (uint64_t (*)(uint64_t, _BYTE *, uint64_t))__dirhelper_func;
          if (__dirhelper_func)
          {
            uint64_t v7 = 2LL;
            goto LABEL_22;
          }

          goto LABEL_23;
        }

LABEL_32:
        uint64_t v11 = __error();
        size_t result = 0LL;
        int v12 = 22;
      }

    int v27 = mbrtowc_l(&v91, v20, 6uLL, a7, a9);
    if (v27 > 0xFFFFFFFFFFFFFFFDLL) {
      return 0xFFFFFFFFLL;
    }
    v20 += v27;
LABEL_34:
    if ((a4 & 0x10) != 0)
    {
      else {
        unint64_t v28 = _DefaultRuneLocale.__maplower[v91];
      }
      unint64_t v91 = v28;
    }

    if (*v20 == 45)
    {
      unint64_t v29 = *((unsigned __int8 *)v20 + 1);
      if (v20[1])
      {
        if (v29 != 93) {
          break;
        }
      }
    }

    if (v91 == (_DWORD)v19) {
      goto LABEL_118;
    }
LABEL_43:
    unint64_t v91 = 0;
    size_t v16 = *(unsigned __int8 *)v20;
    if (v16 == 93 && v20 > v13)
    {
      unint64_t v70 = 0;
      goto LABEL_119;
    }
  }

  if (v21 && v29 == 92) {
    int v30 = v20 + 2;
  }
  else {
    int v30 = v20 + 1;
  }
  int v31 = mbrtowc_l(&v90, v30, 6uLL, a7, a9);
  if (v31 > 0xFFFFFFFFFFFFFFFDLL) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v20 = &v30[v31];
  int v32 = v90;
  if (v90 != 91)
  {
    if (!v90 || (_DWORD)v15 == 61) {
      return 0xFFFFFFFFLL;
    }
    goto LABEL_63;
  }

  int v33 = *(unsigned __int8 *)v20;
  LODWORD(v15) = (char)v33;
  if (v33 != 46 && v33 != 61)
  {
LABEL_63:
    if ((_DWORD)v15 == 58) {
      return 0xFFFFFFFFLL;
    }
LABEL_64:
    if ((a4 & 0x10) != 0)
    {
      else {
        int v32 = _DefaultRuneLocale.__maplower[v32];
      }
      uint64_t v90 = v32;
    }

    if (*(_BYTE *)(*((void *)a9 + 165) + 64LL))
    {
    }

    else if ((int)__collate_range_cmp(v91, v19, a9) <= 0 && (int)__collate_range_cmp(v19, v90, a9) < 1)
    {
      goto LABEL_118;
    }

    goto LABEL_43;
  }

  size_t result = 0xFFFFFFFFLL;
  if ((char)v33 != 58 && (char)v33 != 61)
  {
    int v85 = a8;
    uint64_t v34 = a3;
    while (1)
    {
      __int128 v35 = _platform_strchr();
      if (!v35) {
        return 0xFFFFFFFFLL;
      }
      int v36 = v35;
      if (*(_BYTE *)(v35 + 1) == 93)
      {
        unsigned int v20 = (const char *)(v36 + 2);
        int v32 = v101;
        uint64_t v90 = v101;
        a3 = v34;
        a8 = v85;
        goto LABEL_64;
      }
    }
  }

  return result;
}

      a2 += 4;
    }

    while (v8-- > 1);
  }

  return result;
}

LABEL_35:
      *uint64_t v11 = v12;
      return result;
    }

    MEMORY[0x1895FE128](*(void *)&a1, a2);
    Dl_info v6 = (uint64_t (*)(uint64_t, _BYTE *, uint64_t))__dirhelper_func;
    if (__dirhelper_func)
    {
      uint64_t v7 = 0LL;
LABEL_22:
      if (!v6(v7, v15, 1024LL)) {
        goto LABEL_23;
      }
LABEL_3:
      if (a2 && a3) {
        _platform_strlcpy();
      }
      return _platform_strlen() + 1;
    }

        a2 = v8;
        if (v8 >= a3) {
          goto LABEL_36;
        }
      }

      int v13 = *a1++;
      int v12 = v13;
      if (!v13) {
        goto LABEL_37;
      }
      unint64_t v14 = a2[1] & 0xFFFFFFFFFFLL;
      uint64_t v15 = v14 == 0x8000000021LL;
      size_t v16 = 1LL;
      if (v14 == 0x8000000021LL)
      {
        size_t v16 = 2LL;
        char v17 = a2 + 2;
      }

      else
      {
        char v17 = v8;
      }

      uint64_t v8 = v17 + 1;
      uint64_t v18 = a2[v16];
      if ((v18 & 0xFFFFFFFFFFLL) == 0x800000005DLL)
      {
        int v19 = 0;
LABEL_34:
        if (v19 == v15) {
          goto LABEL_37;
        }
        goto LABEL_35;
      }

      int v19 = 0;
      while (1)
      {
        if ((v17[1] & 0xFFFFFFFFFFLL) != 0x800000002DLL)
        {
          if (v18 == v12) {
            int v19 = 1;
          }
          uint64_t v18 = v17[1];
          char v17 = v8;
          goto LABEL_33;
        }

        if (*(_BYTE *)(*((void *)a4 + 165) + 64LL))
        {
          if (v12 < (unint64_t)v18
            || v12 > (unint64_t)*((unsigned int *)v17 + 4))
          {
            goto LABEL_32;
          }
        }

        else if ((int)__collate_range_cmp(v18, v12, a4) > 0 {
               || (int)__collate_range_cmp(v12, *((_DWORD *)v17 + 4), a4) > 0)
        }
        {
          goto LABEL_32;
        }

        int v19 = 1;
LABEL_32:
        unint64_t v22 = v17[3];
        v17 += 3;
        uint64_t v18 = v22;
LABEL_33:
        uint64_t v8 = v17 + 1;
        if ((v18 & 0xFFFFFFFFFFLL) == 0x800000005DLL) {
          goto LABEL_34;
        }
      }
    }

  int v24 = *__error();
  free(v8);
  free(v9);
  size_t result = __error();
  *size_t result = v24;
  return result;
}

  if (v19)
  {
    if (v15 == 16) {
      goto LABEL_52;
    }
    char v25 = (char *)&v35 + v15;
    unsigned int v26 = (char *)((char *)&v35 + v15 - v19);
    if ((int)v25 - (int)v19 >= 1)
    {
      int v27 = ((_DWORD)v26 + 1) - 1LL;
      unint64_t v28 = (char *)&v35 + 15;
      unint64_t v29 = &v19[(int)v26 - 1];
      do
      {
        *v28-- = *v29;
        *v29-- = 0;
        --v27;
      }

      while (v27);
    }
  }

  else if (v15 != 16)
  {
    goto LABEL_52;
  }

  *(_OWORD *)a3 = v35;
  if ((v34 & 1) == 0)
  {
    free(v4);
  }

  return 1;
}

  unsigned int v20 = v19;
LABEL_37:
  if (v15 == 8)
  {
    unsigned int v26 = v20;
    int v24 = &v60;
    do
    {
      *--int v24 = v26 & 7 | 0x30;
      char v25 = v26 >= 8;
      v26 >>= 3;
    }

    while (v25);
    goto LABEL_49;
  }

  if (v15 != 10)
  {
    int v23 = v20;
    int v24 = &v60;
    do
    {
      *--int v24 = v14[v23 & 0xF];
      char v25 = v23 >= 0x10;
      v23 >>= 4;
    }

    while (v25);
    goto LABEL_49;
  }

LABEL_23:
    if (*__error() == 12) {
      return 0LL;
    }
    uint64_t v11 = __error();
    goto LABEL_34;
  }

  switch(a1)
  {
    case 1:
      *(void *)char v17 = 0x100000008LL;
      if (sysctl(v17, 2u, 0LL, &v16, 0LL, 0LL) == -1) {
        return 0LL;
      }
      if (!a2 || !a3) {
        goto LABEL_19;
      }
      size_t result = (size_t)malloc(v16);
      if (result)
      {
        uint64_t v8 = (void *)result;
        if (sysctl(v17, 2u, (void *)result, &v16, 0LL, 0LL) == -1)
        {
          int v13 = *__error();
          free(v8);
          unint64_t v14 = __error();
          size_t result = 0LL;
          *unint64_t v14 = v13;
        }

        else
        {
          _platform_strncpy();
          a2[a3 - 1] = 0;
          free(v8);
LABEL_19:
          size_t result = v16;
        }
      }

      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
      goto LABEL_3;
    default:
      goto LABEL_32;
  }

  return result;
}

  a2->sdl_alen = (_BYTE)v9 - (_BYTE)sdl_data - a2->sdl_nlen;
  int v13 = (_DWORD)v9 - (_DWORD)a2;
  if (v13 >= 0x15) {
    a2->sdl_len = v13;
  }
}

    *uint64_t v8 = 0;
    __atexit_new_registration = 0;
    int v24 = pthread_mutex_unlock(&atexit_mutex);
    switch(v9)
    {
      case 1:
        (*(void (**)(uint64_t))(i + 32 * v6 + 24))(v24);
        break;
      case 3:
        (*(void (**)(void))(*(void *)(i + 32 * v6 + 24) + 16LL))();
        break;
      case 2:
        (*(void (**)(void))(i + 32 * v6 + 24))(*(void *)(i + 32 * v6 + 32));
        break;
    }

    pthread_mutex_lock(&atexit_mutex);
    if ((__atexit_new_registration & 1) == 0) {
      goto LABEL_30;
    }
  }

  return pthread_mutex_unlock(&atexit_mutex);
}

      char v17 = v13;
      if (v13 < 0)
      {
        if ((___runetype(v13) & 0x4000) == 0) {
          goto LABEL_35;
        }
      }

      else if ((_DefaultRuneLocale.__runetype[v13] & 0x4000) == 0)
      {
        goto LABEL_35;
      }

      int v24 = v17;
      size_t v16 = v25;
      sprintf(v25, "\\%03o", v24);
      goto LABEL_32;
    }

    if (v13 == 32)
    {
      size_t v16 = " ";
      goto LABEL_32;
    }

    if (v13 == 34)
    {
      size_t v16 = "\\";
      goto LABEL_32;
    }

    size_t v16 = "\\\\"";
    if (v13 != 92) {
      goto LABEL_23;
    }
LABEL_32:
    if (v14 - 1 != v5) {
      v12 += __printf_out((uint64_t)v4, v3, (uint64_t)v5, (v15 - (_DWORD)v5));
    }
    uint64_t v18 = _platform_strlen();
    v12 += __printf_out((uint64_t)v4, v3, (uint64_t)v16, v18);
    uint64_t v5 = v14;
LABEL_35:
    int v19 = *v14++;
    int v13 = v19;
    ++v15;
  }

  while (v19);
  if (v14 - 1 != v5) {
    v12 += __printf_out((uint64_t)v4, v3, (uint64_t)v5, (v15 - (_DWORD)v5));
  }
LABEL_38:
  unsigned int v20 = __printf_out((uint64_t)v4, v3, (uint64_t)"", 1LL) + v12;
  __printf_flush(v4);
  return v20;
}

  if ((v16 & 0x8000000000000000LL) == 0)
  {
    uint64_t v10 = *__error();
    fileno(*(FILE **)(a1 + 720));
    if (fcntl_NOCANCEL() != -1)
    {
      *__error() = v10;
      return v9;
    }

    return 0LL;
  }

  return v9;
}

char *__cdecl crypt(const char *a1, const char *a2)
{
  for (uint64_t i = 0LL; i != 8; ++i)
  {
    char v5 = 2 * *a1;
    if (*a1) {
      ++a1;
    }
    *((_BYTE *)&v31 + i) = v5;
  }

  __crypt_des_setkey((unsigned __int8 *)&v31);
  Dl_info v6 = cryptresult;
  if (*a2 == 95)
  {
    if (*a1)
    {
      do
      {
        __crypt_des_cipher(&v31, &v31, 0LL, 1);
        for (uint64_t j = 0LL; j != 8; ++j)
        {
          char v8 = *a1;
          if (*a1) {
            ++a1;
          }
          *((_BYTE *)&v31 + j) ^= 2 * v8;
        }

        __crypt_des_setkey((unsigned __int8 *)&v31);
      }

      while (*a1);
      char v9 = *a2;
    }

    else
    {
      char v9 = 95;
    }

    int v10 = 0;
    cryptresult[0] = v9;
    unint64_t v12 = 4u;
    do
    {
      unsigned int v13 = a2[v12];
      if (!a2[v12]) {
        unsigned int v13 = 46;
      }
      cryptresult[v12] = v13;
      int v10 = a64toi[v13] | (v10 << 6);
    }

    while (v12-- > 1);
    a2 += 5;
    Dl_info v6 = &byte_18C52B92D;
    uint64_t v11 = 4LL;
  }

  else
  {
    int v10 = 25;
    uint64_t v11 = 2LL;
  }

  unint64_t v15 = 0LL;
  uint64_t v16 = v11 - 1;
  do
  {
    unsigned int v17 = a2[v16];
    if (!a2[v16]) {
      unsigned int v17 = 46;
    }
    v6[v16] = v17;
    unint64_t v15 = a64toi[v17] | (v15 << 6);
    unint64_t v18 = v16-- + 1;
  }

  while (v18 > 1);
  __crypt_des_cipher(&constdatablock, &v30, v15, v10);
  int v19 = &v6[v11];
  unint64_t v20 = v30;
  unint64_t v21 = (BYTE1(v30) << 8) | (v30 << 16);
  unint64_t v22 = BYTE2(v30) | (BYTE1(v30) << 8);
  v19[3] = itoa64[BYTE2(v30) & 0x3F];
  v19[2] = itoa64[(v22 >> 6) & 0x3F];
  v19[1] = itoa64[(v21 >> 12) & 0x3F];
  *int v19 = itoa64[v20 >> 2];
  unint64_t v23 = BYTE3(v30);
  unint64_t v24 = (BYTE4(v30) << 8) | (BYTE3(v30) << 16);
  char v25 = itoa64[((unint64_t)(BYTE5(v30) | (BYTE4(v30) << 8)) >> 6) & 0x3F];
  v19[7] = itoa64[BYTE5(v30) & 0x3F];
  v19[6] = v25;
  v19[5] = itoa64[(v24 >> 12) & 0x3F];
  v19[4] = itoa64[v23 >> 2];
  unint64_t v26 = BYTE6(v30);
  LODWORD(v20) = 4 * HIBYTE(v30);
  unint64_t v27 = v20 | (BYTE6(v30) << 10);
  v19[10] = itoa64[v20 & 0x3C];
  char v28 = itoa64[v26 >> 2];
  v19[9] = itoa64[(v27 >> 6) & 0x3F];
  int v19[8] = v28;
  size_t result = cryptresult;
  v19[11] = 0;
  return result;
}

uint64_t __crypt_des_setkey(unsigned __int8 *a1)
{
  if ((__crypt_des_setkey_des_ready & 1) == 0)
  {
    uint64_t v2 = 0LL;
    __int128 v47 = 0u;
    __int128 v48 = 0u;
    __int128 v45 = 0u;
    __int128 v46 = 0u;
    do
    {
      if (((0x303030300000000uLL >> v2) & 1) == 0)
      {
        uint64_t v3 = PC2[v2];
        HIDWORD(v4) = -1227133513 * v3;
        LODWORD(v4) = -1227133513 * v3;
        *((_BYTE *)&v45 + v2) = ((PC1[v3] - 1) ^ 7) + 1;
      }

      ++v2;
    }

    while (v2 != 64);
    PC1ROT = (uint64_t)calloc(8uLL, 0x100uLL);
    PC2ROT[0] = (uint64_t)calloc(8uLL, 0x100uLL);
    qword_18C52B9E0 = (uint64_t)calloc(8uLL, 0x100uLL);
    init_perm(PC1ROT, (uint64_t)&v45);
    unint64_t v5 = 0LL;
    char v6 = 1;
    do
    {
      uint64_t v7 = 0LL;
      char v8 = v6;
      __int128 v43 = 0u;
      __int128 v44 = 0u;
      __int128 v41 = 0u;
      __int128 v42 = 0u;
      __int128 v45 = 0u;
      __int128 v46 = 0u;
      __int128 v47 = 0u;
      __int128 v48 = 0u;
      do
      {
        if (((0x303030300000000uLL >> v7) & 1) == 0) {
          *((_BYTE *)&v41 + PC2[v7] - 1) = v7 + 1;
        }
        ++v7;
      }

      while (v7 != 64);
      for (uint64_t i = 0LL; i != 64; ++i)
      {
        if (((0x303030300000000uLL >> i) & 1) == 0)
        {
          unint64_t v10 = v5 + PC2[i];
          if (v10 % 0x1C <= v5) {
            v10 -= 28LL;
          }
          *((_BYTE *)&v45 + i) = *((_BYTE *)&v41 + v10);
        }
      }

      init_perm(PC2ROT[v5], (uint64_t)&v45);
      char v6 = 0;
      unint64_t v5 = 1LL;
    }

    while ((v8 & 1) != 0);
    uint64_t v11 = 0LL;
    unint64_t v12 = &IP[62];
    unsigned int v13 = &v45;
    do
    {
      for (unint64_t j = 0LL; j != 8; ++j)
      {
        if (j >= 2)
        {
          uint64_t v16 = v12[j] - 1LL;
          unsigned __int8 v17 = IP[v16];
          if (((0xF0F0F0F0F0F0F0FuLL >> v16) & 1) != 0) {
            uint64_t v18 = -32LL;
          }
          else {
            uint64_t v18 = -1LL;
          }
          uint64_t v19 = v18 + v17;
          if (v19 > 0) {
            char v15 = ((v19 - 1) ^ 7) + 1;
          }
          else {
            char v15 = 0;
          }
        }

        else
        {
          char v15 = 0;
        }

        *((_BYTE *)v13 + j) = v15;
      }

      ++v11;
      unsigned int v13 = (__int128 *)((char *)v13 + 8);
      v12 += 6;
    }

    while (v11 != 8);
    IE3264 = (uint64_t)calloc(8uLL, 0x80uLL);
    init_perm(IE3264, (uint64_t)&v45);
    for (uint64_t k = 0LL; k != 64; *((_BYTE *)&v45 + v21) = k)
      uint64_t v21 = (IP[CIFP[k++] - 1] - 1LL) ^ 7;
    CF6464 = (uint64_t)calloc(8uLL, 0x100uLL);
    unint64_t v22 = calloc(8uLL, 0x400uLL);
    SPE = (uint64_t)v22;
    init_perm(CF6464, (uint64_t)&v45);
    for (uint64_t m = 0LL; m != 48; ++m)
      *((_BYTE *)&v45 + m) = P32Tr[ExpandTr[m] - 1];
    for (uint64_t n = 0LL; n != 8; ++n)
    {
      for (iuint64_t i = 0LL; ii != 64; ++ii)
      {
        unint64_t v26 = 0LL;
        __int128 v41 = 0uLL;
        __int128 v42 = 0uLL;
        uint64x2_t v27 = (uint64x2_t)vdupq_n_s64(__rbit32(S[64 * n
                                               + (ii & 4 | (8 * ((ii >> 1) & 1)) & 0xFFFFFFFFFFFFFFDCLL | (32 * (ii & 1)) | (ii >> 2) & 2 | (ii >> 4) & 1 | (ii >> 1) & 0x10)]) >> 28);
        int16x8_t v28 = (int16x8_t)vuzp1q_s32( (int32x4_t)vshlq_u64(v27, (uint64x2_t)xmmword_180498270),  (int32x4_t)vshlq_u64(v27, (uint64x2_t)xmmword_180498260));
        v28.i64[0] = *(void *)&vmovn_s32((int32x4_t)v28) & 0xFFF1FFF1FFF1FFF1LL;
        *((_DWORD *)&v41 + n) = vmovn_s16(v28).u32[0];
        uint64_t v29 = 23LL;
        do
        {
          unint64_t v30 = v26;
          unint64_t v26 = *((unsigned __int8 *)&v41 + *((unsigned __int8 *)&v45 + v29) - 1) | (2 * v26);
          unint64_t v31 = v29-- + 1;
        }

        while (v31 > 1);
        unint64_t v32 = 0LL;
        v22[64 * n + ii] = 4
                         * ((32 * (int)v30) & 0x3F0000LL | (((v30 >> 17) & 0x3F) << 24) | v26 & 0x3F | (((v26 >> 6) & 0x3F) << 8));
        uint64_t v33 = 47LL;
        do
        {
          unint64_t v34 = v32;
          unint64_t v32 = *((unsigned __int8 *)&v41 + *((unsigned __int8 *)&v45 + v33) - 1) | (2 * v32);
          unint64_t v35 = v33 - 23;
          --v33;
        }

        while (v35 > 1);
        v22[64 * n + 512 + ii] = 4
                               * ((32 * (int)v34) & 0x3F0000LL | (((v34 >> 17) & 0x3F) << 24) | v32 & 0x3F | (((v32 >> 6) & 0x3F) << 8));
      }
    }

    __crypt_des_setkey_des_ready = 1;
  }

  uint64_t v36 = 1u;
  permute(a1, (unint64_t *)&v45, PC1ROT, 8);
  uint64_t v37 = v45;
  KS[0] = v45 & 0xFFFFFFFFFCFCFCFCLL;
  int v38 = &byte_180498301;
  do
  {
    KS[v36] = v37;
    unsigned int v39 = *v38++;
    permute((unsigned __int8 *)&KS[v36], (unint64_t *)&v45, PC2ROT[v39 - 1], 8);
    uint64_t v37 = v45;
    KS[v36++] = v45 & 0xFFFFFFFFFCFCFCFCLL;
  }

  while (v36 != 16);
  __crypt_des_setkey_called = 1;
  return 0LL;
}

unsigned __int8 *permute(unsigned __int8 *result, unint64_t *a2, uint64_t a3, int a4)
{
  unsigned int v4 = 0;
  uint64_t v5 = 0LL;
  int v6 = a4 + 1;
  do
  {
    unsigned int v7 = *result++;
    uint64_t v8 = *(void *)(a3 + 8LL * (v7 & 0xF)) | *(void *)(a3 + (((unint64_t)v7 >> 1) & 0x78) + 128);
    v4 |= v8;
    v5 |= v8 >> 32;
    a3 += 256LL;
    --v6;
  }

  while (v6 > 1);
  *a2 = v4 | ((unint64_t)v5 << 32);
  return result;
}

uint64_t __crypt_des_cipher(void *a1, uint64_t *a2, unint64_t a3, int a4)
{
  unint64_t v85 = (2 * *a1) & 0xAAAAAAAA | HIDWORD(*a1) & 0x5555555555555555LL | (((*a1 >> 33) & 0x55555555 | *(_DWORD *)a1 & 0xAAAAAAAA) << 32);
  uint64_t v6 = IE3264;
  permute((unsigned __int8 *)&v85, (unint64_t *)&v84, IE3264, 4);
  unint64_t v7 = (int)v84;
  uint64_t v8 = v84 >> 32;
  permute((unsigned __int8 *)&v85 + 4, (unint64_t *)&v84, v6, 4);
  uint64_t v9 = (int)v84;
  uint64_t v10 = v84 >> 32;
  if (a4 >= 0) {
    uint64_t v11 = 8LL;
  }
  else {
    uint64_t v11 = -8LL;
  }
  if (a4)
  {
    unint64_t v12 = a3 & 0x3F | (((a3 >> 12) & 0x3F) << 16) & 0xFFFFFFFFC0FFC0FFLL | (((a3 >> 18) & 0x3F) << 24) | (((a3 >> 6) & 0x3F) << 8);
    int v13 = 4 * v12;
    if (a4 >= 0) {
      int v14 = a4;
    }
    else {
      int v14 = -a4;
    }
    if (a4 < 0) {
      char v15 = (uint64_t *)&unk_18C52B9D0;
    }
    else {
      char v15 = KS;
    }
    uint64_t v16 = SPE;
    uint64_t v76 = SPE + 1024;
    uint64_t v77 = SPE + 512;
    uint64_t v17 = SPE + 1536;
    uint64_t v18 = SPE + 5632;
    uint64_t v19 = SPE + 2048;
    uint64_t v20 = SPE + 6144;
    uint64_t v21 = SPE + 2560;
    uint64_t v22 = SPE + 6656;
    uint64_t v75 = SPE + 3072;
    uint64_t v23 = SPE + 3584;
    uint64_t v24 = SPE + 7168;
    unint64_t v25 = v7;
    uint64_t v82 = SPE + 4096;
    int v83 = 4 * v12;
    uint64_t v80 = SPE + 4608;
    uint64_t v81 = SPE + 7680;
    uint64_t v26 = SPE + 5120;
    do
    {
      int v74 = v14;
      uint64_t v27 = v8;
      unint64_t v28 = v25;
      int v29 = -8;
      uint64_t v8 = v10;
      unint64_t v25 = v9;
      uint64_t v10 = v27;
      uint64_t v9 = v28;
      do
      {
        int v79 = v29;
        unint64_t v30 = (v25 ^ v8) & v13;
        unint64_t v31 = v25;
        unint64_t v32 = *(_DWORD *)v15 ^ v25 ^ v30;
        uint64_t v33 = v8 ^ v30 ^ *((_DWORD *)v15 + 1);
        unint64_t v85 = v32 | (v33 << 32);
        unint64_t v34 = v32 >> 7;
        unint64_t v35 = v32 >> 15;
        unint64_t v36 = v32 >> 23;
        uint64_t v37 = 2LL * v32;
        int v38 = &v15[(unint64_t)v11 / 8];
        uint64_t v39 = v34 & 0x1FE;
        uint64_t v40 = *(void *)(v82 + v37) ^ v10 ^ *(void *)(v80 + v39);
        uint64_t v41 = v36 & 0x1FE;
        uint64_t v42 = *(void *)(v16 + v37) ^ v9 ^ *(void *)(v77 + v39) ^ *(void *)(v76 + (v35 & 0x1FE)) ^ *(void *)(v17 + v41);
        uint64_t v43 = *(void *)(v26 + (v35 & 0x1FE)) ^ *(void *)(v18 + v41);
        uint64_t v44 = 2LL * v33;
        uint64_t v45 = v40 ^ v43;
        uint64_t v46 = (v33 >> 7) & 0x1FELL;
        uint64_t v47 = (v33 >> 15) & 0x1FELL;
        uint64_t v48 = *(void *)(v19 + v44) ^ *(void *)(v21 + v46) ^ *(void *)(v75 + v47);
        uint64_t v49 = *(void *)(v20 + v44) ^ *(void *)(v22 + v46) ^ *(void *)(v24 + v47);
        uint64_t v50 = (v33 >> 23) & 0x1FELL;
        uint64_t v9 = v42 ^ v48 ^ *(void *)(v23 + v50);
        uint64_t v10 = v45 ^ v49 ^ *(void *)(v81 + v50);
        unint64_t v51 = (v10 ^ v9) & v83;
        LODWORD(v50) = *((_DWORD *)v38 + 1);
        unint64_t v52 = *(_DWORD *)v38 ^ v9 ^ v51;
        unint64_t v85 = v52 | v85 & 0xFFFFFFFF00000000LL;
        uint64_t v53 = v10 ^ v50 ^ v51;
        LODWORD(v50) = v53 >> 23;
        LODWORD(v44) = v53 >> 15;
        unint64_t v78 = v52 | (v53 << 32);
        unint64_t v54 = v52 >> 7;
        unint64_t v55 = v52 >> 15;
        unint64_t v56 = v52 >> 23;
        uint64_t v57 = 2LL * v52;
        uint64_t v58 = *(void *)(v16 + v57);
        uint64_t v59 = v54 & 0x1FE;
        uint64_t v60 = v8;
        uint64_t v61 = v24;
        uint64_t v62 = v16;
        unsigned int v63 = v53 >> 7;
        uint64_t v64 = v55 & 0x1FE;
        uint64_t v65 = v56 & 0x1FE;
        uint64_t v66 = 2LL * v53;
        uint64_t v67 = v63 & 0x1FE;
        uint64_t v68 = v44 & 0x1FE;
        uint64_t v69 = v50 & 0x1FE;
        unint64_t v25 = v58 ^ *(void *)(v77 + v59) ^ *(void *)(v76 + v64) ^ *(void *)(v17 + v65) ^ *(void *)(v19 + v66) ^ *(void *)(v21 + v67) ^ *(void *)(v75 + v68) ^ *(void *)(v23 + v69) ^ v31;
        uint64_t v70 = *(void *)(v82 + v57) ^ *(void *)(v80 + v59) ^ *(void *)(v26 + v64) ^ *(void *)(v18 + v65);
        uint64_t v71 = *(void *)(v22 + v67);
        uint64_t v16 = v62;
        uint64_t v24 = v61;
        uint64_t v8 = v70 ^ *(void *)(v20 + v66) ^ v71 ^ *(void *)(v61 + v68) ^ *(void *)(v81 + v69) ^ v60;
        int v13 = v83;
        unint64_t v85 = v78;
        char v15 = &v38[(unint64_t)v11 / 8];
        int v29 = v79 + 1;
      }

      while (v79 != -1);
      v15 -= 2 * v11;
      int v14 = v74 - 1;
    }

    while (v74 > 1);
  }

  else
  {
    unint64_t v25 = v7;
  }

  unint64_t v85 = (2 * (_DWORD)v8) & 0xF0F0F0F0 | (v25 >> 3) & 0xF0F0F0F | ((unint64_t)((v9 >> 3) & 0xF0F0F0F | (2 * (_DWORD)v10) & 0xF0F0F0F0) << 32);
  permute((unsigned __int8 *)&v85, (unint64_t *)&v84, CF6464, 8);
  *a2 = v84;
  return 0LL;
}

void setkey(const char *a1)
{
  for (uint64_t i = 0LL; i != 8; ++i)
  {
    uint64_t v2 = 0LL;
    unsigned __int8 v3 = 0;
    do
      unsigned __int8 v3 = a1[v2++] | (2 * v3);
    while ((_DWORD)v2 != 8);
    a1 += 8;
    v4[i] = v3;
  }

  __crypt_des_setkey(v4);
}

void encrypt(char *a1, int a2)
{
  if (!__crypt_des_setkey_called)
  {
    uint64_t v13 = 0LL;
    __crypt_des_setkey((unsigned __int8 *)&v13);
  }

  for (uint64_t i = 0LL; i != 8; ++i)
  {
    uint64_t v5 = 0LL;
    char v6 = 0;
    do
      char v6 = a1[v5++] | (2 * v6);
    while ((_DWORD)v5 != 8);
    a1 += 8;
    *((_BYTE *)&v13 + i) = v6;
  }

  if (a2) {
    int v7 = -1;
  }
  else {
    int v7 = 1;
  }
  __crypt_des_cipher(&v13, &v13, 0LL, v7);
  uint64_t v8 = 7LL;
  do
  {
    uint64_t v9 = v8;
    unsigned int v10 = *((unsigned __int8 *)&v13 + v8);
    int v11 = -8;
    do
    {
      *--a1 = v10 & 1;
      v10 >>= 1;
    }

    while (!__CFADD__(v11++, 1));
    uint64_t v8 = v9 - 1;
  }

  while (v9);
}

uint64_t init_perm(uint64_t result, uint64_t a2)
{
  for (unint64_t i = 0LL; i != 64; ++i)
  {
    int v3 = *(unsigned __int8 *)(a2 + i);
    if (*(_BYTE *)(a2 + i))
    {
      uint64_t v4 = 0LL;
      unint64_t v5 = (v3 - 1);
      int v6 = 1 << ((v3 - 1) & 3);
      int v7 = (_BYTE *)(result + (i >> 3) + (((v5 >> 2) & 0x7FFFFFF) << 7));
      do
      {
        ++v4;
        v7 += 8;
      }

      while (v4 != 16);
    }
  }

  return result;
}

char *__cdecl devname_r(dev_t a1, mode_t a2, char *buf, int len)
{
  int v6 = a2;
  strcpy(v14, "/dev/");
  uint64_t v8 = opendir("/dev/");
  if (!v8) {
    return 0LL;
  }
  uint64_t v9 = v8;
  unsigned int v10 = readdir(v8);
  if (!v10) {
    goto LABEL_12;
  }
  int v11 = v10;
  while (1)
  {
    _platform_memmove();
    if (!lstat(v14, &v13) && v13.st_rdev == a1 && (v13.st_mode & 0xF000) == v6) {
      break;
    }
    int v11 = readdir(v9);
    if (!v11) {
      goto LABEL_12;
    }
  }

  if (v11->d_namlen < len) {
    _platform_strcpy();
  }
  else {
LABEL_12:
  }
    buf = 0LL;
  closedir(v9);
  return buf;
}

char *__cdecl devname(dev_t a1, mode_t a2)
{
  uint64_t v4 = (char *)devname_buf;
  if (devname_buf) {
    return devname_r(a1, a2, v4, 255);
  }
  size_t result = (char *)malloc(0xFFuLL);
  uint64_t v4 = result;
  devname_buf = (uint64_t)result;
  if (result) {
    return devname_r(a1, a2, v4, 255);
  }
  return result;
}

char *getdiskbyname(char *a1)
{
  *(_OWORD *)uint64_t v57 = xmmword_18965C1C8;
  if (cgetent(&v56, v57, a1) < 0) {
    return 0LL;
  }
  size_t result = (char *)getdiskbyname_dp;
  if (getdiskbyname_dp || (size_t result = (char *)malloc(0x118uLL), (getdiskbyname_dp = (uint64_t)result) != 0))
  {
    *((void *)result + 34) = 0LL;
    *((_OWORD *)result + 15) = 0u;
    *((_OWORD *)result + 16) = 0u;
    *((_OWORD *)result + 13) = 0u;
    *((_OWORD *)result + 14) = 0u;
    *((_OWORD *)result + 11) = 0u;
    *((_OWORD *)result + 12) = 0u;
    *((_OWORD *)result + 9) = 0u;
    *((_OWORD *)result + 10) = 0u;
    *((_OWORD *)result + 7) = 0u;
    *((_OWORD *)result + 8) = 0u;
    *((_OWORD *)result + 5) = 0u;
    *((_OWORD *)result + 6) = 0u;
    *((_OWORD *)result + 3) = 0u;
    *((_OWORD *)result + 4) = 0u;
    *((_OWORD *)result + 1) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *(_OWORD *)size_t result = 0u;
    uint64_t v2 = result + 8;
    unint64_t v55 = result + 8;
    int v3 = v56;
    do
    {
      int v4 = *v3;
      *uint64_t v2 = v4;
      uint64_t v2 = v55;
      if (!v4) {
        break;
      }
      int v5 = *v55;
      if (v5 == 58) {
        break;
      }
      if (v5 == 124) {
        break;
      }
      uint64_t v2 = v55 + 1;
      unint64_t v55 = v2;
      ++v3;
    }

    while ((unint64_t)v2 < getdiskbyname_dp + 23);
    *uint64_t v2 = 0;
    cgetstr(v56, "b0", (char **)(getdiskbyname_dp + 24));
    cgetstr(v56, "b1", (char **)(getdiskbyname_dp + 32));
    int v6 = cgetstr(v56, "ty", &v55);
    int v7 = v55;
    if (v6 < 1 || _platform_strcmp())
    {
      int v8 = 8;
    }

    else
    {
      int v8 = 1;
    }

    *(_DWORD *)(getdiskbyname_dp + 88) |= v8;
LABEL_17:
    if (cgetcap(v56, "sf", 58)) {
      *(_DWORD *)(getdiskbyname_dp + 88) |= 4u;
    }
    int v9 = cgetnum(v56, "se", &v51);
    int v10 = v51;
    if (v9 == -1) {
      int v10 = 512;
    }
    uint64_t v11 = getdiskbyname_dp;
    *(_DWORD *)(getdiskbyname_dp + 40) = v10;
    cgetnum(v56, "nt", (uint64_t *)(v11 + 48));
    cgetnum(v56, "ns", (uint64_t *)(getdiskbyname_dp + 44));
    cgetnum(v56, "nc", (uint64_t *)(getdiskbyname_dp + 52));
    if (cgetstr(v56, "dt", &v55) < 1)
    {
      int v12 = cgetnum(v56, "dt", &v51);
      __int16 v13 = v51;
      if (v12 == -1) {
        __int16 v13 = 0;
      }
      *(_WORD *)(getdiskbyname_dp + 4) = v13;
    }

    else
    {
      *(_WORD *)(getdiskbyname_dp + 4) = gettype(v55, (const char **)dktypenames);
    }

    if (cgetnum(v56, "sc", &v51) == -1)
    {
      char v15 = (_DWORD *)getdiskbyname_dp;
      int v14 = v15[12] * v15[11];
    }

    else
    {
      int v14 = v51;
      char v15 = (_DWORD *)getdiskbyname_dp;
    }

    v15[14] = v14;
    if (cgetnum(v56, "su", &v51) == -1)
    {
      uint64_t v17 = (_DWORD *)getdiskbyname_dp;
      int v16 = v17[13] * v17[14];
    }

    else
    {
      int v16 = v51;
      uint64_t v17 = (_DWORD *)getdiskbyname_dp;
    }

    v17[15] = v16;
    int v18 = cgetnum(v56, "rm", &v51);
    __int16 v19 = v51;
    if (v18 == -1) {
      __int16 v19 = 3600;
    }
    *(_WORD *)(getdiskbyname_dp + 72) = v19;
    int v20 = cgetnum(v56, "il", &v51);
    __int16 v21 = v51;
    if (v20 == -1) {
      __int16 v21 = 1;
    }
    *(_WORD *)(getdiskbyname_dp + 74) = v21;
    int v22 = cgetnum(v56, "sk", &v51);
    __int16 v23 = v51;
    if (v22 == -1) {
      __int16 v23 = 0;
    }
    *(_WORD *)(getdiskbyname_dp + 76) = v23;
    int v24 = cgetnum(v56, "cs", &v51);
    __int16 v25 = v51;
    if (v24 == -1) {
      __int16 v25 = 0;
    }
    *(_WORD *)(getdiskbyname_dp + 78) = v25;
    int v26 = cgetnum(v56, "hs", &v51);
    int v27 = v51;
    if (v26 == -1) {
      int v27 = 0;
    }
    *(_DWORD *)(getdiskbyname_dp + 80) = v27;
    int v28 = cgetnum(v56, "ts", &v51);
    int v29 = v51;
    if (v28 == -1) {
      int v29 = 0;
    }
    *(_DWORD *)(getdiskbyname_dp + 84) = v29;
    int v30 = cgetnum(v56, "bs", &v51);
    int v31 = v51;
    if (v30 == -1) {
      int v31 = 0x2000;
    }
    *(_DWORD *)(getdiskbyname_dp + 140) = v31;
    int v32 = cgetnum(v56, "sb", &v51);
    int v33 = v51;
    if (v32 == -1) {
      int v33 = 0x2000;
    }
    uint64_t v34 = getdiskbyname_dp;
    *(_DWORD *)(getdiskbyname_dp + 144) = v33;
    strcpy(&v54[4], "px");
    strcpy(v54, "bx");
    strcpy(&v53[4], "fx");
    strcpy(v53, "ox");
    strcpy(v52, "tx");
    uint64_t v35 = v34 + 148;
    unsigned __int8 v36 = 97;
    char v37 = 96;
    do
    {
      v52[1] = v36;
      v53[1] = v36;
      v53[5] = v36;
      v54[1] = v36;
      v54[5] = v36;
      if (cgetnum(v56, &v54[4], (uint64_t *)v35) == -1)
      {
        *(_DWORD *)uint64_t v35 = 0;
      }

      else
      {
        cgetnum(v56, v53, (uint64_t *)(v35 + 4));
        int v38 = cgetnum(v56, &v53[4], &v51);
        int v39 = v51;
        if (v38 == -1) {
          int v39 = 0;
        }
        *(_DWORD *)(v35 + 8) = v39;
        if (v39)
        {
          if (cgetnum(v56, v54, &v51)) {
            LOBYTE(v40) = 8;
          }
          else {
            uint64_t v40 = v51 / *(unsigned int *)(v35 + 8);
          }
          *(_BYTE *)(v35 + 13) = v40;
        }

        int v41 = cgetnum(v56, v52, &v51);
        char v42 = v51;
        if (v41 == -1) {
          char v42 = 0;
        }
        *(_BYTE *)(v35 + 12) = v42;
        char v37 = v36;
        if (!v42)
        {
          char v37 = v36;
          if (cgetstr(v56, v52, &v55) >= 1)
          {
            *(_BYTE *)(v35 + 12) = gettype(v55, (const char **)fstypenames);
            char v37 = v36;
          }
        }
      }

      unsigned int v43 = v36++;
      v35 += 16LL;
    }

    while (v43 < 0x68);
    uint64_t v44 = getdiskbyname_dp;
    *(_WORD *)(getdiskbyname_dp + 138) = v37 - 96;
    strcpy(&v54[4], "dx");
    uint64_t v45 = (_DWORD *)(v44 + 92);
    unsigned int v46 = 48;
    do
    {
      v54[5] = v46;
      int v47 = cgetnum(v56, &v54[4], &v51);
      int v48 = v51;
      if (v47 == -1) {
        int v48 = 0;
      }
      *v45++ = v48;
    }

    while (v46++ < 0x34);
    uint64_t v50 = getdiskbyname_dp;
    *(_DWORD *)getdiskbyname_dp = -2108275369;
    *(_DWORD *)(v50 + 132) = -2108275369;
    free(v56);
    return (char *)getdiskbyname_dp;
  }

  return result;
}

uint64_t gettype(char *a1, const char **a2)
{
  int v4 = *a2;
  if (v4)
  {
    uint64_t v5 = 0LL;
    int v6 = a2 + 1;
    while (strcasecmp(a1, v4))
    {
      int v4 = v6[v5++];
      if (!v4) {
        goto LABEL_5;
      }
    }
  }

  else
  {
LABEL_5:
    return 0LL;
  }

  return v5;
}

filesec_t filesec_init(void)
{
  filesec_t result = (filesec_t)malloc(0x40uLL);
  if (result) {
    *(_DWORD *)filesec_t result = 0;
  }
  return result;
}

filesec_t filesec_dup(filesec_t a1)
{
  uint64_t v2 = malloc(0x40uLL);
  int v3 = v2;
  if (v2)
  {
    __int128 v4 = *((_OWORD *)a1 + 1);
    *uint64_t v2 = *(_OWORD *)a1;
    v2[1] = v4;
    __int128 v5 = *((_OWORD *)a1 + 3);
    v2[2] = *((_OWORD *)a1 + 2);
    v2[3] = v5;
    if ((*(_BYTE *)a1 & 0x20) != 0 && *((void *)a1 + 7) != 1LL)
    {
      int v6 = malloc(*((void *)a1 + 6));
      v3[7] = v6;
      if (v6)
      {
        _platform_memmove();
      }

      else
      {
        free(v3);
        return 0LL;
      }
    }
  }

  return (filesec_t)v3;
}

void filesec_free(filesec_t a1)
{
}

void filesec_discard_aclbuf(unsigned int *a1)
{
  unsigned int v1 = *a1;
  if ((*a1 & 0x20) != 0)
  {
    int v3 = (void *)*((void *)a1 + 7);
    if (v3 != (void *)1)
    {
      free(v3);
      unsigned int v1 = *a1;
    }

    *((void *)a1 + 6) = 0LL;
    *((void *)a1 + 7) = 0LL;
    *a1 = v1 & 0xFFFFFFDF;
  }

int filesec_get_property(filesec_t a1, filesec_property_t a2, void *a3)
{
  switch(a2)
  {
    case FILESEC_OWNER:
      if ((*(_BYTE *)a1 & 1) == 0) {
        goto LABEL_31;
      }
      if (!a3) {
        return 0;
      }
      int result = 0;
      int v6 = *((_DWORD *)a1 + 1);
      goto LABEL_13;
    case FILESEC_GROUP:
      if ((*(_BYTE *)a1 & 2) == 0) {
        goto LABEL_31;
      }
      if (!a3) {
        return 0;
      }
      int result = 0;
      int v6 = *((_DWORD *)a1 + 2);
LABEL_13:
      *(_DWORD *)a3 = v6;
      return result;
    case FILESEC_UUID:
      if ((*(_BYTE *)a1 & 4) == 0) {
        goto LABEL_31;
      }
      if (!a3) {
        return 0;
      }
      int v8 = (const unsigned __int8 *)a1 + 12;
      goto LABEL_29;
    case FILESEC_MODE:
      if ((*(_BYTE *)a1 & 0x10) == 0) {
        goto LABEL_31;
      }
      if (!a3) {
        return 0;
      }
      int result = 0;
      *(_WORD *)a3 = *((_WORD *)a1 + 22);
      return result;
    case FILESEC_ACL:
      if ((*(_BYTE *)a1 & 0x20) == 0) {
        goto LABEL_31;
      }
      if (!a3) {
        return 0;
      }
      int v9 = (const void *)*((void *)a1 + 7);
      if (v9 == (const void *)1)
      {
        int result = 0;
        uint64_t v7 = 1LL;
        goto LABEL_38;
      }

      acl_t v10 = acl_copy_int_native(v9);
      *(void *)a3 = v10;
      if (v10) {
        return 0;
      }
      int v11 = *__error();
      if (!v11) {
        return 0;
      }
      goto LABEL_33;
    case FILESEC_GRPUUID:
      if ((*(_BYTE *)a1 & 8) == 0) {
        goto LABEL_31;
      }
      if (!a3) {
        return 0;
      }
      int v8 = (const unsigned __int8 *)a1 + 28;
LABEL_29:
      uuid_copy((unsigned __int8 *)a3, v8);
      return 0;
    default:
      if (a2 == FILESEC_ACL_RAW)
      {
        if ((*(_BYTE *)a1 & 0x20) != 0)
        {
          if (a3)
          {
            int result = 0;
            uint64_t v7 = *((void *)a1 + 7);
            goto LABEL_38;
          }

          return 0;
        }

        goto LABEL_31;
      }

      if (a2 != FILESEC_ACL_ALLOCSIZE)
      {
        int v11 = 22;
        goto LABEL_33;
      }

      if ((*(_BYTE *)a1 & 0x20) == 0)
      {
LABEL_31:
        int v11 = 2;
LABEL_33:
        *__error() = v11;
        return -1;
      }

      if (!a3) {
        return 0;
      }
      int result = 0;
      uint64_t v7 = *((void *)a1 + 6);
LABEL_38:
      *(void *)a3 = v7;
      return result;
  }

int filesec_set_property(filesec_t a1, filesec_property_t a2, const void *a3)
{
  switch(a2)
  {
    case FILESEC_OWNER:
      int result = 0;
      if (!a3)
      {
        unsigned int v7 = *(_DWORD *)a1 & 0xFFFFFFFE;
        goto LABEL_33;
      }

      int v6 = *(_DWORD *)a3;
      *(_DWORD *)a1 |= 1u;
      *((_DWORD *)a1 + 1) = v6;
      return result;
    case FILESEC_GROUP:
      int result = 0;
      if (a3)
      {
        *((_DWORD *)a1 + 2) = *(_DWORD *)a3;
        unsigned int v7 = *(_DWORD *)a1 | 2;
      }

      else
      {
        unsigned int v7 = *(_DWORD *)a1 & 0xFFFFFFFD;
      }

      goto LABEL_33;
    case FILESEC_UUID:
      if (a3)
      {
        uuid_copy((unsigned __int8 *)a1 + 12, (const unsigned __int8 *)a3);
        int result = 0;
        unsigned int v7 = *(_DWORD *)a1 | 4;
      }

      else
      {
        int result = 0;
        unsigned int v7 = *(_DWORD *)a1 & 0xFFFFFFFB;
      }

      goto LABEL_33;
    case FILESEC_MODE:
      int result = 0;
      if (a3)
      {
        *((_WORD *)a1 + 22) = *(_WORD *)a3;
        unsigned int v7 = *(_DWORD *)a1 | 0x10;
      }

      else
      {
        unsigned int v7 = *(_DWORD *)a1 & 0xFFFFFFEF;
      }

      goto LABEL_33;
    case FILESEC_ACL:
      if (a3 == (const void *)1)
      {
        filesec_discard_aclbuf((unsigned int *)a1);
        int result = 0;
        *((void *)a1 + 6) = 0LL;
        *((void *)a1 + 7) = 1LL;
        goto LABEL_32;
      }

      if (!a3)
      {
        filesec_discard_aclbuf((unsigned int *)a1);
        int result = 0;
        unsigned int v7 = *(_DWORD *)a1 & 0xFFFFFFDF;
        goto LABEL_33;
      }

      int v8 = *(_acl **)a3;
      ssize_t v9 = acl_size(*(acl_t *)a3);
      if ((v9 & 0x8000000000000000LL) == 0)
      {
        ssize_t v10 = v9;
        int v11 = malloc(v9);
        if (v11)
        {
          int v12 = v11;
          if ((acl_copy_ext_native(v11, v8, v10) & 0x8000000000000000LL) == 0)
          {
            filesec_discard_aclbuf((unsigned int *)a1);
            int result = 0;
            *((void *)a1 + 6) = v10;
            *((void *)a1 + 7) = v12;
            goto LABEL_32;
          }

          free(v12);
          goto LABEL_37;
        }
      }

      int v13 = *__error();
      if (v13) {
        goto LABEL_38;
      }
      return 0;
    case FILESEC_GRPUUID:
      if (a3)
      {
        uuid_copy((unsigned __int8 *)a1 + 28, (const unsigned __int8 *)a3);
        int result = 0;
        unsigned int v7 = *(_DWORD *)a1 | 8;
      }

      else
      {
        int result = 0;
        unsigned int v7 = *(_DWORD *)a1 & 0xFFFFFFF7;
      }

      goto LABEL_33;
    default:
      if (a2 == FILESEC_ACL_RAW)
      {
        filesec_discard_aclbuf((unsigned int *)a1);
        if (a3 && *(void *)a3)
        {
          int result = 0;
          *((void *)a1 + 7) = *(void *)a3;
LABEL_32:
          unsigned int v7 = *(_DWORD *)a1 | 0x20;
LABEL_33:
          *(_DWORD *)a1 = v7;
        }

        else
        {
          return 0;
        }
      }

      else if (a2 == FILESEC_ACL_ALLOCSIZE && a3)
      {
        int result = 0;
        *((void *)a1 + 6) = *(void *)a3;
      }

      else
      {
LABEL_37:
        int v13 = 22;
LABEL_38:
        *__error() = v13;
        return -1;
      }

      return result;
  }

int filesec_unset_property(filesec_t a1, filesec_property_t a2)
{
  return filesec_set_property(a1, a2, 0LL);
}

int filesec_query_property(filesec_t a1, filesec_property_t a2, int *a3)
{
  switch(a2)
  {
    case FILESEC_OWNER:
      goto LABEL_8;
    case FILESEC_GROUP:
      a2 = FILESEC_GROUP;
      goto LABEL_8;
    case FILESEC_UUID:
      a2 = FILESEC_MODE;
      goto LABEL_8;
    case FILESEC_MODE:
      a2 = 16;
      goto LABEL_8;
    case FILESEC_ACL:
      goto LABEL_4;
    case FILESEC_GRPUUID:
      a2 = 8;
      goto LABEL_8;
    default:
      if (a2 - 100 >= 2)
      {
        *__error() = 22;
        return -1;
      }

      else
      {
LABEL_4:
        a2 = 32;
LABEL_8:
        int v3 = 0;
        *a3 = *(_DWORD *)a1 & a2;
      }

      return v3;
  }

FTS *__cdecl fts_open(char *const *a1, int a2, int (__cdecl *a3)(const FTSENT **, const FTSENT **))
{
  if ((a2 & 0xFFFFF300) != 0)
  {
    *__error() = 22;
    return 0LL;
  }

  unsigned int v7 = calloc(1uLL, 0x48uLL);
  if (!v7) {
    return 0LL;
  }
  v7[7] = a3;
  *((_DWORD *)v7 + 16) = (a2 >> 8) & 8 | a2;
  return (FTS *)__fts_open((uint64_t *)a1, (uint64_t)v7);
}

void *__fts_open(uint64_t *a1, uint64_t a2)
{
  int v3 = (void *)a2;
  int v5 = *(_DWORD *)(a2 + 64);
  if ((v5 & 2) != 0) {
    *(_DWORD *)(a2 + 64) = v5 | 4;
  }
  if (!*a1) {
    goto LABEL_9;
  }
  unint64_t v6 = 0LL;
  unsigned int v7 = a1 + 1;
  do
  {
    unint64_t v8 = _platform_strlen();
    if (v8 > v6) {
      unint64_t v6 = v8;
    }
  }

  while (*v7++);
  if (v6 + 1 >= 0x401)
  {
    unint64_t v11 = 0LL;
    int v12 = a1 + 1;
    do
    {
      unint64_t v13 = _platform_strlen();
      if (v13 > v11) {
        unint64_t v11 = v13;
      }
    }

    while (*v12++);
    int v10 = v11 + 1;
  }

  else
  {
LABEL_9:
    int v10 = 1024;
  }

  char v15 = fts_alloc((uint64_t)v3, (uint64_t)"", 0LL);
  if (!v15)
  {
LABEL_49:
    free((void *)v3[4]);
LABEL_50:
    free(v3);
    return 0LL;
  }

  int v16 = v15;
  *((_WORD *)v15 + 43) = -1;
  uint64_t v17 = *a1;
  if (*a1)
  {
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    int v20 = a1 + 1;
    uint64_t v21 = *a1;
    while (1)
    {
      uint64_t v22 = _platform_strlen();
      __int16 v23 = fts_alloc((uint64_t)v3, v21, v22);
      if (!v23) {
        break;
      }
      int v24 = v23;
      *((_WORD *)v23 + 43) = 0;
      *((void *)v23 + 1) = v16;
      *((void *)v23 + 5) = v23 + 26;
      if ((v3[8] & 0x400) != 0) {
        int v25 = -1;
      }
      else {
        int v25 = v3[8] & 1;
      }
      int v26 = fts_stat2((uint64_t)v3, (uint64_t)v23, v25, -1, 0LL);
      if (v26 == 5) {
        __int16 v27 = 1;
      }
      else {
        __int16 v27 = v26;
      }
      *((_WORD *)v24 + 44) = v27;
      if (v3[7])
      {
        *((void *)v24 + 2) = v19;
        uint64_t v19 = (uint64_t)v24;
      }

      else
      {
        *((void *)v24 + 2) = 0LL;
        if (v19) {
          *((void *)v2 + 2) = v24;
        }
        else {
          uint64_t v19 = (uint64_t)v24;
        }
        uint64_t v2 = v24;
      }

      uint64_t v21 = v20[v18++];
      if (!v21)
      {
        if (v3[7] && (_DWORD)v18 != 1) {
          uint64_t v19 = fts_sort((uint64_t)v3, v19, v18);
        }
        goto LABEL_37;
      }
    }

LABEL_46:
    if (v19)
    {
      do
      {
        uint64_t v31 = *(void *)(v19 + 16);
        fts_free((_DWORD *)v19);
        uint64_t v19 = v31;
      }

      while (v31);
    }

    fts_free(v16);
    goto LABEL_49;
  }

  uint64_t v19 = 0LL;
LABEL_37:
  int v28 = fts_alloc((uint64_t)v3, (uint64_t)"", 0LL);
  *int v3 = v28;
  if (!v28) {
    goto LABEL_46;
  }
  *((void *)v28 + 2) = v19;
  *((_WORD *)v28 + 44) = 9;
  int v29 = *((_DWORD *)v3 + 16);
  if ((v29 & 4) == 0)
  {
    int v30 = open_NOCANCEL();
    *((_DWORD *)v3 + 10) = v30;
    int v29 = *((_DWORD *)v3 + 16);
    if (v30 < 0)
    {
      v29 |= 4u;
      *((_DWORD *)v3 + 16) = v29;
    }
  }

  if ((v29 & 4) == 0 && getenv("FTS_USE_THREAD_FCHDIR")) {
    *((_DWORD *)v3 + 16) = v29 | 0x400;
  }
  if (!v17) {
    fts_free(v16);
  }
  return v3;
}

    if (v11) {
      *unint64_t v11 = v23;
    }
    return v9;
  }

    if (a4 < 0)
    {
      int v33 = _platform_strlen();
      uint64_t v34 = (unsigned __int8 *)malloc(v33 + 1);
      if (!v34) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v35 = v34;
      _owned_ptr_add(a6, (unint64_t)v34);
      _platform_memmove();
      unint64_t v11 = v35;
    }

    int result = 0LL;
    *(void *)&(*a5)[8 * v39] = v11;
    return result;
  }

  return 0LL;
}

FTS *__cdecl fts_open_b(char *const *a1, int a2, void *a3)
{
  if ((a2 & 0xFFFFF300) != 0)
  {
    *__error() = 22;
    return 0LL;
  }

  unsigned int v7 = calloc(1uLL, 0x48uLL);
  if (!v7) {
    return 0LL;
  }
  uint64_t v8 = (uint64_t)v7;
  v7[7] = _Block_copy(a3);
  *(_DWORD *)(v8 + 64) = (a2 >> 8) & 8 | a2 | 0x80000000;
  return (FTS *)__fts_open((uint64_t *)a1, v8);
}

int fts_close(FTS *a1)
{
  fts_cur = a1->fts_cur;
  if (fts_cur)
  {
    if (fts_cur->fts_level < 0)
    {
      fts_linuint64_t k = fts_cur;
    }

    else
    {
      do
      {
        fts_linuint64_t k = fts_cur->fts_link;
        if (!fts_link) {
          fts_linuint64_t k = fts_cur->fts_parent;
        }
        fts_free(fts_cur);
        fts_cur = fts_link;
      }

      while ((fts_link->fts_level & 0x80000000) == 0);
    }

    fts_free(fts_link);
  }

  if ((a1->fts_options & 4) != 0) {
    int fts_rfd = -1;
  }
  else {
    int fts_rfd = a1->fts_rfd;
  }
  fts_child = a1->fts_child;
  if (fts_child)
  {
    do
    {
      unint64_t v6 = fts_child->fts_link;
      fts_free(fts_child);
      fts_child = v6;
    }

    while (v6);
  }

  free(a1->fts_array);
  a1->fts_array = 0LL;
  free(a1->fts_path);
  a1->fts_path = 0LL;
  if (a1->fts_options < 0)
  {
    fts_compar = a1->fts_compar;
    if (fts_compar) {
      _Block_release(fts_compar);
    }
  }

  if (fts_rfd == -1)
  {
    int v9 = 0;
  }

  else
  {
    int v8 = *__error();
    if (fts_fchdir((uint64_t)a1, fts_rfd))
    {
      int v8 = *__error();
      int v9 = -1;
    }

    else
    {
      int v9 = 0;
    }

    if (close_NOCANCEL())
    {
      int v8 = *__error();
      int v9 = -1;
    }

    *__error() = v8;
  }

  free(a1);
  return v9;
}

void fts_free(_DWORD *a1)
{
  if ((a1[15] & 0x80000000) == 0)
  {
    int v2 = *__error();
    close_NOCANCEL();
    *__error() = v2;
  }

  free(a1);
}

uint64_t fts_fchdir(uint64_t a1, int a2)
{
  if ((*(_BYTE *)(a1 + 65) & 4) != 0) {
    JUMPOUT(0x186DFC5B8LL);
  }
  return fchdir(a2);
}

FTSENT *__cdecl fts_read(FTS *a1)
{
  fts_cur = a1->fts_cur;
  if (!a1->fts_cur) {
    return fts_cur;
  }
  int fts_options = a1->fts_options;
  if ((fts_options & 0x200) != 0) {
    return 0LL;
  }
  int fts_instr = fts_cur->fts_instr;
  fts_cur->int fts_instr = 3;
  if (fts_instr == 2)
  {
    p_fts_mach_timebase_info info = &fts_cur->fts_info;
    fts_mach_timebase_info info = fts_cur->fts_info;
    if ((fts_info & 0xFFFE) == 0xC)
    {
      int v7 = fts_stat2((uint64_t)a1, (uint64_t)fts_cur, 1, -1, 0LL);
      fts_cur->fts_mach_timebase_info info = v7;
      if (v7 == 1 && (a1->fts_options & 4) == 0)
      {
        int v8 = open_NOCANCEL();
        fts_cur->fts_symfd = v8;
        if (v8 < 0)
        {
          fts_cur->fts_errno = *__error();
          fts_cur->fts_mach_timebase_info info = 7;
        }

        else
        {
          fts_cur->fts_flags |= 2u;
        }
      }

      return fts_cur;
    }

    if (fts_info == 1) {
      goto LABEL_15;
    }
  }

  else
  {
    if (fts_instr == 1)
    {
      fts_cur->fts_mach_timebase_info info = fts_stat2((uint64_t)a1, (uint64_t)fts_cur, 0, -1, 0LL);
      return fts_cur;
    }

    p_fts_mach_timebase_info info = &fts_cur->fts_info;
    if (fts_cur->fts_info == 1)
    {
      if (fts_instr == 4)
      {
LABEL_33:
        if ((fts_cur->fts_flags & 2) != 0)
        {
          close_NOCANCEL();
          fts_cur->fts_symfd = -1;
        }

        fts_child = a1->fts_child;
        if (fts_child)
        {
          do
          {
            fts_linuint64_t k = fts_child->fts_link;
            fts_free(fts_child);
            fts_child = fts_link;
          }

          while (fts_link);
          a1->fts_child = 0LL;
        }

        *p_fts_mach_timebase_info info = 6;
        return fts_cur;
      }

LABEL_15:
      if ((fts_options & 0x40) != 0 && fts_cur->fts_dev != a1->fts_dev) {
        goto LABEL_33;
      }
      int v9 = a1->fts_child;
      if (v9)
      {
        if ((fts_options & 0x100) == 0)
        {
          if (fts_safe_changedir((uint64_t)a1, (uint64_t)fts_cur, -1))
          {
            fts_cur->fts_errno = *__error();
            fts_cur->fts_flags |= 1u;
            int v10 = a1->fts_child;
            if (v10)
            {
              unint64_t v11 = a1->fts_child;
              do
              {
                v11->fts_accpath = v11->fts_parent->fts_accpath;
                unint64_t v11 = v11->fts_link;
              }

              while (v11);
            }
          }

          else
          {
            int v10 = a1->fts_child;
          }

          goto LABEL_62;
        }

        a1->int fts_options = fts_options & 0xFFFFFEFF;
        do
        {
          uint64_t v19 = v9->fts_link;
          fts_free(v9);
          int v9 = v19;
        }

        while (v19);
        a1->fts_child = 0LL;
      }

      int v10 = (_ftsent *)fts_build((uint64_t)a1, 3);
      a1->fts_child = v10;
      if (!v10)
      {
        if ((a1->fts_options & 0x200) != 0) {
          return 0LL;
        }
        return fts_cur;
      }

            --v8;
          }

          while (v8);
        }
      }
    }

    else
    {
      return mswap((unsigned int *)a3);
    }
  }

  return result;
}

            *unint64_t v6 = bswap32((unsigned __int16)*v6) >> 16;
            ++v6;
            --v4;
          }

          while (v4);
        }
      }

      uint64_t v17 = bswap32(*(_DWORD *)(a3 + 4));
      *(_DWORD *)a3 = bswap32(*(_DWORD *)a3);
      *(_DWORD *)(a3 + 4) = v17;
      uint64_t v18 = bswap32(*(_DWORD *)(a3 + 12));
      *(_DWORD *)(a3 + 8) = bswap32(*(_DWORD *)(a3 + 8));
      *(_DWORD *)(a3 + 12) = v18;
      *(_WORD *)(a3 + 16) = bswap32(*(unsigned __int16 *)(a3 + 16)) >> 16;
      *(_WORD *)(a3 + 18) = bswap32(*(unsigned __int16 *)(a3 + 18)) >> 16;
    }

    else
    {
      return mswap((unsigned int *)a3);
    }
  }

  return result;
}

      *(void *)(a1 + 24) = a2;
      break;
    case 1:
      if (a2) {
        memstream_seek_cold_2();
      }
      break;
    case 0:
      if (a2 < 0) {
        memstream_seek_cold_1();
      }
      goto LABEL_15;
  }

  memstream_update(a1);
  return *(void *)(a1 + 24);
}

    int v8 = (uint64_t *)*v8;
  }

  while (v8);
  pthread_mutex_unlock(&filelist_lock);
  unint64_t v11 = (uint64_t *)moreglue(1);
  if (v11)
  {
    int v12 = v11;
    pthread_mutex_lock(&filelist_lock);
    *lastglue = (uint64_t)v12;
    lastglue = v12;
    int v5 = v12[2];
LABEL_18:
    *(_WORD *)(v5 + 16) = 1;
    pthread_mutex_unlock(&filelist_lock);
    *(void *)(v5 + 24) = 0LL;
    *(_DWORD *)(v5 + 32) = 0;
    *(_DWORD *)(v5 + 40) = 0;
    *(void *)int v5 = 0LL;
    *(void *)(v5 + 8) = 0LL;
    *(_WORD *)(v5 + 18) = -1;
    *(void *)(v5 + 88) = 0LL;
    *(_DWORD *)(v5 + 96) = 0;
    *(void *)(v5 + 120) = 0LL;
    *(_DWORD *)(v5 + 128) = 0;
    int v13 = *(void *)(v5 + 104);
    *(void *)int v13 = 0LL;
    *(void *)(v13 + 8) = 850045858LL;
    *(_OWORD *)(v13 + 16) = 0u;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(void *)(v13 + 64) = 0LL;
    *(_BYTE *)(*(void *)(v5 + 104) + 72LL) &= 0xF8u;
    int v14 = *(_OWORD **)(v5 + 104);
    v14[5] = 0u;
    v14[6] = 0u;
    v14[7] = 0u;
    v14[8] = 0u;
    v14[9] = 0u;
    v14[10] = 0u;
    v14[11] = 0u;
    v14[12] = 0u;
    *(_BYTE *)(*(void *)(v5 + 104) + 72LL) &= ~8u;
    *(_BYTE *)(*(void *)(v5 + 104) + 72LL) = *(_BYTE *)(*(void *)(v5 + 104) + 72LL) & 0xF7 | (8 * (a1 != 0));
    return v5;
  }

  if (!a1) {
    return 0LL;
  }
  int v5 = 0LL;
  do
    int v16 = __ldxr((unint64_t *)&__scounted);
  while (__stxr(v16 - 1, (unint64_t *)&__scounted));
  return v5;
}

      *(void *)(a1 + 24) = a2;
      if (a2 != v4)
      {
        *(_OWORD *)(a1 + 128) = 0u;
        *(_OWORD *)(a1 + 144) = 0u;
        *(_OWORD *)(a1 + 96) = 0u;
        *(_OWORD *)(a1 + 112) = 0u;
        *(_OWORD *)(a1 + 64) = 0u;
        *(_OWORD *)(a1 + 80) = 0u;
        *(_OWORD *)(a1 + 32) = 0u;
        *(_OWORD *)(a1 + 48) = 0u;
      }

      break;
    case 1:
      if (a2) {
        wmemstream_seek_cold_2();
      }
      break;
    case 0:
      if (a2 < 0) {
        wmemstream_seek_cold_1();
      }
      goto LABEL_15;
  }

  wmemstream_update(a1);
  return *(void *)(a1 + 24);
}

    int v14 = "(null)";
    int v13 = 6LL;
    return __printf_out(a1, a2, (uint64_t)v14, v13);
  }

  int v5 = **a3;
  if (!v5) {
    goto LABEL_15;
  }
  unint64_t v6 = *(_DWORD *)(a2 + 20);
  int v7 = *(_xlocale **)(a2 + 8);
  if (v6 < 0)
  {
    BOOL v25 = (__int32 *)**a3;
    memset(&v27, 0, sizeof(v27));
    int v8 = wcsrtombs_l(0LL, (const __int32 **)&v25, 0LL, &v27, v7);
    if (v8 == -1LL) {
      return 0xFFFFFFFFLL;
    }
  }

  else if (v6 > 0x7F)
  {
    int v16 = 0LL;
    BOOL v25 = (__int32 *)**a3;
    memset(&v27, 0, sizeof(v27));
    do
    {
      int v8 = v16;
      uint64_t v17 = *v25++;
      uint64_t v18 = wcrtomb_l(v26, v17, &v27, v7);
      int v16 = v18 + v8;
    }

    while (v18 + 1 >= 2 && v6 >= (int)v16);
  }

  else
  {
    int v8 = *(unsigned int *)(a2 + 20);
  }

  int v20 = (char *)malloc(v8 + 1);
  if (!v20) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v21 = v20;
  BOOL v25 = (__int32 *)v5;
  memset(&v27, 0, sizeof(v27));
  __int16 v22 = wcsrtombs_l(v20, (const __int32 **)&v25, v8, &v27, v7);
  if (v22 == -1LL)
  {
    free(v21);
    return 0xFFFFFFFFLL;
  }

  v21[v22] = 0;
  __int16 v23 = _platform_strlen();
  uint64_t v24 = __printf_out((uint64_t)v4, v3, (uint64_t)v21, v23);
  __printf_flush(v4);
  free(v21);
  return v24;
}

        int v2 = *(FILE **)(a1 + 720);
        goto LABEL_2;
      }
    }

      if ((!result || (result[2] & 1) == 0) && (!*result || (*(_BYTE *)(*result + 16LL) & 1) == 0))
      {
        int v13 = result[1];
        if (!v13 || (*(_BYTE *)(v13 + 16) & 1) == 0)
        {
          *(void *)(a2 + 16) = v8 & 0xFFFFFFFFFFFFFFFELL;
          result[2] |= 1uLL;
          return result;
        }
      }

      goto LABEL_23;
    }

    result[2] = v10 | 1;
    if (*v5 == a2) {
      return result;
    }
    unint64_t v11 = *(void *)(a2 + 16);
    a3 = (v11 >> 1) & 1;
    a2 = v11 & 0xFFFFFFFFFFFFFFFCLL;
  }

LABEL_62:
      a1->fts_child = 0LL;
      fts_cur = v10;
      goto LABEL_76;
    }
  }

  int v12 = fts_cur;
  do
  {
    fts_cur = v12->fts_link;
    if (!fts_cur)
    {
      fts_cur = v12->fts_parent;
      fts_free(v12);
      if (fts_cur->fts_level == -1)
      {
        fts_free(fts_cur);
        fts_cur = 0LL;
        *__error() = 0;
        a1->fts_cur = 0LL;
        return fts_cur;
      }

      a1->fts_path[fts_cur->fts_pathlen] = 0;
      if (fts_cur->fts_level)
      {
        unsigned __int16 fts_flags = fts_cur->fts_flags;
        if ((fts_flags & 2) != 0)
        {
          if ((a1->fts_options & 4) != 0 || !fts_fchdir((uint64_t)a1, fts_cur->fts_symfd))
          {
            close_NOCANCEL();
            fts_cur->fts_symfd = -1;
            goto LABEL_70;
          }

          int v20 = *__error();
          close_NOCANCEL();
          fts_cur->fts_symfd = -1;
          *__error() = v20;
        }

        else if ((fts_flags & 1) != 0 || !fts_safe_changedir((uint64_t)a1, (uint64_t)fts_cur, -1))
        {
          goto LABEL_70;
        }
      }

      else if ((a1->fts_options & 4) != 0 || !fts_fchdir((uint64_t)a1, a1->fts_rfd))
      {
LABEL_70:
        if (fts_cur->fts_errno) {
          __int16 v22 = 7;
        }
        else {
          __int16 v22 = 6;
        }
        fts_cur->fts_mach_timebase_info info = v22;
        goto LABEL_86;
      }

      a1->fts_options |= 0x200u;
      a1->fts_cur = fts_cur;
      return 0LL;
    }

    fts_free(v12);
    if (!fts_cur->fts_level)
    {
      a1->fts_cur = fts_cur;
      if ((a1->fts_options & 4) != 0 || !fts_fchdir((uint64_t)a1, a1->fts_rfd))
      {
        fts_load((uint64_t)a1, (uint64_t)fts_cur);
        return a1->fts_cur;
      }

      else
      {
        fts_cur = 0LL;
        a1->fts_options |= 0x200u;
      }

      return fts_cur;
    }

    int v13 = fts_cur->fts_instr;
    int v12 = fts_cur;
  }

  while (v13 == 4);
  if (v13 == 2)
  {
    int v14 = fts_stat2((uint64_t)a1, (uint64_t)fts_cur, 1, -1, 0LL);
    fts_cur->fts_mach_timebase_info info = v14;
    if (v14 == 1 && (a1->fts_options & 4) == 0)
    {
      int v15 = open_NOCANCEL();
      fts_cur->fts_symfd = v15;
      if (v15 < 0)
      {
        fts_cur->fts_errno = *__error();
        fts_cur->fts_mach_timebase_info info = 7;
      }

      else
      {
        fts_cur->fts_flags |= 2u;
      }
    }

    fts_cur->int fts_instr = 3;
  }

LABEL_76:
  fts_parent = fts_cur->fts_parent;
  LODWORD(v24) = fts_parent->fts_pathlen;
  if (fts_parent->fts_level) {
    BOOL v25 = 0;
  }
  else {
    BOOL v25 = (_DWORD)v24 == 1;
  }
  if (v25)
  {
    if (*fts_parent->fts_path != 47)
    {
      LODWORD(v24) = 1;
      goto LABEL_84;
    }

    uint64_t v24 = 0LL;
  }

  else
  {
LABEL_84:
    uint64_t v24 = v24;
  }

  a1->fts_path[v24] = 47;
  _platform_memmove();
LABEL_86:
  a1->fts_cur = fts_cur;
  return fts_cur;
}

    *(_WORD *)(a1 + 16) |= 0x40u;
  }

  return 0xFFFFFFFFLL;
}

    if ((_DWORD)v25 != v4)
    {
      __ungetwc(v25, a1, (uint64_t)a2);
      return v168;
    }

    int v9 = (v9 + 1);
    int v8 = v168;
LABEL_78:
    __int128 v4 = *v11;
    if (!*v11) {
      return v8;
    }
  }

  int v14 = 0;
  int v15 = 0LL;
  while (2)
  {
    int v5 = v11 + 1;
    int v16 = *v11;
    switch((int)v16)
    {
      case '$':
        uint64_t v17 = v15;
        int v15 = 0LL;
        v174 = a4;
        ++v11;
        if (v17 >= 2)
        {
          uint64_t v18 = v17 + 1;
          do
          {
            ++v174;
            --v18;
          }

          while (v18 > 2);
          int v15 = 0LL;
          unint64_t v11 = v5;
        }

        continue;
      case '%':
        uint64_t v24 = __fgetwc(a1, (uint64_t)a2);
        if ((_DWORD)v24 == -1) {
          goto LABEL_464;
        }
        BOOL v25 = v24;
        while (2)
        {
          if (v25 > 0x7F)
          {
            if (v25 >= 0x100)
            {
              LOWORD(v27) = ___runetype_l(v25, a2);
              goto LABEL_59;
            }

            int v26 = *(_RuneLocale **)(*((void *)v170 + 166) + 120LL);
          }

          else
          {
            int v26 = &_DefaultRuneLocale;
          }

          __int16 v27 = v26->__runetype[v25];
LABEL_59:
          if ((v27 & 0x4000) != 0)
          {
            LODWORD(v9) = v9 + 1;
            BOOL v25 = __fgetwc(a1, (uint64_t)a2);
            if ((_DWORD)v25 == -1) {
              goto LABEL_464;
            }
            continue;
          }

          break;
        }

        __int128 v4 = 37;
        ++v11;
        goto LABEL_76;
      case '&':
      case '\'':
      case '(':
      case ')':
      case '+':
      case ',':
      case '-':
      case '.':
      case '/':
      case ':':
      case ';':
      case '<':
      case '=':
      case '>':
      case '?':
      case '@':
      case 'B':
      case 'D':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'Y':
      case 'Z':
      case '\\':
      case ']':
      case '^':
      case '_':
      case 'b':
      case 'k':
      case 'm':
      case 'r':
      case 'v':
      case 'w':
      case 'y':
        return v168;
      case '*':
        v14 |= 8u;
        ++v11;
        continue;
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        int v15 = v16 + 10 * v15 - 48;
        ++v11;
        continue;
      case 'A':
      case 'E':
      case 'F':
      case 'G':
      case 'a':
      case 'e':
      case 'f':
      case 'g':
        int v32 = 4;
        goto LABEL_87;
      case 'C':
        v14 |= 1u;
        goto LABEL_84;
      case 'L':
        v14 |= 2u;
        ++v11;
        continue;
      case 'S':
        v14 |= 1u;
        goto LABEL_86;
      case 'X':
      case 'x':
        int v33 = 33024;
        goto LABEL_112;
      case '[':
        v163 = v11[1] == 94;
        int v38 = v11 + 2;
        int v39 = 1LL;
        if (v11[1] == 94) {
          int v39 = 2LL;
        }
        else {
          int v38 = v11 + 1;
        }
        uint64_t v40 = &v38[v11[v39] == 93];
        uint64_t v34 = (uint64_t)base;
        while (*v40 && *v40 != 93)
          ++v40;
        v166 = (__int32 *)v5;
        v158 = v40;
        int v5 = v40 + 1;
        v14 |= 0x20u;
        int v32 = 1;
        if ((v14 & 0x20) != 0) {
          goto LABEL_118;
        }
        goto LABEL_88;
      case 'c':
LABEL_84:
        int v32 = 0;
        v14 |= 0x20u;
        goto LABEL_87;
      case 'd':
        goto LABEL_115;
      case 'h':
        uint64_t v19 = v14 & 0xFFFFBFFB | 0x4000;
        int v20 = v14 | 4;
        uint64_t v21 = (v14 & 4) == 0;
        goto LABEL_29;
      case 'i':
        uint64_t v34 = 0LL;
        int v32 = 3;
        if ((v14 & 0x20) != 0) {
          goto LABEL_118;
        }
        goto LABEL_88;
      case 'j':
        v14 |= 0x800u;
        ++v11;
        continue;
      case 'l':
        uint64_t v19 = v14 & 0xFFFFFBFE | 0x400;
        int v20 = v14 | 1;
        uint64_t v21 = (v14 & 1) == 0;
LABEL_29:
        if (v21) {
          int v14 = v20;
        }
        else {
          int v14 = v19;
        }
        ++v11;
        continue;
      case 'n':
        if ((v14 & 8) == 0)
        {
          __int16 v22 = v174++;
          __int16 v23 = *v22;
          if (v23)
          {
            if ((v14 & 0x4000) != 0)
            {
              *(_BYTE *)__int16 v23 = v9;
            }

            else if ((v14 & 4) != 0)
            {
              *(_WORD *)__int16 v23 = v9;
            }

            else if ((v14 & 1) != 0 {
                   || (v14 & 0x400) != 0
            }
                   || (v14 & 0x800) != 0
                   || (v14 & 0x2000) != 0
                   || (v14 & 0x1000) != 0)
            {
              *(void *)__int16 v23 = (int)v9;
            }

            else
            {
              *__int16 v23 = v9;
            }
          }
        }

        __int128 v4 = *v5;
        int v8 = v168;
        if (!*v5) {
          return v8;
        }
        goto LABEL_7;
      case 'o':
        v14 |= 0x8000u;
        int v32 = 3;
        uint64_t v34 = 8LL;
        if ((v14 & 0x20) != 0) {
          goto LABEL_118;
        }
        goto LABEL_88;
      case 'p':
        int v33 = 33040;
LABEL_112:
        v14 |= v33;
        int v32 = 3;
        uint64_t v34 = 16LL;
        if ((v14 & 0x20) != 0) {
          goto LABEL_118;
        }
        goto LABEL_88;
      case 'q':
        v14 |= 0x400u;
        ++v11;
        continue;
      case 's':
LABEL_86:
        int v32 = 2;
LABEL_87:
        uint64_t v34 = (uint64_t)base;
        if ((v14 & 0x20) == 0) {
          goto LABEL_88;
        }
        goto LABEL_118;
      case 't':
        v14 |= 0x1000u;
        ++v11;
        continue;
      case 'u':
        v14 |= 0x8000u;
LABEL_115:
        int v32 = 3;
        uint64_t v34 = 10LL;
        if ((v14 & 0x20) != 0) {
          goto LABEL_118;
        }
LABEL_88:
        uint64_t v35 = __fgetwc(a1, (uint64_t)a2);
        if ((_DWORD)v35 == -1) {
          goto LABEL_464;
        }
        unsigned __int8 v36 = v35;
        break;
      case 'z':
        v14 |= 0x2000u;
        ++v11;
        continue;
      default:
        if (!(_DWORD)v16) {
          return 0xFFFFFFFFLL;
        }
        return v168;
    }

    break;
  }

  while (1)
  {
    if (v36 > 0x7F)
    {
      if (v36 >= 0x100)
      {
        if ((___runetype_l(v36, a2) & 0x4000) == 0) {
          break;
        }
        goto LABEL_97;
      }

      char v37 = *(_RuneLocale **)(*((void *)v170 + 166) + 120LL);
    }

    else
    {
      char v37 = &_DefaultRuneLocale;
    }

uint64_t fts_safe_changedir(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(_BYTE *)(a1 + 64) & 4) != 0) {
    return 0LL;
  }
  int v6 = a3;
  if (a3 < 0)
  {
    int v6 = open_NOCANCEL();
    if (v6 < 0) {
      return 0xFFFFFFFFLL;
    }
  }

  if (fstat(v6, &v15)) {
    goto LABEL_5;
  }
  if (a3 == -1)
  {
    close_NOCANCEL();
    int v6 = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(a2 + 60) = -1;
    __int16 v13 = *(_WORD *)(a2 + 90) & 0xFFF7;
    goto LABEL_22;
  }

  int v10 = open_NOCANCEL();
  if ((v10 & 0x80000000) == 0)
  {
    int v11 = v10;
    if (fstat(v10, &v14))
    {
      int v12 = *__error();
      close_NOCANCEL();
      *__error() = v12;
      goto LABEL_5;
    }

    if (v15.st_dev == v14.st_dev)
    {
      close_NOCANCEL();
LABEL_23:
      uint64_t v7 = fts_fchdir(a1, v6);
      goto LABEL_6;
    }

    *(_DWORD *)(a2 + 60) = v11;
    __int16 v13 = *(_WORD *)(a2 + 90) | 8;
LABEL_22:
    *(_WORD *)(a2 + 90) = v13;
    goto LABEL_23;
  }

LABEL_5:
  uint64_t v7 = 0xFFFFFFFFLL;
LABEL_6:
  int v8 = *__error();
  if (a3 < 0) {
    close_NOCANCEL();
  }
  *__error() = v8;
  return v7;
}

      *a3 = 1;
      stat v14 = "0";
      stat v15 = a5;
      int v16 = 1;
      return __nrv_alloc_D2A((unsigned __int8 *)v14, v15, v16);
    default:
      abort_report_np((uint64_t)"%s:%s:%u: fpclassify returned %d");
  }

    int result = strsep(&v30, ":");
    if (!result) {
      break;
    }
    int v10 = result;
    while (1)
    {
      int v11 = *v10 ? _platform_strlen() : 1LL;
      int v12 = _platform_strlen() + v11;
      write_NOCANCEL();
      write_NOCANCEL();
      write_NOCANCEL();
      int result = strsep(&v30, ":");
      int v10 = result;
      if (!result) {
        goto LABEL_12;
      }
    }

    _platform_memmove();
    v31[v11] = 47;
    _platform_memmove();
    v31[v12 + 1] = 0;
    __int128 v4 = v25;
  }

uint64_t fts_build(uint64_t a1, int a2)
{
  uint64_t v93 = 0LL;
  __int128 v91 = 0u;
  __int128 v92 = 0u;
  __int128 v89 = 0u;
  __int128 v90 = 0u;
  __int128 v87 = 0u;
  __int128 v88 = 0u;
  __int128 v85 = 0u;
  __int128 v86 = 0u;
  __int128 v83 = 0u;
  __int128 v84 = 0u;
  uint64_t v4 = *(void *)a1;
  int v5 = *(const char **)(*(void *)a1 + 40LL);
  *(_OWORD *)dirp = 0u;
  __int128 v80 = 0u;
  *(_OWORD *)uint64_t v81 = 0u;
  *(_OWORD *)uint64_t v82 = 0u;
  unsigned int v6 = *(_DWORD *)(a1 + 64);
  int v7 = (v6 >> 3) & 1;
  BYTE1(v82[1]) = (v6 & 8) != 0;
  HIBYTE(v82[1]) = (v6 & 0x20) != 0;
  BYTE2(v82[1]) = HIBYTE(v82[1]);
  v82[0] = open_NOCANCEL();
  if (v82[0] != -1)
  {
    v81[0] = malloc(0x8000uLL);
    if (!v81[0]) {
      goto LABEL_11;
    }
    LOWORD(dirp[1]) = 5;
    if (v7) {
      int v8 = -2113929205;
    }
    else {
      int v8 = -2113430005;
    }
    if (v7) {
      int v9 = 1;
    }
    else {
      int v9 = 557;
    }
    HIDWORD(dirp[1]) = v8;
    DWORD2(v80) = v9;
    if ((advance_directory((uint64_t)dirp) & 1) != 0)
    {
LABEL_13:
      if (a2 == 2)
      {
        BOOL v70 = 0;
        int v71 = 0;
        int v78 = 0;
      }

      else
      {
        int v10 = *(_DWORD *)(a1 + 64);
        if ((v10 & 0x800) != 0)
        {
          int v11 = *(_DWORD *)(a1 + 64) & 0x10 ^ 0x50;
        }

        else if ((v10 & 8) != 0)
        {
          if ((v10 & 0x10) != 0) {
            int v11 = 48;
          }
          else {
            int v11 = 16;
          }
        }

        else
        {
          int v11 = 32;
        }

        int v71 = v11;
        BOOL v70 = a2 == 3;
        if (dirp[0]) {
          int v13 = dirfd(dirp[0]);
        }
        else {
          int v13 = v82[0];
        }
        if (!fts_safe_changedir(a1, v4, v13))
        {
          int v78 = 0;
          char v72 = 0;
LABEL_32:
          __int16 v14 = *(_WORD *)(v4 + 86);
          unsigned int v15 = *(unsigned __int16 *)(v4 + 64);
          if (!v14 && v15 == 1) {
            unsigned int v15 = **(unsigned __int8 **)(v4 + 48) != 47;
          }
          int v76 = a2;
          if ((*(_BYTE *)(a1 + 64) & 4) != 0)
          {
            int v16 = (_BYTE *)(*(void *)(a1 + 32) + v15);
            *int v16 = 47;
            int v74 = v16 + 1;
            __int16 v14 = *(_WORD *)(v4 + 86);
          }

          unsigned int v17 = 0;
          uint64_t v18 = 0LL;
          uint64_t v12 = 0LL;
          int v75 = 0;
          uint64_t v19 = v15 + 1;
          int v20 = *(_DWORD *)(a1 + 44) - v19;
          __int16 v77 = v14 + 1;
          unsigned int v73 = v15 + 2;
          while (1)
          {
            if (dirp[0])
            {
              uint64_t v21 = readdir(dirp[0]);
              if (!v21) {
                goto LABEL_127;
              }
              d_name = v21->d_name;
              d_namleuint64_t n = v21->d_namlen;
              *(void *)&__int128 v83 = v21->d_name;
              *((void *)&v83 + 1) = d_namlen;
              LODWORD(v93) = v21->d_type;
              goto LABEL_82;
            }

            if (v82[0] == -1) {
              goto LABEL_127;
            }
            if (BYTE2(v82[1])) {
              break;
            }
            if (HIBYTE(v82[1]))
            {
              HIBYTE(v82[1]) = 0;
              d_name = "..";
              *(void *)&__int128 v83 = "..";
              *((void *)&v83 + 1) = 2LL;
              LODWORD(v93) = 4;
              LODWORD(d_namlen) = 2;
              goto LABEL_82;
            }

            int v24 = v82[3];
            if (v82[3] == v82[2])
            {
              if (LOBYTE(v82[1]) || !advance_directory((uint64_t)dirp) || LOBYTE(v82[1]))
              {
LABEL_127:
                close_directory((uint64_t)dirp);
                if (v75)
                {
                  uint64_t v58 = *(void *)(a1 + 32);
                  for (unint64_t i = *(void **)(a1 + 8); i; unint64_t i = (void *)i[2])
                  {
                    uint64_t v60 = (void *)i[5];
                    if (v60 != i + 13) {
                      i[5] = (char *)v60 + v58 - i[6];
                    }
                    i[6] = v58;
                  }

                  if ((*(__int16 *)(v12 + 86) & 0x80000000) == 0)
                  {
                    uint64_t v61 = (void *)v12;
                    do
                    {
                      uint64_t v62 = (void *)v61[5];
                      if (v62 != v61 + 13) {
                        v61[5] = (char *)v62 + v58 - v61[6];
                      }
                      v61[6] = v58;
                      uint64_t v63 = v61[2];
                      if (!v63) {
                        uint64_t v63 = v61[1];
                      }
                      uint64_t v61 = (void *)v63;
                    }

                    while ((*(__int16 *)(v63 + 86) & 0x80000000) == 0);
                  }
                }

                if ((*(_BYTE *)(a1 + 64) & 4) != 0)
                {
                  BOOL v64 = (_DWORD)v19 == *(_DWORD *)(a1 + 44) || v17 == 0;
                  uint64_t v65 = v64;
                  v74[-v65] = 0;
                }

                if ((v72 & 1) != 0)
                {
LABEL_148:
                  if (!v17)
                  {
                    if (!v70) {
                      return 0LL;
                    }
                    uint64_t v12 = 0LL;
                    *(_WORD *)(v4 + 88) = 6;
                    return v12;
                  }
                }

                else if (v76 == 1 || !v17)
                {
                  if (*(_WORD *)(v4 + 86))
                  {
                  }

                  else if ((*(_BYTE *)(a1 + 64) & 4) != 0 || !fts_fchdir(a1, *(_DWORD *)(a1 + 40)))
                  {
                    goto LABEL_148;
                  }

                  uint64_t v12 = 0LL;
                  *(_WORD *)(v4 + 88) = 7;
                  *(_DWORD *)(a1 + 64) |= 0x200u;
                  return v12;
                }

                if (*(void *)(a1 + 56) && v17 >= 2) {
                  return fts_sort(a1, v12, v17);
                }
                return v12;
              }

              int v24 = v82[3];
            }

            uint64_t v93 = 0LL;
            __int128 v91 = 0u;
            __int128 v92 = 0u;
            __int128 v89 = 0u;
            __int128 v90 = 0u;
            __int128 v87 = 0u;
            __int128 v88 = 0u;
            __int128 v85 = 0u;
            __int128 v86 = 0u;
            __int128 v83 = 0u;
            __int128 v84 = 0u;
            BOOL v25 = (unsigned int *)v81[1];
            int v26 = v24 + 1;
            v82[3] = v26;
            if (BYTE1(v82[1]))
            {
              __int16 v27 = (unsigned int *)((char *)v81[1] + *(unsigned int *)v81[1]);
              v81[1] = v27;
              uint64_t v28 = v25[7];
              if (!(_DWORD)v28) {
                fts_build_cold_1();
              }
              d_name = (char *)v25 + (int)v25[6] + 24;
              LODWORD(d_namlen) = v28 - 1;
              *(void *)&__int128 v83 = d_name;
              *((void *)&v83 + 1) = (v28 - 1);
              int v29 = v25;
              BOOL v25 = 0LL;
            }

            else
            {
              int v30 = (unsigned int *)((char *)v81[1] + *(unsigned int *)v81[1]);
              v81[1] = v30;
              uint64_t v31 = v25[7];
              if (!(_DWORD)v31) {
                fts_build_cold_1();
              }
              d_name = (char *)v25 + (int)v25[6] + 24;
              LODWORD(d_namlen) = v31 - 1;
              *(void *)&__int128 v83 = d_name;
              *((void *)&v83 + 1) = (v31 - 1);
              int v29 = 0LL;
            }

            if (!BYTE1(v82[1])) {
              int v29 = v25;
            }
            int v32 = v29[9] - 1;
            int v33 = 4;
            __int16 v34 = 0x8000;
            int v35 = 8;
            switch(v32)
            {
              case 0:
                goto LABEL_72;
              case 1:
                goto LABEL_67;
              case 2:
                __int16 v34 = 24576;
                int v35 = 6;
                goto LABEL_72;
              case 3:
                __int16 v34 = 0x2000;
                int v35 = 2;
                goto LABEL_72;
              case 4:
                __int16 v34 = -24576;
                int v35 = 10;
                goto LABEL_72;
              case 5:
                __int16 v34 = -16384;
                int v35 = 12;
                goto LABEL_72;
              case 6:
                __int16 v34 = 4096;
                int v35 = 1;
LABEL_72:
                LODWORD(v93) = v35;
                if (BYTE1(v82[1])) {
                  goto LABEL_82;
                }
                BYTE4(v93) = 1;
                int v36 = DWORD2(v80);
                if ((v35 | 4) != 6)
                {
                  v25[36] = 0;
                  v36 &= ~0x20u;
                }

                unsigned int v37 = HIDWORD(dirp[1]);
                unsigned int v38 = v25[1];
                if ((v38 & 0x200) == 0)
                {
                  unsigned int v37 = HIDWORD(dirp[1]) & 0xFFFFFDFF;
                  *((void *)v25 + 5) = 0LL;
                  *((void *)v25 + 6) = 0LL;
                }

                if ((v37 & ~v38) != 0 || (v36 & ~v25[4]) != 0) {
                  goto LABEL_82;
                }
                LODWORD(v84) = v25[8];
                WORD3(v84) = v25[32];
                *((void *)&v84 + 1) = *((void *)v25 + 15);
                *(void *)&__int128 v85 = *((void *)v25 + 13);
                unsigned int v39 = v25[35];
                DWORD2(v85) = v25[36];
                __int128 v86 = *(_OWORD *)(v25 + 22);
                __int128 v87 = *(_OWORD *)(v25 + 14);
                __int128 v88 = *(_OWORD *)(v25 + 18);
                __int128 v40 = *(_OWORD *)(v25 + 10);
                *(void *)&__int128 v90 = *(void *)(v25 + 37);
                __int128 v89 = v40;
                LODWORD(v91) = v39;
                DWORD1(v91) = v25[29];
                WORD2(v84) = v25[28] & 0xFFF | v34;
                uint64_t v41 = *(void *)(v25 + 33);
                BOOL v64 = (v41 & 0x1FF) == 0;
                uint64_t v42 = v41 / 512;
                if (!v64) {
                  ++v42;
                }
                *((void *)&v90 + 1) = v42;
                break;
              default:
                int v33 = 0;
LABEL_67:
                LODWORD(v93) = v33;
                goto LABEL_82;
            }

LABEL_83:
            if ((*(_BYTE *)(a1 + 64) & 0x20) != 0 || *d_name != 46 || d_name[1] && (d_name[1] != 46 || d_name[2]))
            {
              unsigned int v43 = fts_alloc(a1, (uint64_t)d_name, (int)d_namlen);
              if (!v43) {
                goto LABEL_161;
              }
              uint64_t v44 = *((void *)&v83 + 1);
              if (*((void *)&v83 + 1) >= (unint64_t)v20)
              {
                uint64_t v45 = *(void *)(a1 + 32);
                if (fts_palloc(a1, v73 + DWORD2(v83)))
                {
LABEL_161:
                  int v66 = *__error();
                  fts_free(v43);
                  if (v12)
                  {
                    do
                    {
                      uint64_t v67 = *(void *)(v12 + 16);
                      fts_free((_DWORD *)v12);
                      uint64_t v12 = v67;
                    }

                    while (v67);
                  }

                  close_directory((uint64_t)dirp);
                  *(_WORD *)(v4 + 88) = 7;
                  *(_DWORD *)(a1 + 64) |= 0x200u;
                  uint64_t v12 = 0LL;
                  *__error() = v66;
                  return v12;
                }

                uint64_t v46 = *(void *)(a1 + 32);
                if (v45 != v46)
                {
                  int v47 = (_BYTE *)(v46 + v19);
                  int v48 = v74;
                  if ((*(_BYTE *)(a1 + 64) & 4) != 0) {
                    int v48 = v47;
                  }
                  int v74 = v48;
                  int v75 = 1;
                }

                int v20 = *(_DWORD *)(a1 + 44) - v19;
                uint64_t v44 = *((void *)&v83 + 1);
              }

              unint64_t v49 = v44 + v19;
              if (v49 >= 0xFFFF)
              {
                fts_free(v43);
                if (v12)
                {
                  do
                  {
                    uint64_t v68 = *(void *)(v12 + 16);
                    fts_free((_DWORD *)v12);
                    uint64_t v12 = v68;
                  }

                  while (v68);
                }

                close_directory((uint64_t)dirp);
                *(_WORD *)(v4 + 88) = 7;
                *(_DWORD *)(a1 + 64) |= 0x200u;
                uint64_t v12 = 0LL;
                *__error() = 63;
                return v12;
              }

              *((_WORD *)v43 + 43) = v77;
              *((void *)v43 + 1) = *(void *)a1;
              *((_WORD *)v43 + 32) = v49;
              if (v78)
              {
                if (v76 == 2)
                {
                  __int16 v50 = 11;
                }

                else
                {
                  v43[14] = v78;
                  __int16 v50 = 10;
                }

                *((_WORD *)v43 + 44) = v50;
                unint64_t v56 = *(_DWORD **)(v4 + 40);
              }

              else
              {
                __int16 v51 = 3;
                switch(v93 | v71)
                {
                  case 0x10u:
                  case 0x14u:
                  case 0x1Au:
                  case 0x20u:
                  case 0x21u:
                  case 0x22u:
                  case 0x24u:
                  case 0x26u:
                  case 0x28u:
                  case 0x2Au:
                  case 0x2Cu:
                  case 0x2Eu:
                  case 0x30u:
                  case 0x34u:
                  case 0x40u:
                  case 0x44u:
                  case 0x50u:
                  case 0x54u:
                  case 0x5Au:
                    if ((*(_BYTE *)(a1 + 64) & 4) != 0)
                    {
                      *((void *)v43 + 5) = *((void *)v43 + 6);
                      _platform_memmove();
                      if (dirp[0]) {
                        int v55 = dirfd(dirp[0]);
                      }
                      else {
                        int v55 = v82[0];
                      }
                      if (BYTE4(v93)) {
                        unint64_t v52 = &v84;
                      }
                      else {
                        unint64_t v52 = 0LL;
                      }
                      uint64_t v53 = a1;
                      uint64_t v54 = (uint64_t)v43;
                    }

                    else
                    {
                      *((void *)v43 + 5) = v43 + 26;
                      if (BYTE4(v93)) {
                        unint64_t v52 = &v84;
                      }
                      else {
                        unint64_t v52 = 0LL;
                      }
                      uint64_t v53 = a1;
                      uint64_t v54 = (uint64_t)v43;
                      int v55 = -1;
                    }

                    *((_WORD *)v43 + 44) = fts_stat2(v53, v54, 0, v55, (uint64_t)v52);
                    goto LABEL_117;
                  case 0x41u:
                  case 0x42u:
                  case 0x46u:
                  case 0x4Cu:
                  case 0x51u:
                  case 0x52u:
                  case 0x56u:
                  case 0x5Cu:
                    goto LABEL_124;
                  case 0x48u:
                  case 0x58u:
                    __int16 v51 = 8;
                    goto LABEL_124;
                  case 0x4Au:
                    __int16 v51 = 12;
                    goto LABEL_124;
                  case 0x4Eu:
                  case 0x5Eu:
                    __int16 v51 = 14;
                    goto LABEL_124;
                  default:
                    __int16 v51 = 11;
LABEL_124:
                    *((_WORD *)v43 + 44) = v51;
                    if ((*(_BYTE *)(a1 + 64) & 4) != 0) {
                      unint64_t v56 = (_DWORD *)*((void *)v43 + 6);
                    }
                    else {
                      unint64_t v56 = v43 + 26;
                    }
                    break;
                }
              }

              *((void *)v43 + 5) = v56;
LABEL_117:
              *((void *)v43 + 2) = 0LL;
              uint64_t v57 = v43;
              if (v12)
              {
                *((void *)v18 + 2) = v43;
                uint64_t v57 = (_DWORD *)v12;
              }

              ++v17;
              uint64_t v18 = v43;
              uint64_t v12 = (uint64_t)v57;
            }
          }

          BYTE2(v82[1]) = 0;
          *(void *)&__int128 v83 = ".";
          *((void *)&v83 + 1) = 1LL;
          LODWORD(v93) = 4;
          LODWORD(d_namlen) = 1;
          d_name = ".";
LABEL_82:
          BYTE4(v93) = 0;
          goto LABEL_83;
        }

        if (a2 == 3) {
          *(_DWORD *)(v4 + 56) = *__error();
        }
        *(_WORD *)(v4 + 90) |= 1u;
        int v78 = *__error();
        close_directory((uint64_t)dirp);
      }

      char v72 = 1;
      goto LABEL_32;
    }

    if (v82[0] != -1) {
LABEL_11:
    }
      close_NOCANCEL();
  }

  v82[0] = -1;
  free(v81[0]);
  v81[0] = 0LL;
  dirp[0] = opendir(v5);
  if (dirp[0]) {
    goto LABEL_13;
  }
  if (a2 != 3) {
    return 0LL;
  }
  *(_WORD *)(v4 + 88) = 4;
  uint64_t v12 = 0LL;
  *(_DWORD *)(v4 + 56) = *__error();
  return v12;
}

      int v33 = __error();
LABEL_84:
      __int16 v34 = 63;
LABEL_85:
      *int v33 = v34;
      goto LABEL_86;
    }

    break;
  }

  if (*__error() != 45 && *__error() != 22) {
    goto LABEL_86;
  }
  int v24 = lstat(v7, &v40);
  if (!v24)
  {
    int v26 = (v40.st_mode & 0xF000) == 40960;
    uint64_t v28 = v40.st_dev;
    BOOL v25 = 1;
    st_ino = v40.st_ino;
    goto LABEL_52;
  }

  if ((v24 & 0x80000000) == 0)
  {
    BOOL v25 = 0;
    int v26 = v36;
    st_ino = v37;
    uint64_t v28 = v39;
    goto LABEL_52;
  }

      int v33 = __error();
LABEL_84:
      __int16 v34 = 63;
LABEL_85:
      *int v33 = v34;
      goto LABEL_86;
    }

    break;
  }

  if (*__error() != 45 && *__error() != 22) {
    goto LABEL_86;
  }
  int v24 = lstat(v7, &v40);
  if (!v24)
  {
    int v26 = (v40.st_mode & 0xF000) == 40960;
    uint64_t v28 = v40.st_dev;
    BOOL v25 = 1;
    st_ino = v40.st_ino;
    goto LABEL_52;
  }

  if ((v24 & 0x80000000) == 0)
  {
    BOOL v25 = 0;
    int v26 = v36;
    st_ino = v37;
    uint64_t v28 = v39;
    goto LABEL_52;
  }

uint64_t fts_load(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a2 + 64) = *(_WORD *)(a2 + 66);
  uint64_t v4 = (const char *)(a2 + 104);
  _platform_memmove();
  uint64_t result = (uint64_t)strrchr(v4, 47);
  if (result && ((const char *)result != v4 || *(_BYTE *)(a2 + 105)))
  {
    __int16 v6 = _platform_strlen();
    uint64_t result = _platform_memmove();
    *(_WORD *)(a2 + 66) = v6;
  }

  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a2 + 40) = v7;
  *(void *)(a2 + 48) = v7;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 80);
  return result;
}

int fts_set(FTS *a1, FTSENT *a2, int a3)
{
  if (a3 < 5)
  {
    int result = 0;
    a2->int fts_instr = a3;
  }

  else
  {
    *__error() = 22;
    return 1;
  }

  return result;
}

FTSENT *__cdecl fts_children(FTS *a1, int a2)
{
  if ((a2 & 0xFFFFFEFF) != 0)
  {
    int v2 = __error();
    int result = 0LL;
    *int v2 = 22;
    return result;
  }

  fts_cur = a1->fts_cur;
  *__error() = 0;
  if ((a1->fts_options & 0x200) != 0) {
    return 0LL;
  }
  fts_mach_timebase_info info = fts_cur->fts_info;
  if (fts_info != 1)
  {
    if (fts_info == 9) {
      return fts_cur->fts_link;
    }
    return 0LL;
  }

  fts_child = a1->fts_child;
  if (fts_child)
  {
    do
    {
      fts_linuint64_t k = fts_child->fts_link;
      fts_free(fts_child);
      fts_child = fts_link;
    }

    while (fts_link);
  }

  if (a2 == 256)
  {
    a1->fts_options |= 0x100u;
    int v10 = 2;
  }

  else
  {
    int v10 = 1;
  }

  if (fts_cur->fts_level || *fts_cur->fts_accpath == 47 || (a1->fts_options & 4) != 0)
  {
    a1->fts_child = (_ftsent *)fts_build((uint64_t)a1, v10);
    if (*__error()) {
      fts_cur->fts_errno = *__error();
    }
  }

  else
  {
    int v11 = open_NOCANCEL();
    if (v11 < 0) {
      return 0LL;
    }
    int v12 = v11;
    a1->fts_child = (_ftsent *)fts_build((uint64_t)a1, v10);
    if (*__error()) {
      fts_cur->fts_errno = *__error();
    }
    int v13 = fts_fchdir((uint64_t)a1, v12);
    close_NOCANCEL();
    if (v13) {
      return 0LL;
    }
  }

  return a1->fts_child;
}

uint64_t fts_palloc(uint64_t a1, int a2)
{
  size_t v3 = (a2 + *(_DWORD *)(a1 + 44) + 256);
  *(_DWORD *)(a1 + 44) = v3;
  uint64_t v4 = *(void **)(a1 + 32);
  if (v3 < 0xFFFF)
  {
    int v5 = realloc(v4, v3);
    if (v5)
    {
      __int16 v6 = v5;
      uint64_t result = 0LL;
      *(void *)(a1 + 32) = v6;
      return result;
    }

    free(*(void **)(a1 + 32));
    *(void *)(a1 + 32) = 0LL;
  }

  else
  {
    free(v4);
    *(void *)(a1 + 32) = 0LL;
    *__error() = 63;
  }

  return 1LL;
}

_DWORD *fts_alloc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 112LL;
  if ((*(_DWORD *)(a1 + 64) & 8) == 0) {
    uint64_t v5 = 263LL;
  }
  __int16 v6 = calloc(1uLL, v5 + a3);
  uint64_t v7 = v6;
  if (v6)
  {
    v6[15] = -1;
    *((void *)v6 + 6) = *(void *)(a1 + 32);
    *((_WORD *)v6 + 33) = a3;
    *((_WORD *)v6 + 46) = 3;
    if ((*(_BYTE *)(a1 + 64) & 8) == 0) {
      *((void *)v6 + 12) = ((unint64_t)v6 + a3 + 113) & 0xFFFFFFFFFFFFFFF8LL;
    }
    _platform_memmove();
  }

  return v7;
}

uint64_t fts_sort(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = a2;
  if (*(_DWORD *)(a1 + 48) >= (signed int)a3)
  {
    __int16 v6 = *(void **)(a1 + 16);
    if (!a2) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  *(_DWORD *)(a1 + 48) = a3 + 40;
  __int16 v6 = (void *)reallocarray_DARWIN_EXTSN();
  if (!v6)
  {
    free(*(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0LL;
    *(_DWORD *)(a1 + 48) = 0;
    return v4;
  }

  for (*(void *)(a1 + 16) = v6; v4; uint64_t v4 = *(void *)(v4 + 16))
LABEL_6:
    *v6++ = v4;
LABEL_7:
  uint64_t v7 = *(void **)(a1 + 16);
  int v8 = *(void **)(a1 + 56);
  if ((*(_DWORD *)(a1 + 64) & 0x80000000) != 0) {
    qsort_b(v7, a3, 8uLL, v8);
  }
  else {
    qsort(v7, a3, 8uLL, (int (__cdecl *)(const void *, const void *))v8);
  }
  int v9 = *(void **)(a1 + 16);
  uint64_t v4 = *v9;
  uint64_t v10 = *v9;
  unsigned int v11 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      int v12 = v9;
      uint64_t v13 = v9[1];
      ++v9;
      *(void *)(*v12 + 16LL) = v13;
      --v11;
    }

    while (v11);
    uint64_t v10 = *v9;
  }

  *(void *)(v10 + 16) = 0LL;
  return v4;
}

void close_directory(uint64_t a1)
{
  int v2 = *(DIR **)a1;
  if (v2)
  {
    closedir(v2);
    *(void *)a1 = 0LL;
  }

  if (*(_DWORD *)(a1 + 48) != -1)
  {
    close_NOCANCEL();
    *(_DWORD *)(a1 + 48) = -1;
  }

  free(*(void **)(a1 + 32));
  *(void *)(a1 + 32) = 0LL;
}

uint64_t fts_stat2(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  if (a4 == -1)
  {
    int v8 = *(const char **)(a2 + 40);
    int v7 = -2;
  }

  else
  {
    int v7 = a4;
    int v8 = (const char *)(a2 + 104);
  }

  if ((*(_DWORD *)(a1 + 64) & 8) != 0) {
    int v9 = &v23;
  }
  else {
    int v9 = *(uint64_t **)(a2 + 96);
  }
  int v10 = *(_DWORD *)(a1 + 64) & 2;
  if (!a3 && a5 && (!v10 || (~*(unsigned __int16 *)(a5 + 4) & 0xA000) != 0))
  {
    *(_OWORD *)int v9 = *(_OWORD *)a5;
    __int128 v13 = *(_OWORD *)(a5 + 16);
    __int128 v14 = *(_OWORD *)(a5 + 32);
    __int128 v15 = *(_OWORD *)(a5 + 64);
    *((_OWORD *)v9 + 3) = *(_OWORD *)(a5 + 48);
    *((_OWORD *)v9 + 4) = v15;
    *((_OWORD *)v9 + 1) = v13;
    *((_OWORD *)v9 + 2) = v14;
    __int128 v16 = *(_OWORD *)(a5 + 80);
    __int128 v17 = *(_OWORD *)(a5 + 96);
    __int128 v18 = *(_OWORD *)(a5 + 128);
    *((_OWORD *)v9 + 7) = *(_OWORD *)(a5 + 112);
    *((_OWORD *)v9 + 8) = v18;
    *((_OWORD *)v9 + 5) = v16;
    *((_OWORD *)v9 + 6) = v17;
  }

  else
  {
    if (!(v10 | a3)) {
      goto LABEL_43;
    }
    if (fstatat(v7, v8, (stat *)v9, 0))
    {
      int v11 = *__error();
      if (!fstatat(v7, v8, (stat *)v9, 32))
      {
        if (v11 == 62) {
          *(_DWORD *)(a2 + 56) = 62;
        }
        *__error() = 0;
        return 13LL;
      }

LABEL_22:
      *(_DWORD *)(a2 + 56) = v11;
      *((_OWORD *)v9 + 7) = 0u;
      *((_OWORD *)v9 + 8) = 0u;
      *((_OWORD *)v9 + 5) = 0u;
      *((_OWORD *)v9 + 6) = 0u;
      *((_OWORD *)v9 + 3) = 0u;
      *((_OWORD *)v9 + 4) = 0u;
      *((_OWORD *)v9 + 1) = 0u;
      *((_OWORD *)v9 + 2) = 0u;
      uint64_t result = 10LL;
      *(_OWORD *)int v9 = 0u;
      return result;
    }

    if (a3 == -1 && (*((_WORD *)v9 + 2) & 0xF000) != 0x4000)
    {
LABEL_43:
      if (fstatat(v7, v8, (stat *)v9, 32))
      {
        int v11 = *__error();
        goto LABEL_22;
      }
    }
  }

  int v19 = *((_WORD *)v9 + 2) & 0xF000;
  if (v19 == 40960) {
    return 12LL;
  }
  if (v19 == 0x8000) {
    return 8LL;
  }
  if (v19 != 0x4000) {
    return 3LL;
  }
  int v20 = *(_DWORD *)v9;
  *(_DWORD *)(a2 + 80) = *(_DWORD *)v9;
  uint64_t v21 = v9[1];
  *(void *)(a2 + 72) = v21;
  *(_WORD *)(a2 + 84) = *((_WORD *)v9 + 3);
  if (*(_BYTE *)(a2 + 104) == 46 && (!*(_BYTE *)(a2 + 105) || *(_BYTE *)(a2 + 105) == 46 && !*(_BYTE *)(a2 + 106))) {
    return 5LL;
  }
  for (uint64_t i = *(void *)(a2 + 8); ; uint64_t i = *(void *)(i + 8))
  {
    if (v21 == *(void *)(i + 72) && v20 == *(_DWORD *)(i + 80)) {
      break;
    }
  }

  *(void *)a2 = i;
  return 2LL;
}

    *(_DWORD *)(a1 + 24) = v25 - 1;
    goto LABEL_23;
  }

  while (1)
  {
    __int128 v18 = v17 >= 16 ? 16LL : v17;
    int v19 = *(_DWORD *)(a2 + 20);
    int v20 = *(int *)(a2 + 16);
    uint64_t v21 = a2 + 16 * v20;
    *(void *)(v21 + 24) = &zeroes_0;
    *(void *)(v21 + 32) = v18;
    *(_DWORD *)(a2 + 16) = v20 + 1;
    *(_DWORD *)(a2 + 20) = v19 + v18;
    if ((int)v20 >= 7)
    {
    }

    __int16 v22 = __OFSUB__(v17, (_DWORD)v18);
    v17 -= v18;
    if ((v17 < 0) ^ v22 | (v17 == 0)) {
      goto LABEL_17;
    }
  }

  v11 += sprintf(v11, "%jdh", v13 / 0xE10uLL);
  __int128 v13 = v13 % 0xE10;
  if (!v7) {
    goto LABEL_23;
  }
LABEL_26:
  v11 += sprintf(v11, "%jdm", (unsigned __int16)v13 / 0x3Cu);
  __int128 v14 = (unsigned __int16)v13 % 0x3Cu;
LABEL_27:
  if (!v7 && !v14 && v10 != 0) {
    goto LABEL_40;
  }
  int v12 = sprintf(v11, "%jds");
LABEL_34:
  v11 += v12;
  if (v7)
  {
    if (v7 <= 8)
    {
      __int128 v16 = v7 - 9;
      do
        v8 /= 10;
      while (!__CFADD__(v16++, 1));
    }

    LODWORD(v11) = (_DWORD)v11 + sprintf(v11, ".%.*d", v7, v8);
  }

uint64_t advance_directory(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 52)) {
    return 1LL;
  }
  int v2 = *(_DWORD *)(a1 + 48);
  if (v2 == -1) {
    fts_build_cold_1();
  }
  int v3 = getattrlistbulk(v2, (void *)(a1 + 8), *(void **)(a1 + 32), 0x8000uLL, 8uLL);
  *(_DWORD *)(a1 + 56) = v3;
  if (v3 != -1)
  {
    if (!v3) {
      *(_BYTE *)(a1 + 52) = 1;
    }
    *(_DWORD *)(a1 + 60) = 0;
    *(void *)(a1 + 40) = *(void *)(a1 + 32);
    return 1LL;
  }

  int v5 = *__error();
  close_NOCANCEL();
  *(_DWORD *)(a1 + 48) = -1;
  __int16 v6 = __error();
  uint64_t result = 0LL;
  *__int16 v6 = v5;
  return result;
}

char *OUTLINED_FUNCTION_0()
{
  return _os_assert_log();
}

BOOL compat_mode(const char *function, const char *mode)
{
  int v2 = mode;
  char v3 = 0;
  uint64_t v4 = mode - 1;
  if ((parsed & 1) == 0)
  {
    pthread_once(&threadsafe, (void (*)(void))check_env_var);
    parsed = 1;
  }

  while (1)
  {
    if (!strcasecmp("unix2003", v2))
    {
      char v7 = unix2003_mode ^ 1;
      return (v3 ^ v7) & 1;
    }

    if (!strcasecmp("legacy", v2))
    {
      char v7 = unix2003_mode;
      return (v3 ^ v7) & 1;
    }

    if (!strcasecmp("bootstrap", v2)) {
      goto LABEL_19;
    }
    if (!strcasecmp("error", v2))
    {
      char v7 = parse_error;
      return (v3 ^ v7) & 1;
    }

    int v5 = strpbrk(v2, "!^&|");
    if (!v5) {
      goto LABEL_18;
    }
    __int16 v6 = v5;
    if (*v5 != 33) {
      break;
    }
    if (v2 != v5) {
      goto LABEL_18;
    }
    ++v2;
    v3 ^= 1u;
    ++v4;
  }

  int v8 = (char *)malloc(v5 - v4);
  _platform_strlcpy();
  BOOL v9 = compat_mode(function, v8);
  free(v8);
  BOOL v10 = compat_mode(function, v6 + 1);
  int v11 = *v6;
  switch(v11)
  {
    case '&':
      char v7 = v9 && v10;
      break;
    case '|':
      char v7 = v9 || v10;
      break;
    case '^':
      char v7 = v9 ^ v10;
      return (v3 ^ v7) & 1;
    default:
LABEL_18:
      fprintf(__stderrp, "invalid mode %s (while checking for %s)\n", v2, function);
LABEL_19:
      char v7 = 0;
      return (v3 ^ v7) & 1;
  }

  return (v3 ^ v7) & 1;
}

const char *check_env_var()
{
  uint64_t result = getenv("COMMAND_MODE");
  if (result)
  {
    unsigned int v1 = result;
    uint64_t result = (const char *)strcasecmp(result, "legacy");
    int v2 = (int)result;
    if ((_DWORD)result)
    {
      uint64_t result = (const char *)strcasecmp(v1, "unix2003");
      if ((_DWORD)result) {
        parse_error = 1;
      }
    }

    unix2003_mode = v2 == 0;
  }

  return result;
}

int getloadavg(double a1[], int a2)
{
  *(void *)__int128 v13 = 0x200000002LL;
  size_t v10 = 24LL;
  if (sysctl(v13, 2u, v11, &v10, 0LL, 0LL) < 0)
  {
    LODWORD(v4) = -1;
  }

  else
  {
    else {
      uint64_t v4 = a2;
    }
    if ((_DWORD)v4)
    {
      double v5 = (double)v12;
      __int16 v6 = (unsigned int *)v11;
      uint64_t v7 = v4;
      do
      {
        unsigned int v8 = *v6++;
        *a1++ = (double)v8 / v5;
        --v7;
      }

      while (v7);
    }
  }

  return v4;
}

ttyent *__cdecl getttynam(const char *a1)
{
  do
    unsigned int v1 = getttyent();
  while (v1 && _platform_strcmp());
  if (tf)
  {
    fclose((FILE *)tf);
    tf = 0LL;
  }

  return v1;
}

int setttyent(void)
{
  v0 = (void *)seq;
  if (seq) {
    goto LABEL_2;
  }
  if (regcomp(&brapreg, "\\[(.*)]", 1)) {
    return 0;
  }
  if (regcomp(&decpreg, "^([0-9]+)-([0-9]+)$", 1))
  {
LABEL_8:
    regfree(&brapreg);
    return 0;
  }

  if (regcomp(&hexpreg, "^0x([0-9a-f]+)-0x([0-9a-f]+)$", 3))
  {
LABEL_7:
    regfree(&decpreg);
    goto LABEL_8;
  }

  v0 = malloc(0x11CuLL);
  seq = (uint64_t)v0;
  if (!v0)
  {
    regfree(&hexpreg);
    goto LABEL_7;
  }

LABEL_2:
  void *v0 = 0LL;
  slot = 1;
  if (tf)
  {
    rewind((FILE *)tf);
    return 1;
  }

  else
  {
    tf = (uint64_t)fopen("/etc/ttys", "r");
    return tf != 0;
  }

  uint64_t v7 = __error();
  unsigned int v8 = 22;
LABEL_3:
  *uint64_t v7 = v8;
  return -1;
}

  if (fread(__ptr, 0x274uLL, 1uLL, v2) != 1)
  {
LABEL_17:
    _platform_bzero();
    return 0LL;
  }

  char v3 = a1 + 8;
  _utmpx32_64((uint64_t)__ptr, v3);
  return v3;
}

ttyent *getttyent(void)
{
  uint64_t v0 = __locale_key;
  unsigned int v1 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v0);
  if (v1) {
    int v2 = v1;
  }
  else {
    int v2 = (_xlocale *)&__global_locale;
  }
  if (!getttyent_line)
  {
    getttyent_line = (uint64_t)malloc(0x400uLL);
    if (!getttyent_line) {
      return 0LL;
    }
  }

  if (!tf && !setttyent()) {
    return 0LL;
  }
  int v3 = slot;
  uint64_t v4 = seq;
  int v5 = *(_DWORD *)seq;
  if (slot >= *(_DWORD *)seq)
  {
    __int16 v6 = (ttyent *)&getttyent_tty;
    uint64_t v7 = &_DefaultRuneLocale.__maplower[127];
    do
    {
      if (*(int *)(v4 + 4) >= 1)
      {
        unsigned int v39 = (char *)getttyent_tty;
        uint64_t v40 = *(unsigned int *)(v4 + 8);
        *(_DWORD *)(v4 + 8) = v40 + 1;
        sprintf(v39, (const char *)(v4 + 12), v40);
        ++slot;
        --*(_DWORD *)(seq + 4);
        return v6;
      }

      if (v3 == v5)
      {
        int v41 = v5 + 1;
        goto LABEL_111;
      }

      do
      {
        while (1)
        {
          uint64_t v8 = getttyent_line;
          if (_platform_strchr()) {
            break;
          }
          do
            int v12 = getc((FILE *)tf);
          while (v12 != 10 && v12 != -1);
        }

        BOOL v9 = (char *)(v8 - 1);
        do
        {
          __darwin_ct_rune_t v10 = v9[1];
          if (v10 < 0) {
            LOWORD(v11) = ___runetype_l(v10, v2);
          }
          else {
            __uint32_t v11 = _DefaultRuneLocale.__runetype[v10];
          }
          ++v9;
        }

        while ((v11 & 0x4000) != 0);
      }

      while (!*v9 || *v9 == 35);
      *((_BYTE *)v7 + 1968) = 0;
      getttyent_tty = (uint64_t)v9;
      __int128 v14 = skip(v9);
      __int128 v15 = v14;
      qword_18C52B748 = (uint64_t)v14;
      if (*v14)
      {
        __int128 v16 = skip(v14);
        __int128 v15 = v16;
        qword_18C52B750 = (uint64_t)v16;
        if (*v16) {
          __int128 v15 = skip(v16);
        }
        else {
          qword_18C52B750 = 0LL;
        }
      }

      else
      {
        qword_18C52B748 = 0LL;
        qword_18C52B750 = 0LL;
      }

      dword_18C52B758 = 0;
      qword_18C52B768 = 0LL;
      qword_18C52B770 = 0LL;
      qword_18C52B760 = 0LL;
      if (*v15)
      {
        int v45 = -1;
        while (1)
        {
          if (!_platform_strncmp())
          {
            __darwin_ct_rune_t v21 = v15[3];
            if (v21 < 0)
            {
              if ((___runetype_l(v21, v2) & 0x4000) != 0)
              {
LABEL_71:
                int v27 = dword_18C52B758 & 0xFFFFFFFE;
LABEL_76:
                dword_18C52B758 = v27;
                goto LABEL_77;
              }
            }

            else if ((_DefaultRuneLocale.__runetype[v21] & 0x4000) != 0)
            {
              goto LABEL_71;
            }
          }

          if (!_platform_strncmp())
          {
            __darwin_ct_rune_t v24 = v15[2];
            if (v24 < 0)
            {
              if ((___runetype_l(v24, v2) & 0x4000) != 0)
              {
LABEL_73:
                int v27 = dword_18C52B758 | 1;
                goto LABEL_76;
              }
            }

            else if ((_DefaultRuneLocale.__runetype[v24] & 0x4000) != 0)
            {
              goto LABEL_73;
            }
          }

          if (!_platform_strncmp())
          {
            __darwin_ct_rune_t v26 = v15[6];
            if (v26 < 0)
            {
              if ((___runetype_l(v26, v2) & 0x4000) != 0)
              {
LABEL_75:
                int v27 = dword_18C52B758 | 2;
                goto LABEL_76;
              }
            }

            else if ((_DefaultRuneLocale.__runetype[v26] & 0x4000) != 0)
            {
              goto LABEL_75;
            }
          }

          if (_platform_strncmp() || v15[6] != 61)
          {
            if (_platform_strncmp() || v15[7] != 61)
            {
              if (_platform_strncmp() || v15[8] != 61)
              {
                uint64_t v25 = _platform_strchr();
                if (v25) {
                  int v45 = atoi((const char *)(v25 + 1));
                }
              }

              else
              {
                uint64_t v22 = _platform_strchr();
                if (v22) {
                  uint64_t v23 = v22 + 1;
                }
                else {
                  uint64_t v23 = 0LL;
                }
                qword_18C52B770 = v23;
              }
            }

            else
            {
              uint64_t v19 = _platform_strchr();
              if (v19) {
                uint64_t v20 = v19 + 1;
              }
              else {
                uint64_t v20 = 0LL;
              }
              qword_18C52B768 = v20;
            }
          }

          else
          {
            uint64_t v17 = _platform_strchr();
            if (v17) {
              uint64_t v18 = v17 + 1;
            }
            else {
              uint64_t v18 = 0LL;
            }
            qword_18C52B760 = v18;
          }

LABEL_77:
          __int128 v15 = skip(v15);
          if (!*v15) {
            goto LABEL_80;
          }
        }
      }

      int v45 = -1;
LABEL_80:
      if (zapchar == 35 || *v15 == 35)
      {
        do
        {
          int v29 = *++v15;
          int v28 = v29;
        }

        while (v29 == 32 || v28 == 9);
      }

      qword_18C52B778 = (uint64_t)v15;
      if (*v15) {
        uint64_t v31 = (uint64_t)v15;
      }
      else {
        uint64_t v31 = 0LL;
      }
      qword_18C52B778 = v31;
      int v32 = (_BYTE *)_platform_strchr();
      if (v32) {
        *int v32 = 0;
      }
      regoff_t rm_eo = __pmatch.rm_eo;
      int rm_so = __pmatch.rm_so;
      regmatch_t v46 = v48;
      regmatch_t __pmatch = v48;
      int v42 = regexec(&decpreg, (const char *)getttyent_tty, 3uLL, &__pmatch, 4);
      if (v42)
      {
        regmatch_t __pmatch = v46;
        int v33 = 16;
      }

      else
      {
        int v33 = 10;
      }

      uint64_t v34 = strtol((const char *)(getttyent_tty + v48.rm_so), 0LL, v33);
      uint64_t v35 = strtol((const char *)(getttyent_tty + v49), 0LL, v33);
      if (v35 < v34)
      {
        int v3 = slot;
        uint64_t v4 = seq;
        uint64_t v7 = (_DWORD *)(&_DefaultRuneLocale + 1592);
        goto LABEL_102;
      }

      uint64_t v36 = seq;
      *(_DWORD *)(seq + 4) = v35 - v34 + 1;
      *(_DWORD *)(v36 + 8) = v34;
      uint64_t v37 = 120LL;
      if (!v42) {
        uint64_t v37 = 100LL;
      }
      sprintf( (char *)(v36 + 12),  "%.*s%%0%d%c%s",  rm_so,  (const char *)getttyent_tty,  LODWORD(v48.rm_eo) - LODWORD(v48.rm_so),  v37,  (const char *)(getttyent_tty + rm_eo));
LABEL_92:
      int v3 = slot;
      uint64_t v4 = seq;
      if (v45 <= slot)
      {
        uint64_t v7 = (_DWORD *)(&_DefaultRuneLocale + 1592);
        if (*(int *)(seq + 4) <= 0)
        {
          int v41 = slot + 1;
LABEL_111:
          slot = v41;
          return (ttyent *)&getttyent_tty;
        }
      }

      else
      {
        *(_DWORD *)seq = v45;
        uint64_t v7 = (_DWORD *)(&_DefaultRuneLocale + 1592);
      }

LABEL_102:
      int v5 = *(_DWORD *)v4;
    }

    while (v3 >= *(_DWORD *)v4);
  }

  slot = v3 + 1;
  return (ttyent *)&getttyent_nonexistent;
}

int endttyent(void)
{
  if (!tf) {
    return 1;
  }
  int result = fclose((FILE *)tf) != -1;
  tf = 0LL;
  return result;
}

char *skip(char *result)
{
  int v1 = 0;
  int v2 = result;
  while (1)
  {
    int v3 = *result;
    if (v3 == 34)
    {
      v1 ^= 1u;
      goto LABEL_13;
    }

    if (!*result) {
      goto LABEL_26;
    }
    if (v1 == 1 && v3 == 92)
    {
      int v4 = result[1];
      BOOL v5 = v4 == 34;
      if (v4 == 34) {
        char v6 = 34;
      }
      else {
        char v6 = 92;
      }
      if (v5) {
        ++result;
      }
      *v2++ = v6;
      int v1 = 1;
      goto LABEL_13;
    }

    *v2++ = v3;
    if (v1 == 1) {
      goto LABEL_13;
    }
    if (v3 == 35)
    {
      zapchar = 35;
      *int result = 0;
      goto LABEL_26;
    }

    int v1 = 0;
LABEL_13:
    ++result;
  }

  zapchar = v3;
  *result++ = 0;
  while (1)
  {
    unsigned int v7 = *result;
    BOOL v8 = v7 > 0x20;
    uint64_t v9 = (1LL << v7) & 0x100000600LL;
    if (v8 || v9 == 0) {
      break;
    }
    ++result;
  }

LABEL_26:
  *(v2 - 1) = 0;
  return result;
}

  if (!wcschr(dword_180499108, a2)) {
    return (_DWORD *)do_svis((uint64_t)a1, a2, a3, a4, a5);
  }
LABEL_27:
  *a1 = 61;
  a1[1] = dword_18049913C[a2 >> 4];
  int result = a1 + 3;
  a1[2] = dword_18049913C[a2 & 0xF];
  return result;
}

    v14 += v23;
    if (v11 <= v14)
    {
      __uint32_t v11 = v14 + v34;
      uint64_t v31 = reallocf(v13, 4LL * (v14 + v34));
      if (!v31) {
        goto LABEL_34;
      }
      __int128 v13 = v31;
    }

    wcsncpy((__int32 *)v13 + v17, v24, v23);
    int v32 = v3[1];
    ++v3;
    int v4 = v32;
  }

  while (v32);
  *((_DWORD *)v13 + v14) = 0;
  return (__int32 *)v13;
}

char *getusershell(void)
{
  uint64_t v0 = (char **)curshell;
  if (!curshell)
  {
    uint64_t v0 = initshells();
    curshell = (uint64_t)v0;
  }

  int v1 = *v0;
  if (*v0) {
    curshell = (uint64_t)(v0 + 1);
  }
  return v1;
}

char **initshells()
{
  uint64_t v0 = __locale_key;
  int v1 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v0);
  if (v1) {
    int v2 = v1;
  }
  else {
    int v2 = (_xlocale *)&__global_locale;
  }
  if (shells) {
    free((void *)shells);
  }
  shells = 0LL;
  if (strings) {
    free((void *)strings);
  }
  strings = 0LL;
  int v3 = fopen("/etc/shells", "r");
  if (!v3) {
    return okshells;
  }
  int v4 = v3;
  int v5 = fileno(v3);
  if (fstat(v5, &v14) == -1 || (unsigned int st_size = v14.st_size, (strings = (uint64_t)malloc(LODWORD(v14.st_size))) == 0))
  {
    fclose(v4);
    return okshells;
  }

  unsigned int v7 = (char **)calloc(st_size / 3uLL, 8uLL);
  shells = (uint64_t)v7;
  if (!v7)
  {
    fclose(v4);
    free((void *)strings);
    strings = 0LL;
    return okshells;
  }

  BOOL v8 = v7;
  for (uint64_t i = (char *)strings; fgets(i, 1025, v4); *(i - 1) = 0)
  {
    for (unint64_t j = i; ; ++j)
    {
      ++i;
      while (1)
      {
        int v11 = *j;
        if (*j)
        {
          if (v11 != 35) {
            break;
          }
        }

        if (!fgets(j, 1025, v4)) {
          goto LABEL_30;
        }
      }

      if (v11 == 47) {
        break;
      }
    }

    *v8++ = j;
    while (1)
    {
      __darwin_ct_rune_t v12 = *(i - 1);
      if (v12 < 0)
      {
        if ((___runetype_l(v12, v2) & 0x4000) != 0) {
          break;
        }
      }

      else if ((_DefaultRuneLocale.__runetype[v12] & 0x4000) != 0)
      {
        break;
      }

      if (!*(i - 1) || *(i - 1) == 35) {
        break;
      }
      ++i;
    }
  }

LABEL_30:
  *BOOL v8 = 0LL;
  fclose(v4);
  return (char **)shells;
}

  mpool_put(v18, v7, 0);
  *(_OWORD *)BOOL v8 = *(_OWORD *)v23;
LABEL_31:
  *a3 = 1;
  return v8;
}

    v7 += v12;
    v9 -= v12;
    if (v9) {
      continue;
    }
    return v25;
  }

    if (!a4) {
      return v9;
    }
    goto LABEL_31;
  }

  if (a5 >= a6) {
    goto LABEL_30;
  }
  uint64_t v20 = 0LL;
  while (1)
  {
    a5[v20] = a0_1[v20];
    if (v20 == 2) {
      break;
    }
    if (a6 - a5 == ++v20) {
      goto LABEL_29;
    }
  }

  uint64_t v9 = a5 + 2;
  if (a4)
  {
LABEL_31:
    if (v17 >= 0) {
      __darwin_ct_rune_t v24 = v17;
    }
    else {
      __darwin_ct_rune_t v24 = -v17;
    }
    sprintf_l(v29, a7, "%02d", v24);
    if (v9 < a6)
    {
      uint64_t v25 = a6 - v9;
      for (uint64_t i = v29; ; ++i)
      {
        int v27 = *i;
        *uint64_t v9 = v27;
        if (!v27) {
          break;
        }
        ++v9;
        if (!--v25) {
          return a6;
        }
      }
    }
  }

  return v9;
}

      if (v5-- <= 1) {
        goto LABEL_32;
      }
    }

void endusershell(void)
{
  if (shells) {
    free((void *)shells);
  }
  shells = 0LL;
  if (strings) {
    free((void *)strings);
  }
  strings = 0LL;
  curshell = 0LL;
}

void setusershell(void)
{
  curshell = (uint64_t)initshells();
}

int getvfsbyname(const char *a1, vfsconf *a2)
{
  *(void *)unsigned int v7 = 3LL;
  int v8 = 1;
  size_t v5 = 4LL;
  if ((sysctl(v7, 3u, &v6, &v5, 0LL, 0LL) & 0x80000000) == 0)
  {
    int v8 = 2;
    size_t v5 = 40LL;
    if (v6 >= 1)
    {
      for (int i = 0; i < v6; ++i)
      {
        int v9 = i;
        if (sysctl(v7, 4u, a2, &v5, 0LL, 0LL) < 0)
        {
          if (*__error() != 45) {
            return -1;
          }
        }

        else
        {
          int result = _platform_strcmp();
          if (!result) {
            return result;
          }
        }
      }
    }

    *__error() = 2;
  }

  return -1;
}

uint64_t _init_clock_port()
{
  host_t v0 = MEMORY[0x186DFC414]();
  if (host_get_clock_service(v0, 0, (clock_serv_t *)&clock_port)
    || (int v1 = (ipc_space_t *)MEMORY[0x1895FFD48], semaphore_create(*MEMORY[0x1895FFD48], (semaphore_t *)&clock_sem, 0, 0)))
  {
    abort();
  }

  return mach_port_deallocate(*v1, v0);
}

uint64_t nanosleep_NOCANCEL(void *a1, void *a2)
{
  if (*MEMORY[0x1896005A8])
  {
    if (!a1) {
      goto LABEL_10;
    }
  }

  else
  {
    *MEMORY[0x1896005A8] = 1;
    if (!a1) {
      goto LABEL_10;
    }
  }

  if ((*a1 & 0x8000000000000000LL) != 0 || a1[1] >= 0x3B9ACA00uLL) {
    goto LABEL_10;
  }
  if (a2)
  {
    mach_error_t time = clock_get_time(clock_port, &cur_time);
    if (time)
    {
      size_t v5 = __stderrp;
      int v6 = mach_error_string(time);
      fprintf(v5, "clock_get_time() failed: %s\n", v6);
      goto LABEL_10;
    }
  }

  if ((__semwait_signal_nocancel() & 0x80000000) == 0) {
    return 0xFFFFFFFFLL;
  }
  if (*__error() != 60)
  {
    if (*__error() == 4)
    {
      if (a2)
      {
        mach_error_t v8 = clock_get_time(clock_port, &v19);
        if (!v8)
        {
          clock_res_t v11 = cur_time.tv_nsec + *((_DWORD *)a1 + 2);
          if (v11 <= 999999999)
          {
            unsigned int tv_sec = cur_time.tv_sec;
          }

          else
          {
            v11 -= 1000000000;
            unsigned int tv_sec = cur_time.tv_sec + 1;
          }

          unsigned int v13 = tv_sec + *(_DWORD *)a1;
          if (v13 <= v19.tv_sec)
          {
            if (v13 < v19.tv_sec || (clock_res_t tv_nsec = v19.tv_nsec, v11 <= v19.tv_nsec))
            {
              *a2 = 0LL;
              a2[1] = 0LL;
              return 0xFFFFFFFFLL;
            }
          }

          else
          {
            clock_res_t tv_nsec = v19.tv_nsec;
          }

          BOOL v15 = __OFSUB__(v11, tv_nsec);
          int v16 = v11 - tv_nsec;
          if (v16 < 0 != v15) {
            int v17 = v16 + 1000000000;
          }
          else {
            int v17 = v16;
          }
          *a2 = v13 + (v16 >> 31) - v19.tv_sec;
          a2[1] = v17;
          return 0xFFFFFFFFLL;
        }

        int v9 = __stderrp;
        __darwin_ct_rune_t v10 = mach_error_string(v8);
        fprintf(v9, "clock_get_time() failed: %s\n", v10);
      }

      return 0xFFFFFFFFLL;
    }

int ftw(const char *a1, int (__cdecl *a2)(const char *, const stat *, int), int a3)
{
  return both_ftw((char *)a1, (uint64_t (*)(void, void, void))a2, 0LL, a3, 1);
}

uint64_t both_ftw( char *a1, uint64_t (*a2)(void, void, void), uint64_t (*a3)(void, void, void, void), int a4, char a5)
{
  if ((a4 - 10241) <= 0xFFFFD7FF)
  {
    *__error() = 22;
    int v6 = -1;
    goto LABEL_3;
  }

  char v10 = a5;
  if ((a5 & 8) != 0) {
    int v14 = 1;
  }
  else {
    int v14 = 5;
  }
  uint64_t v15 = a5 & 2;
  unsigned int v16 = v14 & 0xFFFFFFBF | (((v15 >> 1) & 1) << 6);
  if ((a5 & 1) != 0) {
    int v17 = 16;
  }
  else {
    int v17 = 2;
  }
  int v18 = v16 | v17;
  if ((a5 & 8) != 0)
  {
    int v6 = open_NOCANCEL();
    if (v6 < 0) {
      goto LABEL_3;
    }
    v18 |= 4u;
  }

  else
  {
    int v6 = -1;
  }

  if ((stat(a1, &v42) & 0x80000000) == 0)
  {
    if (!a3 || (v42.st_mode & 0xF000) == 0x4000) {
      goto LABEL_19;
    }
    *__error() = 20;
LABEL_3:
    int v7 = *__error();
    uint64_t v8 = 0xFFFFFFFFLL;
    if (v6 < 0) {
      goto LABEL_5;
    }
LABEL_4:
    close_NOCANCEL();
    goto LABEL_5;
  }

  if (*__error() == 62 || *__error() == 63 || *__error() == 2 || *__error() == 20 || *__error() == 13) {
    goto LABEL_3;
  }
LABEL_19:
  v44[0] = a1;
  v44[1] = 0LL;
  mach_timespec_t v19 = fts_open(v44, v18, 0LL);
  if (!v19) {
    goto LABEL_3;
  }
  uint64_t v20 = v19;
  __darwin_ct_rune_t v21 = fts_read(v19);
  if (!v21)
  {
LABEL_71:
    uint64_t v8 = 0LL;
    goto LABEL_72;
  }

  uint64_t v22 = v21;
  char v39 = (a3 == 0LL) | v10;
  char v40 = v10;
  if (a3) {
    int v23 = 6;
  }
  else {
    int v23 = 5;
  }
  unsigned int v38 = v23;
  while (2)
  {
    uint64_t v8 = 0xFFFFFFFFLL;
    uint64_t v24 = 2LL;
    switch(v22->fts_info)
    {
      case 1u:
        if ((v10 & 4) != 0 || (_DWORD)v15 && v22->fts_statp->st_dev != v42.st_dev || access(v22->fts_path, 4)) {
          goto LABEL_58;
        }
        goto LABEL_39;
      case 2u:
        if ((v39 & 1) == 0)
        {
          if ((v10 & 4) == 0)
          {
LABEL_39:
            uint64_t v24 = 1LL;
            if ((v6 & 0x80000000) == 0)
            {
LABEL_48:
              fts_path = v22->fts_path;
              if ((_DWORD)v24 == 1)
              {
                int v26 = chdir(fts_path);
              }

              else
              {
                int v27 = a3;
                int v28 = v20;
                uint64_t v29 = v15;
                int v30 = a2;
                uint64_t v31 = v5;
                int v32 = strdup(fts_path);
                v32[v22->fts_pathlen - v22->fts_namelen] = 0;
                int v26 = chdir(v32);
                int v33 = v32;
                uint64_t v5 = v31;
                a2 = v30;
                uint64_t v15 = v29;
                uint64_t v20 = v28;
                a3 = v27;
                char v10 = v40;
                free(v33);
              }

              if (v26 < 0)
              {
                uint64_t v8 = 0xFFFFFFFFLL;
                if ((_DWORD)v24 == 2 && v22->fts_pathlen == v22->fts_namelen)
                {
                  uint64_t v36 = __error();
                  int v37 = 24;
                  goto LABEL_79;
                }

                goto LABEL_72;
              }
            }

LABEL_52:
            if (a3)
            {
              int fts_level = v22->fts_level;
              v43[0] = v22->fts_pathlen - v22->fts_namelen;
              v43[1] = fts_level;
              uint64_t v35 = a3(v22->fts_path, v22->fts_statp, v24, v43);
            }

            else
            {
              uint64_t v35 = a2(v22->fts_path, v22->fts_statp, v24);
            }

            uint64_t v8 = v35;
            if ((v6 & 0x80000000) == 0 && fchdir(v6) < 0)
            {
              uint64_t v8 = 0xFFFFFFFFLL;
              goto LABEL_72;
            }

            if ((_DWORD)v8) {
              goto LABEL_72;
            }
          }

LABEL_58:
          uint64_t v22 = fts_read(v20);
          if (!v22) {
            goto LABEL_71;
          }
          continue;
        }

        uint64_t v36 = __error();
        int v37 = 62;
LABEL_79:
        *uint64_t v36 = v37;
LABEL_72:
        int v7 = *__error();
        fts_close(v20);
        if ((v6 & 0x80000000) == 0) {
          goto LABEL_4;
        }
LABEL_5:
        *__error() = v7;
        return v8;
      case 3u:
      case 8u:
        if ((_DWORD)v15 && v22->fts_statp->st_dev != v42.st_dev) {
          goto LABEL_58;
        }
        uint64_t v24 = 0LL;
        if (v6 < 0) {
          goto LABEL_52;
        }
        goto LABEL_48;
      case 4u:
        goto LABEL_47;
      case 6u:
        if ((v10 & 4) == 0 || (_DWORD)v15 && v22->fts_statp->st_dev != v42.st_dev) {
          goto LABEL_58;
        }
        uint64_t v24 = 3LL;
        if (v6 < 0) {
          goto LABEL_52;
        }
        goto LABEL_48;
      case 0xAu:
      case 0xBu:
        uint64_t v24 = 4LL;
        if (v6 < 0) {
          goto LABEL_52;
        }
        goto LABEL_48;
      case 0xCu:
        uint64_t v24 = 5LL;
LABEL_47:
        if ((v6 & 0x80000000) == 0) {
          goto LABEL_48;
        }
        goto LABEL_52;
      case 0xDu:
        if (stat(v22->fts_path, &v41) < 0 && *__error() == 62) {
          goto LABEL_72;
        }
        uint64_t v24 = v38;
        if (v6 < 0) {
          goto LABEL_52;
        }
        goto LABEL_48;
      default:
        goto LABEL_72;
    }
  }

  int result = 0xFFFFFFFFLL;
LABEL_17:
  int v30 = v74;
LABEL_18:
  uint64_t v31 = v73;
LABEL_19:
  *(_BYTE *)(v30 + 40) &= ~8u;
  *(_BYTE *)(v31 + 40) &= ~8u;
  return result;
}

                  stat v42 = 1;
                  int v33 = (char *)v20;
                  stat v41 = 1;
LABEL_59:
                  *int v33 = v42;
                  if (v41) {
                    *a3 += 4;
                  }
                  goto LABEL_36;
                }

                goto LABEL_54;
              }

              if ((v22 & 0x8000000000000000LL) == 0)
              {
                char v40 = *(v30 - 1);
                int v33 = v30 - 1;
                LOBYTE(v34) = v40;
                if (v40 == 15)
                {
                  uint64_t v36 = v18 - 1LL;
                  while (v36)
                  {
                    *((_BYTE *)v20 + v36) = 0;
                    uint64_t v34 = *((unsigned __int8 *)v20 + --v36);
                    if (v34 != 15) {
                      goto LABEL_53;
                    }
                  }

                  goto LABEL_58;
                }

int nftw(const char *a1, int (__cdecl *a2)(const char *, const stat *, int, FTW *), int a3, int a4)
{
  return both_ftw((char *)a1, 0LL, (uint64_t (*)(void, void, void, void))a2, a3, a4);
}

int setlogin(const char *a1)
{
  int v1 = __setlogin();
  if (!v1 && __logname) {
    *(_BYTE *)__logname = 0;
  }
  pthread_mutex_unlock(&__logname_mutex);
  return v1;
}

int sigemptyset(sigset_t *a1)
{
  *a1 = 0;
  return 0;
}

int sigfillset(sigset_t *a1)
{
  *a1 = -1;
  return 0;
}

int sigaddset(sigset_t *a1, int a2)
{
  if (a2 < 0x21)
  {
    if (a2)
    {
      int result = 0;
      *a1 |= 1 << (a2 - 1);
    }

    else
    {
      return 0;
    }
  }

  else
  {
    *__error() = 22;
    return -1;
  }

  return result;
}

int sigdelset(sigset_t *a1, int a2)
{
  if (a2 < 0x21)
  {
    if (a2)
    {
      int result = 0;
      *a1 &= ~(1 << (a2 - 1));
    }

    else
    {
      return 0;
    }
  }

  else
  {
    *__error() = 22;
    return -1;
  }

  return result;
}

int sigismember(const sigset_t *a1, int a2)
{
  if (a2 < 0x21)
  {
    if (a2) {
      return (*a1 >> (a2 - 1)) & 1;
    }
    else {
      return 0;
    }
  }

  else
  {
    *__error() = 22;
    return -1;
  }

char *__cdecl fflagstostr(unint64_t a1)
{
  int result = (char *)malloc(0x111uLL);
  if (result)
  {
    uint64_t v3 = 0LL;
    int v4 = result;
    do
    {
      uint64_t v5 = &(&mapping)[3 * v3];
      unint64_t v6 = (unint64_t)v5[1];
      if ((v6 & a1) != 0)
      {
        if (v4 > result) {
          *v4++ = 44;
        }
        uint64_t v7 = (uint64_t)(*v5 + 2);
        if (v3 == 15) {
          uint64_t v8 = "nodump";
        }
        else {
          uint64_t v8 = (const char *)v7;
        }
        char v9 = *v8;
        if (*v8)
        {
          char v10 = (unsigned __int8 *)(v8 + 1);
          do
          {
            *v4++ = v9;
            int v11 = *v10++;
            char v9 = v11;
          }

          while (v11);
        }

        a1 &= ~v6;
      }

      ++v3;
    }

    while (v3 != 21);
    *int v4 = 0;
  }

  return result;
}

int strtofflags(char **a1, unint64_t *a2, unint64_t *a3)
{
  if (a2) {
    *a2 = 0LL;
  }
  if (a3) {
    *a3 = 0LL;
  }
  __stringp = *a1;
  unint64_t v6 = strsep(&__stringp, "\t ,");
  if (v6)
  {
    uint64_t v7 = v6;
    while (1)
    {
      *a1 = v7;
      if (*v7)
      {
        uint64_t v8 = 0LL;
        char v9 = &qword_18965C590;
        while (_platform_strcmp())
        {
          if (!_platform_strcmp())
          {
            if ((_DWORD)v8 == 15)
            {
              char v10 = a2;
              if (!a2) {
                goto LABEL_25;
              }
              goto LABEL_18;
            }

            if (a3)
            {
              int v11 = a3;
              goto LABEL_23;
            }

            goto LABEL_24;
          }

          ++v8;
          v9 += 3;
          if (v8 == 21) {
            goto LABEL_27;
          }
        }

        if ((_DWORD)v8 == 15)
        {
          char v10 = a3;
          if (!a3) {
            goto LABEL_25;
          }
LABEL_18:
          *v10 |= *v9;
          goto LABEL_25;
        }

        if (a2)
        {
          int v11 = a2;
LABEL_23:
          *v11 |= *v9;
        }

LABEL_24:
        if ((_DWORD)v8 == 21) {
          break;
        }
      }

  int v30 = *((void *)a9 + 165);
  if (v61 > 255)
  {
    int v32 = largesearch(v61, (uint64_t)a9);
    if (!v32) {
      goto LABEL_41;
    }
    uint64_t v31 = v32[1];
  }

  else
  {
    uint64_t v31 = *(_DWORD *)(*(void *)(v30 + 192) + 40LL * v61);
  }

  if (v50 == v31)
  {
    uint64_t v29 = 1;
LABEL_31:
    if (v9 > v29)
    {
      char v9 = v29;
      if (a7)
      {
        int v33 = v58;
        *((_OWORD *)&a7->_mbstateL + 4) = v57;
        *((_OWORD *)&a7->_mbstateL + 5) = v33;
        uint64_t v34 = v60;
        *((_OWORD *)&a7->_mbstateL + 6) = v59;
        *((_OWORD *)&a7->_mbstateL + 7) = v34;
        uint64_t v35 = v54;
        *(_OWORD *)a7->__mbstate8 = v53;
        *((_OWORD *)&a7->_mbstateL + 1) = v35;
        uint64_t v36 = v56;
        *((_OWORD *)&a7->_mbstateL + 2) = v55;
        *((_OWORD *)&a7->_mbstateL + 3) = v36;
      }

      int v37 = v29 - (a4 != 0);
      if (v37 < 1)
      {
        int v23 = 0LL;
        if (v16) {
          goto LABEL_38;
        }
        goto LABEL_46;
      }

      int v23 = 0LL;
      do
      {
        --v37;
        unsigned int v38 = mbrtowc_l(&v52, v14, v13, a7, a9);
        v14 += v38;
        v23 += v38;
        v13 -= v38;
      }

      while (v37);
    }

    if (v16)
    {
LABEL_38:
      if (v9 > a3)
      {
        if (a7)
        {
          char v39 = v58;
          *((_OWORD *)&a7->_mbstateL + 4) = v57;
          *((_OWORD *)&a7->_mbstateL + 5) = v39;
          char v40 = v60;
          *((_OWORD *)&a7->_mbstateL + 6) = v59;
          *((_OWORD *)&a7->_mbstateL + 7) = v40;
          stat v41 = v54;
          *(_OWORD *)a7->__mbstate8 = v53;
          *((_OWORD *)&a7->_mbstateL + 1) = v41;
          stat v42 = v56;
          *((_OWORD *)&a7->_mbstateL + 2) = v55;
          *((_OWORD *)&a7->_mbstateL + 3) = v42;
        }

        return -1LL;
      }

      if (v9)
      {
        _platform_memmove();
        char v9 = 0LL;
      }
    }

  while (1)
  {
    int v14 = _UTF8_mbrtowc(&v16, v7, v6, a5);
    switch(v14)
    {
      case -2LL:
        return v8;
      case -1LL:
        return -1LL;
      case 0LL:
        return v8;
    }

      if (v14)
      {
        int v27 = 808464432;
        int v18 = v4 - 2;
        if (v4 >= 2)
        {
          mach_timespec_t v19 = 0LL;
          if (v18 >= 3) {
            int v18 = 3LL;
          }
          uint64_t v20 = v18 + 1;
          do
          {
            v5[v19] = *((_BYTE *)&v27 + v19);
            ++v19;
          }

          while (v20 != v19);
          __darwin_ct_rune_t v21 = v4 - v19;
          v5 += v19;
          if (v4 - v19 >= 2)
          {
            uint64_t v22 = 0;
            int v23 = (int *)((char *)&v27 + v19);
            do
            {
              if (v22)
              {
                LOBYTE(v24) = *(_BYTE *)v23;
              }

              else
              {
                uint64_t v25 = *v14;
                if (!*v14) {
                  break;
                }
                ++v14;
                HIBYTE(v27) = (v25 & 0x3F) + 48;
                BYTE2(v27) = ((v25 >> 6) & 0x3F) + 48;
                BYTE1(v27) = ((v25 >> 12) & 0x3F) + 48;
                uint64_t v24 = ((v25 >> 18) & 0x3F) + 48;
                LOBYTE(v27) = ((v25 >> 18) & 0x3F) + 48;
                int v23 = &v27;
                uint64_t v22 = 4;
              }

              int v23 = (int *)((char *)v23 + 1);
              *v5++ = v24;
              --v22;
              --v21;
            }

            while (v21 > 1);
          }
        }
      }

      FILE *v5 = 0;
    }

    int v26 = *__error();
    free(v11);
    free((void *)v28);
    free(*((void **)&v28 + 1));
    *__error() = v26;
  }

  else
  {
    unint64_t v6 = 0LL;
    if (a3) {
      *a1 = 0;
    }
  }

  return v6;
}

  while (1)
  {
    int v14 = _UTF2_mbrtowc(&v16, v7, v6, a5);
    switch(v14)
    {
      case -2LL:
        return v8;
      case -1LL:
        return -1LL;
      case 0LL:
        return v8;
    }

  int v18 = 0LL;
  *(void *)(a2 + 8) = v8;
  return v18;
}

  if (v8 > 255) {
    return 10LL;
  }
LABEL_25:
  if (v9 == v2) {
    return 10LL;
  }
  if ((v3 & 1) == 0)
  {
    if ((unint64_t)(v9 + 1) < v4 && *v9 == 92 && v9[1] == 125)
    {
      unsigned int v16 = v9 + 2;
      return 13LL;
    }

    return 10LL;
  }

  if (*v9 != 125) {
    return 10LL;
  }
  unsigned int v16 = v9 + 1;
  if ((unint64_t)(v9 + 1) < v4)
  {
    if (*v16 == 63)
    {
      if ((v3 & 0x100) == 0) {
        return 13LL;
      }
      uint64_t v7 = (v3 & 0x40) == 0;
      unsigned int v16 = v9 + 2;
    }
  }

LABEL_25:
      unint64_t v6 = strsep(&__stringp, "\t ,");
      uint64_t v7 = v6;
      if (!v6) {
        return (int)v6;
      }
    }

      ++v21;
      v20 += 8;
      if (v19 == (_DWORD)v21)
      {
        char v9 = *v10;
        int v2 = a2;
        int v4 = v53;
        unsigned int v13 = v51;
        break;
      }
    }
  }

  v3[9] = v9;
  uint64_t v15 = *v10;
  unsigned int v16 = *v10 + 1;
  *char v10 = v16;
  if (!(_DWORD)v7)
  {
    if (v15 <= 2046)
    {
      LODWORD(v7) = 0;
      goto LABEL_49;
    }

    goto LABEL_44;
  }

  v16 -= v3[(int)v7 + 16];
  if (v16 > 2047)
  {
LABEL_44:
    LODWORD(v7) = v7 + 1;
    v3[8] = v7;
    char v39 = *v10;
    v3[(int)v7 + 17] = *v10;
    *char v10 = v39 - 1;
    unsigned int v16 = 1;
  }

    uint64_t v5 = __error();
    unint64_t v6 = 92;
    goto LABEL_3;
  }

  uint64_t v15 = 1;
LABEL_18:
  if (v10) {
    *char v10 = v14;
  }
  *a4 = 0;
  unsigned int v16 = v15 - v12;
  if (!v14) {
    return 0;
  }
  return v16;
}

  int v11 = (int)v0[3];
  if ((int)v11 >= 1)
  {
    for (int i = 0LL; i < v11; ++i)
    {
      int result = _platform_memchr();
      if (!result) {
        *((_BYTE *)v0 + i + 16968) = 95;
      }
    }
  }

  unsigned int v13 = v0[2];
  if (v13 >= 1)
  {
    int v14 = 0LL;
    uint64_t v15 = v0 + 2709;
    do
    {
      unsigned int v16 = *v15;
      v15 += 6;
      int v17 = (char *)v0 + v16 + 16968;
      int result = _platform_strlen();
      if (result >= 0x100)
      {
        int result = _platform_strcmp();
        if ((_DWORD)result)
        {
          v17[255] = 0;
          unsigned int v13 = v0[2];
        }
      }

      ++v14;
    }

    while (v14 < v13);
  }

  return result;
}

    *(_DWORD *)(a1 + 32) = 1;
    return v5;
  }

  uint64_t v5 = a3;
  if (!a3) {
    goto LABEL_25;
  }
  char v9 = 1024LL;
LABEL_8:
  if ((((_BYTE)v5 + (_BYTE)a5) & 7) != 0) {
    char v10 = 8LL - (((_BYTE)v5 + (_BYTE)a5) & 7);
  }
  else {
    char v10 = 0LL;
  }
  *(void *)(a1 + 16) = &v5[v10 + a5];
  *(void *)(a1 + 24) = v9 - (v10 + a5);
  if (a4) {
    _platform_bzero();
  }
  return v5;
}

LABEL_27:
    LODWORD(v6) = 1;
  }

  return (int)v6;
}

            __darwin_ct_rune_t v12 = 0LL;
            break;
          }
        }

    v7 += v14;
    v6 -= v14;
    ++v8;
    if (v6) {
      goto LABEL_22;
    }
  }

    LOBYTE(v15) = *v17;
LABEL_28:
    a2 = v17 + 1;
LABEL_33:
    int result = 0LL;
    uint64_t v24 = (char)v15;
    switch((char)v15)
    {
      case '%':
        uint64_t v58 = *a1++;
        if (v58 != 37) {
          return 0LL;
        }
        goto LABEL_175;
      case '+':
        int result = _strptime0(a1, v172[43], a3, a4, v178);
        if (!result) {
          return result;
        }
        a1 = (char *)result;
        v176 |= 0x36u;
        goto LABEL_175;
      case 'A':
      case 'a':
        uint64_t v36 = 0LL;
        while (1)
        {
          int v37 = &v172[v36];
          unsigned int v38 = v37[31];
          char v39 = _platform_strlen();
          if (!strncasecmp_l(a1, v38, v39, v178)) {
            break;
          }
          char v40 = v37[24];
          char v39 = _platform_strlen();
          if (!strncasecmp_l(a1, v40, v39, v178)) {
            break;
          }
          if (++v36 == 7) {
            return 0LL;
          }
        }

        int v11 = v175;
        a1 += v39;
        a3->tm_wday = v36;
        uint64_t v53 = v176 | 0x20;
        goto LABEL_393;
      case 'B':
      case 'b':
      case 'h':
        for (int i = 0LL; i != 12; ++i)
        {
          if ((v16 & 1) != 0)
          {
            int v32 = v172[i + 12];
          }

          else
          {
            if (v24 != 66) {
              continue;
            }
            int v32 = v172[i + 44];
          }

          int v33 = _platform_strlen();
          if (!strncasecmp_l(a1, v32, v33, v178))
          {
            int v11 = v175;
            goto LABEL_101;
          }
        }

        if ((v13 & 1) != 0) {
          return 0LL;
        }
        int i = 0LL;
        int v11 = v175;
        while (1)
        {
          uint64_t v34 = v172[i];
          int v33 = _platform_strlen();
          if (!strncasecmp_l(a1, v34, v33, v178)) {
            break;
          }
          if (++i == 12) {
            return 0LL;
          }
        }

        FILE *v5 = 0;
      }

      int v18 = *__error();
      free((void *)v20);
      free(*((void **)&v20 + 1));
      *__error() = v18;
    }
  }

  else
  {
    char v10 = 0LL;
    if (a3) {
      *a1 = 0;
    }
  }

  return v10;
}

    v7 += v14;
    v6 -= v14;
    ++v8;
    if (v6) {
      goto LABEL_22;
    }
  }

uint64_t _thread_stack_pcs(uint64_t a1, int a2, unsigned int *a3, int a4, uintptr_t a5)
{
  return __thread_stack_pcs(a1, a2, a3, a4 + 1, a5, 0);
}

uint64_t __thread_stack_pcs(uint64_t a1, int a2, unsigned int *a3, int a4, uintptr_t a5, int a6)
{
  uintptr_t return_addr;
  uint64_t vars0;
  int v11 = pthread_self();
  stackaddr_np = pthread_get_stackaddr_np(v11);
  size_t stacksize_np = pthread_get_stacksize_np(v11);
  *a3 = 0;
  uintptr_t v14 = pthread_stack_frame_decode_np((uintptr_t)&vars0, 0LL);
  uint64_t v15 = 0LL;
  if ((&vars0 & 1) == 0)
  {
    uintptr_t v16 = (uintptr_t)stackaddr_np - stacksize_np;
    if ((unint64_t)&vars0 >= v16)
    {
      uintptr_t v17 = v14;
      int v18 = (char *)&vars0 + (void)stackaddr_np - v14;
      if (&vars0 <= (uint64_t *)v18)
      {
        mach_timespec_t v19 = &vars0;
        if (!a5) {
          goto LABEL_7;
        }
LABEL_5:
        if (v17 <= a5)
        {
          while (1)
          {
            uint64_t v15 = 0LL;
            mach_timespec_t v19 = (uint64_t *)v17;
            uintptr_t v17 = pthread_stack_frame_decode_np(v17, 0LL);
            if (a5) {
              goto LABEL_5;
            }
LABEL_7:
            if (!a4) {
              goto LABEL_15;
            }
            --a4;
          }
        }

        else
        {
LABEL_15:
          uint64_t v15 = 0LL;
          if (a2)
          {
            int v20 = 1 - a2;
            unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
            while (1)
            {
              if ((unint64_t)*v19 >> 60 == 1)
              {
                uint64_t v22 = *(void *)(StatusReg + 824);
                if (v22)
                {
                  uint64_t v23 = *(unsigned int *)(v22 + 36);
                  uint64_t v15 = (_DWORD)v23 ? 1LL : v15;
                  if ((_DWORD)v23 && a6 != 0) {
                    break;
                  }
                }
              }

              uintptr_t v25 = pthread_stack_frame_decode_np((uintptr_t)v19, &return_addr);
              uint64_t v26 = *a3;
              *(void *)(a1 + 8 * v26) = return_addr;
              *a3 = v26 + 1;
              if ((v25 & 1) == 0 && v16 <= v25 && (unint64_t)v18 >= v25 && (unint64_t)v19 < v25)
              {
                ++v20;
                mach_timespec_t v19 = (uint64_t *)v25;
                if (v20 != 1) {
                  continue;
                }
              }

              return v15;
            }

            __thread_stack_async_pcs(a1, -v20, a3, (uint64_t)v19);
            return v23;
          }
        }
      }
    }
  }

  return v15;
}

uint64_t _thread_stack_async_pcs(uint64_t a1, int a2, unsigned int *a3, int a4, uintptr_t a5)
{
  return __thread_stack_pcs(a1, a2, a3, a4 + 1, a5, 1);
}

uint64_t thread_stack_pcs(uint64_t a1, int a2, unsigned int *a3)
{
  return __thread_stack_pcs(a1, a2, a3, 0, 0LL, 0);
}

uint64_t thread_stack_async_pcs(uint64_t a1, int a2, unsigned int *a3)
{
  return __thread_stack_pcs(a1, a2, a3, 0, 0LL, 1);
}

uintptr_t __thread_stack_async_pcs(uint64_t a1, int a2, _DWORD *a3, uint64_t a4)
{
  uintptr_t return_addr;
  uintptr_t result = *(void *)(a4 - 8);
  do
  {
    int v7 = a2;
    uintptr_t result = pthread_stack_frame_decode_np(result, &return_addr);
    if (!return_addr) {
      break;
    }
    uint64_t v8 = *a3;
    *(void *)(a1 + 8 * v8) = return_addr + 1;
    *a3 = v8 + 1;
    if (!result) {
      break;
    }
    if ((result & 1) != 0) {
      break;
    }
    a2 = v7 - 1;
  }

  while (v7);
  return result;
}

int uname(utsname *a1)
{
  *(void *)__darwin_ct_rune_t v12 = 0x100000001LL;
  size_t v11 = 256LL;
  int v2 = sysctl(v12, 2u, a1, &v11, 0LL, 0LL);
  *(void *)__darwin_ct_rune_t v12 = 0xA00000001LL;
  size_t v11 = 256LL;
  int v3 = sysctl(v12, 2u, a1->nodename, &v11, 0LL, 0LL);
  *(void *)__darwin_ct_rune_t v12 = 0x200000001LL;
  size_t v11 = 256LL;
  int v6 = sysctl(v12, 2u, a1->release, &v11, 0LL, 0LL) == -1 || v3 == -1 || v2 == -1;
  *(void *)__darwin_ct_rune_t v12 = 0x400000001LL;
  size_t v11 = 256LL;
  versiouint64_t n = a1->version;
  if (sysctl(v12, 2u, a1->version, &v11, 0LL, 0LL) == -1)
  {
    int v8 = -1;
  }

  else
  {
    int v8 = v6 << 31 >> 31;
    if (v11)
    {
      size_t v9 = v11 - 1;
      do
      {
        ++version;
        --v9;
      }

      while (v9 != -1LL);
    }
  }

  *(void *)__darwin_ct_rune_t v12 = 0x100000006LL;
  size_t v11 = 256LL;
  if (sysctl(v12, 2u, a1->machine, &v11, 0LL, 0LL) == -1) {
    return -1;
  }
  else {
    return v8;
  }
}

lastlogx *__cdecl getlastlogx(uid_t a1, lastlogx *a2)
{
  int v3 = _pwuid_r(a1, &v7);
  if (!v3) {
    return 0LL;
  }
  int v4 = v3;
  uint64_t v5 = getlastlogxbyname(v7.pw_name, a2);
  free(v4);
  return v5;
}

char *_pwuid_r(uid_t a1, passwd *a2)
{
  size_t v4 = pw_size;
  if (!pw_size)
  {
    size_t v4 = sysconf(71);
    pw_size = v4;
    if (!v4) {
      return 0LL;
    }
  }

  uint64_t v5 = (char *)malloc(v4);
  if (v5)
  {
    getpwuid_r(a1, a2, v5, v4, &v7);
    if (!v7)
    {
      free(v5);
      return 0LL;
    }
  }

  return v5;
}

lastlogx *__cdecl getlastlogxbyname(const char *a1, lastlogx *a2)
{
  if (!a1) {
    return 0LL;
  }
  if (!*a1) {
    return 0LL;
  }
  size_t v4 = asl_new(1u);
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = v4;
  asl_set_query(v4, "Facility", "com.apple.system.lastlog", 1u);
  asl_set_query(v5, "ut_user", a1, 1u);
  int v6 = asl_new(2u);
  if (!v6) {
    goto LABEL_18;
  }
  passwd v7 = v6;
  asl_append(v6, v5);
  asl_release(v5);
  uint64_t v13 = 0LL;
  uint64_t v5 = (__asl_object_s *)MEMORY[0x186DFC084](0LL, v7, &v13, -1LL, 1LL, 4000000LL, 0xFFFFFFFFLL);
  asl_release(v7);
  if (!v5) {
    return 0LL;
  }
  uint64_t v8 = MEMORY[0x186DFC09C](v5);
  if (!v8)
  {
LABEL_18:
    asl_release(v5);
    return 0LL;
  }

  size_t v9 = (__asl_object_s *)v8;
  if (a2 || (a2 = (lastlogx *)malloc(0x130uLL)) != 0LL)
  {
    *(_OWORD *)&a2->ll_host[224] = 0u;
    *(_OWORD *)&a2->ll_host[240] = 0u;
    *(_OWORD *)&a2->ll_host[192] = 0u;
    *(_OWORD *)&a2->ll_host[208] = 0u;
    *(_OWORD *)&a2->ll_host[160] = 0u;
    *(_OWORD *)&a2->ll_host[176] = 0u;
    *(_OWORD *)&a2->ll_host[128] = 0u;
    *(_OWORD *)&a2->ll_host[144] = 0u;
    *(_OWORD *)&a2->ll_host[96] = 0u;
    *(_OWORD *)&a2->ll_host[112] = 0u;
    *(_OWORD *)&a2->ll_host[64] = 0u;
    *(_OWORD *)&a2->ll_host[80] = 0u;
    *(_OWORD *)&a2->ll_host[32] = 0u;
    *(_OWORD *)&a2->ll_host[48] = 0u;
    *(_OWORD *)a2->ll_host = 0u;
    *(_OWORD *)&a2->ll_host[16] = 0u;
    *(_OWORD *)a2->ll_line = 0u;
    *(_OWORD *)&a2->ll_line[16] = 0u;
    a2->ll_tv = 0u;
    if (asl_get(v9, "ut_line")) {
      _platform_strncpy();
    }
    char v10 = asl_get(v9, "ut_tv.tv_sec");
    if (v10) {
      a2->ll_tv.unsigned int tv_sec = strtol(v10, 0LL, 10);
    }
    size_t v11 = asl_get(v9, "ut_tv.tv_usec");
    if (v11) {
      a2->ll_tv.tv_usec = strtol(v11, 0LL, 10);
    }
    if (asl_get(v9, "ut_host")) {
      _platform_strncpy();
    }
  }

  asl_release(v5);
  return a2;
}

void _utmpx_asl(uint64_t a1)
{
  asl_object_t v2 = asl_open(0LL, 0LL, 4u);
  if (*(_WORD *)(a1 + 296))
  {
    int v3 = v2;
    size_t v4 = asl_new(0);
    if (!v4)
    {
      asl_release(v3);
      return;
    }

    uint64_t v5 = v4;
    if (*(_WORD *)(a1 + 296) == 7) {
      int v6 = "com.apple.system.lastlog";
    }
    else {
      int v6 = "com.apple.system.utmpx";
    }
    asl_set(v4, "Facility", v6);
    asl_set(v5, "Level", "5");
    if (*(_BYTE *)a1)
    {
      _platform_strncpy();
      char v13 = 0;
      asl_set(v5, "ut_user", value);
    }

    passwd v7 = (char *)(a1 + 256);
    uint64_t v8 = (char *)(a1 + 259);
    while (v8 >= v7)
    {
      __darwin_ct_rune_t v9 = *v8;
      if (v9 < 0) {
        unint64_t v10 = ___runetype(v9);
      }
      else {
        LODWORD(v10) = _DefaultRuneLocale.__runetype[v9];
      }
      --v8;
      if ((v10 & 0x40000) == 0)
      {
        snprintf( value,  0x101uLL,  "0x%02x 0x%02x 0x%02x 0x%02x",  *(char *)(a1 + 256),  *(char *)(a1 + 257),  *(char *)(a1 + 258),  *(char *)(a1 + 259));
        goto LABEL_18;
      }
    }

    if (!*v7) {
      goto LABEL_19;
    }
    _platform_strncpy();
    value[4] = 0;
LABEL_18:
    asl_set(v5, "ut_id", value);
LABEL_19:
    if (*(_BYTE *)(a1 + 260))
    {
      _platform_strncpy();
      value[32] = 0;
      asl_set(v5, "ut_line", value);
    }

    if (*(int *)(a1 + 292) >= 1)
    {
      snprintf(value, 0x101uLL, "%d", *(_DWORD *)(a1 + 292));
      asl_set(v5, "ut_pid", value);
    }

    snprintf(value, 0x101uLL, "%d", *(__int16 *)(a1 + 296));
    asl_set(v5, "ut_type", value);
    snprintf(value, 0x101uLL, "%ld", *(void *)(a1 + 304));
    asl_set(v5, "ut_tv.tv_sec", value);
    snprintf(value, 0x101uLL, "%d", *(_DWORD *)(a1 + 312));
    asl_set(v5, "ut_tv.tv_usec", value);
    if (*(_BYTE *)(a1 + 320))
    {
      _platform_strncpy();
      char v13 = 0;
      asl_set(v5, "ut_host", value);
    }

    unsigned int v11 = *(__int16 *)(a1 + 296);
    if (v11 <= 0xB)
    {
      if (((1 << v11) & 0x81C) != 0)
      {
        sprintf(value, "%s: %ld %d");
        goto LABEL_35;
      }

      if (((1 << v11) & 0x60) != 0)
      {
        sprintf(value, "%s: %d");
        goto LABEL_35;
      }

      if (((1 << v11) & 0x180) != 0)
      {
        sprintf(value, "%s: %d %.*s");
LABEL_35:
        asl_set(v5, "Message", value);
        asl_send(v3, v5);
        asl_release(v5);
        asl_release(v3);
        return;
      }
    }

    else {
      _platform_strcpy();
    }
    goto LABEL_35;
  }

uint64_t _utmpx_working_copy(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = a2;
  _platform_memmove();
  int v6 = *(_WORD *)(v4 + 296) & 0x3FFF;
  *(_WORD *)(v4 + 296) = v6;
  int v7 = 16;
  switch(v6)
  {
    case 0:
      return v4;
    case 5:
      int v7 = 24;
      break;
    case 6:
      int v7 = 25;
      break;
    case 7:
      BOOL v8 = *(_DWORD *)(v4 + 256) == _utmpx_working_copy_idzero;
      int v7 = 31;
      int v9 = 29;
      goto LABEL_9;
    case 8:
      BOOL v8 = *(_DWORD *)(v4 + 256) == _utmpx_working_copy_idzero;
      int v7 = 30;
      int v9 = 24;
LABEL_9:
      if (!v8) {
        int v7 = v9;
      }
      break;
    default:
      break;
  }

  if (a3) {
    char v10 = (v7 << 30 >> 31) & 6;
  }
  else {
    char v10 = v7;
  }
  if ((v10 & 4) != 0 && !*(_BYTE *)(v4 + 260))
  {
    if (ttyname_r(0, (char *)__s, 0x100uLL)
      && ttyname_r(1, (char *)__s, 0x100uLL)
      && ttyname_r(2, (char *)__s, 0x100uLL))
    {
      return 0LL;
    }

    strrchr((const char *)__s, 47);
    _platform_strncpy();
  }

  if ((v10 & 2) != 0)
  {
    uint64_t v11 = 33LL;
    __darwin_ct_rune_t v12 = (_BYTE *)(v4 + 260);
    while (*v12)
    {
      ++v12;
      if ((unint64_t)--v11 <= 1)
      {
        __darwin_ct_rune_t v12 = (_BYTE *)(v4 + 292);
        break;
      }
    }

    else {
      *(_DWORD *)(v4 + 256) = *((_DWORD *)v12 - 1);
    }
  }

  if ((v10 & 8) != 0 && !*(_DWORD *)(v4 + 292)) {
    *(_DWORD *)(v4 + 292) = getpid();
  }
  if ((v10 & 1) == 0 || *(_BYTE *)v4) {
    goto LABEL_35;
  }
  uid_t v13 = getuid();
  uintptr_t v14 = _pwuid_r(v13, __s);
  if (!v14) {
    return 0LL;
  }
  uint64_t v15 = v14;
  _platform_strncpy();
  free(v15);
LABEL_35:
  if (!a3 && !*(void *)(v4 + 304) && !*(_DWORD *)(v4 + 312)) {
    gettimeofday((timeval *)(v4 + 304), 0LL);
  }
  return v4;
}

void endutxent_wtmp(void)
{
}

utmpx *getutxent_wtmp(void)
{
  return (utmpx *)wtmp_func_2();
}

void setutxent_wtmp(int a1)
{
}

int wtmpxname(const char *a1)
{
  if (a1)
  {
    unint64_t v2 = _platform_strlen();
    if (v2 <= 0x3FF && a1[v2 - 1] == 120)
    {
      if ((wtmp_func_0 & 1) != 0)
      {
        if ((wtmp_file_0 & 0x80000000) == 0)
        {
          close_NOCANCEL();
          wtmp_file_0 = -1;
        }
      }

      else
      {
        if (wtmp_asl_2)
        {
          asl_release((asl_object_t)wtmp_asl_2);
          wtmp_asl_2 = 0LL;
        }

        wtmp_asl_3 = 0;
        wtmp_asl_4 = 0;
      }

      if (wtmp_file_2) {
        free((void *)wtmp_file_2);
      }
      int v3 = strdup(a1);
      wtmp_file_2 = (uint64_t)v3;
      if (v3)
      {
        LODWORD(v3) = 1;
        wtmp_func_0 = 1;
        wtmp_func_1 = end_file;
        wtmp_func_2 = (__asl_object_s *(*)())get_file;
        wtmp_func_3 = (void (*)(int))set_file;
      }
    }

    else
    {
      LODWORD(v3) = 0;
    }
  }

  else
  {
    if ((wtmp_func_0 & 1) != 0)
    {
      end_file();
      wtmp_func_0 = 0;
      wtmp_func_1 = end_asl;
      wtmp_func_2 = get_asl;
      wtmp_func_3 = set_asl;
    }

    else
    {
      if (wtmp_asl_2)
      {
        asl_release((asl_object_t)wtmp_asl_2);
        wtmp_asl_2 = 0LL;
      }

      wtmp_asl_3 = 0;
      wtmp_asl_4 = 0;
    }

    LODWORD(v3) = 1;
  }

  return (int)v3;
}

void end_asl()
{
  if (wtmp_asl_2)
  {
    asl_release((asl_object_t)wtmp_asl_2);
    wtmp_asl_2 = 0LL;
  }

  wtmp_asl_3 = 0;
  wtmp_asl_4 = 0;
}

void end_file()
{
  if ((wtmp_file_0 & 0x80000000) == 0)
  {
    close_NOCANCEL();
    wtmp_file_0 = -1;
  }

  if (wtmp_file_5)
  {
    free((void *)wtmp_file_5);
    wtmp_file_5 = 0LL;
  }

__asl_object_s *get_asl()
{
  if ((wtmp_asl_3 & 1) == 0) {
    set_asl(-1);
  }
  if ((wtmp_asl_4 & 1) != 0) {
    return 0LL;
  }
  host_t v0 = (__asl_object_s *)MEMORY[0x186DFC09C](wtmp_asl_2);
  if (v0)
  {
    _platform_bzero();
    if (asl_get(v0, "ut_user")) {
      _platform_strncpy();
    }
    if (asl_get(v0, "ut_id")) {
      _platform_strncpy();
    }
    if (asl_get(v0, "ut_line")) {
      _platform_strncpy();
    }
    int v1 = asl_get(v0, "ut_pid");
    if (v1) {
      dword_18C52BBCC = strtol(v1, 0LL, 10);
    }
    unint64_t v2 = asl_get(v0, "ut_type");
    if (v2) {
      word_18C52BBD0 = strtol(v2, 0LL, 10);
    }
    int v3 = asl_get(v0, "ut_tv.tv_sec");
    if (v3) {
      qword_18C52BBD8 = strtol(v3, 0LL, 10);
    }
    uint64_t v4 = asl_get(v0, "ut_tv.tv_usec");
    if (v4) {
      dword_18C52BBE0 = strtol(v4, 0LL, 10);
    }
    uint64_t v5 = asl_get(v0, "ut_host");
    host_t v0 = (__asl_object_s *)&get_asl_utx;
    if (v5) {
      _platform_strncpy();
    }
  }

  else
  {
    asl_release((asl_object_t)wtmp_asl_2);
    wtmp_asl_2 = 0LL;
    wtmp_asl_4 = 1;
  }

  return v0;
}

void set_asl(int a1)
{
  if ((a1 & 0x80000000) == 0)
  {
    wtmp_asl_1 = a1 == 0;
    wtmp_asl_0 = a1 != 0;
    wtmp_file_1 = a1 != 0;
  }

  wtmp_asl_3 = 0;
  wtmp_asl_4 = 0;
  if (wtmp_asl_2)
  {
    asl_release((asl_object_t)wtmp_asl_2);
    wtmp_asl_2 = 0LL;
  }

  int v1 = asl_new(1u);
  if (v1)
  {
    unint64_t v2 = v1;
    asl_set_query(v1, "Facility", "com.apple.system.utmpx", 1u);
    int v3 = asl_new(1u);
    if (v3)
    {
      uint64_t v4 = v3;
      asl_set_query(v3, "Facility", "com.apple.system.lastlog", 1u);
      uint64_t v5 = asl_new(2u);
      if (v5)
      {
        int v6 = v5;
        asl_append(v5, v2);
        asl_append(v6, v4);
        asl_release(v2);
        asl_release(v4);
        uint64_t v8 = 0LL;
        if (wtmp_asl_1) {
          uint64_t v7 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v7 = 1LL;
        }
        wtmp_asl_2 = MEMORY[0x186DFC084](0LL, v6, &v8, wtmp_asl_0 - 1LL, 0LL, 4000000LL, v7);
        asl_release(v6);
        if (wtmp_asl_2)
        {
          wtmp_asl_3 = 1;
          wtmp_asl_4 = 0;
        }
      }

      else
      {
        asl_release(v2);
        asl_release(v4);
      }
    }

    else
    {
      asl_release(v2);
    }
  }

void *get_file()
{
  while (1)
  {
    int v0 = wtmp_file_7 - 1;
    if (wtmp_file_7 >= 1) {
      break;
    }
    if ((wtmp_file_0 & 0x80000000) == 0)
    {
      if (!wtmp_file_4) {
        return 0LL;
      }
      uint64_t v1 = wtmp_file_5;
      if (wtmp_file_1 == 1)
      {
        wtmp_file_6 = wtmp_file_5;
      }

      else
      {
        wtmp_file_6 = wtmp_file_5 + 19468;
        wtmp_file_3 -= 20096LL;
        if (lseek(wtmp_file_0, wtmp_file_3, 0) < 0)
        {
LABEL_24:
          unint64_t v2 = 0LL;
          wtmp_file_4 = 0LL;
          return v2;
        }

        uint64_t v1 = wtmp_file_5;
      }

      int v3 = 20096;
      do
      {
        int NOCANCEL = read_NOCANCEL();
        int v5 = NOCANCEL;
        if (NOCANCEL <= 0)
        {
          if ((NOCANCEL & 0x80000000) == 0 || *__error() != 4 && *__error() != 35) {
            goto LABEL_24;
          }
        }

        else
        {
          v1 += NOCANCEL;
        }

        BOOL v6 = __OFSUB__(v3, v5);
        v3 -= v5;
      }

      while (!((v3 < 0) ^ v6 | (v3 == 0)));
      wtmp_file_4 -= 32LL;
      int v0 = 31;
      break;
    }

    set_file(-1);
    if (wtmp_file_0 < 0) {
      return 0LL;
    }
  }

  uint64_t v7 = wtmp_file_6;
  uint64_t v8 = 628LL;
  if (!wtmp_file_1) {
    uint64_t v8 = -628LL;
  }
  wtmp_file_6 += v8;
  wtmp_file_7 = v0;
  unint64_t v2 = &get_file_ux;
  _platform_bzero();
  _platform_memmove();
  qword_18C52BE58 = *(int *)(v7 + 300);
  dword_18C52BE60 = *(_DWORD *)(v7 + 304);
  _platform_memmove();
  return v2;
}

uint64_t set_file(int a1)
{
  if ((a1 & 0x80000000) == 0)
  {
    wtmp_asl_1 = a1 == 0;
    wtmp_asl_0 = a1 != 0;
    wtmp_file_1 = a1 != 0;
  }

  if (!wtmp_file_5)
  {
    uint64_t result = (uint64_t)malloc(0x4E80uLL);
    wtmp_file_5 = result;
    if (!result) {
      return result;
    }
  }

  if ((wtmp_file_0 & 0x80000000) == 0) {
    close_NOCANCEL();
  }
  uint64_t result = open_NOCANCEL();
  wtmp_file_0 = result;
  if ((result & 0x80000000) != 0) {
    return result;
  }
  if (fstat(result, &v9) < 0) {
    goto LABEL_28;
  }
  wtmp_file_4 = v9.st_size / 0x274uLL;
  if (v9.st_size < 0x4E8uLL) {
    goto LABEL_28;
  }
  if (read_NOCANCEL() != 628) {
    goto LABEL_28;
  }
  uint64_t v2 = wtmp_file_5;
  unint64_t v3 = (wtmp_file_4 - 2) & 0xFFFFFFFFFFFFFFE0LL;
  int v4 = wtmp_file_4 - 1 - v3;
  wtmp_file_7 = v4;
  wtmp_file_4 = wtmp_file_4 - 1 - v4;
  if ((wtmp_file_1 & 1) != 0) {
    goto LABEL_16;
  }
  wtmp_file_3 = 628 * v3 + 628;
  if (lseek(wtmp_file_0, 628 * v3 + 628, 0) < 0)
  {
LABEL_28:
    wtmp_file_7 = 0;
    uint64_t result = close_NOCANCEL();
    wtmp_file_0 = -1;
    return result;
  }

  int v4 = wtmp_file_7;
  uint64_t v2 = wtmp_file_5;
LABEL_16:
  int v5 = 628 * v4;
  do
  {
    uint64_t result = read_NOCANCEL();
    int v6 = result;
    if ((int)result <= 0)
    {
      if ((result & 0x80000000) == 0) {
        goto LABEL_28;
      }
      uint64_t result = (uint64_t)__error();
      if (*(_DWORD *)result != 4)
      {
        uint64_t result = (uint64_t)__error();
        if (*(_DWORD *)result != 35) {
          goto LABEL_28;
        }
      }
    }

    else
    {
      v2 += result;
    }

    BOOL v7 = __OFSUB__(v5, v6);
    v5 -= v6;
  }

  while (!((v5 < 0) ^ v7 | (v5 == 0)));
  if (wtmp_file_1) {
    uint64_t v8 = wtmp_file_5;
  }
  else {
    uint64_t v8 = wtmp_file_5 + 628LL * wtmp_file_7 - 628;
  }
  wtmp_file_6 = v8;
  return result;
}

uint64_t _utmpx32_64(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 304) = *(int *)(a1 + 300);
  *(_DWORD *)(a2 + 312) = *(_DWORD *)(a1 + 304);
  return _platform_memmove();
}

uint64_t _utmpx64_32(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 300) = *(void *)(a1 + 304);
  *(_DWORD *)(a2 + 304) = *(_DWORD *)(a1 + 312);
  return _platform_memmove();
}

void **_openutx(uint64_t a1)
{
  uint64_t v2 = (void **)calloc(1uLL, 0x2E0uLL);
  unint64_t v3 = v2;
  if (v2)
  {
    *uint64_t v2 = (void *)0x17600787475LL;
    *((_OWORD *)v2 + 41) = 0u;
    *((_OWORD *)v2 + 42) = 0u;
    *((_OWORD *)v2 + 43) = 0u;
    v2[88] = 0LL;
    v2[81] = (void *)850045863;
    if (!__utmpxname((uint64_t)v2, a1))
    {
      if (((_BYTE)v3[91] & 1) == 0) {
        free(v3[89]);
      }
      free(v3);
      unint64_t v3 = 0LL;
      *__error() = 22;
    }
  }

  return v3;
}

uint64_t _closeutx(void *a1)
{
  if (a1 && *a1 == 0x17600787475LL)
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 81));
    __endutxent((uint64_t)a1);
    if ((a1[91] & 1) == 0) {
      free((void *)a1[89]);
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 81));
    free(a1);
    return 0LL;
  }

  else
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }

uint64_t _os_debug_log_redirect_func()
{
  return 0LL;
}

uint64_t _os_debug_log_write(uint64_t a1, uint64_t a2)
{
  if (*(void *)(MEMORY[0x1895FF8E0] + 192LL) == -1LL) {
    uint64_t v3 = *(void *)(MEMORY[0x1895FF8E0] + 200LL);
  }
  else {
    uint64_t v3 = _os_alloc_once();
  }
  int v4 = *(_DWORD *)(v3 + 16);
  int v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  if (v5)
  {
    uint64_t result = v5(a2);
    if ((result & 1) != 0) {
      return result;
    }
  }

  if (v4 < 0) {
    goto LABEL_13;
  }
  uint64_t v7 = _platform_strlen();
  unint64_t v8 = 0LL;
  unint64_t v9 = v7 + 1;
  *(_BYTE *)(a2 + v7) = 10;
  while (1)
  {
    uint64_t result = write_NOCANCEL();
    if (result == -1) {
      break;
    }
LABEL_10:
    v8 += result;
    if (v8 >= v9) {
      return result;
    }
  }

  if (*__error() == 4)
  {
    uint64_t result = 0LL;
    goto LABEL_10;
  }

  _os_debug_log_write_error();
  *(_DWORD *)(v3 + 16) = -1;
LABEL_13:
  dyld_image_header_containing_address();
  _dyld_get_image_uuid();
  if ((_dyld_get_shared_cache_uuid() & 1) != 0) {
    _dyld_get_shared_cache_range();
  }
  os_log_simple_type_from_asl();
  return __os_log_simple_offset();
}

uint64_t _os_debug_log_error_offset(uint64_t a1)
{
  return _os_debug_log_write(3LL, a1);
}

uint64_t _os_debug_log_write_error()
{
  v2[0] = 0;
  int v0 = __error();
  strerror_r(*v0, v2, 0xF0uLL);
  return _simple_asl_log();
}

uint64_t _os_debug_log_init(uint64_t a1)
{
  char v2 = *(_BYTE *)(a1 + 20);
  *(_BYTE *)(a1 + 20) = v2 & 0xFD;
  if ((unint64_t)_os_debug_log_redirect_func < (unint64_t)sigaltstack
    || (unint64_t)_Block_copy <= (unint64_t)_os_debug_log_redirect_func)
  {
    *(void *)(a1 + 8) = _os_debug_log_redirect_func;
  }

  if (getenv("LIBDISPATCH_LOG") || getenv("OS_DEBUG_LOG")) {
    _platform_strcmp();
  }
  uint64_t result = _platform_strcmp();
  if (!(_DWORD)result)
  {
    *(_DWORD *)(a1 + 16) = -1;
    char v5 = v2 | 2;
    goto LABEL_16;
  }

  uint64_t result = _platform_strcmp();
  if (!(_DWORD)result)
  {
    *(_DWORD *)(a1 + 16) = -1;
    return result;
  }

  uint64_t result = _platform_strcmp();
  if ((_DWORD)result)
  {
    uint64_t result = _platform_strcmp();
    if ((_DWORD)result)
    {
      else {
        uint64_t result = _os_debug_log_open_file(0LL);
      }
      *(_DWORD *)(a1 + 16) = result;
      if ((_DWORD)result != -1)
      {
        if ((result & 0x80000000) != 0) {
          return result;
        }
        goto LABEL_21;
      }

      char v5 = *(_BYTE *)(a1 + 20) | 2;
LABEL_16:
      *(_BYTE *)(a1 + 20) = v5;
      return result;
    }

    int v6 = 1;
  }

  else
  {
    int v6 = 2;
  }

  *(_DWORD *)(a1 + 16) = v6;
LABEL_21:
  if (!*(void *)(a1 + 8))
  {
    *(_BYTE *)(a1 + 20) |= 1u;
    gettimeofday(&v11, 0LL);
    *(void *)a1 = mach_absolute_time();
    int v7 = *(_DWORD *)(a1 + 16);
    unint64_t v8 = getprogname();
    pid_t v9 = getpid();
    dprintf(v7, "=== os_debug_log log file opened for %s[%u] at %ld.%06u", v8, v9, v11.tv_sec, v11.tv_usec);
    if ((*(_BYTE *)(a1 + 20) & 1) != 0 && !mach_timebase_info(&info)) {
      dprintf(*(_DWORD *)(a1 + 16), " [ns=ticks*%u/%u]", info.numer, info.denom);
    }
    return dprintf(*(_DWORD *)(a1 + 16), " ===\n");
  }

  return result;
}

uint64_t _os_debug_log_open_file(uint64_t a1)
{
  if (a1) {
    return open_NOCANCEL();
  }
  char v2 = getprogname();
  pid_t v3 = getpid();
  snprintf(__str, 0x400uLL, "os_debug_log.%s.%d.log", v2, v3);
  strcpy(v4, "/var/tmp/");
  if (access(v4, 2) || (_platform_strlcat(), uint64_t result = open_NOCANCEL(), (result & 0x80000000) != 0))
  {
    if (!getenv("TMPDIR")) {
      return 0xFFFFFFFFLL;
    }
    _platform_strlcpy();
    if (access(v4, 2)) {
      return 0xFFFFFFFFLL;
    }
    _platform_strlcat();
    uint64_t result = open_NOCANCEL();
    if ((result & 0x80000000) != 0) {
      return 0xFFFFFFFFLL;
    }
  }

  return result;
}

int isascii(int _c)
{
  return _c < 0x80;
}

int isalnum(int _c)
{
  if (_c <= 0x7F)
  {
    uint64_t v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_c];
    return (v2 & 0x500) != 0;
  }

  if (_c < 0x100)
  {
    uint64_t v3 = __locale_key;
    int v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      int v4 = &__global_locale;
    }
    uint64_t v1 = *(_RuneLocale **)(v4[166] + 120LL);
    goto LABEL_8;
  }

  LOWORD(v2) = ___runetype(_c);
  return (v2 & 0x500) != 0;
}

int isalpha(int _c)
{
  if (_c <= 0x7F)
  {
    uint64_t v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_c];
    return (v2 >> 8) & 1;
  }

  if (_c < 0x100)
  {
    uint64_t v3 = __locale_key;
    int v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      int v4 = &__global_locale;
    }
    uint64_t v1 = *(_RuneLocale **)(v4[166] + 120LL);
    goto LABEL_8;
  }

  __uint32_t v2 = ___runetype(_c);
  return (v2 >> 8) & 1;
}

int isblank(int _c)
{
  if (_c <= 0x7F)
  {
    uint64_t v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_c];
    return (v2 >> 17) & 1;
  }

  if (_c < 0x100)
  {
    uint64_t v3 = __locale_key;
    int v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      int v4 = &__global_locale;
    }
    uint64_t v1 = *(_RuneLocale **)(v4[166] + 120LL);
    goto LABEL_8;
  }

  __uint32_t v2 = ___runetype(_c);
  return (v2 >> 17) & 1;
}

int iscntrl(int _c)
{
  if (_c <= 0x7F)
  {
    uint64_t v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_c];
    return (v2 >> 9) & 1;
  }

  if (_c < 0x100)
  {
    uint64_t v3 = __locale_key;
    int v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      int v4 = &__global_locale;
    }
    uint64_t v1 = *(_RuneLocale **)(v4[166] + 120LL);
    goto LABEL_8;
  }

  __uint32_t v2 = ___runetype(_c);
  return (v2 >> 9) & 1;
}

int isdigit(int _c)
{
  else {
    return 0;
  }
}

int isgraph(int _c)
{
  if (_c <= 0x7F)
  {
    uint64_t v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_c];
    return (v2 >> 11) & 1;
  }

  if (_c < 0x100)
  {
    uint64_t v3 = __locale_key;
    int v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      int v4 = &__global_locale;
    }
    uint64_t v1 = *(_RuneLocale **)(v4[166] + 120LL);
    goto LABEL_8;
  }

  __uint32_t v2 = ___runetype(_c);
  return (v2 >> 11) & 1;
}

int islower(int _c)
{
  if (_c <= 0x7F)
  {
    uint64_t v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_c];
    return (v2 >> 12) & 1;
  }

  if (_c < 0x100)
  {
    uint64_t v3 = __locale_key;
    int v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      int v4 = &__global_locale;
    }
    uint64_t v1 = *(_RuneLocale **)(v4[166] + 120LL);
    goto LABEL_8;
  }

  __uint32_t v2 = ___runetype(_c);
  return (v2 >> 12) & 1;
}

int isprint(int _c)
{
  if (_c <= 0x7F)
  {
    uint64_t v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_c];
    return (v2 >> 18) & 1;
  }

  if (_c < 0x100)
  {
    uint64_t v3 = __locale_key;
    int v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      int v4 = &__global_locale;
    }
    uint64_t v1 = *(_RuneLocale **)(v4[166] + 120LL);
    goto LABEL_8;
  }

  __uint32_t v2 = ___runetype(_c);
  return (v2 >> 18) & 1;
}

int ispunct(int _c)
{
  if (_c <= 0x7F)
  {
    uint64_t v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_c];
    return (v2 >> 13) & 1;
  }

  if (_c < 0x100)
  {
    uint64_t v3 = __locale_key;
    int v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      int v4 = &__global_locale;
    }
    uint64_t v1 = *(_RuneLocale **)(v4[166] + 120LL);
    goto LABEL_8;
  }

  __uint32_t v2 = ___runetype(_c);
  return (v2 >> 13) & 1;
}

int isspace(int _c)
{
  if (_c <= 0x7F)
  {
    uint64_t v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_c];
    return (v2 >> 14) & 1;
  }

  if (_c < 0x100)
  {
    uint64_t v3 = __locale_key;
    int v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      int v4 = &__global_locale;
    }
    uint64_t v1 = *(_RuneLocale **)(v4[166] + 120LL);
    goto LABEL_8;
  }

  __uint32_t v2 = ___runetype(_c);
  return (v2 >> 14) & 1;
}

int isupper(int _c)
{
  if (_c <= 0x7F)
  {
    uint64_t v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_c];
    return (v2 >> 15) & 1;
  }

  if (_c < 0x100)
  {
    uint64_t v3 = __locale_key;
    int v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      int v4 = &__global_locale;
    }
    uint64_t v1 = *(_RuneLocale **)(v4[166] + 120LL);
    goto LABEL_8;
  }

  __uint32_t v2 = ___runetype(_c);
  return (v2 >> 15) & 1;
}

int isxdigit(int _c)
{
  else {
    return 0;
  }
}

int toascii(int _c)
{
  return _c & 0x7F;
}

int tolower(int _c)
{
  uint64_t v2 = __locale_key;
  uint64_t v3 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (!v3) {
    uint64_t v3 = &__global_locale;
  }
  return *(_DWORD *)(*(void *)(v3[166] + 120LL) + 4LL * _c + 1084);
}

int toupper(int _c)
{
  uint64_t v2 = __locale_key;
  uint64_t v3 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (!v3) {
    uint64_t v3 = &__global_locale;
  }
  return *(_DWORD *)(*(void *)(v3[166] + 120LL) + 4LL * _c + 2108);
}

int digittoint(int _c)
{
  if (_c < 0x100)
  {
    uint64_t v2 = __locale_key;
    uint64_t v3 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
    if (!v3) {
      uint64_t v3 = &__global_locale;
    }
    int v1 = *(_DWORD *)(*(void *)(v3[166] + 120LL) + 4LL * _c + 60);
  }

  else
  {
    LOBYTE(v1) = ___runetype(_c);
  }

  return v1 & 0xF;
}

int ishexnumber(int _c)
{
  if (_c <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_c];
    return HIWORD(v2) & 1;
  }

  if (_c < 0x100)
  {
    uint64_t v3 = __locale_key;
    int v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      int v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120LL);
    goto LABEL_8;
  }

  __uint32_t v2 = ___runetype(_c);
  return HIWORD(v2) & 1;
}

int isideogram(int _c)
{
  if (_c <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_c];
    return (v2 >> 19) & 1;
  }

  if (_c < 0x100)
  {
    uint64_t v3 = __locale_key;
    int v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      int v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120LL);
    goto LABEL_8;
  }

  __uint32_t v2 = ___runetype(_c);
  return (v2 >> 19) & 1;
}

int isnumber(int _c)
{
  if (_c <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_c];
    return (v2 >> 10) & 1;
  }

  if (_c < 0x100)
  {
    uint64_t v3 = __locale_key;
    int v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      int v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120LL);
    goto LABEL_8;
  }

  __uint32_t v2 = ___runetype(_c);
  return (v2 >> 10) & 1;
}

int isphonogram(int _c)
{
  if (_c <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_c];
    return (v2 >> 21) & 1;
  }

  if (_c < 0x100)
  {
    uint64_t v3 = __locale_key;
    int v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      int v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120LL);
    goto LABEL_8;
  }

  __uint32_t v2 = ___runetype(_c);
  return (v2 >> 21) & 1;
}

int isrune(int _c)
{
  if (_c <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    unsigned int v2 = v1->__runetype[_c];
    return v2 > 0xF;
  }

  if (_c < 0x100)
  {
    uint64_t v3 = __locale_key;
    int v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      int v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120LL);
    goto LABEL_8;
  }

  unsigned int v2 = ___runetype(_c);
  return v2 > 0xF;
}

int isspecial(int _c)
{
  if (_c <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_c];
    return (v2 >> 20) & 1;
  }

  if (_c < 0x100)
  {
    uint64_t v3 = __locale_key;
    int v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      int v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120LL);
    goto LABEL_8;
  }

  __uint32_t v2 = ___runetype(_c);
  return (v2 >> 20) & 1;
}

int digittoint_l(int c, locale_t l)
{
  if (c < 0x100)
  {
    locale_t v3 = (locale_t)&__c_locale;
    locale_t v4 = (locale_t)&__global_locale;
    if (l != (locale_t)-1LL) {
      locale_t v4 = l;
    }
    if (l) {
      locale_t v3 = v4;
    }
    int v2 = *(_DWORD *)(*(void *)(*((void *)v3 + 166) + 120LL) + 4LL * c + 60);
  }

  else
  {
    LOBYTE(v2) = ___runetype_l(c, l);
  }

  return v2 & 0xF;
}

int isalnum_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    int v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return (v3 & 0x500) != 0;
  }

  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1LL) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    int v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  LOWORD(v3) = ___runetype_l(c, l);
  return (v3 & 0x500) != 0;
}

int isalpha_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    int v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return (v3 >> 8) & 1;
  }

  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1LL) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    int v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  __uint32_t v3 = ___runetype_l(c, l);
  return (v3 >> 8) & 1;
}

int isblank_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    int v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return (v3 >> 17) & 1;
  }

  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1LL) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    int v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  __uint32_t v3 = ___runetype_l(c, l);
  return (v3 >> 17) & 1;
}

int iscntrl_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    int v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return (v3 >> 9) & 1;
  }

  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1LL) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    int v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  __uint32_t v3 = ___runetype_l(c, l);
  return (v3 >> 9) & 1;
}

int isdigit_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    int v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return (v3 >> 10) & 1;
  }

  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1LL) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    int v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  __uint32_t v3 = ___runetype_l(c, l);
  return (v3 >> 10) & 1;
}

int isgraph_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    int v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return (v3 >> 11) & 1;
  }

  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1LL) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    int v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  __uint32_t v3 = ___runetype_l(c, l);
  return (v3 >> 11) & 1;
}

int ishexnumber_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    int v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return HIWORD(v3) & 1;
  }

  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1LL) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    int v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  __uint32_t v3 = ___runetype_l(c, l);
  return HIWORD(v3) & 1;
}

int isideogram_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    int v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return (v3 >> 19) & 1;
  }

  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1LL) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    int v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  __uint32_t v3 = ___runetype_l(c, l);
  return (v3 >> 19) & 1;
}

int islower_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    int v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return (v3 >> 12) & 1;
  }

  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1LL) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    int v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  __uint32_t v3 = ___runetype_l(c, l);
  return (v3 >> 12) & 1;
}

int isnumber_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    int v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return (v3 >> 10) & 1;
  }

  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1LL) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    int v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  __uint32_t v3 = ___runetype_l(c, l);
  return (v3 >> 10) & 1;
}

int isphonogram_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    int v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return (v3 >> 21) & 1;
  }

  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1LL) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    int v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  __uint32_t v3 = ___runetype_l(c, l);
  return (v3 >> 21) & 1;
}

int isprint_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    int v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return (v3 >> 18) & 1;
  }

  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1LL) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    int v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  __uint32_t v3 = ___runetype_l(c, l);
  return (v3 >> 18) & 1;
}

int ispunct_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    int v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return (v3 >> 13) & 1;
  }

  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1LL) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    int v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  __uint32_t v3 = ___runetype_l(c, l);
  return (v3 >> 13) & 1;
}

int isrune_l(int c, locale_t l)
{
  if (c > 0x7F)
  {
    if (c < 0x100)
    {
      locale_t v4 = (locale_t)&__c_locale;
      locale_t v5 = (locale_t)&__global_locale;
      if (l != (locale_t)-1LL) {
        locale_t v5 = l;
      }
      if (l) {
        locale_t v4 = v5;
      }
      int v3 = *(_DWORD *)(*(void *)(*((void *)v4 + 166) + 120LL) + 4LL * c + 60);
    }

    else
    {
      int v3 = ___runetype_l(c, l);
    }

    uint64_t v2 = (int)(v3 & 0xFFFFFFF0);
  }

  else
  {
    uint64_t v2 = _DefaultRuneLocale.__runetype[c] & 0xFFFFFFF0;
  }

  return v2 != 0;
}

int isspace_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    uint64_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return (v3 >> 14) & 1;
  }

  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1LL) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    uint64_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  __uint32_t v3 = ___runetype_l(c, l);
  return (v3 >> 14) & 1;
}

int isspecial_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    uint64_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return (v3 >> 20) & 1;
  }

  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1LL) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    uint64_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  __uint32_t v3 = ___runetype_l(c, l);
  return (v3 >> 20) & 1;
}

int isupper_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    uint64_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return (v3 >> 15) & 1;
  }

  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1LL) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    uint64_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  __uint32_t v3 = ___runetype_l(c, l);
  return (v3 >> 15) & 1;
}

int isxdigit_l(int c, locale_t l)
{
  if (c <= 0x7F)
  {
    uint64_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[c];
    return HIWORD(v3) & 1;
  }

  if (c < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (l != (locale_t)-1LL) {
      locale_t v5 = l;
    }
    if (l) {
      locale_t v4 = v5;
    }
    uint64_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  __uint32_t v3 = ___runetype_l(c, l);
  return HIWORD(v3) & 1;
}

int tolower_l(int c, locale_t l)
{
  else {
    return _DefaultRuneLocale.__maplower[c];
  }
}

int toupper_l(int c, locale_t l)
{
  else {
    return _DefaultRuneLocale.__mapupper[c];
  }
}

void bcopy(const void *a1, void *a2, size_t a3)
{
}

int iswalnum(wint_t _wc)
{
  if (_wc <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_wc];
    return (v2 & 0x500) != 0;
  }

  if (_wc < 0x100)
  {
    uint64_t v3 = __locale_key;
    locale_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      locale_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120LL);
    goto LABEL_8;
  }

  LOWORD(v2) = ___runetype(_wc);
  return (v2 & 0x500) != 0;
}

int iswalpha(wint_t _wc)
{
  if (_wc <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_wc];
    return (v2 >> 8) & 1;
  }

  if (_wc < 0x100)
  {
    uint64_t v3 = __locale_key;
    locale_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      locale_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120LL);
    goto LABEL_8;
  }

  __uint32_t v2 = ___runetype(_wc);
  return (v2 >> 8) & 1;
}

int iswcntrl(wint_t _wc)
{
  if (_wc <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_wc];
    return (v2 >> 9) & 1;
  }

  if (_wc < 0x100)
  {
    uint64_t v3 = __locale_key;
    locale_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      locale_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120LL);
    goto LABEL_8;
  }

  __uint32_t v2 = ___runetype(_wc);
  return (v2 >> 9) & 1;
}

int iswctype(wint_t _wc, wctype_t _charclass)
{
  if (_wc <= 0x7F)
  {
    uint64_t v3 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v4 = v3->__runetype[_wc];
    return (v4 & _charclass) != 0;
  }

  if (_wc < 0x100)
  {
    uint64_t v5 = __locale_key;
    int v6 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
    if (!v6) {
      int v6 = &__global_locale;
    }
    uint64_t v3 = *(_RuneLocale **)(v6[166] + 120LL);
    goto LABEL_8;
  }

  __uint32_t v4 = ___runetype(_wc);
  return (v4 & _charclass) != 0;
}

int iswdigit(wint_t _wc)
{
  else {
    return 0;
  }
}

int iswgraph(wint_t _wc)
{
  if (_wc <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_wc];
    return (v2 >> 11) & 1;
  }

  if (_wc < 0x100)
  {
    uint64_t v3 = __locale_key;
    __uint32_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      __uint32_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120LL);
    goto LABEL_8;
  }

  __uint32_t v2 = ___runetype(_wc);
  return (v2 >> 11) & 1;
}

int iswlower(wint_t _wc)
{
  if (_wc <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_wc];
    return (v2 >> 12) & 1;
  }

  if (_wc < 0x100)
  {
    uint64_t v3 = __locale_key;
    __uint32_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      __uint32_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120LL);
    goto LABEL_8;
  }

  __uint32_t v2 = ___runetype(_wc);
  return (v2 >> 12) & 1;
}

int iswprint(wint_t _wc)
{
  if (_wc <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_wc];
    return (v2 >> 18) & 1;
  }

  if (_wc < 0x100)
  {
    uint64_t v3 = __locale_key;
    __uint32_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      __uint32_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120LL);
    goto LABEL_8;
  }

  __uint32_t v2 = ___runetype(_wc);
  return (v2 >> 18) & 1;
}

int iswpunct(wint_t _wc)
{
  if (_wc <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_wc];
    return (v2 >> 13) & 1;
  }

  if (_wc < 0x100)
  {
    uint64_t v3 = __locale_key;
    __uint32_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      __uint32_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120LL);
    goto LABEL_8;
  }

  __uint32_t v2 = ___runetype(_wc);
  return (v2 >> 13) & 1;
}

int iswspace(wint_t _wc)
{
  if (_wc <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_wc];
    return (v2 >> 14) & 1;
  }

  if (_wc < 0x100)
  {
    uint64_t v3 = __locale_key;
    __uint32_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      __uint32_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120LL);
    goto LABEL_8;
  }

  __uint32_t v2 = ___runetype(_wc);
  return (v2 >> 14) & 1;
}

int iswupper(wint_t _wc)
{
  if (_wc <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_wc];
    return (v2 >> 15) & 1;
  }

  if (_wc < 0x100)
  {
    uint64_t v3 = __locale_key;
    __uint32_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      __uint32_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120LL);
    goto LABEL_8;
  }

  __uint32_t v2 = ___runetype(_wc);
  return (v2 >> 15) & 1;
}

int iswxdigit(wint_t _wc)
{
  else {
    return 0;
  }
}

wint_t towlower(wint_t _wc)
{
  uint64_t v2 = __locale_key;
  uint64_t v3 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (!v3) {
    uint64_t v3 = &__global_locale;
  }
  return *(_DWORD *)(*(void *)(v3[166] + 120LL) + 4LL * _wc + 1084);
}

wint_t towupper(wint_t _wc)
{
  uint64_t v2 = __locale_key;
  uint64_t v3 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (!v3) {
    uint64_t v3 = &__global_locale;
  }
  return *(_DWORD *)(*(void *)(v3[166] + 120LL) + 4LL * _wc + 2108);
}

int iswalnum_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    uint64_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return (v3 & 0x500) != 0;
  }

  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1LL) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    uint64_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  LOWORD(v3) = ___runetype_l(_wc, _l);
  return (v3 & 0x500) != 0;
}

int iswalpha_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    uint64_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return (v3 >> 8) & 1;
  }

  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1LL) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    uint64_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  __uint32_t v3 = ___runetype_l(_wc, _l);
  return (v3 >> 8) & 1;
}

int iswcntrl_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    uint64_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return (v3 >> 9) & 1;
  }

  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1LL) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    uint64_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  __uint32_t v3 = ___runetype_l(_wc, _l);
  return (v3 >> 9) & 1;
}

int iswctype_l(wint_t _wc, wctype_t _charclass, locale_t _l)
{
  if (_wc > 0x7F)
  {
    if (_wc < 0x100)
    {
      locale_t v6 = (locale_t)&__c_locale;
      locale_t v7 = (locale_t)&__global_locale;
      if (_l != (locale_t)-1LL) {
        locale_t v7 = _l;
      }
      if (_l) {
        locale_t v6 = v7;
      }
      int v5 = *(_DWORD *)(*(void *)(*((void *)v6 + 166) + 120LL) + 4LL * _wc + 60);
    }

    else
    {
      int v5 = ___runetype_l(_wc, _l);
    }

    uint64_t v4 = (int)(v5 & _charclass);
  }

  else
  {
    uint64_t v4 = _DefaultRuneLocale.__runetype[_wc] & _charclass;
  }

  return v4 != 0;
}

int iswdigit_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    uint64_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return (v3 >> 10) & 1;
  }

  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1LL) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    uint64_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  __uint32_t v3 = ___runetype_l(_wc, _l);
  return (v3 >> 10) & 1;
}

int iswgraph_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    uint64_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return (v3 >> 11) & 1;
  }

  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1LL) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    uint64_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  __uint32_t v3 = ___runetype_l(_wc, _l);
  return (v3 >> 11) & 1;
}

int iswlower_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    uint64_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return (v3 >> 12) & 1;
  }

  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1LL) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    uint64_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  __uint32_t v3 = ___runetype_l(_wc, _l);
  return (v3 >> 12) & 1;
}

int iswprint_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    uint64_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return (v3 >> 18) & 1;
  }

  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1LL) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    uint64_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  __uint32_t v3 = ___runetype_l(_wc, _l);
  return (v3 >> 18) & 1;
}

int iswpunct_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    uint64_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return (v3 >> 13) & 1;
  }

  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1LL) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    uint64_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  __uint32_t v3 = ___runetype_l(_wc, _l);
  return (v3 >> 13) & 1;
}

int iswspace_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    uint64_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return (v3 >> 14) & 1;
  }

  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1LL) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    uint64_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  __uint32_t v3 = ___runetype_l(_wc, _l);
  return (v3 >> 14) & 1;
}

int iswupper_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    uint64_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return (v3 >> 15) & 1;
  }

  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1LL) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    uint64_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  __uint32_t v3 = ___runetype_l(_wc, _l);
  return (v3 >> 15) & 1;
}

int iswxdigit_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    uint64_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return HIWORD(v3) & 1;
  }

  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1LL) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    uint64_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  __uint32_t v3 = ___runetype_l(_wc, _l);
  return HIWORD(v3) & 1;
}

wint_t towlower_l(wint_t _wc, locale_t _l)
{
  else {
    return _DefaultRuneLocale.__maplower[_wc];
  }
}

wint_t towupper_l(wint_t _wc, locale_t _l)
{
  else {
    return _DefaultRuneLocale.__mapupper[_wc];
  }
}

int iswblank(wint_t _wc)
{
  if (_wc <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_wc];
    return (v2 >> 17) & 1;
  }

  if (_wc < 0x100)
  {
    uint64_t v3 = __locale_key;
    locale_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      locale_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120LL);
    goto LABEL_8;
  }

  __uint32_t v2 = ___runetype(_wc);
  return (v2 >> 17) & 1;
}

int iswascii(wint_t _wc)
{
  return _wc < 0x80;
}

int iswhexnumber(wint_t _wc)
{
  if (_wc <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_wc];
    return HIWORD(v2) & 1;
  }

  if (_wc < 0x100)
  {
    uint64_t v3 = __locale_key;
    locale_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      locale_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120LL);
    goto LABEL_8;
  }

  __uint32_t v2 = ___runetype(_wc);
  return HIWORD(v2) & 1;
}

int iswideogram(wint_t _wc)
{
  if (_wc <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_wc];
    return (v2 >> 19) & 1;
  }

  if (_wc < 0x100)
  {
    uint64_t v3 = __locale_key;
    locale_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      locale_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120LL);
    goto LABEL_8;
  }

  __uint32_t v2 = ___runetype(_wc);
  return (v2 >> 19) & 1;
}

int iswnumber(wint_t _wc)
{
  if (_wc <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_wc];
    return (v2 >> 10) & 1;
  }

  if (_wc < 0x100)
  {
    uint64_t v3 = __locale_key;
    locale_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      locale_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120LL);
    goto LABEL_8;
  }

  __uint32_t v2 = ___runetype(_wc);
  return (v2 >> 10) & 1;
}

int iswphonogram(wint_t _wc)
{
  if (_wc <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_wc];
    return (v2 >> 21) & 1;
  }

  if (_wc < 0x100)
  {
    uint64_t v3 = __locale_key;
    locale_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      locale_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120LL);
    goto LABEL_8;
  }

  __uint32_t v2 = ___runetype(_wc);
  return (v2 >> 21) & 1;
}

int iswrune(wint_t _wc)
{
  if (_wc <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    unsigned int v2 = v1->__runetype[_wc];
    return v2 > 0xF;
  }

  if (_wc < 0x100)
  {
    uint64_t v3 = __locale_key;
    locale_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      locale_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120LL);
    goto LABEL_8;
  }

  unsigned int v2 = ___runetype(_wc);
  return v2 > 0xF;
}

int iswspecial(wint_t _wc)
{
  if (_wc <= 0x7F)
  {
    int v1 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v2 = v1->__runetype[_wc];
    return (v2 >> 20) & 1;
  }

  if (_wc < 0x100)
  {
    uint64_t v3 = __locale_key;
    locale_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
    if (!v4) {
      locale_t v4 = &__global_locale;
    }
    int v1 = *(_RuneLocale **)(v4[166] + 120LL);
    goto LABEL_8;
  }

  __uint32_t v2 = ___runetype(_wc);
  return (v2 >> 20) & 1;
}

int iswblank_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    __uint32_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return (v3 >> 17) & 1;
  }

  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1LL) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    __uint32_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  __uint32_t v3 = ___runetype_l(_wc, _l);
  return (v3 >> 17) & 1;
}

int iswhexnumber_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    __uint32_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return HIWORD(v3) & 1;
  }

  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1LL) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    __uint32_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  __uint32_t v3 = ___runetype_l(_wc, _l);
  return HIWORD(v3) & 1;
}

int iswideogram_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    __uint32_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return (v3 >> 19) & 1;
  }

  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1LL) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    __uint32_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  __uint32_t v3 = ___runetype_l(_wc, _l);
  return (v3 >> 19) & 1;
}

int iswnumber_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    __uint32_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return (v3 >> 10) & 1;
  }

  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1LL) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    __uint32_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  __uint32_t v3 = ___runetype_l(_wc, _l);
  return (v3 >> 10) & 1;
}

int iswphonogram_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    __uint32_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return (v3 >> 21) & 1;
  }

  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1LL) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    __uint32_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  __uint32_t v3 = ___runetype_l(_wc, _l);
  return (v3 >> 21) & 1;
}

int iswrune_l(wint_t _wc, locale_t _l)
{
  if (_wc > 0x7F)
  {
    if (_wc < 0x100)
    {
      locale_t v4 = (locale_t)&__c_locale;
      locale_t v5 = (locale_t)&__global_locale;
      if (_l != (locale_t)-1LL) {
        locale_t v5 = _l;
      }
      if (_l) {
        locale_t v4 = v5;
      }
      int v3 = *(_DWORD *)(*(void *)(*((void *)v4 + 166) + 120LL) + 4LL * _wc + 60);
    }

    else
    {
      int v3 = ___runetype_l(_wc, _l);
    }

    uint64_t v2 = (int)(v3 & 0xFFFFFFF0);
  }

  else
  {
    uint64_t v2 = _DefaultRuneLocale.__runetype[_wc] & 0xFFFFFFF0;
  }

  return v2 != 0;
}

int iswspecial_l(wint_t _wc, locale_t _l)
{
  if (_wc <= 0x7F)
  {
    uint64_t v2 = &_DefaultRuneLocale;
LABEL_10:
    __uint32_t v3 = v2->__runetype[_wc];
    return (v3 >> 20) & 1;
  }

  if (_wc < 0x100)
  {
    locale_t v4 = (locale_t)&__c_locale;
    locale_t v5 = (locale_t)&__global_locale;
    if (_l != (locale_t)-1LL) {
      locale_t v5 = _l;
    }
    if (_l) {
      locale_t v4 = v5;
    }
    uint64_t v2 = *(_RuneLocale **)(*((void *)v4 + 166) + 120LL);
    goto LABEL_10;
  }

  __uint32_t v3 = ___runetype_l(_wc, _l);
  return (v3 >> 20) & 1;
}

locale_t duplocale(locale_t a1)
{
  *__error() = 22;
  return 0LL;
}

void *_duplocale(char *a1)
{
  uint64_t v2 = malloc(0x5C0uLL);
  __uint32_t v3 = v2;
  if (v2)
  {
    *(_DWORD *)uint64_t v2 = 1;
    v2[1] = destruct_locale;
    *((_DWORD *)v2 + 324) = 0;
    if (a1 == (char *)-1LL)
    {
      a1 = (char *)&__global_locale;
    }

    else if (a1)
    {
      if (a1 == (char *)&__c_locale)
      {
        _platform_memmove();
        *(_DWORD *)__uint32_t v3 = 1;
        v3[1] = destruct_locale;
        *((_DWORD *)v3 + 324) = 0;
        return v3;
      }
    }

    else
    {
      uint64_t v4 = __locale_key;
      locale_t v5 = *(char **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
      if (v5) {
        a1 = v5;
      }
      else {
        a1 = (char *)&__global_locale;
      }
    }

    os_unfair_lock_lock((os_unfair_lock_t)a1 + 324);
    __int128 v6 = *(_OWORD *)(a1 + 1448);
    *(_OWORD *)(v3 + 179) = *(_OWORD *)(a1 + 1432);
    *(_OWORD *)(v3 + 181) = v6;
    v3[183] = *((void *)a1 + 183);
    __int128 v7 = *(_OWORD *)(a1 + 1384);
    *(_OWORD *)(v3 + 171) = *(_OWORD *)(a1 + 1368);
    *(_OWORD *)(v3 + 173) = v7;
    __int128 v8 = *(_OWORD *)(a1 + 1416);
    *(_OWORD *)(v3 + 175) = *(_OWORD *)(a1 + 1400);
    *(_OWORD *)(v3 + 177) = v8;
    __int128 v9 = *(_OWORD *)(a1 + 1320);
    *(_OWORD *)(v3 + 163) = *(_OWORD *)(a1 + 1304);
    *(_OWORD *)(v3 + 165) = v9;
    __int128 v10 = *(_OWORD *)(a1 + 1352);
    *(_OWORD *)(v3 + 167) = *(_OWORD *)(a1 + 1336);
    *(_OWORD *)(v3 + 169) = v10;
    os_unfair_lock_unlock((os_unfair_lock_t)a1 + 324);
    _platform_bzero();
    for (uint64_t i = 0LL; i != 6; ++i)
    {
      __darwin_ct_rune_t v12 = (unsigned int *)v3[i + 165];
      if (v12)
      {
        do
          unsigned int v13 = __ldaxr(v12);
        while (__stlxr(v13 + 1, v12));
      }
    }

    uintptr_t v14 = (unsigned int *)v3[171];
    if (v14)
    {
      do
        unsigned int v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
    }
  }

  return v3;
}

int freelocale(locale_t a1)
{
  if (a1 == (locale_t)-1LL)
  {
    BOOL v1 = 0;
  }

  else
  {
    if (!a1)
    {
LABEL_18:
      *__error() = 22;
      return -1;
    }

    BOOL v1 = *((void *)a1 + 163) != 0x786C6F63616C6530LL;
  }

  BOOL v3 = a1 == (locale_t)&__c_locale || (locale_t)((char *)a1 + 1) == 0LL || a1 == (locale_t)&__global_locale;
  if (v3 || v1) {
    goto LABEL_18;
  }
  do
    unsigned int v4 = __ldaxr((unsigned int *)a1);
  while (__stlxr(v4 - 1, (unsigned int *)a1));
  if (v4 == 1)
  {
    locale_t v5 = (void (*)(void))*((void *)a1 + 1);
    if (v5) {
      v5();
    }
  }

  return 0;
}

locale_t newlocale(int a1, const char *a2, locale_t a3)
{
  char v5 = a1;
  if (a2
    && ((unint64_t)_platform_strlen() > 0x1F
     || *a2 == 46 && (!a2[1] || a2[1] == 46 && !a2[2])
     || _platform_strchr()))
  {
    goto LABEL_27;
  }

  int v6 = v5 & 0x3F;
  if (v6 != 63)
  {
LABEL_27:
    __int128 v7 = 0LL;
    *__error() = 22;
    return v7;
  }

  a3 = (locale_t)&__c_locale;
LABEL_11:
  __int128 v7 = (_xlocale *)_duplocale((char *)a3);
  if (!v7) {
    return v7;
  }
  BOOL v8 = v6 == 63 && a2 == 0LL;
  BOOL v9 = v8;
  if ((v5 & 0x3F) == 0 || v9) {
    return v7;
  }
  if (a2) {
    __int128 v10 = a2;
  }
  else {
    __int128 v10 = (const char *)&C;
  }
  int v11 = __detect_path_locale();
  if (v11)
  {
LABEL_24:
    *__error() = v11;
LABEL_25:
    freelocale(v7);
    return 0LL;
  }

  if (*v10) {
    locale_env = (char *)v10;
  }
  else {
    locale_env = 0LL;
  }
  int v14 = 1;
  while (2)
  {
    if ((v14 & v6) == 0) {
      goto LABEL_99;
    }
    switch(v14)
    {
      case 1:
        if (!*v10)
        {
          locale_env = __get_locale_env(1);
          if (locale_env)
          {
            if (*locale_env == 46)
            {
              int v15 = locale_env[1];
              if (v15 == 46) {
                int v15 = locale_env[2];
              }
              if (!v15) {
                goto LABEL_121;
              }
            }

            if (_platform_strchr()) {
              goto LABEL_121;
            }
          }
        }

        if (*((void *)v7 + 165)) {
LABEL_98:
        }
          _platform_strlcpy();
        goto LABEL_99;
      case 2:
        if (!*v10)
        {
          locale_env = __get_locale_env(2);
          if (locale_env)
          {
            if (*locale_env == 46)
            {
              int v16 = locale_env[1];
              if (v16 == 46) {
                int v16 = locale_env[2];
              }
              if (!v16) {
                goto LABEL_121;
              }
            }

            if (_platform_strchr()) {
              goto LABEL_121;
            }
          }
        }

        int v17 = __setrunelocale((uint64_t)locale_env, (uint64_t)v7);
        if (v17)
        {
          int v11 = v17;
          goto LABEL_24;
        }

        if (*((void *)v7 + 166)) {
          _platform_strlcpy();
        }
        if (*((_BYTE *)v7 + 1318) == 1) {
          *((_BYTE *)v7 + 1318) = 0;
        }
        goto LABEL_99;
      case 3:
      case 5:
      case 6:
      case 7:
        goto LABEL_99;
      case 4:
        if (!*v10)
        {
          locale_env = __get_locale_env(6);
          if (locale_env)
          {
            if (*locale_env == 46)
            {
              int v18 = locale_env[1];
              if (v18 == 46) {
                int v18 = locale_env[2];
              }
              if (!v18) {
                goto LABEL_121;
              }
            }

            if (_platform_strchr()) {
              goto LABEL_121;
            }
          }
        }

        int v21 = _platform_strcmp();
        if (!*((void *)v7 + 170)) {
          goto LABEL_99;
        }
        goto LABEL_98;
      case 8:
        if (!*v10)
        {
          locale_env = __get_locale_env(3);
          if (locale_env)
          {
            if (*locale_env == 46)
            {
              int v19 = locale_env[1];
              if (v19 == 46) {
                int v19 = locale_env[2];
              }
              if (!v19) {
                goto LABEL_121;
              }
            }

            if (_platform_strchr()) {
              goto LABEL_121;
            }
          }
        }

        int v22 = _platform_strcmp();
        if (*((void *)v7 + 167)) {
          goto LABEL_98;
        }
        goto LABEL_99;
      default:
        if (v14 == 16)
        {
          if (!*v10)
          {
            locale_env = __get_locale_env(4);
            if (locale_env)
            {
              if (*locale_env == 46)
              {
                int v20 = locale_env[1];
                if (v20 == 46) {
                  int v20 = locale_env[2];
                }
                if (!v20) {
                  goto LABEL_121;
                }
              }

              if (_platform_strchr()) {
                goto LABEL_121;
              }
            }
          }

          if (_platform_strcmp())
          {
            if (*((void *)v7 + 168)) {
              _platform_strlcpy();
            }
            *((_BYTE *)v7 + 1318) = 0;
            uint64_t v24 = *((void *)v7 + 171);
            if (v24)
            {
              do
              {
                unsigned int v25 = __ldaxr((unsigned int *)v24);
                unsigned int v26 = v25 - 1;
              }

              while (__stlxr(v26, (unsigned int *)v24));
              if (!v26)
              {
                int v27 = *(void (**)(void))(v24 + 8);
                if (v27) {
                  v27();
                }
              }
            }

            *((void *)v7 + 171) = 0LL;
          }

LABEL_99:
          v14 *= 2;
          if (v14 >= 33) {
            return v7;
          }
          continue;
        }

        if (v14 != 32) {
          goto LABEL_99;
        }
        if (!*v10)
        {
          locale_env = __get_locale_env(5);
          if (locale_env)
          {
            if ((unint64_t)_platform_strlen() > 0x1F
              || *locale_env == 46 && (!locale_env[1] || locale_env[1] == 46 && !locale_env[2])
              || _platform_strchr())
            {
LABEL_121:
              int v11 = 22;
              goto LABEL_24;
            }
          }
        }

        int v28 = _platform_strcmp();
        if (*((void *)v7 + 169)) {
          _platform_strlcpy();
        }
        return v7;
    }
  }

        __int16 v50 = v209;
        if (!*((_DWORD *)v209 + 12) && (*((_DWORD *)v209 + 13) & 0x80000000) != 0 && **(_DWORD **)v209 == -2)
        {
          if ((v48 & 1) != 0) {
            return 13LL;
          }
          goto LABEL_372;
        }

        uint64_t v53 = (v48 >> 6) & 1;
        uint64_t v54 = v49 == 43;
        if (v49 == 63) {
          int v55 = 1;
        }
        else {
          int v55 = -1;
        }
        unint64_t v56 = v46 + 1;
        if ((v48 & 1) != 0)
        {
          if ((unint64_t)v56 < v47)
          {
            if (*v56 == 63)
            {
              if ((v48 & 0x100) == 0) {
                return 13LL;
              }
              uint64_t v53 = (v48 & 0x40) == 0;
              ++v46;
            }

            else if ((*v56 - 42) < 2)
            {
              return 13LL;
            }
          }
        }

        else if ((unint64_t)v56 < v47 && *v56 == 42 {
               || (unint64_t)(v46 + 2) < v47 && *v56 == 92 && v46[2] == 43)
        }
        {
          return 13LL;
        }

        if (v53) {
          ++*(_DWORD *)(a1 + 76);
        }
        *(void *)(a1 + 24) = v46 + 1;
        v151 = tre_ast_new_iter(*(void *)a1, (uint64_t)v50, v54, v55, v53);
        if (v151)
        {
          char v5 = 0LL;
          v209 = v151;
          v152 = *(_DWORD *)(a1 + 64);
          *(_DWORD *)(a1 + 64) = v152 + 1;
          *((_DWORD *)v151 + 13) = v152;
          goto LABEL_373;
        }

        return 12LL;
      }

      switch(v49)
      {
        case '{':
          if ((v48 & 1) == 0) {
            goto LABEL_372;
          }
          break;
        case '\\':
          if ((v48 & 1) != 0) {
            goto LABEL_372;
          }
          uint64_t v49 = *v46;
          if (*v46 == 43) {
            goto LABEL_147;
          }
          if (v49 != 123)
          {
            if (v49 != 63) {
              goto LABEL_372;
            }
LABEL_147:
            if ((v48 & 0x100) == 0) {
              goto LABEL_372;
            }
            *(void *)(a1 + 24) = v46;
            goto LABEL_99;
          }

          break;
        case '?':
          goto LABEL_98;
        default:
          goto LABEL_373;
      }

      uint64_t v59 = !*((_DWORD *)v209 + 12) && (*((_DWORD *)v209 + 13) & 0x80000000) != 0 && **(_DWORD **)v209 == -2;
      *(void *)(a1 + 24) = v46 + 1;
      uint64_t v60 = tre_parse_bound(a1, (uint64_t *)&v209);
      if (!(_DWORD)v60)
      {
        if (v59) {
          return 13LL;
        }
        v149 = v209;
        if (*((_DWORD *)v209 + 12) == 2)
        {
          char v5 = 0LL;
          v150 = *(_DWORD *)(a1 + 64);
          *(_DWORD *)(a1 + 64) = v150 + 1;
          *((_DWORD *)v149 + 13) = v150;
          goto LABEL_373;
        }

        goto LABEL_372;
      }

      char v5 = v60;
      if ((_DWORD)v60 != 1) {
        return v5;
      }
LABEL_140:
      char v5 = 0LL;
      char v40 = *(int **)(a1 + 24);
LABEL_141:
      unint64_t v52 = v40 - 1;
      goto LABEL_369;
    default:
      goto LABEL_372;
  }

locale_t __numeric_ctype(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(_BYTE *)(a1 + 1318) == 2) {
    return *(locale_t *)(a1 + 1368);
  }
  if (!*(_BYTE *)(a1 + 1318))
  {
    if (*(_BYTE *)(a1 + 1314)) {
      uint64_t v2 = *(const char **)(*(void *)(a1 + 1344) + 64LL);
    }
    else {
      uint64_t v2 = (const char *)&C;
    }
    if (_platform_strcmp()
      && (locale_t v3 = newlocale(2, v2, (locale_t)&__c_locale), (*(void *)(v1 + 1368) = v3) != 0LL))
    {
      *(_BYTE *)(v1 + 1318) = 2;
      return v3;
    }

    else
    {
      *(_BYTE *)(v1 + 1318) = 1;
    }
  }

  return (locale_t)v1;
}

const char *__cdecl querylocale(int a1, locale_t a2)
{
  BOOL v2 = (unint64_t)a2 + 1 >= 2 && *((void *)a2 + 163) != 0x786C6F63616C6530LL;
  if ((a1 & 0x3F) != 0
    && !v2
    && (!a2
      ? ((uint64_t v4 = __locale_key, (v5 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4)) != 0LL)
       ? (locale_t v3 = v5)
       : (locale_t v3 = (locale_t)&__global_locale))
      : a2 != (locale_t)-1LL
      ? (locale_t v3 = a2)
      : (locale_t v3 = (locale_t)&__global_locale),
        unsigned int v6 = __clz(__rbit32(a1)),
        v6 < 6))
  {
    uint64_t v8 = querylocale_mapping[v6];
    BOOL v9 = (os_unfair_lock_s *)((char *)v3 + 1296);
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 324);
    uint64_t v10 = *((void *)v3 + v8 + 165);
    if (v10) {
      __int128 v7 = (const char *)(v10 + 16);
    }
    else {
      __int128 v7 = (const char *)&C;
    }
    os_unfair_lock_unlock(v9);
  }

  else
  {
    __int128 v7 = 0LL;
    *__error() = 22;
  }

  return v7;
}

locale_t uselocale(locale_t a1)
{
  if (a1 == (locale_t)-1LL)
  {
LABEL_5:
    BOOL v2 = a1 == (locale_t)-1LL || a1 == (locale_t)&__global_locale;
    if (v2) {
      locale_t v3 = 0LL;
    }
    else {
      locale_t v3 = a1;
    }
    if (!v2)
    {
      do
        unsigned int v4 = __ldaxr((unsigned int *)a1);
      while (__stlxr(v4 + 1, (unsigned int *)a1));
    }

    uint64_t v1 = (unsigned int *)pthread_getspecific(__locale_key);
    pthread_setspecific(__locale_key, v3);
    if (v1)
    {
      do
      {
        unsigned int v5 = __ldaxr(v1);
        unsigned int v6 = v5 - 1;
      }

      while (__stlxr(v6, v1));
      if (!v6)
      {
        __int128 v7 = (void (*)(unsigned int *))*((void *)v1 + 1);
        if (v7) {
          v7(v1);
        }
      }
    }

    goto LABEL_18;
  }

  if (a1)
  {
    if (*((void *)a1 + 163) != 0x786C6F63616C6530LL)
    {
      BOOL v9 = __error();
      locale_t result = 0LL;
      *BOOL v9 = 22;
      return result;
    }

    goto LABEL_5;
  }

  uint64_t v1 = (unsigned int *)pthread_getspecific(__locale_key);
LABEL_18:
  if (v1) {
    return (locale_t)v1;
  }
  else {
    return (locale_t)-1LL;
  }
}

int ___mb_cur_max(void)
{
  uint64_t v0 = __locale_key;
  uint64_t v1 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v0);
  if (!v1) {
    uint64_t v1 = &__global_locale;
  }
  return *(_DWORD *)(v1[166] + 64LL);
}

int ___mb_cur_max_l(locale_t a1)
{
  locale_t v1 = (locale_t)&__global_locale;
  if (a1 != (locale_t)-1LL) {
    locale_t v1 = a1;
  }
  if (!a1) {
    locale_t v1 = (locale_t)&__c_locale;
  }
  return *(_DWORD *)(*((void *)v1 + 166) + 64LL);
}

uint64_t __xlocale_init()
{
  if (__locale_key == -1)
  {
    __locale_key = 10LL;
    return pthread_key_init_np();
  }

  return result;
}

uint64_t __xlocale_release(uint64_t result)
{
  if (result)
  {
    do
    {
      unsigned int v1 = __ldaxr((unsigned int *)result);
      unsigned int v2 = v1 - 1;
    }

    while (__stlxr(v2, (unsigned int *)result));
    if (!v2)
    {
      locale_t v3 = *(uint64_t (**)(void))(result + 8);
      if (v3) {
        return v3();
      }
    }
  }

  return result;
}

void destruct_locale(void *a1)
{
  for (uint64_t i = 0LL; i != 6; ++i)
  {
    uint64_t v3 = a1[i + 165];
    if (v3)
    {
      do
      {
        unsigned int v4 = __ldaxr((unsigned int *)v3);
        unsigned int v5 = v4 - 1;
      }

      while (__stlxr(v5, (unsigned int *)v3));
      if (!v5)
      {
        unsigned int v6 = *(void (**)(void))(v3 + 8);
        if (v6) {
          v6();
        }
      }
    }
  }

  uint64_t v7 = a1[171];
  if (v7)
  {
    do
    {
      unsigned int v8 = __ldaxr((unsigned int *)v7);
      unsigned int v9 = v8 - 1;
    }

    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      uint64_t v10 = *(void (**)(void))(v7 + 8);
      if (v10) {
        v10();
      }
    }
  }

  free(a1);
}

acl_t acl_dup(acl_t acl)
{
  if (((uint64_t)acl > 16 || (uint64_t)acl <= -17) && *(_DWORD *)acl == -1407532798)
  {
    unsigned int v1 = (_acl *)malloc(0x1010uLL);
    if (v1) {
      _platform_memmove();
    }
  }

  else
  {
    unsigned int v1 = 0LL;
    *__error() = 22;
  }

  return v1;
}

int acl_free(void *obj_p)
{
  return 0;
}

acl_t acl_init(int count)
{
  if (count < 0)
  {
    unsigned int v1 = __error();
    unsigned int v2 = 0LL;
    int v3 = 22;
    goto LABEL_5;
  }

  if (count >= 0x81)
  {
    unsigned int v1 = __error();
    unsigned int v2 = 0LL;
    int v3 = 12;
LABEL_5:
    *unsigned int v1 = v3;
    return v2;
  }

  unsigned int v2 = (_acl *)malloc(0x1010uLL);
  if (v2)
  {
    _platform_bzero();
    *(_DWORD *)unsigned int v2 = -1407532798;
    *((_DWORD *)v2 + 2) = -1;
  }

  return v2;
}

int acl_valid(acl_t acl)
{
  *__error() = 22;
  return -1;
}

int acl_valid_fd_np(int fd, acl_type_t type, acl_t acl)
{
  *__error() = 45;
  return -1;
}

int acl_valid_file_np(const char *path, acl_type_t type, acl_t acl)
{
  *__error() = 45;
  return -1;
}

uint64_t acl_valid_link()
{
  *__error() = 45;
  return 0xFFFFFFFFLL;
}

int acl_calc_mask(acl_t *acl_p)
{
  *__error() = 45;
  return -1;
}

int acl_copy_entry(acl_entry_t dest_d, acl_entry_t src_d)
{
  if (((uint64_t)dest_d > 16 || (uint64_t)dest_d <= -17)
    && *(_DWORD *)dest_d == -1407532799
    && ((uint64_t)src_d > 16 || (uint64_t)src_d <= -17)
    && *(_DWORD *)src_d == -1407532799
    && dest_d != src_d)
  {
    int v2 = 0;
    __int128 v3 = *((_OWORD *)src_d + 1);
    *(_OWORD *)dest_d = *(_OWORD *)src_d;
    *((_OWORD *)dest_d + 1) = v3;
  }

  else
  {
    *__error() = 22;
    return -1;
  }

  return v2;
}

int acl_create_entry_np(acl_t *acl_p, acl_entry_t *entry_p, int entry_index)
{
  acl_t v3 = *acl_p;
  BOOL v4 = (uint64_t)*acl_p > 16 || (uint64_t)v3 <= -17;
  if (!v4 || *(_DWORD *)v3 != -1407532798)
  {
    unsigned int v6 = __error();
    int v7 = 22;
    goto LABEL_10;
  }

  uint64_t v5 = *((unsigned int *)v3 + 1);
  if (v5 >= 0x80)
  {
    unsigned int v6 = __error();
    int v7 = 12;
LABEL_10:
    *unsigned int v6 = v7;
    return -1;
  }

  if (entry_index == -2) {
    LODWORD(v9) = *((_DWORD *)v3 + 1);
  }
  else {
    LODWORD(v9) = entry_index;
  }
  if (v9 > v5)
  {
    unsigned int v6 = __error();
    int v7 = 34;
    goto LABEL_10;
  }

  if ((int)v5 <= (int)v9)
  {
    uint64_t v9 = (int)v9;
  }

  else
  {
    uint64_t v9 = (int)v9;
    uint64_t v10 = (_OWORD *)((char *)v3 + 32 * v5 + 16);
    do
    {
      --v5;
      __int128 v11 = *(v10 - 1);
      *uint64_t v10 = *(v10 - 2);
      v10[1] = v11;
      v10 -= 2;
    }

    while (v5 > (int)v9);
    LODWORD(v5) = *((_DWORD *)v3 + 1);
  }

  int result = 0;
  *((_DWORD *)v3 + 1) = v5 + 1;
  __darwin_ct_rune_t v12 = (char *)v3 + 32 * v9;
  *(void *)(v12 + 20) = 0LL;
  *((void *)v12 + 2) = 2887434497LL;
  v12 += 16;
  *((_DWORD *)v12 + 7) = 0;
  *(void *)(v12 + 20) = 0LL;
  *(void *)(v12 + 12) = 0LL;
  *entry_p = (acl_entry_t)v12;
  return result;
}

int acl_create_entry(acl_t *acl_p, acl_entry_t *entry_p)
{
  return acl_create_entry_np(acl_p, entry_p, -2);
}

int acl_delete_entry(acl_t acl, acl_entry_t entry_d)
{
  if (((uint64_t)acl > 16 || (uint64_t)acl <= -17)
    && *(_DWORD *)acl == -1407532798
    && ((uint64_t)entry_d > 16 || (uint64_t)entry_d <= -17)
    && *(_DWORD *)entry_d == -1407532799
    && (int v2 = (acl_t)((char *)acl + 16), (acl_t)((char *)acl + 16) <= entry_d))
  {
    unsigned int v5 = *((_DWORD *)acl + 1) - 1;
    *((_DWORD *)acl + 1) = v5;
    uint64_t v6 = entry_d - v2;
    uint64_t v7 = (entry_d - v2) >> 5;
    if (v5 > v7)
    {
      unint64_t v8 = (unint64_t)v6 >> 5;
      uint64_t v9 = (_OWORD *)((char *)acl + 32 * (int)(v6 >> 5) + 48);
      do
      {
        __int128 v10 = v9[1];
        *(v9 - 2) = *v9;
        *(v9 - 1) = v10;
        unsigned int v5 = *((_DWORD *)acl + 1);
        v9 += 2;
        LODWORD(v8) = v8 + 1;
      }

      while (v5 > v8);
    }

    int v3 = 0;
    *((_DWORD *)acl + 8 * v5 + 4) = 0;
    uint64_t v11 = *((int *)acl + 2);
    if (v7 <= v11)
    {
      int v3 = 0;
      *((_DWORD *)acl + 2) = v11 - 1;
    }
  }

  else
  {
    *__error() = 22;
    return -1;
  }

  return v3;
}

int acl_get_entry(acl_t acl, int entry_id, acl_entry_t *entry_p)
{
  if ((uint64_t)acl <= 16 && (uint64_t)acl > -17
    || *(_DWORD *)acl != -1407532798
    || (entry_id - 1) <= 0xFFFFFFFC && (entry_id < 0 || *((_DWORD *)acl + 1) <= entry_id))
  {
    goto LABEL_14;
  }

  if (entry_id == -2)
  {
    int v3 = (char *)acl + 4;
    int v4 = -1;
  }

  else
  {
    if (entry_id != -1) {
      goto LABEL_12;
    }
    int v3 = (char *)acl + 8;
    int v4 = 1;
  }

  entry_id = *(_DWORD *)v3 + v4;
LABEL_12:
  if (entry_id >= *((_DWORD *)acl + 1))
  {
LABEL_14:
    *__error() = 22;
    return -1;
  }

  int v5 = 0;
  *entry_p = (acl_t)((char *)acl + 32 * entry_id + 16);
  *((_DWORD *)acl + 2) = entry_id;
  return v5;
}

void *__cdecl acl_get_qualifier(acl_entry_t entry_d)
{
  if (((uint64_t)entry_d > 16 || (uint64_t)entry_d <= -17)
    && *(_DWORD *)entry_d == -1407532799
    && (*((_DWORD *)entry_d + 1) - 1) <= 1)
  {
    int result = malloc(0x10uLL);
    if (result) {
      *(_OWORD *)int result = *(_OWORD *)((char *)entry_d + 8);
    }
  }

  else
  {
    int v3 = __error();
    int result = 0LL;
    *int v3 = 22;
  }

  return result;
}

int acl_get_tag_type(acl_entry_t entry_d, acl_tag_t *tag_type_p)
{
  if (((uint64_t)entry_d > 16 || (uint64_t)entry_d <= -17) && *(_DWORD *)entry_d == -1407532799)
  {
    int v2 = 0;
    *tag_type_p = *((acl_tag_t *)entry_d + 1);
  }

  else
  {
    *__error() = 22;
    return -1;
  }

  return v2;
}

int acl_set_qualifier(acl_entry_t entry_d, const void *tag_qualifier_p)
{
  if (((uint64_t)entry_d > 16 || (uint64_t)entry_d <= -17)
    && *(_DWORD *)entry_d == -1407532799
    && (*((_DWORD *)entry_d + 1) - 1) <= 1)
  {
    int v2 = 0;
    *(_OWORD *)((char *)entry_d + 8) = *(_OWORD *)tag_qualifier_p;
  }

  else
  {
    *__error() = 22;
    return -1;
  }

  return v2;
}

int acl_set_tag_type(acl_entry_t entry_d, acl_tag_t tag_type)
{
  if (((uint64_t)entry_d > 16 || (uint64_t)entry_d <= -17) && *(_DWORD *)entry_d == -1407532799 && tag_type - 1 <= 1)
  {
    int v2 = 0;
    *((_DWORD *)entry_d + 1) = tag_type;
  }

  else
  {
    *__error() = 22;
    return -1;
  }

  return v2;
}

uint64_t acl_delete_fd_np()
{
  *__error() = 45;
  return 0xFFFFFFFFLL;
}

uint64_t acl_delete_file_np()
{
  *__error() = 45;
  return 0xFFFFFFFFLL;
}

uint64_t acl_delete_link_np()
{
  *__error() = 45;
  return 0xFFFFFFFFLL;
}

acl_t acl_get_fd(int fd)
{
  return acl_get_fd_np(fd, ACL_TYPE_EXTENDED);
}

acl_t acl_get_fd_np(int fd, acl_type_t type)
{
  if (type == ACL_TYPE_EXTENDED)
  {
    acl_t result = filesec_init();
    if (result)
    {
      int v4 = result;
      uint64_t v7 = 0LL;
      if (!fstatx_np(fd, &v6, result)) {
        filesec_get_property(v4, FILESEC_ACL, &v7);
      }
      filesec_free(v4);
      return v7;
    }
  }

  else
  {
    int v5 = __error();
    acl_t result = 0LL;
    int *v5 = 22;
  }

  return result;
}

acl_t acl_get_file(const char *path_p, acl_type_t type)
{
  return acl_get_file1(path_p, type, 1);
}

_filesec *acl_get_file1(const char *a1, int a2, int a3)
{
  if (a2 == 256)
  {
    acl_t result = filesec_init();
    if (result)
    {
      stat v6 = result;
      uint64_t v9 = 0LL;
      if (a3)
      {
        if (statx_np(a1, &v8, result))
        {
LABEL_6:
          filesec_free(v6);
          return (_filesec *)v9;
        }
      }

      else if (lstatx_np(a1, &v8, result))
      {
        goto LABEL_6;
      }

      filesec_get_property(v6, FILESEC_ACL, &v9);
      goto LABEL_6;
    }
  }

  else
  {
    uint64_t v7 = __error();
    acl_t result = 0LL;
    *uint64_t v7 = 22;
  }

  return result;
}

acl_t acl_get_link_np(const char *path_p, acl_type_t type)
{
  return acl_get_file1(path_p, type, 0);
}

int acl_set_fd_np(int fd, acl_t acl, acl_type_t acl_type)
{
  acl_t v8 = acl;
  int v4 = filesec_init();
  if (!v4) {
    return -1;
  }
  int v5 = v4;
  if (filesec_set_property(v4, FILESEC_ACL, &v8))
  {
    filesec_free(v5);
    return -1;
  }

  int v7 = fchmodx_np(fd, v5);
  filesec_free(v5);
  if (v7) {
    return -1;
  }
  else {
    return 0;
  }
}

int acl_set_file(const char *path_p, acl_type_t type, acl_t acl)
{
  acl_t v8 = acl;
  int v4 = filesec_init();
  if (!v4) {
    return -1;
  }
  int v5 = v4;
  if (filesec_set_property(v4, FILESEC_ACL, &v8))
  {
    filesec_free(v5);
    return -1;
  }

  int v7 = chmodx_np(path_p, v5);
  filesec_free(v5);
  if (v7) {
    return -1;
  }
  else {
    return 0;
  }
}

int acl_set_link_np(const char *path_p, acl_type_t type, acl_t acl)
{
  if (lstat(path_p, &v7) < 0) {
    return -1;
  }
  if ((v7.st_mode & 0xF000) == 0xA000)
  {
    *__error() = 45;
    return -1;
  }

  return acl_set_file(path_p, v5, acl);
}

int acl_delete_def_file(const char *path_p)
{
  *__error() = 45;
  return -1;
}

int acl_add_flag_np(acl_flagset_t flagset_d, acl_flag_t flag)
{
  *(_DWORD *)flagset_d |= flag;
  return 0;
}

int acl_clear_flags_np(acl_flagset_t flagset_d)
{
  *(_DWORD *)flagset_d = 0;
  return 0;
}

int acl_delete_flag_np(acl_flagset_t flagset_d, acl_flag_t flag)
{
  *(_DWORD *)flagset_d &= ~flag;
  return 0;
}

int acl_get_flag_np(acl_flagset_t flagset_d, acl_flag_t flag)
{
  return (*(_DWORD *)flagset_d & flag) != 0;
}

int acl_get_flagset_np(void *obj_p, acl_flagset_t *flagset_p)
{
  if (*(_DWORD *)obj_p == -1407532799)
  {
    int v2 = (_acl_flagset *)((char *)obj_p + 24);
    goto LABEL_8;
  }

  if (*(_DWORD *)obj_p != -1407532798)
  {
LABEL_6:
    *__error() = 22;
    return -1;
  }

  int v2 = (_acl_flagset *)((char *)obj_p + 12);
LABEL_8:
  int result = 0;
  *flagset_p = v2;
  return result;
}

int acl_set_flagset_np(void *obj_p, acl_flagset_t flagset_d)
{
  if (*(_DWORD *)obj_p == -1407532799)
  {
    int v2 = 0;
    *((_DWORD *)obj_p + 6) = *(_DWORD *)flagset_d;
    return v2;
  }

  if (*(_DWORD *)obj_p == -1407532798)
  {
    int v2 = 0;
    *((_DWORD *)obj_p + 3) = *(_DWORD *)flagset_d;
  }

  else
  {
LABEL_6:
    *__error() = 22;
    return -1;
  }

  return v2;
}

int acl_add_perm(acl_permset_t permset_d, acl_perm_t perm)
{
  if ((perm & 0xFFEFC001) != 0)
  {
    *__error() = 22;
    return -1;
  }

  else
  {
    int result = 0;
    *(_DWORD *)permset_d |= perm;
  }

  return result;
}

int acl_clear_perms(acl_permset_t permset_d)
{
  *(_DWORD *)permset_d = 0;
  return 0;
}

int acl_delete_perm(acl_permset_t permset_d, acl_perm_t perm)
{
  if ((perm & 0xFFEFC001) != 0)
  {
    *__error() = 22;
    return -1;
  }

  else
  {
    int result = 0;
    *(_DWORD *)permset_d &= ~perm;
  }

  return result;
}

int acl_get_perm_np(acl_permset_t permset_d, acl_perm_t perm)
{
  if ((perm & 0xFFEFC001) == 0) {
    return (*(_DWORD *)permset_d & perm) != 0;
  }
  *__error() = 22;
  return -1;
}

int acl_get_permset(acl_entry_t entry_d, acl_permset_t *permset_p)
{
  if (((uint64_t)entry_d > 16 || (uint64_t)entry_d <= -17) && *(_DWORD *)entry_d == -1407532799)
  {
    int v2 = 0;
    *permset_p = (acl_entry_t)((char *)entry_d + 28);
  }

  else
  {
    *__error() = 22;
    return -1;
  }

  return v2;
}

int acl_set_permset(acl_entry_t entry_d, acl_permset_t permset_d)
{
  if (((uint64_t)entry_d > 16 || (uint64_t)entry_d <= -17) && *(_DWORD *)entry_d == -1407532799)
  {
    int v2 = 0;
    *((_DWORD *)entry_d + 7) = *(_DWORD *)permset_d;
  }

  else
  {
    *__error() = 22;
    return -1;
  }

  return v2;
}

int acl_maximal_permset_mask_np(acl_permset_mask_t *mask_p)
{
  *mask_p = 1064958LL;
  return 0;
}

int acl_get_permset_mask_np(acl_entry_t entry_d, acl_permset_mask_t *mask_p)
{
  if (((uint64_t)entry_d > 16 || (uint64_t)entry_d <= -17) && *(_DWORD *)entry_d == -1407532799)
  {
    int v2 = 0;
    *mask_p = *((unsigned int *)entry_d + 7);
  }

  else
  {
    *__error() = 22;
    return -1;
  }

  return v2;
}

int acl_set_permset_mask_np(acl_entry_t entry_d, acl_permset_mask_t mask)
{
  if (((uint64_t)entry_d > 16 || (uint64_t)entry_d <= -17)
    && *(_DWORD *)entry_d == -1407532799
    && (mask & 0xFFFFFFFFFFEFC001LL) == 0)
  {
    int v2 = 0;
    *((_DWORD *)entry_d + 7) = mask;
  }

  else
  {
    *__error() = 22;
    return -1;
  }

  return v2;
}

ssize_t acl_copy_ext(void *buf_p, acl_t acl, ssize_t size)
{
  ssize_t v6 = acl_size(acl);
  if (v6 < 0) {
    return -1LL;
  }
  ssize_t v7 = v6;
  if (v6 > size)
  {
    *__error() = 34;
    return -1LL;
  }

  _platform_bzero();
  *(_DWORD *)buf_p = 1841376257;
  if (acl == (acl_t)1)
  {
    *((_DWORD *)buf_p + 9) = -1;
  }

  else
  {
    unsigned int v9 = *((_DWORD *)acl + 1);
    unsigned int v10 = bswap32(*((_DWORD *)acl + 3));
    *((_DWORD *)buf_p + 9) = bswap32(v9);
    *((_DWORD *)buf_p + 10) = v10;
    if (v9)
    {
      unint64_t v11 = 0LL;
      __darwin_ct_rune_t v12 = (char *)buf_p + 64;
      unsigned int v13 = (char *)acl + 24;
      do
      {
        *(_OWORD *)(v12 - 5) = *(_OWORD *)v13;
        unsigned int v14 = *((_DWORD *)v13 + 5);
        *(v12 - 1) = bswap32(*((_DWORD *)v13 + 4) & 0xFFFFFFF0 | *((_DWORD *)v13 - 1) & 0xF);
        *__darwin_ct_rune_t v12 = bswap32(v14);
        v12 += 6;
        ++v11;
        v13 += 32;
      }

      while (v11 < *((unsigned int *)acl + 1));
    }
  }

  return v7;
}

ssize_t acl_size(acl_t acl)
{
  if (acl == (acl_t)1) {
    return 44LL;
  }
  *__error() = 22;
  return -1LL;
}

ssize_t acl_copy_ext_native(void *buf_p, acl_t acl, ssize_t size)
{
  ssize_t v6 = acl_size(acl);
  if (v6 < 0) {
    return -1LL;
  }
  ssize_t v7 = v6;
  if (v6 > size)
  {
    *__error() = 34;
    return -1LL;
  }

  _platform_bzero();
  *(_DWORD *)buf_p = 19710317;
  if (acl == (acl_t)1)
  {
    *((_DWORD *)buf_p + 9) = -1;
  }

  else
  {
    int v9 = *((_DWORD *)acl + 1);
    int v10 = *((_DWORD *)acl + 3);
    *((_DWORD *)buf_p + 9) = v9;
    *((_DWORD *)buf_p + 10) = v10;
    if (v9)
    {
      unint64_t v11 = 0LL;
      __darwin_ct_rune_t v12 = (char *)buf_p + 64;
      unsigned int v13 = (char *)acl + 24;
      do
      {
        *(_OWORD *)(v12 - 5) = *(_OWORD *)v13;
        int v14 = *((_DWORD *)v13 + 5);
        *(v12 - 1) = *((_DWORD *)v13 + 4) & 0xFFFFFFF0 | *((_DWORD *)v13 - 1) & 0xF;
        *__darwin_ct_rune_t v12 = v14;
        ++v11;
        v12 += 6;
        v13 += 32;
      }

      while (v11 < *((unsigned int *)acl + 1));
    }
  }

  return v7;
}

acl_t acl_copy_int(const void *buf_p)
{
  if (*(_DWORD *)buf_p == 1841376257)
  {
    acl_t result = acl_init(bswap32(*((_DWORD *)buf_p + 9)));
    if (result)
    {
      unsigned int v3 = *((_DWORD *)buf_p + 9);
      *((_DWORD *)result + 3) = bswap32(*((_DWORD *)buf_p + 10));
      unint64_t v4 = bswap32(v3);
      *((_DWORD *)result + 1) = v4;
      if (v3)
      {
        unint64_t v5 = 0LL;
        ssize_t v6 = (char *)result + 24;
        ssize_t v7 = (unsigned int *)((char *)buf_p + 64);
        do
        {
          *((_DWORD *)v6 - 2) = -1407532799;
          *(_OWORD *)ssize_t v6 = *(_OWORD *)(v7 - 5);
          unsigned int v8 = *(v7 - 1);
          *((_DWORD *)v6 - 1) = HIBYTE(v8) & 0xF;
          unsigned int v9 = *v7;
          v7 += 6;
          *((_DWORD *)v6 + 4) = bswap32(v8 & 0xF0FFFFFF);
          *((_DWORD *)v6 + 5) = bswap32(v9);
          ++v5;
          v6 += 32;
        }

        while (v5 < v4);
      }
    }
  }

  else
  {
    int v10 = __error();
    acl_t result = 0LL;
    *int v10 = 22;
  }

  return result;
}

acl_t acl_copy_int_native(const void *buf_p)
{
  if (*(_DWORD *)buf_p == 19710317)
  {
    acl_t result = acl_init(*((_DWORD *)buf_p + 9));
    if (result)
    {
      unint64_t v3 = *((unsigned int *)buf_p + 9);
      *((_DWORD *)result + 3) = *((_DWORD *)buf_p + 10);
      *((_DWORD *)result + 1) = v3;
      if ((_DWORD)v3)
      {
        unint64_t v4 = 0LL;
        unint64_t v5 = (char *)result + 24;
        ssize_t v6 = (int *)((char *)buf_p + 64);
        do
        {
          *((_DWORD *)v5 - 2) = -1407532799;
          *(_OWORD *)unint64_t v5 = *(_OWORD *)(v6 - 5);
          int v7 = *(v6 - 1);
          *((_DWORD *)v5 - 1) = v7 & 0xF;
          int v8 = *v6;
          v6 += 6;
          *((_DWORD *)v5 + 4) = v7 & 0xFFFFFFF0;
          *((_DWORD *)v5 + 5) = v8;
          ++v4;
          v5 += 32;
        }

        while (v4 < v3);
      }
    }
  }

  else
  {
    unsigned int v9 = __error();
    acl_t result = 0LL;
    *unsigned int v9 = 22;
  }

  return result;
}

acl_t acl_from_text(const char *buf_p)
{
  acl_permset_t permset_p = 0LL;
  acl_flagset_t flagset_p = 0LL;
  if (!buf_p)
  {
    stat v42 = __error();
    acl_t result = 0LL;
    *stat v42 = 22;
    return result;
  }

  acl_t result = (acl_t)strdup(buf_p);
  __stringp = (char *)result;
  if (result)
  {
    acl_t v2 = result;
    acl_t result = acl_init(1);
    obj_p = result;
    if (result)
    {
      unint64_t v3 = strsep(&__stringp, "\n");
      __int16 v50 = v3;
      if (v3
        && *v3
        && ((__str = strsep(&v50, " "), !*__str) || !_platform_strncmp())
        && (__str = strsep(&v50, " "), *__error() = 0, __str)
        && *__str
        && strtol(__str, 0LL, 0) == 1)
      {
        unint64_t v4 = strsep(&v50, " ");
        __str = v4;
        if (v4)
        {
          if (*v4)
          {
            acl_get_flagset_np(obj_p, &flagset_p);
            unint64_t v5 = strsep(&__str, ",");
            if (v5)
            {
              ssize_t v6 = v5;
              do
              {
                if (!*v6) {
                  break;
                }
                int v7 = 0;
                int v8 = &off_18965C7F0;
                while (v7 != 1 && v7 != 6)
                {
                  if (v7 == 7) {
                    goto LABEL_103;
                  }
LABEL_22:
                  v8 += 3;
                  ++v7;
                }

                acl_add_flag_np(flagset_p, *((acl_flag_t *)v8 - 2));
                ssize_t v6 = strsep(&__str, ",");
              }

              while (v6);
            }
          }
        }

        unsigned int v9 = strsep(&__stringp, "\n");
        __int16 v50 = v9;
        if (!v9)
        {
          free(v2);
          return (acl_t)obj_p;
        }

        int v10 = 0LL;
        unint64_t v11 = ":";
        __darwin_ct_rune_t v12 = "group";
        unsigned int v13 = ",";
        while (*v9)
        {
          __str = strsep(&v50, v11);
          if (v10)
          {
            *(void *)int v10 = 0LL;
            *((void *)v10 + 1) = 0LL;
          }

          else
          {
            int v10 = (unsigned __int8 *)calloc(1uLL, 0x10uLL);
            if (!v10)
            {
              int v41 = *__error();
              goto LABEL_110;
            }
          }

          if (acl_create_entry((acl_t *)&obj_p, &entry_p)
            || acl_get_flagset_np(entry_p, &flagset_p) == -1
            || acl_get_permset(entry_p, &permset_p) == -1)
          {
            int v41 = *__error();
            goto LABEL_109;
          }

          int v14 = *__str;
          if (v14 == 103)
          {
            else {
              int v15 = 1;
            }
          }

          else
          {
            if (v14 != 117) {
              goto LABEL_101;
            }
            else {
              int v15 = 0;
            }
          }

          int v16 = strsep(&v50, v11);
          __str = v16;
          if (v16 && *v16)
          {
            uuid_parse(v16, v10);
            int v17 = 0;
          }

          else
          {
            int v17 = 1;
          }

          int v18 = strsep(&v50, v11);
          __str = v18;
          if (v18)
          {
            char v19 = v17 ^ 1;
            if (!*v18) {
              char v19 = 1;
            }
            if ((v19 & 1) == 0)
            {
              if (v15 == 1)
              {
                int v21 = getgrnam(v18);
                if (v21 && mbr_gid_to_uuid(v21->gr_gid, v10))
                {
LABEL_101:
                  int v41 = 22;
LABEL_109:
                  free(v10);
                  goto LABEL_110;
                }
              }

              else
              {
                if (v15) {
                  goto LABEL_101;
                }
                int v20 = getpwnam(v18);
                if (v20)
                {
                  if (mbr_uid_to_uuid(v20->pw_uid, v10)) {
                    goto LABEL_101;
                  }
                }
              }

              int v17 = 0;
            }
          }

          int v22 = strsep(&v50, v11);
          __str = v22;
          if (v22 && v17 && *v22)
          {
            gid_t v23 = strtol(v22, 0LL, 10);
            if (v15 == 1)
            {
              char v40 = getgrgid(v23);
              if (v40 && mbr_gid_to_uuid(v40->gr_gid, v10)) {
                goto LABEL_101;
              }
            }

            else if (!v15)
            {
              uint64_t v24 = getpwuid(v23);
              if (v24)
              {
                if (mbr_uid_to_uuid(v24->pw_uid, v10)) {
                  goto LABEL_101;
                }
              }
            }
          }

          else if (v17)
          {
            goto LABEL_101;
          }

          unsigned int v25 = strsep(&v50, v11);
          __str = v25;
          if (!v25 || !*v25) {
            goto LABEL_101;
          }
          unsigned int v26 = strsep(&__str, v13);
          if (v26)
          {
            int v27 = v26;
            acl_tag_t v28 = ACL_UNDEFINED_TAG;
LABEL_70:
            uint64_t v29 = v27;
            acl_tag_t v43 = v28;
            while (*v29)
            {
              if (v28 == ACL_UNDEFINED_TAG)
              {
                if (_platform_strcmp())
                {
                  if (_platform_strcmp())
                  {
LABEL_107:
                    int v41 = 22;
                    goto LABEL_108;
                  }

                  acl_tag_t v28 = ACL_EXTENDED_DENY;
                }

                else
                {
                  acl_tag_t v28 = ACL_EXTENDED_ALLOW;
                }

                int v27 = strsep(&__str, v13);
                if (v27) {
                  goto LABEL_70;
                }
                break;
              }

              int v30 = v11;
              uint64_t v31 = v13;
              int v32 = v12;
              uint64_t v33 = 0LL;
              uint64_t v34 = &off_18965C808;
              while (((0xC2uLL >> v33) & 1) != 0 || _platform_strcmp())
              {
                ++v33;
                v34 += 3;
                if (v33 == 7) {
                  goto LABEL_107;
                }
              }

              acl_add_flag_np(flagset_p, *((acl_flag_t *)v34 - 8));
              unsigned int v13 = v31;
              uint64_t v29 = strsep(&__str, v31);
              __darwin_ct_rune_t v12 = v32;
              unint64_t v11 = v30;
              acl_tag_t v28 = v43;
              if (!v29) {
                break;
              }
            }
          }

          else
          {
            acl_tag_t v28 = ACL_UNDEFINED_TAG;
          }

          uint64_t v35 = strsep(&v50, v11);
          __str = v35;
          if (v35)
          {
            if (*v35)
            {
              uint64_t v36 = strsep(&__str, v13);
              if (v36)
              {
                int v37 = v36;
                acl_tag_t v44 = v28;
                do
                {
                  if (!*v37) {
                    break;
                  }
                  unsigned int v38 = v13;
                  uint64_t v39 = 0LL;
                  while (_platform_strcmp())
                  {
                    v39 += 6LL;
                    if (v39 == 84) {
                      goto LABEL_107;
                    }
                  }

                  acl_add_perm(permset_p, (acl_perm_t)acl_perms[v39]);
                  unsigned int v13 = v38;
                  int v37 = strsep(&__str, v38);
                  acl_tag_t v28 = v44;
                }

                while (v37);
              }
            }
          }

          acl_set_tag_type(entry_p, v28);
          acl_set_qualifier(entry_p, v10);
          unsigned int v9 = strsep(&__stringp, "\n");
          __int16 v50 = v9;
          if (!v9) {
            break;
          }
        }

        int v41 = 0;
LABEL_108:
        if (v10) {
          goto LABEL_109;
        }
LABEL_110:
        free(v2);
        if (!v41) {
          return (acl_t)obj_p;
        }
      }

      else
      {
LABEL_103:
        free(v2);
        int v41 = 22;
      }

      acl_free(obj_p);
      obj_p = 0LL;
      *__error() = v41;
      return (acl_t)obj_p;
    }
  }

  return result;
}

char *__cdecl acl_to_text(acl_t acl, ssize_t *len_p)
{
  acl_t v2 = len_p;
  acl_entry_t entry_p = 0LL;
  uint64_t v29 = 1024LL;
  if ((uint64_t)acl <= 16 && (uint64_t)acl > -17 || *(_DWORD *)acl != -1407532798)
  {
    ssize_t v6 = __error();
    acl_t result = 0LL;
    int v7 = 22;
    goto LABEL_72;
  }

  if (!len_p)
  {
    MEMORY[0x1895FE128](acl, 0LL);
    acl_t v2 = &v27;
  }

  *acl_t v2 = 0LL;
  acl_tag_t v28 = (char *)malloc(0x400uLL);
  if (!v28) {
    goto LABEL_71;
  }
  if (!acl_get_flagset_np(acl, &flagset_p))
  {
    int v8 = 0;
    int v9 = 0;
    for (uint64_t i = (const char **)&off_18965C7F0; ; i += 3)
    {
      if (v8 == 1 || v8 == 6)
      {
        if (acl_get_flag_np(flagset_p, *((acl_flag_t *)i - 2)))
        {
          if (v9) {
            unint64_t v11 = ",";
          }
          else {
            unint64_t v11 = " ";
          }
          ++v9;
        }
      }

      else if (v8 == 7)
      {
        break;
      }

      ++v8;
    }
  }

  if (entry_p) {
    int v4 = -1;
  }
  else {
    int v4 = 0;
  }
  if (acl_get_entry(acl, v4, &entry_p))
  {
LABEL_13:
    return v28;
  }

  while (1)
  {
    qualifier = acl_get_qualifier(entry_p);
    if (qualifier) {
      break;
    }
LABEL_33:
    if (entry_p) {
      int v14 = -1;
    }
    else {
      int v14 = 0;
    }
    if (acl_get_entry(acl, v14, &entry_p)) {
      goto LABEL_13;
    }
  }

  unsigned int v13 = qualifier;
  if (acl_get_tag_type(entry_p, &tag_type_p)
    || acl_get_flagset_np(entry_p, &flagset_p)
    || acl_get_permset(entry_p, &permset_p))
  {
    acl_free(v13);
    goto LABEL_33;
  }

  uuid_unparse_upper((const unsigned __int8 *)v13, out);
  if (id_type == 1)
  {
    gid_t v23 = (const char **)getgrgid(uid_or_gid);
    if (v23) {
      goto LABEL_63;
    }
  }

  else
  {
    if (id_type) {
      goto LABEL_39;
    }
    gid_t v23 = (const char **)getpwuid(uid_or_gid);
    if (!v23) {
      goto LABEL_39;
    }
LABEL_63:
    uint64_t v24 = strdup(*v23);
    if (v24)
    {
      int v17 = v24;
      unsigned int v25 = "group";
      if (!id_type) {
        unsigned int v25 = "user";
      }
      unsigned int v26 = "deny";
      if (tag_type_p == ACL_EXTENDED_ALLOW) {
        unsigned int v26 = "allow";
      }
      int v16 = raosnprintf((void **)&v28, &v29, v2, "\n%s:%s:%s:%d:%s", v25, out, v24, uid_or_gid, v26);
      goto LABEL_43;
    }
  }

LABEL_39:
  if (tag_type_p == ACL_EXTENDED_ALLOW) {
    int v15 = "allow";
  }
  else {
    int v15 = "deny";
  }
  int v16 = raosnprintf((void **)&v28, &v29, v2, "\nuser:%s:::%s", out, v15);
  int v17 = 0LL;
LABEL_43:
  free(v17);
  acl_free(v13);
  if (v16)
  {
    uint64_t v18 = 0LL;
    char v19 = (const char **)&off_18965C7F0;
    while (((0xC2uLL >> v18) & 1) != 0
         || !acl_get_flag_np(flagset_p, *((acl_flag_t *)v19 - 2))
         || raosnprintf((void **)&v28, &v29, v2, ",%s", *v19))
    {
      ++v18;
      v19 += 3;
      if (v18 == 7)
      {
        uint64_t v20 = 0LL;
        int v21 = 0;
        while (1)
        {
          if (acl_get_perm_np(permset_p, (acl_perm_t)acl_perms[v20]))
          {
            if (v21) {
              int v22 = ",";
            }
            else {
              int v22 = ":";
            }
            ++v21;
          }

          v20 += 6LL;
          if (v20 == 84) {
            goto LABEL_33;
          }
        }
      }
    }
  }

  *__error() = 7;
  return 0xFFFFFFFFLL;
}

LABEL_69:
  if (v28) {
    free(v28);
  }
LABEL_71:
  ssize_t v6 = __error();
  acl_t result = 0LL;
  int v7 = 12;
LABEL_72:
  *ssize_t v6 = v7;
  return result;
}

  free(v11);
  free(v10);
  *__error() = v8;
  return v12;
}

            *__error() = 0;
            int v21 = ((uint64_t (*)(DIR *))v27)(v41);
            if (!v21) {
              goto LABEL_70;
            }
          }

          int v21 = 0xFFFFFFFFLL;
          int v37 = 7;
LABEL_72:
          *__error() = v37;
LABEL_73:
          uint64_t v36 = 0;
        }

        else
        {
LABEL_70:
          uint64_t v36 = 1;
        }

        unsigned int v38 = *__error();
        if ((*(_BYTE *)(a5 + 24) & 0x40) != 0) {
          (*(void (**)(DIR *))(a5 + 48))(v41);
        }
        else {
          closedir(v41);
        }
        *__error() = v38;
        if ((_DWORD)v21) {
          return v21;
        }
        if (v36)
        {
          if (*__error())
          {
            __error();
            int v21 = err_aborted(a5, (uint64_t)v44);
            if ((_DWORD)v21) {
              return v21;
            }
          }
        }

        if (*__error()) {
          return 0LL;
        }
        uint64_t v20 = __error();
        int v21 = 0LL;
LABEL_83:
        int v22 = v39;
        goto LABEL_19;
      }

      if (*__error() != 2 && *__error() != 20)
      {
        __error();
        int v21 = err_aborted(a5, (uint64_t)v44);
        if (*__error()) {
          return v21;
        }
        uint64_t v20 = __error();
        goto LABEL_83;
      }

      return 0LL;
    }

    uint64_t v18 = &a2[v15];
    if ((v13 & 0xFFFFFFBFFFFFFFFFLL) == 0x2F) {
      break;
    }
    a2 = v18;
LABEL_16:
    int v14 = v17;
    if (!v13) {
      goto LABEL_17;
    }
  }

  while (1)
  {
    a2 = v18 + 1;
    *uint64_t v18 = v13;
    char v19 = v17[1];
    ++v17;
    unsigned int v13 = v19;
    ++v18;
    if ((v19 & 0xFFFFFFBFFFFFFFFFLL) != 0x2F) {
      goto LABEL_16;
    }
  }

uint64_t raosnprintf(void **a1, uint64_t *a2, void *a3, char *__format, ...)
{
  while (1)
  {
    uint64_t v8 = *a2;
    if (*a3 < (unint64_t)*a2)
    {
      uint64_t result = vsnprintf((char *)*a1 + *a3, *a2 - *a3, __format, va);
      uint64_t v8 = *a2;
    }

    int v10 = *a1;
    *a2 = 2 * v8;
    uint64_t result = (uint64_t)reallocf(v10, 2 * v8);
    *a1 = (void *)result;
    if (!result) {
      return result;
    }
  }

  *a3 += (int)result;
  return result;
}

uint64_t _subsystem_init()
{
  uint64_t result = _simple_getenv();
  if (result) {
    subsystem_root_path = result;
  }
  return result;
}

uint64_t open_with_subsystem(uint64_t a1, __int16 a2)
{
  if ((a2 & 0x200) != 0)
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }

  else
  {
    uint64_t v2 = open_NOCANCEL();
    if ((v2 & 0x80000000) != 0)
    {
      unint64_t v3 = __error();
      uint64_t v4 = subsystem_root_path;
      if (*v3 == 2 && subsystem_root_path != 0)
      {
        while (1)
        {
          uint64_t next_subsystem_root_path = extract_next_subsystem_root_path((uint64_t)v8, v4);
          uint64_t v2 = open_NOCANCEL();
          if ((v2 & 0x80000000) == 0) {
            return v2;
          }
          __error();
          if (!next_subsystem_root_path) {
            return v2;
          }
          uint64_t v4 = next_subsystem_root_path;
        }

        *__error() = 63;
      }
    }
  }

  return v2;
}

uint64_t extract_next_subsystem_root_path(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = _platform_strlen();
  uint64_t v5 = _platform_memchr();
  if (v5) {
    unint64_t v4 = v5 - a2;
  }
  if (v4 > 0x3FF) {
    return 0LL;
  }
  uint64_t v7 = v5;
  _platform_memmove();
  *(_BYTE *)(a1 + v4) = 0;
  if (v7) {
    return v7 + 1;
  }
  else {
    return 0LL;
  }
}

uint64_t stat_with_subsystem(const char *a1, stat *a2)
{
  uint64_t v3 = stat(a1, a2);
  if ((v3 & 0x80000000) != 0)
  {
    unint64_t v4 = __error();
    uint64_t v5 = subsystem_root_path;
    if (*v4 == 2 && subsystem_root_path != 0)
    {
      while (1)
      {
        uint64_t next_subsystem_root_path = extract_next_subsystem_root_path((uint64_t)v9, v5);
        uint64_t v3 = stat(v9, a2);
        if ((v3 & 0x80000000) == 0) {
          return v3;
        }
        __error();
        if (!next_subsystem_root_path) {
          return v3;
        }
        uint64_t v5 = next_subsystem_root_path;
      }

      *__error() = 63;
    }
  }

  return v3;
}

tm *__cdecl getdate(const char *a1)
{
  uint64_t v2 = getenv("DATEMSK");
  if (!v2 || (uint64_t v3 = v2, !*v2))
  {
    int v14 = 0LL;
    getdate_err = 1;
    return v14;
  }

  int v4 = *__error();
  uint64_t v5 = fopen(v3, "r");
  if (!v5)
  {
    getdate_err = 2;
    int v15 = __error();
    int v14 = 0LL;
    goto LABEL_29;
  }

  ssize_t v6 = v5;
  int v7 = fileno(v5);
  if (fstat(v7, &v31) < 0)
  {
    int v14 = 0LL;
    int v16 = &get_clock_last;
    int v17 = 3;
LABEL_27:
    *((_DWORD *)v16 + 237) = v17;
    goto LABEL_28;
  }

  if ((v31.st_mode & 0xF000) != 0x8000)
  {
    int v14 = 0LL;
    int v16 = &get_clock_last;
    int v17 = 4;
    goto LABEL_27;
  }

  uint64_t v8 = malloc(0x400uLL);
  if (!v8)
  {
    int v14 = 0LL;
    int v16 = &get_clock_last;
    int v17 = 6;
    goto LABEL_27;
  }

  int v9 = 0;
  size_t v10 = 1024LL;
LABEL_8:
  unint64_t v11 = v8;
  do
  {
    if (fgets((char *)v11 + v9, (int)v10 - v9, v6))
    {
      int v12 = _platform_strlen();
      int v9 = v12;
      if (v10 - 1 == v12 && *((_BYTE *)v11 + v12 - 1) != 10)
      {
        v10 += 1024LL;
        uint64_t v8 = realloc(v11, v10);
        if (!v8)
        {
          int v13 = 6;
LABEL_73:
          int v14 = 0LL;
          getdate_err = v13;
          goto LABEL_74;
        }

        goto LABEL_8;
      }
    }

    else
    {
      if (ferror(v6))
      {
        int v13 = 5;
        goto LABEL_73;
      }

      if (!v9)
      {
        int v13 = 7;
        goto LABEL_73;
      }

      int v9 = _platform_strlen();
    }

    if (*((_BYTE *)v11 + v9 - 1) == 10) {
      *((_BYTE *)v11 + v9 - 1) = 0;
    }
    getdate_tuint64_t m = tmundef;
    *(_OWORD *)&qword_18C52BFC0 = unk_180498760;
    xmmword_18C52BFD0 = xmmword_180498770;
    qword_18C52BFE0 = 0LL;
    int v9 = 0;
  }

  while (!strptime(a1, (const char *)v11, (tm *)&getdate_tm));
  time(&v32);
  char v19 = localtime(&v32);
  if (DWORD1(getdate_tm) == -1) {
    int v20 = getdate_tm != -1;
  }
  else {
    int v20 = ((_DWORD)getdate_tm != -1) | 2;
  }
  int tm_hour = DWORD2(getdate_tm);
  if (DWORD2(getdate_tm) != -1) {
    v20 |= 4u;
  }
  int v22 = HIDWORD(getdate_tm) != -1;
  tm_mouint64_t n = qword_18C52BFC0;
  if ((_DWORD)qword_18C52BFC0 != -1) {
    v22 |= 2u;
  }
  if (HIDWORD(qword_18C52BFC0) == -1) {
    int v24 = v22;
  }
  else {
    int v24 = v22 | 4;
  }
  int v25 = dword_18C52BFC8;
  switch(v20)
  {
    case 0:
      *(void *)&getdate_tuint64_t m = *(void *)&v19->tm_sec;
      int tm_hour = v19->tm_hour;
      DWORD2(getdate_tm) = tm_hour;
      break;
    case 1:
      int tm_hour = v19->tm_hour;
      DWORD2(getdate_tm) = tm_hour;
      tm_miuint64_t n = v19->tm_min;
      DWORD1(getdate_tm) = tm_min;
      break;
    case 2:
      int tm_hour = v19->tm_hour;
      DWORD2(getdate_tm) = tm_hour;
      if (SDWORD1(getdate_tm) < v19->tm_min) {
        DWORD2(getdate_tm) = ++tm_hour;
      }
      goto LABEL_49;
    case 3:
      int tm_hour = v19->tm_hour;
      DWORD2(getdate_tm) = tm_hour;
      break;
    case 4:
      *(void *)&getdate_tuint64_t m = 0LL;
      break;
    case 5:
      DWORD1(getdate_tm) = 0;
      break;
    case 6:
LABEL_49:
      LODWORD(getdate_tm) = 0;
      break;
    default:
      break;
  }

  switch(v24)
  {
    case 0:
      int tm_mday = v19->tm_mday;
      HIDWORD(getdate_tm) = tm_mday;
      if (tm_hour < v19->tm_hour) {
        HIDWORD(getdate_tm) = tm_mday + 1;
      }
      qword_18C52BFC0 = *(void *)&v19->tm_mon;
      tm_mouint64_t n = qword_18C52BFC0;
      break;
    case 1:
      qword_18C52BFC0 = *(void *)&v19->tm_mon;
      int v29 = v19->tm_mday;
      tm_mouint64_t n = qword_18C52BFC0;
      goto LABEL_67;
    case 2:
    case 3:
      int tm_year = v19->tm_year;
      HIDWORD(qword_18C52BFC0) = tm_year;
      if ((v24 & 1) != 0) {
        break;
      }
      goto LABEL_61;
    case 4:
    case 6:
      if ((v24 & 2) == 0)
      {
        tm_mouint64_t n = 0;
        LODWORD(qword_18C52BFC0) = 0;
      }

LABEL_61:
      HIDWORD(getdate_tm) = 1;
      break;
    case 5:
      tm_mouint64_t n = v19->tm_mon;
      LODWORD(qword_18C52BFC0) = tm_mon;
      int v29 = v19->tm_mday;
LABEL_67:
      if (SHIDWORD(getdate_tm) < v29) {
        LODWORD(qword_18C52BFC0) = ++tm_mon;
      }
      break;
    default:
      break;
  }

  dword_18C52BFC8 = v19->tm_wday;
  *((void *)&xmmword_18C52BFD0 + 1) = v19->tm_gmtoff;
  LODWORD(xmmword_18C52BFD0) = -1;
  if (mktime((tm *)&getdate_tm) == -1 || (v24 & 2) != 0 && (_DWORD)qword_18C52BFC0 != tm_mon) {
    goto LABEL_72;
  }
  int v14 = (tm *)&getdate_tm;
  if (v25 != -1 && v24 != 7)
  {
    int v30 = v25 - dword_18C52BFC8;
    if (v25 < dword_18C52BFC8) {
      int v30 = v25 - dword_18C52BFC8 + 7;
    }
    HIDWORD(getdate_tm) += v30;
    if (mktime((tm *)&getdate_tm) == -1)
    {
LABEL_72:
      int v13 = 8;
      goto LABEL_73;
    }
  }

        a2 += v14;
        int v21 = v27;
        if (result == v27) {
          goto LABEL_79;
        }
        if ((a3 & 0x10) != 0)
        {
          if (result > 0x7F)
          {
            int v22 = ___tolower_l(result, v8);
            int v21 = v27;
          }

          else
          {
            int v22 = _DefaultRuneLocale.__maplower[result];
          }

          gid_t v23 = v21 > 0x7F ? ___tolower_l(v21, v8) : _DefaultRuneLocale.__maplower[v21];
          if (v22 == v23) {
            goto LABEL_79;
          }
        }

LABEL_74:
  free(v11);
LABEL_28:
  fclose(v6);
  int v15 = __error();
LABEL_29:
  *int v15 = v4;
  return v14;
}

          *v37++ = 34;
          if ((v34 & 0x40) != 0) {
            goto LABEL_57;
          }
          goto LABEL_56;
        }

        int v25 = v65;
        if (v64 && !*v64)
        {
          gid_t v23 = 0LL;
          *__error() = 28;
          int v21 = 0xFFFFFFFFLL;
        }

        else
        {
          gid_t v23 = 0LL;
          int v21 = 0LL;
          *int v20 = 0;
        }

        char v19 = v66;
LABEL_111:
        int v24 = v62;
LABEL_112:
        free(v23);
        gid_t v23 = v25;
        int v25 = v19;
        char v19 = v24;
LABEL_113:
        free(v23);
        free(v25);
        free(v19);
        return v21;
      }

      int v22 = (char *)calloc((16 * v17) | 1, 1uLL);
      if (v22)
      {
        int v20 = v22;
        *a1 = v22;
        uint64_t v62 = (__int32 *)v22;
        goto LABEL_15;
      }
    }

    gid_t v23 = 0LL;
    int v24 = 0LL;
    int v21 = 0xFFFFFFFFLL;
    int v25 = v65;
    goto LABEL_112;
  }

  return 0xFFFFFFFFLL;
}

uint64_t _st_get_timezone()
{
  return timezone;
}

uint64_t _st_set_timezone(uint64_t result)
{
  timezone = result;
  return result;
}

int asxprintf(char **__ret, printf_domain_t __domain, locale_t __loc, const char *__format, ...)
{
  return _vasprintf( 0LL,  (pthread_rwlock_t *)__domain,  (void **)__ret,  (unsigned int *)__loc,  (unsigned __int8 *)__format,  (__int16 *)va);
}

int dxprintf(int __fd, printf_domain_t __domain, locale_t __loc, const char *__format, ...)
{
  return _vdprintf( 0LL,  (pthread_rwlock_t *)__domain,  __fd,  (unsigned int *)__loc,  (unsigned __int8 *)__format,  (__int16 *)va);
}

int fxprintf(FILE *__stream, printf_domain_t __domain, locale_t __loc, const char *__format, ...)
{
  return __xvprintf(0LL, (int)__domain, (uint64_t)__stream);
}

int sxprintf(char *__str, size_t __size, printf_domain_t __domain, locale_t __loc, const char *__format, ...)
{
  return _vsnprintf( 0LL,  (pthread_rwlock_t *)__domain,  __str,  __size,  (unsigned int *)__loc,  (unsigned __int8 *)__format,  (__int16 *)va);
}

int xprintf(printf_domain_t __domain, locale_t __loc, const char *__format, ...)
{
  return __xvprintf(0LL, (int)__domain, (uint64_t)__stdoutp);
}

int vasxprintf(char **__ret, printf_domain_t __domain, locale_t __loc, const char *__format, va_list __ap)
{
  return _vasprintf( 0LL,  (pthread_rwlock_t *)__domain,  (void **)__ret,  (unsigned int *)__loc,  (unsigned __int8 *)__format,  (__int16 *)__ap);
}

int vdxprintf(int __fd, printf_domain_t __domain, locale_t __loc, const char *__format, va_list __ap)
{
  return _vdprintf( 0LL,  (pthread_rwlock_t *)__domain,  __fd,  (unsigned int *)__loc,  (unsigned __int8 *)__format,  (__int16 *)__ap);
}

int vfxprintf(FILE *__stream, printf_domain_t __domain, locale_t __loc, const char *__format, va_list __ap)
{
  return __xvprintf(0LL, (int)__domain, (uint64_t)__stream);
}

int vsxprintf( char *__str, size_t __size, printf_domain_t __domain, locale_t __loc, const char *__format, va_list __ap)
{
  return _vsnprintf( 0LL,  (pthread_rwlock_t *)__domain,  __str,  __size,  (unsigned int *)__loc,  (unsigned __int8 *)__format,  (__int16 *)__ap);
}

int vxprintf(printf_domain_t __domain, locale_t __loc, const char *__format, va_list __ap)
{
  return __xvprintf(0LL, (int)__domain, (uint64_t)__stdoutp);
}

void free_printf_comp(printf_comp_t __pc)
{
  if (__pc)
  {
    uint64_t v2 = *((void *)__pc + 10);
    if (v2)
    {
      do
      {
        unsigned int v3 = __ldaxr((unsigned int *)v2);
        unsigned int v4 = v3 - 1;
      }

      while (__stlxr(v4, (unsigned int *)v2));
      if (!v4)
      {
        uint64_t v5 = *(void (**)(void))(v2 + 8);
        if (v5) {
          v5();
        }
      }
    }

    free(*((void **)__pc + 11));
    free(*((void **)__pc + 13));
    free(*((void **)__pc + 14));
    pthread_mutex_destroy((pthread_mutex_t *)__pc);
    free(__pc);
  }

printf_comp_t new_printf_comp(printf_domain_t __domain, locale_t __loc, const char *__fmt)
{
  uint64_t v5 = _platform_strlen();
  ssize_t v6 = (char *)malloc(v5 + 129);
  uint64_t v7 = (uint64_t)v6;
  if (v6)
  {
    *((void *)v6 + 15) = 0LL;
    *(_OWORD *)(v6 + 104) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(void *)ssize_t v6 = 850045863LL;
    *(_OWORD *)(v6 + 8) = 0u;
    *(_OWORD *)(v6 + 24) = 0u;
    *(_OWORD *)(v6 + 40) = 0u;
    *((void *)v6 + 7) = 0LL;
    *((void *)v6 + 8) = v6 + 128;
    _platform_strcpy();
    if (__loc)
    {
      if (__loc == (locale_t)-1LL) {
        __loc = (locale_t)&__global_locale;
      }
    }

    else
    {
      uint64_t v8 = __locale_key;
      int v9 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v8);
      if (v9) {
        __loc = v9;
      }
      else {
        __loc = (locale_t)&__global_locale;
      }
    }

    do
      unsigned int v10 = __ldaxr((unsigned int *)__loc);
    while (__stlxr(v10 + 1, (unsigned int *)__loc));
    *(void *)(v7 + 80) = __loc;
    pthread_once(&__xprintf_domain_once, (void (*)(void))__xprintf_domain_init);
    pthread_rwlock_rdlock((pthread_rwlock_t *)__domain);
    int v11 = __printf_comp(v7, (uint64_t)__domain);
    int v12 = *__error();
    pthread_rwlock_unlock((pthread_rwlock_t *)__domain);
    if (v11 < 0)
    {
      do
      {
        unsigned int v13 = __ldaxr((unsigned int *)__loc);
        unsigned int v14 = v13 - 1;
      }

      while (__stlxr(v14, (unsigned int *)__loc));
      if (!v14)
      {
        int v15 = (void (*)(locale_t))*((void *)__loc + 1);
        if (v15) {
          v15(__loc);
        }
      }

      pthread_mutex_destroy((pthread_mutex_t *)v7);
      free((void *)v7);
      uint64_t v7 = 0LL;
      *__error() = v12;
    }
  }

  return (printf_comp_t)v7;
}

char *__xprintf_domain_init()
{
  uint64_t result = (char *)calloc(1uLL, 0x9F8uLL);
  xprintf_domain_default = (uint64_t)result;
  if (!result) {
    __xprintf_domain_init_cold_1();
  }
  *(_OWORD *)(result + 184) = 0u;
  *(_OWORD *)(result + 168) = 0u;
  *(_OWORD *)(result + 152) = 0u;
  *(_OWORD *)(result + 136) = 0u;
  *(_OWORD *)(result + 120) = 0u;
  *(_OWORD *)(result + 104) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  char v1 = 35;
  uint64_t v2 = 1u;
  *(void *)uint64_t result = 766030772LL;
  *(_OWORD *)(result + 8) = 0u;
  do
  {
    result[v1 + 167] = 3;
    char v1 = _printf_tbl_flags[v2++];
  }

  while (v2 != 30);
  int v3 = 6;
  unsigned int v4 = &_printf_tbl_defaults_fbsd;
  do
  {
    char v5 = **v4;
    if (v5)
    {
      __int128 v6 = *(_OWORD *)(v4 + 1);
      uint64_t v7 = (unsigned __int8 *)(*v4 + 1);
      do
      {
        result[v5 + 167] = 2;
        uint64_t v8 = &result[24 * (char)*(v7 - 1)];
        *((_OWORD *)v8 - 31) = v6;
        *((void *)v8 - 60) = 0LL;
        int v9 = *v7++;
        char v5 = v9;
      }

      while (v9);
    }

    v4 += 3;
    BOOL v10 = v3-- != 0;
  }

  while (v3 != 0 && v10);
  result[277] = 1;
  *((void *)result + 268) = __printf_arginfo_n;
  *((void *)result + 269) = __printf_render_n;
  *((void *)result + 270) = 0LL;
  return result;
}

printf_domain_t copy_printf_domain(printf_domain_t __domain)
{
  uint64_t v2 = (char *)malloc(0x9F8uLL);
  if (v2)
  {
    pthread_once(&__xprintf_domain_once, (void (*)(void))__xprintf_domain_init);
    pthread_rwlock_rdlock((pthread_rwlock_t *)__domain);
    _platform_memmove();
    pthread_rwlock_unlock((pthread_rwlock_t *)__domain);
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    *(_OWORD *)(v2 + 136) = 0u;
    *(_OWORD *)(v2 + 152) = 0u;
    *(_OWORD *)(v2 + 168) = 0u;
    *(_OWORD *)(v2 + 184) = 0u;
    *(void *)uint64_t v2 = 766030772LL;
  }

  return (printf_domain_t)v2;
}

void free_printf_domain(printf_domain_t __domain)
{
  if (__domain)
  {
    pthread_rwlock_destroy((pthread_rwlock_t *)__domain);
    free(__domain);
  }

printf_domain_t new_printf_domain(void)
{
  uint64_t v0 = (_printf_domain *)malloc(0x9F8uLL);
  if (v0) {
    _platform_memmove();
  }
  return v0;
}

int register_printf_domain_function( printf_domain_t __domain, int __spec, printf_function *__render, printf_arginfo_function *__arginfo, void *__context)
{
  unsigned int v10 = __spec - 33;
  if (v10 >= 0x5E
    || (pthread_once(&__xprintf_domain_once, (void (*)(void))__xprintf_domain_init),
        int v11 = (char *)__domain + v10,
        int v13 = v11[200],
        int v12 = v11 + 200,
        v13 == 3))
  {
    *__error() = 22;
    return -1;
  }

  else
  {
    pthread_rwlock_wrlock((pthread_rwlock_t *)__domain);
    char v15 = 0;
    if (__render)
    {
      if (__arginfo)
      {
        int v16 = (void *)((char *)__domain + 24 * v10);
        v16[37] = __arginfo;
        v16[38] = __render;
        v16[39] = __context;
        char v15 = 1;
      }
    }

    *int v12 = v15;
    pthread_rwlock_unlock((pthread_rwlock_t *)__domain);
    return 0;
  }

uint64_t register_printf_domain_render(pthread_rwlock_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  if (a1
    && (unsigned int v8 = a2 - 33, (a2 - 33) < 0x5E)
    && (pthread_once(&__xprintf_domain_once, (void (*)(void))__xprintf_domain_init),
        int v9 = (char *)a1 + v8,
        int v11 = v9[200],
        unsigned int v10 = v9 + 200,
        v11 != 3))
  {
    pthread_rwlock_wrlock(a1);
    char v13 = 0;
    if (a3)
    {
      if (a4)
      {
        unsigned int v14 = &a1->__sig + 3 * v8;
        v14[37] = a4;
        v14[38] = a3;
        v14[39] = 0LL;
        char v13 = 2;
      }
    }

    *unsigned int v10 = v13;
    pthread_rwlock_unlock(a1);
    return 0LL;
  }

  else
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }

int register_printf_domain_render_std(printf_domain_t __domain, const char *__specs)
{
  char v2 = *__specs;
  if (!*__specs) {
    return 0;
  }
  unsigned int v4 = __specs + 1;
  while (2)
  {
    switch(v2)
    {
      case 'M':
        char v5 = (pthread_rwlock_t *)__domain;
        int v6 = 77;
        uint64_t v7 = __printf_render_errno;
        unsigned int v8 = __printf_arginfo_errno;
        goto LABEL_10;
      case 'N':
      case 'O':
      case 'P':
      case 'R':
      case 'S':
      case 'U':
        goto LABEL_13;
      case 'Q':
        char v5 = (pthread_rwlock_t *)__domain;
        int v6 = 81;
        uint64_t v7 = __printf_render_quote;
        unsigned int v8 = __printf_arginfo_quote;
        goto LABEL_10;
      case 'T':
        char v5 = (pthread_rwlock_t *)__domain;
        int v6 = 84;
        uint64_t v7 = __printf_render_time;
        unsigned int v8 = __printf_arginfo_time;
        goto LABEL_10;
      case 'V':
        char v5 = (pthread_rwlock_t *)__domain;
        int v6 = 86;
        uint64_t v7 = __printf_render_vis;
        unsigned int v8 = __printf_arginfo_vis;
        goto LABEL_10;
      default:
        if (v2 == 72)
        {
          char v5 = (pthread_rwlock_t *)__domain;
          int v6 = 72;
          uint64_t v7 = __printf_render_hexdump;
          unsigned int v8 = __printf_arginfo_hexdump;
LABEL_10:
          int v9 = *(unsigned __int8 *)v4++;
          char v2 = v9;
          if (!v9) {
            return 0;
          }
          continue;
        }

LABEL_13:
        *__error() = 22;
        return -1;
    }
  }

  _platform_memmove();
  _platform_memset();
  v20[0] = *(void *)(v7 + 496);
  int v9 = *(void *)(v7 + 624);
LABEL_6:
  v20[1] = v9;
  switch(a4)
  {
    case 0:
    case 5:
      int v11 = **a2;
      if (!(_DWORD)v11) {
        goto LABEL_34;
      }
      goto LABEL_27;
    case 1:
      if ((*(_BYTE *)(v7 + 68) & 8) == 0) {
        goto LABEL_34;
      }
      int v11 = *(unsigned int *)(v7 + 64);
      a4 = 1;
      goto LABEL_27;
    case 4:
      char v13 = **a2;
      if (v13) {
        a4 = 4;
      }
      else {
        a4 = 5;
      }
      if (v13 <= 1) {
        int v11 = 1LL;
      }
      else {
        int v11 = v13;
      }
      goto LABEL_27;
    case 8:
      int v11 = **a2;
      if (!(_DWORD)v11) {
        goto LABEL_34;
      }
      if (v11 <= *(_DWORD *)(v7 + 616))
      {
        uint64_t result = 1LL;
      }

      else
      {
        a4 = 8;
LABEL_27:
        unsigned int v14 = *(_DWORD *)(v7 + 616);
        if (v11 > v14)
        {
          if ((*(_BYTE *)(v7 + 637) & 9) == 0)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 560))(v7, v11);
            if ((_DWORD)result == -1) {
              return result;
            }
            unsigned int v14 = *(_DWORD *)(v7 + 616);
          }

          if (v11 > v14 + 1)
          {
            if ((*(_BYTE *)(v7 + 637) & 2) != 0)
            {
              int v16 = *(void *)(v7 + 624);
              uint64_t v18 = malloc(v16);
              if (!v18) {
                return 0xFFFFFFFFLL;
              }
              char v19 = v16;
              _platform_memset();
            }

            else
            {
              uint64_t v18 = 0LL;
              char v19 = 0LL;
            }

            while (1)
            {
              int v17 = *(_DWORD *)(v7 + 616);
            }

            if ((*(_BYTE *)(v7 + 637) & 2) != 0) {
              free(v18);
            }
          }
        }

        uint64_t result = __rec_iput(v7, (int)v11 - 1, v20, a4);
        if (!(_DWORD)result)
        {
          if (a4 == 10)
          {
            *(_DWORD *)(v7 + 64) = v11;
          }

          else if (a4 == 4)
          {
            LODWORD(v11) = v11 + 1;
          }

          *(_DWORD *)(v7 + 636) |= 0x1000u;
          uint64_t result = __rec_ret(v7, 0LL, v11, a2, 0LL);
        }
      }

      break;
    case 10:
      int v11 = **a2;
      if (!(_DWORD)v11) {
        goto LABEL_34;
      }
      a4 = 10;
      goto LABEL_27;
    default:
      goto LABEL_34;
  }

  return result;
}

      char v13 = *(_DWORD *)(v7 + 616);
      if (v13) {
        unsigned int v14 = v10 > v13;
      }
      else {
        unsigned int v14 = 1;
      }
      if (v14)
      {
        if ((*(_BYTE *)(v7 + 637) & 9) == 0)
        {
          int v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 560))(v7, v10);
          if ((_DWORD)v11) {
            return v11;
          }
          char v13 = *(_DWORD *)(v7 + 616);
        }
      }

      int v16 = __rec_search(v7, (int)v10 - 1, 2);
      if (!v16) {
        return 0xFFFFFFFFLL;
      }
      int v17 = (void **)v16;
      *(_BYTE *)(v7 + 68) |= 8u;
      *(_DWORD *)(v7 + 64) = v10;
      int v11 = __rec_ret(v7, v16, v10, a2, a3);
      if ((*(_BYTE *)(v7 + 637) & 0x40) != 0) {
        mpool_put(*(MPOOL **)v7, *v17, 0);
      }
      else {
        *(void *)(v7 + 32) = *v17;
      }
      return v11;
    default:
LABEL_5:
      *__error() = 22;
      return 0xFFFFFFFFLL;
  }

  int v11 = v7 / 86400;
  int v12 = v7 % 86400;
  char v13 = a2 - v10 + v7 % 86400;
  if (v13 < 0)
  {
    unsigned int v14 = v12 + a2;
    if (v13 <= -86400) {
      char v13 = -86400LL;
    }
    char v15 = v10 + v13;
    if (v15 == v14) {
      int v16 = v14;
    }
    else {
      int v16 = v14 + 1;
    }
    int v17 = v15 - v16;
    if (v15 == v14) {
      uint64_t v18 = v17 / 0x15180;
    }
    else {
      uint64_t v18 = v17 / 0x15180 + 1;
    }
    char v13 = v14 + 86400 * v18 + 86400 - v10;
    v11 += ~v18;
  }

  if (v13 > 86399)
  {
    char v19 = 172799LL;
    if (v13 < 172799) {
      char v19 = v13;
    }
    int v20 = (~v19 + v13 + 86400) / 0x15180uLL;
    char v13 = v13 - 86400 * v20 - 86400;
    v11 += v20 + 1;
  }

  *(_DWORD *)(a4 + 8) = v13 / 0xE10uLL;
  int v21 = v13 % 0xE10uLL;
  *(_DWORD *)a4 = v9 + v21 % 0x3Cu;
  *(_DWORD *)(a4 + 4) = v21 / 0x3Cu;
  *(_DWORD *)(a4 + 24) = ((int)v11 + 4) % 7 + (((int)v11 + 4) % 7 < 0 ? 7 : 0);
  int v22 = 1970LL;
  if (v11 < 0) {
    goto LABEL_34;
  }
  while (1)
  {
    if ((v22 & 3) != 0)
    {
      gid_t v23 = 0;
    }

    else
    {
      int v24 = __ROR8__(0x8F5C28F5C28F5C29LL * v22 + 0x51EB851EB851EB0LL, 4) < 0xA3D70A3D70A3D7uLL;
      gid_t v23 = __ROR8__(0x51EB851EB851EB8LL - 0x70A3D70A3D70A3D7LL * v22, 2) > 0x28F5C28F5C28F5CuLL || v24;
    }

    do
    {
LABEL_34:
      int v25 = v11 / 365 + v22 + (v11 >> 63);
      if (v25 < 1) {
        unsigned int v26 = -v25 / 0x190uLL + ((unint64_t)-v25 >> 2) - -v25 / 0x64uLL + 1;
      }
      else {
        unsigned int v26 = (v25 - 1) / 0x64uLL - ((v25 - 1) / 0x190uLL + ((unint64_t)(v25 - 1) >> 2));
      }
      if (v22 >= 1) {
        uint64_t v27 = (v22 - 1) / 0x190uLL - (v22 - 1) / 0x64uLL + ((unint64_t)(v22 - 1) >> 2);
      }
      else {
        uint64_t v27 = ~(-v22 / 0x190uLL + ((unint64_t)-v22 >> 2)) + -v22 / 0x64uLL;
      }
      int v11 = v11 - 365 * (v11 / 365 + (v11 >> 63)) + v26 + v27;
      int v22 = v25;
    }

    while (v11 < 0);
  }

  if ((unint64_t)(v22 - 2147485548LL) > 0xFFFFFFFEFFFFFFFFLL)
  {
    *(_DWORD *)(a4 + 20) = v22 - 1900;
    *(_DWORD *)(a4 + 28) = v11;
    int v29 = (int)mon_lengths[12 * v23];
    if (v11 >= v29)
    {
      int v30 = 0LL;
      do
      {
        v11 -= v29;
        int v29 = (int)mon_lengths[12 * v23 + 1 + v30++];
      }

      while (v11 >= v29);
    }

    else
    {
      LODWORD(v30) = 0;
    }

    *(_DWORD *)(a4 + 12) = v11 + 1;
    *(_DWORD *)(a4 + 16) = v30;
    *(_DWORD *)(a4 + 32) = 0;
    *(void *)(a4 + 40) = a2;
  }

  else
  {
    acl_tag_t v28 = __error();
    a4 = 0LL;
    *acl_tag_t v28 = 84;
  }

  return a4;
}

        if (i >= v13) {
          goto LABEL_255;
        }
        ++a4;
        *uint64_t i = v20;
        --v18;
      }

      if (a4[1] == 37)
      {
        ++a4;
        goto LABEL_13;
      }

      int v134 = a1;
      int v21 = 5;
      while (2)
      {
        while (2)
        {
          while (2)
          {
            ++a4;
            while (1)
            {
              int v22 = *a4;
              if ((_DWORD)v22 != 61) {
                break;
              }
              gid_t v23 = a4[1];
              a4 += 2;
              if (!v23) {
                goto LABEL_262;
              }
            }

            int v24 = *a4;
            if ((char)v22 > 42)
            {
              if ((char)v22 != 43)
              {
                if ((char)v22 == 45)
                {
                  v21 |= 0x20u;
                  continue;
                }

                if ((char)v22 == 94)
                {
                  v21 &= ~1u;
                  continue;
                }

                goto LABEL_33;
              }

              if ((v21 & 2) == 0)
              {
                v21 |= 6u;
                continue;
              }

int asxprintf_exec(char **__ret, printf_comp_t __pc, ...)
{
  return _vasprintf((pthread_mutex_t *)__pc, 0LL, (void **)__ret, 0LL, 0LL, (__int16 *)va);
}

int dxprintf_exec(int __fd, printf_comp_t __pc, ...)
{
  return _vdprintf((pthread_mutex_t *)__pc, 0LL, __fd, 0LL, 0LL, (__int16 *)va);
}

int fxprintf_exec(FILE *__stream, printf_comp_t __pc, ...)
{
  return __xvprintf((pthread_mutex_t *)__pc, 0, (uint64_t)__stream);
}

int sxprintf_exec(char *__str, size_t __size, printf_comp_t __pc, ...)
{
  return _vsnprintf((pthread_mutex_t *)__pc, 0LL, __str, __size, 0LL, 0LL, (__int16 *)va);
}

int xprintf_exec(printf_comp_t __pc, ...)
{
  return __xvprintf((pthread_mutex_t *)__pc, 0, (uint64_t)__stdoutp);
}

int vasxprintf_exec(char **__ret, printf_comp_t __pc, va_list __ap)
{
  return _vasprintf((pthread_mutex_t *)__pc, 0LL, (void **)__ret, 0LL, 0LL, (__int16 *)__ap);
}

int vdxprintf_exec(int __fd, printf_comp_t __pc, va_list __ap)
{
  return _vdprintf((pthread_mutex_t *)__pc, 0LL, __fd, 0LL, 0LL, (__int16 *)__ap);
}

int vfxprintf_exec(FILE *__stream, printf_comp_t __pc, va_list __ap)
{
  return __xvprintf((pthread_mutex_t *)__pc, 0, (uint64_t)__stream);
}

int vsxprintf_exec(char *__str, size_t __size, printf_comp_t __pc, va_list __ap)
{
  return _vsnprintf((pthread_mutex_t *)__pc, 0LL, __str, __size, 0LL, 0LL, (__int16 *)__ap);
}

int vxprintf_exec(printf_comp_t __pc, va_list __ap)
{
  return __xvprintf((pthread_mutex_t *)__pc, 0, (uint64_t)__stdoutp);
}

char *__cdecl fparseln(FILE *a1, size_t *a2, size_t *a3, const char a4[3], int a5)
{
  char v40 = a5;
  int v6 = 0LL;
  size_t v7 = 0LL;
  const char *__attribute__((__org_arrdim(0,3))) v8 = "\\\\#";
  if (a4) {
    const char *__attribute__((__org_arrdim(0,3))) v8 = a4;
  }
  int v9 = *(unsigned __int8 *)v8;
  int v10 = *((unsigned __int8 *)v8 + 1);
  int v11 = *((unsigned __int8 *)v8 + 2);
  BOOL v12 = 1;
  while (v12)
  {
    if (a3) {
      ++*a3;
    }
    char v13 = fgetln(a1, &v43);
    if (!v13) {
      break;
    }
    BOOL v12 = 0;
    size_t v14 = v43;
    if (v43 && v11)
    {
      if ((uint64_t)v43 < 1)
      {
        BOOL v12 = 0;
      }

      else
      {
        char v15 = v13;
        while (1)
        {
          if (*v15 == v11 && v9 != 0)
          {
            int v17 = (unsigned __int8 *)(v15 - 1);
            if (v15 - 1 < v13) {
              break;
            }
            char v18 = 0;
            do
            {
              if (*v17 != v9) {
                break;
              }
              ++v18;
              --v17;
            }

            while (v17 >= (unsigned __int8 *)v13);
            if ((v18 & 1) == 0) {
              break;
            }
          }

          if (++v15 >= &v13[v43])
          {
            BOOL v12 = 0;
            goto LABEL_23;
          }
        }

        size_t v14 = v15 - v13;
        size_t v43 = v15 - v13;
        BOOL v12 = v15 == v13 && v6 == 0LL;
        if (!v14) {
          goto LABEL_45;
        }
      }

LABEL_47:
      int v39 = v10;
      gid_t v23 = realloc(v6, v14 + v7 + 1);
      if (!v23)
      {
        free(v6);
        return 0LL;
      }

      int v24 = v23;
      _platform_memmove();
      v24[v14 + v7] = 0;
      v7 += v14;
      int v6 = v24;
      int v10 = v39;
    }

    else
    {
LABEL_23:
      if (v43) {
        goto LABEL_33;
      }
LABEL_45:
      if (v14 || !v6) {
        goto LABEL_47;
      }
    }
  }

  if ((v40 & 0xF) != 0 && v9 && v6 && _platform_strchr())
  {
    LOBYTE(v25) = *v6;
    unsigned int v26 = v6;
    if (*v6)
    {
      unsigned int v26 = v6;
      uint64_t v27 = v6;
      do
      {
        if (v9 == v25)
        {
          LOBYTE(v25) = v9;
        }

        else
        {
          do
          {
            *v26++ = v25;
            int v28 = *++v27;
            int v25 = v28;
            if (v28) {
              BOOL v29 = v25 == v9;
            }
            else {
              BOOL v29 = 1;
            }
          }

          while (!v29);
          if (!v25) {
            break;
          }
        }

        int v30 = v27[1];
        if (!v27[1]) {
          break;
        }
        if (v30 == v11) {
          int v31 = v40 & 4;
        }
        else {
          int v31 = 0;
        }
        if (v30 == v10) {
          int v32 = v40 & 2;
        }
        else {
          int v32 = 0;
        }
        if (v30 == v9) {
          int v33 = v40 & 1;
        }
        else {
          int v33 = 0;
        }
        BOOL v35 = v30 == v9 || v30 == v10 || v30 == v11;
        int v36 = v31 | v32 | v33;
        if (!v35) {
          int v36 = v40 & 8;
        }
        if (!v36)
        {
          *v26++ = v25;
          LOBYTE(v30) = v27[1];
        }

        *v26++ = v30;
        int v37 = v27[2];
        v27 += 2;
        LOBYTE(v25) = v37;
      }

      while (v37);
    }

    *unsigned int v26 = 0;
    size_t v7 = _platform_strlen();
  }

  if (a2) {
    *a2 = v7;
  }
  return v6;
}

  if (v20 > 9)
  {
    int v55 = v16;
    unint64_t v56 = v13;
    if ((v20 & 0x8000000000000000LL) != 0)
    {
      int v24 = &v59;
      uint64_t v59 = (v20 % 0xA) | 0x30;
      BOOL v29 = 1;
      v20 /= 0xAuLL;
    }

    else
    {
      BOOL v29 = 0;
      int v24 = &v60;
    }

    int v30 = -(uint64_t)v8;
    do
    {
      *--int v24 = (v20 % 0xA) | 0x30;
      ++v29;
      if ((v7 & 0x100) != 0 && v29 == (char)*fixed)
      {
        int v31 = *fixed == 127 || (uint64_t)v20 < 10;
        if (!v31)
        {
          v24 += v30;
          _platform_memmove();
          BOOL v29 = 0;
          if (fixed[1]) {
            ++fixed;
          }
        }
      }

      int v25 = v20 >= 0xA;
      v20 /= 0xAuLL;
    }

    while (v25);
    int v16 = v55;
    char v13 = v56;
LABEL_50:
    if ((*(_WORD *)(a2 + 40) & 0x10) != 0)
    {
      if (v16) {
        *--int v24 = 48;
      }
      if (v13)
      {
        if (*(_DWORD *)(a2 + 28) == 120) {
          uint64_t v27 = "0x";
        }
        else {
          uint64_t v27 = "0X";
        }
        int v28 = 2;
        goto LABEL_74;
      }
    }

    uint64_t v27 = v21;
    int v10 = v47;
LABEL_74:
    int v41 = v48-- == 1;
    size_t v14 = v27 - v21 + v14;
    if (v41) {
      BOOL v12 = v14;
    }
    else {
      BOOL v12 = v27;
    }
    unint64_t v52 = v12;
LABEL_78:
    char v13 = v12;
  }

  __int16 v50 = 0LL;
LABEL_22:
  int v45 = v20;
  int v25 = 0;
  int v24 = 0LL;
  while (1)
  {
    unsigned int v26 = ++v25 < v22 ? 1 : 2;
    uint64_t v27 = v52;
    uint64_t result = tre_copy_ast(a1, a2, *(void *)v19, v26, &v52, a5, &v49, &v51);
    if ((_DWORD)result) {
      return result;
    }
    if (v24) {
      int v24 = tre_ast_new_catenation(a1, (uint64_t)v24, (uint64_t)v49);
    }
    else {
      int v24 = v49;
    }
    if (!v24) {
      return 12LL;
    }
    char v22 = v19[2];
    if (v25 >= v22)
    {
      int v21 = v45;
      goto LABEL_53;
    }
  }

int login_tty(int a1)
{
  int result = ioctl(a1, 0x20007461uLL, 0LL);
  if (result != -1)
  {
    dup2(a1, 0);
    dup2(a1, 1);
    dup2(a1, 2);
    int result = 0;
    if (a1 >= 3)
    {
      close_NOCANCEL();
      return 0;
    }
  }

  return result;
}

void logwtmp(const char *a1, const char *a2, const char *a3)
{
  if (_platform_strcmp())
  {
    _platform_strncpy();
    _platform_strncpy();
    pid_t v6 = getpid();
    if (*a2) {
      __int16 v4 = 7;
    }
    else {
      __int16 v4 = 8;
    }
    _platform_strncpy();
  }

  else if (_platform_strcmp())
  {
    __int16 v4 = 11;
  }

  else
  {
    __int16 v4 = 2;
  }

  __int16 v7 = v4;
  gettimeofday(&v8, 0LL);
  _utmpx_asl((uint64_t)v5);
}

uint64_t _mkpath_np(const char *a1, mode_t a2, char **a3)
{
  return _mkpath(-2, a1, a2, a3);
}

uint64_t _mkpath(int a1, const char *a2, mode_t a3, char **a4)
{
  int v8 = *__error();
  if (!mkdirat(a1, a2, a3))
  {
    if (!a4)
    {
      int v10 = 0LL;
      int v11 = 0LL;
      goto LABEL_27;
    }

    char v13 = strdup(a2);
    int v10 = 0LL;
    int v11 = 0LL;
    goto LABEL_9;
  }

  int v9 = *__error();
  switch(v9)
  {
    case 2:
      int v11 = strdup(a2);
      if (!v11)
      {
        int v10 = 0LL;
LABEL_32:
        uint64_t v12 = 12LL;
        break;
      }

      size_t v14 = &v11[_platform_strlen()];
      uint64_t v15 = -1LL;
      uint64_t v16 = -1LL;
      do
      {
        int v17 = &v14[v15 - 1];
        if (v17 > v11)
        {
          uint64_t v16 = v15;
          if (v14[v15] == 46)
          {
            if (*v17 == 47) {
              uint64_t v16 = v15 - 2;
            }
            else {
              uint64_t v16 = v15;
            }
          }
        }

        if (&v14[v16] > v11) {
          v16 -= v14[v16] == 47;
        }
        BOOL v18 = v16 < v15;
        uint64_t v15 = v16;
      }

      while (v18);
      if (v16 > -2)
      {
        int v10 = 0LL;
      }

      else
      {
        v14[v16 + 1] = 0;
        int v10 = strdup(v11);
        a2 = v10;
        if (!v10) {
          goto LABEL_32;
        }
      }

      if (mkdirat(a1, a2, a3))
      {
        unsigned int v20 = 1;
        while (1)
        {
          int v21 = strrchr(v11, 47);
          if (!v21) {
            goto LABEL_68;
          }
          *int v21 = 0;
          if (!mkdirat(a1, v11, 0x1FFu)) {
            break;
          }
          if (*__error() == 17)
          {
            if (fstatat(a1, v11, &v25, 0) || (v25.st_mode & 0xF000) != 0x4000)
            {
              uint64_t v12 = 20LL;
              goto LABEL_69;
            }

            if (a4)
            {
              gid_t v23 = strdup(v11);
              int v22 = 0;
              goto LABEL_54;
            }

            int v22 = 0;
            goto LABEL_55;
          }

          ++v20;
          if (*__error() != 2)
          {
LABEL_40:
            char v19 = __error();
            goto LABEL_25;
          }
        }

        if (fstatat(a1, v11, &v25, 0) != -1)
        {
          if ((~v25.st_mode & 0xC0) == 0)
          {
            int v22 = 0;
            goto LABEL_52;
          }

          int v22 = v25.st_mode | 0xC0;
          if (fchmodat(a1, v11, v25.st_mode | 0xC0, 0) != -1)
          {
LABEL_52:
            if (a4)
            {
              gid_t v23 = strdup(v11);
LABEL_54:
              *a4 = v23;
            }

LABEL_55:
            if (v20 >= 2)
            {
              do
              {
                v11[_platform_strlen()] = 47;
                if (mkdirat(a1, v11, 0x1FFu) == -1)
                {
                  if (*__error() != 17) {
                    goto LABEL_40;
                  }
                }

                else if (v22 && fchmodat(a1, v11, v22, 0) == -1)
                {
                  goto LABEL_68;
                }

                --v20;
              }

              while (v20 > 1);
            }

            if (mkdirat(a1, a2, a3) == -1)
            {
              uint64_t v12 = *__error();
              if (*__error() == 17 && !fstatat(a1, a2, &v25, 0))
              {
                if ((v25.st_mode & 0xF000) == 0x4000) {
                  uint64_t v12 = v12;
                }
                else {
                  uint64_t v12 = 20LL;
                }
              }

              break;
            }

    if (*v11)
    {
      gid_t v23 = -*v11;
      goto LABEL_73;
    }

    ++v10;
    int v11 = v36;
    if (v10 >= *v9)
    {
      gid_t v23 = 0;
      goto LABEL_74;
    }
  }

  if (!v23) {
    goto LABEL_55;
  }
  while (*v11)
  {
    int v39 = 0LL;
    while (*v14)
    {
      __collate_lookup_which(v14, &v41, (int *)&v39 + 1, v10, (uint64_t)v6);
      int v24 = HIDWORD(v39);
      if (SHIDWORD(v39) > 0) {
        goto LABEL_45;
      }
      if (v39 < 0) {
        goto LABEL_72;
      }
      v14 += v41;
    }

    int v24 = 0;
LABEL_45:
    if (*v11)
    {
      do
      {
        __collate_lookup_which(v11, &v40, (int *)&v39, v10, (uint64_t)v6);
        stat v25 = v39;
        if ((v39 & 0x80000000) != 0) {
          goto LABEL_72;
        }
        v11 += v40;
      }

      while (*v11);
      int v24 = HIDWORD(v39);
    }

    else
    {
      stat v25 = v39;
    }

    if (!v24 || !v25)
    {
      gid_t v23 = *v14;
      if (!*v14) {
        goto LABEL_55;
      }
      break;
    }

    gid_t v23 = v24 - v25;
    if (v24 != v25) {
      break;
    }
    v14 += v41;
    v11 += v40;
    gid_t v23 = *v14;
    if (!*v14) {
      goto LABEL_55;
    }
  }

LABEL_68:
        uint64_t v12 = 2LL;
        break;
      }

      if (!a4) {
        goto LABEL_27;
      }
      char v13 = strdup(a2);
LABEL_9:
      uint64_t v12 = 0LL;
      *a4 = v13;
      break;
    case 21:
      int v10 = 0LL;
      int v11 = 0LL;
      uint64_t v12 = 17LL;
      break;
    case 17:
      int v10 = 0LL;
      int v11 = 0LL;
      if (fstatat(a1, a2, &v25, 0))
      {
        uint64_t v12 = 5LL;
      }

      else if ((v25.st_mode & 0xF000) == 0x4000)
      {
        uint64_t v12 = 17LL;
      }

      else
      {
        uint64_t v12 = 20LL;
      }

      break;
    default:
      char v19 = __error();
      int v10 = 0LL;
      int v11 = 0LL;
LABEL_25:
      uint64_t v12 = *v19;
      break;
  }

int mkpath_np(const char *path, mode_t omode)
{
  return _mkpath(-2, path, omode, 0LL);
}

int mkpathat_np(int dfd, const char *path, mode_t omode)
{
  return _mkpath(dfd, path, omode, 0LL);
}

int raise(int a1)
{
  char v2 = pthread_self();
  int v3 = pthread_kill(v2, a1);
  int v4 = v3;
  if (v3)
  {
    if (v3 == 45)
    {
      pid_t v5 = getpid();
      return kill(v5, a1);
    }

    *__error() = v3;
    return -1;
  }

  return v4;
}

int opendev(char *a1, int a2, int a3, char **a4)
{
  char v5 = a3;
  if (a4) {
    *a4 = a1;
  }
  *__error() = 2;
  if (pthread_once(&opendev_namebuf_once, (void (*)(void))opendev_namebuf_init) || (__int16 v7 = (char *)namebuf) == 0LL)
  {
    int v10 = __error();
    int v11 = 12;
    goto LABEL_11;
  }

  if ((v5 & 4) != 0) {
    int v8 = "";
  }
  else {
    int v8 = "r";
  }
  if (_platform_strchr()) {
    return open_NOCANCEL();
  }
  if ((v5 & 1) == 0)
  {
LABEL_24:
    if (*__error() != 2) {
      return -1;
    }
    if (snprintf((char *)namebuf, 0x400uLL, "%s%s%s", "/dev/", v8, a1) <= 1023)
    {
      int result = open_NOCANCEL();
      if (a4) {
        *a4 = (char *)namebuf;
      }
      return result;
    }

    int v10 = __error();
    int v11 = 63;
LABEL_11:
    *int v10 = v11;
    return -1;
  }

  if (snprintf(v7, 0x400uLL, "%s%s%s", "/dev/", v8, a1) > 1023)
  {
    *__error() = 63;
    goto LABEL_24;
  }

  uint64_t v12 = (const char *)namebuf;
  while (1)
  {
    char v13 = strrchr(v12, 115);
    char *v13 = 0;
  }

  int result = open_NOCANCEL();
  if (a4) {
    *a4 = (char *)namebuf;
  }
  if (result == -1) {
    goto LABEL_24;
  }
  return result;
}

void *opendev_namebuf_init()
{
  int result = malloc(0x400uLL);
  namebuf = (uint64_t)result;
  return result;
}

int openpty(int *a1, int *a2, char *a3, termios *a4, winsize *a5)
{
  int v10 = posix_openpt(131074);
  if (v10 < 0) {
    return -1;
  }
  int v11 = v10;
  if (grantpt(v10) < 0
    || unlockpt(v11) < 0
    || ptsname_r(v11, buffer, 0x80uLL) == -1
    || (int v12 = open_NOCANCEL(), v12 < 0))
  {
    int v15 = *__error();
    close_NOCANCEL();
    *__error() = v15;
    return -1;
  }

  int v13 = v12;
  *a1 = v11;
  *a2 = v12;
  if (a3) {
    _platform_strcpy();
  }
  if (a4) {
    tcsetattr(v13, 2, a4);
  }
  if (a5) {
    ioctl(v13, 0x80087467uLL, a5);
  }
  return 0;
}

pid_t forkpty(int *a1, char *a2, termios *a3, winsize *a4)
{
  if (openpty(&v11, &v10, a2, a3, a4) == -1) {
    return -1;
  }
  pid_t v5 = fork();
  if (!v5)
  {
    close_NOCANCEL();
    int v8 = v10;
    if (login_tty(v10) < 0)
    {
      syslog(3, "forkpty: login_tty could't make controlling tty");
      dup2(v8, 0);
      dup2(v8, 1);
      dup2(v8, 2);
      pid_t v6 = 0;
      if (v8 < 3) {
        return v6;
      }
      close_NOCANCEL();
    }

    return 0;
  }

  pid_t v6 = v5;
  if (v5 == -1)
  {
    int v7 = *__error();
    close_NOCANCEL();
    close_NOCANCEL();
    *__error() = v7;
  }

  else
  {
    *a1 = v11;
    close_NOCANCEL();
  }

  return v6;
}

void uuid_clear(uuid_t uu)
{
  *(void *)uu = 0LL;
  *((void *)uu + 1) = 0LL;
}

int uuid_compare(const uuid_t uu1, const uuid_t uu2)
{
  BOOL v3 = v14 >= v8;
  if (v14 == v8)
  {
    BOOL v3 = v15 >= v9;
    if (v15 == v9)
    {
      BOOL v3 = v16 >= v10;
      if (v16 == v10)
      {
        BOOL v3 = v17 >= v11;
        if (v17 == v11)
        {
          unsigned int v4 = bswap32(v18);
          unsigned int v5 = bswap32(v12);
          if (v4 == v5)
          {
            unsigned int v4 = bswap32(v19) >> 16;
            unsigned int v6 = bswap32(v13);
            if (v4 == HIWORD(v6)) {
              return 0;
            }
            unsigned int v5 = HIWORD(v6);
          }

          BOOL v3 = v4 >= v5;
        }
      }
    }
  }

  if (v3) {
    return 1;
  }
  else {
    return -1;
  }
}

void uuid_copy(uuid_t dst, const uuid_t src)
{
  uint64_t v2 = 0LL;
  do
  {
    dst[v2] = src[v2];
    ++v2;
  }

  while ((_DWORD)v2 != 16);
}

void uuid_generate_time(uuid_t out)
{
  if ((uuid_generate_time_has_init & 1) != 0) {
    goto LABEL_21;
  }
  int v2 = socket(2, 2, 0);
  if (v2 < 0) {
    goto LABEL_19;
  }
  int v3 = v2;
  _platform_bzero();
  int v17 = 1024;
  *(void *)unsigned int v18 = &v20;
  if (ioctl(v3, 0xC00C6924uLL, &v17) < 0 || v17 < 1)
  {
LABEL_18:
    close_NOCANCEL();
LABEL_19:
    arc4random_buf(&uuid_generate_time_node_id, 6uLL);
    LOBYTE(uuid_generate_time_node_id) = uuid_generate_time_node_id | 1;
    goto LABEL_20;
  }

  int v4 = 0;
  while (1)
  {
    unsigned int v5 = (unsigned __int8 *)(*(void *)v18 + v4);
    if (v5[17] == 18 && v5[22] == 6)
    {
      unsigned int v6 = &v5[v5[21]];
      int v8 = v6[24];
      int v7 = v6 + 24;
      if ((v8 | 2) != 2 || v7[1] || v7[2] || v7[3] || v7[4] || v7[5]) {
        break;
      }
    }

    unsigned int v9 = v5[16];
    if (v9 >= 0x10) {
      int v10 = v9 + 16;
    }
    else {
      int v10 = 32;
    }
    v4 += v10;
    if (v4 >= v17) {
      goto LABEL_18;
    }
  }

  int v16 = *(_DWORD *)v7;
  word_18C52BFF4 = *((_WORD *)v7 + 2);
  uuid_generate_time_node_id = v16;
  close_NOCANCEL();
LABEL_20:
  uuid_generate_time_has_init = 1;
  while (1)
  {
LABEL_21:
    gettimeofday(&v20, 0LL);
    __darwin_time_t v11 = get_clock_last;
    if ((void)get_clock_last) {
      BOOL v12 = 0;
    }
    else {
      BOOL v12 = DWORD2(get_clock_last) == 0;
    }
    if (v12)
    {
      arc4random_buf(&get_clock_clock_seq, 2uLL);
      get_clock_clock_seq &= 0x3FFFu;
      get_clock_last = (__int128)v20;
      __darwin_time_t v11 = v20.tv_sec - 1;
      *(void *)&get_clock_last = v20.tv_sec - 1;
    }

    __darwin_time_t tv_sec = v20.tv_sec;
    if (v20.tv_sec < v11)
    {
      __darwin_time_t v11 = v20.tv_sec;
LABEL_35:
      int v14 = 0;
      get_clock_clock_seq = (get_clock_clock_seq + 1) & 0x3FFF;
      get_clock_adjustment = 0;
      get_clock_last = (__int128)v20;
      goto LABEL_37;
    }

    if (v20.tv_sec != v11) {
      goto LABEL_36;
    }
    if (v20.tv_usec < SDWORD2(get_clock_last)) {
      goto LABEL_35;
    }
    if (v20.tv_usec != DWORD2(get_clock_last)) {
      break;
    }
    if (get_clock_adjustment <= 9)
    {
      int v14 = ++get_clock_adjustment;
      goto LABEL_37;
    }
  }

  __darwin_time_t tv_sec = v11;
LABEL_36:
  int v14 = 0;
  get_clock_adjustment = 0;
  get_clock_last = (__int128)v20;
  __darwin_time_t v11 = tv_sec;
LABEL_37:
  uint64_t v15 = 10LL * v20.tv_usec + v14 + 10000000 * v11 + 122192928000000000LL;
  int v17 = v15;
  *(_WORD *)&v18[4] = get_clock_clock_seq | 0x8000;
  *(_WORD *)unsigned int v18 = WORD2(v15);
  *(_WORD *)&v18[2] = HIWORD(v15) & 0xFFF | 0x1000;
  *(_DWORD *)&v18[6] = uuid_generate_time_node_id;
  __int16 v19 = word_18C52BFF4;
  uuid_pack((uint64_t)&v17, (uint64_t)out);
}

void uuid_generate_random(uuid_t out)
{
  __int16 v4 = v4 & 0x3FFF | 0x8000;
  __int16 v3 = v3 & 0xFFF | 0x4000;
  uuid_pack((uint64_t)v2, (uint64_t)out);
}

int uuid_is_null(const uuid_t uu)
{
  uint64_t v1 = 0LL;
  while (!uu[v1])
  {
    if ((_DWORD)++v1 == 16) {
      return 1;
    }
  }

  return 0;
}

uint64_t uuid_pack(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = bswap32(*(_DWORD *)result);
  *(_WORD *)(a2 + 4) = bswap32(*(unsigned __int16 *)(result + 4)) >> 16;
  *(_WORD *)(a2 + 6) = bswap32(*(unsigned __int16 *)(result + 6)) >> 16;
  *(_WORD *)(a2 + 8) = bswap32(*(unsigned __int16 *)(result + 8)) >> 16;
  int v2 = *(_DWORD *)(result + 10);
  *(_WORD *)(a2 + 14) = *(_WORD *)(result + 14);
  *(_DWORD *)(a2 + 10) = v2;
  return result;
}

int uuid_parse(const uuid_string_t in, uuid_t uu)
{
  if (_platform_strlen() != 36) {
    return -1;
  }
  uint64_t v4 = 0LL;
  do
  {
    if (((1LL << v4) & 0x842100) != 0)
    {
      if (in[v4] != 45) {
        return -1;
      }
      goto LABEL_13;
    }

    if (v4 == 36LL)
    {
      int v5 = in[v4];
      if (!in[v4]) {
        break;
      }
      if ((v5 & 0x80) != 0) {
        return -1;
      }
    }

    else
    {
LABEL_11:
      int v5 = in[v4];
      if ((v5 & 0x80) != 0) {
        return -1;
      }
    }

    if ((_DefaultRuneLocale.__runetype[v5] & 0x10000) == 0) {
      return -1;
    }
LABEL_13:
    ++v4;
  }

  while ((_DWORD)v4 != 37);
  int v12 = strtoul(in, 0LL, 16);
  __int16 v13 = strtoul(in + 9, 0LL, 16);
  __int16 v14 = strtoul(in + 14, 0LL, 16);
  __int16 v15 = strtoul(in + 19, 0LL, 16);
  const char *__attribute__((__org_typedef(uuid_string_t))) v6 = in + 24;
  char v11 = 0;
  for (uint64_t i = 10LL; i != 16; ++i)
  {
    __int16 v8 = *(_WORD *)v6;
    v6 += 2;
    *(_WORD *)__str = v8;
    *((_BYTE *)&v12 + i) = strtoul(__str, 0LL, 16);
  }

  uuid_pack((uint64_t)&v12, (uint64_t)uu);
  return 0;
}

uint64_t uuid_unpack(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = bswap32(*(_DWORD *)result);
  *(_WORD *)(a2 + 4) = bswap32(*(unsigned __int16 *)(result + 4)) >> 16;
  *(_WORD *)(a2 + 6) = bswap32(*(unsigned __int16 *)(result + 6)) >> 16;
  *(_WORD *)(a2 + 8) = bswap32(*(unsigned __int16 *)(result + 8)) >> 16;
  int v2 = *(_DWORD *)(result + 10);
  *(_WORD *)(a2 + 14) = *(_WORD *)(result + 14);
  *(_DWORD *)(a2 + 10) = v2;
  return result;
}

void uuid_unparse_lower(const uuid_t uu, uuid_string_t out)
{
  uint64_t v2 = 0LL;
  do
  {
    *uuid_string_t out = a0123456789abcd[(unint64_t)uu[v2] >> 4];
    out[1] = a0123456789abcd[uu[v2] & 0xF];
    out += 2;
    ++v2;
  }

  while ((_DWORD)v2 != 16);
  *uuid_string_t out = 0;
}

void uuid_unparse_upper(const uuid_t uu, uuid_string_t out)
{
  uint64_t v2 = 0LL;
  do
  {
    *uuid_string_t out = a0123456789abcd_0[(unint64_t)uu[v2] >> 4];
    out[1] = a0123456789abcd_0[uu[v2] & 0xF];
    out += 2;
    ++v2;
  }

  while ((_DWORD)v2 != 16);
  *uuid_string_t out = 0;
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
  uint64_t v2 = 0LL;
  do
  {
    *uuid_string_t out = a0123456789abcd_0[(unint64_t)uu[v2] >> 4];
    out[1] = a0123456789abcd_0[uu[v2] & 0xF];
    out += 2;
    ++v2;
  }

  while ((_DWORD)v2 != 16);
  *uuid_string_t out = 0;
}

pid_t tcgetsid(int a1)
{
  if (ioctl(a1, 0x40047463uLL, &v2) < 0) {
    return -1;
  }
  else {
    return v2;
  }
}

uint64_t _libc_initializer(void *a1, uint64_t a2, void *a3, uint64_t *a4)
{
  uint64_t inited = _init_clock_port();
  _arc4_fork_child(inited);
  __xlocale_init();
  __guard_setup(a3);
  uint64_t v7 = _subsystem_init();
  return _arc4_fork_child(v7);
}

uint64_t __libc_init(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  v6[0] = 1LL;
  v6[1] = a2;
  v6[2] = a3;
  v6[3] = a4;
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  return _libc_initializer(v6, a2, a5, a1);
}

void _libc_fork_child(uint64_t a1)
{
  qword_18C52A990 = (uint64_t)"crashed on child side of fork pre-exec";
  _arc4_fork_child(a1);
  _init_clock_port();
  __environ_lock_fork_child();
  _locale_lock_fork_child();
}

int chmodx_np(const char *a1, filesec_t a2)
{
  __int16 v3 = a1;
  return chmodx1((uint64_t)&v3, (uint64_t (*)(uint64_t, void, void, uint64_t, uint64_t))chmodx_syscall, a2);
}

uint64_t chmodx1( uint64_t a1, uint64_t (*a2)(uint64_t, void, void, uint64_t, uint64_t), filesec_t a3)
{
  unsigned int v21 = -101;
  unsigned int v22 = -101;
  uint64_t v19 = 0LL;
  unint64_t v18 = 0LL;
  if (!a3)
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }

  if (filesec_get_property(a3, FILESEC_OWNER, &v22) && *__error() != 2
    || filesec_get_property(a3, FILESEC_GROUP, &v21) && *__error() != 2)
  {
    return 0xFFFFFFFFLL;
  }

  if (!filesec_get_property(a3, FILESEC_MODE, &v20))
  {
    uint64_t v6 = v20;
    goto LABEL_13;
  }

  uint64_t v6 = 0xFFFFFFFFLL;
  if (*__error() == 2)
  {
LABEL_13:
    if (!filesec_get_property(a3, FILESEC_ACL_RAW, &v18) && !filesec_get_property(a3, FILESEC_ACL_ALLOCSIZE, &v19)
      || *__error() == 2)
    {
      unint64_t v8 = v18;
      if (v18 > 1)
      {
        int v9 = 1;
        int v10 = (int *)v18;
      }

      else
      {
        int v9 = 0;
        __int128 v16 = 0u;
        __int128 v17 = 0u;
        __int128 v14 = 0u;
        __int128 v15 = 0u;
        int v10 = &v13;
        unint64_t v18 = (unint64_t)&v13;
        int v13 = 19710317;
        LODWORD(v16) = -1;
      }

      if (!filesec_get_property(a3, FILESEC_UUID, v10 + 1))
      {
        int v9 = 1;
        unint64_t v11 = v18;
        goto LABEL_23;
      }

      if (*__error() == 2)
      {
        unint64_t v11 = v18;
        *(void *)(v18 + 12) = 0LL;
        *(void *)(v11 + 4) = 0LL;
LABEL_23:
        if (!filesec_get_property(a3, FILESEC_GRPUUID, (void *)(v11 + 20)))
        {
          uint64_t v12 = v18;
          return a2(a1, v22, v21, v6, v12);
        }

        if (*__error() == 2)
        {
          uint64_t v12 = v18;
          *(void *)(v18 + 28) = 0LL;
          *(void *)(v12 + 20) = 0LL;
          if (!v9)
          {
            if (v8 == 1)
            {
              uint64_t v12 = 1LL;
              unint64_t v18 = 1LL;
            }

            else
            {
              uint64_t v12 = 0LL;
              unint64_t v18 = 0LL;
            }
          }

          return a2(a1, v22, v21, v6, v12);
        }
      }
    }

    return 0xFFFFFFFFLL;
  }

  return v6;
}

uint64_t chmodx_syscall()
{
  return __chmod_extended();
}

int fchmodx_np(int a1, filesec_t a2)
{
  int v3 = a1;
  return chmodx1((uint64_t)&v3, (uint64_t (*)(uint64_t, void, void, uint64_t, uint64_t))fchmodx_syscall, a2);
}

uint64_t fchmodx_syscall()
{
  return __fchmod_extended();
}

char ***_NSGetArgv(void)
{
  return (char ***)NXArgv_pointer;
}

int *_NSGetArgc(void)
{
  return (int *)NXArgc_pointer;
}

char ***_NSGetEnviron(void)
{
  return (char ***)environ_pointer;
}

char **_NSGetProgname(void)
{
  return (char **)__progname_pointer;
}

mach_header_64 *_NSGetMachExecuteHeader(void)
{
  return (mach_header_64 *)_mh_execute_header_pointer;
}

uint64_t *_program_vars_init(uint64_t *result)
{
  uint64_t v1 = result[1];
  NXArgv_pointer = result[2];
  NXArgc_pointer = v1;
  uint64_t v2 = result[4];
  environ_pointer = result[3];
  __progname_pointer = v2;
  _mh_execute_header_pointer = *result;
  return result;
}

void *_libc_fork_init(void *result)
{
  if (*result < 2uLL)
  {
    uint64_t v4 = (void *)result[2];
    _libSystem_atfork_prepare = (_UNKNOWN *)result[1];
    _libSystem_atfork_parent = v4;
    uint64_t v2 = result + 3;
    int v3 = &_libSystem_atfork_child;
  }

  else
  {
    uint64_t v1 = (void *)result[6];
    _libSystem_atfork_prepare_uint64_t v2 = (_UNKNOWN *)result[5];
    _libSystem_atfork_parent_uint64_t v2 = v1;
    uint64_t v2 = result + 7;
    int v3 = &_libSystem_atfork_child_v2;
  }

  *int v3 = *v2;
  return result;
}

pid_t fork(void)
{
  if (_libSystem_atfork_prepare_v2) {
    _libSystem_atfork_prepare_v2(0LL);
  }
  else {
    _libSystem_atfork_prepare();
  }
  pid_t v0 = __fork();
  if (v0)
  {
    uint64_t v1 = (void (*)(void))_libSystem_atfork_parent_v2;
    if (!_libSystem_atfork_parent_v2)
    {
      uint64_t v2 = (void (*)(void))_libSystem_atfork_parent;
LABEL_10:
      v2();
      return v0;
    }
  }

  else
  {
    uint64_t v1 = (void (*)(void))_libSystem_atfork_child_v2;
    if (!_libSystem_atfork_child_v2)
    {
      uint64_t v2 = (void (*)(void))_libSystem_atfork_child;
      goto LABEL_10;
    }
  }

  v1(0LL);
  return v0;
}

pid_t vfork(void)
{
  if (_libSystem_atfork_prepare_v2) {
    _libSystem_atfork_prepare_v2(1LL);
  }
  else {
    _libSystem_atfork_prepare();
  }
  pid_t v0 = __fork();
  if (v0)
  {
    uint64_t v1 = (void (*)(uint64_t))_libSystem_atfork_parent_v2;
    if (!_libSystem_atfork_parent_v2)
    {
      uint64_t v2 = (void (*)(void))_libSystem_atfork_parent;
LABEL_10:
      v2();
      return v0;
    }
  }

  else
  {
    uint64_t v1 = (void (*)(uint64_t))_libSystem_atfork_child_v2;
    if (!_libSystem_atfork_child_v2)
    {
      uint64_t v2 = (void (*)(void))_libSystem_atfork_child;
      goto LABEL_10;
    }
  }

  v1(1LL);
  return v0;
}

int gettimeofday(timeval *a1, void *a2)
{
  int v3 = a1;
  if (!a1)
  {
    if (!a2) {
      return 0;
    }
    int v3 = (timeval *)&v9;
  }

  if (!a2) {
    return 0;
  }
  if (gettimeofday_validtz == 1)
  {
    int tm_isdst = gettimeofday_cached_tz_1;
    int v5 = gettimeofday_cached_tz_0;
  }

  else
  {
    __int128 v7 = localtime(&v3->tv_sec);
    int tm_isdst = v7->tm_isdst;
    gettimeofday_cached_tz_1 = tm_isdst;
    unint64_t v8 = ((unsigned __int128)(v7->tm_gmtoff * (__int128)0x7777777777777777LL) >> 64) - v7->tm_gmtoff;
    int v5 = (v8 >> 5) + (v8 >> 63) + 60 * tm_isdst;
    gettimeofday_cached_tz_0 = v5;
    gettimeofday_validtz = 1;
  }

  int result = 0;
  *(_DWORD *)a2 = v5;
  *((_DWORD *)a2 + 1) = tm_isdst;
  return result;
}

int openx_np(const char *a1, int a2, filesec_t a3)
{
  if ((a2 & 0x200) != 0 && a3) {
    return _mkfilex_np(0, (int)a1, (unsigned __int16)a2, a3);
  }
  else {
    return open_NOCANCEL();
  }
}

uint64_t _mkfilex_np(int a1, int a2, int a3, filesec_t a4)
{
  int v19 = -101;
  int v20 = -101;
  __int16 v18 = 0;
  uint64_t v17 = 0LL;
  __int128 v16 = 0LL;
  if (!a4) {
    goto LABEL_23;
  }
  if (filesec_get_property(a4, FILESEC_OWNER, &v20) && *__error() != 2
    || filesec_get_property(a4, FILESEC_GROUP, &v19) && *__error() != 2
    || filesec_get_property(a4, FILESEC_MODE, &v18) && *__error() != 2
    || (filesec_get_property(a4, FILESEC_ACL_RAW, &v16) || filesec_get_property(a4, FILESEC_ACL_ALLOCSIZE, &v17))
    && *__error() != 2)
  {
    return 0xFFFFFFFFLL;
  }

  uint64_t v6 = v16;
  if (v16)
  {
    if (v16 == (int *)1)
    {
LABEL_27:
      *__error() = 22;
      return 0xFFFFFFFFLL;
    }

    int v7 = 1;
  }

  else
  {
    int v7 = 0;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    uint64_t v6 = &v11;
    __int128 v16 = &v11;
    int v11 = 19710317;
    LODWORD(v14) = -1;
  }

  if (filesec_get_property(a4, FILESEC_UUID, v6 + 1))
  {
    if (*__error() != 2) {
      return 0xFFFFFFFFLL;
    }
    unint64_t v8 = v16;
    *(void *)(v16 + 3) = 0LL;
    *(void *)(v8 + 1) = 0LL;
  }

  else
  {
    int v7 = 1;
    unint64_t v8 = v16;
  }

  if (!filesec_get_property(a4, FILESEC_GRPUUID, v8 + 5))
  {
LABEL_23:
    switch(a1)
    {
      case 2:
        return __mkdir_extended();
      case 1:
        return __mkfifo_extended();
      case 0:
        return __open_extended();
    }

    goto LABEL_27;
  }

  if (*__error() == 2)
  {
    uint64_t v9 = v16;
    *(void *)(v16 + 7) = 0LL;
    *(void *)(v9 + 5) = 0LL;
    if (!v7) {
      __int128 v16 = 0LL;
    }
    goto LABEL_23;
  }

  return 0xFFFFFFFFLL;
}

int mkfifox_np(const char *a1, filesec_t a2)
{
  return _mkfilex_np(1, (int)a1, 0, a2);
}

int mkdirx_np(const char *a1, filesec_t a2)
{
  return _mkfilex_np(2, (int)a1, 0, a2);
}

int posix_spawnp( pid_t *a1, const char *a2, const posix_spawn_file_actions_t *a3, const posix_spawnattr_t *a4, char *const __argv[], char *const __envp[])
{
  BOOL v29 = a4;
  char *const *__attribute__((__org_arrdim(0,0))) v30 = __envp;
  int v28 = a3;
  getenv("PATH");
  if (_platform_strchr())
  {
    int v27 = 0;
    int v32 = 0LL;
    uint64_t v9 = a2;
    while (1)
    {
      uint64_t v16 = posix_spawn(a1, v9, v28, v29, __argv, v30);
      int v12 = v16;
      if (v16 <= 0x3F)
      {
        if (((1LL << v16) & 0xC000000000100004LL) != 0) {
          goto LABEL_6;
        }
        if (((1LL << v16) & 0x4001080) != 0) {
          return v12;
        }
        if (v16 == 8LL)
        {
          uint64_t v19 = 0LL;
          int v20 = 1;
          do
          {
            unsigned int v21 = __argv[v19];
            --v20;
            ++v19;
          }

          while (v21);
          MEMORY[0x1895FE128](v16, v17);
          gid_t v23 = &v26[-v22];
          if (v24)
          {
            stat v25 = *__argv;
            _platform_memmove();
          }

          else
          {
            *((void *)v23 + 2) = 0LL;
            stat v25 = "sh";
          }

          *(void *)gid_t v23 = v25;
          *((void *)v23 + 1) = v9;
          return posix_spawn(a1, "/bin/sh", v28, v29, (char *const *)v23, v30);
        }
      }

      if (!stat(v9, &v31))
      {
        int v27 = 1;
        if (v12 != 13) {
          return v12;
        }
      }

LABEL_6:
      __int128 v13 = strsep(&v32, ":");
      if (!v13)
      {
        if (v27) {
          return 13;
        }
        else {
          return 2;
        }
      }

      int v14 = 1;
      if (*v13) {
        int v14 = _platform_strlen();
      }
      uint64_t v15 = v14 + (uint64_t)(int)_platform_strlen();
      _platform_memmove();
      v33[v14] = 47;
      _platform_memmove();
      v33[v15 + 1] = 0;
    }
  }

  if (*a2)
  {
    uint64_t v10 = _platform_strlen();
    int v32 = &v26[-((MEMORY[0x1895FE128](v10, v11) + 16) & 0xFFFFFFFFFFFFFFF0LL)];
    _platform_strcpy();
    int v27 = 0;
    uint64_t v9 = v33;
    goto LABEL_6;
  }

  return 2;
}

int settimeofday(const timeval *a1, const timezone *a2)
{
  int v3 = __settimeofday();
  if (!v3)
  {
    notify_post("com.apple.system.clock_set");
    if (!a1) {
      return v3;
    }
    goto LABEL_3;
  }

  if (a1)
  {
LABEL_3:
    __darwin_time_t tv_sec = a1->tv_sec;
    __darwin_suseconds_t tv_usec = a1->tv_usec;
    int v7 = 0LL;
    asprintf(&v7, "settimeofday({%#lx,%#x}) == %d", tv_sec, tv_usec, v3);
    _simple_asl_log();
    free(v7);
  }

  return v3;
}

int sigaction(int a1, const sigaction *a2, sigaction *a3)
{
  int v4 = __platform_sigaction();
  if (v4 == -1)
  {
    int v5 = __error();
    if (a1)
    {
      if (*v5 == 45) {
        sigaction_cold_1();
      }
    }
  }

  return v4;
}

int statx_np(const char *a1, stat *a2, filesec_t a3)
{
  int v4 = a1;
  if (a3) {
    return statx1( (uint64_t)&v4,  (uint64_t (*)(uint64_t, uint64_t, _DWORD *, unint64_t *))statx_syscall,  (uint64_t)a2,  a3);
  }
  else {
    return stat(a1, a2);
  }
}

uint64_t statx1( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, _DWORD *, unint64_t *), uint64_t a3, _filesec *a4)
{
  unint64_t v8 = malloc(0x1ACuLL);
  __int16 v18 = v8;
  if (!v8) {
    return 12LL;
  }
  uint64_t v9 = v8;
  unint64_t v17 = 428LL;
  uint64_t v10 = a2(a1, a3, v8, &v17);
  if ((_DWORD)v10)
  {
    uint64_t v11 = v10;
  }

  else
  {
    unint64_t v13 = 428LL;
    while (v17 > v13)
    {
      int v14 = realloc(v9, v17 + 48);
      __int16 v18 = v14;
      if (!v14)
      {
        __int16 v18 = v9;
        uint64_t v11 = 0LL;
        *__error() = 12;
        goto LABEL_4;
      }

      uint64_t v15 = v14;
      unint64_t v13 = v17;
      uint64_t v16 = a2(a1, a3, v14, &v17);
      uint64_t v9 = v15;
      if ((_DWORD)v16)
      {
        uint64_t v11 = v16;
        uint64_t v9 = v15;
        goto LABEL_4;
      }
    }

    filesec_set_property(a4, FILESEC_OWNER, (const void *)(a3 + 16));
    filesec_set_property(a4, FILESEC_GROUP, (const void *)(a3 + 20));
    filesec_set_property(a4, FILESEC_MODE, (const void *)(a3 + 4));
    if (v17 < 0x44)
    {
      filesec_set_property(a4, FILESEC_UUID, 0LL);
      filesec_set_property(a4, FILESEC_GRPUUID, 0LL);
    }

    else
    {
      filesec_set_property(a4, FILESEC_UUID, v9 + 1);
      uint64_t v9 = v18;
      filesec_set_property(a4, FILESEC_GRPUUID, v18 + 5);
      if (v9[9] != -1)
      {
        filesec_set_property(a4, FILESEC_ACL_ALLOCSIZE, &v17);
        filesec_set_property(a4, FILESEC_ACL_RAW, &v18);
        return 0LL;
      }
    }

    filesec_set_property(a4, FILESEC_ACL_ALLOCSIZE, 0LL);
    filesec_set_property(a4, FILESEC_ACL_RAW, 0LL);
    uint64_t v11 = 0LL;
  }

LABEL_4:
  free(v9);
  return v11;
}

uint64_t statx_syscall()
{
  return __stat64_extended();
}

int fstatx_np(int a1, stat *a2, filesec_t a3)
{
  int v4 = a1;
  if (a3) {
    return statx1( (uint64_t)&v4,  (uint64_t (*)(uint64_t, uint64_t, _DWORD *, unint64_t *))fstatx_syscall,  (uint64_t)a2,  a3);
  }
  else {
    return fstat(a1, a2);
  }
}

uint64_t fstatx_syscall()
{
  return __fstat64_extended();
}

int lstatx_np(const char *a1, stat *a2, filesec_t a3)
{
  int v4 = a1;
  if (a3) {
    return statx1( (uint64_t)&v4,  (uint64_t (*)(uint64_t, uint64_t, _DWORD *, unint64_t *))lstatx_syscall,  (uint64_t)a2,  a3);
  }
  else {
    return lstat(a1, a2);
  }
}

uint64_t lstatx_syscall()
{
  return __lstat64_extended();
}

int umaskx_np(filesec_t a1)
{
  uint64_t v4 = 0LL;
  uint64_t v5 = 0LL;
  __int16 v3 = 0;
  if (a1)
  {
    if (filesec_get_property(a1, FILESEC_MODE, &v3) && *__error() != 2
      || (filesec_get_property(a1, FILESEC_ACL_RAW, &v5) || filesec_get_property(a1, FILESEC_ACL_ALLOCSIZE, &v4))
      && *__error() != 2)
    {
      return -1;
    }

    if (!v4) {
      uint64_t v5 = 0LL;
    }
  }

  return __umask_extended();
}

uint64_t OSMemoryNotificationCurrentLevel()
{
  return 0LL;
}

uint64_t _OSThermalNotificationLevelForBehavior(unsigned int a1)
{
  uint64_t state64 = -1LL;
  if (a1 > 0xA) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = a1;
  __int16 v3 = (dispatch_once_t *)((char *)&predicates + 8 * a1);
  v5[0] = MEMORY[0x1895FED80];
  v5[1] = 0x40000000LL;
  v5[2] = ___OSThermalNotificationLevelForBehavior_block_invoke;
  v5[3] = &__block_descriptor_tmp;
  unsigned int v6 = a1;
  if (*v3 != -1) {
    dispatch_once(v3, v5);
  }
  notify_get_state(tokens[v2], &state64);
  return state64;
}

uint64_t _OSThermalNotificationSetLevelForBehavior(uint64_t result, unsigned int a2)
{
  if (a2 <= 0xA)
  {
    uint64_t v3 = (int)result;
    uint64_t v4 = a2;
    uint64_t v5 = (dispatch_once_t *)((char *)&predicates + 8 * a2);
    block[0] = MEMORY[0x1895FED80];
    block[1] = 0x40000000LL;
    block[2] = ___OSThermalNotificationSetLevelForBehavior_block_invoke;
    block[3] = &__block_descriptor_tmp_5;
    unsigned int v7 = a2;
    if (*v5 != -1) {
      dispatch_once(v5, block);
    }
    int result = notify_set_state(tokens[v4], v3);
    if (a2 == 8)
    {
      if (qword_18C52B830 != -1) {
        dispatch_once(&qword_18C52B830, &__block_literal_global);
      }
      return notify_set_state(dword_18C52B860, 0xBuLL);
    }
  }

  return result;
}

uint64_t OSThermalNotificationCurrentLevel()
{
  if (thermalLevelsReady == 1) {
    return _OSThermalNotificationLevelForBehavior(0);
  }
  uint64_t state64 = 0LL;
  if (qword_18C52B830 != -1) {
    dispatch_once(&qword_18C52B830, &__block_literal_global_8);
  }
  notify_get_state(dword_18C52B860, &state64);
  if (state64 == 11)
  {
    thermalLevelsReady = 1;
    return _OSThermalNotificationLevelForBehavior(0);
  }

  else
  {
    thermalLevelsReady = 0;
    return 0xFFFFFFFFLL;
  }

uint64_t __OSThermalNotificationCurrentLevel_block_invoke()
{
  return notify_register_check("com.apple.system.thermalmitigation.thermaltableready", &dword_18C52B860);
}

char *__cdecl stpcpy(char *__dst, const char *__src)
{
  uint64_t v3 = _platform_strlen();
  _platform_memmove();
  return &__dst[v3];
}

char *__cdecl stpncpy(char *__dst, const char *__src, size_t __n)
{
  size_t v5 = _platform_strnlen();
  if (__n <= v5)
  {
    _platform_memmove();
    return &__dst[__n];
  }

  else
  {
    size_t v6 = v5;
    _platform_memmove();
    unsigned int v7 = &__dst[v6];
    _platform_bzero();
  }

  return v7;
}

char *__cdecl strcat(char *__s1, const char *__s2)
{
  return __s1;
}

char *__cdecl strncat(char *__s1, const char *__s2, size_t __n)
{
  uint64_t v5 = _platform_strlen();
  unint64_t v6 = _platform_strnlen();
  if (v6 < __n) {
    __uint64_t n = v6;
  }
  _platform_memmove();
  __s1[__n + v5] = 0;
  return __s1;
}

int sync_volume_np(const char *a1, int a2)
{
  int v7 = a2 & 3;
  int v3 = *__error();
  int v4 = fsctl(a1, 0x80044101uLL, &v7, 0);
  int v5 = 0;
  if (v4 == -1) {
    int v5 = *__error();
  }
  *__error() = v3;
  return v5;
}

int fsync_volume_np(int a1, int a2)
{
  int v7 = a2 & 3;
  int v3 = *__error();
  int v4 = ffsctl(a1, 0x80004101uLL, &v7, 0);
  int v5 = 0;
  if (v4 == -1) {
    int v5 = *__error();
  }
  *__error() = v3;
  return v5;
}

__n128 libc_set_introspection_hooks(__n128 *a1, uint64_t a2, unint64_t a3)
{
  if (a3 <= 7) {
    libc_set_introspection_hooks_cold_1();
  }
  if (a2)
  {
    if (a3 <= 0x27) {
      libc_set_introspection_hooks_cold_4();
    }
    if (a3 != 40) {
      _platform_bzero();
    }
    __n128 result = (__n128)libc_hooks;
    __int128 v7 = *(_OWORD *)&off_18C52C3C8;
    *(void *)(a2 + 32) = off_18C52C3D8;
    *(__n128 *)a2 = result;
    *(_OWORD *)(a2 + 16) = v7;
  }

  if (a1)
  {
    if (!a1->n128_u64[0]) {
      libc_set_introspection_hooks_cold_2();
    }
    if (a3 <= 0x27) {
      libc_set_introspection_hooks_cold_3();
    }
    __int128 v8 = (__int128)*a1;
    __n128 result = a1[1];
    off_18C52C3D8 = (uint64_t (*)(void, void))a1[2].n128_u64[0];
    libc_hooks = v8;
    *(__n128 *)&off_18C52C3C8 = result;
    *(void *)&libc_hooks = 1LL;
  }

  return result;
}

int dirfd(DIR *dirp)
{
  if (!dirp || (int result = dirp->__dd_fd, result < 0))
  {
    *__error() = 22;
    return -1;
  }

  return result;
}

uint64_t _os_crash_msg(uint64_t a1)
{
  if (a1)
  {
    qword_18C52A990 = a1;
    if (_os_crash_callback) {
      _os_crash_callback();
    }
  }

  uint64_t v1 = abort_with_payload();
  return _os_crash_fmt(v1);
}

void *_os_crash_fmt(uint64_t a1)
{
  qword_18C52A990 = *(void *)(a1 + 40);
  if (_os_crash_callback) {
    _os_crash_callback();
  }
  int result = dlopen("libsystem_trace.dylib", 17);
  if (result) {
    _os_crash_fmt_cold_1();
  }
  return result;
}

uint64_t _os_log_redirect(const mach_header_64 *a1, uint64_t a2)
{
  unint64_t size = 0LL;
  int v3 = getsectiondata(a1, "__DATA", "__os_assumes_log", &size);
  if (v3) {
    BOOL v4 = size > 7;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4 && *(void *)v3) {
    return (*(uint64_t (**)(uint64_t))v3)(a2);
  }
  else {
    return 0LL;
  }
}

void _os_get_image_uuid(uint64_t a1, uuid_t uu)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v3)
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = 32LL;
    while (1)
    {
      uint64_t v7 = v6 + a1;
      if (*(_DWORD *)(v6 + a1) == 27) {
        break;
      }
      v6 += *(unsigned int *)(v7 + 4);
      if (v3 == ++v5) {
        goto LABEL_9;
      }
    }

    uuid_copy(uu, (const unsigned __int8 *)(v7 + 8));
    uint64_t v8 = *(unsigned int *)(a1 + 16);
  }

  else
  {
    uint64_t v8 = 0LL;
    uint64_t v5 = 0LL;
  }

  if (v5 == v8) {
LABEL_9:
  }
    uuid_clear(uu);
}

uint64_t _os_get_build(void *a1)
{
  size_t v3 = 32LL;
  *(void *)BOOL v4 = 0x4100000001LL;
  uint64_t result = sysctl(v4, 2u, a1, &v3, 0LL, 0LL);
  if (!(_DWORD)result && v3 == 1) {
    strcpy((char *)a1, "99Z999");
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_0(uint64_t a1, uint64_t a2, const char *a3)
{
  return snprintf((char *)(v3 - 197), 0x18uLL, a3);
}

uint64_t OUTLINED_FUNCTION_1( int a1, int a2, const char *a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, __int16 a18, char a19, char __str)
{
  return snprintf(&__str, 0x100uLL, a3);
}

uint64_t OUTLINED_FUNCTION_2@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 72) = a1;
  return _platform_bzero();
}

uint64_t OUTLINED_FUNCTION_3(uint64_t a1, uint64_t a2, const char *a3)
{
  return snprintf((char *)(v3 - 173), 0x40uLL, a3);
}

  ;
}

  ;
}

void OUTLINED_FUNCTION_6()
{
}

void OUTLINED_FUNCTION_7( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
}

uint64_t OUTLINED_FUNCTION_8()
{
  return _os_get_build((void *)(v0 - 229));
}

char *OUTLINED_FUNCTION_9(const char *a1)
{
  return strrchr(a1, 47);
}

uint64_t OUTLINED_FUNCTION_10( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, __int16 a18, char a19, char a20)
{
  return v21(a1, v20, &a20);
}

uint64_t OUTLINED_FUNCTION_11( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, Dl_info *a14)
{
  return dladdr(v14, (Dl_info *)&a14);
}

char *OUTLINED_FUNCTION_12@<X0>(int a1@<W0>, const char *a2@<X8>)
{
  if (a1 == 1) {
    return getenv(v2);
  }
  else {
    return getenv(a2);
  }
}

uint64_t OUTLINED_FUNCTION_13( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, __int16 a18, char a19, char a20)
{
  return _os_debug_log_error_offset((uint64_t)&a20);
}

uint64_t OUTLINED_FUNCTION_14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, const mach_header_64 *a15, uint64_t a16, uint64_t a17, __int16 a18, char a19, char a20)
{
  return _os_log_redirect(a15, (uint64_t)&a20);
}

uint64_t creat_NOCANCEL()
{
  return __open_nocancel();
}

uint64_t gethostid(void)
{
  *(void *)uint64_t v5 = 0xB00000001LL;
  size_t v4 = 4LL;
  int v0 = sysctl(v5, 2u, &v3, &v4, 0LL, 0LL);
  int v1 = v3;
  if (v0 == -1) {
    return -1;
  }
  return v1;
}

char *__cdecl getwd(char *a1)
{
  uint64_t v2 = getcwd(a1, 0x400uLL);
  if (!v2)
  {
    int v3 = __error();
    strerror_r(*v3, a1, 0x400uLL);
  }

  return v2;
}

int killpg(pid_t a1, int a2)
{
  if (a1 != 1) {
    return __kill();
  }
  *__error() = 1;
  return -1;
}

void sethostid(uint64_t a1)
{
  uint64_t v1 = a1;
  *(void *)uint64_t v2 = 0xB00000001LL;
  sysctl(v2, 2u, 0LL, 0LL, &v1, 8uLL);
}

pid_t setpgrp(void)
{
  pid_t v0 = getpgrp();
  pid_t v1 = getpid();
  pid_t v2 = v1;
  if (v0 != v1) {
    setpgid(v1, v1);
  }
  return v2;
}

int setrgid(gid_t a1)
{
  return setregid(a1, 0xFFFFFFFF);
}

int setruid(uid_t a1)
{
  return setreuid(a1, 0xFFFFFFFF);
}

uint64_t __bt_close(void *a1)
{
  uint64_t v2 = a1[7];
  int v3 = *(void **)(v2 + 32);
  if (v3)
  {
    mpool_put(*(MPOOL **)v2, v3, 0);
    *(void *)(v2 + 32) = 0LL;
  }

  uint64_t result = __bt_sync((uint64_t)a1, 0);
  if ((_DWORD)result != -1)
  {
    uint64_t result = mpool_close(*(MPOOL **)v2);
    if ((_DWORD)result != -1)
    {
      uint64_t v5 = *(void **)(v2 + 48);
      if (v5)
      {
        free(v5);
        *(void *)(v2 + 48) = 0LL;
        *(void *)(v2 + 56) = 0LL;
      }

      uint64_t v6 = *(void **)(v2 + 480);
      if (v6)
      {
        free(v6);
        *(void *)(v2 + 480) = 0LL;
        *(void *)(v2 + 488) = 0LL;
      }

      uint64_t v7 = *(void **)(v2 + 496);
      if (v7) {
        free(v7);
      }
      free((void *)v2);
      free(a1);
      else {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t __bt_sync(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 56);
  size_t v4 = *(void **)(v3 + 32);
  if (v4)
  {
    mpool_put(*(MPOOL **)v3, v4, 0);
    *(void *)(v3 + 32) = 0LL;
  }

  if (a2)
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }

  int v6 = *(_DWORD *)(v3 + 636);
  if ((v6 & 0x15) != 4) {
    return 0LL;
  }
  if ((v6 & 2) != 0)
  {
    uint64_t v7 = mpool_get(*(MPOOL **)v3, 0, 0);
    if (!v7) {
      return 0xFFFFFFFFLL;
    }
    int v8 = *(_DWORD *)(v3 + 520);
    int v9 = *(_DWORD *)(v3 + 516);
    int v10 = *(_DWORD *)(v3 + 616);
    int v11 = *(_DWORD *)(v3 + 636) & 0xA0;
    *(void *)uint64_t v7 = 0x300053162LL;
    int v7[2] = v8;
    v7[3] = v9;
    v7[4] = v10;
    v7[5] = v11;
    mpool_put(*(MPOOL **)v3, v7, 1u);
  }

  uint64_t result = mpool_sync(*(MPOOL **)v3);
  if (!(_DWORD)result) {
    *(_DWORD *)(v3 + 636) &= ~4u;
  }
  return result;
}

unsigned int *__bt_pgin(unsigned int *result, int a2, uint64_t a3)
{
  if ((result[159] & 8) != 0)
  {
    if (a2)
    {
      unsigned int v3 = bswap32(*(_DWORD *)(a3 + 4));
      *(_DWORD *)a3 = bswap32(*(_DWORD *)a3);
      *(_DWORD *)(a3 + 4) = v3;
      unsigned int v4 = bswap32(*(_DWORD *)(a3 + 12));
      *(_DWORD *)(a3 + 8) = bswap32(*(_DWORD *)(a3 + 8));
      *(_DWORD *)(a3 + 12) = v4;
      uint64_t v5 = bswap32(*(unsigned __int16 *)(a3 + 16)) >> 16;
      *(_WORD *)(a3 + 16) = v5;
      *(_WORD *)(a3 + 18) = bswap32(*(unsigned __int16 *)(a3 + 18)) >> 16;
      unint64_t v6 = v5 + 131052;
      int v7 = v4 & 0x1F;
      if (v7 == 1)
      {
        uint64_t v18 = (unsigned __int16)(v6 >> 1);
        if ((_DWORD)v18)
        {
          uint64_t v19 = (_WORD *)(a3 + 20);
          do
          {
            uint64_t v20 = bswap32((unsigned __int16)*v19) >> 16;
            *v19++ = v20;
            uint64_t v21 = a3 + v20;
            unsigned int v22 = bswap32(*(_DWORD *)(v21 + 4));
            *(_DWORD *)uint64_t v21 = bswap32(*(_DWORD *)v21);
            *(_DWORD *)(v21 + 4) = v22;
            if ((*(_BYTE *)(v21 + 8) & 2) != 0)
            {
              *(_DWORD *)(v21 + 9) = bswap32(*(_DWORD *)(v21 + 9));
              *(_DWORD *)(v21 + 13) = bswap32(*(_DWORD *)(v21 + 13));
            }

            --v18;
          }

          while (v18);
        }
      }

      else
      {
        uint64_t v8 = (unsigned __int16)(v6 >> 1);
        if (v7 == 2 && (_DWORD)v8 != 0)
        {
          int v10 = (_WORD *)(a3 + 20);
          do
          {
            uint64_t v11 = bswap32((unsigned __int16)*v10) >> 16;
            *v10++ = v11;
            uint64_t v12 = a3 + v11;
            unsigned int v13 = bswap32(*(_DWORD *)(v12 + 4));
            *(_DWORD *)uint64_t v12 = bswap32(*(_DWORD *)v12);
            *(_DWORD *)(v12 + 4) = v13;
            char v14 = *(_BYTE *)(v12 + 8);
            if ((v14 & 3) != 0)
            {
              if ((*(_BYTE *)(v12 + 8) & 2) == 0)
              {
                uint64_t v15 = (_DWORD *)(v12 + 9);
                if ((v14 & 1) == 0) {
                  goto LABEL_15;
                }
LABEL_14:
                unsigned int v17 = bswap32(v15[2]);
                v15[1] = bswap32(v15[1]);
                v15[2] = v17;
                goto LABEL_15;
              }

              unsigned int v16 = *(_DWORD *)(v12 + 13);
              uint64_t v15 = (_DWORD *)(v12 + 13);
              *(v15 - 1) = bswap32(*(v15 - 1));
              *uint64_t v15 = bswap32(v16);
              if ((v14 & 1) != 0) {
                goto LABEL_14;
              }
            }

unsigned int *mswap(unsigned int *result)
{
  unsigned int v1 = bswap32(result[1]);
  *uint64_t result = bswap32(*result);
  result[1] = v1;
  unsigned int v2 = bswap32(result[3]);
  result[2] = bswap32(result[2]);
  result[3] = v2;
  unsigned int v3 = bswap32(result[5]);
  result[4] = bswap32(result[4]);
  result[5] = v3;
  return result;
}

unsigned int *__bt_pgout(unsigned int *result, int a2, uint64_t a3)
{
  if ((result[159] & 8) != 0)
  {
    if (a2)
    {
      unint64_t v3 = *(unsigned __int16 *)(a3 + 16) + 131052LL;
      if ((*(_DWORD *)(a3 + 12) & 0x1F) == 1)
      {
        uint64_t v13 = (unsigned __int16)(v3 >> 1);
        if ((_DWORD)v13)
        {
          char v14 = (_WORD *)(a3 + 20);
          do
          {
            uint64_t v15 = a3 + (unsigned __int16)*v14;
            unsigned int v16 = bswap32(*(_DWORD *)(v15 + 4));
            *(_DWORD *)uint64_t v15 = bswap32(*(_DWORD *)v15);
            *(_DWORD *)(v15 + 4) = v16;
            if ((*(_BYTE *)(v15 + 8) & 2) != 0)
            {
              *(_DWORD *)(v15 + 9) = bswap32(*(_DWORD *)(v15 + 9));
              *(_DWORD *)(v15 + 13) = bswap32(*(_DWORD *)(v15 + 13));
            }

            *char v14 = bswap32((unsigned __int16)*v14) >> 16;
            ++v14;
            --v13;
          }

          while (v13);
        }
      }

      else
      {
        uint64_t v4 = (unsigned __int16)(v3 >> 1);
        if ((*(_DWORD *)(a3 + 12) & 0x1F) == 2 && (_DWORD)v4 != 0)
        {
          unint64_t v6 = (_WORD *)(a3 + 20);
          do
          {
            uint64_t v7 = a3 + (unsigned __int16)*v6;
            unsigned int v8 = bswap32(*(_DWORD *)(v7 + 4));
            *(_DWORD *)uint64_t v7 = bswap32(*(_DWORD *)v7);
            *(_DWORD *)(v7 + 4) = v8;
            char v9 = *(_BYTE *)(v7 + 8);
            if ((v9 & 3) != 0)
            {
              if ((*(_BYTE *)(v7 + 8) & 2) == 0)
              {
                int v10 = (_DWORD *)(v7 + 9);
                if ((v9 & 1) == 0) {
                  goto LABEL_15;
                }
LABEL_14:
                unsigned int v12 = bswap32(v10[2]);
                v10[1] = bswap32(v10[1]);
                v10[2] = v12;
                goto LABEL_15;
              }

              unsigned int v11 = *(_DWORD *)(v7 + 13);
              int v10 = (_DWORD *)(v7 + 13);
              *(v10 - 1) = bswap32(*(v10 - 1));
              *int v10 = bswap32(v11);
              if ((v9 & 1) != 0) {
                goto LABEL_14;
              }
            }

uint64_t __bt_delete(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = *(void *)(a1 + 56);
  unint64_t v6 = *(void **)(v5 + 32);
  if (v6)
  {
    mpool_put(*(MPOOL **)v5, v6, 0);
    *(void *)(v5 + 32) = 0LL;
  }

  if ((*(_BYTE *)(v5 + 636) & 0x10) != 0)
  {
    unsigned int v17 = __error();
    int v18 = 1;
LABEL_30:
    *unsigned int v17 = v18;
    return 0xFFFFFFFFLL;
  }

  if (a3 != 1)
  {
    if (!a3)
    {
      uint64_t v7 = __bt_search(v5, a2, &v28);
      if (!v7) {
        return 0xFFFFFFFFLL;
      }
      unsigned int v8 = v7;
      if (v28)
      {
        while (2)
        {
          char v9 = *v8;
          while (1)
          {
            if (__bt_dleaf(v5, a2, v9, *((unsigned __int16 *)v8 + 4)))
            {
LABEL_39:
              mpool_put(*(MPOOL **)v5, v9, 0);
              return 0xFFFFFFFFLL;
            }

            if ((*(_BYTE *)(v5 + 636) & 0x20) != 0)
            {
              if ((v9[4] & 0xFFFE) == 0x14)
              {
              }

              else
              {
                mpool_put(*(MPOOL **)v5, v9, 1u);
              }

              goto LABEL_41;
            }

            unint64_t v10 = *((unsigned __int16 *)v8 + 4);
            uint64_t v11 = *((unsigned __int16 *)v9 + 8);
            unint64_t v12 = (unint64_t)(v11 - 20) >> 1;
            if (v12 <= v10) {
              break;
            }
            if (__bt_cmp(v5, a2, (uint64_t *)v8))
            {
              unint64_t v10 = *((unsigned __int16 *)v8 + 4);
              uint64_t v11 = *((unsigned __int16 *)v9 + 8);
              unint64_t v12 = (unint64_t)(v11 - 20) >> 1;
              break;
            }
          }

          BOOL v13 = v12 == v10;
          *((_WORD *)v8 + 4) = v10 - 1;
          if ((_DWORD)v10)
          {
            while (!__bt_cmp(v5, a2, (uint64_t *)v8))
            {
              int v14 = *((unsigned __int16 *)v8 + 4);
              *((_WORD *)v8 + 4) = v14 - 1;
              if (!v14)
              {
                BOOL v13 = 1;
                break;
              }
            }

            LOWORD(v11) = *((_WORD *)v9 + 8);
          }

          if ((v11 & 0xFFFE) == 0x14)
          {
          }

          else
          {
            mpool_put(*(MPOOL **)v5, v9, 1u);
            if (!v13) {
              goto LABEL_41;
            }
          }

          uint64_t v15 = __bt_search(v5, a2, &v28);
          if (!v15) {
            goto LABEL_41;
          }
          unsigned int v8 = v15;
          if (v28) {
            continue;
          }
          break;
        }

        uint64_t v16 = 0LL;
      }

      else
      {
        uint64_t v16 = 1LL;
      }

      uint64_t v20 = *(MPOOL **)v5;
      uint64_t v21 = *v8;
      unsigned int v22 = 0;
      goto LABEL_37;
    }

    goto LABEL_29;
  }

  if ((*(_BYTE *)(v5 + 68) & 8) == 0)
  {
LABEL_29:
    unsigned int v17 = __error();
    int v18 = 22;
    goto LABEL_30;
  }

  if ((*(_BYTE *)(v5 + 68) & 7) != 0) {
    return 1LL;
  }
  gid_t v23 = (pgno_t *)mpool_get(*(MPOOL **)v5, *(_DWORD *)(v5 + 40), 0);
  int v27 = v23;
  if (!v23) {
    return 0xFFFFFFFFLL;
  }
  int v24 = v23;
  if ((v23[4] & 0xFFFE) == 0x16)
  {
    int v24 = v27;
  }

  uint64_t v25 = __bt_dleaf(v5, 0LL, v24, *(unsigned __int16 *)(v5 + 44));
  if ((v24[4] & 0xFFFE) == 0x14 && (_DWORD)v25 == 0)
  {
    return 0xFFFFFFFFLL;
  }

  uint64_t v16 = v25;
  unsigned int v22 = v25 == 0;
  uint64_t v20 = *(MPOOL **)v5;
  uint64_t v21 = v24;
LABEL_37:
  mpool_put(v20, v21, v22);
  if (!(_DWORD)v16)
  {
LABEL_41:
    uint64_t v16 = 0LL;
    *(_DWORD *)(v5 + 636) |= 4u;
  }

  return v16;
}

BOOL __bt_stkacq(uint64_t a1, void **a2, pgno_t *a3)
{
  uint64_t v7 = __bt_search(a1, (uint64_t)(a3 + 2), &v33);
  if (!v7) {
    return 1LL;
  }
  unsigned int v8 = *v7;
  if (**v7 != *a3)
  {
    uint64_t v11 = a1 + 72;
    while (*v8 != *a3)
    {
      pgno_t v12 = v8[2];
      mpool_put(*(MPOOL **)a1, v8, 0);
      if (!v12)
      {
        unsigned int v22 = __bt_search(a1, (uint64_t)(a3 + 2), &v33);
        if (!v22) {
          return 1LL;
        }
        unsigned int v8 = *v22;
        while (*v8 != *a3)
        {
          pgno_t v23 = v8[1];
          if (!v23) {
            break;
          }
          mpool_put(*(MPOOL **)a1, v8, 0);
          uint64_t v24 = *(void *)(a1 + 472);
          if (v24 != v11)
          {
            int v25 = 0;
            while (1)
            {
              pgno_t v26 = *(_DWORD *)(v24 - 8);
              *(void *)(a1 + 472) = v24 - 8;
              int v27 = mpool_get(*(MPOOL **)a1, v26, 0);
              if (!v27) {
                return 1LL;
              }
              unsigned int v8 = v27;
              __int16 v28 = *(_WORD *)(v24 - 4);
              if (v28)
              {
                LOWORD(v3) = v28 - 1;
                uint64_t v29 = *(void *)(a1 + 472);
                *(_DWORD *)uint64_t v29 = *v27;
                *(_WORD *)(v29 + 4) = v28 - 1;
                *(void *)(a1 + 472) = v29 + 8;
                if (v25) {
                  goto LABEL_32;
                }
                break;
              }

              mpool_put(*(MPOOL **)a1, v27, 0);
              ++v25;
              uint64_t v24 = *(void *)(a1 + 472);
              if (v24 == v11)
              {
LABEL_32:
                while (1)
                {
                  pgno_t v30 = *(_DWORD *)((char *)v8 + *((unsigned __int16 *)v8 + (unsigned __int16)v3 + 10) + 4);
                  mpool_put(*(MPOOL **)a1, v8, 0);
                  stat v31 = mpool_get(*(MPOOL **)a1, v30, 0);
                  if (!v31) {
                    return 1LL;
                  }
                  unsigned int v8 = v31;
                  unsigned int v3 = ((*((unsigned __int16 *)v31 + 8) + 131052) >> 1) - 1;
                  uint64_t v32 = *(void *)(a1 + 472);
                  *(_DWORD *)uint64_t v32 = v30;
                  *(_WORD *)(v32 + 4) = v3;
                  *(void *)(a1 + 472) = v32 + 8;
                  if (!--v25) {
                    goto LABEL_34;
                  }
                }
              }
            }
          }

LABEL_34:
          mpool_put(*(MPOOL **)a1, v8, 0);
          unsigned int v8 = mpool_get(*(MPOOL **)a1, v23, 0);
          BOOL result = 1LL;
          if (!v8) {
            return result;
          }
        }

        break;
      }

      uint64_t v13 = *(void *)(a1 + 472);
      if (v13 != v11)
      {
        int v14 = 0;
        while (1)
        {
          pgno_t v15 = *(_DWORD *)(v13 - 8);
          *(void *)(a1 + 472) = v13 - 8;
          uint64_t v16 = mpool_get(*(MPOOL **)a1, v15, 0);
          if (!v16) {
            return 1LL;
          }
          unsigned int v8 = v16;
          uint64_t v17 = *(unsigned __int16 *)(v13 - 4);
          if ((((unint64_t)*((unsigned __int16 *)v16 + 8) - 20) >> 1) - 1 != v17)
          {
            LOWORD(v3) = v17 + 1;
            uint64_t v18 = *(void *)(a1 + 472);
            *(_DWORD *)uint64_t v18 = *v16;
            *(_WORD *)(v18 + 4) = v17 + 1;
            *(void *)(a1 + 472) = v18 + 8;
            goto LABEL_15;
          }

          mpool_put(*(MPOOL **)a1, v16, 0);
          ++v14;
          uint64_t v13 = *(void *)(a1 + 472);
          if (v13 == v11) {
            goto LABEL_15;
          }
        }
      }

      int v14 = 0;
LABEL_15:
      int v19 = v14 + 1;
      while (--v19)
      {
        pgno_t v20 = *(_DWORD *)((char *)v8 + *((unsigned __int16 *)v8 + (unsigned __int16)v3 + 10) + 4);
        uint64_t v21 = *(void *)(a1 + 472);
        *(_DWORD *)uint64_t v21 = v20;
        *(_WORD *)(v21 + 4) = 0;
        *(void *)(a1 + 472) = v21 + 8;
        mpool_put(*(MPOOL **)a1, v8, 0);
        unsigned int v8 = mpool_get(*(MPOOL **)a1, v20, 0);
        LOWORD(v3) = 0;
        if (!v8) {
          return 1LL;
        }
      }

      mpool_put(*(MPOOL **)a1, v8, 0);
      unsigned int v8 = mpool_get(*(MPOOL **)a1, v12, 0);
      BOOL result = 1LL;
      if (!v8) {
        return result;
      }
    }
  }

  mpool_put(*(MPOOL **)a1, v8, 0);
  char v9 = mpool_get(*(MPOOL **)a1, *a3, 0);
  *a2 = v9;
  return v9 == 0LL;
}

        char v9 = 1LL;
        goto LABEL_39;
      }

    uint64_t v34 = *v36;
    __int128 v83 = v43;
    if (v34 >= 2)
    {
      int v45 = v36[2];
      if (v45 >= 4) {
        break;
      }
    }

    BOOL v35 = 1;
LABEL_53:
    stat v31 = v73;
    pgno_t v30 = v74;
    if (v34 <= v35)
    {
      if (*(void *)&v71[4]) {
        __free_ovflpage(v4, *(uint64_t *)&v71[4]);
      }
LABEL_62:
      BOOL result = 0LL;
      goto LABEL_19;
    }
  }

  regmatch_t v46 = *((unsigned __int16 *)v4 + 6);
  int v47 = 1LL;
  BOOL v35 = 1;
  while (1)
  {
    uint64_t v81 = v33;
    regmatch_t v48 = v45;
    uint64_t v49 = v36[v47];
    __int16 v50 = v46 - v49;
    __int16 v51 = v49 - v48;
    __int16 v77 = v48;
    if (v33[2] >= 4u && (v52 = *v33, uint64_t v53 = &v33[v52], v50 + v51 + 8 <= (unint64_t)v53[1]))
    {
      uint64_t v69 = v53[2] - v50;
      _platform_memmove();
      v33[(unsigned __int16)(v52 + 1)] = v69;
      uint64_t v60 = v69 - v51;
      _platform_memmove();
      uint64_t v59 = v52 + 2;
      v33[(unsigned __int16)(v52 + 2)] = v60;
      *int v33 = v52 + 2;
      unint64_t v56 = v33;
      int v55 = v37;
    }

    else
    {
      uint64_t v54 = __add_ovflpage((unint64_t)v4, v37);
      if (!v54) {
        goto LABEL_58;
      }
      int v55 = v54;
      unint64_t v56 = *(unsigned __int16 **)(v54 + 32);
      uint64_t v57 = *v56;
      uint64_t v58 = v56[v57 + 2] - v50;
      _platform_memmove();
      v56[(unsigned __int16)(v57 + 1)] = v58;
      _platform_memmove();
      uint64_t v59 = v57 + 2;
      v56[(unsigned __int16)(v57 + 2)] = v58 - v51;
      _DWORD *v56 = v57 + 2;
      uint64_t v60 = v58 - v51;
      int v37 = v55;
      int v33 = v56;
    }

    ;
  }

  if (v4 == 103)
  {
    unint64_t v6 = a2 >> 3;
LABEL_14:
    uint64_t v7 = v6 & 7;
    if ((*((_BYTE *)i - 1) & 1) == 0) {
      goto LABEL_22;
    }
    if ((*((_BYTE *)i - 1) & 2) != 0) {
      unsigned int v8 = 7;
    }
    else {
      unsigned int v8 = v6 & 7;
    }
    if ((*((_BYTE *)i - 1) & 0x10) != 0)
    {
      *(_DWORD *)&a2 = a2 & ~((unsigned __int16)*i & (v8 << 6));
      if ((*((_BYTE *)i - 1) & 4) == 0)
      {
LABEL_20:
        if ((*((_BYTE *)i - 1) & 8) == 0) {
          goto LABEL_22;
        }
        goto LABEL_21;
      }
    }

    else if ((*((_BYTE *)i - 1) & 4) == 0)
    {
      goto LABEL_20;
    }

    *(_DWORD *)&a2 = a2 & ~((unsigned __int16)*i & (8 * v8));
    if ((*((_BYTE *)i - 1) & 8) == 0)
    {
LABEL_22:
      if ((*((_BYTE *)i - 1) & 2) == 0) {
        goto LABEL_34;
      }
      if ((*((_BYTE *)i - 1) & 0x10) != 0)
      {
        *(_DWORD *)&a2 = (unsigned __int16)*i & (v7 << 6) | a2;
        if ((*((_BYTE *)i - 1) & 4) == 0)
        {
LABEL_25:
          if ((*((_BYTE *)i - 1) & 8) == 0) {
            goto LABEL_34;
          }
LABEL_32:
          uint64_t v5 = (unsigned __int16)(*i & v7);
          goto LABEL_33;
        }
      }

      else if ((*((_BYTE *)i - 1) & 4) == 0)
      {
        goto LABEL_25;
      }

      *(_DWORD *)&a2 = (unsigned __int16)*i & (8 * v7) | a2;
      if ((*((_BYTE *)i - 1) & 8) == 0) {
        goto LABEL_34;
      }
      goto LABEL_32;
    }

    BOOL result = 1LL;
    *(_BYTE *)(a2 + 1317) = 1;
    return result;
  }

  uint64_t v4 = (char *)malloc(0x60uLL);
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = (unsigned __int8 **)v4;
  *(_DWORD *)uint64_t v4 = 1;
  *((void *)v4 + 1) = destruct_ldpart;
  *((void *)v4 + 8) = 0LL;
  unint64_t v6 = v4 + 72;
  BOOL result = __part_load_locale(a1, (_BYTE *)(a2 + 1314), (void **)v4 + 8, "LC_NUMERIC", 3, 3, (void *)v4 + 9);
  if ((_DWORD)result == -1)
  {
    free(v5);
    return 0xFFFFFFFFLL;
  }

  *(_BYTE *)(a2 + 1317) = 1;
  if (!(_DWORD)result)
  {
    if (!*(_BYTE *)*v6) {
      *unint64_t v6 = ".";
    }
    v5[11] = __fix_locale_grouping_str(v5[11]);
    unsigned int v8 = *(void *)(a2 + 1344);
    if (v8)
    {
      do
      {
        char v9 = __ldaxr((unsigned int *)v8);
        unint64_t v10 = v9 - 1;
      }

      while (__stlxr(v10, (unsigned int *)v8));
      if (!v10)
      {
        uint64_t v11 = *(void (**)(void))(v8 + 8);
        if (v11) {
          v11();
        }
      }
    }

    *(void *)(a2 + 1344) = v5;
    pgno_t v12 = __numeric_load_locale_cache;
    if (__numeric_load_locale_cache)
    {
      do
      {
        uint64_t v13 = __ldaxr((unsigned int *)v12);
        int v14 = v13 - 1;
      }

      while (__stlxr(v14, (unsigned int *)v12));
      if (!v14)
      {
        pgno_t v15 = *(void (**)(void))(v12 + 8);
        if (v15) {
          v15();
        }
      }
    }

    __numeric_load_locale_cache = (uint64_t)v5;
    BOOL result = 0LL;
    do
      uint64_t v16 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v16 + 1, (unsigned int *)v5));
  }

  return result;
}

  uint64_t v18 = 0LL;
  int v19 = 0;
  if (v9 == 45) {
    pgno_t v20 = 0x8000000000000000LL;
  }
  else {
    pgno_t v20 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v21 = v20 / v15;
  while (1)
  {
    unsigned int v22 = v12 - 48;
    if ((v12 - 48) >= 0xAu)
    {
      if ((v12 - 65) > 0x19u)
      {
        unsigned int v22 = v12 - 87;
      }

      else
      {
        unsigned int v22 = v12 - 55;
      }
    }

    pgno_t v23 = -1;
    if ((v19 & 0x80000000) == 0 && v18 <= v21)
    {
      if (v18 == v21 && v22 > (int)(v20 % v15))
      {
        uint64_t v18 = v20 / v15;
      }

      else
      {
        uint64_t v18 = v18 * v15 + v22;
        pgno_t v23 = 1;
      }
    }

    uint64_t v24 = *v8++;
    pgno_t v12 = v24;
    int v19 = v23;
  }

  if ((v19 & 0x80000000) == 0)
  {
    if (v19)
    {
      int v25 = 0;
      if (v9 == 45) {
        pgno_t v20 = -(uint64_t)v18;
      }
      else {
        pgno_t v20 = v18;
      }
      if (!endptr) {
        return v20;
      }
      goto LABEL_59;
    }

    goto LABEL_58;
  }

  __int16 v28 = __error();
  int v25 = 0;
  *__int16 v28 = 34;
  if (!endptr) {
    return v20;
  }
LABEL_59:
  pgno_t v26 = (char *)(v8 - 1);
  if (v25) {
    pgno_t v26 = (char *)nptr;
  }
  *endptr = v26;
  return v20;
}

  uint64_t v18 = 0LL;
  int v19 = 0;
  if (v9 == 45) {
    pgno_t v20 = 0x8000000000000000LL;
  }
  else {
    pgno_t v20 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v21 = v20 / v15;
  while (1)
  {
    unsigned int v22 = v12 - 48;
    if ((v12 - 48) >= 0xAu)
    {
      if ((v12 - 65) > 0x19u)
      {
        unsigned int v22 = v12 - 87;
      }

      else
      {
        unsigned int v22 = v12 - 55;
      }
    }

    pgno_t v23 = -1;
    if ((v19 & 0x80000000) == 0 && v18 <= v21)
    {
      if (v18 == v21 && v22 > (int)(v20 % v15))
      {
        uint64_t v18 = v20 / v15;
      }

      else
      {
        uint64_t v18 = v18 * v15 + v22;
        pgno_t v23 = 1;
      }
    }

    uint64_t v24 = *v8++;
    pgno_t v12 = v24;
    int v19 = v23;
  }

  if ((v19 & 0x80000000) == 0)
  {
    if (v19)
    {
      int v25 = 0;
      if (v9 == 45) {
        pgno_t v20 = -(uint64_t)v18;
      }
      else {
        pgno_t v20 = v18;
      }
      if (!a2) {
        return v20;
      }
      goto LABEL_59;
    }

    goto LABEL_58;
  }

  __int16 v28 = __error();
  int v25 = 0;
  *__int16 v28 = 34;
  if (!a2) {
    return v20;
  }
LABEL_59:
  pgno_t v26 = (char *)(v8 - 1);
  if (v25) {
    pgno_t v26 = (char *)a1;
  }
  *a2 = v26;
  return v20;
}

  uint64_t v18 = 0LL;
  int v19 = 0;
  if (v9 == 45) {
    pgno_t v20 = 0x8000000000000000LL;
  }
  else {
    pgno_t v20 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v21 = v20 / v15;
  while (1)
  {
    unsigned int v22 = v12 - 48;
    if ((v12 - 48) >= 0xAu)
    {
      if ((v12 - 65) > 0x19u)
      {
        unsigned int v22 = v12 - 87;
      }

      else
      {
        unsigned int v22 = v12 - 55;
      }
    }

    pgno_t v23 = -1;
    if ((v19 & 0x80000000) == 0 && v18 <= v21)
    {
      if (v18 == v21 && v22 > (int)(v20 % v15))
      {
        uint64_t v18 = v20 / v15;
      }

      else
      {
        uint64_t v18 = v18 * v15 + v22;
        pgno_t v23 = 1;
      }
    }

    uint64_t v24 = *v8++;
    pgno_t v12 = v24;
    int v19 = v23;
  }

  if ((v19 & 0x80000000) == 0)
  {
    if (v19)
    {
      int v25 = 0;
      if (v9 == 45) {
        pgno_t v20 = -(uint64_t)v18;
      }
      else {
        pgno_t v20 = v18;
      }
      if (!a2) {
        return v20;
      }
      goto LABEL_59;
    }

    goto LABEL_58;
  }

  __int16 v28 = __error();
  int v25 = 0;
  *__int16 v28 = 34;
  if (!a2) {
    return v20;
  }
LABEL_59:
  pgno_t v26 = (char *)(v8 - 1);
  if (v25) {
    pgno_t v26 = (char *)a1;
  }
  *a2 = v26;
  return v20;
}

  uint64_t v18 = 0LL;
  int v19 = 0;
  pgno_t v20 = 0xFFFFFFFFFFFFFFFFLL / v15;
  while (1)
  {
    uint64_t v21 = v12 - 48;
    if ((v12 - 48) >= 0xAu)
    {
      if ((v12 - 65) > 0x19u)
      {
        uint64_t v21 = v12 - 87;
      }

      else
      {
        uint64_t v21 = v12 - 55;
      }
    }

    unsigned int v22 = -1;
    if ((v19 & 0x80000000) == 0 && v18 <= v20)
    {
      if (v18 == v20 && v21 > (int)~(v20 * v15))
      {
        uint64_t v18 = 0xFFFFFFFFFFFFFFFFLL / v15;
      }

      else
      {
        uint64_t v18 = v18 * v15 + v21;
        unsigned int v22 = 1;
      }
    }

    pgno_t v23 = *v8++;
    pgno_t v12 = v23;
    int v19 = v22;
  }

  if (v19 < 0)
  {
    int v27 = __error();
    uint64_t v24 = 0;
    _DWORD *v27 = 34;
    uint64_t v18 = -1LL;
    if (!a2) {
      return v18;
    }
    goto LABEL_55;
  }

  if (!v19)
  {
LABEL_54:
    *__error() = 22;
    uint64_t v24 = 1;
    if (!a2) {
      return v18;
    }
    goto LABEL_55;
  }

  uint64_t v24 = 0;
  if (v9 == 45) {
    uint64_t v18 = -(uint64_t)v18;
  }
  if (a2)
  {
LABEL_55:
    int v25 = (char *)(v8 - 1);
    if (v24) {
      int v25 = (char *)a1;
    }
    *a2 = v25;
  }

  return v18;
}

  uint64_t v18 = 0LL;
  int v19 = 0;
  pgno_t v20 = 0xFFFFFFFFFFFFFFFFLL / v15;
  while (1)
  {
    uint64_t v21 = v12 - 48;
    if ((v12 - 48) >= 0xAu)
    {
      if ((v12 - 65) > 0x19u)
      {
        uint64_t v21 = v12 - 87;
      }

      else
      {
        uint64_t v21 = v12 - 55;
      }
    }

    unsigned int v22 = -1;
    if ((v19 & 0x80000000) == 0 && v18 <= v20)
    {
      if (v18 == v20 && v21 > (int)~(v20 * v15))
      {
        uint64_t v18 = 0xFFFFFFFFFFFFFFFFLL / v15;
      }

      else
      {
        uint64_t v18 = v18 * v15 + v21;
        unsigned int v22 = 1;
      }
    }

    pgno_t v23 = *v8++;
    pgno_t v12 = v23;
    int v19 = v22;
  }

  if (v19 < 0)
  {
    int v27 = __error();
    uint64_t v24 = 0;
    _DWORD *v27 = 34;
    uint64_t v18 = -1LL;
    if (!a2) {
      return v18;
    }
    goto LABEL_55;
  }

  if (!v19)
  {
LABEL_54:
    *__error() = 22;
    uint64_t v24 = 1;
    if (!a2) {
      return v18;
    }
    goto LABEL_55;
  }

  uint64_t v24 = 0;
  if (v9 == 45) {
    uint64_t v18 = -(uint64_t)v18;
  }
  if (a2)
  {
LABEL_55:
    int v25 = (char *)(v8 - 1);
    if (v24) {
      int v25 = (char *)a1;
    }
    *a2 = v25;
  }

  return v18;
}

  uint64_t v18 = 0LL;
  int v19 = 0;
  pgno_t v20 = 0xFFFFFFFFFFFFFFFFLL / v15;
  while (1)
  {
    uint64_t v21 = v12 - 48;
    if ((v12 - 48) >= 0xAu)
    {
      if ((v12 - 65) > 0x19u)
      {
        uint64_t v21 = v12 - 87;
      }

      else
      {
        uint64_t v21 = v12 - 55;
      }
    }

    unsigned int v22 = -1;
    if ((v19 & 0x80000000) == 0 && v18 <= v20)
    {
      if (v18 == v20 && v21 > (int)~(v20 * v15))
      {
        uint64_t v18 = 0xFFFFFFFFFFFFFFFFLL / v15;
      }

      else
      {
        uint64_t v18 = v18 * v15 + v21;
        unsigned int v22 = 1;
      }
    }

    pgno_t v23 = *v8++;
    pgno_t v12 = v23;
    int v19 = v22;
  }

  if (v19 < 0)
  {
    int v27 = __error();
    uint64_t v24 = 0;
    _DWORD *v27 = 34;
    uint64_t v18 = -1LL;
    if (!endptr) {
      return v18;
    }
    goto LABEL_55;
  }

  if (!v19)
  {
LABEL_54:
    *__error() = 22;
    uint64_t v24 = 1;
    if (!endptr) {
      return v18;
    }
    goto LABEL_55;
  }

  uint64_t v24 = 0;
  if (v9 == 45) {
    uint64_t v18 = -(uint64_t)v18;
  }
  if (endptr)
  {
LABEL_55:
    int v25 = (char *)(v8 - 1);
    if (v24) {
      int v25 = (char *)nptr;
    }
    *endptr = v25;
  }

  return v18;
}

            int v36 = tre_ast_new_literal(a1, v24, v22, v23);
            *a7 = v36;
            if (v36) {
              BOOL result = 0LL;
            }
            else {
              BOOL result = 12LL;
            }
            if (v23 > *v39) {
              *int v39 = v23;
            }
            if ((*v21 & 0x80000000) == 0) {
              *(void *)(*(void *)v36 + 16LL) = v25;
            }
            break;
          case 1:
            pgno_t v26 = (uint64_t *)*v20;
            int v27 = tre_ast_new_catenation(a1, *(void *)*v20, *((void *)*v20 + 1));
            *a7 = v27;
            if (!v27) {
              goto LABEL_52;
            }
            a7 = *(void **)v27;
            __int16 v28 = *(void **)v27;
            v28[1] = 0LL;
            uint64_t v29 = v28 + 1;
            *a7 = 0LL;
            BOOL result = tre_stack_push_voidptr(a2, v26[1]);
            if ((_DWORD)result) {
              goto LABEL_3;
            }
            BOOL result = tre_stack_push_int(a2, 0);
            if ((_DWORD)result) {
              goto LABEL_3;
            }
            pgno_t v30 = a2;
            stat v31 = v29;
            goto LABEL_27;
          case 2:
            uint64_t v32 = (uint64_t *)*v20;
            BOOL result = tre_stack_push_voidptr(a2, *(void *)*v20);
            if ((_DWORD)result) {
              goto LABEL_3;
            }
            BOOL result = tre_stack_push_int(a2, 0);
            if ((_DWORD)result) {
              goto LABEL_3;
            }
            int v33 = tre_ast_new_iter(a1, *v32, *((_DWORD *)v32 + 2), *((_DWORD *)v32 + 3), v32[2] & 1);
            *a7 = v33;
            if (!v33)
            {
LABEL_52:
              BOOL result = 12LL;
              goto LABEL_3;
            }

            uint64_t v34 = v33;
            BOOL result = 0LL;
            a7 = *(void **)v34;
            break;
          case 3:
            pgno_t v26 = (uint64_t *)*v20;
            BOOL v35 = tre_ast_new_union(a1, *(void *)*v20, *((void *)*v20 + 1));
            *a7 = v35;
            if (!v35) {
              goto LABEL_52;
            }
            a7 = *(void **)v35;
            BOOL result = tre_stack_push_voidptr(a2, v26[1]);
            if ((_DWORD)result) {
              goto LABEL_3;
            }
            BOOL result = tre_stack_push_int(a2, 0);
            if ((_DWORD)result) {
              goto LABEL_3;
            }
            stat v31 = a7 + 1;
            pgno_t v30 = a2;
LABEL_27:
            BOOL result = tre_stack_push_voidptr(v30, v31);
            if ((_DWORD)result) {
              goto LABEL_3;
            }
            BOOL result = tre_stack_push_int(a2, 1u);
            if ((_DWORD)result) {
              goto LABEL_3;
            }
            BOOL result = tre_stack_push_voidptr(a2, *v26);
            if ((_DWORD)result) {
              goto LABEL_3;
            }
            BOOL result = tre_stack_push_int(a2, 0);
            break;
          default:
            goto LABEL_9;
        }
      }

      if ((_DWORD)result) {
        goto LABEL_3;
      }
    }

    BOOL result = 0LL;
  }

uint64_t __bt_dleaf(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned int a4)
{
  char v7 = *(_BYTE *)(a1 + 68);
  if ((v7 & 9) == 8 && *(_DWORD *)(a1 + 40) == *a3 && *(unsigned __int16 *)(a1 + 44) == a4)
  {
    *(_BYTE *)(a1 + 68) = v7 & 0xF8;
    if ((*(_BYTE *)(a1 + 636) & 0x20) != 0)
    {
      uint64_t v32 = a3;
      __int16 v33 = a4;
      goto LABEL_19;
    }

    uint64_t v9 = a2;
    if (!a2)
    {
      uint64_t v32 = a3;
      __int16 v33 = a4;
      uint64_t v9 = a1 + 48;
    }

    if (a4 && (uint64_t v32 = a3, v33 = a4 - 1, !__bt_cmp(a1, v9, (uint64_t *)&v32)))
    {
      char v14 = *(_BYTE *)(a1 + 68) | 4;
    }

    else
    {
      if ((((unint64_t)*((unsigned __int16 *)a3 + 8) - 20) >> 1) - 1 <= a4
        || (uint64_t v32 = a3, v33 = a4 + 1, __bt_cmp(a1, v9, (uint64_t *)&v32)))
      {
        if (!a4)
        {
          pgno_t v15 = a3[1];
          if (v15)
          {
            uint64_t v16 = mpool_get(*(MPOOL **)a1, v15, 0);
            if (!v16) {
              return 0xFFFFFFFFLL;
            }
            pgno_t v12 = v16;
            uint64_t v32 = v16;
            __int16 v33 = ((*((unsigned __int16 *)v16 + 8) + 131052) >> 1) - 1;
            if (!__bt_cmp(a1, v9, (uint64_t *)&v32))
            {
              char v31 = 4;
LABEL_56:
              *(_BYTE *)(a1 + 68) |= v31;
              mpool_put(*(MPOOL **)a1, v12, 0);
              goto LABEL_30;
            }

            mpool_put(*(MPOOL **)a1, v12, 0);
          }
        }

        if ((((unint64_t)*((unsigned __int16 *)a3 + 8) - 20) >> 1) - 1 != a4 || (pgno_t v10 = a3[2]) == 0)
        {
LABEL_16:
          uint64_t v32 = a3;
          __int16 v33 = a4;
          if (!a2) {
            goto LABEL_20;
          }
LABEL_19:
          if (!__bt_ret(a1, (uint64_t)&v32, (void *)(a1 + 48), a1 + 48, 0LL, 0LL, 1))
          {
LABEL_20:
            *(_BYTE *)(a1 + 68) |= 1u;
            goto LABEL_31;
          }

          return 0xFFFFFFFFLL;
        }

        uint64_t v11 = mpool_get(*(MPOOL **)a1, v10, 0);
        if (!v11) {
          return 0xFFFFFFFFLL;
        }
        pgno_t v12 = v11;
        uint64_t v32 = v11;
        __int16 v33 = 0;
        if (__bt_cmp(a1, v9, (uint64_t *)&v32))
        {
          mpool_put(*(MPOOL **)a1, v12, 0);
          goto LABEL_16;
        }

        char v31 = 2;
        goto LABEL_56;
      }

      char v14 = *(_BYTE *)(a1 + 68) | 2;
    }

    *(_BYTE *)(a1 + 68) = v14;
LABEL_30:
    *(_DWORD *)(a1 + 40) = *v32;
    *(_WORD *)(a1 + 44) = v33;
  }

LABEL_31:
  uint64_t v17 = a3 + 5;
  uint64_t v18 = (unsigned __int16 *)a3 + a4 + 10;
  int v19 = (_DWORD *)((char *)a3 + *v18);
  char v20 = *((_BYTE *)v19 + 8);
  if ((v20 & 2) != 0)
  {
    uint64_t result = __ovfl_delete(a1, (unsigned int *)((char *)v19 + 9));
    if ((_DWORD)result == -1) {
      return result;
    }
    char v20 = *((_BYTE *)v19 + 8);
  }

  if ((v20 & 1) == 0 || (uint64_t result = __ovfl_delete(a1, (unsigned int *)((char *)v19 + *v19 + 9)), (_DWORD)result != -1))
  {
    unsigned int v21 = (*v19 + v19[1] + 12) & 0xFFFFFFFC;
    _platform_memmove();
    *((_WORD *)a3 + 9) += v21;
    unsigned int v22 = *v18;
    if ((_WORD)a4)
    {
      unsigned int v23 = a4;
      do
      {
        unsigned int v24 = (unsigned __int16)*v17;
        if (v24 < v22) {
          *uint64_t v17 = v24 + v21;
        }
        --v23;
        ++v17;
      }

      while ((_WORD)v23);
    }

    int v25 = *((unsigned __int16 *)a3 + 8);
    unsigned int v26 = ~a4 + ((v25 + 131052) >> 1);
    if (~(_WORD)a4 + (unsigned __int16)((v25 + 131052) >> 1))
    {
      int v27 = v17 + 1;
      do
      {
        unsigned int v28 = *v27;
        if (v28 >= v22) {
          __int16 v29 = 0;
        }
        else {
          __int16 v29 = v21;
        }
        *(v27 - 1) = v29 + v28;
        --v26;
        ++v27;
      }

      while ((_WORD)v26);
      LOWORD(v25) = *((_WORD *)a3 + 8);
    }

    *((_WORD *)a3 + 8) = v25 - 2;
    if ((*(_BYTE *)(a1 + 68) & 9) == 8
      && *(_DWORD *)(a1 + 40) == *a3
      && (unsigned int v30 = *(unsigned __int16 *)(a1 + 44), v30 > a4))
    {
      uint64_t result = 0LL;
      *(_WORD *)(a1 + 44) = v30 - 1;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

        *a3 = 0;
        return 2;
      case 9u:
        *a3 = 0;
        LOBYTE(v16) = a2 - 48;
        goto LABEL_62;
      case 0xAu:
        if (a2 == 13 || a2 == 10)
        {
          unsigned int v8 = 12;
          goto LABEL_119;
        }

        int v27 = a2 - 48;
        unsigned int v28 = v6 - 55;
        if (v27 < 0xA) {
          unsigned int v28 = v27;
        }
        *a1 = v28;
        unsigned int v8 = 11;
        goto LABEL_119;
      case 0xBu:
        pgno_t v15 = a2 - 48;
        *a3 = 0;
        LOBYTE(v16) = v6 - 55;
        if (v15 < 0xA) {
          LOBYTE(v16) = v15;
        }
LABEL_62:
        uint64_t v11 = v16 | (16 * *a1);
LABEL_63:
        *a1 = v11;
        return 1;
      case 0xCu:
        uint64_t result = 3;
        *a3 = 10;
        return result;
      case 0xDu:
        *a1 = 0;
        if (a2 == 35)
        {
          unsigned int v8 = 14;
          goto LABEL_119;
        }

        uint64_t v18 = 0;
        int v19 = 0;
        uint64_t v5 = 15;
        *a3 = 15;
        LODWORD(v17) = *a1;
        goto LABEL_65;
      case 0xEu:
        *a1 = *a1 + a2 + 10 * *a1 - 48;
        return 3;
      case 0xFu:
        uint64_t v17 = *a1;
        uint64_t v18 = HIBYTE(v5);
        if (HIBYTE(v5))
        {
          unsigned int v21 = 0;
          int v19 = nv[8 * v17 - 1 + v18];
        }

        else
        {
          int v19 = 0;
LABEL_65:
          unsigned int v21 = 1;
        }

        else {
          unsigned int v22 = a2;
        }
        unsigned int v23 = v17;
        unsigned int v24 = v18 - 1;
        int v25 = &nv[8 * v17 + v18];
        unsigned int v26 = &nv[8 * v17 + v24];
        break;
      default:
        goto LABEL_84;
    }

    do
    {
      if ((v21 & 1) == 0 && v19 != *v26) {
        goto LABEL_84;
      }
      if (*v25 == v22)
      {
        LOBYTE(v17) = v23;
        goto LABEL_87;
      }

      ++v23;
      v25 += 8;
      v26 += 8;
    }

    while (v23 != 100LL);
    unsigned int v23 = 100LL;
    LODWORD(v17) = 100;
LABEL_77:
    if ((_DWORD)v17 == 100)
    {
LABEL_84:
      *a3 = 0;
      return -1;
    }

          if (*result) {
            uint64_t v9 = 1;
          }
          else {
            uint64_t v9 = a1 == 0;
          }
          if (v9) {
            return result;
          }
          if (a1 == 57) {
            return result;
          }
          a2 = (locale_t)&__c_locale;
          if (v5 == (_xlocale *)&__c_locale) {
            return result;
          }
          break;
        default:
          current_numeric_locale = __get_current_time_locale((uint64_t)v5) + 56;
LABEL_30:
          uint64_t result = *current_numeric_locale;
          if (result) {
            goto LABEL_31;
          }
          return result;
      }
    }
  }

  return result;
}

    if ((_DefaultRuneLocale.__runetype[v19] & 0x400) == 0)
    {
LABEL_32:
      a2 = v17;
      goto LABEL_33;
    }

              v10[4] = v35;
              if (!v35) {
                return 12LL;
              }
LABEL_68:
              char v7 = 0LL;
              continue;
            }

            *(_WORD *)(v9 + 64) = 0;
            uint64_t v13 = v11[2];
            char v14 = tre_mem_alloc_impl(a1, 0, 0LL, 1, 0x80uLL);
            if (!v14) {
              goto LABEL_80;
            }
            *(_DWORD *)char v14 = v13;
            *(void *)(v14 + 4) = 0x7FFFFFFF00000000LL;
            *((void *)v14 + 4) = 0LL;
            *((_DWORD *)v14 + 10) = -1;
            *((void *)v14 + 8) = -1LL;
            *((_DWORD *)v14 + 18) = -1;
            v10[3] = v14;
            uint64_t v17 = v11 + 1;
            pgno_t v15 = v11[1];
            uint64_t v16 = v17[1];
            uint64_t v18 = tre_mem_alloc_impl(a1, 0, 0LL, 1, 0x80uLL);
            if (v18)
            {
              *(_DWORD *)uint64_t v18 = v16;
              *(void *)(v18 + 4) = 0x7FFFFFFF00000000LL;
              *((void *)v18 + 4) = 0LL;
              *((_DWORD *)v18 + 10) = v15;
              *((void *)v18 + 8) = -1LL;
              *((_DWORD *)v18 + 18) = -1;
              v10[4] = v18;
              goto LABEL_68;
            }

            v10[4] = 0LL;
            return 12LL;
          case 1:
            matched = tre_stack_push_voidptr(a2, v9);
            if ((_DWORD)matched) {
              return matched;
            }
            char v40 = a2;
            int v41 = 2;
            goto LABEL_56;
          case 2:
            matched = tre_stack_push_voidptr(a2, v9);
            if ((_DWORD)matched) {
              return matched;
            }
            stat v42 = a2;
            size_t v43 = 3;
            goto LABEL_59;
          case 3:
            matched = tre_stack_push_voidptr(a2, v9);
            if ((_DWORD)matched) {
              return matched;
            }
            char v40 = a2;
            int v41 = 1;
LABEL_56:
            matched = tre_stack_push_int(v40, v41);
            if ((_DWORD)matched) {
              return matched;
            }
            matched = tre_stack_push_voidptr(a2, *(void *)(*v10 + 8LL));
            if ((_DWORD)matched) {
              return matched;
            }
            stat v42 = a2;
            size_t v43 = 0;
LABEL_59:
            matched = tre_stack_push_int(v42, v43);
            if ((_DWORD)matched) {
              return matched;
            }
            matched = tre_stack_push_voidptr(a2, *(void *)*v10);
            if ((_DWORD)matched) {
              return matched;
            }
            matched = tre_stack_push_int(a2, 0);
            if ((_DWORD)matched) {
              return matched;
            }
            goto LABEL_68;
          default:
            goto LABEL_68;
        }

      case 1:
        int v19 = *(int **)v9;
        char v20 = **(void **)v9;
        unsigned int v21 = *(void *)(*(void *)v9 + 8LL);
        if (*(_WORD *)(v20 + 64)) {
          unsigned int v22 = 1;
        }
        else {
          unsigned int v22 = *(_WORD *)(v21 + 64) != 0;
        }
        *(_WORD *)(v9 + 64) = v22;
        uint64_t v34 = tre_set_union(a1, *(int **)(v20 + 24), *(int **)(v21 + 24), 0LL, 0, 0LL);
        v10[3] = v34;
        if (!v34) {
          return 12LL;
        }
        BOOL v35 = tre_set_union(a1, *(int **)(*(void *)v19 + 32LL), *(int **)(*((void *)v19 + 1) + 32LL), 0LL, 0, 0LL);
        goto LABEL_31;
      case 2:
        unsigned int v23 = *(uint64_t **)v9;
        unsigned int v24 = **(void **)v9;
        int v25 = *(_WORD *)(v24 + 64);
        if (v25) {
          int v25 = *(_WORD *)(v23[1] + 64) != 0;
        }
        *(_WORD *)(v9 + 64) = v25;
        if (*(_WORD *)(v24 + 64))
        {
          matched = tre_match_empty((uint64_t)a2, v24, 0LL, 0LL, 0LL, &v51, &v49);
          if ((_DWORD)matched) {
            return matched;
          }
          int v27 = (int *)malloc(4LL * v51 + 4);
          if (!v27) {
            return 12LL;
          }
          unsigned int v28 = v27;
          unsigned __int16 *v27 = -1;
          __int16 v50 = 0;
          if (v49)
          {
            __int16 v29 = tre_mem_alloc_impl(a1, 0, 0LL, 0, 0x24uLL);
            if (!v29) {
              goto LABEL_78;
            }
          }

          else
          {
            __int16 v29 = 0LL;
          }

          int v36 = tre_match_empty((uint64_t)a2, *v23, v28, &v50, (uint64_t)v29, 0LL, 0LL);
          if ((_DWORD)v36) {
            goto LABEL_77;
          }
          v10[3] = tre_set_union(a1, *(int **)(v23[1] + 24), *(int **)(*v23 + 24), (unint64_t)v28, v50, v29);
          free(v28);
          if (!v10[3]) {
            return 12LL;
          }
        }

        else
        {
          *(void *)(v9 + 24) = *(void *)(v24 + 24);
        }

        int v37 = v23[1];
        if (*(_WORD *)(v37 + 64))
        {
          matched = tre_match_empty((uint64_t)a2, v37, 0LL, 0LL, 0LL, &v51, &v49);
          if ((_DWORD)matched) {
            return matched;
          }
          unsigned int v38 = (int *)malloc(4LL * v51 + 4);
          if (!v38) {
            return 12LL;
          }
          unsigned int v28 = v38;
          const char *v38 = -1;
          __int16 v50 = 0;
          if (v49)
          {
            int v39 = tre_mem_alloc_impl(a1, 0, 0LL, 0, 0x24uLL);
            if (!v39)
            {
LABEL_78:
              char v7 = 12LL;
LABEL_79:
              free(v28);
              return v7;
            }
          }

          else
          {
            int v39 = 0LL;
          }

          int v36 = tre_match_empty((uint64_t)a2, v23[1], v28, &v50, (uint64_t)v39, 0LL, 0LL);
          if ((_DWORD)v36) {
            goto LABEL_77;
          }
          v10[4] = tre_set_union(a1, *(int **)(*v23 + 32), *(int **)(v23[1] + 32), (unint64_t)v28, v50, v39);
          free(v28);
          if (!v10[4]) {
            return 12LL;
          }
        }

        else
        {
          v10[4] = *(void *)(v37 + 32);
        }

        goto LABEL_68;
      case 3:
        unsigned int v30 = *(uint64_t **)v9;
        char v31 = **(void **)v9;
        if (*(_DWORD *)(*(void *)v9 + 8LL) && !*(_WORD *)(v31 + 64))
        {
          *(_WORD *)(v9 + 64) = 0;
LABEL_35:
          *(void *)(v9 + 32) = *(void *)(v31 + 32);
          goto LABEL_67;
        }

        *(_WORD *)(v9 + 64) = 1;
        if (!*(_WORD *)(v31 + 64)) {
          goto LABEL_35;
        }
        matched = tre_match_empty((uint64_t)a2, v31, 0LL, 0LL, 0LL, &v51, &v49);
        if ((_DWORD)matched) {
          return matched;
        }
        uint64_t v32 = (int *)malloc(4LL * v51 + 4);
        if (!v32) {
          return 12LL;
        }
        unsigned int v28 = v32;
        *uint64_t v32 = -1;
        __int16 v50 = 0;
        if (v49)
        {
          __int16 v33 = tre_mem_alloc_impl(a1, 0, 0LL, 0, 0x24uLL);
          if (!v33) {
            goto LABEL_78;
          }
        }

        else
        {
          __int16 v33 = 0LL;
        }

        int v36 = tre_match_empty((uint64_t)a2, *v30, v28, &v50, (uint64_t)v33, 0LL, 0LL);
        if ((_DWORD)v36)
        {
LABEL_77:
          char v7 = v36;
          goto LABEL_79;
        }

        v10[4] = tre_set_union(a1, *(int **)(*v30 + 32), *(int **)(*v30 + 32), (unint64_t)v28, v50, v33);
        free(v28);
        if (!v10[4]) {
          return 12LL;
        }
        char v31 = *v30;
LABEL_67:
        v10[3] = *(void *)(v31 + 24);
        goto LABEL_68;
      default:
        goto LABEL_68;
    }
  }

uint64_t __bt_pdelete(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = a1 + 72;
  while (1)
  {
    uint64_t v5 = *(void *)(a1 + 472);
    if (v5 == v4) {
      break;
    }
    pgno_t v6 = *(_DWORD *)(v5 - 8);
    *(void *)(a1 + 472) = v5 - 8;
    char v7 = mpool_get(*(MPOOL **)a1, v6, 0);
    if (!v7) {
      return 0xFFFFFFFFLL;
    }
    unsigned int v8 = v7;
    uint64_t v9 = *(unsigned __int16 *)(v5 - 4);
    pgno_t v10 = (char *)v7 + 2 * v9;
    unsigned int v12 = *((unsigned __int16 *)v10 + 10);
    uint64_t v11 = (unsigned __int16 *)(v10 + 20);
    uint64_t v13 = (char *)v7 + v12;
    if ((v13[8] & 2) != 0 && __ovfl_delete(a1, (pgno_t *)(v13 + 9)) == -1)
    {
      mpool_put(*(MPOOL **)a1, v8, 0);
      return 0xFFFFFFFFLL;
    }

    if ((v8[4] & 0xFFFE) != 0x16)
    {
      char v14 = v8 + 5;
      unsigned int v15 = (*(_DWORD *)v13 & 0xFFFFFFFC) + 12;
      _platform_memmove();
      *((_WORD *)v8 + 9) += v15;
      unsigned int v16 = *v11;
      if ((_DWORD)v9)
      {
        int v17 = v9;
        do
        {
          unsigned int v18 = (unsigned __int16)*v14;
          if (v18 < v16) {
            *char v14 = v18 + v15;
          }
          --v17;
          ++v14;
        }

        while ((_WORD)v17);
      }

      int v19 = *((unsigned __int16 *)v8 + 8);
      unsigned int v20 = ~(_DWORD)v9 + ((v19 + 131052) >> 1);
      if (~(_WORD)v9 + (unsigned __int16)((v19 + 131052) >> 1))
      {
        unsigned int v21 = v14 + 1;
        do
        {
          unsigned int v22 = *v21;
          if (v22 >= v16) {
            __int16 v23 = 0;
          }
          else {
            __int16 v23 = v15;
          }
          *(v21 - 1) = v23 + v22;
          --v20;
          ++v21;
        }

        while ((_WORD)v20);
        LOWORD(v19) = *((_WORD *)v8 + 8);
      }

      *((_WORD *)v8 + 8) = v19 - 2;
      goto LABEL_25;
    }

    if (*v8 == 1)
    {
      *((_WORD *)v8 + 8) = 20;
      *((_WORD *)v8 + 9) = *(_DWORD *)(a1 + 520);
      v8[3] = 2;
LABEL_25:
      mpool_put(*(MPOOL **)a1, v8, 1u);
      break;
    }
  }

  if (*a2 == 1)
  {
    mpool_put(*(MPOOL **)a1, a2, 1u);
    return 0LL;
  }

  else
  {
    return __bt_relink((MPOOL **)a1, (uint64_t)a2) || __bt_free(a1, a2) != 0;
  }

uint64_t __bt_relink(MPOOL **a1, uint64_t a2)
{
  pgno_t v4 = *(_DWORD *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = mpool_get(*a1, v4, 0);
    if (!v5) {
      return 0xFFFFFFFFLL;
    }
    v5[1] = *(_DWORD *)(a2 + 4);
    mpool_put(*a1, v5, 1u);
  }

  pgno_t v6 = *(_DWORD *)(a2 + 4);
  if (!v6) {
    return 0LL;
  }
  char v7 = mpool_get(*a1, v6, 0);
  if (v7)
  {
    int v7[2] = *(_DWORD *)(a2 + 8);
    mpool_put(*a1, v7, 1u);
    return 0LL;
  }

  return 0xFFFFFFFFLL;
}

uint64_t __bt_get(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v7 = *(void *)(a1 + 56);
  unsigned int v8 = *(void **)(v7 + 32);
  if (v8)
  {
    mpool_put(*(MPOOL **)v7, v8, 0);
    *(void *)(v7 + 32) = 0LL;
  }

  if (a4)
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }

  uint64_t v11 = (void **)__bt_search(v7, a2, &v13);
  if (!v11) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v12 = v11;
  if (v13)
  {
    uint64_t v9 = __bt_ret(v7, (uint64_t)v11, 0LL, 0LL, a3, (char **)(v7 + 496), 0);
    if ((*(_BYTE *)(v7 + 637) & 0x40) != 0) {
      mpool_put(*(MPOOL **)v7, *v12, 0);
    }
    else {
      *(void *)(v7 + 32) = *v12;
    }
  }

  else
  {
    mpool_put(*(MPOOL **)v7, *v11, 0);
    return 1LL;
  }

  return v9;
}

MPOOL *__bt_open(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, int a5)
{
  uint64_t v7 = __bt_defcmp;
  unsigned int v8 = (MPOOL *)__bt_defpfx;
  if (!a4)
  {
    int v39 = a5;
    unsigned int v40 = 0;
    pgno_t v10 = 0;
    unint64_t v9 = 0LL;
    int v11 = 2;
LABEL_13:
    int v12 = 1234;
    goto LABEL_14;
  }

  unint64_t v9 = *a4;
  int v11 = *((_DWORD *)a4 + 4);
  pgno_t v10 = *((_DWORD *)a4 + 5);
  int v12 = *((_DWORD *)a4 + 10);
  if (v10)
  {
    if (v10 - 512 > 0xFE00 || (*((_DWORD *)a4 + 5) & 1) != 0) {
      goto LABEL_40;
    }
  }

  if (v11)
  {
    if (v11 < 2)
    {
LABEL_40:
      unsigned int v15 = 0LL;
      goto LABEL_41;
    }
  }

  else
  {
    int v11 = 2;
  }

  if (a4[3]) {
    uint64_t v7 = (uint64_t (*)(unsigned __int8 **, unsigned __int8 **))a4[3];
  }
  if (*(_OWORD *)(a4 + 3) != 0LL) {
    unsigned int v8 = (MPOOL *)a4[4];
  }
  if (!v12)
  {
    int v39 = a5;
    unsigned int v40 = *((_DWORD *)a4 + 2);
    goto LABEL_13;
  }

  if (v12 != 4321 && v12 != 1234) {
    goto LABEL_40;
  }
  int v39 = a5;
  unsigned int v40 = *((_DWORD *)a4 + 2);
LABEL_14:
  char v14 = (MPOOL **)calloc(1uLL, 0x280uLL);
  if (!v14)
  {
    int v25 = *__error();
LABEL_94:
    int v17 = 0LL;
    *__error() = v25;
    return v17;
  }

  unsigned int v15 = v14;
  *((_DWORD *)v14 + 128) = -1;
  *((_DWORD *)v14 + 132) = v12;
  *((_DWORD *)v14 + 133) = 0;
  v14[68] = (MPOOL *)v7;
  v14[69] = v8;
  *((_DWORD *)v14 + 144) = -1;
  unsigned int v16 = (MPOOL *)calloc(1uLL, 0x48uLL);
  v15[1] = v16;
  if (!v16) {
    goto LABEL_88;
  }
  int v17 = v16;
  if (*((_DWORD *)v15 + 132) != 1234) {
    *((_DWORD *)v15 + 159) |= 8u;
  }
  v16->lqh.tqh_last = (_bkt **)__bt_close;
  v16->hqh[0].tqh_first = (_bkt *)__bt_delete;
  v16->hqh[2].tqh_last = (_bkt **)v15;
  v16->hqh[3].tqh_first = (_bkt *)__bt_fd;
  v16->hqh[0].tqh_last = (_bkt **)__bt_get;
  v16->hqh[1].tqh_first = (_bkt *)__bt_put;
  v16->hqh[1].tqh_last = (_bkt **)__bt_seq;
  v16->hqh[2].tqh_first = (_bkt *)__bt_sync;
  int v18 = a2 & 3;
  LODWORD(v16->lqh.tqh_first) = 0;
  if (a1)
  {
    if (v18 != 2)
    {
      if ((a2 & 3) != 0) {
        goto LABEL_41;
      }
      *((_DWORD *)v15 + 159) |= 0x10u;
    }

    int v19 = open_NOCANCEL();
    *((_DWORD *)v15 + 128) = v19;
    if (v19 < 0) {
      goto LABEL_88;
    }
  }

  else
  {
    if (v18 != 2)
    {
LABEL_41:
      *__error() = 22;
      int v25 = *__error();
      if (!v15) {
        goto LABEL_94;
      }
LABEL_89:
      int v36 = v15[1];
      if (v36) {
        free(v36);
      }
      if (*((_DWORD *)v15 + 128) != -1) {
        close_NOCANCEL();
      }
      free(v15);
      goto LABEL_94;
    }

    if (issetugid()) {
      unsigned int v26 = 0LL;
    }
    else {
      unsigned int v26 = getenv("TMPDIR");
    }
    int v27 = "/tmp";
    if (v26) {
      int v27 = v26;
    }
    if (snprintf((char *)&v48, 0x400uLL, "%s/bt.XXXXXXXXXX", v27) >= 0x400)
    {
      *__error() = 63;
      *((_DWORD *)v15 + 128) = -1;
      goto LABEL_88;
    }

    sigset_t v41 = -1;
    sigprocmask(1, &v41, &v47);
    int v28 = mkstemp((char *)&v48);
    if (v28 == -1)
    {
      sigprocmask(3, &v47, 0LL);
      *((_DWORD *)v15 + 128) = -1;
      goto LABEL_88;
    }

    int v29 = v28;
    unlink((const char *)&v48);
    sigprocmask(3, &v47, 0LL);
    *((_DWORD *)v15 + 128) = v29;
    *((_DWORD *)v15 + 159) |= 1u;
  }

  if (!v48.st_size)
  {
    if (!v10)
    {
      st_blkunint64_t size = v48.st_blksize;
      if (v48.st_blksize <= 0x200u) {
        st_blkunint64_t size = 512;
      }
      if (st_blksize >= 0x10000) {
        pgno_t v10 = 0x10000;
      }
      else {
        pgno_t v10 = st_blksize;
      }
    }

    int v31 = *((_DWORD *)v15 + 159);
    if (!v9) {
      v31 |= 0x20u;
    }
    *((_DWORD *)v15 + 129) = 0;
    *((_DWORD *)v15 + 154) = 0;
    *((_DWORD *)v15 + 159) = v31 | 2;
    goto LABEL_64;
  }

  uint64_t NOCANCEL = read_NOCANCEL();
  if (NOCANCEL < 0)
  {
LABEL_88:
    int v25 = *__error();
    goto LABEL_89;
  }

  if (NOCANCEL != 24) {
    goto LABEL_87;
  }
  sigset_t v21 = v41;
  int v22 = *((_DWORD *)v15 + 159);
  if (v41 == 340322)
  {
    BOOL v23 = 0;
    unsigned int v24 = v22 & 0xFFFFFFF7;
    *((_DWORD *)v15 + 159) = v24;
  }

  else
  {
    unsigned int v24 = v22 | 8;
    *((_DWORD *)v15 + 159) = v24;
    LOBYTE(v41) = HIBYTE(v21);
    BYTE1(v41) = BYTE2(v21);
    BYTE2(v41) = BYTE1(v21);
    HIBYTE(v41) = v21;
    unsigned int v42 = bswap32(v42);
    unsigned int v43 = bswap32(v43);
    unsigned int v44 = bswap32(v44);
    unsigned int v45 = bswap32(v45);
    unsigned int v46 = bswap32(v46);
    BOOL v23 = v41 != 340322;
  }

  if (v23 || v42 != 3 || (pgno_t v10 = v43, v43 - 512 > 0xFE00) || (v43 & 1) != 0 || (v46 & 0xFFFFFF5F) != 0)
  {
LABEL_87:
    *__error() = 79;
    goto LABEL_88;
  }

  *((_DWORD *)v15 + 159) = v24 | v46;
  unsigned int v38 = v45;
  *((_DWORD *)v15 + 129) = v44;
  *((_DWORD *)v15 + 154) = v38;
LABEL_64:
  *((_DWORD *)v15 + 130) = v10;
  if (((v10 - 1) & v40) != 0) {
    unsigned int v32 = ((v10 - 1) | v40) + 1;
  }
  else {
    unsigned int v32 = v40;
  }
  if (!v40) {
    unsigned int v32 = 0;
  }
  if (v32 <= 5 * v10) {
    unsigned int v32 = 5 * v10;
  }
  pgno_t v33 = v10 - 1 + v32;
  unsigned int v34 = (unsigned __int16)(((unint64_t)v10 - 20) / v11 - 14);
  if (v34 <= 0x1E) {
    LOWORD(v34) = 30;
  }
  *((_WORD *)v15 + 262) = v34;
  BOOL v35 = mpool_open(0LL, *((_DWORD *)v15 + 128), v10, v33 / v10);
  *unsigned int v15 = v35;
  if (!v35) {
    goto LABEL_88;
  }
  if ((*((_BYTE *)v15 + 636) & 1) == 0) {
    mpool_filter( v35,  (void (__cdecl *)(void *, pgno_t, void *))__bt_pgin,  (void (__cdecl *)(void *, pgno_t, void *))__bt_pgout,  v15);
  }
  if ((v39 & 0x20000000) == 0)
  {
    if ((v39 & 0x40000000) == 0) {
      goto LABEL_79;
    }
LABEL_97:
    *((_DWORD *)v15 + 159) |= 0x8000u;
    if ((v39 & 0x80000000) == 0) {
      return v17;
    }
LABEL_98:
    *((_DWORD *)v15 + 159) |= 0x10000u;
    return v17;
  }

  *((_DWORD *)v15 + 159) |= 0x4000u;
  if ((v39 & 0x40000000) != 0) {
    goto LABEL_97;
  }
LABEL_79:
  if (v39 < 0) {
    goto LABEL_98;
  }
  return v17;
}

uint64_t __bt_fd(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  unsigned int v2 = *(void **)(v1 + 32);
  if (v2)
  {
    mpool_put(*(MPOOL **)v1, v2, 0);
    *(void *)(v1 + 32) = 0LL;
  }

  if ((*(_BYTE *)(v1 + 636) & 1) == 0) {
    return *(unsigned int *)(v1 + 512);
  }
  *__error() = 2;
  return 0xFFFFFFFFLL;
}

uint64_t nroot(uint64_t a1)
{
  unsigned int v2 = mpool_get(*(MPOOL **)a1, 0, 0);
  if (v2)
  {
    unsigned int v3 = v2;
    pgno_t v4 = *(MPOOL **)a1;
    unsigned int v5 = 0;
LABEL_3:
    mpool_put(v4, v3, v5);
    return 0LL;
  }

  if (*__error() != 22) {
    return 0xFFFFFFFFLL;
  }
  *__error() = 0;
  uint64_t v7 = mpool_new(*(MPOOL **)a1, &v10);
  if (!v7) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v8 = v7;
  unint64_t v9 = mpool_new(*(MPOOL **)a1, &v10);
  uint64_t result = 0xFFFFFFFFLL;
  if (v9 && v10 == 1)
  {
    v9[8] = 20;
    v9[9] = *(_DWORD *)(a1 + 520);
    *(_OWORD *)unint64_t v9 = xmmword_180498800;
    _platform_bzero();
    mpool_put(*(MPOOL **)a1, v8, 1u);
    pgno_t v4 = *(MPOOL **)a1;
    unsigned int v3 = v9;
    unsigned int v5 = 1;
    goto LABEL_3;
  }

  return result;
}

uint64_t __ovfl_get(uint64_t a1, pgno_t *a2, size_t *a3, void **a4, size_t *a5)
{
  pgno_t v7 = *a2;
  size_t v6 = a2[1];
  *a3 = v6;
  unsigned int v8 = (char *)*a4;
  if (*a5 < v6)
  {
    int v11 = (char *)reallocf(*a4, v6);
    *a4 = v11;
    if (!v11) {
      return 0xFFFFFFFFLL;
    }
    unsigned int v8 = v11;
    *a5 = v6;
  }

  uint64_t v12 = *(unsigned int *)(a1 + 520);
  int v13 = (pgno_t *)mpool_get(*(MPOOL **)a1, v7, 0);
  if (!v13) {
    return 0xFFFFFFFFLL;
  }
  char v14 = v13;
  unint64_t v15 = v12 - 20;
  while (1)
  {
    unint64_t v16 = v15 >= v6 ? v6 : v15;
    _platform_memmove();
    mpool_put(*(MPOOL **)a1, v14, 0);
    LODWORD(v6) = v6 - v16;
    if (!(_DWORD)v6) {
      break;
    }
    v8 += v16;
    char v14 = (pgno_t *)mpool_get(*(MPOOL **)a1, v14[2], 0);
    if (!v14) {
      return 0xFFFFFFFFLL;
    }
  }

  return 0LL;
}

uint64_t __ovfl_put(uint64_t a1, uint64_t *a2, pgno_t *a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 520);
  uint64_t v6 = *a2;
  unsigned int v7 = *((_DWORD *)a2 + 2);
  unsigned int v8 = __bt_new(a1, &v15);
  if (!v8) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v9 = 0LL;
  unint64_t v10 = v5 - 20;
  while (1)
  {
    int v11 = v8;
    pgno_t v12 = v15;
    v8[1] = 0;
    v8[2] = 0;
    *unsigned int v8 = v12;
    *(void *)(v8 + 3) = 4LL;
    unsigned int v13 = v7;
    if (v7 >= v10) {
      unsigned int v7 = v10;
    }
    _platform_memmove();
    if (v9)
    {
      void v9[2] = v12;
      mpool_put(*(MPOOL **)a1, v9, 1u);
    }

    else
    {
      *a3 = v12;
    }

    unsigned int v7 = v13 - v7;
    if (!v7) {
      break;
    }
    v6 += v10;
    unsigned int v8 = __bt_new(a1, &v15);
    unint64_t v9 = v11;
    if (!v8) {
      return 0xFFFFFFFFLL;
    }
  }

  mpool_put(*(MPOOL **)a1, v11, 1u);
  return 0LL;
}

uint64_t __ovfl_delete(uint64_t a1, pgno_t *a2)
{
  unint64_t v3 = a2[1];
  pgno_t v4 = (pgno_t *)mpool_get(*(MPOOL **)a1, *a2, 0);
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  if ((v4[3] & 0x20) != 0)
  {
    mpool_put(*(MPOOL **)a1, v4, 0);
  }

  else
  {
    uint64_t v5 = *(unsigned int *)(a1 + 520);
    unint64_t v6 = v5 - 20;
    pgno_t v7 = v4[2];
    __bt_free(a1, v4);
    if (v5 - 20 < v3)
    {
      unsigned int v8 = v3 - v5 + 20;
      int v9 = 20 - v5;
      while (1)
      {
        unint64_t v10 = mpool_get(*(MPOOL **)a1, v7, 0);
        if (!v10) {
          break;
        }
        pgno_t v7 = v10[2];
        __bt_free(a1, v10);
        BOOL v11 = v6 >= v8;
        v8 += v9;
        if (v11) {
          return 0LL;
        }
      }

      return 0xFFFFFFFFLL;
    }
  }

  return 0LL;
}

uint64_t __bt_free(uint64_t a1, _DWORD *a2)
{
  int v2 = *(_DWORD *)(a1 + 516);
  a2[1] = 0;
  a2[2] = v2;
  *(_DWORD *)(a1 + 516) = *a2;
  *(_DWORD *)(a1 + 636) |= 2u;
  return mpool_put(*(MPOOL **)a1, a2, 1u);
}

_DWORD *__bt_new(uint64_t a1, pgno_t *a2)
{
  pgno_t v4 = *(_DWORD *)(a1 + 516);
  if (!v4) {
    return mpool_new(*(MPOOL **)a1, a2);
  }
  uint64_t result = mpool_get(*(MPOOL **)a1, v4, 0);
  if (!result) {
    return mpool_new(*(MPOOL **)a1, a2);
  }
  *a2 = *(_DWORD *)(a1 + 516);
  *(_DWORD *)(a1 + 516) = result[2];
  *(_DWORD *)(a1 + 636) |= 2u;
  return result;
}

uint64_t __bt_put(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v7 = *(void *)(a1 + 56);
  unsigned int v8 = *(void **)(v7 + 32);
  if (v8)
  {
    mpool_put(*(MPOOL **)v7, v8, 0);
    *(void *)(v7 + 32) = 0LL;
  }

  if ((*(_BYTE *)(v7 + 636) & 0x10) != 0)
  {
    unsigned int v13 = __error();
    int v14 = 1;
LABEL_13:
    int *v13 = v14;
    return 0xFFFFFFFFLL;
  }

  if (a4 && a4 != 8 && (a4 != 1 || (*(_BYTE *)(v7 + 68) & 0xF) != 8))
  {
    unsigned int v13 = __error();
    int v14 = 22;
    goto LABEL_13;
  }

  unint64_t v9 = a2[1];
  uint64_t v10 = a3[1];
  unint64_t v11 = *(unsigned __int16 *)(v7 + 524);
  if (v10 + v9 <= v11)
  {
    LOBYTE(v12) = 0;
  }

  else
  {
    int v12 = 0;
    if (v9 > v11) {
      goto LABEL_17;
    }
    while (1)
    {
      if (v10 + v9 > v11)
      {
        uint64_t result = __ovfl_put(v7, a3, &v39);
        if ((_DWORD)result == -1) {
          return result;
        }
        uint64_t v10 = 8LL;
        v40[0] = v43;
        v40[1] = 8LL;
        uint64_t v17 = a3[1];
        v43[0] = v39;
        v43[1] = v17;
        v12 |= 1u;
        unint64_t v9 = a2[1];
        unint64_t v11 = *(unsigned __int16 *)(v7 + 524);
        a3 = v40;
      }

      if (v10 + v9 <= v11) {
        break;
      }
LABEL_17:
      uint64_t result = __ovfl_put(v7, a2, &v39);
      if ((_DWORD)result == -1) {
        return result;
      }
      unint64_t v9 = 8LL;
      v41[0] = v42;
      v41[1] = 8LL;
      uint64_t v16 = a2[1];
      v42[0] = v39;
      v42[1] = v16;
      v12 |= 2u;
      uint64_t v10 = a3[1];
      unint64_t v11 = *(unsigned __int16 *)(v7 + 524);
      a2 = v41;
    }
  }

  if (a4 == 1)
  {
    int v18 = (pgno_t *)mpool_get(*(MPOOL **)v7, *(_DWORD *)(v7 + 40), 0);
    if (v18)
    {
      int v19 = v18;
      unsigned int v20 = *(unsigned __int16 *)(v7 + 44);
      goto LABEL_26;
    }

    return 0xFFFFFFFFLL;
  }

  if (!*(_DWORD *)(v7 + 532)) {
    goto LABEL_45;
  }
  sigset_t v21 = (unsigned __int16 *)mpool_get(*(MPOOL **)v7, *(_DWORD *)(v7 + 536), 0);
  if (!v21)
  {
    *(_DWORD *)(v7 + 532) = 0;
    goto LABEL_45;
  }

  int v22 = v21;
  *(void *)(v7 + 16) = v21;
  BOOL v23 = (pgno_t **)(v7 + 16);
  uint64_t v24 = *(unsigned __int16 *)(v7 + 540);
  *(_WORD *)(v7 + 24) = v24;
  uint64_t v25 = v21[8];
  if (*(_DWORD *)(v7 + 532) == 2)
  {
    if (!*((_DWORD *)v21 + 2) && ((unint64_t)(v25 - 20) >> 1) - 1 == v24)
    {
      int v26 = __bt_cmp(v7, (uint64_t)a2, (uint64_t *)(v7 + 16));
      if ((v26 & 0x80000000) == 0)
      {
        __int16 v27 = *(_WORD *)(v7 + 24);
        if (v26)
        {
          *(_WORD *)(v7 + 24) = ++v27;
          int v26 = 1;
        }

        goto LABEL_71;
      }
    }

    goto LABEL_44;
  }

  BOOL v28 = !*((_DWORD *)v21 + 1) && (_DWORD)v24 == 0;
  if (!v28 || (int v26 = __bt_cmp(v7, (uint64_t)a2, (uint64_t *)(v7 + 16)), v26 >= 1))
  {
LABEL_44:
    *(_DWORD *)(v7 + 532) = 0;
    mpool_put(*(MPOOL **)v7, v22, 0);
LABEL_45:
    BOOL v23 = __bt_search(v7, (uint64_t)a2, &v38);
    if (!v23) {
      return 0xFFFFFFFFLL;
    }
    goto LABEL_46;
  }

  __int16 v27 = 0;
LABEL_71:
  *(_WORD *)(v7 + 540) = v27;
  BOOL v38 = v26 == 0;
LABEL_46:
  int v19 = *v23;
  unsigned int v20 = *((unsigned __int16 *)v23 + 4);
  if (a4 == 8)
  {
    if (v38)
    {
      mpool_put(*(MPOOL **)v7, *v23, 0);
      return 1LL;
    }

    goto LABEL_51;
  }

  if (!v38 || (*(_BYTE *)(v7 + 636) & 0x20) == 0) {
    goto LABEL_51;
  }
LABEL_26:
  if (__bt_dleaf(v7, (uint64_t)a2, v19, v20) == -1)
  {
    mpool_put(*(MPOOL **)v7, v19, 0);
    return 0xFFFFFFFFLL;
  }

LABEL_51:
  uint64_t v29 = a2[1];
  uint64_t v30 = a3[1];
  uint64_t v31 = ((_DWORD)v29 + (_DWORD)v30 + 12) & 0xFFFFFFFC;
  int v32 = *((unsigned __int16 *)v19 + 9);
  int v33 = *((unsigned __int16 *)v19 + 8);
  if ((v32 - v33) >= (v31 | 2uLL))
  {
    if ((unsigned __int16)((v33 + 131052) >> 1) > v20)
    {
      _platform_memmove();
      LOWORD(v33) = *((_WORD *)v19 + 8);
      LOWORD(v32) = *((_WORD *)v19 + 9);
      uint64_t v29 = a2[1];
      uint64_t v30 = a3[1];
    }

    *((_WORD *)v19 + 8) = v33 + 2;
    unsigned __int16 v34 = v32 - v31;
    *((_WORD *)v19 + 9) = v34;
    *((_WORD *)v19 + v20 + 10) = v34;
    BOOL v35 = (char *)v19 + v34;
    *(_DWORD *)BOOL v35 = v29;
    *((_DWORD *)v35 + 1) = v30;
    v35[8] = v12;
    _platform_memmove();
    _platform_memmove();
    if ((*(_BYTE *)(v7 + 68) & 9) == 8 && *(_DWORD *)(v7 + 40) == *v19)
    {
      unsigned int v36 = *(unsigned __int16 *)(v7 + 44);
      if (v36 >= v20) {
        *(_WORD *)(v7 + 44) = v36 + 1;
      }
    }

    if (*(_DWORD *)(v7 + 532)) {
      goto LABEL_68;
    }
    if (v19[2])
    {
      if (v19[1] || v20) {
        goto LABEL_68;
      }
      int v37 = 1;
    }

    else
    {
      if ((((unint64_t)*((unsigned __int16 *)v19 + 8) - 20) >> 1) - 1 != v20)
      {
LABEL_68:
        mpool_put(*(MPOOL **)v7, v19, 1u);
LABEL_69:
        uint64_t result = 0LL;
        *(_DWORD *)(v7 + 636) |= 4u;
        return result;
      }

      int v37 = 2;
    }

    *(_DWORD *)(v7 + 532) = v37;
    *(_WORD *)(v7 + 540) = v20;
    *(_DWORD *)(v7 + 536) = *v19;
    goto LABEL_68;
  }

  uint64_t result = __bt_split(v7, v19, (uint64_t)a2, (uint64_t)a3, v12, (v29 + v30 + 12) & 0xFFFC, v20);
  if (!(_DWORD)result) {
    goto LABEL_69;
  }
  return result;
}

pgno_t **__bt_search(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(void *)(a1 + 472) = a1 + 72;
  unint64_t v6 = (pgno_t *)mpool_get(*(MPOOL **)a1, 1u, 0);
  if (!v6) {
    return 0LL;
  }
  uint64_t v7 = v6;
  unsigned int v8 = (pgno_t **)(a1 + 16);
  while (1)
  {
    *unsigned int v8 = v7;
    unsigned int v9 = *((unsigned __int16 *)v7 + 8) + 131052;
    if ((v9 & 0x1FFFE) == 0) {
      break;
    }
    int v10 = 0;
    while (1)
    {
      int v11 = ((v9 >> 2) & 0x7FFF) + v10;
      *(_WORD *)(a1 + 24) = ((v9 >> 2) & 0x7FFF) + v10;
      int v12 = __bt_cmp(a1, a2, (uint64_t *)(a1 + 16));
      if (!v12) {
        break;
      }
      unsigned int v13 = v9 >> 1;
      if (v12 > 0)
      {
        int v10 = v11 + 1;
        LOWORD(v13) = (v9 >> 1) - 1;
      }

      unsigned int v9 = (unsigned __int16)v13;
      if ((v13 & 0xFFFE) == 0) {
        goto LABEL_11;
      }
    }

    if ((v7[3] & 2) != 0) {
      goto LABEL_31;
    }
LABEL_16:
    uint64_t v14 = *(void *)(a1 + 472);
    *(_DWORD *)uint64_t v14 = *v7;
    *(_WORD *)(v14 + 4) = v11;
    *(void *)(a1 + 472) = v14 + 8;
    pgno_t v15 = *(pgno_t *)((char *)v7 + *((unsigned __int16 *)v7 + (unsigned __int16)v11 + 10) + 4);
    mpool_put(*(MPOOL **)a1, v7, 0);
    uint64_t v7 = (pgno_t *)mpool_get(*(MPOOL **)a1, v15, 0);
    if (!v7) {
      return 0LL;
    }
  }

  LOWORD(v10) = 0;
LABEL_11:
  if ((v7[3] & 2) == 0)
  {
    if ((_WORD)v10) {
      LOWORD(v11) = v10 - 1;
    }
    else {
      LOWORD(v11) = 0;
    }
    goto LABEL_16;
  }

  if ((*(_BYTE *)(a1 + 636) & 0x20) != 0)
  {
LABEL_25:
    *a3 = 0;
    *(_WORD *)(a1 + 24) = v10;
    return v8;
  }

  if ((_WORD)v10
    || (pgno_t v19 = v7[1]) == 0
    || (unsigned int v20 = (unsigned __int16 *)mpool_get(*(MPOOL **)a1, v19, 0), (v23[0] = v20) == 0LL))
  {
LABEL_20:
    if (((unint64_t)*((unsigned __int16 *)v7 + 8) - 20) >> 1 == (unsigned __int16)v10)
    {
      pgno_t v16 = v7[2];
      if (v16)
      {
        v23[0] = mpool_get(*(MPOOL **)a1, v16, 0);
        if (v23[0])
        {
          LOWORD(v23[1]) = 0;
          int v17 = __bt_cmp(a1, a2, (uint64_t *)v23);
          int v18 = *(MPOOL **)a1;
          if (!v17) {
            goto LABEL_30;
          }
          mpool_put(v18, v23[0], 0);
        }
      }
    }

    goto LABEL_25;
  }

  LOWORD(v23[1]) = ((v20[8] + 131052) >> 1) - 1;
  int v21 = __bt_cmp(a1, a2, (uint64_t *)v23);
  int v18 = *(MPOOL **)a1;
  if (v21)
  {
    mpool_put(v18, v23[0], 0);
    goto LABEL_20;
  }

uint64_t __bt_seq(uint64_t a1, void *a2, void *a3, unsigned int a4)
{
  uint64_t v7 = *(void *)(a1 + 56);
  unsigned int v8 = *(void **)(v7 + 32);
  if (v8)
  {
    mpool_put(*(MPOOL **)v7, v8, 0);
    *(void *)(v7 + 32) = 0LL;
  }

  if (a4 > 9) {
    goto LABEL_20;
  }
  if (((1 << a4) & 0x4A) != 0)
  {
LABEL_7:
    uint64_t v9 = 0LL;
    switch(a4)
    {
      case 1u:
        if (*a2 && a2[1])
        {
          uint64_t v22 = v7;
          uint64_t v23 = (uint64_t)a2;
          goto LABEL_36;
        }

        *__error() = 22;
        goto LABEL_38;
      case 3u:
      case 7u:
        int v10 = mpool_get(*(MPOOL **)v7, 1u, 0);
        if (!v10) {
          goto LABEL_38;
        }
        int v11 = v10;
        while (2)
        {
          if ((v11[8] & 0xFFFE) == 0x14) {
            goto LABEL_33;
          }
          if ((v11[6] & 0x12) == 0)
          {
            pgno_t v12 = *(_DWORD *)((char *)v11 + (unsigned __int16)v11[10] + 4);
            mpool_put(*(MPOOL **)v7, v11, 0);
            int v11 = mpool_get(*(MPOOL **)v7, v12, 0);
            if (!v11) {
              goto LABEL_38;
            }
            continue;
          }

          break;
        }

        uint64_t v9 = 0LL;
        int v33 = v11;
        __int16 v34 = 0;
        goto LABEL_39;
      case 6u:
      case 9u:
        unsigned int v13 = mpool_get(*(MPOOL **)v7, 1u, 0);
        if (!v13) {
          goto LABEL_38;
        }
        int v11 = v13;
        break;
      default:
        goto LABEL_39;
    }

    while (1)
    {
      uint64_t v14 = (unsigned __int16)v11[8];
      if ((unint64_t)(v14 - 20) <= 1)
      {
LABEL_33:
        mpool_put(*(MPOOL **)v7, v11, 0);
        goto LABEL_34;
      }

      if ((v11[6] & 0x12) != 0) {
        break;
      }
      pgno_t v15 = *(_DWORD *)((char *)v11 + (unsigned __int16)v11[((unint64_t)(v14 - 20) >> 1) + 9] + 4);
      mpool_put(*(MPOOL **)v7, v11, 0);
      int v11 = mpool_get(*(MPOOL **)v7, v15, 0);
      if (!v11) {
        goto LABEL_38;
      }
    }

    uint64_t v9 = 0LL;
    int v33 = v11;
    unsigned int v29 = ((v14 + 131052) >> 1) - 1;
    goto LABEL_56;
  }

  if (((1 << a4) & 0x280) == 0)
  {
LABEL_20:
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }

  if ((*(_BYTE *)(v7 + 68) & 8) == 0) {
    goto LABEL_7;
  }
  if ((*(_BYTE *)(v7 + 68) & 1) != 0)
  {
    uint64_t v23 = v7 + 48;
    uint64_t v22 = v7;
LABEL_36:
    uint64_t v9 = __bt_first(v22, v23, (uint64_t)&v33, &v35);
    goto LABEL_39;
  }

  pgno_t v16 = (pgno_t *)mpool_get(*(MPOOL **)v7, *(_DWORD *)(v7 + 40), 0);
  if (!v16) {
    goto LABEL_38;
  }
  int v18 = v16;
  if (a4 == 9)
  {
    char v19 = *(_BYTE *)(v7 + 68);
    if ((v19 & 4) == 0)
    {
      LOWORD(v30) = *(_WORD *)(v7 + 44);
      if (!(_WORD)v30)
      {
        pgno_t v31 = v16[1];
        mpool_put(*(MPOOL **)v7, v16, 0);
        if (!v31) {
          goto LABEL_34;
        }
        int v32 = (pgno_t *)mpool_get(*(MPOOL **)v7, v31, 0);
        if (!v32) {
          goto LABEL_38;
        }
        int v18 = v32;
        unsigned int v30 = (*((unsigned __int16 *)v32 + 8) + 131052) >> 1;
      }

      unsigned __int16 v17 = v30 - 1;
      goto LABEL_54;
    }
  }

  else
  {
    if (a4 != 7) {
      goto LABEL_54;
    }
    char v19 = *(_BYTE *)(v7 + 68);
    if ((v19 & 2) == 0)
    {
      unsigned __int16 v17 = *(_WORD *)(v7 + 44) + 1;
      if (((unint64_t)*((unsigned __int16 *)v16 + 8) - 20) >> 1 == v17)
      {
        pgno_t v20 = v16[2];
        mpool_put(*(MPOOL **)v7, v16, 0);
        if (v20)
        {
          int v21 = (pgno_t *)mpool_get(*(MPOOL **)v7, v20, 0);
          if (v21)
          {
            int v18 = v21;
            unsigned __int16 v17 = 0;
            goto LABEL_54;
          }

LABEL_38:
          uint64_t v9 = 0xFFFFFFFFLL;
          goto LABEL_39;
        }

          if ((a3 & 0x4000) != 0)
          {
            if (v25 <= 0x7F)
            {
LABEL_53:
              BOOL v38 = (uint64_t)&v15->__magic[4 * v25];
              goto LABEL_64;
            }

            if (v25 >= 0x100)
            {
              uint64_t v57 = v11;
              int v55 = StatusReg;
              sigset_t v47 = v17;
              __int16 v50 = v24;
              pgno_t v39 = v16;
              uint64_t v53 = v23;
              unsigned int v36 = ___runetype_l(((255LL << v12) & (unint64_t)a2) >> v12, 0LL);
              int v24 = v50;
              uint64_t v23 = v53;
              pgno_t v16 = v39;
              unsigned __int16 v17 = v47;
LABEL_57:
              pgno_t v15 = &_DefaultRuneLocale;
              unint64_t StatusReg = v55;
              int v11 = v57;
              if ((v36 & 0x800) == 0) {
                goto LABEL_11;
              }
              goto LABEL_65;
            }

            unsigned int v40 = &__c_locale;
          }

          else
          {
            if (v25 >= 0x100)
            {
              uint64_t v57 = v11;
              int v55 = StatusReg;
              unsigned int v46 = v16;
              uint64_t v49 = v24;
              unint64_t v52 = v23;
              unsigned int v36 = ___runetype(((255LL << v12) & (unint64_t)a2) >> v12);
              int v24 = v49;
              uint64_t v23 = v52;
              pgno_t v16 = v46;
              goto LABEL_57;
            }

            unsigned int v40 = *(void **)(StatusReg + 8LL * v13[54]);
            if (!v40) {
              unsigned int v40 = &__global_locale;
            }
          }

          BOOL v38 = *(void *)(v40[166] + 120LL) + 4LL * v25;
LABEL_64:
          if ((*(_DWORD *)(v38 + 60) & 0x800) == 0) {
            goto LABEL_11;
          }
LABEL_65:
          if ((v25 & 0xF8) != 0x30)
          {
            *(_DWORD *)a1 = 92;
            goto LABEL_33;
          }

LABEL_54:
      uint64_t v9 = 0LL;
      int v33 = v18;
      __int16 v34 = v17;
      goto LABEL_39;
    }
  }

  uint64_t v9 = 0LL;
  *(_BYTE *)(v7 + 68) = v19 & 0xF9;
  int v33 = v16;
  LOWORD(v29) = *(_WORD *)(v7 + 44);
LABEL_56:
  __int16 v34 = v29;
LABEL_39:
  if (!(_DWORD)v9)
  {
    int v24 = *(_DWORD *)v33;
    __int16 v25 = v34;
    int v26 = *(void **)(v7 + 48);
    if (v26)
    {
      free(v26);
      *(void *)(v7 + 48) = 0LL;
      *(void *)(v7 + 56) = 0LL;
    }

    char v27 = *(_BYTE *)(v7 + 68) & 0xF0;
    *(_DWORD *)(v7 + 40) = v24;
    *(_WORD *)(v7 + 44) = v25;
    *(_BYTE *)(v7 + 68) = v27 | 8;
    uint64_t v9 = __bt_ret(v7, (uint64_t)&v33, a2, v7 + 480, a3, (char **)(v7 + 496), 0);
    if ((*(_BYTE *)(v7 + 637) & 0x40) != 0) {
      mpool_put(*(MPOOL **)v7, v33, 0);
    }
    else {
      *(void *)(v7 + 32) = v33;
    }
  }

  return v9;
}

                sigset_t v41 = 0;
                unsigned int v42 = v34 + 1;
                goto LABEL_59;
              }
            }
          }
        }

      __int16 v50 = *(_DWORD *)(v37 + 40);
      if ((v50 & 0x10) != 0)
      {
        if (v44 != 95)
        {
          if (v44 > 0x7F)
          {
            uint64_t v57 = *(_xlocale **)(v28 + 56);
            if (v44 < 0x100)
            {
              uint64_t v62 = &__global_locale;
              if (v57 != (_xlocale *)-1LL) {
                uint64_t v62 = *(void **)(v28 + 56);
              }
              if (!v57) {
                uint64_t v62 = &__c_locale;
              }
              uint64_t v54 = *(_DWORD *)(*(void *)(v62[166] + 120LL) + 4LL * v350 + 60);
            }

            else
            {
              LOWORD(v54) = ___runetype_l(v44, v57);
              unsigned int v43 = v356;
            }
          }

          else
          {
            uint64_t v54 = *v345;
          }

          if ((v54 & 0x500) == 0) {
            goto LABEL_141;
          }
        }

        if (v359 == 95) {
          goto LABEL_141;
        }
        if (v359 <= 0x7F)
        {
          uint64_t v63 = &_DefaultRuneLocale;
          goto LABEL_100;
        }

        BOOL v64 = *(_xlocale **)(v28 + 56);
        if (v359 < 0x100)
        {
          int v66 = &__global_locale;
          if (v64 != (_xlocale *)-1LL) {
            int v66 = *(void **)(v28 + 56);
          }
          if (!v64) {
            int v66 = &__c_locale;
          }
          uint64_t v63 = *(_RuneLocale **)(v66[166] + 120LL);
LABEL_100:
          uint64_t v65 = v63->__runetype[v359];
        }

        else
        {
          LOWORD(v65) = ___runetype_l(v359, v64);
          unsigned int v43 = v356;
        }

        if ((v65 & 0x500) != 0) {
          goto LABEL_141;
        }
        if ((*(_DWORD *)(v37 + 40) & 0x20) == 0) {
          goto LABEL_125;
        }
        goto LABEL_56;
      }

      if ((v50 & 0x20) == 0) {
        goto LABEL_125;
      }
LABEL_56:
      if (!v348) {
        goto LABEL_125;
      }
      __int16 v51 = v359;
      if (!v359) {
        goto LABEL_125;
      }
      if (v44 == 95)
      {
        if (v359 == 95) {
          goto LABEL_141;
        }
        unint64_t v52 = 1;
LABEL_114:
        if (v51 <= 0x7F)
        {
          int v71 = &_DefaultRuneLocale;
          goto LABEL_123;
        }

        char v72 = *(_xlocale **)(v347 + 56);
        if (v51 < 0x100)
        {
          int v74 = &__global_locale;
          if (v72 != (_xlocale *)-1LL) {
            int v74 = *(void **)(v347 + 56);
          }
          if (!v72) {
            int v74 = &__c_locale;
          }
          int v71 = *(_RuneLocale **)(v74[166] + 120LL);
LABEL_123:
          unsigned int v73 = v71->__runetype[v51];
        }

        else
        {
          LOWORD(v73) = ___runetype_l(v51, v72);
          unsigned int v43 = v356;
        }

        uint64_t v49 = v52 == ((v73 & 0x500) != 0);
        BOOL v28 = v347;
        if (v49) {
          goto LABEL_141;
        }
        goto LABEL_125;
      }

      if (v44 > 0x7F)
      {
        uint64_t v60 = *(_xlocale **)(v28 + 56);
        if (v44 < 0x100)
        {
          uint64_t v69 = &__global_locale;
          if (v60 != (_xlocale *)-1LL) {
            uint64_t v69 = *(void **)(v28 + 56);
          }
          if (!v60) {
            uint64_t v69 = &__c_locale;
          }
          unint64_t v56 = *(_DWORD *)(*(void *)(v69[166] + 120LL) + 4LL * v350 + 60);
        }

        else
        {
          uint64_t v61 = ___runetype_l(v44, v60);
          unsigned int v43 = v356;
          LOWORD(v56) = v61;
          __int16 v51 = v359;
        }
      }

      else
      {
        unint64_t v56 = *v345;
      }

      BOOL v70 = v56 & 0x500;
      unint64_t v52 = v70 != 0;
      if (v51 != 95) {
        goto LABEL_114;
      }
      BOOL v28 = v347;
      if (v70) {
        goto LABEL_141;
      }
LABEL_125:
      if ((*(_BYTE *)(v37 + 40) & 0x40) != 0)
      {
        if (!v348) {
          goto LABEL_141;
        }
        __int128 v91 = v359;
        if (!v359) {
          goto LABEL_141;
        }
        if (v44 != 95)
        {
          if (v44 > 0x7F)
          {
            uint64_t v94 = *(_xlocale **)(v28 + 56);
            if (v44 < 0x100)
            {
              int v97 = &__global_locale;
              if (v94 != (_xlocale *)-1LL) {
                int v97 = *(void **)(v28 + 56);
              }
              if (!v94) {
                int v97 = &__c_locale;
              }
              uint64_t v93 = *(_DWORD *)(*(void *)(v97[166] + 120LL) + 4LL * v350 + 60);
            }

            else
            {
              int v95 = ___runetype_l(v44, v94);
              unsigned int v43 = v356;
              LOWORD(v93) = v95;
              __int128 v91 = v359;
            }
          }

          else
          {
            uint64_t v93 = *v345;
          }

          uint64_t v98 = v93 & 0x500;
          __int128 v92 = v98 != 0;
          if (v91 == 95)
          {
            BOOL v28 = v347;
            if (!v98) {
              goto LABEL_141;
            }
            goto LABEL_126;
          }

void __bt_setcur(uint64_t a1, int a2, __int16 a3)
{
  uint64_t v7 = (void *)(a1 + 48);
  unint64_t v6 = *(void **)(a1 + 48);
  if (v6)
  {
    free(v6);
    *uint64_t v7 = 0LL;
    v7[1] = 0LL;
  }

  char v8 = *(_BYTE *)(a1 + 68) & 0xF0;
  *(_DWORD *)(a1 + 40) = a2;
  *(_WORD *)(a1 + 44) = a3;
  *(_BYTE *)(a1 + 68) = v8 | 8;
}

uint64_t __bt_first(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  char v8 = __bt_search(a1, a2, a4);
  if (!v8) {
    return 1LL;
  }
  uint64_t v9 = v8;
  if (!*a4)
  {
    char v19 = *v8;
    pgno_t v20 = v19[2];
    mpool_put(*(MPOOL **)a1, v19, 0);
    if (v20)
    {
      int v21 = (pgno_t *)mpool_get(*(MPOOL **)a1, v20, 0);
      if (!v21) {
        return 0xFFFFFFFFLL;
      }
      *((_WORD *)v9 + 4) = 0;
      *uint64_t v9 = v21;
      goto LABEL_23;
    }

    return 1LL;
  }

  if ((*(_BYTE *)(a1 + 636) & 0x20) != 0)
  {
LABEL_23:
    uint64_t result = 0LL;
    *(_OWORD *)a3 = *(_OWORD *)v9;
    return result;
  }

  int v10 = (int *)((char *)v8 + 10);
  int v11 = *v8;
  int v22 = *(_DWORD *)((char *)v8 + 10);
  __int16 v23 = *((_WORD *)v8 + 7);
  pgno_t v12 = *v8;
  while (*v11 == **v9)
  {
    __int16 v13 = *((_WORD *)v9 + 4);
    if (!v13) {
      goto LABEL_9;
    }
LABEL_7:
    LOWORD(v14) = v13;
LABEL_14:
    *((_WORD *)v9 + 4) = v14 - 1;
    if (__bt_cmp(a1, a2, (uint64_t *)v9))
    {
      pgno_t v16 = *v11;
LABEL_16:
      if (*v12 != v16) {
        mpool_put(*(MPOOL **)a1, v12, 0);
      }
      uint64_t result = 0LL;
      *(void *)a3 = v11;
      *(_WORD *)(a3 + 8) = v13;
      *(_DWORD *)(a3 + 10) = v22;
      *(_WORD *)(a3 + 14) = v23;
      return result;
    }
  }

  mpool_put(*(MPOOL **)a1, v11, 0);
  int v11 = *v9;
  __int16 v13 = *((_WORD *)v9 + 4);
  int v22 = *v10;
  __int16 v23 = *((_WORD *)v9 + 7);
  if (v13) {
    goto LABEL_7;
  }
LABEL_9:
  pgno_t v15 = v12[1];
  pgno_t v16 = *v11;
  if (!v15) {
    goto LABEL_16;
  }
  if (*v12 != v16)
  {
    mpool_put(*(MPOOL **)a1, v12, 0);
    pgno_t v15 = v12[1];
  }

  unsigned __int16 v17 = (pgno_t *)mpool_get(*(MPOOL **)a1, v15, 0);
  if (v17)
  {
    *uint64_t v9 = v17;
    unsigned int v14 = (*((unsigned __int16 *)v17 + 8) + 131052) >> 1;
    pgno_t v12 = v17;
    goto LABEL_14;
  }

  if (*v12 == *v11) {
    mpool_put(*(MPOOL **)a1, v11, 0);
  }
  return 0xFFFFFFFFLL;
}

uint64_t __bt_split(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, char a5, __int16 a6, unsigned __int16 a7)
{
  pgno_t v12 = a2;
  unsigned __int16 v67 = a7;
  if (*a2 == 1)
  {
    unsigned int v14 = bt_root(a1, (uint64_t)a2, (pgno_t **)&v69, (pgno_t **)&v68, &v67, a6);
    if (!v14) {
      return 0xFFFFFFFFLL;
    }
LABEL_5:
    unsigned __int16 v15 = *((_WORD *)v14 + 9) - a6;
    *((_WORD *)v14 + 9) = v15;
    *((_WORD *)v14 + v67 + 10) = v15;
    pgno_t v16 = (char *)v14 + v15;
    if ((*(_BYTE *)(a1 + 636) & 0x80) != 0)
    {
      *(_DWORD *)pgno_t v16 = *(void *)(a4 + 8);
      v16[4] = a5;
    }

    else
    {
      *(_DWORD *)pgno_t v16 = *(void *)(a3 + 8);
      *((_DWORD *)v16 + 1) = *(void *)(a4 + 8);
      v16[8] = a5;
      _platform_memmove();
    }

    _platform_memmove();
    if (*v12 == 1)
    {
      unsigned __int16 v17 = (unsigned __int16 *)v68;
      int v18 = (unsigned __int16 *)v69;
      if ((*(_BYTE *)(a1 + 636) & 0x80) != 0)
      {
        bt_rroot(a1, (uint64_t)v12, (uint64_t)v69, (uint64_t)v68);
      }

      else if (bt_broot(a1, (uint64_t)v12, v69, (uint64_t)v68) == -1)
      {
LABEL_86:
        mpool_put(*(MPOOL **)a1, v18, 0);
        mpool_put(*(MPOOL **)a1, v17, 0);
        __dbpanic(*(void **)(a1 + 8));
        return 0xFFFFFFFFLL;
      }
    }

    uint64_t v19 = *(void *)(a1 + 472);
    if (v19 == a1 + 72)
    {
LABEL_84:
      mpool_put(*(MPOOL **)a1, v69, 1u);
      mpool_put(*(MPOOL **)a1, v68, 1u);
      return 0LL;
    }

    while (1)
    {
      pgno_t v20 = *(_DWORD *)(v19 - 8);
      *(void *)(a1 + 472) = v19 - 8;
      unsigned __int16 v17 = (unsigned __int16 *)v68;
      int v18 = (unsigned __int16 *)v69;
      int v21 = mpool_get(*(MPOOL **)a1, v20, 0);
      if (!v21) {
        goto LABEL_86;
      }
      uint64_t v22 = (uint64_t)v21;
      unsigned __int16 v23 = *(_WORD *)(v19 - 4) + 1;
      unsigned __int16 v67 = v23;
      unsigned int v24 = *((_DWORD *)v17 + 3) & 0x1F;
      if (v24 > 7)
      {
        if (v24 != 8 && v24 != 16) {
LABEL_88:
        }
          abort_report_np((uint64_t)"%s:%s:%u: illegal rchild->flags & P_TYPE (0x%x)");
        unsigned int v26 = 8;
      }

      else if (v24 == 1)
      {
        unsigned int v26 = (*(_DWORD *)((_BYTE *)v17 + v17[10]) & 0xFFFFFFFC) + 12;
      }

      else
      {
        if (v24 != 2) {
          goto LABEL_88;
        }
        uint64_t v7 = (unsigned int *)((char *)v17 + v17[10]);
        uint64_t v25 = *v7;
        unsigned int v26 = (v25 & 0xFFFFFFFC) + 12;
        char v27 = *(uint64_t (**)(void *, void *))(a1 + 552);
        if (v27 && (v7[2] & 2) == 0 && (!v21[1] ? (BOOL v28 = v23 >= 2u) : (BOOL v28 = 1), v28))
        {
          unsigned int v29 = (unsigned int *)((char *)v18
                               + *(unsigned __int16 *)((char *)v18 + ((v18[8] - 20LL) & 0xFFFFFFFFFFFFFFFELL) + 18));
          uint64_t v30 = *v29;
          v71[0] = (char *)v29 + 9;
          v71[1] = v30;
          v70[0] = (char *)v7 + 9;
          v70[1] = v25;
          int v31 = v27(v71, v70);
          if ((v31 & 0xFFFFFFFC) + 12 >= v26)
          {
            int v32 = 0;
          }

          else
          {
            unsigned int v26 = (v31 & 0xFFFFFFFC) + 12;
            int v32 = v31;
          }

          int v66 = v32;
        }

        else
        {
          int v66 = 0;
        }
      }

      int v34 = *(unsigned __int16 *)(v22 + 16);
      unint64_t v35 = *(unsigned __int16 *)(v22 + 18) - v34;
      unint64_t v36 = v26 + 2LL;
      if (v35 >= v36)
      {
        if ((unsigned __int16)((v34 + 131052) >> 1) > v23)
        {
          _platform_memmove();
          LOWORD(v34) = *(_WORD *)(v22 + 16);
        }

        *(_WORD *)(v22 + 16) = v34 + 2;
        BOOL v38 = (char *)v22;
        uint64_t v22 = (uint64_t)v12;
      }

      else
      {
        if (*(_DWORD *)v22 == 1) {
          int v37 = bt_root(a1, v22, (pgno_t **)&v69, (pgno_t **)&v68, &v67, (unsigned __int16)v26);
        }
        else {
          int v37 = bt_page(a1, v22, (uint64_t *)&v69, &v68, &v67, (unsigned __int16)v26);
        }
        BOOL v38 = (char *)v37;
        if (!v37) {
          goto LABEL_85;
        }
      }

      pgno_t v12 = (_DWORD *)v22;
      unsigned int v39 = *((_DWORD *)v17 + 3) & 0x1F;
      if (v39 > 7)
      {
        if (v39 == 8)
        {
          uint64_t v47 = v67;
          if (v67)
          {
            stat v48 = &v38[2 * v67 + 18];
            uint64_t v49 = v38;
          }

          else
          {
            uint64_t v49 = (char *)v69;
            stat v48 = (char *)v69 + ((*((unsigned __int16 *)v69 + 8) - 20LL) & 0xFFFFFFFFFFFFFFFELL) + 18;
          }

          unsigned int v52 = v18[8] + 131052;
          uint64_t v53 = (unsigned __int16)(v52 >> 1);
          if ((unsigned __int16)(v52 >> 1))
          {
            int v54 = 0;
            int v55 = v18 + 10;
            do
            {
              unsigned int v56 = *v55++;
              v54 += *(_DWORD *)((char *)v18 + v56);
              --v53;
            }

            while (v53);
          }

          else
          {
            int v54 = 0;
          }

          uint64_t v57 = &v49[*(unsigned __int16 *)v48];
          *(_DWORD *)uint64_t v57 = v54;
          *((_DWORD *)v57 + 1) = *(_DWORD *)v18;
          __int16 v58 = *((_WORD *)v38 + 9) - v26;
          *((_WORD *)v38 + 9) = v58;
          *(_WORD *)&v38[2 * v47 + 20] = v58;
          unsigned int v59 = v17[8] + 131052;
          uint64_t v60 = (unsigned __int16)(v59 >> 1);
          if ((unsigned __int16)(v59 >> 1))
          {
            int v61 = 0;
            uint64_t v62 = v17 + 10;
            do
            {
              unsigned int v63 = *v62++;
              v61 += *(_DWORD *)((char *)v17 + v63);
              --v60;
            }

            while (v60);
          }

          else
          {
            int v61 = 0;
          }

          BOOL v64 = &v38[*(unsigned __int16 *)&v38[2 * v67 + 20]];
          *(_DWORD *)BOOL v64 = v61;
          *((_DWORD *)v64 + 1) = *(_DWORD *)v17;
        }

        else
        {
          if (v39 != 16) {
            goto LABEL_88;
          }
          uint64_t v42 = v67;
          if (v67)
          {
            unsigned int v43 = &v38[2 * v67 + 18];
            unsigned int v44 = v38;
          }

          else
          {
            unsigned int v44 = (char *)v69;
            unsigned int v43 = (char *)v69 + ((*((unsigned __int16 *)v69 + 8) - 20LL) & 0xFFFFFFFFFFFFFFFELL) + 18;
          }

          __int16 v50 = &v44[*(unsigned __int16 *)v43];
          *(_DWORD *)__int16 v50 = ((unint64_t)v18[8] + 0x1FFFFFFECLL) >> 1;
          *((_DWORD *)v50 + 1) = *(_DWORD *)v18;
          LOWORD(v50) = *((_WORD *)v38 + 9) - v26;
          *((_WORD *)v38 + 9) = (_WORD)v50;
          *(_WORD *)&v38[2 * v42 + 20] = (_WORD)v50;
          __int16 v51 = &v38[*(unsigned __int16 *)&v38[2 * v67 + 20]];
          *(_DWORD *)__int16 v51 = ((unint64_t)v17[8] + 0x1FFFFFFECLL) >> 1;
          *((_DWORD *)v51 + 1) = *(_DWORD *)v17;
        }
      }

      else if (v39 == 1)
      {
        __int16 v45 = *((_WORD *)v38 + 9) - v26;
        *((_WORD *)v38 + 9) = v45;
        *(_WORD *)&v38[2 * v67 + 20] = v45;
        unsigned int v46 = &v38[*(unsigned __int16 *)&v38[2 * v67 + 20]];
        _platform_memmove();
        *((_DWORD *)v46 + 1) = *(_DWORD *)v17;
      }

      else
      {
        if (v39 != 2) {
          goto LABEL_88;
        }
        __int16 v40 = *((_WORD *)v38 + 9) - v26;
        *((_WORD *)v38 + 9) = v40;
        *(_WORD *)&v38[2 * v67 + 20] = v40;
        sigset_t v41 = &v38[*(unsigned __int16 *)&v38[2 * v67 + 20]];
        if (v66) {
          *(_DWORD *)sigset_t v41 = v66;
        }
        else {
          *(_DWORD *)sigset_t v41 = *v7;
        }
        *((_DWORD *)v41 + 1) = *(_DWORD *)v17;
        v41[8] = v7[2] & 2;
        _platform_memmove();
        if ((v7[2] & 2) != 0 && bt_preserve((MPOOL **)a1, *(unsigned int *)((char *)v7 + 9)) == -1)
        {
LABEL_85:
          mpool_put(*(MPOOL **)a1, v18, 1u);
          mpool_put(*(MPOOL **)a1, v17, 1u);
          unsigned __int16 v17 = (unsigned __int16 *)v68;
          int v18 = (unsigned __int16 *)v69;
          goto LABEL_86;
        }
      }

      if (v35 >= v36)
      {
        mpool_put(*(MPOOL **)a1, v38, 1u);
        goto LABEL_84;
      }

      if (*v12 == 1)
      {
        if ((*(_BYTE *)(a1 + 636) & 0x80) != 0)
        {
          bt_rroot(a1, (uint64_t)v12, (uint64_t)v69, (uint64_t)v68);
        }

        else if (bt_broot(a1, (uint64_t)v12, v69, (uint64_t)v68) == -1)
        {
          goto LABEL_85;
        }
      }

      mpool_put(*(MPOOL **)a1, v18, 1u);
      mpool_put(*(MPOOL **)a1, v17, 1u);
      uint64_t v19 = *(void *)(a1 + 472);
      if (v19 == a1 + 72) {
        goto LABEL_84;
      }
    }
  }

  unsigned int v14 = bt_page(a1, (uint64_t)a2, (uint64_t *)&v69, &v68, &v67, a6);
  if (v14) {
    goto LABEL_5;
  }
  return 0xFFFFFFFFLL;
}

pgno_t *bt_root(uint64_t a1, uint64_t a2, pgno_t **a3, pgno_t **a4, _WORD *a5, unsigned int a6)
{
  uint64_t result = __bt_new(a1, &v18);
  if (result)
  {
    __int16 v13 = result;
    uint64_t result = __bt_new(a1, &v17);
    if (result)
    {
      unsigned int v14 = result;
      pgno_t *v13 = v18;
      pgno_t v15 = v17;
      *uint64_t result = v17;
      result[1] = *v13;
      v13[1] = 0;
      int v13[2] = v15;
      *((_WORD *)result + 8) = 20;
      *((_WORD *)v13 + 8) = 20;
      LOWORD(v15) = *(_WORD *)(a1 + 520);
      *((_WORD *)result + 9) = v15;
      *((_WORD *)v13 + 9) = v15;
      int v16 = *(_DWORD *)(a2 + 12) & 0x1F;
      result[2] = 0;
      result[3] = v16;
      v13[3] = v16;
      uint64_t result = bt_psplit(a1, a2, v13, result, a5, a6);
      *a3 = v13;
      *a4 = v14;
    }
  }

  return result;
}

_DWORD *bt_page(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, unsigned __int16 *a5, unsigned int a6)
{
  pgno_t v12 = __bt_new(a1, &v24);
  __int16 v13 = v12;
  if (!v12) {
    return v13;
  }
  pgno_t v14 = v24;
  *pgno_t v12 = v24;
  *((_WORD *)v12 + 8) = 20;
  size_t v15 = *(unsigned int *)(a1 + 520);
  *((_WORD *)v12 + 9) = v15;
  int v16 = *(_DWORD *)(a2 + 8);
  int v17 = *(_DWORD *)(a2 + 12);
  v12[1] = *(_DWORD *)a2;
  int v12[2] = v16;
  void v12[3] = v17 & 0x1F;
  if (!*(_DWORD *)(a2 + 8) && *a5 == ((unint64_t)*(unsigned __int16 *)(a2 + 16) - 20) >> 1)
  {
    *(_DWORD *)(a2 + 8) = v14;
    *((_WORD *)v12 + 8) = 22;
    *a5 = 0;
    *a3 = a2;
    *a4 = v12;
    return v13;
  }

  pgno_t v18 = calloc(1uLL, v15);
  if (!v18)
  {
    mpool_put(*(MPOOL **)a1, v13, 0);
    return 0LL;
  }

  uint64_t v19 = v18;
  *pgno_t v18 = *(void *)a2;
  *((_DWORD *)v18 + 2) = *v13;
  *((_WORD *)v18 + 8) = 20;
  *((_WORD *)v18 + 9) = *(_DWORD *)(a1 + 520);
  pgno_t v20 = *(_DWORD *)(a2 + 8);
  *((_DWORD *)v18 + 3) = *(_DWORD *)(a2 + 12) & 0x1F;
  if (v20)
  {
    int v21 = mpool_get(*(MPOOL **)a1, v20, 0);
    if (v21)
    {
      v21[1] = *v13;
      mpool_put(*(MPOOL **)a1, v21, 1u);
      goto LABEL_9;
    }

    free(v19);
    return 0LL;
  }

LABEL_9:
  uint64_t v22 = bt_psplit(a1, a2, v19, v13, a5, a6);
  _platform_memmove();
  if (v22 == v19) {
    uint64_t v22 = (_DWORD *)a2;
  }
  free(v19);
  *a3 = a2;
  *a4 = v13;
  return v22;
}

    __int16 v13 = *(void *)result;
    *(void *)(v13 + 8) = *(void *)(result + 8);
    **(void **)(result + 8) = v13;
    pgno_t v14 = *(void *)(a1 + 608);
    *(void *)uint64_t result = a1 + 600;
    *(void *)(result + 8) = v14;
    *(void *)(a1 + 608) = result;
    **(void **)(result + 8) = result;
    return result;
  }

  uint64_t result = *(void *)(a3 + 16);
  if (!result || *(_DWORD *)(result + 24) != a2) {
    uint64_t result = 0LL;
  }
  uint64_t v9 = 0LL;
  int v10 = 0LL;
  int v11 = 2 * (a4 == 0);
  if (result) {
    goto LABEL_9;
  }
LABEL_12:
  size_t v15 = (uint64_t *)(a1 + 600);
  int v16 = *(void *)(a1 + 600);
  int v17 = *(void **)(a1 + 304);
  if ((void *)v16 == v17)
  {
    pgno_t v18 = *(void *)v16;
    *(void *)(v18 + 8) = *(void *)(v16 + 8);
    **(void **)(v16 + 8) = v18;
    uint64_t v19 = *(void *)(a1 + 608);
    *(void *)int v16 = v15;
    *(void *)(v16 + 8) = v19;
    *(void *)(a1 + 608) = v16;
    **(void **)(v16 + 8) = v16;
    int v16 = *(void *)(a1 + 600);
  }

  pgno_t v20 = *(_DWORD *)(a1 + 596);
  if (!a3 || v20)
  {
    if (v20)
    {
LABEL_28:
      uint64_t result = (unint64_t)calloc(1uLL, 0x30uLL);
      if (!result) {
        return result;
      }
      int v16 = result;
      char v27 = calloc(1uLL, *(int *)(a1 + 12));
      *(void *)(v16 + 32) = v27;
      if (v27)
      {
        BOOL v28 = *(_DWORD *)(a1 + 596);
        if (v28) {
          *(_DWORD *)(a1 + 596) = v28 - 1;
        }
        goto LABEL_53;
      }

      free((void *)v16);
      return 0LL;
    }
  }

  else
  {
    int v21 = *(void *)(v16 + 16);
    if (v21)
    {
      while (v21 != a3)
      {
        int v21 = *(void *)(v21 + 16);
        if (!v21) {
          goto LABEL_21;
        }
      }

      *(_DWORD *)(a1 + 596) = 1;
      goto LABEL_28;
    }
  }

    os_unfair_lock_unlock(&stru_18C43B534);
    while (1)
    {
LABEL_10:
      uint64_t v7 = v6;
      if ((v5 & 1) != 0)
      {
        char v8 = __mult_D2A(v3, v6);
        __Bfree_D2A(v3);
        unint64_t v3 = v8;
      }

      v5 >>= 1;
      unint64_t v6 = *(_DWORD **)v7;
      if (!*(void *)v7)
      {
        os_unfair_lock_lock(&stru_18C43B534);
        unint64_t v6 = *(_DWORD **)v7;
        if (*(void *)v7) {
          goto LABEL_9;
        }
        unint64_t v6 = __mult_D2A(v7, v7);
        *(void *)uint64_t v7 = v6;
        goto LABEL_8;
      }
    }
  }

  return v3;
}

  *(_DWORD *)(v7 + 32) = 2048;
  char v8 = malloc(0x800uLL);
  *(void *)(v7 + 24) = v8;
  if (!v8) {
    goto LABEL_19;
  }
  if (a3)
  {
    uint64_t v9 = v8;
    v8[511] = 0;
    int v10 = __getdirentries64();
    *(void *)(v7 + 16) = v10;
    if ((v10 & 0x8000000000000000LL) == 0)
    {
      else {
        int v11 = *(_DWORD *)(v7 + 56);
      }
      pgno_t v12 = v11 | 0x10;
      goto LABEL_22;
    }

    if (*__error() == 22) {
      *__error() = 20;
    }
    goto LABEL_19;
  }

  *(void *)(v7 + 16) = 0LL;
  *(void *)(*(void *)(v7 + 128) + 16LL) = 0LL;
  return v7;
}

  if (strsignal_r(__sig, (char *)v3, 0x800uLL))
  {
    pgno_t v4 = 22;
    goto LABEL_11;
  }

  return (char *)v3;
}

    *__error() = 22;
    return -1;
  }

  return 0;
}

uint64_t bt_rroot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = *(_DWORD *)(a1 + 520);
  *(_WORD *)(a2 + 18) = v4 - 8;
  *(_WORD *)(a2 + 20) = v4 - 8;
  uint64_t v5 = (_DWORD *)(a2 + (unsigned __int16)(v4 - 8));
  uint64_t v6 = *(unsigned __int16 *)(a3 + 16);
  if ((*(_BYTE *)(a3 + 12) & 0x10) != 0)
  {
    unint64_t v9 = (unint64_t)(v6 + 0x1FFFFFFECLL) >> 1;
  }

  else
  {
    unsigned int v7 = v6 + 131052;
    uint64_t v8 = (unsigned __int16)(v7 >> 1);
    if ((unsigned __int16)(v7 >> 1))
    {
      LODWORD(v9) = 0;
      int v10 = (unsigned __int16 *)(a3 + 20);
      do
      {
        unsigned int v11 = *v10++;
        LODWORD(v9) = *(_DWORD *)(a3 + v11) + v9;
        --v8;
      }

      while (v8);
    }

    else
    {
      LODWORD(v9) = 0;
    }
  }

  _DWORD *v5 = v9;
  v5[1] = *(_DWORD *)a3;
  unsigned __int16 v12 = v4 - 16;
  *(_WORD *)(a2 + 18) = v12;
  *(_WORD *)(a2 + 22) = v12;
  uint64_t v13 = *(unsigned __int16 *)(a4 + 16);
  if ((*(_BYTE *)(a4 + 12) & 0x10) != 0)
  {
    unint64_t v16 = (unint64_t)(v13 + 0x1FFFFFFECLL) >> 1;
  }

  else
  {
    unsigned int v14 = v13 + 131052;
    uint64_t v15 = (unsigned __int16)(v14 >> 1);
    if ((unsigned __int16)(v14 >> 1))
    {
      LODWORD(v16) = 0;
      int v17 = (unsigned __int16 *)(a4 + 20);
      do
      {
        unsigned int v18 = *v17++;
        LODWORD(v16) = *(_DWORD *)(a4 + v18) + v16;
        --v15;
      }

      while (v15);
    }

    else
    {
      LODWORD(v16) = 0;
    }
  }

  uint64_t v19 = (_DWORD *)(a2 + v12);
  *uint64_t v19 = v16;
  v19[1] = *(_DWORD *)a4;
  *(_WORD *)(a2 + 16) = 24;
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFFE0 | 8;
  return mpool_put(*(MPOOL **)a1, (void *)a2, 1u);
}

uint64_t bt_broot(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  unsigned __int16 v7 = *(_WORD *)(a1 + 520) - 12;
  *(_WORD *)(a2 + 18) = v7;
  *(_WORD *)(a2 + 20) = v7;
  uint64_t v8 = a2 + v7;
  *(_DWORD *)uint64_t v8 = 0;
  *(_DWORD *)(v8 + 4) = *a3;
  *(_BYTE *)(v8 + 8) = 0;
  if ((*(_DWORD *)(a2 + 12) & 0x1F) == 1)
  {
    unsigned __int16 v14 = *(_WORD *)(a2 + 18) - ((*(_WORD *)(a4 + *(unsigned __int16 *)(a4 + 20)) & 0xFFFC) + 12);
    *(_WORD *)(a2 + 18) = v14;
    *(_WORD *)(a2 + 22) = v14;
    uint64_t v15 = a2 + v14;
    _platform_memmove();
    *(_DWORD *)(v15 + 4) = *(_DWORD *)a4;
LABEL_7:
    *(_WORD *)(a2 + 16) = 24;
    *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFFE0 | 1;
    mpool_put(*(MPOOL **)a1, (void *)a2, 1u);
    return 0LL;
  }

  if ((*(_DWORD *)(a2 + 12) & 0x1F) != 2) {
    abort_report_np((uint64_t)"%s:%s:%u: illegal h->flags & P_TYPE (0x%x)");
  }
  unint64_t v9 = (int *)(a4 + *(unsigned __int16 *)(a4 + 20));
  int v10 = *v9;
  unsigned __int16 v11 = *(_WORD *)(a2 + 18) - (*(_WORD *)v9 & 0xFFFC) - 12;
  *(_WORD *)(a2 + 18) = v11;
  *(_WORD *)(a2 + 22) = v11;
  uint64_t v12 = a2 + v11;
  *(_DWORD *)uint64_t v12 = v10;
  *(_DWORD *)(v12 + 4) = *(_DWORD *)a4;
  *(_BYTE *)(v12 + 8) = 0;
  _platform_memmove();
  if ((v9[2] & 2) == 0) {
    goto LABEL_7;
  }
  uint64_t result = bt_preserve((MPOOL **)a1, *(int *)((char *)v9 + 9));
  if ((_DWORD)result != -1) {
    goto LABEL_7;
  }
  return result;
}

uint64_t bt_preserve(MPOOL **a1, pgno_t a2)
{
  unint64_t v3 = mpool_get(*a1, a2, 0);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  v3[3] |= 0x20u;
  mpool_put(*a1, v3, 1u);
  return 0LL;
}

_DWORD *bt_psplit(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, _WORD *a5, unsigned int a6)
{
  uint64_t v6 = (_DWORD *)a2;
  unsigned int v7 = (unsigned __int16)*a5;
  unsigned int v39 = *(unsigned __int16 *)(a2 + 16) + 131052;
  unsigned int v8 = (unsigned __int16)(v39 >> 1);
  if ((unsigned __int16)(v39 >> 1))
  {
    int v9 = 0;
    uint64_t v10 = 0LL;
    int v11 = 0;
    unsigned __int16 v12 = 0;
    unsigned __int16 v13 = 0;
    unsigned int v14 = (unsigned __int16)(*(_WORD *)(a1 + 520) - 20) >> 1;
    unint64_t v43 = (unsigned __int16)(*(_WORD *)(a1 + 520) - 20);
    uint64_t v15 = v8 - 1;
    unsigned int v42 = (unsigned __int16)*a5;
    while (1)
    {
      if (v7 == v12)
      {
        int v16 = 0;
        unsigned int v17 = a6;
      }

      else
      {
        unsigned int v18 = v6[3] & 0x1F;
        if (v18 > 7)
        {
          if (v18 == 8)
          {
            int v16 = 0;
            unsigned int v17 = 8;
          }

          else
          {
            if (v18 != 16) {
LABEL_64:
            }
              abort_report_np((uint64_t)"%s:%s:%u: illegal h->flags & P_TYPE (0x%x)");
            int v16 = 0;
            unsigned int v17 = (*(_DWORD *)((char *)v6 + *((unsigned __int16 *)v6 + v13 + 10)) & 0xFFFFFFFC) + 8;
          }
        }

        else
        {
          if (v18 == 1)
          {
            uint64_t v19 = (char *)v6 + *((unsigned __int16 *)v6 + v13 + 10);
            unsigned int v17 = (*(_DWORD *)v19 & 0xFFFFFFFC) + 12;
          }

          else
          {
            if (v18 != 2) {
              goto LABEL_64;
            }
            uint64_t v19 = (char *)v6 + *((unsigned __int16 *)v6 + v13 + 10);
            unsigned int v17 = (*(_DWORD *)v19 + *((_DWORD *)v19 + 1) + 12) & 0xFFFFFFFC;
          }

          int v16 = v19[8] & 2;
        }
      }

      if (v7 <= v12)
      {
        if ((unint64_t)(v17 + (unsigned __int16)v11) + 2 >= v43 || (_DWORD)v15 == v9)
        {
LABEL_31:
          --v12;
          goto LABEL_32;
        }
      }

      else if ((_DWORD)v15 == v9)
      {
        goto LABEL_31;
      }

      if (v7 != v12)
      {
        ++v13;
        __int16 v21 = *((_WORD *)a3 + 9) - v17;
        *((_WORD *)a3 + 9) = v21;
        *((_WORD *)a3 + v12 + 10) = v21;
        unsigned int v46 = v17;
        uint64_t v22 = v10;
        uint64_t v23 = v15;
        pgno_t v24 = v6;
        int v25 = v11;
        _platform_memmove();
        unsigned int v17 = v46;
        int v11 = v25;
        uint64_t v6 = v24;
        uint64_t v15 = v23;
        unsigned int v7 = v42;
        uint64_t v10 = v22;
      }

      __int16 v26 = v11 + v17;
      v11 += v17 + 2;
      if (v14 <= (unsigned __int16)(v26 + 2))
      {
        if (!v16 || (_DWORD)v10 == 3) {
          goto LABEL_32;
        }
        uint64_t v10 = (v10 + 1);
      }

      ++v12;
      int v9 = v13;
      if (v8 <= v13) {
        goto LABEL_32;
      }
    }
  }

  unsigned __int16 v13 = 0;
  unsigned __int16 v12 = 0;
LABEL_32:
  *((_WORD *)a3 + 8) += 2 * v12 + 2;
  if ((*(_BYTE *)(a1 + 68) & 8) != 0 && *(_DWORD *)(a1 + 40) == *v6)
  {
    unsigned int v27 = *(unsigned __int16 *)(a1 + 44);
    if (v27 >= v7)
    {
      LOWORD(v27) = v27 + 1;
      *(_WORD *)(a1 + 44) = v27;
    }

    if ((unsigned __int16)v27 >= v13)
    {
      *(_DWORD *)(a1 + 40) = *a4;
      *(_WORD *)(a1 + 44) = v27 - v13;
    }

    else
    {
      *(_DWORD *)(a1 + 40) = *a3;
    }
  }

  if (v7 <= v12)
  {
    LOWORD(v7) = -1;
    BOOL v28 = a4;
  }

  else
  {
    *a5 -= v13;
    BOOL v28 = a4;
    a3 = a4;
  }

  if (v8 <= v13)
  {
    __int16 v35 = 0;
  }

  else
  {
    int v29 = 0;
    do
    {
      else {
        int v30 = v29;
      }
      unsigned int v31 = v6[3] & 0x1F;
      if (v31 > 7)
      {
        if (v31 == 8)
        {
          LOWORD(v33) = 8;
        }

        else
        {
          if (v31 != 16) {
            goto LABEL_64;
          }
          unsigned int v33 = (*(_DWORD *)((char *)v6 + *((unsigned __int16 *)v6 + v13 + 10)) & 0xFFFFFFFC) + 8;
        }
      }

      else if (v31 == 1)
      {
        unsigned int v33 = (*(_DWORD *)((char *)v6 + *((unsigned __int16 *)v6 + v13 + 10)) & 0xFFFFFFFC) + 12;
      }

      else
      {
        if (v31 != 2) {
          goto LABEL_64;
        }
        int v32 = (_DWORD *)((char *)v6 + *((unsigned __int16 *)v6 + v13 + 10));
        unsigned int v33 = (*v32 + v32[1] + 12) & 0xFFFFFFFC;
      }

      ++v13;
      __int16 v34 = *((_WORD *)v28 + 9) - v33;
      *((_WORD *)v28 + 9) = v34;
      *((_WORD *)v28 + (unsigned __int16)v30 + 10) = v34;
      _platform_memmove();
      int v29 = v30 + 1;
    }

    while (v8 > v13);
    __int16 v35 = 2 * v29;
  }

  __int16 v36 = *((_WORD *)v28 + 8) + v35;
  *((_WORD *)v28 + 8) = v36;
  return a3;
}

uint64_t __bt_ret(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, char **a6, int a7)
{
  int v11 = (unsigned int *)(*(void *)a2 + *(unsigned __int16 *)(*(void *)a2 + 2LL * *(unsigned __int16 *)(a2 + 8) + 20));
  if (a3)
  {
    if ((v11[2] & 2) != 0)
    {
    }

    else
    {
      if (!a7 && (*(_BYTE *)(a1 + 637) & 0x40) == 0)
      {
        unsigned int v14 = (char *)v11 + 9;
        a3[1] = *v11;
LABEL_13:
        *a3 = v14;
        goto LABEL_14;
      }

      if (*(void *)(a4 + 8) < (unint64_t)*v11)
      {
        uint64_t v15 = realloc(*(void **)a4, *v11);
        if (!v15) {
          return 0xFFFFFFFFLL;
        }
        uint64_t v16 = *v11;
        *(void *)a4 = v15;
        *(void *)(a4 + 8) = v16;
      }

      _platform_memmove();
      a3[1] = *v11;
    }

    unsigned int v14 = *(void **)a4;
    goto LABEL_13;
  }

LABEL_14:
  if (!a5) {
    return 0LL;
  }
  if ((v11[2] & 1) != 0)
  {
    if (!__ovfl_get(a1, (unsigned int *)((char *)v11 + *v11 + 9), a5 + 1, (void **)a6, (size_t *)a6 + 1))
    {
LABEL_26:
      unsigned int v18 = *a6;
      goto LABEL_27;
    }

    return 0xFFFFFFFFLL;
  }

  if (a7 || (*(_BYTE *)(a1 + 637) & 0x40) != 0)
  {
    size_t v20 = v11[1] + 1;
    if ((unint64_t)a6[1] >= v20)
    {
LABEL_25:
      _platform_memmove();
      a5[1] = v11[1];
      goto LABEL_26;
    }

    __int16 v21 = (char *)realloc(*a6, v20);
    if (v21)
    {
      unsigned int v22 = v11[1];
      *a6 = v21;
      a6[1] = (char *)(v22 + 1);
      goto LABEL_25;
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v17 = *v11;
  a5[1] = v11[1];
  unsigned int v18 = (char *)v11 + v17 + 9;
LABEL_27:
  uint64_t result = 0LL;
  *a5 = v18;
  return result;
}

    unsigned int v7 = 1LL;
LABEL_15:
    int v4 = &v3[v7];
    uint64_t v6 = v3[v7];
    int v2 = v9;
    LODWORD(v7) = 0;
  }

  else
  {
    unsigned int v8 = v5 - 104;
    int v9 = 5;
    switch(v8)
    {
      case 0:
        uint64_t v10 = *++v4;
        uint64_t v6 = v10;
        unsigned int v7 = 2LL;
        if (v10 == 104)
        {
          int v9 = 1;
          goto LABEL_15;
        }

        if (!v6) {
          goto LABEL_59;
        }
        LODWORD(v7) = 0;
        int v2 = 2;
        break;
      case 2:
        goto LABEL_15;
      case 4:
        int v11 = *++v4;
        uint64_t v6 = v11;
        if (v11 == 108)
        {
          int v9 = 4;
          unsigned int v7 = 2LL;
          goto LABEL_15;
        }

        if (!v6) {
          goto LABEL_59;
        }
        LODWORD(v7) = 0;
        int v2 = 3;
        break;
      case 9:
        int v9 = 4;
        goto LABEL_14;
      default:
        break;
    }
  }

    unint64_t v3 = __error();
    int v4 = 92;
    goto LABEL_3;
  }

  if (a2 >= 0x110000) {
    goto LABEL_14;
  }
  uint64_t v6 = -16;
  uint64_t v5 = 4LL;
LABEL_16:
  unsigned int v7 = v5 - 1;
  do
  {
    a1[v7] = a2 & 0x3F | 0x80;
    a2 = (int)a2 >> 6;
    unsigned int v8 = v7-- + 1;
  }

  while (v8 > 2);
  *a1 = a2 | v6;
  return v5;
}

  unsigned __int16 v13 = 0;
  unsigned int v14 = &__lowercase_hex;
  uint64_t v15 = 8;
  uint64_t v16 = 1;
LABEL_31:
  __int16 v21 = *a3;
  unsigned int v22 = *(_WORD *)(a2 + 40);
  if ((v22 & 0x7801) != 0 || (v22 & 8) != 0)
  {
    size_t v20 = *v21;
    goto LABEL_37;
  }

  if ((v22 & 4) != 0)
  {
    uint64_t v19 = *(unsigned __int16 *)v21;
    goto LABEL_129;
  }

  uint64_t v19 = *(_DWORD *)v21;
  if ((v22 & 2) == 0)
  {
LABEL_129:
    size_t v20 = v19;
    goto LABEL_37;
  }

  uint64_t v6 = 0;
LABEL_15:
  *a4 = v6;
  unsigned int v8 = *(const char **)(a6 + 72);
  if (!*v8) {
    unsigned int v8 = "-";
  }
LABEL_17:
  *a5 = v8;
  if (*a2) {
    *a2 = 1;
  }
  if (*a3 == 127) {
    *a3 = 0;
  }
  if (*a4 == 127) {
    *a4 = 0;
  }
  return result;
}

uint64_t __bt_cmp(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  if (!*((_WORD *)a3 + 4) && !*(_DWORD *)(v5 + 4) && (*(_BYTE *)(v5 + 12) & 2) == 0) {
    return 1LL;
  }
  unsigned int v7 = (unsigned int *)(v5 + *(unsigned __int16 *)(v5 + 2LL * *((unsigned __int16 *)a3 + 4) + 20));
  if ((v7[2] & 2) != 0)
  {
    unsigned int v8 = (char **)(a1 + 496);
    int v9 = *v8;
  }

  else
  {
    int v9 = (char *)v7 + 9;
    size_t v10 = *v7;
  }

  return (*(uint64_t (**)(uint64_t, char **))(a1 + 544))(a2, &v9);
}

uint64_t __bt_defcmp(unsigned __int8 **a1, unsigned __int8 **a2)
{
  int v2 = a1[1];
  unint64_t v3 = a2[1];
  if (v2 >= v3) {
    int v4 = a2[1];
  }
  else {
    int v4 = a1[1];
  }
  if (!v4) {
    return ((_DWORD)v2 - (_DWORD)v3);
  }
  uint64_t v5 = *a2;
  for (uint64_t i = *a1; ; ++i)
  {
    int v7 = *i;
    int v8 = *v5;
    uint64_t result = (v7 - v8);
    if (v7 != v8) {
      break;
    }
    ++v5;
    if (!--v4) {
      return ((_DWORD)v2 - (_DWORD)v3);
    }
  }

  return result;
}

unint64_t __bt_defpfx(void *a1, void *a2)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = a2[1];
  if (v2 >= v3) {
    uint64_t v4 = a2[1];
  }
  else {
    uint64_t v4 = a1[1];
  }
  if (v4)
  {
    uint64_t v5 = 0LL;
    while (*(unsigned __int8 *)(*a1 + v5) == *(unsigned __int8 *)(*a2 + v5))
    {
      if (v4 == ++v5) {
        goto LABEL_8;
      }
    }

    return v5 + 1;
  }

  else
  {
LABEL_8:
    if (v2 >= v3) {
      return a1[1];
    }
    else {
      return v2 + 1;
    }
  }

DB *__cdecl dbopen(const char *a1, int a2, int a3, DBTYPE a4, const void *a5)
{
  if ((a2 & 0x1FFFF1C9) != 0) {
    goto LABEL_2;
  }
  if (a4 == DB_RECNO) {
    return (DB *)__rec_open((uint64_t)a1, a2 & 0x36, *(uint64_t *)&a3, (uint64_t)a5, a2 & 0xE0000000);
  }
  if (a4 == DB_HASH) {
    return (DB *)__hash_open(a1, a2 & 0xE36, *(uint64_t *)&a3, (uint64_t)a5);
  }
  if (a4)
  {
LABEL_2:
    *__error() = 22;
    return 0LL;
  }

  return (DB *)__bt_open((uint64_t)a1, a2 & 0x36, *(uint64_t *)&a3, (uint64_t *)a5, a2 & 0xE0000000);
}

void *__dbpanic(void *result)
{
  result[8] = __dberr;
  result[2] = __dberr;
  result[3] = __dberr;
  result[4] = __dberr;
  result[5] = __dberr;
  result[6] = __dberr;
  return result;
}

uint64_t __dberr()
{
  return 0xFFFFFFFFLL;
}

_DWORD *__hash_open(const char *a1, int a2, uint64_t a3, uint64_t a4)
{
  if ((a2 & 3) == 1) {
    int v6 = a2 + 1;
  }
  else {
    int v6 = a2;
  }
  uint64_t result = calloc(1uLL, 0x298uLL);
  if (result)
  {
    int v8 = result;
    result[71] = -1;
    result[70] = v6;
    if (!a1) {
      goto LABEL_23;
    }
    int v9 = open_NOCANCEL();
    v8[71] = v9;
    if (v9 == -1)
    {
      unsigned int v31 = __error();
LABEL_55:
      int v24 = *v31;
LABEL_56:
      free(v8);
LABEL_57:
      unsigned int v42 = __error();
      uint64_t result = 0LL;
      *unsigned int v42 = v24;
      return result;
    }

    fcntl_NOCANCEL();
    BOOL v10 = !fstat(v8[71], &v43) && v43.st_size == 0;
    if (v10 && (v6 & 0x203) != 0)
    {
LABEL_23:
      *((void *)v8 + 3) = 0x800000100LL;
      *(_OWORD *)(v8 + 2) = xmmword_180498840;
      *(void *)(v8 + 13) = 0x10000LL;
      *((void *)v8 + 34) = __default_hash;
      *(_OWORD *)(v8 + 17) = 0u;
      *(_OWORD *)(v8 + 21) = 0u;
      *(_OWORD *)(v8 + 25) = 0u;
      *(_OWORD *)(v8 + 29) = 0u;
      *(_OWORD *)(v8 + 33) = 0u;
      *(_OWORD *)(v8 + 37) = 0u;
      *(_OWORD *)(v8 + 41) = 0u;
      *(_OWORD *)(v8 + 45) = 0u;
      *(_OWORD *)(v8 + 49) = 0u;
      *(_OWORD *)(v8 + 53) = 0u;
      *(_OWORD *)(v8 + 57) = 0u;
      *(_OWORD *)(v8 + 61) = 0u;
      if (a1)
      {
        if (stat(a1, &v44)) {
          goto LABEL_54;
        }
        st_blkunint64_t size = v44.st_blksize;
        v8[3] = v44.st_blksize;
        v8[4] = __log2(st_blksize);
      }

      if (!a4)
      {
        unsigned int v29 = 1;
        goto LABEL_41;
      }

      if (!*(_DWORD *)a4 || (int v26 = __log2(*(_DWORD *)a4), v8[3] = 1 << v26, v8[4] = v26, 1 << v26 <= 0x10000))
      {
        int v27 = *(_DWORD *)(a4 + 4);
        if (v27) {
          v8[13] = v27;
        }
        uint64_t v28 = *(void *)(a4 + 16);
        if (v28) {
          *((void *)v8 + 34) = v28;
        }
        unsigned int v29 = *(_DWORD *)(a4 + 8);
        if (v29 <= 1) {
          unsigned int v29 = 1;
        }
        int v30 = *(_DWORD *)(a4 + 24);
        if (!v30)
        {
LABEL_41:
          unsigned int v32 = (v29 - 1) / v8[13];
          else {
            unsigned int v33 = 2;
          }
          int v34 = __log2(v33);
          char v35 = v34;
          uint64_t v36 = v34 + 1LL;
          v8[v34 + 17] = v36;
          v8[v36 + 17] = v36;
          v8[8] = v34;
          v8[9] = 2;
          if (!__ibitmap((uint64_t)v8, ((_WORD)v34 << 11) | 1u, v36, 0))
          {
            int v37 = ~(-1 << v35);
            v8[10] = v37;
            v8[11] = (2 << v35) - 1;
            v8[12] = v37;
            v8[15] = (0x1FFuLL >> v8[4]) + 1;
            int v38 = 1 << __log2(v37 / v8[6] + 1);
            if (v38 > v8[5]) {
              v8[5] = v38;
            }
            if (!alloc_segs((uint64_t)v8, v38))
            {
              int v39 = 1;
              if (!a4) {
                goto LABEL_50;
              }
              goto LABEL_49;
            }
          }

          goto LABEL_54;
        }

        if (v30 == 4321 || v30 == 1234)
        {
          v8[2] = v30;
          goto LABEL_41;
        }
      }

      *__error() = 22;
LABEL_54:
      unsigned int v31 = __error();
      int v8 = 0LL;
      goto LABEL_55;
    }

    *((void *)v8 + 34) = v12;
    int NOCANCEL = read_NOCANCEL();
    uint64_t v14 = 0LL;
    unsigned int v15 = bswap32(v8[1]);
    *int v8 = bswap32(*v8);
    v8[1] = v15;
    unsigned int v16 = bswap32(v8[3]);
    v8[2] = bswap32(v8[2]);
    v8[3] = v16;
    unsigned int v17 = bswap32(v8[5]);
    v8[4] = bswap32(v8[4]);
    v8[5] = v17;
    unsigned int v18 = bswap32(v8[7]);
    v8[6] = bswap32(v8[6]);
    v8[7] = v18;
    unsigned int v19 = bswap32(v8[9]);
    v8[8] = bswap32(v8[8]);
    v8[9] = v19;
    unsigned int v20 = bswap32(v8[11]);
    v8[10] = bswap32(v8[10]);
    v8[11] = v20;
    unsigned int v21 = bswap32(v8[13]);
    v8[12] = bswap32(v8[12]);
    v8[13] = v21;
    unsigned int v22 = bswap32(v8[15]);
    v8[14] = bswap32(v8[14]);
    v8[15] = v22;
    v8[16] = bswap32(v8[16]);
    uint64_t v23 = (char *)v8 + 197;
    do
    {
      v8[v14 + 17] = bswap32(v8[v14 + 17]);
      *(_WORD *)(v23 - 1) = bswap32(*(unsigned __int16 *)(v23 - 1)) >> 16;
      ++v14;
      v23 += 2;
    }

    while (v14 != 32);
    if (NOCANCEL == 260)
    {
      if (*v8 == 398689
        && (v8[1] - 1) <= 1
        && (*((unsigned int (**)(const char *, ...))v8 + 34))("%$sniglet^&", 12LL, 1LL) == v8[16])
      {
        v8[148] = (v8[v8[8] + 17] + 8 * v8[3] - 1) >> (v8[4] + 3);
        _platform_bzero();
        int v39 = 0;
        if (!a4) {
          goto LABEL_50;
        }
LABEL_49:
        int v40 = *(_DWORD *)(a4 + 12);
        if (v40)
        {
LABEL_51:
          __buf_init((uint64_t)v8, v40);
          v8[81] = v39;
          if (a1) {
            int v41 = (v8[70] >> 1) & 1;
          }
          else {
            int v41 = 0;
          }
          v8[82] = v41;
          v8[78] = -1;
          uint64_t result = malloc(0x48uLL);
          if (result)
          {
            *((void *)result + 1) = hash_close;
            *((void *)result + 2) = hash_delete;
            *((void *)result + 7) = v8;
            *((void *)result + 8) = hash_fd;
            *((void *)result + 3) = hash_get;
            *((void *)result + 4) = hash_put;
            *((void *)result + 5) = hash_seq;
            *((void *)result + 6) = hash_sync;
            *uint64_t result = 1;
            return result;
          }

          int v24 = *__error();
          hdestroy();
          goto LABEL_57;
        }

LABEL_50:
        int v40 = 0x10000;
        goto LABEL_51;
      }
    }

    else if (NOCANCEL == -1)
    {
      int v24 = *__error();
LABEL_65:
      close_NOCANCEL();
      goto LABEL_56;
    }

    int v24 = 79;
    goto LABEL_65;
  }

  return result;
}

      __freedtoa((uint64_t)v9);
      return a3;
    }

    return 0LL;
  }

  else
  {
    *a3 = 0;
  }

  return a3;
}

uint64_t alloc_segs(uint64_t a1, int a2)
{
  uint64_t v4 = calloc(*(int *)(a1 + 20), 8uLL);
  *(void *)(a1 + 648) = v4;
  if (v4)
  {
    *(_DWORD *)(a1 + 260) = a2;
    if (!a2) {
      return 0LL;
    }
    uint64_t v5 = (char *)calloc(a2 << *(_DWORD *)(a1 + 28), 8uLL);
    if (v5)
    {
      if (a2 >= 1)
      {
        uint64_t v6 = 0LL;
        int v7 = *(_DWORD *)(a1 + 28);
        do
        {
          *(void *)(*(void *)(a1 + 648) + 8 * v6) = &v5[8 * ((_DWORD)v6 << v7)];
          ++v6;
        }

        while (a2 != v6);
      }

      return 0LL;
    }
  }

  int v9 = *__error();
  hdestroy();
  *__error() = v9;
  return 0xFFFFFFFFLL;
}

void hdestroy(void)
{
  uint64_t v1 = v0;
  else {
    int v2 = 0;
  }
  unint64_t v3 = *(void ***)(v1 + 648);
  if (v3)
  {
    for (uint64_t i = *v3; ; uint64_t i = *(void **)(v6 + 8 * v7))
    {
      free(i);
      int v5 = *(_DWORD *)(v1 + 264);
      *(_DWORD *)(v1 + 264) = v5 - 1;
      if (!v5) {
        break;
      }
      uint64_t v6 = *(void *)(v1 + 648);
      uint64_t v7 = *(int *)(v1 + 260) - 1LL;
      *(_DWORD *)(v1 + 260) = v7;
    }

    free(*(void **)(v1 + 648));
  }

  int v8 = *(_DWORD *)(v1 + 592);
  if (v8 >= 1)
  {
    for (uint64_t j = 0LL; j < v8; ++j)
    {
      BOOL v10 = *(void **)(v1 + 336 + 8 * j);
      if (v10)
      {
        free(v10);
        int v8 = *(_DWORD *)(v1 + 592);
      }
    }
  }

  int v11 = *(void **)(v1 + 296);
  if (v11) {
    free(v11);
  }
  unsigned __int16 v12 = *(void **)(v1 + 288);
  if (v12) {
    free(v12);
  }
  if (*(_DWORD *)(v1 + 284) != -1) {
    close_NOCANCEL();
  }
  free((void *)v1);
  if (v2) {
    *__error() = v2;
  }
}

uint64_t hash_close(void *a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  hdestroy();
  uint64_t v3 = v2;
  free(a1);
  return v3;
}

uint64_t hash_delete(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  if (a3 < 2)
  {
    if ((*(_BYTE *)(v3 + 280) & 3) != 0) {
      return hash_access(*(void *)(a1 + 56), 3, a2, 0LL);
    }
    uint64_t v4 = __error();
    int v5 = 1;
  }

  else
  {
    uint64_t v4 = __error();
    int v5 = 22;
  }

  *uint64_t v4 = v5;
  *(_DWORD *)(v3 + 320) = v5;
  return 0xFFFFFFFFLL;
}

uint64_t hash_fd(uint64_t a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = *(unsigned int *)(*(void *)(a1 + 56) + 284LL);
  if ((_DWORD)result == -1)
  {
    *__error() = 2;
    return 0xFFFFFFFFLL;
  }

  return result;
}

uint64_t hash_get(uint64_t a1, uint64_t *a2, void *a3, int a4)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (!a4) {
    return hash_access(*(void *)(a1 + 56), 0, a2, a3);
  }
  *__error() = 22;
  *(_DWORD *)(v4 + 320) = 22;
  return 0xFFFFFFFFLL;
}

uint64_t hash_put(uint64_t a1, uint64_t *a2, void *a3, int a4)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if ((a4 & 0xFFFFFFF7) != 0)
  {
    int v5 = __error();
    int v6 = 22;
LABEL_3:
    int *v5 = v6;
    *(_DWORD *)(v4 + 320) = v6;
    return 0xFFFFFFFFLL;
  }

  if ((*(_BYTE *)(v4 + 280) & 3) == 0)
  {
    int v5 = __error();
    int v6 = 1;
    goto LABEL_3;
  }

  if (a4 == 8) {
    int v10 = 2;
  }
  else {
    int v10 = 1;
  }
  return hash_access(*(void *)(a1 + 56), v10, a2, a3);
}

uint64_t hash_seq(uint64_t a1, void *a2, unint64_t a3, unsigned int a4)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (a4 <= 7 && ((1 << a4) & 0x89) != 0)
  {
    int v6 = (void *)a3;
    if (a4 == 3 || (*(_DWORD *)(v4 + 312) & 0x80000000) != 0)
    {
      *(void *)(v4 + 312) = 0x100000000LL;
      *(void *)(v4 + 304) = 0LL;
    }

    int v8 = 0LL;
    while (1)
    {
      while (1)
      {
        if (v8 && *v8)
        {
          uint64_t v15 = *(unsigned __int16 *)(v4 + 316);
          unint64_t v16 = v8[v15 + 1];
          if (v16 > 3)
          {
            uint64_t v17 = *(void *)(v4 + 304);
            if (!v17) {
              return 0xFFFFFFFFLL;
            }
            uint64_t v18 = *(void *)(v17 + 32);
            uint64_t v19 = v8[*(unsigned __int16 *)(v4 + 316)];
            *a2 = v18 + v19;
            else {
              int v20 = v8[(v15 - 1)];
            }
            a2[1] = v20 - (int)v19;
            *int v6 = v18 + v16;
            v6[1] = v19 - v16;
          }

          else if (__big_keydata(v4, a3, a2, v6, 1LL))
          {
            return 0xFFFFFFFFLL;
          }

          return 0LL;
        }

        a3 = *(void *)(v4 + 304);
        if (a3) {
          break;
        }
        unsigned int v10 = *(_DWORD *)(v4 + 312);
        unsigned int v11 = *(_DWORD *)(v4 + 40);
        if (v10 <= v11)
        {
          while (1)
          {
            unint64_t buf = __get_buf(v4, v10, 0LL, 0);
            if (!buf) {
              return 0xFFFFFFFFLL;
            }
            a3 = buf;
            *(void *)(v4 + 304) = buf;
            int v8 = *(unsigned __int16 **)(buf + 32);
            unsigned int v11 = *(_DWORD *)(v4 + 40);
            if (!*v8)
            {
              ++v10;
              *(_DWORD *)(v4 + 316) = 1;
              if (v10 <= v11) {
                continue;
              }
            }

            goto LABEL_18;
          }
        }

        a3 = 0LL;
LABEL_18:
        *(_DWORD *)(v4 + 312) = v10;
        if (v10 > v11)
        {
          *(_DWORD *)(v4 + 312) = -1;
          return 1LL;
        }

        int v9 = *(_DWORD *)(v4 + 316);
LABEL_20:
        if (!v8[v9 + 1])
        {
          do
          {
            unint64_t v13 = __get_buf(v4, v8[v9], a3, 0);
            *(void *)(v4 + 304) = v13;
            if (!v13) {
              return 0xFFFFFFFFLL;
            }
            a3 = v13;
            int v8 = *(unsigned __int16 **)(v13 + 32);
            int v9 = 1;
            *(_DWORD *)(v4 + 316) = 1;
          }

          while (!v8[2]);
        }

        if (!*v8)
        {
          *(void *)(v4 + 304) = 0LL;
          ++*(_DWORD *)(v4 + 312);
        }
      }

      int v8 = *(unsigned __int16 **)(a3 + 32);
      int v9 = *(_DWORD *)(v4 + 316);
      if (a4 != 7) {
        goto LABEL_20;
      }
      v9 += 2;
      *(_DWORD *)(v4 + 316) = v9;
      if (v9 <= *v8) {
        goto LABEL_20;
      }
      int v8 = 0LL;
      *(void *)(v4 + 304) = 0LL;
      ++*(_DWORD *)(v4 + 312);
      *(_DWORD *)(v4 + 316) = 1;
    }
  }

  *__error() = 22;
  *(_DWORD *)(v4 + 320) = 22;
  return 0xFFFFFFFFLL;
}

uint64_t hash_sync(uint64_t a1, int a2)
{
  if (a2)
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }

  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = *(void *)(a1 + 56);
  if (!*(_DWORD *)(v3 + 328)) {
    return 0LL;
  }
  uint64_t result = flush_meta(v3);
  if ((_DWORD)result) {
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(v3 + 324) = 0;
  return result;
}

uint64_t __expand_table(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v2;
  int v3 = *(_DWORD *)(a1 + 48);
  signed int v4 = v2 >> *(_DWORD *)(a1 + 28);
  unsigned int v5 = v2;
  if (v4 < *(_DWORD *)(a1 + 260)) {
    goto LABEL_7;
  }
  signed int v6 = *(_DWORD *)(a1 + 20);
  if (v4 >= v6)
  {
    int v7 = 16 * v6;
    int v8 = malloc(16 * v6);
    if (!v8) {
      return 0xFFFFFFFFLL;
    }
    int v9 = v8;
    unsigned int v10 = *(void **)(a1 + 648);
    _platform_memmove();
    _platform_bzero();
    free(v10);
    *(void *)(a1 + 648) = v9;
    *(_DWORD *)(a1 + 20) = v7;
  }

  unsigned int v11 = calloc(*(int *)(a1 + 24), 8uLL);
  *(void *)(*(void *)(a1 + 648) + 8LL * v4) = v11;
  if (!v11) {
    return 0xFFFFFFFFLL;
  }
  *(int32x2_t *)(a1 + 260) = vadd_s32(*(int32x2_t *)(a1 + 260), (int32x2_t)0x100000001LL);
  unsigned int v5 = *(_DWORD *)(a1 + 40);
LABEL_7:
  int v12 = __log2(v5 + 1);
  uint64_t v13 = *(int *)(a1 + 32);
  if (v12 > (int)v13)
  {
    *(_DWORD *)(a1 + 68 + 4LL * v12) = *(_DWORD *)(a1 + 68 + 4 * v13);
    *(_DWORD *)(a1 + 32) = v12;
  }

  unsigned int v14 = *(_DWORD *)(a1 + 44);
  if (v2 > v14)
  {
    *(_DWORD *)(a1 + 44) = v14 | v2;
    *(_DWORD *)(a1 + 48) = v14;
  }

  return __split_page(a1, v3 & v2, v2);
}

uint64_t __call_hash(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = *(_DWORD *)(a1 + 44) & (*(unsigned int (**)(uint64_t, void))(a1 + 272))(a2, a3);
  return result;
}

uint64_t flush_meta(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 328)) {
    return 0LL;
  }
  *(void *)a1 = 0x200061561LL;
  int v2 = (*(uint64_t (**)(const char *, ...))(a1 + 272))("%$sniglet^&", 12LL);
  uint64_t v3 = 0LL;
  *(_DWORD *)(a1 + 64) = v2;
  int8x16_t v4 = vrev32q_s8(*(int8x16_t *)(a1 + 32));
  v4.i32[0] = *(_DWORD *)(a1 + 64);
  int16x8_t v5 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v4.i8);
  *(int16x4_t *)v5.i8 = vrev64_s16(*(int16x4_t *)v5.i8);
  uint8x8_t v6 = (uint8x8_t)vmovn_s16(v5);
  uint64_t v7 = a1 + 197;
  uint64_t v8 = -128LL;
  do
  {
    v6.i32[0] = *(_DWORD *)(v7 + v8 - 1);
    int16x8_t v9 = (int16x8_t)vmovl_u8(v6);
    *(int16x4_t *)v9.i8 = vrev64_s16(*(int16x4_t *)v9.i8);
    uint8x8_t v6 = (uint8x8_t)vmovn_s16(v9);
    *(_DWORD *)&v14[v8] = v6.i32[0];
    unsigned int v10 = &v14[v3];
    *unsigned int v10 = *(_BYTE *)(v7 + v3);
    v10[1] = *(_BYTE *)(v7 + v3 - 1);
    v3 += 2LL;
    v8 += 4LL;
  }

  while (v8);
  uint64_t result = pwrite_NOCANCEL();
  if ((_DWORD)result != -1)
  {
    if ((_DWORD)result == 260)
    {
      uint64_t v12 = 0LL;
      while (1)
      {
        uint64_t v13 = *(_WORD **)(a1 + 8 * v12 + 336);
        if (v13)
        {
        }

        if (++v12 == 32) {
          return 0LL;
        }
      }
    }

    else
    {
      *__error() = 79;
      *(_DWORD *)(a1 + 320) = *__error();
    }

    return 0xFFFFFFFFLL;
  }

  return result;
}

uint64_t hash_access(uint64_t a1, int a2, uint64_t *a3, void *a4)
{
  unsigned int v8 = *(_DWORD *)(a1 + 12);
  uint64_t v9 = *a3;
  int v10 = a3[1];
  unsigned int v11 = *(_DWORD *)(a1 + 44) & (*(uint64_t (**)(uint64_t, void))(a1 + 272))(*a3, v10);
  if (v11 > *(_DWORD *)(a1 + 40)) {
    v11 &= *(_DWORD *)(a1 + 48);
  }
  unint64_t buf = __get_buf(a1, v11, 0LL, 0);
  if (!buf) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v13 = buf;
  char v35 = a4;
  int v36 = a2;
  int v34 = a3;
  *(_BYTE *)(buf + 40) |= 8u;
  unsigned int v14 = *(unsigned __int16 **)(buf + 32);
  unsigned int v15 = *v14;
  uint64_t v16 = buf;
  if (v15 < 2)
  {
LABEL_25:
    if ((v36 - 1) > 1)
    {
LABEL_29:
      *(_BYTE *)(v13 + 40) &= ~8u;
      return 1LL;
    }

    else
    {
      int v30 = __addel((_DWORD *)a1, v16, v34, v35);
      *(_BYTE *)(v13 + 40) &= ~8u;
      if (v30) {
        return 0xFFFFFFFFLL;
      }
      else {
        return 0LL;
      }
    }
  }

  uint64_t v17 = v14 + 1;
  int v18 = 1;
  uint64_t v16 = buf;
  while (1)
  {
    unsigned int v19 = v17[1];
    if (v19 >= 4) {
      break;
    }
    if (v17[1])
    {
      int bigpair = __find_bigpair(a1, v16, v18, v9, v10);
      int v18 = bigpair;
      if (bigpair > 0) {
        goto LABEL_20;
      }
      if (bigpair != -2)
      {
LABEL_32:
        *(_BYTE *)(v13 + 40) &= ~8u;
        return 0xFFFFFFFFLL;
      }

      uint64_t v37 = v16;
      unsigned int last_page = __find_last_page(a1, &v37);
      if (!last_page)
      {
        uint64_t v16 = v37;
        goto LABEL_25;
      }

      unsigned int v22 = last_page;
      uint64_t v23 = v37;
      uint64_t v24 = a1;
    }

    else
    {
      unsigned int v22 = *v17;
      uint64_t v24 = a1;
      uint64_t v23 = v16;
    }

    unint64_t v25 = __get_buf(v24, v22, v23, 0);
    if (!v25) {
      goto LABEL_32;
    }
    uint64_t v16 = v25;
    int v26 = *(unsigned __int16 **)(v25 + 32);
    unsigned int v27 = *v26;
    uint64_t v17 = v26 + 1;
    unsigned int v15 = v27;
    unsigned int v8 = *(_DWORD *)(a1 + 12);
    int v18 = 1;
LABEL_18:
  }

  if (v8 - *v17 != v10 || _platform_memcmp())
  {
    v17 += 2;
    v18 += 2;
    unsigned int v8 = v19;
    goto LABEL_18;
  }

LABEL_37:
      uint64_t result = 0LL;
      *(_BYTE *)(v13 + 40) &= ~8u;
      break;
    case 1:
      goto LABEL_37;
    case 2:
      goto LABEL_29;
    case 3:
      return 0xFFFFFFFFLL;
    default:
      abort_report_np((uint64_t)"%s:%s:%u: illegal action (%d)");
  }

  return result;
}

    unsigned int v11 = __error();
    uint64_t v9 = 0LL;
    uint64_t v12 = 22;
    goto LABEL_28;
  }

uint64_t __big_insert(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int8x16_t v4 = a4;
  uint64_t v5 = a2;
  uint64_t v7 = *(_WORD **)(a2 + 32);
  int v8 = *((_DWORD *)a3 + 2);
  uint64_t v9 = *a4;
  uint64_t v10 = a4[1];
  uint64_t v11 = (unsigned __int16)*v7;
  uint64_t v12 = v11 + 1;
  if (v8)
  {
    unint64_t v13 = &v7[v12];
    uint64_t v14 = *a3;
    while (1)
    {
      unsigned __int16 v15 = *v13 - 8;
      if (v8 >= v15) {
        unsigned __int16 v16 = v15;
      }
      else {
        unsigned __int16 v16 = v8;
      }
      __int16 v17 = v7[v11 + 2] - v16;
      _platform_memmove();
      uint64_t v18 = (unsigned __int16)*v7;
      v7[v18 + 1] = v17;
      *uint64_t v7 = v18 + 2;
      v7[(unsigned __int16)(v18 + 2) + 1] = v17 - 2 * v18 - 10;
      v7[(unsigned __int16)(v18 + 2) + 2] = v17;
      v7[v18 + 2] = 1;
      unint64_t v19 = __add_ovflpage(a1, v5);
      if (!v19) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v5 = v19;
      v8 -= v16;
      if (!v8) {
        break;
      }
      v14 += v16;
      uint64_t v7 = *(_WORD **)(v19 + 32);
      *(_BYTE *)(v19 + 40) |= 1u;
      uint64_t v11 = (unsigned __int16)*v7;
      unint64_t v13 = &v7[v11 + 1];
    }

    uint64_t v20 = (unsigned __int16)*v7;
    unsigned int v21 = (unsigned __int16)v7[v20 + 1];
    if (!v7[v20 + 1]
      || (v10 >= v21 ? (uint64_t v22 = (unsigned __int16)v7[v20 + 1]) : (uint64_t v22 = v10),
          (_DWORD)v10 == v21 && a4[1] == v10))
    {
      uint64_t v23 = v20 - 2;
      __int16 v24 = 2;
    }

    else
    {
      unint64_t v25 = &v7[(unsigned __int16)*v7];
      __int16 v24 = v25[2] - v22;
      _platform_memmove();
      v9 += v22;
      LODWORD(v10) = v10 - v22;
      *unint64_t v25 = v24;
      v7[v20 - 2] = 3;
      uint64_t v26 = (unsigned __int16)*v7;
      v7[v26 + 1] -= v22;
      uint64_t v23 = v26 + 2;
    }

    v7[v23] = v24;
    uint64_t v7 = *(_WORD **)(v5 + 32);
    *(_BYTE *)(v5 + 40) |= 1u;
    uint64_t v11 = (unsigned __int16)*v7;
    uint64_t v12 = v11 + 1;
    int8x16_t v4 = a4;
  }

  if (!(_DWORD)v10) {
    return 0LL;
  }
  for (uint64_t i = &v7[v12]; ; uint64_t i = &v7[v11 + 1])
  {
    unsigned __int16 v28 = *i - 8;
    unsigned __int16 v29 = v10 >= v28 ? v28 : v10;
    if ((_DWORD)v10 == v28) {
      v29 -= v4[1] == v10;
    }
    __int16 v30 = v7[v11 + 2] - v29;
    _platform_memmove();
    LODWORD(v10) = v10 - v29;
    uint64_t v31 = (unsigned __int16)*v7;
    v7[v31 + 1] = v30;
    uint64_t v32 = v31 + 2;
    *uint64_t v7 = v31 + 2;
    v7[(unsigned __int16)(v31 + 2) + 1] = v30 - 2 * v31 - 10;
    v7[(unsigned __int16)(v31 + 2) + 2] = v30;
    if (!(_DWORD)v10) {
      break;
    }
    v7[v32] = 2;
    unint64_t v33 = __add_ovflpage(a1, v5);
    if (!v33) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v5 = v33;
    v9 += v29;
    uint64_t v7 = *(_WORD **)(v33 + 32);
    uint64_t v11 = (unsigned __int16)*v7;
    *(_BYTE *)(v33 + 40) |= 1u;
  }

  uint64_t result = 0LL;
  v7[v32] = 3;
  *(_BYTE *)(v5 + 40) |= 1u;
  return result;
}

uint64_t __big_delete(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = 0LL;
  BOOL v5 = 0;
  unint64_t buf = a2;
  while (1)
  {
    uint64_t v7 = *(unsigned __int16 **)(buf + 32);
    int v8 = v7[2];
    if (v5) {
      break;
    }
    BOOL v5 = (v8 & 0xFFFE) == 2;
    uint64_t v9 = *v7;
    if (v8 != 3) {
      goto LABEL_10;
    }
    if (v7[v9 + 1]) {
      goto LABEL_16;
    }
LABEL_11:
    unsigned int v10 = v7[v9 - 1];
    *(_BYTE *)(buf + 40) |= 1u;
    unint64_t buf = __get_buf(a1, v10, buf, 0);
    if (v4) {
      __free_ovflpage((_DWORD *)a1, v4);
    }
    uint64_t v4 = buf;
    if (!buf) {
      return 0xFFFFFFFFLL;
    }
  }

  if (v8 != 3)
  {
    if ((v8 & 0xFFFE) == 2) {
      BOOL v5 = 1;
    }
    LODWORD(v9) = *v7;
LABEL_10:
    uint64_t v9 = v9;
    goto LABEL_11;
  }

  LODWORD(v9) = *v7;
LABEL_16:
  uint64_t v12 = *(_WORD **)(a2 + 32);
  if (v9 < 3)
  {
    uint64_t v13 = 0LL;
  }

  else
  {
    v12[1] = v7[v9 - 1];
    int v12[2] = 0;
    uint64_t v13 = *(void *)(buf + 16);
  }

  *(void *)(a2 + 16) = v13;
  *uint64_t v12 = v9 - 2;
  __int16 v14 = *(_WORD *)(a1 + 12);
  unsigned __int16 v15 = &v12[(unsigned __int16)(v9 - 2)];
  v15[1] = v14 - 2 * v9 - 2;
  v15[2] = v14;
  *(_BYTE *)(a2 + 40) |= 1u;
  if (buf) {
    __free_ovflpage((_DWORD *)a1, buf);
  }
  if (v4 && v4 != buf) {
    __free_ovflpage((_DWORD *)a1, v4);
  }
  uint64_t result = 0LL;
  --*(_DWORD *)(a1 + 56);
  return result;
}

uint64_t __find_bigpair(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  int v7 = a3;
  uint64_t v8 = *(void *)(a2 + 32);
  unsigned __int16 v9 = *(_WORD *)(a1 + 12) - *(_WORD *)(v8 + 2LL * a3);
  int v10 = v9;
  if (v9 <= a5)
  {
    uint64_t v13 = a2;
    int v11 = a5;
    while (*(_WORD *)(v8 + 2LL * v7 + 2) == 1)
    {
      uint64_t v15 = v9;
      unint64_t buf = __get_buf(a1, *(unsigned __int16 *)(v8 + 2LL * v7 + 4), v13, 0);
      if (!buf) {
        return 4294967293LL;
      }
      uint64_t v13 = buf;
      v11 -= v10;
      a4 += v15;
      uint64_t v8 = *(void *)(buf + 32);
      unsigned __int16 v9 = *(_WORD *)(a1 + 12) - *(_WORD *)(v8 + 2);
      int v10 = v9;
      int v7 = 1;
      if (v9 > a5) {
        break;
      }
    }
  }

  else
  {
    int v11 = a5;
  }

  uint64_t v12 = 4294967294LL;
  if (v11 == v10)
  {
    else {
      return v7;
    }
  }

  return v12;
}

unint64_t __find_last_page(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  while (1)
  {
    BOOL v5 = *(unsigned __int16 **)(v4 + 32);
    uint64_t v6 = *v5;
    if (v5[2] == 3)
    {
      if ((_DWORD)v6 == 2)
      {
        unint64_t result = 0LL;
        *a2 = v4;
        return result;
      }

      if (!v5[v6] || v5[v6 + 1]) {
        break;
      }
    }

    unint64_t result = __get_buf(a1, v5[v6 - 1], v4, 0);
    uint64_t v4 = result;
    if (!result) {
      return result;
    }
  }

  *a2 = v4;
  else {
    return v5[3];
  }
}

uint64_t __big_return(uint64_t a1, unint64_t buf, int a3, void *a4, uint64_t a5)
{
  for (uint64_t i = a3 + 1; ; uint64_t i = 2LL)
  {
    int v10 = *(unsigned __int16 **)(buf + 32);
    int v11 = v10[i];
    if (v11 != 1) {
      break;
    }
    unint64_t buf = __get_buf(a1, v10[*v10 - 1], buf, 0);
    if (!buf) {
      return 0xFFFFFFFFLL;
    }
  }

  if (v11 == 2)
  {
    unint64_t v12 = __get_buf(a1, v10[*v10 - 1], buf, 0);
    if (v12)
    {
      uint64_t v13 = v12;
      unsigned __int16 v14 = 0;
      int v15 = *(unsigned __int16 *)(v12 + 24);
      unint64_t buf = v12;
LABEL_14:
      uint64_t result = collect_data(a1, v13, v14, a5);
      a4[1] = (int)result;
      if ((_DWORD)result == -1) {
        return result;
      }
      if (*(_DWORD *)(buf + 24) == v15)
      {
        _platform_memmove();
        uint64_t result = 0LL;
        *a4 = *(void *)(a1 + 288);
        return result;
      }

      *__error() = 22;
    }
  }

  else
  {
    uint64_t v16 = *v10;
    __int16 v17 = &v10[v16];
    uint64_t v18 = *v17;
    if (v17[1])
    {
      uint64_t v19 = v10[1] - v18;
      *a4 = (char *)v10 + v18;
      a4[1] = v19;
      if ((_DWORD)a5)
      {
        if ((_DWORD)v16 == 2)
        {
          uint64_t result = 0LL;
          *(void *)(a1 + 304) = 0LL;
          ++*(_DWORD *)(a1 + 312);
          *(_DWORD *)(a1 + 316) = 1;
          return result;
        }

        unint64_t v23 = __get_buf(a1, v10[v16 - 1], buf, 0);
        *(void *)(a1 + 304) = v23;
        if (!v23) {
          return 0xFFFFFFFFLL;
        }
        *(_DWORD *)(a1 + 316) = 1;
        if (!**(_WORD **)(v23 + 32))
        {
          uint64_t result = 0LL;
          ++*(_DWORD *)(a1 + 312);
          *(void *)(a1 + 304) = 0LL;
          return result;
        }
      }

      return 0LL;
    }

    unsigned __int16 v21 = v10[1];
    int v15 = *(unsigned __int16 *)(buf + 24);
    unint64_t v22 = __get_buf(a1, v10[v16 - 1], buf, 0);
    if (v22)
    {
      uint64_t v13 = v22;
      unsigned __int16 v14 = v21 - v18;
      goto LABEL_14;
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t collect_data(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = *(unsigned __int16 **)(a2 + 32);
  int v9 = *(_DWORD *)(a1 + 12) - v8[1];
  int v10 = *(unsigned __int16 *)(a2 + 24);
  if (v8[2] == 3)
  {
    uint64_t v11 = (v9 + a3);
    unint64_t v12 = *(void **)(a1 + 288);
    if (v12) {
      free(v12);
    }
    uint64_t v13 = malloc((int)v11);
    *(void *)(a1 + 288) = v13;
    if (!v13) {
      return 0xFFFFFFFFLL;
    }
    if ((_DWORD)a4)
    {
      *(_DWORD *)(a1 + 316) = 1;
      uint64_t v14 = *v8;
      if (v14 == 2)
      {
        *(void *)(a1 + 304) = 0LL;
        ++*(_DWORD *)(a1 + 312);
      }

      else
      {
        unint64_t buf = __get_buf(a1, v8[v14 - 1], a2, 0);
        *(void *)(a1 + 304) = buf;
        if (!buf) {
          return 0xFFFFFFFFLL;
        }
        if (!**(_WORD **)(buf + 32))
        {
          ++*(_DWORD *)(a1 + 312);
          *(void *)(a1 + 304) = 0LL;
        }
      }
    }
  }

  else
  {
    unint64_t v15 = __get_buf(a1, v8[*v8 - 1], a2, 0);
    if (!v15) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v11 = collect_data(a1, v15, (v9 + a3), a4);
  }

  if (*(_DWORD *)(a2 + 24) != v10)
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }

  _platform_memmove();
  return v11;
}

uint64_t __big_keydata(uint64_t a1, unint64_t a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t result = collect_key(a1, a2, 0, a4, a5);
  a3[1] = (int)result;
  if ((_DWORD)result != -1)
  {
    uint64_t result = 0LL;
    *a3 = *(void *)(a1 + 296);
  }

  return result;
}

uint64_t collect_key(uint64_t a1, unint64_t a2, int a3, void *a4, uint64_t a5)
{
  int v9 = *(unsigned __int16 **)(a2 + 32);
  int v10 = *(unsigned __int16 *)(a2 + 24);
  uint64_t v11 = *(_DWORD *)(a1 + 12) - v9[1] + a3;
  if ((v9[2] & 0xFFFE) == 2)
  {
    unint64_t v12 = *(void **)(a1 + 296);
    if (v12) {
      free(v12);
    }
    uint64_t v13 = malloc((int)v11);
    *(void *)(a1 + 296) = v13;
  }

  else
  {
    unint64_t buf = __get_buf(a1, v9[*v9 - 1], a2, 0);
    if (!buf) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v11 = collect_key(a1, buf, v11, a4, a5);
  }

  if (*(_DWORD *)(a2 + 24) != v10)
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }

  _platform_memmove();
  return v11;
}

uint64_t __big_split( unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, __int16 a5, int a6, uint64_t a7)
{
  unint64_t v34 = a4;
  uint64_t result = collect_key(a1, a4, 0, &v33, 0LL);
  if ((_DWORD)result != -1)
  {
    int v15 = __call_hash(a1, *(void *)(a1 + 296), result);
    unsigned int last_page = __find_last_page(a1, (uint64_t *)&v34);
    *(_WORD *)(a7 + 24) = last_page;
    if (last_page)
    {
      uint64_t v17 = v34;
      unint64_t buf = __get_buf(a1, last_page, v34, 0);
      *(void *)(a7 + 16) = buf;
      if (!buf) {
        return 0xFFFFFFFFLL;
      }
    }

    else
    {
      *(void *)(a7 + 16) = 0LL;
      uint64_t v17 = v34;
    }

    if (v15 == a6) {
      uint64_t v19 = a2;
    }
    else {
      uint64_t v19 = a3;
    }
    *(_BYTE *)(v19 + 40) |= 1u;
    *(void *)(v19 + 16) = a4;
    uint64_t v20 = *(_WORD **)(v19 + 32);
    uint64_t v21 = (unsigned __int16)*v20;
    unint64_t v22 = &v20[v21];
    __int16 v23 = v22[2];
    LOWORD(v22) = v22[1];
    v20[(unsigned __int16)(v21 + 1)] = a5;
    LOWORD(v21) = v21 + 2;
    __int16 v24 = &v20[(unsigned __int16)v21];
    *__int16 v24 = 0;
    *uint64_t v20 = v21;
    v24[2] = v23;
    v24[1] = (_WORD)v22 - 4;
    *(void *)a7 = a3;
    *(void *)(a7 + 8) = a2;
    unint64_t v25 = *(unsigned __int16 **)(v17 + 32);
    *(_BYTE *)(v17 + 40) |= 1u;
    uint64_t v26 = *v25;
    if (v26 >= 3)
    {
      unsigned __int16 v27 = v25[4];
      unsigned __int16 v28 = &v25[v26];
      unsigned __int16 v29 = v28[1];
      LOWORD(v28) = v28[2];
      unsigned __int16 v30 = v26 - 2;
      *unint64_t v25 = v30;
      uint64_t v31 = &v25[v30];
      v31[1] = v29 + 4;
      v31[2] = (unsigned __int16)v28;
      unint64_t v32 = __add_ovflpage(a1, v17);
      if (!v32) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v17 = v32;
      v25[4] = v27;
    }

    uint64_t result = 0LL;
    *(void *)(a7 + 8LL * (v15 == a6)) = v17;
  }

  return result;
}

unint64_t __get_buf(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  if (!a3)
  {
    uint64_t v10 = (*(int *)(a1 + 24) - 1LL) & (int)a2;
    uint64_t v4 = *(void *)(*(void *)(a1 + 648) + 8LL * (a2 >> *(_DWORD *)(a1 + 28)));
    uint64_t v12 = *(void *)(v4 + 8 * v10);
    unint64_t result = v12 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v12 & 2) != 0)
    {
      uint64_t v9 = *(void *)(v4 + 8 * v10) & 2LL;
      int v11 = 1;
      if (!result) {
        goto LABEL_12;
      }
    }

    else
    {
      uint64_t v9 = 0LL;
      int v11 = *(_DWORD *)(a1 + 324) == 0;
      if (!result) {
        goto LABEL_12;
      }
    }

LABEL_21:
  char v22 = *(_BYTE *)(v16 + 40);
  if ((v22 & 8) != 0 || (void *)v16 == v17) {
    goto LABEL_28;
  }
  uint64_t v23 = *(void *)v16;
  *(void *)(v23 + 8) = *(void *)(v16 + 8);
  **(void **)(v16 + 8) = v23;
  unsigned int v24 = *(_DWORD *)(v16 + 24);
  if (v22 & 4 | v24)
  {
    unint64_t v25 = *(unsigned __int16 **)(v16 + 32);
    if (*v25)
    {
      uint64_t v26 = v25[*v25 - 1];
      if ((v22 & 1) == 0) {
        goto LABEL_37;
      }
    }

    else
    {
      uint64_t v26 = 0LL;
      if ((v22 & 1) == 0) {
        goto LABEL_37;
      }
    }

    char v22 = *(_BYTE *)(v16 + 40);
LABEL_37:
    uint64_t v42 = v4;
    uint64_t v43 = v9;
    if ((v22 & 4) != 0)
    {
      uint64_t v29 = *(int *)(v16 + 24);
      uint64_t v30 = (*(int *)(a1 + 24) - 1LL) & v29;
      uint64_t v31 = *(void *)(*(void *)(a1 + 648) + 8LL * (v29 >> *(_DWORD *)(a1 + 28)));
      else {
        uint64_t v32 = 0LL;
      }
      *(void *)(v31 + 8 * v30) = v32;
    }

    uint64_t v33 = (void *)(v16 + 16);
    for (i = *(uint64_t **)(v16 + 16); i; uint64_t v26 = v36)
    {
      *uint64_t v33 = 0LL;
      if ((i[5] & 4) != 0 || *((_DWORD *)i + 6) != (_DWORD)v26) {
        break;
      }
      char v35 = (unsigned __int16 *)i[4];
      uint64_t v36 = v26;
      if (*v35) {
        uint64_t v36 = v35[*v35 - 1];
      }
      *((_DWORD *)i + 6) = 0;
      *((_BYTE *)i + 40) = 0;
      uint64_t v37 = *i;
      *(void *)(v37 + 8) = i[1];
      *(void *)i[1] = v37;
      uint64_t v38 = *(void *)(*v15 + 8);
      *uint64_t i = *v15;
      i[1] = v38;
      *(void *)(*v15 + 8) = i;
      *(void *)i[1] = i;
      uint64_t v33 = i + 2;
      uint64_t i = (uint64_t *)i[2];
    }

    uint64_t v4 = v42;
    uint64_t v9 = v43;
  }

  uint64_t v18 = *__error();
LABEL_44:
  if (a1) {
    close_NOCANCEL();
  }
  uint64_t v12 = 0LL;
  *__error() = v18;
  return v12;
}

          uint64_t v19 = printfmt((uint64_t)v16, (uint64_t)a2, a3, (uint64_t)a4, (uint64_t)v11, (uint64_t)a6);
          if (v19)
          {
            int v20 = (char *)v19;
            if (*v19) {
              uint64_t v12 = fprintf(__stderrp, "%s", v19) >> 31;
            }
            else {
              uint64_t v12 = 0;
            }
            free(v16);
            free(v20);
            if ((v10 & 0x200) == 0) {
              return v12;
            }
            goto LABEL_28;
          }

          free(v16);
          return 3;
        }
      }
    }

    *(_DWORD *)&a2 = a2 & ~(unsigned __int16)(*i & v8);
    goto LABEL_22;
  }

  LOBYTE(v6) = a2;
  if (v4 == 111) {
    goto LABEL_14;
  }
  if (v4 == 117)
  {
    uint64_t v6 = a2 >> 6;
    goto LABEL_14;
  }

  return a2;
}

  int v15 = 0xFFFFFFFFLL;
LABEL_22:
  free(v14);
  return v15;
}

        if (!*v7) {
          ++optind;
        }
        if (opterr && *a3 != 58) {
          fprintf(__stderrp, "%s: illegal option -- %c\n");
        }
        return 63;
      }
    }
  }

  else
  {
    getopt_place = &EMSG;
  }

  return -1;
}

    v304 = 0;
    v359 = 0;
    goto LABEL_30;
  }

  if (a4 != 2)
  {
    if (a4 != 1)
    {
      v348 = v26;
      v304 = v350;
      goto LABEL_30;
    }

    uint64_t v32 = v26 + 1;
    v348 = v32;
    if (v27 < 0 || v32 < v27)
    {
      uint64_t v33 = *v334++;
LABEL_29:
      v304 = v33;
      v359 = v33;
      goto LABEL_30;
    }

    goto LABEL_21;
  }

  char v35 = v349 + v26;
  v348 = v35;
  if (v27 < 0 || v27 > v35)
  {
    uint64_t v36 = *v334;
    if (v36 < 0)
    {
      unint64_t v111 = v27 - v35;
      if (v27 < 0) {
        unint64_t v111 = 32;
      }
      int v112 = mbrtowc_l(&v359, v334, v111, &v364, *(locale_t *)(v28 + 56));
      if (v112 > 0xFFFFFFFFFFFFFFFDLL) {
        return 17LL;
      }
      if (v27 < 0 || v112)
      {
        v334 += v112;
        v304 = v359;
        LODWORD(v349) = v112;
      }

      else
      {
        v304 = 0;
        v359 = 0;
        ++v334;
        LODWORD(v349) = 1;
      }

      int v28 = v347;
      goto LABEL_30;
    }

    ++v334;
    v304 = v36;
    v359 = v36;
  }

  else
  {
    v304 = 0;
    v359 = 0;
  }

  LODWORD(v349) = 1;
LABEL_30:
  v363 = v364;
  uint64_t v37 = *(void *)(v28 + 8);
  uint64_t v38 = (v10 >> 3) & 1;
  char v39 = (void *)(v37 + 8);
  v340 = (v10 >> 3) & 1;
  if (*(void *)(v37 + 8))
  {
    uint64_t v40 = 0LL;
    int v41 = 0LL;
    uint64_t v43 = (a6 & 1) == 0 && v348 < 1;
    stat v44 = v350;
    if (v350 == 10) {
      __int16 v45 = v38;
    }
    else {
      __int16 v45 = 0;
    }
    v345 = &_DefaultRuneLocale.__runetype[v350];
    v356 = v43;
    while (1)
    {
      unsigned int v46 = *(_DWORD *)(v37 + 40);
      if (!v46) {
        goto LABEL_126;
      }
      uint64_t v47 = (v46 & 1) == 0 || v43;
      if ((v47 | v45) != 1) {
        goto LABEL_141;
      }
      if ((v46 & 2) != 0)
      {
        stat v48 = v340;
        if (v359 != 10) {
          stat v48 = 0;
        }
        uint64_t v49 = v359 | v337 && v48 == 0;
        if (v49) {
          goto LABEL_141;
        }
      }

      if ((v46 & 8) != 0)
      {
        if (v44 == 95) {
          goto LABEL_141;
        }
        if (v44 > 0x7F)
        {
          int v55 = *(_xlocale **)(v28 + 56);
          if (v44 < 0x100)
          {
            __int16 v58 = &__global_locale;
            if (v55 != (_xlocale *)-1LL) {
              __int16 v58 = *(void **)(v28 + 56);
            }
            if (!v55) {
              __int16 v58 = &__c_locale;
            }
            uint64_t v53 = *(_DWORD *)(*(void *)(v58[166] + 120LL) + 4LL * v350 + 60);
          }

          else
          {
            LOWORD(v53) = ___runetype_l(v44, v55);
            uint64_t v43 = v356;
          }
        }

        else
        {
          uint64_t v53 = *v345;
        }

        if ((v53 & 0x500) != 0) {
          goto LABEL_141;
        }
        if (v359 != 95) {
          break;
        }
      }

LABEL_53:
  *(_DWORD *)(v16 + 24) = a2;
  *(void *)(v16 + 16) = 0LL;
  if (a3)
  {
    char v39 = 0;
    *(void *)(a3 + 16) = v16;
  }

  else
  {
    char v39 = 4;
  }

  *(_BYTE *)(v16 + 40) = v39;
  uint64_t v40 = *(void *)(a1 + 608);
  *(void *)unint64_t v16 = v15;
  *(void *)(v16 + 8) = v40;
  *(void *)(a1 + 608) = v16;
  **(void **)(v16 + 8) = v16;
  int page = __get_page((_DWORD *)a1, *(unsigned __int16 **)(v16 + 32), a2, a3 == 0, v11, 0);
  if (page) {
    unint64_t result = 0LL;
  }
  else {
    unint64_t result = v16;
  }
  if (!a3 && !page)
  {
    *(void *)(v4 + 8 * v10) = v9 | v16;
    return v16;
  }

  return result;
}

uint64_t __buf_init(uint64_t result, int a2)
{
  int v2 = (a2 + *(_DWORD *)(result + 12) - 1) >> *(_DWORD *)(result + 16);
  if (v2 <= 6) {
    int v2 = 6;
  }
  *(_DWORD *)(result + 596) = v2;
  *(void *)(result + 608) = result + 600;
  *(void *)(result + 600) = result + 600;
  return result;
}

uint64_t __buf_free(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = (uint64_t *)(a1 + 600);
  uint64_t v4 = *(uint64_t **)(a1 + 600);
  if (v4) {
    BOOL v5 = v4 == v3;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0LL;
  }
  while (1)
  {
    unsigned int v9 = *((_DWORD *)v4 + 6);
    if (!v9) {
      break;
    }
    if (a3)
    {
      char v10 = *((_BYTE *)v4 + 40);
      goto LABEL_10;
    }

LABEL_12:
    if (a2)
    {
      if (v4[4])
      {
        _platform_bzero();
        free((void *)v4[4]);
      }

      int v11 = (uint64_t *)*v4;
      v11[1] = v4[1];
      *(void *)v4[1] = v11;
      free(v4);
      uint64_t v4 = v3;
    }

    uint64_t v4 = (uint64_t *)*v4;
    if (v4 == v3) {
      return 0LL;
    }
  }

  if (!a3) {
    goto LABEL_12;
  }
  char v10 = *((_BYTE *)v4 + 40);
  if ((v10 & 4) == 0) {
    goto LABEL_12;
  }
LABEL_10:
  return 0xFFFFFFFFLL;
}

    uint64_t v8 = v5 - a1;
    if (v5 == a1)
    {
LABEL_18:
      if (v4 == 47) {
        uint64_t v12 = 47;
      }
      else {
        uint64_t v12 = 46;
      }
      *int v2 = v12;
      v2[1] = 0;
      return v2;
    }

    unsigned int v9 = v5 - 1;
    do
    {
      char v10 = v8;
      if (v9 <= a1) {
        break;
      }
      int v11 = *(unsigned __int8 *)v9--;
      --v8;
    }

    while (v11 == 47);
    if (v10 < 0x400)
    {
      _platform_memmove();
      v2[v10] = 0;
    }

    else
    {
      int v2 = 0LL;
      *__error() = 63;
    }
  }

  else
  {
    *(_WORD *)a2 = 46;
  }

  return v2;
}

  if (v26)
  {
    unint64_t result = __error();
    uint64_t v13 = 13;
    goto LABEL_24;
  }

  if (v30)
  {
LABEL_23:
    unint64_t result = __error();
    uint64_t v13 = 2;
LABEL_24:
    *unint64_t result = v13;
  }

  return result;
}

    uint64_t v14 = __error();
    int v15 = 22;
LABEL_13:
    *uint64_t v14 = v15;
    return -1;
  }

  uint64_t v13 = 41;
LABEL_17:
  uint64_t v18 = 152;
  uint64_t v19 = a2;
  char v22 = 0u;
  uint64_t v23 = 0u;
  unsigned int v24 = 0u;
  unint64_t v25 = 0u;
  uint64_t v26 = 0u;
  unsigned __int16 v27 = 0u;
  int v28 = 0u;
  uint64_t v29 = 0u;
  uint64_t v30 = 0;
  int v20 = 0;
  uint64_t v21 = v11;
  _platform_memmove();
  uint64_t v31 = a7;
  unint64_t result = getsockopt(a1, v13, 74, &v19, &v18);
  if (!result)
  {
    uint64_t v17 = v20;
    *a6 = v21;
    *a5 = v17;
  }

  return result;
}

  if (v4 > *(_DWORD *)(a1 + 44)) {
    *(_DWORD *)(a1 + 44) = v4;
  }
  unint64_t result = 0LL;
  uint64_t v12 = *(_DWORD **)a1;
  *(_DWORD *)(a1 + 48) = v4 + 1;
  v12[v4] = a2;
  return result;
}

  r_sort_a((uint64_t)__base, *(uint64_t *)&__nel);
  return 0;
}

uint64_t __reclaim_buf(uint64_t result, uint64_t *a2)
{
  a2[2] = 0LL;
  *((_DWORD *)a2 + 6) = 0;
  *((_BYTE *)a2 + 40) = 0;
  uint64_t v2 = *a2;
  *(void *)(v2 + 8) = a2[1];
  *(void *)a2[1] = v2;
  uint64_t v3 = *(void *)(result + 600);
  uint64_t v4 = *(void *)(v3 + 8);
  *a2 = v3;
  a2[1] = v4;
  *(void *)(*(void *)(result + 600) + 8LL) = a2;
  *(void *)a2[1] = a2;
  return result;
}

uint64_t hash4(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return ((uint64_t (*)(void))((char *)&loc_180440C58 + 4 * byte_180498854[a2 & 7]))();
  }
  else {
    return 0LL;
  }
}

uint64_t __log2(unsigned int a1)
{
  if (a1 < 2) {
    return 0LL;
  }
  LODWORD(result) = 0;
  unsigned int v3 = 1;
  do
  {
    v3 *= 2;
    uint64_t result = (result + 1);
  }

  while (v3 < a1);
  return result;
}

uint64_t __delpair(_DWORD *a1, unint64_t a2, int a3)
{
  BOOL v5 = *(_WORD **)(a2 + 32);
  unint64_t v6 = (unsigned __int16)v5[a3 + 1];
  if (v6 <= 3) {
    return __big_delete((uint64_t)a1, a2);
  }
  uint64_t v9 = (unsigned __int16)*v5;
  if (a3 == 1) {
    int v10 = a1[3];
  }
  else {
    LOWORD(v10) = v5[a3 - 1];
  }
  __int16 v11 = v10 - v6;
  if ((_DWORD)v9 - 1 != a3)
  {
    _platform_memmove();
    LODWORD(v12) = a3 + 2;
    if (a3 + 2 <= (int)v9)
    {
      uint64_t v12 = (int)v12;
      int v13 = a3;
      do
      {
        __int16 v14 = v5[v13 + 3];
        __int16 v15 = v5[v12];
        if (v14)
        {
          v5[v13] = v15 + v11;
          v14 += v11;
        }

        else
        {
          v5[v13] = v15;
        }

        v5[v13 + 1] = v14;
        v12 += 2LL;
        v13 += 2;
      }

      while (v12 <= v9);
    }

    if (a1[79] == a3) {
      a1[79] = a3 - 2;
    }
  }

  v5[v9] = v5[(unsigned __int16)*v5 + 2] + v11;
  v5[v9 - 1] = v11 + v5[v9 + 1] + 4;
  _WORD *v5 = v9 - 2;
  --a1[14];
  *(_BYTE *)(a2 + 40) |= 1u;
  return 0LL;
}

uint64_t __split_page(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4 = (_DWORD *)a1;
  uint64_t v5 = *(unsigned int *)(a1 + 12);
  unint64_t buf = __get_buf(a1, a2, 0LL, 0);
  if (!buf) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v7 = buf;
  unint64_t v8 = __get_buf((uint64_t)v4, a3, 0LL, 0);
  if (!v8) {
    return 0xFFFFFFFFLL;
  }
  *(_BYTE *)(v7 + 40) |= 9u;
  *(_BYTE *)(v8 + 40) |= 9u;
  unint64_t v73 = v8;
  unint64_t v74 = v7;
  uint64_t v9 = *(unsigned __int16 **)(v7 + 32);
  LODWORD(v10) = *v9;
  if (v10 < 2)
  {
    LOWORD(v12) = 0;
LABEL_16:
    uint64_t result = 0LL;
    unsigned __int16 v27 = v10 - v12;
    *uint64_t v9 = v27;
    unsigned __int16 v28 = v5 - 2 * v27 - 6;
    uint64_t v29 = &v9[v27];
    v29[1] = v28;
    v29[2] = v5;
    goto LABEL_17;
  }

  uint64_t v11 = 0LL;
  int v12 = 0;
  int v13 = *(unsigned __int16 **)(v8 + 32);
  int v80 = 1;
  int v14 = v5;
  int v78 = v4;
  while (1)
  {
    __int16 v15 = &v9[v11];
    if (v15[2] <= 3u) {
      break;
    }
    uint64_t v16 = v15[1];
    __int16 v17 = v14 - v16;
    if (__call_hash((uint64_t)v4, (uint64_t)v9 + v16, (unsigned __int16)v14 - v16) == a2)
    {
      if ((unsigned __int16)v5 == (unsigned __int16)v14)
      {
        uint64_t v5 = v15[2];
        int v18 = v80;
      }

      else
      {
        uint64_t v5 = v15[2] + (_DWORD)v5 - v14;
        _platform_memmove();
        int v18 = v80;
        unsigned int v24 = &v9[v80];
        *unsigned int v24 = v15[1] + v5 - v15[2];
        v24[1] = v5;
      }

      int v80 = v18 + 2;
    }

    else
    {
      uint64_t v82 = v5;
      __int16 v19 = v15[1] - v15[2];
      uint64_t v20 = *v13;
      int v79 = v12;
      unsigned __int16 v21 = v13[v20 + 2] - v17;
      _platform_memmove();
      v13[(unsigned __int16)(v20 + 1)] = v21;
      unsigned __int16 v22 = v21 - v19;
      uint64_t v5 = v82;
      _platform_memmove();
      unsigned __int16 v23 = v20 + 2;
      uint64_t v4 = v78;
      v13[v23] = v22;
      unsigned __int16 *v13 = v23;
      v13[v23 + 1] = v22 - 2 * v23 - 6;
      v13[v23 + 2] = v22;
      int v12 = v79 + 2;
    }

    int v14 = v15[2];
    unint64_t v10 = *v9;
    unint64_t v25 = v11 + 3;
    v11 += 2LL;
    if (v25 >= v10) {
      goto LABEL_16;
    }
  }

  unsigned __int16 v32 = v12;
  unint64_t v30 = v74;
  uint64_t v33 = *(unsigned __int16 **)(v74 + 32);
  LOWORD(v34) = *v33;
  if (!*v33)
  {
    uint64_t result = 0LL;
    goto LABEL_18;
  }

  uint64_t v83 = v5;
  *(_DWORD *)&v71[8] = 0;
  unint64_t v72 = v74;
  *(void *)int v71 = v32;
  unsigned __int16 v35 = v34 - 1;
  unint64_t v31 = v73;
  int v75 = *(unsigned __int16 **)(v73 + 32);
  uint64_t v76 = v73;
  uint64_t v36 = *(unsigned __int16 **)(v74 + 32);
  uint64_t v37 = v74;
  while (1)
  {
    if (v36[2] - 4 >= 0xFFFFFFFD)
    {
      if (__big_split((unint64_t)v4, v37, v76, v72, *(_DWORD *)(v72 + 24), a2, (uint64_t)&v85)
        || (uint64_t v37 = v86) == 0
        || !v85)
      {
LABEL_59:
        uint64_t result = 0xFFFFFFFFLL;
        goto LABEL_19;
      }

      if (!v87) {
        goto LABEL_62;
      }
      uint64_t v33 = *(unsigned __int16 **)(v86 + 32);
      uint64_t v76 = v85;
      int v75 = *(unsigned __int16 **)(v85 + 32);
      *(void *)&v71[4] = v87;
      unint64_t v72 = v87;
      uint64_t v36 = *(unsigned __int16 **)(v87 + 32);
LABEL_33:
      uint64_t v43 = v83;
      goto LABEL_34;
    }

    if (v36[v35 + 1]) {
      goto LABEL_33;
    }
    unsigned int v38 = v36[v35];
    unsigned __int16 v39 = v34 - *(_WORD *)v71 - 2;
    *uint64_t v36 = v39;
    unsigned __int16 v40 = v83 - 2 * v39 - 6;
    int v41 = &v36[v39];
    v41[1] = v40;
    void v41[2] = v83;
    unint64_t v42 = __get_buf((uint64_t)v4, v38, v72, 0);
    if (!v42) {
      goto LABEL_59;
    }
    uint64_t v36 = *(unsigned __int16 **)(v42 + 32);
    uint64_t v43 = v4[3];
    unint64_t v72 = v42;
    if (*(void *)&v71[4])
    {
      unint64_t v44 = v42;
      __free_ovflpage(v4, *(uint64_t *)&v71[4]);
      *(_WORD *)int v71 = 0;
      *(void *)&v71[4] = v44;
    }

    else
    {
      *(_WORD *)int v71 = 0;
      *(void *)&v71[4] = v42;
    }

LABEL_49:
    v56[v59 + 1] = v60 - 2 * v59 - 6;
    v56[v59 + 2] = v60;
    *(_BYTE *)(v55 + 40) |= 1u;
    v35 += 2;
    unsigned int v34 = *v36;
    if (v34 <= v35)
    {
      uint64_t v4 = v78;
      goto LABEL_53;
    }

    uint64_t v47 = v35;
    unsigned int v45 = v36[v35 + 1];
    uint64_t v4 = v78;
    unsigned int v46 = v77;
    if (v45 < 4) {
      goto LABEL_53;
    }
  }

  if (v75[2] >= 4u)
  {
    uint64_t v61 = *v75;
    uint64_t v62 = &v75[v61];
    if (v50 + v51 + 8 <= (unint64_t)v62[1])
    {
      unsigned __int16 v70 = v62[2] - v50;
      _platform_memmove();
      v75[(unsigned __int16)(v61 + 1)] = v70;
      unsigned __int16 v60 = v70 - v51;
      _platform_memmove();
      unsigned __int16 v59 = v61 + 2;
      v75[(unsigned __int16)(v61 + 2)] = v60;
      *int v75 = v61 + 2;
      unsigned int v56 = v75;
      uint64_t v55 = v76;
      goto LABEL_48;
    }
  }

  unint64_t v63 = __add_ovflpage((unint64_t)v4, v76);
  if (v63)
  {
    uint64_t v55 = v63;
    unsigned int v56 = *(unsigned __int16 **)(v63 + 32);
    uint64_t v64 = *v56;
    uint64_t v65 = v36;
    uint64_t v66 = v37;
    unsigned __int16 v67 = v56[v64 + 2] - v50;
    _platform_memmove();
    v56[(unsigned __int16)(v64 + 1)] = v67;
    unsigned __int16 v68 = v67 - v51;
    uint64_t v37 = v66;
    uint64_t v36 = v65;
    _platform_memmove();
    unsigned __int16 v59 = v64 + 2;
    v56[(unsigned __int16)(v64 + 2)] = v68;
    unsigned __int16 *v56 = v64 + 2;
    unsigned __int16 v60 = v68;
    int v75 = v56;
    uint64_t v76 = v55;
LABEL_48:
    uint64_t v33 = v81;
    goto LABEL_49;
  }

  if (v12 == 8 * v3[3] - 1)
  {
    if (v13 >= 31)
    {
LABEL_51:
      write_NOCANCEL();
      unsigned __int16 v40 = __error();
      uint64_t result = 0LL;
      *unsigned __int16 v40 = 27;
      return result;
    }

    uint64_t v47 = &v3[(int)v7];
    uint64_t v49 = v47[17];
    unsigned int v48 = v47 + 17;
    char *v48 = v49 + 1;
    if (v16 < 2047)
    {
      LOWORD(v16) = v16 + 1;
    }

    else
    {
      LOWORD(v16) = 0;
      unint64_t v7 = (int)v7 + 1LL;
      v3[8] = v7;
      uint64_t v50 = *v48;
      v3[v7 + 17] = *v48;
      char *v48 = v50 - 1;
    }
  }

  else
  {
    int v41 = v12 + 32;
    if (v12 >= -1) {
      int v41 = v12 + 1;
    }
    *(_DWORD *)(result + 4LL * (v41 >> 5)) |= 1 << (v12 + 1);
  }

  LOWORD(v37) = (_WORD)v7 << 11;
LABEL_56:
  unint64_t v42 = v37 + v16;
  if (!((_WORD)v37 + (_WORD)v16)) {
    return 0LL;
  }
  uint64_t result = __get_buf((uint64_t)v3, (unsigned __int16)(v37 + v16), v2, 1);
  *(void *)(v2 + 16) = result;
  if (result)
  {
    *(_BYTE *)(result + 40) |= 1u;
    uint64_t v43 = (unsigned __int16)*v4;
    unint64_t v44 = v43 + 2;
    unsigned int v45 = v4[v43 + 2];
    unsigned int v46 = &v4[v43];
    v46[4] = v45;
    v46[3] = v46[1] - 4;
    v46[1] = v42;
    v4[v44] = 0;
    *uint64_t v4 = v44;
  }

  return result;
}

          unint64_t v30 = v14;
          if (v16 < k)
          {
            unint64_t v30 = v14;
            do
            {
              unint64_t v31 = *v16++;
              *v30++ = v31;
            }

            while (v16 < k);
          }

          unsigned __int16 v32 = j + 1;
          do
          {
            uint64_t v33 = *v32++;
            *v30++ = v33;
          }

          while (v33);
          uint64_t result = globexp1(v34, v8, v7, v6);
          if ((_DWORD)result) {
            return result;
          }
          uint64_t v16 = k + 1;
        }
      }

      else
      {
        if (v25 != 44)
        {
          if (v25 == 91)
          {
            uint64_t v26 = k;
            do
            {
              unsigned __int16 v28 = v26[1];
              ++v26;
              unsigned __int16 v27 = v28;
            }

            while (v28 != 93 && v27 != 0);
            if (v27) {
              uint64_t k = v26;
            }
          }

          continue;
        }

        if (!v23) {
          goto LABEL_49;
        }
      }
    }
  }

  return 0LL;
}

      *unsigned int v24 = 0;
    }

    unsigned __int16 v40 = a3 - 1;
    if (a3 >= 1)
    {
      int v41 = (char *)&data[10 * v22];
      unint64_t v42 = bswap32(*((_DWORD *)v41 + 8));
      if (v42 >= 0) {
        uint64_t v43 = v42;
      }
      else {
        uint64_t v43 = v42 + 1;
      }
      unint64_t v44 = v43 >> 1;
      if (v40 >= v42) {
        unsigned int v45 = v44;
      }
      else {
        unsigned int v45 = a3 - 1;
      }
      unsigned int v46 = *(void *)(v41 + 12);
      uint64_t v47 = bswap32(*(_DWORD *)(v46 + 16LL * v45));
      if (v47 == a3)
      {
        return *(char **)(v46 + 16LL * v45 + 4);
      }

      else
      {
        unsigned int v48 = 0;
        if (v40 >= v42) {
          uint64_t v49 = v42;
        }
        else {
          uint64_t v49 = a3;
        }
        while (1)
        {
          if (v49 >= a3 + 1 + v45 - v47) {
            uint64_t v49 = a3 + 1 + v45 - v47;
          }
          if (v47 >= a3) {
            uint64_t v49 = v45;
          }
          else {
            unsigned int v48 = v45 + 1;
          }
          uint64_t v50 = v47 < a3 ? 1 : -1;
          uint64_t v51 = v49 - v48;
          if (v49 <= v48) {
            break;
          }
          if (v51 >= 0) {
            uint64_t v52 = v49 - v48;
          }
          else {
            uint64_t v52 = v51 + 1;
          }
          uint64_t v53 = (v52 >> 1) * v50;
          if (v51 != 1) {
            uint64_t v50 = v53;
          }
          v45 += v50;
          uint64_t v47 = bswap32(*(_DWORD *)(v46 + 16LL * v45));
          if (v47 == a3) {
            return *(char **)(v46 + 16LL * v45 + 4);
          }
        }
      }
    }

    return (char *)a4;
  }

  __int16 v17 = 0;
  while (1)
  {
    if (v13 >= a2 + 1 + v14 - v16) {
      int v13 = a2 + 1 + v14 - v16;
    }
    if (v16 >= a2) {
      int v13 = v14;
    }
    else {
      __int16 v17 = v14 + 1;
    }
    int v18 = v16 < a2 ? 1 : -1;
    __int16 v19 = v13 - v17;
    if (v13 <= v17) {
      return (char *)a4;
    }
    if (v19 >= 0) {
      uint64_t v20 = v13 - v17;
    }
    else {
      uint64_t v20 = v19 + 1;
    }
    unsigned __int16 v21 = (v20 >> 1) * v18;
    if (v19 != 1) {
      int v18 = v21;
    }
    v14 += v18;
    uint64_t v16 = bswap32(data[10 * v14]);
    if (v16 == a2) {
      goto LABEL_36;
    }
  }

uint64_t putpair(_WORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (unsigned __int16)*a1;
  __int16 v6 = a1[v5 + 2] - *(void *)(a2 + 8);
  _platform_memmove();
  a1[(unsigned __int16)(v5 + 1)] = v6;
  LOWORD(a3) = v6 - *(void *)(a3 + 8);
  uint64_t result = _platform_memmove();
  a1[(unsigned __int16)(v5 + 2)] = a3;
  *a1 = v5 + 2;
  int v8 = (unsigned __int16)(v5 + 2);
  a1[v8 + 1] = a3 - 2 * (v5 + 2) - 6;
  a1[v8 + 2] = a3;
  return result;
}

uint64_t __addel(_DWORD *a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v6 = a2;
  for (uint64_t i = *(unsigned __int16 **)(a2 + 32); ; uint64_t i = *(unsigned __int16 **)(buf + 32))
  {
    unsigned int v9 = *i;
    if (!*i) {
      goto LABEL_12;
    }
    unsigned int v10 = i[2];
    if (v10 < 4)
    {
      if (v9 != 2 || v10 != 3)
      {
        uint64_t v11 = *i;
        goto LABEL_9;
      }

      unsigned int v9 = 2;
LABEL_12:
      if (i[2] >= 4u && a3[1] + a4[1] + 8 <= (unint64_t)i[v9 + 1])
      {
        putpair(i, (uint64_t)a3, (uint64_t)a4);
        goto LABEL_21;
      }

      unint64_t v14 = __add_ovflpage((unint64_t)a1, v6);
      if (v14)
      {
        uint64_t v15 = v14;
        uint64_t v16 = *(unsigned __int16 **)(v14 + 32);
        if (v16[2] >= 4u && a3[1] + a4[1] + 8 <= (unint64_t)v16[*v16 + 1])
        {
          putpair(v16, (uint64_t)a3, (uint64_t)a4);
        }

        else if (__big_insert((unint64_t)a1, v15, a3, a4))
        {
          return 0xFFFFFFFFLL;
        }

        *(_BYTE *)(v15 + 40) |= 1u;
        ++a1[14];
        return __expand_table((uint64_t)a1);
      }

      return 0xFFFFFFFFLL;
    }

    if (i[*i]) {
      goto LABEL_12;
    }
    uint64_t v11 = *i;
    uint64_t v12 = a3[1];
LABEL_9:
    unint64_t buf = __get_buf((uint64_t)a1, i[v11 - 1], v6, 0);
    uint64_t v6 = buf;
    if (!buf) {
      return 0xFFFFFFFFLL;
    }
  }

  unsigned int v18 = v9 + 1;
  unsigned __int16 v28 = i[v9 + 1];
  unsigned int v19 = v9 + 2;
  unsigned __int16 v20 = i[v9 + 2];
  unsigned int v21 = v9 - 1;
  unsigned __int16 v22 = i[v21];
  __int16 v23 = v20 - v12;
  i[v21] = v20 - v12;
  _platform_memmove();
  unsigned __int16 v24 = v23 - a4[1];
  i[v11] = v24;
  _platform_memmove();
  i[v18] = v22;
  *uint64_t i = v19;
  i[v19] = 0;
  unint64_t v25 = &i[(unsigned __int16)v19];
  v25[1] = v28 - (*((_WORD *)a3 + 4) + *((_WORD *)a4 + 4)) - 4;
  v25[2] = v24;
LABEL_21:
  *(_BYTE *)(v6 + 40) |= 1u;
  unsigned int v26 = a1[13];
  unsigned int v27 = a1[14] + 1;
  a1[14] = v27;
  if (v27 / (a1[10] + 1) <= v26) {
    return 0LL;
  }
  return __expand_table((uint64_t)a1);
}

unint64_t __add_ovflpage(unint64_t result, uint64_t a2)
{
  uint64_t v2 = a2;
  unsigned int v3 = (_DWORD *)result;
  uint64_t v4 = *(_WORD **)(a2 + 32);
  if (*(_DWORD *)(result + 52) == 0x10000)
  {
    unsigned int v5 = (unsigned __int16)*v4;
    if (v5 >= 8) {
      int v6 = v5 >> 1;
    }
    else {
      int v6 = 4;
    }
    *(_DWORD *)(result + 52) = v6;
  }

  *(_BYTE *)(a2 + 40) |= 1u;
  uint64_t v7 = *(int *)(result + 32);
  unint64_t v8 = result + 4 * v7;
  int v11 = *(_DWORD *)(v8 + 68);
  unsigned int v10 = (int *)(v8 + 68);
  int v9 = v11;
  int v12 = (8 * *(_DWORD *)(result + 12) - 1) & (v11 - 1);
  int v13 = (v11 - 1) >> (*(_BYTE *)(result + 16) + 3);
  int v14 = *(int *)(result + 36) >> (*(_BYTE *)(result + 16) + 3);
  if (v14 <= v13)
  {
    uint64_t v53 = v4;
    uint64_t v17 = v14;
    uint64_t v18 = v13;
    int v51 = v13;
    int v19 = v13 + 1;
    int v20 = 8 * v14;
    uint64_t v21 = v14;
    while (1)
    {
      uint64_t result = *(void *)&v3[2 * v21 + 84];
      if (!result)
      {
        uint64_t result = (unint64_t)fetch_bitmap(v3, v21);
        if (!result) {
          return result;
        }
      }

      int v22 = v12;
      if (v21 != v18) {
        int v22 = 8 * v3[3] - 1;
      }
      if (v21 == v17)
      {
        int v23 = (8 * v3[3] - 1) & v3[9];
        int v24 = v23 + 31;
        if (v23 < 0 == __OFSUB__(v21, v17)) {
          int v24 = (8 * v3[3] - 1) & v3[9];
        }
        int v25 = v24 >> 5;
        signed int v26 = v23 & 0xFFFFFFE0;
      }

      else
      {
        signed int v26 = 0;
        int v25 = 0;
      }

      if (v26 <= v22)
      {
        unsigned int v27 = (int *)(result + 4LL * v25);
        while (1)
        {
          int v29 = *v27++;
          int v28 = v29;
          if (v29 != -1) {
            break;
          }
          v26 += 32;
          if (v26 > v22) {
            goto LABEL_25;
          }
        }

        unsigned int v30 = 0;
        if ((v28 & 1) != 0)
        {
          int v31 = 1;
          uint64_t v4 = v53;
          do
          {
            unsigned int v32 = v30++;
            if (v32 > 0x1E) {
              break;
            }
            int v33 = v28 & (2 * v31);
            v31 *= 2;
          }

          while (v33);
        }

        else
        {
          uint64_t v4 = v53;
        }

        int v34 = v30 + v26 + 31;
        *(_DWORD *)(result + 4LL * (v34 >> 5)) |= 1 << v30;
        int v35 = v3[3];
        int v36 = v30 + v26 + v35 * v20;
        int v37 = v36 + 1;
        if (v36 + 1 >= v3[9]) {
          v3[9] = v36;
        }
        if ((int)v7 < 1)
        {
          LOWORD(v38) = 0;
        }

        else
        {
          uint64_t v38 = 0LL;
          while (v37 > v3[v38 + 17])
          {
            if (v7 == ++v38)
            {
              LODWORD(v38) = v7;
              break;
            }
          }

          if ((_DWORD)v38) {
            int v37 = v30 + v35 * v20 - v3[(int)v38 + 16] + v26 + 1;
          }
        }

        uint64_t v2 = a2;
        if (v37 < 2047)
        {
          LOWORD(v16) = (_WORD)v38 << 11;
          goto LABEL_56;
        }

        goto LABEL_51;
      }

uint64_t __get_page(_DWORD *a1, unsigned __int16 *a2, unsigned int a3, int a4, int a5, int a6)
{
  int v7 = a1[3];
  if (!a5 || a1[71] == -1)
  {
    uint64_t result = 0LL;
    *a2 = 0;
    a2[1] = v7 - 6;
    a2[2] = v7;
    return result;
  }

  if (a4)
  {
    if (a3) {
      __log2(a3 + 1);
    }
  }

  else
  {
    unsigned int v11 = 1 << (a3 >> 11);
    if (v11 != 1) {
      __log2(v11);
    }
  }

  uint64_t result = pread_NOCANCEL();
  if ((_DWORD)result != -1)
  {
    if ((_DWORD)result)
    {
      if (v7 != (_DWORD)result)
      {
        *__error() = 79;
        return 0xFFFFFFFFLL;
      }
    }

    else
    {
      *a2 = 0;
    }

    if (a6)
    {
      if (a1[2] != 1234)
      {
        unint64_t v12 = a1[3];
        if ((int)v12 >= 4)
        {
          unint64_t v13 = v12 >> 2;
          int v14 = (char *)a2 + 1;
          do
          {
            *(_DWORD *)(v14 - 1) = bswap32(*(_DWORD *)(v14 - 1));
            v14 += 4;
            --v13;
          }

          while (v13);
        }
      }

      return 0LL;
    }

    __int16 v15 = *a2;
    if (*a2)
    {
      if (a1[2] == 1234) {
        return 0LL;
      }
      *(_BYTE *)a2 = HIBYTE(v15);
      *((_BYTE *)a2 + 1) = v15;
      uint64_t v17 = *a2 + 2LL;
      uint64_t v18 = (char *)a2 + 3;
      do
      {
        uint64_t result = 0LL;
        *(_WORD *)(v18 - 1) = bswap32(*(unsigned __int16 *)(v18 - 1)) >> 16;
        v18 += 2;
        --v17;
      }

      while (v17);
    }

    else
    {
      uint64_t result = 0LL;
      *a2 = 0;
      unsigned __int16 v16 = *((_WORD *)a1 + 6);
      a2[1] = v16 - 6;
      a2[2] = v16;
    }
  }

  return result;
}

uint64_t __put_page(_DWORD *a1, _WORD *a2, unsigned int a3, int a4, int a5)
{
  int v11 = a1[3];
  if (a1[71] == -1)
  {
    if (issetugid()) {
      __int16 v15 = 0LL;
    }
    else {
      __int16 v15 = getenv("TMPDIR");
    }
    unsigned __int16 v16 = "/tmp";
    if (v15) {
      unsigned __int16 v16 = v15;
    }
    if (snprintf(__str, 0x400uLL, "%s/_hash.XXXXXX", v16) >= 0x400)
    {
      uint64_t v17 = __error();
      int v18 = 63;
LABEL_39:
      *uint64_t v17 = v18;
      return 0xFFFFFFFFLL;
    }

    sigset_t v29 = -1;
    sigprocmask(1, &v29, &v28);
    int v19 = mkstemp(__str);
    a1[71] = v19;
    if (v19 != -1)
    {
      unlink(__str);
      fcntl_NOCANCEL();
    }

    sigprocmask(3, &v28, 0LL);
    if (a1[71] == -1) {
      return 0xFFFFFFFFLL;
    }
  }

  if (a1[2] == 1234)
  {
LABEL_10:
    if (a4) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }

  if (a5)
  {
    int v12 = a1[3];
    int v5 = v12 >> 2;
    if (v12 >= 4)
    {
      if (v5 <= 1) {
        uint64_t v13 = 1LL;
      }
      else {
        uint64_t v13 = v5;
      }
      int v14 = (char *)a2 + 1;
      do
      {
        *(_DWORD *)(v14 - 1) = bswap32(*(_DWORD *)(v14 - 1));
        v14 += 4;
        --v13;
      }

      while (v13);
    }

    goto LABEL_10;
  }

  uint64_t v20 = (unsigned __int16)*a2;
  uint64_t v21 = v20 + 3;
  int v22 = a2;
  do
  {
    *int v22 = bswap32((unsigned __int16)*v22) >> 16;
    ++v22;
    --v21;
  }

  while (v21);
  int v5 = v20 + 2;
  if (a4)
  {
LABEL_11:
    if (a3) {
      __log2(a3 + 1);
    }
    goto LABEL_30;
  }

LABEL_28:
  unsigned int v23 = 1 << (a3 >> 11);
  if (v23 != 1) {
    __log2(v23);
  }
LABEL_30:
  uint64_t result = pwrite_NOCANCEL();
  if ((_DWORD)result == -1) {
    return result;
  }
  if (v11 != (_DWORD)result)
  {
    uint64_t v17 = __error();
    int v18 = 79;
    goto LABEL_39;
  }

  if (a1[2] == 1234) {
    return 0LL;
  }
  if (a5)
  {
    if (v5 >= 1)
    {
      uint64_t v25 = v5;
      signed int v26 = (char *)a2 + 1;
      do
      {
        *(_DWORD *)(v26 - 1) = bswap32(*(_DWORD *)(v26 - 1));
        v26 += 4;
        --v25;
      }

      while (v25);
    }

    return 0LL;
  }

  if (v5 < 0) {
    return 0LL;
  }
  uint64_t v27 = (v5 + 1);
  uint64_t result = 0LL;
  do
  {
    *a2 = bswap32((unsigned __int16)*a2) >> 16;
    ++a2;
    --v27;
  }

  while (v27);
  return result;
}

        _platform_strlcat();
LABEL_29:
        if (!nextcomp())
        {
          if (*v13) {
            _platform_strlcat();
          }
          return v13;
        }
      }
    }
  }

  return v13;
}

    ;
  }

  if (v18 == 123)
  {
    ++v15;
    goto LABEL_28;
  }

  if (v18 != 125) {
    goto LABEL_28;
  }
  if (v15)
  {
    --v15;
    goto LABEL_28;
  }

  if (v16 <= j)
  {
    unsigned int v23 = 0;
    for (uint64_t k = v16; k <= j; ++k)
    {
      uint64_t v25 = *k;
      if (*k > 122)
      {
        if (v25 == 123)
        {
          ++v23;
          continue;
        }

        if (v25 == 125)
        {
          if (v23)
          {
            --v23;
            continue;
          }

    *(_DWORD *)(a1 + 32) = v26 - 1;
LABEL_29:
    uint64_t v27 = *(int *)(a1 + 8);
    sigset_t v28 = *(_DWORD *)(a2 + 20);
    sigset_t v29 = *(int *)(a2 + 16);
    unsigned int v30 = a2 + 16 * v29;
    *(void *)(v30 + 24) = *(void *)a1;
    *(void *)(v30 + 32) = v27;
    int v31 = v28 + v27;
    unsigned int v32 = v29 + 1;
    *(_DWORD *)(a2 + 16) = v29 + 1;
    *(_DWORD *)(a2 + 20) = v31;
    if ((int)v29 >= 7)
    {
      if (v31)
      {
        int v33 = __sfvwrite(*(void *)a2, a2 + 8);
        int v31 = 0;
        unsigned int v32 = 0;
        *(void *)(a2 + 16) = 0LL;
        if (v33) {
          return 0xFFFFFFFFLL;
        }
      }

      else
      {
        unsigned int v32 = 0;
        *(_DWORD *)(a2 + 16) = 0;
      }
    }

    int v34 = **(char **)(a1 + 16);
    else {
      int v35 = (a4 - i);
    }
    if ((int)v35 < 1)
    {
      LODWORD(v35) = 0;
    }

    else
    {
      int v36 = a2 + 16LL * v32;
      *(void *)(v36 + 24) = i;
      *(void *)(v36 + 32) = v35;
      v31 += v35;
      *(_DWORD *)(a2 + 16) = v32 + 1;
      *(_DWORD *)(a2 + 20) = v31;
      if (v32 < 7)
      {
        ++v32;
      }

      else if (v31)
      {
        int v37 = __sfvwrite(*(void *)a2, a2 + 8);
        int v31 = 0;
        unsigned int v32 = 0;
        *(void *)(a2 + 16) = 0LL;
        if (v37) {
          return 0xFFFFFFFFLL;
        }
      }

      else
      {
        unsigned int v32 = 0;
        *(_DWORD *)(a2 + 16) = 0;
      }
    }

    uint64_t v38 = v34 - v35;
    if (v38 >= 1)
    {
      do
      {
        int v39 = v32;
        if (v38 >= 16) {
          unsigned __int16 v40 = 16LL;
        }
        else {
          unsigned __int16 v40 = v38;
        }
        int v41 = a2 + 16LL * v32;
        *(void *)(v41 + 24) = "0000000000000000";
        *(void *)(v41 + 32) = v40;
        v31 += v40;
        unsigned int v32 = v39 + 1;
        *(_DWORD *)(a2 + 16) = v39 + 1;
        *(_DWORD *)(a2 + 20) = v31;
        if (v39 >= 7)
        {
          if (v31)
          {
            __int16 v42 = __sfvwrite(*(void *)a2, a2 + 8);
            int v31 = 0;
            unsigned int v32 = 0;
            *(void *)(a2 + 16) = 0LL;
            if (v42) {
              return 0xFFFFFFFFLL;
            }
          }

          else
          {
            unsigned int v32 = 0;
            *(_DWORD *)(a2 + 16) = 0;
          }
        }

        unsigned int v23 = __OFSUB__(v38, (_DWORD)v40);
        v38 -= v40;
      }

      while (!((v38 < 0) ^ v23 | (v38 == 0)));
    }
  }

  if (v26 > 0) {
    goto LABEL_28;
  }
  if (i <= a4) {
    uint64_t v43 = i;
  }
  else {
    uint64_t v43 = a4;
  }
  return (v43 - a3);
}

  unsigned __int16 v16 = open_NOCANCEL();
  if (v16 == -1) {
    goto LABEL_121;
  }
  if (fstat(v16, &v95) < 0 || (v95.st_mode & 0xF000) != 0x8000)
  {
    free(v10);
    close_NOCANCEL();
    return 0xFFFFFFFFLL;
  }

  free(v10);
  int v14 = malloc(0xA1E8uLL);
  if (v14)
  {
    int NOCANCEL = read_NOCANCEL();
    __int16 v15 = 0xFFFFFFFFLL;
    if ((close_NOCANCEL() & 0x80000000) != 0 || NOCANCEL < 1) {
      goto LABEL_22;
    }
    int v18 = 4;
    int v19 = NOCANCEL;
LABEL_35:
    uint64_t v20 = (char)v14[24] >> 7;
    int v22 = (char)v14[20] >> 7;
    LODWORD(v24) = (char)v14[28] >> 7;
    *(_DWORD *)a2 = v24;
    LODWORD(v26) = (char)v14[32] >> 7;
    *(_DWORD *)(a2 + 4) = v26;
    LODWORD(v28) = (char)v14[36] >> 7;
    *(_DWORD *)(a2 + 8) = v28;
    LODWORD(v30) = (char)v14[40] >> 7;
    *(_DWORD *)(a2 + 12) = v30;
    __int16 v15 = 0xFFFFFFFFLL;
    if (v24 > 0x32
      || (v28 - 257) < 0xFFFFFF00
      || v26 > 0x4B0
      || (v30 & 0x80000000) != 0
      || (int)v30 > 50
      || v20 && (_DWORD)v28 != v20)
    {
      goto LABEL_22;
    }

    if (v22 && (_DWORD)v28 != v22) {
      goto LABEL_22;
    }
    if (v19 - 44LL >= (int)(v22 + v20 + v24 * (v18 + 4) + v26 * (v18 | 1) + 6 * v28 + v30))
    {
      unsigned int v32 = v14 + 44;
      if ((_DWORD)v26)
      {
        int v33 = 0LL;
        int v34 = v14 + 44;
        do
        {
          int v35 = (uint64_t)*v34 >> 7;
          if (v18 == 4)
          {
            for (juint64_t j = 0LL; jj != 4; ++jj)
              int v35 = v34[jj] | (unint64_t)(v35 << 8);
          }

          else
          {
            for (kuint64_t k = 0LL; kk != 8; ++kk)
              int v35 = v34[kk] | (unint64_t)(v35 << 8);
          }

          *(void *)(a2 + 8 * v33 + 24) = v35;
          v34 += v18;
          ++v33;
        }

        while (v33 != v26);
        uint64_t v38 = 0LL;
        while (1)
        {
          int v39 = v34[v38];
          *(_BYTE *)(a2 + 9624 + v38) = v39;
          if (v26 == ++v38)
          {
            unsigned int v32 = &v34[v38];
            unsigned int v46 = 0;
LABEL_78:
            if ((int)v30 < 1)
            {
              LODWORD(v30) = 0;
            }

            else
            {
              uint64_t v47 = v30;
              unsigned int v48 = (_BYTE *)(a2 + 16968);
              do
              {
                int v49 = *v32++;
                *v48++ = v49;
                --v47;
              }

              while (v47);
            }

            *(_BYTE *)(a2 + v30 + 16968) = 0;
            if ((int)v24 >= 1)
            {
              int v50 = 0LL;
              int v51 = &v32[v18];
              do
              {
                uint64_t v52 = (uint64_t)*v32 >> 7;
                if (v18 == 4)
                {
                  for (muint64_t m = 0LL; mm != 4; ++mm)
                    uint64_t v52 = v32[mm] | (unint64_t)(v52 << 8);
                }

                else
                {
                  for (nuint64_t n = 0LL; nn != 8; ++nn)
                    uint64_t v52 = v32[nn] | (unint64_t)(v52 << 8);
                }

                uint64_t v55 = 0LL;
                *(void *)(a2 + 16 * v50 + 17480) = v52;
                unsigned int v56 = &v32[v18];
                uint64_t v57 = (uint64_t)*v56 >> 7;
                do
                  uint64_t v57 = v51[v55++] | (unint64_t)(v57 << 8);
                while (v55 != 4);
                *(void *)(a2 + 16 * v50 + 17488) = v57;
                unsigned int v32 = v56 + 4;
                ++v50;
                v51 += v18 + 4;
              }

              while (v50 != v24);
            }

            if (v46)
            {
              unsigned __int16 v58 = v28;
              unsigned __int16 v59 = v28;
              unsigned __int16 v60 = (unsigned int *)(a2 + 10840);
              do
              {
                if (v20)
                {
                  uint64_t v61 = *v32++;
                  *unsigned __int16 v60 = v61;
                  if (v61 > 1) {
                    goto LABEL_21;
                  }
                }

                else
                {
                  *unsigned __int16 v60 = 0;
                }

                v60 += 6;
                --v59;
              }

              while (v59);
              uint64_t v62 = (unsigned int *)(a2 + 10844);
              do
              {
                if (v22)
                {
                  unint64_t v63 = *v32++;
                  unsigned __int16 *v62 = v63;
                  if (v63 > 1) {
                    goto LABEL_21;
                  }
                }

                else
                {
                  unsigned __int16 *v62 = 0;
                }

                v62 += 6;
                --v58;
              }

              while (v58);
            }

            uint64_t v64 = 0LL;
            else {
              uint64_t v65 = v26;
            }
            uint64_t v66 = (v65 - 2);
            while (v66 != v64)
            {
              unsigned __int16 v67 = a2 + 8 * v64++;
              if (*(void *)(v67 + 24) > *(void *)(v67 + 32))
              {
                *(_DWORD *)(a2 + 4) = v64;
                LODWORD(v26) = v64;
                break;
              }
            }

            if (v14[4])
            {
              unsigned __int16 v68 = v19 + (_DWORD)v14 - (_DWORD)v32;
              if (v68 >= 1)
              {
                unsigned __int16 v69 = (v19 + (_DWORD)v14 - (_DWORD)v32);
                unsigned __int16 v70 = v14;
                do
                {
                  int v71 = *v32++;
                  *v70++ = v71;
                  --v69;
                }

                while (v69);
              }

              int v19 = v68;
              unint64_t v72 = v18 >= 8;
              v18 *= 2;
              if (!v72) {
                goto LABEL_35;
              }
            }

            else
            {
              unsigned __int16 v68 = v19;
            }

            if (a4)
            {
              if (v68 > 2 && *v14 == 10)
              {
                unint64_t v74 = (v68 - 1);
                if (v14[v74] == 10 && (int)v28 <= 254)
                {
                  int v75 = (unsigned int *)malloc(0x4768uLL);
                  if (!v75) {
                    break;
                  }
                  uint64_t v76 = v75;
                  v14[v74] = 0;
                  if (!tzparse((unint64_t)(v14 + 1), (uint64_t)v75, 0) && v76[2] == 2)
                  {
                    unsigned int v77 = *(_DWORD *)(a2 + 12);
                    int v78 = v76[3];
                    if ((int)v78 + v77 < 51)
                    {
                      v76[2709] += v77;
                      v76[2715] += v77;
                      if ((int)v78 > 0)
                      {
                        int v79 = (char *)(v76 + 4242);
                        do
                        {
                          int v80 = *v79++;
                          uint64_t v81 = *(int *)(a2 + 12);
                          *(_DWORD *)(a2 + 12) = v81 + 1;
                          *(_BYTE *)(a2 + v81 + 16968) = v80;
                          --v78;
                        }

                        while (v78);
                      }

                      uint64_t v82 = v76[1];
                      if ((int)v82 < 1)
                      {
                        LODWORD(v83) = 0;
                      }

                      else
                      {
                        uint64_t v83 = 0LL;
                        while (*(void *)&v76[2 * v83 + 6] <= *(void *)(a2 + 8LL * *(int *)(a2 + 4) + 16))
                        {
                          if (v82 == ++v83) {
                            goto LABEL_148;
                          }
                        }
                      }

                      if ((int)v83 < (int)v82)
                      {
                        uint64_t v83 = v83;
                        __int128 v84 = *(_DWORD *)(a2 + 4);
                        do
                        {
                          if (v84 > 1199) {
                            break;
                          }
                          *(void *)(a2 + 8LL * v84 + 24) = *(void *)&v76[2 * v83 + 6];
                          *(_BYTE *)(a2 + v84 + 9624) = *((_BYTE *)v76 + v83 + 9624) + *(_BYTE *)(a2 + 8);
                          __int128 v84 = *(_DWORD *)(a2 + 4) + 1;
                          *(_DWORD *)(a2 + 4) = v84;
                          ++v83;
                        }

                        while ((int)v82 > (int)v83);
                      }

  *a1 = i;
  if (!*a2)
  {
LABEL_32:
    LODWORD(v10) = -1;
    return v10;
  }

  unsigned int v10 = 0LL;
  int v11 = a2 + 1;
  while (_platform_strcmp())
  {
    if (!v11[v10++]) {
      goto LABEL_32;
    }
  }

  return v10;
}

uint64_t __ibitmap(uint64_t a1, __int16 a2, int a3, int a4)
{
  unint64_t v8 = malloc(*(int *)(a1 + 12));
  if (!v8) {
    return 1LL;
  }
  int v9 = v8;
  ++*(_DWORD *)(a1 + 592);
  _platform_bzero();
  _platform_memset();
  uint64_t result = 0LL;
  v9[(a3 - 1) >> 5] = -1 << a3;
  *v9 |= 1u;
  *(_WORD *)(a1 + 2LL * a4 + 196) = a2;
  *(void *)(a1 + 8LL * a4 + 336) = v9;
  return result;
}

uint64_t __free_ovflpage(_DWORD *a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int16 *)(a2 + 24);
  if (v4 >= 0x800) {
    int v5 = a1[(v4 >> 11) + 16];
  }
  else {
    int v5 = 0;
  }
  int v6 = v5 + (v4 & 0x7FF);
  int v7 = v6 - 1;
  int v8 = a1[9];
  BOOL v9 = __OFSUB__(v6, v8);
  if (v6 <= v8) {
    a1[9] = v7;
  }
  int v10 = a1[3];
  int v11 = v7 >> (a1[4] + 3);
  bitmap = *(unsigned __int16 **)&a1[2 * v11 + 84];
  if (!bitmap) {
    bitmap = fetch_bitmap(a1, v11);
  }
  int v13 = (8 * v10 - 1) & v7;
  int v14 = v13 + 31;
  if (v13 < 0 == v9) {
    int v14 = (8 * v10 - 1) & v7;
  }
  *(_DWORD *)&bitmap[2 * (v14 >> 5)] &= ~(1 << v13);
  return __reclaim_buf((uint64_t)a1, (uint64_t *)a2);
}

unsigned __int16 *fetch_bitmap(_DWORD *a1, int a2)
{
  if (a1[148] <= a2) {
    return 0LL;
  }
  uint64_t result = (unsigned __int16 *)malloc((int)a1[3]);
  int v5 = &a1[2 * a2];
  *((void *)v5 + 42) = result;
  if (result)
  {
    uint64_t v6 = a2;
    int v7 = (unsigned __int16 **)(v5 + 84);
    int page = __get_page(a1, result, *((unsigned __int16 *)a1 + v6 + 98), 0, 1, 1);
    uint64_t result = *v7;
    if (page)
    {
      free(result);
      return 0LL;
    }
  }

  return result;
}

DBM *__cdecl dbm_open(const char *a1, int a2, mode_t a3)
{
  uint64_t v3 = a3;
  uint64_t v7 = 0x2800001000LL;
  int v8 = 1;
  uint64_t v10 = 0LL;
  uint64_t v9 = 0LL;
  if ((unint64_t)_platform_strlen() < 0x3FD)
  {
    _platform_strcpy();
    *(_DWORD *)&v11[_platform_strlen()] = 6448174;
    return (DBM *)__hash_open(v11, a2, v3, (uint64_t)&v7);
  }

  else
  {
    int v5 = __error();
    uint64_t result = 0LL;
    int *v5 = 63;
  }

  return result;
}

void dbm_close(DBM *a1)
{
}

datum dbm_fetch(DBM *a1, datum a2)
{
  datum v6 = a2;
  int v2 = (*(uint64_t (**)(DBM *, datum *, void *, void))&a1->__opaque[24])(a1, &v6, v5, 0LL);
  if (v2) {
    size_t v3 = 0LL;
  }
  else {
    size_t v3 = v5[1];
  }
  if (v2) {
    unsigned int v4 = 0LL;
  }
  else {
    unsigned int v4 = (void *)v5[0];
  }
  result.dunint64_t size = v3;
  result.dptr = v4;
  return result;
}

datum dbm_firstkey(DBM *a1)
{
  uint64_t v1 = *(void *)&a1->__opaque[56];
  int v2 = (*(uint64_t (**)(DBM *, void *, uint64_t *, uint64_t))&a1->__opaque[40])(a1, v7, &v6, 3LL);
  char v3 = *(_BYTE *)(v1 + 656);
  if (v2)
  {
    unsigned int v4 = 0LL;
    *(_BYTE *)(v1 + 656) = v3 | 1;
  }

  else
  {
    *(_BYTE *)(v1 + 656) = v3 & 0xFE;
    unsigned int v4 = (void *)v7[0];
  }

  size_t v5 = v7[1];
  result.dunint64_t size = v5;
  result.dptr = v4;
  return result;
}

datum dbm_nextkey(DBM *a1)
{
  uint64_t v1 = *(void *)&a1->__opaque[56];
  if ((*(_BYTE *)(v1 + 656) & 1) != 0)
  {
    int v2 = 0LL;
  }

  else if ((*(unsigned int (**)(DBM *, void *, uint64_t *, uint64_t))&a1->__opaque[40])(a1, v5, &v4, 7LL))
  {
    int v2 = 0LL;
    *(_BYTE *)(v1 + 656) |= 1u;
  }

  else
  {
    int v2 = (void *)v5[0];
  }

  size_t v3 = v5[1];
  result.dunint64_t size = v3;
  result.dptr = v2;
  return result;
}

int dbm_delete(DBM *a1, datum a2)
{
  datum v3 = a2;
  else {
    return 0;
  }
}

int dbm_store(DBM *a1, datum a2, datum a3, int a4)
{
  datum v6 = a2;
  datum v5 = a3;
  return (*(uint64_t (**)(DBM *, datum *, datum *, void))&a1->__opaque[32])( a1,  &v6,  &v5,  8 * (a4 == 0));
}

int dbm_error(DBM *a1)
{
  return *(_DWORD *)(*(void *)&a1->__opaque[56] + 320LL);
}

int dbm_clearerr(DBM *a1)
{
  *(_DWORD *)(*(void *)&a1->__opaque[56] + 320LL) = 0;
  return 0;
}

int dbm_dirfno(DBM *a1)
{
  return *(_DWORD *)(*(void *)&a1->__opaque[56] + 284LL);
}

MPOOL *__cdecl mpool_open(void *a1, int a2, pgno_t a3, pgno_t a4)
{
  if (fstat(a2, &v13)) {
    return 0LL;
  }
  if ((v13.st_mode & 0xF000) == 0x8000)
  {
    datum result = (MPOOL *)calloc(1uLL, 0x848uLL);
    if (result)
    {
      uint64_t v8 = 0LL;
      result->lqh.tqh_first = 0LL;
      result->lqh.tqh_last = &result->lqh.tqh_first;
      __int128 v9 = 0uLL;
      do
      {
        uint64_t v10 = (double *)&result->hqh[v8];
        int v11 = &result->hqh[v8 + 1];
        vst2q_f64(v10, *(float64x2x2_t *)&v9);
        v8 += 2LL;
      }

      while (v8 != 128);
      result->maxcache = a4;
      result->npages = v13.st_size / a3;
      result->pageunint64_t size = a3;
      result->fd = a2;
    }
  }

  else
  {
    int v12 = __error();
    datum result = 0LL;
    *int v12 = 29;
  }

  return result;
}

void mpool_filter( MPOOL *a1, void (__cdecl *a2)(void *, pgno_t, void *), void (__cdecl *a3)(void *, pgno_t, void *), void *a4)
{
  a1->pgiuint64_t n = a2;
  a1->pguuid_string_t out = a3;
  a1->pgcookie = a4;
}

void *__cdecl mpool_new(MPOOL *a1, pgno_t *a2)
{
  if (a1->npages == -1) {
    mpool_new_cold_1();
  }
  datum result = (void *)mpool_bkt((uint64_t)a1);
  if (result)
  {
    pgno_t npages = a1->npages;
    a1->pgno_t npages = npages + 1;
    *((_DWORD *)result + 10) = npages;
    *a2 = npages;
    *((_BYTE *)result + 44) = 2;
    datum v6 = &a1->lqh + ((*((_DWORD *)result + 10) - 1) & 0x7F);
    tqh_first = v6[1].tqh_first;
    p_tqh_first = (void **)&v6[1].tqh_first;
    *(void *)datum result = tqh_first;
    p_tqe_prev = (void **)&tqh_first->hq.tqe_prev;
    if (tqh_first) {
      uint64_t v10 = p_tqe_prev;
    }
    else {
      uint64_t v10 = p_tqh_first + 1;
    }
    *uint64_t v10 = result;
    *p_tqh_first = result;
    *((void *)result + 2) = 0LL;
    *((void *)result + 1) = p_tqh_first;
    tqh_last = a1->lqh.tqh_last;
    *((void *)result + 3) = tqh_last;
    *tqh_last = (_bkt *)result;
    a1->lqh.tqh_last = (_bkt **)((char *)result + 16);
    return (void *)*((void *)result + 4);
  }

  return result;
}

uint64_t mpool_bkt(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 2064) >= *(_DWORD *)(a1 + 2068) && (uint64_t v2 = *(void *)a1) != 0)
  {
    while ((*(_BYTE *)(v2 + 44) & 2) != 0)
    {
      uint64_t v2 = *(void *)(v2 + 16);
      if (!v2) {
        goto LABEL_5;
      }
    }

    if ((*(_BYTE *)(v2 + 44) & 1) != 0 && mpool_write((void *)a1, v2) == -1)
    {
      return 0LL;
    }

    else
    {
      uint64_t v5 = *(void *)v2;
      if (*(void *)v2)
      {
        *(void *)(v5 + 8) = *(void *)(v2 + 8);
        datum v6 = *(void **)(v2 + 8);
      }

      else
      {
        datum v6 = *(void **)(v2 + 8);
        *(void *)(a1 + 16LL * ((*(_DWORD *)(v2 + 40) - 1) & 0x7F) + 24) = v6;
      }

      *datum v6 = v5;
      uint64_t v7 = *(void *)(v2 + 16);
      uint64_t v8 = *(void **)(v2 + 24);
      if (v7)
      {
        *(void *)(v7 + 24) = v8;
        uint64_t v8 = *(void **)(v2 + 24);
      }

      else
      {
        *(void *)(a1 + 8) = v8;
      }

      *uint64_t v8 = v7;
    }
  }

  else
  {
LABEL_5:
    datum v3 = calloc(1uLL, *(void *)(a1 + 2080) + 48LL);
    uint64_t v2 = (uint64_t)v3;
    if (v3)
    {
      v3[4] = v3 + 6;
      ++*(_DWORD *)(a1 + 2064);
    }
  }

  return v2;
}

void *__cdecl mpool_get(MPOOL *a1, pgno_t a2, unsigned int a3)
{
  if (a1->npages <= a2)
  {
    uint64_t v10 = __error();
    datum result = 0LL;
    int v12 = 22;
LABEL_8:
    *uint64_t v10 = v12;
  }

  else
  {
    uint64_t v3 = *(void *)&a2;
    uint64_t v5 = ((_BYTE)a2 - 1) & 0x7F;
    datum v6 = &a1->hqh[v5];
    tqe_next = (_bkt *)v6;
    while (1)
    {
      tqe_next = tqe_next->hq.tqe_next;
      if (!tqe_next) {
        break;
      }
      if (tqe_next->pgno == a2)
      {
        uint64_t v8 = tqe_next->hq.tqe_next;
        tqe_prev = tqe_next->hq.tqe_prev;
        if (tqe_next->hq.tqe_next)
        {
          v8->hq.tqe_prev = tqe_prev;
          tqe_prev = tqe_next->hq.tqe_prev;
        }

        else
        {
          a1->hqh[v5].tqh_last = tqe_prev;
        }

        *tqe_prev = v8;
        tqh_first = v6->tqh_first;
        tqe_next->hq.tqe_next = v6->tqh_first;
        if (tqh_first) {
          p_tqe_prev = &tqh_first->hq.tqe_prev;
        }
        else {
          p_tqe_prev = &a1->hqh[v5].tqh_last;
        }
        *p_tqe_prev = &tqe_next->hq.tqe_next;
        v6->tqh_first = tqe_next;
        tqe_next->hq.tqe_prev = &v6->tqh_first;
        uint64_t v21 = tqe_next->q.tqe_next;
        int v22 = tqe_next->q.tqe_prev;
        if (v21)
        {
          v21->q.tqe_prev = v22;
          int v22 = tqe_next->q.tqe_prev;
        }

        else
        {
          a1->lqh.tqh_last = v22;
        }

        *int v22 = v21;
        tqh_last = a1->lqh.tqh_last;
        tqe_next->q.tqe_next = 0LL;
        tqe_next->q.tqe_prev = tqh_last;
        *tqh_last = tqe_next;
        a1->lqh.tqh_last = &tqe_next->q.tqe_next;
        tqe_next->flags |= 2u;
        return tqe_next->page;
      }
    }

    datum result = (void *)mpool_bkt((uint64_t)a1);
    if (!result) {
      return result;
    }
    stat v13 = (char *)result;
    int v14 = pread_NOCANCEL();
    if (a1->pagesize == v14)
    {
      *((_DWORD *)v13 + 10) = v3;
      v13[44] = 2;
      __int16 v15 = v6->tqh_first;
      *(void *)stat v13 = v6->tqh_first;
      if (v15) {
        p_tqh_last = &v15->hq.tqe_prev;
      }
      else {
        p_tqh_last = &a1->hqh[v5].tqh_last;
      }
      *p_tqh_last = (_bkt **)v13;
      v6->tqh_first = (_bkt *)v13;
      *((void *)v13 + 2) = 0LL;
      *((void *)v13 + 1) = v6;
      uint64_t v17 = a1->lqh.tqh_last;
      *((void *)v13 + 3) = v17;
      *uint64_t v17 = (_bkt *)v13;
      a1->lqh.tqh_last = (_bkt **)(v13 + 16);
      pgiuint64_t n = a1->pgin;
      if (pgin) {
        ((void (*)(void *, uint64_t, void))pgin)(a1->pgcookie, v3, *((void *)v13 + 4));
      }
      return (void *)*((void *)v13 + 4);
    }

    else
    {
      if ((v14 & 0x80000000) == 0)
      {
        uint64_t v10 = __error();
        datum result = 0LL;
        int v12 = 79;
        goto LABEL_8;
      }

      return 0LL;
    }
  }

  return result;
}

int mpool_put(MPOOL *a1, void *a2, unsigned int a3)
{
  *((char *)a2 - 4) = *((char *)a2 - 4) & 0xFD | a3 & 1;
  return 0;
}

int mpool_close(MPOOL *a1)
{
  tqh_first = a1->lqh.tqh_first;
  if (tqh_first)
  {
    do
    {
      tqe_next = tqh_first->q.tqe_next;
      tqe_prev = tqh_first->q.tqe_prev;
      if (tqe_next)
      {
        tqe_next->q.tqe_prev = tqe_prev;
        tqe_prev = tqh_first->q.tqe_prev;
      }

      else
      {
        a1->lqh.tqh_last = tqe_prev;
      }

      *tqe_prev = tqe_next;
      free(tqh_first);
      tqh_first = a1->lqh.tqh_first;
    }

    while (a1->lqh.tqh_first);
  }

  free(a1);
  return 0;
}

int mpool_sync(MPOOL *a1)
{
  for (uint64_t i = a1->lqh.tqh_first; i; uint64_t i = i->q.tqe_next)
  {
    if ((i->flags & 1) != 0)
    {
      int result = mpool_write(a1, (uint64_t)i);
      if (result == -1) {
        return result;
      }
      pgiuint64_t n = a1->pgin;
      if (pgin) {
        ((void (*)(void *, void, void *))pgin)(a1->pgcookie, i->pgno, i->page);
      }
    }
  }

  else {
    return 0;
  }
}

uint64_t mpool_write(void *a1, uint64_t a2)
{
  uint64_t v4 = (void (*)(void, void, void))a1[263];
  if (v4) {
    v4(a1[264], *(unsigned int *)(a2 + 40), *(void *)(a2 + 32));
  }
  if (pwrite_NOCANCEL() != a1[260]) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0LL;
  *(_BYTE *)(a2 + 44) &= ~1u;
  return result;
}

uint64_t __rec_close(void *a1)
{
  uint64_t v2 = a1[7];
  uint64_t v3 = *(void **)(v2 + 32);
  if (v3)
  {
    mpool_put(*(MPOOL **)v2, v3, 0);
    *(void *)(v2 + 32) = 0LL;
  }

  uint64_t result = __rec_sync((uint64_t)a1, 0);
  if ((_DWORD)result != -1)
  {
    int v5 = *(_DWORD *)(v2 + 636);
    if ((v5 & 0x400) != 0)
    {
      else {
        unsigned int v6 = 0;
      }
      int v5 = *(_DWORD *)(v2 + 636);
      if ((v5 & 0x800) != 0) {
        goto LABEL_16;
      }
    }

    else
    {
      unsigned int v6 = 0;
      if ((v5 & 0x800) != 0)
      {
LABEL_16:
        else {
          return v6;
        }
      }
    }

    if ((v5 & 0x40) != 0) {
      int v7 = fclose(*(FILE **)(v2 + 568));
    }
    else {
      int v7 = close_NOCANCEL();
    }
    if (v7) {
      unsigned int v6 = -1;
    }
    goto LABEL_16;
  }

  return result;
}

uint64_t __rec_sync(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 56);
  int v5 = *(void **)(v4 + 32);
  if (v5)
  {
    mpool_put(*(MPOOL **)v4, v5, 0);
    *(void *)(v4 + 32) = 0LL;
  }

  if (a2 == 11) {
    return __bt_sync(a1, 0);
  }
  int v7 = *(_DWORD *)(v4 + 636);
  if ((v7 & 0x3800) != 0x1000) {
    return 0LL;
  }
  if ((v7 & 0x100) != 0
    || (uint64_t v8 = 0xFFFFFFFFLL, (*(unsigned int (**)(uint64_t, uint64_t))(v4 + 560))(v4, 0xFFFFFFFFLL) != -1))
  {
    if (lseek(*(_DWORD *)(v4 + 576), 0LL, 0)) {
      return 0xFFFFFFFFLL;
    }
    int v9 = *(_DWORD *)(v4 + 64);
    v13[0] = &v12;
    v13[1] = 4LL;
    if ((*(_BYTE *)(v4 + 637) & 2) != 0)
    {
      for (int i = (*(uint64_t (**)(uint64_t, void *, uint64_t *, uint64_t))(a1 + 40))(a1, v13, &v14, 3LL);
            !i;
            int i = (*(uint64_t (**)(uint64_t, void *, uint64_t *, uint64_t))(a1 + 40))(a1, v13, &v14, 7LL))
      {
        if (write_NOCANCEL() != v15) {
          return 0xFFFFFFFFLL;
        }
      }
    }

    else
    {
      uint64_t v18 = v4 + 632;
      uint64_t v19 = 1LL;
      for (int i = (*(uint64_t (**)(uint64_t, void *, uint64_t *, uint64_t))(a1 + 40))(a1, v13, &v14, 3LL);
            !i;
            int i = (*(uint64_t (**)(uint64_t, void *, uint64_t *, uint64_t))(a1 + 40))(a1, v13, &v14, 7LL))
      {
        uint64_t v16 = v14;
        uint64_t v17 = v15;
        if (writev_NOCANCEL() != v15 + 1) {
          return 0xFFFFFFFFLL;
        }
      }
    }

    *(_DWORD *)(v4 + 64) = v9;
    if (i == -1) {
      return 0xFFFFFFFFLL;
    }
    off_t v11 = lseek(*(_DWORD *)(v4 + 576), 0LL, 1);
    if (v11 == -1 || ftruncate(*(_DWORD *)(v4 + 576), v11))
    {
      return 0xFFFFFFFFLL;
    }

    else
    {
      uint64_t v8 = 0LL;
      *(_DWORD *)(v4 + 636) &= ~0x1000u;
    }
  }

  return v8;
}

uint64_t __rec_delete(uint64_t a1, unsigned int **a2, int a3)
{
  uint64_t v5 = *(void *)(a1 + 56);
  unsigned int v6 = *(void **)(v5 + 32);
  if (v6)
  {
    mpool_put(*(MPOOL **)v5, v6, 0);
    *(void *)(v5 + 32) = 0LL;
  }

  if (a3 != 1)
  {
    if (!a3)
    {
      unsigned int v7 = **a2;
      if (v7)
      {
        if (v7 <= *(_DWORD *)(v5 + 616))
        {
          uint64_t result = rec_rdelete((MPOOL **)v5, v7 - 1);
          if ((_DWORD)result) {
            return result;
          }
LABEL_14:
          uint64_t result = 0LL;
          *(_DWORD *)(v5 + 636) |= 0x1004u;
          return result;
        }

        return 1LL;
      }
    }

uint64_t rec_rdelete(MPOOL **a1, unsigned int a2)
{
  uint64_t v3 = __rec_search((uint64_t)a1, a2, 0);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = *(unsigned __int16 **)v3;
  BOOL v5 = __rec_dleaf((uint64_t)a1, *(unsigned __int16 **)v3, *(unsigned __int16 *)(v3 + 8)) == 0;
  unsigned int v6 = *a1;
  if (v5) {
    uint64_t v7 = 0LL;
  }
  else {
    uint64_t v7 = 0xFFFFFFFFLL;
  }
  mpool_put(v6, v4, v5);
  return v7;
}

uint64_t __rec_dleaf(uint64_t a1, unsigned __int16 *a2, int a3)
{
  __int16 v3 = a3;
  unsigned int v6 = a2 + 10;
  uint64_t v7 = &a2[a3 + 10];
  uint64_t v8 = (char *)a2 + *v7;
  if ((v8[4] & 1) == 0 || (uint64_t result = __ovfl_delete(a1, (pgno_t *)(v8 + 5)), (_DWORD)result != -1))
  {
    unsigned int v10 = (*(_DWORD *)v8 & 0xFFFFFFFC) + 8;
    _platform_memmove();
    a2[9] += v10;
    unsigned int v11 = *v7;
    while (v3)
    {
      unsigned int v12 = (unsigned __int16)*v6;
      if (v12 < v11) {
        *unsigned int v6 = v12 + v10;
      }
      --v3;
      ++v6;
    }

    int v13 = a2[8];
    unsigned int v14 = ((a2 + ((v13 - 20) & 0x1FFFE) - v6 + 20) >> 1) - 1;
    if ((unsigned __int16)((a2 + ((v13 - 20) & 0x1FFFE) - v6 + 20) >> 1) != 1)
    {
      uint64_t v15 = v6 + 1;
      do
      {
        unsigned int v16 = *v15;
        if (v16 >= v11) {
          __int16 v17 = 0;
        }
        else {
          __int16 v17 = v10;
        }
        *(v15 - 1) = v17 + v16;
        --v14;
        ++v15;
      }

      while ((_WORD)v14);
      LOWORD(v13) = a2[8];
    }

    uint64_t result = 0LL;
    a2[8] = v13 - 2;
    --*(_DWORD *)(a1 + 616);
  }

  return result;
}

uint64_t __rec_get(uint64_t a1, unsigned int **a2, void *a3, int a4)
{
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void **)(v7 + 32);
  if (v8)
  {
    mpool_put(*(MPOOL **)v7, v8, 0);
    *(void *)(v7 + 32) = 0LL;
  }

  if (a4 || (unsigned int v11 = **a2) == 0)
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }

  if (v11 > *(_DWORD *)(v7 + 616))
  {
    if ((*(_BYTE *)(v7 + 637) & 9) != 0) {
      return 1LL;
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t, void))(v7 + 560))(v7, **a2);
    if ((_DWORD)v9) {
      return v9;
    }
  }

  uint64_t v12 = __rec_search(v7, v11 - 1, 2);
  if (!v12) {
    return 0xFFFFFFFFLL;
  }
  int v13 = (void **)v12;
  uint64_t v9 = __rec_ret(v7, v12, 0, 0LL, a3);
  if ((*(_BYTE *)(v7 + 637) & 0x40) != 0) {
    mpool_put(*(MPOOL **)v7, *v13, 0);
  }
  else {
    *(void *)(v7 + 32) = *v13;
  }
  return v9;
}

uint64_t __rec_fpipe(uint64_t a1, unsigned int a2)
{
  size_t v4 = *(void *)(a1 + 624);
  uint64_t v6 = a1 + 496;
  BOOL v5 = *(void **)(a1 + 496);
  if (*(void *)(v6 + 8) < v4)
  {
    BOOL v5 = reallocf(v5, v4);
    *(void *)(a1 + 496) = v5;
    if (!v5) {
      return 0xFFFFFFFFLL;
    }
    size_t v4 = *(void *)(a1 + 624);
    *(void *)(a1 + 504) = v4;
  }

  v13[0] = (uint64_t)v5;
  v13[1] = v4;
  unsigned int v7 = *(_DWORD *)(a1 + 616);
  if (v7 <= a2) {
    unsigned int v8 = a2;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 616);
  }
  while (v7 != v8)
  {
    uint64_t v9 = *(void *)(a1 + 624);
    unsigned int v10 = *(_BYTE **)(a1 + 496);
    int v11 = getc(*(FILE **)(a1 + 568));
    if (v11 == -1)
    {
      if (v9) {
LABEL_13:
      }
        _platform_memset();
      LOBYTE(v9) = 1;
    }

    else
    {
      while (--v9)
      {
        *v10++ = v11;
        int v11 = getc(*(FILE **)(a1 + 568));
        if (v11 == -1) {
          goto LABEL_13;
        }
      }

      *unsigned int v10 = v11;
    }

    ++v7;
    if ((v9 & 1) != 0)
    {
      if (v7 < a2)
      {
        *(_DWORD *)(a1 + 636) |= 0x100u;
        return 1LL;
      }

      return 0LL;
    }
  }

  return 0LL;
}

uint64_t __rec_vpipe(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 616);
  if (v2 >= a2) {
    return 0LL;
  }
  int v5 = *(unsigned __int8 *)(a1 + 632);
  while (1)
  {
    unsigned int v7 = *(char **)(a1 + 496);
    uint64_t v6 = *(void *)(a1 + 504);
    int v8 = getc(*(FILE **)(a1 + 568));
    BOOL v9 = v8 == -1;
    if (v8 != -1 && v8 != v5)
    {
      char v11 = v8;
      do
      {
        if (!v6)
        {
          uint64_t v12 = *(void **)(a1 + 496);
          size_t v13 = *(void *)(a1 + 504) + 256LL;
          *(void *)(a1 + 504) = v13;
          unsigned int v14 = (char *)reallocf(v12, v13);
          *(void *)(a1 + 496) = v14;
          if (!v14) {
            return 0xFFFFFFFFLL;
          }
          unsigned int v7 = &v14[v7 - (_BYTE *)v12];
          uint64_t v6 = 256LL;
        }

        *v7++ = v11;
        --v6;
        int v15 = getc(*(FILE **)(a1 + 568));
        char v11 = v15;
        BOOL v9 = v15 == -1;
      }

      while (v15 != -1 && v15 != v5);
    }

    v19[0] = *(void *)(a1 + 496);
    v19[1] = (uint64_t)&v7[-v19[0]];
    if (v9) {
      break;
    }
    if (++v2 == a2) {
      return 0LL;
    }
  }

  *(_DWORD *)(a1 + 636) |= 0x100u;
  return 1LL;
}

uint64_t __rec_fmap(uint64_t a1, unsigned int a2)
{
  size_t v4 = *(void *)(a1 + 624);
  uint64_t v6 = a1 + 496;
  int v5 = *(void **)(a1 + 496);
  if (*(void *)(v6 + 8) < v4)
  {
    int v5 = reallocf(v5, v4);
    *(void *)(a1 + 496) = v5;
    if (!v5) {
      return 0xFFFFFFFFLL;
    }
    size_t v4 = *(void *)(a1 + 624);
    *(void *)(a1 + 504) = v4;
  }

  v16[0] = (uint64_t)v5;
  v16[1] = v4;
  unint64_t v7 = *(void *)(a1 + 584);
  unsigned int v8 = *(_DWORD *)(a1 + 616);
  if (v8 >= a2)
  {
LABEL_18:
    uint64_t result = 0LL;
    *(void *)(a1 + 584) = v7;
  }

  else
  {
    unint64_t v9 = *(void *)(a1 + 600);
    while (v7 < v9)
    {
      uint64_t v10 = *(void *)(a1 + 624);
      if (v10)
      {
        uint64_t v11 = 0LL;
        uint64_t v12 = *(void *)(a1 + 496);
        do
        {
          *(_BYTE *)(v12 + v11) = *(_BYTE *)(v7 + v11);
          uint64_t v13 = v11 + 1;
          BOOL v14 = v7 + v11 + 1 >= v9 || v10 - 1 == v11;
          ++v11;
        }

        while (!v14);
        v7 += v13;
        if (v10 != v13) {
          _platform_memset();
        }
      }

      if (++v8 == a2) {
        goto LABEL_18;
      }
    }

    *(_DWORD *)(a1 + 636) |= 0x100u;
    return 1LL;
  }

  return result;
}

uint64_t __rec_vmap(uint64_t a1, unsigned int a2)
{
  unint64_t v3 = *(void *)(a1 + 584);
  unsigned int v4 = *(_DWORD *)(a1 + 616);
  if (v4 >= a2)
  {
LABEL_10:
    uint64_t result = 0LL;
    *(void *)(a1 + 584) = v3;
  }

  else
  {
    uint64_t v6 = *(unsigned __int8 **)(a1 + 600);
    int v7 = *(unsigned __int8 *)(a1 + 632);
    while (1)
    {
      if (v3 >= (unint64_t)v6)
      {
        *(_DWORD *)(a1 + 636) |= 0x100u;
        return 1LL;
      }

      v11[0] = v3;
      unsigned int v8 = &v6[-v3];
      unint64_t v9 = (unsigned __int8 *)v3;
      while (*v9 != v7)
      {
        ++v9;
        if (!--v8)
        {
          unint64_t v9 = v6;
          break;
        }
      }

      v11[1] = (uint64_t)&v9[-v3];
      unint64_t v3 = (unint64_t)(v9 + 1);
      if (++v4 == a2) {
        goto LABEL_10;
      }
    }
  }

  return result;
}

MPOOL *__rec_open(uint64_t a1, char a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a1)
  {
    int v5 = open_NOCANCEL();
    if (v5 < 0) {
      return 0LL;
    }
    if (a4)
    {
LABEL_4:
      if (*(void *)a4 >= 8uLL)
      {
        uint64_t v12 = 0LL;
        goto LABEL_18;
      }

      uint64_t v27 = 0LL;
      int v10 = *(_DWORD *)(a4 + 12);
      int v28 = *(_DWORD *)(a4 + 8);
      uint64_t v29 = 0LL;
      int v30 = v10;
      uint64_t v31 = 0LL;
      uint64_t v32 = 0LL;
      int v33 = *(_DWORD *)(a4 + 16);
      uint64_t v11 = __bt_open(*(void *)(a4 + 40), 2, 384LL, &v27, a5);
      if (v11)
      {
        uint64_t v12 = v11;
        tqh_last = v11->hqh[2].tqh_last;
        if ((*(_BYTE *)a4 & 1) != 0)
        {
          *((_DWORD *)tqh_last + 159) |= 0x200u;
          BOOL v14 = *(_bkt **)(a4 + 24);
          tqh_last[78] = v14;
          if (!v14) {
            goto LABEL_18;
          }
        }

        char v15 = *(_BYTE *)(a4 + 32);
LABEL_12:
        *((_BYTE *)tqh_last + 632) = v15;
        int v17 = *((_DWORD *)tqh_last + 159);
        *((_DWORD *)tqh_last + 159) = v17 | 0x80;
        if (a1)
        {
          *((_DWORD *)tqh_last + 144) = v5;
          *__error() = 0;
          if (lseek(v5, 0LL, 1) == -1 && *__error() == 29)
          {
            if ((a2 & 3) == 0)
            {
              *((_DWORD *)tqh_last + 159) |= 0x2000u;
              goto LABEL_27;
            }

LABEL_18:
            *__error() = 22;
            int v18 = *__error();
            if (!v12) {
              goto LABEL_44;
            }
            goto LABEL_43;
          }

          if ((a2 & 3) != 2)
          {
            if ((a2 & 3) != 0) {
              goto LABEL_18;
            }
            *((_DWORD *)tqh_last + 159) |= 0x2000u;
          }

          if (fstat(v5, &v26)) {
            goto LABEL_42;
          }
          if (v26.st_size)
          {
LABEL_27:
            uint64_t v19 = fdopen_DARWIN_EXTSN(v5, "r");
            tqh_last[71] = (_bkt *)v19;
            if (v19)
            {
              int v20 = *((_DWORD *)tqh_last + 159);
              *((_DWORD *)tqh_last + 159) = v20 | 0x40;
              if ((v20 & 0x200) != 0) {
                uint64_t v21 = __rec_fpipe;
              }
              else {
                uint64_t v21 = __rec_vpipe;
              }
              tqh_last[70] = (_bkt *)v21;
LABEL_34:
              v12->lqh.tqh_last = (_bkt **)__rec_close;
              v12->hqh[0].tqh_first = (_bkt *)__rec_delete;
              v12->hqh[3].tqh_first = (_bkt *)__rec_fd;
              v12->hqh[0].tqh_last = (_bkt **)__rec_get;
              v12->hqh[1].tqh_first = (_bkt *)__rec_put;
              v12->hqh[1].tqh_last = (_bkt **)__rec_seq;
              v12->hqh[2].tqh_first = (_bkt *)__rec_sync;
              unsigned int v23 = mpool_get((MPOOL *)*tqh_last, 1u, 0);
              if (v23)
              {
                if ((v23[3] & 0x1F) == 2)
                {
                  v23[3] = v23[3] & 0xFFFFFFE0 | 0x10;
                  unsigned int v24 = 1;
                }

                else
                {
                  unsigned int v24 = 0;
                }

                mpool_put((MPOOL *)*tqh_last, v23, v24);
                if (!a4
                  || (*(_BYTE *)a4 & 4) == 0
                  || (*((_BYTE *)tqh_last + 637) & 9) != 0
                  || ((unsigned int (*)(_bkt **, uint64_t))tqh_last[70])(tqh_last, 0xFFFFFFFFLL) != -1)
                {
                  return v12;
                }
              }
            }

  int v20 = *__error();
  if (a3 != 2)
  {
    uint64_t v21 = *(void *)(a1 + 472);
    if (v21 != v6)
    {
      if (a3 == 1) {
        int v22 = -1;
      }
      else {
        int v22 = 1;
      }
      do
      {
        unsigned int v23 = *(_DWORD *)(v21 - 8);
        *(void *)(a1 + 472) = v21 - 8;
        unsigned int v24 = (unsigned __int16 *)mpool_get(*(MPOOL **)a1, v23, 0);
        if (!v24) {
          break;
        }
        uint64_t v25 = v24[*(unsigned __int16 *)(v21 - 4) + 10];
        *(_DWORD *)((char *)v24 + v25) += v22;
        mpool_put(*(MPOOL **)a1, v24, 1u);
        uint64_t v21 = *(void *)(a1 + 472);
      }

      while (v21 != v6);
    }
  }

  stat v26 = 0LL;
  *__error() = v20;
  return v26;
}

      unsigned int v8 = v6 - 1;
      do
      {
        int v10 = (char)*++v8;
        unint64_t v9 = v10;
      }

      while ((v10 - 48) < 0xA);
      *a1 = v8;
      if (v9) {
        return get_next_format_from_width(a1);
      }
    }

    else
    {
      *a1 = (unsigned __int8 *)(v4 + 1);
    }

    return 24LL;
  }

  if (a2)
  {
    *unint64_t v9 = 0;
    return (_DWORD)v9 - v4;
  }

  else
  {
LABEL_20:
    uint64_t v13 = __error();
    BOOL v14 = 28;
LABEL_22:
    char *v13 = v14;
    return -1;
  }

  if (a4)
  {
    if (v8)
    {
LABEL_22:
      if (a4 >= 1)
      {
        v8[(a4 >> 3) + 40] |= 1 << (a4 & 7);
        ++*((_DWORD *)v8 + 6);
        ++*((_DWORD *)v8 + 9);
      }

      goto LABEL_24;
    }

LABEL_42:
            int v18 = *__error();
LABEL_43:
            __bt_close(v12);
            goto LABEL_44;
          }

          int v22 = *((_DWORD *)tqh_last + 159) | 0x100;
        }

        else
        {
          int v22 = v17 | 0x980;
        }

        *((_DWORD *)tqh_last + 159) = v22;
        goto LABEL_34;
      }

      goto LABEL_21;
    }
  }

  else if (a4)
  {
    goto LABEL_4;
  }

  unsigned int v16 = __bt_open(0LL, 2, 384LL, 0LL, a5);
  if (v16)
  {
    uint64_t v12 = v16;
    tqh_last = v16->hqh[2].tqh_last;
    char v15 = 10;
    goto LABEL_12;
  }

      *uint64_t v12 = 0;
      stat v26 = *__error();
      if ((v41.c_lflag & 8) == 0) {
        write_NOCANCEL();
      }
      if (_platform_memcmp())
      {
        while (tcsetattr(v11, 18, (const termios *)&v40[1]) == -1 && *__error() == 4 && !dword_18C52C0D0)
          ;
      }

      sigaction(14, &v38, 0LL);
      sigaction(1, &v36, 0LL);
      sigaction(2, &v37, 0LL);
      sigaction(3, &v35, 0LL);
      sigaction(13, &v30, 0LL);
      sigaction(15, &v34, 0LL);
      sigaction(18, &v33, 0LL);
      sigaction(21, &v32, 0LL);
      sigaction(22, &v31, 0LL);
      if ((v29 & 1) == 0) {
        close_NOCANCEL();
      }
      uint64_t v19 = 0LL;
      int v20 = 0;
      do
      {
        if (signo[v19])
        {
          uint64_t v21 = getpid();
          kill(v21, v19);
          int v22 = ((1 << v19) & 0x640000) != 0 ? 1 : v20;
        }

        ++v19;
      }

      while (v19 != 32);
      int v7 = 0LL;
      if (!v20)
      {
        if (v26) {
          *__error() = v26;
        }
        if (NOCANCEL == -1) {
          return 0LL;
        }
        else {
          return a2;
        }
      }
    }

    if ((v6 & 2) != 0)
    {
      unsigned int v24 = __error();
      uint64_t result = 0LL;
      uint64_t v25 = 25;
      goto LABEL_72;
    }

uint64_t __rec_fd(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  unsigned int v2 = *(void **)(v1 + 32);
  if (v2)
  {
    mpool_put(*(MPOOL **)v1, v2, 0);
    *(void *)(v1 + 32) = 0LL;
  }

  if ((*(_BYTE *)(v1 + 637) & 8) == 0) {
    return *(unsigned int *)(v1 + 576);
  }
  *__error() = 2;
  return 0xFFFFFFFFLL;
}

uint64_t __rec_put(uint64_t a1, unsigned int **a2, uint64_t *a3, int a4)
{
  uint64_t v7 = *(void *)(a1 + 56);
  unsigned int v8 = *(void **)(v7 + 32);
  if (v8)
  {
    mpool_put(*(MPOOL **)v7, v8, 0);
    *(void *)(v7 + 32) = 0LL;
  }

  unint64_t v9 = a3[1];
  if ((*(_BYTE *)(v7 + 637) & 2) == 0 || (size_t v10 = *(void *)(v7 + 624), v9 == v10))
  {
    v20[0] = *a3;
    goto LABEL_6;
  }

  if (v9 > v10)
  {
LABEL_34:
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }

  if (*(void *)(v7 + 504) < v10)
  {
    uint64_t v12 = reallocf(*(void **)(v7 + 496), v10);
    *(void *)(v7 + 496) = v12;
    if (v12)
    {
      *(void *)(v7 + 504) = *(void *)(v7 + 624);
      goto LABEL_13;
    }

    return 0xFFFFFFFFLL;
  }

uint64_t __rec_iput(uint64_t a1, unsigned int a2, uint64_t *a3, int a4)
{
  int v5 = a3;
  if (a3[1] <= (unint64_t)*(unsigned __int16 *)(a1 + 524))
  {
    char v10 = 0;
  }

  else
  {
    uint64_t result = __ovfl_put(a1, a3, &v22);
    if ((_DWORD)result == -1) {
      return result;
    }
    v23[0] = v24;
    v23[1] = 8LL;
    uint64_t v9 = v5[1];
    v24[0] = v22;
    v24[1] = v9;
    int v5 = v23;
    char v10 = 1;
  }

  if (*(_DWORD *)(a1 + 616) < a2 || (a4 & 0xFFFFFFFE) == 4) {
    int v12 = 1;
  }
  else {
    int v12 = 2;
  }
  uint64_t v13 = __rec_search(a1, a2, v12);
  if (!v13) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v14 = *(unsigned __int16 **)v13;
  int v15 = *(unsigned __int16 *)(v13 + 8);
  if (a4 == 5) {
    goto LABEL_17;
  }
  if (a4 == 4)
  {
    LOWORD(v15) = v15 + 1;
    goto LABEL_17;
  }

  if (*(_DWORD *)(a1 + 616) > a2 && __rec_dleaf(a1, v14, v15) == -1)
  {
    mpool_put(*(MPOOL **)a1, v14, 0);
    return 0xFFFFFFFFLL;
  }

LABEL_17:
  int v16 = *((_DWORD *)v5 + 2);
  uint64_t v17 = (v16 & 0xFFFFFFFC) + 8;
  int v18 = v14[9];
  int v19 = v14[8];
  if ((v18 - v19) >= (v17 | 2uLL))
  {
    if ((unsigned __int16)((v19 + 131052) >> 1) > (unsigned __int16)v15)
    {
      _platform_memmove();
      LOWORD(v19) = v14[8];
      LOWORD(v18) = v14[9];
      int v16 = *((_DWORD *)v5 + 2);
    }

    v14[8] = v19 + 2;
    unsigned __int16 v20 = v18 - v17;
    v14[9] = v20;
    v14[(unsigned __int16)v15 + 10] = v20;
    uint64_t v21 = (char *)v14 + v20;
    *(_DWORD *)uint64_t v21 = v16;
    v21[4] = v10;
    _platform_memmove();
    ++*(_DWORD *)(a1 + 616);
    *(_DWORD *)(a1 + 636) |= 4u;
    mpool_put(*(MPOOL **)a1, v14, 1u);
    return 0LL;
  }

  else
  {
    uint64_t result = __bt_split(a1, v14, 0LL, (uint64_t)v5, v10, (v16 & 0xFFFCu) + 8, v15);
    if (!(_DWORD)result) {
      ++*(_DWORD *)(a1 + 616);
    }
  }

  return result;
}

      unsigned int v8 = mpool_get(*(MPOOL **)a1, v10, 0);
      if (!v8) {
        goto LABEL_18;
      }
    }

    uint64_t v17 = -1;
LABEL_14:
    int v18 = *(unsigned __int16 *)&v8[2 * v16 + 20];
    *(_DWORD *)&v8[v18] += v17;
    int v19 = 1;
LABEL_16:
    mpool_put(*(MPOOL **)a1, v8, v19);
    goto LABEL_17;
  }

      uint64_t v17 = *a3;
      uint64_t v57 = *(_DWORD *)(a2 + 36);
      int v18 = *(_WORD *)(a2 + 40);
      if ((v18 & 0x7801) != 0 || (v18 & 8) != 0)
      {
        unsigned __int16 v20 = *v17;
        if ((*v17 & 0x8000000000000000LL) == 0)
        {
          uint64_t v13 = 0;
          int v16 = 0;
          goto LABEL_47;
        }

        uint64_t v13 = 0;
        int v16 = 0;
        unsigned __int16 v20 = -(uint64_t)v20;
      }

      else if ((v18 & 4) != 0)
      {
        unint64_t v54 = *(_DWORD *)v17;
        uint64_t v13 = 0;
        int v16 = 0;
        if (((v54 << 16) & 0x80000000) == 0)
        {
          int v19 = (unsigned __int16)v54;
          int v15 = 10;
          unsigned int v14 = &__lowercase_hex;
          goto LABEL_129;
        }

        unsigned __int16 v20 = -(__int16)v54;
      }

      else
      {
        int v19 = *(_DWORD *)v17;
        if ((v18 & 2) != 0)
        {
          if (((v19 << 24) & 0x80000000) == 0)
          {
            int v16 = 0;
            uint64_t v13 = 0;
            unsigned int v14 = &__lowercase_hex;
            int v15 = 10;
            goto LABEL_35;
          }

          uint64_t v13 = 0;
          int v16 = 0;
          unsigned __int16 v20 = -(char)v19;
        }

        else
        {
          if ((v19 & 0x80000000) == 0)
          {
            int v16 = 0;
            uint64_t v13 = 0;
            unsigned int v14 = &__lowercase_hex;
            int v15 = 10;
            goto LABEL_129;
          }

          uint64_t v13 = 0;
          int v16 = 0;
          unsigned __int16 v20 = -v19;
        }
      }

      uint64_t v57 = 45;
      goto LABEL_47;
    }

    if ((_DWORD)v12 == 117)
    {
LABEL_26:
      int v16 = 0;
      uint64_t v13 = 0;
      unsigned int v14 = &__lowercase_hex;
      int v15 = 10;
      goto LABEL_31;
    }

    if ((_DWORD)v12 != 120) {
      goto LABEL_137;
    }
    int v16 = 0;
    unsigned int v14 = &__lowercase_hex;
LABEL_30:
    int v15 = 16;
    uint64_t v13 = 1;
    goto LABEL_31;
  }

  if ((int)v12 > 87)
  {
    if ((_DWORD)v12 != 88)
    {
      if ((_DWORD)v12 != 100) {
        goto LABEL_137;
      }
      goto LABEL_17;
    }

    int v16 = 0;
    unsigned int v14 = &__uppercase_hex;
    goto LABEL_30;
  }

  if ((_DWORD)v12 != 79)
  {
    if ((_DWORD)v12 != 85) {
LABEL_137:
    }
      __printf_render_int_cold_1(v12);
    goto LABEL_26;
  }

uint64_t __rec_search(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6 = a1 + 72;
  *(void *)(a1 + 472) = a1 + 72;
  uint64_t v7 = mpool_get(*(MPOOL **)a1, 1u, 0);
  if (v7)
  {
    unsigned int v8 = v7;
    uint64_t v9 = 0LL;
    pgno_t v10 = 1;
    while (1)
    {
      if ((v8[12] & 0x10) != 0)
      {
        *(void *)(a1 + 16) = v8;
        uint64_t v26 = a1 + 16;
        *(_WORD *)(v26 + 8) = a2 - v9;
        return v26;
      }

      LOWORD(v11) = 0;
      unsigned int v12 = *((unsigned __int16 *)v8 + 8) + 131052;
      uint64_t v13 = v9;
      while (1)
      {
        uint64_t v9 = v13;
        unsigned int v14 = &v8[*(unsigned __int16 *)&v8[2 * (unsigned __int16)v11 + 20]];
        LOWORD(v11) = v11 + 1;
        uint64_t v13 = (*v14 + v13);
      }

      unsigned int v11 = v12 >> 1;
LABEL_9:
      uint64_t v15 = *(void *)(a1 + 472);
      *(_DWORD *)uint64_t v15 = v10;
      uint64_t v16 = (unsigned __int16)v11 - 1LL;
      *(_WORD *)(v15 + 4) = v16;
      *(void *)(a1 + 472) = v15 + 8;
      pgno_t v10 = v14[1];
      if (!a3) {
        break;
      }
      if (a3 == 2)
      {
        unsigned int v19 = 0;
        goto LABEL_16;
      }

      if (a3 == 1)
      {
        int v17 = 1;
        goto LABEL_14;
      }

uint64_t __rec_seq(uint64_t a1, void *a2, void *a3, int a4)
{
  uint64_t v7 = *(void *)(a1 + 56);
  unsigned int v8 = *(void **)(v7 + 32);
  if (v8)
  {
    mpool_put(*(MPOOL **)v7, v8, 0);
    *(void *)(v7 + 32) = 0LL;
  }

  int v9 = a4 - 1;
  uint64_t v10 = 1LL;
  switch(v9)
  {
    case 0:
      uint64_t v10 = *(unsigned int *)*a2;
      if ((_DWORD)v10) {
        goto LABEL_13;
      }
      goto LABEL_5;
    case 2:
      goto LABEL_13;
    case 5:
      goto LABEL_9;
    case 6:
      if ((*(_BYTE *)(v7 + 68) & 8) != 0) {
        uint64_t v10 = (*(_DWORD *)(v7 + 64) + 1);
      }
      goto LABEL_13;
    case 8:
      if ((*(_BYTE *)(v7 + 68) & 8) != 0)
      {
        int v12 = *(_DWORD *)(v7 + 64);
        uint64_t v10 = (v12 - 1);
        if (v12 == 1) {
          return 1LL;
        }
      }

      else
      {
LABEL_9:
        if ((*(_BYTE *)(v7 + 637) & 9) == 0)
        {
          uint64_t v11 = 0xFFFFFFFFLL;
        }

        uint64_t v10 = *(unsigned int *)(v7 + 616);
      }

uint64_t __rec_ret(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5)
{
  if (a4)
  {
    uint64_t v10 = *(_DWORD **)(a1 + 480);
    if (*(void *)(a1 + 488) <= 3uLL)
    {
      uint64_t v10 = realloc(v10, 4uLL);
      if (!v10) {
        return 0xFFFFFFFFLL;
      }
      *(void *)(a1 + 480) = v10;
      *(void *)(a1 + 488) = 4LL;
    }

    *uint64_t v10 = a3;
    *a4 = *(void *)(a1 + 480);
    a4[1] = 4LL;
  }

  if (!a5) {
    return 0LL;
  }
  uint64_t v11 = (unsigned int *)(*(void *)a2 + *(unsigned __int16 *)(*(void *)a2 + 2LL * *(unsigned __int16 *)(a2 + 8) + 20));
  if ((v11[1] & 1) != 0)
  {
    if (!__ovfl_get( a1,  (unsigned int *)((char *)v11 + 5),  a5 + 1,  (void **)(a1 + 496),  (size_t *)(a1 + 504)))
    {
      unsigned int v13 = *(char **)(a1 + 496);
      goto LABEL_18;
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v12 = *v11;
  if ((*(_BYTE *)(a1 + 637) & 0x40) != 0)
  {
    size_t v15 = (v12 + 1);
    if (*(void *)(a1 + 504) >= v15)
    {
LABEL_16:
      _platform_memmove();
      a5[1] = *v11;
      unsigned int v13 = *(char **)(a1 + 496);
      goto LABEL_18;
    }

    uint64_t v16 = realloc(*(void **)(a1 + 496), v15);
    if (v16)
    {
      int v17 = *v11;
      *(void *)(a1 + 496) = v16;
      *(void *)(a1 + 504) = (v17 + 1);
      goto LABEL_16;
    }

    return 0xFFFFFFFFLL;
  }

  a5[1] = v12;
  unsigned int v13 = (char *)v11 + 5;
LABEL_18:
  uint64_t result = 0LL;
  *a5 = v13;
  return result;
}

int timingsafe_bcmp(const void *__b1, const void *__b2, size_t __len)
{
  if (!__len) {
    return 0;
  }
  unsigned __int8 v3 = 0;
  do
  {
    char v5 = *(_BYTE *)__b1;
    __b1 = (char *)__b1 + 1;
    char v4 = v5;
    char v6 = *(_BYTE *)__b2;
    __b2 = (char *)__b2 + 1;
    v3 |= v6 ^ v4;
    --__len;
  }

  while (__len);
  return (v3 + 255) >> 8;
}

_DWORD *__hdtoa(uint64_t a1, unsigned int a2, _DWORD *a3, _DWORD *a4, void *a5, double a6)
{
  double v10 = a6;
  double v11 = a6;
  *a4 = *(void *)&a6 >> 63;
  int v12 = __fpclassifyd(a6);
  int v13 = -1022;
  switch(v12)
  {
    case 1:
      *a3 = 0x7FFFFFFF;
      BOOL v14 = "NaN";
      size_t v15 = a5;
      unsigned int v16 = 3;
      return __nrv_alloc_D2A((unsigned __int8 *)v14, v15, v16);
    case 2:
      *a3 = 0x7FFFFFFF;
      BOOL v14 = "Infinity";
      size_t v15 = a5;
      unsigned int v16 = 8;
      return __nrv_alloc_D2A((unsigned __int8 *)v14, v15, v16);
    case 3:
      goto LABEL_5;
    case 4:
      goto LABEL_8;
    case 5:
      if (v10 != 0.0)
      {
        double v10 = v10 * 5.36312317e154;
        double v11 = v10;
        int v13 = -1536;
LABEL_8:
        *a3 = ((*(void *)&v11 >> 52) & 0x7FF) + v13;
        if (a2 <= 1) {
          int v18 = 1;
        }
        else {
          int v18 = a2;
        }
        if (v18 <= 14) {
          unsigned int v19 = 14;
        }
        else {
          unsigned int v19 = v18;
        }
        int v20 = __rv_alloc_D2A(v19);
        if (v19 >= 0xF) {
          _platform_bzero();
        }
        unint64_t v21 = 13LL;
        do
        {
          *((_BYTE *)v20 + v21) = LOBYTE(v10) & 0xF;
          unint64_t v22 = *(void *)&v10 & 0xFFFFFFFF00000000LL | (LODWORD(v10) >> 4);
          double v10 = *(double *)&v22;
          unint64_t v23 = v21 - 1;
        }

        while (v21-- > 6);
        uint64_t v25 = (char *)v20 + v23;
        do
        {
          *v25-- = BYTE4(v22) & 0xF;
          uint64_t v26 = (v22 >> 4) & 0xFFFF00000000LL;
          unint64_t v22 = v26 | v22 & 0xFFF00000FFFFFFFFLL;
        }

        while (v25 > (_BYTE *)v20);
        *uint64_t v25 = BYTE4(v26) | 1;
        if (v18 < 0)
        {
          uint64_t v27 = 13LL;
          int v18 = v27 + 2;
        }

        if (v18 >= 14)
        {
          uint64_t v29 = v18;
        }

        else
        {
          uint64_t v29 = v18;
          int v30 = (char *)v20 + v18;
          int v31 = *v30;
          if (*v30)
          {
            unsigned int v32 = ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0)) + 0x400000) >> 22) & 3;
            if (v32 == 3)
            {
              if ((v22 & 0x8000000000000000LL) != 0)
              {
                int v39 = *(v30 - 1);
                int v33 = v30 - 1;
                LOBYTE(v34) = v39;
                if (v39 == 15)
                {
                  uint64_t v36 = v18 - 1LL;
                  do
                  {
                    if (!v36) {
                      goto LABEL_58;
                    }
                    *((_BYTE *)v20 + v36) = 0;
                    int v34 = *((unsigned __int8 *)v20 + --v36);
                  }

                  while (v34 == 15);
LABEL_53:
                  int v33 = (char *)v20 + v36;
                }

                goto LABEL_54;
              }
            }

            else
            {
              if (v32 != 2)
              {
                int v35 = *(v30 - 1);
                int v33 = v30 - 1;
                LOBYTE(v34) = v35;
                if (v35 == 15)
                {
                  uint64_t v36 = v18 - 1LL;
                  while (v36)
                  {
                    *((_BYTE *)v20 + v36) = 0;
                    int v34 = *((unsigned __int8 *)v20 + --v36);
                    if (v34 != 15) {
                      goto LABEL_53;
                    }
                  }

LABEL_36:
        int v37 = (char *)v20 + v29;
        if (a5) {
          *a5 = v37;
        }
        *int v37 = 0;
        for (int i = v37 - 1; i >= (_BYTE *)v20; --i)
          *int i = *(_BYTE *)(a1 + (char)*i);
        return v20;
      }

    if (!*a1) {
      return 1LL;
    }
LABEL_37:
    a2 = v24;
    a1 = v7;
    if (!v7) {
      return 0LL;
    }
  }

_DWORD *__rv_alloc_D2A(unsigned int a1)
{
  if (a1 >= 0x1C)
  {
    int v1 = 0;
    int v2 = 4;
    do
    {
      ++v1;
      v2 *= 2;
    }

    while (v2 + 24LL <= (unint64_t)(int)a1);
  }

  else
  {
    int v1 = 0;
  }

  unsigned __int8 v3 = __Balloc_D2A(v1);
  *unsigned __int8 v3 = v1;
  return v3 + 1;
}

_DWORD *__nrv_alloc_D2A(unsigned __int8 *a1, void *a2, unsigned int a3)
{
  uint64_t result = __rv_alloc_D2A(a3);
  int v6 = *a1;
  *(_BYTE *)uint64_t result = v6;
  uint64_t v7 = result;
  if (v6)
  {
    unsigned int v8 = a1 + 1;
    uint64_t v7 = result;
    do
    {
      int v9 = *v8++;
      *((_BYTE *)v7 + 1) = v9;
      uint64_t v7 = (_DWORD *)((char *)v7 + 1);
    }

    while (v9);
  }

  if (a2) {
    *a2 = v7;
  }
  return result;
}

void __freedtoa(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 - 4);
  int v1 = (int *)(a1 - 4);
  v1[2] = v2;
  v1[3] = 1 << v2;
  __Bfree_D2A(v1);
}

uint64_t __quorem_D2A(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 20);
  if (*(_DWORD *)(a1 + 20) < v2) {
    return 0LL;
  }
  char v5 = (unsigned int *)(a2 + 24);
  int v6 = v2 - 1;
  uint64_t v7 = (unsigned int *)(a2 + 24 + 4LL * (v2 - 1));
  unsigned int v8 = (unsigned int *)(a1 + 24);
  int v9 = (unsigned int *)(a1 + 24 + 4LL * (v2 - 1));
  unsigned int v10 = *v7 + 1;
  uint64_t v3 = *v9 / v10;
  if (v10 <= *v9)
  {
    uint64_t v11 = 0LL;
    unint64_t v12 = 0LL;
    int v13 = (_DWORD *)(a1 + 24);
    BOOL v14 = (unsigned int *)(a2 + 24);
    do
    {
      unsigned int v15 = *v14++;
      unint64_t v16 = v12 + v15 * (unint64_t)v3;
      unint64_t v12 = HIDWORD(v16);
      uint64_t v17 = v11 - v16 + *v13;
      uint64_t v11 = v17 >> 32;
      *v13++ = v17;
    }

    while (v14 <= v7);
    if (!*v9)
    {
      while (--v9 > v8 && !*v9)
        --v6;
      *(_DWORD *)(a1 + 20) = v6;
    }
  }

  if ((__cmp_D2A(a1, a2) & 0x80000000) == 0)
  {
    uint64_t v18 = 0LL;
    unsigned int v19 = v8;
    do
    {
      unsigned int v20 = *v5++;
      uint64_t v21 = v18 - v20 + *v19;
      uint64_t v18 = v21 >> 32;
      *v19++ = v21;
    }

    while (v5 <= v7);
    uint64_t v3 = (v3 + 1);
    unint64_t v22 = &v8[v6];
    if (!*v22)
    {
      while (--v22 > v8 && !*v22)
        --v6;
      *(_DWORD *)(a1 + 20) = v6;
    }
  }

  return v3;
}

char *__dtoa(unsigned int a1, int a2, _DWORD *a3, _DWORD *a4, char **a5, double a6)
{
  int v6 = a5;
  int StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0));
  double v10 = fabs(a6);
  if (a6 >= 0.0) {
    double v11 = a6;
  }
  else {
    double v11 = v10;
  }
  *a4 = *(void *)&a6 >> 63;
  uint64_t v12 = HIDWORD(*(void *)&a6) & 0x7FFFFFFFLL;
  if ((~(_DWORD)v12 & 0x7FF00000) == 0)
  {
    *a3 = 9999;
    if (LODWORD(a6) || (HIDWORD(a6) & 0xFFFFF) != 0)
    {
      int v13 = "NaN";
      BOOL v14 = a5;
      unsigned int v15 = 3;
    }

    else
    {
      int v13 = "Infinity";
      BOOL v14 = a5;
      unsigned int v15 = 8;
    }

    return (char *)__nrv_alloc_D2A((unsigned __int8 *)v13, v14, v15);
  }

  if (v11 == 0.0)
  {
    *a3 = 1;
    int v13 = "0";
    BOOL v14 = a5;
    unsigned int v15 = 1;
    return (char *)__nrv_alloc_D2A((unsigned __int8 *)v13, v14, v15);
  }

  signed int v18 = ((StatusReg + 0x400000) >> 22) & 3;
  int v19 = 2 * (v18 == 2);
  if (a6 < 0.0) {
    int v19 = 2 * (v18 != 2);
  }
  if (v18 >= 2) {
    signed int v18 = v19;
  }
  int v146 = v18;
  unsigned int v20 = __d2b_D2A(&v149, &v150, v11);
  v140 = a3;
  if (v12 >= 0x100000)
  {
    uint64_t v22 = *(void *)&a6 & 0xFFFFFFFFFFFFFLL | 0x3FF0000000000000LL;
    signed int v23 = (v12 >> 20) - 1023;
  }

  else
  {
    unsigned int v21 = LODWORD(a6) << (-18 - (v149 + v150));
    if (v149 + v150 >= -1041) {
      unsigned int v21 = ((_DWORD)v12 << (14 - (v149 + v150))) | (LODWORD(a6) >> (v149 + v150 + 18));
    }
    uint64_t v22 = COERCE__INT64((double)v21) - 0x1F0000000000000LL;
    signed int v23 = v149 + v150 - 1;
  }

  double v25 = (*(double *)&v22 + -1.5) * 0.289529655 + 0.176091259 + (double)v23 * 0.301029996;
  int v26 = (int)v25;
  BOOL v27 = v25 < 0.0;
  unsigned int v28 = v26 - v27;
  if ((v26 - v27) <= 0x16)
  {
    int v29 = v26 - v27;
    if (v11 < __tens_D2A[v28]) {
      int v29 = v28 - 1;
    }
  }

  else
  {
    int v29 = v26 - v27;
  }

  int v30 = v150 + ~v23;
  int v31 = v30 & ~(v30 >> 31);
  if (v30 < 0) {
    int v32 = -v30;
  }
  else {
    int v32 = 0;
  }
  if (v29 < 0) {
    int v33 = -v29;
  }
  else {
    int v33 = 0;
  }
  if (v29 >= 0) {
    v31 += v29;
  }
  int v144 = v31;
  if (v29 >= 0) {
    int v34 = v29;
  }
  else {
    int v34 = 0;
  }
  if (v29 < 0) {
    v32 -= v29;
  }
  int v141 = v32;
  if (a1 <= 9) {
    unsigned int v35 = a1;
  }
  else {
    unsigned int v35 = 0;
  }
  if (v35 >= 6) {
    unsigned int v36 = v35 - 4;
  }
  else {
    unsigned int v36 = v35;
  }
  int v37 = 1;
  int v147 = v29;
  unsigned int v148 = v36;
  int v136 = v34;
  switch(v36)
  {
    case 0u:
    case 1u:
      int v137 = 0;
      signed int v23 = 18;
      goto LABEL_49;
    case 2u:
      int v37 = 0;
      goto LABEL_51;
    case 3u:
      int v37 = 0;
      goto LABEL_55;
    case 4u:
LABEL_51:
      if (a2 <= 1) {
        a2 = 1;
      }
      signed int v23 = a2;
      int v137 = a2;
      int v138 = a2;
      break;
    case 5u:
LABEL_55:
      int v137 = a2;
      int v38 = v29 + a2;
      a2 += v29 + 1;
      int v138 = v38;
      if (a2 > 1) {
        signed int v23 = v38 + 1;
      }
      else {
        signed int v23 = 1;
      }
      break;
    default:
      int v137 = a2;
LABEL_49:
      a2 = -1;
      int v138 = -1;
      break;
  }

  int v143 = (char *)__rv_alloc_D2A(v23);
  int v39 = v147;
  BOOL v40 = v146 != 1 && v148 > 1;
  if (v40) {
    int v41 = 0;
  }
  else {
    int v41 = v37;
  }
  if (v35 <= 5 && a2 <= 0xE && v146 == 1)
  {
    int v42 = v147 - 1;
    if (v147 < 1)
    {
      if (v147)
      {
        double v46 = v11 * __tens_D2A[-v147 & 0xF];
        if (-v147 >= 0x10)
        {
          unsigned int v73 = -v147 >> 4;
          int v44 = 2;
          unint64_t v74 = (double *)&__bigtens_D2A;
          do
          {
            if ((v73 & 1) != 0)
            {
              ++v44;
              double v46 = v46 * *v74;
            }

            ++v74;
            BOOL v40 = v73 > 1;
            v73 >>= 1;
          }

          while (v40);
        }

        else
        {
          int v44 = 2;
        }
      }

      else
      {
        int v44 = 2;
        double v46 = v11;
      }
    }

    else
    {
      if ((v147 & 0x100) != 0)
      {
        unsigned int v43 = v147 >> 4;
        double v45 = v11 / 1.0e256;
        int v44 = 3;
      }

      else
      {
        unsigned int v43 = v147 >> 4;
        int v44 = 2;
        double v45 = v11;
      }

      double v47 = __tens_D2A[v147 & 0xF];
      if (v43)
      {
        unsigned int v48 = (double *)&__bigtens_D2A;
        do
        {
          if ((v43 & 1) != 0)
          {
            ++v44;
            double v47 = v47 * *v48;
          }

          ++v48;
          BOOL v40 = v43 > 1;
          v43 >>= 1;
        }

        while (v40);
      }

      double v46 = v45 / v47;
    }

    if (v28 < 0x17 || (v46 < 1.0 ? (BOOL v49 = a2 < 1) : (BOOL v49 = 1), v49))
    {
      int v50 = a2;
      int v42 = v147;
LABEL_88:
      *(void *)&double v51 = COERCE__INT64((double)v44 * v46 + 7.0) - 0x340000000000000LL;
      double v52 = v51;
      if (v50)
      {
        double v53 = __tens_D2A[v50 - 1];
        int i = v143 + 1;
        int v55 = (int)v46;
        if (v41)
        {
          double v56 = 0.5 / v53 - v52;
          double v57 = v46 - (double)v55;
          *int v143 = v55 + 48;
          if (v57 >= v56)
          {
            if (v50 <= 1) {
              int v58 = 1;
            }
            else {
              int v58 = v50;
            }
            int v59 = v58 - 1;
            while (1.0 - v57 >= v56)
            {
              if (!v59) {
                goto LABEL_125;
              }
              double v56 = v56 * 10.0;
              double v60 = v57 * 10.0;
              int v61 = (int)v60;
              double v57 = v60 - (double)(int)v60;
              *i++ = v61 + 48;
              --v59;
              if (v57 < v56) {
                goto LABEL_98;
              }
            }

LABEL_112:
            int v39 = v42;
            uint64_t v62 = v140;
            unint64_t v63 = v143;
LABEL_159:
            __int128 v92 = v63 + 1;
            uint64_t v93 = i - 1;
            while (1)
            {
              int v94 = *v93;
              if (v94 != 57) {
                break;
              }
              BOOL v69 = v93-- == v63;
              if (v69)
              {
                int v147 = v39 + 1;
                *unint64_t v63 = 48;
                char v95 = 49;
                uint64_t v93 = v63;
                goto LABEL_198;
              }
            }

            int v147 = v39;
            char v95 = v94 + 1;
            __int128 v92 = v93 + 1;
LABEL_198:
            *uint64_t v93 = v95;
            int i = v92;
            goto LABEL_291;
          }

LABEL_98:
          int v147 = v42;
          uint64_t v62 = v140;
LABEL_99:
          unint64_t v63 = v143;
          goto LABEL_291;
        }

        double v67 = v53 * v52;
        double v68 = v46 - (double)v55;
        *int v143 = v55 + 48;
        BOOL v69 = v68 == 0.0 || v50 == 1;
        if (!v69)
        {
          uint64_t v70 = 0LL;
          do
          {
            double v71 = v68 * 10.0;
            int v72 = (int)v71;
            double v68 = v71 - (double)(int)v71;
            if (v68 == 0.0) {
              int v50 = v70 + 2;
            }
            i[v70++] = v72 + 48;
          }

          while ((_DWORD)v70 + 1 != v50);
          i += v70;
        }

        if (v68 > v67 + 0.5) {
          goto LABEL_112;
        }
        if (v68 < 0.5 - v67)
        {
          ++i;
          uint64_t v62 = v140;
          do
          {
            int v75 = *(i - 2);
            --i;
          }

          while (v75 == 48);
          int v147 = v42;
          goto LABEL_99;
        }
      }

      else
      {
        double v64 = v46 + -5.0;
        if (v64 > v51)
        {
          uint64_t v65 = 0LL;
          uint64_t v66 = 0LL;
          int v39 = v42;
          unint64_t v63 = v143;
          goto LABEL_210;
        }

        if (v64 < -v51)
        {
          uint64_t v65 = 0LL;
          uint64_t v66 = 0LL;
          goto LABEL_256;
        }
      }

      goto LABEL_125;
    }

    if (v138 >= 1)
    {
      double v46 = v46 * 10.0;
      ++v44;
      int v50 = v138;
      goto LABEL_88;
    }
  }

LABEL_125:
  if (v147 <= 14 && (v149 & 0x80000000) == 0)
  {
    double v76 = __tens_D2A[v147];
    if ((v137 & 0x80000000) == 0 || a2 >= 1)
    {
      int v82 = a2 - 1;
      unint64_t v63 = v143;
      int i = v143 + 1;
      uint64_t v62 = v140;
      while (1)
      {
        int v83 = (int)(v11 / v76);
        double v84 = v11 - (double)v83 * v76;
        double v85 = -0.0;
        if (v84 < 0.0) {
          double v85 = v76;
        }
        char v86 = v83 - (v84 < 0.0);
        double v87 = v84 + v85;
        *(i - 1) = v86 + 48;
        if (v87 == 0.0) {
          goto LABEL_291;
        }
        if (!v82)
        {
          if (v148 < 2) {
            goto LABEL_158;
          }
          if (!v146) {
            goto LABEL_291;
          }
          if (v146 != 2)
          {
LABEL_158:
            if (v87 + v87 <= v76 && (v87 + v87 != v76 || (v86 & 1) == 0)) {
              goto LABEL_291;
            }
          }

          goto LABEL_159;
        }

        double v11 = v87 * 10.0;
        --v82;
        ++i;
      }
    }

    uint64_t v65 = 0LL;
    if ((a2 & 0x80000000) == 0)
    {
      uint64_t v66 = 0LL;
      unint64_t v63 = v143;
      if (v11 <= v76 * 5.0) {
        goto LABEL_257;
      }
LABEL_210:
      int v112 = 0LL;
      *unint64_t v63 = 49;
      int i = v63 + 1;
      int v147 = v39 + 1;
      goto LABEL_285;
    }

    uint64_t v66 = 0LL;
LABEL_256:
    unint64_t v63 = v143;
LABEL_257:
    int v112 = 0LL;
    int v147 = ~v137;
    int i = v63;
    goto LABEL_285;
  }

  int v135 = v41;
  if (v41)
  {
    int v77 = v149 + 1075;
    int v78 = v77 + v141;
    v144 += v77;
    int v79 = __i2b_D2A(1);
    int v80 = v141;
    uint64_t v81 = v79;
  }

  else
  {
    uint64_t v81 = 0LL;
    int v80 = v141;
    int v78 = v141;
  }

  if (v80 >= 1 && v144 >= 1)
  {
    int v88 = v80;
    if (v80 >= v144) {
      int v80 = v144;
    }
    v78 -= v80;
    int v141 = v88 - v80;
    v144 -= v80;
  }

  int v89 = v135;
  if (v33 >= 1)
  {
    if (v135)
    {
      uint64_t v81 = __pow5mult_D2A(v81, v33);
      __int128 v90 = __mult_D2A(v81, v20);
      __Bfree_D2A(v20);
      unsigned int v20 = v90;
      int v89 = v135;
    }

    else
    {
      unsigned int v20 = __pow5mult_D2A(v20, v33);
    }
  }

  int v96 = __i2b_D2A(1);
  uint64_t v66 = v96;
  int v97 = v136;
  if (v136 >= 1)
  {
    uint64_t v98 = __pow5mult_D2A(v96, v136);
    int v97 = v136;
    uint64_t v66 = v98;
  }

  BOOL v102 = ((int)v148 < 2 || v89 != 0) && v146 == 1 && (v12 & 0xFFFFF | LODWORD(a6)) == 0 && (v12 & 0x7FE00000) != 0;
  int v103 = v144 + v102;
  if (v97) {
    int v104 = 32 - __hi0bits_D2A(v66[v66[5] + 5]);
  }
  else {
    LOBYTE(v104) = 1;
  }
  int v105 = v78 + v102;
  char v106 = v104 + v103;
  if ((v106 & 0x1F) != 0) {
    unsigned int v107 = 32 - (v106 & 0x1F);
  }
  else {
    unsigned int v107 = 0;
  }
  if (v107 < 5)
  {
    uint64_t v65 = v81;
    if (v107 != 4)
    {
      unsigned int v109 = v107 + 28;
      v105 += v109;
      v141 += v109;
      v103 += v109;
    }
  }

  else
  {
    unsigned int v108 = v107 - 4;
    v105 += v108;
    v141 += v108;
    v103 += v108;
    uint64_t v65 = v81;
  }

  if (v105 >= 1) {
    unsigned int v20 = __lshift_D2A(v20, v105);
  }
  if (v103 >= 1) {
    uint64_t v66 = __lshift_D2A(v66, v103);
  }
  unsigned int v110 = v148;
  int v111 = v138;
  if (v28 < 0x17)
  {
    int v111 = a2;
    unint64_t v63 = v143;
  }

  else
  {
    if ((__cmp_D2A((uint64_t)v20, (uint64_t)v66) & 0x80000000) != 0)
    {
      --v147;
      unsigned int v20 = __multadd_D2A(v20, 10, 0);
      if (v135) {
        uint64_t v65 = __multadd_D2A(v65, 10, 0);
      }
    }

    else
    {
      int v111 = a2;
    }

    unint64_t v63 = v143;
    unsigned int v110 = v148;
  }

  if (v111 <= 0 && (v110 == 5 || v110 == 3))
  {
    if (v111 < 0) {
      goto LABEL_257;
    }
    uint64_t v66 = __multadd_D2A(v66, 5, 0);
    int v113 = __cmp_D2A((uint64_t)v20, (uint64_t)v66);
    int v39 = v147;
    if (v113 <= 0) {
      goto LABEL_257;
    }
    goto LABEL_210;
  }

  if (!v135)
  {
    v145 = v65;
    if (v111 <= 1) {
      int v114 = 1;
    }
    else {
      int v114 = v111;
    }
    int v115 = v114 - 1;
    for (int i = v63 + 1; ; ++i)
    {
      char v116 = __quorem_D2A((uint64_t)v20, (uint64_t)v66) + 48;
      *(i - 1) = v116;
      if (!v20[6] && v20[5] < 2)
      {
        int v112 = 0LL;
LABEL_267:
        uint64_t v65 = v145;
        goto LABEL_285;
      }

      if (!v115) {
        break;
      }
      unsigned int v20 = __multadd_D2A(v20, 10, 0);
      --v115;
    }

    int v112 = 0LL;
    int v117 = v146;
LABEL_261:
    if (v117)
    {
      if (v117 == 2 || (unsigned int v20 = __lshift_D2A(v20, 1), v128 = __cmp_D2A((uint64_t)v20, (uint64_t)v66), v128 > 0))
      {
        int v127 = v147;
LABEL_265:
        uint64_t v65 = v145;
        goto LABEL_280;
      }

      if (!v128)
      {
        int v127 = v147;
        if ((v116 & 1) != 0) {
          goto LABEL_265;
        }
      }
    }

    ++i;
    uint64_t v65 = v145;
    do
    {
      int v130 = *(i - 2);
      --i;
    }

    while (v130 == 48);
    goto LABEL_285;
  }

  if (v141 < 1)
  {
    int v112 = v65;
  }

  else
  {
    int v112 = __lshift_D2A(v65, v141);
    uint64_t v65 = v112;
  }

  uint64_t v142 = (uint64_t)v66;
  v139 = v6;
  if (v102)
  {
    v118 = __Balloc_D2A(v112[2]);
    _platform_memmove();
    uint64_t v65 = __lshift_D2A(v118, 1);
  }

  int v119 = LOBYTE(a6) & 1;
  int v120 = v111 - 1;
  for (int i = v63 + 1; ; ++i)
  {
    int v121 = __quorem_D2A((uint64_t)v20, v142);
    int v122 = __cmp_D2A((uint64_t)v20, (uint64_t)v112);
    v123 = __diff_D2A(v142, (uint64_t)v65);
    v145 = v65;
    if (v123[4]) {
      int v124 = 1;
    }
    else {
      int v124 = __cmp_D2A((uint64_t)v20, (uint64_t)v123);
    }
    char v116 = v121 + 48;
    __Bfree_D2A(v123);
    int v117 = v146;
    if (!v119 && v148 != 1 && !v124 && v146 >= 1)
    {
      if (v121 == 9)
      {
        int v6 = v139;
        int v127 = v147;
        unint64_t v63 = v143;
        uint64_t v65 = v145;
        uint64_t v66 = (int *)v142;
        goto LABEL_279;
      }

      char v129 = v121 + 49;
      if (v122 <= 0) {
        char v129 = v121 + 48;
      }
      *(i - 1) = v129;
      int v6 = v139;
      unint64_t v63 = v143;
      uint64_t v65 = v145;
      uint64_t v66 = (int *)v142;
      goto LABEL_285;
    }

    if (v122 < 0 || v148 != 1 && !(v122 | v119)) {
      break;
    }
    if (v124 >= 1)
    {
      int v6 = v139;
      if (v146)
      {
        uint64_t v66 = (int *)v142;
        if (v121 == 9) {
          goto LABEL_278;
        }
        *(i - 1) = v121 + 49;
        unint64_t v63 = v143;
        uint64_t v65 = v145;
        goto LABEL_285;
      }

      goto LABEL_253;
    }

LABEL_240:
    *(i - 1) = v116;
    if (!v120)
    {
      int v6 = v139;
      uint64_t v66 = (int *)v142;
      unint64_t v63 = v143;
      goto LABEL_261;
    }

    unsigned int v20 = __multadd_D2A(v20, 10, 0);
    unsigned __int8 v125 = __multadd_D2A(v112, 10, 0);
    uint64_t v65 = v125;
    if (v112 != v145) {
      uint64_t v65 = __multadd_D2A(v145, 10, 0);
    }
    --v120;
    int v112 = v125;
  }

  if (!v20[6] && v20[5] < 2) {
    goto LABEL_252;
  }
  if (v148 < 2) {
    goto LABEL_245;
  }
  if (v146 == 2) {
    goto LABEL_240;
  }
  if (!v146)
  {
LABEL_252:
    int v6 = v139;
LABEL_253:
    uint64_t v66 = (int *)v142;
    unint64_t v63 = v143;
    goto LABEL_254;
  }

                int v13 = 0LL;
                *(void *)(v57 + 16) = v64;
                v213 = 1;
              }

              else
              {
                int v13 = 12LL;
              }

LABEL_245:
  if (v124 < 1) {
    goto LABEL_252;
  }
  unsigned int v20 = __lshift_D2A(v20, 1);
  uint64_t v66 = (int *)v142;
  int v126 = __cmp_D2A((uint64_t)v20, v142);
  int v6 = v139;
  if (v126 <= 0 && (v126 || (v121 & 1) == 0))
  {
LABEL_251:
    unint64_t v63 = v143;
LABEL_254:
    *(i - 1) = v116;
    goto LABEL_267;
  }

  if (v121 != 9)
  {
    char v116 = v121 + 49;
    goto LABEL_251;
  }

LABEL_278:
  int v127 = v147;
  unint64_t v63 = v143;
  uint64_t v65 = v145;
LABEL_279:
  *(i - 1) = 57;
LABEL_280:
  int v131 = i;
  uint64_t v132 = i;
  while (1)
  {
    int v134 = *--v132;
    char v133 = v134;
    if (v134 != 57) {
      break;
    }
    int v131 = v132;
    if (v132 == v63)
    {
      int v147 = v127 + 1;
      *unint64_t v63 = 49;
      int i = v63 + 1;
      goto LABEL_285;
    }
  }

  *(v131 - 1) = v133 + 1;
  int i = v131;
LABEL_285:
  __Bfree_D2A(v66);
  if (v65)
  {
    if (v112 && v112 != v65) {
      __Bfree_D2A(v112);
    }
    __Bfree_D2A(v65);
  }

  uint64_t v62 = v140;
LABEL_291:
  __Bfree_D2A(v20);
  *int i = 0;
  _DWORD *v62 = v147 + 1;
  if (v6) {
    *int v6 = i;
  }
  return v63;
}

  if (!*v119)
  {
    int v141 = 0LL;
    int v146 = v40;
    goto LABEL_534;
  }

  int v141 = 0LL;
  int v143 = (a6 & 1) == 0 && v109 < 1;
  if (v121 == 10) {
    int v144 = v38;
  }
  else {
    int v144 = 0;
  }
  v145 = &_DefaultRuneLocale.__magic[4 * v121];
  v335 = (int *)(v145 + 60);
  v329 = (__darwin_ct_rune_t *)(v145 + 1084);
  v330 = (__darwin_ct_rune_t *)(v145 + 2108);
  int v146 = v40;
  v358 = v110;
  v343 = v144;
  v344 = v143;
LABEL_289:
  int v147 = *(_DWORD *)(v41 + 40);
  if (!v147) {
    goto LABEL_515;
  }
  unsigned int v148 = (v147 & 1) == 0 || v143;
  if ((v148 | v144) != 1) {
    goto LABEL_529;
  }
  if ((v147 & 2) != 0)
  {
    int v149 = v359 == 10 ? v38 : 0;
    if (v359 | v337 && !v149) {
      goto LABEL_529;
    }
  }

  if ((v147 & 8) != 0)
  {
    if (v121 == 95) {
      goto LABEL_529;
    }
    if (v121 > 0x7F)
    {
      v155 = *(_xlocale **)(v347 + 56);
      if (v121 < 0x100)
      {
        v162 = &__global_locale;
        if (v155 != (_xlocale *)-1LL) {
          v162 = *(void **)(v347 + 56);
        }
        if (!v155) {
          v162 = &__c_locale;
        }
        v153 = *(_DWORD *)(*(void *)(v162[166] + 120LL) + 4LL * v121 + 60);
      }

      else
      {
        v156 = v38;
        v157 = v141;
        LOWORD(v153) = ___runetype_l(v121, v155);
        int v144 = v343;
        int v143 = v344;
        int v141 = v157;
        int v38 = v156;
        unsigned int v110 = v358;
      }
    }

    else
    {
      v153 = *v335;
    }

    if ((v153 & 0x500) != 0) {
      goto LABEL_529;
    }
    if (v359 != 95)
    {
      if (v359 <= 0x7F)
      {
        v163 = &_DefaultRuneLocale;
        goto LABEL_399;
      }

      v174 = *(_xlocale **)(v347 + 56);
      if (v359 < 0x100)
      {
        v196 = &__global_locale;
        if (v174 != (_xlocale *)-1LL) {
          v196 = *(void **)(v347 + 56);
        }
        if (!v174) {
          v196 = &__c_locale;
        }
        v163 = *(_RuneLocale **)(v196[166] + 120LL);
LABEL_399:
        v177 = v163->__runetype[v359];
      }

      else
      {
        v175 = v38;
        v176 = v141;
        LOWORD(v177) = ___runetype_l(v359, v174);
        int v144 = v343;
        int v143 = v344;
        int v141 = v176;
        int v38 = v175;
        unsigned int v110 = v358;
      }

      if ((v177 & 0x500) == 0) {
        goto LABEL_529;
      }
    }
  }

  int v150 = *(_DWORD *)(v41 + 40);
  if ((v150 & 0x10) != 0)
  {
    if (v121 != 95)
    {
      if (v121 > 0x7F)
      {
        v159 = *(_xlocale **)(v347 + 56);
        if (v121 < 0x100)
        {
          v167 = &__global_locale;
          if (v159 != (_xlocale *)-1LL) {
            v167 = *(void **)(v347 + 56);
          }
          if (!v159) {
            v167 = &__c_locale;
          }
          v154 = *(_DWORD *)(*(void *)(v167[166] + 120LL) + 4LL * v121 + 60);
        }

        else
        {
          v160 = v38;
          v161 = v141;
          LOWORD(v154) = ___runetype_l(v121, v159);
          int v144 = v343;
          int v143 = v344;
          int v141 = v161;
          int v38 = v160;
          unsigned int v110 = v358;
        }
      }

      else
      {
        v154 = *v335;
      }

      if ((v154 & 0x500) == 0) {
        goto LABEL_529;
      }
    }

    if (v359 == 95) {
      goto LABEL_529;
    }
    if (v359 > 0x7F)
    {
      v169 = *(_xlocale **)(v347 + 56);
      if (v359 >= 0x100)
      {
        v170 = v38;
        v171 = v141;
        LOWORD(v172) = ___runetype_l(v359, v169);
        int v144 = v343;
        int v143 = v344;
        int v141 = v171;
        int v38 = v170;
        unsigned int v110 = v358;
        goto LABEL_350;
      }

      v173 = &__global_locale;
      if (v169 != (_xlocale *)-1LL) {
        v173 = *(void **)(v347 + 56);
      }
      if (!v169) {
        v173 = &__c_locale;
      }
      v168 = *(_RuneLocale **)(v173[166] + 120LL);
    }

    else
    {
      v168 = &_DefaultRuneLocale;
    }

    v172 = v168->__runetype[v359];
LABEL_350:
    if ((v172 & 0x500) != 0) {
      goto LABEL_529;
    }
    if ((*(_DWORD *)(v41 + 40) & 0x20) == 0) {
      goto LABEL_374;
    }
LABEL_305:
    if (!v109) {
      goto LABEL_374;
    }
    v151 = v359;
    if (!v359) {
      goto LABEL_374;
    }
    if (v121 == 95)
    {
      if (v359 == 95) {
        goto LABEL_529;
      }
      v152 = 1;
    }

    else
    {
      if (v121 > 0x7F)
      {
        v164 = *(_xlocale **)(v347 + 56);
        if (v121 < 0x100)
        {
          v178 = &__global_locale;
          if (v164 != (_xlocale *)-1LL) {
            v178 = *(void **)(v347 + 56);
          }
          if (!v164) {
            v178 = &__c_locale;
          }
          v158 = *(_DWORD *)(*(void *)(v178[166] + 120LL) + 4LL * v121 + 60);
        }

        else
        {
          v165 = v141;
          v166 = ___runetype_l(v121, v164);
          int v144 = v343;
          int v143 = v344;
          int v141 = v165;
          unsigned int v110 = v358;
          LOWORD(v158) = v166;
          v151 = v359;
        }
      }

      else
      {
        v158 = *v335;
      }

      v179 = v158 & 0x500;
      v152 = v179 != 0;
      if (v151 == 95)
      {
        int v38 = v340;
        if (v179) {
          goto LABEL_529;
        }
        goto LABEL_374;
      }
    }

    if (v151 > 0x7F)
    {
      v181 = *(_xlocale **)(v347 + 56);
      if (v151 >= 0x100)
      {
        v182 = v141;
        LOWORD(v183) = ___runetype_l(v151, v181);
        int v144 = v343;
        int v143 = v344;
        int v141 = v182;
        unsigned int v110 = v358;
        goto LABEL_373;
      }

      v184 = &__global_locale;
      if (v181 != (_xlocale *)-1LL) {
        v184 = *(void **)(v347 + 56);
      }
      if (!v181) {
        v184 = &__c_locale;
      }
      v180 = *(_RuneLocale **)(v184[166] + 120LL);
    }

    else
    {
      v180 = &_DefaultRuneLocale;
    }

    v183 = v180->__runetype[v151];
LABEL_373:
    int v38 = v340;
    if (v152 == ((v183 & 0x500) != 0)) {
      goto LABEL_529;
    }
    goto LABEL_374;
  }

  if ((v150 & 0x20) != 0) {
    goto LABEL_305;
  }
LABEL_374:
  if ((*(_BYTE *)(v41 + 40) & 0x40) != 0)
  {
    if (!v109) {
      goto LABEL_529;
    }
    v187 = v359;
    if (!v359) {
      goto LABEL_529;
    }
    if (v121 == 95)
    {
      if (v359 == 95) {
        goto LABEL_375;
      }
      v188 = 1;
    }

    else
    {
      if (v121 > 0x7F)
      {
        v193 = *(_xlocale **)(v347 + 56);
        if (v121 < 0x100)
        {
          v199 = &__global_locale;
          if (v193 != (_xlocale *)-1LL) {
            v199 = *(void **)(v347 + 56);
          }
          if (!v193) {
            v199 = &__c_locale;
          }
          v190 = *(_DWORD *)(*(void *)(v199[166] + 120LL) + 4LL * v121 + 60);
        }

        else
        {
          v194 = v141;
          v195 = ___runetype_l(v121, v193);
          int v144 = v343;
          int v143 = v344;
          int v141 = v194;
          unsigned int v110 = v358;
          LOWORD(v190) = v195;
          v187 = v359;
        }
      }

      else
      {
        v190 = *v335;
      }

      v200 = v190 & 0x500;
      v188 = v200 != 0;
      if (v187 == 95)
      {
        int v38 = v340;
        if (!v200) {
          goto LABEL_529;
        }
        goto LABEL_375;
      }
    }

    if (v187 > 0x7F)
    {
      v202 = *(_xlocale **)(v347 + 56);
      if (v187 >= 0x100)
      {
        v203 = v141;
        LOWORD(v204) = ___runetype_l(v187, v202);
        int v144 = v343;
        int v143 = v344;
        int v141 = v203;
        unsigned int v110 = v358;
        goto LABEL_430;
      }

      v205 = &__global_locale;
      if (v202 != (_xlocale *)-1LL) {
        v205 = *(void **)(v347 + 56);
      }
      if (!v202) {
        v205 = &__c_locale;
      }
      v201 = *(_RuneLocale **)(v205[166] + 120LL);
    }

    else
    {
      v201 = &_DefaultRuneLocale;
    }

    v204 = v201->__runetype[v187];
LABEL_430:
    int v38 = v340;
    if (((v188 ^ ((v204 & 0x500) != 0)) & 1) != 0) {
      goto LABEL_529;
    }
  }

char *__gdtoa(int *a1, int a2, _DWORD *a3, _DWORD *a4, unsigned int a5, int a6, _DWORD *a7, char **a8)
{
  int v8 = *a4;
  *a4 &= 0xFFFFFFCF;
  switch(v8 & 7)
  {
    case 0:
      goto LABEL_28;
    case 1:
    case 2:
      double v10 = a4;
      int v14 = *a1;
      v160 = a7;
      v161 = a8;
      int v15 = 0;
      if (v14 >= 33)
      {
        for (int i = 32; i < v14; i *= 2)
          ++v15;
      }

      uint64_t v17 = __Balloc_D2A(v15);
      signed int v18 = v17;
      uint64_t v19 = 0LL;
      uint64_t v20 = 0LL;
      do
      {
        v17[v19 + 6] = a3[v19];
        v20 += 0x100000000LL;
        ++v19;
      }

      while (&a3[v19] <= &a3[(v14 - 1) >> 5]);
      uint64_t v21 = v20 >> 32;
      int v22 = 32 * v21;
      break;
    case 3:
      *a7 = -32768;
      int v29 = "Infinity";
      int v30 = a8;
      unsigned int v31 = 8;
      return (char *)__nrv_alloc_D2A((unsigned __int8 *)v29, v30, v31);
    case 4:
      *a7 = -32768;
      int v29 = "NaN";
      int v30 = a8;
      unsigned int v31 = 3;
      return (char *)__nrv_alloc_D2A((unsigned __int8 *)v29, v30, v31);
    default:
      return 0LL;
  }

  while (1)
  {
    signed int v23 = &v17[v21];
    if (v23[5]) {
      break;
    }
    v22 -= 32;
    if (!(_DWORD)--v21)
    {
      int v24 = 0;
      v17[5] = 0;
      goto LABEL_12;
    }
  }

  v17[5] = v21;
  int v24 = v22 - __hi0bits_D2A(v23[5]);
LABEL_12:
  int v25 = __trailz_D2A((uint64_t)v18);
  int v164 = v25;
  int v143 = a2;
  if (v25)
  {
    int v26 = v25;
    __rshift_D2A((uint64_t)v18, v25);
    a2 += v26;
    int v27 = v24 - v26;
  }

  else
  {
    int v27 = v24;
  }

  if (!v18[5])
  {
    __Bfree_D2A(v18);
    a7 = v160;
    a8 = v161;
LABEL_28:
    *a7 = 1;
    int v29 = "0";
    int v30 = a8;
    unsigned int v31 = 1;
    return (char *)__nrv_alloc_D2A((unsigned __int8 *)v29, v30, v31);
  }

  double v32 = __b2d_D2A((uint64_t)v18, &v164);
  int v33 = 1 - (a2 + v27);
  signed int v34 = a2 + v27 - 1;
  int v164 = v34;
  unsigned int v35 = LODWORD(v32);
  unint64_t v36 = (*(void *)&v32 & 0xFFFFFFFFFFFFFLL | 0x3FF0000000000000uLL) >> 32;
  double v37 = (COERCE_DOUBLE(*(void *)&v32 & 0xFFFFFFFFFFFFFLL | 0x3FF0000000000000LL) + -1.5) * 0.289529655
      + 0.176091259
      + (double)v34 * 0.301029996;
  if (a2 + v27 >= 1) {
    int v33 = a2 + v27 - 1;
  }
  if (v33 > 1077) {
    double v37 = v37 + (double)(v33 - 1077) * 7.0e-17;
  }
  int v38 = (int)v37;
  BOOL v39 = v37 < 0.0;
  unsigned int v40 = v38 - v39;
  *(void *)&double v41 = v35 | ((unint64_t)(v36 + ((a2 + v27) << 20) - 0x100000) << 32);
  int v141 = v27;
  if ((v38 - v39) <= 0x16)
  {
    if (__tens_D2A[v40] <= v41)
    {
      int v44 = -a2 & ~(-a2 >> 31);
      if (a2 > 0) {
        int v47 = a2;
      }
      else {
        int v47 = 0;
      }
      int v144 = v47;
      int v42 = v38 - v39;
      goto LABEL_42;
    }

    int v42 = v40 - 1;
  }

  else
  {
    int v42 = v38 - v39;
  }

  int v44 = -a2 & ~(-a2 >> 31);
  if (a2 > 0) {
    int v45 = a2;
  }
  else {
    int v45 = 0;
  }
  if ((v42 & 0x80000000) == 0)
  {
    int v144 = v45;
LABEL_42:
    int v46 = 0;
    v44 += v42;
    int v153 = v42;
    int v142 = v42;
    goto LABEL_43;
  }

  int v142 = 0;
  int v144 = v45 - v42;
  int v153 = v42;
  int v46 = -v42;
LABEL_43:
  int v146 = v46;
  unsigned int v149 = v40;
  if (a5 <= 9) {
    unsigned int v48 = a5;
  }
  else {
    unsigned int v48 = 0;
  }
  if (v48 <= 5) {
    unsigned int v49 = v48;
  }
  else {
    unsigned int v49 = v48 - 4;
  }
  int v156 = 1;
  int v159 = v49;
  switch(v49)
  {
    case 0u:
    case 1u:
      a6 = 0;
      signed int v34 = (int)((double)v14 * 0.30103) + 3;
      int v164 = v34;
      int v156 = 1;
      goto LABEL_51;
    case 2u:
      int v156 = 0;
      goto LABEL_53;
    case 3u:
      int v156 = 0;
      goto LABEL_58;
    case 4u:
LABEL_53:
      if (a6 <= 1) {
        signed int v34 = 1;
      }
      else {
        signed int v34 = a6;
      }
      int v164 = v34;
      int v50 = v34;
      int v151 = v34;
      a6 = v34;
      break;
    case 5u:
LABEL_58:
      int v50 = v153 + a6 + 1;
      int v151 = v153 + a6;
      if (v153 + a6 < 0 != __OFADD__(v153, a6)) {
        signed int v34 = 1;
      }
      else {
        signed int v34 = v153 + a6 + 1;
      }
      int v164 = v34;
      break;
    default:
LABEL_51:
      int v50 = -1;
      int v151 = -1;
      break;
  }

  int v150 = (char *)__rv_alloc_D2A(v34);
  int v51 = a1[3];
  int v52 = v51 - 1;
  if (v51 == 1)
  {
    int v53 = 0;
  }

  else
  {
    if (v51 < 1) {
      int v52 = 2;
    }
    if ((v8 & 8) != 0) {
      int v53 = 3 - v52;
    }
    else {
      int v53 = v52;
    }
  }

  BOOL v54 = v48 > 5;
  int v55 = v153;
  if (!v54 && v50 <= 0xE && !(v53 | v153))
  {
    int v164 = 0;
    BOOL v57 = v149 < 0x17 || v41 >= 1.0 || v50 == 0;
    if (v57)
    {
      int v58 = 0;
      double v59 = 2.0;
      int v60 = v50;
      double v61 = v41;
    }

    else
    {
      if (v151 < 1) {
        goto LABEL_104;
      }
      double v61 = v41 * 10.0;
      double v59 = 3.0;
      int v58 = -1;
      int v60 = v151;
    }

    *(void *)&double v62 = COERCE__INT64(v59 * v61 + 7.0) - 0x340000000000000LL;
    if (v60)
    {
      double v63 = __tens_D2A[v60 - 1];
      int v64 = (int)v61;
      double v65 = v61 - (double)(int)v61;
      char v66 = v64 + 48;
      double v67 = v150 + 1;
      if (v156)
      {
        double v68 = 0.5 / v63 - v62;
        *int v150 = v66;
        if (v65 < v68)
        {
LABEL_89:
          if (v65 == 0.0) {
            int v71 = 0;
          }
          else {
            int v71 = 16;
          }
          unsigned int v28 = v150;
          int v72 = v58;
          goto LABEL_256;
        }

        while (1.0 - v65 >= v68)
        {
          if (++v164 >= v60) {
            goto LABEL_104;
          }
          double v69 = v65 * 10.0;
          int v70 = (int)v69;
          double v68 = v68 * 10.0;
          double v65 = v69 - (double)(int)v69;
          *v67++ = v70 + 48;
          if (v65 < v68) {
            goto LABEL_89;
          }
        }

        goto LABEL_98;
      }

      double v76 = v63 * v62;
      int v164 = 1;
      *int v150 = v66;
      for (int j = v164; v164 != v60; int j = v164)
      {
        int v164 = j + 1;
        double v78 = v65 * 10.0;
        int v79 = (int)v78;
        double v65 = v78 - (double)(int)v78;
        *v67++ = v79 + 48;
      }

      if (v65 > v76 + 0.5)
      {
LABEL_98:
        unsigned int v28 = v150;
        int v72 = v58;
        goto LABEL_233;
      }

      if (v65 < 0.5 - v76)
      {
        int v72 = v58;
        if (v65 == 0.0) {
          int v71 = 0;
        }
        else {
          int v71 = 16;
        }
        unsigned int v28 = v150;
        goto LABEL_254;
      }
    }

    else
    {
      double v73 = v61 + -5.0;
      if (v73 > v62)
      {
        unint64_t v74 = 0LL;
        int v75 = 0LL;
        int v55 = v58;
        unsigned int v28 = v150;
        goto LABEL_173;
      }

      if (v73 < -v62)
      {
        unint64_t v74 = 0LL;
        int v75 = 0LL;
        unsigned int v28 = v150;
        goto LABEL_175;
      }
    }
  }

LABEL_104:
  if ((a2 & 0x80000000) == 0 && v153 <= 14)
  {
    double v80 = __tens_D2A[v153];
    if ((a6 & 0x80000000) == 0 || v50 > 0)
    {
      int v164 = 1;
      int v86 = (int)(v41 / v80);
      double v87 = v41 - (double)v86 * v80;
      unsigned int v28 = v150;
      *int v150 = v86 + 48;
      double v67 = v150 + 1;
      if (v87 == 0.0)
      {
        int v72 = v153;
        int v71 = 0;
        goto LABEL_256;
      }

      int v93 = v164;
      if (v164 != v50)
      {
        while (1)
        {
          double v94 = v87 * 10.0;
          int v86 = (int)(v94 / v80);
          int v164 = v93 + 1;
          double v87 = v94 - (double)v86 * v80;
          *v67++ = v86 + 48;
          if (v87 == 0.0) {
            break;
          }
          int v93 = v164;
          if (v164 == v50)
          {
            int v55 = v153;
            goto LABEL_130;
          }
        }

        int v71 = 0;
        int v72 = v153;
        goto LABEL_256;
      }

LABEL_130:
      if (v53)
      {
        if (v53 != 1)
        {
          int v72 = v55;
          int v71 = 16;
          goto LABEL_256;
        }
      }

      else
      {
        double v121 = v87 + v87;
        if (v121 <= v80)
        {
          int v122 = v86 & 1;
          if (v121 != v80 || v122 == 0)
          {
            int v72 = v55;
            int v71 = 16;
LABEL_254:
            ++v67;
            do
            {
              int v133 = *(v67 - 2);
              --v67;
            }

            while (v133 == 48);
            goto LABEL_256;
          }
        }
      }

      int v72 = v55;
LABEL_233:
      int v124 = v28 + 1;
      unsigned __int8 v125 = v67 - 1;
      while (1)
      {
        int v126 = *v125;
        if (v126 != 57) {
          break;
        }
        BOOL v57 = v125-- == v28;
        if (v57)
        {
          ++v72;
          *unsigned int v28 = 48;
          char v127 = 49;
          unsigned __int8 v125 = v28;
          goto LABEL_239;
        }
      }

      char v127 = v126 + 1;
      int v124 = v125 + 1;
LABEL_239:
      *unsigned __int8 v125 = v127;
      int v71 = 32;
      double v67 = v124;
      goto LABEL_256;
    }

    unint64_t v74 = 0LL;
    unsigned int v28 = v150;
    if ((v50 & 0x80000000) == 0)
    {
      int v75 = 0LL;
      if (v80 * 5.0 >= v41) {
        goto LABEL_175;
      }
LABEL_173:
      int v104 = 0LL;
      *unsigned int v28 = 49;
      double v67 = v28 + 1;
      int v72 = v55 + 1;
LABEL_174:
      int v71 = 32;
      goto LABEL_176;
    }

    int v75 = 0LL;
LABEL_175:
    int v104 = 0LL;
    int v72 = ~a6;
    int v71 = 16;
    double v67 = v28;
    goto LABEL_176;
  }

  int v140 = v53;
  if (v156)
  {
    int v81 = v146;
    if (v159 > 1)
    {
      int v91 = v146 - (v50 - 1);
      if (v146 < v50 - 1) {
        int v91 = 0;
      }
      if (v146 > v50 - 1)
      {
        int v92 = 0;
      }

      else
      {
        int v81 = v50 - 1;
        int v92 = v50 - 1 - v146;
      }

      v142 += v92;
      int v164 = v50;
      if (v50 < 0)
      {
        int v82 = 0;
        int v84 = v144;
        int v85 = v144 - v50;
        int v164 = 0;
      }

      else
      {
        int v82 = v50;
        int v84 = v144;
        int v85 = v144;
      }

      int v146 = v91;
    }

    else
    {
      int v82 = v14 - v141 + 1;
      int v164 = v82;
      int v83 = a1[1];
      if (a2 - (v14 - v141) < v83)
      {
        int v82 = a2 - v83 + 1;
        int v164 = v82;
      }

      int v84 = v144;
      int v85 = v144;
    }

    int v90 = v82 + v84;
    v44 += v82;
    v158 = __i2b_D2A(1);
    int v89 = v85;
    int v55 = v153;
    int v88 = v146;
  }

  else
  {
    v158 = 0LL;
    int v89 = v144;
    int v88 = v146;
    int v81 = v146;
    int v90 = v144;
  }

  if (v89 >= 1 && v44 >= 1)
  {
    if (v89 >= v44) {
      int v95 = v44;
    }
    else {
      int v95 = v89;
    }
    int v164 = v95;
    v90 -= v95;
    v89 -= v95;
    v44 -= v95;
  }

  int v145 = v89;
  if (v81 >= 1)
  {
    if (!v156)
    {
      int v97 = v18;
      int v96 = v81;
      goto LABEL_150;
    }

    if (v88 >= 1)
    {
      int v147 = v88;
      v158 = __pow5mult_D2A(v158, v88);
      v154 = __mult_D2A(v158, v18);
      __Bfree_D2A(v18);
      int v88 = v147;
      signed int v18 = v154;
    }

    int v96 = v81 - v88;
    if (v96)
    {
      int v97 = v18;
LABEL_150:
      signed int v18 = __pow5mult_D2A(v97, v96);
    }
  }

  uint64_t v98 = __i2b_D2A(1);
  int v75 = v98;
  if (v142 >= 1) {
    int v75 = __pow5mult_D2A(v98, v142);
  }
  char v99 = 1;
  if (v159 <= 1 && v141 == 1)
  {
    if (a1[1] + 1 >= v143)
    {
      char v99 = 1;
    }

    else
    {
      char v99 = 0;
      ++v90;
      ++v44;
    }
  }

  unint64_t v74 = v158;
  char v148 = v99;
  if (v142) {
    char v100 = __hi0bits_D2A(v75[v75[5] + 5]);
  }
  else {
    char v100 = 31;
  }
  char v101 = v100 - v44 + 28;
  int v102 = v101 & 0x1F;
  int v164 = v102;
  if (v102 + v90 < 1)
  {
    int v103 = v101 & 0x1F;
  }

  else
  {
    signed int v18 = __lshift_D2A(v18, v102 + v90);
    int v103 = v164;
  }

  unsigned int v28 = v150;
  if (v103 + v44 >= 1) {
    int v75 = __lshift_D2A(v75, v103 + v44);
  }
  if (v149 >= 0x17 && (__cmp_D2A((uint64_t)v18, (uint64_t)v75) & 0x80000000) != 0)
  {
    int v155 = v55 - 1;
    signed int v18 = __multadd_D2A(v18, 10, 0);
    if (v156)
    {
      unint64_t v74 = __multadd_D2A(v158, 10, 0);
      if (v159 < 3)
      {
        int v50 = v151;
      }

      else
      {
        int v50 = v151;
        if (v151 <= 0) {
          goto LABEL_171;
        }
      }

      goto LABEL_183;
    }

    if (v159 < 3)
    {
      int v50 = v151;
    }

    else
    {
      int v50 = v151;
      if (v151 < 1) {
        goto LABEL_171;
      }
    }

    --v55;
LABEL_263:
    int v164 = 1;
    LOBYTE(v116) = __quorem_D2A((uint64_t)v18, (uint64_t)v75) + 48;
    int v119 = v150;
    while (1)
    {
      *v119++ = v116;
      if (v164 >= v50) {
        break;
      }
      signed int v18 = __multadd_D2A(v18, 10, 0);
      ++v164;
      LOBYTE(v116) = __quorem_D2A((uint64_t)v18, (uint64_t)v75) + 48;
    }

    v163 = 0LL;
    int v117 = v140;
LABEL_267:
    if (v117)
    {
      if (v117 == 2)
      {
LABEL_269:
        unint64_t v74 = v158;
        int v104 = v163;
LABEL_270:
        int v72 = v55;
        if (v18[5] > 1 || v18[6]) {
          int v71 = 16;
        }
        else {
          int v71 = 0;
        }
        double v67 = v119 + 1;
        do
        {
          int v134 = *(v67 - 2);
          --v67;
        }

        while (v134 == 48);
        goto LABEL_176;
      }

      unint64_t v74 = v158;
      int v104 = v163;
      if (v18[5] <= 1 && !v18[6]) {
        goto LABEL_270;
      }
      int v155 = v55;
    }

    else
    {
      signed int v18 = __lshift_D2A(v18, 1);
      int v135 = __cmp_D2A((uint64_t)v18, (uint64_t)v75);
      if (v135 <= 0 && (v135 || (v116 & 1) == 0)) {
        goto LABEL_269;
      }
      int v155 = v55;
      unint64_t v74 = v158;
      int v104 = v163;
    }

LABEL_295:
    double v67 = v28 + 1;
    int v136 = v119;
    int v137 = v119;
    while (1)
    {
      int v139 = *--v137;
      char v138 = v139;
      if (v139 != 57) {
        break;
      }
      int v136 = v137;
      if (v137 == v28)
      {
        int v72 = v155 + 1;
        *unsigned int v28 = 49;
        goto LABEL_174;
      }
    }

    *(v136 - 1) = v138 + 1;
    int v71 = 32;
    double v67 = v136;
    int v72 = v155;
    goto LABEL_176;
  }

  if (v159 >= 3 && v50 < 1)
  {
    int v155 = v55;
LABEL_171:
    if (v50 < 0) {
      goto LABEL_175;
    }
    int v75 = __multadd_D2A(v75, 5, 0);
    int v55 = v155;
    goto LABEL_173;
  }

  if (!v156) {
    goto LABEL_263;
  }
  int v155 = v55;
LABEL_183:
  int v152 = v50;
  if (v102 + v145 < 1)
  {
    int v105 = v74;
  }

  else
  {
    int v105 = __lshift_D2A(v74, v102 + v145);
    unint64_t v74 = v105;
  }

  v157 = v10;
  if ((v148 & 1) == 0)
  {
    char v106 = __Balloc_D2A(v105[2]);
    _platform_memmove();
    unint64_t v74 = __lshift_D2A(v106, 1);
  }

  int v107 = 1;
  for (uint64_t k = v150; ; ++k)
  {
    int v164 = v107;
    int v109 = __quorem_D2A((uint64_t)v18, (uint64_t)v75);
    int v110 = __cmp_D2A((uint64_t)v18, (uint64_t)v105);
    uint64_t v111 = (uint64_t)v75;
    int v112 = v110;
    uint64_t v113 = v111;
    int v114 = __diff_D2A(v111, (uint64_t)v74);
    v158 = v74;
    v163 = v105;
    if (v114[4]) {
      int v115 = 1;
    }
    else {
      int v115 = __cmp_D2A((uint64_t)v18, (uint64_t)v114);
    }
    int v116 = v109 + 48;
    __Bfree_D2A(v114);
    int v117 = v140;
    if (!(v115 | v159) && !(*a3 & 1 | v140))
    {
      if (v109 != 9)
      {
        int v72 = v155;
        if (v112 <= 0)
        {
          int v75 = (int *)v113;
          if (v18[5] > 1 || v18[6]) {
LABEL_211:
          }
            int v71 = 16;
          else {
            int v71 = 0;
          }
          unsigned int v28 = v150;
        }

        else
        {
          LOBYTE(v116) = v109 + 49;
          int v71 = 32;
          unsigned int v28 = v150;
          int v75 = (int *)v113;
        }

        double v10 = v157;
        goto LABEL_301;
      }

      unsigned int v28 = v150;
      int v75 = (int *)v113;
LABEL_244:
      double v10 = v157;
      goto LABEL_294;
    }

    if (v112 < 0 || !(v112 | v159) && (*(_BYTE *)a3 & 1) == 0) {
      break;
    }
    if (v115 >= 1 && v140 != 2)
    {
      int v75 = (int *)v113;
      if (v109 != 9)
      {
        *uint64_t k = v109 + 49;
        double v67 = k + 1;
        int v71 = 32;
        unsigned int v28 = v150;
        double v10 = v157;
        int v72 = v155;
        goto LABEL_302;
      }

      unsigned int v28 = v150;
      goto LABEL_244;
    }

    *uint64_t k = v116;
    int v75 = (int *)v113;
    if (v164 == v152)
    {
      int v119 = k + 1;
      int v55 = v155;
      unsigned int v28 = v150;
      double v10 = v157;
      goto LABEL_267;
    }

    signed int v18 = __multadd_D2A(v18, 10, 0);
    v118 = __multadd_D2A(v163, 10, 0);
    int v105 = v118;
    if (v163 != v74) {
      v118 = __multadd_D2A(v74, 10, 0);
    }
    int v107 = v164 + 1;
    unint64_t v74 = v118;
  }

  if (!v140 || v18[5] <= 1 && !v18[6])
  {
    int v75 = (int *)v113;
    int v72 = v155;
    if (v115 < 1)
    {
      int v71 = 0;
      double v10 = v157;
    }

    else
    {
      signed int v18 = __lshift_D2A(v18, 1);
      int v120 = __cmp_D2A((uint64_t)v18, v113);
      double v10 = v157;
      if (v120 > 0 || (int v71 = 32, !v120) && (v109 & 1) != 0)
      {
        if (v109 == 9)
        {
          unsigned int v28 = v150;
LABEL_294:
          int v104 = v163;
          *uint64_t k = 57;
          int v119 = k + 1;
          goto LABEL_295;
        }

        LOBYTE(v116) = v109 + 49;
        int v71 = 32;
      }
    }

    unsigned int v28 = v150;
    if (v18[5] > 1 || v18[6]) {
      int v71 = 16;
    }
    goto LABEL_301;
  }

  int v75 = (int *)v113;
  int v72 = v155;
  if (v140 == 2) {
    goto LABEL_211;
  }
  int v128 = v74;
  int v129 = __cmp_D2A(v113, (uint64_t)v74);
  unsigned int v28 = v150;
  double v10 = v157;
  if (v129 < 1)
  {
    uint64_t v132 = (uint64_t)v74;
    int v130 = v163;
  }

  else
  {
    int v130 = v163;
    do
    {
      *k++ = v116;
      int v131 = __multadd_D2A(v128, 10, 0);
      uint64_t v132 = (uint64_t)v131;
      if (v130 == v128) {
        int v130 = v131;
      }
      signed int v18 = __multadd_D2A(v18, 10, 0);
      int v116 = __quorem_D2A((uint64_t)v18, (uint64_t)v75) + 48;
      int v128 = (int *)v132;
    }

    while ((int)__cmp_D2A((uint64_t)v75, v132) > 0);
  }

  v163 = v130;
  if (v116 == 57)
  {
    unint64_t v74 = (int *)v132;
    goto LABEL_294;
  }

  LOBYTE(v116) = v116 + 1;
  int v71 = 32;
  v158 = (int *)v132;
  int v72 = v155;
LABEL_301:
  *uint64_t k = v116;
  double v67 = k + 1;
  unint64_t v74 = v158;
LABEL_302:
  int v104 = v163;
LABEL_176:
  __Bfree_D2A(v75);
  if (v74)
  {
    if (v104 && v104 != v74) {
      __Bfree_D2A(v104);
    }
    __Bfree_D2A(v74);
  }

LABEL_256:
  __Bfree_D2A(v18);
  *double v67 = 0;
  _DWORD *v160 = v72 + 1;
  if (v161) {
    *v161 = v67;
  }
  *v10 |= v71;
  return v28;
}

uint64_t __rshift_D2A(uint64_t result, int a2)
{
  int v2 = (char *)(result + 24);
  int v3 = a2 >> 5;
  uint64_t v4 = *(int *)(result + 20);
  char v5 = (char *)(result + 24);
  if (a2 >> 5 < (int)v4)
  {
    uint64_t v6 = v3;
    unint64_t v7 = (unint64_t)&v2[4 * v4];
    char v8 = a2 & 0x1F;
    if ((a2 & 0x1F) != 0)
    {
      int v9 = &v2[4 * v3];
      int v10 = *(_DWORD *)v9 >> v8;
      if ((unint64_t)(v9 + 4) >= v7)
      {
        int v13 = (_DWORD *)(result + 24);
      }

      else
      {
        uint64_t v11 = 4 * v6;
        uint64_t v12 = result + 28;
        do
        {
          *(_DWORD *)(v12 - 4) = (*(_DWORD *)(v12 + v11) << (32 - v8)) | v10;
          int v10 = *(_DWORD *)(v12 + v11) >> v8;
          v12 += 4LL;
        }

        while (v12 + v11 < v7);
        int v13 = (_DWORD *)(v12 - 4);
      }

      _DWORD *v13 = v10;
      char v5 = (char *)&v13[v10 != 0];
    }

    else
    {
      uint64_t v14 = v3;
      int v15 = (_DWORD *)(result + 24);
      do
      {
        char v5 = (char *)(v15 + 1);
        *int v15 = v15[v14];
        unint64_t v16 = &v15[v14 + 1];
        ++v15;
      }

      while ((unint64_t)v16 < v7);
    }
  }

  unint64_t v17 = (unint64_t)(v5 - v2) >> 2;
  *(_DWORD *)(result + 20) = v17;
  if (!(_DWORD)v17) {
    *(_DWORD *)int v2 = 0;
  }
  return result;
}

uint64_t __trailz_D2A(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 20);
  LODWORD(v2) = 0;
  int v3 = (unsigned int *)(a1 + 24);
  unint64_t v4 = a1 + 24 + 4 * v1;
  while (!*v3)
  {
    uint64_t v2 = (v2 + 32);
  }

  unsigned int v6 = *v3;
  return __lo0bits_D2A(&v6) + v2;
}

_DWORD *__Balloc_D2A(int a1)
{
  if ((gdtoa_tsd_key & 1) != 0)
  {
    pthread_key_t v2 = 14LL;
  }

  else
  {
    pthread_mutex_lock(&gdtoa_tsd_lock);
    if ((gdtoa_tsd_key & 1) == 0)
    {
      gdtoa_tsd_key = 1;
      pthread_key_init_np();
    }

    pthread_mutex_unlock(&gdtoa_tsd_lock);
    if (gdtoa_tsd_key) {
      pthread_key_t v2 = 14LL;
    }
    else {
      pthread_key_t v2 = -1LL;
    }
  }

  int v3 = pthread_getspecific(v2);
  if (!v3)
  {
    int v3 = malloc(0x50uLL);
    *int v3 = 0u;
    v3[1] = 0u;
    v3[2] = 0u;
    v3[3] = 0u;
    v3[4] = 0u;
    if (gdtoa_tsd_key) {
      pthread_key_t v4 = 14LL;
    }
    else {
      pthread_key_t v4 = -1LL;
    }
    pthread_setspecific(v4, v3);
  }

  if (a1 <= 9 && (uint64_t result = (_DWORD *)*((void *)v3 + a1)) != 0LL)
  {
    *((void *)v3 + a1) = *(void *)result;
  }

  else
  {
    uint64_t result = malloc(4LL * ((1 << a1) - 1) + 32);
    result[2] = a1;
    result[3] = 1 << a1;
  }

  *((void *)result + 2) = 0LL;
  return result;
}

void gdtoa_freelist_free(void **a1)
{
  if (a1)
  {
    int v2 = 0;
    int v3 = a1;
    do
    {
      pthread_key_t v4 = *v3;
      if (*v3)
      {
        do
        {
          char v5 = (void *)*v4;
          free(v4);
          pthread_key_t v4 = v5;
        }

        while (v5);
      }

      ++v3;
      ++v2;
    }

    while (v2 != 10);
    free(a1);
  }

void __Bfree_D2A(int *a1)
{
  if (a1)
  {
    if (a1[2] < 10)
    {
      if (gdtoa_tsd_key) {
        pthread_key_t v2 = 14LL;
      }
      else {
        pthread_key_t v2 = -1LL;
      }
      int v3 = pthread_getspecific(v2);
      uint64_t v4 = a1[2];
      *(void *)a1 = v3[v4];
      v3[v4] = a1;
    }

    else
    {
      free(a1);
    }
  }

uint64_t __lo0bits_D2A(unsigned int *a1)
{
  unsigned int v1 = *a1;
  if ((*a1 & 7) != 0)
  {
    if ((v1 & 1) == 0)
    {
      unsigned int v2 = v1 >> 2;
      if ((v1 & 2) != 0)
      {
        unsigned int v2 = v1 >> 1;
        uint64_t v3 = 1LL;
      }

      else
      {
        uint64_t v3 = 2LL;
      }

      goto LABEL_25;
    }

    return 0LL;
  }

  else
  {
    int v4 = (16 * ((unsigned __int16)*a1 == 0)) | 8;
    if ((_BYTE)v1) {
      int v4 = 16 * ((unsigned __int16)*a1 == 0);
    }
    else {
      v1 >>= 8;
    }
    unsigned int v5 = v4 | 4;
    if ((v1 & 0xF) != 0)
    {
      unsigned int v5 = v4;
      unsigned int v6 = v1;
    }

    else
    {
      unsigned int v6 = v1 >> 4;
    }

    LODWORD(v3) = v5 | 2;
    if ((v6 & 3) != 0) {
      uint64_t v3 = v5;
    }
    else {
      uint64_t v3 = v3;
    }
    if ((v6 & 3) != 0) {
      unsigned int v2 = v6;
    }
    else {
      unsigned int v2 = v6 >> 2;
    }
    if ((v2 & 1) != 0) {
      goto LABEL_25;
    }
    if (v2 >= 2)
    {
      uint64_t v3 = (v3 + 1);
      v2 >>= 1;
LABEL_25:
      *a1 = v2;
      return v3;
    }

    return 32LL;
  }

int *__multadd_D2A(int *a1, int a2, int a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = 0LL;
  uint64_t v5 = a1[5];
  unint64_t v6 = a3;
  else {
    int v7 = a1[5];
  }
  do
  {
    char v8 = &a1[v4];
    unint64_t v9 = v6 + v8[6] * (uint64_t)a2;
    unint64_t v6 = HIDWORD(v9);
    v8[6] = v9;
    ++v4;
  }

  while (v7 != (_DWORD)v4);
  if (v6)
  {
    if ((int)v5 >= a1[3])
    {
      int v10 = __Balloc_D2A(a1[2] + 1);
      _platform_memmove();
      __Bfree_D2A(v3);
      uint64_t v3 = v10;
    }

    v3[v5 + 6] = v6;
    v3[5] = v5 + 1;
  }

  return v3;
}

uint64_t __hi0bits_D2A(unsigned int a1)
{
  unsigned int v1 = a1 << 16;
  if (a1 >= 0x10000) {
    unsigned int v1 = a1;
  }
  unsigned int v2 = v1 << 8;
  if (HIBYTE(v1))
  {
    unsigned int v2 = v1;
    unsigned int v3 = 16 * (a1 < 0x10000);
  }

  else
  {
    unsigned int v3 = (16 * (a1 < 0x10000)) | 8;
  }

  unsigned int v4 = v2 >> 28;
  if (!(v2 >> 28)) {
    v2 *= 16;
  }
  if (!v4) {
    v3 |= 4u;
  }
  unsigned int v5 = v2 >> 30;
  if (!(v2 >> 30)) {
    v2 *= 4;
  }
  if (v5) {
    uint64_t result = v3;
  }
  else {
    uint64_t result = v3 | 2;
  }
  if ((v2 & 0x80000000) == 0)
  {
    if ((v2 & 0x40000000) != 0) {
      return (result + 1);
    }
    else {
      return 32LL;
    }
  }

  return result;
}

_DWORD *__i2b_D2A(int a1)
{
  uint64_t result = __Balloc_D2A(1);
  result[5] = 1;
  result[6] = a1;
  return result;
}

_DWORD *__mult_D2A(_DWORD *a1, _DWORD *a2)
{
  int v2 = a1[5];
  int v3 = a2[5];
  if (v2 >= v3) {
    unsigned int v4 = a2;
  }
  else {
    unsigned int v4 = a1;
  }
  if (v2 >= v3) {
    unsigned int v5 = a1;
  }
  else {
    unsigned int v5 = a2;
  }
  uint64_t v6 = (int)v5[5];
  uint64_t v7 = (int)v4[5];
  int v8 = v7 + v6;
  else {
    int v9 = v5[2] + 1;
  }
  int v10 = __Balloc_D2A(v9);
  uint64_t v11 = v10 + 6;
  if (v8 >= 1) {
    _platform_bzero();
  }
  if ((int)v7 >= 1)
  {
    uint64_t v12 = v5 + 6;
    int v13 = v4 + 6;
    do
    {
      unsigned int v15 = *v13++;
      unsigned int v14 = v15;
      if (v15)
      {
        uint64_t v16 = 0LL;
        unint64_t v17 = 0LL;
        do
        {
          unint64_t v18 = v17 + v11[v16] + v12[v16] * (unint64_t)v14;
          unint64_t v17 = HIDWORD(v18);
          v11[v16++] = v18;
        }

        while (&v12[v16] < &v5[v6 + 6]);
        v11[v16] = HIDWORD(v18);
      }

      ++v11;
    }

    while (v13 < &v4[v7 + 6]);
  }

  if (v8 >= 1)
  {
    uint64_t v19 = &v10[v8 + 5];
    while (!*v19--)
    {
      BOOL v21 = __OFSUB__(v8--, 1);
      if ((v8 < 0) ^ v21 | (v8 == 0))
      {
        int v8 = 0;
        break;
      }
    }
  }

  v10[5] = v8;
  return v10;
}

int *__pow5mult_D2A(int *a1, int a2)
{
  int v3 = a1;
  if ((a2 & 3) != 0) {
    int v3 = __multadd_D2A(a1, __pow5mult_D2A_p05[(a2 & 3) - 1], 0);
  }
  if (a2 >= 4)
  {
    int v5 = a2 >> 2;
    uint64_t v6 = (_DWORD *)p5s;
    if (p5s) {
      goto LABEL_10;
    }
    os_unfair_lock_lock(&stru_18C43B534);
    uint64_t v6 = (_DWORD *)p5s;
    if (!p5s)
    {
      uint64_t v6 = __Balloc_D2A(1);
      *(void *)(v6 + 5) = 0x27100000001LL;
      p5s = (uint64_t)v6;
LABEL_8:
      *(void *)uint64_t v6 = 0LL;
    }

_DWORD *__lshift_D2A(int *a1, int a2)
{
  int v4 = a1[5] + (a2 >> 5);
  int v5 = a1[2];
  int v6 = a1[3];
  if (v4 >= v6)
  {
    do
    {
      ++v5;
      BOOL v7 = v4 < 2 * v6;
      v6 *= 2;
    }

    while (!v7);
  }

  int v8 = __Balloc_D2A(v5);
  int v9 = v8 + 6;
  if (a2 >= 32)
  {
    if (a2 >> 5 <= 1) {
      int v10 = 1;
    }
    else {
      int v10 = a2 >> 5;
    }
    _platform_bzero();
    int v9 = &v8[v10 - 1 + 7];
  }

  uint64_t v11 = a1 + 6;
  unint64_t v12 = (unint64_t)&a1[a1[5] + 6];
  char v13 = a2 & 0x1F;
  if ((a2 & 0x1F) != 0)
  {
    int v14 = 0;
    do
    {
      *v9++ = (*v11 << v13) | v14;
      unsigned int v15 = *v11++;
      int v14 = v15 >> (32 - v13);
    }

    while ((unint64_t)v11 < v12);
    *int v9 = v14;
    if (v14) {
      ++v4;
    }
  }

  else
  {
    do
    {
      int v16 = *v11++;
      *v9++ = v16;
    }

    while ((unint64_t)v11 < v12);
  }

  v8[5] = v4;
  __Bfree_D2A(a1);
  return v8;
}

uint64_t __cmp_D2A(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 20);
  uint64_t v4 = *(int *)(a2 + 20);
  uint64_t result = (v3 - v4);
  if (v3 == (_DWORD)v4)
  {
    unint64_t v6 = a1 + 24;
    unint64_t v7 = v6 + 4 * v4;
    int v8 = (unsigned int *)(a2 + 4 * v4 + 20);
    while (1)
    {
      unsigned int v10 = *(_DWORD *)(v7 - 4);
      v7 -= 4LL;
      unsigned int v9 = v10;
      unsigned int v11 = *v8--;
      BOOL v12 = v9 >= v11;
      if (v9 != v11) {
        break;
      }
      if (v7 <= v6) {
        return 0LL;
      }
    }

    if (v12) {
      return 1LL;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }

  return result;
}

_DWORD *__diff_D2A(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int *)(a2 + 20);
  int v3 = *(_DWORD *)(a1 + 20) - v2;
  if (!v3)
  {
    unint64_t v4 = a1 + 24 + 4 * v2;
    int v5 = (unsigned int *)(a2 + 4 * v2 + 20);
    while (1)
    {
      unsigned int v7 = *(_DWORD *)(v4 - 4);
      v4 -= 4LL;
      unsigned int v6 = v7;
      unsigned int v8 = *v5--;
      BOOL v9 = v6 >= v8;
      if (v6 != v8) {
        break;
      }
      if (v4 <= a1 + 24)
      {
        uint64_t result = __Balloc_D2A(0);
        *(void *)(result + 5) = 1LL;
        return result;
      }
    }

    if (v9) {
      int v3 = 1;
    }
    else {
      int v3 = -1;
    }
  }

  unsigned int v11 = v3 >> 31;
  if (v3 >= 0) {
    uint64_t v12 = a2;
  }
  else {
    uint64_t v12 = a1;
  }
  if (v3 >= 0) {
    uint64_t v13 = a1;
  }
  else {
    uint64_t v13 = a2;
  }
  uint64_t result = __Balloc_D2A(*(_DWORD *)(v13 + 8));
  unint64_t v14 = 0LL;
  uint64_t v15 = 0LL;
  int v16 = result + 6;
  result[4] = v11;
  uint64_t v17 = *(int *)(v13 + 20);
  uint64_t v18 = v12 + 24;
  unint64_t v19 = v12 + 24 + 4LL * *(int *)(v12 + 20);
  do
  {
    unint64_t v20 = *(unsigned int *)(v13 + v14 + 24) - (v15 + *(unsigned int *)(v18 + v14));
    uint64_t v15 = HIDWORD(v20) & 1;
    v16[v14 / 4] = v20;
    v14 += 4LL;
  }

  while (v18 + v14 < v19);
  unint64_t v21 = v13 + 24 + 4 * v17;
  if (v13 + v14 + 24 >= v21)
  {
    int v26 = (char *)&v16[v14 / 4];
  }

  else
  {
    unint64_t v22 = 0LL;
    do
    {
      unint64_t v23 = *(unsigned int *)(v13 + v22 + v14 + 24) - v15;
      v16[v22 / 4 + v14 / 4] = v23;
      uint64_t v15 = HIDWORD(v23) & 1;
      unint64_t v24 = v22 + 4;
      unint64_t v25 = v13 + v14 + v22 + 28;
      v22 += 4LL;
    }

    while (v25 < v21);
    int v26 = (char *)&v16[v14 / 4] + v24;
  }

  int v27 = v17 + 1;
  unsigned int v28 = v26 - 4;
  do
  {
    int v29 = *(_DWORD *)v28;
    v28 -= 4;
    --v27;
  }

  while (!v29);
  result[5] = v27;
  return result;
}

double __b2d_D2A(uint64_t a1, _DWORD *a2)
{
  unint64_t v3 = a1 + 24;
  uint64_t v4 = a1 + 24 + 4LL * *(int *)(a1 + 20);
  unint64_t v6 = v4 - 4;
  unsigned int v5 = *(_DWORD *)(v4 - 4);
  unsigned int v7 = __hi0bits_D2A(v5);
  *a2 = 32 - v7;
  if (v7 > 0xA)
  {
    if (v6 <= v3)
    {
      unsigned int v10 = 0;
    }

    else
    {
      unsigned int v10 = *(_DWORD *)(v4 - 8);
      unint64_t v6 = v4 - 8;
    }

    char v11 = v7 - 11;
    if (v7 == 11)
    {
      int v8 = v5;
    }

    else
    {
      int v8 = (v5 << v11) | (v10 >> (43 - v7));
      if (v6 <= v3) {
        unsigned int v12 = 0;
      }
      else {
        unsigned int v12 = *(_DWORD *)(v6 - 4);
      }
      unsigned int v10 = (v12 >> (43 - v7)) | (v10 << v11);
    }
  }

  else
  {
    int v8 = v5 >> (11 - v7);
    if (v6 <= v3) {
      unsigned int v9 = 0;
    }
    else {
      unsigned int v9 = *(_DWORD *)(v4 - 8);
    }
    unsigned int v10 = (v9 >> (11 - v7)) | (v5 << (v7 + 21));
  }

  *(void *)&double result = v10 | ((unint64_t)(v8 | 0x3FF00000u) << 32);
  return result;
}

_DWORD *__d2b_D2A(_DWORD *a1, _DWORD *a2, double a3)
{
  int v6 = 1;
  unsigned int v7 = __Balloc_D2A(1);
  uint64_t v8 = (*(void *)&a3 >> 52) & 0x7FFLL;
  if (((*(void *)&a3 >> 52) & 0x7FF) != 0) {
    unsigned int v9 = HIDWORD(a3) & 0xFFFFF | 0x100000;
  }
  else {
    unsigned int v9 = HIDWORD(a3) & 0xFFFFF;
  }
  unsigned int v17 = v9;
  unsigned int v18 = LODWORD(a3);
  if (LODWORD(a3))
  {
    int v10 = __lo0bits_D2A(&v18);
    unsigned int v11 = v9 << -(char)v10;
    unsigned int v12 = v9 >> v10;
    if (!v10) {
      unsigned int v11 = 0;
    }
    v7[6] = v18 | v11;
    v7[7] = v12;
    if (v12) {
      int v6 = 2;
    }
    else {
      int v6 = 1;
    }
    v7[5] = v6;
    if ((_DWORD)v8) {
      goto LABEL_11;
    }
LABEL_13:
    *a1 = v10 - 1074;
    int v13 = 32 * v6 - __hi0bits_D2A(v7[v6 - 1 + 6]);
    goto LABEL_14;
  }

  int v14 = __lo0bits_D2A(&v17);
  unsigned int v15 = v17;
  v7[5] = 1;
  v7[6] = v15;
  int v10 = v14 + 32;
  if (!(_DWORD)v8) {
    goto LABEL_13;
  }
LABEL_11:
  *a1 = v8 + v10 - 1075;
  int v13 = 53 - v10;
LABEL_14:
  *a2 = v13;
  return v7;
}

_BYTE *__strcp_D2A(_BYTE *result, unsigned __int8 *a2)
{
  int v2 = *a2;
  *double result = v2;
  if (v2)
  {
    unint64_t v3 = a2 + 1;
    do
    {
      int v4 = *v3++;
      *++double result = v4;
    }

    while (v4);
  }

  return result;
}

int *__s2b_D2A(char *a1, int a2, int a3, int a4, int a5)
{
  if (a3 < 10)
  {
    int v10 = 0;
  }

  else
  {
    int v10 = 0;
    int v11 = 1;
    do
    {
      BOOL v12 = (a3 + 8) / 9 <= 2 * v11;
      v11 *= 2;
      ++v10;
    }

    while (!v12);
  }

  double result = __Balloc_D2A(v10);
  result[5] = 1;
  result[6] = a4;
  if (a2 < 10)
  {
    a5 += 9;
    a2 = 9;
  }

  else
  {
    a1 += 9;
    int v14 = a2 - 9;
    do
    {
      int v15 = *a1++;
      double result = __multadd_D2A(result, 10, v15 - 48);
      --v14;
    }

    while (v14);
  }

  BOOL v16 = __OFSUB__(a3, a2);
  int v17 = a3 - a2;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    unsigned int v18 = &a1[a5];
    do
    {
      int v19 = *v18++;
      double result = __multadd_D2A(result, 10, v19 - 48);
      --v17;
    }

    while (v17);
  }

  return result;
}

double __ratio_D2A(uint64_t a1, uint64_t a2)
{
  double v4 = __b2d_D2A(a1, &v10);
  double v5 = __b2d_D2A(a2, &v9);
  int v6 = v10 - v9 + 32 * (*(_DWORD *)(a1 + 20) - *(_DWORD *)(a2 + 20));
  *(void *)&double v7 = LODWORD(v4) | ((unint64_t)(HIDWORD(v4) + (v6 << 20)) << 32);
  if (v6 < 1)
  {
    double v7 = v4;
    *(void *)&double v5 = LODWORD(v5) | ((unint64_t)(HIDWORD(v5) - (v6 << 20)) << 32);
  }

  return v7 / v5;
}

uint64_t __match_D2A(void *a1, _BYTE *a2)
{
  int v2 = (char *)(*a1 + 1LL);
  while (1)
  {
    int v3 = (char)*a2;
    if (!*a2) {
      break;
    }
    int v5 = *v2++;
    int v4 = v5;
    ++a2;
    int v6 = v5 + 32;
    if (v4 != v3) {
      return 0LL;
    }
  }

  *a1 = v2;
  return 1LL;
}

uint64_t __copybits_D2A(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3 = *(int *)(a3 + 20);
  if ((int)v3 < 1)
  {
    double v7 = (_DWORD *)result;
  }

  else
  {
    int v4 = (int *)(a3 + 24);
    unint64_t v5 = a3 + 24 + 4 * v3;
    uint64_t v6 = result;
    double v7 = (_DWORD *)result;
    do
    {
      int v8 = *v4++;
      *v7++ = v8;
      v6 += 4LL;
    }

    while ((unint64_t)v4 < v5);
  }

  return result;
}

uint64_t __any_on_D2A(uint64_t a1, int a2)
{
  unint64_t v2 = a1 + 24;
  int v3 = *(_DWORD *)(a1 + 20);
  BOOL v4 = a2 >> 5 < v3;
  if (a2 >> 5 <= v3)
  {
    int v5 = a2 & 0x1F;
    if (!v4 || v5 == 0)
    {
      int v3 = a2 >> 5;
    }

    else
    {
      int v7 = -1 << v5;
      int v3 = a2 >> 5;
      if ((*(_DWORD *)(v2 + 4LL * (a2 >> 5)) & ~v7) != 0) {
        return 1LL;
      }
    }
  }

  for (unint64_t i = v2 + 4LL * v3; i > v2; i -= 4LL)
  {
    if (*(_DWORD *)(i - 4)) {
      return 1LL;
    }
  }

  return 0LL;
}

int *__sum_D2A(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 20);
  int v3 = *(_DWORD *)(a2 + 20);
  if (v2 >= v3) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = a2;
  }
  if (v2 >= v3) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = a1;
  }
  uint64_t v6 = __Balloc_D2A(*(_DWORD *)(v4 + 8));
  uint64_t v7 = 0LL;
  unsigned int v8 = 0;
  int v9 = *(_DWORD *)(v4 + 20);
  v6[5] = v9;
  uint64_t v10 = v4 + 24;
  uint64_t v11 = *(int *)(v5 + 20);
  unint64_t v12 = (unint64_t)&v6[v11 + 6];
  do
  {
    int v13 = &v6[v7];
    unsigned int v14 = *(_DWORD *)(v10 + v7 * 4);
    unsigned int v15 = *(_DWORD *)(v5 + 24 + v7 * 4);
    unsigned int v16 = v8 + (unsigned __int16)v14 + (unsigned __int16)v15;
    unsigned int v17 = HIWORD(v15) + HIWORD(v14) + (HIWORD(v16) & 1);
    unsigned int v8 = HIWORD(v17);
    *((_WORD *)v13 + 13) = v17;
    *((_WORD *)v13 + 12) = v16;
    unsigned int v18 = &v6[++v7 + 6];
  }

  while ((unint64_t)v18 < v12);
  unint64_t v19 = v12 + 4LL * (*(_DWORD *)(v4 + 20) - (int)v11);
  if ((unint64_t)v18 < v19)
  {
    unint64_t v20 = (unsigned int *)(v10 + v7 * 4);
    do
    {
      unsigned int v21 = *v20++;
      unsigned int v22 = v8 + (unsigned __int16)v21;
      unsigned int v8 = (HIWORD(v22) + HIWORD(v21)) >> 16;
      *((_WORD *)v18 + 1) = HIWORD(v22) + HIWORD(v21);
      *(_WORD *)v18++ = v22;
    }

    while ((unint64_t)v18 < v19);
  }

  if (v8)
  {
    if (v9 == v6[3])
    {
      unint64_t v23 = __Balloc_D2A(v6[2] + 1);
      _platform_memmove();
      __Bfree_D2A(v6);
      int v9 = v23[5];
      uint64_t v6 = v23;
    }

    v6[5] = v9 + 1;
    v6[v9 + 6] = 1;
  }

  return v6;
}

double __ulp_D2A(uint64_t a1)
{
  uint64_t v1 = *(_DWORD *)(a1 + 4) & 0x7FF00000;
  unint64_t v2 = (unint64_t)(54525952 - v1) >> 20;
  LODWORD(v3) = 1 << (51 - v2);
  else {
    uint64_t v3 = v3;
  }
  unint64_t v4 = 0x80000uLL >> v2 << 32;
  *(void *)&double v5 = (unint64_t)(v1 - 54525952) << 32;
  return v5;
}

unsigned int alarm(unsigned int a1)
{
  v5.it_interval.__darwin_suseconds_t tv_usec = 0;
  v5.it_interval.unsigned int tv_sec = 0LL;
  v5.it_value.unsigned int tv_sec = a1;
  v5.it_value.__darwin_suseconds_t tv_usec = 0;
  int v1 = setitimer(0, &v5, &v4);
  if (v4.it_value.tv_usec) {
    unsigned int tv_sec = LODWORD(v4.it_value.tv_sec) + 1;
  }
  else {
    unsigned int tv_sec = v4.it_value.tv_sec;
  }
  if (v1 < 0) {
    return -1;
  }
  else {
    return tv_sec;
  }
}

uint32_t arc4random(void)
{
  return v1;
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
}

void arc4_init()
{
  if (!rng)
  {
    rng = ccrng();
    if (!rng) {
      arc4_init_cold_1(&v0, v1);
    }
  }

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return v2;
}

uint64_t OUTLINED_FUNCTION_0_1()
{
  return _simple_dprintf();
}

char *__cdecl basename_r(const char *a1, char *a2)
{
  if (!a1 || (int v4 = *(unsigned __int8 *)a1, !*a1))
  {
    __int16 v8 = 46;
    goto LABEL_10;
  }

  uint64_t v5 = _platform_strlen() - 1;
  do
  {
    uint64_t v6 = v5;
    uint64_t v7 = &a1[v5];
    if (&a1[v5] <= a1) {
      break;
    }
    --v5;
  }

  while (*v7 == 47);
  if (!v6 && v4 == 47)
  {
    __int16 v8 = 47;
LABEL_10:
    *(_WORD *)a2 = v8;
    return a2;
  }

  uint64_t v10 = 1LL;
  do
  {
    uint64_t v11 = v7;
    unint64_t v12 = v10;
    if (v7 <= a1) {
      break;
    }
    --v7;
    ++v10;
  }

  while (*(v11 - 1) != 47);
  if (v12 < 0x400)
  {
    _platform_memmove();
    a2[v12] = 0;
  }

  else
  {
    a2 = 0LL;
    *__error() = 63;
  }

  return a2;
}

char *__cdecl basename(char *a1)
{
  uint32_t v2 = (char *)basename_bname;
  if (basename_bname) {
    return basename_r(a1, v2);
  }
  double result = (char *)malloc(0x400uLL);
  uint32_t v2 = result;
  basename_bname = (uint64_t)result;
  if (result) {
    return basename_r(a1, v2);
  }
  return result;
}

clock_t clock(void)
{
  if (getrusage(0, &v1)) {
    return -1LL;
  }
  else {
    return v1.ru_stime.tv_usec + (uint64_t)v1.ru_utime.tv_usec + 1000000 * (v1.ru_stime.tv_sec + v1.ru_utime.tv_sec);
  }
}

int closedir(DIR *a1)
{
  p_dd_locuint64_t k = &a1->__dd_lock;
  pthread_mutex_lock(&a1->__dd_lock);
  a1->__dd_fd = -1;
  a1->__dd_loc = 0LL;
  free(a1->__dd_buf);
  _reclaim_telldir((uint64_t)a1);
  pthread_mutex_unlock(p_dd_lock);
  pthread_mutex_destroy(p_dd_lock);
  free(a1);
  return close_NOCANCEL();
}

char *__cdecl ctermid(char *result)
{
  if (!result) {
    return ctermid_def;
  }
  uint64_t v1 = *(void *)ctermid_def;
  result[8] = ctermid_def[8];
  *(void *)double result = v1;
  return result;
}

char *__cdecl ctermid_r(char *result)
{
  if (result)
  {
    uint64_t v1 = *(void *)ctermid_def;
    result[8] = ctermid_def[8];
    *(void *)double result = v1;
  }

  return result;
}

int daemon(int a1, int a2)
{
  v14.__sigaction_u.__sa_handler = (void (__cdecl *)(int))1;
  *(void *)&v14.sa_masuint64_t k = 0LL;
  int v4 = sigaction(1, &v14, &v15);
  mach_port_name_t v5 = 0;
  mach_port_t parent_port = 0;
  uint64_t v6 = (mach_port_t *)MEMORY[0x1895FF920];
  uint64_t v7 = (ipc_space_t *)MEMORY[0x1895FFD48];
  while (1)
  {
    if (v5)
    {
      mach_port_deallocate(*v7, v5);
      p_mach_port_t parent_port = &parent_port;
    }

    else
    {
      p_mach_port_t parent_port = v6;
    }

    mach_port_name_t v5 = *p_parent_port;
    if (bootstrap_parent(*p_parent_port, &parent_port)) {
      break;
    }
    if (parent_port == v5)
    {
      task_set_special_port(*v7, 4, v5);
      *uint64_t v6 = parent_port;
      break;
    }
  }

  int result = fork();
  if (result != -1)
  {
    if (result) {
      __exit();
    }
    pid_t v10 = setsid();
    int v11 = *__error();
    if (v4 != -1) {
      sigaction(1, &v15, 0LL);
    }
    if (v10 == -1)
    {
      *__error() = v11;
      return -1;
    }

    if (a1)
    {
      if (!a2)
      {
LABEL_18:
        int v12 = open_NOCANCEL();
        if (v12 != -1)
        {
          int v13 = v12;
          dup2(v12, 0);
          dup2(v13, 1);
          dup2(v13, 2);
          int result = 0;
          if (v13 < 3) {
            return result;
          }
          close_NOCANCEL();
        }
      }
    }

    else
    {
      chdir("/");
      if (!a2) {
        goto LABEL_18;
      }
    }

    return 0;
  }

  return result;
}

char *__cdecl dirname_r(const char *a1, char *a2)
{
  uint32_t v2 = a2;
  if (a1 && (int v4 = *(unsigned __int8 *)a1, *a1))
  {
    mach_port_name_t v5 = &a1[_platform_strlen() - 1];
    while (v5 > a1)
    {
      int v6 = *(unsigned __int8 *)v5--;
      if (v6 != 47)
      {
        while (v5 > a1)
        {
          int v7 = *(unsigned __int8 *)v5--;
          if (v7 == 47)
          {
            ++v5;
            goto LABEL_12;
          }
        }

        goto LABEL_18;
      }
    }

char *__cdecl dirname(char *a1)
{
  uint32_t v2 = (char *)dirname_dname;
  if (dirname_dname) {
    return dirname_r(a1, v2);
  }
  int result = (char *)malloc(0x400uLL);
  uint32_t v2 = result;
  dirname_dname = (uint64_t)result;
  if (result) {
    return dirname_r(a1, v2);
  }
  return result;
}

double drand48(void)
{
  _rand48_seed = _rand48_add + _rand48_mult * _rand48_seed;
  unint64_t v0 = _rand48_seed & 0xFFFFFFFFFFFFLL;
  if ((_rand48_seed & 0xFFFFFFFFFFFFLL) == 0) {
    return 0.0;
  }
  uint64_t v1 = 32 * v0;
  unint64_t v2 = v0 >> 47;
  unint64_t v3 = __clz(v1 & 0xFFFFFFFFFFFE0LL);
  uint64_t v4 = v1 << (v3 - 11);
  uint64_t v5 = 0x4090000000000000LL - (v3 << 52);
  BOOL v6 = v2 == 0;
  if (v2) {
    uint64_t v7 = v1;
  }
  else {
    uint64_t v7 = v4;
  }
  if (v6) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = 0x3FE0000000000000LL;
  }
  *(void *)&double result = v8 | v7 & 0x800FFFFFFFFFFFE0LL;
  return result;
}

double erand48(unsigned __int16 a1[3])
{
  unint64_t v1 = _rand48_add + (*(unsigned int *)a1 | ((unint64_t)a1[2] << 32)) * _rand48_mult;
  *a1 = _rand48_add + *(_DWORD *)a1 * _rand48_mult;
  a1[1] = WORD1(v1);
  a1[2] = WORD2(v1);
  unint64_t v2 = v1 & 0xFFFFFFFFFFFFLL;
  if (!v2) {
    return 0.0;
  }
  uint64_t v3 = 32 * v2;
  unint64_t v4 = v2 >> 47;
  unint64_t v5 = __clz(v3 & 0xFFFFFFFFFFFE0LL);
  uint64_t v6 = v3 << (v5 - 11);
  uint64_t v7 = 0x4090000000000000LL - (v5 << 52);
  BOOL v8 = v4 == 0;
  if (v4) {
    uint64_t v9 = v3;
  }
  else {
    uint64_t v9 = v6;
  }
  if (v8) {
    uint64_t v10 = v7;
  }
  else {
    uint64_t v10 = 0x3FE0000000000000LL;
  }
  *(void *)&double result = v10 | v9 & 0x800FFFFFFFFFFFE0LL;
  return result;
}

void _e_visprintf(FILE *a1, const char *a2, char *a3)
{
  v15[1] = a3;
  vasprintf(v15, a2, a3);
  unint64_t v5 = v15[0];
  if (!v15[0]) {
    goto LABEL_13;
  }
  uint64_t v6 = _platform_strlen();
  uint64_t v7 = (char *)malloc((4 * v6) | 1);
  if (!v7)
  {
    free(v5);
LABEL_13:
    vfprintf(a1, a2, a3);
    return;
  }

  BOOL v8 = v7;
  int v9 = *v5;
  uint64_t v10 = v7;
  if (*v5)
  {
    int v11 = (unsigned __int8 *)(v5 + 1);
    uint64_t v10 = v7;
    do
    {
      int v12 = escape[v9];
      if (v12 == 255)
      {
        sprintf(v10, "\\%03o", v9);
        v10 += 4;
      }

      else if (escape[v9])
      {
        *uint64_t v10 = 92;
        v10[1] = v12;
        v10 += 2;
      }

      else
      {
        *v10++ = v9;
      }

      int v13 = *v11++;
      int v9 = v13;
    }

    while (v13);
  }

  *uint64_t v10 = 0;
  fputs(v8, a1);
  free(v8);
  free(v15[0]);
}

void err_set_file(void *a1)
{
  unint64_t v1 = __stderrp;
  if (a1) {
    unint64_t v1 = a1;
  }
  _e_err_file = (uint64_t)v1;
}

void err_set_exit(void (__cdecl *a1)(int))
{
  if (_e_err_exit == 1) {
    _Block_release(off_18C52C3F0);
  }
  _e_err_exit = 2 * (a1 != 0LL);
  off_18C52C3F0 = (uint64_t (*)(void))a1;
}

void err_set_exit_b(void *a1)
{
  if (_e_err_exit == 1) {
    _Block_release(off_18C52C3F0);
  }
  _e_err_exit = a1 != 0LL;
  off_18C52C3F0 = (uint64_t (*)(void))_Block_copy(a1);
}

void OUTLINED_FUNCTION_0_2()
{
}

int *OUTLINED_FUNCTION_1_0()
{
  return __error();
}

uint64_t OUTLINED_FUNCTION_2_0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 16))(a1, v1);
}

size_t OUTLINED_FUNCTION_3_0(const void *a1, uint64_t a2, uint64_t a3, FILE *a4)
{
  return fwrite(a1, 2uLL, 1uLL, a4);
}

int execl(const char *__path, const char *__arg0, ...)
{
  uint64_t v3 = 8LL;
  do
  {
    unint64_t v4 = v13;
    v13 += 8;
    v3 += 8LL;
  }

  while (*v4);
  MEMORY[0x1895FE128](__path, __arg0);
  uint64_t v6 = (va_list *)((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  va_copy(v13, va);
  *uint64_t v6 = v7;
  uint64_t v8 = 1LL;
  do
  {
    int v9 = (char **)v13;
    v13 += 8;
    uint64_t v10 = *v9;
    v6[v8++] = v10;
  }

  while (v10);
  int v11 = _NSGetEnviron();
  return execve(__path, v6, *v11);
}

int execle(const char *__path, const char *__arg0, ...)
{
  uint64_t v2 = 8LL;
  do
  {
    uint64_t v3 = v13;
    v13 += 8;
    v2 += 8LL;
  }

  while (*v3);
  unint64_t v4 = (const char *)MEMORY[0x1895FE128](__path, __arg0);
  uint64_t v6 = (va_list *)((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  va_copy(v13, va);
  *uint64_t v6 = v7;
  uint64_t v8 = 1LL;
  do
  {
    int v9 = (char **)v13;
    v13 += 8;
    uint64_t v10 = *v9;
    v6[v8++] = v10;
  }

  while (v10);
  int v11 = (char *const **)v13;
  v13 += 8;
  return execve(v4, v6, *v11);
}

int execlp(const char *__file, const char *__arg0, ...)
{
  uint64_t v2 = 8LL;
  do
  {
    uint64_t v3 = v12;
    v12 += 8;
    v2 += 8LL;
  }

  while (*v3);
  unint64_t v4 = (const char *)MEMORY[0x1895FE128](__file, __arg0);
  uint64_t v6 = (va_list *)((char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  va_copy(v12, va);
  *uint64_t v6 = v7;
  uint64_t v8 = 1LL;
  do
  {
    int v9 = (char **)v12;
    v12 += 8;
    uint64_t v10 = *v9;
    v6[v8++] = v10;
  }

  while (v10);
  execvp(v4, v6);
  return -1;
}

int execvp(const char *__file, char *const *__argv)
{
  unint64_t v4 = *_NSGetEnviron();
  uint64_t v5 = getenv("PATH");
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = "/usr/bin:/bin";
  }
  execvPe(__file, (uint64_t)v6, __argv, v4);
  return -1;
}

int execv(const char *__path, char *const *__argv)
{
  unint64_t v4 = _NSGetEnviron();
  execve(__path, __argv, *v4);
  return -1;
}

int execvP(const char *__file, const char *__searchpath, char *const *__argv)
{
  uint64_t v6 = _NSGetEnviron();
  execvPe(__file, (uint64_t)__searchpath, __argv, *v6);
  return -1;
}

_DWORD *execvPe(const char *a1, uint64_t a2, char *const *a3, char *const *a4)
{
  int v27 = a4;
  unint64_t v4 = a3;
  unint64_t v25 = a3;
  if (!_platform_strchr())
  {
    if (*a1)
    {
      uint64_t v7 = _platform_strlen();
      int v30 = (char *)&v24 - ((MEMORY[0x1895FE128](v7, v8) + 16) & 0xFFFFFFFFFFFFFFF0LL);
      _platform_strcpy();
      int v26 = 0;
      unsigned int v28 = v31;
      goto LABEL_5;
    }

    goto LABEL_23;
  }

  int v26 = 0;
  int v30 = 0LL;
  for (unint64_t i = a1; ; unint64_t i = v28)
  {
    execve(i, v4, v27);
    double result = __error();
    uint64_t v15 = *result;
    unsigned int v28 = i;
    if (v15 <= 0x3F)
    {
      if (((1LL << v15) & 0xC000000000100004LL) != 0) {
        goto LABEL_5;
      }
      if (((1LL << v15) & 0x4001080) != 0) {
        return result;
      }
      if (v15 == 8)
      {
        uint64_t v17 = 0LL;
        uint64_t v18 = 1LL;
        do
        {
          unint64_t v19 = v4[v17++];
          ++v18;
        }

        while (v19);
        MEMORY[0x1895FE128](result, v14);
        unsigned int v21 = (char *)&v24 - v20;
        if (v22 == 2)
        {
          *((void *)v21 + 2) = 0LL;
          unint64_t v23 = "sh";
        }

        else
        {
          unint64_t v23 = *v4;
          _platform_memmove();
        }

        *(void *)unsigned int v21 = v23;
        *((void *)v21 + 1) = i;
        return (_DWORD *)execve("/bin/sh", (char *const *)v21, v27);
      }
    }

    int v16 = *__error();
    if (!stat(i, &v29))
    {
      int v26 = 1;
      if (v16 != 13)
      {
        double result = __error();
        *double result = v16;
        return result;
      }
    }

const char *__cdecl fmtcheck(const char *a1, const char *a2)
{
  if (!a1) {
    return a2;
  }
  uint64_t v3 = a1;
  int v4 = 0;
  int v9 = a2;
  uint64_t v10 = a1;
  while (1)
  {
    int next_format = get_next_format((unsigned __int8 **)&v10, v4);
    if (next_format == 23) {
      break;
    }
    int v6 = next_format;
    if (next_format != 24)
    {
      int v7 = get_next_format((unsigned __int8 **)&v9, v4);
      int v4 = v6;
      if (v6 == v7) {
        continue;
      }
    }

    return a2;
  }

  return v3;
}

uint64_t get_next_format(unsigned __int8 **a1, int a2)
{
  if (a2 == 22)
  {
    ++*a1;
    return get_next_format_from_precision(a1);
  }

  else
  {
    if (a2 == 21)
    {
      ++*a1;
      return get_next_format_from_width(a1);
    }

    do
    {
      uint64_t v4 = _platform_strchr();
      if (!v4)
      {
        *a1 = 0LL;
        return 23LL;
      }

      int v5 = *(unsigned __int8 *)(v4 + 1);
    }

    while (v5 == 37);
    if (*(_BYTE *)(v4 + 1))
    {
      int v6 = (unsigned __int8 *)(v4 + 1);
      while (_platform_memchr())
      {
        int v7 = *++v6;
        LOBYTE(v5) = v7;
        if (!v7) {
          goto LABEL_18;
        }
      }

      if (v5 == 42)
      {
        *a1 = v6;
        return 21LL;
      }

uint64_t get_next_format_from_width(unsigned __int8 **a1)
{
  uint64_t v1 = *a1;
  if (**a1 != 46) {
    goto LABEL_7;
  }
  int v3 = (char)*++v1;
  int v2 = v3;
  if (v3 == 42)
  {
    *a1 = v1;
    return 22LL;
  }

  if ((v2 - 48) <= 9)
  {
    do
    {
      int v5 = (char)*++v1;
      LOBYTE(v2) = v5;
    }

    while ((v5 - 48) < 0xA);
  }

  if (!(_BYTE)v2)
  {
    *a1 = v1;
    return 24LL;
  }

  else
  {
LABEL_7:
    *a1 = v1;
    return get_next_format_from_precision(a1);
  }

uint64_t get_next_format_from_precision(unsigned __int8 **a1)
{
  int v2 = 0;
  int v3 = *a1;
  uint64_t v4 = *a1;
  int v5 = (char)**a1;
  int v6 = **a1;
  uint64_t v7 = 1LL;
  if (v5 > 115)
  {
    if (v5 == 116)
    {
      int v9 = 7;
    }

    else
    {
      if (v5 != 122) {
        goto LABEL_16;
      }
      int v9 = 8;
    }

LABEL_59:
    *a1 = v4;
    return 24LL;
  }

  switch(v2)
  {
    case 0:
      *a1 = v4;
      uint64_t result = 11LL;
      break;
    case 1:
      *a1 = v4;
      uint64_t result = 9LL;
      break;
    case 2:
      *a1 = v4;
      uint64_t result = 10LL;
      break;
    case 3:
      *a1 = v4;
      uint64_t result = 12LL;
      break;
    case 4:
      *a1 = v4;
      uint64_t result = 13LL;
      break;
    case 5:
      *a1 = v4;
      uint64_t result = 14LL;
      break;
    case 7:
      *a1 = v4;
      uint64_t result = 15LL;
      break;
    case 8:
      *a1 = v4;
      uint64_t result = 16LL;
      break;
    default:
      goto LABEL_59;
  }

  return result;
}

int fmtmsg(uint64_t a1, const char *a2, int a3, const char *a4, const char *a5, const char *a6)
{
  __int16 v10 = a1;
  if (a5) {
    int v11 = a5;
  }
  else {
    int v11 = "";
  }
  if ((a1 & 0x100) != 0)
  {
    BOOL v13 = getenv("MSGVERB");
    if (v13)
    {
      unsigned int v14 = v13;
      if (*v13)
      {
        if ((unint64_t)_platform_strlen() <= 0x1E)
        {
          uint64_t v15 = strdup(v14);
          if (!v15) {
            return 3;
          }
          int v16 = v15;
          if (nextcomp())
          {
            stat v29 = a6;
            int v17 = 0;
            do
            {
              uint64_t v18 = 0LL;
              --v17;
              do
              {
                v18 += 8LL;
              }

              while (v18 != 40);
            }

            while (nextcomp());
            if (v17)
            {
              free(v16);
              a6 = v29;
              goto LABEL_20;
            }

            a6 = v29;
          }

_BYTE *printfmt(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2) {
    size_t v11 = _platform_strlen() + 32;
  }
  else {
    size_t v11 = 32LL;
  }
  if (a4) {
    v11 += _platform_strlen();
  }
  if (a5) {
    v11 += _platform_strlen();
  }
  if (a6) {
    v11 += _platform_strlen();
  }
  unsigned int v12 = malloc(v11);
  BOOL v13 = v12;
  if (v12)
  {
    *unsigned int v12 = 0;
    if (nextcomp())
    {
      while (1)
      {
        int v14 = _platform_strcmp();
        if (a2 && !v14)
        {
          if (*v13) {
            _platform_strlcat();
          }
          goto LABEL_28;
        }

        int v15 = _platform_strcmp();
        if ((a3 - 1) <= 3 && !v15)
        {
          if (*v13) {
            _platform_strlcat();
          }
          goto LABEL_28;
        }

        int v16 = _platform_strcmp();
        if (!a4 || v16)
        {
          int v17 = _platform_strcmp();
          if (a5 && !v17)
          {
            if (*v13) {
              _platform_strlcat();
            }
LABEL_27:
            _platform_strlcat();
            goto LABEL_28;
          }

          int v18 = _platform_strcmp();
          if (!a6 || v18) {
            goto LABEL_29;
          }
          if (*v13) {
            _platform_strlcat();
          }
        }

        else if (*v13)
        {
          goto LABEL_27;
        }

char *nextcomp()
{
  if (nextcomp_lmsgverb)
  {
    unint64_t v0 = 0LL;
  }

  else
  {
    _platform_strlcpy();
    unint64_t v0 = &nextcomp_lmsgverb;
  }

  uint64_t result = strtok_r(v0, ":", &nextcomp_state);
  if (!result) {
    nextcomp_lmsgverb = 0;
  }
  return result;
}

int fnmatch(const char *a1, const char *a2, int a3)
{
  int v5 = a1;
  uint64_t v6 = __locale_key;
  uint64_t v7 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v6);
  memset(&v32._mbstateL + 8, 0, 64);
  if (v7) {
    int v8 = v7;
  }
  else {
    int v8 = (_xlocale *)&__global_locale;
  }
  memset(&v32, 0, 64);
  memset(&v31, 0, sizeof(v31));
  size_t v9 = mbrtowc_l(&v28, a1, 6uLL, &v32, v8);
  if (v9 > 0xFFFFFFFFFFFFFFFDLL) {
    return 2;
  }
  size_t v11 = v9;
  unsigned int v12 = 0LL;
  BOOL v13 = 0LL;
  int v26 = a2;
  while (1)
  {
    size_t v14 = mbrtowc_l(&v27, a2, 6uLL, &v31, v8);
    if (v14 >= 0xFFFFFFFFFFFFFFFELL)
    {
      __darwin_ct_rune_t v27 = *(unsigned __int8 *)a2;
      memset(&v31, 0, sizeof(v31));
      size_t v14 = 1LL;
    }

    int v15 = &v5[v11];
    int result = v28;
    if (v28 > 62)
    {
      if (v28 == 63)
      {
        if (v27 == 47)
        {
          if ((a3 & 2) == 0) {
            goto LABEL_50;
          }
        }

        else
        {
          if (!v27) {
            return 1;
          }
          if ((a3 & 4) == 0 || v27 != 46 || a2 != v26 && ((a3 & 2) == 0 || *(a2 - 1) != 47))
          {
LABEL_50:
            a2 += v14;
            goto LABEL_79;
          }
        }

        goto LABEL_70;
      }

      if (v28 != 91)
      {
        if (v28 == 92)
        {
          if ((a3 & 1) != 0)
          {
            int result = 92;
          }

          else
          {
            size_t v16 = mbrtowc_l(&v28, &v5[v11], 6uLL, &v32, v8);
            if (v16 > 0xFFFFFFFFFFFFFFFDLL) {
              return 2;
            }
            size_t v17 = v16;
            if (v16)
            {
              int result = v28;
            }

            else
            {
              int result = 92;
              __int32 v28 = 92;
            }

            v15 += v17;
          }
        }

LABEL_70:
        if (!v13) {
          return 1;
        }
        size_t v24 = mbrtowc(&v27, v12, 6uLL, &v33);
        if (v24 < 0xFFFFFFFFFFFFFFFELL)
        {
          __darwin_ct_rune_t v25 = v27;
        }

        else
        {
          __darwin_ct_rune_t v25 = *(unsigned __int8 *)v12;
          __darwin_ct_rune_t v27 = v25;
          memset(&v33, 0, sizeof(v33));
          size_t v24 = 1LL;
        }

        if (v25 == 47)
        {
          if ((a3 & 2) != 0) {
            return 1;
          }
        }

        else if (!v25)
        {
          return 1;
        }

        a2 = &v12[v24];
        mbstate_t v32 = v34;
        mbstate_t v31 = v33;
        int v15 = v13;
        v12 += v24;
        goto LABEL_79;
      }

      if (v27 == 47)
      {
        if ((a3 & 2) != 0) {
          goto LABEL_70;
        }
      }

      else
      {
        if (!v27) {
          return 1;
        }
        if ((a3 & 4) != 0 && v27 == 46 && (a2 == v26 || (a3 & 2) != 0 && *(a2 - 1) == 47)) {
          goto LABEL_70;
        }
      }

      int v20 = rangematch(&v5[v11], v27, &a2[v14], a3, &v30, &v29, &v32, &v31, v8);
      if (v20)
      {
        if (v20 == 1)
        {
          a2 = v29;
          int v15 = v30;
        }

        else if (v20 == -1)
        {
          return 2;
        }

        goto LABEL_79;
      }

      goto LABEL_70;
    }

    if (!v28)
    {
      goto LABEL_70;
    }

    if (v28 != 42) {
      goto LABEL_61;
    }
    int v15 = &v5[v11 - 1];
    do
    {
      int v19 = *(unsigned __int8 *)++v15;
      int v18 = v19;
    }

    while (v19 == 42);
    if ((a3 & 4) != 0 && v27 == 46 && (a2 == v26 || (a3 & 2) != 0 && *(a2 - 1) == 47)) {
      goto LABEL_70;
    }
    if (v18 != 47) {
      break;
    }
    if ((a3 & 2) == 0) {
      goto LABEL_57;
    }
    a2 = (const char *)_platform_strchr();
    if (!a2) {
      return 1;
    }
LABEL_79:
    size_t v11 = mbrtowc_l(&v28, v15, 6uLL, &v32, v8);
    int v5 = v15;
    if (v11 >= 0xFFFFFFFFFFFFFFFELL) {
      return 2;
    }
  }

  if (v18)
  {
LABEL_57:
    mbstate_t v34 = v32;
    mbstate_t v33 = v31;
    BOOL v13 = v15;
    unsigned int v12 = a2;
    goto LABEL_79;
  }

  return (a3 & 0xA) == 2 && _platform_strchr() != 0;
}

                    size_t v11 = addcmd(v11, v15, v12, v16, v9);
                  }

                  if (v33)
                  {
                    if (v11 >= v8)
                    {
                      __int32 v28 = realloc(v4, 4LL * (v32 + 4));
                      if (!v28) {
                        goto LABEL_79;
                      }
                      size_t v11 = (unint64_t)v28 + v11 - (void)v4;
                      int v8 = (unint64_t)&v28[2 * v32 + 4];
                      v32 += 4;
                      uint64_t v4 = v28;
                    }

                    *(_BYTE *)size_t v11 = 88;
                    *(_WORD *)(v11 + 2) = v33 & v31;
                    v11 += 4LL;
                  }

                  BOOL v13 = *(unsigned __int8 *)v1;
                  if (!*v1)
                  {
                    *(_BYTE *)size_t v11 = 0;
                    _sm_compress_mode((unsigned __int8 *)v4);
                    return v4;
                  }

                  if (v13 == 44)
                  {
                    ++v1;
                    __int16 v10 = v32;
                    goto LABEL_9;
                  }

                  goto LABEL_24;
                }

                mbstate_t v33 = 73;
                break;
            }
          }
        }

        v12 |= 7u;
      }

      else if (v13 == 97)
      {
        unsigned int v12 = 4095;
      }

      else
      {
        if (v13 != 103) {
          goto LABEL_20;
        }
        v12 |= 0x438u;
      }

uint64_t rangematch( const char *a1, unsigned int a2, const char *a3, char a4, void *a5, const char **a6, mbstate_t *a7, mbstate_t *a8, locale_t a9)
{
  BOOL v13 = a1;
  int v14 = *(unsigned __int8 *)a1;
  if (v14 == 94 || v14 == 33)
  {
    BOOL v13 = a1 + 1;
    int v86 = 1;
  }

  else
  {
    int v86 = 0;
  }

  int v15 = &_DefaultRuneLocale;
  if ((a4 & 0x10) != 0)
  {
    if (a2 > 0x7F) {
      a2 = ___tolower_l(a2, a9);
    }
    else {
      a2 = _DefaultRuneLocale.__maplower[a2];
    }
  }

  __darwin_ct_rune_t v91 = 0;
  int v16 = *(unsigned __int8 *)v13;
  locale_t v17 = (locale_t)&__global_locale;
  if (a9 != (locale_t)-1LL) {
    locale_t v17 = a9;
  }
  if (a9) {
    locale_t v18 = v17;
  }
  else {
    locale_t v18 = (locale_t)&__c_locale;
  }
  uint64_t v19 = a2;
  locale_t v82 = v18;
  int v83 = &_DefaultRuneLocale.__runetype[a2];
  int v20 = v13;
  while (1)
  {
    if (v16 == 47)
    {
      BOOL v21 = (a4 & 1) == 0;
      if ((a4 & 2) != 0) {
        return 0LL;
      }
    }

    else
    {
      if (!v16) {
        return 0xFFFFFFFFLL;
      }
      if ((a4 & 1) != 0 || v16 != 92)
      {
        if (v16 == 91)
        {
          unsigned int v22 = *((unsigned __int8 *)v20 + 1);
          LODWORD(v15) = (char)v22;
          if (v22 <= 0x3D && ((1LL << v22) & 0x2400400000000000LL) != 0)
          {
            int v84 = a8;
            int v81 = (char *)a3;
            __darwin_ct_rune_t v23 = (char *)(v20 + 2);
            do
            {
              size_t v24 = (_BYTE *)_platform_strchr();
              if (!v24) {
                return 0xFFFFFFFFLL;
              }
              __darwin_ct_rune_t v25 = v24;
            }

            while (v24[1] != 93);
            if ((_DWORD)v15 == 61)
            {
              __int128 v37 = *((_OWORD *)&a7->_mbstateL + 5);
              __int128 v97 = *((_OWORD *)&a7->_mbstateL + 4);
              __int128 v98 = v37;
              __int128 v38 = *((_OWORD *)&a7->_mbstateL + 7);
              __int128 v99 = *((_OWORD *)&a7->_mbstateL + 6);
              __int128 v100 = v38;
              __int128 v39 = *((_OWORD *)&a7->_mbstateL + 1);
              __int128 v93 = *(_OWORD *)a7->__mbstate8;
              __int128 v94 = v39;
              __int128 v40 = *((_OWORD *)&a7->_mbstateL + 3);
              size_t v26 = v24 - v23;
              __int128 v95 = *((_OWORD *)&a7->_mbstateL + 2);
              __int128 v96 = v40;
              int v41 = __collate_equiv_class(v23, v24 - v23, a7, a9);
              if (v41 < 0) {
                return 0xFFFFFFFFLL;
              }
              int v42 = v41;
              if (v41)
              {
                int v20 = v25 + 2;
                if (v25[2] != 45 || v25[3] == 93 || !v25[3])
                {
                  a3 = v81;
                  size_t v43 = _platform_strlen();
                  a8 = v84;
                  unint64_t v44 = __collate_equiv_match(v42, 0LL, 0LL, v19, v81, v43, v84, &v89, a9);
                  if (!v44)
                  {
                    LODWORD(v15) = 61;
                    goto LABEL_43;
                  }

                  if (v44 != -1LL)
                  {
                    a3 = &v81[v89];
                    goto LABEL_118;
                  }
                }

                return 0xFFFFFFFFLL;
              }

              __int128 v49 = v98;
              *((_OWORD *)&a7->_mbstateL + 4) = v97;
              *((_OWORD *)&a7->_mbstateL + 5) = v49;
              __int128 v50 = v100;
              *((_OWORD *)&a7->_mbstateL + 6) = v99;
              *((_OWORD *)&a7->_mbstateL + 7) = v50;
              __int128 v51 = v94;
              *(_OWORD *)a7->__mbstate8 = v93;
              *((_OWORD *)&a7->_mbstateL + 1) = v51;
              __int128 v52 = v96;
              *((_OWORD *)&a7->_mbstateL + 2) = v95;
              *((_OWORD *)&a7->_mbstateL + 3) = v52;
              goto LABEL_93;
            }

            if (v15 == 46)
            {
              size_t v26 = v24 - v23;
LABEL_93:
              unint64_t v53 = __collate_collating_symbol(&v101, 0x18uLL, v23, v26, a7, a9);
              if (v53 + 1 < 2) {
                return 0xFFFFFFFFLL;
              }
              int v20 = v25 + 2;
              if (v53 < 2)
              {
                __darwin_ct_rune_t v91 = v101;
                BOOL v21 = (a4 & 1) == 0;
                a3 = v81;
                a8 = v84;
                if (v101) {
                  goto LABEL_34;
                }
                goto LABEL_32;
              }

              a8 = v84;
              if (*v20 == 45 && v25[3] && v25[3] != 93) {
                return 0xFFFFFFFFLL;
              }
              if ((_DWORD)v19 == v101)
              {
                __int128 v54 = *(_OWORD *)v84->__mbstate8;
                __int128 v55 = *((_OWORD *)&v84->_mbstateL + 1);
                __int128 v56 = *((_OWORD *)&v84->_mbstateL + 3);
                __int128 v95 = *((_OWORD *)&v84->_mbstateL + 2);
                __int128 v96 = v56;
                __int128 v93 = v54;
                __int128 v94 = v55;
                __int128 v57 = *((_OWORD *)&v84->_mbstateL + 4);
                __int128 v58 = *((_OWORD *)&v84->_mbstateL + 5);
                __int128 v59 = *((_OWORD *)&v84->_mbstateL + 7);
                __int128 v99 = *((_OWORD *)&v84->_mbstateL + 6);
                __int128 v100 = v59;
                __int128 v97 = v57;
                __int128 v98 = v58;
                unint64_t v60 = v53 - 1;
                a3 = v81;
                double v61 = &v102;
                while (1)
                {
                  size_t v62 = mbrtowc_l((__int32 *)v92, a3, 6uLL, v84, a9);
                  uint64_t v89 = v62;
                  if (v62 <= 0xFFFFFFFFFFFFFFFDLL)
                  {
                    int v63 = *(_DWORD *)v92;
                  }

                  else
                  {
                    int v84 = 0LL;
                    int v63 = *(unsigned __int8 *)a3;
                    *(_DWORD *)int v92 = v63;
                    uint64_t v89 = 1LL;
                    size_t v62 = 1LL;
                  }

                  if (v63 != *v61) {
                    break;
                  }
                  a3 += v62;
                  ++v61;
                  if (!--v60) {
                    goto LABEL_118;
                  }
                }

                __int128 v64 = v93;
                __int128 v65 = v94;
                __int128 v66 = v96;
                a8 = v84;
                *((_OWORD *)&v84->_mbstateL + 2) = v95;
                *((_OWORD *)&v84->_mbstateL + 3) = v66;
                *(_OWORD *)v84->__mbstate8 = v64;
                *((_OWORD *)&v84->_mbstateL + 1) = v65;
                __int128 v67 = v97;
                __int128 v68 = v98;
                __int128 v69 = v100;
                *((_OWORD *)&v84->_mbstateL + 6) = v99;
                *((_OWORD *)&v84->_mbstateL + 7) = v69;
                *((_OWORD *)&v84->_mbstateL + 4) = v67;
                *((_OWORD *)&v84->_mbstateL + 5) = v68;
              }

              a3 = v81;
              goto LABEL_43;
            }

            int v20 = v24 + 2;
            if (v24[2] == 45 && v24[3] != 93 && v24[3]) {
              return 0xFFFFFFFFLL;
            }
            if (v24 - v23 > 14) {
              return 0xFFFFFFFFLL;
            }
            _platform_strlcpy();
            wctype_t v45 = wctype(v92);
            if (!v45) {
              return 0xFFFFFFFFLL;
            }
            wctype_t v46 = v45;
            if (v19 > 0x7F)
            {
              a3 = v81;
              a8 = v84;
              else {
                int v48 = ___runetype_l(v19, a9);
              }
              uint64_t v47 = (int)(v48 & v46);
            }

            else
            {
              a8 = v84;
              uint64_t v47 = *v83 & v45;
              a3 = v81;
            }

            if (!v47) {
              goto LABEL_43;
            }
LABEL_118:
            int v70 = 1;
LABEL_119:
            unsigned int v72 = 0;
            while (1)
            {
              int v73 = *(unsigned __int8 *)v20;
              if (!*v20) {
                break;
              }
              if (v73 == 93)
              {
                *a5 = v20 + 1;
                *a6 = a3;
                return v70 != v86;
              }

              if (v72 == (char)v73)
              {
                int v75 = *(unsigned __int8 *)++v20;
                if (v75 == 93)
                {
                  unsigned int v72 = 0;
                  ++v20;
                }
              }

              else if (!v72 && (char)v73 == 91)
              {
                double v76 = (unsigned __int8 *)(v20 + 2);
                unsigned int v78 = *(unsigned __int8 *)++v20;
                unsigned int v77 = v78;
                BOOL v79 = ((1LL << v78) & 0x2400400000000000LL) == 0;
                if (((1LL << v78) & 0x2400400000000000LL) != 0) {
                  unsigned int v80 = v77;
                }
                else {
                  unsigned int v80 = 0;
                }
                if (v79) {
                  double v76 = (unsigned __int8 *)v20;
                }
                if (v77 <= 0x3D) {
                  unsigned int v72 = v80;
                }
                else {
                  unsigned int v72 = 0;
                }
                if (v77 <= 0x3D) {
                  int v20 = (const char *)v76;
                }
              }

              else
              {
                size_t v74 = mbrtowc_l(&v91, v20, 6uLL, a7, a9);
                if (v74 > 0xFFFFFFFFFFFFFFFDLL) {
                  return 0xFFFFFFFFLL;
                }
                v20 += v74;
              }
            }

            return 0xFFFFFFFFLL;
          }
        }

        BOOL v21 = (a4 & 1) == 0;
      }

      else
      {
        ++v20;
        BOOL v21 = 1;
      }
    }

key_t ftok(const char *a1, int a2)
{
  if (stat(a1, &v4) < 0) {
    return -1;
  }
  else {
    return LOWORD(v4.st_ino) | (a2 << 24) | (LOBYTE(v4.st_dev) << 16);
  }
}

char *__cdecl getbsize(int *a1, uint64_t *a2)
{
  stat v4 = getenv("BLOCKSIZE");
  if (!v4) {
    goto LABEL_22;
  }
  int v5 = v4;
  if (!*v4) {
    goto LABEL_22;
  }
  unint64_t v6 = strtol(v4, &__endptr, 10);
  if ((v6 & 0x8000000000000000LL) != 0)
  {
LABEL_21:
    warnx("minimum blocksize is 512");
LABEL_22:
    __int16 v10 = "";
    uint64_t v13 = 512LL;
    unint64_t v12 = 512LL;
    goto LABEL_23;
  }

  if (v6 <= 1) {
    unint64_t v7 = 1LL;
  }
  else {
    unint64_t v7 = v6;
  }
  int v8 = *__endptr;
  if (*__endptr)
  {
    if (__endptr[1]) {
      goto LABEL_25;
    }
    char v9 = v8 - 71;
    if ((v8 - 71) <= 0x26)
    {
      if (((1LL << v9) & 0x100000001LL) != 0)
      {
        __int16 v10 = "G";
        uint64_t v11 = 0x40000000LL;
        unint64_t v12 = 1LL;
        goto LABEL_18;
      }

      if (((1LL << v9) & 0x1000000010LL) != 0)
      {
        __int16 v10 = "K";
        uint64_t v11 = 1024LL;
        unint64_t v12 = 0x100000LL;
        goto LABEL_18;
      }

      if (((1LL << v9) & 0x4000000040LL) != 0)
      {
        __int16 v10 = "M";
        uint64_t v11 = 0x100000LL;
        unint64_t v12 = 1024LL;
        goto LABEL_18;
      }
    }

    if (*__endptr)
    {
LABEL_25:
      warnx("%s: unknown blocksize", v5);
      __int16 v10 = "";
      unint64_t v12 = 512LL;
      uint64_t v11 = 1LL;
      goto LABEL_20;
    }
  }

  __int16 v10 = "";
  uint64_t v11 = 1LL;
  unint64_t v12 = 0x40000000LL;
LABEL_18:
  if (v7 > v12) {
    warnx("maximum blocksize is %ldG", 1LL);
  }
  else {
    unint64_t v12 = v7;
  }
LABEL_20:
  uint64_t v13 = v12 * v11;
LABEL_23:
  snprintf(getbsize_header, 0x14uLL, "%ld%s-blocks", v12, v10);
  *a1 = _platform_strlen();
  *a2 = v13;
  return getbsize_header;
}

int cgetset(const char *a1)
{
  if (a1)
  {
    toprecleuint64_t n = _platform_strlen();
    toprec = (uint64_t)malloc(topreclen + 1);
    if (toprec)
    {
      gottoprec = 0;
      _platform_strcpy();
      return 0;
    }

    else
    {
      *__error() = 12;
      return -1;
    }
  }

  else
  {
    if (toprec) {
      free((void *)toprec);
    }
    int result = 0;
    toprec = 0LL;
    toprecleuint64_t n = 0LL;
  }

  return result;
}

char *__cdecl cgetcap(char *result, const char *a2, int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        int v3 = *result;
        if (!*result) {
          return 0LL;
        }
        ++result;
        if (v3 == 58)
        {
          int v4 = *(unsigned __int8 *)a2;
          int v5 = *result;
          if (v4 == v5 && v5 != 0)
          {
            unint64_t v7 = a2 + 1;
            do
            {
              int v8 = *++result;
              int v5 = v8;
              int v9 = *(unsigned __int8 *)v7++;
              int v4 = v9;
            }

            while (v9 == v5 && v5 != 0);
          }

          if (!v4) {
            break;
          }
        }
      }

      if (v5 == 64) {
        return 0LL;
      }
      if (a3 != 58) {
        break;
      }
      if (!v5 || v5 == 58) {
        return result;
      }
    }
  }

  while ((char)v5 != a3);
  int v11 = *++result;
  if (v11 == 64) {
    return 0LL;
  }
  return result;
}

int cgetent(char **a1, char **a2, const char *a3)
{
  return getent(a1, &v4, (const char **)a2, 0xFFFFFFFFLL, a3, 0);
}

uint64_t getent(void *a1, _DWORD *a2, const char **a3, uint64_t a4, const char *a5, int a6)
{
  if (a6 > 32) {
    return 4294967293LL;
  }
  if (a6 || !toprec || cgetmatch((const char *)toprec, a5))
  {
    int v11 = malloc(0x400uLL);
    if (v11)
    {
      unint64_t v12 = v11;
      uint64_t v13 = *a3;
      if (!*a3) {
        goto LABEL_33;
      }
      __int128 v58 = a1;
      unint64_t v14 = (unint64_t)(v11 + 1024);
LABEL_9:
      if ((a4 & 0x80000000) != 0)
      {
        snprintf(__str, 0x100uLL, "%s.db", v13);
        int v16 = dbopen(__str, 0, 0, DB_HASH, 0LL);
        if (v16)
        {
          __int128 v51 = v16;
          free(v12);
          __int128 v52 = strdup(a5);
          if (v52)
          {
            unint64_t v53 = v52;
            v65[0] = v52;
            for (unint64_t i = (void *)_platform_strlen(); ; unint64_t i = (void *)(v64[1] - 1LL))
            {
              v65[1] = i;
              int v55 = ((uint64_t (*)(DB *, void **, void *, void))v51->get)(v51, v65, v64, 0LL);
              if (v55 == -1)
              {
                uint64_t v6 = 4294967294LL;
                goto LABEL_84;
              }

              if (v55 == 1) {
                break;
              }
              __int128 v56 = (unsigned __int8 *)v64[0];
              __int128 v57 = (const char *)(v64[0] + 1LL);
              if (*(_BYTE *)v64[0] != 2)
              {
                free(v53);
                uint64_t v6 = *v56 == 1;
                unint64_t v12 = strdup(v57);
                if (v12)
                {
                  *a2 = _platform_strlen();
                  *__int128 v58 = v12;
                  return v6;
                }

                goto LABEL_65;
              }

              v65[0] = (void *)(v64[0] + 1LL);
            }

            uint64_t v6 = 0xFFFFFFFFLL;
LABEL_84:
            free(v53);
          }

          else
          {
            uint64_t v6 = 4294967294LL;
          }

          ((void (*)(DB *))v51->close)(v51);
          return v6;
        }

        uint64_t v15 = open_NOCANCEL();
        if ((v15 & 0x80000000) != 0) {
          goto LABEL_32;
        }
        int v63 = 1;
      }

      else
      {
        lseek(a4, 0LL, 0);
        int v63 = 0;
        uint64_t v15 = a4;
      }

      locale_t v17 = v65;
      locale_t v18 = v65;
      uint64_t v19 = v12;
      while (1)
      {
        int v20 = v19;
        if (v17 >= v18)
        {
          int NOCANCEL = read_NOCANCEL();
          int v22 = NOCANCEL;
          if (NOCANCEL <= 0)
          {
            if ((a4 & 0x80000000) != 0) {
              close_NOCANCEL();
            }
            if ((v22 & 0x80000000) == 0)
            {
              *uint64_t v19 = 0;
              uint64_t v15 = 0xFFFFFFFFLL;
LABEL_32:
              size_t v27 = a3[1];
              ++a3;
              uint64_t v13 = v27;
              a4 = v15;
              if (!v27)
              {
LABEL_33:
                free(v12);
                return 0xFFFFFFFFLL;
              }

              goto LABEL_9;
            }

LABEL_65:
    *__error() = 12;
    return 4294967294LL;
  }

  __int128 v58 = a1;
  uint64_t v28 = topreclen;
  int v29 = malloc(topreclen + 1024);
  if (!v29) {
    goto LABEL_65;
  }
  unint64_t v12 = v29;
  int v63 = 0;
  int v20 = (_BYTE *)(_platform_strcpy() + v28);
  unint64_t v14 = (unint64_t)(v20 + 1025);
LABEL_36:
  __int128 v59 = v20 + 1;
  stat v30 = cgetcap(v12, "tc", 61);
  if (!v30)
  {
    int v32 = 0;
LABEL_61:
    if (v63) {
      close_NOCANCEL();
    }
    *a2 = (_DWORD)v59 + ~(_DWORD)v12;
    if (v14 <= (unint64_t)v59)
    {
      __int128 v49 = v58;
    }

    else
    {
      unint64_t v12 = reallocf(v12, v59 - v12);
      __int128 v49 = v58;
      if (!v12) {
        goto LABEL_65;
      }
    }

    *__int128 v49 = v12;
    return v32 != 0;
  }

  size_t v31 = v30;
  int v32 = 0;
  uint64_t v33 = (a6 + 1);
  while (1)
  {
    mbstate_t v34 = v31;
    while (1)
    {
      uint64_t v35 = v34;
      int v36 = *v34;
      if (!*v34) {
        break;
      }
      ++v34;
      if (v36 == 58)
      {
        *uint64_t v35 = 0;
        break;
      }
    }

    uint64_t v37 = getent(v65, v64, a3, a4, v31, v33);
    if (!(_DWORD)v37)
    {
      __int128 v38 = v31 - 3;
      int v39 = (_DWORD)v38 - (_DWORD)v34;
      goto LABEL_50;
    }

    uint64_t v6 = v37;
    if ((_DWORD)v37 == -1)
    {
      *(v34 - 1) = 58;
      size_t v31 = cgetcap(v34 - 1, "tc", 61);
      int v32 = 1;
      if (!v31) {
        goto LABEL_61;
      }
    }

    else
    {
      __int128 v38 = v31 - 3;
      int v39 = (_DWORD)v38 - (_DWORD)v34;
      if ((_DWORD)v37 == 1) {
        int v32 = 1;
      }
LABEL_50:
      __int128 v40 = v65[0];
      do
      {
        int v41 = *v40;
        if (!*v40) {
          break;
        }
        ++v40;
      }

      while (v41 != 58);
      int v42 = LODWORD(v64[0]) + LODWORD(v65[0]) - (_DWORD)v40;
      size_t v43 = &v40[v42];
      if (*(v43 - 1) != 58)
      {
        *size_t v43 = 58;
        ++v42;
      }

      int v44 = v42 + v39;
      wctype_t v45 = v59;
      uint64_t v61 = v44;
      if ((uint64_t)(v14 - (void)v59) <= v44)
      {
        size_t v46 = v14 - (void)v12 + v44 + 1024;
        uint64_t v47 = reallocf(v12, v46);
        if (!v47)
        {
          *__error() = 12;
          if (v63) {
            close_NOCANCEL();
          }
          uint64_t v6 = 4294967294LL;
          unint64_t v12 = v65[0];
          goto LABEL_71;
        }

        unint64_t v14 = (unint64_t)&v47[v46];
        wctype_t v45 = &v47[(_DWORD)v59 - (_DWORD)v12];
        __int128 v38 = &v47[(_DWORD)v38 - (_DWORD)v12];
        unint64_t v12 = v47;
      }

      int v48 = v45;
      _platform_memmove();
      _platform_memmove();
      __int128 v59 = &v48[v61];
      free(v65[0]);
      size_t v31 = cgetcap(&v38[v42 - 1], "tc", 61);
      if (!v31) {
        goto LABEL_61;
      }
    }
  }

  if (v63) {
    close_NOCANCEL();
  }
LABEL_71:
  free(v12);
  return v6;
}

        int v11 = *a3;
        if (!*a3) {
          return v12;
        }
        goto LABEL_18;
      case 'o':
        v15 |= 0x8000u;
        int v32 = 3;
        int v36 = 8LL;
        goto LABEL_104;
      case 'p':
        uint64_t v33 = 33040;
LABEL_101:
        v15 |= v33;
        int v32 = 3;
        int v36 = 16LL;
        goto LABEL_104;
      case 'q':
        v15 |= 0x400u;
        goto LABEL_25;
      case 's':
LABEL_95:
        int v32 = 2;
        goto LABEL_105;
      case 't':
        v15 |= 0x1000u;
        goto LABEL_25;
      case 'u':
        v15 |= 0x8000u;
LABEL_103:
        int v32 = 3;
        int v36 = 10LL;
LABEL_104:
        base = (_BYTE *)v36;
        goto LABEL_105;
      case 'z':
        v15 |= 0x2000u;
LABEL_25:
        uint64_t v13 = a3;
        continue;
      default:
        if (!*v13) {
          return 0xFFFFFFFFLL;
        }
        return v12;
    }

    break;
  }

  switch(v32)
  {
    case 0:
      if (v16 <= 1) {
        __int128 v40 = 1LL;
      }
      else {
        __int128 v40 = v16;
      }
      int v41 = v15 & 8;
      if ((v15 & 1) != 0)
      {
        int v153 = v12;
        if ((v15 & 8) != 0)
        {
          locale_t v82 = 0LL;
        }

        else
        {
          int v81 = v166++;
          locale_t v82 = *v81;
        }

        v118 = 0;
        while (1)
        {
          if (v118 == v159) {
            goto LABEL_474;
          }
          int v119 = *a1 + 1;
          int v120 = v118 + 1;
          v169[v118 - 1] = *(_BYTE *)*a1;
          *a1 = v119;
          --*((_DWORD *)a1 + 2);
          memset(&v167, 0, sizeof(v167));
          double v121 = mbrtowc_l(v82, &nptr, v118 + 1, &v167, v161);
          if (v121 == -2LL)
          {
            ++v118;
          }

          else
          {
            if (v121)
            {
              if (v121 == -1LL) {
                goto LABEL_474;
              }
            }

            else if ((v15 & 8) == 0)
            {
              *locale_t v82 = 0;
            }

            v118 = 0;
            v162 += v120;
            --v40;
            v82 += v41 == 0;
          }

          if (!v40) {
            goto LABEL_450;
          }
        }

        if (v118) {
          goto LABEL_474;
        }
LABEL_450:
        unint64_t v12 = ((v41 >> 3) ^ 1) + v153;
        goto LABEL_468;
      }

      if ((v15 & 8) != 0)
      {
        unsigned int v108 = 0LL;
        do
        {
          int v109 = *((int *)a1 + 2);
          if (v40 <= v109)
          {
            LODWORD(v108) = v40 + v108;
            *((_DWORD *)a1 + 2) = v109 - v40;
            *a1 += v40;
            goto LABEL_430;
          }

          v108 += v109;
          *a1 += v109;
          v40 -= v109;
        }

        while (!__srefill((uint64_t)a1));
        if (!v108) {
          goto LABEL_475;
        }
LABEL_430:
        v162 += v108;
        goto LABEL_468;
      }

      int v42 = (uint64_t *)v166++;
      size_t v43 = __fread(*v42, 1uLL, v40, (uint64_t)a1);
      if (!v43) {
        goto LABEL_475;
      }
      v162 += v43;
      goto LABEL_463;
    case 1:
      if (v16) {
        int v44 = v16;
      }
      else {
        int v44 = -1LL;
      }
      if ((v15 & 1) == 0)
      {
        if ((v15 & 8) == 0)
        {
          wctype_t v45 = (char **)v166++;
          size_t v46 = *v45;
          p_nptr = v46;
          uint64_t v47 = (char *)*a1;
          int v48 = v46;
          if (*((_BYTE *)v170 + *(unsigned __int8 *)*a1))
          {
            while (1)
            {
              --*((_DWORD *)a1 + 2);
              *a1 = (uint64_t)(v47 + 1);
              __int128 v49 = *v47;
              __int128 v50 = p_nptr++;
              *__int128 v50 = v49;
              if (!--v44)
              {
LABEL_134:
                int v48 = p_nptr;
                goto LABEL_135;
              }

              uint64_t v47 = (char *)*a1;
            }

            int v48 = p_nptr;
            if (p_nptr == v46) {
              goto LABEL_475;
            }
          }

      free(v258);
      return 1LL;
    }

    if (v267 < 0)
    {
      int v55 = *a2;
      if (!*a2) {
        goto LABEL_65;
      }
      int v44 = a2;
      while ((v55 & 0x80) == 0)
      {
        __int128 v56 = *(unsigned __int8 *)++v44;
        int v55 = v56;
        if (!v56) {
          goto LABEL_65;
        }
      }
    }

    else
    {
      if (!v267) {
        goto LABEL_65;
      }
      __int128 v49 = v267;
      int v44 = a2;
      while ((*v44 & 0x80000000) == 0)
      {
        ++v44;
        if (!--v49) {
          goto LABEL_65;
        }
      }
    }

int cgetmatch(const char *a1, const char *a2)
{
  if (a2 && *a2)
  {
LABEL_3:
    int v2 = a2;
    while (1)
    {
      int v3 = *(unsigned __int8 *)v2;
      if (!*v2) {
        break;
      }
      int v4 = *(unsigned __int8 *)a1++;
      ++v2;
      if (v4 != v3) {
        goto LABEL_10;
      }
    }

    int v5 = *(unsigned __int8 *)a1;
    if (!*a1 || v5 == 58 || v5 == 124) {
      return 0;
    }
LABEL_10:
    --a1;
    while (1)
    {
      int v6 = *(unsigned __int8 *)a1;
      if (!*a1 || v6 == 58) {
        break;
      }
      ++a1;
      if (v6 == 124) {
        goto LABEL_3;
      }
    }
  }

  return -1;
}

int cgetfirst(char **a1, char **a2)
{
  if (pfp)
  {
    fclose((FILE *)pfp);
    pfp = 0LL;
  }

  dbp = 0LL;
  gottoprec = 0;
  slash = 0;
  return cgetnext(a1, a2);
}

int cgetclose(void)
{
  if (pfp)
  {
    fclose((FILE *)pfp);
    pfp = 0LL;
  }

  dbp = 0LL;
  gottoprec = 0;
  slash = 0;
  return 0;
}

int cgetnext(char **a1, char **a2)
{
  uint64_t v4 = __locale_key;
  int v5 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
  if (v5) {
    int v6 = v5;
  }
  else {
    int v6 = &__global_locale;
  }
  unint64_t v7 = (char **)dbp;
  if (!dbp)
  {
    dbp = (uint64_t)a2;
    unint64_t v7 = a2;
  }

  int v8 = (FILE *)pfp;
  if (pfp || (int v8 = fopen(*v7, "r"), (pfp = (uint64_t)v8) != 0))
  {
    int v9 = (char *)toprec;
    if (toprec) {
      BOOL v10 = gottoprec == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (!v10)
    {
      if (v6 == (void *)-1LL) {
        int v11 = &__global_locale;
      }
      else {
        int v11 = v6;
      }
      do
      {
        int v9 = fgetln(v8, &v29);
        int v8 = (FILE *)pfp;
        if (v9 || !pfp)
        {
          BOOL v13 = 0;
          v9[v29 - 1] = 0;
          if (v29 != 1)
          {
            unint64_t v14 = &_DefaultRuneLocale;
            if (*v9 < 0) {
              unint64_t v14 = *(_RuneLocale **)(v11[166] + 120LL);
            }
            int v15 = *v9;
            int v16 = v14->__runetype[*v9] & 0x4000;
            if (v15 != 58 && v16 == 0 && v15 != 35 && slash == 0)
            {
              slash = v9[v29 - 2] == 92;
              goto LABEL_38;
            }

            BOOL v13 = v9[v29 - 2] == 92;
          }

          slash = v13;
        }

        else
        {
          if (ferror((FILE *)pfp))
          {
LABEL_63:
            int v26 = *__error();
            fclose((FILE *)pfp);
            pfp = 0LL;
            dbp = 0LL;
            gottoprec = 0;
            slash = 0;
            *__error() = v26;
            goto LABEL_64;
          }

          fclose(v8);
          pfp = 0LL;
          unint64_t v12 = *(const char **)(dbp + 8);
          dbp += 8LL;
          if (!v12)
          {
            dbp = 0LL;
            gottoprec = 0;
            goto LABEL_66;
          }

          int v8 = fopen(v12, "r");
          pfp = (uint64_t)v8;
          if (!v8)
          {
            dbp = 0LL;
            gottoprec = 0;
            LODWORD(v12) = -1;
LABEL_66:
            slash = 0;
            return (int)v12;
          }
        }

        int v9 = (char *)toprec;
      }

      while (!toprec || (gottoprec & 1) != 0);
    }

    gottoprec = 1;
LABEL_38:
    uint64_t v19 = v30;
    while (1)
    {
      while (1)
      {
        int v20 = *v9;
        if (!*v9 || v20 == 92) {
          break;
        }
        if (v20 == 58)
        {
          uint64_t v23 = 0LL;
          *(_WORD *)uint64_t v19 = 58;
          while (1)
          {
            int v24 = v30[v23];
            if (!v30[v23] || v24 == 58 || v24 == 124) {
              break;
            }
            v31[v23++] = v24;
          }

          v31[v23] = 0;
          int v25 = getent(a1, &v28, (const char **)a2, 0xFFFFFFFFLL, v31, 0);
          if ((v25 + 3) <= 1)
          {
            if (pfp)
            {
              fclose((FILE *)pfp);
              pfp = 0LL;
            }

            dbp = 0LL;
            gottoprec = 0;
            slash = 0;
          }

          LODWORD(v12) = v25 + 1;
          return (int)v12;
        }

        *v19++ = v20;
        ++v9;
      }

      int v9 = fgetln((FILE *)pfp, &v29);
      BOOL v21 = (FILE *)pfp;
      if (!v9 && pfp != 0) {
        break;
      }
      v9[v29 - 1] = 0;
    }

    if (ferror((FILE *)pfp)) {
      goto LABEL_63;
    }
    fclose(v21);
    pfp = 0LL;
  }

  dbp = 0LL;
  gottoprec = 0;
  slash = 0;
LABEL_64:
  LODWORD(v12) = -1;
  return (int)v12;
}

int cgetstr(char *a1, const char *a2, char **a3)
{
  uint64_t v4 = cgetcap(a1, a2, 61);
  if (!v4) {
    return -1;
  }
  int v5 = (unsigned __int8 *)v4;
  int v6 = (char *)malloc(0x64uLL);
  if (v6)
  {
    unint64_t v7 = v6;
LABEL_4:
    int v8 = 100;
    while (1)
    {
      unsigned int v9 = *v5;
      if (v9 <= 0x5D) {
        break;
      }
      if (v9 != 94) {
        goto LABEL_22;
      }
      unsigned int v9 = v5[1];
      if (v9 == 63)
      {
        *unint64_t v7 = 127;
        v5 += 2;
        goto LABEL_25;
      }

      if (!v5[1] || v9 == 58)
      {
LABEL_49:
        *unint64_t v7 = 0;
        int64_t v16 = v7 - v6;
        int v17 = v16 + 1;
        if (v8 == 1 || (int v6 = (char *)reallocf(v6, v16 + 1)) != 0LL)
        {
          int v15 = v17 - 1;
          *a3 = v6;
          return v15;
        }

        return -2;
      }

      v5 += 2;
      LOBYTE(v9) = v9 & 0x1F;
LABEL_23:
      *unint64_t v7 = v9;
LABEL_25:
      ++v7;
      if (!--v8)
      {
        int64_t v14 = v7 - v6;
        int v6 = (char *)reallocf(v6, v7 - v6 + 100);
        unint64_t v7 = &v6[v14];
        int v15 = -2;
        if (v6) {
          goto LABEL_4;
        }
        return v15;
      }
    }

    if (v9 == 92)
    {
      int v10 = (char)v5[1];
      if (!v5[1]) {
        goto LABEL_49;
      }
      LOBYTE(v9) = v5[1];
      if ((v10 & 0xF8) == 0x30)
      {
        uint64_t v11 = 0LL;
        char v12 = 0;
        uint64_t v13 = (uint64_t)(v5 + 4);
        while (1)
        {
          char v12 = 8 * v12 + v9 - 48;
          if ((_DWORD)v11 == 2) {
            break;
          }
          LOBYTE(v9) = v5[v11++ + 2];
          if ((v9 & 0xF8) != 0x30)
          {
            uint64_t v13 = (uint64_t)&v5[v11 + 1];
            break;
          }
        }

        *unint64_t v7 = v12;
        int v5 = (unsigned __int8 *)v13;
        goto LABEL_25;
      }

      v5 += 2;
      if (v10 > 97)
      {
        if (v10 <= 109)
        {
          switch(v10)
          {
            case 'b':
LABEL_32:
              *unint64_t v7 = 8;
              break;
            case 'c':
LABEL_41:
              *unint64_t v7 = 58;
              break;
            case 'e':
LABEL_42:
              *unint64_t v7 = 27;
              break;
            case 'f':
LABEL_43:
              *unint64_t v7 = 12;
              break;
            default:
              goto LABEL_23;
          }

          goto LABEL_25;
        }

        switch(v10)
        {
          case 'n':
LABEL_44:
            *unint64_t v7 = 10;
            goto LABEL_25;
          case 'r':
LABEL_45:
            *unint64_t v7 = 13;
            goto LABEL_25;
          case 't':
LABEL_40:
            *unint64_t v7 = 9;
            goto LABEL_25;
        }
      }

      else
      {
        if (v10 <= 77)
        {
          switch(v10)
          {
            case 'B':
              goto LABEL_32;
            case 'C':
              goto LABEL_41;
            case 'E':
              goto LABEL_42;
            case 'F':
              goto LABEL_43;
            default:
              goto LABEL_23;
          }
        }

        switch(v10)
        {
          case 'N':
            goto LABEL_44;
          case 'R':
            goto LABEL_45;
          case 'T':
            goto LABEL_40;
        }
      }

      goto LABEL_23;
    }

    if (!*v5 || v9 == 58) {
      goto LABEL_49;
    }
LABEL_22:
    ++v5;
    goto LABEL_23;
  }

  *__error() = 12;
  return -2;
}

int cgetustr(char *a1, const char *a2, char **a3)
{
  uint64_t v4 = cgetcap(a1, a2, 61);
  if (!v4) {
    return -1;
  }
  int v5 = v4;
  int v6 = (char *)malloc(0x64uLL);
  if (v6)
  {
    unint64_t v7 = v6;
    int v8 = v6;
LABEL_4:
    uint64_t v9 = 0LL;
    while (1)
    {
      int v10 = v5[v9];
      if (!v5[v9] || v10 == 58) {
        break;
      }
      v7[v9++] = v10;
      if ((_DWORD)v9 == 100)
      {
        uint64_t v11 = v7 - v8 + v9;
        int v8 = (char *)reallocf(v8, v11 + 100);
        unint64_t v7 = &v8[v11];
        v5 += v9;
        int result = -2;
        if (v8) {
          goto LABEL_4;
        }
        return result;
      }
    }

    v7[v9] = 0;
    uint64_t v13 = v8;
    if ((_DWORD)v9 == 99 || (uint64_t v13 = (char *)reallocf(v8, v7 - v8 + v9 + 1)) != 0LL)
    {
      int result = (_DWORD)v7 - (_DWORD)v8 + v9;
      *a3 = v13;
      return result;
    }
  }

  else
  {
    *__error() = 12;
  }

  return -2;
}

int cgetnum(char *a1, const char *a2, uint64_t *a3)
{
  uint64_t v4 = cgetcap(a1, a2, 35);
  if (!v4) {
    return -1;
  }
  if (*v4 == 48)
  {
    int v5 = v4 + 2;
    int v6 = *++v4;
    BOOL v7 = (v6 | 0x20) == 120;
    if ((v6 | 0x20) == 0x78) {
      int v8 = 16;
    }
    else {
      int v8 = 8;
    }
    if (v7) {
      uint64_t v4 = v5;
    }
  }

  else
  {
    int v8 = 10;
  }

  uint64_t v10 = 0LL;
  while (1)
  {
    int v11 = *v4;
    if ((v11 - 48) >= 0xA)
    {
      if ((v11 - 97) >= 6)
      {
        int v12 = -55;
      }

      else
      {
        int v12 = -87;
      }
    }

    else
    {
      int v12 = -48;
    }

    int v13 = v12 + v11;
    if (v13 >= v8) {
      break;
    }
    uint64_t v10 = v10 * v8 + v13;
    ++v4;
  }

  int result = 0;
  *a3 = v10;
  return result;
}

char *__private_getcwd(char *a1, uint64_t a2, int a3)
{
  if (a1)
  {
    if (a2 == 1)
    {
      uint64_t v4 = __error();
      int v5 = 0LL;
      int v6 = 34;
      goto LABEL_9;
    }

    if (!a2)
    {
      uint64_t v4 = __error();
      int v5 = 0LL;
      int v6 = 22;
LABEL_9:
      *uint64_t v4 = v6;
      return v5;
    }

    int v5 = a1;
    size_t v9 = 0LL;
    int v8 = &a1[a2];
    if (!a3)
    {
LABEL_14:
      *(v8 - 1) = 0;
      uint64_t v10 = v8 - 1;
      if (stat("/", &v44))
      {
LABEL_15:
        int v11 = 0LL;
        goto LABEL_16;
      }

      dev_t st_dev = v44.st_dev;
      __darwin_ino64_t st_ino = v44.st_ino;
      char v16 = 0;
      int v11 = 0LL;
      *__error() = 0;
      dev_t v42 = st_dev;
      __darwin_ino64_t v41 = st_ino;
LABEL_23:
      char v43 = v16;
      if (v11)
      {
        int v17 = dirfd(v11);
        if (fstat(v17, &v44)) {
          goto LABEL_16;
        }
        __darwin_ino64_t v18 = v44.st_ino;
        dev_t v19 = v44.st_dev;
        if (st_dev == v44.st_dev && st_ino == v44.st_ino)
        {
          *(v10 - 1) = 47;
          _platform_memmove();
          closedir(v11);
          return v5;
        }

        dirfd(v11);
        int v21 = openat_NOCANCEL();
        if (v21 == -1) {
          goto LABEL_16;
        }
        int v22 = v21;
        closedir(v11);
      }

      else
      {
        if (lstat(".", &v44)) {
          goto LABEL_15;
        }
        __darwin_ino64_t v18 = v44.st_ino;
        dev_t v19 = v44.st_dev;
        if (st_dev == v44.st_dev && st_ino == v44.st_ino)
        {
          *(v10 - 1) = 47;
          _platform_memmove();
          return v5;
        }

        int v24 = openat_NOCANCEL();
        if (v24 == -1) {
          goto LABEL_15;
        }
        int v22 = v24;
      }

      int v25 = fdopendir(v22);
      int v11 = v25;
      if (!v25 || (int v26 = dirfd(v25), fstat(v26, &v44)))
      {
        close_NOCANCEL();
      }

      else
      {
        dev_t v27 = v44.st_dev;
        int v28 = readdir(v11);
        size_t v29 = v28;
        if (v27 == v19)
        {
          if (v28)
          {
            int v30 = 0;
            while (v29->d_ino != v18)
            {
              if ((v29->d_name[0] != 46 || v29->d_name[1] && (v29->d_name[1] != 46 || v29->d_name[2]))
                && v29->d_type == 4)
              {
                int v31 = dirfd(v11);
                if (fstatat(v31, v29->d_name, &v44, 32))
                {
                  if (!v30) {
                    int v30 = *__error();
                  }
                  *__error() = 0;
                }

                else if (v44.st_dev == v19 && v44.st_ino == v18)
                {
                  break;
                }
              }

              size_t v29 = readdir(v11);
              if (!v29) {
                goto LABEL_88;
              }
            }

LABEL_73:
            if ((v43 & 1) != 0) {
              uint64_t v34 = 2LL;
            }
            else {
              uint64_t v34 = 1LL;
            }
            uint64_t v35 = v10 - v5;
            d_namleuint64_t n = v29->d_namlen;
            for (uint64_t i = v34 + d_namlen; ; uint64_t i = v34 + d_namlen)
            {
              if (v35 >= i)
              {
                dev_t st_dev = v42;
                if ((v43 & 1) != 0)
                {
                  *--uint64_t v10 = 47;
                  d_namleuint64_t n = v29->d_namlen;
                }

                v10 -= d_namlen;
                _platform_memmove();
                char v16 = 1;
                __darwin_ino64_t st_ino = v41;
                goto LABEL_23;
              }

              if (!v9) {
                break;
              }
              v9 *= 2LL;
              __int128 v38 = (char *)reallocf(v5, v9);
              int v5 = v38;
              if (!v38) {
                goto LABEL_16;
              }
              int64_t v39 = v8 - v10;
              int v8 = &v38[v9];
              uint64_t v10 = &v38[v9 - v39];
              _platform_memmove();
              uint64_t v35 = v10 - v5;
              d_namleuint64_t n = v29->d_namlen;
            }

            *__error() = 34;
            int v12 = *__error();
            if (v11) {
              goto LABEL_19;
            }
            goto LABEL_20;
          }
        }

        else if (v28)
        {
          int v30 = 0;
          while (1)
          {
            if (v29->d_name[0] != 46 || v29->d_name[1] && (v29->d_name[1] != 46 || v29->d_name[2]))
            {
              int v32 = dirfd(v11);
              if (fstatat(v32, v29->d_name, &v44, 32))
              {
                if (!v30) {
                  int v30 = *__error();
                }
                *__error() = 0;
              }

              else if (v44.st_dev == v19 && v44.st_ino == v18)
              {
                goto LABEL_73;
              }
            }

            size_t v29 = readdir(v11);
            if (!v29) {
              goto LABEL_88;
            }
          }
        }

        int v30 = 0;
LABEL_88:
        if (!*__error())
        {
          if (v30) {
            int v40 = v30;
          }
          else {
            int v40 = 2;
          }
          *__error() = v40;
        }
      }

          *v37++ = 10;
          if ((v34 & 0x8000) == 0)
          {
LABEL_55:
            if ((v34 & 0x40) != 0)
            {
LABEL_57:
              *uint64_t v37 = 0;
              __darwin_ino64_t v41 = (_DWORD *(*)(__int32 *, unsigned int, __int16, char, __int32 *))do_mvis;
              if ((v34 & 0x200) == 0) {
                __darwin_ino64_t v41 = (_DWORD *(*)(__int32 *, unsigned int, __int16, char, __int32 *))do_svis;
              }
              if ((v34 & 0x80) != 0) {
                dev_t v42 = do_hvis;
              }
              else {
                dev_t v42 = v41;
              }
              char v43 = v25;
              if (v31)
              {
                stat v44 = (unsigned int *)(v19 + 1);
                char v43 = v25;
                do
                {
                  char v43 = v42(v43, *(v44 - 1), v34, *v44, v23);
                  if (!v43)
                  {
                    *__error() = 28;
                    int v21 = 0xFFFFFFFFLL;
                    goto LABEL_111;
                  }

                  ++v44;
                  --v31;
                }

                while (v31);
              }

              *char v43 = 0;
              wctype_t v45 = wcslen(v25);
              size_t v46 = v45;
              if (v64) {
                uint64_t v47 = *v64;
              }
              else {
                uint64_t v47 = (6 * v45) | 1;
              }
              memset(&v69, 0, sizeof(v69));
              if (v45)
              {
                int v21 = 0LL;
                int v48 = v25;
                while (1)
                {
                  if ((_DWORD)a7) {
                    goto LABEL_81;
                  }
                  __int128 v54 = *(void **)(v61 + 8 * __locale_key);
                  if (!v54) {
                    __int128 v54 = &__global_locale;
                  }
                  else {
                    int v55 = v20;
                  }
                  __int128 v56 = wcrtomb(v55, *v48, &v69);
                  __int128 v49 = v56;
                  if (v56 >= 1 && v55 != v20)
                  {
                    if (v21 + v56 >= v47)
                    {
LABEL_104:
                      *__error() = 28;
                      int v21 = 0xFFFFFFFFLL;
                      int v25 = v65;
                      dev_t v19 = v66;
                      goto LABEL_111;
                    }

                    _platform_memmove();
                  }

                  if (v49 < 0)
                  {
LABEL_81:
                    __int128 v49 = 0;
                    __int128 v50 = 0LL;
                    for (uint64_t i = 56LL; i != -8; i -= 8LL)
                    {
                      v50 |= 255LL << i;
                      __int128 v52 = *v48;
                      if (!i || (v50 & v52) != 0)
                      {
                        if (v21 + 1 + v49 >= v47) {
                          goto LABEL_104;
                        }
                        unint64_t v53 = v49++;
                        v20[v53] = ((255LL << i) & v52) >> i;
                      }
                    }

                    LODWORD(a7) = 1;
                  }

                  else
                  {
                    LODWORD(a7) = 0;
                  }

                  v21 += v49;
                  if (v21 >= v47) {
                    istrsenvisx_cold_4();
                  }
                  v20 += v49;
                  ++v48;
                  if (!--v46)
                  {
                    int v25 = v65;
                    dev_t v19 = v66;
                    goto LABEL_106;
                  }
                }
              }

              int v21 = 0LL;
LABEL_106:
              *int v20 = 0;
              if ((v67 & 0x4000) != 0 && v60) {
                *unint64_t v60 = (_DWORD)a7;
              }
              goto LABEL_113;
            }

    __darwin_ino64_t v41 = &_DefaultRuneLocale;
    goto LABEL_82;
  }

  if (a2 < 0x100)
  {
    char v43 = &__c_locale;
LABEL_81:
    __darwin_ino64_t v41 = *(_RuneLocale **)(v43[166] + 120LL);
LABEL_82:
    if ((v41->__runetype[a2] & 0x800) != 0) {
      goto LABEL_85;
    }
    goto LABEL_83;
  }

  if ((___runetype_l(a2, 0LL) & 0x800) != 0) {
    goto LABEL_85;
  }
LABEL_83:
  if ((a2 > 0x20 || ((1LL << a2) & 0x100000600LL) == 0)
    && (a2 < 128 || (a3 & 0x4000) != 0 || !iswspace(a2))
    && ((a3 & 0x20) == 0 || a2 > 0xD || ((1 << a2) & 0x2180) == 0))
  {
    goto LABEL_2;
  }

  int v11 = v36;
LABEL_74:
  int v28 = v34;
  dev_t v27 = v35;
LABEL_75:
  size_t v29 = *__error();
  free(v12);
  free(v11);
  free(v27);
  free(v28);
  *__error() = v29;
  return v23;
}

    int v28 = 0;
    dev_t v27 = 0LL;
    goto LABEL_74;
  }

  int v24 = &v59;
  __int128 v59 = v20 + 48;
LABEL_49:
  if (v20) {
    goto LABEL_50;
  }
  if (*(_DWORD *)(a2 + 20)) {
    goto LABEL_73;
  }
  int v28 = 0;
  dev_t v27 = 0LL;
LABEL_74:
  int v32 = (_BYTE *)(&v60 - v24);
  uint64_t v33 = &v60 - (_DWORD)v24 + v28;
  if (v57) {
    uint64_t v34 = v33 + 1;
  }
  else {
    uint64_t v34 = v33;
  }
  uint64_t v35 = *(int *)(a2 + 20);
  if ((uint64_t)v32 >= v35)
  {
    if ((_DWORD)v35 != -1
      || *(_DWORD *)(a2 + 32) != 48
      || (int v40 = *(_DWORD *)(a2 + 24), v41 = __OFSUB__(v40, v34), v42 = v40 - v34, (v42 < 0) ^ v41 | (v42 == 0)))
    {
      int v36 = 0LL;
      uint64_t v37 = 0;
      goto LABEL_94;
    }

    if ((*(_WORD *)(a2 + 40) & 0x40) != 0) {
      int v36 = 0LL;
    }
    else {
      int v36 = v42;
    }
  }

  else
  {
    int v36 = (v35 - (_DWORD)v32);
  }

  v34 += v36;
  uint64_t v37 = (int)v36 > 0;
  if (v24 > v58 && (int)v36 >= 1)
  {
    _platform_memset();
    do
    {
      --v24;
      int64_t v39 = (v36 - 1);
      uint64_t v37 = v36 > 1;
      if (v24 <= v58) {
        break;
      }
      int v31 = v36 > 1;
      LODWORD(v36) = v36 - 1;
    }

    while (v31);
    int v36 = v39;
  }

LABEL_11:
    if (*__error() == 34) {
      return 0LL;
    }
    goto LABEL_14;
  }

  BOOL v7 = (char *)malloc(0x400uLL);
  int v5 = v7;
  if (v7)
  {
    int v8 = v7 + 1024;
    size_t v9 = 1024LL;
    if (!a3) {
      goto LABEL_14;
    }
    goto LABEL_11;
  }

  return v5;
}

    int v12 = __error();
    int v13 = 22;
LABEL_12:
    *int v12 = v13;
    return 0xFFFFFFFFLL;
  }

  size_t v9 = v8;
  uint64_t v10 = *__error();
  close_NOCANCEL();
  *__error() = v10;
  return v9;
}

    int v11 = 0;
    size_t v29 = 1;
    goto LABEL_12;
  }

  int v24 = __error();
  int result = 0LL;
  int v25 = 22;
LABEL_72:
  *int v24 = v25;
  return result;
}

          if (v9 || (a3 & 1) != 0 || (v25 & 0x7F) == 0x20)
          {
            *(_DWORD *)a1 = 92;
            *(void *)(a1 + 4) = *(void *)&vand_s8( (int8x8_t)vshl_u32( (uint32x2_t)vdup_n_s32(v25),  (uint32x2_t)0xFFFFFFFDFFFFFFFALL),  (int8x8_t)0x700000003LL) | 0x3000000030LL;
            *(_DWORD *)(a1 + 12) = v25 & 7 | 0x30;
LABEL_13:
            a1 += 16LL;
            goto LABEL_14;
          }

          if ((a3 & 0x40) == 0)
          {
            *(_DWORD *)a1 = 92;
            a1 += 4LL;
          }

          if ((v25 & 0x80) != 0)
          {
            *(_DWORD *)a1 = 77;
            a1 += 4LL;
            LODWORD(v25) = v25 & 0x7F;
LABEL_30:
            uint64_t v35 = (uint64_t)&v15->__magic[4 * v25];
LABEL_31:
            if ((*(_DWORD *)(v35 + 60) & 0x200) != 0)
            {
LABEL_24:
              *(_DWORD *)a1 = 94;
              if ((_DWORD)v25 == 127) {
                *(_DWORD *)(a1 + 4) = 63;
              }
              else {
                *(_DWORD *)(a1 + 4) = v25 + 64;
              }
              goto LABEL_35;
            }

            goto LABEL_32;
          }

          if (v25 < 0x100)
          {
            uint64_t v37 = *(void **)(StatusReg + 8LL * v13[54]);
            if (!v37) {
              uint64_t v37 = &__global_locale;
            }
            uint64_t v35 = *(void *)(v37[166] + 120LL) + 4LL * v25;
            goto LABEL_31;
          }

          __int128 v56 = v11;
          int v26 = v13;
          __int128 v54 = StatusReg;
          dev_t v27 = v15;
          int v48 = v21;
          __int128 v51 = v22;
          wctype_t v45 = v20;
          int v28 = v19;
          size_t v29 = v18;
          int v30 = v17;
          int v31 = v16;
          int v32 = v23;
          uint64_t v33 = v24;
          uint64_t v34 = ___runetype(((255LL << v12) & (unint64_t)a2) >> v12);
          int v24 = v33;
          uint64_t v23 = v32;
          char v16 = v31;
          int v17 = v30;
          __darwin_ino64_t v18 = v29;
          dev_t v19 = v28;
          int v20 = v45;
          int v21 = v48;
          int v22 = v51;
          int v15 = v27;
          int StatusReg = v54;
          int v13 = v26;
          int v11 = v56;
          if ((v34 & 0x200) != 0) {
            goto LABEL_24;
          }
LABEL_32:
          *(_DWORD *)a1 = 45;
LABEL_33:
          *(_DWORD *)(a1 + 4) = v25;
LABEL_35:
          a1 += 8LL;
LABEL_14:
          v12 -= 8LL;
          if (v12 == -8) {
            return a1;
          }
          break;
      }
    }
  }

  if ((a3 & 0x4000) == 0)
  {
    if (a2 > 0x7F)
    {
      if (a2 >= 0x100)
      {
        if ((___runetype(a2) & 0x800) != 0) {
          goto LABEL_85;
        }
        goto LABEL_83;
      }

      dev_t v42 = __locale_key;
      char v43 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v42);
      if (!v43) {
        char v43 = &__global_locale;
      }
      goto LABEL_81;
    }

  funlockfile(a1);
  int result = 0LL;
  *a2 = 0LL;
  return result;
}

  suboptarg = v3;
  int v5 = v3 + 1;
  do
  {
    while (1)
    {
      BOOL v7 = *v5++;
      int v6 = v7;
      if (v7 <= 31) {
        break;
      }
      if (v6 == 32 || v6 == 44) {
        goto LABEL_19;
      }
      if (v6 == 61)
      {
        *(v5 - 1) = 0;
        *a3 = v5;
        for (uint64_t i = v5; ; ++i)
        {
          size_t v9 = *i;
          if (v9 > 0x1F)
          {
            if (v9 == 32 || v9 == 44) {
              goto LABEL_34;
            }
          }

          else
          {
            if (!*i) {
              goto LABEL_36;
            }
            if (v9 == 9)
            {
LABEL_34:
              int v5 = i + 1;
              goto LABEL_35;
            }
          }
        }
      }
    }

    if (!v6)
    {
      uint64_t i = v5 - 1;
      goto LABEL_28;
    }
  }

  while (v6 != 9);
LABEL_19:
  uint64_t i = v5 - 1;
LABEL_35:
  *uint64_t i = 0;
  uint64_t i = v5;
LABEL_36:
  while (1)
  {
    int64_t v14 = *i;
    int v15 = v14 > 0x2C;
    char v16 = (1LL << v14) & 0x100100000200LL;
    if (v15 || v16 == 0) {
      break;
    }
    ++i;
  }

uint64_t __getcwd(const char *a1, unint64_t a2)
{
  int v4 = open_NOCANCEL();
  if (v4 < 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = fstat(v4, &v17);
  if ((v5 & 0x80000000) != 0)
  {
    int v11 = *__error();
    close_NOCANCEL();
    *__error() = v11;
    return 0xFFFFFFFFLL;
  }

  if (!v17.st_dev || !v17.st_ino)
  {
    close_NOCANCEL();
    goto LABEL_11;
  }

  BOOL v7 = a1;
  if (a2 <= 0x3FF)
  {
    MEMORY[0x1895FE128](v5, v6);
    BOOL v7 = (const char *)&v15;
  }

  uint64_t v8 = fcntl_NOCANCEL();
  if (!(_DWORD)v8)
  {
    close_NOCANCEL();
    if (stat(v7, &v16) < 0) {
      return 0xFFFFFFFFLL;
    }
    if (v17.st_dev == v16.st_dev && v17.st_ino == v16.st_ino)
    {
      if (a2 > 0x3FF) {
        return 0LL;
      }
      if (_platform_strlen() < a2)
      {
        _platform_strcpy();
        return 0LL;
      }

      int v12 = __error();
      int v13 = 34;
      goto LABEL_12;
    }

char *__cdecl getcwd(char *a1, size_t a2)
{
  return __private_getcwd(a1, a2, 1);
}

int gethostname(char *a1, size_t a2)
{
  size_t v6 = a2;
  *(void *)uint64_t v8 = 0xA00000001LL;
  if (a2 > 0x100)
  {
    if (sysctl(v8, 2u, a1, &v6, 0LL, 0LL) != -1) {
      return 0;
    }
  }

  else
  {
    size_t v5 = 257LL;
    if (sysctl(v8, 2u, v7, &v5, 0LL, 0LL) != -1)
    {
      _platform_strncpy();
      int result = 0;
      a1[a2 - 1] = 0;
      return result;
    }
  }

  if (*__error() == 12) {
    *__error() = 63;
  }
  return -1;
}

char *getlogin(void)
{
  unint64_t v0 = getlogin_basic(&v2);
  pthread_mutex_unlock(&__logname_mutex);
  return v0;
}

_BYTE *getlogin_basic(int *a1)
{
  int result = (_BYTE *)__logname;
  if (!__logname)
  {
    int result = calloc(1uLL, 0xFFuLL);
    __logname = (uint64_t)result;
    if (!result)
    {
      int v3 = 12;
LABEL_10:
      *a1 = v3;
      return result;
    }
  }

  if (!*result && (__getlogin() & 0x80000000) != 0)
  {
    int v4 = __error();
    int result = 0LL;
    int v3 = *v4;
    goto LABEL_10;
  }

  *a1 = 0;
  if (*(_BYTE *)__logname) {
    return (_BYTE *)__logname;
  }
  else {
    return 0LL;
  }
}

int getlogin_r(char *a1, size_t a2)
{
  int v3 = v5;
  if (!v5)
  {
    if (_platform_strlcpy() <= a2) {
      int v3 = 0;
    }
    else {
      int v3 = 34;
    }
  }

  pthread_mutex_unlock(&__logname_mutex);
  return v3;
}

int getmntinfo(statfs **a1, int a2)
{
  int result = getmntinfo_internal((uint64_t)&getmntinfo_vars, a2);
  *a1 = (statfs *)getmntinfo_vars;
  return result;
}

statfs *getmntinfo_internal(uint64_t a1, int a2)
{
  int result = (statfs *)*(unsigned int *)(a1 + 8);
  if ((int)result <= 0)
  {
    int result = (statfs *)getfsstat(0LL, 0, 2);
    *(_DWORD *)(a1 + 8) = (_DWORD)result;
  }

  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= 1)
  {
    int result = (statfs *)getfsstat(*(statfs **)a1, v5, a2);
    *(_DWORD *)(a1 + 8) = (_DWORD)result;
  }

  while (*(void *)(a1 + 16) <= 2168 * (unint64_t)result)
  {
    if (*(void *)a1)
    {
      free(*(void **)a1);
      LODWORD(result) = *(_DWORD *)(a1 + 8);
    }

    uint64_t v6 = 2168LL * ((int)result + 1);
    *(void *)(a1 + 16) = v6;
    int result = (statfs *)malloc(v6);
    *(void *)a1 = result;
    if (!result) {
      break;
    }
    int result = (statfs *)getfsstat(result, v6, a2);
    *(_DWORD *)(a1 + 8) = (_DWORD)result;
  }

  return result;
}

int getmntinfo_r_np(statfs **a1, int a2)
{
  int v3 = getmntinfo_internal((uint64_t)v6, a2);
  if (v3)
  {
    *a1 = (statfs *)v6[0];
  }

  else
  {
    int v4 = *__error();
    free(v6[0]);
    *__error() = v4;
  }

  return v3;
}

int getpagesize(void)
{
  int result = getpagesize_value;
  if (!getpagesize_value)
  {
    *(void *)int v2 = 0x700000006LL;
    size_t v1 = 4LL;
    if (sysctl(v2, 2u, &getpagesize_value, &v1, 0LL, 0LL) == -1) {
      return -1;
    }
    else {
      return getpagesize_value;
    }
  }

  return result;
}

int getpeereid(int a1, uid_t *a2, gid_t *a3)
{
  socklen_t v7 = 76;
  int result = getsockopt(a1, 0, 1, v8, &v7);
  if (!result)
  {
    if (v8[0])
    {
      *__error() = 22;
      return -1;
    }

    else
    {
      int result = 0;
      gid_t v6 = v8[3];
      *a2 = v8[1];
      *a3 = v6;
    }
  }

  return result;
}

const char *getprogname(void)
{
  return *_NSGetProgname();
}

int glob(const char *a1, int a2, int (__cdecl *a3)(const char *, int), glob_t *a4)
{
  a4->gl_flags = a2 & 0x7FFFFEFF;
  a4->gl_errfunc = a3;
  return __glob((uint64_t)a1, (uint64_t)a4);
}

uint64_t __glob(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x1895FE128](a1, a2);
  uint64_t v4 = v3;
  uint64_t v5 = (const char *)v2;
  uint64_t v28 = 0LL;
  uint64_t v6 = __locale_key;
  socklen_t v7 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v6);
  memset(v27, 0, sizeof(v27));
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = (_xlocale *)&__global_locale;
  }
  uint64_t v9 = *(int *)(*((void *)v8 + 166) + 64LL);
  int v10 = *(_DWORD *)(v3 + 24);
  if ((v10 & 1) == 0)
  {
    *(void *)uint64_t v3 = 0LL;
    *(void *)(v3 + 32) = 0LL;
    if ((v10 & 2) == 0) {
      *(void *)(v3 + 16) = 0LL;
    }
  }

  if ((v10 & 0x1000) != 0)
  {
    int v11 = *(_DWORD *)(v3 + 8);
    if (!v11) {
      int v11 = 1024;
    }
    *((void *)&v27[0] + 1) = v11;
  }

  *(_DWORD *)(v3 + 8) = 0;
  memset(&v29, 0, sizeof(v29));
  if ((v10 & 0x2000) == 0)
  {
    if ((int)v9 <= 1023)
    {
      int v12 = v30;
      uint64_t v13 = 8176LL;
      int64_t v14 = (const char *)v2;
      while (1)
      {
        if (*v14 == 92)
        {
          if (!*(unsigned __int8 *)++v14)
          {
            *int v12 = 92LL;
            goto LABEL_21;
          }

          uint64_t v16 = 0x4000000000LL;
        }

        else
        {
          uint64_t v16 = 0LL;
        }

        size_t v17 = mbrtowc_l(&v26, v14, 6uLL, &v29, v8);
        if (v17 >= 0xFFFFFFFFFFFFFFFELL) {
          goto LABEL_29;
        }
        if (!v17) {
          goto LABEL_33;
        }
        *int v12 = v16 | v26;
        v14 += v17;
LABEL_21:
        ++v12;
        BOOL v18 = v9 <= v13 >> 3;
        v13 -= 8LL;
        if (!v18) {
          goto LABEL_29;
        }
      }
    }

    goto LABEL_29;
  }

  if ((int)v9 > 1023)
  {
LABEL_29:
    if ((*(_DWORD *)(v4 + 24) & 0x10) != 0 || (*(_DWORD *)(v4 + 24) & 0x300) == 0x200) {
      return __gl_globextend(0LL, v4, (uint64_t)v27, v5, v8);
    }
    else {
      return 4294967293LL;
    }
  }

  int v12 = v30;
  uint64_t v19 = 8176LL;
  int v20 = (const char *)v2;
  while (1)
  {
    size_t v21 = mbrtowc_l(&v26, v20, 6uLL, &v29, v8);
    if (v21 >= 0xFFFFFFFFFFFFFFFELL) {
      goto LABEL_29;
    }
    if (!v21) {
      break;
    }
    *v12++ = v26;
    v20 += v21;
    BOOL v18 = v9 <= v19 >> 3;
    v19 -= 8LL;
    if (!v18) {
      goto LABEL_29;
    }
  }

int glob_b(const char *a1, int a2, void *a3, glob_t *a4)
{
  a4->gl_flags = a2 & 0x7FFFFEFF | 0x80000000;
  a4->gl_errfunc = (int (__cdecl *)(const char *, int))a3;
  return __glob((uint64_t)a1, (uint64_t)a4);
}

__int32 *__gl_globtilde(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)MEMORY[0x1895FE128](a1, a2);
  socklen_t v7 = v2;
  if (*v2 != 126LL || (*(_BYTE *)(v5 + 25) & 8) == 0) {
    return (__int32 *)v7;
  }
  uint64_t v8 = v3;
  uint64_t v9 = v4 - 1;
  int v10 = &v3[2 * v4 - 2];
  int v11 = v2 + 1;
  if (v4 - 1 < 1)
  {
    int v12 = v3;
LABEL_13:
    uint64_t v13 = *v11;
  }

  else
  {
    int v12 = v3;
    while (1)
    {
      uint64_t v13 = *v11;
      if (!*v11) {
        break;
      }
      if (v13 == 47 || v13 == 0x400000002FLL) {
        break;
      }
      *(void *)int v12 = v13;
      v12 += 2;
      ++v11;
      if (v12 >= v10) {
        goto LABEL_13;
      }
    }
  }

  if (v13) {
    BOOL v15 = v13 == 0x400000002FLL;
  }
  else {
    BOOL v15 = 1;
  }
  if (!v15 && v13 != 47) {
    return 0LL;
  }
  *(void *)int v12 = 0LL;
  if (*(void *)v3)
  {
    uint64_t v16 = getpwnam(v30);
    if (!v16) {
      return (__int32 *)v7;
    }
  }

  else
  {
    if (!issetugid())
    {
      pw_dir = getenv("HOME");
      if (pw_dir) {
        goto LABEL_28;
      }
    }

    size_t v17 = getlogin();
    if (!v17 || (uint64_t v16 = getpwnam(v17)) == 0LL)
    {
      uid_t v18 = getuid();
      uint64_t v16 = getpwuid(v18);
      if (!v16) {
        return (__int32 *)v7;
      }
    }
  }

  pw_dir = v16->pw_dir;
LABEL_28:
  uint64_t v20 = 0LL;
  memset(&v29, 0, sizeof(v29));
  while (1)
  {
    size_t v21 = mbrtowc(&v28, pw_dir, 6uLL, &v29);
    if (v21 < 0xFFFFFFFFFFFFFFFELL)
    {
      __int32 v22 = v28;
    }

    else
    {
      __int32 v22 = *pw_dir;
      __int32 v28 = v22;
      memset(&v29, 0, sizeof(v29));
      size_t v21 = 1LL;
    }

    *(_DWORD *)&v30[v20] = v22;
    if (!v22) {
      break;
    }
    pw_dir += v21;
    v20 += 4LL;
    if (v20 == 4096) {
      return 0LL;
    }
  }

  int v23 = v30;
  unint64_t v24 = (uint64_t *)v8;
  if (v9 >= 1)
  {
    do
    {
      uint64_t v25 = *(int *)v23;
      if (!(_DWORD)v25) {
        goto LABEL_43;
      }
      v23 += 4;
      *v24++ = v25 | 0x4000000000LL;
    }

    while (v24 < (uint64_t *)v10);
  }

  if (*(_DWORD *)v23) {
    return 0LL;
  }
LABEL_43:
  if (*v11)
  {
    while (v24 <= (uint64_t *)v10)
    {
      uint64_t v27 = *v11++;
      *v24++ = v27;
      if (!v27) {
        return v8;
      }
    }

    return 0LL;
  }

  *unint64_t v24 = 0LL;
  return v8;
}

uint64_t __gl_g_Ctoc(__int32 *a1, char *a2, unint64_t a3, _xlocale *a4)
{
  unint64_t v4 = *(int *)(*((void *)a4 + 166) + 64LL);
  memset(&v11, 0, sizeof(v11));
  if (v4 > a3) {
    return 1LL;
  }
  unint64_t v6 = a3;
  while (1)
  {
    size_t v9 = wcrtomb_l(a2, *a1, &v11, a4);
    if (v9 == -1LL)
    {
      *a2 = *(void *)a1;
      memset(&v11, 0, sizeof(v11));
      size_t v9 = 1LL;
    }

    if (!*a1) {
      break;
    }
    a1 += 2;
    a2 += v9;
    v6 -= v9;
    if (v6 < v4) {
      return 1LL;
    }
  }

  return 0LL;
}

uint64_t __gl_compare(const char **a1, const char **a2)
{
  return strcoll(*a1, *a2);
}

uint64_t __gl_globextend(__int32 *a1, uint64_t a2, uint64_t a3, const char *a4, _xlocale *a5)
{
  uint64_t v10 = reallocarray_DARWIN_EXTSN();
  if (!v10) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v11 = v10;
  if (!*(void *)(a2 + 32) && *(void *)(a2 + 16)) {
    _platform_bzero();
  }
  *(void *)(a2 + 32) = v11;
  if (!a4)
  {
    uint64_t v13 = 0LL;
    do
    {
      uint64_t v14 = *(void *)&a1[v13];
      v13 += 2LL;
    }

    while (v14);
    size_t v15 = ((v13 * 4) >> 3) * *(int *)(*((void *)a5 + 166) + 64LL);
    uint64_t v16 = (char *)malloc(v15);
    if (!v16) {
      goto LABEL_19;
    }
    int v12 = v16;
    goto LABEL_14;
  }

  int v12 = strdup(a4);
  if (v12)
  {
LABEL_14:
    unint64_t v17 = _platform_strlen() + *(void *)(a3 + 32) + 1;
    *(void *)(a3 + 32) = v17;
    if ((*(_BYTE *)(a2 + 25) & 0x10) == 0 || v17 < 0x10000)
    {
      uint64_t result = 0LL;
      uint64_t v19 = *(void *)(a2 + 16);
      uint64_t v20 = (*(void *)a2)++;
      *(void *)(v11 + 8 * (v20 + v19)) = v12;
      goto LABEL_21;
    }

uint64_t __gl_match(uint64_t *a1, uint64_t *a2, uint64_t *a3, _xlocale *a4)
{
  socklen_t v7 = 0LL;
  unint64_t v24 = 0LL;
  while (1)
  {
    if (a2 < a3)
    {
      uint64_t v8 = a2;
      while (1)
      {
        uint64_t v10 = *v8++;
        uint64_t v9 = v10;
        uint64_t v11 = v10 & 0xFFFFFFFFFFLL;
        if ((v10 & 0xFFFFFFFFFFLL) == 0x800000005BLL) {
          break;
        }
        if (v11 == 0x800000003FLL)
        {
          if (!*a1++) {
            goto LABEL_37;
          }
        }

        else if (v11 == 0x800000002ALL)
        {
          if (v8 == a3) {
            return 1LL;
          }
          if (!*a1) {
            return 0LL;
          }
          socklen_t v7 = a1 + 1;
          unint64_t v24 = a2;
        }

        else
        {
          uint64_t v21 = *a1++;
          if (v21 != v9) {
            goto LABEL_37;
          }
        }

void globfree(glob_t *a1)
{
  gl_pathv = a1->gl_pathv;
  if (gl_pathv)
  {
    size_t gl_pathc = a1->gl_pathc;
    if (a1->gl_pathc)
    {
      unint64_t v4 = (void **)&gl_pathv[a1->gl_offs];
      do
      {
        if (*v4) {
          free(*v4);
        }
        ++v4;
        --gl_pathc;
      }

      while (gl_pathc);
      gl_pathv = a1->gl_pathv;
    }

    free(gl_pathv);
    a1->gl_pathv = 0LL;
  }

uint64_t glob0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x1895FE128](a1, a2);
  unint64_t v4 = v3;
  unint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v11 = __gl_globtilde(v2, (uint64_t)v24);
  if (!v11)
  {
    *__error() = 7;
    return 0xFFFFFFFFLL;
  }

  uint64_t v12 = *(void *)v10;
  uint64_t v13 = v24;
LABEL_3:
  uint64_t v14 = v11 + 2;
  while (1)
  {
    uint64_t v11 = v14;
    uint64_t v15 = *((void *)v14 - 1);
    if (v15 != 42) {
      break;
    }
    *(_DWORD *)(v10 + 24) |= 0x100u;
    if (v13 != v24)
    {
      uint64_t v14 = v11 + 2;
      if (*(v13 - 1) == 0x800000002ALL) {
        continue;
      }
    }

    uint64_t *v13 = 0x800000002ALL;
    goto LABEL_35;
  }

  if (v15)
  {
    if (v15 == 63)
    {
      *(_DWORD *)(v10 + 24) |= 0x100u;
      uint64_t v15 = 0x800000003FLL;
      goto LABEL_34;
    }

    if (v15 != 91)
    {
      uint64_t v15 = v15;
      goto LABEL_34;
    }

    uint64_t v16 = (uint64_t)(v11 + 2);
    uint64_t v17 = *(void *)v11;
    if (*(void *)v11 != 33LL) {
      uint64_t v16 = (uint64_t)v11;
    }
    if (!*(void *)v16)
    {
LABEL_17:
      uint64_t *v13 = 91LL;
      if (v17 == 33) {
        uint64_t v20 = -1LL;
      }
      else {
        uint64_t v20 = 0LL;
      }
      uint64_t v11 = (__int32 *)(v16 + 8 * v20);
      goto LABEL_35;
    }

    uint64_t v11 = (__int32 *)(v16 + 8);
    uint64_t v18 = 8LL;
    while (1)
    {
      uint64_t v19 = *(void *)(v16 + v18);
      if (v19 == 93) {
        break;
      }
      v18 += 8LL;
      if (!v19) {
        goto LABEL_17;
      }
    }

    uint64_t *v13 = 0x800000005BLL;
    if (v17 == 33)
    {
      v13[1] = 0x8000000021LL;
      v13 += 2;
    }

    else
    {
      ++v13;
    }

    LODWORD(v16) = *(_DWORD *)v16;
    while (1)
    {
      uint64_t *v13 = v16;
      uint64_t v16 = *(void *)v11;
      if (*(void *)v11 == 45LL)
      {
        uint64_t v21 = *((void *)v11 + 1);
        if (v21 != 93)
        {
          v13[1] = 0x800000002DLL;
          uint64_t v13[2] = v21;
          v13 += 3;
          uint64_t v22 = *((void *)v11 + 2);
          v11 += 4;
          uint64_t v16 = v22;
          goto LABEL_32;
        }

        uint64_t v16 = 45LL;
      }

      ++v13;
LABEL_32:
      v11 += 2;
      if (v16 == 93)
      {
        *(_DWORD *)(v10 + 24) |= 0x100u;
        uint64_t v15 = 0x800000005DLL;
LABEL_34:
        uint64_t *v13 = v15;
LABEL_35:
        ++v13;
        goto LABEL_3;
      }
    }
  }

  uint64_t *v13 = 0LL;
  if (!v24[0] || (uint64_t result = glob2((__int32 *)v25, v25, (unint64_t)&v26, v24, v10, v8, v4), !(_DWORD)result))
  {
    if (v6) {
      return globfinal(v10, v8, v12, v6, v4);
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t globexp1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x1895FE128](a1, a2);
  uint64_t v6 = v5;
  uint64_t v7 = v4;
  uint64_t v8 = v3;
  uint64_t v9 = v2;
  for (uint64_t i = 0LL; ; i += 8LL)
  {
    uint64_t v11 = *(void *)(v2 + i);
    if (v11 == 123) {
      break;
    }
    if (!v11) {
      return glob0(v2, v3);
    }
  }

  if ((*(_BYTE *)(v3 + 25) & 0x10) != 0)
  {
    unint64_t v13 = (*v4)++;
    if (v13 >= 0x80)
    {
      *__error() = 7;
      return 0xFFFFFFFFLL;
    }
  }

  uint64_t v14 = v34;
  if (i)
  {
    _platform_memmove();
    uint64_t v14 = &v34[i];
  }

  int v15 = 0;
  *(void *)uint64_t v14 = 0LL;
  uint64_t v16 = (uint64_t *)(v9 + i + 8);
  for (int j = v16; ; ++j)
  {
    uint64_t v18 = *j;
    if (*j > 122) {
      break;
    }
    if (v18 == 91)
    {
      uint64_t v19 = j;
      do
      {
        uint64_t v21 = v19[1];
        ++v19;
        uint64_t v20 = v21;
      }

      while (v21 != 93 && v20 != 0);
      if (v20) {
        int j = v19;
      }
    }

    else if (!v18)
    {
      return glob0(v9, v8);
    }

uint64_t globfinal(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, _xlocale *a5)
{
  int v5 = *(_DWORD *)(a1 + 24);
  if (*(void *)a1 == a3)
  {
    if ((v5 & 0x10) != 0 || (*(_DWORD *)(a1 + 24) & 0x300) == 0x200) {
      return __gl_globextend(0LL, a1, a2, a4, a5);
    }
    else {
      return 4294967293LL;
    }
  }

  else
  {
    if ((v5 & 0x20) == 0) {
      qsort( (void *)(*(void *)(a1 + 32) + 8LL * *(void *)(a1 + 16) + 8 * a3),  *(void *)a1 - a3,  8uLL,  (int (__cdecl *)(const void *, const void *))__gl_compare);
    }
    return 0LL;
  }

uint64_t glob2( __int32 *a1, uint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, _xlocale *a7)
{
  uint64_t v13 = *a4;
  if (!*a4)
  {
LABEL_17:
    *a2 = 0LL;
    if (__gl_g_Ctoc(a1, v44, 0x405uLL, a7))
    {
      uint64_t v20 = __error();
      uint64_t v21 = 0LL;
      int v22 = 63;
LABEL_19:
      *uint64_t v20 = v22;
      return v21;
    }

    if ((*(_BYTE *)(a5 + 24) & 0x40) != 0)
    {
    }

    else if (lstat(v44, &v43))
    {
      return 0LL;
    }

    int v23 = *(_DWORD *)(a5 + 24);
    if ((v23 & 0x1000) != 0)
    {
      unint64_t v24 = *(void *)(a6 + 24);
      *(void *)(a6 + 24) = v24 + 1;
      if (v24 >= 0x80) {
        goto LABEL_39;
      }
    }

    if ((v23 & 8) != 0 && (*(a2 - 1) & 0xFFFFFFBFFFFFFFFFLL) != 0x2F)
    {
      int v25 = v43.st_mode & 0xF000;
      if (v25 == 0x4000 || v25 == 40960 && !g_stat(a1, &v43, a5, a7) && (v43.st_mode & 0xF000) == 0x4000)
      {
        *(_OWORD *)a2 = xmmword_180498B50;
      }
    }

    ++*(_DWORD *)(a5 + 8);
    return __gl_globextend(a1, a5, a6, 0LL, a7);
  }

  uint64_t v14 = a4;
  while (1)
  {
    uint64_t v15 = 0LL;
    for (int i = 0; v13; ++v15)
    {
      if (v13 == 47 || v13 == 0x400000002FLL) {
        break;
      }
      if ((v13 & 0x8000000000LL) != 0) {
        int i = 1;
      }
      a2[v15] = v13;
      uint64_t v13 = v14[v15 + 1];
    }

    uint64_t v17 = &v14[v15];
    if (i)
    {
      *a2 = 0LL;
      if (*(void *)(a5 + 40))
      {
      }

      int v39 = *__error();
      *__error() = 0;
      __darwin_ino64_t v41 = g_opendir(a1, a5, a7);
      if (v41)
      {
        if ((*(_BYTE *)(a5 + 24) & 0x40) != 0) {
          uint64_t v27 = *(dirent *(__cdecl **)(DIR *))(a5 + 56);
        }
        else {
          uint64_t v27 = readdir;
        }
        *__error() = 0;
        uint64_t v21 = ((uint64_t (*)(DIR *))v27)(v41);
        if (v21)
        {
          int v40 = v27;
          while (1)
          {
            if ((*(_BYTE *)(a5 + 25) & 0x10) != 0)
            {
              unint64_t v28 = *(void *)(a6 + 16);
              *(void *)(a6 + 16) = v28 + 1;
              if (v28 >> 14) {
                break;
              }
            }

            int v30 = *(unsigned __int8 *)(v21 + 21);
            mbstate_t v29 = (const char *)(v21 + 21);
            if (v30 != 46 || (*v14 & 0xFFFFFFBFFFFFFFFFLL) == 0x2E)
            {
              uint64_t v31 = a2;
              memset(&v43, 0, 128);
              while (1)
              {
                size_t v32 = mbrtowc_l(&v42, v29, 6uLL, (mbstate_t *)&v43, a7);
                if (v32 < 0xFFFFFFFFFFFFFFFELL)
                {
                  __int32 v33 = v42;
                }

                else
                {
                  __int32 v33 = *(unsigned __int8 *)v29;
                  __int32 v42 = v33;
                  memset(&v43, 0, 128);
                  size_t v32 = 1LL;
                }

                *uint64_t v31 = v33;
                if (!v33) {
                  break;
                }
                ++v31;
                v29 += v32;
                if ((unint64_t)v31 > a3)
                {
                  uint64_t v34 = err_aborted(a5, (uint64_t)v44);
                  if ((_DWORD)v34)
                  {
                    uint64_t v21 = v34;
                    int v37 = 63;
                    goto LABEL_72;
                  }

                  goto LABEL_68;
                }
              }

              if (!__gl_match(a2, v14, v17, a7))
              {
LABEL_68:
                *a2 = 0LL;
                uint64_t v27 = v40;
                goto LABEL_69;
              }

              if (!*__error()) {
                *__error() = v39;
              }
              uint64_t v35 = glob2(a1, v31, a3, v17, a5, a6, a7);
              uint64_t v27 = v40;
              if ((_DWORD)v35)
              {
                uint64_t v21 = v35;
                goto LABEL_73;
              }
            }

uint64_t g_stat(__int32 *a1, stat *a2, uint64_t a3, _xlocale *a4)
{
  if (__gl_g_Ctoc(a1, v7, 0x405uLL, a4))
  {
    *__error() = 63;
    return 0xFFFFFFFFLL;
  }

  else if ((*(_BYTE *)(a3 + 24) & 0x40) != 0)
  {
    return (*(uint64_t (**)(char *, stat *))(a3 + 80))(v7, a2);
  }

  else
  {
    return stat(v7, a2);
  }

DIR *g_opendir(__int32 *a1, uint64_t a2, locale_t a3)
{
  if (*(void *)a1)
  {
    if (__gl_g_Ctoc(a1, v6, 0x405uLL, a3))
    {
      unint64_t v4 = __error();
      uint64_t result = 0LL;
      *unint64_t v4 = 63;
      return result;
    }
  }

  else
  {
    strcpy(v6, ".");
  }

  if ((*(_BYTE *)(a2 + 24) & 0x40) != 0) {
    return (DIR *)(*(uint64_t (**)(char *))(a2 + 64))(v6);
  }
  else {
    return opendir(v6);
  }
}

uint64_t err_aborted(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(a1 + 24) & 0x80000000) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = __error();
  }

  uint64_t v6 = *(unsigned int (**)(uint64_t, void))(a1 + 40);
  else {
    return (*(unsigned __int8 *)(a1 + 24) << 29 >> 31) & 0xFFFFFFFE;
  }
}

int isatty(int a1)
{
  if (ioctl(a1, 0x4004667AuLL, &v4) == -1) {
    return tcgetattr(a1, &v5) != -1;
  }
  if (v4 == 3) {
    return 1;
  }
  uint64_t v3 = __error();
  int result = 0;
  *uint64_t v3 = 25;
  return result;
}

uint64_t jrand48(unsigned __int16 a1[3])
{
  int64_t v1 = _rand48_add + (*(unsigned int *)a1 | ((unint64_t)a1[2] << 32)) * _rand48_mult;
  *a1 = _rand48_add + *(_DWORD *)a1 * _rand48_mult;
  a1[1] = WORD1(v1);
  a1[2] = WORD2(v1);
  return (int)(v1 >> 16);
}

void lcong48(unsigned __int16 a1[7])
{
  _rand48_seed = *(unsigned int *)a1 | ((unint64_t)a1[2] << 32);
  _rand48_mult = *(unsigned int *)(a1 + 3) | ((unint64_t)a1[5] << 32);
  _rand48_add = a1[6];
}

uint64_t lockf_NOCANCEL(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
      uint64_t result = __fcntl_nocancel();
      break;
    case 3:
      uint64_t result = __fcntl_nocancel();
      if ((_DWORD)result != -1)
      {
        if (v5 != getpid())
        {
          uint64_t v3 = __error();
          int v4 = 35;
          goto LABEL_4;
        }

        uint64_t result = 0LL;
      }

      break;
    default:
      uint64_t v3 = __error();
      int v4 = 22;
LABEL_4:
      *uint64_t v3 = v4;
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }

  return result;
}

uint64_t lrand48(void)
{
  _rand48_seed = _rand48_add + _rand48_mult * _rand48_seed;
  return ((unint64_t)_rand48_seed >> 17) & 0x7FFFFFFF;
}

uint64_t mrand48(void)
{
  _rand48_seed = _rand48_add + _rand48_mult * _rand48_seed;
  return (int)(_rand48_seed >> 16);
}

int nice(int a1)
{
  *__error() = 0;
  int v2 = getpriority(0, 0);
  if (v2 != -1 || !*__error())
  {
    if (v2 + a1 <= 19) {
      int v3 = a1;
    }
    else {
      int v3 = 19 - v2;
    }
    if (setpriority(0, 0, v3 + v2) != -1) {
      return getpriority(0, 0);
    }
    if (*__error() == 13) {
      *__error() = 1;
    }
  }

  return -1;
}

uint64_t nrand48(unsigned __int16 a1[3])
{
  unint64_t v1 = _rand48_add + (*(unsigned int *)a1 | ((unint64_t)a1[2] << 32)) * _rand48_mult;
  *a1 = _rand48_add + *(_DWORD *)a1 * _rand48_mult;
  a1[1] = WORD1(v1);
  a1[2] = WORD2(v1);
  return (v1 >> 17) & 0x7FFFFFFF;
}

DIR *__cdecl opendir(const char *a1)
{
  return __opendir2(a1, 3);
}

DIR *__cdecl __opendir2(const char *a1, int a2)
{
  if ((a2 & 0x18) != 0) {
    return 0LL;
  }
  int v4 = open_NOCANCEL();
  if (v4 == -1) {
    return 0LL;
  }
  uint64_t result = (DIR *)__opendir_common(v4, a2, 0);
  if (!result)
  {
    int v5 = *__error();
    close_NOCANCEL();
    uint64_t v6 = __error();
    uint64_t result = 0LL;
    *uint64_t v6 = v5;
  }

  return result;
}

DIR *__cdecl fdopendir(int a1)
{
  if (fstat(a1, &v4)) {
    return 0LL;
  }
  if ((v4.st_mode & 0xF000) == 0x4000)
  {
    return (DIR *)__opendir_common(a1, 3, 1);
  }

  else
  {
    int v3 = __error();
    uint64_t result = 0LL;
    *int v3 = 20;
  }

  return result;
}

uint64_t __opendir_common(int a1, int a2, int a3)
{
  uint64_t v6 = (char *)malloc(0xA0uLL);
  uint64_t v7 = (uint64_t)v6;
  if (!v6) {
    return v7;
  }
  *((void *)v6 + 3) = 0LL;
  *(_DWORD *)uint64_t v6 = a1;
  *((_DWORD *)v6 + 14) = a2;
  *((void *)v6 + 1) = 0LL;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *((void *)v6 + 8) = 850045863LL;
  *((void *)v6 + 17) = 0LL;
  *((void *)v6 + 15) = 0LL;
  *((void *)v6 + 16) = v6 + 136;
  *((void *)v6 + 18) = 0LL;
  if ((a2 & 2) != 0)
  {
    if (__kernel_supports_unionfs_kernel_supports_unionfs == 255)
    {
      int v15 = 0;
      *(void *)&v16.unint64_t f_bsize = 4LL;
      sysctlbyname("kern.secure_kernel", &v15, (size_t *)&v16.f_bsize, 0LL, 0LL);
      __kernel_supports_unionfs_kernel_supports_unionfs = v15 == 0;
      if (v15) {
        goto LABEL_9;
      }
    }

    else if (!__kernel_supports_unionfs_kernel_supports_unionfs)
    {
      goto LABEL_9;
    }

    if (fstatfs(a1, &v16) < 0)
    {
LABEL_19:
      int v13 = *__error();
      free(*(void **)(v7 + 24));
      free((void *)v7);
      uint64_t v7 = 0LL;
      *__error() = v13;
      return v7;
    }

    if ((v16.f_flags & 0x20) != 0)
    {
      if (_filldir(v7, a3))
      {
        int v12 = *(_DWORD *)(v7 + 56) | 8;
LABEL_22:
        *(_DWORD *)(v7 + 56) = v12;
        return v7;
      }

      goto LABEL_19;
    }
  }

uint64_t _filldir(uint64_t a1, int a2)
{
  int v4 = getpagesize();
  if ((v4 & 0x3FF) != 0) {
    int v5 = 1024;
  }
  else {
    int v5 = v4;
  }
  int v6 = openat_NOCANCEL();
  if (v6 == -1) {
    return 0LL;
  }
  int v7 = v6;
  if (!a2 || (off_t v8 = lseek(*(_DWORD *)a1, 0LL, 1), v8 != -1) && lseek(v7, v8, 0) != -1)
  {
    uint64_t v9 = 0LL;
    unint64_t v10 = 0LL;
    int v11 = 0;
    int v12 = 0;
    while (1)
    {
      if (v12 > 1023)
      {
        uint64_t v14 = v9;
      }

      else
      {
        v11 += v5;
        int v13 = (char *)reallocf(v10, v11);
        if (!v13) {
          break;
        }
        unint64_t v10 = v13;
        v12 += v5;
        uint64_t v14 = &v13[v11 - v12];
      }

      int v15 = __getdirentries64();
      if (v15 < 0) {
        break;
      }
      uint64_t v9 = &v14[v15];
      v12 -= v15;
      if (!v15)
      {
        close_NOCANCEL();
        statfs v16 = 0LL;
        *(void *)(a1 + 24) = v10;
        while (1)
        {
          if (v10 >= v14)
          {
            int v17 = 0;
            uint64_t v18 = v10;
          }

          else
          {
            int v17 = 0;
            uint64_t v18 = v10;
            do
            {
              int64_t v19 = *((unsigned __int16 *)v18 + 8);
              if (!*((_WORD *)v18 + 8) || v14 + 1 - v18 < v19) {
                break;
              }
              if (*(void *)v18)
              {
                if (v16) {
                  v16[v17] = (uint64_t)v18;
                }
                ++v17;
              }

              v18 += v19;
            }

            while (v18 < v14);
          }

          if (v16) {
            break;
          }
          statfs v16 = (uint64_t *)malloc(8LL * (v17 + 1));
          if (!v16) {
            goto LABEL_45;
          }
        }

        mergesort(v16, v17, 8uLL, (int (__cdecl *)(const void *, const void *))opendir_compar);
        v16[v17] = 0LL;
        uint64_t v24 = *v16;
        if (*v16)
        {
          uint64_t v25 = 0LL;
          uint64_t v26 = v16 + 1;
          do
          {
            uint64_t v27 = v25;
            uint64_t v25 = v24;
            if (v27)
            {
              int v28 = _platform_strcmp();
              uint64_t v25 = v24;
              if (!v28)
              {
                *(void *)uint64_t v24 = 0LL;
                uint64_t v25 = v27;
              }
            }

            if (*(_BYTE *)(v24 + 20) == 14 && (*(_BYTE *)(a1 + 56) & 1) != 0) {
              *(void *)uint64_t v24 = 0LL;
            }
            uint64_t v29 = *v26++;
            uint64_t v24 = v29;
          }

          while (v29);
        }

        free(v16);
        unint64_t v10 = *(char **)(a1 + 24);
LABEL_45:
        *(_DWORD *)(a1 + 32) = v11;
        *(void *)(a1 + 16) = v18 - v10;
        return 1LL;
      }
    }
  }

  int v21 = *__error();
  close_NOCANCEL();
  int v22 = __error();
  uint64_t result = 0LL;
  *int v22 = v21;
  return result;
}

uint64_t opendir_compar()
{
  return _platform_strcmp();
}

uint64_t pause_NOCANCEL()
{
  return sigsuspend_NOCANCEL();
}

FILE *__cdecl popen(const char *a1, const char *a2)
{
  if (off_18C52C3C8)
  {
    off_18C52C3C8(a1);
    if (off_18C52C3C8) {
      off_18C52C3C8(a2);
    }
  }

  if (!a2) {
    goto LABEL_9;
  }
  int v4 = _platform_strcmp();
  if (!v4)
  {
    if ((socketpair(1, 1, 0, &v20) & 0x80000000) == 0)
    {
      a2 = "r+";
      goto LABEL_13;
    }

    return 0LL;
  }

  int v5 = *(unsigned __int8 *)a2;
  if (v5 != 119 && v5 != 114 || a2[1])
  {
LABEL_9:
    int v6 = 0LL;
    *__error() = 22;
    return v6;
  }

  if (pipe(&v20) < 0) {
    return 0LL;
  }
LABEL_13:
  if (*a2 == 114)
  {
    int v6 = fdopen(v20, a2);
    if (v6) {
      goto LABEL_15;
    }
LABEL_19:
    close_NOCANCEL();
    close_NOCANCEL();
    return v6;
  }

  int v6 = fdopen(v21, a2);
  if (!v6) {
    goto LABEL_19;
  }
LABEL_15:
  int v7 = malloc(0x18uLL);
  if (!v7)
  {
    fclose(v6);
    close_NOCANCEL();
    return 0LL;
  }

  off_t v8 = v7;
  int v9 = posix_spawn_file_actions_init(&v17);
  if (v9)
  {
    int v10 = v9;
    fclose(v6);
    close_NOCANCEL();
    free(v8);
    int v6 = 0LL;
    *__error() = v10;
  }

  else
  {
    if (*a2 == 114)
    {
      posix_spawn_file_actions_addclose(&v17, v20);
      if (v21 != 1)
      {
        posix_spawn_file_actions_adddup2(&v17, v21, 1);
        posix_spawn_file_actions_addclose(&v17, v21);
      }

      if (!v4) {
        posix_spawn_file_actions_adddup2(&v17, 1, 0);
      }
    }

    else
    {
      if (v20)
      {
        posix_spawn_file_actions_adddup2(&v17, v20, 0);
        posix_spawn_file_actions_addclose(&v17, v20);
      }

      posix_spawn_file_actions_addclose(&v17, v21);
    }

    pthread_mutex_lock(&__popen_pidlist_mutex);
    for (uint64_t i = __popen_pidlist; i; uint64_t i = *(void *)i)
      posix_spawn_file_actions_addclose(&v17, *(_DWORD *)(i + 16));
    __argv[0] = "sh";
    __argv[1] = "-c";
    __argv[2] = (char *)a1;
    __argv[3] = 0LL;
    int v13 = _NSGetEnviron();
    int v14 = posix_spawn(&v18, "/bin/sh", &v17, 0LL, __argv, *v13);
    pthread_mutex_unlock(&__popen_pidlist_mutex);
    posix_spawn_file_actions_destroy(&v17);
    if (v14)
    {
      if (v14 == 35 || v14 == 12)
      {
        fclose(v6);
        close_NOCANCEL();
        free(v8);
        int v6 = 0LL;
        *__error() = v14;
        return v6;
      }

      pid_t v18 = -1;
    }

    if (*a2 == 114) {
      int v16 = v20;
    }
    else {
      int v16 = v21;
    }
    *((_DWORD *)v8 + 4) = v16;
    close_NOCANCEL();
    v8[1] = v6;
    *((_DWORD *)v8 + 5) = v18;
    pthread_mutex_lock(&__popen_pidlist_mutex);
    *off_t v8 = __popen_pidlist;
    __popen_pidlist = (uint64_t)v8;
    pthread_mutex_unlock(&__popen_pidlist_mutex);
    fwide(v6, -1);
  }

  return v6;
}

int pclose(FILE *a1)
{
  if (*((void *)&libc_hooks + 1)) {
    (*((void (**)(FILE *, uint64_t))&libc_hooks + 1))(a1, 152LL);
  }
  pthread_mutex_lock(&__popen_pidlist_mutex);
  int v2 = 0LL;
  int v3 = &__popen_pidlist;
  int v4 = (pid_t *)&__popen_pidlist;
  do
  {
    int v4 = *(pid_t **)v4;
    if (!v4)
    {
      pthread_mutex_unlock(&__popen_pidlist_mutex);
      return -1;
    }

    int v5 = (uint64_t *)v2;
    int v2 = v4;
  }

  while (*((FILE **)v4 + 1) != a1);
  if (v5) {
    int v3 = v5;
  }
  *int v3 = *(void *)*v3;
  pthread_mutex_unlock(&__popen_pidlist_mutex);
  fclose(a1);
  if (v4[5] < 0)
  {
    free(v4);
    return 32512;
  }

  else
  {
    do
      pid_t v6 = wait4(v4[5], &v8, 0, 0LL);
    while (v6 == -1 && *__error() == 4);
    free(v4);
    if (v6 == -1) {
      return -1;
    }
    else {
      return v8;
    }
  }

void psignal(unsigned int a1, const char *a2)
{
  if (a1 > 0x1F)
  {
    if (!a2) {
      goto LABEL_7;
    }
  }

  else if (!a2)
  {
    goto LABEL_7;
  }

  if (*a2)
  {
    _platform_strlen();
    write_NOCANCEL();
    write_NOCANCEL();
  }

LABEL_7:
  _platform_strlen();
  write_NOCANCEL();
  write_NOCANCEL();
}

unint64_t _readdir_unlocked(uint64_t a1, int a2)
{
  uint64_t v4 = 0LL;
  uint64_t v5 = *(void *)(a1 + 8);
  while (1)
  {
    if (v5 >= *(void *)(a1 + 16))
    {
      int v7 = *(_DWORD *)(a1 + 56);
      if ((v7 & 0x28) != 0) {
        return 0LL;
      }
      unsigned int v6 = v7 & 0xFFFFFFEF;
      *(_DWORD *)(a1 + 56) = v6;
      *(void *)(a1 + 8) = 0LL;
      uint64_t v4 = v5;
    }

    else
    {
      unsigned int v6 = *(_DWORD *)(a1 + 56);
      if (v5) {
        goto LABEL_20;
      }
    }

    if ((v6 & 0x38) != 0)
    {
      uint64_t v5 = 0LL;
      goto LABEL_20;
    }

    int v8 = *(_DWORD *)(a1 + 32);
    if (v8 == 2048)
    {
      int v9 = (char *)malloc(0x2000uLL);
      int v10 = *(char **)(a1 + 24);
      if (v9)
      {
        free(v10);
        *(void *)(a1 + 24) = v9;
        int v8 = 0x2000;
        *(_DWORD *)(a1 + 32) = 0x2000;
        int v10 = v9;
      }

      else
      {
        int v8 = 2048;
      }
    }

    else
    {
      int v10 = *(char **)(a1 + 24);
    }

    int v11 = &v10[v8];
    *((_DWORD *)v11 - 1) = 0;
    uint64_t v12 = *(void *)(*(void *)(a1 + 128) + 16LL);
    unint64_t result = __getdirentries64();
    *(void *)(a1 + 16) = result;
    if ((result & 0x8000000000000000LL) != 0) {
      return 0LL;
    }
    if (result <= *(int *)(a1 + 32) - 4LL)
    {
      if ((*(v11 - 4) & 1) != 0) {
        *(_DWORD *)(a1 + 56) |= 0x20u;
      }
      if (!result) {
        return result;
      }
    }

    _fixtelldir(a1, v12, v4);
    unsigned int v6 = *(_DWORD *)(a1 + 56);
    uint64_t v5 = *(void *)(a1 + 8);
LABEL_20:
    *(_DWORD *)(a1 + 56) = v6 & 0xFFFFFFEF;
    unint64_t result = *(void *)(a1 + 24) + v5;
    if ((result & 3) != 0) {
      return 0LL;
    }
    uint64_t v14 = *(unsigned __int16 *)(result + 16);
    v5 += v14;
    *(void *)(a1 + 8) = v5;
    if (!a2 || *(void *)result)
    {
      int v15 = v6 & 1;
      if (*(_BYTE *)(result + 20) != 14 || v15 == 0) {
        return result;
      }
    }
  }

dirent *__cdecl readdir(DIR *a1)
{
  p_dd_locuint64_t k = &a1->__dd_lock;
  pthread_mutex_lock(&a1->__dd_lock);
  int v3 = (dirent *)_readdir_unlocked((uint64_t)a1, 1);
  pthread_mutex_unlock(p_dd_lock);
  return v3;
}

int readdir_r(DIR *a1, dirent *a2, dirent **a3)
{
  int v6 = *__error();
  *__error() = 0;
  p_dd_locuint64_t k = &a1->__dd_lock;
  pthread_mutex_lock(&a1->__dd_lock);
  unint64_t v8 = _readdir_unlocked((uint64_t)a1, 1);
  if (v8) {
    _platform_memmove();
  }
  pthread_mutex_unlock(p_dd_lock);
  if (*__error())
  {
    if (!v8) {
      return *__error();
    }
  }

  else
  {
    *__error() = v6;
  }

  int result = 0;
  if (v8) {
    int v10 = a2;
  }
  else {
    int v10 = 0LL;
  }
  *a3 = v10;
  return result;
}

char *__cdecl readpassphrase(const char *a1, char *a2, size_t a3, int a4)
{
  uint64_t v4 = __locale_key;
  uint64_t v5 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
  if (!v5) {
    uint64_t v5 = (_xlocale *)&__global_locale;
  }
  uint64_t v27 = v5;
  if (a3)
  {
    char v6 = a4;
    uint64_t v7 = 0LL;
    unint64_t v8 = &a2[a3 - 1];
    while (1)
    {
      do
        signo[v7++] = 0;
      while (v7 != 32);
      if ((v6 & 0x20) != 0) {
        goto LABEL_11;
      }
      int v9 = open_NOCANCEL();
      if (v9 == -1) {
        break;
      }
      int v10 = v9;
      if (!tcgetattr(v9, (termios *)&v40[1]))
      {
        termios v41 = *(termios *)&v40[1];
        uint64_t v12 = a2;
        if ((v6 & 1) == 0) {
          v41.c_lflag &= 0xFFFFFFFFFFFFFFE7LL;
        }
        if (v41.c_cc[18] != 255) {
          v41.c_cc[18] = -1;
        }
        tcsetattr(v10, 18, &v41);
        char v29 = 0;
        int v11 = v10;
        goto LABEL_13;
      }

      char v29 = 0;
      int v11 = v10;
LABEL_12:
      uint64_t v12 = a2;
      memset(v41.c_cc, 0, 40);
      memset(&v41, 0, 24);
      v41.c_lflag = 8LL;
      memset(&v40[1], 0, 24);
      memset(&v40[33], 0, 40);
      *(void *)&v40[25] = 8LL;
LABEL_13:
      v39.__sigaction_u.__sa_handler = (void (__cdecl *)(int))handler;
      *(void *)&v39.sa_masuint64_t k = 0LL;
      sigaction(14, &v39, &v38);
      sigaction(1, &v39, &v36);
      sigaction(2, &v39, &v37);
      sigaction(13, &v39, &v30);
      sigaction(3, &v39, &v35);
      sigaction(15, &v39, &v34);
      sigaction(18, &v39, &v33);
      sigaction(21, &v39, &v32);
      sigaction(22, &v39, &v31);
      if ((v6 & 0x20) == 0)
      {
        _platform_strlen();
        write_NOCANCEL();
      }

      uint64_t NOCANCEL = read_NOCANCEL();
      if (NOCANCEL == 1)
      {
        uint64_t v12 = a2;
        while (1)
        {
          if (v40[0] == 10 || v40[0] == 13)
          {
            uint64_t NOCANCEL = 1LL;
            goto LABEL_42;
          }

          if (v12 < v8) {
            break;
          }
LABEL_39:
          uint64_t v18 = read_NOCANCEL();
          if (v18 != 1)
          {
            uint64_t NOCANCEL = v18;
            goto LABEL_42;
          }
        }

        if ((v6 & 0x10) != 0)
        {
          int v15 = v40[0] & 0x7F;
          v40[0] &= ~0x80u;
        }

        else
        {
          int v15 = v40[0];
          if ((v40[0] & 0x80) != 0)
          {
            LOWORD(v16) = ___runetype_l(v40[0], v27);
LABEL_27:
            LOBYTE(v17) = v40[0];
            if ((v16 & 0x100) != 0)
            {
              if ((v6 & 4) != 0)
              {
                if ((v40[0] & 0x80000000) != 0) {
                  LOBYTE(v17) = ___tolower_l(v40[0], v27);
                }
                else {
                  __darwin_rune_t v17 = _DefaultRuneLocale.__maplower[v40[0]];
                }
                v40[0] = v17;
              }

              if ((v6 & 8) != 0)
              {
                if ((v17 & 0x80) != 0) {
                  LOBYTE(v17) = ___toupper_l((char)v17, v27);
                }
                else {
                  __darwin_rune_t v17 = _DefaultRuneLocale.__mapupper[(char)v17];
                }
                v40[0] = v17;
              }
            }

            *v12++ = v17;
            goto LABEL_39;
          }
        }

        __uint32_t v16 = _DefaultRuneLocale.__runetype[v15];
        goto LABEL_27;
      }

uint64_t handler(uint64_t result)
{
  signo[(int)result] = 1;
  return result;
}

char *__cdecl getpass(const char *a1)
{
  int v2 = (char *)getpass_buf;
  if (getpass_buf || (int result = (char *)malloc(0x81uLL), v2 = result, (getpass_buf = (uint64_t)result) != 0))
  {
    uint64_t v4 = readpassphrase(a1, v2, 0x81uLL, 0);
    int result = (char *)getpass_buf;
    if (!v4) {
      *(_BYTE *)getpass_unint64_t buf = 0;
    }
  }

  return result;
}

void rewinddir(DIR *a1)
{
  p_dd_locuint64_t k = &a1->__dd_lock;
  pthread_mutex_lock(&a1->__dd_lock);
  int dd_flags = a1->__dd_flags;
  a1->__int dd_flags = dd_flags & 0xFFFFFFCF;
  if ((dd_flags & 8) != 0)
  {
    _filldir((uint64_t)a1, 0);
  }

  else
  {
    lseek(a1->__dd_fd, 0LL, 0);
    *((void *)a1->__dd_td + 2) = 0LL;
  }

  a1->__dd_loc = 0LL;
  _reclaim_telldir((uint64_t)a1);
  pthread_mutex_unlock(p_dd_lock);
}

int scandir( const char *a1, dirent ***a2, int (__cdecl *a3)(const dirent *), int (__cdecl *a4)(const dirent **, const dirent **))
{
  uint64_t v7 = opendir(a1);
  if (!v7) {
    goto LABEL_20;
  }
  unint64_t v8 = v7;
  int v9 = malloc(0x100uLL);
  if (!v9)
  {
LABEL_19:
    free(v9);
    closedir(v8);
LABEL_20:
    LODWORD(v10) = -1;
    return v10;
  }

  int v20 = a2;
  size_t v10 = 0LL;
  uint64_t v11 = -1LL;
  unint64_t v12 = 32LL;
  while (1)
  {
    int v13 = readdir(v8);
    if (!v13) {
      break;
    }
    uint64_t v14 = v13;
    if (!a3 || ((unsigned int (*)(dirent *))a3)(v13))
    {
      d_namleuint64_t n = v14->d_namlen;
      __uint32_t v16 = malloc(((d_namlen + 4) & 0x1FFFC) + 24LL);
      if (!v16) {
        goto LABEL_17;
      }
      __darwin_rune_t v17 = v16;
      *__uint32_t v16 = v14->d_ino;
      *((_BYTE *)v16 + 20) = v14->d_type;
      *((_WORD *)v16 + 8) = v14->d_reclen;
      *((_WORD *)v16 + 9) = d_namlen;
      _platform_memmove();
      if (v10 >= v12)
      {
        uint64_t v18 = realloc(v9, 16 * v12);
        if (!v18)
        {
          free(v17);
LABEL_17:
          if (v10)
          {
            do
              free(*((void **)v9 + v11--));
            while (v11 != -1);
          }

          goto LABEL_19;
        }

        v12 *= 2LL;
        int v9 = v18;
      }

      *((void *)v9 + v10++) = v17;
      ++v11;
    }
  }

  closedir(v8);
  if (a4 && v10) {
    qsort(v9, v10, 8uLL, (int (__cdecl *)(const void *, const void *))a4);
  }
  *int v20 = (dirent **)v9;
  return v10;
}

int alphasort(const dirent **a1, const dirent **a2)
{
  return strcoll((*a1)->d_name, (*a2)->d_name);
}

unsigned __int16 *__cdecl seed48(unsigned __int16 a1[3])
{
  seed48_sseed = _rand48_seed;
  word_18C52C104 = WORD2(_rand48_seed);
  _rand48_seed = *(unsigned int *)a1 | ((unint64_t)a1[2] << 32);
  _rand48_mult = 0x5DEECE66DLL;
  _rand48_add = 11LL;
  return (unsigned __int16 *)&seed48_sseed;
}

void seekdir(DIR *a1, uint64_t a2)
{
  p_dd_locuint64_t k = &a1->__dd_lock;
  pthread_mutex_lock(&a1->__dd_lock);
  _seekdir((unint64_t)a1, a2);
  pthread_mutex_unlock(p_dd_lock);
}

int sethostname(const char *a1, int a2)
{
  uint64_t v3 = 0xA00000001LL;
  else {
    return 0;
  }
}

mode_t getmode(const void *a1, mode_t a2)
{
  int v2 = a2 & 0x4049;
  for (uint64_t i = (char *)a1 + 2; ; i += 2)
  {
    int v4 = *((char *)i - 2);
    if (v4 > 102) {
      break;
    }
    if (v4 == 43) {
      goto LABEL_7;
    }
    if (v4 == 45)
    {
      *(_DWORD *)&a2 = a2 & ~(unsigned __int16)*i;
      continue;
    }

    if (v4 != 88) {
      return a2;
    }
    if (v2)
    {
LABEL_7:
      int v5 = (unsigned __int16)*i;
LABEL_33:
      *(_DWORD *)&a2 = v5 | a2;
      continue;
    }

void *__cdecl setmode(const char *a1)
{
  if (!*a1) {
    return 0LL;
  }
  sigset_t v1 = a1;
  sigset_t v36 = -1;
  sigprocmask(1, &v36, &v35);
  mode_t v2 = umask(0);
  umask(v2);
  sigprocmask(3, &v35, 0LL);
  uint64_t v3 = malloc(0x20uLL);
  int v4 = v3;
  if (v3)
  {
    if (*(unsigned __int8 *)v1 - 48 < 0xA)
    {
      unint64_t v5 = strtol(v1, &__endptr, 8);
      if (*__endptr || (v5 & 0x8000000000000000LL) != 0 || v5 >= 0x1000) {
        goto LABEL_80;
      }
      *(_BYTE *)int v4 = 45;
      v4[1] = 4095;
      *((_BYTE *)v4 + 4) = 43;
      void v4[3] = v5;
      *((_BYTE *)v4 + 8) = 0;
      return v4;
    }

    int v6 = 0;
    __int16 v7 = ~v2;
    unint64_t v8 = (unint64_t)(v3 + 12);
    __int16 v9 = v7;
    int v10 = 8;
    unint64_t v11 = (unint64_t)v3;
    __int16 v30 = v7;
LABEL_9:
    unsigned int v12 = 0;
    while (1)
    {
      int v13 = *v1;
      if (v13 > 110)
      {
        if (v13 != 111)
        {
          if (v13 == 117)
          {
            v12 |= 0x9C0u;
            goto LABEL_19;
          }

LABEL_79:
                      if (v4)
                      {
LABEL_80:
                        free(v4);
                        return 0LL;
                      }

                      return v4;
                    }

        if (v79 <= 0) {
          int v26 = 1LL;
        }
        else {
          int v26 = v79;
        }
        if ((_DWORD)v6 || (*(_WORD *)(v5 + 40) & 0x10) != 0) {
          int v26 = (v26 + v6 + 1);
        }
        __int128 v65 = v6;
        if (fixed && v79 >= 1)
        {
          uint64_t v3 = 0;
          int v34 = (char)*fixed;
          if (v34 == 127 || v79 <= v34)
          {
            LODWORD(v4) = 0;
            LODWORD(v6) = v79;
          }

          else
          {
            LODWORD(v4) = 0;
            uint64_t v3 = 0;
            LODWORD(v6) = v79;
            do
            {
              LODWORD(v6) = v6 - v34;
              if (fixed[1]) {
                ++v3;
              }
              else {
                LODWORD(v4) = (_DWORD)v4 + 1;
              }
              if (fixed[1]) {
                ++fixed;
              }
              int v34 = (char)*fixed;
            }

            while (v34 != 127 && (int)v6 > v34);
          }

          __int128 v64 = 0;
          int v26 = (v3 + v26 + (_DWORD)v4);
        }

        else
        {
          __int128 v64 = 0;
          LODWORD(v6) = v79;
        }

uint64_t addcmd(uint64_t a1, int a2, unsigned int a3, int a4, __int16 a5)
{
  if (a2 <= 87)
  {
    if (a2 != 43 && a2 != 45)
    {
      if (a2 != 61) {
        return a1 + 4;
      }
      *(_BYTE *)a1 = 45;
      if (a3) {
        __int16 v5 = a3;
      }
      else {
        __int16 v5 = 4095;
      }
      *(_WORD *)(a1 + 2) = v5;
      a1 += 4LL;
      LOBYTE(a2) = 43;
    }

    goto LABEL_13;
  }

  if (a2 > 110)
  {
    if (a2 != 111 && a2 != 117) {
      return a1 + 4;
    }
    goto LABEL_19;
  }

  if (a2 == 88)
  {
LABEL_13:
    *(_BYTE *)a1 = a2;
    if (a3) {
      __int16 v6 = a3;
    }
    else {
      __int16 v6 = a5;
    }
    *(_WORD *)(a1 + 2) = v6 & a4;
    return a1 + 4;
  }

  if (a2 != 103) {
    return a1 + 4;
  }
LABEL_19:
  *(_BYTE *)a1 = a2;
  if (a3) {
    int v7 = (a3 >> 4) & 0x10 | (a3 >> 3) & 4 | (8 * ((a3 >> 2) & 1));
  }
  else {
    LOBYTE(v7) = 28;
  }
  if (a3) {
    __int16 v8 = -1;
  }
  else {
    __int16 v8 = a5;
  }
  *(_BYTE *)(a1 + 1) = v7;
  *(_WORD *)(a1 + 2) = v8;
  switch(a4)
  {
    case '=':
      char v9 = v7 | 3;
      goto LABEL_31;
    case '-':
      char v9 = v7 | 1;
      goto LABEL_31;
    case '+':
      char v9 = v7 | 2;
LABEL_31:
      *(_BYTE *)(a1 + 1) = v9;
      break;
  }

  return a1 + 4;
}

unsigned __int8 *_sm_compress_mode(unsigned __int8 *result)
{
  sigset_t v1 = result;
  do
  {
    while (1)
    {
      int v2 = *v1;
      int v4 = 0;
      int v5 = 0;
      int v6 = 0;
      while (1)
      {
        if (v2 == 43)
        {
          int v7 = *((unsigned __int16 *)v1 + 1);
          v4 |= v7;
          v5 &= ~v7;
          goto LABEL_12;
        }

        if (v2 != 88) {
          break;
        }
        v6 |= *((unsigned __int16 *)v1 + 1) & ~v4;
LABEL_14:
        int v8 = v1[4];
        v1 += 4;
        int v2 = v8;
      }

      if (v2 == 45)
      {
        int v7 = *((unsigned __int16 *)v1 + 1);
        v5 |= v7;
        v4 &= ~v7;
LABEL_12:
        v6 &= ~v7;
        goto LABEL_14;
      }

      if (v5)
      {
        *(_WORD *)int result = 45;
        *((_WORD *)result + 1) = v5;
        result += 4;
      }

      if (v4)
      {
        *(_WORD *)int result = 43;
        *((_WORD *)result + 1) = v4;
        result += 4;
      }

      if (v6)
      {
        *(_WORD *)int result = 88;
        *((_WORD *)result + 1) = v6;
        result += 4;
      }
    }

    int v9 = *(_DWORD *)v1;
    v1 += 4;
    *(_DWORD *)int result = v9;
    result += 4;
  }

  while (v2);
  return result;
}

void setprogname(const char *a1)
{
  sigset_t v1 = (char *)a1;
  int v2 = strrchr(a1, 47);
  if (v2) {
    sigset_t v1 = v2 + 1;
  }
  *_NSGetProgname() = v1;
  _platform_strlcpy();
  *(void *)int v4 = 0x3E00000001LL;
  size_t v3 = _platform_strlen();
  sysctl(v4, 2u, 0LL, 0LL, v5, v3);
}

int siginterrupt(int a1, int a2)
{
  int result = sigaction(a1, 0LL, &v8);
  if ((result & 0x80000000) == 0)
  {
    int v5 = 1 << (a1 - 1);
    if (a2)
    {
      if (a1 > 32) {
        int v5 = 0;
      }
      _sigintr |= v5;
      int v6 = v8.sa_flags & 0xFFFFFFFD;
    }

    else
    {
      if (a1 <= 32) {
        int v7 = ~v5;
      }
      else {
        int v7 = -1;
      }
      _sigintr &= v7;
      int v6 = v8.sa_flags | 2;
    }

    v8.sa_flags = v6;
    return sigaction(a1, &v8, 0LL);
  }

  return result;
}

void (__cdecl *__cdecl signal(int a1, __sigaction_u a2))(int)
{
  return (void (__cdecl *)(int))signal__(a1, a2, 1);
}

uint64_t signal__(int a1, __sigaction_u a2, int a3)
{
  v6.__sigaction_u = a2;
  int v3 = 1 << (a1 - 1);
  if (a1 > 32) {
    int v3 = 0;
  }
  v6.sa_masuint64_t k = 0;
  v6.sa_flags = 2 * ((_sigintr & v3) == 0);
  if (a3)
  {
    if ((sigaction(a1, &v6, &v5) & 0x80000000) == 0) {
      return (uint64_t)v5.__sigaction_u.__sa_handler;
    }
  }

  else if ((_sigaction_nobind(a1, &v6, &v5) & 0x80000000) == 0)
  {
    return (uint64_t)v5.__sigaction_u.__sa_handler;
  }

  return -1LL;
}

uint64_t _signal_nobind(int a1, __sigaction_u a2)
{
  return signal__(a1, a2, 0);
}

uint64_t sleep_NOCANCEL(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0x80000000) != 0) {
    return (_DWORD)a1 - 0x7FFFFFFF + sleep_NOCANCEL(0x7FFFFFFFLL);
  }
  v4[0] = a1;
  v4[1] = 0LL;
  if (*__error() == 4)
  {
    if (v3[1]) {
      return (LODWORD(v3[0]) + 1);
    }
    else {
      return LODWORD(v3[0]);
    }
  }

  return v1;
}

void srand48(uint64_t a1)
{
  _rand48_seed = ((unint64_t)a1 << 16) | 0x330E;
  _rand48_mult = 0x5DEECE66DLL;
  _rand48_add = 11LL;
}

StringList *sl_init(void)
{
  unint64_t v0 = (char *)malloc(0x18uLL);
  if (!v0) {
    sl_init_cold_1();
  }
  uint64_t v1 = (StringList *)v0;
  *(_OWORD *)(v0 + 8) = xmmword_180498BB0;
  int v2 = (char **)malloc(0xA0uLL);
  v1->sl_str = v2;
  if (!v2) {
    sl_init_cold_1();
  }
  return v1;
}

int sl_add(StringList *a1, char *a2)
{
  size_t sl_max = a1->sl_max;
  size_t sl_cur = a1->sl_cur;
  sl_str = a1->sl_str;
  if (sl_cur == sl_max - 1)
  {
    size_t v7 = sl_max + 20;
    a1->size_t sl_max = v7;
    sl_str = reallocf(sl_str, 8 * v7);
    a1->sl_str = (char **)sl_str;
    if (!sl_str) {
      return -1;
    }
    size_t sl_cur = a1->sl_cur;
  }

  int v8 = 0;
  a1->size_t sl_cur = sl_cur + 1;
  *((void *)sl_str + sl_cur) = a2;
  return v8;
}

void sl_free(StringList *a1, int a2)
{
  if (a1)
  {
    sl_str = a1->sl_str;
    if (sl_str)
    {
      if (a2 && a1->sl_cur)
      {
        size_t v4 = 0LL;
        do
          free(a1->sl_str[v4++]);
        while (v4 < a1->sl_cur);
        sl_str = a1->sl_str;
      }

      free(sl_str);
    }

    free(a1);
  }

char *__cdecl sl_find(StringList *a1, char *a2)
{
  size_t sl_cur = a1->sl_cur;
  if (!sl_cur) {
    return 0LL;
  }
  for (uint64_t i = a1->sl_str; ; ++i)
  {
    size_t v4 = *i;
    if (!--sl_cur) {
      return 0LL;
    }
  }

  return v4;
}

uint64_t sysconf(int a1)
{
  uint64_t v1 = "/var/db/timezone/zoneinfo";
  uint64_t rlim_cur = 100LL;
  switch(a1)
  {
    case 1:
      LODWORD(v15.rlim_cur) = 1;
      int v3 = 8;
      goto LABEL_27;
    case 2:
      if (getrlimit(7, &v15)) {
        goto LABEL_2;
      }
      uint64_t rlim_cur = v15.rlim_cur;
      if (v15.rlim_cur == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_2;
      }
      if ((v15.rlim_cur & 0x8000000000000000LL) == 0) {
        return rlim_cur;
      }
      size_t v4 = __error();
      int v5 = 84;
LABEL_39:
      *size_t v4 = v5;
LABEL_2:
      uint64_t rlim_cur = -1LL;
      break;
    case 3:
      return rlim_cur;
    case 4:
      LODWORD(v15.rlim_cur) = 1;
      int v3 = 18;
      goto LABEL_27;
    case 5:
    case 26:
      if (getrlimit(8, &v15)) {
        goto LABEL_2;
      }
      if ((v15.rlim_cur & 0x8000000000000000LL) != 0LL) {
        return -1LL;
      }
      else {
        return v15.rlim_cur;
      }
    case 6:
    case 17:
    case 18:
    case 19:
    case 20:
    case 22:
    case 23:
    case 24:
    case 25:
    case 32:
    case 38:
    case 47:
    case 76:
    case 77:
    case 78:
    case 79:
    case 82:
    case 83:
    case 90:
    case 91:
    case 96:
    case 118:
      return 200112LL;
    case 7:
      v15.uint64_t rlim_cur = 0x1400000001LL;
      size_t v14 = 4LL;
      int v6 = v13;
      BOOL v7 = (_DWORD)v13 == 0;
LABEL_33:
      if (v7) {
        return -1;
      }
      return v6;
    case 8:
      LODWORD(v15.rlim_cur) = 1;
      int v3 = 17;
      goto LABEL_27;
    case 9:
    case 11:
      return 99LL;
    case 10:
    case 15:
      return 2048LL;
    case 12:
      return 1000LL;
    case 13:
      return 2LL;
    case 14:
    case 120:
    case 130:
      return 32LL;
    case 16:
    case 72:
    case 73:
      return 255LL;
    case 21:
    case 28:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 39:
    case 40:
    case 41:
    case 44:
    case 45:
    case 46:
    case 48:
    case 51:
    case 52:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 74:
    case 75:
    case 80:
    case 81:
    case 84:
    case 87:
    case 88:
    case 89:
    case 92:
    case 94:
    case 95:
    case 97:
    case 98:
    case 99:
    case 100:
    case 102:
    case 103:
    case 104:
    case 110:
    case 111:
    case 112:
    case 114:
    case 119:
    case 122:
    case 123:
      goto LABEL_2;
    case 27:
      goto LABEL_44;
    case 29:
      return getpagesize();
    case 42:
    case 43:
      LODWORD(v15.rlim_cur) = 1;
      int v3 = 46;
      goto LABEL_27;
    case 49:
      size_t v14 = 4LL;
      int v8 = sysctlbyname("kern.sysv.semmns", &v13, &v14, 0LL, 0LL);
      int v6 = v13;
      BOOL v7 = v8 == -1;
      goto LABEL_33;
    case 50:
      return 0x7FFFLL;
    case 56:
      return 1024LL;
    case 57:
    case 58:
      LODWORD(v15.rlim_cur) = 6;
      int v3 = 3;
LABEL_27:
      HIDWORD(v15.rlim_cur) = v3;
      size_t v14 = 4LL;
      uint64_t rlim_cur = (int)v13;
      break;
    case 69:
    case 70:
    case 71:
      return 4096LL;
    case 85:
    case 121:
    case 126:
      return 4LL;
    case 86:
      return 512LL;
    case 93:
      return 0x4000LL;
    case 101:
      uint64_t v1 = "/";
LABEL_44:
      int v9 = *__error();
      *__error() = 0;
      uint64_t rlim_cur = pathconf(v1, 4);
      if (rlim_cur == -1 && *__error()) {
        goto LABEL_2;
      }
      *__error() = v9;
      break;
    case 105:
    case 106:
    case 108:
    case 109:
    case 115:
    case 124:
    case 125:
      return 1LL;
    case 107:
      return 0x7FFFFFFFLL;
    case 113:
      int v10 = *__error();
      size_t v14 = 8LL;
      int v11 = sysctlbyname("kern.sysv.shmmin", &v15, &v14, 0LL, 0LL);
      *__error() = v10;
      if (v11 == -1) {
        return -1LL;
      }
      else {
        return 1LL;
      }
    case 116:
      return 600LL;
    case 127:
      return 30LL;
    case 128:
    case 129:
      return 8LL;
    case 131:
      return 128LL;
    case 200:
      size_t v14 = 8LL;
      if (sysctlbyname("hw.memsize", &v15, &v14, 0LL, 0LL) == -1) {
        goto LABEL_2;
      }
      size_t v14 = 8LL;
      if (sysctlbyname("hw.pagesize", &v13, &v14, 0LL, 0LL) == -1) {
        goto LABEL_2;
      }
      uint64_t rlim_cur = (int64_t)v15.rlim_cur / v13;
      break;
    default:
      size_t v4 = __error();
      int v5 = 22;
      goto LABEL_39;
  }

  return rlim_cur;
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  if (*a1 != 8)
  {
    if (a2 != 2 || *a1 != 1 || a1[1] != 45) {
      return __sysctl();
    }
    if (!a5)
    {
      if (a3)
      {
        if (!a4)
        {
          int v8 = __error();
          int v9 = 14;
          goto LABEL_13;
        }

        if (*a4 <= 1) {
          goto LABEL_24;
        }
        int result = 0;
        *(_WORD *)a3 = 47;
      }

      else
      {
        int result = 0;
        if (!a4) {
          return result;
        }
      }

      size_t v10 = 2LL;
LABEL_32:
      *a4 = v10;
      return result;
    }

    goto LABEL_12;
  }

  if (a5)
  {
LABEL_12:
    int v8 = __error();
    int v9 = 1;
LABEL_13:
    *int v8 = v9;
    return -1;
  }

  if (a2 != 2)
  {
LABEL_20:
    int v8 = __error();
    int v9 = 22;
    goto LABEL_13;
  }

  int v6 = a1[1];
  if (v6 == 1)
  {
    if (a3)
    {
      if (*a4 > 0x1D)
      {
        int result = 0;
        *a4 = 30LL;
        strcpy((char *)a3, "/usr/bin:/bin:/usr/sbin:/sbin");
        return result;
      }

      goto LABEL_24;
    }

    int result = 0;
    size_t v10 = 30LL;
    goto LABEL_32;
  }

  if (!a3)
  {
    int result = 0;
    size_t v10 = 4LL;
    goto LABEL_32;
  }

  if (*a4 <= 3)
  {
LABEL_24:
    int v8 = __error();
    int v9 = 12;
    goto LABEL_13;
  }

  *a4 = 4LL;
  switch(v6)
  {
    case 2:
    case 4:
      int result = 0;
      int v11 = 99;
      goto LABEL_41;
    case 3:
    case 8:
      int result = 0;
      int v11 = 2048;
      goto LABEL_41;
    case 5:
      int result = 0;
      int v11 = 1000;
      goto LABEL_41;
    case 6:
      int result = 0;
      int v11 = 2;
      goto LABEL_41;
    case 7:
      int result = 0;
      int v11 = 32;
      goto LABEL_41;
    case 9:
    case 20:
      int result = 0;
      int v11 = 255;
      goto LABEL_41;
    case 10:
      int result = 0;
      int v11 = 200112;
      goto LABEL_41;
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      int result = 0;
      *(_DWORD *)a3 = 0;
      return result;
    case 19:
      int result = 0;
      int v11 = 20;
LABEL_41:
      *(_DWORD *)a3 = v11;
      break;
    default:
      goto LABEL_20;
  }

  return result;
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  int result = __sysctl();
  if ((result & 0x80000000) == 0) {
    return __sysctl();
  }
  return result;
}

int sysctlnametomib(const char *a1, int *a2, size_t *a3)
{
  *a3 *= 4LL;
  _platform_strlen();
  int result = __sysctl();
  *a3 >>= 2;
  return result;
}

uint64_t telldir(DIR *a1)
{
  p_dd_locuint64_t k = &a1->__dd_lock;
  pthread_mutex_lock(&a1->__dd_lock);
  dd_td = a1->__dd_td;
  size_t v4 = *(void **)dd_td;
  if (*(void *)dd_td)
  {
    int v5 = *(void **)dd_td;
    while (v5[3] != *((void *)dd_td + 2) || v5[4] != a1->__dd_loc)
    {
      int v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_6;
      }
    }

    uint64_t v8 = v5[2];
  }

  else
  {
LABEL_6:
    int v6 = malloc(0x28uLL);
    if (v6)
    {
      __int128 v7 = *(_OWORD *)((char *)dd_td + 8);
      uint64_t v8 = *((void *)dd_td + 1);
      *((void *)dd_td + 1) = v8 + 1;
      v6[1] = v7;
      *((void *)v6 + 4) = a1->__dd_loc;
      *(void *)int v6 = v4;
      if (v4) {
        v4[1] = v6;
      }
      *(void *)dd_td = v6;
      *((void *)v6 + 1) = dd_td;
    }

    else
    {
      uint64_t v8 = -1LL;
    }
  }

  pthread_mutex_unlock(p_dd_lock);
  return v8;
}

unint64_t _seekdir(unint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int v3 = *(void **)(result + 128);
  while (1)
  {
    int v3 = (void *)*v3;
    if (!v3) {
      break;
    }
    if (v3[2] == a2)
    {
      off_t v4 = v3[3];
      uint64_t v5 = v3[4];
      uint64_t v6 = *(void *)(*(void *)(result + 128) + 16LL);
      if (v5 != *(void *)(result + 8) || v4 != v6)
      {
        if (v4 == v6)
        {
          if (!v5) {
            *(_DWORD *)(result + 56) |= 0x10u;
          }
          *(void *)(result + 8) = v5;
        }

        else
        {
          int result = lseek(*(_DWORD *)result, v4, 0);
          *(void *)(*(void *)(v2 + 128) + 16LL) = v3[3];
          *(void *)(v2 + 8) = 0LL;
          *(_DWORD *)(v2 + 56) &= 0xFFFFFFCF;
          do
          {
            if (*(void *)(v2 + 8) >= v3[4]) {
              break;
            }
            int result = _readdir_unlocked(v2, 0);
          }

          while (result);
        }
      }

      return result;
    }
  }

  return result;
}

uint64_t _fixtelldir(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3 = *(uint64_t **)(result + 128);
  uint64_t v4 = *v3;
  if (*v3 && *(void *)(v4 + 32) == a3 && *(void *)(v4 + 24) == a2)
  {
    uint64_t v5 = *(void *)(result + 8);
    *(void *)(v4 + 24) = v3[2];
    *(void *)(v4 + 32) = v5;
  }

  return result;
}

void *_reclaim_telldir(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 128);
  int result = *v2;
  if (*v2)
  {
    do
    {
      uint64_t v4 = (void *)*result;
      free(result);
      int result = v4;
    }

    while (v4);
    uint64_t v2 = *(void ***)(a1 + 128);
  }

  *uint64_t v2 = 0LL;
  return result;
}

int tcgetattr(int a1, termios *a2)
{
  return ioctl(a1, 0x40487413uLL, a2);
}

int tcsetattr(int a1, int a2, const termios *a3)
{
  if ((a2 & 0x10) != 0)
  {
    __int128 v3 = *(_OWORD *)&a3->c_cc[16];
    __int128 v11 = *(_OWORD *)a3->c_cc;
    __int128 v12 = v3;
    speed_t c_ospeed = a3->c_ospeed;
    __int128 v4 = *(_OWORD *)&a3->c_cflag;
    __int128 v8 = *(_OWORD *)&a3->c_iflag;
    uint64_t v10 = *((void *)&v4 + 1);
    uint64_t v9 = v4 | 1;
    a3 = (const termios *)&v8;
  }

  unsigned int v5 = a2 & 0xFFFFFFEF;
  if ((a2 & 0xFFFFFFEF) == 2)
  {
    unint64_t v7 = 2152231958LL;
    return ioctl(a1, v7, a3);
  }

  if (v5 == 1)
  {
    unint64_t v7 = 2152231957LL;
    return ioctl(a1, v7, a3);
  }

  if (!v5) {
    return ioctl(a1, 0x80487414uLL, a3);
  }
  *__error() = 22;
  return -1;
}

int tcsetpgrp(int a1, pid_t a2)
{
  if (!isatty(a1)) {
    return -1;
  }
  pid_t v5 = a2;
  return ioctl(a1, 0x80047476uLL, &v5);
}

pid_t tcgetpgrp(int a1)
{
  if (!isatty(a1)) {
    return -1;
  }
  if (ioctl(a1, 0x40047477uLL, &v3) < 0) {
    return -1;
  }
  return v3;
}

speed_t cfgetospeed(const termios *a1)
{
  return a1->c_ospeed;
}

speed_t cfgetispeed(const termios *a1)
{
  return a1->c_ispeed;
}

int cfsetospeed(termios *a1, speed_t a2)
{
  a1->speed_t c_ospeed = a2;
  return 0;
}

int cfsetispeed(termios *a1, speed_t a2)
{
  a1->c_ispeed = a2;
  return 0;
}

int cfsetspeed(termios *a1, speed_t a2)
{
  a1->c_ispeed = a2;
  a1->speed_t c_ospeed = a2;
  return 0;
}

void cfmakeraw(termios *a1)
{
  tcflag_t v1 = a1->c_oflag & 0xFFFFFFFFFFFFFFFELL;
  a1->c_iflag = a1->c_iflag & 0xFFFFFFFFFFFFD800LL | 1;
  a1->c_oflag = v1;
  tcflag_t v2 = a1->c_lflag & 0x5FBFFA61;
  a1->c_cflag = a1->c_cflag & 0xFFFFFFFFFFFFE4FFLL | 0xB00;
  a1->c_lflag = v2;
  *(_WORD *)&a1->c_cc[16] = 1;
}

int tcsendbreak(int a1, int a2)
{
  int result = ioctl(a1, 0x2000747BuLL, 0LL);
  if (result != -1)
  {
    select_NOCANCEL();
    if (ioctl(a1, 0x2000747AuLL, 0LL) == -1) {
      return -1;
    }
    else {
      return 0;
    }
  }

  return result;
}

uint64_t tcdrain_NOCANCEL(int a1)
{
  return ioctl(a1, 0x2000745EuLL, 0LL);
}

int tcflush(int a1, int a2)
{
  switch(a2)
  {
    case 3:
      int v2 = 3;
      goto LABEL_7;
    case 2:
      int v2 = 2;
      goto LABEL_7;
    case 1:
      int v2 = 1;
LABEL_7:
      int v4 = v2;
      return ioctl(a1, 0x80047410uLL, &v4);
  }

  *__error() = 22;
  return -1;
}

int tcflow(int a1, int a2)
{
  switch(a2)
  {
    case 1:
      unint64_t v2 = 536900719LL;
      goto LABEL_7;
    case 2:
      return ioctl(a1, 0x2000746EuLL, 0LL);
    case 3:
      unint64_t v2 = 536900736LL;
      goto LABEL_7;
    case 4:
      unint64_t v2 = 536900737LL;
LABEL_7:
      int result = ioctl(a1, v2, 0LL);
      break;
    default:
      *__error() = 22;
      int result = -1;
      break;
  }

  return result;
}

time_t time(time_t *a1)
{
  if (gettimeofday(&v5, 0LL) < 0) {
    time_t tv_sec = -1LL;
  }
  else {
    time_t tv_sec = v5.tv_sec;
  }
  if (a1) {
    *a1 = tv_sec;
  }
  fesetenv(&v4);
  return tv_sec;
}

clock_t times(tms *a1)
{
  if (getrusage(0, &v6) < 0) {
    return -1LL;
  }
  clock_t v2 = 100 * v6.ru_stime.tv_sec + v6.ru_stime.tv_usec / 10000;
  a1->tms_umach_error_t time = 100 * v6.ru_utime.tv_sec + v6.ru_utime.tv_usec / 10000;
  a1->tms_smach_error_t time = v2;
  if (getrusage(-1, &v6) < 0) {
    return -1LL;
  }
  clock_t v3 = 100 * v6.ru_stime.tv_sec + v6.ru_stime.tv_usec / 10000;
  a1->tms_cumach_error_t time = 100 * v6.ru_utime.tv_sec + v6.ru_utime.tv_usec / 10000;
  a1->tms_csmach_error_t time = v3;
  if (gettimeofday(&v5, 0LL)) {
    return -1LL;
  }
  else {
    return 100 * v5.tv_sec + v5.tv_usec / 10000;
  }
}

char *__cdecl ttyname(int a1)
{
  if ((ttyname_init & 1) == 0)
  {
    pthread_mutex_lock(&ttyname_lock);
    if ((ttyname_init & 1) == 0)
    {
      ttyname_key = 1;
      if (pthread_key_init_np())
      {
        int v2 = *__error();
        pthread_mutex_unlock(&ttyname_lock);
LABEL_20:
        unint64_t v7 = __error();
        int result = 0LL;
        *unint64_t v7 = v2;
        return result;
      }

      ttyname_init = 1;
    }

    pthread_mutex_unlock(&ttyname_lock);
  }

  if (ttyname_key) {
    pthread_key_t v3 = 16LL;
  }
  else {
    pthread_key_t v3 = 0LL;
  }
  fenv_t v4 = pthread_getspecific(v3);
  if (!v4)
  {
    int result = (char *)malloc(0x105uLL);
    if (!result) {
      return result;
    }
    fenv_t v4 = result;
    pthread_key_t v6 = ttyname_key ? 16LL : 0LL;
    if (pthread_setspecific(v6, v4))
    {
      int v2 = *__error();
      free(v4);
      goto LABEL_20;
    }
  }

  else {
    return (char *)v4;
  }
}

int ttyname_r(int a1, char *a2, size_t a3)
{
  if (fstat(a1, &v10) < 0) {
    return 9;
  }
  if (!isatty(a1) || (v10.st_mode & 0xF000) != 0x2000) {
    return 25;
  }
  int v6 = 34;
  if (a3 >= 7)
  {
    _platform_strlcpy();
    dev_t st_rdev = v10.st_rdev;
    uint64_t v8 = _platform_strlen();
    else {
      return 34;
    }
  }

  return v6;
}

int ttyslot(void)
{
  return 0;
}

useconds_t ualarm(useconds_t a1, useconds_t a2)
{
  v4.it_interval.__darwin_suseconds_t tv_usec = a2 % 0xF4240;
  v4.it_interval.time_t tv_sec = a2 / 0xF4240uLL;
  v4.it_value.__darwin_suseconds_t tv_usec = a1 % 0xF4240;
  v4.it_value.time_t tv_sec = a1 / 0xF4240uLL;
  if (setitimer(0, &v4, &v3)) {
    return -1;
  }
  else {
    return v3.it_value.tv_usec + 1000000 * LODWORD(v3.it_value.tv_sec);
  }
}

uint64_t ulimit(int a1, ...)
{
  uint64_t v3 = va_arg(va, void);
  if (a1 == 2)
  {
    v2.uint64_t rlim_cur = v3 << 9;
    v2.rlim_max = v3 << 9;
    if (setrlimit(1, &v2) == -1) {
      return -1LL;
    }
    else {
      return v3;
    }
  }

  else
  {
    if (a1 == 1)
    {
      if (getrlimit(1, &v2) != -1) {
        return v2.rlim_cur >> 9;
      }
    }

    else
    {
      *__error() = 22;
    }

    return -1LL;
  }

int unvis(char *a1, int a2, int *a3, int a4)
{
  if (!a1) {
    unvis_cold_1();
  }
  if (!a3) {
    unvis_cold_2();
  }
  unsigned int v5 = *a3;
  if ((a4 & 0x1000) != 0)
  {
    int v9 = *a3;
    if ((v9 - 5) >= 2)
    {
      if (v9 != 9) {
        return -1;
      }
    }
  }

  else
  {
    char v6 = a2;
    switch(*a3)
    {
      case 0u:
        *a1 = 0;
        if (a2 == 92 && (a4 & 0x800) == 0)
        {
          int v8 = 1;
          goto LABEL_119;
        }

        if (a2 == 37 && (a4 & 0x80) != 0)
        {
          int v8 = 8;
          goto LABEL_119;
        }

        if (a2 == 38 && (a4 & 0x400) != 0)
        {
          int v8 = 13;
          goto LABEL_119;
        }

        if (a2 == 61 && (a4 & 0x200) != 0)
        {
          int v8 = 10;
          goto LABEL_119;
        }

        *a1 = a2;
        return 1;
      case 1u:
        if (a2 > 76)
        {
          switch(a2)
          {
            case 'n':
              char v10 = 10;
              goto LABEL_90;
            case 'o':
            case 'p':
            case 'q':
            case 'u':
            case 'w':
              goto LABEL_122;
            case 'r':
              char v10 = 13;
              goto LABEL_90;
            case 's':
              char v10 = 32;
              goto LABEL_90;
            case 't':
              char v10 = 9;
              goto LABEL_90;
            case 'v':
              char v10 = 11;
              goto LABEL_90;
            case 'x':
              int v8 = 7;
              goto LABEL_119;
            default:
              switch(a2)
              {
                case '\\':
                  goto LABEL_123;
                case ']':
                case '_':
                case 'c':
                case 'd':
                case 'e':
                  goto LABEL_122;
                case '^':
                  goto LABEL_18;
                case 'a':
                  char v10 = 7;
                  goto LABEL_90;
                case 'b':
                  char v10 = 8;
                  goto LABEL_90;
                case 'f':
                  char v10 = 12;
                  goto LABEL_90;
                default:
                  if (a2 != 77) {
                    goto LABEL_122;
                  }
                  *a1 = 0x80;
                  int v8 = 2;
                  break;
              }

              goto LABEL_119;
          }
        }

        if (a2 <= 47)
        {
          if (a2 == 10 || a2 == 36)
          {
            *a3 = 0;
            return 3;
          }
        }

        else
        {
          if ((a2 - 48) < 8)
          {
            *a1 = a2 - 48;
            int v8 = 5;
            goto LABEL_119;
          }

          if (a2 == 69)
          {
            char v10 = 27;
            goto LABEL_90;
          }
        }

LABEL_122:
        if (!isgraph(a2)) {
          goto LABEL_84;
        }
LABEL_123:
        *a1 = v6;
        goto LABEL_91;
      case 2u:
        if (a2 == 45)
        {
          int v8 = 3;
        }

        else
        {
          if (a2 != 94) {
            goto LABEL_84;
          }
LABEL_18:
          int v8 = 4;
        }

        goto LABEL_119;
      case 3u:
        *a3 = 0;
        char v11 = *a1 | a2;
        goto LABEL_63;
      case 4u:
        char v12 = a2 & 0x1F;
        if (a2 == 63) {
          char v12 = 127;
        }
        char v10 = *a1 | v12;
        goto LABEL_90;
      case 5u:
        if ((a2 & 0xF8) != 0x30) {
          goto LABEL_31;
        }
        *a1 = a2 + 8 * *a1 - 48;
        int v8 = 6;
        goto LABEL_119;
      case 6u:
        *a3 = 0;
        if ((a2 & 0xF8) != 0x30) {
          return 2;
        }
        char v11 = a2 + 8 * *a1 - 48;
        goto LABEL_63;
      case 7u:
        uint64_t v13 = a2;
        goto LABEL_30;
      case 8u:
        uint64_t v13 = a2;
LABEL_30:
        if ((_DefaultRuneLocale.__runetype[v13] & 0x10000) != 0)
        {
          char v20 = v13 - 48;
          *a1 = v20;
          int v8 = 9;
          goto LABEL_119;
        }

LABEL_87:
    if (v22)
    {
      *a1 = v17;
      int v8 = (v5 & 0xFF000000) + 16777231;
LABEL_119:
      *a3 = v8;
      return 3;
    }

    char v10 = nv[8 * v23 + 7];
LABEL_90:
    *a1 = v10;
  }

LABEL_91:
  *a3 = 0;
  return 1;
}

int strnunvisx(char *a1, size_t a2, const char *a3, int a4)
{
  char v16 = 0;
  int v15 = 0;
  if (!a3) {
    strnunvisx_cold_1();
  }
  int v4 = (int)a1;
  if (!a1) {
    strnunvisx_cold_2();
  }
  unsigned int v5 = a3;
  char v7 = *a3;
  if (*a3)
  {
    int v9 = a1;
    while (2)
    {
      ++v5;
      int v10 = v7;
      while (1)
      {
        int v11 = unvis(&v16, v10, &v15, a4);
        if (v11 != 2) {
          break;
        }
        if (!a2) {
          goto LABEL_20;
        }
        --a2;
        *v9++ = v16;
      }

      switch(v11)
      {
        case -1:
          uint64_t v13 = __error();
          int v14 = 22;
          goto LABEL_22;
        case 0:
        case 3:
          goto LABEL_12;
        case 1:
          if (!a2) {
            goto LABEL_20;
          }
          --a2;
          *v9++ = v16;
LABEL_12:
          char v7 = *v5;
          if (*v5) {
            continue;
          }
          int v15 = 0;
          if (!a2) {
            goto LABEL_20;
          }
          --a2;
          *v9++ = v16;
          break;
        default:
          strnunvisx_cold_3();
      }

      break;
    }
  }

  else
  {
    int v9 = a1;
  }

int strunvisx(char *a1, const char *a2, int a3)
{
  return strnunvisx(a1, 0xFFFFFFFFFFFFFFFFLL, a2, a3);
}

int strunvis(char *a1, const char *a2)
{
  return strnunvisx(a1, 0xFFFFFFFFFFFFFFFFLL, a2, 0);
}

int strnunvis(char *a1, size_t a2, const char *a3)
{
  return strnunvisx(a1, a2, a3, 0);
}

uint64_t usleep_NOCANCEL(unsigned int a1)
{
  v2[0] = a1 / 0xF4240uLL;
  v2[1] = 1000 * (a1 % 0xF4240);
  return nanosleep_NOCANCEL(v2, 0LL);
}

int utime(const char *a1, const utimbuf *a2)
{
  if (a2)
  {
    modmach_error_t time = a2->modtime;
    v4.time_t tv_sec = a2->actime;
    time_t v5 = modtime;
    int v6 = 0;
    v4.__darwin_suseconds_t tv_usec = 0;
    a2 = (const utimbuf *)&v4;
  }

  return utimes(a1, (const timeval *)a2);
}

char *__cdecl svis(char *a1, int a2, int a3, int a4, const char *a5)
{
  int v8 = a1;
  v7[0] = a2;
  v7[1] = a4;
  int v5 = istrsenvisx(&v8, 0LL, v7, 1uLL, a3, a5, 0LL);
  if (v5 >= 0) {
    return &v8[v5];
  }
  else {
    return 0LL;
  }
}

uint64_t istrsenvisx( char **a1, uint64_t a2, const char *a3, unint64_t a4, unsigned int a5, const char *a6, _DWORD *a7)
{
  unsigned int v67 = a5;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v13 = MEMORY[0x1895FE128](a1, a2);
  char v16 = (char *)&v59 - v15;
  if (!v13) {
    istrsenvisx_cold_1();
  }
  if (!a3 && a4) {
    istrsenvisx_cold_2();
  }
  if (!a6) {
    istrsenvisx_cold_3();
  }
  __int128 v64 = v14;
  if (a4 == 1) {
    uint64_t v17 = 2LL;
  }
  else {
    uint64_t v17 = a4;
  }
  unsigned int v18 = (__int32 *)calloc(v17 + 1, 4uLL);
  if (v18)
  {
    int v19 = v18;
    int v63 = v16;
    __int128 v65 = (__int32 *)calloc((16 * v17) | 1, 4uLL);
    if (v65)
    {
      unint64_t v61 = StatusReg;
      char v20 = *a1;
      if (*a1)
      {
        size_t v62 = 0LL;
LABEL_15:
        __int128 v66 = v19;
        unint64_t v60 = a7;
        if ((v67 & 0x4000) != 0)
        {
          LODWORD(a7) = 1;
        }

        else if (a7)
        {
          LODWORD(a7) = *a7;
        }

        memset(&v69, 0, sizeof(v69));
        if (v17 < 1)
        {
          int v26 = v66;
        }

        else
        {
          int v26 = v66;
          do
          {
            if ((_DWORD)a7
              || (v17 >= 6 ? (size_t v28 = 6LL) : (size_t v28 = v17), v27 = mbrtowc(v26, a3, v28, &v69), (v27 & 0x80000000) != 0))
            {
              *int v26 = *(unsigned __int8 *)a3;
              unsigned int v27 = 1;
              LODWORD(a7) = 1;
            }

            else
            {
              LODWORD(a7) = 0;
            }

            if (v27 <= 1) {
              uint64_t v29 = 1LL;
            }
            else {
              uint64_t v29 = v27;
            }
            ++v26;
            a3 += v29;
            BOOL v30 = v17 <= v29;
            v17 -= v29;
          }

          while (!v30);
        }

        __int128 v68 = a6;
        if (v26 - v66 >= a4) {
          uint64_t v31 = a4;
        }
        else {
          uint64_t v31 = v26 - v66;
        }
        memset(&v70, 0, sizeof(v70));
        size_t v32 = _platform_strlen();
        int v33 = (__int32 *)calloc(v32 + 30, 4uLL);
        if (v33)
        {
          uint64_t v23 = v33;
          BOOL v25 = v65;
          uint64_t v34 = v67;
          if ((v67 & 0x4000) != 0 || mbsrtowcs(v33, &v68, v32, &v70) == -1LL)
          {
            int v19 = v66;
            if (v32)
            {
              uint64_t v35 = 0LL;
              sigset_t v36 = v68;
              do
              {
                v23[v35] = v36[v35];
                ++v35;
              }

              while (v32 != v35);
            }
          }

          else
          {
            size_t v32 = wcslen(v23);
            int v19 = v66;
          }

          sigaction v37 = &v23[v32];
          if ((v34 & 0x100) != 0)
          {
            *(_OWORD *)sigaction v37 = xmmword_180499010;
            v37 += 4;
          }

          if ((v34 & 0x2000) != 0)
          {
            int v38 = 39;
            sigaction v39 = &dword_18049907C;
            do
            {
              *v37++ = v38;
              int v40 = *v39++;
              int v38 = v40;
            }

            while (v40);
          }

          if ((v34 & 4) != 0)
          {
            *v37++ = 32;
            if ((v34 & 8) == 0)
            {
LABEL_53:
              if ((v34 & 0x10) == 0) {
                goto LABEL_54;
              }
              goto LABEL_73;
            }
          }

          else if ((v34 & 8) == 0)
          {
            goto LABEL_53;
          }

          *v37++ = 9;
          if ((v34 & 0x10) == 0)
          {
LABEL_54:
            if ((v34 & 0x8000) == 0) {
              goto LABEL_55;
            }
            goto LABEL_74;
          }

LABEL_56:
            *v37++ = 92;
            goto LABEL_57;
          }

          v44[5] = v45;
          int v49 = tre_mem_alloc_impl(v219, 0, 0LL, 1, ((*(_DWORD *)(a4 + 80) + 7) >> 3) + 80);
          if (!v49)
          {
LABEL_96:
            uint64_t v13 = 12LL;
            goto LABEL_104;
          }

          *((void *)v49 + 1) = v44;
          uint64_t v50 = v44[5];
          *((_DWORD *)v49 + 4) = 1;
          *((_DWORD *)v49 + 5) = v50;
          __int128 v51 = v44[7];
          unint64_t v52 = v44[8] + 1;
          *((_DWORD *)v49 + 6) = v51;
          *((_DWORD *)v49 + 7) = v52;
          uint64_t v53 = v44[9];
          *((_DWORD *)v49 + 8) = v53;
          *((void *)v49 + 6) = v49;
          *((_DWORD *)v49 + 14) = 1;
          *((_DWORD *)v49 + 17) = v51 + 1;
          *((_DWORD *)v49 + 18) = v52;
          *((_DWORD *)v49 + 19) = v53;
          stat v43 = *(void *)v40;
          *(void *)(*(void *)v40 + 8LL) = v49 + 40;
LABEL_58:
          __int128 v54 = tre_merge_branches(v219, v38, v43, 0, *(_DWORD *)(a4 + 80));
          if ((_DWORD)v54)
          {
LABEL_59:
            uint64_t v13 = v54;
            goto LABEL_104;
          }

          if ((v40[16] & 1) != 0)
          {
            if (*((_DWORD *)v40 + 2) || *((int *)v40 + 3) > 1)
            {
              v213 = 0;
LABEL_144:
              uint64_t v13 = 0LL;
            }

            else
            {
              int v107 = tre_ast_new_literal(v219, -1, -1, -1);
              if (v107 && (unsigned int v108 = tre_ast_new_union(v219, (uint64_t)v107, *(void *)v40)) != 0LL)
              {
                v213 = 0;
                uint64_t v13 = 0LL;
                *(void *)int v40 = v108;
              }

              else
              {
                uint64_t v13 = 12LL;
              }
            }
          }

          else
          {
            uint64_t v13 = 0LL;
            v213 = 1;
          }

          goto LABEL_145;
        case 3u:
          --v16;
          do
          {
            int v55 = v16[1];
            ++v16;
          }

          while (v55 != -1);
          v218 = 0;
          goto LABEL_144;
        case 4u:
          int v56 = tre_stack_pop_voidptr((uint64_t)a2);
          __int128 v57 = v56;
          __int128 v58 = *(int32x2_t ****)(v56 + 40);
          if (!v58) {
            __int128 v58 = (int32x2_t ***)v56;
          }
          uint64_t v59 = *v58;
          unint64_t v60 = tre_stack_pop_int((uint64_t)a2);
          unint64_t v61 = v219;
          if (v219)
          {
            char v16 = (unsigned int *)tre_stack_pop_voidptr((uint64_t)a2);
            if (*(_WORD *)(v57 + 66))
            {
              size_t v62 = v59[1];
              int v63 = (*v59)[1];
              __int128 v64 = (int32x2_t *)(*v59)[2];
              __int128 v66 = v62[1];
              __int128 v65 = (int32x2_t *)v62[2];
              unsigned int v67 = *((_DWORD *)v59 + 4);
              if (v67 < 1) {
                goto LABEL_71;
              }
              __int128 v68 = tre_add_tag_right(v219, (uint64_t)*v59, v67);
              if ((_DWORD)v68) {
                goto LABEL_233;
              }
              *(_DWORD *)(*(void *)(v209 + 32) + 4LL * *((int *)v59 + 4)) = 1;
              if (v63) {
                goto LABEL_70;
              }
              __int128 v68 = tre_merge_branches(v219, (uint64_t)*v59, 0LL, -1, *(_DWORD *)(v209 + 80));
              if ((_DWORD)v68) {
                goto LABEL_233;
              }
              int v63 = (*v59)[1];
LABEL_70:
              *(_DWORD *)(*(void *)&v63 + 20LL) = *((_DWORD *)v59 + 4);
              unint64_t v61 = v219;
LABEL_71:
              mbstate_t v69 = *((_DWORD *)v59 + 5);
              if (v69 >= 1)
              {
                __int128 v68 = tre_add_tag_right(v61, (uint64_t)v59[1], v69);
                if ((_DWORD)v68) {
                  goto LABEL_233;
                }
                *(_DWORD *)(*(void *)(v209 + 32) + 4LL * *((int *)v59 + 5)) = 1;
                mbstate_t v70 = v66;
                if (v66) {
                  goto LABEL_74;
                }
                __int128 v68 = tre_merge_branches(v219, (uint64_t)v59[1], 0LL, -1, *(_DWORD *)(v209 + 80));
                if ((_DWORD)v68)
                {
LABEL_233:
                  uint64_t v13 = v68;
                  goto LABEL_241;
                }

                mbstate_t v70 = v59[1][1];
LABEL_74:
                __int128 v66 = v70;
                *(_DWORD *)(*(void *)&v70 + 20LL) = *((_DWORD *)v59 + 5);
                unint64_t v61 = v219;
              }

              if (v64)
              {
                if (v65)
                {
                  int v71 = (int32x2_t *)v64[1];
                  unsigned int v72 = v65[1];
                  if (v71)
                  {
                    if (v72)
                    {
                      do
                      {
                        int v73 = v71;
                        int v71 = (int32x2_t *)*v71;
                      }

                      while (v71);
                      unsigned int *v73 = v72;
                      size_t v74 = v64[2].i32[0] + v65[2].i32[0];
LABEL_236:
                      v64[2].i32[0] = v74;
                    }
                  }

                  else if (v72)
                  {
                    v64[1] = v72;
                    size_t v74 = v65[2].i32[0];
                    goto LABEL_236;
                  }

                  int v136 = v65[3].i32[1] + v64[3].i32[1] - 1;
                  v64[3].i32[0] += v65[3].i32[0];
                  v64[3].i32[1] = v136;
                  uint64_t v132 = v65[4].i32[0];
LABEL_238:
                  int v137 = v64[4].i32[0];
LABEL_239:
                  v64[4].i32[0] = v137 + v132;
                  goto LABEL_240;
                }

                if (!*(void *)&v66) {
                  goto LABEL_240;
                }
                **(int32x2_t **)&__int128 v66 = v64[1];
                v64[1] = v66;
                ++v64[2].i32[0];
                int v131 = vadd_s32(v64[3], *(int32x2_t *)(*(void *)&v66 + 28LL));
LABEL_215:
                v64[3] = v131;
                uint64_t v132 = *(_DWORD *)(*(void *)&v66 + 36LL);
                goto LABEL_238;
              }

              if (v65)
              {
                if (v63)
                {
                  **(int32x2_t **)&int v63 = v65[1];
                  v65[1] = v63;
                  ++v65[2].i32[0];
                  v65[3] = vadd_s32(v65[3], *(int32x2_t *)(*(void *)&v63 + 28LL));
                  v65[4].i32[0] += *(_DWORD *)(*(void *)&v63 + 36LL);
                }

                __int128 v64 = v65;
                goto LABEL_240;
              }

              char v138 = tre_mem_alloc_impl(v61, 0, 0LL, 1, 0x28uLL);
              if (v138)
              {
                __int128 v64 = (int32x2_t *)v138;
                *((_DWORD *)v138 + 7) = 1;
                if (!*(void *)&v63)
                {
                  if (!*(void *)&v66) {
                    goto LABEL_240;
                  }
                  *((int32x2_t *)v138 + 1) = v66;
                  *((_DWORD *)v138 + 4) = 1;
                  v141.i32[1] = 1;
                  v141.i32[0] = *((_DWORD *)v138 + 6);
                  int v131 = vadd_s32(*(int32x2_t *)(*(void *)&v66 + 28LL), v141);
                  goto LABEL_215;
                }

                *((int32x2_t *)v138 + 1) = v63;
                *((_DWORD *)v138 + 4) = 1;
                v139.i32[1] = 1;
                v139.i32[0] = *((_DWORD *)v138 + 6);
                int v140 = vadd_s32(*(int32x2_t *)(*(void *)&v63 + 28LL), v139);
                *((int32x2_t *)v138 + 3) = v140;
                uint64_t v132 = *((_DWORD *)v138 + 8) + *(_DWORD *)(*(void *)&v63 + 36LL);
                *((_DWORD *)v138 + 8) = v132;
                if (v66)
                {
                  **(int32x2_t **)&int v63 = v66;
                  *((_DWORD *)v138 + 4) = 2;
                  *((int32x2_t *)v138 + 3) = vadd_s32(*(int32x2_t *)(*(void *)&v66 + 28LL), v140);
                  int v137 = *(_DWORD *)(*(void *)&v66 + 36LL);
                  goto LABEL_239;
                }

char *__cdecl snvis(char *a1, size_t a2, int a3, int a4, int a5, const char *a6)
{
  int v10 = a1;
  size_t v9 = a2;
  v8[0] = a3;
  v8[1] = a5;
  int v6 = istrsenvisx(&v10, (uint64_t)&v9, v8, 1uLL, a4, a6, 0LL);
  if (v6 >= 0) {
    return &v10[v6];
  }
  else {
    return 0LL;
  }
}

int strsvis(char *a1, const char *a2, int a3, const char *a4)
{
  int v5 = a1;
  return istrsenvisxl(&v5, 0LL, a2, a3, a4);
}

uint64_t istrsenvisxl(char **a1, uint64_t a2, const char *a3, unsigned int a4, const char *a5)
{
  if (a3) {
    unint64_t v10 = _platform_strlen();
  }
  else {
    unint64_t v10 = 0LL;
  }
  return istrsenvisx(a1, a2, a3, v10, a4, a5, 0LL);
}

int strsnvis(char *a1, size_t a2, const char *a3, int a4, const char *a5)
{
  size_t v6 = a2;
  char v7 = a1;
  return istrsenvisxl(&v7, (uint64_t)&v6, a3, a4, a5);
}

int strsvisx(char *a1, const char *a2, size_t a3, int a4, const char *a5)
{
  size_t v6 = a1;
  return istrsenvisx(&v6, 0LL, a2, a3, a4, a5, 0LL);
}

int strsnvisx(char *a1, size_t a2, const char *a3, size_t a4, int a5, const char *a6)
{
  size_t v7 = a2;
  int v8 = a1;
  return istrsenvisx(&v8, (uint64_t)&v7, a3, a4, a5, a6, 0LL);
}

int strsenvisx(char *a1, size_t a2, const char *a3, size_t a4, int a5, const char *a6, int *a7)
{
  size_t v8 = a2;
  size_t v9 = a1;
  return istrsenvisx(&v9, (uint64_t)&v8, a3, a4, a5, a6, a7);
}

char *__cdecl vis(char *a1, int a2, int a3, int a4)
{
  size_t v7 = a1;
  v6[0] = a2;
  v6[1] = a4;
  int v4 = istrsenvisx(&v7, 0LL, v6, 1uLL, a3, "", 0LL);
  if (v4 >= 0) {
    return &v7[v4];
  }
  else {
    return 0LL;
  }
}

char *__cdecl nvis(char *a1, size_t a2, int a3, int a4, int a5)
{
  size_t v9 = a1;
  size_t v8 = a2;
  v7[0] = a3;
  v7[1] = a5;
  int v5 = istrsenvisx(&v9, (uint64_t)&v8, v7, 1uLL, a4, "", 0LL);
  if (v5 >= 0) {
    return &v9[v5];
  }
  else {
    return 0LL;
  }
}

int strvis(char *a1, const char *a2, int a3)
{
  int v4 = a1;
  return istrsenvisxl(&v4, 0LL, a2, a3, "");
}

int strnvis(char *a1, size_t a2, const char *a3, int a4)
{
  size_t v5 = a2;
  size_t v6 = a1;
  return istrsenvisxl(&v6, (uint64_t)&v5, a3, a4, "");
}

int stravis(char **a1, const char *a2, int a3)
{
  *a1 = 0LL;
  return istrsenvisxl(a1, 0LL, a2, a3, "");
}

int strvisx(char *a1, const char *a2, size_t a3, int a4)
{
  size_t v5 = a1;
  return istrsenvisx(&v5, 0LL, a2, a3, a4, "", 0LL);
}

int strnvisx(char *a1, size_t a2, const char *a3, size_t a4, int a5)
{
  size_t v6 = a2;
  size_t v7 = a1;
  return istrsenvisx(&v7, (uint64_t)&v6, a3, a4, a5, "", 0LL);
}

int strenvisx(char *a1, size_t a2, const char *a3, size_t a4, int a5, int *a6)
{
  size_t v7 = a2;
  size_t v8 = a1;
  return istrsenvisx(&v8, (uint64_t)&v7, a3, a4, a5, "", a6);
}

_DWORD *do_hvis(_DWORD *a1, unsigned int a2, __int16 a3, char a4, __int32 *a5)
{
  if (a2 <= 0x7F)
  {
    unint64_t v10 = &_DefaultRuneLocale;
LABEL_8:
    __uint32_t v11 = v10->__runetype[a2];
    goto LABEL_9;
  }

  if (a2 < 0x100)
  {
    uint64_t v12 = __locale_key;
    uint64_t v13 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v12);
    if (!v13) {
      uint64_t v13 = &__global_locale;
    }
    unint64_t v10 = *(_RuneLocale **)(v13[166] + 120LL);
    goto LABEL_8;
  }

  LOWORD(v11) = ___runetype(a2);
LABEL_9:
  if ((v11 & 0x500) != 0
    || a2 - 39 < 8
    || a2 - 33 <= 0x3E && ((1LL << (a2 - 33)) & 0x4000000000000009LL) != 0)
  {
    return (_DWORD *)do_svis((uint64_t)a1, a2, a3, a4, a5);
  }

  *a1 = 37;
  a1[1] = dword_1804990C4[a2 >> 4];
  int result = a1 + 3;
  a1[2] = dword_1804990C4[a2 & 0xF];
  return result;
}

_DWORD *do_mvis(_DWORD *a1, unsigned __int32 a2, __int16 a3, int a4, __int32 *a5)
{
  if (a2 == 10) {
    return (_DWORD *)do_svis((uint64_t)a1, a2, a3, a4, a5);
  }
  if (a2 > 0x7F)
  {
    if (a2 >= 0x100)
    {
      if ((___runetype(a2) & 0x4000) == 0) {
        goto LABEL_14;
      }
      goto LABEL_12;
    }

    uint64_t v12 = __locale_key;
    uint64_t v13 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v12);
    if (!v13) {
      uint64_t v13 = &__global_locale;
    }
    __uint32_t v11 = *(_RuneLocale **)(v13[166] + 120LL);
  }

  else
  {
    __uint32_t v11 = &_DefaultRuneLocale;
  }

  if ((v11->__runetype[a2] & 0x4000) == 0) {
    goto LABEL_14;
  }
LABEL_12:
  if (a4 == 10 || a4 == 13) {
    goto LABEL_27;
  }
LABEL_14:
  if (a2 <= 0x7F)
  {
    int v14 = &_DefaultRuneLocale;
    goto LABEL_22;
  }

  if (a2 < 0x100)
  {
    uint64_t v15 = __locale_key;
    char v16 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v15);
    if (!v16) {
      char v16 = &__global_locale;
    }
    int v14 = *(_RuneLocale **)(v16[166] + 120LL);
LABEL_22:
    if ((v14->__runetype[a2] & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_26;
  }

  if ((___runetype(a2) & 0x4000) == 0)
  {
LABEL_23:
  }

uint64_t do_svis(uint64_t a1, __int32 a2, __int16 a3, char a4, __int32 *a5)
{
  size_t v9 = wcschr(a5, a2);
  if (v9)
  {
LABEL_2:
    uint64_t v10 = 0LL;
    int v11 = a4 & 0xF8;
    uint64_t v12 = 56LL;
    uint64_t v13 = &unk_18C43B000;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v15 = &_DefaultRuneLocale;
    uint64_t v16 = 0x730000005CLL;
    uint64_t v17 = 0x300000005CLL;
    uint64_t v18 = 0x610000005CLL;
    uint64_t v19 = 0x620000005CLL;
    uint64_t v20 = 0x740000005CLL;
    uint64_t v21 = 0x6E0000005CLL;
    uint64_t v22 = 0x760000005CLL;
    uint64_t v23 = 0x660000005CLL;
    uint64_t v24 = 0x720000005CLL;
    while (1)
    {
      v10 |= 255LL << v12;
      if (v12 && (v10 & a2) == 0) {
        goto LABEL_14;
      }
      unint64_t v25 = ((255LL << v12) & (unint64_t)a2) >> v12;
      if ((a3 & 2) == 0) {
        goto LABEL_11;
      }
      switch((int)v25)
      {
        case 0:
          *(void *)a1 = v17;
          if (v11 == 48)
          {
            *(void *)(a1 + 8) = 0x3000000030LL;
            goto LABEL_13;
          }

          a1 += 8LL;
          goto LABEL_14;
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
          goto LABEL_38;
        case 7:
          *(void *)a1 = v18;
          a1 += 8LL;
          goto LABEL_14;
        case 8:
          *(void *)a1 = v19;
          a1 += 8LL;
          goto LABEL_14;
        case 9:
          *(void *)a1 = v20;
          a1 += 8LL;
          goto LABEL_14;
        case 10:
          *(void *)a1 = v21;
          a1 += 8LL;
          goto LABEL_14;
        case 11:
          *(void *)a1 = v22;
          a1 += 8LL;
          goto LABEL_14;
        case 12:
          *(void *)a1 = v23;
          a1 += 8LL;
          goto LABEL_14;
        case 13:
          *(void *)a1 = v24;
          a1 += 8LL;
          goto LABEL_14;
        default:
          if ((_DWORD)v25 == 32)
          {
            *(void *)a1 = v16;
            a1 += 8LL;
            goto LABEL_14;
          }

LABEL_85:
  *(_DWORD *)a1 = a2;
  a1 += 4LL;
  return a1;
}

        uint64_t v38 = (v12 - 33);
        uint64_t v39 = *(char *)(a2 + v38 + 200);
        if ((v39 - 1) < 2)
        {
          if (arrayget(v55, (int)v10 + 1))
          {
            int v40 = a2 + 24LL * *((int *)v8 + 7) - 792;
            termios v41 = *(void *)(a1 + 80);
            *(void *)size_t v8 = *(void *)(a2 + 24LL * *((int *)v8 + 7) - 480);
            *((void *)v8 + 1) = v41;
            uint64_t v42 = *(uint64_t (**)(char *, uint64_t, char *))(v40 + 296);
            stat v43 = arrayget(v55, v10);
            stat v44 = v42(v8, 2LL, v43);
            if (v44 >= 1)
            {
              *((void *)v8 + 9) = (int)v10;
              if (v44 != 1) {
                *((void *)v8 + 10) = (int)v10 + 1;
              }
            }

            uint64_t v10 = (v44 + v10);
            goto LABEL_93;
          }

          goto LABEL_109;
        }

        if (v39 == 3) {
          errx(1, "Unexpected flag: %c", v12);
        }
LABEL_93:
        int v4 = v11 + 1;
        size_t v8 = arrayget(v56, ++v53);
        if (v8) {
          goto LABEL_5;
        }
LABEL_109:
        free(v56[0]);
        uint64_t v45 = v55[0];
LABEL_110:
        free(v45);
        return 0xFFFFFFFFLL;
    }
  }

uint64_t wait_NOCANCEL()
{
  return __wait4_nocancel();
}

pid_t wait3(int *a1, int a2, rusage *a3)
{
  return wait4(-1, a1, a2, a3);
}

uint64_t waitpid_NOCANCEL(uint64_t a1, uint64_t a2, int a3)
{
  if ((a3 & 0xFFFFFFEC) == 0) {
    return __wait4_nocancel();
  }
  *__error() = 22;
  return 0xFFFFFFFFLL;
}

uint64_t _ascii_init(void *a1)
{
  a1[9] = _ascii_mbrtowc;
  a1[10] = _ascii_mbsinit;
  a1[11] = _ascii_mbsnrtowcs;
  a1[12] = _ascii_wcrtomb;
  a1[13] = _ascii_wcsnrtombs;
  a1[8] = 0x8000000001LL;
  return 0LL;
}

uint64_t _ascii_mbrtowc(_DWORD *a1, char *a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  if (!a3) {
    return -2LL;
  }
  if (*a2 < 0)
  {
    *__error() = 92;
    return -1LL;
  }

  else
  {
    int v3 = *a2;
    if (a1) {
      *a1 = v3;
    }
    return v3 != 0;
  }

uint64_t _ascii_mbsinit()
{
  return 1LL;
}

uint64_t _ascii_mbsnrtowcs(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  int v4 = (_BYTE *)*a2;
  if (a1)
  {
    if (a4)
    {
      uint64_t result = 0LL;
      while (1)
      {
        if (a3 == result)
        {
          v4 += result;
          a4 = a3;
          goto LABEL_18;
        }

        if ((char)v4[result] < 0)
        {
          *a2 = &v4[result];
          goto LABEL_20;
        }

        int v7 = v4[result];
        *(_DWORD *)(a1 + 4 * result) = v7;
        if (!v7) {
          break;
        }
        if (a4 == ++result)
        {
          v4 += result;
          goto LABEL_18;
        }
      }

      *a2 = 0LL;
    }

    else
    {
LABEL_18:
      *a2 = v4;
      return a4;
    }
  }

  else
  {
    if (a3)
    {
      size_t v8 = &v4[a3];
      size_t v9 = (_BYTE *)*a2;
      while (*v9)
      {
        if ((char)*v9 < 0)
        {
LABEL_20:
          *__error() = 92;
          return -1LL;
        }

        ++v9;
        if (!--a3)
        {
          size_t v9 = v8;
          return v9 - v4;
        }
      }
    }

    else
    {
      size_t v9 = (_BYTE *)*a2;
    }

    return v9 - v4;
  }

  return result;
}

uint64_t _ascii_wcrtomb(_BYTE *a1, unsigned int a2)
{
  if (!a1) {
    return 1LL;
  }
  if (a2 < 0x80)
  {
    *a1 = a2;
    return 1LL;
  }

  else
  {
    *__error() = 92;
    return -1LL;
  }

uint64_t _ascii_wcsnrtombs(uint64_t a1, int **a2, uint64_t a3, uint64_t a4)
{
  int v4 = *a2;
  if (a1)
  {
    if (a4)
    {
      uint64_t result = 0LL;
      while (a3 != result)
      {
        int v7 = *v4;
        if (*v4 >= 0x80)
        {
          *a2 = v4;
          goto LABEL_20;
        }

        *(_BYTE *)(a1 + result) = v7;
        if (!v7)
        {
          *a2 = 0LL;
          return result;
        }

        ++v4;
        if (a4 == ++result)
        {
          a3 = a4;
          break;
        }
      }
    }

    else
    {
      a3 = 0LL;
    }

    *a2 = v4;
    return a3;
  }

  else
  {
    if (a3)
    {
      size_t v8 = &v4[a3];
      size_t v9 = *a2;
      while (*v9)
      {
        if (*v9 >= 0x80)
        {
LABEL_20:
          *__error() = 92;
          return -1LL;
        }

        ++v9;
        if (!--a3)
        {
          size_t v9 = v8;
          return v9 - v4;
        }
      }
    }

    else
    {
      size_t v9 = *a2;
    }

    return v9 - v4;
  }

uint64_t _BIG5_init(void *a1)
{
  a1[12] = _BIG5_wcrtomb;
  a1[9] = _BIG5_mbrtowc;
  a1[10] = _BIG5_mbsinit;
  a1[8] = 0x8000000002LL;
  return 0LL;
}

uint64_t _BIG5_mbrtowc(int *a1, const char *a2, unint64_t a3, int *a4)
{
  int v4 = *a4;
  if (*a4 >= 0x100)
  {
    uint64_t v10 = __error();
    int v11 = 22;
LABEL_18:
    *uint64_t v10 = v11;
    return -1LL;
  }

  if (!a2) {
    a3 = 1LL;
  }
  if (a2) {
    size_t v6 = a2;
  }
  else {
    size_t v6 = "";
  }
  if (a2) {
    int v7 = a1;
  }
  else {
    int v7 = 0LL;
  }
  if (!a3) {
    return -2LL;
  }
  int v8 = *(unsigned __int8 *)v6;
  if (v4)
  {
    if (*v6)
    {
      if (v7) {
        *int v7 = v8 | (v4 << 8);
      }
      *a4 = 0;
      return 1LL;
    }

    goto LABEL_31;
  }

  if ((v8 + 95) > 0x5Du)
  {
    if (v7) {
      *int v7 = v8;
    }
    return v8 != 0;
  }

  else
  {
    if (a3 <= 1)
    {
      *a4 = v8;
      return -2LL;
    }

    if (!v6[1])
    {
LABEL_31:
      uint64_t v10 = __error();
      int v11 = 92;
      goto LABEL_18;
    }

    if (v7) {
      *int v7 = *((unsigned __int8 *)v6 + 1) | (v8 << 8);
    }
    return 2LL;
  }

uint64_t _BIG5_wcrtomb(_BYTE *a1, unsigned int a2, _DWORD *a3)
{
  if (*a3)
  {
    *__error() = 22;
    return -1LL;
  }

  if (!a1) {
    return 1LL;
  }
  if ((a2 & 0x8000) == 0)
  {
    *a1 = a2;
    return 1LL;
  }

  *(_WORD *)a1 = bswap32(a2) >> 16;
  return 2LL;
}

BOOL _BIG5_mbsinit(_DWORD *a1)
{
  return !a1 || *a1 == 0;
}

wint_t btowc_l(wint_t result, locale_t a2)
{
  if (result != -1)
  {
    locale_t v2 = (locale_t)&__global_locale;
    if (a2 != (locale_t)-1LL) {
      locale_t v2 = a2;
    }
    if (a2) {
      locale_t v3 = v2;
    }
    else {
      locale_t v3 = (locale_t)&__c_locale;
    }
    char v5 = result;
    if ((unint64_t)(*(uint64_t (**)(wint_t *, char *, uint64_t, _OWORD *))(*((void *)v3 + 166) + 72LL))( &v4,  &v5,  1LL,  v6) > 1) {
      return -1;
    }
    else {
      return v4;
    }
  }

  return result;
}

wint_t btowc(int a1)
{
  uint64_t v1 = __locale_key;
  locale_t v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2) {
    locale_t v3 = v2;
  }
  else {
    locale_t v3 = (_xlocale *)&__global_locale;
  }
  return btowc_l(a1, v3);
}

uint64_t __collate_load_tables(int a1, uint64_t a2)
{
  if (!_platform_strcmp() || !_platform_strcmp() || !_platform_strncmp())
  {
    if ((_UNKNOWN *)a2 == &__global_locale) {
      __collate_load_error = 1;
    }
    uint64_t v8 = *(void *)(a2 + 1320);
    if (v8)
    {
      do
      {
        unsigned int v9 = __ldaxr((unsigned int *)v8);
        unsigned int v10 = v9 - 1;
      }

      while (__stlxr(v10, (unsigned int *)v8));
      if (!v10)
      {
        int v11 = *(void (**)(void))(v8 + 8);
        if (v11) {
          v11();
        }
      }
    }

    *(void *)(a2 + 1320) = __xlocale_C_collate;
    do
      unsigned int v12 = __ldaxr(__xlocale_C_collate);
    while (__stlxr(v12 + 1, __xlocale_C_collate));
    return 1LL;
  }

  if (__collate_load_tables_cache && !_platform_strcmp())
  {
    if ((_UNKNOWN *)a2 == &__global_locale) {
      __collate_load_error = 0;
    }
    uint64_t v13 = *(void *)(a2 + 1320);
    if (v13)
    {
      do
      {
        unsigned int v14 = __ldaxr((unsigned int *)v13);
        unsigned int v15 = v14 - 1;
      }

      while (__stlxr(v15, (unsigned int *)v13));
      if (!v15)
      {
        uint64_t v16 = *(void (**)(void))(v13 + 8);
        if (v16) {
          v16();
        }
      }
    }

    uint64_t v17 = (unsigned int *)__collate_load_tables_cache;
    *(void *)(a2 + 1320) = __collate_load_tables_cache;
    if (v17)
    {
      do
        unsigned int v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
    }

    return 1LL;
  }

  _platform_strcpy();
  strcpy(&v51[_platform_strlen()], "/LC_COLLATE");
  uint64_t result = __open_path_locale(v51);
  if ((_DWORD)result == -1) {
    return result;
  }
  int v5 = result;
  if (fstat(result, &v50) < 0)
  {
    close_NOCANCEL();
    return 0xFFFFFFFFLL;
  }

  if (v50.st_size <= 0xA7uLL)
  {
    close_NOCANCEL();
LABEL_10:
    size_t v6 = __error();
    int v7 = 22;
LABEL_37:
    *size_t v6 = v7;
    return 0xFFFFFFFFLL;
  }

  uint64_t v19 = (unsigned int *)mmap(0LL, v50.st_size, 3, 2, v5, 0LL);
  close_NOCANCEL();
  if (_platform_strncmp() || (uint64_t v20 = v19[20], (v20 & 0x80000000) != 0))
  {
    munmap(v19, v50.st_size);
    size_t v6 = __error();
    int v7 = 79;
    goto LABEL_37;
  }

  if ((v19[19] & 1) != 0)
  {
    off_t st_size = v50.st_size;
    uint64_t v49 = v19;
LABEL_78:
    munmap(v49, st_size);
    goto LABEL_10;
  }

  int v21 = v19[21];
  int v22 = 136 * v20 + 44 * v21 + 10240;
  uint64_t v23 = *((unsigned __int8 *)v19 + 24);
  if (*((_BYTE *)v19 + 24))
  {
    uint64_t v24 = (int *)(v19 + 22);
    uint64_t v25 = *((unsigned __int8 *)v19 + 24);
    do
    {
      int v26 = *v24++;
      v22 += 100 * v26;
      --v25;
    }

    while (v25);
  }

  off_t v27 = v50.st_size;
  if (v50.st_size - 168 != v22)
  {
    uint64_t v49 = v19;
    off_t st_size = v50.st_size;
    goto LABEL_78;
  }

  uint64_t v28 = malloc(0xC8uLL);
  if (!v28)
  {
    munmap(v19, v27);
    size_t v6 = __error();
    int v7 = 12;
    goto LABEL_37;
  }

  uint64_t v29 = (uint64_t)v28;
  v28[9] = v19;
  v28[10] = v27;
  *(_DWORD *)uint64_t v28 = 2;
  v28[1] = destruct_collate;
  v28[24] = v19 + 42;
  uint64_t v30 = (char *)(v19 + 2602);
  if ((_DWORD)v23)
  {
    uint64_t v31 = (int *)(v19 + 22);
    uint64_t v32 = v28 + 12;
    do
    {
      int v33 = *v31++;
      uint64_t v34 = 100LL * v33;
      BOOL v35 = v33 <= 0;
      if (v33 <= 0) {
        __int16 v36 = 0LL;
      }
      else {
        __int16 v36 = v30;
      }
      if (v35) {
        uint64_t v34 = 0LL;
      }
      v30 += v34;
      *v32++ = v36;
      --v23;
    }

    while (v23);
  }

  else {
    sigaction v37 = v30;
  }
  else {
    uint64_t v38 = 136 * v20;
  }
  uint64_t v39 = &v30[v38];
  if (v21 <= 0) {
    uint64_t v39 = 0LL;
  }
  v28[22] = v37;
  v28[23] = v39;
  _platform_strcpy();
  *(void *)(v29 + 88) = v19 + 6;
  uint64_t v40 = __collate_load_tables_cache;
  if (__collate_load_tables_cache)
  {
    do
    {
      unsigned int v41 = __ldaxr((unsigned int *)v40);
      unsigned int v42 = v41 - 1;
    }

    while (__stlxr(v42, (unsigned int *)v40));
    if (!v42)
    {
      stat v43 = *(void (**)(void))(v40 + 8);
      if (v43) {
        v43();
      }
    }
  }

  __collate_load_tables_cache = v29;
  uint64_t v44 = *(void *)(a2 + 1320);
  if (v44)
  {
    do
    {
      unsigned int v45 = __ldaxr((unsigned int *)v44);
      unsigned int v46 = v45 - 1;
    }

    while (__stlxr(v46, (unsigned int *)v44));
    if (!v46)
    {
      uint64_t v47 = *(void (**)(void))(v44 + 8);
      if (v47) {
        v47();
      }
    }
  }

  uint64_t result = 0LL;
  *(void *)(a2 + 1320) = __collate_load_tables_cache;
  *(_BYTE *)(v29 + 64) = 0;
  if ((_UNKNOWN *)a2 == &__global_locale)
  {
    uint64_t result = 0LL;
    __collate_load_error = 0;
  }

  return result;
}

uint64_t __collate_load_tables_legacy(int a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  unsigned int v8 = *(_BYTE *)(a3 + 13) & 0xF;
  if ((*(_BYTE *)(a3 + 13) & 0xF) != 0)
  {
    unsigned int v9 = (unsigned int *)(a3 + 22);
    uint64_t v10 = *(_BYTE *)(a3 + 13) & 0xF;
    do
    {
      *(v9 - 2) = bswap32(*(v9 - 2));
      *unsigned int v9 = bswap32(*v9);
      ++v9;
      --v10;
    }

    while (v10);
  }

  uint64_t v11 = bswap32(*(_DWORD *)(a3 + 30));
  *(_DWORD *)(a3 + 30) = v11;
  unsigned int v12 = bswap32(*(_DWORD *)(a3 + 34));
  *(_DWORD *)(a3 + 34) = v12;
  if ((v11 & 0x80000000) != 0)
  {
    munmap(a4, *(void *)(a5 + 96));
    uint64_t v31 = __error();
    int v32 = 79;
LABEL_21:
    *uint64_t v31 = v32;
    return 0xFFFFFFFFLL;
  }

  uint64_t v13 = a3 + 38;
  int v14 = 48 * v11 + 12 * v12 + 2048;
  if (v8)
  {
    unsigned int v15 = (int *)(a3 + 22);
    uint64_t v16 = v8;
    do
    {
      int v17 = *v15++;
      v14 += 44 * v17;
      --v16;
    }

    while (v16);
  }

  size_t v18 = *(void *)(a5 + 96);
  if (&a4[v18 - v13] != (char *)v14)
  {
    munmap(a4, *(void *)(a5 + 96));
    uint64_t v31 = __error();
    int v32 = 22;
    goto LABEL_21;
  }

  uint64_t v19 = malloc(0xC8uLL);
  if (!v19)
  {
    munmap(a4, v18);
LABEL_20:
    uint64_t v31 = __error();
    int v32 = 12;
    goto LABEL_21;
  }

  uint64_t v20 = v19;
  *((void *)v19 + 9) = a4;
  *((void *)v19 + 10) = v18;
  int v21 = 136 * v11 + 44 * v12 + 10384;
  if (v8)
  {
    int v22 = (int *)(a3 + 22);
    uint64_t v23 = v8;
    do
    {
      int v24 = *v22++;
      v21 += 100 * v24;
      --v23;
    }

    while (v23);
  }

  uint64_t v25 = (char *)calloc(1uLL, v21);
  *((void *)v20 + 11) = v25;
  if (!v25)
  {
    munmap(a4, *(void *)(a5 + 96));
    free(v20);
    goto LABEL_20;
  }

  int v26 = v25 + 144;
  *uint64_t v20 = 2;
  *((void *)v20 + 1) = destruct_collate;
  *((void *)v20 + 24) = v25 + 144;
  int v27 = *(_DWORD *)(a3 + 22);
  uint64_t v28 = (unsigned int *)(a3 + 2086);
  uint64_t v29 = v25 + 10384;
  if (v27 < 1)
  {
    uint64_t v30 = 0LL;
  }

  else
  {
    v83[0] = a3 + 2086;
    v28 += 11 * v27;
    uint64_t v30 = v25 + 10384;
    v29 += 100 * v27;
  }

  *((void *)v20 + 12) = v30;
  if ((*(_BYTE *)(a3 + 12) & 1) != 0)
  {
    *((void *)v20 + 13) = v30;
  }

  else
  {
    int v34 = *(_DWORD *)(a3 + 26);
    if (v34 < 1)
    {
      *((void *)v20 + 13) = 0LL;
    }

    else
    {
      v83[1] = v28;
      *((void *)v20 + 13) = v29;
      v28 += 11 * v34;
      v29 += 100 * v34;
    }
  }

  else {
    BOOL v35 = 0LL;
  }
  else {
    __int16 v36 = v28;
  }
  else {
    sigaction v37 = 0LL;
  }
  else {
    uint64_t v38 = v29;
  }
  int v39 = *(_DWORD *)(a3 + 34);
  BOOL v40 = v39 <= 0;
  if (v39 <= 0) {
    unsigned int v41 = 0LL;
  }
  else {
    unsigned int v41 = v38;
  }
  if (v40) {
    unsigned int v42 = 0LL;
  }
  else {
    unsigned int v42 = v36;
  }
  *((void *)v20 + 22) = v35;
  *((void *)v20 + 23) = v41;
  char v43 = *(_BYTE *)(a3 + 13);
  int v44 = 255;
  do
  {
    int v45 = v44;
    if ((v43 & 0xF) != 0)
    {
      unint64_t v46 = 0LL;
      do
      {
        *(_DWORD *)&v26[4 * v46] = bswap32(*(_DWORD *)(v13 + 4 * v46));
        ++v46;
        char v43 = *(_BYTE *)(a3 + 13);
      }

      while (v46 < (v43 & 0xFu));
    }

    v26 += 40;
    v13 += 8LL;
    int v44 = v45 - 1;
  }

  while (v45);
  if ((v43 & 0xF) != 0)
  {
    unint64_t v47 = 0LL;
    do
    {
      int v48 = *(_DWORD *)(a3 + 22 + 4 * v47);
      if (v48 >= 1)
      {
        uint64_t v49 = v83[v47];
        uint64_t v50 = *(void *)&v20[2 * v47 + 24];
        uint64_t v51 = (unsigned int *)(v50 + 8);
        do
        {
          __int128 v52 = *(_OWORD *)(v49 + 4);
          __int128 v53 = *(_OWORD *)(v49 + 20);
          *(void *)(v50 + 36) = *(void *)(v49 + 36);
          *(_OWORD *)(v50 + 20) = v53;
          *(_OWORD *)(v50 + 4) = v52;
          *(_DWORD *)uint64_t v50 = bswap32(*(_DWORD *)v49);
          unsigned int v54 = *(_DWORD *)(v50 + 4);
          if (v54)
          {
            unsigned int v55 = 10;
            int v56 = v51;
            do
            {
              *(v56 - 1) = bswap32(v54);
              unsigned int v57 = *v56++;
              unsigned int v54 = v57;
              if (v57) {
                BOOL v58 = v55 > 1;
              }
              else {
                BOOL v58 = 0;
              }
              --v55;
            }

            while (v58);
          }

          v49 += 44LL;
          v50 += 100LL;
          v51 += 25;
          BOOL v40 = v48-- <= 1;
        }

        while (!v40);
        char v43 = *(_BYTE *)(a3 + 13);
      }

      ++v47;
    }

    while (v47 < (v43 & 0xFu));
  }

  if ((int)v11 >= 1)
  {
    uint64_t v59 = (unsigned int *)(v35 + 4);
    do
    {
      __int128 v61 = *(_OWORD *)v37;
      __int128 v60 = *((_OWORD *)v37 + 1);
      *((void *)v35 + 4) = *((void *)v37 + 4);
      *(_OWORD *)BOOL v35 = v61;
      *((_OWORD *)v35 + 1) = v60;
      unsigned int v62 = *(_DWORD *)v35;
      if (*(_DWORD *)v35)
      {
        unsigned int v63 = 10;
        __int128 v64 = v59;
        do
        {
          *(v64 - 1) = bswap32(v62);
          unsigned int v65 = *v64++;
          unsigned int v62 = v65;
          if (v65) {
            BOOL v66 = v63 > 1;
          }
          else {
            BOOL v66 = 0;
          }
          --v63;
        }

        while (v66);
      }

      if ((*(_BYTE *)(a3 + 13) & 0xF) != 0)
      {
        unint64_t v67 = 0LL;
        do
        {
          *(_DWORD *)&v35[4 * v67 + 96] = bswap32(v37[v67 + 10]);
          ++v67;
        }

        while (v67 < (*(_BYTE *)(a3 + 13) & 0xFu));
      }

      v35 += 136;
      v37 += 12;
      v59 += 34;
      BOOL v40 = (int)v11 <= 1;
      LODWORD(v11) = v11 - 1;
    }

    while (!v40);
  }

  int v68 = *(_DWORD *)(a3 + 34);
  if (v68 >= 1)
  {
    mbstate_t v69 = (_DWORD *)*((void *)v20 + 23);
    do
    {
      *mbstate_t v69 = bswap32(*v42);
      if ((*(_BYTE *)(a3 + 13) & 0xF) != 0)
      {
        unint64_t v70 = 1LL;
        do
          v69[v70] = bswap32(v42[v70]);
        while (v70++ < (*(_BYTE *)(a3 + 13) & 0xFu));
      }

      v69 += 11;
      v42 += 3;
      BOOL v40 = v68-- <= 1;
    }

    while (!v40);
  }

  _platform_strcpy();
  uint64_t v72 = *((void *)v20 + 11);
  *(_OWORD *)(v72 + 112) = 0u;
  *(_OWORD *)(v72 + 128) = 0u;
  *(_OWORD *)(v72 + 80) = 0u;
  *(_OWORD *)(v72 + 96) = 0u;
  *(_OWORD *)(v72 + 48) = 0u;
  *(_OWORD *)(v72 + 64) = 0u;
  *(_OWORD *)(v72 + 16) = 0u;
  *(_OWORD *)(v72 + 32) = 0u;
  *(_OWORD *)uint64_t v72 = 0u;
  *(_BYTE *)uint64_t v72 = *(_BYTE *)(a3 + 13) & 0xF;
  *(_BYTE *)(v72 + 11) = *(_BYTE *)(a3 + 13) >> 4;
  *(_DWORD *)(v72 + 52) = *(unsigned __int8 *)(a3 + 12) | 2;
  *(void *)(v72 + 56) = *(void *)(a3 + 30);
  *(_WORD *)(v72 + 1) = *(_WORD *)(a3 + 10);
  *(void *)(v72 + 64) = *(void *)(a3 + 22);
  *(void *)(v72 + 104) = *(void *)(a3 + 14);
  uint64_t v73 = __collate_load_tables_cache;
  uint64_t v74 = a2;
  if (__collate_load_tables_cache)
  {
    do
    {
      unsigned int v75 = __ldaxr((unsigned int *)v73);
      unsigned int v76 = v75 - 1;
    }

    while (__stlxr(v76, (unsigned int *)v73));
    if (!v76)
    {
      unsigned int v77 = *(void (**)(void))(v73 + 8);
      if (v77)
      {
        v77();
        uint64_t v74 = a2;
      }
    }
  }

  __collate_load_tables_cache = (uint64_t)v20;
  uint64_t v78 = *(void *)(v74 + 1320);
  if (v78)
  {
    do
    {
      unsigned int v79 = __ldaxr((unsigned int *)v78);
      unsigned int v80 = v79 - 1;
    }

    while (__stlxr(v80, (unsigned int *)v78));
    if (!v80)
    {
      int v81 = *(void (**)(void))(v78 + 8);
      if (v81)
      {
        v81();
        uint64_t v74 = a2;
      }
    }
  }

  uint64_t result = 0LL;
  *(void *)(v74 + 1320) = v20;
  *((_BYTE *)v20 + 64) = 0;
  if ((_UNKNOWN *)v74 == &__global_locale)
  {
    uint64_t result = 0LL;
    __collate_load_error = 0;
  }

  return result;
}

void destruct_collate(void *a1)
{
  locale_t v2 = (_BYTE *)a1[11];
  if ((v2[52] & 2) != 0) {
    free(v2);
  }
  locale_t v3 = (void *)a1[9];
  if (v3)
  {
    size_t v4 = a1[10];
    if (v4) {
      munmap(v3, v4);
    }
  }

  free(a1);
}

__int32 *__collate_substitute(__int32 *a1, int a2, uint64_t a3)
{
  if (!a1 || (locale_t v3 = a1, (v4 = *a1) == 0))
  {
    a1 = (__int32 *)&unk_180499190;
    return __collate_wcsdup(a1);
  }

  uint64_t v5 = *(void *)(a3 + 1320);
  int v6 = *(_DWORD *)(*(void *)(v5 + 88) + 4LL * a2 + 64);
  if (v6 <= 0) {
    return __collate_wcsdup(a1);
  }
  uint64_t v7 = a2;
  int v8 = wcslen(a1);
  uint64_t v9 = *(void *)(v5 + 8 * v7 + 96);
  int v10 = v8 / 4;
  if (v8 / 4 <= 2) {
    int v10 = 2;
  }
  int v34 = v10;
  int v11 = v10 + v8;
  unsigned int v12 = malloc(4LL * (v10 + v8));
  if (!v12) {
LABEL_34:
  }
    __collate_err(71);
  uint64_t v13 = v12;
  int v14 = 0;
  int v15 = v6 - 1;
  do
  {
    int v16 = 0;
    int v17 = v14;
    int v18 = v15;
    while (1)
    {
      int v19 = v18 + v16;
      if (v18 + v16 < 0 != __OFADD__(v18, v16)) {
        ++v19;
      }
      int v20 = v19 >> 1;
      uint64_t v21 = (uint64_t)v19 >> 1;
      __int32 v22 = *(_DWORD *)(v9 + 100LL * v20);
      if (v22 == v4) {
        break;
      }
      if (v22 < v4) {
        int v16 = v21 + 1;
      }
      else {
        int v18 = v21 - 1;
      }
      if (v16 > v18)
      {
        LODWORD(v23) = 1;
        int v24 = v3;
        goto LABEL_26;
      }
    }

    uint64_t v25 = v9 + 100LL * (int)v21;
    int v26 = *(_DWORD *)(v25 + 4);
    int v24 = (const __int32 *)(v25 + 4);
    if (v26)
    {
      uint64_t v23 = 0LL;
      uint64_t v27 = v9 + 8 + 100LL * (int)v21;
      do
      {
        int v28 = *(_DWORD *)(v27 + 4 * v23);
        unsigned int v29 = v23++;
        if (v28) {
          BOOL v30 = v29 >= 0x17;
        }
        else {
          BOOL v30 = 1;
        }
      }

      while (!v30);
    }

    else
    {
      LODWORD(v23) = 0;
    }

__int32 *__collate_wcsdup(const __int32 *a1)
{
  size_t v2 = wcslen(a1);
  locale_t v3 = (__int32 *)malloc(4 * v2 + 4);
  if (!v3) {
    __collate_err(71);
  }
  __int32 v4 = v3;
  wcscpy(v3, a1);
  return v4;
}

void __collate_err(int a1)
{
  int v2 = *__error();
  getprogname();
  _platform_strlen();
  write_NOCANCEL();
  write_NOCANCEL();
  _platform_strlen();
  write_NOCANCEL();
  write_NOCANCEL();
  strerror(v2);
  _platform_strlen();
  write_NOCANCEL();
  write_NOCANCEL();
  exit(a1);
}

__int32 *__collate_lookup_l(__int32 *result, _DWORD *a2, int *a3, int *a4, void *a5)
{
  __int32 v8 = *result;
  if (!*result)
  {
    *a2 = 0;
    *a3 = 0;
    goto LABEL_10;
  }

  uint64_t v9 = result;
  int v10 = &__global_locale;
  if (a5 != (void *)-1LL) {
    int v10 = a5;
  }
  if (a5) {
    int v11 = v10;
  }
  else {
    int v11 = &__c_locale;
  }
  uint64_t v12 = v11[165];
  int v13 = *(unsigned __int8 *)(v12 + 64);
  *a2 = 1;
  if (v13)
  {
    __int32 v8 = 0;
    *a3 = *result;
LABEL_10:
    *a4 = v8;
    return result;
  }

  uint64_t result = (__int32 *)chainsearch(result, &v20, (uint64_t)v11);
  if (!result || result[24] < 0)
  {
    int v15 = *v9;
    uint64_t v16 = v11[165];
    if (*v9 > 255)
    {
      int v18 = *(int **)(v16 + 88);
      if (v18[15] < 1 || (uint64_t result = largesearch(*v9, (uint64_t)v11)) == 0LL)
      {
        int v19 = v18[26];
        if (v19 < 0) {
          int v19 = v15 - v19;
        }
        *a3 = v19;
        __int32 v8 = v18[27];
        if (v8 < 0) {
          __int32 v8 = *v9 - v8;
        }
        goto LABEL_10;
      }

      *a3 = result[1];
      int v14 = result + 2;
    }

    else
    {
      uint64_t v17 = *(void *)(v16 + 192);
      *a3 = *(_DWORD *)(v17 + 40LL * v15);
      int v14 = (int *)(v17 + 40LL * *v9 + 4);
    }
  }

  else
  {
    *a2 = v20;
    *a3 = result[24];
    int v14 = result + 25;
  }

  *a4 = *v14;
  if ((*a3 & 0x80000000) == 0)
  {
    uint64_t result = (__int32 *)lookup_substsearch(v12, *a3, 0);
    if (result) {
      *a3 = *result;
    }
  }

  if ((*a4 & 0x80000000) == 0)
  {
    uint64_t result = (__int32 *)lookup_substsearch(v12, *a4, 1);
    if (result)
    {
      __int32 v8 = result[1];
      goto LABEL_10;
    }
  }

  return result;
}

const __int32 *chainsearch(__int32 *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 1320);
  int v4 = *(_DWORD *)(*(void *)(v3 + 88) + 56LL);
  int v5 = v4 - 1;
  if (v4 < 1) {
    return 0LL;
  }
  int v8 = 0;
  uint64_t v9 = *(void *)(v3 + 176);
  while (1)
  {
    int v10 = v8 + v5;
    if (v8 + v5 < 0 != __OFADD__(v8, v5)) {
      ++v10;
    }
    uint64_t v11 = (uint64_t)v10 >> 1;
    uint64_t v12 = (const __int32 *)(v9 + 136LL * (v10 >> 1));
    int v13 = *a1 - *v12;
    if (*a1 == *v12)
    {
      if (*v12)
      {
        uint64_t v14 = 0LL;
        do
        {
          unsigned int v15 = v14 + 1;
          else {
            BOOL v16 = 1;
          }
          ++v14;
        }

        while (!v16);
        size_t v17 = v15;
      }

      else
      {
        size_t v17 = 0LL;
      }

      int v13 = wcsncmp(a1, v12, v17);
      if (!v13) {
        break;
      }
    }

    if (v13 > 0) {
      int v8 = v11 + 1;
    }
    else {
      int v5 = v11 - 1;
    }
    if (v8 > v5) {
      return 0LL;
    }
  }

  *a2 = v17;
  return v12;
}

_DWORD *largesearch(int a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 1320);
  int v3 = *(_DWORD *)(*(void *)(v2 + 88) + 60LL);
  BOOL v4 = __OFSUB__(v3, 1);
  int v5 = v3 - 1;
  if (v5 < 0 != v4) {
    return 0LL;
  }
  int v6 = 0;
  uint64_t v7 = *(void *)(v2 + 184);
  while (1)
  {
    int v8 = v6 + v5;
    if (v6 + v5 < 0 != __OFADD__(v6, v5)) {
      ++v8;
    }
    int v9 = v8 >> 1;
    int v10 = (_DWORD *)(v7 + 44LL * (v8 >> 1));
    if (*v10 == a1) {
      break;
    }
    if (*v10 < a1) {
      int v6 = v9 + 1;
    }
    else {
      int v5 = v9 - 1;
    }
    if (v6 > v5) {
      return 0LL;
    }
  }

  return v10;
}

uint64_t lookup_substsearch(uint64_t a1, int a2, int a3)
{
  int v3 = *(unsigned __int8 **)(a1 + 88);
  if (!*(_DWORD *)&v3[4 * a3 + 64]) {
    return 0LL;
  }
  uint64_t v4 = 0LL;
  if ((a2 & 0x40000000) != 0 && *v3 > a3)
  {
    uint64_t v5 = *(void *)(a1 + 8LL * a3 + 96);
    return v5 + 100LL * (int)(a2 & 0xBFFFFFFF) + 4;
  }

  return v4;
}

int *__collate_lookup(int *result, _DWORD *a2, int *a3, int *a4)
{
  uint64_t v7 = __locale_key;
  int v8 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v7);
  if (v8) {
    int v9 = v8;
  }
  else {
    int v9 = (_xlocale *)&__global_locale;
  }
  if (*(_BYTE *)result)
  {
    int v10 = result;
    if (*(_BYTE *)(*((void *)v9 + 165) + 64LL) || (uint64_t v12 = __collate_mbstowcs((char *)result, v9)) == 0LL)
    {
      *a2 = 1;
      *a3 = *(unsigned __int8 *)v10;
      *a4 = 0;
      int v11 = *__error();
    }

    else
    {
      int v13 = v12;
      __collate_lookup_l(v12, a2, a3, a4, v9);
      int v11 = *__error();
      free(v13);
    }

    uint64_t result = __error();
    *uint64_t result = v11;
  }

  else
  {
    *a2 = 0;
    *a3 = 0;
    *a4 = 0;
  }

  return result;
}

__int32 *__collate_mbstowcs(char *a1, locale_t a2)
{
  int v8 = a1;
  int v9 = a1;
  memset(&v10, 0, sizeof(v10));
  size_t v3 = mbsrtowcs_l(0LL, (const char **)&v8, 0LL, &v10, a2);
  if (v3 == -1LL) {
    return 0LL;
  }
  size_t v4 = v3;
  uint64_t v5 = (__int32 *)malloc(4 * v3 + 4);
  if (!v5) {
    __collate_err(71);
  }
  int v6 = v5;
  memset(&v10, 0, sizeof(v10));
  mbsrtowcs_l(v5, (const char **)&v9, v4, &v10, a2);
  v6[v4] = 0;
  return v6;
}

int *__collate_lookup_which(__int32 *a1, _DWORD *a2, int *a3, int a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a5 + 1320);
  *a2 = 1;
  uint64_t result = (int *)chainsearch(a1, &v17, a5);
  if (!result || (int v12 = result[a4 + 24], v12 < 0))
  {
    int v13 = *a1;
    uint64_t v14 = *(void *)(a5 + 1320);
    if (*a1 > 255)
    {
      uint64_t v15 = *(void *)(v14 + 88);
      if (*(int *)(v15 + 60) < 1 || (uint64_t result = largesearch(v13, a5)) == 0LL)
      {
        if ((*(_BYTE *)(v15 + a4 + 1) & 8) != 0) {
          int v16 = v13 & 0xFFFFFF;
        }
        else {
          int v16 = *(_DWORD *)(v15 + 4LL * a4 + 104);
        }
        goto LABEL_11;
      }

      int v12 = result[a4 + 1];
    }

    else
    {
      int v12 = *(_DWORD *)(*(void *)(v14 + 192) + 40LL * v13 + 4LL * a4);
    }
  }

  else
  {
    *a2 = v17;
  }

  *a3 = v12;
  uint64_t result = (int *)lookup_substsearch(v10, v12, 0);
  if (!result) {
    return result;
  }
  int v16 = *result;
LABEL_11:
  *a3 = v16;
  return result;
}

int *__collate_xfrm(__int32 *a1, _OWORD *a2, uint64_t a3)
{
  size_t v3 = *(unsigned __int8 **)(*(void *)(a3 + 1320) + 88LL);
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  if (*v3)
  {
    uint64_t v7 = 0LL;
    int v8 = 0LL;
    int v9 = 0LL;
    while (1)
    {
      unsigned __int8 v10 = v3[v7 + 1];
      if (!v7 || (v3[52] & 1) == 0)
      {
        int v11 = *__error();
        free(v8);
        *__error() = v11;
        int v8 = __collate_substitute(a1, v7, a3);
      }

      if ((v10 & 2) != 0)
      {
        int v13 = *__error();
        free(v9);
        *__error() = v13;
        uint64_t v14 = v8 ? v8 : a1;
        int v9 = __collate_wcsdup(v14);
        uint64_t v15 = &v9[wcslen(v9) - 1];
        if (v9 < v15)
        {
          int v16 = v9 + 1;
          do
          {
            __int32 v17 = *(v16 - 1);
            *(v16 - 1) = *v15;
            *v15-- = v17;
          }

          while (v16++ < v15);
        }

        int v12 = v9;
      }

      else
      {
        int v12 = v8 ? v8 : a1;
      }

      int v19 = *__error();
      size_t v20 = wcslen(v12);
      uint64_t v21 = malloc(4 * v20 + 4);
      *((void *)a2 + v7) = v21;
      if (!v21) {
        break;
      }
      *__error() = v19;
      __int32 v22 = (int *)*((void *)a2 + v7);
      if ((v10 & 4) != 0)
      {
        while (*v12)
        {
          __collate_lookup_which(v12, &v26, &v27, v7, a3);
          int v23 = v27;
          if (v27 <= 0)
          {
            if (v27 < 0)
            {
LABEL_32:
              int v19 = 22;
              goto LABEL_33;
            }

            int v23 = 0xFFFFFF;
            int v27 = 0xFFFFFF;
          }

          v12 += v26;
          *v22++ = v23;
        }
      }

      else
      {
        while (*v12)
        {
          __collate_lookup_which(v12, &v26, &v27, v7, a3);
          v12 += v26;
          if (v27 > 0)
          {
            *v22++ = v27;
          }

          else if (v27 < 0)
          {
            goto LABEL_32;
          }
        }
      }

      *__int32 v22 = 0;
    }

uint64_t __collate_collating_symbol( __int32 *a1, unint64_t a2, char *a3, size_t a4, mbstate_t *a5, locale_t a6)
{
  size_t v6 = a4;
  uint64_t v7 = a3;
  if (!*(_BYTE *)(*((void *)a6 + 165) + 64LL))
  {
    if (a4)
    {
      uint64_t v13 = 0LL;
      uint64_t v14 = v23;
      do
      {
        size_t v15 = mbrtowc_l(&v22, v7, v6, a5, a6);
        if (v15 > 0xFFFFFFFFFFFFFFFDLL) {
          return -1LL;
        }
        if (!v15) {
          break;
        }
        if (v13 == 24) {
          return -1LL;
        }
        *v14++ = v22;
        v7 += v15;
        ++v13;
        v6 -= v15;
      }

      while (v6);
      if (v13 - 1 >= a2) {
        return -1LL;
      }
      if (v13 == 1)
      {
        __int32 v16 = v23[0];
        uint64_t v17 = *((void *)a6 + 165);
        if (v23[0] > 255)
        {
          int v19 = largesearch(v23[0], (uint64_t)a6);
          if (!v19 || (v19[1] & 0x80000000) != 0) {
            return 0LL;
          }
        }

        else if ((*(_DWORD *)(*(void *)(v17 + 192) + 40LL * v23[0]) & 0x80000000) != 0)
        {
          return 0LL;
        }

        *a1 = v16;
        return 1LL;
      }

      *uint64_t v14 = 0;
      if (*(int *)(*(void *)(*((void *)a6 + 165) + 88LL) + 56LL) >= 1 && chainsearch(v23, &v21, (uint64_t)a6))
      {
        uint64_t v10 = v21;
        if (v21 >= a2) {
          size_t v18 = a2;
        }
        else {
          size_t v18 = v21;
        }
        wcsncpy(a1, v23, v18);
        return v10;
      }

      return 0LL;
    }

    return -1LL;
  }

  if (!a2) {
    return -1LL;
  }
  if (a4 != 1 || *a3 < 0) {
    return 0LL;
  }
  *a1 = *a3;
  return 1LL;
}

uint64_t __collate_equiv_class(char *a1, size_t a2, mbstate_t *a3, _xlocale *a4)
{
  if (*(_BYTE *)(*((void *)a4 + 165) + 64LL)) {
    return 0LL;
  }
  size_t v5 = a2;
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = 0LL;
  uint64_t v10 = v19;
  do
  {
    size_t v11 = mbrtowc_l(&v18, a1, v5, a3, a4);
    if (v11 > 0xFFFFFFFFFFFFFFFDLL) {
      return 0xFFFFFFFFLL;
    }
    if (!v11) {
      break;
    }
    if (v9 == 24) {
      return 0xFFFFFFFFLL;
    }
    *v10++ = v18;
    a1 += v11;
    ++v9;
    v5 -= v11;
  }

  while (v5);
  if (!v9) {
    return 0xFFFFFFFFLL;
  }
  if (v9 == 1)
  {
    uint64_t v12 = *((void *)a4 + 165);
    if (v19[0] <= 255)
    {
      uint64_t v13 = (int *)(*(void *)(v12 + 192) + 40LL * v19[0]);
      goto LABEL_25;
    }

    uint64_t result = (uint64_t)largesearch(v19[0], (uint64_t)a4);
    if (result)
    {
      uint64_t v13 = (int *)(result + 4);
LABEL_25:
      int v16 = *v13;
      if (v16) {
        return v16 & ~(v16 >> 31);
      }
      else {
        return 1LL;
      }
    }
  }

  else
  {
    *uint64_t v10 = 0;
    uint64_t result = (uint64_t)chainsearch(v19, &v17, (uint64_t)a4);
    if (result)
    {
      int v14 = *(_DWORD *)(result + 96);
      BOOL v15 = v14 == 0;
      if (v14 < 0) {
        int v14 = -v14;
      }
      if (v15) {
        return 1LL;
      }
      else {
        return v14;
      }
    }
  }

  return result;
}

unint64_t __collate_equiv_match( int a1, uint64_t a2, unint64_t a3, __int32 a4, char *a5, size_t a6, mbstate_t *a7, void *a8, locale_t a9)
{
  if (*(_BYTE *)(*((void *)a9 + 165) + 64LL)) {
    return -1LL;
  }
  size_t v11 = a8;
  size_t v13 = a6;
  int v14 = a5;
  uint64_t v16 = a2;
  if (a1 == 1) {
    int v17 = 0;
  }
  else {
    int v17 = a1;
  }
  int v50 = v17;
  if (a7)
  {
    __int128 v18 = *((_OWORD *)&a7->_mbstateL + 5);
    __int128 v57 = *((_OWORD *)&a7->_mbstateL + 4);
    __int128 v58 = v18;
    __int128 v19 = *((_OWORD *)&a7->_mbstateL + 7);
    __int128 v59 = *((_OWORD *)&a7->_mbstateL + 6);
    __int128 v60 = v19;
    __int128 v20 = *((_OWORD *)&a7->_mbstateL + 1);
    __int128 v53 = *(_OWORD *)a7->__mbstate8;
    __int128 v54 = v20;
    __int128 v21 = *((_OWORD *)&a7->_mbstateL + 3);
    __int128 v55 = *((_OWORD *)&a7->_mbstateL + 2);
    __int128 v56 = v21;
  }

  __int32 v22 = &v61;
  if (!a4)
  {
    unint64_t v9 = 0LL;
    if (a6) {
      goto LABEL_11;
    }
LABEL_22:
    uint64_t v23 = 0LL;
    *__int32 v22 = 0;
    goto LABEL_24;
  }

  __int32 v22 = &v62;
  __int32 v61 = a4;
  unint64_t v9 = 1LL;
  if (!a6) {
    goto LABEL_22;
  }
LABEL_11:
  uint64_t v23 = 0LL;
  size_t v24 = a6;
  uint64_t v25 = a5;
  do
  {
    size_t v26 = mbrtowc_l(&v52, v25, v24, a7, a9);
    if (v26 + 2 < 3) {
      break;
    }
    *v22++ = v52;
    v25 += v26;
    v23 += v26;
    ++v9;
    v24 -= v26;
  }

  while (v24);
  *__int32 v22 = 0;
  uint64_t v16 = a2;
  if (v9 < 2)
  {
    size_t v11 = a8;
  }

  else
  {
    int v27 = chainsearch(&v61, &v51, (uint64_t)a9);
    size_t v11 = a8;
    if (v27)
    {
      int v28 = v27[24];
      if (v28 < 0) {
        int v28 = -v28;
      }
      if (v28 == v50)
      {
        int v29 = v51;
        goto LABEL_31;
      }
    }
  }

LABEL_41:
  unint64_t v9 = 0LL;
  if (a7)
  {
    __int128 v43 = v58;
    *((_OWORD *)&a7->_mbstateL + 4) = v57;
    *((_OWORD *)&a7->_mbstateL + 5) = v43;
    __int128 v44 = v60;
    *((_OWORD *)&a7->_mbstateL + 6) = v59;
    *((_OWORD *)&a7->_mbstateL + 7) = v44;
    __int128 v45 = v54;
    *(_OWORD *)a7->__mbstate8 = v53;
    *((_OWORD *)&a7->_mbstateL + 1) = v45;
    __int128 v46 = v56;
    *((_OWORD *)&a7->_mbstateL + 2) = v55;
    *((_OWORD *)&a7->_mbstateL + 3) = v46;
  }

  return v9;
}

      if (!v9) {
        goto LABEL_90;
      }
    }

    uint64_t v23 = _platform_strlcat();
    if (v23 >= 0x400) {
      goto LABEL_83;
    }
    size_t v11 = v23;
    if (!getattrlist(v7, &_rp_alist, v47, 0x41CuLL, 1u))
    {
      uint64_t v25 = 0;
      int v28 = v47[3];
      size_t v26 = v47[4] == 5;
      __darwin_ino64_t st_ino = v47[5];
LABEL_52:
      int v37 = st_ino;
      __int128 v39 = v28;
      __int128 v36 = v26;
      if (v28 != (_DWORD)v2)
      {
        if (statfs(v7, &v42))
        {
          uint64_t v2 = v39;
        }

        else
        {
          uint64_t v2 = v39;
          if (!lstat(v42.f_mntonname, &v40) && v39 == v40.st_dev && v37 == v40.st_ino)
          {
            _platform_strcpy();
            do
            {
              int v29 = strrchr(__s, 47);
              if (!v29) {
                break;
              }
              if (v29 <= __s)
              {
                int v17 = _platform_strlcpy();
                goto LABEL_41;
              }

              *int v29 = 0;
            }

            while ((lstat(__s, &v40) & 0x80000000) == 0 && (v40.st_mode & 0xF000) == 0x4000);
          }
        }

        size_t v26 = v36;
      }

      if (!v26)
      {
        if ((v25 & 1) != 0)
        {
          dev_t st_dev = v2;
        }

        else
        {
          v7[v17] = 0;
          size_t v11 = _platform_strlcat();
          dev_t st_dev = v2;
          if (v11 >= 0x400) {
            goto LABEL_83;
          }
        }

      if (!v9) {
        goto LABEL_90;
      }
    }

    uint64_t v23 = _platform_strlcat();
    if (v23 >= 0x400) {
      goto LABEL_83;
    }
    size_t v11 = v23;
    if (!getattrlist(v7, &_rp_alist, v47, 0x41CuLL, 1u))
    {
      uint64_t v25 = 0;
      int v28 = v47[3];
      size_t v26 = v47[4] == 5;
      __darwin_ino64_t st_ino = v47[5];
LABEL_52:
      int v37 = st_ino;
      __int128 v39 = v28;
      __int128 v36 = v26;
      if (v28 != (_DWORD)v2)
      {
        if (statfs(v7, &v42))
        {
          uint64_t v2 = v39;
        }

        else
        {
          uint64_t v2 = v39;
          if (!lstat(v42.f_mntonname, &v40) && v39 == v40.st_dev && v37 == v40.st_ino)
          {
            _platform_strcpy();
            do
            {
              int v29 = strrchr(__s, 47);
              if (!v29) {
                break;
              }
              if (v29 <= __s)
              {
                int v17 = _platform_strlcpy();
                goto LABEL_41;
              }

              *int v29 = 0;
            }

            while ((lstat(__s, &v40) & 0x80000000) == 0 && (v40.st_mode & 0xF000) == 0x4000);
          }
        }

        size_t v26 = v36;
      }

      if (!v26)
      {
        if ((v25 & 1) != 0)
        {
          dev_t st_dev = v2;
        }

        else
        {
          v7[v17] = 0;
          size_t v11 = _platform_strlcat();
          dev_t st_dev = v2;
          if (v11 >= 0x400) {
            goto LABEL_83;
          }
        }

uint64_t __collate_equiv_value(uint64_t a1, const __int32 *a2, size_t a3)
{
  if (a3 - 24 < 0xFFFFFFFFFFFFFFE9LL) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = *(void *)(a1 + 1320);
  if (*(_BYTE *)(v5 + 64))
  {
    if (a3 == 1)
    {
      if (*a2 >= 256) {
        return 0xFFFFFFFFLL;
      }
      else {
        return *(unsigned int *)a2;
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (a3 == 1)
  {
    int v7 = *a2;
    if (*a2 <= 255)
    {
      int v8 = (int *)(*(void *)(v5 + 192) + 40LL * v7);
LABEL_22:
      int v11 = *v8;
      if (v11) {
        return v11 & ~(v11 >> 31);
      }
      else {
        return 1LL;
      }
    }

    if (*(int *)(*(void *)(v5 + 88) + 60LL) >= 1)
    {
      uint64_t result = (uint64_t)largesearch(v7, a1);
      if (!result) {
        return result;
      }
      int v8 = (int *)(result + 4);
      goto LABEL_22;
    }

    return 0LL;
  }

  wcsncpy(v13, a2, a3);
  v13[a3] = 0;
  uint64_t result = (uint64_t)chainsearch(v13, &v12, a1);
  if (result)
  {
    int v9 = *(_DWORD *)(result + 96);
    BOOL v10 = v9 == 0;
    if (v9 < 0) {
      int v9 = -v9;
    }
    if (v10) {
      return 1LL;
    }
    else {
      return v9;
    }
  }

  return result;
}

uint64_t __collate_range_cmp(int a1, int a2, _xlocale *a3)
{
  __collate_range_cmp_s1 = a1;
  __collate_range_cmp_s2 = a2;
  return wcscoll_l(&__collate_range_cmp_s1, &__collate_range_cmp_s2, a3);
}

uint64_t _EUC_CN_init(void *a1)
{
  uint64_t v1 = a1[15];
  *(void *)(v1 + 3184) = 0LL;
  *(_DWORD *)(v1 + 3192) = 0;
  a1[11] = _EUC_CN_mbsnrtowcs;
  a1[12] = _EUC_CN_wcrtomb;
  a1[13] = _EUC_CN_wcsnrtombs;
  a1[9] = _EUC_CN_mbrtowc;
  a1[10] = _EUC_mbsinit;
  a1[8] = 0x8000000002LL;
  return 0LL;
}

uint64_t _EUC_CN_mbrtowc(_DWORD *a1, const char *a2, unint64_t a3, int *a4, uint64_t a5)
{
  return _EUC_mbrtowc_impl(a1, a2, a3, a4, 0, 0, 0, 0, a5);
}

uint64_t _EUC_CN_wcrtomb(_BYTE *a1, int a2, uint64_t a3)
{
  return _EUC_wcrtomb_impl(a1, a2, a3, 0, 0, 0, 0);
}

BOOL _EUC_mbsinit(uint64_t a1)
{
  return !a1 || *(_DWORD *)(a1 + 4) == 0;
}

uint64_t _EUC_KR_init(void *a1)
{
  uint64_t v1 = a1[15];
  *(void *)(v1 + 3184) = 0LL;
  *(_DWORD *)(v1 + 3192) = 0;
  a1[11] = _EUC_KR_mbsnrtowcs;
  a1[12] = _EUC_KR_wcrtomb;
  a1[13] = _EUC_KR_wcsnrtombs;
  a1[9] = _EUC_KR_mbrtowc;
  a1[10] = _EUC_mbsinit;
  a1[8] = 0x8000000002LL;
  return 0LL;
}

uint64_t _EUC_KR_mbrtowc(_DWORD *a1, const char *a2, unint64_t a3, int *a4, uint64_t a5)
{
  return _EUC_mbrtowc_impl(a1, a2, a3, a4, 0, 0, 0, 0, a5);
}

uint64_t _EUC_KR_wcrtomb(_BYTE *a1, int a2, uint64_t a3)
{
  return _EUC_wcrtomb_impl(a1, a2, a3, 0, 0, 0, 0);
}

uint64_t _EUC_JP_init(void *a1)
{
  uint64_t v1 = a1[15];
  *(void *)(v1 + 3184) = 0LL;
  *(_DWORD *)(v1 + 3192) = 0;
  a1[11] = _EUC_JP_mbsnrtowcs;
  a1[12] = _EUC_JP_wcrtomb;
  a1[13] = _EUC_JP_wcsnrtombs;
  a1[9] = _EUC_JP_mbrtowc;
  a1[10] = _EUC_mbsinit;
  a1[8] = 0x8000000003LL;
  return 0LL;
}

uint64_t _EUC_JP_mbrtowc(_DWORD *a1, const char *a2, unint64_t a3, int *a4, uint64_t a5)
{
  return _EUC_mbrtowc_impl(a1, a2, a3, a4, 142, 2, 143, 3, a5);
}

uint64_t _EUC_JP_wcrtomb(_BYTE *a1, int a2, uint64_t a3)
{
  return _EUC_wcrtomb_impl(a1, a2, a3, 142, 2, 143, 3);
}

uint64_t _EUC_init(void *a1)
{
  uint64_t v1 = a1[15];
  *(void *)(v1 + 3184) = 0LL;
  *(_DWORD *)(v1 + 3192) = 0;
  a1[11] = _EUC_JP_mbsnrtowcs;
  a1[12] = _EUC_JP_wcrtomb;
  a1[13] = _EUC_JP_wcsnrtombs;
  a1[9] = _EUC_JP_mbrtowc;
  a1[10] = _EUC_mbsinit;
  a1[8] = 0x10000000003LL;
  return 0LL;
}

uint64_t _EUC_TW_init(void *a1)
{
  uint64_t v1 = a1[15];
  *(void *)(v1 + 3184) = 0LL;
  *(_DWORD *)(v1 + 3192) = 0;
  a1[11] = _EUC_TW_mbsnrtowcs;
  a1[12] = _EUC_TW_wcrtomb;
  a1[13] = _EUC_TW_wcsnrtombs;
  a1[9] = _EUC_TW_mbrtowc;
  a1[10] = _EUC_mbsinit;
  a1[8] = 0x8000000004LL;
  return 0LL;
}

uint64_t _EUC_TW_mbrtowc(_DWORD *a1, const char *a2, unint64_t a3, int *a4, uint64_t a5)
{
  return _EUC_mbrtowc_impl(a1, a2, a3, a4, 142, 4, 0, 0, a5);
}

uint64_t _EUC_TW_wcrtomb(_BYTE *a1, int a2, uint64_t a3)
{
  return _EUC_wcrtomb_impl(a1, a2, a3, 142, 4, 0, 0);
}

uint64_t _EUC_mbrtowc_impl( _DWORD *a1, const char *a2, unint64_t a3, int *a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  int v9 = a4[1];
  if (v9 < 0 || v9 > *(_DWORD *)(*(void *)(a9 + 1328) + 64LL))
  {
    BOOL v10 = __error();
    int v11 = 22;
LABEL_4:
    *BOOL v10 = v11;
    return -1LL;
  }

  if (!a2) {
    a3 = 1LL;
  }
  if (a2) {
    int v14 = a2;
  }
  else {
    int v14 = "";
  }
  if (a2) {
    BOOL v15 = a1;
  }
  else {
    BOOL v15 = 0LL;
  }
  if (!a3) {
    return -2LL;
  }
  if (v9)
  {
    int v16 = *a4;
  }

  else
  {
    unsigned int v19 = *(unsigned __int8 *)v14;
    if ((*v14 & 0x80000000) == 0)
    {
      if (v15) {
        *BOOL v15 = v19;
      }
      return v19 != 0;
    }

    if (v19 <= 0xA0)
    {
      int v9 = a6;
      if (v19 != a5)
      {
        int v9 = a8;
        if (v19 != a7)
        {
          BOOL v10 = __error();
          int v11 = 92;
          goto LABEL_4;
        }
      }
    }

    else
    {
      int v9 = 2;
    }

    int v16 = 0;
    *a4 = 0;
  }

  if (a3)
  {
    unint64_t v17 = a3;
    do
    {
      int v18 = *(unsigned __int8 *)v14++;
      int v16 = v18 | (v16 << 8);
      --v17;
    }

    while (v17);
  }

  if (v9 > (int)a3)
  {
    *a4 = v16;
    a4[1] = v9 - a3;
    *__error() = 92;
    return -2LL;
  }

  if (v15) {
    *BOOL v15 = v16;
  }
  a4[1] = 0;
  if (!v16) {
    return 0;
  }
  return v9;
}

uint64_t _EUC_wcrtomb_impl(_BYTE *a1, int a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  if (*(_DWORD *)(a3 + 4))
  {
    int v7 = __error();
    int v8 = 22;
LABEL_3:
    *int v7 = v8;
    return -1LL;
  }

  if (!a1) {
    return 1LL;
  }
  if (a2 <= 0x7F)
  {
    *a1 = a2;
    return 1LL;
  }

  else {
    int v11 = 2;
  }
  if (HIWORD(a2)) {
    unsigned int v12 = 3;
  }
  else {
    unsigned int v12 = v11;
  }
  uint64_t v13 = __locale_key;
  int v14 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v13);
  if (HIBYTE(a2)) {
    uint64_t result = 4LL;
  }
  else {
    uint64_t result = v12;
  }
  if (v14) {
    BOOL v15 = v14;
  }
  else {
    BOOL v15 = &__global_locale;
  }
  if ((int)result > *(_DWORD *)(v15[166] + 64LL))
  {
LABEL_21:
    int v7 = __error();
    int v8 = 92;
    goto LABEL_3;
  }

  if ((a2 - 0x10000) <= 0xFFFFA0FF)
  {
    int v16 = (a2 >> (8 * result - 8));
    if (v16 == a4)
    {
      if ((_DWORD)result != a5) {
        goto LABEL_21;
      }
    }

    else if (v16 != a6 || (_DWORD)result != a7)
    {
      goto LABEL_21;
    }
  }

  unint64_t v17 = result + 1;
  do
  {
    a1[(v17 - 2)] = a2;
    a2 >>= 8;
    --v17;
  }

  while (v17 > 1);
  return result;
}

unsigned __int8 *__fix_locale_grouping_str(unsigned __int8 *result)
{
  if (!result) {
    return (unsigned __int8 *)&nogrouping;
  }
  unsigned __int8 v1 = *result;
  if (!*result) {
    return (unsigned __int8 *)&nogrouping;
  }
  uint64_t v2 = result;
  size_t v3 = result;
  while (v1 == 45)
  {
    int v6 = *++v2;
    if (v6 != 49) {
      return (unsigned __int8 *)&nogrouping;
    }
    *v3++ = 127;
LABEL_16:
    unsigned __int8 v7 = *++v2;
    unsigned __int8 v1 = v7;
  }

  if (v1 == 59) {
    goto LABEL_16;
  }
  if (!v1)
  {
    *size_t v3 = 0;
    return result;
  }

  unsigned __int8 v4 = v1 - 48;
  unsigned int v5 = v2[1] - 48;
  if (v5 < 0xA) {
    unsigned __int8 v4 = v5 + 10 * (v1 - 48);
  }
  *size_t v3 = v4;
  if (v4)
  {
    if (v5 < 0xA) {
      ++v2;
    }
    ++v3;
    goto LABEL_16;
  }

  if (v3 == result) {
    return (unsigned __int8 *)&nogrouping;
  }
  return result;
}

_BYTE *__fix_nogrouping(_BYTE *a1)
{
  uint64_t result = &__nogrouping;
  if (a1)
  {
    if (*a1) {
      return a1;
    }
  }

  return result;
}

uint64_t _GB18030_init(void *a1)
{
  a1[12] = _GB18030_wcrtomb;
  a1[9] = _GB18030_mbrtowc;
  a1[10] = _GB18030_mbsinit;
  a1[8] = 0x8000000004LL;
  return 0LL;
}

uint64_t _GB18030_mbrtowc(unsigned int *a1, uint64_t a2, unint64_t a3, unsigned int *a4)
{
  uint64_t v4 = *a4;
  if (v4 >= 5)
  {
    unsigned int v5 = __error();
    int v6 = 22;
LABEL_3:
    int *v5 = v6;
    return -1LL;
  }

  if (a3 >= 4) {
    unint64_t v9 = 4LL;
  }
  else {
    unint64_t v9 = a3;
  }
  if (a2) {
    BOOL v10 = a1;
  }
  else {
    BOOL v10 = 0LL;
  }
  if (!a2) {
    unint64_t v9 = 1LL;
  }
  if (v9 >= 4 - v4) {
    int v11 = 4 - v4;
  }
  else {
    int v11 = v9;
  }
  _platform_strncpy();
  int v12 = *a4;
  unsigned int v13 = v12 + v11;
  *a4 += v11;
  if (!(v12 + v11)) {
    return -2LL;
  }
  unsigned int v14 = *((unsigned __int8 *)a4 + 4);
  if ((char)a4[1] < 0)
  {
    if (v14 == 128 || v14 == 255) {
      goto LABEL_25;
    }
    if (v13 < 2) {
      return -2LL;
    }
    int v17 = *((unsigned __int8 *)a4 + 5);
    if (*((char *)a4 + 5) < -1 || (v17 - 64) <= 0x3E)
    {
      unsigned int v14 = v17 | (v14 << 8);
      int v15 = 2;
      goto LABEL_18;
    }

    if ((v17 - 48) <= 9)
    {
      if (v13 < 3) {
        return -2LL;
      }
      int v18 = *((unsigned __int8 *)a4 + 6);
      if ((v18 + 1) >= 0x82u)
      {
        if (v13 < 4) {
          return -2LL;
        }
        int v19 = *((unsigned __int8 *)a4 + 7);
        if ((v19 - 58) >= 0xFFFFFFF6)
        {
          unsigned int v14 = ((v17 & 0xFFFF80FF | ((v14 & 0x7F) << 8)) << 16) | (v18 << 8) | v19;
          int v15 = 4;
          goto LABEL_18;
        }
      }
    }

uint64_t _GB18030_wcrtomb(_BYTE *a1, unsigned int a2, _DWORD *a3)
{
  if (!*a3)
  {
    if (a1)
    {
      if ((a2 & 0x80000000) != 0) {
        goto LABEL_13;
      }
      if ((a2 & 0x7F000000) != 0)
      {
        if (HIBYTE(a2) != 127)
        {
          *a1 = HIBYTE(a2) | 0x80;
          if ((HIWORD(a2) & 0xFE) - 58 >= 0xFFFFFFF6)
          {
            a1[1] = BYTE2(a2);
            if (BYTE1(a2) >= 0x81u && BYTE1(a2) != 255)
            {
              a1[2] = BYTE1(a2);
              if ((a2 & 0xFE) - 58 >= 0xFFFFFFF6)
              {
                a1[3] = a2;
                return 4LL;
              }
            }
          }
        }

        goto LABEL_13;
      }

      if ((a2 & 0xFF0000) != 0) {
        goto LABEL_13;
      }
      if ((a2 & 0xFF00) != 0)
      {
        if (BYTE1(a2) >= 0x81u && BYTE1(a2) != 255)
        {
          *a1 = BYTE1(a2);
          if ((a2 & 0xC0) != 0 && (a2 & 0x7F) != 0x7F)
          {
            a1[1] = a2;
            return 2LL;
          }
        }

        goto LABEL_13;
      }

      if (a2 > 0x7F)
      {
LABEL_13:
        size_t v3 = __error();
        int v4 = 92;
        goto LABEL_14;
      }

      *a1 = a2;
    }

    return 1LL;
  }

  size_t v3 = __error();
  int v4 = 22;
LABEL_14:
  *size_t v3 = v4;
  return -1LL;
}

BOOL _GB18030_mbsinit(_DWORD *a1)
{
  return !a1 || *a1 == 0;
}

uint64_t _GB2312_init(void *a1)
{
  a1[12] = _GB2312_wcrtomb;
  a1[9] = _GB2312_mbrtowc;
  a1[10] = _GB2312_mbsinit;
  a1[8] = 0x8000000002LL;
  return 0LL;
}

uint64_t _GB2312_mbrtowc(int *a1, uint64_t a2, unint64_t a3, unsigned int *a4)
{
  uint64_t v4 = *a4;
  if (v4 >= 3)
  {
    *__error() = 22;
    return -1LL;
  }

  if (a3 >= 2) {
    unint64_t v7 = 2LL;
  }
  else {
    unint64_t v7 = a3;
  }
  if (a2) {
    int v8 = a1;
  }
  else {
    int v8 = 0LL;
  }
  if (!a2) {
    unint64_t v7 = 1LL;
  }
  if (v7 >= 2 - v4) {
    int v9 = 2 - v4;
  }
  else {
    int v9 = v7;
  }
  BOOL v10 = a4 + 1;
  _platform_strncpy();
  int v11 = *a4;
  *a4 += v9;
  if (!(v11 + v9)) {
    return -2LL;
  }
  if ((*v10 + 1) < 0xA2u)
  {
    int v12 = 1;
    goto LABEL_23;
  }

  int v12 = 2;
LABEL_23:
  int v13 = 0;
  unsigned int v14 = v12 + 1;
  uint64_t v15 = 4LL;
  do
  {
    int v13 = *((unsigned __int8 *)a4 + v15++) | (v13 << 8);
    --v14;
  }

  while (v14 > 1);
  if (v8) {
    *int v8 = v13;
  }
  *a4 = 0;
  int v16 = v12 - v11;
  if (!v13) {
    return 0;
  }
  return v16;
}

uint64_t _GB2312_wcrtomb(_BYTE *a1, unsigned int a2, _DWORD *a3)
{
  if (*a3)
  {
    *__error() = 22;
    return -1LL;
  }

  if (!a1) {
    return 1LL;
  }
  if ((a2 & 0x8000) == 0)
  {
    *a1 = a2;
    return 1LL;
  }

  *(_WORD *)a1 = bswap32(a2) >> 16;
  return 2LL;
}

BOOL _GB2312_mbsinit(_DWORD *a1)
{
  return !a1 || *a1 == 0;
}

uint64_t _GBK_init(void *a1)
{
  a1[12] = _GBK_wcrtomb;
  a1[9] = _GBK_mbrtowc;
  a1[10] = _GBK_mbsinit;
  a1[8] = 0x8000000002LL;
  return 0LL;
}

uint64_t _GBK_mbrtowc(int *a1, const char *a2, unint64_t a3, int *a4)
{
  int v4 = *a4;
  if (*a4 >= 0x100)
  {
    BOOL v10 = __error();
    int v11 = 22;
LABEL_18:
    *BOOL v10 = v11;
    return -1LL;
  }

  if (!a2) {
    a3 = 1LL;
  }
  if (a2) {
    int v6 = a2;
  }
  else {
    int v6 = "";
  }
  if (a2) {
    unint64_t v7 = a1;
  }
  else {
    unint64_t v7 = 0LL;
  }
  if (!a3) {
    return -2LL;
  }
  int v8 = *(unsigned __int8 *)v6;
  if (v4)
  {
    if (*v6)
    {
      if (v7) {
        *unint64_t v7 = v8 | (v4 << 8);
      }
      *a4 = 0;
      return 1LL;
    }

    goto LABEL_31;
  }

  if ((v8 + 127) > 0x7Du)
  {
    if (v7) {
      *unint64_t v7 = v8;
    }
    return v8 != 0;
  }

  else
  {
    if (a3 <= 1)
    {
      *a4 = v8;
      return -2LL;
    }

    if (!v6[1])
    {
LABEL_31:
      BOOL v10 = __error();
      int v11 = 92;
      goto LABEL_18;
    }

    if (v7) {
      *unint64_t v7 = *((unsigned __int8 *)v6 + 1) | (v8 << 8);
    }
    return 2LL;
  }

uint64_t _GBK_wcrtomb(_BYTE *a1, unsigned int a2, _DWORD *a3)
{
  if (*a3)
  {
    *__error() = 22;
    return -1LL;
  }

  if (!a1) {
    return 1LL;
  }
  if ((a2 & 0x8000) == 0)
  {
    *a1 = a2;
    return 1LL;
  }

  *(_WORD *)a1 = bswap32(a2) >> 16;
  return 2LL;
}

BOOL _GBK_mbsinit(_DWORD *a1)
{
  return !a1 || *a1 == 0;
}

uint64_t __part_load_locale(uint64_t a1, _BYTE *a2, void **a3, const char *a4, int a5, int a6, void *a7)
{
  uint64_t v13 = _platform_strlen();
  _platform_strcpy();
  *(_WORD *)&__s1[_platform_strlen()] = 47;
  strcat(__s1, a4);
  int v14 = __open_path_locale(__s1);
  if (v14 < 0) {
    return 0xFFFFFFFFLL;
  }
  if (fstat(v14, &v27))
  {
LABEL_18:
    int v23 = *__error();
    close_NOCANCEL();
    *__error() = v23;
    return 0xFFFFFFFFLL;
  }

  off_t st_size = v27.st_size;
  if (v27.st_size < 1)
  {
    int v22 = 79;
    goto LABEL_17;
  }

  uint64_t v16 = v13 + 1;
  int v17 = (char *)malloc(v27.st_size + v13 + 1);
  if (!v17)
  {
    int v22 = 12;
    goto LABEL_17;
  }

  int v18 = v17;
  uint64_t v19 = _platform_strcpy() + v16;
  if (read_NOCANCEL() != v27.st_size)
  {
LABEL_14:
    int v22 = *__error();
    free(v18);
LABEL_17:
    *__error() = v22;
    goto LABEL_18;
  }

  if (*(_BYTE *)(v19 + st_size - 1) != 10) {
    goto LABEL_13;
  }
  int v20 = 0;
  do
  {
    if (v18[v16] == 10)
    {
      v18[v16] = 0;
      ++v20;
    }

    ++v16;
    --st_size;
  }

  while (st_size);
  int v21 = a5;
  if (v20 < a5)
  {
    int v21 = v20;
    if (v20 < a6)
    {
LABEL_13:
      *__error() = 79;
      goto LABEL_14;
    }
  }

  close_NOCANCEL();
  if (*a3) {
    free(*a3);
  }
  *a3 = v18;
  if (v21 >= 1)
  {
    uint64_t v25 = v21;
    size_t v26 = a7;
    do
    {
      v18 += _platform_strlen() + 1;
      *v26++ = v18;
      --v25;
    }

    while (v25);
  }

  if (v21 < a5) {
    _platform_bzero();
  }
  uint64_t result = 0LL;
  *a2 = 1;
  return result;
}

void destruct_ldpart(void **a1)
{
  if (a1) {
    free(a1[8]);
  }
  free(a1);
}

uint64_t __messages_load_locale(uint64_t a1, uint64_t a2)
{
  if (!_platform_strcmp() || !_platform_strcmp() || !_platform_strncmp())
  {
    *(_BYTE *)(a2 + 1312) = 0;
    uint64_t v16 = *(void *)(a2 + 1360);
    if (v16)
    {
      do
      {
        unsigned int v17 = __ldaxr((unsigned int *)v16);
        unsigned int v18 = v17 - 1;
      }

      while (__stlxr(v18, (unsigned int *)v16));
      if (!v18)
      {
        uint64_t v19 = *(void (**)(void))(v16 + 8);
        if (v19) {
          v19();
        }
      }
    }

    *(void *)(a2 + 1360) = 0LL;
    return 1LL;
  }

  if (__messages_load_locale_cache
    && *(void *)(__messages_load_locale_cache + 64)
    && !_platform_strcmp())
  {
    *(_BYTE *)(a2 + 1312) = 1;
    uint64_t v20 = *(void *)(a2 + 1360);
    if (v20)
    {
      do
      {
        unsigned int v21 = __ldaxr((unsigned int *)v20);
        unsigned int v22 = v21 - 1;
      }

      while (__stlxr(v22, (unsigned int *)v20));
      if (!v22)
      {
        int v23 = *(void (**)(void))(v20 + 8);
        if (v23) {
          v23();
        }
      }
    }

    size_t v24 = (unsigned int *)__messages_load_locale_cache;
    *(void *)(a2 + 1360) = __messages_load_locale_cache;
    if (v24)
    {
      uint64_t result = 1LL;
      do
        unsigned int v25 = __ldaxr(v24);
      while (__stlxr(v25 + 1, v24));
      return result;
    }

    return 1LL;
  }

  int v4 = malloc(0x68uLL);
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v5 = v4;
  *(_DWORD *)int v4 = 1;
  *((void *)v4 + 1) = destruct_ldpart;
  *((void *)v4 + 8) = 0LL;
  uint64_t result = __part_load_locale( a1,  (_BYTE *)(a2 + 1312),  (void **)v4 + 8,  "LC_MESSAGES/LC_MESSAGES",  4,  2,  (void *)v4 + 9);
  if ((_DWORD)result == -1)
  {
    free(v5);
    return 0xFFFFFFFFLL;
  }

  if (!(_DWORD)result)
  {
    if (!v5[11]) {
      v5[11] = &empty;
    }
    if (!v5[12]) {
      v5[12] = &empty;
    }
    uint64_t v7 = *(void *)(a2 + 1360);
    if (v7)
    {
      do
      {
        unsigned int v8 = __ldaxr((unsigned int *)v7);
        unsigned int v9 = v8 - 1;
      }

      while (__stlxr(v9, (unsigned int *)v7));
      if (!v9)
      {
        BOOL v10 = *(void (**)(void))(v7 + 8);
        if (v10) {
          v10();
        }
      }
    }

    *(void *)(a2 + 1360) = v5;
    uint64_t v11 = __messages_load_locale_cache;
    if (__messages_load_locale_cache)
    {
      do
      {
        unsigned int v12 = __ldaxr((unsigned int *)v11);
        unsigned int v13 = v12 - 1;
      }

      while (__stlxr(v13, (unsigned int *)v11));
      if (!v13)
      {
        int v14 = *(void (**)(void))(v11 + 8);
        if (v14) {
          v14();
        }
      }
    }

    __messages_load_locale_cache = (uint64_t)v5;
    do
      unsigned int v15 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v15 + 1, (unsigned int *)v5));
    return 0LL;
  }

  return result;
}

char **__get_current_messages_locale(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 1312)) {
    return (char **)(*(void *)(a1 + 1360) + 72LL);
  }
  else {
    return _C_messages_locale;
  }
}

uint64_t __monetary_load_locale(uint64_t a1, uint64_t a2)
{
  if (!_platform_strcmp() || !_platform_strcmp() || !_platform_strncmp())
  {
    if (*(_BYTE *)(a2 + 1313))
    {
      *(_BYTE *)(a2 + 1313) = 0;
      uint64_t v26 = *(void *)(a2 + 1336);
      if (v26)
      {
        do
        {
          unsigned int v27 = __ldaxr((unsigned int *)v26);
          unsigned int v28 = v27 - 1;
        }

        while (__stlxr(v28, (unsigned int *)v26));
        if (!v28)
        {
          int v29 = *(void (**)(void))(v26 + 8);
          if (v29) {
            v29();
          }
        }
      }

      *(void *)(a2 + 1336) = 0LL;
      goto LABEL_48;
    }

    return 1LL;
  }

  if (__monetary_load_locale_cache
    && *(void *)(__monetary_load_locale_cache + 64)
    && !_platform_strcmp())
  {
    *(_BYTE *)(a2 + 1313) = 1;
    uint64_t v30 = *(void *)(a2 + 1336);
    if (v30)
    {
      do
      {
        unsigned int v31 = __ldaxr((unsigned int *)v30);
        unsigned int v32 = v31 - 1;
      }

      while (__stlxr(v32, (unsigned int *)v30));
      if (!v32)
      {
        __int128 v33 = *(void (**)(void))(v30 + 8);
        if (v33) {
          v33();
        }
      }
    }

    __int128 v34 = (unsigned int *)__monetary_load_locale_cache;
    *(void *)(a2 + 1336) = __monetary_load_locale_cache;
    if (v34)
    {
      do
        unsigned int v35 = __ldaxr(v34);
      while (__stlxr(v35 + 1, v34));
    }

LABEL_48:
    uint64_t result = 1LL;
    *(_BYTE *)(a2 + 1316) = 1;
    return result;
  }

  int v4 = malloc(0xF0uLL);
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = (uint64_t)v4;
  *(_DWORD *)int v4 = 1;
  *((void *)v4 + 1) = destruct_ldpart;
  *((void *)v4 + 8) = 0LL;
  uint64_t result = __part_load_locale(a1, (_BYTE *)(a2 + 1313), (void **)v4 + 8, "LC_MONETARY", 21, 15, (void *)v4 + 9);
  if ((_DWORD)result == -1)
  {
    free((void *)v5);
    return 0xFFFFFFFFLL;
  }

  *(_BYTE *)(a2 + 1316) = 1;
  if (!(_DWORD)result)
  {
    *(void *)(v5 + 104) = __fix_locale_grouping_str(*(unsigned __int8 **)(v5 + 104));
    int v7 = strtol(*(const char **)(v5 + 128), 0LL, 10);
    if (v7 == -1) {
      char v8 = 127;
    }
    else {
      char v8 = v7;
    }
    **(_BYTE **)(v5 + 128) = v8;
    int v9 = strtol(*(const char **)(v5 + 136), 0LL, 10);
    if (v9 == -1) {
      char v10 = 127;
    }
    else {
      char v10 = v9;
    }
    **(_BYTE **)(v5 + 136) = v10;
    int v11 = strtol(*(const char **)(v5 + 144), 0LL, 10);
    if (v11 == -1) {
      char v12 = 127;
    }
    else {
      char v12 = v11;
    }
    **(_BYTE **)(v5 + 144) = v12;
    int v13 = strtol(*(const char **)(v5 + 152), 0LL, 10);
    if (v13 == -1) {
      char v14 = 127;
    }
    else {
      char v14 = v13;
    }
    **(_BYTE **)(v5 + 152) = v14;
    int v15 = strtol(*(const char **)(v5 + 160), 0LL, 10);
    if (v15 == -1) {
      char v16 = 127;
    }
    else {
      char v16 = v15;
    }
    **(_BYTE **)(v5 + 160) = v16;
    int v17 = strtol(*(const char **)(v5 + 168), 0LL, 10);
    if (v17 == -1) {
      char v18 = 127;
    }
    else {
      char v18 = v17;
    }
    **(_BYTE **)(v5 + 168) = v18;
    int v19 = strtol(*(const char **)(v5 + 176), 0LL, 10);
    if (v19 == -1) {
      char v20 = 127;
    }
    else {
      char v20 = v19;
    }
    **(_BYTE **)(v5 + 176) = v20;
    int v21 = strtol(*(const char **)(v5 + 184), 0LL, 10);
    if (v21 == -1) {
      char v22 = 127;
    }
    else {
      char v22 = v21;
    }
    **(_BYTE **)(v5 + 184) = v22;
    int v23 = *(const char **)(v5 + 192);
    if (v23)
    {
      int v24 = strtol(v23, 0LL, 10);
      if (v24 == -1) {
        char v25 = 127;
      }
      else {
        char v25 = v24;
      }
      **(_BYTE **)(v5 + 192) = v25;
    }

    else
    {
      *(void *)(v5 + 192) = *(void *)(v5 + 144);
    }

    __int128 v36 = *(const char **)(v5 + 200);
    if (v36)
    {
      int v37 = strtol(v36, 0LL, 10);
      if (v37 == -1) {
        char v38 = 127;
      }
      else {
        char v38 = v37;
      }
      **(_BYTE **)(v5 + 200) = v38;
    }

    else
    {
      *(void *)(v5 + 200) = *(void *)(v5 + 160);
    }

    __int128 v39 = *(const char **)(v5 + 208);
    if (v39)
    {
      int v40 = strtol(v39, 0LL, 10);
      if (v40 == -1) {
        char v41 = 127;
      }
      else {
        char v41 = v40;
      }
      **(_BYTE **)(v5 + 208) = v41;
    }

    else
    {
      *(void *)(v5 + 208) = *(void *)(v5 + 152);
    }

    __int128 v42 = *(const char **)(v5 + 216);
    if (v42)
    {
      int v43 = strtol(v42, 0LL, 10);
      if (v43 == -1) {
        char v44 = 127;
      }
      else {
        char v44 = v43;
      }
      **(_BYTE **)(v5 + 216) = v44;
    }

    else
    {
      *(void *)(v5 + 216) = *(void *)(v5 + 168);
    }

    __int128 v45 = *(const char **)(v5 + 224);
    if (v45)
    {
      int v46 = strtol(v45, 0LL, 10);
      if (v46 == -1) {
        char v47 = 127;
      }
      else {
        char v47 = v46;
      }
      **(_BYTE **)(v5 + 224) = v47;
    }

    else
    {
      *(void *)(v5 + 224) = *(void *)(v5 + 176);
    }

    int v48 = *(const char **)(v5 + 232);
    if (v48)
    {
      int v49 = strtol(v48, 0LL, 10);
      if (v49 == -1) {
        char v50 = 127;
      }
      else {
        char v50 = v49;
      }
      **(_BYTE **)(v5 + 232) = v50;
    }

    else
    {
      *(void *)(v5 + 232) = *(void *)(v5 + 184);
    }

    uint64_t v51 = *(void *)(a2 + 1336);
    if (v51)
    {
      do
      {
        unsigned int v52 = __ldaxr((unsigned int *)v51);
        unsigned int v53 = v52 - 1;
      }

      while (__stlxr(v53, (unsigned int *)v51));
      if (!v53)
      {
        __int128 v54 = *(void (**)(void))(v51 + 8);
        if (v54) {
          v54();
        }
      }
    }

    *(void *)(a2 + 1336) = v5;
    uint64_t v55 = __monetary_load_locale_cache;
    if (__monetary_load_locale_cache)
    {
      do
      {
        unsigned int v56 = __ldaxr((unsigned int *)v55);
        unsigned int v57 = v56 - 1;
      }

      while (__stlxr(v57, (unsigned int *)v55));
      if (!v57)
      {
        __int128 v58 = *(void (**)(void))(v55 + 8);
        if (v58) {
          v58();
        }
      }
    }

    __monetary_load_locale_cache = v5;
    uint64_t result = 0LL;
    do
      unsigned int v59 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v59 + 1, (unsigned int *)v5));
  }

  return result;
}

  dash_prefix = 0;
  if (v27 == 58)
  {
    int v43 = 0;
LABEL_63:
    char v47 = parse_long_options(a2, v56, v55, a5, v43, v17);
    if ((_DWORD)v47 != -1)
    {
      __int128 v42 = v47;
      *(void *)(v24 + 2336) = v26;
      return v42;
    }

    char v25 = *(char **)(v24 + 2336);
LABEL_66:
    int v48 = v25 + 1;
    *(void *)(v24 + 2336) = v25 + 1;
    int v49 = *v25;
    __int128 v42 = (char)v49;
    if (v49 != 58)
    {
      if (v49 == 45)
      {
        if (!*v48)
        {
          char v50 = _platform_strchr();
          if (!v50) {
            return 0xFFFFFFFFLL;
          }
LABEL_79:
          if (*(_BYTE *)(v50 + 1) == 58)
          {
            optarg = 0LL;
            if (*v48)
            {
              optarg = v48;
              unsigned int v53 = optind;
            }

            else
            {
              unsigned int v53 = optind;
              if (*(_BYTE *)(v50 + 2) != 58)
              {
                unsigned int v53 = optind + 1;
                optind = v53;
                if (v53 >= (int)a1)
                {
                  *(void *)(v24 + 2336) = v26;
                  if (opterr && *v56 != 58) {
                    warnx("option requires an argument -- %c", v42);
                  }
                  optopt = v42;
                  goto LABEL_106;
                }

                optarg = *(char **)(a2 + 8LL * v53);
              }
            }

            *(void *)(v24 + 2336) = v26;
            optind = v53 + 1;
          }

          else if (!*v48)
          {
            ++optind;
          }

          return v42;
        }

_UNKNOWN **__get_current_monetary_locale(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 1313)) {
    return (_UNKNOWN **)(*(void *)(a1 + 1336) + 72LL);
  }
  else {
    return &_C_monetary_locale;
  }
}

uint64_t __numeric_load_locale(uint64_t a1, uint64_t a2)
{
  if (!_platform_strcmp() || !_platform_strcmp() || !_platform_strncmp())
  {
    if (*(_BYTE *)(a2 + 1314))
    {
      *(_BYTE *)(a2 + 1314) = 0;
      uint64_t v17 = *(void *)(a2 + 1344);
      if (v17)
      {
        do
        {
          unsigned int v18 = __ldaxr((unsigned int *)v17);
          unsigned int v19 = v18 - 1;
        }

        while (__stlxr(v19, (unsigned int *)v17));
        if (!v19)
        {
          char v20 = *(void (**)(void))(v17 + 8);
          if (v20) {
            v20();
          }
        }
      }

      *(void *)(a2 + 1344) = 0LL;
      goto LABEL_34;
    }

    return 1LL;
  }

  if (__numeric_load_locale_cache && *(void *)(__numeric_load_locale_cache + 64) && !_platform_strcmp())
  {
    *(_BYTE *)(a2 + 1314) = 1;
    uint64_t v21 = *(void *)(a2 + 1344);
    if (v21)
    {
      do
      {
        unsigned int v22 = __ldaxr((unsigned int *)v21);
        unsigned int v23 = v22 - 1;
      }

      while (__stlxr(v23, (unsigned int *)v21));
      if (!v23)
      {
        int v24 = *(void (**)(void))(v21 + 8);
        if (v24) {
          v24();
        }
      }
    }

    char v25 = (unsigned int *)__numeric_load_locale_cache;
    *(void *)(a2 + 1344) = __numeric_load_locale_cache;
    if (v25)
    {
      do
        unsigned int v26 = __ldaxr(v25);
      while (__stlxr(v26 + 1, v25));
    }

char **__get_current_numeric_locale(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 1314)) {
    return (char **)(*(void *)(a1 + 1344) + 72LL);
  }
  else {
    return &_C_numeric_locale;
  }
}

void _locale_lock_fork_prepare()
{
  uint64_t v0 = __locale_key;
  unsigned __int8 v1 = *(os_unfair_lock_s **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v0);
  if (!v1) {
    unsigned __int8 v1 = (os_unfair_lock_s *)&__global_locale;
  }
  os_unfair_lock_lock(v1 + 324);
}

void _locale_lock_fork_parent()
{
  uint64_t v0 = __locale_key;
  unsigned __int8 v1 = *(os_unfair_lock_s **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v0);
  if (!v1) {
    unsigned __int8 v1 = (os_unfair_lock_s *)&__global_locale;
  }
  os_unfair_lock_unlock(v1 + 324);
}

void _locale_lock_fork_child()
{
  uint64_t v0 = __locale_key;
  unsigned __int8 v1 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v0);
  if (!v1) {
    unsigned __int8 v1 = &__global_locale;
  }
  v1[324] = 0;
}

lconv *__cdecl localeconv_l(locale_t a1)
{
  locale_t v1 = (locale_t)&__global_locale;
  if (a1 != (locale_t)-1LL) {
    locale_t v1 = a1;
  }
  if (a1) {
    locale_t v2 = v1;
  }
  else {
    locale_t v2 = (locale_t)&__c_locale;
  }
  os_unfair_lock_lock((os_unfair_lock_t)v2 + 324);
  if (*((_BYTE *)v2 + 1316))
  {
    current_monetary_locale = __get_current_monetary_locale((uint64_t)v2);
    *(_OWORD *)((char *)v2 + 1400) = *(_OWORD *)current_monetary_locale;
    *(_OWORD *)((char *)v2 + 1416) = *((_OWORD *)current_monetary_locale + 1);
    *(_OWORD *)((char *)v2 + 1432) = *((_OWORD *)current_monetary_locale + 2);
    int v4 = current_monetary_locale[7];
    *((void *)v2 + 181) = current_monetary_locale[6];
    *((_BYTE *)v2 + 1456) = *v4;
    uint64_t v5 = current_monetary_locale[9];
    *((_BYTE *)v2 + 1457) = *(_BYTE *)current_monetary_locale[8];
    *((_BYTE *)v2 + 1458) = *v5;
    int v6 = current_monetary_locale[11];
    *((_BYTE *)v2 + 1459) = *(_BYTE *)current_monetary_locale[10];
    *((_BYTE *)v2 + 1460) = *v6;
    int v7 = current_monetary_locale[13];
    *((_BYTE *)v2 + 1461) = *(_BYTE *)current_monetary_locale[12];
    *((_BYTE *)v2 + 1462) = *v7;
    uint64_t v8 = current_monetary_locale[15];
    *((_BYTE *)v2 + 1463) = *(_BYTE *)current_monetary_locale[14];
    *((_BYTE *)v2 + 1464) = *v8;
    unsigned int v9 = current_monetary_locale[17];
    *((_BYTE *)v2 + 1465) = *(_BYTE *)current_monetary_locale[16];
    *((_BYTE *)v2 + 1466) = *v9;
    unsigned int v10 = current_monetary_locale[19];
    *((_BYTE *)v2 + 1467) = *(_BYTE *)current_monetary_locale[18];
    *((_BYTE *)v2 + 1468) = *v10;
    *((_BYTE *)v2 + 1469) = *(_BYTE *)current_monetary_locale[20];
    *((_BYTE *)v2 + 1316) = 0;
  }

  if (*((_BYTE *)v2 + 1317))
  {
    current_numeric_locale = __get_current_numeric_locale((uint64_t)v2);
    __int128 v12 = *(_OWORD *)current_numeric_locale;
    *((_OWORD *)v2 + 86) = *(_OWORD *)current_numeric_locale;
    *((void *)v2 + 174) = current_numeric_locale[2];
    *((_BYTE *)v2 + 1317) = 0;
    if (!(void)v12) {
      localeconv_l_cold_2();
    }
  }

  os_unfair_lock_unlock((os_unfair_lock_t)v2 + 324);
  if (!*((void *)v2 + 172)) {
    localeconv_l_cold_1();
  }
  return (lconv *)((char *)v2 + 1376);
}

lconv *localeconv(void)
{
  uint64_t v0 = __locale_key;
  locale_t v1 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v0);
  if (v1) {
    return localeconv_l(v1);
  }
  else {
    return localeconv_l((locale_t)&__global_locale);
  }
}

int mblen_l(const char *a1, size_t a2, locale_t a3)
{
  locale_t v3 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1LL) {
    locale_t v3 = a3;
  }
  if (a3) {
    locale_t v4 = v3;
  }
  else {
    locale_t v4 = (locale_t)&__c_locale;
  }
  if (a1)
  {
    a1 = (const char *)(*(uint64_t (**)(void, const char *, size_t, uint64_t))(*((void *)v4 + 166) + 72LL))( 0LL,  a1,  a2,  (uint64_t)v4 + 16);
  }

  else
  {
    *((_OWORD *)v4 + 7) = 0u;
    *((_OWORD *)v4 + 8) = 0u;
    *((_OWORD *)v4 + 5) = 0u;
    *((_OWORD *)v4 + 6) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *((_OWORD *)v4 + 4) = 0u;
    *((_OWORD *)v4 + 1) = 0u;
    *((_OWORD *)v4 + 2) = 0u;
  }

  return (int)a1;
}

int mblen(const char *__s, size_t __n)
{
  uint64_t v2 = __locale_key;
  locale_t v3 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (!v3) {
    locale_t v3 = &__global_locale;
  }
  if (v3 == (void *)-1LL) {
    locale_t v4 = &__global_locale;
  }
  else {
    locale_t v4 = v3;
  }
  if (__s)
  {
    __s = (const char *)(*(uint64_t (**)(void, const char *, size_t, void *))(v4[166] + 72LL))( 0LL,  __s,  __n,  v4 + 2);
  }

  else
  {
    *((_OWORD *)v4 + 7) = 0u;
    *((_OWORD *)v4 + 8) = 0u;
    *((_OWORD *)v4 + 5) = 0u;
    *((_OWORD *)v4 + 6) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *((_OWORD *)v4 + 4) = 0u;
    *((_OWORD *)v4 + 1) = 0u;
    *((_OWORD *)v4 + 2) = 0u;
  }

  return (int)__s;
}

size_t mbrlen_l(const char *a1, size_t a2, mbstate_t *a3, locale_t a4)
{
  locale_t v4 = (locale_t)&__global_locale;
  if (a4 != (locale_t)-1LL) {
    locale_t v4 = a4;
  }
  if (a4) {
    locale_t v5 = v4;
  }
  else {
    locale_t v5 = (locale_t)&__c_locale;
  }
  if (a3) {
    int v6 = a3;
  }
  else {
    int v6 = (mbstate_t *)((char *)v5 + 144);
  }
  return (*(uint64_t (**)(void, const char *, size_t, mbstate_t *))(*((void *)v5 + 166) + 72LL))( 0LL,  a1,  a2,  v6);
}

size_t mbrlen(const char *a1, size_t a2, mbstate_t *a3)
{
  uint64_t v3 = __locale_key;
  locale_t v4 = *(char **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (!v4) {
    locale_t v4 = (char *)&__global_locale;
  }
  else {
    locale_t v5 = v4;
  }
  if (a3) {
    int v6 = a3;
  }
  else {
    int v6 = (mbstate_t *)(v5 + 144);
  }
  return (*(uint64_t (**)(void, const char *, size_t, mbstate_t *))(*((void *)v5 + 166) + 72LL))( 0LL,  a1,  a2,  v6);
}

size_t mbrtowc_l(__int32 *a1, const char *a2, size_t a3, mbstate_t *a4, locale_t a5)
{
  locale_t v5 = (locale_t)&__global_locale;
  if (a5 != (locale_t)-1LL) {
    locale_t v5 = a5;
  }
  if (a5) {
    locale_t v6 = v5;
  }
  else {
    locale_t v6 = (locale_t)&__c_locale;
  }
  if (!a4) {
    a4 = (mbstate_t *)((char *)v6 + 272);
  }
  return (*(uint64_t (**)(__int32 *, const char *, size_t, mbstate_t *))(*((void *)v6 + 166) + 72LL))( a1,  a2,  a3,  a4);
}

size_t mbrtowc(__int32 *a1, const char *a2, size_t a3, mbstate_t *a4)
{
  uint64_t v4 = __locale_key;
  locale_t v5 = *(char **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
  if (!v5) {
    locale_t v5 = (char *)&__global_locale;
  }
  else {
    locale_t v6 = v5;
  }
  if (!a4) {
    a4 = (mbstate_t *)(v6 + 272);
  }
  return (*(uint64_t (**)(__int32 *, const char *, size_t, mbstate_t *))(*((void *)v6 + 166) + 72LL))( a1,  a2,  a3,  a4);
}

int mbsinit_l(const mbstate_t *a1, locale_t a2)
{
  locale_t v2 = (locale_t)&__global_locale;
  if (a2 != (locale_t)-1LL) {
    locale_t v2 = a2;
  }
  if (a2) {
    locale_t v3 = v2;
  }
  else {
    locale_t v3 = (locale_t)&__c_locale;
  }
  return (*(uint64_t (**)(const mbstate_t *))(*((void *)v3 + 166) + 80LL))(a1);
}

int mbsinit(const mbstate_t *a1)
{
  uint64_t v1 = __locale_key;
  locale_t v2 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (!v2) {
    locale_t v2 = &__global_locale;
  }
  if (v2 == (void *)-1LL) {
    locale_t v3 = &__global_locale;
  }
  else {
    locale_t v3 = v2;
  }
  return (*(uint64_t (**)(const mbstate_t *))(v3[166] + 80LL))(a1);
}

size_t mbsnrtowcs_l(__int32 *a1, const char **a2, size_t a3, size_t a4, mbstate_t *a5, locale_t a6)
{
  locale_t v6 = (locale_t)&__global_locale;
  if (a6 != (locale_t)-1LL) {
    locale_t v6 = a6;
  }
  if (a6) {
    locale_t v7 = v6;
  }
  else {
    locale_t v7 = (locale_t)&__c_locale;
  }
  if (!a5) {
    a5 = (mbstate_t *)((char *)v7 + 400);
  }
  return (*(uint64_t (**)(__int32 *, const char **, size_t, size_t, mbstate_t *))(*((void *)v7 + 166) + 88LL))( a1,  a2,  a3,  a4,  a5);
}

size_t mbsnrtowcs(__int32 *a1, const char **a2, size_t a3, size_t a4, mbstate_t *a5)
{
  uint64_t v5 = __locale_key;
  locale_t v6 = *(char **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (!v6) {
    locale_t v6 = (char *)&__global_locale;
  }
  else {
    locale_t v7 = v6;
  }
  if (!a5) {
    a5 = (mbstate_t *)(v7 + 400);
  }
  return (*(uint64_t (**)(__int32 *, const char **, size_t, size_t, mbstate_t *))(*((void *)v7 + 166) + 88LL))( a1,  a2,  a3,  a4,  a5);
}

uint64_t __mbsnrtowcs_std(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v9 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a6 + 1328) + 72LL);
  uint64_t v10 = *a2;
  if (a1)
  {
    uint64_t i = a4;
    if (a4)
    {
      unsigned int v13 = a1;
      uint64_t v14 = 0LL;
      while (1)
      {
        uint64_t v15 = v9(v13, v10, a3, a5, a6);
        if (v15 == -2) {
          break;
        }
        if (!v15)
        {
          *a2 = 0LL;
          return v14;
        }

        if (v15 == -1)
        {
          *a2 = v10;
          return -1LL;
        }

        v10 += v15;
        a3 -= v15;
        ++v14;
        v13 += 4;
        if (i == v14) {
          goto LABEL_8;
        }
      }

      *a2 = v10 + a3;
      return v14;
    }

LABEL_8:
    *a2 = v10;
  }

  else
  {
    for (uint64_t i = 0LL; ; ++i)
    {
      uint64_t v16 = v9(v18, v10, a3, a5, a6);
      if (v16 == -2) {
        break;
      }
      if (v16 == -1) {
        return -1LL;
      }
      if (!v16) {
        return i;
      }
      v10 += v16;
      a3 -= v16;
    }
  }

  return i;
}

size_t mbsrtowcs_l(__int32 *a1, const char **a2, size_t a3, mbstate_t *a4, locale_t a5)
{
  locale_t v5 = (locale_t)&__global_locale;
  if (a5 != (locale_t)-1LL) {
    locale_t v5 = a5;
  }
  if (a5) {
    locale_t v6 = v5;
  }
  else {
    locale_t v6 = (locale_t)&__c_locale;
  }
  if (a4) {
    locale_t v7 = a4;
  }
  else {
    locale_t v7 = (mbstate_t *)((char *)v6 + 528);
  }
  return (*(uint64_t (**)(__int32 *, const char **, uint64_t, size_t, mbstate_t *))(*((void *)v6 + 166) + 88LL))( a1,  a2,  -1LL,  a3,  v7);
}

size_t mbsrtowcs(__int32 *a1, const char **a2, size_t a3, mbstate_t *a4)
{
  uint64_t v4 = __locale_key;
  locale_t v5 = *(char **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
  if (!v5) {
    locale_t v5 = (char *)&__global_locale;
  }
  else {
    locale_t v6 = v5;
  }
  if (a4) {
    locale_t v7 = a4;
  }
  else {
    locale_t v7 = (mbstate_t *)(v6 + 528);
  }
  return (*(uint64_t (**)(__int32 *, const char **, uint64_t, size_t, mbstate_t *))(*((void *)v6 + 166) + 88LL))( a1,  a2,  -1LL,  a3,  v7);
}

size_t mbstowcs_l(__int32 *a1, const char *a2, size_t a3, locale_t a4)
{
  locale_t v4 = (locale_t)&__global_locale;
  if (a4 != (locale_t)-1LL) {
    locale_t v4 = a4;
  }
  if (a4) {
    locale_t v5 = v4;
  }
  else {
    locale_t v5 = (locale_t)&__c_locale;
  }
  memset(v8, 0, sizeof(v8));
  locale_t v7 = a2;
  return (*(uint64_t (**)(__int32 *, const char **, uint64_t, size_t, _OWORD *))(*((void *)v5 + 166) + 88LL))( a1,  &v7,  -1LL,  a3,  v8);
}

size_t mbstowcs(__int32 *a1, const char *a2, size_t a3)
{
  uint64_t v3 = __locale_key;
  locale_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (!v4) {
    locale_t v4 = &__global_locale;
  }
  if (v4 == (void *)-1LL) {
    locale_t v5 = &__global_locale;
  }
  else {
    locale_t v5 = v4;
  }
  memset(v8, 0, sizeof(v8));
  locale_t v7 = a2;
  return (*(uint64_t (**)(__int32 *, const char **, uint64_t, size_t, _OWORD *))(v5[166] + 88LL))( a1,  &v7,  -1LL,  a3,  v8);
}

int mbtowc_l(__int32 *a1, const char *a2, size_t a3, locale_t a4)
{
  locale_t v4 = (locale_t)&__global_locale;
  if (a4 != (locale_t)-1LL) {
    locale_t v4 = a4;
  }
  if (a4) {
    locale_t v5 = v4;
  }
  else {
    locale_t v5 = (locale_t)&__c_locale;
  }
  if (a2)
  {
    unint64_t v6 = (*(uint64_t (**)(__int32 *, const char *, size_t, uint64_t))(*((void *)v5 + 166) + 72LL))( a1,  a2,  a3,  (uint64_t)v5 + 656);
    if (v6 > 0xFFFFFFFFFFFFFFFDLL) {
      LODWORD(v6) = -1;
    }
  }

  else
  {
    LODWORD(v6) = 0;
    *((_OWORD *)v5 + 47) = 0u;
    *((_OWORD *)v5 + 48) = 0u;
    *((_OWORD *)v5 + 45) = 0u;
    *((_OWORD *)v5 + 46) = 0u;
    *((_OWORD *)v5 + 43) = 0u;
    *((_OWORD *)v5 + 44) = 0u;
    *((_OWORD *)v5 + 41) = 0u;
    *((_OWORD *)v5 + 42) = 0u;
  }

  return v6;
}

int mbtowc(__int32 *a1, const char *a2, size_t a3)
{
  uint64_t v3 = __locale_key;
  locale_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (!v4) {
    locale_t v4 = &__global_locale;
  }
  if (v4 == (void *)-1LL) {
    locale_t v5 = &__global_locale;
  }
  else {
    locale_t v5 = v4;
  }
  if (a2)
  {
    unint64_t v6 = (*(uint64_t (**)(__int32 *, const char *, size_t, void *))(v5[166] + 72LL))(a1, a2, a3, v5 + 82);
    if (v6 > 0xFFFFFFFFFFFFFFFDLL) {
      LODWORD(v6) = -1;
    }
  }

  else
  {
    LODWORD(v6) = 0;
    *((_OWORD *)v5 + 47) = 0u;
    *((_OWORD *)v5 + 48) = 0u;
    *((_OWORD *)v5 + 45) = 0u;
    *((_OWORD *)v5 + 46) = 0u;
    *((_OWORD *)v5 + 43) = 0u;
    *((_OWORD *)v5 + 44) = 0u;
    *((_OWORD *)v5 + 41) = 0u;
    *((_OWORD *)v5 + 42) = 0u;
  }

  return v6;
}

uint64_t _MSKanji_init(void *a1)
{
  a1[12] = _MSKanji_wcrtomb;
  a1[9] = _MSKanji_mbrtowc;
  a1[10] = _MSKanji_mbsinit;
  a1[8] = 0x10000000002LL;
  return 0LL;
}

uint64_t _MSKanji_mbrtowc(int *a1, const char *a2, unint64_t a3, int *a4)
{
  int v4 = *a4;
  if (*a4 >= 0x100)
  {
    uint64_t v10 = __error();
    int v11 = 22;
LABEL_18:
    *uint64_t v10 = v11;
    return -1LL;
  }

  if (!a2) {
    a3 = 1LL;
  }
  if (a2) {
    unint64_t v6 = a2;
  }
  else {
    unint64_t v6 = "";
  }
  if (a2) {
    locale_t v7 = a1;
  }
  else {
    locale_t v7 = 0LL;
  }
  if (!a3) {
    return -2LL;
  }
  if (v4)
  {
    int v8 = *(unsigned __int8 *)v6;
    if (v8)
    {
      if (v7) {
        *locale_t v7 = v8 | (v4 << 8);
      }
      *a4 = 0;
      return 1LL;
    }

    goto LABEL_34;
  }

  int v12 = *(unsigned __int8 *)v6;
  if ((v12 + 127) >= 0x1Fu && (v12 + 32) > 0x1Cu)
  {
    if (v7) {
      *locale_t v7 = v12;
    }
    return v12 != 0;
  }

  else
  {
    if (a3 <= 1)
    {
      *a4 = v12;
      return -2LL;
    }

    int v14 = *((unsigned __int8 *)v6 + 1);
    if (!v14)
    {
LABEL_34:
      uint64_t v10 = __error();
      int v11 = 92;
      goto LABEL_18;
    }

    if (v7) {
      *locale_t v7 = v14 | (v12 << 8);
    }
    return 2LL;
  }

uint64_t _MSKanji_wcrtomb(_BYTE *a1, int a2, _DWORD *a3)
{
  if (*a3)
  {
    *__error() = 22;
    return -1LL;
  }

  else
  {
    uint64_t result = 1LL;
    if (a1)
    {
      if (a2 <= 256) {
        uint64_t result = 1LL;
      }
      else {
        uint64_t result = 2LL;
      }
      unsigned int v5 = result + 1;
      int v6 = 8 * result - 8;
      do
      {
        *a1++ = a2 >> v6;
        --v5;
        v6 -= 8;
      }

      while (v5 > 1);
    }
  }

  return result;
}

BOOL _MSKanji_mbsinit(_DWORD *a1)
{
  return !a1 || *a1 == 0;
}

wint_t nextwctype_l(wint_t a1, wctype_t a2, locale_t a3)
{
  uint64_t v3 = *(void *)(*((void *)a3 + 166) + 120LL);
  if (a1 <= 255)
  {
    uint64_t v4 = a1;
    while (v4 != 255)
    {
      wint_t result = v4 + 1;
      int v6 = *(_DWORD *)(v3 + 64 + 4 * v4++);
      if ((v6 & a2) != 0) {
        return result;
      }
    }

    a1 = 255;
  }

  locale_t v7 = *(wint_t **)(v3 + 3144);
  if (v7)
  {
    BOOL v8 = a1 >= *v7;
    if (a1 <= *v7) {
      a1 = *v7;
    }
  }

  else
  {
    BOOL v8 = 1;
  }

  int v9 = *(_DWORD *)(v3 + 3136);
  if (!v9) {
    return -1;
  }
  uint64_t v10 = *(int **)(v3 + 3144);
  unint64_t v11 = *(int *)(v3 + 3136);
  while (1)
  {
    unint64_t v12 = v11 >> 1;
    unsigned int v13 = &v10[6 * (v11 >> 1)];
    wint_t v14 = v13[1];
    uint64_t v15 = *v13;
    BOOL v17 = a1 > v14;
    unsigned int v18 = v13 + 6;
    if (a1 > v14) {
      uint64_t v10 = v18;
    }
    unint64_t v19 = v11 - v17;
    unint64_t v11 = (v11 - v17) >> 1;
    if (v19 < 2) {
      return -1;
    }
  }

  wint_t result = v8 + a1;
  if ((int)v15 <= result && result <= v14)
  {
    uint64_t v21 = *(void *)&v10[6 * v12 + 4];
    if (v21)
    {
      unsigned int v22 = (int *)(v21 + 4LL * result - 4 * v15);
      do
      {
        int v23 = *v22++;
        if ((v23 & a2) != 0) {
          return result;
        }
        ++result;
      }

      while (v14 + 1 != result);
    }

    else if ((v10[6 * v12 + 2] & a2) != 0)
    {
      return result;
    }
  }

  unint64_t v24 = (unint64_t)&v7[6 * v9];
  char v25 = v13 + 6;
  while (1)
  {
    unsigned int v26 = v13;
    unsigned int v13 = v25;
    wint_t result = v26[6];
    unsigned int v27 = (int *)*((void *)v26 + 5);
    if (!v27)
    {
      if ((v26[8] & a2) != 0) {
        return result;
      }
      goto LABEL_40;
    }

    wint_t v28 = v26[7];
    if (result <= v28) {
      break;
    }
LABEL_40:
    char v25 = v13 + 6;
    wint_t result = -1;
  }

  int v29 = v28 + 1;
  while (1)
  {
    int v30 = *v27++;
    if ((v30 & a2) != 0) {
      return result;
    }
    if (v29 == ++result) {
      goto LABEL_40;
    }
  }

wint_t nextwctype(wint_t a1, wctype_t a2)
{
  uint64_t v2 = __locale_key;
  uint64_t v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = (_xlocale *)&__global_locale;
  }
  return nextwctype_l(a1, a2, v4);
}

char *__cdecl nl_langinfo_l(nl_item a1, locale_t a2)
{
  wint_t result = "";
  if (a1 <= 0x39)
  {
    while (1)
    {
      if (a2 == (locale_t)-1LL) {
        locale_t v4 = (locale_t)&__global_locale;
      }
      else {
        locale_t v4 = a2;
      }
      if (a2) {
        unsigned int v5 = v4;
      }
      else {
        unsigned int v5 = (_xlocale *)&__c_locale;
      }
      wint_t result = "";
      switch(a1)
      {
        case 0:
          if (!querylocale(2, v5)) {
            goto LABEL_43;
          }
          uint64_t v7 = _platform_strchr();
          if (v7)
          {
            wint_t result = (char *)(v7 + 1);
          }

          else if (_platform_strcmp() && _platform_strcmp())
          {
            else {
              wint_t result = "UTF-8";
            }
          }

          else
          {
            wint_t result = "US-ASCII";
          }

          goto LABEL_31;
        case 1:
          current_numeric_locale = __get_current_time_locale((uint64_t)v5) + 40;
          goto LABEL_30;
        case 2:
          current_numeric_locale = __get_current_time_locale((uint64_t)v5) + 39;
          goto LABEL_30;
        case 3:
          current_numeric_locale = __get_current_time_locale((uint64_t)v5) + 38;
          goto LABEL_30;
        case 4:
          current_numeric_locale = __get_current_time_locale((uint64_t)v5) + 57;
          goto LABEL_30;
        case 5:
          current_numeric_locale = __get_current_time_locale((uint64_t)v5) + 41;
          goto LABEL_30;
        case 6:
          current_numeric_locale = __get_current_time_locale((uint64_t)v5) + 42;
          goto LABEL_30;
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
          current_numeric_locale = &__get_current_time_locale((uint64_t)v5)[(a1 - 7) + 31];
          goto LABEL_30;
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
          current_numeric_locale = &__get_current_time_locale((uint64_t)v5)[(a1 - 14) + 24];
          goto LABEL_30;
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
          current_numeric_locale = &__get_current_time_locale((uint64_t)v5)[(a1 - 21) + 12];
          goto LABEL_30;
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
          current_numeric_locale = &__get_current_time_locale((uint64_t)v5)[a1 - 33];
          goto LABEL_30;
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
          goto LABEL_31;
        case 50:
          current_numeric_locale = __get_current_numeric_locale((uint64_t)v5);
          goto LABEL_30;
        case 51:
          current_messages_locale = __get_current_numeric_locale((uint64_t)v5);
          goto LABEL_27;
        case 52:
          current_numeric_locale = __get_current_messages_locale((uint64_t)v5);
          goto LABEL_30;
        case 53:
          current_messages_locale = __get_current_messages_locale((uint64_t)v5);
LABEL_27:
          current_numeric_locale = current_messages_locale + 1;
          goto LABEL_30;
        case 54:
          current_numeric_locale = __get_current_messages_locale((uint64_t)v5) + 2;
          goto LABEL_30;
        case 55:
          current_numeric_locale = __get_current_messages_locale((uint64_t)v5) + 3;
          goto LABEL_30;
        case 56:
          if (!*(_BYTE *)__get_current_monetary_locale((uint64_t)v5)[1])
          {
LABEL_43:
            wint_t result = "";
            goto LABEL_31;
          }

          int p_cs_precedes = localeconv_l(v5)->p_cs_precedes;
          int n_cs_precedes = localeconv_l(v5)->n_cs_precedes;
          wint_t result = "";
          if (p_cs_precedes != n_cs_precedes) {
            goto LABEL_31;
          }
          if (p_cs_precedes == 127)
          {
            __get_current_monetary_locale((uint64_t)v5);
            int v12 = _platform_strcmp();
            wint_t result = "";
            if (v12) {
              goto LABEL_31;
            }
            char v13 = 46;
          }

          else if (p_cs_precedes)
          {
            char v13 = 45;
          }

          else
          {
            char v13 = 43;
          }

          char v16 = v13;
          int v14 = _platform_strlen();
          uint64_t v15 = (char *)reallocf((void *)nl_langinfo_l_csym, v14 + 2);
          nl_langinfo_l_csyuint64_t m = (uint64_t)v15;
          wint_t result = "";
          if (v15)
          {
            *uint64_t v15 = v16;
            _platform_strcpy();
            return v15;
          }

char *__cdecl nl_langinfo(nl_item a1)
{
  uint64_t v1 = __locale_key;
  uint64_t v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = (_xlocale *)&__global_locale;
  }
  return nl_langinfo_l(a1, v3);
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  int v2 = a2;
  if (a1 < 0x100)
  {
    uint64_t v4 = __locale_key;
    unsigned int v5 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
    if (!v5) {
      unsigned int v5 = &__global_locale;
    }
    int v3 = *(_DWORD *)(*(void *)(v5[166] + 120LL) + 4LL * a1 + 60);
  }

  else
  {
    int v3 = ___runetype(a1);
  }

  return v3 & v2;
}

int __istype(__darwin_ct_rune_t _c, unint64_t _f)
{
  else {
    BOOL v2 = (_DefaultRuneLocale.__runetype[_c] & _f) == 0LL;
  }
  return !v2;
}

__darwin_ct_rune_t __isctype(__darwin_ct_rune_t _c, unint64_t _f)
{
  return _c <= 0xFF && (_DefaultRuneLocale.__runetype[_c] & _f) != 0LL;
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  uint64_t v2 = __locale_key;
  int v3 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (!v3) {
    int v3 = &__global_locale;
  }
  return *(_DWORD *)(*(void *)(v3[166] + 120LL) + 4LL * a1 + 2108);
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  uint64_t v2 = __locale_key;
  int v3 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (!v3) {
    int v3 = &__global_locale;
  }
  return *(_DWORD *)(*(void *)(v3[166] + 120LL) + 4LL * a1 + 1084);
}

int __wcwidth(int _c)
{
  if (_c)
  {
    unsigned int v1 = __maskrune(_c, 0xE0040000uLL);
    if ((v1 & 0x40000) != 0) {
      int v2 = 1;
    }
    else {
      int v2 = -1;
    }
    if (v1 >> 29) {
      return v1 >> 30;
    }
    else {
      return v2;
    }
  }

  return _c;
}

int __maskrune_l(__darwin_ct_rune_t a1, unint64_t a2, locale_t a3)
{
  int v3 = a2;
  if (a1 < 0x100)
  {
    locale_t v5 = (locale_t)&__c_locale;
    locale_t v6 = (locale_t)&__global_locale;
    if (a3 != (locale_t)-1LL) {
      locale_t v6 = a3;
    }
    if (a3) {
      locale_t v5 = v6;
    }
    int v4 = *(_DWORD *)(*(void *)(*((void *)v5 + 166) + 120LL) + 4LL * a1 + 60);
  }

  else
  {
    int v4 = ___runetype_l(a1, a3);
  }

  return v4 & v3;
}

int __istype_l(__darwin_ct_rune_t _c, unint64_t _f, locale_t _l)
{
  else {
    uint64_t v3 = _DefaultRuneLocale.__runetype[_c] & _f;
  }
  return v3 != 0;
}

__darwin_ct_rune_t __toupper_l(__darwin_ct_rune_t _c, locale_t _l)
{
  else {
    return _DefaultRuneLocale.__mapupper[_c];
  }
}

__darwin_ct_rune_t __tolower_l(__darwin_ct_rune_t _c, locale_t _l)
{
  else {
    return _DefaultRuneLocale.__maplower[_c];
  }
}

int __wcwidth_l(int _c, locale_t _l)
{
  if (_c)
  {
    unsigned int v2 = __maskrune_l(_c, 0xE0040000uLL, _l);
    if ((v2 & 0x40000) != 0) {
      int v3 = 1;
    }
    else {
      int v3 = -1;
    }
    if (v2 >> 29) {
      return v2 >> 30;
    }
    else {
      return v3;
    }
  }

  return _c;
}

uint64_t _none_init(void *a1)
{
  a1[9] = _none_mbrtowc;
  a1[10] = _none_mbsinit;
  a1[11] = _none_mbsnrtowcs;
  a1[12] = _none_wcrtomb;
  a1[13] = _none_wcsnrtombs;
  a1[8] = 0x10000000001LL;
  return 0LL;
}

uint64_t _none_mbrtowc(_DWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  if (!a3) {
    return -2LL;
  }
  int v3 = *a2;
  if (a1) {
    *a1 = v3;
  }
  return v3 != 0;
}

uint64_t _none_mbsinit()
{
  return 1LL;
}

uint64_t _none_mbsnrtowcs(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a2;
  if (a1)
  {
    if (a4)
    {
      uint64_t result = 0LL;
      while (1)
      {
        if (a3 == result)
        {
          v5 += result;
          a4 = a3;
          goto LABEL_12;
        }

        int v8 = *(unsigned __int8 *)(v5 + result);
        *(_DWORD *)(a1 + 4 * result) = v8;
        if (!v8) {
          break;
        }
        if (a4 == ++result)
        {
          v5 += result;
          goto LABEL_12;
        }
      }

      *a2 = 0LL;
    }

    else
    {
LABEL_12:
      *a2 = v5;
      return a4;
    }
  }

  else
  {
    uint64_t v9 = _platform_memchr();
    if (v9) {
      return v9 - v5;
    }
    else {
      return a3;
    }
  }

  return result;
}

uint64_t _none_wcrtomb(_BYTE *a1, unsigned int a2)
{
  if (!a1) {
    return 1LL;
  }
  if (a2 < 0x100)
  {
    *a1 = a2;
    return 1LL;
  }

  else
  {
    *__error() = 92;
    return -1LL;
  }

uint64_t _none_wcsnrtombs(uint64_t a1, int **a2, uint64_t a3, uint64_t a4)
{
  int v4 = *a2;
  if (a1)
  {
    if (a4)
    {
      uint64_t result = 0LL;
      while (a3 != result)
      {
        int v7 = *v4;
        if (*v4 >= 0x100)
        {
          *a2 = v4;
          goto LABEL_20;
        }

        *(_BYTE *)(a1 + result) = v7;
        if (!v7)
        {
          *a2 = 0LL;
          return result;
        }

        ++v4;
        if (a4 == ++result)
        {
          a3 = a4;
          break;
        }
      }
    }

    else
    {
      a3 = 0LL;
    }

    *a2 = v4;
    return a3;
  }

  else
  {
    if (a3)
    {
      int v8 = &v4[a3];
      uint64_t v9 = *a2;
      while (*v9)
      {
        if (*v9 >= 0x100)
        {
LABEL_20:
          *__error() = 92;
          return -1LL;
        }

        ++v9;
        if (!--a3)
        {
          uint64_t v9 = v8;
          return v9 - v4;
        }
      }
    }

    else
    {
      uint64_t v9 = *a2;
    }

    return v9 - v4;
  }

unint64_t ___runetype_l(__darwin_ct_rune_t a1, locale_t a2)
{
  if (a1 < 0) {
    return 0LL;
  }
  locale_t v2 = (locale_t)&__c_locale;
  locale_t v3 = (locale_t)&__global_locale;
  if (a2 != (locale_t)-1LL) {
    locale_t v3 = a2;
  }
  if (a2) {
    locale_t v2 = v3;
  }
  uint64_t v4 = *(void *)(*((void *)v2 + 166) + 120LL);
  unint64_t v5 = *(int *)(v4 + 3136);
  if (!(_DWORD)v5) {
    return 0LL;
  }
  locale_t v6 = *(_DWORD **)(v4 + 3144);
  while (1)
  {
    unint64_t v7 = v5 >> 1;
    int v8 = &v6[6 * (v5 >> 1)];
    __darwin_ct_rune_t v9 = v8[1];
    if (a1 >= *v8 && v9 >= a1) {
      break;
    }
    if (v9 < a1) {
      locale_t v6 = v8 + 6;
    }
    unint64_t v11 = v5 - (v9 < a1);
    unint64_t v5 = v11 >> 1;
    if (v11 <= 1) {
      return 0LL;
    }
  }

  uint64_t v13 = *(void *)&v6[6 * v7 + 4];
  if (v13) {
    return *(unsigned int *)(v13 + 4LL * (a1 - *v8));
  }
  else {
    return (int)v6[6 * v7 + 2];
  }
}

unint64_t ___runetype(__darwin_ct_rune_t a1)
{
  uint64_t v1 = __locale_key;
  locale_t v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2) {
    locale_t v3 = v2;
  }
  else {
    locale_t v3 = (_xlocale *)&__global_locale;
  }
  return ___runetype_l(a1, v3);
}

char *__cdecl setlocale(int a1, const char *a2)
{
  if (a1 >= 7)
  {
    locale_t v2 = __error();
    uint64_t result = 0LL;
    *locale_t v2 = 22;
    return result;
  }

  uint64_t v4 = a2;
  if (a2)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&unk_18C43B100);
    uint64_t v6 = 0x20u;
    do
    {
      _platform_strcpy();
      v6 += 32LL;
    }

    while (v6 != 224);
    if (*v4)
    {
      if (!a1)
      {
        uint64_t v7 = _platform_strchr();
        if (v7)
        {
          int v8 = (const char *)(v7 - 1);
          do
            int v9 = *((unsigned __int8 *)v8++ + 2);
          while (v9 == 47);
          if (v9)
          {
            uint64_t v10 = &word_18C43B2E8;
            uint64_t v11 = 1LL;
            uint64_t v12 = 5LL;
            while (1)
            {
              uint64_t v13 = v11;
              int v14 = v10;
              uint64_t v15 = v12;
              _platform_strlcpy();
              uint64_t v4 = v8 - 1;
              do
              {
                int v17 = *(unsigned __int8 *)++v4;
                int v16 = v17;
              }

              while (v17 == 47);
              uint64_t v11 = v13 + 1;
              int v18 = v16;
              int v8 = v4;
              if (v16)
              {
                do
                {
                  if (v18 == 47) {
                    break;
                  }
                  int v19 = *(unsigned __int8 *)++v8;
                  int v18 = v19;
                }

                while (v19);
              }

              if (v16)
              {
                uint64_t v10 = v14 + 16;
                uint64_t v12 = v15 - 1;
                if (v13 != 6) {
                  continue;
                }
              }

              if (v13 <= 5)
              {
                do
                {
                  _platform_strcpy();
                  --v15;
                }

                while (v15);
              }

              goto LABEL_40;
            }
          }
        }

        else if ((unint64_t)_platform_strlen() <= 0x1F)
        {
          uint64_t v23 = 0x20u;
          do
          {
            _platform_strcpy();
            v23 += 32LL;
          }

          while (v23 != 224);
LABEL_40:
          char v24 = BYTE14(xmmword_18C43B108);
          uint64_t v25 = off_18C43B148;
          if (off_18C43B148)
          {
            do
              unsigned int v26 = __ldaxr((unsigned int *)v25);
            while (__stlxr(v26 + 1, (unsigned int *)v25));
          }

          uint64_t v27 = 0LL;
          wint_t v28 = (char *)&unk_18C52A834;
          for (uint64_t i = (char *)&unk_18C43B1F8; ; i += 32)
          {
            _platform_strcpy();
            ++v27;
            v28 += 32;
            if (v27 == 6)
            {
              if (v25)
              {
                do
                {
                  unsigned int v30 = __ldaxr((unsigned int *)v25);
                  unsigned int v31 = v30 - 1;
                }

                while (__stlxr(v31, (unsigned int *)v25));
                if (!v31)
                {
                  unsigned int v32 = *(void (**)(uint64_t))(v25 + 8);
                  if (v32) {
                    v32(v25);
                  }
                }
              }

              os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C43B100);
              return (char *)currentlocale();
            }
          }

          int v33 = *__error();
          if ((v27 + 1) >= 2)
          {
            int v34 = 1;
            unsigned int v35 = (char *)&unk_18C43B1F8;
            __int128 v36 = &word_18C43B2E8;
            do
            {
              _platform_strcpy();
              if (!loadlocale(v34))
              {
                *__int128 v36 = 67;
                loadlocale(v34);
              }

              ++v34;
              v35 += 32;
              v36 += 16;
              --v27;
            }

            while (v27);
          }

          BYTE14(xmmword_18C43B108) = v24;
          off_18C43B148 = v25;
          if (v25)
          {
            do
            {
              unsigned int v37 = __ldaxr((unsigned int *)v25);
              unsigned int v38 = v37 - 1;
            }

            while (__stlxr(v38, (unsigned int *)v25));
            if (!v38)
            {
              __int128 v39 = *(void (**)(uint64_t))(v25 + 8);
              if (v39) {
                v39(v25);
              }
            }
          }

          *__error() = v33;
          goto LABEL_30;
        }

LABEL_29:
        *__error() = 22;
LABEL_30:
        os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C43B100);
        return 0LL;
      }
    }

    else
    {
      if (!a1)
      {
        uint64_t v20 = -6LL;
        uint64_t v21 = &word_18C43B2E8;
        while (1)
        {
          __get_locale_env(v20 + 7);
          _platform_strcpy();
          v21 += 16;
          if (__CFADD__(v20++, 1LL)) {
            goto LABEL_40;
          }
        }
      }

      __get_locale_env(a1);
    }

    _platform_strcpy();
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_18C43B100);
    return loadlocale(a1);
  }

  else if (a1)
  {
    return &current_categories[32 * a1];
  }

  else
  {
    return (char *)currentlocale();
  }

  funlockfile(a3);
  return a1;
}

    if (a4 >= 1)
    {
      uint64_t v25 = 0LL;
      for (uint64_t i = v11; *i && *i != 61; ++i)
        v25 += 0x100000000LL;
      uint64_t v27 = _platform_strlen();
      wint_t v28 = malloc(v27 + (v25 >> 32) + 2);
      *(void *)&(*a5)[8 * (int)v14] = v28;
      if (v28)
      {
        _owned_ptr_add(a6, *(void *)&(*a5)[8 * (int)v14]);
        int v29 = *(void *)&(*a5)[8 * v39];
        while (1)
        {
          ++v29;
          unsigned int v30 = *v11;
          *(_BYTE *)(v29 - 1) = v30;
          if (!v30 || v30 == 61) {
            break;
          }
          ++v11;
        }

        unsigned int v31 = 0LL;
        *(_BYTE *)(v29 - 1) = 61;
        do
        {
          unsigned int v32 = a2[v31];
          *(_BYTE *)(v29 + v31++) = v32;
        }

        while (v32);
        return 0LL;
      }

      return 0xFFFFFFFFLL;
    }

uint64_t currentlocale()
{
  if (!currentlocale_current_locale_string)
  {
    currentlocale_current_locale_string = (uint64_t)malloc(0xE7uLL);
    if (!currentlocale_current_locale_string) {
      return 0LL;
    }
  }

  _platform_strlcpy();
  uint64_t v0 = 0x40u;
  while (!_platform_strcmp())
  {
    v0 += 32LL;
    if (v0 == 224) {
      return currentlocale_current_locale_string;
    }
  }

  uint64_t v1 = (char *)currentlocale_current_locale_string;
  uint64_t v2 = 0x40u;
  do
  {
    *(_WORD *)&v1[_platform_strlen()] = 47;
    strcat(v1, &current_categories[v2]);
    v2 += 32LL;
  }

  while (v2 != 224);
  return (uint64_t)v1;
}

char *__get_locale_env(int a1)
{
  uint64_t result = getenv("LC_ALL");
  if (!result || !*result)
  {
    uint64_t result = getenv(categories[a1]);
    if (!result || !*result)
    {
      uint64_t result = getenv("LANG");
      if (!result || !*result) {
        return "C";
      }
    }
  }

  return result;
}

char *loadlocale(int a1)
{
  uint64_t v2 = a1;
  locale_t v3 = (char *)&new_categories + 32 * a1;
  if (*v3 == 46 && (!v3[1] || v3[1] == 46 && !v3[2]) || _platform_strchr()) {
    goto LABEL_6;
  }
  int v5 = *__error();
  int v6 = __detect_path_locale();
  *__error() = v6;
  if (*__error()) {
    return 0LL;
  }
  *__error() = v5;
  unsigned int v8 = a1 - 1;
  if ((a1 - 1) >= 6)
  {
LABEL_6:
    uint64_t v4 = 0LL;
    *__error() = 22;
    return v4;
  }

  uint64_t v4 = &current_categories[32 * v2];
  _platform_strcpy();
  if (*((void *)&__global_locale + v8 + 165)) {
    _platform_strlcpy();
  }
  if (a1 == 4)
  {
    BYTE14(xmmword_18C43B108) = 0;
    uint64_t v9 = off_18C43B148;
    if (off_18C43B148)
    {
      do
      {
        unsigned int v10 = __ldaxr((unsigned int *)v9);
        unsigned int v11 = v10 - 1;
      }

      while (__stlxr(v11, (unsigned int *)v9));
      if (!v11)
      {
        uint64_t v12 = *(void (**)(void))(v9 + 8);
        if (v12) {
          v12();
        }
      }
    }

    off_18C43B148 = 0LL;
  }

  else if (a1 == 2 && BYTE14(xmmword_18C43B108) == 1)
  {
    BYTE14(xmmword_18C43B108) = 0;
  }

  return v4;
}

uint64_t __detect_path_locale()
{
  if (_PathLocale) {
    return 0LL;
  }
  uint64_t v1 = getenv("PATH_LOCALE");
  if (v1 && (uint64_t v2 = v1, !issetugid()))
  {
    if ((unint64_t)(_platform_strlen() - 980) >= 0xFFFFFFFFFFFFFC00LL)
    {
      _PathLocale = (uint64_t)strdup(v2);
      if (_PathLocale) {
        return 0LL;
      }
      if (*__error()) {
        return *__error();
      }
      else {
        return 12LL;
      }
    }

    else
    {
      return 63LL;
    }
  }

  else
  {
    uint64_t result = 0LL;
    _PathLocale = (uint64_t)"/usr/share/locale";
  }

  return result;
}

uint64_t __open_path_locale(const char *a1)
{
  *(_WORD *)&v3[_platform_strlen()] = 47;
  strcat(v3, a1);
  uint64_t result = open_NOCANCEL();
  if ((result & 0x80000000) != 0)
  {
    strcpy(v3, "/usr/share/locale");
    *(_WORD *)&v3[_platform_strlen()] = 47;
    strcat(v3, a1);
    uint64_t result = open_NOCANCEL();
    if ((result & 0x80000000) != 0)
    {
      strcpy(v3, "/usr/local/share/locale");
      *(_WORD *)&v3[_platform_strlen()] = 47;
      strcat(v3, a1);
      return open_NOCANCEL();
    }
  }

  return result;
}

uint64_t __setrunelocale(uint64_t a1, uint64_t a2)
{
  if (!_platform_strcmp() || !_platform_strcmp())
  {
    uint64_t v10 = *(void *)(a2 + 1328);
    if (v10)
    {
      do
      {
        unsigned int v11 = __ldaxr((unsigned int *)v10);
        unsigned int v12 = v11 - 1;
      }

      while (__stlxr(v12, (unsigned int *)v10));
      if (!v12)
      {
        uint64_t v13 = *(void (**)(void))(v10 + 8);
        if (v13) {
          v13();
        }
      }
    }

    *(void *)(a2 + 1328) = &_DefaultRuneXLocale;
    if ((_UNKNOWN *)a2 == &__global_locale)
    {
      uint64_t v9 = 0LL;
      _CurrentRuneLocale = (_RuneLocale *)qword_18C52B6C8;
      __mb_cur_max = dword_18C52B690;
      __mb_sb_limit = unk_18C52B694;
      return v9;
    }

    return 0LL;
  }

  os_unfair_lock_lock((os_unfair_lock_t)&__setrunelocale_cache_lock);
  if (__setrunelocale_CachedRuneLocale && !_platform_strcmp())
  {
    uint64_t v14 = *(void *)(a2 + 1328);
    if (v14)
    {
      do
      {
        unsigned int v15 = __ldaxr((unsigned int *)v14);
        unsigned int v16 = v15 - 1;
      }

      while (__stlxr(v16, (unsigned int *)v14));
      if (!v16)
      {
        int v17 = *(void (**)(void))(v14 + 8);
        if (v17) {
          v17();
        }
      }
    }

    int v18 = (unsigned int *)__setrunelocale_CachedRuneLocale;
    *(void *)(a2 + 1328) = __setrunelocale_CachedRuneLocale;
    if (v18)
    {
      do
        unsigned int v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
    }

    if ((_UNKNOWN *)a2 == &__global_locale)
    {
      uint64_t v20 = *(void *)(a2 + 1328);
      _CurrentRuneLocale = *(_RuneLocale **)(v20 + 120);
      int v21 = *(_DWORD *)(v20 + 64);
      LODWORD(v20) = *(_DWORD *)(v20 + 68);
      __mb_cur_max = v21;
      __mb_sb_limit = v20;
    }

LABEL_63:
    os_unfair_lock_unlock((os_unfair_lock_t)&__setrunelocale_cache_lock);
    return 0LL;
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&__setrunelocale_cache_lock);
  _platform_strcpy();
  strcpy(&v37[_platform_strlen()], "/LC_CTYPE");
  int v3 = __open_path_locale(v37);
  uint64_t v4 = (FILE *)fdopen_DARWIN_EXTSN(v3, "r");
  if (!v4)
  {
    if (*__error()) {
      return *__error();
    }
    else {
      return 2LL;
    }
  }

  int v5 = v4;
  RuneMaguint64_t i = _Read_RuneMagi(v4);
  if (RuneMagi)
  {
    uint64_t v7 = (uint64_t)RuneMagi;
    fclose(v5);
    *(void *)(v7 + 72) = 0LL;
    *(void *)(v7 + 80) = 0LL;
    *(void *)(v7 + 88) = __mbsnrtowcs_std;
    *(void *)(v7 + 96) = 0LL;
    *(void *)(v7 + 104) = __wcsnrtombs_std;
    uint64_t v8 = *(void *)(v7 + 120);
    *(void *)(v8 + 40) = 0LL;
    *(void *)(v8 + 48) = 0LL;
    if (_platform_strcmp() && _platform_strcmp())
    {
      if (_platform_strncmp())
      {
        if (_platform_strcmp())
        {
          if (_platform_strcmp())
          {
            if (_platform_strcmp())
            {
              if (_platform_strcmp())
              {
                if (_platform_strcmp())
                {
                  if (_platform_strcmp())
                  {
                    if (_platform_strcmp())
                    {
                      if (_platform_strcmp())
                      {
                        if (_platform_strcmp())
                        {
                          if (_platform_strcmp())
                          {
                            if (_platform_strcmp())
                            {
                              if (_platform_strcmp())
                              {
                                uint64_t v9 = 79LL;
                                do
                                {
LABEL_43:
                                  unsigned int v23 = __ldaxr((unsigned int *)v7);
                                  unsigned int v24 = v23 - 1;
                                }

                                while (__stlxr(v24, (unsigned int *)v7));
                                if (!v24)
                                {
                                  uint64_t v25 = *(void (**)(uint64_t))(v7 + 8);
                                  if (v25) {
                                    v25(v7);
                                  }
                                }

                                return v9;
                              }

                              uint64_t v22 = _UTF2_init((void *)v7);
                            }

                            else
                            {
                              uint64_t v22 = _MSKanji_init((void *)v7);
                            }
                          }

                          else
                          {
                            uint64_t v22 = _BIG5_init((void *)v7);
                          }
                        }

                        else
                        {
                          uint64_t v22 = _GBK_init((void *)v7);
                        }
                      }

                      else
                      {
                        uint64_t v22 = _GB2312_init((void *)v7);
                      }
                    }

                    else
                    {
                      uint64_t v22 = _GB18030_init((void *)v7);
                    }
                  }

                  else
                  {
                    uint64_t v22 = _EUC_init((void *)v7);
                  }
                }

                else
                {
                  uint64_t v22 = _EUC_TW_init((void *)v7);
                }
              }

              else
              {
                uint64_t v22 = _EUC_KR_init((void *)v7);
              }
            }

            else
            {
              uint64_t v22 = _EUC_JP_init((void *)v7);
            }
          }

          else
          {
            uint64_t v22 = _EUC_CN_init((void *)v7);
          }
        }

        else
        {
          uint64_t v22 = _UTF8_init((void *)v7);
        }
      }

      else
      {
        uint64_t v22 = _none_init((void *)v7);
      }
    }

    else
    {
      uint64_t v22 = _ascii_init((void *)v7);
    }

    uint64_t v9 = v22;
    if ((_DWORD)v22) {
      goto LABEL_43;
    }
    _platform_strcpy();
    uint64_t v26 = *(void *)(a2 + 1328);
    if (v26)
    {
      do
      {
        unsigned int v27 = __ldaxr((unsigned int *)v26);
        unsigned int v28 = v27 - 1;
      }

      while (__stlxr(v28, (unsigned int *)v26));
      if (!v28)
      {
        int v29 = *(void (**)(void))(v26 + 8);
        if (v29) {
          v29();
        }
      }
    }

    *(void *)(a2 + 1328) = v7;
    if ((_UNKNOWN *)a2 == &__global_locale)
    {
      _CurrentRuneLocale = *(_RuneLocale **)(v7 + 120);
      int v30 = *(_DWORD *)(v7 + 68);
      __mb_cur_max = *(_DWORD *)(v7 + 64);
      __mb_sb_limit = v30;
    }

    os_unfair_lock_lock((os_unfair_lock_t)&__setrunelocale_cache_lock);
    uint64_t v31 = __setrunelocale_CachedRuneLocale;
    if (__setrunelocale_CachedRuneLocale)
    {
      do
      {
        unsigned int v32 = __ldaxr((unsigned int *)v31);
        unsigned int v33 = v32 - 1;
      }

      while (__stlxr(v33, (unsigned int *)v31));
      if (!v33)
      {
        int v34 = *(void (**)(void))(v31 + 8);
        if (v34) {
          v34();
        }
      }
    }

    __setrunelocale_CachedRuneLocale = v7;
    do
      unsigned int v35 = __ldaxr((unsigned int *)v7);
    while (__stlxr(v35 + 1, (unsigned int *)v7));
    goto LABEL_63;
  }

  if (*__error()) {
    uint64_t v9 = *__error();
  }
  else {
    uint64_t v9 = 79LL;
  }
  fclose(v5);
  return v9;
}

uint64_t __wrap_setrunelocale(uint64_t a1, uint64_t a2)
{
  uint64_t result = __setrunelocale(a1, a2);
  if ((_DWORD)result)
  {
    *__error() = result;
    return 0xFFFFFFFFLL;
  }

  return result;
}

__darwin_ct_rune_t ___tolower_l(__darwin_ct_rune_t result, locale_t a2)
{
  if ((result & 0x80000000) == 0)
  {
    locale_t v2 = (locale_t)&__c_locale;
    locale_t v3 = (locale_t)&__global_locale;
    if (a2 != (locale_t)-1LL) {
      locale_t v3 = a2;
    }
    if (a2) {
      locale_t v2 = v3;
    }
    uint64_t v4 = *(void *)(*((void *)v2 + 166) + 120LL);
    if (result > 0xFF)
    {
      unint64_t v5 = *(int *)(v4 + 3152);
      if ((_DWORD)v5)
      {
        int v6 = *(_DWORD **)(v4 + 3160);
        while (1)
        {
          uint64_t v7 = &v6[6 * (v5 >> 1)];
          __darwin_ct_rune_t v8 = v7[1];
          if (result >= *v7 && v8 >= result) {
            break;
          }
          uint64_t v10 = v7 + 6;
          if (v8 < result) {
            int v6 = v10;
          }
          unint64_t v11 = v5 - (v8 < result);
          unint64_t v5 = v11 >> 1;
          if (v11 <= 1) {
            return result;
          }
        }

        return result - *v7 + v6[6 * (v5 >> 1) + 2];
      }
    }

    else
    {
      return *(_DWORD *)(v4 + 4LL * result + 1084);
    }
  }

  return result;
}

__darwin_ct_rune_t ___tolower(__darwin_ct_rune_t a1)
{
  uint64_t v1 = __locale_key;
  locale_t v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2) {
    locale_t v3 = v2;
  }
  else {
    locale_t v3 = (_xlocale *)&__global_locale;
  }
  return ___tolower_l(a1, v3);
}

__darwin_ct_rune_t ___toupper_l(__darwin_ct_rune_t result, locale_t a2)
{
  if ((result & 0x80000000) == 0)
  {
    locale_t v2 = (locale_t)&__c_locale;
    locale_t v3 = (locale_t)&__global_locale;
    if (a2 != (locale_t)-1LL) {
      locale_t v3 = a2;
    }
    if (a2) {
      locale_t v2 = v3;
    }
    uint64_t v4 = *(void *)(*((void *)v2 + 166) + 120LL);
    if (result > 0xFF)
    {
      unint64_t v5 = *(int *)(v4 + 3168);
      if ((_DWORD)v5)
      {
        int v6 = *(_DWORD **)(v4 + 3176);
        while (1)
        {
          uint64_t v7 = &v6[6 * (v5 >> 1)];
          __darwin_ct_rune_t v8 = v7[1];
          if (result >= *v7 && v8 >= result) {
            break;
          }
          uint64_t v10 = v7 + 6;
          if (v8 < result) {
            int v6 = v10;
          }
          unint64_t v11 = v5 - (v8 < result);
          unint64_t v5 = v11 >> 1;
          if (v11 <= 1) {
            return result;
          }
        }

        return result - *v7 + v6[6 * (v5 >> 1) + 2];
      }
    }

    else
    {
      return *(_DWORD *)(v4 + 4LL * result + 2108);
    }
  }

  return result;
}

__darwin_ct_rune_t ___toupper(__darwin_ct_rune_t a1)
{
  uint64_t v1 = __locale_key;
  locale_t v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2) {
    locale_t v3 = v2;
  }
  else {
    locale_t v3 = (_xlocale *)&__global_locale;
  }
  return ___toupper_l(a1, v3);
}

uint64_t _UTF8_init(void *a1)
{
  a1[9] = _UTF8_mbrtowc;
  a1[10] = _UTF8_mbsinit;
  a1[11] = _UTF8_mbsnrtowcs;
  a1[12] = _UTF8_wcrtomb;
  a1[13] = _UTF8_wcsnrtombs;
  a1[8] = 0x8000000004LL;
  return 0LL;
}

uint64_t _UTF8_mbrtowc(_DWORD *a1, const char *a2, unint64_t a3, uint64_t a4)
{
  unsigned int v4 = *(_DWORD *)(a4 + 4);
  if (v4 >= 5)
  {
    unint64_t v5 = __error();
    int v6 = 22;
LABEL_3:
    int *v5 = v6;
    return -1LL;
  }

  if (!a2) {
    a3 = 1LL;
  }
  if (a2) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = "";
  }
  if (a2) {
    uint64_t v10 = a1;
  }
  else {
    uint64_t v10 = 0LL;
  }
  if (!a3) {
    return -2LL;
  }
  if (!v4)
  {
    unsigned int v20 = *(unsigned __int8 *)v9;
    if ((*v9 & 0x80000000) == 0)
    {
      if (v10) {
        *uint64_t v10 = v20;
      }
      return v20 != 0;
    }

    if ((v20 & 0xE0) == 0xC0)
    {
      if (v20 < 0xC2)
      {
LABEL_44:
        unint64_t v5 = __error();
        int v6 = 92;
        goto LABEL_3;
      }

      unsigned int v11 = 128;
      unsigned int v12 = 191;
      int v13 = 2;
      int v22 = 31;
LABEL_61:
      ++v9;
      int v14 = v22 & v20;
      goto LABEL_16;
    }

    if ((v20 & 0xF0) == 0xE0)
    {
      if (v20 == 224)
      {
        unsigned int v11 = 160;
      }

      else
      {
        unsigned int v11 = 128;
        if (v20 == 237)
        {
          unsigned int v12 = 159;
LABEL_57:
          int v13 = 3;
          int v22 = 15;
          goto LABEL_61;
        }
      }

      unsigned int v12 = 191;
      goto LABEL_57;
    }

    if (v20 > 0xF4 || (v20 & 0xF8) != 0xF0) {
      goto LABEL_44;
    }
    if (v20 == 240)
    {
      unsigned int v11 = 144;
    }

    else
    {
      unsigned int v11 = 128;
      if (v20 == 244)
      {
        unsigned int v12 = 143;
LABEL_60:
        int v13 = 4;
        int v22 = 7;
        goto LABEL_61;
      }
    }

    unsigned int v12 = 191;
    goto LABEL_60;
  }

  unsigned int v11 = *(unsigned __int8 *)(a4 + 8);
  unsigned int v12 = *(unsigned __int8 *)(a4 + 9);
  int v13 = *(_DWORD *)(a4 + 4);
  int v14 = *(_DWORD *)a4;
LABEL_16:
  unint64_t v15 = v4 == 0;
  unint64_t v16 = v13;
  uint64_t v17 = v16 - v15;
  if (v16 > v15)
  {
    do
    {
      unsigned int v18 = *(unsigned __int8 *)v9;
      if (v11)
      {
        if (v18 < v11 || v18 > v12) {
          goto LABEL_44;
        }
        unsigned int v12 = 0;
      }

      else if ((v18 & 0xC0) != 0x80)
      {
        goto LABEL_44;
      }

      unsigned int v11 = 0;
      ++v9;
      int v14 = v18 & 0x3F | (v14 << 6);
      --v17;
    }

    while (v17);
    LOBYTE(v11) = 0;
    LODWORD(v15) = v16;
  }

  if (v13 <= (int)v15)
  {
    if (v10) {
      *uint64_t v10 = v14;
    }
    *(_DWORD *)(a4 + 4) = 0;
    if (v14) {
      return v13;
    }
    else {
      return 0;
    }
  }

  else
  {
    *(_BYTE *)(a4 + 8) = v11;
    *(_BYTE *)(a4 + 9) = v12;
    uint64_t result = -2LL;
    *(_DWORD *)a4 = v14;
    *(_DWORD *)(a4 + 4) = v13 - v15;
  }

  return result;
}

uint64_t _UTF8_wcrtomb(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 4))
  {
    locale_t v3 = __error();
    int v4 = 22;
LABEL_3:
    *locale_t v3 = v4;
    return -1LL;
  }

  if (!a1) {
    return 1LL;
  }
  if (a2 <= 0x7F)
  {
    *a1 = a2;
    return 1LL;
  }

  if (a2 < 0x800)
  {
    char v6 = -64;
    uint64_t v5 = 2LL;
    goto LABEL_16;
  }

  if (!HIWORD(a2))
  {
    if (a2 >> 11 != 27)
    {
      char v6 = -32;
      uint64_t v5 = 3LL;
      goto LABEL_16;
    }

BOOL _UTF8_mbsinit(uint64_t a1)
{
  return !a1 || *(_DWORD *)(a1 + 4) == 0;
}

uint64_t _UTF8_mbsnrtowcs(_DWORD *a1, const char **a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = a3;
  uint64_t v7 = *a2;
  if (a1)
  {
    uint64_t v8 = a4;
    uint64_t v10 = a1;
    if (!a3 || !a4)
    {
      if (!a4)
      {
LABEL_20:
        *a2 = v7;
        return v8;
      }

      goto LABEL_12;
    }

    if (*(int *)(a5 + 4) < 1 || *v7 < 1)
    {
LABEL_12:
      uint64_t v11 = 0LL;
      uint64_t v12 = -a4;
      while (1)
      {
        if (v6 && *v7 >= 1)
        {
          *uint64_t v10 = *(unsigned __int8 *)v7;
          uint64_t v13 = 1LL;
        }

        else
        {
          uint64_t v13 = _UTF8_mbrtowc(v10, v7, v6, a5);
          switch(v13)
          {
            case -2LL:
              *a2 = &v7[v6];
              return -v11;
            case 0LL:
              *a2 = 0LL;
              return -v11;
            case -1LL:
              *a2 = v7;
              return -1LL;
          }
        }

        v7 += v13;
        v6 -= v13;
        ++v10;
        if (v12 == --v11) {
          goto LABEL_20;
        }
      }
    }

uint64_t _UTF8_wcsnrtombs(_BYTE *a1, unsigned int **a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (*(_DWORD *)(a5 + 4))
  {
    *__error() = 22;
    return -1LL;
  }

  else
  {
    uint64_t v9 = a1;
    uint64_t v10 = *a2;
    uint64_t v5 = 0LL;
    if (a1)
    {
      unint64_t v11 = a4;
      if (a4)
      {
        while (a3)
        {
          unsigned int v12 = *v10;
          if (*v10 > 0x7F)
          {
            if (v11 < 5)
            {
              unint64_t v14 = _UTF8_wcrtomb(v19, v12, a5);
              if (v14 == -1LL)
              {
LABEL_30:
                *a2 = v10;
                return -1LL;
              }

              uint64_t v13 = v14;
              if (v14 > v11) {
                break;
              }
              _platform_memmove();
            }

            else
            {
              uint64_t v13 = _UTF8_wcrtomb(v9, v12, a5);
              if (v13 == -1) {
                goto LABEL_30;
              }
            }
          }

          else
          {
            *uint64_t v9 = v12;
            uint64_t v13 = 1LL;
          }

          if (!*v10)
          {
            *a2 = 0LL;
            uint64_t v17 = v5 + v13;
            return v17 - 1;
          }

          ++v10;
          v9 += v13;
          v5 += v13;
          --a3;
          v11 -= v13;
          if (!v11) {
            break;
          }
        }
      }

      *a2 = v10;
    }

    else
    {
      while (a3)
      {
        unsigned int v15 = *v10;
        if (*v10 >= 0x80)
        {
          uint64_t v16 = _UTF8_wcrtomb(v19, v15, a5);
          if (v16 == -1) {
            return -1LL;
          }
          if (!*v10)
          {
LABEL_27:
            uint64_t v17 = v5 + v16;
            return v17 - 1;
          }
        }

        else
        {
          uint64_t v16 = 1LL;
          if (!v15) {
            goto LABEL_27;
          }
        }

        ++v10;
        v5 += v16;
        --a3;
      }
    }
  }

  return v5;
}

size_t wcrtomb_l(char *a1, __int32 a2, mbstate_t *a3, locale_t a4)
{
  locale_t v4 = (locale_t)&__global_locale;
  if (a4 != (locale_t)-1LL) {
    locale_t v4 = a4;
  }
  if (a4) {
    locale_t v5 = v4;
  }
  else {
    locale_t v5 = (locale_t)&__c_locale;
  }
  if (!a3) {
    a3 = (mbstate_t *)((char *)v5 + 784);
  }
  return (*(uint64_t (**)(char *, void, mbstate_t *))(*((void *)v5 + 166) + 96LL))(a1, *(void *)&a2, a3);
}

size_t wcrtomb(char *a1, __int32 a2, mbstate_t *a3)
{
  uint64_t v3 = __locale_key;
  locale_t v4 = *(char **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (!v4) {
    locale_t v4 = (char *)&__global_locale;
  }
  else {
    locale_t v5 = v4;
  }
  if (!a3) {
    a3 = (mbstate_t *)(v5 + 784);
  }
  return (*(uint64_t (**)(char *, void, mbstate_t *))(*((void *)v5 + 166) + 96LL))(a1, *(void *)&a2, a3);
}

size_t wcsftime_l(__int32 *a1, size_t a2, const __int32 *a3, const tm *a4, locale_t a5)
{
  locale_t v8 = (locale_t)&__global_locale;
  memset(&v23, 0, 32);
  if (a5 != (locale_t)-1LL) {
    locale_t v8 = a5;
  }
  memset(&v23._mbstateL + 4, 0, 32);
  if (a5) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = (_xlocale *)&__c_locale;
  }
  memset(&v23._mbstateL + 8, 0, 64);
  int v21 = a3;
  size_t v10 = wcsrtombs_l(0LL, &v21, 0LL, &v23, v9);
  if (v10 == -1LL)
  {
    uint64_t v13 = 0LL;
    goto LABEL_15;
  }

  size_t v11 = v10 + 1;
  unsigned int v12 = (char *)malloc(v10 + 1);
  uint64_t v13 = v12;
  if (!v12)
  {
LABEL_15:
    uint64_t v16 = 0LL;
LABEL_17:
    int v19 = *__error();
    free(v13);
    free(v16);
    size_t v18 = 0LL;
    *__error() = v19;
    return v18;
  }

  memset(&v23, 0, sizeof(v23));
  wcsrtombs_l(v12, &v21, v11, &v23, v9);
  unint64_t v14 = *(int *)(*((void *)v9 + 166) + 64LL);
  if (0xFFFFFFFFFFFFFFFFLL / v14 <= a2)
  {
    uint64_t v16 = 0LL;
    *__error() = 22;
    goto LABEL_17;
  }

  unsigned int v15 = (char *)malloc(v14 * a2);
  uint64_t v16 = v15;
  if (!v15) {
    goto LABEL_17;
  }
  if (!strftime_l(v15, a2, v13, a4, v9)) {
    goto LABEL_17;
  }
  int v22 = v16;
  memset(&v23, 0, sizeof(v23));
  size_t v17 = mbsrtowcs_l(a1, (const char **)&v22, a2, &v23, v9);
  if (v17 > 0xFFFFFFFFFFFFFFFDLL || v22) {
    goto LABEL_17;
  }
  size_t v18 = v17;
  free(v13);
  free(v16);
  return v18;
}

size_t wcsftime(__int32 *a1, size_t a2, const __int32 *a3, const tm *a4)
{
  uint64_t v4 = __locale_key;
  locale_t v5 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
  if (v5) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = (_xlocale *)&__global_locale;
  }
  return wcsftime_l(a1, a2, a3, a4, v6);
}

size_t wcsnrtombs_l(char *a1, const __int32 **a2, size_t a3, size_t a4, mbstate_t *a5, locale_t a6)
{
  locale_t v6 = (locale_t)&__global_locale;
  if (a6 != (locale_t)-1LL) {
    locale_t v6 = a6;
  }
  if (a6) {
    locale_t v7 = v6;
  }
  else {
    locale_t v7 = (locale_t)&__c_locale;
  }
  if (!a5) {
    a5 = (mbstate_t *)((char *)v7 + 912);
  }
  return (*(uint64_t (**)(char *, const __int32 **, size_t, size_t, mbstate_t *))(*((void *)v7 + 166) + 104LL))( a1,  a2,  a3,  a4,  a5);
}

size_t wcsnrtombs(char *a1, const __int32 **a2, size_t a3, size_t a4, mbstate_t *a5)
{
  uint64_t v5 = __locale_key;
  locale_t v6 = *(char **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (!v6) {
    locale_t v6 = (char *)&__global_locale;
  }
  else {
    locale_t v7 = v6;
  }
  if (!a5) {
    a5 = (mbstate_t *)(v7 + 912);
  }
  return (*(uint64_t (**)(char *, const __int32 **, size_t, size_t, mbstate_t *))(*((void *)v7 + 166) + 104LL))( a1,  a2,  a3,  a4,  a5);
}

uint64_t __wcsnrtombs_std(_BYTE *a1, _DWORD **a2, uint64_t a3, unint64_t a4, __int128 *a5, uint64_t a6)
{
  uint64_t v8 = a3;
  uint64_t v9 = *(void *)(a6 + 1328);
  size_t v10 = *(uint64_t (**)(_BYTE *, void, __int128 *, uint64_t))(v9 + 96);
  size_t v11 = *a2;
  if (a1)
  {
    unint64_t v12 = a4;
    if (a4)
    {
      uint64_t v13 = a1;
      uint64_t v14 = 0LL;
      unint64_t v15 = *(int *)(v9 + 64);
      while (v8)
      {
        if (v12 <= v15)
        {
          __int128 v17 = a5[5];
          __int128 v35 = a5[4];
          __int128 v36 = v17;
          __int128 v18 = a5[7];
          __int128 v37 = a5[6];
          __int128 v38 = v18;
          __int128 v19 = a5[1];
          __int128 v31 = *a5;
          __int128 v32 = v19;
          __int128 v20 = a5[3];
          __int128 v33 = a5[2];
          __int128 v34 = v20;
          unint64_t v21 = v10(v30, *v11, a5, a6);
          if (v21 == -1LL)
          {
LABEL_21:
            *a2 = v11;
            return -1LL;
          }

          uint64_t v16 = v21;
          if (v21 > (int)v12)
          {
            __int128 v25 = v36;
            a5[4] = v35;
            a5[5] = v25;
            __int128 v26 = v38;
            a5[6] = v37;
            a5[7] = v26;
            __int128 v27 = v32;
            *a5 = v31;
            a5[1] = v27;
            __int128 v28 = v34;
            a5[2] = v33;
            a5[3] = v28;
            break;
          }

          _platform_memmove();
        }

        else
        {
          uint64_t v16 = v10(v13, *v11, a5, a6);
          if (v16 == -1) {
            goto LABEL_21;
          }
        }

        if (!*v11)
        {
          *a2 = 0LL;
          uint64_t v23 = v14 + v16;
          return v23 - 1;
        }

        ++v11;
        v13 += v16;
        v14 += v16;
        --v8;
        v12 -= v16;
        if (!v12) {
          break;
        }
      }
    }

    else
    {
      uint64_t v14 = 0LL;
    }

    *a2 = v11;
  }

  else
  {
    uint64_t v14 = 0LL;
    if (a3)
    {
      while (1)
      {
        uint64_t v22 = v10(v30, *v11, a5, a6);
        if (v22 == -1) {
          return -1LL;
        }
        if (!*v11) {
          break;
        }
        ++v11;
        v14 += v22;
        if (!--v8) {
          return v14;
        }
      }

      uint64_t v23 = v14 + v22;
      return v23 - 1;
    }
  }

  return v14;
}

size_t wcsrtombs_l(char *a1, const __int32 **a2, size_t a3, mbstate_t *a4, locale_t a5)
{
  locale_t v5 = (locale_t)&__global_locale;
  if (a5 != (locale_t)-1LL) {
    locale_t v5 = a5;
  }
  if (a5) {
    locale_t v6 = v5;
  }
  else {
    locale_t v6 = (locale_t)&__c_locale;
  }
  if (a4) {
    locale_t v7 = a4;
  }
  else {
    locale_t v7 = (mbstate_t *)((char *)v6 + 1040);
  }
  return (*(uint64_t (**)(char *, const __int32 **, uint64_t, size_t, mbstate_t *))(*((void *)v6 + 166)
                                                                                           + 104LL))( a1,  a2,  -1LL,  a3,  v7);
}

size_t wcsrtombs(char *a1, const __int32 **a2, size_t a3, mbstate_t *a4)
{
  uint64_t v4 = __locale_key;
  locale_t v5 = *(char **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
  if (!v5) {
    locale_t v5 = (char *)&__global_locale;
  }
  else {
    locale_t v6 = v5;
  }
  if (a4) {
    locale_t v7 = a4;
  }
  else {
    locale_t v7 = (mbstate_t *)(v6 + 1040);
  }
  return (*(uint64_t (**)(char *, const __int32 **, uint64_t, size_t, mbstate_t *))(*((void *)v6 + 166)
                                                                                           + 104LL))( a1,  a2,  -1LL,  a3,  v7);
}

size_t __wcs_end_offset(const char *a1, uint64_t a2, locale_t a3)
{
  locale_t v5 = localeconv_l(a3);
  size_t v6 = a2 - (void)a1;
  return v6;
}

double wcstod_l(const __int32 *a1, __int32 **a2, locale_t a3)
{
  uint64_t v4 = (__int32 *)a1;
  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  MEMORY[0x1895FE128](a1, a2);
  locale_t v7 = (char *)&v25 - v6;
  if (v5 == (_xlocale *)-1LL) {
    uint64_t v8 = (_xlocale *)&__global_locale;
  }
  else {
    uint64_t v8 = v5;
  }
  if (v5) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = (_xlocale *)&__c_locale;
  }
  locale_t v10 = __numeric_ctype((uint64_t)v9);
  size_t v11 = v10;
  if (v10 == (locale_t)-1LL) {
    locale_t v12 = (locale_t)&__global_locale;
  }
  else {
    locale_t v12 = v10;
  }
  if (v10) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = &__c_locale;
  }
  uint64_t v14 = v4;
  do
  {
    uint64_t v15 = *v14;
    if (v15 > 0x7F)
    {
      if (v15 >= 0x100)
      {
        LOWORD(v17) = ___runetype_l(v15, v11);
        goto LABEL_20;
      }

      uint64_t v16 = (char *)(*(void *)(v13[166] + 120LL) + 4 * v15);
    }

    else
    {
      uint64_t v16 = &_DefaultRuneLocale.__magic[4 * v15];
    }

    int v17 = *((_DWORD *)v16 + 15);
LABEL_20:
    ++v14;
  }

  while ((v17 & 0x4000) != 0);
  if (!_simple_salloc()) {
    return 0.0;
  }
  memset(&v27, 0, sizeof(v27));
  __int32 v18 = *(v14 - 1);
  if (v18)
  {
    __int128 v19 = v14;
    do
    {
      size_t v20 = wcrtomb_l(v7, v18, &v27, v11);
      if (v20 == -1LL) {
        break;
      }
      v7[v20] = 0;
      if ((_simple_sappend() & 0x80000000) != 0)
      {
        double v23 = 0.0;
        goto LABEL_33;
      }

      __int32 v21 = *v19++;
      __int32 v18 = v21;
    }

    while (v21);
  }

  uint64_t v22 = (const char *)_simple_string();
  double v23 = strtod_l(v22, &v26, v9);
  if (a2)
  {
    if (v26 != v22) {
      uint64_t v4 = &v14[__wcs_end_offset(v22, (uint64_t)v26, v9) - 1];
    }
    *a2 = v4;
  }

double wcstod(const __int32 *a1, __int32 **a2)
{
  uint64_t v2 = __locale_key;
  uint64_t v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = (_xlocale *)&__global_locale;
  }
  return wcstod_l(a1, a2, v4);
}

float wcstof_l(const __int32 *a1, __int32 **a2, locale_t a3)
{
  uint64_t v4 = (__int32 *)a1;
  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  MEMORY[0x1895FE128](a1, a2);
  locale_t v7 = (char *)&v25 - v6;
  if (v5 == (_xlocale *)-1LL) {
    uint64_t v8 = (_xlocale *)&__global_locale;
  }
  else {
    uint64_t v8 = v5;
  }
  if (v5) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = (_xlocale *)&__c_locale;
  }
  locale_t v10 = __numeric_ctype((uint64_t)v9);
  size_t v11 = v10;
  if (v10 == (locale_t)-1LL) {
    locale_t v12 = (locale_t)&__global_locale;
  }
  else {
    locale_t v12 = v10;
  }
  if (v10) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = &__c_locale;
  }
  uint64_t v14 = v4;
  do
  {
    uint64_t v15 = *v14;
    if (v15 > 0x7F)
    {
      if (v15 >= 0x100)
      {
        LOWORD(v17) = ___runetype_l(v15, v11);
        goto LABEL_20;
      }

      uint64_t v16 = (char *)(*(void *)(v13[166] + 120LL) + 4 * v15);
    }

    else
    {
      uint64_t v16 = &_DefaultRuneLocale.__magic[4 * v15];
    }

    int v17 = *((_DWORD *)v16 + 15);
LABEL_20:
    ++v14;
  }

  while ((v17 & 0x4000) != 0);
  if (!_simple_salloc()) {
    return 0.0;
  }
  memset(&v27, 0, sizeof(v27));
  __int32 v18 = *(v14 - 1);
  if (v18)
  {
    __int128 v19 = v14;
    do
    {
      size_t v20 = wcrtomb_l(v7, v18, &v27, v11);
      if (v20 == -1LL) {
        break;
      }
      v7[v20] = 0;
      if ((_simple_sappend() & 0x80000000) != 0)
      {
        float v23 = 0.0;
        goto LABEL_33;
      }

      __int32 v21 = *v19++;
      __int32 v18 = v21;
    }

    while (v21);
  }

  uint64_t v22 = (const char *)_simple_string();
  float v23 = strtof_l(v22, &v26, v9);
  if (a2)
  {
    if (v26 != v22) {
      uint64_t v4 = &v14[__wcs_end_offset(v22, (uint64_t)v26, v9) - 1];
    }
    *a2 = v4;
  }

float wcstof(const __int32 *a1, __int32 **a2)
{
  uint64_t v2 = __locale_key;
  uint64_t v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = (_xlocale *)&__global_locale;
  }
  return wcstof_l(a1, a2, v4);
}

intmax_t wcstoimax_l(const __int32 *nptr, __int32 **endptr, int base, locale_t a4)
{
  locale_t v7 = (_xlocale *)&__global_locale;
  if (a4 == (locale_t)-1LL) {
    locale_t v8 = (locale_t)&__global_locale;
  }
  else {
    locale_t v8 = a4;
  }
  if (a4) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = (_xlocale *)&__c_locale;
  }
  if (v9 != (_xlocale *)-1LL) {
    locale_t v7 = v9;
  }
  if (v9) {
    locale_t v10 = v7;
  }
  else {
    locale_t v10 = (_xlocale *)&__c_locale;
  }
  size_t v11 = nptr;
  do
  {
    while (1)
    {
      unsigned int v13 = *v11++;
      uint64_t v12 = v13;
      if (v13 <= 0x7F)
      {
        uint64_t v14 = &_DefaultRuneLocale.__magic[4 * v12];
        goto LABEL_19;
      }

      if ((___runetype_l(v12, v9) & 0x4000) == 0) {
        goto LABEL_20;
      }
    }

    uint64_t v14 = (char *)(*(void *)(*((void *)v10 + 166) + 120LL) + 4 * v12);
LABEL_19:
    ;
  }

  while ((*((_DWORD *)v14 + 15) & 0x4000) != 0);
LABEL_20:
  if ((_DWORD)v12 == 43 || (_DWORD)v12 == 45)
  {
    int v16 = *v11++;
    int v15 = v16;
  }

  else
  {
    int v15 = v12;
  }

  if ((base & 0xFFFFFFEF) != 0 || v15 != 48)
  {
LABEL_28:
    BOOL v17 = base == 0;
    if (v15 == 48) {
      goto LABEL_31;
    }
    unsigned int v18 = 10;
  }

  else
  {
    if ((*v11 | 0x20) == 0x78)
    {
      int v15 = v11[1];
      v11 += 2;
      base = 16;
      goto LABEL_28;
    }

    BOOL v17 = base == 0;
LABEL_31:
    unsigned int v18 = 8;
    int v15 = 48;
  }

  if (v17) {
    unint64_t v19 = v18;
  }
  else {
    unint64_t v19 = base;
  }
  if ((v19 - 37) < 0xFFFFFFDD)
  {
    unint64_t v20 = 0LL;
    goto LABEL_37;
  }

  unint64_t v20 = 0LL;
  int v23 = 0;
  if ((_DWORD)v12 == 45) {
    unint64_t v22 = 0x8000000000000000LL;
  }
  else {
    unint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
  }
  unint64_t v24 = v22 / v19;
  while (1)
  {
    int v25 = v15 - 48;
    if ((v15 - 48) >= 0xA)
    {
      if ((v15 - 65) > 0x19)
      {
        int v25 = v15 - 87;
      }

      else
      {
        int v25 = v15 - 55;
      }
    }

    int v26 = -1;
    if ((v23 & 0x80000000) == 0 && v20 <= v24)
    {
      if (v20 == v24 && v25 > (int)(v22 % v19))
      {
        unint64_t v20 = v22 / v19;
      }

      else
      {
        unint64_t v20 = v20 * v19 + v25;
        int v26 = 1;
      }
    }

    int v27 = *v11++;
    int v15 = v27;
    int v23 = v26;
  }

  if (v23 < 0)
  {
    __int128 v28 = __error();
    int v21 = 0;
    *__int128 v28 = 34;
    if (!endptr) {
      return v22;
    }
    goto LABEL_64;
  }

  if (!v23)
  {
LABEL_37:
    *__error() = 22;
    int v21 = 1;
    unint64_t v22 = v20;
    if (!endptr) {
      return v22;
    }
    goto LABEL_64;
  }

  int v21 = 0;
  if ((_DWORD)v12 == 45) {
    unint64_t v22 = -(uint64_t)v20;
  }
  else {
    unint64_t v22 = v20;
  }
  if (endptr)
  {
LABEL_64:
    if (v21) {
      int v29 = (__int32 *)nptr;
    }
    else {
      int v29 = (__int32 *)(v11 - 1);
    }
    *endptr = v29;
  }

  return v22;
}

intmax_t wcstoimax(const __int32 *__nptr, __int32 **__endptr, int __base)
{
  uint64_t v3 = __locale_key;
  uint64_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    locale_t v5 = v4;
  }
  else {
    locale_t v5 = (_xlocale *)&__global_locale;
  }
  return wcstoimax_l(__nptr, __endptr, __base, v5);
}

uint64_t wcstol_l(const __int32 *a1, __int32 **a2, int a3, locale_t a4)
{
  locale_t v7 = (_xlocale *)&__global_locale;
  if (a4 == (locale_t)-1LL) {
    locale_t v8 = (locale_t)&__global_locale;
  }
  else {
    locale_t v8 = a4;
  }
  if (a4) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = (_xlocale *)&__c_locale;
  }
  if (v9 != (_xlocale *)-1LL) {
    locale_t v7 = v9;
  }
  if (v9) {
    locale_t v10 = v7;
  }
  else {
    locale_t v10 = (_xlocale *)&__c_locale;
  }
  size_t v11 = a1;
  do
  {
    while (1)
    {
      unsigned int v13 = *v11++;
      uint64_t v12 = v13;
      if (v13 <= 0x7F)
      {
        uint64_t v14 = &_DefaultRuneLocale.__magic[4 * v12];
        goto LABEL_19;
      }

      if ((___runetype_l(v12, v9) & 0x4000) == 0) {
        goto LABEL_20;
      }
    }

    uint64_t v14 = (char *)(*(void *)(*((void *)v10 + 166) + 120LL) + 4 * v12);
LABEL_19:
    ;
  }

  while ((*((_DWORD *)v14 + 15) & 0x4000) != 0);
LABEL_20:
  if ((_DWORD)v12 == 43 || (_DWORD)v12 == 45)
  {
    int v16 = *v11++;
    int v15 = v16;
  }

  else
  {
    int v15 = v12;
  }

  if ((a3 & 0xFFFFFFEF) != 0 || v15 != 48)
  {
LABEL_28:
    BOOL v17 = a3 == 0;
    if (v15 == 48) {
      goto LABEL_31;
    }
    unsigned int v18 = 10;
  }

  else
  {
    if ((*v11 | 0x20) == 0x78)
    {
      int v15 = v11[1];
      v11 += 2;
      a3 = 16;
      goto LABEL_28;
    }

    BOOL v17 = a3 == 0;
LABEL_31:
    unsigned int v18 = 8;
    int v15 = 48;
  }

  if (v17) {
    unint64_t v19 = v18;
  }
  else {
    unint64_t v19 = a3;
  }
  if ((v19 - 37) < 0xFFFFFFDD)
  {
    unint64_t v20 = 0LL;
    goto LABEL_37;
  }

  unint64_t v20 = 0LL;
  int v23 = 0;
  if ((_DWORD)v12 == 45) {
    unint64_t v22 = 0x8000000000000000LL;
  }
  else {
    unint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
  }
  unint64_t v24 = v22 / v19;
  while (1)
  {
    int v25 = v15 - 48;
    if ((v15 - 48) >= 0xA)
    {
      if ((v15 - 65) > 0x19)
      {
        int v25 = v15 - 87;
      }

      else
      {
        int v25 = v15 - 55;
      }
    }

    int v26 = -1;
    if ((v23 & 0x80000000) == 0 && v20 <= v24)
    {
      if (v20 == v24 && v25 > (int)(v22 % v19))
      {
        unint64_t v20 = v22 / v19;
      }

      else
      {
        unint64_t v20 = v20 * v19 + v25;
        int v26 = 1;
      }
    }

    int v27 = *v11++;
    int v15 = v27;
    int v23 = v26;
  }

  if (v23 < 0)
  {
    __int128 v28 = __error();
    int v21 = 0;
    *__int128 v28 = 34;
    if (!a2) {
      return v22;
    }
    goto LABEL_64;
  }

  if (!v23)
  {
LABEL_37:
    *__error() = 22;
    int v21 = 1;
    unint64_t v22 = v20;
    if (!a2) {
      return v22;
    }
    goto LABEL_64;
  }

  int v21 = 0;
  if ((_DWORD)v12 == 45) {
    unint64_t v22 = -(uint64_t)v20;
  }
  else {
    unint64_t v22 = v20;
  }
  if (a2)
  {
LABEL_64:
    if (v21) {
      int v29 = (__int32 *)a1;
    }
    else {
      int v29 = (__int32 *)(v11 - 1);
    }
    *a2 = v29;
  }

  return v22;
}

uint64_t wcstol(const __int32 *a1, __int32 **a2, int a3)
{
  uint64_t v3 = __locale_key;
  uint64_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    locale_t v5 = v4;
  }
  else {
    locale_t v5 = (_xlocale *)&__global_locale;
  }
  return wcstol_l(a1, a2, a3, v5);
}

long double wcstold_l(const __int32 *a1, __int32 **a2, locale_t a3)
{
  uint64_t v4 = (__int32 *)a1;
  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  MEMORY[0x1895FE128](a1, a2);
  locale_t v7 = (char *)&v25 - v6;
  if (v5 == (_xlocale *)-1LL) {
    locale_t v8 = (_xlocale *)&__global_locale;
  }
  else {
    locale_t v8 = v5;
  }
  if (v5) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = (_xlocale *)&__c_locale;
  }
  locale_t v10 = __numeric_ctype((uint64_t)v9);
  size_t v11 = v10;
  if (v10 == (locale_t)-1LL) {
    locale_t v12 = (locale_t)&__global_locale;
  }
  else {
    locale_t v12 = v10;
  }
  if (v10) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = &__c_locale;
  }
  uint64_t v14 = v4;
  do
  {
    uint64_t v15 = *v14;
    if (v15 > 0x7F)
    {
      if (v15 >= 0x100)
      {
        LOWORD(v17) = ___runetype_l(v15, v11);
        goto LABEL_20;
      }

      int v16 = (char *)(*(void *)(v13[166] + 120LL) + 4 * v15);
    }

    else
    {
      int v16 = &_DefaultRuneLocale.__magic[4 * v15];
    }

    int v17 = *((_DWORD *)v16 + 15);
LABEL_20:
    ++v14;
  }

  while ((v17 & 0x4000) != 0);
  if (!_simple_salloc()) {
    return 0.0;
  }
  memset(&v27, 0, sizeof(v27));
  __int32 v18 = *(v14 - 1);
  if (v18)
  {
    unint64_t v19 = v14;
    do
    {
      size_t v20 = wcrtomb_l(v7, v18, &v27, v11);
      if (v20 == -1LL) {
        break;
      }
      v7[v20] = 0;
      if ((_simple_sappend() & 0x80000000) != 0)
      {
        double v23 = 0.0;
        goto LABEL_33;
      }

      __int32 v21 = *v19++;
      __int32 v18 = v21;
    }

    while (v21);
  }

  unint64_t v22 = (const char *)_simple_string();
  double v23 = strtold_l(v22, &v26, v9);
  if (a2)
  {
    if (v26 != v22) {
      uint64_t v4 = &v14[__wcs_end_offset(v22, (uint64_t)v26, v9) - 1];
    }
    *a2 = v4;
  }

long double wcstold(const __int32 *a1, __int32 **a2)
{
  uint64_t v2 = __locale_key;
  uint64_t v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = (_xlocale *)&__global_locale;
  }
  return wcstold_l(a1, a2, v4);
}

uint64_t wcstoll_l(const __int32 *a1, __int32 **a2, int a3, locale_t a4)
{
  locale_t v7 = (_xlocale *)&__global_locale;
  if (a4 == (locale_t)-1LL) {
    locale_t v8 = (locale_t)&__global_locale;
  }
  else {
    locale_t v8 = a4;
  }
  if (a4) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = (_xlocale *)&__c_locale;
  }
  if (v9 != (_xlocale *)-1LL) {
    locale_t v7 = v9;
  }
  if (v9) {
    locale_t v10 = v7;
  }
  else {
    locale_t v10 = (_xlocale *)&__c_locale;
  }
  size_t v11 = a1;
  do
  {
    while (1)
    {
      unsigned int v13 = *v11++;
      uint64_t v12 = v13;
      if (v13 <= 0x7F)
      {
        uint64_t v14 = &_DefaultRuneLocale.__magic[4 * v12];
        goto LABEL_19;
      }

      if ((___runetype_l(v12, v9) & 0x4000) == 0) {
        goto LABEL_20;
      }
    }

    uint64_t v14 = (char *)(*(void *)(*((void *)v10 + 166) + 120LL) + 4 * v12);
LABEL_19:
    ;
  }

  while ((*((_DWORD *)v14 + 15) & 0x4000) != 0);
LABEL_20:
  if ((_DWORD)v12 == 43 || (_DWORD)v12 == 45)
  {
    int v16 = *v11++;
    int v15 = v16;
  }

  else
  {
    int v15 = v12;
  }

  if ((a3 & 0xFFFFFFEF) != 0 || v15 != 48)
  {
LABEL_28:
    BOOL v17 = a3 == 0;
    if (v15 == 48) {
      goto LABEL_31;
    }
    unsigned int v18 = 10;
  }

  else
  {
    if ((*v11 | 0x20) == 0x78)
    {
      int v15 = v11[1];
      v11 += 2;
      a3 = 16;
      goto LABEL_28;
    }

    BOOL v17 = a3 == 0;
LABEL_31:
    unsigned int v18 = 8;
    int v15 = 48;
  }

  if (v17) {
    unint64_t v19 = v18;
  }
  else {
    unint64_t v19 = a3;
  }
  if ((v19 - 37) < 0xFFFFFFDD)
  {
    unint64_t v20 = 0LL;
    goto LABEL_37;
  }

  unint64_t v20 = 0LL;
  int v23 = 0;
  if ((_DWORD)v12 == 45) {
    unint64_t v22 = 0x8000000000000000LL;
  }
  else {
    unint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
  }
  unint64_t v24 = v22 / v19;
  while (1)
  {
    int v25 = v15 - 48;
    if ((v15 - 48) >= 0xA)
    {
      if ((v15 - 65) > 0x19)
      {
        int v25 = v15 - 87;
      }

      else
      {
        int v25 = v15 - 55;
      }
    }

    int v26 = -1;
    if ((v23 & 0x80000000) == 0 && v20 <= v24)
    {
      if (v20 == v24 && v25 > (int)(v22 % v19))
      {
        unint64_t v20 = v22 / v19;
      }

      else
      {
        unint64_t v20 = v20 * v19 + v25;
        int v26 = 1;
      }
    }

    int v27 = *v11++;
    int v15 = v27;
    int v23 = v26;
  }

  if (v23 < 0)
  {
    __int128 v28 = __error();
    int v21 = 0;
    *__int128 v28 = 34;
    if (!a2) {
      return v22;
    }
    goto LABEL_64;
  }

  if (!v23)
  {
LABEL_37:
    *__error() = 22;
    int v21 = 1;
    unint64_t v22 = v20;
    if (!a2) {
      return v22;
    }
    goto LABEL_64;
  }

  int v21 = 0;
  if ((_DWORD)v12 == 45) {
    unint64_t v22 = -(uint64_t)v20;
  }
  else {
    unint64_t v22 = v20;
  }
  if (a2)
  {
LABEL_64:
    if (v21) {
      int v29 = (__int32 *)a1;
    }
    else {
      int v29 = (__int32 *)(v11 - 1);
    }
    *a2 = v29;
  }

  return v22;
}

uint64_t wcstoll(const __int32 *a1, __int32 **a2, int a3)
{
  uint64_t v3 = __locale_key;
  uint64_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    locale_t v5 = v4;
  }
  else {
    locale_t v5 = (_xlocale *)&__global_locale;
  }
  return wcstoll_l(a1, a2, a3, v5);
}

size_t wcstombs_l(char *a1, const __int32 *a2, size_t a3, locale_t a4)
{
  locale_t v4 = (locale_t)&__global_locale;
  if (a4 != (locale_t)-1LL) {
    locale_t v4 = a4;
  }
  if (a4) {
    locale_t v5 = v4;
  }
  else {
    locale_t v5 = (locale_t)&__c_locale;
  }
  memset(v8, 0, sizeof(v8));
  locale_t v7 = a2;
  return (*(uint64_t (**)(char *, const __int32 **, uint64_t, size_t, _OWORD *))(*((void *)v5 + 166) + 104LL))( a1,  &v7,  -1LL,  a3,  v8);
}

size_t wcstombs(char *a1, const __int32 *a2, size_t a3)
{
  uint64_t v3 = __locale_key;
  locale_t v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (!v4) {
    locale_t v4 = &__global_locale;
  }
  if (v4 == (void *)-1LL) {
    locale_t v5 = &__global_locale;
  }
  else {
    locale_t v5 = v4;
  }
  memset(v8, 0, sizeof(v8));
  locale_t v7 = a2;
  return (*(uint64_t (**)(char *, const __int32 **, uint64_t, size_t, _OWORD *))(v5[166] + 104LL))( a1,  &v7,  -1LL,  a3,  v8);
}

unint64_t wcstoul_l(const __int32 *a1, __int32 **a2, int a3, locale_t a4)
{
  locale_t v7 = (_xlocale *)&__global_locale;
  if (a4 == (locale_t)-1LL) {
    locale_t v8 = (locale_t)&__global_locale;
  }
  else {
    locale_t v8 = a4;
  }
  if (a4) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = (_xlocale *)&__c_locale;
  }
  if (v9 != (_xlocale *)-1LL) {
    locale_t v7 = v9;
  }
  if (v9) {
    locale_t v10 = v7;
  }
  else {
    locale_t v10 = (_xlocale *)&__c_locale;
  }
  size_t v11 = a1;
  do
  {
    while (1)
    {
      unsigned int v13 = *v11++;
      uint64_t v12 = v13;
      if (v13 <= 0x7F)
      {
        uint64_t v14 = &_DefaultRuneLocale.__magic[4 * v12];
        goto LABEL_19;
      }

      if ((___runetype_l(v12, v9) & 0x4000) == 0) {
        goto LABEL_20;
      }
    }

    uint64_t v14 = (char *)(*(void *)(*((void *)v10 + 166) + 120LL) + 4 * v12);
LABEL_19:
    ;
  }

  while ((*((_DWORD *)v14 + 15) & 0x4000) != 0);
LABEL_20:
  if ((_DWORD)v12 == 43 || (_DWORD)v12 == 45)
  {
    int v16 = *v11++;
    int v15 = v16;
  }

  else
  {
    int v15 = v12;
  }

  if ((a3 & 0xFFFFFFEF) != 0 || v15 != 48)
  {
LABEL_28:
    BOOL v17 = a3 == 0;
    if (v15 == 48) {
      goto LABEL_31;
    }
    unsigned int v18 = 10;
  }

  else
  {
    if ((*v11 | 0x20) == 0x78)
    {
      int v15 = v11[1];
      v11 += 2;
      a3 = 16;
      goto LABEL_28;
    }

    BOOL v17 = a3 == 0;
LABEL_31:
    unsigned int v18 = 8;
    int v15 = 48;
  }

  if (v17) {
    unint64_t v19 = v18;
  }
  else {
    unint64_t v19 = a3;
  }
  if ((v19 - 37) < 0xFFFFFFDD)
  {
    unint64_t v20 = 0LL;
    goto LABEL_37;
  }

  unint64_t v20 = 0LL;
  int v22 = 0;
  unint64_t v23 = 0xFFFFFFFFFFFFFFFFLL / v19;
  while (1)
  {
    int v24 = v15 - 48;
    if ((v15 - 48) >= 0xA)
    {
      if ((v15 - 65) > 0x19)
      {
        int v24 = v15 - 87;
      }

      else
      {
        int v24 = v15 - 55;
      }
    }

    int v25 = -1;
    if ((v22 & 0x80000000) == 0 && v20 <= v23)
    {
      if (v20 == v23 && v24 > (int)~(0xFFFFFFFFFFFFFFFFLL / v19 * v19))
      {
        unint64_t v20 = 0xFFFFFFFFFFFFFFFFLL / v19;
      }

      else
      {
        unint64_t v20 = v20 * v19 + v24;
        int v25 = 1;
      }
    }

    int v26 = *v11++;
    int v15 = v26;
    int v22 = v25;
  }

  if (v22 < 0)
  {
    int v27 = __error();
    int v21 = 0;
    int *v27 = 34;
    unint64_t v20 = -1LL;
    if (!a2) {
      return v20;
    }
    goto LABEL_60;
  }

  if (!v22)
  {
LABEL_37:
    *__error() = 22;
    int v21 = 1;
    if (!a2) {
      return v20;
    }
    goto LABEL_60;
  }

  int v21 = 0;
  if ((_DWORD)v12 == 45) {
    unint64_t v20 = -(uint64_t)v20;
  }
  if (a2)
  {
LABEL_60:
    if (v21) {
      __int128 v28 = (__int32 *)a1;
    }
    else {
      __int128 v28 = (__int32 *)(v11 - 1);
    }
    *a2 = v28;
  }

  return v20;
}

unint64_t wcstoul(const __int32 *a1, __int32 **a2, int a3)
{
  uint64_t v3 = __locale_key;
  locale_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    locale_t v5 = v4;
  }
  else {
    locale_t v5 = (_xlocale *)&__global_locale;
  }
  return wcstoul_l(a1, a2, a3, v5);
}

unint64_t wcstoull_l(const __int32 *a1, __int32 **a2, int a3, locale_t a4)
{
  locale_t v7 = (_xlocale *)&__global_locale;
  if (a4 == (locale_t)-1LL) {
    locale_t v8 = (locale_t)&__global_locale;
  }
  else {
    locale_t v8 = a4;
  }
  if (a4) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = (_xlocale *)&__c_locale;
  }
  if (v9 != (_xlocale *)-1LL) {
    locale_t v7 = v9;
  }
  if (v9) {
    locale_t v10 = v7;
  }
  else {
    locale_t v10 = (_xlocale *)&__c_locale;
  }
  size_t v11 = a1;
  do
  {
    while (1)
    {
      unsigned int v13 = *v11++;
      uint64_t v12 = v13;
      if (v13 <= 0x7F)
      {
        uint64_t v14 = &_DefaultRuneLocale.__magic[4 * v12];
        goto LABEL_19;
      }

      if ((___runetype_l(v12, v9) & 0x4000) == 0) {
        goto LABEL_20;
      }
    }

    uint64_t v14 = (char *)(*(void *)(*((void *)v10 + 166) + 120LL) + 4 * v12);
LABEL_19:
    ;
  }

  while ((*((_DWORD *)v14 + 15) & 0x4000) != 0);
LABEL_20:
  if ((_DWORD)v12 == 43 || (_DWORD)v12 == 45)
  {
    int v16 = *v11++;
    int v15 = v16;
  }

  else
  {
    int v15 = v12;
  }

  if ((a3 & 0xFFFFFFEF) != 0 || v15 != 48)
  {
LABEL_28:
    BOOL v17 = a3 == 0;
    if (v15 == 48) {
      goto LABEL_31;
    }
    unsigned int v18 = 10;
  }

  else
  {
    if ((*v11 | 0x20) == 0x78)
    {
      int v15 = v11[1];
      v11 += 2;
      a3 = 16;
      goto LABEL_28;
    }

    BOOL v17 = a3 == 0;
LABEL_31:
    unsigned int v18 = 8;
    int v15 = 48;
  }

  if (v17) {
    unint64_t v19 = v18;
  }
  else {
    unint64_t v19 = a3;
  }
  if ((v19 - 37) < 0xFFFFFFDD)
  {
    unint64_t v20 = 0LL;
    goto LABEL_37;
  }

  unint64_t v20 = 0LL;
  int v22 = 0;
  unint64_t v23 = 0xFFFFFFFFFFFFFFFFLL / v19;
  while (1)
  {
    int v24 = v15 - 48;
    if ((v15 - 48) >= 0xA)
    {
      if ((v15 - 65) > 0x19)
      {
        int v24 = v15 - 87;
      }

      else
      {
        int v24 = v15 - 55;
      }
    }

    int v25 = -1;
    if ((v22 & 0x80000000) == 0 && v20 <= v23)
    {
      if (v20 == v23 && v24 > (int)~(0xFFFFFFFFFFFFFFFFLL / v19 * v19))
      {
        unint64_t v20 = 0xFFFFFFFFFFFFFFFFLL / v19;
      }

      else
      {
        unint64_t v20 = v20 * v19 + v24;
        int v25 = 1;
      }
    }

    int v26 = *v11++;
    int v15 = v26;
    int v22 = v25;
  }

  if (v22 < 0)
  {
    int v27 = __error();
    int v21 = 0;
    int *v27 = 34;
    unint64_t v20 = -1LL;
    if (!a2) {
      return v20;
    }
    goto LABEL_60;
  }

  if (!v22)
  {
LABEL_37:
    *__error() = 22;
    int v21 = 1;
    if (!a2) {
      return v20;
    }
    goto LABEL_60;
  }

  int v21 = 0;
  if ((_DWORD)v12 == 45) {
    unint64_t v20 = -(uint64_t)v20;
  }
  if (a2)
  {
LABEL_60:
    if (v21) {
      __int128 v28 = (__int32 *)a1;
    }
    else {
      __int128 v28 = (__int32 *)(v11 - 1);
    }
    *a2 = v28;
  }

  return v20;
}

unint64_t wcstoull(const __int32 *a1, __int32 **a2, int a3)
{
  uint64_t v3 = __locale_key;
  locale_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    locale_t v5 = v4;
  }
  else {
    locale_t v5 = (_xlocale *)&__global_locale;
  }
  return wcstoull_l(a1, a2, a3, v5);
}

uintmax_t wcstoumax_l(const __int32 *nptr, __int32 **endptr, int base, locale_t a4)
{
  locale_t v7 = (_xlocale *)&__global_locale;
  if (a4 == (locale_t)-1LL) {
    locale_t v8 = (locale_t)&__global_locale;
  }
  else {
    locale_t v8 = a4;
  }
  if (a4) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = (_xlocale *)&__c_locale;
  }
  if (v9 != (_xlocale *)-1LL) {
    locale_t v7 = v9;
  }
  if (v9) {
    locale_t v10 = v7;
  }
  else {
    locale_t v10 = (_xlocale *)&__c_locale;
  }
  size_t v11 = nptr;
  do
  {
    while (1)
    {
      unsigned int v13 = *v11++;
      uint64_t v12 = v13;
      if (v13 <= 0x7F)
      {
        uint64_t v14 = &_DefaultRuneLocale.__magic[4 * v12];
        goto LABEL_19;
      }

      if ((___runetype_l(v12, v9) & 0x4000) == 0) {
        goto LABEL_20;
      }
    }

    uint64_t v14 = (char *)(*(void *)(*((void *)v10 + 166) + 120LL) + 4 * v12);
LABEL_19:
    ;
  }

  while ((*((_DWORD *)v14 + 15) & 0x4000) != 0);
LABEL_20:
  if ((_DWORD)v12 == 43 || (_DWORD)v12 == 45)
  {
    int v16 = *v11++;
    int v15 = v16;
  }

  else
  {
    int v15 = v12;
  }

  if ((base & 0xFFFFFFEF) != 0 || v15 != 48)
  {
LABEL_28:
    BOOL v17 = base == 0;
    if (v15 == 48) {
      goto LABEL_31;
    }
    unsigned int v18 = 10;
  }

  else
  {
    if ((*v11 | 0x20) == 0x78)
    {
      int v15 = v11[1];
      v11 += 2;
      base = 16;
      goto LABEL_28;
    }

    BOOL v17 = base == 0;
LABEL_31:
    unsigned int v18 = 8;
    int v15 = 48;
  }

  if (v17) {
    unint64_t v19 = v18;
  }
  else {
    unint64_t v19 = base;
  }
  if ((v19 - 37) < 0xFFFFFFDD)
  {
    uintmax_t v20 = 0LL;
    goto LABEL_37;
  }

  uintmax_t v20 = 0LL;
  int v22 = 0;
  unint64_t v23 = 0xFFFFFFFFFFFFFFFFLL / v19;
  while (1)
  {
    int v24 = v15 - 48;
    if ((v15 - 48) >= 0xA)
    {
      if ((v15 - 65) > 0x19)
      {
        int v24 = v15 - 87;
      }

      else
      {
        int v24 = v15 - 55;
      }
    }

    int v25 = -1;
    if ((v22 & 0x80000000) == 0 && v20 <= v23)
    {
      if (v20 == v23 && v24 > (int)~(0xFFFFFFFFFFFFFFFFLL / v19 * v19))
      {
        uintmax_t v20 = 0xFFFFFFFFFFFFFFFFLL / v19;
      }

      else
      {
        uintmax_t v20 = v20 * v19 + v24;
        int v25 = 1;
      }
    }

    int v26 = *v11++;
    int v15 = v26;
    int v22 = v25;
  }

  if (v22 < 0)
  {
    int v27 = __error();
    int v21 = 0;
    int *v27 = 34;
    uintmax_t v20 = -1LL;
    if (!endptr) {
      return v20;
    }
    goto LABEL_60;
  }

  if (!v22)
  {
LABEL_37:
    *__error() = 22;
    int v21 = 1;
    if (!endptr) {
      return v20;
    }
    goto LABEL_60;
  }

  int v21 = 0;
  if ((_DWORD)v12 == 45) {
    uintmax_t v20 = -(uint64_t)v20;
  }
  if (endptr)
  {
LABEL_60:
    if (v21) {
      __int128 v28 = (__int32 *)nptr;
    }
    else {
      __int128 v28 = (__int32 *)(v11 - 1);
    }
    *endptr = v28;
  }

  return v20;
}

uintmax_t wcstoumax(const __int32 *__nptr, __int32 **__endptr, int __base)
{
  uint64_t v3 = __locale_key;
  locale_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    locale_t v5 = v4;
  }
  else {
    locale_t v5 = (_xlocale *)&__global_locale;
  }
  return wcstoumax_l(__nptr, __endptr, __base, v5);
}

int wctob_l(int result, locale_t a2)
{
  if (result != -1)
  {
    locale_t v2 = (locale_t)&__global_locale;
    if (a2 != (locale_t)-1LL) {
      locale_t v2 = a2;
    }
    if (a2) {
      locale_t v3 = v2;
    }
    else {
      locale_t v3 = (locale_t)&__c_locale;
    }
    if ((*(uint64_t (**)(_BYTE *, void, _OWORD *))(*((void *)v3 + 166) + 96LL))( v4,  *(void *)&result,  v5) == 1) {
      return v4[0];
    }
    else {
      return -1;
    }
  }

  return result;
}

int wctob(wint_t a1)
{
  uint64_t v1 = __locale_key;
  locale_t v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2) {
    locale_t v3 = v2;
  }
  else {
    locale_t v3 = (_xlocale *)&__global_locale;
  }
  return wctob_l(a1, v3);
}

int wctomb_l(char *a1, __int32 a2, locale_t a3)
{
  locale_t v3 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1LL) {
    locale_t v3 = a3;
  }
  if (a3) {
    locale_t v4 = v3;
  }
  else {
    locale_t v4 = (locale_t)&__c_locale;
  }
  if (a1)
  {
    LODWORD(a1) = (*(uint64_t (**)(char *, void, uint64_t))(*((void *)v4 + 166) + 96LL))( a1,  *(void *)&a2,  (uint64_t)v4 + 1168);
  }

  else
  {
    *((_OWORD *)v4 + 80) = 0u;
    *((_OWORD *)v4 + 79) = 0u;
    *((_OWORD *)v4 + 78) = 0u;
    *((_OWORD *)v4 + 77) = 0u;
    *((_OWORD *)v4 + 76) = 0u;
    *((_OWORD *)v4 + 75) = 0u;
    *((_OWORD *)v4 + 74) = 0u;
    *((_OWORD *)v4 + 73) = 0u;
  }

  return (int)a1;
}

int wctomb(char *a1, __int32 a2)
{
  uint64_t v2 = __locale_key;
  locale_t v3 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (!v3) {
    locale_t v3 = &__global_locale;
  }
  if (v3 == (void *)-1LL) {
    locale_t v4 = &__global_locale;
  }
  else {
    locale_t v4 = v3;
  }
  if (a1)
  {
    LODWORD(a1) = (*(uint64_t (**)(char *, void, void *))(v4[166] + 96LL))(a1, *(void *)&a2, v4 + 146);
  }

  else
  {
    *((_OWORD *)v4 + 80) = 0u;
    *((_OWORD *)v4 + 79) = 0u;
    *((_OWORD *)v4 + 78) = 0u;
    *((_OWORD *)v4 + 77) = 0u;
    *((_OWORD *)v4 + 76) = 0u;
    *((_OWORD *)v4 + 75) = 0u;
    *((_OWORD *)v4 + 74) = 0u;
    *((_OWORD *)v4 + 73) = 0u;
  }

  return (int)a1;
}

wint_t towctrans_l(wint_t a1, wctrans_t a2, locale_t a3)
{
  wint_t v4 = a1;
  locale_t v5 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1LL) {
    locale_t v5 = a3;
  }
  if (a3) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = (_xlocale *)&__c_locale;
  }
  if (a2 == 2)
  {
    return ___toupper_l(a1, v6);
  }

  else
  {
    if (a2 != 1)
    {
      *__error() = 22;
      return v4;
    }

    return ___tolower_l(a1, v6);
  }

wint_t towctrans(wint_t a1, wctrans_t a2)
{
  uint64_t v2 = __locale_key;
  locale_t v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    wint_t v4 = v3;
  }
  else {
    wint_t v4 = (_xlocale *)&__global_locale;
  }
  return towctrans_l(a1, a2, v4);
}

wctrans_t wctrans(const char *a1)
{
  uint64_t v1 = 0LL;
  uint64_t v2 = &off_18965CF80;
  while (_platform_strcmp())
  {
    ++v1;
    v2 += 2;
    if (v1 == 2)
    {
      *__error() = 22;
      return (wctrans_t)(&off_18965CF70)[2 * v1 + 1];
    }
  }

  return (wctrans_t)(&off_18965CF70)[2 * v1 + 1];
}

wctype_t wctype_l(const char *a1, locale_t a2)
{
  for (uint64_t i = 0LL; i != 32; i += 2LL)
  {
  }

  locale_t v4 = (locale_t)&__c_locale;
  locale_t v5 = (locale_t)&__global_locale;
  if (a2 != (locale_t)-1LL) {
    locale_t v5 = a2;
  }
  if (a2) {
    locale_t v4 = v5;
  }
  uint64_t v6 = *(void *)(*((void *)v4 + 166) + 120LL);
  int v7 = *(_DWORD *)(v6 + 3196);
  if (v7 < 1) {
    return 0;
  }
  uint64_t v8 = *(void *)(v6 + 3200);
  int v9 = v7 + 1;
  while (_platform_strncmp())
  {
    v8 += 20LL;
    if (--v9 < 2) {
      return 0;
    }
  }

  return *(_DWORD *)(v8 + 16);
}

wctype_t wctype(const char *a1)
{
  uint64_t v1 = __locale_key;
  uint64_t v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2) {
    locale_t v3 = v2;
  }
  else {
    locale_t v3 = (_xlocale *)&__global_locale;
  }
  return wctype_l(a1, v3);
}

int wcwidth(int result)
{
  uint64_t v1 = __locale_key;
  uint64_t v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  locale_t v3 = (_xlocale *)&__global_locale;
  if (v2) {
    locale_t v4 = v2;
  }
  else {
    locale_t v4 = (_xlocale *)&__global_locale;
  }
  if (result)
  {
    if (result < 0x100)
    {
      if (v4 != (_xlocale *)-1LL) {
        locale_t v3 = v4;
      }
      unsigned int v5 = *(_DWORD *)(*(void *)(*((void *)v3 + 166) + 120LL) + 4LL * result + 60);
    }

    else
    {
      unsigned int v5 = ___runetype_l(result, v4);
    }

    if (v5 >> 29)
    {
      return v5 >> 30;
    }

    else if ((v5 & 0x40000) != 0)
    {
      return 1;
    }

    else
    {
      return -1;
    }
  }

  return result;
}

int wcwidth_l(int result, locale_t a2)
{
  uint64_t v2 = (_xlocale *)&__c_locale;
  locale_t v3 = (_xlocale *)&__global_locale;
  if (a2 == (locale_t)-1LL) {
    locale_t v4 = (locale_t)&__global_locale;
  }
  else {
    locale_t v4 = a2;
  }
  if (a2) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = (_xlocale *)&__c_locale;
  }
  if (result)
  {
    if (result < 0x100)
    {
      if (v5 != (_xlocale *)-1LL) {
        locale_t v3 = v5;
      }
      if (v5) {
        uint64_t v2 = v3;
      }
      unsigned int v6 = *(_DWORD *)(*(void *)(*((void *)v2 + 166) + 120LL) + 4LL * result + 60);
    }

    else
    {
      unsigned int v6 = ___runetype_l(result, v5);
    }

    if (v6 >> 29)
    {
      return v6 >> 30;
    }

    else if ((v6 & 0x40000) != 0)
    {
      return 1;
    }

    else
    {
      return -1;
    }
  }

  return result;
}

char *__cdecl addr2ascii(int a1, const void *a2, int a3, char *a4)
{
  locale_t v4 = a4;
  if (a4
    || (locale_t v4 = (char *)addr2ascii_staticbuf) != 0LL
    || (locale_t v4 = (char *)malloc(0x40uLL), (addr2ascii_staticbuf = (uint64_t)v4) != 0))
  {
    if (a1 == 18)
    {
      if (a3 == 20)
      {
        link_ntoa((const sockaddr_dl *)a2);
        goto LABEL_10;
      }
    }

    else
    {
      if (a1 != 2)
      {
        int v9 = __error();
        locale_t v4 = 0LL;
        int v10 = 43;
LABEL_13:
        *int v9 = v10;
        return v4;
      }

      if (a3 == 4)
      {
        v8.s_addr = *(_DWORD *)a2;
        inet_ntoa(v8);
LABEL_10:
        _platform_strcpy();
        return v4;
      }
    }

    int v9 = __error();
    locale_t v4 = 0LL;
    int v10 = 63;
    goto LABEL_13;
  }

  return v4;
}

int ascii2addr(int a1, const char *a2, void *a3)
{
  if (a1 == 18)
  {
    link_addr(a2, (sockaddr_dl *)a3);
    return 20;
  }

  else
  {
    if (a1 == 2)
    {
      __s1[0] = 0;
      strncat(__s1, a2, 0xFuLL);
      if (inet_aton(__s1, (in_addr *)a3)) {
        return 4;
      }
      unsigned int v5 = __error();
      int v6 = 22;
    }

    else
    {
      unsigned int v5 = __error();
      int v6 = 43;
    }

    int *v5 = v6;
    return -1;
  }

in_addr_t inet_addr(const char *a1)
{
  else {
    return -1;
  }
}

int inet_aton(const char *a1, in_addr *a2)
{
  return _inet_aton_check((unsigned __int8 *)a1, a2, 0);
}

uint64_t _inet_aton_check(unsigned __int8 *a1, _DWORD *a2, int a3)
{
  int v3 = *a1;
  unint64_t v4 = 0LL;
  while (2)
  {
    if (v3 == 48)
    {
      int v3 = a1[1];
      if ((v3 & 0xFFFFFFDF) == 0x58)
      {
        int v5 = 0;
        unsigned __int8 v6 = a1[2];
        a1 += 2;
        LOBYTE(v3) = v6;
        int v7 = 1;
        uint64_t v8 = 16LL;
      }

      else
      {
        int v7 = 0;
        int v5 = 1;
        ++a1;
        uint64_t v8 = 8LL;
      }
    }

    else
    {
      int v7 = 0;
      int v5 = 0;
      uint64_t v8 = 10LL;
    }

    int v9 = (char)v3;
    unint64_t v10 = 0LL;
    if ((v3 & 0x80) != 0)
    {
      char v16 = 0;
      goto LABEL_26;
    }

    int v11 = v5;
    while (1)
    {
      if (v3 - 48 <= 9)
      {
        if ((v3 & 0xFE) == 0x38) {
          char v12 = v5;
        }
        else {
          char v12 = 0;
        }
        if ((v12 & 1) != 0) {
          return 0LL;
        }
        unint64_t v10 = v10 * v8 + v9 - 48;
        goto LABEL_22;
      }

      if (!v7) {
        break;
      }
      __uint32_t v13 = _DefaultRuneLocale.__runetype[v3];
      if ((v13 & 0x10000) == 0) {
        break;
      }
      if ((v13 & 0x1000) != 0) {
        int v14 = -97;
      }
      else {
        int v14 = -65;
      }
      unint64_t v10 = (v9 + v14 + 10) | (16 * v10);
LABEL_22:
      int v15 = (char)*++a1;
      int v9 = v15;
      int v11 = 1;
      LOBYTE(v3) = v15;
      if (v15 < 0)
      {
        char v16 = 0;
        LOBYTE(v3) = v9;
        int v5 = 1;
        goto LABEL_26;
      }
    }

    char v16 = 1;
    int v5 = v11;
LABEL_26:
    if (v3 != 46)
    {
      if ((_BYTE)v3)
      {
        char v19 = v16 ^ 1;
        if (a3) {
          char v19 = 1;
        }
        if ((v19 & 1) != 0) {
          return 0LL;
        }
        uint64_t v17 = 0LL;
      }

      else if (!v5)
      {
        return 0LL;
      }

      if ((_DWORD)v4 == 3)
      {
        if (v10 > 0xFF) {
          return 0LL;
        }
        int v20 = (v22 << 24) | (v23 << 16) | (v24 << 8);
      }

      else
      {
        if ((_DWORD)v4 != 2)
        {
          if ((_DWORD)v4 == 1)
          {
            if (v10 >> 24) {
              return 0LL;
            }
            LODWORD(v10) = v10 | (v22 << 24);
          }

          goto LABEL_51;
        }

        if (v10 >> 16) {
          return 0LL;
        }
        int v20 = (v22 << 24) | (v23 << 16);
      }

      LODWORD(v10) = v10 | v20;
LABEL_51:
      if (a2) {
        *a2 = bswap32(v10);
      }
      return 1LL;
    }

    uint64_t v17 = 0LL;
    if (v4 <= 2 && v10 <= 0xFF)
    {
      *(&v22 + v4++) = v10;
      int v18 = *++a1;
      LOBYTE(v3) = v18;
      continue;
    }

    return v17;
  }

FILE *__cdecl open_memstream(char **__bufp, size_t *__sizep)
{
  if (__bufp && __sizep)
  {
    unint64_t v4 = (char *)calloc(1uLL, 1uLL);
    *__bufp = v4;
    if (v4)
    {
      int v5 = malloc(0x20uLL);
      if (v5)
      {
        unsigned __int8 v6 = v5;
        void *v5 = __bufp;
        v5[1] = __sizep;
        void v5[2] = 0LL;
        v5[3] = 0LL;
        memstream_update((uint64_t)v5);
        int v7 = funopen( v6,  0LL,  (int (__cdecl *)(void *, const char *, int))memstream_write,  (fpos_t (__cdecl *)(void *, fpos_t, int))memstream_seek,  (int (__cdecl *)(void *))memstream_close);
        uint64_t v8 = v7;
        if (v7)
        {
          fwide(v7, -1);
        }

        else
        {
          int v10 = *__error();
          free(v6);
          free(*__bufp);
          *__bufp = 0LL;
          *__error() = v10;
        }
      }

      else
      {
        int v9 = *__error();
        free(*__bufp);
        *__bufp = 0LL;
        uint64_t v8 = 0LL;
        *__error() = v9;
      }
    }

    else
    {
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = 0LL;
    *__error() = 22;
  }

  return v8;
}

uint64_t memstream_update(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 16);
  if ((v1 & 0x8000000000000000LL) != 0 || (unint64_t v2 = *(void *)(result + 24), (v2 & 0x8000000000000000LL) != 0)) {
    memstream_update_cold_1();
  }
  if (v1 >= v2) {
    unint64_t v1 = *(void *)(result + 24);
  }
  **(void **)(result + 8) = v1;
  return result;
}

uint64_t memstream_write(uint64_t a1, uint64_t a2, int a3)
{
  LODWORD(v3) = a3;
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  int64_t v7 = v5 + a3;
  if (v7 > v6)
  {
    uint64_t v8 = 15 * v6 / 10;
    if (v8 <= v7) {
      int64_t v6 = v7;
    }
    else {
      int64_t v6 = v8;
    }
    int v9 = realloc(**(void ***)a1, v6 + 1);
    if (!v9) {
      return 0xFFFFFFFFLL;
    }
    int v10 = v9;
    _platform_bzero();
    **(void **)a1 = v10;
    *(void *)(a1 + 16) = v6;
    uint64_t v5 = *(void *)(a1 + 24);
  }

  else {
    uint64_t v3 = v6 - v5;
  }
  _platform_memmove();
  *(void *)(a1 + 24) += v3;
  memstream_update(a1);
  return v3;
}

uint64_t memstream_seek(uint64_t a1, int64_t a2, int a3)
{
  switch(a3)
  {
    case 2:
      uint64_t v4 = *(void *)(a1 + 16);
      if (a2 < 0)
      {
        a2 += v4;
        if (a2 < 0)
        {
          uint64_t v5 = __error();
          int v6 = 22;
          goto LABEL_13;
        }
      }

      else
      {
        if ((v4 ^ 0x7FFFFFFFFFFFFFFFuLL) < a2)
        {
          uint64_t v5 = __error();
          int v6 = 84;
LABEL_13:
          int *v5 = v6;
          return -1LL;
        }

        a2 += v4;
      }

uint64_t memstream_close(void *a1)
{
  return 0LL;
}

in_addr_t inet_lnaof(in_addr a1)
{
  int v1 = bswap32(a1.s_addr);
  else {
    int v2 = 255;
  }
  if (v1 >= 0) {
    int v2 = 0xFFFFFF;
  }
  return v1 & v2;
}

in_addr inet_makeaddr(in_addr_t a1, in_addr_t a2)
{
  if (HIBYTE(a1)) {
    in_addr_t v2 = a2 | a1;
  }
  else {
    in_addr_t v2 = a2 | (a1 << 8);
  }
  if (HIWORD(a1)) {
    unsigned int v3 = v2;
  }
  else {
    unsigned int v3 = (unsigned __int16)a2 | ((unsigned __int16)a1 << 16);
  }
  in_addr_t v4 = a2 & 0xFFFFFF | (a1 << 24);
  if (a1 <= 0x7F) {
    unsigned int v3 = v4;
  }
  return (in_addr)bswap32(v3);
}

char *__cdecl inet_net_ntop(int a1, const void *a2, int a3, char *a4, __darwin_size_t a5)
{
  __darwin_size_t v5 = a5;
  int v6 = a4;
  uint64_t v8 = (unsigned __int8 *)a2;
  if (a1 == 30)
  {
    if (!a3)
    {
      strcpy(v49, "::");
      int v29 = &v49[2];
      goto LABEL_88;
    }

    unsigned int v12 = (a3 + 7) >> 3;
    _platform_memmove();
    _platform_bzero();
    if ((a3 & 7) != 0) {
      v50[v12 - 1] &= -1 << (8 - (a3 & 7));
    }
    int v13 = 0;
    unint64_t v14 = 0LL;
    int v15 = 0;
    signed int v16 = 0;
    int v17 = 0;
    signed int v18 = 0;
    unsigned int v19 = (a3 + 15) >> 4;
    if (v19 == 1) {
      unsigned int v19 = 2;
    }
    do
    {
      if (v17 < v15) {
        signed int v20 = v16;
      }
      else {
        signed int v20 = v18;
      }
      if (v17 < v15) {
        int v21 = v15;
      }
      else {
        int v21 = v17;
      }
      if (v17 < v15) {
        int v22 = 0;
      }
      else {
        int v22 = v15;
      }
      if (v15)
      {
        signed int v23 = v16;
      }

      else
      {
        signed int v20 = v18;
        int v21 = v17;
        int v22 = 0;
        signed int v23 = v13;
      }

      if (v50[v14 + 1] | v50[v14])
      {
        signed int v18 = v20;
        int v17 = v21;
        int v15 = v22;
      }

      else
      {
        signed int v16 = v23;
        ++v15;
      }

      v14 += 2LL;
      ++v13;
    }

    while (v14 < 2 * v19);
    char v24 = 0;
    BOOL v25 = v15 != 0;
    BOOL v26 = v17 < v15;
    if (v25 && v26) {
      signed int v27 = v16;
    }
    else {
      signed int v27 = v18;
    }
    if (v25 && v26) {
      int v28 = v15;
    }
    else {
      int v28 = v17;
    }
    if (v28 == v19 || v27) {
      goto LABEL_65;
    }
    if (v28 == 7)
    {
      char v24 = 0;
      if (!v50[14] || v50[15] == 1) {
        goto LABEL_65;
      }
    }

    else if (v28 != 6)
    {
      if (v28 != 5)
      {
        char v24 = 0;
        goto LABEL_65;
      }

      char v24 = 0;
      if (v50[10] != 255 || v50[11] != 255)
      {
LABEL_65:
        signed int v37 = 0;
        int v38 = -v19;
        int v29 = v49;
        __int128 v39 = v50;
        char v40 = v24 ^ 1;
        do
        {
          if (v28 && v37 >= v27 && v37 < v27 + v28)
          {
            if (v27 == v37) {
              *v29++ = 58;
            }
            if (v38 + v37 == -1) {
              *v29++ = 58;
            }
            char v41 = v39 + 2;
          }

          else
          {
            else {
              char v42 = v40;
            }
            if ((v42 & 1) != 0)
            {
              char v44 = v49;
              if (v29 != v49)
              {
                *int v29 = 58;
                char v44 = v29 + 1;
              }

              int v29 = &v44[sprintf(v44, "%x", __rev16(*(unsigned __int16 *)v39))];
              char v41 = v39 + 2;
            }

            else
            {
              if (v37 == 6) {
                char v43 = 58;
              }
              else {
                char v43 = 46;
              }
              *int v29 = v43;
              char v41 = v39 + 1;
              v29 += sprintf(v29 + 1, "%u", *v39) + 1;
              if (a3 > 120 || v37 != 7)
              {
                *int v29 = 46;
                char v41 = v39 + 2;
                v29 += sprintf(v29 + 1, "%u", v39[1]) + 1;
              }
            }
          }

          ++v37;
          __int128 v39 = v41;
        }

        while (v38 + v37);
LABEL_88:
        sprintf(v29, "/%u", a3);
        if (_platform_strlen() + 1 <= a5)
        {
          int v6 = a4;
          _platform_strcpy();
          return v6;
        }

        goto LABEL_89;
      }
    }

    char v24 = 1;
    goto LABEL_65;
  }

  if (a1 != 2)
  {
    int v10 = __error();
    int v6 = 0LL;
    int v11 = 47;
    goto LABEL_90;
  }

  if (a3 >= 0x21)
  {
LABEL_8:
    int v10 = __error();
    int v6 = 0LL;
    int v11 = 22;
LABEL_90:
    *int v10 = v11;
    return v6;
  }

  if (!a3)
  {
    if (a5 >= 2)
    {
      *(_WORD *)a4 = 48;
      int v9 = a4 + 1;
      __darwin_size_t v5 = a5 - 1;
      goto LABEL_59;
    }

    goto LABEL_89;
  }

  if (a3 >= 8)
  {
    if (a5 < 6) {
      goto LABEL_89;
    }
    signed int v30 = a3 >> 3;
    uint64_t v8 = (unsigned __int8 *)a2 + 1;
    __int128 v31 = a4;
    while (1)
    {
      int v32 = sprintf(v31, "%u", *(v8 - 1));
      int v9 = &v31[v32];
      if (v30 < 2) {
        break;
      }
      *(_WORD *)int v9 = 46;
      __int128 v33 = v9 + 1;
      __darwin_size_t v5 = &v31[v5] - v33;
      --v30;
      ++v8;
      __int128 v31 = v33;
      if (v5 < 6) {
        goto LABEL_89;
      }
    }

    v5 -= v32;
  }

  else
  {
    int v9 = a4;
  }

  if ((a3 & 7) == 0) {
    goto LABEL_59;
  }
  if (v5 < 6)
  {
LABEL_89:
    int v10 = __error();
    int v6 = 0LL;
    int v11 = 40;
    goto LABEL_90;
  }

  __int128 v34 = v6;
  if (v9 != v6)
  {
    *int v9 = 46;
    __int128 v34 = v9 + 1;
  }

  int v35 = sprintf(v34, "%u", (~(-1 << (a3 & 7)) << (8 - (a3 & 7))) & *v8);
  __int128 v36 = &v9[v5];
  int v9 = &v34[v35];
  __darwin_size_t v5 = v36 - v9;
LABEL_59:
  if (v5 < 5) {
    goto LABEL_89;
  }
  sprintf(v9, "/%u", a3);
  return v6;
}

int inet_net_pton(int a1, const char *a2, void *a3, __darwin_size_t a4)
{
  __darwin_size_t v4 = a4;
  int v6 = a2;
  if (a1 != 30)
  {
    if (a1 != 2)
    {
      signed int v18 = __error();
      int v19 = 47;
      goto LABEL_82;
    }

    uint64_t v8 = a2 + 1;
    int v7 = *a2;
    if (v7 != 48
      || (*(unsigned __int8 *)v8 | 0x20) != 0x78
      || v6[2] < 0
      || (_DefaultRuneLocale.__runetype[*((unsigned __int8 *)v6 + 2)] & 0x10000) == 0)
    {
      int v9 = 2;
      int v10 = a3;
LABEL_10:
      int v11 = 0;
      while (1)
      {
        unsigned int v12 = _platform_memchr() - "0123456789";
        if (v12 >= 0xA) {
          inet_net_pton_cold_1();
        }
        int v11 = v12 + 10 * v11;
        if (v11 > 255) {
          goto LABEL_148;
        }
        int v14 = *v8++;
        int v13 = v14;
        if (v14 < 1 || (v13 - 48) >= 0xA)
        {
          if (!v4) {
            goto LABEL_152;
          }
          --v4;
          *v10++ = v11;
          if (v13 == 46)
          {
            int v16 = *v8++;
            int v15 = v16;
            int v9 = 2;
            goto LABEL_149;
          }

          goto LABEL_90;
        }
      }
    }

    if (a4)
    {
      if (!v6[2]) {
        goto LABEL_148;
      }
      int v33 = 0;
      int v34 = 0;
      int v13 = *((unsigned __int8 *)v6 + 2);
      uint64_t v8 = v6 + 3;
      int v10 = a3;
      do
      {
        unsigned int v35 = _platform_memchr() - "0123456789abcdef";
        if (v35 >= 0x10) {
          inet_net_pton_cold_3();
        }
        int v36 = 16 * v34;
        if (!v33) {
          int v36 = 0;
        }
        int v34 = v35 | v36;
        if (v33 == 1)
        {
          if (!v4) {
            goto LABEL_152;
          }
          int v33 = 0;
          --v4;
          *v10++ = v34;
        }

        else
        {
          int v33 = 1;
        }

        int v37 = *v8++;
        int v13 = v37;
      }

      while (v37 > 0);
      if (!v33)
      {
LABEL_90:
        if (v13)
        {
          if (v13 == 47 && (*v8 & 0x80000000) == 0 && *(unsigned __int8 *)v8 - 48 <= 9 && v10 > a3)
          {
            int v38 = 0;
            uint64_t v51 = (char *)(v8 + 1);
            while (1)
            {
              unsigned int v52 = _platform_memchr() - "0123456789";
              if (v52 >= 0xA) {
                inet_net_pton_cold_2();
              }
              int v38 = v52 + 10 * v38;
              if (v38 > 32) {
                break;
              }
              int v54 = *v51++;
              int v53 = v54;
              if (v54 < 1 || (v53 - 48) >= 0xA)
              {
                int v9 = 2;
                if (v53 || v10 == a3) {
                  goto LABEL_149;
                }
                if (v38 == -1) {
                  goto LABEL_126;
                }
                uint64_t v55 = 8 * (v10 - (_BYTE *)a3);
                goto LABEL_144;
              }
            }
          }

          goto LABEL_148;
        }

        if (v10 != a3)
        {
LABEL_126:
          unsigned int v64 = *(unsigned __int8 *)a3;
          if ((v64 & 0x80u) == 0) {
            int v65 = 8;
          }
          else {
            int v65 = 16;
          }
          if (v64 <= 0xBF) {
            unsigned int v66 = v65;
          }
          else {
            unsigned int v66 = 24;
          }
          if (v64 > 0xDF) {
            unsigned int v66 = 8;
          }
          if (v64 > 0xEF) {
            unsigned int v66 = 32;
          }
          uint64_t v55 = 8 * (v10 - (_BYTE *)a3);
          if (v55 > v66) {
            unsigned int v66 = 8 * ((_DWORD)v10 - (_DWORD)a3);
          }
          if (v64 == 224) {
            int v67 = 4;
          }
          else {
            int v67 = 8;
          }
          if (v66 == 8) {
            int v38 = v67;
          }
          else {
            int v38 = v66;
          }
LABEL_144:
          if (v55 >= v38) {
            return v38;
          }
          while (v4)
          {
            --v4;
            *v10++ = 0;
            if (v38 <= 8 * (v10 - (_BYTE *)a3)) {
              return v38;
            }
          }

          goto LABEL_152;
        }

LABEL_148:
        int v9 = 2;
LABEL_149:
        *__error() = v9;
        return -1;
      }

      if (v4)
      {
        --v4;
        *v10++ = 16 * v34;
        goto LABEL_90;
      }
    }

                      int v85 = *(_DWORD *)(a2 + 8);
                      *(_DWORD *)(a2 + 8) = v85 + 1;
                      int v86 = a2 + 10824 + 24LL * v85;
                      *(_OWORD *)int v86 = *(_OWORD *)(v76 + 2706);
                      *(void *)(v86 + 16) = *((void *)v76 + 1355);
                      LODWORD(v86) = *(_DWORD *)(a2 + 8);
                      *(_DWORD *)(a2 + 8) = v86 + 1;
                      double v87 = a2 + 10824 + 24LL * (int)v86;
                      *(_OWORD *)double v87 = *((_OWORD *)v76 + 678);
                      *(void *)(v87 + 16) = *((void *)v76 + 1358);
                    }
                  }

                  free(v76);
                  LODWORD(v26) = *(_DWORD *)(a2 + 4);
                }
              }
            }

            int v88 = (v26 - 2);
            if ((int)v26 < 2)
            {
LABEL_162:
              int v15 = 0LL;
            }

            else
            {
              uint64_t v89 = 0LL;
              __darwin_ct_rune_t v90 = *(unsigned __int8 *)(a2 + 9624);
              while (!typesequiv(a2, *(unsigned __int8 *)(a2 + 9625 + v89), v90)
                   || *(void *)(a2 + 8 * v89 + 32) - *(void *)(a2 + 24) != 0x2F0605980LL)
              {
              }

              *(_DWORD *)(a2 + 16) = 1;
LABEL_157:
              __darwin_ct_rune_t v91 = (int)v26 - 1LL;
              int v92 = *(unsigned __int8 *)(a2 + 9624 + v91);
              __int128 v93 = (void *)(a2 + 8 * v91 + 24);
              while (!typesequiv(a2, v92, *(unsigned __int8 *)(a2 + 9624 + v88))
                   || *v93 - *(void *)(a2 + 8 * v88 + 24) != 0x2F0605980LL)
              {
                if (v88-- <= 0) {
                  goto LABEL_162;
                }
              }

              int v15 = 0LL;
              *(_DWORD *)(a2 + 20) = 1;
            }

            goto LABEL_22;
          }
        }
      }

      else
      {
LABEL_70:
        int v40 = 0LL;
        while (1)
        {
          uint64_t v41 = 0LL;
          BOOL v42 = (uint64_t)*v32 >> 7;
          do
            BOOL v42 = v32[v41++] | (unint64_t)(v42 << 8);
          while (v41 != 4);
          uint64_t v43 = a2 + 24 * v40;
          *(void *)(v43 + 10824) = v42;
          char v44 = v32[4];
          *(_DWORD *)(v43 + 10832) = v44;
          if (v44 > 1) {
            break;
          }
          int v45 = v32[5];
          *(_DWORD *)(a2 + 24 * v40 + 10836) = v45;
          v32 += 6;
          if (++v40 == v28)
          {
            uint64_t v46 = 1;
            goto LABEL_78;
          }
        }
      }
    }
  }

LABEL_152:
    int v9 = 40;
    goto LABEL_149;
  }

  v73[0] = 0LL;
  v73[1] = 0LL;
  int v17 = *(unsigned __int8 *)a2;
  if (v17 == 58)
  {
    int v6 = a2 + 1;
    if (a2[1] != 58) {
      goto LABEL_81;
    }
    int v72 = -1;
  }

  else
  {
    int v72 = -1;
    if (!v17)
    {
      signed int v30 = 0LL;
      __int128 v31 = (char *)v73;
      int v32 = 1;
      goto LABEL_65;
    }
  }

  uint64_t v20 = 0LL;
  int v21 = 0;
  unsigned int v22 = 0;
  int v23 = 0;
  unint64_t v70 = 0LL;
  int v71 = v6;
  char v24 = v6 + 1;
  BOOL v25 = (char *)v73;
  while (1)
  {
    int v26 = (char)v17;
    uint64_t v27 = _platform_memchr();
    if (!v27) {
      break;
    }
    int v28 = "0123456789abcdef";
LABEL_30:
    if (v21 > 3) {
      goto LABEL_81;
    }
    unsigned int v22 = (v27 - (_DWORD)v28) | (16 * v22);
    ++v21;
    int v23 = 1;
LABEL_32:
    BOOL v25 = (char *)v73 + v20;
    int v29 = *(unsigned __int8 *)v24++;
    LOBYTE(v17) = v29;
    if (!v29) {
      goto LABEL_60;
    }
  }

  uint64_t v27 = _platform_memchr();
  if (v27)
  {
    LODWORD(v28) = "0123456789ABCDEF";
    goto LABEL_30;
  }

  if (v26 == 58)
  {
    if (v23)
    {
      if (!*v24) {
        goto LABEL_81;
      }
      if (v20 > 14) {
        return 0;
      }
      int v23 = 0;
      int v21 = 0;
      *(_WORD *)((char *)v73 + v20) = bswap32(v22) >> 16;
      v20 += 2LL;
      int v71 = v24;
      unsigned int v22 = 0;
    }

    else
    {
      if (v70) {
        goto LABEL_81;
      }
      int v23 = 0;
      unint64_t v70 = v25;
      int v71 = v24;
    }

    goto LABEL_32;
  }

  if (v26 == 46)
  {
    if (v20 > 12) {
      goto LABEL_81;
    }
    uint64_t v56 = v20 + 4;
    unsigned int v57 = v25;
LABEL_109:
    uint64_t v58 = 0LL;
    unsigned int v59 = 0;
    __int128 v60 = v71;
    while (1)
    {
      int v61 = v71[v58];
      if (!v71[v58]) {
        break;
      }
      uint64_t v62 = _platform_memchr();
      if (!v62)
      {
        if ((v61 & 0xFFFFFFFE) != 0x2E || v57 - v25 > 3) {
          goto LABEL_81;
        }
        v71 += v58 + 1;
        *v57++ = v59;
        if (v61 != 47) {
          goto LABEL_109;
        }
        if ((int)getbits((uint64_t)&v60[v58 + 1], &v72) <= 0)
        {
LABEL_81:
          signed int v18 = __error();
          int v19 = 2;
          goto LABEL_82;
        }

LABEL_157:
        int v32 = 0;
        __int128 v31 = (char *)v73 + v56;
        goto LABEL_64;
      }

      if (!(_DWORD)v58 || v59)
      {
        unsigned int v59 = v62 - "0123456789" + 10 * v59;
        ++v58;
        if (v59 < 0x100) {
          continue;
        }
      }

      goto LABEL_81;
    }

    if (!(_DWORD)v58 || v57 - v25 > 3) {
      goto LABEL_81;
    }
    *unsigned int v57 = v59;
    goto LABEL_157;
  }

LABEL_60:
  __int128 v31 = (char *)v73 + v20;
  if (v23)
  {
    if (v20 > 14) {
      goto LABEL_81;
    }
    *(_WORD *)__int128 v31 = bswap32(v22) >> 16;
    v31 += 2;
  }

  int v32 = 1;
LABEL_64:
  signed int v30 = v70;
LABEL_65:
  if (v72 == -1) {
    int v38 = 128;
  }
  else {
    int v38 = v72;
  }
  int v72 = v38;
  int v39 = v38 + 15;
  if (v38 < -15) {
    int v39 = v38 + 30;
  }
  int v40 = v39 >> 4;
  if (v40 <= 2) {
    int v40 = 2;
  }
  uint64_t v41 = (2 * v40);
  BOOL v42 = v32 == 0;
  uint64_t v43 = 16LL;
  if (!v42) {
    uint64_t v43 = v41;
  }
  char v44 = (char *)v73 + v43;
  if (v30)
  {
    if (v31 == v44) {
      goto LABEL_81;
    }
    int v45 = (_DWORD)v31 - (_DWORD)v30;
    if ((int)v31 - (int)v30 >= 1)
    {
      uint64_t v46 = (v45 + 1) - 1LL;
      char v47 = (char *)v73 + v43 - 1;
      int v48 = &v30[v45 - 1];
      do
      {
        *v47-- = *v48;
        *v48-- = 0;
        --v46;
      }

      while (v46);
      int v38 = v72;
    }
  }

  else if (v31 != v44)
  {
    goto LABEL_81;
  }

  int v49 = v38 + 7;
  if (v38 < -7) {
    int v49 = v38 + 14;
  }
  if ((uint64_t)v49 >> 3 <= a4)
  {
    _platform_memmove();
  }

  else
  {
    signed int v18 = __error();
    int v19 = 40;
LABEL_82:
    *signed int v18 = v19;
    return -1;
  }

  return v38;
}

uint64_t getbits(uint64_t a1, int *a2)
{
  uint64_t v4 = 0LL;
  int v5 = 0;
  while (*(_BYTE *)(a1 + v4))
  {
    uint64_t result = _platform_memchr();
    if (!result) {
      return result;
    }
    if (!(_DWORD)v4 || v5)
    {
      int v5 = result - "0123456789" + 10 * v5;
      ++v4;
      if (v5 < 129) {
        continue;
      }
    }

    return 0LL;
  }

  if ((_DWORD)v4)
  {
    *a2 = v5;
    return 1LL;
  }

  return 0LL;
}

char *__cdecl inet_neta(in_addr_t a1, char *a2, __darwin_size_t a3)
{
  uint64_t v4 = a2;
  if (!a1) {
    goto LABEL_10;
  }
  in_addr_t v5 = a1;
  int v6 = a2;
  do
  {
    unsigned int v8 = v5;
    int v7 = (unint64_t)v5 >> 24;
    v5 <<= 8;
    if (!is_mul_ok(0x100u, v8))
    {
      if (a3 < 5) {
        goto LABEL_11;
      }
      int v9 = &v6[sprintf(v6, "%u", v7)];
      if (v5) {
        *(_WORD *)v9++ = 46;
      }
      a3 = &v6[a3] - v9;
      int v6 = v9;
    }
  }

  while (v5);
  if (v6 == v4)
  {
LABEL_10:
    if (a3 >= 8)
    {
      *(void *)uint64_t v4 = 0x302E302E302E30LL;
    }

    else
    {
LABEL_11:
      uint64_t v4 = 0LL;
      *__error() = 40;
    }
  }

  return v4;
}

in_addr_t inet_netof(in_addr a1)
{
  int v1 = bswap32(a1.s_addr);
  else {
    char v2 = 8;
  }
  if (v1 >= 0) {
    char v2 = 24;
  }
  return v1 >> v2;
}

in_addr_t inet_network(const char *a1)
{
  unint64_t v1 = 0LL;
  uint64_t v2 = __locale_key;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    uint64_t v4 = a1 + 1;
    int v5 = *(unsigned __int8 *)a1;
    BOOL v6 = v5 == 48;
    if (v5 == 48) {
      int v7 = 8;
    }
    else {
      int v7 = 10;
    }
    if (v5 != 48) {
      uint64_t v4 = a1;
    }
    int v8 = *(unsigned __int8 *)v4;
    if ((v8 | 0x20) == 0x78)
    {
      int v9 = *(unsigned __int8 *)++v4;
      int v8 = v9;
      int v7 = 16;
    }

    unsigned int v10 = 0;
    if (v8)
    {
      while (1)
      {
        int v11 = (char)v8;
        if (v8 - 48 > 9)
        {
          if (v7 != 16) {
            break;
          }
          __uint32_t v12 = _DefaultRuneLocale.__runetype[v8];
          if ((v12 & 0x10000) == 0) {
            break;
          }
          if ((v8 & 0x80) != 0)
          {
            int v13 = *(void **)(StatusReg + 8 * v2);
            if (!v13) {
              int v13 = &__global_locale;
            }
            __uint32_t v12 = *(_DWORD *)(*(void *)(v13[166] + 120LL) + 4LL * v8 + 60);
          }

          int v14 = 16 * v10;
          if ((v12 & 0x1000) != 0) {
            int v15 = -97;
          }
          else {
            int v15 = -65;
          }
          unsigned int v10 = (v14 | 0xA) + v11 + v15;
        }

        else
        {
          if (v7 == 8 && (v8 & 0xFE) == 0x38) {
            return -1;
          }
          unsigned int v10 = (char)v8 + v10 * v7 - 48;
        }

        int v16 = *(unsigned __int8 *)++v4;
        LOBYTE(v8) = v16;
        BOOL v6 = 1;
        if (!v16) {
          goto LABEL_27;
        }
      }
    }

    if (!v6) {
      return -1;
    }
LABEL_27:
    in_addr_t result = -1;
    if (v1 > 3 || v10 > 0xFF) {
      return result;
    }
    *(_DWORD *)&v23[4 * v1++] = v10;
    a1 = v4 + 1;
  }

  if ((_BYTE)v8)
  {
    if ((v8 & 0x80) != 0)
    {
      int v19 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
      if (!v19) {
        int v19 = &__global_locale;
      }
      signed int v18 = *(_RuneLocale **)(v19[166] + 120LL);
    }

    else
    {
      signed int v18 = &_DefaultRuneLocale;
    }
  }

  *(_DWORD *)&v23[4 * v1] = v10;
  unint64_t v20 = (4 * v1 + 4) >> 2;
  if (!(_DWORD)v20) {
    return 0;
  }
  uint64_t v21 = 0LL;
  in_addr_t result = 0;
  unint64_t v22 = v1 + 1;
  do
    in_addr_t result = v23[4 * v21++] | (result << 8);
  while (v22 != v21);
  return result;
}

char *__cdecl inet_ntoa(in_addr a1)
{
  in_addr_t s_addr = a1.s_addr;
  strcpy((char *)&inet_ntoa_ret, "[inet_ntoa error]");
  inet_ntop(2, &s_addr, (char *)&inet_ntoa_ret, 0x12u);
  return (char *)&inet_ntoa_ret;
}

void link_addr(const char *a1, sockaddr_dl *a2)
{
  sdl_data = a2->sdl_data;
  int v5 = &a2->sdl_len + a2->sdl_len;
  _platform_bzero();
  uint64_t v7 = 0LL;
  int v8 = 0;
  a2->sdl_family = 18;
  int v9 = sdl_data;
  while (1)
  {
    unsigned int v10 = v8 & 0xFFFFFFF3;
    int v11 = *(unsigned __int8 *)a1;
    if ((v11 - 48) <= 9)
    {
      uint64_t v6 = (v11 - 48);
      goto LABEL_14;
    }

    if ((v11 - 97) <= 5)
    {
      uint64_t v6 = (v11 - 87);
      goto LABEL_14;
    }

    if ((v11 - 65) <= 5)
    {
      uint64_t v6 = (v11 - 55);
      goto LABEL_14;
    }

    if (!*a1) {
      break;
    }
    if (v10 || (v11 & 0xFFFFFFDF) - 65 >= 0x1A)
    {
      v10 |= 8u;
      goto LABEL_14;
    }

    ++a1;
    unsigned int v10 = 12;
LABEL_15:
    *v9++ = v11;
    uint64_t v12 = v7;
    int v8 = v10;
LABEL_20:
    uint64_t v7 = v12;
  }

  v10 |= 4u;
LABEL_14:
  ++a1;
  int v8 = 1;
  uint64_t v12 = v6;
  switch(v10)
  {
    case 0u:
    case 0xCu:
      goto LABEL_15;
    case 1u:
      uint64_t v12 = (v6 + 16 * v7);
      int v8 = 2;
      goto LABEL_20;
    case 2u:
      *v9++ = v7;
      uint64_t v12 = v6;
      goto LABEL_20;
    case 3u:
      goto LABEL_20;
    case 5u:
    case 6u:
      *int v9 = v7;
      LODWORD(v9) = (_DWORD)v9 + 1;
      break;
    case 7u:
      break;
    case 8u:
      a2->sdl_nleuint64_t n = (_BYTE)v9 - (_BYTE)sdl_data;
      int v8 = 3;
      uint64_t v12 = v7;
      goto LABEL_20;
    default:
      uint64_t v12 = 0LL;
      *v9++ = v7;
      int v8 = 3;
      goto LABEL_20;
  }

char *__cdecl link_ntoa(const sockaddr_dl *a1)
{
  sdl_nleuint64_t n = a1->sdl_nlen;
  sdl_aleuint64_t n = a1->sdl_alen;
  if ((unint64_t)(3 * sdl_alen + sdl_nlen) <= 0x3F)
  {
    sdl_data = a1->sdl_data;
    uint64_t v6 = link_ntoa_obuf;
    if (a1->sdl_nlen)
    {
      _platform_memmove();
      uint64_t v6 = &link_ntoa_obuf[a1->sdl_nlen];
      if (a1->sdl_alen) {
        *v6++ = 58;
      }
    }

    if ((_DWORD)sdl_alen)
    {
      char v7 = 0;
      int v8 = (unsigned __int8 *)&sdl_data[sdl_nlen];
      do
      {
        if ((v7 & 1) != 0) {
          *v6++ = 46;
        }
        unsigned int v10 = *v8++;
        unint64_t v9 = v10;
        if (v10 < 0x10)
        {
          uint64_t v11 = 1LL;
        }

        else
        {
          v6[1] = hexlist[v9 & 0xF];
          v9 >>= 4;
          uint64_t v11 = 2LL;
        }

        unsigned int v3 = &v6[v11];
        *uint64_t v6 = hexlist[v9];
        char v7 = 1;
        uint64_t v6 = v3;
      }

      while (v8 < (unsigned __int8 *)&sdl_data[sdl_nlen + sdl_alen]);
    }

    else
    {
      unsigned int v3 = v6;
    }
  }

  else
  {
    unsigned int v3 = link_ntoa_obuf;
  }

  *unsigned int v3 = 0;
  return link_ntoa_obuf;
}

unsigned int inet_nsap_addr(const char *a1, unsigned __int8 *a2, int a3)
{
  if (*a1 == 48)
  {
    unsigned int v3 = a1;
    if ((*((unsigned __int8 *)a1 + 1) | 0x20) == 0x78)
    {
      int v5 = a1 + 2;
      LOBYTE(v4) = a1[2];
      if ((_BYTE)v4 && a3 != 0)
      {
        unsigned int result = 0;
        unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        while (1)
        {
          unint64_t v9 = v3 + 3;
          unsigned int v3 = v5;
          while (1)
          {
            unsigned int v10 = v9;
            ++v9;
            LOBYTE(v4) = *v10;
            unsigned int v3 = v10;
            if (!*v10) {
              return result;
            }
          }

          if ((v4 & 0x80) != 0) {
            break;
          }
          __uint32_t v11 = _DefaultRuneLocale.__runetype[v4];
          if ((v11 & 0x1000) != 0)
          {
            uint64_t v12 = *(void **)(StatusReg + 8 * __locale_key);
            if (!v12) {
              uint64_t v12 = &__global_locale;
            }
            uint64_t v4 = *(unsigned __int8 *)(*(void *)(v12[166] + 120LL) + 4LL * v4 + 2108);
            __uint32_t v11 = _DefaultRuneLocale.__runetype[v4];
          }

          if ((v11 & 0x10000) == 0) {
            break;
          }
          char v13 = v4 - 48 >= 0xA ? 9 : 0;
          uint64_t v14 = *(unsigned __int8 *)v10;
          if (!v14) {
            break;
          }
          int v15 = *(void **)(StatusReg + 8 * __locale_key);
          if (!v15) {
            int v15 = &__global_locale;
          }
          int v16 = *(_DWORD *)(*(void *)(v15[166] + 120LL) + 4 * v14 + 2108);
          char v17 = v13 + v4;
          int v5 = v3 + 2;
          else {
            char v18 = -48;
          }
          *a2++ = (v18 + v16) | (16 * v17);
          ++result;
          LOBYTE(v4) = *v5;
          if (!*v5 || result >= a3) {
            return result;
          }
        }
      }
    }
  }

  return 0;
}

char *__cdecl inet_nsap_ntoa(int a1, const unsigned __int8 *a2, char *a3)
{
  unsigned int result = (char *)malloc(0x2FDuLL);
  if (result)
  {
    if (a3) {
      unsigned int result = a3;
    }
    *(_WORD *)unsigned int result = 30768;
    char v7 = result + 2;
    if (a1 >= 255) {
      int v8 = 255;
    }
    else {
      int v8 = a1;
    }
    if (a1 < 1)
    {
      int v15 = result + 2;
    }

    else
    {
      uint64_t v9 = 0LL;
      if (v8 <= 1) {
        int v10 = 1;
      }
      else {
        int v10 = v8;
      }
      do
      {
        if (a2[v9] >= 0xA0u) {
          char v11 = 55;
        }
        else {
          char v11 = 48;
        }
        *char v7 = v11 + (a2[v9] >> 4);
        unsigned int v12 = a2[v9] & 0xF;
        if (v12 >= 0xA) {
          char v13 = 55;
        }
        else {
          char v13 = 48;
        }
        char v14 = v13 + v12;
        int v15 = v7 + 2;
        v7[1] = v14;
        if ((v9 & 1) == 0 && (int)v9 + 1 < v8)
        {
          int v15 = v7 + 3;
          char v7[2] = 46;
        }

        ++v9;
        char v7 = v15;
      }

      while (v10 != (_DWORD)v9);
    }

    *int v15 = 0;
  }

  return result;
}

uint64_t recv_NOCANCEL()
{
  return __recvfrom_nocancel();
}

uint64_t send_NOCANCEL()
{
  return __sendto_nocancel();
}

int sockatmark(int a1)
{
  if (ioctl(a1, 0x40047307uLL, &v2) == -1) {
    return -1;
  }
  else {
    return v2;
  }
}

int setipv4sourcefilter(int a1, in_addr a2, in_addr a3, uint32_t a4, uint32_t a5, in_addr *a6)
{
  if (a1 == -1) {
    setipv4sourcefilter_cold_1();
  }
  if ((a3.s_addr & 0xF0) != 0xE0 || a4 - 3 <= 0xFFFFFFFD)
  {
    char v14 = __error();
    int v15 = 22;
LABEL_16:
    *char v14 = v15;
    return -1;
  }

  uint32_t v11 = __inaddr_to_index(a2.s_addr);
  if (!v11)
  {
    char v14 = __error();
    int v15 = 49;
    goto LABEL_16;
  }

  uint32_t v12 = v11;
  memset(&v22, 0, 128);
  *(_WORD *)&v22.sa_leuint64_t n = 528;
  *(in_addr *)&v22.sa_data[2] = a3;
  if (!a5 && !a6) {
    return setsourcefilter(a1, v11, &v22, 0x10u, a4, 0, 0LL);
  }
  uint64_t v16 = a5;
  char v17 = (sockaddr_storage *)calloc(a5, 0x80uLL);
  if (!v17)
  {
    char v14 = __error();
    int v15 = 12;
    goto LABEL_16;
  }

  char v18 = v17;
  if (a5)
  {
    int v19 = v17;
    do
    {
      *(_WORD *)&v19->ss_leuint64_t n = 528;
      in_addr_t s_addr = a6->s_addr;
      ++a6;
      *(_DWORD *)&v19->__ss_pad1[2] = s_addr;
      ++v19;
      --v16;
    }

    while (v16);
  }

  int v13 = setsourcefilter(a1, v12, &v22, 0x10u, a4, a5, v17);
  free(v18);
  return v13;
}

char *__inaddr_to_index(int a1)
{
  if (getifaddrs(&v9) < 0) {
    return 0LL;
  }
  int v2 = v9;
  if (v9)
  {
    unsigned int v3 = v9;
    while (1)
    {
      ifa_addr = v3->ifa_addr;
      if (ifa_addr)
      {
        if (ifa_addr->sa_family == 2 && *(_DWORD *)&ifa_addr->sa_data[2] == a1) {
          break;
        }
      }

      unsigned int v3 = v3->ifa_next;
      if (!v3) {
        goto LABEL_8;
      }
    }

    ifa_name = v3->ifa_name;
    if (ifa_name)
    {
      char v7 = v9;
      while (1)
      {
        int v8 = v7->ifa_addr;
        if (v8)
        {
        }

        char v7 = v7->ifa_next;
        if (!v7) {
          goto LABEL_18;
        }
      }

      ifa_name = (char *)*(unsigned __int16 *)v8->sa_data;
      if (!*(_WORD *)v8->sa_data) {
LABEL_18:
      }
        __inaddr_to_index_cold_1();
    }
  }

  else
  {
LABEL_8:
    ifa_name = 0LL;
  }

  MEMORY[0x186DFC228](v2);
  return ifa_name;
}

int setsourcefilter( int a1, uint32_t a2, sockaddr *a3, socklen_t a4, uint32_t a5, uint32_t a6, sockaddr_storage *a7)
{
  if (a5 - 3 <= 0xFFFFFFFD) {
    goto LABEL_2;
  }
  int sa_family = a3->sa_family;
  if (sa_family == 30)
  {
    if (a4 == 28 && a3->sa_data[6] == 255)
    {
      int v13 = 41;
      goto LABEL_13;
    }
  }

  else
  {
    if (sa_family != 2)
    {
      char v7 = __error();
      int v8 = 47;
      goto LABEL_3;
    }

    if (a4 == 16 && (*(_DWORD *)&a3->sa_data[2] & 0xF0) == 0xE0)
    {
      int v13 = 0;
LABEL_13:
      int v23 = 0;
      __int128 v22 = 0u;
      __int128 v21 = 0u;
      __int128 v20 = 0u;
      __int128 v19 = 0u;
      __int128 v18 = 0u;
      __int128 v17 = 0u;
      __int128 v16 = 0u;
      __int128 v15 = 0u;
      v14[0] = a2;
      v14[1] = a5;
      v14[2] = a6;
      _platform_memmove();
      char v24 = a7;
      return setsockopt(a1, v13, 74, v14, 0x98u);
    }
  }

int getipv4sourcefilter(int a1, in_addr a2, in_addr a3, uint32_t *a4, uint32_t *a5, in_addr *a6)
{
  if (a1 == -1) {
    getipv4sourcefilter_cold_1();
  }
  if (!a4) {
    getipv4sourcefilter_cold_2();
  }
  if (!a5) {
    getipv4sourcefilter_cold_3();
  }
  size_t v9 = *a5;
  *a5 = 0;
  if ((a3.s_addr & 0xF0) != 0xE0 || (int v10 = a6) == 0LL && (_DWORD)v9)
  {
    uint32_t v12 = __error();
    int v13 = 22;
LABEL_8:
    *uint32_t v12 = v13;
    return -1;
  }

  uint32_t v16 = __inaddr_to_index(a2.s_addr);
  if (!v16)
  {
    uint32_t v12 = __error();
    int v13 = 49;
    goto LABEL_8;
  }

  uint32_t v17 = v16;
  memset(&v25, 0, 128);
  *(_WORD *)&v25.sa_leuint64_t n = 528;
  *(in_addr *)&v25.sa_data[2] = a3;
  if (!v10 && !(_DWORD)v9) {
    return getsourcefilter(a1, v16, &v25, 0x10u, a4, a5, 0LL);
  }
  __int128 v18 = (sockaddr_storage *)calloc(v9, 0x80uLL);
  if (!v18)
  {
    uint32_t v12 = __error();
    int v13 = 12;
    goto LABEL_8;
  }

  __int128 v19 = v18;
  int v14 = getsourcefilter(a1, v17, &v25, 0x10u, a4, a5, v18);
  uint32_t v20 = *a5;
  if (*a5)
  {
    else {
      uint32_t v21 = v9;
    }
    if (v21)
    {
      unint64_t v22 = 0LL;
      int v23 = (in_addr_t *)&v19->__ss_pad1[2];
      do
      {
        if (*((_BYTE *)v23 - 3) == 2)
        {
          v10->in_addr_t s_addr = *v23;
          ++v10;
          uint32_t v20 = *a5;
        }

        v23 += 32;
        ++v22;
        else {
          unint64_t v24 = v9;
        }
      }

      while (v22 < v24);
    }

    free(v19);
  }

  return v14;
}

int getsourcefilter( int a1, uint32_t a2, sockaddr *a3, socklen_t a4, uint32_t *a5, uint32_t *a6, sockaddr_storage *a7)
{
  if (!a5 || !a2 || !a3 || !a6) {
    goto LABEL_12;
  }
  uint32_t v11 = *a6;
  *a6 = 0;
  *a5 = 0;
  int sa_family = a3->sa_family;
  if (sa_family != 30)
  {
    if (sa_family != 2)
    {
      int v14 = __error();
      int v15 = 47;
      goto LABEL_13;
    }

    if (a4 == 16 && (*(_DWORD *)&a3->sa_data[2] & 0xF0) == 0xE0)
    {
      int v13 = 0;
      goto LABEL_17;
    }

nl_catd catopen(const char *a1, int a2)
{
  if (!a1 || !*a1)
  {
    uint64_t v4 = __error();
    int v5 = 22;
LABEL_6:
    *uint64_t v4 = v5;
    return (nl_catd)-1LL;
  }

  if (_platform_strchr()) {
    return (nl_catd)loadCat();
  }
  if (a2 == 1) {
    uint64_t v6 = querylocale(4, 0LL);
  }
  else {
    uint64_t v6 = getenv("LANG");
  }
  char v7 = v6;
  if (!v6
    || (int v8 = *(unsigned __int8 *)v6, !*v6)
    || (unint64_t)_platform_strlen() > 0x1F
    || v8 == 46 && (!v7[1] || v7[1] == 46 && !v7[2])
    || _platform_strchr())
  {
    char v7 = "C";
  }

  size_t v9 = strdup(v7);
  if (!v9) {
    return (nl_catd)-1LL;
  }
  int v10 = v9;
  uint32_t v11 = (_BYTE *)_platform_strchr();
  if (v11) {
    *uint32_t v11 = 0;
  }
  uint32_t v12 = (_BYTE *)_platform_strchr();
  if (v12) {
    *uint32_t v12 = 0;
  }
  int v13 = (_BYTE *)_platform_strchr();
  if (v13) {
    _BYTE *v13 = 0;
  }
  int v14 = getenv("NLSPATH");
  if (!v14 || (int v15 = v14, issetugid())) {
    int v15 = "/usr/share/nls/%L/%N.cat:/usr/share/nls/%N/%L:/usr/local/share/nls/%L/%N.cat:/usr/local/share/nls/%N/%L";
  }
  uint32_t v16 = strdup(v15);
  __stringp = v16;
  if (!v16)
  {
    int v24 = *__error();
    free(v10);
    *__error() = v24;
    return (nl_catd)-1LL;
  }

  uint32_t v17 = v16;
  while (2)
  {
    socklen_t v18 = strsep(&__stringp, ":");
    if (!v18)
    {
      free(v10);
      free(v17);
      uint64_t v4 = __error();
      int v5 = 2;
      goto LABEL_6;
    }

    uint32_t v19 = v18;
    int v20 = *v18;
    if (*v18)
    {
      uint32_t v21 = v27;
      goto LABEL_38;
    }

    uint32_t v19 = v18 - 1;
    uint32_t v21 = v27;
LABEL_57:
    if (_platform_strlcpy() >= (unint64_t)(int)(v27 - (_DWORD)v21 + 1023))
    {
LABEL_61:
      free(v10);
      free(v17);
      uint64_t v4 = __error();
      int v5 = 63;
      goto LABEL_6;
    }

    for (v21 += _platform_strlen(); ; ++v21)
    {
      int v23 = *++v19;
      int v20 = v23;
      if (!v23) {
        break;
      }
LABEL_38:
      if (v20 == 37)
      {
        int v22 = v19[1];
        if (v22 > 98)
        {
          switch(v22)
          {
            case 'c':
              ++v19;
              goto LABEL_57;
            case 'l':
              ++v19;
              goto LABEL_57;
            case 't':
              ++v19;
              goto LABEL_57;
          }
        }

        else
        {
          switch(v22)
          {
            case '%':
              ++v19;
              break;
            case 'L':
              ++v19;
              goto LABEL_57;
            case 'N':
              ++v19;
              goto LABEL_57;
          }
        }

        LOBYTE(v20) = *v19;
      }

      else if ((unint64_t)(v21 - v27) > 0x3FE)
      {
        goto LABEL_61;
      }

      *uint32_t v21 = v20;
    }

    *uint32_t v21 = 0;
    if (stat(v27, &v25)) {
      continue;
    }
    break;
  }

  free(v10);
  free(v17);
  return (nl_catd)loadCat();
}

uint64_t loadCat()
{
  uint64_t v0 = (FILE **)malloc(0x20uLL);
  if (!v0) {
    return -1LL;
  }
  unint64_t v1 = v0;
  int v2 = open_NOCANCEL();
  if (v2 == -1)
  {
    int v14 = *__error();
LABEL_20:
    free(v1);
LABEL_30:
    *__error() = v14;
    return -1LL;
  }

  unsigned int v3 = fdopen(v2, "r");
  *unint64_t v1 = v3;
  if (!v3)
  {
    int v14 = *__error();
    close_NOCANCEL();
    goto LABEL_20;
  }

  uint64_t v4 = v3;
  if (fread(&__ptr, 0x20uLL, 1uLL, v3) != 1 || __ptr != 0x2A6C75677A616E2ALL)
  {
LABEL_28:
    fclose(v4);
    fprintf(__stderrp, "%s: corrupt file.", "Message Catalog System");
    free(v1);
LABEL_29:
    int v14 = 79;
    goto LABEL_30;
  }

  int v5 = v17;
  if (v17 != 0x1000000)
  {
    fclose(v4);
    free(v1);
    if (v5 == 1) {
      fprintf(__stderrp, "%s: %s is the wrong byte ordering.\n");
    }
    else {
      fprintf(__stderrp, "%s: %s is version %d, we need %d.\n");
    }
    goto LABEL_29;
  }

  if (!v18)
  {
    fclose(v4);
    free(v1);
    fprintf(__stderrp, "%s: %s has %d sets!\n");
    goto LABEL_29;
  }

  int v6 = bswap32(v18);
  *((_DWORD *)v1 + 2) = v6;
  char v7 = (FILE *)malloc(40LL * v6);
  v1[2] = v7;
  if (!v7)
  {
    int v14 = *__error();
    fclose(v4);
    fprintf(__stderrp, "%s: no more memory.", "Message Catalog System");
    goto LABEL_20;
  }

  if (v6 >= 1)
  {
    int v8 = v7;
    int v9 = 0;
    off_t v10 = bswap64(v19);
    while (fseeko(v4, v10, 0) != -1 && fread((char *)v8 + 40 * v9, 0x28uLL, 1uLL, v4) == 1)
    {
      uint32_t v11 = (char *)v8 + 40 * v9;
      int v13 = *((_DWORD *)v11 + 9);
      uint32_t v12 = v11 + 36;
      if (v13) {
        --v9;
      }
      else {
        *uint32_t v12 = 1;
      }
      off_t v10 = bswap64(*((void *)v12 - 4));
      if (++v9 >= v6) {
        return (uint64_t)v1;
      }
    }

    __nls_free_resources((uint64_t)v1, v9);
    goto LABEL_28;
  }

  return (uint64_t)v1;
}

char *__cdecl catgets(nl_catd a1, int a2, int a3, const char *a4)
{
  int size = a1->__size;
  if (size >= 0) {
    int v11 = a1->__size;
  }
  else {
    int v11 = size + 1;
  }
  int v12 = v11 >> 1;
  if (size >= a2) {
    int v13 = a2;
  }
  else {
    int v13 = a1->__size;
  }
  if (size >= a2) {
    int v14 = a2 - 1;
  }
  else {
    int v14 = v12;
  }
  data = a1[1].__data;
  unsigned int v16 = bswap32(data[10 * v14]);
  if (v16 == a2)
  {
LABEL_36:
    int v22 = v14;
    int v23 = (char *)&data[10 * v14];
    int v25 = *((_DWORD *)v23 + 9);
    int v24 = v23 + 36;
    if (v25)
    {
      __int128 v26 = (char *)&data[10 * v14];
      unint64_t v28 = *(void *)(v26 + 20);
      __int128 v27 = (void **)(v26 + 20);
      if (fseeko((FILE *)a1->__data, bswap64(v28), 0) == -1) {
        return (char *)a4;
      }
      size_t v29 = bswap32(data[10 * v22 + 7]);
      int v30 = malloc(v29);
      int *v27 = v30;
      if (!v30) {
        return (char *)a4;
      }
      if (fread(v30, v29, 1uLL, (FILE *)a1->__data) != 1) {
        goto LABEL_77;
      }
      __int128 v31 = (char *)&data[10 * v22];
      unint64_t v33 = *(void *)(v31 + 12);
      int v32 = (void **)(v31 + 12);
      if (fseeko((FILE *)a1->__data, bswap64(v33), 0) == -1
        || (int v34 = (char *)&data[10 * v22],
            unsigned int v35 = *((_DWORD *)v34 + 8),
            uint64_t v55 = (unsigned int *)(v34 + 32),
            int v36 = malloc(16LL * bswap32(v35)),
            (*int v32 = v36) == 0LL))
      {
LABEL_77:
        int v54 = *__error();
LABEL_78:
        free(*v27);
        *__error() = v54;
        return (char *)a4;
      }

      if (v35)
      {
        int v37 = 0;
        while (1)
        {
          int v38 = (char *)*v32;
          int v39 = &v38[16 * v37];
          if (*((_DWORD *)v39 + 3)) {
            --v37;
          }
          else {
            *(void *)(v39 + 4) = (char *)*v27 + bswap64(*(void *)(v39 + 4));
          }
          if (++v37 >= bswap32(*v55)) {
            goto LABEL_49;
          }
        }

        int v54 = *__error();
        free(*v32);
        goto LABEL_78;
      }

int catclose(nl_catd a1)
{
  if ((unint64_t)&a1->__data + 1 > 1)
  {
    fclose((FILE *)a1->__data);
    __nls_free_resources((uint64_t)a1, a1->__size);
    free(a1);
    return 0;
  }

  else
  {
    *__error() = 9;
    return -1;
  }

void __nls_free_resources(uint64_t a1, int a2)
{
  if (a2 >= 1)
  {
    uint64_t v3 = 0LL;
    uint64_t v4 = 40LL * a2;
    do
    {
      uint64_t v5 = *(void *)(a1 + 16) + v3;
      if (!*(_DWORD *)(v5 + 36))
      {
        free(*(void **)(v5 + 20));
        free(*(void **)(v5 + 12));
      }

      v3 += 40LL;
    }

    while (v4 != v3);
  }

  free(*(void **)(a1 + 16));
}

void flockfile(FILE *a1)
{
  int v2 = *__error();
  pthread_mutex_lock((pthread_mutex_t *)((char *)a1->_extra + 8));
  *__error() = v2;
}

int ftrylockfile(FILE *a1)
{
  int v2 = *__error();
  else {
    int v3 = 0;
  }
  *__error() = v2;
  return v3;
}

void funlockfile(FILE *a1)
{
  int v2 = *__error();
  pthread_mutex_unlock((pthread_mutex_t *)((char *)a1->_extra + 8));
  *__error() = v2;
}

int asprintf(char **a1, const char *a2, ...)
{
  uint64_t v3 = __locale_key;
  uint64_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = (_xlocale *)&__global_locale;
  }
  return vasprintf_l(a1, v5, a2, va);
}

int asprintf_l(char **a1, locale_t a2, const char *a3, ...)
{
  return vasprintf_l(a1, a2, a3, va);
}

void clearerr(FILE *a1)
{
  a1->_flags &= 0xFF9Fu;
  funlockfile(a1);
}

uint64_t clearerr_unlocked(uint64_t result)
{
  *(_WORD *)(result + 16) &= 0xFF9Fu;
  return result;
}

int dprintf(int a1, const char *a2, ...)
{
  uint64_t v3 = __locale_key;
  uint64_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = (_xlocale *)&__global_locale;
  }
  return vdprintf_l(a1, v5, a2, va);
}

int dprintf_l(int a1, locale_t a2, const char *a3, ...)
{
  return vdprintf_l(a1, a2, a3, va);
}

int fclose(FILE *a1)
{
  if (off_18C52C3D8) {
    off_18C52C3D8(a1, 152LL);
  }
  pthread_once(&__sdidinit, __sinit);
  if (!a1)
  {
    int v2 = -1;
    int v3 = 14;
LABEL_22:
    *__error() = v3;
    return v2;
  }

  if (!a1->_flags)
  {
    int v2 = -1;
    int v3 = 9;
    goto LABEL_22;
  }

  flockfile(a1);
  int v2 = __sflush((uint64_t)a1);
  if (v2 < 0) {
    int v3 = *__error();
  }
  else {
    int v3 = 0;
  }
  close = a1->_close;
  if (close && (((uint64_t (*)(void *))close)(a1->_cookie) & 0x80000000) != 0)
  {
    int v3 = *__error();
    int v2 = -1;
  }

  if ((a1->_flags & 0x80) != 0) {
    free(a1->_bf._base);
  }
  base = (FILE *)a1->_ub._base;
  if (base)
  {
    if (base != (FILE *)a1->_ubuf) {
      free(base);
    }
    a1->_ub._base = 0LL;
  }

  int v6 = a1->_lb._base;
  if (v6)
  {
    free(v6);
    a1->_lb._base = 0LL;
  }

  a1->_file = -1;
  *(void *)&a1->_r = 0LL;
  funlockfile(a1);
  __sfprelease((uint64_t)a1);
  if (v3) {
    goto LABEL_22;
  }
  return v2;
}

FILE *__cdecl fdopen(int a1, const char *a2)
{
  if (off_18C52C3C8) {
    off_18C52C3C8(a2);
  }
  if (a1 >= 0x8000)
  {
    uint64_t v4 = __error();
    int result = 0LL;
    int v6 = 24;
LABEL_5:
    *uint64_t v4 = v6;
    return result;
  }

  int v7 = __sflags((char *)a2, &v11);
  if (!v7) {
    return 0LL;
  }
  __int16 v8 = v7;
  int v9 = fcntl_NOCANCEL();
  if (v9 < 0) {
    return 0LL;
  }
  char v10 = v9;
  if ((v9 & 3) != 2 && (v9 & 3) != (v11 & 3))
  {
    uint64_t v4 = __error();
    int result = 0LL;
    int v6 = 22;
    goto LABEL_5;
  }

  int result = (FILE *)__sfp(1);
  if (result)
  {
    result->_flags = v8;
    if ((v10 & 8) == 0 && (v11 & 8) != 0) {
      result->_flags = v8 | 0x100;
    }
    result->_file = a1;
    result->_write = (int (__cdecl *)(void *, const char *, int))__swrite;
    result->_read = (int (__cdecl *)(void *, char *, int))__sread;
    result->_seeuint64_t k = (fpos_t (__cdecl *)(void *, fpos_t, int))__sseek;
    result->_cookie = result;
    result->_close = (int (__cdecl *)(void *))__sclose;
  }

  return result;
}

int feof(FILE *a1)
{
  int v2 = ((unsigned __int16)a1->_flags >> 5) & 1;
  funlockfile(a1);
  return v2;
}

uint64_t feof_unlocked(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 16) >> 5) & 1;
}

int ferror(FILE *a1)
{
  int v2 = ((unsigned __int16)a1->_flags >> 6) & 1;
  funlockfile(a1);
  return v2;
}

uint64_t ferror_unlocked(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 16) >> 6) & 1;
}

int fflush(FILE *a1)
{
  if (!a1) {
    return _fwalk((unsigned int (*)(uint64_t))sflush_locked);
  }
  if (off_18C52C3D8) {
    off_18C52C3D8(a1, 152LL);
  }
  flockfile(a1);
  int v2 = __sflush((uint64_t)a1);
  funlockfile(a1);
  return v2;
}

uint64_t sflush_locked(FILE *a1)
{
  uint64_t v2 = __sflush((uint64_t)a1);
  funlockfile(a1);
  return v2;
}

uint64_t __sflush(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    return 0LL;
  }
  __int16 v3 = *(_WORD *)(a1 + 16);
  if ((v3 & 4) != 0)
  {
    if (*(void *)(a1 + 72))
    {
      uint64_t v6 = *(int *)(a1 + 8);
      if ((int)v6 >= 1)
      {
        if (_sseek(a1, -v6, 1LL) == -1)
        {
          if (*__error() == 29) {
            return 0LL;
          }
          else {
            return 0xFFFFFFFFLL;
          }
        }

        else
        {
          int v7 = *(void **)(a1 + 88);
          if (v7)
          {
            *(void *)(a1 + 88) = 0LL;
          }

          uint64_t result = 0LL;
          *(void *)a1 = *(void *)(a1 + 24);
          *(_WORD *)(a1 + 16) &= ~0x20u;
          *(_DWORD *)(a1 + 8) = 0;
          int v9 = *(_OWORD **)(a1 + 104);
          v9[11] = 0u;
          v9[12] = 0u;
          v9[9] = 0u;
          v9[10] = 0u;
          v9[7] = 0u;
          v9[8] = 0u;
          v9[5] = 0u;
          v9[6] = 0u;
        }

        return result;
      }
    }

    return 0LL;
  }

  if ((v3 & 8) == 0) {
    return 0LL;
  }
  uint64_t v4 = (*(_DWORD *)a1 - v1);
  *(void *)a1 = v1;
  int v5 = (v3 & 3) != 0 ? 0 : *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 12) = v5;
  while (1)
  {
    int v10 = _swrite(a1, v1, v4);
    if (v10 <= 0) {
      break;
    }
    v1 += v10;
    BOOL v11 = __OFSUB__((_DWORD)v4, v10);
    uint64_t v4 = (v4 - v10);
  }

  uint64_t v12 = *(void *)a1;
  if (v1 > *(void *)a1)
  {
    _platform_memmove();
    uint64_t v12 = *(void *)a1;
  }

  *(void *)a1 = v12 + v4;
  __int16 v13 = *(_WORD *)(a1 + 16);
  if ((v13 & 2) == 0) {
    *(_DWORD *)(a1 + 12) -= v4;
  }
  *(_WORD *)(a1 + 16) = v13 | 0x40;
  return 0xFFFFFFFFLL;
}

uint64_t __fflush(uint64_t a1)
{
  if (!a1) {
    return _fwalk((unsigned int (*)(uint64_t))sflush_locked);
  }
  if ((*(_WORD *)(a1 + 16) & 0x18) != 0) {
    return __sflush(a1);
  }
  return 0LL;
}

int fgetc(FILE *a1)
{
  int r = a1->_r;
  a1->_int r = r - 1;
  if (r <= 0)
  {
    int v4 = __srget(a1);
  }

  else
  {
    __int16 v3 = a1->_p++;
    int v4 = *v3;
  }

  funlockfile(a1);
  return v4;
}

uint64_t __slbexpand(uint64_t a1, size_t __size)
{
  int v2 = __size;
  if (__size >> 31)
  {
    *__error() = 12;
  }

  else
  {
    int v5 = realloc(*(void **)(a1 + 120), __size);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t result = 0LL;
      *(void *)(a1 + 120) = v6;
      *(_DWORD *)(a1 + 128) = v2;
      return result;
    }
  }

  return 0xFFFFFFFFLL;
}

char *__cdecl fgetln(FILE *a1, size_t *a2)
{
  extra = a1->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0) {
    *((_BYTE *)extra + 72) |= 7u;
  }
  int r = a1->_r;
  if (r <= 0)
  {
    if (__srefill((uint64_t)a1))
    {
      *a2 = 0LL;
LABEL_10:
      funlockfile(a1);
      return 0LL;
    }

    int r = a1->_r;
  }

  p = a1->_p;
  size_t v7 = r;
  uint64_t v8 = _platform_memchr();
  if (v8)
  {
    size_t v9 = v8 + 1 - (void)p;
    *a2 = v9;
    a1->_flags |= 0x2000u;
    a1->_int r = v7 - v9;
    a1->_p = (unsigned __int8 *)(v8 + 1);
    funlockfile(a1);
    return (char *)p;
  }

  if (__slbexpand((uint64_t)a1, v7 + 80))
  {
LABEL_9:
    *a2 = 0LL;
    a1->_flags |= 0x40u;
    goto LABEL_10;
  }

  while (1)
  {
    _platform_memmove();
    BOOL v11 = a1->_p;
    uint64_t v12 = a1->_r;
    uint64_t v13 = _platform_memchr();
    if (v13)
    {
      int v15 = (unsigned __int8 *)(v13 + 1);
      uint64_t v16 = v13 + 1 - (void)v11;
      _platform_memmove();
      a1->_r -= v16;
      a1->_p = v15;
      v7 += v16;
      break;
    }

    int v14 = __slbexpand((uint64_t)a1, v7 + v12 + 80);
    v7 += v12;
    if (v14) {
      goto LABEL_9;
    }
  }

  *a2 = v7;
  funlockfile(a1);
  return (char *)a1->_lb._base;
}

int fgetpos(FILE *a1, fpos_t *a2)
{
  off_t v3 = ftello(a1);
  *a2 = v3;
  if (v3 == -1) {
    return -1;
  }
  else {
    return 0;
  }
}

char *__cdecl fgets(char *a1, int a2, FILE *a3)
{
  if (a2 < 1) {
    return 0LL;
  }
  int v5 = a1;
  if (off_18C52C3D8)
  {
    off_18C52C3D8(a1, a2);
    if (off_18C52C3D8) {
      off_18C52C3D8(a3, 152LL);
    }
  }

  flockfile(a3);
  extra = a3->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0) {
    *((_BYTE *)extra + 72) |= 7u;
  }
  size_t v7 = v5;
  unsigned int v8 = a2 - 1;
  if (a2 == 1) {
    goto LABEL_20;
  }
  size_t v7 = v5;
  while (1)
  {
    unsigned int r = a3->_r;
    if (r) {
      goto LABEL_12;
    }
    unsigned int r = a3->_r;
LABEL_12:
    p = a3->_p;
    if (r >= v8) {
      signed int v11 = v8;
    }
    else {
      signed int v11 = r;
    }
    uint64_t v12 = v11;
    uint64_t v13 = _platform_memchr();
    if (v13)
    {
      uint64_t v14 = v13 + 1 - (void)p;
      a3->_unsigned int r = r - v14;
      a3->_p = (unsigned __int8 *)(v13 + 1);
      _platform_memmove();
      v7 += v14;
      goto LABEL_20;
    }

    a3->_unsigned int r = r - v12;
    a3->_p = &p[v12];
    _platform_memmove();
    v7 += v12;
    v8 -= v12;
    if (!v8) {
      goto LABEL_20;
    }
  }

  if (v7 != v5)
  {
LABEL_20:
    *size_t v7 = 0;
    goto LABEL_21;
  }

  int v5 = 0LL;
LABEL_21:
  funlockfile(a3);
  return v5;
}

wint_t fgetwc(FILE *a1)
{
  extra = a1->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0) {
    *((_BYTE *)extra + 72) = *((_BYTE *)extra + 72) & 0xF8 | 1;
  }
  uint64_t v3 = __locale_key;
  int v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    int v5 = v4;
  }
  else {
    int v5 = &__global_locale;
  }
  wint_t v6 = __fgetwc((uint64_t)a1, (uint64_t)v5);
  funlockfile(a1);
  return v6;
}

uint64_t __fgetwc(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 1328);
  int v5 = *(uint64_t (**)(unsigned int *, void, void, uint64_t, uint64_t))(v4 + 72);
  if (*(_DWORD *)(v4 + 64) == 1)
  {
    wint_t v6 = (unsigned __int8 *)(*(void *)a1)++;
    uint64_t result = *v6;
LABEL_12:
    --*(_DWORD *)(a1 + 8);
  }

  else
  {
    while (1)
    {
      uint64_t result = v5(&v8, *(void *)a1, *(int *)(a1 + 8), *(void *)(a1 + 104) + 80LL, a2);
      if (result != -2) {
        break;
      }
    }

    if (result == -1)
    {
LABEL_13:
      *(_WORD *)(a1 + 16) |= 0x40u;
      *__error() = 92;
      return 0xFFFFFFFFLL;
    }

    if (!result)
    {
      ++*(void *)a1;
      goto LABEL_12;
    }

    *(void *)a1 += result;
    *(_DWORD *)(a1 + 8) -= result;
    return v8;
  }

  return result;
}

wint_t fgetwc_l(FILE *a1, locale_t a2)
{
  extra = a1->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0) {
    *((_BYTE *)extra + 72) = *((_BYTE *)extra + 72) & 0xF8 | 1;
  }
  locale_t v5 = (locale_t)&__global_locale;
  if (a2 != (locale_t)-1LL) {
    locale_t v5 = a2;
  }
  if (a2) {
    locale_t v6 = v5;
  }
  else {
    locale_t v6 = (locale_t)&__c_locale;
  }
  wint_t v7 = __fgetwc((uint64_t)a1, (uint64_t)v6);
  funlockfile(a1);
  return v7;
}

__int32 *__cdecl fgetwln_l(FILE *a1, size_t *a2, locale_t a3)
{
  extra = a1->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0) {
    *((_BYTE *)extra + 72) = *((_BYTE *)extra + 72) & 0xF8 | 1;
  }
  size_t v7 = 0LL;
  do
  {
    int v8 = __fgetwc((uint64_t)a1, (uint64_t)a3);
    if (v8 == -1)
    {
      size_t v10 = v7;
      if (v7) {
        goto LABEL_9;
      }
      goto LABEL_11;
    }

    int v9 = v8;
    size_t v10 = v7 + 1;
    *(_DWORD *)&a1->_lb._base[4 * v7++] = v9;
  }

  while (v9 != 10);
  if (v10)
  {
LABEL_9:
    funlockfile(a1);
    *a2 = v10;
    return (__int32 *)a1->_lb._base;
  }

__int32 *__cdecl fgetwln(FILE *a1, size_t *a2)
{
  uint64_t v2 = __locale_key;
  uint64_t v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = (_xlocale *)&__global_locale;
  }
  return fgetwln_l(a1, a2, v4);
}

__int32 *__cdecl fgetws_l(__int32 *a1, int a2, FILE *a3, locale_t a4)
{
  locale_t v7 = (locale_t)&__global_locale;
  if (a4 != (locale_t)-1LL) {
    locale_t v7 = a4;
  }
  if (a4) {
    locale_t v8 = v7;
  }
  else {
    locale_t v8 = (locale_t)&__c_locale;
  }
  uint64_t v9 = *((void *)v8 + 166);
  size_t v10 = *(uint64_t (**)(__int32 *, unsigned __int8 **, uint64_t, void, char *, locale_t))(v9 + 88);
  flockfile(a3);
  extra = a3->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0) {
    *((_BYTE *)extra + 72) = *((_BYTE *)extra + 72) & 0xF8 | 1;
  }
  if (a2 <= 0)
  {
    a1 = 0LL;
    *__error() = 22;
  }

  else
  {
    if (a3->_r > 0 || !__srefill((uint64_t)a3))
    {
      uint64_t v12 = a1;
      while (1)
      {
        p = a3->_p;
        int v25 = a3->_p;
        uint64_t r = a3->_r;
        uint64_t v15 = _platform_memchr();
        uint64_t v16 = v15 ? v15 - (void)p + 1 : r;
        uint64_t v17 = v10(v12, &v25, v16, (a2 - 1), (char *)a3->_extra + 80, v8);
        if (v17 == -1) {
          break;
        }
        uint64_t v18 = v17;
        int v19 = v25;
        int v20 = a3->_p;
        int v21 = a3->_r;
        if (!v25)
        {
          uint64_t v18 = v17 + 1;
          int v19 = (unsigned __int8 *)(_platform_memchr() + 1);
          int v25 = v19;
        }

        int v22 = v21 + (_DWORD)v20 - (_DWORD)v19;
        a3->_uint64_t r = v22;
        a3->_p = v19;
        a2 -= v18;
        v12 += v18;
        BOOL v23 = a2 < 2 || *(v12 - 1) == 10;
        if (v23 || v22 <= 0 && __srefill((uint64_t)a3))
        {
          if (v12 != a1 && (*(unsigned int (**)(char *, locale_t))(v9 + 80))((char *)a3->_extra + 80, v8))
          {
            *uint64_t v12 = 0;
            goto LABEL_29;
          }

          break;
        }
      }
    }

    a1 = 0LL;
  }

__int32 *__cdecl fgetws(__int32 *a1, int a2, FILE *a3)
{
  uint64_t v3 = __locale_key;
  uint64_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    locale_t v5 = v4;
  }
  else {
    locale_t v5 = (_xlocale *)&__global_locale;
  }
  return fgetws_l(a1, a2, a3, v5);
}

int fileno(FILE *a1)
{
  int file = a1->_file;
  funlockfile(a1);
  return file;
}

uint64_t fileno_unlocked(uint64_t a1)
{
  return *(__int16 *)(a1 + 18);
}

uint64_t __sfp(int a1)
{
  if (a1)
  {
    do
      uint64_t v2 = __ldxr((unint64_t *)&__scounted);
    while (__stxr(v2 + 1, (unint64_t *)&__scounted));
    if (v2 >= sysconf(26))
    {
      do
        unint64_t v7 = __ldxr((unint64_t *)&__scounted);
      while (__stxr(v7 - 1, (unint64_t *)&__scounted));
      uint64_t v4 = __error();
      uint64_t v5 = 0LL;
      int v6 = 24;
      goto LABEL_9;
    }

    if (v2 <= -2)
    {
      do
        unint64_t v3 = __ldxr((unint64_t *)&__scounted);
      while (__stxr(v3 - 1, (unint64_t *)&__scounted));
      uint64_t v4 = __error();
      uint64_t v5 = 0LL;
      int v6 = 84;
LABEL_9:
      *uint64_t v4 = v6;
      return v5;
    }
  }

  pthread_mutex_lock(&filelist_lock);
  locale_t v8 = &__sglue;
  do
  {
    int v9 = *((_DWORD *)v8 + 2);
    if (v9 >= 1)
    {
      uint64_t v5 = v8[2];
      int v10 = v9 + 1;
      while (*(_WORD *)(v5 + 16))
      {
        v5 += 152LL;
        if (--v10 <= 1) {
          goto LABEL_15;
        }
      }

      goto LABEL_18;
    }

void __sinit()
{
  __cleanup = 1;
  __scounted = 3LL;
}

_DWORD *moreglue(int a1)
{
  uint64_t result = malloc(360LL * a1 + 32);
  if (result)
  {
    unint64_t v3 = (unint64_t)(result + 6);
    *(void *)uint64_t result = 0LL;
    result[2] = a1;
    *((void *)result + 2) = v3;
    if (a1 >= 1)
    {
      unint64_t v4 = v3 + 152LL * a1;
      unsigned int v5 = a1 + 1;
      do
      {
        *(void *)(v3 + 144) = 0LL;
        *(_OWORD *)(v3 + 112) = 0uLL;
        *(_OWORD *)(v3 + 128) = 0uLL;
        *(_OWORD *)(v3 + 80) = 0uLL;
        *(_OWORD *)(v3 + 96) = 0uLL;
        *(_OWORD *)(v3 + 48) = 0uLL;
        *(_OWORD *)(v3 + 64) = 0uLL;
        *(_OWORD *)(v3 + 16) = 0uLL;
        *(_OWORD *)(v3 + 32) = 0uLL;
        *(_OWORD *)unint64_t v3 = 0uLL;
        *(void *)(v3 + 104) = v4;
        *(void *)unint64_t v4 = 0LL;
        *(void *)(v4 + 8) = 850045858LL;
        *(void *)(v4 + 64) = 0LL;
        *(_OWORD *)(v4 + 32) = 0uLL;
        *(_OWORD *)(v4 + 48) = 0uLL;
        *(_OWORD *)(v4 + 16) = 0uLL;
        *(_BYTE *)(*(void *)(v3 + 104) + 72LL) &= 0xF8u;
        int v6 = *(_OWORD **)(v3 + 104);
        v6[11] = 0uLL;
        v6[12] = 0uLL;
        v6[9] = 0uLL;
        v6[10] = 0uLL;
        v6[7] = 0uLL;
        _OWORD v6[8] = 0uLL;
        v6[5] = 0uLL;
        v6[6] = 0uLL;
        *(_BYTE *)(*(void *)(v3 + 104) + 72LL) &= ~8u;
        --v5;
        v3 += 152LL;
        v4 += 208LL;
      }

      while (v5 > 1);
    }
  }

  return result;
}

uint64_t __sfprelease(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  char v3 = *(_BYTE *)(v2 + 72);
  if ((v3 & 8) != 0)
  {
    do
      unint64_t v4 = __ldxr((unint64_t *)&__scounted);
    while (__stxr(v4 - 1, (unint64_t *)&__scounted));
    *(_BYTE *)(v2 + 72) = v3 & 0xF7;
    uint64_t v2 = *(void *)(a1 + 104);
  }

  pthread_mutex_destroy((pthread_mutex_t *)(v2 + 8));
  pthread_mutex_lock(&filelist_lock);
  *(_WORD *)(a1 + 16) = 0;
  return pthread_mutex_unlock(&filelist_lock);
}

uint64_t f_prealloc()
{
  uint64_t v0 = &__sglue;
  LODWORD(result) = getdtablesize();
  while (1)
  {
    uint64_t result = (result - *((_DWORD *)v0 + 2));
    uint64_t v0 = (uint64_t *)*v0;
    if (!v0)
    {
      uint64_t result = (uint64_t)moreglue(result);
      if (result)
      {
        uint64_t v2 = (uint64_t *)result;
        pthread_mutex_lock(&filelist_lock);
        *lastglue = (uint64_t)v2;
        lastglue = v2;
        return pthread_mutex_unlock(&filelist_lock);
      }

      return result;
    }
  }

  return result;
}

uint64_t _cleanup()
{
  return _fwalk((unsigned int (*)(uint64_t))__sflush);
}

uint64_t __sflags(char *a1, int *a2)
{
  unint64_t v4 = a1 + 1;
  int v3 = *a1;
  switch(v3)
  {
    case 'a':
      int v5 = 520;
      break;
    case 'r':
      int v6 = 0;
      int v5 = 0;
      uint64_t result = 4LL;
      goto LABEL_8;
    case 'w':
      int v5 = 1536;
      break;
    default:
      uint64_t v12 = __error();
      uint64_t result = 0LL;
      *uint64_t v12 = 22;
      return result;
  }

  int v6 = 1;
  uint64_t result = 8LL;
LABEL_8:
  uint64_t v8 = 1LL;
  if (a1[1] == 98)
  {
    uint64_t v8 = 2LL;
    unint64_t v4 = a1 + 2;
  }

  int v9 = a1[v8];
  if (v9 == 43)
  {
    uint64_t v10 = 1LL;
    if (v4[1] == 98) {
      uint64_t v10 = 2LL;
    }
    int v9 = v4[v10];
    int v6 = 2;
    uint64_t result = 16LL;
  }

  if (v9 == 120) {
    int v11 = v5 | 0x800;
  }
  else {
    int v11 = v5;
  }
  *a2 = v11 | v6;
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  if (off_18C52C3C8)
  {
    off_18C52C3C8(__filename);
    if (off_18C52C3C8) {
      off_18C52C3C8(__mode);
    }
  }

  int v3 = __sflags((char *)__mode, &v8);
  if (!v3) {
    return 0LL;
  }
  __int16 v4 = v3;
  int v5 = (FILE *)__sfp(1);
  if (!v5) {
    return v5;
  }
  unsigned int v6 = open_NOCANCEL();
  if ((v6 & 0x80000000) != 0)
  {
    __sfprelease((uint64_t)v5);
    return 0LL;
  }

  if (v6 < 0x8000)
  {
    v5->_int file = v6;
    v5->_flags = v4;
    v5->_write = (int (__cdecl *)(void *, const char *, int))__swrite;
    v5->_read = (int (__cdecl *)(void *, char *, int))__sread;
    v5->_seeuint64_t k = (fpos_t (__cdecl *)(void *, fpos_t, int))__sseek;
    v5->_cookie = v5;
    v5->_close = (int (__cdecl *)(void *))__sclose;
    if ((v8 & 8) != 0) {
      _sseek((uint64_t)v5, 0LL, 2LL);
    }
  }

  else
  {
    v5->_flags = 0;
    close_NOCANCEL();
    int v5 = 0LL;
    *__error() = 24;
  }

  return v5;
}

int fprintf(FILE *a1, const char *a2, ...)
{
  uint64_t v3 = __locale_key;
  __int16 v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    int v5 = v4;
  }
  else {
    int v5 = (_xlocale *)&__global_locale;
  }
  return vfprintf_l(a1, v5, a2, va);
}

int fprintf_l(FILE *a1, locale_t a2, const char *a3, ...)
{
  return vfprintf_l(a1, a2, a3, va);
}

int fpurge(FILE *a1)
{
  __int16 flags = a1->_flags;
  if (flags)
  {
    base = (FILE *)a1->_ub._base;
    if (base)
    {
      if (base != (FILE *)a1->_ubuf)
      {
        free(base);
        __int16 flags = a1->_flags;
      }

      a1->_ub._base = 0LL;
    }

    int size = 0;
    a1->_p = a1->_bf._base;
    a1->_uint64_t r = 0;
    if ((flags & 3) == 0) {
      int size = a1->_bf._size;
    }
    int v5 = 0;
    a1->_w = size;
  }

  else
  {
    *__error() = 9;
    int v5 = -1;
  }

  funlockfile(a1);
  return v5;
}

int fputc(int a1, FILE *a2)
{
  int w = a2->_w;
  a2->_int w = w - 1;
  int v5 = a1;
  if (w < 1 && (a1 == 10 || w <= a2->_lbfsize))
  {
    int v5 = __swbuf(a1, a2);
  }

  else
  {
    unsigned int v6 = a2->_p++;
    *unsigned int v6 = a1;
  }

  funlockfile(a2);
  return v5;
}

int fputs(const char *a1, FILE *a2)
{
  if (off_18C52C3C8) {
    off_18C52C3C8(a1);
  }
  if (off_18C52C3D8) {
    off_18C52C3D8(a2, 152LL);
  }
  if (a1) {
    __int16 v4 = a1;
  }
  else {
    __int16 v4 = "(null)";
  }
  int v9 = v4;
  int v5 = _platform_strlen();
  uint64_t v10 = v5;
  int v11 = &v9;
  int v12 = 1;
  int v13 = v5;
  flockfile(a2);
  extra = a2->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0) {
    *((_BYTE *)extra + 72) |= 7u;
  }
  int v7 = __sfvwrite((uint64_t)a2, (uint64_t)&v11);
  funlockfile(a2);
  if (v7) {
    return v7;
  }
  else {
    return v10;
  }
}

uint64_t __fputwc(uint64_t a1, FILE *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 1328);
  if ((a1 - 1) <= 0xFE && *(_DWORD *)(v5 + 64) == 1)
  {
    v16[0] = a1;
    uint64_t v8 = 1LL;
  }

  else
  {
    uint64_t v7 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v5 + 96))( v16,  a1,  (uint64_t)a2->_extra + 80,  a3);
    if (!v7) {
      return v4;
    }
    uint64_t v8 = v7;
    if (v7 == -1)
    {
      a2->_flags |= 0x40u;
      return 0xFFFFFFFFLL;
    }
  }

  int v9 = v16;
  do
  {
    int v11 = *v9++;
    int v10 = v11;
    int w = a2->_w;
    a2->_int w = w - 1;
    if (w <= 0 && (v10 != 10 ? (BOOL v13 = w <= a2->_lbfsize) : (BOOL v13 = 1), v13))
    {
      if (__swbuf(v10, a2) == -1) {
        return 0xFFFFFFFFLL;
      }
    }

    else
    {
      uint64_t v14 = a2->_p++;
      *uint64_t v14 = v10;
    }

    --v8;
  }

  while (v8);
  return v4;
}

wint_t fputwc(__int32 a1, FILE *a2)
{
  uint64_t v3 = *(void *)&a1;
  flockfile(a2);
  extra = a2->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0) {
    *((_BYTE *)extra + 72) = *((_BYTE *)extra + 72) & 0xF8 | 1;
  }
  uint64_t v5 = __locale_key;
  unsigned int v6 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = &__global_locale;
  }
  wint_t v8 = __fputwc(v3, a2, (uint64_t)v7);
  funlockfile(a2);
  return v8;
}

wint_t fputwc_l(__int32 a1, FILE *a2, locale_t a3)
{
  uint64_t v5 = *(void *)&a1;
  flockfile(a2);
  extra = a2->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0) {
    *((_BYTE *)extra + 72) = *((_BYTE *)extra + 72) & 0xF8 | 1;
  }
  locale_t v7 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1LL) {
    locale_t v7 = a3;
  }
  if (a3) {
    locale_t v8 = v7;
  }
  else {
    locale_t v8 = (locale_t)&__c_locale;
  }
  wint_t v9 = __fputwc(v5, a2, (uint64_t)v8);
  funlockfile(a2);
  return v9;
}

int fputws_l(const __int32 *a1, FILE *a2, locale_t a3)
{
  int v11 = a1;
  locale_t v4 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1LL) {
    locale_t v4 = a3;
  }
  if (a3) {
    locale_t v5 = v4;
  }
  else {
    locale_t v5 = (locale_t)&__c_locale;
  }
  flockfile(a2);
  extra = a2->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0) {
    *((_BYTE *)extra + 72) = *((_BYTE *)extra + 72) & 0xF8 | 1;
  }
  if ((a2->_flags & 8) != 0 && ((a2->_flags & 0x200) != 0 || a2->_bf._base) || !__swsetup((uint64_t)a2))
  {
    BOOL v13 = v12;
    int v14 = 1;
    v12[0] = v16;
    while (1)
    {
      uint64_t v10 = v6(v16, &v11, -1LL, 1024LL, (char *)a2->_extra + 80, v5);
      if (v10 == -1) {
        break;
      }
      int v15 = v10;
      v12[1] = (int)v10;
      if (!v11)
      {
        int v8 = 0;
        goto LABEL_13;
      }
    }
  }

  int v8 = -1;
LABEL_13:
  funlockfile(a2);
  return v8;
}

int fputws(const __int32 *a1, FILE *a2)
{
  uint64_t v2 = __locale_key;
  uint64_t v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    locale_t v4 = v3;
  }
  else {
    locale_t v4 = (_xlocale *)&__global_locale;
  }
  return fputws_l(a1, a2, v4);
}

uint64_t strtonum(const char *__numstr, uint64_t __minval, uint64_t __maxval, const char **__errstrp)
{
  v15[0] = xmmword_18965D0B0;
  v15[1] = *(_OWORD *)&off_18965D0C0;
  v15[2] = xmmword_18965D0D0;
  v15[3] = *(_OWORD *)&off_18965D0E0;
  DWORD2(v15[0]) = *__error();
  *__error() = 0;
  if (__minval > __maxval
    || (uint64_t v8 = strtoll(__numstr, &__endptr, 10), *__error() == 22)
    || __endptr == __numstr
    || *__endptr)
  {
    uint64_t v9 = 0LL;
    uint64_t v10 = 1LL;
    goto LABEL_6;
  }

  if (v8 != 0x8000000000000000LL)
  {
    if (v8 < __minval)
    {
      uint64_t v9 = 0LL;
      uint64_t v10 = 2LL;
      goto LABEL_6;
    }

    if (v8 == 0x7FFFFFFFFFFFFFFFLL)
    {
      if (*__error() != 34)
      {
        uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
        if (__maxval == 0x7FFFFFFFFFFFFFFFLL)
        {
          uint64_t v10 = 0LL;
          goto LABEL_6;
        }
      }

      goto LABEL_20;
    }

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  if (off_18C52C3D8) {
    off_18C52C3D8(__stream, 152LL);
  }
  flockfile(__stream);
  size_t v8 = __fread((uint64_t)__ptr, __size, __nitems, (uint64_t)__stream);
  funlockfile(__stream);
  return v8;
}

unint64_t __fread(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1;
  uint64_t v8 = a3 * a2;
  unint64_t v9 = a3 * a2;
  if (off_18C52C3D8) {
    off_18C52C3D8(a1, a3 * a2);
  }
  if (!v9) {
    return 0LL;
  }
  uint64_t v10 = *(void *)(a4 + 104);
  if ((*(_BYTE *)(v10 + 72) & 7) == 0) {
    *(_BYTE *)(v10 + 72) |= 7u;
  }
  uint64_t v24 = v8;
  uint64_t v25 = a3;
  if ((*(_DWORD *)(a4 + 8) & 0x80000000) != 0) {
    *(_DWORD *)(a4 + 8) = 0;
  }
  int v11 = (__int128 *)(a4 + 24);
  while (2)
  {
    if (v9 >> 31) {
      int v12 = 2147482624;
    }
    else {
      int v12 = v9;
    }
    int v13 = v12;
    uint64_t v14 = v7;
    while (1)
    {
      uint64_t v15 = *(int *)(a4 + 8);
      uint64_t v16 = *(void *)a4;
      _platform_memmove();
      *(void *)a4 = v16 + v15;
      v14 += v15;
      v13 -= v15;
      int v17 = __srefill0(a4);
      if (v17 > 0) {
        break;
      }
      if (v17)
      {
LABEL_26:
        if (v13) {
          return (v24 - v9 + v12 - v13) / a2;
        }
        goto LABEL_30;
      }
    }

    if ((*(_WORD *)(a4 + 16) & 0x82) != 0 && v13 > *(_DWORD *)(a4 + 32))
    {
      __int128 v26 = *v11;
      *(void *)(a4 + 24) = v14;
      *(_DWORD *)(a4 + 32) = v13;
      if (v13 < 1)
      {
LABEL_23:
        *int v11 = v26;
        int v21 = v13 - (v13 - 1) / *(_DWORD *)(a4 + 32) * *(_DWORD *)(a4 + 32);
        _platform_memmove();
        *(void *)a4 = *(void *)(a4 + 24) + v21;
        *(_DWORD *)(a4 + 8) = 0;
      }

      else
      {
        while (!__srefill1(a4))
        {
          uint64_t v18 = *(int *)(a4 + 8);
          *(void *)(a4 + 24) += v18;
          int v19 = *(_DWORD *)(a4 + 32);
          BOOL v20 = __OFSUB__(v19, (_DWORD)v18);
          LODWORD(v18) = v19 - v18;
          *(_DWORD *)(a4 + 32) = v18;
        }

        int v13 = *(_DWORD *)(a4 + 32);
        *int v11 = v26;
        *(void *)a4 = *(void *)(a4 + 24);
        if (v13) {
          return (v24 - v9 + v12 - v13) / a2;
        }
      }
    }

    else
    {
      while (1)
      {
        uint64_t v22 = *(int *)(a4 + 8);
        _platform_memmove();
        *(void *)a4 += v22;
        v14 += v22;
        v13 -= v22;
      }

      _platform_memmove();
      *(_DWORD *)(a4 + 8) -= v13;
      *(void *)a4 += v13;
    }

FILE *__cdecl freopen(const char *a1, const char *a2, FILE *a3)
{
  unsigned int v6 = &libc_hooks;
  if (off_18C52C3C8)
  {
    off_18C52C3C8(a1);
    if (off_18C52C3C8) {
      off_18C52C3C8(a2);
    }
  }

  if (off_18C52C3D8) {
    off_18C52C3D8(a3, 152LL);
  }
  int v7 = __sflags((char *)a2, &v21);
  if (!v7)
  {
    int v10 = *__error();
    fclose(a3);
LABEL_14:
    a3 = 0LL;
    *__error() = v10;
    return a3;
  }

  __int16 v8 = v7;
  pthread_once(&__sdidinit, __sinit);
  flockfile(a3);
  if (a1)
  {
    if (a3->_flags)
    {
      if ((a3->_flags & 8) != 0) {
        __sflush((uint64_t)a3);
      }
      close = a3->_close;
      if (close) {
        ((void (*)(void *))close)(a3->_cookie);
      }
    }

    else
    {
      a3->___int16 flags = 32;
    }

    unsigned int file = open_NOCANCEL();
    LODWORD(v6) = *__error();
    goto LABEL_31;
  }

  if (!a3->_flags)
  {
    funlockfile(a3);
    uint64_t v18 = __error();
    a3 = 0LL;
    int v19 = 22;
    goto LABEL_49;
  }

  int v11 = fcntl_NOCANCEL();
  if (v11 < 0) {
    goto LABEL_47;
  }
  int v12 = v11;
  if ((v11 & 3) != 2 && (v11 & 3) != (v21 & 3))
  {
    fclose(a3);
    funlockfile(a3);
    uint64_t v18 = __error();
    a3 = 0LL;
    int v19 = 9;
    goto LABEL_49;
  }

  if ((a3->_flags & 8) != 0) {
    __sflush((uint64_t)a3);
  }
  __int16 v13 = v21;
  if (((v21 ^ v12) & 8) == 0) {
    goto LABEL_24;
  }
  if ((fcntl_NOCANCEL() & 0x80000000) != 0)
  {
LABEL_47:
    int v10 = *__error();
    fclose(a3);
    funlockfile(a3);
    goto LABEL_14;
  }

  __int16 v13 = v21;
LABEL_24:
  if ((v13 & 0x400) != 0)
  {
    ftruncate(a3->_file, 0LL);
    LOBYTE(v13) = v21;
  }

  if ((v13 & 8) == 0) {
    _sseek((uint64_t)a3, 0LL, 0LL);
  }
  unsigned int file = a3->_file;
LABEL_31:
  if ((a3->_flags & 0x80) != 0) {
    free(a3->_bf._base);
  }
  a3->_bf._base = 0LL;
  a3->_bf._int size = 0;
  a3->_lbfint size = 0;
  a3->_p = 0LL;
  *(void *)&a3->_uint64_t r = 0LL;
  base = (FILE *)a3->_ub._base;
  if (base)
  {
    if (base != (FILE *)a3->_ubuf) {
      free(base);
    }
    a3->_ub._base = 0LL;
  }

  a3->_ub._int size = 0;
  uint64_t v16 = a3->_lb._base;
  if (v16)
  {
    free(v16);
    a3->_lb._base = 0LL;
  }

  a3->_lb._int size = 0;
  *((_BYTE *)a3->_extra + 72) &= 0xF8u;
  extra = a3->_extra;
  *((_OWORD *)extra + 11) = 0u;
  *((_OWORD *)extra + 12) = 0u;
  *((_OWORD *)extra + 9) = 0u;
  *((_OWORD *)extra + 10) = 0u;
  *((_OWORD *)extra + 7) = 0u;
  *((_OWORD *)extra + 8) = 0u;
  *((_OWORD *)extra + 5) = 0u;
  *((_OWORD *)extra + 6) = 0u;
  if ((file & 0x80000000) != 0)
  {
    funlockfile(a3);
    __sfprelease((uint64_t)a3);
    a3 = 0LL;
    *__error() = (int)v6;
  }

  else
  {
    if (file >= 0x8000)
    {
      funlockfile(a3);
      __sfprelease((uint64_t)a3);
      uint64_t v18 = __error();
      a3 = 0LL;
      int v19 = 24;
LABEL_49:
      *uint64_t v18 = v19;
      return a3;
    }

    a3->___int16 flags = v8;
    a3->_unsigned int file = file;
    a3->_write = (int (__cdecl *)(void *, const char *, int))__swrite;
    a3->_read = (int (__cdecl *)(void *, char *, int))__sread;
    a3->_seeuint64_t k = (fpos_t (__cdecl *)(void *, fpos_t, int))__sseek;
    a3->_cookie = a3;
    a3->_close = (int (__cdecl *)(void *))__sclose;
    if ((v21 & 8) != 0) {
      _sseek((uint64_t)a3, 0LL, 2LL);
    }
    funlockfile(a3);
  }

  return a3;
}

int fscanf(FILE *a1, const char *a2, ...)
{
  if (off_18C52C3D8) {
    off_18C52C3D8(a1, 152LL);
  }
  flockfile(a1);
  uint64_t v4 = __locale_key;
  locale_t v5 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
  if (v5) {
    unsigned int v6 = v5;
  }
  else {
    unsigned int v6 = (_xlocale *)&__global_locale;
  }
  int v7 = __svfscanf_l((uint64_t *)a1, v6, (unsigned __int8 *)a2, (wint_t **)va);
  funlockfile(a1);
  return v7;
}

int fscanf_l(FILE *a1, locale_t a2, const char *a3, ...)
{
  if (off_18C52C3D8) {
    off_18C52C3D8(a1, 152LL);
  }
  locale_t v6 = (locale_t)&__global_locale;
  if (a2 != (locale_t)-1LL) {
    locale_t v6 = a2;
  }
  if (a2) {
    int v7 = v6;
  }
  else {
    int v7 = (_xlocale *)&__c_locale;
  }
  flockfile(a1);
  int v8 = __svfscanf_l((uint64_t *)a1, v7, (unsigned __int8 *)a3, (wint_t **)va);
  funlockfile(a1);
  return v8;
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)&a3;
  int v6 = *__error();
  pthread_once(&__sdidinit, __sinit);
  flockfile(a1);
  _fseeko((uint64_t)a1, a2, v3);
  int v8 = v7;
  funlockfile(a1);
  if (!v8) {
    *__error() = v6;
  }
  return v8;
}

double _fseeko(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(off_t (**)(uint64_t, off_t, int))(a1 + 72);
  if (!v3) {
    goto LABEL_11;
  }
  uint64_t v4 = a3;
  uint64_t v5 = a2;
  if (!(_DWORD)a3)
  {
    if (a2 < 0) {
      goto LABEL_36;
    }
    goto LABEL_13;
  }

  if ((_DWORD)a3 == 2)
  {
LABEL_13:
    unint64_t v28 = 0LL;
    int v8 = 1;
    goto LABEL_14;
  }

  if ((_DWORD)a3 != 1) {
    goto LABEL_36;
  }
  if ((v28 & 0x8000000000000000LL) != 0)
  {
LABEL_11:
    unint64_t v9 = __error();
    int v10 = 29;
LABEL_37:
    *unint64_t v9 = v10;
    return result;
  }

  if (v5 >= 1 && v28 > (v5 ^ 0x7FFFFFFFFFFFFFFFuLL))
  {
LABEL_29:
    unint64_t v9 = __error();
    int v10 = 84;
    goto LABEL_37;
  }

  v5 += v28;
  if (v5 < 0) {
    goto LABEL_36;
  }
  uint64_t v4 = 0LL;
  int v8 = 0;
LABEL_14:
  if (!*(void *)(a1 + 24)) {
    __smakebuf(a1);
  }
  __int16 v11 = *(_WORD *)(a1 + 16);
  if ((v11 & 0x81A) != 0) {
    goto LABEL_57;
  }
  if ((*(_WORD *)(a1 + 16) & 0x400) == 0)
  {
    if (fstat(*(unsigned __int16 *)(a1 + 18), &v27))
    {
      __int16 v11 = *(_WORD *)(a1 + 16);
LABEL_19:
      *(_WORD *)(a1 + 16) = v11 | 0x800;
      goto LABEL_57;
    }

    __int16 v11 = *(_WORD *)(a1 + 16);
    if ((v27.st_mode & 0xF000) != 0x8000) {
      goto LABEL_19;
    }
    *(_DWORD *)(a1 + 136) = v27.st_blksize;
    *(_WORD *)(a1 + 16) = v11 | 0x400;
  }

  uint64_t v12 = v5;
  if ((_DWORD)v4)
  {
    if (v5 >= 1 && v27.st_size > (v5 ^ 0x7FFFFFFFFFFFFFFFLL)) {
      goto LABEL_29;
    }
    uint64_t v12 = v27.st_size + v5;
    if (v27.st_size + v5 < 0)
    {
LABEL_36:
      unint64_t v9 = __error();
      int v10 = 22;
      goto LABEL_37;
    }
  }

  if (!v8 || !_ftello(a1, (int64_t *)&v28))
  {
    __int16 v13 = *(_WORD *)(a1 + 16);
    if ((v13 & 0x2000) == 0)
    {
      uint64_t v14 = *(void **)(a1 + 88);
      uint64_t v15 = *(void *)(a1 + 24);
      if (v14)
      {
        uint64_t v16 = **(void **)(a1 + 104) - v15;
        int64_t v17 = v28 + *(int *)(a1 + 8) - v16;
        uint64_t v18 = (int *)(a1 + 112);
      }

      else
      {
        uint64_t v16 = *(void *)a1 - v15;
        int64_t v17 = v28 - v16;
        uint64_t v18 = (int *)(a1 + 8);
      }

      uint64_t v19 = *v18;
      unint64_t v28 = v17;
      uint64_t v20 = v12 - v17;
      if (v12 >= v17)
      {
        uint64_t v21 = v16 + v19;
        if (v12 < (unint64_t)(v17 + v21))
        {
          *(void *)a1 = v15 + v20;
          *(_DWORD *)(a1 + 8) = v21 - v20;
          if (v14)
          {
            if (v14 != (void *)(a1 + 116))
            {
              free(v14);
              __int16 v13 = *(_WORD *)(a1 + 16);
            }

            *(void *)(a1 + 88) = 0LL;
          }

          goto LABEL_54;
        }
      }
    }

    unint64_t v28 = v12 & -*(_DWORD *)(a1 + 136);
    if (_sseek(a1, v28, 0LL) == -1) {
      goto LABEL_57;
    }
    *(_DWORD *)(a1 + 8) = 0;
    *(void *)a1 = *(void *)(a1 + 24);
    uint64_t v22 = *(void **)(a1 + 88);
    if (v22)
    {
      *(void *)(a1 + 88) = 0LL;
    }

    unint64_t v23 = v12 - v28;
    if (!v23)
    {
LABEL_53:
      __int16 v13 = *(_WORD *)(a1 + 16);
LABEL_54:
      *(_WORD *)(a1 + 16) = v13 & 0xFFDF;
LABEL_64:
      __int128 v26 = *(_OWORD **)(a1 + 104);
      double result = 0.0;
      v26[11] = 0u;
      _BYTE v26[12] = 0u;
      v26[9] = 0u;
      v26[10] = 0u;
      v26[7] = 0u;
      v26[8] = 0u;
      v26[5] = 0u;
      v26[6] = 0u;
      return result;
    }

    if (!__srefill(a1))
    {
      unint64_t v24 = *(int *)(a1 + 8);
      if (v23 <= v24)
      {
        *(void *)a1 += v23;
        *(_DWORD *)(a1 + 8) = v24 - v23;
        goto LABEL_53;
      }
    }
  }

LABEL_57:
  if (!__sflush(a1) && _sseek(a1, v5, v4) != -1)
  {
    uint64_t v25 = *(void **)(a1 + 88);
    if (v25)
    {
      *(void *)(a1 + 88) = 0LL;
    }

    *(void *)a1 = *(void *)(a1 + 24);
    *(_WORD *)(a1 + 16) &= ~0x20u;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_64;
  }

  return result;
}

int fseeko(FILE *__stream, off_t a2, int __whence)
{
  uint64_t v3 = *(void *)&__whence;
  int v6 = *__error();
  pthread_once(&__sdidinit, __sinit);
  flockfile(__stream);
  _fseeko((uint64_t)__stream, a2, v3);
  int v8 = v7;
  funlockfile(__stream);
  if (!v8) {
    *__error() = v6;
  }
  return v8;
}

int fsetpos(FILE *a1, const fpos_t *a2)
{
  return fseeko(a1, *a2, 0);
}

off_t ftello(FILE *__stream)
{
  int v2 = _ftello((uint64_t)__stream, &v4);
  funlockfile(__stream);
  if (v2) {
    return -1LL;
  }
  off_t result = v4;
  if (v4 < 0)
  {
    *__error() = 29;
    return -1LL;
  }

  return result;
}

uint64_t _ftello(uint64_t a1, int64_t *a2)
{
  if (*(void *)(a1 + 72))
  {
    if (__ftell_conformance_fix)
    {
      if ((*(_WORD *)(a1 + 16) & 0xC) == 8
        && *(void *)a1
        && (*(_WORD *)(a1 + 16) & 0x100) != 0
        && (uint64_t)(*(void *)a1 - *(void *)(a1 + 24)) >= 1)
      {
        int64_t v4 = _sseek(a1, 0LL, 2LL);
        if (v4 == -1) {
          return 1LL;
        }
LABEL_18:
        __int16 v8 = *(_WORD *)(a1 + 16);
        if ((v8 & 4) != 0)
        {
          uint64_t v10 = *(void *)(a1 + 88);
          uint64_t v11 = 112LL;
          if (!v10) {
            uint64_t v11 = 8LL;
          }
          v4 -= *(int *)(a1 + v11);
          if (v4 < 0)
          {
            *(_WORD *)(a1 + 16) = v8 | 0x40;
            uint64_t v5 = __error();
            int v6 = 5;
            goto LABEL_10;
          }

          if (v10) {
            v4 -= *(int *)(a1 + 8);
          }
        }

        else if ((v8 & 8) != 0)
        {
          if (*(void *)a1)
          {
            uint64_t v9 = *(void *)a1 - *(void *)(a1 + 24);
            if (!__ftell_conformance_fix || v9)
            {
              if (v4 > (v9 ^ 0x7FFFFFFFFFFFFFFFuLL))
              {
                uint64_t v5 = __error();
                int v6 = 84;
                goto LABEL_10;
              }

              v4 += v9;
            }
          }
        }

        uint64_t v7 = 0LL;
        *a2 = v4;
        return v7;
      }

      if ((*(_WORD *)(a1 + 16) & 0x1000) == 0)
      {
LABEL_12:
        uint64_t v7 = 1LL;
        int64_t v4 = _sseek(a1, 0LL, 1LL);
        if (v4 == -1) {
          return v7;
        }
        goto LABEL_18;
      }
    }

    else
    {
      if ((*(_WORD *)(a1 + 16) & 0x1000) == 0) {
        goto LABEL_12;
      }
    }

    int64_t v4 = *(void *)(a1 + 144);
    goto LABEL_18;
  }

  uint64_t v5 = __error();
  int v6 = 29;
LABEL_10:
  int *v5 = v6;
  return 1LL;
}

FILE *__cdecl funopen( const void *a1, int (__cdecl *a2)(void *, char *, int), int (__cdecl *a3)(void *, const char *, int), fpos_t (__cdecl *a4)(void *, fpos_t, int), int (__cdecl *a5)(void *))
{
  if (a2)
  {
    if (a3) {
      __int16 v10 = 16;
    }
    else {
      __int16 v10 = 4;
    }
  }

  else
  {
    if (!a3)
    {
      uint64_t v12 = __error();
      off_t result = 0LL;
      *uint64_t v12 = 22;
      return result;
    }

    __int16 v10 = 8;
  }

  off_t result = (FILE *)__sfp(0);
  if (result)
  {
    result->___int16 flags = v10;
    result->_unsigned int file = -1;
    result->_seeuint64_t k = a4;
    result->_write = a3;
    result->_close = a5;
    result->_read = a2;
    result->_cookie = (void *)a1;
  }

  return result;
}

uint64_t __sfvwrite(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)(a2 + 12)) {
    return 0LL;
  }
  __int16 v4 = *(_WORD *)(a1 + 16);
  if ((v4 & 8) != 0 && ((*(_WORD *)(a1 + 16) & 0x200) != 0 || *(void *)(a1 + 24))) {
    goto LABEL_7;
  }
  if (!__swsetup(a1))
  {
    __int16 v4 = *(_WORD *)(a1 + 16);
LABEL_7:
    uint64_t v6 = **(void **)a2;
    unint64_t v5 = *(void *)(*(void *)a2 + 8LL);
    uint64_t v7 = *(void *)a2 + 16LL;
    if ((v4 & 2) == 0)
    {
      if ((v4 & 1) == 0)
      {
        while (1)
        {
          if (!v5)
          {
            do
            {
              unint64_t v5 = *(void *)(v7 + 8);
              v7 += 16LL;
            }

            while (!v5);
            uint64_t v6 = *(void *)(v7 - 16);
          }

          int v8 = *(unsigned __int16 *)(a1 + 16);
          int v9 = *(_DWORD *)(a1 + 12);
          if ((~v8 & 0x4200) == 0 && v5 > v9)
          {
            uint64_t v11 = *(void **)(a1 + 24);
            uint64_t v12 = *(void *)a1 - (void)v11;
            *(_DWORD *)(a1 + 12) = v5 + 128;
            *(_DWORD *)(a1 + 32) = v12 + v5 + 128;
            __int16 v13 = (char *)reallocf(v11, (int)v12 + (int)v5 + 129);
            *(void *)(a1 + 24) = v13;
            if (!v13) {
              goto LABEL_76;
            }
            *(void *)a1 = &v13[v12];
            int v9 = *(_DWORD *)(a1 + 12);
            if ((*(_WORD *)(a1 + 16) & 0x200) != 0)
            {
LABEL_23:
              if (v5 >= v9) {
                uint64_t v14 = v9;
              }
              else {
                uint64_t v14 = v5;
              }
              if ((int)v14 < 1)
              {
                int v9 = v5;
                goto LABEL_38;
              }

              _platform_memmove();
              uint64_t v15 = v14;
              goto LABEL_30;
            }
          }

          else if ((v8 & 0x200) != 0)
          {
            goto LABEL_23;
          }

          if (*(void *)a1 > *(void *)(a1 + 24) && v5 > v9)
          {
            _platform_memmove();
            *(void *)a1 += v9;
            goto LABEL_38;
          }

          unint64_t v16 = *(int *)(a1 + 32);
          if (v5 < v16)
          {
            uint64_t v15 = (int)v5;
            _platform_memmove();
            LODWORD(v14) = v5;
LABEL_30:
            int v9 = v5;
            *(_DWORD *)(a1 + 12) -= v14;
            *(void *)a1 += v15;
            goto LABEL_38;
          }

          if ((_DWORD)v16)
          {
            unint64_t v17 = v5 / v16 * v16;
            if (v17 >= 0x7FFFFFFF) {
              uint64_t v18 = 0x7FFFFFFFLL;
            }
            else {
              uint64_t v18 = v17;
            }
          }

          else
          {
            uint64_t v18 = 0LL;
          }

          int v9 = _swrite(a1, v6, v18);
          if (v9 < 1) {
            goto LABEL_76;
          }
LABEL_38:
          v6 += v9;
          v5 -= v9;
          int v19 = *(_DWORD *)(a2 + 12) - v9;
          *(_DWORD *)(a2 + 12) = v19;
          if (!v19) {
            return 0LL;
          }
        }
      }

      int v23 = 0;
      int v24 = 0;
      while (1)
      {
        if (v5)
        {
          if (v23) {
            goto LABEL_58;
          }
        }

        else
        {
          do
          {
            unint64_t v5 = *(void *)(v7 + 8);
            v7 += 16LL;
          }

          while (!v5);
          uint64_t v6 = *(void *)(v7 - 16);
        }

        uint64_t v25 = _platform_memchr();
        if (v25) {
          int v24 = v25 - v6 + 1;
        }
        else {
          int v24 = v5 + 1;
        }
LABEL_58:
        if (v5 >= v24) {
          int v26 = v24;
        }
        else {
          int v26 = v5;
        }
        uint64_t v27 = *(int *)(a1 + 32);
        uint64_t v28 = v27 + *(int *)(a1 + 12);
        if (*(void *)a1 > *(void *)(a1 + 24) && (int)v28 < v26)
        {
          _platform_memmove();
          *(void *)a1 += v28;
        }

        else if ((int)v27 <= v26)
        {
          LODWORD(v28) = _swrite(a1, v6, v27);
        }

        else
        {
          _platform_memmove();
          *(_DWORD *)(a1 + 12) -= v26;
          *(void *)a1 += v26;
          LODWORD(v28) = v26;
        }

        v24 -= v28;
        if (v24)
        {
          int v23 = 1;
        }

        else
        {
          int v23 = 0;
        }

        v6 += (int)v28;
        v5 -= (int)v28;
        int v30 = *(_DWORD *)(a2 + 12) - v28;
        *(_DWORD *)(a2 + 12) = v30;
        if (!v30) {
          return 0LL;
        }
      }
    }

    while (1)
    {
      if (!v5)
      {
        do
        {
          unint64_t v5 = *(void *)(v7 + 8);
          v7 += 16LL;
        }

        while (!v5);
        uint64_t v6 = *(void *)(v7 - 16);
      }

      uint64_t v20 = v5 >= 0x7FFFFFFF ? 0x7FFFFFFFLL : v5;
      int v21 = _swrite(a1, v6, v20);
      if (v21 < 1) {
        break;
      }
      v6 += v21;
      v5 -= v21;
      int v22 = *(_DWORD *)(a2 + 12) - v21;
      *(_DWORD *)(a2 + 12) = v22;
      if (!v22) {
        return 0LL;
      }
    }

uint64_t _fwalk(unsigned int (*a1)(uint64_t))
{
  uint64_t v2 = 0LL;
  uint64_t v3 = &__sglue;
  do
  {
    int v4 = *((_DWORD *)v3 + 2);
    if (v4 >= 1)
    {
      uint64_t v5 = v3[2];
      unsigned int v6 = v4 + 1;
      do
      {
        v5 += 152LL;
        --v6;
      }

      while (v6 > 1);
    }

    uint64_t v3 = (uint64_t *)*v3;
  }

  while (v3);
  return v2;
}

int fwide(FILE *a1, int a2)
{
  if (a2)
  {
    extra = a1->_extra;
    if ((*((_BYTE *)extra + 72) & 7) == 0)
    {
      if (a2 >= 1) {
        char v5 = 1;
      }
      else {
        char v5 = 7;
      }
      *((_BYTE *)extra + 72) = *((_BYTE *)extra + 72) & 0xF8 | v5;
    }
  }

  int v6 = *((unsigned __int8 *)a1->_extra + 72) << 29 >> 29;
  funlockfile(a1);
  return v6;
}

int fwprintf(FILE *a1, const __int32 *a2, ...)
{
  uint64_t v3 = __locale_key;
  int v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    char v5 = v4;
  }
  else {
    char v5 = (_xlocale *)&__global_locale;
  }
  return vfwprintf_l(a1, v5, a2, va);
}

int fwprintf_l(FILE *a1, locale_t a2, const __int32 *a3, ...)
{
  return vfwprintf_l(a1, a2, a3, va);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  size_t v4 = __nitems * __size;
  if (!(__nitems * __size)) {
    return 0LL;
  }
  size_t v6 = __nitems;
  uint64_t v15 = v14;
  int v16 = 1;
  if (off_18C52C3D8) {
    off_18C52C3D8(__stream, 152LL);
  }
  flockfile(__stream);
  extra = __stream->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0) {
    *((_BYTE *)extra + 72) |= 7u;
  }
  size_t v10 = v4;
  while (1)
  {
    int v11 = v10 >> 31 ? 2147482624 : v10;
    uint64_t v12 = v11;
    v14[0] = __ptr;
    v14[1] = v11;
    int v17 = v11;
    if (*((void *)&libc_hooks + 1)) {
      (*((void (**)(const void *, void))&libc_hooks + 1))(__ptr, v11);
    }
    uint64_t __ptr = (char *)__ptr + v12;
    v10 -= v12;
    if (!v10) {
      goto LABEL_17;
    }
  }

  size_t v6 = (v4 + v12 - (v10 + v17)) / __size;
LABEL_17:
  funlockfile(__stream);
  return v6;
}

int fwscanf(FILE *a1, const __int32 *a2, ...)
{
  uint64_t v3 = __locale_key;
  size_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    char v5 = v4;
  }
  else {
    char v5 = (_xlocale *)&__global_locale;
  }
  return vfwscanf_l(a1, v5, a2, va);
}

int fwscanf_l(FILE *a1, locale_t a2, const __int32 *a3, ...)
{
  return vfwscanf_l(a1, a2, a3, va);
}

int getc(FILE *a1)
{
  int r = a1->_r;
  a1->_int r = r - 1;
  if (r <= 0)
  {
    int v4 = __srget(a1);
  }

  else
  {
    uint64_t v3 = a1->_p++;
    int v4 = *v3;
  }

  funlockfile(a1);
  return v4;
}

int getc_unlocked(FILE *a1)
{
  int r = a1->_r;
  a1->_int r = r - 1;
  if (r <= 0) {
    return __srget(a1);
  }
  uint64_t v2 = a1->_p++;
  return *v2;
}

int getchar(void)
{
  uint64_t v0 = __stdinp;
  int r = __stdinp->_r;
  __stdinp->_int r = r - 1;
  if (r <= 0)
  {
    int v3 = __srget(v0);
  }

  else
  {
    uint64_t v2 = v0->_p++;
    int v3 = *v2;
  }

  funlockfile(__stdinp);
  return v3;
}

int getchar_unlocked(void)
{
  uint64_t v0 = __stdinp;
  int r = __stdinp->_r;
  __stdinp->_int r = r - 1;
  if (r <= 0) {
    return __srget(v0);
  }
  uint64_t v2 = v0->_p++;
  return *v2;
}

ssize_t getdelim(char **__linep, size_t *__linecapp, int __delimiter, FILE *__stream)
{
  extra = __stream->_extra;
  if ((*((_BYTE *)extra + 72) & 7) != 0)
  {
    if (!__linep) {
      goto LABEL_15;
    }
  }

  else
  {
    *((_BYTE *)extra + 72) |= 7u;
    if (!__linep)
    {
LABEL_15:
      *__error() = 22;
      goto LABEL_16;
    }
  }

  if (!__linecapp) {
    goto LABEL_15;
  }
  if (!*__linep) {
    *__linecapp = 0LL;
  }
  if (__stream->_r <= 0 && __srefill((uint64_t)__stream))
  {
    if ((__stream->_flags & 0x40) == 0)
    {
      if (!*__linecapp)
      {
        __int16 v13 = (char *)realloc(*__linep, 1uLL);
        if (!v13) {
          goto LABEL_16;
        }
        *__linecapp = 1LL;
        *__linep = v13;
      }

      funlockfile(__stream);
      **__linep = 0;
      return -1LL;
    }

uint64_t sappend(void **a1, void *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a5 + *a2;
  BOOL v7 = __CFADD__(a5, *a2);
  BOOL v8 = __CFADD__(v6, 1LL);
  unint64_t v9 = v6 + 1;
  uint64_t v10 = v8;
  uint64_t v11 = v10 << 63 >> 63;
  BOOL v12 = v11 != v10;
  if (v7 || v12 || v11 < 0 || v9 >= 0x8000000000000001LL)
  {
    *__error() = 84;
    return 0xFFFFFFFFLL;
  }

  if (*a3 < v9)
  {
    size_t v18 = 0x8000000000000000LL;
    if (v9 != 0x8000000000000000LL)
    {
      size_t v18 = v9;
      if ((v9 & (v9 - 1)) != 0)
      {
        unint64_t v19 = (v9 - 1) | ((v9 - 1) >> 1) | (((v9 - 1) | ((v9 - 1) >> 1)) >> 2);
        unint64_t v20 = v19 | (v19 >> 4) | ((v19 | (v19 >> 4)) >> 8);
        size_t v18 = (v20 | (v20 >> 16) | ((v20 | (v20 >> 16)) >> 32)) + 1;
      }
    }

    int v21 = realloc(*a1, v18);
    if (!v21) {
      return 0xFFFFFFFFLL;
    }
    *a3 = v18;
    *a1 = v21;
  }

  _platform_memmove();
  uint64_t result = 0LL;
  *a2 = v5 + a5;
  return result;
}

ssize_t getline(char **__linep, size_t *__linecapp, FILE *__stream)
{
  return getdelim(__linep, __linecapp, 10, __stream);
}

char *__cdecl gets(char *a1)
{
  extra = __stdinp->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0) {
    *((_BYTE *)extra + 72) |= 7u;
  }
  if ((gets_warned & 1) == 0)
  {
    write_NOCANCEL();
    gets_warned = 1;
  }

  for (uint64_t i = 0LL; ; ++i)
  {
    int v4 = __stdinp;
    int r = __stdinp->_r;
    __stdinp->_int r = r - 1;
    if (r <= 0)
    {
      int v7 = __srget(v4);
    }

    else
    {
      uint64_t v6 = v4->_p++;
      int v7 = *v6;
    }

    if (v7 == 10) {
      goto LABEL_13;
    }
    if (v7 == -1) {
      break;
    }
    a1[i] = v7;
  }

  if (i)
  {
LABEL_13:
    a1[i] = 0;
    goto LABEL_15;
  }

  a1 = 0LL;
LABEL_15:
  funlockfile(__stdinp);
  return a1;
}

int getw(FILE *a1)
{
  if (fread(&__ptr, 4uLL, 1uLL, a1) == 1) {
    return __ptr;
  }
  else {
    return -1;
  }
}

wint_t getwc(FILE *a1)
{
  uint64_t v1 = __locale_key;
  uint64_t v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2) {
    int v3 = v2;
  }
  else {
    int v3 = (_xlocale *)&__global_locale;
  }
  return fgetwc_l(a1, v3);
}

wint_t getwchar(void)
{
  uint64_t v0 = __stdinp;
  uint64_t v1 = __locale_key;
  uint64_t v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2) {
    int v3 = v2;
  }
  else {
    int v3 = (_xlocale *)&__global_locale;
  }
  return fgetwc_l(v0, v3);
}

wint_t getwchar_l(locale_t a1)
{
  return fgetwc_l(__stdinp, a1);
}

uint64_t __smakebuf(uint64_t result)
{
  uint64_t v1 = result;
  if ((*(_WORD *)(result + 16) & 2) != 0) {
    goto LABEL_56;
  }
  uint64_t result = __swhatbuf(result, (uint64_t *)&__size, &v17);
  __int16 v2 = result;
  int v3 = *(unsigned __int16 *)(v1 + 18);
  if ((v3 & 0x8000) != 0) {
    goto LABEL_48;
  }
  if (__getevp_predicate != -1) {
    uint64_t result = _os_once();
  }
  switch(v3)
  {
    case 2:
      int v4 = &__stderr_evp;
      goto LABEL_11;
    case 1:
      int v4 = &__stdout_evp;
LABEL_11:
      char v5 = *v4;
      if (*v4) {
        goto LABEL_13;
      }
      break;
    case 0:
      int v4 = &__stdin_evp;
      goto LABEL_11;
  }

  int v4 = &__fallback_evp;
  char v5 = __fallback_evp;
  if (!__fallback_evp) {
    goto LABEL_40;
  }
LABEL_13:
  unsigned int v6 = v5 - 66;
  if (v6 <= 0x33)
  {
    if (((1LL << v6) & 0x1000000011LL) != 0)
    {
      __int16 v8 = 0;
      ++v4;
      goto LABEL_23;
    }

    if (((1LL << v6) & 0x40000000400LL) != 0)
    {
      ++v4;
      __int16 v8 = 1;
      goto LABEL_23;
    }

    if (((1LL << v6) & 0x8000000080000LL) != 0) {
      goto LABEL_18;
    }
  }

  if (v5 == 48)
  {
LABEL_18:
    if (!*++v4)
    {
      __int16 v8 = 2;
      goto LABEL_23;
    }

LABEL_40:
    __int16 v12 = 0;
    goto LABEL_44;
  }

  __int16 v8 = 0;
LABEL_23:
  int v9 = *v4;
  if ((v9 - 48) > 9)
  {
    unint64_t v10 = 0LL;
  }

  else
  {
    unint64_t v10 = 0LL;
    do
    {
      unint64_t v10 = 10 * v10 + (char)v9 - 48;
      int v11 = *++v4;
      LOBYTE(v9) = v11;
    }

    while ((v11 - 48) < 0xA);
  }

  __int16 v12 = 0;
  if ((char)v9 <= 74)
  {
  }

  else if ((char)v9 == 75 || (char)v9 == 107)
  {
    ++v4;
    v10 <<= 10;
  }

  else
  {
    ++v4;
    v10 <<= 20;
  }

  if (*v4 == 66) {
    ++v4;
  }
  if (*v4) {
    goto LABEL_40;
  }
  int v17 = 0;
  size_t v13 = 4096LL;
  if (v10 < 0x1000) {
    size_t v13 = v10;
  }
  __int size = v13;
  __int16 v12 = v8;
LABEL_44:
  v2 |= v12;
  if ((v2 & 2) == 0)
  {
    size_t v14 = __size;
    if (!__size) {
      size_t v14 = 1024LL;
    }
    __int size = v14;
LABEL_48:
    if (v17)
    {
      int v15 = isatty(*(__int16 *)(v1 + 18));
      size_t v16 = __size;
      if (v15)
      {
        v2 |= 1u;
        if (__size > 0x1000)
        {
          size_t v16 = 4096LL;
          *(_DWORD *)(v1 + 136) = 4096;
        }
      }
    }

    else
    {
      size_t v16 = __size;
    }

    uint64_t result = (uint64_t)malloc(v16);
    if (result)
    {
      __cleanup = 1;
      *(void *)uint64_t v1 = result;
      *(void *)(v1 + 24) = result;
      *(_DWORD *)(v1 + 32) = v16;
      *(_WORD *)(v1 + 16) |= v2 | 0x80;
      return result;
    }
  }

  *(_WORD *)(v1 + 16) |= 2u;
LABEL_56:
  *(void *)uint64_t v1 = v1 + 119;
  *(void *)(v1 + 24) = v1 + 119;
  *(_DWORD *)(v1 + 32) = 1;
  return result;
}

  size_t v18 = __printf_out((uint64_t)a1, a2, (uint64_t)v20, v11 - v20);
  __printf_flush(a1);
  return v18;
}

uint64_t __swhatbuf(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  if (*(__int16 *)(a1 + 18) < 0 || fstat(*(unsigned __int16 *)(a1 + 18), &v9) < 0)
  {
    *a3 = 0;
    goto LABEL_12;
  }

  int v6 = v9.st_mode & 0xF000;
  *a3 = v6 == 0x2000;
  if (v9.st_blksize <= 0)
  {
LABEL_12:
    *a2 = 1024LL;
    return 2048LL;
  }

  if (v9.st_blksize >= 4096) {
    st_blkint size = 4096LL;
  }
  else {
    st_blkint size = v9.st_blksize;
  }
  *a2 = st_blksize;
  *(_DWORD *)(a1 + 136) = st_blksize;
  uint64_t result = 2048LL;
  if (v6 == 0x8000)
  {
    else {
      return 2048LL;
    }
  }

  return result;
}

char *__evpinit()
{
  return __loadevp("_STDBUF_E");
}

char *__loadevp(const char *a1)
{
  uint64_t result = getenv(a1);
  if (result) {
    return (char *)_platform_strlcpy();
  }
  return result;
}

int mkostemps(char *path, int slen, int oflags)
{
  int v5 = oflags;
  if ((oflags & 0xFEFFFFC7) != 0)
  {
    *__error() = 22;
    return -1;
  }

  else if (find_temp_path( 4294967294LL,  path,  slen,  1,  (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))_mkostemps_action,  (uint64_t)&v5,  (uint64_t)&v4))
  {
    return v4;
  }

  else
  {
    return -1;
  }

uint64_t find_temp_path( uint64_t a1, const char *a2, unsigned int a3, int a4, uint64_t (*a5)(uint64_t, const char *, uint64_t, uint64_t), uint64_t a6, uint64_t a7)
{
  if ((a3 & 0x80000000) != 0) {
    goto LABEL_8;
  }
  uint64_t v13 = 0LL;
  while (a2[v13++])
    ;
  if (v13 - 1 >= 1024)
  {
    int v15 = __error();
    uint64_t result = 0LL;
    int v17 = 63;
LABEL_9:
    *int v15 = v17;
    return result;
  }

  size_t v18 = &a2[v13 - a3];
  unint64_t v19 = (char *)(v18 - 2);
  if (v18 - 2 < a2 || (unint64_t v20 = v18 - 1, _platform_strchr()))
  {
LABEL_8:
    int v15 = __error();
    uint64_t result = 0LL;
    int v17 = 22;
    goto LABEL_9;
  }

  do
  {
    if (*v19 != 88) {
      break;
    }
    *v19-- = padchar[arc4random_uniform(0x3Eu)];
  }

  while (v19 >= a2);
  uint64_t v27 = v19 + 1;
  _platform_memmove();
  if (v19 <= a2 || !a4)
  {
LABEL_17:
    int v21 = a5(a1, a2, a6, a7);
    if (!v21) {
      return 1LL;
    }
    if (v21 == 2) {
      return 0LL;
    }
    if (v20 == v27)
    {
LABEL_27:
      int v15 = __error();
      uint64_t result = 0LL;
      int v17 = 17;
    }

    else
    {
      int v22 = &v29;
      int v23 = (char *)v27;
      while (1)
      {
        uint64_t v24 = _platform_memchr();
        if (!v24) {
          break;
        }
        if (*(_BYTE *)(v24 + 1)) {
          int v25 = *(unsigned __int8 *)(v24 + 1);
        }
        else {
          int v25 = 48;
        }
        *int v23 = v25;
        ++v23;
        ++v22;
        if (v20 == v23) {
          goto LABEL_27;
        }
      }

      int v15 = __error();
      uint64_t result = 0LL;
      int v17 = 5;
    }

    goto LABEL_9;
  }

  while (*v19 != 47)
  {
    if (--v19 <= a2) {
      goto LABEL_17;
    }
  }

  *unint64_t v19 = 0;
  int v26 = fstatat(a1, a2, &v28, 0);
  uint64_t result = 0LL;
  *unint64_t v19 = 47;
  if (!v26)
  {
    if ((v28.st_mode & 0xF000) != 0x4000)
    {
      int v15 = __error();
      uint64_t result = 0LL;
      int v17 = 20;
      goto LABEL_9;
    }

    goto LABEL_17;
  }

  return result;
}

uint64_t _mkostemps_action(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  int v5 = openat_NOCANCEL();
  if (v5 < 0)
  {
    if (*__error() == 17) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

  else
  {
    int v6 = v5;
    uint64_t result = 0LL;
    *a4 = v6;
  }

  return result;
}

int mkostempsat_np(int dfd, char *path, int slen, int oflags)
{
  int v6 = oflags;
  if ((oflags & 0xFEFFFFC7) != 0)
  {
    *__error() = 22;
    return -1;
  }

  else if (find_temp_path( *(uint64_t *)&dfd,  path,  slen,  1,  (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))_mkostemps_action,  (uint64_t)&v6,  (uint64_t)&v5))
  {
    return v5;
  }

  else
  {
    return -1;
  }

int mkstemps(char *a1, int a2)
{
  if (find_temp_path( 4294967294LL,  a1,  a2,  1,  (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))_mkostemps_action,  0LL,  (uint64_t)&v3)) {
    return v3;
  }
  else {
    return -1;
  }
}

int mkstempsat_np(int dfd, char *path, int slen)
{
  if (find_temp_path( *(uint64_t *)&dfd,  path,  slen,  1,  (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))_mkostemps_action,  0LL,  (uint64_t)&v4)) {
    return v4;
  }
  else {
    return -1;
  }
}

int mkostemp(char *path, int oflags)
{
  int v4 = oflags;
  if ((oflags & 0xFEFFFFC7) != 0)
  {
    *__error() = 22;
    return -1;
  }

  else if (find_temp_path( 4294967294LL,  path,  0,  1,  (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))_mkostemps_action,  (uint64_t)&v4,  (uint64_t)&v3))
  {
    return v3;
  }

  else
  {
    return -1;
  }

int mkstemp(char *a1)
{
  if (find_temp_path( 4294967294LL,  a1,  0,  1,  (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))_mkostemps_action,  0LL,  (uint64_t)&v2)) {
    return v2;
  }
  else {
    return -1;
  }
}

char *__cdecl mkdtemp(char *a1)
{
  if (find_temp_path( 4294967294LL,  a1,  0,  1,  (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))_mkdtemp_action,  0LL,  0LL)) {
    return a1;
  }
  else {
    return 0LL;
  }
}

uint64_t _mkdtemp_action(int a1, const char *a2)
{
  uint64_t result = mkdirat(a1, a2, 0x1C0u);
  if ((_DWORD)result)
  {
    if (*__error() == 17) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

  return result;
}

char *__cdecl mkdtempat_np(int dfd, char *path)
{
  if (find_temp_path( *(uint64_t *)&dfd,  path,  0,  1,  (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))_mkdtemp_action,  0LL,  0LL)) {
    return path;
  }
  else {
    return 0LL;
  }
}

const char *_mktemp(const char *a1)
{
  if (find_temp_path( 4294967294LL,  a1,  0,  0,  (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))_mktemp_action,  0LL,  0LL)) {
    return a1;
  }
  else {
    return 0LL;
  }
}

uint64_t _mktemp_action(int a1, const char *a2)
{
  if (fstatat(a1, a2, &v3, 32)) {
    return 2 * (*__error() != 2);
  }
  else {
    return 1LL;
  }
}

char *__cdecl mktemp(char *a1)
{
  if (find_temp_path( 4294967294LL,  a1,  0,  0,  (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))_mktemp_action,  0LL,  0LL)) {
    return a1;
  }
  else {
    return 0LL;
  }
}

int mkstemp_dprotected_np(char *path, int dpclass, int dpflags)
{
  v5[0] = dpclass;
  v5[1] = dpflags;
  if (find_temp_path( 4294967294LL,  path,  0,  1,  (uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t))_mkstemp_dprotected_np_action,  (uint64_t)v5,  (uint64_t)&v4)) {
    return v4;
  }
  else {
    return -1;
  }
}

uint64_t _mkstemp_dprotected_np_action(int a1, char *a2, int *a3, int *a4)
{
  if (a1 != -2) {
    _mkstemp_dprotected_np_action_cold_1();
  }
  int v5 = open_dprotected_np(a2, 2562, *a3, a3[1], 384LL);
  if (v5 < 0)
  {
    if (*__error() == 17) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

  else
  {
    int v6 = v5;
    uint64_t result = 0LL;
    *a4 = v6;
  }

  return result;
}

int rpmatch(const char *a1)
{
  int v2 = nl_langinfo(52);
  if (regcomp(&v8, v2, 5)) {
    return -1;
  }
  int v4 = nl_langinfo(53);
  if (regcomp(&v7, v4, 5))
  {
    int v3 = -1;
    int v5 = &v8;
  }

  else
  {
    if (regexec(&v8, a1, 0LL, 0LL, 0))
    {
      if (regexec(&v7, a1, 0LL, 0LL, 0)) {
        int v3 = -1;
      }
      else {
        int v3 = 0;
      }
    }

    else
    {
      int v3 = 1;
    }

    regfree(&v8);
    int v5 = &v7;
  }

  regfree(v5);
  return v3;
}

BOOL __find_arguments(unsigned __int8 *a1, _DWORD *a2, _DWORD **a3)
{
  int v4 = a1;
  uint64_t v5 = 0LL;
  int v72 = a1;
  int __ptr = v69;
  uint64_t v70 = 8LL;
  int v71 = 1;
  do
  {
    *(_DWORD *)((char *)__ptr + v5) = 0;
    v5 += 4LL;
  }

  while (v5 != 32);
LABEL_3:
  while (*v4 != 37)
  {
    if (!*v4)
    {
LABEL_181:
      build_arg_table((uint64_t)&__ptr, a2, a3);
      int v65 = 1;
      goto LABEL_183;
    }

    ++v4;
  }

  unsigned int v6 = 0;
  regex_t v7 = v4 + 1;
LABEL_7:
  int v4 = v7 + 1;
  int v72 = v7 + 1;
  int v8 = (char)*v7;
  while (2)
  {
    while ((v8 - 49) < 9)
    {
      int v9 = 0;
      do
      {
        int v9 = v8 + 10 * v9 - 48;
        int v10 = (char)*v4++;
        int v8 = v10;
      }

      while ((v10 - 48) < 0xA);
      if (v8 == 36)
      {
        int v72 = v4;
        int v71 = v9;
        goto LABEL_31;
      }
    }

    switch(v8)
    {
      case ' ':
      case '#':
      case '\'':
      case '+':
      case '-':
      case '0':
        int v72 = v4;
        goto LABEL_31;
      case '*':
        goto LABEL_19;
      case '.':
        int v11 = (char)*v4++;
        int v8 = v11;
        if (v11 != 42)
        {
          if ((v8 - 48) <= 9)
          {
            do
            {
              int v12 = (char)*v4++;
              int v8 = v12;
            }

            while ((v12 - 48) < 0xA);
          }

          continue;
        }

uint64_t addaster(uint64_t a1, unsigned __int8 **a2)
{
  int v4 = *a2;
  unsigned int v5 = (char)**a2 - 48;
  if (v5 > 9)
  {
    int v6 = 0;
    int v9 = **a2;
  }

  else
  {
    int v6 = 0;
    do
    {
      int v6 = v5 + 10 * v6;
      int v8 = (char)*++v4;
      unsigned __int8 v7 = v8;
      unsigned int v5 = v8 - 48;
    }

    while ((v8 - 48) < 0xA);
    int v9 = v7;
  }

  int v10 = *(_DWORD *)(a1 + 48);
  if (v9 == 36)
  {
    *(_DWORD *)(a1 + 48) = v6;
    int v11 = *(_DWORD *)(a1 + 40);
    if (v6 < v11)
    {
LABEL_25:
      if (v6 > *(_DWORD *)(a1 + 44)) {
        *(_DWORD *)(a1 + 44) = v6;
      }
      uint64_t result = 0LL;
      *(_DWORD *)(*(void *)a1 + 4LL * v6) = 2;
      *(_DWORD *)(a1 + 48) = v10;
      *a2 = v4 + 1;
      return result;
    }

    int v12 = *(_OWORD **)a1;
    if (2 * v11 <= v6) {
      int v13 = v6 + 1;
    }
    else {
      int v13 = 2 * v11;
    }
    if (v11 == 8)
    {
      int v14 = malloc(4LL * v13);
      if (v14)
      {
        BOOL v15 = v14;
        __int128 v16 = v12[1];
        *int v14 = *v12;
        v14[1] = v16;
LABEL_22:
        if (v11 < v13) {
          _platform_bzero();
        }
        *(void *)a1 = v15;
        *(_DWORD *)(a1 + 40) = v13;
        int v6 = *(_DWORD *)(a1 + 48);
        goto LABEL_25;
      }
    }

    else
    {
      BOOL v15 = realloc(*(void **)a1, 4LL * v13);
      if (v15) {
        goto LABEL_22;
      }
    }

    return 0xFFFFFFFFLL;
  }

  int v17 = *(_DWORD *)(a1 + 40);
  if (v10 >= v17)
  {
    int v18 = *(_OWORD **)a1;
    if (2 * v17 <= v10) {
      int v19 = v10 + 1;
    }
    else {
      int v19 = 2 * v17;
    }
    if (v17 == 8)
    {
      int v20 = malloc(4LL * v19);
      if (!v20) {
        return 0xFFFFFFFFLL;
      }
      int v21 = v20;
      __int128 v22 = v18[1];
      *int v20 = *v18;
      v20[1] = v22;
    }

    else
    {
      int v21 = realloc(*(void **)a1, 4LL * v19);
      if (!v21) {
        return 0xFFFFFFFFLL;
      }
    }

    if (v17 < v19) {
      _platform_bzero();
    }
    *(void *)a1 = v21;
    *(_DWORD *)(a1 + 40) = v19;
    int v10 = *(_DWORD *)(a1 + 48);
  }

  if (v10 > *(_DWORD *)(a1 + 44)) {
    *(_DWORD *)(a1 + 44) = v10;
  }
  uint64_t result = 0LL;
  int v24 = *(_DWORD **)a1;
  *(_DWORD *)(a1 + 48) = v10 + 1;
  v24[v10] = 2;
  return result;
}

uint64_t addtype(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 48);
  int v5 = *(_DWORD *)(a1 + 40);
  if (v4 >= v5)
  {
    int v6 = *(_OWORD **)a1;
    if (2 * v5 <= v4) {
      int v7 = v4 + 1;
    }
    else {
      int v7 = 2 * v5;
    }
    if (v5 == 8)
    {
      int v8 = malloc(4LL * v7);
      if (v8)
      {
        int v9 = v8;
        __int128 v10 = v6[1];
        *int v8 = *v6;
        v8[1] = v10;
LABEL_9:
        if (v5 < v7) {
          _platform_bzero();
        }
        *(void *)a1 = v9;
        *(_DWORD *)(a1 + 40) = v7;
        int v4 = *(_DWORD *)(a1 + 48);
        goto LABEL_12;
      }
    }

    else
    {
      int v9 = realloc(*(void **)a1, 4LL * v7);
      if (v9) {
        goto LABEL_9;
      }
    }

    return 0xFFFFFFFFLL;
  }

_DWORD *build_arg_table(uint64_t a1, _DWORD *a2, _DWORD **a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 44);
  if ((int)v5 <= 7)
  {
    uint64_t result = *a3;
  }

  else
  {
    uint64_t result = malloc(16 * v5 + 16);
    *a3 = result;
    if (!result) {
      return result;
    }
  }

  *uint64_t result = 0;
  if (*(int *)(a1 + 44) >= 1)
  {
    uint64_t v7 = 0LL;
    uint64_t v8 = 4LL;
    do
    {
      switch(*(_DWORD *)(*(void *)a1 + 4 * v7 + 4))
      {
        case 0:
        case 2:
        case 3:
        case 0x18:
          __int128 v10 = a2;
          a2 += 2;
          (*a3)[v8] = *v10;
          break;
        case 1:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x19:
          int v9 = a2;
          a2 += 2;
          *(void *)&(*a3)[v8] = *v9;
          break;
        case 0x16:
        case 0x17:
          int v11 = a2;
          a2 += 2;
          *(void *)&(*a3)[v8] = *v11;
          break;
        case 0x1A:
          int v12 = (_OWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
          a2 = v12 + 1;
          *(_OWORD *)&(*a3)[v8] = *v12;
          break;
        default:
          break;
      }

      ++v7;
      v8 += 4LL;
    }

    while (v7 < *(int *)(a1 + 44));
  }

  return result;
}

BOOL __find_warguments(int *a1, _DWORD *a2, _DWORD **a3)
{
  uint64_t v5 = 0LL;
  int __ptr = v66;
  uint64_t v67 = 8LL;
  int v68 = 1;
  do
  {
    *(_DWORD *)((char *)__ptr + v5) = 0;
    v5 += 4LL;
  }

  while (v5 != 32);
LABEL_3:
  while (*a1 != 37)
  {
    if (!*a1)
    {
LABEL_158:
      build_arg_table((uint64_t)&__ptr, a2, a3);
      int v62 = 1;
      goto LABEL_160;
    }

    ++a1;
  }

  unsigned int v6 = 0;
  uint64_t v7 = a1 + 1;
LABEL_7:
  int v9 = *v7;
  a1 = v7 + 1;
  int v8 = v9;
  while (2)
  {
    while ((v8 - 49) < 9)
    {
      int v10 = 0;
      do
      {
        int v10 = v8 + 10 * v10 - 48;
        int v11 = *a1++;
        int v8 = v11;
      }

      while ((v11 - 48) < 0xA);
      if (v8 == 36)
      {
        mbstate_t v69 = a1;
        int v68 = v10;
        goto LABEL_31;
      }
    }

    switch(v8)
    {
      case ' ':
      case '#':
      case '\'':
      case '+':
      case '-':
      case '0':
        mbstate_t v69 = a1;
        goto LABEL_31;
      case '*':
        goto LABEL_19;
      case '.':
        int v12 = *a1++;
        int v8 = v12;
        if (v12 != 42)
        {
          if ((v8 - 48) <= 9)
          {
            do
            {
              int v13 = *a1++;
              int v8 = v13;
            }

            while ((v13 - 48) < 0xA);
          }

          continue;
        }

uint64_t addwaster(uint64_t a1, int **a2)
{
  int v4 = *a2;
  int v5 = **a2;
  int v6 = v5 - 48;
  if ((v5 - 48) > 9)
  {
    int v7 = 0;
  }

  else
  {
    int v7 = 0;
    do
    {
      int v7 = v6 + 10 * v7;
      int v8 = v4[1];
      ++v4;
      int v5 = v8;
      int v6 = v8 - 48;
    }

    while ((v8 - 48) < 0xA);
  }

  int v9 = *(_DWORD *)(a1 + 48);
  if (v5 == 36)
  {
    *(_DWORD *)(a1 + 48) = v7;
    int v10 = *(_DWORD *)(a1 + 40);
    if (v7 < v10)
    {
LABEL_25:
      if (v7 > *(_DWORD *)(a1 + 44)) {
        *(_DWORD *)(a1 + 44) = v7;
      }
      uint64_t result = 0LL;
      *(_DWORD *)(*(void *)a1 + 4LL * v7) = 2;
      *(_DWORD *)(a1 + 48) = v9;
      *a2 = v4 + 1;
      return result;
    }

    int v11 = *(_OWORD **)a1;
    if (2 * v10 <= v7) {
      int v12 = v7 + 1;
    }
    else {
      int v12 = 2 * v10;
    }
    if (v10 == 8)
    {
      int v13 = malloc(4LL * v12);
      if (v13)
      {
        unsigned int v14 = v13;
        __int128 v15 = v11[1];
        _OWORD *v13 = *v11;
        v13[1] = v15;
LABEL_22:
        if (v10 < v12) {
          _platform_bzero();
        }
        *(void *)a1 = v14;
        *(_DWORD *)(a1 + 40) = v12;
        int v7 = *(_DWORD *)(a1 + 48);
        goto LABEL_25;
      }
    }

    else
    {
      unsigned int v14 = realloc(*(void **)a1, 4LL * v12);
      if (v14) {
        goto LABEL_22;
      }
    }

    return 0xFFFFFFFFLL;
  }

  int v16 = *(_DWORD *)(a1 + 40);
  if (v9 >= v16)
  {
    int v17 = *(_OWORD **)a1;
    if (2 * v16 <= v9) {
      int v18 = v9 + 1;
    }
    else {
      int v18 = 2 * v16;
    }
    if (v16 == 8)
    {
      int v19 = malloc(4LL * v18);
      if (!v19) {
        return 0xFFFFFFFFLL;
      }
      int v20 = v19;
      __int128 v21 = v17[1];
      *int v19 = *v17;
      v19[1] = v21;
    }

    else
    {
      int v20 = realloc(*(void **)a1, 4LL * v18);
      if (!v20) {
        return 0xFFFFFFFFLL;
      }
    }

    if (v16 < v18) {
      _platform_bzero();
    }
    *(void *)a1 = v20;
    *(_DWORD *)(a1 + 40) = v18;
    int v9 = *(_DWORD *)(a1 + 48);
  }

  if (v9 > *(_DWORD *)(a1 + 44)) {
    *(_DWORD *)(a1 + 44) = v9;
  }
  uint64_t result = 0LL;
  __int128 v23 = *(_DWORD **)a1;
  *(_DWORD *)(a1 + 48) = v9 + 1;
  v23[v9] = 2;
  return result;
}

int printf(const char *a1, ...)
{
  int v2 = __stdoutp;
  uint64_t v3 = __locale_key;
  int v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    int v5 = v4;
  }
  else {
    int v5 = (_xlocale *)&__global_locale;
  }
  return vfprintf_l(v2, v5, a1, va);
}

int printf_l(locale_t a1, const char *a2, ...)
{
  return vfprintf_l(__stdoutp, a1, a2, va);
}

int putc(int a1, FILE *a2)
{
  int w = a2->_w;
  a2->_int w = w - 1;
  int v5 = a1;
  if (w < 1 && (a1 == 10 || w <= a2->_lbfsize))
  {
    int v5 = __swbuf(a1, a2);
  }

  else
  {
    int v6 = a2->_p++;
    *int v6 = a1;
  }

  funlockfile(a2);
  return v5;
}

int putc_unlocked(int result, FILE *a2)
{
  int w = a2->_w;
  a2->_int w = w - 1;
  uint64_t v3 = a2->_p++;
  *uint64_t v3 = result;
  return result;
}

int putchar(int a1)
{
  int v2 = __stdoutp;
  flockfile(__stdoutp);
  int w = v2->_w;
  v2->_int w = w - 1;
  int v4 = a1;
  if (w < 1 && (a1 == 10 || w <= v2->_lbfsize))
  {
    int v4 = __swbuf(a1, v2);
  }

  else
  {
    int v5 = v2->_p++;
    unsigned __int8 *v5 = a1;
  }

  funlockfile(v2);
  return v4;
}

int putchar_unlocked(int result)
{
  uint64_t v1 = __stdoutp;
  int w = __stdoutp->_w;
  __stdoutp->_int w = w - 1;
  uint64_t v3 = v1->_p++;
  *uint64_t v3 = result;
  return result;
}

int puts(const char *a1)
{
  if (off_18C52C3C8) {
    off_18C52C3C8(a1);
  }
  if (a1) {
    int v2 = a1;
  }
  else {
    int v2 = "(null)";
  }
  int v10 = v2;
  uint64_t v11 = _platform_strlen();
  int v12 = "\n";
  uint64_t v13 = 1LL;
  int v7 = &v10;
  int v8 = 2;
  int v9 = v11 + 1;
  flockfile(__stdoutp);
  uint64_t v3 = __stdoutp;
  extra = __stdoutp->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0) {
    *((_BYTE *)extra + 72) |= 7u;
  }
  else {
    int v5 = 10;
  }
  funlockfile(__stdoutp);
  return v5;
}

int putw(int a1, FILE *a2)
{
  int v7 = a1;
  v5[0] = &v7;
  v5[1] = 4LL;
  v6[0] = v5;
  v6[1] = 0x400000001LL;
  flockfile(a2);
  int v3 = __sfvwrite((uint64_t)a2, (uint64_t)v6);
  funlockfile(a2);
  return v3;
}

wint_t putwc(__int32 a1, FILE *a2)
{
  uint64_t v2 = __locale_key;
  int v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    int v4 = v3;
  }
  else {
    int v4 = (_xlocale *)&__global_locale;
  }
  return fputwc_l(a1, a2, v4);
}

wint_t putwchar(__int32 a1)
{
  uint64_t v1 = __locale_key;
  uint64_t v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2) {
    int v3 = v2;
  }
  else {
    int v3 = (_xlocale *)&__global_locale;
  }
  return fputwc_l(a1, __stdoutp, v3);
}

wint_t putwchar_l(__int32 a1, locale_t a2)
{
  return fputwc_l(a1, __stdoutp, a2);
}

uint64_t __srefill0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  if ((*(_BYTE *)(v2 + 72) & 7) == 0) {
    *(_BYTE *)(v2 + 72) |= 7u;
  }
  *(_DWORD *)(a1 + 8) = 0;
  __int16 v3 = *(_WORD *)(a1 + 16);
  if ((v3 & 0x20) != 0) {
    return 0xFFFFFFFFLL;
  }
  if ((v3 & 4) != 0)
  {
    int v4 = *(void **)(a1 + 88);
    if (v4)
    {
      *(void *)(a1 + 88) = 0LL;
      int v5 = *(_DWORD *)(a1 + 112);
      *(_DWORD *)(a1 + 8) = v5;
      if (v5)
      {
        uint64_t result = 0LL;
        *(void *)a1 = **(void **)(a1 + 104);
        return result;
      }
    }
  }

  else
  {
    if ((v3 & 0x10) == 0)
    {
      *__error() = 9;
      *(_WORD *)(a1 + 16) |= 0x40u;
      return 0xFFFFFFFFLL;
    }

    if ((v3 & 8) != 0)
    {
      __int16 v3 = *(_WORD *)(a1 + 16) & 0xFFF7;
      *(_DWORD *)(a1 + 12) = 0;
      *(_DWORD *)(a1 + 40) = 0;
    }

    *(_WORD *)(a1 + 16) = v3 | 4;
  }

  if (!*(void *)(a1 + 24)) {
    __smakebuf(a1);
  }
  __int16 v7 = *(_WORD *)(a1 + 16);
  if ((v7 & 3) != 0)
  {
    *(_WORD *)(a1 + 16) = v7 | 0x8000;
    _fwalk((unsigned int (*)(uint64_t))lflush);
    int v8 = *(unsigned __int16 *)(a1 + 16);
    *(_WORD *)(a1 + 16) = v8 & 0x7FFF;
    if ((~v8 & 9) == 0) {
      __sflush(a1);
    }
  }

  return 1LL;
}

uint64_t lflush(FILE *a1)
{
  uint64_t v2 = __sflush((uint64_t)a1);
  funlockfile(a1);
  return v2;
}

uint64_t __srefill1(uint64_t a1)
{
  *(void *)a1 = *(void *)(a1 + 24);
  int v2 = _sread(a1);
  *(_DWORD *)(a1 + 8) = v2;
  __int16 v3 = *(_WORD *)(a1 + 16) & 0xDFFF;
  *(_WORD *)(a1 + 16) = v3;
  if (v2 > 0) {
    return 0LL;
  }
  if (v2)
  {
    *(_DWORD *)(a1 + 8) = 0;
    __int16 v5 = 64;
  }

  else
  {
    __int16 v5 = 32;
  }

  *(_WORD *)(a1 + 16) = v3 | v5;
  return 0xFFFFFFFFLL;
}

uint64_t __srefill(uint64_t a1)
{
  uint64_t result = __srefill0(a1);
  return result;
}

int remove(const char *a1)
{
  if (lstat(a1, &v3) < 0) {
    return -1;
  }
  if ((v3.st_mode & 0xF000) == 0x4000) {
    return rmdir(a1);
  }
  return unlink(a1);
}

void rewind(FILE *a1)
{
  int v2 = *__error();
  pthread_once(&__sdidinit, __sinit);
  flockfile(a1);
  _fseeko((uint64_t)a1, 0LL, 0LL);
  if (!v3) {
    *__error() = v2;
  }
  a1->_flags &= 0xFF9Fu;
  funlockfile(a1);
}

int __srget(FILE *a1)
{
  int v3 = a1->_p++;
  return *v3;
}

int scanf(const char *a1, ...)
{
  uint64_t v2 = __locale_key;
  int v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    int v4 = v3;
  }
  else {
    int v4 = (_xlocale *)&__global_locale;
  }
  int v5 = __svfscanf_l((uint64_t *)__stdinp, v4, (unsigned __int8 *)a1, (wint_t **)va);
  funlockfile(__stdinp);
  return v5;
}

int scanf_l(locale_t a1, const char *a2, ...)
{
  locale_t v3 = (locale_t)&__global_locale;
  if (a1 != (locale_t)-1LL) {
    locale_t v3 = a1;
  }
  if (a1) {
    int v4 = v3;
  }
  else {
    int v4 = (_xlocale *)&__c_locale;
  }
  flockfile(__stdinp);
  int v5 = __svfscanf_l((uint64_t *)__stdinp, v4, (unsigned __int8 *)a2, (wint_t **)va);
  funlockfile(__stdinp);
  return v5;
}

void setbuf(FILE *a1, char *a2)
{
  setvbuf(a1, a2, 2 * (a2 == 0LL), 0x400uLL);
}

void setbuffer(FILE *a1, char *a2, int a3)
{
  setvbuf(a1, a2, 2 * (a2 == 0LL), a3);
}

int setlinebuf(FILE *a1)
{
  return setvbuf(a1, 0LL, 1, 0LL);
}

int setvbuf(FILE *a1, char *a2, int a3, size_t a4)
{
  if (a3 == 2 || (int v8 = -1, a3 <= 1) && (a4 & 0x80000000) == 0)
  {
    if (off_18C52C3D8)
    {
      off_18C52C3D8(a1, 152LL);
      if (off_18C52C3D8) {
        off_18C52C3D8(a2, a4);
      }
    }

    flockfile(a1);
    __sflush((uint64_t)a1);
    base = (FILE *)a1->_ub._base;
    if (base)
    {
      if (base != (FILE *)a1->_ubuf) {
        free(base);
      }
      a1->_ub._base = 0LL;
    }

    a1->_lbfint size = 0;
    a1->_int r = 0;
    __int16 flags = a1->_flags;
    if ((flags & 0x80) != 0) {
      free(a1->_bf._base);
    }
    int v11 = flags & 0xE35C;
    if (a3 == 2)
    {
      int v8 = 0;
LABEL_15:
      a1->___int16 flags = v11 | 2;
      a1->_int w = 0;
      a1->_p = a1->_nbuf;
      a1->_bf._base = a1->_nbuf;
      a1->_bf._int size = 1;
LABEL_34:
      funlockfile(a1);
      return v8;
    }

    v11 |= __swhatbuf((uint64_t)a1, (uint64_t *)&v18, &v17);
    size_t v12 = v18;
    if (a4) {
      uint64_t v13 = a4;
    }
    else {
      uint64_t v13 = v18;
    }
    if (a2 && a4)
    {
      int v8 = 0;
    }

    else
    {
      unsigned int v14 = (char *)malloc(v13);
      if (v14)
      {
        a2 = v14;
        int v8 = 0;
      }

      else
      {
        if (v13 == v12)
        {
          int v8 = -1;
          goto LABEL_15;
        }

        a2 = (char *)malloc(v12);
        int v8 = -1;
        uint64_t v13 = v12;
        if (!a2) {
          goto LABEL_15;
        }
      }

      LOWORD(v11) = v11 | 0x80;
    }

    if (v13 == v12) {
      __int16 v15 = v11;
    }
    else {
      __int16 v15 = v11 | 0x800;
    }
    a1->___int16 flags = v15 | (a3 == 1);
    a1->_p = (unsigned __int8 *)a2;
    a1->_bf._base = (unsigned __int8 *)a2;
    a1->_bf._int size = v13;
    if ((v15 & 8) != 0)
    {
      if (v15 & 1 | (a3 == 1))
      {
        a1->_int w = 0;
        a1->_lbfint size = -(int)v13;
      }

      else
      {
        a1->_int w = v13;
      }
    }

    else
    {
      a1->_int w = 0;
    }

    __cleanup = 1;
    goto LABEL_34;
  }

  return v8;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  uint64_t v4 = __locale_key;
  int v5 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
  if (v5) {
    int v6 = v5;
  }
  else {
    int v6 = (_xlocale *)&__global_locale;
  }
  return vsnprintf_l(__str, __size, v6, __format, va);
}

int snprintf_l(char *a1, size_t a2, locale_t a3, const char *a4, ...)
{
  return vsnprintf_l(a1, a2, a3, a4, va);
}

int sprintf(char *a1, const char *a2, ...)
{
  uint64_t v3 = __locale_key;
  uint64_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    int v5 = v4;
  }
  else {
    int v5 = (_xlocale *)&__global_locale;
  }
  return vsprintf_l(a1, v5, a2, va);
}

int sprintf_l(char *a1, locale_t a2, const char *a3, ...)
{
  return vsprintf_l(a1, a2, a3, va);
}

int sscanf(const char *a1, const char *a2, ...)
{
  uint64_t v3 = __locale_key;
  uint64_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    int v5 = v4;
  }
  else {
    int v5 = (_xlocale *)&__global_locale;
  }
  return vsscanf_l(a1, v5, a2, va);
}

int sscanf_l(const char *a1, locale_t a2, const char *a3, ...)
{
  return vsscanf_l(a1, a2, a3, va);
}

uint64_t __sread()
{
  return read_NOCANCEL();
}

uint64_t __swrite()
{
  return write_NOCANCEL();
}

off_t __sseek(uint64_t a1, off_t a2, int a3)
{
  return lseek(*(__int16 *)(a1 + 18), a2, a3);
}

uint64_t __sclose()
{
  return close_NOCANCEL();
}

uint64_t _sread(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(a1 + 64))(*(void *)(a1 + 48));
  if ((int)result < 1)
  {
    if ((result & 0x80000000) == 0) {
      return result;
    }
    __int16 v3 = *(_WORD *)(a1 + 16);
  }

  else
  {
    __int16 v3 = *(_WORD *)(a1 + 16);
    if ((v3 & 0x1000) == 0) {
      return result;
    }
    uint64_t v4 = *(void *)(a1 + 144);
    if (v4 <= (result ^ 0x7FFFFFFFFFFFFFFFLL))
    {
      *(void *)(a1 + 144) = v4 + result;
      return result;
    }
  }

  *(_WORD *)(a1 + 16) = v3 & 0xEFFF;
  return result;
}

uint64_t _swrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(_WORD *)(a1 + 16) & 0x100) != 0)
  {
    int v6 = *__error();
    if (_sseek(a1, 0LL, 2LL) == -1 && (*(_WORD *)(a1 + 16) & 0x400) != 0) {
      return 0xFFFFFFFFLL;
    }
    *__error() = v6;
  }

  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(a1 + 80))(*(void *)(a1 + 48), a2, a3);
  int v8 = *(unsigned __int16 *)(a1 + 16);
  if ((result & 0x80000000) != 0
    || (~v8 & 0x1100) != 0
    || (uint64_t v9 = *(void *)(a1 + 144), v9 > (result ^ 0x7FFFFFFFFFFFFFFFLL)))
  {
    *(_WORD *)(a1 + 16) = v8 & 0xEFFF;
  }

  else
  {
    *(void *)(a1 + 144) = v9 + result;
  }

  return result;
}

uint64_t _sseek(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *__error();
  *__error() = 0;
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t, uint64_t))(a1 + 72))(*(void *)(a1 + 48), a2, a3);
  int v8 = *__error();
  if (*__error())
  {
    if ((v7 & 0x8000000000000000LL) == 0) {
      goto LABEL_3;
    }
  }

  else
  {
    *__error() = v6;
    if ((v7 & 0x8000000000000000LL) == 0)
    {
LABEL_3:
      if ((*(_WORD *)(a1 + 16) & 0x400) != 0)
      {
        *(_WORD *)(a1 + 16) |= 0x1000u;
        *(void *)(a1 + 144) = v7;
      }

      return v7;
    }
  }

  if (v8 == 29)
  {
    *(_WORD *)(a1 + 16) &= ~0x100u;
  }

  else if (!v8)
  {
    if (a2 || (_DWORD)a3 != 1)
    {
      int v10 = *(void **)(a1 + 88);
      if (v10)
      {
        *(void *)(a1 + 88) = 0LL;
      }

      *(void *)a1 = *(void *)(a1 + 24);
      *(_DWORD *)(a1 + 8) = 0;
      __int16 v9 = *(_WORD *)(a1 + 16) & 0xFFDF;
    }

    else
    {
      __int16 v9 = *(_WORD *)(a1 + 16);
    }

    *(_WORD *)(a1 + 16) = v9 | 0x40;
    *__error() = 22;
  }

  *(_WORD *)(a1 + 16) &= ~0x1000u;
  return -1LL;
}

int swprintf(__int32 *a1, size_t a2, const __int32 *a3, ...)
{
  uint64_t v4 = __locale_key;
  int v5 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
  if (v5) {
    int v6 = v5;
  }
  else {
    int v6 = (_xlocale *)&__global_locale;
  }
  return vswprintf_l(a1, a2, v6, a3, va);
}

int swprintf_l(__int32 *a1, size_t n, locale_t a3, const __int32 *a4, ...)
{
  return vswprintf_l(a1, n, a3, a4, va);
}

int swscanf(const __int32 *a1, const __int32 *a2, ...)
{
  uint64_t v3 = __locale_key;
  uint64_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    int v5 = v4;
  }
  else {
    int v5 = (_xlocale *)&__global_locale;
  }
  return vswscanf_l(a1, v5, a2, va);
}

int swscanf_l(const __int32 *a1, locale_t a2, const __int32 *a3, ...)
{
  return vswscanf_l(a1, a2, a3, va);
}

char *__cdecl tempnam(const char *__dir, const char *__prefix)
{
  if (off_18C52C3C8)
  {
    off_18C52C3C8(__dir);
    if (off_18C52C3C8) {
      off_18C52C3C8(__prefix);
    }
  }

  uint64_t result = (char *)malloc(0x400uLL);
  if (result)
  {
    int v5 = result;
    if (!__prefix) {
      __prefix = "tmp.";
    }
    if (!__dir
      || access(__dir, 2)
      || (__dir[_platform_strlen() - 1] != 47 ? (int v11 = "/") : (int v11 = ""),
          snprintf(v5, 0x400uLL, "%s%s%sXXXXXX", __dir, v11, __prefix),
          (uint64_t result = (char *)_mktemp(v5)) == 0LL))
    {
      if (access("/var/tmp/", 2)
        || (snprintf(v5, 0x400uLL, "%s%sXXXXXX", "/var/tmp/", __prefix), (uint64_t result = (char *)_mktemp(v5)) == 0LL))
      {
        if (issetugid()
          || (int v8 = getenv("TMPDIR")) == 0LL
          || (__int16 v9 = v8, access(v8, 2))
          || (v9[_platform_strlen() - 1] != 47 ? (int v10 = "/") : (int v10 = ""),
              snprintf(v5, 0x400uLL, "%s%s%sXXXXXX", v9, v10, __prefix),
              (uint64_t result = (char *)_mktemp(v5)) == 0LL))
        {
          snprintf(v5, 0x400uLL, "%s%sXXXXXX", "/tmp/", __prefix);
          uint64_t result = (char *)_mktemp(v5);
          if (!result)
          {
            int v6 = *__error();
            free(v5);
            uint64_t v7 = __error();
            uint64_t result = 0LL;
            *uint64_t v7 = v6;
          }
        }
      }
    }
  }

  return result;
}

FILE *tmpfile(void)
{
  if (issetugid()) {
    uint64_t v0 = 0LL;
  }
  else {
    uint64_t v0 = getenv("TMPDIR");
  }
  if (v0) {
    uint64_t v1 = v0;
  }
  else {
    uint64_t v1 = "/tmp/";
  }
  if (!*v1) {
    return 0LL;
  }
  uint64_t v2 = v1[_platform_strlen() - 1] == 47 ? "" : "/";
  asprintf(&v7, "%s%s%s", v1, v2, "tmp.XXXXXX");
  if (!v7) {
    return 0LL;
  }
  sigset_t v9 = -1;
  sigprocmask(1, &v9, &v8);
  int v3 = mkstemp(v7);
  if (v3 == -1)
  {
    free(v7);
    sigprocmask(3, &v8, 0LL);
    return 0LL;
  }

  unlink(v7);
  free(v7);
  sigprocmask(3, &v8, 0LL);
  uint64_t result = fdopen(v3, "w+");
  if (!result)
  {
    int v5 = *__error();
    close_NOCANCEL();
    int v6 = __error();
    uint64_t result = 0LL;
    *int v6 = v5;
  }

  return result;
}

char *__cdecl tmpnam(char *a1)
{
  uint64_t v1 = a1;
  if (!a1)
  {
    uint64_t v1 = (char *)tmpnam_buf;
    if (!tmpnam_buf) {
      return 0LL;
    }
  }

  if (off_18C52C3D8) {
    off_18C52C3D8(v1, 1024LL);
  }
  snprintf(v1, 0x400uLL, "%stmp.%lu.XXXXXX", "/var/tmp/", tmpnam_tmpcount);
  ++tmpnam_tmpcount;
  return (char *)_mktemp(v1);
}

void *tmpnam_buf_allocate()
{
  uint64_t result = malloc(0x400uLL);
  tmpnam_unint64_t buf = (uint64_t)result;
  return result;
}

int ungetc(int a1, FILE *a2)
{
  extra = a2->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0) {
    *((_BYTE *)extra + 72) |= 7u;
  }
  int v5 = __ungetc(a1, (uint64_t)a2);
  funlockfile(a2);
  return v5;
}

uint64_t __ungetc(int a1, uint64_t a2)
{
  if (a1 == -1) {
    return 0xFFFFFFFFLL;
  }
  unsigned __int8 v3 = a1;
  __int16 v4 = *(_WORD *)(a2 + 16);
  if ((v4 & 4) == 0)
  {
    if ((v4 & 0x10) == 0) {
      return 0xFFFFFFFFLL;
    }
    if ((v4 & 8) != 0)
    {
      __int16 v4 = *(_WORD *)(a2 + 16) & 0xFFF7;
      *(_DWORD *)(a2 + 12) = 0;
      *(_DWORD *)(a2 + 40) = 0;
    }

    v4 |= 4u;
    *(_WORD *)(a2 + 16) = v4;
  }

  uint64_t v5 = v3;
  int v6 = *(__int16 **)(a2 + 88);
  if (v6)
  {
    uint64_t v7 = *(int *)(a2 + 96);
    if (*(_DWORD *)(a2 + 8) < (int)v7)
    {
      sigset_t v8 = *(char **)a2;
LABEL_21:
      *(void *)a2 = v8 - 1;
      *(v8 - 1) = v3;
      goto LABEL_22;
    }

    if (v6 == (__int16 *)(a2 + 116))
    {
      unsigned int v14 = (char *)malloc(0x400uLL);
      if (v14)
      {
        *(void *)(a2 + 88) = v14;
        *(_DWORD *)(a2 + 96) = 1024;
        sigset_t v8 = v14 + 1021;
        __int16 v15 = *v6;
        v14[1023] = *((_BYTE *)v6 + 2);
        *(_WORD *)(v14 + 1021) = v15;
        goto LABEL_21;
      }
    }

    else
    {
      int v11 = (char *)realloc(*(void **)(a2 + 88), 2 * (int)v7);
      if (v11)
      {
        size_t v12 = v11;
        sigset_t v8 = &v11[v7];
        _platform_memmove();
        *(void *)(a2 + 88) = v12;
        *(_DWORD *)(a2 + 96) = 2 * v7;
        goto LABEL_21;
      }
    }

    return 0xFFFFFFFFLL;
  }

  *(_WORD *)(a2 + 16) = v4 & 0xFFDF;
  unint64_t v9 = *(void *)(a2 + 24);
  unint64_t v10 = *(void *)a2;
  if (v9 && v10 > v9 && *(unsigned __int8 *)(v10 - 1) == v3)
  {
    *(void *)a2 = v10 - 1;
LABEL_22:
    int v13 = *(_DWORD *)(a2 + 8) + 1;
    goto LABEL_23;
  }

  *(_DWORD *)(a2 + 112) = *(_DWORD *)(a2 + 8);
  **(void **)(a2 + 104) = v10;
  *(void *)(a2 + 88) = a2 + 116;
  *(_DWORD *)(a2 + 96) = 3;
  *(_BYTE *)(a2 + 118) = v3;
  *(void *)a2 = a2 + 118;
  int v13 = 1;
LABEL_23:
  *(_DWORD *)(a2 + 8) = v13;
  return v5;
}

uint64_t __ungetwc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if ((_DWORD)a1 != -1)
  {
    uint64_t v5 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 1328) + 96LL))( v10,  a1,  *(void *)(a2 + 104) + 80LL,  a3);
    if (v5 == -1)
    {
      *(_WORD *)(a2 + 16) |= 0x40u;
      return 0xFFFFFFFFLL;
    }

    else
    {
      while (v5)
      {
        uint64_t v6 = v5 - 1;
        int v7 = __ungetc(v10[v5 - 1], a2);
        uint64_t v5 = v6;
        if (v7 == -1) {
          return 0xFFFFFFFFLL;
        }
      }
    }
  }

  return v3;
}

wint_t ungetwc(wint_t a1, FILE *a2)
{
  uint64_t v3 = *(void *)&a1;
  flockfile(a2);
  extra = a2->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0) {
    *((_BYTE *)extra + 72) = *((_BYTE *)extra + 72) & 0xF8 | 1;
  }
  uint64_t v5 = __locale_key;
  uint64_t v6 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (v6) {
    int v7 = v6;
  }
  else {
    int v7 = &__global_locale;
  }
  wint_t v8 = __ungetwc(v3, (uint64_t)a2, (uint64_t)v7);
  funlockfile(a2);
  return v8;
}

wint_t ungetwc_l(wint_t a1, FILE *a2, locale_t a3)
{
  uint64_t v5 = *(void *)&a1;
  flockfile(a2);
  extra = a2->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0) {
    *((_BYTE *)extra + 72) = *((_BYTE *)extra + 72) & 0xF8 | 1;
  }
  locale_t v7 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1LL) {
    locale_t v7 = a3;
  }
  if (a3) {
    locale_t v8 = v7;
  }
  else {
    locale_t v8 = (locale_t)&__c_locale;
  }
  wint_t v9 = __ungetwc(v5, (uint64_t)a2, (uint64_t)v8);
  funlockfile(a2);
  return v9;
}

uint64_t _vasprintf( pthread_mutex_t *a1, pthread_rwlock_t *a2, void **a3, unsigned int *a4, unsigned __int8 *a5, __int16 *a6)
{
  size_t v18 = v19;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  uint64_t v23 = 0LL;
  v19[0] = 0LL;
  v19[1] = 850045858LL;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  char v24 = 0;
  int v15 = -48632;
  int v13 = malloc(0x80uLL);
  int v16 = v13;
  if (v13)
  {
    int v14 = 127;
    int v17 = 127;
    char v24 = 0;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    uint64_t result = __v2printf(a1, a2, (uint64_t)&v13, a4, a5, a6);
    if ((result & 0x80000000) == 0)
    {
      _BYTE *v13 = 0;
      *a3 = v16;
      return result;
    }

    free(v16);
  }

  *a3 = 0LL;
  *__error() = 12;
  return 0xFFFFFFFFLL;
}

int vasprintf_l(char **a1, locale_t a2, const char *a3, va_list a4)
{
  return _vasprintf( (pthread_mutex_t *)0xFFFFFFFFFFFFFFFFLL,  0LL,  (void **)a1,  (unsigned int *)a2,  (unsigned __int8 *)a3,  (__int16 *)a4);
}

int vasprintf(char **a1, const char *a2, va_list a3)
{
  uint64_t v3 = __locale_key;
  __int16 v4 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = &__global_locale;
  }
  return _vasprintf(-1LL, 0LL, a1, v5, a2, a3);
}

uint64_t _vdprintf( pthread_mutex_t *a1, pthread_rwlock_t *a2, int a3, unsigned int *a4, unsigned __int8 *a5, __int16 *a6)
{
  int v16 = v17;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  uint64_t v21 = 0LL;
  v17[0] = 0LL;
  v17[1] = 850045858LL;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  char v22 = 0;
  if (a3 < 0x8000)
  {
    locale_t v8 = v31;
    int v9 = 1024;
    __int16 v10 = 8;
    __int16 v11 = a3;
    int v14 = &v8;
    int v15 = __swrite;
    size_t v12 = v31;
    int v13 = 1024;
    char v22 = 0;
    __int128 v23 = 0uLL;
    __int128 v24 = 0uLL;
    __int128 v25 = 0uLL;
    __int128 v26 = 0uLL;
    __int128 v27 = 0uLL;
    __int128 v28 = 0uLL;
    __int128 v29 = 0uLL;
    __int128 v30 = 0uLL;
    uint64_t v6 = __v2printf(a1, a2, (uint64_t)&v8, a4, a5, a6);
    if ((v6 & 0x80000000) == 0)
    {
      else {
        return v6;
      }
    }
  }

  else
  {
    *__error() = 24;
    return 0xFFFFFFFFLL;
  }

  return v6;
}

int vdprintf_l(int a1, locale_t a2, const char *a3, va_list a4)
{
  return _vdprintf( (pthread_mutex_t *)0xFFFFFFFFFFFFFFFFLL,  0LL,  a1,  (unsigned int *)a2,  (unsigned __int8 *)a3,  (__int16 *)a4);
}

int vdprintf(int a1, const char *a2, va_list a3)
{
  uint64_t v3 = __locale_key;
  __int16 v4 = *(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = (unsigned int *)&__global_locale;
  }
  return _vdprintf((pthread_mutex_t *)0xFFFFFFFFFFFFFFFFLL, 0LL, a1, v5, (unsigned __int8 *)a2, (__int16 *)a3);
}

int vfprintf_l(FILE *a1, locale_t a2, const char *a3, va_list a4)
{
  if (off_18C52C3D8) {
    off_18C52C3D8(a1, 152LL);
  }
  flockfile(a1);
  int v5 = __xvprintf((pthread_mutex_t *)0xFFFFFFFFFFFFFFFFLL, 0, (uint64_t)a1);
  funlockfile(a1);
  return v5;
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  if (off_18C52C3D8) {
    off_18C52C3D8(a1, 152LL);
  }
  flockfile(a1);
  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  int v4 = __xvprintf((pthread_mutex_t *)0xFFFFFFFFFFFFFFFFLL, 0, (uint64_t)a1);
  funlockfile(a1);
  return v4;
}

BOOL __printf_is_memory_read_only(vm_address_t a1)
{
  kern_return_t v1;
  mach_port_t object_name;
  mach_msg_type_number_t infoCnt;
  int info[9];
  vm_size_t size;
  vm_address_t address;
  int size = 0LL;
  address = a1;
  object_name = 0;
  infoCnt = 9;
  uint64_t v1 = vm_region_64(*MEMORY[0x1895FFD48], &address, &size, 9, info, &infoCnt, &object_name);
  return (v1 | info[0] & 2) == 0;
}

uint64_t __vfprintf(uint64_t a1, locale_t a2, unsigned __int8 *a3, int *a4)
{
  v402 = a4;
  v386 = 0LL;
  v390 = &v392;
  uint64_t v391 = 0LL;
  uint64_t v389 = a1;
  int v5 = localeconv_l(a2);
  decimal_point = v5->decimal_point;
  else {
    int v6 = 1;
  }
  v373 = 0LL;
  char v363 = 0;
  uint64_t v7 = 0LL;
  v371 = 0LL;
  v365 = a3;
  int v379 = 1;
  int v367 = 1;
  int v368 = 1;
  uint64_t v369 = v6;
  uint64_t v374 = 1LL;
LABEL_5:
  unint64_t v8 = (unint64_t)a3;
LABEL_6:
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  unint64_t v11 = ~v8;
  for (uint64_t i = (char *)v8; ; ++i)
  {
    int v13 = *(unsigned __int8 *)(v8 + v10);
    if (!*(_BYTE *)(v8 + v10) || v13 == 37) {
      break;
    }
    ++v10;
    v9 += 0x100000000LL;
    --v11;
  }

  if (v10)
  {
    uint64_t v378 = v7 + v10;
    if (v7 + v10 >= 0x7FFFFFFF) {
      goto LABEL_848;
    }
    int v14 = v391;
    int v15 = HIDWORD(v391);
    int v16 = &v389 + 2 * (int)v391;
    v16[3] = v8;
    v16[4] = v9 >> 32;
    HIDWORD(v391) = v15 + v10;
    LODWORD(v391) = v14 + 1;
    if (v14 >= 7)
    {
      if (!(v15 + (_DWORD)v10))
      {
        LODWORD(v391) = 0;
        if (!v13)
        {
LABEL_850:
          if (HIDWORD(v391))
          {
            __sfvwrite(v389, (uint64_t)&v390);
            HIDWORD(v391) = 0;
          }

          LODWORD(v391) = 0;
          goto LABEL_853;
        }

        goto LABEL_18;
      }

      int v17 = __sfvwrite(v389, (uint64_t)&v390);
      uint64_t v391 = 0LL;
      if (v17) {
        goto LABEL_854;
      }
    }
  }

  else
  {
    uint64_t v378 = v7;
  }

  if (!v13) {
    goto LABEL_850;
  }
LABEL_18:
  uint64_t v18 = 0LL;
  LODWORD(v19) = 0;
  uint64_t v400 = 0LL;
  unsigned __int8 v401 = 0;
  a3 = (unsigned __int8 *)(v8 + v10 + 1);
  char v388 = 0;
  char v393 = 88;
  uint64_t v384 = -1LL;
  v380 = (char *)v8;
LABEL_19:
  while (2)
  {
    unsigned int v21 = (char)*a3++;
    unsigned int v20 = v21;
LABEL_20:
    uint64_t v22 = v18;
    while (1)
    {
      uint64_t v18 = v22;
      if (v20 - 49 >= 9) {
        break;
      }
      uint64_t v22 = 0LL;
      do
      {
        uint64_t v22 = v20 - 48 + 10 * v22;
        unsigned int v23 = (char)*a3++;
        unsigned int v20 = v23;
      }

      while (v23 - 48 < 0xA);
      if (v20 == 36)
      {
        int v379 = v22;
        if (!v386)
        {
          v386 = v405;
          int v379 = v22;
          if (__find_arguments(v365, a4, (_DWORD **)&v386)) {
            goto LABEL_849;
          }
        }

        goto LABEL_19;
      }
    }

    switch(v20)
    {
      case ' ':
        if (!v401) {
          unsigned __int8 v401 = 32;
        }
        continue;
      case '#':
        LODWORD(v19) = v19 | 1;
        continue;
      case '\'':
        LODWORD(v19) = v19 | 0x200;
        continue;
      case '*':
        unsigned int v28 = (char)*a3 - 48;
        if (v28 > 9)
        {
          unsigned int v29 = 0;
          int v32 = *a3;
          __int128 v30 = (char *)a3;
          int v31 = v379;
        }

        else
        {
          unsigned int v29 = 0;
          __int128 v30 = (char *)a3;
          int v31 = v379;
          do
          {
            unsigned int v29 = 10 * v29 + v28;
            int v33 = *++v30;
            LOBYTE(v32) = v33;
            unsigned int v28 = v33 - 48;
          }

          while ((v33 - 48) < 0xA);
          int v32 = v32;
        }

        __int128 v34 = v386;
        if (v32 != 36)
        {
          if (v386)
          {
            int v35 = *((_DWORD *)v386 + 4 * v31);
          }

          else
          {
            int v36 = v402;
            v402 += 2;
            int v35 = *v36;
          }

          int v379 = v31 + 1;
          v380 = v30;
LABEL_69:
          uint64_t v18 = v35;
          if (v35 < 0)
          {
            uint64_t v18 = -(uint64_t)v35;
LABEL_71:
            LODWORD(v19) = v19 | 4;
          }

          continue;
        }

        if (v386) {
          goto LABEL_63;
        }
        v386 = v405;
        if (!__find_arguments(v365, a4, (_DWORD **)&v386))
        {
          __int128 v34 = v386;
          if (v386)
          {
LABEL_63:
            int v35 = v34[4 * v29];
          }

          else
          {
            int v37 = v402;
            v402 += 2;
            int v35 = *v37;
          }

          v380 = v30 + 1;
          a3 = (unsigned __int8 *)(v30 + 1);
          goto LABEL_69;
        }

        goto LABEL_849;
      case '+':
        unsigned __int8 v401 = 43;
        continue;
      case ',':
      case ':':
      case ';':
      case '_':
        char v393 = v20;
        continue;
      case '-':
        goto LABEL_71;
      case '.':
        unsigned int v24 = (char)*a3++;
        unsigned int v20 = v24;
        if (v24 != 42)
        {
          uint64_t v384 = 0LL;
          unsigned int v25 = v20 - 48;
          if (v20 - 48 <= 9)
          {
            uint64_t v26 = 0LL;
            do
            {
              uint64_t v26 = 10 * v26 + v25;
              unsigned int v27 = (char)*a3++;
              unsigned int v20 = v27;
              unsigned int v25 = v27 - 48;
            }

            while (v27 - 48 < 0xA);
            uint64_t v384 = v26;
          }

          goto LABEL_20;
        }

        unsigned int v38 = (char)*a3 - 48;
        if (v38 > 9)
        {
          unsigned int v39 = 0;
          int v42 = *a3;
          int v40 = (char *)a3;
          int v41 = v379;
        }

        else
        {
          unsigned int v39 = 0;
          int v40 = (char *)a3;
          int v41 = v379;
          do
          {
            unsigned int v39 = 10 * v39 + v38;
            int v43 = *++v40;
            LOBYTE(v42) = v43;
            unsigned int v38 = v43 - 48;
          }

          while ((v43 - 48) < 0xA);
          int v42 = v42;
        }

        int v44 = v386;
        if (v42 != 36)
        {
          if (v386)
          {
            int v45 = *((_DWORD *)v386 + 4 * v41);
          }

          else
          {
            int v46 = v402;
            v402 += 2;
            int v45 = *v46;
          }

          int v379 = v41 + 1;
          v380 = v40;
LABEL_88:
          uint64_t v384 = v45;
          continue;
        }

        if (v386) {
          goto LABEL_82;
        }
        v386 = v405;
        if (!__find_arguments(v365, a4, (_DWORD **)&v386))
        {
          int v44 = v386;
          if (v386)
          {
LABEL_82:
            int v45 = v44[4 * v39];
          }

          else
          {
            int v47 = v402;
            v402 += 2;
            int v45 = *v47;
          }

          v380 = v40 + 1;
          a3 = (unsigned __int8 *)(v40 + 1);
          goto LABEL_88;
        }

        goto LABEL_849;
      case '0':
        LODWORD(v19) = v19 | 0x80;
        continue;
      case 'A':
      case 'a':
        if (v20 == 97) {
          char v53 = 120;
        }
        else {
          char v53 = 88;
        }
        if (v20 == 97) {
          __int128 v54 = &__vfprintf_xdigs_lower;
        }
        else {
          __int128 v54 = &__vfprintf_xdigs_upper;
        }
        v362 = v54;
        if (v20 == 97) {
          char v51 = 112;
        }
        else {
          char v51 = 80;
        }
        char v388 = v53;
        if (v373) {
          __freedtoa((uint64_t)v373);
        }
        if ((v19 & 8) != 0)
        {
          if (v386)
          {
            double v72 = *((double *)v386 + 2 * v379);
          }

          else
          {
            __int128 v99 = (double *)v402;
            v402 += 2;
            double v72 = *v99;
          }

          double v397 = v72;
          uint64_t v97 = __hldtoa(v362, v384 + (v384 >= 0), &v396, &v398, &v395);
        }

        else
        {
          if (v386)
          {
            double v55 = *((double *)v386 + 2 * v379);
          }

          else
          {
            __int128 v96 = (double *)v402;
            v402 += 2;
            double v55 = *v96;
          }

          double v397 = v55;
          uint64_t v97 = (uint64_t)__hdtoa((uint64_t)v362, v384 + (v384 >= 0), &v396, &v398, &v395, v55);
        }

        v373 = (char *)v97;
        __int128 v100 = &v395[-v97];
        if (v384 + (v384 >= 0) >= 0) {
          __int128 v100 = (char *)(v384 + (v384 >= 0));
        }
        uint64_t v384 = (uint64_t)v100;
        if (v396 == 0x7FFFFFFF) {
          char v388 = 0;
        }
        goto LABEL_273;
      case 'C':
        LOWORD(v19) = (unsigned __int16)v19 | 0x10;
        goto LABEL_142;
      case 'D':
        LOWORD(v19) = (unsigned __int16)v19 | 0x10;
        goto LABEL_147;
      case 'E':
      case 'e':
        if (v384 >= 0) {
          uint64_t v52 = v384 + 1;
        }
        else {
          uint64_t v52 = 7LL;
        }
        char v51 = v20;
        goto LABEL_130;
      case 'F':
      case 'f':
        char v51 = 0;
        uint64_t v52 = v384;
        goto LABEL_130;
      case 'G':
      case 'g':
        if (((unsigned __int16)v19 & 0x4000) != 0)
        {
LABEL_137:
          int v57 = 0;
          LOWORD(v19) = (unsigned __int16)v19 | 0x100;
          goto LABEL_138;
        }

        char v51 = v20 - 2;
        uint64_t v52 = v384;
LABEL_130:
        if (v52 < 0) {
          uint64_t v52 = 6LL;
        }
        uint64_t v384 = v52;
        if (v373) {
          __freedtoa((uint64_t)v373);
        }
        if ((v19 & 8) != 0)
        {
          if (v386)
          {
            double v59 = *((double *)v386 + 2 * v379);
          }

          else
          {
            mbstate_t v69 = (double *)v402;
            v402 += 2;
            double v59 = *v69;
          }

          double v397 = v59;
          if (v51) {
            unsigned int v70 = 2;
          }
          else {
            unsigned int v70 = 3;
          }
          v373 = __ldtoa(&v397, v70, v384, &v396, &v398, &v395);
        }

        else
        {
          if (v386)
          {
            double v56 = *((double *)v386 + 2 * v379);
          }

          else
          {
            uint64_t v67 = (double *)v402;
            v402 += 2;
            double v56 = *v67;
          }

          double v397 = v56;
          if (v51) {
            unsigned int v68 = 2;
          }
          else {
            unsigned int v68 = 3;
          }
          v373 = __dtoa(v68, v384, &v396, &v398, &v395, v56);
          if (v396 == 9999) {
            int v396 = 0x7FFFFFFF;
          }
        }

LABEL_273:
        if (v398) {
          unsigned __int8 v401 = 45;
        }
        ++v379;
        if (v396 == 0x7FFFFFFF)
        {
          char v364 = v51;
          if (*v373 == 78)
          {
            __darwin_ct_rune_t v101 = "NAN";
            if (v20 > 0x60) {
              __darwin_ct_rune_t v101 = "nan";
            }
            v380 = (char *)v101;
            unsigned __int8 v401 = 0;
          }

          else
          {
            uint64_t v111 = "INF";
            if (v20 > 0x60) {
              uint64_t v111 = "inf";
            }
            v380 = (char *)v111;
          }

          int v57 = 0;
          LOWORD(v19) = (unsigned __int16)v19 & 0xFF7F;
          uint64_t v58 = 3LL;
          goto LABEL_413;
        }

        __int16 v377 = (unsigned __int16)v19 | 0x100;
        int v367 = (_DWORD)v395 - (_DWORD)v373;
        if ((v20 & 0xFFFFFFDF) != 0x47) {
          goto LABEL_285;
        }
        if (v396 >= -3 && (uint64_t v102 = v384 - v396, v384 >= v396))
        {
          int v112 = v19 & 1;
          uint64_t v384 = v102 & ~(v102 >> 63);
        }

        else
        {
LABEL_285:
          if (v51)
          {
            unsigned int v103 = v396 - 1;
            v408[0] = v51;
            if (v396 >= 1) {
              char v104 = 43;
            }
            else {
              char v104 = 45;
            }
            if (v396 - 1 < 0) {
              unsigned int v103 = 1 - v396;
            }
            v408[1] = v104;
            char v364 = v51;
            if (v103 < 0xA)
            {
              uint64_t v113 = &v409;
              if ((v51 & 0xDF) == 0x45)
              {
                char v409 = 48;
                uint64_t v113 = v410;
              }

              *uint64_t v113 = v103 + 48;
              unsigned int v108 = v113 + 1;
            }

            else
            {
              uint64_t v105 = 0LL;
              do
              {
                unsigned int v106 = v103;
                unsigned int v107 = v103;
                v103 /= 0xAu;
                v411.__mbstate8[v105-- + 5] = (v107 % 0xA) | 0x30;
              }

              while (v106 > 0x63);
              v411.__mbstate8[v105 + 5] = v103 + 48;
              unsigned int v108 = &v409;
              if (v105 + 7 <= 7)
              {
                uint64_t v109 = v105 + 5;
                char v382 = (char)v19;
                __int128 v19 = &v408[-v105 - 2];
                _platform_memmove();
                uint64_t v110 = 5LL;
                if (v109 > 5) {
                  uint64_t v110 = v109;
                }
                unsigned int v108 = &v19[v110];
                LOBYTE(v19) = v382;
              }
            }

            int v57 = 0;
            int64_t v114 = v108 - v408;
            BOOL v115 = (v19 & 1) == 0 && v384 < 2;
            uint64_t v116 = v369;
            if (v115) {
              uint64_t v116 = 0LL;
            }
            uint64_t v58 = v384 + (int)v114 + v116;
            int v368 = v114;
LABEL_326:
            v380 = v373;
            LOWORD(v19) = v377;
            goto LABEL_413;
          }

          int v112 = v19 & 1;
        }

        char v364 = 0;
        int v57 = 0;
        if (v396 <= 0) {
          uint64_t v117 = 1LL;
        }
        else {
          uint64_t v117 = v396;
        }
        if (v112) {
          BOOL v118 = 0;
        }
        else {
          BOOL v118 = v384 == 0;
        }
        uint64_t v119 = v384 + v369;
        if (v118) {
          uint64_t v119 = 0LL;
        }
        uint64_t v58 = v119 + v117;
        if (((unsigned __int16)v19 & 0x200) != 0 && v396 >= 1)
        {
          uint64_t v120 = v58;
          int v121 = grouping_init((uint64_t)v399, v396, a2);
          uint64_t v122 = v120;
          int v57 = 0;
          char v364 = 0;
          uint64_t v58 = v122 + v121;
        }

        goto LABEL_326;
      case 'L':
        LODWORD(v19) = v19 | 8;
        continue;
      case 'O':
        LOWORD(v19) = (unsigned __int16)v19 | 0x10;
        goto LABEL_153;
      case 'S':
        LOWORD(v19) = (unsigned __int16)v19 | 0x10;
        goto LABEL_158;
      case 'U':
        LOWORD(v19) = (unsigned __int16)v19 | 0x10;
        goto LABEL_162;
      case 'X':
        __int128 v64 = &__vfprintf_xdigs_upper;
        goto LABEL_171;
      case 'c':
LABEL_142:
        uint64_t v58 = v375;
        if ((v19 & 0x10) != 0)
        {
          memset(&v411, 0, sizeof(v411));
          if (v386)
          {
            __int32 v73 = *((_DWORD *)v386 + 4 * v379);
          }

          else
          {
            __int128 v94 = v402;
            v402 += 2;
            __int32 v73 = *v94;
          }

          size_t v95 = wcrtomb_l(v406, v73, &v411, a2);
          if (v95 == -1LL) {
            goto LABEL_867;
          }
          uint64_t v58 = (int)v95;
        }

        else
        {
          if (v386)
          {
            int v60 = *((_DWORD *)v386 + 4 * v379);
          }

          else
          {
            __int128 v93 = v402;
            v402 += 2;
            int v60 = *v93;
          }

          v406[0] = v60;
          uint64_t v58 = 1LL;
        }

        int v57 = 0;
        unsigned __int8 v401 = 0;
        ++v379;
        v380 = v406;
        goto LABEL_413;
      case 'd':
      case 'i':
LABEL_147:
        uint64_t v58 = v375;
        if (((unsigned __int16)v19 & 0x1C20) != 0)
        {
          if (v386)
          {
            unint64_t v61 = *((void *)v386 + 2 * v379);
            if ((v61 & 0x8000000000000000LL) == 0) {
              goto LABEL_371;
            }
          }

          else
          {
            unsigned int v80 = (unint64_t *)v402;
            v402 += 2;
            unint64_t v61 = *v80;
            if ((*v80 & 0x8000000000000000LL) == 0) {
              goto LABEL_371;
            }
          }

          unint64_t v61 = -(uint64_t)v61;
        }

        else
        {
          if ((v19 & 0x10) != 0)
          {
            if (v386)
            {
              uint64_t v71 = *((void *)v386 + 2 * v379);
            }

            else
            {
              v123 = (uint64_t *)v402;
              v402 += 2;
              uint64_t v71 = *v123;
            }
          }

          else if ((v19 & 0x40) != 0)
          {
            if (v386)
            {
              LODWORD(v71) = *((_DWORD *)v386 + 4 * v379);
            }

            else
            {
              uint64_t v71 = (uint64_t)v402;
              v402 += 2;
              LODWORD(v71) = *(_DWORD *)v71;
            }

            uint64_t v71 = (__int16)v71;
          }

          else if (((unsigned __int16)v19 & 0x2000) != 0)
          {
            if (v386)
            {
              LODWORD(v71) = *((_DWORD *)v386 + 4 * v379);
            }

            else
            {
              uint64_t v71 = (uint64_t)v402;
              v402 += 2;
              LODWORD(v71) = *(_DWORD *)v71;
            }

            uint64_t v71 = (char)v71;
          }

          else
          {
            if (v386)
            {
              LODWORD(v71) = *((_DWORD *)v386 + 4 * v379);
            }

            else
            {
              uint64_t v71 = (uint64_t)v402;
              v402 += 2;
              LODWORD(v71) = *(_DWORD *)v71;
            }

            uint64_t v71 = (int)v71;
          }

          unint64_t v61 = v361;
          if ((v71 & 0x8000000000000000LL) == 0)
          {
            unint64_t v360 = v71;
            goto LABEL_371;
          }

          unint64_t v360 = -v71;
        }

        unsigned __int8 v401 = 45;
LABEL_371:
        int v82 = 10;
        goto LABEL_397;
      case 'h':
        else {
          LODWORD(v19) = v19 | 0x40;
        }
        continue;
      case 'j':
        LODWORD(v19) = v19 | 0x1000;
        continue;
      case 'l':
        else {
          LODWORD(v19) = v19 | 0x10;
        }
        continue;
      case 'n':
        if (v386)
        {
          int v48 = v379;
          int v49 = (uint64_t *)*((void *)v386 + 2 * v379);
        }

        else
        {
          __int128 v50 = (uint64_t **)v402;
          v402 += 2;
          int v49 = *v50;
          int v48 = v379;
        }

        int v379 = v48 + 1;
        uint64_t v7 = v378;
        unint64_t v8 = (unint64_t)a3;
        if (!v49) {
          goto LABEL_6;
        }
        if ((v19 & 0x20) != 0
          || ((unsigned __int16)v19 & 0x400) != 0
          || ((unsigned __int16)v19 & 0x800) != 0
          || ((unsigned __int16)v19 & 0x1000) != 0)
        {
          if (off_18C52C3D8) {
            off_18C52C3D8(v49, 8LL);
          }
          uint64_t v7 = v378;
          *int v49 = v378;
          char v363 = 1;
          unint64_t v8 = (unint64_t)a3;
          goto LABEL_6;
        }

        if ((v19 & 0x10) != 0)
        {
          if (off_18C52C3D8) {
            off_18C52C3D8(v49, 8LL);
          }
          uint64_t v7 = v378;
          *int v49 = v378;
        }

        else if ((v19 & 0x40) != 0)
        {
          if (off_18C52C3D8) {
            off_18C52C3D8(v49, 2LL);
          }
          uint64_t v7 = v378;
          *(_WORD *)int v49 = v378;
        }

        else if (((unsigned __int16)v19 & 0x2000) != 0)
        {
          if (off_18C52C3D8) {
            off_18C52C3D8(v49, 1LL);
          }
          uint64_t v7 = v378;
          *(_BYTE *)int v49 = v378;
        }

        else
        {
          if (off_18C52C3D8) {
            off_18C52C3D8(v49, 4LL);
          }
          uint64_t v7 = v378;
          *(_DWORD *)int v49 = v378;
        }

        char v363 = 1;
        goto LABEL_5;
      case 'o':
LABEL_153:
        uint64_t v58 = v375;
        if (((unsigned __int16)v19 & 0x1C20) != 0)
        {
          if (v386)
          {
            unint64_t v61 = *((void *)v386 + 2 * v379);
          }

          else
          {
            int v81 = (unint64_t *)v402;
            v402 += 2;
            unint64_t v61 = *v81;
          }

          int v82 = 8;
          goto LABEL_396;
        }

        if ((v19 & 0x10) != 0)
        {
          if (v386)
          {
            unint64_t v74 = *((void *)v386 + 2 * v379);
          }

          else
          {
            int v124 = (unint64_t *)v402;
            v402 += 2;
            unint64_t v74 = *v124;
          }
        }

        else if ((v19 & 0x40) != 0)
        {
          if (v386)
          {
            LOWORD(v74) = *((_WORD *)v386 + 8 * v379);
          }

          else
          {
            unint64_t v74 = (unint64_t)v402;
            v402 += 2;
            LODWORD(v74) = *(_DWORD *)v74;
          }

          unint64_t v74 = (unsigned __int16)v74;
        }

        else if (((unsigned __int16)v19 & 0x2000) != 0)
        {
          if (v386)
          {
            LOBYTE(v74) = *((_BYTE *)v386 + 16 * v379);
          }

          else
          {
            unint64_t v74 = (unint64_t)v402;
            v402 += 2;
            LODWORD(v74) = *(_DWORD *)v74;
          }

          unint64_t v74 = v74;
        }

        else
        {
          if (v386)
          {
            LODWORD(v74) = *((_DWORD *)v386 + 4 * v379);
          }

          else
          {
            unint64_t v74 = (unint64_t)v402;
            v402 += 2;
            LODWORD(v74) = *(_DWORD *)v74;
          }

          unint64_t v74 = v74;
        }

        unint64_t v360 = v74;
        int v82 = 8;
        goto LABEL_387;
      case 'p':
        if (((unsigned __int16)v19 & 0x4000) == 0)
        {
          if (v386)
          {
            unint64_t v61 = *((void *)v386 + 2 * v379);
          }

          else
          {
            __int128 v98 = (unint64_t *)v402;
            v402 += 2;
            unint64_t v61 = *v98;
          }

          LOWORD(v19) = (unsigned __int16)v19 | 0x1000;
          char v388 = 120;
          int v82 = 16;
          v362 = &__vfprintf_xdigs_lower;
          goto LABEL_396;
        }

        int v57 = 0;
        unsigned int v20 = 112;
LABEL_138:
        uint64_t v58 = v375;
        goto LABEL_413;
      case 'q':
        LODWORD(v19) = v19 | 0x20;
        continue;
      case 's':
LABEL_158:
        if ((v19 & 0x10) == 0)
        {
          uint64_t v62 = v384;
          if (v386)
          {
            unsigned int v63 = (const char *)*((void *)v386 + 2 * v379);
          }

          else
          {
            unsigned int v76 = (const char **)v402;
            v402 += 2;
            unsigned int v63 = *v76;
          }

          if (!v63) {
            unsigned int v63 = "(null)";
          }
LABEL_226:
          v380 = (char *)v63;
          if ((v62 & 0x8000000000000000LL) == 0) {
            goto LABEL_227;
          }
          goto LABEL_248;
        }

        free(v371);
        uint64_t v62 = v384;
        if (v386)
        {
          int v65 = (char *)*((void *)v386 + 2 * v379);
          if (!v65) {
            goto LABEL_225;
          }
        }

        else
        {
          uint64_t v78 = (char **)v402;
          v402 += 2;
          int v65 = *v78;
          if (!*v78)
          {
LABEL_225:
            v371 = 0LL;
            unsigned int v63 = "(null)";
            goto LABEL_226;
          }
        }

        __int16 v376 = (__int16)v19;
        v381 = v65;
        if ((v384 & 0x80000000) != 0)
        {
          v403 = (__int32 *)v65;
          memset(&v411, 0, sizeof(v411));
          size_t v66 = wcsrtombs_l(0LL, (const __int32 **)&v403, 0LL, &v411, a2);
          if (v66 == -1LL) {
            goto LABEL_866;
          }
        }

        else if (v384 > 0x7F)
        {
          unint64_t v85 = 0LL;
          v403 = (__int32 *)v65;
          memset(&v411, 0, sizeof(v411));
          do
          {
            size_t v66 = v85;
            __int32 v86 = *v403++;
            size_t v87 = wcrtomb_l(v404, v86, &v411, a2);
            unint64_t v85 = v87 + v66;
          }

          while (v87 + 1 >= 2 && v85 <= v384);
        }

        else
        {
          size_t v66 = v384;
        }

        uint64_t v89 = (char *)malloc(v66 + 1);
        if (!v89) {
          goto LABEL_866;
        }
        v403 = (__int32 *)v381;
        memset(&v411, 0, sizeof(v411));
        size_t v90 = v66;
        __int128 v19 = v89;
        size_t v91 = wcsrtombs_l(v89, (const __int32 **)&v403, v90, &v411, a2);
        if (v91 == -1LL)
        {
          free(v19);
LABEL_866:
          v371 = 0LL;
LABEL_867:
          *(_WORD *)(a1 + 16) |= 0x40u;
LABEL_853:
          uint64_t v7 = v378;
          goto LABEL_854;
        }

        v19[v91] = 0;
        v371 = v19;
        v380 = v19;
        LOWORD(v19) = v376;
        if ((v384 & 0x8000000000000000LL) == 0)
        {
LABEL_227:
          unint64_t v79 = _platform_strnlen();
          goto LABEL_249;
        }

        ++v110;
        v359 = v133;
LABEL_274:
        LODWORD(v349) = 1;
        break;
      }

      goto LABEL_543;
    case 1:
      ++v109;
      if (v27 < 0 || v109 < v27) {
        goto LABEL_265;
      }
LABEL_264:
      v359 = 0;
      break;
  }

            unint64_t v77 = v101 + 1;
            uint64_t v78 = -1;
            goto LABEL_251;
          }

          v199 = (v98 * 4) >> 2;
          uint64_t v102 = __collate_equiv_value(*(void *)(a1 + 48), v95, (v98 * 4) >> 2);
          uint64_t v9 = v205;
          if (v102 > 0)
          {
            if (!v206)
            {
              unsigned int v103 = v102;
              char v104 = 5;
              goto LABEL_272;
            }

            goto LABEL_273;
          }

          unint64_t v79 = tre_search_cnames(v95, v199);
          int v212 = v79;
          if (v79 == -1) {
            goto LABEL_397;
          }
          unint64_t v77 = v101;
          if (v206) {
            goto LABEL_245;
          }
          goto LABEL_249;
        }

        if (v82 != 46)
        {
          unint64_t v79 = 91;
          int v212 = 91;
          uint64_t v9 = v205;
          goto LABEL_222;
        }

        int v83 = v75 + 2;
        uint64_t v9 = v205;
        int v84 = 0LL;
        unint64_t v85 = 0LL;
        while (1)
        {
          if (v75[v85 + 2] == 46)
          {
            __int32 v86 = &v75[v85 + 3];
            if (*v86 == 93) {
              break;
            }
          }

          ++v85;
          --v84;
        }

        int v200 = v77;
        if (!v84)
        {
LABEL_397:
          int v5 = 3LL;
          goto LABEL_406;
        }

        unint64_t v75 = (__int32 *)((char *)v75 + v85 * 4 + 12);
        int v198 = v83;
        unint64_t v79 = tre_search_cnames(v83, (v85 * 4) >> 2);
        int v212 = v79;
        if (v79 != -1) {
          goto LABEL_265;
        }
        if (v85 == 1)
        {
          unint64_t v79 = *v198;
          int v212 = *v198;
LABEL_265:
          unint64_t v77 = v200;
LABEL_222:
          if (v78 >= 1)
          {
LABEL_223:
            size_t v87 = v9;
            int v88 = v77;
            uint64_t v89 = __collate_equiv_value(*(void *)(a1 + 48), &v213, 1uLL);
            size_t v90 = __collate_equiv_value(*(void *)(a1 + 48), &v212, 1uLL);
            if (v90 < v89)
            {
              int v5 = 11LL;
LABEL_458:
              int v157 = __ptr;
              uint64_t v10 = v204;
              goto LABEL_407;
            }

            if (!v206)
            {
              size_t v91 = v90;
              unint64_t v92 = tre_new_item(2, v89, &v214, (int **)&v210);
              if ((_DWORD)v92 || (unint64_t v92 = tre_new_item(3, v91, &v214, (int **)&v210), (_DWORD)v92))
              {
                int v5 = v92;
                goto LABEL_458;
              }
            }

            uint64_t v78 = -1;
            unint64_t v77 = v88;
            uint64_t v9 = v87;
            uint64_t v10 = v204;
            goto LABEL_250;
          }

LABEL_248:
        unint64_t v79 = _platform_strlen();
LABEL_249:
        uint64_t v58 = v79;
        if (v79 > 0x7FFFFFFE) {
          goto LABEL_849;
        }
        if (*((void *)&libc_hooks + 1))
        {
          unint64_t v92 = v79;
          (*((void (**)(char *, unint64_t))&libc_hooks + 1))(v380, v79);
          uint64_t v58 = v92;
        }

        int v57 = 0;
        ++v379;
        unsigned __int8 v401 = 0;
LABEL_413:
        uint64_t v375 = v58;
        if (((unsigned __int16)v19 & 0x4000) != 0)
        {
          if (v386)
          {
            __int128 v196 = *((_OWORD *)v386 + v379);
          }

          else
          {
            v213 = (_OWORD *)(((unint64_t)v402 + 15) & 0xFFFFFFFFFFFFFFF0LL);
            v402 = (int *)(v213 + 1);
            __int128 v196 = *v213;
          }

          __int128 v394 = v196;
          v214 = (char *)&a3[-v8 - v10];
          if ((unint64_t)(v214 + 1) >= 0x22)
          {
            uint64_t v383 = v196;
            v216 = (mbstate_t *)malloc((size_t)(v214 + 2));
            *(void *)&__int128 v196 = v383;
            v215 = v216;
          }

          else
          {
            v215 = &v411;
          }

          uint64_t v217 = v374;
          if (v393 == 88)
          {
            if (v20 == 99) {
              char v393 = 0;
            }
            else {
              char v393 = 32;
            }
          }

          if ((uint64_t)(v214 - 1) >= 1)
          {
            int v218 = 0;
            int v219 = 0;
            int v220 = 0;
            v221 = (char *)&a3[v11];
            v222 = i;
            while (1)
            {
              int v224 = *v222++;
              int v223 = v224;
              uint64_t v225 = (v224 - 42);
              if (((1LL << v225) & 0x4020000000030004LL) == 0) {
                break;
              }
LABEL_572:
              uint64_t i = v222;
              if (!--v221)
              {
LABEL_579:
                if (v20 != 99)
                {
                  if (v20 == 112)
                  {
                    int v227 = 4;
                    goto LABEL_603;
                  }

                  v215->__mbstate8[v220++] = 104;
                }

                int v227 = 1;
LABEL_603:
                uint64_t v228 = 8LL;
LABEL_604:
                v235 = &v215->__mbstate8[v220];
                char *v235 = v20;
                v235[1] = 0;
                if (v219)
                {
                  if (v218)
                  {
                    switch(v227)
                    {
                      case 0:
                        uint64_t v236 = v196;
                        goto LABEL_684;
                      case 1:
                        uint64_t v236 = (unsigned __int16)v196;
                        goto LABEL_684;
                      case 2:
                        uint64_t v217 = asprintf_l((char **)&v403, a2, v215->__mbstate8, v18, v384, (void)v196);
                        break;
                      case 3:
                        uint64_t v236 = v196;
                        goto LABEL_684;
                      case 4:
                        uint64_t v236 = (unsigned __int16)v196;
                        goto LABEL_684;
                      case 5:
                        uint64_t v236 = v196;
LABEL_684:
                        uint64_t v217 = asprintf_l((char **)&v403, a2, v215->__mbstate8, v18, v384, v236);
                        break;
                      case 6:
                        uint64_t v217 = asprintf_l((char **)&v403, a2, v215->__mbstate8, v18, v384, *(float *)&v196);
                        break;
                      default:
                        break;
                    }

                    uint64_t v7 = v378 + (int)v217;
                    int v273 = v391;
                    int v274 = HIDWORD(v391);
                    v275 = &v389 + 2 * (int)v391;
                    v275[3] = (uint64_t)v403;
                    v275[4] = (int)v217;
                    uint64_t v374 = v217;
                    int v276 = v274 + v217;
                    HIDWORD(v391) = v274 + v217;
                    LODWORD(v391) = v273 + 1;
                    if (v273 < 7)
                    {
                      if (!v276) {
                        goto LABEL_698;
                      }
                      int v278 = __sfvwrite(v389, (uint64_t)&v390);
                      uint64_t v391 = 0LL;
                      if (v278) {
                        goto LABEL_854;
                      }
                    }

                    else
                    {
                      if (v276)
                      {
                        int v277 = __sfvwrite(v389, (uint64_t)&v390);
                        uint64_t v391 = 0LL;
                        if (v277) {
                          goto LABEL_854;
                        }
                      }

LABEL_698:
                      LODWORD(v391) = 0;
                    }

                    free(v403);
                    v279 = (float *)&v394 + 1;
                    uint64_t v280 = 1LL;
                    while (2)
                    {
                      if (v393)
                      {
                        int v281 = v391;
                        int v282 = HIDWORD(v391);
                        v283 = &v389 + 2 * (int)v391;
                        v283[3] = (uint64_t)&v393;
                        v283[4] = 1LL;
                        int v284 = v282 + 1;
                        HIDWORD(v391) = v284;
                        LODWORD(v391) = v281 + 1;
                        if (v281 >= 7)
                        {
                          if (v284)
                          {
                            int v285 = __sfvwrite(v389, (uint64_t)&v390);
                            uint64_t v391 = 0LL;
                            if (v285) {
                              goto LABEL_854;
                            }
                          }

                          else
                          {
                            LODWORD(v391) = 0;
                          }
                        }
                      }

                      uint64_t v286 = v374;
                      switch(v227)
                      {
                        case 0:
                        case 3:
                          uint64_t v287 = *((unsigned __int8 *)&v394 + v280);
                          goto LABEL_710;
                        case 1:
                        case 4:
                          uint64_t v287 = *((unsigned __int16 *)&v394 + v280);
                          goto LABEL_710;
                        case 2:
                        case 5:
                          uint64_t v287 = *(unsigned int *)v279;
LABEL_710:
                          uint64_t v286 = asprintf_l((char **)&v403, a2, v215->__mbstate8, v18, v384, v287);
                          break;
                        case 6:
                          uint64_t v286 = asprintf_l((char **)&v403, a2, v215->__mbstate8, v18, v384, *v279);
                          break;
                        default:
                          break;
                      }

                      v7 += (int)v286;
                      int v288 = v391;
                      int v289 = HIDWORD(v391);
                      v290 = &v389 + 2 * (int)v391;
                      v290[3] = (uint64_t)v403;
                      v290[4] = (int)v286;
                      uint64_t v374 = v286;
                      int v291 = v289 + v286;
                      HIDWORD(v391) = v289 + v286;
                      LODWORD(v391) = v288 + 1;
                      if (v288 < 7)
                      {
                        if (!v291) {
                          goto LABEL_718;
                        }
                        int v293 = __sfvwrite(v389, (uint64_t)&v390);
                        uint64_t v391 = 0LL;
                        if (v293) {
                          goto LABEL_854;
                        }
                      }

                      else
                      {
                        if (v291)
                        {
                          int v292 = __sfvwrite(v389, (uint64_t)&v390);
                          uint64_t v391 = 0LL;
                          if (v292) {
                            goto LABEL_854;
                          }
                        }

LABEL_718:
                        LODWORD(v391) = 0;
                      }

                      free(v403);
                      ++v280;
                      ++v279;
                      if (v228 == v280) {
                        goto LABEL_837;
                      }
                      continue;
                    }
                  }

                  switch(v227)
                  {
                    case 0:
                      uint64_t v238 = v196;
                      goto LABEL_762;
                    case 1:
                      uint64_t v238 = (unsigned __int16)v196;
                      goto LABEL_762;
                    case 2:
                      uint64_t v217 = asprintf_l((char **)&v403, a2, v215->__mbstate8, v18, (void)v196);
                      break;
                    case 3:
                      uint64_t v238 = v196;
                      goto LABEL_762;
                    case 4:
                      uint64_t v238 = (unsigned __int16)v196;
                      goto LABEL_762;
                    case 5:
                      uint64_t v238 = v196;
LABEL_762:
                      uint64_t v217 = asprintf_l((char **)&v403, a2, v215->__mbstate8, v18, v238);
                      break;
                    case 6:
                      uint64_t v217 = asprintf_l((char **)&v403, a2, v215->__mbstate8, v18, *(float *)&v196);
                      break;
                    default:
                      break;
                  }

                  uint64_t v7 = v378 + (int)v217;
                  int v315 = v391;
                  int v316 = HIDWORD(v391);
                  v317 = &v389 + 2 * (int)v391;
                  v317[3] = (uint64_t)v403;
                  v317[4] = (int)v217;
                  uint64_t v374 = v217;
                  int v318 = v316 + v217;
                  HIDWORD(v391) = v316 + v217;
                  LODWORD(v391) = v315 + 1;
                  if (v315 < 7)
                  {
                    if (!v318) {
                      goto LABEL_776;
                    }
                    int v320 = __sfvwrite(v389, (uint64_t)&v390);
                    uint64_t v391 = 0LL;
                    if (v320) {
                      goto LABEL_854;
                    }
                  }

                  else
                  {
                    if (v318)
                    {
                      int v319 = __sfvwrite(v389, (uint64_t)&v390);
                      uint64_t v391 = 0LL;
                      if (v319) {
                        goto LABEL_854;
                      }
                    }

LABEL_776:
                    LODWORD(v391) = 0;
                  }

                  free(v403);
                  v321 = (float *)&v394 + 1;
                  uint64_t v322 = 1LL;
                  while (2)
                  {
                    if (v393)
                    {
                      int v323 = v391;
                      int v324 = HIDWORD(v391);
                      v325 = &v389 + 2 * (int)v391;
                      v325[3] = (uint64_t)&v393;
                      v325[4] = 1LL;
                      int v326 = v324 + 1;
                      HIDWORD(v391) = v326;
                      LODWORD(v391) = v323 + 1;
                      if (v323 >= 7)
                      {
                        if (v326)
                        {
                          int v327 = __sfvwrite(v389, (uint64_t)&v390);
                          uint64_t v391 = 0LL;
                          if (v327) {
                            goto LABEL_854;
                          }
                        }

                        else
                        {
                          LODWORD(v391) = 0;
                        }
                      }
                    }

                    uint64_t v328 = v374;
                    switch(v227)
                    {
                      case 0:
                      case 3:
                        uint64_t v329 = *((unsigned __int8 *)&v394 + v322);
                        goto LABEL_788;
                      case 1:
                      case 4:
                        uint64_t v329 = *((unsigned __int16 *)&v394 + v322);
                        goto LABEL_788;
                      case 2:
                      case 5:
                        uint64_t v329 = *(unsigned int *)v321;
LABEL_788:
                        uint64_t v328 = asprintf_l((char **)&v403, a2, v215->__mbstate8, v18, v329);
                        break;
                      case 6:
                        uint64_t v328 = asprintf_l((char **)&v403, a2, v215->__mbstate8, v18, *v321);
                        break;
                      default:
                        break;
                    }

                    v7 += (int)v328;
                    int v330 = v391;
                    int v331 = HIDWORD(v391);
                    v332 = &v389 + 2 * (int)v391;
                    v332[3] = (uint64_t)v403;
                    v332[4] = (int)v328;
                    uint64_t v374 = v328;
                    int v333 = v331 + v328;
                    HIDWORD(v391) = v331 + v328;
                    LODWORD(v391) = v330 + 1;
                    if (v330 < 7)
                    {
                      if (!v333) {
                        goto LABEL_796;
                      }
                      int v335 = __sfvwrite(v389, (uint64_t)&v390);
                      uint64_t v391 = 0LL;
                      if (v335) {
                        goto LABEL_854;
                      }
                    }

                    else
                    {
                      if (v333)
                      {
                        int v334 = __sfvwrite(v389, (uint64_t)&v390);
                        uint64_t v391 = 0LL;
                        if (v334) {
                          goto LABEL_854;
                        }
                      }

LABEL_796:
                      LODWORD(v391) = 0;
                    }

                    free(v403);
                    ++v322;
                    ++v321;
                    if (v228 == v322) {
                      goto LABEL_837;
                    }
                    continue;
                  }
                }

                if (v218)
                {
                  switch(v227)
                  {
                    case 0:
                      uint64_t v237 = v196;
                      goto LABEL_723;
                    case 1:
                      uint64_t v237 = (unsigned __int16)v196;
                      goto LABEL_723;
                    case 2:
                      uint64_t v217 = asprintf_l((char **)&v403, a2, v215->__mbstate8, v384, (void)v196);
                      break;
                    case 3:
                      uint64_t v237 = v196;
                      goto LABEL_723;
                    case 4:
                      uint64_t v237 = (unsigned __int16)v196;
                      goto LABEL_723;
                    case 5:
                      uint64_t v237 = v196;
LABEL_723:
                      uint64_t v217 = asprintf_l((char **)&v403, a2, v215->__mbstate8, v384, v237);
                      break;
                    case 6:
                      uint64_t v217 = asprintf_l((char **)&v403, a2, v215->__mbstate8, v384, *(float *)&v196);
                      break;
                    default:
                      break;
                  }

                  uint64_t v7 = v378 + (int)v217;
                  int v294 = v391;
                  int v295 = HIDWORD(v391);
                  v296 = &v389 + 2 * (int)v391;
                  v296[3] = (uint64_t)v403;
                  v296[4] = (int)v217;
                  uint64_t v374 = v217;
                  int v297 = v295 + v217;
                  HIDWORD(v391) = v295 + v217;
                  LODWORD(v391) = v294 + 1;
                  if (v294 < 7)
                  {
                    if (!v297) {
                      goto LABEL_737;
                    }
                    int v299 = __sfvwrite(v389, (uint64_t)&v390);
                    uint64_t v391 = 0LL;
                    if (v299) {
                      goto LABEL_854;
                    }
                  }

                  else
                  {
                    if (v297)
                    {
                      int v298 = __sfvwrite(v389, (uint64_t)&v390);
                      uint64_t v391 = 0LL;
                      if (v298) {
                        goto LABEL_854;
                      }
                    }

LABEL_737:
                    LODWORD(v391) = 0;
                  }

                  free(v403);
                  v300 = (float *)&v394 + 1;
                  uint64_t v301 = 1LL;
                  while (2)
                  {
                    if (v393)
                    {
                      int v302 = v391;
                      int v303 = HIDWORD(v391);
                      v304 = &v389 + 2 * (int)v391;
                      v304[3] = (uint64_t)&v393;
                      v304[4] = 1LL;
                      int v305 = v303 + 1;
                      HIDWORD(v391) = v305;
                      LODWORD(v391) = v302 + 1;
                      if (v302 >= 7)
                      {
                        if (v305)
                        {
                          int v306 = __sfvwrite(v389, (uint64_t)&v390);
                          uint64_t v391 = 0LL;
                          if (v306) {
                            goto LABEL_854;
                          }
                        }

                        else
                        {
                          LODWORD(v391) = 0;
                        }
                      }
                    }

                    uint64_t v307 = v374;
                    switch(v227)
                    {
                      case 0:
                      case 3:
                        uint64_t v308 = *((unsigned __int8 *)&v394 + v301);
                        goto LABEL_749;
                      case 1:
                      case 4:
                        uint64_t v308 = *((unsigned __int16 *)&v394 + v301);
                        goto LABEL_749;
                      case 2:
                      case 5:
                        uint64_t v308 = *(unsigned int *)v300;
LABEL_749:
                        uint64_t v307 = asprintf_l((char **)&v403, a2, v215->__mbstate8, v384, v308);
                        break;
                      case 6:
                        uint64_t v307 = asprintf_l((char **)&v403, a2, v215->__mbstate8, v384, *v300);
                        break;
                      default:
                        break;
                    }

                    v7 += (int)v307;
                    int v309 = v391;
                    int v310 = HIDWORD(v391);
                    v311 = &v389 + 2 * (int)v391;
                    v311[3] = (uint64_t)v403;
                    v311[4] = (int)v307;
                    uint64_t v374 = v307;
                    int v312 = v310 + v307;
                    HIDWORD(v391) = v310 + v307;
                    LODWORD(v391) = v309 + 1;
                    if (v309 < 7)
                    {
                      if (!v312) {
                        goto LABEL_757;
                      }
                      int v314 = __sfvwrite(v389, (uint64_t)&v390);
                      uint64_t v391 = 0LL;
                      if (v314) {
                        goto LABEL_854;
                      }
                    }

                    else
                    {
                      if (v312)
                      {
                        int v313 = __sfvwrite(v389, (uint64_t)&v390);
                        uint64_t v391 = 0LL;
                        if (v313) {
                          goto LABEL_854;
                        }
                      }

LABEL_757:
                      LODWORD(v391) = 0;
                    }

                    free(v403);
                    ++v301;
                    ++v300;
                    if (v228 == v301) {
                      goto LABEL_837;
                    }
                    continue;
                  }
                }

                switch(v227)
                {
                  case 0:
                    uint64_t v239 = v196;
                    goto LABEL_805;
                  case 1:
                    uint64_t v239 = (unsigned __int16)v196;
                    goto LABEL_805;
                  case 2:
                    uint64_t v217 = asprintf_l((char **)&v403, a2, v215->__mbstate8, (void)v196);
                    break;
                  case 3:
                    uint64_t v239 = v196;
                    goto LABEL_805;
                  case 4:
                    uint64_t v239 = (unsigned __int16)v196;
                    goto LABEL_805;
                  case 5:
                    uint64_t v239 = v196;
LABEL_805:
                    uint64_t v217 = asprintf_l((char **)&v403, a2, v215->__mbstate8, v239);
                    break;
                  case 6:
                    uint64_t v217 = asprintf_l((char **)&v403, a2, v215->__mbstate8, *(float *)&v196);
                    break;
                  default:
                    break;
                }

                uint64_t v7 = v378 + (int)v217;
                int v336 = v391;
                int v337 = HIDWORD(v391);
                v338 = &v389 + 2 * (int)v391;
                v338[3] = (uint64_t)v403;
                v338[4] = (int)v217;
                uint64_t v374 = v217;
                int v339 = v337 + v217;
                HIDWORD(v391) = v337 + v217;
                LODWORD(v391) = v336 + 1;
                if (v336 < 7)
                {
                  if (!v339) {
                    goto LABEL_813;
                  }
                  int v341 = __sfvwrite(v389, (uint64_t)&v390);
                  uint64_t v391 = 0LL;
                  if (v341) {
                    goto LABEL_854;
                  }
                }

                else
                {
                  if (v339)
                  {
                    int v340 = __sfvwrite(v389, (uint64_t)&v390);
                    uint64_t v391 = 0LL;
                    if (v340) {
                      goto LABEL_854;
                    }
                  }

LABEL_813:
                  LODWORD(v391) = 0;
                }

                free(v403);
                v342 = (float *)&v394 + 1;
                uint64_t v343 = 1LL;
                while (2)
                {
                  if (v393)
                  {
                    int v344 = v391;
                    int v345 = HIDWORD(v391);
                    v346 = &v389 + 2 * (int)v391;
                    v346[3] = (uint64_t)&v393;
                    v346[4] = 1LL;
                    int v347 = v345 + 1;
                    HIDWORD(v391) = v347;
                    LODWORD(v391) = v344 + 1;
                    if (v344 >= 7)
                    {
                      if (v347)
                      {
                        int v348 = __sfvwrite(v389, (uint64_t)&v390);
                        uint64_t v391 = 0LL;
                        if (v348) {
                          goto LABEL_854;
                        }
                      }

                      else
                      {
                        LODWORD(v391) = 0;
                      }
                    }
                  }

                  uint64_t v349 = v374;
                  switch(v227)
                  {
                    case 0:
                    case 3:
                      uint64_t v350 = *((unsigned __int8 *)&v394 + v343);
                      goto LABEL_825;
                    case 1:
                    case 4:
                      uint64_t v350 = *((unsigned __int16 *)&v394 + v343);
                      goto LABEL_825;
                    case 2:
                    case 5:
                      uint64_t v350 = *(unsigned int *)v342;
LABEL_825:
                      uint64_t v349 = asprintf_l((char **)&v403, a2, v215->__mbstate8, v350);
                      break;
                    case 6:
                      uint64_t v349 = asprintf_l((char **)&v403, a2, v215->__mbstate8, *v342);
                      break;
                    default:
                      break;
                  }

                  v7 += (int)v349;
                  int v351 = v391;
                  int v352 = HIDWORD(v391);
                  v353 = &v389 + 2 * (int)v391;
                  v353[3] = (uint64_t)v403;
                  v353[4] = (int)v349;
                  uint64_t v374 = v349;
                  int v354 = v352 + v349;
                  HIDWORD(v391) = v352 + v349;
                  LODWORD(v391) = v351 + 1;
                  if (v351 < 7)
                  {
                    if (!v354) {
                      goto LABEL_833;
                    }
                    int v356 = __sfvwrite(v389, (uint64_t)&v390);
                    uint64_t v391 = 0LL;
                    if (v356) {
                      goto LABEL_854;
                    }
                  }

                  else
                  {
                    if (v354)
                    {
                      int v355 = __sfvwrite(v389, (uint64_t)&v390);
                      uint64_t v391 = 0LL;
                      if (v355) {
                        goto LABEL_854;
                      }
                    }

LABEL_833:
                    LODWORD(v391) = 0;
                  }

                  free(v403);
                  ++v343;
                  ++v342;
                  if (v228 == v343)
                  {
LABEL_837:
                    if (v215 != &v411) {
                      free(v215);
                    }
                    ++v379;
                    goto LABEL_5;
                  }

                  continue;
                }
              }
            }

            if (v225)
            {
LABEL_569:
              if (v223 == 108 || v223 == 118) {
                goto LABEL_572;
              }
            }

            else if (*(i - 1) == 46)
            {
              int v218 = 1;
            }

            else
            {
              int v219 = 1;
            }

            v215->__mbstate8[v220++] = v223;
            goto LABEL_572;
          }

          int v220 = 0;
          int v219 = 0;
          int v218 = 0;
LABEL_574:
          if ((v19 & 0x10) == 0)
          {
            char v226 = v20 - 65;
            if (v20 - 65 > 0x2F) {
              goto LABEL_678;
            }
            if (((1LL << v226) & 0x7100000051LL) != 0)
            {
              int v227 = 6;
LABEL_585:
              uint64_t v228 = 4LL;
              goto LABEL_604;
            }

            if (((1LL << v226) & 0x800400000000LL) == 0)
            {
LABEL_678:
              *(_WORD *)&v215->__mbstate8[v220] = 26728;
              v220 += 2;
            }

            if (v20 == 112) {
              int v227 = 3;
            }
            else {
              int v227 = 0;
            }
            uint64_t v228 = 16LL;
            goto LABEL_604;
          }

          if (v20 == 112) {
            int v227 = 5;
          }
          else {
            int v227 = 2;
          }
          goto LABEL_585;
        }

        if (v57 > v58) {
          uint64_t v58 = v57;
        }
        int v129 = v401;
        if (v401) {
          ++v58;
        }
        if (v388) {
          uint64_t v130 = v58 + 2;
        }
        else {
          uint64_t v130 = v58;
        }
        if (v18 <= v130) {
          uint64_t v131 = v130;
        }
        else {
          uint64_t v131 = v18;
        }
        uint64_t v7 = v131 + v378;
        if (v131 + v378 >= 0x7FFFFFFF)
        {
LABEL_848:
          *__error() = 84;
LABEL_849:
          uint64_t v7 = -1LL;
          goto LABEL_854;
        }

        if ((v19 & 0x84) == 0)
        {
          int v132 = v18 - v130;
          if ((int)v18 - (int)v130 >= 1)
          {
            int v133 = v391;
            int v134 = HIDWORD(v391);
            do
            {
              int v135 = v133;
              if (v132 >= 16) {
                uint64_t v136 = 16LL;
              }
              else {
                uint64_t v136 = v132;
              }
              int v137 = &v389 + 2 * v133;
              v137[3] = (uint64_t)&blanks;
              v137[4] = v136;
              v134 += v136;
              int v133 = v135 + 1;
              HIDWORD(v391) = v134;
              LODWORD(v391) = v135 + 1;
              if (v135 >= 7)
              {
                if (v134)
                {
                  int v138 = __sfvwrite(v389, (uint64_t)&v390);
                  int v134 = 0;
                  int v133 = 0;
                  uint64_t v391 = 0LL;
                  if (v138) {
                    goto LABEL_853;
                  }
                }

                else
                {
                  int v133 = 0;
                  LODWORD(v391) = 0;
                }
              }

              BOOL v139 = __OFSUB__(v132, (_DWORD)v136);
              v132 -= v136;
            }

            while (!((v132 < 0) ^ v139 | (v132 == 0)));
            int v129 = v401;
          }
        }

        if (v129)
        {
          int v140 = v391;
          int v141 = HIDWORD(v391);
          int v142 = &v389 + 2 * (int)v391;
          v142[3] = (uint64_t)&v401;
          v142[4] = 1LL;
          int v143 = v141 + 1;
          HIDWORD(v391) = v143;
          LODWORD(v391) = v140 + 1;
          if (v140 >= 7)
          {
            if (v143)
            {
              int v144 = __sfvwrite(v389, (uint64_t)&v390);
              uint64_t v391 = 0LL;
              if (v144) {
                goto LABEL_853;
              }
            }

            else
            {
              LODWORD(v391) = 0;
            }
          }
        }

        if (v388)
        {
          char v387 = 48;
          int v145 = v391;
          int v146 = HIDWORD(v391);
          int v147 = &v389 + 2 * (int)v391;
          v147[3] = (uint64_t)&v387;
          v147[4] = 2LL;
          int v148 = v146 + 2;
          HIDWORD(v391) = v148;
          LODWORD(v391) = v145 + 1;
          if (v145 >= 7)
          {
            if (v148)
            {
              int v149 = __sfvwrite(v389, (uint64_t)&v390);
              uint64_t v391 = 0LL;
              if (v149) {
                goto LABEL_853;
              }
            }

            else
            {
              LODWORD(v391) = 0;
            }
          }
        }

        if ((v19 & 0x84) == 0x80)
        {
          int v150 = v18 - v130;
          if ((int)v18 - (int)v130 >= 1)
          {
            int v151 = v391;
            int v152 = HIDWORD(v391);
            do
            {
              int v153 = v151;
              if (v150 >= 16) {
                uint64_t v154 = 16LL;
              }
              else {
                uint64_t v154 = v150;
              }
              int v155 = &v389 + 2 * v151;
              v155[3] = (uint64_t)"0000000000000000";
              v155[4] = v154;
              v152 += v154;
              int v151 = v153 + 1;
              HIDWORD(v391) = v152;
              LODWORD(v391) = v153 + 1;
              if (v153 >= 7)
              {
                if (v152)
                {
                  int v156 = __sfvwrite(v389, (uint64_t)&v390);
                  int v152 = 0;
                  int v151 = 0;
                  uint64_t v391 = 0LL;
                  if (v156) {
                    goto LABEL_853;
                  }
                }

                else
                {
                  int v151 = 0;
                  LODWORD(v391) = 0;
                }
              }

              BOOL v139 = __OFSUB__(v150, (_DWORD)v154);
              v150 -= v154;
            }

            while (!((v150 < 0) ^ v139 | (v150 == 0)));
          }
        }

        if (((unsigned __int16)v19 & 0x100) == 0)
        {
          int v157 = v57 - v375;
          if (v157 >= 1)
          {
            int v158 = v391;
            int v159 = HIDWORD(v391);
            do
            {
              int v160 = v158;
              if (v157 >= 16) {
                uint64_t v161 = 16LL;
              }
              else {
                uint64_t v161 = v157;
              }
              v162 = &v389 + 2 * v158;
              v162[3] = (uint64_t)"0000000000000000";
              v162[4] = v161;
              v159 += v161;
              int v158 = v160 + 1;
              HIDWORD(v391) = v159;
              LODWORD(v391) = v160 + 1;
              if (v160 >= 7)
              {
                if (v159)
                {
                  int v163 = __sfvwrite(v389, (uint64_t)&v390);
                  int v159 = 0;
                  int v158 = 0;
                  uint64_t v391 = 0LL;
                  if (v163) {
                    goto LABEL_853;
                  }
                }

                else
                {
                  int v158 = 0;
                  LODWORD(v391) = 0;
                }
              }

              BOOL v139 = __OFSUB__(v157, (_DWORD)v161);
              v157 -= v161;
            }

            while (!((v157 < 0) ^ v139 | (v157 == 0)));
          }

          if (v400)
          {
            goto LABEL_659;
          }

          int v173 = v391;
          int v174 = HIDWORD(v391);
          v175 = &v389 + 2 * (int)v391;
          v175[3] = (uint64_t)v380;
          v175[4] = (int)v375;
          int v176 = v174 + v375;
          HIDWORD(v391) = v176;
          LODWORD(v391) = v173 + 1;
          if (v173 < 7) {
            goto LABEL_659;
          }
          if (!v176) {
            goto LABEL_493;
          }
LABEL_545:
          int v212 = __sfvwrite(v389, (uint64_t)&v390);
          uint64_t v391 = 0LL;
          if (v212) {
            goto LABEL_853;
          }
          goto LABEL_659;
        }

        if (v364)
        {
          if (v384 > 1 || (v19 & 1) != 0)
          {
            int v177 = v391;
            int v178 = HIDWORD(v391);
            v179 = &v389 + 2 * (int)v391;
            v179[3] = (uint64_t)v380;
            v179[4] = 1LL;
            int v180 = v178 + 1;
            int v181 = v177 + 1;
            HIDWORD(v391) = v180;
            LODWORD(v391) = v177 + 1;
            if (v177 < 7)
            {
              int v182 = v367;
            }

            else
            {
              int v182 = v367;
              if (v180)
              {
                int v183 = __sfvwrite(v389, (uint64_t)&v390);
                int v180 = 0;
                int v181 = 0;
                uint64_t v391 = 0LL;
                if (v183) {
                  goto LABEL_853;
                }
              }

              else
              {
                int v181 = 0;
              }
            }

            v199 = &v389 + 2 * v181;
            v199[3] = (uint64_t)decimal_point;
            v199[4] = v369;
            int v200 = v180 + v369;
            int v201 = v181 + 1;
            HIDWORD(v391) = v200;
            LODWORD(v391) = v181 + 1;
            if (v181 >= 7)
            {
              if (v200)
              {
                int v202 = __sfvwrite(v389, (uint64_t)&v390);
                int v200 = 0;
                int v201 = 0;
                uint64_t v391 = 0LL;
                if (v202) {
                  goto LABEL_853;
                }
              }

              else
              {
                int v201 = 0;
              }
            }

            v203 = &v389 + 2 * v201;
            v203[3] = (uint64_t)(v380 + 1);
            v203[4] = v182 - 1;
            int v167 = v200 + v182 - 1;
            int v168 = v201 + 1;
            HIDWORD(v391) = v167;
            LODWORD(v391) = v201 + 1;
            if (v201 >= 7)
            {
              if (v167)
              {
                int v204 = __sfvwrite(v389, (uint64_t)&v390);
                int v167 = 0;
                int v168 = 0;
                uint64_t v391 = 0LL;
                if (v204) {
                  goto LABEL_853;
                }
              }

              else
              {
                int v168 = 0;
              }
            }

            int v205 = v384 - v182;
            if (v205 >= 1)
            {
              do
              {
                int v206 = v168;
                if (v205 >= 16) {
                  uint64_t v207 = 16LL;
                }
                else {
                  uint64_t v207 = v205;
                }
                v208 = &v389 + 2 * v168;
                v208[3] = (uint64_t)"0000000000000000";
                v208[4] = v207;
                v167 += v207;
                int v168 = v206 + 1;
                HIDWORD(v391) = v167;
                LODWORD(v391) = v206 + 1;
                if (v206 >= 7)
                {
                  if (v167)
                  {
                    int v209 = __sfvwrite(v389, (uint64_t)&v390);
                    int v167 = 0;
                    int v168 = 0;
                    uint64_t v391 = 0LL;
                    if (v209) {
                      goto LABEL_853;
                    }
                  }

                  else
                  {
                    int v168 = 0;
                    LODWORD(v391) = 0;
                  }
                }

                BOOL v139 = __OFSUB__(v205, (_DWORD)v207);
                v205 -= v207;
              }

              while (!((v205 < 0) ^ v139 | (v205 == 0)));
            }
          }

          else
          {
            int v164 = v391;
            int v165 = HIDWORD(v391);
            v166 = &v389 + 2 * (int)v391;
            v166[3] = (uint64_t)v380;
            v166[4] = 1LL;
            int v167 = v165 + 1;
            int v168 = v164 + 1;
            HIDWORD(v391) = v167;
            LODWORD(v391) = v164 + 1;
            if (v164 >= 7)
            {
              if (v167)
              {
                int v169 = __sfvwrite(v389, (uint64_t)&v390);
                int v167 = 0;
                int v168 = 0;
                uint64_t v391 = 0LL;
                if (v169) {
                  goto LABEL_853;
                }
              }

              else
              {
                int v168 = 0;
              }
            }
          }

          v210 = &v389 + 2 * v168;
          v210[3] = (uint64_t)v408;
          v210[4] = v368;
          int v211 = v167 + v368;
          HIDWORD(v391) = v211;
          LODWORD(v391) = v168 + 1;
          if (v168 < 7) {
            goto LABEL_659;
          }
          if (!v211)
          {
LABEL_493:
            LODWORD(v391) = 0;
            goto LABEL_659;
          }

          goto LABEL_545;
        }

        int v170 = v396;
        if (v396 > 0)
        {
          if (v400)
          {
            uint64_t v171 = (uint64_t)v380;
            int v172 = grouping_print((uint64_t)v399, (uint64_t)&v389, (uint64_t)v380, (unint64_t)v395);
            if (v172 < 0) {
              goto LABEL_853;
            }
          }

          else
          {
            else {
              uint64_t v190 = ((_DWORD)v395 - (_DWORD)v380);
            }
            if ((int)v190 < 1)
            {
              LODWORD(v190) = 0;
            }

            else
            {
              int v191 = v391;
              int v192 = HIDWORD(v391);
              v193 = &v389 + 2 * (int)v391;
              v193[3] = (uint64_t)v380;
              v193[4] = v190;
              int v194 = v192 + v190;
              HIDWORD(v391) = v194;
              LODWORD(v391) = v191 + 1;
              if (v191 >= 7)
              {
                if (v194)
                {
                  int v195 = __sfvwrite(v389, (uint64_t)&v390);
                  uint64_t v391 = 0LL;
                  if (v195) {
                    goto LABEL_853;
                  }
                }

                else
                {
                  LODWORD(v391) = 0;
                }
              }
            }

            int v240 = v170 - v190;
            if (v240 >= 1)
            {
              int v241 = v391;
              int v242 = HIDWORD(v391);
              do
              {
                int v243 = v241;
                if (v240 >= 16) {
                  uint64_t v244 = 16LL;
                }
                else {
                  uint64_t v244 = v240;
                }
                v245 = &v389 + 2 * v241;
                v245[3] = (uint64_t)"0000000000000000";
                v245[4] = v244;
                v242 += v244;
                int v241 = v243 + 1;
                HIDWORD(v391) = v242;
                LODWORD(v391) = v243 + 1;
                if (v243 >= 7)
                {
                  if (v242)
                  {
                    int v246 = __sfvwrite(v389, (uint64_t)&v390);
                    int v242 = 0;
                    int v241 = 0;
                    uint64_t v391 = 0LL;
                    if (v246) {
                      goto LABEL_853;
                    }
                  }

                  else
                  {
                    int v241 = 0;
                    LODWORD(v391) = 0;
                  }
                }

                BOOL v139 = __OFSUB__(v240, (_DWORD)v244);
                v240 -= v244;
              }

              while (!((v240 < 0) ^ v139 | (v240 == 0)));
            }

            int v172 = v396;
            uint64_t v171 = (uint64_t)v380;
          }

          v380 = (char *)(v171 + v172);
          LODWORD(v171) = v384;
          if (v384 || (v19 & 1) != 0)
          {
            int v247 = v391;
            int v248 = HIDWORD(v391);
            v249 = &v389 + 2 * (int)v391;
            v249[3] = (uint64_t)decimal_point;
            v249[4] = v369;
            int v250 = v248 + v369;
            HIDWORD(v391) = v250;
            LODWORD(v391) = v247 + 1;
            if (v247 >= 7)
            {
              if (v250)
              {
                int v251 = __sfvwrite(v389, (uint64_t)&v390);
                uint64_t v391 = 0LL;
                if (v251) {
                  goto LABEL_853;
                }
              }

              else
              {
                LODWORD(v391) = 0;
              }
            }
          }

          else
          {
            LODWORD(v171) = 0;
          }

          goto LABEL_637;
        }

        int v184 = v391;
        int v185 = HIDWORD(v391);
        v186 = &v389 + 2 * (int)v391;
        v186[3] = (uint64_t)"0000000000000000";
        v186[4] = 1LL;
        int v187 = v185 + 1;
        int v188 = v184 + 1;
        HIDWORD(v391) = v187;
        LODWORD(v391) = v184 + 1;
        if (v184 < 7)
        {
          uint64_t v171 = v384;
          goto LABEL_514;
        }

        uint64_t v171 = v384;
        if (v187)
        {
          int v189 = __sfvwrite(v389, (uint64_t)&v390);
          int v187 = 0;
          int v188 = 0;
          uint64_t v391 = 0LL;
          if (v189) {
            goto LABEL_853;
          }
LABEL_514:
          if (v171) {
            goto LABEL_516;
          }
          goto LABEL_515;
        }

        int v188 = 0;
        LODWORD(v391) = 0;
        if (v384)
        {
LABEL_516:
          v197 = &v389 + 2 * v188;
          v197[3] = (uint64_t)decimal_point;
          v197[4] = v369;
          v187 += v369;
          HIDWORD(v391) = v187;
          LODWORD(v391) = v188 + 1;
          if (v188 < 7)
          {
            ++v188;
          }

          else if (v187)
          {
            int v198 = __sfvwrite(v389, (uint64_t)&v390);
            int v187 = 0;
            int v188 = 0;
            uint64_t v391 = 0LL;
            if (v198) {
              goto LABEL_853;
            }
          }

          else
          {
            int v188 = 0;
            LODWORD(v391) = 0;
          }

          goto LABEL_587;
        }

LABEL_515:
LABEL_587:
        int v229 = v396;
        if (v396 < 0)
        {
          int v230 = -v396;
          do
          {
            int v231 = v188;
            if (v230 >= 16) {
              uint64_t v232 = 16LL;
            }
            else {
              uint64_t v232 = v230;
            }
            v233 = &v389 + 2 * v188;
            v233[3] = (uint64_t)"0000000000000000";
            v233[4] = v232;
            v187 += v232;
            int v188 = v231 + 1;
            HIDWORD(v391) = v187;
            LODWORD(v391) = v231 + 1;
            if (v231 >= 7)
            {
              if (v187)
              {
                int v234 = __sfvwrite(v389, (uint64_t)&v390);
                int v187 = 0;
                int v188 = 0;
                uint64_t v391 = 0LL;
                if (v234) {
                  goto LABEL_853;
                }
              }

              else
              {
                int v188 = 0;
                LODWORD(v391) = 0;
              }
            }

            BOOL v139 = __OFSUB__(v230, (_DWORD)v232);
            v230 -= v232;
          }

          while (!((v230 < 0) ^ v139 | (v230 == 0)));
          int v229 = v396;
          LODWORD(v171) = v384;
        }

        LODWORD(v171) = v171 + v229;
LABEL_637:
        int v252 = v171;
        else {
          uint64_t v171 = ((_DWORD)v395 - (_DWORD)v380);
        }
        if ((int)v171 < 1)
        {
          LODWORD(v171) = 0;
        }

        else
        {
          int v253 = v391;
          int v254 = HIDWORD(v391);
          v255 = &v389 + 2 * (int)v391;
          v255[3] = (uint64_t)v380;
          v255[4] = v171;
          int v256 = v254 + v171;
          HIDWORD(v391) = v256;
          LODWORD(v391) = v253 + 1;
          if (v253 >= 7)
          {
            if (v256)
            {
              int v257 = __sfvwrite(v389, (uint64_t)&v390);
              uint64_t v391 = 0LL;
              if (v257) {
                goto LABEL_853;
              }
            }

            else
            {
              LODWORD(v391) = 0;
            }
          }
        }

        int v258 = v252 - v171;
        if (v258 >= 1)
        {
          int v259 = v391;
          int v260 = HIDWORD(v391);
          do
          {
            int v261 = v259;
            if (v258 >= 16) {
              uint64_t v262 = 16LL;
            }
            else {
              uint64_t v262 = v258;
            }
            v263 = &v389 + 2 * v259;
            v263[3] = (uint64_t)"0000000000000000";
            v263[4] = v262;
            v260 += v262;
            int v259 = v261 + 1;
            HIDWORD(v391) = v260;
            LODWORD(v391) = v261 + 1;
            if (v261 >= 7)
            {
              if (v260)
              {
                int v264 = __sfvwrite(v389, (uint64_t)&v390);
                int v260 = 0;
                int v259 = 0;
                uint64_t v391 = 0LL;
                if (v264) {
                  goto LABEL_853;
                }
              }

              else
              {
                int v259 = 0;
                LODWORD(v391) = 0;
              }
            }

            BOOL v139 = __OFSUB__(v258, (_DWORD)v262);
            v258 -= v262;
          }

          while (!((v258 < 0) ^ v139 | (v258 == 0)));
        }

LABEL_659:
        if ((v19 & 4) != 0)
        {
          int v265 = v18 - v130;
          if ((int)v18 - (int)v130 >= 1)
          {
            int v266 = v391;
            int v267 = HIDWORD(v391);
            do
            {
              int v268 = v266;
              if (v265 >= 16) {
                uint64_t v269 = 16LL;
              }
              else {
                uint64_t v269 = v265;
              }
              v270 = &v389 + 2 * v266;
              v270[3] = (uint64_t)&blanks;
              v270[4] = v269;
              v267 += v269;
              int v266 = v268 + 1;
              HIDWORD(v391) = v267;
              LODWORD(v391) = v268 + 1;
              if (v268 >= 7)
              {
                if (v267)
                {
                  int v271 = __sfvwrite(v389, (uint64_t)&v390);
                  int v267 = 0;
                  int v266 = 0;
                  uint64_t v391 = 0LL;
                  if (v271) {
                    goto LABEL_853;
                  }
                }

                else
                {
                  int v266 = 0;
                  LODWORD(v391) = 0;
                }
              }

              BOOL v139 = __OFSUB__(v265, (_DWORD)v269);
              v265 -= v269;
            }

            while (!((v265 < 0) ^ v139 | (v265 == 0)));
          }
        }

        if (HIDWORD(v391))
        {
          int v272 = __sfvwrite(v389, (uint64_t)&v390);
          HIDWORD(v391) = 0;
        }

        else
        {
          int v272 = 0;
        }

        LODWORD(v391) = 0;
        if (!v272) {
          goto LABEL_5;
        }
LABEL_854:
        if (v373) {
          __freedtoa((uint64_t)v373);
        }
        free(v371);
        __int16 v357 = *(_WORD *)(a1 + 16);
        if (v386 && v386 != v405) {
          free(v386);
        }
        if ((v357 & 0x40) != 0) {
          unint64_t v358 = -1LL;
        }
        else {
          unint64_t v358 = v7;
        }
        if (v358 > 0x7FFFFFFE) {
          return 0xFFFFFFFFLL;
        }
        else {
          return v358;
        }
      case 't':
        LODWORD(v19) = v19 | 0x800;
        continue;
      case 'u':
LABEL_162:
        uint64_t v58 = v375;
        if (((unsigned __int16)v19 & 0x1C20) != 0)
        {
          if (v386)
          {
            unint64_t v61 = *((void *)v386 + 2 * v379);
          }

          else
          {
            int v83 = (unint64_t *)v402;
            v402 += 2;
            unint64_t v61 = *v83;
          }

          int v82 = 10;
        }

        else
        {
          if ((v19 & 0x10) != 0)
          {
            if (v386)
            {
              unint64_t v75 = *((void *)v386 + 2 * v379);
            }

            else
            {
              unsigned __int8 v125 = (unint64_t *)v402;
              v402 += 2;
              unint64_t v75 = *v125;
            }
          }

          else if ((v19 & 0x40) != 0)
          {
            if (v386)
            {
              LOWORD(v75) = *((_WORD *)v386 + 8 * v379);
            }

            else
            {
              unint64_t v75 = (unint64_t)v402;
              v402 += 2;
              LODWORD(v75) = *(_DWORD *)v75;
            }

            unint64_t v75 = (unsigned __int16)v75;
          }

          else if (((unsigned __int16)v19 & 0x2000) != 0)
          {
            if (v386)
            {
              LOBYTE(v75) = *((_BYTE *)v386 + 16 * v379);
            }

            else
            {
              unint64_t v75 = (unint64_t)v402;
              v402 += 2;
              LODWORD(v75) = *(_DWORD *)v75;
            }

            unint64_t v75 = v75;
          }

          else
          {
            if (v386)
            {
              LODWORD(v75) = *((_DWORD *)v386 + 4 * v379);
            }

            else
            {
              unint64_t v75 = (unint64_t)v402;
              v402 += 2;
              LODWORD(v75) = *(_DWORD *)v75;
            }

            unint64_t v75 = v75;
          }

          unint64_t v360 = v75;
          int v82 = 10;
LABEL_387:
          unint64_t v61 = v361;
        }

        goto LABEL_396;
      case 'v':
        LODWORD(v19) = v19 | 0x4000;
        continue;
      case 'x':
        __int128 v64 = &__vfprintf_xdigs_lower;
LABEL_171:
        v362 = v64;
        uint64_t v58 = v375;
        if (((unsigned __int16)v19 & 0x4000) != 0)
        {
LABEL_175:
          int v57 = 0;
          goto LABEL_413;
        }

        if (((unsigned __int16)v19 & 0x1C20) != 0)
        {
          if (v386)
          {
            unint64_t v61 = *((void *)v386 + 2 * v379);
          }

          else
          {
            int v84 = (unint64_t *)v402;
            v402 += 2;
            unint64_t v61 = *v84;
          }
        }

        else
        {
          if ((v19 & 0x10) != 0)
          {
            if (v386)
            {
              unint64_t v77 = *((void *)v386 + 2 * v379);
            }

            else
            {
              int v126 = (unint64_t *)v402;
              v402 += 2;
              unint64_t v77 = *v126;
            }
          }

          else if ((v19 & 0x40) != 0)
          {
            if (v386)
            {
              LOWORD(v77) = *((_WORD *)v386 + 8 * v379);
            }

            else
            {
              unint64_t v77 = (unint64_t)v402;
              v402 += 2;
              LODWORD(v77) = *(_DWORD *)v77;
            }

            unint64_t v77 = (unsigned __int16)v77;
          }

          else if (((unsigned __int16)v19 & 0x2000) != 0)
          {
            if (v386)
            {
              LOBYTE(v77) = *((_BYTE *)v386 + 16 * v379);
            }

            else
            {
              unint64_t v77 = (unint64_t)v402;
              v402 += 2;
              LODWORD(v77) = *(_DWORD *)v77;
            }

            unint64_t v77 = v77;
          }

          else
          {
            if (v386)
            {
              LODWORD(v77) = *((_DWORD *)v386 + 4 * v379);
            }

            else
            {
              unint64_t v77 = (unint64_t)v402;
              v402 += 2;
              LODWORD(v77) = *(_DWORD *)v77;
            }

            unint64_t v77 = v77;
          }

          unint64_t v360 = v77;
          unint64_t v61 = v361;
        }

        if (((unsigned __int16)v19 & 0x1C20) != 0)
        {
          if (!v61) {
            goto LABEL_395;
          }
LABEL_394:
          char v388 = v20;
          goto LABEL_395;
        }

        if (v360) {
          goto LABEL_394;
        }
LABEL_395:
        LOWORD(v19) = (unsigned __int16)v19 & 0xFDFF;
        int v82 = 16;
LABEL_396:
        unsigned __int8 v401 = 0;
LABEL_397:
        int v127 = v19 & 1;
        unint64_t v361 = v61;
        if (((unsigned __int16)v19 & 0x1C20) != 0)
        {
          if (v61 | v384) {
            goto LABEL_408;
          }
          int v128 = v408;
          if (v82 == 8)
          {
            int v128 = v408;
            if ((v19 & 1) != 0)
            {
              int v127 = 1;
              unint64_t v61 = v361;
LABEL_408:
              int v128 = __ultoa(v61, v408, v82, v127, (uint64_t)v362);
            }
          }
        }

        else
        {
          unint64_t v61 = v360;
          if (v360 | v384) {
            goto LABEL_408;
          }
          int v128 = v408;
          if (v82 == 8)
          {
            int v128 = v408;
            if ((v19 & 1) != 0)
            {
              int v127 = 1;
              unint64_t v61 = v360;
              goto LABEL_408;
            }
          }
        }

        v380 = v128;
        uint64_t v58 = v408 - v128;
        if (v408 - v128 >= 33) {
          abort_report_np((uint64_t)"%s:%s:%u: size (%zd) > BUF (%d)");
        }
        ++v379;
        int v57 = v384;
        if (((unsigned __int16)v19 & 0x200) != 0 && v58)
        {
          v58 += (int)grouping_init((uint64_t)v399, v58, a2);
          int v57 = v384;
        }

        goto LABEL_413;
      case 'z':
        LODWORD(v19) = v19 | 0x400;
        continue;
      default:
        if (!v20) {
          goto LABEL_850;
        }
        int v57 = 0;
        v406[0] = v20;
        unsigned __int8 v401 = 0;
        v380 = v406;
        uint64_t v58 = 1LL;
        goto LABEL_413;
    }
  }

uint64_t grouping_init(uint64_t a1, int a2, locale_t a3)
{
  int v5 = localeconv_l(a3);
  fixed = __fix_nogrouping(v5->grouping);
  *(void *)(a1 + 16) = fixed;
  *(void *)a1 = v5->thousands_sep;
  int v7 = _platform_strlen();
  int v8 = 0;
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = a2;
  int v9 = *fixed;
  if (v9 != 127)
  {
    int v10 = 0;
    int v11 = 0;
    do
    {
      a2 -= (char)v9;
      *(_DWORD *)(a1 + 24) = a2;
      if (fixed[1])
      {
        *(_DWORD *)(a1 + 28) = ++v11;
        *(void *)(a1 + 16) = ++fixed;
      }

      else
      {
        *(_DWORD *)(a1 + 32) = ++v10;
      }

      int v9 = *fixed;
    }

    while (v9 != 127);
    int v8 = v10 + v11;
  }

  return (v8 * v7);
}

_BYTE *__ultoa(unint64_t a1, _BYTE *a2, int a3, int a4, uint64_t a5)
{
  switch(a3)
  {
    case 8:
      int v6 = a2 - 1;
      do
      {
        int v7 = a1 & 7 | 0x30;
        *v6-- = a1 & 7 | 0x30;
        BOOL v8 = a1 > 7;
        a1 >>= 3;
      }

      while (v8);
      a2 = v6 + 1;
      if (a4 && v7 != 48)
      {
        *int v6 = 48;
        return v6;
      }

      break;
    case 10:
      if (a1 > 9)
      {
        if ((a1 & 0x8000000000000000LL) != 0)
        {
          *--a2 = (a1 % 0xA) | 0x30;
          a1 /= 0xAuLL;
        }

        do
        {
          *--a2 = (a1 % 0xA) | 0x30;
          BOOL v5 = a1 >= 0xA;
          a1 /= 0xAuLL;
        }

        while (v5);
      }

      else
      {
        *--a2 = a1 + 48;
      }

      break;
    case 16:
      do
      {
        *--a2 = *(_BYTE *)(a5 + (a1 & 0xF));
        BOOL v5 = a1 >= 0x10;
        a1 >>= 4;
      }

      while (v5);
      break;
    default:
      abort_report_np((uint64_t)"%s:%s:%u: __ultoa: invalid base=%d");
  }

  return a2;
}

uint64_t grouping_print(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v8 = *(_DWORD *)(a1 + 24);
  else {
    uint64_t v9 = (a4 - a3);
  }
  if ((int)v9 < 1)
  {
    LODWORD(v9) = 0;
  }

  else
  {
    int v10 = *(_DWORD *)(a2 + 20);
    uint64_t v11 = *(int *)(a2 + 16);
    uint64_t v12 = a2 + 16 * v11;
    *(void *)(v12 + 24) = a3;
    *(void *)(v12 + 32) = v9;
    int v13 = v10 + v9;
    *(_DWORD *)(a2 + 16) = v11 + 1;
    *(_DWORD *)(a2 + 20) = v13;
    if ((int)v11 >= 7)
    {
      if (v13)
      {
        int v14 = __sfvwrite(*(void *)a2, a2 + 8);
        *(void *)(a2 + 16) = 0LL;
        if (v14) {
          return 0xFFFFFFFFLL;
        }
      }

      else
      {
        *(_DWORD *)(a2 + 16) = 0;
      }
    }
  }

  int v16 = v8 - v9;
  if (v8 - (int)v9 >= 1)
  {
    int v18 = *(_DWORD *)(a2 + 16);
    int v17 = *(_DWORD *)(a2 + 20);
    do
    {
      int v19 = v18;
      if (v16 >= 16) {
        uint64_t v20 = 16LL;
      }
      else {
        uint64_t v20 = v16;
      }
      uint64_t v21 = a2 + 16LL * v18;
      *(void *)(v21 + 24) = "0000000000000000";
      *(void *)(v21 + 32) = v20;
      v17 += v20;
      int v18 = v19 + 1;
      *(_DWORD *)(a2 + 16) = v19 + 1;
      *(_DWORD *)(a2 + 20) = v17;
      if (v19 >= 7)
      {
        if (v17)
        {
          int v22 = __sfvwrite(*(void *)a2, a2 + 8);
          int v17 = 0;
          int v18 = 0;
          *(void *)(a2 + 16) = 0LL;
          if (v22) {
            return 0xFFFFFFFFLL;
          }
        }

        else
        {
          int v18 = 0;
          *(_DWORD *)(a2 + 16) = 0;
        }
      }

      BOOL v23 = __OFSUB__(v16, (_DWORD)v20);
      v16 -= v20;
    }

    while (!((v16 < 0) ^ v23 | (v16 == 0)));
  }

  for (unint64_t i = a3 + *(int *)(a1 + 24); ; i += **(char **)(a1 + 16))
  {
    int v25 = *(_DWORD *)(a1 + 28);
    int v26 = *(_DWORD *)(a1 + 32);
    if (v25 <= 0) {
      break;
    }
    if (v26 < 1)
    {
      --*(void *)(a1 + 16);
      *(_DWORD *)(a1 + 28) = v25 - 1;
      goto LABEL_29;
    }

int vfscanf(FILE *__stream, const char *__format, va_list a3)
{
  if (off_18C52C3D8) {
    off_18C52C3D8(__stream, 152LL);
  }
  flockfile(__stream);
  uint64_t v6 = __locale_key;
  int v7 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v6);
  if (v7) {
    int v8 = v7;
  }
  else {
    int v8 = (_xlocale *)&__global_locale;
  }
  int v9 = __svfscanf_l((uint64_t *)__stream, v8, (unsigned __int8 *)__format, (wint_t **)a3);
  funlockfile(__stream);
  return v9;
}

uint64_t __svfscanf_l(uint64_t *a1, _xlocale *a2, unsigned __int8 *a3, wint_t **a4)
{
  v166 = a4;
  if (off_18C52C3D8) {
    off_18C52C3D8(a2, 1472LL);
  }
  if (off_18C52C3C8) {
    off_18C52C3C8(a3);
  }
  int v7 = (_xlocale *)&__c_locale;
  locale_t v8 = (locale_t)&__global_locale;
  if (a2 == (_xlocale *)-1LL) {
    int v9 = (_xlocale *)&__global_locale;
  }
  else {
    int v9 = a2;
  }
  if (a2) {
    int v7 = v9;
  }
  locale_t v161 = v7;
  int v159 = *(_DWORD *)(*((void *)v7 + 166) + 64LL);
  int v10 = (char *)a1[13];
  if ((v10[72] & 7) == 0) {
    v10[72] |= 7u;
  }
  int v164 = v166;
  unsigned int v11 = *a3;
  if (!*a3) {
    return 0LL;
  }
  uint64_t v12 = 0LL;
  wint_t v162 = 0;
  if (v161 != (locale_t)-1LL) {
    locale_t v8 = v161;
  }
  locale_t v160 = v8;
  base = v169;
LABEL_16:
  int v13 = a3;
  while (1)
  {
    a3 = v13;
LABEL_18:
    int v14 = &_DefaultRuneLocale;
    if ((v11 & 0x80) != 0) {
      int v14 = *(_RuneLocale **)(*((void *)v160 + 166) + 120LL);
    }
    int v13 = a3 + 1;
    if ((v14->__runetype[v11] & 0x4000) != 0)
    {
      int v28 = *((_DWORD *)a1 + 2);
      while (v28 > 0 || !__srefill((uint64_t)a1))
      {
        uint64_t v29 = (_BYTE *)*a1;
        uint64_t v30 = &_DefaultRuneLocale;
        ++v162;
        int v28 = *((_DWORD *)a1 + 2) - 1;
        *((_DWORD *)a1 + 2) = v28;
        *a1 = (uint64_t)(v29 + 1);
      }

      goto LABEL_88;
    }

    if (v11 == 37) {
      break;
    }
LABEL_86:
    uint64_t v31 = *a1;
    --*((_DWORD *)a1 + 2);
    *a1 = v31 + 1;
    ++v162;
LABEL_88:
    unsigned int v11 = *v13;
    if (!*v13) {
      return v12;
    }
  }

  unsigned int v15 = 0;
  unint64_t v16 = 0LL;
  while (2)
  {
    a3 = v13 + 1;
    switch(*v13)
    {
      case '$':
        unsigned int v17 = v16;
        unint64_t v16 = 0LL;
        v166 = v164;
        ++v13;
        if (v17 < 2) {
          continue;
        }
        unsigned int v18 = v17 + 1;
        do
        {
          ++v166;
          --v18;
        }

        while (v18 > 2);
        unint64_t v16 = 0LL;
        goto LABEL_25;
      case '%':
        int v25 = *((_DWORD *)a1 + 2);
        while (2)
        {
          uint64_t v26 = *a1;
          else {
            uint64_t v27 = &_DefaultRuneLocale;
          }
          if ((v27->__runetype[*(unsigned __int8 *)*a1] & 0x4000) != 0)
          {
            ++v162;
            int v25 = *((_DWORD *)a1 + 2) - 1;
            *((_DWORD *)a1 + 2) = v25;
            *a1 = v26 + 1;
            continue;
          }

          break;
        }

        unsigned int v11 = 37;
        ++v13;
        goto LABEL_86;
      case '&':
      case '\'':
      case '(':
      case ')':
      case '+':
      case ',':
      case '-':
      case '.':
      case '/':
      case ':':
      case ';':
      case '<':
      case '=':
      case '>':
      case '?':
      case '@':
      case 'B':
      case 'D':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'Y':
      case 'Z':
      case '\\':
      case ']':
      case '^':
      case '_':
      case 'b':
      case 'k':
      case 'm':
      case 'r':
      case 'v':
      case 'w':
      case 'y':
        return v12;
      case '*':
        v15 |= 8u;
        goto LABEL_25;
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        unint64_t v16 = *v13 + 10 * v16 - 48;
        goto LABEL_25;
      case 'A':
      case 'E':
      case 'F':
      case 'G':
      case 'a':
      case 'e':
      case 'f':
      case 'g':
        int v32 = 4;
        goto LABEL_105;
      case 'C':
        v15 |= 1u;
        goto LABEL_93;
      case 'L':
        v15 |= 2u;
        goto LABEL_25;
      case 'S':
        v15 |= 1u;
        goto LABEL_95;
      case 'X':
      case 'x':
        int v33 = 33024;
        goto LABEL_101;
      case '[':
        unsigned int v34 = v13[1];
        if (v34 == 94)
        {
          a3 = v13 + 3;
          unsigned int v34 = v13[2];
          unsigned int v35 = 1;
        }

        else
        {
          unsigned int v35 = 0;
          a3 = v13 + 2;
        }

        int8x16_t v171 = vdupq_n_s8(v35);
        int8x16_t v172 = v171;
        v170[12] = v171;
        v170[13] = v171;
        v170[10] = v171;
        v170[11] = v171;
        v170[8] = v171;
        v170[9] = v171;
        v170[6] = v171;
        v170[7] = v171;
        v170[4] = v171;
        v170[5] = v171;
        v170[2] = v171;
        v170[3] = v171;
        v170[0] = v171;
        v170[1] = v171;
        if (!v34)
        {
          --a3;
          goto LABEL_435;
        }

        char v136 = v35 ^ 1;
        unsigned int v154 = v12;
LABEL_408:
        while (2)
        {
          *((_BYTE *)v170 + v34) = v136;
          int v137 = a3;
          unsigned int v138 = v34;
          while (2)
          {
            a3 = v137 + 1;
            unsigned int v34 = *v137;
            if (v34 == 45)
            {
              unsigned int v139 = *a3;
              if (v139 != 93)
              {
                if (*(_BYTE *)(*((void *)v161 + 165) + 64LL))
                {
                  if (v138 <= v139)
                  {
                    v137 += 2;
                    goto LABEL_416;
                  }
                }

                else if ((__collate_range_cmp(*a3, v138, v161) & 0x80000000) == 0)
                {
                  v137 += 2;
                  if (!*(_BYTE *)(*((void *)v161 + 165) + 64LL))
                  {
                    for (uint64_t i = 0LL; i != 256; ++i)
                    {
                      if ((__collate_range_cmp(v138, i, v161) & 0x80000000) != 0
                        && (int)__collate_range_cmp(i, v139, v161) <= 0)
                      {
                        *((_BYTE *)v170 + i) = v136;
                      }
                    }

                    goto LABEL_417;
                  }

LABEL_416:
                  _platform_memset();
LABEL_417:
                  unsigned int v138 = v139;
                  continue;
                }
              }

              unsigned int v34 = 45;
              goto LABEL_408;
            }

            break;
          }

          uint64_t v12 = v154;
          if (*v137)
          {
            if (v34 == 93) {
              goto LABEL_435;
            }
            continue;
          }

          break;
        }

        a3 = v137;
LABEL_435:
        v15 |= 0x20u;
        int v32 = 1;
LABEL_105:
        if ((v15 & 0x20) == 0)
        {
          while (1)
          {
            uint64_t v37 = *a1;
            int v38 = *(char *)*a1 < 0 ? *(_RuneLocale **)(*((void *)v160 + 166) + 120LL) : &_DefaultRuneLocale;
            int v39 = *((_DWORD *)a1 + 2);
            *((_DWORD *)a1 + 2) = v39 - 1;
            if (v39 < 2)
            {
            }

            else
            {
              *a1 = v37 + 1;
            }

            ++v162;
          }
        }

        break;
      case 'c':
LABEL_93:
        int v32 = 0;
        v15 |= 0x20u;
        goto LABEL_105;
      case 'd':
        goto LABEL_103;
      case 'h':
        unsigned int v19 = v15 & 0xFFFFBFFB | 0x4000;
        int v20 = v15 | 4;
        BOOL v21 = (v15 & 4) == 0;
        goto LABEL_37;
      case 'i':
        base = 0LL;
        int v32 = 3;
        goto LABEL_105;
      case 'j':
        v15 |= 0x800u;
        goto LABEL_25;
      case 'l':
        unsigned int v19 = v15 & 0xFFFFFBFE | 0x400;
        int v20 = v15 | 1;
        BOOL v21 = (v15 & 1) == 0;
LABEL_37:
        if (v21) {
          unsigned int v15 = v20;
        }
        else {
          unsigned int v15 = v19;
        }
        goto LABEL_25;
      case 'n':
        if ((v15 & 8) != 0) {
          goto LABEL_65;
        }
        int v22 = v166++;
        BOOL v23 = *v22;
        if (!*v22) {
          goto LABEL_65;
        }
        if ((v15 & 0x4000) != 0)
        {
          if (off_18C52C3D8) {
            off_18C52C3D8(v23, 1LL);
          }
          *(_BYTE *)BOOL v23 = v162;
        }

        else if ((v15 & 4) != 0)
        {
          if (off_18C52C3D8) {
            off_18C52C3D8(v23, 2LL);
          }
          *(_WORD *)BOOL v23 = v162;
        }

        else
        {
          if ((v15 & 1) != 0 || (v15 & 0x400) != 0 || (v15 & 0x800) != 0 || (v15 & 0x2000) != 0)
          {
            unsigned int v24 = (void (*)(wint_t *, uint64_t))off_18C52C3D8;
          }

          else
          {
            unsigned int v24 = (void (*)(wint_t *, uint64_t))off_18C52C3D8;
            if ((v15 & 0x1000) == 0)
            {
              if (off_18C52C3D8) {
                off_18C52C3D8(v23, 4LL);
              }
              *BOOL v23 = v162;
              goto LABEL_65;
            }
          }

          if (v24) {
            v24(v23, 8LL);
          }
          *(void *)BOOL v23 = v162;
        }

LABEL_135:
          int v51 = (_DWORD)v48 - (_DWORD)v46;
          if ((_DWORD)v48 != (_DWORD)v46)
          {
            char *v48 = 0;
            uint64_t v12 = (v12 + 1);
            if (off_18C52C3C8) {
              off_18C52C3C8(v46);
            }
            goto LABEL_444;
          }

          return v12;
        }

        uint64_t v110 = (unsigned __int8 *)*a1;
        int v51 = 0;
        uint64_t v111 = 1LL;
        while (1)
        {
          uint64_t v112 = v111;
          int v113 = *((_DWORD *)a1 + 2);
          *((_DWORD *)a1 + 2) = v113 - 1;
          *a1 = (uint64_t)++v110;
          if (v44 == v112) {
            break;
          }
          ++v51;
          if (v113 <= 1)
          {
            uint64_t v110 = (unsigned __int8 *)*a1;
          }

          uint64_t v111 = v112 + 1;
          if (!*((_BYTE *)v170 + *v110))
          {
            int v51 = v112;
            goto LABEL_444;
          }
        }

        int v51 = v44;
LABEL_444:
        wint_t v142 = v51 + v162;
        goto LABEL_467;
      }

      unsigned int v153 = v12;
      if ((v15 & 8) != 0)
      {
        int v84 = &v163;
      }

      else
      {
        int v83 = v166++;
        int v84 = *v83;
      }

      int v122 = 0;
      int v51 = 0;
      while (2)
      {
        if (v122 == v159) {
          goto LABEL_474;
        }
        uint64_t v123 = *a1 + 1;
        int v124 = v122 + 1;
        v169[v122 - 1] = *(_BYTE *)*a1;
        *a1 = v123;
        --*((_DWORD *)a1 + 2);
        memset(&v167, 0, sizeof(v167));
        size_t v125 = mbrtowc_l(&v163, &nptr, v122 + 1, &v167, v161);
        if (v125 == -2LL)
        {
          ++v122;
          goto LABEL_362;
        }

        if (v125)
        {
          if (v125 == -1LL) {
            goto LABEL_474;
          }
          LODWORD(v125) = v163;
        }

        else
        {
          wint_t v163 = 0;
        }

        if (wctob_l(v125, v161) == -1 || *((_BYTE *)v170 + wctob_l(v163, v161)))
        {
          if ((v15 & 8) == 0) {
            *v84++ = v163;
          }
          int v122 = 0;
          v162 += v124;
          --v44;
          ++v51;
LABEL_362:
          if (*((int *)a1 + 2) <= 0 && __srefill((uint64_t)a1) || !v44)
          {
            if (!v122) {
              goto LABEL_366;
            }
            goto LABEL_474;
          }

          continue;
        }

        break;
      }

      if (v122 != -1)
      {
        uint64_t v145 = v122 + 1 - 1LL;
        do
          __ungetc(v169[v145 - 1], (uint64_t)a1);
        while ((_DWORD)v145--);
      }

            int v218 = 0;
            int v13 = 0LL;
            *unint64_t v16 = -1;
            v214 = (v99 + 1);
            int v76 = (v17 + 1);
            v213 = 2;
            uint64_t v217 = v17;
            goto LABEL_154;
          }
        }

        goto LABEL_152;
      case 3:
        if (v218)
        {
          uint64_t v104 = (v214 + 1);
          uint64_t v105 = (v17 + 1);
          int v106 = v217;
        }

        else
        {
          int v106 = -1;
          uint64_t v105 = v17;
          uint64_t v104 = v214;
          LODWORD(v17) = v217;
        }

        v214 = v104;
        uint64_t v217 = v17;
        int v204 = v106;
        if ((v18 & 1) != 0 || (int)((__PAIR64__(*(_DWORD *)(v20 + 56), *(_DWORD *)(v20 + 52) >> 30) - 1) >> 32) < 1)
        {
          int v76 = v105;
        }

        else
        {
          uint64_t v112 = tre_stack_num_objects((uint64_t)a2);
          tre_stack_push_voidptr(a2, v20);
          tre_stack_push_int(a2, 8u);
          if ((int)tre_stack_num_objects((uint64_t)a2) > v112)
          {
            while (1)
            {
              int v113 = tre_stack_pop_int((uint64_t)a2);
              if (v113 == 9) {
                break;
              }
              if (v113 == 8)
              {
                int64_t v114 = tre_stack_pop_voidptr((uint64_t)a2);
                BOOL v115 = *(uint64_t **)v114;
                uint64_t v116 = **(void **)v114;
                *(_WORD *)(v114 + 66) = 1;
                tre_stack_push_voidptr(a2, v114);
                tre_stack_push_int(a2, 9u);
                if (*(_DWORD *)(v116 + 48) != 3)
                {
                  *((_DWORD *)v115 + 4) = v217;
LABEL_172:
                  v214 = (v214 + 1);
                  int v76 = (v105 + 1);
                  uint64_t v217 = v105;
                  goto LABEL_173;
                }

                int v117 = a2;
                int v118 = v116;
LABEL_168:
                tre_stack_push_voidptr(v117, v118);
                tre_stack_push_int(a2, 8u);
              }

              int v76 = v105;
LABEL_173:
              uint64_t v105 = v76;
            }

            uint64_t v119 = tre_stack_pop_voidptr((uint64_t)a2);
            int v118 = *(void *)(*(void *)v119 + 8LL);
            if (*(_DWORD *)(v118 + 48) != 3)
            {
              *(_DWORD *)(*(void *)v119 + 20LL) = v217;
              goto LABEL_172;
            }

            int v117 = a2;
            goto LABEL_168;
          }

          int v76 = v105;
LABEL_208:
          if (v219)
          {
            int v122 = tre_stack_push_int(a2, v204);
            if ((_DWORD)v122
              || (int v122 = tre_stack_push_voidptr(a2, v20), (_DWORD)v122)
              || (int v122 = tre_stack_push_int(a2, 0xAu), (_DWORD)v122))
            {
LABEL_212:
              int v13 = v122;
LABEL_154:
              a4 = v19;
              locale_t v8 = v215;
              goto LABEL_155;
            }
          }
        }

        size_t v121 = **(void **)v20;
        int v120 = *(void *)(*(void *)v20 + 8LL);
        int v122 = tre_stack_push_voidptr(a2, v16);
        if ((_DWORD)v122) {
          goto LABEL_212;
        }
        int v122 = tre_stack_push_int(a2, v218 != 0);
        if ((_DWORD)v122) {
          goto LABEL_212;
        }
        int v122 = tre_stack_push_voidptr(a2, v20);
        if ((_DWORD)v122) {
          goto LABEL_212;
        }
        int v122 = tre_stack_push_int(a2, 4u);
        if ((_DWORD)v122) {
          goto LABEL_212;
        }
        int v122 = tre_stack_push_voidptr(a2, v120);
        if ((_DWORD)v122) {
          goto LABEL_212;
        }
        int v122 = tre_stack_push_int(a2, 1u);
        if ((_DWORD)v122) {
          goto LABEL_212;
        }
        int v122 = tre_stack_push_int(a2, 3u);
        if ((_DWORD)v122) {
          goto LABEL_212;
        }
        int v122 = tre_stack_push_voidptr(a2, v121);
        if ((_DWORD)v122) {
          goto LABEL_212;
        }
        uint64_t v123 = tre_stack_push_int(a2, 1u);
        if ((_DWORD)v123) {
          goto LABEL_185;
        }
        if (!v218)
        {
          int v218 = 0;
          int v13 = 0LL;
          goto LABEL_113;
        }

        if (!v219) {
          goto LABEL_274;
        }
        uint64_t v123 = tre_merge_branches(v219, v20, 0LL, v204, *(_DWORD *)(v19 + 80));
        if ((_DWORD)v123 || (uint64_t v123 = tre_add_tag_left(v219, v20, v204), (_DWORD)v123))
        {
LABEL_185:
          int v13 = v123;
        }

        else
        {
          if (v218 == 1) {
            wint_t v142 = 2;
          }
          else {
            wint_t v142 = v213;
          }
          *(_DWORD *)(*(void *)(v19 + 32) + 4LL * v204) = v142;
          uint64_t v143 = *v16;
          if (*v16 != -1)
          {
            int v144 = v16 + 1;
            do
            {
              if ((v143 & 0x80000000) == 0)
              {
                if ((v143 & 1) != 0) {
                  uint64_t v145 = (signed int *)(*(void *)(v19 + 24) + 8LL * (v143 >> 1) + 4);
                }
                else {
                  uint64_t v145 = (signed int *)(*(void *)(v19 + 24) + 8LL * (v143 >> 1));
                }
                int *v145 = v204;
              }

              int v146 = *v144++;
              uint64_t v143 = v146;
            }

            while (v146 != -1);
          }

LABEL_366:
      if (v51)
      {
        uint64_t v12 = v153;
        if ((v15 & 8) == 0)
        {
          wint_t *v84 = 0;
          uint64_t v12 = v153 + 1;
        }

        goto LABEL_444;
      }

      return v153;
    case 2:
      if (v16) {
        uint64_t v52 = v16;
      }
      else {
        uint64_t v52 = -1LL;
      }
      if ((v15 & 1) == 0)
      {
        if ((v15 & 8) == 0)
        {
          char v53 = (char **)v166++;
          __int128 v54 = *v53;
          p_nptint r = *v53;
          do
          {
            --v52;
            double v55 = (char *)*a1;
            else {
              double v56 = &_DefaultRuneLocale;
            }
            --*((_DWORD *)a1 + 2);
            *a1 = (uint64_t)(v55 + 1);
            char v57 = *v55;
            uint64_t v58 = p_nptr++;
            *uint64_t v58 = v57;
            if (!v52) {
              break;
            }
          }

          while (*((int *)a1 + 2) > 0 || !__srefill((uint64_t)a1));
          *p_nptint r = 0;
          v162 += (_DWORD)p_nptr - (_DWORD)v54;
          uint64_t v12 = (v12 + 1);
          if (off_18C52C3C8) {
            off_18C52C3C8(v54);
          }
          goto LABEL_468;
        }

        for (uint64_t j = 0LL; ; ++j)
        {
          BOOL v115 = (_BYTE *)*a1;
          else {
            uint64_t v116 = &_DefaultRuneLocale;
          }
          if ((v116->__runetype[*(unsigned __int8 *)*a1] & 0x4000) != 0)
          {
            LODWORD(v52) = j;
            goto LABEL_466;
          }

          int v117 = *((_DWORD *)a1 + 2);
          *((_DWORD *)a1 + 2) = v117 - 1;
          *a1 = (uint64_t)(v115 + 1);
          if (v52 - 1 == j) {
            goto LABEL_466;
          }
        }

        LODWORD(v52) = j + 1;
LABEL_466:
        wint_t v142 = v52 + v162;
        goto LABEL_467;
      }

      unsigned int v153 = v12;
      if ((v15 & 8) != 0)
      {
        __int32 v86 = &v163;
      }

      else
      {
        unint64_t v85 = v166++;
        __int32 v86 = *v85;
      }

      int v126 = 0;
      while (1)
      {
        if (v126 == v159) {
          goto LABEL_474;
        }
        uint64_t v127 = *a1 + 1;
        int v128 = v126 + 1;
        v169[v126 - 1] = *(_BYTE *)*a1;
        *a1 = v127;
        --*((_DWORD *)a1 + 2);
        memset(&v167, 0, sizeof(v167));
        size_t v129 = mbrtowc_l(v86, &nptr, v126 + 1, &v167, v161);
        if (v129 == -2LL)
        {
          ++v126;
          goto LABEL_384;
        }

        if (!v129) {
          break;
        }
        if (v129 == -1LL) {
          goto LABEL_474;
        }
        size_t v129 = *v86;
        if (v129 < 0x100)
        {
          uint64_t v131 = (char *)(*(void *)(*((void *)v160 + 166) + 120LL) + 4 * v129);
          goto LABEL_381;
        }

        LOWORD(v130) = ___runetype_l(v129, v161);
LABEL_382:
        if ((v130 & 0x4000) != 0)
        {
          if (v126 != -1)
          {
            uint64_t v143 = v126 + 1 - 1LL;
            do
              __ungetc(v169[v143 - 1], (uint64_t)a1);
            while ((_DWORD)v143--);
          }

LABEL_461:
          if ((v15 & 8) != 0)
          {
            uint64_t v12 = v12;
          }

          else
          {
            *__int32 v86 = 0;
LABEL_463:
            uint64_t v12 = (v12 + 1);
          }

          goto LABEL_468;
        }

        int v126 = 0;
        v162 += v128;
        --v52;
        v86 += (v15 & 8) == 0;
LABEL_384:
        if (*((int *)a1 + 2) <= 0 && __srefill((uint64_t)a1))
        {
          if (!v126) {
            goto LABEL_461;
          }
LABEL_474:
          *((_WORD *)a1 + 8) |= 0x40u;
          LODWORD(v12) = v153;
LABEL_475:
          if ((_DWORD)v12) {
            return v12;
          }
          else {
            return 0xFFFFFFFFLL;
          }
        }

        if (!v52) {
          goto LABEL_461;
        }
      }

      *__int32 v86 = 0;
LABEL_380:
      uint64_t v131 = &_DefaultRuneLocale.__magic[4 * v129];
LABEL_381:
      int v130 = *((_DWORD *)v131 + 15);
      goto LABEL_382;
    case 3:
      uint64_t v59 = v16 - 1;
      if (v16 - 1 >= 0x1FF) {
        uint64_t v59 = 511LL;
      }
      uint64_t v60 = v59 + 1;
      unsigned int v61 = v15 | 0x2C0;
      p_nptint r = &nptr;
      uint64_t v62 = (uint64_t)base;
      while (2)
      {
        int v63 = *(unsigned __int8 *)*a1;
        switch(*(_BYTE *)*a1)
        {
          case '+':
          case '-':
            if ((v61 & 0x40) != 0)
            {
              unsigned int v61 = v61 & 0xFFFEFFBF | 0x10000;
              goto LABEL_164;
            }

            goto LABEL_192;
          case ',':
          case '.':
          case '/':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'G':
          case 'H':
          case 'I':
          case 'J':
          case 'K':
          case 'L':
          case 'M':
          case 'N':
          case 'O':
          case 'P':
          case 'Q':
          case 'R':
          case 'S':
          case 'T':
          case 'U':
          case 'V':
          case 'W':
          case 'Y':
          case 'Z':
          case '[':
          case '\\':
          case ']':
          case '^':
          case '_':
            goto LABEL_192;
          case '0':
            int v67 = v61 | 0x100;
            BOOL v68 = (_DWORD)v62 == 0;
            if ((_DWORD)v62) {
              uint64_t v62 = v62;
            }
            else {
              uint64_t v62 = 8LL;
            }
            if (!v68) {
              int v67 = v61;
            }
            if ((v67 & 0x200) != 0) {
              unsigned int v61 = v67 & 0xFFFFFD3F;
            }
            else {
              unsigned int v61 = v67 & 0xFFFFFE3F;
            }
            goto LABEL_164;
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
            uint64_t v62 = __svfscanf_l_basefix[(int)v62];
            goto LABEL_163;
          case '8':
          case '9':
            uint64_t v64 = (int)v62;
            uint64_t v62 = __svfscanf_l_basefix[(int)v62];
            goto LABEL_192;
          case 'A':
          case 'B':
          case 'C':
          case 'D':
          case 'E':
          case 'F':
          case 'a':
          case 'b':
          case 'c':
          case 'd':
          case 'e':
          case 'f':
LABEL_163:
            v61 &= 0xFFFFFE3F;
            goto LABEL_164;
          case 'X':
            goto LABEL_171;
          default:
            if (v63 != 120) {
              goto LABEL_192;
            }
LABEL_171:
            if ((v61 & 0x100) == 0 || p_nptr != &v169[HIWORD(v61) & 1]) {
              goto LABEL_192;
            }
            v61 &= ~0x100u;
            uint64_t v62 = 16LL;
LABEL_164:
            int v65 = p_nptr++;
            char *v65 = v63;
            int v66 = *((_DWORD *)a1 + 2);
            *((_DWORD *)a1 + 2) = v66 - 1;
            if (v66 >= 2)
            {
              ++*a1;
              if (!--v60) {
                goto LABEL_192;
              }
              continue;
            }

            if (!__srefill((uint64_t)a1))
            {
              if (--v60) {
                continue;
              }
            }

LABEL_192:
            unint64_t v75 = p_nptr;
            if ((v61 & 0x80) != 0)
            {
              if (p_nptr > &nptr)
              {
                --p_nptr;
                __ungetc(*(v75 - 1), (uint64_t)a1);
              }

              return v12;
            }

            int v76 = *(p_nptr - 1);
            if ((v76 & 0xFFFFFFDF) == 0x58)
            {
              --p_nptr;
              __ungetc(v76, (uint64_t)a1);
              unint64_t v75 = p_nptr;
            }

            base = (_BYTE *)v62;
            if ((v61 & 8) != 0) {
              goto LABEL_459;
            }
            *unint64_t v75 = 0;
            if ((v61 & 0x8000) != 0) {
              uintmax_t v77 = strtoumax_l(&nptr, 0LL, v62, v161);
            }
            else {
              uintmax_t v77 = strtoimax_l(&nptr, 0LL, v62, v161);
            }
            uintmax_t v132 = v77;
            int v133 = v166++;
            int v134 = *v133;
            if ((v61 & 0x10) != 0) {
              goto LABEL_401;
            }
            if ((v61 & 0x4000) != 0)
            {
              if (off_18C52C3D8) {
                off_18C52C3D8(v134, 1LL);
              }
              *(_BYTE *)int v134 = v132;
            }

            else if ((v61 & 4) != 0)
            {
              if (off_18C52C3D8) {
                off_18C52C3D8(v134, 2LL);
              }
              *(_WORD *)int v134 = v132;
            }

            else if ((v61 & 1) != 0 {
                   || (v61 & 0x400) != 0
            }
                   || (v61 & 0x800) != 0
                   || (v61 & 0x1000) != 0
                   || (v61 & 0x2000) != 0)
            {
LABEL_401:
              if (off_18C52C3D8) {
                off_18C52C3D8(v134, 8LL);
              }
              *(void *)int v134 = v132;
            }

            else
            {
              if (off_18C52C3D8) {
                off_18C52C3D8(v134, 4LL);
              }
              *int v134 = v132;
            }

            uint64_t v12 = (v12 + 1);
            LODWORD(v75) = (_DWORD)p_nptr;
LABEL_459:
            v162 += (_DWORD)v75 - &nptr;
            break;
        }

        goto LABEL_468;
      }

    case 4:
      decimal_point = localeconv_l(v161)->decimal_point;
      if (v16) {
        size_t v69 = v16 + 1;
      }
      else {
        size_t v69 = 513LL;
      }
      unsigned int v70 = (char *)__parsefloat_buf(v69);
      if (!v70) {
        return v12;
      }
      uint64_t v71 = v69 - 1;
      int v155 = v70 - 1;
      BOOL v72 = (uint64_t)(v69 - 1) > 0;
      int v152 = v70;
      if (v16 && v71 < 1)
      {
        int v158 = v70;
        goto LABEL_189;
      }

      size_t v150 = v69;
      int v156 = 0;
      uint64_t v87 = 0LL;
      int v148 = 0;
      int v88 = 0;
      uint64_t v89 = 0LL;
      unint64_t v90 = (unint64_t)&v70[v71];
      int v158 = v70;
      size_t v91 = decimal_point;
      unsigned int v153 = v12;
      break;
    default:
      goto LABEL_468;
  }

      LOBYTE(v98) = *v12;
      if (*v12)
      {
        BOOL v99 = 0LL;
        while (v17 + v99 < (unint64_t)v13)
        {
          *(_BYTE *)(v17 + v99) = v98;
          char v98 = v12[++v99];
          if (!v98)
          {
            v17 += v99;
            goto LABEL_197;
          }
        }

        goto LABEL_255;
      }

LABEL_212:
  uint64_t v92 = *(unsigned __int8 *)*a1;
  __int128 v93 = &_DefaultRuneLocale.__runetype[v92];
  int v94 = v92 & 0xFFFFFFDF;
  uint64_t v95 = v87;
  while (2)
  {
    switch(v88)
    {
      case 0:
        int v88 = 1;
        goto LABEL_232;
      case 1:
        int v88 = 6;
        if ((int)v92 <= 77)
        {
          if ((_DWORD)v92 == 48)
          {
            int v88 = 5;
LABEL_276:
            uint64_t v87 = v95;
            goto LABEL_293;
          }

          if ((_DWORD)v92 == 73) {
            goto LABEL_249;
          }
        }

        else
        {
          switch((_DWORD)v92)
          {
            case 'N':
              goto LABEL_241;
            case 'i':
LABEL_249:
              int v88 = 2;
              goto LABEL_289;
            case 'n':
LABEL_241:
              int v88 = 3;
              goto LABEL_289;
          }
        }

        continue;
      case 2:
        if (v148 > 6 || (_DWORD)v92 != aNfinity[v148] && (_DWORD)v92 != aNfinity_0[v148]) {
          goto LABEL_189;
        }
        if (v148 == 6 || v148 == 1) {
          int v155 = v158;
        }
        ++v148;
        goto LABEL_249;
      case 3:
        if (v148 != 2)
        {
          if (v148 == 1)
          {
            if (v94 != 78) {
              goto LABEL_189;
            }
            int v88 = 3;
          }

          else
          {
            if (!v148)
            {
              if (v94 != 65) {
                goto LABEL_189;
              }
LABEL_282:
              int v88 = 3;
              goto LABEL_288;
            }

            if ((_DWORD)v92 != 41)
            {
              if ((v92 & 0x80) != 0) {
                __int128 v93 = (__uint32_t *)(*(void *)(*((void *)v160 + 166) + 120LL) + 4 * v92 + 60);
              }
              int v88 = 3;
              if ((*((_BYTE *)v93 + 1) & 5) == 0 && (_DWORD)v92 != 95) {
                goto LABEL_189;
              }
LABEL_288:
              ++v148;
              goto LABEL_289;
            }

            int v88 = 4;
          }

          int v155 = v158;
          goto LABEL_288;
        }

        if ((_DWORD)v92 != 40) {
          goto LABEL_189;
        }
        goto LABEL_282;
      case 4:
        goto LABEL_189;
      case 5:
        uint64_t v95 = 1LL;
        int v88 = 6;
        if (v94 != 88) {
          continue;
        }
        int v156 = 1;
        if (v72) {
          goto LABEL_296;
        }
        goto LABEL_294;
      case 6:
        if ((v156 & 1) != 0)
        {
          __int128 v96 = &_DefaultRuneLocale.__runetype[*(unsigned __int8 *)*a1];
          if ((v92 & 0x80) != 0) {
            __int128 v96 = (__uint32_t *)(*(void *)(*((void *)v160 + 166) + 120LL) + 4 * v92 + 60);
          }
          if ((*((_BYTE *)v96 + 2) & 1) != 0)
          {
            uint64_t v87 = 1LL;
            int v88 = 6;
            goto LABEL_292;
          }
        }

        uint64_t v97 = &_DefaultRuneLocale.__runetype[*(unsigned __int8 *)*a1];
        if ((v92 & 0x80) != 0) {
          uint64_t v97 = (__uint32_t *)(*(void *)(*((void *)v160 + 166) + 120LL) + 4 * v92 + 60);
        }
        int v88 = 7;
        if ((*((_BYTE *)v97 + 1) & 4) == 0) {
          continue;
        }
        uint64_t v87 = 1LL;
        int v88 = 6;
        goto LABEL_293;
      case 7:
        if ((_DWORD)v92 == v91[(int)v89])
        {
          else {
            int v88 = 8;
          }
          __darwin_ct_rune_t v101 = v155;
          int v155 = v101;
          uint64_t v89 = (int)v89 + 1LL;
LABEL_289:
          uint64_t v87 = v95;
          if (!v72)
          {
LABEL_294:
            uint64_t v149 = v89;
            uint64_t v102 = (char *)__parsefloat_buf(v150 + 513);
            if (!v102) {
              return v153;
            }
            size_t v91 = decimal_point;
            unint64_t v90 = (unint64_t)&v102[v150 + 512];
            int v158 = &v102[v158 - v152];
            int v155 = &v102[v155 - v152];
            int v152 = v102;
            v150 += 513LL;
            uint64_t v12 = v153;
            uint64_t v89 = v149;
          }

LABEL_296:
          *v158++ = v92;
          int v103 = *((_DWORD *)a1 + 2);
          *((_DWORD *)a1 + 2) = v103 - 1;
          if (v103 < 2)
          {
            uint64_t v104 = v12;
            uint64_t v105 = v89;
            int v106 = __srefill((uint64_t)a1);
            BOOL v72 = (unint64_t)v158 < v90;
            BOOL v107 = (unint64_t)v158 < v90 || v16 == 0;
            if (v106)
            {
              uint64_t v12 = v104;
              goto LABEL_189;
            }

            size_t v91 = decimal_point;
            uint64_t v89 = v105;
            uint64_t v12 = v104;
            if (!v107) {
              goto LABEL_189;
            }
            goto LABEL_212;
          }

          ++*a1;
          BOOL v72 = (unint64_t)v158 < v90;
          if (v16 && (unint64_t)v158 >= v90)
          {
LABEL_189:
            for (uint64_t k = v158 - 1; v155 < k; --k)
            {
              int v74 = *k;
              __ungetc(v74, (uint64_t)a1);
            }

            v155[1] = 0;
            if ((_DWORD)v155 + 1 == (_DWORD)v152) {
              return v12;
            }
            if ((v15 & 8) == 0)
            {
              uint64_t v78 = (float **)v166++;
              unint64_t v79 = *v78;
              if ((v15 & 2) != 0)
              {
                double v135 = strtold_l(v152, &p_nptr, v161);
              }

              else
              {
                if ((v15 & 1) == 0)
                {
                  float v80 = strtof_l(v152, &p_nptr, v161);
                  if (off_18C52C3D8) {
                    off_18C52C3D8(v79, 4LL);
                  }
                  *unint64_t v79 = v80;
                  goto LABEL_440;
                }

                double v135 = strtod_l(v152, &p_nptr, v161);
              }

              double v141 = v135;
              if (off_18C52C3D8) {
                off_18C52C3D8(v79, 8LL);
              }
              *(double *)unint64_t v79 = v141;
LABEL_440:
              uint64_t v12 = (v12 + 1);
            }

            wint_t v142 = v162 + (_DWORD)v155 + 1 - (_DWORD)v152;
LABEL_467:
            wint_t v162 = v142;
LABEL_468:
            unsigned int v11 = *a3;
            if (!*a3) {
              return v12;
            }
            goto LABEL_16;
          }

          goto LABEL_212;
        }

        int v88 = 8;
        if ((_DWORD)v89) {
          goto LABEL_189;
        }
        continue;
      case 8:
        char v98 = (v94 != 69) | v156;
        BOOL v99 = v94 == 80;
        if ((v98 & 1) == 0 || (v99 & v156) != 0)
        {
          if ((v95 & 1) == 0) {
            goto LABEL_189;
          }
          uint64_t v87 = 1LL;
          int v88 = 9;
          if (v72) {
            goto LABEL_296;
          }
        }

        else
        {
          if ((v156 & 1) == 0) {
            goto LABEL_261;
          }
          __int128 v100 = &_DefaultRuneLocale.__runetype[*(unsigned __int8 *)*a1];
          if ((v92 & 0x80) != 0) {
            __int128 v100 = (__uint32_t *)(*(void *)(*((void *)v160 + 166) + 120LL) + 4 * v92 + 60);
          }
          if ((*((_BYTE *)v100 + 2) & 1) == 0)
          {
LABEL_261:
            if ((v92 & 0x80) != 0) {
              __int128 v93 = (__uint32_t *)(*(void *)(*((void *)v160 + 166) + 120LL) + 4 * v92 + 60);
            }
            if ((*((_BYTE *)v93 + 1) & 4) != 0)
            {
              uint64_t v87 = 1LL;
              int v88 = 8;
              goto LABEL_293;
            }

            goto LABEL_189;
          }

          uint64_t v87 = 1LL;
          int v88 = 8;
LABEL_292:
          int v156 = 1;
LABEL_293:
          int v155 = v158;
          if (v72) {
            goto LABEL_296;
          }
        }

        goto LABEL_294;
      case 9:
        int v88 = 10;
LABEL_232:
        if ((_DWORD)v92 == 43 || (_DWORD)v92 == 45) {
          goto LABEL_289;
        }
        continue;
      case 10:
        if ((v92 & 0x80) != 0) {
          __int128 v93 = (__uint32_t *)(*(void *)(*((void *)v160 + 166) + 120LL) + 4 * v92 + 60);
        }
        if ((*((_BYTE *)v93 + 1) & 4) == 0) {
          goto LABEL_189;
        }
        int v88 = 10;
        goto LABEL_276;
      default:
        abort_report_np((uint64_t)"%s:%s:%u: unknown state %d");
    }
  }

int vfscanf_l(FILE *a1, locale_t a2, const char *a3, va_list a4)
{
  if (off_18C52C3D8) {
    off_18C52C3D8(a1, 152LL);
  }
  locale_t v8 = (locale_t)&__global_locale;
  if (a2 != (locale_t)-1LL) {
    locale_t v8 = a2;
  }
  if (a2) {
    int v9 = v8;
  }
  else {
    int v9 = (_xlocale *)&__c_locale;
  }
  flockfile(a1);
  int v10 = __svfscanf_l((uint64_t *)a1, v9, (unsigned __int8 *)a3, (wint_t **)a4);
  funlockfile(a1);
  return v10;
}

int __svfscanf(FILE *a1, const char *a2, va_list a3)
{
  uint64_t v5 = __locale_key;
  uint64_t v6 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (v6) {
    int v7 = v6;
  }
  else {
    int v7 = (_xlocale *)&__global_locale;
  }
  return __svfscanf_l((uint64_t *)a1, v7, (unsigned __int8 *)a2, (wint_t **)a3);
}

void *__parsefloat_buf(size_t a1)
{
  if ((__parsefloat_buf_parsefloat_tsd_key & 1) != 0)
  {
    pthread_key_t v2 = 15LL;
  }

  else
  {
    pthread_mutex_lock(&__parsefloat_buf_parsefloat_tsd_lock);
    if ((__parsefloat_buf_parsefloat_tsd_key & 1) == 0)
    {
      __parsefloat_buf_parsefloat_tsd_key = 1;
      pthread_key_init_np();
    }

    pthread_mutex_unlock(&__parsefloat_buf_parsefloat_tsd_lock);
    else {
      pthread_key_t v2 = -1LL;
    }
  }

  uint64_t v3 = pthread_getspecific(v2);
  if (v3)
  {
    int v4 = v3;
    if (__parsefloat_buf_bsiz < a1)
    {
      int v4 = reallocf(v3, a1);
      else {
        pthread_key_t v5 = -1LL;
      }
      pthread_setspecific(v5, v4);
      if (v4) {
        __parsefloat_buf_bsiz = a1;
      }
      else {
        __parsefloat_buf_bsiz = 0LL;
      }
    }
  }

  else
  {
    if (a1 <= 0x201) {
      size_t v6 = 513LL;
    }
    else {
      size_t v6 = a1;
    }
    __parsefloat_buf_bsiz = v6;
    int v4 = malloc(v6);
    if (v4)
    {
      else {
        pthread_key_t v7 = -1LL;
      }
      pthread_setspecific(v7, v4);
    }

    else
    {
      __parsefloat_buf_bsiz = 0LL;
    }
  }

  return v4;
}

int vfwprintf_l(FILE *a1, locale_t a2, const __int32 *a3, __darwin_va_list a4)
{
  locale_t v7 = (locale_t)&__global_locale;
  if (a2 != (locale_t)-1LL) {
    locale_t v7 = a2;
  }
  if (a2) {
    locale_t v8 = v7;
  }
  else {
    locale_t v8 = (_xlocale *)&__c_locale;
  }
  flockfile(a1);
  __int16 flags = a1->_flags;
  if ((flags & 0x1A) != 0xA || (int file = a1->_file, file < 0))
  {
    int v12 = __vfwprintf((uint64_t)a1, v8, (unsigned int *)a3, a4);
    goto LABEL_14;
  }

  uint64_t v31 = v32;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  uint64_t v36 = 0LL;
  v32[0] = 0LL;
  v32[1] = 850045858LL;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  char v37 = 0;
  if ((flags & 8) == 0 || (char v11 = 0, (flags & 0x200) == 0) && !a1->_bf._base)
  {
    if (__swsetup((uint64_t)a1))
    {
      int v12 = -1;
      goto LABEL_14;
    }

    __int16 flags = a1->_flags;
    char v11 = v37 & 0xF8;
    LOWORD(file) = a1->_file;
  }

  __int16 v24 = flags & 0xFFFD;
  __int16 v25 = file;
  write = a1->_write;
  cookie = a1->_cookie;
  uint64_t v30 = write;
  extra = a1->_extra;
  char v37 = *((_BYTE *)extra + 72) & 7 | v11;
  __int128 v16 = *((_OWORD *)extra + 8);
  __int128 v18 = *((_OWORD *)extra + 5);
  __int128 v17 = *((_OWORD *)extra + 6);
  __int128 v40 = *((_OWORD *)extra + 7);
  __int128 v41 = v16;
  __int128 v38 = v18;
  __int128 v39 = v17;
  __int128 v19 = *((_OWORD *)extra + 12);
  __int128 v21 = *((_OWORD *)extra + 9);
  __int128 v20 = *((_OWORD *)extra + 10);
  __int128 v44 = *((_OWORD *)extra + 11);
  __int128 v45 = v19;
  __int128 v42 = v21;
  __int128 v43 = v20;
  int v22 = v46;
  uint64_t v26 = v46;
  int v23 = 1024;
  int v27 = 1024;
  int v28 = 0;
  int v12 = __vfwprintf((uint64_t)&v22, v8, (unsigned int *)a3, a4);
  if ((v24 & 0x40) != 0) {
    a1->_flags |= 0x40u;
  }
LABEL_14:
  funlockfile(a1);
  return v12;
}

uint64_t __vfwprintf(uint64_t a1, locale_t a2, unsigned int *a3, _DWORD *a4)
{
  int v347 = a4;
  if (((*(_WORD *)(a1 + 16) & 8) == 0 || (*(_WORD *)(a1 + 16) & 0x200) == 0 && !*(void *)(a1 + 24))
    && __swsetup(a1))
  {
    *__error() = 9;
    return 0xFFFFFFFFLL;
  }

  uint64_t v8 = *(void *)(a1 + 104);
  if ((*(_BYTE *)(v8 + 72) & 7) == 0) {
    *(_BYTE *)(v8 + 72) = *(_BYTE *)(v8 + 72) & 0xF8 | 1;
  }
  int v331 = v347;
  v332 = 0LL;
  int v334 = &v336;
  int32x2_t v335 = 0LL;
  uint64_t v318 = a1;
  *(void *)int v333 = a1;
  memset(&v356, 0, sizeof(v356));
  int v9 = localeconv_l(a2);
  uint64_t v322 = 0LL;
  uint64_t v10 = 0LL;
  else {
    __int32 v11 = 46;
  }
  __int32 v343 = v11;
  int v328 = 1;
  v317 = &powersOf10_Float[97];
  int v315 = (int *)a3;
  int v316 = &powersOf10_Float[97];
  int v320 = &powersOf10_Float[97];
LABEL_12:
  for (uint64_t i = a3; ; ++i)
  {
    unsigned int v13 = *i;
    if (!*i || v13 == 37) {
      break;
    }
  }

  uint64_t v14 = (char *)i - (char *)a3;
  if (i == a3)
  {
    uint64_t v329 = v10;
  }

  else
  {
    uint64_t v329 = (v14 >> 2) + v10;
    if (v329 >= 0x80000000LL) {
      goto LABEL_722;
    }
    int v15 = v335.i32[0];
    __int32 v16 = v335.i32[1];
    __int128 v17 = &v333[4 * v335.i32[0]];
    *((void *)v17 + 3) = a3;
    *((void *)v17 + 4) = (int)(v14 >> 2);
    v335.i32[1] = v16 + ((unint64_t)v14 >> 2);
    v335.i32[0] = v15 + 1;
  }

  if (!v13)
  {
LABEL_724:
    __sprint(*(FILE **)v333, a2, (uint64_t)&v334);
    goto LABEL_725;
  }

  uint64_t v18 = 0LL;
  uint64_t v19 = 0LL;
  uint64_t v345 = 0LL;
  int v346 = 0;
  __int128 v20 = (const char *)a3;
  a3 = i + 1;
  int v352 = 0;
  int v337 = 88;
  uint64_t v21 = -1LL;
LABEL_24:
  while (2)
  {
    unsigned int v23 = *a3++;
    unsigned int v22 = v23;
LABEL_25:
    uint64_t v24 = v18;
    while (1)
    {
      uint64_t v18 = v24;
      if (v22 - 49 >= 9) {
        break;
      }
      uint64_t v24 = 0LL;
      do
      {
        uint64_t v24 = v22 - 48 + 10 * v24;
        unsigned int v25 = *a3++;
        unsigned int v22 = v25;
      }

      while (v25 - 48 < 0xA);
      if (v22 == 36)
      {
        int v328 = v24;
        if (!v332)
        {
          v332 = v350;
          uint64_t v29 = v19;
          BOOL warguments = __find_warguments(v315, v331, (_DWORD **)&v332);
          uint64_t v19 = v29;
          int v328 = v24;
          if (warguments)
          {
LABEL_723:
            uint64_t v10 = -1LL;
            goto LABEL_726;
          }
        }

        goto LABEL_24;
      }
    }

    switch(v22)
    {
      case ' ':
        if (!v346) {
          int v346 = 32;
        }
        continue;
      case '#':
        uint64_t v19 = v19 | 1;
        continue;
      case '\'':
        uint64_t v19 = v19 | 0x200;
        continue;
      case '*':
        int v31 = *a3;
        unsigned int v32 = *a3 - 48;
        if (v32 > 9)
        {
          unsigned int v33 = 0;
          __int128 v20 = (const char *)a3;
        }

        else
        {
          unsigned int v33 = 0;
          __int128 v20 = (const char *)a3;
          do
          {
            unsigned int v33 = 10 * v33 + v32;
            int v34 = *((_DWORD *)v20 + 1);
            v20 += 4;
            int v31 = v34;
            unsigned int v32 = v34 - 48;
          }

          while ((v34 - 48) < 0xA);
        }

        __int128 v35 = v332;
        if (v31 == 36)
        {
          if (v332) {
            goto LABEL_68;
          }
          uint64_t v36 = v19;
          v332 = v350;
          if (__find_warguments(v315, v331, (_DWORD **)&v332)) {
            goto LABEL_723;
          }
          __int128 v35 = v332;
          uint64_t v19 = v36;
          if (v332)
          {
LABEL_68:
            int v37 = v35[4 * v33];
          }

          else
          {
            __int128 v40 = v347;
            v347 += 2;
            int v37 = *v40;
          }

          v20 += 4;
          a3 = (unsigned int *)v20;
        }

        else
        {
          if (v332)
          {
            int v38 = v328;
            int v37 = *((_DWORD *)v332 + 4 * v328);
          }

          else
          {
            __int128 v39 = v347;
            v347 += 2;
            int v37 = *v39;
            int v38 = v328;
          }

          int v328 = v38 + 1;
        }

        uint64_t v18 = v37;
        if (v37 < 0)
        {
          uint64_t v18 = -(uint64_t)v37;
LABEL_76:
          uint64_t v19 = v19 | 4;
        }

        continue;
      case '+':
        int v346 = 43;
        continue;
      case ',':
      case ':':
      case ';':
      case '_':
        int v337 = v22;
        continue;
      case '-':
        goto LABEL_76;
      case '.':
        unsigned int v26 = *a3++;
        unsigned int v22 = v26;
        if (v26 != 42)
        {
          uint64_t v21 = 0LL;
          unsigned int v27 = v22 - 48;
          if (v22 - 48 <= 9)
          {
            uint64_t v21 = 0LL;
            do
            {
              uint64_t v21 = 10 * v21 + v27;
              unsigned int v28 = *a3++;
              unsigned int v22 = v28;
              unsigned int v27 = v28 - 48;
            }

            while (v28 - 48 < 0xA);
          }

          goto LABEL_25;
        }

        int v41 = *a3;
        unsigned int v42 = *a3 - 48;
        if (v42 > 9)
        {
          unsigned int v43 = 0;
          __int128 v20 = (const char *)a3;
        }

        else
        {
          unsigned int v43 = 0;
          __int128 v20 = (const char *)a3;
          do
          {
            unsigned int v43 = 10 * v43 + v42;
            int v44 = *((_DWORD *)v20 + 1);
            v20 += 4;
            int v41 = v44;
            unsigned int v42 = v44 - 48;
          }

          while ((v44 - 48) < 0xA);
        }

        __int128 v45 = v332;
        if (v41 == 36)
        {
          if (v332) {
            goto LABEL_87;
          }
          uint64_t v46 = v19;
          v332 = v350;
          if (__find_warguments(v315, v331, (_DWORD **)&v332)) {
            goto LABEL_723;
          }
          __int128 v45 = v332;
          uint64_t v19 = v46;
          if (v332)
          {
LABEL_87:
            int v47 = v45[4 * v43];
          }

          else
          {
            __int128 v50 = v347;
            v347 += 2;
            int v47 = *v50;
          }

          v20 += 4;
          a3 = (unsigned int *)v20;
        }

        else
        {
          if (v332)
          {
            int v48 = v328;
            int v47 = *((_DWORD *)v332 + 4 * v328);
          }

          else
          {
            char v49 = v347;
            v347 += 2;
            int v47 = *v49;
            int v48 = v328;
          }

          int v328 = v48 + 1;
        }

        uint64_t v21 = v47;
        continue;
      case '0':
        uint64_t v19 = v19 | 0x80;
        continue;
      case 'A':
      case 'a':
        if ((v19 & 0x4000) != 0) {
          goto LABEL_122;
        }
        if (v22 == 97) {
          int v51 = 120;
        }
        else {
          int v51 = 88;
        }
        uint64_t v52 = "0123456789ABCDEF";
        if (v22 == 97) {
          uint64_t v52 = (const char *)&__vfwprintf_xdigs_lower;
        }
        int v312 = v52;
        if (v22 == 97) {
          char v53 = 112;
        }
        else {
          char v53 = 80;
        }
        int v352 = v51;
        unsigned __int8 v314 = v53;
        __int16 v323 = v19;
        if ((v19 & 8) != 0)
        {
          int v54 = v328;
          if (v332)
          {
            double v78 = *((double *)v332 + 2 * v328);
          }

          else
          {
            __int128 v96 = (double *)v347;
            v347 += 2;
            double v78 = *v96;
          }

          double v341 = v78;
          uint64_t v93 = __hldtoa(v52, v21 + (v21 >= 0), &v340, &v342, &v339);
        }

        else
        {
          int v54 = v328;
          if (v332)
          {
            double v55 = *((double *)v332 + 2 * v328);
          }

          else
          {
            uint64_t v92 = (double *)v347;
            v347 += 2;
            double v55 = *v92;
          }

          double v341 = v55;
          uint64_t v93 = (uint64_t)__hdtoa((uint64_t)v52, v21 + (v21 >= 0), &v340, &v342, &v339, v55);
        }

        int v74 = (char *)v93;
        if (v21 + (v21 >= 0) >= 0) {
          v21 += v21 >= 0;
        }
        else {
          uint64_t v21 = (uint64_t)&v339[-v93];
        }
        if (v340 == 0x7FFFFFFF) {
          int v352 = 0;
        }
        free(v322);
        goto LABEL_257;
      case 'C':
        __int16 v60 = v19 | 0x10;
        goto LABEL_148;
      case 'D':
        LOWORD(v19) = v19 | 0x10;
        goto LABEL_128;
      case 'E':
      case 'e':
        if ((v19 & 0x4000) != 0) {
          goto LABEL_122;
        }
        __int16 v56 = v19;
        if (v21 >= 0) {
          ++v21;
        }
        else {
          uint64_t v21 = 7LL;
        }
        unsigned __int8 v57 = v22;
        goto LABEL_117;
      case 'F':
      case 'f':
        if ((v19 & 0x4000) != 0) {
          goto LABEL_122;
        }
        __int16 v56 = v19;
        unsigned __int8 v57 = 0;
        goto LABEL_117;
      case 'G':
      case 'g':
        if ((v19 & 0x4000) != 0)
        {
LABEL_122:
          int v59 = 0;
          __int16 v60 = v19 | 0x100;
          goto LABEL_123;
        }

        __int16 v56 = v19;
        unsigned __int8 v57 = v22 - 2;
LABEL_117:
        if (v21 < 0) {
          uint64_t v21 = 6LL;
        }
        free(v322);
        int v54 = v328;
        unsigned __int8 v314 = v57;
        __int16 v323 = v56;
        if ((v56 & 8) != 0)
        {
          if (v332)
          {
            double v62 = *((double *)v332 + 2 * v328);
          }

          else
          {
            unint64_t v75 = (double *)v347;
            v347 += 2;
            double v62 = *v75;
          }

          double v341 = v62;
          if (v57) {
            unsigned int v76 = 2;
          }
          else {
            unsigned int v76 = 3;
          }
          int v74 = __ldtoa(&v341, v76, v21, &v340, &v342, &v339);
        }

        else
        {
          if (v332)
          {
            double v58 = *((double *)v332 + 2 * v328);
          }

          else
          {
            BOOL v72 = (double *)v347;
            v347 += 2;
            double v58 = *v72;
          }

          double v341 = v58;
          if (v57) {
            unsigned int v73 = 2;
          }
          else {
            unsigned int v73 = 3;
          }
          int v74 = __dtoa(v73, v21, &v340, &v342, &v339, v58);
          if (v340 == 9999) {
            int v340 = 0x7FFFFFFF;
          }
        }

LABEL_257:
        int v97 = (int)v339;
        uint64_t v322 = __mbsconv(v74, 0xFFFFFFFF, a2);
        __freedtoa((uint64_t)v74);
        if (v342) {
          int v346 = 45;
        }
        int v98 = v97 - (_DWORD)v74;
        char v99 = v323;
        int v328 = v54 + 1;
        LODWORD(v317) = v97 - (_DWORD)v74;
        if (v340 == 0x7FFFFFFF)
        {
          if (*v322 == 78)
          {
            if (v22 <= 0x60) {
              __int128 v20 = "N";
            }
            else {
              __int128 v20 = "n";
            }
            int v346 = 0;
          }

          else if (v22 <= 0x60)
          {
            __int128 v20 = "I";
          }

          else
          {
            __int128 v20 = "i";
          }

          int v59 = 0;
          __int16 v60 = v323 & 0xFF7F;
          uint64_t v61 = 3LL;
          goto LABEL_398;
        }

        __int16 v60 = v323 | 0x100;
        if ((v22 & 0xFFFFFFDF) != 0x47) {
          goto LABEL_270;
        }
        if (v340 >= -3 && (uint64_t v100 = v21 - v340, v21 >= v340))
        {
          int v111 = v323 & 1;
          if ((v323 & 1) == 0) {
            uint64_t v100 = v98 - v340;
          }
          uint64_t v21 = v100 & ~(v100 >> 63);
        }

        else
        {
          if ((v323 & 1) == 0) {
            uint64_t v21 = v98;
          }
LABEL_270:
          if (v314)
          {
            unsigned int v101 = v340 - 1;
            if (v340 >= 1) {
              int v102 = 43;
            }
            else {
              int v102 = 45;
            }
            if (v340 - 1 < 0) {
              unsigned int v101 = 1 - v340;
            }
            v353[0] = v314;
            v353[1] = v102;
            if (v101 < 0xA)
            {
              uint64_t v112 = &v354;
              if ((v314 & 0xDF) == 0x45)
              {
                int v354 = 48;
                uint64_t v112 = v355;
              }

              *uint64_t v112 = v101 + 48;
              BOOL v107 = v112 + 1;
            }

            else
            {
              uint64_t v103 = 0LL;
              uint64_t v104 = (unsigned int *)&v349;
              do
              {
                unsigned int v105 = v101;
                unsigned int v106 = v101;
                v101 /= 0xAu;
                *v104-- = (v106 % 0xA) | 0x30;
                ++v103;
              }

              while (v105 > 0x63);
              *uint64_t v104 = v101 + 48;
              BOOL v107 = &v354;
              if (7 - v103 <= 7)
              {
                uint64_t v108 = 5 - v103;
                uint64_t v109 = v103 - 5;
                _platform_memmove();
                __int16 v60 = v323 | 0x100;
                char v99 = v323;
                uint64_t v110 = 5LL;
                if (v108 > 5) {
                  uint64_t v110 = v108;
                }
                BOOL v107 = &v355[v110 + v109];
              }
            }

            int v59 = 0;
            int v316 = (unint64_t *)((unint64_t)((char *)v107 - (char *)v353) >> 2);
            uint64_t v61 = v21 + ((v21 > 1) | (v99 & 1)) + (int)v316;
            goto LABEL_307;
          }

          int v111 = v323 & 1;
        }

        int v59 = 0;
        if (v340 <= 0) {
          uint64_t v113 = 1LL;
        }
        else {
          uint64_t v113 = v340;
        }
        if (v111) {
          BOOL v114 = 0;
        }
        else {
          BOOL v114 = v21 == 0;
        }
        if (v114) {
          uint64_t v115 = 0LL;
        }
        else {
          uint64_t v115 = v21 + 1;
        }
        if ((v323 & 0x200) == 0 || v340 < 1)
        {
          unsigned __int8 v314 = 0;
          __int128 v20 = (const char *)v322;
          uint64_t v61 = v115 + v113;
          goto LABEL_398;
        }

        int v59 = 0;
        unsigned __int8 v314 = 0;
        uint64_t v61 = v115 + v113 + (int)grouping_init_0((uint64_t)v344, v340, a2);
        __int16 v60 = v323 | 0x100;
LABEL_307:
        __int128 v20 = (const char *)v322;
        goto LABEL_398;
      case 'L':
        uint64_t v19 = v19 | 8;
        continue;
      case 'O':
        LOWORD(v19) = v19 | 0x10;
        goto LABEL_133;
      case 'S':
        LOWORD(v19) = v19 | 0x10;
        goto LABEL_138;
      case 'U':
        LOWORD(v19) = v19 | 0x10;
        goto LABEL_142;
      case 'X':
        int v66 = "0123456789ABCDEF";
        goto LABEL_158;
      case 'c':
        __int16 v60 = v19;
LABEL_148:
        uint64_t v61 = v321;
        if ((v60 & 0x4000) != 0)
        {
          int v59 = 0;
        }

        else
        {
          __int16 v67 = v60;
          if ((v60 & 0x10) != 0)
          {
            if (v332)
            {
              wint_t v79 = *((_DWORD *)v332 + 4 * v328);
            }

            else
            {
              uint64_t v116 = v347;
              v347 += 2;
              wint_t v79 = *v116;
            }
          }

          else
          {
            if (v332)
            {
              int v68 = *((_DWORD *)v332 + 4 * v328);
            }

            else
            {
              int v94 = v347;
              v347 += 2;
              int v68 = *v94;
            }

            wint_t v79 = btowc_l(v68, a2);
          }

          int v59 = 0;
          ++v328;
          *(_DWORD *)v356.__mbstate8 = v79;
          int v346 = 0;
          __int128 v20 = (const char *)&v356;
          uint64_t v61 = 1LL;
          __int16 v60 = v67;
        }

        goto LABEL_398;
      case 'd':
      case 'i':
LABEL_128:
        uint64_t v61 = v321;
        if ((v19 & 0x4000) != 0) {
          goto LABEL_162;
        }
        if ((v19 & 0x1C20) == 0)
        {
          if ((v19 & 0x10) != 0)
          {
            if (v332)
            {
              uint64_t v77 = *((void *)v332 + 2 * v328);
            }

            else
            {
              int v118 = (uint64_t *)v347;
              v347 += 2;
              uint64_t v77 = *v118;
            }
          }

          else if ((v19 & 0x40) != 0)
          {
            if (v332)
            {
              LODWORD(v77) = *((_DWORD *)v332 + 4 * v328);
            }

            else
            {
              uint64_t v77 = (uint64_t)v347;
              v347 += 2;
              LODWORD(v77) = *(_DWORD *)v77;
            }

            uint64_t v77 = (__int16)v77;
          }

          else if ((v19 & 0x2000) != 0)
          {
            if (v332)
            {
              LODWORD(v77) = *((_DWORD *)v332 + 4 * v328);
            }

            else
            {
              uint64_t v77 = (uint64_t)v347;
              v347 += 2;
              LODWORD(v77) = *(_DWORD *)v77;
            }

            uint64_t v77 = (char)v77;
          }

          else
          {
            if (v332)
            {
              LODWORD(v77) = *((_DWORD *)v332 + 4 * v328);
            }

            else
            {
              uint64_t v77 = (uint64_t)v347;
              v347 += 2;
              LODWORD(v77) = *(_DWORD *)v77;
            }

            uint64_t v77 = (int)v77;
          }

          unint64_t v63 = v311;
          if ((v77 & 0x8000000000000000LL) == 0)
          {
            unint64_t v310 = v77;
            goto LABEL_357;
          }

          unint64_t v310 = -v77;
          goto LABEL_356;
        }

        if (v332)
        {
          unint64_t v63 = *((void *)v332 + 2 * v328);
        }

        else
        {
          int v88 = (unint64_t *)v347;
          v347 += 2;
          unint64_t v63 = *v88;
        }

        if ((v63 & 0x8000000000000000LL) != 0)
        {
          unint64_t v63 = -(uint64_t)v63;
LABEL_356:
          int v346 = 45;
        }

LABEL_357:
        int v90 = 10;
        goto LABEL_380;
      case 'h':
        if ((v19 & 0x40) != 0) {
          uint64_t v19 = v19 & 0xFFFFDFBF | 0x2000;
        }
        else {
          uint64_t v19 = v19 | 0x40;
        }
        continue;
      case 'j':
        uint64_t v19 = v19 | 0x1000;
        continue;
      case 'l':
        if ((v19 & 0x10) != 0) {
          uint64_t v19 = v19 & 0xFFFFFFCF | 0x20;
        }
        else {
          uint64_t v19 = v19 | 0x10;
        }
        continue;
      case 'n':
        if (v332)
        {
          int v69 = v328;
          unsigned int v70 = (uint64_t *)*((void *)v332 + 2 * v328);
        }

        else
        {
          int v83 = (uint64_t **)v347;
          v347 += 2;
          unsigned int v70 = *v83;
          int v69 = v328;
        }

        int v328 = v69 + 1;
        uint64_t v10 = v329;
        if (v70)
        {
          if ((v19 & 0x20) != 0 || (v19 & 0x400) != 0 || (v19 & 0x800) != 0 || (v19 & 0x1000) != 0 || (v19 & 0x10) != 0)
          {
            uint64_t v10 = v329;
            uint64_t *v70 = v329;
          }

          else if ((v19 & 0x40) != 0)
          {
            uint64_t v10 = v329;
            *(_WORD *)unsigned int v70 = v329;
          }

          else
          {
            uint64_t v10 = v329;
            if ((v19 & 0x2000) != 0) {
              *(_BYTE *)unsigned int v70 = v329;
            }
            else {
              *(_DWORD *)unsigned int v70 = v329;
            }
          }
        }

        goto LABEL_12;
      case 'o':
LABEL_133:
        uint64_t v61 = v321;
        if ((v19 & 0x4000) != 0) {
          goto LABEL_162;
        }
        if ((v19 & 0x1C20) != 0)
        {
          if (v332)
          {
            unint64_t v63 = *((void *)v332 + 2 * v328);
          }

          else
          {
            uint64_t v89 = (unint64_t *)v347;
            v347 += 2;
            unint64_t v63 = *v89;
          }

          int v90 = 8;
          goto LABEL_379;
        }

        if ((v19 & 0x10) != 0)
        {
          if (v332)
          {
            unint64_t v80 = *((void *)v332 + 2 * v328);
          }

          else
          {
            uint64_t v119 = (unint64_t *)v347;
            v347 += 2;
            unint64_t v80 = *v119;
          }
        }

        else if ((v19 & 0x40) != 0)
        {
          if (v332)
          {
            LOWORD(v80) = *((_WORD *)v332 + 8 * v328);
          }

          else
          {
            unint64_t v80 = (unint64_t)v347;
            v347 += 2;
            LODWORD(v80) = *(_DWORD *)v80;
          }

          unint64_t v80 = (unsigned __int16)v80;
        }

        else if ((v19 & 0x2000) != 0)
        {
          if (v332)
          {
            LOBYTE(v80) = *((_BYTE *)v332 + 16 * v328);
          }

          else
          {
            unint64_t v80 = (unint64_t)v347;
            v347 += 2;
            LODWORD(v80) = *(_DWORD *)v80;
          }

          unint64_t v80 = v80;
        }

        else
        {
          if (v332)
          {
            LODWORD(v80) = *((_DWORD *)v332 + 4 * v328);
          }

          else
          {
            unint64_t v80 = (unint64_t)v347;
            v347 += 2;
            LODWORD(v80) = *(_DWORD *)v80;
          }

          unint64_t v80 = v80;
        }

        unint64_t v310 = v80;
        int v90 = 8;
        goto LABEL_370;
      case 'p':
        if ((v19 & 0x4000) == 0)
        {
          if (v332)
          {
            unint64_t v63 = *((void *)v332 + 2 * v328);
          }

          else
          {
            uint64_t v95 = (unint64_t *)v347;
            v347 += 2;
            unint64_t v63 = *v95;
          }

          LOWORD(v19) = v19 | 0x1000;
          int v352 = 120;
          int v90 = 16;
          int v312 = (const char *)&__vfwprintf_xdigs_lower;
          goto LABEL_379;
        }

        int v59 = 0;
        unsigned int v22 = 112;
        __int16 v60 = v19;
LABEL_123:
        uint64_t v61 = v321;
        goto LABEL_398;
      case 'q':
        uint64_t v19 = v19 | 0x20;
        continue;
      case 's':
LABEL_138:
        __int16 v324 = v19;
        if ((v19 & 0x10) != 0)
        {
          if (v332)
          {
            uint64_t v71 = (const char *)*((void *)v332 + 2 * v328);
          }

          else
          {
            unint64_t v85 = (const char **)v347;
            v347 += 2;
            uint64_t v71 = *v85;
          }

          if (v71) {
            __int128 v20 = v71;
          }
          else {
            __int128 v20 = (const char *)&dword_18049978C;
          }
        }

        else
        {
          free(v322);
          if (v332)
          {
            uint64_t v64 = (char *)*((void *)v332 + 2 * v328);
          }

          else
          {
            int v81 = (char **)v347;
            v347 += 2;
            uint64_t v64 = *v81;
          }

          if (v64)
          {
            __int128 v20 = (const char *)__mbsconv(v64, v21, a2);
            uint64_t v322 = v20;
            if (!v20)
            {
              uint64_t v322 = 0LL;
              *(_WORD *)(v318 + 16) |= 0x40u;
              goto LABEL_725;
            }
          }

          else
          {
            uint64_t v322 = 0LL;
            __int128 v20 = (const char *)&dword_18049978C;
          }
        }

        int64_t v86 = wcslen((const __int32 *)v20);
        if (v86 >= 0x7FFFFFFF) {
          goto LABEL_722;
        }
        int v59 = 0;
        ++v328;
        if (v21 >= v86 || v21 <= -1) {
          uint64_t v61 = v86;
        }
        else {
          uint64_t v61 = v21;
        }
        int v346 = 0;
        __int16 v60 = v324;
        goto LABEL_398;
      case 't':
        uint64_t v19 = v19 | 0x800;
        continue;
      case 'u':
LABEL_142:
        uint64_t v61 = v321;
        if ((v19 & 0x4000) != 0) {
          goto LABEL_162;
        }
        if ((v19 & 0x1C20) != 0)
        {
          if ((v19 & 0x1000) != 0)
          {
            int v65 = v332;
            if (v332)
            {
LABEL_318:
              unint64_t v63 = v65[2 * v328];
LABEL_322:
              int v90 = 10;
              goto LABEL_379;
            }
          }

          else
          {
            int v65 = v332;
            if (v332) {
              goto LABEL_318;
            }
          }

          int v117 = (unint64_t *)v347;
          v347 += 2;
          unint64_t v63 = *v117;
          goto LABEL_322;
        }

        if ((v19 & 0x10) != 0)
        {
          if (v332)
          {
            unint64_t v82 = *((void *)v332 + 2 * v328);
          }

          else
          {
            int v120 = (unint64_t *)v347;
            v347 += 2;
            unint64_t v82 = *v120;
          }
        }

        else if ((v19 & 0x40) != 0)
        {
          if (v332)
          {
            LOWORD(v82) = *((_WORD *)v332 + 8 * v328);
          }

          else
          {
            unint64_t v82 = (unint64_t)v347;
            v347 += 2;
            LODWORD(v82) = *(_DWORD *)v82;
          }

          unint64_t v82 = (unsigned __int16)v82;
        }

        else if ((v19 & 0x2000) != 0)
        {
          if (v332)
          {
            LOBYTE(v82) = *((_BYTE *)v332 + 16 * v328);
          }

          else
          {
            unint64_t v82 = (unint64_t)v347;
            v347 += 2;
            LODWORD(v82) = *(_DWORD *)v82;
          }

          unint64_t v82 = v82;
        }

        else
        {
          if (v332)
          {
            LODWORD(v82) = *((_DWORD *)v332 + 4 * v328);
          }

          else
          {
            unint64_t v82 = (unint64_t)v347;
            v347 += 2;
            LODWORD(v82) = *(_DWORD *)v82;
          }

          unint64_t v82 = v82;
        }

        unint64_t v310 = v82;
        int v90 = 10;
LABEL_370:
        unint64_t v63 = v311;
LABEL_379:
        int v346 = 0;
LABEL_380:
        else {
          __int16 v122 = v19 & 0xFF7F;
        }
        int v123 = v122 & 1;
        __int16 v124 = v122;
        unint64_t v311 = v63;
        if ((v122 & 0x1C20) != 0)
        {
          if (v63 | v21) {
            goto LABEL_392;
          }
          __int128 v20 = (const char *)&v357;
          if (v90 == 8)
          {
            __int128 v20 = (const char *)&v357;
            if ((v122 & 1) != 0)
            {
              int v123 = 1;
LABEL_392:
              __int128 v20 = (const char *)__ultoa_0(v63, &v357, v90, v123, (uint64_t)v312);
            }
          }
        }

        else
        {
          unint64_t v63 = v310;
          if (v310 | v21) {
            goto LABEL_392;
          }
          __int128 v20 = (const char *)&v357;
          if (v90 == 8)
          {
            __int128 v20 = (const char *)&v357;
            if ((v122 & 1) != 0)
            {
              int v123 = 1;
              unint64_t v63 = v310;
              goto LABEL_392;
            }
          }
        }

        uint64_t v61 = ((char *)&v357 - v20) >> 2;
        ++v328;
        __int16 v60 = v124;
        if ((v124 & 0x200) != 0 && &v357 != (int *)v20)
        {
          __int16 v60 = v124;
        }

        int v59 = v21;
        goto LABEL_398;
      case 'v':
        uint64_t v19 = v19 | 0x4000;
        continue;
      case 'x':
        int v66 = (const char *)&__vfwprintf_xdigs_lower;
LABEL_158:
        int v312 = v66;
        uint64_t v61 = v321;
        if ((v19 & 0x4000) == 0)
        {
          if ((v19 & 0x1C20) != 0)
          {
            if (v332)
            {
              unint64_t v63 = *((void *)v332 + 2 * v328);
            }

            else
            {
              size_t v91 = (unint64_t *)v347;
              v347 += 2;
              unint64_t v63 = *v91;
            }
          }

          else
          {
            if ((v19 & 0x10) != 0)
            {
              if (v332)
              {
                unint64_t v84 = *((void *)v332 + 2 * v328);
              }

              else
              {
                size_t v121 = (unint64_t *)v347;
                v347 += 2;
                unint64_t v84 = *v121;
              }
            }

            else if ((v19 & 0x40) != 0)
            {
              if (v332)
              {
                LOWORD(v84) = *((_WORD *)v332 + 8 * v328);
              }

              else
              {
                unint64_t v84 = (unint64_t)v347;
                v347 += 2;
                LODWORD(v84) = *(_DWORD *)v84;
              }

              unint64_t v84 = (unsigned __int16)v84;
            }

            else if ((v19 & 0x2000) != 0)
            {
              if (v332)
              {
                LOBYTE(v84) = *((_BYTE *)v332 + 16 * v328);
              }

              else
              {
                unint64_t v84 = (unint64_t)v347;
                v347 += 2;
                LODWORD(v84) = *(_DWORD *)v84;
              }

              unint64_t v84 = v84;
            }

            else
            {
              if (v332)
              {
                LODWORD(v84) = *((_DWORD *)v332 + 4 * v328);
              }

              else
              {
                unint64_t v84 = (unint64_t)v347;
                v347 += 2;
                LODWORD(v84) = *(_DWORD *)v84;
              }

              unint64_t v84 = v84;
            }

            unint64_t v310 = v84;
            unint64_t v63 = v311;
          }

          if ((v19 & 1) == 0) {
            goto LABEL_378;
          }
          if ((v19 & 0x1C20) != 0)
          {
            if (!v63)
            {
LABEL_378:
              LOWORD(v19) = v19 & 0xFDFF;
              int v90 = 16;
              goto LABEL_379;
            }
          }

          else if (!v310)
          {
            goto LABEL_378;
          }

          int v352 = v22;
          goto LABEL_378;
        }

LABEL_162:
        int v59 = 0;
LABEL_163:
        __int16 v60 = v19;
LABEL_398:
        uint64_t v319 = v21;
        uint64_t v321 = v61;
        if ((v60 & 0x4000) != 0)
        {
          if (v332)
          {
            __int128 v188 = *((_OWORD *)v332 + v328);
          }

          else
          {
            int v194 = (_OWORD *)(((unint64_t)v347 + 15) & 0xFFFFFFFFFFFFFFF0LL);
            int v347 = v194 + 1;
            __int128 v188 = *v194;
          }

          __int128 v338 = v188;
          uint64_t v195 = (char *)a3 - (char *)i - 4;
          uint64_t v196 = v195 >> 2;
          if ((unint64_t)((v195 >> 2) + 2) >= 0x22)
          {
            char v198 = v60;
            uint64_t v326 = v188;
            v199 = (char *)malloc(v196 + 3);
            *(void *)&__int128 v188 = v326;
            LOBYTE(v60) = v198;
            v197 = v199;
          }

          else
          {
            v197 = v348;
          }

          if (v337 == 88)
          {
            if (v22 == 99) {
              int v337 = 0;
            }
            else {
              int v337 = 32;
            }
          }

          if (v195 >= 1)
          {
            unint64_t v222 = 0LL;
            int v223 = 0;
            int v224 = 0;
            int v225 = 0;
            if (v196 <= 1) {
              uint64_t v226 = 1LL;
            }
            else {
              uint64_t v226 = v195 >> 2;
            }
            uint64_t v227 = 4 * v226;
            while (1)
            {
              unsigned int v228 = i[v222 / 4];
              if (v228 - 42 > 0x3E) {
                goto LABEL_567;
              }
LABEL_570:
              v222 += 4LL;
              if (v227 == v222) {
                goto LABEL_573;
              }
            }

            if (v228 == 42)
            {
              if (i[v222 / 4 - 1] == 46) {
                int v223 = 1;
              }
              else {
                int v224 = 1;
              }
            }

            else
            {
LABEL_567:
              if (v228 == 108 || v228 == 118) {
                goto LABEL_570;
              }
            }

            v197[v225++] = v228;
            goto LABEL_570;
          }

          int v225 = 0;
          int v224 = 0;
          int v223 = 0;
LABEL_573:
          if ((v60 & 0x40) == 0)
          {
            if ((v60 & 0x10) != 0)
            {
              if (v22 == 112) {
                int v230 = 5;
              }
              else {
                int v230 = 2;
              }
LABEL_584:
              int v327 = v230;
              uint64_t v233 = 4LL;
            }

            else
            {
              char v229 = v22 - 65;
              if (v22 - 65 > 0x2F) {
                goto LABEL_601;
              }
              if (((1LL << v229) & 0x7100000051LL) != 0)
              {
                int v230 = 6;
                goto LABEL_584;
              }

              if (((1LL << v229) & 0x800400000000LL) == 0)
              {
LABEL_601:
                *(_WORD *)&v197[v225] = 26728;
                v225 += 2;
              }

              if (v22 == 112) {
                int v240 = 3;
              }
              else {
                int v240 = 0;
              }
              int v327 = v240;
              uint64_t v233 = 16LL;
            }

            uint64_t v313 = v233;
            int v231 = v320;
            goto LABEL_589;
          }

          int v231 = v320;
          if (v22 == 99) {
            goto LABEL_587;
          }
          if (v22 != 112)
          {
            v197[v225++] = 104;
LABEL_587:
            int v232 = 1;
            goto LABEL_588;
          }

          int v232 = 4;
LABEL_588:
          int v327 = v232;
          uint64_t v313 = 8LL;
LABEL_589:
          int v234 = &v197[v225];
          *int v234 = v22;
          v234[1] = 0;
          if (v224)
          {
            if (v223)
            {
              switch(v327)
              {
                case 0:
                  uint64_t v235 = v188;
                  goto LABEL_607;
                case 1:
                  uint64_t v235 = (unsigned __int16)v188;
                  goto LABEL_607;
                case 2:
                  int v241 = (unint64_t *)asprintf_l(&v330, a2, v197, v18, v21, (void)v188);
                  goto LABEL_614;
                case 3:
                  uint64_t v235 = v188;
                  goto LABEL_607;
                case 4:
                  uint64_t v235 = (unsigned __int16)v188;
                  goto LABEL_607;
                case 5:
                  uint64_t v235 = v188;
LABEL_607:
                  int v241 = (unint64_t *)asprintf_l(&v330, a2, v197, v18, v21, v235);
                  goto LABEL_614;
                case 6:
                  int v241 = (unint64_t *)asprintf_l(&v330, a2, v197, v18, v21, *(float *)&v188);
LABEL_614:
                  int v231 = v241;
                  break;
                default:
                  break;
              }

              uint64_t v10 = v329 + (int)v231;
              int v242 = v330;
              int v243 = v335.i32[0];
              __int32 v244 = v335.i32[1];
              v245 = &v333[4 * v335.i32[0]];
              *((void *)v245 + 3) = v330;
              *((void *)v245 + 4) = (int)v231;
              int v320 = v231;
              v335.i32[1] = v244 + (_DWORD)v231;
              v335.i32[0] = v243 + 1;
              if (v243 >= 7)
              {
                int v242 = v330;
              }

              uint64_t v236 = v197;
              free(v242);
              int v246 = (float *)&v338 + 1;
              uint64_t v247 = 1LL;
              while (1)
              {
                if (v337)
                {
                  int32x2_t v248 = vadd_s32(v335, (int32x2_t)0x100000001LL);
                  int v249 = v335.i32[0];
                  int v250 = &v333[4 * v335.i32[0]];
                  *((void *)v250 + 3) = &v337;
                  *((void *)v250 + 4) = 1LL;
                  int32x2_t v335 = v248;
                  if (v249 >= 7)
                  {
                  }
                }

                int v251 = v320;
                switch(v327)
                {
                  case 0:
                  case 3:
                    uint64_t v252 = *((unsigned __int8 *)&v338 + v247);
                    goto LABEL_626;
                  case 1:
                  case 4:
                    uint64_t v252 = *((unsigned __int16 *)&v338 + v247);
                    goto LABEL_626;
                  case 2:
                  case 5:
                    uint64_t v252 = *(unsigned int *)v246;
LABEL_626:
                    int v253 = (unint64_t *)asprintf_l(&v330, a2, v236, v18, v21, v252);
                    goto LABEL_627;
                  case 6:
                    int v253 = (unint64_t *)asprintf_l(&v330, a2, v236, v18, v21, *v246);
LABEL_627:
                    int v251 = v253;
                    break;
                  default:
                    break;
                }

                v10 += (int)v251;
                int v254 = v330;
                int v255 = v335.i32[0];
                __int32 v256 = v335.i32[1];
                int v257 = &v333[4 * v335.i32[0]];
                *((void *)v257 + 3) = v330;
                *((void *)v257 + 4) = (int)v251;
                int v320 = v251;
                v335.i32[1] = v256 + (_DWORD)v251;
                v335.i32[0] = v255 + 1;
                if (v255 >= 7)
                {
                  int v254 = v330;
                }

                free(v254);
                ++v247;
                ++v246;
                if (v313 == v247) {
                  goto LABEL_716;
                }
              }
            }

            else
            {
              switch(v327)
              {
                case 0:
                  uint64_t v238 = v188;
                  goto LABEL_663;
                case 1:
                  uint64_t v238 = (unsigned __int16)v188;
                  goto LABEL_663;
                case 2:
                  v275 = (unint64_t *)asprintf_l(&v330, a2, v197, v18, (void)v188);
                  goto LABEL_670;
                case 3:
                  uint64_t v238 = v188;
                  goto LABEL_663;
                case 4:
                  uint64_t v238 = (unsigned __int16)v188;
                  goto LABEL_663;
                case 5:
                  uint64_t v238 = v188;
LABEL_663:
                  v275 = (unint64_t *)asprintf_l(&v330, a2, v197, v18, v238);
                  goto LABEL_670;
                case 6:
                  v275 = (unint64_t *)asprintf_l(&v330, a2, v197, v18, *(float *)&v188);
LABEL_670:
                  int v231 = v275;
                  break;
                default:
                  break;
              }

              uint64_t v236 = v197;
              uint64_t v10 = v329 + (int)v231;
              int v276 = v330;
              int v277 = v335.i32[0];
              __int32 v278 = v335.i32[1];
              v279 = &v333[4 * v335.i32[0]];
              *((void *)v279 + 3) = v330;
              *((void *)v279 + 4) = (int)v231;
              int v320 = v231;
              v335.i32[1] = v278 + (_DWORD)v231;
              v335.i32[0] = v277 + 1;
              if (v277 >= 7)
              {
                int v276 = v330;
              }

              free(v276);
              uint64_t v280 = (float *)&v338 + 1;
              uint64_t v281 = 1LL;
              while (1)
              {
                if (v337)
                {
                  int32x2_t v282 = vadd_s32(v335, (int32x2_t)0x100000001LL);
                  int v283 = v335.i32[0];
                  int v284 = &v333[4 * v335.i32[0]];
                  *((void *)v284 + 3) = &v337;
                  *((void *)v284 + 4) = 1LL;
                  int32x2_t v335 = v282;
                  if (v283 >= 7)
                  {
                  }
                }

                int v285 = v320;
                switch(v327)
                {
                  case 0:
                  case 3:
                    uint64_t v286 = *((unsigned __int8 *)&v338 + v281);
                    goto LABEL_682;
                  case 1:
                  case 4:
                    uint64_t v286 = *((unsigned __int16 *)&v338 + v281);
                    goto LABEL_682;
                  case 2:
                  case 5:
                    uint64_t v286 = *(unsigned int *)v280;
LABEL_682:
                    uint64_t v287 = (unint64_t *)asprintf_l(&v330, a2, v236, v18, v286);
                    goto LABEL_683;
                  case 6:
                    uint64_t v287 = (unint64_t *)asprintf_l(&v330, a2, v236, v18, *v280);
LABEL_683:
                    int v285 = v287;
                    break;
                  default:
                    break;
                }

                v10 += (int)v285;
                int v288 = v330;
                int v289 = v335.i32[0];
                __int32 v290 = v335.i32[1];
                int v291 = &v333[4 * v335.i32[0]];
                *((void *)v291 + 3) = v330;
                *((void *)v291 + 4) = (int)v285;
                int v320 = v285;
                v335.i32[1] = v290 + (_DWORD)v285;
                v335.i32[0] = v289 + 1;
                if (v289 >= 7)
                {
                  int v288 = v330;
                }

                free(v288);
                ++v281;
                ++v280;
                if (v313 == v281) {
                  goto LABEL_716;
                }
              }
            }

            goto LABEL_726;
          }

          uint64_t v236 = v197;
          if (v223)
          {
            switch(v327)
            {
              case 0:
                uint64_t v237 = v188;
                goto LABEL_635;
              case 1:
                uint64_t v237 = (unsigned __int16)v188;
                goto LABEL_635;
              case 2:
                int v258 = (unint64_t *)asprintf_l(&v330, a2, v197, v21, (void)v188);
                goto LABEL_642;
              case 3:
                uint64_t v237 = v188;
                goto LABEL_635;
              case 4:
                uint64_t v237 = (unsigned __int16)v188;
                goto LABEL_635;
              case 5:
                uint64_t v237 = v188;
LABEL_635:
                int v258 = (unint64_t *)asprintf_l(&v330, a2, v197, v21, v237);
                goto LABEL_642;
              case 6:
                int v258 = (unint64_t *)asprintf_l(&v330, a2, v197, v21, *(float *)&v188);
LABEL_642:
                int v231 = v258;
                break;
              default:
                break;
            }

            uint64_t v10 = v329 + (int)v231;
            int v259 = v330;
            int v260 = v335.i32[0];
            __int32 v261 = v335.i32[1];
            uint64_t v262 = &v333[4 * v335.i32[0]];
            *((void *)v262 + 3) = v330;
            *((void *)v262 + 4) = (int)v231;
            int v320 = v231;
            v335.i32[1] = v261 + (_DWORD)v231;
            v335.i32[0] = v260 + 1;
            if (v260 >= 7)
            {
              int v259 = v330;
            }

            free(v259);
            v263 = (float *)&v338 + 1;
            uint64_t v264 = 1LL;
            while (1)
            {
              if (v337)
              {
                int32x2_t v265 = vadd_s32(v335, (int32x2_t)0x100000001LL);
                int v266 = v335.i32[0];
                int v267 = &v333[4 * v335.i32[0]];
                *((void *)v267 + 3) = &v337;
                *((void *)v267 + 4) = 1LL;
                int32x2_t v335 = v265;
                if (v266 >= 7)
                {
                }
              }

              int v268 = v320;
              switch(v327)
              {
                case 0:
                case 3:
                  uint64_t v269 = *((unsigned __int8 *)&v338 + v264);
                  goto LABEL_654;
                case 1:
                case 4:
                  uint64_t v269 = *((unsigned __int16 *)&v338 + v264);
                  goto LABEL_654;
                case 2:
                case 5:
                  uint64_t v269 = *(unsigned int *)v263;
LABEL_654:
                  v270 = (unint64_t *)asprintf_l(&v330, a2, v236, v21, v269);
                  goto LABEL_655;
                case 6:
                  v270 = (unint64_t *)asprintf_l(&v330, a2, v236, v21, *v263);
LABEL_655:
                  int v268 = v270;
                  break;
                default:
                  break;
              }

              v10 += (int)v268;
              int v271 = v330;
              int v272 = v335.i32[0];
              __int32 v273 = v335.i32[1];
              int v274 = &v333[4 * v335.i32[0]];
              *((void *)v274 + 3) = v330;
              *((void *)v274 + 4) = (int)v268;
              int v320 = v268;
              v335.i32[1] = v273 + (_DWORD)v268;
              v335.i32[0] = v272 + 1;
              if (v272 >= 7)
              {
                int v271 = v330;
              }

              free(v271);
              ++v264;
              ++v263;
              if (v313 == v264) {
                goto LABEL_716;
              }
            }
          }

          switch(v327)
          {
            case 0:
              uint64_t v239 = v188;
              goto LABEL_695;
            case 1:
              uint64_t v239 = (unsigned __int16)v188;
              goto LABEL_695;
            case 2:
              int v292 = (unint64_t *)asprintf_l(&v330, a2, v197, (void)v188);
              goto LABEL_696;
            case 3:
              uint64_t v239 = v188;
              goto LABEL_695;
            case 4:
              uint64_t v239 = (unsigned __int16)v188;
              goto LABEL_695;
            case 5:
              uint64_t v239 = v188;
LABEL_695:
              int v292 = (unint64_t *)asprintf_l(&v330, a2, v197, v239);
              goto LABEL_696;
            case 6:
              int v292 = (unint64_t *)asprintf_l(&v330, a2, v197, *(float *)&v188);
LABEL_696:
              int v231 = v292;
              break;
            default:
              break;
          }

          uint64_t v10 = v329 + (int)v231;
          int v293 = v330;
          int v294 = v335.i32[0];
          __int32 v295 = v335.i32[1];
          v296 = &v333[4 * v335.i32[0]];
          *((void *)v296 + 3) = v330;
          *((void *)v296 + 4) = (int)v231;
          int v320 = v231;
          v335.i32[1] = v295 + (_DWORD)v231;
          v335.i32[0] = v294 + 1;
          if (v294 >= 7)
          {
            int v293 = v330;
          }

          free(v293);
          int v297 = (float *)&v338 + 1;
          for (uint64_t j = 1LL; j != v313; ++j)
          {
            if (v337)
            {
              int32x2_t v299 = vadd_s32(v335, (int32x2_t)0x100000001LL);
              int v300 = v335.i32[0];
              uint64_t v301 = &v333[4 * v335.i32[0]];
              *((void *)v301 + 3) = &v337;
              *((void *)v301 + 4) = 1LL;
              int32x2_t v335 = v299;
              if (v300 >= 7)
              {
              }
            }

            int v302 = v320;
            switch(v327)
            {
              case 0:
              case 3:
                uint64_t v303 = *((unsigned __int8 *)&v338 + j);
                goto LABEL_708;
              case 1:
              case 4:
                uint64_t v303 = *((unsigned __int16 *)&v338 + j);
                goto LABEL_708;
              case 2:
              case 5:
                uint64_t v303 = *(unsigned int *)v297;
LABEL_708:
                v304 = (unint64_t *)asprintf_l(&v330, a2, v236, v303);
                goto LABEL_709;
              case 6:
                v304 = (unint64_t *)asprintf_l(&v330, a2, v236, *v297);
LABEL_709:
                int v302 = v304;
                break;
              default:
                break;
            }

            v10 += (int)v302;
            int v305 = v330;
            int v306 = v335.i32[0];
            __int32 v307 = v335.i32[1];
            uint64_t v308 = &v333[4 * v335.i32[0]];
            *((void *)v308 + 3) = v330;
            *((void *)v308 + 4) = (int)v302;
            int v320 = v302;
            v335.i32[1] = v307 + (_DWORD)v302;
            v335.i32[0] = v306 + 1;
            if (v306 >= 7)
            {
              int v305 = v330;
            }

            free(v305);
            ++v297;
          }

        if (v139 == 2)
        {
          *(_BYTE *)v17++ = 32;
        }
      }

      if ((v75 & 0x10) == 0)
      {
        LOBYTE(v90) = *v11;
        if (*v11)
        {
          size_t v91 = 0LL;
          while (v17 + v91 < (unint64_t)v13)
          {
            *(_BYTE *)(v17 + v91) = v90;
            int v90 = v11[++v91];
            if (!v90)
            {
              v17 += v91;
              goto LABEL_171;
            }
          }

          goto LABEL_255;
        }

LABEL_716:
          if (v236 != v348) {
            free(v236);
          }
          ++v328;
          goto LABEL_12;
        }

        if (v59 <= v61) {
          uint64_t v125 = v61;
        }
        else {
          uint64_t v125 = v59;
        }
        int v126 = v346;
        if (v346) {
          ++v125;
        }
        if (v352) {
          v125 += 2LL;
        }
        if (v18 <= v125) {
          uint64_t v127 = v125;
        }
        else {
          uint64_t v127 = v18;
        }
        uint64_t v10 = v127 + v329;
        if (v127 + v329 >= 0x80000000LL)
        {
LABEL_722:
          *__error() = 84;
          goto LABEL_723;
        }

        int v128 = v18 - v125;
        __int16 v325 = v60;
        int v129 = v60 & 0x84;
        if ((v60 & 0x84) == 0 && v128 >= 1)
        {
          int v130 = v128;
          do
          {
            if (v130 >= 16) {
              uint64_t v131 = 16LL;
            }
            else {
              uint64_t v131 = v130;
            }
            int v132 = v335.i32[0];
            __int32 v133 = v335.i32[1];
            int v134 = &v333[4 * v335.i32[0]];
            *((void *)v134 + 3) = &blanks_0;
            *((void *)v134 + 4) = v131;
            v335.i32[1] = v133 + v131;
            v335.i32[0] = v132 + 1;
            BOOL v135 = __OFSUB__(v130, (_DWORD)v131);
            v130 -= v131;
          }

          while (!((v130 < 0) ^ v135 | (v130 == 0)));
          int v126 = v346;
        }

        if (v126)
        {
          int32x2_t v136 = vadd_s32(v335, (int32x2_t)0x100000001LL);
          int v137 = v335.i32[0];
          unsigned int v138 = &v333[4 * v335.i32[0]];
          *((void *)v138 + 3) = &v346;
          *((void *)v138 + 4) = 1LL;
          int32x2_t v335 = v136;
          if (v137 >= 7)
          {
          }
        }

        if (v352)
        {
          int v351 = 48;
          int32x2_t v139 = vadd_s32(v335, (int32x2_t)0x200000001LL);
          int v140 = v335.i32[0];
          double v141 = &v333[4 * v335.i32[0]];
          *((void *)v141 + 3) = &v351;
          *((void *)v141 + 4) = 2LL;
          int32x2_t v335 = v139;
          if (v140 >= 7)
          {
          }
        }

        if (v129 != 128 || v128 < 1)
        {
LABEL_437:
          if ((v325 & 0x100) == 0)
          {
            int v147 = v59 - v321;
            if (v147 >= 1)
            {
              do
              {
                uint64_t v148 = v147 >= 16 ? 16LL : v147;
                int v149 = v335.i32[0];
                __int32 v150 = v335.i32[1];
                int v151 = &v333[4 * v335.i32[0]];
                *((void *)v151 + 3) = &zeroes_0;
                *((void *)v151 + 4) = v148;
                v335.i32[1] = v150 + v148;
                v335.i32[0] = v149 + 1;
                if (v149 >= 7)
                {
                }

                BOOL v135 = __OFSUB__(v147, (_DWORD)v148);
                v147 -= v148;
              }

              while (!((v147 < 0) ^ v135 | (v147 == 0)));
            }

            if (v345)
            {
              goto LABEL_542;
            }

            int v173 = v335.i32[0];
            __int32 v174 = v335.i32[1];
            v175 = &v333[4 * v335.i32[0]];
            *((void *)v175 + 3) = v20;
            *((void *)v175 + 4) = (int)v321;
            v335.i32[1] = v174 + v321;
            v335.i32[0] = v173 + 1;
            if (v173 < 7) {
              goto LABEL_542;
            }
            goto LABEL_476;
          }

          if (v314)
          {
            if (v319 > 1 || (v325 & 1) != 0)
            {
              *(_DWORD *)v356.__mbstate8 = *(_DWORD *)v20;
              HIDWORD(v356._mbstateL) = v343;
              int v161 = v335.i32[0];
              __int32 v162 = v335.i32[1];
              wint_t v163 = &v333[4 * v335.i32[0]];
              *((void *)v163 + 3) = &v356;
              *((void *)v163 + 4) = 2LL;
              __int32 v164 = v162 + 2;
              int v165 = v161 + 1;
              v335.i32[1] = v164;
              v335.i32[0] = v161 + 1;
              if (v161 >= 7)
              {
                int v165 = v335.i32[0];
                __int32 v164 = v335.i32[1];
              }

              v166 = &v333[4 * v165];
              *((void *)v166 + 3) = v20 + 4;
              *((void *)v166 + 4) = (int)v317 - 1;
              v335.i32[1] = v164 + (_DWORD)v317 - 1;
              v335.i32[0] = v165 + 1;
              int v167 = v319 - (_DWORD)v317;
              if ((int)v319 - (int)v317 >= 1)
              {
                do
                {
                  uint64_t v168 = v167 >= 16 ? 16LL : v167;
                  int v169 = v335.i32[0];
                  __int32 v170 = v335.i32[1];
                  int8x16_t v171 = &v333[4 * v335.i32[0]];
                  *((void *)v171 + 3) = &zeroes_0;
                  *((void *)v171 + 4) = v168;
                  v335.i32[1] = v170 + v168;
                  v335.i32[0] = v169 + 1;
                  if (v169 >= 7)
                  {
                  }

                  BOOL v135 = __OFSUB__(v167, (_DWORD)v168);
                  v167 -= v168;
                }

                while (!((v167 < 0) ^ v135 | (v167 == 0)));
              }

LABEL_472:
              int v156 = v335.i32[0];
              __int32 v155 = v335.i32[1];
            }

            else
            {
              int v152 = v335.i32[0];
              __int32 v153 = v335.i32[1];
              unsigned int v154 = &v333[4 * v335.i32[0]];
              *((void *)v154 + 3) = v20;
              *((void *)v154 + 4) = 1LL;
              __int32 v155 = v153 + 1;
              int v156 = v152 + 1;
              v335.i32[1] = v155;
              v335.i32[0] = v152 + 1;
              if (v152 >= 7)
              {
                goto LABEL_472;
              }
            }

            int8x16_t v172 = &v333[4 * v156];
            *((void *)v172 + 3) = v353;
            *((void *)v172 + 4) = (int)v316;
            v335.i32[1] = v155 + (_DWORD)v316;
            v335.i32[0] = v156 + 1;
            if (v156 < 7) {
              goto LABEL_542;
            }
LABEL_476:
            goto LABEL_542;
          }

          int v157 = v340;
          uint64_t v158 = v319;
          if (v340 <= 0)
          {
            int32x2_t v176 = vadd_s32(v335, (int32x2_t)0x100000001LL);
            int v177 = v335.i32[0];
            int v178 = &v333[4 * v335.i32[0]];
            *((void *)v178 + 3) = &zeroes_0;
            *((void *)v178 + 4) = 1LL;
            int32x2_t v335 = v176;
            if (v319 || (v325 & 1) != 0)
            {
              int32x2_t v179 = vadd_s32(v335, (int32x2_t)0x100000001LL);
              int v180 = v335.i32[0];
              int v181 = &v333[4 * v335.i32[0]];
              *((void *)v181 + 3) = &v343;
              *((void *)v181 + 4) = 1LL;
              int32x2_t v335 = v179;
              if (v180 >= 7)
              {
              }
            }

            int v182 = v340;
            if (v340 < 0)
            {
              int v183 = -v340;
              do
              {
                if (v183 >= 16) {
                  uint64_t v184 = 16LL;
                }
                else {
                  uint64_t v184 = v183;
                }
                int v185 = v335.i32[0];
                __int32 v186 = v335.i32[1];
                int v187 = &v333[4 * v335.i32[0]];
                *((void *)v187 + 3) = &zeroes_0;
                *((void *)v187 + 4) = v184;
                v335.i32[1] = v186 + v184;
                v335.i32[0] = v185 + 1;
                BOOL v135 = __OFSUB__(v183, (_DWORD)v184);
                v183 -= v184;
              }

              while (!((v183 < 0) ^ v135 | (v183 == 0)));
              int v182 = v340;
              LODWORD(v158) = v319;
            }

            LODWORD(v158) = v158 + v182;
          }

          else
          {
            unint64_t v159 = (unint64_t)&v322[(int)v317];
            if (v345)
            {
              int v160 = grouping_print_0((uint64_t)v344, (uint64_t)v333, (uint64_t)v20, v159, a2);
              if (v160 < 0) {
                goto LABEL_725;
              }
            }

            else
            {
              unint64_t v189 = (v159 - (unint64_t)v20) >> 2;
              else {
                uint64_t v190 = v189;
              }
              if ((int)v190 < 1)
              {
                LODWORD(v190) = 0;
              }

              else
              {
                int v191 = v335.i32[0];
                __int32 v192 = v335.i32[1];
                v193 = &v333[4 * v335.i32[0]];
                *((void *)v193 + 3) = v20;
                *((void *)v193 + 4) = v190;
                v335.i32[1] = v192 + v190;
                v335.i32[0] = v191 + 1;
              }

              int v200 = v157 - v190;
              if (v200 >= 1)
              {
                do
                {
                  uint64_t v201 = v200 >= 16 ? 16LL : v200;
                  int v202 = v335.i32[0];
                  __int32 v203 = v335.i32[1];
                  int v204 = &v333[4 * v335.i32[0]];
                  *((void *)v204 + 3) = &zeroes_0;
                  *((void *)v204 + 4) = v201;
                  v335.i32[1] = v203 + v201;
                  v335.i32[0] = v202 + 1;
                  if (v202 >= 7)
                  {
                  }

                  BOOL v135 = __OFSUB__(v200, (_DWORD)v201);
                  v200 -= v201;
                }

                while (!((v200 < 0) ^ v135 | (v200 == 0)));
              }

              int v160 = v340;
              uint64_t v158 = v319;
            }

            v20 += 4 * v160;
            if (v158 || (v325 & 1) != 0)
            {
              int32x2_t v205 = vadd_s32(v335, (int32x2_t)0x100000001LL);
              int v206 = v335.i32[0];
              uint64_t v207 = &v333[4 * v335.i32[0]];
              *((void *)v207 + 3) = &v343;
              *((void *)v207 + 4) = 1LL;
              int32x2_t v335 = v205;
            }

            else
            {
              LODWORD(v158) = 0;
            }
          }

          unint64_t v208 = (unint64_t)((char *)&v322[v317] - v20) >> 2;
          else {
            uint64_t v209 = v208;
          }
          if ((int)v209 < 1)
          {
            LODWORD(v209) = 0;
          }

          else
          {
            int v210 = v335.i32[0];
            __int32 v211 = v335.i32[1];
            int v212 = &v333[4 * v335.i32[0]];
            *((void *)v212 + 3) = v20;
            *((void *)v212 + 4) = v209;
            v335.i32[1] = v211 + v209;
            v335.i32[0] = v210 + 1;
          }

          int v213 = v158 - v209;
          if ((int)v158 - (int)v209 >= 1)
          {
            do
            {
              uint64_t v214 = v213 >= 16 ? 16LL : v213;
              int v215 = v335.i32[0];
              __int32 v216 = v335.i32[1];
              uint64_t v217 = &v333[4 * v335.i32[0]];
              *((void *)v217 + 3) = &zeroes_0;
              *((void *)v217 + 4) = v214;
              v335.i32[1] = v216 + v214;
              v335.i32[0] = v215 + 1;
              if (v215 >= 7)
              {
              }

              BOOL v135 = __OFSUB__(v213, (_DWORD)v214);
              v213 -= v214;
            }

            while (!((v213 < 0) ^ v135 | (v213 == 0)));
          }

LABEL_542:
          if ((v325 & 4) != 0 && v128 >= 1)
          {
            do
            {
              uint64_t v218 = v128 >= 16 ? 16LL : v128;
              int v219 = v335.i32[0];
              __int32 v220 = v335.i32[1];
              v221 = &v333[4 * v335.i32[0]];
              *((void *)v221 + 3) = &blanks_0;
              *((void *)v221 + 4) = v218;
              v335.i32[1] = v220 + v218;
              v335.i32[0] = v219 + 1;
              if (v219 >= 7)
              {
              }

              BOOL v135 = __OFSUB__(v128, (_DWORD)v218);
              v128 -= v218;
            }

            while (!((v128 < 0) ^ v135 | (v128 == 0)));
          }

          goto LABEL_12;
        }

        int v142 = v128;
        while (1)
        {
          uint64_t v143 = v142 >= 16 ? 16LL : v142;
          int v144 = v335.i32[0];
          __int32 v145 = v335.i32[1];
          int v146 = &v333[4 * v335.i32[0]];
          *((void *)v146 + 3) = &zeroes_0;
          *((void *)v146 + 4) = v143;
          v335.i32[1] = v145 + v143;
          v335.i32[0] = v144 + 1;
          if (v144 >= 7)
          {
          }

          BOOL v135 = __OFSUB__(v142, (_DWORD)v143);
          v142 -= v143;
          if ((v142 < 0) ^ v135 | (v142 == 0)) {
            goto LABEL_437;
          }
        }

LABEL_725:
        uint64_t v10 = v329;
LABEL_726:
        free(v322);
        if ((*(_WORD *)(v318 + 16) & 0x40) != 0) {
          unint64_t v309 = -1LL;
        }
        else {
          unint64_t v309 = v10;
        }
        if (v332 && v332 != v350) {
          free(v332);
        }
        if (v309 > 0x7FFFFFFE) {
          return 0xFFFFFFFFLL;
        }
        else {
          return v309;
        }
      case 'z':
        uint64_t v19 = v19 | 0x400;
        continue;
      default:
        if (!v22) {
          goto LABEL_724;
        }
        int v59 = 0;
        *(_DWORD *)v356.__mbstate8 = v22;
        int v346 = 0;
        __int128 v20 = (const char *)&v356;
        uint64_t v61 = 1LL;
        goto LABEL_163;
    }
  }

int vfwprintf(FILE *a1, const __int32 *a2, __darwin_va_list a3)
{
  uint64_t v5 = __locale_key;
  size_t v6 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (v6) {
    locale_t v7 = v6;
  }
  else {
    locale_t v7 = (_xlocale *)&__global_locale;
  }
  return vfwprintf_l(a1, v7, a2, a3);
}

void *__mbsconv(char *a1, unsigned int a2, _xlocale *a3)
{
  if (!a1) {
    return 0LL;
  }
  int v4 = a1;
  if ((a2 & 0x80000000) != 0)
  {
    size_t v6 = _platform_strlen();
    goto LABEL_10;
  }

  size_t v5 = *(int *)(*((void *)a3 + 166) + 64LL);
  memset(&v15, 0, sizeof(v15));
  size_t v6 = 0LL;
  if (a2)
  {
    uint64_t v7 = a2;
    uint64_t v8 = a1;
    do
    {
      size_t v9 = mbrlen_l(v8, v5, &v15, a3);
      if (v9 + 2 < 3) {
        break;
      }
      v8 += v9;
      v6 += v9;
      --v7;
    }

    while (v7);
    if (v9 > 0xFFFFFFFFFFFFFFFDLL) {
      return 0LL;
    }
  }

uint64_t grouping_init_0(uint64_t a1, int a2, locale_t a3)
{
  size_t v6 = localeconv_l(a3);
  *(void *)(a1 + 8) = __fix_nogrouping(v6->grouping);
  memset(&v16, 0, sizeof(v16));
  uint64_t v7 = localeconv_l(a3);
  int v8 = mbrtowc_l(&v15, v7->thousands_sep, *(int *)(*((void *)a3 + 166) + 64LL), &v16, a3);
  uint64_t result = 0LL;
  if ((~v8 & 0xFFFFFFFE) != 0) {
    __int32 v10 = v15;
  }
  else {
    __int32 v10 = 0;
  }
  *(_DWORD *)a1 = v10;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 16) = a2;
  __int32 v11 = *(unsigned __int8 **)(a1 + 8);
  int v12 = *v11;
  if (v12 != 127)
  {
    int v13 = 0;
    int v14 = 0;
    do
    {
      a2 -= (char)v12;
      *(_DWORD *)(a1 + 16) = a2;
      if (v11[1])
      {
        *(_DWORD *)(a1 + 20) = ++v14;
        *(void *)(a1 + 8) = ++v11;
      }

      else
      {
        *(_DWORD *)(a1 + 24) = ++v13;
      }

      int v12 = *v11;
    }

    while (v12 != 127);
    return (v13 + v14);
  }

  return result;
}

_DWORD *__ultoa_0(unint64_t a1, _DWORD *a2, int a3, int a4, uint64_t a5)
{
  switch(a3)
  {
    case 8:
      size_t v6 = a2 - 1;
      do
      {
        int v7 = a1 & 7 | 0x30;
        *v6-- = v7;
        BOOL v8 = a1 > 7;
        a1 >>= 3;
      }

      while (v8);
      a2 = v6 + 1;
      if (a4 && v7 != 48)
      {
        *size_t v6 = 48;
        return v6;
      }

      break;
    case 10:
      if (a1 > 9)
      {
        if ((a1 & 0x8000000000000000LL) != 0)
        {
          *--a2 = (a1 % 0xA) | 0x30;
          a1 /= 0xAuLL;
        }

        do
        {
          *--a2 = (a1 % 0xA) | 0x30;
          BOOL v5 = a1 >= 0xA;
          a1 /= 0xAuLL;
        }

        while (v5);
      }

      else
      {
        *--a2 = a1 + 48;
      }

      break;
    case 16:
      do
      {
        *--a2 = *(char *)(a5 + (a1 & 0xF));
        BOOL v5 = a1 >= 0x10;
        a1 >>= 4;
      }

      while (v5);
      break;
    default:
      abort_report_np((uint64_t)"%s:%s:%u: __ultoa: invalid base=%d");
  }

  return a2;
}

unint64_t grouping_print_0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, locale_t a5)
{
  int v10 = *(_DWORD *)(a1 + 16);
  unint64_t v11 = (a4 - a3) >> 2;
  else {
    uint64_t v12 = v11;
  }
  if ((int)v12 < 1)
  {
    LODWORD(v12) = 0;
  }

  else
  {
    int v13 = *(_DWORD *)(a2 + 20);
    uint64_t v14 = *(int *)(a2 + 16);
    uint64_t v15 = a2 + 16 * v14;
    *(void *)(v15 + 24) = a3;
    *(void *)(v15 + 32) = v12;
    *(_DWORD *)(a2 + 16) = v14 + 1;
    *(_DWORD *)(a2 + 20) = v13 + v12;
  }

  int v17 = v10 - v12;
  if (v10 - (int)v12 < 1)
  {
LABEL_17:
    for (unint64_t i = a3 + 4LL * *(int *)(a1 + 16); ; i += 4LL * **(char **)(a1 + 8))
    {
      int v24 = *(_DWORD *)(a1 + 20);
      int v25 = *(_DWORD *)(a1 + 24);
      if (v24 <= 0) {
        break;
      }
      if (v25 >= 1) {
        goto LABEL_22;
      }
      --*(void *)(a1 + 8);
      *(_DWORD *)(a1 + 20) = v24 - 1;
LABEL_23:
      int32x2_t v26 = *(int32x2_t *)(a2 + 16);
      uint64_t v27 = a2 + 16LL * v26.i32[0];
      *(void *)(v27 + 24) = a1;
      *(void *)(v27 + 32) = 1LL;
      *(int32x2_t *)(a2 + 16) = vadd_s32(v26, (int32x2_t)0x100000001LL);
      int v28 = **(char **)(a1 + 8);
      unint64_t v29 = (a4 - i) >> 2;
      else {
        uint64_t v30 = v29;
      }
      if ((int)v30 < 1)
      {
        LODWORD(v30) = 0;
      }

      else
      {
        int v31 = *(_DWORD *)(a2 + 20);
        uint64_t v32 = *(int *)(a2 + 16);
        uint64_t v33 = a2 + 16 * v32;
        *(void *)(v33 + 24) = i;
        *(void *)(v33 + 32) = v30;
        *(_DWORD *)(a2 + 16) = v32 + 1;
        *(_DWORD *)(a2 + 20) = v31 + v30;
      }

      int v34 = v28 - v30;
      if (v34 >= 1)
      {
        do
        {
          uint64_t v35 = v34 >= 16 ? 16LL : v34;
          int v36 = *(_DWORD *)(a2 + 20);
          uint64_t v37 = *(int *)(a2 + 16);
          uint64_t v38 = a2 + 16 * v37;
          *(void *)(v38 + 24) = &zeroes_0;
          *(void *)(v38 + 32) = v35;
          *(_DWORD *)(a2 + 16) = v37 + 1;
          *(_DWORD *)(a2 + 20) = v36 + v35;
          if ((int)v37 >= 7)
          {
          }

          BOOL v22 = __OFSUB__(v34, (_DWORD)v35);
          v34 -= v35;
        }

        while (!((v34 < 0) ^ v22 | (v34 == 0)));
      }
    }

    if (v25 <= 0)
    {
      if (i <= a4) {
        unint64_t v39 = i;
      }
      else {
        unint64_t v39 = a4;
      }
      return (v39 - a3) >> 2;
    }

uint64_t __sprint(FILE *a1, locale_t a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(a3 + 12);
  if (!v4)
  {
LABEL_13:
    uint64_t result = 0LL;
    *(_DWORD *)(a3 + 8) = 0;
    return result;
  }

  int v7 = *(unsigned int ***)a3;
  while (1)
  {
    BOOL v8 = v7[1];
LABEL_12:
    v7 += 2;
    v4 -= (int)v8;
    *(_DWORD *)(a3 + 12) = v4;
    if (!v4) {
      goto LABEL_13;
    }
  }

  size_t v9 = *v7;
  uint64_t v10 = v7[1];
  while (1)
  {
    unsigned int v12 = *v9++;
    uint64_t v11 = v12;
    if ((a1->_flags & 0x200) == 0)
    {
      LODWORD(v11) = __fputwc(v11, a1, (uint64_t)a2);
      goto LABEL_9;
    }

    memset(&v20, 0, sizeof(v20));
    size_t v13 = wcrtomb_l(v19, v11, &v20, a2);
    if (v13 == -1LL) {
      break;
    }
    v15[1] = v13;
    mbstate_t v16 = v15;
    int v17 = 1;
    int v18 = v13;
    v15[0] = v19;
LABEL_9:
    if ((_DWORD)v11 == -1) {
      return 0xFFFFFFFFLL;
    }
    if (!--v10)
    {
      int v4 = *(_DWORD *)(a3 + 12);
      goto LABEL_12;
    }
  }

  a1->_flags |= 0x40u;
  return 0xFFFFFFFFLL;
}

int vfwscanf(FILE *a1, const __int32 *a2, __darwin_va_list a3)
{
  extra = a1->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0) {
    *((_BYTE *)extra + 72) = *((_BYTE *)extra + 72) & 0xF8 | 1;
  }
  uint64_t v7 = __locale_key;
  BOOL v8 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v7);
  if (v8) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = (_xlocale *)&__global_locale;
  }
  int v10 = __vfwscanf((uint64_t)a1, v9, (unsigned int *)a2, (__int32 **)a3);
  funlockfile(a1);
  return v10;
}

uint64_t __vfwscanf(uint64_t a1, locale_t a2, unsigned int *a3, __int32 **a4)
{
  __int32 v174 = a4;
  unint64_t v165 = *(int *)(*((void *)a2 + 166) + 64LL);
  unsigned int v4 = *a3;
  if (!*a3) {
    return 0LL;
  }
  BOOL v5 = a3;
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  locale_t v10 = (locale_t)&__global_locale;
  if (a2 != (locale_t)-1LL) {
    locale_t v10 = a2;
  }
  locale_t v170 = v10;
  uint64_t v158 = 0LL;
  v166 = 0LL;
  base = v178;
LABEL_5:
  uint64_t v11 = v5;
  unsigned int v168 = v8;
  while (1)
  {
    BOOL v5 = v11;
LABEL_7:
    if (v4 > 0x7F)
    {
      if (v4 >= 0x100)
      {
        LOWORD(v13) = ___runetype_l(v4, a2);
        goto LABEL_13;
      }

      unsigned int v12 = *(_RuneLocale **)(*((void *)v170 + 166) + 120LL);
    }

    else
    {
      unsigned int v12 = &_DefaultRuneLocale;
    }

    __uint32_t v13 = v12->__runetype[v4];
LABEL_13:
    uint64_t v11 = v5 + 1;
    if ((v13 & 0x4000) != 0)
    {
      uint64_t v28 = __fgetwc(a1, (uint64_t)a2);
      if ((_DWORD)v28 == -1) {
        goto LABEL_78;
      }
      uint64_t v29 = v28;
      while (1)
      {
        if (v29 > 0x7F)
        {
          if (v29 >= 0x100)
          {
            LOWORD(v31) = ___runetype_l(v29, a2);
            goto LABEL_70;
          }

          uint64_t v30 = *(_RuneLocale **)(*((void *)v170 + 166) + 120LL);
        }

        else
        {
          uint64_t v30 = &_DefaultRuneLocale;
        }

        __uint32_t v31 = v30->__runetype[v29];
LABEL_70:
        if ((v31 & 0x4000) == 0)
        {
          __ungetwc(v29, a1, (uint64_t)a2);
          goto LABEL_78;
        }

        uint64_t v9 = (v9 + 1);
        uint64_t v29 = __fgetwc(a1, (uint64_t)a2);
        if ((_DWORD)v29 == -1) {
          goto LABEL_78;
        }
      }
    }

    if (v4 == 37) {
      break;
    }
    uint64_t v25 = __fgetwc(a1, (uint64_t)a2);
    if ((_DWORD)v25 == -1)
    {
LABEL_464:
      if (v168) {
        return v168;
      }
      else {
        return 0xFFFFFFFFLL;
      }
    }

LABEL_97:
    uint64_t v9 = (v9 + 1);
    uint64_t v36 = __fgetwc(a1, (uint64_t)a2);
    if ((_DWORD)v36 == -1) {
      goto LABEL_464;
    }
  }

  __ungetwc(v36, a1, (uint64_t)a2);
LABEL_118:
  switch(v32)
  {
    case 0:
      base = (_DWORD *)v34;
      if (v15 <= 1) {
        unint64_t v41 = 1LL;
      }
      else {
        unint64_t v41 = v15;
      }
      unsigned int v42 = v14 & 8;
      if ((v14 & 1) != 0)
      {
        if ((v14 & 8) == 0)
        {
          unsigned int v73 = v174++;
          p_nptint r = *v73;
        }

        uint64_t v74 = 0LL;
        while (1)
        {
          __int32 v75 = __fgetwc(a1, (uint64_t)a2);
          if (v75 == -1) {
            break;
          }
          if (!v42)
          {
            unsigned int v76 = p_nptr;
            *p_nptint r = v75;
            p_nptint r = v76 + 1;
          }

          if (v41 == ++v74) {
            goto LABEL_372;
          }
        }

        LODWORD(v41) = v74;
LABEL_372:
        if ((_DWORD)v41)
        {
          uint64_t v9 = (v41 + v9);
          uint64_t v8 = ((v42 >> 3) ^ 1) + v168;
          goto LABEL_462;
        }
      }

      else
      {
        if ((v14 & 8) == 0)
        {
          unsigned int v43 = (char **)v174++;
          int v169 = *v43;
        }

        int v44 = 0;
        memset(&v176, 0, sizeof(v176));
        while (1)
        {
          uint64_t v45 = __fgetwc(a1, (uint64_t)a2);
          if ((_DWORD)v45 == -1) {
            break;
          }
          uint64_t v46 = v45;
          if (v42 || v41 < v165)
          {
            size_t v48 = wcrtomb_l(v172, v45, &v176, a2);
            if (v48 == -1LL) {
              goto LABEL_464;
            }
            size_t v47 = v48;
            if (v48 > v41)
            {
              __ungetwc(v46, a1, (uint64_t)a2);
              break;
            }

            if (!v42) {
              _platform_memmove();
            }
          }

          else
          {
            size_t v47 = wcrtomb_l(v169, v45, &v176, a2);
            if (v47 == -1LL) {
              goto LABEL_464;
            }
          }

          if (v42) {
            size_t v49 = 0LL;
          }
          else {
            size_t v49 = v47;
          }
          v169 += v49;
          --v44;
          v41 -= v47;
          if (!v41) {
            goto LABEL_413;
          }
        }

        if (v44)
        {
LABEL_413:
          uint64_t v9 = (v9 - v44);
          if (v42) {
            uint64_t v8 = v168;
          }
          else {
            uint64_t v8 = v168 + 1;
          }
          goto LABEL_462;
        }
      }

      goto LABEL_464;
    case 1:
      if (v15) {
        unint64_t v50 = v15;
      }
      else {
        unint64_t v50 = -1LL;
      }
      base = (_DWORD *)v34;
      if ((~v14 & 9) != 0)
      {
        if ((v14 & 1) != 0)
        {
          __int16 v122 = v174++;
          int v123 = *v122;
          p_nptint r = *v122;
          uint64_t v124 = __fgetwc(a1, (uint64_t)a2);
          if ((_DWORD)v124 != -1)
          {
            uint64_t v125 = v124;
            unint64_t v126 = v50 + 1;
            while (--v126)
            {
              uint64_t v127 = wmemchr(v166, v125, ((char *)v158 - (char *)v166) >> 2);
              if (v163)
              {
                if (v127) {
                  break;
                }
              }

              else if (!v127)
              {
                break;
              }

              int v128 = p_nptr;
              *p_nptint r = v125;
              p_nptint r = v128 + 1;
              uint64_t v125 = __fgetwc(a1, (uint64_t)a2);
              if ((_DWORD)v125 == -1) {
                goto LABEL_399;
              }
            }

            __ungetwc(v125, a1, (uint64_t)a2);
          }

LABEL_399:
          unint64_t v50 = (unint64_t)((char *)p_nptr - (char *)v123) >> 2;
          if (!(_DWORD)v50) {
            return v168;
          }
          *p_nptint r = 0;
          uint64_t v8 = v168 + 1;
        }

        else
        {
          if ((v14 & 8) == 0)
          {
            uint64_t v77 = (char **)v174++;
            int v169 = *v77;
          }

          memset(&v176, 0, sizeof(v176));
          uint64_t v78 = __fgetwc(a1, (uint64_t)a2);
          if ((_DWORD)v78 == -1)
          {
            int v80 = 0;
LABEL_405:
            LODWORD(v50) = v80;
            if (!v168) {
              return 0xFFFFFFFFLL;
            }
          }

          else
          {
            uint64_t v79 = v78;
            int v80 = 0;
            do
            {
              int v81 = wmemchr(v166, v79, ((char *)v158 - (char *)v166) >> 2);
              if (v163)
              {
                if (v81) {
                  goto LABEL_237;
                }
              }

              else if (!v81)
              {
                goto LABEL_237;
              }

              if ((v14 & 8) != 0 || v50 < v165)
              {
                size_t v83 = wcrtomb_l(v172, v79, &v176, a2);
                if (v83 == -1LL) {
                  goto LABEL_464;
                }
                size_t v82 = v83;
                if (v83 > v50) {
                  goto LABEL_237;
                }
                if ((v14 & 8) == 0) {
                  _platform_memmove();
                }
              }

              else
              {
                size_t v82 = wcrtomb_l(v169, v79, &v176, a2);
                if (v82 == -1LL) {
                  goto LABEL_464;
                }
              }

              if ((v14 & 8) != 0) {
                size_t v84 = 0LL;
              }
              else {
                size_t v84 = v82;
              }
              v169 += v84;
              ++v80;
              uint64_t v85 = __fgetwc(a1, (uint64_t)a2);
              uint64_t v79 = v85;
              if ((_DWORD)v85 == -1) {
                break;
              }
              v50 -= v82;
            }

            while (v50);
            if ((_DWORD)v85 == -1) {
              goto LABEL_405;
            }
LABEL_237:
            __ungetwc(v79, a1, (uint64_t)a2);
            LODWORD(v50) = v80;
          }

          if (!(_DWORD)v50) {
            return v168;
          }
          if ((v14 & 8) != 0)
          {
            uint64_t v8 = v168;
          }

          else
          {
            *int v169 = 0;
            uint64_t v8 = v168 + 1;
          }
        }

        goto LABEL_401;
      }

      uint64_t v51 = __fgetwc(a1, (uint64_t)a2);
      if ((_DWORD)v51 == -1) {
        return v168;
      }
      uint64_t v52 = v51;
      uint64_t v53 = 0LL;
      while (1)
      {
        if (v50 == v53) {
          goto LABEL_396;
        }
        int v54 = wmemchr(v166, v52, ((char *)v158 - (char *)v166) >> 2);
        if (v163)
        {
          if (v54) {
            break;
          }
          goto LABEL_153;
        }

        if (!v54) {
          break;
        }
LABEL_153:
        ++v53;
        uint64_t v52 = __fgetwc(a1, (uint64_t)a2);
        if ((_DWORD)v52 == -1)
        {
          LODWORD(v50) = v53;
          uint64_t v8 = v168;
          goto LABEL_401;
        }
      }

      LODWORD(v50) = v53;
LABEL_396:
      __ungetwc(v52, a1, (uint64_t)a2);
      uint64_t v8 = v168;
      if ((_DWORD)v50)
      {
LABEL_401:
        uint64_t v9 = (v50 + v9);
        goto LABEL_462;
      }

      return v8;
    case 2:
      if (v15) {
        unint64_t v55 = v15;
      }
      else {
        unint64_t v55 = -1LL;
      }
      base = (_DWORD *)v34;
      if ((~v14 & 9) == 0)
      {
        uint64_t v56 = __fgetwc(a1, (uint64_t)a2);
        if ((_DWORD)v56 == -1) {
          goto LABEL_141;
        }
        uint64_t v57 = v56;
        uint64_t v58 = (v9 + v55);
        while (1)
        {
          if (!v55)
          {
LABEL_403:
            __ungetwc(v57, a1, (uint64_t)a2);
            uint64_t v9 = v58;
            goto LABEL_141;
          }

          if (v57 > 0x7F)
          {
            if (v57 >= 0x100)
            {
              LOWORD(v60) = ___runetype_l(v57, a2);
              goto LABEL_168;
            }

            int v59 = *(_RuneLocale **)(*((void *)v170 + 166) + 120LL);
          }

          else
          {
            int v59 = &_DefaultRuneLocale;
          }

          __uint32_t v60 = v59->__runetype[v57];
LABEL_168:
          if ((v60 & 0x4000) != 0)
          {
            uint64_t v58 = v9;
            goto LABEL_403;
          }

          uint64_t v9 = (v9 + 1);
          uint64_t v57 = __fgetwc(a1, (uint64_t)a2);
          --v55;
          if ((_DWORD)v57 == -1) {
            goto LABEL_141;
          }
        }
      }

      if ((v14 & 1) == 0)
      {
        if ((v14 & 8) == 0)
        {
          int64_t v86 = (char **)v174++;
          int v169 = *v86;
        }

        memset(&v176, 0, sizeof(v176));
        uint64_t v87 = __fgetwc(a1, (uint64_t)a2);
        if ((_DWORD)v87 == -1) {
          goto LABEL_443;
        }
        uint64_t v88 = v87;
        while (v88 > 0x7F)
        {
          if (v88 < 0x100)
          {
            uint64_t v89 = *(_RuneLocale **)(*((void *)v170 + 166) + 120LL);
            goto LABEL_248;
          }

          LOWORD(v90) = ___runetype_l(v88, a2);
LABEL_249:
          if ((v90 & 0x4000) != 0) {
            goto LABEL_442;
          }
          if ((v14 & 8) != 0 || v55 < v165)
          {
            size_t v92 = wcrtomb_l(v172, v88, &v176, a2);
            if (v92 == -1LL) {
              goto LABEL_464;
            }
            size_t v91 = v92;
            if (v92 > v55) {
              goto LABEL_442;
            }
            if ((v14 & 8) == 0) {
              _platform_memmove();
            }
          }

          else
          {
            size_t v91 = wcrtomb_l(v169, v88, &v176, a2);
            if (v91 == -1LL) {
              goto LABEL_464;
            }
          }

          if ((v14 & 8) != 0) {
            size_t v93 = 0LL;
          }
          else {
            size_t v93 = v91;
          }
          v169 += v93;
          uint64_t v9 = (v9 + 1);
          uint64_t v94 = __fgetwc(a1, (uint64_t)a2);
          uint64_t v88 = v94;
          if ((_DWORD)v94 != -1)
          {
            v55 -= v91;
            if (v55) {
              continue;
            }
          }

          if ((_DWORD)v94 == -1) {
            goto LABEL_443;
          }
LABEL_442:
          __ungetwc(v88, a1, (uint64_t)a2);
LABEL_443:
          if ((v14 & 8) != 0)
          {
LABEL_141:
            uint64_t v8 = v168;
          }

          else
          {
            *int v169 = 0;
LABEL_445:
            uint64_t v8 = v168 + 1;
          }

LABEL_462:
          unsigned int v4 = *v5;
          if (!*v5) {
            return v8;
          }
          goto LABEL_5;
        }

        uint64_t v89 = &_DefaultRuneLocale;
LABEL_248:
        __uint32_t v90 = v89->__runetype[v88];
        goto LABEL_249;
      }

      int v129 = v174++;
      p_nptint r = *v129;
      uint64_t v130 = __fgetwc(a1, (uint64_t)a2);
      if ((_DWORD)v130 == -1) {
        goto LABEL_418;
      }
      uint64_t v131 = v130;
      uint64_t v132 = (v9 + v55);
      while (1)
      {
        if (!v55) {
          goto LABEL_417;
        }
        if (v131 > 0x7F)
        {
          if (v131 >= 0x100)
          {
            LOWORD(v134) = ___runetype_l(v131, a2);
            goto LABEL_392;
          }

          __int32 v133 = *(_RuneLocale **)(*((void *)v170 + 166) + 120LL);
        }

        else
        {
          __int32 v133 = &_DefaultRuneLocale;
        }

        __uint32_t v134 = v133->__runetype[v131];
LABEL_392:
        if ((v134 & 0x4000) != 0)
        {
          uint64_t v132 = v9;
LABEL_417:
          __ungetwc(v131, a1, (uint64_t)a2);
          uint64_t v9 = v132;
LABEL_418:
          *p_nptint r = 0;
          goto LABEL_445;
        }

        BOOL v135 = p_nptr;
        *p_nptint r = v131;
        p_nptint r = v135 + 1;
        uint64_t v9 = (v9 + 1);
        uint64_t v131 = __fgetwc(a1, (uint64_t)a2);
        --v55;
        if ((_DWORD)v131 == -1) {
          goto LABEL_418;
        }
      }

    case 3:
      unsigned int v61 = v14 | 0x2C0;
      p_nptint r = &nptr;
      if (v15 - 513 >= 0xFFFFFFFFFFFFFE00LL) {
        uint64_t v62 = v15;
      }
      else {
        uint64_t v62 = 512LL;
      }
      if (!v62) {
        goto LABEL_421;
      }
      while (1)
      {
        uint64_t v63 = __fgetwc(a1, (uint64_t)a2);
        switch((int)v63)
        {
          case '+':
          case '-':
            if ((v61 & 0x40) == 0) {
              goto LABEL_420;
            }
            unsigned int v61 = v61 & 0xFFFEFFBF | 0x10000;
            goto LABEL_183;
          case ',':
          case '.':
          case '/':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'G':
          case 'H':
          case 'I':
          case 'J':
          case 'K':
          case 'L':
          case 'M':
          case 'N':
          case 'O':
          case 'P':
          case 'Q':
          case 'R':
          case 'S':
          case 'T':
          case 'U':
          case 'V':
          case 'W':
          case 'Y':
          case 'Z':
          case '[':
          case '\\':
          case ']':
          case '^':
          case '_':
            goto LABEL_420;
          case '0':
            int v66 = v61 | 0x100;
            BOOL v67 = (_DWORD)v34 == 0;
            if ((_DWORD)v34) {
              uint64_t v34 = v34;
            }
            else {
              uint64_t v34 = 8LL;
            }
            if (!v67) {
              int v66 = v61;
            }
            if ((v66 & 0x200) != 0) {
              unsigned int v61 = v66 & 0xFFFFFD3F;
            }
            else {
              unsigned int v61 = v66 & 0xFFFFFE3F;
            }
            goto LABEL_183;
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
            uint64_t v34 = __vfwscanf_basefix[(int)v34];
            goto LABEL_182;
          case '8':
          case '9':
            uint64_t v64 = (int)v34;
            uint64_t v34 = __vfwscanf_basefix[(int)v34];
            goto LABEL_420;
          case 'A':
          case 'B':
          case 'C':
          case 'D':
          case 'E':
          case 'F':
          case 'a':
          case 'b':
          case 'c':
          case 'd':
          case 'e':
          case 'f':
LABEL_182:
            v61 &= 0xFFFFFE3F;
            goto LABEL_183;
          case 'X':
            goto LABEL_186;
          default:
            if ((_DWORD)v63 != 120)
            {
              if ((_DWORD)v63 != -1) {
LABEL_420:
              }
                __ungetwc(v63, a1, (uint64_t)a2);
LABEL_421:
              int32x2_t v136 = p_nptr;
              if ((v61 & 0x80) != 0)
              {
                uint64_t v8 = v168;
                if (p_nptr > &nptr)
                {
                  uint64_t v151 = *--p_nptr;
                  __ungetwc(v151, a1, (uint64_t)a2);
                }

                return v8;
              }

              uint64_t v137 = *(p_nptr - 1);
              uint64_t v8 = v168;
              if ((v137 & 0xFFFFFFDF) == 0x58)
              {
                --p_nptr;
                __ungetwc(v137, a1, (uint64_t)a2);
                int32x2_t v136 = p_nptr;
              }

              base = (_DWORD *)v34;
              if ((v61 & 8) == 0)
              {
                __int32 *v136 = 0;
                if ((v61 & 0x8000) != 0)
                {
                  uintmax_t v138 = wcstoumax_l(&nptr, 0LL, v34, a2);
                  if ((v61 & 0x10) != 0) {
                    goto LABEL_437;
                  }
                }

                else
                {
                  uintmax_t v138 = wcstoimax_l(&nptr, 0LL, v34, a2);
                  if ((v61 & 0x10) != 0) {
                    goto LABEL_437;
                  }
                }

                if ((v61 & 0x4000) != 0)
                {
                  double v141 = v174++;
                  *(_BYTE *)*double v141 = v138;
                }

                else if ((v61 & 4) != 0)
                {
                  int v142 = v174++;
                  *(_WORD *)*int v142 = v138;
                }

                else if ((v61 & 1) != 0 {
                       || (v61 & 0x400) != 0
                }
                       || (v61 & 0x800) != 0
                       || (v61 & 0x1000) != 0
                       || (v61 & 0x2000) != 0)
                {
LABEL_437:
                  int v140 = (uintmax_t **)v174++;
                  *_DWORD *v140 = v138;
                }

                else
                {
                  int32x2_t v139 = v174++;
                  *uint64_t *v139 = v138;
                }

                uint64_t v8 = v168 + 1;
                int32x2_t v136 = p_nptr;
              }

              uint64_t v9 = v9 + ((unint64_t)((char *)v136 - (char *)&nptr) >> 2);
              goto LABEL_462;
            }

LABEL_186:
            if ((v61 & 0x100) == 0 || p_nptr != &v178[HIWORD(v61) & 1]) {
              goto LABEL_420;
            }
            v61 &= ~0x100u;
            uint64_t v34 = 16LL;
LABEL_183:
            int v65 = p_nptr;
            *p_nptint r = v63;
            p_nptint r = v65 + 1;
            if (!--v62) {
              goto LABEL_421;
            }
            break;
        }
      }

    case 4:
      uint64_t v153 = a1;
      base = (_DWORD *)v34;
      memset(&v179, 0, sizeof(v179));
      int v68 = localeconv();
      if (v15) {
        uint64_t v69 = v15 + 1;
      }
      else {
        uint64_t v69 = 513LL;
      }
      unsigned int v70 = (__int32 *)__parsefloat_buf(4 * v69);
      if (!v70) {
        return v168;
      }
      uint64_t v71 = v69 - 1;
      unint64_t v159 = (char *)(v70 - 1);
      BOOL v72 = v69 - 1 > 0;
      int v156 = v70;
      if (v15 && v71 < 1)
      {
        __int32 v164 = (char *)v70;
        goto LABEL_448;
      }

      uint64_t v154 = v69;
      unsigned int v161 = 0;
      char v162 = 0;
      int v95 = 0;
      int v152 = 0;
      __int32 v164 = (char *)v70;
      unint64_t v96 = (unint64_t)&v70[v71];
      break;
    default:
      base = (_DWORD *)v34;
      goto LABEL_141;
  }

  while (2)
  {
    BOOL v160 = v72;
    unint64_t v157 = v96;
    uint64_t v97 = __fgetwc(a1, (uint64_t)a2);
    if ((_DWORD)v97 == -1) {
      goto LABEL_448;
    }
    uint64_t v98 = v97;
    uint64_t v99 = v97;
    uint64_t v100 = &_DefaultRuneLocale.__runetype[v97];
    int v155 = v97 & 0xFFFFFFDF;
    uint64_t v101 = v161;
LABEL_268:
    switch(v95)
    {
      case 0:
        int v95 = 1;
        goto LABEL_279;
      case 1:
        int v95 = 6;
        if ((int)v98 <= 77)
        {
          if ((_DWORD)v98 == 48)
          {
            int v95 = 5;
LABEL_341:
            unsigned int v161 = v101;
LABEL_357:
            unint64_t v159 = v164;
LABEL_358:
            if (!v160)
            {
              uint64_t v119 = (__int32 *)__parsefloat_buf(4 * (v154 + 513));
              if (v119)
              {
                unint64_t v96 = (unint64_t)&v119[v154 + 512];
                __int32 v164 = (char *)v119 + v164 - (char *)v156;
                unint64_t v159 = (char *)v119 + v159 - (char *)v156;
                int v156 = v119;
                v154 += 513LL;
                a1 = v153;
                goto LABEL_362;
              }

              return v168;
            }

            unint64_t v96 = v157;
LABEL_362:
            *(_DWORD *)__int32 v164 = v98;
            int v120 = v164 + 4;
            __int32 v164 = v120;
            BOOL v72 = (unint64_t)v120 < v96;
            if (v15 && (unint64_t)v120 >= v96)
            {
LABEL_448:
              for (unint64_t i = v164 - 4; v159 < i; i -= 4)
              {
                unsigned int v144 = *(_DWORD *)i;
                __ungetwc(v144, a1, (uint64_t)a2);
              }

              *((_DWORD *)v159 + 1) = 0;
              unint64_t v145 = (unint64_t)(v159 + 4 - (char *)v156) >> 2;
              if ((_DWORD)v145)
              {
                if ((v14 & 8) != 0)
                {
                  uint64_t v8 = v168;
                }

                else
                {
                  if ((v14 & 2) != 0)
                  {
                    double v148 = wcstold_l(v156, &p_nptr, a2);
                  }

                  else
                  {
                    if ((v14 & 1) == 0)
                    {
                      float v146 = wcstof_l(v156, &p_nptr, a2);
                      int v147 = (float **)v174++;
                      **int v147 = v146;
                      goto LABEL_460;
                    }

                    double v148 = wcstod_l(v156, &p_nptr, a2);
                  }

                  int v149 = (double **)v174++;
                  **int v149 = v148;
LABEL_460:
                  uint64_t v8 = v168 + 1;
                }

                uint64_t v9 = (v9 + v145);
                goto LABEL_462;
              }

              return v168;
            }

            continue;
          }

          if ((_DWORD)v98 == 73) {
            goto LABEL_308;
          }
        }

        else
        {
          switch((_DWORD)v98)
          {
            case 'N':
              goto LABEL_299;
            case 'i':
LABEL_308:
              int v95 = 2;
              goto LABEL_335;
            case 'n':
LABEL_299:
              int v95 = 3;
              goto LABEL_335;
          }
        }

        goto LABEL_268;
      case 2:
        if (v152 > 6 || (_DWORD)v98 != aNfinity[v152] && (_DWORD)v98 != aNfinity_0[v152]) {
          goto LABEL_447;
        }
        if (v152 == 6 || v152 == 1) {
          unint64_t v159 = v164;
        }
        ++v152;
        goto LABEL_308;
      case 3:
        int v112 = v152;
        if (v152 == 2)
        {
          if ((_DWORD)v98 == 40)
          {
            int v95 = 3;
            goto LABEL_334;
          }

          if ((_DWORD)v98 == -1) {
            goto LABEL_448;
          }
        }

        else if (v152 == 1)
        {
          if (v155 == 78)
          {
            int v95 = 3;
            unint64_t v159 = v164;
            goto LABEL_333;
          }
        }

        else if (v152)
        {
          if ((_DWORD)v98 == 41)
          {
            int v95 = 4;
            unint64_t v159 = v164;
LABEL_334:
            int v152 = v112 + 1;
LABEL_335:
            unsigned int v161 = v101;
            goto LABEL_358;
          }

          if (v98 > 0x7F)
          {
            if (v98 < 0x100)
            {
              __uint32_t v117 = *(_DWORD *)(*(void *)(*((void *)v170 + 166) + 120LL) + 4 * v99 + 60);
            }

            else
            {
              int v121 = v101;
              LOWORD(v117) = ___runetype_l(v98, a2);
              LODWORD(v101) = v121;
            }
          }

          else
          {
            __uint32_t v117 = *v100;
          }

          int v95 = 3;
          if ((_DWORD)v98 == 95 || (v117 & 0x500) != 0)
          {
LABEL_333:
            int v112 = v152;
            goto LABEL_334;
          }
        }

        else if (v155 == 65)
        {
          int v95 = 3;
          goto LABEL_333;
        }

        goto LABEL_447;
      case 4:
        goto LABEL_447;
      case 5:
        uint64_t v101 = 1LL;
        int v95 = 6;
        if (v155 != 88) {
          goto LABEL_268;
        }
        char v162 = 1;
        goto LABEL_358;
      case 6:
        if ((v162 & 1) != 0)
        {
          if (v98 > 0x7F)
          {
            if (v98 < 0x100)
            {
              LODWORD(v102) = *(_DWORD *)(*(void *)(*((void *)v170 + 166) + 120LL) + 4 * v99 + 60);
            }

            else
            {
              uint64_t v103 = v101;
              uint64_t v104 = a1;
              unsigned int v105 = v100;
              uint64_t v106 = v99;
              unint64_t v102 = ___runetype_l(v98, a2);
              uint64_t v99 = v106;
              uint64_t v100 = v105;
              a1 = v104;
              uint64_t v101 = v103;
            }
          }

          else
          {
            LODWORD(v102) = *v100;
          }

          if ((v102 & 0x10000) != 0) {
            goto LABEL_300;
          }
        }

        if (v98 > 0x7F)
        {
          if (v98 < 0x100)
          {
            __uint32_t v107 = *(_DWORD *)(*(void *)(*((void *)v170 + 166) + 120LL) + 4 * v99 + 60);
          }

          else
          {
            uint64_t v108 = v101;
            uint64_t v109 = a1;
            uint64_t v110 = v100;
            uint64_t v111 = v99;
            LOWORD(v107) = ___runetype_l(v98, a2);
            uint64_t v99 = v111;
            uint64_t v100 = v110;
            a1 = v109;
            uint64_t v101 = v108;
          }
        }

        else
        {
          __uint32_t v107 = *v100;
        }

        if ((v107 & 0x400) != 0)
        {
LABEL_300:
          int v95 = 6;
          goto LABEL_322;
        }

        int v95 = 7;
        if ((_DWORD)v98 != v175) {
          goto LABEL_268;
        }
        int v95 = 7;
        if ((v101 & 1) != 0)
        {
LABEL_322:
          unsigned int v161 = 1;
          goto LABEL_357;
        }

        unsigned int v161 = 0;
        goto LABEL_358;
      case 7:
        if (!((v155 != 69) | v162 & 1) || ((v155 == 80) & v162) != 0)
        {
          if ((v101 & 1) != 0)
          {
            unsigned int v161 = 1;
            int v95 = 8;
            goto LABEL_358;
          }
        }

        else
        {
          if ((v162 & 1) != 0)
          {
            if (v98 > 0x7F)
            {
              if (v98 < 0x100)
              {
                LODWORD(v113) = *(_DWORD *)(*(void *)(*((void *)v170 + 166) + 120LL) + 4 * v99 + 60);
              }

              else
              {
                uint64_t v116 = v99;
                unint64_t v113 = ___runetype_l(v98, a2);
                uint64_t v99 = v116;
              }
            }

            else
            {
              LODWORD(v113) = *v100;
            }

            if ((v113 & 0x10000) != 0)
            {
              unsigned int v161 = 1;
              char v162 = 1;
LABEL_356:
              int v95 = 7;
              goto LABEL_357;
            }
          }

          if (v98 > 0x7F)
          {
            else {
              LOWORD(v118) = ___runetype_l(v98, a2);
            }
          }

          else
          {
            __uint32_t v118 = *v100;
          }

          if ((v118 & 0x400) != 0)
          {
            unsigned int v161 = 1;
            goto LABEL_356;
          }
        }

        if (v139 != 2) {
          goto LABEL_192;
        }
LABEL_187:
        *(_BYTE *)v17++ = 32;
        goto LABEL_192;
      }

      if ((v138 & 0xFD) == 1)
      {
        uint64_t v87 = *v137;
        if (*v137)
        {
          uint64_t v88 = v137 + 1;
          while (v17 < (unint64_t)v13)
          {
            *(_BYTE *)v17++ = v87;
            uint64_t v89 = *(unsigned __int8 *)v88++;
            uint64_t v87 = v89;
            if (!v89) {
              goto LABEL_162;
            }
          }

          goto LABEL_255;
        }

LABEL_447:
        __ungetwc(v98, a1, (uint64_t)a2);
        goto LABEL_448;
      case 8:
        int v95 = 9;
LABEL_279:
        if ((_DWORD)v98 == 43 || (_DWORD)v98 == 45) {
          goto LABEL_335;
        }
        goto LABEL_268;
      case 9:
        if (v98 > 0x7F)
        {
          if (v98 < 0x100)
          {
            __uint32_t v114 = *(_DWORD *)(*(void *)(*((void *)v170 + 166) + 120LL) + 4 * v99 + 60);
          }

          else
          {
            int v115 = v101;
            LOWORD(v114) = ___runetype_l(v98, a2);
            LODWORD(v101) = v115;
          }
        }

        else
        {
          __uint32_t v114 = *v100;
        }

        if ((v114 & 0x400) == 0) {
          goto LABEL_447;
        }
        int v95 = 9;
        goto LABEL_341;
      default:
        abort_report_np((uint64_t)"%s:%s:%u: unknown state %d");
    }
  }

int vfwscanf_l(FILE *a1, locale_t a2, const __int32 *a3, __darwin_va_list a4)
{
  extra = a1->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0) {
    *((_BYTE *)extra + 72) = *((_BYTE *)extra + 72) & 0xF8 | 1;
  }
  locale_t v9 = (locale_t)&__global_locale;
  if (a2 != (locale_t)-1LL) {
    locale_t v9 = a2;
  }
  if (a2) {
    locale_t v10 = v9;
  }
  else {
    locale_t v10 = (_xlocale *)&__c_locale;
  }
  int v11 = __vfwscanf((uint64_t)a1, v10, (unsigned int *)a3, (__int32 **)a4);
  funlockfile(a1);
  return v11;
}

int vprintf(const char *a1, va_list a2)
{
  unsigned int v4 = __stdoutp;
  uint64_t v5 = __locale_key;
  size_t v6 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = (_xlocale *)&__global_locale;
  }
  return vfprintf_l(v4, v7, a1, a2);
}

int vprintf_l(locale_t a1, const char *a2, va_list a3)
{
  return vfprintf_l(__stdoutp, a1, a2, a3);
}

int vscanf(const char *__format, va_list a2)
{
  unsigned int v4 = (uint64_t *)__stdinp;
  uint64_t v5 = __locale_key;
  size_t v6 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = (_xlocale *)&__global_locale;
  }
  int v8 = __svfscanf_l(v4, v7, (unsigned __int8 *)__format, (wint_t **)a2);
  funlockfile(__stdinp);
  return v8;
}

int vscanf_l(locale_t a1, const char *a2, va_list a3)
{
  locale_t v5 = (locale_t)&__global_locale;
  if (a1 != (locale_t)-1LL) {
    locale_t v5 = a1;
  }
  if (a1) {
    size_t v6 = v5;
  }
  else {
    size_t v6 = (_xlocale *)&__c_locale;
  }
  flockfile(__stdinp);
  int v7 = __svfscanf_l((uint64_t *)__stdinp, v6, (unsigned __int8 *)a2, (wint_t **)a3);
  funlockfile(__stdinp);
  return v7;
}

uint64_t _vsnprintf( pthread_mutex_t *a1, pthread_rwlock_t *a2, _BYTE *a3, uint64_t a4, unsigned int *a5, unsigned __int8 *a6, __int16 *a7)
{
  unsigned int v18 = v20;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  uint64_t v24 = 0LL;
  v20[0] = 0LL;
  v20[1] = 850045858LL;
  unint64_t v8 = a4 - 1;
  if (!a4) {
    unint64_t v8 = 0LL;
  }
  if (v8 >= 0x7FFFFFFF) {
    uint64_t v9 = 0x7FFFFFFFLL;
  }
  else {
    uint64_t v9 = v8;
  }
  if (v9) {
    int v10 = v9;
  }
  else {
    int v10 = 1;
  }
  int v11 = v19;
  if (v9) {
    int v11 = a3;
  }
  if (a4 && !v9)
  {
    *a3 = 0;
    int v11 = v19;
    int v10 = 1;
  }

  __uint32_t v13 = v11;
  uint64_t v16 = v11;
  int v14 = v10;
  int v15 = -65016;
  int v17 = v10;
  char v25 = 0;
  __int128 v26 = 0uLL;
  __int128 v27 = 0uLL;
  __int128 v28 = 0uLL;
  __int128 v29 = 0uLL;
  __int128 v30 = 0uLL;
  __int128 v31 = 0uLL;
  __int128 v32 = 0uLL;
  __int128 v33 = 0uLL;
  uint64_t result = __v2printf(a1, a2, (uint64_t)&v13, a5, a6, a7);
  if (a4) {
    _BYTE *v13 = 0;
  }
  return result;
}

int vsnprintf_l(char *a1, size_t a2, locale_t a3, const char *a4, va_list a5)
{
  return _vsnprintf( (pthread_mutex_t *)0xFFFFFFFFFFFFFFFFLL,  0LL,  a1,  a2,  (unsigned int *)a3,  (unsigned __int8 *)a4,  (__int16 *)a5);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  uint64_t v4 = __locale_key;
  locale_t v5 = *(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
  if (v5) {
    size_t v6 = v5;
  }
  else {
    size_t v6 = (unsigned int *)&__global_locale;
  }
  return _vsnprintf( (pthread_mutex_t *)0xFFFFFFFFFFFFFFFFLL,  0LL,  __str,  __size,  v6,  (unsigned __int8 *)__format,  (__int16 *)a4);
}

int vsprintf_l(char *a1, locale_t a2, const char *a3, va_list a4)
{
  int v7 = v8;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  uint64_t v12 = 0LL;
  v8[0] = 0LL;
  v8[1] = 850045858LL;
  v5[0] = a1;
  v5[3] = a1;
  *(void *)((char *)&v5[1] + 4) = 0xFFFF02087FFFFFFFLL;
  int v6 = 0x7FFFFFFF;
  char v13 = 0;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  int result = __v2printf((pthread_mutex_t *)0xFFFFFFFFFFFFFFFFLL, 0, (int)v5);
  *(_BYTE *)v5[0] = 0;
  return result;
}

int vsprintf(char *a1, const char *a2, va_list a3)
{
  uint64_t v5 = __locale_key;
  int v6 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (v6) {
    int v7 = v6;
  }
  else {
    int v7 = (_xlocale *)&__global_locale;
  }
  return vsprintf_l(a1, v7, a2, a3);
}

int vsscanf_l(const char *a1, locale_t a2, const char *a3, va_list a4)
{
  __int128 v17 = v19;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  uint64_t v23 = 0LL;
  v19[0] = 0LL;
  v19[1] = 850045858LL;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  char v24 = 0;
  if (off_18C52C3C8)
  {
    off_18C52C3C8(a1);
    char v8 = v24 & 0xF8;
  }

  else
  {
    char v8 = 0;
  }

  int v12 = -65532;
  __int128 v10 = a1;
  char v13 = a1;
  int v11 = _platform_strlen();
  int v14 = v11;
  __int128 v15 = eofread;
  uint64_t v16 = 0LL;
  uint64_t v18 = 0LL;
  char v24 = v8;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  return __svfscanf_l((uint64_t *)&v10, a2, (unsigned __int8 *)a3, (wint_t **)a4);
}

uint64_t eofread()
{
  return 0LL;
}

int vsscanf(const char *__str, const char *__format, va_list a3)
{
  uint64_t v5 = __locale_key;
  int v6 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (v6) {
    int v7 = v6;
  }
  else {
    int v7 = (_xlocale *)&__global_locale;
  }
  return vsscanf_l(__str, v7, __format, a3);
}

int vswprintf_l(__int32 *a1, size_t n, locale_t a3, const __int32 *a4, __darwin_va_list a5)
{
  __int128 v22 = v23;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  uint64_t v27 = 0LL;
  v23[0] = 0LL;
  v23[1] = 850045858LL;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  char v28 = 0;
  locale_t v5 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1LL) {
    locale_t v5 = a3;
  }
  if (a3) {
    int v6 = v5;
  }
  else {
    int v6 = (_xlocale *)&__c_locale;
  }
  if (!n)
  {
    int v14 = 22;
    goto LABEL_16;
  }

  int v19 = -48632;
  __int128 v17 = malloc(0x80uLL);
  __int128 v20 = v17;
  if (!v17)
  {
    int v14 = 12;
    goto LABEL_16;
  }

  int v18 = 127;
  int v21 = 127;
  char v28 = 0;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  int v11 = __vfwprintf((uint64_t)&v17, v6, (unsigned int *)a4, a5);
  if (v11 < 0)
  {
    int v14 = *__error();
    free(v20);
    goto LABEL_16;
  }

  int v12 = v11;
  *__int128 v17 = 0;
  uint64_t v16 = (const char *)v20;
  memset(&v37, 0, sizeof(v37));
  size_t v13 = mbsrtowcs_l(a1, &v16, n, &v37, v6);
  free(v20);
  if (v13 == -1LL)
  {
    int v14 = 92;
    goto LABEL_16;
  }

  if (v13 == n)
  {
    a1[n - 1] = 0;
    int v14 = 84;
LABEL_16:
    *__error() = v14;
    return -1;
  }

  return v12;
}

int vswprintf(__int32 *a1, size_t a2, const __int32 *a3, __darwin_va_list a4)
{
  uint64_t v6 = __locale_key;
  int v7 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v6);
  if (v7) {
    char v8 = v7;
  }
  else {
    char v8 = (_xlocale *)&__global_locale;
  }
  return vswprintf_l(a1, a2, v8, a3, a4);
}

int vswscanf_l(const __int32 *a1, locale_t a2, const __int32 *a3, __darwin_va_list a4)
{
  uint64_t v23 = v25;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  uint64_t v29 = 0LL;
  v25[0] = 0LL;
  v25[1] = 850045858LL;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  char v30 = 0;
  locale_t v7 = (locale_t)&__global_locale;
  if (a2 != (locale_t)-1LL) {
    locale_t v7 = a2;
  }
  if (a2) {
    char v8 = v7;
  }
  else {
    char v8 = (_xlocale *)&__c_locale;
  }
  size_t v9 = wcslen(a1);
  __int128 v10 = (char *)malloc(v9 * *(int *)(*((void *)v8 + 166) + 64LL) + 1);
  if (!v10) {
    return -1;
  }
  int v11 = v10;
  memset(&v39, 0, sizeof(v39));
  __int128 v15 = a1;
  size_t v12 = wcsrtombs_l(v10, &v15, 0xFFFFFFFFFFFFFFFFLL, &v39, v8);
  if (v12 == -1LL)
  {
    int v13 = -1;
  }

  else
  {
    uint64_t v16 = v11;
    int v19 = v11;
    int v18 = -65532;
    int v17 = v12;
    int v20 = v12;
    int v21 = eofread_0;
    uint64_t v22 = 0LL;
    uint64_t v24 = 0LL;
    v30 &= 0xF8u;
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    int v13 = __vfwscanf((uint64_t)&v16, v8, (unsigned int *)a3, (__int32 **)a4);
  }

  free(v11);
  return v13;
}

uint64_t eofread_0()
{
  return 0LL;
}

int vswscanf(const __int32 *a1, const __int32 *a2, __darwin_va_list a3)
{
  uint64_t v5 = __locale_key;
  uint64_t v6 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (v6) {
    locale_t v7 = v6;
  }
  else {
    locale_t v7 = (_xlocale *)&__global_locale;
  }
  return vswscanf_l(a1, v7, a2, a3);
}

int vwprintf(const __int32 *a1, __darwin_va_list a2)
{
  uint64_t v4 = __stdoutp;
  uint64_t v5 = __locale_key;
  uint64_t v6 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (v6) {
    locale_t v7 = v6;
  }
  else {
    locale_t v7 = (_xlocale *)&__global_locale;
  }
  return vfwprintf_l(v4, v7, a1, a2);
}

int vwprintf_l(locale_t a1, const __int32 *a2, __darwin_va_list a3)
{
  return vfwprintf_l(__stdoutp, a1, a2, a3);
}

int vwscanf(const __int32 *a1, __darwin_va_list a2)
{
  uint64_t v4 = __stdinp;
  uint64_t v5 = __locale_key;
  uint64_t v6 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v5);
  if (v6) {
    locale_t v7 = v6;
  }
  else {
    locale_t v7 = (_xlocale *)&__global_locale;
  }
  return vfwscanf_l(v4, v7, a1, a2);
}

int vwscanf_l(locale_t a1, const __int32 *a2, __darwin_va_list a3)
{
  return vfwscanf_l(__stdinp, a1, a2, a3);
}

int __swbuf(int a1, FILE *a2)
{
  unsigned __int8 v3 = a1;
  a2->_int w = a2->_lbfsize;
  if (((a2->_flags & 8) == 0 || (a2->_flags & 0x200) == 0 && !a2->_bf._base) && __swsetup((uint64_t)a2))
  {
    *__error() = 9;
    return -1;
  }

  extra = a2->_extra;
  if ((*((_BYTE *)extra + 72) & 7) == 0) {
    *((_BYTE *)extra + 72) |= 7u;
  }
  p = a2->_p;
  int v6 = (int)&a2->_p[-LODWORD(a2->_bf._base)];
  if (a2->_bf._size <= v6)
  {
    int v6 = 0;
    p = a2->_p;
  }

  int v7 = v3;
  --a2->_w;
  a2->_p = p + 1;
  unsigned __int8 *p = v3;
  return v7;
}

int wprintf(const __int32 *a1, ...)
{
  pthread_key_t v2 = __stdoutp;
  uint64_t v3 = __locale_key;
  uint64_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = (_xlocale *)&__global_locale;
  }
  return vfwprintf_l(v2, v5, a1, va);
}

int wprintf_l(locale_t a1, const __int32 *a2, ...)
{
  return vfwprintf_l(__stdoutp, a1, a2, va);
}

int wscanf(const __int32 *a1, ...)
{
  pthread_key_t v2 = __stdinp;
  uint64_t v3 = __locale_key;
  uint64_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = (_xlocale *)&__global_locale;
  }
  return vfwscanf_l(v2, v5, a1, va);
}

int wscanf_l(locale_t a1, const __int32 *a2, ...)
{
  return vfwscanf_l(__stdinp, a1, a2, va);
}

uint64_t __swsetup(uint64_t a1)
{
  __int16 v2 = *(_WORD *)(a1 + 16);
  if ((v2 & 8) == 0)
  {
    if ((v2 & 0x10) == 0)
    {
      *__error() = 9;
      *(_WORD *)(a1 + 16) |= 0x40u;
      return 0xFFFFFFFFLL;
    }

    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(void **)(a1 + 88);
      if (v4)
      {
        if (v4 != (void *)(a1 + 116))
        {
          free(v4);
          __int16 v2 = *(_WORD *)(a1 + 16);
        }

        *(void *)(a1 + 88) = 0LL;
      }

      v2 &= 0xFFDBu;
      *(_DWORD *)(a1 + 8) = 0;
      *(void *)a1 = *(void *)(a1 + 24);
    }

    v2 |= 8u;
    *(_WORD *)(a1 + 16) = v2;
  }

  if (!*(void *)(a1 + 24))
  {
    __smakebuf(a1);
    __int16 v2 = *(_WORD *)(a1 + 16);
    if ((v2 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_16:
    uint64_t result = 0LL;
    *(_DWORD *)(a1 + 12) = 0;
    *(_DWORD *)(a1 + 40) = -*(_DWORD *)(a1 + 32);
    return result;
  }

  if ((v2 & 1) != 0) {
    goto LABEL_16;
  }
LABEL_13:
  if ((v2 & 2) != 0) {
    int v5 = 0;
  }
  else {
    int v5 = *(_DWORD *)(a1 + 32);
  }
  uint64_t result = 0LL;
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

FILE *__cdecl open_wmemstream(__int32 **__bufp, size_t *__sizep)
{
  if (__bufp && __sizep)
  {
    uint64_t v4 = (__int32 *)calloc(1uLL, 4uLL);
    *__bufp = v4;
    if (v4)
    {
      int v5 = malloc(0xA0uLL);
      if (v5)
      {
        int v6 = v5;
        void *v5 = __bufp;
        v5[1] = __sizep;
        *((_OWORD *)v5 + 1) = 0u;
        *((_OWORD *)v5 + 2) = 0u;
        *((_OWORD *)v5 + 3) = 0u;
        *((_OWORD *)v5 + 4) = 0u;
        *((_OWORD *)v5 + 5) = 0u;
        *((_OWORD *)v5 + 6) = 0u;
        *((_OWORD *)v5 + 7) = 0u;
        *((_OWORD *)v5 + 8) = 0u;
        *((_OWORD *)v5 + 9) = 0u;
        wmemstream_update((uint64_t)v5);
        int v7 = funopen( v6,  0LL,  (int (__cdecl *)(void *, const char *, int))wmemstream_write,  (fpos_t (__cdecl *)(void *, fpos_t, int))wmemstream_seek,  (int (__cdecl *)(void *))wmemstream_close);
        char v8 = v7;
        if (v7)
        {
          fwide(v7, 1);
        }

        else
        {
          int v10 = *__error();
          free(v6);
          free(*__bufp);
          *__bufp = 0LL;
          *__error() = v10;
        }
      }

      else
      {
        int v9 = *__error();
        free(*__bufp);
        *__bufp = 0LL;
        char v8 = 0LL;
        *__error() = v9;
      }
    }

    else
    {
      return 0LL;
    }
  }

  else
  {
    char v8 = 0LL;
    *__error() = 22;
  }

  return v8;
}

uint64_t wmemstream_update(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 16);
  if ((v1 & 0x8000000000000000LL) != 0 || (unint64_t v2 = *(void *)(result + 24), (v2 & 0x8000000000000000LL) != 0)) {
    wmemstream_update_cold_1();
  }
  if (v1 >= v2) {
    unint64_t v1 = *(void *)(result + 24);
  }
  **(void **)(result + 8) = v1;
  return result;
}

uint64_t wmemstream_write(uint64_t a1, char *a2, int a3)
{
  int v3 = a3;
  uint64_t v4 = a2;
  __int128 v6 = *(_OWORD *)(a1 + 112);
  *((_OWORD *)&v23._mbstateL + 4) = *(_OWORD *)(a1 + 96);
  *((_OWORD *)&v23._mbstateL + 5) = v6;
  __int128 v7 = *(_OWORD *)(a1 + 144);
  *((_OWORD *)&v23._mbstateL + 6) = *(_OWORD *)(a1 + 128);
  *((_OWORD *)&v23._mbstateL + 7) = v7;
  __int128 v8 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)v23.__mbstate8 = *(_OWORD *)(a1 + 32);
  *((_OWORD *)&v23._mbstateL + 1) = v8;
  __int128 v9 = *(_OWORD *)(a1 + 80);
  *((_OWORD *)&v23._mbstateL + 2) = *(_OWORD *)(a1 + 64);
  *((_OWORD *)&v23._mbstateL + 3) = v9;
  if (a3 >= 1)
  {
    uint64_t v10 = 0LL;
    int v11 = a3;
    size_t v12 = a2;
    do
    {
      size_t v13 = mbrlen(v12, v11, &v23);
      if (v13 == -2LL) {
        break;
      }
      if (v13 == -1LL) {
        goto LABEL_10;
      }
      uint64_t v14 = v13 <= 1 ? 1LL : v13;
      v11 -= v14;
      v12 += v14;
      ++v10;
    }

    while (v11 > 0);
    if ((v10 & 0x8000000000000000LL) == 0) {
      goto LABEL_12;
    }
LABEL_10:
    *__error() = 92;
    return 0xFFFFFFFFLL;
  }

  uint64_t v10 = 0LL;
LABEL_12:
  else {
    uint64_t v15 = *(void *)(a1 + 24) + v10;
  }
  if (v15 > *(void *)(a1 + 16))
  {
    uint64_t v16 = reallocarray_DARWIN_EXTSN();
    if (!v16) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v17 = v16;
    wmemset((__int32 *)(v16 + 4LL * *(void *)(a1 + 16) + 4), 0, v15 - *(void *)(a1 + 16));
    **(void **)a1 = v17;
    *(void *)(a1 + 16) = v15;
  }

  if (v3 < 1)
  {
    uint64_t v18 = 0LL;
  }

  else
  {
    uint64_t v18 = 0LL;
    do
    {
      uint64_t v19 = *(void *)(a1 + 24);
      if (v19 >= *(void *)(a1 + 16)) {
        break;
      }
      size_t v20 = mbrtowc((__int32 *)(**(void **)a1 + 4 * v19), v4, v3, (mbstate_t *)(a1 + 32));
      if (v20 == -1LL)
      {
        if (v18) {
          break;
        }
        goto LABEL_10;
      }

      if (v20 <= 1) {
        uint64_t v21 = 1LL;
      }
      else {
        uint64_t v21 = v20;
      }
      if (v21 == -2)
      {
        v18 += v3;
        break;
      }

      v4 += v21;
      v3 -= v21;
      ++*(void *)(a1 + 24);
      v18 += v21;
    }

    while (v3 > 0);
  }

  wmemstream_update(a1);
  return v18;
}

uint64_t wmemstream_seek(uint64_t a1, int64_t a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 24);
  switch(a3)
  {
    case 2:
      uint64_t v5 = *(void *)(a1 + 16);
      if (a2 < 0)
      {
        a2 += v5;
        if (a2 < 0)
        {
          __int128 v6 = __error();
          int v7 = 22;
          goto LABEL_13;
        }
      }

      else
      {
        if ((v5 ^ 0x7FFFFFFFFFFFFFFFuLL) < a2)
        {
          __int128 v6 = __error();
          int v7 = 84;
LABEL_13:
          *__int128 v6 = v7;
          return -1LL;
        }

        a2 += v5;
      }

uint64_t wmemstream_close(void *a1)
{
  return 0LL;
}

char *__cdecl asctime_r(const tm *a1, char *a2)
{
  uint64_t tm_wday = a1->tm_wday;
  else {
    uint64_t v4 = "???";
  }
  strftime_l(v8, 0xDuLL, "%Y", a1, 0LL);
  else {
    sprintf(v7, "%.3s %.3s%3d %2.2d:%2.2d:%2.2d %-4s\n", v4);
  }
  unint64_t v5 = _platform_strlen();
  if (a2 == (char *)&buf_asctime || v5 <= 0x19)
  {
    _platform_strcpy();
  }

  else
  {
    a2 = 0LL;
    *__error() = 84;
  }

  return a2;
}

char *__cdecl asctime(const tm *a1)
{
  return asctime_r(a1, buf_asctime);
}

double difftime(time_t a1, time_t a2)
{
  double result = -(double)(unint64_t)(a2 - a1);
  if (a1 >= 0) {
    double result = (double)(unint64_t)(a1 - a2);
  }
  return result;
}

int ftime(timeb *a1)
{
  if (gettimeofday(&v4, &v5) < 0) {
    return -1;
  }
  int result = 0;
  a1->mach_error_t time = v4.tv_sec;
  __int16 v3 = v6;
  a1->timezone = v5;
  a1->dstflag = v3;
  return result;
}

void tzsetwall(void)
{
}

uint64_t tzsetwall_basic(int a1)
{
  if (*MEMORY[0x1895FF920])
  {
    uint64_t result = notify_check_tz((unsigned int *)&lcl_notify);
    if (!a1) {
      goto LABEL_13;
    }
LABEL_6:
    if (dword_18C43A4BC < 0) {
      return result;
    }
    goto LABEL_14;
  }

  uint64_t result = lstat("/var/db/timezone/localtime", v5);
  if ((_DWORD)result)
  {
    if (!a1) {
      goto LABEL_13;
    }
    goto LABEL_6;
  }

  if (v5[0].st_mtimespec.tv_sec > (uint64_t)last_default_tzload_mtimespec
    || v5[0].st_mtimespec.tv_sec == (void)last_default_tzload_mtimespec
    && v5[0].st_mtimespec.tv_nsec > *((uint64_t *)&last_default_tzload_mtimespec + 1))
  {
    dword_18C43A4BC = 0;
  }

  last_default_tzload_mtimespec = (__int128)v5[0].st_mtimespec;
  if (a1) {
    goto LABEL_6;
  }
LABEL_13:
  pthread_rwlock_rdlock(&lcl_rwlock);
  if (dword_18C43A4BC < 0) {
    return pthread_rwlock_unlock(&lcl_rwlock);
  }
LABEL_14:
  pthread_rwlock_unlock(&lcl_rwlock);
  pthread_rwlock_wrlock(&lcl_rwlock);
  dword_18C43A4BC = -1;
  __int16 v3 = (void *)lclptr;
  if (lclptr || (__int16 v3 = calloc(1uLL, 0x4768uLL), (lclptr = (uint64_t)v3) != 0))
  {
    if (tzload(0LL, (uint64_t)v3, v5, 1))
    {
      last_default_tzload_mtimespec = 0uLL;
      if (LOBYTE(v5[0].st_dev)) {
        timeval v4 = 0LL;
      }
      else {
        timeval v4 = v5;
      }
      gmtload(lclptr, v4);
    }

    notify_register_tz((unint64_t)v5, &lcl_notify);
  }

  settzname();
  uint64_t result = pthread_rwlock_unlock(&lcl_rwlock);
  if (a1) {
    return pthread_rwlock_rdlock(&lcl_rwlock);
  }
  return result;
}

uint64_t _st_tzset_basic(int a1)
{
  unint64_t v2 = getenv("TZ");
  if (!v2) {
    return tzsetwall_basic(a1);
  }
  __int16 v3 = v2;
  notify_check_tz((unsigned int *)&lcl_notify);
  if (!a1) {
    pthread_rwlock_rdlock(&lcl_rwlock);
  }
  if (dword_18C43A4BC < 1 || (uint64_t result = _platform_strcmp(), (_DWORD)result))
  {
    pthread_rwlock_unlock(&lcl_rwlock);
    pthread_rwlock_wrlock(&lcl_rwlock);
    unint64_t v5 = _platform_strlen();
    dword_18C43A4BC = v5 < 0x100;
    if (v5 <= 0xFF) {
      _platform_strcpy();
    }
    int v6 = (char *)lclptr;
    if (lclptr || (int v6 = (char *)calloc(1uLL, 0x4768uLL), (lclptr = (uint64_t)v6) != 0))
    {
      if (*v3)
      {
        int v7 = v9;
        if (tzload(v3, (uint64_t)v6, v9, 1))
        {
          if (*v3 == 58 || tzparse((unint64_t)v3, lclptr, 0))
          {
            int v7 = v9;
            if (v9[0]) {
              __int128 v8 = 0LL;
            }
            else {
              __int128 v8 = v9;
            }
            gmtload(lclptr, v8);
          }

          else
          {
            int v7 = 0LL;
          }
        }

        notify_register_tz((unint64_t)v7, &lcl_notify);
      }

      else
      {
        *(void *)int v6 = 0LL;
        *((_DWORD *)v6 + 2) = 0;
        *(_OWORD *)(v6 + 10824) = 0u;
        *((_DWORD *)v6 + 4242) = 4412501;
        if (*MEMORY[0x1895FF920])
        {
          if ((lcl_notify & 0x80000000) == 0) {
            notify_cancel(lcl_notify);
          }
          lcl_notify = -1;
        }
      }

      settzname();
      uint64_t result = pthread_rwlock_unlock(&lcl_rwlock);
      if (a1) {
        return pthread_rwlock_rdlock(&lcl_rwlock);
      }
    }

    else
    {
      settzname();
      uint64_t result = pthread_rwlock_unlock(&lcl_rwlock);
      if (a1) {
        return pthread_rwlock_rdlock(&lcl_rwlock);
      }
    }
  }

  else if (!a1)
  {
    return pthread_rwlock_unlock(&lcl_rwlock);
  }

  return result;
}

uint64_t notify_check_tz(unsigned int *a1)
{
  uint64_t result = *a1;
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = notify_check(result, &check);
  }

  return result;
}

unint64_t settzname()
{
  uint64_t v0 = (_DWORD *)lclptr;
  tzname[0] = (char *)&wildabbr;
  off_18C43A4B0 = &wildabbr;
  daylight = 0;
  unint64_t result = _st_set_timezone(0LL);
  __darwin_altzone = 0LL;
  if (!v0)
  {
    tzname[0] = (char *)&gmt;
    off_18C43A4B0 = &gmt;
    return result;
  }

  int v2 = v0[1];
  if (v2)
  {
    BOOL v3 = __OFSUB__(v2, 1);
    int v4 = v2 - 1;
    if (v4 < 0 == v3)
    {
      unint64_t v5 = (const char *)(v0 + 2406);
      goto LABEL_8;
    }
  }

  else if (v0[2] == 1)
  {
    int v4 = 0;
    unint64_t v5 = "";
LABEL_8:
    int v6 = 7;
    uint64_t v7 = v4;
    while (1)
    {
      int v8 = v5[v7];
      if ((v6 & 4) != 0 && v0[6 * v5[v7] + 2708])
      {
        v6 &= ~4u;
        daylight = 1;
      }

      __int128 v9 = &v0[6 * v8 + 2706];
      if (v0[6 * v8 + 2708])
      {
        if ((v6 & 2) != 0)
        {
          v6 &= ~2u;
          off_18C43A4B0 = (_UNKNOWN *)((char *)v0 + v0[6 * v8 + 2709] + 16968);
          __darwin_altzone = -*v9;
        }
      }

      else if ((v6 & 1) != 0)
      {
        v6 &= ~1u;
        tzname[0] = (char *)v0 + v0[6 * v8 + 2709] + 16968;
        unint64_t result = _st_set_timezone(-*v9);
      }

      if (!v7) {
        break;
      }
      BOOL v10 = v7-- < 1;
      if (v10 || !v6) {
        goto LABEL_25;
      }
    }

    if ((v6 & 2) != 0) {
      __darwin_altzone = -*v9;
    }
    if ((v6 & 1) != 0) {
      unint64_t result = _st_set_timezone(-*v9);
    }
  }

unint64_t notify_register_tz(unint64_t result, int *a2)
{
  if (*MEMORY[0x1895FF920])
  {
    BOOL v3 = (const char *)result;
    unint64_t result = *a2;
    if ((result & 0x80000000) == 0) {
      unint64_t result = notify_cancel(result);
    }
    if (!v3 || !*v3)
    {
      *a2 = -1;
      return result;
    }

    if (_platform_strcmp())
    {
      _platform_strlen();
      int v4 = (char *)&v6 - ((MEMORY[0x1895FE128]() + 42) & 0xFFFFFFFFFFFFFFF0LL);
      strcpy(v4, "com.apple.system.timezone");
      *(_WORD *)&v4[_platform_strlen()] = 46;
      unint64_t v5 = strcat(v4, v3);
      unint64_t result = notify_register_check(v5, a2);
      if ((_DWORD)result)
      {
LABEL_13:
        *(void *)a2 = 0xFFFFFFFFLL;
        return result;
      }

      if (v4 != "com.apple.system.timezone" && notify_monitor_file())
      {
        unint64_t result = notify_cancel(*a2);
        goto LABEL_13;
      }
    }

    else
    {
      unint64_t result = notify_register_check("com.apple.system.timezone", a2);
      if ((_DWORD)result) {
        goto LABEL_13;
      }
    }

    return notify_check(*a2, (int *)&v6 + 1);
  }

  return result;
}

uint64_t tzload(const char *a1, uint64_t a2, _BYTE *a3, int a4)
{
  uint64_t v7 = a1;
  *(void *)(a2 + 16) = 0LL;
  if (a1 && issetugid())
  {
  }

  if (a3) {
    *a3 = 0;
  }
  __int128 v9 = (char *)malloc(0x401uLL);
  if (!v9)
  {
    uint64_t v14 = 0LL;
    goto LABEL_21;
  }

  BOOL v10 = v9;
  uint64_t v11 = "/var/db/timezone/localtime";
  if (v7) {
    uint64_t v11 = v7;
  }
  if (*v11 == 58) {
    size_t v12 = v11 + 1;
  }
  else {
    size_t v12 = v11;
  }
  if (*v12 == 47)
  {
    BOOL v13 = 1;
    if (!a3)
    {
LABEL_18:
      if (!v13) {
        goto LABEL_28;
      }
      goto LABEL_27;
    }
  }

  else
  {
    strcpy(v10, "/var/db/timezone/zoneinfo");
    *(_WORD *)&v10[_platform_strlen()] = 47;
    strcat(v10, v12);
    BOOL v13 = _platform_strchr() != 0;
    size_t v12 = v10;
    if (!a3) {
      goto LABEL_18;
    }
  }

  _platform_strcpy();
  if (v13)
  {
LABEL_27:
    if (!access(v12, 4)) {
      goto LABEL_28;
    }
LABEL_121:
    free(v10);
    return 0xFFFFFFFFLL;
  }

uint64_t tzparse(unint64_t a1, uint64_t a2, int a3)
{
  uint64_t v57 = 0LL;
  if (a3)
  {
    unint64_t v58 = a1;
    unint64_t v5 = _platform_strlen();
    uint64_t v6 = (char *)(a1 + v5);
    uint64_t v7 = 511LL;
    if (v5 < 0x1FF) {
      uint64_t v7 = v5;
    }
    uint64_t v56 = v7;
    uint64_t v54 = 0LL;
  }

  else
  {
    BOOL v10 = (unsigned __int8 *)getzname(a1, &v58, &v56);
    if (!*v10) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v6 = getoffset(v10, &v54);
    if (!v6) {
      return 0xFFFFFFFFLL;
    }
  }

  int v8 = tzload("posixrules", a2, 0LL, 0LL);
  if (v8) {
    *(_DWORD *)a2 = 0;
  }
  if (!*v6)
  {
    uint64_t v55 = 0LL;
    *(void *)(a2 + 4) = 0x100000000LL;
    *(void *)(a2 + 10824) = -v54;
    *(void *)(a2 + 10832) = 0LL;
    uint64_t v11 = v56;
    unsigned int v12 = v56 + 1;
    goto LABEL_67;
  }

  if (*v6 == 60)
  {
    uint64_t v9 = 0LL;
    uint64_t v57 = v6 + 1;
    while (v6[v9 + 1])
    {
      if (v6[v9 + 1] == 62)
      {
        uint64_t v55 = v9;
        BOOL v13 = (unsigned __int8 *)&v6[v9 + 2];
        goto LABEL_19;
      }

      ++v9;
    }

    return 0xFFFFFFFFLL;
  }

  uint64_t v57 = v6;
  BOOL v13 = (unsigned __int8 *)getzname((unint64_t)v6, (unint64_t *)&v57, &v55);
LABEL_19:
  unsigned int v14 = *v13;
  BOOL v15 = v14 > 0x3B;
  uint64_t v16 = (1LL << v14) & 0x800100000000001LL;
  if (v15 || v16 == 0)
  {
    BOOL v13 = (unsigned __int8 *)getoffset(v13, &v53);
    if (!v13) {
      return 0xFFFFFFFFLL;
    }
  }

  else
  {
    uint64_t v53 = v54 - 3600;
  }

  if (*v13) {
    BOOL v18 = 1;
  }
  else {
    BOOL v18 = v8 == 0;
  }
  if (v18) {
    int v19 = (const char *)v13;
  }
  else {
    int v19 = ",M4.1.0,M10.5.0";
  }
  int v20 = *(unsigned __int8 *)v19;
  if (v20 == 59 || v20 == 44)
  {
    __int128 v27 = getrule((char *)v19 + 1, (uint64_t)v52);
    if (v27)
    {
      if (*v27 == 44)
      {
        uint64_t v28 = getrule(v27 + 1, (uint64_t)v51);
        if (v28)
        {
          if (!*v28)
          {
            int v29 = 0;
            uint64_t v30 = 0LL;
            uint64_t v50 = v53;
            *(void *)(a2 + 10824) = -v53;
            *(_DWORD *)(a2 + 10832) = 1;
            uint64_t v48 = v56;
            unsigned int v12 = v56 + 1;
            *(_DWORD *)(a2 + 10836) = v56 + 1;
            uint64_t v49 = v54;
            *(void *)(a2 + 10848) = -v54;
            *(void *)(a2 + 10856) = 0LL;
            __int128 v31 = (uint64_t *)(a2 + 24);
            __int128 v32 = (BOOL *)(a2 + 9624);
            *(void *)(a2 + 4) = 0x200000000LL;
            unsigned int v33 = 1970;
            do
            {
              uint64_t v34 = transtime(v30, v29 + 1970, v52, v49);
              uint64_t v35 = transtime(v30, v29 + 1970, v51, v50);
              if (v34 <= v35) {
                uint64_t v36 = v34;
              }
              else {
                uint64_t v36 = v35;
              }
              if (v34 <= v35) {
                uint64_t v37 = v35;
              }
              else {
                uint64_t v37 = v34;
              }
              *__int128 v31 = v36;
              *__int128 v32 = v34 > v35;
              v31[1] = v37;
              v32[1] = v34 <= v35;
              int v38 = *(_DWORD *)(a2 + 4);
              *(_DWORD *)(a2 + 4) = v38 + 2;
              if ((((_BYTE)v29 - 78) & 3) != 0) {
                BOOL v39 = 0;
              }
              else {
                BOOL v39 = 100 * (v33 / 0x64) - 1970 != v29 || 400 * (v33 / 0x190) - 1970 == v29;
              }
              v30 += 86400LL * *((int *)&year_lengths + v39);
              ++v33;
              ++v29;
              v31 += 2;
              v32 += 2;
            }

            while (v38 < 1197);
            uint64_t v11 = v48;
            goto LABEL_67;
          }
        }
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (*v19) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v21 = *(unsigned int *)(a2 + 4);
  if ((int)v21 <= 0)
  {
    uint64_t v40 = v54;
  }

  else
  {
    int v22 = (unsigned __int8 *)(a2 + 9624);
    uint64_t v23 = *(unsigned int *)(a2 + 4);
    while (1)
    {
      unsigned int v25 = *v22++;
      unsigned int v24 = v25;
      if (!*(_DWORD *)(a2 + 24LL * v25 + 10832)) {
        break;
      }
      if (!--v23)
      {
        uint64_t v26 = 0LL;
        goto LABEL_60;
      }
    }

    uint64_t v26 = -*(void *)(a2 + 24LL * v24 + 10824);
LABEL_60:
    uint64_t v41 = (unsigned __int8 *)(a2 + 9624);
    uint64_t v40 = v54;
    uint64_t v42 = (void *)(a2 + 24);
    do
    {
      uint64_t v43 = a2 + 24LL * *v41;
      *v41++ = *(_DWORD *)(v43 + 10832);
      if (!*(_DWORD *)(v43 + 10844)) {
        *v42 += v40 - v26;
      }
      if (!*(_DWORD *)(v43 + 10832)) {
        uint64_t v26 = -*(void *)(v43 + 10824);
      }
      ++v42;
      --v21;
    }

    while (v21);
  }

  *(void *)(a2 + 10824) = -v40;
  *(void *)(a2 + 10832) = 0LL;
  *(void *)(a2 + 10848) = -v53;
  *(_DWORD *)(a2 + 10856) = 1;
  uint64_t v11 = v56;
  unsigned int v12 = v56 + 1;
  *(_DWORD *)(a2 + 10860) = v56 + 1;
  *(_DWORD *)(a2 + 8) = 2;
LABEL_67:
  *(_DWORD *)(a2 + 12) = v12;
  uint64_t v44 = v55;
  if (v55)
  {
    unsigned int v12 = v11 + v55 + 2;
    *(_DWORD *)(a2 + 12) = v12;
  }

  if (v12 > 0x200) {
    return 0xFFFFFFFFLL;
  }
  int v46 = (_BYTE *)(_platform_strncpy() + v11);
  *int v46 = 0;
  if (!v44) {
    return 0LL;
  }
  uint64_t v47 = v46 + 1;
  _platform_strncpy();
  uint64_t result = 0LL;
  v47[v44] = 0;
  return result;
}

uint64_t gmtload(uint64_t a1, _BYTE *a2)
{
  uint64_t result = tzload("UTC", a1, a2, 1);
  if ((_DWORD)result) {
    return tzparse((unint64_t)"UTC", a1, 1);
  }
  return result;
}

void tzset(void)
{
}

uint64_t _st_localsub(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v25 = *a1;
  uint64_t v5 = lclptr;
  if (!lclptr) {
    return gmtsub(a1, a2, a3);
  }
  if (*(_DWORD *)(lclptr + 16))
  {
    uint64_t v6 = *(void *)(lclptr + 24);
    if (v4 < v6) {
      goto LABEL_7;
    }
  }

  int v7 = *(_DWORD *)(lclptr + 4);
  if (*(_DWORD *)(lclptr + 20) && v4 > *(void *)(lclptr + 8LL * (v7 - 1) + 24))
  {
    uint64_t v6 = *(void *)(lclptr + 24);
LABEL_7:
    LODWORD(v8) = v6 - v4;
    if (v6 <= v4) {
      uint64_t v8 = v4 - *(void *)(lclptr + 8LL * *(int *)(lclptr + 4) + 16);
    }
    uint64_t v9 = 400LL * (((int)v8 - 1) / -262121088);
    uint64_t v10 = 31556952 * (v9 + 400);
    if (v6 <= v4) {
      uint64_t v10 = -31556952 * (v9 + 400);
    }
    uint64_t v11 = v10 + v4;
    uint64_t v24 = v11;
    uint64_t result = _st_localsub(&v24, a2, a3);
    if (result == a3)
    {
      uint64_t v18 = v4 >= *(void *)(v5 + 24) ? v9 + 400 : -400 - v9;
      uint64_t v19 = v18 + *(int *)(a3 + 20);
      *(_DWORD *)(a3 + 20) = v19;
    }

    return result;
  }

  if (v7 && v4 >= *(void *)(lclptr + 24))
  {
    if (v7 < 2)
    {
      uint64_t v13 = 0LL;
    }

    else
    {
      int v16 = 1;
      do
      {
        int v17 = (v7 + v16) >> 1;
        if (v4 < *(void *)(lclptr + 8LL * v17 + 24)) {
          int v7 = (v7 + v16) >> 1;
        }
        else {
          int v16 = v17 + 1;
        }
      }

      while (v16 < v7);
      uint64_t v13 = v16 - 1;
    }

    LODWORD(v13) = *(unsigned __int8 *)(lclptr + v13 + 9624);
  }

  else
  {
    uint64_t v13 = 0LL;
    unsigned int v14 = (int *)(lclptr + 10832);
    while (1)
    {
      int v15 = *v14;
      v14 += 6;
      if (!v15) {
        break;
      }
      if (++v13 >= *(int *)(lclptr + 8))
      {
        LODWORD(v13) = 0;
        break;
      }
    }
  }

  unsigned int v20 = v13;
  uint64_t result = timesub(&v25, *(void *)(lclptr + 24LL * v13 + 10824), (unsigned int *)lclptr, a3);
  if (result)
  {
    uint64_t v21 = v5 + 24LL * v20;
    uint64_t v22 = *(int *)(v21 + 10832);
    *(_DWORD *)(a3 + 32) = v22;
    uint64_t v23 = (char *)(v5 + 16968 + *(int *)(v21 + 10836));
    tzname[v22] = v23;
    *(void *)(a3 + 48) = v23;
  }

  return result;
}

uint64_t gmtsub(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = timesub(a1, a2, (unsigned int *)gmtptr, a3);
  if (result)
  {
    if (gmtptr) {
      int v7 = (const char *)(gmtptr + 16968);
    }
    else {
      int v7 = "UTC";
    }
    if (a2) {
      int v7 = (const char *)&wildabbr;
    }
    *(void *)(a3 + 48) = v7;
  }

  return result;
}

uint64_t timesub(uint64_t *a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  if (a3) {
    uint64_t v4 = *a3;
  }
  else {
    uint64_t v4 = 0LL;
  }
  uint64_t v5 = (v4 << 32) - 0x100000000LL;
  uint64_t v6 = (uint64_t *)&a3[4 * v4 + 4372];
  do
  {
    if ((int)v4 < 1)
    {
      uint64_t v10 = 0LL;
      int v9 = 0;
      uint64_t v7 = *a1;
      goto LABEL_13;
    }

    LODWORD(v4) = v4 - 1;
    uint64_t v7 = *a1;
    uint64_t v8 = *(v6 - 3);
    v5 -= 0x100000000LL;
    v6 -= 2;
  }

  while (*a1 < v8);
  if (*a1 == v8)
  {
    uint64_t v10 = *v6;
    if ((_DWORD)v4 || v10 <= 0)
    {
      uint64_t v32 = *(void *)((char *)a3 + (v5 >> 28) + 17488);
      int v9 = v10 > v32;
      if ((v4 + 1) >= 2 && v10 > v32)
      {
        uint64_t v33 = *(void *)&a3[4 * v4 + 4370];
        do
        {
          uint64_t v34 = (v4 - 1);
          ++v9;
          uint64_t v33 = *(void *)&a3[4 * v34 + 4370];
          LODWORD(v4) = v4 - 1;
        }

        while ((v34 + 1) > 1);
      }
    }

    else
    {
      int v9 = 1;
    }
  }

  else
  {
    int v9 = 0;
    uint64_t v10 = *v6;
  }

tm *__cdecl localtime(const time_t *a1)
{
  int v2 = localtime_key_error;
  if (localtime_key_error)
  {
    *__error() = v2;
    return 0LL;
  }

  if (localtime_key) {
    pthread_key_t v4 = 12LL;
  }
  else {
    pthread_key_t v4 = 0LL;
  }
  uint64_t v5 = pthread_getspecific(v4);
  if (!v5)
  {
    uint64_t v6 = malloc(0x38uLL);
    if (!v6) {
      return 0LL;
    }
    uint64_t v5 = v6;
    if (localtime_key) {
      pthread_key_t v7 = 12LL;
    }
    else {
      pthread_key_t v7 = 0LL;
    }
    pthread_setspecific(v7, v5);
  }

  pthread_rwlock_rdlock(&lcl_rwlock);
  _st_tzset_basic(1);
  uint64_t v8 = (tm *)_st_localsub((uint64_t *)a1, 0LL, (uint64_t)v5);
  pthread_rwlock_unlock(&lcl_rwlock);
  return v8;
}

uint64_t localtime_key_init()
{
  localtime_key = 1;
  uint64_t result = pthread_key_init_np();
  localtime_key_erroint r = result;
  return result;
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  pthread_key_t v4 = (tm *)_st_localsub((uint64_t *)a1, 0LL, (uint64_t)a2);
  pthread_rwlock_unlock(&lcl_rwlock);
  return v4;
}

tm *__cdecl gmtime(const time_t *a1)
{
  int v2 = gmtime_key_error;
  if (gmtime_key_error)
  {
    *__error() = v2;
    return 0LL;
  }

  if (gmtime_key) {
    pthread_key_t v4 = 13LL;
  }
  else {
    pthread_key_t v4 = 0LL;
  }
  uint64_t v5 = pthread_getspecific(v4);
  if (!v5)
  {
    uint64_t v6 = malloc(0x38uLL);
    if (!v6) {
      return 0LL;
    }
    uint64_t v5 = v6;
    if (gmtime_key) {
      pthread_key_t v7 = 13LL;
    }
    else {
      pthread_key_t v7 = 0LL;
    }
    pthread_setspecific(v7, v5);
  }

  return (tm *)gmtsub((uint64_t *)a1, 0LL, (uint64_t)v5);
}

uint64_t gmtime_key_init()
{
  gmtime_key = 1;
  uint64_t result = pthread_key_init_np();
  gmtime_key_erroint r = result;
  return result;
}

tm *__cdecl gmtime_r(const time_t *a1, tm *a2)
{
  return (tm *)gmtsub((uint64_t *)a1, 0LL, (uint64_t)a2);
}

uint64_t offtime(uint64_t *a1, uint64_t a2)
{
  return gmtsub(a1, a2, (uint64_t)&tm);
}

char *__cdecl ctime(const time_t *a1)
{
  uint64_t result = (char *)localtime(a1);
  if (result) {
    return asctime((const tm *)result);
  }
  return result;
}

char *__cdecl ctime_r(const time_t *a1, char *a2)
{
  uint64_t result = (char *)localtime_r(a1, &v4);
  if (result) {
    return asctime_r(&v4, a2);
  }
  return result;
}

uint64_t _st_time1( _DWORD *a1, uint64_t (*a2)(uint64_t *a1, uint64_t a2, uint64_t a3), uint64_t a3, int a4)
{
  if (!a1)
  {
    *__error() = 22;
    return -1LL;
  }

  uint64_t result = time2((uint64_t)a1, a2, a3, &v27, a4);
  if (v27) {
    return result;
  }
  int v9 = a1[8];
  if (v9 < 0)
  {
    int v9 = 0;
    a1[8] = 0;
  }

  if (a2 == _st_localsub) {
    uint64_t v10 = &lclptr;
  }
  else {
    uint64_t v10 = &gmtptr;
  }
  uint64_t v11 = *v10;
  if (!*v10) {
    return -1LL;
  }
  uint64_t v12 = *(unsigned int *)(v11 + 4);
  int v13 = 0;
  unint64_t v14 = v12 + 1;
  do
  {
    uint64_t v15 = *(unsigned __int8 *)(v11 + (v14 - 2) + 9624);
    if (!v28[v15 + 256])
    {
      v28[v15 + 256] = 1;
      v28[v13++] = v15;
    }

    --v14;
  }

  while (v14 > 1);
  if (v13 < 1) {
    return -1LL;
  }
  int v26 = a4;
  uint64_t v16 = 0LL;
  uint64_t v24 = v13;
  uint64_t v25 = a3;
  do
  {
    uint64_t v17 = v11 + 24LL * (int)v28[v16];
    if (*(_DWORD *)(v17 + 10832) == v9)
    {
      unint64_t v18 = (_DWORD *)(v17 + 10824);
      uint64_t v19 = v28;
      uint64_t v20 = v24;
      do
      {
        int v21 = *v19++;
        uint64_t v22 = v11 + 24LL * v21;
        if (*(_DWORD *)(v22 + 10832) != v9)
        {
          BOOL v23 = (_DWORD *)(v22 + 10824);
          *a1 += *(_DWORD *)(v22 + 10824) - *v18;
          a1[8] = v9 == 0;
          uint64_t result = time2((uint64_t)a1, a2, v25, &v27, v26);
          if (v27) {
            return result;
          }
          *a1 += *v18 - *v23;
          int v9 = a1[8] == 0;
          a1[8] = v9;
        }

        --v20;
      }

      while (v20);
    }

    ++v16;
    uint64_t result = -1LL;
  }

  while (v16 != v24);
  return result;
}

uint64_t time2( uint64_t a1, uint64_t (*a2)(uint64_t *a1, uint64_t a2, uint64_t a3), uint64_t a3, _DWORD *a4, int a5)
{
  uint64_t result = time2sub(a1, a2, a3, a4, 0, a5);
  if (!*a4) {
    return time2sub(a1, a2, a3, a4, 1, a5);
  }
  return result;
}

time_t mktime(tm *a1)
{
  int v2 = *__error();
  pthread_rwlock_rdlock(&lcl_rwlock);
  _st_tzset_basic(1);
  time_t v3 = _st_time1(a1, _st_localsub, 0LL, 1);
  pthread_rwlock_unlock(&lcl_rwlock);
  *__error() = v2;
  return v3;
}

time_t timelocal(tm *const a1)
{
  if (a1) {
    a1->int tm_isdst = -1;
  }
  return mktime(a1);
}

time_t timegm(tm *const a1)
{
  if (a1) {
    a1->int tm_isdst = 0;
  }
  return _st_time1(a1, gmtsub, 0LL, 1);
}

uint64_t timeoff(_DWORD *a1, uint64_t a2)
{
  if (a1) {
    a1[8] = 0;
  }
  return _st_time1(a1, gmtsub, a2, 1);
}

time_t time2posix(time_t a1)
{
  uint64_t v2 = *(unsigned int *)lclptr;
  uint64_t v3 = lclptr + 16 * v2 + 17488;
  int v4 = v2 + 1;
  while (--v4 >= 1)
  {
    uint64_t v5 = (uint64_t *)(v3 - 16);
    time_t v6 = *(void *)(v3 - 24);
    v3 -= 16LL;
    if (v6 <= a1)
    {
      uint64_t v7 = *v5;
      return a1 - v7;
    }
  }

  uint64_t v7 = 0LL;
  return a1 - v7;
}

time_t posix2time(time_t a1)
{
  uint64_t v2 = *(unsigned int *)lclptr;
  uint64_t v3 = lclptr + 16 * v2 + 17488;
  int v4 = v2 + 1;
  while (--v4 >= 1)
  {
    uint64_t v5 = (uint64_t *)(v3 - 16);
    time_t v6 = *(void *)(v3 - 24);
    v3 -= 16LL;
    if (v6 <= a1)
    {
      uint64_t v7 = *v5;
      goto LABEL_6;
    }
  }

  uint64_t v7 = 0LL;
LABEL_6:
  time_t v8 = v7 + a1;
  uint64_t v9 = lclptr + 16 * v2 + 17488;
  int v10 = v2 + 1;
  while (--v10 >= 1)
  {
    uint64_t v11 = (uint64_t *)(v9 - 16);
    time_t v12 = *(void *)(v9 - 24);
    v9 -= 16LL;
    if (v8 >= v12)
    {
      uint64_t v13 = *v11;
      goto LABEL_11;
    }
  }

  uint64_t v13 = 0LL;
LABEL_11:
  time_t v14 = v8 - v13;
  if (v14 >= a1)
  {
    if (v14 <= a1) {
      return v8;
    }
    uint64_t v25 = lclptr + 16 * v2 + 17488;
    int v26 = v2 + 1;
    do
    {
      time_t result = v8--;
      int v27 = v26;
      uint64_t v28 = v25;
      while (--v27 >= 1)
      {
        uint64_t v29 = (uint64_t *)(v28 - 16);
        time_t v30 = *(void *)(v28 - 24);
        v28 -= 16LL;
        if (result > v30)
        {
          uint64_t v31 = *v29;
          goto LABEL_27;
        }
      }

      uint64_t v31 = 0LL;
LABEL_27:
      time_t v32 = v8 - v31;
      BOOL v24 = v32 == a1;
    }

    while (v32 > a1);
  }

  else
  {
    uint64_t v15 = lclptr + 16 * v2 + 17488;
    int v16 = v2 + 1;
    do
    {
      time_t result = v8++;
      int v18 = v16;
      uint64_t v19 = v15;
      while (--v18 >= 1)
      {
        uint64_t v20 = (uint64_t *)(v19 - 16);
        time_t v21 = *(void *)(v19 - 24);
        v19 -= 16LL;
        if (v8 >= v21)
        {
          uint64_t v22 = *v20;
          goto LABEL_18;
        }
      }

      uint64_t v22 = 0LL;
LABEL_18:
      time_t v23 = v8 - v22;
      BOOL v24 = v23 == a1;
    }

    while (v23 < a1);
  }

  if (v24) {
    return v8;
  }
  return result;
}

BOOL typesequiv(BOOL result, unsigned int a2, unsigned int a3)
{
  if (result)
  {
    int v3 = *(_DWORD *)(result + 8);
    BOOL v4 = v3 <= (int)a2 || v3 <= (int)a3;
    return !v4
        && *(void *)(result + 10824 + 24LL * a2) == *(void *)(result + 10824 + 24LL * a3)
        && *(_DWORD *)(result + 10824 + 24LL * a2 + 8) == *(_DWORD *)(result + 10824 + 24LL * a3 + 8)
        && *(_DWORD *)(result + 10824 + 24LL * a2 + 16) == *(_DWORD *)(result + 10824 + 24LL * a3 + 16)
        && *(_DWORD *)(result + 10824 + 24LL * a2 + 20) == *(_DWORD *)(result + 10824 + 24LL * a3 + 20)
        && _platform_strcmp() == 0;
  }

  return result;
}

uint64_t getzname(unint64_t a1, unint64_t *a2, void *a3)
{
  if (*(_BYTE *)a1 == 60 && (uint64_t v6 = _platform_strchr()) != 0)
  {
    *a2 = a1 + 1;
    *a3 = v6 + ~a1;
    return v6 + 1;
  }

  else
  {
    *a2 = a1;
    char v8 = *(_BYTE *)a1;
    uint64_t result = a1;
    if (*(_BYTE *)a1)
    {
      uint64_t result = a1;
      do
      {
        int v10 = *(unsigned __int8 *)++result;
        char v8 = v10;
      }

      while (v10);
    }

    *a3 = result - a1;
  }

  return result;
}

char *getoffset(unsigned __int8 *a1, uint64_t *a2)
{
  int v3 = *a1;
  BOOL v4 = v3 == 43 || v3 == 45;
  uint64_t result = getsecs((char *)&a1[v4], a2);
  if (v3 == 45 && result != 0LL) {
    *a2 = -*a2;
  }
  return result;
}

char *getrule(char *result, uint64_t a2)
{
  int v2 = *result;
  if (v2 == 77)
  {
    *(_DWORD *)a2 = 2;
    if ((result[1] - 48) <= 9)
    {
      int v8 = 0;
      char v9 = result[1];
      result += 3;
      while (1)
      {
        int v8 = 10 * v8 + v9 - 48;
        if (v8 > 12) {
          break;
        }
        char v9 = *(result++ - 1);
        if ((v9 - 48) >= 0xA)
        {
          if (v8 >= 1)
          {
            *(_DWORD *)(a2 + 12) = v8;
            if (*(result - 2) == 46 && (*(result - 1) - 48) <= 9)
            {
              int v10 = 0;
              char v11 = *(result - 1);
              while (1)
              {
                int v10 = 10 * v10 + v11 - 48;
                if (v10 > 5) {
                  break;
                }
                int v12 = *result++;
                char v11 = v12;
                if ((v12 - 48) >= 0xA)
                {
                  if (v10 >= 1)
                  {
                    *(_DWORD *)(a2 + 8) = v10;
                    if (*(result - 1) == 46 && (*result - 48) <= 9)
                    {
                      int v5 = 0;
                      char v13 = *result;
                      while (1)
                      {
                        int v5 = 10 * v5 + v13 - 48;
                        if (v5 > 6) {
                          break;
                        }
                        int v14 = *++result;
                        char v13 = v14;
                        if ((v14 - 48) >= 0xA)
                        {
LABEL_31:
                          if (v5 < 0) {
                            return 0LL;
                          }
LABEL_32:
                          *(_DWORD *)(a2 + 4) = v5;
                          if (*result == 47) {
                            return getsecs(result + 1, (uint64_t *)(a2 + 16));
                          }
                          *(void *)(a2 + 16) = 7200LL;
                          return result;
                        }
                      }
                    }
                  }

                  return 0LL;
                }
              }
            }
          }

          return 0LL;
        }
      }
    }
  }

  else if (v2 == 74)
  {
    *(_DWORD *)a2 = 0;
    int v4 = *++result;
    char v3 = v4;
    if ((v4 - 48) <= 9)
    {
      int v5 = 0;
      char v6 = v3;
      while (1)
      {
        int v5 = 10 * v5 + v6 - 48;
        if (v5 > 365) {
          break;
        }
        int v7 = *++result;
        char v6 = v7;
        if ((v7 - 48) >= 0xA)
        {
          if (v5 >= 1) {
            goto LABEL_32;
          }
          return 0LL;
        }
      }
    }
  }

  else if (((char)v2 - 48) <= 9)
  {
    *(_DWORD *)a2 = 1;
    if ((*result - 48) <= 9)
    {
      int v5 = 0;
      char v15 = *result;
      while (1)
      {
        int v5 = 10 * v5 + v15 - 48;
        if (v5 > 365) {
          break;
        }
        int v16 = *++result;
        char v15 = v16;
      }
    }
  }

  return 0LL;
}

uint64_t transtime(uint64_t a1, int a2, int *a3, uint64_t a4)
{
  HIDWORD(v5) = -1030792151 * a2 + 85899344;
  LODWORD(v5) = HIDWORD(v5);
  unsigned int v4 = v5 >> 2;
  LODWORD(v5) = HIDWORD(v5);
  BOOL v6 = (v5 >> 4) < 0xA3D70B;
  if (v4 > 0x28F5C28) {
    BOOL v6 = 1;
  }
  BOOL v7 = (a2 & 3) == 0 && v6;
  int v8 = *a3;
  if (*a3)
  {
    if (v8 == 1)
    {
      uint64_t v27 = a1 + 86400LL * a3[1];
    }

    else if (v8 == 2)
    {
      int v9 = a3[3];
      int v10 = v9 - 1;
      if (v9 >= 2)
      {
        char v11 = &mon_lengths[12 * v7];
        uint64_t v12 = (v9 - 1);
        do
        {
          int v13 = *v11++;
          a1 += 86400LL * v13;
          --v12;
        }

        while (v12);
      }

      int v14 = (v9 + 9) % 12;
      int v15 = a2 - (v9 < 3);
      unint64_t v16 = 1374389535LL * v15;
      unint64_t v17 = HIDWORD(v16);
      v16 >>= 63;
      int v18 = (int)(((26215 * (__int16)(26 * v14 + 24)) >> 18)
                + ((26215 * (__int16)(26 * v14 + 24)) >> 31)
                + v16
                + ((int)v17 >> 7)
                + v15
                - 100 * (v16 + ((int)v17 >> 5))
                + 2 * (v15 / -100)
                + ((char)(v15
                        - 100 * (v16 + ((int)v17 >> 5))
                        + (((char)(v15 - 100 * (v16 + ((int)v17 >> 5))) >> 13) & 3)) >> 2)
                + 1)
          % 7;
      int v19 = v18 + (v18 < 0 ? 7 : 0);
      int v21 = a3[1];
      int v20 = a3[2];
      BOOL v22 = __OFSUB__(v21, v19);
      int v23 = v21 - v19;
      if (v23 < 0 != v22) {
        v23 += 7;
      }
      if (v20 >= 2)
      {
        int v24 = mon_lengths[12 * v7 + v10];
        int v25 = v23 - v20 + 8 * v20 - 7;
        int v26 = v20 - 1;
        while (v23 + 7 < v24)
        {
          v23 += 7;
          if (!--v26)
          {
            int v23 = v25;
            break;
          }
        }
      }

      uint64_t v27 = a1 + 86400LL * v23;
    }

    else
    {
      uint64_t v27 = 0LL;
    }
  }

  else
  {
    uint64_t v28 = a3[1];
    BOOL v29 = v28 > 59;
    uint64_t v27 = a1 + 86400 * (v28 - 1);
    if (v7 && v29) {
      v27 += 86400LL;
    }
  }

  return v27 + a4 + *((void *)a3 + 2);
}

char *getsecs(char *result, uint64_t *a2)
{
  if (result)
  {
    if ((*result - 48) <= 9)
    {
      int v2 = 0;
      char v3 = *result;
      while (1)
      {
        int v2 = 10 * v2 + v3 - 48;
        if (v2 > 167) {
          break;
        }
        int v4 = *++result;
        char v3 = v4;
        if ((v4 - 48) >= 0xA)
        {
          if (v2 < 0) {
            return 0LL;
          }
          uint64_t v5 = 3600LL * v2;
          *a2 = v5;
          if (*result == 58)
          {
            if ((result[1] - 48) <= 9)
            {
              int v6 = 0;
              BOOL v7 = result + 2;
              char v8 = result[1];
              while (1)
              {
                int v6 = 10 * v6 + v8 - 48;
                if (v6 > 59) {
                  break;
                }
                int v9 = *v7++;
                char v8 = v9;
                if ((v9 - 48) >= 0xA)
                {
                  if (v6 < 0) {
                    return 0LL;
                  }
                  uint64_t result = v7 - 1;
                  uint64_t v10 = v5 + (60 * v6);
                  *a2 = v10;
                  if (*(v7 - 1) == 58)
                  {
                    if ((*v7 - 48) <= 9)
                    {
                      int v11 = 0;
                      char v12 = *v7;
                      while (1)
                      {
                        int v11 = 10 * v11 + v12 - 48;
                        if (v11 > 60) {
                          break;
                        }
                        int v13 = *++v7;
                        char v12 = v13;
                        if ((v13 - 48) >= 0xA)
                        {
                          if (v11 < 0) {
                            return 0LL;
                          }
                          *a2 = v10 + v11;
                          return v7;
                        }
                      }
                    }

                    return 0LL;
                  }

                  return result;
                }
              }
            }

            return 0LL;
          }

          return result;
        }
      }
    }

    return 0LL;
  }

  return result;
}

void *gmt_init()
{
  uint64_t result = (void *)gmtptr;
  if (gmtptr || (uint64_t result = calloc(1uLL, 0x4768uLL), (gmtptr = (uint64_t)result) != 0))
  {
    gmtload((uint64_t)result, v1);
    return (void *)notify_register_tz((unint64_t)v1, (int *)&gmt_notify);
  }

  return result;
}

uint64_t time2sub( uint64_t a1, uint64_t (*a2)(uint64_t *a1, uint64_t a2, uint64_t a3), uint64_t a3, _DWORD *a4, int a5, int a6)
{
  BOOL v7 = a4;
  *a4 = 0;
  __int128 v11 = *(_OWORD *)(a1 + 16);
  __int128 v54 = *(_OWORD *)a1;
  __int128 v55 = v11;
  __int128 v56 = *(_OWORD *)(a1 + 32);
  uint64_t v57 = *(void *)(a1 + 48);
  if (a5)
  {
    else {
      unsigned int v12 = v54 / 0x3C;
    }
    LODWORD(v54) = v54 - 60 * v12;
    int v13 = DWORD1(v54) + v12;
  }

  else
  {
    int v13 = DWORD1(v54);
  }

  if (v13 < 0) {
    unsigned int v14 = ~(~v13 / 0x3Cu);
  }
  else {
    unsigned int v14 = v13 / 0x3Cu;
  }
  unsigned int v15 = v13 - 60 * v14;
  int v16 = DWORD2(v54) + v14;
  if (v16 < 0) {
    unsigned int v17 = ~(~v16 / 0x18u);
  }
  else {
    unsigned int v17 = v16 / 0x18u;
  }
  DWORD1(v54) = v15;
  DWORD2(v54) = v16 - 24 * v17;
  int v18 = HIDWORD(v54) + v17;
  else {
    signed int v19 = v55 / 0xC;
  }
  int v20 = v55 - 12 * v19;
  uint64_t v21 = SDWORD1(v55) + (uint64_t)v19 + 1900;
  if (v18 <= 0)
  {
    do
    {
      uint64_t v22 = (v20 > 1) + v21 - 1;
      if ((v22 & 3) != 0) {
        BOOL v23 = 0;
      }
      else {
        BOOL v23 = __ROR8__(0x51EB851EB851EB8LL - 0x70A3D70A3D70A3D7LL * v22, 2) > 0x28F5C28F5C28F5CuLL
      }
           || __ROR8__(0x51EB851EB851EB0LL - 0x70A3D70A3D70A3D7LL * v22, 4) < 0xA3D70A3D70A3D7uLL;
      v18 += year_lengths[v23];
      --v21;
    }

    while (v18 < 1);
  }

  if (v18 >= 0x16F)
  {
    BOOL v24 = v20 > 1;
    do
    {
      uint64_t v25 = v24 + v21;
      if (((v24 + v21) & 3) != 0) {
        BOOL v26 = 0;
      }
      else {
        BOOL v26 = __ROR8__(0x51EB851EB851EB8LL - 0x70A3D70A3D70A3D7LL * v25, 2) > 0x28F5C28F5C28F5CuLL
      }
           || __ROR8__(0x51EB851EB851EB0LL - 0x70A3D70A3D70A3D7LL * v25, 4) < 0xA3D70A3D70A3D7uLL;
      v18 -= year_lengths[v26];
      ++v21;
    }

    while (v18 > 366);
  }

  while (1)
  {
    BOOL v27 = (v21 & 3) == 0
       && (__ROR8__(0x51EB851EB851EB8LL - 0x70A3D70A3D70A3D7LL * v21, 2) > 0x28F5C28F5C28F5CuLL
        || __ROR8__(0x51EB851EB851EB0LL - 0x70A3D70A3D70A3D7LL * v21, 4) < 0xA3D70A3D70A3D7uLL);
    int v28 = mon_lengths[12 * v27 + v20];
    BOOL v29 = __OFSUB__(v18, v28);
    int v30 = v18 - v28;
    if ((v30 < 0) ^ v29 | (v30 == 0)) {
      break;
    }
    BOOL v31 = v20 <= 10;
    if (v20 <= 10) {
      ++v20;
    }
    else {
      int v20 = 0;
    }
    if (!v31) {
      ++v21;
    }
    int v18 = v30;
  }

  HIDWORD(v54) = v18;
  LODWORD(v55) = v20;
  DWORD1(v55) = v21 - 1900;
  uint64_t result = -1LL;
  int v33 = v54;
  if (v54 >= 0x3C)
  {
    if (v21 > 1969)
    {
      LODWORD(v54) = 0;
    }

    else
    {
      int v33 = v54 - 59;
      LODWORD(v54) = 59;
    }
  }

  else
  {
    int v33 = 0;
  }

  uint64_t v34 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v35 = 0x8000000000000000LL;
  while (1)
  {
    uint64_t v36 = v35 >= 0 ? v35 : v35 + 1;
    uint64_t v37 = v34 >= 0 ? v34 : v34 + 1;
    uint64_t v38 = (v37 >> 1) + (v36 >> 1);
    uint64_t v58 = v38;
    if (v38 >= v35)
    {
      if (v38 > v34) {
        uint64_t v58 = v34;
      }
    }

    else
    {
      uint64_t v58 = v35;
    }

    uint64_t v40 = v58;
    if (v58 > 0) {
      int v39 = 1;
    }
    else {
      int v39 = -1;
    }
LABEL_67:
    if (v40 == v35)
    {
      uint64_t v40 = v35 + 1;
      uint64_t v58 = ++v35;
    }

    else if (v40 == v34)
    {
      uint64_t v40 = v34 - 1;
      uint64_t v58 = --v34;
    }

    if (v35 > v34) {
      return -1LL;
    }
    if (v39 > 0) {
      uint64_t v34 = v40;
    }
    else {
      uint64_t v35 = v40;
    }
  }

  int v39 = tmcomp(v52, &v54);
  if (v39)
  {
    uint64_t v40 = v58;
    goto LABEL_67;
  }

  if (a2 == _st_localsub) {
    uint64_t v41 = &lclptr;
  }
  else {
    uint64_t v41 = &gmtptr;
  }
  uint64_t v42 = *v41;
  if (!a6)
  {
    int v44 = v56;
    if ((v56 & 0x80000000) == 0) {
      goto LABEL_88;
    }
LABEL_104:
    v58 += v33;
    uint64_t v59 = v58;
    if (a2(&v58, a3, a1))
    {
      *BOOL v7 = 1;
      return v58;
    }

    return -1LL;
  }

  else {
    int v44 = v56;
  }
  LODWORD(v56) = v44;
  if (v44 < 0) {
    goto LABEL_104;
  }
LABEL_88:
  if (v53 == v44) {
    goto LABEL_104;
  }
  if (v42)
  {
    uint64_t v45 = *(unsigned int *)(v42 + 8);
    if ((int)v45 >= 1)
    {
      int v50 = v33;
      uint64_t v51 = v7;
      while (1)
      {
        uint64_t v46 = v42 + 24LL * (v45 - 1);
        if (*(_DWORD *)(v46 + 10832) == v44)
        {
          uint64_t v47 = *(unsigned int *)(v42 + 8);
        }

LABEL_100:
        uint64_t result = -1LL;
        BOOL v31 = v45-- <= 1;
        if (v31) {
          return result;
        }
      }

      uint64_t v48 = (void *)(v46 + 10824);
      uint64_t v49 = v47 + 1;
      while (1)
      {
        if (*(_DWORD *)(v42 + 24LL * (v49 - 2) + 10832) != v44)
        {
          uint64_t v59 = *(void *)(v42 + 24LL * (v49 - 2) + 10824) + v58 - *v48;
          if (a2(&v59, a3, (uint64_t)v52))
          {
          }
        }
      }

      uint64_t v58 = v59;
      BOOL v7 = v51;
      int v33 = v50;
      goto LABEL_104;
    }
  }

  return -1LL;
}

uint64_t tmcomp(_DWORD *a1, _DWORD *a2)
{
  int v2 = a1[5];
  int v3 = a2[5];
  if (v2 == v3)
  {
    int v5 = a1[4];
    int v6 = a2[4];
    uint64_t result = (v5 - v6);
    if (v5 == v6)
    {
      int v8 = a1[3];
      int v9 = a2[3];
      uint64_t result = (v8 - v9);
      if (v8 == v9)
      {
        int v10 = a1[2];
        int v11 = a2[2];
        uint64_t result = (v10 - v11);
        if (v10 == v11)
        {
          int v12 = a1[1];
          int v13 = a2[1];
          uint64_t result = (v12 - v13);
          if (v12 == v13) {
            return (*a1 - *a2);
          }
        }
      }
    }
  }

  else if (v2 > v3)
  {
    return 1LL;
  }

  else
  {
    return 0xFFFFFFFFLL;
  }

  return result;
}

size_t strftime_l(char *a1, size_t a2, const char *a3, const tm *a4, locale_t a5)
{
  locale_t v9 = (locale_t)&__global_locale;
  if (a5 != (locale_t)-1LL) {
    locale_t v9 = a5;
  }
  if (a5) {
    int v10 = v9;
  }
  else {
    int v10 = (_xlocale *)&__c_locale;
  }
  tzset();
  int v18 = 0;
  if (a3) {
    int v11 = (char *)a3;
  }
  else {
    int v11 = "%c";
  }
  int v12 = &a1[a2];
  current_time_locale = __get_current_time_locale((uint64_t)v10);
  unsigned int v14 = _st_fmt(v11, (unsigned int *)a4, a1, v12, &v18, current_time_locale, v10);
  if (v18 && getenv("CHECK_STRFTIME_FORMATS_FOR_TWO_DIGIT_YEARS"))
  {
    fputs("\n", __stderrp);
    if (a3) {
      fprintf_l(__stderrp, v10, "strftime format %s ", a3);
    }
    else {
      fputs("NULL strftime format ", __stderrp);
    }
    fputs("yields only two digits of years in ", __stderrp);
    unsigned int v15 = "all locales";
    if (v18 == 2) {
      unsigned int v15 = "the current locale";
    }
    if (v18 == 1) {
      int v16 = "some locales";
    }
    else {
      int v16 = v15;
    }
    fputs(v16, __stderrp);
    fputs("\n", __stderrp);
  }

  if (v14 == v12) {
    return 0LL;
  }
  *unsigned int v14 = 0;
  return v14 - a1;
}

_BYTE *_st_fmt(_BYTE *a1, unsigned int *a2, _BYTE *a3, _BYTE *a4, int *a5, void *a6, _xlocale *a7)
{
  uint64_t v137 = a6 + 44;
  unsigned int v14 = a6 + 12;
  while (*a1 == 37)
  {
    uint64_t v15 = 0LL;
    int v16 = 0;
    int v17 = 0;
    char v18 = 1;
    while (2)
    {
      char v19 = v18;
LABEL_8:
      switch(*++a1)
      {
        case '+':
          uint64_t v41 = (const char *)a6[43];
          goto LABEL_155;
        case ',':
        case '.':
        case '/':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'J':
        case 'K':
        case 'L':
        case 'N':
        case 'P':
        case 'Q':
        case '[':
        case '\\':
        case ']':
        case '^':
        case 'f':
        case 'i':
        case 'o':
        case 'q':
          goto LABEL_4;
        case '-':
          char v18 = 0;
          uint64_t v15 = 1LL;
          if ((v19 & 1) == 0) {
            goto LABEL_4;
          }
          continue;
        case '0':
          char v18 = 0;
          uint64_t v15 = 3LL;
          if ((v19 & 1) == 0) {
            goto LABEL_4;
          }
          continue;
        case 'A':
          uint64_t v42 = a2[6];
          else {
            uint64_t v43 = "?";
          }
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v117 = a4 - a3;
          while (1)
          {
            int v118 = *(unsigned __int8 *)v43;
            *a3 = v118;
            if (!v118) {
              goto LABEL_244;
            }
            ++v43;
            ++a3;
            if (!--v117) {
              goto LABEL_243;
            }
          }

        case 'B':
          uint64_t v44 = a2[4];
          if (v44 <= 0xB)
          {
            BOOL v119 = v16 == 0;
            int v120 = v137;
            if (v119) {
              int v120 = v14;
            }
            uint64_t v45 = (const char *)v120[v44];
          }

          else
          {
            uint64_t v45 = "?";
          }

          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v121 = a4 - a3;
          while (1)
          {
            int v122 = *(unsigned __int8 *)v45;
            *a3 = v122;
            if (!v122) {
              goto LABEL_244;
            }
            ++v45;
            ++a3;
            if (!--v121) {
              goto LABEL_243;
            }
          }

        case 'C':
          int v22 = a2[5];
          int v24 = 1900;
          int v46 = 1;
          int v47 = 0;
          goto LABEL_199;
        case 'D':
          uint64_t v41 = "%m/%d/%y";
          goto LABEL_155;
        case 'E':
          v16 |= v17;
          if (v16) {
            goto LABEL_4;
          }
          int v17 = 1;
          goto LABEL_8;
        case 'F':
          uint64_t v41 = "%Y-%m-%d";
          goto LABEL_155;
        case 'G':
        case 'V':
        case 'g':
          int v20 = *a1;
          int v21 = a2[7];
          int v22 = a2[5];
          int v23 = v22 % 400;
          int v24 = 1901;
          while (2)
          {
            int v25 = (v24 - 1) % 400 + v23;
            int v26 = 365;
            if ((v25 & 3) == 0)
            {
              __int16 v27 = 23593 * v25;
              if ((unsigned __int16)(((v27 + 1296) << 12) | ((unsigned __int16)(v27 + 1296) >> 4)) < 0xA3u
                || (unsigned __int16)(((v27 + 1308) << 14) | ((unsigned __int16)(v27 + 1308) >> 2)) > 0x28Eu)
              {
                int v26 = 366;
              }

              else
              {
                int v26 = 365;
              }
            }

            int v29 = (int)(v21 - a2[6] + 11) % 7 - 3;
            int v30 = v29
                - (unsigned __int16)(v26
                                   - 7
            if (v30 < -3) {
              v30 += 7;
            }
            if (v21 >= v30 + v26)
            {
              uint64_t v37 = 1LL;
            }

            else
            {
              if (v21 < v29)
              {
                int v31 = (v24 - 2) % 400 + v23;
                int v32 = 365;
                if ((v31 & 3) == 0)
                {
                  __int16 v33 = 23593 * v31;
                  if ((unsigned __int16)(((v33 + 1296) << 12) | ((unsigned __int16)(v33 + 1296) >> 4)) < 0xA3u
                    || (unsigned __int16)(((v33 + 1308) << 14) | ((unsigned __int16)(v33 + 1308) >> 2)) > 0x28Eu)
                  {
                    int v32 = 366;
                  }

                  else
                  {
                    int v32 = 365;
                  }
                }

                v21 += v32;
                --v24;
                continue;
              }

              uint64_t v37 = ((v21 - v29) / 7 + 1);
              --v24;
            }

            break;
          }

          if (v20 == 103)
          {
            *a5 = 3;
LABEL_196:
            int v46 = 0;
            goto LABEL_198;
          }

          if (v20 != 86)
          {
LABEL_197:
            int v46 = 1;
LABEL_198:
            int v47 = 1;
LABEL_199:
            unsigned int v92 = _yconv(v22, v24, v46, v47, a3, a4, a7);
LABEL_200:
            a3 = v92;
            goto LABEL_244;
          }

          sprintf_l((char *)&v139, a7, fmt_padding[v15], v37);
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v38 = a4 - a3;
          int v39 = &v139;
          do
          {
            tm_sec_loint w = LOBYTE(v39->tm_sec);
            *a3 = tm_sec_low;
            if (!tm_sec_low) {
              goto LABEL_244;
            }
            int v39 = (tm *)((char *)v39 + 1);
            ++a3;
            --v38;
          }

          while (v38);
LABEL_243:
          a3 = a4;
LABEL_244:
          ++a1;
          break;
        case 'H':
          sprintf_l((char *)&v139, a7, fmt_padding[v15], a2[2]);
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v48 = a4 - a3;
          uint64_t v49 = &v139;
          while (1)
          {
            int v50 = LOBYTE(v49->tm_sec);
            *a3 = v50;
            if (!v50) {
              goto LABEL_244;
            }
            uint64_t v49 = (tm *)((char *)v49 + 1);
            ++a3;
            if (!--v48) {
              goto LABEL_243;
            }
          }

        case 'I':
          LODWORD(v93) = (int)a2[2] % 12;
          if ((_DWORD)v93) {
            uint64_t v93 = v93;
          }
          else {
            uint64_t v93 = 12LL;
          }
          sprintf_l((char *)&v139, a7, fmt_padding[v15], v93);
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v94 = a4 - a3;
          stat v95 = &v139;
          while (1)
          {
            int v96 = LOBYTE(v95->tm_sec);
            *a3 = v96;
            if (!v96) {
              goto LABEL_244;
            }
            stat v95 = (tm *)((char *)v95 + 1);
            ++a3;
            if (!--v94) {
              goto LABEL_243;
            }
          }

        case 'M':
          sprintf_l((char *)&v139, a7, fmt_padding[v15], a2[1]);
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v51 = a4 - a3;
          uint64_t v52 = &v139;
          while (1)
          {
            int v53 = LOBYTE(v52->tm_sec);
            *a3 = v53;
            if (!v53) {
              goto LABEL_244;
            }
            uint64_t v52 = (tm *)((char *)v52 + 1);
            ++a3;
            if (!--v51) {
              goto LABEL_243;
            }
          }

        case 'O':
          if (v17 | v16) {
            goto LABEL_4;
          }
          int v17 = 0;
          int v16 = 1;
          goto LABEL_8;
        case 'R':
          uint64_t v41 = "%H:%M";
          goto LABEL_155;
        case 'S':
          sprintf_l((char *)&v139, a7, fmt_padding[v15], *a2);
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v54 = a4 - a3;
          __int128 v55 = &v139;
          while (1)
          {
            int v56 = LOBYTE(v55->tm_sec);
            *a3 = v56;
            if (!v56) {
              goto LABEL_244;
            }
            __int128 v55 = (tm *)((char *)v55 + 1);
            ++a3;
            if (!--v54) {
              goto LABEL_243;
            }
          }

        case 'T':
          uint64_t v41 = "%H:%M:%S";
          goto LABEL_155;
        case 'U':
          sprintf_l((char *)&v139, a7, fmt_padding[v15], ((int)(a2[7] - a2[6] + 7) / 7));
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v57 = a4 - a3;
          uint64_t v58 = &v139;
          while (1)
          {
            int v59 = LOBYTE(v58->tm_sec);
            *a3 = v59;
            if (!v59) {
              goto LABEL_244;
            }
            uint64_t v58 = (tm *)((char *)v58 + 1);
            ++a3;
            if (!--v57) {
              goto LABEL_243;
            }
          }

        case 'W':
          unsigned int v97 = a2[6];
          if (v97) {
            int v98 = 1 - v97;
          }
          else {
            int v98 = -6;
          }
          sprintf_l((char *)&v139, a7, fmt_padding[v15], ((int)(a2[7] + v98 + 7) / 7));
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v99 = a4 - a3;
          uint64_t v100 = &v139;
          while (1)
          {
            int v101 = LOBYTE(v100->tm_sec);
            *a3 = v101;
            if (!v101) {
              goto LABEL_244;
            }
            uint64_t v100 = (tm *)((char *)v100 + 1);
            ++a3;
            if (!--v99) {
              goto LABEL_243;
            }
          }

        case 'X':
          uint64_t v41 = (const char *)a6[38];
          goto LABEL_155;
        case 'Y':
          int v22 = a2[5];
          int v24 = 1900;
          goto LABEL_197;
        case 'Z':
          __uint32_t v60 = (unsigned __int8 *)*((void *)a2 + 6);
          if (v60)
          {
            if (a3 >= a4) {
              goto LABEL_244;
            }
            uint64_t v61 = a4 - a3;
            do
            {
              int v62 = *v60;
              *a3 = v62;
              if (!v62) {
                goto LABEL_244;
              }
              ++v60;
              ++a3;
              --v61;
            }

            while (v61);
          }

          else
          {
            unsigned int v125 = a2[8];
            if ((v125 & 0x80000000) != 0 || a3 >= a4) {
              goto LABEL_244;
            }
            unint64_t v126 = tzname[v125 != 0];
            uint64_t v127 = a4 - a3;
            do
            {
              int v128 = *v126;
              *a3 = v128;
              if (!v128) {
                goto LABEL_244;
              }
              ++v126;
              ++a3;
              --v127;
            }

            while (v127);
          }

          goto LABEL_243;
        case '_':
          char v18 = 0;
          uint64_t v15 = 2LL;
          if ((v19 & 1) == 0) {
            goto LABEL_4;
          }
          continue;
        case 'a':
          uint64_t v102 = a2[6];
          else {
            uint64_t v103 = "?";
          }
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v123 = a4 - a3;
          while (1)
          {
            int v124 = *(unsigned __int8 *)v103;
            *a3 = v124;
            if (!v124) {
              goto LABEL_244;
            }
            ++v103;
            ++a3;
            if (!--v123) {
              goto LABEL_243;
            }
          }

        case 'b':
        case 'h':
          uint64_t v35 = a2[4];
          else {
            uint64_t v36 = "?";
          }
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v115 = a4 - a3;
          while (1)
          {
            int v116 = *(unsigned __int8 *)v36;
            *a3 = v116;
            if (!v116) {
              goto LABEL_244;
            }
            ++v36;
            ++a3;
            if (!--v115) {
              goto LABEL_243;
            }
          }

        case 'c':
          v139.int tm_sec = 1;
          uint64_t v63 = a6[40];
          goto LABEL_146;
        case 'd':
          sprintf_l((char *)&v139, a7, fmt_padding[v15], a2[3]);
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v64 = a4 - a3;
          int v65 = &v139;
          while (1)
          {
            int v66 = LOBYTE(v65->tm_sec);
            *a3 = v66;
            if (!v66) {
              goto LABEL_244;
            }
            int v65 = (tm *)((char *)v65 + 1);
            ++a3;
            if (!--v64) {
              goto LABEL_243;
            }
          }

        case 'e':
          sprintf_l((char *)&v139, a7, fmt_padding[v15 + 4], a2[3]);
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v67 = a4 - a3;
          int v68 = &v139;
          while (1)
          {
            int v69 = LOBYTE(v68->tm_sec);
            *a3 = v69;
            if (!v69) {
              goto LABEL_244;
            }
            int v68 = (tm *)((char *)v68 + 1);
            ++a3;
            if (!--v67) {
              goto LABEL_243;
            }
          }

        case 'j':
          sprintf_l((char *)&v139, a7, fmt_padding[v15 + 8], a2[7] + 1);
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v104 = a4 - a3;
          unsigned int v105 = &v139;
          while (1)
          {
            int v106 = LOBYTE(v105->tm_sec);
            *a3 = v106;
            if (!v106) {
              goto LABEL_244;
            }
            unsigned int v105 = (tm *)((char *)v105 + 1);
            ++a3;
            if (!--v104) {
              goto LABEL_243;
            }
          }

        case 'k':
          sprintf_l((char *)&v139, a7, fmt_padding[v15 + 4], a2[2]);
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v70 = a4 - a3;
          char v71 = &v139;
          while (1)
          {
            int v72 = LOBYTE(v71->tm_sec);
            *a3 = v72;
            if (!v72) {
              goto LABEL_244;
            }
            char v71 = (tm *)((char *)v71 + 1);
            ++a3;
            if (!--v70) {
              goto LABEL_243;
            }
          }

        case 'l':
          LODWORD(v73) = (int)a2[2] % 12;
          if ((_DWORD)v73) {
            uint64_t v73 = v73;
          }
          else {
            uint64_t v73 = 12LL;
          }
          sprintf_l((char *)&v139, a7, fmt_padding[v15 + 4], v73);
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v74 = a4 - a3;
          __int32 v75 = &v139;
          while (1)
          {
            int v76 = LOBYTE(v75->tm_sec);
            *a3 = v76;
            if (!v76) {
              goto LABEL_244;
            }
            __int32 v75 = (tm *)((char *)v75 + 1);
            ++a3;
            if (!--v74) {
              goto LABEL_243;
            }
          }

        case 'm':
          sprintf_l((char *)&v139, a7, fmt_padding[v15], a2[4] + 1);
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v107 = a4 - a3;
          uint64_t v108 = &v139;
          while (1)
          {
            int v109 = LOBYTE(v108->tm_sec);
            *a3 = v109;
            if (!v109) {
              goto LABEL_244;
            }
            uint64_t v108 = (tm *)((char *)v108 + 1);
            ++a3;
            if (!--v107) {
              goto LABEL_243;
            }
          }

        case 'n':
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v77 = 0LL;
          while (1)
          {
            a3[v77] = asc_18049AC4D[v77];
            if (v77 == 1) {
              goto LABEL_201;
            }
            if (a4 - a3 == ++v77) {
              goto LABEL_243;
            }
          }

        case 'p':
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v78 = 41LL;
          uint64_t v79 = (unsigned __int8 *)a6[v78];
          uint64_t v80 = a4 - a3;
          while (1)
          {
            int v81 = *v79;
            *a3 = v81;
            if (!v81) {
              goto LABEL_244;
            }
            ++v79;
            ++a3;
            if (!--v80) {
              goto LABEL_243;
            }
          }

        case 'r':
          uint64_t v41 = (const char *)a6[57];
          goto LABEL_155;
        case 's':
          __int128 v110 = *((_OWORD *)a2 + 1);
          *(_OWORD *)&v139.int tm_sec = *(_OWORD *)a2;
          *(_OWORD *)&v139.tm_mouint64_t n = v110;
          *(_OWORD *)&v139.int tm_isdst = *((_OWORD *)a2 + 2);
          v139.tm_zone = (char *)*((void *)a2 + 6);
          time_t v111 = mktime(&v139);
          sprintf_l(v138, a7, "%ld", v111);
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v112 = a4 - a3;
          unint64_t v113 = v138;
          while (1)
          {
            int v114 = *v113;
            *a3 = v114;
            if (!v114) {
              goto LABEL_244;
            }
            ++v113;
            ++a3;
            if (!--v112) {
              goto LABEL_243;
            }
          }

        case 't':
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v77 = 0LL;
          while (1)
          {
            a3[v77] = asc_18049D29E[v77];
            if (v77 == 1) {
              break;
            }
            if (a4 - a3 == ++v77) {
              goto LABEL_243;
            }
          }

LABEL_201:
          a3 += v77;
          goto LABEL_244;
        case 'u':
          int v82 = a2[6];
          if (!v82) {
            int v82 = 7;
          }
          sprintf_l((char *)&v139, a7, "%d", v82);
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v83 = a4 - a3;
          int v84 = &v139;
          while (1)
          {
            int v85 = LOBYTE(v84->tm_sec);
            *a3 = v85;
            if (!v85) {
              goto LABEL_244;
            }
            int v84 = (tm *)((char *)v84 + 1);
            ++a3;
            if (!--v83) {
              goto LABEL_243;
            }
          }

        case 'v':
          uint64_t v41 = "%e-%b-%Y";
LABEL_155:
          unsigned int v92 = (_BYTE *)_st_fmt(v41, a2, a3, a4, a5, a6, a7);
          goto LABEL_200;
        case 'w':
          sprintf_l((char *)&v139, a7, "%d", a2[6]);
          if (a3 >= a4) {
            goto LABEL_244;
          }
          uint64_t v86 = a4 - a3;
          uint64_t v87 = &v139;
          while (1)
          {
            int v88 = LOBYTE(v87->tm_sec);
            *a3 = v88;
            if (!v88) {
              goto LABEL_244;
            }
            uint64_t v87 = (tm *)((char *)v87 + 1);
            ++a3;
            if (!--v86) {
              goto LABEL_243;
            }
          }

        case 'x':
          v139.int tm_sec = 1;
          uint64_t v63 = a6[39];
LABEL_146:
          a3 = (_BYTE *)_st_fmt(v63, a2, a3, a4, &v139, a6, a7);
          int tm_sec = v139.tm_sec;
          if (v139.tm_sec == 3) {
            int tm_sec = 2;
          }
          if (tm_sec > *a5) {
            *a5 = tm_sec;
          }
          goto LABEL_244;
        case 'y':
          *a5 = 3;
          int v22 = a2[5];
          int v24 = 1900;
          goto LABEL_196;
        case 'z':
          unsigned int v90 = a2[8];
          if ((v90 & 0x80000000) != 0) {
            goto LABEL_244;
          }
          if (v90) {
            int timezone = __darwin_altzone;
          }
          else {
            int timezone = _st_get_timezone();
          }
          if (timezone >= 0) {
            int v129 = timezone;
          }
          else {
            int v129 = -timezone;
          }
          if (a3 >= a4) {
            goto LABEL_239;
          }
          uint64_t v130 = "+";
          if (timezone > 0) {
            uint64_t v130 = "-";
          }
          uint64_t v131 = a4 - a3;
          while (1)
          {
            int v132 = *(unsigned __int8 *)v130;
            *a3 = v132;
            if (!v132) {
              break;
            }
            ++v130;
            ++a3;
            if (!--v131)
            {
              a3 = a4;
              break;
            }
          }

LABEL_239:
          sprintf_l((char *)&v139, a7, fmt_padding[v15 + 12], (v129 / 60 % 60 + 100 * (v129 / 3600)));
          if (a3 < a4)
          {
            uint64_t v133 = a4 - a3;
            __uint32_t v134 = &v139;
            while (1)
            {
              int v135 = LOBYTE(v134->tm_sec);
              *a3 = v135;
              if (!v135) {
                break;
              }
              __uint32_t v134 = (tm *)((char *)v134 + 1);
              ++a3;
              if (!--v133) {
                goto LABEL_243;
              }
            }
          }

          goto LABEL_244;
        default:
          if (!*a1) {
            --a1;
          }
          goto LABEL_4;
      }

      break;
    }
  }

  if (!*a1) {
    return a3;
  }
LABEL_4:
  if (a3 != a4)
  {
    *a3++ = *a1;
    goto LABEL_244;
  }

  return a4;
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  uint64_t v4 = __locale_key;
  int v5 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v4);
  if (v5) {
    int v6 = v5;
  }
  else {
    int v6 = (_xlocale *)&__global_locale;
  }
  return strftime_l(a1, a2, a3, a4, v6);
}

_BYTE *_yconv(int a1, int a2, int a3, int a4, _BYTE *a5, _BYTE *a6, locale_t a7)
{
  locale_t v9 = a5;
  int v11 = 5243 * (__int16)(a2 % 100 + a1 % 100);
  int v12 = (v11 >> 19) + (v11 >> 31);
  int v13 = a2 / 100 + a1 / 100 + v12;
  int v14 = a2 % 100 + a1 % 100 - 100 * v12;
  int v15 = (__int16)(a2 % 100 + a1 % 100 - 100 * v12);
  if ((v14 & 0x8000) != 0 && (int v16 = v13 - 1, v13 >= 1))
  {
    int v17 = v15 + 100;
    if (!a3) {
      goto LABEL_30;
    }
  }

  else
  {
    if (v13 >= 0) {
      int v18 = v13;
    }
    else {
      int v18 = v13 + 1;
    }
    if (v13 < 0) {
      int v19 = v15 - 100;
    }
    else {
      int v19 = v15;
    }
    if (v15 >= 1) {
      int v16 = v18;
    }
    else {
      int v16 = v13;
    }
    if (v15 >= 1) {
      int v17 = v19;
    }
    else {
      int v17 = v15;
    }
    if (!a3) {
      goto LABEL_30;
    }
  }

  if (v16 || (v17 & 0x80000000) == 0)
  {
    sprintf_l(v29, a7, "%02d", v16);
    if (v9 < a6)
    {
      uint64_t v21 = a6 - v9;
      int v22 = v29;
      while (1)
      {
        int v23 = *v22;
        *locale_t v9 = v23;
        if (!v23) {
          break;
        }
        ++v22;
        ++v9;
        if (!--v21)
        {
LABEL_29:
          locale_t v9 = a6;
          break;
        }
      }
    }

char *__cdecl strptime(const char *a1, const char *a2, tm *a3)
{
  uint64_t v3 = __locale_key;
  uint64_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    int v5 = v4;
  }
  else {
    int v5 = (_xlocale *)&__global_locale;
  }
  return strptime_l(a1, a2, a3, v5);
}

char *__cdecl strptime_l(const char *a1, const char *a2, tm *a3, locale_t a4)
{
  locale_t v5 = (locale_t)&__global_locale;
  if (a4 != (locale_t)-1LL) {
    locale_t v5 = a4;
  }
  if (a4) {
    locale_t v6 = v5;
  }
  else {
    locale_t v6 = (locale_t)&__c_locale;
  }
  int v12 = 0;
  a3->tm_zone = 0LL;
  BOOL v7 = (char *)_strptime0((char *)a1, (unsigned __int8 *)a2, a3, &v12, (uint64_t)v6);
  if (v7)
  {
    if (v12 == 2)
    {
      uint64_t tm_gmtoff = a3->tm_gmtoff;
      a3->uint64_t tm_gmtoff = 0LL;
      uint64_t v8 = timeoff(a3, tm_gmtoff);
      goto LABEL_11;
    }

    if (v12 == 1)
    {
      uint64_t v8 = timegm(a3);
LABEL_11:
      time_t v11 = v8;
      localtime_r(&v11, a3);
    }
  }

  return v7;
}

uint64_t _strptime0(char *a1, unsigned __int8 *a2, tm *a3, _DWORD *a4, uint64_t a5)
{
  current_time_locale = __get_current_time_locale(a5);
  int v9 = *a2;
  if (!*a2) {
    return (uint64_t)a1;
  }
  int v177 = 0;
  int v10 = &__global_locale;
  if (a5 != -1) {
    int v10 = (void *)a5;
  }
  int v178 = (_xlocale *)a5;
  if (a5) {
    time_t v11 = v10;
  }
  else {
    time_t v11 = &__c_locale;
  }
  int v171 = 85;
  int v176 = 1;
  int8x16_t v172 = current_time_locale;
  __int32 v175 = v11;
  while (2)
  {
    ++a2;
    if (v9 != 37)
    {
      uint64_t v25 = &_DefaultRuneLocale;
      if ((v9 & 0x80) != 0) {
        uint64_t v25 = *(_RuneLocale **)(v11[166] + 120LL);
      }
      if ((v25->__runetype[v9] & 0x4000) != 0)
      {
        int v27 = *a1;
        if (*a1)
        {
          do
          {
            int v28 = &_DefaultRuneLocale;
            if ((v27 & 0x80) != 0) {
              int v28 = *(_RuneLocale **)(v11[166] + 120LL);
            }
            if ((v28->__runetype[v27] & 0x4000) == 0) {
              break;
            }
            int v29 = *++a1;
            int v27 = v29;
          }

          while (v29);
        }

        goto LABEL_394;
      }

      int v26 = *a1++;
      if (v9 == v26) {
        goto LABEL_394;
      }
      return 0LL;
    }

    int v12 = 0;
    int v13 = 0;
    int v14 = 0;
    LOBYTE(v15) = *a2;
    char v16 = 1;
LABEL_10:
    int v17 = a2 + 1;
    int v18 = *v17;
    int v19 = 43;
    if (!*v17 || v18 == 37) {
      goto LABEL_30;
    }
    if ((char)v18 < 0)
    {
LABEL_30:
      LOBYTE(v15) = 43;
      uint64_t v20 = v178;
      goto LABEL_31;
    }

LABEL_101:
        a3->tm_mouint64_t n = i;
        a1 += v33;
LABEL_272:
        unsigned int v53 = v176 | 4;
LABEL_393:
        int v176 = v53;
LABEL_394:
        int v9 = *a2;
        if (*a2) {
          continue;
        }
        int v141 = v176;
        if ((v176 & 0xA) != 2)
        {
          int v142 = a3;
          goto LABEL_411;
        }

        int v142 = a3;
        if ((~v176 & 0x14) == 0)
        {
          int tm_year = a3->tm_year;
          if ((tm_year & 3) != 0)
          {
            BOOL v144 = 0;
          }

          else
          {
            int v147 = -1030792151 * (tm_year + 1900) + 85899344;
            HIDWORD(v148) = v147;
            LODWORD(v148) = v147;
            if ((v148 >> 2) <= 0x28F5C28)
            {
              HIDWORD(v150) = v147;
              LODWORD(v150) = v147;
              BOOL v144 = (v150 >> 4) < 0xA3D70B;
            }

            else
            {
              BOOL v144 = 1;
            }
          }

          int v151 = _strptime0_start_of_month[13 * v144 + a3->tm_mon] + a3->tm_mday - 1;
          goto LABEL_410;
        }

        if ((v176 & 0x40) == 0)
        {
LABEL_411:
          if ((~v141 & 0xA) != 0) {
            return (uint64_t)a1;
          }
          if ((v141 & 4) != 0)
          {
            if ((v141 & 0x10) != 0) {
              goto LABEL_424;
            }
          }

          else
          {
            int tm_yday = v142->tm_yday;
            int v153 = v142->tm_year;
            HIDWORD(v154) = -1030792151 * v153 + 85899420;
            LODWORD(v154) = HIDWORD(v154);
            BOOL v167 = (v154 >> 2) > 0x28F5C28;
            LODWORD(v154) = HIDWORD(v154);
            unsigned int v155 = v154 >> 4;
            BOOL v157 = (v167 || v155 < 0xA3D70B) && (v142->tm_year & 3) == 0;
            uint64_t v158 = &_strptime0_start_of_month[13 * v157];
            unsigned int v159 = -1;
            do
            {
              int v160 = *v158++;
              ++v159;
            }

            while (tm_yday >= v160);
            if (v159 >= 0xD)
            {
              v142->int tm_yday = tm_yday - _strptime0_start_of_month[13 * v157 + 12];
              v142->int tm_year = v153 + 1;
              unsigned int v159 = 1;
            }

            v142->tm_mouint64_t n = v159 - 1;
            LOBYTE(v141) = v141 | 4;
            if ((v141 & 0x10) != 0)
            {
LABEL_424:
              if ((v141 & 0x20) == 0) {
LABEL_425:
              }
                v142->int tm_wday = (int)(v142->tm_yday + first_wday_of(v142->tm_year + 1900)) % 7;
              return (uint64_t)a1;
            }
          }

          int v161 = v142->tm_year;
          if ((v161 & 3) != 0)
          {
            BOOL v162 = 0;
          }

          else
          {
            int v163 = -1030792151 * (v161 + 1900) + 85899344;
            HIDWORD(v164) = v163;
            LODWORD(v164) = v163;
            if ((v164 >> 2) <= 0x28F5C28)
            {
              HIDWORD(v165) = v163;
              LODWORD(v165) = v163;
              BOOL v162 = (v165 >> 4) < 0xA3D70B;
            }

            else
            {
              BOOL v162 = 1;
            }
          }

          v142->int tm_mday = v142->tm_yday - _strptime0_start_of_month[13 * v162 + v142->tm_mon] + 1;
          if ((v141 & 0x20) != 0) {
            return (uint64_t)a1;
          }
          goto LABEL_425;
        }

        int v145 = v171 != 85;
        int wday_of = first_wday_of(a3->tm_year + 1900);
        if (!v177 && v145 == wday_of) {
          return 0LL;
        }
        if ((v176 & 0x20) != 0)
        {
          int tm_wday = a3->tm_wday;
        }

        else
        {
          a3->int tm_wday = v145;
          int v141 = v176 | 0x20;
          int tm_wday = v171 != 85;
        }

        int v166 = (v145
                               - wday_of
                               + 7
                               - 7
                               * ((((v145
                                                    - wday_of
                                                    + 7
        BOOL v167 = wday_of >= 5 || wday_of <= 1;
        if (!v167 && v171 == 86) {
          v166 -= 7;
        }
        int v169 = v166 - v177 + 8 * v177;
        if (v171 == 85) {
          int v170 = 7;
        }
        else {
          int v170 = 6;
        }
        int v151 = v169 + (v170 + tm_wday) % 7 - 7;
        if (v151 >= 0)
        {
LABEL_410:
          a3->int tm_yday = v151;
          v141 |= 8u;
          goto LABEL_411;
        }

        if ((v141 & 0x20) == 0)
        {
          int v151 = 0;
          goto LABEL_410;
        }

        return 0LL;
      case 'C':
        if (*a1 < 0)
        {
          time_t v11 = v175;
          int v59 = *(_RuneLocale **)(v175[166] + 120LL);
        }

        else
        {
          int v59 = &_DefaultRuneLocale;
          time_t v11 = v175;
        }

        int v98 = *a1;
        if ((v59->__runetype[*a1] & 0x400) != 0)
        {
          int v99 = 0;
          if (v14) {
            int v100 = v14;
          }
          else {
            int v100 = 2;
          }
          if (v98 == 43) {
            goto LABEL_306;
          }
          if (v98 != 45) {
            goto LABEL_307;
          }
        }

        else
        {
          if (v98 != 45)
          {
            if (v98 != 43) {
              return 0LL;
            }
            int v99 = 0;
            if (v14) {
              int v100 = v14;
            }
            else {
              int v100 = 2;
            }
LABEL_306:
            ++a1;
            if (!--v100)
            {
              int v118 = 0;
              goto LABEL_316;
            }

LABEL_307:
            int v118 = 0;
            uint64_t v119 = (uint64_t)&a1[v100 - 1 + 1];
            do
            {
              uint64_t v120 = *a1;
              if (!*a1) {
                goto LABEL_316;
              }
              uint64_t v121 = (v120 & 0x80) != 0 ? *(_RuneLocale **)(v11[166] + 120LL) : &_DefaultRuneLocale;
              if ((v121->__runetype[v120] & 0x400) == 0) {
                goto LABEL_316;
              }
              int v118 = (char)v120 + 10 * v118 - 48;
              ++a1;
              --v100;
            }

            while (v100);
            a1 = (char *)v119;
LABEL_316:
            if (v99) {
              int v122 = -v118;
            }
            else {
              int v122 = v118;
            }
            int v123 = 100 * v122;
            if ((v176 & 0x200) != 0)
            {
              a3->int tm_year = v123 + a3->tm_year % 100 - 1900;
              unsigned int v124 = v176 & 0xFFFFFDFF;
            }

            else
            {
              a3->int tm_year = v123 - 1900;
              unsigned int v124 = v176 | 0x102;
            }

            int v176 = v124;
            goto LABEL_394;
          }

          if (v14) {
            int v100 = v14;
          }
          else {
            int v100 = 2;
          }
        }

        int v99 = 1;
        goto LABEL_306;
      case 'D':
        __uint32_t v60 = "%m/%d/%y";
        goto LABEL_171;
      case 'E':
        if (((v12 | v13) & 1) != 0) {
          goto LABEL_175;
        }
        int v13 = 0;
        int v15 = *a2;
        int v12 = 1;
        char v16 = 1;
        goto LABEL_38;
      case 'F':
        __uint32_t v60 = "%Y-%m-%d";
        goto LABEL_171;
      case 'H':
      case 'I':
      case 'k':
      case 'l':
        if (*a1 < 0)
        {
          time_t v11 = v175;
          int v30 = *(_RuneLocale **)(v175[166] + 120LL);
        }

        else
        {
          int v30 = &_DefaultRuneLocale;
          time_t v11 = v175;
        }

        int v48 = 0;
        if (v14) {
          int v49 = v14;
        }
        else {
          int v49 = 2;
        }
        uint64_t v50 = (uint64_t)&a1[v49 - 1 + 1];
        do
        {
          uint64_t v51 = *a1;
          if (!*a1) {
            goto LABEL_95;
          }
          uint64_t v52 = (v51 & 0x80) != 0 ? *(_RuneLocale **)(v11[166] + 120LL) : &_DefaultRuneLocale;
          if ((v52->__runetype[v51] & 0x400) == 0) {
            goto LABEL_95;
          }
          int v48 = (char)v51 + 10 * v48 - 48;
          ++a1;
          --v49;
        }

        while (v49);
        a1 = (char *)v50;
LABEL_95:
        if ((char)v15 == 107 || v15 == 72)
        {
          if (v48 > 23) {
            return 0LL;
          }
        }

        else if (v48 > 12)
        {
          return 0LL;
        }

        a3->int tm_hour = v48;
        goto LABEL_394;
      case 'M':
      case 'S':
        uint64_t v41 = *a1;
        if (!*a1) {
          goto LABEL_175;
        }
        time_t v11 = v175;
        if ((v41 & 0x80) != 0) {
          uint64_t v42 = (char *)(*(void *)(v175[166] + 120LL) + 4 * v41);
        }
        else {
          uint64_t v42 = &_DefaultRuneLocale.__magic[4 * v41];
        }
        int v88 = *((_DWORD *)v42 + 15);
        if ((v88 & 0x4000) != 0) {
          goto LABEL_394;
        }
        if ((v88 & 0x400) == 0) {
          return 0LL;
        }
        int v89 = 0;
        if (v14) {
          int v90 = v14;
        }
        else {
          int v90 = 2;
        }
        uint64_t v91 = (uint64_t)&a1[v90 - 1 + 1];
        do
        {
          uint64_t v92 = *a1;
          if (!*a1) {
            goto LABEL_212;
          }
          uint64_t v93 = (v92 & 0x80) != 0 ? *(_RuneLocale **)(v175[166] + 120LL) : &_DefaultRuneLocale;
          if ((v93->__runetype[v92] & 0x400) == 0) {
            goto LABEL_212;
          }
          int v89 = (char)v92 + 10 * v89 - 48;
          ++a1;
          --v90;
        }

        while (v90);
        a1 = (char *)v91;
LABEL_212:
        if ((char)v15 == 77)
        {
          if (v89 <= 59)
          {
            a3->tm_miuint64_t n = v89;
            goto LABEL_394;
          }
        }

        else if (v89 <= 60)
        {
          a3->int tm_sec = v89;
          goto LABEL_394;
        }

        return 0LL;
      case 'O':
        if (((v12 | v13) & 1) != 0) {
          goto LABEL_175;
        }
        int v12 = 0;
        char v16 = 0;
        int v15 = *a2;
        int v13 = 1;
LABEL_38:
        if (v15 == 37) {
          return 0LL;
        }
        goto LABEL_10;
      case 'R':
        uint64_t v61 = "%H:%M";
        goto LABEL_165;
      case 'T':
        uint64_t v61 = "%H:%M:%S";
        goto LABEL_165;
      case 'U':
      case 'V':
      case 'W':
        if (*a1 < 0)
        {
          time_t v11 = v175;
          uint64_t v35 = *(_RuneLocale **)(v175[166] + 120LL);
        }

        else
        {
          uint64_t v35 = &_DefaultRuneLocale;
          time_t v11 = v175;
        }

        int v177 = 0;
        if (v14) {
          int v54 = v14;
        }
        else {
          int v54 = 2;
        }
        uint64_t v55 = (uint64_t)&a1[v54 - 1 + 1];
        do
        {
          uint64_t v56 = *a1;
          if (!*a1) {
            goto LABEL_117;
          }
          uint64_t v57 = (v56 & 0x80) != 0 ? *(_RuneLocale **)(v11[166] + 120LL) : &_DefaultRuneLocale;
          if ((v57->__runetype[v56] & 0x400) == 0) {
            goto LABEL_117;
          }
          int v177 = (char)v56 + 10 * v177 - 48;
          ++a1;
          --v54;
        }

        while (v54);
        a1 = (char *)v55;
LABEL_117:
        if (v177 <= 53 && ((char)v15 != 86 || v177 >= 1))
        {
          v176 |= 0x40u;
          int v171 = (char)v15;
          goto LABEL_394;
        }

        return 0LL;
      case 'X':
        uint64_t v61 = v172[38];
        goto LABEL_165;
      case 'Y':
      case 'y':
        uint64_t v43 = *a1;
        if (!*a1) {
          goto LABEL_175;
        }
        time_t v11 = v175;
        if ((v43 & 0x80) != 0) {
          uint64_t v44 = (char *)(*(void *)(v175[166] + 120LL) + 4 * v43);
        }
        else {
          uint64_t v44 = &_DefaultRuneLocale.__magic[4 * v43];
        }
        int v94 = *((_DWORD *)v44 + 15);
        if ((v94 & 0x4000) != 0) {
          goto LABEL_394;
        }
        if ((v94 & 0x400) != 0)
        {
          int v95 = 0;
          BOOL v96 = (char)v15 == 89;
          else {
            int v97 = 2;
          }
          if (v14) {
            int v97 = v14;
          }
          if ((_DWORD)v43 == 43) {
            goto LABEL_366;
          }
          if ((_DWORD)v43 != 45) {
            goto LABEL_367;
          }
        }

        else
        {
          if ((_DWORD)v43 != 45)
          {
            if ((_DWORD)v43 != 43) {
              return 0LL;
            }
            int v95 = 0;
            BOOL v96 = (char)v15 == 89;
            else {
              int v97 = 2;
            }
            if (v14) {
              int v97 = v14;
            }
LABEL_366:
            ++a1;
            if (!--v97)
            {
              int v137 = 0;
              if (v96)
              {
LABEL_380:
                v137 -= 1900;
                int v138 = 1;
                unsigned int v139 = v176;
LABEL_390:
                a3->int tm_year = v137;
                if (v138) {
                  unsigned int v53 = v139 & 0xFFFFFCFD | 2;
                }
                else {
                  unsigned int v53 = v139 | 2;
                }
                goto LABEL_393;
              }

LABEL_382:
              unsigned int v139 = v176;
              if ((char)v15 == 121 && (v176 & 0x100) != 0)
              {
                int v138 = 0;
                int v137 = a3->tm_year + v137 % 100;
                unsigned int v139 = v176 & 0xFFFFFEFF;
              }

              else
              {
                if (v137 >= 69) {
                  int v140 = v137;
                }
                else {
                  int v140 = v137 + 100;
                }
                int v138 = 0;
                if ((char)v15 == 121)
                {
                  int v137 = v140;
                  unsigned int v139 = v176 | 0x200;
                }
              }

              goto LABEL_390;
            }

LABEL_367:
            int v133 = 0;
            uint64_t v134 = (uint64_t)&a1[v97 - 1 + 1];
            do
            {
              uint64_t v135 = *a1;
              if (!*a1) {
                goto LABEL_375;
              }
              int32x2_t v136 = (v135 & 0x80) != 0 ? *(_RuneLocale **)(v175[166] + 120LL) : &_DefaultRuneLocale;
              if ((v136->__runetype[v135] & 0x400) == 0) {
                goto LABEL_375;
              }
              int v133 = (char)v135 + 10 * v133 - 48;
              ++a1;
              --v97;
            }

            while (v97);
            a1 = (char *)v134;
LABEL_375:
            if (v133 < 0) {
              return 0LL;
            }
            if (v95) {
              int v137 = -v133;
            }
            else {
              int v137 = v133;
            }
            if (v96) {
              goto LABEL_380;
            }
            goto LABEL_382;
          }

          BOOL v96 = (char)v15 == 89;
          else {
            int v132 = 2;
          }
          if (v14) {
            int v97 = v14;
          }
          else {
            int v97 = v132;
          }
        }

        int v95 = 1;
        goto LABEL_366;
      case 'Z':
        int v62 = *a1;
        uint64_t v63 = a1;
        time_t v11 = v175;
        if (*a1)
        {
          do
          {
            if ((v62 & 0x80) != 0) {
              uint64_t v64 = *(_RuneLocale **)(v175[166] + 120LL);
            }
            else {
              uint64_t v64 = &_DefaultRuneLocale;
            }
            if ((v64->__runetype[v62] & 0x8000) == 0) {
              break;
            }
            int v65 = *++v63;
            int v62 = v65;
          }

          while (v65);
        }

        size_t v66 = v63 - a1;
        if (v14) {
          size_t v67 = v14;
        }
        else {
          size_t v67 = v66;
        }
        if (v67 == 3 && !_platform_strncmp())
        {
          *a4 = 1;
          a1 += 3;
          goto LABEL_394;
        }

        tzset();
        if (v67 == _platform_strlen() && !_platform_strncmp())
        {
          a3->int tm_isdst = 0;
        }

        else
        {
          a3->int tm_isdst = 1;
        }

LABEL_358:
        a1 += v67;
        goto LABEL_394;
      case 'c':
        uint64_t result = _strptime0(a1, v172[40], a3, a4, v178);
        if (!result) {
          return result;
        }
        a1 = (char *)result;
        unsigned int v68 = v176 & 0xFFFFFCFF;
        int v69 = 54;
        goto LABEL_173;
      case 'd':
        time_t v11 = v175;
        goto LABEL_325;
      case 'e':
        uint64_t v70 = *a1;
        if (*a1)
        {
          time_t v11 = v175;
          if ((v70 & 0x80) != 0) {
            char v71 = *(_RuneLocale **)(v175[166] + 120LL);
          }
          else {
            char v71 = &_DefaultRuneLocale;
          }
          a1 += ((unint64_t)v71->__runetype[v70] >> 14) & 1;
LABEL_325:
          uint64_t v101 = *a1;
          if (v14) {
            int v102 = v14;
          }
          else {
            int v102 = 2;
          }
          if (*a1 < 0) {
            uint64_t v103 = *(_RuneLocale **)(v11[166] + 120LL);
          }
          else {
            uint64_t v103 = &_DefaultRuneLocale;
          }
        }

        else
        {
          uint64_t v101 = 0LL;
          if (v14) {
            int v102 = v14;
          }
          else {
            int v102 = 2;
          }
          uint64_t v103 = &_DefaultRuneLocale;
          time_t v11 = v175;
        }

        if ((v103->__runetype[v101] & 0x4000) != 0)
        {
          unsigned int v125 = a1[1] < 0 ? *(_RuneLocale **)(v11[166] + 120LL) : &_DefaultRuneLocale;
          if ((v125->__runetype[a1[1]] & 0x400) != 0)
          {
            if (a1[2] < 0) {
              unint64_t v126 = *(_RuneLocale **)(v11[166] + 120LL);
            }
            else {
              unint64_t v126 = &_DefaultRuneLocale;
            }
            if ((v126->__runetype[a1[2]] & 0x400) == 0)
            {
              int v102 = 1;
              ++a1;
            }

            uint64_t v101 = *a1;
          }
        }

        if ((v101 & 0x80) != 0) {
          uint64_t v127 = *(_RuneLocale **)(v11[166] + 120LL);
        }
        else {
          uint64_t v127 = &_DefaultRuneLocale;
        }
        if ((v127->__runetype[v101] & 0x400) == 0) {
          return 0LL;
        }
        int v128 = 0;
        uint64_t v129 = (uint64_t)&a1[v102 - 1 + 1];
        do
        {
          uint64_t v130 = *a1;
          if (!*a1) {
            goto LABEL_355;
          }
          uint64_t v131 = (v130 & 0x80) != 0 ? *(_RuneLocale **)(v11[166] + 120LL) : &_DefaultRuneLocale;
          if ((v131->__runetype[v130] & 0x400) == 0) {
            goto LABEL_355;
          }
          int v128 = (char)v130 + 10 * v128 - 48;
          ++a1;
          --v102;
        }

        while (v102);
        a1 = (char *)v129;
LABEL_355:
        if (v128 <= 31)
        {
          a3->int tm_mday = v128;
          unsigned int v53 = v176 | 0x10;
          goto LABEL_393;
        }

        return 0LL;
      case 'j':
        if (*a1 < 0)
        {
          time_t v11 = v175;
          int v72 = *(_RuneLocale **)(v175[166] + 120LL);
        }

        else
        {
          int v72 = &_DefaultRuneLocale;
          time_t v11 = v175;
        }

        int v104 = 0;
        if (v14) {
          int v105 = v14;
        }
        else {
          int v105 = 3;
        }
        uint64_t v106 = (uint64_t)&a1[v105 - 1 + 1];
        do
        {
          uint64_t v107 = *a1;
          if (!*a1) {
            goto LABEL_255;
          }
          uint64_t v108 = (v107 & 0x80) != 0 ? *(_RuneLocale **)(v11[166] + 120LL) : &_DefaultRuneLocale;
          if ((v108->__runetype[v107] & 0x400) == 0) {
            goto LABEL_255;
          }
          int v104 = (char)v107 + 10 * v104 - 48;
          ++a1;
          --v105;
        }

        while (v105);
        a1 = (char *)v106;
LABEL_255:
        if ((v104 - 367) >= 0xFFFFFE92)
        {
          a3->int tm_yday = v104 - 1;
          unsigned int v53 = v176 | 8;
          goto LABEL_393;
        }

        return 0LL;
      case 'm':
        if (*a1 < 0)
        {
          time_t v11 = v175;
          uint64_t v73 = *(_RuneLocale **)(v175[166] + 120LL);
        }

        else
        {
          uint64_t v73 = &_DefaultRuneLocale;
          time_t v11 = v175;
        }

        int v109 = 0;
        if (v14) {
          int v110 = v14;
        }
        else {
          int v110 = 2;
        }
        uint64_t v111 = (uint64_t)&a1[v110 - 1 + 1];
        do
        {
          uint64_t v112 = *a1;
          if (!*a1) {
            goto LABEL_270;
          }
          unint64_t v113 = (v112 & 0x80) != 0 ? *(_RuneLocale **)(v11[166] + 120LL) : &_DefaultRuneLocale;
          if ((v113->__runetype[v112] & 0x400) == 0) {
            goto LABEL_270;
          }
          int v109 = (char)v112 + 10 * v109 - 48;
          ++a1;
          --v110;
        }

        while (v110);
        a1 = (char *)v111;
LABEL_270:
        if ((v109 - 13) >= 0xFFFFFFF4)
        {
          a3->tm_mouint64_t n = v109 - 1;
          goto LABEL_272;
        }

        return 0LL;
      case 'n':
      case 't':
        int v45 = *a1;
        if (v45 < 0)
        {
          uint64_t v83 = __locale_key;
          int v84 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v83);
          if (!v84) {
            int v84 = &__global_locale;
          }
          int v46 = *(_RuneLocale **)(v84[166] + 120LL);
        }

        else
        {
          int v46 = &_DefaultRuneLocale;
        }

        time_t v11 = v175;
        --a1;
        do
        {
          int v85 = a1[1];
          if (v85 < 0) {
            uint64_t v86 = *(_RuneLocale **)(v175[166] + 120LL);
          }
          else {
            uint64_t v86 = &_DefaultRuneLocale;
          }
          ++a1;
        }

        while ((v86->__runetype[v85] & 0x4000) != 0);
        goto LABEL_394;
      case 'p':
        if (a3->tm_hour > 12) {
          return 0LL;
        }
        uint64_t v74 = v172[41];
        size_t v67 = (int)_platform_strlen();
        if (strncasecmp_l(a1, v74, v67, v178))
        {
          __int32 v75 = v172[42];
          size_t v76 = (int)_platform_strlen();
          if (strncasecmp_l(a1, v75, v76, v178)) {
            return 0LL;
          }
          int tm_hour = a3->tm_hour;
          if (tm_hour != 12) {
            a3->int tm_hour = tm_hour + 12;
          }
          a1 += v76;
LABEL_175:
          time_t v11 = v175;
          goto LABEL_394;
        }

        time_t v11 = v175;
        if (a3->tm_hour == 12) {
          a3->int tm_hour = 0;
        }
        goto LABEL_358;
      case 'r':
        uint64_t v61 = v172[57];
LABEL_165:
        uint64_t result = _strptime0(a1, v61, a3, a4, v178);
        a1 = (char *)result;
        time_t v11 = v175;
        if (!result) {
          return result;
        }
        goto LABEL_394;
      case 's':
        int v78 = *__error();
        *__error() = 0;
        time_t v79 = strtol_l(a1, &v181, 10, v178);
        if (*__error() == 34)
        {
          *__error() = v78;
          return 0LL;
        }

        time_t v180 = v79;
        *__error() = v78;
        a1 = v181;
        if (!gmtime_r(&v180, a3)) {
          return 0LL;
        }
        *a4 = 1;
        unsigned int v80 = v176 & 0xFFFFFCC1 | 0x3E;
LABEL_174:
        int v176 = v80;
        goto LABEL_175;
      case 'u':
      case 'w':
        if (*a1 < 0)
        {
          time_t v11 = v175;
          int v47 = *(_RuneLocale **)(v175[166] + 120LL);
        }

        else
        {
          int v47 = &_DefaultRuneLocale;
          time_t v11 = v175;
        }

        uint64_t v87 = *a1;
        if ((v47->__runetype[v87] & 0x400) == 0
          || (v87 - 56) < 0xF8u
          || (char)v15 == 117 && v87 < 0x31
          || (char)v15 == 119 && v87 > 0x36)
        {
          return 0LL;
        }

        a3->int tm_wday = ((char)v87 - 48) % 7u;
        v176 |= 0x20u;
        ++a1;
        goto LABEL_394;
      case 'x':
        __uint32_t v60 = v172[39];
LABEL_171:
        uint64_t result = _strptime0(a1, v60, a3, a4, v178);
        if (!result) {
          return result;
        }
        a1 = (char *)result;
        unsigned int v68 = v176 & 0xFFFFFCFF;
        int v69 = 22;
LABEL_173:
        unsigned int v80 = v68 | v69;
        goto LABEL_174;
      case 'z':
        int v81 = *a1;
        time_t v11 = v175;
        if (v81 != 45 && v81 != 43) {
          return 0LL;
        }
        int v82 = a1[1] < 0 ? *(_RuneLocale **)(v175[166] + 120LL) : &_DefaultRuneLocale;
        int v114 = a1[2] < 0 ? *(_RuneLocale **)(v175[166] + 120LL) : &_DefaultRuneLocale;
        uint64_t v115 = a1[3] < 0 ? *(_RuneLocale **)(v175[166] + 120LL) : &_DefaultRuneLocale;
        int v116 = a1[4] < 0 ? *(_RuneLocale **)(v175[166] + 120LL) : &_DefaultRuneLocale;
        sscanf(a1, "%c%2d%2d", &v179, &v181, &v180);
        *a4 = 2;
        uint64_t v117 = 60 * ((int)v180 + 60LL * (int)v181);
        a3->uint64_t tm_gmtoff = v117;
        if (v179 == 45) {
          a3->uint64_t tm_gmtoff = -v117;
        }
        a1 += 5;
        goto LABEL_394;
      default:
        return result;
    }
  }

        if ((*(_BYTE *)(v130 + 40) & 4) == 0) {
          goto LABEL_499;
        }
        int v170 = *(void *)(v130 + 48);
        int v316 = v48;
        int v277 = *(_DWORD *)(v41 + 96);
        if ((v277 & 2) == 0)
        {
LABEL_360:
          int v171 = 1;
          goto LABEL_417;
        }

        if (v48 < 0x80)
        {
          if ((*v299 & 0x1000) == 0)
          {
            if ((*v299 & 0x8000) == 0) {
              goto LABEL_360;
            }
            int v315 = v48;
            __int32 v174 = *v261;
LABEL_416:
            int v171 = 0;
            unsigned __int8 v314 = v174;
            goto LABEL_417;
          }

          unsigned __int8 v314 = v48;
          int v182 = *v264;
LABEL_394:
          int v171 = 0;
          int v315 = v182;
          goto LABEL_417;
        }

        __int32 v278 = v170;
        int v176 = *(_xlocale **)(v41 + 56);
        int v291 = v58;
        if (v48 < 0x100)
        {
          int v183 = &__global_locale;
          if (v176 != (_xlocale *)-1LL) {
            int v183 = *(void **)(v41 + 56);
          }
          if (!v176) {
            int v183 = &__c_locale;
          }
          int v177 = *(_DWORD *)(*(void *)(v183[166] + 120LL) + 4LL * v48 + 60);
          if ((v177 & 0x1000) == 0) {
            goto LABEL_391;
          }
LABEL_393:
          unsigned __int8 v314 = v48;
          int v182 = ___toupper_l(v48, v176);
          int v58 = v291;
          int v170 = v278;
          goto LABEL_394;
        }

        if ((___runetype_l(v48, v176) & 0x1000) != 0) {
          goto LABEL_393;
        }
        LOWORD(v177) = ___runetype_l(v48, v176);
LABEL_391:
        if ((v177 & 0x8000) != 0)
        {
          int v315 = v48;
          __int32 v174 = ___tolower_l(v48, v176);
          int v58 = v291;
          int v170 = v278;
          goto LABEL_416;
        }

        int v171 = 1;
        int v58 = v291;
        int v170 = v278;
LABEL_417:
        __int32 v192 = *(_DWORD *)v170;
        if (*(int *)v170 < 1)
        {
          v193 = 0;
          uint64_t v217 = 1;
          goto LABEL_495;
        }

        v193 = 0;
        int v194 = 0;
        v279 = v170;
        uint64_t v195 = (_DWORD *)(v170 + 8);
        uint64_t v280 = *(_DWORD *)v170;
        uint64_t v281 = v171;
        int v292 = v58;
        while (2)
        {
          switch(*v195)
          {
            case 1:
              uint64_t v196 = v195[1];
              if ((v171 & 1) != 0)
              {
                if (v196 != v316) {
                  goto LABEL_484;
                }
                goto LABEL_487;
              }

              __int32 v203 = v196 == v315 || v196 == v314;
              if (v203) {
                goto LABEL_487;
              }
              goto LABEL_484;
            case 2:
              if (++v194 >= v192) {
                goto LABEL_485;
              }
              v197 = v195 + 2;
              if (v195[2] != 3)
              {
                v193 = 0;
                uint64_t v217 = 1;
                goto LABEL_493;
              }

              char v198 = v195[1];
              v199 = v195[3];
              if (v193)
              {
                if ((v171 & 1) == 0)
                {
LABEL_461:
                  if (v198 > v27 || v27 > v199)
                  {
                    v193 = 1;
                    if (v198 <= v26 && v26 <= v199) {
                      goto LABEL_491;
                    }
                    goto LABEL_465;
                  }

                  uint64_t v217 = 0;
                  v193 = 1;
                  goto LABEL_493;
                }
              }

              else
              {
                int v271 = v198;
                int v206 = *(void *)(a1 + 56);
                if ((v171 & 1) == 0)
                {
                  uint64_t v269 = *(void *)(a1 + 56);
                  int v288 = v28;
                  int v297 = __collate_equiv_value(v206, (const __int32 *)&v315, 1uLL);
                  int v212 = __collate_equiv_value(v269, (const __int32 *)&v314, 1uLL);
                  int v28 = v288;
                  int v27 = v297;
                  int v26 = v212;
                  int v58 = v292;
                  __int32 v192 = v280;
                  int v171 = v281;
                  char v198 = v271;
                  goto LABEL_461;
                }

                int v283 = v26;
                int v294 = v27;
                uint64_t v207 = __collate_equiv_value(v206, (const __int32 *)&v316, 1uLL);
                int v171 = v281;
                int v26 = v283;
                int v27 = v294;
                int v28 = v207;
                int v58 = v292;
                __int32 v192 = v280;
                char v198 = v271;
              }

              v193 = 1;
              if (v198 > v28 || v28 > v199)
              {
LABEL_465:
                uint64_t v195 = v197;
                unsigned int v125 = 16LL * v18;
                goto LABEL_484;
              }

uint64_t first_wday_of(int a1)
{
  int v1 = a1 % 100;
  HIDWORD(v2) = -1030792151 * a1 + 85899344;
  LODWORD(v2) = HIDWORD(v2);
  else {
    int v3 = 6;
  }
  if (v1) {
    int v4 = 6;
  }
  else {
    int v4 = v3;
  }
  if ((a1 & 3) != 0) {
    int v4 = 0;
  }
  int v5 = (a1 / 100) & 3;
  if (a1 / -100 >= 0) {
    int v5 = -((a1 / -100) & 3);
  }
  return ((v1 - 2 * v5 + ((char)(v1 + (((char)v1 >> 13) & 3)) >> 2) + v4 + 7) % 7);
}

time_t _time32_to_time(int32_t t32)
{
  *(void *)&t32 = t32;
  LODWORD(result) = t32;
  return result;
}

time_t _int_to_time(int tint)
{
  *(void *)&tint = tint;
  LODWORD(result) = tint;
  return result;
}

char **__get_current_time_locale(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 1315)) {
    return (char **)(*(void *)(a1 + 1352) + 72LL);
  }
  else {
    return _C_time_locale;
  }
}

uint64_t __time_load_locale(uint64_t a1, uint64_t a2)
{
  if (!_platform_strcmp() || !_platform_strcmp() || !_platform_strncmp())
  {
    *(_BYTE *)(a2 + 1315) = 0;
    uint64_t v16 = *(void *)(a2 + 1352);
    if (v16)
    {
      do
      {
        unsigned int v17 = __ldaxr((unsigned int *)v16);
        unsigned int v18 = v17 - 1;
      }

      while (__stlxr(v18, (unsigned int *)v16));
      if (!v18)
      {
        int v19 = *(void (**)(void))(v16 + 8);
        if (v19) {
          v19();
        }
      }
    }

    *(void *)(a2 + 1352) = 0LL;
    return 1LL;
  }

  if (__time_load_locale_cache && *(void *)(__time_load_locale_cache + 64) && !_platform_strcmp())
  {
    *(_BYTE *)(a2 + 1315) = 1;
    uint64_t v20 = *(void *)(a2 + 1352);
    if (v20)
    {
      do
      {
        unsigned int v21 = __ldaxr((unsigned int *)v20);
        unsigned int v22 = v21 - 1;
      }

      while (__stlxr(v22, (unsigned int *)v20));
      if (!v22)
      {
        int v23 = *(void (**)(void))(v20 + 8);
        if (v23) {
          v23();
        }
      }
    }

    int v24 = (unsigned int *)__time_load_locale_cache;
    *(void *)(a2 + 1352) = __time_load_locale_cache;
    if (v24)
    {
      uint64_t result = 1LL;
      do
        unsigned int v25 = __ldaxr(v24);
      while (__stlxr(v25 + 1, v24));
      return result;
    }

    return 1LL;
  }

  int v4 = (void **)malloc(0x218uLL);
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  int v5 = v4;
  *(_DWORD *)int v4 = 1;
  v4[1] = destruct_ldpart;
  unsigned __int8 v4[8] = 0LL;
  uint64_t result = __part_load_locale(a1, (_BYTE *)(a2 + 1315), v4 + 8, "LC_TIME", 58, 58, v4 + 9);
  if ((_DWORD)result == -1)
  {
    free(v5);
    return 0xFFFFFFFFLL;
  }

  if (!(_DWORD)result)
  {
    uint64_t v7 = *(void *)(a2 + 1352);
    if (v7)
    {
      do
      {
        unsigned int v8 = __ldaxr((unsigned int *)v7);
        unsigned int v9 = v8 - 1;
      }

      while (__stlxr(v9, (unsigned int *)v7));
      if (!v9)
      {
        int v10 = *(void (**)(void))(v7 + 8);
        if (v10) {
          v10();
        }
      }
    }

    *(void *)(a2 + 1352) = v5;
    uint64_t v11 = __time_load_locale_cache;
    if (__time_load_locale_cache)
    {
      do
      {
        unsigned int v12 = __ldaxr((unsigned int *)v11);
        unsigned int v13 = v12 - 1;
      }

      while (__stlxr(v13, (unsigned int *)v11));
      if (!v13)
      {
        int v14 = *(void (**)(void))(v11 + 8);
        if (v14) {
          v14();
        }
      }
    }

    __time_load_locale_cache = (uint64_t)v5;
    do
      unsigned int v15 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v15 + 1, (unsigned int *)v5));
    return 0LL;
  }

  return result;
}

void *__cdecl memmem(const void *__big, size_t __big_len, const void *__little, size_t __little_len)
{
  if (__little_len - 1 >= __big_len) {
    return 0LL;
  }
  int v4 = (unsigned __int8 *)__big;
  if (__little_len == 1) {
    return (void *)_platform_memchr();
  }
  locale_t v6 = (unsigned __int8 *)__big + __big_len - __little_len;
  if (v6 < __big) {
    return 0LL;
  }
  int v7 = *(unsigned __int8 *)__little;
  while (*v4 != v7 || _platform_memcmp())
  {
    if (++v4 > v6) {
      return 0LL;
    }
  }

  return v4;
}

char *__cdecl rindex(const char *a1, int a2)
{
  uint64_t result = 0LL;
  int v4 = a1;
  do
  {
    int v6 = *v4++;
    int v5 = v6;
    a1 = v4;
  }

  while (v5);
  return result;
}

int strcasecmp_l(const char *a1, const char *a2, locale_t a3)
{
  locale_t v5 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1LL) {
    locale_t v5 = a3;
  }
  if (a3) {
    int v6 = v5;
  }
  else {
    int v6 = (_xlocale *)&__c_locale;
  }
  while (1)
  {
    uint64_t v7 = *(unsigned __int8 *)a1;
    __darwin_ct_rune_t v8 = *a1 < 0 ? ___tolower_l(v7, v6) : _DefaultRuneLocale.__maplower[v7];
    uint64_t v9 = *(unsigned __int8 *)a2;
    __darwin_ct_rune_t v10 = *a2 < 0 ? ___tolower_l(v9, v6) : _DefaultRuneLocale.__maplower[v9];
    if (v8 != v10) {
      break;
    }
    ++a2;
  }

  uint64_t v13 = *(unsigned __int8 *)a1;
  if (*a1 < 0) {
    __darwin_ct_rune_t v14 = ___tolower_l(v13, v6);
  }
  else {
    __darwin_ct_rune_t v14 = _DefaultRuneLocale.__maplower[v13];
  }
  uint64_t v15 = *(unsigned __int8 *)a2;
  if (*a2 < 0) {
    __darwin_ct_rune_t v16 = ___tolower_l(v15, v6);
  }
  else {
    __darwin_ct_rune_t v16 = _DefaultRuneLocale.__maplower[v15];
  }
  return v14 - v16;
}

int strcasecmp(const char *a1, const char *a2)
{
  uint64_t v2 = __locale_key;
  int v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    int v4 = v3;
  }
  else {
    int v4 = (_xlocale *)&__global_locale;
  }
  return strcasecmp_l(a1, a2, v4);
}

int strncasecmp_l(const char *a1, const char *a2, size_t a3, locale_t a4)
{
  locale_t v4 = (locale_t)&__global_locale;
  if (a4 != (locale_t)-1LL) {
    locale_t v4 = a4;
  }
  if (a4) {
    locale_t v5 = v4;
  }
  else {
    locale_t v5 = (_xlocale *)&__c_locale;
  }
  if (!a3) {
    return 0;
  }
  size_t v8 = a3 - 1;
  while (1)
  {
    size_t v9 = v8;
    uint64_t v10 = *(unsigned __int8 *)a1;
    __darwin_ct_rune_t v11 = *a1 < 0 ? ___tolower_l(v10, v5) : _DefaultRuneLocale.__maplower[v10];
    uint64_t v12 = *(unsigned __int8 *)a2;
    __darwin_ct_rune_t v13 = *a2 < 0 ? ___tolower_l(v12, v5) : _DefaultRuneLocale.__maplower[v12];
    uint64_t v14 = *(unsigned __int8 *)a1;
    if (v11 != v13) {
      break;
    }
    int result = 0;
    if (*a1)
    {
      ++a1;
      size_t v8 = v9 - 1;
      ++a2;
      if (v9) {
        continue;
      }
    }

    return result;
  }

  if ((v14 & 0x80) != 0) {
    __darwin_ct_rune_t v16 = ___tolower_l(*(unsigned __int8 *)a1, v5);
  }
  else {
    __darwin_ct_rune_t v16 = _DefaultRuneLocale.__maplower[v14];
  }
  uint64_t v17 = *(unsigned __int8 *)a2;
  if (*a2 < 0) {
    __darwin_ct_rune_t v18 = ___tolower_l(v17, v5);
  }
  else {
    __darwin_ct_rune_t v18 = _DefaultRuneLocale.__maplower[v17];
  }
  return v16 - v18;
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  uint64_t v3 = __locale_key;
  locale_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    locale_t v5 = v4;
  }
  else {
    locale_t v5 = (_xlocale *)&__global_locale;
  }
  return strncasecmp_l(a1, a2, a3, v5);
}

char *__cdecl strcasestr_l(const char *a1, const char *a2, locale_t a3)
{
  locale_t v4 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1LL) {
    locale_t v4 = a3;
  }
  if (a3) {
    locale_t v5 = v4;
  }
  else {
    locale_t v5 = (_xlocale *)&__c_locale;
  }
  uint64_t v7 = a2 + 1;
  uint64_t v6 = *(unsigned __int8 *)a2;
  if (!*a2) {
    return (char *)a1;
  }
  if ((v6 & 0x80) != 0) {
    LOBYTE(v8) = ___tolower_l(v6, v5);
  }
  else {
    __darwin_rune_t v8 = _DefaultRuneLocale.__maplower[v6];
  }
  size_t v10 = _platform_strlen();
  while (1)
  {
    size_t v9 = (char *)a1;
    unsigned int v12 = *(unsigned __int8 *)a1++;
    uint64_t v11 = v12;
    if (!v12) {
      break;
    }
    if ((v11 & 0x80) != 0) {
      LOBYTE(v13) = ___tolower_l(v11, v5);
    }
    else {
      __darwin_rune_t v13 = _DefaultRuneLocale.__maplower[v11];
    }
  }

  return 0LL;
}

char *__cdecl strcasestr(const char *__big, const char *__little)
{
  uint64_t v2 = __locale_key;
  uint64_t v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    locale_t v4 = v3;
  }
  else {
    locale_t v4 = (_xlocale *)&__global_locale;
  }
  return strcasestr_l(__big, __little, v4);
}

int strcoll_l(const char *a1, const char *a2, locale_t a3)
{
  locale_t v4 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1LL) {
    locale_t v4 = a3;
  }
  if (a3) {
    locale_t v5 = v4;
  }
  else {
    locale_t v5 = (_xlocale *)&__c_locale;
  }
  if (*(_BYTE *)(*((void *)v5 + 165) + 64LL))
  {
    uint64_t v6 = 0LL;
LABEL_8:
    int v7 = *__error();
    free(v6);
    *__error() = v7;
    return _platform_strcmp();
  }

  uint64_t v6 = __collate_mbstowcs((char *)a1, v5);
  if (!v6) {
    goto LABEL_8;
  }
  size_t v9 = __collate_mbstowcs((char *)a2, v5);
  if (!v9) {
    goto LABEL_8;
  }
  size_t v10 = v9;
  int v11 = wcscoll_l(v6, v9, v5);
  int v12 = *__error();
  free(v6);
  free(v10);
  *__error() = v12;
  return v11;
}

int strcoll(const char *__s1, const char *__s2)
{
  uint64_t v2 = __locale_key;
  uint64_t v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    locale_t v4 = v3;
  }
  else {
    locale_t v4 = (_xlocale *)&__global_locale;
  }
  return strcoll_l(__s1, __s2, v4);
}

size_t strcspn(const char *__s, const char *__charset)
{
  if (!*__s) {
    return 0LL;
  }
  v8[0] = 1LL;
  memset(&v8[1], 0, 24);
  unsigned int v2 = *(unsigned __int8 *)__charset;
  if (*__charset)
  {
    uint64_t v3 = __charset + 1;
    do
    {
      v8[v2 >> 6] |= 1LL << v2;
      unsigned int v4 = *(unsigned __int8 *)v3++;
      unsigned int v2 = v4;
    }

    while (v4);
  }

  uint64_t v5 = 0LL;
  do
    unint64_t v6 = __s[v5++];
  while (((*(void *)((char *)v8 + ((v6 >> 3) & 0x18)) >> v6) & 1) == 0);
  return v5 - 1;
}

char *__cdecl strdup(const char *__s1)
{
  uint64_t v1 = _platform_strlen();
  unsigned int v2 = (char *)malloc(v1 + 1);
  if (v2) {
    _platform_memmove();
  }
  return v2;
}

uint64_t __errstr(int a1)
{
  v6[1] = 0;
  if (a1 >= 0) {
    unsigned int v1 = a1;
  }
  else {
    unsigned int v1 = -a1;
  }
  unsigned int v2 = v6;
  do
  {
    *v2-- = a0123456789[v1 % 0xA];
    BOOL v3 = v1 >= 9;
    BOOL v4 = v1 == 9;
    v1 /= 0xAu;
  }

  while (!v4 && v3);
  if (a1 < 0) {
    *unsigned int v2 = 45;
  }
  else {
    ++v2;
  }
  *((_WORD *)v2 - 1) = 8250;
  _platform_strlcpy();
  return _platform_strlcat();
}

int strerror_r(int __errnum, char *__strerrbuf, size_t __buflen)
{
  if (__errnum < 0 || __errnum >= 107)
  {
    __errstr(__errnum);
    return 22;
  }

  else if (_platform_strlcpy() >= __buflen)
  {
    return 34;
  }

  else
  {
    return 0;
  }

char *__cdecl strerror(int __errnum)
{
  if ((__errnum & 0x80000000) == 0 && __errnum < 107) {
    return (char *)sys_errlist[__errnum];
  }
  BOOL v3 = (char *)__strerror_ebuf;
  if (__strerror_ebuf
    || (int result = (char *)calloc(1uLL, 0x800uLL), v3 = result, (__strerror_ebuf = (uint64_t)result) != 0))
  {
    if (strerror_r(__errnum, v3, 0x800uLL)) {
      *__error() = 22;
    }
    return (char *)__strerror_ebuf;
  }

  return result;
}

void strmode(int __mode, char *__bp)
{
  unint64_t v2 = (__mode & 0xF000u) - 4096;
  else {
    char v3 = byte_180499B64[v2 >> 12];
  }
  *__bp = v3;
  char v4 = 45;
  if ((__mode & 0x100) != 0) {
    char v5 = 114;
  }
  else {
    char v5 = 45;
  }
  __bp[1] = v5;
  if ((__mode & 0x80) != 0) {
    char v6 = 119;
  }
  else {
    char v6 = 45;
  }
  __bp[2] = v6;
  if ((__mode & 0x840u) > 0x7FF)
  {
    if ((__mode & 0x840) == 0x800) {
      char v4 = 83;
    }
    else {
      char v4 = 115;
    }
  }

  else if ((__mode & 0x840) != 0)
  {
    char v4 = 120;
  }

  __bp[3] = v4;
  char v7 = 45;
  if ((__mode & 0x20) != 0) {
    char v8 = 114;
  }
  else {
    char v8 = 45;
  }
  __bp[4] = v8;
  if ((__mode & 0x10) != 0) {
    char v9 = 119;
  }
  else {
    char v9 = 45;
  }
  __bp[5] = v9;
  if ((__mode & 0x408u) > 0x3FF)
  {
    if ((__mode & 0x408) == 0x400) {
      char v7 = 83;
    }
    else {
      char v7 = 115;
    }
  }

  else if ((__mode & 0x408) != 0)
  {
    char v7 = 120;
  }

  __bp[6] = v7;
  char v10 = 45;
  if ((__mode & 4) != 0) {
    char v11 = 114;
  }
  else {
    char v11 = 45;
  }
  __bp[7] = v11;
  if ((__mode & 2) != 0) {
    char v12 = 119;
  }
  else {
    char v12 = 45;
  }
  __bp[8] = v12;
  if ((__mode & 0x201u) > 0x1FF)
  {
    if ((__mode & 0x201) == 0x200) {
      char v10 = 84;
    }
    else {
      char v10 = 116;
    }
  }

  else if ((__mode & 0x201) != 0)
  {
    char v10 = 120;
  }

  __bp[9] = v10;
  *((_WORD *)__bp + 5) = 32;
}

char *__cdecl strndup(const char *__s1, size_t __n)
{
  size_t v2 = 0LL;
  if (__n)
  {
    while (__s1[v2])
    {
      if (__n == ++v2)
      {
        size_t v2 = __n;
        break;
      }
    }
  }

  char v3 = (char *)malloc(v2 + 1);
  if (v3)
  {
    _platform_memmove();
    v3[v2] = 0;
  }

  return v3;
}

char *__cdecl strnstr(const char *__big, const char *__little, size_t __len)
{
  int v4 = *(unsigned __int8 *)__little;
  if (*__little)
  {
    unint64_t v6 = _platform_strlen();
    for (size_t i = __len - 1; i != -1LL && *__big; --i)
    {
      if (*(unsigned __int8 *)__big == v4)
      {
        if (v6 > i) {
          return 0LL;
        }
      }

      ++__big;
    }

    return 0LL;
  }

  return (char *)__big;
}

char *__cdecl strpbrk(const char *__s, const char *__charset)
{
  while (1)
  {
    int v2 = *(unsigned __int8 *)__s;
    if (!*__s) {
      break;
    }
    char v3 = (char *)__s++;
    for (size_t i = __charset; ; ++i)
    {
      int v5 = *(unsigned __int8 *)i;
      if (!*i) {
        break;
      }
      if (v5 == v2) {
        return v3;
      }
    }
  }

  return 0LL;
}

char *__cdecl strrchr(const char *__s, int __c)
{
  int result = 0LL;
  int v4 = __s;
  do
  {
    int v6 = *v4++;
    int v5 = v6;
    __s = v4;
  }

  while (v5);
  return result;
}

char *__cdecl strsep(char **__stringp, const char *__delim)
{
  int result = *__stringp;
  if (result)
  {
    int v4 = result;
    int v5 = result;
LABEL_3:
    int v7 = *v5++;
    int v6 = v7;
    char v8 = __delim;
    while (1)
    {
      int v9 = *(unsigned __int8 *)v8;
      if (v9 == v6) {
        break;
      }
      ++v8;
      if (!v9)
      {
        int v4 = v5;
        goto LABEL_3;
      }
    }

    if (v6) {
      *int v4 = 0;
    }
    else {
      int v5 = 0LL;
    }
    char *__stringp = v5;
  }

  return result;
}

int strsignal_r(int __sig, char *__strsignalbuf, size_t __buflen)
{
  uint64_t v16 = 0LL;
  v17[0] = 0LL;
  *(void *)((char *)v17 + 7) = 0LL;
  if (__sig >= 0) {
    unsigned int v6 = __sig;
  }
  else {
    unsigned int v6 = -__sig;
  }
  int v7 = &v16;
  do
  {
    *(_BYTE *)int v7 = a0123456789[v6 % 0xA];
    int v7 = (uint64_t *)((char *)v7 + 1);
    BOOL v8 = v6 > 9;
    v6 /= 0xAu;
  }

  while (v8);
  if (__sig < 0)
  {
    *(_BYTE *)int v7 = 45;
    int v7 = (uint64_t *)((char *)v7 + 1);
  }

  int v9 = _platform_strlen() + 2;
  if ((__sig - 1) > 0x1E)
  {
    unint64_t v10 = _platform_strlcpy();
    size_t v11 = __buflen - v9;
    int result = 22;
  }

  else
  {
    unint64_t v10 = _platform_strlcpy();
    size_t v11 = __buflen - v9;
    if (v10 >= v11) {
      int result = 34;
    }
    else {
      int result = 0;
    }
  }

  if (v10 < v11)
  {
    __darwin_rune_t v13 = &__strsignalbuf[v10];
    *(_WORD *)__darwin_rune_t v13 = 8250;
    uint64_t v14 = v13 + 2;
    do
    {
      char v15 = *((_BYTE *)v7 - 1);
      int v7 = (uint64_t *)((char *)v7 - 1);
      *v14++ = v15;
    }

    while (v7 > &v16);
    *uint64_t v14 = 0;
  }

  return result;
}

char *__cdecl strsignal(int __sig)
{
  else {
    BOOL v2 = sig_keycreated == 0;
  }
  if (v2) {
    goto LABEL_6;
  }
  int v5 = pthread_getspecific(sig_key);
  char v3 = v5;
  if (!v5)
  {
    char v3 = malloc(0x800uLL);
    if (!v3) {
      goto LABEL_7;
    }
    if (!pthread_setspecific(sig_key, v3)) {
      goto LABEL_9;
    }
    free(v3);
LABEL_6:
    char v3 = 0LL;
LABEL_7:
    int v4 = 12;
LABEL_11:
    *__error() = v4;
    return (char *)v3;
  }

uint64_t sig_keycreate()
{
  uint64_t result = pthread_key_create((pthread_key_t *)&sig_key, (void (__cdecl *)(void *))MEMORY[0x189600260]);
  sig_keycreated = result == 0;
  return result;
}

size_t strspn(const char *__s, const char *__charset)
{
  if (!*__s) {
    return 0LL;
  }
  memset(v8, 0, sizeof(v8));
  unsigned int v2 = *(unsigned __int8 *)__charset;
  if (*__charset)
  {
    char v3 = __charset + 1;
    do
    {
      *((void *)v8 + (v2 >> 6)) |= 1LL << v2;
      unsigned int v4 = *(unsigned __int8 *)v3++;
      unsigned int v2 = v4;
    }

    while (v4);
  }

  uint64_t v5 = 0LL;
  do
    unint64_t v6 = __s[v5++];
  while (((*(void *)((char *)v8 + ((v6 >> 3) & 0x18)) >> v6) & 1) != 0);
  return v5 - 1;
}

char *__cdecl strtok_r(char *__str, const char *__sep, char **__lasts)
{
  if (__str || (__stint r = *__lasts) != 0LL)
  {
    char v3 = __str;
LABEL_4:
    int v5 = *v3++;
    int v4 = v5;
    unint64_t v6 = __sep;
    while (1)
    {
      int v7 = *(unsigned __int8 *)v6;
      if (!*v6) {
        break;
      }
      ++v6;
      if (v4 == v7)
      {
        __stint r = v3;
        goto LABEL_4;
      }
    }

    if (v4)
    {
      BOOL v8 = v3;
LABEL_10:
      int v10 = *v8++;
      int v9 = v10;
      size_t v11 = __sep;
      while (1)
      {
        int v12 = *(unsigned __int8 *)v11;
        if (v12 == v9) {
          break;
        }
        ++v11;
        if (!v12)
        {
          char v3 = v8;
          goto LABEL_10;
        }
      }

      if (v9) {
        *char v3 = 0;
      }
      else {
        BOOL v8 = 0LL;
      }
    }

    else
    {
      BOOL v8 = 0LL;
      __stint r = 0LL;
    }

    *__lasts = v8;
  }

  return __str;
}

char *__cdecl strtok(char *__str, const char *__sep)
{
  return strtok_r(__str, __sep, &strtok_last);
}

size_t strxfrm_l(char *a1, const char *a2, size_t a3, locale_t a4)
{
  size_t v4 = a3;
  int v5 = a1;
  if (!a1 || *a2)
  {
    locale_t v7 = (locale_t)&__global_locale;
    if (a4 != (locale_t)-1LL) {
      locale_t v7 = a4;
    }
    if (a4) {
      BOOL v8 = v7;
    }
    else {
      BOOL v8 = (_xlocale *)&__c_locale;
    }
    if (*(_BYTE *)(*((void *)v8 + 165) + 64LL)) {
      return _platform_strlcpy();
    }
    int v10 = __collate_mbstowcs((char *)a2, v8);
    if (!v10) {
      return _platform_strlcpy();
    }
    size_t v11 = v10;
    __collate_xfrm(v10, &v28, (uint64_t)v8);
    int v12 = (unsigned int *)v28;
    size_t v6 = 4 * wcslen((const __int32 *)v28);
    uint64_t v14 = (unsigned int *)*((void *)&v28 + 1);
    if (*((void *)&v28 + 1)) {
      v6 += 4 * wcslen(*((const __int32 **)&v28 + 1)) + 4;
    }
    if (v4)
    {
      if (v4 != 1)
      {
        int v15 = 0;
        do
        {
          if (v15)
          {
            LOBYTE(v16) = *(_BYTE *)v13;
          }

          else
          {
            unsigned int v17 = *v12;
            if (!*v12) {
              goto LABEL_24;
            }
            ++v12;
            HIBYTE(v27) = (v17 & 0x3F) + 48;
            BYTE2(v27) = ((v17 >> 6) & 0x3F) + 48;
            BYTE1(v27) = ((v17 >> 12) & 0x3F) + 48;
            int v16 = ((v17 >> 18) & 0x3F) + 48;
            LOBYTE(v27) = ((v17 >> 18) & 0x3F) + 48;
            __darwin_rune_t v13 = &v27;
            int v15 = 4;
          }

          __darwin_rune_t v13 = (int *)((char *)v13 + 1);
          *v5++ = v16;
          --v15;
          --v4;
        }

        while (v4 > 1);
        size_t v4 = 1LL;
      }

size_t strxfrm(char *__s1, const char *__s2, size_t __n)
{
  uint64_t v3 = __locale_key;
  size_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    int v5 = v4;
  }
  else {
    int v5 = (_xlocale *)&__global_locale;
  }
  return strxfrm_l(__s1, __s2, __n, v5);
}

void swab(const void *a1, void *a2, ssize_t a3)
{
  if (a3 >= 1)
  {
    unint64_t v3 = (unint64_t)a3 >> 1;
    if ((((unint64_t)a3 >> 1) & 7) != 0)
    {
      do
      {
        char v4 = *(_BYTE *)a1;
        int v5 = (char *)a1 + 2;
        *(_BYTE *)a2 = *((_BYTE *)a1 + 1);
        size_t v6 = (char *)a2 + 2;
        *((_BYTE *)a2 + 1) = v4;
        LODWORD(v3) = v3 - 1;
        a2 = (char *)a2 + 2;
        a1 = (char *)a1 + 2;
      }

      while ((v3 & 7) != 0);
      a1 = v5;
      a2 = v6;
    }

    if ((int)v3 >= 8)
    {
      unsigned int v7 = (v3 >> 3) + 1;
      do
      {
        int8x16_t v8 = *(int8x16_t *)a1;
        a1 = (char *)a1 + 16;
        *(int8x16_t *)a2 = vrev16q_s8(v8);
        a2 = (char *)a2 + 16;
        --v7;
      }

      while (v7 > 1);
    }
  }

__int32 *__cdecl wcpcpy(__int32 *result, const __int32 *a2)
{
  __int32 v2 = *a2;
  *uint64_t result = *a2;
  if (v2)
  {
    unint64_t v3 = a2 + 1;
    do
    {
      __int32 v4 = *v3++;
      result[1] = v4;
      ++result;
    }

    while (v4);
  }

  return result;
}

__int32 *__cdecl wcpncpy(__int32 *a1, const __int32 *a2, size_t a3)
{
  unint64_t v3 = a1;
  if (a3)
  {
    uint64_t v4 = 0LL;
    size_t v5 = a3;
    while (1)
    {
      __int32 v6 = a2[v4];
      a1[v4] = v6;
      if (!v6) {
        break;
      }
      ++v4;
      if (!--v5) {
        return &a1[v4];
      }
    }

    unint64_t v3 = &a1[v4];
    if (v5 != 1) {
      _platform_bzero();
    }
  }

  return v3;
}

int wcscasecmp_l(const __int32 *a1, const __int32 *a2, locale_t a3)
{
  unsigned __int32 v5 = *a1;
  if (!v5) {
    return -*a2;
  }
  for (size_t i = a1 + 1; ; ++i)
  {
    __darwin_ct_rune_t v8 = v5 > 0x7F ? ___tolower_l(v5, a3) : _DefaultRuneLocale.__maplower[v5];
    uint64_t v9 = *(unsigned int *)a2;
    __darwin_ct_rune_t v10 = v9 > 0x7F ? ___tolower_l(v9, a3) : _DefaultRuneLocale.__maplower[v9];
    int result = v8 - v10;
    if (result) {
      break;
    }
    ++a2;
    __int32 v12 = *i;
    unsigned __int32 v5 = v12;
    if (!v12) {
      return -*a2;
    }
  }

  return result;
}

int wcscasecmp(const __int32 *a1, const __int32 *a2)
{
  uint64_t v2 = __locale_key;
  unint64_t v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = (_xlocale *)&__global_locale;
  }
  return wcscasecmp_l(a1, a2, v4);
}

__int32 *__cdecl wcscat(__int32 *result, const __int32 *a2)
{
  uint64_t v2 = result - 1;
  do
  {
    __int32 v3 = v2[1];
    ++v2;
  }

  while (v3);
  uint64_t v4 = 0LL;
  do
  {
    __int32 v5 = a2[v4];
    v2[v4++] = v5;
  }

  while (v5);
  return result;
}

__int32 *__cdecl wcschr(const __int32 *a1, __int32 a2)
{
  uint64_t v2 = a1 - 1;
  do
  {
    __int32 v4 = v2[1];
    ++v2;
    __int32 v3 = v4;
  }

  while (v4 != a2 && v3 != 0);
  if (v3 == a2) {
    return (__int32 *)v2;
  }
  else {
    return 0LL;
  }
}

int wcscmp(const __int32 *a1, const __int32 *a2)
{
  while (1)
  {
    __int32 v2 = *a1;
    int v3 = *a1 - *a2;
    if (*a1 != *a2) {
      break;
    }
    ++a2;
    ++a1;
    if (!v2) {
      return 0;
    }
  }

  return v3;
}

int wcscoll_l(const __int32 *a1, const __int32 *a2, locale_t a3)
{
  int v3 = (__int32 *)a2;
  __int32 v4 = (__int32 *)a1;
  locale_t v5 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1LL) {
    locale_t v5 = a3;
  }
  if (a3) {
    __int32 v6 = v5;
  }
  else {
    __int32 v6 = &__c_locale;
  }
  uint64_t v7 = v6[165];
  if (*(_BYTE *)(v7 + 64)) {
    return wcscmp(a1, a2);
  }
  uint64_t v9 = *(unsigned __int8 **)(v7 + 88);
  int v40 = 1;
  int v41 = 1;
  if ((v9[1] & 6) == 0 && (v9[2] & 6) == 0 && (*((_DWORD *)v9 + 13) || *((int *)v9 + 16) <= 0 && *((int *)v9 + 17) < 1))
  {
    __int32 v12 = __collate_substitute((__int32 *)a1, 0, (uint64_t)v6);
    if (v12)
    {
      int v3 = __collate_substitute(v3, 0, (uint64_t)v6);
      __int32 v4 = v12;
      size_t v11 = v3;
    }

    else
    {
      size_t v11 = 0LL;
    }

    int v23 = *v4;
    if (!*v4)
    {
      int v30 = 0;
      goto LABEL_107;
    }

    if (*v3)
    {
      int v30 = 0;
      while (2)
      {
        uint64_t v39 = 0LL;
        while (*v4)
        {
          __collate_lookup_l(v4, &v41, (int *)&v39 + 1, &v38, v6);
          int v31 = HIDWORD(v39);
          if (SHIDWORD(v39) > 0) {
            goto LABEL_92;
          }
          if (v39 < 0)
          {
LABEL_110:
            int v27 = 0LL;
            __int128 v28 = 0LL;
            *__error() = 22;
            int v23 = -1;
            goto LABEL_75;
          }

          v4 += v41;
        }

        int v31 = 0;
LABEL_92:
        if (*v3)
        {
          do
          {
            __collate_lookup_l(v3, &v40, (int *)&v39, &v37, v6);
            int v32 = v39;
            if ((v39 & 0x80000000) != 0) {
              goto LABEL_110;
            }
            v3 += v40;
          }

          while (*v3);
          int v31 = HIDWORD(v39);
        }

        else
        {
          int v32 = v39;
        }

        if (v31 && v32)
        {
          int v23 = v31 - v32;
          if (v31 != v32) {
            goto LABEL_71;
          }
          if (!v30) {
            int v30 = v38 - v37;
          }
          v4 += v41;
          v3 += v40;
          int v23 = *v4;
          if (*v4)
          {
            if (*v3) {
              continue;
            }
            goto LABEL_71;
          }
        }

        else
        {
          __int32 v33 = *v4;
          if (*v4)
          {
            int v27 = 0LL;
            __int128 v28 = 0LL;
            if (*v3) {
              int v23 = 0;
            }
            else {
              int v23 = v33;
            }
            goto LABEL_75;
          }
        }

        break;
      }

LABEL_107:
      int v27 = 0LL;
      __int128 v28 = 0LL;
      if (*v3) {
        int v23 = -*v3;
      }
      else {
        int v23 = v30;
      }
      goto LABEL_75;
    }

LABEL_71:
    int v27 = 0LL;
    __int128 v28 = 0LL;
    goto LABEL_75;
  }

  if (!*v9)
  {
    int v23 = 0;
    __int32 v12 = 0LL;
    size_t v11 = 0LL;
    goto LABEL_71;
  }

  unint64_t v10 = 0LL;
  uint64_t v34 = 0LL;
  uint64_t v35 = 0LL;
  size_t v11 = 0LL;
  __int32 v12 = 0LL;
  while (1)
  {
    unsigned __int8 v13 = v9[v10 + 1];
    if (!v10 || (v9[52] & 1) == 0)
    {
      free(v12);
      __int32 v12 = __collate_substitute(v4, v10, (uint64_t)v6);
      free(v11);
      if (v12) {
        size_t v11 = __collate_substitute(v3, v10, (uint64_t)v6);
      }
      else {
        size_t v11 = 0LL;
      }
    }

    uint64_t v14 = v12 ? v12 : v4;
    uint64_t v36 = v11;
    if ((v13 & 2) != 0)
    {
      uint64_t v14 = __collate_wcsdup(v14);
      int v15 = &v14[wcslen(v14) - 1];
      if (v14 < v15)
      {
        int v16 = v14 + 1;
        do
        {
          __int32 v17 = *(v16 - 1);
          *(v16 - 1) = *v15;
          *v15-- = v17;
          BOOL v18 = v16++ >= v15;
        }

        while (!v18);
      }

      if (v11) {
        uint64_t v19 = v11;
      }
      else {
        uint64_t v19 = v3;
      }
      size_t v11 = __collate_wcsdup(v19);
      unint64_t v20 = &v11[wcslen(v11) - 1];
      if (v11 < v20)
      {
        unint64_t v21 = v11 + 1;
        do
        {
          __int32 v22 = *(v21 - 1);
          *(v21 - 1) = *v20;
          *v20-- = v22;
          BOOL v18 = v21++ >= v20;
        }

        while (!v18);
      }

      uint64_t v34 = v11;
      uint64_t v35 = v14;
    }

    else if (!v12)
    {
      size_t v11 = v3;
    }

    int v23 = *v14;
    if ((v13 & 4) == 0) {
      break;
    }
    while (v23)
    {
      if (!*v11) {
        goto LABEL_73;
      }
      uint64_t v39 = 0LL;
      __collate_lookup_which(v14, &v41, (int *)&v39 + 1, v10, (uint64_t)v6);
      if (SHIDWORD(v39) <= 0)
      {
        if (v39 < 0) {
          goto LABEL_72;
        }
        HIDWORD(v39) = 0xFFFFFF;
      }

      __collate_lookup_which(v11, &v40, (int *)&v39, v10, (uint64_t)v6);
      int v26 = v39;
      if ((int)v39 <= 0)
      {
        if ((v39 & 0x80000000) != 0)
        {
LABEL_72:
          *__error() = 22;
          int v23 = -1;
          goto LABEL_73;
        }

        int v26 = 0xFFFFFF;
        LODWORD(v39) = 0xFFFFFF;
      }

      int v23 = HIDWORD(v39) - v26;
      if (HIDWORD(v39) != v26) {
        goto LABEL_73;
      }
      v14 += v41;
      v11 += v40;
      int v23 = *v14;
    }

    if (v266)
    {
      if (v266 != 2)
      {
        if (v266 == 1)
        {
          uint64_t v50 = v308;
          uint64_t v51 = 0;
          int v48 = 0;
          if (!v267)
          {
            uint64_t v313 = 0;
            int v259 = (__int32 *)a2;
            LODWORD(v260) = 1;
            v263 = (char *)a2;
            goto LABEL_89;
          }

          v263 = (char *)(a2 + 1);
          uint64_t v313 = *(unsigned __int8 *)a2;
          goto LABEL_76;
        }

        uint64_t v51 = 0;
        int v48 = 0;
        goto LABEL_86;
      }

      if (v267)
      {
        if ((*a2 & 0x80000000) == 0)
        {
          uint64_t v51 = 0;
          int v48 = 0;
          uint64_t v57 = *(unsigned __int8 *)a2;
          v263 = (char *)(a2 + 1);
          goto LABEL_82;
        }

        if (v267 < 0) {
          int v254 = 32LL;
        }
        else {
          int v254 = v267;
        }
        int v255 = mbrtowc_l(&v313, a2, v254, &v317, *(locale_t *)(a1 + 56));
        if (v255 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          if ((v267 & 0x80000000) == 0 && !v255)
          {
            uint64_t v51 = 0;
            int v48 = 0;
            uint64_t v313 = 0;
            v263 = (char *)(a2 + 1);
            int v259 = (__int32 *)a2;
            LODWORD(v260) = 1;
LABEL_592:
            uint64_t v39 = v266;
            int v40 = v267;
            int v41 = a1;
            uint64_t v42 = v23;
            goto LABEL_88;
          }

          uint64_t v51 = 0;
          int v48 = 0;
          v263 = (char *)&a2[v255];
          int v259 = (__int32 *)a2;
LABEL_591:
          LODWORD(v260) = v255;
          goto LABEL_592;
        }

        return 17LL;
      }
    }

    else if (v267)
    {
      uint64_t v51 = 0;
      int v48 = 0;
      uint64_t v313 = *(_DWORD *)a2;
      int v259 = (__int32 *)(a2 + 4);
      LODWORD(v260) = 1;
LABEL_87:
      v263 = (char *)a2;
      goto LABEL_88;
    }

    uint64_t v51 = 0;
    int v48 = 0;
    uint64_t v313 = 0;
LABEL_86:
    int v259 = (__int32 *)a2;
    LODWORD(v260) = 1;
    goto LABEL_87;
  }

  if (v266 != 1)
  {
    int v48 = 0;
    uint64_t v44 = a2;
    goto LABEL_49;
  }

  if ((v267 & 0x80000000) == 0)
  {
    uint64_t v44 = (const char *)_platform_memchr();
    if (!v44) {
      goto LABEL_65;
    }
    goto LABEL_46;
  }

  uint64_t v44 = (const char *)_platform_strchr();
  if (!v44) {
    goto LABEL_65;
  }
LABEL_46:
  if (v44 >= a2 + 1) {
    int v48 = *((unsigned __int8 *)v44 - 1);
  }
  else {
    int v48 = 0;
  }
LABEL_49:
  uint64_t v50 = v308;
  uint64_t v313 = *(unsigned __int8 *)v44;
  uint64_t v51 = (_DWORD)v44 - (_DWORD)a2;
  if (v267 < 0 || v51 < v267) {
    ++v44;
  }
  v263 = (char *)v44;
LABEL_76:
  int v259 = (__int32 *)a2;
  LODWORD(v260) = 1;
LABEL_89:
  uint64_t v301 = a6 & 2;
  int v58 = 1LL;
  v304 = -1;
  int v302 = (v50 >> 3) & 1;
  int v59 = (int *)v258;
  __uint32_t v60 = v303;
  while (1)
  {
    uint64_t v61 = v60;
    v275 = v60;
    int v276 = v42;
    if ((v304 & 0x80000000) == 0) {
      break;
    }
    int v62 = *(int **)(v41 + 8);
    if (!*((void *)v62 + 1)) {
      goto LABEL_244;
    }
    uint64_t v64 = (a6 & 1) == 0 && v51 < 1;
    if (v48 == 10) {
      int v65 = v302;
    }
    else {
      int v65 = 0;
    }
    unint64_t v311 = &_DefaultRuneLocale.__runetype[v48];
    do
    {
      size_t v66 = v62 + 10;
      while (*(_DWORD *)(v305 + 16LL * *(v66 - 6)) < v51)
      {
        size_t v67 = *v66;
        if (!*v66) {
          goto LABEL_230;
        }
        unsigned int v68 = (v67 & 1) == 0 || v64;
        if ((v68 | v65) != 1) {
          goto LABEL_220;
        }
        if ((v67 & 2) != 0)
        {
          int v69 = v302;
          if (v313 != 10) {
            int v69 = 0;
          }
          if (v313 | v301 && !v69) {
            goto LABEL_220;
          }
        }

        if ((v67 & 8) != 0)
        {
          if (v48 == 95) {
            goto LABEL_220;
          }
          if (v48 > 0x7F)
          {
            uint64_t v74 = *(_xlocale **)(a1 + 56);
            if (v48 < 0x100)
            {
              time_t v79 = &__global_locale;
              if (v74 != (_xlocale *)-1LL) {
                time_t v79 = *(void **)(a1 + 56);
              }
              if (!v74) {
                time_t v79 = &__c_locale;
              }
              int v72 = *(_DWORD *)(*(void *)(v79[166] + 120LL) + 4LL * v48 + 60);
            }

            else
            {
              __int32 v75 = v58;
              LOWORD(v72) = ___runetype_l(v48, v74);
              int v58 = v75;
            }
          }

          else
          {
            int v72 = *v311;
          }

          if ((v72 & 0x500) != 0) {
            goto LABEL_220;
          }
          if (v313 != 95)
          {
            if (v313 <= 0x7F)
            {
              unsigned int v80 = &_DefaultRuneLocale;
              goto LABEL_227;
            }

            int v90 = *(_xlocale **)(a1 + 56);
            if (v313 < 0x100)
            {
              int v114 = &__global_locale;
              if (v90 != (_xlocale *)-1LL) {
                int v114 = *(void **)(a1 + 56);
              }
              if (!v90) {
                int v114 = &__c_locale;
              }
              unsigned int v80 = *(_RuneLocale **)(v114[166] + 120LL);
LABEL_227:
              uint64_t v92 = v80->__runetype[v313];
            }

            else
            {
              uint64_t v91 = v58;
              LOWORD(v92) = ___runetype_l(v313, v90);
              int v58 = v91;
            }

            if ((v92 & 0x500) == 0) {
              goto LABEL_220;
            }
          }
        }

        if ((*v66 & 0x10) != 0)
        {
          if (v48 != 95)
          {
            if (v48 > 0x7F)
            {
              uint64_t v77 = *(_xlocale **)(a1 + 56);
              if (v48 < 0x100)
              {
                int v84 = &__global_locale;
                if (v77 != (_xlocale *)-1LL) {
                  int v84 = *(void **)(a1 + 56);
                }
                if (!v77) {
                  int v84 = &__c_locale;
                }
                uint64_t v73 = *(_DWORD *)(*(void *)(v84[166] + 120LL) + 4LL * v48 + 60);
              }

              else
              {
                int v78 = v58;
                LOWORD(v73) = ___runetype_l(v48, v77);
                int v58 = v78;
              }
            }

            else
            {
              uint64_t v73 = *v311;
            }

            if ((v73 & 0x500) == 0) {
              goto LABEL_220;
            }
          }

          if (v313 == 95) {
            goto LABEL_220;
          }
          if (v313 <= 0x7F)
          {
            int v85 = &_DefaultRuneLocale;
            goto LABEL_166;
          }

          uint64_t v86 = *(_xlocale **)(a1 + 56);
          if (v313 < 0x100)
          {
            int v89 = &__global_locale;
            if (v86 != (_xlocale *)-1LL) {
              int v89 = *(void **)(a1 + 56);
            }
            if (!v86) {
              int v89 = &__c_locale;
            }
            int v85 = *(_RuneLocale **)(v89[166] + 120LL);
LABEL_166:
            int v88 = v85->__runetype[v313];
          }

          else
          {
            uint64_t v87 = v58;
            LOWORD(v88) = ___runetype_l(v313, v86);
            int v58 = v87;
          }

          if ((v88 & 0x500) != 0) {
            goto LABEL_220;
          }
          if ((*v66 & 0x20) == 0) {
            goto LABEL_191;
          }
          goto LABEL_122;
        }

        if ((*v66 & 0x20) == 0) {
          goto LABEL_191;
        }
LABEL_122:
        if (!v51) {
          goto LABEL_191;
        }
        uint64_t v70 = v313;
        if (!v313) {
          goto LABEL_191;
        }
        if (v48 == 95)
        {
          if (v313 == 95) {
            goto LABEL_220;
          }
          char v71 = 1;
LABEL_180:
          if (v70 <= 0x7F)
          {
            int v95 = &_DefaultRuneLocale;
            goto LABEL_189;
          }

          BOOL v96 = *(_xlocale **)(a1 + 56);
          if (v70 < 0x100)
          {
            int v99 = &__global_locale;
            if (v96 != (_xlocale *)-1LL) {
              int v99 = *(void **)(a1 + 56);
            }
            if (!v96) {
              int v99 = &__c_locale;
            }
            int v95 = *(_RuneLocale **)(v99[166] + 120LL);
LABEL_189:
            int v98 = v95->__runetype[v70];
          }

          else
          {
            int v97 = v58;
            LOWORD(v98) = ___runetype_l(v70, v96);
            int v58 = v97;
            uint64_t v61 = v275;
          }

          if (v71 == ((v98 & 0x500) != 0)) {
            goto LABEL_220;
          }
          goto LABEL_191;
        }

        if (v48 > 0x7F)
        {
          int v81 = *(_xlocale **)(a1 + 56);
          if (v48 < 0x100)
          {
            uint64_t v93 = &__global_locale;
            if (v81 != (_xlocale *)-1LL) {
              uint64_t v93 = *(void **)(a1 + 56);
            }
            if (!v81) {
              uint64_t v93 = &__c_locale;
            }
            size_t v76 = *(_DWORD *)(*(void *)(v93[166] + 120LL) + 4LL * v48 + 60);
          }

          else
          {
            int v82 = v58;
            uint64_t v83 = ___runetype_l(v48, v81);
            int v58 = v82;
            LOWORD(v76) = v83;
            uint64_t v70 = v313;
          }
        }

        else
        {
          size_t v76 = *v311;
        }

        int v94 = v76 & 0x500;
        char v71 = v94 != 0;
        if (v70 != 95) {
          goto LABEL_180;
        }
        if (v94) {
          goto LABEL_220;
        }
LABEL_191:
        if ((*(_BYTE *)v66 & 0x40) == 0) {
          goto LABEL_230;
        }
        if (!v51) {
          goto LABEL_220;
        }
        int v100 = v313;
        if (!v313) {
          goto LABEL_220;
        }
        if (v48 == 95)
        {
          if (v313 == 95) {
            goto LABEL_230;
          }
          uint64_t v101 = 1;
        }

        else
        {
          if (v48 > 0x7F)
          {
            uint64_t v103 = *(_xlocale **)(a1 + 56);
            if (v48 < 0x100)
            {
              uint64_t v106 = &__global_locale;
              if (v103 != (_xlocale *)-1LL) {
                uint64_t v106 = *(void **)(a1 + 56);
              }
              if (!v103) {
                uint64_t v106 = &__c_locale;
              }
              int v102 = *(_DWORD *)(*(void *)(v106[166] + 120LL) + 4LL * v48 + 60);
            }

            else
            {
              int v104 = v58;
              int v105 = ___runetype_l(v48, v103);
              int v58 = v104;
              LOWORD(v102) = v105;
              int v100 = v313;
            }
          }

          else
          {
            int v102 = *v311;
          }

          uint64_t v107 = v102 & 0x500;
          uint64_t v101 = v107 != 0;
          if (v100 == 95)
          {
            if (v107) {
              goto LABEL_230;
            }
            goto LABEL_220;
          }
        }

        if (v100 > 0x7F)
        {
          int v109 = *(_xlocale **)(a1 + 56);
          if (v100 >= 0x100)
          {
            int v110 = v58;
            LOWORD(v111) = ___runetype_l(v100, v109);
            int v58 = v110;
            uint64_t v61 = v275;
            goto LABEL_219;
          }

          uint64_t v112 = &__global_locale;
          if (v109 != (_xlocale *)-1LL) {
            uint64_t v112 = *(void **)(a1 + 56);
          }
          if (!v109) {
            uint64_t v112 = &__c_locale;
          }
          uint64_t v108 = *(_RuneLocale **)(v112[166] + 120LL);
        }

        else
        {
          uint64_t v108 = &_DefaultRuneLocale;
        }

        uint64_t v111 = v108->__runetype[v100];
LABEL_219:
        if (v101 == ((v111 & 0x500) != 0))
        {
LABEL_230:
          uint64_t v115 = v58;
          *(void *)uint64_t v303 = *((void *)v66 - 4);
          int v116 = (uint64_t *)(v303 + 8);
          _platform_bzero();
          uint64_t v117 = (unsigned int *)*((void *)v66 - 2);
          if (v117)
          {
            int v118 = *v117;
            if ((v118 & 0x80000000) == 0)
            {
              uint64_t v119 = v117 + 1;
              do
              {
                if ((int)v118 < (int)v18)
                {
                  uint64_t v120 = *v116;
                  uint64_t v121 = *(_DWORD *)(*v116 + 16 * v118);
                  *(_DWORD *)(*v116 + 16 * v118) = v121 + 1;
                  if (!v121) {
                    *(_DWORD *)(v120 + 16 * v118 + 4) = v51;
                  }
                  int v122 = v120 + 16 * v118;
                  *(_DWORD *)(v122 + 8) = v51;
                  *(_DWORD *)(v122 + 12) = v115;
                }

                int v123 = *v119++;
                int v118 = v123;
              }

              while ((v123 & 0x80000000) == 0);
            }

            int v58 = (v115 + 1);
          }

          else
          {
            int v58 = v115;
          }

          if (*(void *)v303 == *(void *)(a1 + 16))
          {
            __int32 v290 = v58;
            _platform_memmove();
            int v58 = v290;
            v304 = v51;
          }

          unsigned int v124 = v305 + 16LL * *(v66 - 6);
          *(_DWORD *)unsigned int v124 = v51;
          *(void *)(v124 + 8) = v116;
          v303 += 16;
          uint64_t v61 = v275;
          break;
        }

int wcscoll(const __int32 *a1, const __int32 *a2)
{
  uint64_t v2 = __locale_key;
  int v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    __int32 v4 = v3;
  }
  else {
    __int32 v4 = (_xlocale *)&__global_locale;
  }
  return wcscoll_l(a1, a2, v4);
}

__int32 *__cdecl wcscpy(__int32 *result, const __int32 *a2)
{
  uint64_t v2 = 0LL;
  do
  {
    __int32 v3 = a2[v2];
    result[v2++] = v3;
  }

  while (v3);
  return result;
}

size_t wcscspn(const __int32 *a1, const __int32 *a2)
{
  __int32 v2 = *a1;
  __int32 v3 = a1;
  if (*a1)
  {
    __int32 v6 = *a2;
    __int32 v4 = a2 + 1;
    __int32 v5 = v6;
    __int32 v3 = a1;
    while (1)
    {
      uint64_t v7 = v4;
      __int32 v8 = v5;
      if (v5) {
        break;
      }
LABEL_6:
      __int32 v10 = v3[1];
      ++v3;
      __int32 v2 = v10;
      if (!v10) {
        return v3 - a1;
      }
    }

    while (v2 != v8)
    {
      __int32 v9 = *v7++;
      __int32 v8 = v9;
      if (!v9) {
        goto LABEL_6;
      }
    }
  }

  return v3 - a1;
}

__int32 *__cdecl wcsdup(const __int32 *a1)
{
  size_t v2 = wcslen(a1) + 1;
  int result = (__int32 *)malloc(4 * v2);
  if (result) {
    return wmemcpy(result, a1, v2);
  }
  return result;
}

size_t wcslcat(__int32 *a1, const __int32 *a2, size_t a3)
{
  if (*a1) {
    BOOL v3 = a3 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  __int32 v4 = a1;
  if (!v3)
  {
    size_t v5 = a3 - 1;
    __int32 v4 = a1;
    do
    {
      __int32 v6 = v4[1];
      ++v4;
      if (v6) {
        BOOL v7 = v5 == 0;
      }
      else {
        BOOL v7 = 1;
      }
      --v5;
    }

    while (!v7);
  }

  uint64_t v8 = v4 - a1;
  uint64_t v9 = a3 - v8;
  if (a3 == v8)
  {
    size_t v13 = wcslen(a2);
  }

  else
  {
    __int32 v10 = *a2;
    if (*a2)
    {
      size_t v11 = a2;
      do
      {
        if (--v9) {
          *v4++ = v10;
        }
        else {
          uint64_t v9 = 1LL;
        }
        __int32 v12 = v11[1];
        ++v11;
        __int32 v10 = v12;
      }

      while (v12);
    }

    else
    {
      size_t v11 = a2;
    }

    *__int32 v4 = 0;
    size_t v13 = v11 - a2;
  }

  return v13 + v8;
}

size_t wcslcpy(__int32 *a1, const __int32 *a2, size_t a3)
{
  if (a3 >= 2)
  {
    size_t v4 = a3 - 1;
    BOOL v3 = a2;
    while (1)
    {
      __int32 v5 = *v3++;
      *a1 = v5;
      if (!v5) {
        break;
      }
      ++a1;
      if (!--v4) {
        goto LABEL_6;
      }
    }
  }

  else
  {
    BOOL v3 = a2;
LABEL_6:
    if (a3) {
      *a1 = 0;
    }
    while (*v3++)
      ;
  }

  return v3 - a2 - 1;
}

size_t wcslen(const __int32 *a1)
{
  uint64_t v1 = 0LL;
  while (a1[v1++])
    ;
  return (v1 * 4 - 4) >> 2;
}

int wcsncasecmp_l(const __int32 *a1, const __int32 *a2, size_t n, locale_t a4)
{
  if (!n) {
    return 0;
  }
  unsigned __int32 v6 = *a1;
  if (!v6) {
    return -*a2;
  }
  uint64_t v8 = a1 + 1;
  for (size_t i = n - 1; ; --i)
  {
    __darwin_ct_rune_t v10 = v6 > 0x7F ? ___tolower_l(v6, a4) : _DefaultRuneLocale.__maplower[v6];
    uint64_t v11 = *(unsigned int *)a2;
    __darwin_ct_rune_t v12 = v11 > 0x7F ? ___tolower_l(v11, a4) : _DefaultRuneLocale.__maplower[v11];
    int result = v10 - v12;
    if (result) {
      break;
    }
    if (!i) {
      return 0;
    }
    ++a2;
    unsigned __int32 v14 = *v8++;
    unsigned __int32 v6 = v14;
    if (!v14) {
      return -*a2;
    }
  }

  return result;
}

int wcsncasecmp(const __int32 *a1, const __int32 *a2, size_t n)
{
  uint64_t v3 = __locale_key;
  size_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    __int32 v5 = v4;
  }
  else {
    __int32 v5 = (_xlocale *)&__global_locale;
  }
  return wcsncasecmp_l(a1, a2, n, v5);
}

__int32 *__cdecl wcsncat(__int32 *result, const __int32 *a2, size_t a3)
{
  uint64_t v3 = result - 1;
  do
  {
    __int32 v4 = v3[1];
    ++v3;
  }

  while (v4);
  __int32 v5 = *a2;
  if (*a2) {
    BOOL v6 = a3 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v7 = 0LL;
    size_t v8 = a3 - 1;
    do
    {
      v3[v7] = v5;
      __int32 v5 = a2[v7 + 1];
      BOOL v10 = v8-- != 0;
      ++v7;
    }

    while (v5 && v10);
    uint64_t v3 = (__int32 *)((char *)v3 + v7 * 4);
  }

  *uint64_t v3 = 0;
  return result;
}

int wcsncmp(const __int32 *a1, const __int32 *a2, size_t a3)
{
  if (!a3) {
    return 0;
  }
  for (size_t i = a3 - 1; ; --i)
  {
    __int32 v4 = *a1;
    int v5 = *a1 - *a2;
    if (*a1 != *a2) {
      break;
    }
    ++a2;
    ++a1;
    if (v4) {
      BOOL v6 = i == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6) {
      return 0;
    }
  }

  return v5;
}

__int32 *__cdecl wcsncpy(__int32 *a1, const __int32 *a2, size_t a3)
{
  if (a3)
  {
    size_t v5 = 4 * a3 - 4;
    for (size_t i = a1 + 1; ; ++i)
    {
      __int32 v7 = *a2;
      *(i - 1) = *a2;
      if (!v7) {
        break;
      }
      ++a2;
      v5 -= 4LL;
      if (!--a3) {
        return a1;
      }
    }

    if (a3 != 1) {
      _platform_bzero();
    }
  }

  return a1;
}

size_t wcsnlen(const __int32 *a1, size_t a2)
{
  if (!a2) {
    return 0LL;
  }
  size_t result = 0LL;
  while (a1[result])
  {
    if (a2 == ++result) {
      return a2;
    }
  }

  return result;
}

__int32 *__cdecl wcspbrk(__int32 *result, const __int32 *a2)
{
  __int32 v2 = *result;
  if (!*result) {
    return 0LL;
  }
  __int32 v5 = *a2;
  uint64_t v3 = a2 + 1;
  __int32 v4 = v5;
  while (1)
  {
    BOOL v6 = v3;
    __int32 v7 = v4;
    if (v4) {
      break;
    }
LABEL_6:
    __int32 v9 = result[1];
    ++result;
    __int32 v2 = v9;
    if (!v9) {
      return 0LL;
    }
  }

  while (v2 != v7)
  {
    __int32 v8 = *v6++;
    __int32 v7 = v8;
    if (!v8) {
      goto LABEL_6;
    }
  }

  return result;
}

__int32 *__cdecl wcsrchr(const __int32 *a1, __int32 a2)
{
  size_t result = 0LL;
  __int32 v4 = a1;
  do
  {
    __int32 v6 = *v4++;
    __int32 v5 = v6;
    if (v6 == a2) {
      size_t result = (__int32 *)a1;
    }
    a1 = v4;
  }

  while (v5);
  return result;
}

size_t wcsspn(const __int32 *a1, const __int32 *a2)
{
  __int32 v2 = *a1;
  uint64_t v3 = a1;
  if (*a1)
  {
    __int32 v6 = *a2;
    __int32 v4 = a2 + 1;
    __int32 v5 = v6;
    uint64_t v3 = a1;
    while (1)
    {
      __int32 v7 = v4;
      __int32 v8 = v5;
      if (!v5) {
        break;
      }
      while (v2 != v8)
      {
        __int32 v9 = *v7++;
        __int32 v8 = v9;
        if (!v9) {
          return v3 - a1;
        }
      }

      __int32 v10 = v3[1];
      ++v3;
      __int32 v2 = v10;
      if (!v10) {
        return v3 - a1;
      }
    }

    uint64_t v3 = a1;
  }

  return v3 - a1;
}

FILE *__cdecl fmemopen(void *__buf, size_t __size, const char *__mode)
{
  uint64_t v3 = (FILE *)__size;
  if (!__size)
  {
    __int32 v7 = __error();
    goto LABEL_7;
  }

  if (!__sflags((char *)__mode, &v16) || (char v6 = v16, !__buf) && (v16 & 2) == 0)
  {
    __int32 v7 = __error();
    uint64_t v3 = 0LL;
LABEL_7:
    *__int32 v7 = 22;
    return v3;
  }

  __int32 v9 = (void **)malloc(0x28uLL);
  if (!v9) {
    return 0LL;
  }
  __int32 v10 = v9;
  v9[4] = 0LL;
  void v9[2] = v3;
  *__int32 v9 = __buf;
  *((_BYTE *)v9 + 8) = __buf == 0LL;
  if (!__buf)
  {
    __darwin_ct_rune_t v12 = malloc((size_t)v3);
    *__int32 v10 = v12;
    if (!v12)
    {
LABEL_31:
      free(v10);
      return 0LL;
    }

    __unint64_t buf = v12;
    int v11 = *(unsigned __int8 *)__mode;
    goto LABEL_15;
  }

  int v11 = *(unsigned __int8 *)__mode;
  if (v11 == 119) {
LABEL_15:
  }
    *(_BYTE *)__unint64_t buf = 0;
  *((_BYTE *)v10 + 9) = _platform_strchr() != 0;
  if (v11 == 119)
  {
    v10[3] = 0LL;
  }

  else if ((char)v11 == 114)
  {
    v10[3] = v3;
  }

  else if ((char)v11 == 97)
  {
    uint64_t v13 = _platform_strnlen();
    v10[3] = (void *)v13;
    v10[4] = (void *)v13;
  }

  if ((v6 & 1) != 0) {
    unsigned __int32 v14 = 0LL;
  }
  else {
    unsigned __int32 v14 = (int (__cdecl *)(void *, char *, int))fmemopen_read;
  }
  int v15 = funopen( v10,  v14,  (int (__cdecl *)(void *, const char *, int))fmemopen_write,  (fpos_t (__cdecl *)(void *, fpos_t, int))fmemopen_seek,  (int (__cdecl *)(void *))fmemopen_close);
  if (!v15)
  {
    if (*((_BYTE *)v10 + 8)) {
      free(*v10);
    }
    goto LABEL_31;
  }

  uint64_t v3 = v15;
  if (*__mode == 97) {
    v15->_flags |= 0x100u;
  }
  setvbuf(v15, 0LL, 2, 0LL);
  return v3;
}

uint64_t fmemopen_read(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v3 = *(void *)(a1 + 24) - *(void *)(a1 + 32);
  else {
    uint64_t v4 = v3;
  }
  if ((_DWORD)v4)
  {
    _platform_memmove();
    *(void *)(a1 + 32) += (int)v4;
  }

  return v4;
}

uint64_t fmemopen_write(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v3 = *(void *)(a1 + 16) - *(void *)(a1 + 32);
  else {
    uint64_t v4 = v3;
  }
  if ((_DWORD)v4)
  {
    _platform_memmove();
    unint64_t v6 = *(void *)(a1 + 24);
    unint64_t v7 = *(void *)(a1 + 32) + (int)v4;
    *(void *)(a1 + 32) = v7;
    if (v7 > v6) {
      *(void *)(a1 + 24) = v7;
    }
    if (!*(_BYTE *)(a1 + 9) && v7 < *(void *)(a1 + 16) && *(_BYTE *)(v7 + *(void *)a1 - 1)) {
      *(_BYTE *)(*(void *)a1 + v7) = 0;
    }
  }

  return v4;
}

uint64_t fmemopen_seek(void *a1, uint64_t a2, int a3)
{
  if (a3 == 2)
  {
    if (a2 > 0) {
      goto LABEL_10;
    }
    unint64_t v3 = a1[3];
    if (v3 < -a2) {
      goto LABEL_10;
    }
    a2 += v3;
    goto LABEL_11;
  }

  if (a3 == 1)
  {
    a2 += a1[4];
LABEL_11:
    a1[4] = a2;
    return a2;
  }

uint64_t fmemopen_close(void **a1)
{
  if (*((_BYTE *)a1 + 8)) {
    free(*a1);
  }
  free(a1);
  return 0LL;
}

__int32 *__cdecl wcsstr(const __int32 *a1, const __int32 *a2)
{
  __int32 v2 = a1;
  unint64_t v3 = a2 + 1;
  __int32 v4 = *a2;
  if (!*a2) {
    return (__int32 *)a1;
  }
  size_t v5 = wcslen(a2 + 1);
  while (1)
  {
    __int32 v6 = *v2;
    if (!*v2) {
      break;
    }
    unint64_t v7 = (__int32 *)v2++;
    if (v6 == v4 && !wcsncmp(v2, v3, v5)) {
      return v7;
    }
  }

  return 0LL;
}

__int32 *__cdecl wcstok(__int32 *result, const __int32 *a2, __int32 **a3)
{
  if (result || (size_t result = *a3) != 0LL)
  {
    unint64_t v3 = result;
LABEL_4:
    __int32 v5 = *v3++;
    __int32 v4 = v5;
    __int32 v6 = a2;
    while (1)
    {
      __int32 v7 = *v6;
      if (!*v6) {
        break;
      }
      ++v6;
      if (v4 == v7)
      {
        size_t result = v3;
        goto LABEL_4;
      }
    }

    if (v4)
    {
      __int32 v8 = v3;
LABEL_10:
      __int32 v10 = *v8++;
      __int32 v9 = v10;
      int v11 = a2;
      while (1)
      {
        __int32 v12 = *v11;
        if (*v11 == v9) {
          break;
        }
        ++v11;
        if (!v12)
        {
          unint64_t v3 = v8;
          goto LABEL_10;
        }
      }

      if (v9) {
        *unint64_t v3 = 0;
      }
      else {
        __int32 v8 = 0LL;
      }
    }

    else
    {
      __int32 v8 = 0LL;
      size_t result = 0LL;
    }

    *a3 = v8;
  }

  return result;
}

int wcswidth_l(const __int32 *a1, size_t a2, locale_t a3)
{
  locale_t v3 = (locale_t)&__global_locale;
  if (a3 != (locale_t)-1LL) {
    locale_t v3 = a3;
  }
  if (a3) {
    __int32 v4 = v3;
  }
  else {
    __int32 v4 = (_xlocale *)&__c_locale;
  }
  if (!a2) {
    return 0;
  }
  size_t v5 = a2;
  int v7 = 0;
  while (*a1)
  {
    int v8 = wcwidth_l(*a1, v4);
    if (v8 < 0) {
      return -1;
    }
    v7 += v8;
    ++a1;
    if (!--v5) {
      return v7;
    }
  }

  return v7;
}

int wcswidth(const __int32 *a1, size_t a2)
{
  uint64_t v2 = __locale_key;
  locale_t v3 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v2);
  if (v3) {
    __int32 v4 = v3;
  }
  else {
    __int32 v4 = (_xlocale *)&__global_locale;
  }
  return wcswidth_l(a1, a2, v4);
}

size_t wcsxfrm_l(__int32 *a1, const __int32 *a2, size_t a3, locale_t a4)
{
  size_t v4 = a3;
  size_t v5 = a1;
  if (*a2)
  {
    locale_t v7 = (locale_t)&__global_locale;
    if (a4 != (locale_t)-1LL) {
      locale_t v7 = a4;
    }
    if (a4) {
      locale_t v8 = v7;
    }
    else {
      locale_t v8 = (locale_t)&__c_locale;
    }
    if (*(_BYTE *)(*((void *)v8 + 165) + 64LL))
    {
      size_t v9 = wcslen(a2);
      size_t v10 = v9;
      if (v4)
      {
        if (v9 >= v4)
        {
          size_t v15 = v4 - 1;
          wcsncpy(v5, a2, v15);
          v5[v15] = 0;
        }

        else
        {
          wcscpy(v5, a2);
        }
      }
    }

    else
    {
      __collate_xfrm((__int32 *)a2, &v20, (uint64_t)v8);
      int v11 = (int *)v20;
      size_t v10 = wcslen((const __int32 *)v20);
      uint64_t v12 = *((void *)&v20 + 1);
      if (*((void *)&v20 + 1)) {
        v10 += wcslen(*((const __int32 **)&v20 + 1)) + 1;
      }
      if (v4)
      {
        if (v4 != 1)
        {
          uint64_t v13 = v5 + 1;
          while (1)
          {
            int v14 = *v11;
            if (!*v11) {
              break;
            }
            ++v11;
            *(v13 - 1) = v14 + 1;
            --v4;
            ++v13;
            if (v4 <= 1)
            {
              size_t v5 = v13 - 1;
              goto LABEL_27;
            }
          }

          size_t v5 = v13 - 1;
          if (v12)
          {
            uint64_t v16 = 0LL;
            __int32 *v5 = 1;
            do
            {
              int v17 = *(_DWORD *)(v12 + v16 * 4);
              if (!v17) {
                break;
              }
              v13[v16] = v17 + 1;
              --v4;
              ++v16;
            }

            while (v4 > 1);
            size_t v5 = &v13[v16];
          }
        }

size_t wcsxfrm(__int32 *a1, const __int32 *a2, size_t a3)
{
  uint64_t v3 = __locale_key;
  size_t v4 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v3);
  if (v4) {
    size_t v5 = v4;
  }
  else {
    size_t v5 = (_xlocale *)&__global_locale;
  }
  return wcsxfrm_l(a1, a2, a3, v5);
}

__int32 *__cdecl wmemchr(__int32 *result, __int32 a2, size_t a3)
{
  if (!a3) {
    return 0LL;
  }
  while (*result != a2)
  {
    ++result;
    if (!--a3) {
      return 0LL;
    }
  }

  return result;
}

int wmemcmp(const __int32 *a1, const __int32 *a2, size_t a3)
{
  if (!a3) {
    return 0;
  }
  while (*a1 == *a2)
  {
    ++a1;
    ++a2;
    if (!--a3) {
      return 0;
    }
  }

  if (*a1 > *a2) {
    return 1;
  }
  else {
    return -1;
  }
}

__int32 *__cdecl wmemcpy(__int32 *a1, const __int32 *a2, size_t a3)
{
  return (__int32 *)_platform_memmove();
}

__int32 *__cdecl wmemmove(__int32 *a1, const __int32 *a2, size_t a3)
{
  return (__int32 *)_platform_memmove();
}

__int32 *__cdecl wmemset(__int32 *result, __int32 a2, size_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    do
    {
      *v3++ = a2;
      --a3;
    }

    while (a3);
  }

  return result;
}

uint64_t OUTLINED_FUNCTION_0_3@<X0>(int a1@<W8>, uint64_t a2, int a3, sigset_t a4, uint64_t a5, int a6)
{
  a6 = a1;
  a4 = -1;
  return sigprocmask(3, &a4, 0LL);
}

uint64_t OUTLINED_FUNCTION_1_1()
{
  return pthread_sigmask(3, v0, 0LL);
}

uint64_t OUTLINED_FUNCTION_2_1()
{
  return pthread_kill(v0, 6);
}

uint64_t _UTF2_init(void *a1)
{
  a1[9] = _UTF2_mbrtowc;
  a1[10] = _UTF2_mbsinit;
  a1[11] = _UTF2_mbsnrtowcs;
  a1[12] = _UTF2_wcrtomb;
  a1[13] = _UTF2_wcsnrtombs;
  a1[8] = 0x8000000003LL;
  return 0LL;
}

uint64_t _UTF2_mbrtowc(int *a1, const char *a2, unint64_t a3, int *a4)
{
  unsigned int v4 = a4[1];
  if (v4 >= 7)
  {
    size_t v5 = __error();
    int v6 = 22;
LABEL_3:
    int *v5 = v6;
    return -1LL;
  }

  if (!a2) {
    a3 = 1LL;
  }
  if (a2) {
    size_t v9 = a2;
  }
  else {
    size_t v9 = "";
  }
  if (a2) {
    size_t v10 = a1;
  }
  else {
    size_t v10 = 0LL;
  }
  if (!a3) {
    return -2LL;
  }
  if (v4)
  {
    int v11 = a4[2];
    int v12 = *a4;
    int v13 = a4[1];
  }

  else
  {
    int v18 = *(unsigned __int8 *)v9;
    if ((*v9 & 0x80000000) == 0)
    {
      if (v10) {
        *size_t v10 = v18;
      }
      return v18 != 0;
    }

    if ((v18 & 0xE0) == 0xC0)
    {
      int v11 = 128;
      int v13 = 2;
      int v19 = 31;
    }

    else
    {
      if ((v18 & 0xF0) != 0xE0) {
        goto LABEL_30;
      }
      int v11 = 2048;
      int v13 = 3;
      int v19 = 15;
    }

    ++v9;
    int v12 = v19 & v18;
  }

  unint64_t v14 = v4 == 0;
  unint64_t v15 = v13;
  uint64_t v16 = v15 - v14;
  if (v15 > v14)
  {
    while (1)
    {
      char v17 = *v9;
      if ((*v9 & 0xC0) != 0x80) {
        goto LABEL_30;
      }
      ++v9;
      int v12 = v17 & 0x3F | (v12 << 6);
      if (!--v16)
      {
        LODWORD(v14) = v15;
        break;
      }
    }
  }

  if (v13 > (int)v14)
  {
    a4[1] = v13 - v14;
    a4[2] = v11;
    uint64_t result = -2LL;
    *a4 = v12;
    return result;
  }

  if (v12 < v11)
  {
LABEL_30:
    size_t v5 = __error();
    int v6 = 92;
    goto LABEL_3;
  }

  if (v10) {
    *size_t v10 = v12;
  }
  a4[1] = 0;
  if (v12) {
    return v13;
  }
  else {
    return 0;
  }
}

uint64_t _UTF2_wcrtomb(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 4))
  {
    uint64_t v3 = __error();
    int v4 = 22;
LABEL_3:
    *uint64_t v3 = v4;
    return -1LL;
  }

  if (!a1) {
    return 1LL;
  }
  if (a2 <= 0x7F)
  {
    *a1 = a2;
    return 1LL;
  }

  if (a2 >= 0x800)
  {
    if (a2 >= 0x10000)
    {
      uint64_t v3 = __error();
      int v4 = 92;
      goto LABEL_3;
    }

    char v6 = -32;
    uint64_t v5 = 3LL;
  }

  else
  {
    char v6 = -64;
    uint64_t v5 = 2LL;
  }

  uint64_t v7 = v5 - 1;
  do
  {
    a1[v7] = a2 & 0x3F | 0x80;
    a2 = (int)a2 >> 6;
    unint64_t v8 = v7-- + 1;
  }

  while (v8 > 2);
  *a1 = a2 | v6;
  return v5;
}

BOOL _UTF2_mbsinit(uint64_t a1)
{
  return !a1 || *(_DWORD *)(a1 + 4) == 0;
}

uint64_t _UTF2_mbsnrtowcs(int *a1, const char **a2, unint64_t a3, uint64_t a4, int *a5)
{
  unint64_t v6 = a3;
  uint64_t v7 = *a2;
  if (a1)
  {
    uint64_t v8 = a4;
    size_t v10 = a1;
    if (!a3 || !a4)
    {
      if (!a4)
      {
LABEL_20:
        *a2 = v7;
        return v8;
      }

      goto LABEL_12;
    }

    if (a5[1] < 1 || *v7 < 1)
    {
LABEL_12:
      uint64_t v11 = 0LL;
      uint64_t v12 = -a4;
      while (1)
      {
        if (v6 && *v7 >= 1)
        {
          *size_t v10 = *(unsigned __int8 *)v7;
          uint64_t v13 = 1LL;
        }

        else
        {
          uint64_t v13 = _UTF2_mbrtowc(v10, v7, v6, a5);
          switch(v13)
          {
            case -2LL:
              *a2 = &v7[v6];
              return -v11;
            case 0LL:
              *a2 = 0LL;
              return -v11;
            case -1LL:
              *a2 = v7;
              return -1LL;
          }
        }

        v7 += v13;
        v6 -= v13;
        ++v10;
        if (v12 == --v11) {
          goto LABEL_20;
        }
      }
    }

uint64_t _UTF2_wcsnrtombs(_BYTE *a1, unsigned int **a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (*(_DWORD *)(a5 + 4))
  {
    *__error() = 22;
    return -1LL;
  }

  else
  {
    size_t v9 = a1;
    size_t v10 = *a2;
    uint64_t v5 = 0LL;
    if (a1)
    {
      unint64_t v11 = a4;
      if (a4)
      {
        while (a3)
        {
          unsigned int v12 = *v10;
          if (*v10 > 0x7F)
          {
            if (v11 < 4)
            {
              unint64_t v14 = _UTF2_wcrtomb(v19, v12, a5);
              if (v14 == -1LL)
              {
LABEL_30:
                *a2 = v10;
                return -1LL;
              }

              uint64_t v13 = v14;
              if (v14 > v11) {
                break;
              }
              _platform_memmove();
            }

            else
            {
              uint64_t v13 = _UTF2_wcrtomb(v9, v12, a5);
              if (v13 == -1) {
                goto LABEL_30;
              }
            }
          }

          else
          {
            *size_t v9 = v12;
            uint64_t v13 = 1LL;
          }

          if (!*v10)
          {
            *a2 = 0LL;
            uint64_t v17 = v5 + v13;
            return v17 - 1;
          }

          ++v10;
          v9 += v13;
          v5 += v13;
          --a3;
          v11 -= v13;
          if (!v11) {
            break;
          }
        }
      }

      *a2 = v10;
    }

    else
    {
      while (a3)
      {
        unsigned int v15 = *v10;
        if (*v10 >= 0x80)
        {
          uint64_t v16 = _UTF2_wcrtomb(v19, v15, a5);
          if (v16 == -1) {
            return -1LL;
          }
          if (!*v10)
          {
LABEL_27:
            uint64_t v17 = v5 + v16;
            return v17 - 1;
          }
        }

        else
        {
          uint64_t v16 = 1LL;
          if (!v15) {
            goto LABEL_27;
          }
        }

        ++v10;
        v5 += v16;
        --a3;
      }
    }
  }

  return v5;
}

double __guard_setup(void *a1)
{
  uint64_t v1 = a1;
  if (a1 && *a1)
  {
    do
    {
      if (!_platform_strncmp())
      {
        if (_platform_strchr())
        {
          unint64_t v2 = 0LL;
          do
          {
            _platform_strlcpy();
            uint64_t v3 = (_BYTE *)_platform_strchr();
            if (v3) {
              *uint64_t v3 = 0;
            }
            __stack_chk_guard[v2] = strtoull(__str, 0LL, 0);
            if (!_platform_strchr()) {
              break;
            }
          }

          while (v2++ < 7);
        }

        _platform_strlen();
        _platform_bzero();
      }

      uint64_t v5 = v1[1];
      ++v1;
    }

    while (v5);
  }

  if (open_NOCANCEL() != -1)
  {
    read_NOCANCEL();
    close_NOCANCEL();
  }

  *(void *)&double result = 0xF5000000F5LL;
  LODWORD(__stack_chk_guard[0]) = 245;
  return result;
}

uint64_t a64l(const char *a1)
{
  if (a1)
  {
    char v1 = *a1;
    if (*a1)
    {
      uint64_t v2 = 0LL;
      int v3 = 0;
      int v4 = 0;
      do
      {
        int v5 = -46;
        if ((v1 & 0xFE) != 0x2E && (v1 - 48) >= 0xAu)
        {
          if ((v1 - 65) >= 0x1A)
          {
            int v5 = -59;
          }

          else
          {
            int v5 = -53;
          }
        }

        v4 |= (v5 + v1) << v3;
        v3 += 6;
        char v1 = a1[v2 + 1];
        if (v1) {
          BOOL v6 = v2 >= 5;
        }
        else {
          BOOL v6 = 1;
        }
        ++v2;
      }

      while (!v6);
      return v4;
    }

    else
    {
      return 0LL;
    }
  }

  else
  {
LABEL_16:
    *__error() = 22;
    return -1LL;
  }

void _Exit(int a1)
{
}

int abs(int result)
{
  if (result < 0) {
    return -result;
  }
  return result;
}

uint64_t __atexit_init()
{
  if (*(void *)(MEMORY[0x1895FF8E0] + 32LL) == -1LL) {
    uint64_t result = *(void *)(MEMORY[0x1895FF8E0] + 40LL);
  }
  else {
    uint64_t result = _os_alloc_once();
  }
  __atexit = result;
  return result;
}

int atexit(void (*a1)(void))
{
  LODWORD(v2) = 1;
  uint64_t v3 = 0LL;
  uint64_t v4 = 0LL;
  *((void *)&v2 + 1) = a1;
  return atexit_register(&v2);
}

uint64_t atexit_register(_OWORD *a1)
{
  char v1 = (_DWORD *)__atexit;
  if (!__atexit) {
    atexit_register_cold_1();
  }
  pthread_mutex_lock(&atexit_mutex);
  int v3 = v1[2];
  if (v3 >= 32)
  {
    uint64_t v4 = __atexit;
    while (1)
    {
      pthread_mutex_unlock(&atexit_mutex);
      int v5 = malloc(0x410uLL);
      if (!v5) {
        return 0xFFFFFFFFLL;
      }
      char v1 = v5;
      pthread_mutex_lock(&atexit_mutex);
      if (v4 == __atexit) {
        break;
      }
      pthread_mutex_unlock(&atexit_mutex);
      free(v1);
      pthread_mutex_lock(&atexit_mutex);
      uint64_t v4 = __atexit;
      int v3 = *(_DWORD *)(__atexit + 8);
      if (v3 <= 31)
      {
        char v1 = (_DWORD *)__atexit;
        goto LABEL_10;
      }
    }

    int v3 = 0;
    v1[2] = 0;
    *(void *)char v1 = v4;
    __atexit = (uint64_t)v1;
  }

int atexit_b(void *a1)
{
  LODWORD(v2) = 3;
  uint64_t v3 = 0LL;
  uint64_t v4 = 0LL;
  *((void *)&v2 + 1) = _Block_copy(a1);
  return atexit_register(&v2);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  LODWORD(v4) = 2;
  *((void *)&v4 + 1) = lpfunc;
  int v5 = obj;
  BOOL v6 = lpdso_handle;
  return atexit_register(&v4);
}

uint64_t __cxa_finalize_ranges(uint64_t a1, unsigned int a2)
{
  for (uint64_t i = __atexit; __atexit; uint64_t i = __atexit)
  {
    while (1)
    {
      uint64_t v5 = *(unsigned int *)(i + 8);
LABEL_32:
      uint64_t i = *(void *)i;
      if (!i) {
        return pthread_mutex_unlock(&atexit_mutex);
      }
    }

    while (1)
    {
      uint64_t v6 = (v5 - 1);
      uint64_t v7 = i + 32 * v6;
      int v10 = *(_DWORD *)(v7 + 16);
      __int128 v8 = (_DWORD *)(v7 + 16);
      int v9 = v10;
      if (v10)
      {
        if (!a2) {
          break;
        }
        switch(v9)
        {
          case 1:
            uint64_t v16 = 0LL;
            unint64_t v17 = *(void *)(i + 32 * v6 + 24);
            BOOL v13 = 1;
            int v18 = (void *)(a1 + 8);
            do
            {
              unint64_t v19 = *(v18 - 1);
              if (v19 <= v17 && *v18 + v19 > v17) {
                break;
              }
              BOOL v13 = ++v16 < (unint64_t)a2;
              v18 += 2;
            }

            while (a2 != v16);
            break;
          case 3:
            uint64_t v20 = 0LL;
            unint64_t v21 = *(void *)(*(void *)(i + 32 * v6 + 24) + 16LL);
            BOOL v13 = 1;
            __int32 v22 = (void *)(a1 + 8);
            do
            {
              unint64_t v23 = *(v22 - 1);
              if (v23 <= v21 && *v22 + v23 > v21) {
                break;
              }
              BOOL v13 = ++v20 < (unint64_t)a2;
              v22 += 2;
            }

            while (a2 != v20);
            break;
          case 2:
            uint64_t v11 = 0LL;
            unint64_t v12 = *(void *)(i + 32 * v6 + 40);
            BOOL v13 = 1;
            unint64_t v14 = (void *)(a1 + 8);
            do
            {
              unint64_t v15 = *(v14 - 1);
              if (v15 <= v12 && *v14 + v15 > v12) {
                break;
              }
              BOOL v13 = ++v11 < (unint64_t)a2;
              v14 += 2;
            }

            while (a2 != v11);
            break;
          default:
            goto LABEL_23;
        }

        if (v13) {
          break;
        }
      }

int __cxa_finalize(void *a1)
{
  if (!a1) {
    return __cxa_finalize_ranges(0LL, 0);
  }
  v2[0] = a1;
  v2[1] = 1LL;
  return __cxa_finalize_ranges((uint64_t)v2, 1u);
}

double atof(const char *a1)
{
  uint64_t v1 = __locale_key;
  __int128 v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = (_xlocale *)&__global_locale;
  }
  return strtod_l(a1, 0LL, v3);
}

double atof_l(const char *a1, locale_t a2)
{
  return strtod_l(a1, 0LL, a2);
}

int atoi(const char *a1)
{
  uint64_t v1 = __locale_key;
  __int128 v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = (_xlocale *)&__global_locale;
  }
  return strtol_l(a1, 0LL, 10, v3);
}

int atoi_l(const char *a1, locale_t a2)
{
  return strtol_l(a1, 0LL, 10, a2);
}

uint64_t atol(const char *a1)
{
  uint64_t v1 = __locale_key;
  __int128 v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = (_xlocale *)&__global_locale;
  }
  return strtol_l(a1, 0LL, 10, v3);
}

uint64_t atol_l(const char *a1, locale_t a2)
{
  return strtol_l(a1, 0LL, 10, a2);
}

uint64_t atoll(const char *a1)
{
  uint64_t v1 = __locale_key;
  __int128 v2 = *(_xlocale **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8 * v1);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = (_xlocale *)&__global_locale;
  }
  return strtoll_l(a1, 0LL, 10, v3);
}

uint64_t atoll_l(const char *a1, locale_t a2)
{
  return strtoll_l(a1, 0LL, 10, a2);
}

void *__cdecl bsearch( const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  if (!__nel) {
    return 0LL;
  }
  size_t v7 = __nel;
  while (1)
  {
    int v10 = (char *)__base + (v7 >> 1) * __width;
    int v11 = ((uint64_t (*)(const void *, char *))__compar)(__key, v10);
    if (!v11) {
      break;
    }
    if (v11 > 0) {
      __base = &v10[__width];
    }
    unint64_t v12 = v7 - (v11 > 0);
    size_t v7 = v12 >> 1;
    if (v12 <= 1) {
      return 0LL;
    }
  }

  return v10;
}

void *__cdecl bsearch_b(const void *__key, const void *__base, size_t __nel, size_t __width, void *__compar)
{
  if (!__nel) {
    return 0LL;
  }
  size_t v7 = __nel;
  while (1)
  {
    int v10 = (char *)__base + (v7 >> 1) * __width;
    int v11 = (*((uint64_t (**)(void *, const void *, char *))__compar + 2))(__compar, __key, v10);
    if (!v11) {
      break;
    }
    if (v11 > 0) {
      __base = &v10[__width];
    }
    unint64_t v12 = v7 - (v11 > 0);
    size_t v7 = v12 >> 1;
    if (v12 <= 1) {
      return 0LL;
    }
  }

  return v10;
}

div_t div(int a1, int a2)
{
  if (a1 >= 0 && a1 % a2 < 0) {
    int v2 = a2;
  }
  else {
    int v2 = 0;
  }
  return (div_t)((a1 / a2 + (a1 >= 0 && a1 % a2 < 0)) | ((unint64_t)(a1 % a2 - v2) << 32));
}

void exit(int a1)
{
  if (__cleanup) {
    _cleanup();
  }
  __exit();
}

_BYTE *__findenv_locked(_BYTE *a1, _DWORD *a2, char *a3)
{
  uint64_t v3 = 0LL;
  if (a1 && a3)
  {
    int v4 = 1;
    for (uint64_t i = a1; *i && *i != 61; ++i)
      --v4;
    uint64_t v6 = *(_BYTE **)a3;
    if (*(void *)a3)
    {
      size_t v7 = a3;
      do
      {
        if (v4 == 1)
        {
LABEL_16:
          if (*v6 == 61)
          {
            uint64_t v3 = v6 + 1;
            *a2 = (unint64_t)(v7 - a3) >> 3;
            return v3;
          }
        }

        else
        {
          uint64_t v8 = (uint64_t)&v6[-v4 + 1];
          int v9 = v4 - 1;
          int v10 = a1;
          while (*v6 && *v6 == *v10)
          {
            ++v6;
            ++v10;
            if (__CFADD__(v9++, 1))
            {
              uint64_t v6 = (_BYTE *)v8;
              goto LABEL_16;
            }
          }
        }

        unint64_t v12 = (_BYTE *)*((void *)v7 + 1);
        v7 += 8;
        uint64_t v6 = v12;
      }

      while (v12);
    }

    return 0LL;
  }

  return v3;
}

uint64_t environ_lock_np()
{
  return os_unfair_lock_lock_with_options();
}

void environ_unlock_np()
{
}

void __environ_lock_fork_child()
{
  __environ_lock_obuint64_t j = 0;
}

_BYTE *_getenvp(_BYTE *a1, char **a2)
{
  int v4 = __findenv_locked(a1, &v6, *a2);
  os_unfair_lock_unlock((os_unfair_lock_t)&__environ_lock_obj);
  return v4;
}

char *__cdecl getenv(const char *a1)
{
  int v2 = (char **)_NSGetEnviron();
  uint64_t v3 = __findenv_locked(a1, &v5, *v2);
  os_unfair_lock_unlock((os_unfair_lock_t)&__environ_lock_obj);
  return v3;
}

int getopt(int a1, char *const a2[], const char *a3)
{
  if (!optreset)
  {
    int v9 = *getopt_place;
    if (*getopt_place)
    {
      size_t v7 = ++getopt_place;
      optopt = v9;
LABEL_12:
      if (v9 == 58) {
        goto LABEL_21;
      }
      goto LABEL_16;
    }
  }

  optreset = 0;
  if (optind < a1 && (int v6 = a2[optind], *v6 == 45))
  {
    size_t v7 = v6 + 2;
    getopt_place = v6 + 2;
    int v8 = v6[1];
    int v9 = (char)v8;
    optopt = (char)v8;
    if (v8)
    {
      if (v8 != 45) {
        goto LABEL_12;
      }
      if (*v7)
      {
        int v9 = 45;
        goto LABEL_16;
      }

      ++optind;
      getopt_place = &EMSG;
    }

    else
    {
      getopt_place = &EMSG;
      int v9 = 45;
      if (_platform_strchr())
      {
        optopt = 45;
        size_t v7 = &EMSG;
LABEL_16:
        uint64_t v10 = _platform_strchr();
        if (v10)
        {
          if (*(_BYTE *)(v10 + 1) == 58)
          {
            if (!*v7)
            {
              if (*(_BYTE *)(v10 + 2) == 58)
              {
                size_t v7 = 0LL;
              }

              else
              {
                int v11 = optind;
                int v12 = optind + 1;
                optind = v12;
                if (v12 >= a1)
                {
                  optind = v11 + 2;
                  optarg = 0LL;
                  getopt_place = &EMSG;
                  if (*a3 == 58) {
                    return 58;
                  }
                  if (opterr) {
                    fprintf(__stderrp, "%s: option requires an argument -- %c\n");
                  }
                  return 63;
                }

                size_t v7 = a2[v12];
              }
            }

            optarg = v7;
            getopt_place = &EMSG;
          }

          else
          {
            optarg = 0LL;
            if (*v7) {
              return v9;
            }
          }

          ++optind;
          return v9;
        }

int getopt_long(int a1, char *const *a2, const char *a3, const option *a4, int *a5)
{
  return getopt_internal(*(uint64_t *)&a1, (uint64_t)a2, (unsigned __int8 *)a3, a4, a5, 1u);
}

uint64_t getopt_internal(uint64_t a1, uint64_t a2, unsigned __int8 *a3, void *a4, int *a5, unsigned int a6)
{
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  int v8 = a3;
  uint64_t v11 = optind;
  int v12 = &optreset;
  if (optind)
  {
    int v13 = optreset;
    int v14 = getopt_internal_posixly_correct;
    if (getopt_internal_posixly_correct != -1 && optreset == 0)
    {
      int v13 = 0;
      goto LABEL_11;
    }
  }

  else
  {
    uint64_t v11 = 1LL;
    optreset = 1;
    optind = 1;
    int v13 = 1;
  }

  int v14 = getenv("POSIXLY_CORRECT") != 0LL;
  getopt_internal_posixly_correct = v14;
LABEL_11:
  int v16 = *v8;
  if (v16 == 45)
  {
    uint64_t v17 = a6 | 2;
LABEL_20:
    ++v8;
    goto LABEL_22;
  }

  if (v14) {
    BOOL v18 = 1;
  }
  else {
    BOOL v18 = v16 == 43;
  }
  uint64_t v17 = a6 & 0xFFFFFFFE;
  if (v18) {
    uint64_t v19 = v17;
  }
  else {
    uint64_t v19 = a6;
  }
  if (v16 == 43) {
    goto LABEL_20;
  }
  uint64_t v17 = v19;
LABEL_22:
  uint64_t v55 = a4;
  uint64_t v56 = v8;
  optarg = 0LL;
  unint64_t v20 = 0x18C52A000uLL;
  unint64_t v21 = 0x18C52A000uLL;
  if (v13)
  {
    int v22 = -1;
    nonopt_end = -1;
    nonopt_start = -1;
    uint64_t v23 = 0xFFFFFFFFLL;
  }

  else
  {
    uint64_t v23 = nonopt_start;
    int v22 = nonopt_end;
  }

  unint64_t v24 = 0x18C52A000uLL;
  int v25 = place;
  int v26 = &EMSG_0;
  if (!v13)
  {
LABEL_26:
    int v27 = *v25;
    if (!*v25) {
      goto LABEL_27;
    }
    goto LABEL_48;
  }

  while (1)
  {
LABEL_27:
    *int v12 = 0;
    if ((int)v11 >= (int)a1)
    {
      *(void *)(v24 + 2336) = v26;
      if (v22 == -1)
      {
        if ((_DWORD)v23 == -1)
        {
LABEL_58:
          uint64_t v42 = 0xFFFFFFFFLL;
          *(_DWORD *)(v21 + 1380) = -1;
          *(_DWORD *)(v20 + 1384) = -1;
          return v42;
        }
      }

      else
      {
        uint64_t v39 = a2;
        unint64_t v40 = v20;
        unint64_t v41 = v21;
        permute_args(v23, v22, v11, v39);
        unint64_t v21 = v41;
        unint64_t v20 = v40;
        LODWORD(v23) = v23 - v22 + optind;
      }

      optind = v23;
      goto LABEL_58;
    }

    __int128 v28 = *(char **)(a2 + 8LL * (int)v11);
    *(void *)(v24 + 2336) = v28;
    if (*v28 == 45)
    {
      int v27 = v28[1];
      if (v28[1]) {
        break;
      }
    }

    *(void *)(v24 + 2336) = v26;
    if ((v17 & 2) != 0)
    {
      optind = v11 + 1;
      optarg = v28;
      return 1LL;
    }

    if ((v17 & 1) == 0) {
      return 0xFFFFFFFFLL;
    }
    if ((_DWORD)v23 == -1)
    {
      int v29 = 0;
      *(_DWORD *)(v20 + 1384) = v11;
      uint64_t v23 = v11;
    }

    else if (v22 == -1)
    {
      int v29 = 0;
    }

    else
    {
      int v30 = v11;
      uint64_t v31 = a2;
      uint64_t v11 = v20;
      uint64_t v32 = v17;
      __int32 v33 = v12;
      unint64_t v34 = v24;
      uint64_t v35 = a2;
      uint64_t v36 = v26;
      uint64_t v37 = a1;
      unint64_t v38 = v21;
      permute_args(v23, v22, v30, v31);
      unint64_t v21 = v38;
      a1 = v37;
      int v26 = v36;
      a2 = v35;
      unint64_t v24 = v34;
      int v12 = v33;
      uint64_t v17 = v32;
      unint64_t v20 = v11;
      LODWORD(v11) = optind;
      uint64_t v23 = (v23 - v22 + optind);
      *(_DWORD *)(v20 + 1384) = v23;
      *(_DWORD *)(v21 + 1380) = -1;
      int v29 = *v12;
      int v22 = -1;
    }

    uint64_t v11 = (v11 + 1);
    optind = v11;
    int v25 = v26;
    if (!v29) {
      goto LABEL_26;
    }
  }

  int v25 = v28 + 1;
  if ((_DWORD)v23 != -1 && v22 == -1)
  {
    *(_DWORD *)(v21 + 1380) = v11;
    int v22 = v11;
  }

  *(void *)(v24 + 2336) = v25;
  if (v27 == 45)
  {
    if (v28[2])
    {
      int v27 = 45;
      goto LABEL_48;
    }

    optind = v11 + 1;
    *(void *)(v24 + 2336) = v26;
    if (v22 != -1)
    {
      uint64_t v44 = a2;
      unint64_t v45 = v20;
      unint64_t v46 = v21;
      permute_args(v23, v22, v11 + 1, v44);
      unint64_t v21 = v46;
      unint64_t v20 = v45;
      optind += v23 - v22;
    }

    goto LABEL_58;
  }

LABEL_88:
        if (opterr && *v56 != 58) {
          getopt_internal_cold_1();
        }
        optopt = v42;
        return 63LL;
      }

      uint64_t v50 = _platform_strchr();
      if (v50)
      {
        if (v55 && (_DWORD)v42 == 87 && *(_BYTE *)(v50 + 1) == 59)
        {
          if (!*v48)
          {
            uint64_t v51 = optind + 1LL;
            optind = v51;
            if ((int)v51 >= (int)a1)
            {
              *(void *)(v24 + 2336) = v26;
              if (opterr && *v56 != 58) {
                warnx("option requires an argument -- %c", 87LL);
              }
              optopt = 87;
              goto LABEL_106;
            }

            *(void *)(v24 + 2336) = *(void *)(a2 + 8 * v51);
          }

          dash_prefix = 2;
          uint64_t result = parse_long_options(a2, v56, v55, a5, 0, v17);
          *(void *)(v24 + 2336) = v26;
          return result;
        }

        goto LABEL_79;
      }

      if ((_DWORD)v42 == 45)
      {
        if (!*v48) {
          return 0xFFFFFFFFLL;
        }
        goto LABEL_88;
      }
    }

    if (!*v48) {
      ++optind;
    }
    goto LABEL_88;
  }

  if (v27 != 45)
  {
    BOOL v43 = _platform_strchr() != 0;
    goto LABEL_63;
  }

  *(void *)(v24 + 2336) = v25 + 1;
  if (v25[1])
  {
    BOOL v43 = 0;
    dash_prefix = 1;
    goto LABEL_63;
  }

LABEL_106:
  if (*v56 == 58) {
    return 58LL;
  }
  else {
    return 63LL;
  }
}

int getopt_long_only(int a1, char *const *a2, const char *a3, const option *a4, int *a5)
{
  return getopt_internal(*(uint64_t *)&a1, (uint64_t)a2, (unsigned __int8 *)a3, a4, a5, 5u);
}

uint64_t permute_args(uint64_t result, int a2, int a3, uint64_t a4)
{
  int v4 = (a2 - (int)result) % (a3 - a2);
  if (v4)
  {
    int v5 = a3 - a2;
    do
    {
      int v6 = v4;
      int v4 = v5 % v4;
      int v5 = v6;
    }

    while (v4);
  }

  else
  {
    int v6 = a3 - a2;
  }

  if (v6 >= 1)
  {
    uint64_t v7 = 0LL;
    int v8 = result - a2;
    uint64_t v9 = v6;
    int v10 = (a3 - (int)result) / v6;
    do
    {
      if (v10 >= 1)
      {
        uint64_t v11 = *(void *)(a4 + 8 * (v7 + a2));
        int v12 = v10;
        int v13 = v7 + a2;
        do
        {
          if (v13 >= a2) {
            int v14 = v8;
          }
          else {
            int v14 = a3 - a2;
          }
          v13 += v14;
          uint64_t result = *(void *)(a4 + 8LL * v13);
          *(void *)(a4 + 8LL * v13) = v11;
          *(void *)(a4 + 8 * (v7 + a2)) = result;
          uint64_t v11 = result;
          --v12;
        }

        while (v12);
      }

      ++v7;
    }

    while (v7 != v9);
  }

  return result;
}

uint64_t parse_long_options(uint64_t a1, _BYTE *a2, void *a3, int *a4, int a5, char a6)
{
  uint64_t v9 = place;
  else {
    int v10 = off_18965D4F0[dash_prefix];
  }
  int v11 = optind++;
  int v12 = optind;
  uint64_t v13 = _platform_strchr();
  int v38 = v12;
  if (v13)
  {
    uint64_t v14 = v13 - (void)v9;
    uint64_t v42 = (char *)(v13 + 1);
  }

  else
  {
    uint64_t v14 = _platform_strlen();
    uint64_t v42 = 0LL;
  }

  if (!*a3)
  {
LABEL_40:
    if (a5)
    {
      optind = v11;
      return 0xFFFFFFFFLL;
    }

    if (opterr && *a2 != 58) {
LABEL_45:
    }
    optopt = 0;
    return 63LL;
  }

  int v36 = v11;
  uint64_t v37 = v10;
  unint64_t v41 = a2;
  int v15 = 0;
  int v16 = 0;
  if (a5) {
    BOOL v17 = v14 == 1;
  }
  else {
    BOOL v17 = 0;
  }
  char v18 = v17;
  uint64_t v19 = a3 + 4;
  int v20 = -1;
  do
  {
    if (!_platform_strncmp())
    {
      if (_platform_strlen() == v14)
      {
        int v20 = v15;
        a2 = v41;
        uint64_t v23 = v37;
        goto LABEL_32;
      }

      if ((v18 & 1) == 0)
      {
        if (v20 == -1)
        {
          int v20 = v15;
        }

        else if ((a6 & 4) != 0 {
               || (unint64_t v21 = &a3[4 * v20], *((_DWORD *)v19 - 6) != *((_DWORD *)v21 + 2))
        }
               || *(v19 - 2) != v21[2]
               || *((_DWORD *)v19 - 2) != LODWORD(a3[4 * v20 + 3]))
        {
          int v16 = 1;
        }
      }
    }

    uint64_t v22 = *v19;
    v19 += 4;
    ++v15;
  }

  while (v22);
  if (v16)
  {
    if (opterr)
    {
      if (*v41 != 58) {
    }
      }

    goto LABEL_45;
  }

  a2 = v41;
  uint64_t v23 = v37;
  int v11 = v36;
  if (v20 == -1) {
    goto LABEL_40;
  }
LABEL_32:
  unint64_t v24 = &a3[4 * v20];
  int v27 = *((_DWORD *)v24 + 2);
  int v25 = (int *)(v24 + 1);
  int v26 = v27;
  if (v27) {
    BOOL v28 = 1;
  }
  else {
    BOOL v28 = v42 == 0LL;
  }
  if (!v28)
  {
    if (opterr && *a2 != 58) {
    int v30 = &a3[4 * v20];
    }
    if (v30[2]) {
      int v31 = 0;
    }
    else {
      int v31 = *((_DWORD *)v30 + 6);
    }
    optopt = v31;
    return 63LL;
  }

  if (v42)
  {
    optarg = v42;
  }

  else
  {
    if (v26 != 1) {
      goto LABEL_64;
    }
    optind = v36 + 2;
    optarg = *(char **)(a1 + 8LL * v38);
    int v26 = *v25;
  }

  if (v26 == 1 && !optarg)
  {
    if (opterr && *a2 != 58) {
    uint64_t v32 = &a3[4 * v20];
    }
    if (v32[2]) {
      int v33 = 0;
    }
    else {
      int v33 = *((_DWORD *)v32 + 6);
    }
    optopt = v33;
    --optind;
    if (*a2 == 58) {
      return 58LL;
    }
    else {
      return 63LL;
    }
  }

LABEL_64:
  if (a4) {
    *a4 = v20;
  }
  unint64_t v34 = &a3[4 * v20];
  uint64_t v35 = (_DWORD *)v34[2];
  uint64_t result = *((unsigned int *)v34 + 6);
  if (v35)
  {
    *uint64_t v35 = result;
    return 0LL;
  }

  return result;
}

int getsubopt(char **a1, char *const *a2, char **a3)
{
  *a3 = 0LL;
  suboptarg = 0LL;
  if (!a1) {
    goto LABEL_32;
  }
  uint64_t v3 = *a1;
  if (!*a1) {
    goto LABEL_32;
  }
  while (1)
  {
    unsigned int v4 = *v3;
    if (v4 <= 0x1F) {
      break;
    }
    if (v4 != 44 && v4 != 32) {
      goto LABEL_11;
    }
LABEL_8:
    ++v3;
  }

  if (v4 == 9) {
    goto LABEL_8;
  }
  if (!*v3)
  {
    *a1 = v3;
    goto LABEL_32;
  }