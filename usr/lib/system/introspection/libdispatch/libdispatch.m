void _os_eventlink_dispose(uint64_t a1)
{
  mach_port_name_t v2;
  mach_port_name_t v3;
  if ((*(_BYTE *)(a1 + 24) & 1) != 0) {
    free(*(void **)(a1 + 16));
  }
  v2 = *(_DWORD *)(a1 + 32);
  if (v2 + 1 >= 2) {
    mach_port_deallocate(mach_task_self_, v2);
  }
  v3 = *(_DWORD *)(a1 + 36);
  if (v3 + 1 >= 2) {
    mach_port_deallocate(mach_task_self_, v3);
  }
}

_DWORD *os_eventlink_create(const char *a1)
{
  v2 = _os_object_alloc(&OBJC_CLASS___OS_os_eventlink, 48LL);
  if (v2)
  {
    if (a1)
    {
      v3 = _dispatch_strdup_if_mutable(a1);
      if (v3 != a1) {
        *((void *)v2 + 3) |= 1uLL;
      }
      *((void *)v2 + 2) = v3;
    }
  }

  else
  {
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 12;
  }

  return v2;
}

uint64_t os_eventlink_activate(uint64_t a1)
{
  v1 = (unint64_t *)(a1 + 32);
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    v4 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    uint64_t result = 89LL;
LABEL_28:
    _DWORD *v4 = result;
    return result;
  }

  __int128 v10 = 0u;
  *(_OWORD *)name = 0u;
  __int128 v9 = 0u;
  int v2 = mach_eventlink_create(mach_task_self_, 1LL, name);
  uint64_t result = 0xFFFFFFFFLL;
  if (v2 > 13)
  {
    if (v2 > 36)
    {
      if (v2 != 37)
      {
        if (v2 != 49) {
          return result;
        }
        uint64_t result = 60LL;
        goto LABEL_27;
      }
    }

    else
    {
      if (v2 == 14)
      {
        uint64_t result = 53LL;
        goto LABEL_27;
      }

      if (v2 != 15) {
        return result;
      }
    }

    uint64_t result = 89LL;
LABEL_27:
    v4 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    goto LABEL_28;
  }

  if (v2)
  {
    if (v2 == 4)
    {
      uint64_t result = 22LL;
    }

    else
    {
      if (v2 != 13) {
        return result;
      }
      uint64_t result = 37LL;
    }

    goto LABEL_27;
  }

  unint64_t v5 = *(void *)name;
  while (!__ldxr(v1))
  {
    if (!__stxr(v5, v1))
    {
      char v7 = 1;
      goto LABEL_25;
    }
  }

  char v7 = 0;
  __clrex();
LABEL_25:
  if ((v7 & 1) != 0)
  {
    uint64_t result = 0LL;
    goto LABEL_27;
  }

  if ((v5 - 1) > 0xFFFFFFFD)
  {
    unint64_t v8 = HIDWORD(v5);
  }

  else
  {
    mach_port_deallocate(mach_task_self_, v5);
    LODWORD(v8) = name[1];
  }

  return 22LL;
}

uint64_t os_eventlink_extract_remote_port(uint64_t a1, unsigned int *a2)
{
  if (!*(_DWORD *)(a1 + 32))
  {
LABEL_9:
    unint64_t v5 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    uint64_t result = 22LL;
    goto LABEL_10;
  }

  if ((*(_BYTE *)(a1 + 24) & 2) == 0)
  {
    int v2 = (unsigned int *)(a1 + 36);
    do
      unsigned int v3 = __ldxr(v2);
    while (__stxr(0, v2));
    if (v3 - 1 < 0xFFFFFFFE)
    {
      uint64_t result = 0LL;
      *a2 = v3;
      return result;
    }

    goto LABEL_9;
  }

  unint64_t v5 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  uint64_t result = 89LL;
LABEL_10:
  *unint64_t v5 = result;
  return result;
}

_DWORD *os_eventlink_create_with_port(const char *a1, mach_port_name_t a2)
{
  v4 = _os_object_alloc(&OBJC_CLASS___OS_os_eventlink, 48LL);
  if (v4)
  {
    if (a1)
    {
      unint64_t v5 = _dispatch_strdup_if_mutable(a1);
      if (v5 != a1) {
        *((void *)v4 + 3) |= 1uLL;
      }
      *((void *)v4 + 2) = v5;
    }

    if (mach_port_mod_refs(mach_task_self_, a2, 0, 1)) {
      os_eventlink_create_with_port_cold_1();
    }
    if (v4[8]) {
      os_eventlink_create_with_port_cold_1();
    }
    v4[8] = a2;
  }

  else
  {
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 12;
  }

  return v4;
}

_DWORD *os_eventlink_create_remote_with_eventlink(const char *a1, uint64_t a2)
{
  int v3 = os_eventlink_extract_remote_port(a2, &v7);
  if (v3)
  {
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = v3;
    return 0LL;
  }

  else
  {
    mach_port_name_t v5 = v7;
    v6 = os_eventlink_create_with_port(a1, v7);
    mach_port_mod_refs(mach_task_self_, v5, 0, -1);
    return v6;
  }
}

uint64_t os_eventlink_associate(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)(a1 + 32))
  {
    uint64_t result = 22LL;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_25:
    **(_DWORD **)(StatusReg + 8) = result;
    return result;
  }

  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    uint64_t result = 89LL;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_25;
  }

  if (a2 != 1) {
    _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  }
  int v4 = mach_eventlink_associate();
  uint64_t result = 0xFFFFFFFFLL;
  if (v4 <= 13)
  {
    if (v4)
    {
      if (v4 == 4)
      {
        uint64_t result = 22LL;
      }

      else
      {
        if (v4 != 13) {
          return result;
        }
        uint64_t result = 37LL;
      }
    }

    else
    {
      uint64_t result = 0LL;
    }

    goto LABEL_24;
  }

  if (v4 > 36)
  {
    if (v4 != 37)
    {
      if (v4 != 49) {
        return result;
      }
      uint64_t result = 60LL;
      goto LABEL_24;
    }

    goto LABEL_20;
  }

  if (v4 == 14)
  {
    uint64_t result = 53LL;
    goto LABEL_24;
  }

  if (v4 == 15)
  {
LABEL_20:
    uint64_t result = 89LL;
LABEL_24:
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_25;
  }

  return result;
}

uint64_t os_eventlink_disassociate(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 32))
  {
    if ((*(_BYTE *)(a1 + 24) & 2) != 0) {
      return 0LL;
    }
    int v1 = mach_eventlink_disassociate();
    int v2 = v1;
    if (v1 <= 13)
    {
      switch(v1)
      {
        case 0:
          uint64_t result = 0LL;
          goto LABEL_20;
        case 4:
          uint64_t result = 22LL;
          goto LABEL_20;
        case 13:
          uint64_t result = 37LL;
          goto LABEL_20;
      }
    }

    else if (v1 > 36)
    {
      uint64_t result = 0LL;
      if (v2 == 37) {
        return result;
      }
      if (v2 == 49)
      {
        uint64_t result = 60LL;
        goto LABEL_20;
      }
    }

    else
    {
      if (v1 == 14)
      {
        uint64_t result = 53LL;
        goto LABEL_20;
      }

      if (v1 == 15)
      {
        uint64_t result = 89LL;
LABEL_20:
        int v4 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        goto LABEL_21;
      }
    }

    return 0xFFFFFFFFLL;
  }

  int v4 = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  uint64_t result = 22LL;
LABEL_21:
  _DWORD *v4 = result;
  return result;
}

uint64_t os_eventlink_wait_until(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2 != 32) {
    a3 = 0LL;
  }
  uint64_t v8 = mach_absolute_time() + a3;
  return os_eventlink_wait_until_internal(a1, a2, v8, a4);
}

uint64_t os_eventlink_wait_until_internal(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2 != 32) {
    os_eventlink_create_with_port_cold_1();
  }
  if (!*(_DWORD *)(a1 + 32))
  {
    uint64_t result = 22LL;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_11;
  }

  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    uint64_t result = 89LL;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_11;
  }

  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = mach_eventlink_wait_until();
  int v8 = v7;
  if (a4 && !v7)
  {
    *a4 = *(void *)(a1 + 40) - v6;
LABEL_7:
    uint64_t result = 0LL;
LABEL_8:
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_11:
    **(_DWORD **)(StatusReg + 8) = result;
    return result;
  }

  uint64_t result = 0xFFFFFFFFLL;
  if (v8 <= 13)
  {
    switch(v8)
    {
      case 0:
        goto LABEL_7;
      case 4:
        uint64_t result = 22LL;
        goto LABEL_8;
      case 13:
        uint64_t result = 37LL;
        goto LABEL_8;
    }
  }

  else if (v8 > 36)
  {
    if (v8 == 37)
    {
LABEL_26:
      uint64_t result = 89LL;
      goto LABEL_8;
    }

    if (v8 == 49)
    {
      uint64_t result = 60LL;
      goto LABEL_8;
    }
  }

  else
  {
    if (v8 == 14)
    {
      uint64_t result = 53LL;
      goto LABEL_8;
    }

    if (v8 == 15)
    {
      if ((*(_BYTE *)(a1 + 24) & 2) == 0) {
        os_eventlink_create_with_port_cold_1();
      }
      goto LABEL_26;
    }
  }

  return result;
}

uint64_t os_eventlink_wait(uint64_t a1, void *a2)
{
  return os_eventlink_wait_until_internal(a1, 32, 0LL, a2);
}

uint64_t os_eventlink_signal(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 32))
  {
    uint64_t result = 22LL;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_22:
    **(_DWORD **)(StatusReg + 8) = result;
    return result;
  }

  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    uint64_t result = 89LL;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_22;
  }

  int v1 = mach_eventlink_signal();
  uint64_t result = 0xFFFFFFFFLL;
  if (v1 <= 13)
  {
    if (v1)
    {
      if (v1 == 4)
      {
        uint64_t result = 22LL;
      }

      else
      {
        if (v1 != 13) {
          return result;
        }
        uint64_t result = 37LL;
      }
    }

    else
    {
      uint64_t result = 0LL;
    }

    goto LABEL_21;
  }

  if (v1 > 36)
  {
    if (v1 != 37)
    {
      if (v1 != 49) {
        return result;
      }
      uint64_t result = 60LL;
      goto LABEL_21;
    }

    goto LABEL_17;
  }

  if (v1 == 14)
  {
    uint64_t result = 53LL;
    goto LABEL_21;
  }

  if (v1 == 15)
  {
LABEL_17:
    uint64_t result = 89LL;
LABEL_21:
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_22;
  }

  return result;
}

uint64_t os_eventlink_signal_and_wait(uint64_t a1, void *a2)
{
  return os_eventlink_signal_and_wait_until_internal(a1, 32, 0LL, a2);
}

uint64_t os_eventlink_signal_and_wait_until_internal(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2 != 32) {
    os_eventlink_create_with_port_cold_1();
  }
  if (!*(_DWORD *)(a1 + 32))
  {
    uint64_t result = 22LL;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_11;
  }

  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    uint64_t result = 89LL;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_11;
  }

  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = mach_eventlink_signal_wait_until();
  int v8 = v7;
  if (a4 && !v7)
  {
    *a4 = *(void *)(a1 + 40) - v6;
LABEL_7:
    uint64_t result = 0LL;
LABEL_8:
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_11:
    **(_DWORD **)(StatusReg + 8) = result;
    return result;
  }

  uint64_t result = 0xFFFFFFFFLL;
  if (v8 <= 13)
  {
    switch(v8)
    {
      case 0:
        goto LABEL_7;
      case 4:
        uint64_t result = 22LL;
        goto LABEL_8;
      case 13:
        uint64_t result = 37LL;
        goto LABEL_8;
    }
  }

  else if (v8 > 36)
  {
    if (v8 == 37)
    {
LABEL_26:
      uint64_t result = 89LL;
      goto LABEL_8;
    }

    if (v8 == 49)
    {
      uint64_t result = 60LL;
      goto LABEL_8;
    }
  }

  else
  {
    if (v8 == 14)
    {
      uint64_t result = 53LL;
      goto LABEL_8;
    }

    if (v8 == 15)
    {
      if ((*(_BYTE *)(a1 + 24) & 2) == 0) {
        os_eventlink_create_with_port_cold_1();
      }
      goto LABEL_26;
    }
  }

  return result;
}

uint64_t os_eventlink_signal_and_wait_until(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2 != 32) {
    a3 = 0LL;
  }
  uint64_t v8 = mach_absolute_time() + a3;
  return os_eventlink_signal_and_wait_until_internal(a1, a2, v8, a4);
}

uint64_t os_eventlink_cancel(uint64_t result)
{
  int v1 = (unint64_t *)(result + 24);
  if ((*(_BYTE *)(result + 24) & 2) == 0)
  {
    do
      unint64_t v2 = __ldxr(v1);
    while (__stxr(v2 | 2, v1));
    uint64_t v3 = *(unsigned int *)(result + 32);
    if ((v3 - 1) <= 0xFFFFFFFD)
    {
      if (mach_port_mod_refs(mach_task_self_, v3, 0, 1)) {
        os_eventlink_create_with_port_cold_1();
      }
      return mach_eventlink_destroy(v3);
    }
  }

  return result;
}

uint64_t OUTLINED_FUNCTION_0()
{
  return _os_assert_log(0LL);
}

void _os_workgroup_xref_dispose(uint64_t a1)
{
  int v1 = *(void (***)(void))(a1 + 48);
  if (v1)
  {
    v1[1](*v1);
    free(v1);
  }

uint64_t _os_workgroup_interval_xref_dispose(uint64_t result)
{
  if ((*(void *)(result + 24) & 8) != 0) {
    _os_workgroup_interval_xref_dispose_cold_1();
  }
  return result;
}

void _os_workgroup_dispose(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  mach_port_name_t v3 = *(_DWORD *)(a1 + 40);
  if (!v3) {
    goto LABEL_6;
  }
  if (mach_port_mod_refs(mach_task_self_, v3, 0, -1))
  {
    _os_assumes_log(0LL);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
  }

  else if ((v2 & 1) == 0)
  {
    goto LABEL_6;
  }

LABEL_6:
  if ((v2 & 4) != 0) {
    free(*(void **)(a1 + 16));
  }
}

  if ((*a3)[1].isa == (__objc2_class *)((char *)&off_50310 + 1))
  {
    if (v12)
    {
      if (!(_BYTE)result)
      {
LABEL_29:
        LODWORD(v15) = (*((_DWORD *)a3 + 21) >> 8) & 0xF;
        goto LABEL_30;
      }
    }

    else
    {
      else {
        v12 = 2;
      }
      if (!(_BYTE)result) {
        goto LABEL_29;
      }
    }

    *(void *)(a1 + 48) = v9;
    __int128 v10 = (unsigned int *)v8[3];
    v8[3] = -1LL;
    if (v10 != (unsigned int *)-1LL && (unsigned int *)((char *)v10 + 1) != 0LL)
    {
      v12 = v10;
      if (v10) {
        v12 = (unsigned int *)v10[8];
      }
      if (MEMORY[0xFFFFFC100]) {
        kdebug_trace(771817480LL, v12, v8, 0LL, 0LL);
      }
    }

    v13 = v8[1];
    if (v13 == -1)
    {
      v16 = 0LL;
    }

    else
    {
      v14 = StatusReg[25];
      v15 = ((v14 >> 8) & 0xF) != 0 ? 256LL << ((BYTE1(v14) & 0xFu) - 1) : 0LL;
      v16 = v15 & 0xFFFFFFFFFFFFFF00LL | StatusReg[25];
      if ((v13 & 0xFFFFFF) != 0)
      {
        if ((v13 & 0xFFFFFFuLL) >= (v15 & 0xFFFFFF00)
          && ((v14 & 0x44000000) != 0 || (v8[1] & 0x10000000) != 0))
        {
          v16 = v13 & 0xFFFFFF;
        }
      }

      else if ((unsigned __int16)v14 >> 12)
      {
        v16 = (256LL << (((unsigned __int16)v14 >> 12) - 1)) | 0xFF;
      }
    }

    v18 = v16 & 0xFFFFFFFF02FFFFFFLL;
    v19 = StatusReg[4];
    if ((v19 & 0x1000000) != 0)
    {
      if (v18) {
        goto LABEL_65;
      }
      v18 = v19 & 0xFFFFFFFFFEFFFFFFLL;
    }

    else if (v18 == (v19 & 0xFFFFFFFF77FFFFFFLL))
    {
      goto LABEL_29;
    }

    if (v18) {
      goto LABEL_65;
    }
LABEL_29:
    if ((unsigned int *)StatusReg[28] != v10)
    {
      v18 = 0LL;
LABEL_65:
      _dispatch_set_priority_and_voucher_slow(v18, v10, 6);
      goto LABEL_33;
    }

    if (v10) {
      os_release(v10);
    }
LABEL_33:
    if (MEMORY[0xFFFFFC100]) {
      _dispatch_trace_item_pop_internal((_opaque_pthread_t *)v3, v8);
    }
    _dispatch_introspection_queue_item_dequeue((dispatch_queue_s *)v3, (dispatch_object_s *)v8);
    v20 = StatusReg[22];
    if (v20) {
      v21 = *(_DWORD *)(v20 + 8) + 1;
    }
    else {
      v21 = 1;
    }
    v22 = (uint64_t)v8;
    if (v21 <= _dispatch_continuation_cache_limit)
    {
      v22 = 0LL;
      v8[2] = v20;
      *((_DWORD *)v8 + 2) = v21;
      StatusReg[22] = v8;
    }

    if ((*(_BYTE *)(a1 + 35) & 1) != 0)
    {
      v24 = v6;
      v25 = objc_autoreleasePoolPush();
      v23 = a3(a2, v8[5], &v42);
      v26 = v25;
      uint64_t v6 = v24;
      objc_autoreleasePoolPop(v26);
    }

    else
    {
      v23 = a3(a2, v8[5], &v42);
    }

    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace(772079660LL, v8, 0LL, 0LL, 0LL);
    }
    _dispatch_introspection_queue_item_complete((dispatch_object_s *)v8);
    if (!v22)
    {
      if (!v23) {
        break;
      }
      continue;
    }

    _dispatch_continuation_free_to_cache_limit(v22);
    if (!v23) {
      break;
    }
  }

  while ((_dispatch_channel_invoke_checks(v3, a1, v4) & 1) != 0);
  v29 = v42;
  if (v42)
  {
    v30 = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v31 = (void *)v30[22];
    if (v31)
    {
      v30[22] = v31[2];
    }

    else
    {
      v31 = _dispatch_continuation_alloc_from_heap();
      v29 = v42;
    }

    *v31 = 1284LL;
    v31[4] = 0LL;
    v31[5] = v29;
    if ((v30[4] & 0xFFFFFFuLL) >= 0x10FF) {
      v32 = 4351LL;
    }
    else {
      v32 = v30[4] & 0xFFFFFFLL;
    }
    v33 = (unsigned int *)v30[28];
    if (v33) {
      os_retain(v33);
    }
    v31[3] = v33;
    if (v33) {
      v33 = (unsigned int *)v33[8];
    }
    if (MEMORY[0xFFFFFC100])
    {
      kdebug_trace(771817476LL, v33, v31, 0LL, 0LL);
      if (!v32) {
        goto LABEL_98;
      }
LABEL_82:
      v34 = (*(_DWORD *)(v3 + 84) >> 30) & 1;
      if ((*(_DWORD *)(v3 + 84) & 0xFFF) == 0) {
        v34 = 1;
      }
      if (v34) {
        v35 = v32;
      }
      else {
        v35 = 0LL;
      }
    }

    else
    {
LABEL_81:
      if (v32) {
        goto LABEL_82;
      }
LABEL_98:
      v35 = 0LL;
    }

    v31[1] = v35;
    v36 = *(void *)(a1 + 48);
    v31[2] = v36;
    if (!v36)
    {
      while (!__ldxr(v39))
      {
      }

      __clrex();
      v38 = *v6;
      if (!*v6) {
        v38 = _dispatch_wait_for_enqueuer(v6, (uint64_t)v39);
      }
      v31[2] = v38;
    }

  if (v2[2] != 0x7FFFFFFF)
  {
    mach_port_name_t v5 = v2 + 2;
    do
      uint64_t v6 = __ldxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (v6 <= 1)
    {
      if (v6 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      _os_object_dispose(v2, (const char *)v2);
    }
  }

  if (!(_BYTE)v6) {
    return _dispatch_introspection_continuation_get_info(result, v3, a3);
  }
  if (v6 == 531 || v6 == 17LL)
  {
    *(void *)a3 = 257LL;
    __int128 v9 = *((_DWORD *)v3 + 2);
    __int128 v10 = v3[7];
    v11 = (v10 & 0x4000000001LL) != 0;
    v12 = v3[3];
    v14 = v3[8];
    v13 = v3[9];
    v15 = *((unsigned __int16 *)v3 + 40);
    uint64_t result = (_opaque_pthread_t *)*((unsigned int *)v3 + 28);
    v16 = (_DWORD)result + (v10 >> 58);
    if (v9 == 0x7FFFFFFF) {
      v11 = 0;
    }
    if (((v10 >> 54) & (v9 != 0x7FFFFFFF)) != 0) {
      v17 = 2;
    }
    else {
      v17 = 0;
    }
    if (v3[13] == -1)
    {
      v18 = 4;
    }

    else if (v3[13])
    {
      v18 = 0;
    }

    else
    {
      v18 = 4 * (v3[6] != 0);
    }

    v25 = *(void *)(*v3 + 40) == 394769LL;
    *(void *)(a3 + 8) = v3;
    *(void *)(a3 + 16) = v12;
    *(void *)(a3 + 24) = v13;
    *(void *)(a3 + 32) = v14;
    *(_DWORD *)(a3 + 40) = v15;
    *(_DWORD *)(a3 + 44) = v16;
    *(_BYTE *)(a3 + 48) = v11 | (8 * (v9 == 0x7FFFFFFF)) | v17 | v18 | (16 * v25);
    goto LABEL_31;
  }

  if (v6 == 18LL)
  {
    *(void *)a3 = 257LL;
    *(void *)(a3 + 8) = v3;
    v19 = v3[7];
    v21 = v3[8];
    v20 = v3[9];
    *(void *)(a3 + 16) = v3[3];
    *(void *)(a3 + 24) = v20;
    *(void *)(a3 + 32) = v21;
    *(void *)(a3 + 40) = 1LL;
    *(_BYTE *)(a3 + 48) = (v19 >> 53) & 2 | ((v19 & 0x4000000001LL) != 0);
LABEL_31:
    *(_DWORD *)(a3 + 49) = *(_DWORD *)v39;
    *(_DWORD *)(a3 + 52) = *(_DWORD *)&v39[3];
    return result;
  }

  if (v6 == 787)
  {
    *(void *)a3 = 66LL;
    *(void *)(a3 + 8) = v3;
    v26 = v3[11];
    v27 = v3[7];
    v28 = *(char *)(v26 + 28);
    v29 = *(unsigned int *)(v26 + 24);
    v30 = *((_DWORD *)v3 + 28) + (v27 >> 58);
    LODWORD(v27) = (*(unsigned __int8 *)(v26 + 29) >> 5) & 2 | ((v27 & 0x4000000001LL) != 0) | *((_BYTE *)v3 + 116) & 0x10;
    *(void *)(a3 + 16) = v3[3];
    *(void *)(a3 + 24) = v28;
    *(void *)(a3 + 32) = v29;
    *(int8x16_t *)(a3 + 40) = vextq_s8(*(int8x16_t *)(v26 + 40), *(int8x16_t *)(v26 + 40), 8uLL);
    *(_DWORD *)(a3 + 56) = v30;
    *(_BYTE *)(a3 + 60) = v27;
  }

  else
  {
    if (v6 != 275)
    {
      *(void *)a3 = 256LL;
      v31 = v3[3];
      uint64_t result = (_opaque_pthread_t *)object_getClassName(v3);
      *(void *)(a3 + 8) = v3;
      *(void *)(a3 + 16) = v31;
      *(void *)(a3 + 24) = v5;
      *(void *)(a3 + 32) = (char *)&result->__cleanup_stack + 4;
      return result;
    }

    *(void *)a3 = 66LL;
    v22 = v3[11];
    v23 = *(int8x16_t **)(v22 + 40);
    if (v23)
    {
      v24 = v23[2];
      LODWORD(v23) = (v23->u8[0] >> 3) & 2;
    }

    else
    {
      v24 = 0uLL;
    }

    v32 = v3[7];
    v33 = v3[3];
    v34 = *(char *)(v22 + 28);
    v35 = *(unsigned int *)(v22 + 24);
    v36 = *((_DWORD *)v3 + 28) + (v32 >> 58);
    v37 = *(_BYTE *)(v22 + 29);
    if ((v37 & 2) != 0) {
      v38 = (*(unsigned __int8 *)(v22 + 30) >> 3) & 8;
    }
    else {
      LOBYTE(v38) = 0;
    }
    *(void *)(a3 + 8) = v3;
    *(void *)(a3 + 16) = v33;
    *(void *)(a3 + 24) = v34;
    *(void *)(a3 + 32) = v35;
    *(int8x16_t *)(a3 + 40) = vextq_s8(v24, v24, 8uLL);
    *(_DWORD *)(a3 + 56) = v36;
    *(_BYTE *)(a3 + 60) = v23 & 0xFB | ((v32 & 0x4000000001LL) != 0) | (4 * ((v37 & 2) != 0)) | v38;
  }

  *(_WORD *)(a3 + 61) = *(_WORD *)v39;
  *(_BYTE *)(a3 + 63) = v39[2];
  return result;
}

uint64_t _os_workgroup_debug(uint64_t a1, char *__str, size_t __size)
{
  return snprintf( __str,  __size,  "wg[%p] = {xref = %d, ref = %d, name = %s}",  (const void *)a1,  *(_DWORD *)(a1 + 12),  *(_DWORD *)(a1 + 8),  *(const char **)(a1 + 16));
}

uint64_t _os_workgroup_interval_dispose(uint64_t a1)
{
  return work_interval_instance_free(*(void *)(a1 + 72));
}

uint64_t _os_workgroup_tsd_cleanup(uint64_t result)
{
  if (result) {
    _os_workgroup_tsd_cleanup_cold_1(v1, result);
  }
  return result;
}

void _os_workgroup_join_token_tsd_cleanup(void *a1, const char *a2)
{
  if (a1)
  {
    if (a1[1]) {
      os_eventlink_create_with_port_cold_1();
    }
    _os_workgroup_leave_update_wg(a1[2], a2);
    free(a1);
  }

void *_os_workgroup_leave_update_wg(uint64_t a1, const char *a2)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (*(void *)(StatusReg + 928) != a1) {
    os_eventlink_create_with_port_cold_1();
  }
  mach_port_name_t v3 = (unsigned int *)(a1 + 60);
  do
    unsigned int v4 = __ldxr(v3);
  while (__stxr(v4 - 1, v3));
  if (!v4) {
    _os_workgroup_leave_update_wg_cold_1();
  }
  uint64_t result = *(void **)(StatusReg + 928);
  *(void *)(StatusReg + 928) = 0LL;
  if (result) {
    return _os_object_release_internal(result, a2);
  }
  return result;
}

uint64_t _workgroup_init()
{
  return pthread_install_workgroup_functions_np(&_os_workgroup_pthread_functions);
}

uint64_t _os_workgroup_get_backing_workinterval(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 40);
  }
  return result;
}

uint64_t os_workgroup_interval_data_set_flags(_DWORD *a1, unsigned int a2)
{
  if (!a1) {
    return 22LL;
  }
  uint64_t result = 22LL;
  if (a2 <= 1 && *a1 == 1386695757)
  {
    uint64_t result = 0LL;
    a1[1] = a2;
  }

  return result;
}

uint64_t os_workgroup_interval_data_set_telemetry(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (a2 == 1 && a4 == 40)
  {
    uint64_t result = 0LL;
    *(_DWORD *)(a1 + 16) = 2621441;
    *(void *)(a1 + 8) = a3;
  }

  else
  {
    uint64_t result = 22LL;
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 22;
  }

  return result;
}

uint64_t os_workgroup_attr_set_interval_type(uint64_t a1, int a2)
{
  if (!a1) {
    return 22LL;
  }
  BOOL v3 = *(_DWORD *)a1 == 799564740 || *(_DWORD *)a1 == 799564724;
  uint64_t result = 0LL;
  *(_WORD *)(a1 + 8) = a2;
  return result;
}

uint64_t os_workgroup_attr_set_flags(_DWORD *a1, int a2)
{
  if (!a1) {
    return 22LL;
  }
  if (*a1 != 799564740 && *a1 != 799564724) {
    return 22LL;
  }
  uint64_t result = 0LL;
  a1[1] = a2;
  return result;
}

uint64_t os_workgroup_attr_set_telemetry_flavor(uint64_t a1, int a2)
{
  if (!a1) {
    return 22LL;
  }
  BOOL v3 = *(_DWORD *)a1 == 799564740 || *(_DWORD *)a1 == 799564724;
  if (!v3 || a2 != 1) {
    return 22LL;
  }
  uint64_t result = 0LL;
  *(_WORD *)(a1 + 10) = 1;
  return result;
}

void *os_workgroup_interval_copy_current_4AudioToolbox()
{
  v0 = *(unsigned __int16 **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 928);
  else {
    return 0LL;
  }
}

_DWORD *os_workgroup_create(const char *a1, __int128 *a2)
{
  if (a2)
  {
    if (*(_DWORD *)a2 != 799564740 && *(_DWORD *)a2 != 799564724) {
      goto LABEL_17;
    }
    __int128 v4 = a2[1];
    __int128 v14 = *a2;
    __int128 v15 = v4;
    __int128 v5 = a2[3];
    __int128 v16 = a2[2];
    __int128 v17 = v5;
    BOOL v6 = (_DWORD)v14 == 799564724 || (_DWORD)v14 == 799564740;
    if (!v6 || (LODWORD(v14) = 2015762650, WORD4(v14)))
    {
LABEL_17:
      int v7 = 0LL;
      uint64_t v8 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      int v9 = 22;
LABEL_20:
      *uint64_t v8 = v9;
      return v7;
    }
  }

  else
  {
    __int128 v14 = _os_workgroup_attr_default;
    __int128 v15 = unk_3FDA0;
    __int128 v16 = xmmword_3FDB0;
    __int128 v17 = unk_3FDC0;
  }

  if ((BYTE4(v14) & 2) == 0 || WORD5(v14))
  {
    int v7 = 0LL;
    uint64_t v8 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    int v9 = 45;
    goto LABEL_20;
  }

  int v13 = 0;
  uint64_t work_interval = _os_workgroup_create_work_interval((uint64_t)&v14, (uint64_t)&v13);
  uint64_t v12 = work_interval;
  int v7 = _os_object_alloc(&OBJC_CLASS___OS_os_workgroup, 64LL);
  *((void *)v7 + 4) = v12;
  v7[10] = v13;
  *((void *)v7 + 3) = 1LL;
  *((_WORD *)v7 + 28) = WORD4(v14);
  _os_workgroup_set_name((uint64_t)v7, a1);
  return v7;
}

uint64_t _os_workgroup_create_work_interval(uint64_t a1, uint64_t a2)
{
  int v4 = _wg_type_to_wi_flags(*(unsigned __int16 *)(a1 + 8));
  if ((*(_DWORD *)(a1 + 4) & 4) != 0) {
    int v5 = 1;
  }
  else {
    int v5 = 3;
  }
  unsigned int v6 = v5 | v4 | ((*(_DWORD *)(a1 + 12) & 1) << 7);
  if (*(_WORD *)(a1 + 10)) {
    uint64_t v7 = v6 | 0x100;
  }
  else {
    uint64_t v7 = v6;
  }
  int v9 = work_interval_copy_port(v10, a2);
  uint64_t result = v10;
  if (v9 < 0)
  {
    work_interval_destroy(v10);
    return 0LL;
  }

  return result;
}

void _os_workgroup_set_name(uint64_t a1, const char *a2)
{
  uint64_t v2 = a2;
  if (a2)
  {
    int v4 = _dispatch_strdup_if_mutable(a2);
    if (v4 != v2)
    {
      *(void *)(a1 + 24) |= 4uLL;
      uint64_t v2 = v4;
    }
  }

  *(void *)(a1 + 16) = v2;
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5) {
    BOOL v6 = (*(void *)(a1 + 24) & 1LL) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    if (v5 == -1) {
      _os_workgroup_set_name_cold_1();
    }
    if (v2
      && __strlcpy_chk(v8, v2, 32LL, 32LL)
      && __work_interval_ctl(10LL, *(unsigned int *)(a1 + 40), v8, 32LL) == -1)
    {
      uint64_t v7 = **(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      if ((_DWORD)v7) {
        _dispatch_bug(534LL, v7);
      }
    }
  }

_DWORD *os_workgroup_interval_create(const char *a1, int a2, __int128 *a3)
{
  if (a3)
  {
    if (*(_DWORD *)a3 != 799564740 && *(_DWORD *)a3 != 799564724) {
      goto LABEL_22;
    }
    __int128 v6 = a3[1];
    __int128 v17 = *a3;
    __int128 v18 = v6;
    __int128 v7 = a3[3];
    __int128 v19 = a3[2];
    __int128 v20 = v7;
    if ((_DWORD)v17 == 799564724)
    {
      int v9 = DWORD1(v17);
      if (!DWORD1(v17)) {
        int v9 = 2;
      }
      DWORD1(v17) = v9;
      if (WORD4(v17) <= 1u) {
        int v8 = 1;
      }
      else {
        int v8 = WORD4(v17);
      }
      WORD4(v17) = v8;
    }

    else
    {
      if ((_DWORD)v17 != 799564740) {
        goto LABEL_22;
      }
      int v8 = WORD4(v17);
    }

    LODWORD(v17) = 2015762650;
    if ((v8 - 1) >= 0xA)
    {
LABEL_22:
      uint64_t v10 = 0LL;
      v11 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      int v12 = 22;
      goto LABEL_23;
    }
  }

  else
  {
    __int128 v17 = _os_workgroup_interval_attr_default;
    __int128 v18 = unk_3FDE0;
    __int128 v19 = xmmword_3FDF0;
    __int128 v20 = unk_3FE00;
    LOWORD(v8) = 1;
  }

  if ((BYTE4(v17) & 4) != 0) {
    goto LABEL_22;
  }
  if ((BYTE4(v17) & 2) == 0)
  {
    uint64_t v10 = 0LL;
    v11 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    int v12 = 45;
LABEL_23:
    int *v11 = v12;
    return v10;
  }

  int v16 = 0;
  uint64_t work_interval = _os_workgroup_create_work_interval((uint64_t)&v17, (uint64_t)&v16);
  uint64_t v15 = work_interval;
  uint64_t v10 = _os_object_alloc(&OBJC_CLASS___OS_os_workgroup_interval, 80LL);
  *((void *)v10 + 4) = v15;
  v10[10] = v16;
  v10[16] = a2;
  *((void *)v10 + 9) = work_interval_instance_alloc(v15);
  v10[17] = 0;
  *((_WORD *)v10 + 28) = v8;
  *((void *)v10 + 3) = 1LL;
  *((_WORD *)v10 + 22) = WORD5(v17);
  _os_workgroup_set_name((uint64_t)v10, a1);
  return v10;
}

_DWORD *os_workgroup_create_with_workload_id(const char *a1, char *a2, __int128 *a3)
{
  if (a3)
  {
    if (*(_DWORD *)a3 != 799564740 && *(_DWORD *)a3 != 799564724) {
      goto LABEL_32;
    }
    __int128 v6 = a3[1];
    __int128 v19 = *a3;
    __int128 v20 = v6;
    __int128 v7 = a3[3];
    __int128 v21 = a3[2];
    __int128 v22 = v7;
    if ((_DWORD)v19 != 799564740)
    {
      if ((_DWORD)v19 != 799564724)
      {
LABEL_32:
        os_workgroup_create_with_workload_id_cold_2();
        return 0LL;
      }

      int v8 = DWORD1(v19);
      if (!DWORD1(v19)) {
        int v8 = 2;
      }
      DWORD1(v19) = v8;
    }

    LODWORD(v19) = 2015762650;
  }

  else
  {
    __int128 v19 = _os_workgroup_with_workload_id_attr_default;
    __int128 v20 = unk_3FE20;
    __int128 v21 = xmmword_3FE30;
    __int128 v22 = unk_3FE40;
  }

  LOWORD(v18) = 0;
  int v9 = _os_workgroup_lookup_type_from_workload_id(a2, (unsigned int *)((unint64_t)&v19 | 0xC), &v18);
  if (v9)
  {
    if (!WORD4(v19) || WORD4(v19) == (unsigned __int16)v18)
    {
      WORD4(v19) = v9;
    }

    else if (v9 != WORD4(v19))
    {
      _dispatch_log( "BUG IN CLIENT of %s: Mismatched workload ID and attribute interval type: %s vs %hd",  "os_workgroup_create_with_workload_id",  a2,  WORD4(v19));
      uint64_t v10 = 0LL;
      unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_31:
      int v12 = *(int **)(StatusReg + 8);
      int v13 = 22;
      goto LABEL_24;
    }
  }

  if (DWORD1(v19) != 2)
  {
    os_workgroup_create_with_workload_id_cold_1(SDWORD1(v19));
    return 0LL;
  }

  if (WORD4(v19))
  {
    _dispatch_log( "BUG IN CLIENT of %s: Non-default workload type: %s (%hd)",  "os_workgroup_create_with_workload_id",  a2,  WORD4(v19));
    uint64_t v10 = 0LL;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    goto LABEL_31;
  }

  if (!WORD5(v19))
  {
    int v18 = 0;
    uint64_t work_interval = _os_workgroup_create_work_interval((uint64_t)&v19, (uint64_t)&v18);
    if (work_interval)
    {
      uint64_t v15 = work_interval;
      uint64_t v10 = _os_object_alloc(&OBJC_CLASS___OS_os_workgroup, 64LL);
      *((void *)v10 + 4) = v15;
      v10[10] = v18;
      *((void *)v10 + 3) = 1LL;
      *((_WORD *)v10 + 28) = 0;
      if (!_os_workgroup_set_work_interval_workload_id((uint64_t)v10, a2, SHIDWORD(v19)))
      {
        _os_workgroup_set_name((uint64_t)v10, a1);
        return v10;
      }

      _os_object_release(v10, v16);
    }

    return 0LL;
  }

  uint64_t v10 = 0LL;
  int v12 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  int v13 = 45;
LABEL_24:
  *int v12 = v13;
  return v10;
}

uint64_t _os_workgroup_set_work_interval_workload_id(uint64_t a1, const char *a2, int a3)
{
  unsigned int v4 = *(_DWORD *)(a1 + 40);
  if (v4 + 1 <= 1) {
    _os_workgroup_set_work_interval_workload_id_cold_1(v4);
  }
  if (!a3) {
    return 0LL;
  }
  unsigned int v6 = a3 & 0xFFFFFFFE;
  __strlcpy_chk(v16, a2, 64LL, 64LL);
  int v7 = _wg_type_to_wi_flags(*(unsigned __int16 *)(a1 + 56));
  v12[0] = v6;
  v12[1] = v7;
  uint64_t v14 = 0LL;
  uint64_t v15 = 0LL;
  int v13 = v16;
  uint64_t v8 = __work_interval_ctl(11LL, *(unsigned int *)(a1 + 40), v12, 32LL);
  if ((_DWORD)v8)
  {
    if ((_DWORD)v8 != -1)
    {
      int v10 = 0;
      uint64_t v9 = v8;
      goto LABEL_12;
    }

    uint64_t v9 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if ((_DWORD)v9)
    {
      _dispatch_bug(576LL, (int)v9);
      int v10 = 0;
      LODWORD(v8) = v9;
      goto LABEL_12;
    }
  }

  int v10 = v12[0];
  if ((v12[0] & 1) != 0)
  {
    LODWORD(v8) = 0;
    uint64_t v9 = 37LL;
LABEL_12:
    _dispatch_log( "BUG IN CLIENT of %s: Unable to set kernel workload ID: %s (0x%x) -> %d (0x%x)",  "_os_workgroup_set_work_interval_workload_id",  a2,  v6,  v8,  v10);
    return v9;
  }

  uint64_t v9 = 0LL;
  *(void *)(a1 + 24) |= 0x10uLL;
  return v9;
}

_DWORD *os_workgroup_interval_create_with_workload_id(const char *a1, char *a2, int a3, __int128 *a4)
{
  if (a4)
  {
    if (*(_DWORD *)a4 != 799564740 && *(_DWORD *)a4 != 799564724) {
      goto LABEL_33;
    }
    __int128 v8 = a4[1];
    __int128 v21 = *a4;
    __int128 v22 = v8;
    __int128 v9 = a4[3];
    __int128 v23 = a4[2];
    __int128 v24 = v9;
    if ((_DWORD)v21 != 799564740)
    {
      if ((_DWORD)v21 != 799564724)
      {
LABEL_33:
        os_workgroup_interval_create_with_workload_id_cold_2();
        return 0LL;
      }

      int v10 = DWORD1(v21);
      if (!DWORD1(v21)) {
        int v10 = 2;
      }
      DWORD1(v21) = v10;
      __int16 v11 = WORD4(v21);
      if (WORD4(v21) <= 1u) {
        __int16 v11 = 1;
      }
      WORD4(v21) = v11;
    }

    LODWORD(v21) = 2015762650;
  }

  else
  {
    __int128 v21 = _os_workgroup_interval_attr_default;
    __int128 v22 = unk_3FDE0;
    __int128 v23 = xmmword_3FDF0;
    __int128 v24 = unk_3FE00;
  }

  LOWORD(v20) = 0;
  int v12 = _os_workgroup_lookup_type_from_workload_id(a2, (unsigned int *)((unint64_t)&v21 | 0xC), &v20);
  if (v12)
  {
    if (WORD4(v21) == 1 || WORD4(v21) == (unsigned __int16)v20)
    {
      WORD4(v21) = v12;
    }

    else if (v12 != WORD4(v21))
    {
      _dispatch_log( "BUG IN CLIENT of %s: Mismatched workload ID and attribute interval type: %s vs %hd",  "os_workgroup_interval_create_with_workload_id",  a2,  WORD4(v21));
      int v13 = 0LL;
      unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_31:
      **(_DWORD **)(StatusReg + 8) = 22;
      return v13;
    }
  }

  if (DWORD1(v21) == 2)
  {
    __int16 v15 = WORD4(v21);
    if (WORD4(v21) - 1 >= 0xA)
    {
      _dispatch_log( "BUG IN CLIENT of %s: Invalid workload interval type: %s (%hd)",  "os_workgroup_interval_create_with_workload_id",  a2,  WORD4(v21));
      int v13 = 0LL;
      unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      goto LABEL_31;
    }

    int v20 = 0;
    uint64_t work_interval = _os_workgroup_create_work_interval((uint64_t)&v21, (uint64_t)&v20);
    if (work_interval)
    {
      uint64_t v17 = work_interval;
      int v13 = _os_object_alloc(&OBJC_CLASS___OS_os_workgroup_interval, 80LL);
      *((void *)v13 + 4) = v17;
      v13[10] = v20;
      v13[16] = a3;
      *((void *)v13 + 9) = work_interval_instance_alloc(v17);
      v13[17] = 0;
      *((_WORD *)v13 + 28) = v15;
      *((void *)v13 + 3) = 1LL;
      *((_WORD *)v13 + 22) = WORD5(v21);
      if (!_os_workgroup_set_work_interval_workload_id((uint64_t)v13, a2, SHIDWORD(v21)))
      {
        _os_workgroup_set_name((uint64_t)v13, a1);
        return v13;
      }

      _os_object_release(v13, v18);
    }
  }

  else
  {
    os_workgroup_interval_create_with_workload_id_cold_1(SDWORD1(v21));
  }

  return 0LL;
}

int os_workgroup_join(os_workgroup_t wg, os_workgroup_join_token_t token_out)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (*(void *)(StatusReg + 928))
  {
    BOOL v3 = *(int **)(StatusReg + 8);
    int result = 37;
LABEL_9:
    int *v3 = result;
    return result;
  }

  uint64_t v6 = *((void *)wg + 3);
  if ((v6 & 2) != 0)
  {
    BOOL v3 = *(int **)(StatusReg + 8);
    int result = 22;
    goto LABEL_9;
  }

  if (*((_DWORD *)wg + 10))
  {
    if ((v6 & 1) != 0)
    {
    }

    else if (work_interval_join_port())
    {
      return **(_DWORD **)(StatusReg + 8);
    }
  }

  _os_workgroup_join_update_wg((uint64_t)wg, (uint64_t)token_out);
  return 0;
}

void os_workgroup_leave(os_workgroup_t wg, os_workgroup_join_token_t token)
{
  if (token->sig != 1298094680) {
    os_workgroup_leave_cold_5();
  }
  int v2 = *(_DWORD *)token->opaque;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (v2 != *(_DWORD *)(StatusReg + 24)) {
    os_workgroup_leave_cold_4();
  }
  int v5 = *(os_workgroup_s **)(StatusReg + 928);
  if (v5 != wg || *(void *)&token->opaque[12] != (void)v5) {
    os_workgroup_leave_cold_3();
  }
  if (*(void *)&token->opaque[4]) {
    os_eventlink_create_with_port_cold_1();
  }
  _os_workgroup_leave_update_wg((uint64_t)wg, (const char *)token);
}

os_workgroup_parallel_t os_workgroup_parallel_create(const char *name, os_workgroup_attr_t attr)
{
  if (!attr) {
    goto LABEL_19;
  }
  uint32_t sig = attr->sig;
  if (attr->sig != 799564724 && sig != 799564740) {
    goto LABEL_15;
  }
  int v5 = *(_DWORD *)attr->opaque;
  if (sig != 799564740)
  {
    if (sig != 799564724) {
      goto LABEL_15;
    }
    if (!v5) {
      LOBYTE(v5) = 6;
    }
    if (!*(_WORD *)&attr->opaque[4])
    {
LABEL_13:
      if ((v5 & 2) == 0 || *(_WORD *)&attr->opaque[6])
      {
        uint64_t v6 = 0LL;
        int v7 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        int v8 = 45;
        goto LABEL_18;
      }

LABEL_19:
      uint64_t v6 = _os_object_alloc(&OBJC_CLASS___OS_os_workgroup_parallel, 64LL);
      *((void *)v6 + 4) = 0LL;
      *((void *)v6 + 3) = 1LL;
      *((_WORD *)v6 + 28) = 64;
      _os_workgroup_set_name((uint64_t)v6, name);
      return (os_workgroup_parallel_t)v6;
    }
  }

  if (*(_WORD *)&attr->opaque[4] == 64) {
    goto LABEL_13;
  }
LABEL_15:
  uint64_t v6 = 0LL;
  int v7 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  int v8 = 22;
LABEL_18:
  *int v7 = v8;
  return (os_workgroup_parallel_t)v6;
}

  v8[1] = v13;
  *(_DWORD *)(v7 + 32) = v16;
  *int v8 = &unk_58928;
  return result;
}

    LODWORD(v23) = 0;
    goto LABEL_87;
  }

  int v18 = *(_WORD *)(a1 + 118);
  *(_WORD *)(a1 + 118) = v18 & 0xFFFE;
  __int128 v19 = *(void *)(v7 + 48);
  if (v19) {
    int v20 = v19 == a2;
  }
  else {
    int v20 = 1;
  }
  if (!v20)
  {
    v78 = v11;
    v82 = a5;
    __int128 v23 = v7;
    if (*(void *)(v7 + 16)
      && *(__objc2_class ***)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160) != &_dispatch_mgr_q)
    {
      v55 = 0LL;
      goto LABEL_85;
    }

    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v65 = *(void *)(StatusReg + 32) & 0xFFFFFFLL;
    if (v65 >= 0x10FF) {
      v65 = 4351LL;
    }
    *(void *)(v19 + 56) = v65;
    v66 = *(void *)(StatusReg + 224);
    if (v66)
    {
      v67 = a4;
      os_retain(*(void **)(StatusReg + 224));
      a4 = v67;
    }

    *(void *)(v19 + 64) = v66;
    *(_DWORD *)(v19 + 48) = ((*(void *)(StatusReg + 32) & 0x300LL) != 0) << 18;
    v68 = a4;
    if ((*(_WORD *)(v6 + 116) & 0x20) != 0) {
      _dispatch_mach_arm_no_senders(v6, 1);
    }
    __int128 v19 = 0LL;
    int v7 = v23;
    *(void *)(v23 + 48) = 0LL;
    __int16 v11 = v78;
    a5 = v82;
    LODWORD(a4) = v68;
  }

  int v12 = (_DWORD *)(a2 + 48);
  int v13 = *(_DWORD *)(a2 + 48);
  if ((v13 & 2) != 0) {
    goto LABEL_19;
  }
  __int128 v21 = v13 & 0xFFFF0000 | 1;
  if (v19 != a2) {
    v8[2] = *(_DWORD *)(v7 + 92);
  }
  if (*(__objc2_class ***)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160) != &_dispatch_mgr_q)
  {
    if (v9) {
      goto LABEL_16;
    }
LABEL_23:
    if ((*((_BYTE *)v8 + 2) & 0x1F) == 0)
    {
      v80 = v12;
      v84 = v7;
      v77 = v21;
      __int128 v24 = a4;
      v25 = v11;
      v26 = a5;
      if (_voucher_task_mach_voucher_pred != -1) {
        dispatch_once_f(&_voucher_task_mach_voucher_pred, 0LL, (dispatch_function_t)_voucher_task_mach_voucher_init);
      }
      __int16 v15 = 0;
      mach_voucher = _voucher_task_mach_voucher;
      goto LABEL_31;
    }

    __int16 v15 = 0;
    goto LABEL_25;
  }

  if (!*(void *)(v7 + 16))
  {
    v76 = a4;
    v79 = v11;
    v73 = a5;
    v74 = *(void *)(v6 + 120);
    *(_DWORD *)(v74 + 24) = v8[2];
    if ((_dispatch_unote_register(v74, -4LL, 0x2000000u) & 1) == 0) {
      _dispatch_bug(1743LL, 0LL);
    }
    a5 = v73;
    LODWORD(a4) = v76;
    __int16 v11 = v79;
    int v12 = (_DWORD *)(a2 + 48);
  }

  if ((*(_BYTE *)(v7 + 30) & 1) != 0) {
    return 0LL;
  }
  __int128 v21 = v13 & 0xFFFF0000 | 0x81;
  if (!v9) {
    goto LABEL_23;
  }
LABEL_16:
  __int128 v22 = *(void *)(v9 + 48);
  if (!v22)
  {
    __int16 v15 = 0;
    int v16 = 0;
    if ((*((_BYTE *)v8 + 2) & 0x1F) != 0) {
      goto LABEL_36;
    }
    goto LABEL_27;
  }

  *((void *)&v88[0] + 1) = 59821818LL;
  *(void *)&v88[1] = v22;
  *(_OWORD *)((char *)&v88[1] + 8) = *(_OWORD *)(v9 + 56);
  LODWORD(v88[0]) = 40;
  __int16 v15 = 32;
  if ((*((_BYTE *)v8 + 2) & 0x1F) != 0)
  {
LABEL_25:
    int v16 = 0;
    goto LABEL_36;
  }

int os_workgroup_copy_port(os_workgroup_t wg, mach_port_t *mach_port_out)
{
  if (!wg) {
    os_eventlink_create_with_port_cold_1();
  }
  if (!mach_port_out) {
    os_eventlink_create_with_port_cold_1();
  }
  *mach_port_out = 0;
  if ((*((void *)wg + 3) & 2) != 0) {
    return 22;
  }
  mach_port_name_t v4 = *((_DWORD *)wg + 10);
  if (!v4) {
    return 22;
  }
  int result = mach_port_mod_refs(mach_task_self_, v4, 0, 1);
  if (result)
  {
    os_workgroup_copy_port_cold_3();
    return 12;
  }

  else
  {
    *mach_port_out = *((_DWORD *)wg + 10);
  }

  return result;
}

os_workgroup_t os_workgroup_create_with_port(const char *name, mach_port_t mach_port)
{
  if (mach_port - 1 >= 0xFFFFFFFE)
  {
    mach_port_name_t v4 = 0LL;
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 22;
  }

  else
  {
    unsigned int v7 = 0;
    if (!work_interval_get_flags_from_port(*(void *)&mach_port, &v7))
    {
      __int16 v5 = 0;
      switch(v7 >> 28)
      {
        case 0u:
          break;
        case 1u:
          if ((v7 & 4) != 0) {
            __int16 v5 = 3;
          }
          else {
            __int16 v5 = 4;
          }
          break;
        case 2u:
          __int16 v5 = 5;
          break;
        case 3u:
          __int16 v5 = 2;
          break;
        case 4u:
          __int16 v5 = 7;
          break;
        case 5u:
          __int16 v5 = 8;
          break;
        case 6u:
          __int16 v5 = 9;
          break;
        case 7u:
          __int16 v5 = 10;
          break;
        default:
          os_workgroup_create_with_port_cold_1(v8, v7);
      }

      if (!mach_port_mod_refs(mach_task_self_, mach_port, 0, 1))
      {
        mach_port_name_t v4 = _os_object_alloc(&OBJC_CLASS___OS_os_workgroup, 64LL);
        v4[10] = mach_port;
        *((_WORD *)v4 + 28) = v5;
        _os_workgroup_set_name((uint64_t)v4, name);
        return (os_workgroup_t)v4;
      }

      os_workgroup_create_with_port_cold_2();
    }

    return 0LL;
  }

  return (os_workgroup_t)v4;
}

_DWORD *os_workgroup_create_with_workload_id_and_port(const char *a1, char *a2, uint64_t a3)
{
  mach_port_name_t v3 = a3;
  if ((a3 - 1) >= 0xFFFFFFFE)
  {
    os_workgroup_create_with_workload_id_and_port_cold_3(a3);
    return 0LL;
  }

  unsigned int v15 = 0;
  if (work_interval_get_flags_from_port(a3, &v15))
  {
    _dispatch_log("BUG IN CLIENT of %s: Invalid mach port 0x%x", "os_workgroup_create_with_workload_id_and_port", v3);
    return 0LL;
  }

  unsigned int v6 = v15;
  unsigned __int16 v7 = 0;
  switch(v15 >> 28)
  {
    case 0u:
      break;
    case 1u:
      if ((v15 & 4) != 0) {
        unsigned __int16 v7 = 3;
      }
      else {
        unsigned __int16 v7 = 4;
      }
      break;
    case 2u:
      unsigned __int16 v7 = 5;
      break;
    case 3u:
      unsigned __int16 v7 = 2;
      break;
    case 4u:
      unsigned __int16 v7 = 7;
      break;
    case 5u:
      unsigned __int16 v7 = 8;
      break;
    case 6u:
      unsigned __int16 v7 = 9;
      break;
    case 7u:
      unsigned __int16 v7 = 10;
      break;
    default:
      os_workgroup_create_with_port_cold_1((char *)v16, v15);
  }

  LOWORD(v15) = 0;
  unsigned int v8 = _os_workgroup_lookup_type_from_workload_id(a2, v16, &v15);
  if (v8)
  {
    unsigned int v9 = v8;
    unsigned int v10 = v6 & 0xF0000000;
    if ((_wg_type_to_wi_flags((unsigned __int16)v15) & 0x70000000) != v10
      && (_wg_type_to_wi_flags(v9) & 0x70000000) != v10)
    {
      _dispatch_log( "BUG IN CLIENT of %s: Mismatched workload ID and port interval type: %s vs %hd",  "os_workgroup_create_with_workload_id_and_port",  a2,  v7);
      __int16 v11 = 0LL;
      **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 22;
      return v11;
    }
  }

  if (mach_port_mod_refs(mach_task_self_, v3, 0, 1))
  {
    os_workgroup_create_with_workload_id_and_port_cold_2(v3);
    return 0LL;
  }

  __int16 v11 = _os_object_alloc(&OBJC_CLASS___OS_os_workgroup, 64LL);
  v11[10] = v3;
  *((_WORD *)v11 + 28) = v7;
  int v12 = _os_workgroup_set_work_interval_workload_id((uint64_t)v11, a2, v16[0]);
  if (v12 && v12 != 37)
  {
    _os_object_release(v11, v13);
    return 0LL;
  }

  _os_workgroup_set_name((uint64_t)v11, a1);
  return v11;
}

os_workgroup_t os_workgroup_create_with_workgroup(const char *name, os_workgroup_t wg)
{
  if ((*((void *)wg + 3) & 2) != 0)
  {
    mach_port_name_t v4 = 0LL;
    **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 22;
    return v4;
  }

  mach_port_name_t v4 = (os_workgroup_s *)_os_object_alloc(&OBJC_CLASS___OS_os_workgroup, 64LL);
  *((_WORD *)v4 + 28) = *((_WORD *)wg + 28);
  mach_port_name_t v5 = *((_DWORD *)wg + 10);
  if (!v5)
  {
LABEL_7:
    _os_workgroup_set_name((uint64_t)v4, name);
    return v4;
  }

  if (!mach_port_mod_refs(mach_task_self_, v5, 0, 1))
  {
    *((_DWORD *)v4 + 10) = *((_DWORD *)wg + 10);
    goto LABEL_7;
  }

  free(v4);
  return 0LL;
}

_DWORD *os_workgroup_create_with_workload_id_and_workgroup(const char *a1, char *a2, uint64_t a3)
{
  kern_return_t v12;
  int v13;
  int v14;
  const char *v15;
  unsigned int v17;
  unsigned __int16 v18;
  if ((*(void *)(a3 + 24) & 2) != 0)
  {
    os_workgroup_create_with_workload_id_and_workgroup_cold_1();
    return 0LL;
  }

  int v6 = _wg_type_to_wi_flags(*(unsigned __int16 *)(a3 + 56));
  int v18 = 0;
  unsigned int v7 = _os_workgroup_lookup_type_from_workload_id(a2, &v17, &v18);
  if (v7)
  {
    unsigned int v8 = v7;
    int v9 = v6 & 0x70000000;
    if ((_wg_type_to_wi_flags(v18) & 0x70000000) != v9 && (_wg_type_to_wi_flags(v8) & 0x70000000) != v9)
    {
      _dispatch_log( "BUG IN CLIENT of %s: Mismatched workload ID and workgroup interval type: %s vs %hd",  "os_workgroup_create_with_workload_id_and_workgroup",  a2,  *(unsigned __int16 *)(a3 + 56));
      unsigned int v10 = 0LL;
      **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) = 22;
      return v10;
    }
  }

  unsigned int v10 = _os_object_alloc(&OBJC_CLASS___OS_os_workgroup, 64LL);
  *((_WORD *)v10 + 28) = *(_WORD *)(a3 + 56);
  mach_port_name_t v11 = *(_DWORD *)(a3 + 40);
  if (!v11) {
    goto LABEL_9;
  }
  int v12 = mach_port_mod_refs(mach_task_self_, v11, 0, 1);
  int v13 = *(_DWORD *)(a3 + 40);
  if (v12)
  {
    _dispatch_log( "BUG IN CLIENT of %s: Invalid workgroup port 0x%x",  "os_workgroup_create_with_workload_id_and_workgroup",  v13);
    free(v10);
    return 0LL;
  }

  v10[10] = v13;
  uint64_t v14 = _os_workgroup_set_work_interval_workload_id((uint64_t)v10, a2, v17);
  if (v14 && v14 != 37)
  {
    _os_object_release(v10, v15);
    return 0LL;
  }

LABEL_9:
  _os_workgroup_set_name((uint64_t)v10, a1);
  return v10;
}

  unsigned int v8 = 0LL;
LABEL_10:
  int v9 = *((void *)wg + 3);
  if ((v9 & 1) == 0)
  {
    os_unfair_lock_unlock(v7);
    unsigned int v10 = *(_DWORD **)(StatusReg + 8);
    LODWORD(v4) = 1;
LABEL_18:
    *unsigned int v10 = (_DWORD)v4;
    return (int)v4;
  }

  if (v8 && (v9 & 0x10) == 0 || (v9 & 8) == 0)
  {
    os_unfair_lock_unlock(v7);
LABEL_17:
    unsigned int v10 = *(_DWORD **)(StatusReg + 8);
    LODWORD(v4) = 22;
    goto LABEL_18;
  }

  int v12 = *((void *)wg + 9);
  work_interval_instance_set_deadline(v12, deadline);
  work_interval_instance_set_complexity(v12, v8);
  if (work_interval_instance_update(v12))
  {
    LODWORD(v4) = **(_DWORD **)(StatusReg + 8);
  }

  else if (v4)
  {
    if (*(_WORD *)&v4->opaque[12] == 1) {
      _os_workgroup_interval_copy_telemetry_data((uint64_t)wg, (uint64_t)v4);
    }
    LODWORD(v4) = 0;
  }

  os_unfair_lock_unlock(v7);
  return (int)v4;
}

  int v6 = 0LL;
LABEL_10:
  unsigned int v7 = *((void *)wg + 3);
  if ((v7 & 1) == 0)
  {
    os_unfair_lock_unlock(v5);
    unsigned int v8 = *(_DWORD **)(StatusReg + 8);
    LODWORD(v3) = 1;
LABEL_18:
    *unsigned int v8 = (_DWORD)v3;
    return (int)v3;
  }

  if (v6 && (v7 & 0x10) == 0 || (v7 & 8) == 0)
  {
    os_unfair_lock_unlock(v5);
LABEL_17:
    unsigned int v8 = *(_DWORD **)(StatusReg + 8);
    LODWORD(v3) = 22;
    goto LABEL_18;
  }

  unsigned int v10 = *((void *)wg + 9);
  if (*((_DWORD *)wg + 16) == 32) {
    mach_port_name_t v11 = mach_absolute_time();
  }
  else {
    mach_port_name_t v11 = 0LL;
  }
  work_interval_instance_set_finish(v10, v11);
  work_interval_instance_set_complexity(v10, v6);
  if (work_interval_instance_finish(v10))
  {
    LODWORD(v3) = **(_DWORD **)(StatusReg + 8);
  }

  else
  {
    int v12 = (unint64_t *)((char *)wg + 24);
    do
      int v13 = __ldxr(v12);
    while (__stxr(v13 & 0xFFFFFFFFFFFFFFF7LL, v12));
    if (v3)
    {
      if (*(_WORD *)&v3->opaque[12] == 1) {
        _os_workgroup_interval_copy_telemetry_data((uint64_t)wg, (uint64_t)v3);
      }
      LODWORD(v3) = 0;
    }
  }

  os_unfair_lock_unlock(v5);
  return (int)v3;
}

    unsigned int v8 = 0;
    goto LABEL_11;
  }

  int v6 = *(_DWORD *)(a1 + 184);
  *(_DWORD *)(a1 + 184) = 0;
  if ((v6 & 1) != 0) {
    goto LABEL_7;
  }
  if (v5 >= *(void *)(a1 + 72)) {
    goto LABEL_9;
  }
  if (v4 < *(void *)(a1 + 192)) {
    return;
  }
  unsigned int v7 = 0;
  unsigned int v8 = 0;
LABEL_12:
  int v9 = *(_DWORD *)(a1 + 56);
  if (v9 == 1)
  {
    if (v7) {
      subrange = dispatch_data_create_subrange(*(dispatch_data_t *)(a1 + 232), v4, *(void *)(a1 + 112));
    }
    else {
      subrange = 0LL;
    }
    int v12 = *(void **)(a1 + 224);
    if (v12 && *(void *)(a1 + 200) == *(void *)(a1 + 192))
    {
      _dispatch_objc_release(v12);
      *(void *)(a1 + 224) = 0LL;
      *(void *)(a1 + 176) = 0LL;
      *(void *)(a1 + 200) = 0LL;
      if (v7)
      {
        _dispatch_objc_retain(subrange);
        int v13 = subrange;
      }

      else
      {
        int v13 = dispatch_data_create_subrange( *(dispatch_data_t *)(a1 + 232),  *(void *)(a1 + 192),  *(void *)(a1 + 112));
      }

      _dispatch_objc_release(*(id *)(a1 + 232));
      *(void *)(a1 + 232) = v13;
      if (!v7) {
        goto LABEL_37;
      }
      goto LABEL_28;
    }
  }

  else
  {
    if (v9) {
      return;
    }
    if (v4)
    {
      unsigned int v10 = dispatch_data_create(*(const void **)(a1 + 176), v4, 0LL, &__block_literal_global);
      *(void *)(a1 + 176) = 0LL;
      *(void *)(a1 + 200) = 0LL;
      subrange = dispatch_data_create_concat(*(dispatch_data_t *)(a1 + 232), v10);
      _dispatch_objc_release(*(id *)(a1 + 232));
      _dispatch_objc_release(v10);
    }

    else
    {
      subrange = *(dispatch_data_t *)(a1 + 232);
    }

    uint64_t v14 = &_dispatch_data_empty;
    if (!v7) {
      uint64_t v14 = subrange;
    }
    *(void *)(a1 + 232) = v14;
  }

  if (!v7)
  {
LABEL_37:
    *(void *)(a1 + 208) = v5;
    return;
  }

int os_workgroup_max_parallel_threads(os_workgroup_t wg, os_workgroup_mpt_attr_t attr)
{
  if (!wg) {
    os_eventlink_create_with_port_cold_1();
  }
  else {
    return pthread_time_constraint_max_parallelism(0LL, attr);
  }
}

void *_os_workgroup_join_update_wg(uint64_t a1, uint64_t a2)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (*(void *)(StatusReg + 928)) {
    _os_workgroup_join_update_wg_cold_1();
  }
  mach_port_name_t v4 = (unsigned int *)(a1 + 60);
  do
    unsigned int v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  *(void *)(a2 + 32) = 0LL;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v6 = *(void *)(StatusReg + 24);
  *(_DWORD *)a2 = 1298094680;
  *(_DWORD *)(a2 + 4) = v6;
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = a1;
  if (a1) {
    _os_object_retain_internal(a1);
  }
  int result = *(void **)(StatusReg + 928);
  *(void *)(StatusReg + 928) = a1;
  if (result) {
    return _os_object_release_internal(result, (const char *)a2);
  }
  return result;
}

int os_workgroup_set_working_arena( os_workgroup_t wg, void *arena, uint32_t max_workers, os_workgroup_working_arena_destructor_t destructor)
{
  unsigned int v8 = calloc(4LL * max_workers + 24, 1uLL);
  if (v8)
  {
    v8[4] = max_workers;
    int v9 = (unsigned __int128 *)((char *)wg + 48);
    *(void *)unsigned int v8 = arena;
    *((void *)v8 + 1) = destructor;
    do
    {
      unsigned __int128 v10 = __ldxp(v9);
      if (HIDWORD(*((void *)&v10 + 1)))
      {
        __clrex();
        free(v8);
        int v12 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        int result = 16;
        goto LABEL_9;
      }
    }

    while (__stxp((unint64_t)v8, v9));
    if ((void)v10)
    {
      (*(void (**)(void))(v10 + 8))(*(void *)v10);
      free((void *)v10);
    }

    return 0;
  }

  else
  {
    int v12 = *(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    int result = 12;
LABEL_9:
    *int v12 = result;
  }

  return result;
}

void *__cdecl os_workgroup_get_working_arena(os_workgroup_t wg, os_workgroup_index *index_out)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (*(os_workgroup_t *)(StatusReg + 928) != wg) {
    os_workgroup_get_working_arena_cold_3();
  }
  uint64_t v3 = *((void *)wg + 6);
  if (!v3) {
    return 0LL;
  }
  if (index_out)
  {
    uint64_t v4 = *(unsigned int *)(v3 + 16);
    if (!(_DWORD)v4) {
      os_workgroup_get_working_arena_cold_1();
    }
    uint64_t v5 = 0LL;
    while (*(_DWORD *)(v3 + 24 + 4 * v5) != *(_DWORD *)(StatusReg + 24))
    {
      if (v4 == ++v5)
      {
        uint64_t v6 = (unsigned int *)(v3 + 20);
        do
          LODWORD(v5) = __ldxr(v6);
        while (__stxr(v5 + 1, v6));
        *(_DWORD *)(v3 + 4LL * v5 + 24) = *(void *)(StatusReg + 24);
        break;
      }
    }

    *index_out = v5;
  }

  return *(void **)v3;
}

void os_workgroup_cancel(os_workgroup_t wg)
{
  int v1 = (unint64_t *)((char *)wg + 24);
  do
    unint64_t v2 = __ldxr(v1);
  while (__stxr(v2 | 2, v1));
}

BOOL os_workgroup_testcancel(os_workgroup_t wg)
{
  return (*((void *)wg + 3) >> 1) & 1LL;
}

int os_workgroup_interval_start( os_workgroup_interval_t wg, uint64_t start, uint64_t deadline, os_workgroup_interval_data_t data)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (data && *(_WORD *)&data->opaque[12] == 1 && *((_WORD *)wg + 22) != 1
    || deadline < start
    || *((_DWORD *)wg + 16) == 32 && mach_absolute_time() < start)
  {
    int v9 = *(int **)(StatusReg + 8);
    int v10 = 22;
LABEL_7:
    *int v9 = v10;
    return v10;
  }

  if (!os_unfair_lock_trylock((os_unfair_lock_t)wg + 17))
  {
    int v9 = *(int **)(StatusReg + 8);
    int v10 = 16;
    goto LABEL_7;
  }

  if (data && data->sig == 1386695757) {
    uint64_t v12 = *(_DWORD *)data->opaque & 1LL;
  }
  else {
    uint64_t v12 = 0LL;
  }
  int v13 = (unint64_t *)((char *)wg + 24);
  while (1)
  {
    unint64_t v14 = __ldxr(v13);
    if ((v14 & 0xA) != 0)
    {
      int v10 = 22;
LABEL_31:
      __clrex();
      os_unfair_lock_unlock((os_unfair_lock_t)wg + 17);
      int v9 = *(int **)(StatusReg + 8);
      goto LABEL_7;
    }

    if ((v14 & 1) == 0)
    {
      int v10 = 1;
      goto LABEL_31;
    }

    if (v12 && (v14 & 0x10) == 0) {
      break;
    }
    if (!__stxr(v14 | 8, v13)) {
      goto LABEL_23;
    }
  }

  **(_DWORD **)(StatusReg + 8) = 22;
  __clrex();
LABEL_23:
  uint64_t v15 = *((void *)wg + 9);
  work_interval_instance_clear(v15);
  work_interval_instance_set_start(v15, start);
  work_interval_instance_set_deadline(v15, deadline);
  work_interval_instance_set_complexity(v15, v12);
  int v10 = work_interval_instance_start(v15);
  if (v10)
  {
    do
      unint64_t v16 = __ldxr(v13);
    while (__stxr(v16 & 0xFFFFFFFFFFFFFFF7LL, v13));
  }

  else if (data && *(_WORD *)&data->opaque[12] == 1)
  {
    _os_workgroup_interval_copy_telemetry_data((uint64_t)wg, (uint64_t)data);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)wg + 17);
  return v10;
}

double _os_workgroup_interval_copy_telemetry_data(uint64_t a1, uint64_t a2)
{
  if (*(_WORD *)(a2 + 16) == 1)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    *(void *)uint64_t v4 = v5;
    *(_OWORD *)(v4 + 24) = v7;
    double result = *(double *)&v6;
    *(_OWORD *)(v4 + 8) = v6;
  }

  return result;
}

int os_workgroup_interval_update( os_workgroup_interval_t wg, uint64_t deadline, os_workgroup_interval_data_t data)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  os_workgroup_interval_data_t v4 = data;
  if (!data)
  {
    __int128 v7 = (os_unfair_lock_s *)((char *)wg + 68);
    if (os_unfair_lock_trylock((os_unfair_lock_t)wg + 17)) {
      goto LABEL_9;
    }
LABEL_12:
    int v10 = *(_DWORD **)(StatusReg + 8);
    LODWORD(v4) = 16;
    goto LABEL_18;
  }

  if (*(_WORD *)&data->opaque[12] == 1 && *((_WORD *)wg + 22) != 1) {
    goto LABEL_17;
  }
  __int128 v7 = (os_unfair_lock_s *)((char *)wg + 68);
  if (!os_unfair_lock_trylock((os_unfair_lock_t)wg + 17)) {
    goto LABEL_12;
  }
  if (v4->sig == 1386695757)
  {
    uint64_t v8 = *(_DWORD *)v4->opaque & 1LL;
    goto LABEL_10;
  }

int os_workgroup_interval_finish(os_workgroup_interval_t wg, os_workgroup_interval_data_t data)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  os_workgroup_interval_data_t v3 = data;
  if (!data)
  {
    uint64_t v5 = (os_unfair_lock_s *)((char *)wg + 68);
    if (os_unfair_lock_trylock((os_unfair_lock_t)wg + 17)) {
      goto LABEL_9;
    }
LABEL_12:
    uint64_t v8 = *(_DWORD **)(StatusReg + 8);
    LODWORD(v3) = 16;
    goto LABEL_18;
  }

  if (*(_WORD *)&data->opaque[12] == 1 && *((_WORD *)wg + 22) != 1) {
    goto LABEL_17;
  }
  uint64_t v5 = (os_unfair_lock_s *)((char *)wg + 68);
  if (!os_unfair_lock_trylock((os_unfair_lock_t)wg + 17)) {
    goto LABEL_12;
  }
  if (v3->sig == 1386695757)
  {
    uint64_t v6 = *(_DWORD *)v3->opaque & 1LL;
    goto LABEL_10;
  }

uint64_t _os_workgroup_pthread_create_with_workgroup( pthread_t *a1, void *a2, const pthread_attr_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = _dispatch_calloc(1uLL, 0x18uLL);
  _os_object_retain_internal((uint64_t)a2);
  *uint64_t v10 = a2;
  v10[1] = a4;
  v10[2] = a5;
  uint64_t v12 = pthread_create(a1, a3, (void *(__cdecl *)(void *))_os_workgroup_pthread_start, v10);
  if ((_DWORD)v12)
  {
    _os_object_release_internal(a2, v11);
    free(v10);
  }

  return v12;
}

uint64_t _os_workgroup_pthread_start(os_workgroup_s **a1)
{
  int v1 = *a1;
  unint64_t v2 = a1[1];
  os_workgroup_interval_data_t v3 = a1[2];
  free(a1);
  int v4 = os_workgroup_join(v1, &token_out);
  if (v4) {
    _os_workgroup_pthread_start_cold_1(v4);
  }
  uint64_t v5 = ((uint64_t (*)(os_workgroup_s *))v2)(v3);
  os_workgroup_leave(v1, &token_out);
  _os_object_release_internal(v1, v6);
  return v5;
}

uint64_t _wg_type_to_wi_flags(unsigned int a1)
{
  if (a1 >= 0xB) {
    _wg_type_to_wi_flags_cold_1();
  }
  return dword_3FE50[(__int16)a1];
}

uint64_t _os_workgroup_lookup_type_from_workload_id(char *a1, unsigned int *a2, _WORD *a3)
{
  if (!a1) {
    _os_workgroup_lookup_type_from_workload_id_cold_1();
  }
  uint64_t v6 = 0LL;
  char v7 = 1;
  while (1)
  {
    char v8 = v7;
    if (!strcasecmp(a1, (&_os_workgroup_workload_id_table)[2 * v6])) {
      break;
    }
    char v7 = 0;
    uint64_t v6 = 1LL;
    if ((v8 & 1) == 0)
    {
      unsigned int v9 = 0;
      uint64_t result = 0LL;
      goto LABEL_7;
    }
  }

  uint64_t v11 = &(&_os_workgroup_workload_id_table)[2 * v6];
  uint64_t result = *((unsigned __int16 *)v11 + 4);
  unsigned int v9 = *((_DWORD *)v11 + 3) & 0xFFFFFFFA | 1;
LABEL_7:
  if (v9 <= 1) {
    unsigned int v9 = 1;
  }
  *a2 = v9;
  *a3 = result;
  return result;
}

void OUTLINED_FUNCTION_0_0(uint64_t a1@<X8>)
{
  **(_DWORD **)(a1 + 8) = 22;
}

  ;
}

void OUTLINED_FUNCTION_3(uint64_t a1)
{
}

uint64_t OUTLINED_FUNCTION_4()
{
  return _os_crash(v0);
}

uint64_t OUTLINED_FUNCTION_5(char *a1, uint64_t a2, const char *a3)
{
  return snprintf(a1, 0x200uLL, a3);
}

uint64_t dispatch_atfork_prepare()
{
  uint64_t v0 = _voucher_atfork_prepare();
  return _os_object_atfork_prepare(v0);
}

uint64_t dispatch_atfork_parent()
{
  return _voucher_atfork_parent();
}

void dispatch_atfork_child()
{
  if ((_dispatch_unsafe_fork & 1) != 0) {
    _dispatch_child_of_unsafe_fork = 1;
  }
  _dispatch_queue_atfork_child();
  _dispatch_unsafe_fork = 0;
}

uint64_t _dispatch_sigmask()
{
  sigset_t v3 = -67116761;
  uint64_t v0 = pthread_sigmask(1, &v3, 0LL);
  uint64_t v1 = v0;
  if ((_DWORD)v0) {
    _dispatch_bug(108LL, (int)v0);
  }
  return v1;
}

uint64_t _dispatch_is_multithreaded()
{
  return _dispatch_unsafe_fork & 1;
}

uint64_t _dispatch_is_fork_of_multithreaded_parent()
{
  return _dispatch_child_of_unsafe_fork;
}

dispatch_queue_t dispatch_get_current_queue(void)
{
  uint64_t v0 = *(dispatch_queue_s **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160);
  if (v0) {
    return v0;
  }
  else {
    return (dispatch_queue_t)&off_653C0;
  }
}

uint64_t *_dispatch_queue_attr_to_info(uint64_t *result)
{
  if (result)
  {
    uint64_t v1 = (char *)result - (char *)&_dispatch_queue_attr_concurrent;
    unint64_t v3 = (((unint64_t)(v1 >> 4) >> 6) * (unsigned __int128)0x2492492492492493uLL) >> 64;
    unint64_t v4 = (((unint64_t)(v1 >> 4) >> 6) * (unsigned __int128)0xC30C30C30C30C31uLL) >> 64;
    return (uint64_t *)((((_DWORD)v1 << 15) & 0x100000 | (((v1 >> 4) & 1) << 21) | -(((v1 >> 4) << 6) & 0xF00) & 0xFF00 | (((unint64_t)(v1 >> 4) >> 6) - 7 * (_DWORD)v3) | ((v3 - 3 * ((v3 * (unsigned __int128)0x5555555555555556uLL) >> 64)) << 18) | ((v4 - 3 * ((v4 * (unsigned __int128)0x5555555555555556uLL) >> 64)) << 16)) ^ 0x100000);
  }

  return result;
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class( dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  if (qos_class <= QOS_CLASS_USER_INTERACTIVE)
  {
    unsigned __int8 v3 = relative_priority;
    if (((1LL << qos_class) & 0x202220221LL) != 0
      && (relative_priority == 0 || relative_priority >= 0xFFFFFFF1))
    {
      uint64_t v6 = _dispatch_queue_attr_to_info((uint64_t *)attr);
      HIDWORD(v8) = qos_class - 5;
      LODWORD(v8) = qos_class - 5;
      unsigned int v7 = v8 >> 2;
      if (v7 > 7) {
        int v9 = 0;
      }
      else {
        int v9 = dword_3FEE4[v7];
      }
      return (dispatch_queue_attr_t)_dispatch_queue_attr_from_info(v6 & 0x3F0000 | (v3 << 8) | v9);
    }
  }

  return attr;
}

char *_dispatch_queue_attr_from_info(unint64_t a1)
{
  return (char *)&_dispatch_queue_attr_concurrent
       + 16
       * (((a1 >> 21) & 1 | (2
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  unsigned int v1 = _dispatch_queue_attr_to_info((uint64_t *)attr);
  return (dispatch_queue_attr_t)_dispatch_queue_attr_from_info(v1 | 0x200000);
}

char *dispatch_queue_attr_make_with_overcommit(uint64_t *a1, int a2)
{
  unsigned int v3 = _dispatch_queue_attr_to_info(a1) & 0x3CFFFF;
  if (a2) {
    int v4 = 0x10000;
  }
  else {
    int v4 = 0x20000;
  }
  return _dispatch_queue_attr_from_info(v3 | v4);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency( dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  unint64_t v2 = _dispatch_queue_attr_to_info((uint64_t *)attr) & 0x33FFFF | ((frequency & 3) << 18);
  return (dispatch_queue_attr_t)_dispatch_queue_attr_from_info(v2);
}

void _dispatch_object_no_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 40LL);
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: do_invoke called";
  qword_61258 = v1;
  __break(1u);
}

void _dispatch_object_no_dispose(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 40LL);
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: do_dispose called";
  qword_61258 = v1;
  __break(1u);
}

size_t _dispatch_object_missing_debug(int a1, char *__dst, size_t a3)
{
  return strlcpy(__dst, "missing do_debug vtable slot: ", a3);
}

void _dispatch_queue_no_activate(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 40LL);
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: dq_activate called";
  qword_61258 = v1;
  __break(1u);
}

void _dispatch_data_destructor_free_block_invoke(id a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: free destructor called";
  __break(1u);
}

void _dispatch_data_destructor_none_block_invoke_2(id a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: none destructor called";
  __break(1u);
}

void _dispatch_data_destructor_vm_deallocate_block_invoke_3(id a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: vmdeallocate destructor called";
  __break(1u);
}

void _dispatch_data_destructor_inline_block_invoke_4(id a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: inline destructor called";
  __break(1u);
}

BOOL _dispatch_parse_BOOL(const char *a1)
{
  return !strcasecmp(a1, "YES") || !strcasecmp(a1, "Y") || !strcasecmp(a1, "TRUE") || atoi(a1) != 0;
}

BOOL _dispatch_getenv_BOOL(const char *a1, uint64_t a2)
{
  unsigned int v3 = getenv(a1);
  if (v3) {
    return _dispatch_parse_BOOL(v3);
  }
  else {
    return a2;
  }
}

uint64_t _dispatch_build_init()
{
  *(void *)unint64_t v2 = 0x4100000001LL;
  size_t v1 = 16LL;
  return sysctl(v2, 2u, &unk_61390, &v1, 0LL, 0LL);
}

uint64_t _dispatch_fault(uint64_t a1, char *__format, ...)
{
  uint64_t result = vsnprintf(__str, 0x400uLL, __format, va);
  if ((_dispatch_mode & 1) != 0)
  {
    qword_61240 = (uint64_t)__str;
  }

  else if ((_dispatch_mode & 2) == 0)
  {
    return _dispatch_fault_cold_1(__str, a1);
  }

  return result;
}

uint64_t _dispatch_continuation_get_function_symbol(void *a1)
{
  if ((*a1 & 0x20) != 0)
  {
    uint64_t v2 = a1[5];
    uint64_t v3 = *(void *)(v2 + 32);
    if (v3 != 3512316172LL) {
      _dispatch_continuation_get_function_symbol_cold_1(v3);
    }
    uint64_t v4 = *(void *)(v2 + 72);
    goto LABEL_7;
  }

  if ((*a1 & 0x10) != 0)
  {
    uint64_t v4 = a1[5];
LABEL_7:
    size_t v1 = (void *)(v4 + 16);
    return *v1;
  }

  size_t v1 = a1 + 4;
  return *v1;
}

void _dispatch_debugv(unint64_t *a1, const char *a2, va_list a3)
{
  if (a1)
  {
    unint64_t v5 = *a1;
    if ((*a1 & 1) != 0
      || (v5 >= (unint64_t)&OBJC_CLASS___OS_dispatch_object
        ? (BOOL v6 = v5 >= (unint64_t)&OBJC_CLASS___OS_object)
        : (BOOL v6 = 1),
          v6))
    {
      uint64_t v7 = _dispatch_objc_debug(a1, (uint64_t)v11, 2048LL);
    }

    else
    {
      uint64_t v7 = (*(uint64_t (**)(void))(v5 + 56))();
    }

    uint64_t v8 = v7 + 2;
    *(_WORD *)&v11[v7] = 8250;
    v11[v7 + 2] = 0;
  }

  else
  {
    uint64_t v8 = __strlcpy_chk(v11, "NULL: ", 2048LL, 2048LL);
  }

  int v9 = vsnprintf(&v11[v8], 2048 - v8, a2, a3);
  else {
    uint64_t v10 = v8 + (v9 & ~(v9 >> 31));
  }
  if (qword_61388 != -1) {
    dispatch_once_f(&qword_61388, 0LL, (dispatch_function_t)_dispatch_logv_init);
  }
  if ((_MergedGlobals & 1) == 0)
  {
    if (dispatch_logfile == -1) {
      _simple_asl_log(5LL, "com.apple.libsystem.libdispatch");
    }
    else {
      _dispatch_log_file((uint64_t)v11, v10);
    }
  }

uint64_t _dispatch_temporary_resource_shortage()
{
  return sleep_NOCANCEL(1LL);
}

void *_dispatch_calloc(size_t a1, size_t a2)
{
  size_t v2 = a2;
  size_t v3 = a1;
  while (1)
  {
    uint64_t result = calloc(a1, a2);
    if (result) {
      break;
    }
    _dispatch_temporary_resource_shortage();
    a1 = v3;
    a2 = v2;
  }

  return result;
}

const char *_dispatch_strdup_if_mutable(const char *a1)
{
  size_t v1 = a1;
  size_t v2 = strlen(a1) + 1;
  if ((_dyld_is_memory_immutable(v1, v2) & 1) == 0)
  {
    uint64_t v4 = malloc(v2);
    if (v4)
    {
      unint64_t v5 = v4;
      memcpy(v4, v1, v2);
      return (const char *)v5;
    }

    else
    {
      _dispatch_strdup_if_mutable_cold_1();
      return 0LL;
    }
  }

  return v1;
}

void *_dispatch_Block_copy(void *aBlock)
{
  if (!aBlock) {
    _dispatch_Block_copy_cold_1();
  }
  while (1)
  {
    uint64_t result = _Block_copy(aBlock);
    if (result) {
      break;
    }
    _dispatch_temporary_resource_shortage();
  }

  return result;
}

void _dispatch_call_block_and_release(void (**a1)(void))
{
}

uint64_t dispatch_mach_msg_get_context(uint64_t a1)
{
  uint64_t v1 = a1 + ((*(unsigned int *)(a1 + 4) + 3LL) & 0x1FFFFFFFCLL);
  if (*(_DWORD *)(v1 + 4) < 0x3Cu) {
    return 0LL;
  }
  else {
    return *(void *)(v1 + 52);
  }
}

uint64_t _dispatch_wakeup_runloop_thread()
{
  return 0LL;
}

void _dispatch_mach_notify_port_destroyed(uint64_t a1, unsigned int a2)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: unexpected receipt of port-destroyed";
  qword_61258 = a2;
  __break(1u);
}

void _dispatch_mach_notify_no_senders(uint64_t a1, unsigned int a2)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: unexpected receipt of no-more-senders";
  qword_61258 = a2;
  __break(1u);
}

uint64_t _dispatch_mach_xpc_no_handle_message()
{
  return 0LL;
}

uint64_t _dispatch_mach_msg_context_no_async_reply_queue()
{
  return 0LL;
}

void _dispatch_mach_default_async_reply_handler()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: _dispatch_mach_default_async_reply_handler called";
  qword_61258 = (uint64_t)_dispatch_mach_xpc_hooks;
  __break(1u);
}

uint64_t _dispatch_mach_enable_sigterm()
{
  return 1LL;
}

const char *_dispatch_logv_init()
{
  uint64_t result = getenv("LIBDISPATCH_LOG");
  if (!result) {
    goto LABEL_7;
  }
  uint64_t v1 = result;
  uint64_t result = (const char *)strcmp(result, "YES");
  if (!(_DWORD)result) {
    goto LABEL_7;
  }
  uint64_t result = (const char *)strcmp(v1, "NO");
  if (!(_DWORD)result)
  {
    _MergedGlobals = 1;
    return result;
  }

  uint64_t result = (const char *)strcmp(v1, "syslog");
  if (!(_DWORD)result) {
    goto LABEL_7;
  }
  uint64_t result = (const char *)strcmp(v1, "file");
  if ((_DWORD)result)
  {
    uint64_t result = (const char *)strcmp(v1, "stderr");
    if ((_DWORD)result)
    {
LABEL_7:
      int v2 = 0;
      goto LABEL_8;
    }

    dispatch_logfile = 2;
  }

  int v2 = 1;
LABEL_8:
  if ((_MergedGlobals & 1) == 0)
  {
    uint64_t result = (const char *)dispatch_logfile;
    if (dispatch_logfile != -1) {
      int v2 = 0;
    }
    if (v2 == 1)
    {
      pid_t v3 = getpid();
      snprintf((char *)__str, 0x400uLL, "/var/tmp/libdispatch.%d.log", v3);
      uint64_t result = (const char *)open_NOCANCEL(__str, 16777993LL);
      dispatch_logfile = (int)result;
    }

    if ((_DWORD)result != -1)
    {
      gettimeofday(__str, 0LL);
      int v4 = dispatch_logfile;
      unint64_t v5 = getprogname();
      if (v5) {
        BOOL v6 = v5;
      }
      else {
        BOOL v6 = (const char *)&unk_416DE;
      }
      pid_t v7 = getpid();
      return (const char *)dprintf( v4,  "=== log file opened for %s[%u] at %ld.%06u ===\n",  v6,  v7,  __str[0].tv_sec,  __str[0].tv_usec);
    }
  }

  return result;
}

uint64_t _dispatch_log_file(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 1;
  *(_BYTE *)(a1 + a2) = 10;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
    uint64_t result = write_NOCANCEL(dispatch_logfile, a1, v3);
  while (result == -1 && **(_DWORD **)(StatusReg + 8) == 4);
  return result;
}

uint64_t _dispatch_logv_file(char *__format, va_list a2)
{
  uint64_t result = vsnprintf(__str, 0x800uLL, __format, a2);
  if ((result & 0x80000000) == 0)
  {
    else {
      uint64_t v3 = result;
    }
    uint64_t v4 = v3 + 1;
    __str[v3] = 10;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
      uint64_t result = write_NOCANCEL(dispatch_logfile, __str, v4);
    while (result == -1 && **(_DWORD **)(StatusReg + 8) == 4);
  }

  return result;
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

char *OUTLINED_FUNCTION_5_0()
{
  return strerror(v0);
}

uint64_t _os_object_retain_count(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 12);
  if (v1 == 0x7FFFFFFF) {
    return -1;
  }
  return v1;
}

uint64_t _os_object_retain_internal(uint64_t result)
{
  if (*(_DWORD *)(result + 8) != 0x7FFFFFFF)
  {
    int v1 = (unsigned int *)(result + 8);
    do
      int v2 = __ldxr(v1);
    while (__stxr(v2 + 1, v1));
    if (v2 <= 0)
    {
      qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
    }
  }

  return result;
}

uint64_t _os_object_retain_internal_n(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 8) != 0x7FFFFFFF)
  {
    int v2 = (unsigned int *)(result + 8);
    do
      int v3 = __ldxr(v2);
    while (__stxr(v3 + a2, v2));
    if (v3 <= 0)
    {
      qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
    }
  }

  return result;
}

void *_os_object_release_internal(void *a1, const char *a2)
{
  if (*((_DWORD *)a1 + 2) != 0x7FFFFFFF)
  {
    int v2 = (unsigned int *)((char *)a1 + 8);
    do
      int v3 = __ldxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (v3 <= 1)
    {
      if (v3 == 1)
      {
        return _os_object_dispose(a1, a2);
      }

      else
      {
        qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
      }
    }
  }

  return a1;
}

void *_os_object_release_internal_n(void *a1, const char *a2)
{
  if (*((_DWORD *)a1 + 2) != 0x7FFFFFFF)
  {
    int v2 = (unsigned int *)((char *)a1 + 8);
    do
    {
      unsigned int v3 = __ldxr(v2);
      signed int v4 = v3 - (_DWORD)a2;
    }

    while (__stlxr(v4, v2));
    if (v4 <= 0)
    {
      if (v4 < 0)
      {
        qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
      }

      else
      {
        return _os_object_dispose(a1, a2);
      }
    }
  }

  return a1;
}

uint64_t _os_object_retain(uint64_t result)
{
  if (*(_DWORD *)(result + 12) != 0x7FFFFFFF)
  {
    int v1 = (unsigned int *)(result + 12);
    do
      int v2 = __ldxr(v1);
    while (__stxr(v2 + 1, v1));
    if (v2 <= 0)
    {
      qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
    }
  }

  return result;
}

uint64_t _os_object_retain_with_resurrect(uint64_t result)
{
  if (*(_DWORD *)(result + 12) == 0x7FFFFFFF) {
    goto LABEL_7;
  }
  int v1 = (unsigned int *)(result + 12);
  do
    unsigned int v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  if ((v2 & 0x80000000) != 0)
  {
LABEL_7:
    qword_61228 = (uint64_t)"API MISUSE: Resurrection of an over-released object";
    __break(1u);
    return _os_object_retain_internal(result);
  }

  if (!v2) {
    return _os_object_retain_internal(result);
  }
  return result;
}

void *_os_object_release(void *a1, const char *a2)
{
  if (*((_DWORD *)a1 + 3) != 0x7FFFFFFF)
  {
    unsigned int v2 = (unsigned int *)((char *)a1 + 12);
    do
      int v3 = __ldxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (v3 <= 1)
    {
      if (v3 == 1)
      {
        return _os_object_xref_dispose(a1, a2);
      }

      else
      {
        qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
      }
    }
  }

  return a1;
}

void *_os_object_release_without_xref_dispose(void *a1, const char *a2)
{
  if (*((_DWORD *)a1 + 3) != 0x7FFFFFFF)
  {
    unsigned int v2 = (unsigned int *)((char *)a1 + 12);
    do
      int v3 = __ldxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (v3 <= 1)
    {
      if (v3 == 1)
      {
        return _os_object_release_internal(a1, a2);
      }

      else
      {
        qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
      }
    }
  }

  return a1;
}

uint64_t _os_object_retain_weak(uint64_t a1)
{
  int v1 = (unsigned int *)(a1 + 12);
  while (1)
  {
    unsigned int v2 = __ldxr(v1);
    if (v2 == 0x7FFFFFFF)
    {
      uint64_t result = 1LL;
      goto LABEL_10;
    }

    if (!v2) {
      break;
    }
    if ((v2 & 0x80000000) != 0) {
      _os_object_retain_weak_cold_1();
    }
    if (!__stxr(v2 + 1, v1)) {
      return 1LL;
    }
  }

  uint64_t result = 0LL;
LABEL_10:
  __clrex();
  return result;
}

BOOL _os_object_allows_weak_reference(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 12);
  if (v1 < 0) {
    _os_object_allows_weak_reference_cold_1();
  }
  return v1 != 0;
}

void dispatch_retain(dispatch_object_t object)
{
  unint64_t v1 = *(void *)object;
  if ((*(void *)object & 1) != 0
    || (v1 >= (unint64_t)&OBJC_CLASS___OS_dispatch_object
      ? (BOOL v2 = v1 >= (unint64_t)&OBJC_CLASS___OS_object)
      : (BOOL v2 = 1),
        v2))
  {
    _dispatch_objc_retain(object);
  }

  else
  {
    _os_object_retain((uint64_t)object);
  }

void dispatch_release(dispatch_object_t object)
{
  unint64_t v2 = *(void *)object;
  if ((*(void *)object & 1) != 0
    || (v2 >= (unint64_t)&OBJC_CLASS___OS_dispatch_object
      ? (BOOL v3 = v2 >= (unint64_t)&OBJC_CLASS___OS_object)
      : (BOOL v3 = 1),
        v3))
  {
    _dispatch_objc_release(object);
  }

  else if (*((_DWORD *)object + 3) != 0x7FFFFFFF)
  {
    signed int v4 = (unsigned int *)((char *)object + 12);
    do
      int v5 = __ldxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (v5 <= 1)
    {
      if (v5 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      atomic_load((unsigned int *)object + 3);
      _dispatch_xref_dispose((unint64_t *)object, v1);
    }
  }

void *_dispatch_xref_dispose(unint64_t *a1, const char *a2)
{
  if ((*(void *)(*a1 + 40) & 0xF0LL) == 0x10)
  {
    _dispatch_queue_xref_dispose((uint64_t)a1);
    uint64_t v3 = *(void *)(*a1 + 40);
    if (v3 > 786)
    {
      if (v3 == 787)
      {
        if ((*((_WORD *)a1 + 58) & 0x10) != 0) {
          *(void *)(a1[11] + 48) = 195952365LL;
        }
      }

      else if (v3 == 395025)
      {
        _dispatch_runloop_queue_xref_dispose(a1);
      }
    }

    else if (v3 == 275)
    {
      _dispatch_source_xref_dispose((uint64_t)a1);
    }

    else if (v3 == 531)
    {
      _dispatch_channel_xref_dispose((uint64_t)a1);
    }
  }

  return _os_object_release_internal(a1, a2);
}

void _dispatch_dispose(uint64_t *a1)
{
  unint64_t v2 = (__objc2_class **)a1[3];
  uint64_t v3 = (void (__cdecl *)(void *))_dispatch_object_finalizer(a1);
  signed int v4 = (void *)a1[4];
  char v6 = 1;
  if (a1[2] != -1985229329) {
    _dispatch_dispose_cold_1(a1 + 2);
  }
  (*(void (**)(uint64_t *, char *))(*a1 + 48))(a1, &v6);
  if (v6)
  {
    objc_destructInstance(a1);
    free(a1);
  }

  if (v3 && v4) {
    dispatch_channel_async_f((dispatch_queue_t)v2, v4, v3);
  }
  if (v2) {
    _os_object_release_internal(v2, v5);
  }
}

void *__cdecl dispatch_get_context(dispatch_object_t object)
{
  unint64_t v1 = *(void *)object;
  if ((*(void *)object & 1) != 0) {
    return (void *)_dispatch_objc_get_context();
  }
  if ((*(_BYTE *)(v1 + 42) & 4) != 0) {
    return 0LL;
  }
  return (void *)*((void *)object + 4);
}

void dispatch_set_context(dispatch_object_t object, void *context)
{
  unint64_t v2 = *(void *)object;
  if ((*(void *)object & 1) != 0
    || (v2 >= (unint64_t)&OBJC_CLASS___OS_dispatch_object
      ? (BOOL v3 = v2 >= (unint64_t)&OBJC_CLASS___OS_object)
      : (BOOL v3 = 1),
        v3))
  {
    _dispatch_objc_set_context(object, (const char *)context);
  }

  else if ((*(_BYTE *)(v2 + 42) & 4) == 0)
  {
    *((void *)object + 4) = context;
  }

void dispatch_set_finalizer_f(dispatch_object_t object, dispatch_function_t finalizer)
{
  unint64_t v2 = *(void *)object;
  if ((*(void *)object & 1) != 0
    || (v2 >= (unint64_t)&OBJC_CLASS___OS_dispatch_object
      ? (BOOL v3 = v2 >= (unint64_t)&OBJC_CLASS___OS_object)
      : (BOOL v3 = 1),
        v3))
  {
    _dispatch_objc_set_finalizer_f(object, (const char *)finalizer);
  }

  else if ((*(_BYTE *)(v2 + 42) & 4) == 0)
  {
    _dispatch_object_set_finalizer(object, (uint64_t)finalizer);
  }

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
  unint64_t v4 = *(void *)object;
  if ((*(void *)object & 1) != 0
    || (v4 >= (unint64_t)&OBJC_CLASS___OS_dispatch_object
      ? (BOOL v5 = v4 >= (unint64_t)&OBJC_CLASS___OS_object)
      : (BOOL v5 = 1),
        v5))
  {
    _dispatch_objc_set_target_queue(object, (const char *)queue);
  }

  else if (*((_DWORD *)object + 2) != 0x7FFFFFFF)
  {
    uint64_t v6 = *(void *)(v4 + 40);
    if ((v6 & 0x30000) == 0)
    {
      if (queue && (*((_BYTE *)queue + 87) & 8) != 0 && v6 != 1 && v4 >= 0x1000)
      {
        uint64_t v6 = *(void *)(*(void *)object + 40LL);
      }

      if ((v6 & 0xF0) == 0x10)
      {
        _dispatch_lane_set_target_queue((unint64_t *)object, (char *)queue);
      }

      else if (v6 == 4)
      {
        _dispatch_io_set_target_queue((uint64_t)object, (uint64_t)queue);
      }

      else
      {
        dispatch_queue_t v7 = (dispatch_queue_t)&off_65340;
        if (queue) {
          dispatch_queue_t v7 = queue;
        }
        if (*((_DWORD *)v7 + 2) != 0x7FFFFFFF)
        {
          uint64_t v8 = (unsigned int *)((char *)v7 + 8);
          do
            int v9 = __ldxr(v8);
          while (__stxr(v9 + 1, v8));
          if (v9 <= 0) {
            dispatch_set_target_queue_cold_2();
          }
        }

        uint64_t v10 = (unint64_t *)((char *)object + 24);
        do
          uint64_t v11 = (unsigned int *)__ldxr(v10);
        while (__stlxr((unint64_t)v7, v10));
        if (v11)
        {
          if (v11[2] != 0x7FFFFFFF)
          {
            uint64_t v12 = v11 + 2;
            do
              int v13 = __ldxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (v13 <= 1)
            {
              if (v13 != 1) {
                _os_object_allows_weak_reference_cold_1();
              }
              _os_object_dispose(v11, (const char *)queue);
            }
          }
        }
      }
    }
  }

void dispatch_activate(dispatch_object_t object)
{
  unint64_t v1 = *(void *)object;
  if ((*(void *)object & 1) != 0
    || (v1 >= (unint64_t)&OBJC_CLASS___OS_dispatch_object
      ? (BOOL v2 = v1 >= (unint64_t)&OBJC_CLASS___OS_object)
      : (BOOL v2 = 1),
        v2))
  {
    _dispatch_objc_activate();
  }

  else if (*((_DWORD *)object + 2) != 0x7FFFFFFF)
  {
    uint64_t v3 = *(unsigned __int8 *)(v1 + 40);
    if (v3 == 18)
    {
      _dispatch_workloop_activate((uint64_t)object);
    }

    else if ((v3 & 0xF0) == 0x10)
    {
      _dispatch_lane_resume((uint64_t)object, 1LL);
    }
  }

void dispatch_suspend(dispatch_object_t object)
{
  unint64_t v2 = *(void *)object;
  if ((*(void *)object & 1) != 0
    || (v2 >= (unint64_t)&OBJC_CLASS___OS_dispatch_object
      ? (BOOL v3 = v2 >= (unint64_t)&OBJC_CLASS___OS_object)
      : (BOOL v3 = 1),
        v3))
  {
    _dispatch_objc_suspend(object);
  }

  else if (*((_DWORD *)object + 2) != 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)(v2 + 40);
    if ((v4 & 0x300F0) == 0x10)
    {
      _dispatch_lane_suspend((uint64_t)object);
    }
  }

void dispatch_resume(dispatch_object_t object)
{
  unint64_t v2 = *(void *)object;
  if ((*(void *)object & 1) != 0
    || (v2 >= (unint64_t)&OBJC_CLASS___OS_dispatch_object
      ? (BOOL v3 = v2 >= (unint64_t)&OBJC_CLASS___OS_object)
      : (BOOL v3 = 1),
        v3))
  {
    _dispatch_objc_resume(object);
  }

  else if (*((_DWORD *)object + 2) != 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)(v2 + 40);
    if ((v4 & 0x300F0) == 0x10)
    {
      _dispatch_lane_resume((uint64_t)object, 0LL);
    }
  }

const char *_os_object_init()
{
  Block_callbacks_RR v3 = off_58648;
  _Block_use_RR2(&v3);
  int v0 = getenv("OBJC_DEBUG_MISSING_POOLS");
  if (v0) {
    _os_object_debug_missing_pools = _dispatch_parse_BOOL(v0);
  }
  unint64_t v1 = getenv("DISPATCH_DEBUG_MISSING_POOLS");
  if (v1) {
    _os_object_debug_missing_pools = _dispatch_parse_BOOL(v1);
  }
  uint64_t result = getenv("LIBDISPATCH_DEBUG_MISSING_POOLS");
  if (result)
  {
    uint64_t result = (const char *)_dispatch_parse_BOOL(result);
    _os_object_debug_missing_pools = (char)result;
  }

  return result;
}

id _os_object_alloc_bridged(objc_class *a1, uint64_t a2)
{
  unint64_t v2 = a1;
  size_t v3 = a2 - 8;
  while (1)
  {
    id result = class_createInstance(a1, v3);
    if (result) {
      break;
    }
    _dispatch_temporary_resource_shortage();
    a1 = v2;
  }

  return result;
}

_DWORD *_os_object_alloc_realized(objc_class *a1, uint64_t a2)
{
  unint64_t v2 = a1;
  size_t v3 = a2 - 8;
  while (1)
  {
    id result = class_createInstance(a1, v3);
    if (result) {
      break;
    }
    _dispatch_temporary_resource_shortage();
    a1 = v2;
  }

  result[2] = 1;
  result[3] = 1;
  return result;
}

_DWORD *_os_object_alloc(__objc2_class *a1, uint64_t a2)
{
  if (!a1) {
    a1 = &OBJC_CLASS___OS_object;
  }
  size_t v3 = (objc_class *)objc_opt_class(a1);
  return _os_object_alloc_realized(v3, a2);
}

id _os_object_xref_dispose(void *a1, const char *a2)
{
  return objc_msgSend(a1, "_xref_dispose");
}

id _os_object_dispose(void *a1, const char *a2)
{
  return [a1 dealloc];
}

id _dispatch_objc_alloc(objc_class *a1, uint64_t a2)
{
  unint64_t v2 = a1;
  size_t v3 = a2 - 8;
  while (1)
  {
    id result = class_createInstance(a1, v3);
    if (result) {
      break;
    }
    _dispatch_temporary_resource_shortage();
    a1 = v2;
  }

  return result;
}

id _dispatch_objc_set_context(void *a1, const char *a2)
{
  return [a1 _setContext:a2];
}

id _dispatch_objc_set_finalizer_f(void *a1, const char *a2)
{
  return [a1 _setFinalizer:a2];
}

id _dispatch_objc_set_target_queue(void *a1, const char *a2)
{
  return [a1 _setTargetQueue:a2];
}

void *_dispatch_last_resort_autorelease_pool_push(void *result)
{
  if (!_os_object_debug_missing_pools)
  {
    unint64_t v1 = result;
    id result = objc_autoreleasePoolPush();
    v1[3] = result;
  }

  return result;
}

void _dispatch_last_resort_autorelease_pool_pop(uint64_t a1)
{
  if (!_os_object_debug_missing_pools)
  {
    objc_autoreleasePoolPop(*(void **)(a1 + 24));
    *(void *)(a1 + 24) = 0LL;
  }

uint64_t _dispatch_client_callout(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_69A8(void *a1)
{
}

void sub_69B4(_Unwind_Exception *a1)
{
}

uint64_t _dispatch_client_callout2(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

void sub_69E4(void *a1)
{
}

void sub_69F0(_Unwind_Exception *a1)
{
}

uint64_t _dispatch_client_callout3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

void sub_6A20(void *a1)
{
}

void sub_6A2C(_Unwind_Exception *a1)
{
}

uint64_t _dispatch_client_callout4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

void sub_6A5C(void *a1)
{
}

void sub_6A68(_Unwind_Exception *a1)
{
}

uint64_t _dispatch_client_callout3_a(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

void sub_6A98(void *a1)
{
}

void sub_6AA4(_Unwind_Exception *a1)
{
}

uint64_t _dispatch_wait_for_enqueuer(unint64_t *a1, uint64_t a2)
{
  int v2 = -10;
  while (1)
  {
    unint64_t v3 = __ldxr(a1);
    if (v3) {
      break;
    }
    __wfe();
    if (__CFADD__(v2++, 1)) {
      return __DISPATCH_WAIT_FOR_ENQUEUER__((uint64_t *)a1, a2);
    }
  }

  __clrex();
  return v3;
}

uint64_t __DISPATCH_WAIT_FOR_ENQUEUER__(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = 1LL;
    do
    {
      _pthread_yield_to_enqueuer_4dispatch(122LL, a2, v5);
      uint64_t result = *a1;
      uint64_t v5 = (v5 + 1);
    }

    while (!*a1);
  }

  return result;
}

void *_dispatch_block_create(uint64_t a1, void *a2, uint64_t a3, void *aBlock)
{
  uint64_t v21 = 0LL;
  uint64_t v22 = a1;
  int v23 = 0;
  int v24 = 0;
  uint64_t v25 = a3;
  v26 = a2;
  dispatch_group_t v28 = 0LL;
  v29 = 0LL;
  v27 = aBlock;
  int v30 = 0;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1174405120LL;
  v10[2] = ___dispatch_block_create_block_invoke;
  v10[3] = &__block_descriptor_tmp_0;
  uint64_t v11 = 3512316172LL;
  uint64_t v12 = a1;
  int v13 = 0;
  int v14 = 0;
  uint64_t v15 = a3;
  object = a2;
  aBlocka = 0LL;
  dispatch_group_t group = 0LL;
  int v20 = 0;
  __int128 v19 = 0LL;
  if ((unint64_t)a2 + 1 < 2)
  {
    if (!aBlock) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  voucher_retain(a2);
  if (aBlock) {
LABEL_3:
  }
    aBlocka = _dispatch_Block_copy(aBlock);
LABEL_4:
  uint64_t v6 = _dispatch_Block_copy(v10);
  if (MEMORY[0xFFFFFC100]) {
    kdebug_trace(772079632LL, v10, 0LL, 0LL, 0LL);
  }
  if (v11 == 3512316172LL)
  {
    dispatch_group_t v7 = group;
    if (group)
    {
      if (!v14)
      {
        dispatch_group_leave(group);
        dispatch_group_t v7 = group;
      }

      _os_object_release_without_xref_dispose(v7, v5);
    }

    if (v19) {
      _os_object_release_internal_n(v19, (_BYTE *)&dword_0 + 2);
    }
    if (aBlocka) {
      _Block_release(aBlocka);
    }
  }

  if (MEMORY[0xFFFFFC100]) {
    kdebug_trace(772079632LL, &aBlocka, 0LL, 0LL, 0LL);
  }
  if (v21 == 3512316172LL)
  {
    dispatch_group_t v8 = v28;
    if (v28)
    {
      if (!v24)
      {
        dispatch_group_leave(v28);
        dispatch_group_t v8 = v28;
      }

      _os_object_release_without_xref_dispose(v8, v5);
    }

    if (v29) {
      _os_object_release_internal_n(v29, (_BYTE *)&dword_0 + 2);
    }
    if (v27) {
      _Block_release(v27);
    }
  }

  return v6;
}

void ___dispatch_block_create_block_invoke(uint64_t a1)
{
}

void *__copy_helper_block_8_32c35_ZTS29dispatch_block_private_data_s(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[5];
  uint64_t v6 = a2[7];
  uint64_t v5 = (void *)a2[8];
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 32) = 3512316172LL;
  *(void *)(a1 + 40) = v4;
  *(_DWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = v5;
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 88) = 0LL;
  uint64_t result = (void *)a2[9];
  if (result)
  {
    uint64_t result = _dispatch_Block_copy(result);
    *(void *)(a1 + 72) = result;
  }

  if (a2[4])
  {
    uint64_t result = (void *)_dispatch_group_create_and_enter();
    *(void *)(a1 + 80) = result;
  }

  return result;
}

void __destroy_helper_block_8_32c35_ZTS29dispatch_block_private_data_s(uint64_t a1, const char *a2)
{
  if (MEMORY[0xFFFFFC100]) {
    kdebug_trace(772079632LL, a1, 0LL, 0LL, 0LL);
  }
  if (*(void *)(a1 + 32) == 3512316172LL)
  {
    unint64_t v3 = *(dispatch_group_s **)(a1 + 80);
    if (v3)
    {
      if (!*(_DWORD *)(a1 + 52))
      {
        dispatch_group_leave(v3);
        unint64_t v3 = *(dispatch_group_s **)(a1 + 80);
      }

      _os_object_release_without_xref_dispose(v3, a2);
    }

    uint64_t v4 = *(void **)(a1 + 88);
    if (v4) {
      _os_object_release_internal_n(v4, (_BYTE *)&dword_0 + 2);
    }
    uint64_t v5 = *(const void **)(a1 + 72);
    if (v5) {
      _Block_release(v5);
    }
    uint64_t v6 = *(void **)(a1 + 64);
  }

uint64_t _dispatch_sema4_create_slow(unsigned int *a1, int policy)
{
  semaphore_t semaphore = 0;
  if ((_dispatch_unsafe_fork & 1) != 0)
  {
    if (policy) {
      goto LABEL_3;
    }
  }

  else
  {
    _dispatch_fork_becomes_unsafe_slow();
    if (policy)
    {
LABEL_3:
      uint64_t result = semaphore_create(mach_task_self_, &semaphore, policy, 0);
      if ((_DWORD)result == -301) {
        _dispatch_sema4_create_slow_cold_2();
      }
      if ((_DWORD)result)
      {
        if ((_DWORD)result == 15) {
          _dispatch_sema4_create_slow_cold_3();
        }
        _dispatch_sema4_create_slow_cold_1(result);
      }

      semaphore_t v5 = semaphore;
      while (!__ldxr(a1))
      {
        if (!__stxr(v5, a1)) {
          return result;
        }
      }

      __clrex();
      uint64_t result = semaphore_destroy(mach_task_self_, v5);
      if ((_DWORD)result == -301) {
        _dispatch_sema4_create_slow_cold_2();
      }
      if ((_DWORD)result)
      {
        if ((_DWORD)result == 15) {
          _dispatch_sema4_create_slow_cold_3();
        }
        _dispatch_sema4_create_slow_cold_1(result);
      }

      return result;
    }
  }

  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t result = *(void *)(StatusReg + 72);
  if (result) {
    *(void *)(StatusReg + 72) = 0LL;
  }
  else {
    uint64_t result = _os_semaphore_create();
  }
  while (!__ldxr(a1))
  {
    if (!__stxr(result, a1)) {
      return result;
    }
  }

  __clrex();
  uint64_t v9 = result;
  uint64_t result = *(void *)(StatusReg + 72);
  *(void *)(StatusReg + 72) = v9;
  if (result) {
    return _os_semaphore_dispose();
  }
  return result;
}

uint64_t _dispatch_sema4_dispose_slow(_DWORD *a1, int a2)
{
  uint64_t v3 = *a1;
  *a1 = -1;
  if (a2)
  {
    uint64_t result = semaphore_destroy(mach_task_self_, v3);
    if ((_DWORD)result == -301) {
      _dispatch_sema4_create_slow_cold_2();
    }
    if ((_DWORD)result)
    {
      if ((_DWORD)result == 15) {
        _dispatch_sema4_create_slow_cold_3();
      }
      _dispatch_sema4_create_slow_cold_1(result);
    }
  }

  else
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t result = *(void *)(StatusReg + 72);
    *(void *)(StatusReg + 72) = v3;
    if (result) {
      return _os_semaphore_dispose();
    }
  }

  return result;
}

uint64_t _dispatch_sema4_signal(semaphore_t *a1, uint64_t a2)
{
  do
  {
    uint64_t result = semaphore_signal(*a1);
    if ((_DWORD)result == -301) {
      _dispatch_sema4_create_slow_cold_2();
    }
    if ((_DWORD)result)
    {
      if ((_DWORD)result == 15) {
        _dispatch_sema4_create_slow_cold_3();
      }
      _dispatch_sema4_create_slow_cold_1(result);
    }

    --a2;
  }

  while (a2);
  return result;
}

uint64_t _dispatch_sema4_wait(semaphore_t *a1)
{
  while (1)
  {
    uint64_t result = semaphore_wait(*a1);
    if ((_DWORD)result != 14)
    {
      if ((_DWORD)result == 15) {
        _dispatch_sema4_create_slow_cold_3();
      }
      goto LABEL_8;
    }
  }

  if ((_DWORD)result == -301) {
    _dispatch_sema4_create_slow_cold_2();
  }
  if ((_DWORD)result) {
LABEL_8:
  }
    _dispatch_sema4_create_slow_cold_1(result);
  return result;
}

BOOL _dispatch_sema4_timedwait(semaphore_t *a1, int64_t a2)
{
  kern_return_t v5;
  mach_timespec_t v7;
  do
  {
    unint64_t v4 = _dispatch_timeout(a2);
    v7.tv_sec = v4 / 0x3B9ACA00;
    v7.tv_nsec = v4 % 0x3B9ACA00;
    semaphore_t v5 = semaphore_timedwait(*a1, v7);
  }

  while (v5 == 14);
  if (v5 != 49)
  {
    if (v5 == -301) {
      _dispatch_sema4_create_slow_cold_2();
    }
    if (v5)
    {
      if (v5 == 15) {
        _dispatch_sema4_create_slow_cold_3();
      }
      _dispatch_sema4_create_slow_cold_1(v5);
    }
  }

  return v5 == 49;
}

uint64_t _dispatch_wait_on_address(uint64_t a1, unsigned int a2, int64_t a3, int a4)
{
  unint64_t v8 = _dispatch_timeout(a3);
  if (v8 == -1LL) {
    return _dlock_wait(a1, a2, 0LL, a4 | 1u);
  }
  if (!v8) {
    return 60LL;
  }
  int v9 = a4 | 1;
  while (1)
  {
    unint64_t v10 = v8 == 1000 * (v8 / 0x3E8) ? v8 / 0x3E8 : v8 / 0x3E8 + 1;
    uint64_t v11 = v10 >= 0xFFFFFFFF ? 0xFFFFFFFFLL : v10;
    uint64_t result = _dlock_wait(a1, a2, v11, v9);
    if (v10 < 0xFFFFFFFF || (_DWORD)result != 60) {
      break;
    }
    unint64_t v8 = _dispatch_timeout(a3);
    if (!v8) {
      return 60LL;
    }
  }

  return result;
}

uint64_t _dispatch_wake_by_address(uint64_t a1)
{
  return _dlock_wake(a1, 257);
}

uint64_t _dispatch_thread_event_signal_slow(uint64_t a1)
{
  return _dlock_wake(a1, 1);
}

uint64_t _dispatch_thread_event_wait_slow(unsigned int *a1)
{
  while (1)
  {
    uint64_t result = atomic_load(a1);
    if (!(_DWORD)result) {
      break;
    }
    if ((_DWORD)result != -1) {
      _dispatch_thread_event_wait_slow_cold_1(result);
    }
    _dlock_wait((uint64_t)a1, 0xFFFFFFFF, 0LL, 1);
  }

  return result;
}

uint64_t _dispatch_unfair_lock_lock_slow(uint64_t result, int a2)
{
  int v2 = (unsigned int *)result;
  int v3 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  unsigned int v4 = v3 & 0xFFFFFFFC;
  int v5 = a2 | 2;
  while (1)
  {
    while (1)
    {
      unsigned int v6 = __ldaxr(v2);
      unsigned int v7 = v4;
      if (v6 >= 4)
      {
        unsigned int v7 = v6 | 1;
        if ((v6 | 1) == v6) {
          break;
        }
      }

      if (!__stxr(v7, v2)) {
        goto LABEL_4;
      }
    }

    __clrex();
    unsigned int v7 = v6;
LABEL_4:
    if ((v6 ^ v3) <= 3) {
      _dispatch_unfair_lock_lock_slow_cold_1();
    }
    if (v7 == v4) {
      return result;
    }
    uint64_t result = _dlock_wait((uint64_t)v2, v7, 0LL, v5);
    v4 |= (_DWORD)result == 66;
  }

uint64_t _dispatch_unfair_lock_unlock_slow(uint64_t result, unsigned int a2)
{
  if ((*(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) ^ a2) >= 4) {
    _dispatch_unfair_lock_unlock_slow_cold_1(a2);
  }
  if ((a2 & 1) != 0) {
    return _dlock_wake(result, 2);
  }
  return result;
}

uint64_t _dispatch_once_wait(uint64_t result)
{
  unint64_t v1 = (unint64_t *)result;
  uint64_t v2 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  while (1)
  {
    unint64_t v3 = __ldxr(v1);
    if (v3 == -1LL)
    {
      __clrex();
      return result;
    }

    if ((v3 & 3) == 2) {
      break;
    }
    uint64_t v4 = v3 | 1;
    if ((v3 | 1) == v3)
    {
      __clrex();
      LODWORD(v4) = v3;
      goto LABEL_7;
    }

    if (!__stxr(v4, v1))
    {
LABEL_7:
      uint64_t result = _dlock_wait((uint64_t)v1, v4, 0LL, 2);
    }
  }

  __clrex();
  __dmb(9u);
  if (4LL * MEMORY[0xFFFFFC180] - v3 - 14 <= 0xFFFFFFFFFFFFFFEFLL) {
    unint64_t *v1 = -1LL;
  }
  return result;
}

uint64_t _dispatch_gate_broadcast_slow(uint64_t a1, unsigned int a2)
{
  if ((*(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) ^ a2) >= 4) {
    _dispatch_unfair_lock_unlock_slow_cold_1(a2);
  }
  return _dlock_wake(a1, 258);
}

uint64_t _dispatch_firehose_gate_wait(uint64_t a1, unsigned int a2, int a3)
{
  return _dlock_wait(a1, a2, 0LL, a3 | 2u);
}

uint64_t _dlock_wait(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v6 = a4 | 0x1000000u;
  uint64_t v7 = a2;
  while (1)
  {
    int v8 = __ulock_wait(v6, a1, v7, a3);
    if (v8 > 0) {
      return 66LL;
    }
    int v9 = v8;
    uint64_t result = -v8;
    if (v9 != -4) {
      break;
    }
    if ((_DWORD)a3) {
      return result;
    }
  }

  if (result > 0x3C || ((1LL << result) & 0x1000000000004001LL) == 0)
  {
    if ((_DWORD)result == 105) {
      _dlock_wait_cold_2(v7);
    }
    _dlock_wait_cold_1(result);
  }

  return result;
}

uint64_t _dlock_wake(uint64_t a1, int a2)
{
  uint64_t result = __ulock_wake(a2 | 0x1000000u, a1, 0LL);
  if ((_DWORD)result)
  {
    if ((_DWORD)result != -2) {
      _dlock_wake_cold_1(result);
    }
  }

  return result;
}

dispatch_semaphore_t dispatch_semaphore_create(uint64_t value)
{
  if (value < 0) {
    return 0LL;
  }
  dispatch_semaphore_t result = (dispatch_semaphore_t)_dispatch_object_alloc(&OBJC_CLASS___OS_dispatch_semaphore, 72LL);
  *((void *)result + 2) = -1985229329LL;
  *((void *)result + 3) = &off_65340;
  *((void *)result + 6) = value;
  *((_DWORD *)result + 16) = 0;
  *((void *)result + 7) = value;
  return result;
}

_DWORD *_dispatch_semaphore_dispose(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (*(void *)(a1 + 48) < v1) {
    _dispatch_semaphore_dispose_cold_1((void *)(a1 + 48), v1);
  }
  int v3 = *(_DWORD *)(a1 + 64);
  dispatch_semaphore_t result = (_DWORD *)(a1 + 64);
  if (v3) {
    return (_DWORD *)_dispatch_sema4_dispose_slow(result, 0);
  }
  return result;
}

uint64_t _dispatch_semaphore_signal_slow(uint64_t a1)
{
  uint64_t v1 = (semaphore_t *)(a1 + 64);
  if (!*(_DWORD *)(a1 + 64)) {
    _dispatch_sema4_create_slow((unsigned int *)(a1 + 64), 0);
  }
  _dispatch_sema4_signal(v1, 1LL);
  return 1LL;
}

uint64_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  uint64_t v1 = (unint64_t *)((char *)dsema + 48);
  do
    unint64_t v2 = __ldxr(v1);
  while (__stlxr(v2 + 1, v1));
  if ((v2 & 0x8000000000000000LL) != 0) {
    return _dispatch_semaphore_signal_slow((uint64_t)dsema);
  }
  else {
    return 0LL;
  }
}

uint64_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  unint64_t v2 = (unint64_t *)((char *)dsema + 48);
  do
    uint64_t v3 = __ldaxr(v2);
  while (__stxr(v3 - 1, v2));
  if (v3 <= 0) {
    return _dispatch_semaphore_wait_slow((uint64_t)dsema, timeout);
  }
  else {
    return 0LL;
  }
}

uint64_t _dispatch_semaphore_wait_slow(uint64_t a1, int64_t a2)
{
  uint64_t v4 = (semaphore_t *)(a1 + 64);
  if (!*(_DWORD *)(a1 + 64)) {
    _dispatch_sema4_create_slow((unsigned int *)(a1 + 64), 0);
  }
  if (a2 != -1)
  {
    if (a2 && !_dispatch_sema4_timedwait(v4, a2)) {
      return 0LL;
    }
    unint64_t v7 = *(void *)(a1 + 48);
    uint64_t v6 = (unint64_t *)(a1 + 48);
    unint64_t v5 = v7;
    uint64_t result = 49LL;
    while ((v5 & 0x8000000000000000LL) != 0)
    {
      while (1)
      {
        unint64_t v9 = __ldxr(v6);
        if (v9 != v5) {
          break;
        }
        if (!__stxr(v5 + 1, v6))
        {
          char v10 = 1;
          goto LABEL_12;
        }
      }

      char v10 = 0;
      __clrex();
LABEL_12:
      unint64_t v5 = v9;
      if ((v10 & 1) != 0) {
        return result;
      }
    }
  }

  _dispatch_sema4_wait(v4);
  return 0LL;
}

dispatch_group_t dispatch_group_create(void)
{
  dispatch_group_t result = (dispatch_group_t)_dispatch_object_alloc(&OBJC_CLASS___OS_dispatch_group, 72LL);
  *((void *)result + 2) = -1985229329LL;
  *((void *)result + 3) = &off_65340;
  return result;
}

uint64_t _dispatch_group_create_and_enter()
{
  uint64_t result = _dispatch_object_alloc(&OBJC_CLASS___OS_dispatch_group, 72LL);
  *(void *)(result + 16) = -1985229329LL;
  *(void *)(result + 24) = &off_65340;
  *(_DWORD *)(result + 48) = -4;
  if (*(_DWORD *)(result + 8) != 0x7FFFFFFF)
  {
    uint64_t v1 = (unsigned int *)(result + 8);
    do
      int v2 = __ldxr(v1);
    while (__stxr(v2 + 1, v1));
    if (v2 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

  return result;
}

uint64_t _dispatch_group_dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if ((_DWORD)result) {
    _dispatch_group_dispose_cold_1(result);
  }
  return result;
}

uint64_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  int v2 = (unint64_t *)((char *)group + 48);
  while (1)
  {
    unint64_t v3 = __ldxr(v2);
    if ((v3 & 0xFFFFFFFC) == 0)
    {
      uint64_t result = 0LL;
      __dmb(9u);
      return result;
    }

    if (!timeout) {
      break;
    }
    if ((v3 & 1) != 0)
    {
      __clrex();
      return _dispatch_group_wait_slow((uint64_t)group, HIDWORD(v3), timeout);
    }

    if (!__stxr(v3 | 1, v2)) {
      return _dispatch_group_wait_slow((uint64_t)group, HIDWORD(v3), timeout);
    }
  }

  __clrex();
  return 49LL;
}

uint64_t _dispatch_group_wait_slow(uint64_t a1, unsigned int a2, int64_t a3)
{
  unint64_t v5 = (unsigned int *)(a1 + 52);
  uint64_t v6 = 49LL;
  while (1)
  {
    int v7 = _dispatch_wait_on_address((uint64_t)v5, a2, a3, 0);
    unsigned int v8 = atomic_load(v5);
    if (v8 != a2) {
      break;
    }
    if (v7 == 60) {
      return v6;
    }
  }

  return 0LL;
}

void dispatch_group_leave(dispatch_group_t group)
{
  uint64_t v1 = (unint64_t *)((char *)group + 48);
  do
    unint64_t v2 = __ldxr(v1);
  while (__stlxr(v2 + 4, v1));
  uint64_t v3 = v2 & 0xFFFFFFFC;
  if ((v2 & 0xFFFFFFFC) == 0xFFFFFFFC)
  {
    unint64_t v4 = v2 + 4;
    do
    {
      unint64_t v5 = (const char *)v4;
      unint64_t v6 = v4 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFDLL;
      while (1)
      {
        unint64_t v4 = __ldxr(v1);
        if (!__stxr(v7, v1))
        {
          int v8 = 1;
          goto LABEL_14;
        }
      }

      int v8 = 0;
      __clrex();
LABEL_14:
      ;
    }

    while (!v8);
    _dispatch_group_wake((unint64_t *)group, v5, 1);
  }

  else if (!(_DWORD)v3)
  {
    dispatch_group_leave_cold_1(v3);
  }

unint64_t *_dispatch_group_wake(unint64_t *result, const char *a2, int a3)
{
  unint64_t v4 = result;
  if ((a2 & 2) != 0)
  {
    __int128 v19 = a2;
    uint64_t v5 = result[7];
    if (!v5) {
      uint64_t v5 = _dispatch_wait_for_enqueuer(result + 7, (uint64_t)(result + 8));
    }
    v4[7] = 0LL;
    unint64_t v6 = v4 + 8;
    do
      unint64_t v7 = __ldxr(v6);
    while (__stlxr(0LL, v6));
    unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFF8LL;
    do
    {
      while (1)
      {
        uint64_t v9 = v5;
        uint64_t v10 = *(void *)(v5 + 48);
        if (v5 == v8)
        {
          uint64_t v5 = 0LL;
        }

        else
        {
          uint64_t v5 = *(void *)(v5 + 16);
          if (!v5) {
            uint64_t v5 = _dispatch_wait_for_enqueuer((unint64_t *)(v9 + 16), 0LL);
          }
        }

        unsigned int v11 = __clz(__rbit32((*(_DWORD *)(v9 + 8) >> 8) & 0x3FFF));
        if (((*(_DWORD *)(v9 + 8) >> 8) & 0x3FFF) != 0) {
          uint64_t v12 = v11 + 1;
        }
        else {
          uint64_t v12 = 0LL;
        }
        if ((*(_BYTE *)(v9 + 1) & 2) == 0)
        {
          if (MEMORY[0xFFFFFC100]) {
            _dispatch_trace_item_push_internal((_opaque_pthread_t *)v10, (uint64_t *)v9);
          }
          _dispatch_introspection_queue_item_enqueue((dispatch_queue_s *)v10, (dispatch_object_s *)v9);
        }

        int v13 = (unsigned int *)(v10 + 8);
        uint64_t result = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10 + 88LL))( v10,  v9,  v12);
        if (*(_DWORD *)(v10 + 8) != 0x7FFFFFFF)
        {
          do
            int v15 = __ldxr(v13);
          while (__stlxr(v15 - 1, v13));
          if (v15 <= 1) {
            break;
          }
        }

        if (!v5) {
          goto LABEL_25;
        }
      }

      if (v15 != 1)
      {
        qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
        goto LABEL_40;
      }

      uint64_t result = (unint64_t *)_os_object_dispose((void *)v10, v14);
    }

    while (v5);
LABEL_25:
    if (a3) {
      LOWORD(a3) = 2;
    }
    else {
      LOWORD(a3) = 1;
    }
    a2 = v19;
  }

  if ((_WORD)a3)
  {
    if (*((_DWORD *)v4 + 2) != 0x7FFFFFFF)
    {
      unint64_t v16 = (unsigned int *)(v4 + 1);
      do
      {
        unsigned int v17 = __ldxr(v16);
        signed int v18 = v17 - (unsigned __int16)a3;
      }

      while (__stlxr(v18, v16));
      if (v18 <= 0)
      {
        if (v18 < 0)
        {
LABEL_40:
          qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
          __break(1u);
        }

        else
        {
          return (unint64_t *)_os_object_dispose(v4, a2);
        }
      }
    }
  }

  return result;
}

void dispatch_group_enter(dispatch_group_t group)
{
  uint64_t v1 = (unsigned int *)((char *)group + 48);
  do
    unsigned int v2 = __ldaxr(v1);
  while (__stxr(v2 - 4, v1));
  if ((v2 & 0xFFFFFFFC) != 0)
  {
    if ((v2 & 0xFFFFFFFC) == 4) {
      dispatch_group_enter_cold_2(v2);
    }
  }

  else if (*((_DWORD *)group + 2) != 0x7FFFFFFF)
  {
    uint64_t v3 = (unsigned int *)((char *)group + 8);
    do
      int v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
    if (v4 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

void dispatch_group_notify_f( dispatch_group_t group, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v9 = *(void **)(StatusReg + 176);
  if (v9) {
    *(void *)(StatusReg + 176) = v9[2];
  }
  else {
    uint64_t v9 = _dispatch_continuation_alloc_from_heap();
  }
  *uint64_t v9 = 260LL;
  v9[4] = work;
  v9[5] = context;
  if ((*(void *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF) {
    uint64_t v10 = 4351LL;
  }
  else {
    uint64_t v10 = *(void *)(StatusReg + 32) & 0xFFFFFFLL;
  }
  uint64_t v11 = *(void *)(StatusReg + 224);
  if (v11) {
    os_retain(*(void **)(StatusReg + 224));
  }
  v9[3] = v11;
  if (v11 != -1)
  {
    if (v11) {
      uint64_t v11 = *(unsigned int *)(v11 + 32);
    }
    if (MEMORY[0xFFFFFC100]) {
      goto LABEL_37;
    }
  }

  if (!v10) {
    goto LABEL_38;
  }
LABEL_13:
  int v12 = (*((_DWORD *)queue + 21) >> 30) & 1;
  if ((*((_DWORD *)queue + 21) & 0xFFF) == 0) {
    int v12 = 1;
  }
  if (v12) {
    uint64_t v13 = v10;
  }
  else {
    uint64_t v13 = 0LL;
  }
  while (1)
  {
    v9[1] = v13;
    v9[6] = queue;
    if (*((_DWORD *)queue + 2) == 0x7FFFFFFF) {
      break;
    }
    int v14 = (unsigned int *)((char *)queue + 8);
    do
      int v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    if (v15 > 0) {
      break;
    }
    qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
LABEL_37:
    kdebug_trace(771817476LL, v11, v9, 0LL, 0LL);
    if (v10) {
      goto LABEL_13;
    }
LABEL_38:
    uint64_t v13 = 0LL;
  }

  v9[2] = 0LL;
  unint64_t v16 = (unint64_t *)((char *)group + 64);
  *(void *)(StatusReg + 976) = (char *)group + 64;
  do
    unint64_t v17 = __ldxr(v16);
  while (__stlxr((unint64_t)v9, v16));
  if (v17)
  {
    *(void *)(v17 + 16) = v9;
    *(void *)(StatusReg + 976) = 0LL;
  }

  else
  {
    if (*((_DWORD *)group + 2) == 0x7FFFFFFF) {
      goto LABEL_30;
    }
    signed int v18 = (unsigned int *)((char *)group + 8);
    do
      int v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    if (v19 > 0)
    {
LABEL_30:
      *((void *)group + 7) = v9;
      *(void *)(StatusReg + 976) = 0LL;
      int v20 = (unint64_t *)((char *)group + 48);
      while (1)
      {
        unint64_t v21 = __ldxr(v20);
        uint64_t v22 = (const char *)(v21 | 2);
        if (!(_DWORD)v21) {
          break;
        }
      }

      __clrex();
      _dispatch_group_wake((unint64_t *)group, v22, 0);
    }

    else
    {
      qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
    }
  }

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unint64_t v7 = *(uint64_t **)(StatusReg + 176);
  if (v7) {
    *(void *)(StatusReg + 176) = v7[2];
  }
  else {
    unint64_t v7 = (uint64_t *)_dispatch_continuation_alloc_from_heap();
  }
  unint64_t v8 = _dispatch_Block_copy(block);
  uint64_t v9 = (void (*)(uint64_t))*((void *)block + 2);
  *unint64_t v7 = 276LL;
  if (v9 == ___dispatch_block_create_block_invoke)
  {
    v7[5] = (uint64_t)v8;
    _dispatch_continuation_init_slow(v7, (unsigned int *)queue, 0);
    goto LABEL_20;
  }

  v7[4] = (uint64_t)_dispatch_call_block_and_release;
  v7[5] = (uint64_t)v8;
  if ((*(void *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF) {
    uint64_t v10 = 4351LL;
  }
  else {
    uint64_t v10 = *(void *)(StatusReg + 32) & 0xFFFFFFLL;
  }
  uint64_t v11 = *(void *)(StatusReg + 224);
  if (v11) {
    os_retain(*(void **)(StatusReg + 224));
  }
  v7[3] = v11;
  if (v11 == -1) {
    goto LABEL_13;
  }
  if (v11) {
    uint64_t v11 = *(unsigned int *)(v11 + 32);
  }
  if (MEMORY[0xFFFFFC100])
  {
    kdebug_trace(771817476LL, v11, v7, 0LL, 0LL);
    if (v10) {
      goto LABEL_14;
    }
  }

  else
  {
LABEL_13:
    if (v10)
    {
LABEL_14:
      int v12 = (*((_DWORD *)queue + 21) >> 30) & 1;
      if ((*((_DWORD *)queue + 21) & 0xFFF) == 0) {
        int v12 = 1;
      }
      if (v12) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 0LL;
      }
      goto LABEL_19;
    }
  }

  uint64_t v13 = 0LL;
LABEL_19:
  v7[1] = v13;
LABEL_20:
  v7[6] = (uint64_t)queue;
  if (*((_DWORD *)queue + 2) != 0x7FFFFFFF)
  {
    int v14 = (unsigned int *)((char *)queue + 8);
    do
      int v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    if (v15 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

  v7[2] = 0LL;
  unint64_t v16 = (unint64_t *)((char *)group + 64);
  *(void *)(StatusReg + 976) = (char *)group + 64;
  do
    unint64_t v17 = __ldxr(v16);
  while (__stlxr((unint64_t)v7, v16));
  if (v17)
  {
    *(void *)(v17 + 16) = v7;
    *(void *)(StatusReg + 976) = 0LL;
  }

  else
  {
    if (*((_DWORD *)group + 2) != 0x7FFFFFFF)
    {
      signed int v18 = (unsigned int *)((char *)group + 8);
      do
        int v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      if (v19 <= 0) {
        dispatch_set_target_queue_cold_2();
      }
    }

    *((void *)group + 7) = v7;
    *(void *)(StatusReg + 976) = 0LL;
    int v20 = (unint64_t *)((char *)group + 48);
    while (1)
    {
      unint64_t v21 = __ldxr(v20);
      uint64_t v22 = (const char *)(v21 | 2);
      if (!(_DWORD)v21) {
        break;
      }
    }

    __clrex();
    _dispatch_group_wake((unint64_t *)group, v22, 0);
  }

void dispatch_group_async_f( dispatch_group_t group, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v9 = *(uint64_t **)(StatusReg + 176);
  if (v9) {
    *(void *)(StatusReg + 176) = v9[2];
  }
  else {
    uint64_t v9 = (uint64_t *)_dispatch_continuation_alloc_from_heap();
  }
  *uint64_t v9 = 268LL;
  v9[4] = (uint64_t)work;
  v9[5] = (uint64_t)context;
  if ((*(void *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF) {
    unint64_t v10 = 4351LL;
  }
  else {
    unint64_t v10 = *(void *)(StatusReg + 32) & 0xFFFFFFLL;
  }
  uint64_t v11 = *(void *)(StatusReg + 224);
  if (v11) {
    os_retain(*(void **)(StatusReg + 224));
  }
  v9[3] = v11;
  if (v11 != -1)
  {
    if (v11) {
      uint64_t v11 = *(unsigned int *)(v11 + 32);
    }
    if (MEMORY[0xFFFFFC100])
    {
      kdebug_trace(771817476LL, v11, v9, 0LL, 0LL);
      if (v10) {
        goto LABEL_13;
      }
LABEL_24:
      uint64_t v13 = 0LL;
      goto LABEL_17;
    }
  }

  if (!v10) {
    goto LABEL_24;
  }
LABEL_13:
  int v12 = *((_DWORD *)queue + 21);
  if ((v12 & 0x40000000) != 0 || (v12 & 0xFFF) == 0)
  {
    uint64_t v13 = __clz(__rbit32(v10 >> 8)) + 1;
  }

  else
  {
    uint64_t v13 = 0LL;
    unint64_t v10 = 0LL;
  }

LABEL_17:
  v9[1] = v10;
  dispatch_group_enter(group);
  v9[6] = (uint64_t)group;
  if ((*((_BYTE *)v9 + 1) & 2) == 0)
  {
    if (MEMORY[0xFFFFFC100]) {
      _dispatch_trace_item_push_internal((_opaque_pthread_t *)queue, v9);
    }
    _dispatch_introspection_queue_item_enqueue(queue, (dispatch_object_s *)v9);
  }

  (*(void (**)(dispatch_queue_t, uint64_t *, uint64_t))(*(void *)queue + 88LL))(queue, v9, v13);
}

    if ((v11 & 0x40000000) == 0)
    {
      uint64_t v13 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32) & 0xFFFFFFLL;
      if (v13 >= 0x10FF) {
        int v14 = 4351LL;
      }
      else {
        int v14 = v13;
      }
      unint64_t v10 = v11 | 0x40000000;
      goto LABEL_24;
    }

    goto LABEL_23;
  }

  if ((v10 & 2) != 0)
  {
    uint64_t v9 = 0LL;
    uint64_t v11 = v10 | 0x80000000LL;
    goto LABEL_16;
  }

  if ((v10 & 0x40) != 0)
  {
    uint64_t v11 = v10 | 0x80000000LL;
    uint64_t v9 = -1LL;
    if ((v10 & 4) == 0) {
      goto LABEL_23;
    }
    goto LABEL_17;
  }

  if ((v10 & 4) != 0)
  {
    uint64_t v11 = v10 | 0x80000000LL;
    uint64_t v9 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
    goto LABEL_17;
  }

  uint64_t v9 = 0LL;
  int v14 = v8;
LABEL_24:
  int v4 = _dispatch_block_create(v10, (void *)v9, v14, block);
  int v15 = *((void *)block + 2);
  unint64_t v16 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
  if (MEMORY[0xFFFFFC100])
  {
    unint64_t v17 = v4;
    kdebug_trace(772079628LL, v4, v15, v8 | (v7 << 32), v14 | (v16 << 32));
    return v17;
  }

  return v4;
}

  if (a5 + a3 == *(void *)(a1 + 56))
  {
    int v23 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) % 3uLL;
    if (v23 == 2)
    {
      v31 = base64_encode_table[4 * (*(_BYTE *)(a5 + a4 - 1) & 0xF)];
      v32 = *(void *)(*(void *)(a1 + 40) + 8LL);
      v33 = *(char **)(v32 + 24);
      *(void *)(v32 + 24) = v33 + 1;
      *v33 = v31;
      v34 = *(void *)(*(void *)(a1 + 40) + 8LL);
      v35 = *(_BYTE **)(v34 + 24);
      *(void *)(v34 + 24) = v35 + 1;
      *v35 = 61;
    }

    else if (v23 == 1)
    {
      int v24 = base64_encode_table[16 * (*(_BYTE *)(a5 + a4 - 1) & 3)];
      uint64_t v25 = *(void *)(*(void *)(a1 + 40) + 8LL);
      v26 = *(char **)(v25 + 24);
      *(void *)(v25 + 24) = v26 + 1;
      void *v26 = v24;
      v27 = *(void *)(*(void *)(a1 + 40) + 8LL);
      dispatch_group_t v28 = *(_BYTE **)(v27 + 24);
      *(void *)(v27 + 24) = v28 + 1;
      *dispatch_group_t v28 = 61;
      v29 = *(void *)(*(void *)(a1 + 40) + 8LL);
      int v30 = *(_BYTE **)(v29 + 24);
      *(void *)(v29 + 24) = v30 + 1;
      *int v30 = 61;
    }
  }

  return 1;
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unint64_t v7 = *(uint64_t **)(StatusReg + 176);
  if (v7) {
    *(void *)(StatusReg + 176) = v7[2];
  }
  else {
    unint64_t v7 = (uint64_t *)_dispatch_continuation_alloc_from_heap();
  }
  unint64_t v8 = _dispatch_Block_copy(block);
  uint64_t v9 = (void (*)(uint64_t))*((void *)block + 2);
  *unint64_t v7 = 284LL;
  if (v9 != ___dispatch_block_create_block_invoke)
  {
    v7[4] = (uint64_t)_dispatch_call_block_and_release;
    v7[5] = (uint64_t)v8;
    if ((*(void *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF) {
      unint64_t v10 = 4351LL;
    }
    else {
      unint64_t v10 = *(void *)(StatusReg + 32) & 0xFFFFFFLL;
    }
    uint64_t v11 = *(void *)(StatusReg + 224);
    if (v11) {
      os_retain(*(void **)(StatusReg + 224));
    }
    v7[3] = v11;
    if (v11 == -1) {
      goto LABEL_13;
    }
    if (v11) {
      uint64_t v11 = *(unsigned int *)(v11 + 32);
    }
    if (MEMORY[0xFFFFFC100])
    {
      kdebug_trace(771817476LL, v11, v7, 0LL, 0LL);
      if (v10) {
        goto LABEL_14;
      }
    }

    else
    {
LABEL_13:
      if (v10)
      {
LABEL_14:
        int v12 = *((_DWORD *)queue + 21);
        if ((v12 & 0x40000000) != 0 || (v12 & 0xFFF) == 0)
        {
          inited = (uint64_t *)(__clz(__rbit32(v10 >> 8)) + 1);
        }

        else
        {
          inited = 0LL;
          unint64_t v10 = 0LL;
        }

        goto LABEL_18;
      }
    }

    inited = 0LL;
LABEL_18:
    v7[1] = v10;
    goto LABEL_19;
  }

  v7[5] = (uint64_t)v8;
  inited = _dispatch_continuation_init_slow(v7, (unsigned int *)queue, 0);
LABEL_19:
  dispatch_group_enter(group);
  v7[6] = (uint64_t)group;
  if ((*((_BYTE *)v7 + 1) & 2) == 0)
  {
    if (MEMORY[0xFFFFFC100]) {
      _dispatch_trace_item_push_internal((_opaque_pthread_t *)queue, v7);
    }
    _dispatch_introspection_queue_item_enqueue(queue, (dispatch_object_s *)v7);
  }

  (*(void (**)(dispatch_queue_t, uint64_t *, uint64_t *))(*(void *)queue + 88LL))(queue, v7, inited);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
  unint64_t v3 = atomic_load((unint64_t *)predicate);
  if (v3 != -1LL)
  {
    if ((v3 & 3) == 2)
    {
      if (4LL * MEMORY[0xFFFFFC180] - v3 - 14 <= 0xFFFFFFFFFFFFFFEFLL) {
        *predicate = -1LL;
      }
    }

    else
    {
      unint64_t v4 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFCLL;
      while (!__ldxr((unint64_t *)predicate))
      {
        if (!__stxr(v4, (unint64_t *)predicate))
        {
          _dispatch_once_callout((unint64_t *)predicate, context, (uint64_t (*)(void))function);
          return;
        }
      }

      __clrex();
      _dispatch_once_wait((uint64_t)predicate);
    }
  }

void _dispatch_once_callout(unint64_t *a1, void *context, uint64_t (*function)(void))
{
  unint64_t v6 = (void (__cdecl *)(void *))function;
  if (context)
  {
    unint64_t v6 = (void (__cdecl *)(void *))function;
  }

  _dispatch_introspection_callout_entry(context, v6);
  _dispatch_client_callout((uint64_t)context, function);
  _dispatch_introspection_callout_return(context, v6);
  unsigned int v7 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFC;
  unint64_t v8 = (4LL * MEMORY[0xFFFFFC180]) | 2;
  do
    unsigned int v9 = __ldxr(a1);
  while (__stlxr(v8, a1));
  if (v7 != v9) {
    _dispatch_gate_broadcast_slow((uint64_t)a1, v9);
  }
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  uint64_t v1 = *((void *)queue + 7);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (((v1 ^ *(_DWORD *)(StatusReg + 24)) & 0xFFFFFFFC) != 0)
  {
    dispatch_queue_t v3 = *(dispatch_queue_t *)(StatusReg + 160);
    BOOL v4 = v3 == 0LL;
    if (v3) {
      BOOL v5 = v3 == queue;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
LABEL_21:
      if (v4) {
        _dispatch_assert_queue_fail(queue, 1);
      }
      return;
    }

    unint64_t v6 = *(dispatch_queue_t **)(StatusReg + 168);
    while (1)
    {
      dispatch_queue_t v7 = (dispatch_queue_t)*((void *)v3 + 3);
      if (v6)
      {
        if (!v7)
        {
          dispatch_queue_t v7 = *v6;
LABEL_15:
          unint64_t v6 = (dispatch_queue_t *)v6[1];
          goto LABEL_16;
        }

        if (v3 == *v6) {
          goto LABEL_15;
        }
      }

LABEL_16:
      BOOL v4 = v7 == 0LL;
      if (v7) {
        BOOL v8 = v7 == queue;
      }
      else {
        BOOL v8 = 1;
      }
      dispatch_queue_t v3 = v7;
      if (v8) {
        goto LABEL_21;
      }
    }
  }

    BOOL v5 = 0LL;
    goto LABEL_6;
  }

  if (*(_DWORD *)(v3 + 64) > 3u || (*(_BYTE *)(v3 + 30) & 1) != 0 && !*(_DWORD *)(v3 + 88)) {
    goto LABEL_16;
  }
  if (*(_DWORD *)(v3 + 88)) {
    unint64_t v6 = *(void *)(v3 + 16) != 0LL;
  }
  else {
    unint64_t v6 = *(_WORD *)(a1 + 118) & 1;
  }
  BOOL v5 = &_dispatch_mgr_q;
  if (v6) {
    dispatch_queue_t v7 = &_dispatch_mgr_q == (__objc2_class **)((char *)&dword_0 + 1);
  }
  else {
    dispatch_queue_t v7 = 1;
  }
  if (v7) {
    goto LABEL_3;
  }
LABEL_6:
  _dispatch_queue_wakeup((_DWORD *)a1, a2, a3, v5);
}

    *(_DWORD *)(*(void *)(a1 + 48) + 144LL) = v6;
LABEL_17:
    free(*(void **)(a1 + 40));
    _dispatch_io_init(*(void **)(a1 + 48), 0LL, *(void *)(a1 + 56), v6, *(void *)(a1 + 32));
    int v12 = *(unsigned int **)(a1 + 48);
    if (v12[2] != 0x7FFFFFFF)
    {
      uint64_t v13 = v12 + 2;
      do
        int v14 = __ldxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (v14 <= 1)
      {
        if (v14 != 1) {
          _os_object_allows_weak_reference_cold_1();
        }
        _os_object_dispose(v12, v11);
      }
    }

    int v15 = *(unsigned int **)(a1 + 56);
    if (v15[2] != 0x7FFFFFFF)
    {
      unint64_t v16 = v15 + 2;
      do
        unint64_t v17 = __ldxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (v17 <= 1)
      {
        if (v17 != 1) {
          _os_object_allows_weak_reference_cold_1();
        }
        _os_object_dispose(v15, v11);
      }
    }

    return;
  }

void _dispatch_assert_queue_fail(void *a1, int a2)
{
  unsigned int v2 = "not ";
  dispatch_queue_t v3 = (const char *)&unk_416DE;
  BOOL v5 = 0LL;
  if (a2) {
    unsigned int v2 = (const char *)&unk_416DE;
  }
  if (a1[9]) {
    dispatch_queue_t v3 = (const char *)a1[9];
  }
  asprintf( &v5,  "%sBlock was %sexpected to execute on queue [%s (%p)]",  "BUG IN CLIENT OF LIBDISPATCH: Assertion failed: ",  v2,  v3,  a1);
  BOOL v4 = v5;
  _dispatch_log("%s", v5);
  qword_61228 = (uint64_t)v4;
  __break(1u);
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
  uint64_t v1 = *((void *)queue + 7);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  dispatch_queue_t v3 = *(dispatch_queue_t *)(StatusReg + 160);
  BOOL v4 = v3 == 0LL;
  if (v3) {
    BOOL v5 = v3 == queue;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    unint64_t v6 = *(dispatch_queue_t **)(StatusReg + 168);
    do
    {
      dispatch_queue_t v7 = (dispatch_queue_t)*((void *)v3 + 3);
      if (v6)
      {
        if (!v7)
        {
          dispatch_queue_t v7 = *v6;
LABEL_13:
          unint64_t v6 = (dispatch_queue_t *)v6[1];
          goto LABEL_14;
        }

        if (v3 == *v6) {
          goto LABEL_13;
        }
      }

LABEL_14:
      BOOL v4 = v7 == 0LL;
      if (v7) {
        BOOL v8 = v7 == queue;
      }
      else {
        BOOL v8 = 1;
      }
      dispatch_queue_t v3 = v7;
    }

    while (!v8);
  }

  if (!v4) {
LABEL_20:
  }
    _dispatch_assert_queue_fail(queue, 0);
}

    unint64_t v17 = _dispatch_block_async_invoke_and_release;
    if ((v11 & 4) == 0) {
      unint64_t v17 = _dispatch_block_async_invoke;
    }
    v5[4] = (uint64_t)v17;
    signed int v18 = v10 | a3;
    if ((v10 & 0x40000000) != 0)
    {
      int v19 = v7[3];
    }

    else
    {
      if ((v18 & 0x40000000) != 0)
      {
        int v20 = 0LL;
        goto LABEL_30;
      }

      int v19 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
      if ((unsigned __int16)(v19 >> 8) > 0x10uLL)
      {
        int v20 = 4351LL;
LABEL_22:
        if ((v18 & 0x20) != 0)
        {
          v20 |= 0x10000000uLL;
        }

        else
        {
          unint64_t v21 = (v4[21] >> 30) & 1;
          if ((v4[21] & 0xFFF) == 0) {
            unint64_t v21 = 1;
          }
          if (!v21) {
            int v20 = 0LL;
          }
        }

  HIDWORD(v5) = identifier - 5;
  LODWORD(v5) = identifier - 5;
  BOOL v4 = v5 >> 2;
  if (v4 > 7 || ((0xBBu >> v4) & 1) == 0) {
    return 0LL;
  }
  dispatch_queue_t v3 = qword_40008[v4];
LABEL_17:
  unint64_t v6 = (flags >> 1) & 2;
  if ((flags & 2) != 0) {
    unint64_t v6 = 1LL;
  }
  return (dispatch_queue_global_t)(&_dispatch_root_queues + 16 * (v3 + v6));
}

  sched_priority = v12.sched_priority;
  do
  {
    BOOL v8 = __ldxr((unsigned int *)&_dispatch_mgr_sched);
    if (sched_priority <= v8)
    {
      __clrex();
      return;
    }
  }

  while (__stxr(sched_priority, (unsigned int *)&_dispatch_mgr_sched));
  if (_dispatch_root_queues_pred != -1) {
    dispatch_once_f(&_dispatch_root_queues_pred, 0LL, (dispatch_function_t)_dispatch_root_queues_init_once);
  }
  if (sched_priority > dword_65B68)
  {
    unsigned int v9 = sched_priority | 0x20000000;
LABEL_23:
    unint64_t v10 = _pthread_workqueue_set_event_manager_priority(v9);
    if (v10) {
      _dispatch_bug(6325LL, v10);
    }
    return;
  }

  if (__qos_class)
  {
    unsigned int v9 = _pthread_qos_class_encode();
    if (v9) {
      goto LABEL_23;
    }
  }

  *(_DWORD *)(a1[5] + 144) = v4;
  dispatch_suspend(*(dispatch_object_t *)(a2 + 64));
  _dispatch_io_init((void *)a1[5], a2, a1[7], v4, a1[4]);
  dispatch_resume(*(dispatch_object_t *)(a1[5] + 48));
  unsigned int v9 = (unsigned int *)a1[5];
  if (v9[2] != 0x7FFFFFFF)
  {
    unint64_t v10 = v9 + 2;
    do
      uint64_t v11 = __ldxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (v11 <= 1)
    {
      if (v11 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      _os_object_dispose(v9, v8);
    }
  }

  uint64_t result = (unsigned int *)a1[7];
  if (result[2] != 0x7FFFFFFF)
  {
    uint64_t v13 = result + 2;
    do
      int v14 = __ldxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (v14 <= 1)
    {
      if (v14 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      return (unsigned int *)_os_object_dispose(result, v8);
    }
  }

  return result;
}

  if ((when & 0x8000000000000000LL) != 0)
  {
    if ((when & 0x4000000000000000LL) == 0)
    {
      when &= ~0x8000000000000000LL;
      dispatch_queue_t v3 = 1;
      goto LABEL_21;
    }

    when = -(uint64_t)when;
    dispatch_queue_t v3 = 2;
  }

  else
  {
    dispatch_queue_t v3 = 0;
  }

  if (when >> 62) {
    return -1LL;
  }
LABEL_10:
  if (v3 == 2)
  {
    BOOL v4 = when + delta;
    if (delta < 0)
    {
      if (v4 < 1)
      {
        BOOL v4 = 2LL;
        return -v4;
      }
    }

    else if ((unint64_t)(v4 - 0x3FFFFFFFFFFFFFFFLL) >= 0xC000000000000002LL)
    {
      return -v4;
    }

    return -1LL;
  }

void dispatch_assert_queue_barrier(dispatch_queue_t queue)
{
  if (*((_WORD *)queue + 40) != 1 && (!*((void *)queue + 3) || (*((void *)queue + 7) & 0x40000000000000LL) == 0)) {
    _dispatch_assert_queue_barrier_fail(queue);
  }
}

void _dispatch_assert_queue_barrier_fail(void *a1)
{
  uint64_t v1 = (const char *)a1[9];
  if (!v1) {
    uint64_t v1 = (const char *)&unk_416DE;
  }
  dispatch_queue_t v3 = 0LL;
  asprintf( &v3,  "%sBlock was expected to act as a barrier on queue [%s (%p)]",  "BUG IN CLIENT OF LIBDISPATCH: Assertion failed: ",  v1,  a1);
  unsigned int v2 = v3;
  _dispatch_log("%s", v3);
  qword_61228 = (uint64_t)v2;
  __break(1u);
}

void _dispatch_set_priority_and_mach_voucher_slow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if (!a1 || (StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)), uint64_t v5 = *(void *)(StatusReg + 32), v5 == a1))
  {
    unsigned int v6 = 0;
    goto LABEL_11;
  }

  if ((v5 & 0x1000000) != 0)
  {
    uint64_t v8 = *(void *)(StatusReg + 200) & 0x80000000LL;
    int v7 = 16;
  }

  else
  {
    int v7 = 0;
    uint64_t v8 = *(void *)(StatusReg + 32) & 0x88000000LL;
  }

  uint64_t v9 = v8 | a1;
  if (((qword_64E78 ^ *(_DWORD *)(StatusReg + 24)) & 0xFFFFFFFC) == 0)
  {
    qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Changing the QoS while on the manager queue";
    qword_61258 = v9;
    __break(1u);
LABEL_23:
    _dispatch_bug(206LL, (int)a1);
    return;
  }

  if ((a1 & 0x2000000) != 0)
  {
    uint64_t v5 = v9;
    qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Cannot raise oneself to manager";
    qword_61258 = v9;
    __break(1u);
    goto LABEL_25;
  }

  if ((v5 & 0x2000000) != 0)
  {
LABEL_25:
    qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Cannot turn a manager thread into a normal one";
    qword_61258 = v5;
    __break(1u);
    return;
  }

  unsigned int v6 = v7 | ((v5 & 0xFFFFFF) != 0);
  uint64_t v3 = v9;
LABEL_11:
  if ((_DWORD)a2 == -1) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = v6 | 2;
  }
  uint64_t v11 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  if (v11 && (*(_BYTE *)(v11 + 45) & 2) != 0) {
    _dispatch_event_loop_drain(1LL);
  }
  if ((_DWORD)v10)
  {
    LODWORD(a1) = _pthread_set_properties_self(v10, v3, a2);
    if ((_DWORD)a1 == 22)
    {
      qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: _pthread_set_properties_self failed";
      qword_61258 = v3;
      __break(1u);
    }

    if ((_DWORD)a1) {
      goto LABEL_23;
    }
  }

uint64_t _dispatch_set_priority_and_voucher_slow(uint64_t a1, unsigned int *object, char a3)
{
  if (object == (unsigned int *)-1LL)
  {
    uint64_t v7 = -1LL;
    goto LABEL_8;
  }

  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v7 = *(void *)(StatusReg + 224);
  if ((a3 & 2) == 0 || (unsigned int *)v7 != object)
  {
    if (object && (a3 & 4) == 0) {
      os_retain(object);
    }
    if ((unsigned int *)v7 == object)
    {
      uint64_t v8 = 0xFFFFFFFFLL;
      uint64_t v7 = (uint64_t)object;
      goto LABEL_22;
    }

    *(void *)(StatusReg + 224) = object;
    if (object)
    {
      unsigned int v9 = object[8];
      if (v7)
      {
LABEL_15:
        int v10 = *(_DWORD *)(v7 + 32);
        goto LABEL_19;
      }
    }

    else
    {
      unsigned int v9 = 0;
      if (v7) {
        goto LABEL_15;
      }
    }

    int v10 = 0;
LABEL_19:
    if (v9 == v10) {
      uint64_t v8 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v8 = v9;
    }
    goto LABEL_22;
  }

  uint64_t v7 = -1LL;
  uint64_t v8 = 0xFFFFFFFFLL;
  if (object && (a3 & 4) != 0)
  {
    os_release(object);
LABEL_8:
    uint64_t v8 = 0xFFFFFFFFLL;
  }

LABEL_22:
  if ((a3 & 8) == 0) {
    _dispatch_set_priority_and_mach_voucher_slow(a1, v8);
  }
  if (v7 != -1 && (a3 & 2) != 0)
  {
    if (v7) {
      os_release((void *)v7);
    }
    return -1LL;
  }

  return v7;
}

  int v15 = *((_DWORD *)context + 8);
  if (v15 - 1 > 0xFFFFFFFD
    || ((_dispatch_introspection_runtime_event(),
         unint64_t v16 = _dispatch_send_wakeup_runloop_thread(v15, 0),
         (v16 - 268435459) >= 2)
      ? (unint64_t v17 = v16 == 16)
      : (unint64_t v17 = 1),
        !v17 ? (signed int v18 = v16 == 0) : (signed int v18 = 1),
        v18))
  {
    if ((a3 & 1) != 0) {
LABEL_34:
    }
      _os_object_release_internal_n(context, (_BYTE *)&dword_0 + 2);
  }

  else
  {
    _dispatch_bug(7895LL, v16);
    if ((a3 & 1) != 0) {
      goto LABEL_34;
    }
  }

      BOOL v4 = **(_DWORD **)(StatusReg + 8);
    }

    while (v4 == 4);
  }

void _dispatch_async_redirect_invoke(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5 = *(_DWORD *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(uint64_t **)(a1 + 56);
  if (v5) {
    unsigned int v9 = a3 & 0xFCFFFFFF | v5;
  }
  else {
    unsigned int v9 = a3;
  }
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  int v12 = (__int128 *)(StatusReg + 20);
  uint64_t v11 = StatusReg[20];
  if (v6)
  {
    uint64_t v13 = StatusReg[25];
    int v14 = *(_DWORD *)(v6 + 84);
    unsigned int v15 = v14 & 0xFFF0FFFF | ((WORD1(v13) & 0xF) << 16);
    StatusReg[20] = v6;
    int v16 = *(_DWORD *)(v7 + 84);
    if (v15)
    {
      unsigned int v17 = (unsigned __int16)v16 >> 12;
      if ((v16 & 0xFFF) != 0)
      {
        unsigned int v18 = v14 & 0x88000000 | ((WORD1(v13) & 0xF) << 16) & 0x880F0000;
        unsigned int v19 = v14 & 0xFFF;
        if (v19 <= (*(_DWORD *)(v7 + 84) & 0xFFFu)) {
          unsigned int v19 = *(_DWORD *)(v7 + 84) & 0xFFF;
        }
        if (v17 <= v19 >> 8) {
          int v20 = 0x40000000;
        }
        else {
          int v20 = 1140912128;
        }
        int v21 = v20 & v16;
        int v22 = v18 | v19;
LABEL_21:
        unsigned int v26 = v22 | v21;
        goto LABEL_32;
      }

      if ((v14 & 0xFFF) != 0) {
        unsigned int v27 = v15 | 0x40000000;
      }
      else {
        unsigned int v27 = v14 & 0xFFF0FFFF | ((WORD1(v13) & 0xF) << 16);
      }
      unsigned int v26 = v27 & 0xFFFF0FFF | v16 & 0x400F000;
      if (v17 <= ((v27 >> 8) & 0xF)) {
        unsigned int v26 = v27;
      }
      goto LABEL_32;
    }

LABEL_67:
    unsigned int v26 = v16 & 0xFFF0FFFF;
    goto LABEL_32;
  }

  int v16 = *(_DWORD *)(v7 + 84);
  uint64_t v13 = StatusReg[25];
  if (!(_DWORD)v13) {
    goto LABEL_67;
  }
  unsigned int v23 = (unsigned __int16)v16 >> 12;
  unsigned int v24 = *(_DWORD *)(v7 + 84) & 0xFFF;
  if ((v16 & 0xFFF) != 0)
  {
    if (v23 <= v24 >> 8) {
      int v25 = 0x40000000;
    }
    else {
      int v25 = 1140912128;
    }
    int v21 = v25 & v16;
    int v22 = v13 & 0x880F0000 | v24;
    goto LABEL_21;
  }

  unsigned int v28 = v13 | 0x40000000;
  if ((v13 & 0xFFF) == 0) {
    unsigned int v28 = StatusReg[25];
  }
  unsigned int v26 = v28 & 0xFFFF0FFF | v16 & 0x400F000;
  if (v23 <= ((v28 >> 8) & 0xF)) {
    unsigned int v26 = v28;
  }
LABEL_32:
  StatusReg[25] = v26;
  __int128 v46 = *v12;
  StatusReg[20] = v7;
  StatusReg[21] = &v46;
  v29 = *(unsigned int **)(a1 + 24);
  *(void *)(a1 + 24) = -1LL;
  if (v29 != (unsigned int *)-1LL)
  {
    int v30 = v29;
    if (v29) {
      int v30 = (unsigned int *)v29[8];
    }
    if (MEMORY[0xFFFFFC100])
    {
      uint64_t v45 = a2;
      kdebug_trace(771817480LL, v30, a1, 0LL, 0LL);
      a2 = v45;
    }
  }

  uint64_t v31 = *(void *)(a1 + 8);
  if (v31 == -1)
  {
    unint64_t v34 = 0LL;
  }

  else
  {
    uint64_t v32 = StatusReg[25];
    else {
      uint64_t v33 = 0LL;
    }
    unint64_t v34 = v33 & 0xFFFFFFFFFFFFFF00LL | StatusReg[25];
    if ((v31 & 0xFFFFFF) != 0)
    {
      if ((v31 & 0xFFFFFFuLL) >= (v33 & 0xFFFFFF00)
        && ((v32 & 0x44000000) != 0 || (*(void *)(a1 + 8) & 0x10000000LL) != 0))
      {
        unint64_t v34 = v31 & 0xFFFFFF;
      }
    }

    else if ((unsigned __int16)v32 >> 12)
    {
      unint64_t v34 = (256LL << (((unsigned __int16)v32 >> 12) - 1)) | 0xFF;
    }
  }

  unint64_t v36 = v34 & 0xFFFFFFFF02FFFFFFLL;
  uint64_t v37 = StatusReg[4];
  if ((v37 & 0x1000000) != 0)
  {
    if (v36)
    {
LABEL_81:
      v44 = v29;
      uint64_t v39 = a2;
      _dispatch_set_priority_and_voucher_slow(v36, v44, 6);
      goto LABEL_56;
    }

    unint64_t v36 = v37 & 0xFFFFFFFFFEFFFFFFLL;
  }

  else if (v36 == (v37 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_52;
  }

  if (v36) {
    goto LABEL_81;
  }
LABEL_52:
  if ((unsigned int *)StatusReg[28] != v29)
  {
    unint64_t v36 = 0LL;
    goto LABEL_81;
  }

  if (!v29) {
    goto LABEL_57;
  }
  v38 = v29;
  uint64_t v39 = a2;
  os_release(v38);
LABEL_56:
  a2 = v39;
LABEL_57:
  uint64_t v40 = StatusReg[22];
  if (v40) {
    int v41 = *(_DWORD *)(v40 + 8) + 1;
  }
  else {
    int v41 = 1;
  }
  if (v41 > _dispatch_continuation_cache_limit)
  {
    _dispatch_continuation_pop(v8, a2, v9, (_opaque_pthread_t *)v7);
    _dispatch_continuation_free_to_cache_limit(a1);
  }

  else
  {
    *(void *)(a1 + 16) = v40;
    *(_DWORD *)(a1 + 8) = v41;
    StatusReg[22] = a1;
    _dispatch_continuation_pop(v8, a2, v9, (_opaque_pthread_t *)v7);
  }

  *int v12 = v46;
  if (v6) {
    *(void *)int v12 = v11;
  }
  StatusReg[25] = StatusReg[25] & 0xF0000LL | v13 & 0xFFF0FFFF;
  uint64_t v42 = *(void *)(v7 + 24);
  if (*(void *)(v42 + 24) && v42 != v11)
  {
    do
    {
      _dispatch_lane_non_barrier_complete((unsigned __int16 *)v42, 0LL);
      uint64_t v42 = *(void *)(v42 + 24);
      if (*(void *)(v42 + 24)) {
        BOOL v43 = v42 == v11;
      }
      else {
        BOOL v43 = 1;
      }
    }

    while (!v43);
  }

  _dispatch_lane_non_barrier_complete((unsigned __int16 *)v7, 1LL);
}

void _dispatch_workloop_stealer_invoke(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(unsigned int **)(a1 + 24);
  *(void *)(a1 + 24) = -1LL;
  if (v6 != (unsigned int *)-1LL && (unsigned int *)((char *)v6 + 1) != 0LL)
  {
    uint64_t v8 = v6;
    if (v6) {
      uint64_t v8 = (unsigned int *)v6[8];
    }
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace(771817480LL, v8, a1, 0LL, 0LL);
    }
  }

  uint64_t v9 = *(void *)(a1 + 8);
  if (v9 == -1)
  {
    unint64_t v12 = 0LL;
  }

  else
  {
    uint64_t v10 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 200);
    else {
      uint64_t v11 = 0LL;
    }
    unint64_t v12 = v11 & 0xFFFFFFFFFFFFFF00LL | v10;
    unint64_t v13 = v9 & 0xFFFFFF;
    if ((v9 & 0xFFFFFF) != 0)
    {
      if (v13 >= (v11 & 0xFFFFFF00))
      {
        uint64_t v14 = v9 & 0x10000000;
        if ((v10 & 0x44000000) != 0 || v14 != 0) {
          unint64_t v12 = v13;
        }
      }
    }

    else if ((unsigned __int16)v10 >> 12)
    {
      unint64_t v12 = (256LL << (((unsigned __int16)v10 >> 12) - 1)) | 0xFF;
    }
  }

  unint64_t v16 = v12 & 0xFFFFFFFF02FFFFFFLL;
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v18 = StatusReg[4];
  if ((v18 & 0x1000000) != 0)
  {
    if (v16)
    {
LABEL_44:
      _dispatch_set_priority_and_voucher_slow(v16, v6, 6);
      goto LABEL_28;
    }

    unint64_t v16 = v18 & 0xFFFFFFFFFEFFFFFFLL;
  }

  else if (v16 == (v18 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_24;
  }

  if (v16) {
    goto LABEL_44;
  }
LABEL_24:
  if ((unsigned int *)StatusReg[28] != v6)
  {
    unint64_t v16 = 0LL;
    goto LABEL_44;
  }

  if (v6) {
    os_release(v6);
  }
LABEL_28:
  uint64_t v19 = StatusReg[22];
  if (v19) {
    int v20 = *(_DWORD *)(v19 + 8) + 1;
  }
  else {
    int v20 = 1;
  }
  uint64_t v21 = a1;
  if (v20 <= _dispatch_continuation_cache_limit)
  {
    uint64_t v21 = 0LL;
    *(void *)(a1 + 16) = v19;
    *(_DWORD *)(a1 + 8) = v20;
    StatusReg[22] = a1;
  }

  (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 48) + 64LL))(*(void *)(a1 + 48), a2, a3 | 1u);
  if (v21) {
    _dispatch_continuation_free_to_cache_limit(v21);
  }
}

void _dispatch_queue_override_invoke(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v7 = a1[6];
  uint64_t v8 = a1[7];
  uint64_t v46 = StatusReg[25];
  uint64_t v47 = StatusReg[20];
  StatusReg[25] = *(_DWORD *)(v8 + 84) & 0xFFF0FFFF | ((WORD1(v46) & 0xF) << 16);
  StatusReg[20] = v8;
  uint64_t v9 = *(void *)(*a1 + 40);
  uint64_t v10 = (unsigned int *)a1[3];
  a1[3] = -1LL;
  if (v10 != (unsigned int *)-1LL)
  {
    uint64_t v11 = v10;
    if (v10) {
      uint64_t v11 = (unsigned int *)v10[8];
    }
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace(771817480LL, v11, a1, 0LL, 0LL);
    }
  }

  uint64_t v12 = a1[1];
  if (v12 == -1)
  {
    unint64_t v15 = 0LL;
  }

  else
  {
    uint64_t v13 = StatusReg[25];
    else {
      uint64_t v14 = 0LL;
    }
    unint64_t v15 = v14 & 0xFFFFFFFFFFFFFF00LL | StatusReg[25];
    if ((v12 & 0xFFFFFF) != 0)
    {
      if ((v12 & 0xFFFFFFuLL) >= (v14 & 0xFFFFFF00)
        && ((v13 & 0x44000000) != 0 || (a1[1] & 0x10000000) != 0))
      {
        unint64_t v15 = v12 & 0xFFFFFF;
      }
    }

    else if ((unsigned __int16)v13 >> 12)
    {
      unint64_t v15 = (256LL << (((unsigned __int16)v13 >> 12) - 1)) | 0xFF;
    }
  }

  unint64_t v17 = v15 & 0xFFFFFFFF02FFFFFFLL;
  uint64_t v18 = StatusReg[4];
  if ((v18 & 0x1000000) != 0)
  {
    if (v17)
    {
LABEL_106:
      _dispatch_set_priority_and_voucher_slow(v17, v10, 6);
      goto LABEL_25;
    }

    unint64_t v17 = v18 & 0xFFFFFFFFFEFFFFFFLL;
  }

  else if (v17 == (v18 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_21;
  }

  if (v17) {
    goto LABEL_106;
  }
LABEL_21:
  if ((unsigned int *)StatusReg[28] != v10)
  {
    unint64_t v17 = 0LL;
    goto LABEL_106;
  }

  if (v10) {
    os_release(v10);
  }
LABEL_25:
  if (v9 != 1792)
  {
    if (MEMORY[0xFFFFFC100]) {
      _dispatch_trace_item_pop_internal((_opaque_pthread_t *)v8, a1);
    }
    _dispatch_introspection_queue_item_dequeue((dispatch_queue_s *)v8, (dispatch_object_s *)a1);
  }

  uint64_t v19 = StatusReg[22];
  if (v19) {
    int v20 = *(_DWORD *)(v19 + 8) + 1;
  }
  else {
    int v20 = 1;
  }
  uint64_t v21 = (uint64_t)a1;
  if (v20 <= _dispatch_continuation_cache_limit)
  {
    uint64_t v21 = 0LL;
    a1[2] = v19;
    *((_DWORD *)a1 + 2) = v20;
    StatusReg[22] = a1;
  }

  uint64_t v22 = *(void *)v7;
  if (*(void *)v7 >= 0x1000uLL)
  {
    if (*(void *)(v22 + 40) == 1LL) {
      (*(void (**)(uint64_t, void, void))(v22 + 48))(v7, 0LL, (a3 >> 21) & 1);
    }
    else {
      (*(void (**)(uint64_t, uint64_t, void))(v22 + 64))(v7, a2, (v9 == 1792) | a3);
    }
    int v25 = v46;
    uint64_t v24 = v47;
    goto LABEL_91;
  }

  if ((a3 & 0x1000000) != 0)
  {
    unsigned int v23 = objc_autoreleasePoolPush();
    uint64_t v22 = *(void *)v7;
  }

  else
  {
    unsigned int v23 = 0LL;
  }

  unsigned int v26 = *(unsigned int **)(v7 + 24);
  if ((v22 & 4) != 0) {
    *(void *)(v7 + 24) = -1LL;
  }
  if (v26 != (unsigned int *)-1LL)
  {
    unsigned int v27 = v26;
    if (v26) {
      unsigned int v27 = (unsigned int *)v26[8];
    }
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace(771817480LL, v27, v7, 0LL, 0LL);
    }
  }

  uint64_t v28 = *(void *)(v7 + 8);
  if (v28 == -1)
  {
    unint64_t v31 = 0LL;
  }

  else
  {
    uint64_t v29 = StatusReg[25];
    else {
      uint64_t v30 = 0LL;
    }
    unint64_t v31 = v30 & 0xFFFFFFFFFFFFFF00LL | StatusReg[25];
    if ((v28 & 0xFFFFFF) != 0)
    {
      if ((v28 & 0xFFFFFFuLL) >= (v30 & 0xFFFFFF00)
        && ((v29 & 0x44000000) != 0 || (*(void *)(v7 + 8) & 0x10000000LL) != 0))
      {
        unint64_t v31 = v28 & 0xFFFFFF;
      }
    }

    else if ((unsigned __int16)v29 >> 12)
    {
      unint64_t v31 = (256LL << (((unsigned __int16)v29 >> 12) - 1)) | 0xFF;
    }
  }

  unint64_t v33 = v31 & 0xFFFFFFFF02FFFFFFLL;
  uint64_t v34 = StatusReg[4];
  if ((v34 & 0x1000000) != 0)
  {
    if (v33) {
      goto LABEL_122;
    }
    unint64_t v33 = v34 & 0xFFFFFFFFFEFFFFFFLL;
  }

  else if (v33 == (v34 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_64;
  }

  if (v33)
  {
LABEL_122:
    _dispatch_set_priority_and_voucher_slow(v33, v26, v22 & 4 | 2);
    if ((v22 & 0x200) == 0) {
      goto LABEL_70;
    }
    goto LABEL_73;
  }

LABEL_64:
  if ((unsigned int *)StatusReg[28] != v26)
  {
    unint64_t v33 = 0LL;
    goto LABEL_122;
  }

  if ((v22 & 4) != 0 && v26) {
    os_release(v26);
  }
LABEL_69:
  if ((v22 & 0x200) == 0)
  {
LABEL_70:
    if (MEMORY[0xFFFFFC100]) {
      _dispatch_trace_item_pop_internal((_opaque_pthread_t *)v8, (uint64_t *)v7);
    }
    _dispatch_introspection_queue_item_dequeue((dispatch_queue_s *)v8, (dispatch_object_s *)v7);
  }

      qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
      qword_61258 = v28;
      __break(1u);
      return;
    }

    uint64_t v28 = HIDWORD(v31);
    qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Broken priority";
    qword_61258 = SHIDWORD(v31);
    __break(1u);
    goto LABEL_64;
  }

  if ((*(_BYTE *)(v5 + 45) & 4) != 0)
  {
LABEL_32:
    if ((a3 & 0x80000000) == 0)
    {
      if (*((_DWORD *)a1 + 2) == 0x7FFFFFFF) {
        goto LABEL_37;
      }
      unint64_t v17 = (unsigned int *)((char *)a1 + 8);
      do
      {
        uint64_t v18 = __ldxr(v17);
        uint64_t v19 = __OFSUB__(v18, 1);
        int v20 = v18 - 1;
      }

      while (__stlxr(v20, v17));
      if (!((v20 < 0) ^ v19 | (v20 == 0)))
      {
LABEL_37:
        _dispatch_event_loop_leave_deferred(v5, a2);
        return;
      }

      qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
      __break(1u);
      goto LABEL_54;
    }

LABEL_73:
  if ((v22 & 4) != 0)
  {
    uint64_t v36 = StatusReg[22];
    if (v36) {
      int v37 = *(_DWORD *)(v36 + 8) + 1;
    }
    else {
      int v37 = 1;
    }
    uint64_t v35 = v7;
    if (v37 <= _dispatch_continuation_cache_limit)
    {
      uint64_t v35 = 0LL;
      *(void *)(v7 + 16) = v36;
      *(_DWORD *)(v7 + 8) = v37;
      StatusReg[22] = v7;
    }
  }

  else
  {
    uint64_t v35 = 0LL;
  }

  if ((v22 & 8) != 0)
  {
    uint64_t v41 = *(void *)(**(void **)(v7 + 48) + 40LL);
    if (v41 != 514) {
      _dispatch_queue_override_invoke_cold_1(v41);
    }
    dispatch_group_t group = *(dispatch_group_s **)(v7 + 48);
    uint64_t v42 = *(void (**)(void (**)(void)))(v7 + 32);
    BOOL v43 = *(void **)(v7 + 40);
    v44 = (void (__cdecl *)(void *))v42;
    if (v43)
    {
      v44 = *(void (__cdecl **)(void *))(v7 + 32);
      if (v42 == _dispatch_call_block_and_release) {
        v44 = (void (__cdecl *)(void *))v43[2];
      }
    }

    _dispatch_introspection_callout_entry(*(void **)(v7 + 40), v44);
    _dispatch_client_callout((uint64_t)v43, (uint64_t (*)(void))v42);
    _dispatch_introspection_callout_return(v43, v44);
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace(772079660LL, v7, 0LL, 0LL, 0LL);
    }
    _dispatch_introspection_queue_item_complete((dispatch_object_s *)v7);
    dispatch_group_leave(group);
  }

  else
  {
    uint64_t v39 = *(void (**)(void (**)(void)))(v7 + 32);
    v38 = *(void **)(v7 + 40);
    uint64_t v40 = (void (__cdecl *)(void *))v39;
    if (v38)
    {
      uint64_t v40 = *(void (__cdecl **)(void *))(v7 + 32);
      if (v39 == _dispatch_call_block_and_release) {
        uint64_t v40 = (void (__cdecl *)(void *))v38[2];
      }
    }

    _dispatch_introspection_callout_entry(*(void **)(v7 + 40), v40);
    _dispatch_client_callout((uint64_t)v38, (uint64_t (*)(void))v39);
    _dispatch_introspection_callout_return(v38, v40);
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace(772079660LL, v7, 0LL, 0LL, 0LL);
    }
    _dispatch_introspection_queue_item_complete((dispatch_object_s *)v7);
  }

  uint64_t v24 = v47;
  if (v35) {
    _dispatch_continuation_free_to_cache_limit(v35);
  }
  int v25 = v46;
  if (v23) {
    objc_autoreleasePoolPop(v23);
  }
LABEL_91:
  if (v9 != 1792)
  {
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace(772079660LL, a1, 0LL, 0LL, 0LL);
    }
    _dispatch_introspection_queue_item_complete((dispatch_object_s *)a1);
  }

  if (v21) {
    _dispatch_continuation_free_to_cache_limit(v21);
  }
  StatusReg[25] = StatusReg[25] & 0xF0000LL | v25 & 0xFFF0FFFF;
  StatusReg[20] = v24;
}

void _dispatch_continuation_free_to_cache_limit(uint64_t a1)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v2 = *(void *)(StatusReg + 176);
  if (v2)
  {
    int v3 = *(_DWORD *)(v2 + 8);
    if (v3 - _dispatch_continuation_cache_limit >= 1)
    {
      int v4 = _dispatch_continuation_cache_limit - v3 + 1;
      do
      {
        uint64_t v5 = v2;
        uint64_t v2 = *(void *)(v2 + 16);
        _dispatch_continuation_free_to_heap(v5);
        if (!v4) {
          break;
        }
        ++v4;
      }

      while (v2);
      *(void *)(StatusReg + 176) = v2;
    }
  }

void _dispatch_continuation_pop(uint64_t *a1, uint64_t a2, unsigned int a3, _opaque_pthread_t *a4)
{
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v9 = (void (**)(_opaque_pthread_t *))StatusReg[24];
  if (v9) {
    (*v9)(a4);
  }
  unint64_t v10 = *a1;
  if ((unint64_t)*a1 >= 0x1000)
  {
    if (*(void *)(v10 + 40) == 1LL) {
      (*(void (**)(uint64_t *, void, void))(v10 + 48))(a1, 0LL, (a3 >> 21) & 1);
    }
    else {
      (*(void (**)(uint64_t *, uint64_t, void))(v10 + 64))(a1, a2, a3 & 0xFFFF0000);
    }
    goto LABEL_57;
  }

  if ((a3 & 0x1000000) != 0)
  {
    uint64_t v11 = objc_autoreleasePoolPush();
    unint64_t v10 = *a1;
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  uint64_t v12 = (unsigned int *)a1[3];
  if ((v10 & 4) != 0) {
    a1[3] = -1LL;
  }
  if (v12 != (unsigned int *)-1LL)
  {
    uint64_t v13 = v12;
    if (v12) {
      uint64_t v13 = (unsigned int *)v12[8];
    }
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace(771817480LL, v13, a1, 0LL, 0LL);
    }
  }

  uint64_t v14 = a1[1];
  if (v14 == -1)
  {
    unint64_t v17 = 0LL;
  }

  else
  {
    uint64_t v15 = StatusReg[25];
    else {
      uint64_t v16 = 0LL;
    }
    unint64_t v17 = v16 & 0xFFFFFFFFFFFFFF00LL | StatusReg[25];
    if ((v14 & 0xFFFFFF) != 0)
    {
      if ((v14 & 0xFFFFFFuLL) >= (v16 & 0xFFFFFF00)
        && ((v15 & 0x44000000) != 0 || (a1[1] & 0x10000000) != 0))
      {
        unint64_t v17 = v14 & 0xFFFFFF;
      }
    }

    else if ((unsigned __int16)v15 >> 12)
    {
      unint64_t v17 = (256LL << (((unsigned __int16)v15 >> 12) - 1)) | 0xFF;
    }
  }

  unint64_t v19 = v17 & 0xFFFFFFFF02FFFFFFLL;
  uint64_t v20 = StatusReg[4];
  if ((v20 & 0x1000000) != 0)
  {
    if (v19) {
      goto LABEL_77;
    }
    unint64_t v19 = v20 & 0xFFFFFFFFFEFFFFFFLL;
  }

  else if (v19 == (v20 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_32;
  }

  if (v19)
  {
LABEL_77:
    _dispatch_set_priority_and_voucher_slow(v19, v12, v10 & 4 | 2);
    if ((v10 & 0x200) != 0) {
      goto LABEL_41;
    }
    goto LABEL_38;
  }

LABEL_32:
  if ((unsigned int *)StatusReg[28] != v12)
  {
    unint64_t v19 = 0LL;
    goto LABEL_77;
  }

  if ((v10 & 4) != 0 && v12) {
    os_release(v12);
  }
LABEL_37:
  if ((v10 & 0x200) != 0) {
    goto LABEL_41;
  }
LABEL_38:
  if (MEMORY[0xFFFFFC100]) {
    _dispatch_trace_item_pop_internal(a4, a1);
  }
  _dispatch_introspection_queue_item_dequeue((dispatch_queue_s *)a4, (dispatch_object_s *)a1);
LABEL_41:
  if ((v10 & 4) != 0)
  {
    uint64_t v22 = StatusReg[22];
    if (v22) {
      int v23 = *(_DWORD *)(v22 + 8) + 1;
    }
    else {
      int v23 = 1;
    }
    uint64_t v21 = (uint64_t)a1;
    if (v23 <= _dispatch_continuation_cache_limit)
    {
      uint64_t v21 = 0LL;
      a1[2] = v22;
      *((_DWORD *)a1 + 2) = v23;
      StatusReg[22] = a1;
    }
  }

  else
  {
    uint64_t v21 = 0LL;
  }

  if ((v10 & 8) != 0)
  {
    unsigned int v27 = (dispatch_group_s *)a1[6];
    uint64_t v28 = *(void *)(*(void *)v27 + 40LL);
    if (v28 != 514)
    {
      qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected object type";
      qword_61258 = v28;
      __break(1u);
      return;
    }

    uint64_t v29 = (void (*)(void (**)(void)))a1[4];
    uint64_t v30 = (void *)a1[5];
    unint64_t v31 = (void (__cdecl *)(void *))v29;
    if (v30)
    {
      unint64_t v31 = (void (__cdecl *)(void *))a1[4];
      if (v29 == _dispatch_call_block_and_release) {
        unint64_t v31 = (void (__cdecl *)(void *))v30[2];
      }
    }

    _dispatch_introspection_callout_entry((void *)a1[5], v31);
    _dispatch_client_callout((uint64_t)v30, (uint64_t (*)(void))v29);
    _dispatch_introspection_callout_return(v30, v31);
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace(772079660LL, a1, 0LL, 0LL, 0LL);
    }
    _dispatch_introspection_queue_item_complete((dispatch_object_s *)a1);
    dispatch_group_leave(v27);
    if (!v21)
    {
LABEL_55:
      if (!v11) {
        goto LABEL_57;
      }
      goto LABEL_56;
    }
  }

  else
  {
    int v25 = (void (*)(void (**)(void)))a1[4];
    uint64_t v24 = (void *)a1[5];
    unsigned int v26 = (void (__cdecl *)(void *))v25;
    if (v24)
    {
      unsigned int v26 = (void (__cdecl *)(void *))a1[4];
      if (v25 == _dispatch_call_block_and_release) {
        unsigned int v26 = (void (__cdecl *)(void *))v24[2];
      }
    }

    _dispatch_introspection_callout_entry((void *)a1[5], v26);
    _dispatch_client_callout((uint64_t)v24, (uint64_t (*)(void))v25);
    _dispatch_introspection_callout_return(v24, v26);
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace(772079660LL, a1, 0LL, 0LL, 0LL);
    }
    _dispatch_introspection_queue_item_complete((dispatch_object_s *)a1);
    if (!v21) {
      goto LABEL_55;
    }
  }

  _dispatch_continuation_free_to_cache_limit(v21);
  if (v11) {
LABEL_56:
  }
    objc_autoreleasePoolPop(v11);
LABEL_57:
  if (v9) {
    v9[1](a4);
  }
}

  *(void *)(StatusReg + 184) = v23[0];
  return 1LL;
}

      uint64_t v15 = *(void *)(a1 + 640);
      if ((~v15 & 0xFF00000000LL) == 0 || BYTE4(*(void *)(a1 + 640)) == 0)
      {
        if (!*(_DWORD *)(a1 + 1552)) {
          firehose_client_reconnect((int *)a1, 0, 0);
        }
      }

      else
      {
        unint64_t v17 = (unint64_t *)(a1 + 640);
        uint64_t v18 = (unint64_t *)(a1 + ((unint64_t)BYTE4(v15) << 12));
        unint64_t v19 = v18[1];
        do
        {
          uint64_t v20 = __ldxr(v18);
          if (!v20 || (v20 & 0x1FF000000000000LL) != 0) {
            goto LABEL_56;
          }
          uint64_t v21 = v20 >> 16;
          int v23 = (unsigned __int16)v20 + 25 > WORD1(v20) || v19 < 0xFFFF000000000000LL;
          uint64_t v24 = v20 + 0x100000020LL;
          int v25 = ((unsigned __int16)(v20 + 32) + 40 > (v20 + 32) >> 16) | ((v20 + 0x100000020LL) >> 56);
          if (v23)
          {
            uint64_t v24 = v20;
            int v25 = HIBYTE(v20) | 1;
          }

          else
          {
            uint64_t v21 = (v20 + 0x100000020LL) >> 16;
          }
        }

        while (__stxr( ((_DWORD)v21 << 16) | v24 & 0xFFFFFF00000000LL | (v25 << 56) | (unsigned __int16)v24,  v18));
        if (!v23)
        {
          if (!(_WORD)v20) {
            goto LABEL_57;
          }
          qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Allocation should always fail";
          qword_61258 = (unsigned __int16)v20;
          __break(1u);
LABEL_56:
          __clrex();
          goto LABEL_57;
        }

        if ((v24 & 0xFF00000000LL) == 0) {
          firehose_buffer_ring_enqueue((int *)a1, BYTE4(v15));
        }
LABEL_57:
        while (1)
        {
          unsigned int v26 = __ldxr(v17);
          if (v26 != v15) {
            break;
          }
          if (!__stxr(v15 & 0xFFFFFF00FFFFFFFFLL, v17)) {
            goto LABEL_61;
          }
        }

        __clrex();
      }

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  if ((flags & 0xFFFFFF00) != 0) {
    return 0LL;
  }
  unint64_t v5 = flags | 0x40000000;
  if ((flags & 0xA) == 0) {
    unint64_t v5 = flags;
  }
  if ((v5 & 0x20) != 0) {
    uint64_t v6 = v5 & 0xFFFFFFFFFFFFFFEFLL;
  }
  else {
    uint64_t v6 = v5;
  }
  if ((v6 & 0x80000000) != 0)
  {
    uint64_t v8 = 0LL;
    uint64_t v7 = v6;
  }

  else if ((v6 & 2) != 0)
  {
    uint64_t v8 = 0LL;
    uint64_t v7 = v6 | 0x80000000LL;
  }

  else if ((v6 & 0x40) != 0)
  {
    uint64_t v7 = v6 | 0x80000000LL;
    uint64_t v8 = -1LL;
  }

  else
  {
    if ((v6 & 4) == 0)
    {
      uint64_t v8 = 0LL;
      uint64_t v9 = 0LL;
      goto LABEL_23;
    }

    uint64_t v7 = v6 | 0x80000000LL;
    uint64_t v8 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  }

  uint64_t v9 = 0LL;
  if ((v6 & 4) == 0 || (v7 & 0x40000000) != 0)
  {
    uint64_t v6 = v7;
  }

  else
  {
    unint64_t v10 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32) & 0xFFFFFFLL;
    if (v10 >= 0x10FF) {
      uint64_t v9 = 4351LL;
    }
    else {
      uint64_t v9 = v10;
    }
    uint64_t v6 = v7 | 0x40000000;
  }

LABEL_23:
  uint64_t v2 = _dispatch_block_create(v6, (void *)v8, v9, block);
  uint64_t v11 = *((void *)block + 2);
  uint64_t v12 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
  if (MEMORY[0xFFFFFC100])
  {
    uint64_t v14 = v9 | (v12 << 32);
    uint64_t v15 = 0xFFFFFFFFLL;
    if ((flags & 0x40000000) != 0) {
      uint64_t v15 = 0LL;
    }
    kdebug_trace(772079628LL, v2, v11, v15 | (flags << 32), v14);
  }

  return v2;
}

    _dispatch_lane_drain_non_barriers(a1, v7, a3);
    return;
  }

  if ((v9 & 2) == 0)
  {
    if (v8 < 2) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }

  if ((v9 & 0x81) != 0)
  {
LABEL_21:
    _dispatch_lane_drain_barrier_waiter((uint64_t)a1, v7, a3, 0LL);
    return;
  }

        (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v7 + 48LL))(v7, 16LL, 0LL, 0LL);
        goto LABEL_24;
      }

dispatch_block_t dispatch_block_create_with_qos_class( dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  if ((flags & 0xFFFFFF00) != 0) {
    return 0LL;
  }
  int v4 = 0LL;
  if (qos_class > QOS_CLASS_USER_INTERACTIVE || ((1LL << qos_class) & 0x202220221LL) == 0) {
    return v4;
  }
  char v6 = flags;
  unint64_t v7 = flags | 0x40000000;
  uint64_t v8 = _pthread_qos_class_encode(*(void *)&qos_class, *(void *)&relative_priority, 0LL);
  uint64_t v9 = 0LL;
  if ((v6 & 0x20) != 0) {
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFFFEFLL;
  }
  else {
    uint64_t v10 = v7;
  }
  uint64_t v11 = v10;
  if ((v10 & 0x80000000) != 0)
  {
LABEL_16:
    if ((v10 & 4) == 0)
    {
LABEL_23:
      uint64_t v14 = v8;
      uint64_t v10 = v11;
      goto LABEL_24;
    }

void *dispatch_block_create_with_voucher(uint64_t a1, void *a2, void *aBlock)
{
  if ((a1 & 0xFFFFFF00) != 0) {
    return 0LL;
  }
  int v5 = a1;
  unint64_t v6 = a1 & 0xFFFFFFFF7FFFFFBFLL | 0x80000000;
  unint64_t v7 = a1 & 0xFFFFFFFF3FFFFFBFLL | 0xC0000000;
  if ((a1 & 0xA) == 0) {
    unint64_t v7 = a1 & 0xFFFFFFFF7FFFFFBFLL | 0x80000000;
  }
  if ((v7 & 0x20) != 0) {
    unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFEFLL;
  }
  else {
    unint64_t v8 = v7;
  }
  if ((v8 & 0x40000004) == 4)
  {
    unint64_t v9 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32) & 0xFFFFFFLL;
    if (v9 >= 0x10FF) {
      uint64_t v10 = 4351LL;
    }
    else {
      uint64_t v10 = v9;
    }
    v8 |= 0x40000000uLL;
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  int v3 = _dispatch_block_create(v8, a2, v10, aBlock);
  uint64_t v11 = *((void *)aBlock + 2);
  uint64_t v12 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
  if (MEMORY[0xFFFFFC100])
  {
    uint64_t v14 = v10 | (v12 << 32);
    uint64_t v15 = 0xFFFFFFFFLL;
    if ((v5 & 0x40000000) != 0) {
      uint64_t v15 = 0LL;
    }
    kdebug_trace(772079628LL, v3, v11, v15 | (v6 << 32), v14);
  }

  return v3;
}

void *dispatch_block_create_with_voucher_and_qos_class( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  if ((a1 & 0xFFFFFF00) != 0) {
    return 0LL;
  }
  int v5 = 0LL;
  if (a3 <= 0x21 && ((1LL << a3) & 0x202220221LL) != 0)
  {
    if ((_DWORD)a4 != 0 && a4 < 0xFFFFFFF1)
    {
      return 0LL;
    }

    else
    {
      char v8 = a1;
      unint64_t v9 = a1 & 0xFFFFFFFF3FFFFFB7LL | 0xC0000000;
      uint64_t v10 = _pthread_qos_class_encode(a3, a4, 0LL);
      if ((v8 & 0x20) != 0) {
        unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFEFLL;
      }
      else {
        unint64_t v11 = v9;
      }
      int v5 = _dispatch_block_create(v11, a2, v10, a5);
      uint64_t v12 = a5[2];
      uint64_t v13 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
      if (MEMORY[0xFFFFFC100])
      {
        uint64_t v14 = v5;
        kdebug_trace(772079628LL, v5, v12, v10 | (v9 << 32), v10 | (v13 << 32));
        return v14;
      }
    }
  }

  return v5;
}

void dispatch_block_perform(dispatch_block_flags_t flags, dispatch_block_t block)
{
  if ((flags & 0xFFFFFF00) != 0) {
    dispatch_block_perform_cold_1(flags);
  }
  unint64_t v2 = flags | 0x40000000;
  if ((flags & 0xA) == 0) {
    unint64_t v2 = flags;
  }
  if ((v2 & 0x20) != 0) {
    v2 &= ~0x10uLL;
  }
  v4[0] = 3512316172LL;
  v4[1] = v2 | ((v2 & 2) << 30);
  int v5 = 8;
  int v6 = 0;
  if ((v2 & 2) != 0) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = -1LL;
  }
  uint64_t v7 = 0LL;
  uint64_t v8 = v3;
  uint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  dispatch_block_t v9 = block;
  int v12 = 0;
  _dispatch_block_invoke_direct((uint64_t)v4);
}

void _dispatch_block_invoke_direct(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  int v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 4) != 0) {
    _dispatch_block_invoke_direct_cold_1(*(_DWORD *)(a1 + 16));
  }
  if ((v2 & 1) != 0)
  {
LABEL_27:
    if ((v2 & 8) != 0) {
      return;
    }
    goto LABEL_28;
  }

  unint64_t v4 = 0LL;
  if ((v1 & 0x40000000) != 0)
  {
    unint64_t v5 = 0LL;
    if ((v1 & 0x30) != 0x10)
    {
      uint64_t v6 = *(void *)(a1 + 24);
      unint64_t v7 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32) & 0xFFFFFFLL;
      BOOL v8 = v7 != 0;
      BOOL v9 = v7 < (v6 & 0xFFFFFFuLL);
      unint64_t v10 = v6 & 0xFFFFFFFF02FFFFFFLL;
      if (v8 && v9) {
        unint64_t v4 = v7;
      }
      else {
        unint64_t v4 = 0LL;
      }
      if (v8 && v9) {
        unint64_t v5 = v10;
      }
      else {
        unint64_t v5 = 0LL;
      }
    }

    if ((v1 & 0x80000000) == 0) {
      goto LABEL_12;
    }
  }

  else
  {
    unint64_t v5 = 0LL;
    if ((v1 & 0x80000000) == 0)
    {
LABEL_12:
      uint64_t v11 = -1LL;
      goto LABEL_15;
    }
  }

  uint64_t v11 = *(void *)(a1 + 32);
LABEL_15:
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v13 = StatusReg[4];
  if ((v13 & 0x1000000) != 0)
  {
    if (v5)
    {
LABEL_43:
      uint64_t v11 = _dispatch_set_priority_and_voucher_slow(v5, (unsigned int *)v11, 0);
      goto LABEL_21;
    }

    unint64_t v5 = v13 & 0xFFFFFFFFFEFFFFFFLL;
  }

  else if (v5 == (v13 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_17;
  }

  if (v5) {
    goto LABEL_43;
  }
LABEL_17:
  if (v11 == -1) {
    goto LABEL_21;
  }
  if (StatusReg[28] != v11)
  {
    unint64_t v5 = 0LL;
    goto LABEL_43;
  }

  if (v11) {
    os_retain((void *)v11);
  }
LABEL_21:
  *(_DWORD *)(a1 + 64) = StatusReg[3];
  uint64_t v14 = *(void **)(a1 + 40);
  uint64_t v15 = (void (__cdecl *)(void *))v14[2];
  _dispatch_introspection_callout_entry(v14, v15);
  _dispatch_client_callout((uint64_t)v14, (uint64_t (*)(void))v15);
  _dispatch_introspection_callout_return(v14, v15);
  uint64_t v16 = StatusReg[4];
  if ((v16 & 0x1000000) != 0)
  {
    if (v4) {
      goto LABEL_45;
    }
    unint64_t v4 = v16 & 0xFFFFFFFFFEFFFFFFLL;
LABEL_40:
    if (v4) {
      goto LABEL_45;
    }
    goto LABEL_23;
  }

  if (v4 != (v16 & 0xFFFFFFFF77FFFFFFLL)) {
    goto LABEL_40;
  }
LABEL_23:
  if (v11 == -1) {
    goto LABEL_27;
  }
  if (StatusReg[28] == v11)
  {
    if (v11) {
      os_release((void *)v11);
    }
    goto LABEL_27;
  }

  unint64_t v4 = 0LL;
LABEL_45:
  _dispatch_set_priority_and_voucher_slow(v4, (unsigned int *)v11, 6);
  if ((v2 & 8) != 0) {
    return;
  }
LABEL_28:
  unint64_t v17 = (unsigned int *)(a1 + 20);
  do
    unsigned int v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  if (!v18) {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  }
}

unsigned int *_dispatch_block_sync_invoke(uint64_t a1, const char *a2)
{
  if (*(void (**)(uint64_t))(a1 + 16) == ___dispatch_block_create_block_invoke)
  {
    uint64_t v2 = a1 + 32;
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3 != 3512316172LL) {
      _dispatch_continuation_get_function_symbol_cold_1(v3);
    }
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  int v4 = *(_DWORD *)(v2 + 16);
  if ((v4 & 4) != 0) {
    _dispatch_block_invoke_direct_cold_1(*(_DWORD *)(v2 + 16));
  }
  if ((v4 & 1) != 0)
  {
LABEL_23:
    if ((v4 & 8) != 0) {
      goto LABEL_28;
    }
    goto LABEL_24;
  }

  if ((*(void *)(v2 + 8) & 0x80000000) == 0)
  {
    uint64_t v5 = -1LL;
    goto LABEL_18;
  }

  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v7 = StatusReg[25];
  uint64_t v8 = 256LL << ((BYTE1(v7) & 0xFu) - 1);
  BOOL v9 = (unsigned __int16)v7 >> 12 == 0;
  uint64_t v5 = *(void *)(v2 + 32);
  unint64_t v10 = v8 & 0xFFFFFFFFFFFFFF00LL | StatusReg[25];
  uint64_t v11 = (256LL << (((v7 >> 12) & 0xF) - 1)) | 0xFF;
  if (v9) {
    uint64_t v11 = v10;
  }
  unint64_t v12 = v11 & 0xFFFFFFFF02FFFFFFLL;
  uint64_t v13 = StatusReg[4];
  if ((v13 & 0x1000000) != 0)
  {
    if (v12)
    {
LABEL_49:
      uint64_t v5 = _dispatch_set_priority_and_voucher_slow(v12, *(unsigned int **)(v2 + 32), 0);
      goto LABEL_18;
    }

    unint64_t v12 = v13 & 0xFFFFFFFFFEFFFFFFLL;
  }

  else if (v12 == (v13 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_14;
  }

  if (v12) {
    goto LABEL_49;
  }
LABEL_14:
  if (v5 == -1) {
    goto LABEL_18;
  }
  if (StatusReg[28] != v5)
  {
    unint64_t v12 = 0LL;
    goto LABEL_49;
  }

  if (v5) {
    os_retain(*(void **)(v2 + 32));
  }
LABEL_18:
  (*(void (**)(void))(*(void *)(v2 + 40) + 16LL))();
  unint64_t v14 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v15 = *(void *)(v14 + 32);
  if ((v15 & 0x1000000) == 0 || (unint64_t v22 = v15 & 0xFFFFFFFFFEFFFFFFLL, (v15 & 0xFFFFFFFFFEFFFFFFLL) == 0))
  {
    if (v5 == -1) {
      goto LABEL_23;
    }
    if (*(void *)(v14 + 224) == v5)
    {
      if (v5) {
        os_release((void *)v5);
      }
      goto LABEL_23;
    }

    unint64_t v22 = 0LL;
  }

  _dispatch_set_priority_and_voucher_slow(v22, (unsigned int *)v5, 6);
  if ((v4 & 8) != 0) {
    goto LABEL_28;
  }
LABEL_24:
  uint64_t v16 = (unsigned int *)(v2 + 20);
  do
    unsigned int v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  if (!v17) {
    dispatch_group_leave(*(dispatch_group_t *)(v2 + 48));
  }
LABEL_28:
  unsigned int v18 = (unint64_t *)(v2 + 56);
  do
    uint64_t result = (unsigned int *)__ldxr(v18);
  while (__stxr(0LL, v18));
  if (result)
  {
    if (result[2] != 0x7FFFFFFF)
    {
      uint64_t v20 = result + 2;
      do
        int v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
      if (v21 <= 2)
      {
        if (v21 != 2) {
          _os_object_allows_weak_reference_cold_1();
        }
        return (unsigned int *)_os_object_dispose(result, a2);
      }
    }
  }

  return result;
}

void dispatch_block_cancel(dispatch_block_t block)
{
  if (*((void *)block + 4) != 3512316172LL) {
    _dispatch_continuation_get_function_symbol_cold_1(*((void *)block + 4));
  }
  uint64_t v1 = (unsigned int *)((char *)block + 48);
  do
    unsigned int v2 = __ldxr(v1);
  while (__stxr(v2 | 1, v1));
}

uint64_t dispatch_block_testcancel(dispatch_block_t block)
{
  if (*((void *)block + 4) != 3512316172LL) {
    _dispatch_continuation_get_function_symbol_cold_1(*((void *)block + 4));
  }
  return *((_DWORD *)block + 12) & 1LL;
}

uint64_t dispatch_block_wait(dispatch_block_t block, dispatch_time_t timeout)
{
  int v4 = (char *)block + 32;
  uint64_t v3 = *((void *)block + 4);
  if (v3 != 3512316172LL) {
    _dispatch_continuation_get_function_symbol_cold_1(v3);
  }
  uint64_t v6 = (unsigned int *)((char *)block + 48);
  do
    unsigned int v7 = __ldxr(v6);
  while (__stxr(v7 | 2, v6));
  if ((v7 & 6) != 0) {
    dispatch_block_wait_cold_2(v7);
  }
  uint64_t v8 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
  BOOL v9 = (unint64_t *)((char *)block + 88);
  do
    unint64_t v10 = __ldxr(v9);
  while (__stxr(0LL, v9));
  if (v10)
  {
    unsigned int v11 = __clz(__rbit32((v8 >> 8) & 0x3FFF));
    else {
      uint64_t v12 = 0LL;
    }
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)v10 + 80LL))(v10, v12, 9LL);
  }

  uint64_t v13 = *((unsigned int *)block + 24);
  if ((_DWORD)v13)
  {
    _pthread_qos_override_start_direct(*((unsigned int *)block + 24), v8, v4);
    BOOL v14 = v10 == 0;
  }

  else
  {
    BOOL v14 = 1;
  }

  int v15 = *((_DWORD *)block + 13);
  if (!v14 || v15 >= 2) {
    dispatch_block_wait_cold_1(v15);
  }
  uint64_t v17 = dispatch_group_wait(*((dispatch_group_t *)block + 10), timeout);
  if ((_DWORD)v13) {
    _pthread_qos_override_end_direct(v13, v4);
  }
  if (v17)
  {
    do
      unsigned int v18 = __ldxr(v6);
    while (__stxr(v18 & 0xFFFFFFFD, v6));
  }

  else
  {
    do
      unsigned int v19 = __ldxr(v6);
    while (__stxr(v19 | 4, v6));
  }

  return v17;
}

void dispatch_block_notify(dispatch_block_t block, dispatch_queue_t queue, dispatch_block_t notification_block)
{
  if (*((void *)block + 4) != 3512316172LL) {
    _dispatch_continuation_get_function_symbol_cold_1(*((void *)block + 4));
  }
  dispatch_group_notify(*((dispatch_group_t *)block + 10), queue, notification_block);
}

uint64_t *_dispatch_continuation_init_slow(uint64_t *result, unsigned int *a2, int a3)
{
  int v4 = a2;
  uint64_t v5 = result;
  uint64_t v6 = result[5];
  if (*(void (**)(uint64_t))(v6 + 16) != ___dispatch_block_create_block_invoke)
  {
    unsigned int v7 = 0LL;
LABEL_4:
    uint64_t v10 = v7[1];
    uint64_t v11 = *result;
    uint64_t v12 = a2 + 2;
    if (a2[2] != 0x7FFFFFFF)
    {
      do
        int v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      if (v13 <= 0)
      {
        qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
        __break(1u);
LABEL_45:
        kdebug_trace(771817476LL, v4, v5, 0LL, 0LL);
LABEL_41:
        *uint64_t v5 = v11 | (2 * (v10 & 1)) | 0x20;
        unsigned int v22 = __clz(__rbit32((*((_DWORD *)v5 + 2) >> 8) & 0x3FFF));
        if (((*((_DWORD *)v5 + 2) >> 8) & 0x3FFF) != 0) {
          return (uint64_t *)(v22 + 1);
        }
        else {
          return 0LL;
        }
      }
    }

    BOOL v14 = v7 + 7;
    while (!__ldxr(v14))
    {
    }

    __clrex();
    if (*v12 != 0x7FFFFFFF)
    {
      do
        int v16 = __ldxr(v12);
      while (__stlxr(v16 - 2, v12));
      if (v16 <= 2)
      {
        if (v16 != 2) {
          goto LABEL_49;
        }
        _os_object_dispose(a2, (const char *)a2);
      }
    }

LABEL_30:
        v5[1] = v20;
        if ((v10 & 0x80000000) != 0)
        {
          int v4 = (unsigned int *)v7[4];
          if ((unint64_t)v4 + 1 < 2)
          {
LABEL_37:
            v5[3] = (uint64_t)v4;
            if (v4) {
              int v4 = (unsigned int *)v4[8];
            }
            if (!MEMORY[0xFFFFFC100]) {
              goto LABEL_41;
            }
            goto LABEL_45;
          }
        }

        else
        {
          if ((v18 & 0x40) != 0)
          {
            int v4 = 0LL;
            goto LABEL_37;
          }

          int v4 = *(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
          if (!v4) {
            goto LABEL_37;
          }
        }

        os_retain(v4);
        goto LABEL_37;
      }
    }

    uint64_t v20 = v19 & 0xFFFFFF;
    if (!v20) {
      goto LABEL_30;
    }
    goto LABEL_22;
  }

  uint64_t v9 = *(void *)(v6 + 32);
  unsigned int v7 = (void *)(v6 + 32);
  uint64_t v8 = v9;
  if (v9 == 3512316172LL) {
    goto LABEL_4;
  }
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corruption of dispatch block object";
  qword_61258 = v8;
  __break(1u);
LABEL_49:
  qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
  return result;
}

  if ((a4 & 0x3000000000LL) == 0)
  {
    a1 = *(void *)(a1 + 24);
    int v21 = *(unsigned int **)a2;
    if ((*(void *)a2 & 0x80) != 0)
    {
      unsigned int v26 = *(_DWORD *)(v8 + 84) & 0xFFF;
      if (v26)
      {
        unsigned int v27 = v26 >= 0x100 ? 256LL << (BYTE1(v26) - 1) : 0LL;
        uint64_t v28 = v27 & 0xFFFFFFFFFFFFFF00LL | *(_DWORD *)(v8 + 84);
        if (v28 > (*(void *)(a2 + 8) & 0xFFFFFFuLL)) {
          *(void *)(a2 + 8) = v28 | 0x10000000;
        }
      }

      if ((*(_BYTE *)(a2 + 106) & 3) == 0) {
        *(_BYTE *)(a2 + 106) = *(_BYTE *)(a2 + 106) & 0xFC | HIWORD(*(_DWORD *)(v8 + 80)) & 3;
      }
    }

    if (*(_WORD *)(a1 + 80) == 1)
    {
      *(void *)a2 = (unint64_t)v21 | 2;
LABEL_45:
      *(_BYTE *)(a2 + 106) &= ~0x80u;
      return (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)a1 + 88LL))( a1,  a2,  HIDWORD(a4) & 7);
    }

LABEL_31:
      uint64_t v12 = (*(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32) >> 8) & 0x3FFF;
      uint64_t v11 = v12 == 0;
      int v13 = __clz(__rbit32(v12));
      if (v11) {
        BOOL v14 = 0LL;
      }
      else {
        BOOL v14 = v13 + 1;
      }
      (*(void (**)(dispatch_object_s *, uint64_t, uint64_t))(*(void *)object + 80LL))(object, v14, 2LL);
      dispatch_activate(object);
      goto LABEL_35;
    }
  }

  if ((v4 & 0x10000000) == 0)
  {
    uint64_t v10 = v9 | 0x8000000000LL;
    goto LABEL_15;
  }

  __clrex();
  if (!(v9 >> 55)) {
    goto LABEL_30;
  }
LABEL_37:
  if (v9 >> 58) {
    dispatch_source_cancel_and_wait_cold_1((uint64_t)object);
  }
  dispatch_activate(object);
}

  if ((unsigned int *)StatusReg[28] != v11)
  {
    uint64_t v19 = 0LL;
    goto LABEL_67;
  }

  if (v11) {
    os_release(v11);
  }
LABEL_34:
  if ((v7 & 0x200) != 0) {
    goto LABEL_38;
  }
LABEL_35:
  if (MEMORY[0xFFFFFC100]) {
    _dispatch_trace_item_pop_internal(v6, (uint64_t *)a1);
  }
  _dispatch_introspection_queue_item_dequeue((dispatch_queue_s *)v6, (dispatch_object_s *)a1);
LABEL_38:
  if ((a3 & 0x1000000) != 0) {
    int v21 = objc_autoreleasePoolPush();
  }
  else {
    int v21 = 0LL;
  }
  int v23 = (void (*)(void (**)(void)))*((void *)a1 + 4);
  unsigned int v22 = (void *)*((void *)a1 + 5);
  uint64_t v24 = (void (__cdecl *)(void *))v23;
  if (v22)
  {
    uint64_t v24 = (void (__cdecl *)(void *))*((void *)a1 + 4);
    if (v23 == _dispatch_call_block_and_release) {
      uint64_t v24 = (void (__cdecl *)(void *))v22[2];
    }
  }

  _dispatch_introspection_callout_entry(*((void **)a1 + 5), v24);
  _dispatch_client_callout((uint64_t)v22, (uint64_t (*)(void))v23);
  _dispatch_introspection_callout_return(v22, v24);
  if (v21) {
    objc_autoreleasePoolPop(v21);
  }
  if ((v7 & 0x200) == 0)
  {
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace(772079660LL, a1, 0LL, 0LL, 0LL);
    }
    _dispatch_introspection_queue_item_complete((dispatch_object_s *)a1);
  }

  unsigned int v26 = v30;
  StatusReg[23] = v29[0];
  if (v26)
  {
    _dispatch_mach_ipc_handoff_async((uint64_t)v29);
  }

  else
  {
    unsigned int v27 = (unsigned int *)(a1 + 72);
    do
      uint64_t v28 = __ldxr(v27);
    while (__stxr(v28 - 1, v27));
    if (!v28) {
      free(a1);
    }
  }

  if (v10) {
    return _dispatch_sync_ipc_handoff_end(v10, v9);
  }
  return result;
}

  *(_DWORD *)(v17 + 144) = 0;
  uint64_t v20 = *(_DWORD *)(v2 + 124);
  if (v20 == -1)
  {
    *(void *)(v17 + 124) = -1LL;
    uint64_t v30 = *(void *)(v2 + 112);
    unint64_t v31 = *(_WORD *)(v30 + 36);
    uint64_t v32 = *(_DWORD *)(v30 + 32);
    unint64_t v33 = *(void **)(v30 + 8);
    uint64_t v34 = v33[2] + 25LL;
    uint64_t v35 = malloc(v34);
    memcpy(v35, v33, v34);
    *uint64_t v35 = v17;
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000LL;
    block[2] = __dispatch_io_create_with_io_block_invoke_3;
    block[3] = &unk_59160;
    uint64_t v40 = v32;
    uint64_t v41 = v31;
    uint64_t v36 = a1[8];
    block[6] = v17;
    block[7] = v36;
    block[4] = a1[4];
    block[5] = v35;
    dispatch_channel_async((dispatch_queue_t)_dispatch_io_devs_lockq, block);
  }

  else
  {
    int v21 = *(void *)(v2 + 112);
    unsigned int v22 = *(_DWORD *)(v2 + 128);
    *(_DWORD *)(v17 + 124) = v20;
    *(_DWORD *)(v17 + 128) = v22;
    dispatch_suspend(*(dispatch_object_t *)(v21 + 64));
    _dispatch_io_init((void *)a1[6], v21, a1[8], 0, a1[4]);
    dispatch_resume(*(dispatch_object_t *)(a1[6] + 48));
    uint64_t v24 = (unsigned int *)a1[6];
    if (v24[2] != 0x7FFFFFFF)
    {
      int v25 = v24 + 2;
      do
        unsigned int v26 = __ldxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (v26 <= 1)
      {
        if (v26 != 1) {
          _os_object_allows_weak_reference_cold_1();
        }
        _os_object_dispose(v24, v23);
      }
    }

    unsigned int v27 = (unsigned int *)a1[8];
    if (v27[2] != 0x7FFFFFFF)
    {
      uint64_t v28 = v27 + 2;
      do
        uint64_t v29 = __ldxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (v29 <= 1)
      {
        if (v29 != 1) {
          _os_object_allows_weak_reference_cold_1();
        }
        _os_object_dispose(v27, v23);
      }
    }
  }

  uint64_t result = (unsigned int *)a1[5];
  if (result[2] != 0x7FFFFFFF)
  {
    int v37 = result + 2;
    do
      v38 = __ldxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (v38 <= 1)
    {
      if (v38 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      return (unsigned int *)_os_object_dispose(result, v23);
    }
  }

  return result;
}

void _dispatch_block_async_invoke_and_release(void *a1)
{
}

void _dispatch_block_async_invoke(void *a1)
{
}

void dispatch_barrier_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v5 = *(uint64_t **)(StatusReg + 176);
  if (!v5)
  {
    _dispatch_async_f_slow((uint64_t)queue, (uint64_t)context, (uint64_t)work, 0, 6LL);
    return;
  }

  *(void *)(StatusReg + 176) = v5[2];
  *uint64_t v5 = 262LL;
  v5[4] = (uint64_t)work;
  v5[5] = (uint64_t)context;
  if ((*(void *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF) {
    unint64_t v6 = 4351LL;
  }
  else {
    unint64_t v6 = *(void *)(StatusReg + 32) & 0xFFFFFFLL;
  }
  uint64_t v7 = *(void *)(StatusReg + 224);
  if (v7) {
    os_retain(*(void **)(StatusReg + 224));
  }
  v5[3] = v7;
  if (v7 == -1) {
    goto LABEL_11;
  }
  if (v7) {
    uint64_t v7 = *(unsigned int *)(v7 + 32);
  }
  if (MEMORY[0xFFFFFC100])
  {
    kdebug_trace(771817476LL, v7, v5, 0LL, 0LL);
    if (v6) {
      goto LABEL_12;
    }
  }

  else
  {
LABEL_11:
    if (v6)
    {
LABEL_12:
      int v8 = *((_DWORD *)queue + 21);
      if ((v8 & 0x40000000) != 0 || (v8 & 0xFFF) == 0)
      {
        uint64_t v9 = __clz(__rbit32(v6 >> 8)) + 1;
      }

      else
      {
        uint64_t v9 = 0LL;
        unint64_t v6 = 0LL;
      }

      goto LABEL_16;
    }
  }

  uint64_t v9 = 0LL;
LABEL_16:
  v5[1] = v6;
  if (MEMORY[0xFFFFFC100]) {
    _dispatch_trace_item_push_internal((_opaque_pthread_t *)queue, v5);
  }
  _dispatch_introspection_queue_item_enqueue(queue, (dispatch_object_s *)v5);
  (*(void (**)(dispatch_queue_t, uint64_t *, uint64_t))(*(void *)queue + 88LL))(queue, v5, v9);
}

uint64_t _dispatch_async_f_slow(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = (uint64_t *)_dispatch_continuation_alloc_from_heap();
  *uint64_t v10 = a5 | 0x100;
  void v10[4] = a3;
  v10[5] = a2;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if ((*(void *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF) {
    unint64_t v12 = 4351LL;
  }
  else {
    unint64_t v12 = *(void *)(StatusReg + 32) & 0xFFFFFFLL;
  }
  if ((a4 & 0x40) != 0)
  {
    uint64_t v13 = 0LL;
  }

  else
  {
    uint64_t v13 = *(void *)(StatusReg + 224);
    if (v13) {
      os_retain(*(void **)(StatusReg + 224));
    }
  }

  v10[3] = v13;
  if (v13 != -1)
  {
    if (v13) {
      uint64_t v13 = *(unsigned int *)(v13 + 32);
    }
    if (MEMORY[0xFFFFFC100])
    {
      kdebug_trace(771817476LL, v13, v10, 0LL, 0LL);
      if (v12) {
        goto LABEL_13;
      }
LABEL_25:
      uint64_t v15 = 0LL;
      goto LABEL_19;
    }
  }

  if (!v12) {
    goto LABEL_25;
  }
LABEL_13:
  if ((a4 & 0x20) != 0)
  {
    v12 |= 0x10000000uLL;
  }

  else
  {
    int v14 = *(_DWORD *)(a1 + 84);
    if ((v14 & 0x40000000) == 0 && (v14 & 0xFFF) != 0)
    {
      uint64_t v15 = 0LL;
      unint64_t v12 = 0LL;
      goto LABEL_19;
    }
  }

  uint64_t v15 = __clz(__rbit32(v12 >> 8)) + 1;
LABEL_19:
  v10[1] = v12;
  if ((*((_BYTE *)v10 + 1) & 2) == 0)
  {
    if (MEMORY[0xFFFFFC100]) {
      _dispatch_trace_item_push_internal((_opaque_pthread_t *)a1, v10);
    }
    _dispatch_introspection_queue_item_enqueue((dispatch_queue_s *)a1, (dispatch_object_s *)v10);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 88LL))(a1, v10, v15);
}

uint64_t _dispatch_barrier_async_detached_f(_opaque_pthread_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v7 = *(uint64_t **)(StatusReg + 176);
  if (v7) {
    *(void *)(StatusReg + 176) = v7[2];
  }
  else {
    uint64_t v7 = (uint64_t *)_dispatch_continuation_alloc_from_heap();
  }
  v7[4] = a3;
  v7[5] = a2;
  v7[3] = -1LL;
  *(_OWORD *)uint64_t v7 = xmmword_3FF10;
  if (MEMORY[0xFFFFFC100]) {
    _dispatch_trace_item_push_internal(a1, v7);
  }
  _dispatch_introspection_queue_item_enqueue((dispatch_queue_s *)a1, (dispatch_object_s *)v7);
  return (*(uint64_t (**)(_opaque_pthread_t *, uint64_t *, void))(a1->__sig + 88))(a1, v7, 0LL);
}

void dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v5 = *(uint64_t **)(StatusReg + 176);
  if (v5) {
    *(void *)(StatusReg + 176) = v5[2];
  }
  else {
    uint64_t v5 = (uint64_t *)_dispatch_continuation_alloc_from_heap();
  }
  unint64_t v6 = _dispatch_Block_copy(block);
  uint64_t v7 = (void (*)(uint64_t))*((void *)block + 2);
  *uint64_t v5 = 278LL;
  if (v7 != ___dispatch_block_create_block_invoke)
  {
    v5[4] = (uint64_t)_dispatch_call_block_and_release;
    v5[5] = (uint64_t)v6;
    if ((*(void *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF) {
      unint64_t v8 = 4351LL;
    }
    else {
      unint64_t v8 = *(void *)(StatusReg + 32) & 0xFFFFFFLL;
    }
    uint64_t v9 = *(void *)(StatusReg + 224);
    if (v9) {
      os_retain(*(void **)(StatusReg + 224));
    }
    v5[3] = v9;
    if (v9 == -1) {
      goto LABEL_13;
    }
    if (v9) {
      uint64_t v9 = *(unsigned int *)(v9 + 32);
    }
    if (MEMORY[0xFFFFFC100])
    {
      kdebug_trace(771817476LL, v9, v5, 0LL, 0LL);
      if (v8) {
        goto LABEL_14;
      }
    }

    else
    {
LABEL_13:
      if (v8)
      {
LABEL_14:
        int v10 = *((_DWORD *)queue + 21);
        if ((v10 & 0x40000000) != 0 || (v10 & 0xFFF) == 0)
        {
          inited = (uint64_t *)(__clz(__rbit32(v8 >> 8)) + 1);
        }

        else
        {
          inited = 0LL;
          unint64_t v8 = 0LL;
        }

        goto LABEL_18;
      }
    }

    inited = 0LL;
LABEL_18:
    v5[1] = v8;
    goto LABEL_19;
  }

  v5[5] = (uint64_t)v6;
  inited = _dispatch_continuation_init_slow(v5, (unsigned int *)queue, 0);
LABEL_19:
  if (MEMORY[0xFFFFFC100]) {
    _dispatch_trace_item_push_internal((_opaque_pthread_t *)queue, v5);
  }
  _dispatch_introspection_queue_item_enqueue(queue, (dispatch_object_s *)v5);
  (*(void (**)(dispatch_queue_t, uint64_t *, uint64_t *))(*(void *)queue + 88LL))(queue, v5, inited);
}

void dispatch_channel_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v5 = *(void *)(StatusReg + 176);
  if (!v5)
  {
    _dispatch_async_f_slow((uint64_t)queue, (uint64_t)context, (uint64_t)work, 0, 4LL);
    return;
  }

  *(void *)(StatusReg + 176) = *(void *)(v5 + 16);
  *(void *)uint64_t v5 = 260LL;
  *(void *)(v5 + 32) = work;
  *(void *)(v5 + 40) = context;
  if ((*(void *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF) {
    unint64_t v6 = 4351LL;
  }
  else {
    unint64_t v6 = *(void *)(StatusReg + 32) & 0xFFFFFFLL;
  }
  uint64_t v7 = *(void *)(StatusReg + 224);
  if (v7) {
    os_retain(*(void **)(StatusReg + 224));
  }
  *(void *)(v5 + 24) = v7;
  if (v7 == -1) {
    goto LABEL_11;
  }
  if (v7) {
    uint64_t v7 = *(unsigned int *)(v7 + 32);
  }
  if (MEMORY[0xFFFFFC100])
  {
    kdebug_trace(771817476LL, v7, v5, 0LL, 0LL);
    if (v6) {
      goto LABEL_12;
    }
  }

  else
  {
LABEL_11:
    if (v6)
    {
LABEL_12:
      int v8 = *((_DWORD *)queue + 21);
      if ((v8 & 0x40000000) != 0 || (v8 & 0xFFF) == 0)
      {
        uint64_t v9 = __clz(__rbit32(v6 >> 8)) + 1;
      }

      else
      {
        uint64_t v9 = 0LL;
        unint64_t v6 = 0LL;
      }

      goto LABEL_16;
    }
  }

  uint64_t v9 = 0LL;
LABEL_16:
  *(void *)(v5 + 8) = v6;
  if ((*(_BYTE *)(v5 + 1) & 2) == 0)
  {
    if (MEMORY[0xFFFFFC100]) {
      _dispatch_trace_item_push_internal((_opaque_pthread_t *)queue, (uint64_t *)v5);
    }
    _dispatch_introspection_queue_item_enqueue(queue, (dispatch_object_s *)v5);
  }

  (*(void (**)(dispatch_queue_t, uint64_t, uint64_t))(*(void *)queue + 88LL))(queue, v5, v9);
}

uint64_t dispatch_async_enforce_qos_class_f(_opaque_pthread_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v5 = *(void *)(StatusReg + 176);
  if (!v5) {
    return _dispatch_async_f_slow((uint64_t)a1, a2, a3, 32, 4LL);
  }
  *(void *)(StatusReg + 176) = *(void *)(v5 + 16);
  *(void *)uint64_t v5 = 260LL;
  *(void *)(v5 + 32) = a3;
  *(void *)(v5 + 40) = a2;
  if ((*(void *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF) {
    uint64_t v6 = 4351LL;
  }
  else {
    uint64_t v6 = *(void *)(StatusReg + 32) & 0xFFFFFFLL;
  }
  uint64_t v7 = *(void *)(StatusReg + 224);
  if (v7) {
    os_retain(*(void **)(StatusReg + 224));
  }
  *(void *)(v5 + 24) = v7;
  if (v7 != -1)
  {
    if (v7) {
      uint64_t v7 = *(unsigned int *)(v7 + 32);
    }
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace(771817476LL, v7, v5, 0LL, 0LL);
    }
  }

  uint64_t v8 = v6 | 0x10000000;
  unsigned int v9 = __clz(__rbit32((v6 | 0x10000000uLL) >> 8));
  if (v6) {
    uint64_t v10 = v9 + 1;
  }
  else {
    uint64_t v10 = 0LL;
  }
  if (!v6) {
    uint64_t v8 = 0LL;
  }
  *(void *)(v5 + 8) = v8;
  if ((*(_BYTE *)(v5 + 1) & 2) == 0)
  {
    if (MEMORY[0xFFFFFC100]) {
      _dispatch_trace_item_push_internal(a1, (uint64_t *)v5);
    }
    _dispatch_introspection_queue_item_enqueue((dispatch_queue_s *)a1, (dispatch_object_s *)v5);
  }

  return (*(uint64_t (**)(_opaque_pthread_t *, uint64_t, uint64_t))(a1->__sig + 88))(a1, v5, v10);
}

void dispatch_channel_async(dispatch_queue_t queue, dispatch_block_t block)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v5 = *(uint64_t **)(StatusReg + 176);
  if (v5) {
    *(void *)(StatusReg + 176) = v5[2];
  }
  else {
    uint64_t v5 = (uint64_t *)_dispatch_continuation_alloc_from_heap();
  }
  uint64_t v6 = _dispatch_Block_copy(block);
  uint64_t v7 = (void (*)(uint64_t))*((void *)block + 2);
  *uint64_t v5 = 276LL;
  if (v7 != ___dispatch_block_create_block_invoke)
  {
    v5[4] = (uint64_t)_dispatch_call_block_and_release;
    v5[5] = (uint64_t)v6;
    if ((*(void *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF) {
      unint64_t v8 = 4351LL;
    }
    else {
      unint64_t v8 = *(void *)(StatusReg + 32) & 0xFFFFFFLL;
    }
    uint64_t v9 = *(void *)(StatusReg + 224);
    if (v9) {
      os_retain(*(void **)(StatusReg + 224));
    }
    v5[3] = v9;
    if (v9 == -1) {
      goto LABEL_13;
    }
    if (v9) {
      uint64_t v9 = *(unsigned int *)(v9 + 32);
    }
    if (MEMORY[0xFFFFFC100])
    {
      kdebug_trace(771817476LL, v9, v5, 0LL, 0LL);
      if (v8) {
        goto LABEL_14;
      }
    }

    else
    {
LABEL_13:
      if (v8)
      {
LABEL_14:
        int v10 = *((_DWORD *)queue + 21);
        if ((v10 & 0x40000000) != 0 || (v10 & 0xFFF) == 0)
        {
          inited = (uint64_t *)(__clz(__rbit32(v8 >> 8)) + 1);
        }

        else
        {
          inited = 0LL;
          unint64_t v8 = 0LL;
        }

        goto LABEL_18;
      }
    }

    inited = 0LL;
LABEL_18:
    v5[1] = v8;
    goto LABEL_19;
  }

  v5[5] = (uint64_t)v6;
  inited = _dispatch_continuation_init_slow(v5, (unsigned int *)queue, 0);
LABEL_19:
  if ((*((_BYTE *)v5 + 1) & 2) == 0)
  {
    if (MEMORY[0xFFFFFC100]) {
      _dispatch_trace_item_push_internal((_opaque_pthread_t *)queue, v5);
    }
    _dispatch_introspection_queue_item_enqueue(queue, (dispatch_object_s *)v5);
  }

  (*(void (**)(dispatch_queue_t, uint64_t *, uint64_t *))(*(void *)queue + 88LL))(queue, v5, inited);
}

unint64_t *_dispatch_barrier_trysync_or_async_f( unint64_t *a1, void *context, uint64_t (*function)(void), char a4)
{
  uint64_t v4 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  unint64_t v5 = (unint64_t)*((unsigned __int16 *)a1 + 40) << 41;
  unint64_t v6 = v4 & 0xFFFFFFFC | ((unint64_t)(a4 & 1) << 58);
  uint64_t v7 = a1 + 7;
  do
  {
    unint64_t v8 = __ldaxr(v7);
    if (v8 != (v8 & 0x3000000000LL) - v5 + 0x20000000000000LL)
    {
      __clrex();
      return (unint64_t *)_dispatch_barrier_async_detached_f( (_opaque_pthread_t *)a1,  (uint64_t)context,  (uint64_t)function);
    }
  }

  while (__stxr(v8 & 0x3000000000LL | v6 | 0x60000000000002LL, v7));
  if ((a4 & 1) == 0) {
    return (unint64_t *)_dispatch_barrier_trysync_or_async_f_complete(a1, context, function, a4);
  }
  if (*((_DWORD *)a1 + 2) == 0x7FFFFFFF) {
    return (unint64_t *)_dispatch_barrier_trysync_or_async_f_complete(a1, context, function, a4);
  }
  uint64_t v9 = (unsigned int *)(a1 + 1);
  do
    int v10 = __ldxr(v9);
  while (__stxr(v10 + 2, v9));
  if (v10 > 0) {
    return (unint64_t *)_dispatch_barrier_trysync_or_async_f_complete(a1, context, function, a4);
  }
  qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
  __break(1u);
  return a1;
}

uint64_t _dispatch_barrier_trysync_or_async_f_complete( unint64_t *a1, void *context, uint64_t (*function)(void), char a4)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v9 = (_OWORD *)(StatusReg + 160);
  __int128 v15 = *(_OWORD *)(StatusReg + 160);
  *(void *)(StatusReg + 160) = a1;
  *(void *)(StatusReg + 168) = &v15;
  int v10 = (void (__cdecl *)(void *))function;
  if (context)
  {
    int v10 = (void (__cdecl *)(void *))function;
  }

  _dispatch_introspection_callout_entry(context, v10);
  _dispatch_client_callout((uint64_t)context, function);
  _dispatch_introspection_callout_return(context, v10);
  *uint64_t v9 = v15;
  if ((a4 & 1) != 0)
  {
    unint64_t v12 = a1 + 7;
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 - 0x400000000000000LL, v12));
    if (v13 >> 55 == 8) {
      uint64_t v11 = 5LL;
    }
    else {
      uint64_t v11 = 4LL;
    }
  }

  else
  {
    uint64_t v11 = 4LL;
  }

  return (*(uint64_t (**)(unint64_t *, void, uint64_t))(*a1 + 80))(a1, 0LL, v11);
}

void dispatch_barrier_sync_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  if (*(_BYTE *)(*(void *)queue + 40LL) != 17LL
    || (uint64_t v3 = (uint64_t (*)(void))work,
        unint64_t v5 = context,
        uint64_t v4 = (_opaque_pthread_t *)queue,
        uint64_t v6 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24),
        int v7 = *((_DWORD *)queue + 20),
        (v7 & 0x1000000) != 0)
    && (int v7 = *((_DWORD *)queue + 20), (v7 & 0x40000) != 0))
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Queue type doesn't support dispatch_sync";
    __break(1u);
LABEL_13:
    _dispatch_sync_recurse((uint64_t)v4, v5, v3, 2uLL);
  }

  else
  {
    unint64_t v8 = (unint64_t)(unsigned __int16)v7 << 41;
    uint64_t v9 = v6 & 0xFFFFFFFC;
    int v10 = (unint64_t *)((char *)queue + 56);
    do
    {
      unint64_t v11 = __ldaxr(v10);
      if (v11 != (v11 & 0x3000000000LL) - v8 + 0x20000000000000LL)
      {
        __clrex();
        _dispatch_sync_f_slow((unsigned __int16 *)queue, context, (uint64_t (*)(void))work, 2uLL, (uint64_t)queue, 2LL);
        return;
      }
    }

    while (__stxr(v9 | v11 & 0x3000000000LL | 0x60000000000002LL, v10));
    if (*(void *)(*((void *)queue + 3) + 24LL)) {
      goto LABEL_13;
    }
    if (byte_61298) {
      _dispatch_introspection_order_record((uint64_t)queue);
    }
    unint64_t v12 = _dispatch_introspection_queue_fake_sync_push_pop(v4, (uint64_t)v5, (uint64_t)v3, 2LL);
    _dispatch_lane_barrier_sync_invoke_and_complete((uint64_t)v4, v5, v3, (dispatch_object_s *)v12);
  }

void dispatch_sync_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  if (*((_WORD *)queue + 40) == 1)
  {
    _dispatch_barrier_sync_f((uint64_t)queue, context, (uint64_t (*)(void))work, 0LL);
  }

  else if (*(_BYTE *)(*(void *)queue + 40LL) != 17LL {
         || (*((_DWORD *)queue + 20) & 0x1000000) != 0 && (*((_DWORD *)queue + 20) & 0x40000) != 0)
  }
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Queue type doesn't support dispatch_sync";
    __break(1u);
LABEL_17:
    _dispatch_sync_recurse((uint64_t)queue, context, (uint64_t (*)(void))work, 0LL);
  }

  else if (*((void *)queue + 6))
  {
LABEL_15:
    _dispatch_sync_f_slow((unsigned __int16 *)queue, context, (uint64_t (*)(void))work, 0LL, (uint64_t)queue, 0LL);
  }

  else
  {
    unint64_t v5 = (unint64_t *)((char *)queue + 56);
    do
    {
      unint64_t v6 = __ldxr(v5);
      if ((v6 & 0xFFC0018000000000LL) != 0)
      {
        __clrex();
        goto LABEL_15;
      }
    }

    while (__stxr(v6 + 0x20000000000LL, v5));
    if (*(void *)(*((void *)queue + 3) + 24LL)) {
      goto LABEL_17;
    }
    if (byte_61298)
    {
      int v7 = queue;
      _dispatch_introspection_order_record((uint64_t)queue);
      queue = v7;
    }

    unint64_t v8 = (unsigned __int16 *)queue;
    uint64_t v9 = _dispatch_introspection_queue_fake_sync_push_pop( (_opaque_pthread_t *)queue,  (uint64_t)context,  (uint64_t)work,  0LL);
    _dispatch_sync_invoke_and_complete(v8, context, (uint64_t (*)(void))work, (dispatch_object_s *)v9);
  }

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  unsigned int v2 = (uint64_t (*)(void))*((void *)block + 2);
  else {
    _dispatch_barrier_sync_f((uint64_t)queue, block, v2, 18LL);
  }
}

void _dispatch_sync_block_with_privdata(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  if (*(void (**)(uint64_t))(a2 + 16) != ___dispatch_block_create_block_invoke)
  {
    unint64_t v6 = 0LL;
    goto LABEL_4;
  }

  unint64_t v6 = (void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 32);
  if (v7 == 3512316172LL)
  {
LABEL_4:
    unint64_t v8 = 0LL;
    uint64_t v9 = v6[1];
    if ((v9 & 1) != 0) {
      uint64_t v10 = 34LL;
    }
    else {
      uint64_t v10 = 32LL;
    }
    if ((v9 & 0x40000000) != 0)
    {
      uint64_t v11 = 0LL;
      if ((v6[1] & 0x30LL) != 0x10)
      {
        uint64_t v11 = v6[3];
        unint64_t v12 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32) & 0xFFFFFFLL;
        BOOL v13 = v12 != 0;
        BOOL v14 = v12 < (v11 & 0xFFFFFFuLL);
        unint64_t v8 = v13 && v14 ? v12 : 0LL;
        if (!v13 || !v14) {
          uint64_t v11 = 0LL;
        }
      }

      if ((v9 & 0x80000000) == 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = 0LL;
      if ((v9 & 0x80000000) == 0)
      {
LABEL_15:
        uint64_t v15 = -1LL;
        goto LABEL_18;
      }
    }

    uint64_t v15 = v6[4];
LABEL_18:
    unint64_t v16 = v11 & 0xFFFFFFFF02FFFFFFLL;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v18 = *(void *)(StatusReg + 32);
    if ((v18 & 0x1000000) != 0)
    {
      if (v16) {
        goto LABEL_54;
      }
      unint64_t v16 = v18 & 0xFFFFFFFFFEFFFFFFLL;
    }

    else if (v16 == (v18 & 0xFFFFFFFF77FFFFFFLL))
    {
LABEL_20:
      if (v15 == -1) {
        goto LABEL_24;
      }
      if (*(void *)(StatusReg + 224) == v15)
      {
        if (v15) {
          os_retain((void *)v15);
        }
LABEL_24:
        uint64_t v19 = a1 + 2;
        if (a1[2] == 0x7FFFFFFF) {
          goto LABEL_27;
        }
        do
          int v20 = __ldxr(v19);
        while (__stxr(v20 + 2, v19));
        if (v20 > 0)
        {
LABEL_27:
          unint64_t v21 = v10 | a3;
          unsigned int v22 = v6 + 7;
          while (!__ldxr(v22))
          {
          }

          __clrex();
          if (*v19 != 0x7FFFFFFF)
          {
            do
              int v24 = __ldxr(v19);
            while (__stlxr(v24 - 2, v19));
            if (v24 <= 2)
            {
              if (v24 != 2) {
                goto LABEL_60;
              }
              _os_object_dispose(a1, (const char *)a2);
            }
          }

LABEL_34:
          if ((v21 & 2) != 0) {
            _dispatch_barrier_sync_f((uint64_t)a1, (void *)a2, (uint64_t (*)(void))_dispatch_block_sync_invoke, v21);
          }
          else {
            _dispatch_sync_f((uint64_t)a1, (void *)a2, (uint64_t (*)(void))_dispatch_block_sync_invoke, v21);
          }
          uint64_t v19 = *(unsigned int **)(StatusReg + 32);
          if ((v19 & 0x1000000) == 0)
          {
LABEL_39:
            if (v15 == -1) {
              return;
            }
            if (*(void *)(StatusReg + 224) == v15)
            {
              if (v15) {
                os_release((void *)v15);
              }
              return;
            }

            unint64_t v8 = 0LL;
LABEL_56:
            _dispatch_set_priority_and_voucher_slow(v8, (unsigned int *)v15, 6);
            return;
          }
        }

        else
        {
          qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
          __break(1u);
        }

        if (v8) {
          goto LABEL_56;
        }
        unint64_t v8 = (unint64_t)v19 & 0xFFFFFFFFFEFFFFFFLL;
LABEL_51:
        if (v8) {
          goto LABEL_56;
        }
        goto LABEL_39;
      }

      unint64_t v16 = 0LL;
LABEL_54:
      uint64_t v15 = _dispatch_set_priority_and_voucher_slow(v16, (unsigned int *)v15, 0);
      goto LABEL_24;
    }

    if (v16) {
      goto LABEL_54;
    }
    goto LABEL_20;
  }

  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corruption of dispatch block object";
  qword_61258 = v7;
  __break(1u);
LABEL_60:
  qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
}

  unint64_t v21 = *(void (***)(char *))(StatusReg + 192);
  if (v21) {
    (*v21)(object);
  }
  unsigned int v22 = *(void *)v19;
  if (*(void *)v19 < 0x1000uLL)
  {
    int v23 = *(unsigned int **)(v19 + 24);
    if ((v22 & 4) != 0) {
      *(void *)(v19 + 24) = -1LL;
    }
    if (v23 != (unsigned int *)-1LL)
    {
      int v24 = v23;
      if (v23) {
        int v24 = (unsigned int *)v23[8];
      }
      if (MEMORY[0xFFFFFC100]) {
        kdebug_trace(771817480LL, v24, v19, 0LL, 0LL);
      }
    }

    v54 = v11;
    int v25 = *(void *)(v19 + 8);
    if (v25 == -1)
    {
      uint64_t v28 = 0LL;
    }

    else
    {
      unsigned int v26 = *(void *)(StatusReg + 200);
      else {
        unsigned int v27 = 0LL;
      }
      uint64_t v28 = v27 & 0xFFFFFFFFFFFFFF00LL | *(void *)(StatusReg + 200);
      if ((v25 & 0xFFFFFF) != 0)
      {
        if ((v25 & 0xFFFFFFuLL) >= (v27 & 0xFFFFFF00)
          && ((v26 & 0x44000000) != 0 || (*(void *)(v19 + 8) & 0x10000000LL) != 0))
        {
          uint64_t v28 = v25 & 0xFFFFFF;
        }
      }

      else if ((unsigned __int16)v26 >> 12)
      {
        uint64_t v28 = (256LL << (((unsigned __int16)v26 >> 12) - 1)) | 0xFF;
      }
    }

    unint64_t v31 = v28 & 0xFFFFFFFF02FFFFFFLL;
    uint64_t v32 = *(void *)(StatusReg + 32);
    if ((v32 & 0x1000000) != 0)
    {
      if (v31) {
        goto LABEL_135;
      }
      unint64_t v31 = v32 & 0xFFFFFFFFFEFFFFFFLL;
    }

    else if (v31 == (v32 & 0xFFFFFFFF77FFFFFFLL))
    {
LABEL_64:
      if (*(unsigned int **)(StatusReg + 224) == v23)
      {
        if ((v22 & 4) != 0 && v23) {
          os_release(v23);
        }
LABEL_69:
        if ((v22 & 0x200) != 0) {
          goto LABEL_73;
        }
LABEL_70:
        if (MEMORY[0xFFFFFC100]) {
          _dispatch_trace_item_pop_internal((_opaque_pthread_t *)object, (uint64_t *)v19);
        }
        _dispatch_introspection_queue_item_dequeue((dispatch_queue_s *)object, (dispatch_object_s *)v19);
LABEL_73:
        if ((v22 & 4) != 0)
        {
          uint64_t v34 = *(void *)(StatusReg + 176);
          if (v34) {
            uint64_t v35 = *(_DWORD *)(v34 + 8) + 1;
          }
          else {
            uint64_t v35 = 1;
          }
          unint64_t v33 = v19;
          if (v35 <= _dispatch_continuation_cache_limit)
          {
            unint64_t v33 = 0LL;
            *(void *)(v19 + 16) = v34;
            *(_DWORD *)(v19 + 8) = v35;
            *(void *)(StatusReg + 176) = v19;
          }
        }

        else
        {
          unint64_t v33 = 0LL;
        }

        v53 = v33;
        if ((v22 & 8) != 0)
        {
          v52 = v5;
          uint64_t v47 = *(dispatch_group_s **)(v19 + 48);
          v48 = *(void *)(*(void *)v47 + 40LL);
          if (v48 != 514) {
            _dispatch_queue_override_invoke_cold_1(v48);
          }
          v49 = *(void (**)(void (**)(void)))(v19 + 32);
          v50 = *(void **)(v19 + 40);
          v51 = (void (__cdecl *)(void *))v49;
          if (v50)
          {
            v51 = *(void (__cdecl **)(void *))(v19 + 32);
            if (v49 == _dispatch_call_block_and_release) {
              v51 = (void (__cdecl *)(void *))v50[2];
            }
          }

          _dispatch_introspection_callout_entry(*(void **)(v19 + 40), v51);
          _dispatch_client_callout((uint64_t)v50, (uint64_t (*)(void))v49);
          _dispatch_introspection_callout_return(v50, v51);
          if (MEMORY[0xFFFFFC100]) {
            kdebug_trace(772079660LL, v19, 0LL, 0LL, 0LL);
          }
          _dispatch_introspection_queue_item_complete((dispatch_object_s *)v19);
          dispatch_group_leave(v47);
          unint64_t v5 = v52;
        }

        else
        {
          uint64_t v36 = v5;
          v38 = *(void (**)(void (**)(void)))(v19 + 32);
          int v37 = *(void **)(v19 + 40);
          uint64_t v39 = (void (__cdecl *)(void *))v38;
          if (v37)
          {
            uint64_t v39 = *(void (__cdecl **)(void *))(v19 + 32);
            if (v38 == _dispatch_call_block_and_release) {
              uint64_t v39 = (void (__cdecl *)(void *))v37[2];
            }
          }

          _dispatch_introspection_callout_entry(*(void **)(v19 + 40), v39);
          _dispatch_client_callout((uint64_t)v37, (uint64_t (*)(void))v38);
          _dispatch_introspection_callout_return(v37, v39);
          if (MEMORY[0xFFFFFC100]) {
            kdebug_trace(772079660LL, v19, 0LL, 0LL, 0LL);
          }
          _dispatch_introspection_queue_item_complete((dispatch_object_s *)v19);
          unint64_t v5 = v36;
        }

        uint64_t v11 = v54;
        uint64_t v30 = v55;
        if (v53)
        {
          _dispatch_continuation_free_to_cache_limit(v53);
          if (!v21) {
            goto LABEL_90;
          }
        }

        else if (!v21)
        {
          goto LABEL_90;
        }

  _dispatch_async_and_wait_f_slow((_opaque_pthread_t *)a1, a4, (uint64_t)a2, v11);
}

        uint64_t v19 = *(void *)(v10 + 16);
        *v63 = v19;
        if (!v19)
        {
          uint64_t v39 = (unint64_t *)(v10 + 16);
          while (1)
          {
            uint64_t v40 = __ldxr(v52);
            if (v10 != (v40 & 0xFFFFFFFFFFFFFFF8LL)) {
              break;
            }
            if (!__stlxr(0LL, v52)) {
              goto LABEL_35;
            }
          }

          __clrex();
          uint64_t v19 = *v39;
          if (!*v39) {
            uint64_t v19 = _dispatch_wait_for_enqueuer(v39, (uint64_t)v52);
          }
          *v63 = v19;
        }

        uint64_t result = _dispatch_event_loop_leave_deferred(a1, v10);
      }
    }

    break;
  }

  StatusReg[25] = 0LL;
  StatusReg[20] = 0LL;
  unint64_t v21 = StatusReg[4];
  if ((v21 & 0x1000000) != 0)
  {
    uint64_t result = v21 & 0xFFFFFFFFFEFFFFFFLL;
    if ((v21 & 0xFFFFFFFFFEFFFFFFLL) != 0) {
      return _dispatch_set_priority_and_voucher_slow(result, 0LL, 14);
    }
  }

  if (StatusReg[28])
  {
    uint64_t result = 0LL;
    return _dispatch_set_priority_and_voucher_slow(result, 0LL, 14);
  }

  return result;
}

double _dispatch_barrier_sync_f(uint64_t a1, void *a2, uint64_t (*a3)(void), uint64_t a4)
{
  if (*(_BYTE *)(*(void *)a1 + 40LL) != 17LL
    || (uint64_t v7 = a4,
        uint64_t v4 = a3,
        unint64_t v6 = a2,
        unint64_t v5 = (_opaque_pthread_t *)a1,
        uint64_t v8 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24),
        int v9 = *(_DWORD *)(a1 + 80),
        (v9 & 0x1000000) != 0)
    && (int v9 = *(_DWORD *)(a1 + 80), (v9 & 0x40000) != 0))
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Queue type doesn't support dispatch_sync";
    __break(1u);
    return _dispatch_sync_recurse((uint64_t)v5, v6, v4, v7 | 2);
  }

  else
  {
    unint64_t v10 = (unint64_t)(unsigned __int16)v9 << 41;
    uint64_t v11 = v8 & 0xFFFFFFFC;
    unint64_t v12 = (unint64_t *)(a1 + 56);
    do
    {
      unint64_t v13 = __ldaxr(v12);
      if (v13 != (v13 & 0x3000000000LL) - v10 + 0x20000000000000LL)
      {
        __clrex();
        return _dispatch_sync_f_slow((unsigned __int16 *)a1, a2, a3, 2uLL, a1, a4 | 2);
      }
    }

    while (__stxr(v11 | v13 & 0x3000000000LL | 0x60000000000002LL, v12));
    if (*(void *)(*(void *)(a1 + 24) + 24LL)) {
      return _dispatch_sync_recurse((uint64_t)v5, v6, v4, v7 | 2);
    }
    if (byte_61298) {
      _dispatch_introspection_order_record(a1);
    }
    BOOL v14 = _dispatch_introspection_queue_fake_sync_push_pop(v5, (uint64_t)v6, (uint64_t)v4, v7 | 2);
    _dispatch_lane_barrier_sync_invoke_and_complete((uint64_t)v5, v6, v4, (dispatch_object_s *)v14);
  }

  return result;
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  unsigned int v2 = (uint64_t (*)(void))*((void *)block + 2);
  else {
    _dispatch_sync_f((uint64_t)queue, block, v2, 0x10uLL);
  }
}

double _dispatch_sync_f(uint64_t a1, void *a2, uint64_t (*a3)(void), unint64_t a4)
{
  if (*(_WORD *)(a1 + 80) == 1) {
    return _dispatch_barrier_sync_f(a1, a2, a3, a4);
  }
  if (*(_BYTE *)(*(void *)a1 + 40LL) != 17LL
    || (*(_DWORD *)(a1 + 80) & 0x1000000) != 0 && (*(_DWORD *)(a1 + 80) & 0x40000) != 0)
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Queue type doesn't support dispatch_sync";
    __break(1u);
    return _dispatch_sync_recurse(a1, a2, a3, a4);
  }

  else if (*(void *)(a1 + 48))
  {
    return _dispatch_sync_f_slow((unsigned __int16 *)a1, a2, a3, 0LL, a1, a4);
  }

  else
  {
    uint64_t v7 = (unint64_t *)(a1 + 56);
    do
    {
      unint64_t v8 = __ldxr(v7);
      if ((v8 & 0xFFC0018000000000LL) != 0)
      {
        __clrex();
        return _dispatch_sync_f_slow((unsigned __int16 *)a1, a2, a3, 0LL, a1, a4);
      }
    }

    while (__stxr(v8 + 0x20000000000LL, v7));
    if (*(void *)(*(void *)(a1 + 24) + 24LL)) {
      return _dispatch_sync_recurse(a1, a2, a3, a4);
    }
    if (byte_61298)
    {
      uint64_t v9 = a1;
      _dispatch_introspection_order_record(a1);
      a1 = v9;
    }

    unint64_t v10 = (unsigned __int16 *)a1;
    uint64_t v11 = _dispatch_introspection_queue_fake_sync_push_pop((_opaque_pthread_t *)a1, (uint64_t)a2, (uint64_t)a3, a4);
    _dispatch_sync_invoke_and_complete(v10, a2, a3, (dispatch_object_s *)v11);
  }

  return result;
}

void dispatch_async_and_wait_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  if (*((void *)queue + 3))
  {
    if (*((_WORD *)queue + 40) == 1) {
      unint64_t v3 = 130LL;
    }
    else {
      unint64_t v3 = 128LL;
    }
    _dispatch_async_and_wait_f((uint64_t)queue, (uint64_t)context, (uint64_t)work, v3);
  }

  else
  {
    _dispatch_sync_function_invoke((uint64_t)queue, context, (uint64_t (*)(void))work);
  }

double _dispatch_sync_function_invoke(uint64_t a1, void *context, uint64_t (*function)(void))
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unint64_t v6 = (_OWORD *)(StatusReg + 160);
  __int128 v9 = *(_OWORD *)(StatusReg + 160);
  *(void *)(StatusReg + 160) = a1;
  *(void *)(StatusReg + 168) = &v9;
  uint64_t v7 = (void (__cdecl *)(void *))function;
  if (context)
  {
    uint64_t v7 = (void (__cdecl *)(void *))function;
  }

  _dispatch_introspection_callout_entry(context, v7);
  _dispatch_client_callout((uint64_t)context, function);
  _dispatch_introspection_callout_return(context, v7);
  double result = *(double *)&v9;
  _OWORD *v6 = v9;
  return result;
}

void _dispatch_async_and_wait_f(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  int v5 = *(_DWORD *)(StatusReg + 24);
  uint64_t v6 = *(void *)(StatusReg + 32) | 0x10000000LL;
  v7[0] = a4;
  v7[1] = v6;
  v7[2] = 0LL;
  v7[3] = *(void *)(StatusReg + 224);
  v7[4] = (uint64_t)_dispatch_async_and_wait_invoke;
  v7[5] = (uint64_t)v7;
  v7[6] = 0LL;
  v7[7] = a1;
  v7[8] = a3;
  v7[10] = 0LL;
  v7[11] = 0LL;
  v7[9] = a2;
  int v8 = 0;
  int v9 = v5;
  __int16 v10 = 0;
  char v11 = 0;
  _dispatch_async_and_wait_recurse(a1, v7, v5, a4);
}

void dispatch_barrier_async_and_wait_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  if (*((void *)queue + 3)) {
    _dispatch_async_and_wait_f((uint64_t)queue, (uint64_t)context, (uint64_t)work, 0x82uLL);
  }
  else {
    _dispatch_sync_function_invoke((uint64_t)queue, context, (uint64_t (*)(void))work);
  }
}

void dispatch_barrier_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
  if (*((void *)queue + 3))
  {
    unsigned int v2 = (void (*)(uint64_t))*((void *)block + 2);
    if (v2 == ___dispatch_block_create_block_invoke) {
      _dispatch_async_and_wait_block_with_privdata((unsigned int *)queue, (uint64_t)block, 146LL);
    }
    else {
      _dispatch_async_and_wait_f((uint64_t)queue, (uint64_t)block, (uint64_t)v2, 0x92uLL);
    }
  }

  else
  {
    dispatch_barrier_sync(queue, block);
  }

void _dispatch_async_and_wait_block_with_privdata(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  if (*(void (**)(uint64_t))(a2 + 16) == ___dispatch_block_create_block_invoke)
  {
    uint64_t v6 = (void *)(a2 + 32);
    uint64_t v7 = *(void *)(a2 + 32);
    if (v7 != 3512316172LL)
    {
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corruption of dispatch block object";
      qword_61258 = v7;
      __break(1u);
      goto LABEL_31;
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  uint64_t v8 = v6[1];
  if ((v8 & 0x40000000) == 0
    || (v6[1] & 0x30LL) == 0x10
    || ((uint64_t v9 = v6[3], (v10 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32) & 0xFFFFFFLL) != 0)
      ? (BOOL v11 = v10 >= (v9 & 0xFFFFFFuLL))
      : (BOOL v11 = 1),
        v11))
  {
    uint64_t v9 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
  }

  unint64_t v12 = (uint64_t *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  uint64_t v13 = *v12;
  BOOL v14 = a1 + 2;
  if (a1[2] == 0x7FFFFFFF) {
    goto LABEL_17;
  }
  do
    int v15 = __ldxr(v14);
  while (__stxr(v15 + 2, v14));
  if (v15 > 0)
  {
LABEL_17:
    unint64_t v16 = v6 + 7;
    while (!__ldxr(v16))
    {
    }

    __clrex();
    if (*v14 == 0x7FFFFFFF) {
      goto LABEL_24;
    }
    do
      LODWORD(v6) = __ldxr(v14);
    while (__stlxr((_DWORD)v6 - 2, v14));
  }

  else
  {
    qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
  }

  if ((_DWORD)v6 != 2)
  {
LABEL_31:
    qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
    __break(1u);
    return;
  }

  _os_object_dispose(a1, (const char *)a2);
LABEL_24:
  uint64_t v18 = 34LL;
  if ((v8 & 1) == 0) {
    uint64_t v18 = 32LL;
  }
  int v19 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  v20[0] = v18 | a3;
  v20[1] = v9 | 0x10000000;
  v20[2] = 0LL;
  v20[3] = v13;
  v20[4] = (uint64_t)_dispatch_async_and_wait_invoke;
  v20[5] = (uint64_t)v20;
  v20[6] = 0LL;
  v20[7] = (uint64_t)a1;
  v20[8] = (uint64_t)_dispatch_block_sync_invoke;
  v20[10] = 0LL;
  v20[11] = 0LL;
  v20[9] = a2;
  int v21 = 0;
  int v22 = v19;
  __int16 v23 = 0;
  char v24 = 0;
  _dispatch_async_and_wait_recurse((uint64_t)a1, v20, v19, v18 | a3);
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
  if (*((void *)queue + 3))
  {
    if (*((_WORD *)queue + 40) == 1) {
      uint64_t v2 = 146LL;
    }
    else {
      uint64_t v2 = 144LL;
    }
    unint64_t v3 = (void (*)(uint64_t))*((void *)block + 2);
    if (v3 == ___dispatch_block_create_block_invoke) {
      _dispatch_async_and_wait_block_with_privdata((unsigned int *)queue, (uint64_t)block, v2);
    }
    else {
      _dispatch_async_and_wait_f((uint64_t)queue, (uint64_t)block, (uint64_t)v3, v2);
    }
  }

  else
  {
    dispatch_sync(queue, block);
  }

void dispatch_queue_set_specific( dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
  if (key)
  {
    uint64_t v8 = *((void *)queue + 11);
    uint64_t v9 = *(void *)(*(void *)queue + 40LL);
    LODWORD(v10) = v9;
    uint64_t v10 = v9 & 0x20000;
    if (v9 != 394769 && v10 != 0)
    {
      do
      {
        qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Queue doesn't support dispatch_queue_set_specific";
        __break(1u);
LABEL_8:
        ;
      }

      while ((_DWORD)v10 != 18);
    }

    if (!context || v8)
    {
      if (!v8) {
        return;
      }
    }

    else
    {
      _dispatch_queue_init_specific((uint64_t)queue);
      uint64_t v8 = *((void *)queue + 11);
    }

    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    unsigned int v13 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    while (!__ldaxr((unsigned int *)v8))
    {
    }

    __clrex();
    _dispatch_unfair_lock_lock_slow(v8, 0x10000);
LABEL_18:
    int v15 = *(const void ***)(v8 + 8);
    if (v15)
    {
      while (*v15 != key)
      {
        int v15 = (const void **)v15[3];
        if (!v15) {
          goto LABEL_21;
        }
      }

      uint64_t v18 = (uint64_t)v15[2];
      if (v18) {
        _dispatch_barrier_async_detached_f((_opaque_pthread_t *)&off_65340, (uint64_t)v15[1], v18);
      }
      if (context)
      {
        v15[1] = context;
        v15[2] = destructor;
      }

      else
      {
        int v19 = v15[3];
        int v20 = v15[4];
        if (v19)
        {
          v19[4] = v20;
          int v20 = v15[4];
        }

        else
        {
          *(void *)(v8 + 16) = v20;
        }

        *int v20 = v19;
        free(v15);
      }
    }

    else
    {
LABEL_21:
      if (context)
      {
        unint64_t v16 = _dispatch_calloc(1uLL, 0x28uLL);
        *unint64_t v16 = key;
        v16[1] = context;
        v16[2] = destructor;
        v16[3] = 0LL;
        uint64_t v17 = *(void **)(v8 + 16);
        v16[4] = v17;
        *uint64_t v17 = v16;
        *(void *)(v8 + 16) = v16 + 3;
      }
    }

    unsigned int v21 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    do
      unsigned int v22 = __ldxr((unsigned int *)v8);
    while (__stlxr(0, (unsigned int *)v8));
    if (v22 != v21) {
      _dispatch_unfair_lock_unlock_slow(v8, v22);
    }
  }

void _dispatch_queue_init_specific(uint64_t a1)
{
  uint64_t v2 = _dispatch_calloc(1uLL, 0x18uLL);
  v2[1] = 0LL;
  int v2[2] = v2 + 1;
  unint64_t v3 = (unint64_t *)(a1 + 88);
  while (!__ldxr(v3))
  {
  }

  __clrex();
  _dispatch_queue_specific_head_dispose(v2);
}

void *__cdecl dispatch_queue_get_specific(dispatch_queue_t queue, const void *key)
{
  uint64_t v2 = (void *)key;
  if (key)
  {
    uint64_t v3 = *((void *)queue + 11);
    uint64_t v4 = *(void *)(*(void *)queue + 40LL);
    uint64_t v5 = v4;
    BOOL v7 = (v4 & 0x20000) == 0 || v4 == 394769;
    if (v5 != 17) {
      BOOL v7 = v5 == 18;
    }
    if (!v7 || v3 == 0)
    {
      return 0LL;
    }

    else
    {
      unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      unsigned int v10 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
      while (!__ldaxr((unsigned int *)v3))
      {
      }

      __clrex();
      _dispatch_unfair_lock_lock_slow(v3, 0x10000);
LABEL_19:
      unint64_t v12 = *(void ***)(v3 + 8);
      if (v12)
      {
        while (*v12 != v2)
        {
          unint64_t v12 = (void **)v12[3];
          if (!v12) {
            goto LABEL_22;
          }
        }

        uint64_t v2 = v12[1];
      }

      else
      {
LABEL_22:
        uint64_t v2 = 0LL;
      }

      unsigned int v13 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
      do
        unsigned int v14 = __ldxr((unsigned int *)v3);
      while (__stlxr(0, (unsigned int *)v3));
      if (v14 != v13) {
        _dispatch_unfair_lock_unlock_slow(v3, v14);
      }
    }
  }

  return v2;
}

void *__cdecl dispatch_get_specific(const void *key)
{
  uint64_t v1 = 0LL;
  if (key)
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    for (i = *(void **)(StatusReg + 160); i; i = (void *)i[3])
    {
      uint64_t v5 = i[11];
      uint64_t v6 = *(void *)(*i + 40LL);
      uint64_t v7 = v6;
      BOOL v9 = (v6 & 0x20000) == 0 || v6 == 394769;
      if (v7 != 17) {
        BOOL v9 = v7 == 18;
      }
      if (!v9 || v5 == 0)
      {
        uint64_t v1 = 0LL;
      }

      else
      {
        unsigned int v11 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        while (!__ldaxr((unsigned int *)v5))
        {
        }

        __clrex();
        _dispatch_unfair_lock_lock_slow(v5, 0x10000);
LABEL_20:
        uint64_t v13 = *(void *)(v5 + 8);
        if (v13)
        {
          while (*(const void **)v13 != key)
          {
            uint64_t v13 = *(void *)(v13 + 24);
            if (!v13) {
              goto LABEL_23;
            }
          }

          uint64_t v1 = *(void **)(v13 + 8);
        }

        else
        {
LABEL_23:
          uint64_t v1 = 0LL;
        }

        unsigned int v14 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        do
          unsigned int v15 = __ldxr((unsigned int *)v5);
        while (__stlxr(0, (unsigned int *)v5));
        if (v15 != v14) {
          _dispatch_unfair_lock_unlock_slow(v5, v15);
        }
      }

      if (v1) {
        break;
      }
    }
  }

  return v1;
}

uint64_t dispatch_queue_set_label_nocopy(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 8) != 0x7FFFFFFF)
  {
    if ((*(_DWORD *)(result + 80) & 0x200000) != 0) {
      dispatch_queue_set_label_nocopy_cold_1(result);
    }
    *(void *)(result + 72) = a2;
  }

  return result;
}

uint64_t _dispatch_queue_compute_priority_and_wlh(uint64_t a1, uint64_t *a2)
{
  int v2 = *(_DWORD *)(a1 + 84);
  int v3 = (unsigned __int16)v2 >> 12;
  unint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = -4LL;
  if ((*(void *)(a1 + 56) & 0x2000000000LL) != 0) {
    uint64_t v5 = a1;
  }
  uint64_t v6 = *(void *)(*(void *)v4 + 40LL);
  if ((v6 & 0x10000) == 0)
  {
    unint64_t v16 = (unsigned int *)(a1 + 80);
    unsigned int v7 = *(_DWORD *)(a1 + 84) & 0xFFF;
    while ((__objc2_class **)v4 != &_dispatch_mgr_q)
    {
      if ((*(_DWORD *)(v4 + 80) & 0x40000) != 0 && (*(_DWORD *)(v4 + 80) & 0x1000000) == 0)
      {
        if (a2) {
          *a2 = -4LL;
        }
        return *(unsigned int *)(v4 + 84);
      }

      if (*(void *)(v4 + 56) >> 55) {
        goto LABEL_44;
      }
      if ((*(void *)(v4 + 56) & 0x2000000000LL) != 0)
      {
        uint64_t v5 = v4;
        if (v6 == 18LL)
        {
          do
            unsigned int v17 = __ldxr(v16);
          while (__stxr(v17 & 0xFFBFFFFF, v16));
          uint64_t v5 = v4;
        }
      }

      else if ((*(_DWORD *)(v4 + 80) & 0x400000) != 0)
      {
LABEL_44:
        if (MEMORY[0xFFFFFC100])
        {
          if (*(_BYTE *)(*(void *)a1 + 40LL) == 19LL) {
            uint64_t v20 = a1;
          }
          else {
            uint64_t v20 = 0LL;
          }
          kdebug_trace(771883024LL, a1, v20, 0LL, 0LL);
        }

        uint64_t result = 0LL;
        if (a2) {
          *a2 = 0LL;
        }
        return result;
      }

      int v18 = *(_DWORD *)(v4 + 84);
      unint64_t v4 = *(void *)(v4 + 24);
      if ((v18 & 0x20000000) == 0)
      {
        if (!v3) {
          int v3 = (unsigned __int16)v18 >> 12;
        }
        unsigned int v19 = v18 & 0xFFF;
        if (v7 <= v19) {
          unsigned int v7 = v19;
        }
        uint64_t v6 = *(void *)(*(void *)v4 + 40LL);
        if ((v6 & 0x10000) == 0) {
          continue;
        }
      }

      goto LABEL_5;
    }

    if (a2) {
      *a2 = -4LL;
    }
    return 0x2000000LL;
  }

  unsigned int v7 = *(_DWORD *)(a1 + 84) & 0xFFF;
LABEL_5:
  BOOL v8 = v4 < (unint64_t)&_dispatch_root_queues || v4 >= (unint64_t)&_dispatch_queue_serial_numbers;
  if (v8 && *(void *)(v4 + 64) != 22LL)
  {
    if (a2) {
      *a2 = -4LL;
    }
    return 0x2000000LL;
  }

  int v9 = *(_DWORD *)(v4 + 84);
  unsigned int v10 = (unsigned __int16)v9 >> 12;
  if (v3) {
    unsigned int v10 = v3;
  }
  unsigned int v11 = *(_DWORD *)(v4 + 84) & 0xFFF;
  if (v7 > v11) {
    unsigned int v11 = v7;
  }
  uint64_t result = v11 | v9 & 0x88000000;
  if ((v2 & 0x40000000) != 0 || (v2 & 0xFFF) == 0)
  {
    unsigned int v13 = result | v2 & 0x40000000;
    BOOL v14 = v10 > ((v11 >> 8) & 0xF);
    unsigned int v15 = v13 | ((v10 & 0xF) << 12) | 0x4000000;
    if (v14) {
      uint64_t result = v15;
    }
    else {
      uint64_t result = v13;
    }
  }

  if (a2) {
    *a2 = v5;
  }
  return result;
}

void dispatch_set_qos_class_floor( dispatch_object_t object, dispatch_qos_class_t qos_class, int relative_priority)
{
  if ((*(void *)(*(void *)object + 40LL) & 0xF0LL) != 0x10) {
    dispatch_set_qos_class_floor_cold_2();
  }
  if (*(void *)(*(void *)object + 40LL) == 18LL)
  {
    dispatch_workloop_set_qos_class_floor((uint64_t)object, qos_class, relative_priority, 0);
  }

  else
  {
    HIDWORD(v4) = qos_class - 5;
    LODWORD(v4) = qos_class - 5;
    unsigned int v3 = v4 >> 2;
    if (v3 <= 7 && ((0xBBu >> v3) & 1) != 0) {
      int v5 = (relative_priority - 1) | dword_3FF4C[v3] | 0x40000000;
    }
    else {
      int v5 = 0;
    }
    *((_DWORD *)object + 21) = v5 | *((_DWORD *)object + 21) & 0xBFFFF000;
    uint64_t v6 = *((void *)object + 7);
    if ((~v6 & 0x180000000000000LL) != 0) {
      dispatch_set_qos_class_floor_cold_1(v6);
    }
  }

_DWORD *dispatch_workloop_set_qos_class_floor(uint64_t a1, int a2, char a3, char a4)
{
  uint64_t v5 = *(void *)(a1 + 56);
  if ((~v5 & 0x180000000000000LL) != 0) {
    dispatch_set_qos_class_floor_cold_1(v5);
  }
  uint64_t result = *(_DWORD **)(a1 + 200);
  if (!result)
  {
    uint64_t result = _dispatch_calloc(1uLL, 0x38uLL);
    *(void *)(a1 + 200) = result;
  }

  HIDWORD(v11) = a2 - 5;
  LODWORD(v11) = a2 - 5;
  unsigned int v10 = v11 >> 2;
  if (v10 <= 7 && ((0xBBu >> v10) & 1) != 0)
  {
    result[1] = dword_3FF4C[v10] | (a3 - 1);
    unsigned int v12 = *result | 8;
    if ((a4 & 1) == 0) {
      goto LABEL_7;
    }
LABEL_9:
    result[4] = 2;
    unsigned int v13 = v12 | 2;
    goto LABEL_10;
  }

  result[1] = 0;
  unsigned int v12 = *result & 0xFFFFFFF7;
  if ((a4 & 1) != 0) {
    goto LABEL_9;
  }
LABEL_7:
  unsigned int v13 = v12 & 0xFFFFFFFD;
LABEL_10:
  *uint64_t result = v13;
  return result;
}

uint64_t dispatch_set_qos_class(uint64_t a1, int a2, char a3)
{
  if ((*(void *)(*(void *)a1 + 40LL) & 0xF0LL) != 0x10
    || *(void *)(*(void *)a1 + 40LL) == 18LL)
  {
    dispatch_set_qos_class_cold_1();
  }

  HIDWORD(v5) = a2 - 5;
  LODWORD(v5) = a2 - 5;
  unsigned int v4 = v5 >> 2;
  if (v4 <= 7 && ((0xBBu >> v4) & 1) != 0) {
    int v6 = dword_3FF4C[v4] | (a3 - 1);
  }
  else {
    int v6 = 0;
  }
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a1 + 84) & 0xBFFFF000 | v6;
  uint64_t result = *(void *)(a1 + 56);
  if ((~result & 0x180000000000000LL) != 0) {
    dispatch_set_qos_class_floor_cold_1(result);
  }
  return result;
}

uint64_t dispatch_set_qos_class_fallback(uint64_t a1, int a2)
{
  if ((*(void *)(*(void *)a1 + 40LL) & 0xF0LL) != 0x10) {
    dispatch_set_qos_class_fallback_cold_2();
  }
  HIDWORD(v3) = a2 - 5;
  LODWORD(v3) = a2 - 5;
  unsigned int v2 = v3 >> 2;
  if (v2 > 7) {
    int v4 = 0;
  }
  else {
    int v4 = dword_3FF6C[v2];
  }
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a1 + 84) & 0xFBFF0FFF | v4;
  uint64_t result = *(void *)(a1 + 56);
  if ((~result & 0x180000000000000LL) != 0) {
    dispatch_set_qos_class_floor_cold_1(result);
  }
  return result;
}

dispatch_queue_t dispatch_queue_create_with_target_V2( const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)_dispatch_lane_create_with_target( (uint64_t)label,  (uint64_t *)attr,  (__objc2_class **)target,  0);
}

uint64_t _dispatch_lane_create_with_target(uint64_t a1, uint64_t *a2, __objc2_class **a3, unsigned __int8 a4)
{
  uint64_t result = (uint64_t)_dispatch_queue_attr_to_info(a2);
  uint64_t v10 = result;
  int v11 = result;
  unsigned int v12 = WORD1(result) & 3;
  if (a3 && v12)
  {
    if (!a3[3]) {
      goto LABEL_6;
    }
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot specify both overcommit and a non-global target queue";
    qword_61258 = (uint64_t)a3;
    __break(1u);
  }

  if (!a3)
  {
    if ((result & 0x100000) != 0) {
      int v14 = 2;
    }
    else {
      int v14 = 1;
    }
    if (!v12) {
      unsigned int v12 = v14;
    }
    goto LABEL_28;
  }

LABEL_28:
    LODWORD(v15) = result;
LABEL_30:
    if ((_DWORD)v15) {
      uint64_t v15 = v15;
    }
    else {
      uint64_t v15 = 4LL;
    }
    if ((v15 - 7) <= 0xFFFFFFF9)
    {
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corrupted priority";
      qword_61258 = v15;
      __break(1u);
      goto LABEL_81;
    }

    int v16 = 3 * v15;
    if (v12 == 1) {
      ++v16;
    }
    a3 = &_dispatch_root_queues + 16 * (unint64_t)(v16 - 3);
LABEL_38:
    if ((((result & 0x2C0000) == 0) & a4) != 0) {
      int v17 = 0x400000;
    }
    else {
      int v17 = 0;
    }
    if ((result & 0x100000) != 0) {
      int v18 = &OBJC_CLASS___OS_dispatch_queue_concurrent;
    }
    else {
      int v18 = &OBJC_CLASS___OS_dispatch_queue_serial;
    }
    unsigned int v19 = (result >> 18) & 3;
    if (v19 == 1)
    {
      v17 |= 0x10000u;
      if (a1)
      {
LABEL_48:
        uint64_t v20 = _dispatch_strdup_if_mutable((const char *)a1);
LABEL_52:
        uint64_t v21 = _dispatch_object_alloc(v18, 120LL);
        a1 = v21;
        if ((v10 & 0x100000) != 0) {
          uint64_t v22 = 4094LL;
        }
        else {
          uint64_t v22 = 1LL;
        }
        uint64_t v23 = 0x180000000000000LL;
        if ((v10 & 0x200000) != 0)
        {
          *(_DWORD *)(v21 + 8) += 2;
          if (*(_BYTE *)(*(void *)v21 + 40LL) == 19LL) {
            ++*(_DWORD *)(v21 + 8);
          }
        }

        else
        {
          uint64_t v23 = 0LL;
        }

        *(void *)(v21 + 16) = -1985229329LL;
        *(_DWORD *)(v21 + 80) = v17 | v22;
        *(void *)(v21 + 56) = v23 - (v22 << 41) + 0x20000000000000LL;
        do
          unint64_t v24 = __ldxr(&_dispatch_queue_serial_numbers);
        while (__stxr(v24 + 1, &_dispatch_queue_serial_numbers));
        *(void *)(v21 + 64) = v24;
        *(void *)(v21 + 72) = v20;
        int v25 = (BYTE1(v10) - 1) | ((v11 & 0xF) << 8);
        if (!v11) {
          int v25 = 0;
        }
        if (v12 == 1) {
          v25 |= 0x80000000;
        }
        *(_DWORD *)(v21 + 84) = v25;
        if ((v10 & 0x200000) == 0)
        {
          _dispatch_queue_priority_inherit_from_target(v21, (unint64_t)a3);
          _dispatch_lane_inherit_wlh_from_target(a1, (unsigned int *)a3);
        }

        if (*((_DWORD *)a3 + 2) == 0x7FFFFFFF) {
          goto LABEL_71;
        }
        unsigned int v26 = (unsigned int *)(a3 + 1);
        do
          int v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
        if (v27 > 0)
        {
LABEL_71:
          uint64_t v10 = 0xFFFFFC100LL;
          *(void *)(a1 + 24) = a3;
          if (!MEMORY[0xFFFFFC100]) {
            return _dispatch_introspection_queue_create(a1);
          }
        }

        else
        {
          qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
          __break(1u);
        }

        LODWORD(a3) = -1912602624;
        if (*(void *)(a1 + 72)) {
          uint64_t v28 = *(const char **)(a1 + 72);
        }
        else {
          uint64_t v28 = (const char *)&unk_416DE;
        }
        strncpy(__dst, v28, 0x20uLL);
        LODWORD(v15) = *(_DWORD *)(a1 + 84);
        if ((v15 & 0x4000000) == 0)
        {
          uint64_t v9 = v15 & 0x8E0000FF;
          LODWORD(v15) = (v15 >> 8) & 0xF;
          if (!(_DWORD)v15)
          {
LABEL_83:
            uint64_t v8 = *(void *)(a1 + 64);
            if (!*(_DWORD *)v10) {
              goto LABEL_84;
            }
            goto LABEL_87;
          }

      while (1)
      {
        int v16 = __ldxr(v7);
        if (v16 != v5) {
          break;
        }
        if (!__stxr(v5 & 0xFFFFFF00FFFFFFFFLL, v7)) {
          return;
        }
      }

      __clrex();
    }
  }

  if ((a2 & 8) != 0 && !dispatch_data_get_size(subrange)) {
    goto LABEL_37;
  }
  *(void *)(a1 + 208) = 0LL;
  uint64_t v15 = *(_DWORD *)(a1 + 56);
  int v16 = *(void *)(a1 + 128);
  int v17 = *(void *)(a1 + 144);
  dispatch_suspend(*(dispatch_object_t *)(v17 + 64));
  int v18 = *(void *)(a1 + 136);
  if (*(_DWORD *)(v18 + 8) != 0x7FFFFFFF)
  {
    unsigned int v19 = (unsigned int *)(v18 + 8);
    do
      uint64_t v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    if (v20 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

  uint64_t v21 = *(dispatch_queue_s **)(a1 + 48);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 0x40000000LL;
  v22[2] = ___dispatch_operation_deliver_data_block_invoke;
  v22[3] = &unk_59968;
  uint64_t v23 = a2;
  unint64_t v24 = v15;
  int v25 = v8;
  v22[4] = v16;
  v22[5] = subrange;
  v22[6] = v18;
  v22[7] = v17;
  dispatch_channel_async(v21, v22);
}

LABEL_82:
          v9 |= 256LL << (v15 - 1);
          goto LABEL_83;
        }

    if ((v20 & 4) != 0)
    {
      uint64_t v31 = *(void *)(StatusReg + 176);
      if (v31) {
        uint64_t v32 = *(_DWORD *)(v31 + 8) + 1;
      }
      else {
        uint64_t v32 = 1;
      }
      uint64_t v30 = (uint64_t)v15;
      if (v32 <= _dispatch_continuation_cache_limit)
      {
        uint64_t v30 = 0LL;
        *((void *)v15 + 2) = v31;
        v15[2] = v32;
        *(void *)(StatusReg + 176) = v15;
      }
    }

    else
    {
      uint64_t v30 = 0LL;
    }

    if ((v20 & 8) != 0)
    {
      uint64_t v36 = *(void *)(**((void **)v15 + 6) + 40LL);
      if (v36 != 514) {
        _dispatch_queue_override_invoke_cold_1(v36);
      }
      dispatch_group_t group = (dispatch_group_s *)*((void *)v15 + 6);
      v38 = (void (*)(void (**)(void)))*((void *)v15 + 4);
      int v37 = (void *)*((void *)v15 + 5);
      uint64_t v39 = (void (__cdecl *)(void *))v38;
      if (v37)
      {
        uint64_t v39 = (void (__cdecl *)(void *))*((void *)v15 + 4);
        if (v38 == _dispatch_call_block_and_release) {
          uint64_t v39 = (void (__cdecl *)(void *))v37[2];
        }
      }

      _dispatch_introspection_callout_entry(*((void **)v15 + 5), v39);
      _dispatch_client_callout((uint64_t)v37, (uint64_t (*)(void))v38);
      _dispatch_introspection_callout_return(v37, v39);
      if (MEMORY[0xFFFFFC100]) {
        kdebug_trace(772079660LL, v15, 0LL, 0LL, 0LL);
      }
      _dispatch_introspection_queue_item_complete((dispatch_object_s *)v15);
      dispatch_group_leave(group);
      if (!v30)
      {
LABEL_96:
        if (!v19) {
          goto LABEL_98;
        }
LABEL_97:
        v19[1](&_dispatch_main_q);
        goto LABEL_98;
      }
    }

    else
    {
      uint64_t v34 = (void (*)(void (**)(void)))*((void *)v15 + 4);
      unint64_t v33 = (void *)*((void *)v15 + 5);
      uint64_t v35 = (void (__cdecl *)(void *))v34;
      if (v33)
      {
        uint64_t v35 = (void (__cdecl *)(void *))*((void *)v15 + 4);
        if (v34 == _dispatch_call_block_and_release) {
          uint64_t v35 = (void (__cdecl *)(void *))v33[2];
        }
      }

      _dispatch_introspection_callout_entry(*((void **)v15 + 5), v35);
      _dispatch_client_callout((uint64_t)v33, (uint64_t (*)(void))v34);
      _dispatch_introspection_callout_return(v33, v35);
      if (MEMORY[0xFFFFFC100]) {
        kdebug_trace(772079660LL, v15, 0LL, 0LL, 0LL);
      }
      _dispatch_introspection_queue_item_complete((dispatch_object_s *)v15);
      if (!v30) {
        goto LABEL_96;
      }
    }

    _dispatch_continuation_free_to_cache_limit(v30);
    if (v19) {
      goto LABEL_97;
    }
LABEL_98:
    uint64_t v15 = (int *)v18;
  }

  while (v18);
  (*(void (**)(dispatch_queue_s *, void, void))((char *)&stru_20.filesize + *(void *)&_dispatch_main_q))( &_dispatch_main_q,  0LL,  0LL);
  *(void *)(StatusReg + 200) = v47 & 0xFFF0FFFF;
  uint64_t v40 = v49 & 0xFFFFFFFF02FFFFFFLL;
  if (v49 == -1) {
    uint64_t v41 = 0LL;
  }
  else {
    uint64_t v41 = v49 & 0xFFFFFFFF02FFFFFFLL;
  }
  uint64_t v42 = *(void *)(StatusReg + 32);
  if ((v42 & 0x1000000) != 0)
  {
    v44 = (_OWORD *)(StatusReg + 160);
    BOOL v43 = v48;
    if (!v41)
    {
      uint64_t v41 = v42 & 0xFFFFFFFFFEFFFFFFLL;
      goto LABEL_135;
    }

        if ((v22 & 4) != 0)
        {
          unint64_t v33 = *(void *)(StatusReg + 176);
          if (v33) {
            uint64_t v34 = *(_DWORD *)(v33 + 8) + 1;
          }
          else {
            uint64_t v34 = 1;
          }
          int v4 = v60;
          uint64_t v32 = v10;
          if (v34 <= _dispatch_continuation_cache_limit)
          {
            uint64_t v32 = 0LL;
            *(void *)(v10 + 16) = v33;
            *(_DWORD *)(v10 + 8) = v34;
            *(void *)(StatusReg + 176) = v10;
          }
        }

        else
        {
          uint64_t v32 = 0LL;
          int v4 = v60;
        }

        v58 = v32;
        if ((v22 & 8) != 0)
        {
          v44 = *(void *)(**(void **)(v10 + 48) + 40LL);
          if (v44 != 514)
          {
            qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected object type";
            qword_61258 = v44;
            __break(1u);
            return;
          }

          groupa = *(dispatch_group_s **)(v10 + 48);
          uint64_t v45 = *(void **)(v10 + 40);
          uint64_t v46 = *(void (**)(void (**)(void)))(v10 + 32);
          if (v45)
          {
            uint64_t v46 = *(void (**)(void (**)(void)))(v10 + 32);
            if (v46 == _dispatch_call_block_and_release) {
              uint64_t v46 = (void (*)(void (**)(void)))v45[2];
            }
          }

          v50 = *(uint64_t (**)(void))(v10 + 32);
          function = (void (__cdecl *)(void *))v46;
          _dispatch_introspection_callout_entry(*(void **)(v10 + 40), (dispatch_function_t)v46);
          _dispatch_client_callout((uint64_t)v45, v50);
          _dispatch_introspection_callout_return(v45, function);
          if (MEMORY[0xFFFFFC100]) {
            kdebug_trace(772079660LL, v10, 0LL, 0LL, 0LL);
          }
          _dispatch_introspection_queue_item_complete((dispatch_object_s *)v10);
          dispatch_group_leave(groupa);
        }

        else
        {
          uint64_t v35 = a3;
          int v37 = *(void (**)(void (**)(void)))(v10 + 32);
          uint64_t v36 = *(void **)(v10 + 40);
          v38 = (void (__cdecl *)(void *))v37;
          if (v36)
          {
            v38 = *(void (__cdecl **)(void *))(v10 + 32);
            if (v37 == _dispatch_call_block_and_release) {
              v38 = (void (__cdecl *)(void *))v36[2];
            }
          }

          _dispatch_introspection_callout_entry(*(void **)(v10 + 40), v38);
          _dispatch_client_callout((uint64_t)v36, (uint64_t (*)(void))v37);
          _dispatch_introspection_callout_return(v36, v38);
          if (MEMORY[0xFFFFFC100]) {
            kdebug_trace(772079660LL, v10, 0LL, 0LL, 0LL);
          }
          _dispatch_introspection_queue_item_complete((dispatch_object_s *)v10);
          a3 = v35;
          int v4 = v60;
          uint64_t v9 = (uint64_t)group;
        }

        if (!v58)
        {
          if (!v59) {
            goto LABEL_99;
          }
LABEL_98:
          objc_autoreleasePoolPop(v59);
          goto LABEL_99;
        }

        _dispatch_continuation_free_to_cache_limit(v58);
        if (v59) {
          goto LABEL_98;
        }
LABEL_99:
        if (v21) {
          v21[1](a1);
        }
LABEL_101:
        uint64_t v10 = v19;
        if (!v19)
        {
          if (!*v52)
          {
            uint64_t v10 = 0LL;
            break;
          }

          uint64_t v10 = *v63;
          if (!*v63) {
            uint64_t v10 = _dispatch_wait_for_enqueuer(v63, (uint64_t)v52);
          }
        }

        if (*(void *)(StatusReg + 40)) {
          _dispatch_return_to_kernel();
        }
      }

      while (*(_WORD *)(a1 + 80) != 1
           && ((a3 & 0x4000000) != 0 || (*(_BYTE *)(StatusReg + 960) & 1) == 0)
           && ((a3 & 0x100000) == 0
            || (*(_DWORD *)(*(void *)(StatusReg + 216) + 60LL) & 7u) <= *(unsigned __int8 *)(*(void *)(StatusReg + 216)
                                                                                             + 100LL))
           && !(*v11 >> 55));
    }

    if (v9 == 0x40000000000000LL) {
      uint64_t v9 = ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) + 0x40000000000000LL;
    }
    if (!v10)
    {
      *a4 = *a4 & 0x4000000001LL | v9;
      *v54 = v64;
      return;
    }

    v48 = *(unsigned __int16 *)(a1 + 80);
    if (v48 < 2)
    {
LABEL_162:
      *a4 = *a4 & 0x4000000001LL | v9;
      *v54 = v64;
      return;
    }

    v49 = *(void *)v10;
    if (*(void *)v10 < 0x1000uLL)
    {
      if ((v49 & 2) == 0) {
        goto LABEL_162;
      }
    }

    else if ((*(void *)(v49 + 40) & 0xF0LL) != 0x10 || (*(_DWORD *)(v10 + 80) & 0x80000) == 0)
    {
      goto LABEL_162;
    }

    uint64_t v9 = v9 - (v48 << 41) + 0x10000000000LL;
    goto LABEL_162;
  }

LABEL_81:
        uint64_t v9 = v15 & a3 | 0xFF;
        LOWORD(v15) = (unsigned __int16)v15 >> 12;
        goto LABEL_82;
      }
    }

    else
    {
      if (v19 == 2) {
        v17 |= 0x20000u;
      }
      if (a1) {
        goto LABEL_48;
      }
    }

    uint64_t v20 = 0LL;
    goto LABEL_52;
  }

  if ((*((_BYTE *)a3 + 87) & 8) != 0)
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot target object to cooperative root queue - not implemented";
    qword_61258 = (uint64_t)a3;
    __break(1u);
LABEL_87:
    kdebug_trace(772079621LL, v8, v9, 0LL, 0LL);
LABEL_84:
    if (*(_DWORD *)v10) {
      kdebug_trace(772079622LL, *(void *)__dst, v30, v31, v32);
    }
    return _dispatch_introspection_queue_create(a1);
  }

  if (a3[3])
  {
    if ((result & 0x100000) != 0) {
      int v13 = 2;
    }
    else {
      int v13 = 1;
    }
    if (!v12) {
      unsigned int v12 = v13;
    }
    goto LABEL_38;
  }

  if (!v12) {
    goto LABEL_38;
  }
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot specify an overcommit attribute and use this kind of target queue";
  qword_61258 = (uint64_t)a3;
  __break(1u);
  return result;
}

          LODWORD(result) = pthread_qos_max_parallelism(v22, 0LL);
          if ((int)result <= 0) {
LABEL_54:
          }
            LODWORD(result) = MEMORY[0xFFFFFC036];
          else {
            uint64_t result = result;
          }
          if (v6)
          {
            if (v6 < result)
            {
              result /= v6;
              return result;
            }

            return 1LL;
          }

          return result;
        }

        if (*(_DWORD *)v3 != -1592086528 || ~*(void *)(v3 + 16) != v3) {
          _dispatch_apply_with_attr_f_cold_3(v3);
        }
        if (v6) {
          return 1LL;
        }
        int v17 = 33LL;
        switch(v16)
        {
          case 0:
            goto LABEL_48;
          case 1:
LABEL_56:
            int v17 = 5LL;
            break;
          case 2:
LABEL_57:
            int v17 = 9LL;
            break;
          case 3:
LABEL_58:
            int v17 = 17LL;
            break;
          case 4:
LABEL_59:
            int v17 = 21LL;
            break;
          case 5:
LABEL_60:
            int v17 = 25LL;
            break;
          case 6:
            break;
          default:
LABEL_55:
            int v17 = 0LL;
            break;
        }

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)_dispatch_lane_create_with_target((uint64_t)label, (uint64_t *)attr, 0LL, 1u);
}

void dispatch_queue_create_with_accounting_override_voucher()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unsupported interface";
  __break(1u);
}

void _dispatch_lane_class_dispose(uint64_t *a1, _BYTE *a2)
{
  if (a1[6]) {
    _dispatch_lane_class_dispose_cold_3(a1 + 6);
  }
  a1[13] = 512LL;
  a1[6] = 512LL;
  uint64_t v2 = a1[7];
  unint64_t v3 = 0x20000000000000LL - ((unint64_t)*((unsigned __int16 *)a1 + 40) << 41);
  if ((*(_BYTE *)(*a1 + 42) & 1) != 0) {
    unint64_t v3 = 0x60000000000000LL;
  }
  if ((v2 & 0xFFFFFF48FFFFFFFFLL) != v3)
  {
    uint64_t v4 = a1[7];
    if ((v2 & 0xFFFFFFFC) == 0) {
      _dispatch_lane_class_dispose_cold_1(v4);
    }
    _dispatch_lane_class_dispose_cold_2(v4);
  }

  _dispatch_queue_dispose(a1, a2);
}

void _dispatch_queue_dispose(void *obj, _BYTE *a2)
{
  uint64_t v4 = (void *)obj[9];
  if (v4 && (obj[10] & 0x200000) != 0) {
    free(v4);
  }
  unint64_t v5 = obj + 11;
  do
    int v6 = (void *)__ldxr(v5);
  while (__stxr(0x200uLL, v5));
  if (v6) {
    _dispatch_queue_specific_head_dispose(v6);
  }
  if (*((_DWORD *)obj + 24))
  {
    unsigned int v7 = (unsigned int *)(obj + 12);
    _dispatch_object_finalize(obj);
    *a2 = 0;
    obj[9] = "<released queue, pending free>";
    obj[4] = 0LL;
    obj[5] = 0LL;
    obj[3] = 0LL;
    do
      int v8 = __ldxr(v7);
    while (__stxr(v8 - 1, v7));
    if (v8 <= 0)
    {
      if (v8 < 0)
      {
        qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
      }

      else
      {
        obj[7] = 0xDEAD000000000000LL;
        _dispatch_object_dealloc(obj);
      }
    }
  }

  else
  {
    obj[7] = 0xDEAD000000000000LL;
  }

void _dispatch_lane_dispose(uint64_t *a1, _BYTE *a2)
{
  if (MEMORY[0xFFFFFC100]) {
    kdebug_trace(772079624LL, a1[8], 0LL, 0LL, 0LL);
  }
  _dispatch_introspection_queue_dispose((uint64_t)a1);
  _dispatch_lane_class_dispose(a1, a2);
}

unint64_t _dispatch_queue_xref_dispose(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 56);
  if (result >> 55)
  {
    if ((result & 0x180000000000000LL) == 0) {
      _dispatch_queue_xref_dispose_cold_1(result);
    }
    _dispatch_queue_xref_dispose_cold_2(result);
  }

  unint64_t v3 = (unsigned int *)(a1 + 80);
  do
    unsigned int v4 = __ldxr(v3);
  while (__stxr(v4 | 0x800000, v3));
  return result;
}

uint64_t _dispatch_lane_suspend(uint64_t result)
{
  uint64_t v1 = (unint64_t *)(result + 56);
  do
  {
    unint64_t v2 = __ldxr(v1);
    if (v2 >= 0xFC00000000000000LL)
    {
      __clrex();
      return _dispatch_lane_suspend_slow(result);
    }
  }

  while (__stxr(v2 + 0x400000000000000LL, v1));
  if (!(v2 >> 55) && *(_DWORD *)(result + 8) != 0x7FFFFFFF)
  {
    unint64_t v3 = (unsigned int *)(result + 8);
    do
      int v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if (v4 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

  return result;
}

uint64_t _dispatch_lane_suspend_slow(uint64_t result)
{
  uint64_t v1 = result;
  unint64_t v2 = (unsigned int *)(result + 100);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned int v4 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v2))
  {
    if (!__stxr(v4, v2)) {
      goto LABEL_6;
    }
  }

  __clrex();
  unint64_t result = _dispatch_unfair_lock_lock_slow(result + 100, 0x10000);
LABEL_6:
  unint64_t v6 = 0x7C00000000000000LL;
  if (!*(_DWORD *)(v1 + 112)) {
    unint64_t v6 = 0x7A00000000000000LL;
  }
  unsigned int v7 = (unint64_t *)(v1 + 56);
  do
  {
    unint64_t v8 = __ldxr(v7);
    BOOL v9 = v8 >= v6;
    unint64_t v10 = v8 - v6;
    if (!v9)
    {
      __clrex();
      unsigned int v13 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
      do
        unsigned int v14 = __ldxr(v2);
      while (__stlxr(0, v2));
      if (v14 != v13)
      {
        uint64_t v15 = (uint64_t)v2;
        char v16 = v14;
        _dispatch_unfair_lock_unlock_slow(v15, v14);
        if ((v16 & 2) != 0 && (*(void *)(StatusReg + 200) & 0xF0000LL) == 0) {
          *(void *)(StatusReg + 200) = *(void *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
        }
      }

      return _dispatch_lane_suspend(v1);
    }
  }

  while (__stxr(v10, v7));
  unsigned int v11 = *(_DWORD *)(v1 + 112);
  *(_DWORD *)(v1 + 112) = v11 + 32;
  if (v11 >= 0xFFFFFFE0)
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Too many nested calls to dispatch_suspend()";
    __break(1u);
  }

  else
  {
    unsigned int v12 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    do
      LODWORD(v1) = __ldxr(v2);
    while (__stlxr(0, v2));
    if ((_DWORD)v1 == v12) {
      return result;
    }
  }

  unint64_t result = _dispatch_unfair_lock_unlock_slow((uint64_t)v2, v1);
  if ((v1 & 2) != 0 && (*(void *)(StatusReg + 200) & 0xF0000LL) == 0) {
    *(void *)(StatusReg + 200) = *(void *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
  }
  return result;
}

uint64_t _dispatch_lane_resume(uint64_t a1, uint64_t a2)
{
  if ((_DWORD)a2 == 2)
  {
    unint64_t v6 = (unint64_t *)(a1 + 56);
    do
    {
      unint64_t v3 = __ldxr(v6);
      if ((v3 & 0x180000000000000LL) == 0)
      {
        __clrex();
        return (uint64_t)_os_object_release_internal_n((void *)a1, (_BYTE *)&dword_0 + 2);
      }

      unint64_t v7 = (v3 - 0x80000000000000LL) & 0xFFFFFFF000000001LL;
      if ((v3 & 0xFFFFFFFC) != 0) {
        unint64_t v7 = (v3 - 0x80000000000000LL) | 0x8000000000LL;
      }
      if ((v3 - 0x80000000000000LL) >> 53) {
        unint64_t v5 = (v3 - 0x80000000000000LL) | 0x8000000000LL;
      }
      else {
        unint64_t v5 = v7;
      }
    }

    while (__stlxr(v5, v6));
    if ((v5 & 0x180000000000000LL) == 0) {
      goto LABEL_19;
    }
    unint64_t v3 = a1;
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corrupt activation state";
    qword_61258 = a1;
    __break(1u);
LABEL_54:
    __clrex();
    if ((v3 & 0x200000000000000LL) != 0) {
      return _dispatch_lane_resume_slow(a1);
    }
    goto LABEL_57;
  }

  if ((_DWORD)a2 == 1)
  {
    unint64_t v2 = (unint64_t *)(a1 + 56);
    while (1)
    {
      unint64_t v3 = __ldxr(v2);
      if ((~v3 & 0x180000000000000LL) != 0) {
        break;
      }
      if (v3 >> 58) {
        unint64_t v4 = 0xFF80000000000000LL;
      }
      else {
        unint64_t v4 = 0xFF00000000000000LL;
      }
      unint64_t v5 = v3 + v4;
      if (!__stxr(v3 + v4, v2)) {
        goto LABEL_19;
      }
    }

    __clrex();
    return a1;
  }

  unint64_t v8 = ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) - 0x20000000000LL;
  uint64_t v9 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFCLL;
  unint64_t v10 = (unint64_t *)(a1 + 56);
  uint64_t v11 = *(unsigned __int8 *)(*(void *)a1 + 40LL);
  a2 = v9 | 0x60000000000002LL;
  do
  {
    unint64_t v3 = __ldxr(v10);
    if (v11 == 19 && (v3 & 0xFF80000000000000LL) == 0x180000000000000LL)
    {
      unint64_t v5 = v3 - 0x100000000000000LL;
    }

    else
    {
      unint64_t v12 = v3 - 0x400000000000000LL;
      if (v3 < 0x400000000000000LL) {
        goto LABEL_54;
      }
      if ((v12 & 0x180000000000000LL) == 0x100000000000000LL)
      {
        unint64_t v5 = v3 - 0x480000000000000LL;
      }

      else if (v12 >> 53 || (v3 & 0xFFFFFFFC) != 0)
      {
        unint64_t v5 = v12 | 0x8000000000LL;
      }

      else if (v11 == 19 || (v12 & 0x10000000000LL) == 0 && (v8 + v12) >> 53)
      {
        unint64_t v5 = v12 & 0xFFFFFFF000000001LL;
      }

      else
      {
        unint64_t v5 = a2 | v12 & 0x7700000001LL;
      }
    }
  }

  while (__stlxr(v5, v10));
LABEL_19:
  if ((v5 & 0x180000000000000LL) == 0x80000000000000LL) {
    return _dispatch_lane_resume_activate(a1);
  }
  if (!(v5 >> 55))
  {
    if (((v3 ^ v5) & 0x40000000000000LL) != 0)
    {
      uint64_t v13 = 5LL;
      return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 80LL))( a1,  HIDWORD(v3) & 7,  v13);
    }

    if (!(v5 >> 53))
    {
      uint64_t v13 = 1LL;
      return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 80LL))( a1,  HIDWORD(v3) & 7,  v13);
    }

    if (*(_DWORD *)(a1 + 8) == 0x7FFFFFFF) {
      return a1;
    }
    unsigned int v14 = (unsigned int *)(a1 + 8);
    do
      unint64_t v3 = __ldxr(v14);
    while (__stlxr(v3 - 2, v14));
    if ((_DWORD)v3 == 2) {
      return (uint64_t)_os_object_dispose((void *)a1, (const char *)a2);
    }
    qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
    __break(1u);
LABEL_57:
    if ((~v3 & 0x180000000000000LL) != 0)
    {
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Over-resume of an object";
      qword_61258 = a1;
      __break(1u);
    }

    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Over-resume of an inactive object";
    qword_61258 = a1;
    __break(1u);
  }

  return a1;
}

uint64_t _dispatch_lane_resume_slow(uint64_t result)
{
  uint64_t v1 = result;
  unint64_t v2 = (unsigned int *)(result + 100);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned int v4 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v2))
  {
    if (!__stxr(v4, v2)) {
      goto LABEL_6;
    }
  }

  __clrex();
  unint64_t result = _dispatch_unfair_lock_lock_slow(result + 100, 0x10000);
LABEL_6:
  int v6 = *(_DWORD *)(v1 + 112);
  if (v6)
  {
    BOOL v7 = v6 == 32;
    uint64_t v8 = 0x7A00000000000000LL;
    if (!v7) {
      uint64_t v8 = 0x7C00000000000000LL;
    }
    uint64_t v9 = (unint64_t *)(v1 + 56);
    do
    {
      unint64_t v10 = __ldxr(v9);
      BOOL v11 = __CFADD__(v10, v8);
      unint64_t v12 = v10 + v8;
      if (v11)
      {
        __clrex();
        goto LABEL_17;
      }
    }

    while (__stxr(v12, v9));
    *(_DWORD *)(v1 + 112) -= 32;
    unsigned int v13 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    do
      unsigned int v14 = __ldxr(v2);
    while (__stlxr(0, v2));
    if (v14 != v13)
    {
      unint64_t result = _dispatch_unfair_lock_unlock_slow((uint64_t)v2, v14);
      if ((v14 & 2) != 0 && (*(void *)(StatusReg + 200) & 0xF0000LL) == 0) {
        *(void *)(StatusReg + 200) = *(void *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
      }
    }
  }

  else
  {
LABEL_17:
    unsigned int v15 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    do
      unsigned int v16 = __ldxr(v2);
    while (__stlxr(0, v2));
    if (v16 != v15)
    {
      uint64_t v17 = (uint64_t)v2;
      char v18 = v16;
      _dispatch_unfair_lock_unlock_slow(v17, v16);
      if ((v18 & 2) != 0 && (*(void *)(StatusReg + 200) & 0xF0000LL) == 0) {
        *(void *)(StatusReg + 200) = *(void *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
      }
    }

    return _dispatch_lane_resume(v1, 0LL);
  }

  return result;
}

uint64_t _dispatch_lane_resume_activate(uint64_t a1)
{
  unint64_t v2 = *(void (**)(uint64_t))(*(void *)a1 + 72LL);
  if (v2) {
    v2(a1);
  }
  return _dispatch_lane_resume(a1, 2LL);
}

const char *__cdecl dispatch_queue_get_label(dispatch_queue_t queue)
{
  if (!queue)
  {
    unint64_t v2 = *(dispatch_queue_s **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160);
    if (v2) {
      queue = v2;
    }
    else {
      queue = (dispatch_queue_t)&off_653C0;
    }
  }

  if (*((void *)queue + 9)) {
    return (const char *)*((void *)queue + 9);
  }
  else {
    return (const char *)&unk_416DE;
  }
}

dispatch_qos_class_t dispatch_queue_get_qos_class(dispatch_queue_t queue, int *relative_priority_ptr)
{
  unint64_t v2 = *((unsigned int *)queue + 21);
  uint64_t v3 = (v2 >> 8) & 0xF;
  if (relative_priority_ptr)
  {
    if ((v2 & 0xF00) != 0) {
      int v4 = (char)v2 + 1;
    }
    else {
      int v4 = 0;
    }
    if (!(_DWORD)v3) {
      int v4 = 0;
    }
    *relative_priority_ptr = v4;
  }

  uint64_t v5 = v3 - 1;
  else {
    return dword_3FF8C[v5];
  }
}

unint64_t *dispatch_queue_set_width(_opaque_pthread_t *a1, uint64_t a2)
{
  if (*(void *)(a1->__sig + 40) != 529LL) {
    dispatch_queue_set_width_cold_1(*(void *)(a1->__sig + 40));
  }
  if ((a2 & 0x80000000) != 0) {
    return (unint64_t *)_dispatch_barrier_async_detached_f(a1, a2, (uint64_t)_dispatch_lane_set_width);
  }
  else {
    return _dispatch_barrier_trysync_or_async_f( (unint64_t *)a1,  (void *)a2,  (uint64_t (*)(void))_dispatch_lane_set_width,  1);
  }
}

unint64_t _dispatch_lane_set_width(int a1)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v2 = *(void *)(StatusReg + 160);
  if (a1 < 0)
  {
    unsigned int v7 = (*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF;
    unsigned int v8 = __clz(__rbit32(v7));
    if (a1 == -1)
    {
      if (!v7
        || (v8 > 5 ? (uint64_t v10 = 0LL) : (uint64_t v10 = dword_3FF8C[v8]),
            a1 = pthread_qos_max_parallelism(v10, 0LL),
            a1 <= 0))
      {
        a1 = MEMORY[0xFFFFFC036];
      }
    }

    else if (a1 == -2)
    {
      if (!v7
        || (v8 > 5 ? (uint64_t v9 = 0LL) : (uint64_t v9 = dword_3FF8C[v8]),
            a1 = pthread_qos_max_parallelism(v9, 1LL),
            a1 <= 0))
      {
        a1 = MEMORY[0xFFFFFC035];
      }
    }

    else if (!v7 {
           || (v8 > 5 ? (uint64_t v11 = 0LL) : (uint64_t v11 = dword_3FF8C[v8]),
    }
               a1 = pthread_qos_max_parallelism(v11, 0LL),
               a1 <= 0))
    {
      a1 = MEMORY[0xFFFFFC036];
    }
  }

  else if (a1 <= 1)
  {
    a1 = 1;
  }

  else {
    int v3 = a1;
  }
  int v4 = (unsigned int *)(v2 + 80);
  do
    unsigned int v5 = __ldxr(v4);
  while (__stxr(v5 & 0xFFFF0000 | v3, v4));
  return _dispatch_lane_inherit_wlh_from_target(v2, *(unsigned int **)(v2 + 24));
}

unint64_t *_dispatch_lane_set_target_queue(unint64_t *a1, char *a2)
{
  if (!a2)
  {
    uint64_t v3 = 1152LL;
    if (*((_WORD *)a1 + 40) == 1) {
      uint64_t v3 = 1280LL;
    }
    a2 = (char *)&_dispatch_root_queues + v3;
  }

  int v4 = a1 + 7;
  while (1)
  {
    unint64_t v5 = __ldxr(v4);
    if ((~v5 & 0x180000000000000LL) != 0) {
      break;
    }
    if (!__stxr(v5 + 0x400000000000000LL, v4))
    {
      if ((v5 & 0x200000000000000LL) != 0) {
        _dispatch_lane_set_target_queue_cold_3();
      }
      if (*((_DWORD *)a2 + 2) != 0x7FFFFFFF)
      {
        int v6 = (unsigned int *)(a2 + 8);
        do
          int v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
        if (v7 <= 0) {
          dispatch_set_target_queue_cold_2();
        }
      }

      unsigned int v8 = a1 + 3;
      do
        uint64_t v9 = (unsigned int *)__ldxr(v8);
      while (__stlxr((unint64_t)a2, v8));
      if (v9)
      {
        if (v9[2] != 0x7FFFFFFF)
        {
          uint64_t v10 = v9 + 2;
          do
            int v11 = __ldxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (v11 <= 1)
          {
            if (v11 != 1) {
              _os_object_allows_weak_reference_cold_1();
            }
            _os_object_dispose(v9, a2);
          }
        }
      }

      return (unint64_t *)_dispatch_lane_resume((uint64_t)a1, 0LL);
    }
  }

  __clrex();
  if ((a1[10] & 0x400000) == 0)
  {
    if ((a1[10] & 0x100000) == 0) {
      _dispatch_lane_set_target_queue_cold_4();
    }
    _dispatch_lane_set_target_queue_cold_5();
  }

  uint64_t v13 = *(void *)(*a1 + 40);
  int v14 = *(void *)(*a1 + 40);
  if (v14 == 17)
  {
    if ((a1[10] & 0x100000) == 0) {
      goto LABEL_24;
    }
    char v18 = a2;
    uint64_t v17 = "Changing the target of a queue already targeted by other dispatch objects";
  }

  else
  {
    char v18 = a2;
    if (v14 != 19) {
      _dispatch_lane_set_target_queue_cold_6(v13);
    }
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace(771883016LL, a1, 0LL, 0LL, 0LL);
    }
    uint64_t v17 = "Changing the target of a source after it has been activated";
  }

  _dispatch_bug_deprecated(v17);
  a2 = v18;
LABEL_24:
  if (*((_DWORD *)a2 + 2) != 0x7FFFFFFF)
  {
    unsigned int v15 = (unsigned int *)(a2 + 8);
    do
      int v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    if (v16 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

  return _dispatch_barrier_trysync_or_async_f(a1, a2, (uint64_t (*)(void))_dispatch_lane_legacy_set_target_queue, 1);
}

void *_dispatch_lane_legacy_set_target_queue(unint64_t a1)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v3 = *(void *)(StatusReg + 160);
  int v4 = *(void **)(v3 + 24);
  if ((*(_DWORD *)(v3 + 80) & 0x100000) != 0) {
    _dispatch_lane_legacy_set_target_queue_cold_2(a1, *(void *)(v3 + 24), *(void *)(StatusReg + 160));
  }
  unint64_t v5 = (unsigned int *)_dispatch_queue_priority_inherit_from_target(v3, a1);
  _dispatch_lane_inherit_wlh_from_target(v3, v5);
  int v6 = (unsigned int *)(v3 + 100);
  unsigned int v7 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v6))
  {
    if (!__stxr(v7, v6)) {
      goto LABEL_8;
    }
  }

  __clrex();
  _dispatch_unfair_lock_lock_slow(v3 + 100, 0x10000);
LABEL_8:
  if ((*(_DWORD *)(v3 + 80) & 0x400000) == 0) {
    _dispatch_lane_set_target_queue_cold_4();
  }
  *(void *)(v3 + 24) = v5;
  unsigned int v9 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    unsigned int v10 = __ldxr(v6);
  while (__stlxr(0, v6));
  if (v10 != v9)
  {
    _dispatch_unfair_lock_unlock_slow(v3 + 100, v10);
    if ((v10 & 2) != 0 && (*(void *)(StatusReg + 200) & 0xF0000LL) == 0) {
      *(void *)(StatusReg + 200) = *(void *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
    }
  }

  _dispatch_introspection_target_queue_changed(v3);
  return _os_object_release_internal(v4, v11);
}

void _dispatch_return_to_kernel()
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v1 = *(void *)(StatusReg + 232);
  if (!v1 || *(void *)(v1 + 24) == -4LL) {
    *(void *)(StatusReg + 40) = 0LL;
  }
  else {
    _dispatch_event_loop_drain(1LL);
  }
}

BOOL dispatch_swift_job_should_yield()
{
  return *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 960) != 0LL;
}

void _dispatch_lane_serial_drain(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = a1[3];
  LOBYTE(v6) = (_BYTE)a1 + 48;
  uint64_t v46 = a1 + 6;
  if (!a1[6]) {
    return;
  }
  unsigned int v8 = (_opaque_pthread_t *)a1;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  __int128 v56 = *(_OWORD *)(StatusReg + 160);
  *(void *)(StatusReg + 160) = a1;
  *(void *)(StatusReg + 168) = &v56;
  v55 = a1 + 13;
  uint64_t v10 = a1[13];
  if (!v10) {
    uint64_t v10 = _dispatch_wait_for_enqueuer(v55, (uint64_t)v46);
  }
  v48 = (_OWORD *)(StatusReg + 160);
  if (!(*(void *)&v8->__opaque[40] >> 55))
  {
    unsigned int v50 = a3 & 0xFFFD0000;
    unsigned int v49 = (a3 >> 21) & 1;
    while (1)
    {
      if (v5 != *(void *)&v8->__opaque[8]) {
        goto LABEL_108;
      }
      if (*(void *)v10 <= 0xFFFuLL && (a3 & 0x80000) == 0 && (*(void *)v10 & 1) != 0)
      {
        uint64_t v44 = a2;
        *(void *)(a2 + 8) = v10;
        if ((a3 & 8) == 0) {
          goto LABEL_112;
        }
        qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Deferred continuation on source, mach channel or mgr";
        __break(1u);
        goto LABEL_121;
      }

      uint64_t v11 = *(void *)(v10 + 16);
      unint64_t *v55 = v11;
      if (!v11)
      {
        int v37 = (unint64_t *)(v10 + 16);
        while (1)
        {
          unint64_t v38 = __ldxr(v46);
          if (v10 != (v38 & 0xFFFFFFFFFFFFFFF8LL)) {
            break;
          }
          if (!__stlxr(0LL, v46)) {
            goto LABEL_11;
          }
        }

        __clrex();
        uint64_t v11 = *v37;
        if (!*v37) {
          uint64_t v11 = _dispatch_wait_for_enqueuer(v37, (uint64_t)v46);
        }
        unint64_t *v55 = v11;
      }

LABEL_11:
      unint64_t v12 = *(void (***)(_opaque_pthread_t *))(StatusReg + 192);
      if (v12) {
        (*v12)(v8);
      }
      uint64_t v13 = *(void *)v10;
      if (*(void *)v10 >= 0x1000uLL)
      {
        if (*(void *)(v13 + 40) == 1LL) {
          (*(void (**)(uint64_t, void, void))(v13 + 48))(v10, 0LL, v49);
        }
        else {
          (*(void (**)(uint64_t, uint64_t, void))(v13 + 64))(v10, a2, v50);
        }
        goto LABEL_67;
      }

      if ((a3 & 0x1000000) != 0)
      {
        v54 = objc_autoreleasePoolPush();
        uint64_t v13 = *(void *)v10;
      }

      else
      {
        v54 = 0LL;
      }

      int v14 = *(unsigned int **)(v10 + 24);
      if ((v13 & 4) != 0) {
        *(void *)(v10 + 24) = -1LL;
      }
      if (v14 != (unsigned int *)-1LL)
      {
        unsigned int v15 = v14;
        if (v14) {
          unsigned int v15 = (unsigned int *)v14[8];
        }
        if (MEMORY[0xFFFFFC100]) {
          kdebug_trace(771817480LL, v15, v10, 0LL, 0LL);
        }
      }

      uint64_t v16 = *(void *)(v10 + 8);
      if (v16 == -1)
      {
        unint64_t v19 = 0LL;
      }

      else
      {
        uint64_t v17 = *(void *)(StatusReg + 200);
        uint64_t v18 = ((v17 >> 8) & 0xF) != 0 ? 256LL << ((BYTE1(v17) & 0xFu) - 1) : 0LL;
        unint64_t v19 = v18 & 0xFFFFFFFFFFFFFF00LL | *(void *)(StatusReg + 200);
        if ((v16 & 0xFFFFFF) != 0)
        {
          if ((v16 & 0xFFFFFFuLL) >= (v18 & 0xFFFFFF00)
            && ((v17 & 0x44000000) != 0 || (*(void *)(v10 + 8) & 0x10000000LL) != 0))
          {
            unint64_t v19 = v16 & 0xFFFFFF;
          }
        }

        else if ((unsigned __int16)v17 >> 12)
        {
          unint64_t v19 = (256LL << (((unsigned __int16)v17 >> 12) - 1)) | 0xFF;
        }
      }

      unint64_t v21 = v19 & 0xFFFFFFFF02FFFFFFLL;
      uint64_t v22 = *(void *)(StatusReg + 32);
      if ((v22 & 0x1000000) != 0) {
        break;
      }
      if (v21 != (v22 & 0xFFFFFFFF77FFFFFFLL)) {
        goto LABEL_88;
      }
LABEL_42:
      if (*(unsigned int **)(StatusReg + 224) == v14)
      {
        if ((v13 & 4) != 0 && v14) {
          os_release(v14);
        }
LABEL_47:
        if ((v13 & 0x200) == 0) {
          goto LABEL_48;
        }
        goto LABEL_51;
      }

      unint64_t v21 = 0LL;
LABEL_103:
      _dispatch_set_priority_and_voucher_slow(v21, v14, v13 & 4 | 2);
      if ((v13 & 0x200) == 0)
      {
LABEL_48:
        if (MEMORY[0xFFFFFC100]) {
          _dispatch_trace_item_pop_internal(v8, (uint64_t *)v10);
        }
        _dispatch_introspection_queue_item_dequeue((dispatch_queue_s *)v8, (dispatch_object_s *)v10);
      }

  unint64_t result = _dispatch_object_alloc(&OBJC_CLASS___OS_dispatch_channel, 120LL);
  *(_DWORD *)(result + 8) += 2;
  if (*(_BYTE *)(*(void *)result + 40LL) == 19LL) {
    ++*(_DWORD *)(result + 8);
  }
  *(void *)(result + 16) = -1985229329LL;
  *(_DWORD *)(result + 80) = v8;
  *(void *)(result + 56) = 0x19FFE0000000000LL;
  do
    uint64_t v13 = __ldxr(&_dispatch_queue_serial_numbers);
  while (__stxr(v13 + 1, &_dispatch_queue_serial_numbers));
  *(void *)(result + 64) = v13;
  *(void *)(result + 72) = v9;
  *(void *)(result + 88) = a4;
  *(void *)(result + 24) = v6;
  *(void *)(result + 32) = a3;
  if (!a4[3])
  {
    *(_WORD *)(result + 116) |= 8u;
    --*(_DWORD *)(result + 8);
  }

  return result;
}

  uint64_t v10 = (unsigned int *)(v2 + 72);
  do
    uint64_t v11 = __ldxr(v10);
  while (__stxr(v11 - 1, v10));
  if (!v11) {
    free((void *)v2);
  }
  return _os_object_release_internal(*(void **)(a1 + 24), v7);
}

LABEL_51:
      if ((v13 & 4) != 0)
      {
        uint64_t v24 = *(void *)(StatusReg + 176);
        if (v24) {
          int v25 = *(_DWORD *)(v24 + 8) + 1;
        }
        else {
          int v25 = 1;
        }
        uint64_t v23 = v10;
        if (v25 <= _dispatch_continuation_cache_limit)
        {
          uint64_t v23 = 0LL;
          *(void *)(v10 + 16) = v24;
          *(_DWORD *)(v10 + 8) = v25;
          *(void *)(StatusReg + 176) = v10;
        }
      }

      else
      {
        uint64_t v23 = 0LL;
      }

      if ((v13 & 8) != 0)
      {
        uint64_t v39 = *(void *)(**(void **)(v10 + 48) + 40LL);
        if (v39 != 514)
        {
          qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected object type";
          qword_61258 = v39;
          __break(1u);
          return;
        }

        groupa = *(dispatch_group_s **)(v10 + 48);
        uint64_t v40 = *(void (**)(void (**)(void)))(v10 + 32);
        uint64_t v41 = *(void **)(v10 + 40);
        uint64_t v42 = (void (__cdecl *)(void *))v40;
        if (v41)
        {
          uint64_t v42 = *(void (__cdecl **)(void *))(v10 + 32);
          if (v40 == _dispatch_call_block_and_release) {
            uint64_t v42 = (void (__cdecl *)(void *))v41[2];
          }
        }

        function = v42;
        _dispatch_introspection_callout_entry(*(void **)(v10 + 40), v42);
        _dispatch_client_callout((uint64_t)v41, (uint64_t (*)(void))v40);
        _dispatch_introspection_callout_return(v41, function);
        if (MEMORY[0xFFFFFC100]) {
          kdebug_trace(772079660LL, v10, 0LL, 0LL, 0LL);
        }
        _dispatch_introspection_queue_item_complete((dispatch_object_s *)v10);
        dispatch_group_leave(groupa);
        uint64_t v35 = v54;
        if (!v23)
        {
LABEL_65:
          if (!v35) {
            goto LABEL_67;
          }
LABEL_66:
          objc_autoreleasePoolPop(v35);
          goto LABEL_67;
        }
      }

      else
      {
        dispatch_group_t group = (dispatch_group_t)v11;
        unsigned int v26 = v12;
        unint64_t v27 = StatusReg;
        uint64_t v28 = v23;
        uint64_t v29 = v8;
        uint64_t v30 = a3;
        uint64_t v31 = v5;
        unint64_t v33 = *(void (**)(void (**)(void)))(v10 + 32);
        uint64_t v32 = *(void **)(v10 + 40);
        uint64_t v34 = (void (__cdecl *)(void *))v33;
        if (v32)
        {
          uint64_t v34 = *(void (__cdecl **)(void *))(v10 + 32);
          if (v33 == _dispatch_call_block_and_release) {
            uint64_t v34 = (void (__cdecl *)(void *))v32[2];
          }
        }

        _dispatch_introspection_callout_entry(*(void **)(v10 + 40), v34);
        _dispatch_client_callout((uint64_t)v32, (uint64_t (*)(void))v33);
        _dispatch_introspection_callout_return(v32, v34);
        if (MEMORY[0xFFFFFC100]) {
          kdebug_trace(772079660LL, v10, 0LL, 0LL, 0LL);
        }
        _dispatch_introspection_queue_item_complete((dispatch_object_s *)v10);
        uint64_t v5 = v31;
        a3 = v30;
        unsigned int v8 = v29;
        uint64_t v23 = v28;
        unint64_t StatusReg = v27;
        unint64_t v12 = v26;
        uint64_t v11 = (uint64_t)group;
        uint64_t v35 = v54;
        if (!v23) {
          goto LABEL_65;
        }
      }

      _dispatch_continuation_free_to_cache_limit(v23);
      if (v35) {
        goto LABEL_66;
      }
LABEL_67:
      if (v12) {
        v12[1](v8);
      }
      uint64_t v10 = v11;
      if (!v11)
      {
        if (!*v46)
        {
          uint64_t v44 = ((unint64_t)*(unsigned __int16 *)&v8->__opaque[64] << 41) + 0x40000000000000LL;
          goto LABEL_115;
        }

        uint64_t v10 = *v55;
        if (!*v55) {
          uint64_t v10 = _dispatch_wait_for_enqueuer(v55, (uint64_t)v46);
        }
      }

      if (*(void *)(StatusReg + 40)) {
        _dispatch_return_to_kernel();
      }
      if (*(_WORD *)&v8->__opaque[64] == 1 && ((a3 & 0x4000000) != 0 || (*(_BYTE *)(StatusReg + 960) & 1) == 0))
      {
        if ((a3 & 0x100000) == 0
          || (uint64_t v36 = *(void *)(StatusReg + 216),
              LODWORD(v6) = *(_DWORD *)(v36 + 60) & 7,
              v6 <= *(unsigned __int8 *)(v36 + 100)))
        {
          if (!(*(void *)&v8->__opaque[40] >> 55)) {
            continue;
          }
        }
      }

      goto LABEL_108;
    }

    if (v21) {
      goto LABEL_103;
    }
    unint64_t v21 = v22 & 0xFFFFFFFFFEFFFFFFLL;
LABEL_88:
    if (v21) {
      goto LABEL_103;
    }
    goto LABEL_42;
  }

LABEL_108:
  uint64_t v43 = *(unsigned __int16 *)&v8->__opaque[64];
  uint64_t v44 = (v43 << 41) + 0x40000000000000LL;
  if (!v10)
  {
LABEL_115:
    *a4 = *a4 & 0x4000000001LL | v44;
    _OWORD *v48 = v56;
    return;
  }

  int v4 = a4;
  if (v43 >= 2)
  {
    uint64_t v6 = *(void *)v10;
    if (*(void *)v10 < 0x1000uLL)
    {
LABEL_121:
      if ((v6 & 2) == 0) {
        goto LABEL_110;
      }
    }

    else if ((*(void *)(v6 + 40) & 0xF0LL) != 0x10 || (*(_DWORD *)(v10 + 80) & 0x80000) == 0)
    {
      goto LABEL_110;
    }

    uint64_t v44 = 0x40010000000000LL;
  }

LABEL_110:
  uint64_t *v4 = *v4 & 0x4000000001LL | v44;
LABEL_112:
  _OWORD *v48 = v56;
}

void _dispatch_queue_invoke_finish(dispatch_object_s *a1, uint64_t a2, __objc2_class **a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    int v7 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(v6 + 106) |= 0x80u;
    *(void *)(a2 + 8) = 0LL;
    *(_DWORD *)(a2 + 16) = 0;
    if (v7) {
      _dispatch_workloop_drain_barrier_waiter((uint64_t)a1, v6, v7, 1, a4 & 0x4000000001LL);
    }
    else {
      _dispatch_lane_drain_barrier_waiter((uint64_t)a1, v6, 1, a4 & 0x4000000001LL);
    }
  }

  else
  {
    if (a3 == &_dispatch_mgr_q) {
      uint64_t v8 = 0x4000000000LL;
    }
    else {
      uint64_t v8 = 1LL;
    }
    unsigned int v9 = (unint64_t *)((char *)a1 + 56);
    do
    {
      unint64_t v10 = __ldxr(v9);
      unint64_t v11 = v10 - a4;
      if (v11 & 0x4000000001LL | (v11 >> 53)) {
        uint64_t v12 = 0LL;
      }
      else {
        uint64_t v12 = v8;
      }
      unint64_t v13 = v11 & 0xFFFFFF7700000001LL | v12 | 0x8000000000LL;
    }

    while (__stlxr(v13, v9));
    if ((~v11 & 0x1800000000LL) == 0)
    {
      uint64_t v14 = HIDWORD(v11) & 7;
      unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      unsigned int v16 = *(_DWORD *)(StatusReg + 200);
    }

    if (((v13 ^ v11) & v8) != 0)
    {
      if ((v11 & 0x2000000000LL) != 0)
      {
        _dispatch_introspection_runtime_event();
        _dispatch_event_loop_poke(a1, v13, (dispatch_queue_s *)((char *)&dword_0 + 1));
      }

      else
      {
        unint64_t v19 = v11;
        if (MEMORY[0xFFFFFC100])
        {
          uint64_t v18 = a3;
          _dispatch_trace_item_push_internal((_opaque_pthread_t *)a3, (uint64_t *)a1);
          a3 = v18;
        }

        uint64_t v17 = a3;
        _dispatch_introspection_queue_item_enqueue((dispatch_queue_s *)a3, a1);
        ((void (*)(__objc2_class **, dispatch_object_s *, unint64_t))(*v17)[2].superclass)( v17,  a1,  HIDWORD(v19) & 7);
      }
    }

    else
    {
      _os_object_release_internal_n(a1, (_BYTE *)&dword_0 + 2);
    }
  }

unsigned int *_dispatch_workloop_drain_barrier_waiter(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t a5)
{
  uint64_t v8 = *(_DWORD *)(a2 + 100) & 0xFFFFFFFC;
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = a1 + 8LL * (a3 - 1);
  *(void *)(v10 + 104) = v9;
  if (!v9)
  {
    unint64_t v21 = (uint64_t *)(a2 + 16);
    uint64_t v22 = (uint64_t *)(v10 + 104);
    uint64_t v23 = (unint64_t *)(a1 + 8LL * (a3 - 1) + 152);
    while (1)
    {
      unint64_t v24 = __ldxr(v23);
      if ((v24 & 0xFFFFFFFFFFFFFFF8LL) != a2) {
        break;
      }
      if (!__stlxr(0LL, v23)) {
        goto LABEL_2;
      }
    }

    uint64_t v25 = a5;
    __clrex();
    uint64_t v9 = *v21;
    if (!*v21) {
      uint64_t v9 = _dispatch_wait_for_enqueuer((unint64_t *)(a2 + 16), (uint64_t)v23);
    }
    *uint64_t v22 = v9;
    a5 = v25;
  }

LABEL_2:
  BOOL v11 = v9 != 0;
  uint64_t v12 = (unint64_t *)(a1 + 56);
  uint64_t v13 = v8 - a5;
LABEL_3:
  if (v11)
  {
    BOOL v11 = 1;
  }

  else
  {
    uint64_t v14 = 0LL;
    do
    {
      BOOL v11 = v14 != -48;
      if (v14 == -48) {
        break;
      }
      uint64_t v15 = *(void *)(a1 + 192 + v14);
      v14 -= 8LL;
    }

    while (!v15);
  }

  do
  {
    unint64_t v16 = __ldxr(v12);
    if ((v16 & 0x2000000000LL) != 0)
    {
      if ((v16 & 2) != 0 && (v16 & 0x800000001LL) != 0)
      {
        _dispatch_event_loop_ensure_ownership(a1);
        do
          unint64_t v18 = __ldxr(v12);
        while (__stxr(v18 & 0xFFFFFFF7FFFFFFFDLL, v12));
        __clrex();
        goto LABEL_3;
      }

      unint64_t v17 = v16 & 0xFFFFFF7700000001LL | v8;
      if (!v11)
      {
        if ((v16 & 0x8000000000LL) != 0)
        {
          __clrex();
          do
            unint64_t v19 = __ldaxr(v12);
          while (__stxr(v19 ^ 0x8000000000LL, v12));
          goto LABEL_3;
        }

        unint64_t v17 = v16 & 0xFFFFFF7000000000LL | v8 & 0xFFFFFF70FFFFFFFCLL;
      }
    }

    else
    {
      unint64_t v17 = v13 + (v16 & 0xFFFFFF7700000001LL);
    }
  }

  while (__stlxr(v17, v12));
  return _dispatch_barrier_waiter_redirect_or_wake(a1, a2, a4, v16, v17);
}

  uint64_t v9 = (unint64_t *)(a1 + 56);
  uint64_t v10 = v7 - a4;
  do
  {
    while (1)
    {
      while (1)
      {
        BOOL v11 = __ldxr(v9);
        if ((v11 & 0x2000000000LL) == 0)
        {
          uint64_t v12 = v10 + (v11 & 0xFFFFFF7700000001LL);
          goto LABEL_10;
        }

        if ((v11 & 2) == 0 || (v11 & 0x800000001LL) == 0) {
          break;
        }
        _dispatch_event_loop_ensure_ownership(a1);
        do
          uint64_t v13 = __ldxr(v9);
        while (__stxr(v13 & 0xFFFFFFF7FFFFFFFDLL, v9));
        __clrex();
      }

      uint64_t v12 = v11 & 0xFFFFFF7700000001LL | v7;
      if (v8) {
        break;
      }
      if ((v11 & 0x8000000000LL) == 0)
      {
        uint64_t v12 = v11 & 0xFFFFFF7000000000LL | v7 & 0xFFFFFF70FFFFFFFCLL;
        break;
      }

      __clrex();
      do
        uint64_t v14 = __ldaxr(v9);
      while (__stxr(v14 ^ 0x8000000000LL, v9));
      uint64_t v8 = *(void *)(a1 + 104);
    }

  if ((v5 & 1) != 0) {
    goto LABEL_27;
  }
  uint64_t v6 = &_dispatch_mgr_q;
LABEL_4:
  _dispatch_queue_wakeup((_DWORD *)a1, a2, a3, v6);
}

unsigned int *_dispatch_lane_drain_barrier_waiter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7 = *(_DWORD *)(a2 + 100) & 0xFFFFFFFC;
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a1 + 104) = v8;
  if (!v8)
  {
    unint64_t v16 = (unint64_t *)(a2 + 16);
    unint64_t v17 = (unint64_t *)(a1 + 48);
    while (1)
    {
      unint64_t v18 = __ldxr(v17);
      if ((v18 & 0xFFFFFFFFFFFFFFF8LL) != a2) {
        break;
      }
      if (!__stlxr(0LL, v17)) {
        goto LABEL_2;
      }
    }

    uint64_t v19 = a4;
    __clrex();
    uint64_t v8 = *v16;
    if (!*v16) {
      uint64_t v8 = _dispatch_wait_for_enqueuer(v16, a1 + 48);
    }
    *(void *)(a1 + 104) = v8;
    a4 = v19;
  }

LABEL_10:
    ;
  }

  while (__stlxr(v12, v9));
  return _dispatch_barrier_waiter_redirect_or_wake(a1, a2, a3, v11, v12);
}

    uint64_t v7 = (v1 - v6);
    if ((int)v1 > (int)v6)
    {
      if (v2 != v3)
      {
        uint64_t v8 = v2;
        do
        {
          uint64_t v9 = (unint64_t *)(v8 + 56);
          do
            uint64_t v10 = __ldxr(v9);
          while (__stxr(v10 - (v7 << 41), v9));
          uint64_t v8 = *(void *)(v8 + 24);
        }

        while (v8 != v3);
      }

      if (!(_DWORD)v6)
      {
        _dispatch_apply_serial(a1);
        return;
      }

      *((_DWORD *)a1 + 13) -= v7;
      uint64_t v1 = v6;
    }

    if (!*((_DWORD *)a1 + 12)) {
      *((_DWORD *)a1 + 12) = (*(_DWORD *)(v3 + 80) << 8) & 0x3000000;
    }
    uint64_t v3 = *(void *)(v3 + 24);
  }

  while (*(void *)(v3 + 24));
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unint64_t v12 = *((_DWORD *)a1 + 13);
  unint64_t v13 = (v12 - 1);
  uint64_t v29 = a1;
  if (v12 < 2)
  {
    uint64_t v15 = 0LL;
    unint64_t v14 = 0LL;
  }

  else
  {
    uint64_t v28 = v1;
    unint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    unint64_t v16 = *(void *)(StatusReg + 32) | 0x10000000LL;
    unint64_t v27 = v12 - 1;
    unint64_t v17 = v12 - 1;
    do
    {
      unint64_t v18 = v14;
      unint64_t v14 = *(uint64_t **)(StatusReg + 176);
      if (v14)
      {
        *(void *)(StatusReg + 176) = v14[2];
      }

      else
      {
        unint64_t v14 = (uint64_t *)_dispatch_continuation_alloc_from_heap();
        a1 = v29;
      }

      *unint64_t v14 = 260LL;
      v14[4] = (uint64_t)_dispatch_apply_redirect_invoke;
      v14[5] = (uint64_t)a1;
      uint64_t v19 = *(void *)(StatusReg + 224);
      if (v19)
      {
        os_retain(*(void **)(StatusReg + 224));
        a1 = v29;
      }

      v14[3] = v19;
      if (v19 != -1)
      {
        if (v19) {
          uint64_t v19 = *(unsigned int *)(v19 + 32);
        }
        if (MEMORY[0xFFFFFC100])
        {
          kdebug_trace(771817476LL, v19, v14, 0LL, 0LL);
          a1 = v29;
        }
      }

      v14[1] = v16;
      v14[2] = (uint64_t)v18;
      if (!v15) {
        uint64_t v15 = (unint64_t)v14;
      }
      --v17;
    }

    while (v17);
    unint64_t v12 = *((_DWORD *)a1 + 13);
    uint64_t v1 = v28;
    unint64_t v13 = v27;
  }

  *((_DWORD *)a1 + 14) = v12;
  v29[5] = (uint64_t)_dispatch_calloc(v12, 8uLL);
  if (MEMORY[0xFFFFFC100])
  {
    unsigned int v26 = v14;
    do
    {
      if (MEMORY[0xFFFFFC100]) {
        _dispatch_trace_item_push_internal((_opaque_pthread_t *)v3, v26);
      }
      unsigned int v26 = (uint64_t *)v26[2];
    }

    while (v26);
  }

  uint64_t v20 = v14;
  do
  {
    _dispatch_introspection_queue_item_enqueue((dispatch_queue_s *)v3, (dispatch_object_s *)v20);
    uint64_t v20 = (uint64_t *)v20[2];
  }

  while (v20);
  *(void *)(v15 + 16) = 0LL;
  unint64_t v21 = (unint64_t *)(v3 + 48);
  *(void *)(StatusReg + 976) = v3 + 48;
  do
    uint64_t v22 = __ldxr(v21);
  while (__stlxr(v15, v21));
  uint64_t v23 = (char *)v29;
  if (v22)
  {
    *(void *)(v22 + 16) = v14;
    *(void *)(StatusReg + 976) = 0LL;
  }

  else
  {
    *(void *)(v3 + 104) = v14;
    *(void *)(StatusReg + 976) = 0LL;
    _dispatch_root_queue_poke_and_wakeup((unsigned int *)v3, v13, 0);
    uint64_t v23 = (char *)v29;
  }

  _dispatch_apply_invoke_and_wait(v23);
  for (; v2 != v3; uint64_t v2 = *(void *)(v2 + 24))
  {
    unint64_t v24 = (unint64_t *)(v2 + 56);
    do
      uint64_t v25 = __ldxr(v24);
    while (__stxr(v25 - (v1 << 41), v24));
  }

  mach_msg_destroy(a1);
}

      uint64_t v10 = *(void *)a2;
      unint64_t v11 = *(_WORD *)(*(void *)a2 + 12LL) | v3;
      if ((v11 & 0x201) == 0x200) {
        v11 &= ~0x200u;
      }
      unint64_t v12 = a2[6];
      unint64_t v13 = *(char *)(v10 + 8);
      unint64_t v14 = a2[9];
      if ((v14 & 0x4000000) != 0)
      {
        uint64_t v15 = v14 & 0x8E000000 | 0xFF;
        LOWORD(v14) = (unsigned __int16)v14 >> 12;
      }

      else
      {
        uint64_t v15 = v14 & 0x8E0000FF;
        unint64_t v14 = (v14 >> 8) & 0xF;
        if (!v14) {
          goto LABEL_17;
        }
      }

      v15 |= 256LL << (v14 - 1);
LABEL_17:
      unint64_t v16 = *(_DWORD *)(v10 + 16) | a2[8];
      unint64_t v17 = *(unsigned __int16 *)(v10 + 14);
      v51 = 0u;
      v52 = 0u;
      uint64_t v43 = v12;
      uint64_t v44 = v13;
      uint64_t v45 = v11;
      uint64_t v46 = v15;
      uint64_t v47 = a2;
      v48 = v16;
      unsigned int v49 = 0;
      unsigned int v50 = v17;
      unint64_t result = _dispatch_kq_drain(result, &v43);
      unint64_t v18 = result;
      if ((v3 & 1) == 0)
      {
        if ((v3 & 2) == 0) {
          goto LABEL_65;
        }
        if ((_DWORD)result == 36) {
          return 0LL;
        }
        goto LABEL_57;
      }

      if ((_DWORD)result)
      {
        if (v5 != (unsigned int *)-4LL)
        {
          if (v5)
          {
            uint64_t v19 = v5 + 24;
            do
              uint64_t v20 = __ldxr(v19);
            while (__stxr(v20 - 1, v19));
            if (v20 <= 0)
            {
              if (v20 < 0) {
                goto LABEL_71;
              }
              *((void *)v5 + 7) = 0xDEAD000000000000LL;
              _dispatch_object_dealloc(v5);
            }
          }
        }

        unint64_t result = 0LL;
        *((void *)a2 + 2) = 0LL;
        return result;
      }

      return 1LL;
    }
  }

  if (result != -4) {
    *(void *)(StatusReg + 40) = 1LL;
  }
  if ((_DWORD)v24 == (_DWORD)v23) {
    *(_WORD *)(v7 + 40) = v23 + 1;
  }
  else {
    LODWORD(v23) = v24;
  }
LABEL_49:
  unint64_t v33 = *(void *)(v7 + 32) + 72LL * v23;
  uint64_t v34 = *(void *)a2;
  uint64_t v35 = *(_WORD *)(*(void *)a2 + 12LL) | v3;
  if ((v35 & 0x201) == 0x200) {
    v35 &= ~0x200u;
  }
  uint64_t v36 = *(char *)(v34 + 8);
  int v37 = a2[9];
  if ((v37 & 0x4000000) != 0)
  {
    unint64_t v38 = v37 & 0x8E000000 | 0xFF;
    LOWORD(v37) = (unsigned __int16)v37 >> 12;
    goto LABEL_55;
  }

  unint64_t v38 = v37 & 0x8E0000FF;
  int v37 = (v37 >> 8) & 0xF;
  if (v37) {
LABEL_55:
  }
    v38 |= 256LL << (v37 - 1);
  unint64_t v18 = 0;
  uint64_t v39 = *(_DWORD *)(v34 + 16) | a2[8];
  uint64_t v40 = *(unsigned __int16 *)(v34 + 14);
  *(void *)unint64_t v33 = v21;
  *(_WORD *)(v33 + 8) = v36;
  *(_WORD *)(v33 + 10) = v35;
  *(_DWORD *)(v33 + 12) = v38;
  *(void *)(v33 + 16) = a2;
  *(void *)(v33 + 24) = v39;
  *(void *)(v33 + 32) = v40;
  *(_OWORD *)(v33 + 40) = 0u;
  *(_OWORD *)(v33 + 56) = 0u;
  if ((v3 & 3) != 2) {
    return 1LL;
  }
LABEL_57:
  if (!v5) {
    goto LABEL_64;
  }
  uint64_t v41 = v5 + 24;
  do
    uint64_t v42 = __ldxr(v41);
  while (__stxr(v42 - 1, v41));
  if (v42 > 0) {
    goto LABEL_64;
  }
  if ((v42 & 0x80000000) == 0)
  {
    *((void *)v5 + 7) = 0xDEAD000000000000LL;
    _dispatch_object_dealloc(v5);
LABEL_64:
    *((void *)a2 + 2) = 0LL;
LABEL_65:
    if (v18) {
      _dispatch_bug(1077LL, v18);
    }
    return 1LL;
  }

  qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
LABEL_71:
  qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
  return result;
}

unint64_t _dispatch_lane_activate(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 24);
  unsigned int v3 = *(_DWORD *)(a1 + 84);
  unsigned int v4 = (v3 >> 8) & 0xF;
  uint64_t v5 = (unsigned int *)_dispatch_queue_priority_inherit_from_target(a1, v2);
  return _dispatch_lane_inherit_wlh_from_target(a1, v5);
}

__objc2_class **_dispatch_queue_priority_inherit_from_target(uint64_t a1, unint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 84);
  BOOL v4 = a2 >= (unint64_t)&_dispatch_root_queues && a2 < (unint64_t)&_dispatch_queue_serial_numbers;
  if ((v2 & 0x20000000) != 0 || (v2 & 0x44000FFF) == 0)
  {
    if (v4)
    {
      unsigned int v2 = *(_DWORD *)(a2 + 84) | 0x20000000;
    }

    else if ((v2 & 0x20000000) != 0)
    {
      v2 &= 0xFBFF0FFF;
    }

    *(_DWORD *)(a1 + 84) = v2;
  }

  else if (v4)
  {
    if (((v2 >> 8) & 0xF) != 0) {
      unsigned int v5 = (v2 >> 8) & 0xF;
    }
    else {
      unsigned int v5 = 4;
    }
    if (v5 - 7 <= 0xFFFFFFF9) {
      _dispatch_queue_priority_inherit_from_target_cold_1(v5);
    }
    return &_dispatch_root_queues + 16 * (unint64_t)(3 * v5 + (v2 >> 31) - 3);
  }

  return (__objc2_class **)a2;
}

unint64_t _dispatch_lane_inherit_wlh_from_target(uint64_t a1, unsigned int *a2)
{
  if ((*(_BYTE *)(*(void *)a2 + 42LL) & 1) != 0)
  {
    if (*(void *)(*(void *)a1 + 40LL) == 133137LL
      || (*(void *)(*(void *)a1 + 40LL) != 19LL
       || (*(_BYTE *)(*(void *)(a1 + 88) + 29LL) & 0x20) != 0)
      && *(_WORD *)(a1 + 80) == 1
      && (a2 >= (unsigned int *)&_dispatch_root_queues
        ? (BOOL v6 = &_dispatch_queue_serial_numbers > (unint64_t *)a2)
        : (BOOL v6 = 0),
          v6))
    {
      uint64_t v5 = 0x2000000000LL;
      char v4 = 1;
    }

    else
    {
      char v4 = 0;
      uint64_t v5 = 0x1000000000LL;
    }
  }

  else
  {
    char v4 = 0;
    uint64_t v5 = 0LL;
  }

  uint64_t v7 = (unint64_t *)(a1 + 56);
  while (1)
  {
    unint64_t v8 = __ldxr(v7);
    unint64_t result = v8 & 0xFFFFFFCFFFFFFFFFLL | v5;
    if (v8 == result) {
      break;
    }
    if (!__stxr(result, v7)) {
      goto LABEL_16;
    }
  }

  __clrex();
  unint64_t result = v8;
LABEL_16:
  if ((v8 & 0x2000000000LL) == 0) {
    char v4 = 1;
  }
  if ((v4 & 1) == 0)
  {
    uint64_t v10 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
    if (v10)
    {
      if (*(void *)(v10 + 24) == a1) {
        unint64_t result = _dispatch_event_loop_leave_immediate(result);
      }
    }
  }

  if ((*(void *)(*(void *)a2 + 40LL) & 0x10000) == 0)
  {
    if (*(void *)(*(void *)a2 + 40LL) == 18LL)
    {
      unint64_t v11 = *((void *)a2 + 3);
      if (v11 < (unint64_t)&_dispatch_root_queues || v11 >= (unint64_t)&_dispatch_queue_serial_numbers)
      {
        uint64_t v15 = (_BYTE *)*((void *)a2 + 25);
        int v12 = 0x1000000;
        if (v15)
        {
          if ((*v15 & 0x40) != 0) {
            int v12 = 17039360;
          }
          else {
            int v12 = 0x1000000;
          }
        }
      }

      else
      {
        int v12 = 0;
      }

      unint64_t v16 = a2 + 20;
      while (1)
      {
        unsigned int v17 = __ldxr(v16);
        unsigned int v18 = v17 & 0xFFAFFFFF | 0x100000;
        if (v18 == v17) {
          break;
        }
        if (!__stxr(v18, v16)) {
          goto LABEL_38;
        }
      }

      __clrex();
      if (!v12) {
        return result;
      }
LABEL_39:
      uint64_t v19 = (unsigned int *)(a1 + 80);
      do
        unsigned int v20 = __ldxr(v19);
      while (__stxr(v20 | v12, v19));
      return result;
    }

    unint64_t v13 = a2 + 20;
    int v12 = a2[20] & 0x1000000;
    if (v12) {
      v12 |= *v13 & 0x40000;
    }
    do
      unsigned int v14 = __ldxr(v13);
    while (__stxr(v14 | 0x100000, v13));
LABEL_38:
    if (v12) {
      goto LABEL_39;
    }
  }

  return result;
}

void _dispatch_lane_invoke(void *a1, void *a2, unsigned int a3)
{
  uint64_t v52 = 0LL;
  if ((a3 & 3) == 0)
  {
    a1[2] = -1985229329LL;
    BOOL v6 = *(_opaque_pthread_t **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160);
    if (MEMORY[0xFFFFFC100]) {
      _dispatch_trace_item_pop_internal(v6, a1);
    }
    _dispatch_introspection_queue_item_dequeue((dispatch_queue_s *)v6, (dispatch_object_s *)a1);
  }

  if ((a3 & 2) != 0)
  {
    uint64_t v52 = 0x40020000000001LL;
    int v7 = a3 & 0x40000;
    goto LABEL_7;
  }

  unint64_t v29 = ((unint64_t)*((unsigned __int16 *)a1 + 40) << 41) - 0x20000000000LL;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v31 = *(void *)(StatusReg + 24) & 0xFFFFFFFCLL;
  int v7 = a3 & 0x40000;
  if ((a3 & 0x40000) != 0) {
    uint64_t v32 = 0x4000000000LL;
  }
  else {
    uint64_t v32 = 1LL;
  }
  if ((a3 & 0x40001) == 0x40000) {
    unint64_t v33 = 0xFFE00000FFFFFFFCLL;
  }
  else {
    unint64_t v33 = 0xFFE00040FFFFFFFCLL;
  }
  unsigned int v34 = *(_DWORD *)(StatusReg + 200);
  unsigned int v35 = (v34 >> 8) & 0xF;
  unsigned int v36 = (unsigned __int16)v34 >> 12;
  unsigned int v37 = HIWORD(v34) & 0xF;
  if (v35 <= v36) {
    unsigned int v35 = v36;
  }
  if (v35 > v37) {
    unsigned int v37 = v35;
  }
  unint64_t v38 = a1 + 7;
  do
  {
    while (1)
    {
      unint64_t v39 = __ldaxr(v38);
      if ((v39 & v33) != 0) {
        break;
      }
      if ((v39 & 0x1000000000LL) == 0 || (uint64_t v40 = HIDWORD(v39) & 7, v40 <= v37))
      {
        uint64_t v41 = (v39 >> 40) & 1;
        if (!((v29 + v39) >> 53)) {
          LODWORD(v41) = 1;
        }
        if ((_DWORD)v41) {
          uint64_t v42 = 0x60000000000000LL;
        }
        else {
          uint64_t v42 = 0x20000000000000LL;
        }
        unint64_t v43 = v31 | v39 & 0x7700000001LL | v42;
        goto LABEL_84;
      }

      __clrex();
      uint64_t v48 = v31;
      unint64_t v50 = v29;
      _pthread_workqueue_override_start_direct( *(unsigned int *)(StatusReg + 24),  (256LL << ((BYTE4(v39) & 7u) - 1)) | 0xFF);
      uint64_t v31 = v48;
      unint64_t v29 = v50;
      unsigned int v44 = *(_DWORD *)(StatusReg + 200);
      unsigned int v37 = v40;
      if ((HIWORD(v44) & 0xF) < v40)
      {
        *(void *)(StatusReg + 200) = v44 & 0xFFF0FFFF | ((_DWORD)v40 << 16);
        unsigned int v37 = v40;
      }
    }

    if ((a3 & 1) != 0)
    {
      __clrex();
      goto LABEL_100;
    }

    unint64_t v43 = v39 ^ v32;
LABEL_84:
    ;
  }

  while (__stxr(v43, v38));
  if ((v39 & v33) != 0)
  {
LABEL_100:
    unsigned int v20 = 0LL;
    uint64_t v52 = 0LL;
    goto LABEL_57;
  }

  uint64_t v45 = 0x60000000000000LL;
  if ((a3 & 1) == 0) {
    uint64_t v45 = v32 | 0x60000000000000LL;
  }
  uint64_t v52 = (v43 & v45) - (v39 & 0x3FFE0000000000LL);
  if (!v52)
  {
    unsigned int v20 = 0LL;
    goto LABEL_57;
  }

LABEL_7:
  if (v7)
  {
    uint64_t v49 = 0LL;
    if ((a3 & 0x100000) == 0) {
      goto LABEL_24;
    }
LABEL_23:
    if ((a1[10] & 0x400000) != 0)
    {
      uint64_t v46 = (unsigned int *)(a1 + 10);
      do
        unsigned int v47 = __ldxr(v46);
      while (__stxr(v47 & 0xFFBFFFFF, v46));
    }
  }

  else
  {
    int v8 = *((_DWORD *)a1 + 21);
    unint64_t v9 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v10 = *(void *)(v9 + 200);
    if ((_DWORD)v10)
    {
      unsigned int v11 = v8 & 0xFFF;
      if ((v8 & 0xFFF) != 0)
      {
        else {
          int v12 = 1140912128;
        }
        unsigned int v13 = v10 & 0x880F0000 | v11 | v12 & v8;
      }

      else
      {
        unsigned int v14 = v10 | 0x40000000;
        if ((v10 & 0xFFF) == 0) {
          unsigned int v14 = *(void *)(v9 + 200);
        }
        unsigned int v15 = (unsigned __int16)v8 >> 12;
        unsigned int v13 = v14 & 0xFFFF0FFF | v8 & 0x400F000;
        if (v15 <= ((v14 >> 8) & 0xF)) {
          unsigned int v13 = v14;
        }
      }
    }

    else
    {
      unsigned int v13 = v8 & 0xFFF0FFFF;
    }

    *(void *)(v9 + 200) = v13;
    uint64_t v49 = v10 & 0xFFF0FFFF;
    if ((a3 & 0x100000) != 0) {
      goto LABEL_23;
    }
  }

  if (v6)
  {
    v94 = 0LL;
  }

  else
  {
    int v8 = *(_DWORD *)&a1->__opaque[68];
    unint64_t v9 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v10 = *(void *)(v9 + 200);
    if ((_DWORD)v10)
    {
      unsigned int v11 = (unsigned __int16)v8 >> 12;
      int v12 = v8 & 0xFFF;
      if ((v8 & 0xFFF) != 0)
      {
        if (v11 <= v12 >> 8) {
          unsigned int v13 = 0x40000000;
        }
        else {
          unsigned int v13 = 1140912128;
        }
        unsigned int v14 = v10 & 0x880F0000 | v12 | v13 & v8;
      }

      else
      {
        unsigned int v15 = v10 | 0x40000000;
        if ((v10 & 0xFFF) == 0) {
          unsigned int v15 = *(void *)(v9 + 200);
        }
        unsigned int v14 = v15 & 0xFFFF0FFF | v8 & 0x400F000;
        if (v11 <= ((v15 >> 8) & 0xF)) {
          unsigned int v14 = v15;
        }
      }
    }

    else
    {
      unsigned int v14 = v8 & 0xFFF0FFFF;
    }

    *(void *)(v9 + 200) = v14;
    v94 = v10 & 0xFFF0FFFF;
  }

  v98 = v7;
  if ((*(_DWORD *)&a1->__opaque[64] & 0x400000) != 0)
  {
    v87 = (unsigned int *)&a1->__opaque[64];
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 & 0xFFBFFFFF, v87));
  }

  uint64_t v16 = (*(_DWORD *)&a1->__opaque[64] << 8) & 0x3000000 | v3 & 0xFCEDFFFF | 0x100000;
  if (((*(_DWORD *)&a1->__opaque[64] << 8) & 0x3000000) == 0) {
    uint64_t v16 = v3 & 0xFFEDFFFF | 0x100000;
  }
  int v17 = v16 & 0x1000002;
  v101 = (unint64_t *)&a1->__opaque[40];
  v100 = v16 & 0xFFFD0000;
  v103 = v16;
  v99 = (v16 >> 21) & 1;
  unsigned int v18 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v97 = v16 & 0x1000002;
  while (2)
  {
    while (2)
    {
      if (v17 == 2) {
        _dispatch_last_resort_autorelease_pool_push((void *)a2);
      }
      unint64_t v19 = *(_BYTE **)&a1->__opaque[184];
      if (v19 && (*v19 & 0x20) != 0) {
        *(void *)(v18 + 192) = v19 + 40;
      }
      v96 = (__objc2_class ***)(v18 + 160);
      v105 = *(_OWORD *)(v18 + 160);
      *(void *)(v18 + 160) = a1;
      *(void *)(v18 + 168) = &v105;
LABEL_32:
      unsigned int v20 = 6LL;
      do
      {
LABEL_33:
        if (!v20)
        {
          v62 = 0LL;
          v98 = v98 & 1 | 0x40020000000000LL;
          *(_OWORD *)v96 = v105;
          *(void *)(v18 + 192) = 0LL;
          goto LABEL_140;
        }

        unint64_t v21 = v20--;
        uint64_t v22 = &a1->__sig + v20;
      }

      while (!v22[19]);
      uint64_t v23 = (uint64_t)(v22 + 19);
      unint64_t v24 = v21;
      unint64_t v25 = v21 << 32;
      unint64_t v26 = (unint64_t *)&a1->__opaque[40];
      do
      {
        uint64_t v27 = __ldxr(v26);
        if ((v27 & 0x700000000LL) <= v25)
        {
          __clrex();
          goto LABEL_41;
        }

        if ((v27 & 0x8000000000LL) != 0)
        {
          __clrex();
          do
            v61 = __ldaxr(v101);
          while (__stxr(v61 ^ 0x8000000000LL, v101));
          goto LABEL_32;
        }

        unsigned int v28 = __stxr(v27 & 0xFFFFFFF8FFFFFFFFLL | v25, v101);
        unint64_t v26 = (unint64_t *)&a1->__opaque[40];
      }

      while (v28);
      unint64_t v29 = *(void *)(v18 + 232);
      if (v29)
      {
        *(_BYTE *)(v29 + 45) |= 2u;
        _dispatch_return_to_kernel();
      }

    v83 = 0LL;
LABEL_57:
    if ((v3 & 0x100000) != 0 && (*(_DWORD *)&a1->__opaque[64] & 0x400000) != 0)
    {
      v79 = (unsigned int *)&a1->__opaque[64];
      do
        v80 = __ldxr(v79);
      while (__stxr(v80 & 0xFFBFFFFF, v79));
    }

    unint64_t v38 = *(_DWORD *)&a1->__opaque[64];
    unint64_t v39 = (v38 << 8) & 0x3000000 | v3 & 0xFCFFFFF7 | 8;
    if (((v38 << 8) & 0x3000000) == 0) {
      unint64_t v39 = v3 | 8;
    }
    uint64_t v40 = v39 & 0x1000002;
    v86 = v39 & 0xFFFDFFFF;
    v82 = (unint64_t *)&a1->__opaque[32];
    uint64_t v41 = (unint64_t *)&a1->__opaque[88];
    v92 = v39;
    v88 = (v39 >> 21) & 1;
    v89 = v39 & 0xFFFF0000;
    uint64_t v42 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v84 = v3;
    v87 = v39 & 0x1000002;
LABEL_62:
    if (v40 == 2) {
      _dispatch_last_resort_autorelease_pool_push(a2);
    }
    unint64_t v43 = *(void *)&a1->__opaque[72];
    *(void *)v93 = a1;
    v94 = a2;
    v95 = v86;
    v96 = 0LL;
    v97 = 0LL;
    v98 = 0;
    *(_OWORD *)&v93[8] = *(_OWORD *)(v42 + 160);
    *(void *)(v42 + 160) = a1;
    *(void *)(v42 + 168) = &v93[8];
    if (_dispatch_channel_invoke_cancel_check((uint64_t)a1, (uint64_t)v93, v43))
    {
      while (2)
      {
        unsigned int v44 = (uint64_t *)v97;
        if (!v97)
        {
          if (!*v82) {
            goto LABEL_168;
          }
          unsigned int v44 = (uint64_t *)*v41;
          if (!*v41) {
            unsigned int v44 = (uint64_t *)_dispatch_wait_for_enqueuer(v41, (uint64_t)v82);
          }
        }

        uint64_t v45 = *v44;
        if ((unint64_t)*v44 <= 0xFFF)
        {
          if ((v45 & 1) != 0) {
            _dispatch_channel_invoke_cold_3();
          }
          if ((v45 & 0x400) != 0)
          {
            v97 = v44;
            v98 = 0;
            if ((v95 & 0x1000000) != 0) {
              unint64_t v50 = objc_autoreleasePoolPush();
            }
            else {
              unint64_t v50 = 0LL;
            }
            if ((*(unsigned int (**)(_opaque_pthread_t *, _BYTE *, void))(v43 + 16))( a1,  v93,  *(void *)&a1->__opaque[16]))
            {
              if (!v98) {
                _dispatch_channel_invoke_cold_2();
              }
              if (!v50) {
                goto LABEL_138;
              }
            }

            else
            {
              v96 = -1LL;
              if (!v50) {
                goto LABEL_138;
              }
            }

            objc_autoreleasePoolPop(v50);
            goto LABEL_138;
          }
        }

        uint64_t v46 = (void *)v44[2];
        *uint64_t v41 = (unint64_t)v46;
        if (!v46)
        {
          v66 = (void **)(v44 + 2);
          while (1)
          {
            v67 = __ldxr(v82);
            if (!__stlxr(0LL, v82)) {
              goto LABEL_70;
            }
          }

          __clrex();
          uint64_t v46 = *v66;
          if (!*v66) {
            uint64_t v46 = (void *)_dispatch_wait_for_enqueuer((unint64_t *)v44 + 2, (uint64_t)v82);
          }
          *uint64_t v41 = (unint64_t)v46;
        }

  int v8 = (unsigned int *)(a1 + 80);
  unint64_t result = *(unsigned int **)(a1 + 24);
  uint64_t v10 = (unint64_t *)(result + 14);
  while (1)
  {
    unsigned int v11 = __ldxr(v10);
    if (v11 >> 55)
    {
      __clrex();
      goto LABEL_23;
    }

    if ((~v11 & 0x2000000002LL) != 0) {
      break;
    }
    v11 |= 0x800000000uLL;
    if (!__stxr(v11, v10))
    {
      if ((v11 & 0x1000000000LL) == 0) {
        goto LABEL_12;
      }
LABEL_23:
      *(_BYTE *)(a2 + 106) &= ~0x40u;
      *(void *)(a2 + 48) = -4LL;
      goto LABEL_24;
    }
  }

  __clrex();
  if ((v11 & 0x1000000000LL) != 0) {
    goto LABEL_23;
  }
LABEL_12:
  if ((v11 & 0x2000000000LL) != 0)
  {
    if (*(_BYTE *)(*(void *)result + 40LL) == 18LL)
    {
      *(_BYTE *)(a2 + 106) = *(_BYTE *)(a2 + 106) & 0xAF | 0x10;
    }

    else if ((*(_BYTE *)(a2 + 106) & 0x40) != 0)
    {
      int v12 = result + 24;
      do
        unsigned int v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      if ((v13 & 0x80000000) != 0) {
        dispatch_set_target_queue_cold_2();
      }
    }

    *(void *)(a2 + 48) = result;
  }

  else
  {
    unint64_t result = (unsigned int *)_dispatch_wait_compute_wlh();
  }

    if (*(void *)a2 > 0xFFFuLL || (*(void *)a2 & 0x81LL) == 0) {
      unint64_t result = _dispatch_continuation_redirect_push((_DWORD *)v4, (void *)a2);
    }
    else {
      unint64_t result = _dispatch_non_barrier_waiter_redirect_or_wake(v4, a2);
    }
    a2 = v10;
    if (!v10) {
      goto LABEL_19;
    }
LABEL_14:
    int v12 = *(void *)a2;
    if (*(void *)a2 <= 0xFFFuLL)
    {
      if ((v12 & 2) != 0) {
        goto LABEL_19;
      }
    }

    else if ((*(void *)(v12 + 40) & 0xF0LL) == 0x10 && (*(_DWORD *)(a2 + 80) & 0x80000) != 0)
    {
      goto LABEL_19;
    }
  }

  while (1)
  {
    uint64_t v22 = __ldaxr(v6);
    if ((v22 & 0xFFE0018000000000LL) != 0) {
      break;
    }
    if (!__stxr(v22 + 0x20000000000LL, v6))
    {
      uint64_t v5 = 0LL;
      goto LABEL_6;
    }
  }

  uint64_t v5 = 0LL;
  __clrex();
LABEL_19:
  unsigned int v13 = *(void *)(StatusReg + 24) & 0xFFFFFFFCLL;
  unsigned int v14 = v5 << 41;
  if (a2)
  {
    unsigned int v15 = *(unsigned __int16 *)(v4 + 80);
    if (v15 >= 2)
    {
      uint64_t v27 = *(void *)a2;
      if (*(void *)a2 < 0x1000uLL)
      {
        if ((v27 & 2) == 0) {
          goto LABEL_21;
        }
      }

      else if ((*(void *)(v27 + 40) & 0xF0LL) != 0x10 || (*(_DWORD *)(a2 + 80) & 0x80000) == 0)
      {
        goto LABEL_21;
      }

      unsigned int v14 = (v14 | 0x10000000000LL) - (v15 << 41);
      goto LABEL_21;
    }
  }

  do
  {
LABEL_21:
    uint64_t v16 = __ldxr(v6);
    int v17 = v16 - v14;
    unsigned int v18 = (v16 - v14) & 0xFFFFFF7700000001LL;
    if (a2)
    {
      if ((v17 & 0x10000000000LL) != 0) {
        unint64_t v19 = v18 + 0x18000000000LL;
      }
      else {
        unint64_t v19 = (v18 | 0x8000000000LL) + ((unint64_t)*(unsigned __int16 *)(v4 + 80) << 41);
      }
      if ((v16 & 0x8000000000LL) != 0) {
        unsigned int v20 = (v16 - v14) & 0xFFFFFF7700000000LL | 0x8000000001LL;
      }
      else {
        unsigned int v20 = v18 | 0x8000000000LL;
      }
      if ((v19 & 0x3FFE0000000000LL) == 0x20000000000000LL) {
        unsigned int v18 = ((v19 & 0xFFFFFF7FFFFFFFFFLL) + 0x40000000000000LL) | v13;
      }
      else {
        unsigned int v18 = v20;
      }
    }

    else if ((v16 & 0x8000000000LL) != 0)
    {
      __clrex();
      do
        unint64_t v26 = __ldaxr(v6);
      while (__stxr(v26 ^ 0x8000000000LL, v6));
      a2 = *(void *)(v4 + 104);
      if (a2) {
        goto LABEL_14;
      }
      goto LABEL_19;
    }
  }

  while (__stxr(v18, v6));
  if ((~v17 & 0x1800000000LL) == 0)
  {
    unsigned int v28 = HIDWORD(v17) & 7;
    unint64_t v29 = *(_DWORD *)(StatusReg + 200);
  }

  if (((v18 ^ v17) & 0x40000000000000LL) != 0) {
    return (_DWORD *)_dispatch_lane_barrier_complete((id)v4);
  }
  if (((v18 ^ v17) & 1) != 0)
  {
    if ((a3 & 1) != 0) {
      goto LABEL_75;
    }
    if (*(_DWORD *)(v4 + 8) == 0x7FFFFFFF) {
      goto LABEL_75;
    }
    uint64_t v30 = (unsigned int *)(v4 + 8);
    do
      uint64_t v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if (v31 > 0)
    {
LABEL_75:
      uint64_t v32 = *(dispatch_queue_s **)(v4 + 24);
      if (MEMORY[0xFFFFFC100]) {
        _dispatch_trace_item_push_internal(*(_opaque_pthread_t **)(v4 + 24), (uint64_t *)v4);
      }
      _dispatch_introspection_queue_item_enqueue(v32, (dispatch_object_s *)v4);
      return (_DWORD *)(*(uint64_t (**)(void, uint64_t, unint64_t))(**(void **)(v4 + 24) + 88LL))( *(void *)(v4 + 24),  v4,  HIDWORD(v18) & 7);
    }

    else
    {
      qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
    }
  }

  else if ((a3 & 1) != 0)
  {
    return _os_object_release_internal_n((void *)v4, (_BYTE *)&dword_0 + 2);
  }

  return result;
}

  if (v7)
  {
    v160 = 0LL;
  }

  else
  {
    int v8 = *(_DWORD *)(a1 + 84);
    unint64_t v9 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v10 = *(void *)(v9 + 200);
    if ((_DWORD)v10)
    {
      unsigned int v11 = v8 & 0xFFF;
      if ((v8 & 0xFFF) != 0)
      {
        else {
          int v12 = 1140912128;
        }
        unsigned int v13 = v10 & 0x880F0000 | v11 | v12 & v8;
      }

      else
      {
        unsigned int v14 = v10 | 0x40000000;
        if ((v10 & 0xFFF) == 0) {
          unsigned int v14 = *(void *)(v9 + 200);
        }
        unsigned int v15 = (unsigned __int16)v8 >> 12;
        unsigned int v13 = v14 & 0xFFFF0FFF | v8 & 0x400F000;
        if (v15 <= ((v14 >> 8) & 0xF)) {
          unsigned int v13 = v14;
        }
      }
    }

    else
    {
      unsigned int v13 = v8 & 0xFFF0FFFF;
    }

    *(void *)(v9 + 200) = v13;
    v160 = v10 & 0xFFF0FFFF;
  }

  if ((v3 & 0x100000) != 0 && (*(_DWORD *)(a1 + 80) & 0x400000) != 0)
  {
    v145 = (unsigned int *)(a1 + 80);
    do
      v146 = __ldxr(v145);
    while (__stxr(v146 & 0xFFBFFFFF, v145));
  }

  if (((*(_DWORD *)(a1 + 80) << 8) & 0x3000000) != 0) {
    uint64_t v16 = (*(_DWORD *)(a1 + 80) << 8) & 0x3000000 | v3 & 0xFCFFFFF7 | 8;
  }
  else {
    uint64_t v16 = v3 | 8;
  }
  int v17 = v16 & 0x1000002;
  v161 = v16 & 0xFBFFFFFF;
  v162 = v16 | 0x4000000;
  unsigned int v18 = (unint64_t *)(a1 + 56);
  unint64_t v19 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v163 = v16 & 0x1000002;
LABEL_28:
  if (v17 == 2) {
    _dispatch_last_resort_autorelease_pool_push(a2);
  }
  unsigned int v20 = (uint64_t *)(v19 + 160);
  unint64_t v21 = *(__objc2_class ***)(v19 + 160);
  uint64_t v22 = *(void *)(a1 + 88);
  if ((v16 & 0x40000) == 0)
  {
    uint64_t v23 = *(void *)(v19 + 232);
    unint64_t v24 = v23 ? *(void *)(v23 + 24) : -4LL;
    unint64_t v25 = *(void *)(v22 + 16) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v26 = v25 == -4LL || v25 == 0;
    if (!v26 && v24 != v25) {
      _dispatch_source_handle_wlh_change(a1);
    }
  }

  if (*(void *)(a1 + 48))
  {
    _dispatch_lane_serial_drain((void *)a1, (uint64_t)a2, v162, &v167);
    unint64_t v29 = v28;
    uint64_t v30 = v161;
  }

  else
  {
    unint64_t v29 = 0LL;
    uint64_t v30 = v16;
  }

  uint64_t v31 = &_dispatch_mgr_q;
  if ((*(_BYTE *)(v22 + 29) & 1) != 0) {
    uint64_t v31 = *(__objc2_class ***)(a1 + 24);
  }
  if ((*(_WORD *)(a1 + 116) & 1) == 0)
  {
    if (v21 != v31) {
      goto LABEL_49;
    }
    uint64_t v32 = v31;
    if ((v30 & 0x10000) != 0)
    {
      unint64_t v33 = v19;
      unsigned int v34 = *(_DWORD *)(v19 + 200);
    }

    else
    {
      unsigned int v34 = 0x2000000;
      unint64_t v33 = v19;
    }

    unsigned int v35 = v18;
    unsigned int v36 = *(void *)(v33 + 232);
    unsigned int v37 = v30;
    if (v36) {
      unint64_t v38 = *(void *)(v36 + 24);
    }
    else {
      unint64_t v38 = -4LL;
    }
    _dispatch_source_install(a1, v38, v34);
    uint64_t v30 = v37;
    unsigned int v18 = v35;
    uint64_t v31 = v32;
    unsigned int v20 = (uint64_t *)(v19 + 160);
  }

  if (*v18 >> 55) {
    goto LABEL_156;
  }
  if ((*(_BYTE *)(v22 + 29) & 2) != 0 && *(void *)(v22 + 104) && (*(_DWORD *)(a1 + 80) & 0x10800000) == 0)
  {
    if (v21 == v31)
    {
      v156 = v29;
      uint64_t v46 = v22;
      unsigned int v47 = v16;
      uint64_t v48 = v3;
      uint64_t v49 = v19;
      unint64_t v50 = v20;
      __int128 v51 = v31;
      uint64_t v52 = v18;
      v53 = v30;
      _dispatch_timer_unote_configure(*(void *)(a1 + 88));
      uint64_t v30 = v53;
      unsigned int v18 = v52;
      uint64_t v31 = v51;
      unsigned int v20 = v50;
      unint64_t v19 = v49;
      unsigned int v3 = v48;
      uint64_t v16 = v47;
      uint64_t v22 = v46;
      unint64_t v29 = v156;
      goto LABEL_60;
    }

    goto LABEL_49;
  }

  if (v7)
  {
    v66 = 0LL;
  }

  else
  {
    int v8 = *((_DWORD *)a1 + 21);
    unint64_t v9 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v10 = *(void *)(v9 + 200);
    if ((_DWORD)v10)
    {
      unsigned int v11 = v8 & 0xFFF;
      if ((v8 & 0xFFF) != 0)
      {
        else {
          int v12 = 1140912128;
        }
        unsigned int v13 = v10 & 0x880F0000 | v11 | v12 & v8;
      }

      else
      {
        unsigned int v14 = v10 | 0x40000000;
        if ((v10 & 0xFFF) == 0) {
          unsigned int v14 = *(void *)(v9 + 200);
        }
        unsigned int v15 = (unsigned __int16)v8 >> 12;
        unsigned int v13 = v14 & 0xFFFF0FFF | v8 & 0x400F000;
        if (v15 <= ((v14 >> 8) & 0xF)) {
          unsigned int v13 = v14;
        }
      }
    }

    else
    {
      unsigned int v13 = v8 & 0xFFF0FFFF;
    }

    *(void *)(v9 + 200) = v13;
    v66 = v10 & 0xFFF0FFFF;
  }

  if ((a3 & 0x100000) != 0 && (a1[10] & 0x400000) != 0)
  {
    v64 = (unsigned int *)(a1 + 10);
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 & 0xFFBFFFFF, v64));
  }

  if (((*((_DWORD *)a1 + 20) << 8) & 0x3000000) != 0) {
    uint64_t v16 = (*((_DWORD *)a1 + 20) << 8) & 0x3000000 | a3 & 0xFCFFFFF7 | 8;
  }
  else {
    uint64_t v16 = a3 | 8u;
  }
  int v17 = v16 & 0x1000002;
  unsigned int v18 = a1 + 7;
  unint64_t v19 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_28:
  if (v17 == 2) {
    _dispatch_last_resort_autorelease_pool_push(a2);
  }
  unint64_t v21 = (uint64_t *)(v19 + 160);
  unsigned int v20 = *(__objc2_class ***)(v19 + 160);
  uint64_t v22 = a1[15];
  uint64_t v23 = a1[11];
  if ((v16 & 0x40000) == 0 && v23)
  {
    unint64_t v24 = *(void *)(v19 + 232);
    unint64_t v25 = v24 ? *(void *)(v24 + 24) : -4LL;
    unint64_t v26 = *(void *)(v23 + 16) & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v27 = v26 == -4LL || v26 == 0;
    if (!v27 && v25 != v26) {
      _dispatch_mach_handle_wlh_change((uint64_t)a1);
    }
  }

  if ((*((_WORD *)a1 + 58) & 1) == 0)
  {
    if ((v16 & 0x40000) != 0)
    {
      unint64_t v29 = a1[3];
      goto LABEL_88;
    }

    if ((v16 & 0x10000) != 0) {
      uint64_t v40 = *(_DWORD *)(v19 + 200);
    }
    else {
      uint64_t v40 = 0x2000000;
    }
    uint64_t v41 = *(void *)(v19 + 232);
    if (v41) {
      uint64_t v42 = *(void *)(v41 + 24);
    }
    else {
      uint64_t v42 = -4LL;
    }
    _dispatch_mach_install((uint64_t)a1, v42, v40);
  }

  if (!a1[6])
  {
    unint64_t v29 = 0LL;
    goto LABEL_48;
  }

  unint64_t v29 = a1[3];
  if (v20 != (__objc2_class **)v29) {
    goto LABEL_48;
  }
  while (2)
  {
    while (2)
    {
      _dispatch_lane_serial_drain(a1, v68, v16, &v70);
      unint64_t v29 = v30;
LABEL_48:
      uint64_t v31 = *((_DWORD *)a1 + 20);
      if (!v29 && (v31 & 0x10000000) == 0 && *(void *)(v23 + 16) && (*(void *)(v23 + 16) & 3LL) == 0)
      {
        _dispatch_unote_resume(v23);
        if (v20 == (__objc2_class **)a1[3]
          && !v20[3]
          && !*(void *)(v22 + 72)
          && (*((_DWORD *)v20 + 21) & 0x80000000) != 0)
        {
          if (*(void *)(v19 + 40))
          {
            unint64_t v38 = *(void *)(v19 + 232);
            if (v38)
            {
              unint64_t v39 = *(void *)(v38 + 24);
              if (v39 != -4 && v39 == (*(void *)(v23 + 16) & 0xFFFFFFFFFFFFFFFCLL))
              {
                _dispatch_event_loop_drain(1LL);
                if (a1[6]) {
                  continue;
                }
              }
            }
          }
        }

        uint64_t v31 = *((_DWORD *)a1 + 20);
      }

      break;
    }

    if (!*(void *)(v22 + 72)) {
      goto LABEL_72;
    }
    if ((*(_BYTE *)(v22 + 30) & 1) != 0 && !*(_DWORD *)(v22 + 88))
    {
LABEL_71:
      if (!v29) {
        goto LABEL_80;
      }
      goto LABEL_72;
    }

    if (*(_DWORD *)(v22 + 88)) {
      unint64_t v33 = *(void *)(v22 + 16) != 0LL;
    }
    else {
      unint64_t v33 = *((_WORD *)a1 + 59) & 1;
    }
    if (v33 && v20 != &_dispatch_mgr_q)
    {
      if (!v29) {
        unint64_t v29 = (uint64_t)&_dispatch_mgr_q;
      }
      goto LABEL_87;
    }

    _dispatch_mach_send_invoke((unint64_t)a1, (const char *)v16, 4 * (v20 != &_dispatch_mgr_q));
    if (v29)
    {
LABEL_72:
      if ((v31 & 0x10000000) == 0) {
        goto LABEL_87;
      }
      goto LABEL_73;
    }

    if (a1[6])
    {
      unint64_t v29 = a1[3];
      goto LABEL_71;
    }

        uint64_t v16 = *v14;
        if ((unint64_t)*v14 < 0x1000)
        {
          if ((v16 & 1) == 0)
          {
            BOOL v6 = v9;
            if (v9[2] && *(__objc2_class ***)(StatusReg + 160) != &_dispatch_mgr_q)
            {
              *(_WORD *)(a1 + 118) |= 1u;
              v34 |= 2u;
              goto LABEL_41;
            }

            goto LABEL_28;
          }

          int v17 = v5;
          unint64_t v19 = v14[6];
          unsigned int v18 = v14[7];
        }

        else
        {
          if (*(void *)(v16 + 40) == 768LL)
          {
            if ((a3 & 4) == 0)
            {
              BOOL v6 = v9;
LABEL_41:
              *unsigned int v15 = v13;
              if (!v13)
              {
                a2 = (const char *)v35;
                while (!__ldxr(v35))
                {
                }

                __clrex();
                unint64_t v24 = *v10;
                if (!*v10) {
                  unint64_t v24 = _dispatch_wait_for_enqueuer(v10, (uint64_t)v35);
                }
                v14[2] = v24;
              }

LABEL_24:
  if (((*((_DWORD *)a1 + 20) << 8) & 0x3000000) != 0) {
    uint64_t v16 = (*((_DWORD *)a1 + 20) << 8) & 0x3000000 | a3 & 0xFCFFFFFF;
  }
  else {
    uint64_t v16 = a3;
  }
  int v17 = v16 & 0x1000002;
  unsigned int v18 = a1 + 7;
  unint64_t v19 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_28:
  if (v17 == 2) {
    _dispatch_last_resort_autorelease_pool_push(a2);
  }
  unsigned int v20 = (__objc2_class **)a1[3];
  unint64_t v21 = (__objc2_class ***)(v19 + 160);
  if (*(__objc2_class ***)(v19 + 160) == v20)
  {
    if (*((_WORD *)a1 + 40) == 1) {
      _dispatch_lane_serial_drain(a1, (uint64_t)a2, v16, &v52);
    }
    else {
      _dispatch_lane_concurrent_drain((uint64_t)a1, (uint64_t)a2, v16, &v52);
    }
    unsigned int v20 = v22;
  }

  if (v17 == 2)
  {
    __int128 v51 = *(_OWORD *)v21;
    *(void *)(v19 + 160) = a1;
    *(void *)(v19 + 168) = &v51;
    _dispatch_last_resort_autorelease_pool_pop((uint64_t)a2);
    *(_OWORD *)unint64_t v21 = v51;
  }

  if ((unint64_t)v20 + 1 <= 1)
  {
    uint64_t v23 = v52;
    while (1)
    {
      unint64_t v24 = __ldxr(v18);
      unint64_t v25 = (v24 - v23) & 0xFFFFFFF700000001LL;
      if (!(v24 >> 55))
      {
        if ((v24 & 0x8000000000LL) != 0)
        {
          __clrex();
          do
            unint64_t v26 = __ldaxr(v18);
          while (__stxr(v26 ^ 0x8000000000LL, v18));
          if ((a3 & 1) != 0) {
            goto LABEL_28;
          }
          unsigned int v20 = *v21;
          break;
        }

        if (v20) {
          unint64_t v25 = (v24 - v23) & 0xFFFFFF7700000001LL | 0x8000000000LL;
        }
        else {
          unint64_t v25 = (v24 - v23) & 0xFFFFFFF000000001LL;
        }
      }

      if (!__stlxr(v25, v18))
      {
        if ((~v24 & 0x1800000000LL) == 0)
        {
          uint64_t v27 = HIDWORD(v24) & 7;
          unsigned int v28 = *(_DWORD *)(v19 + 200);
        }

        unsigned int v20 = 0LL;
        uint64_t v52 = 0LL;
        break;
      }
    }
  }

  if ((v16 & 0x40000) == 0) {
    *(void *)(v19 + 200) = *(void *)(v19 + 200) & 0xF0000LL | v49;
  }
LABEL_57:
  if ((a3 & 1) == 0)
  {
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace(772079660LL, a1, 0LL, 0LL, 0LL);
    }
    _dispatch_introspection_queue_item_complete((dispatch_object_s *)a1);
  }

  if (v20) {
    _dispatch_queue_invoke_finish((dispatch_object_s *)a1, (uint64_t)a2, v20, v52);
  }
  else {
    _os_object_release_internal_n(a1, (_BYTE *)&dword_0 + 2);
  }
}

  if ((v4 & 0x400000) != 0)
  {
    if ((*(_BYTE *)(a2 + 106) & 0x10) != 0)
    {
      do
        unsigned int v14 = __ldxr(v8);
      while (__stxr(v14 & 0xFFBFFFFF, v8));
    }

    unint64_t result = (unsigned int *)(a1 + 100);
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v16 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    do
      int v17 = __ldxr(result);
    while (__stlxr(0, result));
    if (v17 != v16)
    {
      unint64_t result = (unsigned int *)_dispatch_unfair_lock_unlock_slow((uint64_t)result, v17);
      if ((v17 & 2) != 0 && (*(void *)(StatusReg + 200) & 0xF0000LL) == 0) {
        *(void *)(StatusReg + 200) = *(void *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
      }
    }
  }

  return result;
}

uint64_t dispatch_workloop_copy_current()
{
  uint64_t v0 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 216);
  BOOL v1 = v0 == -4 || v0 == 0;
  if (v1 || *(_BYTE *)(*(void *)v0 + 40LL) != 18LL) {
    return 0LL;
  }
  _os_object_retain_with_resurrect(v0);
  return v0;
}

BOOL dispatch_workloop_is_current(uint64_t a1)
{
  return *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 216) == a1;
}

BOOL _dispatch_workloop_uses_bound_thread(uint64_t a1)
{
  BOOL v1 = *(_BYTE **)(a1 + 200);
  return v1 && (*v1 & 0x40) != 0;
}

BOOL _dispatch_workloop_should_yield_4NW()
{
  uint64_t v0 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 216);
  BOOL v1 = v0 == -4 || v0 == 0;
  return !v1 && *(_BYTE *)(*(void *)v0 + 40LL) == 18LL && (*(_DWORD *)(v0 + 60) & 7u) > *(unsigned __int8 *)(v0 + 100);
}

dispatch_workloop_t dispatch_workloop_create(const char *label)
{
  return (dispatch_workloop_t)_dispatch_workloop_create(label, 0LL);
}

uint64_t _dispatch_workloop_create(const char *a1, uint64_t a2)
{
  int v3 = 65537;
  if (a1)
  {
    uint64_t v5 = _dispatch_strdup_if_mutable(a1);
    if (v5 == a1) {
      int v3 = 65537;
    }
    else {
      int v3 = 2162689;
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  uint64_t v6 = _dispatch_object_alloc(&OBJC_CLASS___OS_dispatch_workloop, 208LL);
  if ((a2 & 0x180000000000000LL) != 0)
  {
    *(_DWORD *)(v6 + 8) += 2;
    if (*(_BYTE *)(*(void *)v6 + 40LL) == 19LL) {
      ++*(_DWORD *)(v6 + 8);
    }
  }

  *(void *)(v6 + 16) = -1985229329LL;
  *(_DWORD *)(v6 + 80) = v3;
  *(void *)(v6 + 56) = a2 | 0x1FFE2000000000LL;
  do
    unint64_t v7 = __ldxr(&_dispatch_queue_serial_numbers);
  while (__stxr(v7 + 1, &_dispatch_queue_serial_numbers));
  *(void *)(v6 + 64) = v7;
  *(void *)(v6 + 72) = v5;
  *(void *)(v6 + 24) = &off_653C0;
  if ((a2 & 0x180000000000000LL) == 0) {
    *(_DWORD *)(v6 + 84) = -2080358400;
  }
  return _dispatch_introspection_queue_create(v6);
}

dispatch_workloop_t dispatch_workloop_create_inactive(const char *label)
{
  return (dispatch_workloop_t)_dispatch_workloop_create(label, 0x180000000000000LL);
}

void dispatch_workloop_set_autorelease_frequency( dispatch_workloop_t workloop, dispatch_autorelease_frequency_t frequency)
{
  unsigned int v2 = (unsigned int *)((char *)workloop + 80);
  if (frequency == DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM)
  {
    while (1)
    {
      unsigned int v3 = __ldxr(v2);
      unsigned int v4 = v3 & 0xFFFCFFFF | 0x10000;
      if (v4 == v3) {
        break;
      }
      if (!__stxr(v4, v2)) {
        goto LABEL_7;
      }
    }
  }

  else
  {
    while (1)
    {
      unsigned int v5 = __ldxr(v2);
      unsigned int v6 = v5 & 0xFFFCFFFF | 0x20000;
      if (v6 == v5) {
        break;
      }
      if (!__stxr(v6, v2)) {
        goto LABEL_7;
      }
    }
  }

  __clrex();
LABEL_7:
  uint64_t v7 = *((void *)workloop + 7);
  if ((~v7 & 0x180000000000000LL) != 0) {
    dispatch_set_qos_class_floor_cold_1(v7);
  }
}

_DWORD *dispatch_workloop_set_scheduler_priority(uint64_t a1, int a2, char a3)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if ((~v4 & 0x180000000000000LL) != 0) {
    dispatch_set_qos_class_floor_cold_1(v4);
  }
  unint64_t result = *(_DWORD **)(a1 + 200);
  if (result)
  {
    if (a2) {
      goto LABEL_4;
    }
LABEL_8:
    result[2] = 0;
    unsigned int v8 = *result & 0xFFFFFFFE;
    if ((a3 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_9:
    result[4] = 2;
    unsigned int v9 = v8 | 2;
    goto LABEL_10;
  }

  unint64_t result = _dispatch_calloc(1uLL, 0x38uLL);
  *(void *)(a1 + 200) = result;
  if (!a2) {
    goto LABEL_8;
  }
LABEL_4:
  result[2] = a2;
  unsigned int v8 = *result | 1;
  if ((a3 & 1) != 0) {
    goto LABEL_9;
  }
LABEL_5:
  unsigned int v9 = v8 & 0xFFFFFFFD;
LABEL_10:
  *unint64_t result = v9;
  return result;
}

uint64_t dispatch_workloop_set_uses_bound_thread(uint64_t a1)
{
  if (_dispatch_workloop_bound_thread_pred != -1) {
    dispatch_once_f( &_dispatch_workloop_bound_thread_pred,  0LL,  (dispatch_function_t)_dispatch_workloop_bound_thread_init_once);
  }
  if (!_dispatch_thread_bound_kqwl_enabled) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if ((~v2 & 0x180000000000000LL) != 0) {
    dispatch_set_qos_class_floor_cold_1(v2);
  }
  unsigned int v3 = *(_DWORD **)(a1 + 200);
  if (!v3)
  {
    unsigned int v3 = _dispatch_calloc(1uLL, 0x38uLL);
    *(void *)(a1 + 200) = v3;
  }

  uint64_t result = 0LL;
  *v3 |= 0x40u;
  return result;
}

void dispatch_workloop_set_os_workgroup(dispatch_workloop_t workloop, os_workgroup_t workgroup)
{
  uint64_t v3 = *((void *)workloop + 7);
  if ((~v3 & 0x180000000000000LL) != 0) {
    dispatch_set_qos_class_floor_cold_1(v3);
  }
  unsigned int v5 = (void *)*((void *)workloop + 25);
  if (!v5)
  {
    unsigned int v5 = _dispatch_calloc(1uLL, 0x38uLL);
    *((void *)workloop + 25) = v5;
  }

  unsigned int v6 = (void *)v5[4];
  if (v6) {
    _os_object_release(v6, (const char *)workgroup);
  }
  _os_object_retain((uint64_t)workgroup);
  *(void *)(*((void *)workloop + 25) + 32LL) = workgroup;
}

_DWORD *dispatch_workloop_set_qos_class(uint64_t a1, int a2, char a3)
{
  return dispatch_workloop_set_qos_class_floor(a1, a2, 0, a3);
}

_BYTE *dispatch_workloop_set_cpupercent(uint64_t a1, char a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if ((~v4 & 0x180000000000000LL) != 0) {
    dispatch_set_qos_class_floor_cold_1(v4);
  }
  uint64_t result = *(_BYTE **)(a1 + 200);
  if (!result)
  {
    uint64_t result = _dispatch_calloc(1uLL, 0x38uLL);
    *(void *)(a1 + 200) = result;
  }

  int v8 = *(_DWORD *)result;
  if ((*(_DWORD *)result & 9) == 0) {
    dispatch_workloop_set_cpupercent_cold_1();
  }
  result[20] = a2;
  *((_DWORD *)result + 6) = a3;
  *(_DWORD *)uint64_t result = v8 | 4;
  return result;
}

__n128 _dispatch_workloop_set_observer_hooks_4IOHID(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = *(void *)(a1 + 56);
  if ((~v3 & 0x180000000000000LL) != 0) {
    dispatch_set_qos_class_floor_cold_1(v3);
  }
  unsigned int v5 = *(char **)(a1 + 200);
  if (!v5)
  {
    unsigned int v5 = (char *)_dispatch_calloc(1uLL, 0x38uLL);
    *(void *)(a1 + 200) = v5;
  }

  __n128 result = *a2;
  *(__n128 *)(v5 + 40) = *a2;
  **(_DWORD **)(a1 + 200) |= 0x20u;
  return result;
}

void _dispatch_workloop_dispose(void *a1, _BYTE *a2)
{
  uint64_t v3 = a1[7];
  if (v3 != 0x1FFE2000000000LL)
  {
    if ((v3 & 0xFFFFFFFC) == 0) {
      _dispatch_workloop_dispose_cold_2(v3);
    }
    _dispatch_workloop_dispose_cold_3(v3);
  }

  _dispatch_introspection_queue_dispose((uint64_t)a1);
  for (uint64_t i = 0LL; i != 6; ++i)
  {
    uint64_t v7 = &a1[i];
    uint64_t v8 = a1[i + 19];
    if (v8) {
      _dispatch_workloop_dispose_cold_1(v8);
    }
    v7[19] = 512LL;
    v7[13] = 512LL;
  }

  unsigned int v9 = (void *)a1[6];
  if (v9)
  {
    free(v9);
    a1[6] = 0LL;
  }

  uint64_t v10 = (_BYTE *)a1[25];
  if (v10)
  {
    if ((*v10 & 0x10) != 0)
    {
      int v11 = _pthread_workloop_destroy(a1);
      if (v11) {
        _dispatch_bug(4566LL, v11);
      }
    }

    int v12 = (void **)a1[25];
    if (v12)
    {
      if (v12[4])
      {
        _os_object_release(v12[4], v5);
        int v12 = (void **)a1[25];
      }

      free(v12);
    }
  }

  _dispatch_queue_dispose(a1, a2);
}

void _dispatch_workloop_activate(uint64_t a1)
{
  uint64_t v2 = (unint64_t *)(a1 + 56);
  do
    unint64_t v3 = __ldxr(v2);
  while (__stxr(v3 & 0xFEFFFFFFFFFFFFFFLL, v2));
  if ((~v3 & 0x180000000000000LL) != 0) {
    return;
  }
  uint64_t v4 = *(int **)(a1 + 200);
  if (v4)
  {
    pthread_attr_init(&v19);
    int v5 = *v4;
    if ((*v4 & 8) != 0) {
      *(_DWORD *)(a1 + 84) |= v4[1] | 0x40000000;
    }
    if ((v5 & 1) != 0)
    {
      pthread_attr_setschedparam(&v19, (const sched_param *)v4 + 1);
      *(void *)(a1 + 24) = &_dispatch_custom_workloop_root_queue;
    }

    uint64_t v6 = *((void *)v4 + 4);
    if (v6)
    {
      *(void *)(a1 + 24) = &_dispatch_custom_workloop_root_queue;
      uint64_t backing_workinterval = _os_workgroup_get_backing_workinterval(v6);
    }

    int v8 = *v4;
    if ((*v4 & 0x40) != 0)
    {
      if (_dispatch_root_queues_pred != -1) {
        dispatch_once_f(&_dispatch_root_queues_pred, 0LL, (dispatch_function_t)_dispatch_root_queues_init_once);
      }
      *(void *)(a1 + 24) = &_dispatch_custom_workloop_overcommit_root_queue;
      int v8 = *v4;
      uint64_t v9 = 1LL;
      if ((*v4 & 2) == 0)
      {
LABEL_19:
        if ((v8 & 4) != 0) {
          pthread_attr_setcpupercent_np(&v19, *((unsigned __int8 *)v4 + 20), v4[6]);
        }
        uint64_t v10 = *(void *)(a1 + 200);
        if (!v10) {
          goto LABEL_46;
        }
        if ((*(_BYTE *)v10 & 0x47) == 0)
        {
          uint64_t v12 = *(void *)(v10 + 32);
        }

        int v11 = _pthread_workloop_create(a1, v9, &v19);
        if (v11 <= 44)
        {
          if (v11)
          {
            if (v11 == 33) {
              _dispatch_workloop_activate_cold_1(a1);
            }
          }

          else
          {
            *v4 |= 0x10u;
          }

          goto LABEL_46;
        }

        if (v11 != 45)
        {
          if (v11 == 78) {
            _dispatch_workloop_activate_simulator_fallback(a1, (__int128 *)&v19.__sig);
          }
LABEL_46:
          pthread_attr_destroy(&v19);
          goto LABEL_47;
        }

        unsigned int v13 = *(const sched_param **)(a1 + 200);
        pthread_attr_init(&v20);
        int sched_priority = v13->sched_priority;
        if ((v13->sched_priority & 1) != 0)
        {
          pthread_attr_setschedparam(&v20, v13 + 1);
          int sched_priority = v13->sched_priority;
          if ((v13->sched_priority & 2) == 0)
          {
LABEL_34:
            if ((sched_priority & 4) == 0)
            {
LABEL_36:
              int v15 = _pthread_workloop_create(a1, 0LL, &v20);
              if (v15 == 45)
              {
                _dispatch_workloop_activate_simulator_fallback(a1, (__int128 *)&v20.__sig);
              }

              else if (!v15)
              {
                v13->sched_priority |= 0x10u;
              }

              pthread_attr_destroy(&v20);
              goto LABEL_46;
            }

LABEL_35:
            pthread_attr_setcpupercent_np( &v20,  v13[2].__opaque[0],  v13[3].sched_priority);
            goto LABEL_36;
          }
        }

        else if ((sched_priority & 2) == 0)
        {
          goto LABEL_34;
        }

        pthread_attr_setschedpolicy(&v20, v13[2].sched_priority);
        if ((v13->sched_priority & 4) == 0) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
    }

    else
    {
      uint64_t v9 = 0LL;
      if ((v8 & 2) == 0) {
        goto LABEL_19;
      }
    }

    pthread_attr_setschedpolicy(&v19, v4[4]);
    int v8 = *v4;
    goto LABEL_19;
  }

        if (*(void *)v10 <= 0xFFFuLL && (*(void *)v10 & 0x81LL) != 0)
        {
          v9 -= 0x20000000000LL;
          _dispatch_non_barrier_waiter_redirect_or_wake(a1, v10);
          goto LABEL_101;
        }

        if ((a3 & 0x20000) != 0)
        {
          v9 -= 0x20000000000LL;
          _dispatch_continuation_redirect_push((_DWORD *)a1, (void *)v10);
          goto LABEL_101;
        }

  if (v4 == 35)
  {
    if (!*(_DWORD *)(a1 + 56)
      && *(void *)(a1 + 216)
      && *(void *)(a1 + 136) == *(void *)(*(void *)(a1 + 144) + 88LL))
    {
      return 4LL;
    }

    else
    {
      return 5LL;
    }
  }

  *(_DWORD *)(a1 + 120) = v4;
  if (v4 == 89) {
    return 6LL;
  }
  if (v4 != 9) {
    return 1LL;
  }
  uint64_t v23 = (unsigned int *)(*(void *)(a1 + 144) + 24LL);
  while (!__ldxr(v23))
  {
    if (!__stxr(9u, v23)) {
      return 7LL;
    }
  }

  __clrex();
  return 7LL;
}

LABEL_47:
  int v16 = *(_DWORD *)(a1 + 84);
  if (v16) {
    unsigned int v17 = v16 | 0x80000000;
  }
  else {
    unsigned int v17 = -2080358400;
  }
  *(_DWORD *)(a1 + 84) = v17;
  do
    unint64_t v18 = __ldxr(v2);
  while (__stxr(v18 & 0xFF7FFFFFFFFFFFFFLL, v2));
  _dispatch_workloop_wakeup((char *)a1, 0LL, 1u);
}

    *(void *)a2 = (unint64_t)v21 & 0xFFFFFFFFFFFFFFFDLL;
    if (!*(void *)(a1 + 48))
    {
      unint64_t v29 = (unint64_t *)(a1 + 56);
      while (1)
      {
        uint64_t v30 = __ldxr(v29);
        if ((v30 & 0xFFC0018000000000LL) != 0) {
          break;
        }
        if (!__stxr(v30 + 0x20000000000LL, v29)) {
          return _dispatch_non_barrier_waiter_redirect_or_wake(a1, a2);
        }
      }

      __clrex();
    }

    goto LABEL_45;
  }

  _dispatch_introspection_runtime_event();
  if ((*(_BYTE *)a2 & 0x80) != 0) {
    *(void *)(a2 + 56) = v8;
  }
  return _dispatch_waiter_wake(a2, v12, a4, a5);
}

      ++v4;
    }

    while (v4 != v3);
    *(_BYTE *)(a1 + 6) = 0;
    unsigned int v28 = 0LL;
    do
    {
      unint64_t v29 = a1 + 32 * v28;
      uint64_t v30 = (char *)(v29 + 7);
      if ((*(_BYTE *)(v29 + 7) & 2) == 0) {
        goto LABEL_97;
      }
      uint64_t v31 = *(void *)(v29 + 8);
      if (!v31) {
        goto LABEL_93;
      }
      uint64_t v32 = *(void *)(v31 + 80);
      unint64_t v33 = *(void *)(*(void *)(a1 + 32 * v28 + 16) + 88LL);
      unsigned int v34 = *(&v62 + v28 / 3);
      if (!v34)
      {
        mach_get_times(&v62, &v63, &v65);
        v64 = v66 + 1000000000 * v65;
        unsigned int v34 = *(&v62 + v28 / 3);
      }

      unsigned int v35 = v28 % 3;
      if (v32 <= v34) {
        goto LABEL_92;
      }
      unsigned int v36 = *(_DWORD *)v29;
      if (*(_DWORD *)v29 >= 3u)
      {
        unsigned int v37 = _dispatch_kevent_coalescing_window[v35];
        if (v37 + v32 < v33)
        {
          unint64_t v38 = v33 - v37;
          uint64_t v32 = *(void *)(*(void *)(v29 + 8) + 80LL);
          unint64_t v39 = a1 + 32 * v28;
          uint64_t v40 = *(unsigned __int8 *)(v39 + 4);
          uint64_t v41 = (uint64_t *)(v39 + 24);
          uint64_t v42 = 2;
          do
          {
            if (v42 > 1)
            {
              unsigned int v44 = __clz((v42 - 2) | 7);
              uint64_t v45 = v41;
              if (30 - v44 != v40) {
                uint64_t v45 = (uint64_t *)(*v41 + 8LL * ((8 << (v40 - 2)) - 30 + v44));
              }
              uint64_t v46 = *v45;
              if (v44 == 29) {
                unsigned int v47 = 0;
              }
              else {
                unsigned int v47 = -8 << (28 - v44);
              }
              unint64_t v43 = v46 + 8LL * (v47 + v42 - 2);
            }

            else
            {
              unint64_t v43 = a1 + 32 * v28 + 8LL * v42 + 8;
            }

            uint64_t v48 = *(void *)(*(void *)v43 + 80LL);
            if (v48 <= v32) {
              uint64_t v49 = v32;
            }
            else {
              uint64_t v49 = v48;
            }
            unint64_t v50 = (v42 & 0xFFFFFFFE) + 2;
            if (v50 == v36) {
              __int128 v51 = ((v42 - 2) >> 1) & 0x7FFFFFFE;
            }
            else {
              __int128 v51 = v42 & 0xFFFFFFFE;
            }
            uint64_t v52 = (v51 + 3) >> __clz(__rbit32(-4 - v51));
            v53 = v42 & 1 | (2 * v52);
            if (!v52) {
              v53 = -1;
            }
            if (2 * v42 - (v42 & 1) + 2 < v36) {
              v53 = 2 * v42 - (v42 & 1) + 2;
            }
            if (v50 == v36) {
              v54 = ((v42 - 2) >> 1) & 0x7FFFFFFE;
            }
            else {
              v54 = v42 & 0xFFFFFFFE;
            }
            v55 = (v54 + 3) >> __clz(__rbit32(-4 - v54));
            uint64_t v42 = v42 & 1 | (2 * v55);
            if (!v55) {
              uint64_t v42 = -1;
            }
            if (v48 <= v38)
            {
              uint64_t v42 = v53;
              uint64_t v32 = v49;
            }
          }

          while (v42 < v36);
        }
      }

      __int128 v56 = v32 - v34;
      v57 = v56 >= 0x7FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v56;
      v58 = v33 - v32 >= 0x7FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v33 - v32;
      if (!v57)
      {
LABEL_92:
        *(_BYTE *)(a1 + 6) |= (1 << v35) | 0x80;
LABEL_93:
        v60 = *v30;
        if ((*v30 & 1) != 0)
        {
          _dispatch_event_loop_timer_delete(a1, v28);
          v60 = *v30;
        }

        v59 = v60 & 0xFC;
        goto LABEL_96;
      }

      _dispatch_event_loop_timer_arm(a1, v28, v57, v58, (uint64_t)&v62);
      v59 = *v30 & 0xFC | 1;
LABEL_96:
      *uint64_t v30 = v59;
LABEL_97:
      ++v28;
    }

    while (v28 != v3);
  }

  while (*(_BYTE *)(a1 + 6));
}

void _dispatch_workloop_wakeup(char *a1, uint64_t a2, unsigned int a3)
{
  if ((a3 & 4) != 0)
  {
    _dispatch_workloop_barrier_complete(a1, a2, a3);
    return;
  }

  if ((a3 & 1) == 0) {
    _dispatch_workloop_wakeup_cold_1(a3);
  }
  if ((a3 & 8) != 0) {
    goto LABEL_20;
  }
  int v5 = (unint64_t *)(a1 + 56);
  unint64_t v6 = a2 << 32;
  do
  {
    unint64_t v7 = __ldxr(v5);
    unint64_t v8 = v7 & 0xFFFFFFF8FFFFFFFFLL | v6;
    if (v7 & 0x1000000000LL | v6 & 0x1000000000LL) {
      v8 |= 0x800000000uLL;
    }
    if ((v7 & 0x700000000LL) < v6) {
      unint64_t v9 = v8;
    }
    else {
      unint64_t v9 = v7;
    }
    unint64_t v10 = v9 | ((v9 & 0x700000000LL) != 0);
    if ((a3 & 2) != 0)
    {
      v10 |= 0x8000000000uLL;
    }

    else if (v10 == v7)
    {
      __clrex();
      goto LABEL_20;
    }
  }

  while (__stlxr(v10, v5));
  if (v7 >> 55) {
    _dispatch_workloop_wakeup_cold_2(v7);
  }
  if (((v10 ^ v7) & 1) != 0)
  {
    if ((v10 & 0x2000000000LL) != 0)
    {
      _dispatch_introspection_runtime_event();
      int v11 = (dispatch_object_s *)a1;
      uint64_t v12 = v10;
      unsigned int v13 = (dispatch_queue_s *)(&dword_0 + 1);
LABEL_19:
      _dispatch_event_loop_poke(v11, v12, v13);
      return;
    }

    unsigned int v14 = (dispatch_queue_s *)*((void *)a1 + 3);
    if (MEMORY[0xFFFFFC100]) {
      _dispatch_trace_item_push_internal(*((_opaque_pthread_t **)a1 + 3), (uint64_t *)a1);
    }
    _dispatch_introspection_queue_item_enqueue(v14, (dispatch_object_s *)a1);
    (*(void (**)(dispatch_queue_s *, char *, unint64_t))(*(void *)v14 + 88LL))( v14,  a1,  HIDWORD(v10) & 7);
    return;
  }

  if (((v10 ^ v7) & 0x700000000LL) == 0)
  {
LABEL_20:
    _os_object_release_internal_n(a1, (_BYTE *)&dword_0 + 2);
    return;
  }

  if ((v10 & 0x2000000000LL) != 0)
  {
    _dispatch_introspection_runtime_event();
    unsigned int v13 = (dispatch_queue_s *)(a3 | 0x80000000);
    int v11 = (dispatch_object_s *)a1;
    uint64_t v12 = v10;
    goto LABEL_19;
  }

  _dispatch_queue_wakeup_with_override_slow((uint64_t)a1, v10, a3);
}

void _dispatch_workloop_invoke(_opaque_pthread_t *a1, uint64_t a2, int a3)
{
  int v3 = a3;
  if ((a3 & 3) == 0)
  {
    *(void *)a1->__opaque = -1985229329LL;
    int v5 = *(_opaque_pthread_t **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160);
    if (MEMORY[0xFFFFFC100]) {
      _dispatch_trace_item_pop_internal(v5, &a1->__sig);
    }
    _dispatch_introspection_queue_item_dequeue((dispatch_queue_s *)v5, (dispatch_object_s *)a1);
  }

  int v95 = v3;
  if ((v3 & 2) != 0)
  {
    int v6 = v3 & 0x40000;
    uint64_t v7 = 0x40020000000001LL;
    goto LABEL_7;
  }

  unint64_t v70 = ((unint64_t)*(unsigned __int16 *)&a1->__opaque[64] << 41) - 0x20000000000LL;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v72 = *(void *)(StatusReg + 24) & 0xFFFFFFFCLL;
  int v6 = v3 & 0x40000;
  if ((v3 & 0x40000) != 0) {
    uint64_t v73 = 0x4000000000LL;
  }
  else {
    uint64_t v73 = 1LL;
  }
  if ((v3 & 0x40001) == 0x40000) {
    unint64_t v74 = 0xFFE00000FFFFFFFCLL;
  }
  else {
    unint64_t v74 = 0xFFE00040FFFFFFFCLL;
  }
  unsigned int v75 = *(_DWORD *)(StatusReg + 200);
  unsigned int v76 = (v75 >> 8) & 0xF;
  unsigned int v77 = (unsigned __int16)v75 >> 12;
  unsigned int v78 = HIWORD(v75) & 0xF;
  if (v76 <= v77) {
    unsigned int v76 = v77;
  }
  if (v76 > v78) {
    unsigned int v78 = v76;
  }
  v79 = (unint64_t *)&a1->__opaque[40];
  while (1)
  {
    while (1)
    {
      unint64_t v80 = __ldaxr(v79);
      unint64_t v81 = v80 & v74;
      if ((v80 & v74) != 0) {
        break;
      }
      if ((v80 & 0x1000000000LL) == 0 || (uint64_t v82 = HIDWORD(v80) & 7, v82 <= v78))
      {
        uint64_t v83 = (v80 >> 40) & 1;
        if (!((v70 + v80) >> 53)) {
          LODWORD(v83) = 1;
        }
        if ((_DWORD)v83) {
          uint64_t v84 = 0x60000000000000LL;
        }
        else {
          uint64_t v84 = 0x20000000000000LL;
        }
        unint64_t v85 = v72 | v80 & 0x7700000001LL | v84;
        goto LABEL_189;
      }

      __clrex();
      unint64_t v104 = v70;
      _pthread_workqueue_override_start_direct( *(unsigned int *)(StatusReg + 24),  (256LL << ((BYTE4(v80) & 7u) - 1)) | 0xFF);
      unint64_t v70 = v104;
      unsigned int v86 = *(_DWORD *)(StatusReg + 200);
      unsigned int v78 = v82;
      if ((HIWORD(v86) & 0xF) < v82)
      {
        *(void *)(StatusReg + 200) = v86 & 0xFFF0FFFF | ((_DWORD)v82 << 16);
        unsigned int v78 = v82;
      }
    }

    if ((v95 & 1) != 0) {
      break;
    }
    unint64_t v85 = v80 ^ v73;
LABEL_189:
    if (!__stxr(v85, v79)) {
      goto LABEL_200;
    }
  }

  __clrex();
  unint64_t v85 = v80;
LABEL_200:
  int v3 = v95;
  uint64_t v89 = 0x60000000000000LL;
  if ((v95 & 1) == 0) {
    uint64_t v89 = v73 | 0x60000000000000LL;
  }
  unint64_t v90 = v85 & v89;
  uint64_t v91 = v80 & 0x3FFE0000000000LL;
  uint64_t v7 = v90 - v91;
  if (v81) {
    BOOL v92 = 1;
  }
  else {
    BOOL v92 = v90 == v91;
  }
  if (v92)
  {
    uint64_t v98 = 0LL;
    v62 = 0LL;
    if ((v95 & 1) == 0) {
      goto LABEL_163;
    }
    goto LABEL_166;
  }

LABEL_41:
      a1->__opaque[84] = v21;
      uint64_t v30 = &a1->__sig + v20;
      uint64_t v31 = v30[13];
      if (!v31) {
        uint64_t v31 = _dispatch_wait_for_enqueuer((unint64_t *)v30 + 13, v23);
      }
      while (2)
      {
        if ((*(void *)v31 & 0xFFFFFFFFFFFFF001LL) != 1)
        {
          uint64_t v32 = *(void *)(v31 + 16);
          unint64_t v33 = (char *)a1 + 8 * (int)v24 - 8;
          *((void *)v33 + 13) = v32;
          if (!v32)
          {
            uint64_t v52 = (unint64_t *)(v31 + 16);
            v53 = (uint64_t *)(v33 + 104);
            uint64_t v54 = (uint64_t)(v33 + 152);
            v55 = (unint64_t *)(v33 + 152);
            while (1)
            {
              unint64_t v56 = __ldxr(v55);
              if (v31 != (v56 & 0xFFFFFFFFFFFFFFF8LL)) {
                break;
              }
              if (!__stlxr(0LL, v55)) {
                goto LABEL_45;
              }
            }

            __clrex();
            uint64_t v32 = *v52;
            if (!*v52) {
              uint64_t v32 = _dispatch_wait_for_enqueuer(v52, v54);
            }
            uint64_t *v53 = v32;
          }

        uint64_t v21 = *(void (***)(uint64_t))(StatusReg + 192);
        if (v21) {
          (*v21)(a1);
        }
        uint64_t v22 = *(void *)v10;
        if (*(void *)v10 >= 0x1000uLL)
        {
          if (*(void *)(v22 + 40) == 1LL) {
            (*(void (**)(uint64_t, void, void))(v22 + 48))(v10, 0LL, v55);
          }
          else {
            (*(void (**)(uint64_t, uint64_t, void))(v22 + 64))(v10, a2, v56);
          }
          goto LABEL_99;
        }

        if ((a3 & 0x1000000) != 0)
        {
          v59 = objc_autoreleasePoolPush();
          uint64_t v22 = *(void *)v10;
        }

        else
        {
          v59 = 0LL;
        }

        uint64_t v23 = *(unsigned int **)(v10 + 24);
        if ((v22 & 4) != 0) {
          *(void *)(v10 + 24) = -1LL;
        }
        if (v23 != (unsigned int *)-1LL)
        {
          unsigned int v24 = v23;
          if (v23) {
            unsigned int v24 = (unsigned int *)v23[8];
          }
          if (MEMORY[0xFFFFFC100]) {
            kdebug_trace(771817480LL, v24, v10, 0LL, 0LL);
          }
        }

        unint64_t v25 = *(void *)(v10 + 8);
        dispatch_group_t group = (dispatch_group_t)v9;
        if (v25 == -1)
        {
          unsigned int v28 = 0LL;
        }

        else
        {
          unint64_t v26 = *(void *)(StatusReg + 200);
          else {
            unint64_t v27 = 0LL;
          }
          unsigned int v28 = v27 & 0xFFFFFFFFFFFFFF00LL | *(void *)(StatusReg + 200);
          if ((v25 & 0xFFFFFF) != 0)
          {
            if ((v25 & 0xFFFFFFuLL) >= (v27 & 0xFFFFFF00)
              && ((v26 & 0x44000000) != 0 || (*(void *)(v10 + 8) & 0x10000000LL) != 0))
            {
              unsigned int v28 = v25 & 0xFFFFFF;
            }
          }

          else if ((unsigned __int16)v26 >> 12)
          {
            unsigned int v28 = (256LL << (((unsigned __int16)v26 >> 12) - 1)) | 0xFF;
          }
        }

        uint64_t v30 = v28 & 0xFFFFFFFF02FFFFFFLL;
        uint64_t v31 = *(void *)(StatusReg + 32);
        if ((v31 & 0x1000000) != 0)
        {
          if (v30) {
            goto LABEL_143;
          }
          uint64_t v30 = v31 & 0xFFFFFFFFFEFFFFFFLL;
LABEL_128:
          if (v30) {
            goto LABEL_143;
          }
          goto LABEL_73;
        }

        if (v30 != (v31 & 0xFFFFFFFF77FFFFFFLL)) {
          goto LABEL_128;
        }
LABEL_73:
        if (*(unsigned int **)(StatusReg + 224) == v23)
        {
          if ((v22 & 4) != 0 && v23) {
            os_release(v23);
          }
LABEL_78:
          if ((v22 & 0x200) == 0) {
            goto LABEL_79;
          }
          goto LABEL_82;
        }

        uint64_t v30 = 0LL;
LABEL_143:
        _dispatch_set_priority_and_voucher_slow(v30, v23, v22 & 4 | 2);
        if ((v22 & 0x200) == 0)
        {
LABEL_79:
          if (MEMORY[0xFFFFFC100]) {
            _dispatch_trace_item_pop_internal((_opaque_pthread_t *)a1, (uint64_t *)v10);
          }
          _dispatch_introspection_queue_item_dequeue((dispatch_queue_s *)a1, (dispatch_object_s *)v10);
        }

    int v5 = (int)v7;
    qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
    qword_61258 = (int)v7;
    __break(1u);
    goto LABEL_42;
  }

  if ((v1 & 0x100) != 0 || !*(void *)(v2 + 48) || !*(void *)(v2 + 56)) {
    goto LABEL_41;
  }
  if ((v5 & 0x2000000000LL) == 0) {
    return result;
  }
  if ((v5 & 1) == 0)
  {
    uint64_t v10 = 0;
    unsigned int v11 = 1LL;
    unsigned int v12 = 7;
    int v13 = 1;
    goto LABEL_30;
  }

  if ((v5 & 0xFFFFFFFC) != 0)
  {
    int v3 = *(unsigned int *)(*(void *)(result + 24) + 84LL);
    if ((v3 & 0x8000000) != 0)
    {
LABEL_44:
      qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Waking up a kq with cooperative thread request is not supported";
      qword_61258 = v3;
      __break(1u);
      return result;
    }

    unsigned int v14 = (v3 >> 8) & 0xF;
    if (v14 <= (BYTE4(v5) & 7u)) {
      unsigned int v14 = BYTE4(v5) & 7;
    }
    if (v14 <= 1) {
      LOBYTE(v14) = 1;
    }
    unsigned int v16 = v5 & 2;
    unsigned int v15 = v16 == 0;
    unsigned int v11 = v16 | 0x3700000001LL;
    uint64_t v10 = v3 & 0x80000000 | (256LL << (v14 - 1)) | 0xFF;
    if (v15) {
      int v13 = 273;
    }
    else {
      int v13 = 401;
    }
    unsigned int v12 = 5;
LABEL_30:
    *(void *)uint64_t v2 = result;
    *(_WORD *)(v2 + 8) = -17;
    *(_WORD *)(v2 + 10) = v12;
    *(_DWORD *)(v2 + 12) = v10;
    *(_DWORD *)(v2 + 24) = v13;
    *(void *)(v2 + 28) = 0LL;
    *(void *)(v2 + 36) = 0LL;
    *(_DWORD *)(v2 + 44) = 0;
    *(void *)(v2 + 48) = result + 56;
    *(void *)(v2 + 56) = v11;
    return _dispatch_kq_deferred_update();
  }

  *(_BYTE *)(v3 + 45) |= 1u;
  if (*(_DWORD *)(result + 8) != 0x7FFFFFFF)
  {
    int v5 = result + 8;
    do
    {
      int v17 = __ldxr((unsigned int *)v5);
      BOOL v1 = (v17 + 1);
      LODWORD(v7) = __stxr(v1, (unsigned int *)v5);
    }

    while ((_DWORD)v7);
    if (v17 <= 0)
    {
      qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
LABEL_36:
      qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
      goto LABEL_37;
    }
  }

LABEL_45:
          if (*(void *)(v18 + 40)) {
            _dispatch_return_to_kernel();
          }
          unsigned int v34 = *(void (***)(_opaque_pthread_t *))(v18 + 192);
          if (v34) {
            (*v34)(a1);
          }
          uint64_t v35 = *(void *)v31;
          if (*(void *)v31 >= 0x1000uLL)
          {
            if (*(void *)(v35 + 40) == 1LL) {
              (*(void (**)(uint64_t, void, void))(v35 + 48))(v31, 0LL, v99);
            }
            else {
              (*(void (**)(uint64_t, uint64_t, void))(v35 + 64))(v31, a2, v100);
            }
LABEL_103:
            if (v34) {
              v34[1](a1);
            }
            if (!v32 || (unsigned int v24 = a1->__opaque[84], v31 = v32, (*(_DWORD *)&a1->__opaque[44] & 7u) > v24))
            {
              uint64_t v20 = 6LL;
              int v17 = v97;
              goto LABEL_33;
            }

            continue;
          }

          if ((v103 & 0x1000000) != 0)
          {
            unsigned int v36 = objc_autoreleasePoolPush();
            uint64_t v35 = *(void *)v31;
          }

          else
          {
            unsigned int v36 = 0LL;
          }

          unsigned int v37 = *(unsigned int **)(v31 + 24);
          if ((v35 & 4) != 0) {
            *(void *)(v31 + 24) = -1LL;
          }
          if (v37 != (unsigned int *)-1LL)
          {
            unint64_t v38 = v37;
            if (v37) {
              unint64_t v38 = (unsigned int *)v37[8];
            }
            if (MEMORY[0xFFFFFC100]) {
              kdebug_trace(771817480LL, v38, v31, 0LL, 0LL);
            }
          }

          uint64_t v39 = *(void *)(v31 + 8);
          if (v39 == -1)
          {
            unint64_t v42 = 0LL;
          }

          else
          {
            uint64_t v40 = *(void *)(v18 + 200);
            else {
              uint64_t v41 = 0LL;
            }
            unint64_t v42 = v41 & 0xFFFFFFFFFFFFFF00LL | *(void *)(v18 + 200);
            if ((v39 & 0xFFFFFF) != 0)
            {
              if ((v39 & 0xFFFFFFuLL) >= (v41 & 0xFFFFFF00)
                && ((v40 & 0x44000000) != 0 || (*(void *)(v31 + 8) & 0x10000000LL) != 0))
              {
                unint64_t v42 = v39 & 0xFFFFFF;
              }
            }

            else if ((unsigned __int16)v40 >> 12)
            {
              unint64_t v42 = (256LL << (((unsigned __int16)v40 >> 12) - 1)) | 0xFF;
            }
          }

          unint64_t v44 = v42 & 0xFFFFFFFF02FFFFFFLL;
          uint64_t v45 = *(void *)(v18 + 32);
          if ((v45 & 0x1000000) != 0)
          {
            if (!v44)
            {
              unint64_t v44 = v45 & 0xFFFFFFFFFEFFFFFFLL;
              goto LABEL_114;
            }

    _dispatch_kevent_workloop_override_self(v5, a2, (char)a3);
    return;
  }

  if ((*(_BYTE *)(v5 + 45) & 1) == 0)
  {
    if ((a3 & 0x80000000) != 0)
    {
      unsigned int v14 = (unsigned int *)((char *)a1 + 8);
      unsigned int v15 = *((_DWORD *)a1 + 2);
      if ((a3 & 1) != 0)
      {
        if (v15 != 0x7FFFFFFF)
        {
          do
          {
            unint64_t v25 = __ldxr(v14);
            unint64_t v26 = __OFSUB__(v25, 1);
            unint64_t v27 = v25 - 1;
          }

          while (__stlxr(v27, v14));
          if ((v27 < 0) ^ v26 | (v27 == 0))
          {
LABEL_54:
            qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
            __break(1u);
LABEL_55:
            qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unsupported wlh configuration";
            qword_61258 = (uint64_t)a1;
            __break(1u);
            goto LABEL_56;
          }
        }
      }

      else if (v15 != 0x7FFFFFFF)
      {
        do
          unsigned int v16 = __ldxr(v14);
        while (__stxr(v16 + 1, v14));
        if (v16 <= 0)
        {
          qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
          __break(1u);
          goto LABEL_32;
        }
      }
    }

    *(_BYTE *)(v5 + 45) |= 3u;
    *(void *)int v5 = *((void *)a1 + 3);
    *(void *)(v5 + 8) = a1;
    *(_DWORD *)(v5 + 16) = BYTE4(a2) & 7;
    return;
  }

  if ((a3 & 1) != 0 && *((_DWORD *)a1 + 2) != 0x7FFFFFFF)
  {
    uint64_t v21 = (unsigned int *)((char *)a1 + 8);
    do
    {
      uint64_t v22 = __ldxr(v21);
      uint64_t v23 = __OFSUB__(v22, 2);
      unsigned int v24 = v22 - 2;
    }

    while (__stlxr(v24, v21));
    if ((v24 < 0) ^ v23 | (v24 == 0))
    {
      qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
      __break(1u);
      goto LABEL_45;
    }
  }

LABEL_129:
            _dispatch_set_priority_and_voucher_slow(v44, v37, v35 & 4 | 2);
            if ((v35 & 0x200) == 0)
            {
LABEL_84:
              if (MEMORY[0xFFFFFC100]) {
                _dispatch_trace_item_pop_internal(a1, (uint64_t *)v31);
              }
              _dispatch_introspection_queue_item_dequeue((dispatch_queue_s *)a1, (dispatch_object_s *)v31);
            }
          }

          else
          {
            if (v44 == (v45 & 0xFFFFFFFF77FFFFFFLL)) {
              goto LABEL_78;
            }
LABEL_114:
            if (v44) {
              goto LABEL_129;
            }
LABEL_78:
            if (v37 != (unsigned int *)-1LL)
            {
              if (*(unsigned int **)(v18 + 224) != v37)
              {
                unint64_t v44 = 0LL;
                goto LABEL_129;
              }

              if ((v35 & 4) != 0 && v37) {
                os_release(v37);
              }
            }

            if ((v35 & 0x200) == 0) {
              goto LABEL_84;
            }
          }

          if ((v35 & 4) != 0)
          {
            uint64_t v47 = *(void *)(v18 + 176);
            if (v47) {
              int v48 = *(_DWORD *)(v47 + 8) + 1;
            }
            else {
              int v48 = 1;
            }
            uint64_t v46 = v31;
            if (v48 <= _dispatch_continuation_cache_limit)
            {
              uint64_t v46 = 0LL;
              *(void *)(v31 + 16) = v47;
              *(_DWORD *)(v31 + 8) = v48;
              *(void *)(v18 + 176) = v31;
            }
          }

          else
          {
            uint64_t v46 = 0LL;
          }

          if ((v35 & 8) != 0)
          {
            uint64_t v57 = *(void *)(**(void **)(v31 + 48) + 40LL);
            if (v57 != 514) {
              _dispatch_queue_override_invoke_cold_1(v57);
            }
            dispatch_group_t group = *(dispatch_group_s **)(v31 + 48);
            v59 = *(void (**)(void (**)(void)))(v31 + 32);
            v58 = *(void **)(v31 + 40);
            v60 = (void (__cdecl *)(void *))v59;
            if (v58)
            {
              v60 = *(void (__cdecl **)(void *))(v31 + 32);
              if (v59 == _dispatch_call_block_and_release) {
                v60 = (void (__cdecl *)(void *))v58[2];
              }
            }

            _dispatch_introspection_callout_entry(*(void **)(v31 + 40), v60);
            _dispatch_client_callout((uint64_t)v58, (uint64_t (*)(void))v59);
            _dispatch_introspection_callout_return(v58, v60);
            if (MEMORY[0xFFFFFC100]) {
              kdebug_trace(772079660LL, v31, 0LL, 0LL, 0LL);
            }
            _dispatch_introspection_queue_item_complete((dispatch_object_s *)v31);
            dispatch_group_leave(group);
            if (!v46) {
              goto LABEL_101;
            }
          }

          else
          {
            uint64_t v49 = *(void (**)(void (**)(void)))(v31 + 32);
            unint64_t v50 = *(void **)(v31 + 40);
            __int128 v51 = (void (__cdecl *)(void *))v49;
            if (v50)
            {
              __int128 v51 = *(void (__cdecl **)(void *))(v31 + 32);
              if (v49 == _dispatch_call_block_and_release) {
                __int128 v51 = (void (__cdecl *)(void *))v50[2];
              }
            }

            _dispatch_introspection_callout_entry(*(void **)(v31 + 40), v51);
            _dispatch_client_callout((uint64_t)v50, (uint64_t (*)(void))v49);
            _dispatch_introspection_callout_return(v50, v51);
            if (MEMORY[0xFFFFFC100]) {
              kdebug_trace(772079660LL, v31, 0LL, 0LL, 0LL);
            }
            _dispatch_introspection_queue_item_complete((dispatch_object_s *)v31);
            if (!v46)
            {
LABEL_101:
              if (!v36) {
                goto LABEL_103;
              }
              goto LABEL_102;
            }
          }

          _dispatch_continuation_free_to_cache_limit(v46);
          if (!v36) {
            goto LABEL_103;
          }
LABEL_102:
          objc_autoreleasePoolPop(v36);
          goto LABEL_103;
        }

        break;
      }

      *(_DWORD *)(a2 + 16) = v24;
      *(void *)(a2 + 8) = v31;
      a1->__opaque[84] = 0;
      *(_OWORD *)v96 = v105;
      *(void *)(v18 + 192) = 0LL;
      v62 = *(__objc2_class ***)&a1->__opaque[8];
      int v17 = v97;
LABEL_140:
      if (v17 == 2)
      {
        __int128 v105 = *(_OWORD *)v96;
        *(void *)(v18 + 160) = a1;
        *(void *)(v18 + 168) = &v105;
        _dispatch_last_resort_autorelease_pool_pop(a2);
        *(_OWORD *)v96 = v105;
      }

      v63 = (unint64_t *)&a1->__opaque[40];
      while (2)
      {
        unint64_t v64 = __ldxr(v63);
        unint64_t v65 = (v64 - v98) & 0xFFFFFFF700000001LL;
        if (v64 >> 55)
        {
LABEL_147:
          unsigned int v66 = __stlxr(v65, v101);
          v63 = (unint64_t *)&a1->__opaque[40];
          if (!v66)
          {
            if ((~v64 & 0x1800000000LL) != 0
              || (uint64_t v68 = HIDWORD(v64) & 7, v69 = *(_DWORD *)(v18 + 200), (HIWORD(v69) & 0xF) >= v68))
            {
              uint64_t v98 = 0LL;
              v62 = 0LL;
            }

            else
            {
              uint64_t v98 = 0LL;
              v62 = 0LL;
              *(void *)(v18 + 200) = v69 & 0xFFF0FFFF | ((_DWORD)v68 << 16);
            }

            goto LABEL_160;
          }

          continue;
        }

        break;
      }

      if ((v64 & 0x8000000000LL) == 0)
      {
        if (v62) {
          unint64_t v65 = (v64 - v98) & 0xFFFFFF7700000001LL | 0x8000000000LL;
        }
        else {
          unint64_t v65 = (v64 - v98) & 0xFFFFFFF000000001LL;
        }
        goto LABEL_147;
      }

      __clrex();
      do
        unint64_t v67 = __ldaxr(v101);
      while (__stxr(v67 ^ 0x8000000000LL, v101));
      if ((v95 & 1) != 0) {
        continue;
      }
      break;
    }

    v62 = *v96;
    break;
  }

LABEL_160:
  if ((v103 & 0x40000) == 0) {
    *(void *)(v18 + 200) = *(void *)(v18 + 200) & 0xF0000LL | v94;
  }
  if ((v95 & 1) == 0)
  {
LABEL_163:
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace(772079660LL, a1, 0LL, 0LL, 0LL);
    }
    _dispatch_introspection_queue_item_complete((dispatch_object_s *)a1);
  }

LABEL_166:
  if (v62) {
    _dispatch_queue_invoke_finish((dispatch_object_s *)a1, a2, v62, v98);
  }
  else {
    _os_object_release_internal_n(a1, (_BYTE *)&dword_0 + 2);
  }
}

void _dispatch_workloop_barrier_complete(char *a1, uint64_t a2, int a3)
{
  int v5 = (unsigned int *)(a1 + 8);
  int v6 = (unint64_t *)(a1 + 56);
  unint64_t v7 = a2 << 32;
  int v8 = a1 + 192;
LABEL_2:
  uint64_t v9 = 0LL;
  uint64_t v10 = v8;
  uint64_t v11 = 6LL;
  do
  {
    if (*v10)
    {
      unsigned int v12 = (void *)*(v10 - 6);
      if (!v12) {
        unsigned int v12 = (void *)_dispatch_wait_for_enqueuer(v10 - 6, (uint64_t)v10);
      }
      if (*v12 <= 0xFFFuLL && (*v12 & 0x81LL) != 0)
      {
        _dispatch_workloop_drain_barrier_waiter((uint64_t)a1, (uint64_t)v12, v11, a3, 0LL);
        return;
      }

      uint64_t v9 = 1LL;
    }

    --v10;
    --v11;
  }

  while (v11);
  if (v9 && (a3 & 1) == 0)
  {
    if (*v5 != 0x7FFFFFFF)
    {
      do
        int v23 = __ldxr(v5);
      while (__stxr(v23 + 2, v5));
      if (v23 <= 0) {
        dispatch_set_target_queue_cold_2();
      }
    }

    a3 |= 1u;
  }

  while (1)
  {
    unint64_t v14 = __ldxr(v6);
    if ((~v14 & 0x2000000002LL) != 0 || (v14 & 0x800000001LL) == 0) {
      break;
    }
LABEL_34:
    _dispatch_event_loop_ensure_ownership((uint64_t)a1);
    do
      unint64_t v22 = __ldxr(v6);
    while (__stxr(v22 & 0xFFFFFFF7FFFFFFFDLL, v6));
    __clrex();
  }

  while (1)
  {
    unint64_t v16 = v14 & 0xFFFFFFF8FFFFFFFFLL | v7;
    if (v14 & 0x1000000000LL | v7 & 0x1000000000LL) {
      v16 |= 0x800000000uLL;
    }
    unint64_t v17 = (v14 & 0x700000000LL) < v7 ? v16 : v14;
    unint64_t v18 = (v17 & 0xFFFFFFF700000001LL) - 0x40020000000000LL;
    if (v9)
    {
      unint64_t v19 = v18 | 1;
    }

    else
    {
      if ((v14 & 0x8000000000LL) != 0)
      {
        __clrex();
        do
          unint64_t v24 = __ldaxr(v6);
        while (__stxr(v24 ^ 0x8000000000LL, v6));
        goto LABEL_2;
      }

      unint64_t v20 = v18 & 0xFFFFFFF000000001LL;
      unint64_t v21 = v18 & 0xFFFFFFF000000000LL;
      unint64_t v19 = (v14 & 0x2000000000LL) != 0 ? v21 : v20;
    }

    if (!__stlxr(v19, v6)) {
      break;
    }
    unint64_t v14 = __ldxr(v6);
    if ((~v14 & 0x2000000002LL) == 0 && (v14 & 0x800000001LL) != 0) {
      goto LABEL_34;
    }
  }

  if ((v19 & 0x4000000001LL) != 0) {
    _dispatch_introspection_runtime_event();
  }
  if ((v14 & 0x2000000000LL) != 0)
  {
    if ((v14 & 3) != 2 || (v19 & 1) != 0)
    {
      _dispatch_event_loop_end_ownership((uint64_t)a1, v14, v19, a3);
      return;
    }

    goto LABEL_57;
  }

  if ((~v14 & 0x1800000000LL) == 0)
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v26 = HIDWORD(v14) & 7;
    unsigned int v27 = *(_DWORD *)(StatusReg + 200);
  }

  if (!v9) {
    goto LABEL_57;
  }
  if (((v19 ^ v14) & 1) != 0)
  {
    if ((v19 & 0x2000000000LL) != 0)
    {
      _dispatch_introspection_runtime_event();
      unsigned int v28 = (dispatch_object_s *)a1;
      uint64_t v29 = v19;
      uint64_t v30 = (dispatch_queue_s *)(&dword_0 + 1);
LABEL_54:
      _dispatch_event_loop_poke(v28, v29, v30);
      return;
    }

    uint64_t v31 = (dispatch_queue_s *)*((void *)a1 + 3);
    if (MEMORY[0xFFFFFC100]) {
      _dispatch_trace_item_push_internal(*((_opaque_pthread_t **)a1 + 3), (uint64_t *)a1);
    }
    _dispatch_introspection_queue_item_enqueue(v31, (dispatch_object_s *)a1);
    (*(void (**)(dispatch_queue_s *, char *, unint64_t))(*(void *)v31 + 88LL))( v31,  a1,  HIDWORD(v19) & 7);
    return;
  }

  if ((v19 & 0xFF80004000000000LL) != 0 || (v19 & 0xFFFFFFFD) == 0)
  {
LABEL_57:
    if ((a3 & 1) != 0) {
      _os_object_release_internal_n(a1, (_BYTE *)&dword_0 + 2);
    }
    return;
  }

  if ((v19 & 0x2000000000LL) != 0)
  {
    _dispatch_introspection_runtime_event();
    uint64_t v30 = (dispatch_queue_s *)(a3 | 0x80000000);
    unsigned int v28 = (dispatch_object_s *)a1;
    uint64_t v29 = v19;
    goto LABEL_54;
  }

  _dispatch_queue_wakeup_with_override_slow((uint64_t)a1, v19, a3);
}

void _dispatch_workloop_push(uint64_t a1, void *a2, unsigned int a3)
{
  if (*a2 > 0xFFFuLL || (*a2 & 0x81LL) == 0)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 84);
    unsigned int v5 = (v4 >> 8) & 0xF;
    int v6 = (unsigned __int16)v4 >> 12;
    if (a3) {
      int v6 = a3;
    }
    if (v5 > a3) {
      int v6 = v5;
    }
    a2[2] = 0LL;
    uint64_t v7 = v6 - 1;
    int v8 = (unint64_t *)(a1 + 8 * v7 + 152);
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    *(void *)(StatusReg + 976) = v8;
    do
      unint64_t v10 = __ldxr(v8);
    while (__stlxr((unint64_t)a2, v8));
    if (v10)
    {
      *(void *)(v10 + 16) = a2;
      *(void *)(StatusReg + 976) = 0LL;
    }

    else
    {
      uint64_t v11 = (unsigned int *)(a1 + 8);
      do
        unsigned int v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      *(void *)(a1 + 8 * v7 + 104) = a2;
      *(void *)(StatusReg + 976) = 0LL;
      _dispatch_workloop_wakeup((id)a1);
    }
  }

  else
  {
    _dispatch_workloop_push_waiter((dispatch_object_s *)a1, (unint64_t)a2, a3);
  }

void _dispatch_workloop_push_waiter(dispatch_object_s *a1, unint64_t a2, unsigned int a3)
{
  int v3 = a1;
  unsigned int v4 = (__clz(__rbit32((*(_DWORD *)(a2 + 8) >> 8) & 0x3FFF)) + 1) & 0xF;
  if (((*(_DWORD *)(a2 + 8) >> 8) & 0x3FFF) == 0) {
    unsigned int v4 = 0;
  }
  if (v4 <= a3) {
    unsigned int v4 = a3;
  }
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 4LL;
  }
  int v6 = (unint64_t *)(a2 + 16);
  *(void *)(a2 + 16) = 0LL;
  uint64_t v7 = (int)v5 - 1;
  int v8 = (unint64_t *)((char *)a1 + 8 * v7 + 152);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(void *)(StatusReg + 976) = v8;
  do
    unint64_t v10 = __ldxr(v8);
  while (__stlxr(a2, v8));
  if (v10)
  {
    *(void *)(v10 + 16) = a2;
    *(void *)(StatusReg + 976) = 0LL;
    return;
  }

  uint64_t v11 = (char *)a1 + 8 * v7;
  *((void *)v11 + 13) = a2;
  *(void *)(StatusReg + 976) = 0LL;
  uint64_t v12 = *(void *)a2;
  if ((*(void *)a2 & 0x80) != 0
    && ((unint64_t v13 = *((void *)a1 + 3), v13 >= (unint64_t)&_dispatch_root_queues)
      ? (BOOL v14 = v13 >= (unint64_t)&_dispatch_queue_serial_numbers)
      : (BOOL v14 = 1),
        v14))
  {
    *(void *)(a2 + 56) = a1;
    *(void *)a2 = v12 & 0xFFFFFFFFFFFFFF7FLL;
    unsigned int v15 = (unsigned int *)((char *)a1 + 8);
    do
      unsigned int v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    _dispatch_workloop_wakeup(a1);
  }

  else
  {
    unint64_t v17 = (unint64_t *)(v11 + 104);
    unint64_t v18 = (unint64_t *)((char *)a1 + 56);
    unint64_t v19 = v5 << 32;
    uint64_t v20 = *(void *)(StatusReg + 24) & 0xFFFFFFFCLL | 0x60000000000002LL;
    do
    {
      unint64_t v21 = __ldxr(v18);
      unint64_t v22 = v21 & 0xFFFFFFF8FFFFFFFFLL | v19;
      if (v21 & 0x1000000000LL | v19 & 0x1000000000LL) {
        v22 |= 0x800000000uLL;
      }
      if ((v21 & 0x700000000LL) < v19) {
        unint64_t v23 = v22;
      }
      else {
        unint64_t v23 = v21;
      }
      uint64_t v24 = v23 | 0x8000000000LL;
      unint64_t v25 = v20 | v23 & 0x7700000001LL;
      if ((v21 & 0x40FFFFFFFDLL) != 0) {
        unint64_t v25 = v24;
      }
    }

    while (__stlxr(v25, v18));
    if ((v25 & 0x2000000000LL) != 0 && *(void *)(a2 + 48) != -4LL) {
      *(_BYTE *)(a2 + 106) = *(_BYTE *)(a2 + 106) & 0xFB | (4 * (*(_DWORD *)(a2 + 100) == *(_DWORD *)(StatusReg + 24)));
    }
    if (((v25 ^ v21) & 0x40000000000000LL) != 0)
    {
      if ((*(_BYTE *)(a2 + 106) & 4) == 0) {
        goto LABEL_48;
      }
      uint64_t v27 = *v17;
      if (!*v17)
      {
        unsigned int v37 = v3;
        unint64_t v38 = (unint64_t *)(a2 + 16);
        uint64_t v39 = v8;
        uint64_t v40 = v17;
        unint64_t v33 = a2;
        uint64_t v27 = _dispatch_wait_for_enqueuer(v17, (uint64_t)v8);
        int v8 = v39;
        unint64_t v17 = v40;
        a2 = v33;
        int v3 = v37;
        int v6 = v38;
      }

      if (v27 == a2)
      {
        unsigned int v28 = v17;
        uint64_t v29 = v8;
        uint64_t v30 = v6;
        *(_BYTE *)(a2 + 106) |= 8u;
        if ((*(_BYTE *)a2 & 0x80) != 0) {
          *(void *)(a2 + 56) = v3;
        }
        unint64_t v31 = *v6;
        *unint64_t v17 = *v30;
        if (!v31)
        {
          while (1)
          {
            unint64_t v32 = __ldxr(v29);
            if ((v32 & 0xFFFFFFFFFFFFFFF8LL) != a2) {
              break;
            }
            if (!__stlxr(0LL, v29)) {
              return;
            }
          }

          __clrex();
          uint64_t v36 = *v30;
          if (!*v30) {
            uint64_t v36 = _dispatch_wait_for_enqueuer(v30, (uint64_t)v29);
          }
          *unsigned int v28 = v36;
        }
      }

      else
      {
LABEL_48:
        _dispatch_workloop_barrier_complete(v3);
      }
    }

    else if (((v25 ^ v21) & 0x700000000LL) != 0 && (v25 & 0xFF80004000000000LL) == 0)
    {
      if ((v25 & 1) != 0)
      {
        if ((v25 & 0x2000000000LL) != 0)
        {
          uint64_t v35 = v25;
          _dispatch_introspection_runtime_event();
          _dispatch_event_loop_poke(a1, v35, (dispatch_queue_s *)0x80000000LL);
          return;
        }
      }

      else if ((v25 & 0x2000000000LL) != 0 || (v25 & 0xFFFFFFFC) == 0)
      {
        return;
      }

      _dispatch_queue_wakeup_with_override_slow(a1, v25, 0LL, 0x40FFFFFFFDLL);
    }
  }

uint64_t dispatch_thread_get_current_override_qos_floor()
{
  unsigned int v0 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 200);
  unsigned int v1 = (v0 >> 8) & 0xF;
  unsigned int v2 = (unsigned __int16)v0 >> 12;
  unsigned int v3 = HIWORD(v0) & 0xF;
  if (v1 <= v2) {
    unsigned int v1 = v2;
  }
  if (v1 > v3) {
    unsigned int v3 = v1;
  }
  unsigned int v4 = v3 - 1;
  uint64_t result = 0LL;
  uint64_t v6 = 0x2100000001LL;
  switch(v4)
  {
    case 0u:
      return 0x500000001LL;
    case 1u:
      return 0x900000001LL;
    case 2u:
      return 0x1100000001LL;
    case 3u:
      return 0x1500000001LL;
    case 4u:
      return 0x1900000001LL;
    case 5u:
      return v6;
    case 0xEu:
      return result;
    default:
      return 1LL;
  }

uint64_t dispatch_thread_override_self(int a1)
{
  HIDWORD(v2) = a1 - 5;
  LODWORD(v2) = a1 - 5;
  unsigned int v1 = v2 >> 2;
  int v3 = 0;
  unsigned int v4 = 6;
  switch(v1)
  {
    case 0u:
      int v3 = 0;
      unsigned int v4 = 1;
      break;
    case 1u:
      int v3 = 0;
      unsigned int v4 = 2;
      break;
    case 3u:
    case 4u:
    case 5u:
      int v3 = 0;
      unsigned int v4 = v1;
      break;
    case 7u:
      break;
    default:
      unsigned int v4 = 0;
      int v3 = 1;
      break;
  }

  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (v3) {
    uint64_t v6 = 255LL;
  }
  else {
    uint64_t v6 = (256LL << (v4 - 1)) | 0xFF;
  }
  _pthread_workqueue_override_start_direct(*(unsigned int *)(StatusReg + 24), v6);
  unsigned int v7 = *(_DWORD *)(StatusReg + 200);
  if ((HIWORD(v7) & 0xF) < v4) {
    *(void *)(StatusReg + 200) = v7 & 0xFFF0FFFF | (v4 << 16);
  }
  return 0LL;
}

uint64_t dispatch_lock_override_start_with_debounce(uint64_t a1, uint64_t a2, int a3)
{
  HIDWORD(v5) = a3 - 5;
  LODWORD(v5) = a3 - 5;
  unsigned int v4 = v5 >> 2;
  if (v4 <= 7 && ((0xBBu >> v4) & 1) != 0) {
    uint64_t v6 = (256LL << qword_3FFA8[v4]) | 0xFF;
  }
  else {
    uint64_t v6 = 255LL;
  }
  return _pthread_workqueue_override_start_direct_check_owner(a2, v6, a1);
}

uint64_t dispatch_lock_override_end(int a1)
{
  HIDWORD(v2) = a1 - 5;
  LODWORD(v2) = a1 - 5;
  unsigned int v1 = v2 >> 2;
  if (v1 > 7) {
    unsigned int v3 = 0;
  }
  else {
    unsigned int v3 = dword_3FFE8[v1];
  }
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned int v5 = *(_DWORD *)(StatusReg + 200);
  if ((HIWORD(v5) & 0xF) < v3) {
    *(void *)(StatusReg + 200) = v5 & 0xFFF0FFFF | (v3 << 16);
  }
  return 0LL;
}

void _dispatch_queue_wakeup(_DWORD *a1, uint64_t a2, uint64_t a3, __objc2_class **a4)
{
  unsigned int v4 = (_opaque_pthread_t *)a4;
  if (a4 && (a3 & 1) == 0)
  {
    if (a1[2] != 0x7FFFFFFF)
    {
      uint64_t v6 = a1 + 2;
      do
        int v7 = __ldxr(v6);
      while (__stxr(v7 + 2, v6));
      if (v7 <= 0)
      {
        qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
        __break(1u);
        return;
      }
    }

    a3 = a3 | 1;
  }

  if ((a3 & 4) != 0)
  {
    unsigned int v34 = a1[21];
    unsigned int v35 = (unsigned __int16)v34 >> 12;
    if ((_DWORD)a2) {
      unsigned int v35 = a2;
    }
    unsigned int v36 = (v34 >> 8) & 0xF;
    if (v35 <= v36) {
      uint64_t v37 = v36;
    }
    else {
      uint64_t v37 = v35;
    }
    _dispatch_lane_class_barrier_complete((dispatch_object_s *)a1, v37, a3, a4, 0x40020000000000LL);
    return;
  }

  if (!a4)
  {
    if ((_DWORD)a2)
    {
      unint64_t v23 = (unint64_t *)(a1 + 14);
      unint64_t v24 = a2 << 32;
      do
      {
        unint64_t v25 = __ldxr(v23);
        if ((v25 & 0x40FFFFFFFDLL) != 0)
        {
          unint64_t v26 = v25 & 0xFFFFFFF8FFFFFFFFLL | v24;
          if (v25 & 0x1000000000LL | v24 & 0x1000000000LL) {
            v26 |= 0x800000000uLL;
          }
          unint64_t v27 = (v25 & 0x700000000LL) < v24 ? v26 : v25;
          BOOL v28 = (v25 & 0xFF80002000000000LL) == 0x2000000000LL && (unint64_t)((v25 & 0x4000000000LL) == 0);
          unint64_t v21 = v27 | v28;
          if ((v27 | v28) != v25) {
            continue;
          }
        }

LABEL_69:
        __clrex();
        goto LABEL_70;
      }

      while (__stxr(v21, v23));
      unint64_t v22 = v21 ^ v25;
      uint64_t v8 = 1LL;
      if ((a3 & 1) != 0 || (v22 & 1) == 0) {
        goto LABEL_62;
      }
      if (a1[2] == 0x7FFFFFFF) {
        goto LABEL_61;
      }
      uint64_t v29 = a1 + 2;
      do
        int v30 = __ldxr(v29);
      while (__stxr(v30 + 2, v29));
      if (v30 > 0)
      {
LABEL_61:
        LODWORD(a3) = a3 | 1;
        uint64_t v8 = 1LL;
LABEL_62:
        unsigned int v4 = (_opaque_pthread_t *)(&dword_0 + 1);
        goto LABEL_63;
      }

      qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
LABEL_88:
      _dispatch_trace_item_push_internal(v4, (uint64_t *)a1);
LABEL_84:
      _dispatch_introspection_queue_item_enqueue((dispatch_queue_s *)v4, (dispatch_object_s *)a1);
      (*(void (**)(_opaque_pthread_t *, _DWORD *, unint64_t))(v4->__sig + 88))( v4,  a1,  HIDWORD(v21) & 7);
      return;
    }

    goto LABEL_70;
  }

  uint64_t v8 = 0x4000000000LL;
  if (a4 != &_dispatch_mgr_q) {
    uint64_t v8 = 1LL;
  }
  unsigned int v9 = a1[21];
  LODWORD(v10) = (unsigned __int16)v9 >> 12;
  if ((_DWORD)a2) {
    LODWORD(v10) = a2;
  }
  unsigned int v11 = (v9 >> 8) & 0xF;
  else {
    uint64_t v10 = v10;
  }
  uint64_t v12 = (unint64_t *)(a1 + 14);
  unint64_t v13 = v10 << 32;
  do
  {
    unint64_t v14 = __ldxr(v12);
    unint64_t v15 = v14 & 0xFFFFFFF8FFFFFFFFLL | v13;
    if (v14 & 0x1000000000LL | v13 & 0x1000000000LL) {
      v15 |= 0x800000000uLL;
    }
    if ((v14 & 0x700000000LL) < v13) {
      unint64_t v16 = v15;
    }
    else {
      unint64_t v16 = v14;
    }
    if ((v14 & 0x180000000000000LL) == 0x80000000000000LL) {
      unint64_t v17 = v16 & 0xFF7FFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v16;
    }
    if ((a3 & 0x20) != 0) {
      unint64_t v16 = v17;
    }
    unint64_t v18 = (unint64_t)((v14 & 0xFFFFFFFC) == 0) << 38;
    if (a4 != &_dispatch_mgr_q) {
      unint64_t v18 = 1LL;
    }
    unint64_t v19 = v16 | v18;
    if ((v14 & 0x4000000001LL) == 0 && v16 >> 55 == 0) {
      unint64_t v21 = v19;
    }
    else {
      unint64_t v21 = v16;
    }
    if ((a3 & 2) != 0)
    {
      v21 |= 0x8000000000uLL;
    }

    else if (v21 == v14)
    {
      goto LABEL_69;
    }
  }

  while (__stlxr(v21, v12));
  unint64_t v22 = v14 ^ v21;
LABEL_63:
  if ((v22 & v8) != 0)
  {
    if ((v21 & 0x2000000000LL) != 0)
    {
      _dispatch_introspection_runtime_event();
      unint64_t v31 = (dispatch_object_s *)a1;
      uint64_t v32 = v21;
      unint64_t v33 = (dispatch_queue_s *)(&dword_0 + 1);
LABEL_68:
      _dispatch_event_loop_poke(v31, v32, v33);
      return;
    }

    if (!MEMORY[0xFFFFFC100]) {
      goto LABEL_84;
    }
    goto LABEL_88;
  }

  if ((v22 & 0x700000000LL) == 0 || (int v38 = a3, (v21 & 0xFF80004000000000LL) != 0) || (v21 & 0xFFFFFFFD) == 0)
  {
LABEL_70:
    if ((a3 & 1) != 0) {
      _os_object_release_internal_n(a1, (_BYTE *)&dword_0 + 2);
    }
    return;
  }

  if ((v21 & 0x2000000000LL) != 0)
  {
    _dispatch_introspection_runtime_event();
    unint64_t v33 = (dispatch_queue_s *)(v38 | 0x80000000);
    unint64_t v31 = (dispatch_object_s *)a1;
    uint64_t v32 = v21;
    goto LABEL_68;
  }

  _dispatch_queue_wakeup_with_override_slow((uint64_t)a1, v21, a3);
}

      qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
      __break(1u);
      return;
    }

    if ((v17 & 0x1000000000LL) != 0)
    {
      (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)a1 + 80LL))(a1, a3, v11);
      return;
    }

    if ((_DWORD)v11 && *(void *)(v5 + 80) == a2)
    {
      if ((v11 & 1) != 0)
      {
LABEL_36:
        if (a1[2] == 0x7FFFFFFF) {
          goto LABEL_40;
        }
        unint64_t v22 = a1 + 2;
        do
        {
          unint64_t v23 = __ldxr(v22);
          unint64_t v24 = __OFSUB__(v23, 2);
          unint64_t v25 = v23 - 2;
        }

        while (__stlxr(v25, v22));
        if (!((v25 < 0) ^ v24 | (v25 == 0))) {
          goto LABEL_40;
        }
        goto LABEL_68;
      }
    }

    else
    {
      a4 &= ~8u;
      if ((v11 & 1) != 0) {
        goto LABEL_36;
      }
    }

void _dispatch_lane_class_barrier_complete( dispatch_object_s *a1, uint64_t a2, uint64_t a3, __objc2_class **a4, uint64_t a5)
{
  if (a4 == &_dispatch_mgr_q)
  {
    char v10 = 0;
    uint64_t v11 = 0x4000000000LL;
    a4 = &_dispatch_mgr_q;
  }

  else if (a4)
  {
    char v10 = 0;
    uint64_t v11 = 1LL;
  }

  else
  {
    uint64_t v11 = 0LL;
    char v10 = 1;
  }

  uint64_t v12 = (unint64_t *)((char *)a1 + 56);
  unint64_t v13 = a2 << 32;
  do
  {
    while (1)
    {
      unint64_t v14 = __ldxr(v12);
      if ((~v14 & 0x2000000002LL) != 0 || (v14 & 0x800000001LL) == 0) {
        break;
      }
      uint64_t v23 = v11;
      uint64_t v24 = a3;
      _dispatch_event_loop_ensure_ownership((uint64_t)a1);
      do
        unint64_t v25 = __ldxr(v12);
      while (__stxr(v25 & 0xFFFFFFF7FFFFFFFDLL, v12));
      __clrex();
      a3 = v24;
      uint64_t v11 = v23;
    }

    unint64_t v16 = v14 - a5;
    unint64_t v17 = (v14 - a5) & 0xFFFFFFF8FFFFFFFFLL | v13;
    if ((v14 - a5) & 0x1000000000LL | v13 & 0x1000000000LL) {
      v17 |= 0x800000000uLL;
    }
    if (((v14 - a5) & 0x700000000LL) < v13) {
      unint64_t v18 = v17;
    }
    else {
      unint64_t v18 = v14 - a5;
    }
    unint64_t v19 = v18 & 0xFFFFFFF700000001LL;
    if (v14 >> 55)
    {
      unint64_t v22 = v18 & 0xFFFFFFF700000000LL;
      if ((v14 & 0x2000000000LL) != 0) {
        unint64_t v20 = v22;
      }
      else {
        unint64_t v20 = v19;
      }
    }

    else if ((v10 & 1) != 0)
    {
      if ((v14 & 0x8000000000LL) != 0)
      {
        __clrex();
        do
          unint64_t v34 = __ldaxr(v12);
        while (__stxr(v34 ^ 0x8000000000LL, v12));
        (*(void (**)(dispatch_object_s *, uint64_t, void))(*(void *)a1 + 80LL))( a1,  a2,  a3 | 4);
        return;
      }

      unint64_t v20 = v18 & 0xFFFFFFF000000001LL;
    }

    else
    {
      if ((v14 & 0x4000000001LL) != 0) {
        uint64_t v21 = 0LL;
      }
      else {
        uint64_t v21 = v11;
      }
      unint64_t v20 = v19 | v21;
    }
  }

  while (__stlxr(v20, v12));
  if ((v20 & 0x4000000001LL) != 0)
  {
    int v26 = a3;
    uint64_t v27 = v11;
    _dispatch_introspection_runtime_event();
    uint64_t v11 = v27;
    LODWORD(a3) = v26;
  }

  if ((v16 & 0x2000000000LL) != 0)
  {
    if ((v16 & 2) == 0 || ((v20 | v16) & 1) != 0)
    {
      _dispatch_event_loop_end_ownership((uint64_t)a1, v16, v20, a3);
      return;
    }

    goto LABEL_47;
  }

  if ((~v16 & 0x1800000000LL) == 0)
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v29 = HIDWORD(v16) & 7;
    unsigned int v30 = *(_DWORD *)(StatusReg + 200);
  }

  if (!a4) {
    goto LABEL_47;
  }
  if (((v20 ^ v16) & v11) != 0)
  {
    if ((v20 & 0x2000000000LL) != 0)
    {
      _dispatch_introspection_runtime_event();
      unint64_t v31 = a1;
      uint64_t v32 = v20;
      unint64_t v33 = (dispatch_queue_s *)(&dword_0 + 1);
LABEL_44:
      _dispatch_event_loop_poke(v31, v32, v33);
      return;
    }

    if (MEMORY[0xFFFFFC100]) {
      _dispatch_trace_item_push_internal((_opaque_pthread_t *)a4, (uint64_t *)a1);
    }
    _dispatch_introspection_queue_item_enqueue((dispatch_queue_s *)a4, a1);
    ((void (*)(__objc2_class **, dispatch_object_s *, unint64_t))(*a4)[2].superclass)( a4,  a1,  HIDWORD(v20) & 7);
    return;
  }

  if ((v20 & 0xFF80004000000000LL) != 0 || (v20 & 0xFFFFFFFD) == 0)
  {
LABEL_47:
    if ((a3 & 1) != 0) {
      _os_object_release_internal_n(a1, (_BYTE *)&dword_0 + 2);
    }
    return;
  }

  int v35 = a3;
  if ((v20 & 0x2000000000LL) != 0)
  {
    _dispatch_introspection_runtime_event();
    unint64_t v33 = (dispatch_queue_s *)(v35 | 0x80000000);
    unint64_t v31 = a1;
    uint64_t v32 = v20;
    goto LABEL_44;
  }

  _dispatch_queue_wakeup_with_override_slow((uint64_t)a1, v20, a3);
}

void _dispatch_lane_wakeup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 4) != 0) {
    _dispatch_lane_barrier_complete((unsigned __int16 *)a1, a2, a3);
  }
  else {
    _dispatch_queue_wakeup((_DWORD *)a1, a2, a3, (__objc2_class **)(*(void *)(a1 + 48) != 0LL));
  }
}

void _dispatch_lane_barrier_complete(unsigned __int16 *a1, uint64_t a2, uint64_t a3)
{
  if (!*((void *)a1 + 6) || *((void *)a1 + 7) >> 55)
  {
    uint64_t v6 = 0LL;
LABEL_32:
    _dispatch_lane_class_barrier_complete( (dispatch_object_s *)a1,  a2,  a3,  v6,  ((unint64_t)a1[40] << 41) + 0x40000000000000LL);
    return;
  }

  uint64_t v7 = *((void *)a1 + 13);
  if (!v7) {
    uint64_t v7 = _dispatch_wait_for_enqueuer((unint64_t *)a1 + 13, (uint64_t)(a1 + 24));
  }
  unsigned int v8 = a1[40];
  unint64_t v9 = *(void *)v7;
  if (v8 == 1)
  {
    if (v9 <= 0xFFF && (*(void *)v7 & 0x81LL) != 0) {
      goto LABEL_21;
    }
    goto LABEL_25;
  }

  if (v9 >= 0x1000)
  {
    if ((*(void *)(v9 + 40) & 0xF0LL) == 0x10)
    {
      if ((*(_DWORD *)(v7 + 80) & 0x80000) != 0 || v8 <= 1 || (*(_DWORD *)(v7 + 80) & 0x80000) != 0) {
        goto LABEL_25;
      }
    }

    else if (v8 <= 1)
    {
      goto LABEL_25;
    }

LABEL_25:
  if ((a3 & 1) != 0)
  {
LABEL_31:
    uint64_t v6 = (__objc2_class **)(&dword_0 + 1);
    goto LABEL_32;
  }

  if (*((_DWORD *)a1 + 2) == 0x7FFFFFFF) {
    goto LABEL_30;
  }
  uint64_t v11 = (unsigned int *)(a1 + 4);
  do
    int v12 = __ldxr(v11);
  while (__stxr(v12 + 2, v11));
  if (v12 > 0)
  {
LABEL_30:
    a3 = a3 | 1;
    goto LABEL_31;
  }

  qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
  __break(1u);
}

    unint64_t v20 = (int)v20;
    goto LABEL_26;
  }

  LODWORD(v20) = 0;
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Invalid wlh";
  qword_61258 = 0LL;
  __break(1u);
LABEL_19:
  if ((_DWORD)v20 != 2) {
    goto LABEL_25;
  }
  if ((~(_DWORD)v8 & 0x20002) != 0)
  {
    while (1)
    {
      unint64_t v20 = 2LL;
LABEL_26:
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unexpected error from kevent";
      qword_61258 = v20;
      __break(1u);
    }
  }

  return 0LL;
}

void _dispatch_lane_push(uint64_t a1, void *a2, unsigned int a3)
{
  if (*a2 <= 0xFFFuLL && (*a2 & 0x81LL) != 0)
  {
    _dispatch_lane_push_waiter((dispatch_object_s *)a1, (unint64_t)a2, a3);
    return;
  }

  unsigned int v4 = (unsigned int *)(a1 + 8);
  if (((*(_DWORD *)(a1 + 84) >> 8) & 0xFu) >= a3) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = a3;
  }
  a2[2] = 0LL;
  uint64_t v6 = (unint64_t *)(a1 + 48);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(void *)(StatusReg + 976) = a1 + 48;
  do
    unint64_t v8 = __ldxr(v6);
  while (__stlxr((unint64_t)a2, v6));
  if (v8)
  {
    if ((*(_DWORD *)(a1 + 60) & 7) != 0 && (*(_DWORD *)(a1 + 60) & 7u) >= v5)
    {
      *(void *)(v8 + 16) = a2;
      *(void *)(StatusReg + 976) = 0LL;
      return;
    }

    do
      unsigned int v13 = __ldxr(v4);
    while (__stxr(v13 + 2, v4));
    uint64_t v11 = (void *)(v8 + 16);
    uint64_t v12 = 1LL;
  }

  else
  {
    do
      unsigned int v10 = __ldxr(v4);
    while (__stxr(v10 + 2, v4));
    uint64_t v11 = (void *)(a1 + 104);
    uint64_t v12 = 3LL;
  }

  void *v11 = a2;
  *(void *)(StatusReg + 976) = 0LL;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80LL))(a1, v5, v12);
}

void _dispatch_lane_push_waiter(dispatch_object_s *a1, unint64_t a2, unsigned int a3)
{
  if (*(void *)(a2 + 48) == -4LL) {
    uint64_t v4 = a3;
  }
  else {
    uint64_t v4 = 0LL;
  }
  uint64_t v5 = (unint64_t *)(a2 + 16);
  *(void *)(a2 + 16) = 0LL;
  uint64_t v6 = (unint64_t *)((char *)a1 + 48);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(void *)(StatusReg + 976) = (char *)a1 + 48;
  do
    unint64_t v8 = __ldxr(v6);
  while (__stlxr(a2, v6));
  if (v8)
  {
    *(void *)(v8 + 16) = a2;
    *(void *)(StatusReg + 976) = 0LL;
    if (!(_DWORD)v4) {
      return;
    }
    unint64_t v22 = (unint64_t *)((char *)a1 + 56);
    unint64_t v23 = v4 << 32;
    do
    {
      unint64_t v24 = __ldxr(v22);
      if ((v24 & 0x700000000LL) < v23)
      {
        unint64_t v25 = v24 & 0x1000000000LL | v23 & 0x1000000000LL
            ? v24 & 0xFFFFFFF8FFFFFFFFLL | v23 | 0x800000000LL
            : v24 & 0xFFFFFFF8FFFFFFFFLL | v23;
        if (v24 != v25) {
          continue;
        }
      }

      __clrex();
      return;
    }

    while (__stxr(v25, v22));
    if ((v25 & 0xFF80004000000000LL) != 0) {
      return;
    }
    if ((v25 & 1) == 0)
    {
      if ((v25 & 0x2000000000LL) == 0 && (v25 & 0xFFFFFFFC) != 0) {
        goto LABEL_52;
      }
      return;
    }

    if ((v25 & 0x2000000000LL) == 0)
    {
LABEL_52:
      unint64_t v20 = a1;
      unint64_t v21 = v25;
      goto LABEL_53;
    }

LABEL_58:
    _dispatch_introspection_runtime_event();
    _dispatch_event_loop_poke(a1, v25, (dispatch_queue_s *)0x80000000LL);
    return;
  }

  *((void *)a1 + 13) = a2;
  *(void *)(StatusReg + 976) = 0LL;
  int v9 = *((_DWORD *)a1 + 20);
  if ((v9 & 0x40000) != 0)
  {
    int v9 = *((_DWORD *)a1 + 20);
    if ((v9 & 0x1000000) == 0)
    {
      uint64_t v10 = *(void *)a2;
LABEL_67:
      *(void *)a2 = v10 & 0xFFFFFFFFFFFFFF7FLL;
      *(void *)(a2 + 56) = a1;
      (*(void (**)(dispatch_object_s *, uint64_t, uint64_t))(*(void *)a1 + 80LL))(a1, v4, 2LL);
      return;
    }
  }

  uint64_t v10 = *(void *)a2;
  if ((*(void *)a2 & 0x80) != 0)
  {
    int v9 = *((_DWORD *)a1 + 20);
    if ((v9 & 0x1000000) != 0) {
      goto LABEL_67;
    }
    if ((*((void *)a1 + 7) & 0x3000000000LL) != 0)
    {
      unint64_t v11 = *((void *)a1 + 3);
    }
  }

  unint64_t v12 = ((unint64_t)(unsigned __int16)v9 << 41) - 0x20000000000LL;
  unsigned int v13 = (unint64_t *)((char *)a1 + 56);
  unint64_t v14 = v4 << 32;
  uint64_t v15 = *(void *)(StatusReg + 24) & 0xFFFFFFFCLL | 0x60000000000002LL;
  do
  {
    unint64_t v16 = __ldxr(v13);
    unint64_t v17 = v16 & 0xFFFFFFF8FFFFFFFFLL | v14;
    if (v16 & 0x1000000000LL | v14 & 0x1000000000LL) {
      v17 |= 0x800000000uLL;
    }
    if ((v16 & 0x700000000LL) >= v14) {
      unint64_t v17 = v16;
    }
    unint64_t v18 = v17 | 0x8000000000LL;
    if ((v16 & 0xFFE00000FFFFFFFCLL) == 0
      && ((v16 & 0x2000000000LL) == 0 || (v16 & 0x4000000001LL) == 0)
      && ((v16 & 0x10000000000LL) != 0 || !((v12 + v17) >> 53)))
    {
      unint64_t v18 = v15 | v17 & 0x7700000001LL;
    }
  }

  while (__stlxr(v18, v13));
  if ((v16 & 0x2000000000LL) != 0 && *(void *)(a2 + 48) != -4LL) {
    *(_BYTE *)(a2 + 106) = *(_BYTE *)(a2 + 106) & 0xFB | (4 * (*(_DWORD *)(a2 + 100) == *(_DWORD *)(StatusReg + 24)));
  }
  if (((v18 ^ v16) & 0x40000000000000LL) == 0)
  {
    if (((v18 ^ v16) & 0x700000000LL) == 0 || (v18 & 0xFF80004000000000LL) != 0) {
      return;
    }
    if ((v18 & 1) != 0)
    {
      if ((v18 & 0x2000000000LL) != 0)
      {
        unint64_t v25 = v18;
        goto LABEL_58;
      }
    }

    else if ((v18 & 0x2000000000LL) != 0 || (v18 & 0xFFFFFFFC) == 0)
    {
      return;
    }

    unint64_t v20 = a1;
    unint64_t v21 = v18;
LABEL_53:
    _dispatch_queue_wakeup_with_override_slow((uint64_t)v20, v21, 0);
    return;
  }

  if ((*(_BYTE *)(a2 + 106) & 4) != 0 && *((void *)a1 + 13) == a2)
  {
    *(_BYTE *)(a2 + 106) |= 8u;
    if ((*(_BYTE *)a2 & 0x80) != 0) {
      *(void *)(a2 + 56) = a1;
    }
    unint64_t v26 = *v5;
    *((void *)a1 + 13) = *v5;
    if (!v26)
    {
      while (1)
      {
        unint64_t v27 = __ldxr(v6);
        if ((v27 & 0xFFFFFFFFFFFFFFF8LL) != a2) {
          break;
        }
        if (!__stlxr(0LL, v6)) {
          return;
        }
      }

      __clrex();
      uint64_t v28 = *v5;
      if (!*v5) {
        uint64_t v28 = _dispatch_wait_for_enqueuer(v5, (uint64_t)a1 + 48);
      }
      *((void *)a1 + 13) = v28;
    }
  }

  else
  {
    _dispatch_lane_barrier_complete((unsigned __int16 *)a1, v4, 0LL);
  }

      if (!(_DWORD)v31) {
        break;
      }
      if (!(v97 & 1 | ((v35 & 0x40) == 0)) || (v35 & 0x80) != 0)
      {
        uint64_t v52 = v31;
        v55 = v35 & 0x3F;
        if (v55 >= 0x3E) {
          v55 = 62;
        }
        unint64_t v56 = (v55 + 1) | v35 & 0xC0;
        uint64_t v57 = v36;
        v58 = ((unint64_t)v36 << 32) | ((unint64_t)v35 << 40) | (v101 << 48) | v37;
        v59 = (v56 << 40) | ((unint64_t)v38 << 32) | (v101 << 48) | v37;
        while (1)
        {
          uint64_t v54 = __ldxr(v32);
          if (v54 != v58) {
            break;
          }
          if (!__stxr(v59, v32))
          {
            v60 = 1;
            goto LABEL_78;
          }
        }

        v60 = 0;
        __clrex();
LABEL_78:
        if ((v60 & 1) != 0)
        {
LABEL_117:
          if (MEMORY[0xFFFFFC100]) {
            kdebug_trace(772145156LL, v8 | (v57 << 8), v96 & 1, v58, v59);
          }
          return 0LL;
        }

void _dispatch_lane_concurrent_push(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((*(_BYTE *)(a1 + 87) & 8) == 0
    || *(void *)a2 < 0x1000uLL
    || *(void *)(*(void *)a2 + 40LL) == 1LL
    || *(void *)(*(void *)a2 + 40LL) == 19LL && (_dispatch_source_is_timer(a2) & 1) != 0)
  {
    if (*(void *)(a1 + 48))
    {
LABEL_7:
      _dispatch_lane_push(a1, (void *)a2, a3);
      return;
    }

    uint64_t v6 = *(void *)a2;
    if (*(void *)a2 <= 0xFFFuLL)
    {
      if ((v6 & 0x83) != 0) {
        goto LABEL_7;
      }
    }

    else if ((*(void *)(v6 + 40) & 0xF0LL) == 0x10 && (*(_DWORD *)(a2 + 80) & 0x80000) != 0)
    {
      goto LABEL_7;
    }

    uint64_t v7 = (unint64_t *)(a1 + 56);
    while (1)
    {
      unint64_t v8 = __ldaxr(v7);
      if ((v8 & 0xFFE0018000000000LL) != 0) {
        break;
      }
      if (!__stxr(v8 + 0x20000000000LL, v7))
      {
        _dispatch_continuation_redirect_push((_DWORD *)a1, (void *)a2);
        return;
      }
    }

    __clrex();
    goto LABEL_7;
  }

  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot target the cooperative root queue - not implemented";
  qword_61258 = a2;
  __break(1u);
}

_DWORD *_dispatch_continuation_redirect_push(_DWORD *result, void *a2)
{
  unsigned int v3 = result;
  if (*a2 >= 0x1000uLL && *(void *)(*a2 + 40LL) == 256LL)
  {
    if (!a2[5]) {
      a2[5] = (result[20] << 8) & 0x3000000;
    }
    return (_DWORD *)(*(uint64_t (**)(void))(**((void **)v3 + 3) + 88LL))(*((void *)v3 + 3));
  }

  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v5 = *(void **)(StatusReg + 176);
  if (v5)
  {
    *(void *)(StatusReg + 176) = v5[2];
  }

  else
  {
    uint64_t result = _dispatch_continuation_alloc_from_heap();
    uint64_t v5 = result;
  }

  a2[2] = 0LL;
  *uint64_t v5 = &unk_586E8;
  v5[4] = 0LL;
  v5[5] = (v3[20] << 8) & 0x3000000;
  v5[6] = v3;
  v5[7] = a2;
  v5[3] = -1LL;
  v5[1] = -1LL;
  if (v3[2] == 0x7FFFFFFF) {
    return (_DWORD *)(*(uint64_t (**)(void))(**((void **)v3 + 3) + 88LL))(*((void *)v3 + 3));
  }
  uint64_t v6 = v3 + 2;
  do
    int v7 = __ldxr(v6);
  while (__stxr(v7 + 2, v6));
  if (v7 > 0) {
    return (_DWORD *)(*(uint64_t (**)(void))(**((void **)v3 + 3) + 88LL))(*((void *)v3 + 3));
  }
  qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
  __break(1u);
  return result;
}

uint64_t dispatch_async_swift_job(uint64_t a1, uint64_t a2)
{
  if (*(void *)(*(void *)a2 + 40LL) != 1LL) {
    dispatch_async_swift_job_cold_1(*(void *)(*(void *)a2 + 40LL));
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88LL))(a1);
}

void _dispatch_channel_dispose(uint64_t *a1, _BYTE *a2)
{
  a1[11] = 0LL;
  _dispatch_lane_class_dispose(a1, a2);
}

uint64_t _dispatch_channel_xref_dispose(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 88) + 24LL)) {
    BOOL v1 = (*(_DWORD *)(a1 + 80) & 0x10000000) == 0;
  }
  else {
    BOOL v1 = 0;
  }
  if (v1) {
    _dispatch_channel_xref_dispose_cold_1(a1);
  }
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 80LL))(a1, 0LL, 2LL);
}

void _dispatch_channel_invoke(_opaque_pthread_t *a1, void *a2, int a3)
{
  int v3 = a3;
  if ((a3 & 3) == 0)
  {
    *(void *)a1->__opaque = -1985229329LL;
    uint64_t v5 = *(_opaque_pthread_t **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160);
    if (MEMORY[0xFFFFFC100]) {
      _dispatch_trace_item_pop_internal(v5, &a1->__sig);
    }
    _dispatch_introspection_queue_item_dequeue((dispatch_queue_s *)v5, (dispatch_object_s *)a1);
  }

  if ((v3 & 2) != 0)
  {
    uint64_t v85 = 0x40020000000001LL;
    if ((v3 & 0x40000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_7;
  }

  unint64_t v6 = ((unint64_t)*(unsigned __int16 *)&a1->__opaque[64] << 41) - 0x20000000000LL;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v8 = *(void *)(StatusReg + 24) & 0xFFFFFFFCLL;
  int v9 = v3 & 0x40000;
  unint64_t v10 = 0xFFE00000FFFFFFFCLL;
  if ((v3 & 0x40000) != 0)
  {
    uint64_t v11 = 0x4000000000LL;
  }

  else
  {
    unint64_t v10 = 0xFFE00040FFFFFFFCLL;
    uint64_t v11 = 1LL;
  }

  int v12 = v3;
  if ((v3 & 1) != 0) {
    unint64_t v13 = 0xFFE00040FFFFFFFCLL;
  }
  else {
    unint64_t v13 = v10;
  }
  unsigned int v14 = *(_DWORD *)(StatusReg + 200);
  unsigned int v15 = (v14 >> 8) & 0xF;
  unsigned int v16 = (unsigned __int16)v14 >> 12;
  unsigned int v17 = HIWORD(v14) & 0xF;
  if (v15 <= v16) {
    unsigned int v15 = v16;
  }
  if (v15 > v17) {
    unsigned int v17 = v15;
  }
  unint64_t v18 = (unint64_t *)&a1->__opaque[40];
  while (1)
  {
    while (1)
    {
      unint64_t v19 = __ldaxr(v18);
      if ((v19 & v13) != 0) {
        break;
      }
      if ((v19 & 0x1000000000LL) == 0 || (uint64_t v20 = HIDWORD(v19) & 7, v20 <= v17))
      {
        uint64_t v21 = (v19 >> 40) & 1;
        if (!((v6 + v19) >> 53)) {
          LODWORD(v21) = 1;
        }
        if ((_DWORD)v21) {
          uint64_t v22 = 0x60000000000000LL;
        }
        else {
          uint64_t v22 = 0x20000000000000LL;
        }
        unint64_t v23 = v8 | v19 & 0x7700000001LL | v22;
        goto LABEL_28;
      }

      __clrex();
      unint64_t v91 = v6;
      _pthread_workqueue_override_start_direct( *(unsigned int *)(StatusReg + 24),  (256LL << ((BYTE4(v19) & 7u) - 1)) | 0xFF);
      unint64_t v6 = v91;
      unsigned int v24 = *(_DWORD *)(StatusReg + 200);
      unsigned int v17 = v20;
      if ((HIWORD(v24) & 0xF) < v20)
      {
        *(void *)(StatusReg + 200) = v24 & 0xFFF0FFFF | ((_DWORD)v20 << 16);
        unsigned int v17 = v20;
      }
    }

    if ((v12 & 1) != 0) {
      break;
    }
    unint64_t v23 = v19 ^ v11;
LABEL_28:
    if (!__stxr(v23, v18)) {
      goto LABEL_35;
    }
  }

  __clrex();
  unint64_t v23 = v19;
LABEL_35:
  int v3 = v12;
  uint64_t v25 = 0x60000000000000LL;
  if ((v12 & 1) == 0) {
    uint64_t v25 = v11 | 0x60000000000000LL;
  }
  uint64_t v26 = (v23 & v25) - (v19 & 0x3FFE0000000000LL);
  if ((v19 & v13) != 0 || v26 == 0)
  {
    uint64_t v28 = 0LL;
    uint64_t v29 = 0LL;
  }

  else
  {
    uint64_t v85 = v26;
    if (!v9)
    {
LABEL_44:
      int v30 = *(_DWORD *)&a1->__opaque[68];
      unint64_t v31 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      uint64_t v32 = *(void *)(v31 + 200);
      if ((_DWORD)v32)
      {
        unsigned int v33 = v30 & 0xFFF;
        if ((v30 & 0xFFF) != 0)
        {
          else {
            int v34 = 1140912128;
          }
          unsigned int v35 = v32 & 0x880F0000 | v33 | v34 & v30;
        }

        else
        {
          unsigned int v36 = v32 | 0x40000000;
          if ((v32 & 0xFFF) == 0) {
            unsigned int v36 = *(void *)(v31 + 200);
          }
          unsigned int v37 = (unsigned __int16)v30 >> 12;
          unsigned int v35 = v36 & 0xFFFF0FFF | v30 & 0x400F000;
          if (v37 <= ((v36 >> 8) & 0xF)) {
            unsigned int v35 = v36;
          }
        }
      }

      else
      {
        unsigned int v35 = v30 & 0xFFF0FFFF;
      }

      *(void *)(v31 + 200) = v35;
      uint64_t v83 = v32 & 0xFFF0FFFF;
      goto LABEL_57;
    }

LABEL_70:
        id v97 = v46;
        uint64_t v47 = *(void (***)(_opaque_pthread_t *))(v42 + 192);
        if (v47) {
          (*v47)(a1);
        }
        uint64_t v48 = *v44;
        if ((unint64_t)*v44 >= 0x1000)
        {
          if (*(void *)(v48 + 40) == 1LL) {
            (*(void (**)(uint64_t *, void, void))(v48 + 48))(v44, 0LL, v88);
          }
          else {
            (*(void (**)(uint64_t *, void *, void))(v48 + 64))(v44, a2, v89);
          }
LABEL_135:
          if (v47) {
            v47[1](a1);
          }
LABEL_138:
          uint64_t v29 = (__objc2_class **)v96;
          if (v96) {
            goto LABEL_169;
          }
          continue;
        }

        break;
      }

      if ((v92 & 0x1000000) != 0)
      {
        uint64_t v49 = objc_autoreleasePoolPush();
        uint64_t v48 = *v44;
      }

      else
      {
        uint64_t v49 = 0LL;
      }

      __int128 v51 = (unsigned int *)v44[3];
      if ((v48 & 4) != 0) {
        v44[3] = -1LL;
      }
      if (v51 != (unsigned int *)-1LL)
      {
        uint64_t v52 = v51;
        if (v51) {
          uint64_t v52 = (unsigned int *)v51[8];
        }
        if (MEMORY[0xFFFFFC100]) {
          kdebug_trace(771817480LL, v52, v44, 0LL, 0LL);
        }
      }

      uint64_t v53 = v44[1];
      if (v53 == -1)
      {
        unint64_t v56 = 0LL;
      }

      else
      {
        uint64_t v54 = *(void *)(v42 + 200);
        else {
          uint64_t v55 = 0LL;
        }
        unint64_t v56 = v55 & 0xFFFFFFFFFFFFFF00LL | *(void *)(v42 + 200);
        if ((v53 & 0xFFFFFF) != 0)
        {
          if ((v53 & 0xFFFFFFuLL) >= (v55 & 0xFFFFFF00)
            && ((v54 & 0x44000000) != 0 || (v44[1] & 0x10000000) != 0))
          {
            unint64_t v56 = v53 & 0xFFFFFF;
          }
        }

        else if ((unsigned __int16)v54 >> 12)
        {
          unint64_t v56 = (256LL << (((unsigned __int16)v54 >> 12) - 1)) | 0xFF;
        }
      }

      unint64_t v58 = v56 & 0xFFFFFFFF02FFFFFFLL;
      uint64_t v59 = *(void *)(v42 + 32);
      if ((v59 & 0x1000000) != 0)
      {
        if (!v58)
        {
          unint64_t v58 = v59 & 0xFFFFFFFFFEFFFFFFLL;
          goto LABEL_149;
        }

LABEL_163:
        _dispatch_set_priority_and_voucher_slow(v58, v51, v48 & 4 | 2);
        if ((v48 & 0x200) == 0)
        {
LABEL_109:
          if (MEMORY[0xFFFFFC100]) {
            _dispatch_trace_item_pop_internal(a1, v44);
          }
          _dispatch_introspection_queue_item_dequeue((dispatch_queue_s *)a1, (dispatch_object_s *)v44);
        }
      }

      else
      {
        if (v58 == (v59 & 0xFFFFFFFF77FFFFFFLL)) {
          goto LABEL_103;
        }
LABEL_149:
        if (v58) {
          goto LABEL_163;
        }
LABEL_103:
        if (v51 != (unsigned int *)-1LL)
        {
          if (*(unsigned int **)(v42 + 224) != v51)
          {
            unint64_t v58 = 0LL;
            goto LABEL_163;
          }

          if ((v48 & 4) != 0 && v51) {
            os_release(v51);
          }
        }

        if ((v48 & 0x200) == 0) {
          goto LABEL_109;
        }
      }

      if ((v48 & 4) != 0)
      {
        uint64_t v61 = *(void *)(v42 + 176);
        if (v61) {
          int v62 = *(_DWORD *)(v61 + 8) + 1;
        }
        else {
          int v62 = 1;
        }
        uint64_t v60 = (uint64_t)v44;
        if (v62 <= _dispatch_continuation_cache_limit)
        {
          uint64_t v60 = 0LL;
          v44[2] = v61;
          *((_DWORD *)v44 + 2) = v62;
          *(void *)(v42 + 176) = v44;
        }
      }

      else
      {
        uint64_t v60 = 0LL;
      }

      if ((v48 & 8) != 0)
      {
        uint64_t v68 = *(void *)(*(void *)v44[6] + 40LL);
        if (v68 != 514) {
          _dispatch_queue_override_invoke_cold_1(v68);
        }
        dispatch_group_t group = (dispatch_group_s *)v44[6];
        unint64_t v70 = (void (*)(void (**)(void)))v44[4];
        unsigned int v69 = (void *)v44[5];
        v71 = (void (__cdecl *)(void *))v70;
        if (v69)
        {
          v71 = (void (__cdecl *)(void *))v44[4];
          if (v70 == _dispatch_call_block_and_release) {
            v71 = (void (__cdecl *)(void *))v69[2];
          }
        }

        _dispatch_introspection_callout_entry((void *)v44[5], v71);
        _dispatch_client_callout((uint64_t)v69, (uint64_t (*)(void))v70);
        _dispatch_introspection_callout_return(v69, v71);
        if (MEMORY[0xFFFFFC100]) {
          kdebug_trace(772079660LL, v44, 0LL, 0LL, 0LL);
        }
        _dispatch_introspection_queue_item_complete((dispatch_object_s *)v44);
        dispatch_group_leave(group);
        if (!v60) {
          goto LABEL_133;
        }
      }

      else
      {
        v63 = (void (*)(void (**)(void)))v44[4];
        unint64_t v64 = (void *)v44[5];
        unint64_t v65 = (void (__cdecl *)(void *))v63;
        if (v64)
        {
          unint64_t v65 = (void (__cdecl *)(void *))v44[4];
          if (v63 == _dispatch_call_block_and_release) {
            unint64_t v65 = (void (__cdecl *)(void *))v64[2];
          }
        }

        _dispatch_introspection_callout_entry((void *)v44[5], v65);
        _dispatch_client_callout((uint64_t)v64, (uint64_t (*)(void))v63);
        _dispatch_introspection_callout_return(v64, v65);
        if (MEMORY[0xFFFFFC100]) {
          kdebug_trace(772079660LL, v44, 0LL, 0LL, 0LL);
        }
        _dispatch_introspection_queue_item_complete((dispatch_object_s *)v44);
        if (!v60) {
          goto LABEL_133;
        }
      }

      _dispatch_continuation_free_to_cache_limit(v60);
LABEL_133:
      uint64_t v41 = (unint64_t *)&a1->__opaque[88];
      if (v49) {
        objc_autoreleasePoolPop(v49);
      }
      goto LABEL_135;
    }

LABEL_168:
    uint64_t v29 = (__objc2_class **)v96;
LABEL_169:
    int v40 = v87;
    uint64_t v72 = (unint64_t *)&a1->__opaque[40];
    uint64_t v73 = (__objc2_class ***)(v42 + 160);
    *(_OWORD *)(v42 + 160) = *(_OWORD *)&v93[8];
    LOBYTE(v3) = v84;
    if (v87 == 2)
    {
      *(_OWORD *)v93 = *(_OWORD *)v73;
      *(void *)(v42 + 160) = a1;
      *(void *)(v42 + 168) = v93;
      _dispatch_last_resort_autorelease_pool_pop((uint64_t)a2);
      uint64_t v72 = (unint64_t *)&a1->__opaque[40];
      int v40 = 2;
      *(_OWORD *)uint64_t v73 = *(_OWORD *)v93;
    }

    if ((unint64_t)v29 + 1 <= 1)
    {
      while (1)
      {
        unint64_t v74 = __ldxr(v72);
        unint64_t v75 = (v74 - v85) & 0xFFFFFFF700000001LL;
        if (!(v74 >> 55))
        {
          if ((v74 & 0x8000000000LL) != 0)
          {
            __clrex();
            do
              unint64_t v76 = __ldaxr(v72);
            while (__stxr(v76 ^ 0x8000000000LL, v72));
            if ((v84 & 1) != 0) {
              goto LABEL_62;
            }
            uint64_t v29 = *v73;
            break;
          }

          if (v29) {
            unint64_t v75 = (v74 - v85) & 0xFFFFFF7700000001LL | 0x8000000000LL;
          }
          else {
            unint64_t v75 = (v74 - v85) & 0xFFFFFFF000000001LL;
          }
        }

        if (!__stlxr(v75, v72))
        {
          if ((~v74 & 0x1800000000LL) != 0
            || (uint64_t v77 = HIDWORD(v74) & 7, v78 = *(_DWORD *)(v42 + 200), (HIWORD(v78) & 0xF) >= v77))
          {
            uint64_t v28 = 0LL;
            uint64_t v29 = 0LL;
          }

          else
          {
            uint64_t v28 = 0LL;
            uint64_t v29 = 0LL;
            *(void *)(v42 + 200) = v78 & 0xFFF0FFFF | ((_DWORD)v77 << 16);
          }

          goto LABEL_188;
        }
      }
    }

    uint64_t v28 = v85;
LABEL_188:
    if ((v92 & 0x40000) == 0) {
      *(void *)(v42 + 200) = *(void *)(v42 + 200) & 0xF0000LL | v83;
    }
  }

  if ((v3 & 1) == 0)
  {
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace(772079660LL, a1, 0LL, 0LL, 0LL);
    }
    _dispatch_introspection_queue_item_complete((dispatch_object_s *)a1);
  }

  if (v29) {
    _dispatch_queue_invoke_finish((dispatch_object_s *)a1, (uint64_t)a2, v29, v28);
  }
  else {
    _os_object_release_internal_n(a1, (_BYTE *)&dword_0 + 2);
  }
}

uint64_t dispatch_channel_foreach_work_item_peek_f( uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, void))
{
  if (*(_BYTE *)(result + 56)) {
    dispatch_channel_foreach_work_item_peek_f_cold_1();
  }
  int v3 = *(void **)(result + 48);
  if ((*v3 & 0xFFFFFFFFFFFFF400LL) == 0x400)
  {
    unint64_t v6 = (void *)(*(void *)result + 48LL);
    do
    {
      uint64_t result = a3(a2, v3[5]);
      if (!(_DWORD)result || v3 == (void *)*v6) {
        break;
      }
      uint64_t result = v3[2];
      if (!result) {
        uint64_t result = _dispatch_wait_for_enqueuer(v3 + 2, (uint64_t)v6);
      }
      int v3 = (void *)result;
    }

    while ((*(void *)result & 0xFFFFFFFFFFFFF400LL) == 0x400);
  }

  return result;
}

void dispatch_channel_drain_f(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t *))
{
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 88LL);
  uint64_t v42 = 0LL;
  if (*(_BYTE *)(a1 + 56)) {
    dispatch_channel_drain_f_cold_1();
  }
  *(_BYTE *)(a1 + 56) = 1;
  unsigned int v39 = (unint64_t *)(v3 + 48);
  unint64_t v6 = (unint64_t *)(v3 + 104);
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
  {
    uint64_t v8 = *(uint64_t **)(a1 + 48);
    if (!v8)
    {
      if (!*v39) {
        break;
      }
      uint64_t v8 = (uint64_t *)*v6;
      if (!*v6) {
        uint64_t v8 = (uint64_t *)_dispatch_wait_for_enqueuer(v6, (uint64_t)v39);
      }
    }

    if ((*v8 & 0xFFFFFFFFFFFFF400LL) != 0x400) {
      break;
    }
    uint64_t v9 = v8[2];
    unint64_t *v6 = v9;
    if (!v9)
    {
      unint64_t v27 = v8 + 2;
      while (1)
      {
        unint64_t v28 = __ldxr(v39);
        if (!__stlxr(0LL, v39)) {
          goto LABEL_6;
        }
      }

      __clrex();
      uint64_t v9 = *v27;
      if (!*v27) {
        uint64_t v9 = _dispatch_wait_for_enqueuer((unint64_t *)v8 + 2, (uint64_t)v39);
      }
      unint64_t *v6 = v9;
    }

LABEL_94:
    unint64_t *v6 = (unint64_t)v31;
    *(void *)(a1 + 48) = v31;
  }

uint64_t _dispatch_channel_invoke_checks(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = _dispatch_channel_invoke_cancel_check(a1, a2, a3);
  if ((_DWORD)result)
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    if (*(void *)(StatusReg + 40)) {
      _dispatch_return_to_kernel();
    }
    if ((*(_BYTE *)(a2 + 34) & 0x10) != 0
      && (*(_DWORD *)(*(void *)(StatusReg + 216) + 60LL) & 7u) > *(unsigned __int8 *)(*(void *)(StatusReg + 216)
                                                                                      + 100LL)
      || (*(_BYTE *)(StatusReg + 960) & 1) != 0
      || *(void *)(a1 + 56) >> 55)
    {
      uint64_t result = 0LL;
      *(void *)(a2 + 40) = *(void *)(a1 + 24);
    }

    else
    {
      return 1LL;
    }
  }

  return result;
}

uint64_t dispatch_channel_foreach_work_item_peek(uint64_t a1, uint64_t a2)
{
  return dispatch_channel_foreach_work_item_peek_f(a1, a2, *(uint64_t (**)(uint64_t, void))(a2 + 16));
}

void dispatch_channel_drain(uint64_t a1, uint64_t a2)
{
}

void _dispatch_channel_wakeup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)(a1 + 88) + 8LL))(a1, *(void *)(a1 + 32)))
  {
    if (*(void *)(a1 + 48)) {
      uint64_t v6 = 1LL;
    }
    else {
      uint64_t v6 = (*(_DWORD *)(a1 + 80) & 0x10000000) != 0 && (*(_WORD *)(a1 + 116) & 8) == 0;
    }
  }

  else
  {
    uint64_t v6 = -1LL;
  }

  _dispatch_queue_wakeup((_DWORD *)a1, a2, a3, (__objc2_class **)v6);
}

uint64_t dispatch_channel_create(const char *a1, __objc2_class **a2, uint64_t a3, void *a4)
{
  if (!*a4) {
    dispatch_channel_create_cold_1();
  }
  uint64_t v6 = a2;
  int v8 = 67108865;
  if (!a1)
  {
    uint64_t v9 = 0LL;
    if (a2) {
      goto LABEL_7;
    }
LABEL_19:
    uint64_t v6 = &off_653C0;
    goto LABEL_11;
  }

  uint64_t v9 = _dispatch_strdup_if_mutable(a1);
  if (v9 == a1) {
    int v8 = 67108865;
  }
  else {
    int v8 = 69206017;
  }
  if (!v6) {
    goto LABEL_19;
  }
LABEL_7:
  if (*((_DWORD *)v6 + 2) != 0x7FFFFFFF)
  {
    unint64_t v10 = (unsigned int *)(v6 + 1);
    do
      int v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    if (v11 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

uint64_t dispatch_channel_enqueue(uint64_t a1, uint64_t a2)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v4 = *(void *)(StatusReg + 176);
  if (!v4) {
    return _dispatch_channel_enqueue_slow(a1, a2);
  }
  *(void *)(StatusReg + 176) = *(void *)(v4 + 16);
  *(void *)uint64_t v4 = 1284LL;
  *(void *)(v4 + 32) = 0LL;
  *(void *)(v4 + 40) = a2;
  if ((*(void *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF) {
    unint64_t v5 = 4351LL;
  }
  else {
    unint64_t v5 = *(void *)(StatusReg + 32) & 0xFFFFFFLL;
  }
  uint64_t v6 = *(void *)(StatusReg + 224);
  if (v6) {
    os_retain(*(void **)(StatusReg + 224));
  }
  *(void *)(v4 + 24) = v6;
  if (v6 == -1) {
    goto LABEL_11;
  }
  if (v6) {
    uint64_t v6 = *(unsigned int *)(v6 + 32);
  }
  if (MEMORY[0xFFFFFC100])
  {
    kdebug_trace(771817476LL, v6, v4, 0LL, 0LL);
    if (v5) {
      goto LABEL_12;
    }
  }

  else
  {
LABEL_11:
    if (v5)
    {
LABEL_12:
      int v7 = *(_DWORD *)(a1 + 84);
      if ((v7 & 0x40000000) != 0 || (v7 & 0xFFF) == 0)
      {
        uint64_t v8 = __clz(__rbit32(v5 >> 8)) + 1;
      }

      else
      {
        uint64_t v8 = 0LL;
        unint64_t v5 = 0LL;
      }

      goto LABEL_16;
    }
  }

  uint64_t v8 = 0LL;
LABEL_16:
  *(void *)(v4 + 8) = v5;
  if ((*(_BYTE *)(v4 + 1) & 2) == 0)
  {
    if (MEMORY[0xFFFFFC100]) {
      _dispatch_trace_item_push_internal((_opaque_pthread_t *)a1, (uint64_t *)v4);
    }
    _dispatch_introspection_queue_item_enqueue((dispatch_queue_s *)a1, (dispatch_object_s *)v4);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 88LL))(a1, v4, v8);
}

uint64_t _dispatch_channel_enqueue_slow(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)_dispatch_continuation_alloc_from_heap();
  uint64_t *v4 = 1284LL;
  v4[4] = 0LL;
  v4[5] = a2;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if ((*(void *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF) {
    unint64_t v6 = 4351LL;
  }
  else {
    unint64_t v6 = *(void *)(StatusReg + 32) & 0xFFFFFFLL;
  }
  uint64_t v7 = *(void *)(StatusReg + 224);
  if (v7) {
    os_retain(*(void **)(StatusReg + 224));
  }
  v4[3] = v7;
  if (v7 != -1)
  {
    if (v7) {
      uint64_t v7 = *(unsigned int *)(v7 + 32);
    }
    if (MEMORY[0xFFFFFC100])
    {
      kdebug_trace(771817476LL, v7, v4, 0LL, 0LL);
      if (v6) {
        goto LABEL_11;
      }
LABEL_21:
      uint64_t v9 = 0LL;
      goto LABEL_15;
    }
  }

  if (!v6) {
    goto LABEL_21;
  }
LABEL_11:
  int v8 = *(_DWORD *)(a1 + 84);
  if ((v8 & 0x40000000) != 0 || (v8 & 0xFFF) == 0)
  {
    uint64_t v9 = __clz(__rbit32(v6 >> 8)) + 1;
  }

  else
  {
    uint64_t v9 = 0LL;
    unint64_t v6 = 0LL;
  }

LABEL_15:
  v4[1] = v6;
  if ((*((_BYTE *)v4 + 1) & 2) == 0)
  {
    if (MEMORY[0xFFFFFC100]) {
      _dispatch_trace_item_push_internal((_opaque_pthread_t *)a1, v4);
    }
    _dispatch_introspection_queue_item_enqueue((dispatch_queue_s *)a1, (dispatch_object_s *)v4);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 88LL))(a1, v4, v9);
}

  if (*(_DWORD *)(7LL - *(void *)(a1 + 8)) == 0x7FFFFFFF) {
    goto LABEL_19;
  }
  unint64_t v10 = (unsigned int *)(7LL - *(void *)(a1 + 8));
  do
    int v11 = __ldxr(v10);
  while (__stxr(v11 + 2, v10));
  if (v11 > 0) {
    goto LABEL_19;
  }
  qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
  __break(1u);
}

  if (a3)
  {
    int v21 = qword_61378;
    qword_61378 = (uint64_t)v8;
    int v11 = "BUG in libdispatch client: %s %s{ 0x%llx[%s], ident: %lld / 0x%llx, handler: %p }";
    _dispatch_log( "BUG in libdispatch client: %s %s{ 0x%llx[%s], ident: %lld / 0x%llx, handler: %p }",  a1,  a3,  a6,  a2,  a5,  a5,  function_symbol);
    _dispatch_fault( (uint64_t)"LIBDISPATCH_STRICT: _dispatch_bug_kevent_client",  "BUG in libdispatch client: %s %s{ 0x%llx[%s], ident: %lld / 0x%llx, handler: %p }",  a1,  a3,  a6,  a2,  a5,  a5,  function_symbol);
    OUTLINED_FUNCTION_0_1();
    if ((v22 & 1) == 0) {
      return;
    }
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: LIBDISPATCH_STRICT: _dispatch_bug_kevent_client";
    __break(1u);
  }

  int v23 = qword_61380;
  qword_61380 = (uint64_t)v8;
  if (v8 != (const char *)v23)
  {
    unsigned int v24 = OUTLINED_FUNCTION_5_0();
    _dispatch_log( "BUG in libdispatch: %s: %s - 0x%x{ 0x%llx[%s], ident: %lld / 0x%llx, handler: %p }",  a1,  v24,  (_DWORD)v11,  a6,  a2,  a5,  a5,  function_symbol);
    uint64_t v25 = strerror((int)v11);
    _dispatch_fault( (uint64_t)"LIBDISPATCH_STRICT: _dispatch_bug_kevent_client",  "BUG in libdispatch: %s: %s - 0x%x{ 0x%llx[%s], ident: %lld / 0x%llx, handler: %p }",  a1,  v25,  (_DWORD)v11,  a6,  a2,  a5,  a5,  function_symbol);
    OUTLINED_FUNCTION_0_1();
    if ((v26 & 1) != 0)
    {
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: LIBDISPATCH_STRICT: _dispatch_bug_kevent_client";
      __break(1u);
    }
  }

uint64_t dispatch_channel_wakeup(uint64_t a1, int a2)
{
  HIDWORD(v3) = a2 - 5;
  LODWORD(v3) = a2 - 5;
  unsigned int v2 = v3 >> 2;
  if (v2 > 7) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = dword_3FFE8[v2];
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80LL))(a1, v4, 2LL);
}

void _dispatch_mgr_queue_push(unint64_t *a1, void *a2)
{
  if (*a2 <= 0xFFFuLL && (*a2 & 0x81LL) != 0) {
    _dispatch_mgr_queue_push_cold_1();
  }
  a2[2] = 0LL;
  unint64_t v3 = a1 + 6;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(void *)(StatusReg + 976) = a1 + 6;
  do
    unint64_t v5 = __ldxr(v3);
  while (__stlxr((unint64_t)a2, v3));
  if (v5)
  {
    *(void *)(v5 + 16) = a2;
    *(void *)(StatusReg + 976) = 0LL;
  }

  else
  {
    a1[13] = (unint64_t)a2;
    *(void *)(StatusReg + 976) = 0LL;
    unint64_t v6 = a1 + 7;
    do
      unint64_t v7 = __ldxr(v6);
    while (__stlxr(v7 | 0x8000000000LL, v6));
    if (((v7 ^ *(_DWORD *)(StatusReg + 24)) & 0xFFFFFFFC) != 0)
    {
      _dispatch_introspection_runtime_event();
      _dispatch_event_loop_poke((dispatch_object_s *)0xFFFFFFFFFFFFFFF8LL, 0LL, 0LL);
    }
  }

void _dispatch_mgr_queue_wakeup()
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Don't try to wake up or override the manager";
  __break(1u);
}

void _dispatch_kevent_workqueue_init()
{
  if (_dispatch_root_queues_pred != -1) {
    dispatch_once_f(&_dispatch_root_queues_pred, 0LL, (dispatch_function_t)_dispatch_root_queues_init_once);
  }
  if (_dispatch_mgr_sched_pred != -1) {
    dispatch_once_f(&_dispatch_mgr_sched_pred, 0LL, (dispatch_function_t)_dispatch_mgr_sched_init);
  }
  uint64_t v0 = _dispatch_mgr_sched;
  if (dword_65B64) {
    uint64_t v1 = _pthread_qos_class_encode();
  }
  else {
    uint64_t v1 = 0LL;
  }
  if (v1)
  {
    int v2 = _pthread_workqueue_set_event_manager_priority();
    if (v2) {
      _dispatch_bug(6510LL, v2);
    }
  }

uint64_t _dispatch_mgr_sched_init()
{
  int v0 = pthread_attr_init(&v9);
  if (v0) {
    _dispatch_bug(6165LL, v0);
  }
  int v1 = pthread_attr_getschedpolicy(&v9, dword_65B6C);
  if (v1) {
    _dispatch_bug(6167LL, v1);
  }
  int v2 = pthread_attr_getschedparam(&v9, &v8);
  if (v2) {
    _dispatch_bug(6168LL, v2);
  }
  uint64_t result = qos_class_main();
  if ((_DWORD)result == 21) {
    int v4 = 25;
  }
  else {
    int v4 = result;
  }
  if (v4)
  {
    dword_65B64 = v4;
    if (v4 == 5)
    {
      int sched_priority = 4;
    }

    else
    {
      HIDWORD(v7) = v4 - 9;
      LODWORD(v7) = v4 - 9;
      unsigned int v6 = v7 >> 2;
      if (v6 > 6) {
        int sched_priority = 0;
      }
      else {
        int sched_priority = dword_40068[v6];
      }
    }
  }

  else
  {
    int sched_priority = v8.sched_priority;
  }

  dword_65B68 = sched_priority;
  _dispatch_mgr_sched = sched_priority;
  return result;
}

void _dispatch_root_queue_poke(unsigned int *a1, uint64_t a2, int a3)
{
  if (*((void *)a1 + 6))
  {
    uint64_t v3 = *(void *)(*(void *)a1 + 40LL);
    if (v3 == 330001 || v3 == 328465)
    {
      unint64_t v5 = a1 + 28;
      while (!__ldxr(v5))
      {
        if (!__stlxr(a2, v5)) {
          goto LABEL_10;
        }
      }

      __clrex();
    }

    else
    {
LABEL_10:
      _dispatch_root_queue_poke_slow(a1, a2, a3);
    }
  }

void _dispatch_root_queue_poke_slow(unsigned int *a1, uint64_t a2, int a3)
{
  LODWORD(v3) = a3;
  if (_dispatch_root_queues_pred != -1) {
LABEL_52:
  }
    dispatch_once_f(&_dispatch_root_queues_pred, 0LL, (dispatch_function_t)_dispatch_root_queues_init_once);
  _dispatch_introspection_runtime_event();
  uint64_t v6 = *(void *)(*(void *)a1 + 40LL);
  if (v6 == 330001)
  {
    unsigned int v9 = a1[21];
    if ((v9 & 0x4000000) != 0)
    {
      uint64_t v10 = v9 & 0x8E000000 | 0xFF;
      LOWORD(v9) = (unsigned __int16)v9 >> 12;
    }

    else
    {
      uint64_t v10 = v9 & 0x8E0000FF;
      unsigned int v9 = (v9 >> 8) & 0xF;
      if (!v9)
      {
LABEL_48:
        int v25 = _pthread_workqueue_add_cooperativethreads(a2, v10);
        if (v25) {
          _dispatch_bug(6848LL, v25);
        }
        return;
      }
    }

    v10 |= 256LL << (v9 - 1);
    goto LABEL_48;
  }

  if (v6 == 328465)
  {
    unsigned int v7 = a1[21];
    if ((v7 & 0x4000000) != 0)
    {
      uint64_t v8 = v7 & 0x8E000000 | 0xFF;
      LOWORD(v7) = (unsigned __int16)v7 >> 12;
    }

    else
    {
      uint64_t v8 = v7 & 0x8E0000FF;
      unsigned int v7 = (v7 >> 8) & 0xF;
      if (!v7)
      {
LABEL_44:
        int v24 = _pthread_workqueue_addthreads(a2, v8);
        if (v24) {
          _dispatch_bug(6840LL, v24);
        }
        return;
      }
    }

    v8 |= 256LL << (v7 - 1);
    goto LABEL_44;
  }

  uint64_t v11 = *((void *)a1 + 4);
  if (*(void *)(v11 + 72))
  {
    while (dispatch_semaphore_signal((dispatch_semaphore_t)(v11 + 72)))
    {
      a2 = (a2 - 1);
      if (!(_DWORD)a2) {
        return;
      }
    }
  }

  int v12 = a1 + 28;
  if ((a1[21] & 0x80000000) != 0)
  {
    do
      unsigned int v14 = __ldxr(v12);
    while (__stxr(v14 + a2, v12));
  }

  else
  {
    do
    {
      if (__ldxr(v12))
      {
        __clrex();
        return;
      }
    }

    while (__stxr(a2, v12));
  }

  uint64_t v15 = a1 + 25;
  int v16 = a1[25];
  while (1)
  {
    LODWORD(v17) = v16 - (_DWORD)v3;
    else {
      uint64_t v17 = 0LL;
    }
    if ((int)a2 > (int)v17)
    {
      do
        unsigned int v18 = __ldxr(v12);
      while (__stxr(v18 - (a2 - v17), v12));
      a2 = v17;
    }

    if (!(_DWORD)a2) {
      break;
    }
    while (1)
    {
      unsigned int v19 = __ldaxr(v15);
      if (v19 != v16) {
        break;
      }
      if (!__stxr(v16 - a2, v15))
      {
        int v20 = 1;
        goto LABEL_31;
      }
    }

    int v20 = 0;
    __clrex();
LABEL_31:
    int v16 = v19;
    if (v20)
    {
      int v21 = a1 + 2;
      uint64_t v3 = _dispatch_worker_thread;
LABEL_33:
      if (*v21 != 0x7FFFFFFF)
      {
        do
          int v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
        if (v22 < 1)
        {
          qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
          __break(1u);
          goto LABEL_52;
        }
      }

      while (1)
      {
        int v23 = pthread_create(&v26, (const pthread_attr_t *)v11, (void *(__cdecl *)(void *))_dispatch_worker_thread, a1);
        if (v23 != 35)
        {
          if (!v23)
          {
            a2 = (a2 - 1);
            if (!(_DWORD)a2) {
              return;
            }
            goto LABEL_33;
          }

          _dispatch_bug(6907LL, v23);
        }

        _dispatch_temporary_resource_shortage();
      }
    }
  }

void _dispatch_root_queue_poke_and_wakeup(unsigned int *a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 40LL);
  if (v3 != 330001 && v3 != 328465) {
    goto LABEL_12;
  }
  unint64_t v5 = a1 + 28;
  do
  {
    signed int v6 = __ldxr(v5);
    BOOL v7 = v6 <= 0;
    if (!v6) {
      signed int v6 = a2;
    }
  }

  while (__stlxr(v6, v5));
  if (v7) {
LABEL_12:
  }
    _dispatch_root_queue_poke_slow(a1, a2, a3);
}

unsigned int *_dispatch_root_queue_wakeup(unsigned int *result, uint64_t a2, char a3)
{
  if ((a3 & 8) != 0)
  {
    if ((a3 & 1) != 0) {
      return (unsigned int *)_os_object_release_internal_n(result, (_BYTE *)&dword_0 + 2);
    }
  }

  else
  {
    uint64_t v3 = result[21];
    qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Don't try to wake up or override a root queue";
    qword_61258 = v3;
    __break(1u);
  }

  return result;
}

void _dispatch_root_queue_push(uint64_t a1, void *a2, unsigned int a3)
{
  unsigned int v3 = a3;
  uint64_t v4 = a1;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v6 = *(void *)(StatusReg + 232);
  if (v6 && *(_BYTE *)(v6 + 44) && ((BOOL v7 = *(void **)(v6 + 8), v13 = *(_DWORD *)(a1 + 84), !v7) || v13 < 0))
  {
    uint64_t v14 = *(void *)v6;
    unsigned int v15 = *(_DWORD *)(v6 + 16);
    *(void *)uint64_t v6 = a1;
    *(void *)(v6 + 8) = a2;
    *(_DWORD *)(v6 + 16) = a3;
    if (v13 < 0) {
      *(_BYTE *)(v6 + 44) = 0;
    }
    if (!v7) {
      return;
    }
    unsigned int v3 = v15;
    uint64_t v4 = v14;
  }

  else
  {
    BOOL v7 = a2;
  }

  unsigned int v8 = *(_DWORD *)(v4 + 84);
  if ((v8 & 0x8000000) != 0 && *v7 >= 0x1000uLL && *(void *)(*v7 + 40LL) != 1LL)
  {
    if (*(void *)(*v7 + 40LL) != 19LL || !_dispatch_source_is_timer((uint64_t)v7))
    {
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot target the cooperative root queue - not implemented";
      qword_61258 = (uint64_t)v7;
      __break(1u);
      return;
    }

    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }

  if ((unsigned __int16)v8 >> 12)
  {
    if (v3 && (unsigned __int16)v8 >> 12 != v3)
    {
LABEL_13:
      _dispatch_root_queue_push_override(v4, v7, v3);
      return;
    }
  }

  else
  {
    unsigned int v9 = (v8 >> 8) & 0xF;
    if (v9) {
      BOOL v10 = v9 >= v3;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10) {
      goto LABEL_13;
    }
  }

  v7[2] = 0LL;
  uint64_t v11 = (unint64_t *)(v4 + 48);
  *(void *)(StatusReg + 976) = v4 + 48;
  do
    unint64_t v12 = __ldxr(v11);
  while (__stlxr((unint64_t)v7, v11));
  if (v12)
  {
    *(void *)(v12 + 16) = v7;
    *(void *)(StatusReg + 976) = 0LL;
  }

  else
  {
    *(void *)(v4 + 104) = v7;
    *(void *)(StatusReg + 976) = 0LL;
    _dispatch_root_queue_poke_and_wakeup((unsigned int *)v4, 1LL, 0);
  }

void _dispatch_root_queue_push_override(uint64_t a1, void *a2, unsigned int a3)
{
  unint64_t v5 = (unint64_t)a2;
  int v7 = *(_DWORD *)(a1 + 84);
  unint64_t v8 = (v7 >> 25) & 4;
  if (v7 < 0) {
    unsigned int v9 = 2;
  }
  else {
    unsigned int v9 = (v7 >> 25) & 4;
  }
  if (*a2 >= 0x1000uLL && *(void *)(*a2 + 40LL) == 256LL)
  {
    a2[4] = a1;
  }

  else
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v11 = *(void **)(StatusReg + 176);
    if (v11) {
      *(void *)(StatusReg + 176) = v11[2];
    }
    else {
      uint64_t v11 = _dispatch_continuation_alloc_from_heap();
    }
    v11[6] = v5;
    v11[7] = a1;
    v11[5] = v11;
    unint64_t v8 = -1LL;
    void *v11 = &unk_588E0;
    v11[1] = -1LL;
    v11[3] = -1LL;
    unint64_t v5 = (unint64_t)v11;
  }

  if (a3 - 7 <= 0xFFFFFFF9)
  {
    uint64_t v13 = a3;
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corrupted priority";
    qword_61258 = a3;
    __break(1u);
  }

  else
  {
    int v12 = 2 * (v9 > 3);
    if ((v9 & 2) != 0) {
      int v12 = 1;
    }
    uint64_t v13 = 3 * a3 + v12 - 3;
    *(void *)(v5 + 16) = 0LL;
    unsigned int v3 = &_dispatch_root_queues;
    uint64_t v14 = (unint64_t *)(&_dispatch_root_queues + 16 * v13 + 6);
    unint64_t v8 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    *(void *)(v8 + 976) = v14;
    do
      unint64_t v15 = __ldxr(v14);
    while (__stlxr(v5, v14));
    if (v15)
    {
      *(void *)(v15 + 16) = v5;
      *(void *)(v8 + 976) = 0LL;
      return;
    }
  }

  int v16 = &v3[16 * v13];
  v16[13] = (__objc2_class *)v5;
  *(void *)(v8 + 976) = 0LL;
  _dispatch_root_queue_poke_and_wakeup((unsigned int *)v16, 1LL, 0);
}

uint64_t dispatch_pthread_root_queue_create(const char *a1, int a2, __int128 *a3, void *a4)
{
  return _dispatch_pthread_root_queue_create(a1, a2, a3, a4, 0LL);
}

uint64_t _dispatch_pthread_root_queue_create(const char *a1, int a2, __int128 *a3, void *a4, _OWORD *a5)
{
  if (a2 < 0) {
    int v8 = (char)a2;
  }
  else {
    int v8 = 0;
  }
  int v9 = 4095;
  if (a1)
  {
    uint64_t v11 = _dispatch_strdup_if_mutable(a1);
    if (v11 == a1) {
      int v9 = 4095;
    }
    else {
      int v9 = 2101247;
    }
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  uint64_t v12 = _dispatch_object_alloc(&OBJC_CLASS___OS_dispatch_queue_pthread_root, 320LL);
  uint64_t v13 = v12;
  *(void *)(v12 + 16) = -1985229329LL;
  *(_DWORD *)(v12 + 80) = v9;
  *(void *)(v12 + 56) = 0x20000000000LL;
  do
    unint64_t v14 = __ldxr(&_dispatch_queue_serial_numbers);
  while (__stxr(v14 + 1, &_dispatch_queue_serial_numbers));
  *(void *)(v12 + 64) = v14;
  *(void *)(v12 + 72) = v11;
  *(void *)(v12 + 56) = 0x60000000000000LL;
  *(_DWORD *)(v12 + 84) = 0x80000000;
  unint64_t v15 = (_OWORD *)(v12 + 120);
  *(void *)(v12 + 32) = v12 + 120;
  if (v8 >= 32 || v8 == 0) {
    int v17 = 32;
  }
  else {
    int v17 = v8;
  }
  *(_DWORD *)(v12 + 100) = v17;
  *(void *)(v12 + 192) = &OBJC_CLASS___OS_dispatch_semaphore;
  *(_DWORD *)(v12 + 256) = 0;
  _dispatch_sema4_create_slow((unsigned int *)(v12 + 256), 2);
  if (a3)
  {
    __int128 v18 = *a3;
    __int128 v19 = a3[1];
    __int128 v20 = a3[3];
    *(_OWORD *)(v13 + 152) = a3[2];
    *(_OWORD *)(v13 + 168) = v20;
    *unint64_t v15 = v18;
    *(_OWORD *)(v13 + 136) = v19;
    _dispatch_mgr_priority_raise((pthread_attr_t *)(v13 + 120));
  }

  else
  {
    int v21 = pthread_attr_init((pthread_attr_t *)(v13 + 120));
    if (v21) {
      _dispatch_bug(7641LL, v21);
    }
  }

  int v22 = pthread_attr_setdetachstate((pthread_attr_t *)(v13 + 120), 2);
  if (!v22)
  {
    if (!a4) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }

  _dispatch_bug(7644LL, v22);
  if (a4) {
LABEL_23:
  }
    *(void *)(v13 + 184) = _dispatch_Block_copy(a4);
LABEL_24:
  if (a5) {
    *(_OWORD *)(v13 + 264) = *a5;
  }
  if (MEMORY[0xFFFFFC100])
  {
    if (*(void *)(v13 + 72)) {
      int v24 = *(const char **)(v13 + 72);
    }
    else {
      int v24 = (const char *)&unk_416DE;
    }
    strncpy(__dst, v24, 0x20uLL);
    unsigned int v25 = *(_DWORD *)(v13 + 84);
    if ((v25 & 0x4000000) != 0)
    {
      uint64_t v26 = v25 & 0x8E000000 | 0xFF;
      LOWORD(v25) = (unsigned __int16)v25 >> 12;
    }

    else
    {
      uint64_t v26 = v25 & 0x8E0000FF;
      unsigned int v25 = (v25 >> 8) & 0xF;
      if (!v25) {
        goto LABEL_38;
      }
    }

    v26 |= 256LL << (v25 - 1);
LABEL_38:
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace(772079621LL, *(void *)(v13 + 64), v26, 0LL, 0LL);
    }
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace(772079622LL, *(void *)__dst, v28, v29, v30);
    }
  }

  return _dispatch_introspection_queue_create(v13);
}

uint64_t _dispatch_pthread_root_queue_create_with_observer_hooks_4IOHID( const char *a1, int a2, __int128 *a3, uint64_t a4, void *a5)
{
  if (!*(void *)a4 || !*(void *)(a4 + 8)) {
    _dispatch_pthread_root_queue_create_with_observer_hooks_4IOHID_cold_1();
  }
  return _dispatch_pthread_root_queue_create(a1, a2, a3, a5, (_OWORD *)a4);
}

BOOL _dispatch_queue_is_exclusively_owned_by_current_thread_4IOHID(uint64_t a1)
{
  int v2 = *(unsigned __int16 *)(a1 + 80);
  if (v2 != 1) {
    _dispatch_queue_is_exclusively_owned_by_current_thread_4IOHID_cold_1(v2);
  }
  uint64_t v3 = *(void *)(a1 + 56);
  return ((v3 ^ *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24)) & 0xFFFFFFFC) == 0LL;
}

uint64_t dispatch_pthread_root_queue_copy_current()
{
  uint64_t v0 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160);
  if (!v0) {
    return 0LL;
  }
  do
  {
    uint64_t v1 = v0;
    uint64_t v0 = *(void *)(v0 + 24);
  }

  while (v0);
  if (*(void *)(*(void *)v1 + 40LL) != 328721LL) {
    return 0LL;
  }
  _os_object_retain_with_resurrect(v1);
  return v1;
}

void _dispatch_pthread_root_queue_dispose(uint64_t *a1, _BYTE *a2)
{
  uint64_t v4 = (pthread_attr_t *)a1[4];
  if (MEMORY[0xFFFFFC100]) {
    kdebug_trace(772079624LL, a1[8], 0LL, 0LL, 0LL);
  }
  _dispatch_introspection_queue_dispose((uint64_t)a1);
  pthread_attr_destroy(v4);
  _dispatch_semaphore_dispose((uint64_t)v4[1].__opaque);
  uint32_t sig = (const void *)v4[1].__sig;
  if (sig) {
    _Block_release(sig);
  }
  a1[3] = (uint64_t)&off_65340;
  _dispatch_lane_class_dispose(a1, a2);
}

void _dispatch_runloop_queue_wakeup(_DWORD *context, uint64_t a2, uint64_t a3)
{
  if ((context[20] & 0x800000) != 0) {
    goto LABEL_19;
  }
  if ((a3 & 2) == 0) {
    goto LABEL_22;
  }
  uint64_t v4 = (unint64_t *)(context + 14);
  do
    unint64_t v5 = __ldxr(v4);
  while (__stlxr(v5 | 0x8000000000LL, v4));
  if ((v5 & 0xFFFFFFFC) == 0)
  {
LABEL_19:
    _dispatch_lane_wakeup((uint64_t)context, a2, a3);
  }

  else
  {
LABEL_22:
    if (*((void *)context + 6))
    {
      _dispatch_runloop_queue_poke((char *)context, a2, a3);
    }

    else
    {
      uint64_t v6 = (unint64_t *)(context + 14);
      do
        unint64_t v7 = __ldxr(v6);
      while (__stxr(v7 & 0xFFFFFFF0FFFFFFFFLL, v6));
      uint64_t v8 = HIDWORD(v7) & 7;
      if ((_DWORD)v8)
      {
        uint64_t v9 = *((void *)context + 7);
        else {
          uint64_t v10 = 0LL;
        }
        if (*((void *)context + 6)) {
          _dispatch_runloop_queue_poke((char *)context, v8, a3);
        }
        _pthread_qos_override_end_direct(v10, context);
      }

      else if ((a3 & 1) != 0)
      {
        _os_object_release_internal_n(context, (_BYTE *)&dword_0 + 2);
      }
    }
  }

void _dispatch_runloop_queue_poke(char *context, unsigned int a2, char a3)
{
  if (*(void *)(*(void *)context + 40LL) == 394769LL && _dispatch_main_q_handle_pred != -1) {
    dispatch_once_f(&_dispatch_main_q_handle_pred, context, (dispatch_function_t)_dispatch_runloop_queue_handle_init);
  }
  unsigned int v6 = *((_DWORD *)context + 21);
  unsigned int v7 = (unsigned __int16)v6 >> 12;
  if (a2) {
    unsigned int v7 = a2;
  }
  LODWORD(v8) = (v6 >> 8) & 0xF;
  else {
    uint64_t v8 = v7;
  }
  uint64_t v9 = (unint64_t *)(context + 56);
  unint64_t v10 = v8 << 32;
  do
  {
    unint64_t v11 = __ldxr(v9);
    if ((v11 & 0x700000000LL) < v10)
    {
      unint64_t v12 = v11 & 0xFFFFFFF8FFFFFFFFLL | v10;
      if (v11 & 0x1000000000LL | v10 & 0x1000000000LL) {
        v12 |= 0x800000000uLL;
      }
      if (v11 != v12) {
        continue;
      }
    }

    __clrex();
    goto LABEL_22;
  }

  while (__stxr(v12, v9));
  unsigned int v13 = (*((_DWORD *)context + 21) >> 8) & 0xF;
  if (v8 > v13)
  {
    uint64_t v14 = v12 >= 4 ? v12 | 3 : 0LL;
    _pthread_qos_override_start_direct(v14, (256LL << (v8 - 1)) | 0xFF, context);
    if ((BYTE4(v11) & 7u) > v13) {
      _pthread_qos_override_end_direct(v14, context);
    }
  }

uint64_t _dispatch_runloop_root_queue_create_4CF(const char *a1, uint64_t a2)
{
  if (!a2)
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v4 = *(void *)(StatusReg + 32);
    uint64_t v5 = _dispatch_object_alloc(&OBJC_CLASS___OS_dispatch_queue_runloop, 120LL);
    uint64_t v6 = v5;
    *(void *)(v5 + 16) = -1985229329LL;
    *(_DWORD *)(v5 + 80) = 262145;
    *(void *)(v5 + 56) = 0x1FFE1000000000LL;
    unsigned int v7 = (unint64_t *)(v5 + 56);
    do
      unint64_t v8 = __ldxr(&_dispatch_queue_serial_numbers);
    while (__stxr(v8 + 1, &_dispatch_queue_serial_numbers));
    *(void *)(v5 + 24) = &off_653C0;
    uint64_t v9 = "runloop-queue";
    if (a1) {
      uint64_t v9 = a1;
    }
    *(void *)(v5 + 64) = v8;
    *(void *)(v5 + 72) = v9;
    if ((v4 & 0x22000000) == 0 && (v4 & 0x3F00) != 0)
    {
      unsigned int v10 = (__clz(__rbit32((v4 >> 8) & 0x3FFF)) << 8) + 256;
      *(_DWORD *)(v5 + 84) = v10 & 0xFFFFFF00 | v4;
    }

    _dispatch_runloop_queue_handle_init((void *)v5);
    do
      unint64_t v11 = __ldxr(v7);
    while (__stxr(v11 & 0xFFFFFFFF00000003LL | (4 * ((*(void *)(StatusReg + 24) >> 2) & 0x3FFFFFFFLL)), v7));
    if (!MEMORY[0xFFFFFC100]) {
      return _dispatch_introspection_queue_create(v6);
    }
    if (*(void *)(v6 + 72)) {
      unsigned int v13 = *(const char **)(v6 + 72);
    }
    else {
      unsigned int v13 = (const char *)&unk_416DE;
    }
    strncpy(__dst, v13, 0x20uLL);
    unsigned int v14 = *(_DWORD *)(v6 + 84);
    if ((v14 & 0x4000000) != 0)
    {
      uint64_t v15 = v14 & 0x8E000000 | 0xFF;
      LOWORD(v14) = (unsigned __int16)v14 >> 12;
    }

    else
    {
      uint64_t v15 = v14 & 0x8E0000FF;
      unsigned int v14 = (v14 >> 8) & 0xF;
      if (!v14) {
        goto LABEL_24;
      }
    }

    v15 |= 256LL << (v14 - 1);
LABEL_24:
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace(772079621LL, *(void *)(v6 + 64), v15, 0LL, 0LL);
    }
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace(772079622LL, *(void *)__dst, v17, v18, v19);
    }
    return _dispatch_introspection_queue_create(v6);
  }

  return 0LL;
}

void _dispatch_runloop_queue_handle_init(void *context)
{
  kern_return_t v2;
  mach_port_name_t name;
  mach_port_options_t options;
  if ((_dispatch_unsafe_fork & 1) == 0) {
    _dispatch_fork_becomes_unsafe_slow();
  }
  options.reserved[1] = 0LL;
  *(_OWORD *)&options.flags = xmmword_3FF30;
  if (*(void *)(*context + 40LL) == 394769LL) {
    *(void *)&options.flags = 0x100000033LL;
  }
  int v2 = mach_port_construct(mach_task_self_, &options, (mach_port_context_t)context, &name);
  if (v2 == -301) {
    _dispatch_sema4_create_slow_cold_2();
  }
  if (v2) {
    _dispatch_bug(7808LL, v2);
  }
  context[4] = name;
  _dispatch_program_is_probably_callback_driven = 1;
}

uint64_t _dispatch_runloop_queue_xref_dispose(unint64_t *a1)
{
  int v2 = a1 + 7;
  do
    unint64_t v3 = __ldxr(v2);
  while (__stxr(v3 & 0xFFFFFFF0FFFFFFFFLL, v2));
  uint64_t v4 = HIDWORD(v3) & 7;
  do
    unint64_t v5 = __ldxr(v2);
  while (__stxr(v5 & 0xFFFFFFFF00000003LL, v2));
  uint64_t result = (*(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(*a1 + 80))(a1, v4, 2LL);
  if ((_DWORD)v4)
  {
    unint64_t v7 = a1[7];
    else {
      uint64_t v8 = 0LL;
    }
    return _pthread_qos_override_end_direct(v8, a1);
  }

  return result;
}

void _dispatch_runloop_queue_dispose(uint64_t *a1, _BYTE *a2)
{
  if (MEMORY[0xFFFFFC100]) {
    kdebug_trace(772079624LL, a1[8], 0LL, 0LL, 0LL);
  }
  _dispatch_introspection_queue_dispose((uint64_t)a1);
  _dispatch_runloop_queue_handle_dispose((mach_port_context_t)a1);
  _dispatch_lane_class_dispose(a1, a2);
}

void _dispatch_runloop_queue_handle_dispose(mach_port_context_t guard)
{
  kern_return_t v2;
  mach_port_name_t v1 = *(_DWORD *)(guard + 32);
  if (v1 - 1 <= 0xFFFFFFFD)
  {
    *(void *)(guard + 32) = 0LL;
    int v2 = mach_port_destruct(mach_task_self_, v1, -1, guard);
    if (v2 == -301) {
      _dispatch_sema4_create_slow_cold_2();
    }
    if (v2) {
      _dispatch_bug(7864LL, v2);
    }
  }

BOOL _dispatch_runloop_root_queue_perform_4CF(char *object)
{
  uint64_t v2 = *(void *)(*(void *)object + 40LL);
  if (v2 != 395025) {
    _dispatch_runloop_root_queue_perform_4CF_cold_3(v2);
  }
  dispatch_retain((dispatch_object_t)object);
  unint64_t v3 = (unint64_t *)(object + 48);
  if (!*((void *)object + 6))
  {
    BOOL v16 = 0LL;
    goto LABEL_105;
  }

  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unint64_t v5 = (unsigned int *)(*(void *)(StatusReg + 216) & 0xFFFFFFFFFFFFFFFELL);
  if (v5 != (unsigned int *)-4LL)
  {
    if (v5)
    {
      uint64_t v6 = v5 + 24;
      do
        int v7 = __ldxr(v6);
      while (__stxr(v7 - 1, v6));
      if (v7 <= 0)
      {
        if (v7 < 0) {
          _os_object_allows_weak_reference_cold_1();
        }
        *((void *)v5 + 7) = 0xDEAD000000000000LL;
        _dispatch_object_dealloc(v5);
      }
    }

    *(void *)(StatusReg + 216) = -4LL;
  }

  __int128 v57 = *(_OWORD *)(StatusReg + 160);
  *(void *)(StatusReg + 160) = object;
  *(void *)(StatusReg + 168) = &v57;
  uint64_t v8 = *(void *)(StatusReg + 32);
  unsigned int v9 = (__clz(__rbit32((v8 >> 8) & 0x3FFF)) << 8) + 256;
  else {
    unsigned int v10 = 0;
  }
  unint64_t v11 = *(unsigned int **)(StatusReg + 224);
  if (v11) {
    os_retain(*(void **)(StatusReg + 224));
  }
  LODWORD(v12) = v10 | v8 & 0x8E0000FF;
  uint64_t v13 = *(void *)(StatusReg + 200);
  uint64_t v55 = v8;
  if ((_DWORD)v13)
  {
    unsigned int v14 = v10 & 0xFFF | v8;
    if (v14)
    {
      int v15 = v10 & 0x4003000 | v8 & 0x4000000;
      if (v10 >> 12 <= v14 >> 8) {
        int v15 = 0;
      }
      LODWORD(v12) = v13 & 0x880F0000 | v14 | v15;
    }

    else
    {
      unsigned int v17 = v13 | 0x40000000;
      if ((v13 & 0xFFF) == 0) {
        unsigned int v17 = *(void *)(StatusReg + 200);
      }
      LODWORD(v12) = v17 & 0xFFFF0FFF | v10 & 0x4003000 | v8 & 0x4000000;
      if (((v17 >> 8) & 0xF) >= v10 >> 12) {
        LODWORD(v12) = v17;
      }
    }
  }

  if ((~(_DWORD)v12 & 0xF0000) != 0) {
    uint64_t v12 = v12 | 0xF0000;
  }
  else {
    uint64_t v12 = v12;
  }
  *(void *)(StatusReg + 200) = v12;
  memset(v56, 0, sizeof(v56));
  uint64_t v18 = (uint64_t *)(object + 104);
  uint64_t v19 = *((void *)object + 13);
  if (!v19) {
    uint64_t v19 = _dispatch_wait_for_enqueuer((unint64_t *)object + 13, (uint64_t)(object + 48));
  }
  uint64_t v20 = *(void *)(v19 + 16);
  *uint64_t v18 = v20;
  if (!v20)
  {
    uint64_t v45 = (unint64_t *)(v19 + 16);
    while (1)
    {
      unint64_t v46 = __ldxr(v3);
      if (v19 != (v46 & 0xFFFFFFFFFFFFFFF8LL)) {
        break;
      }
      if (!__stlxr(0LL, v3)) {
        goto LABEL_34;
      }
    }

    __clrex();
    uint64_t v20 = *v45;
    if (!*v45) {
      uint64_t v20 = _dispatch_wait_for_enqueuer(v45, (uint64_t)(object + 48));
    }
    *uint64_t v18 = v20;
  }

LABEL_89:
        v21[1](object);
        goto LABEL_90;
      }

      unint64_t v31 = 0LL;
LABEL_135:
      _dispatch_set_priority_and_voucher_slow(v31, v23, v22 & 4 | 2);
      if ((v22 & 0x200) != 0) {
        goto LABEL_73;
      }
      goto LABEL_70;
    }

    if (v31) {
      goto LABEL_135;
    }
    goto LABEL_64;
  }

  if (*(void *)(v22 + 40) == 1LL) {
    (*(void (**)(uint64_t, void, void))(v22 + 48))(v19, 0LL, 0LL);
  }
  else {
    (*(void (**)(uint64_t, _OWORD *, uint64_t))(v22 + 64))(v19, v56, 0x80000LL);
  }
  uint64_t v30 = v55;
  if (v21) {
    goto LABEL_89;
  }
LABEL_90:
  BOOL v16 = v20 != 0;
  if (!v20) {
    (*(void (**)(char *, void, void))(*(void *)object + 80LL))(object, 0LL, 0LL);
  }
  *(void *)(StatusReg + 200) = v13 & 0xFFF0FFFF;
  unint64_t v40 = v30 & 0xFFFFFFFF02FFFFFFLL;
  if (v30 == -1) {
    unint64_t v41 = 0LL;
  }
  else {
    unint64_t v41 = v30 & 0xFFFFFFFF02FFFFFFLL;
  }
  uint64_t v42 = *(void *)(StatusReg + 32);
  if ((v42 & 0x1000000) != 0)
  {
    if (v41)
    {
LABEL_116:
      _dispatch_set_priority_and_voucher_slow(v40, v11, 6);
      goto LABEL_101;
    }

    unint64_t v41 = v42 & 0xFFFFFFFFFEFFFFFFLL;
  }

  else if (v41 == (v42 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_97;
  }

  unint64_t v40 = v41;
  if (v41) {
    goto LABEL_116;
  }
LABEL_97:
  if (v11 != (unsigned int *)-1LL)
  {
    if (*(unsigned int **)(StatusReg + 224) == v11)
    {
      if (v11) {
        os_release(v11);
      }
      goto LABEL_101;
    }

    unint64_t v40 = 0LL;
    goto LABEL_116;
  }

LABEL_101:
  *(_OWORD *)(StatusReg + 160) = v57;
  if (v5 != (unsigned int *)-4LL)
  {
    *(void *)(StatusReg + 216) = 0LL;
    *(void *)(StatusReg + 40) = 0LL;
  }

  uint64_t v43 = *(void *)(StatusReg + 176);
  if (v43)
  {
    *(void *)(StatusReg + 176) = 0LL;
    _dispatch_cache_cleanup(v43);
  }

LABEL_105:
  dispatch_release((dispatch_object_t)object);
  return v16;
}

void _dispatch_runloop_root_queue_wakeup_4CF(_DWORD *a1)
{
  if (*(void *)(*(void *)a1 + 40LL) != 395025LL) {
    _dispatch_runloop_root_queue_perform_4CF_cold_3(*(void *)(*(void *)a1 + 40LL));
  }
  _dispatch_runloop_queue_wakeup(a1, 0LL, 0LL);
}

uint64_t _dispatch_runloop_root_queue_get_port_4CF(unsigned int *a1)
{
  uint64_t v2 = *(void *)(*(void *)a1 + 40LL);
  if (v2 != 395025) {
    _dispatch_runloop_root_queue_perform_4CF_cold_3(v2);
  }
  return a1[8];
}

uint64_t _dispatch_get_main_queue_handle_4CF()
{
  if (_dispatch_main_q_handle_pred != -1) {
    dispatch_once_f( &_dispatch_main_q_handle_pred,  &_dispatch_main_q,  (dispatch_function_t)_dispatch_runloop_queue_handle_init);
  }
  return dword_64DE0;
}

uint64_t _dispatch_get_main_queue_port_4CF()
{
  if (_dispatch_main_q_handle_pred != -1) {
    dispatch_once_f( &_dispatch_main_q_handle_pred,  &_dispatch_main_q,  (dispatch_function_t)_dispatch_runloop_queue_handle_init);
  }
  return dword_64DE0;
}

void _dispatch_main_queue_callback_4CF()
{
  if (!dword_64E30)
  {
    dword_64E30 = 1;
    _dispatch_main_queue_drain();
    dword_64E30 = 0;
  }

void _dispatch_main_queue_drain()
{
  if (!qword_64DF0) {
    return;
  }
  if ((dword_64E10 & 0x40000) == 0) {
    _dispatch_main_queue_drain_cold_1();
  }
  uint64_t v0 = qword_64DF8;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (_dispatch_main_q_handle_pred != -1) {
    dispatch_once_f( &_dispatch_main_q_handle_pred,  &_dispatch_main_q,  (dispatch_function_t)_dispatch_runloop_queue_handle_init);
  }
  uint64_t v2 = (unsigned int *)(*(void *)(StatusReg + 216) & 0xFFFFFFFFFFFFFFFELL);
  if (v2)
  {
    unint64_t v3 = v2 + 24;
    do
      int v4 = __ldxr(v3);
    while (__stxr(v4 - 1, v3));
    if (v4 <= 0)
    {
      if (v4 < 0) {
        _os_object_allows_weak_reference_cold_1();
      }
      *((void *)v2 + 7) = 0xDEAD000000000000LL;
      _dispatch_object_dealloc(v2);
    }
  }

  *(void *)(StatusReg + 216) = -4LL;
  __int128 v51 = *(_OWORD *)(StatusReg + 160);
  *(void *)(StatusReg + 160) = &_dispatch_main_q;
  *(void *)(StatusReg + 168) = 0LL;
  uint64_t v49 = *(void *)(StatusReg + 32);
  unsigned int v5 = (__clz(__rbit32((v49 >> 8) & 0x3FFF)) << 8) + 256;
  else {
    unsigned int v6 = 0;
  }
  int v7 = *(unsigned int **)(StatusReg + 224);
  if (v7) {
    os_retain(*(void **)(StatusReg + 224));
  }
  LODWORD(v8) = v6 | v49 & 0x8E0000FF;
  uint64_t v9 = *(void *)(StatusReg + 200);
  int v47 = v9;
  if ((_DWORD)v9)
  {
    unsigned int v10 = v6 & 0xFFF | v49;
    if (v10)
    {
      int v11 = v9 & 0x880F0000;
      unsigned int v12 = v9 & 0xFFF;
      if (v12 > v10) {
        unsigned int v10 = v12;
      }
      int v13 = v6 & 0x4003000 | v49 & 0x4000000;
      if (v6 >> 12 <= v10 >> 8) {
        int v13 = 0;
      }
      LODWORD(v8) = v11 | v10 | v13;
    }

    else
    {
      unsigned int v14 = v9 | 0x40000000;
      if ((v9 & 0xFFF) == 0) {
        unsigned int v14 = *(void *)(StatusReg + 200);
      }
      LODWORD(v8) = v14 & 0xFFFF0FFF | v6 & 0x4003000 | v49 & 0x4000000;
      if (((v14 >> 8) & 0xF) >= v6 >> 12) {
        LODWORD(v8) = v14;
      }
    }
  }

  uint64_t v48 = v7;
  if ((~(_DWORD)v8 & 0xF0000) != 0) {
    uint64_t v8 = v8 | 0xF0000;
  }
  else {
    uint64_t v8 = v8;
  }
  *(void *)(StatusReg + 200) = v8;
  memset(v50, 0, sizeof(v50));
  int v15 = off_64E28[0];
  if (!off_64E28[0]) {
    int v15 = (int *)_dispatch_wait_for_enqueuer((unint64_t *)off_64E28, (uint64_t)&qword_64DF0);
  }
  off_64E28[0] = 0LL;
  do
    unint64_t v16 = __ldxr((unint64_t *)&qword_64DF0);
  while (__stlxr(0LL, (unint64_t *)&qword_64DF0));
  unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFF8LL;
  do
  {
    if (v15 == (int *)v17)
    {
      uint64_t v18 = 0LL;
    }

    else
    {
      uint64_t v18 = *((void *)v15 + 2);
      if (!v18) {
        uint64_t v18 = _dispatch_wait_for_enqueuer((unint64_t *)v15 + 2, 0LL);
      }
    }

    uint64_t v19 = *(void (***)(dispatch_queue_s *))(StatusReg + 192);
    if (v19) {
      (*v19)(&_dispatch_main_q);
    }
    uint64_t v20 = *(void *)v15;
    if (*(void *)v15 >= 0x1000uLL)
    {
      if (*(void *)(v20 + 40) == 1LL) {
        (*(void (**)(int *, void, void))(v20 + 48))(v15, 0LL, 0LL);
      }
      else {
        (*(void (**)(int *, _OWORD *, uint64_t))(v20 + 64))(v15, v50, 0x80000LL);
      }
      if (v19) {
        goto LABEL_97;
      }
      goto LABEL_98;
    }

    int v21 = (unsigned int *)*((void *)v15 + 3);
    if ((v20 & 4) != 0) {
      *((void *)v15 + 3) = -1LL;
    }
    if (v21 != (unsigned int *)-1LL)
    {
      uint64_t v22 = v21;
      if (v21) {
        uint64_t v22 = (unsigned int *)v21[8];
      }
      if (MEMORY[0xFFFFFC100]) {
        kdebug_trace(771817480LL, v22, v15, 0LL, 0LL);
      }
    }

    uint64_t v23 = *((void *)v15 + 1);
    if (v23 == -1)
    {
      unint64_t v26 = 0LL;
    }

    else
    {
      uint64_t v24 = *(void *)(StatusReg + 200);
      else {
        uint64_t v25 = 0LL;
      }
      unint64_t v26 = v25 & 0xFFFFFFFFFFFFFF00LL | *(void *)(StatusReg + 200);
      if ((v23 & 0xFFFFFF) != 0)
      {
        if ((v23 & 0xFFFFFFuLL) >= (v25 & 0xFFFFFF00)
          && ((v24 & 0x44000000) != 0 || (*((void *)v15 + 1) & 0x10000000LL) != 0))
        {
          unint64_t v26 = v23 & 0xFFFFFF;
        }
      }

      else if ((unsigned __int16)v24 >> 12)
      {
        unint64_t v26 = (256LL << (((unsigned __int16)v24 >> 12) - 1)) | 0xFF;
      }
    }

    unint64_t v28 = v26 & 0xFFFFFFFF02FFFFFFLL;
    uint64_t v29 = *(void *)(StatusReg + 32);
    if ((v29 & 0x1000000) != 0)
    {
      if (v28) {
        goto LABEL_117;
      }
      unint64_t v28 = v29 & 0xFFFFFFFFFEFFFFFFLL;
LABEL_102:
      if (v28) {
        goto LABEL_117;
      }
      goto LABEL_73;
    }

    if (v28 != (v29 & 0xFFFFFFFF77FFFFFFLL)) {
      goto LABEL_102;
    }
LABEL_73:
    if (*(unsigned int **)(StatusReg + 224) == v21)
    {
      if ((v20 & 4) != 0 && v21) {
        os_release(v21);
      }
LABEL_78:
      if ((v20 & 0x200) == 0) {
        goto LABEL_79;
      }
      goto LABEL_82;
    }

    unint64_t v28 = 0LL;
LABEL_117:
    _dispatch_set_priority_and_voucher_slow(v28, v21, v20 & 4 | 2);
    if ((v20 & 0x200) == 0)
    {
LABEL_79:
      if (MEMORY[0xFFFFFC100]) {
        _dispatch_trace_item_pop_internal((_opaque_pthread_t *)&_dispatch_main_q, (uint64_t *)v15);
      }
      _dispatch_introspection_queue_item_dequeue(&_dispatch_main_q, (dispatch_object_s *)v15);
    }

LABEL_138:
    _dispatch_set_priority_and_voucher_slow(v40, v43, 6);
  }

  else
  {
    unint64_t v44 = (_OWORD *)(StatusReg + 160);
    uint64_t v43 = v48;
    if (v41 == (v42 & 0xFFFFFFFF77FFFFFFLL)) {
      goto LABEL_124;
    }
LABEL_135:
    unint64_t v40 = v41;
    if (v41) {
      goto LABEL_138;
    }
LABEL_124:
    if (v43 != (unsigned int *)-1LL)
    {
      if (*(unsigned int **)(StatusReg + 224) != v43)
      {
        unint64_t v40 = 0LL;
        goto LABEL_138;
      }

      if (v43) {
        os_release(v43);
      }
    }
  }

  _OWORD *v44 = v51;
  *(void *)(StatusReg + 216) = 0LL;
  *(void *)(StatusReg + 40) = 0LL;
  uint64_t v45 = *(void *)(StatusReg + 176);
  if (v45)
  {
    *(void *)(StatusReg + 176) = 0LL;
    _dispatch_cache_cleanup(v45);
  }

uint64_t _dispatch_main_queue_push(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned int v4 = (*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF;
  unsigned int v5 = __clz(__rbit32(v4));
  *(void *)(a2 + 16) = 0LL;
  unsigned int v6 = (unint64_t *)(result + 48);
  *(void *)(StatusReg + 976) = result + 48;
  do
  {
    unint64_t v7 = __ldxr(v6);
    if (v4 != 0 && v5 >= (v7 & 7)) {
      unint64_t v8 = v5 + 1;
    }
    else {
      unint64_t v8 = v7 & 7;
    }
  }

  while (__stlxr(v8 | a2, v6));
  if ((v7 & 0xFFFFFFFFFFFFFFF8LL) != 0)
  {
    *(void *)((v7 & 0xFFFFFFFFFFFFFFF8LL) + 16) = a2;
    *(void *)(StatusReg + 976) = 0LL;
  }

  else
  {
    *(void *)(result + 104) = a2;
    *(void *)(StatusReg + 976) = 0LL;
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)result + 80LL))(result, a3, 2LL);
    }
  }

  if (v4 != 0 && v5 >= (v7 & 7) && (*(_DWORD *)(result + 80) & 0x40000) != 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)result + 80LL))(result, a3, 2LL);
  }
  else {
    uint64_t v9 = a3;
  }
  return result;
}

void _dispatch_main_queue_wakeup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(_DWORD *)(a1 + 80) & 0x40000) != 0) {
    _dispatch_runloop_queue_wakeup((_DWORD *)a1, a2, a3);
  }
  else {
    _dispatch_lane_wakeup(a1, a2, a3);
  }
}

void dispatch_main(void)
{
  if (_dispatch_root_queues_pred != -1) {
    goto LABEL_9;
  }
  while (1)
  {
    if (!pthread_main_np())
    {
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_main() must be called on the main thread";
      __break(1u);
    }

    if (!dword_64E30)
    {
      dword_64E30 = 1;
      _dispatch_main_queue_drain();
      dword_64E30 = 0;
      _dispatch_program_is_probably_callback_driven = 1;
      if (MEMORY[0xFFFFFC100]) {
        kdebug_trace(735838216LL, 0LL, 0LL, 0LL, 0LL);
      }
      pthread_exit(0LL);
    }

    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_main called from a block on the main queue";
    __break(1u);
LABEL_9:
    dispatch_once_f(&_dispatch_root_queues_pred, 0LL, (dispatch_function_t)_dispatch_root_queues_init_once);
  }

dispatch_queue_global_t dispatch_get_global_queue(uint64_t identifier, unint64_t flags)
{
  if ((flags & 0xFFFFFFFFFFFFFFF9LL) != 0 || (~(_BYTE)flags & 6) == 0) {
    return 0LL;
  }
  if (identifier <= -3)
  {
    if (identifier == -32768)
    {
      uint64_t v3 = 3LL;
      goto LABEL_17;
    }

    if (identifier != -128) {
      goto LABEL_14;
    }
LABEL_11:
    uint64_t v3 = 6LL;
    goto LABEL_17;
  }

  switch(identifier)
  {
    case -2LL:
      goto LABEL_11;
    case 0LL:
      uint64_t v3 = 9LL;
      goto LABEL_17;
    case 2LL:
      uint64_t v3 = 12LL;
      goto LABEL_17;
  }

uint64_t libdispatch_init()
{
  if (_dispatch_getenv_BOOL("LIBDISPATCH_STRICT", 0LL)) {
    _dispatch_mode |= 1u;
  }
  if (_dispatch_getenv_BOOL("LIBDISPATCH_COOPERATIVE_POOL_STRICT", 0LL)) {
    _dispatch_mode |= 4u;
  }
  HIDWORD(v1) = qos_class_main() - 5;
  LODWORD(v1) = HIDWORD(v1);
  unsigned int v0 = v1 >> 2;
  if (v0 > 7) {
    int v2 = 0;
  }
  else {
    int v2 = dword_40048[v0];
  }
  dword_64E14 = v2;
  pthread_key_init_np(20LL, _dispatch_queue_cleanup);
  pthread_key_init_np(21LL, _dispatch_frame_cleanup);
  pthread_key_init_np(22LL, _dispatch_cache_cleanup);
  pthread_key_init_np(23LL, _dispatch_context_cleanup);
  pthread_key_init_np(27LL, _dispatch_wlh_cleanup);
  pthread_key_init_np(28LL, _voucher_thread_cleanup);
  pthread_key_init_np(29LL, _dispatch_deferred_items_cleanup);
  pthread_key_init_np(115LL, _os_workgroup_join_token_tsd_cleanup);
  pthread_key_init_np(116LL, _os_workgroup_tsd_cleanup);
  pthread_key_init_np(123LL, &_free);
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  StatusReg[20] = &_dispatch_main_q;
  do
    unint64_t v4 = __ldxr((unint64_t *)&qword_64DF8);
  while (__stxr( v4 & 0xFFFFFFFF00000003LL | (4 * ((StatusReg[3] >> 2) & 0x3FFFFFFFLL)),  (unint64_t *)&qword_64DF8));
  if ((~*((_DWORD *)StatusReg + 50) & 0xF0000) != 0) {
    StatusReg[25] = StatusReg[25] | 0xF0000LL;
  }
  _dispatch_time_init();
  _dispatch_vtable_init();
  _os_object_init();
  _voucher_init();
  _workgroup_init();
  return _dispatch_introspection_init();
}

void _dispatch_queue_cleanup(dispatch_queue_s *a1)
{
  if (a1 != &_dispatch_main_q) {
    _dispatch_queue_cleanup_cold_1((uint64_t)a1);
  }
  _dispatch_queue_cleanup2();
}

void _dispatch_frame_cleanup(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Premature thread exit while a dispatch frame is active";
  qword_61258 = a1;
  __break(1u);
}

uint64_t _dispatch_cache_cleanup(uint64_t result)
{
  if (result)
  {
    do
    {
      uint64_t v1 = *(void *)(result + 16);
      _dispatch_continuation_free_to_heap(result);
      uint64_t result = v1;
    }

    while (v1);
  }

  return result;
}

void _dispatch_context_cleanup(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Premature thread exit while a dispatch context is set";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_wlh_cleanup(uint64_t a1)
{
  uint64_t v1 = (unsigned int *)(a1 & 0xFFFFFFFFFFFFFFFELL);
  int v2 = v1 + 24;
  do
    int v3 = __ldxr(v2);
  while (__stxr(v3 - 1, v2));
  if (v3 <= 0)
  {
    if (v3 < 0) {
      _os_object_allows_weak_reference_cold_1();
    }
    *((void *)v1 + 7) = 0xDEAD000000000000LL;
    _dispatch_object_dealloc(v1);
  }

void _dispatch_deferred_items_cleanup(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Premature thread exit with unhandled deferred items";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_queue_atfork_child()
{
  if ((dword_64E10 & 0x40000) != 0)
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
      unint64_t v1 = __ldxr((unint64_t *)&qword_64DF8);
    while (__stxr( v1 & 0xFFFFFFFF00000003LL | (4 * ((*(void *)(StatusReg + 24) >> 2) & 0x3FFFFFFFLL)),  (unint64_t *)&qword_64DF8));
  }

  if ((_dispatch_unsafe_fork & 1) != 0)
  {
    uint64_t v2 = 0LL;
    off_64E28[0] = (_DWORD *)(&stru_B8 + 72);
    qword_64DF0 = 256LL;
    qword_64EA8 = 256LL;
    qword_64E70 = 256LL;
    do
    {
      int v3 = (char *)&_dispatch_root_queues + v2;
      *((void *)v3 + 13) = 256LL;
      *((void *)v3 + 6) = 256LL;
      v2 += 128LL;
    }

    while (v2 != 2304);
  }

void _dispatch_fork_becomes_unsafe_slow()
{
  do
    unsigned __int8 v0 = __ldxr((unsigned __int8 *)&_dispatch_unsafe_fork);
  while (__stxr(v0 | 1, (unsigned __int8 *)&_dispatch_unsafe_fork));
  if ((v0 & 2) != 0)
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Transition to multithreaded is prohibited";
    __break(1u);
  }

uint64_t _dispatch_prohibit_transition_to_multithreaded(uint64_t result)
{
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  do
    unsigned __int8 v1 = __ldxr((unsigned __int8 *)&_dispatch_unsafe_fork);
  while (__stxr(v1 | 2, (unsigned __int8 *)&_dispatch_unsafe_fork));
  if ((v1 & 1) != 0)
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: The executable is already multithreaded";
    __break(1u);
    do
LABEL_5:
      unsigned __int8 v2 = __ldxr((unsigned __int8 *)&_dispatch_unsafe_fork);
    while (__stxr(v2 & 0xFD, (unsigned __int8 *)&_dispatch_unsafe_fork));
  }

  return result;
}

void _dispatch_block_async_invoke2(void *aBlock, const char *a2)
{
  char v2 = (char)a2;
  int v3 = aBlock;
  if ((void (*)(uint64_t))aBlock[2] == ___dispatch_block_create_block_invoke)
  {
    unint64_t v4 = (char *)(aBlock + 4);
    uint64_t v5 = aBlock[4];
    if (v5 != 3512316172LL)
    {
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corruption of dispatch block object";
      qword_61258 = v5;
      __break(1u);
      goto LABEL_26;
    }
  }

  else
  {
    unint64_t v4 = 0LL;
  }

  uint64_t v6 = *((unsigned int *)v4 + 4);
  if ((v6 & 4) != 0)
  {
    int v11 = *((_DWORD *)v4 + 4);
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: A block object may not be both run more than once and waited for";
    qword_61258 = v6;
    __break(1u);
  }

  else
  {
    if ((v6 & 1) == 0) {
      (*(void (**)(void))(*((void *)v4 + 5) + 16LL))();
    }
    if ((v6 & 8) == 0)
    {
      unint64_t v7 = (unsigned int *)(v4 + 20);
      do
        unsigned int v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      if (!v8) {
        dispatch_group_leave(*((dispatch_group_t *)v4 + 6));
      }
    }

    uint64_t v9 = (unint64_t *)(v4 + 56);
    do
      aBlock = (void *)__ldxr(v9);
    while (__stxr(0LL, v9));
    if (!aBlock) {
      goto LABEL_19;
    }
    if (*((_DWORD *)aBlock + 2) == 0x7FFFFFFF) {
      goto LABEL_19;
    }
    unsigned int v10 = (unsigned int *)(aBlock + 1);
    do
      int v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
    if (v11 > 2)
    {
LABEL_19:
      if ((v2 & 1) == 0) {
        return;
      }
LABEL_24:
      _Block_release(v3);
      return;
    }
  }

  if (v11 != 2)
  {
LABEL_26:
    qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
    __break(1u);
    return;
  }

  _os_object_dispose(aBlock, a2);
  if ((v2 & 1) != 0) {
    goto LABEL_24;
  }
}

void _dispatch_lane_non_barrier_complete(unsigned __int16 *a1, uint64_t a2)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v4 = *(void *)(StatusReg + 24) & 0xFFFFFFFCLL;
  uint64_t v5 = (unint64_t *)(a1 + 28);
  do
  {
    unint64_t v6 = __ldxr(v5);
    unint64_t v7 = v6 - 0x20000000000LL;
    if ((v6 & 0xFFFFFFFC) != 0)
    {
      v7 |= 0x8000000000uLL;
    }

    else if (!(v7 >> 53))
    {
      if ((v6 & 0x10000000000LL) != 0) {
        unint64_t v8 = v6 - 0x10000000000LL;
      }
      else {
        unint64_t v8 = v7 + ((unint64_t)a1[40] << 41);
      }
      BOOL v9 = (v8 & 0x3FFE0000000000LL) == 0x20000000000000LL;
      unint64_t v10 = ((v8 & 0xFFFFFF7FFFFFFFFFLL) + 0x40000000000000LL) | v4;
      if (v9) {
        unint64_t v7 = v10;
      }
      else {
        v7 |= (v6 >> 39) & 1;
      }
    }
  }

  while (__stxr(v7, v5));
  if ((~v6 & 0x1800000000LL) == 0)
  {
    uint64_t v11 = HIDWORD(v6) & 7;
    unsigned int v12 = *(_DWORD *)(StatusReg + 200);
  }

  if (((v7 ^ v6) & 0x40000000000000LL) != 0)
  {
    _dispatch_lane_barrier_complete(a1, 0LL, a2);
  }

  else if (((v7 ^ v6) & 1) != 0)
  {
    if ((a2 & 1) != 0) {
      goto LABEL_26;
    }
    if (*((_DWORD *)a1 + 2) == 0x7FFFFFFF) {
      goto LABEL_26;
    }
    int v13 = (unsigned int *)(a1 + 4);
    do
      int v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if (v14 > 0)
    {
LABEL_26:
      int v15 = (_opaque_pthread_t *)*((void *)a1 + 3);
      if (MEMORY[0xFFFFFC100])
      {
        unint64_t v16 = (_opaque_pthread_t *)*((void *)a1 + 3);
        _dispatch_trace_item_push_internal(v15, (uint64_t *)a1);
        int v15 = v16;
      }

      _dispatch_introspection_queue_item_enqueue((dispatch_queue_s *)v15, (dispatch_object_s *)a1);
      (*(void (**)(void, unsigned __int16 *, unint64_t))(**((void **)a1 + 3) + 88LL))( *((void *)a1 + 3),  a1,  HIDWORD(v7) & 7);
    }

    else
    {
      qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
    }
  }

  else if ((a2 & 1) != 0)
  {
    _os_object_release_internal_n(a1, (_BYTE *)&dword_0 + 2);
  }

double _dispatch_sync_f_slow( unsigned __int16 *a1, void *context, uint64_t (*function)(void), unint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!*(void *)(a5 + 24)) {
    return _dispatch_sync_function_invoke(a5, context, function);
  }
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v12 = StatusReg[4] | 0x10000000LL;
  v14[0] = a6 | 1;
  v14[1] = v12;
  v14[2] = 0LL;
  v14[3] = StatusReg[28];
  v14[4] = (uint64_t)_dispatch_async_and_wait_invoke;
  v14[5] = (uint64_t)v14;
  v14[6] = 0LL;
  int v15 = a1;
  unint64_t v16 = function;
  uint64_t v18 = 0LL;
  uint64_t v19 = 0LL;
  unint64_t v17 = context;
  int v20 = 0;
  int v21 = StatusReg[3];
  __int16 v22 = 0;
  char v23 = 0;
  if (MEMORY[0xFFFFFC100]) {
    _dispatch_trace_item_push_internal((_opaque_pthread_t *)a1, v14);
  }
  _dispatch_introspection_queue_item_enqueue((dispatch_queue_s *)a1, (dispatch_object_s *)v14);
  __DISPATCH_WAIT_FOR_QUEUE__((uint64_t)v14, a5);
  if (v16)
  {
    if (byte_61298) {
      _dispatch_introspection_order_record((uint64_t)a1);
    }
    if (MEMORY[0xFFFFFC100]) {
      _dispatch_trace_item_pop_internal((_opaque_pthread_t *)a1, v14);
    }
    _dispatch_introspection_queue_item_dequeue((dispatch_queue_s *)a1, (dispatch_object_s *)v14);
    _dispatch_sync_invoke_and_complete_recurse(a1, context, function, a4, (dispatch_object_s *)v14);
  }

  else
  {
    _dispatch_sync_complete_recurse(a1, v15, a4);
  }

  return result;
}

double _dispatch_sync_recurse(uint64_t a1, void *context, uint64_t (*function)(void), unint64_t a4)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(StatusReg + 24) & 0xFFFFFFFCLL;
  while (2)
  {
    if (*(_WORD *)(v9 + 80) == 1)
    {
      uint64_t v11 = (unint64_t *)(v9 + 56);
      while (1)
      {
        unint64_t v12 = __ldaxr(v11);
        if (v12 != (v12 & 0x3000000000LL | 0x1FFE0000000000LL)) {
          break;
        }
        if (!__stxr(v10 | v12 & 0x3000000000LL | 0x60000000000002LL, v11)) {
          goto LABEL_6;
        }
      }

      __clrex();
      uint64_t v17 = 2LL;
      return _dispatch_sync_f_slow((unsigned __int16 *)a1, context, function, a4, v9, v17);
    }

    if (*(void *)(v9 + 48))
    {
LABEL_19:
      uint64_t v17 = 0LL;
      return _dispatch_sync_f_slow((unsigned __int16 *)a1, context, function, a4, v9, v17);
    }

    int v13 = (unint64_t *)(v9 + 56);
    do
    {
      unint64_t v14 = __ldxr(v13);
      if ((v14 & 0xFFC0018000000000LL) != 0)
      {
        __clrex();
        goto LABEL_19;
      }
    }

    while (__stxr(v14 + 0x20000000000LL, v13));
LABEL_6:
    uint64_t v9 = *(void *)(v9 + 24);
    if (*(void *)(v9 + 24)) {
      continue;
    }
    break;
  }

  if (byte_61298) {
    _dispatch_introspection_order_record(a1);
  }
  int v15 = _dispatch_introspection_queue_fake_sync_push_pop( (_opaque_pthread_t *)a1,  (uint64_t)context,  (uint64_t)function,  a4);
  _dispatch_sync_invoke_and_complete_recurse((unsigned __int16 *)a1, context, function, a4, (dispatch_object_s *)v15);
  return result;
}

void _dispatch_lane_barrier_sync_invoke_and_complete( uint64_t a1, void *context, uint64_t (*function)(void), dispatch_object_s *a4)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v9 = (_OWORD *)(StatusReg + 160);
  __int128 v13 = *(_OWORD *)(StatusReg + 160);
  *(void *)(StatusReg + 160) = a1;
  *(void *)(StatusReg + 168) = &v13;
  uint64_t v10 = (void (__cdecl *)(void *))function;
  if (context)
  {
    uint64_t v10 = (void (__cdecl *)(void *))function;
  }

  _dispatch_introspection_callout_entry(context, v10);
  _dispatch_client_callout((uint64_t)context, function);
  _dispatch_introspection_callout_return(context, v10);
  *uint64_t v9 = v13;
  if (MEMORY[0xFFFFFC100]) {
    kdebug_trace(772079660LL, a4, 0LL, 0LL, 0LL);
  }
  _dispatch_introspection_queue_item_complete(a4);
  if (!*(void *)(a1 + 48) && *(unsigned __int16 *)(a1 + 80) < 2u)
  {
    uint64_t v11 = (unint64_t *)(a1 + 56);
    while (1)
    {
      unint64_t v12 = __ldxr(v11);
      if ((v12 & 0xFF80008800000001LL) != 0) {
        break;
      }
      if (!__stlxr((v12 & 0xFFFFFFF000000001LL) - 0x40020000000000LL, v11)) {
        return;
      }
    }

    __clrex();
  }

  _dispatch_lane_barrier_complete((unsigned __int16 *)a1, 0LL, 0LL);
}

unsigned int *_dispatch_async_and_wait_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if ((*(_BYTE *)(a1 + 106) & 1) != 0) {
    int v3 = objc_autoreleasePoolPush();
  }
  else {
    int v3 = 0LL;
  }
  if (byte_61298) {
    _dispatch_introspection_order_record(v2);
  }
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v5 = (_OWORD *)(StatusReg + 160);
  __int128 v11 = *(_OWORD *)(StatusReg + 160);
  *(void *)(StatusReg + 160) = v2;
  *(void *)(StatusReg + 168) = a1 + 80;
  unint64_t v7 = *(void (**)(void (**)(void)))(a1 + 64);
  unint64_t v6 = *(void **)(a1 + 72);
  unint64_t v8 = (void (__cdecl *)(void *))v7;
  if (v6)
  {
    unint64_t v8 = *(void (__cdecl **)(void *))(a1 + 64);
    if (v7 == _dispatch_call_block_and_release) {
      unint64_t v8 = (void (__cdecl *)(void *))v6[2];
    }
  }

  _dispatch_introspection_callout_entry(*(void **)(a1 + 72), v8);
  _dispatch_client_callout((uint64_t)v6, (uint64_t (*)(void))v7);
  _dispatch_introspection_callout_return(v6, v8);
  *uint64_t v5 = v11;
  if (v3) {
    objc_autoreleasePoolPop(v3);
  }
  *(void *)(a1 + 56) = *(void *)v5;
  *(void *)(a1 + 64) = 0LL;
  if (*(void *)(a1 + 48) != -4LL) {
    return (unsigned int *)_dispatch_event_loop_cancel_waiter(a1);
  }
  double result = (unsigned int *)(a1 + 96);
  do
    unsigned int v10 = __ldxr(result);
  while (__stlxr(v10 + 1, result));
  if (v10) {
    return (unsigned int *)_dispatch_thread_event_signal_slow((uint64_t)result);
  }
  return result;
}

void __DISPATCH_WAIT_FOR_QUEUE__(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (unint64_t *)(a2 + 56);
  while (1)
  {
    unint64_t v5 = __ldxr(v4);
    if ((v5 & 0xFF80002000000002LL) != 0x2000000002LL) {
      break;
    }
    v5 |= 0x800000000uLL;
    if (!__stxr(v5, v4)) {
      goto LABEL_4;
    }
  }

  __clrex();
LABEL_4:
  if ((*(_DWORD *)(a1 + 100) ^ v5) <= 3)
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_sync called on queue already owned by current thread";
    qword_61258 = v5;
    __break(1u);
    return;
  }

  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(StatusReg + 160);
  if ((v5 & 0xFF80001000000000LL) != 0)
  {
    *(void *)(a1 + 48) = -4LL;
    unint64_t v7 = (void *)(a1 + 48);
LABEL_7:
    unsigned int v8 = *(_DWORD *)(StatusReg + 200);
    unsigned int v9 = (v8 >> 8) & 0xF;
    unsigned int v10 = (unsigned __int16)v8 >> 12;
    unsigned int v11 = HIWORD(v8) & 0xF;
    if (v9 <= v10) {
      unsigned int v9 = v10;
    }
    if (v9 > v11) {
      LOBYTE(v11) = v9;
    }
    *(_BYTE *)(a1 + 105) = v11;
    *(_BYTE *)(a1 + 104) = v11;
    *(_DWORD *)(a1 + 96) = 0;
    goto LABEL_16;
  }

  if ((v5 & 0x2000000000LL) != 0)
  {
    *(void *)(a1 + 48) = a2;
    uint64_t v12 = a2;
  }

  else
  {
    _dispatch_wait_compute_wlh(a2, a1);
    uint64_t v12 = *(void *)(a1 + 48);
  }

  unint64_t v7 = (void *)(a1 + 48);
  if (v12 == -4) {
    goto LABEL_7;
  }
LABEL_16:
  *(void *)(StatusReg + 968) = a1;
  unsigned int v13 = __clz(__rbit32((*(_DWORD *)(a1 + 8) >> 8) & 0x3FFF));
  if (((*(_DWORD *)(a1 + 8) >> 8) & 0x3FFF) != 0) {
    uint64_t v14 = v13 + 1;
  }
  else {
    uint64_t v14 = 0LL;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 88LL))(a2, a1, v14);
  _dispatch_introspection_runtime_event();
  if (*(void *)(a1 + 48) == -4LL)
  {
    int v15 = (unsigned int *)(a1 + 96);
    do
    {
      unsigned int v16 = __ldaxr(v15);
      unsigned int v17 = v16 - 1;
    }

    while (__stxr(v17, v15));
    if (v17) {
      _dispatch_thread_event_wait_slow(v15);
    }
  }

  else if ((*(_BYTE *)(a1 + 106) & 8) == 0)
  {
    _dispatch_event_loop_wait_for_ownership(a1);
  }

  *(void *)(StatusReg + 968) = 0LL;
  if (*v7 == -4LL)
  {
    unsigned int v18 = *(unsigned __int8 *)(a1 + 105);
    if (v18 > *(unsigned __int8 *)(a1 + 104))
    {
      unsigned int v19 = *(_DWORD *)(StatusReg + 200);
      if ((HIWORD(v19) & 0xF) < v18) {
        *(void *)(StatusReg + 200) = v19 & 0xFFF0FFFF | (v18 << 16);
      }
    }
  }

void _dispatch_sync_complete_recurse(unsigned __int16 *a1, unsigned __int16 *a2, unint64_t a3)
{
  uint64_t v5 = (a3 >> 1) & 1;
  do
  {
    if (a1 == a2) {
      break;
    }
    if ((v5 & 1) != 0) {
      (*(void (**)(unsigned __int16 *, void, uint64_t))(*(void *)a1 + 80LL))(a1, 0LL, 4LL);
    }
    else {
      _dispatch_lane_non_barrier_complete(a1, 0LL);
    }
    a1 = (unsigned __int16 *)*((void *)a1 + 3);
    LOBYTE(v5) = a1[40] == 1;
  }

  while (*((void *)a1 + 3));
}

void _dispatch_sync_invoke_and_complete_recurse( unsigned __int16 *a1, void *context, uint64_t (*function)(void), unint64_t a4, dispatch_object_s *a5)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned int v11 = (_OWORD *)(StatusReg + 160);
  __int128 v13 = *(_OWORD *)(StatusReg + 160);
  *(void *)(StatusReg + 160) = a1;
  *(void *)(StatusReg + 168) = &v13;
  uint64_t v12 = (void (__cdecl *)(void *))function;
  if (context)
  {
    uint64_t v12 = (void (__cdecl *)(void *))function;
  }

  _dispatch_introspection_callout_entry(context, v12);
  _dispatch_client_callout((uint64_t)context, function);
  _dispatch_introspection_callout_return(context, v12);
  _OWORD *v11 = v13;
  if (MEMORY[0xFFFFFC100]) {
    kdebug_trace(772079660LL, a5, 0LL, 0LL, 0LL);
  }
  _dispatch_introspection_queue_item_complete(a5);
  _dispatch_sync_complete_recurse(a1, 0LL, a4);
}

unsigned int *_dispatch_wait_compute_wlh(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 80);
  if ((v4 & 0x400000) != 0)
  {
    *(_BYTE *)(a2 + 106) |= 0x40u;
    uint64_t v5 = (unsigned int *)(a1 + 100);
    unsigned int v6 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFC;
    while (!__ldaxr(v5))
    {
      if (!__stxr(v6, v5)) {
        goto LABEL_7;
      }
    }

    __clrex();
    _dispatch_unfair_lock_lock_slow((uint64_t)v5, 0x10000);
  }

void _dispatch_sync_invoke_and_complete( unsigned __int16 *a1, void *context, uint64_t (*function)(void), dispatch_object_s *a4)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned int v9 = (_OWORD *)(StatusReg + 160);
  __int128 v11 = *(_OWORD *)(StatusReg + 160);
  *(void *)(StatusReg + 160) = a1;
  *(void *)(StatusReg + 168) = &v11;
  unsigned int v10 = (void (__cdecl *)(void *))function;
  if (context)
  {
    unsigned int v10 = (void (__cdecl *)(void *))function;
  }

  _dispatch_introspection_callout_entry(context, v10);
  _dispatch_client_callout((uint64_t)context, function);
  _dispatch_introspection_callout_return(context, v10);
  *unsigned int v9 = v11;
  if (MEMORY[0xFFFFFC100]) {
    kdebug_trace(772079660LL, a4, 0LL, 0LL, 0LL);
  }
  _dispatch_introspection_queue_item_complete(a4);
  _dispatch_lane_non_barrier_complete(a1, 0LL);
}

void _dispatch_async_and_wait_recurse(uint64_t a1, uint64_t *a2, int a3, unint64_t a4)
{
  if (MEMORY[0xFFFFFC100]) {
    _dispatch_trace_item_push_internal((_opaque_pthread_t *)a1, a2);
  }
  _dispatch_introspection_queue_item_enqueue((dispatch_queue_s *)a1, (dispatch_object_s *)a2);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = a1;
  if ((*(_DWORD *)(a1 + 80) & 0x1000000) != 0) {
    goto LABEL_37;
  }
  unsigned int v10 = (_DWORD *)(a1 + 80);
  uint64_t v11 = a1;
  unint64_t v12 = a4;
LABEL_5:
  if ((v8 & 0x3000000000LL) != 0)
  {
    unint64_t v13 = *(void *)(v11 + 24);
    if (v13 < (unint64_t)&_dispatch_root_queues || v13 >= (unint64_t)&_dispatch_queue_serial_numbers)
    {
      uint64_t v9 = v11;
LABEL_37:
      *a2 &= ~0x80uLL;
      a2[7] = v9;
      uint64_t v11 = v9;
      goto LABEL_34;
    }
  }

  if ((v12 & 2) != 0)
  {
    unint64_t v15 = (unint64_t)*(unsigned __int16 *)(v11 + 80) << 41;
    unsigned int v16 = (unint64_t *)(v11 + 56);
    while (1)
    {
      unint64_t v17 = __ldaxr(v16);
      if (v17 != (v17 & 0x3000000000LL) - v15 + 0x20000000000000LL) {
        break;
      }
      if (!__stxr(v17 & 0x3000000000LL | a3 & 0xFFFFFFFC | 0x60000000000002LL, v16)) {
        goto LABEL_14;
      }
    }

LABEL_33:
    __clrex();
    goto LABEL_34;
  }

  if (!*(void *)(v11 + 48))
  {
    __int16 v22 = (unint64_t *)(v11 + 56);
    while (1)
    {
      unint64_t v23 = __ldxr(v22);
      if ((v23 & 0xFFC0018000000000LL) != 0) {
        goto LABEL_33;
      }
      if (!__stxr(v23 + 0x20000000000LL, v22))
      {
LABEL_14:
        unsigned int v18 = *(_DWORD *)(v11 + 84) & 0xFFF;
        if (v18)
        {
          uint64_t v19 = v18 >= 0x100 ? 256LL << (BYTE1(v18) - 1) : 0LL;
          unint64_t v20 = v19 & 0xFFFFFFFFFFFFFF00LL | *(_DWORD *)(v11 + 84);
          if (v20 > (a2[1] & 0xFFFFFFuLL)) {
            a2[1] = v20 | 0x10000000;
          }
        }

        if ((*((_BYTE *)a2 + 106) & 3) == 0) {
          *((_BYTE *)a2 + 106) = *((_BYTE *)a2 + 106) & 0xFC | HIWORD(*v10) & 3;
        }
        uint64_t v9 = *(void *)(v11 + 24);
        if (!*(void *)(v9 + 24))
        {
          _dispatch_async_and_wait_invoke_and_complete_recurse((_opaque_pthread_t *)a1, (uint64_t)a2, v11, a4);
          return;
        }

        unsigned int v10 = (_DWORD *)(v9 + 80);
        unint64_t v21 = v12 & 0xFFFFFFFFFFFFFFFDLL;
        v12 |= 2uLL;
        if (*(_WORD *)(v9 + 80) != 1) {
          unint64_t v12 = v21;
        }
        *a2 = v12;
        uint64_t v8 = *(void *)(v9 + 56);
        uint64_t v11 = v9;
        if ((*(_DWORD *)(v9 + 80) & 0x1000000) == 0) {
          goto LABEL_5;
        }
        goto LABEL_37;
      }
    }
  }

  if (v5) {
    uint64_t v24 = v5;
  }
  else {
    uint64_t v24 = (unint64_t)v8;
  }
  _dispatch_mach_send_push_and_trydrain(v4, v24, v7, v6);
  if ((v25 & 1) == 0) {
    return 0LL;
  }
LABEL_37:
  unint64_t v26 = (void *)*((void *)v8 + 8);
  if (v26) {
    os_release(v26);
  }
  *((void *)v8 + 8) = 0LL;
  *((void *)v8 + 2) = -1985229329LL;
  dispatch_release(v8);
  return 1LL;
}

void _dispatch_async_and_wait_f_slow(_opaque_pthread_t *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a3 + 64)) {
    _dispatch_async_and_wait_invoke_and_complete_recurse(a1, a3, *(void *)(a3 + 56), a2);
  }
  else {
    _dispatch_sync_complete_recurse((unsigned __int16 *)a1, *(unsigned __int16 **)(a3 + 56), a2);
  }
}

void _dispatch_async_and_wait_invoke_and_complete_recurse( _opaque_pthread_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (*(_BYTE *)(*(void *)a3 + 40LL) != 18LL && (*(void *)(a3 + 56) & 0x2000000000LL) == 0) {
    a3 = -4LL;
  }
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v8 = *(void *)(StatusReg + 216);
  *(void *)(StatusReg + 216) = a3;
  if ((*(_BYTE *)(a2 + 106) & 1) != 0) {
    uint64_t v9 = objc_autoreleasePoolPush();
  }
  else {
    uint64_t v9 = 0LL;
  }
  uint64_t v10 = *(void *)(a2 + 8);
  uint64_t v11 = *(void **)(a2 + 24);
  if (byte_61298) {
    _dispatch_introspection_order_record((uint64_t)a1);
  }
  __int128 v30 = *(_OWORD *)(StatusReg + 160);
  *(void *)(StatusReg + 160) = a1;
  *(void *)(StatusReg + 168) = &v30;
  uint64_t v12 = *(void *)(StatusReg + 32);
  BOOL v13 = (v12 & 0xFFFFFFuLL) >= (v10 & 0xFFFFFFuLL) || (v12 & 0xFFFFFF) == 0;
  if (v13) {
    uint64_t v14 = 0LL;
  }
  else {
    uint64_t v14 = v12 & 0xFFFFFF;
  }
  unint64_t v15 = v10 & 0xFFFFFFFF02FFFFFFLL;
  if (v13) {
    unint64_t v16 = 0LL;
  }
  else {
    unint64_t v16 = v10 & 0xFFFFFFFF02FFFFFFLL;
  }
  unint64_t v28 = v14;
  context = v9;
  uint64_t v27 = v12 & 0xFFFFFF;
  BOOL v26 = v13;
  if ((v12 & 0x1000000) != 0)
  {
    if (v16) {
      goto LABEL_50;
    }
    unint64_t v16 = v12 & 0xFFFFFFFFFEFFFFFFLL;
    goto LABEL_43;
  }

  if (v16 != (v12 & 0xFFFFFFFF77FFFFFFLL))
  {
LABEL_43:
    unint64_t v15 = v16;
    if (v16) {
      goto LABEL_50;
    }
  }

  if (v11 == (void *)-1LL)
  {
LABEL_22:
    uint64_t v17 = v8;
    goto LABEL_23;
  }

  if (*(void **)(StatusReg + 224) == v11)
  {
    if (v11)
    {
      uint64_t v17 = v8;
      os_retain(v11);
      goto LABEL_23;
    }

    goto LABEL_22;
  }

  unint64_t v15 = 0LL;
LABEL_50:
  uint64_t v17 = v8;
  uint64_t v11 = (void *)_dispatch_set_priority_and_voucher_slow(v15, (unsigned int *)v11, 0);
LABEL_23:
  if (MEMORY[0xFFFFFC100]) {
    _dispatch_trace_item_pop_internal(a1, (uint64_t *)a2);
  }
  unsigned int v18 = (unsigned __int16 *)a1;
  _dispatch_introspection_queue_item_dequeue((dispatch_queue_s *)a1, (dispatch_object_s *)a2);
  unint64_t v20 = *(void (**)(void (**)(void)))(a2 + 64);
  uint64_t v19 = *(void **)(a2 + 72);
  unint64_t v21 = (void (__cdecl *)(void *))v20;
  if (v19)
  {
    unint64_t v21 = *(void (__cdecl **)(void *))(a2 + 64);
    if (v20 == _dispatch_call_block_and_release) {
      unint64_t v21 = (void (__cdecl *)(void *))v19[2];
    }
  }

  _dispatch_introspection_callout_entry(*(void **)(a2 + 72), v21);
  _dispatch_client_callout((uint64_t)v19, (uint64_t (*)(void))v20);
  _dispatch_introspection_callout_return(v19, v21);
  uint64_t v22 = *(void *)(StatusReg + 32);
  if ((v22 & 0x1000000) != 0)
  {
    unint64_t v24 = a4;
    uint64_t v25 = context;
    unint64_t v23 = v27;
    if (!v26)
    {
LABEL_52:
      _dispatch_set_priority_and_voucher_slow(v23, (unsigned int *)v11, 6);
      goto LABEL_34;
    }

    unint64_t v23 = v22 & 0xFFFFFFFFFEFFFFFFLL;
  }

  else
  {
    unint64_t v23 = v28;
    unint64_t v24 = a4;
    uint64_t v25 = context;
    if (v28 == (v22 & 0xFFFFFFFF77FFFFFFLL)) {
      goto LABEL_30;
    }
  }

  if (v23) {
    goto LABEL_52;
  }
LABEL_30:
  if (*(void **)(StatusReg + 224) != v11)
  {
    unint64_t v23 = 0LL;
    goto LABEL_52;
  }

  if (v11) {
    os_release(v11);
  }
LABEL_34:
  *(_OWORD *)(StatusReg + 160) = v30;
  if (v25) {
    objc_autoreleasePoolPop(v25);
  }
  if (MEMORY[0xFFFFFC100]) {
    kdebug_trace(772079660LL, a2, 0LL, 0LL, 0LL);
  }
  _dispatch_introspection_queue_item_complete((dispatch_object_s *)a2);
  *(void *)(StatusReg + 216) = v17;
  _dispatch_sync_complete_recurse(v18, 0LL, v24);
}

void _dispatch_queue_specific_head_dispose(void *a1)
{
  int v3 = a1 + 1;
  uint64_t v2 = (void *)a1[1];
  if (!v2) {
    goto LABEL_9;
  }
  v2[4] = v7;
  uint64_t v4 = a1[2];
  v7[0] = v2;
  v7[1] = v4;
  a1[1] = 0LL;
  a1[2] = v3;
  do
  {
    uint64_t v5 = (void *)v2[3];
    if (v2[2])
    {
      v2[3] = 0LL;
      unsigned int v6 = (void *)a1[2];
      v2[4] = v6;
      void *v6 = v2;
      a1[2] = v2 + 3;
    }

    else
    {
      free(v2);
    }

    uint64_t v2 = v5;
  }

  while (v5);
  if (*v3) {
    _dispatch_barrier_async_detached_f( (_opaque_pthread_t *)&off_65340,  (uint64_t)a1,  (uint64_t)_dispatch_queue_specific_head_dispose_slow);
  }
  else {
LABEL_9:
  }
    free(a1);
}

void _dispatch_queue_specific_head_dispose_slow(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    do
    {
      int v3 = *(void **)(v2 + 8);
      uint64_t v4 = *(void (**)(void (**)(void)))(v2 + 16);
      BOOL v5 = v4 != _dispatch_call_block_and_release || v3 == 0LL;
      unsigned int v6 = *(void (__cdecl **)(void *))(v2 + 16);
      if (!v5) {
        unsigned int v6 = (void (__cdecl *)(void *))v3[2];
      }
      uint64_t v7 = *(void *)(v2 + 24);
      _dispatch_introspection_callout_entry(*(void **)(v2 + 8), v6);
      _dispatch_client_callout((uint64_t)v3, (uint64_t (*)(void))v4);
      _dispatch_introspection_callout_return(v3, v6);
      free((void *)v2);
      uint64_t v2 = v7;
    }

    while (v7);
  }

  free(a1);
}

unsigned int *_dispatch_non_barrier_waiter_redirect_or_wake(uint64_t a1, uint64_t a2)
{
LABEL_1:
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)a2;
  if ((*(void *)a2 & 0x80) != 0)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 84) & 0xFFF;
    if (v4)
    {
      uint64_t v5 = v4 >= 0x100 ? 256LL << (BYTE1(v4) - 1) : 0LL;
      unint64_t v6 = v5 & 0xFFFFFFFFFFFFFF00LL | *(_DWORD *)(a1 + 84);
      if (v6 > (*(void *)(a2 + 8) & 0xFFFFFFuLL)) {
        *(void *)(a2 + 8) = v6 | 0x10000000;
      }
    }

    if ((*(_BYTE *)(a2 + 106) & 3) == 0) {
      *(_BYTE *)(a2 + 106) = *(_BYTE *)(a2 + 106) & 0xFC | HIWORD(*(_DWORD *)(a1 + 80)) & 3;
    }
    if ((v2 & 0x3000000000LL) == 0) {
      goto LABEL_15;
    }
    *(void *)(a2 + 56) = a1;
    return _dispatch_waiter_wake_wlh_anon(a2);
  }

  if ((v2 & 0x3000000000LL) != 0) {
    return _dispatch_waiter_wake_wlh_anon(a2);
  }
LABEL_15:
  a1 = *(void *)(a1 + 24);
  if (*(_WORD *)(a1 + 80) == 1)
  {
    *(void *)a2 = v3 | 2;
  }

  else
  {
    *(void *)a2 = v3 & 0xFFFFFFFFFFFFFFFDLL;
    if (!*(void *)(a1 + 48))
    {
      uint64_t v7 = (unint64_t *)(a1 + 56);
      while (1)
      {
        unint64_t v8 = __ldxr(v7);
        if ((v8 & 0xFFC0018000000000LL) != 0) {
          break;
        }
        if (!__stxr(v8 + 0x20000000000LL, v7)) {
          goto LABEL_1;
        }
      }

      __clrex();
    }
  }

  return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 88LL))(a1);
}

unsigned int *_dispatch_waiter_wake_wlh_anon(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 105);
  double result = (unsigned int *)(a1 + 96);
  do
    unsigned int v4 = __ldxr(result);
  while (__stlxr(v4 + 1, result));
  if (v4) {
    return (unsigned int *)_dispatch_thread_event_signal_slow((uint64_t)result);
  }
  return result;
}

unsigned int *_dispatch_barrier_waiter_redirect_or_wake( uint64_t a1, uint64_t a2, char a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8 = a1;
  if ((a4 & 0x2000000000LL) != 0)
  {
    uint64_t v12 = a1;
    if ((a3 & 1) == 0)
    {
      if ((a4 & 1) == 0) {
        goto LABEL_30;
      }
      uint64_t v12 = a1;
      if ((a5 & 1) != 0) {
        goto LABEL_30;
      }
      uint64_t v12 = a1;
      if (*(_DWORD *)(a1 + 8) == 0x7FFFFFFF) {
        goto LABEL_30;
      }
      BOOL v13 = (unsigned int *)(a1 + 8);
      do
      {
        unsigned int v14 = __ldxr(v13);
        BOOL v15 = __OFSUB__(v14, 1);
        signed int v16 = v14 - 1;
      }

      while (__stlxr(v16, v13));
      uint64_t v12 = a1;
      if (!((v16 < 0) ^ v15 | (v16 == 0))) {
        goto LABEL_30;
      }
      qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
      __break(1u);
    }

    if ((a5 & 1) != 0) {
      goto LABEL_26;
    }
  }

  else
  {
    if ((~a4 & 0x1800000000LL) == 0)
    {
      uint64_t v9 = HIDWORD(a4) & 7;
      unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      unsigned int v11 = *(_DWORD *)(StatusReg + 200);
    }

    uint64_t v12 = -4LL;
    if ((a3 & 1) == 0) {
      goto LABEL_30;
    }
  }

  if (*(_DWORD *)(a1 + 8) == 0x7FFFFFFF) {
    goto LABEL_30;
  }
  uint64_t v17 = (unsigned int *)(a1 + 8);
  do
  {
    unsigned int v18 = __ldxr(v17);
    BOOL v19 = __OFSUB__(v18, 2);
    signed int v20 = v18 - 2;
  }

  while (__stlxr(v20, v17));
  if (!((v20 < 0) ^ v19 | (v20 == 0))) {
    goto LABEL_30;
  }
  qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
LABEL_26:
  uint64_t v12 = a1;
  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    unint64_t v21 = (unsigned int *)(a1 + 8);
    do
    {
      unsigned int v22 = __ldxr(v21);
      BOOL v23 = __OFSUB__(v22, 1);
      signed int v24 = v22 - 1;
    }

    while (__stlxr(v24, v21));
    uint64_t v12 = a1;
    if ((v24 < 0) ^ v23 | (v24 == 0))
    {
      qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
      __break(1u);
      goto LABEL_47;
    }
  }

unsigned int *_dispatch_waiter_wake(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 48);
  double result = (unsigned int *)_dispatch_event_loop_wake_owner(a1, a2, a3, a4);
  if (v5 == -4) {
    return _dispatch_waiter_wake_wlh_anon(a1);
  }
  return result;
}

void _dispatch_lane_concurrent_drain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *a4;
  uint64_t v52 = (unint64_t *)(a1 + 48);
  if (*(void *)(a1 + 48))
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    __int128 v64 = *(_OWORD *)(StatusReg + 160);
    *(void *)(StatusReg + 160) = a1;
    *(void *)(StatusReg + 168) = &v64;
    if ((v5 & 0x40000000000000LL) != 0) {
      uint64_t v9 = 0x40000000000000LL;
    }
    else {
      uint64_t v9 = v5 & 0x3FFE0000000000LL;
    }
    v63 = (unint64_t *)(a1 + 104);
    uint64_t v10 = *(void *)(a1 + 104);
    if (!v10) {
      uint64_t v10 = _dispatch_wait_for_enqueuer(v63, (uint64_t)v52);
    }
    uint64_t v54 = (_OWORD *)(StatusReg + 160);
    if (!(*(void *)(a1 + 56) >> 55))
    {
      unsigned int v11 = (unint64_t *)(a1 + 56);
      unsigned int v55 = (a3 >> 21) & 1;
      unsigned int v56 = a3 & 0xFFFF0000;
      uint64_t v60 = v4;
      do
      {
        if (v4 != *(void *)(a1 + 24)) {
          break;
        }
        unint64_t v12 = *(void *)v10;
        if (*(void *)v10 >= 0x1000uLL)
        {
          if ((*(void *)(v12 + 40) & 0xF0LL) == 0x10 && (*(_DWORD *)(v10 + 80) & 0x80000) != 0)
          {
LABEL_18:
            if (v9 != 0x40000000000000LL)
            {
              unint64_t v14 = ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) - 0x10000000000LL;
              do
              {
                unint64_t v15 = __ldaxr(v11);
                unint64_t v16 = v15 - v9;
                if ((v15 & 0x10000000000LL) != 0) {
                  unint64_t v17 = 0LL;
                }
                else {
                  unint64_t v17 = v14;
                }
                unint64_t v18 = v17 + v16;
                if (!(v18 >> 53)) {
                  v18 += 0x40010000000000LL;
                }
              }

              while (__stxr(v18 & 0xFFFFFF7FFFFFFFFFLL, v11));
              if ((v18 & 0x40000000000000LL) == 0) {
                goto LABEL_172;
              }
              unint64_t v12 = *(void *)v10;
            }

            if (v12 <= 0xFFF && (a3 & 0x80000) == 0 && (v12 & 1) != 0)
            {
              *(void *)(a2 + 8) = v10;
              if ((a3 & 8) == 0)
              {
                _OWORD *v54 = v64;
                return;
              }

              qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Deferred continuation on source, mach channel or mgr";
              __break(1u);
              goto LABEL_171;
            }

            uint64_t v19 = *(void *)(v10 + 16);
            unint64_t *v63 = v19;
            if (!v19)
            {
              unint64_t v41 = (unint64_t *)(v10 + 16);
              while (1)
              {
                unint64_t v42 = __ldxr(v52);
                if (v10 != (v42 & 0xFFFFFFFFFFFFFFF8LL)) {
                  break;
                }
                uint64_t v9 = 0x40000000000000LL;
                if (!__stlxr(0LL, v52)) {
                  goto LABEL_41;
                }
              }

              __clrex();
              uint64_t v19 = *v41;
              if (!*v41) {
                uint64_t v19 = _dispatch_wait_for_enqueuer(v41, (uint64_t)v52);
              }
              unint64_t *v63 = v19;
            }

            uint64_t v9 = 0x40000000000000LL;
            goto LABEL_41;
          }
        }

        else if ((v12 & 2) != 0)
        {
          goto LABEL_18;
        }

        if (v9 == 0x40000000000000LL)
        {
          do
            unint64_t v13 = __ldxr(v11);
          while (__stlxr(v13 ^ 0x40000000000000LL, v11));
          uint64_t v9 = (unint64_t)*(unsigned __int16 *)(a1 + 80) << 41;
        }

        else if (!v9)
        {
          if (v12 > 0xFFF || (v12 & 0x81) == 0)
          {
            while (1)
            {
              unint64_t v47 = __ldaxr(v11);
              if ((v47 & 0xFFE0018000000000LL) != 0) {
                break;
              }
              if (!__stxr(v47 + 0x20000000000LL, v11))
              {
                uint64_t v9 = 0x20000000000LL;
                goto LABEL_34;
              }
            }

LABEL_171:
            __clrex();
LABEL_172:
            *a4 &= 0x4000000001uLL;
            _OWORD *v54 = v64;
            return;
          }

          do
          {
            unint64_t v43 = __ldxr(v11);
            uint64_t v9 = 0x20000000000LL;
          }

          while (__stxr(v43 + 0x20000000000LL, v11));
        }

void _dispatch_workloop_bound_thread_init_once()
{
  int v2 = 0;
  size_t v1 = 4LL;
  int v0 = sysctlbyname("kern.kern_event.thread_bound_kqwl_support_enabled", &v2, &v1, 0LL, 0LL);
  if (v0) {
    _dispatch_bug(4220LL, v0);
  }
  if (v2) {
    _dispatch_thread_bound_kqwl_enabled = 1;
  }
}

void _dispatch_workloop_activate_simulator_fallback(uint64_t a1, __int128 *a2)
{
  uint64_t v3 = _dispatch_pthread_root_queue_create("com.apple.libdispatch.workloop_fallback", 0, a2, 0LL, 0LL);
  *(void *)(a1 + 24) = v3;
  if (*(_DWORD *)(v3 + 8) != 0x7FFFFFFF)
  {
    uint64_t v4 = (unsigned int *)(v3 + 8);
    do
      int v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    if (v5 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

  dispatch_release((dispatch_object_t)v3);
  unint64_t v6 = (unint64_t *)(a1 + 56);
  do
    unint64_t v7 = __ldxr(v6);
  while (__stxr(v7 & 0xFFFFFFCFFFFFFFFFLL | 0x1000000000LL, v6));
}

void _dispatch_queue_wakeup_with_override_slow(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v5 = HIDWORD(a2) & 7;
  unint64_t v6 = *(int **)(a1 + 24);
  if ((a2 & 0x1000000000LL) != 0)
  {
    if (a2 >= 4)
    {
      uint64_t v18 = a2 | 3;
      if ((_DWORD)v5) {
        uint64_t v19 = (256LL << ((BYTE4(a2) & 7u) - 1)) | 0xFF;
      }
      else {
        uint64_t v19 = 255LL;
      }
      _pthread_workqueue_override_start_direct_check_owner(v18, v19, a1 + 56);
      goto LABEL_44;
    }

    goto LABEL_18;
  }

  if ((*(_DWORD *)(a1 + 80) & 0x400000) == 0)
  {
LABEL_18:
    char v12 = 1;
LABEL_19:
    unint64_t v13 = (unsigned int *)(a1 + 100);
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_20:
    unsigned int v15 = v5;
    if ((*(void *)(*(void *)v6 + 40LL) & 0x10000) != 0)
    {
    }

    else if (*(void *)(*(void *)v6 + 40LL) == 18LL)
    {
      _dispatch_workloop_push_stealer((uint64_t)v6, a1, v5);
    }

    else if ((v6[15] & 7) == 0 || (v6[15] & 7u) < v5)
    {
      (*(void (**)(int *, uint64_t, void))(*(void *)v6 + 80LL))(v6, v5, 0LL);
    }

    if ((v12 & 1) == 0)
    {
      while (1)
      {
        do
        {
          while (1)
          {
            unsigned int v17 = __ldxr(v13);
            if ((v17 & 2) != 0) {
              break;
            }
            if (!__stlxr(0, v13)) {
              goto LABEL_46;
            }
          }
        }

        while (__stlxr(v17 ^ 2, v13));
        if (v17 == 2) {
          break;
        }
        __dmb(9u);
        if ((*(void *)(StatusReg + 200) & 0xF0000LL) == 0) {
          *(void *)(StatusReg + 200) = *(void *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
        }
        uint64_t v5 = *(_DWORD *)(a1 + 60) & 7;
        if ((*(_DWORD *)(a1 + 60) & 7u) > v15) {
          goto LABEL_20;
        }
      }

LABEL_46:
      if ((v17 & 1) != 0) {
        _dispatch_unfair_lock_unlock_slow(a1 + 100, v17);
      }
    }

    goto LABEL_44;
  }

  unint64_t v7 = (unsigned int *)(a1 + 100);
  uint64_t v8 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFCLL;
  do
  {
    while (1)
    {
      unsigned int v9 = __ldaxr(v7);
      if (v9 > 3) {
        break;
      }
      if (!__stxr(v8, v7))
      {
        unint64_t v6 = *(int **)(a1 + 24);
        if (MEMORY[0xFFFFFC100])
        {
          uint64_t v20 = HIDWORD(a2) & 7;
          kdebug_trace(771883028LL, a1, 0LL, 0LL, 0LL);
          uint64_t v5 = v20;
        }

        char v12 = 0;
        goto LABEL_19;
      }
    }
  }

  while (__stxr(v9 | 2, v7));
  if ((_DWORD)v5) {
    uint64_t v10 = (256LL << ((BYTE4(a2) & 7u) - 1)) | 0xFF;
  }
  else {
    uint64_t v10 = 255LL;
  }
  _pthread_workqueue_override_start_direct_check_owner(v9 | 3, v10, v7);
  if (MEMORY[0xFFFFFC100]) {
    kdebug_trace(771883028LL, a1, 0LL, 0LL, 0LL);
  }
LABEL_44:
  if ((a3 & 1) != 0) {
    _os_object_release_internal_n((void *)a1, (_BYTE *)&dword_0 + 2);
  }
}

void _dispatch_root_queue_push_override_stealer(int *a1, uint64_t a2, unsigned int a3)
{
  if (a3 - 7 <= 0xFFFFFFF9)
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corrupted priority";
    qword_61258 = a3;
    __break(1u);
LABEL_19:
    uint64_t v10 = (__objc2_class *)_dispatch_continuation_alloc_from_heap();
    goto LABEL_10;
  }

  uint64_t v3 = a2;
  uint64_t v4 = a1;
  int v8 = a1[21];
  if (v8 < 0) {
    unsigned int v9 = 2;
  }
  else {
    unsigned int v9 = (v8 >> 25) & 4;
  }
  if ((v9 & 2) != 0) {
    int v6 = 1;
  }
  else {
    int v6 = 2 * (v9 > 3);
  }
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v10 = *(__objc2_class **)(StatusReg + 176);
  if (!v10) {
    goto LABEL_19;
  }
  *(void *)(StatusReg + 176) = v10->cache;
LABEL_10:
  v10->isa = (__objc2_class *)&unk_58898;
  if (*(_DWORD *)(v3 + 8) == 0x7FFFFFFF) {
    goto LABEL_14;
  }
  unsigned int v11 = (unsigned int *)(v3 + 8);
  do
  {
    char v12 = (__objc2_class **)__ldxr(v11);
    uint64_t v13 = ((_DWORD)v12 + 2);
  }

  while (__stxr(v13, v11));
  if ((int)v12 > 0)
  {
LABEL_14:
    char v12 = &_dispatch_root_queues;
    uint64_t v13 = 3 * a3 + v6 - 3;
    unsigned int v11 = (unsigned int *)(&_dispatch_root_queues + 16 * v13);
    v10[1].superclass = (__objc2_class *)v3;
    v10[1].cache = v4;
    v10->info = 0LL;
    v10[1].isa = v10;
    v10->superclass = (__objc2_class *)-1LL;
    v10->vtable = (void *)-1LL;
    v10->cache = 0LL;
    unint64_t v14 = (unint64_t *)(v11 + 12);
    *(void *)(StatusReg + 976) = v11 + 12;
    do
      unint64_t v15 = __ldxr(v14);
    while (__stlxr((unint64_t)v10, v14));
    if (v15)
    {
      *(void *)(v15 + 16) = v10;
      *(void *)(StatusReg + 976) = 0LL;
      return;
    }
  }

  else
  {
    qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
  }

  v12[16 * v13 + 13] = v10;
  *(void *)(StatusReg + 976) = 0LL;
  _dispatch_root_queue_poke_and_wakeup(v11, 1LL, 0);
}

void _dispatch_workloop_push_stealer(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unint64_t v7 = *(void **)(StatusReg + 176);
  if (v7) {
    *(void *)(StatusReg + 176) = v7[2];
  }
  else {
    unint64_t v7 = _dispatch_continuation_alloc_from_heap();
  }
  *unint64_t v7 = &unk_58850;
  if (*(_DWORD *)(a2 + 8) == 0x7FFFFFFF) {
    goto LABEL_7;
  }
  int v8 = (unsigned int *)(a2 + 8);
  do
    int v9 = __ldxr(v8);
  while (__stxr(v9 + 2, v8));
  if (v9 > 0)
  {
LABEL_7:
    v7[6] = a2;
    v7[7] = 0LL;
    v7[4] = 0LL;
    v7[5] = v7;
    v7[1] = -1LL;
    v7[3] = -1LL;
    _dispatch_workloop_push(a1, v7, a3);
  }

  else
  {
    qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
  }

_DWORD *_dispatch_lane_drain_non_barriers(_DWORD *result, uint64_t a2, char a3)
{
  uint64_t v4 = (uint64_t)result;
  uint64_t v5 = *((unsigned __int16 *)result + 40);
  int v6 = (unint64_t *)(result + 14);
  do
    unint64_t v7 = __ldxr(v6);
  while (__stlxr(v7 & 0xFFBFFFFFFFFFFFFFLL, v6));
  int v8 = (unint64_t *)(result + 12);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    if (v5)
    {
      --v5;
      goto LABEL_6;
    }

    if (*(void *)a2 > 0xFFFuLL || (*(void *)a2 & 0x81LL) == 0) {
      break;
    }
    do
    {
      uint64_t v5 = 0LL;
      unint64_t v23 = __ldxr(v6);
    }

    while (__stxr(v23 + 0x20000000000LL, v6));
LABEL_6:
    uint64_t v10 = *(void *)(a2 + 16);
    *(void *)(v4 + 104) = v10;
    if (!v10)
    {
      signed int v24 = (unint64_t *)(a2 + 16);
      while (1)
      {
        unint64_t v25 = __ldxr(v8);
        if (a2 != (v25 & 0xFFFFFFFFFFFFFFF8LL)) {
          break;
        }
        if (!__stlxr(0LL, v8)) {
          goto LABEL_7;
        }
      }

      uint64_t v33 = a2;
      __clrex();
      uint64_t v10 = *v24;
      if (!*v24) {
        uint64_t v10 = _dispatch_wait_for_enqueuer(v24, v4 + 48);
      }
      *(void *)(v4 + 104) = v10;
      a2 = v33;
    }

uint64_t _dispatch_channel_invoke_cancel_check(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(_WORD *)(a1 + 116) & 8) != 0 || (*(_DWORD *)(a1 + 80) & 0x10000000) == 0) {
    return 1LL;
  }
  if ((*(_BYTE *)(a2 + 35) & 1) != 0) {
    int v6 = objc_autoreleasePoolPush();
  }
  else {
    int v6 = 0LL;
  }
  int v7 = (*(uint64_t (**)(uint64_t, void))(a3 + 24))(a1, *(void *)(a1 + 32));
  if (v6) {
    objc_autoreleasePoolPop(v6);
  }
  if (v7)
  {
    *(_WORD *)(a1 + 116) |= 8u;
    if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
    {
      int v8 = (unsigned int *)(a1 + 8);
      do
        int v9 = __ldxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (v9 <= 1) {
        _os_object_allows_weak_reference_cold_1();
      }
    }

    return 1LL;
  }

  uint64_t result = 0LL;
  *(void *)(a2 + 40) = -1LL;
  return result;
}

uint64_t _dispatch_worker_thread(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (unsigned int *)(a1 + 112);
  do
    int v4 = __ldaxr(v3);
  while (__stxr(v4 - 1, v3));
  if (v4 <= 0) {
    _dispatch_worker_thread_cold_1(v4);
  }
  if (*(void *)(v2 + 144)) {
    *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 192) = v2 + 144;
  }
  uint64_t v5 = *(const char **)(a1 + 72);
  if (v5) {
    pthread_setname_np(v5);
  }
  uint64_t v6 = *(void *)(v2 + 64);
  if (v6) {
    (*(void (**)(void))(v6 + 16))();
  }
  _dispatch_sigmask();
  _dispatch_introspection_thread_add();
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v8 = *(void *)(StatusReg + 32);
  uint64_t v9 = *(unsigned int *)(a1 + 84);
  if ((v9 & 0x46000FFF) == 0)
  {
    unsigned int v10 = v9 & 0x80000000;
    if ((v8 & 0x22000000) != 0 || (v8 & 0x3F00) == 0)
    {
      uint64_t v9 = v10 | 0xF0000;
    }

    else
    {
      unsigned int v11 = (__clz(__rbit32((v8 >> 8) & 0x3FFF)) << 8) + 256;
      uint64_t v9 = v8 & 0x8E0000FF | v10 | v11;
    }
  }

  unint64_t v12 = v8 & 0xFFFFFFFF02FFFFFFLL;
  if (v8 == -1) {
    unint64_t v13 = 0LL;
  }
  else {
    unint64_t v13 = v8 & 0xFFFFFFFF02FFFFFFLL;
  }
  uint64_t v14 = (dispatch_semaphore_s *)(v2 + 72);
  do
  {
    _dispatch_introspection_runtime_event();
    _dispatch_root_queue_drain(a1, v9, 0x20000LL);
    uint64_t v15 = *(void *)(StatusReg + 32);
    if ((v15 & 0x1000000) != 0)
    {
      unint64_t v16 = v12;
      if (v13) {
        goto LABEL_31;
      }
      unint64_t v16 = v15 & 0xFFFFFFFFFEFFFFFFLL;
LABEL_28:
      if (v16) {
        goto LABEL_31;
      }
      goto LABEL_23;
    }

    unint64_t v16 = v13;
    if (v13 != (v15 & 0xFFFFFFFF77FFFFFFLL)) {
      goto LABEL_28;
    }
LABEL_23:
    if (!*(void *)(StatusReg + 224)) {
      goto LABEL_24;
    }
    unint64_t v16 = 0LL;
LABEL_31:
    _dispatch_set_priority_and_voucher_slow(v16, 0LL, 6);
LABEL_24:
    _dispatch_introspection_runtime_event();
    dispatch_time_t v17 = dispatch_time(0LL, 5000000000LL);
  }

  while (!dispatch_semaphore_wait(v14, v17));
  unint64_t v18 = (unsigned int *)(a1 + 100);
  do
    unsigned int v19 = __ldxr(v18);
  while (__stlxr(v19 + 1, v18));
  _dispatch_root_queue_poke(a1, 1LL, 0LL);
  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    unint64_t v21 = (unsigned int *)(a1 + 8);
    do
      int v22 = __ldxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (v22 <= 1)
    {
      if (v22 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      _os_object_dispose((void *)a1, v20);
    }
  }

  return 0LL;
}

void _dispatch_root_queue_drain(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(void *)(StatusReg + 160) = a1;
  *(void *)(StatusReg + 200) = a2;
  uint64_t v5 = (unsigned int *)(*(void *)(StatusReg + 216) & 0xFFFFFFFFFFFFFFFELL);
  if (v5)
  {
    uint64_t v6 = v5 + 24;
    do
      int v7 = __ldxr(v6);
    while (__stxr(v7 - 1, v6));
    if (v7 <= 0)
    {
      if (v7 < 0) {
        _os_object_allows_weak_reference_cold_1();
      }
      *((void *)v5 + 7) = 0xDEAD000000000000LL;
      _dispatch_object_dealloc(v5);
    }
  }

  *(void *)(StatusReg + 216) = -4LL;
  memset(v43, 0, sizeof(v43));
  _dispatch_last_resort_autorelease_pool_push(v43);
  BOOL v8 = 0;
  uint64_t v9 = (unint64_t *)(a1 + 104);
  unint64_t v41 = (unint64_t *)(a1 + 48);
  while (1)
  {
    while (1)
    {
      do
LABEL_9:
        unint64_t v10 = __ldxr(v9);
      while (__stxr(0xFFFFFFFFFFFFFFFFLL, v9));
      if (!v10)
      {
        do
        {
          unint64_t v36 = __ldxr(v9);
          if (v36 != -1LL)
          {
            __clrex();
            goto LABEL_9;
          }
        }

        while (__stxr(0LL, v9));
        if (!*v41) {
          goto LABEL_114;
        }
        uint64_t v37 = a1;
        unint64_t v38 = _dispatch_root_queue_head_tail_quiesced;
        goto LABEL_91;
      }

      if (v10 != -1LL) {
        break;
      }
      uint64_t v37 = a1;
      unint64_t v38 = (uint64_t (*)(uint64_t))_dispatch_root_queue_mediator_is_gone;
LABEL_91:
      if (!__DISPATCH_ROOT_QUEUE_CONTENDED_WAIT__(v37, v38)) {
        goto LABEL_114;
      }
    }

    unsigned int v11 = (unint64_t *)(v10 + 16);
    uint64_t v12 = *(void *)(v10 + 16);
    if (!v12)
    {
      *uint64_t v9 = 0LL;
      while (1)
      {
        unint64_t v39 = __ldxr(v41);
        if (v39 != v10) {
          break;
        }
        if (!__stlxr(0LL, v41)) {
          goto LABEL_14;
        }
      }

      __clrex();
      uint64_t v12 = *v11;
      if (!*v11) {
        uint64_t v12 = _dispatch_wait_for_enqueuer(v11, (uint64_t)v41);
      }
    }

    *(void *)(a1 + 104) = v12;
    _dispatch_root_queue_poke((unsigned int *)a1, 1LL, 0);
LABEL_14:
    if (v8) {
      _pthread_workqueue_override_reset();
    }
    unint64_t v13 = *(void (***)(uint64_t))(StatusReg + 192);
    if (v13) {
      (*v13)(a1);
    }
    uint64_t v14 = *(void *)v10;
    if (*(void *)v10 >= 0x1000uLL)
    {
      if (*(void *)(v14 + 40) == 1LL) {
        (*(void (**)(unint64_t, void, void))(v14 + 48))(v10, 0LL, (a3 >> 21) & 1);
      }
      else {
        (*(void (**)(unint64_t, _OWORD *, void))(v14 + 64))(v10, v43, a3 & 0xFFFF0000);
      }
      goto LABEL_67;
    }

    if ((a3 & 0x1000000) != 0)
    {
      uint64_t v15 = objc_autoreleasePoolPush();
      uint64_t v14 = *(void *)v10;
    }

    else
    {
      uint64_t v15 = 0LL;
    }

    unint64_t v16 = *(unsigned int **)(v10 + 24);
    if ((v14 & 4) != 0) {
      *(void *)(v10 + 24) = -1LL;
    }
    if (v16 != (unsigned int *)-1LL)
    {
      dispatch_time_t v17 = v16;
      if (v16) {
        dispatch_time_t v17 = (unsigned int *)v16[8];
      }
      if (MEMORY[0xFFFFFC100]) {
        kdebug_trace(771817480LL, v17, v10, 0LL, 0LL);
      }
    }

    uint64_t v18 = *(void *)(v10 + 8);
    if (v18 == -1)
    {
      unint64_t v21 = 0LL;
    }

    else
    {
      uint64_t v19 = *(void *)(StatusReg + 200);
      uint64_t v20 = ((v19 >> 8) & 0xF) != 0 ? 256LL << ((BYTE1(v19) & 0xFu) - 1) : 0LL;
      unint64_t v21 = v20 & 0xFFFFFFFFFFFFFF00LL | *(void *)(StatusReg + 200);
      if ((v18 & 0xFFFFFF) != 0)
      {
        if ((v18 & 0xFFFFFFuLL) >= (v20 & 0xFFFFFF00)
          && ((v19 & 0x44000000) != 0 || (*(void *)(v10 + 8) & 0x10000000LL) != 0))
        {
          unint64_t v21 = v18 & 0xFFFFFF;
        }
      }

      else if ((unsigned __int16)v19 >> 12)
      {
        unint64_t v21 = (256LL << (((unsigned __int16)v19 >> 12) - 1)) | 0xFF;
      }
    }

    unint64_t v23 = v21 & 0xFFFFFFFF02FFFFFFLL;
    uint64_t v24 = *(void *)(StatusReg + 32);
    if ((v24 & 0x1000000) != 0)
    {
      if (v23) {
        goto LABEL_110;
      }
      unint64_t v23 = v24 & 0xFFFFFFFFFEFFFFFFLL;
    }

    else if (v23 == (v24 & 0xFFFFFFFF77FFFFFFLL))
    {
      goto LABEL_47;
    }

    if (v23) {
      goto LABEL_110;
    }
LABEL_47:
    if (v16 != (unsigned int *)-1LL)
    {
      if (*(unsigned int **)(StatusReg + 224) != v16)
      {
        unint64_t v23 = 0LL;
LABEL_110:
        _dispatch_set_priority_and_voucher_slow(v23, v16, v14 & 4 | 2);
        if ((v14 & 0x200) != 0) {
          goto LABEL_56;
        }
        goto LABEL_53;
      }

      if ((v14 & 4) != 0 && v16) {
        os_release(v16);
      }
    }

    if ((v14 & 0x200) != 0) {
      goto LABEL_56;
    }
LABEL_53:
    if (MEMORY[0xFFFFFC100]) {
      _dispatch_trace_item_pop_internal((_opaque_pthread_t *)a1, (uint64_t *)v10);
    }
    _dispatch_introspection_queue_item_dequeue((dispatch_queue_s *)a1, (dispatch_object_s *)v10);
LABEL_56:
    if ((v14 & 4) != 0)
    {
      uint64_t v30 = *(void *)(StatusReg + 176);
      int v31 = v30 ? *(_DWORD *)(v30 + 8) + 1 : 1;
      if (v31 > _dispatch_continuation_cache_limit)
      {
        uint64_t v25 = v10;
        if ((v14 & 8) != 0)
        {
LABEL_79:
          uint64_t v32 = *(void *)(**(void **)(v10 + 48) + 40LL);
          if (v32 != 514) {
            _dispatch_queue_override_invoke_cold_1(v32);
          }
          dispatch_group_t group = *(dispatch_group_s **)(v10 + 48);
          uint64_t v33 = *(void (**)(void (**)(void)))(v10 + 32);
          int v34 = *(void **)(v10 + 40);
          uint64_t v35 = (void (__cdecl *)(void *))v33;
          if (v34)
          {
            uint64_t v35 = *(void (__cdecl **)(void *))(v10 + 32);
            if (v33 == _dispatch_call_block_and_release) {
              uint64_t v35 = (void (__cdecl *)(void *))v34[2];
            }
          }

          _dispatch_introspection_callout_entry(*(void **)(v10 + 40), v35);
          _dispatch_client_callout((uint64_t)v34, (uint64_t (*)(void))v33);
          _dispatch_introspection_callout_return(v34, v35);
          if (MEMORY[0xFFFFFC100]) {
            kdebug_trace(772079660LL, v10, 0LL, 0LL, 0LL);
          }
          _dispatch_introspection_queue_item_complete((dispatch_object_s *)v10);
          dispatch_group_leave(group);
          goto LABEL_64;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
        *(void *)(v10 + 16) = v30;
        *(_DWORD *)(v10 + 8) = v31;
        *(void *)(StatusReg + 176) = v10;
        if ((v14 & 8) != 0) {
          goto LABEL_79;
        }
      }
    }

    else
    {
      uint64_t v25 = 0LL;
      if ((v14 & 8) != 0) {
        goto LABEL_79;
      }
    }

    uint64_t v27 = *(void (**)(void (**)(void)))(v10 + 32);
    unint64_t v26 = *(void **)(v10 + 40);
    uint64_t v28 = (void (__cdecl *)(void *))v27;
    if (v26)
    {
      uint64_t v28 = *(void (__cdecl **)(void *))(v10 + 32);
      if (v27 == _dispatch_call_block_and_release) {
        uint64_t v28 = (void (__cdecl *)(void *))v26[2];
      }
    }

    _dispatch_introspection_callout_entry(*(void **)(v10 + 40), v28);
    _dispatch_client_callout((uint64_t)v26, (uint64_t (*)(void))v27);
    _dispatch_introspection_callout_return(v26, v28);
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace(772079660LL, v10, 0LL, 0LL, 0LL);
    }
    _dispatch_introspection_queue_item_complete((dispatch_object_s *)v10);
LABEL_64:
    if (!v25)
    {
      if (!v15) {
        goto LABEL_67;
      }
LABEL_66:
      objc_autoreleasePoolPop(v15);
      goto LABEL_67;
    }

    _dispatch_continuation_free_to_cache_limit(v25);
    if (v15) {
      goto LABEL_66;
    }
LABEL_67:
    if (v13) {
      v13[1](a1);
    }
    unsigned int v29 = WORD1(*(void *)(StatusReg + 200)) & 0xF;
    if (v29)
    {
      *(void *)(StatusReg + 200) &= 0xFFF0FFFFuLL;
      BOOL v8 = v29 != 15;
    }

    else
    {
      BOOL v8 = 0;
    }

    if ((*(_BYTE *)(StatusReg + 960) & 1) != 0) {
      break;
    }
    *(void *)(StatusReg + 960) = 0LL;
  }

LABEL_114:
  _dispatch_last_resort_autorelease_pool_pop((uint64_t)v43);
  *(void *)(StatusReg + 216) = 0LL;
  *(void *)(StatusReg + 40) = 0LL;
  *(void *)(StatusReg + 200) = 0LL;
  *(void *)(StatusReg + 160) = 0LL;
}

BOOL __DISPATCH_ROOT_QUEUE_CONTENDED_WAIT__(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  char v4 = 0;
  uint64_t v5 = (unsigned int *)(a1 + 112);
  mach_msg_timeout_t v6 = 500;
LABEL_2:
  int v7 = -80;
  do
  {
    if (__CFADD__(v7++, 1))
    {
      if ((v4 & 1) == 0)
      {
        do
          unsigned int v10 = __ldxr(v5);
        while (__stlxr(v10 + 1, v5));
      }

      thread_switch(0, 3, v6);
      int v9 = a2(a1);
      if (!v9)
      {
        unsigned int v11 = (v6 >> 4) & 0x7FFFFFF;
        v6 *= 2;
        char v4 = 1;
        if (v11 < 0xC35) {
          goto LABEL_2;
        }
        int v9 = 0;
      }

      goto LABEL_12;
    }

    __yield();
    int v9 = a2(a1);
  }

  while (!v9);
  if ((v4 & 1) == 0) {
    return v9 == 1;
  }
  do
LABEL_12:
    unsigned int v12 = __ldaxr(v5);
  while (__stxr(v12 - 1, v5));
  if (*(void *)(a1 + 48))
  {
    int v9 = 1;
  }

  else if (!v9)
  {
    _dispatch_root_queue_poke((unsigned int *)a1, 1LL, 0);
    int v9 = 0;
  }

  return v9 == 1;
}

uint64_t _dispatch_root_queue_head_tail_quiesced(uint64_t a1)
{
  if (*(void *)(a1 + 48)) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 2;
  }
  if ((*(void *)(a1 + 104) != 0LL) != (*(void *)(a1 + 48) == 0LL)) {
    return v1;
  }
  else {
    return 0LL;
  }
}

BOOL _dispatch_root_queue_mediator_is_gone(uint64_t a1)
{
  return *(void *)(a1 + 104) != -1LL;
}

void _dispatch_mgr_priority_raise(pthread_attr_t *a1)
{
  if (_dispatch_mgr_sched_pred != -1) {
    dispatch_once_f(&_dispatch_mgr_sched_pred, 0LL, (dispatch_function_t)_dispatch_mgr_sched_init);
  }
  int v2 = pthread_attr_getschedparam(a1, &v12);
  if (v2) {
    _dispatch_bug(6293LL, v2);
  }
  qos_class_t __qos_class = QOS_CLASS_UNSPECIFIED;
  pthread_attr_get_qos_class_np(a1, &__qos_class, 0LL);
  if (__qos_class)
  {
    if (__qos_class == 5)
    {
      int v3 = 4;
    }

    else
    {
      HIDWORD(v5) = __qos_class - 9;
      LODWORD(v5) = __qos_class - 9;
      unsigned int v4 = v5 >> 2;
      if (v4 > 6) {
        int v3 = 0;
      }
      else {
        int v3 = dword_40068[v4];
      }
    }

    v12.signed int sched_priority = v3;
    while (1)
    {
      qos_class_t v6 = __ldxr((unsigned int *)&dword_65B64);
      if (__qos_class <= v6) {
        break;
      }
    }

    __clrex();
  }

uint64_t _dispatch_main_queue_update_priority_from_thread()
{
  unint64_t v0 = qword_64DF8;
  else {
    uint64_t result = 0LL;
  }
  unsigned int v2 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
  unsigned int v3 = (__clz(__rbit32((v2 >> 8) & 0x3FFF)) << 8) + 256;
  if (((v2 >> 8) & 0x3FFF) != 0) {
    unsigned int v4 = v3;
  }
  else {
    unsigned int v4 = 0;
  }
  unsigned int v5 = (v4 >> 8) & 0xF;
  unsigned int v6 = v4 & 0xFFFFFF00 | v2;
  uint64_t v7 = HIDWORD(v0) & 7;
  unsigned int v8 = (dword_64E14 >> 8) & 0xF;
  dword_64E14 = v6;
  return result;
}

uint64_t _dispatch_root_queues_init_once()
{
  if ((_dispatch_unsafe_fork & 1) == 0) {
    _dispatch_fork_becomes_unsafe_slow();
  }
  int v0 = _pthread_workqueue_supported();
  int v1 = v0;
  if ((v0 & 0x10) == 0) {
    _dispatch_root_queues_init_once_cold_1(v0);
  }
  uint64_t v4 = 0x200000000LL;
  unsigned int v5 = 0LL;
  unsigned int v6 = 0LL;
  uint64_t v7 = 0LL;
  uint64_t v8 = 64LL;
  uint64_t v9 = 72LL;
  if ((v0 & 0x80) != 0)
  {
    unsigned int v5 = _dispatch_kevent_worker_thread;
    unsigned int v6 = _dispatch_workloop_worker_thread;
    uint64_t v7 = _dispatch_worker_thread2;
  }

  else
  {
    if ((v0 & 0x40) == 0) {
      _dispatch_root_queues_init_once_cold_2(v0);
    }
    uint64_t v7 = _dispatch_worker_thread2;
    unsigned int v5 = _dispatch_kevent_worker_thread;
  }

  uint64_t result = pthread_workqueue_setup(&v4, 48LL);
  if ((_DWORD)result) {
    _dispatch_root_queues_init_once_cold_4(result, v1);
  }
  if ((_dispatch_mode & 4) != 0)
  {
    int v3 = -1;
    uint64_t result = sysctlbyname("kern.wq_limit_cooperative_threads", 0LL, 0LL, &v3, 4uLL);
    if ((_DWORD)result) {
      _dispatch_root_queues_init_once_cold_3();
    }
  }

  return result;
}

uint64_t _dispatch_worker_thread2(uint64_t a1)
{
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  StatusReg[120] = 0LL;
  StatusReg[4] = a1 & 0xFFFFFFFF88FFFFFFLL;
  unsigned int v2 = __clz(__rbit32((a1 >> 8) & 0x3FFF));
  else {
    unsigned int v3 = 0;
  }
  if (v3 - 7 <= 0xFFFFFFF9) {
    _dispatch_queue_priority_inherit_from_target_cold_1(v3);
  }
  if ((a1 & 0x8000000) != 0) {
    unsigned int v4 = 2293760;
  }
  else {
    unsigned int v4 = 196608;
  }
  unsigned int v5 = ((a1 & 0x8000000) >> 26) | 0xFFFFFFFD;
  int v6 = 3 * v3;
  if ((a1 & 0x88000000) == 0x80000000LL) {
    unsigned int v5 = -2;
  }
  uint64_t v7 = v5 + v6;
  _dispatch_introspection_thread_add();
  _dispatch_introspection_runtime_event();
  uint64_t v8 = (unsigned int *)(&_dispatch_root_queues + 16 * v7 + 14);
  do
    unsigned int v9 = __ldaxr(v8);
  while (__stxr(v9 - 1, v8));
  _dispatch_root_queue_drain( (uint64_t)(&_dispatch_root_queues + 16 * v7),  *((_DWORD *)&_dispatch_root_queues + 32 * v7 + 21),  v4);
  uint64_t v10 = StatusReg[4];
  if ((v10 & 0x1000000) != 0)
  {
    unint64_t v12 = v10 & 0xFFFFFFFFFEFFFFFFLL;
    if ((v10 & 0xFFFFFFFFFEFFFFFFLL) != 0) {
      goto LABEL_19;
    }
  }

  if (StatusReg[28])
  {
    unint64_t v12 = 0LL;
LABEL_19:
    _dispatch_set_priority_and_voucher_slow(v12, 0LL, 14);
  }

  StatusReg[120] = 0LL;
  return _dispatch_introspection_runtime_event();
}

void _dispatch_kevent_worker_thread(uint64_t *a1, int *a2)
{
  if (!a1 || !a2)
  {
    _dispatch_bug(6755LL, 0LL);
    return;
  }

  if (*a2 && *a1)
  {
    unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    unsigned int v5 = (unsigned int *)(StatusReg[27] & 0xFFFFFFFFFFFFFFFELL);
    if (v5)
    {
      if (v5 != (unsigned int *)-4LL)
      {
        int v6 = v5 + 24;
        do
          int v7 = __ldxr(v6);
        while (__stxr(v7 - 1, v6));
        if (v7 > 0) {
          goto LABEL_12;
        }
        if ((v7 & 0x80000000) == 0)
        {
          *((void *)v5 + 7) = 0xDEAD000000000000LL;
          _dispatch_object_dealloc(v5);
          goto LABEL_12;
        }

LABEL_31:
        qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
      }

      qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Lingering DISPATCH_WLH_ANON";
      __break(1u);
      return;
    }

LABEL_12:
    StatusReg[27] = -4LL;
    uint64_t v8 = *a1;
    _dispatch_introspection_thread_add();
    StatusReg[120] = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    int v15 = 0;
    uint64_t v16 = -4LL;
    uint64_t v17 = v8;
    int v18 = 0;
    __int16 v19 = 0;
    uint64_t v9 = StatusReg[4];
    if ((v9 & 0x2000000) != 0)
    {
      if ((v9 & 0x20000000) != 0) {
        uint64_t v9 = StatusReg[4] & 0xFE000000LL;
      }
      StatusReg[4] = v9 & 0xFFFFFFFFFEFFFFFFLL;
      StatusReg[25] = 34537472LL;
      StatusReg[20] = &_dispatch_mgr_q;
      uint64_t v10 = StatusReg[3] & 0xFFFFFFFCLL | 0x40020000000000LL;
      do
      {
        unint64_t v11 = __ldaxr((unint64_t *)&qword_64E78);
        if ((v11 & 0xFFE00000FFFFFFFCLL) != 0)
        {
          qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Locking the manager should not fail";
          qword_61258 = v11;
          __break(1u);
          goto LABEL_31;
        }
      }

      while (__stxr(v10 | v11 & 0x7700000001LL, (unint64_t *)&qword_64E78));
      _dispatch_introspection_runtime_event();
      uint64_t v16 = -4LL;
      StatusReg[29] = &v13;
      _dispatch_event_loop_merge(v8, *a2);
      _dispatch_introspection_runtime_event();
      _dispatch_mgr_queue_drain();
      if (byte_65A36) {
        _dispatch_event_loop_drain_timers((uint64_t)&_dispatch_timers_heap, 9u);
      }
      do
        unint64_t v12 = __ldxr((unint64_t *)&qword_64E78);
      while (__stlxr((v12 & 0xFFFFFFF000000001LL) - 0x40020000000000LL, (unint64_t *)&qword_64E78));
      StatusReg[25] = 0LL;
      StatusReg[20] = 0LL;
      if ((v12 & 0x8000000000LL) != 0)
      {
        _dispatch_introspection_runtime_event();
        _dispatch_event_loop_poke((dispatch_object_s *)0xFFFFFFFFFFFFFFF8LL, 0LL, 0LL);
      }
    }

    else
    {
      StatusReg[4] = v9 & 0xFFFFFFFF88FFFFFFLL | 0x1000000;
      LOBYTE(v19) = 1;
      _dispatch_introspection_runtime_event();
      StatusReg[29] = &v13;
      _dispatch_event_loop_merge(v8, *a2);
      if (v14)
      {
        if (v16 == -4)
        {
          StatusReg[29] = 0LL;
          _dispatch_introspection_runtime_event();
          _dispatch_root_queue_drain_deferred_item(&v13);
        }

        else
        {
          _dispatch_introspection_runtime_event();
          _dispatch_root_queue_drain_deferred_wlh((uint64_t)&v13);
        }
      }
    }

    StatusReg[29] = 0LL;
    StatusReg[5] = 0LL;
    StatusReg[120] = 0LL;
    *a2 = (unsigned __int16)v18;
    _dispatch_introspection_runtime_event();
    StatusReg[27] = 0LL;
    StatusReg[5] = 0LL;
  }

    if ((a1 & 0x8000000000000000LL) == 0)
    {
      if (a1 >> 62) {
        a1 = -1LL;
      }
      goto LABEL_15;
    }

    if ((a1 & 0x4000000000000000LL) != 0)
    {
      else {
        a1 = -(uint64_t)a1;
      }
      goto LABEL_5;
    }

    a1 &= ~0x8000000000000000LL;
LABEL_10:
    unsigned int v5 = 2LL;
    goto LABEL_16;
  }

  if (a1 != -1LL)
  {
    if (!a1)
    {
      a1 = mach_absolute_time();
LABEL_15:
      unsigned int v5 = 1LL;
LABEL_16:
      *a2 = v5;
      if (_dispatch_host_time_mach2nano)
      {
        a1 = _dispatch_host_time_mach2nano(a1);
      }

      else if (a1)
      {
        if (a1 > 0x3126E978D4FDF39LL)
        {
          int v6 = 1LL;
          a1 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_22;
        }

        if (a1 > 0x20C49BA5E353F7BLL) {
          a1 = 125 * (a1 / 3);
        }
        else {
          a1 = 125 * a1 / 3;
        }
      }

      goto LABEL_21;
    }

    goto LABEL_12;
  }

  int v6 = 0LL;
  *a2 = 0LL;
LABEL_22:
  *a3 = a1;
  return v6;
}

void _dispatch_workloop_worker_thread(uint64_t *a1, uint64_t *a2, int *a3)
{
  if (!a1 || !a2 || !a3)
  {
    _dispatch_bug(6774LL, 0LL);
    return;
  }

  uint64_t v5 = *a1;
  if (!*a1)
  {
    _dispatch_bug(6777LL, 0LL);
    _dispatch_kevent_worker_thread(a2, a3);
    return;
  }

  if (*a3 && *a2)
  {
    unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    unint64_t v7 = StatusReg[27] & 0xFFFFFFFFFFFFFFFELL;
    if (v7 == -4LL)
    {
LABEL_71:
      qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Lingering DISPATCH_WLH_ANON";
      __break(1u);
      goto LABEL_72;
    }

    if (v7 == v5)
    {
LABEL_19:
      StatusReg[27] = v5;
      uint64_t v12 = *a2;
      _dispatch_introspection_thread_add();
      StatusReg[120] = 0LL;
      uint64_t v26 = 0LL;
      uint64_t v27 = 0LL;
      int v28 = 0;
      uint64_t v29 = v5;
      uint64_t v30 = v12;
      int v31 = 0;
      __int16 v32 = 0;
      if (v5 == -4)
      {
        char v15 = 0;
        uint64_t v16 = 0LL;
        memset(&v25, 0, sizeof(v25));
        goto LABEL_39;
      }

      if (*(void *)(*(void *)v5 + 40LL) == 131090LL && (uint64_t v13 = *(int **)(v5 + 200)) != 0LL)
      {
        int v14 = *v13;
        memset(&v25, 0, sizeof(v25));
        if ((v14 & 0x40) != 0)
        {
          unint64_t v7 = *(void *)(v5 + 72);
          if (!v7
            || StatusReg[124]
            || (LODWORD(v7) = pthread_setname_np((const char *)v7),
                char v15 = 1,
                StatusReg[124] = 1LL,
                (uint64_t v13 = *(int **)(v5 + 200)) != 0LL))
          {
            if (*((void *)v13 + 4) && !StatusReg[115])
            {
              char v15 = 1;
              uint64_t v24 = _dispatch_calloc(1uLL, 0x28uLL);
              LODWORD(v7) = _os_workgroup_join_update_wg( *(void *)(*(void *)(v5 + 200) + 32LL),  (uint64_t)v24);
              uint64_t v16 = 0LL;
              StatusReg[115] = v24;
            }

            else
            {
              uint64_t v16 = 0LL;
              char v15 = 1;
            }

            goto LABEL_39;
          }

          goto LABEL_36;
        }
      }

      else
      {
        memset(&v25, 0, sizeof(v25));
      }

      if (*(void *)(*(void *)v5 + 40LL) != 131090LL) {
        goto LABEL_35;
      }
      uint64_t v17 = *(void *)(v5 + 200);
      if (!v17) {
        goto LABEL_35;
      }
      uint64_t v16 = *(os_workgroup_s **)(v17 + 32);
      if (!v16 || (LODWORD(v7) = os_workgroup_join(*(os_workgroup_t *)(v17 + 32), &v25), !(_DWORD)v7))
      {
        char v15 = 0;
        goto LABEL_39;
      }

      if ((_DWORD)v7 == 22)
      {
LABEL_35:
        char v15 = 0;
LABEL_36:
        uint64_t v16 = 0LL;
LABEL_39:
        uint64_t v18 = StatusReg[4];
        if ((v18 & 0x2000000) != 0)
        {
          if ((v18 & 0x20000000) != 0) {
            uint64_t v18 = StatusReg[4] & 0xFE000000LL;
          }
          StatusReg[4] = v18 & 0xFFFFFFFFFEFFFFFFLL;
          StatusReg[25] = 34537472LL;
          StatusReg[20] = &_dispatch_mgr_q;
          uint64_t v20 = StatusReg[3] & 0xFFFFFFFCLL | 0x40020000000000LL;
          do
          {
            unint64_t v21 = __ldaxr((unint64_t *)&qword_64E78);
            if ((v21 & 0xFFE00000FFFFFFFCLL) != 0)
            {
              qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Locking the manager should not fail";
              qword_61258 = v21;
              __break(1u);
              goto LABEL_69;
            }
          }

          while (__stxr(v20 | v21 & 0x7700000001LL, (unint64_t *)&qword_64E78));
          _dispatch_introspection_runtime_event();
          uint64_t v29 = -4LL;
          StatusReg[29] = &v26;
          _dispatch_event_loop_merge(v12, *a3);
          _dispatch_introspection_runtime_event();
          _dispatch_mgr_queue_drain();
          if (byte_65A36) {
            _dispatch_event_loop_drain_timers((uint64_t)&_dispatch_timers_heap, 9u);
          }
          do
            unint64_t v22 = __ldxr((unint64_t *)&qword_64E78);
          while (__stlxr((v22 & 0xFFFFFFF000000001LL) - 0x40020000000000LL, (unint64_t *)&qword_64E78));
          StatusReg[25] = 0LL;
          StatusReg[20] = 0LL;
          if ((v22 & 0x8000000000LL) != 0)
          {
            _dispatch_introspection_runtime_event();
            _dispatch_event_loop_poke((dispatch_object_s *)0xFFFFFFFFFFFFFFF8LL, 0LL, 0LL);
          }
        }

        else
        {
          unint64_t v19 = v18 & 0xFFFFFFFF88FFFFFFLL;
          if (v5 == -4) {
            v19 |= 0x1000000uLL;
          }
          StatusReg[4] = v19;
          if (v5 == -4) {
            LOBYTE(v32) = 1;
          }
          _dispatch_introspection_runtime_event();
          StatusReg[29] = &v26;
          _dispatch_event_loop_merge(v12, *a3);
          if (v27)
          {
            if (v29 == -4)
            {
              StatusReg[29] = 0LL;
              _dispatch_introspection_runtime_event();
              _dispatch_root_queue_drain_deferred_item(&v26);
            }

            else
            {
              _dispatch_introspection_runtime_event();
              _dispatch_root_queue_drain_deferred_wlh((uint64_t)&v26);
            }
          }
        }

        if (v16) {
          char v23 = v15;
        }
        else {
          char v23 = 1;
        }
        if ((v23 & 1) == 0) {
          os_workgroup_leave(v16, &v25);
        }
        StatusReg[29] = 0LL;
        StatusReg[5] = 0LL;
        StatusReg[120] = 0LL;
        *a3 = (unsigned __int16)v31;
        _dispatch_introspection_runtime_event();
        StatusReg[27] = v5 | 1;
        return;
      }

LABEL_72:
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_workloop os_workgroup_join failed";
      qword_61258 = (int)v7;
      __break(1u);
      return;
    }

    if (v7)
    {
      uint64_t v8 = (unsigned int *)(v7 + 96);
      do
        int v9 = __ldxr(v8);
      while (__stxr(v9 - 1, v8));
      if (v9 <= 0)
      {
        if (v9 < 0)
        {
LABEL_69:
          qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
          __break(1u);
LABEL_70:
          qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
          __break(1u);
          goto LABEL_71;
        }

        *(void *)(v7 + 56) = 0xDEAD000000000000LL;
        _dispatch_object_dealloc((void *)v7);
      }
    }

    if (v5 == -4) {
      goto LABEL_19;
    }
    uint64_t v10 = (unsigned int *)(v5 + 96);
    do
      unsigned int v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_70;
  }

  *(_BYTE *)(v4 + 13) = v50;
  return firehose_buffer_tracepoint_reserve_wait_for_chunks_from_logd(a1, v4, a3);
}

void _dispatch_mgr_queue_drain()
{
  uint64_t v3 = 0x40020000000000LL;
  if (qword_64E70)
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    if ((~*(_DWORD *)(StatusReg + 200) & 0xF0000) != 0) {
      *(void *)(StatusReg + 200) = *(void *)(StatusReg + 200) & 0xFFF0FFFFLL | 0xF0000;
    }
    _dispatch_lane_serial_drain(&_dispatch_mgr_q, (uint64_t)v4, 0x40000LL, &v3);
    if (v1) {
      _dispatch_mgr_queue_drain_cold_1();
    }
    unsigned int v2 = *(_DWORD **)(StatusReg + 224);
    if (v2)
    {
      *(void *)(StatusReg + 224) = 0LL;
      if (v2[8]) {
        _dispatch_set_priority_and_mach_voucher_slow(0LL, 0LL);
      }
      os_release(v2);
    }

    if ((*(void *)(StatusReg + 200) & 0xF0000LL) != 0) {
      *(void *)(StatusReg + 200) &= 0xFFF0FFFFuLL;
    }
  }

void _dispatch_root_queue_drain_deferred_item(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  StatusReg[20] = v2;
  _dispatch_introspection_runtime_event();
  memset(v30, 0, sizeof(v30));
  _dispatch_last_resort_autorelease_pool_push(v30);
  StatusReg[25] = *(unsigned int *)(v2 + 84);
  uint64_t v4 = a1[1];
  uint64_t v5 = (void (**)(uint64_t))StatusReg[24];
  if (v5) {
    (*v5)(v2);
  }
  uint64_t v6 = *(void *)v4;
  if (*(void *)v4 < 0x1000uLL)
  {
    unint64_t v7 = *(unsigned int **)(v4 + 24);
    if ((v6 & 4) != 0) {
      *(void *)(v4 + 24) = -1LL;
    }
    if (v7 != (unsigned int *)-1LL && (unsigned int *)((char *)v7 + 1) != 0LL)
    {
      int v9 = v7;
      if (v7) {
        int v9 = (unsigned int *)v7[8];
      }
      if (MEMORY[0xFFFFFC100]) {
        kdebug_trace(771817480LL, v9, v4, 0LL, 0LL);
      }
    }

    uint64_t v10 = *(void *)(v4 + 8);
    if (v10 == -1)
    {
      unint64_t v13 = 0LL;
    }

    else
    {
      uint64_t v11 = StatusReg[25];
      else {
        uint64_t v12 = 0LL;
      }
      unint64_t v13 = v12 & 0xFFFFFFFFFFFFFF00LL | StatusReg[25];
      if ((v10 & 0xFFFFFF) != 0)
      {
        if ((v10 & 0xFFFFFFuLL) >= (v12 & 0xFFFFFF00)
          && ((v11 & 0x44000000) != 0 || (*(void *)(v4 + 8) & 0x10000000LL) != 0))
        {
          unint64_t v13 = v10 & 0xFFFFFF;
        }
      }

      else if ((unsigned __int16)v11 >> 12)
      {
        unint64_t v13 = (256LL << (((unsigned __int16)v11 >> 12) - 1)) | 0xFF;
      }
    }

    unint64_t v15 = v13 & 0xFFFFFFFF02FFFFFFLL;
    uint64_t v16 = StatusReg[4];
    if ((v16 & 0x1000000) != 0)
    {
      if (v15) {
        goto LABEL_83;
      }
      unint64_t v15 = v16 & 0xFFFFFFFFFEFFFFFFLL;
    }

    else if (v15 == (v16 & 0xFFFFFFFF77FFFFFFLL))
    {
LABEL_34:
      if ((unsigned int *)StatusReg[28] == v7)
      {
        if ((v6 & 4) != 0 && v7) {
          os_release(v7);
        }
LABEL_39:
        if ((v6 & 0x200) != 0) {
          goto LABEL_43;
        }
LABEL_40:
        if (MEMORY[0xFFFFFC100]) {
          _dispatch_trace_item_pop_internal((_opaque_pthread_t *)v2, (uint64_t *)v4);
        }
        _dispatch_introspection_queue_item_dequeue((dispatch_queue_s *)v2, (dispatch_object_s *)v4);
LABEL_43:
        if ((v6 & 4) != 0)
        {
          uint64_t v18 = StatusReg[22];
          if (v18) {
            int v19 = *(_DWORD *)(v18 + 8) + 1;
          }
          else {
            int v19 = 1;
          }
          uint64_t v17 = v4;
          if (v19 <= _dispatch_continuation_cache_limit)
          {
            uint64_t v17 = 0LL;
            *(void *)(v4 + 16) = v18;
            *(_DWORD *)(v4 + 8) = v19;
            StatusReg[22] = v4;
          }
        }

        else
        {
          uint64_t v17 = 0LL;
        }

        if ((v6 & 8) != 0)
        {
          os_workgroup_join_token_opaque_s v25 = *(dispatch_group_s **)(v4 + 48);
          uint64_t v26 = *(void *)(*(void *)v25 + 40LL);
          if (v26 != 514) {
            _dispatch_queue_override_invoke_cold_1(v26);
          }
          uint64_t v27 = *(void (**)(void (**)(void)))(v4 + 32);
          int v28 = *(void **)(v4 + 40);
          uint64_t v29 = (void (__cdecl *)(void *))v27;
          if (v28)
          {
            uint64_t v29 = *(void (__cdecl **)(void *))(v4 + 32);
            if (v27 == _dispatch_call_block_and_release) {
              uint64_t v29 = (void (__cdecl *)(void *))v28[2];
            }
          }

          _dispatch_introspection_callout_entry(*(void **)(v4 + 40), v29);
          _dispatch_client_callout((uint64_t)v28, (uint64_t (*)(void))v27);
          _dispatch_introspection_callout_return(v28, v29);
          if (MEMORY[0xFFFFFC100]) {
            kdebug_trace(772079660LL, v4, 0LL, 0LL, 0LL);
          }
          _dispatch_introspection_queue_item_complete((dispatch_object_s *)v4);
          dispatch_group_leave(v25);
          if (!v17)
          {
LABEL_57:
            if (!v5) {
              goto LABEL_59;
            }
LABEL_58:
            v5[1](v2);
            goto LABEL_59;
          }
        }

        else
        {
          unint64_t v21 = *(void (**)(void (**)(void)))(v4 + 32);
          uint64_t v20 = *(void **)(v4 + 40);
          unint64_t v22 = (void (__cdecl *)(void *))v21;
          if (v20)
          {
            unint64_t v22 = *(void (__cdecl **)(void *))(v4 + 32);
            if (v21 == _dispatch_call_block_and_release) {
              unint64_t v22 = (void (__cdecl *)(void *))v20[2];
            }
          }

          _dispatch_introspection_callout_entry(*(void **)(v4 + 40), v22);
          _dispatch_client_callout((uint64_t)v20, (uint64_t (*)(void))v21);
          _dispatch_introspection_callout_return(v20, v22);
          if (MEMORY[0xFFFFFC100]) {
            kdebug_trace(772079660LL, v4, 0LL, 0LL, 0LL);
          }
          _dispatch_introspection_queue_item_complete((dispatch_object_s *)v4);
          if (!v17) {
            goto LABEL_57;
          }
        }

        _dispatch_continuation_free_to_cache_limit(v17);
        if (!v5) {
          goto LABEL_59;
        }
        goto LABEL_58;
      }

      unint64_t v15 = 0LL;
LABEL_83:
      _dispatch_set_priority_and_voucher_slow(v15, v7, v6 & 4 | 2);
      if ((v6 & 0x200) != 0) {
        goto LABEL_43;
      }
      goto LABEL_40;
    }

    if (v15) {
      goto LABEL_83;
    }
    goto LABEL_34;
  }

  if (*(void *)(v6 + 40) == 1LL) {
    (*(void (**)(uint64_t, void, void))(v6 + 48))(v4, 0LL, 0LL);
  }
  else {
    (*(void (**)(uint64_t, _OWORD *, uint64_t))(v6 + 64))(v4, v30, 196608LL);
  }
  if (v5) {
    goto LABEL_58;
  }
LABEL_59:
  _dispatch_last_resort_autorelease_pool_pop((uint64_t)v30);
  StatusReg[25] = 0LL;
  StatusReg[20] = 0LL;
  uint64_t v23 = StatusReg[4];
  if ((v23 & 0x1000000) != 0)
  {
    unint64_t v24 = v23 & 0xFFFFFFFFFEFFFFFFLL;
    if ((v23 & 0xFFFFFFFFFEFFFFFFLL) != 0) {
      goto LABEL_65;
    }
  }

  if (StatusReg[28])
  {
    unint64_t v24 = 0LL;
LABEL_65:
    _dispatch_set_priority_and_voucher_slow(v24, 0LL, 14);
  }

uint64_t _dispatch_root_queue_drain_deferred_wlh(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  StatusReg[20] = v2;
  StatusReg[25] = *(unsigned int *)(v2 + 84) | 0xF0000LL;
  char v5 = *(_BYTE *)(a1 + 45) | 4;
  uint64_t v6 = (unint64_t *)(v3 + 7);
  unint64_t v7 = (unsigned int *)(v3 + 1);
  memset(v23, 0, sizeof(v23));
  *(_BYTE *)(a1 + 45) = v5;
  while (2)
  {
    if (MEMORY[0xFFFFFC100]) {
      _dispatch_trace_item_pop_internal((_opaque_pthread_t *)v2, v3);
    }
    _dispatch_introspection_queue_item_dequeue((dispatch_queue_s *)v2, (dispatch_object_s *)v3);
    uint64_t v8 = StatusReg[3] & 0xFFFFFFFCLL;
    while (1)
    {
      unint64_t v9 = __ldaxr(v6);
      if (v9 >> 55)
      {
        unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
        goto LABEL_8;
      }

      if ((v9 & 0xFFFFFFFC) != 0) {
        break;
      }
      unint64_t v10 = v8 | v9 & 0x7700000001LL | 0x60000000000000LL;
LABEL_8:
      if (!__stxr(v10, v6)) {
        goto LABEL_14;
      }
    }

    if ((v9 & 2) != 0)
    {
      unint64_t v10 = v9 | 0x800000000LL;
      goto LABEL_8;
    }

    __clrex();
    unint64_t v10 = v9;
LABEL_14:
    if ((v9 & 0x6000000001LL) != 0x2000000001LL) {
      _dispatch_root_queue_drain_deferred_wlh_cold_4(v9);
    }
    if ((v9 & 0xFF800000FFFFFFFCLL) != 0)
    {
      unsigned int v14 = *v7;
      if (v10 >> 55)
      {
        if (v14 != 0x7FFFFFFF)
        {
          do
          {
            unsigned int v15 = __ldxr(v7);
            BOOL v16 = __OFSUB__(v15, 2);
            signed int v17 = v15 - 2;
          }

          while (__stlxr(v17, v7));
          if ((v17 < 0) ^ v16 | (v17 == 0)) {
            _os_object_allows_weak_reference_cold_1();
          }
        }
      }

      else if (v14 != 0x7FFFFFFF)
      {
        do
        {
          unsigned int v18 = __ldxr(v7);
          BOOL v19 = __OFSUB__(v18, 1);
          signed int v20 = v18 - 1;
        }

        while (__stlxr(v20, v7));
        if ((v20 < 0) ^ v19 | (v20 == 0)) {
          _os_object_allows_weak_reference_cold_1();
        }
      }

      goto LABEL_34;
    }

    uint64_t result = (*(uint64_t (**)(uint64_t *, _OWORD *, uint64_t))(*v3 + 64))(v3, v23, 196610LL);
    if ((*(_BYTE *)(a1 + 45) & 1) != 0)
    {
      unint64_t v10 = *v6;
      if ((*v6 & 0x2000000000LL) != 0)
      {
        if ((v10 & 1) != 0)
        {
          if (*v7 != 0x7FFFFFFF)
          {
            do
              int v12 = __ldxr(v7);
            while (__stxr(v12 + 1, v7));
            if (v12 <= 0) {
              dispatch_set_target_queue_cold_2();
            }
          }

          unint64_t v13 = (_opaque_pthread_t *)v3[3];
          if (MEMORY[0xFFFFFC100])
          {
            unint64_t v22 = (_opaque_pthread_t *)v3[3];
            _dispatch_trace_item_push_internal(v13, v3);
            unint64_t v13 = v22;
          }

          _dispatch_introspection_queue_item_enqueue((dispatch_queue_s *)v13, (dispatch_object_s *)v3);
          continue;
        }

void _dispatch_queue_cleanup2()
{
  do
    unint64_t v0 = __ldaxr((unint64_t *)&qword_64DF8);
  while (__stxr((v0 & 0xFFFFFF7FFFFFFFFFLL) + 0x40020000000000LL, (unint64_t *)&qword_64DF8));
  do
    unsigned int v1 = __ldxr((unsigned int *)&dword_64E10);
  while (__stxr(v1 & 0xFFFBFFFF, (unsigned int *)&dword_64E10));
  _dispatch_lane_barrier_complete((unsigned __int16 *)&_dispatch_main_q, 0LL, 0LL);
  if (_dispatch_program_is_probably_callback_driven == 1)
  {
    pthread_attr_init(&v4);
    pthread_attr_setdetachstate(&v4, 2);
    int v2 = pthread_create(&v3, &v4, (void *(__cdecl *)(void *))_dispatch_sig_thread, 0LL);
    if (v2)
    {
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unable to create signal thread";
      qword_61258 = v2;
      __break(1u);
    }

    pthread_attr_destroy(&v4);
    sleep_NOCANCEL(1LL);
  }

  if (_dispatch_main_q_handle_pred != -1) {
    dispatch_once_f( &_dispatch_main_q_handle_pred,  &_dispatch_main_q,  (dispatch_function_t)_dispatch_runloop_queue_handle_init);
  }
  _dispatch_runloop_queue_handle_dispose((mach_port_context_t)&_dispatch_main_q);
}

void _dispatch_sig_thread()
{
  unint64_t v0 = pthread_self();
  stackaddr_np = pthread_get_stackaddr_np(v0);
  bzero(&vars0, stackaddr_np - (_BYTE *)&vars0);
  _dispatch_sigsuspend();
}

void _dispatch_sigsuspend()
{
  while (1)
    sigsuspend_NOCANCEL(&_dispatch_sigsuspend_mask);
}

  ;
}

uint64_t OUTLINED_FUNCTION_1_1(char *a1, uint64_t a2, const char *a3)
{
  return snprintf(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_2_0()
{
  return v0 + v1;
}

uint64_t OUTLINED_FUNCTION_3_1(char *a1, uint64_t a2, const char *a3)
{
  return snprintf(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_4_1(uint64_t a1, uint64_t a2, const char *a3)
{
  return snprintf(v4, v3, a3);
}

void _dispatch_apply_invoke(char *a1)
{
  int v2 = (unsigned int *)(a1 + 60);
  do
    unsigned int v3 = __ldxr(v2);
  while (__stxr(v3 + 1, v2));
  context[0] = a1;
  context[1] = 0LL;
  unsigned int v15 = v3;
  _dispatch_apply_set_attr_behavior(*((int **)a1 + 8), v3);
  pthread_attr_t v4 = (dispatch_once_t *)(*((void *)a1 + 5) + 8LL * v3);
  if (*v4 != -1) {
    dispatch_once_f(v4, context, (dispatch_function_t)_dispatch_apply_invoke3);
  }
  _dispatch_apply_clear_attr_behavior(*((void *)a1 + 8), v3);
  char v5 = (unsigned int *)(a1 + 52);
  do
  {
    unsigned int v6 = __ldxr(v5);
    unsigned int v7 = v6 - 1;
  }

  while (__stxr(v7, v5));
  if (!v7)
  {
    uint64_t v8 = *(void *)a1;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v10 = *(void *)(StatusReg + 176);
    if (v10) {
      int v11 = *(_DWORD *)(v10 + 8) + 1;
    }
    else {
      int v11 = 1;
    }
    if (v11 > _dispatch_continuation_cache_limit)
    {
      if (v8) {
        _dispatch_continuation_free_to_cache_limit(v8);
      }
    }

    else
    {
      *(void *)(v8 + 16) = v10;
      *(_DWORD *)(v8 + 8) = v11;
      *(void *)(StatusReg + 176) = v8;
    }

    int v12 = (void *)*((void *)a1 + 5);
    if (v12) {
      free(v12);
    }
    unint64_t v13 = (_OWORD *)*((void *)a1 + 8);
    if (v13)
    {
      v13[2] = 0u;
      v13[3] = 0u;
      *unint64_t v13 = 0u;
      v13[1] = 0u;
      free(*((void **)a1 + 8));
    }

    free(a1);
  }

void _dispatch_apply_redirect_invoke(char *a1)
{
  int v2 = (unsigned int *)(a1 + 60);
  do
    unsigned int v3 = __ldxr(v2);
  while (__stxr(v3 + 1, v2));
  context[0] = a1;
  context[1] = 1LL;
  unsigned int v15 = v3;
  _dispatch_apply_set_attr_behavior(*((int **)a1 + 8), v3);
  pthread_attr_t v4 = (dispatch_once_t *)(*((void *)a1 + 5) + 8LL * v3);
  if (*v4 != -1) {
    dispatch_once_f(v4, context, (dispatch_function_t)_dispatch_apply_invoke3);
  }
  _dispatch_apply_clear_attr_behavior(*((void *)a1 + 8), v3);
  char v5 = (unsigned int *)(a1 + 52);
  do
  {
    unsigned int v6 = __ldxr(v5);
    unsigned int v7 = v6 - 1;
  }

  while (__stxr(v7, v5));
  if (!v7)
  {
    uint64_t v8 = *(void *)a1;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v10 = *(void *)(StatusReg + 176);
    if (v10) {
      int v11 = *(_DWORD *)(v10 + 8) + 1;
    }
    else {
      int v11 = 1;
    }
    if (v11 > _dispatch_continuation_cache_limit)
    {
      if (v8) {
        _dispatch_continuation_free_to_cache_limit(v8);
      }
    }

    else
    {
      *(void *)(v8 + 16) = v10;
      *(_DWORD *)(v8 + 8) = v11;
      *(void *)(StatusReg + 176) = v8;
    }

    int v12 = (void *)*((void *)a1 + 5);
    if (v12) {
      free(v12);
    }
    unint64_t v13 = (_OWORD *)*((void *)a1 + 8);
    if (v13)
    {
      v13[2] = 0u;
      v13[3] = 0u;
      *unint64_t v13 = 0u;
      v13[1] = 0u;
      free(*((void **)a1 + 8));
    }

    free(a1);
  }

void dispatch_apply_f( size_t iterations, dispatch_queue_t queue, void *context, void (__cdecl *work)(void *, size_t))
{
}

void _dispatch_apply_with_attr_f( unint64_t a1, uint64_t a2, __objc2_class **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a1) {
    return;
  }
  unsigned int v6 = a3;
  if (a2 && (*(_DWORD *)a2 != -1592086528 || ~*(void *)(a2 + 16) != a2)) {
    _dispatch_apply_with_attr_f_cold_3(a2);
  }
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unint64_t v10 = StatusReg + 184;
  while (1)
  {
    unint64_t v10 = *(void *)v10;
    if (!v10) {
      break;
    }
    if (*(char **)(v10 + 8) == "apply")
    {
      unint64_t v11 = *(void *)(v10 + 16);
      goto LABEL_10;
    }
  }

  unint64_t v11 = 0LL;
LABEL_10:
  unint64_t v13 = (__int128 *)(StatusReg + 160);
  int v12 = *(dispatch_queue_s **)(StatusReg + 160);
  if (!a3)
  {
    if (!v12) {
      goto LABEL_24;
    }
    unsigned int v14 = *(__objc2_class ***)(StatusReg + 160);
    do
    {
      unsigned int v6 = v14;
      unsigned int v14 = (__objc2_class **)v14[3];
      if (!v14) {
        break;
      }
    }

    while (v14 != &_dispatch_custom_workloop_root_queue && v14 != &_dispatch_custom_workloop_overcommit_root_queue);
    if (v6 >= &_dispatch_root_queues && v6 < (__objc2_class **)&_dispatch_queue_serial_numbers)
    {
LABEL_24:
      unsigned int v17 = __clz(__rbit32((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF));
      if (((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF) != 0) {
        unsigned int v18 = v17 + 1;
      }
      else {
        unsigned int v18 = 4;
      }
      if (v18 - 7 <= 0xFFFFFFF9) {
        _dispatch_queue_priority_inherit_from_target_cold_1(v18);
      }
      unsigned int v6 = &_dispatch_root_queues + 16 * (unint64_t)(3 * v18 - 3);
    }
  }

  unsigned int v19 = *((_DWORD *)v6 + 21);
  int v20 = (unsigned __int16)v19 >> 12;
  int v21 = (v19 >> 8) & 0xF;
  if (v21) {
    int v22 = v21;
  }
  else {
    int v22 = v20;
  }
  if (v6[3])
  {
    unsigned int v50 = __clz(__rbit32((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF));
    if (((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF) != 0) {
      int v22 = v50 + 1;
    }
    else {
      int v22 = 0;
    }
  }

  if (a2)
  {
    if (*(_DWORD *)a2 != -1592086528 || ~*(void *)(a2 + 16) != a2) {
      _dispatch_apply_with_attr_f_cold_3(a2);
    }
    if (!v11)
    {
      uint64_t v24 = 33LL;
      switch(v22)
      {
        case 0:
          goto LABEL_38;
        case 1:
          uint64_t v24 = 5LL;
          break;
        case 2:
          uint64_t v24 = 9LL;
          break;
        case 3:
          uint64_t v24 = 17LL;
          break;
        case 4:
          uint64_t v24 = 21LL;
          break;
        case 5:
          uint64_t v24 = 25LL;
          break;
        case 6:
          break;
        default:
          uint64_t v24 = 0LL;
          break;
      }

      int v25 = pthread_qos_max_parallelism(v24, 0LL);
      if (v25 <= 0) {
LABEL_38:
      }
        int v25 = MEMORY[0xFFFFFC036];
      else {
        unint64_t v28 = v25;
      }
      if (*(void *)(a2 + 8))
      {
        uint64_t v29 = v22 - 1LL;
        else {
          uint64_t v30 = dword_40084[v29];
        }
        int v32 = pthread_qos_max_parallelism(v30, 2LL);
        if (v32 < 1) {
          unint64_t v31 = 0LL;
        }
        else {
          unint64_t v31 = (v32 * *(_DWORD *)(a2 + 8));
        }
      }

      else
      {
        unint64_t v31 = -1LL;
      }

      if (v31 >= v28) {
        unint64_t v31 = v28;
      }
      if (v31)
      {
        uint64_t v33 = 0xFFFFLL;
        goto LABEL_74;
      }

LABEL_147:
      _dispatch_apply_with_attr_f_cold_2(a2);
    }

    uint64_t v33 = 0xFFFFLL;
    unint64_t v31 = 1LL;
  }

  else
  {
    uint64_t v26 = 33LL;
    switch(v22)
    {
      case 0:
        goto LABEL_40;
      case 1:
        uint64_t v26 = 5LL;
        break;
      case 2:
        uint64_t v26 = 9LL;
        break;
      case 3:
        uint64_t v26 = 17LL;
        break;
      case 4:
        uint64_t v26 = 21LL;
        break;
      case 5:
        uint64_t v26 = 25LL;
        break;
      case 6:
        break;
      default:
        uint64_t v26 = 0LL;
        break;
    }

    int v27 = pthread_qos_max_parallelism(v26, 0LL);
    if (v27 <= 0) {
LABEL_40:
    }
      int v27 = MEMORY[0xFFFFFC036];
    else {
      unint64_t v31 = v27;
    }
    if (v11)
    {
      if (v11 >= v31) {
        unint64_t v31 = 1LL;
      }
      else {
        v31 /= v11;
      }
      if (v11 >= 0xFFFF || a1 >= 0xFFFF) {
        uint64_t v33 = 0xFFFFLL;
      }
      else {
        uint64_t v33 = v11 * a1;
      }
    }

    else
    {
      uint64_t v33 = a1;
      if (!(_DWORD)v31) {
        goto LABEL_147;
      }
    }
  }

        char v98 = v22;
        unsigned int v99 = v16;
        unsigned int v100 = v3;
        v101 = v19;
        v102 = v20;
        unsigned int v103 = v31;
        unint64_t v104 = v18;
        __int128 v105 = v30;
        _dispatch_bug(586LL, 0LL);
LABEL_148:
        uint64_t v30 = v105;
        unsigned int v18 = v104;
        unint64_t v31 = v103;
        int v20 = v102;
        unsigned int v19 = v101;
        unsigned int v3 = v100;
        BOOL v16 = v99;
        int v22 = v98;
        goto LABEL_189;
      }

LABEL_74:
  if (v31 >= a1) {
    unint64_t v34 = a1;
  }
  else {
    unint64_t v34 = v31;
  }
  uint64_t v59 = 0LL;
  uint64_t v35 = _dispatch_calloc(1uLL, 0x48uLL);
  *((void *)v35 + 1) = 0LL;
  *((void *)v35 + 3) = a1;
  *((void *)v35 + 4) = v33;
  *((_DWORD *)v35 + 13) = v34;
  *((_DWORD *)v35 + 15) = 0;
  if (a2)
  {
    unint64_t v36 = (unint64_t)_dispatch_calloc(1uLL, 0x40uLL);
    *(_OWORD *)unint64_t v36 = 0u;
    *(_OWORD *)(v36 + 16) = 0u;
    *(_OWORD *)(v36 + 32) = 0u;
    *(_OWORD *)(v36 + 48) = 0u;
    *(_DWORD *)unint64_t v36 = -1592086528;
    *(void *)(v36 + 16) = ~v36;
    *(void *)(v36 + 8) = *(void *)(a2 + 8);
    *(_DWORD *)(v36 + 4) = *(_DWORD *)(a2 + 4);
  }

  else
  {
    unint64_t v36 = 0LL;
  }

  *((void *)v35 + 8) = v36;
  *((void *)v35 + 5) = 0LL;
  *((void *)v35 + 2) = a1;
  uint64_t v37 = *(void **)(StatusReg + 176);
  if (v37) {
    *(void *)(StatusReg + 176) = v37[2];
  }
  else {
    uint64_t v37 = _dispatch_continuation_alloc_from_heap();
  }
  *(void *)uint64_t v35 = v37;
  v37[4] = a5;
  v37[5] = a4;
  v37[6] = a6;
  v37[7] = v6;
  *uint64_t v37 = 256LL;
  *((_DWORD *)v35 + 12) = 0;
  unint64_t v38 = (__objc2_class **)v6[3];
  if (v38 == &_dispatch_custom_workloop_root_queue || v38 == &_dispatch_custom_workloop_overcommit_root_queue)
  {
    else {
      _dispatch_apply_serial((uint64_t *)v35);
    }
    return;
  }

  if (v34 < 2 || *((_WORD *)v6 + 40) == 1)
  {
    __int128 v51 = (void (__cdecl *)(void *))_dispatch_apply_serial;
    goto LABEL_123;
  }

  if (v38)
  {
    if (v6 == (__objc2_class **)v12)
    {
      __int128 v51 = (void (__cdecl *)(void *))_dispatch_apply_serial;
      uint64_t v52 = v12;
      goto LABEL_124;
    }

    __int128 v51 = (void (__cdecl *)(void *))_dispatch_apply_redirect;
LABEL_123:
    uint64_t v52 = (dispatch_queue_s *)v6;
LABEL_124:
    dispatch_sync_f(v52, v35, v51);
    return;
  }

  __int128 v58 = *v13;
  *(void *)(StatusReg + 160) = v6;
  *(void *)(StatusReg + 168) = &v58;
  int v39 = *((_DWORD *)v35 + 13);
  uint64_t v40 = (v39 - 1);
  if (v39 < 2)
  {
    unint64_t v42 = 0LL;
    unint64_t v41 = 0LL;
  }

  else
  {
    __int128 v57 = v6;
    unint64_t v41 = 0LL;
    unint64_t v42 = 0LL;
    uint64_t v43 = *(void *)(StatusReg + 32) | 0x10000000LL;
    int v44 = v39 - 1;
    do
    {
      uint64_t v45 = v41;
      unint64_t v41 = *(uint64_t **)(StatusReg + 176);
      if (v41) {
        *(void *)(StatusReg + 176) = v41[2];
      }
      else {
        unint64_t v41 = (uint64_t *)_dispatch_continuation_alloc_from_heap();
      }
      *unint64_t v41 = 260LL;
      v41[4] = (uint64_t)_dispatch_apply_invoke;
      v41[5] = (uint64_t)v35;
      uint64_t v46 = *(void *)(StatusReg + 224);
      if (v46) {
        os_retain(*(void **)(StatusReg + 224));
      }
      v41[3] = v46;
      if (v46 != -1)
      {
        if (v46) {
          uint64_t v46 = *(unsigned int *)(v46 + 32);
        }
        if (MEMORY[0xFFFFFC100]) {
          kdebug_trace(771817476LL, v46, v41, 0LL, 0LL);
        }
      }

      v41[1] = v43;
      v41[2] = (uint64_t)v45;
      if (!v42) {
        unint64_t v42 = (unint64_t)v41;
      }
      --v44;
    }

    while (v44);
    int v39 = *((_DWORD *)v35 + 13);
    unint64_t v13 = (__int128 *)(StatusReg + 160);
    unsigned int v6 = v57;
    uint64_t v40 = v40;
  }

  *((_DWORD *)v35 + 14) = v39;
  *((void *)v35 + 5) = _dispatch_calloc(v39, 8uLL);
  if (MEMORY[0xFFFFFC100])
  {
    uint64_t v53 = v41;
    do
    {
      if (MEMORY[0xFFFFFC100]) {
        _dispatch_trace_item_push_internal((_opaque_pthread_t *)v6, v53);
      }
      uint64_t v53 = (uint64_t *)v53[2];
    }

    while (v53);
  }

  unint64_t v47 = v41;
  do
  {
    _dispatch_introspection_queue_item_enqueue((dispatch_queue_s *)v6, (dispatch_object_s *)v47);
    unint64_t v47 = (uint64_t *)v47[2];
  }

  while (v47);
  *(void *)(v42 + 16) = 0LL;
  unint64_t v48 = (unint64_t *)(v6 + 6);
  *(void *)(StatusReg + 976) = v6 + 6;
  do
    unint64_t v49 = __ldxr(v48);
  while (__stlxr(v42, v48));
  if (v49)
  {
    *(void *)(v49 + 16) = v41;
    *(void *)(StatusReg + 976) = 0LL;
  }

  else
  {
    v6[13] = (__objc2_class *)v41;
    *(void *)(StatusReg + 976) = 0LL;
    _dispatch_root_queue_poke_and_wakeup((unsigned int *)v6, v40, 0);
  }

  _dispatch_apply_invoke_and_wait((char *)v35);
  *unint64_t v13 = v58;
}

void dispatch_apply_with_attr_f(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void dispatch_apply(size_t iterations, dispatch_queue_t queue, void *block)
{
  char v5 = (void (__cdecl **)(void *, size_t))_dispatch_Block_copy(block);
  dispatch_apply_f(iterations, queue, v5, v5[2]);
  _Block_release(v5);
}

void dispatch_apply_with_attr(unint64_t a1, uint64_t a2, void *aBlock)
{
  char v5 = (uint64_t *)_dispatch_Block_copy(aBlock);
  _dispatch_apply_with_attr_f(a1, a2, 0LL, (uint64_t)v5, v5[2], 2LL);
  _Block_release(v5);
}

double dispatch_apply_attr_init(unint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)a1 = -1592086528;
  *(void *)(a1 + 16) = ~a1;
  return result;
}

double dispatch_apply_attr_destroy(_OWORD *a1)
{
  double result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t dispatch_apply_attr_set_parallelism(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 == -1 || a2 == 2)
  {
    if (a3 != 1)
    {
      if (!a3) {
        dispatch_apply_attr_set_parallelism_cold_4();
      }
      dispatch_apply_attr_set_parallelism_cold_3(a3);
    }

    if (result && (*(_DWORD *)result != -1592086528 || ~*(void *)(result + 16) != result)) {
      _dispatch_apply_with_attr_f_cold_3(result);
    }
    *(void *)(result + 8) = 1LL;
  }

  else
  {
    if (a2 != 1) {
      dispatch_apply_attr_set_parallelism_cold_1(a2);
    }
    if (a3 != 1) {
      dispatch_apply_attr_set_parallelism_cold_2(a3);
    }
  }

  return result;
}

unint64_t dispatch_apply_attr_query(unint64_t result, uint64_t a2, char a3)
{
  uint64_t v3 = result;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unint64_t v5 = StatusReg + 184;
  while (1)
  {
    unint64_t v5 = *(void *)v5;
    if (!v5) {
      break;
    }
    if (*(char **)(v5 + 8) == "apply")
    {
      unint64_t v6 = *(void *)(v5 + 16);
      goto LABEL_6;
    }
  }

  unint64_t v6 = 0LL;
LABEL_6:
  unsigned int v7 = *(__objc2_class ***)(StatusReg + 160);
  if (!v7) {
    goto LABEL_18;
  }
  do
  {
    uint64_t v8 = v7;
    unsigned int v7 = (__objc2_class **)v7[3];
    if (!v7) {
      break;
    }
    BOOL v9 = v7 == &_dispatch_custom_workloop_root_queue || v7 == &_dispatch_custom_workloop_overcommit_root_queue;
  }

  while (!v9);
  if (v8 >= &_dispatch_root_queues && v8 < (__objc2_class **)&_dispatch_queue_serial_numbers)
  {
LABEL_18:
    unsigned int v11 = (*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF;
    BOOL v9 = v11 == 0;
    unsigned int v12 = __clz(__rbit32(v11));
    if (v9) {
      double result = 4LL;
    }
    else {
      double result = v12 + 1;
    }
    uint64_t v8 = &_dispatch_root_queues + 16 * (unint64_t)(3 * result - 3);
  }

  unsigned int v13 = *((_DWORD *)v8 + 21);
  int v14 = (unsigned __int16)v13 >> 12;
  int v15 = (v13 >> 8) & 0xF;
  if (v15) {
    int v16 = v15;
  }
  else {
    int v16 = v14;
  }
  switch(a2)
  {
    case 0LL:
      return dispatch_apply_attr_query(v3, 1LL) != 0;
    case 1LL:
      if ((a3 & 1) != 0)
      {
        if (!v3)
        {
          uint64_t v22 = 33LL;
          switch(v16)
          {
            case 0:
              goto LABEL_54;
            case 1:
LABEL_76:
              uint64_t v22 = 5LL;
              break;
            case 2:
LABEL_77:
              uint64_t v22 = 9LL;
              break;
            case 3:
LABEL_78:
              uint64_t v22 = 17LL;
              break;
            case 4:
LABEL_79:
              uint64_t v22 = 21LL;
              break;
            case 5:
LABEL_80:
              uint64_t v22 = 25LL;
              break;
            case 6:
              break;
            default:
LABEL_75:
              uint64_t v22 = 0LL;
              break;
          }

LABEL_61:
        int v21 = pthread_qos_max_parallelism(v17, 0LL);
        if (v21 <= 0) {
LABEL_48:
        }
          int v21 = MEMORY[0xFFFFFC036];
        else {
          unint64_t v19 = v21;
        }
        if (*(void *)(v3 + 8))
        {
          uint64_t v23 = v16 - 1LL;
          else {
            uint64_t v20 = dword_40084[v23];
          }
          goto LABEL_70;
        }
      }

      else
      {
        if (!v3)
        {
          LODWORD(result) = pthread_qos_max_parallelism(33LL, 0LL);
          return result;
        }

        if (*(_DWORD *)v3 != -1592086528 || ~*(void *)(v3 + 16) != v3) {
          _dispatch_apply_with_attr_f_cold_3(v3);
        }
        int v18 = pthread_qos_max_parallelism(33LL, 0LL);
        if (v18 <= 0) {
          int v18 = MEMORY[0xFFFFFC036];
        }
        unint64_t v19 = v18;
        if (*(void *)(v3 + 8))
        {
          uint64_t v20 = 33LL;
LABEL_70:
          int v25 = pthread_qos_max_parallelism(v20, 2LL);
          if (v25 < 1) {
            unint64_t v24 = 0LL;
          }
          else {
            unint64_t v24 = (v25 * *(_DWORD *)(v3 + 8));
          }
          goto LABEL_72;
        }
      }

      unint64_t v24 = -1LL;
LABEL_72:
      if (v24 >= v19) {
        return v19;
      }
      else {
        return v24;
      }
    case 2LL:
      if (!v3)
      {
        uint64_t v22 = 33LL;
        switch(v16)
        {
          case 0:
            goto LABEL_54;
          case 1:
            goto LABEL_76;
          case 2:
            goto LABEL_77;
          case 3:
            goto LABEL_78;
          case 4:
            goto LABEL_79;
          case 5:
            goto LABEL_80;
          case 6:
            goto LABEL_81;
          default:
            goto LABEL_75;
        }
      }

      if (*(_DWORD *)v3 != -1592086528 || ~*(void *)(v3 + 16) != v3) {
        _dispatch_apply_with_attr_f_cold_3(v3);
      }
      if (!v6)
      {
        uint64_t v17 = 33LL;
        switch(v16)
        {
          case 0:
            goto LABEL_48;
          case 1:
            goto LABEL_56;
          case 2:
            goto LABEL_57;
          case 3:
            goto LABEL_58;
          case 4:
            goto LABEL_59;
          case 5:
            goto LABEL_60;
          case 6:
            goto LABEL_61;
          default:
            goto LABEL_55;
        }
      }

      return 1LL;
  }

  return result;
}

    _dispatch_trace_item_push_internal((_opaque_pthread_t *)&_dispatch_mgr_q, (uint64_t *)a1);
    goto LABEL_52;
  }

  uint64_t v3 = a3;
  unint64_t v5 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  if (!v5 || *(dispatch_object_s **)(v5 + 24) != a1)
  {
    if ((a2 & 1) != 0)
    {
      unint64_t v10 = *(unsigned int *)(*((void *)a1 + 3) + 84LL);
      if ((v10 & 0x8000000) != 0)
      {
LABEL_60:
        qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Waking up a kq with cooperative thread request is not supported";
        qword_61258 = v10;
        __break(1u);
        goto LABEL_61;
      }

      unsigned int v11 = (v10 >> 8) & 0xF;
      if (v11 <= (BYTE4(a2) & 7u)) {
        unsigned int v11 = BYTE4(a2) & 7;
      }
      if (v11 <= 1) {
        LOBYTE(v11) = 1;
      }
      unsigned int v12 = 256LL << (v11 - 1);
      unsigned int v7 = a2 & 2 | 0x3700000001LL;
      unint64_t v6 = v10 & 0x80000000 | v12 | 0xFF;
      if ((a2 & 2) != 0) {
        BOOL v9 = 401;
      }
      else {
        BOOL v9 = 273;
      }
      uint64_t v8 = 5;
    }

    else
    {
      unint64_t v6 = 0;
      unsigned int v7 = 1LL;
      uint64_t v8 = 7;
      BOOL v9 = 1;
    }

    uint64_t v30 = a1;
    LOWORD(v31) = -17;
    WORD1(v31) = v8;
    HIDWORD(v31) = v6;
    int v32 = (uint64_t)a1;
    LODWORD(v33[0]) = v9;
    memset((char *)v33 + 4, 0, 20);
    *((void *)&v33[1] + 1) = (char *)a1 + 56;
    *(void *)&unint64_t v34 = v7;
    *((void *)&v34 + 1) = a2;
    if (!_dispatch_kq_poll(a1, &v30, 1LL, &v30, 1LL, 0LL, 0LL, 3LL))
    {
      if ((v3 & 0x80000000) != 0)
      {
      }

      else
      {
        _os_object_release_internal(a1, v13);
      }

      return;
    }

      int v27 = *(void *)(a1 + 896);
      if ((~v27 & 0xFF00000000LL) == 0 || BYTE4(*(void *)(a1 + 896)) == 0)
      {
        if (!*(_DWORD *)(a1 + 1552)) {
          firehose_client_reconnect((int *)a1, 0, 0);
        }
      }

      else
      {
        uint64_t v29 = (unint64_t *)(a1 + 896);
        uint64_t v30 = (unint64_t *)(a1 + ((unint64_t)BYTE4(v27) << 12));
        unint64_t v31 = v30[1];
        do
        {
          int v32 = __ldxr(v30);
          if (!v32 || (v32 & 0x1FF000000000000LL) != 0x2000000000000LL) {
            goto LABEL_88;
          }
          unint64_t v34 = (unsigned __int16)v32 + 25 > WORD1(v32) || v31 < 0xFFFF000000000000LL;
          uint64_t v35 = (v32 + 0x100000020LL) >> 16;
          unint64_t v36 = ((unsigned __int16)(v32 + 32) + 40 > (unsigned __int16)v35) | ((v32 + 0x100000020LL) >> 56);
          if (v34)
          {
            uint64_t v35 = v32 >> 16;
            uint64_t v37 = v32;
          }

          else
          {
            uint64_t v37 = v32 + 0x100000020LL;
          }

          if (v34) {
            unint64_t v38 = HIBYTE(v32) | 1;
          }
          else {
            unint64_t v38 = v36;
          }
        }

        while (__stxr( v37 & 0xFFFFFF00000000LL | (v38 << 56) | ((_DWORD)v35 << 16) | (unsigned __int16)v37,  v30));
        if (!v34)
        {
          if (!(_WORD)v32) {
            goto LABEL_89;
          }
          qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Allocation should always fail";
          qword_61258 = (unsigned __int16)v32;
          __break(1u);
LABEL_88:
          __clrex();
          goto LABEL_89;
        }

        if ((v37 & 0xFF00000000LL) == 0) {
          firehose_buffer_ring_enqueue((int *)a1, BYTE4(v27));
        }
LABEL_89:
        while (1)
        {
          int v39 = __ldxr(v29);
          if (v39 != v27) {
            break;
          }
          if (!__stxr(v27 & 0xFFFFFF00FFFFFFFFLL, v29)) {
            return;
          }
        }

        __clrex();
      }
    }
  }

int *_dispatch_apply_set_attr_behavior(int *result, uint64_t a2)
{
  if (result)
  {
    if (*((void *)result + 1))
    {
      double result = (int *)__bsdthread_ctl(0x2000LL, 1LL, a2);
      if ((_DWORD)result)
      {
        double result = __error();
        if (*result != 45) {
          __break(1u);
        }
      }
    }
  }

  return result;
}

void _dispatch_apply_invoke3(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = *(void *)(*a1 + 24);
  uint64_t v3 = (unint64_t *)(*a1 + 8);
  do
    unint64_t v4 = __ldxr(v3);
  while (__stxr(v4 + 1, v3));
  if (v4 >= v2) {
    return;
  }
  unint64_t v5 = *(void (__cdecl **)(void *))(*(void *)v1 + 32LL);
  unint64_t v6 = *(void **)(*(void *)v1 + 40LL);
  uint64_t v7 = *(void *)(*(void *)v1 + 48LL);
  uint64_t v8 = *(void *)(v1 + 32);
  v28[1] = "apply";
  v28[2] = v8;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v10 = *(void *)(StatusReg + 184);
  v28[0] = v10;
  *(void *)(StatusReg + 184) = v28;
  unint64_t v24 = StatusReg;
  if ((a1[1] & 1) != 0)
  {
    uint64_t v11 = *(void *)(*(void *)v1 + 56LL);
    __int128 v27 = *(_OWORD *)(StatusReg + 160);
    *(void *)(StatusReg + 160) = v11;
    *(void *)(StatusReg + 168) = &v27;
    LODWORD(v10) = *(_DWORD *)(v11 + 84);
    uint64_t v12 = *(void *)(StatusReg + 200);
    if ((_DWORD)v12)
    {
      unsigned int v13 = v10 & 0xFFF;
      if ((v10 & 0xFFF) != 0)
      {
        else {
          int v14 = 1140912128;
        }
        LODWORD(v10) = v12 & 0x880F0000 | v13 | v14 & v10;
      }

      else
      {
        unsigned int v15 = v12 | 0x40000000;
        if ((v12 & 0xFFF) == 0) {
          unsigned int v15 = *(void *)(StatusReg + 200);
        }
        unsigned int v16 = (unsigned __int16)v10 >> 12;
        LODWORD(v10) = v15 & 0xFFFF0FFF | v10 & 0x400F000;
        if (v16 <= ((v15 >> 8) & 0xF)) {
          LODWORD(v10) = v15;
        }
      }
    }

    else
    {
LABEL_37:
      LODWORD(v10) = v10 & 0xFFF0FFFF;
    }

    *(void *)(StatusReg + 200) = v10;
    uint64_t v23 = v12 & 0xFFF0FFFF;
  }

  else
  {
    uint64_t v23 = 0LL;
  }

  uint64_t v17 = 0LL;
  uint64_t v25 = v1;
  int v18 = *(_DWORD *)(v1 + 48);
  do
  {
    if ((v18 & 0x1000000) != 0)
    {
      unint64_t v19 = objc_autoreleasePoolPush();
      if ((v7 & 1) != 0)
      {
LABEL_22:
        _dispatch_introspection_callout_entry(v6, v5);
        _dispatch_client_callout2((uint64_t)v6, v4, (uint64_t (*)(void))v5);
        goto LABEL_26;
      }
    }

    else
    {
      unint64_t v19 = 0LL;
      if ((v7 & 1) != 0) {
        goto LABEL_22;
      }
    }

    if ((v7 & 2) == 0)
    {
      LODWORD(v12) = v7;
      qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: apply continuation has invalid flags";
      qword_61258 = v7;
      __break(1u);
      goto LABEL_37;
    }

    uint64_t v20 = *((unsigned int *)a1 + 4);
    _dispatch_introspection_callout_entry(v6, v5);
    _dispatch_client_callout3_a((uint64_t)v6, v4, v20, (uint64_t (*)(void))v5);
LABEL_26:
    _dispatch_introspection_callout_return(v6, v5);
    ++v17;
    do
    {
      unint64_t v4 = __ldxr(v3);
      LODWORD(v10) = __stxr(v4 + 1, v3);
    }

    while ((_DWORD)v10);
    if (v19) {
      objc_autoreleasePoolPop(v19);
    }
  }

  while (v4 < v2);
  if ((a1[1] & 1) != 0)
  {
    *(void *)(v24 + 200) = *(void *)(v24 + 200) & 0xF0000LL | v23;
    *(_OWORD *)(v24 + 160) = v27;
  }

  *(void *)(v24 + 184) = v28[0];
  int v21 = (unint64_t *)(v25 + 16);
  do
    unint64_t v22 = __ldxr(v21);
  while (__stlxr(v22 - v17, v21));
}

uint64_t _dispatch_apply_clear_attr_behavior(uint64_t result, uint64_t a2)
{
  if (result && *(void *)(result + 8))
  {
    double result = __bsdthread_ctl(0x2000LL, 2LL, a2);
    if ((_DWORD)result) {
      __break(1u);
    }
  }

  return result;
}

void _dispatch_apply_serial(uint64_t *a1)
{
  unint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void *)(*a1 + 56);
  if (v3)
  {
    do
    {
      int v4 = *(_DWORD *)(v3 + 80);
      uint64_t v3 = *(void *)(v3 + 24);
      if (v3) {
        BOOL v5 = (v4 & 0x30000) == 0;
      }
      else {
        BOOL v5 = 0;
      }
    }

    while (v5);
    BOOL v6 = (v4 & 0x10000) == 0;
  }

  else
  {
    BOOL v6 = 1;
  }

  uint64_t v7 = 0LL;
  else {
    uint64_t v8 = a1[3];
  }
  do
  {
    if (v6) {
      BOOL v9 = 0LL;
    }
    else {
      BOOL v9 = objc_autoreleasePoolPush();
    }
    uint64_t v10 = v2[6];
    if ((v10 & 1) != 0)
    {
      uint64_t v12 = (void (__cdecl *)(void *))v2[4];
      uint64_t v11 = (void *)v2[5];
      _dispatch_introspection_callout_entry(v11, v12);
      _dispatch_client_callout2((uint64_t)v11, v7, (uint64_t (*)(void))v12);
    }

    else
    {
      if ((v10 & 2) == 0)
      {
        qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: apply continuation has invalid flags";
        qword_61258 = v10;
        __break(1u);
        return;
      }

      uint64_t v12 = (void (__cdecl *)(void *))v2[4];
      uint64_t v11 = (void *)v2[5];
      _dispatch_introspection_callout_entry(v11, v12);
      _dispatch_client_callout3_a((uint64_t)v11, v7, 0LL, (uint64_t (*)(void))v12);
    }

    _dispatch_introspection_callout_return(v11, v12);
    if (v9) {
      objc_autoreleasePoolPop(v9);
    }
    ++v7;
  }

  while (v8 != v7);
  uint64_t v13 = *a1;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v15 = *(void *)(StatusReg + 176);
  if (v15) {
    int v16 = *(_DWORD *)(v15 + 8) + 1;
  }
  else {
    int v16 = 1;
  }
  if (v16 > _dispatch_continuation_cache_limit)
  {
    if (v13) {
      _dispatch_continuation_free_to_cache_limit(v13);
    }
  }

  else
  {
    *(void *)(v13 + 16) = v15;
    *(_DWORD *)(v13 + 8) = v16;
    *(void *)(StatusReg + 176) = v13;
  }

  uint64_t v17 = (void *)a1[5];
  if (v17) {
    free(v17);
  }
  int v18 = (_OWORD *)a1[8];
  if (v18)
  {
    v18[2] = 0u;
    v18[3] = 0u;
    *int v18 = 0u;
    v18[1] = 0u;
    free((void *)a1[8]);
  }

  free(a1);
}

void _dispatch_apply_redirect(uint64_t *a1)
{
  uint64_t v1 = (*((_DWORD *)a1 + 13) - 1);
  uint64_t v2 = *(void *)(*a1 + 56);
  uint64_t v3 = v2;
  do
  {
    if (*(_WORD *)(v3 + 80) == 1)
    {
      uint64_t v6 = 0LL;
    }

    else
    {
      int v4 = (unint64_t *)(v3 + 56);
      while (1)
      {
        unint64_t v5 = __ldxr(v4);
        if ((v5 & 0x20000000000000LL) != 0) {
          break;
        }
        uint64_t v6 = (v5 >> 41) & 0x1FFF;
        if ((_DWORD)v6 == 4096) {
          break;
        }
        LODWORD(v6) = 4096 - v6;
        else {
          uint64_t v6 = v6;
        }
        if (!__stxr(v5 + (v6 << 41), v4)) {
          goto LABEL_10;
        }
      }

      uint64_t v6 = 0LL;
      __clrex();
    }

void _dispatch_apply_invoke_and_wait(char *a1)
{
  uint64_t v2 = (unsigned int *)(a1 + 60);
  do
    unsigned int v3 = __ldxr(v2);
  while (__stxr(v3 + 1, v2));
  context[0] = a1;
  context[1] = 2LL;
  unsigned int v20 = v3;
  uint64_t v4 = v3;
  _dispatch_apply_set_attr_behavior(*((int **)a1 + 8), v3);
  unint64_t v5 = (dispatch_once_t *)(*((void *)a1 + 5) + 8LL * v3);
  if (*v5 != -1) {
    dispatch_once_f(v5, context, (dispatch_function_t)_dispatch_apply_invoke3);
  }
  _dispatch_apply_clear_attr_behavior(*((void *)a1 + 8), v3);
  int v6 = *((_DWORD *)a1 + 14);
  if (v6 >= 1)
  {
    uint64_t v7 = 0LL;
    for (uint64_t i = 0LL; i < v6; ++i)
    {
      if (8 * v4 != v7)
      {
        BOOL v9 = (dispatch_once_t *)(*((void *)a1 + 5) + v7);
        if (*v9 != -1) {
          dispatch_once_f(v9, 0LL, (dispatch_function_t)_dispatch_no_op);
        }
        int v6 = *((_DWORD *)a1 + 14);
      }

      v7 += 8LL;
    }
  }

  unint64_t v10 = (unsigned int *)(a1 + 52);
  do
  {
    unsigned int v11 = __ldxr(v10);
    unsigned int v12 = v11 - 1;
  }

  while (__stxr(v12, v10));
  if (!v12)
  {
    uint64_t v13 = *(void *)a1;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v15 = *(void *)(StatusReg + 176);
    if (v15) {
      int v16 = *(_DWORD *)(v15 + 8) + 1;
    }
    else {
      int v16 = 1;
    }
    if (v16 > _dispatch_continuation_cache_limit)
    {
      if (v13) {
        _dispatch_continuation_free_to_cache_limit(v13);
      }
    }

    else
    {
      *(void *)(v13 + 16) = v15;
      *(_DWORD *)(v13 + 8) = v16;
      *(void *)(StatusReg + 176) = v13;
    }

    int v17 = (void *)*((void *)a1 + 5);
    if (v17) {
      free(v17);
    }
    int v18 = (_OWORD *)*((void *)a1 + 8);
    if (v18)
    {
      v18[2] = 0u;
      v18[3] = 0u;
      *int v18 = 0u;
      v18[1] = 0u;
      free(*((void **)a1 + 8));
    }

    free(a1);
  }

dispatch_source_t dispatch_source_create( dispatch_source_type_t type, uintptr_t handle, unint64_t mask, dispatch_queue_t queue)
{
  uint64_t v6 = (*((uint64_t (**)(dispatch_source_type_t, uintptr_t, unint64_t))type + 4))(type, handle, mask);
  if (!v6) {
    return 0LL;
  }
  uint64_t v7 = v6;
  uint64_t v8 = _dispatch_object_alloc(&OBJC_CLASS___OS_dispatch_source, 120LL);
  BOOL v9 = (dispatch_source_s *)v8;
  char v10 = *(_BYTE *)(*(void *)v7 + 10LL);
  *(_DWORD *)(v8 + 8) += 2;
  if (*(_BYTE *)(*(void *)v8 + 40LL) == 19LL) {
    ++*(_DWORD *)(v8 + 8);
  }
  *(void *)(v8 + 16) = -1985229329LL;
  if ((v10 & 2) != 0) {
    int v11 = 67108865;
  }
  else {
    int v11 = 4194305;
  }
  *(_DWORD *)(v8 + 80) = v11;
  *(void *)(v8 + 56) = 0x19FFE0000000000LL;
  do
    unint64_t v12 = __ldxr(&_dispatch_queue_serial_numbers);
  while (__stxr(v12 + 1, &_dispatch_queue_serial_numbers));
  *(void *)(v8 + 64) = v12;
  *(void *)(v8 + 72) = "source";
  *(void *)(v8 + 88) = v7;
  *(void *)(v7 + 8) = ~v8;
  if (queue)
  {
    if ((*((_BYTE *)queue + 87) & 8) != 0 && (*(_BYTE *)(v7 + 29) & 2) == 0) {
      dispatch_source_create_cold_2(v8);
    }
    if (*((_DWORD *)queue + 2) != 0x7FFFFFFF)
    {
      uint64_t v13 = (unsigned int *)((char *)queue + 8);
      do
        int v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      if (v14 <= 0) {
        dispatch_set_target_queue_cold_2();
      }
    }
  }

  else
  {
    queue = (dispatch_queue_t)&off_653C0;
  }

  *(void *)(v8 + 24) = queue;
  if ((*(_BYTE *)(v7 + 29) & 2) != 0 && (*(_BYTE *)(v7 + 30) & 0x10) != 0) {
    dispatch_source_set_timer((dispatch_source_t)v8, 0LL, handle, 0xFFFFFFFFFFFFFFFFLL);
  }
  return v9;
}

void dispatch_source_set_timer( dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  BOOL v9 = (unsigned __int8 *)*((void *)source + 11);
  if ((v9[29] & 2) == 0)
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Attempt to set timer on a non-timer source";
    qword_61258 = (uint64_t)source;
    __break(1u);
    goto LABEL_50;
  }

  uint64_t v5 = leeway;
  int64_t v6 = start;
  unsigned __int8 v11 = v9[30];
  if ((v11 & 0x10) == 0)
  {
    uint64_t v4 = _dispatch_calloc(1uLL, 0x20uLL);
    if (interval)
    {
      if (v5 >= 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
      }
      if (v6 != -1)
      {
LABEL_9:
        switch(v6)
        {
          case -9223372036854775808LL:
            int v13 = 1;
            uint64_t v12 = mach_continuous_time();
            goto LABEL_56;
          case -2LL:
            uint64_t v12 = clock_gettime_nsec_np(_CLOCK_REALTIME);
            int v13 = 2;
            goto LABEL_67;
          case 0LL:
            uint64_t v12 = mach_absolute_time();
            int v13 = 0;
LABEL_56:
            if (!_dispatch_host_time_nano2mach)
            {
              if (interval > 0x7FFFFFFFFFFFFFFELL)
              {
                interval = 0x7FFFFFFFFFFFFFFFLL;
              }

              else
              {
                uint64_t v26 = (3 * interval * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
                uint64_t v27 = (v26 + ((3 * interval - v26) >> 1)) >> 6;
                if (v27 <= 1) {

                }
                  interval = 1LL;
                else {
                  interval = v27;
                }
              }

              goto LABEL_63;
            }

            uint64_t v33 = v12;
            uint64_t v34 = _dispatch_host_time_nano2mach(interval);
            if (v34 <= 1) {

            }
              interval = 1LL;
            else {
              interval = v34;
            }
            if (!_dispatch_host_time_nano2mach)
            {
              uint64_t v12 = v33;
LABEL_63:
              if (v5)
              {
                if (v5 > 0x7FFFFFFFFFFFFFFELL)
                {
                  uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
                }

                else if (v5 > 0x5555555555555554LL)
                {
                  uint64_t v5 = 3 * (v5 / 0x7D);
                }

                else
                {
                  uint64_t v28 = (3 * v5 * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
                  uint64_t v5 = (v28 + ((3 * v5 - v28) >> 1)) >> 6;
                }
              }

              goto LABEL_67;
            }

            uint64_t v5 = _dispatch_host_time_nano2mach(v5);
            uint64_t v12 = v33;
LABEL_67:
            uint64_t v29 = interval >> 1;
            v4[6] = v13;
            unint64_t v30 = v29 + v12;
            if (v30 >= 0x7FFFFFFFFFFFFFFFLL) {
              unint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
            }
            *(void *)uint64_t v4 = v12;
            *((void *)v4 + 1) = v30;
            *((void *)v4 + 2) = interval;
            goto LABEL_74;
        }

        unint64_t v23 = v6 & 0x7FFFFFFFFFFFFFFFLL;
        if ((v6 & 0x4000000000000000LL) != 0) {
          int v24 = 2;
        }
        else {
          int v24 = 1;
        }
        if ((v6 & 0x4000000000000000LL) != 0) {
          unint64_t v23 = -v6;
        }
        if (v6 < 0) {
          int v13 = v24;
        }
        else {
          int v13 = 0;
        }
        if (v6 >= 0) {
          unint64_t v23 = v6;
        }
        if (v23 >> 62) {
          uint64_t v12 = -1LL;
        }
        else {
          uint64_t v12 = v23;
        }
LABEL_55:
        if (v13 == 2) {
          goto LABEL_67;
        }
        goto LABEL_56;
      }

      goto LABEL_54;
    }

LABEL_50:
    if (v6 != -1)
    {
      _dispatch_bug_deprecated("Setting timer interval to 0 requests a 1ns timer, did you mean FOREVER (a one-shot timer)?");
      if (v5 >= 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
      }
      interval = 1LL;
      goto LABEL_9;
    }

    if (v5 >= 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
    }
    interval = 1LL;
LABEL_54:
    int v13 = (v9[30] >> 2) & 3;
    uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_55;
  }

  unint64_t v14 = (unint64_t)_dispatch_calloc(1uLL, 0x20uLL);
  uint64_t v4 = (_DWORD *)v14;
  *(_DWORD *)(v14 + 24) = 0;
  if (!v6)
  {
    if (interval)
    {
      uint64_t v16 = 16666666LL;
      uint64_t v17 = 1892160075LL;
      if ((v11 & 0x20) == 0)
      {
        uint64_t v17 = 31536000000LL;
        uint64_t v16 = 1000000LL;
      }

      uint64_t v18 = v16 * interval;
      else {
        unint64_t v14 = 31536000000000000LL;
      }
      uint64_t v7 = &_dispatch_host_time_nano2mach;
      uint64_t v15 = _dispatch_host_time_nano2mach;
      if (!_dispatch_host_time_nano2mach)
      {
        if (v14 > 0x7FFFFFFFFFFFFFFELL)
        {
          unint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
        }

        else if (v14 > 0x5555555555555554LL)
        {
          unint64_t v20 = 3 * (v14 / 0x7D);
        }

        else
        {
          uint64_t v19 = (3 * v14 * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
          unint64_t v20 = (v19 + ((3 * v14 - v19) >> 1)) >> 6;
        }

        goto LABEL_26;
      }
    }

    else
    {
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Setting interval to 0";
      __break(1u);
    }

    unint64_t v20 = v15(v14);
LABEL_26:
    uint64_t v21 = mach_absolute_time();
    if (v5 > 0x3E8)
    {
      if (v5 != -1LL)
      {
LABEL_100:
        qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Passing an invalid leeway";
        __break(1u);
        return;
      }

      if ((v11 & 0x20) != 0)
      {
        if (*v7) {
          uint64_t v22 = (*v7)(16666666LL);
        }
        else {
          uint64_t v22 = 399999LL;
        }
      }

      else
      {
        uint64_t v22 = v20 >> 1;
      }
    }

    else
    {
      uint64_t v22 = v20 * v5 / 0x3E8;
    }

    int v13 = 0;
    uint64_t v25 = (v21 + v20) / v20 * v20;
    v4[6] = 0;
    *(void *)uint64_t v4 = v25;
    *((void *)v4 + 1) = v22 + v25;
    *((void *)v4 + 2) = v20;
    goto LABEL_74;
  }

  if (v6 != -1)
  {
LABEL_99:
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Start value is not DISPATCH_TIME_NOW or DISPATCH_TIME_FOREVER";
    __break(1u);
    goto LABEL_100;
  }

  int v13 = 0;
  *(void *)(v14 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  *(int64x2_t *)unint64_t v14 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
LABEL_74:
  if (v13 != ((v9[30] >> 2) & 3) && v9[28] == 236)
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Attempting to modify timer clock";
    __break(1u);
    goto LABEL_99;
  }

  unint64_t v31 = (unint64_t *)(v9 + 104);
  do
    int v32 = (void *)__ldxr(v31);
  while (__stlxr((unint64_t)v4, v31));
  if (v32) {
    free(v32);
  }
  (*(void (**)(dispatch_source_t, void, uint64_t))(*(void *)source + 80LL))(source, 0LL, 2LL);
}

uint64_t _dispatch_source_is_timer(uint64_t a1)
{
  return (*(unsigned __int8 *)(*(void *)(a1 + 88) + 29LL) >> 1) & 1;
}

void _dispatch_source_dispose(uint64_t *a1, _BYTE *a2)
{
  if (MEMORY[0xFFFFFC100]) {
    kdebug_trace(772079668LL, a1, 0LL, 0LL, 0LL);
  }
  uint64_t v4 = (unint64_t *)(a1[11] + 56);
  do
    uint64_t v5 = __ldxr(v4);
  while (__stxr(0LL, v4));
  if (v5) {
    _dispatch_source_handler_dispose(v5);
  }
  int64_t v6 = (unint64_t *)(a1[11] + 40);
  do
    uint64_t v7 = __ldxr(v6);
  while (__stxr(0LL, v6));
  if (v7) {
    _dispatch_source_handler_dispose(v7);
  }
  uint64_t v8 = (unint64_t *)(a1[11] + 48);
  do
    uint64_t v9 = __ldxr(v8);
  while (__stxr(0LL, v8));
  if (v9) {
    _dispatch_source_handler_dispose(v9);
  }
  _dispatch_unote_dispose(a1[11]);
  a1[11] = 0LL;
  _dispatch_lane_class_dispose(a1, a2);
}

uint64_t _dispatch_source_xref_dispose(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 80) & 0x14000000) == 0x4000000 && *(void *)(*(void *)(a1 + 88) + 48LL)) {
    _dispatch_source_xref_dispose_cold_1(*(_DWORD *)(a1 + 80));
  }
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 80LL))(a1, 0LL, 2LL);
}

uint64_t dispatch_source_testcancel(dispatch_source_t source)
{
  return ((unint64_t)*((unsigned int *)source + 20) >> 28) & 1;
}

unint64_t dispatch_source_get_mask(dispatch_source_t source)
{
  uint64_t v1 = *((void *)source + 11);
  if ((*((_DWORD *)source + 20) & 0x10000000) != 0) {
    return 0LL;
  }
  if ((*(_BYTE *)(v1 + 29) & 0x10) != 0) {
    return 0x80000000LL;
  }
  if ((*(_BYTE *)(v1 + 29) & 2) != 0) {
    return *(unsigned __int8 *)(v1 + 30);
  }
  return *(unsigned int *)(v1 + 32);
}

uintptr_t dispatch_source_get_handle(dispatch_source_t source)
{
  uint64_t v1 = *((void *)source + 11);
  if (*(unsigned __int8 *)(v1 + 28) == 236
    && (unint64_t v2 = ((unint64_t)*(unsigned __int8 *)(v1 + 30) >> 2) & 3, (_DWORD)v2 != 3))
  {
    return v2 + 1;
  }

  else
  {
    return *(unsigned int *)(v1 + 24);
  }

unint64_t dispatch_source_get_data(dispatch_source_t source)
{
  uint64_t v1 = *((void *)source + 11);
  char v2 = *(_BYTE *)(v1 + 29);
  if ((v2 & 0x10) != 0) {
    return 0x80000000LL;
  }
  unint64_t v3 = *(void *)(v1 + 64);
  if ((v2 & 4) != 0) {
    return v3;
  }
  else {
    return v3;
  }
}

uint64_t dispatch_source_get_extended_data(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if ((*(_BYTE *)(v4 + 29) & 4) != 0)
    {
      unint64_t v7 = *(void *)(v4 + 64);
      uint64_t v6 = v7;
      uint64_t v5 = HIDWORD(v7);
    }

    else
    {
      uint64_t v5 = 0LL;
      uint64_t v6 = (*(_BYTE *)(v4 + 29) & 0x10) != 0 ? 0x80000000LL : *(void *)(v4 + 64);
    }

    if (a3 >= 8)
    {
      *a2 = v6;
      if (a3 >= 0x10)
      {
        a2[1] = v5;
        if (a3 != 16) {
          bzero(a2 + 2, a3 - 16);
        }
      }
    }
  }

  if (a3 >= 0x10) {
    return 16LL;
  }
  else {
    return a3;
  }
}

void dispatch_source_merge_data(dispatch_source_t source, unint64_t value)
{
  if ((*((_DWORD *)source + 20) & 0x10800000) == 0)
  {
    uint64_t v2 = *((void *)source + 11);
    int v3 = *(char *)(v2 + 28);
    switch(v3)
    {
      case -23:
        *(void *)(v2 + 72) = value;
        break;
      case -22:
        uint64_t v6 = (unint64_t *)(v2 + 72);
        do
          unint64_t v7 = __ldxr(v6);
        while (__stxr(v7 | value, v6));
        break;
      case -21:
        uint64_t v4 = (unint64_t *)(v2 + 72);
        do
          unint64_t v5 = __ldxr(v4);
        while (__stxr(v5 + value, v4));
        break;
      default:
        dispatch_source_merge_data_cold_1(v3);
    }

    (*(void (**)(dispatch_source_t, void, uint64_t))(*(void *)source + 80LL))(source, 0LL, 2LL);
  }

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

unint64_t *_dispatch_source_set_handler( uint64_t a1, void (**aBlock)(uint64_t a1), uint64_t a3, int a4)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v9 = *(uint64_t **)(StatusReg + 176);
  if (!v9)
  {
    uint64_t v9 = (uint64_t *)_dispatch_continuation_alloc_from_heap();
    if (aBlock) {
      goto LABEL_3;
    }
LABEL_12:
    *uint64_t v9 = 256LL;
    v9[4] = 0LL;
    goto LABEL_13;
  }

  *(void *)(StatusReg + 176) = v9[2];
  if (!aBlock) {
    goto LABEL_12;
  }
LABEL_3:
  uint64_t v10 = 4LL * (a3 != 0);
  if (a4)
  {
    unsigned __int8 v11 = _dispatch_Block_copy(aBlock);
    uint64_t v12 = v10 | 0x110;
    int v13 = aBlock[2];
    if (v13 == ___dispatch_block_create_block_invoke)
    {
      *uint64_t v9 = v12;
      v9[5] = (uint64_t)v11;
      _dispatch_continuation_init_slow(v9, (unsigned int *)a1, 1073741888);
      goto LABEL_13;
    }

    if (a3) {
      int v13 = (void (*)(uint64_t))_dispatch_call_block_and_release;
    }
    *uint64_t v9 = v12;
    v9[4] = (uint64_t)v13;
    v9[5] = (uint64_t)v11;
  }

  else
  {
    uint64_t v14 = *(void *)(a1 + 32);
    *uint64_t v9 = v10 | 0x140;
    v9[4] = (uint64_t)aBlock;
    v9[5] = v14;
  }

  v9[3] = 0LL;
  if (MEMORY[0xFFFFFC100]) {
    goto LABEL_38;
  }
  while (1)
  {
    v9[1] = 0LL;
LABEL_13:
    uint64_t v15 = (unint64_t *)(a1 + 56);
    do
    {
      unint64_t v16 = __ldxr(v15);
      if ((~v16 & 0x180000000000000LL) != 0)
      {
        __clrex();
        int v22 = *(_DWORD *)(a1 + 80);
        if ((v22 & 0x4000000) != 0)
        {
          qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot change a handler of this source after it has been activated";
          qword_61258 = a3;
          __break(1u);
        }

        else
        {
          if ((v22 & 0x10000000) != 0)
          {
LABEL_36:
            v9[6] = a3;
            return _dispatch_barrier_trysync_or_async_f( (unint64_t *)a1,  v9,  (uint64_t (*)(void))_dispatch_source_set_handler_slow,  0);
          }

          if (!MEMORY[0xFFFFFC100])
          {
LABEL_34:
            if (a3 == 2 || !aBlock)
            {
              if (a3 == 2) {
                unint64_t v23 = "Setting registration handler after the source has been activated";
              }
              else {
                unint64_t v23 = "Clearing handler after the source has been activated";
              }
              _dispatch_bug_deprecated(v23);
            }

            goto LABEL_36;
          }
        }

        kdebug_trace(771883020LL, a1, 0LL, 0LL, 0LL);
        goto LABEL_34;
      }
    }

    while (__stxr(v16 + 0x400000000000000LL, v15));
    if ((v16 & 0x200000000000000LL) == 0) {
      break;
    }
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Too many calls to dispatch_suspend() prior to calling dispatch_"
                           "set_target_queue() or dispatch_set_*_handler()";
    __break(1u);
LABEL_38:
    kdebug_trace(771817476LL, 0LL, v9, 0LL, 0LL);
  }

  if (v9[4])
  {
    if ((*(_BYTE *)v9 & 0x40) != 0) {
      v9[5] = *(void *)(a1 + 32);
    }
  }

  else
  {
    uint64_t v17 = *(void *)(StatusReg + 176);
    if (v17) {
      int v18 = *(_DWORD *)(v17 + 8) + 1;
    }
    else {
      int v18 = 1;
    }
    if (v18 > _dispatch_continuation_cache_limit)
    {
      _dispatch_continuation_free_to_cache_limit((uint64_t)v9);
    }

    else
    {
      v9[2] = v17;
      *((_DWORD *)v9 + 2) = v18;
      *(void *)(StatusReg + 176) = v9;
    }

    uint64_t v9 = 0LL;
  }

  uint64_t v19 = (unint64_t *)(*(void *)(a1 + 88) + 8 * a3 + 40);
  do
    uint64_t v20 = __ldxr(v19);
  while (__stlxr((unint64_t)v9, v19));
  if (v20) {
    _dispatch_source_handler_dispose(v20);
  }
  return (unint64_t *)_dispatch_lane_resume(a1, 0LL);
}

void dispatch_source_set_event_handler_f(dispatch_source_t source, dispatch_function_t handler)
{
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

unint64_t *dispatch_source_set_mandatory_cancel_handler( uint64_t a1, void (**a2)(uint64_t a1))
{
  uint64_t v2 = (unsigned int *)(a1 + 80);
  while (1)
  {
    unsigned int v3 = __ldxr(v2);
    unsigned int v4 = v3 & 0xFBBFFFFF | 0x4000000;
    if (v4 == v3) {
      break;
    }
    if (!__stxr(v4, v2)) {
      return _dispatch_source_set_handler(a1, a2, 1LL, 1);
    }
  }

  __clrex();
  return _dispatch_source_set_handler(a1, a2, 1LL, 1);
}

void dispatch_source_set_cancel_handler_f(dispatch_source_t source, dispatch_function_t handler)
{
}

unint64_t *dispatch_source_set_mandatory_cancel_handler_f( uint64_t a1, void (**a2)(uint64_t a1))
{
  uint64_t v2 = (unsigned int *)(a1 + 80);
  while (1)
  {
    unsigned int v3 = __ldxr(v2);
    unsigned int v4 = v3 & 0xFBBFFFFF | 0x4000000;
    if (v4 == v3) {
      break;
    }
    if (!__stxr(v4, v2)) {
      return _dispatch_source_set_handler(a1, a2, 1LL, 0);
    }
  }

  __clrex();
  return _dispatch_source_set_handler(a1, a2, 1LL, 0);
}

void dispatch_source_set_registration_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_registration_handler_f(dispatch_source_t source, dispatch_function_t handler)
{
}

BOOL _dispatch_source_will_reenable_kevent_4NW(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  uint64_t v2 = *(void *)(*(void *)(a1 + 88) + 16LL);
  return (v2 & 3) == 0 && v2 != 0;
}

unsigned int *_dispatch_source_activate(uint64_t a1, const char *a2)
{
  uint64_t v3 = *(void *)(a1 + 88);
  if ((*(_DWORD *)(a1 + 80) & 0x10000000) != 0)
  {
    *(_WORD *)(a1 + 116) |= 1u;
    return _dispatch_source_refs_finalize_unregistration((unsigned int *)a1, a2);
  }

  unsigned int v4 = *(uint64_t **)(v3 + 40);
  if (v4)
  {
    unint64_t v5 = *v4;
    if ((unint64_t)*v4 < 0x1000)
    {
      if ((v5 & 2) == 0)
      {
LABEL_10:
        uint64_t v8 = v4[1];
        if ((v8 & 0x10000000) != 0 || (int v9 = *(_DWORD *)(a1 + 84), (v9 & 0x20000000) != 0) || (v9 & 0x44000FFF) == 0)
        {
          unsigned int v10 = (__clz(__rbit32((v8 >> 8) & 0x3FFF)) << 8) + 256;
          *(_DWORD *)(a1 + 84) = v10 & 0xFFFFFF00 | v4[1];
        }

        if ((*(_BYTE *)v4 & 0x40) != 0) {
          v4[5] = *(void *)(a1 + 32);
        }
        goto LABEL_18;
      }
    }

    else if ((*(void *)(v5 + 40) & 0xF0LL) != 0x10 || (v4[10] & 0x80000) == 0)
    {
      goto LABEL_10;
    }

    uint64_t v6 = (unsigned int *)(a1 + 80);
    do
      unsigned int v7 = __ldxr(v6);
    while (__stxr(v7 | 0x80000, v6));
    goto LABEL_10;
  }

  _dispatch_bug_deprecated("dispatch source activated with no event handler set");
LABEL_18:
  double result = (unsigned int *)_dispatch_lane_activate(a1);
  if ((*(_BYTE *)(v3 + 29) & 3) != 0 && (*(_WORD *)(a1 + 116) & 1) == 0)
  {
    double result = (unsigned int *)_dispatch_queue_compute_priority_and_wlh(a1, (uint64_t *)&v16);
    if ((_DWORD)result)
    {
      unsigned int v12 = result;
      uint64_t v13 = (uint64_t)v16;
      if (v16 != (void *)-4LL
        && v16
        && *(_BYTE *)(*v16 + 40LL) == 18LL
        && *(unsigned __int8 *)(v3 + 28) == 236
        && *(_DWORD *)(v3 + 24) <= 5u)
      {
        if (!v16[6])
        {
          *(void *)(v13 + 48) = _dispatch_calloc(6uLL, 0x20uLL);
          uint64_t v13 = (uint64_t)v16;
        }

        *(_BYTE *)(v3 + 29) |= 1u;
        if (v13 != -4 && v13)
        {
          uint64_t v14 = (unsigned int *)(v13 + 96);
          do
            unsigned int v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
          if ((v15 & 0x80000000) != 0) {
            dispatch_set_target_queue_cold_2();
          }
        }

        *(void *)(v3 + 16) = v13;
      }

      return (unsigned int *)_dispatch_source_install(a1, v13, v12);
    }
  }

  return result;
}

unsigned int *_dispatch_source_refs_finalize_unregistration(unsigned int *a1, const char *a2)
{
  double result = a1 + 20;
  do
  {
    uint64_t v4 = __ldxr(result);
    unsigned int v5 = v4 & 0x1FFFFFFF | 0x80000000;
    if (v5 == (_DWORD)v4)
    {
      __clrex();
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Source finalized twice";
      qword_61258 = v4;
      __break(1u);
      return result;
    }
  }

  while (__stxr(v5, result));
  if ((v4 & 0x80000000) != 0) {
    goto LABEL_9;
  }
LABEL_5:
  if ((v4 & 0x20000000) != 0) {
    _dispatch_wake_by_address((uint64_t)result);
  }
  return (unsigned int *)_os_object_release_internal(a1, a2);
}

uint64_t _dispatch_source_install(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = *(void *)(a1 + 88);
  *(_WORD *)(a1 + 116) |= 1u;
  uint64_t result = _dispatch_unote_register(v4, a2, a3);
  if ((result & 1) == 0) {
    return (uint64_t)_dispatch_source_refs_finalize_unregistration((unsigned int *)a1, v6);
  }
  return result;
}

void _dispatch_source_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v167 = 0LL;
  if ((a3 & 3) == 0)
  {
    *(void *)(a1 + 16) = -1985229329LL;
    uint64_t v6 = *(_opaque_pthread_t **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160);
    if (MEMORY[0xFFFFFC100]) {
      _dispatch_trace_item_pop_internal(v6, (uint64_t *)a1);
    }
    _dispatch_introspection_queue_item_dequeue((dispatch_queue_s *)v6, (dispatch_object_s *)a1);
  }

  uint64_t v165 = (uint64_t)a2;
  if ((v3 & 2) != 0)
  {
    uint64_t v167 = 0x40020000000001LL;
    int v7 = v3 & 0x40000;
    goto LABEL_7;
  }

  unint64_t v127 = ((unint64_t)*(unsigned __int16 *)(a1 + 80) << 41) - 0x20000000000LL;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v129 = *(void *)(StatusReg + 24) & 0xFFFFFFFCLL;
  int v7 = v3 & 0x40000;
  unint64_t v130 = 0xFFE00000FFFFFFFCLL;
  if ((v3 & 0x40000) != 0)
  {
    uint64_t v131 = 0x4000000000LL;
  }

  else
  {
    unint64_t v130 = 0xFFE00040FFFFFFFCLL;
    uint64_t v131 = 1LL;
  }

  if ((v3 & 1) != 0) {
    unint64_t v132 = 0xFFE00040FFFFFFFCLL;
  }
  else {
    unint64_t v132 = v130;
  }
  unsigned int v133 = *(_DWORD *)(StatusReg + 200);
  unsigned int v134 = (v133 >> 8) & 0xF;
  unsigned int v135 = (unsigned __int16)v133 >> 12;
  unsigned int v136 = HIWORD(v133) & 0xF;
  if (v134 <= v135) {
    unsigned int v134 = v135;
  }
  if (v134 > v136) {
    unsigned int v136 = v134;
  }
  v137 = (unint64_t *)(a1 + 56);
  do
  {
    while (1)
    {
      unint64_t v138 = __ldaxr(v137);
      if ((v138 & v132) != 0) {
        break;
      }
      if ((v138 & 0x1000000000LL) == 0 || (uint64_t v139 = HIDWORD(v138) & 7, v139 <= v136))
      {
        uint64_t v140 = (v138 >> 40) & 1;
        if (!((v127 + v138) >> 53)) {
          LODWORD(v14_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = 1;
        }
        if ((_DWORD)v140) {
          uint64_t v141 = 0x60000000000000LL;
        }
        else {
          uint64_t v141 = 0x20000000000000LL;
        }
        unint64_t v142 = v129 | v138 & 0x7700000001LL | v141;
        goto LABEL_251;
      }

      __clrex();
      unint64_t v164 = v127;
      _pthread_workqueue_override_start_direct( *(unsigned int *)(StatusReg + 24),  (256LL << ((BYTE4(v138) & 7u) - 1)) | 0xFF);
      unint64_t v127 = v164;
      unsigned int v143 = *(_DWORD *)(StatusReg + 200);
      unsigned int v136 = v139;
      if ((HIWORD(v143) & 0xF) < v139)
      {
        *(void *)(StatusReg + 20_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v143 & 0xFFF0FFFF | ((_DWORD)v139 << 16);
        unsigned int v136 = v139;
      }
    }

    if ((v3 & 1) != 0)
    {
      __clrex();
      goto LABEL_267;
    }

    unint64_t v142 = v138 ^ v131;
LABEL_251:
    ;
  }

  while (__stxr(v142, v137));
  if ((v138 & v132) != 0)
  {
LABEL_267:
    uint64_t v29 = 0LL;
    uint64_t v167 = 0LL;
    goto LABEL_217;
  }

  uint64_t v144 = 0x60000000000000LL;
  if ((v3 & 1) == 0) {
    uint64_t v144 = v131 | 0x60000000000000LL;
  }
  uint64_t v167 = (v142 & v144) - (v138 & 0x3FFE0000000000LL);
  if (!v167)
  {
    uint64_t v29 = 0LL;
    goto LABEL_217;
  }

LABEL_60:
  *(void *)v159 = v21;
  if (!*(void *)(v22 + 56)) {
    goto LABEL_77;
  }
  int v39 = v21;
  uint64_t v40 = v29;
  uint64_t v29 = *(void *)(a1 + 24);
  if (v39 != (__objc2_class **)v29) {
    goto LABEL_113;
  }
  unint64_t v41 = (unint64_t *)(*(void *)(a1 + 88) + 56LL);
  do
    unint64_t v42 = (uint64_t *)__ldxr(v41);
  while (__stxr(0LL, v41));
  v155 = v20;
  uint64_t v43 = v31;
  if ((*(_DWORD *)(a1 + 80) & 0x10800000) != 0)
  {
    int v44 = v18;
    unsigned int v45 = v30;
    if ((v30 & 0x1000000) != 0)
    {
      contexta = objc_autoreleasePoolPush();
      _dispatch_source_handler_dispose((uint64_t)v42);
      objc_autoreleasePoolPop(contexta);
    }

    else
    {
      _dispatch_source_handler_dispose((uint64_t)v42);
    }

    uint64_t v29 = v40;
    unsigned int v30 = v45;
  }

  else
  {
    if ((*(_BYTE *)v42 & 0x40) != 0) {
      v42[5] = *(void *)(a1 + 32);
    }
    int v44 = v18;
    if (MEMORY[0xFFFFFC100])
    {
      unsigned int v121 = v30;
      _dispatch_trace_source_callout_entry_internal((_opaque_pthread_t *)a1, 2LL, *(_opaque_pthread_t **)v159, v42);
      unsigned int v30 = v121;
    }

    unsigned int v54 = v30;
    _dispatch_continuation_pop(v42, 0LL, v30, *(_opaque_pthread_t **)v159);
    unsigned int v30 = v54;
    uint64_t v29 = v40;
  }

  int v18 = v44;
  unint64_t v31 = v43;
  uint64_t v20 = v155;
LABEL_77:
  if ((*(void *)(v22 + 16) & 2) != 0)
  {
    uint64_t v55 = v29;
    uint64_t v56 = v22;
    uint64_t v57 = v16;
    uint64_t v58 = v3;
    unint64_t v59 = v19;
    uint64_t v60 = v20;
    uint64_t v61 = v31;
    int v62 = v18;
    unsigned int v63 = v30;
    _dispatch_source_refs_unregister(a1, 5);
    unsigned int v30 = v63;
    int v18 = v62;
    unint64_t v31 = v61;
    uint64_t v20 = v60;
    unint64_t v19 = v59;
    uint64_t v3 = v58;
    uint64_t v16 = v57;
    uint64_t v22 = v56;
    uint64_t v29 = v55;
  }

  int v64 = *(_DWORD *)(a1 + 80);
  int v65 = v64 & 0x10800000;
  if ((v64 & 0x10800000) != 0)
  {
    BOOL v66 = 0;
    if ((v64 & 0x80000000) == 0) {
      goto LABEL_81;
    }
    goto LABEL_90;
  }

  if (*(void *)(v22 + 72))
  {
    uint64_t v158 = v29;
    uint64_t v29 = *(void *)(a1 + 24);
    if (*(void *)v159 != v29) {
      goto LABEL_113;
    }
    uint64_t v76 = *(void *)(a1 + 88);
    v151 = (unint64_t *)(v76 + 40);
    uint64_t v77 = *(uint64_t **)(v76 + 40);
    unsigned int v78 = (unint64_t *)(v76 + 72);
    do
      unint64_t v79 = __ldxr(v78);
    while (__stxr(0LL, v78));
    context = v77;
    if ((*(_BYTE *)(v76 + 29) & 2) != 0 && (*(_BYTE *)(v76 + 30) & 0x40) != 0)
    {
      uint64_t v80 = v76;
      uint64_t v149 = v22;
      uint64_t v81 = v16;
      uint64_t v82 = v3;
      unint64_t v83 = v19;
      char v84 = v20;
      uint64_t v85 = v31;
      unsigned int v86 = v18;
      unsigned int v87 = v30;
      if (MEMORY[0xFFFFFC100])
      {
        _dispatch_trace_item_pop_internal(*(_opaque_pthread_t **)v159, v77);
        uint64_t v77 = context;
      }

      _dispatch_introspection_queue_item_dequeue(*(dispatch_queue_s **)v159, (dispatch_object_s *)v77);
      uint64_t v77 = context;
      unsigned int v30 = v87;
      int v18 = v86;
      unint64_t v31 = v85;
      uint64_t v20 = v84;
      unint64_t v19 = v83;
      uint64_t v3 = v82;
      uint64_t v16 = v81;
      uint64_t v22 = v149;
      uint64_t v76 = v80;
    }

    int v88 = *(unsigned __int8 *)(*(void *)v76 + 9LL);
    unsigned int v152 = v30;
    if (v88 == 3)
    {
      unint64_t v89 = ~v79;
      goto LABEL_167;
    }

    if (v88 == 5)
    {
      if ((v79 & 1) != 0)
      {
        unint64_t v89 = v79 >> 1;
        uint64_t v106 = *(void *)(a1 + 88);
        unint64_t v108 = *(void *)(v106 + 80);
        v107 = (void *)(v106 + 80);
        if (v108 <= 0x7FFFFFFFFFFFFFFELL)
        {
          unsigned int v109 = *(_DWORD *)(*(void *)(a1 + 88) + 24LL) / 3u;
          uint64_t v148 = v76;
          unint64_t v150 = v79 >> 1;
          uint64_t v147 = *(void *)(a1 + 88);
          if (v109 == 2) {
            __uint64_t v110 = clock_gettime_nsec_np(_CLOCK_REALTIME);
          }
          else {
            __uint64_t v110 = v109 == 1 ? mach_continuous_time() : mach_absolute_time();
          }
          unsigned int v30 = v152;
          uint64_t v77 = context;
          uint64_t v76 = v148;
          unint64_t v89 = v79 >> 1;
          if (v110 >= *v107)
          {
            unint64_t v112 = *(void *)(v147 + 96);
            __uint64_t v113 = (v110 - *v107) / v112;
            else {
              uint64_t v114 = v150 ^ 0x7FFFFFFFFFFFFFFFLL;
            }
            if (v112 > 0x7FFFFFFFFFFFFFFELL)
            {
              void *v107 = -1LL;
              v107[1] = -1LL;
            }

            else
            {
              unint64_t v115 = v114 * v112;
              *v107 += v115;
              *(void *)(v147 + 88) += v115;
            }

            unint64_t v89 = v114 + v150;
          }
        }
      }

      else
      {
        unint64_t v89 = v79 >> 1;
      }

LABEL_167:
      *(void *)(v76 + 64) = v89;
      if (v77)
      {
        if (v79)
        {
          if (MEMORY[0xFFFFFC100])
          {
            uint64_t v122 = v76;
            _dispatch_trace_source_callout_entry_internal( (_opaque_pthread_t *)a1,  0LL,  *(_opaque_pthread_t **)v159,  context);
            uint64_t v76 = v122;
            uint64_t v77 = context;
            unsigned int v30 = v152;
          }

          uint64_t v116 = v76;
          if (*(unsigned __int8 *)(v76 + 28) == 242)
          {
            uint64_t function_symbol = _dispatch_continuation_get_function_symbol(v77);
            uint64_t v77 = context;
            unsigned int v30 = v152;
            if (MEMORY[0xFFFFFC100])
            {
              kdebug_trace(67240961LL, v79, function_symbol, 0LL, 0LL);
              uint64_t v77 = context;
              unsigned int v30 = v152;
            }
          }

          _dispatch_continuation_pop(v77, 0LL, v30, *(_opaque_pthread_t **)v159);
          unsigned int v30 = v152;
          v117 = (dispatch_object_s *)context;
          if ((*(_BYTE *)(v116 + 29) & 2) != 0)
          {
            if ((v79 & 1) != 0 && *(void *)(v116 + 104))
            {
              _dispatch_timer_unote_configure(*(void *)(a1 + 88));
              v117 = (dispatch_object_s *)context;
              unsigned int v30 = v152;
            }

            if ((*(_BYTE *)(v116 + 30) & 0x40) != 0)
            {
              if (MEMORY[0xFFFFFC100])
              {
                kdebug_trace(772079660LL, v117, 0LL, 0LL, 0LL);
                v117 = (dispatch_object_s *)context;
              }

              _dispatch_introspection_queue_item_complete(v117);
              if ((v152 & 0x1000000) != 0) {
                v118 = objc_autoreleasePoolPush();
              }
              else {
                v118 = 0LL;
              }
              do
                uint64_t v119 = __ldxr(v151);
              while (__stxr(0LL, v151));
              if (v119) {
                _dispatch_source_handler_dispose(v119);
              }
              if (v118) {
                objc_autoreleasePoolPop(v118);
              }
              dispatch_release((dispatch_object_t)a1);
              unsigned int v30 = v152;
            }
          }

          goto LABEL_189;
        }

LABEL_206:
      if (!MEMORY[0xFFFFFC100]) {
        goto LABEL_189;
      }
      uint64_t v98 = v22;
      uint64_t v99 = v16;
      uint64_t v100 = v3;
      unint64_t v101 = v19;
      v102 = v20;
      unsigned int v103 = v31;
      unint64_t v104 = v18;
      unsigned int v105 = v30;
      kdebug_trace(771883040LL, a1, 0LL, 0LL, 0LL);
      goto LABEL_148;
    }

    unint64_t v89 = v79;
    if (v79) {
      goto LABEL_167;
    }
    if (*(unsigned __int8 *)(v76 + 28) != 233)
    {
      *(void *)(v76 + 64) = 0LL;
      if (v77) {
        goto LABEL_147;
      }
      goto LABEL_206;
    }

LABEL_189:
    int v64 = *(_DWORD *)(a1 + 80);
    if ((v64 & 0x90000000) != 0)
    {
      BOOL v66 = 0;
      uint64_t v29 = v158;
    }

    else
    {
      uint64_t v29 = v158;
      if (*(void *)(*(void *)v159 + 24LL)) {
        BOOL v66 = 1;
      }
      else {
        BOOL v66 = *(_DWORD *)(*(void *)v159 + 84LL) >= 0;
      }
    }

    *(_WORD *)(a1 + 116) |= 2u;
    int v65 = v64 & 0x10800000;
    if (v64 < 0) {
      goto LABEL_90;
    }
LABEL_81:
    if (v65)
    {
      if ((*(_BYTE *)(v22 + 29) & 2) != 0 && (*(void *)(v22 + 16) & 1) == 0 || *(__objc2_class ***)v159 == v31)
      {
        uint64_t v157 = v29;
        uint64_t v67 = v22;
        uint64_t v68 = v16;
        uint64_t v69 = v3;
        unint64_t v70 = v19;
        v71 = v20;
        uint64_t v72 = v31;
        uint64_t v73 = v18;
        unsigned int v74 = v30;
        if ((v64 & 0x40000000) != 0) {
          char v75 = 1;
        }
        else {
          char v75 = 3;
        }
        _dispatch_source_refs_unregister(a1, v75);
        int v64 = *(_DWORD *)(a1 + 80);
        if (v64 < 0)
        {
          int v65 = v64 & 0x10800000;
          unsigned int v30 = v74;
          int v18 = v73;
          unint64_t v31 = v72;
          uint64_t v20 = v71;
          unint64_t v19 = v70;
          uint64_t v3 = v69;
          uint64_t v16 = v68;
          uint64_t v22 = v67;
          uint64_t v29 = v157;
          goto LABEL_90;
        }

        if (v157) {
          uint64_t v29 = v157;
        }
        else {
          uint64_t v29 = -1LL;
        }
        int v18 = v73;
        uint64_t v20 = v71;
        unint64_t v19 = v70;
        uint64_t v3 = v69;
        uint64_t v16 = v68;
        goto LABEL_113;
      }

LABEL_49:
      uint64_t v29 = (uint64_t)v31;
      goto LABEL_113;
    }

              *uint64_t v10 = (unint64_t)v14;
              if ((unint64_t)*v14 >= 0x1000 && *(void *)(*v14 + 40) == 768LL)
              {
                unint64_t v25 = v6 + 8;
                do
                {
                  BOOL v26 = __ldxr(v25);
                  uint64_t v27 = v26 & 0xFFFFFFC700000000LL | 0x3000000000LL;
                }

                while (__stlxr(v27, v25));
              }

              else
              {
                uint64_t v28 = v6 + 8;
                do
                {
                  BOOL v26 = __ldxr(v28);
                  uint64_t v27 = v26 & 0xFFFFFFC7FFFFFFFFLL;
                  if ((v26 & 0x2800000000LL) == 0) {
                    uint64_t v27 = v26 & 0xFFFFFFDF00000000LL | 0x2000000000LL;
                  }
                }

                while (__stlxr(v27, v28));
              }

              a3 = v12;
              uint64_t v4 = v34;
              goto LABEL_61;
            }

            _dispatch_continuation_pop(v14, 0LL, v37, (_opaque_pthread_t *)a1);
            goto LABEL_28;
          }

          int v17 = v5;
          int v18 = 0LL;
          unint64_t v19 = (uint64_t)v14;
        }

        uint64_t v20 = *(void *)(v19 + 64);
        if (v20 != -1)
        {
          if (v20) {
            uint64_t v20 = *(unsigned int *)(v20 + 32);
          }
          if (MEMORY[0xFFFFFC100]) {
            kdebug_trace(771817488LL, v20, v19, 0LL, 0LL);
          }
        }

        if (*((_DWORD *)v9 + 22) || (*(_DWORD *)(a1 + 80) & 0x10000000) != 0)
        {
          _dispatch_mach_msg_not_sent(a1, v19, v18);
          unsigned int v5 = v17;
        }

        else
        {
          uint64_t v21 = _dispatch_mach_msg_send(a1, v19, v18, v39, v11);
          if (!v21)
          {
            v34 |= 2 * (*(_WORD *)(a1 + 118) & 1);
            uint64_t v6 = v9;
            unsigned int v5 = v17;
            int v12 = a3 & 0xFFFFFFF7;
            goto LABEL_41;
          }

          unsigned int v5 = v17 | ((v21 & 2) >> 1);
        }

        int v12 = a3 & 0xFFFFFFF7;
LABEL_28:
        unsigned int v11 = v12;
        if (!v13)
        {
          int v8 = (uint64_t)v35;
          unsigned int v11 = v12;
          if (*v35) {
            goto LABEL_4;
          }
          a3 = v12;
          uint64_t v4 = v34;
          uint64_t v6 = v9;
          break;
        }
      }
    }

    uint64_t v29 = v6 + 8;
    do
    {
      BOOL v26 = __ldxr(v29);
      uint64_t v27 = v26 & ((uint64_t)(v26 << 26) >> 63) & 0xFFFFFFC7FFFFFFFFLL;
    }

    while (__stlxr(v27, v29));
LABEL_61:
    if ((v26 & 0x800000000LL) != 0)
    {
      unsigned int v30 = HIDWORD(v26) & 7;
      unint64_t v31 = *(_DWORD *)(StatusReg + 200);
    }

    int v39 = HIDWORD(v27) & 7;
  }

  while ((_DWORD)v27);
  if ((v27 & 0x1000000000LL) != 0)
  {
    _dispatch_mach_push_send_barrier_drain(a1, v39);
    return;
  }

  if (!v27 && (*(_WORD *)(a1 + 118) & 2) != 0)
  {
    if ((*(_WORD *)(a1 + 116) & 8) != 0) {
      uint64_t v4 = v4;
    }
    else {
      uint64_t v4 = v4 | 0x12;
    }
  }

  if (((v26 ^ v27) & 0x8000000000LL) == 0)
  {
    if (!(_DWORD)v4) {
      return;
    }
LABEL_79:
    (*(void (**)(unint64_t, void, uint64_t))(*(void *)a1 + 80LL))( a1,  (*(unsigned __int16 *)(a1 + 118) << 31 >> 31) & v39,  v4);
    return;
  }

  if ((_DWORD)v4)
  {
    uint64_t v4 = v4 | 1;
    goto LABEL_79;
  }

  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    int v32 = (unsigned int *)(a1 + 8);
    do
      unint64_t v33 = __ldxr(v32);
    while (__stlxr(v33 - 2, v32));
    if (v33 <= 2)
    {
      if (v33 == 2)
      {
        _os_object_dispose((void *)a1, a2);
      }

      else
      {
        qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
      }
    }
  }

LABEL_90:
    if (v64 < 0 && v65)
    {
      if (*(void *)v159 != *(void *)(a1 + 24)
        && (*(void *)(v22 + 40) || *(void *)(v22 + 48) || *(void *)(v22 + 56)))
      {
        BOOL v66 = 0;
        uint64_t v29 = *(void *)(a1 + 24);
      }

      else
      {
        _dispatch_source_cancel_callout(a1, *(_opaque_pthread_t **)v159, v30);
        BOOL v66 = 0;
        int v64 = *(_DWORD *)(a1 + 80);
      }
    }
  }

  else
  {
    BOOL v66 = 0;
  }

  if ((v64 & 0x10800000) != 0) {
    goto LABEL_113;
  }
  if ((*(_BYTE *)(v22 + 29) & 2) != 0)
  {
    if (!*(void *)(v22 + 104))
    {
      uint64_t v97 = *(void *)(v22 + 16);
      if (!v97 || (v97 & 3) != 0 || *(void *)(v22 + 80) > 0x7FFFFFFFFFFFFFFEuLL) {
        goto LABEL_113;
      }
    }
  }

  else
  {
    uint64_t v93 = *(void *)(v22 + 16);
    if (!v93 || (v93 & 3) != 0) {
      goto LABEL_113;
    }
  }

  uint64_t v94 = v29;
  uint64_t v29 = (uint64_t)v31;
  if (*(__objc2_class ***)v159 != v31) {
    goto LABEL_113;
  }
  if (*v18 >> 55) {
    goto LABEL_156;
  }
  uint64_t v29 = v94;
  if ((*(_BYTE *)(v22 + 29) & 1) == 0 || (~*(void *)(v22 + 16) & 0xFFFFFFFFFFFFFFFCLL) != 0)
  {
    _dispatch_unote_resume(v22);
    if (!v66)
    {
      if (*(void *)(v19 + 40))
      {
        uint64_t v95 = *(void *)(v19 + 232);
        if (v95)
        {
          uint64_t v96 = *(void *)(v95 + 24);
          if (v96 != -4 && v96 == (*(void *)(v22 + 16) & 0xFFFFFFFFFFFFFFFCLL)) {
            _dispatch_event_loop_drain(1LL);
          }
        }
      }
    }

    goto LABEL_113;
  }

  __int16 v111 = *(_WORD *)(a1 + 116);
  if ((v111 & 2) != 0)
  {
    *(_WORD *)(a1 + 116) = v111 & 0xFFFD;
    _dispatch_unote_resume(v22);
  }

  if (v66) {
LABEL_156:
  }
    uint64_t v29 = *(void *)(a1 + 24);
LABEL_113:
  int v17 = v163;
  a2 = (void *)v165;
  if (v163 == 2)
  {
    __int128 v166 = *(_OWORD *)v20;
    *(void *)(v19 + 16_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = a1;
    *(void *)(v19 + 168) = &v166;
    _dispatch_last_resort_autorelease_pool_pop(v165);
    *(_OWORD *)uint64_t v20 = v166;
  }

  if ((unint64_t)(v29 + 1) > 1)
  {
LABEL_229:
    if ((v16 & 0x40000) == 0) {
      goto LABEL_216;
    }
  }

  else
  {
    uint64_t v90 = v167;
    do
    {
      unint64_t v91 = __ldxr(v18);
      unint64_t v92 = (v91 - v90) & 0xFFFFFFF700000001LL;
      if (!(v91 >> 55))
      {
        if ((v91 & 0x8000000000LL) != 0)
        {
          __clrex();
          do
            unint64_t v120 = __ldaxr(v18);
          while (__stxr(v120 ^ 0x8000000000LL, v18));
          if ((v3 & 1) != 0) {
            goto LABEL_28;
          }
          uint64_t v29 = *v20;
          if ((*(void *)(*(void *)*v20 + 40LL) & 0x10000) != 0) {
            goto LABEL_28;
          }
          goto LABEL_229;
        }

        if (v29) {
          unint64_t v92 = (v91 - v90) & 0xFFFFFF7700000001LL | 0x8000000000LL;
        }
        else {
          unint64_t v92 = (v91 - v90) & 0xFFFFFFF000000001LL;
        }
      }
    }

    while (__stlxr(v92, v18));
    if ((~v91 & 0x1800000000LL) == 0)
    {
      uint64_t v124 = HIDWORD(v91) & 7;
      unsigned int v125 = *(_DWORD *)(v19 + 200);
    }

    uint64_t v29 = 0LL;
    uint64_t v167 = 0LL;
    if ((v16 & 0x40000) != 0) {
      goto LABEL_217;
    }
LABEL_216:
    *(void *)(v19 + 20_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = *(void *)(v19 + 200) & 0xF0000LL | v160;
  }

LABEL_217:
  if ((v3 & 1) == 0)
  {
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace(772079660LL, a1, 0LL, 0LL, 0LL);
    }
    _dispatch_introspection_queue_item_complete((dispatch_object_s *)a1);
  }

  if (v29)
  {
    _dispatch_queue_invoke_finish((dispatch_object_s *)a1, (uint64_t)a2, (__objc2_class **)v29, v167);
    if ((v3 & 0x100000) == 0) {
      return;
    }
LABEL_225:
    uint64_t v126 = *(void *)(*(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 216) + 48LL);
    if (v126)
    {
      if (*(_BYTE *)(v126 + 6)) {
        _dispatch_event_loop_drain_timers(v126, 6u);
      }
    }
  }

  else
  {
    _os_object_release_internal_n((void *)a1, (_BYTE *)&dword_0 + 2);
    if ((v3 & 0x100000) != 0) {
      goto LABEL_225;
    }
  }

void _dispatch_source_wakeup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 88);
  int v4 = *(_DWORD *)(a1 + 80);
  char v5 = *(_BYTE *)(v3 + 29);
  if ((*(_WORD *)(a1 + 116) & 1) == 0) {
    goto LABEL_2;
  }
  if ((v4 & 0x10800000) != 0)
  {
    if (*(void *)(v3 + 56) | *(void *)(v3 + 16) & 2LL)
    {
LABEL_27:
      if (*(__objc2_class ***)(a1 + 24) == &_dispatch_mgr_q) {
        uint64_t v6 = &_dispatch_mgr_q;
      }
      else {
        uint64_t v6 = (__objc2_class **)(&dword_0 + 1);
      }
      goto LABEL_4;
    }

    if (v4 < 0)
    {
      if (*(void *)(v3 + 40) || *(void *)(v3 + 48) || *(void *)(v3 + 56)) {
        goto LABEL_27;
      }
      goto LABEL_12;
    }

    if ((*(_BYTE *)(v3 + 29) & 2) != 0 && (*(void *)(v3 + 16) & 1) == 0) {
      goto LABEL_27;
    }
    if ((a3 & 0x10) == 0 && (v4 & 0x40000000) != 0)
    {
LABEL_12:
      if (!*(void *)(a1 + 48))
      {
        uint64_t v6 = 0LL;
        goto LABEL_4;
      }

      goto LABEL_27;
    }
  }

  else
  {
    if ((*(_BYTE *)(v3 + 29) & 2) != 0 && *(void *)(v3 + 104)) {
      goto LABEL_2;
    }
    if (*(void *)(v3 + 56) | *(void *)(v3 + 16) & 2LL || *(void *)(v3 + 72)) {
      goto LABEL_27;
    }
    if ((*(_BYTE *)(v3 + 29) & 2) != 0)
    {
      if (*(void *)(v3 + 104)) {
        goto LABEL_2;
      }
      uint64_t v9 = *(void *)(v3 + 16);
      if (v9)
      {
        if ((v9 & 3) == 0 && *(void *)(v3 + 80) < 0x7FFFFFFFFFFFFFFFuLL) {
          goto LABEL_2;
        }
      }

      goto LABEL_12;
    }

    uint64_t v7 = *(void *)(v3 + 16);
    if (v7) {
      BOOL v8 = (v7 & 3) == 0;
    }
    else {
      BOOL v8 = 0;
    }
    if (!v8) {
      goto LABEL_12;
    }
  }

void dispatch_source_cancel(dispatch_source_t source)
{
  if (*((_DWORD *)source + 2) != 0x7FFFFFFF)
  {
    uint64_t v1 = (unsigned int *)((char *)source + 8);
    do
      int v2 = __ldxr(v1);
    while (__stxr(v2 + 2, v1));
    if (v2 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

  uint64_t v3 = (unsigned int *)((char *)source + 80);
  do
    unsigned int v4 = __ldxr(v3);
  while (__stxr(v4 | 0x10000000, v3));
  if ((v4 & 0x10000000) != 0) {
    _os_object_release_internal_n(source, (_BYTE *)&dword_0 + 2);
  }
  else {
    (*(void (**)(dispatch_source_t, void, uint64_t))(*(void *)source + 80LL))(source, 0LL, 3LL);
  }
}

void dispatch_source_cancel_and_wait(dispatch_object_s *object)
{
  uint64_t v2 = *((void *)object + 11);
  if (*(void *)(v2 + 48)) {
    dispatch_source_cancel_and_wait_cold_4((uint64_t)object);
  }
  uint64_t v3 = (unsigned int *)((char *)object + 80);
  while (1)
  {
    unsigned int v4 = __ldxr(v3);
    unsigned int v5 = v4 | 0x10000000;
    if ((v4 & 0x20000000) != 0) {
      break;
    }
    if ((v4 & 0x80000000) == 0 && ((v4 & 0x40000000) != 0 || (*(_BYTE *)(v2 + 29) & 3) != 1)) {
      unsigned int v5 = v4 | 0x30000000;
    }
    if (!__stxr(v5, v3))
    {
      if ((v4 & 0x800000) == 0) {
        goto LABEL_10;
      }
LABEL_27:
      dispatch_source_cancel_and_wait_cold_3((uint64_t)object);
    }
  }

  __clrex();
  if ((v4 & 0x800000) != 0) {
    goto LABEL_27;
  }
LABEL_10:
  if ((v4 & 0x80000000) != 0) {
    return;
  }
  if ((v5 & 0x20000000) != 0) {
    goto LABEL_31;
  }
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v7 = *(void *)(StatusReg + 24) & 0xFFFFFFFCLL;
  BOOL v8 = (unint64_t *)((char *)object + 56);
  while (1)
  {
    unint64_t v9 = __ldaxr(v8);
    if ((v9 & 0xFFE00000FFFFFFFCLL) != 0) {
      break;
    }
    unint64_t v10 = v7 | v9 & 0x7700000001LL | 0x60000000000000LL;
LABEL_15:
    if (!__stlxr(v10, v8))
    {
      if (v9 >> 55) {
        goto LABEL_37;
      }
      if ((v9 & 0xFFE00000FFFFFFFCLL) == 0)
      {
        if ((*v3 & 0x80000000) == 0) {
          _dispatch_source_refs_unregister((uint64_t)object, 3);
        }
        if ((*v3 & 0x80000000) != 0) {
          _dispatch_source_cancel_callout((uint64_t)object, 0LL, 0);
        }
        (*(void (**)(dispatch_object_s *, void, uint64_t))(*(void *)object + 80LL))(object, 0LL, 20LL);
LABEL_35:
        unsigned int v15 = *v3;
        if ((*v3 & 0x80000000) != 0) {
          return;
        }
        while (1)
        {
          if ((v15 & 0x20000000) != 0)
          {
            unsigned int v16 = v15;
          }

          else
          {
            unsigned int v16 = v15 | 0x20000000;
            while (1)
            {
              unsigned int v17 = __ldxr(v3);
              if (v17 != v15) {
                break;
              }
              if (!__stxr(v16, v3))
              {
                int v18 = 1;
                goto LABEL_45;
              }
            }

            int v18 = 0;
            __clrex();
LABEL_45:
            if (!v18) {
              goto LABEL_50;
            }
          }

          _dispatch_wait_on_address((uint64_t)object + 80, v16, -1LL, 0);
          unsigned int v17 = *v3;
LABEL_50:
          unsigned int v15 = v17;
          if ((v17 & 0x80000000) != 0) {
            return;
          }
        }
      }

unsigned int *_dispatch_source_refs_unregister(uint64_t a1, char a2)
{
  uint64_t result = (unsigned int *)_dispatch_unote_unregister(*(void *)(a1 + 88), a2);
  if ((_DWORD)result) {
    return _dispatch_source_refs_finalize_unregistration((unsigned int *)a1, v4);
  }
  unsigned int v5 = (unsigned int *)(a1 + 80);
  while (1)
  {
    unsigned int v6 = __ldxr(v5);
    if ((v6 & 0xC0000000) != 0) {
      break;
    }
    if (!__stxr(v6 | 0x40000000, v5)) {
      return result;
    }
  }

  __clrex();
  return result;
}

void _dispatch_source_cancel_callout(uint64_t a1, _opaque_pthread_t *a2, int a3)
{
  unsigned int v6 = *(unint64_t **)(a1 + 88);
  if ((a3 & 0x1000000) != 0) {
    uint64_t v7 = objc_autoreleasePoolPush();
  }
  else {
    uint64_t v7 = 0LL;
  }
  BOOL v8 = v6 + 6;
  do
    unint64_t v9 = (uint64_t *)__ldxr(v8);
  while (__stxr(0LL, v8));
  unint64_t v10 = v6 + 5;
  v6[8] = 0LL;
  v6[9] = 0LL;
  do
    uint64_t v11 = __ldxr(v10);
  while (__stxr(0LL, v10));
  if (v11) {
    _dispatch_source_handler_dispose(v11);
  }
  unsigned int v12 = v6 + 7;
  do
    uint64_t v13 = __ldxr(v12);
  while (__stxr(0LL, v12));
  if (v13) {
    _dispatch_source_handler_dispose(v13);
  }
  if (!v9)
  {
LABEL_17:
    if (!v7) {
      return;
    }
    goto LABEL_18;
  }

  if ((*(_DWORD *)(a1 + 80) & 0x10000000) == 0)
  {
    _dispatch_source_handler_dispose((uint64_t)v9);
    goto LABEL_17;
  }

  if ((*(_BYTE *)v9 & 0x40) != 0) {
    v9[5] = *(void *)(a1 + 32);
  }
  if (MEMORY[0xFFFFFC100]) {
    _dispatch_trace_source_callout_entry_internal((_opaque_pthread_t *)a1, 1LL, a2, v9);
  }
  _dispatch_continuation_pop(v9, 0LL, a3 & 0xFEFFFFFF, a2);
  if (v7) {
LABEL_18:
  }
    objc_autoreleasePoolPop(v7);
}

uint64_t _dispatch_source_merge_evt(uint64_t a1, const char *a2, uint64_t a3, unsigned int a4)
{
  __int16 v5 = (__int16)a2;
  uint64_t v7 = (_DWORD *)~*(void *)(a1 + 8);
  if ((v5 & 0x200) != 0)
  {
    if ((v7[20] & 0x4000000) != 0) {
      _dispatch_source_merge_evt_cold_1(a1);
    }
    _dispatch_bug_kevent_vanished(a1);
    *(void *)(a1 + 72) = 0LL;
  }

  unsigned int v8 = __clz(__rbit32((a4 >> 8) & 0x3FFF));
  if (((a4 >> 8) & 0x3FFF) != 0) {
    uint64_t v9 = v8 + 1;
  }
  else {
    uint64_t v9 = 0LL;
  }
  return (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(void *)v7 + 80LL))(v7, v9, 51LL);
}

void dispatch_after_f(dispatch_time_t when, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  if (when != -1LL)
  {
    dispatch_time_t v7 = when;
    unint64_t v8 = _dispatch_timeout(when);
    if (!v8)
    {
      dispatch_channel_async_f(queue, context, work);
      return;
    }

    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    unsigned int v10 = __clz(__rbit32((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF));
    if (((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF) != 0) {
      unsigned int v11 = v10 + 1;
    }
    else {
      unsigned int v11 = 0;
    }
    if (v11 > 5) {
      unint64_t v12 = 20LL;
    }
    else {
      unint64_t v12 = qword_400A0[v11];
    }
    unint64_t v13 = v8 / v12;
    if (v13 <= 0xF4240) {
      unint64_t v13 = 1000000LL;
    }
    if (v13 >= 0xDF8475800LL) {
      unint64_t v14 = 60000000000LL;
    }
    else {
      unint64_t v14 = v13;
    }
    dispatch_source_t v15 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_after, 0LL, 0LL, queue);
    uint64_t v16 = *((void *)v15 + 11);
    unsigned int v17 = *(uint64_t **)(StatusReg + 176);
    if (v17) {
      *(void *)(StatusReg + 176) = v17[2];
    }
    else {
      unsigned int v17 = (uint64_t *)_dispatch_continuation_alloc_from_heap();
    }
    *unsigned int v17 = 256LL;
    v17[4] = (uint64_t)work;
    v17[5] = (uint64_t)context;
    if ((*(void *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF) {
      uint64_t v18 = 4351LL;
    }
    else {
      uint64_t v18 = *(void *)(StatusReg + 32) & 0xFFFFFFLL;
    }
    uint64_t v19 = *(void *)(StatusReg + 224);
    if (v19) {
      os_retain(*(void **)(StatusReg + 224));
    }
    v17[3] = v19;
    if (v19 == -1) {
      goto LABEL_27;
    }
    if (v19) {
      uint64_t v19 = *(unsigned int *)(v19 + 32);
    }
    if (MEMORY[0xFFFFFC100])
    {
      kdebug_trace(771817476LL, v19, v17, 0LL, 0LL);
      if (v18) {
        goto LABEL_28;
      }
    }

    else
    {
LABEL_27:
      if (v18)
      {
LABEL_28:
        int v20 = (*((_DWORD *)queue + 21) >> 30) & 1;
        if ((*((_DWORD *)queue + 21) & 0xFFF) == 0) {
          int v20 = 1;
        }
        if (v20) {
          uint64_t v21 = v18;
        }
        else {
          uint64_t v21 = 0LL;
        }
LABEL_33:
        v17[1] = v21;
        v17[6] = (uint64_t)v15;
        if (MEMORY[0xFFFFFC100]) {
          _dispatch_trace_item_push_internal((_opaque_pthread_t *)queue, v17);
        }
        _dispatch_introspection_queue_item_enqueue(queue, (dispatch_object_s *)v17);
        *(void *)(v16 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v17;
        if ((v7 & 0x8000000000000000LL) != 0)
        {
          if ((v7 & 0x4000000000000000LL) != 0)
          {
            else {
              dispatch_time_t v7 = -(uint64_t)v7;
            }
            char v22 = 2;
LABEL_43:
            *(_BYTE *)(v16 + 30) |= 4 * v22;
            *(void *)(v16 + 8_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v7;
            *(void *)(v16 + 88) = v14 + v7;
            *(void *)(v16 + 96) = -1LL;
            dispatch_activate(v15);
            return;
          }

          v7 &= ~0x8000000000000000LL;
          char v22 = 1;
        }

        else
        {
          char v22 = 0;
        }

        if (v7 >> 62) {
          dispatch_time_t v7 = -1LL;
        }
        if (_dispatch_host_time_nano2mach)
        {
          unint64_t v14 = _dispatch_host_time_nano2mach(v14);
        }

        else
        {
          uint64_t v23 = (3 * v14 * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
          unint64_t v14 = (v23 + ((3 * v14 - v23) >> 1)) >> 6;
        }

        goto LABEL_43;
      }
    }

    uint64_t v21 = 0LL;
    goto LABEL_33;
  }

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  if (when != -1LL)
  {
    dispatch_time_t v5 = when;
    unint64_t v6 = _dispatch_timeout(when);
    if (!v6)
    {
      dispatch_channel_async(queue, block);
      return;
    }

    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    unsigned int v8 = __clz(__rbit32((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF));
    if (((*(_DWORD *)(StatusReg + 32) >> 8) & 0x3FFF) != 0) {
      unsigned int v9 = v8 + 1;
    }
    else {
      unsigned int v9 = 0;
    }
    if (v9 > 5) {
      unint64_t v10 = 20LL;
    }
    else {
      unint64_t v10 = qword_400A0[v9];
    }
    unint64_t v11 = v6 / v10;
    if (v11 <= 0xF4240) {
      unint64_t v11 = 1000000LL;
    }
    if (v11 >= 0xDF8475800LL) {
      unint64_t v12 = 60000000000LL;
    }
    else {
      unint64_t v12 = v11;
    }
    dispatch_source_t v13 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_after, 0LL, 0LL, queue);
    uint64_t v14 = *((void *)v13 + 11);
    dispatch_source_t v15 = *(uint64_t **)(StatusReg + 176);
    if (v15) {
      *(void *)(StatusReg + 176) = v15[2];
    }
    else {
      dispatch_source_t v15 = (uint64_t *)_dispatch_continuation_alloc_from_heap();
    }
    uint64_t v16 = _dispatch_Block_copy(block);
    unsigned int v17 = (void (*)(uint64_t))*((void *)block + 2);
    *dispatch_source_t v15 = 272LL;
    if (v17 == ___dispatch_block_create_block_invoke)
    {
      v15[5] = (uint64_t)v16;
      _dispatch_continuation_init_slow(v15, (unsigned int *)queue, 0);
LABEL_35:
      v15[6] = (uint64_t)v13;
      if (MEMORY[0xFFFFFC100]) {
        _dispatch_trace_item_push_internal((_opaque_pthread_t *)queue, v15);
      }
      _dispatch_introspection_queue_item_enqueue(queue, (dispatch_object_s *)v15);
      *(void *)(v14 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v15;
      if ((v5 & 0x8000000000000000LL) != 0)
      {
        if ((v5 & 0x4000000000000000LL) != 0)
        {
          else {
            dispatch_time_t v5 = -(uint64_t)v5;
          }
          char v22 = 2;
LABEL_45:
          *(_BYTE *)(v14 + 30) |= 4 * v22;
          *(void *)(v14 + 8_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v5;
          *(void *)(v14 + 88) = v12 + v5;
          *(void *)(v14 + 96) = -1LL;
          dispatch_activate(v13);
          return;
        }

        v5 &= ~0x8000000000000000LL;
        char v22 = 1;
      }

      else
      {
        char v22 = 0;
      }

      if (v5 >> 62) {
        dispatch_time_t v5 = -1LL;
      }
      if (_dispatch_host_time_nano2mach)
      {
        unint64_t v12 = _dispatch_host_time_nano2mach(v12);
      }

      else
      {
        uint64_t v23 = (3 * v12 * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
        unint64_t v12 = (v23 + ((3 * v12 - v23) >> 1)) >> 6;
      }

      goto LABEL_45;
    }

    v15[4] = (uint64_t)v17;
    v15[5] = (uint64_t)v16;
    if ((*(void *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF) {
      uint64_t v18 = 4351LL;
    }
    else {
      uint64_t v18 = *(void *)(StatusReg + 32) & 0xFFFFFFLL;
    }
    uint64_t v19 = *(void *)(StatusReg + 224);
    if (v19) {
      os_retain(*(void **)(StatusReg + 224));
    }
    v15[3] = v19;
    if (v19 == -1) {
      goto LABEL_28;
    }
    if (v19) {
      uint64_t v19 = *(unsigned int *)(v19 + 32);
    }
    if (MEMORY[0xFFFFFC100])
    {
      kdebug_trace(771817476LL, v19, v15, 0LL, 0LL);
      if (v18) {
        goto LABEL_29;
      }
    }

    else
    {
LABEL_28:
      if (v18)
      {
LABEL_29:
        int v20 = (*((_DWORD *)queue + 21) >> 30) & 1;
        if ((*((_DWORD *)queue + 21) & 0xFFF) == 0) {
          int v20 = 1;
        }
        if (v20) {
          uint64_t v21 = v18;
        }
        else {
          uint64_t v21 = 0LL;
        }
        goto LABEL_34;
      }
    }

    uint64_t v21 = 0LL;
LABEL_34:
    v15[1] = v21;
    goto LABEL_35;
  }

void _dispatch_source_handler_dispose(uint64_t a1)
{
  if ((*(_BYTE *)a1 & 0x10) != 0) {
    _Block_release(*(const void **)(a1 + 40));
  }
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    os_release(v2);
    *(void *)(a1 + 24) = -1LL;
  }

  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v4 = *(void *)(StatusReg + 176);
  if (v4) {
    int v5 = *(_DWORD *)(v4 + 8) + 1;
  }
  else {
    int v5 = 1;
  }
  if (v5 > _dispatch_continuation_cache_limit)
  {
    _dispatch_continuation_free_to_cache_limit(a1);
  }

  else
  {
    *(void *)(a1 + 16) = v4;
    *(_DWORD *)(a1 + 8) = v5;
    *(void *)(StatusReg + 176) = a1;
  }

void _dispatch_source_set_handler_slow(unint64_t a1)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v2 = *(void *)(StatusReg + 160);
  uint64_t v3 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0LL;
  if (*(void *)(a1 + 32))
  {
    if ((*(_BYTE *)a1 & 0x40) != 0) {
      *(void *)(a1 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = *(void *)(v2 + 32);
    }
  }

  else
  {
    uint64_t v4 = *(void *)(StatusReg + 176);
    if (v4) {
      int v5 = *(_DWORD *)(v4 + 8) + 1;
    }
    else {
      int v5 = 1;
    }
    if (v5 > _dispatch_continuation_cache_limit)
    {
      _dispatch_continuation_free_to_cache_limit(a1);
    }

    else
    {
      *(void *)(a1 + 16) = v4;
      *(_DWORD *)(a1 + 8) = v5;
      *(void *)(StatusReg + 176) = a1;
    }

    a1 = 0LL;
  }

  unint64_t v6 = (unint64_t *)(*(void *)(v2 + 88) + 8 * v3 + 40);
  do
    uint64_t v7 = __ldxr(v6);
  while (__stlxr(a1, v6));
  if (v7) {
    _dispatch_source_handler_dispose(v7);
  }
}

void _dispatch_source_handle_wlh_change(uint64_t a1)
{
  uint64_t v1 = (unsigned int *)(a1 + 80);
  do
    unsigned int v2 = __ldxr(v1);
  while (__stxr(v2 | 0x8000000, v1));
  if ((v2 & 0x400000) != 0)
  {
    if ((v2 & 0x8000000) == 0) {
      _dispatch_bug_deprecated("Changing target queue hierarchy after source was activated");
    }
  }

  else
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Changing target queue hierarchy after source was activated";
    __break(1u);
  }

uint64_t OUTLINED_FUNCTION_0_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_1_2(int a1, char *__str, const char *a3)
{
  return snprintf(__str, v3, a3);
}

void *dispatch_mach_hooks_install_4libxpc(void *result)
{
  if (*result < 3uLL) {
    dispatch_mach_hooks_install_4libxpc_cold_1((uint64_t)result);
  }
  do
  {
    uint64_t v1 = (void *)__ldxr((unint64_t *)&_dispatch_mach_xpc_hooks);
    if (v1 != &_dispatch_mach_xpc_hooks_default)
    {
      __clrex();
      dispatch_mach_hooks_install_4libxpc_cold_2();
    }
  }

  while (__stxr((unint64_t)result, (unint64_t *)&_dispatch_mach_xpc_hooks));
  return result;
}

void _dispatch_mach_hooks_install_default()
{
  _dispatch_mach_xpc_hooks = &_dispatch_mach_xpc_hooks_default;
}

uint64_t dispatch_mach_create(uint64_t a1, __objc2_class **a2, void *aBlock)
{
  int v5 = _dispatch_Block_copy(aBlock);
  return _dispatch_mach_create(a1, a2, (uint64_t)v5, v5[2], 1u);
}

uint64_t _dispatch_mach_create(uint64_t a1, __objc2_class **a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v10 = _dispatch_object_alloc(&OBJC_CLASS___OS_dispatch_mach, 136LL);
  uint64_t v11 = v10;
  *(_DWORD *)(v10 + 8) += 2;
  if (*(_BYTE *)(*(void *)v10 + 40LL) == 19LL) {
    ++*(_DWORD *)(v10 + 8);
  }
  *(void *)(v10 + 16) = -1985229329LL;
  *(_DWORD *)(v10 + 8_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = 4194305;
  *(void *)(v10 + 56) = 0x19FFE0000000000LL;
  do
    unint64_t v12 = __ldxr(&_dispatch_queue_serial_numbers);
  while (__stxr(v12 + 1, &_dispatch_queue_serial_numbers));
  *(void *)(v10 + 64) = v12;
  *(void *)(v10 + 72) = a1;
  *(_WORD *)(v10 + 116) = (8 * a5) & 0x10 | (((a5 >> 2) & 1) << 7) | *(_WORD *)(v10 + 116) & 0xFF6F;
  dispatch_source_t v13 = _dispatch_unote_create_without_handle((uint64_t)&_dispatch_mach_type_recv, 0LL, 0LL);
  char v14 = v13[29];
  *((void *)v13 + _dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = ~v11;
  *((void *)v13 + 5) = a4;
  *((void *)v13 + 6) = a3;
  v13[29] = v14 & 0xBF | ((a5 & 1) << 6);
  if ((*(_BYTE *)(v11 + 116) & 0x80) != 0) {
    *((_DWORD *)v13 + 8) |= 0x200u;
  }
  *(void *)(v11 + 88) = v13;
  dispatch_source_t v15 = _dispatch_mach_send_create((uint64_t)&_dispatch_mach_type_send, 0LL, 9LL);
  *((void *)v15 + _dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = ~v11;
  *(void *)(v11 + 12_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v15;
  if (a2)
  {
    if ((*((_BYTE *)a2 + 87) & 8) != 0) {
      _dispatch_mach_create_cold_2((uint64_t)a2);
    }
    if (*((_DWORD *)a2 + 2) != 0x7FFFFFFF)
    {
      uint64_t v16 = (unsigned int *)(a2 + 1);
      do
        int v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      if (v17 <= 0) {
        dispatch_set_target_queue_cold_2();
      }
    }
  }

  else
  {
    a2 = &off_653C0;
  }

  *(void *)(v11 + 24) = a2;
  return v11;
}

uint64_t dispatch_mach_create_f(uint64_t a1, __objc2_class **a2, uint64_t a3, uint64_t a4)
{
  return _dispatch_mach_create(a1, a2, a3, a4, 0);
}

uint64_t dispatch_mach_create_4libxpc(uint64_t a1, __objc2_class **a2, uint64_t a3, uint64_t a4)
{
  return _dispatch_mach_create(a1, a2, a3, a4, 6u);
}

void _dispatch_mach_dispose(uint64_t *a1, _BYTE *a2)
{
  a1[11] = 0LL;
  _dispatch_unote_dispose(a1[15]);
  a1[15] = 0LL;
  uint64_t v4 = a1[16];
  if (v4)
  {
    _dispatch_unote_dispose(v4);
    a1[16] = 0LL;
  }

  _dispatch_lane_class_dispose(a1, a2);
}

uint64_t dispatch_mach_request_no_senders(uint64_t a1)
{
  *(_WORD *)(a1 + 116) |= 0x20u;
  uint64_t result = *(void *)(a1 + 56);
  if ((~result & 0x180000000000000LL) != 0) {
    dispatch_set_qos_class_floor_cold_1(result);
  }
  return result;
}

uint64_t dispatch_mach_notify_no_senders(uint64_t a1, int a2)
{
  if (a2) {
    __int16 v2 = 96;
  }
  else {
    __int16 v2 = 32;
  }
  *(_WORD *)(a1 + 116) = v2 | *(_WORD *)(a1 + 116) & 0xFF9F;
  uint64_t result = *(void *)(a1 + 56);
  if ((~result & 0x180000000000000LL) != 0) {
    dispatch_set_qos_class_floor_cold_1(result);
  }
  return result;
}

uint64_t dispatch_mach_set_flags(uint64_t a1, char a2)
{
  *(_WORD *)(a1 + 116) = *(_WORD *)(a1 + 116) & 0xFF7F | ((a2 & 1) << 7);
  uint64_t result = *(void *)(a1 + 56);
  if ((~result & 0x180000000000000LL) != 0) {
    dispatch_set_qos_class_floor_cold_1(result);
  }
  return result;
}

void dispatch_mach_connect(void *object, int a2, int a3, char *a4)
{
  uint64_t v6 = object[15];
  *(_DWORD *)(v6 + 92) = a3;
  if ((a3 - 1) <= 0xFFFFFFFD)
  {
    if (a4)
    {
      dispatch_retain((dispatch_object_t)a4);
      *((_DWORD *)a4 + 12) = 0x40000;
      uint64_t v7 = a4 + 88;
      if (*((_DWORD *)a4 + 18)) {
        uint64_t v7 = *(char **)v7;
      }
      *(_DWORD *)(v6 + 96) = *((_DWORD *)v7 + 2);
    }

    *(void *)(v6 + 48) = a4;
  }

  if ((*((_WORD *)object + 58) & 0x20) != 0 && !*(void *)(v6 + 48)) {
    _dispatch_mach_arm_no_senders((uint64_t)object, 0);
  }
  unsigned int v8 = (unsigned int *)(v6 + 88);
  do
    unsigned int v9 = __ldxr(v8);
  while (__stxr(v9 & 0x7FFFFFFF, v8));
  if ((v9 & 0x80000000) == 0) {
    dispatch_mach_connect_cold_1(v9);
  }
  dispatch_activate((dispatch_object_t)object);
}

void _dispatch_mach_arm_no_senders(uint64_t a1, char a2)
{
  kern_return_t v4;
  kern_return_t v5;
  mach_port_t previous;
  mach_port_name_t v3 = *(_DWORD *)(*(void *)(a1 + 88) + 24LL);
  previous = 0;
  if (v3 - 1 <= 0xFFFFFFFD)
  {
    uint64_t v4 = mach_port_request_notification( mach_task_self_,  v3,  70,  (*(_WORD *)(a1 + 116) & 0x40) == 0,  v3,  0x15u,  &previous);
    if (v4 == -301) {
      _dispatch_sema4_create_slow_cold_2();
    }
    if (v4) {
      _dispatch_bug(252LL, v4);
    }
    if (previous)
    {
      if ((a2 & 1) == 0) {
        _dispatch_mach_arm_no_senders_cold_2(previous);
      }
      int v5 = mach_port_deallocate(mach_task_self_, previous);
      if (v5 == -301) {
        _dispatch_sema4_create_slow_cold_2();
      }
      if (v5) {
        _dispatch_bug(260LL, v5);
      }
    }
  }

void *_dispatch_mach_merge_msg( uint64_t a1, unsigned int a2, mach_msg_header_t *a3, unsigned int a4, unsigned int *a5, int a6, unsigned int a7)
{
  if ((a2 & 0x200) != 0) {
    _dispatch_mach_merge_msg_cold_2(a1);
  }
  uint64_t v10 = ~*(void *)(a1 + 8);
  if ((*(_DWORD *)(79LL - *(void *)(a1 + 8)) & 0x10000000) != 0) {
    goto LABEL_29;
  }
  if (a3->msgh_id != 70 || (*(_WORD *)(115LL - *(void *)(a1 + 8)) & 0x20) == 0)
  {
    unint64_t v14 = (unint64_t)_voucher_create_with_mach_msgv(&a3->msgh_bits, a5);
    if ((*(void *)&a6 & 0xFFFFFFuLL) >= 0x10FF) {
      uint64_t v15 = 4351LL;
    }
    else {
      uint64_t v15 = *(void *)&a6 & 0xFFFFFFLL;
    }
    uint64_t v16 = dispatch_mach_msg_create(a3, a4, HIWORD(a2) & 1, 0LL);
    uint64_t v17 = v16;
    if ((a2 & 0x10000) == 0 && MEMORY[0xFFFFFC100]) {
      kdebug_trace(771948548LL, a3, v16 + 88, 0LL, 0LL);
    }
    *(void *)(v17 + 56) = v15;
    *(void *)(v17 + 64) = v14;
    *(void *)(v17 + 32) = 0LL;
    *(_DWORD *)(v17 + 48) = -117964798;
    if (v14 != -1LL)
    {
      if (v14) {
        unint64_t v14 = *(unsigned int *)(v14 + 32);
      }
      if (MEMORY[0xFFFFFC100]) {
        kdebug_trace(771817484LL, v14, v17, 0LL, 0LL);
      }
    }

    _dispatch_mach_handle_or_push_received_msg(v10, (_DWORD *)v17, a7);
    goto LABEL_17;
  }

  if (_dispatch_mach_msg_sender_is_kernel((uint64_t)a3))
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    int v20 = *(uint64_t **)(StatusReg + 176);
    if (v20) {
      *(void *)(StatusReg + 176) = v20[2];
    }
    else {
      int v20 = (uint64_t *)_dispatch_continuation_alloc_from_heap();
    }
    *int v20 = 260LL;
    v20[4] = (uint64_t)_dispatch_mach_no_senders_invoke;
    v20[5] = v10;
    v20[3] = 0LL;
    if (MEMORY[0xFFFFFC100])
    {
      kdebug_trace(771817476LL, 0LL, v20, 0LL, 0LL);
      uint64_t v21 = *v20;
      v20[1] = 0LL;
      if ((v21 & 0x200) != 0)
      {
LABEL_28:
        (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v10 + 88LL))(v10, v20, 0LL);
        goto LABEL_29;
      }
    }

    else
    {
      v20[1] = 0LL;
    }

    if (MEMORY[0xFFFFFC100]) {
      _dispatch_trace_item_push_internal((_opaque_pthread_t *)v10, v20);
    }
    _dispatch_introspection_queue_item_enqueue((dispatch_queue_s *)v10, (dispatch_object_s *)v20);
    goto LABEL_28;
  }

  _dispatch_mach_merge_msg_cold_1();
LABEL_29:
  mach_msg_destroy(a3);
  if ((a2 & 0x10000) != 0) {
    free(a3);
  }
LABEL_17:
  if ((*(void *)(a1 + 16) & 2) != 0 || (*(_DWORD *)(v10 + 60) & 0x1800000) == 0x800000) {
    return (void *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v10 + 80LL))(v10, 0LL, 51LL);
  }
  else {
    return _os_object_release_internal_n((void *)v10, (_BYTE *)&dword_0 + 2);
  }
}

uint64_t _dispatch_mach_no_senders_invoke(uint64_t result)
{
  if ((*(_DWORD *)(result + 80) & 0x10000000) == 0) {
    return _dispatch_client_callout4( *(void *)(*(void *)(result + 88) + 48LL),  13LL,  0LL,  0LL,  *(uint64_t (**)(void))(*(void *)(result + 88) + 40LL));
  }
  return result;
}

void _dispatch_mach_handle_or_push_received_msg(uint64_t a1, _DWORD *a2, unsigned int a3)
{
  int v6 = a2[12];
  uint64_t v7 = 3LL;
  if (v6) {
    uint64_t v7 = 4LL;
  }
  if ((v6 & 0xFFFFC000) == 0xF8F80000) {
    uint64_t v8 = v6 & 0x3FFF;
  }
  else {
    uint64_t v8 = v7;
  }
  if (v8 != 2
    && (*(_WORD *)(a1 + 116) & 0x10) != 0
    && ((*(uint64_t (**)(void))((char *)&dword_8 + (void)_dispatch_mach_xpc_hooks))(*(void *)(*(void *)(a1 + 88) + 48LL)) & 1) != 0)
  {
    *((void *)a2 + 2) = -1985229329LL;
    dispatch_release((dispatch_object_t)a2);
  }

  else
  {
    if (MEMORY[0xFFFFFC100]) {
      _dispatch_trace_item_push_internal((_opaque_pthread_t *)a1, (uint64_t *)a2);
    }
    _dispatch_introspection_queue_item_enqueue((dispatch_queue_s *)a1, (dispatch_object_s *)a2);
    unsigned int v9 = (a3 >> 8) & 0x3FFF;
    if (v9) {
      unsigned int v10 = __clz(__rbit32(v9)) + 1;
    }
    else {
      unsigned int v10 = (*(_DWORD *)(a1 + 84) >> 8) & 0xF;
    }
    _dispatch_lane_push(a1, a2, v10);
  }

void _dispatch_mach_reply_merge_msg( uint64_t a1, unsigned int a2, mach_msg_header_t *a3, unsigned int a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v10 = ~*(void *)(a1 + 8);
  if ((*(_DWORD *)(79LL - *(void *)(a1 + 8)) & 0x10000000) != 0)
  {
    mach_msg_destroy(a3);
    if ((a2 & 0x10000) != 0) {
      free(a3);
    }
    char v27 = 117;
  }

  else
  {
    mach_msg_bits_t msgh_bits = a3->msgh_bits;
    mach_msg_bits_t v14 = HIWORD(a3->msgh_bits) & 0x1F;
    mach_port_name_t msgh_voucher_port = a3->msgh_voucher_port;
    if ((v14 == 17 || v14 == 19) && msgh_voucher_port != 0)
    {
      if (v14 == 17)
      {
        _voucher_dealloc_mach_voucher(msgh_voucher_port);
        mach_msg_bits_t msgh_bits = a3->msgh_bits;
      }

      a3->mach_port_name_t msgh_voucher_port = 0;
      a3->mach_msg_bits_t msgh_bits = msgh_bits & 0xFFE0FFFF;
    }

    uint64_t v18 = *(unsigned int *)(a1 + 40);
    uint64_t v19 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = 0LL;
    uint64_t v20 = dispatch_mach_msg_create(a3, a4, HIWORD(a2) & 1, 0LL);
    uint64_t v21 = v20;
    if ((a2 & 0x10000) == 0 && MEMORY[0xFFFFFC100]) {
      kdebug_trace(771948548LL, a3, v20 + 88, 0LL, 0LL);
    }
    *(void *)(v21 + 56) = v18;
    *(void *)(v21 + 64) = v19;
    *(void *)(v21 + 32) = *(void *)(a1 + 48);
    *(_DWORD *)(v21 + 48) = -117964798;
    if (v19 != -1)
    {
      if (v19) {
        uint64_t v19 = *(unsigned int *)(v19 + 32);
      }
      if (MEMORY[0xFFFFFC100]) {
        kdebug_trace(771817484LL, v19, v21, 0LL, 0LL);
      }
    }

    if ((*(_WORD *)(v10 + 116) & 0x10) != 0 && *(void *)(v21 + 32))
    {
      uint64_t v22 = (*(uint64_t (**)(void))((char *)&dword_10 + (void)_dispatch_mach_xpc_hooks))();
      if (v22) {
        uint64_t v23 = (_opaque_pthread_t *)v22;
      }
      else {
        uint64_t v23 = (_opaque_pthread_t *)v10;
      }
      uint64_t v24 = _dispatch_mach_msg_async_reply_wrap(v21, v10);
      if (MEMORY[0xFFFFFC100]) {
        _dispatch_trace_item_push_internal(v23, v24);
      }
      _dispatch_introspection_queue_item_enqueue((dispatch_queue_s *)v23, (dispatch_object_s *)v24);
      unsigned int v25 = __clz(__rbit32((*(_DWORD *)(v21 + 56) >> 8) & 0x3FFF));
      if (((*(_DWORD *)(v21 + 56) >> 8) & 0x3FFF) != 0) {
        uint64_t v26 = v25 + 1;
      }
      else {
        uint64_t v26 = 0LL;
      }
      (*(void (**)(_opaque_pthread_t *, uint64_t *, uint64_t))(v23->__sig + 88))(v23, v24, v26);
    }

    else
    {
      _dispatch_mach_handle_or_push_received_msg(v10, (_DWORD *)v21, a7);
    }

    char v27 = 101;
  }

  _dispatch_mach_reply_unregister((_opaque_pthread_t *)v10, a1, v27);
}

void _dispatch_mach_reply_unregister(_opaque_pthread_t *a1, uint64_t a2, char a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)&a1->__opaque[104];
  if ((a3 & 0x20) != 0)
  {
    unsigned int v9 = (unsigned int *)(v7 + 40);
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    unsigned int v11 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    while (!__ldaxr(v9))
    {
      if (!__stxr(v11, v9)) {
        goto LABEL_8;
      }
    }

    __clrex();
    _dispatch_unfair_lock_lock_slow(v7 + 40, 0x10000);
LABEL_8:
    uint64_t v13 = *(void *)(a2 + 64);
    if (v13) {
      *(void *)(v13 + 72) = *(void *)(a2 + 72);
    }
    **(void **)(a2 + 72) = v13;
    *(void *)(a2 + 72) = 0LL;
    if (*(void *)(v7 + 56)) {
      BOOL v8 = 0;
    }
    else {
      BOOL v8 = *(_DWORD *)(v7 + 88) != 0;
    }
    unsigned int v14 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    do
      unsigned int v15 = __ldxr(v9);
    while (__stlxr(0, v9));
    if (v15 != v14) {
      _dispatch_unfair_lock_unlock_slow(v7 + 40, v15);
    }
  }

  else
  {
    BOOL v8 = 0;
  }

  if (!*(void *)(a2 + 16) || (_dispatch_unote_unregister(a2, a3 & 0xF) & 1) != 0)
  {
    if ((a3 & 0x10) != 0)
    {
      if ((*(_WORD *)&a1->__opaque[100] & 0x10) != 0 && *(void *)(a2 + 48))
      {
        uint64_t v18 = (*(uint64_t (**)(void))((char *)&dword_10 + (void)_dispatch_mach_xpc_hooks))();
        if (v18) {
          uint64_t v17 = (_opaque_pthread_t *)v18;
        }
        else {
          uint64_t v17 = a1;
        }
      }

      else
      {
        uint64_t v17 = 0LL;
      }

      int v22 = *(_DWORD *)(a2 + 24);
      if (v22)
      {
        if (*(void *)(a2 + 16) || !*(_BYTE *)(a2 + 30))
        {
          uint64_t v23 = _dispatch_object_alloc(&OBJC_CLASS___OS_dispatch_mach_msg, 112LL);
          uint64_t v24 = (_DWORD *)v23;
          *(void *)(v23 + 16) = -1985229329LL;
          *(void *)(v23 + 24) = &off_65340;
          *(_DWORD *)(v23 + 72) = 0;
          *(void *)(v23 + 8_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = 24LL;
          *(_DWORD *)(v23 + 10_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v22;
          uint64_t v25 = *(unsigned int *)(a2 + 40);
          uint64_t v26 = *(void *)(a2 + 56);
          *(void *)(v23 + 32) = *(void *)(a2 + 48);
          *(void *)(v23 + 56) = v25;
          *(void *)(v23 + 64) = v26;
          *(void *)(a2 + 56) = 0LL;
          if (v17) {
            int v27 = -117964788;
          }
          else {
            int v27 = -117964793;
          }
          *(_DWORD *)(v23 + 48) = v27;
LABEL_47:
          if (v6 != -2) {
            _dispatch_unote_dispose(a2);
          }
          if (v24)
          {
            if (!v17)
            {
              _dispatch_mach_handle_or_push_received_msg((uint64_t)a1, v24, 0);
              if ((a3 & 0x40) == 0) {
                return;
              }
              goto LABEL_60;
            }

            unsigned int v30 = _dispatch_mach_msg_async_reply_wrap((uint64_t)v24, (uint64_t)a1);
            if (MEMORY[0xFFFFFC100]) {
              _dispatch_trace_item_push_internal(v17, v30);
            }
            _dispatch_introspection_queue_item_enqueue((dispatch_queue_s *)v17, (dispatch_object_s *)v30);
            unsigned int v31 = __clz(__rbit32((v24[14] >> 8) & 0x3FFF));
            if (((v24[14] >> 8) & 0x3FFF) != 0) {
              uint64_t v32 = v31 + 1;
            }
            else {
              uint64_t v32 = 0LL;
            }
            (*(void (**)(_opaque_pthread_t *, uint64_t *, uint64_t))(v17->__sig + 88))(v17, v30, v32);
          }

          if ((a3 & 0x40) == 0) {
            return;
          }
LABEL_60:
          if (v8) {
            (*(void (**)(_opaque_pthread_t *, void, uint64_t))(a1->__sig + 80))(a1, 0LL, 3LL);
          }
          else {
            _os_object_release_internal_n(a1, (_BYTE *)&dword_0 + 2);
          }
          return;
        }

        uint64_t v29 = *(void **)(a2 + 56);
        if (v29)
        {
          os_release(v29);
          *(void *)(a2 + 56) = 0LL;
        }

        _dispatch_destruct_reply_port();
      }

      else
      {
        uint64_t v28 = *(void **)(a2 + 56);
        if (v28)
        {
          os_release(v28);
          goto LABEL_41;
        }
      }
    }

    else
    {
      uint64_t v16 = *(void **)(a2 + 56);
      if (v16)
      {
        os_release(v16);
        uint64_t v17 = 0LL;
LABEL_41:
        uint64_t v24 = 0LL;
        *(void *)(a2 + 56) = 0LL;
        goto LABEL_47;
      }

      uint64_t v17 = 0LL;
    }

    uint64_t v24 = 0LL;
    goto LABEL_47;
  }

  if (a3 < 0)
  {
    uint64_t v21 = *(void *)(v7 + 56);
    uint64_t v20 = (uint64_t *)(v7 + 56);
    uint64_t v19 = v21;
    *(void *)(a2 + 64) = v21;
    if (v21) {
      *(void *)(v19 + 72) = a2 + 64;
    }
    *uint64_t v20 = a2;
    *(void *)(a2 + 72) = v20;
  }

void _dispatch_mach_send_barrier_drain_invoke(void *a1, uint64_t a2, const char *a3)
{
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unint64_t v6 = StatusReg[20];
  uint64_t v7 = (_OWORD *)StatusReg[21];
  *((_OWORD *)StatusReg + 1_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = *v7;
  BOOL v8 = (unsigned int *)a1[3];
  a1[3] = -1LL;
  if (v8 != (unsigned int *)-1LL && (unsigned int *)((char *)v8 + 1) != 0LL)
  {
    uint64_t v10 = v8;
    if (v8) {
      uint64_t v10 = (unsigned int *)v8[8];
    }
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace(771817480LL, v10, a1, 0LL, 0LL);
    }
  }

  uint64_t v11 = a1[1];
  if (v11 == -1)
  {
    unint64_t v14 = 0LL;
  }

  else
  {
    uint64_t v12 = StatusReg[25];
    else {
      uint64_t v13 = 0LL;
    }
    unint64_t v14 = v13 & 0xFFFFFFFFFFFFFF00LL | StatusReg[25];
    if ((v11 & 0xFFFFFF) != 0)
    {
      if ((v11 & 0xFFFFFFuLL) >= (v13 & 0xFFFFFF00)
        && ((v12 & 0x44000000) != 0 || (a1[1] & 0x10000000LL) != 0))
      {
        unint64_t v14 = v11 & 0xFFFFFF;
      }
    }

    else if ((unsigned __int16)v12 >> 12)
    {
      unint64_t v14 = (256LL << (((unsigned __int16)v12 >> 12) - 1)) | 0xFF;
    }
  }

  unint64_t v16 = v14 & 0xFFFFFFFF02FFFFFFLL;
  uint64_t v17 = StatusReg[4];
  if ((v17 & 0x1000000) != 0)
  {
    if (v16)
    {
LABEL_42:
      _dispatch_set_priority_and_voucher_slow(v16, v8, 6);
      goto LABEL_28;
    }

    unint64_t v16 = v17 & 0xFFFFFFFFFEFFFFFFLL;
  }

  else if (v16 == (v17 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_24;
  }

  if (v16) {
    goto LABEL_42;
  }
LABEL_24:
  if ((unsigned int *)StatusReg[28] != v8)
  {
    unint64_t v16 = 0LL;
    goto LABEL_42;
  }

  if (v8) {
    os_release(v8);
  }
LABEL_28:
  uint64_t v18 = StatusReg[22];
  if (v18) {
    int v19 = *(_DWORD *)(v18 + 8) + 1;
  }
  else {
    int v19 = 1;
  }
  if (v19 > _dispatch_continuation_cache_limit)
  {
    _dispatch_mach_send_invoke(v6, a3, 6u);
    _dispatch_continuation_free_to_cache_limit((uint64_t)a1);
  }

  else
  {
    a1[2] = v18;
    *((_DWORD *)a1 + 2) = v19;
    StatusReg[22] = a1;
    _dispatch_mach_send_invoke(v6, a3, 6u);
  }

  StatusReg[20] = v6;
  StatusReg[21] = v7;
}

void _dispatch_mach_send_invoke(unint64_t a1, const char *a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(a1 + 120);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v8 = *(void *)(StatusReg + 24) & 0xFFFFFFFCLL;
  uint64_t v9 = 0xFFFFFFFFLL;
  if ((a3 & 4) == 0) {
    uint64_t v9 = 0x10FFFFFFFFLL;
  }
  if ((a3 & 2) != 0) {
    uint64_t v10 = 0x10FFFFFFFFLL;
  }
  else {
    uint64_t v10 = v9;
  }
  unint64_t v11 = (unint64_t)(a3 & 2) << 35;
  unsigned int v12 = *(_DWORD *)(StatusReg + 200);
  unsigned int v13 = (v12 >> 8) & 0xF;
  unsigned int v14 = (unsigned __int16)v12 >> 12;
  unsigned int v15 = HIWORD(v12) & 0xF;
  if (v13 <= v14) {
    unsigned int v13 = v14;
  }
  if (v13 > v15) {
    unsigned int v15 = v13;
  }
  unint64_t v16 = (unint64_t *)(v6 + 64);
  while (1)
  {
    while (1)
    {
      unint64_t v17 = __ldaxr(v16);
      if ((v17 & v10) != v11) {
        break;
      }
      uint64_t v18 = HIDWORD(v17) & 7;
      if (v15 < v18)
      {
        __clrex();
        _pthread_workqueue_override_start_direct( *(unsigned int *)(StatusReg + 24),  (256LL << ((BYTE4(v17) & 7u) - 1)) | 0xFF);
        unsigned int v19 = *(_DWORD *)(StatusReg + 200);
        unsigned int v15 = v18;
        if ((HIWORD(v19) & 0xF) < v18)
        {
          *(void *)(StatusReg + 20_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v19 & 0xFFF0FFFF | ((_DWORD)v18 << 16);
          unsigned int v15 = v18;
        }
      }

      else if (!__stxr(v17 & 0xFFFFFFC7FFFFFFFFLL | v8, v16))
      {
        _dispatch_mach_send_drain(a1, a2, a3);
        return;
      }
    }

    if ((a3 & 1) == 0) {
      break;
    }
    if (!__stxr(v17 | 0x2000000000LL, v16)) {
      return;
    }
  }

  __clrex();
}

void *_dispatch_mach_notification_merge_evt(uint64_t a1, uint64_t a2, int a3)
{
  mach_port_name_t v3 = (void *)~*(void *)(a1 + 8);
  if ((*(_DWORD *)(a1 + 32) & a3) != 0) {
    _dispatch_mach_send_invoke(~*(void *)(a1 + 8), byte_40000, 1u);
  }
  return _os_object_release_internal_n(v3, (_BYTE *)&dword_0 + 2);
}

uint64_t dispatch_mach_send(uint64_t a1, dispatch_object_s *a2, int a3)
{
  return _dispatch_mach_send_msg(a1, a2, 0LL, a3 & 0xFFFF0000);
}

uint64_t _dispatch_mach_send_msg(uint64_t a1, dispatch_object_t object, unint64_t a3, int a4)
{
  dispatch_object_t v8 = object;
  uint64_t v9 = *(void *)(a1 + 120);
  if (*((void *)object + 2) != -1985229329LL)
  {
    uint64_t v27 = *((void *)object + 2);
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Message already enqueued";
    qword_61258 = v27;
    __break(1u);
LABEL_42:
    kdebug_trace(771817484LL, object, v8, 0LL, 0LL);
    goto LABEL_33;
  }

  unint64_t v5 = a3;
  uint64_t v4 = (_DWORD *)a1;
  if ((a4 & 0x40000) != 0)
  {
    uint64_t v14 = 0LL;
  }

  else
  {
    uint64_t v11 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
    uint64_t v12 = v11 & 0xFFFFFF;
    BOOL v13 = (unsigned __int16)(v11 >> 8) > 0x10uLL && (a4 & 4) == 0;
    uint64_t v14 = 4351LL;
    if (!v13) {
      uint64_t v14 = v12;
    }
  }

  *((void *)object + 7) = v14;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v16 = *(void *)(StatusReg + 224);
  if (v16) {
    os_retain(*(void **)(StatusReg + 224));
  }
  *((void *)v8 + 8) = v16;
  *((_DWORD *)v8 + 12) = a4 | (((*(void *)(StatusReg + 32) & 0x300LL) != 0) << 18);
  dispatch_retain(v8);
  unsigned int v17 = __clz(__rbit32((*((_DWORD *)v8 + 14) >> 8) & 0x3FFF));
  if (((*((_DWORD *)v8 + 14) >> 8) & 0x3FFF) != 0) {
    uint64_t v7 = v17 + 1;
  }
  else {
    uint64_t v7 = 0LL;
  }
  uint64_t v18 = (char *)v8 + 88;
  if (*((_DWORD *)v8 + 18)) {
    uint64_t v18 = *(char **)v18;
  }
  int v19 = *(_DWORD *)v18;
  else {
    int v21 = *((_DWORD *)v18 + 3);
  }
  *((_DWORD *)v8 + 13) = v21;
  int v6 = 8 * (a4 & 1);
  if ((v19 & 0x1F) == 0x12 && !v21 && !*(_DWORD *)(v9 + 88) && (v4[20] & 0x10000000) == 0)
  {
    char v22 = _dispatch_mach_msg_send((unint64_t)v4, (uint64_t)v8, 0LL, 0LL, v6);
    uint64_t result = 0LL;
    if ((v22 & 2) == 0) {
      return result;
    }
    goto LABEL_37;
  }

  object = (dispatch_object_t)*((void *)v8 + 8);
  if (object != (dispatch_object_t)-1LL)
  {
    if (object) {
      object = (dispatch_object_t)*((unsigned int *)object + 8);
    }
    if (MEMORY[0xFFFFFC100]) {
      goto LABEL_42;
    }
  }

uint64_t dispatch_mach_send_with_result( uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, _DWORD *a6)
{
  if (a4)
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid send flags";
    qword_61258 = a4;
    __break(1u);
  }

  else
  {
    uint64_t result = _dispatch_mach_send_msg(result, (dispatch_object_t)a2, 0LL, a3 & 0xFFFF0000 | 1);
    if ((_DWORD)result)
    {
      int v9 = *(_DWORD *)(a2 + 48);
      uint64_t v10 = v9 & 0x3FFF;
      uint64_t v11 = 3LL;
      if (v9) {
        uint64_t v11 = 4LL;
      }
      if ((v9 & 0xFFFFC000) == 0xF8F80000)
      {
        int v9 = 0;
        uint64_t v12 = v10;
      }

      else
      {
        uint64_t v12 = v11;
      }
    }

    else
    {
      int v9 = 0;
      uint64_t v12 = 10LL;
    }

    *a5 = v12;
    *a6 = v9;
  }

  return result;
}

uint64_t dispatch_mach_send_and_wait_for_reply(uint64_t a1, void *a2, int a3)
{
  return _dispatch_mach_send_and_wait_for_reply(a1, a2, a3 & 0xFFFF0000, &v4);
}

uint64_t _dispatch_mach_send_and_wait_for_reply(uint64_t a1, void *object, int a3, _BYTE *a4)
{
  mach_msg_return_t v25;
  mach_msg_return_t v26;
  uint64_t msgh_size;
  mach_msg_header_t *v28;
  vm_size_t v29;
  uint64_t v30;
  mach_msg_header_t *v31;
  mach_msg_header_t *v32;
  uint64_t msgh_local_port;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t *v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v62 = 0u;
  unsigned int v63 = 0u;
  int v64 = 0u;
  uint64_t v60 = 0u;
  uint64_t v61 = 0u;
  unint64_t v59 = -2LL;
  *((void *)&v62 + _dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = object[4];
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  DWORD2(v64) = *(void *)(StatusReg + 24);
  int v9 = *((_DWORD *)object + 18);
  uint64_t v10 = (char *)(object + 11);
  uint64_t v11 = object + 11;
  if (v9) {
    uint64_t v11 = *(_DWORD **)v10;
  }
  unsigned int v12 = v11[3];
  if (v12 - 1 > 0xFFFFFFFD || (*v11 & 0x1F00) != 0x1500)
  {
    unsigned int v12 = *(_DWORD *)(StatusReg + 64);
    if (!v12)
    {
      unsigned int special_reply_port = thread_get_special_reply_port();
      *(void *)(StatusReg + 64) = special_reply_port;
      if (special_reply_port + 1 < 2) {
        _dispatch_mach_send_and_wait_for_reply_cold_6();
      }
      unsigned int v12 = special_reply_port;
      int v9 = *((_DWORD *)object + 18);
    }

    if (v9) {
      uint64_t v10 = *(char **)v10;
    }
    *((_DWORD *)v10 + 3) = v12;
    BYTE6(v6_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = 1;
  }

  uint64_t v52 = xmmword_400D0;
  unsigned int v53 = 0LL;
  unsigned int v54 = -1LL;
  uint64_t v55 = 0LL;
  uint64_t v56 = 0LL;
  uint64_t v57 = object;
  uint64_t v58 = &v59;
  uint64_t v14 = _dispatch_mach_send_msg(a1, (dispatch_object_t)object, (unint64_t)&v52, a3 | 4u);
  *a4 = v14;
  if (BYTE6(v61) && v12 == *(_DWORD *)(StatusReg + 64)) {
    *(void *)(StatusReg + 64) = 0LL;
  }
  if (v12 + 1 <= 1) {
    _dispatch_mach_send_and_wait_for_reply_cold_1(v12);
  }
  __int128 v51 = &v48;
  unint64_t v49 = *((void *)&v62 + 1);
  vm_size_t v16 = (vm_page_mask + 0x4000) & ~vm_page_mask;
  __chkstk_darwin(v14, v15);
  int v19 = (mach_msg_header_t *)((char *)&v48 - v18);
  LODWORD(v2_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = 0;
  int v21 = 0LL;
  if (v17 - 1 >= 0xFFFFFFFE) {
    mach_port_name_t v22 = 0;
  }
  else {
    mach_port_name_t v22 = v17;
  }
  if (v17 - 1 >= 0xFFFFFFFE) {
    int v23 = 117440526;
  }
  else {
    int v23 = 117456910;
  }
  unsigned int v50 = a1;
  mach_msg_option_t v24 = v23 & 0xFFFFFDFF | (((*(unsigned __int16 *)(a1 + 116) >> 7) & 1) << 9);
  while (1)
  {
    char v25 = mach_msg(v19, v24, 0, v16, v12, 0, v22);
    uint64_t v26 = v25;
    if (v25 != 268451844) {
      break;
    }
    msgh_size = v19->msgh_size;
    if ((v24 & 4) == 0)
    {
      _dispatch_log( "BUG in libdispatch client: dispatch_mach_send_and_wait_for_reply: dropped message too large to fit in memory: id = 0x%x, size = %u",  v19->msgh_id,  msgh_size);
      goto LABEL_40;
    }

    vm_size_t v20 = msgh_size + 68;
    uint64_t v28 = (mach_msg_header_t *)malloc(msgh_size + 68);
    int v21 = v28;
    uint64_t v29 = v20;
    if (!v28)
    {
      _dispatch_mach_send_and_wait_for_reply_cold_5();
      uint64_t v28 = v19;
      uint64_t v29 = v16;
    }

    mach_msg_option_t v24 = v24 & 0xFFFFFEFB | 0x100;
    vm_size_t v16 = v29;
    int v19 = v28;
  }

  if ((v25 - 268451842) <= 7 && ((1 << (v25 - 2)) & 0x91) != 0)
  {
    if (BYTE6(v61)) {
      _dispatch_destruct_reply_port();
    }
    goto LABEL_32;
  }

  if (v25) {
    _dispatch_mach_send_and_wait_for_reply_cold_2(v25);
  }
  LODWORD(v16) = v19->msgh_size + 68;
  if (v21 && v16 < v20)
  {
    unsigned int v31 = (mach_msg_header_t *)realloc(v21, v20);
    if (v31)
    {
      int v21 = v31;
      uint64_t v32 = v31;
    }

    else
    {
      uint64_t v32 = v19;
    }
  }

  else
  {
LABEL_40:
    uint64_t v32 = v19;
  }

  msgh_local_port = v32->msgh_local_port;
  unsigned int v34 = (unsigned int *)(*(void *)(v50 + 120) + 40LL);
  uint64_t v35 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v34))
  {
    if (!__stxr(v35, v34)) {
      goto LABEL_46;
    }
  }

  __clrex();
  _dispatch_unfair_lock_lock_slow((uint64_t)v34, 0x10000);
LABEL_46:
  unsigned int v37 = v64;
  if ((void)v64)
  {
    uint64_t v38 = *((void *)&v63 + 1);
    int v39 = (void *)v64;
    if (*((void *)&v63 + 1))
    {
      *(void *)(*((void *)&v63 + 1) + 72LL) = v64;
      int v39 = (void *)v64;
    }

    *int v39 = v38;
    *(void *)&int v64 = 0LL;
  }

  uint64_t v40 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    unint64_t v41 = __ldxr(v34);
  while (__stlxr(0, v34));
  if (v41 != v40) {
    _dispatch_unfair_lock_unlock_slow((uint64_t)v34, v41);
  }
  if (BYTE6(v61))
  {
    if ((_DWORD)v61 != (_DWORD)msgh_local_port)
    {
      goto LABEL_64;
    }

    if (!v37 || *(_DWORD *)(StatusReg + 64))
    {
LABEL_64:
      _dispatch_destruct_reply_port();
      goto LABEL_65;
    }

    *(void *)(StatusReg + 64) = msgh_local_port;
  }

  else if ((msgh_local_port - 1) <= 0xFFFFFFFD && v37)
  {
    unint64_t v42 = _dispatch_object_alloc(&OBJC_CLASS___OS_dispatch_mach_msg, 112LL);
    *(void *)(v42 + 16) = -1985229329LL;
    *(void *)(v42 + 24) = &off_65340;
    *(_DWORD *)(v42 + 72) = 0;
    *(void *)(v42 + 8_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = 24LL;
    *(_DWORD *)(v42 + 10_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = msgh_local_port;
    int v44 = *((void *)&v62 + 1);
    uint64_t v43 = v63;
    *(void *)&unsigned int v63 = 0LL;
    *(void *)(v42 + 56) = v62;
    *(void *)(v42 + 64) = v43;
    *(void *)(v42 + 32) = v44;
    *(_DWORD *)(v42 + 48) = -117964791;
    _dispatch_mach_handle_or_push_received_msg(v50, (_DWORD *)v42, 0);
  }

LABEL_65:
  v32->msgh_local_port = 0;
  if (*(_DWORD *)(v50 + 80) & 0x10000000 | v26)
  {
    if (!v26) {
      mach_msg_destroy(v32);
    }
LABEL_32:
    free(v21);
    return 0LL;
  }

  unsigned int v45 = dispatch_mach_msg_create(v32, v16, v21 != 0LL, 0LL);
  unsigned int v30 = v45;
  if (!v21 || v32 != v19)
  {
    uint64_t v46 = (void *)(v45 + 88);
    if (*(_DWORD *)(v45 + 72)) {
      uint64_t v46 = (void *)*v46;
    }
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace(771948548LL, v19, v46, 0LL, 0LL);
    }
  }

  *(void *)(v30 + 32) = v49;
  return v30;
}

uint64_t dispatch_mach_send_with_result_and_wait_for_reply( uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, _DWORD *a6)
{
  if (a4)
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid send flags";
    qword_61258 = a4;
    __break(1u);
  }

  else
  {
    uint64_t result = _dispatch_mach_send_and_wait_for_reply(result, (void *)a2, a3 & 0xFFFF0000 | 1, &v13);
    int v9 = v13;
    if (v13)
    {
      int v9 = *(_DWORD *)(a2 + 48);
      uint64_t v10 = v9 & 0x3FFF;
      uint64_t v11 = 3LL;
      if (v9) {
        uint64_t v11 = 4LL;
      }
      if ((v9 & 0xFFFFC000) == 0xF8F80000)
      {
        int v9 = 0;
        uint64_t v12 = v10;
      }

      else
      {
        uint64_t v12 = v11;
      }
    }

    else
    {
      uint64_t v12 = 10LL;
    }

    *a5 = v12;
    *a6 = v9;
  }

  return result;
}

uint64_t dispatch_mach_send_with_result_and_async_reply_4libxpc( uint64_t result, _DWORD *object, int a3, uint64_t a4, uint64_t *a5, _DWORD *a6)
{
  if (a4)
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid send flags";
    qword_61258 = a4;
    __break(1u);
    goto LABEL_16;
  }

  if ((*(_WORD *)(result + 116) & 0x10) == 0)
  {
LABEL_16:
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_mach_send_with_result_and_wait_for_reply is XPC only";
    __break(1u);
LABEL_17:
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Reply port needed for async send with reply";
    __break(1u);
    return result;
  }

  int v9 = (char *)(object + 22);
  if (object[18]) {
    int v9 = *(char **)v9;
  }
  uint64_t result = _dispatch_mach_send_msg(result, (dispatch_object_t)object, 0LL, a3 & 0xFFFF0000 | 1);
  if ((_DWORD)result)
  {
    int v10 = object[12];
    uint64_t v11 = v10 & 0x3FFF;
    uint64_t v12 = 3LL;
    if (v10) {
      uint64_t v12 = 4LL;
    }
    if ((v10 & 0xFFFFC000) == 0xF8F80000)
    {
      int v10 = 0;
      uint64_t v13 = v11;
    }

    else
    {
      uint64_t v13 = v12;
    }
  }

  else
  {
    int v10 = 0;
    uint64_t v13 = 10LL;
  }

  *a5 = v13;
  *a6 = v10;
  return result;
}

unsigned int *dispatch_mach_reconnect(uint64_t a1, unsigned int a2, dispatch_object_t object)
{
  uint64_t v3 = (uint64_t)object;
  uint64_t v6 = *(void *)(a1 + 120);
  uint64_t v7 = (unsigned int *)(v6 + 88);
  do
    unsigned int v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  if (a2 - 1 <= 0xFFFFFFFD && object)
  {
    dispatch_retain(object);
    *(_DWORD *)(v3 + 48) = 0x40000;
    uint64_t v9 = v3 + 88;
    if (*(_DWORD *)(v3 + 72)) {
      uint64_t v9 = *(void *)v9;
    }
    int v10 = *(_DWORD *)(v9 + 8);
  }

  else
  {
    int v10 = 0;
    if (object == (dispatch_object_t)-1LL) {
      uint64_t v3 = -1LL;
    }
    else {
      uint64_t v3 = 0LL;
    }
  }

  *(_DWORD *)(v6 + 96) = v10;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v12 = *(void **)(StatusReg + 176);
  if (v12) {
    *(void *)(StatusReg + 176) = v12[2];
  }
  else {
    uint64_t v12 = _dispatch_continuation_alloc_from_heap();
  }
  v12[5] = v12;
  v12[6] = v3;
  v12[7] = a2;
  v12[3] = -1LL;
  v12[4] = _dispatch_mach_reconnect_invoke;
  *(_OWORD *)uint64_t v12 = xmmword_400E0;
  return _dispatch_mach_send_push((unsigned int *)a1, (unint64_t)v12, 0LL);
}

BOOL _dispatch_mach_reconnect_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 120);
  if (*(void *)(v4 + 16))
  {
    _dispatch_unote_unregister(*(void *)(a1 + 120), 5);
    *(_DWORD *)(*(void *)(a1 + 120) + 24LL) = 0;
  }

  int v5 = *(_DWORD *)(v4 + 92);
  if ((v5 + 1) >= 2)
  {
    uint64_t v6 = _dispatch_object_alloc(&OBJC_CLASS___OS_dispatch_mach_msg, 112LL);
    *(void *)(v6 + 16) = -1985229329LL;
    *(void *)(v6 + 24) = &off_65340;
    *(_DWORD *)(v6 + 72) = 0;
    *(void *)(v6 + 8_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = 24LL;
    *(_DWORD *)(v6 + 96) = v5;
    *(_DWORD *)(v6 + 48) = -117964793;
    _dispatch_mach_handle_or_push_received_msg(a1, (_DWORD *)v6, 0);
    *(_DWORD *)(v4 + 92) = 0;
  }

  uint64_t v7 = *(void *)(v4 + 48);
  if (v7)
  {
    _dispatch_mach_msg_not_sent(a1, v7, 0LL);
    *(void *)(v4 + 48) = 0LL;
  }

  *(_WORD *)(a1 + 118) &= ~1u;
  uint64_t v28 = 0LL;
  if ((*(_DWORD *)(a1 + 80) & 0x40000000) != 0) {
    char v8 = -112;
  }
  else {
    char v8 = -110;
  }
  uint64_t v9 = (unsigned int *)(v4 + 40);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned int v11 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v9))
  {
    if (!__stxr(v11, v9)) {
      goto LABEL_15;
    }
  }

  __clrex();
  _dispatch_unfair_lock_lock_slow(v4 + 40, 0x10000);
LABEL_15:
  uint64_t v13 = v28;
  uint64_t v28 = *(void *)(v4 + 56);
  uint64_t v14 = v28;
  *(void *)(v4 + 56) = v13;
  if (v14)
  {
    *(void *)(v14 + 72) = &v28;
    do
    {
      uint64_t v15 = *(void *)(v14 + 64);
      *(void *)(v14 + 72) = 0LL;
      _dispatch_mach_reply_unregister((_opaque_pthread_t *)a1, v14, v8);
      uint64_t v14 = v15;
    }

    while (v15);
    uint64_t v13 = *(void *)(v4 + 56);
  }

  unsigned int v16 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    unsigned int v17 = __ldxr(v9);
  while (__stlxr(0, v9));
  if (v17 == v16)
  {
    if (v13) {
      return v13 == 0;
    }
  }

  else
  {
    _dispatch_unfair_lock_unlock_slow(v4 + 40, v17);
    if (v13) {
      return v13 == 0;
    }
  }

  uint64_t v18 = *(void *)(StatusReg + 176);
  if (v18) {
    int v19 = *(_DWORD *)(v18 + 8) + 1;
  }
  else {
    int v19 = 1;
  }
  int v20 = *(_DWORD *)(a2 + 56);
  uint64_t v21 = *(void *)(a2 + 48);
  if (v19 > _dispatch_continuation_cache_limit)
  {
    _dispatch_continuation_free_to_cache_limit(a2);
  }

  else
  {
    *(void *)(a2 + 16) = v18;
    *(_DWORD *)(a2 + 8) = v19;
    *(void *)(StatusReg + 176) = a2;
  }

  __int16 v22 = *(_WORD *)(a1 + 118);
  if (v21 == -1)
  {
    uint64_t v21 = 0LL;
    __int16 v23 = v22 | 2;
    *(_WORD *)(a1 + 118) = v23;
    if ((v23 & 2) == 0) {
      goto LABEL_30;
    }
LABEL_32:
    if ((v20 - 1) <= 0xFFFFFFFD)
    {
      uint64_t v24 = _dispatch_object_alloc(&OBJC_CLASS___OS_dispatch_mach_msg, 112LL);
      *(void *)(v24 + 16) = -1985229329LL;
      *(void *)(v24 + 24) = &off_65340;
      *(_DWORD *)(v24 + 72) = 0;
      *(void *)(v24 + 8_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = 24LL;
      *(_DWORD *)(v24 + 96) = v20;
      *(_DWORD *)(v24 + 48) = -117964793;
      _dispatch_mach_handle_or_push_received_msg(a1, (_DWORD *)v24, 0);
    }

    if (v21) {
      _dispatch_mach_msg_not_sent(a1, v21, 0LL);
    }
    goto LABEL_36;
  }

  if ((v22 & 2) != 0) {
    goto LABEL_32;
  }
LABEL_30:
  *(_DWORD *)(v4 + 92) = v20;
  *(void *)(v4 + 48) = v21;
LABEL_36:
  char v25 = (unsigned int *)(v4 + 88);
  do
    unsigned int v26 = __ldxr(v25);
  while (__stxr(v26 - 1, v25));
  return v13 == 0;
}

unsigned int *_dispatch_mach_send_push(unsigned int *result, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)result + 15);
  BOOL v5 = *(_UNKNOWN **)a2 == &unk_58778 && *(void *)a2 > 0xFFFuLL;
  uint64_t v6 = 0xA000000000LL;
  if (v5) {
    uint64_t v6 = 0xB000000000LL;
  }
  *(void *)(a2 + 16) = 0LL;
  uint64_t v7 = (unint64_t *)(v4 + 72);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(void *)(StatusReg + 976) = v4 + 72;
  do
    unint64_t v9 = __ldxr(v7);
  while (__stlxr(a2, v7));
  if (v9) {
    int v10 = 2;
  }
  else {
    int v10 = 4;
  }
  unsigned int v11 = result + 2;
  do
    unsigned int v12 = __ldxr(v11);
  while (__stxr(v12 + v10, v11));
  unint64_t v13 = a3 << 32;
  if (v9)
  {
    *(void *)(v9 + 16) = a2;
    *(void *)(StatusReg + 976) = 0LL;
    uint64_t v14 = (unint64_t *)(v4 + 64);
    while (1)
    {
      unint64_t v15 = __ldxr(v14);
      unint64_t v16 = v13 | 0x2800000000LL | v15 & 0xFFFFFFF0FFFFFFFFLL;
      uint64_t v6 = 0LL;
      if ((v15 & 0x700000000LL) >= v13 || v15 == v16) {
        break;
      }
      if (!__stxr(v16, v14)) {
        goto LABEL_20;
      }
    }

    __clrex();
    unint64_t v16 = v15;
LABEL_20:
    uint64_t v18 = HIDWORD(v16) & 7;
    if (v15 >= 4)
    {
      if ((v15 & 0x700000000LL) < (v16 & 0x700000000LL))
      {
        if ((_DWORD)v18) {
          uint64_t v20 = (256LL << ((BYTE4(v16) & 7u) - 1)) | 0xFF;
        }
        else {
          uint64_t v20 = 255LL;
        }
        _pthread_workqueue_override_start_direct_check_owner(v15 | 3, v20, v4 + 64);
      }
    }

    else if ((v6 & 0x1000000000LL) != 0)
    {
      _dispatch_mach_push_send_barrier_drain((uint64_t)result, v18);
    }

    else
    {
      if (!v9 || *(_DWORD *)(v4 + 88) || (result[20] & 0x10000000) != 0)
      {
        int v19 = *(uint64_t (**)(void))(*(void *)result + 80LL);
        return (unsigned int *)v19();
      }

      if ((v15 & 0x1000000000LL) != 0)
      {
        int v19 = *(uint64_t (**)(void))(*(void *)result + 80LL);
        return (unsigned int *)v19();
      }
    }

    return (unsigned int *)_os_object_release_internal_n(v3, (_BYTE *)&dword_0 + 2);
  }

  *(void *)(v4 + 8_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = a2;
  *(void *)(StatusReg + 976) = 0LL;
  uint64_t v21 = (unint64_t *)(v4 + 64);
  do
  {
    unint64_t v15 = __ldxr(v21);
    if ((v15 & 0x700000000LL) >= v13) {
      unint64_t v22 = v15;
    }
    else {
      unint64_t v22 = v13 | v15 & 0xFFFFFF50FFFFFFFFLL | 0x800000000LL;
    }
    unint64_t v16 = v22 | v6;
  }

  while (__stlxr(v16, v21));
  if ((v15 & 0x8000000000LL) == 0 || *v11 == 0x7FFFFFFF) {
    goto LABEL_20;
  }
  do
    int v23 = __ldxr(v11);
  while (__stlxr(v23 - 2, v11));
  if (v23 > 2) {
    goto LABEL_20;
  }
  qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
  return result;
}

uint64_t dispatch_mach_get_checkin_port(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 80) & 0x10000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *(unsigned int *)(*(void *)(a1 + 120) + 96LL);
  }
}

BOOL dispatch_mach_can_handoff_4libxpc()
{
  unint64_t v0 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 184;
  while (1)
  {
    unint64_t v0 = *(void *)v0;
    if (!v0) {
      break;
    }
    if (*(char **)(v0 + 8) == "mach_msg")
    {
      uint64_t v1 = *(void *)(v0 + 16);
      if (v1) {
        return *(void *)(v1 + 56) == 0LL;
      }
      return 0LL;
    }
  }

  return 0LL;
}

uint64_t dispatch_mach_handoff_reply_f(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = _dispatch_mach_handoff_context(a2);
  char v8 = *(void **)(v7 + 16);
  uint64_t result = _dispatch_mach_handoff_set_wlh((uint64_t)v8, a1);
  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    int v10 = (unsigned int *)(a1 + 8);
    do
      int v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    if (v11 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

  *(void *)(v7 + 24) = a1;
  *char v8 = 260LL;
  v8[4] = a4;
  v8[5] = a3;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if ((*(void *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF) {
    unint64_t v13 = 4351LL;
  }
  else {
    unint64_t v13 = *(void *)(StatusReg + 32) & 0xFFFFFFLL;
  }
  uint64_t v14 = *(void *)(StatusReg + 224);
  if (v14) {
    uint64_t result = (uint64_t)os_retain(*(void **)(StatusReg + 224));
  }
  v8[3] = v14;
  if (v14 != -1)
  {
    if (v14) {
      uint64_t v14 = *(unsigned int *)(v14 + 32);
    }
    if (MEMORY[0xFFFFFC100])
    {
      uint64_t result = kdebug_trace(771817476LL, v14, v8, 0LL, 0LL);
      if (v13) {
        goto LABEL_15;
      }
LABEL_22:
      unsigned int v16 = 0;
      goto LABEL_19;
    }
  }

  if (!v13) {
    goto LABEL_22;
  }
LABEL_15:
  int v15 = *(_DWORD *)(a1 + 84);
  if ((v15 & 0x40000000) != 0 || (v15 & 0xFFF) == 0)
  {
    unsigned int v16 = __clz(__rbit32(v13 >> 8)) + 1;
  }

  else
  {
    unsigned int v16 = 0;
    unint64_t v13 = 0LL;
  }

unint64_t _dispatch_mach_handoff_context(unsigned int a1)
{
  unint64_t v2 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 184;
  do
  {
    unint64_t v2 = *(void *)v2;
    if (!v2) {
      goto LABEL_11;
    }
  }

  while (*(char **)(v2 + 8) != "mach_msg");
  uint64_t v3 = *(unsigned int **)(v2 + 16);
  if (!v3) {
LABEL_11:
  }
    _dispatch_mach_handoff_context_cold_1();
  if (*(void *)(*(void *)v3 + 40LL) == 515LL)
  {
    uint64_t v3 = (unsigned int *)_dispatch_calloc(1uLL, 0x50uLL);
    *(void *)(v2 + 16) = v3;
    v3[18] = 1;
  }

  else
  {
    uint64_t v4 = v3 + 18;
    do
      unsigned int v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  if (*((void *)v3 + 7)) {
    _dispatch_mach_handoff_context_cold_2();
  }
  *((void *)v3 + 7) = a1;
  return v2;
}

uint64_t _dispatch_mach_handoff_set_wlh(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = (uint64_t *)(a2 + 24);
  if (*(void *)(a2 + 24))
  {
    uint64_t v4 = a2;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      if ((*(_DWORD *)(v4 + 80) & 0x400000) != 0)
      {
        char v8 = (unsigned int *)(v4 + 80);
        unint64_t v9 = (unsigned int *)(v4 + 100);
        unsigned int v10 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        while (!__ldaxr(v9))
        {
          if (!__stxr(v10, v9)) {
            goto LABEL_12;
          }
        }

        __clrex();
        uint64_t result = _dispatch_unfair_lock_lock_slow(v4 + 100, 0x10000);
        do
LABEL_12:
          unsigned int v12 = __ldxr(v8);
        while (__stxr(v12 & 0xFFBFFFFF, v8));
        unsigned int v13 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        do
          unsigned int v14 = __ldxr(v9);
        while (__stlxr(0, v9));
        if (v14 != v13)
        {
          char v15 = v14;
          uint64_t result = _dispatch_unfair_lock_unlock_slow(v4 + 100, v14);
          if ((v15 & 2) != 0 && (*(void *)(StatusReg + 200) & 0xF0000LL) == 0) {
            *(void *)(StatusReg + 20_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = *(void *)(StatusReg + 200) & 0xFFF0FFFFLL | 0x10000;
          }
        }
      }

      if ((*(void *)(v4 + 56) & 0x2000000000LL) != 0) {
        break;
      }
      uint64_t v4 = *v3;
      uint64_t v6 = *v3;
      uint64_t v7 = *(void *)(v6 + 24);
      uint64_t v3 = (uint64_t *)(v6 + 24);
      if (!v7) {
        goto LABEL_19;
      }
    }
  }

  else
  {
LABEL_19:
    uint64_t v4 = 0LL;
  }

  *(void *)(v2 + 64) = v4;
  return result;
}

uint64_t *dispatch_mach_handoff_reply(unsigned int *a1, unsigned int a2, void *a3)
{
  unint64_t v5 = _dispatch_mach_handoff_context(a2);
  uint64_t v6 = *(uint64_t **)(v5 + 16);
  _dispatch_mach_handoff_set_wlh((uint64_t)v6, (uint64_t)a1);
  if (a1[2] != 0x7FFFFFFF)
  {
    uint64_t v7 = a1 + 2;
    do
      int v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    if (v8 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

  *(void *)(v5 + 24) = a1;
  unint64_t v9 = _dispatch_Block_copy(a3);
  unsigned int v10 = (void (*)(uint64_t))a3[2];
  uint64_t *v6 = 276LL;
  if (v10 == ___dispatch_block_create_block_invoke)
  {
    v6[5] = (uint64_t)v9;
    uint64_t result = _dispatch_continuation_init_slow(v6, a1, 0);
    goto LABEL_21;
  }

  v6[4] = (uint64_t)_dispatch_call_block_and_release;
  v6[5] = (uint64_t)v9;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if ((*(void *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF) {
    unint64_t v12 = 4351LL;
  }
  else {
    unint64_t v12 = *(void *)(StatusReg + 32) & 0xFFFFFFLL;
  }
  uint64_t v13 = *(void *)(StatusReg + 224);
  if (v13) {
    os_retain(*(void **)(StatusReg + 224));
  }
  v6[3] = v13;
  if (v13 == -1) {
    goto LABEL_15;
  }
  if (v13) {
    uint64_t v13 = *(unsigned int *)(v13 + 32);
  }
  if (MEMORY[0xFFFFFC100])
  {
    kdebug_trace(771817476LL, v13, v6, 0LL, 0LL);
    if (v12) {
      goto LABEL_16;
    }
  }

  else
  {
LABEL_15:
    if (v12)
    {
LABEL_16:
      unsigned int v14 = a1[21];
      if ((v14 & 0x40000000) != 0 || (v14 & 0xFFF) == 0)
      {
        uint64_t result = (uint64_t *)(__clz(__rbit32(v12 >> 8)) + 1);
      }

      else
      {
        uint64_t result = 0LL;
        unint64_t v12 = 0LL;
      }

      goto LABEL_20;
    }
  }

  uint64_t result = 0LL;
LABEL_20:
  v6[1] = v12;
LABEL_21:
  *(_DWORD *)(v5 + 32) = (_DWORD)result;
  v6[6] = *v6;
  uint64_t *v6 = (uint64_t)&unk_58928;
  return result;
}

double _dispatch_mach_ipc_handoff_invoke(char *a1, uint64_t a2, int a3)
{
  v29[1] = "mach_msg";
  v29[2] = a1;
  uint64_t v30 = 0LL;
  int v31 = 0;
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v6 = (_opaque_pthread_t *)StatusReg[20];
  uint64_t v7 = *((void *)a1 + 6);
  int v8 = (unint64_t *)(a1 + 64);
  unsigned int v9 = *((_DWORD *)a1 + 14);
  do
    uint64_t v10 = __ldxr(v8);
  while (__stxr(0LL, v8));
  if (v10)
  {
    if ((v10 & 1) != 0) {
      uint64_t v10 = ~v10;
    }
    else {
      _dispatch_sync_ipc_handoff_begin(v10, v9, (uint64_t)v8);
    }
  }

  *((void *)a1 + 2) = -1985229329LL;
  *((void *)a1 + 7) = 0LL;
  v29[0] = StatusReg[23];
  StatusReg[23] = v29;
  int v11 = (unsigned int *)*((void *)a1 + 3);
  *((void *)a1 + 3) = -1LL;
  if (v11 != (unsigned int *)-1LL && (unsigned int *)((char *)v11 + 1) != 0LL)
  {
    uint64_t v13 = v11;
    if (v11) {
      uint64_t v13 = (unsigned int *)v11[8];
    }
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace(771817480LL, v13, a1, 0LL, 0LL);
    }
  }

  uint64_t v14 = *((void *)a1 + 1);
  if (v14 == -1)
  {
    unint64_t v17 = 0LL;
  }

  else
  {
    uint64_t v15 = StatusReg[25];
    else {
      uint64_t v16 = 0LL;
    }
    unint64_t v17 = v16 & 0xFFFFFFFFFFFFFF00LL | StatusReg[25];
    if ((v14 & 0xFFFFFF) != 0)
    {
      if ((v14 & 0xFFFFFFuLL) >= (v16 & 0xFFFFFF00)
        && ((v15 & 0x44000000) != 0 || (*((void *)a1 + 1) & 0x10000000LL) != 0))
      {
        unint64_t v17 = v14 & 0xFFFFFF;
      }
    }

    else if ((unsigned __int16)v15 >> 12)
    {
      unint64_t v17 = (256LL << (((unsigned __int16)v15 >> 12) - 1)) | 0xFF;
    }
  }

  unint64_t v19 = v17 & 0xFFFFFFFF02FFFFFFLL;
  uint64_t v20 = StatusReg[4];
  if ((v20 & 0x1000000) != 0)
  {
    if (v19) {
      goto LABEL_67;
    }
    unint64_t v19 = v20 & 0xFFFFFFFFFEFFFFFFLL;
  }

  else if (v19 == (v20 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_30;
  }

  if (v19)
  {
LABEL_67:
    _dispatch_set_priority_and_voucher_slow(v19, v11, 6);
    if ((v7 & 0x200) != 0) {
      goto LABEL_38;
    }
    goto LABEL_35;
  }

void *_dispatch_mach_ipc_handoff_async(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 24);
  uint64_t v4 = *(void *)(v2 + 56);
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = *(unsigned int *)(a1 + 32);
  if ((*(_BYTE *)(v2 + 49) & 2) == 0)
  {
    if (MEMORY[0xFFFFFC100]) {
      _dispatch_trace_item_push_internal(*(_opaque_pthread_t **)(a1 + 24), (uint64_t *)v2);
    }
    _dispatch_introspection_queue_item_enqueue(v3, (dispatch_object_s *)v2);
  }

  (*(void (**)(dispatch_queue_s *, uint64_t, uint64_t))(*(void *)v3 + 88LL))(v3, v2, v6);
  if (v5)
  {
    int v8 = (unint64_t *)(v2 + 64);
    _dispatch_sync_ipc_handoff_begin(v5, v4, v2 + 64);
    while (1)
    {
      unint64_t v9 = __ldxr(v8);
      if (v9 != v5) {
        break;
      }
      if (!__stxr(~v5, v8)) {
        goto LABEL_11;
      }
    }

    __clrex();
  }

void _dispatch_mach_msg_invoke(_DWORD *a1, uint64_t a2, int a3)
{
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v6 = StatusReg[20];
  uint64_t v7 = (_OWORD *)StatusReg[21];
  *((_OWORD *)StatusReg + 1_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = *v7;
  unsigned int v8 = a1[12];
  unsigned int v9 = v8 & 0xFFFFC000;
  uint64_t v10 = 3LL;
  if (v8) {
    uint64_t v10 = 4LL;
  }
  if (v9 == -117964800) {
    uint64_t v11 = 0LL;
  }
  else {
    uint64_t v11 = v8;
  }
  if (v9 == -117964800) {
    uint64_t v12 = v8 & 0x3FFF;
  }
  else {
    uint64_t v12 = v10;
  }
  v25[2] = a1;
  uint64_t v26 = 0LL;
  int v27 = 0;
  v25[0] = StatusReg[23];
  v25[1] = "mach_msg";
  StatusReg[23] = v25;
  if (MEMORY[0xFFFFFC100]) {
    _dispatch_trace_item_pop_internal((_opaque_pthread_t *)v6, (uint64_t *)a1);
  }
  _dispatch_introspection_queue_item_dequeue((dispatch_queue_s *)v6, (dispatch_object_s *)a1);
  uint64_t v13 = *(void *)(v6 + 88);
  *((void *)a1 + 2) = -1985229329LL;
  uint64_t v14 = (unsigned int *)*((void *)a1 + 8);
  if (v14 != (unsigned int *)-1LL)
  {
    uint64_t v15 = *((void *)a1 + 8);
    if (v14) {
      uint64_t v15 = v14[8];
    }
    if (MEMORY[0xFFFFFC100])
    {
      kdebug_trace(771817488LL, v15, a1, 0LL, 0LL);
      uint64_t v14 = (unsigned int *)*((void *)a1 + 8);
    }
  }

  uint64_t v16 = *((void *)a1 + 7);
  if (v16 == -1)
  {
    unint64_t v19 = 0LL;
  }

  else
  {
    uint64_t v17 = StatusReg[25];
    else {
      uint64_t v18 = 0LL;
    }
    unint64_t v19 = v16 & 0xFFFFFF;
    if (v19)
    {
    }

    else if ((unsigned __int16)v17 >> 12)
    {
      unint64_t v19 = (256LL << (((unsigned __int16)v17 >> 12) - 1)) | 0xFF;
    }

    else
    {
      unint64_t v19 = v18 & 0xFFFFFFFFFFFFFF00LL | StatusReg[25];
    }
  }

  unint64_t v20 = v19 & 0xFFFFFFFF02FFFFFFLL;
  uint64_t v21 = StatusReg[4];
  if ((v21 & 0x1000000) != 0)
  {
    if (v20)
    {
LABEL_59:
      _dispatch_set_priority_and_voucher_slow(v20, v14, 7);
      goto LABEL_31;
    }

    unint64_t v20 = v21 & 0xFFFFFFFFFEFFFFFFLL;
  }

  else if (v20 == (v21 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_27;
  }

  if (v20) {
    goto LABEL_59;
  }
LABEL_27:
  if ((unsigned int *)StatusReg[28] != v14)
  {
    unint64_t v20 = 0LL;
    goto LABEL_59;
  }

  if (v14) {
    os_release(v14);
  }
LABEL_31:
  unint64_t v22 = 0LL;
  *((void *)a1 + 8) = 0LL;
  if ((a3 & 0x1000000) != 0) {
    unint64_t v22 = objc_autoreleasePoolPush();
  }
  if ((a3 & 4) != 0)
  {
    _dispatch_client_callout3( *(void *)(v13 + 48),  v12,  (uint64_t)a1,  *(uint64_t (**)(void))((char *)&dword_18 + (void)_dispatch_mach_xpc_hooks));
    if (!v22) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }

  if ((*(_WORD *)(v6 + 116) & 4) == 0) {
    _dispatch_mach_connect_invoke(v6);
  }
  if (v12 != 2 || (*(_DWORD *)(v6 + 80) & 0x10000000) == 0)
  {
    _dispatch_client_callout4(*(void *)(v13 + 48), v12, (uint64_t)a1, v11, *(uint64_t (**)(void))(v13 + 40));
    if (!v22) {
      goto LABEL_42;
    }
LABEL_41:
    objc_autoreleasePoolPop(v22);
    goto LABEL_42;
  }

  uint64_t v24 = (mach_msg_header_t *)(a1 + 22);
  if (a1[18]) {
    uint64_t v24 = *(mach_msg_header_t **)&v24->msgh_bits;
  }
  mach_msg_destroy(v24);
  if (v22) {
    goto LABEL_41;
  }
LABEL_42:
  if (MEMORY[0xFFFFFC100]) {
    kdebug_trace(772079660LL, a1, 0LL, 0LL, 0LL);
  }
  _dispatch_introspection_queue_item_complete((dispatch_object_s *)a1);
  dispatch_release((dispatch_object_t)a1);
  uint64_t v23 = v26;
  StatusReg[23] = v25[0];
  if (v23) {
    _dispatch_mach_ipc_handoff_async((uint64_t)v25);
  }
  StatusReg[20] = v6;
  StatusReg[21] = v7;
}

void _dispatch_mach_barrier_invoke(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(*(void *)a1 + 40LL);
  if (v7 == 1024)
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v31 = *(void *)(StatusReg + 160);
    uint64_t v32 = *(_OWORD **)(StatusReg + 168);
    *(_OWORD *)(StatusReg + 16_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = *v32;
  }

  uint64_t v9 = *(void *)(v5 + 88);
  if ((*(_WORD *)(v5 + 116) & 4) == 0)
  {
    if ((a3 & 0x1000000) != 0)
    {
      uint64_t v30 = objc_autoreleasePoolPush();
      _dispatch_mach_connect_invoke(v5);
      objc_autoreleasePoolPop(v30);
    }

    else
    {
      _dispatch_mach_connect_invoke(v5);
    }
  }

  uint64_t v10 = *(unsigned int **)(a1 + 24);
  *(void *)(a1 + 24) = -1LL;
  if (v10 != (unsigned int *)-1LL && (unsigned int *)((char *)v10 + 1) != 0LL)
  {
    uint64_t v12 = v10;
    if (v10) {
      uint64_t v12 = (unsigned int *)v10[8];
    }
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace(771817480LL, v12, a1, 0LL, 0LL);
    }
  }

  uint64_t v13 = *(void *)(a1 + 8);
  if (v13 == -1)
  {
    unint64_t v16 = 0LL;
  }

  else
  {
    uint64_t v14 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 200);
    else {
      uint64_t v15 = 0LL;
    }
    unint64_t v16 = v15 & 0xFFFFFFFFFFFFFF00LL | v14;
    unint64_t v17 = v13 & 0xFFFFFF;
    if ((v13 & 0xFFFFFF) != 0)
    {
      if (v17 >= (v15 & 0xFFFFFF00))
      {
        uint64_t v18 = v13 & 0x10000000;
        if ((v14 & 0x44000000) != 0 || v18 != 0) {
          unint64_t v16 = v17;
        }
      }
    }

    else if ((unsigned __int16)v14 >> 12)
    {
      unint64_t v16 = (256LL << (((unsigned __int16)v14 >> 12) - 1)) | 0xFF;
    }
  }

  unint64_t v20 = v16 & 0xFFFFFFFF02FFFFFFLL;
  uint64_t v21 = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v22 = v21[4];
  if ((v22 & 0x1000000) != 0)
  {
    if (v20) {
      goto LABEL_66;
    }
    unint64_t v20 = v22 & 0xFFFFFFFFFEFFFFFFLL;
  }

  else if (v20 == (v22 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_27;
  }

  if (v20)
  {
LABEL_66:
    _dispatch_set_priority_and_voucher_slow(v20, v10, 6);
    if ((v6 & 0x200) != 0) {
      goto LABEL_35;
    }
    goto LABEL_32;
  }

LABEL_27:
  if ((unsigned int *)v21[28] != v10)
  {
    unint64_t v20 = 0LL;
    goto LABEL_66;
  }

  if (v10) {
    os_release(v10);
  }
LABEL_31:
  if ((v6 & 0x200) != 0) {
    goto LABEL_35;
  }
LABEL_32:
  if (MEMORY[0xFFFFFC100]) {
    _dispatch_trace_item_pop_internal((_opaque_pthread_t *)v5, (uint64_t *)a1);
  }
  _dispatch_introspection_queue_item_dequeue((dispatch_queue_s *)v5, (dispatch_object_s *)a1);
LABEL_35:
  uint64_t v23 = v21[22];
  if (v23) {
    int v24 = *(_DWORD *)(v23 + 8) + 1;
  }
  else {
    int v24 = 1;
  }
  uint64_t v25 = a1;
  if (v24 <= _dispatch_continuation_cache_limit)
  {
    uint64_t v25 = 0LL;
    *(void *)(a1 + 16) = v23;
    *(_DWORD *)(a1 + 8) = v24;
    v21[22] = a1;
  }

  if ((a3 & 0x1000000) != 0) {
    uint64_t v26 = objc_autoreleasePoolPush();
  }
  else {
    uint64_t v26 = 0LL;
  }
  unsigned int v28 = *(void (**)(void (**)(void)))(a1 + 32);
  int v27 = *(void **)(a1 + 40);
  uint64_t v29 = (void (__cdecl *)(void *))v28;
  if (v27)
  {
    uint64_t v29 = *(void (__cdecl **)(void *))(a1 + 32);
    if (v28 == _dispatch_call_block_and_release) {
      uint64_t v29 = (void (__cdecl *)(void *))v27[2];
    }
  }

  _dispatch_introspection_callout_entry(*(void **)(a1 + 40), v29);
  _dispatch_client_callout((uint64_t)v27, (uint64_t (*)(void))v28);
  _dispatch_introspection_callout_return(v27, v29);
  _dispatch_client_callout4(*(void *)(v9 + 48), 6LL, 0LL, 0LL, *(uint64_t (**)(void))(v9 + 40));
  if (v26) {
    objc_autoreleasePoolPop(v26);
  }
  if ((v6 & 0x200) == 0)
  {
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace(772079660LL, a1, 0LL, 0LL, 0LL);
    }
    _dispatch_introspection_queue_item_complete((dispatch_object_s *)a1);
  }

  if (v25) {
    _dispatch_continuation_free_to_cache_limit(v25);
  }
  if (v7 == 1024)
  {
    v21[20] = v31;
    v21[21] = v32;
  }

  uint64_t v77 = v21;
  int v24 = a4;
  uint64_t v80 = v12;
  uint64_t v25 = v11;
  char v84 = v7;
  uint64_t v26 = a5;
  mach_voucher = _voucher_get_mach_voucher(v9);
LABEL_31:
  unint64_t v16 = 0;
  if (mach_voucher)
  {
    unsigned int v28 = *v8;
    a5 = v26;
    uint64_t v11 = v25;
    LODWORD(a4) = v24;
    uint64_t v21 = v77;
    if ((*v8 & 0x1F0000) == 0)
    {
      v8[4] = mach_voucher;
      *unsigned int v8 = v28 | 0x130000;
      unint64_t v16 = 1;
    }

    uint64_t v7 = v84;
    uint64_t v12 = v80;
  }

  else
  {
    a5 = v26;
    uint64_t v7 = v84;
    uint64_t v11 = v25;
    uint64_t v12 = v80;
    LODWORD(a4) = v24;
    uint64_t v21 = v77;
  }

uint64_t _dispatch_mach_connect_invoke(uint64_t a1)
{
  uint64_t result = _dispatch_client_callout4( *(void *)(*(void *)(a1 + 88) + 48LL),  1LL,  0LL,  0LL,  *(uint64_t (**)(void))(*(void *)(a1 + 88) + 40LL));
  *(_WORD *)(a1 + 116) |= 4u;
  return result;
}

unsigned int *dispatch_mach_send_barrier_f(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v7 = *(uint64_t **)(StatusReg + 176);
  if (v7) {
    *(void *)(StatusReg + 176) = v7[2];
  }
  else {
    uint64_t v7 = (uint64_t *)_dispatch_continuation_alloc_from_heap();
  }
  *uint64_t v7 = 260LL;
  v7[4] = a3;
  v7[5] = a2;
  if ((*(void *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF) {
    uint64_t v8 = 4351LL;
  }
  else {
    uint64_t v8 = *(void *)(StatusReg + 32) & 0xFFFFFFLL;
  }
  uint64_t v9 = *(void *)(StatusReg + 224);
  if (v9) {
    os_retain(*(void **)(StatusReg + 224));
  }
  v7[3] = v9;
  if (v9 != -1)
  {
    if (v9) {
      uint64_t v9 = *(unsigned int *)(v9 + 32);
    }
    if (MEMORY[0xFFFFFC100])
    {
      kdebug_trace(771817476LL, v9, v7, 0LL, 0LL);
      if (v8) {
        goto LABEL_13;
      }
LABEL_26:
      uint64_t v11 = 0LL;
      goto LABEL_18;
    }
  }

  if (!v8) {
    goto LABEL_26;
  }
LABEL_13:
  int v10 = (*(_DWORD *)(a1 + 84) >> 30) & 1;
  if ((*(_DWORD *)(a1 + 84) & 0xFFF) == 0) {
    int v10 = 1;
  }
  if (v10) {
    uint64_t v11 = v8;
  }
  else {
    uint64_t v11 = 0LL;
  }
LABEL_18:
  v7[6] = *v7;
  v7[7] = a1;
  *uint64_t v7 = (uint64_t)&unk_58778;
  v7[1] = v11;
  if (MEMORY[0xFFFFFC100]) {
    _dispatch_trace_item_push_internal((_opaque_pthread_t *)a1, v7);
  }
  _dispatch_introspection_queue_item_enqueue((dispatch_queue_s *)a1, (dispatch_object_s *)v7);
  unsigned int v12 = __clz(__rbit32((*((_DWORD *)v7 + 2) >> 8) & 0x3FFF));
  if (((*((_DWORD *)v7 + 2) >> 8) & 0x3FFF) != 0) {
    uint64_t v13 = v12 + 1;
  }
  else {
    uint64_t v13 = 0LL;
  }
  return _dispatch_mach_send_push((unsigned int *)a1, (unint64_t)v7, v13);
}

unsigned int *dispatch_mach_send_barrier(unsigned int *a1, void (**aBlock)(uint64_t a1))
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v5 = *(uint64_t **)(StatusReg + 176);
  if (v5) {
    *(void *)(StatusReg + 176) = v5[2];
  }
  else {
    uint64_t v5 = (uint64_t *)_dispatch_continuation_alloc_from_heap();
  }
  uint64_t v6 = _dispatch_Block_copy(aBlock);
  uint64_t v7 = aBlock[2];
  *uint64_t v5 = 276LL;
  if (v7 != ___dispatch_block_create_block_invoke)
  {
    v5[4] = (uint64_t)_dispatch_call_block_and_release;
    v5[5] = (uint64_t)v6;
    if ((*(void *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF) {
      uint64_t v8 = 4351LL;
    }
    else {
      uint64_t v8 = *(void *)(StatusReg + 32) & 0xFFFFFFLL;
    }
    uint64_t v9 = *(void *)(StatusReg + 224);
    if (v9) {
      os_retain(*(void **)(StatusReg + 224));
    }
    v5[3] = v9;
    if (v9 == -1) {
      goto LABEL_13;
    }
    if (v9) {
      uint64_t v9 = *(unsigned int *)(v9 + 32);
    }
    if (MEMORY[0xFFFFFC100])
    {
      kdebug_trace(771817476LL, v9, v5, 0LL, 0LL);
      if (v8) {
        goto LABEL_14;
      }
    }

    else
    {
LABEL_13:
      if (v8)
      {
LABEL_14:
        int v10 = (a1[21] >> 30) & 1;
        if ((a1[21] & 0xFFF) == 0) {
          int v10 = 1;
        }
        if (v10) {
          uint64_t v11 = v8;
        }
        else {
          uint64_t v11 = 0LL;
        }
        goto LABEL_19;
      }
    }

    uint64_t v11 = 0LL;
LABEL_19:
    v5[1] = v11;
    goto LABEL_20;
  }

  v5[5] = (uint64_t)v6;
  _dispatch_continuation_init_slow(v5, a1, 0);
LABEL_20:
  v5[6] = *v5;
  v5[7] = (uint64_t)a1;
  *uint64_t v5 = (uint64_t)&unk_58778;
  if (MEMORY[0xFFFFFC100]) {
    _dispatch_trace_item_push_internal((_opaque_pthread_t *)a1, v5);
  }
  _dispatch_introspection_queue_item_enqueue((dispatch_queue_s *)a1, (dispatch_object_s *)v5);
  unsigned int v12 = __clz(__rbit32((*((_DWORD *)v5 + 2) >> 8) & 0x3FFF));
  if (((*((_DWORD *)v5 + 2) >> 8) & 0x3FFF) != 0) {
    uint64_t v13 = v12 + 1;
  }
  else {
    uint64_t v13 = 0LL;
  }
  return _dispatch_mach_send_push(a1, (unint64_t)v5, v13);
}

uint64_t dispatch_mach_receive_barrier_f(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v7 = *(uint64_t **)(StatusReg + 176);
  if (v7) {
    *(void *)(StatusReg + 176) = v7[2];
  }
  else {
    uint64_t v7 = (uint64_t *)_dispatch_continuation_alloc_from_heap();
  }
  *uint64_t v7 = 260LL;
  v7[4] = a3;
  v7[5] = a2;
  if ((*(void *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF) {
    unint64_t v8 = 4351LL;
  }
  else {
    unint64_t v8 = *(void *)(StatusReg + 32) & 0xFFFFFFLL;
  }
  uint64_t v9 = *(void *)(StatusReg + 224);
  if (v9) {
    os_retain(*(void **)(StatusReg + 224));
  }
  v7[3] = v9;
  if (v9 == -1) {
    goto LABEL_12;
  }
  if (v9) {
    uint64_t v9 = *(unsigned int *)(v9 + 32);
  }
  if (MEMORY[0xFFFFFC100])
  {
    kdebug_trace(771817476LL, v9, v7, 0LL, 0LL);
    if (v8) {
      goto LABEL_13;
    }
  }

  else
  {
LABEL_12:
    if (v8)
    {
LABEL_13:
      int v10 = *(_DWORD *)(a1 + 84);
      if ((v10 & 0x40000000) != 0 || (v10 & 0xFFF) == 0)
      {
        uint64_t v11 = __clz(__rbit32(v8 >> 8)) + 1;
      }

      else
      {
        uint64_t v11 = 0LL;
        unint64_t v8 = 0LL;
      }

      goto LABEL_17;
    }
  }

  uint64_t v11 = 0LL;
LABEL_17:
  v7[6] = *v7;
  v7[7] = a1;
  *uint64_t v7 = (uint64_t)&unk_587C0;
  v7[1] = v8;
  if (MEMORY[0xFFFFFC100]) {
    _dispatch_trace_item_push_internal((_opaque_pthread_t *)a1, v7);
  }
  _dispatch_introspection_queue_item_enqueue((dispatch_queue_s *)a1, (dispatch_object_s *)v7);
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 88LL))(a1, v7, v11);
}

uint64_t dispatch_mach_receive_barrier(unsigned int *a1, void (**aBlock)(uint64_t a1))
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v5 = *(uint64_t **)(StatusReg + 176);
  if (v5) {
    *(void *)(StatusReg + 176) = v5[2];
  }
  else {
    uint64_t v5 = (uint64_t *)_dispatch_continuation_alloc_from_heap();
  }
  uint64_t v6 = _dispatch_Block_copy(aBlock);
  uint64_t v7 = aBlock[2];
  *uint64_t v5 = 276LL;
  if (v7 != ___dispatch_block_create_block_invoke)
  {
    v5[4] = (uint64_t)_dispatch_call_block_and_release;
    v5[5] = (uint64_t)v6;
    if ((*(void *)(StatusReg + 32) & 0xFFFFFFuLL) >= 0x10FF) {
      unint64_t v8 = 4351LL;
    }
    else {
      unint64_t v8 = *(void *)(StatusReg + 32) & 0xFFFFFFLL;
    }
    uint64_t v9 = *(void *)(StatusReg + 224);
    if (v9) {
      os_retain(*(void **)(StatusReg + 224));
    }
    v5[3] = v9;
    if (v9 == -1) {
      goto LABEL_13;
    }
    if (v9) {
      uint64_t v9 = *(unsigned int *)(v9 + 32);
    }
    if (MEMORY[0xFFFFFC100])
    {
      kdebug_trace(771817476LL, v9, v5, 0LL, 0LL);
      if (v8) {
        goto LABEL_14;
      }
    }

    else
    {
LABEL_13:
      if (v8)
      {
LABEL_14:
        unsigned int v10 = a1[21];
        if ((v10 & 0x40000000) != 0 || (v10 & 0xFFF) == 0)
        {
          inited = (uint64_t *)(__clz(__rbit32(v8 >> 8)) + 1);
        }

        else
        {
          inited = 0LL;
          unint64_t v8 = 0LL;
        }

        goto LABEL_18;
      }
    }

    inited = 0LL;
LABEL_18:
    v5[1] = v8;
    goto LABEL_19;
  }

  v5[5] = (uint64_t)v6;
  inited = _dispatch_continuation_init_slow(v5, a1, 0);
LABEL_19:
  v5[6] = *v5;
  v5[7] = (uint64_t)a1;
  *uint64_t v5 = (uint64_t)&unk_587C0;
  if (MEMORY[0xFFFFFC100]) {
    _dispatch_trace_item_push_internal((_opaque_pthread_t *)a1, v5);
  }
  _dispatch_introspection_queue_item_enqueue((dispatch_queue_s *)a1, (dispatch_object_s *)v5);
  return (*(uint64_t (**)(unsigned int *, uint64_t *, uint64_t *))(*(void *)a1 + 88LL))(a1, v5, inited);
}

unsigned int *dispatch_mach_cancel(unsigned int *result, const char *a2)
{
  uint64_t v2 = result;
  if (result[2] == 0x7FFFFFFF) {
    goto LABEL_5;
  }
  uint64_t v3 = result + 2;
  do
    int v4 = __ldxr(v3);
  while (__stxr(v4 + 1, v3));
  if (v4 > 0)
  {
LABEL_5:
    uint64_t v5 = result + 20;
    do
      unsigned int v6 = __ldxr(v5);
    while (__stxr(v6 | 0x10000000, v5));
    if ((v6 & 0x10000000) == 0) {
      dispatch_mach_reconnect((uint64_t)result, 0, (dispatch_object_t)0xFFFFFFFFFFFFFFFFLL);
    }
    return (unsigned int *)_os_object_release_internal(v2, a2);
  }

  else
  {
    qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
    __break(1u);
  }

  return result;
}

uint64_t _dispatch_mach_activate(uint64_t a1)
{
  uint64_t result = _dispatch_lane_activate(a1);
  if ((*(_WORD *)(a1 + 116) & 1) == 0)
  {
    uint64_t result = _dispatch_queue_compute_priority_and_wlh(a1, &v3);
    if ((_DWORD)result) {
      return _dispatch_mach_install(a1, v3, result);
    }
  }

  return result;
}

uint64_t _dispatch_mach_install(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4 = *(_DWORD *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 88);
  __int16 v6 = *(_WORD *)(a1 + 116);
  *(_WORD *)(a1 + 116) = v6 | 1;
  uint64_t result = *(unsigned int *)(*(void *)(a1 + 120) + 88LL);
  if ((result & 0x80000000) != 0) {
    _dispatch_mach_install_cold_1(result);
  }
  if (*(_DWORD *)(a1 + 84))
  {
    if ((v4 & 0x10000000) != 0) {
      return result;
    }
  }

  else
  {
    *(_DWORD *)(a1 + 84) = a3;
    if ((v4 & 0x10000000) != 0) {
      return result;
    }
  }

  if ((v6 & 0x10) != 0)
  {
    uint64_t result = (*(uint64_t (**)(void))((char *)&stru_20.cmd + (void)_dispatch_mach_xpc_hooks))(*(void *)(v5 + 48));
    if ((_DWORD)result)
    {
      unsigned int v10 = _dispatch_unote_create_with_handle((uint64_t)&_dispatch_xpc_type_sigterm, 15LL, 0LL);
      *((void *)v10 + _dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = ~a1;
      *(void *)(a1 + 128) = v10;
      uint64_t result = _dispatch_unote_register((uint64_t)v10, a2, a3);
    }
  }

  if (*(_DWORD *)(v5 + 24)) {
    return _dispatch_unote_register(v5, a2, a3);
  }
  return result;
}

void _dispatch_mach_invoke(void *a1, void *a2, int a3)
{
  uint64_t v70 = 0LL;
  if ((a3 & 3) == 0)
  {
    a1[2] = -1985229329LL;
    __int16 v6 = *(_opaque_pthread_t **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 160);
    if (MEMORY[0xFFFFFC100]) {
      _dispatch_trace_item_pop_internal(v6, a1);
    }
    _dispatch_introspection_queue_item_dequeue((dispatch_queue_s *)v6, (dispatch_object_s *)a1);
  }

  uint64_t v68 = (uint64_t)a2;
  if ((a3 & 2) != 0)
  {
    uint64_t v70 = 0x40020000000001LL;
    int v7 = a3 & 0x40000;
    goto LABEL_7;
  }

  unint64_t v46 = ((unint64_t)*((unsigned __int16 *)a1 + 40) << 41) - 0x20000000000LL;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v48 = *(void *)(StatusReg + 24) & 0xFFFFFFFCLL;
  int v7 = a3 & 0x40000;
  unint64_t v49 = 0xFFE00000FFFFFFFCLL;
  if ((a3 & 0x40000) != 0)
  {
    uint64_t v50 = 0x4000000000LL;
  }

  else
  {
    unint64_t v49 = 0xFFE00040FFFFFFFCLL;
    uint64_t v50 = 1LL;
  }

  if ((a3 & 1) != 0) {
    unint64_t v51 = 0xFFE00040FFFFFFFCLL;
  }
  else {
    unint64_t v51 = v49;
  }
  unsigned int v52 = *(_DWORD *)(StatusReg + 200);
  unsigned int v53 = (v52 >> 8) & 0xF;
  unsigned int v54 = (unsigned __int16)v52 >> 12;
  unsigned int v55 = HIWORD(v52) & 0xF;
  if (v53 <= v54) {
    unsigned int v53 = v54;
  }
  if (v53 > v55) {
    unsigned int v55 = v53;
  }
  uint64_t v56 = a1 + 7;
  do
  {
    while (1)
    {
      unint64_t v57 = __ldaxr(v56);
      if ((v57 & v51) != 0) {
        break;
      }
      if ((v57 & 0x1000000000LL) == 0 || (uint64_t v58 = HIDWORD(v57) & 7, v58 <= v55))
      {
        uint64_t v59 = (v57 >> 40) & 1;
        if (!((v46 + v57) >> 53)) {
          LODWORD(v59) = 1;
        }
        if ((_DWORD)v59) {
          uint64_t v60 = 0x60000000000000LL;
        }
        else {
          uint64_t v60 = 0x20000000000000LL;
        }
        unint64_t v61 = v48 | v57 & 0x7700000001LL | v60;
        goto LABEL_160;
      }

      __clrex();
      unint64_t v67 = v46;
      _pthread_workqueue_override_start_direct( *(unsigned int *)(StatusReg + 24),  (256LL << ((BYTE4(v57) & 7u) - 1)) | 0xFF);
      unint64_t v46 = v67;
      unsigned int v62 = *(_DWORD *)(StatusReg + 200);
      unsigned int v55 = v58;
      if ((HIWORD(v62) & 0xF) < v58)
      {
        *(void *)(StatusReg + 20_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v62 & 0xFFF0FFFF | ((_DWORD)v58 << 16);
        unsigned int v55 = v58;
      }
    }

    if ((a3 & 1) != 0)
    {
      __clrex();
      goto LABEL_176;
    }

    unint64_t v61 = v57 ^ v50;
LABEL_160:
    ;
  }

  while (__stxr(v61, v56));
  if ((v57 & v51) != 0)
  {
LABEL_176:
    uint64_t v29 = 0LL;
    uint64_t v70 = 0LL;
    a2 = (void *)v68;
    goto LABEL_131;
  }

  uint64_t v63 = 0x60000000000000LL;
  if ((a3 & 1) == 0) {
    uint64_t v63 = v50 | 0x60000000000000LL;
  }
  uint64_t v70 = (v61 & v63) - (v57 & 0x3FFE0000000000LL);
  a2 = (void *)v68;
  if (!v70)
  {
    uint64_t v29 = 0LL;
    goto LABEL_131;
  }

LABEL_80:
    if (*(void *)(v22 + 72)) {
      uint64_t v29 = -1LL;
    }
    else {
      uint64_t v29 = 0LL;
    }
    if ((v31 & 0x10000000) == 0) {
      goto LABEL_87;
    }
LABEL_73:
    if ((v31 & 0x80000000) == 0)
    {
      _dispatch_mach_cancel((uint64_t)a1);
      if ((v34 & 1) == 0)
      {
        if (!v29) {
          uint64_t v29 = -1LL;
        }
        goto LABEL_87;
      }
    }

    if ((*((_WORD *)a1 + 58) & 8) != 0) {
      goto LABEL_87;
    }
    uint64_t v18 = a1 + 7;
    if (v20 == (__objc2_class **)a1[3])
    {
      if (a1[7] >> 55)
      {
        uint64_t v29 = (uint64_t)v20;
        goto LABEL_88;
      }

      if (!a1[6])
      {
        _dispatch_mach_cancel_invoke((uint64_t)a1, v16);
LABEL_87:
        uint64_t v18 = a1 + 7;
        goto LABEL_88;
      }

      continue;
    }

    break;
  }

  if (!v29) {
    uint64_t v29 = a1[3];
  }
LABEL_88:
  int v17 = v16 & 0x1000002;
  a2 = (void *)v68;
  if ((v16 & 0x1000002) == 2)
  {
    __int128 v69 = *(_OWORD *)v21;
    *(void *)(v19 + 16_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = a1;
    *(void *)(v19 + 168) = &v69;
    _dispatch_last_resort_autorelease_pool_pop(v68);
    *(_OWORD *)uint64_t v21 = v69;
  }

  if ((unint64_t)(v29 + 1) > 1)
  {
LABEL_138:
    if ((v16 & 0x40000) == 0) {
      goto LABEL_130;
    }
  }

  else
  {
    uint64_t v35 = v70;
    do
    {
      unint64_t v36 = __ldxr(v18);
      unint64_t v37 = (v36 - v35) & 0xFFFFFFF700000001LL;
      if (!(v36 >> 55))
      {
        if ((v36 & 0x8000000000LL) != 0)
        {
          __clrex();
          do
            unint64_t v43 = __ldaxr(v18);
          while (__stxr(v43 ^ 0x8000000000LL, v18));
          if ((a3 & 1) != 0) {
            goto LABEL_28;
          }
          uint64_t v29 = *v21;
          if ((*(void *)(*(void *)*v21 + 40LL) & 0x10000) != 0) {
            goto LABEL_28;
          }
          goto LABEL_138;
        }

        if (v29) {
          unint64_t v37 = (v36 - v35) & 0xFFFFFF7700000001LL | 0x8000000000LL;
        }
        else {
          unint64_t v37 = (v36 - v35) & 0xFFFFFFF000000001LL;
        }
      }
    }

    while (__stlxr(v37, v18));
    if ((~v36 & 0x1800000000LL) == 0)
    {
      uint64_t v44 = HIDWORD(v36) & 7;
      unsigned int v45 = *(_DWORD *)(v19 + 200);
    }

    uint64_t v29 = 0LL;
    uint64_t v70 = 0LL;
    if ((v16 & 0x40000) != 0) {
      goto LABEL_131;
    }
LABEL_130:
    *(void *)(v19 + 20_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = *(void *)(v19 + 200) & 0xF0000LL | v66;
  }

  if ((_DWORD)v23 == 268435460)
  {
    LODWORD(v23) = 268435460;
    __int16 v6 = v86;
    if ((v81 & 0x10) != 0)
    {
      if (v8[2] == -1)
      {
        *int v8 = *v8 & 0xFFFFFFE0 | 0x13;
        if ((v81 & 0x80) == 0) {
          goto LABEL_84;
        }
      }

      else if ((v81 & 0x80) == 0)
      {
LABEL_84:
        unsigned int v55 = 0LL;
        uint64_t v18 = *(_WORD *)(v86 + 118);
LABEL_85:
        *(_WORD *)(v6 + 118) = v18 | 1;
        return v55;
      }

      _dispatch_mach_notification_set_armed(v7);
      return 0LL;
    }
  }

  else
  {
    __int16 v6 = v86;
  }

LABEL_131:
  if ((a3 & 1) == 0)
  {
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace(772079660LL, a1, 0LL, 0LL, 0LL);
    }
    _dispatch_introspection_queue_item_complete((dispatch_object_s *)a1);
  }

  if (v29) {
    _dispatch_queue_invoke_finish((dispatch_object_s *)a1, (uint64_t)a2, (__objc2_class **)v29, v70);
  }
  else {
    _os_object_release_internal_n(a1, (_BYTE *)&dword_0 + 2);
  }
}

void _dispatch_mach_wakeup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 120);
  int v4 = *(_DWORD *)(a1 + 80);
  if ((*(_WORD *)(a1 + 116) & 1) == 0 || *(void *)(a1 + 48)) {
    goto LABEL_3;
  }
  if (!*(void *)(v3 + 72))
  {
    uint64_t v5 = 0LL;
    if ((v4 & 0x10000000) == 0 || !(a3 & 0x10 | ~v4 & 0x50000000)) {
      goto LABEL_6;
    }
    if ((*(_WORD *)(a1 + 116) & 8) == 0)
    {
LABEL_3:
      if (*(__objc2_class ***)(a1 + 24) == &_dispatch_mgr_q) {
        uint64_t v5 = &_dispatch_mgr_q;
      }
      else {
        uint64_t v5 = (__objc2_class **)(&dword_0 + 1);
      }
      goto LABEL_6;
    }

uint64_t _dispatch_xpc_sigterm_merge_evt(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5 = ~*(void *)(a1 + 8);
  _dispatch_barrier_async_detached_f((_opaque_pthread_t *)v5, v5, (uint64_t)_dispatch_mach_sigterm_invoke);
  unsigned int v6 = __clz(__rbit32((a4 >> 8) & 0x3FFF));
  if (((a4 >> 8) & 0x3FFF) != 0) {
    uint64_t v7 = v6 + 1;
  }
  else {
    uint64_t v7 = 0LL;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 80LL))(v5, v7, 19LL);
}

uint64_t _dispatch_mach_sigterm_invoke(uint64_t a1)
{
  uint64_t result = _dispatch_unote_unregister(*(void *)(a1 + 128), 5);
  if ((*(_DWORD *)(a1 + 80) & 0x10000000) == 0) {
    return _dispatch_client_callout4( *(void *)(*(void *)(a1 + 88) + 48LL),  11LL,  0LL,  0LL,  *(uint64_t (**)(void))(*(void *)(a1 + 88) + 40LL));
  }
  return result;
}

uint64_t dispatch_mach_msg_create(const void *a1, size_t a2, int a3, void *a4)
{
  if (a2 < 0x18 || (uint64_t v7 = a1) == 0LL && a3) {
    dispatch_mach_msg_create_cold_1(a2);
  }
  if (a3)
  {
    uint64_t v8 = _dispatch_object_alloc(&OBJC_CLASS___OS_dispatch_mach_msg, 96LL);
    *(void *)(v8 + 88) = v7;
    *(void *)(v8 + 16) = -1985229329LL;
    *(void *)(v8 + 24) = &off_65340;
    *(_DWORD *)(v8 + 72) = a3;
    *(void *)(v8 + 8_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = a2;
    if (!a4) {
      return v8;
    }
    goto LABEL_12;
  }

  size_t v9 = a2 + 88;
  if (a2 - 8 >= 0xFFFFFFFFFFFFFFA0LL) {
    dispatch_mach_msg_create_cold_2(a2);
  }
  uint64_t v10 = _dispatch_object_alloc(&OBJC_CLASS___OS_dispatch_mach_msg, v9);
  uint64_t v8 = v10;
  if (v7) {
    memcpy((void *)(v10 + 88), v7, a2);
  }
  *(void *)(v8 + 16) = -1985229329LL;
  *(void *)(v8 + 24) = &off_65340;
  *(_DWORD *)(v8 + 72) = 0;
  *(void *)(v8 + 8_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = a2;
  if (a4)
  {
    uint64_t v7 = (const void *)(v8 + 88);
LABEL_12:
    *a4 = v7;
  }

  return v8;
}

void _dispatch_mach_msg_dispose(uint64_t a1)
{
  kern_return_t v4;
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    os_release(v2);
    *(void *)(a1 + 64) = 0LL;
  }

  int v3 = *(_DWORD *)(a1 + 72);
  if (v3 == 2)
  {
    int v4 = mach_vm_deallocate(mach_task_self_, *(void *)(a1 + 88), *(void *)(a1 + 80));
    if (v4) {
      _dispatch_bug(3000LL, v4);
    }
  }

  else if (v3 == 1)
  {
    free(*(void **)(a1 + 88));
  }

uint64_t dispatch_mach_msg_get_msg(uint64_t a1, void *a2)
{
  if (a2) {
    *a2 = *(void *)(a1 + 80);
  }
  int v2 = *(_DWORD *)(a1 + 72);
  uint64_t result = a1 + 88;
  if (v2) {
    return *(void *)result;
  }
  return result;
}

void _dispatch_mach_msg_async_reply_invoke(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  unsigned int v7 = *(_DWORD *)(v5 + 48);
  uint64_t v8 = 3LL;
  if (v7) {
    uint64_t v8 = 4LL;
  }
  if (v7 >> 14 == 254944) {
    uint64_t v9 = v7 & 0x3FFF;
  }
  else {
    uint64_t v9 = v8;
  }
  v28[2] = *(void *)(a1 + 48);
  uint64_t v29 = 0LL;
  int v30 = 0;
  unint64_t StatusReg = (void *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v28[0] = StatusReg[23];
  v28[1] = "mach_msg";
  StatusReg[23] = v28;
  if (MEMORY[0xFFFFFC100]) {
    _dispatch_trace_item_pop_internal((_opaque_pthread_t *)v6, (uint64_t *)v5);
  }
  _dispatch_introspection_queue_item_dequeue((dispatch_queue_s *)v6, (dispatch_object_s *)v5);
  uint64_t v11 = *(void *)(v6 + 88);
  *(void *)(v5 + 16) = -1985229329LL;
  int v12 = *(unsigned int **)(v5 + 64);
  if (v12 != (unsigned int *)-1LL)
  {
    uint64_t v13 = *(void *)(v5 + 64);
    if (v12) {
      uint64_t v13 = v12[8];
    }
    if (MEMORY[0xFFFFFC100])
    {
      kdebug_trace(771817488LL, v13, v5, 0LL, 0LL);
      int v12 = *(unsigned int **)(v5 + 64);
    }
  }

  uint64_t v14 = *(void *)(v5 + 56);
  if (v14 == -1)
  {
    unint64_t v17 = 0LL;
  }

  else
  {
    uint64_t v15 = StatusReg[25];
    else {
      uint64_t v16 = 0LL;
    }
    unint64_t v17 = v14 & 0xFFFFFF;
    if (v17)
    {
    }

    else if ((unsigned __int16)v15 >> 12)
    {
      unint64_t v17 = (256LL << (((unsigned __int16)v15 >> 12) - 1)) | 0xFF;
    }

    else
    {
      unint64_t v17 = v16 & 0xFFFFFFFFFFFFFF00LL | StatusReg[25];
    }
  }

  unint64_t v18 = v17 & 0xFFFFFFFF02FFFFFFLL;
  uint64_t v19 = StatusReg[4];
  if ((v19 & 0x1000000) != 0)
  {
    if (v18)
    {
LABEL_56:
      _dispatch_set_priority_and_voucher_slow(v18, v12, 7);
      goto LABEL_28;
    }

    unint64_t v18 = v19 & 0xFFFFFFFFFEFFFFFFLL;
  }

  else if (v18 == (v19 & 0xFFFFFFFF77FFFFFFLL))
  {
    goto LABEL_24;
  }

  if (v18) {
    goto LABEL_56;
  }
LABEL_24:
  if ((unsigned int *)StatusReg[28] != v12)
  {
    unint64_t v18 = 0LL;
    goto LABEL_56;
  }

  if (v12) {
    os_release(v12);
  }
LABEL_28:
  unint64_t v20 = 0LL;
  *(void *)(v5 + 64) = 0LL;
  if ((a3 & 0x1000000) != 0) {
    unint64_t v20 = objc_autoreleasePoolPush();
  }
  _dispatch_client_callout3( *(void *)(v11 + 48),  v9,  v5,  *(uint64_t (**)(void))((char *)&dword_18 + (void)_dispatch_mach_xpc_hooks));
  if (v20) {
    objc_autoreleasePoolPop(v20);
  }
  if (MEMORY[0xFFFFFC100]) {
    kdebug_trace(772079660LL, v5, 0LL, 0LL, 0LL);
  }
  _dispatch_introspection_queue_item_complete((dispatch_object_s *)v5);
  dispatch_release((dispatch_object_t)v5);
  uint64_t v22 = v29;
  StatusReg[23] = v28[0];
  if (v22) {
    _dispatch_mach_ipc_handoff_async((uint64_t)v28);
  }
  uint64_t v23 = *(unsigned int **)(a1 + 56);
  if (v23[2] != 0x7FFFFFFF)
  {
    uint64_t v24 = v23 + 2;
    do
      int v25 = __ldxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (v25 <= 1)
    {
      if (v25 != 1)
      {
        qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
        return;
      }

      _os_object_dispose(v23, v21);
    }
  }

  uint64_t v26 = StatusReg[22];
  if (v26) {
    int v27 = *(_DWORD *)(v26 + 8) + 1;
  }
  else {
    int v27 = 1;
  }
  if (v27 > _dispatch_continuation_cache_limit)
  {
    _dispatch_continuation_free_to_cache_limit(a1);
  }

  else
  {
    *(void *)(a1 + 16) = v26;
    *(_DWORD *)(a1 + 8) = v27;
    StatusReg[22] = a1;
  }

uint64_t dispatch_mach_msg_get_filter_policy_id(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    dispatch_mach_msg_get_filter_policy_id_cold_1();
  }
  uint64_t v2 = a1 + 88;
  if (*(_DWORD *)(a1 + 72))
  {
    uint64_t v2 = *(void *)v2;
    if (!v2) {
      dispatch_mach_msg_get_filter_policy_id_cold_4(a1);
    }
  }

  int v3 = (unsigned int *)(v2 + ((*(unsigned int *)(v2 + 4) + 3LL) & 0x1FFFFFFFCLL));
  if (*v3) {
    dispatch_mach_msg_get_filter_policy_id_cold_3(*v3);
  }
  uint64_t result = v3[1];
  *a2 = v3[15];
  return result;
}

uint64_t dispatch_mig_server( uint64_t a1, int a2, unsigned int (*a3)(mach_msg_header_t *, mach_msg_header_t *))
{
  unsigned int v28 = a3;
  mach_msg_size_t v4 = a2 + 68;
  uint64_t v5 = *(void *)(a1 + 88);
  uint64_t v6 = __chkstk_darwin(a1, 117442818LL);
  uint64_t v8 = (mach_msg_header_t *)((char *)&v28 - ((v7 + 83) & 0xFFFFFFFFFFFFFFF0LL));
  v8[1].mach_port_t msgh_remote_port = 0;
  __chkstk_darwin(v6, v9);
  int v12 = (mach_msg_header_t *)((char *)&v28 - v11);
  char v13 = 0;
  v12->msgh_size = 0;
  int v14 = 1000;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  int v16 = 117442818;
  while (1)
  {
    unint64_t v17 = v8;
    uint64_t v8 = v12;
    if (*(void *)(a1 + 56) >> 55) {
      BOOL v18 = 0;
    }
    else {
      BOOL v18 = (*(_DWORD *)(a1 + 80) & 0x10000000) == 0;
    }
    if (!v18 || (--v14, !v14))
    {
      if ((v10 & 1) == 0) {
        return 0LL;
      }
      v16 &= ~2u;
      v10 &= ~2u;
    }

    uint64_t v19 = mach_msg(v12, v10, v12->msgh_size, v4, *(_DWORD *)(v5 + 24), 0, 0);
    if ((_DWORD)v19) {
      break;
    }
    if ((v16 & 2) == 0) {
      return 0LL;
    }
    unint64_t v20 = voucher_create_with_mach_msg(&v8->msgh_bits);
    uint64_t v21 = *(_DWORD **)(StatusReg + 224);
    if (v21 == v20) {
      goto LABEL_21;
    }
    *(void *)(StatusReg + 224) = v20;
    if (v20)
    {
      uint64_t v22 = v20[8];
      if (!v21) {
        goto LABEL_17;
      }
    }

    else
    {
      uint64_t v22 = 0LL;
      if (!v21)
      {
LABEL_17:
        int v23 = 0;
        goto LABEL_18;
      }
    }

    int v23 = v21[8];
LABEL_18:
    if ((_DWORD)v22 != -1 && (_DWORD)v22 != v23) {
      _dispatch_set_priority_and_mach_voucher_slow(0LL, v22);
    }
LABEL_21:
    if (v21) {
      os_release(v21);
    }
    *(void *)&v17->mach_msg_bits_t msgh_bits = 0LL;
    *(void *)&v17->mach_port_t msgh_remote_port = 0LL;
    *(void *)&v17->mach_port_name_t msgh_voucher_port = 0LL;
    if (!v28(v8, v17)) {
      goto LABEL_28;
    }
    if ((v17->msgh_bits & 0x80000000) != 0) {
      goto LABEL_29;
    }
    mach_port_t msgh_remote_port = v17[1].msgh_remote_port;
    if (!msgh_remote_port) {
      goto LABEL_29;
    }
    if (msgh_remote_port == -305)
    {
      v17->mach_port_t msgh_remote_port = 0;
    }

    else
    {
LABEL_28:
      v8->mach_port_t msgh_remote_port = 0;
      mach_msg_destroy(v8);
    }

LABEL_29:
    char v13 = 1;
    int v12 = v17;
    mach_msg_option_t v10 = v16;
    if (v17->msgh_remote_port)
    {
      if ((v17->msgh_bits & 0x1F) == 0x12) {
        int v25 = 1;
      }
      else {
        int v25 = 17;
      }
      mach_msg_option_t v10 = v25 | v16;
      int v12 = v17;
    }
  }

  uint64_t v26 = v19;
  if ((v19 - 268435459) < 2)
  {
    _dispatch_mig_consume_unsent_message(v8);
  }

  else if ((_DWORD)v19 != 268451842)
  {
    if ((_DWORD)v19 == 268451843)
    {
      if (v13 & 1 | (v8->msgh_remote_port != 0)) {
        return 0LL;
      }
      else {
        return 268451843LL;
      }
    }

    else
    {
      _dispatch_bug_mach_client("dispatch_mig_server: mach_msg() failed", v19);
    }
  }

  return v26;
}

void _dispatch_mig_consume_unsent_message(mach_msg_header_t *a1)
{
  kern_return_t v4;
  mach_port_t msgh_local_port = a1->msgh_local_port;
  if (msgh_local_port - 1 <= 0xFFFFFFFD)
  {
    mach_msg_bits_t v3 = (a1->msgh_bits >> 8) & 0x1F;
    if (v3 - 17 >= 2)
    {
      if (v3 != 16) {
        goto LABEL_10;
      }
      mach_msg_size_t v4 = mach_port_mod_refs(mach_task_self_, msgh_local_port, 1u, -1);
    }

    else
    {
      mach_msg_size_t v4 = mach_port_deallocate(mach_task_self_, msgh_local_port);
    }

    if (v4 == -301) {
      _dispatch_sema4_create_slow_cold_2();
    }
    if (v4) {
      _dispatch_bug(3170LL, v4);
    }
  }

uint64_t dispatch_mach_mig_demux(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  mach_msg_return_t v19;
  mach_port_name_t msgh_local_port;
  int v21;
  kern_return_t v22;
  void v23[3];
  v23[1] = "mach_mig_demux";
  _OWORD v23[2] = a1;
  mach_msg_size_t v4 = (mach_msg_header_t *)(a4 + 88);
  if (*(_DWORD *)(a4 + 72)) {
    mach_msg_size_t v4 = *(mach_msg_header_t **)&v4->msgh_bits;
  }
  if (!a3) {
    return 0LL;
  }
  mach_msg_id_t msgh_id = v4->msgh_id;
  while (1)
  {
    uint64_t v6 = *a2;
    int v7 = *(_DWORD *)(*a2 + 8);
    BOOL v8 = __OFSUB__(msgh_id, v7);
    int v9 = msgh_id - v7;
    if (v9 < 0 == v8 && *(_DWORD *)(v6 + 12) > msgh_id) {
      break;
    }
    ++a2;
    if (!--a3) {
      return 0LL;
    }
  }

  if (!*(void *)(v6 + 40LL * v9 + 40)) {
    return 0LL;
  }
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v23[0] = *(void *)(StatusReg + 184);
  *(void *)(StatusReg + 184) = v23;
  __chkstk_darwin(a1, a2);
  char v13 = (mach_msg_header_t *)((char *)v23 - v12);
  mach_port_t msgh_remote_port = v4->msgh_remote_port;
  v13->mach_msg_bits_t msgh_bits = v4->msgh_bits & 0x1F;
  v13->msgh_size = 36;
  *(void *)&v13->mach_port_t msgh_remote_port = msgh_remote_port;
  v13->mach_port_name_t msgh_voucher_port = 0;
  v13->mach_msg_id_t msgh_id = v15 + 100;
  (*v16)(v4, (char *)v23 - v12);
  if ((v13->msgh_bits & 0x80000000) == 0)
  {
    mach_port_t v17 = v13[1].msgh_remote_port;
    if (v17 == -305) {
      goto LABEL_32;
    }
    if (v17)
    {
      v4->mach_port_t msgh_remote_port = 0;
      mach_msg_destroy(v4);
    }
  }

  if (v13->msgh_remote_port)
  {
    if ((v13->msgh_bits & 0x1F) == 0x12) {
      mach_msg_option_t v18 = 1;
    }
    else {
      mach_msg_option_t v18 = 17;
    }
    uint64_t v19 = mach_msg(v13, v18, v13->msgh_size, 0, 0, 0, 0);
    if ((v19 - 268435459) >= 2)
    {
      if (v19)
      {
        if (v19 == -301) {
          _dispatch_sema4_create_slow_cold_2();
        }
        dispatch_mach_mig_demux_cold_1(v19);
      }

      goto LABEL_32;
    }

    mach_port_t msgh_local_port = v13->msgh_local_port;
    if (msgh_local_port - 1 > 0xFFFFFFFD) {
      goto LABEL_31;
    }
    uint64_t v21 = (v13->msgh_bits >> 8) & 0x1F;
    if ((v21 - 17) >= 2)
    {
      if (v21 != 16)
      {
LABEL_31:
        mach_msg_destroy(v13);
        goto LABEL_32;
      }

      uint64_t v22 = mach_port_mod_refs(mach_task_self_, msgh_local_port, 1u, -1);
    }

    else
    {
      uint64_t v22 = mach_port_deallocate(mach_task_self_, msgh_local_port);
    }

    if (v22 == -301) {
      _dispatch_sema4_create_slow_cold_2();
    }
    if (v22) {
      _dispatch_bug(3170LL, v22);
    }
    goto LABEL_31;
  }

uint64_t dispatch_mach_mig_demux_get_context()
{
  unint64_t v0 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 184;
  do
  {
    unint64_t v0 = *(void *)v0;
    if (!v0) {
      dispatch_mach_mig_demux_get_context_cold_1();
    }
  }

  while (*(char **)(v0 + 8) != "mach_mig_demux");
  return *(void *)(v0 + 16);
}

uint64_t _dispatch_mach_msg_create_reply_disconnected(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (int *)a1 + 13;
  if (!a1) {
    uint64_t v5 = (int *)(a2 + 24);
  }
  int v6 = *v5;
  if (*v5)
  {
    if (a2 && !*(void *)(a2 + 16) && *(_BYTE *)(a2 + 30))
    {
      int v15 = *(void **)(a2 + 56);
      if (v15)
      {
        os_release(v15);
        *(void *)(a2 + 56) = 0LL;
      }

      _dispatch_destruct_reply_port();
      return 0LL;
    }

    uint64_t v8 = _dispatch_object_alloc(&OBJC_CLASS___OS_dispatch_mach_msg, 112LL);
    uint64_t v9 = v8;
    *(void *)(v8 + 16) = -1985229329LL;
    *(void *)(v8 + 24) = &off_65340;
    *(_DWORD *)(v8 + 72) = 0;
    *(void *)(v8 + 8_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = 24LL;
    *(_DWORD *)(v8 + 10_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v6;
    if (a1)
    {
      *(void *)(v8 + 32) = a1[4];
      mach_msg_option_t v10 = (void *)a1[8];
      *(void *)(v9 + 56) = a1[7];
      *(void *)(v9 + 64) = v10;
      if (v10) {
        os_retain(v10);
      }
    }

    else
    {
      uint64_t v12 = *(unsigned int *)(a2 + 40);
      uint64_t v13 = *(void *)(a2 + 56);
      *(void *)(v8 + 32) = *(void *)(a2 + 48);
      *(void *)(v8 + 56) = v12;
      *(void *)(v8 + 64) = v13;
      *(void *)(a2 + 56) = 0LL;
    }

    int v14 = a3 | 0xF8F80000;
    if (!a3) {
      int v14 = 0;
    }
    *(_DWORD *)(v9 + 48) = v14;
  }

  else
  {
    if (a1) {
      return 0LL;
    }
    uint64_t v11 = *(void **)(a2 + 56);
    if (!v11) {
      return 0LL;
    }
    os_release(v11);
    uint64_t v9 = 0LL;
    *(void *)(a2 + 56) = 0LL;
  }

  return v9;
}

void _dispatch_destruct_reply_port()
{
  int v0 = thread_destruct_special_reply_port();
  if (v0 == -301) {
    _dispatch_sema4_create_slow_cold_2();
  }
  if (v0) {
    _dispatch_bug(515LL, v0);
  }
}

void _dispatch_mach_send_drain(unint64_t a1, const char *a2, unsigned int a3)
{
  unsigned int v37 = a2;
  uint64_t v4 = 0LL;
  uint64_t v5 = 0LL;
  int v6 = *(unint64_t **)(a1 + 120);
  uint64_t v7 = HIDWORD(v6[8]) & 7;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v39 = v7;
  do
  {
    uint64_t v8 = (uint64_t)(v6 + 9);
    if (v6[9])
    {
      unsigned int v34 = v4;
      uint64_t v9 = v6;
      mach_msg_option_t v10 = v6 + 10;
      char v11 = a3;
      unsigned int v12 = a3 & 0xFFFFFFF7;
      uint64_t v35 = v6 + 9;
LABEL_4:
      uint64_t v13 = *v10;
      if (!*v10) {
        uint64_t v13 = _dispatch_wait_for_enqueuer(v10, v8);
      }
      while (1)
      {
        int v14 = (uint64_t *)v13;
        int v15 = (unint64_t *)(v13 + 16);
        uint64_t v13 = *(void *)(v13 + 16);
        *mach_msg_option_t v10 = v13;
        if (!v13)
        {
          while (1)
          {
            unint64_t v22 = __ldxr(v35);
            if (!__stlxr(0LL, v35)) {
              goto LABEL_7;
            }
          }

          __clrex();
          uint64_t v13 = *v15;
          if (!*v15) {
            uint64_t v13 = _dispatch_wait_for_enqueuer(v15, (uint64_t)v35);
          }
          *mach_msg_option_t v10 = v13;
        }

void _dispatch_mach_msg_not_sent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a2 + 48);
  if ((*(_WORD *)(a1 + 116) & 0x10) != 0 && *(void *)(a2 + 32))
  {
    uint64_t v7 = (*(uint64_t (**)(void))((char *)&dword_10 + (void)_dispatch_mach_xpc_hooks))();
    if (v7) {
      uint64_t v8 = (_opaque_pthread_t *)v7;
    }
    else {
      uint64_t v8 = (_opaque_pthread_t *)a1;
    }
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  if (v8) {
    uint64_t v9 = 12LL;
  }
  else {
    uint64_t v9 = 7LL;
  }
  reply_disconnected = (_DWORD *)_dispatch_mach_msg_create_reply_disconnected((void *)a2, a3, v9);
  if ((v6 & 2) != 0) {
    int v11 = 0;
  }
  else {
    int v11 = -117964795;
  }
  *(_DWORD *)(a2 + 48) = v11;
  _dispatch_mach_handle_or_push_received_msg(a1, (_DWORD *)a2, 0);
  if (reply_disconnected)
  {
    if (v8)
    {
      unsigned int v12 = _dispatch_mach_msg_async_reply_wrap((uint64_t)reply_disconnected, a1);
      if (MEMORY[0xFFFFFC100]) {
        _dispatch_trace_item_push_internal(v8, v12);
      }
      _dispatch_introspection_queue_item_enqueue((dispatch_queue_s *)v8, (dispatch_object_s *)v12);
      unsigned int v13 = __clz(__rbit32((reply_disconnected[14] >> 8) & 0x3FFF));
      if (((reply_disconnected[14] >> 8) & 0x3FFF) != 0) {
        uint64_t v14 = v13 + 1;
      }
      else {
        uint64_t v14 = 0LL;
      }
      (*(void (**)(_opaque_pthread_t *, uint64_t *, uint64_t))(v8->__sig + 88))(v8, v12, v14);
    }

    else
    {
      _dispatch_mach_handle_or_push_received_msg(a1, reply_disconnected, 0);
    }
  }

uint64_t _dispatch_mach_msg_send(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v6 = a1;
  uint64_t v7 = *(void *)(a1 + 120);
  uint64_t v8 = (unsigned int *)(a2 + 88);
  if (*(_DWORD *)(a2 + 72)) {
    uint64_t v8 = *(unsigned int **)v8;
  }
  uint64_t v9 = *(void *)(a2 + 64);
  int v10 = *v8 & 0x1F;
  unsigned int v11 = *(_DWORD *)(a2 + 52);
  __int128 v90 = 0u;
  __int128 v91 = 0u;
  __int128 v89 = 0u;
  memset(v88, 0, 40);
  if (v10 == 18)
  {
    unsigned int v12 = (_DWORD *)(a2 + 48);
    int v13 = *(_DWORD *)(a2 + 48);
    if ((v13 & 2) == 0)
    {
      uint64_t v14 = 0LL;
      int v15 = 0;
      int v16 = 0;
      signed int v17 = v13 & 0xFFFF0000 | 1;
      goto LABEL_52;
    }

LABEL_36:
  else {
    int v29 = a4;
  }
  if (v29)
  {
    int v30 = 0;
    uint64_t v31 = *(void *)(a2 + 56);
    unsigned int v32 = __clz(__rbit32((v31 >> 8) & 0x3FFF));
    else {
      unsigned int v33 = 0;
    }
    signed int v17 = v21 | 0x30;
    if (v33 - 1 <= 5)
    {
      BOOL v34 = (v31 & 0x3F00) != 0 && (*(void *)(a2 + 56) & 0x22000000LL) == 0;
      int v35 = *(void *)(a2 + 56) << 8;
      if (!v34) {
        int v35 = 65280;
      }
      int v30 = v35 | (v33 << 16);
    }

    uint64_t v14 = v30 | (v29 << 20);
    if (v11) {
      goto LABEL_51;
    }
  }

  else
  {
    uint64_t v14 = 0LL;
    signed int v17 = v21 | 0x10;
    if (v11) {
LABEL_51:
    }
      v17 |= (4 * *(unsigned __int16 *)(v6 + 116)) & 0x200;
  }

  *(_DWORD *)(v8 + 144) = 0;
  dispatch_suspend(*(dispatch_object_t *)(v8 + 48));
  if (_dispatch_io_init_pred != -1) {
    dispatch_once_f(&_dispatch_io_init_pred, 0LL, (dispatch_function_t)_dispatch_io_queues_init);
  }
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 0x40000000LL;
  v24[2] = __dispatch_io_create_with_path_block_invoke_2;
  v24[3] = &unk_590F0;
  unsigned int v25 = v28;
  uint64_t v22 = *(void *)(a1 + 56);
  char v26 = *(void *)(a1 + 48);
  unint64_t v27 = v22;
  uint64_t v23 = *(void *)(a1 + 40);
  v24[4] = *(void *)(a1 + 32);
  v24[5] = v23;
  dispatch_channel_async((dispatch_queue_t)_dispatch_io_devs_lockq, v24);
}

LABEL_52:
  int v83 = v10;
  uint64_t v85 = v7;
  uint64_t v86 = v6;
  if ((v13 & 4) == 0)
  {
    int v39 = v16;
    uint64_t v41 = v12;
    unsigned int v43 = v11;
    char v42 = a5;
    goto LABEL_60;
  }

  if (!*(_BYTE *)(a3 + 30))
  {
    uint64_t v38 = v14;
    int v36 = v15;
    goto LABEL_58;
  }

  int v36 = v15;
  v17 |= 0x100000u;
  unint64_t v37 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v38 = v14;
  if (v11 != *(_DWORD *)(v37 + 64))
  {
LABEL_58:
    int v39 = v16;
    signed int v40 = v17;
    uint64_t v41 = v12;
    char v42 = a5;
    goto LABEL_59;
  }

  int v39 = v16;
  signed int v40 = v17;
  uint64_t v41 = v12;
  char v42 = a5;
  *(void *)(v37 + 64) = 0LL;
LABEL_59:
  unsigned int v43 = v11;
  _dispatch_mach_reply_waiter_register(v86, a3, v11, a2);
  signed int v17 = v40;
  int v15 = v36;
  uint64_t v14 = v38;
LABEL_60:
  uint64_t v44 = 0LL;
  unsigned int v45 = v8[1];
  __int128 v89 = (unint64_t)v8;
  *(void *)&__int128 v90 = v45;
  unsigned int v46 = v88[0];
  if (!v15) {
    unsigned int v46 = 0;
  }
  *((void *)&v90 + _dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = v88;
  *(void *)&__int128 v91 = 0LL;
  *((void *)&v91 + _dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = v46;
  uint64_t v47 = *v8;
  char v81 = v17;
  if ((v17 & 1) != 0 && (v47 & 0x80000000) != 0) {
    uint64_t v44 = v8[6];
  }
  uint64_t v48 = mach_msg2_internal( &v89,  v17 | 0x500000000LL,  v47 | 0x200000000LL,  *((void *)v8 + 1),  v8[4] | (unint64_t)((uint64_t)(int)v8[5] << 32),  v44,  v14 << 32,  0LL);
  uint64_t v23 = v48;
  if ((v13 & 4) != 0 && (_DWORD)v48) {
    _dispatch_mach_reply_unregister((_opaque_pthread_t *)v86, a3, 36);
  }
  a5 = v42;
  uint64_t v7 = v85;
  int v10 = v83;
  unsigned int v11 = v43;
  unsigned int v12 = v41;
  if (v39)
  {
    mach_port_name_t v49 = v8[4];
    if ((_DWORD)v23 != 268435461 || !v49)
    {
      int v50 = *v8;
      int v51 = HIWORD(*v8) & 0x1F;
      BOOL v52 = v51 == 17 || v51 == 19;
      if (v52 && v49)
      {
        if (v51 == 17)
        {
          char v53 = a5;
          unsigned int v54 = v11;
          _voucher_dealloc_mach_voucher(v49);
          unsigned int v11 = v54;
          unsigned int v12 = v41;
          a5 = v53;
          uint64_t v7 = v85;
          int v10 = v83;
          int v50 = *v8;
        }

        v8[4] = 0;
        *uint64_t v8 = v50 & 0xFFE0FFFF;
      }

      goto LABEL_80;
    }

    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Voucher port corruption";
    qword_61258 = 268435461LL;
    __break(1u);
LABEL_142:
    char v75 = *(void **)(*(void *)(v23 + 48) + 64LL);
    if (v75)
    {
      os_release(v75);
      uint64_t v55 = 0LL;
      *(void *)(*(void *)(v23 + 48) + 64LL) = 0LL;
      return v55;
    }

    return 0LL;
  }

LABEL_87:
  if (!(v13 & 4 | v23))
  {
    if (v11)
    {
      uint64_t v56 = *(void *)(v6 + 88);
      if (!*(void *)(v56 + 16) || *(_DWORD *)(v56 + 24) != v11)
      {
        char v57 = a5;
        _dispatch_mach_reply_kevent_register(v6, v11, a2);
        a5 = v57;
      }
    }
  }

  if (v10 != 18 && *(void *)(v7 + 48) == a2 && *(void *)(v7 + 16))
  {
    char v69 = a5;
    _dispatch_unote_unregister(*(void *)(v6 + 120), 5);
    a5 = v69;
    *(_DWORD *)(*(void *)(v6 + 120) + 24LL) = 0;
    if (!(_DWORD)v23) {
      goto LABEL_96;
    }
LABEL_127:
    if ((*(_WORD *)(v6 + 116) & 0x10) != 0)
    {
      char v70 = a5;
      if (*(void *)(a2 + 32))
      {
        uint64_t v71 = (*(uint64_t (**)(void))((char *)&dword_10 + (void)_dispatch_mach_xpc_hooks))();
        if (v71) {
          uint64_t v58 = (_opaque_pthread_t *)v71;
        }
        else {
          uint64_t v58 = (_opaque_pthread_t *)v6;
        }
LABEL_134:
        if (v58) {
          uint64_t v72 = 12LL;
        }
        else {
          uint64_t v72 = 7LL;
        }
        reply_disconnected = (_DWORD *)_dispatch_mach_msg_create_reply_disconnected((void *)a2, a3, v72);
        a5 = v70;
        goto LABEL_97;
      }
    }

    else
    {
      char v70 = a5;
    }

    uint64_t v58 = 0LL;
    goto LABEL_134;
  }

  if ((_DWORD)v23) {
    goto LABEL_127;
  }
LABEL_96:
  uint64_t v58 = 0LL;
  reply_disconnected = 0LL;
LABEL_97:
  *unsigned int v12 = v23;
  if ((a5 & 8) != 0 && (v13 & 1) != 0)
  {
    uint64_t v55 = 3LL;
    if (!reply_disconnected) {
      return v55;
    }
  }

  else
  {
    _dispatch_mach_handle_or_push_received_msg(v6, (_DWORD *)a2, 0);
    uint64_t v55 = 1LL;
    if (!reply_disconnected) {
      return v55;
    }
  }

  if (v58)
  {
    uint64_t v60 = _dispatch_mach_msg_async_reply_wrap((uint64_t)reply_disconnected, v6);
    if (MEMORY[0xFFFFFC100]) {
      _dispatch_trace_item_push_internal(v58, v60);
    }
    _dispatch_introspection_queue_item_enqueue((dispatch_queue_s *)v58, (dispatch_object_s *)v60);
    unsigned int v61 = __clz(__rbit32((reply_disconnected[14] >> 8) & 0x3FFF));
    if (((reply_disconnected[14] >> 8) & 0x3FFF) != 0) {
      uint64_t v62 = v61 + 1;
    }
    else {
      uint64_t v62 = 0LL;
    }
    (*(void (**)(_opaque_pthread_t *, uint64_t *, uint64_t))(v58->__sig + 88))(v58, v60, v62);
  }

  else
  {
    _dispatch_mach_handle_or_push_received_msg(v6, reply_disconnected, 0);
  }

  return v55;
}

void _dispatch_mach_push_send_barrier_drain(uint64_t a1, unsigned int a2)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v5 = *(void **)(StatusReg + 176);
  if (v5) {
    *(void *)(StatusReg + 176) = v5[2];
  }
  else {
    uint64_t v5 = _dispatch_continuation_alloc_from_heap();
  }
  v5[4] = 0LL;
  v5[5] = 0LL;
  v5[3] = -1LL;
  *uint64_t v5 = &unk_58730;
  v5[1] = -1LL;
  _dispatch_lane_push(a1, v5, a2);
}

uint64_t _dispatch_mach_reply_waiter_register(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  *(void *)(a2 + 8) = ~result;
  *(_BYTE *)(a2 + 28) = -8;
  *(_DWORD *)(a2 + 24) = a3;
  if (!*(_BYTE *)(a2 + 30))
  {
    uint64_t v7 = *(void *)(a4 + 64);
    if (v7)
    {
      uint64_t result = (uint64_t)os_retain(*(void **)(a4 + 64));
      *(void *)(a2 + 56) = v7;
    }

    *(_DWORD *)(a2 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = *(void *)(a4 + 56);
    *(void *)(a2 + 48) = *(void *)(a4 + 32);
  }

  uint64_t v8 = *(void *)(v5 + 120);
  uint64_t v9 = (unsigned int *)(v8 + 40);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned int v11 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v9))
  {
    if (!__stxr(v11, v9)) {
      goto LABEL_10;
    }
  }

  __clrex();
  uint64_t result = _dispatch_unfair_lock_lock_slow(v8 + 40, 0x10000);
LABEL_10:
  uint64_t v15 = *(void *)(v8 + 56);
  uint64_t v14 = (void *)(v8 + 56);
  uint64_t v13 = v15;
  *(void *)(a2 + 64) = v15;
  if (v15) {
    *(void *)(v13 + 72) = a2 + 64;
  }
  *uint64_t v14 = a2;
  *(void *)(a2 + 72) = v14;
  unsigned int v16 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    unsigned int v17 = __ldxr(v9);
  while (__stlxr(0, v9));
  if (v17 != v16) {
    return _dispatch_unfair_lock_unlock_slow((uint64_t)v9, v17);
  }
  return result;
}

void _dispatch_mach_reply_kevent_register(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = _dispatch_unote_create_with_handle((uint64_t)&_dispatch_mach_type_reply, a2, 0LL);
  *((void *)v5 + _dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = ~a1;
  uint64_t v6 = *(void *)(a3 + 64);
  if (v6)
  {
    os_retain(*(void **)(a3 + 64));
    *((void *)v5 + 7) = v6;
  }

  unint64_t v7 = 0LL;
  *((_DWORD *)v5 + 1_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = *(void *)(a3 + 56);
  uint64_t v8 = *(void *)(a3 + 32);
  *((void *)v5 + 6) = v8;
  __int16 v9 = *(_WORD *)(a1 + 116);
  if ((v9 & 0x10) != 0 && v8)
  {
    uint64_t v10 = (*(uint64_t (**)(void))((char *)&dword_10 + (void)_dispatch_mach_xpc_hooks))();
    if (v10) {
      unint64_t v7 = v10;
    }
    else {
      unint64_t v7 = a1;
    }
    __int16 v9 = *(_WORD *)(a1 + 116);
  }

  if ((v9 & 0x80) != 0) {
    *((_DWORD *)v5 + 8) |= 0x200u;
  }
  if (!v7 || v7 == a1)
  {
    uint64_t v11 = *(void *)(a1 + 88);
    if (*(void *)(v11 + 16) >= 4uLL)
    {
      unint64_t v29 = *(void *)(v11 + 16) & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v13 = (int *)(a1 + 84);
      goto LABEL_20;
    }
  }

  if ((*(_BYTE *)(*(void *)v7 + 42LL) & 1) == 0)
  {
    int v12 = _dispatch_queue_compute_priority_and_wlh(v7, (uint64_t *)&v29);
    if (v12) {
      goto LABEL_21;
    }
    unint64_t v29 = -4LL;
    goto LABEL_19;
  }

  unint64_t v29 = -4LL;
  int v12 = 0x2000000;
  if (v7 >= (unint64_t)&_dispatch_root_queues && v7 < (unint64_t)&_dispatch_queue_serial_numbers)
  {
LABEL_19:
    uint64_t v13 = (int *)(v7 + 84);
LABEL_20:
    int v12 = *v13;
  }

LABEL_21:
  unsigned int v14 = *(_DWORD *)(a3 + 56);
  unsigned int v15 = (__clz(__rbit32((v14 >> 8) & 0x3FFF)) << 8) + 256;
  if (((v14 >> 8) & 0x3FFF) == 0) {
    unsigned int v15 = 0;
  }
  unsigned int v16 = v15 & 0xFFFFFF00 | *(_DWORD *)(a3 + 56);
  unsigned int v17 = v12 & 0x80000000;
  if ((v12 & 0xFFF) != 0)
  {
    if ((v12 & 0xFFFu) > v16) {
      unsigned int v16 = v12 & 0xFFF;
    }
  }

  else if (!((unsigned __int16)v12 >> 12) || !v16)
  {
    if (!((unsigned __int16)v12 >> 12) || v16)
    {
      unint64_t v29 = -4LL;
      unsigned int v18 = 0x2000000;
    }

    else
    {
      unsigned int v18 = v17 | ((unsigned __int16)v12 >> 12 << 8) | 0xFF;
    }

    goto LABEL_30;
  }

  unsigned int v18 = v16 | v17;
LABEL_30:
  uint64_t v19 = *(void *)(a1 + 120);
  BOOL v20 = (unsigned int *)(v19 + 40);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned int v22 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v20))
  {
    if (!__stxr(v22, v20)) {
      goto LABEL_35;
    }
  }

  __clrex();
  _dispatch_unfair_lock_lock_slow(v19 + 40, 0x10000);
LABEL_35:
  uint64_t v26 = *(void *)(v19 + 56);
  unsigned int v25 = (char **)(v19 + 56);
  uint64_t v24 = v26;
  *((void *)v5 + 8) = v26;
  if (v26) {
    *(void *)(v24 + 72) = v5 + 64;
  }
  *unsigned int v25 = v5;
  *((void *)v5 + 9) = v25;
  unsigned int v27 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    unsigned int v28 = __ldxr(v20);
  while (__stlxr(0, v20));
  if (v28 != v27) {
    _dispatch_unfair_lock_unlock_slow((uint64_t)v20, v28);
  }
}

  uint64_t v13 = -1;
LABEL_22:
  if ((v22.st_mode & 0xF000) == 0x8000)
  {
    if (v6 != -1)
    {
      unsigned int v14 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      while (fcntl_NOCANCEL(*(unsigned int *)(a1 + 40), 4LL) == -1)
      {
        unsigned int v15 = **(_DWORD **)(v14 + 8);
        if (v15 != 4)
        {
          if (v15)
          {
            _dispatch_bug(1496LL, v15);
            uint64_t v6 = -1;
          }

          break;
        }
      }
    }

    st_dev_high = HIBYTE(v22.st_dev);
    dispatch_suspend(*(dispatch_object_t *)(*(void *)(a1 + 32) + 72LL));
    if (_dispatch_io_init_pred != -1) {
      dispatch_once_f(&_dispatch_io_init_pred, 0LL, (dispatch_function_t)_dispatch_io_queues_init);
    }
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000LL;
    block[2] = ___dispatch_fd_entry_create_with_fd_block_invoke_2;
    block[3] = &__block_descriptor_tmp_71;
    block[4] = *(void *)(a1 + 32);
    unsigned int v21 = st_dev_high;
    dispatch_channel_async((dispatch_queue_t)_dispatch_io_devs_lockq, block);
  }

  else
  {
    if (v6 != -1)
    {
      unsigned int v17 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      while (fcntl_NOCANCEL(*(unsigned int *)(a1 + 40), 4LL) == -1)
      {
        unsigned int v18 = **(_DWORD **)(v17 + 8);
        if (v18 != 4)
        {
          if (v18)
          {
            _dispatch_bug(1516LL, v18);
            uint64_t v6 = -1;
          }

          break;
        }
      }
    }

    _dispatch_stream_init(*(void *)(a1 + 32));
  }

  uint64_t v19 = *(void *)(a1 + 32);
  *(_DWORD *)(v19 + 16) = v6;
  *(_DWORD *)(v19 + 2_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v13;
}

  if ((delta & 0x8000000000000000LL) == 0)
  {
    if (_dispatch_host_time_nano2mach)
    {
      int v12 = when;
      uint64_t v6 = _dispatch_host_time_nano2mach(delta);
      when = v12;
    }

    else if (delta)
    {
      if ((unint64_t)delta > 0x7FFFFFFFFFFFFFFELL)
      {
        uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
      }

      else if ((unint64_t)delta > 0x5555555555555554LL)
      {
        uint64_t v6 = 3 * (delta / 0x7DuLL);
      }

      else
      {
        uint64_t v5 = ((unint64_t)(3 * delta) * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
        uint64_t v6 = (v5 + ((unint64_t)(3 * delta - v5) >> 1)) >> 6;
      }
    }

    else
    {
      uint64_t v6 = 0LL;
    }

    unint64_t v7 = v6 + when;
LABEL_37:
    if (v3 == 1) {
      return v7 | 0x8000000000000000LL;
    }
    else {
      return v7;
    }
  }

  uint64_t v8 = -delta;
  if (_dispatch_host_time_nano2mach)
  {
    uint64_t v11 = when;
    uint64_t v10 = _dispatch_host_time_nano2mach(v8);
    when = v11;
  }

  else if (v8 > 0x7FFFFFFFFFFFFFFELL)
  {
    uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  }

  else if (v8 > 0x5555555555555554LL)
  {
    uint64_t v10 = 3 * (v8 / 0x7D);
  }

  else
  {
    __int16 v9 = ((unint64_t)(-3 * delta) * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
    uint64_t v10 = (v9 + ((unint64_t)(-3 * delta - v9) >> 1)) >> 6;
  }

  unint64_t v7 = when - v10;
  if (v7 > 0)
  {
    goto LABEL_37;
  }

  if (v3 == 1) {
    return 0x8000000000000001LL;
  }
  else {
    return 1LL;
  }
}

      mach_msg_destroy(&v8);
      return v6;
    }

    mig_dealloc_special_reply_port(v8.msgh_local_port);
  }

  return v6;
}

void *_dispatch_mach_msg_async_reply_wrap(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF)
  {
    uint64_t v4 = (unsigned int *)(a2 + 8);
    do
      int v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    if (v5 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t result = *(void **)(StatusReg + 176);
  if (result) {
    *(void *)(StatusReg + 176) = result[2];
  }
  else {
    uint64_t result = _dispatch_continuation_alloc_from_heap();
  }
  result[6] = a1;
  result[7] = a2;
  *uint64_t result = &unk_58808;
  result[1] = -1LL;
  result[3] = -1LL;
  return result;
}

void _dispatch_mach_send_push_and_trydrain(_DWORD *a1, unint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5 = *((void *)a1 + 15);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v7 = *(void *)(StatusReg + 24) & 0xFFFFFFFCLL;
  *(void *)(a2 + 16) = 0LL;
  uint64_t v8 = (unint64_t *)(v5 + 72);
  *(void *)(StatusReg + 976) = v5 + 72;
  do
    unint64_t v9 = __ldxr(v8);
  while (__stlxr(a2, v8));
  if (v9)
  {
    uint64_t v10 = 0LL;
    uint64_t v11 = 0LL;
    int v12 = (unint64_t *)(v9 + 16);
  }

  else
  {
    if (a1[2] != 0x7FFFFFFF)
    {
      uint64_t v13 = a1 + 2;
      do
        int v14 = __ldxr(v13);
      while (__stxr(v14 + 2, v13));
      if (v14 <= 0)
      {
        qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
        __break(1u);
LABEL_68:
        qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
        __break(1u);
        goto LABEL_69;
      }
    }

    int v12 = (unint64_t *)(v5 + 80);
    uint64_t v11 = 3LL;
    uint64_t v10 = 0xA000000000LL;
  }

  *int v12 = a2;
  *(void *)(StatusReg + 976) = 0LL;
  if (*(_DWORD *)(v5 + 88) || (a1[20] & 0x10000000) != 0)
  {
    unint64_t v29 = (unint64_t *)(v5 + 64);
    do
    {
      unint64_t v30 = __ldxr(v29);
      if ((v30 & 0x700000000LL) >= a3 << 32) {
        unint64_t v31 = v30;
      }
      else {
        unint64_t v31 = (a3 << 32) | 0x2800000000LL | v30 & 0xFFFFFFF0FFFFFFFFLL;
      }
      unint64_t v32 = v31 | v10;
    }

    while (__stlxr(v32, v29));
    if (((v32 ^ v30) & 0x8000000000LL) != 0) {
      uint64_t v33 = v11 & 2;
    }
    else {
      uint64_t v33 = v11;
    }
    (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)a1 + 80LL))(a1, a3, v33);
    return;
  }

  unsigned int v15 = (unint64_t *)(v5 + 64);
  if (!v9)
  {
    do
    {
      unint64_t v17 = __ldaxr(v15);
      if ((v17 & 0x700000000LL) >= a3 << 32) {
        unint64_t v20 = v17;
      }
      else {
        unint64_t v20 = (a3 << 32) | 0x2800000000LL | v17 & 0xFFFFFFF0FFFFFFFFLL;
      }
      unint64_t v21 = v20 | v10;
      if ((v17 & 0x10FFFFFFFFLL) == 0) {
        unint64_t v21 = v21 & 0xFFFFFFC7FFFFFFFFLL | v7;
      }
    }

    while (__stlxr(v21, v15));
    if (((v21 ^ v17) & 0x8000000000LL) != 0) {
      v11 &= 2u;
    }
    else {
      uint64_t v11 = v11;
    }
LABEL_31:
    if (v17 >= 4)
    {
      if ((v17 & 0x700000000LL) < a3 << 32)
      {
        if ((_DWORD)a3) {
          uint64_t v26 = (256LL << (a3 - 1)) | 0xFF;
        }
        else {
          uint64_t v26 = 255LL;
        }
        _pthread_workqueue_override_start_direct_check_owner(v17 | 3, v26, v15);
      }

      if ((v11 & 1) == 0) {
        return;
      }
      if (a1[2] == 0x7FFFFFFF) {
        return;
      }
      unsigned int v27 = a1 + 2;
      do
        int v28 = __ldxr(v27);
      while (__stlxr(v28 - 2, v27));
      if (v28 > 2) {
        return;
      }
      if (v28 == 2)
      {
        _os_object_dispose(a1, (const char *)a2);
        return;
      }

LABEL_40:
    _dispatch_mach_send_drain((unint64_t)a1, 0LL, a4);
    return;
  }

  unint64_t v16 = a3 << 32;
  while (1)
  {
    unint64_t v17 = __ldaxr(v15);
    unint64_t v18 = v17 & 0xFFFFFFD0FFFFFFFFLL | v16 | 0x2800000000LL;
    if ((v17 & 0x700000000LL) >= v16 || v18 == v17) {
      break;
    }
    if ((v17 & 0x10FFFFFFFFLL) == 0) {
      unint64_t v18 = v17 & 0xFFFFFFC0FFFFFFFFLL | v16 & 0xFFFFFFC7FFFFFFFFLL | v7;
    }
    if (!__stxr(v18, v15)) {
      goto LABEL_31;
    }
  }

  __clrex();
}

  if (v17[4] != 3512316172LL) {
    _dispatch_continuation_get_function_symbol_cold_1(v17[4]);
  }
  *(void *)a3 = 17LL;
  unint64_t v16 = *(void (**)(char *))(v17[9] + 16);
  if ((v6 & 2) == 0) {
    goto LABEL_42;
  }
LABEL_38:
  unsigned int v23 = 1;
LABEL_43:
  *(void *)(a3 + 8) = v4;
  *(void *)(a3 + 16) = v5;
  *(void *)(a3 + 24) = v17;
  *(void *)(a3 + 32) = v16;
  *(void *)(a3 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = 0LL;
  *(void *)(a3 + 48) = result;
  *(_BYTE *)(a3 + 56) = v15 | (2 * ((v6 & 0x81) != 0)) | v23;
  if ((v6 & 8) != 0)
  {
    BOOL v24 = *(void *)(v4 + 48);
    if (*(void *)(*(void *)v24 + 40LL) == 514LL) {
      *(void *)(a3 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v24;
    }
  }

  return result;
}

void _dispatch_mach_handle_wlh_change(uint64_t a1)
{
  uint64_t v1 = (unsigned int *)(a1 + 80);
  do
    unsigned int v2 = __ldxr(v1);
  while (__stxr(v2 | 0x8000000, v1));
  if ((v2 & 0x400000) != 0)
  {
    if ((v2 & 0x8000000) == 0)
    {
      if ((*(_WORD *)(a1 + 116) & 0x10) != 0) {
        _dispatch_bug_deprecated("Changing target queue hierarchy after xpc connection was activated");
      }
      else {
        _dispatch_bug_deprecated("Changing target queue hierarchy after mach channel was connected");
      }
    }
  }

  else
  {
    if ((*(_WORD *)(a1 + 116) & 0x10) == 0)
    {
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Changing target queue hierarchy after mach channel was connected";
      __break(1u);
    }

    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Changing target queue hierarchy after xpc connection was activated";
    __break(1u);
  }

void _dispatch_mach_cancel(uint64_t a1)
{
  if (*(_DWORD *)(*(void *)(a1 + 120) + 88LL)) {
    LOBYTE(v2) = 0;
  }
  else {
    int v2 = (*(unsigned __int16 *)(a1 + 118) >> 1) & 1;
  }
  if ((*(_DWORD *)(a1 + 80) & 0x40000000) != 0) {
    char v3 = 1;
  }
  else {
    char v3 = 3;
  }
  uint64_t v4 = *(void *)(a1 + 128);
  if (v4) {
    LOBYTE(v2) = _dispatch_unote_unregister(v4, v3) & v2;
  }
  uint64_t v5 = (unsigned int *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 88);
  int v7 = *(_DWORD *)(v6 + 24);
  if (v7)
  {
    uint64_t v8 = _dispatch_object_alloc(&OBJC_CLASS___OS_dispatch_mach_msg, 112LL);
    *(void *)(v8 + 16) = -1985229329LL;
    *(void *)(v8 + 24) = &off_65340;
    *(_DWORD *)(v8 + 72) = 0;
    *(void *)(v8 + 8_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = 24LL;
    *(_DWORD *)(v8 + 10_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v7;
    *(_DWORD *)(v8 + 48) = -117964793;
    _dispatch_mach_handle_or_push_received_msg(a1, (_DWORD *)v8, 0);
    *(_DWORD *)(v6 + 24) = 0;
  }

  if ((v2 & 1) != 0)
  {
    while (1)
    {
      uint64_t v9 = __ldxr(v5);
      unsigned int v10 = v9 & 0x3FFFFFFF | 0x80000000;
      if (v10 == (_DWORD)v9) {
        break;
      }
      if (!__stxr(v10, v5)) {
        goto LABEL_15;
      }
    }

    __clrex();
LABEL_15:
    if ((v9 & 0xA0000000) != 0)
    {
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corrupt channel state";
      qword_61258 = v9;
      __break(1u);
    }

    else
    {
      if (*(_DWORD *)(a1 + 8) == 0x7FFFFFFF) {
        return;
      }
      uint64_t v11 = (unsigned int *)(a1 + 8);
      do
        int v12 = __ldxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (v12 > 1) {
        return;
      }
    }

    qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
    __break(1u);
    return;
  }

  do
LABEL_21:
    unsigned int v13 = __ldxr(v5);
  while (__stxr(v13 | 0x40000000, v5));
}

void _dispatch_mach_cancel_invoke(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 88);
  if ((a2 & 0x1000000) != 0) {
    uint64_t v4 = objc_autoreleasePoolPush();
  }
  else {
    uint64_t v4 = 0LL;
  }
  if ((*(_WORD *)(a1 + 116) & 4) == 0) {
    _dispatch_mach_connect_invoke(a1);
  }
  _dispatch_client_callout4(*(void *)(v3 + 48), 8LL, 0LL, 0LL, *(uint64_t (**)(void))(v3 + 40));
  if (v4) {
    objc_autoreleasePoolPop(v4);
  }
  *(_WORD *)(a1 + 116) |= 8u;
}

  ;
}

uint64_t OUTLINED_FUNCTION_1_3(char *a1, uint64_t a2, const char *a3)
{
  return snprintf(a1, v3, a3);
}

size_t OUTLINED_FUNCTION_2_1()
{
  return _dispatch_object_debug_attr(v2, (char *)(v0 + v3), v1 - v3);
}

uint64_t OUTLINED_FUNCTION_3_2()
{
  return v0 + v1;
}

char *_dispatch_unote_create_with_handle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    return _dispatch_unote_create(a1, a2, a3);
  }
  else {
    return 0LL;
  }
}

char *_dispatch_unote_create(uint64_t a1, int a2, uint64_t a3)
{
  int v4 = a3;
  if (*(_DWORD *)(a1 + 20))
  {
    if (!a3 && (*(_BYTE *)(a1 + 10) & 4) == 0) {
      return 0LL;
    }
  }

  size_t v7 = *(unsigned int *)(a1 + 24);
  if ((*(_WORD *)(a1 + 12) & 0x100) != 0) {
    uint64_t result = (char *)_dispatch_calloc(1uLL, v7);
  }
  else {
    uint64_t result = (char *)_dispatch_calloc(1uLL, v7 + 24) + 24;
  }
  *(void *)uint64_t result = a1;
  char v8 = result[29] & 0xDF | (32 * (*(_BYTE *)(a1 + 10) & 1));
  result[29] = v8;
  *((_DWORD *)result + 6) = a2;
  result[28] = *(_BYTE *)(a1 + 8);
  *((_DWORD *)result + 8) = v4;
  if ((*(_BYTE *)(a1 + 13) & 1) != 0) {
    result[29] = v8 | 1;
  }
  return result;
}

char *_dispatch_unote_create_without_handle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    return 0LL;
  }
  else {
    return _dispatch_unote_create(a1, 0, a3);
  }
}

void _dispatch_unote_dispose(uint64_t a1)
{
  uint64_t v1 = a1;
  char v2 = *(_BYTE *)(a1 + 29);
  if ((v2 & 0x40) != 0)
  {
    _Block_release(*(const void **)(a1 + 48));
    char v2 = *(_BYTE *)(v1 + 29);
  }

  if ((v2 & 2) != 0)
  {
    if (*(_DWORD *)(v1 + 112) == -1 && *(_DWORD *)(v1 + 116) == -1)
    {
      a1 = *(void *)(v1 + 104);
      if (!a1) {
        goto LABEL_10;
      }
    }

    else
    {
      qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Disposing of timer still in its heap";
      __break(1u);
    }

    free((void *)a1);
    *(void *)(v1 + 104) = 0LL;
    goto LABEL_10;
  }

  BOOL v3 = (v2 & 1) == 0;
  uint64_t v4 = -24LL;
  if (!v3) {
    uint64_t v4 = 0LL;
  }
  v1 += v4;
LABEL_10:
  free((void *)v1);
}

uint64_t _dispatch_unote_register(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((a3 & 0x4600FFFF) == 0x4004000 && MEMORY[0xFFFFFC100]) {
    kdebug_trace(771883044LL, ~*(void *)(a1 + 8), 0LL, 0LL, 0LL);
  }
  *(_DWORD *)(a1 + 36) = a3;
  if ((*(char *)(a1 + 28) + 23) <= 2)
  {
    *(void *)(a1 + 16) = -3LL;
    return 1LL;
  }

  if ((*(_BYTE *)(a1 + 29) & 2) != 0)
  {
    _dispatch_timer_unote_register(a1, a2, a3);
    return 1LL;
  }

  if ((*(_BYTE *)(a1 + 29) & 1) != 0) {
    return _dispatch_unote_register_direct((unsigned int *)a1, a2);
  }
  else {
    return _dispatch_unote_register_muxed(a1);
  }
}

void _dispatch_timer_unote_register(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (((a3 >> 8) & 0xF) - 1 <= 1)
  {
    unsigned int v3 = *(unsigned __int8 *)(a1 + 30);
    if ((v3 & 1) != 0)
    {
      if (MEMORY[0xFFFFFC100])
      {
        uint64_t v4 = a2;
        uint64_t v5 = a1;
        kdebug_trace(771883032LL, ~*(void *)(a1 + 8), 0LL, 0LL, 0LL);
        a2 = v4;
        a1 = v5;
      }
    }

    else
    {
      *(_BYTE *)(a1 + 3_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v3 | 2;
      *(_DWORD *)(a1 + 24) = 3 * ((v3 >> 2) & 3) + (v3 & 1 | 2);
    }
  }

  if ((*(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL) != a2) {
    *(void *)(a1 + 16) = -4LL;
  }
  if (*(void *)(a1 + 104)) {
    _dispatch_timer_unote_configure(a1);
  }
}

void _dispatch_unote_resume(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 29) & 2) != 0)
  {
    _dispatch_timer_unote_resume(a1);
  }

  else if ((*(_BYTE *)(a1 + 29) & 1) != 0)
  {
    _dispatch_unote_resume_direct(a1);
  }

  else
  {
    _dispatch_unote_resume_muxed(a1);
  }

void _dispatch_timer_unote_resume(uint64_t a1)
{
  BOOL v2 = !(*(void *)(55LL - *(void *)(a1 + 8)) >> 55)
    && *(_DWORD *)(a1 + 24) != -1
    && *(void *)(a1 + 80) < 0x7FFFFFFFFFFFFFFFuLL;
  uint64_t v3 = *(void *)(a1 + 16);
  unsigned int v4 = *(unsigned __int8 *)(a1 + 30);
  int v5 = (v4 >> 2) & 3;
  int v6 = v4 & 3;
  int v7 = 3 * v5;
  if ((v3 & 0xFFFFFFFFFFFFFFFCLL) == 0xFFFFFFFFFFFFFFFCLL) {
    char v8 = &_dispatch_timers_heap;
  }
  else {
    char v8 = *(void **)((v3 & 0xFFFFFFFFFFFFFFFCLL) + 48);
  }
  unsigned int v9 = v7 + v6;
  if ((v3 & v2) == 1)
  {
    if (*(_DWORD *)(a1 + 24) == v9)
    {
      if (v2) {
        goto LABEL_11;
      }
LABEL_21:
      if ((v3 & 1) != 0) {
        _os_object_release_internal_n((void *)~*(void *)(a1 + 8), (_BYTE *)&dword_0 + 2);
      }
      return;
    }
  }

  else if ((v3 & 1) == 0)
  {
    if (!v2) {
      return;
    }
    goto LABEL_15;
  }

  _dispatch_timer_unote_disarm(a1, (uint64_t)v8);
  if (!v2) {
    goto LABEL_21;
  }
LABEL_11:
  if ((v3 & 1) != 0)
  {
LABEL_19:
    _dispatch_timer_unote_arm(a1, (uint64_t)v8, v9);
    return;
  }

uint64_t _dispatch_unote_unregister(uint64_t a1, char a2)
{
  if (!*(void *)(a1 + 16)) {
    return 1LL;
  }
  if ((*(char *)(a1 + 28) + 23) <= 2)
  {
    *(void *)(a1 + 16) = 0LL;
    return 1LL;
  }

  if ((*(_BYTE *)(a1 + 29) & 2) != 0)
  {
    _dispatch_timer_unote_unregister(a1);
    return 1LL;
  }

  if ((*(_BYTE *)(a1 + 29) & 1) != 0) {
    return _dispatch_unote_unregister_direct(a1, a2);
  }
  else {
    return _dispatch_unote_unregister_muxed((uint64_t *)a1);
  }
}

void _dispatch_timer_unote_unregister(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
  if (v2 == -4LL) {
    uint64_t v3 = &_dispatch_timers_heap;
  }
  else {
    uint64_t v3 = *(void **)(v2 + 48);
  }
  if ((*(void *)(a1 + 16) & 1) == 0) {
    goto LABEL_9;
  }
  _dispatch_timer_unote_disarm(a1, (uint64_t)v3);
  if (*(_DWORD *)(7LL - *(void *)(a1 + 8)) == 0x7FFFFFFF) {
    goto LABEL_9;
  }
  unsigned int v4 = (unsigned int *)(7LL - *(void *)(a1 + 8));
  do
  {
    unsigned int v5 = __ldxr(v4);
    BOOL v6 = __OFSUB__(v5, 2);
    signed int v7 = v5 - 2;
  }

  while (__stlxr(v7, v4));
  if ((v7 < 0) ^ v6 | (v7 == 0))
  {
    qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
    __break(1u);
  }

  else
  {
LABEL_9:
    char v8 = (unsigned int *)(*(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL);
    unsigned int v10 = v8 + 24;
    do
      int v11 = __ldxr(v10);
    while (__stxr(v11 - 1, v10));
    if (v11 > 0) {
      goto LABEL_18;
    }
    if ((v11 & 0x80000000) == 0)
    {
      *((void *)v8 + 7) = 0xDEAD000000000000LL;
      _dispatch_object_dealloc(v8);
LABEL_18:
      *(void *)(a1 + 16) = 0LL;
      *(_DWORD *)(a1 + 24) = -1;
      return;
    }
  }

  qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
}

_BYTE *_dispatch_source_data_create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 | a2) {
    return 0LL;
  }
  uint64_t result = _dispatch_calloc(1uLL, *(unsigned int *)(a1 + 24));
  *(void *)uint64_t result = a1;
  result[28] = *(_BYTE *)(a1 + 8);
  result[29] |= 1u;
  return result;
}

char *_dispatch_source_signal_create(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2 <= 0x1F) {
    return _dispatch_unote_create_with_handle(a1, a2, a3);
  }
  else {
    return 0LL;
  }
}

void _dispatch_timer_unote_configure(uint64_t a1)
{
  unint64_t v2 = (unint64_t *)(a1 + 104);
  do
    uint64_t v3 = (_BYTE *)__ldxr(v2);
  while (__stxr(0LL, v2));
  unsigned int v4 = *(unsigned __int8 *)(a1 + 30);
  if (*((_DWORD *)v3 + 6) != ((v4 >> 2) & 3))
  {
    char v5 = v4 & 0xF3;
    *(_BYTE *)(a1 + 3_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v5;
    *(_BYTE *)(a1 + 3_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v5 | (4 * v3[24]);
  }

  __int128 v6 = *(_OWORD *)v3;
  *(void *)(a1 + 96) = *((void *)v3 + 2);
  *(_OWORD *)(a1 + 8_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v6;
  free(v3);
  *(void *)(a1 + 72) = 0LL;
  if ((*(void *)(a1 + 16) & 1) != 0) {
    _dispatch_timer_unote_resume(a1);
  }
}

double _dispatch_source_timer_create(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((a3 & 1) != 0) {
    unsigned int v3 = a3 & 0xFFFFFFFD;
  }
  else {
    unsigned int v3 = a3;
  }
  if ((v3 & ~*(_DWORD *)(a1 + 20)) != 0) {
    return result;
  }
  unsigned int v4 = (char **)a1;
  if ((*(_BYTE *)(a1 + 11) & 0x10) != 0)
  {
    if (!a2) {
      return result;
    }
LABEL_16:
    char v5 = (unsigned __int8 *)_dispatch_calloc(1uLL, *((unsigned int *)v4 + 6));
    *(void *)char v5 = v4;
    v5[28] = *((_BYTE *)v4 + 8);
    v5[29] |= 2u;
    unsigned int v6 = *((unsigned __int8 *)v4 + 11) | v3 | v5[30];
    v5[30] = v6;
    *((_DWORD *)v5 + 6) = 3 * ((v6 >> 2) & 3) + (v6 & 3);
    double result = NAN;
    *((void *)v5 + 14) = -1LL;
    *((void *)v5 + 1_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = -1LL;
    *((void *)v5 + 1_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = -1LL;
    *((void *)v5 + 12) = -1LL;
    return result;
  }

  if (*(unsigned __int8 *)(a1 + 8) != 236)
  {
    switch(a2)
    {
      case 0LL:
        goto LABEL_16;
      case 1LL:
        goto LABEL_15;
      case 2LL:
        v3 |= 4u;
        goto LABEL_15;
      case 3LL:
        v3 |= 8u;
LABEL_15:
        unsigned int v4 = &_dispatch_source_type_timer_with_clock;
        goto LABEL_16;
      default:
        return result;
    }
  }

  if (!a2) {
    goto LABEL_16;
  }
  return result;
}

void _dispatch_event_loop_drain_timers(uint64_t a1, unsigned int a2)
{
  uint64_t v62 = 0LL;
  uint64_t v63 = 0LL;
  uint64_t v64 = 0LL;
  uint64_t v3 = a2;
  do
  {
    if (!a2)
    {
      *(_BYTE *)(a1 + 6) = 0;
      return;
    }

    uint64_t v4 = 0LL;
    do
    {
      uint64_t v5 = a1 + 32 * v4;
      uint64_t v8 = *(void *)(v5 + 8);
      unsigned int v6 = (uint64_t *)(v5 + 8);
      uint64_t v7 = v8;
      if (v8)
      {
        unint64_t v9 = v4 / 3uLL;
        while (1)
        {
          unint64_t v10 = *(&v62 + v9);
          if (!v10)
          {
            mach_get_times(&v62, &v63, &v65);
            uint64_t v64 = v66 + 1000000000 * v65;
            unint64_t v10 = *(&v62 + v9);
          }

          unint64_t v11 = *(void *)(v7 + 80);
          BOOL v12 = v10 >= v11;
          unint64_t v13 = v10 - v11;
          if (!v12) {
            goto LABEL_47;
          }
          if ((*(_BYTE *)(v7 + 30) & 0x40) != 0)
          {
            _dispatch_timer_unote_disarm(v7, a1);
            int v14 = (unsigned int *)(*(void *)(v7 + 16) & 0xFFFFFFFFFFFFFFFCLL);
            if (v14 != (unsigned int *)-4LL && v14 != 0LL)
            {
              unint64_t v16 = v14 + 24;
              do
                int v17 = __ldxr(v16);
              while (__stxr(v17 - 1, v16));
              if (v17 <= 0)
              {
                if (v17 < 0) {
                  _os_object_allows_weak_reference_cold_1();
                }
                *((void *)v14 + 7) = 0xDEAD000000000000LL;
                _dispatch_object_dealloc(v14);
              }
            }

            *(void *)(v7 + 16) = 0LL;
            *(void *)(v7 + 72) = 2LL;
            goto LABEL_23;
          }

          if (!*(void *)(v7 + 104)) {
            break;
          }
          _dispatch_timer_unote_configure(v7);
LABEL_24:
          uint64_t v7 = *v6;
          if (!*v6) {
            goto LABEL_47;
          }
        }

        if (*(void *)(v7 + 72))
        {
          uint64_t v26 = (unint64_t *)(v7 + 72);
          _dispatch_timer_unote_disarm(v7, a1);
          do
            unint64_t v27 = __ldxr(v26);
          while (__stxr(v27 | 1, v26));
        }

        else
        {
          unint64_t v18 = *(void *)(v7 + 96);
          unint64_t v19 = v13 / v18;
          if (v19 + 1 < 0x7FFFFFFFFFFFFFFFLL) {
            uint64_t v20 = v19 + 1;
          }
          else {
            uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
          }
          if (v18 > 0x7FFFFFFFFFFFFFFELL)
          {
            unint64_t v21 = -1LL;
            *(void *)(v7 + 8_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = -1LL;
            *(void *)(v7 + 88) = -1LL;
          }

          else
          {
            unint64_t v21 = v20 * v18 + v11;
            unint64_t v22 = *(void *)(v7 + 88) + v20 * v18;
            *(void *)(v7 + 8_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v21;
            *(void *)(v7 + 88) = v22;
          }

          uint64_t v23 = 2 * v20;
          if (*(void *)(55LL - *(void *)(v7 + 8)) >> 55)
          {
            if (MEMORY[0xFFFFFC100]) {
              kdebug_trace(771883036LL, ~*(void *)(v7 + 8), 0LL, 0LL, 0LL);
            }
          }

          else if (*(_DWORD *)(v7 + 24) != -1 && v21 <= 0x7FFFFFFFFFFFFFFELL)
          {
            if (*(_DWORD *)(7LL - *(void *)(v7 + 8)) != 0x7FFFFFFF)
            {
              BOOL v24 = (unsigned int *)(7LL - *(void *)(v7 + 8));
              do
                int v25 = __ldxr(v24);
              while (__stxr(v25 + 2, v24));
              if (v25 <= 0) {
                dispatch_set_target_queue_cold_2();
              }
            }

            _dispatch_timer_unote_arm(v7, a1, v4);
            *(void *)(v7 + 72) = v23;
            goto LABEL_23;
          }

          _dispatch_timer_unote_disarm(v7, a1);
          atomic_store(v23 | 1, (unint64_t *)(v7 + 72));
        }

double _dispatch_timer_unote_disarm(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  uint64_t v5 = a2 + 32 * v4;
  int v6 = *(_DWORD *)v5;
  unsigned int v7 = *(_DWORD *)v5 - 2;
  *(_DWORD *)uint64_t v5 = v7;
  if (v6 == 2)
  {
    *(_BYTE *)(v5 + 7) |= 2u;
    *(void *)(v5 + 8) = 0LL;
    *(void *)(v5 + 16) = 0LL;
  }

  else
  {
    uint64_t v8 = 0LL;
    unint64_t v9 = (_BYTE *)(v5 + 4);
    unint64_t v10 = (void *)(v5 + 24);
    char v11 = 1;
    do
    {
      char v12 = v11;
      unsigned int v13 = v7 + v8;
      if (v7 + v8 > 1)
      {
        int v15 = *v9;
        unsigned int v16 = v13 - 2;
        unsigned int v17 = __clz(v16 | 7);
        unint64_t v18 = (void *)(v5 + 24);
        if (30 - v17 != v15) {
          unint64_t v18 = (void *)(*v10 + 8LL * ((8 << (v15 - 2)) + v17 - 30));
        }
        if (v17 == 29) {
          int v19 = 0;
        }
        else {
          int v19 = -8 << (28 - v17);
        }
        int v14 = (uint64_t *)(*v18 + 8LL * (v19 + v16));
      }

      else
      {
        int v14 = (uint64_t *)(a2 + 32 * v4 + 8LL * v13 + 8);
      }

      uint64_t v20 = *v14;
      *int v14 = 0LL;
      if (v20 != a1) {
        _dispatch_timer_heap_resift(v5, v20, *(_DWORD *)(a1 + 4 * v8 + 112));
      }
      char v11 = 0;
      uint64_t v8 = 1LL;
    }

    while ((v12 & 1) != 0);
    int v21 = *v9;
    unsigned int v22 = (8 << (v21 - 2)) - v21 + 4;
    int v23 = v21 - 1;
    if (!v23) {
      unsigned int v22 = 2;
    }
    if (v7 <= v22)
    {
      *unint64_t v9 = v23;
      BOOL v24 = (void *)*v10;
      if ((_BYTE)v23)
      {
        int v25 = v23;
        unsigned int v26 = 8 << (v23 - 1);
        uint64_t v27 = v24[v26 - v23];
        unsigned int v28 = v23 - 1;
        if (v25 != 1) {
          memcpy((void *)(v27 + 8LL * ((v26 >> 1) - v28)), &v24[v26 - v28], 8LL * v28);
        }
      }

      else
      {
        uint64_t v27 = 0LL;
      }

      *unint64_t v10 = v27;
      free(v24);
    }
  }

  double result = NAN;
  *(void *)(a1 + 112) = -1LL;
  *(_BYTE *)(a2 + 6) |= (1 << (v4 % 3)) | 0x80;
  *(void *)(a1 + 16) &= ~1uLL;
  return result;
}

uint64_t _dispatch_timer_unote_arm(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v5 = result;
  if ((*(void *)(result + 16) & 1) != 0)
  {
    _dispatch_timer_heap_resift(a2 + 32LL * a3, result, *(_DWORD *)(result + 112));
    double result = _dispatch_timer_heap_resift(a2 + 32LL * a3, v5, *(_DWORD *)(v5 + 116));
  }

  else
  {
    *(_DWORD *)(result + 24) = a3;
    uint64_t v6 = a2 + 32LL * a3;
    unsigned int v7 = *(_DWORD *)v6;
    unsigned int v8 = *(_DWORD *)v6 + 2;
    *(_DWORD *)uint64_t v6 = v8;
    unsigned int v9 = *(_DWORD *)(result + 36);
    unsigned int v10 = (v9 >> 8) & 0xF;
    unsigned int v11 = (unsigned __int16)v9 >> 12;
    if (v10 > v11) {
      unsigned int v11 = v10;
    }
    if (v11 > *(unsigned __int8 *)(v6 + 5))
    {
      *(_BYTE *)(v6 + 5) = v11;
      *(_BYTE *)(v6 + 7) |= 2u;
    }

    if (v7)
    {
      if (*(_BYTE *)(a2 + 32LL * a3 + 4))
      {
        int v12 = *(unsigned __int8 *)(a2 + 32LL * a3 + 4);
        unsigned int v13 = (8 << (v12 - 1)) - v12 + 3;
      }

      else
      {
        unsigned int v13 = 2;
      }

      if (v8 > v13) {
        _dispatch_timer_heap_grow(a2 + 32LL * a3);
      }
      _dispatch_timer_heap_resift(a2 + 32LL * a3, v5, v7);
      double result = _dispatch_timer_heap_resift(a2 + 32LL * a3, v5, v7 + 1);
    }

    else
    {
      uint64_t v14 = a2 + 32LL * a3;
      *(_BYTE *)(v14 + 7) |= 2u;
      *(void *)(result + 112) = 0x100000000LL;
      *(int64x2_t *)(v14 + 8) = vdupq_n_s64(result);
    }

    *(void *)(v5 + 16) |= 1uLL;
  }

  *(_BYTE *)(a2 + 6) |= (1 << (a3 % 3)) | 0x80;
  return result;
}

uint64_t _dispatch_timer_heap_resift(uint64_t result, uint64_t a2, unsigned int a3)
{
  unsigned int v3 = *(_DWORD *)result;
  uint64_t v4 = a3 & 1;
  int v5 = *(unsigned __int8 *)(result + 4);
  unsigned int v6 = a3 - 2;
  if (a3 < 2)
  {
    unsigned int v7 = (void *)(result + 8LL * a3 + 8);
LABEL_22:
    unsigned int v19 = a3 & 1;
    unsigned int v20 = 2 * a3 - v19 + 2;
    if (v20 < v3)
    {
      int v21 = (void *)(result + 24);
      int v22 = (8 << (v5 - 2)) - 30;
      while (1)
      {
        if (v20 > 1)
        {
          unsigned int v23 = __clz((v20 - 2) | 7);
          BOOL v24 = (uint64_t *)(result + 24);
          if (30 - v23 != v5) {
            BOOL v24 = (uint64_t *)(*v21 + 8LL * (v22 + v23));
          }
          uint64_t v25 = *v24;
          int v26 = v23 == 29 ? 0 : -8 << (28 - v23);
          unsigned int v13 = (void *)(v25 + 8LL * (v26 + v20 - 2));
        }

        else
        {
          unsigned int v13 = (void *)(result + 8LL * v20 + 8);
        }

        uint64_t v27 = *v13;
        if (v20 + 2 >= v3)
        {
          unsigned int v12 = v20;
        }

        else
        {
          if (v20 < 0xFFFFFFFE)
          {
            unsigned int v29 = __clz(v20 | 7);
            unint64_t v30 = (uint64_t *)(result + 24);
            if (30 - v29 != v5) {
              unint64_t v30 = (uint64_t *)(*v21 + 8LL * (v22 + v29));
            }
            uint64_t v31 = *v30;
            int v32 = v29 == 29 ? 0 : -8 << (28 - v29);
            unsigned int v28 = (void *)(v31 + 8LL * (v32 + v20));
          }

          else
          {
            unsigned int v28 = (void *)(result + 8LL * (v20 + 2) + 8);
          }

          unsigned int v12 = v20;
          if (*(void *)(v27 + 8 * v4 + 80) > *(void *)(*v28 + 8 * v4 + 80))
          {
            unsigned int v12 = v20 + 2;
            uint64_t v27 = *v28;
            unsigned int v13 = v28;
          }
        }

        if (*(void *)(a2 + 80 + 8 * v4) <= *(void *)(v27 + 8 * v4 + 80)) {
          break;
        }
        if (a3 <= 1) {
          *(_BYTE *)(result + 7) |= 2u;
        }
        *unsigned int v7 = v27;
        *(_DWORD *)(v27 + 4LL * v19 + 112) = a3;
        unsigned int v19 = v12 & 1;
        unsigned int v20 = 2 * v12 - v19 + 2;
        a3 = v12;
        unsigned int v7 = v13;
        if (v20 >= v3) {
          goto LABEL_50;
        }
      }
    }

    unsigned int v13 = v7;
    unsigned int v12 = a3;
LABEL_50:
    a3 = v12;
    unsigned int v7 = v13;
    if (v12 <= 1)
    {
LABEL_51:
      *(_BYTE *)(result + 7) |= 2u;
      a3 = v12;
      unsigned int v7 = v13;
    }

    goto LABEL_52;
  }

  unsigned int v8 = __clz(v6 | 7);
  if (30 - v8 == v5) {
    unsigned int v9 = (void *)(result + 24);
  }
  else {
    unsigned int v9 = (void *)(*(void *)(result + 24) + 8LL * (v8 + (8 << (v5 - 2)) - 30));
  }
  char v10 = 0;
  if (v8 == 29) {
    int v11 = 0;
  }
  else {
    int v11 = -8 << (28 - v8);
  }
  unsigned int v7 = (void *)(*v9 + 8LL * (v11 + v6));
  while (1)
  {
    unsigned int v12 = a3 & 1 | (2 * ((a3 - 2) >> 2));
    if (v12 > 1)
    {
      unsigned int v14 = __clz((v12 - 2) | 7);
      int v15 = (uint64_t *)(result + 24);
      if (30 - v14 != v5) {
        int v15 = (uint64_t *)(*(void *)(result + 24) + 8LL * ((8 << (v5 - 2)) - 30 + v14));
      }
      uint64_t v16 = *v15;
      int v17 = v14 == 29 ? 0 : -8 << (28 - v14);
      unsigned int v13 = (void *)(v16 + 8LL * (v17 + v12 - 2));
    }

    else
    {
      unsigned int v13 = (void *)(result + 8LL * v12 + 8);
    }

    uint64_t v18 = *v13;
    if (*(void *)(*v13 + 8 * v4 + 80) <= *(void *)(a2 + 80 + 8 * v4)) {
      break;
    }
    *unsigned int v7 = v18;
    *(_DWORD *)(v18 + 4LL * (a3 & 1) + 112) = a3;
    char v10 = 1;
    a3 = a3 & 1 | (2 * ((a3 - 2) >> 2));
    unsigned int v7 = v13;
    if (v12 <= 1) {
      goto LABEL_51;
    }
  }

  if ((v10 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_52:
  *unsigned int v7 = a2;
  *(_DWORD *)(a2 + 4LL * (a3 & 1) + 112) = a3;
  return result;
}

char *_dispatch_timer_heap_grow(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 4);
  *(_BYTE *)(a1 + 4) = v2 + 1;
  uint64_t v3 = *(void *)(a1 + 24);
  if (v2) {
    size_t v4 = (8 << (v2 - 1));
  }
  else {
    size_t v4 = 8LL;
  }
  double result = (char *)_dispatch_calloc(v4, 8uLL);
  unsigned int v6 = result;
  if (v2 >= 2)
  {
    double result = (char *)memcpy( &result[8 * (v4 - (v2 - 1))],  (const void *)(v3 + 8LL * ((v4 >> 1) - (v2 - 1))),  8LL * (v2 - 1));
LABEL_7:
    *(void *)&v6[8 * (v4 - v2)] = v3;
    goto LABEL_8;
  }

  if (v2) {
    goto LABEL_7;
  }
LABEL_8:
  *(void *)(a1 + 24) = v6;
  return result;
}

uint64_t _dispatch_sync_ipc_handoff_begin(uint64_t a1, unsigned int a2, uint64_t a3)
{
  v4[0] = a2;
  v4[1] = 655343LL;
  _OWORD v4[2] = a1;
  int v5 = -2147483392;
  uint64_t v7 = 0LL;
  uint64_t v6 = 0LL;
  int v8 = 0;
  uint64_t v9 = a3;
  uint64_t v10 = -1LL;
  uint64_t v11 = a1;
  uint64_t result = _dispatch_kq_immediate_update(a1, (uint64_t)v4);
  if ((result & 0xFFFFFFFD) != 0) {
    _dispatch_sync_ipc_handoff_begin_cold_1(result);
  }
  return result;
}

uint64_t _dispatch_kq_immediate_update(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  if (v2 && *(void *)(v2 + 24) == a1)
  {
    uint64_t v3 = *(void *)(v2 + 32);
    uint64_t v4 = *(unsigned __int16 *)(v2 + 40);
    if (*(_WORD *)(v2 + 40))
    {
      uint64_t v5 = 0LL;
      uint64_t v6 = (unsigned __int16 *)(v3 + 8);
      uint64_t v7 = (unsigned __int16 *)(v3 + 8);
      while (1)
      {
        int v8 = *v7;
        v7 += 36;
        if (v8 == *(unsigned __int16 *)(a2 + 8)
          && *((void *)v6 - 1) == *(void *)a2
          && *((void *)v6 + 1) == *(void *)(a2 + 16))
        {
          break;
        }

        ++v5;
        uint64_t v6 = v7;
        if (v4 == v5) {
          return _dispatch_kq_drain(a1, a2, 1LL, 3LL);
        }
      }
    }

    else
    {
      LODWORD(v5) = 0;
    }

    if (v5 < v4)
    {
      unsigned __int16 v9 = v4 - 1;
      *(_WORD *)(v2 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v9;
      if ((_DWORD)v5 != v9)
      {
        uint64_t v10 = v3 + 72LL * v5;
        uint64_t v11 = v3 + 72LL * v9;
        *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
        __int128 v12 = *(_OWORD *)(v11 + 16);
        __int128 v13 = *(_OWORD *)(v11 + 32);
        __int128 v14 = *(_OWORD *)(v11 + 48);
        *(void *)(v10 + 64) = *(void *)(v11 + 64);
        *(_OWORD *)(v10 + 32) = v13;
        *(_OWORD *)(v10 + 48) = v14;
        *(_OWORD *)(v10 + 16) = v12;
      }
    }
  }

  return _dispatch_kq_drain(a1, a2, 1LL, 3LL);
}

double _dispatch_sync_ipc_handoff_end(uint64_t a1, unsigned int a2)
{
  v3[0] = a2;
  v3[1] = 524271LL;
  v3[2] = a1;
  unsigned int v4 = 0x80000000;
  __int128 v5 = 0u;
  memset(v6, 0, sizeof(v6));
  *(void *)&double result = _dispatch_kq_deferred_update(a1, (uint64_t)v3).n128_u64[0];
  return result;
}

__n128 _dispatch_kq_deferred_update(uint64_t a1, uint64_t a2)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v3 = *(void *)(StatusReg + 232);
  if (v3 && *(void *)(v3 + 24) == a1 && (int v5 = *(unsigned __int16 *)(v3 + 42), *(_WORD *)(v3 + 42)))
  {
    uint64_t v6 = *(unsigned __int16 *)(v3 + 40);
    if (*(_WORD *)(v3 + 40))
    {
      uint64_t v7 = 0LL;
      uint64_t v8 = *(void *)(v3 + 32) + 8LL;
      unsigned __int16 v9 = (unsigned __int16 *)v8;
      while (1)
      {
        int v10 = *v9;
        v9 += 36;
        if (v10 == *(unsigned __int16 *)(a2 + 8)
          && *(void *)(v8 - 8) == *(void *)a2
          && *(void *)(v8 + 8) == *(void *)(a2 + 16))
        {
          break;
        }

        ++v7;
        uint64_t v8 = (uint64_t)v9;
        if (v6 == v7)
        {
          LODWORD(v7) = *(unsigned __int16 *)(v3 + 40);
          break;
        }
      }
    }

    else
    {
      LODWORD(v7) = 0;
    }

    if (a1 != -4) {
      *(void *)(StatusReg + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = 1LL;
    }
    if ((_DWORD)v7 == v5)
    {
      *(_WORD *)(v3 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = 1;
      uint64_t v14 = a2;
      uint64_t v15 = v3;
      _dispatch_kq_drain(a1, *(void *)(v3 + 32), v6, 3LL);
      a2 = v14;
      uint64_t v3 = v15;
      LODWORD(v7) = 0;
    }

    else if ((_DWORD)v7 == (_DWORD)v6)
    {
      *(_WORD *)(v3 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v6 + 1;
      LODWORD(v7) = v6;
    }

    uint64_t v11 = *(void *)(v3 + 32) + 72LL * v7;
    *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
    __n128 result = *(__n128 *)(a2 + 16);
    __int128 v12 = *(_OWORD *)(a2 + 32);
    __int128 v13 = *(_OWORD *)(a2 + 48);
    *(void *)(v11 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(v11 + 32) = v12;
    *(_OWORD *)(v11 + 48) = v13;
    *(__n128 *)(v11 + 16) = result;
  }

  else
  {
    _dispatch_kq_drain(a1, a2, 1LL, 3LL);
  }

  return result;
}

uint64_t _dispatch_unote_register_muxed(uint64_t a1)
{
  unint64_t v2 = *(unsigned int *)(a1 + 24);
  int v3 = *(char *)(a1 + 28);
  unint64_t v4 = v2 >> 8;
  if ((v3 | 0x10) != 0xFFFFFFF8) {
    LODWORD(v4) = *(_DWORD *)(a1 + 24);
  }
  int v5 = (void **)((char *)&_dispatch_sources + 8 * (v4 & 0x3F));
  uint64_t v6 = *v5;
  if (!*v5)
  {
LABEL_7:
    int64_t v7 = (int64_t)_dispatch_calloc(1uLL, 0x60uLL);
    uint64_t v6 = (void *)v7;
    *(void *)(v7 + 24) = *(unsigned int *)(a1 + 24);
    uint64_t v8 = v7 + 24;
    __int16 v9 = *(_WORD *)(*(void *)a1 + 12LL) | 5;
    unsigned int v10 = *(_DWORD *)(*(void *)a1 + 16LL) | *(_DWORD *)(a1 + 32);
    uint64_t v11 = *(unsigned __int16 *)(*(void *)a1 + 14LL);
    *(_WORD *)(v7 + 32) = *(char *)(*(void *)a1 + 8LL);
    *(_WORD *)(v7 + 34) = v9;
    *(void *)(v7 + 48) = v10;
    *(void *)(v7 + 56) = v11;
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 8_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = 0u;
    *(_DWORD *)(v7 + 36) = 0x2000000;
    *(void *)(v7 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v7 | 1;
    __int128 v12 = *(uint64_t (**)(int64_t, uint64_t))(*(void *)a1 + 40LL);
    if (v12)
    {
      if ((v12(v7, v8) & 1) == 0) {
        goto LABEL_9;
      }
    }

    else if (_dispatch_kq_immediate_update(-4LL, v8))
    {
LABEL_9:
      free(v6);
      return 0LL;
    }

    *((_WORD *)v6 + 17) &= 0xFDFEu;
    uint64_t v18 = *v5;
    void *v6 = *v5;
    if (v18) {
      v18[1] = v6;
    }
    *int v5 = v6;
    v6[1] = v5;
    goto LABEL_18;
  }

  while (v6[3] != v2 || *((unsigned __int16 *)v6 + 16) != (unsigned __int16)v3)
  {
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_7;
    }
  }

  int v14 = *(_DWORD *)(a1 + 32);
  int v15 = *((_DWORD *)v6 + 12);
  int v16 = v14 & ~v15;
  if (v16)
  {
    *((_DWORD *)v6 + 12) = v15 | v14;
    int v17 = *(uint64_t (**)(void *))(*(void *)a1 + 40LL);
    if (v17)
    {
      if ((v17(v6) & 1) == 0) {
        goto LABEL_13;
      }
    }

    else if (_dispatch_kq_immediate_update(-4LL, (uint64_t)(v6 + 3)))
    {
LABEL_13:
      uint64_t result = 0LL;
      *((_DWORD *)v6 + 12) &= ~v16;
      return result;
    }
  }

LABEL_18:
  unsigned int v19 = v6 + 2;
  uint64_t v20 = v6[2];
  *(void *)(a1 - 24) = v20;
  uint64_t v21 = a1 - 24;
  if (v20) {
    *(void *)(v20 + 8) = v21;
  }
  *unsigned int v19 = v21;
  *(void *)(a1 - 16) = v19;
  *(void *)(a1 - 8) = v6;
  *(void *)(a1 + 16) = -3LL;
  return 1LL;
}

    int64_t v7 = _voucher_find_and_retain(v6);
    if (v7)
    {
      if (!v1 || *(_DWORD *)(v1 + 36))
      {
        _voucher_dealloc_mach_voucher(v6);
        return v7;
      }

      __int16 v9 = _os_object_alloc_realized((objc_class *)&OBJC_CLASS___OS_voucher, 80LL);
    }

    else
    {
      uint64_t v8 = _os_object_alloc_realized((objc_class *)&OBJC_CLASS___OS_voucher, 80LL);
      __int16 v9 = v8;
      if (!v1)
      {
        v8[8] = v6;
        goto LABEL_26;
      }
    }

    *((_OWORD *)v9 + 3) = *(_OWORD *)(v1 + 48);
    *((void *)v9 + 8) = *(void *)(v1 + 64);
    v9[8] = v6;
    if (!*(_DWORD *)(v1 + 36))
    {
      if (v7)
      {
        *((void *)v9 + 5) = v7;
        _voucher_dealloc_mach_voucher(v6);
      }

      return (uint64_t)v9;
    }

  if (MEMORY[0xFFFFFC100]) {
    kdebug_trace( 772145172LL,  *a2,  a2[1],  ((unint64_t)v25 << 40) | (v22 << 48) | v21 & 0xFFFFFFFFFFLL,  (v24 << 40) | (v23 << 48) | v14);
  }
  if ((v21 & 3) != 0) {
    _dispatch_gate_broadcast_slow((uint64_t)v7, v21);
  }
  if ((~v21 & 0xFF00000000LL) == 0) {
    firehose_buffer_update_limits(a1);
  }
  if (*(_BYTE *)(a1 + 1568) == 1)
  {
    int v40 = (unsigned __int8 *)(a1 + 1568);
    while (1)
    {
      uint64_t v41 = __ldxr(v40);
      if (v41 != 1) {
        break;
      }
      if (!__stxr(2u, v40))
      {
        firehose_client_start_quarantine(a1);
        return v16;
      }
    }

    __clrex();
  }

  return v16;
}

void _dispatch_unote_resume_muxed(uint64_t a1)
{
  *(void *)(a1 + 16) |= 1uLL;
  uint64_t v2 = a1 - 8;
  uint64_t v1 = *(void *)(a1 - 8);
  int v3 = *(void (**)(uint64_t))(*(void *)(v2 + 8) + 40LL);
  if (v3) {
    v3(v1);
  }
  else {
    _dispatch_kq_deferred_update(-4LL, v1 + 24);
  }
}

uint64_t _dispatch_unote_unregister_muxed(uint64_t *a1)
{
  uint64_t v1 = (__int16 *)*(a1 - 1);
  if (v1[16] == -24) {
    *((_BYTE *)a1 + 3_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = 0;
  }
  a1[2] = 0LL;
  uint64_t v2 = *(a1 - 3);
  if (v2) {
    *(void *)(v2 + 8) = *(a1 - 2);
  }
  *(void *)*(a1 - 2) = v2;
  *(a1 - _dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = 0LL;
  uint64_t v3 = *((void *)v1 + 2);
  if (v3)
  {
    int v4 = *(_DWORD *)(*a1 + 16);
    int v5 = (uint64_t *)*((void *)v1 + 2);
    do
    {
      uint64_t v6 = v5;
      v4 |= *((_DWORD *)v5 + 14);
      int v5 = (uint64_t *)*v5;
    }

    while (v5);
    int v7 = *((_DWORD *)v1 + 12);
    if ((v7 & ~v4) == 0) {
      goto LABEL_13;
    }
    a1 = v6 + 3;
    *((_DWORD *)v1 + 12) = v7 & v4;
LABEL_11:
    __int16 v9 = *(uint64_t (**)(__int16 *))(*a1 + 40);
    if (v9)
    {
      if ((v9(v1) & 1) == 0) {
        _dispatch_unote_unregister_muxed_cold_1();
      }
    }

    else
    {
      _dispatch_kq_deferred_update(-4LL, v1 + 12);
    }

LABEL_13:
    if (v3) {
      return 1LL;
    }
    goto LABEL_14;
  }

  __int16 v8 = v1[17];
  v1[17] = v8 | 2;
  if ((v8 & 2) == 0) {
    goto LABEL_11;
  }
LABEL_14:
  uint64_t v10 = *(void *)v1;
  if (*(void *)v1) {
    *(void *)(v10 + 8) = *((void *)v1 + 1);
  }
  **((void **)v1 + _dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = v10;
  free(v1);
  return 1LL;
}

  os_retain((void *)v1);
  return v1;
}

uint64_t _dispatch_unote_register_direct(unsigned int *a1, uint64_t a2)
{
  return _dispatch_kq_unote_update(a2, a1, 5);
}

uint64_t _dispatch_kq_unote_update(uint64_t result, unsigned int *a2, __int16 a3)
{
  __int16 v3 = a3;
  int v5 = (unsigned int *)result;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v7 = *(void *)(StatusReg + 232);
  if ((a3 & 1) != 0)
  {
    if (result != -4)
    {
      if (result)
      {
        __int16 v8 = (unsigned int *)(result + 96);
        do
          unsigned int v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
        if ((v9 & 0x80000000) != 0)
        {
          qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
          __break(1u);
LABEL_69:
          *(_WORD *)(v7 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = 1;
          uint64_t result = _dispatch_kq_drain(result, *(void *)(v7 + 32));
          LODWORD(v23) = 0;
          uint64_t v21 = a2[6];
          goto LABEL_49;
        }
      }
    }

    *((void *)a2 + 2) = result | 1;
  }

  if (!v7 || *(void *)(v7 + 24) != result) {
    goto LABEL_10;
  }
  uint64_t v21 = a2[6];
  uint64_t v22 = *(void *)(v7 + 32);
  uint64_t v23 = *(unsigned __int16 *)(v7 + 40);
  if (*(_WORD *)(v7 + 40))
  {
    uint64_t v24 = 0LL;
    uint64_t v25 = (unsigned __int16 *)(v22 + 8);
    int v26 = (unsigned __int16 *)(v22 + 8);
    while (1)
    {
      int v27 = *v26;
      v26 += 36;
      if (v27 == (unsigned __int16)*((char *)a2 + 28)
        && *((void *)v25 - 1) == v21
        && *((unsigned int **)v25 + 1) == a2)
      {
        break;
      }

      ++v24;
      uint64_t v25 = v26;
      if (v23 == v24)
      {
        LODWORD(v24) = *(unsigned __int16 *)(v7 + 40);
        goto LABEL_42;
      }
    }
  }

  else
  {
    LODWORD(v24) = 0;
  }

  if (v24 >= v23)
  {
LABEL_42:
    if ((v3 & 5) != 4) {
      goto LABEL_10;
    }
  }

  else
  {
    v3 |= *(_WORD *)(v22 + 72LL * v24 + 10) & 4;
    if ((v3 & 5) != 4)
    {
      *(_WORD *)(v7 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v23 - 1;
      if ((_DWORD)v24 != (unsigned __int16)(v23 - 1))
      {
        uint64_t v28 = v22 + 72LL * v24;
        uint64_t v29 = v22 + 72LL * (unsigned __int16)(v23 - 1);
        *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
        __int128 v30 = *(_OWORD *)(v29 + 16);
        __int128 v31 = *(_OWORD *)(v29 + 32);
        __int128 v32 = *(_OWORD *)(v29 + 48);
        *(void *)(v28 + 64) = *(void *)(v29 + 64);
        *(_OWORD *)(v28 + 32) = v31;
        *(_OWORD *)(v28 + 48) = v32;
        *(_OWORD *)(v28 + 16) = v30;
      }

uint64_t _dispatch_unote_resume_direct(uint64_t a1)
{
  *(void *)(a1 + 16) |= 1uLL;
  return _dispatch_kq_unote_update(*(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL, (unsigned int *)a1, 4);
}

uint64_t _dispatch_unote_unregister_direct(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v6 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  int v7 = 2;
  if ((v4 & 0xFFFFFFFFFFFFFFFCLL) != 0xFFFFFFFFFFFFFFFCLL && v6 != 0)
  {
    if (*(void *)(v6 + 24) == v5)
    {
      a2 |= 5u;
      int v7 = 6;
    }

    else
    {
      int v7 = 2;
    }
  }

  if ((v4 & 2) != 0 && (a2 & 1) == 0) {
    goto LABEL_10;
  }
  if (v4 == 2)
  {
    *(void *)(a1 + 16) = 0LL;
    return 1LL;
  }

  if ((v4 & 1) != 0)
  {
    unsigned int v10 = v7;
  }

  else
  {
    a2 |= 4u;
    unsigned int v10 = 6;
  }

  BOOL v11 = v10 <= 3 && (a2 & 2) == 0;
LABEL_10:
  if ((a2 & 4) != 0) {
    _dispatch_unote_unregister_direct_cold_1();
  }
  return 0LL;
}

void _dispatch_event_loop_atfork_child()
{
  _dispatch_mach_host_port_pred = 0LL;
  _dispatch_mach_host_port = 0;
}

void _dispatch_event_loop_poke(dispatch_object_s *a1, uint64_t a2, dispatch_queue_s *a3)
{
  if (a1 == (dispatch_object_s *)-8LL)
  {
    uint64_t v31 = 65526LL;
    memset(v33, 0, sizeof(v33));
    __int128 v34 = 0u;
    __int128 v30 = (dispatch_object_s *)(&dword_0 + 1);
    uint64_t v32 = -8LL;
    LODWORD(v33[0]) = 0x1000000;
    _dispatch_kq_deferred_update(-4LL, (uint64_t)&v30);
    return;
  }

  if (a1 == (dispatch_object_s *)-4LL || !a1) {
    goto LABEL_55;
  }
  if ((a2 & 0x4000000000LL) != 0)
  {
    __int16 v3 = (dispatch_queue_s *)&_dispatch_mgr_q;
    if (!MEMORY[0xFFFFFC100])
    {
LABEL_52:
      _dispatch_introspection_queue_item_enqueue(v3, a1);
      (*(void (**)(dispatch_queue_s *, dispatch_object_s *, void))((char *)&stru_20.maxprot + *(void *)v3))( v3,  a1,  0LL);
      return;
    }

LABEL_56:
    int v28 = DWORD2(v33[0]);
    uint64_t v29 = WORD1(v31) & 0xBFFF;
    WORD1(v31) &= ~0x4000u;
    DWORD1(v33[0]) = DWORD2(v33[0]);
    *((void *)&v33[0] + _dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = 0LL;
    if (DWORD1(v33[0]) == 105)
    {
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid workloop owner, possible memory corruption";
      qword_61258 = *((void *)&v34 + 1);
      __break(1u);
    }

    else if (v28 != 34)
    {
      if (v28 == 2)
      {
        unint64_t v10 = ((unint64_t)LODWORD(v33[0]) << 32) | (v29 << 16) | 2;
        qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
        qword_61258 = v10;
        __break(1u);
        goto LABEL_60;
      }

          unsigned int v38 = 0;
LABEL_57:
          LODWORD(v37) = v99;
          goto LABEL_58;
        }

        unsigned int v105 = (char *)v39 + (unsigned __int16)v47;
        if (!(_WORD)v41) {
          goto LABEL_56;
        }
        uint64_t v67 = *(void *)(StatusReg - 8);
        int v68 = (unint64_t *)((char *)v39 + (unsigned __int16)v41);
        v68[2] = (a3 - v39[1]) | (v29 << 48);
        v68[1] = v67;
        if (!v19) {
          goto LABEL_114;
        }
LABEL_92:
        v68[3] = v19;
        char v69 = v68 + 4;
        if ((v25 & 1) == 0) {
          goto LABEL_93;
        }
        goto LABEL_94;
      }

void _dispatch_event_loop_drain(uint64_t a1)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v3 = *(void *)(StatusReg + 232);
  uint64_t v4 = *(uint64_t **)(v3 + 24);
  uint64_t v5 = v4 + 7;
  int v6 = a1 & 3;
  while ((*(_BYTE *)(v3 + 45) & 2) == 0)
  {
LABEL_23:
    uint64_t v19 = *(unsigned __int16 *)(v3 + 40);
    *(_WORD *)(v3 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = 0;
    _dispatch_kq_drain((uint64_t)v4, *(void *)(v3 + 32), v19, a1);
    if (v4 != (uint64_t *)-4LL)
    {
      if (v4)
      {
        if (*(_BYTE *)(*v4 + 40) == 18LL)
        {
          uint64_t v20 = v4[6];
          if (v20)
          {
            if (*(_BYTE *)(v20 + 6)) {
              _dispatch_event_loop_drain_timers(v20, 6u);
            }
          }
        }
      }
    }

    if (v6 != 1 || !*(void *)(StatusReg + 40)) {
      return;
    }
  }

  uint64_t v7 = *v5;
  *(_BYTE *)(v3 + 45) &= ~2u;
  uint64_t v8 = *(void *)(v3 + 32);
  uint64_t v9 = *(unsigned __int16 *)(v3 + 40);
  if (*(_WORD *)(v3 + 40))
  {
    uint64_t v10 = 0LL;
    unsigned int v11 = (uint64_t **)(v8 + 8);
    uint64_t v12 = (uint64_t **)(v8 + 8);
    while (1)
    {
      int v13 = *(__int16 *)v12;
      v12 += 9;
      if (v13 == -17 && *(v11 - 1) == v4 && v11[1] == v4) {
        break;
      }
      ++v10;
      unsigned int v11 = v12;
      if (v9 == v10)
      {
        LODWORD(v1_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = *(unsigned __int16 *)(v3 + 40);
        goto LABEL_12;
      }
    }
  }

  else
  {
    LODWORD(v1_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = 0;
  }

  if ((_DWORD)v10 == (_DWORD)v9) {
LABEL_12:
  }
    *(_WORD *)(v3 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v9 + 1;
  uint64_t v14 = *(unsigned int *)(v4[3] + 84);
  if ((v14 & 0x8000000) == 0)
  {
    unsigned int v15 = (v14 >> 8) & 0xF;
    if (v15 <= (BYTE4(v7) & 7u)) {
      unsigned int v15 = BYTE4(v7) & 7;
    }
    uint64_t v16 = v8 + 72LL * v10;
    *(void *)uint64_t v16 = v4;
    if (v15 <= 1) {
      char v17 = 1;
    }
    else {
      char v17 = v15;
    }
    *(_DWORD *)(v16 + 8) = 393199;
    *(_DWORD *)(v16 + 12) = v14 & 0x80000000 | (256LL << (v17 - 1)) | 0xFF;
    *(void *)(v16 + 16) = v4;
    if ((v7 & 2) != 0) {
      int v18 = 401;
    }
    else {
      int v18 = 273;
    }
    *(_DWORD *)(v16 + 24) = v18;
    *(void *)(v16 + 36) = 0LL;
    *(void *)(v16 + 28) = 0LL;
    *(_DWORD *)(v16 + 44) = 0;
    *(void *)(v16 + 48) = v5;
    *(void *)(v16 + 56) = v7 & 2 | 0x3700000001LL;
    *(void *)(v16 + 64) = v7;
    goto LABEL_23;
  }

  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Waking up a kq with cooperative thread request is not supported";
  qword_61258 = v14;
  __break(1u);
}

uint64_t _dispatch_kq_drain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a4 & 2) == 0)
  {
    uint64_t v13 = 0x8000LL;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    *(void *)(StatusReg + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = 0LL;
    uint64_t result = _dispatch_kq_poll(a1, a2, a3, v14, 16LL, &v12, &v13, a4);
    if (!(_DWORD)result) {
      return result;
    }
    if ((v14[5] & 0x4000) != 0) {
      *(void *)(StatusReg + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = 1LL;
    }
    if ((int)result >= 1)
    {
      uint64_t v6 = result;
      uint64_t v7 = v14;
      do
      {
        _dispatch_kevent_drain((uint64_t)v7);
        v7 += 36;
        --v6;
      }

      while (v6);
    }

    return 0LL;
  }

  int v8 = _dispatch_kq_poll(a1, a2, a3, v14, 16LL, 0LL, 0LL, a4);
  if (v8 < 1) {
    return 0LL;
  }
  unsigned int v9 = v8;
  uint64_t result = 0LL;
  uint64_t v10 = v9;
  unsigned int v11 = v14;
  do
  {
    if ((v11[5] & 0x4000) != 0 && *((void *)v11 + 4))
    {
      _dispatch_kevent_drain((uint64_t)v11);
      uint64_t result = *((unsigned int *)v11 + 8);
    }

    v11 += 36;
    --v10;
  }

  while (v10);
  return result;
}

void _dispatch_event_loop_merge(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v3 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  uint64_t v4 = *(void **)(v3 + 24);
  __chkstk_darwin(a1, a1);
  uint64_t v6 = (char *)&v10 - v5;
  memcpy((char *)&v10 - v5, v7, v8);
  *(_WORD *)(v3 + 42) = 14;
  if ((int)v2 >= 1)
  {
    uint64_t v2 = v2;
    do
    {
      _dispatch_kevent_drain((uint64_t)v6);
      v6 += 72;
      --v2;
    }

    while (v2);
  }

  if (v4 == (void *)-4LL)
  {
    if (*(void *)(v3 + 8) && *(_WORD *)(v3 + 40)) {
      _dispatch_event_loop_drain(3LL);
    }
  }

  else if (*(_BYTE *)(*v4 + 40LL) == 18LL)
  {
    uint64_t v9 = v4[6];
    if (v9)
    {
      if (*(_BYTE *)(v9 + 6)) {
        _dispatch_event_loop_drain_timers(v9, 6u);
      }
    }
  }

void _dispatch_kevent_drain(uint64_t a1)
{
  int v1 = *(unsigned __int16 *)(a1 + 8);
  if (v1 != 65526)
  {
    if (v1 == 65519)
    {
      _dispatch_kevent_workloop_poke_drain(a1);
      return;
    }

    if ((*(_WORD *)(a1 + 10) & 0x4000) != 0)
    {
      if (v1 != 65531 || *(void *)(a1 + 32) != 3LL)
      {
        _dispatch_kevent_print_error(a1);
        return;
      }

      *(_WORD *)(a1 + 1_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = 274;
      *(_DWORD *)(a1 + 24) = -2080374784;
      *(void *)(a1 + 32) = 0LL;
    }

    else if (v1 == 65528)
    {
      if (*(_DWORD *)(a1 + 48) || *(_DWORD *)(a1 + 24) >> 14 == 16385)
      {
        _dispatch_kevent_mach_msg_drain(a1);
        return;
      }
    }

    else if (v1 == 65529)
    {
      uint64_t v3 = *(void *)(a1 + 16);
      uint64_t v4 = *(void *)a1;
      *(_BYTE *)(v3 + 6) |= (1 << (*(void *)a1 % 3u)) | 0x80;
      *(_BYTE *)(v3 + 32 * v4 + 7) = *(_BYTE *)(v3 + 32 * v4 + 7) & 0xFC | 2;
      return;
    }

    uint64_t v5 = *(void *)(a1 + 16);
    if ((v5 & 1) != 0) {
      _dispatch_kevent_merge_muxed(a1);
    }
    else {
      _dispatch_kevent_merge(v5, a1);
    }
  }

uint64_t _dispatch_event_loop_leave_immediate(uint64_t a1)
{
  uint64_t v1 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  uint64_t v2 = *(void *)(v1 + 24);
  *(_BYTE *)(v1 + 45) &= 0xFCu;
  uint64_t v6 = v2;
  v7[0] = 524271LL;
  v7[1] = v2;
  unsigned int v8 = 33;
  __int128 v9 = 0uLL;
  int v10 = 0;
  uint64_t v11 = v2 + 56;
  uint64_t v12 = 0LL;
  uint64_t v13 = a1;
  uint64_t result = _dispatch_kq_poll(v2, (uint64_t)&v6, 1LL, (uint64_t)&v6, 1LL, 0LL, 0LL, 131075);
  if ((_DWORD)result)
  {
    int v4 = DWORD1(v9);
    unsigned __int16 v5 = WORD1(v7[0]) & 0xBFFF;
    WORD1(v7[0]) &= ~0x4000u;
    LODWORD(v9) = DWORD1(v9);
    *(void *)((char *)&v9 + 4) = 0LL;
    if ((_DWORD)v9 != 105)
    {
      if (v4 != 34)
      {
        if (v4 == 2) {
          _dispatch_event_loop_leave_immediate_cold_3(&v8, v5);
        }
        _dispatch_sync_ipc_handoff_begin_cold_1(v4);
      }

      _dispatch_event_loop_leave_immediate_cold_4((int *)v7 + 1);
    }

    _dispatch_event_loop_leave_immediate_cold_2(&v13);
  }

  return result;
}

uint64_t _dispatch_kq_poll( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  LODWORD(v8) = a8;
  char context = 0;
  if (_dispatch_kq_poll_pred != -1)
  {
    dispatch_once_f(&_dispatch_kq_poll_pred, &context, (dispatch_function_t)_dispatch_kq_init);
    if (context)
    {
      _dispatch_memorypressure_create(malloc_memorypressure_mask_default_4libdispatch);
      _voucher_activity_debug_channel_init();
    }
  }

  if (a1)
  {
    uint64_t v16 = &_dispatch_mgr_q;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      while (1)
      {
        if (a1 == -4)
        {
          char v17 = v16;
          uint64_t v8 = v8 | 0x20;
          uint64_t result = kevent_qos(*(unsigned int *)((char *)&stru_20.cmd + (void)v16), a2, a3, a4, a5, a6, a7, v8);
        }

        else
        {
          char v17 = v16;
          if ((v8 & 2) != 0) {
            int v19 = 1024;
          }
          else {
            int v19 = 132096;
          }
          uint64_t v8 = v19 | v8;
          uint64_t result = kevent_id(a1, a2, a3, a4, a5, a6, a7, v8);
        }

        if ((_DWORD)result != -1) {
          return result;
        }
        LODWORD(v2_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = **(_DWORD **)(StatusReg + 8);
        uint64_t v16 = v17;
        if ((_DWORD)v20 != 4) {
          goto LABEL_19;
        }
      }

      if ((_DWORD)v20 != 12) {
        break;
      }
      _dispatch_temporary_resource_shortage();
      uint64_t v16 = v17;
    }

    if ((_DWORD)v20 == 9)
    {
      LODWORD(v2_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = 9;
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Do not close random Unix descriptors";
      qword_61258 = 9LL;
      __break(1u);
    }

uint64_t _dispatch_event_loop_leave_deferred(uint64_t result, uint64_t a2)
{
  if ((~a2 & 0x2800000000LL) == 0)
  {
    if ((a2 & 0xFFFFFFFC) != 0) {
      uint64_t v2 = a2 & 0xFFFFFFFC | 3LL;
    }
    else {
      uint64_t v2 = 0LL;
    }
    uint64_t v3 = *(void *)(result + 24);
    uint64_t v4 = *(void *)(result + 32);
    uint64_t v5 = *(unsigned __int16 *)(result + 40);
    if (*(_WORD *)(result + 40))
    {
      uint64_t v6 = 0LL;
      uint64_t v7 = (__int16 *)(v4 + 8);
      uint64_t v8 = (__int16 *)(v4 + 8);
      while (1)
      {
        int v9 = *v8;
        v8 += 36;
        if (v9 == -17 && *((void *)v7 - 1) == v3 && *((void *)v7 + 1) == v2) {
          break;
        }
        ++v6;
        uint64_t v7 = v8;
        if (v5 == v6)
        {
          LODWORD(v6) = *(unsigned __int16 *)(result + 40);
          goto LABEL_14;
        }
      }
    }

    else
    {
      LODWORD(v6) = 0;
    }

    if ((_DWORD)v6 == (_DWORD)v5) {
LABEL_14:
    }
      *(_WORD *)(result + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v5 + 1;
    uint64_t v10 = v4 + 72LL * v6;
    *(void *)uint64_t v10 = v2;
    *(void *)(v10 + 8) = 655343LL;
    *(void *)(v10 + 16) = v3;
    *(_DWORD *)(v10 + 24) = 392;
    *(void *)(v10 + 44) = 0LL;
    *(_DWORD *)(v10 + 52) = 0;
    *(void *)(v10 + 28) = 0LL;
    *(void *)(v10 + 36) = 0LL;
    *(void *)(v10 + 56) = 0x3800000002LL;
    *(void *)(v10 + 64) = a2;
    *(void *)(v10 + 48) = v3 + 56;
  }

  *(_BYTE *)(result + 45) &= 0xFCu;
  uint64_t v11 = *(void *)(result + 24);
  uint64_t v12 = *(void *)(result + 32);
  uint64_t v13 = *(unsigned __int16 *)(result + 40);
  if (*(_WORD *)(result + 40))
  {
    uint64_t v14 = 0LL;
    unsigned int v15 = (__int16 *)(v12 + 8);
    uint64_t v16 = (__int16 *)(v12 + 8);
    while (1)
    {
      int v17 = *v16;
      v16 += 36;
      if (v17 == -17 && *((void *)v15 - 1) == v11 && *((void *)v15 + 1) == v11) {
        break;
      }
      ++v14;
      unsigned int v15 = v16;
      if (v13 == v14)
      {
        LODWORD(v14) = *(unsigned __int16 *)(result + 40);
        goto LABEL_25;
      }
    }
  }

  else
  {
    LODWORD(v14) = 0;
  }

  if ((_DWORD)v14 == (_DWORD)v13) {
LABEL_25:
  }
    *(_WORD *)(result + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v13 + 1;
  if ((a2 & 1) != 0)
  {
    uint64_t result = *(unsigned int *)(*(void *)(v11 + 24) + 84LL);
    if ((result & 0x8000000) != 0) {
      _dispatch_event_loop_leave_deferred_cold_1(result);
    }
    unsigned int v22 = (result >> 8) & 0xF;
    if (v22 <= (BYTE4(a2) & 7u)) {
      unsigned int v22 = BYTE4(a2) & 7;
    }
    if (v22 <= 1) {
      LOBYTE(v22) = 1;
    }
    uint64_t v23 = 256LL << (v22 - 1);
    uint64_t v19 = a2 & 2 | 0x3700000001LL;
    int v18 = result & 0x80000000 | v23 | 0xFF;
    if ((a2 & 2) != 0) {
      int v21 = 401;
    }
    else {
      int v21 = 273;
    }
    __int16 v20 = 5;
  }

  else
  {
    int v18 = 0;
    uint64_t v19 = 1LL;
    __int16 v20 = 7;
    int v21 = 1;
  }

  uint64_t v24 = v12 + 72LL * v14;
  *(void *)uint64_t v24 = v11;
  *(_WORD *)(v24 + 8) = -17;
  *(_WORD *)(v24 + 1_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v20;
  *(_DWORD *)(v24 + 12) = v18;
  *(void *)(v24 + 16) = v11;
  *(_DWORD *)(v24 + 24) = v21;
  *(void *)(v24 + 36) = 0LL;
  *(void *)(v24 + 28) = 0LL;
  *(_DWORD *)(v24 + 44) = 0;
  *(void *)(v24 + 48) = v11 + 56;
  *(void *)(v24 + 56) = v19;
  *(void *)(v24 + 64) = a2;
  return result;
}

uint64_t _dispatch_event_loop_cancel_waiter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  while (1)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 100);
    v9[0] = 458735LL;
    v9[1] = v2;
    unsigned int v10 = 40;
    __int128 v11 = 0u;
    memset(v12, 0, sizeof(v12));
    uint64_t result = _dispatch_kq_poll(v2, &v8, 1LL, &v8, 1LL, 0LL, 0LL, 3LL);
    if (!(_DWORD)result) {
      break;
    }
    char v4 = *(_BYTE *)(a1 + 106);
    int v5 = DWORD1(v11);
    char v6 = BYTE2(v9[0]);
    unsigned __int16 v7 = WORD1(v9[0]) & 0xBFFF;
    WORD1(v9[0]) &= ~0x4000u;
    LODWORD(v1_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = DWORD1(v11);
    *(void *)((char *)&v11 + 4) = 0LL;
    if ((_DWORD)v11 != 2)
    {
      if (v5 != 34)
      {
        if (v5 == 105) {
          _dispatch_event_loop_cancel_waiter_cold_2((uint64_t)&v8);
        }
        _dispatch_sync_ipc_handoff_begin_cold_1(v5);
      }

      _dispatch_event_loop_leave_immediate_cold_4((int *)v9 + 1);
    }

    if ((v4 & 0x20) != 0 || (v6 & 2) == 0 || (v10 & 0x28) != 0x28) {
      _dispatch_event_loop_cancel_waiter_cold_3(v10, v7);
    }
    thread_switch(*(_DWORD *)(a1 + 100), 4, 1u);
  }

  return result;
}

uint64_t _dispatch_event_loop_wake_owner(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v7 = *(void *)(result + 48);
  if (a2 == -4
    || (uint64_t v8 = *(void *)(StatusReg + 232)) == 0
    || *(void *)(v8 + 24) != a2
    || (*(_BYTE *)(v8 + 45) &= 0xFCu, v7 != a2))
  {
    if (((a4 ^ a3) & 1) != 0)
    {
      uint64_t v38 = a2;
      uint64_t v39 = 524271LL;
      uint64_t v40 = a2;
      int v41 = 257;
      __int128 v42 = 0uLL;
      int v43 = 0;
      uint64_t v9 = 1LL;
      uint64_t v44 = a2 + 56;
      uint64_t v45 = 1LL;
      uint64_t v46 = a4;
      if ((a4 & 0x2000000000LL) == 0) {
        goto LABEL_10;
      }
    }

    else
    {
      uint64_t v9 = 0LL;
      if ((a4 & 0x2000000000LL) == 0)
      {
LABEL_10:
        if ((a3 & 0x2000000002LL) == 0x2000000000LL && (*(char *)(result + 106) & 0x80000000) == 0)
        {
          uint64_t v11 = *(unsigned int *)(StatusReg + 24);
          uint64_t v12 = &v38 + 9 * v9;
          *uint64_t v12 = v11;
          v12[1] = 458735LL;
          _DWORD v12[2] = a2;
          *((_DWORD *)v12 + 6) = 40;
          *(_OWORD *)((char *)v12 + 28) = 0u;
          *(_OWORD *)((char *)v12 + 44) = 0u;
          *((_DWORD *)v12 + 15) = 0;
          v12[8] = a3;
          uint64_t v9 = (v9 + 1);
        }

        uint64_t result = _dispatch_kq_poll(a2, &v38, v9, &v38, v9, 0LL, 0LL, 3LL);
        BOOL v14 = v7 != -4 && v7 != a2;
        if ((_DWORD)result)
        {
          if (v14) {
            _dispatch_bug_deprecated("Changing target queue hierarchy with a dispatch_sync in flight");
          }
          int v36 = DWORD1(v42);
          unsigned __int16 v37 = WORD1(v39) & 0xBFFF;
          WORD1(v39) &= ~0x4000u;
          LODWORD(v42) = DWORD1(v42);
          *(void *)((char *)&v42 + 4) = 0LL;
          if ((_DWORD)v42 != 105)
          {
            if (v36 != 34)
            {
              if (v36 == 2) {
                _dispatch_event_loop_wake_owner_cold_4((uint64_t)&v38, v37);
              }
              _dispatch_sync_ipc_handoff_begin_cold_1(v36);
            }

            _dispatch_event_loop_wake_owner_cold_5((uint64_t)&v38);
          }

          _dispatch_event_loop_cancel_waiter_cold_2((uint64_t)&v38);
        }

        if (v14)
        {
          _dispatch_bug_deprecated("Changing target queue hierarchy with a dispatch_sync in flight");
          return _dispatch_event_loop_cancel_waiter(v5);
        }

        return result;
      }
    }

    unsigned int v10 = &v38 + 9 * v9;
    *unsigned int v10 = *(unsigned int *)(result + 100);
    v10[1] = 655343LL;
    v10[2] = a2;
    *((_DWORD *)v10 + 6) = 136;
    *(_OWORD *)((char *)v10 + 44) = 0u;
    *(_OWORD *)((char *)v10 + 28) = 0u;
    *((_DWORD *)v10 + 15) = 0;
    v10[8] = a4;
    v10[6] = a2 + 56;
    uint64_t v9 = (v9 + 1);
    goto LABEL_10;
  }

  uint64_t v15 = *(void *)(v8 + 32);
  uint64_t v16 = *(unsigned __int16 *)(v8 + 40);
  if (*(_WORD *)(v8 + 40))
  {
    uint64_t v17 = 0LL;
    int v18 = (__int16 *)(v15 + 8);
    uint64_t v19 = (__int16 *)(v15 + 8);
    while (1)
    {
      int v20 = *v19;
      v19 += 36;
      if (v20 == -17 && *((void *)v18 - 1) == a2 && *((void *)v18 + 1) == a2) {
        break;
      }
      ++v17;
      int v18 = v19;
      if (v16 == v17)
      {
        LODWORD(v17) = *(unsigned __int16 *)(v8 + 40);
        goto LABEL_32;
      }
    }
  }

  else
  {
    LODWORD(v17) = 0;
  }

  if ((_DWORD)v17 == (_DWORD)v16) {
LABEL_32:
  }
    *(_WORD *)(v8 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v16 + 1;
  if ((a4 & 1) != 0)
  {
    uint64_t result = *(unsigned int *)(*(void *)(a2 + 24) + 84LL);
    if ((result & 0x8000000) != 0) {
      _dispatch_event_loop_leave_deferred_cold_1(result);
    }
    unsigned int v25 = (result >> 8) & 0xF;
    if (v25 <= (BYTE4(a4) & 7u)) {
      unsigned int v25 = BYTE4(a4) & 7;
    }
    if (v25 <= 1) {
      LOBYTE(v25) = 1;
    }
    uint64_t v26 = 256LL << (v25 - 1);
    uint64_t v24 = a4 & 2 | 0x3700000001LL;
    int v21 = result & 0x80000000 | v26 | 0xFF;
    if ((a4 & 2) != 0) {
      int v22 = 401;
    }
    else {
      int v22 = 273;
    }
    __int16 v23 = 5;
  }

  else
  {
    int v21 = 0;
    int v22 = 257;
    __int16 v23 = 7;
    uint64_t v24 = 1LL;
  }

  uint64_t v27 = v15 + 72LL * v17;
  *(void *)uint64_t v27 = a2;
  *(_WORD *)(v27 + 8) = -17;
  *(_WORD *)(v27 + 1_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v23;
  *(_DWORD *)(v27 + 12) = v21;
  *(void *)(v27 + 16) = a2;
  *(_DWORD *)(v27 + 24) = v22;
  *(void *)(v27 + 36) = 0LL;
  *(void *)(v27 + 28) = 0LL;
  *(_DWORD *)(v27 + 44) = 0;
  *(void *)(v27 + 48) = a2 + 56;
  *(void *)(v27 + 56) = v24;
  *(void *)(v27 + 64) = a4;
  uint64_t v28 = *(unsigned int *)(v5 + 100);
  uint64_t v29 = *(void *)(v8 + 32);
  uint64_t v30 = *(unsigned __int16 *)(v8 + 40);
  if (*(_WORD *)(v8 + 40))
  {
    uint64_t v31 = 0LL;
    uint64_t v32 = (__int16 *)(v29 + 8);
    uint64_t v33 = (__int16 *)(v29 + 8);
    while (1)
    {
      int v34 = *v33;
      v33 += 36;
      if (v34 == -17 && *((void *)v32 - 1) == a2 && *((void *)v32 + 1) == v28) {
        break;
      }
      ++v31;
      uint64_t v32 = v33;
      if (v30 == v31)
      {
        LODWORD(v3_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = *(unsigned __int16 *)(v8 + 40);
        goto LABEL_53;
      }
    }
  }

  else
  {
    LODWORD(v3_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = 0;
  }

  if ((_DWORD)v31 == (_DWORD)v30) {
LABEL_53:
  }
    *(_WORD *)(v8 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v30 + 1;
  uint64_t v35 = v29 + 72LL * v31;
  *(void *)uint64_t v35 = v28;
  *(void *)(v35 + 8) = 655343LL;
  *(void *)(v35 + 16) = a2;
  *(_DWORD *)(v35 + 24) = 136;
  *(_OWORD *)(v35 + 44) = 0u;
  *(_OWORD *)(v35 + 28) = 0u;
  *(_DWORD *)(v35 + 6_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = 0;
  *(void *)(v35 + 64) = a4;
  *(void *)(v35 + 48) = a2 + 56;
  return result;
}

void _dispatch_event_loop_wait_for_ownership(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(v2 + 56);
  if ((v3 & 0xFFFFFFFD) == 1)
  {
    unsigned int v4 = *(_DWORD *)(*(void *)(v2 + 24) + 84LL);
    if ((v4 & 0x8000000) != 0) {
      _dispatch_event_loop_leave_deferred_cold_1(v4);
    }
    unsigned int v5 = (v4 >> 8) & 0xF;
    if (v5 <= (BYTE4(v3) & 7u)) {
      unsigned int v5 = BYTE4(v3) & 7;
    }
    uint64_t v23 = v2;
    if (v5 <= 1) {
      LOBYTE(v5) = 1;
    }
    LODWORD(v24) = 393199;
    HIDWORD(v24) = v4 & 0x80000000 | (256LL << (v5 - 1)) | 0xFF;
    uint64_t v25 = v2;
    if ((v3 & 2) != 0) {
      int v6 = 401;
    }
    else {
      int v6 = 273;
    }
    int v26 = v6;
    uint64_t v28 = 0LL;
    uint64_t v27 = 0LL;
    int v29 = 0;
    uint64_t v30 = v2 + 56;
    uint64_t v31 = v3 & 2 | 0x3700000001LL;
    uint64_t v32 = v3;
    unsigned int v7 = 1;
  }

  else if ((~v3 & 0x2800000000LL) != 0)
  {
    unsigned int v7 = 0;
  }

  else
  {
    uint64_t v8 = v3 & 0xFFFFFFFC | 3LL;
    if ((v3 & 0xFFFFFFFC) == 0) {
      uint64_t v8 = 0LL;
    }
    uint64_t v23 = v8;
    uint64_t v24 = 655343LL;
    uint64_t v25 = v2;
    int v26 = 392;
    uint64_t v28 = 0LL;
    uint64_t v27 = 0LL;
    int v29 = 0;
    uint64_t v31 = 0x3800000002LL;
    uint64_t v32 = v3;
    unsigned int v7 = 1;
    uint64_t v30 = v2 + 56;
  }

  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    uint64_t v10 = v7 + 1;
    uint64_t v11 = *(void *)(StatusReg + 32);
    uint64_t v12 = &v23 + 9 * v7;
    if ((v11 & 0x3FFF00) == 0) {
      LODWORD(v1_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = 2303;
    }
    *uint64_t v12 = *(unsigned int *)(a1 + 100);
    *((_DWORD *)v12 + 2) = 655343;
    *((_DWORD *)v12 + 3) = v11;
    _DWORD v12[2] = v2;
    *((_DWORD *)v12 + 6) = 4;
    *(_OWORD *)((char *)v12 + 28) = 0u;
    *(_OWORD *)((char *)v12 + 44) = 0u;
    *((_DWORD *)v12 + 15) = 0;
    v12[8] = v3;
    int v13 = _dispatch_kq_poll(v2, (uint64_t)&v23, v10, (uint64_t)&v23, v10, 0LL, 0LL, 3);
    if (v13 >= 1)
    {
      uint64_t v14 = 0LL;
      uint64_t v15 = (uint64_t *)((char *)&v27 + 4);
      do
      {
        uint64_t v16 = *((unsigned int *)v15 - 2);
        uint64_t v17 = *v15;
        unsigned __int16 v18 = *((_WORD *)v15 - 11) & 0xBFFF;
        *((_WORD *)v15 - 1_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = v18;
        *((_DWORD *)v15 - _dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = v17;
        *uint64_t v15 = 0LL;
        if ((_DWORD)v17 != 4)
        {
          switch((_DWORD)v17)
          {
            case 2:
              _dispatch_event_loop_cancel_waiter_cold_3(v16, v18);
            case 0x22:
              _dispatch_event_loop_wait_for_ownership_cold_5((uint64_t)&v23, v14);
            case 0x69:
              _dispatch_event_loop_wait_for_ownership_cold_4((uint64_t)&v23, v14);
          }

LABEL_39:
          _dispatch_sync_ipc_handoff_begin_cold_1(v17);
        }

        if ((v16 & 4) == 0) {
          goto LABEL_39;
        }
        v15 += 9;
        ++v14;
      }

      while (v13 != v14);
    }

    if (!v13) {
      break;
    }
    unsigned int v7 = 0;
    uint64_t v3 = v32;
  }

  char v19 = *(_BYTE *)(a1 + 106);
  if ((v19 & 0x20) != 0)
  {
    _dispatch_event_loop_cancel_waiter(a1);
    char v19 = *(_BYTE *)(a1 + 106) & 0xDF;
    *(_BYTE *)(a1 + 106) = v19;
  }

  if ((v19 & 0x40) != 0)
  {
    int v20 = *(unsigned int **)(a1 + 48);
    int v21 = v20 + 24;
    do
      int v22 = __ldxr(v21);
    while (__stxr(v22 - 1, v21));
    if (v22 <= 0)
    {
      if (v22 < 0) {
        _os_object_allows_weak_reference_cold_1();
      }
      *((void *)v20 + 7) = 0xDEAD000000000000LL;
      _dispatch_object_dealloc(v20);
    }
  }

uint64_t _dispatch_event_loop_ensure_ownership(uint64_t a1)
{
  uint64_t v4 = *(unsigned int *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  v5[0] = 655343LL;
  v5[1] = a1;
  unsigned int v6 = 136;
  __int128 v8 = 0u;
  __int128 v7 = 0u;
  int v9 = 0;
  uint64_t v10 = v4;
  *(void *)((char *)&v8 + 4) = a1 + 56;
  uint64_t result = _dispatch_kq_poll(a1, &v4, 1LL, &v4, 1LL, 0LL, 0LL, 3LL);
  if ((_DWORD)result)
  {
    int v2 = DWORD1(v7);
    unsigned __int16 v3 = WORD1(v5[0]) & 0xBFFF;
    WORD1(v5[0]) &= ~0x4000u;
    LODWORD(v7) = DWORD1(v7);
    *(void *)((char *)&v7 + 4) = 0LL;
    if ((_DWORD)v7 != 105)
    {
      if (v2 != 34)
      {
        if (v2 == 2) {
          _dispatch_event_loop_leave_immediate_cold_3(&v6, v3);
        }
        _dispatch_sync_ipc_handoff_begin_cold_1(v2);
      }

      _dispatch_event_loop_leave_immediate_cold_4((int *)v5 + 1);
    }

    _dispatch_event_loop_leave_immediate_cold_2(&v10);
  }

  return result;
}

id _dispatch_event_loop_end_ownership(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v5 = a3;
  if ((a3 & 1) != 0)
  {
    unsigned int v8 = *(_DWORD *)(*(void *)(a1 + 24) + 84LL);
    if ((v8 & 0x8000000) != 0) {
      _dispatch_event_loop_leave_deferred_cold_1(v8);
    }
    unsigned int v9 = (v8 >> 8) & 0xF;
    if (v9 <= (BYTE4(a3) & 7u)) {
      unsigned int v9 = BYTE4(a3) & 7;
    }
    if (v9 <= 1) {
      LOBYTE(v9) = 1;
    }
    uint64_t v10 = 256LL << (v9 - 1);
    uint64_t v11 = a3 & 2 | 0x3700000001LL;
    LODWORD(a3) = v8 & 0x80000000 | v10 | 0xFF;
    if ((v5 & 2) != 0) {
      int v12 = 401;
    }
    else {
      int v12 = 273;
    }
    __int16 v13 = 5;
  }

  else
  {
    a3 = 0LL;
    if ((a2 & 1) == 0) {
      goto LABEL_14;
    }
    int v12 = 257;
    __int16 v13 = 7;
    uint64_t v11 = 1LL;
  }

  uint64_t v23 = a1;
  __int16 v24 = -17;
  __int16 v25 = v13;
  int v26 = a3;
  uint64_t v27 = a1;
  int v28 = v12;
  __int128 v29 = 0uLL;
  int v30 = 0;
  uint64_t v31 = a1 + 56;
  uint64_t v32 = v11;
  a3 = 1LL;
  uint64_t v33 = v5;
LABEL_14:
  if ((a2 & 2) == 0)
  {
    uint64_t v14 = &v23 + 9 * a3;
    *uint64_t v14 = *(unsigned int *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    v14[1] = 458735LL;
    a3 = (a3 + 1);
    v14[2] = a1;
    *((_DWORD *)v14 + 6) = 40;
    *(_OWORD *)((char *)v14 + 28) = 0u;
    *(_OWORD *)((char *)v14 + 44) = 0u;
    *((_DWORD *)v14 + 15) = 0;
    v14[8] = v5;
  }

  id result = (id)_dispatch_kq_poll(a1, &v23, a3, &v23, a3, 0LL, 0LL, 3LL);
  if ((_DWORD)result)
  {
    int v21 = DWORD1(v29);
    unsigned __int16 v22 = v25 & 0xBFFF;
    v25 &= ~0x4000u;
    LODWORD(v29) = DWORD1(v29);
    *(void *)((char *)&v29 + 4) = 0LL;
    if ((_DWORD)v29 != 105)
    {
      if (v21 != 34)
      {
        if (v21 == 2) {
          _dispatch_event_loop_wake_owner_cold_4((uint64_t)&v23, v22);
        }
        _dispatch_sync_ipc_handoff_begin_cold_1(v21);
      }

      _dispatch_event_loop_wake_owner_cold_5((uint64_t)&v23);
    }

    _dispatch_event_loop_cancel_waiter_cold_2((uint64_t)&v23);
  }

  int v17 = (a2 & 1 | (2 * (a4 & 1))) - (v5 & 1);
  if (v17 >= 1 && *(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    unsigned __int16 v18 = (unsigned int *)(a1 + 8);
    do
    {
      unsigned int v19 = __ldxr(v18);
      signed int v20 = v19 - v17;
    }

    while (__stlxr(v20, v18));
    if (v20 <= 0)
    {
      if (v20 < 0) {
        _os_object_allows_weak_reference_cold_1();
      }
      return _os_object_dispose((void *)a1, v16);
    }
  }

  return result;
}

void _dispatch_event_loop_timer_arm(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9 = a2 / 3uLL;
  uint64_t v10 = *(void *)(a5 + 8 * v9);
  if (!v10)
  {
    mach_get_times(a5, a5 + 8, v15);
    *(void *)(a5 + 16) = v15[1] + 1000000000LL * v15[0];
    uint64_t v10 = *(void *)(a5 + 8 * v9);
  }

  uint64_t v11 = v10 + a3;
  if (_dispatch_timers_force_max_leeway == 1) {
    uint64_t v12 = 0LL;
  }
  else {
    uint64_t v12 = a4;
  }
  if (_dispatch_timers_force_max_leeway == 1) {
    uint64_t v13 = v11 + a4;
  }
  else {
    uint64_t v13 = v11;
  }
  _dispatch_event_loop_timer_program(a1, a2, v13, v12, 5);
  if (a2 - 6 <= 2 && _dispatch_mach_calendar_pred != -1) {
    dispatch_once_f(&_dispatch_mach_calendar_pred, 0LL, (dispatch_function_t)_dispatch_mach_host_notify_update);
  }
}

double _dispatch_event_loop_timer_program(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  uint64_t v6 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 216);
  if (v6 == -4)
  {
    int v7 = 0x2000000;
  }

  else if (*(_BYTE *)(a1 + 32LL * a2 + 5))
  {
    int v7 = (256LL << (*(_BYTE *)(a1 + 32LL * a2 + 5) - 1)) | 0xFF;
  }

  else
  {
    int v7 = 255;
  }

  unint64_t v9 = a2 | 0xFFFFFFFFFFFFFF00LL;
  __int16 v10 = -7;
  __int16 v11 = a5 | 0x10;
  int v12 = v7;
  uint64_t v13 = a1;
  int v14 = _dispatch_timer_index_to_fflags[a2];
  int v15 = 0;
  uint64_t v16 = a3;
  uint64_t v17 = 0LL;
  __int128 v19 = 0u;
  uint64_t v18 = a4;
  *(void *)&double result = _dispatch_kq_deferred_update(v6, (uint64_t)&v9).n128_u64[0];
  return result;
}

double _dispatch_event_loop_timer_delete(uint64_t a1, unsigned int a2)
{
  return _dispatch_event_loop_timer_program(a1, a2, 0LL, 0LL, 2);
}

char *_dispatch_source_proc_create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = a3;
  double result = _dispatch_unote_create_with_handle(a1, a2, a3);
  if ((v3 & 0x4000000) != 0)
  {
    if (result) {
      result[29] |= 4u;
    }
  }

  return result;
}

char *_dispatch_source_vm_create(uint64_t a1, uint64_t a2)
{
  double result = _dispatch_unote_create_without_handle((uint64_t)&_dispatch_source_type_memorystatus, a2, 2LL);
  if (result) {
    result[29] |= 0x10u;
  }
  return result;
}

BOOL _dispatch_mach_msg_sender_is_kernel(uint64_t a1)
{
  uint64_t v1 = (_DWORD *)(a1 + ((*(unsigned int *)(a1 + 4) + 3LL) & 0x1FFFFFFFCLL));
  if (*v1 || v1[1] <= 0x33u) {
    _dispatch_mach_msg_sender_is_kernel_cold_1();
  }
  return v1[10] == 0;
}

uint64_t _dispatch_get_mach_host_port()
{
  if (_dispatch_mach_host_port_pred != -1) {
    dispatch_once_f(&_dispatch_mach_host_port_pred, 0LL, (dispatch_function_t)_dispatch_mach_host_port_init);
  }
  return _dispatch_mach_host_port;
}

void _dispatch_mach_host_port_init()
{
  kern_return_t special_port;
  int v2;
  kern_return_t v3;
  mach_port_t port;
  mach_port_t v0 = mach_host_self();
  special_port = host_get_special_port(v0, -1, 1, &port);
  if (special_port == -301) {
    _dispatch_sema4_create_slow_cold_2();
  }
  int v2 = special_port;
  if (special_port)
  {
    if (special_port != 4) {
      _dispatch_bug(2859LL, special_port);
    }
  }

  else
  {
    int v3 = mach_port_deallocate(mach_task_self_, v0);
    if (v3 == -301) {
      _dispatch_sema4_create_slow_cold_2();
    }
    int v2 = v3;
    mach_port_t v0 = port;
  }

  if (!v0) {
    _dispatch_mach_host_port_init_cold_1(v2);
  }
  _dispatch_mach_host_port = v0;
}

uint64_t _dispatch_mach_notify_port_deleted(uint64_t a1, uint64_t a2)
{
  return 0LL;
}

uint64_t _dispatch_mach_notify_merge(uint64_t result, int a2, int a3)
{
  uint64_t v3 = _dispatch_sources[((unint64_t)result >> 8) & 0x3F];
  if (v3)
  {
    while (*(void *)(v3 + 24) != result || *(__int16 *)(v3 + 32) != -24)
    {
      uint64_t v3 = *(void *)v3;
      if (!v3) {
        return result;
      }
    }

    *(void *)(v3 + 56) &= 0xFFFFFFFFFFFFFFF2LL;
    if ((a3 & 1) != 0 || (double result = _dispatch_kevent_mach_notify_resume(v3, a2, 0), (result & 1) == 0))
    {
      *(_WORD *)(v3 + 34) |= 2u;
      uint64_t v6 = 16LL;
    }

    else
    {
      uint64_t v6 = 4LL;
    }

    *(void *)(v3 + 64) = 0LL;
    int v7 = *(uint64_t **)(v3 + 16);
    if (v7)
    {
      do
      {
        unsigned int v8 = (uint64_t *)*v7;
        if (*(void *)(v3 + 64)) {
          break;
        }
        uint64_t v9 = (_DWORD)v7[7] & a2;
        *((_BYTE *)v7 + 54) = 0;
        if ((a3 & 1) != 0 || (_DWORD)v9)
        {
          if (*(_DWORD *)(7 - v7[4]) != 0x7FFFFFFF)
          {
            __int16 v10 = (unsigned int *)(7 - v7[4]);
            do
              int v11 = __ldxr(v10);
            while (__stxr(v11 + 2, v10));
            if (v11 <= 0)
            {
              qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
              __break(1u);
              return result;
            }
          }

          if (a3) {
            _dispatch_unote_unregister_muxed(v7 + 3);
          }
          uint64_t v12 = v7[3];
          if ((_DWORD)v9 && *(_BYTE *)(v12 + 9) == 2)
          {
            uint64_t v13 = (unint64_t *)(v7 + 12);
            do
              unint64_t v14 = __ldxr(v13);
            while (__stxr(v14 | v9, v13));
          }

          double result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, void))(v12 + 48))(v7 + 3, v6, v9, 0LL);
        }

        int v7 = v8;
      }

      while (v8);
    }
  }

  return result;
}

uint64_t _dispatch_mach_notify_dead_name(uint64_t a1, uint64_t a2)
{
  mach_port_name_t v2 = a2;
  _dispatch_mach_notify_merge(a2, 1, 1);
  if (mach_port_deallocate(mach_task_self_, v2) == -301) {
    _dispatch_sema4_create_slow_cold_2();
  }
  return 0LL;
}

uint64_t _dispatch_mach_notify_send_possible(uint64_t a1, uint64_t a2)
{
  return 0LL;
}

uint64_t _dispatch_mach_notification_set_armed(uint64_t result)
{
  uint64_t v1 = *(void *)(result - 8);
  if (v1)
  {
    *(void *)(v1 + 64) = 1LL;
  }

  return result;
}

char *_dispatch_source_mach_send_create(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 <= 1) {
    a3 = 1LL;
  }
  if (!a2) {
    a2 = 0xFFFFFFFFLL;
  }
  return _dispatch_unote_create_with_handle(a1, a2, a3);
}

uint64_t _dispatch_mach_send_update(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 48);
  if ((*(_WORD *)(a1 + 34) & 2) != 0)
  {
    int v2 = 0;
  }

  else
  {
    int v2 = *(_DWORD *)(a1 + 48);
    int v1 = 0;
  }

  return _dispatch_kevent_mach_notify_resume(a1, v2, v1);
}

char *_dispatch_mach_send_create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result = _dispatch_unote_create_without_handle(a1, a2, a3);
  if (result)
  {
    *((_DWORD *)result + 22) = 0x80000000;
    *((void *)result + 7) = 0LL;
  }

  return result;
}

void _dispatch_mach_notification_event(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 24);
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unexpected non message event";
  qword_61258 = v1;
  __break(1u);
}

void _dispatch_mach_notification_merge_msg(uint64_t a1, int a2, mach_msg_header_t *a3)
{
  if (a3->msgh_id > 77 || _dispatch_mach_msg_sender_is_kernel((uint64_t)a3))
  {
    int v6 = libdispatch_internal_protocol_server(a3, (uint64_t)v9);
    if (v6 || v10 != -303)
    {
      if (v6)
      {
        if (v10 == -305 || v10 == 0) {
          goto LABEL_13;
        }
        _dispatch_bug(2806LL, v10);
        if (v10 == -305 || !v10) {
          goto LABEL_13;
        }
        goto LABEL_18;
      }
    }

    else if ((a3->msgh_id & 0xFFFFFFFE) == 0x3B6)
    {
      byte_65AF7 |= 2u;
      byte_65B17 |= 2u;
      byte_65B37 |= 2u;
      byte_65A36 |= 0x87u;
      _dispatch_mach_host_notify_update();
      int v10 = 0;
      goto LABEL_13;
    }

    uint64_t v8 = 2805LL;
  }

  else
  {
    uint64_t v8 = 2790LL;
  }

  _dispatch_bug(v8, 0LL);
LABEL_18:
  mach_msg_destroy(a3);
LABEL_13:
  if ((a2 & 0x10000) != 0) {
    free(a3);
  }
  _dispatch_unote_resume(a1);
}

uint64_t _dispatch_mach_recv_direct_merge_evt(uint64_t a1, const char *a2, uint64_t a3, unsigned int a4)
{
  return _dispatch_source_merge_evt(a1, a2, a3, a4);
}

void _dispatch_mach_reply_merge_evt(uint64_t a1, uint64_t a2, int a3)
{
  if ((a2 & 0x200) == 0)
  {
    qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected event";
    qword_61258 = a3 | (unint64_t)(a2 << 32);
    __break(1u);
  }

  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unexpected EV_VANISHED (do not destroy random mach ports)";
  __break(1u);
}

uint64_t _dispatch_kevent_workloop_override_self(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3 = *(void *)(result + 24);
  *(_BYTE *)(result + 45) &= ~2u;
  uint64_t v4 = (unsigned int *)*(unsigned int *)(*(void *)(v3 + 24) + 84LL);
  unsigned int v6 = (v4 >> 8) & 0xF;
  if (v6 <= (BYTE4(a2) & 7u)) {
    unsigned int v6 = BYTE4(a2) & 7;
  }
  uint64_t v13 = v3;
  if (v6 <= 1) {
    LOBYTE(v6) = 1;
  }
  int v14 = 393199;
  int v15 = v4 & 0x80000000 | (256LL << (v6 - 1)) | 0xFF;
  uint64_t v16 = v3;
  if ((a2 & 2) != 0) {
    int v7 = 401;
  }
  else {
    int v7 = 273;
  }
  unsigned int v17 = v7;
  __int128 v18 = 0uLL;
  int v19 = 0;
  uint64_t v20 = v3 + 56;
  uint64_t v21 = a2 & 2 | 0x3700000001LL;
  uint64_t v22 = a2;
  double result = _dispatch_kq_poll(v3, &v13, 1LL, &v13, 1LL, 0LL, 0LL, 3LL);
  if ((_DWORD)result)
  {
LABEL_18:
    int v11 = DWORD1(v18);
    uint64_t v12 = HIWORD(v14) & 0xBFFF;
    HIWORD(v14) &= ~0x4000u;
    LODWORD(v18) = DWORD1(v18);
    *(void *)((char *)&v18 + 4) = 0LL;
    if ((_DWORD)v18 != 105)
    {
      if (v11 == 34)
      {
LABEL_23:
        int v11 = v15;
        qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Broken priority";
        qword_61258 = v15;
        __break(1u);
        goto LABEL_24;
      }

      if (v11 != 2)
      {
LABEL_24:
        qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
        qword_61258 = v11;
        __break(1u);
        return result;
      }

      qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
      qword_61258 = ((unint64_t)v17 << 32) | (v12 << 16) | 2;
      __break(1u);
    }

    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid workloop owner, possible memory corruption";
    qword_61258 = v22;
    __break(1u);
    goto LABEL_23;
  }

  if ((a3 & 1) != 0 && *(_DWORD *)(v3 + 8) != 0x7FFFFFFF)
  {
    uint64_t v4 = (unsigned int *)(v3 + 8);
    do
    {
      unsigned int v8 = __ldxr(v4);
      BOOL v9 = __OFSUB__(v8, 2);
      signed int v10 = v8 - 2;
    }

    while (__stlxr(v10, v4));
    if ((v10 < 0) ^ v9 | (v10 == 0))
    {
      qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
      __break(1u);
LABEL_17:
      qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Waking up a kq with cooperative thread request is not supported";
      qword_61258 = (uint64_t)v4;
      __break(1u);
      goto LABEL_18;
    }
  }

  return result;
}

uint64_t _dispatch_kevent_workloop_poke_drain(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 24);
  if ((v1 & 0x80000000) != 0) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 232);
  double result = *(void *)(result + 16);
  uint64_t v4 = *(unsigned __int16 *)(v2 + 10);
  if ((v4 & 0x4000) == 0)
  {
    if ((*(_BYTE *)(v3 + 45) & 1) != 0) {
      return result;
    }
    *(_BYTE *)(v3 + 45) |= 1u;
    if (*(_DWORD *)(result + 8) == 0x7FFFFFFF) {
      goto LABEL_8;
    }
    unint64_t v5 = result + 8;
    do
    {
      int v6 = __ldxr((unsigned int *)v5);
      uint64_t v1 = (v6 + 1);
      LODWORD(v7) = __stxr(v1, (unsigned int *)v5);
    }

    while ((_DWORD)v7);
    if (v6 > 0) {
      goto LABEL_8;
    }
    goto LABEL_36;
  }

  uint64_t v7 = *(void *)(v2 + 32);
  *(_DWORD *)(v2 + 28) = v7;
  unint64_t v5 = *(void *)(v2 + 64);
  v4 &= ~0x4000uLL;
  *(_WORD *)(v2 + 1_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v4;
  *(void *)(v2 + 32) = 0LL;
  if ((_DWORD)v7 != 70)
  {
LABEL_37:
    switch((_DWORD)v7)
    {
      case 0x69:
LABEL_42:
        qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid workloop owner, possible memory corruption";
        qword_61258 = v5;
        __break(1u);
        goto LABEL_43;
      case 0x22:
LABEL_43:
        uint64_t v18 = *(int *)(v2 + 12);
        qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Broken priority";
        qword_61258 = v18;
        __break(1u);
        goto LABEL_44;
      case 2:
        qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
        qword_61258 = (v4 << 16) | (v1 << 32) | 2;
        __break(1u);
        break;
    }

LABEL_8:
  *(void *)uint64_t v3 = *(void *)(result + 24);
  *(void *)(v3 + 8) = result;
  unsigned int v8 = __clz(__rbit32((*(_DWORD *)(v2 + 12) >> 8) & 0x3FFF));
  if (((*(_DWORD *)(v2 + 12) >> 8) & 0x3FFF) != 0) {
    unsigned int v9 = v8 + 1;
  }
  else {
    unsigned int v9 = 0;
  }
  *(_DWORD *)(v3 + 16) = v9;
  return result;
}

  unsigned int v8 = (unint64_t *)(result + 448);
  unsigned int v9 = (unint64_t *)(result + 464);
  while (1)
  {
    int v10 = __ldxr(v9);
    if (a3 <= v10) {
      break;
    }
    if (!__stxr(a3, v9)) {
      goto LABEL_11;
    }
  }

  __clrex();
LABEL_11:
  if (a3 <= v10) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = a3 - v10;
  }
  __int16 v12 = (unint64_t *)(result + 488);
  while (1)
  {
    int v13 = __ldxr(v12);
    if (a4 <= v13) {
      break;
    }
    if (!__stxr(a4, v12)) {
      goto LABEL_17;
    }
  }

  __clrex();
LABEL_17:
  if (a4 <= v13) {
    unsigned int v14 = 0;
  }
  else {
    unsigned int v14 = a4 - v13;
  }
  if (v11 | (unsigned __int16)v14)
  {
    BOOL v15 = (unint64_t *)(result + 256);
    do
      unint64_t v16 = __ldxr(v15);
    while (__stxr( v16 & 0xFFFF00000000LL | ((unint64_t)(v14 + HIWORD(v16)) << 48) | ((unint64_t)(unsigned __int16)(v11 + WORD1(v16)) << 16) | (unsigned __int16)v16,  v15));
    int v17 = v11 | ((unint64_t)(unsigned __int16)v14 << 16);
    do
      uint64_t v18 = __ldxr(v8);
    while (__stlxr(v18 + v17, v8));
    if (a6) {
      *a6 = v18 + v17;
    }
    if (a2)
    {
      if ((_WORD)v14)
      {
        int v19 = (unint64_t *)(result + 496);
        do
          uint64_t v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }

      if (v11)
      {
        uint64_t v21 = (unint64_t *)(result + 472);
        do
          uint64_t v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
    }
  }

  else if (a6)
  {
    *a6 = *v8;
  }

  return result;
}

  uint64_t v7 = v28.st_mode & 0xF000;
  if (v7 == 0x4000)
  {
    int v6 = 21;
    goto LABEL_16;
  }

  unsigned int v8 = *(void *)(a1 + 48);
  if (*(void *)(v8 + 72) == 1LL)
  {
    int v6 = 29;
    if (v7 == 4096 || v7 == 49152) {
      goto LABEL_16;
    }
  }

  if (*(void *)(a1 + 176)) {
    goto LABEL_9;
  }
  BOOL v15 = *(void *)(a1 + 80);
  unint64_t v16 = dispatch_io_defaults;
  int v17 = *(_DWORD *)(a1 + 56);
  if (v17 == 1)
  {
    if (dispatch_io_defaults >= v15) {
      int v26 = *(void *)(a1 + 80);
    }
    else {
      int v26 = dispatch_io_defaults;
    }
    *(void *)(a1 + 192) = 0LL;
    uint64_t v27 = *(dispatch_data_s **)(a1 + 232);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 0x40000000LL;
    _OWORD v30[2] = ___dispatch_operation_perform_block_invoke;
    v30[3] = &__block_descriptor_tmp_66;
    v30[4] = a1;
    v30[5] = v26;
    dispatch_data_apply(v27, v30);
    int v28 = *(void *)(a1 + 192);
    if (v28 > v15)
    {
      *(void *)(a1 + 192) = v15;
      int v28 = v15;
    }

    subrange = dispatch_data_create_subrange(*(dispatch_data_t *)(a1 + 232), 0LL, v28);
    *(void *)(a1 + 224) = dispatch_data_create_map(subrange, (const void **)(a1 + 176), 0LL);
    _dispatch_objc_release(subrange);
    goto LABEL_9;
  }

  if (v17) {
    goto LABEL_9;
  }
  size = dispatch_data_get_size(*(dispatch_data_t *)(a1 + 232));
  if (v15 - size >= v16) {
    int v19 = v16;
  }
  else {
    int v19 = v15 - size;
  }
  uint64_t v20 = *(void *)(a1 + 112);
  if (v20 != -1)
  {
    uint64_t v21 = v20 - *(void *)(a1 + 216);
    if (v21 < v19) {
      int v19 = v21;
    }
  }

  *(void *)(a1 + 192) = v19;
  uint64_t v4 = posix_memalign((void **)(a1 + 176), vm_page_size, v19);
  if (!v4)
  {
LABEL_9:
    unint64_t v5 = *(_DWORD **)(a1 + 144);
    if (*v5 == -1)
    {
      uint64_t v4 = _dispatch_fd_entry_open((uint64_t)v5, *(void *)(a1 + 136));
      if (v4) {
        goto LABEL_35;
      }
    }

    int v6 = *(void *)(a1 + 200);
    uint64_t v7 = *(void *)(a1 + 176) + v6;
    unsigned int v8 = *(void *)(a1 + 192) - v6;
    unsigned int v9 = *(void *)(a1 + 216) + *(void *)(a1 + 104);
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      uint64_t v11 = *(_DWORD *)(a1 + 56);
      if (v11 == 1)
      {
        unsigned int v14 = *(void *)(a1 + 64);
        if (v14 == 1)
        {
          NOCANCEL = pwrite_NOCANCEL(**(unsigned int **)(a1 + 144), v7, v8, v9);
        }

        else
        {
          if (v14) {
            goto LABEL_22;
          }
          NOCANCEL = write_NOCANCEL(**(unsigned int **)(a1 + 144), v7, v8);
        }
      }

      else
      {
        if (v11) {
          goto LABEL_22;
        }
        __int16 v12 = *(void *)(a1 + 64);
        if (v12 == 1)
        {
          NOCANCEL = pread_NOCANCEL(**(unsigned int **)(a1 + 144), v7, v8, v9);
        }

        else
        {
          if (v12) {
            goto LABEL_22;
          }
          NOCANCEL = read_NOCANCEL(**(unsigned int **)(a1 + 144), v7, v8);
        }
      }

      if (NOCANCEL != -1)
      {
        if (!NOCANCEL) {
          return 3LL;
        }
        *(void *)(a1 + 200) += NOCANCEL;
        __int16 v25 = *(void *)(a1 + 216) + NOCANCEL;
        *(void *)(a1 + 216) = v25;
        if (v25 == *(void *)(a1 + 112)) {
          return 1LL;
        }
        else {
          return 2LL;
        }
      }

void _dispatch_kevent_print_error(uint64_t a1)
{
  __int16 v2 = *(_WORD *)(a1 + 10);
  if ((v2 & 2) != 0)
  {
    if ((*(_WORD *)(a1 + 10) & 0x100) != 0 && *(void *)(a1 + 32) == 36LL) {
      return;
    }
    uint64_t v3 = 0LL;
  }

  else
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if ((v3 & 1) != 0)
    {
      unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v3 = 0LL;
      v2 |= *(_WORD *)(v4 + 34);
      goto LABEL_10;
    }

    if (v3 && !*(void *)(v3 + 16))
    {
      v2 |= 1u;
LABEL_10:
      *(_WORD *)(a1 + 1_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v2;
    }
  }

  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    if (v5 == 34)
    {
      uint64_t v11 = *(int *)(a1 + 12);
      qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Invalid kevent priority";
      qword_61258 = v11;
      __break(1u);
    }

    else
    {
      int v6 = _evfiltstr(*(__int16 *)(a1 + 8));
      uint64_t v7 = *(void *)(a1 + 16);
      unsigned int v8 = "enable";
      if ((v2 & 4) == 0) {
        unsigned int v8 = "monitor";
      }
      if ((v2 & 1) != 0) {
        unsigned int v9 = "add";
      }
      else {
        unsigned int v9 = v8;
      }
      if ((v2 & 2) != 0) {
        unsigned int v9 = "delete";
      }
      if (v7) {
        int v10 = v9;
      }
      else {
        int v10 = 0LL;
      }
      _dispatch_bug_kevent_client("kevent", v6, v10, v5, *(void *)a1, v7, v3);
    }
  }

void _dispatch_kevent_mach_msg_drain(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = v4;
  int v6 = *(void **)(a1 + 16);
  uint64_t v7 = *(unsigned int *)(a1 + 60);
  uint64_t v8 = *(int *)(a1 + 12);
  uint64_t v9 = *(unsigned __int16 *)(a1 + 10);
  mach_error_t v10 = *(_DWORD *)(a1 + 24);
  if (v10 != 268451844)
  {
    if (v10 == 268451848)
    {
      uint64_t v17 = *(int *)(a1 + 12);
      uint64_t v18 = v6;
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unable to copyout msg, possible port leak";
      qword_61258 = 268451848LL;
      __break(1u);
    }

    else
    {
      uint64_t v11 = *(void *)(a1 + 40);
      if (v11)
      {
        if (!v10)
        {
          if (*(_DWORD *)(a1 + 64)) {
            uint64_t v12 = v4 + v11;
          }
          else {
            uint64_t v12 = 0LL;
          }
          _dispatch_kevent_mach_msg_recv(*(void **)(a1 + 16), v9, v11, v12, v7, v8);
          return;
        }

        goto LABEL_26;
      }
    }

    uint64_t v17 = v8;
    uint64_t v18 = v6;
    qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: EVFILT_MACHPORT with no message";
    qword_61258 = v10;
    __break(1u);
    goto LABEL_20;
  }

  if (!(_DWORD)v4)
  {
LABEL_20:
    uint64_t v5 = 268451844LL;
    uint64_t v17 = v8;
    uint64_t v18 = v6;
    qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: EVFILT_MACHPORT with no message size";
    qword_61258 = 268451844LL;
    __break(1u);
LABEL_21:
    uint64_t v17 = v8;
    uint64_t v18 = v6;
    qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: EVFILT_MACHPORT with overlarge message";
    qword_61258 = v5;
    __break(1u);
    goto LABEL_22;
  }

  if (!*(void *)(a1 + 32))
  {
    qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: MACH_RCV_LARGE_IDENTITY with no identity";
    __break(1u);
    return;
  }

  int v13 = v4 + 68;
  uint64_t v1 = malloc((v4 + 68));
  __int16 v2 = &v16;
  if (!__chkstk_darwin())
  {
LABEL_22:
    _dispatch_bug(3256LL, (uint64_t)v1);
    int v13 = 0;
  }

  uint64_t v22 = v1;
  uint64_t v23 = 0LL;
  int v24 = 0;
  int v25 = v13;
  int v26 = v2;
  uint64_t v27 = 0LL;
  uint64_t v28 = 0x2800000000LL;
  uint64_t v19 = 0LL;
  uint64_t v20 = 0LL;
  uint64_t v21 = 0LL;
  mach_error_t v14 = mach_msg2();
  if (!v14)
  {
    if (*(_DWORD *)v2) {
      uint64_t v15 = (uint64_t)v2;
    }
    else {
      uint64_t v15 = 0LL;
    }
    _dispatch_kevent_mach_msg_recv(v6, v9 | 0x10000, (uint64_t)v1, v15, v7, v8);
    return;
  }

  mach_error_t v10 = v14;
  if (v14 == 268451844)
  {
    _dispatch_log( "BUG in libdispatch client: _dispatch_kevent_mach_msg_drain: dropped message too large to fit in memory: id = 0x%x, size = %u",  v1[5],  *(void *)(a1 + 48));
    mach_error_t v10 = 0;
  }

  free(v1);
LABEL_26:
  if (v10) {
    _dispatch_bug_mach_client("_dispatch_kevent_mach_msg_drain: message reception failed", v10);
  }
}

void *_dispatch_kevent_merge_muxed(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFFELL;
  if ((*(_WORD *)(a1 + 10) & 0x12) != 0) {
    *(_WORD *)(v2 + 34) |= 2u;
  }
  double result = *(void **)(v2 + 16);
  if (result)
  {
    do
    {
      uint64_t v4 = (void *)*result;
      _dispatch_kevent_merge((uint64_t)(result + 3), a1);
      double result = v4;
    }

    while (v4);
  }

  return result;
}

uint64_t _dispatch_kevent_merge(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(unsigned __int8 *)(*(void *)a1 + 9LL);
  if (*(_DWORD *)(7LL - *(void *)(a1 + 8)) != 0x7FFFFFFF)
  {
    int v6 = (unsigned int *)(7LL - *(void *)(a1 + 8));
    do
      int v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if (v7 <= 0)
    {
      qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
      __break(1u);
LABEL_36:
      _dispatch_unote_unregister(a1, 5);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, void))(*(void *)a1 + 48LL))( a1,  *(unsigned __int16 *)(a2 + 10),  v2,  *(_DWORD *)(a2 + 12) & 0xFFFFFF);
    }
  }

  switch((int)v5)
  {
    case 0:
      uint64_t v2 = *(void *)(a2 + 32);
      break;
    case 1:
      else {
        uint64_t v2 = *(unsigned int *)(a2 + 24);
      }
      break;
    case 2:
      uint64_t v2 = (*(_DWORD *)(a1 + 32) & *(_DWORD *)(a2 + 24));
      if ((*(_BYTE *)(a1 + 29) & 4) != 0)
      {
        mach_error_t v10 = (unint64_t *)(a1 + 72);
        uint64_t v11 = (*(void *)(a2 + 32) << 32) | v2;
        do
          unsigned int v12 = __ldxr(v10);
        while (__stxr(v12 | (unint64_t)v11, v10));
      }

      else if (*(unsigned __int8 *)(a1 + 28) == 248)
      {
        uint64_t v2 = 2LL;
        *(void *)(a1 + 72) = 2LL;
      }

      else if ((_DWORD)v2)
      {
        int v13 = (unint64_t *)(a1 + 72);
        do
          unint64_t v14 = __ldxr(v13);
        while (__stxr(v14 | v2, v13));
      }

      else
      {
        uint64_t v2 = 0LL;
      }

      break;
    case 3:
      uint64_t v2 = *(void *)(a2 + 32);
      *(void *)(a1 + 72) = ~v2;
      break;
    case 4:
      uint64_t v2 = *(void *)(a2 + 32);
      if (v2)
      {
        uint64_t v8 = (unint64_t *)(a1 + 72);
        do
          unint64_t v9 = __ldxr(v8);
        while (__stxr(v9 + v2, v8));
      }

      break;
    default:
      qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Corrupt unote action";
      qword_61258 = v5;
      __break(1u);
      JUMPOUT(0x292CCLL);
  }

  __int16 v15 = *(_WORD *)(a2 + 10);
  if ((v15 & 0x110) == 0x10) {
    goto LABEL_36;
  }
  if ((v15 & 2) != 0)
  {
    unint64_t v16 = 2LL;
    goto LABEL_33;
  }

  if ((*(_WORD *)(a2 + 10) & 0x210) != 0)
  {
    unint64_t v16 = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL | 2;
LABEL_33:
    *(void *)(a1 + 16) = v16;
    return (*(uint64_t (**)(uint64_t, void, uint64_t, void))(*(void *)a1 + 48LL))( a1,  *(unsigned __int16 *)(a2 + 10),  v2,  *(_DWORD *)(a2 + 12) & 0xFFFFFF);
  }

  if ((v15 & 0x80) != 0)
  {
    unint64_t v16 = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFFELL;
    goto LABEL_33;
  }

  return (*(uint64_t (**)(uint64_t, void, uint64_t, void))(*(void *)a1 + 48LL))( a1,  *(unsigned __int16 *)(a2 + 10),  v2,  *(_DWORD *)(a2 + 12) & 0xFFFFFF);
}

const char *_evfiltstr(unsigned int a1)
{
  if (a1 < 0xFFFFFFE8) {
    return "EVFILT_missing";
  }
  else {
    return off_58FB0[(int)a1 + 24];
  }
}

uint64_t _dispatch_kevent_mach_msg_recv( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v6 = *(_DWORD *)(a3 + 4);
  if (v6 >= 0xFFFFFFBC) {
    _dispatch_kevent_mach_msg_recv_cold_1(*(_DWORD *)(a3 + 4));
  }
  if (!*(_DWORD *)(a3 + 12)) {
    _dispatch_kevent_mach_msg_recv_cold_2(a3);
  }
  if (*(_DWORD *)(7LL - a1[1]) != 0x7FFFFFFF)
  {
    int v13 = (unsigned int *)(7LL - a1[1]);
    do
      int v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if (v14 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

  if ((a2 & 0x110) == 0x10)
  {
    _dispatch_unote_unregister((uint64_t)a1, 5);
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))(*a1 + 56LL))( a1,  a2,  a3,  v6 + 68,  a4,  a5,  a6);
  }

  if ((a2 & 2) != 0)
  {
    unint64_t v15 = 2LL;
    goto LABEL_14;
  }

  if ((a2 & 0x210) != 0)
  {
    unint64_t v15 = a1[2] & 0xFFFFFFFFFFFFFFFCLL | 2;
LABEL_14:
    a1[2] = v15;
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))(*a1 + 56LL))( a1,  a2,  a3,  v6 + 68,  a4,  a5,  a6);
  }

  if ((a2 & 0x80) != 0)
  {
    unint64_t v15 = a1[2] & 0xFFFFFFFFFFFFFFFELL;
    goto LABEL_14;
  }

  return (*(uint64_t (**)(void *, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))(*a1 + 56LL))( a1,  a2,  a3,  v6 + 68,  a4,  a5,  a6);
}

uint64_t mach_msg2()
{
  return mach_msg2_internal();
}

uint64_t _dispatch_kq_init(_BYTE *a1)
{
  if ((_dispatch_unsafe_fork & 1) == 0) {
    _dispatch_fork_becomes_unsafe_slow();
  }
  if (getenv("LIBDISPATCH_TIMERS_FORCE_MAX_LEEWAY")) {
    _dispatch_timers_force_max_leeway = 1;
  }
  *a1 = 1;
  _dispatch_kevent_workqueue_init();
  uint64_t v2 = dword_64E60;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v7 = 0u;
  v6[0] = 1LL;
  v6[1] = 0x20000000021FFF6LL;
  v6[2] = -8LL;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    uint64_t result = kevent_qos(v2, v6, 1LL, 0LL, 0LL, 0LL, 0LL, 33LL);
    if ((_DWORD)result != -1) {
      break;
    }
    int v5 = **(_DWORD **)(StatusReg + 8);
    if (v5 != 4) {
      _dispatch_kq_init_cold_1(v5);
    }
  }

  return result;
}

void _dispatch_memorypressure_create(unint64_t mask)
{
  dispatch_source_t v1 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_memorystatus,  0LL,  mask,  (dispatch_queue_t)&_dispatch_mgr_q);
  dispatch_set_context(v1, v1);
  dispatch_source_set_event_handler_f(v1, (dispatch_function_t)_dispatch_memorypressure_handler);
  dispatch_activate(v1);
  if (_dispatch_memorypressure_source)
  {
    dispatch_source_cancel((dispatch_source_t)_dispatch_memorypressure_source);
    dispatch_release((dispatch_object_t)_dispatch_memorypressure_source);
  }

  _dispatch_memorypressure_source = (uint64_t)v1;
}

uint64_t _dispatch_memorypressure_handler(dispatch_source_s *a1)
{
  unint64_t data = dispatch_source_get_data(a1);
  if ((data & 0xF0000000) != 0
    && dispatch_source_get_mask((dispatch_source_t)_dispatch_memorypressure_source) != malloc_memorypressure_mask_msl_4libdispatch)
  {
    _dispatch_memorypressure_create(malloc_memorypressure_mask_msl_4libdispatch);
  }

  if ((data & 1) != 0)
  {
    _dispatch_memory_warn = 0;
    _dispatch_continuation_cache_limit = 112;
    uint64_t v2 = _firehose_task_buffer;
    if (_firehose_task_buffer)
    {
      uint64_t v3 = (unint64_t *)(_firehose_task_buffer + 512);
      do
        unint64_t v4 = __ldxr(v3);
      while (__stxr(v4 & 0xFFFFFFFFFFFFFFFELL, v3));
      if ((v4 & 1) != 0) {
        firehose_buffer_update_limits(v2);
      }
    }
  }

  if ((data & 2) != 0)
  {
    _dispatch_memory_warn = 1;
    _dispatch_continuation_cache_limit = 16;
    uint64_t v5 = _firehose_task_buffer;
    if (_firehose_task_buffer)
    {
      unsigned int v6 = (unint64_t *)(_firehose_task_buffer + 512);
      do
        unint64_t v7 = __ldxr(v6);
      while (__stxr(v7 | 1, v6));
      if (v7 != (v7 | 1)) {
        firehose_buffer_update_limits(v5);
      }
    }
  }

  return malloc_memory_event_handler(data);
}

void _dispatch_mach_host_notify_update()
{
  kern_return_t v1;
  if (_dispatch_mach_host_port_pred != -1) {
    dispatch_once_f(&_dispatch_mach_host_port_pred, 0LL, (dispatch_function_t)_dispatch_mach_host_port_init);
  }
  host_t v0 = _dispatch_mach_host_port;
  if (_dispatch_mach_notify_port_pred != -1) {
    dispatch_once_f(&_dispatch_mach_notify_port_pred, 0LL, (dispatch_function_t)_dispatch_mach_notify_port_init);
  }
  dispatch_source_t v1 = host_request_notification(v0, 1, _dispatch_mach_notify_port);
  if (v1 == -301) {
    _dispatch_sema4_create_slow_cold_2();
  }
  if (v1) {
    _dispatch_bug(2893LL, v1);
  }
}

void _dispatch_mach_notify_port_init()
{
  kern_return_t v1;
  mach_port_options_t v2;
  v2.reserved[1] = 0LL;
  *(_OWORD *)&v2.flags = xmmword_40150;
  dispatch_source_t v1 = mach_port_construct( mach_task_self_,  &v2,  (mach_port_context_t)&_dispatch_mach_notify_port,  (mach_port_name_t *)&_dispatch_mach_notify_port);
  if (v1)
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: mach_port_construct() failed: cannot create receive right";
    qword_61258 = v1;
    __break(1u);
    goto LABEL_5;
  }

  host_t v0 = _dispatch_unote_create_with_handle( (uint64_t)&_dispatch_mach_type_notification,  _dispatch_mach_notify_port,  0LL);
  *((void *)v0 + _dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = ~(unint64_t)&_dispatch_mgr_q;
  if ((_dispatch_unote_register((uint64_t)v0, -4LL, 0x2000000u) & 1) == 0) {
LABEL_5:
  }
    _dispatch_bug(2842LL, 0LL);
  _dispatch_mach_notify_unote = (uint64_t)v0;
}

uint64_t _dispatch_kevent_mach_notify_resume(uint64_t a1, int a2, int a3)
{
  kern_return_t v9;
  kern_return_t v10;
  int v12;
  kern_return_t v13;
  uint64_t v15;
  char v16;
  mach_port_t previous;
  int v18;
  unint64_t v4 = (void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 56);
  mach_port_name_t v5 = *(_DWORD *)(a1 + 24);
  uint64_t v6 = (v3 | (*(_DWORD *)(a1 + 48) | a2) & 0xD) & (~a3 | 0xFFFFFFF2);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = v6 & 0xD;
  if ((v3 & 0xD) != 0 || !v7)
  {
    unsigned int v12 = 0;
    if ((v3 & 0xD) == 0 || v7) {
      return v12 == 0;
    }
    previous = 0;
    int v13 = mach_port_request_notification(mach_task_self_, v5, 66, 0, 0, 0x12u, &previous);
    mach_error_t v10 = 0;
    if (v13 > 0x11 || ((1 << v13) & 0x28011) == 0)
    {
      if (v13 == -301) {
        _dispatch_sema4_create_slow_cold_2();
      }
      _dispatch_bug(2966LL, v13);
      mach_error_t v10 = 0;
    }

    goto LABEL_17;
  }

  previous = 0;
  mach_port_t v8 = mach_task_self_;
  if (_dispatch_mach_notify_port_pred != -1) {
    dispatch_once_f(&_dispatch_mach_notify_port_pred, 0LL, (dispatch_function_t)_dispatch_mach_notify_port_init);
  }
  __int128 v9 = mach_port_request_notification(v8, v5, 66, 0, _dispatch_mach_notify_port, 0x15u, &previous);
  mach_error_t v10 = v9;
  if (v9 <= 14)
  {
    if (v9 == -301) {
      _dispatch_sema4_create_slow_cold_2();
    }
    if (!v9)
    {
      unsigned int v12 = previous;
      if (!previous) {
        return v12 == 0;
      }
      unint64_t v16 = _dispatch_kevent_mach_notify_resume_cold_3(previous, &previous, &v18);
      unsigned int v12 = v18;
      if ((v16 & 1) == 0) {
        return v12 == 0;
      }
      mach_error_t v10 = 0;
      unint64_t v15 = 2947LL;
      goto LABEL_31;
    }
  }

  else if (v9 == 15 || v9 == 17)
  {
    *v4 &= 0xFFFFFFF2uLL;
    goto LABEL_17;
  }

  _dispatch_kevent_mach_notify_resume_cold_1(v9, v4);
LABEL_17:
  if (!previous) {
    goto LABEL_18;
  }
  unsigned int v12 = _dispatch_send_consume_send_once_right(previous);
  if (!v12) {
    goto LABEL_18;
  }
  unint64_t v15 = 2976LL;
LABEL_31:
  _dispatch_bug(v15, v12);
LABEL_18:
  unsigned int v12 = v10;
  return v12 == 0;
}

uint64_t voucher_adopt(uint64_t a1)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v2 = *(void *)(StatusReg + 224);
  if (a1 != -3)
  {
    if (v2 == a1) {
      return a1;
    }
    *(void *)(StatusReg + 224) = a1;
    if (a1)
    {
      uint64_t v3 = *(unsigned int *)(a1 + 32);
      if (v2)
      {
LABEL_5:
        int v4 = *(_DWORD *)(v2 + 32);
LABEL_11:
        if ((_DWORD)v3 != -1 && (_DWORD)v3 != v4) {
          _dispatch_set_priority_and_mach_voucher_slow(0LL, v3);
        }
        return v2;
      }
    }

    else
    {
      uint64_t v3 = 0LL;
      if (v2) {
        goto LABEL_5;
      }
    }

    int v4 = 0;
    goto LABEL_11;
  }

  if (v2) {
    os_retain(*(void **)(StatusReg + 224));
  }
  return v2;
}

uint64_t voucher_copy()
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v1 = *(void *)(StatusReg + 224);
  if (v1) {
    os_retain(*(void **)(StatusReg + 224));
  }
  return v1;
}

_DWORD *voucher_copy_without_importance()
{
  uint64_t result = *(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if (result) {
    return _voucher_create_without_importance(result);
  }
  return result;
}

void *voucher_retain(void *a1)
{
  return a1;
}

void _voucher_dealloc_mach_voucher(mach_port_name_t a1)
{
  kern_return_t v1;
  uint64_t v1 = mach_voucher_deallocate(a1);
  if (v1 == -301) {
    _dispatch_sema4_create_slow_cold_2();
  }
  if (v1) {
    _dispatch_bug(302LL, v1);
  }
}

uint64_t _voucher_task_mach_voucher_init()
{
  host_t mach_host_port = _dispatch_get_mach_host_port();
  ipc_voucher_t voucher = 0;
  uint64_t result = host_create_mach_voucher(mach_host_port, _voucher_task_mach_voucher_init_task_create_recipe, 0x10u, &voucher);
  if ((_DWORD)result == -301) {
    _dispatch_sema4_create_slow_cold_2();
  }
  if ((_DWORD)result) {
    _voucher_task_mach_voucher_init_cold_2(result);
  }
  _voucher_default_task_int mach_voucher = voucher;
  _voucher_task_int mach_voucher = voucher;
  return result;
}

void voucher_replace_default_voucher()
{
  kern_return_t v4;
  ipc_voucher_t v5;
  int v6;
  mach_port_name_t v7;
  BOOL v8;
  uint8_t recipes[8];
  int v10;
  int v11;
  ipc_voucher_t voucher;
  if (_voucher_task_mach_voucher_pred != -1) {
    dispatch_once_f(&_voucher_task_mach_voucher_pred, 0LL, (dispatch_function_t)_voucher_task_mach_voucher_init);
  }
  uint64_t v0 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if (v0)
  {
    int v1 = *(_DWORD *)(v0 + 32);
    if (v1)
    {
      int v2 = *(_DWORD *)(v0 + 36);
      if (!v2) {
        int v2 = v1;
      }
      *(void *)recipes = 0x100000003LL;
      mach_error_t v10 = v2;
      uint64_t v11 = 0;
      host_t mach_host_port = _dispatch_get_mach_host_port();
      ipc_voucher_t voucher = 0;
      int v4 = host_create_mach_voucher(mach_host_port, recipes, 0x10u, &voucher);
      if (v4 == -301) {
        _dispatch_sema4_create_slow_cold_2();
      }
      if (v4)
      {
        _dispatch_bug(362LL, v4);
      }

      else
      {
        mach_port_name_t v5 = voucher;
        if (voucher)
        {
          uint64_t v6 = _voucher_default_task_mach_voucher;
          goto LABEL_13;
        }
      }
    }
  }

  uint64_t v6 = _voucher_default_task_mach_voucher;
  mach_port_name_t v5 = _voucher_default_task_mach_voucher;
  do
LABEL_13:
    uint64_t v7 = __ldxr((unsigned int *)&_voucher_task_mach_voucher);
  while (__stxr(v5, (unsigned int *)&_voucher_task_mach_voucher));
  if (v7) {
    mach_port_t v8 = v7 == v6;
  }
  else {
    mach_port_t v8 = 1;
  }
  if (!v8) {
    _voucher_dealloc_mach_voucher(v7);
  }
}

uint64_t _voucher_get_mach_voucher(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = *(unsigned int *)(result + 36);
    if (!(_DWORD)result)
    {
      uint64_t result = *(unsigned int *)(v1 + 32);
      if (!(_DWORD)result)
      {
        if (_voucher_task_mach_voucher_pred != -1) {
          dispatch_once_f(&_voucher_task_mach_voucher_pred, 0LL, (dispatch_function_t)_voucher_task_mach_voucher_init);
        }
        return _voucher_task_mach_voucher;
      }
    }
  }

  return result;
}

_DWORD *_voucher_create_without_importance(_DWORD *object)
{
  kern_return_t v4;
  ipc_voucher_t v5;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  ipc_voucher_t voucher;
  uint8_t recipes[8];
  mach_port_name_t v12;
  __int128 v13;
  int v14;
  uint64_t v1 = object;
  if (!object) {
    return v1;
  }
  if (!object[8] || (object[18] & 1) == 0) {
    goto LABEL_12;
  }
  if (object[9]) {
    mach_port_name_t v2 = object[9];
  }
  else {
    mach_port_name_t v2 = object[8];
  }
  *(void *)recipes = 0x1FFFFFFFFLL;
  unsigned int v12 = v2;
  int v13 = xmmword_40180;
  int v14 = 0;
  host_t mach_host_port = _dispatch_get_mach_host_port();
  ipc_voucher_t voucher = 0;
  int v4 = host_create_mach_voucher(mach_host_port, recipes, 0x20u, &voucher);
  if (v4 == -301) {
    _dispatch_sema4_create_slow_cold_2();
  }
  if (v4)
  {
    _dispatch_bug(639LL, v4);
    goto LABEL_23;
  }

  mach_port_name_t v5 = voucher;
  if (!voucher)
  {
LABEL_23:
    if (v1[9]) {
      return 0LL;
    }
    mach_port_name_t v5 = 0;
  }

  if (v5 == v2)
  {
    _voucher_dealloc_mach_voucher(v2);
LABEL_12:
    os_retain(v1);
    return v1;
  }

  uint64_t v7 = _voucher_find_and_retain(v5);
  if (v7 && v1[9])
  {
    _voucher_dealloc_mach_voucher(v5);
    return (_DWORD *)v7;
  }

  else
  {
    mach_port_t v8 = _os_object_alloc_realized((objc_class *)&OBJC_CLASS___OS_voucher, 80LL);
    __int128 v9 = v8;
    *((_OWORD *)v8 + 3) = *((_OWORD *)v1 + 3);
    *((void *)v8 + 8) = *((void *)v1 + 8);
    v8[8] = v5;
    if (v1[9])
    {
      v8[9] = v5;
      _voucher_insert((uint64_t)v8);
    }

    else if (v7)
    {
      *((void *)v8 + 5) = v7;
      _voucher_dealloc_mach_voucher(v5);
    }

    return v9;
  }

uint64_t _voucher_find_and_retain(unsigned int a1)
{
  if (!a1) {
    return 0LL;
  }
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned int v3 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr((unsigned int *)&_voucher_hash_lock))
  {
  }

  __clrex();
  _dispatch_unfair_lock_lock_slow((uint64_t)&_voucher_hash_lock, 0x10000);
LABEL_8:
  for (uint64_t i = *((void *)&_voucher_hash + ((a1 >> 8) & 0x3F)); ; uint64_t i = *(void *)(15 - i))
  {
    uint64_t v5 = ~i;
    if (i == -1) {
      break;
    }
    if (*(_DWORD *)(35 - i) == a1)
    {
      uint64_t v7 = (unsigned int *)(11 - i);
      do
        unsigned int v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      if ((v8 & 0x80000000) != 0) {
        _voucher_find_and_retain_cold_1();
      }
      if (!v8)
      {
        __int128 v9 = (unsigned int *)(v5 + 8);
        do
          unsigned int v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }

      break;
    }
  }

  unsigned int v11 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    unsigned int v12 = __ldxr((unsigned int *)&_voucher_hash_lock);
  while (__stlxr(0, (unsigned int *)&_voucher_hash_lock));
  if (v12 != v11) {
    _dispatch_unfair_lock_unlock_slow((uint64_t)&_voucher_hash_lock, v12);
  }
  return v5;
}

uint64_t _voucher_insert(uint64_t result)
{
  unint64_t v1 = *(unsigned int *)(result + 36);
  if ((_DWORD)v1)
  {
    uint64_t v2 = result;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    unsigned int v4 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    while (!__ldaxr((unsigned int *)&_voucher_hash_lock))
    {
    }

    __clrex();
    _dispatch_unfair_lock_lock_slow((uint64_t)&_voucher_hash_lock, 0x10000);
LABEL_7:
    if (*(void *)(v2 + 24)) {
      _voucher_insert_cold_3();
    }
    uint64_t v6 = *(void *)(v2 + 48);
    if (v6) {
      _voucher_insert_cold_2(v6);
    }
    uint64_t result = *(void *)(v2 + 40);
    if (result) {
      _voucher_insert_cold_1(result);
    }
    uint64_t v7 = (unint64_t *)&_voucher_hash + ((v1 >> 8) & 0x3F);
    uint64_t v8 = *v7;
    *(void *)(v2 + 16) = *v7;
    if (v8 != -1) {
      *(void *)(23 - v8) = ~(v2 + 16);
    }
    *uint64_t v7 = ~v2;
    *(void *)(v2 + 24) = ~(unint64_t)v7;
    unsigned int v9 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    do
      unsigned int v10 = __ldxr((unsigned int *)&_voucher_hash_lock);
    while (__stlxr(0, (unsigned int *)&_voucher_hash_lock));
    if (v10 != v9) {
      return _dispatch_unfair_lock_unlock_slow((uint64_t)&_voucher_hash_lock, v10);
    }
  }

  return result;
}

_DWORD *_voucher_create_with_mach_msgv(unsigned int *a1, unsigned int *a2)
{
  unsigned int v3 = *a1;
  if ((*a1 & 0x1F0000) == 0)
  {
    int v6 = 0;
    unsigned int v5 = 0;
    if (a2) {
      goto LABEL_3;
    }
LABEL_8:
    unsigned int v8 = 0;
    uint64_t v10 = 0LL;
    return _voucher_create_with_mach_voucher(v5, v6, v10, v8);
  }

  unsigned int v5 = a1[4];
  a1[4] = 0;
  int v6 = v3 & 0x201F0000;
  *a1 = v3 & 0xDFE0FFFF;
  if (!a2) {
    goto LABEL_8;
  }
LABEL_3:
  unsigned int v7 = *a2;
  if (*a2 <= 7) {
    _voucher_create_with_mach_msgv_cold_1(*a2);
  }
  unsigned int v8 = v7 - 8;
  unsigned int v9 = a2 + 2;
  if (v7 == 8) {
    uint64_t v10 = 0LL;
  }
  else {
    uint64_t v10 = (uint64_t)v9;
  }
  return _voucher_create_with_mach_voucher(v5, v6, v10, v8);
}

_DWORD *_voucher_create_with_mach_voucher(unsigned int a1, int a2, uint64_t a3, unsigned int a4)
{
  if (a1)
  {
    uint64_t v8 = _voucher_find_and_retain(a1);
    if (v8)
    {
      unsigned int v9 = (_DWORD *)v8;
      _voucher_dealloc_mach_voucher(a1);
    }

    else
    {
      unsigned int v9 = _os_object_alloc_realized((objc_class *)&OBJC_CLASS___OS_voucher, 80LL);
      v9[8] = a1;
      v9[9] = a1;
      *((_BYTE *)v9 + 72) = v9[18] & 0xFE | ((a2 & 0x20000000) != 0);
      _voucher_insert((uint64_t)v9);
    }
  }

  else
  {
    unsigned int v9 = 0LL;
  }

  if (a4 >= 0x20 && *(_DWORD *)a3 == 59821818 && *(void *)(a3 + 8))
  {
    if (v9)
    {
      uint64_t v10 = *((void *)v9 + 6);
      if (v10) {
        _voucher_insert_cold_2(v10);
      }
      uint64_t v11 = *((void *)v9 + 5);
      if (v11) {
        _voucher_insert_cold_1(v11);
      }
      unsigned int v12 = _os_object_alloc_realized((objc_class *)&OBJC_CLASS___OS_voucher, 80LL);
      if (v9[8])
      {
        if (*((void *)v9 + 5)) {
          int v13 = (_DWORD *)*((void *)v9 + 5);
        }
        else {
          int v13 = v9;
        }
        os_retain(v13);
        *((void *)v12 + 5) = v13;
        v12[8] = v13[8];
        *((_BYTE *)v12 + 72) = v12[18] & 0xFE | v13[18] & 1;
      }

      os_release(v9);
    }

    else
    {
      unsigned int v12 = _os_object_alloc_realized((objc_class *)&OBJC_CLASS___OS_voucher, 80LL);
    }

    *((_OWORD *)v12 + 3) = *(_OWORD *)(a3 + 8);
    *((void *)v12 + 8) = *(void *)(a3 + 24);
    return v12;
  }

  return v9;
}

_DWORD *voucher_create_with_mach_msg(unsigned int *a1)
{
  unsigned int v1 = *a1;
  if ((*a1 & 0x1F0000) != 0)
  {
    unsigned int v3 = a1[4];
    a1[4] = 0;
    int v4 = v1 & 0x201F0000;
    *a1 = v1 & 0xDFE0FFFF;
  }

  else
  {
    int v4 = 0;
    unsigned int v3 = 0;
  }

  return _voucher_create_with_mach_voucher(v3, v4, 0LL, 0);
}

void voucher_decrement_importance_count4CF(uint64_t a1)
{
  kern_return_t v2;
  mach_msg_type_number_t out_contentCnt;
  uint8_t in_content[4];
  if (a1 && *(_DWORD *)(a1 + 32) && (*(_BYTE *)(a1 + 72) & 1) != 0)
  {
    ipc_voucher_t v1 = *(_DWORD *)(a1 + 36) ? *(_DWORD *)(a1 + 36) : *(_DWORD *)(a1 + 32);
    *(_DWORD *)in_content = 1;
    out_contentCnt = 0;
    uint64_t v2 = mach_voucher_attr_command(v1, 2u, 2u, in_content, 4u, 0LL, &out_contentCnt);
    if (v2 != 16)
    {
      if (v2 == -301) {
        _dispatch_sema4_create_slow_cold_2();
      }
      if (v2) {
        voucher_decrement_importance_count4CF_cold_1(v2, v2);
      }
    }
  }

char *_voucher_xref_dispose(char *result, const char *a2)
{
  uint64_t v2 = result;
  if (*((void *)result + 3))
  {
    int v3 = *((_DWORD *)result + 9);
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    unsigned int v5 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    while (!__ldaxr((unsigned int *)&_voucher_hash_lock))
    {
    }

    __clrex();
    uint64_t result = (char *)_dispatch_unfair_lock_lock_slow((uint64_t)&_voucher_hash_lock, 0x10000);
LABEL_7:
    if (!v3) {
      _voucher_insert_cold_3();
    }
    if (*((int *)v2 + 3) <= 0)
    {
      uint64_t v7 = *((void *)v2 + 3);
      if (v7)
      {
        uint64_t v8 = *((void *)v2 + 2);
        if (v8 != -1) {
          *(void *)(23 - v8) = v7;
        }
        *(void *)~uint64_t v7 = v8;
        *((_OWORD *)v2 + _dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = xmmword_40190;
      }
    }

    unsigned int v9 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    do
      a2 = (const char *)__ldxr((unsigned int *)&_voucher_hash_lock);
    while (__stlxr(0, (unsigned int *)&_voucher_hash_lock));
    if ((_DWORD)a2 != v9) {
      uint64_t result = (char *)_dispatch_unfair_lock_unlock_slow((uint64_t)&_voucher_hash_lock, a2);
    }
  }

  if (*((_DWORD *)v2 + 2) != 0x7FFFFFFF)
  {
    uint64_t v10 = (unsigned int *)(v2 + 8);
    do
      int v11 = __ldxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (v11 <= 1)
    {
      if (v11 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      return (char *)_os_object_dispose(v2, a2);
    }
  }

  return result;
}

void _voucher_dispose(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    _voucher_insert_cold_3();
  }
  *(_OWORD *)(a1 + 16) = xmmword_40190;
  mach_port_name_t v2 = *(_DWORD *)(a1 + 36);
  if (v2)
  {
    if (v2 != *(_DWORD *)(a1 + 32)) {
      _voucher_dealloc_mach_voucher(v2);
    }
    *(_DWORD *)(a1 + 36) = 0;
  }

  mach_port_name_t v3 = *(_DWORD *)(a1 + 32);
  if (v3)
  {
    if (!*(void *)(a1 + 40)) {
      _voucher_dealloc_mach_voucher(v3);
    }
    *(_DWORD *)(a1 + 32) = 0;
  }

  int v4 = *(void **)(a1 + 40);
  if (v4)
  {
    os_release(v4);
    *(void *)(a1 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = 0LL;
  }

  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
}

void _voucher_activity_debug_channel_init()
{
  kern_return_t v1;
  void *f;
  mach_port_t special_port;
  if (_voucher_libtrace_hooks)
  {
    uint64_t v0 = *(void *)(_voucher_libtrace_hooks + 16);
    if (v0)
    {
      ipc_voucher_t v1 = task_get_special_port(mach_task_self_, 10, &special_port);
      if (v1)
      {
        if (v1 == -301) {
          _dispatch_sema4_create_slow_cold_2();
        }
        _voucher_activity_debug_channel_init_cold_1(v1);
      }

      if (special_port)
      {
        f = (void *)dispatch_mach_create_f((uint64_t)"com.apple.debug-channel", 0LL, 0LL, v0);
        *(_BYTE *)(f[11] + 29LL) &= ~0x20u;
        dispatch_mach_connect(f, special_port, 0, 0LL);
        _voucher_activity_debug_channel = (uint64_t)f;
      }
    }
  }

uint64_t _voucher_atfork_prepare()
{
  unsigned int v0 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFC;
  while (!__ldaxr((unsigned int *)&_voucher_hash_lock))
  {
  }

  __clrex();
  return _dispatch_unfair_lock_lock_slow((uint64_t)&_voucher_hash_lock, 0x10000);
}

uint64_t _voucher_atfork_parent()
{
  unsigned int v0 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24) & 0xFFFFFFFC;
  do
    unsigned int v1 = __ldxr((unsigned int *)&_voucher_hash_lock);
  while (__stlxr(0, (unsigned int *)&_voucher_hash_lock));
  if (v1 != v0) {
    return _dispatch_unfair_lock_unlock_slow((uint64_t)&_voucher_hash_lock, v1);
  }
  return result;
}

__n128 _voucher_atfork_child()
{
  for (uint64_t i = 0LL; i != 64; ++i)
  {
    while (1)
    {
      uint64_t v1 = *((void *)&_voucher_hash + i);
      if (v1 == -1) {
        break;
      }
      uint64_t v2 = ~v1;
      *(void *)(v2 + 32) = 0LL;
      uint64_t v3 = *(void *)(v2 + 16);
      uint64_t v4 = *(void *)(v2 + 24);
      if (v3 != -1) {
        *(void *)(23 - v3) = v4;
      }
      *(void *)~uint64_t v4 = v3;
      *(_OWORD *)(v2 + 16) = xmmword_40190;
    }
  }

  result.n128_u64[0] = -1LL;
  result.n128_u64[1] = -1LL;
  xmmword_659B0 = (__int128)result;
  unk_659C0 = result;
  xmmword_65990 = (__int128)result;
  unk_659A0 = result;
  xmmword_65970 = (__int128)result;
  unk_65980 = result;
  xmmword_65950 = (__int128)result;
  unk_65960 = result;
  xmmword_65930 = (__int128)result;
  unk_65940 = result;
  xmmword_65910 = (__int128)result;
  unk_65920 = result;
  xmmword_658F0 = (__int128)result;
  unk_65900 = result;
  xmmword_658D0 = (__int128)result;
  unk_658E0 = result;
  xmmword_658B0 = (__int128)result;
  unk_658C0 = result;
  xmmword_65890 = (__int128)result;
  unk_658A0 = result;
  xmmword_65870 = (__int128)result;
  unk_65880 = result;
  xmmword_65850 = (__int128)result;
  unk_65860 = result;
  xmmword_65830 = (__int128)result;
  unk_65840 = result;
  xmmword_65810 = (__int128)result;
  unk_65820 = result;
  xmmword_657F0 = (__int128)result;
  unk_65800 = result;
  _voucher_hash = (__int128)result;
  unk_657E0 = result;
  _voucher_hash_lock = 0;
  *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224) = 0LL;
  _voucher_task_mach_voucher_pred = 0LL;
  _voucher_task_int mach_voucher = 0;
  _voucher_default_task_int mach_voucher = 0;
  _voucher_aid_next = 0LL;
  _firehose_task_buffer_pred = 0LL;
  _firehose_task_buffer = 0LL;
  return result;
}

uint64_t voucher_process_can_use_arbitrary_personas()
{
  if (_voucher_process_can_use_arbitrary_personas_pred != -1) {
    dispatch_once_f( &_voucher_process_can_use_arbitrary_personas_pred,  0LL,  (dispatch_function_t)_voucher_process_can_use_arbitrary_personas_init);
  }
  return _voucher_process_can_use_arbitrary_personas;
}

uint64_t _voucher_process_can_use_arbitrary_personas_init()
{
  if (_voucher_task_mach_voucher_pred != -1) {
    dispatch_once_f(&_voucher_task_mach_voucher_pred, 0LL, (dispatch_function_t)_voucher_task_mach_voucher_init);
  }
  mach_msg_type_number_t out_contentCnt = 4;
  uint64_t result = mach_voucher_attr_command(_voucher_task_mach_voucher, 3u, 4u, 0LL, 0, out_content, &out_contentCnt);
  if ((_DWORD)result) {
    _voucher_process_can_use_arbitrary_personas_init_cold_1(result);
  }
  _voucher_process_can_use_arbitrary_personas = *(_DWORD *)out_content != 0;
  return result;
}

uint64_t voucher_copy_with_persona_mach_voucher(int a1)
{
  kern_return_t v4;
  kern_return_t v5;
  ipc_voucher_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  ipc_voucher_t voucher;
  uint8_t recipes[8];
  mach_port_name_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v1 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if (!a1)
  {
    if (!v1) {
      return v1;
    }
    goto LABEL_13;
  }

  if (v1)
  {
    mach_port_name_t v2 = *(_DWORD *)(v1 + 36);
    if (!v2) {
      mach_port_name_t v2 = *(_DWORD *)(v1 + 32);
    }
  }

  else
  {
    mach_port_name_t v2 = 0;
  }

  *(void *)recipes = 0x1FFFFFFFFLL;
  int v13 = v2;
  int v14 = 0x300000000LL;
  unint64_t v15 = 10;
  unint64_t v16 = a1;
  uint64_t v17 = 0;
  host_t mach_host_port = _dispatch_get_mach_host_port();
  ipc_voucher_t voucher = 0;
  uint64_t v4 = host_create_mach_voucher(mach_host_port, recipes, 0x20u, &voucher);
  if (v4 == -301) {
    _dispatch_sema4_create_slow_cold_2();
  }
  unsigned int v5 = v4;
  if (!v4)
  {
    int v6 = voucher;
    if (voucher == v2)
    {
      if (v2) {
        _voucher_dealloc_mach_voucher(v2);
      }
      goto LABEL_13;
    }

LABEL_26:
    v9[9] = v6;
    _voucher_insert((uint64_t)v9);
    return (uint64_t)v9;
  }

  _dispatch_bug(944LL, v4);
  if (v5 == 20) {
    return -1LL;
  }
  if (v2)
  {
    int v6 = 0;
    goto LABEL_18;
  }

uint64_t mach_voucher_persona_self(ipc_voucher_t *a1)
{
  *(_OWORD *)recipes = xmmword_401D0;
  __int128 v9 = unk_401E0;
  host_t mach_host_port = _dispatch_get_mach_host_port();
  ipc_voucher_t voucher = 0;
  uint64_t v3 = host_create_mach_voucher(mach_host_port, recipes, 0x20u, &voucher);
  if ((_DWORD)v3 == -301) {
    _dispatch_sema4_create_slow_cold_2();
  }
  uint64_t v4 = v3;
  if ((_DWORD)v3)
  {
    _dispatch_bug(1000LL, (int)v3);
    ipc_voucher_t v5 = 0;
  }

  else
  {
    ipc_voucher_t v5 = voucher;
  }

  *a1 = v5;
  return v4;
}

uint64_t mach_voucher_persona_for_originator(unsigned int a1, int a2, uint64_t a3, ipc_voucher_t *a4)
{
  *(void *)recipes = 0x100000003LL;
  int v10 = a2;
  __int128 v11 = xmmword_401A0;
  uint64_t v14 = a3;
  int v12 = 16;
  uint64_t v13 = a1;
  host_t mach_host_port = _dispatch_get_mach_host_port();
  ipc_voucher_t voucher = 0;
  uint64_t result = host_create_mach_voucher(mach_host_port, recipes, 0x30u, &voucher);
  if ((_DWORD)result == -301) {
    _dispatch_sema4_create_slow_cold_2();
  }
  ipc_voucher_t v7 = voucher;
  if ((_DWORD)result) {
    ipc_voucher_t v7 = 0;
  }
  *a4 = v7;
  return result;
}

uint64_t voucher_get_current_persona()
{
  kern_return_t v5;
  int v7;
  uint8_t out_content[4];
  mach_msg_type_number_t out_contentCnt;
  *(_DWORD *)out_content = -1;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v1 = *(void *)(StatusReg + 224);
  if (v1)
  {
    ipc_voucher_t v2 = *(_DWORD *)(v1 + 32);
    if (v2)
    {
      ipc_voucher_t v3 = *(_DWORD *)(v1 + 36);
      if (v3) {
        ipc_voucher_t v4 = v3;
      }
      else {
        ipc_voucher_t v4 = v2;
      }
      mach_msg_type_number_t out_contentCnt = 4;
      ipc_voucher_t v5 = mach_voucher_attr_command(v4, 3u, 3u, 0LL, 0, out_content, &out_contentCnt);
      if (v5 > 0x2E || ((1LL << v5) & 0x400000040011LL) == 0)
      {
        _dispatch_bug(1103LL, v5);
      }

      else if (!v5)
      {
        return *(unsigned int *)out_content;
      }
    }
  }

  if ((kpersona_get(out_content) & 0x80000000) != 0)
  {
    ipc_voucher_t v7 = **(_DWORD **)(StatusReg + 8);
    if (v7 != 3 && v7 != 0) {
      _dispatch_bug(1126LL, v7);
    }
  }

  return *(unsigned int *)out_content;
}

double voucher_get_current_persona_originator_info(_OWORD *a1)
{
  if (!_voucher_get_current_persona_token(out_content))
  {
    __int128 v3 = v5;
    *a1 = *(_OWORD *)out_content;
    a1[1] = v3;
    double result = v6[0];
    a1[2] = *(_OWORD *)v6;
  }

  return result;
}

uint64_t _voucher_get_current_persona_token(mach_voucher_attr_content_t out_content)
{
  uint64_t v1 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if (!v1) {
    return 5LL;
  }
  ipc_voucher_t v2 = *(_DWORD *)(v1 + 32);
  if (!v2) {
    return 5LL;
  }
  ipc_voucher_t v4 = *(_DWORD *)(v1 + 36);
  if (v4) {
    ipc_voucher_t v5 = v4;
  }
  else {
    ipc_voucher_t v5 = v2;
  }
  mach_msg_type_number_t out_contentCnt = 96;
  uint64_t result = mach_voucher_attr_command(v5, 3u, 2u, 0LL, 0, out_content, &out_contentCnt);
  if (result > 0x2E || ((1LL << result) & 0x400000040011LL) == 0)
  {
    uint64_t v8 = result;
    _dispatch_bug(1075LL, (int)result);
    return v8;
  }

  return result;
}

double voucher_get_current_persona_proximate_info(_OWORD *a1)
{
  if (!_voucher_get_current_persona_token(out_content))
  {
    __int128 v3 = v6;
    *a1 = v5;
    a1[1] = v3;
    double result = *(double *)&v7;
    a1[2] = v7;
  }

  return result;
}

BOOLean_t voucher_mach_msg_set(mach_msg_header_t *msg)
{
  if ((msg->msgh_bits & 0x1F0000) != 0) {
    return 0;
  }
  uint64_t v2 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if (v2)
  {
    mach_port_name_t mach_voucher = _voucher_get_mach_voucher(v2);
  }

  else
  {
    if (_voucher_task_mach_voucher_pred != -1) {
      dispatch_once_f(&_voucher_task_mach_voucher_pred, 0LL, (dispatch_function_t)_voucher_task_mach_voucher_init);
    }
    mach_port_name_t mach_voucher = _voucher_task_mach_voucher;
  }

  mach_msg_bits_t msgh_bits = msg->msgh_bits;
  if (!mach_voucher || (msg->msgh_bits & 0x1F0000) != 0) {
    return 0;
  }
  msg->mach_port_name_t msgh_voucher_port = mach_voucher;
  msg->mach_msg_bits_t msgh_bits = msgh_bits | 0x130000;
  return 1;
}

void voucher_mach_msg_clear(mach_msg_header_t *msg)
{
  mach_msg_bits_t msgh_bits = msg->msgh_bits;
  mach_msg_bits_t v3 = HIWORD(msg->msgh_bits) & 0x1F;
  mach_port_name_t msgh_voucher_port = msg->msgh_voucher_port;
  if ((v3 == 17 || v3 == 19) && msgh_voucher_port != 0)
  {
    if (v3 == 17)
    {
      _voucher_dealloc_mach_voucher(msgh_voucher_port);
      mach_msg_bits_t msgh_bits = msg->msgh_bits;
    }

    msg->mach_port_name_t msgh_voucher_port = 0;
    msg->mach_msg_bits_t msgh_bits = msgh_bits & 0xFFE0FFFF;
  }

voucher_mach_msg_state_t voucher_mach_msg_adopt(mach_msg_header_t *msg)
{
  mach_msg_bits_t msgh_bits = msg->msgh_bits;
  if ((msg->msgh_bits & 0x1F0000) == 0) {
    return (voucher_mach_msg_state_t)-1LL;
  }
  mach_port_name_t msgh_voucher_port = msg->msgh_voucher_port;
  msg->mach_port_name_t msgh_voucher_port = 0;
  msg->mach_msg_bits_t msgh_bits = msgh_bits & 0xDFE0FFFF;
  if (!msgh_voucher_port) {
    return (voucher_mach_msg_state_t)-1LL;
  }
  int v4 = msgh_bits & 0x201F0000;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  __int128 v6 = *(unsigned int **)(StatusReg + 984);
  if (v6)
  {
    unsigned int v9 = *v6;
    __int128 v7 = v6 + 2;
    unsigned int v8 = v9;
    unsigned int v10 = v9 - 8;
    if (v9 == 8) {
      __int128 v7 = 0LL;
    }
    if (v8 <= 7) {
      unsigned int v11 = 0;
    }
    else {
      unsigned int v11 = v10;
    }
    if (v8 <= 7) {
      uint64_t v12 = 0LL;
    }
    else {
      uint64_t v12 = (uint64_t)v7;
    }
  }

  else
  {
    unsigned int v11 = 0;
    uint64_t v12 = 0LL;
  }

  unint64_t v15 = _voucher_create_with_mach_voucher(msgh_voucher_port, v4, v12, v11);
  uint64_t v13 = *(unsigned int **)(StatusReg + 224);
  if (v13 == v15) {
    return (voucher_mach_msg_state_t)v15;
  }
  *(void *)(StatusReg + 224) = v15;
  if (!v15)
  {
    uint64_t v16 = 0LL;
    if (v13) {
      goto LABEL_18;
    }
LABEL_21:
    unsigned int v17 = 0;
    goto LABEL_22;
  }

  uint64_t v16 = v15[8];
  if (!v13) {
    goto LABEL_21;
  }
LABEL_18:
  unsigned int v17 = v13[8];
LABEL_22:
  if ((_DWORD)v16 != -1 && (_DWORD)v16 != v17) {
    _dispatch_set_priority_and_mach_voucher_slow(0LL, v16);
  }
  return (voucher_mach_msg_state_t)v13;
}

void voucher_mach_msg_revert(voucher_mach_msg_state_t state)
{
  if (state != (voucher_mach_msg_state_t)-1LL)
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v2 = *(_DWORD **)(StatusReg + 224);
    if (v2 == (_DWORD *)state)
    {
LABEL_11:
      if (v2) {
        os_release(v2);
      }
      return;
    }

    *(void *)(StatusReg + 224) = state;
    if (state)
    {
      uint64_t v3 = *((unsigned int *)state + 8);
      if (v2)
      {
LABEL_5:
        int v4 = v2[8];
LABEL_8:
        if ((_DWORD)v3 != -1 && (_DWORD)v3 != v4) {
          _dispatch_set_priority_and_mach_voucher_slow(0LL, v3);
        }
        goto LABEL_11;
      }
    }

    else
    {
      uint64_t v3 = 0LL;
      if (v2) {
        goto LABEL_5;
      }
    }

    int v4 = 0;
    goto LABEL_8;
  }

uint64_t voucher_activity_initialize_4libtrace(uint64_t *a1)
{
  if (*a1 <= 2) {
    voucher_activity_initialize_4libtrace_cold_1(*a1);
  }
  do
  {
    if (__ldxr((unint64_t *)&_voucher_libtrace_hooks))
    {
      __clrex();
      voucher_activity_initialize_4libtrace_cold_2();
    }
  }

  while (__stxr((unint64_t)a1, (unint64_t *)&_voucher_libtrace_hooks));
  uint64_t result = _dispatch_getenv_BOOL("LIBDISPATCH_NO_FAULTS", 0LL);
  if ((result & 1) == 0)
  {
    uint64_t result = getpid();
    if ((_DWORD)result != 1)
    {
      uint64_t result = os_variant_has_internal_diagnostics("com.apple.libdispatch");
      if ((_DWORD)result)
      {
        if ((MEMORY[0xFFFFFC104] & 0x80000000) == 0) {
          _dispatch_mode &= ~2u;
        }
      }
    }
  }

  return result;
}

uint64_t _voucher_init()
{
  return __libkernel_voucher_init(&_voucher_libkernel_functions);
}

unint64_t voucher_activity_id_allocate(unsigned __int8 a1)
{
  while (1)
  {
    uint64_t slow = __ldxr((unint64_t *)&_voucher_aid_next);
    if (!slow || ((slow + 1) & 0xF) == 0) {
      break;
    }
  }

  __clrex();
  uint64_t slow = _voucher_activity_id_allocate_slow();
  return slow & 0xFFFFFFFFFFFFFFLL | ((unint64_t)a1 << 56);
}

mach_vm_address_t voucher_activity_get_logging_preferences(mach_vm_size_t *a1)
{
  if (_firehose_task_buffer_pred != -1) {
    dispatch_once_f(&_firehose_task_buffer_pred, 0LL, (dispatch_function_t)_firehose_task_buffer_init);
  }
  if (_firehose_task_buffer && *(_DWORD *)(_firehose_task_buffer + 1552) != -1) {
    return firehose_buffer_get_logging_prefs(_firehose_task_buffer, a1);
  }
  *a1 = 0LL;
  return 0LL;
}

BOOL voucher_activity_should_send_strings()
{
  if (_firehose_task_buffer_pred != -1) {
    dispatch_once_f(&_firehose_task_buffer_pred, 0LL, (dispatch_function_t)_firehose_task_buffer_init);
  }
  return _firehose_task_buffer
      && *(_DWORD *)(_firehose_task_buffer + 1552) != -1
      && firehose_buffer_should_send_strings((int *)_firehose_task_buffer);
}

uint64_t voucher_activity_get_metadata_buffer(void *a1)
{
  if (_firehose_task_buffer_pred != -1) {
    dispatch_once_f(&_firehose_task_buffer_pred, 0LL, (dispatch_function_t)_firehose_task_buffer_init);
  }
  uint64_t v2 = _firehose_task_buffer;
  if (!_firehose_task_buffer || *(_DWORD *)(_firehose_task_buffer + 1552) == -1)
  {
    uint64_t result = 0LL;
    *a1 = 0LL;
  }

  else
  {
    *a1 = 2048LL;
    return v2 + 2048;
  }

  return result;
}

_DWORD *voucher_activity_create_with_data_2( unint64_t *a1, uint64_t a2, uint64_t a3, const void *a4, size_t a5, char a6)
{
  size_t v7 = a5 + 8;
  unint64_t v8 = (unsigned __int16)(a5 + 8);
  if (a5 >= 0xFFFFFFFFFFFFFFF8LL || v7 >> 16 || v8 >= 0x81) {
    voucher_activity_create_with_data_2_cold_1(v8);
  }
  unint64_t v9 = *a1;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v10 = *(void *)(StatusReg + 224);
  if (a2 == -3) {
    uint64_t v11 = *(void *)(StatusReg + 224);
  }
  else {
    uint64_t v11 = a2;
  }
  unint64_t v103 = v9;
  unint64_t v12 = v9 >> 16;
  uint64_t v13 = (v9 >> 16) & 0xFFFFFFEF;
  if (!v10)
  {
    unint64_t v112 = 0LL;
    goto LABEL_13;
  }

  unint64_t v112 = *(void *)(v10 + 48);
  if (!v112)
  {
LABEL_13:
    unint64_t v111 = 0LL;
    goto LABEL_14;
  }

  LOWORD(v13) = v13 | 1;
  LODWORD(v7) = a5 + 24;
  unint64_t v111 = *(void *)(v10 + 56);
  if (v111) {
    LOWORD(v13) = v12 | 0x11;
  }
  else {
    LODWORD(v7) = a5 + 16;
  }
LABEL_14:
  unint64_t v101 = a1;
  if (v11) {
    unint64_t v14 = *(void *)(v11 + 48);
  }
  else {
    unint64_t v14 = 0LL;
  }
  int v106 = a6 & 1;
  if (v14) {
    size_t v7 = (v7 + 8);
  }
  else {
    size_t v7 = v7;
  }
  size_t v108 = v7;
  if (v14) {
    unsigned __int16 v15 = v13 | 0x200;
  }
  else {
    unsigned __int16 v15 = v13;
  }
  unsigned __int16 v102 = v15;
  unint64_t v16 = a3 | HIBYTE(v14) | ~MEMORY[0xFFFFFC104] & 0x80;
  unsigned int v17 = _os_object_alloc_realized((objc_class *)&OBJC_CLASS___OS_voucher, 80LL);
  if (v11 && *(_DWORD *)(v11 + 32))
  {
    if (*(void *)(v11 + 40)) {
      uint64_t v18 = *(void *)(v11 + 40);
    }
    else {
      uint64_t v18 = v11;
    }
    os_retain((void *)v18);
    *((void *)v17 + 5) = v18;
    v17[8] = *(_DWORD *)(v18 + 32);
    *((_BYTE *)v17 + 72) = v17[18] & 0xFE | *(_BYTE *)(v18 + 72) & 1;
  }

  while (1)
  {
    unint64_t v19 = __ldxr((unint64_t *)&_voucher_aid_next);
    if (!v19 || ((v19 + 1) & 0xF) == 0) {
      break;
    }
    uint64_t slow = v19;
  }

  __clrex();
  uint64_t slow = _voucher_activity_id_allocate_slow();
LABEL_34:
  uint64_t v22 = _voucher_unique_pid;
  unint64_t v109 = slow & 0xFFFFFFFFFFFFFFLL | ((unint64_t)v16 << 56);
  *((void *)v17 + 6) = v109;
  *((void *)v17 + 7) = v22;
  *((void *)v17 + 8) = v14;
  unint64_t v110 = v14;
  uint64_t v100 = v17;
  if (_firehose_task_buffer_pred != -1) {
    dispatch_once_f(&_firehose_task_buffer_pred, 0LL, (dispatch_function_t)_firehose_task_buffer_init);
  }
  if (!_firehose_task_buffer || *(_DWORD *)(_firehose_task_buffer + 1552) == -1) {
    goto LABEL_167;
  }
  if ((v16 & 0x80) != 0 || (MEMORY[0xFFFFFC104] & 0x80) == 0) {
    uint64_t v23 = mach_continuous_time();
  }
  else {
    uint64_t v23 = mach_continuous_approximate_time();
  }
  uint64_t v118 = v23;
  uint64_t v24 = 0LL;
  LODWORD(v25) = (unsigned __int16)v108 + 24;
  int v116 = (unsigned __int16)(v108 + 24);
  if ((v108 & 7) != 0) {
    uint64_t v25 = (v108 & 0xFFF8) + 32;
  }
  else {
    uint64_t v25 = v25;
  }
  uint64_t v115 = v25;
  size_t v107 = v108 << 48;
  uint64_t v26 = 1LL;
  do
  {
    unint64_t v27 = v26;
    uint64_t v28 = voucher_activity_create_with_data_2_streams[v24];
    uint64_t v29 = _firehose_task_buffer;
    int v30 = (unint64_t *)(_firehose_task_buffer + (v28 << 7) + 640);
    unint64_t v31 = *v30;
    unint64_t v32 = HIDWORD(*v30);
    unint64_t v33 = *v30 >> 40;
    unint64_t v34 = HIWORD(*v30);
    if ((v26 & 1) != 0)
    {
      uint64_t v35 = 2LL;
      while (1)
      {
        unsigned __int8 v36 = v32;
        if ((v32 - 1) > 0xFDu)
        {
LABEL_65:
          if ((_DWORD)v31) {
            goto LABEL_76;
          }
LABEL_66:
          unint64_t v47 = ((unint64_t)v33 << 40) | (v34 << 48);
          unint64_t v48 = v47 | ((unint64_t)v32 << 32);
          unint64_t v49 = *(void *)(StatusReg + 24) & 0xFFFFFFFCLL | ((unint64_t)v36 << 32) | v47;
          while (1)
          {
            unint64_t v31 = __ldxr(v30);
            if (v31 != v48) {
              break;
            }
            if (!__stxr(v49, v30))
            {
              int v50 = 1;
              goto LABEL_73;
            }
          }

          int v50 = 0;
          __clrex();
LABEL_73:
          unint64_t v32 = HIDWORD(v31);
          unint64_t v33 = v31 >> 40;
          unint64_t v34 = HIWORD(v31);
          if (v50)
          {
            uint64_t v119 = v118;
            LODWORD(v12_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = (unsigned __int16)v108;
            WORD2(v12_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v28;
            BYTE6(v12_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = BYTE6(v120) & 0xF8 | (((1LL << v28) & 0x13) != 0) | (2 * *(_BYTE *)(v29 + 1569)) | 4;
            uint64_t v93 = v120;
            if (MEMORY[0xFFFFFC100]) {
              goto LABEL_166;
            }
            goto LABEL_150;
          }
        }

        else
        {
          unsigned __int16 v37 = (unint64_t *)(v29 + ((unint64_t)v32 << 12));
          uint64_t v38 = v118 - v37[1];
          while (1)
          {
            unint64_t v39 = __ldxr(v37);
            if (!v39 || (HIWORD(v39) & 0x1FF) != v28) {
              break;
            }
            BOOL v41 = v116 + (unsigned __int16)v39 > WORD1(v39) || HIWORD(v38) != 0;
            unsigned __int16 v42 = v39 + v115;
            unint64_t v43 = v39 + v115 + 0x100000000LL;
            unint64_t v44 = (v39 + v115) >> 16;
            uint64_t v45 = ((unsigned __int16)(v39 + v115) + 40 > (unsigned __int16)v44) | HIBYTE(v43);
            if (v41)
            {
              unint64_t v43 = v39;
              uint64_t v45 = HIBYTE(v39) | 1;
              unint64_t v44 = v39 >> 16;
              unsigned __int16 v42 = v39;
            }

            if (!__stxr(((_DWORD)v44 << 16) | v43 & 0xFFFFFF00000000LL | (v45 << 56) | v42, v37))
            {
              if (v41)
              {
                if ((v43 & 0xFF00000000LL) == 0)
                {
                  uint64_t v46 = v29;
                  firehose_buffer_ring_enqueue((int *)v29, v32);
                  uint64_t v29 = v46;
                }

                goto LABEL_64;
              }

              uint64_t v51 = (unsigned __int16)v39;
              if (!(_WORD)v39)
              {
LABEL_64:
                unsigned __int8 v36 = 0;
                goto LABEL_65;
              }

              unint64_t v91 = *(void *)(StatusReg - 8);
              unint64_t v92 = (unint64_t *)((char *)v37 + v51);
              *(unint64_t *)((char *)v37 + v51 + 16) = (v118 - v37[1]) | v107;
              goto LABEL_148;
            }
          }

          unsigned __int8 v36 = 0;
          __clrex();
          if (!(_DWORD)v31) {
            goto LABEL_66;
          }
LABEL_76:
          uint64_t v52 = v31 | 1;
          unint64_t v53 = ((unint64_t)v33 << 40) | (v34 << 48);
          unint64_t v54 = v52 | ((unint64_t)v36 << 32) | v53;
          unsigned __int8 v55 = v32;
          unint64_t v56 = v53 | v31 | ((unint64_t)v32 << 32);
          if (v54 == v56) {
            goto LABEL_82;
          }
          while (1)
          {
            unint64_t v31 = __ldxr(v30);
            if (v31 != v56) {
              break;
            }
            if (!__stxr(v54, v30))
            {
              int v57 = 1;
              goto LABEL_81;
            }
          }

          int v57 = 0;
          __clrex();
LABEL_81:
          unint64_t v32 = HIDWORD(v31);
          unint64_t v33 = v31 >> 40;
          unint64_t v34 = HIWORD(v31);
          if (v57)
          {
LABEL_82:
            uint64_t v58 = v29;
            if (MEMORY[0xFFFFFC100])
            {
              int v104 = v52;
              kdebug_trace( 772145160LL,  v28 | ((unint64_t)v55 << 8),  v35,  (v34 << 48) | ((unint64_t)v33 << 40) | ((unint64_t)v32 << 32) | v31,  v54);
              LODWORD(v52) = v104;
            }

            _dispatch_firehose_gate_wait((uint64_t)v30, v52, 0x10000);
            unint64_t v31 = *v30;
            unint64_t v32 = HIDWORD(*v30);
            unint64_t v33 = *v30 >> 40;
            unint64_t v34 = HIWORD(*v30);
            uint64_t v35 = 3LL;
            uint64_t v29 = v58;
          }
        }
      }
    }

    uint64_t v59 = 0LL;
LABEL_86:
    uint64_t v60 = v59 ^ 1;
    while (1)
    {
      while (1)
      {
        unsigned __int8 v61 = v32;
        if ((v32 - 1) <= 0xFDu)
        {
          uint64_t v62 = (unint64_t *)(v29 + ((unint64_t)v32 << 12));
          uint64_t v63 = v118 - v62[1];
          do
          {
            unint64_t v64 = __ldxr(v62);
            if (!v64 || (HIWORD(v64) & 0x1FF) != v28)
            {
              unsigned __int8 v61 = 0;
              __clrex();
              goto LABEL_111;
            }

            BOOL v66 = v116 + (unsigned __int16)v64 > WORD1(v64) || HIWORD(v63) != 0;
            unint64_t v67 = (v64 + v115) >> 16;
            unint64_t v68 = ((unsigned __int16)(v64 + v115) + 40 > (unsigned __int16)v67) | ((v64
                                                                                                + v115
                                                                                                + 0x100000000LL) >> 56);
            if (v66)
            {
              unint64_t v67 = v64 >> 16;
              unsigned __int16 v69 = v64;
            }

            else
            {
              unsigned __int16 v69 = v64 + v115;
            }

            if (v66) {
              uint64_t v70 = v64;
            }
            else {
              uint64_t v70 = v64 + v115 + 0x100000000LL;
            }
            if (v66) {
              uint64_t v71 = HIBYTE(v64) | 1;
            }
            else {
              uint64_t v71 = v68;
            }
          }

          while (__stxr(v70 & 0xFFFFFF00000000LL | (v71 << 56) | ((_DWORD)v67 << 16) | v69, v62));
          if (v66)
          {
            if ((v70 & 0xFF00000000LL) == 0)
            {
              unint64_t v72 = v34;
              char v105 = v33;
              LODWORD(v33) = v31;
              unint64_t v31 = v27;
              uint64_t v73 = v59;
              uint64_t v74 = v60;
              uint64_t v75 = v28;
              uint64_t v76 = v29;
              firehose_buffer_ring_enqueue((int *)v29, v32);
              uint64_t v29 = v76;
              uint64_t v28 = v75;
              uint64_t v59 = v73;
              unint64_t v27 = v31;
              LODWORD(v3_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = v33;
              LOBYTE(v33) = v105;
              unint64_t v34 = v72;
              uint64_t v60 = v74;
            }

            goto LABEL_110;
          }

          uint64_t v78 = (unsigned __int16)v64;
          if (!(_WORD)v64)
          {
LABEL_110:
            unsigned __int8 v61 = 0;
            goto LABEL_111;
          }

          unint64_t v91 = *(void *)(StatusReg - 8);
          unint64_t v92 = (unint64_t *)((char *)v62 + v78);
          *(unint64_t *)((char *)v62 + v78 + 16) = (v118 - v62[1]) | v107;
LABEL_148:
          v92[1] = v91;
          goto LABEL_151;
        }

LABEL_111:
        if (!v106)
        {
          if (!(_DWORD)v31) {
            goto LABEL_119;
          }
          int v77 = 1;
          goto LABEL_135;
        }

        if (v60 & 1 | ((v33 & 0x40) == 0) && (v33 & 0x80) == 0) {
          break;
        }
        unsigned int v80 = v33 & 0x3F;
        if (v80 >= 0x3E) {
          unsigned int v80 = 62;
        }
        unint64_t v81 = ((unint64_t)v32 << 32) | ((unint64_t)v33 << 40) | (v34 << 48) | v31;
        unint64_t v82 = (((v80 + 1) | v33 & 0xC0) << 40) | ((unint64_t)v61 << 32) | (v34 << 48) | v31;
        while (1)
        {
          unint64_t v31 = __ldxr(v30);
          if (v31 != v81) {
            break;
          }
          if (!__stxr(v82, v30))
          {
            char v83 = 1;
            goto LABEL_131;
          }
        }

        char v83 = 0;
        __clrex();
LABEL_131:
        if ((v83 & 1) != 0)
        {
          if (MEMORY[0xFFFFFC100]) {
            kdebug_trace(772145156LL, v28 | ((unint64_t)v32 << 8), v59 & 1, v81, v82);
          }
          goto LABEL_162;
        }

LABEL_132:
        unint64_t v34 = HIWORD(v31);
        unint64_t v33 = v31 >> 40;
        unint64_t v32 = HIDWORD(v31);
      }

      if (!(_DWORD)v31) {
        break;
      }
      int v77 = 2;
LABEL_135:
      uint64_t v84 = v31 | v77;
      unint64_t v85 = ((unint64_t)v33 << 40) | (v34 << 48);
      unint64_t v86 = v84 | ((unint64_t)v61 << 32) | v85;
      unsigned __int8 v87 = v32;
      unint64_t v88 = v85 | v31 | ((unint64_t)v32 << 32);
      if (v86 != v88)
      {
        while (1)
        {
          unint64_t v31 = __ldxr(v30);
          if (v31 != v88) {
            break;
          }
          if (!__stxr(v86, v30))
          {
            int v89 = 1;
            goto LABEL_140;
          }
        }

        int v89 = 0;
        __clrex();
LABEL_140:
        unint64_t v32 = HIDWORD(v31);
        unint64_t v33 = v31 >> 40;
        unint64_t v34 = HIWORD(v31);
        if (!v89) {
          continue;
        }
      }

      uint64_t v90 = v29;
      if (MEMORY[0xFFFFFC100]) {
        kdebug_trace( 772145160LL,  v28 | ((unint64_t)v87 << 8),  ((2 * v106) | v59 & 1) ^ 2,  (v34 << 48) | ((unint64_t)v33 << 40) | ((unint64_t)v32 << 32) | v31,  v86);
      }
      _dispatch_firehose_gate_wait((uint64_t)v30, v84, 0x10000);
      unint64_t v31 = *v30;
      unint64_t v32 = HIDWORD(*v30);
      unint64_t v33 = *v30 >> 40;
      unint64_t v34 = HIWORD(*v30);
      uint64_t v59 = 1LL;
      uint64_t v29 = v90;
      goto LABEL_86;
    }

LABEL_119:
    unint64_t v79 = ((unint64_t)v33 << 40) | (v34 << 48);
    unint64_t v48 = v79 | ((unint64_t)v32 << 32);
    unint64_t v49 = *(void *)(StatusReg + 24) & 0xFFFFFFFCLL | ((unint64_t)v61 << 32) | v79;
    do
    {
      unint64_t v31 = __ldxr(v30);
      if (v31 != v48)
      {
        __clrex();
        goto LABEL_132;
      }
    }

    while (__stxr(v49, v30));
    uint64_t v119 = v118;
    LODWORD(v12_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = (unsigned __int16)v108;
    WORD2(v12_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v28;
    BYTE6(v12_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = (BYTE6(v120) & 0xF8 | (((1LL << v28) & 0x13) != 0) | (2 * *(_BYTE *)(v29 + 1569)) | (4 * v106)) ^ 4;
    uint64_t v93 = v120;
    if (MEMORY[0xFFFFFC100])
    {
LABEL_166:
      uint64_t v98 = v29;
      kdebug_trace(772145164LL, v118, v93, v48, v49);
      uint64_t v29 = v98;
    }

LABEL_150:
    unint64_t v92 = (unint64_t *)firehose_buffer_tracepoint_reserve_slow(v29, (uint64_t)&v119, 0LL);
    if (v92)
    {
LABEL_151:
      if (v112)
      {
        v92[3] = v112;
        uint64_t v94 = v92 + 4;
      }

      else
      {
        uint64_t v94 = v92 + 3;
      }

      if (v111) {
        *v94++ = v111;
      }
      if (v110) {
        *v94++ = v110;
      }
      *uint64_t v94 = v109;
      memcpy(v94 + 1, a4, a5);
      uint64_t v95 = (int *)_firehose_task_buffer;
      uint64_t v96 = (unint64_t *)((unint64_t)v92 & 0xFFFFFFFFFFFFF000LL);
      atomic_store(v103 & 0xFFFFFFFF0000FFFFLL | ((unint64_t)v102 << 16), v92);
      do
        unint64_t v97 = __ldxr(v96);
      while (__stxr(v97 - 0x100000000LL, v96));
      if ((v97 & 0x10000FF00000000LL) == 0x100000100000000LL) {
        firehose_buffer_ring_enqueue(v95, (((_DWORD)v96 - (_DWORD)v95) >> 12));
      }
    }

LABEL_162:
    uint64_t v26 = 0LL;
    uint64_t v24 = 1LL;
  }

  while ((v27 & 1) != 0);
LABEL_167:
  uint64_t result = v100;
  unint64_t *v101 = v103 & 0xFFFFFFFF0000FFFFLL | ((unint64_t)v102 << 16);
  return result;
}

_DWORD *voucher_activity_create_with_data( unint64_t *a1, uint64_t a2, uint64_t a3, const void *a4, size_t a5)
{
  return voucher_activity_create_with_data_2(a1, a2, a3, a4, a5, 0);
}

_DWORD *voucher_activity_create_with_location(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4;
  return voucher_activity_create_with_data_2(a1, a2, a3, &v5, 8uLL, 0);
}

uint64_t voucher_get_activity_id_and_creator(void *a1, void *a2, void *a3)
{
  if (a1 == (void *)-3LL)
  {
    a1 = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
    if (a1) {
      goto LABEL_3;
    }
  }

  else if (a1)
  {
LABEL_3:
    if (a2) {
      *a2 = a1[7];
    }
    if (a3) {
      *a3 = a1[8];
    }
    return a1[6];
  }

  if (a2) {
    *a2 = 0LL;
  }
  uint64_t result = 0LL;
  if (a3) {
    *a3 = 0LL;
  }
  return result;
}

uint64_t voucher_get_activity_id(uint64_t a1, void *a2)
{
  if (a1 == -3)
  {
    a1 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
    if (a1) {
      goto LABEL_3;
    }
  }

  else if (a1)
  {
LABEL_3:
    if (a2) {
      *a2 = *(void *)(a1 + 64);
    }
    return *(void *)(a1 + 48);
  }

  uint64_t result = 0LL;
  if (a2) {
    *a2 = 0LL;
  }
  return result;
}

void voucher_activity_flush(unsigned int a1)
{
  if (_firehose_task_buffer_pred != -1) {
    dispatch_once_f(&_firehose_task_buffer_pred, 0LL, (dispatch_function_t)_firehose_task_buffer_init);
  }
  uint64_t v2 = (int *)_firehose_task_buffer;
  if (_firehose_task_buffer && *(_DWORD *)(_firehose_task_buffer + 1552) != -1)
  {
    uint64_t v3 = a1;
    unint64_t v4 = _firehose_task_buffer + ((unint64_t)a1 << 7);
    uint64_t v5 = *(void *)(v4 + 640);
    if ((~v5 & 0xFF00000000LL) == 0 || BYTE4(*(void *)(v4 + 640)) == 0)
    {
      firehose_buffer_force_connect((int *)_firehose_task_buffer);
    }

    else
    {
      size_t v7 = (unint64_t *)(v4 + 640);
      unint64_t v8 = (unint64_t *)(_firehose_task_buffer + ((unint64_t)BYTE4(v5) << 12));
      unint64_t v9 = v8[1];
      do
      {
        unint64_t v10 = __ldxr(v8);
        if (!v10 || (HIWORD(v10) & 0x1FF) != v3)
        {
          __clrex();
          goto LABEL_28;
        }

        BOOL v12 = (unsigned __int16)v10 + 25 > WORD1(v10) || v9 < 0xFFFF000000000000LL;
        unint64_t v13 = v10 + 0x100000020LL;
        unint64_t v14 = (v10 + 0x100000020LL) >> 16;
        unint64_t v15 = ((unsigned __int16)(v10 + 32) + 40 > (unsigned __int16)v14) | ((v10 + 0x100000020LL) >> 56);
        if (v12)
        {
          unint64_t v13 = v10;
          unint64_t v15 = HIBYTE(v10) | 1;
          unint64_t v14 = v10 >> 16;
        }
      }

      while (__stxr( ((_DWORD)v14 << 16) | v13 & 0xFFFFFF00000000LL | (v15 << 56) | (unsigned __int16)v13,  v8));
      if (v12)
      {
        if ((v13 & 0xFF00000000LL) == 0) {
          firehose_buffer_ring_enqueue(v2, BYTE4(v5));
        }
      }

      else if ((_WORD)v10)
      {
        voucher_activity_flush_cold_1((unsigned __int16)v10);
      }

unint64_t voucher_activity_trace_v_2( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, char a7)
{
  unint64_t v11 = a5;
  unint64_t v12 = a4;
  uint64_t v15 = a1;
  if (_firehose_task_buffer_pred != -1)
  {
    dispatch_once_f(&_firehose_task_buffer_pred, 0LL, (dispatch_function_t)_firehose_task_buffer_init);
    uint64_t v15 = a1;
  }

  uint64_t v16 = _firehose_task_buffer;
  if (!_firehose_task_buffer || *(_DWORD *)(_firehose_task_buffer + 1552) == -1) {
    return 0LL;
  }
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v18 = *(void *)(StatusReg + 224);
  if (v18)
  {
    unint64_t v19 = *(void *)(v18 + 48);
    uint64_t v20 = *(void *)(v18 + 56);
  }

  else
  {
    uint64_t v20 = 0LL;
    unint64_t v19 = 0LL;
  }

  unint64_t v21 = v11 + 8;
  if (!v19) {
    unint64_t v21 = v11;
  }
  int v22 = (v19 != 0) | (a2 >> 16) & 0xFFFFFFEF;
  unint64_t v23 = v21 + 8;
  if (v20) {
    LOWORD(v22) = (v19 != 0) | WORD1(a2);
  }
  else {
    unint64_t v23 = v21;
  }
  if ((a2 & 0x100000) != 0) {
    uint64_t v24 = v20;
  }
  else {
    uint64_t v24 = 0LL;
  }
  unint64_t v25 = (a2 & 0x100000) == 0 || v20 == 0;
  if ((a2 & 0x100000) != 0) {
    unsigned __int16 v26 = v22;
  }
  else {
    unsigned __int16 v26 = (v19 != 0) | WORD1(a2);
  }
  if ((a2 & 0x100000) != 0) {
    unint64_t v27 = v23;
  }
  else {
    unint64_t v27 = v21;
  }
  unsigned __int16 v28 = v26 | 0x100;
  if (a6)
  {
    unint64_t v29 = v27 + 4;
  }

  else
  {
    unsigned __int16 v28 = v26;
    unint64_t v29 = v27;
  }

  if (a6 + v29 + 24 < 0xFF1)
  {
    unsigned __int16 v98 = v28;
    char v30 = 0;
    uint64_t v8 = v15;
    uint64_t v31 = a7 & 1;
    unint64_t v32 = (unint64_t *)(v16 + ((unint64_t)v15 << 7) + 640);
    unint64_t v33 = *v32;
    LODWORD(v34) = (unsigned __int16)v29 + 24;
    int v104 = (unsigned __int16)(v29 + 24 + a6);
    if ((v29 & 7) != 0) {
      uint64_t v34 = (v29 & 0xFFF8) + 32;
    }
    else {
      uint64_t v34 = v34;
    }
    uint64_t v103 = v34;
    uint64_t v102 = ((_DWORD)a6 << 16);
    int v95 = 2 * v31;
LABEL_33:
    unint64_t v101 = HIWORD(v33);
    unint64_t v35 = v33 >> 40;
    unint64_t v36 = HIDWORD(v33);
    char v96 = v30;
    char v97 = v30 ^ 1;
    LODWORD(v37) = v33;
    while (1)
    {
      unsigned __int8 v38 = v36;
      if ((v36 - 1) <= 0xFDu)
      {
        int v99 = v37;
        unint64_t v39 = (unint64_t *)(v16 + ((unint64_t)v36 << 12));
        unint64_t v40 = a3 - v39[1];
        do
        {
          unint64_t v41 = __ldxr(v39);
          if (!v41 || (HIWORD(v41) & 0x1FF) != v8)
          {
            unsigned __int8 v38 = 0;
            __clrex();
            goto LABEL_57;
          }

          BOOL v43 = v104 + (unsigned __int16)v41 > WORD1(v41) || HIWORD(v40) != 0;
          uint64_t v44 = v41 + v103;
          unint64_t v45 = ((unsigned __int16)(v41 + v103) + 40 > (v41 + v103 - v102) >> 16) | ((v41 + v103 - v102 + 0x100000000LL) >> 56);
          if (v43) {
            uint64_t v46 = v41;
          }
          else {
            uint64_t v46 = v44 - v102 + 0x100000000LL;
          }
          if (v43)
          {
            unint64_t v45 = HIBYTE(v41) | 1;
            unint64_t v47 = v41 >> 16;
          }

          else
          {
            unint64_t v47 = (unint64_t)(v44 - v102) >> 16;
          }

          if (v43) {
            LOWORD(v44) = v41;
          }
        }

        while (__stxr( ((_DWORD)v47 << 16) | v46 & 0xFFFFFF00000000LL | (v45 << 56) | (unsigned __int16)v44,  v39));
        if (v43)
        {
          if ((v46 & 0xFF00000000LL) == 0)
          {
            uint64_t v89 = v24;
            unint64_t v90 = a2;
            uint64_t v88 = a3;
            unint64_t v91 = StatusReg;
            unint64_t v93 = v19;
            char v87 = v35;
            unint64_t v35 = v25;
            uint64_t v48 = v15;
            unint64_t v49 = v29;
            uint64_t v50 = v31;
            firehose_buffer_ring_enqueue((int *)v16, v36);
            uint64_t v31 = v50;
            unint64_t v29 = v49;
            unint64_t StatusReg = v91;
            unint64_t v19 = v93;
            uint64_t v15 = v48;
            unint64_t v25 = v35;
            LOBYTE(v35) = v87;
            a3 = v88;
            uint64_t v24 = v89;
            a2 = v90;
          }

LABEL_79:
        unint64_t v101 = HIWORD(v54);
        unint64_t v35 = v54 >> 40;
        unint64_t v36 = HIDWORD(v54);
        LODWORD(v37) = v54;
        uint64_t v31 = v52;
      }

      else
      {
        if (!(_DWORD)v37)
        {
LABEL_66:
          uint64_t v52 = v31;
          unint64_t v53 = ((unint64_t)v35 << 40) | (v101 << 48);
          a4 = v53 | ((unint64_t)v36 << 32);
          a5 = *(void *)(StatusReg + 24) & 0xFFFFFFFCLL | ((unint64_t)v38 << 32) | v53;
          do
          {
            unint64_t v54 = __ldxr(v32);
            if (v54 != a4)
            {
              __clrex();
              goto LABEL_79;
            }
          }

          while (__stxr(a5, v32));
          a7 = v25;
          unint64_t v7 = v19;
          uint64_t v106 = a3;
          LOWORD(v107) = v29;
          WORD1(v107) = a6;
          WORD2(v107) = v15;
          BYTE6(v107) = ((2 * *(_BYTE *)(v16 + 1569)) | (4 * v52) | (((1LL << v8) & 0x13) != 0)) ^ 4;
          unint64_t v25 = v107;
          if (MEMORY[0xFFFFFC100]) {
            goto LABEL_120;
          }
          goto LABEL_110;
        }

        int v51 = 2;
LABEL_82:
        uint64_t v61 = v37 | v51;
        unint64_t v62 = ((unint64_t)v35 << 40) | (v101 << 48);
        unsigned int v100 = v61;
        unint64_t v63 = v61 | ((unint64_t)v38 << 32) | v62;
        unsigned __int8 v64 = v36;
        unint64_t v65 = v62 | v37 | ((unint64_t)v36 << 32);
        if (v63 == v65) {
          goto LABEL_88;
        }
        while (1)
        {
          unint64_t v37 = __ldxr(v32);
          if (v37 != v65) {
            break;
          }
          if (!__stxr(v63, v32))
          {
            int v66 = 1;
            goto LABEL_87;
          }
        }

        int v66 = 0;
        __clrex();
LABEL_87:
        unint64_t v36 = HIDWORD(v37);
        unint64_t v35 = v37 >> 40;
        unint64_t v101 = HIWORD(v37);
        if (v66)
        {
LABEL_88:
          unsigned int v83 = v31;
          unsigned int v84 = v25;
          unint64_t v85 = v29;
          unint64_t v92 = StatusReg;
          unint64_t v94 = v19;
          unsigned int v86 = v15;
          if (MEMORY[0xFFFFFC100]) {
            kdebug_trace( 772145160LL,  v8 | ((unint64_t)v64 << 8),  (v95 | v96 & 1) ^ 2u,  (v101 << 48) | ((unint64_t)v35 << 40) | ((unint64_t)v36 << 32) | v37,  v63);
          }
          _dispatch_firehose_gate_wait((uint64_t)v32, v100, 0x10000);
          unint64_t v33 = *v32;
          char v30 = 1;
          unint64_t StatusReg = v92;
          unint64_t v19 = v94;
          uint64_t v31 = v83;
          unint64_t v25 = v84;
          uint64_t v15 = v86;
          unint64_t v29 = v85;
          goto LABEL_33;
        }
      }
    }

    if (!(_DWORD)v37) {
      goto LABEL_66;
    }
    int v51 = 1;
    goto LABEL_82;
  }

  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Log is too large";
  qword_61258 = a6 + v29 + 24;
  __break(1u);
LABEL_120:
  kdebug_trace(772145164LL, a3, v25, a4, a5);
LABEL_110:
  uint64_t v80 = firehose_buffer_tracepoint_reserve_slow(v16, (uint64_t)&v106, &v105);
  if (!v80) {
    return 0LL;
  }
  unint64_t v68 = (unint64_t *)v80;
  unint64_t v19 = v7;
  LOBYTE(v25) = a7;
  if (v7) {
    goto LABEL_92;
  }
LABEL_114:
  unsigned __int16 v69 = v68 + 3;
  if ((v25 & 1) == 0) {
LABEL_93:
  }
    *v69++ = v24;
LABEL_94:
  if (a6)
  {
    *(_DWORD *)unsigned __int16 v69 = (unsigned __int16)((_WORD)v105 - ((unsigned __int16)v68 & 0xF000)) | ((unsigned __int16)a6 << 16);
    unsigned __int16 v69 = (void *)((char *)v69 + 4);
  }

  while (v11)
  {
    size_t v70 = *(void *)(v12 + 8);
    memcpy(v69, *(const void **)v12, v70);
    unint64_t v71 = *(void *)(v12 + 8);
    BOOL v72 = v11 >= v71;
    v11 -= v71;
    if (!v72)
    {
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid arguments";
      __break(1u);
LABEL_116:
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid arguments";
      __break(1u);
      goto LABEL_117;
    }

    unsigned __int16 v69 = (void *)((char *)v69 + v70);
    v12 += 16LL;
  }

  if (a6)
  {
    uint64_t v73 = v105;
    do
    {
      size_t v74 = *(void *)(v12 + 8);
      memcpy(v73, *(const void **)v12, v74);
      v73 += v74;
      char v105 = v73;
      unint64_t v75 = *(void *)(v12 + 8);
      BOOL v72 = a6 >= v75;
      a6 -= v75;
      if (!v72) {
        goto LABEL_116;
      }
      v12 += 16LL;
    }

    while (a6);
  }

  uint64_t v76 = (int *)_firehose_task_buffer;
  unint64_t v77 = a2 & 0xFFFFFFFF0000FFFFLL | ((unint64_t)v98 << 16);
  uint64_t v78 = (unint64_t *)((unint64_t)v68 & 0xFFFFFFFFFFFFF000LL);
  atomic_store(v77, v68);
  do
    unint64_t v79 = __ldxr(v78);
  while (__stxr(v79 - 0x100000000LL, v78));
  if ((v79 & 0x10000FF00000000LL) == 0x100000100000000LL) {
    firehose_buffer_ring_enqueue(v76, (((_DWORD)v78 - (_DWORD)v76) >> 12));
  }
  return v77;
}

unint64_t voucher_activity_trace_v( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  return voucher_activity_trace_v_2(a1, a2, a3, a4, a5, a6, 0);
}

unint64_t voucher_activity_trace( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  v6[0] = a4;
  v6[1] = a5;
  return voucher_activity_trace_v(a1, a2, a3, (unint64_t)v6, a5, 0LL);
}

size_t _voucher_debug(uint64_t a1, char *__str, size_t __size)
{
  int v6 = snprintf( __str,  __size,  "voucher[%p] = { xref = %d, ref = %d",  (const void *)a1,  *(_DWORD *)(a1 + 12),  *(_DWORD *)(a1 + 8));
  size_t v7 = v6;
  if (v6 >= 0) {
    size_t v8 = v7;
  }
  else {
    size_t v8 = 0LL;
  }
  if (*(void *)(a1 + 40))
  {
    if (__size >= v8) {
      size_t v9 = __size - v8;
    }
    else {
      size_t v9 = 0LL;
    }
    int v10 = snprintf(&__str[v8], v9, ", base voucher %p", *(const void **)(a1 + 40));
    size_t v11 = v10;
    if (v10 < 0) {
      size_t v11 = 0LL;
    }
    v8 += v11;
  }

  int v12 = *(_DWORD *)(a1 + 32);
  if (v12)
  {
    if (__size >= v8) {
      size_t v22 = __size - v8;
    }
    else {
      size_t v22 = 0LL;
    }
    if (v12 == *(_DWORD *)(a1 + 36)) {
      unint64_t v23 = " & ipc kvoucher";
    }
    else {
      unint64_t v23 = (const char *)&unk_416DE;
    }
    int v24 = snprintf(&__str[v8], v22, ", kvoucher%s 0x%x [\n", v23, v12);
    size_t v25 = v24;
    if (v24 < 0) {
      size_t v25 = 0LL;
    }
    size_t v26 = voucher_kvoucher_debug( mach_task_self_,  *(_DWORD *)(a1 + 32),  (uint64_t)__str,  __size,  v25 + v8,  "        ",  0x400uLL);
    size_t v27 = v26;
    if (__size >= v26) {
      size_t v28 = __size - v26;
    }
    else {
      size_t v28 = 0LL;
    }
    int v29 = snprintf(&__str[v26], v28, "]");
    size_t v30 = v29;
    if (v29 < 0) {
      size_t v30 = 0LL;
    }
    size_t v8 = v30 + v27;
  }

  int v13 = *(_DWORD *)(a1 + 36);
  if (v13 && v13 != *(_DWORD *)(a1 + 32))
  {
    if (__size >= v8) {
      size_t v31 = __size - v8;
    }
    else {
      size_t v31 = 0LL;
    }
    int v32 = snprintf(&__str[v8], v31, ", ipc kvoucher 0x%x [\n", *(_DWORD *)(a1 + 36));
    size_t v33 = v32;
    if (v32 < 0) {
      size_t v33 = 0LL;
    }
    size_t v34 = voucher_kvoucher_debug( mach_task_self_,  *(_DWORD *)(a1 + 36),  (uint64_t)__str,  __size,  v33 + v8,  "        ",  0x400uLL);
    size_t v35 = v34;
    if (__size >= v34) {
      size_t v36 = __size - v34;
    }
    else {
      size_t v36 = 0LL;
    }
    int v37 = snprintf(&__str[v34], v36, "]");
    size_t v38 = v37;
    if (v37 < 0) {
      size_t v38 = 0LL;
    }
    size_t v8 = v38 + v35;
  }

  uint64_t v14 = *(void *)(a1 + 48);
  if (v14)
  {
    if (__size >= v8) {
      size_t v15 = __size - v8;
    }
    else {
      size_t v15 = 0LL;
    }
    int v16 = snprintf( &__str[v8],  v15,  ", activity 0x%llx (pid: 0x%16llx, parent 0x%llx)",  v14,  *(void *)(a1 + 56),  *(void *)(a1 + 64));
    size_t v17 = v16;
    if (v16 < 0) {
      size_t v17 = 0LL;
    }
    v8 += v17;
  }

  if (__size >= v8) {
    size_t v18 = __size - v8;
  }
  else {
    size_t v18 = 0LL;
  }
  int v19 = snprintf(&__str[v8], v18, " }");
  size_t v20 = v19;
  if (v19 < 0) {
    size_t v20 = 0LL;
  }
  return v20 + v8;
}

uint64_t voucher_mach_msg_fill_aux(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 224);
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = 0LL;
  if (a2 >= 0x28)
  {
    uint64_t v4 = *(void *)(v2 + 48);
    if (v4)
    {
      *(_OWORD *)a1 = xmmword_401B0;
      __int128 v5 = *(_OWORD *)(v2 + 56);
      *(void *)(a1 + 16) = v4;
      *(_OWORD *)(a1 + 24) = v5;
      return 40LL;
    }
  }

  return v3;
}

uint64_t _voucher_activity_id_allocate_slow()
{
  uint64_t result = mach_generate_activity_id(mach_task_self_, 1, &activity_id);
  if ((_DWORD)result)
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Could not generate an activity ID";
    qword_61258 = (int)result;
    __break(1u);
  }

  else
  {
    uint64_t v1 = 16 * (activity_id & 0xFFFFFFFFFFFFFLL);
    if (!v1) {
      uint64_t v1 = 1LL;
    }
    uint64_t activity_id = v1;
    do
    {
      unint64_t v2 = __ldxr((unint64_t *)&_voucher_aid_next);
      uint64_t v3 = activity_id;
      if (v2) {
        uint64_t v4 = activity_id;
      }
      else {
        uint64_t v4 = activity_id + 1;
      }
    }

    while (__stxr(v4, (unint64_t *)&_voucher_aid_next));
    if (v2) {
      return v2;
    }
    else {
      return v3;
    }
  }

  return result;
}

uint64_t _firehose_task_buffer_init()
{
  uint64_t v8 = 0LL;
  __int128 v6 = 0u;
  __int128 v7 = 0u;
  __int128 v5 = 0u;
  pid_t v0 = getpid();
  uint64_t result = proc_pidinfo(v0, 17, 1uLL, &v5, 56);
  if ((_DWORD)result != 56)
  {
    if (!(_DWORD)result)
    {
      uint64_t v4 = **(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unable to get the unique pid (error)";
      qword_61258 = v4;
      __break(1u);
    }

    qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unable to get the unique pid (size)";
    qword_61258 = (int)result;
    __break(1u);
  }

  _voucher_unique_pid = v6;
  if (_voucher_libtrace_hooks)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(_voucher_libtrace_hooks + 8))(result, v2);
    if ((_DWORD)result)
    {
      uint64_t result = firehose_buffer_create(result, _voucher_unique_pid, _dispatch_memory_warn);
      _firehose_task_buffer = result;
      if (*(uint64_t *)_voucher_libtrace_hooks >= 4)
      {
        uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(_voucher_libtrace_hooks + 32);
        if (v3) {
          return v3(result + 2048, 2048LL);
        }
      }
    }
  }

  return result;
}

  ;
}

  ;
}

uint64_t OUTLINED_FUNCTION_2_2()
{
  return v0 + v1;
}

uint64_t OUTLINED_FUNCTION_3_3()
{
  return v0 + v1;
}

uint64_t OUTLINED_FUNCTION_4_2()
{
  return v0 + v1;
}

uint64_t OUTLINED_FUNCTION_6()
{
  return v0 + v1;
}

uint64_t OUTLINED_FUNCTION_7()
{
  return v0 + v1;
}

uint64_t OUTLINED_FUNCTION_8()
{
  return v0 + v1;
}

uint64_t OUTLINED_FUNCTION_9()
{
  return v0 + v1;
}

mach_vm_address_t firehose_buffer_create(mach_port_name_t a1, uint64_t a2, uint64_t a3)
{
  kern_return_t v6;
  mach_vm_address_t v7;
  kern_return_t v8;
  uint64_t i;
  kern_return_t v11;
  mach_vm_address_t address;
  mach_port_options_t options;
  mach_port_name_t name;
  address = vm_page_size;
  if (0x4000 % vm_page_size) {
    firehose_buffer_create_cold_4();
  }
  __int128 v6 = mach_vm_map(mach_task_self_, &address, 0x40000uLL, 0LL, 1308622851, 0, 0LL, 0, 3, 7, 2u);
  if (v6)
  {
    if (v6 != 3) {
      _dispatch_bug(346LL, v6);
    }
    size_t v11 = mach_port_deallocate(mach_task_self_, a1);
    if (v11 == -301) {
      _dispatch_sema4_create_slow_cold_2();
    }
    if (v11) {
      _dispatch_bug(91LL, v11);
    }
    return 0LL;
  }

  else
  {
    __int128 v7 = address;
    *(_DWORD *)(address + 1548) = a1;
    *(_DWORD *)(v7 + 1544) = getpid();
    *(void *)(v7 + 1536) = a2;
    name = 0;
    *(void *)&options.flags = 0x500000033LL;
    options.reserved[0] = 0LL;
    options.reserved[1] = 0LL;
    uint64_t v8 = mach_port_construct(mach_task_self_, &options, v7, &name);
    if (v8)
    {
      if (v8 == -301) {
        _dispatch_sema4_create_slow_cold_2();
      }
      firehose_buffer_create_cold_2(v8);
    }

    *(_DWORD *)(v7 + 156_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = name;
    *(_DWORD *)(v7 + 264) = 20180226;
    *(void *)(v7 + 512) = a3;
    for (uint64_t i = 644LL; i != 1540; i += 128LL)
    {
      if (i != 1028) {
        *(_BYTE *)(v7 + i) = -1;
      }
    }

    firehose_buffer_update_limits_unlocked(v7);
    *(void *)(v7 + 52_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = 31LL;
    *(_WORD *)__int128 v7 = 1;
    *(_WORD *)(v7 + 2) = 2;
    *(_WORD *)(v7 + 4) = 3;
    *(_WORD *)(v7 + 6) = 4;
    *(void *)(v7 + 464) = 4LL;
    *(_WORD *)(v7 + 32_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = 4;
    *(_WORD *)(v7 + 256) = 0;
    *(_WORD *)(v7 + 258) = 4;
    *(_WORD *)(v7 + 26_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = 0;
    *(_WORD *)(v7 + 262) = 0;
  }

  return v7;
}

uint64_t firehose_buffer_update_limits_unlocked(uint64_t result)
{
  int v1 = 0;
  int v2 = 0;
  uint64_t v3 = 0LL;
  uint64_t v4 = *(void *)(result + 512);
  __int128 v5 = (unsigned __int8 *)(result + 644);
  do
  {
    int v7 = *v5;
    v5 += 128;
    int v6 = v7;
    if (((1LL << v3) & 0x13) != 0) {
      int v8 = v2;
    }
    else {
      int v8 = v2 + 1;
    }
    if (((1LL << v3) & 0x13) != 0) {
      int v9 = v1 + 1;
    }
    else {
      int v9 = v1;
    }
    if (v6 != 255)
    {
      int v2 = v8;
      int v1 = v9;
    }

    ++v3;
  }

  while (v3 != 7);
  int v10 = (unint64_t *)(result + 448);
  unsigned __int16 v11 = (2 * (v1 + v2)) | 1;
  if ((v4 & 2) != 0) {
    unsigned __int16 v11 = 3 * v1 + 6 * v2 + 1;
  }
  unsigned __int16 v12 = v1 + v2 + 3;
  __int16 v13 = v1 + 4 * v2;
  if ((v4 & 2) != 0) {
    unsigned __int16 v14 = v13 + 1;
  }
  else {
    unsigned __int16 v14 = v12;
  }
  if ((v4 & 1) == 0) {
    unsigned __int16 v14 = v11;
  }
  if ((vm_page_size & 0xFFFE000) != 0)
  {
    unsigned int v15 = v14 % (unsigned __int16)(vm_page_size >> 12);
    if (v15) {
      __int16 v16 = (vm_page_size >> 12) - v15;
    }
    else {
      __int16 v16 = 0;
    }
    v14 += v16;
  }

  if ((v4 & 1) != 0) {
    unsigned int v17 = 4;
  }
  else {
    unsigned int v17 = 8;
  }
  if (v17 <= v14) {
    unsigned int v17 = v14;
  }
  unsigned __int16 v18 = v17 - 1;
  unsigned int v19 = 2 * (unsigned __int16)v1;
  if ((3 * v17) >> 3 > v19) {
    unsigned int v19 = (3 * v17) >> 3;
  }
  unsigned __int8 v20 = v17 + 1;
  uint64_t v21 = *(void *)(result + 528);
  *(_WORD *)(result + 528) = v18;
  *(_WORD *)(result + 53_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v19;
  *(_BYTE *)(result + 532) = v20;
  *(_BYTE *)(result + 533) = 0;
  *(_WORD *)(result + 534) = 0;
  uint64_t v22 = ((v19 << 16) | ((unint64_t)v20 << 32) | v18) - v21;
  if (v22)
  {
    do
      unint64_t v23 = __ldxr(v10);
    while (__stxr(v23 + v22, v10));
  }

  return result;
}

mach_vm_address_t firehose_buffer_get_logging_prefs(uint64_t a1, mach_vm_size_t *a2)
{
  kern_return_t v5;
  kern_return_t v6;
  mach_vm_address_t result;
  mach_vm_address_t address;
  mach_vm_size_t size;
  mach_port_name_t v10;
  mach_port_t v3 = *(_DWORD *)(a1 + 1548);
  int v10 = 0;
  address = 0LL;
  size = 0LL;
  if (v3 + 1 <= 1)
  {
LABEL_16:
    uint64_t result = 0LL;
    *a2 = 0LL;
    return result;
  }

  int logging_prefs = firehose_send_get_logging_prefs(v3, &v10, &size);
  if (logging_prefs)
  {
    if (logging_prefs != 268435459)
    {
      if (logging_prefs == -301) {
        _dispatch_sema4_create_slow_cold_2();
      }
      _dispatch_bug(601LL, logging_prefs);
    }

    goto LABEL_16;
  }

  __int128 v5 = mach_vm_map(mach_task_self_, &address, size, 0LL, 1, v10, 0LL, 0, 1, 1, 2u);
  if (v5 == -301) {
    _dispatch_sema4_create_slow_cold_2();
  }
  if (v5)
  {
    _dispatch_bug(612LL, v5);
    address = 0LL;
    size = 0LL;
  }

  int v6 = mach_port_deallocate(mach_task_self_, v10);
  if (v6 == -301) {
    _dispatch_sema4_create_slow_cold_2();
  }
  if (v6) {
    _dispatch_bug(618LL, v6);
  }
  uint64_t result = address;
  *a2 = size;
  return result;
}

BOOL firehose_buffer_should_send_strings(int *guard)
{
  mach_port_t v1 = guard[388];
  int v7 = 0;
  if (v1 == -1) {
    return 0LL;
  }
  if (!v1)
  {
LABEL_10:
    mach_port_t v5 = firehose_client_reconnect(guard, v1, 0);
    if (v5 - 1 <= 0xFFFFFFFD)
    {
      int should_send_strings = firehose_send_should_send_strings(v5, &v7);
      if (!should_send_strings) {
        return v7 != 0;
      }
      if (should_send_strings != 268435459)
      {
        if (should_send_strings == -301) {
          _dispatch_sema4_create_slow_cold_2();
        }
        _dispatch_bug(654LL, should_send_strings);
      }
    }

    return 0LL;
  }

  int v3 = firehose_send_should_send_strings(v1, &v7);
  if (v3)
  {
    if (v3 != 268435459)
    {
      if (v3 == -301) {
        _dispatch_sema4_create_slow_cold_2();
      }
      _dispatch_bug(642LL, v3);
    }

    goto LABEL_10;
  }

  return v7 != 0;
}

uint64_t firehose_client_reconnect(int *guard, int a2, unsigned int a3)
{
  kern_return_t v17;
  kern_return_t memory_entry_64;
  uint64_t (*v19)(int **, memory_object_size_t *);
  int v20;
  memory_object_size_t v21;
  BOOL v22;
  BOOL v23;
  uint64_t v24;
  char v25;
  char v26;
  kern_return_t v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  kern_return_t v34;
  kern_return_t v35;
  uint64_t v36;
  char v37;
  char v38;
  mach_port_name_t v39;
  kern_return_t v40;
  kern_return_t v41;
  kern_return_t v42;
  int *v43;
  memory_object_size_t size;
  mach_port_t object_handle[2];
  mach_port_options_t options;
  mach_port_name_t name;
  int v48;
  int v49;
  *(void *)object_handle = 0LL;
  int v6 = (unsigned int *)(guard + 391);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned int v8 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v6))
  {
    if (!__stxr(v8, v6)) {
      goto LABEL_6;
    }
  }

  __clrex();
  _dispatch_unfair_lock_lock_slow((uint64_t)(guard + 391), 0x10000);
LABEL_6:
  uint64_t v10 = guard[a3 + 388];
  if ((_DWORD)v10 == a2 && (_DWORD)v10 != -1)
  {
    if (a2)
    {
      uint64_t v12 = 0LL;
      char v13 = 1;
      do
      {
        char v14 = v13;
        unsigned int v15 = &guard[v12];
        mach_port_name_t v16 = v15[388];
        unsigned int v17 = mach_port_deallocate(mach_task_self_, v16);
        if (v17 == -301) {
          _dispatch_sema4_create_slow_cold_2();
        }
        if (v17) {
          _dispatch_bug(91LL, v17);
        }
        char v13 = 0;
        v15[388] = 0;
        uint64_t v12 = 1LL;
      }

      while ((v14 & 1) != 0);
    }

    BOOL v43 = guard;
    size = 0x40000LL;
    memory_entry_64 = mach_make_memory_entry_64( mach_task_self_,  &size,  (memory_object_offset_t)guard,  4194305,  &object_handle[1],  0);
    if (!(size >> 18)) {
      firehose_client_reconnect_cold_1(size);
    }
    if (memory_entry_64) {
      firehose_client_reconnect_cold_9(memory_entry_64);
    }
    if (a2
      && (unsigned int v19 = *(uint64_t (**)(int **, memory_object_size_t *))(_voucher_libtrace_hooks + 24)) != 0LL
      && ((unsigned __int8 v20 = v19(&v43, &size), v21 = size, !v20) ? (v22 = v43 == 0LL) : (v22 = 1),
          !v22 ? (unint64_t v23 = size == 0) : (unint64_t v23 = 1),
          !v23))
    {
      size_t v34 = mach_make_memory_entry_64(mach_task_self_, &size, (memory_object_offset_t)v43, 4194305, object_handle, 0);
      if (v34) {
        firehose_client_reconnect_cold_9(v34);
      }
      size_t v35 = mach_vm_deallocate(mach_task_self_, (mach_vm_address_t)v43, size);
      if (v35) {
        _dispatch_bug(209LL, v35);
      }
    }

    else
    {
      uint64_t v21 = 0LL;
    }

    int v24 = 0LL;
    size_t v25 = 1;
    do
    {
      size_t v26 = v25;
      name = 0;
      *(void *)&options.flags = 0x100000017LL;
      options.reserved[0] = 0LL;
      options.reserved[1] = 0LL;
      size_t v27 = mach_port_construct(mach_task_self_, &options, (mach_port_context_t)guard, &name);
      if (v27)
      {
        if (v27 == -301) {
          _dispatch_sema4_create_slow_cold_2();
        }
        firehose_buffer_create_cold_2(v27);
      }

      size_t v25 = 0;
      *(&v48 + v24) = name;
      int v24 = 1LL;
    }

    while ((v26 & 1) != 0);
    uint64_t v10 = *(&v48 + a3);
    size_t v28 = v48;
    int v29 = v49;
    size_t v30 = firehose_send_register(guard[387], object_handle[1], 0x40000LL, v48, v49, guard[390], object_handle[0], v21);
    if (v30)
    {
      if (v30 != 268435459) {
        firehose_client_reconnect_cold_3(v30);
      }
      size_t v36 = 0LL;
      int v37 = 1;
      do
      {
        size_t v38 = v37;
        unint64_t v39 = *(&v48 + v36);
        unint64_t v40 = mach_port_deallocate(mach_task_self_, v39);
        if (v40 == -301) {
          _dispatch_sema4_create_slow_cold_2();
        }
        if (v40) {
          _dispatch_bug(91LL, v40);
        }
        int v37 = 0;
        guard[v36 + 388] = -1;
        size_t v36 = 1LL;
      }

      while ((v38 & 1) != 0);
      unint64_t v41 = mach_port_deallocate(mach_task_self_, object_handle[1]);
      if (v41 == -301) {
        _dispatch_sema4_create_slow_cold_2();
      }
      if (v41) {
        _dispatch_bug(91LL, v41);
      }
      if (object_handle[0])
      {
        unsigned __int16 v42 = mach_port_deallocate(mach_task_self_, object_handle[0]);
        if (v42 == -301) {
          _dispatch_sema4_create_slow_cold_2();
        }
        if (v42) {
          _dispatch_bug(91LL, v42);
        }
      }

      uint64_t v10 = 0xFFFFFFFFLL;
    }

    else
    {
      guard[388] = v28;
      guard[389] = v29;
    }
  }

  size_t v31 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    int v32 = __ldxr(v6);
  while (__stlxr(0, v6));
  if (v32 != v31) {
    _dispatch_unfair_lock_unlock_slow((uint64_t)v6, v32);
  }
  return v10;
}

void firehose_client_push_reply(uint64_t a1, int a2)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: firehose_push_reply should never be sent to the buffer receive port";
  qword_61258 = a2;
  __break(1u);
}

uint64_t firehose_client_push_notify_async(uint64_t a1, unint64_t a2, unint64_t a3, int a4)
{
  unint64_t v4 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 184;
  do
    unint64_t v4 = *(void *)v4;
  while (v4 && *(char **)(v4 + 8) != "firehose");
  firehose_client_merge_updates(*(void *)(v4 + 16), 1, a2, a3, a4 != 0, 0LL);
  return 0LL;
}

uint64_t firehose_client_merge_updates( uint64_t result, int a2, unint64_t a3, unint64_t a4, int a5, unint64_t *a6)
{
  if (a5 && !*(_BYTE *)(result + 1568))
  {
    int v6 = (unsigned __int8 *)(result + 1568);
    while (!__ldxr(v6))
    {
      if (!__stxr(1u, v6)) {
        goto LABEL_8;
      }
    }

    __clrex();
  }

uint64_t firehose_buffer_update_limits(uint64_t a1)
{
  int v2 = (unsigned int *)(a1 + 536);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned int v4 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v2))
  {
    if (!__stxr(v4, v2)) {
      goto LABEL_6;
    }
  }

  __clrex();
  _dispatch_unfair_lock_lock_slow(a1 + 536, 0x10000);
LABEL_6:
  uint64_t result = firehose_buffer_update_limits_unlocked(a1);
  unsigned int v7 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    unsigned int v8 = __ldxr(v2);
  while (__stlxr(0, v2));
  if (v8 != v7) {
    return _dispatch_unfair_lock_unlock_slow((uint64_t)v2, v8);
  }
  return result;
}

void firehose_buffer_ring_enqueue(int *guard, unsigned int a2)
{
  unint64_t v3 = HIBYTE(guard[1024 * (unint64_t)a2 + 1]) & 2;
  unsigned int v4 = guard + 32;
  mach_port_t v5 = (unsigned __int16 *)(guard + 96);
  else {
    uint64_t v6 = 80LL;
  }
  if ((guard[1024 * (unint64_t)a2 + 1] & 0x2000000) == 0)
  {
    mach_port_t v5 = (unsigned __int16 *)(guard + 80);
    unsigned int v4 = guard;
  }

  uint64_t v7 = LOWORD(guard[v6]);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_7:
  uint64_t v9 = v7;
  int v10 = v7 & 0xFFFFFFC0;
  *(void *)(StatusReg + 976) = v5;
  unsigned __int16 v11 = (unsigned __int16 *)v4 + (v7 & 0x3F);
  unsigned __int16 v12 = v7 & 0xFFC0 | a2;
  do
  {
    int v13 = __ldxr(v11);
    if (v13 != (unsigned __int16)v10)
    {
      __clrex();
      *(void *)(StatusReg + 976) = 0LL;
      uint64_t v7 = LOWORD(guard[v6]);
      if ((_DWORD)v7 == (unsigned __int16)v9)
      {
        int v14 = -1024;
        while (*v11 != (unsigned __int16)v10)
        {
          if (v14 < 0)
          {
            __yield();
          }

          else
          {
            unsigned int v28 = a2;
            unint64_t v23 = v4;
            int v24 = v5;
            size_t v26 = v11;
            unint64_t v27 = StatusReg;
            int v22 = v10;
            uint64_t v21 = v9;
            int v25 = v14;
            _pthread_yield_to_enqueuer_4dispatch(122LL, v5, (v14 + 1));
            int v14 = v25;
            uint64_t v9 = v21;
            unsigned __int16 v11 = v26;
            unint64_t StatusReg = v27;
            int v10 = v22;
            unsigned int v4 = v23;
            mach_port_t v5 = v24;
            a2 = v28;
          }

          uint64_t v7 = LOWORD(guard[v6]);
          ++v14;
        }

        uint64_t v7 = v9;
      }

      goto LABEL_7;
    }
  }

  while (__stxr(v12, v11));
  do
  {
    uint64_t v7 = __ldxr(v5);
    if ((_DWORD)v7 != (unsigned __int16)v9)
    {
      __clrex();
      unsigned __int16 *v11 = v10;
      *(void *)(StatusReg + 976) = 0LL;
      goto LABEL_7;
    }
  }

  while (__stlxr(v9 + 1, v5));
  *(void *)(StatusReg + 976) = 0LL;
  mach_port_context_t v15 = (mach_port_context_t)guard + 2 * v3;
  int v16 = *(_DWORD *)(v15 + 1552);
  if (v16 == -1) {
    return;
  }
  if (v16)
  {
    int v17 = firehose_send_push_async(*(_DWORD *)(v15 + 1552), 0, 0);
    if (v17 <= 268435458)
    {
      if (!v17) {
        return;
      }
      if (v17 == -301)
      {
        qword_61228 = (uint64_t)"MIG_REPLY_MISMATCH";
        qword_61258 = -301LL;
        __break(1u);
LABEL_42:
        qword_61228 = (uint64_t)"MIG_REPLY_MISMATCH";
        qword_61258 = -301LL;
        __break(1u);
        return;
      }

      goto LABEL_31;
    }

    if (v17 != 268435459)
    {
      if (v17 == 268435460) {
        return;
      }
LABEL_31:
      _dispatch_bug(476LL, v17);
    }
  }

  mach_port_t v18 = firehose_client_reconnect(guard, v16, v3 >> 1);
  if (v18 - 1 <= 0xFFFFFFFD)
  {
    int v19 = firehose_send_push_async(v18, 0, 0);
    if ((v19 - 268435459) >= 2 && v19 != 0)
    {
      if (v19 != -301)
      {
        _dispatch_bug(488LL, v19);
        return;
      }

      goto LABEL_42;
    }
  }

int *firehose_buffer_force_connect(int *result)
{
  if (!result[388]) {
    return (int *)firehose_client_reconnect(result, 0, 0);
  }
  return result;
}

uint64_t firehose_buffer_tracepoint_reserve_slow(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(_BYTE *)(a2 + 14) & 1;
  uint64_t v7 = (unint64_t *)(a1 + 448);
  firehose_drain_notifications_once(a1);
  unint64_t v8 = *(void *)(a1 + 448);
  unint64_t v82 = v8;
  do
  {
    if (!*(_WORD *)((unint64_t)&v82 | (2 * v6)))
    {
      unsigned int v30 = 0;
      char v50 = 0;
      if ((*(_BYTE *)(v4 + 14) & 4) == 0) {
        return firehose_buffer_stream_chunk_install(a1, (unint64_t *)v4, a3, v30);
      }
      goto LABEL_65;
    }

    unint64_t v81 = v8;
    --*(_WORD *)((unint64_t)&v81 | (2 * v6));
    unint64_t v9 = v81;
    while (1)
    {
      unint64_t v10 = __ldaxr(v7);
      if (v10 != v8) {
        break;
      }
      if (!__stxr(v9, v7))
      {
        int v11 = 1;
        goto LABEL_8;
      }
    }

    int v11 = 0;
    __clrex();
LABEL_8:
    unint64_t v82 = v10;
    unint64_t v8 = v10;
  }

  while (!v11);
  int v80 = v6;
  unint64_t v12 = v81;
  int v13 = (unint64_t *)(a1 + 256);
  uint64_t v14 = a1 + 128;
  mach_port_context_t v15 = (unint64_t *)(a1 + 456);
  int v16 = (unsigned int *)(a1 + 536);
  unint64_t v17 = HIDWORD(v81);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    unint64_t v19 = __ldxr(v13);
    unint64_t v20 = HIDWORD(v19);
    if ((unsigned __int16)v19 != WORD1(v19))
    {
      unsigned __int16 v21 = v19 + 1;
      unint64_t v22 = HIDWORD(v19);
      goto LABEL_12;
    }

    if (HIWORD(v19) == WORD2(v19)) {
      break;
    }
    LOWORD(v22) = WORD2(v19) + 1;
    unsigned __int16 v21 = v19;
LABEL_12:
    if (!__stxr(v19 & 0xFFFF0000FFFF0000LL | ((unint64_t)(unsigned __int16)v22 << 32) | v21, v13))
    {
      uint64_t v23 = v4;
      int v24 = a3;
      if ((unsigned __int16)v22 == WORD2(v19))
      {
        uint64_t v25 = a1;
      }

      else
      {
        v19 >>= 32;
        uint64_t v25 = v14;
      }

      unint64_t v26 = v19 & 0x3F;
      __int16 v27 = *(_WORD *)(v25 + 2 * v26);
      unsigned int v28 = v27 & 0x3F;
      if ((v27 & 0x3F) == 0)
      {
        int v35 = -1024;
        do
        {
          if (v35 < 0)
          {
            __yield();
          }

          else
          {
            BOOL v72 = v16;
            unint64_t v74 = StatusReg;
            uint64_t v70 = v14;
            unint64_t v71 = v12;
            unint64_t v77 = v17;
            int v69 = v35;
            thread_switch(0, 4, v35 + 1);
            int v35 = v69;
            unint64_t StatusReg = v74;
            unint64_t v17 = v77;
            uint64_t v14 = v70;
            unint64_t v12 = v71;
            int v16 = v72;
          }

          __int16 v27 = *(_WORD *)(v25 + 2 * v26);
          ++v35;
          unsigned int v28 = v27 & 0x3F;
        }

        while ((v27 & 0x3F) == 0);
      }

      int v29 = (unsigned __int16)v22;
      unsigned int v30 = v28;
      unint64_t v31 = a1 + ((unint64_t)v28 << 12);
      if (v29 == (unsigned __int16)v20 && *(_BYTE *)(v31 + 6) == 3)
      {
        do
          unint64_t v32 = __ldxr(v15);
        while (__stxr(v32 & ~(1LL << v30), v15));
      }

      *(void *)unint64_t v31 = 0x100000000000000LL;
      *(_WORD *)(v25 + 2 * v26) = (v27 & 0xFFC0) + 64;
      a3 = v24;
      uint64_t v4 = v23;
      unsigned int v33 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
      while (!__ldaxr(v16))
      {
        if (!__stxr(v33, v16)) {
          goto LABEL_34;
        }
      }

      __clrex();
      size_t v36 = v16;
      unint64_t v37 = v12;
      uint64_t v38 = v14;
      unint64_t v75 = StatusReg;
      unint64_t v78 = v17;
      _dispatch_unfair_lock_lock_slow((uint64_t)v16, 0x10000);
      unint64_t StatusReg = v75;
      unint64_t v17 = v78;
      uint64_t v14 = v38;
      unint64_t v12 = v37;
      int v16 = v36;
LABEL_34:
      if (*(unsigned __int8 *)(a1 + 532) <= v30)
      {
        unint64_t v39 = *(void *)(a1 + 520) & ~(1LL << v30);
        *(void *)(a1 + 52_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v39;
        uint64_t v40 = v30 & 0x3C;
        if (((v39 >> (v30 & 0x3C)) & 0xF) == 0)
        {
          uint64_t v73 = v16;
          unint64_t v41 = StatusReg;
          unint64_t v42 = v12;
          uint64_t v43 = v14;
          unint64_t v44 = v17;
          madvise((void *)(a1 + (v40 << 12)), 0x4000uLL, 5);
          unint64_t StatusReg = v41;
          unint64_t v17 = v44;
          uint64_t v14 = v43;
          unint64_t v12 = v42;
          int v16 = v73;
        }

        unsigned int v30 = 0;
      }

      unsigned int v45 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
      do
        unsigned int v46 = __ldxr(v16);
      while (__stlxr(0, v16));
      if (v46 != v45)
      {
        unint64_t v47 = v16;
        unint64_t v48 = v12;
        uint64_t v49 = v14;
        unint64_t v76 = StatusReg;
        unint64_t v79 = v17;
        _dispatch_unfair_lock_unlock_slow((uint64_t)v16, v46);
        unint64_t StatusReg = v76;
        unint64_t v17 = v79;
        uint64_t v14 = v49;
        unint64_t v12 = v48;
        int v16 = v47;
      }

      if (v30) {
        return firehose_buffer_stream_chunk_install(a1, (unint64_t *)v4, a3, v30);
      }
    }
  }

  uint64_t v52 = v16;
  __clrex();
  char v53 = BYTE4(v12);
  unint64_t v54 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned int v55 = *(_DWORD *)(v54 + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v16))
  {
    if (!__stxr(v55, v16)) {
      goto LABEL_51;
    }
  }

  __clrex();
  _dispatch_unfair_lock_lock_slow((uint64_t)v16, 0x10000);
LABEL_51:
  uint64_t v57 = *(void *)(a1 + 520);
  uint64_t v58 = v57 | (-1LL << v53);
  if (v58 == -1)
  {
    unsigned int v30 = 0;
  }

  else
  {
    unsigned int v30 = __clz(__rbit64(~v58));
    *(void *)(a1 + 52_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v57 | (1 << v30);
  }

  unsigned int v59 = *(_DWORD *)(v54 + 24) & 0xFFFFFFFC;
  do
    unsigned int v60 = __ldxr(v52);
  while (__stlxr(0, v52));
  if (v60 != v59) {
    _dispatch_unfair_lock_unlock_slow((uint64_t)v52, v60);
  }
  if (v30) {
    return firehose_buffer_stream_chunk_install(a1, (unint64_t *)v4, a3, v30);
  }
  if ((*(_BYTE *)(v4 + 14) & 4) == 0)
  {
    uint64_t v61 = 0x10000LL;
    if (!v80) {
      uint64_t v61 = 1LL;
    }
    do
    {
      unsigned int v30 = 0;
      unint64_t v62 = __ldxr(v7);
    }

    while (__stxr(v62 + v61, v7));
    return firehose_buffer_stream_chunk_install(a1, (unint64_t *)v4, a3, v30);
  }

  char v50 = 1;
LABEL_65:
  uint64_t v63 = *(unsigned __int8 *)(v4 + 12);
  uint64_t v64 = a1 + (v63 << 7);
  unint64_t v65 = (unint64_t *)(v64 + 640);
  if ((*(void *)(v64 + 640) & 0x400000000000LL) != 0)
  {
    do
    {
      unint64_t v66 = __ldxr(v65);
      unint64_t v67 = v66 >> 40;
      unsigned __int8 v68 = BYTE5(v66) | 0xC0;
    }

    while (__stxr(v66 & 0xFFFF00FFFFFFFFFDLL | ((unint64_t)(BYTE5(v66) | 0xC0u) << 40), v65));
  }

  else
  {
    *(void *)(v64 + 648) = mach_continuous_time();
    do
    {
      unint64_t v66 = __ldxr(v65);
      unint64_t v67 = v66 >> 40;
      unsigned __int8 v68 = BYTE5(v66) | 0xC0;
    }

    while (__stlxr(v66 & 0xFFFF00FFFFFFFFFDLL | ((unint64_t)(BYTE5(v66) | 0xC0u) << 40), v65));
  }

  if (MEMORY[0xFFFFFC100])
  {
    kdebug_trace( 772145168LL,  v63,  *(void *)(a1 + (v63 << 7) + 648),  v66 & 0xFFFF00FFFFFFFFFFLL | ((unint64_t)v67 << 40),  v66 & 0xFFFF00FFFFFFFFFDLL | ((unint64_t)v68 << 40));
    if ((v66 & 2) != 0) {
      goto LABEL_74;
    }
  }

  else
  {
    if ((v66 & 2) == 0) {
      goto LABEL_72;
    }
LABEL_74:
    _dispatch_gate_broadcast_slow((uint64_t)v65, v66);
  }

BOOL firehose_drain_notifications_once(uint64_t a1)
{
  mach_msg_return_t v2;
  mach_msg_return_t v3;
  unint64_t StatusReg;
  char msgh_bits;
  int v6;
  void v9[3];
  mach_msg_header_t msg;
  void v11[4];
  int v12;
  int v2 = mach_msg(&msg, 67109126, 0, 0x7Cu, *(_DWORD *)(a1 + 1560), 0, 0);
  unint64_t v3 = v2;
  if (v2)
  {
    if (v2 != 268451843) {
      firehose_drain_notifications_once_cold_2(v2);
    }
  }

  else
  {
    v9[1] = "firehose";
    void v9[2] = a1;
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v9[0] = *(void *)(StatusReg + 184);
    *(void *)(StatusReg + 184) = v9;
    mach_msg_bits_t msgh_bits = msg.msgh_bits;
    memset(v11, 0, 24);
    if (SLODWORD(v11[0]) >= 0) {
      uint64_t v6 = v12;
    }
    else {
      uint64_t v6 = 0;
    }
    if (!v6 && (msgh_bits & 0x1F) == 0x12) {
      firehose_drain_notifications_once_cold_1((uint64_t)v11);
    }
    if (v6 != -305 && v6 != 0)
    {
LABEL_14:
      msg.mach_port_t msgh_remote_port = 0;
      mach_msg_destroy(&msg);
    }

    *(void *)(StatusReg + 184) = v9[0];
  }

  return v3 == 0;
}

unint64_t firehose_buffer_stream_chunk_install( uint64_t a1, unint64_t *a2, void *a3, unsigned int a4)
{
  uint64_t v6 = *((unsigned __int8 *)a2 + 12);
  uint64_t v7 = (unint64_t *)(a1 + (v6 << 7) + 640);
  if (a4)
  {
    uint64_t v9 = a4;
    unint64_t v10 = a1 + ((unint64_t)a4 << 12);
    if (*(void *)v10) {
      bzero((void *)(v10 + 16), 0xFF0uLL);
    }
    if (*((_BYTE *)a2 + 12) == 3)
    {
      int v11 = (unint64_t *)(a1 + 456);
      do
        unint64_t v12 = __ldxr(v11);
      while (__stxr(v12 | (1LL << v9), v11));
    }

    uint64_t v13 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) - 8);
    uint64_t v14 = v9 << 32;
    if ((*v7 & 0x3F0000000000LL) == 0)
    {
      if (*a2 >= 0x1000000000LL) {
        uint64_t v15 = *a2 - 0x1000000000LL;
      }
      else {
        uint64_t v15 = 0LL;
      }
      *(void *)(v10 + 8) = v15;
      unint64_t v16 = v10 + 16;
      uint64_t v17 = *((unsigned __int16 *)a2 + 4);
      __int16 v18 = v17 + 24;
      if ((v17 & 7) != 0) {
        __int16 v18 = (v17 & 0xFFF8) + 32;
      }
      __int16 v19 = v18 + 16;
      unsigned __int16 v20 = 4096 - *((_WORD *)a2 + 5);
      *(void *)(v10 + 32) = (*a2 - v15) | (v17 << 48);
      *(void *)(v10 + 24) = v13;
      char v45 = *((_BYTE *)a2 + 12);
      char v43 = 2 * (*((_BYTE *)a2 + 14) & 3);
      *(_WORD *)unint64_t v10 = v19;
      *(_WORD *)(v10 + 2) = v20;
      *(_BYTE *)(v10 + 4) = 1;
      *(_BYTE *)(v10 + 5) = 0;
      *(_BYTE *)(v10 + 6) = v45;
      *(_BYTE *)(v10 + 7) = v43;
      if (a3) {
        *a3 = v10 + v20;
      }
      while (1)
      {
        unint64_t v21 = __ldxr(v7);
        if ((v21 & 0x3F0000000000LL) != 0) {
          break;
        }
        unint64_t v22 = HIWORD(v21);
        unint64_t v23 = HIWORD(v21) + 1;
        if (!__stlxr(v14 | (v23 << 48), v7))
        {
          uint64_t v24 = 0LL;
          unint64_t v25 = v21 >> 40;
          goto LABEL_18;
        }
      }

      __clrex();
    }

    atomic_load(v7);
    uint64_t v27 = a1 + (v6 << 7);
    unint64_t v28 = *(void *)(v27 + 648);
    *(void *)(v27 + 648) = 0LL;
    uint64_t v29 = mach_continuous_time();
    unint64_t v30 = *a2;
    if (*a2 >= v28) {
      unint64_t v30 = v28;
    }
    BOOL v31 = v30 >= 0x1000000000LL;
    unint64_t v32 = v30 - 0x1000000000LL;
    if (!v31) {
      unint64_t v32 = 0LL;
    }
    *(void *)(v10 + 8) = v32;
    unint64_t v33 = *a2;
    if ((*a2 - v32) >> 48)
    {
      unint64_t v32 = v33 - 0x1000000000LL;
      *(void *)(v10 + 8) = v33 - 0x1000000000LL;
    }

    unint64_t v34 = v28 - v32;
    if ((v28 - v32) >> 48) {
      unint64_t v34 = *a2 - v32;
    }
    *(void *)(v10 + 32) = v34 | 0x18000000000000LL;
    *(void *)(v10 + 24) = v13;
    unint64_t v16 = v10 + 64;
    uint64_t v35 = *((unsigned __int16 *)a2 + 4);
    __int16 v36 = v35 + 24;
    if ((v35 & 7) != 0) {
      __int16 v36 = (v35 & 0xFFF8) + 32;
    }
    __int16 v37 = v36 + 64;
    unsigned __int16 v38 = 4096 - *((_WORD *)a2 + 5);
    *(void *)(v10 + 8_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = (*a2 - v32) | (v35 << 48);
    *(void *)(v10 + 72) = v13;
    char v46 = *((_BYTE *)a2 + 12);
    char v44 = 2 * (*((_BYTE *)a2 + 14) & 3);
    *(_WORD *)unint64_t v10 = v37;
    *(_WORD *)(v10 + 2) = v38;
    *(_BYTE *)(v10 + 4) = 1;
    *(_BYTE *)(v10 + 5) = 0;
    *(_BYTE *)(v10 + 6) = v46;
    *(_BYTE *)(v10 + 7) = v44;
    if (a3) {
      *a3 = v10 + v38;
    }
    do
    {
      unint64_t v21 = __ldxr(v7);
      unint64_t v22 = HIWORD(v21);
      unint64_t v23 = HIWORD(v21) + 1;
    }

    while (__stlxr(v14 | (v23 << 48), v7));
    uint64_t v24 = 0LL;
    unint64_t v25 = v21 >> 40;
    *(void *)(v10 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v28;
    *(void *)(v10 + 48) = v29;
    *(_DWORD *)(v10 + 56) = (v21 >> 40) & 0x3F;
    atomic_store(((unint64_t)*((unsigned __int8 *)a2 + 12) << 32) | 7, (unint64_t *)(v10 + 16));
  }

  else
  {
    if ((*v7 & 0x400000000000LL) != 0)
    {
      do
      {
        unint64_t v21 = __ldxr(v7);
        uint64_t v42 = (v21 >> 40) & 0x3F;
        uint64_t v24 = ((_DWORD)v42 + 1) | 0x40u;
      }

      while (__stxr(v21 & 0xFFFF000000000000LL | (v24 << 40), v7));
      unint64_t v16 = 0LL;
      uint64_t v14 = 0LL;
      unint64_t v25 = v21 >> 40;
      unint64_t v22 = HIWORD(v21);
    }

    else
    {
      *(void *)(a1 + (v6 << 7) + 648) = mach_continuous_time();
      do
      {
        unint64_t v21 = __ldxr(v7);
        uint64_t v39 = (v21 >> 40) & 0x3F;
        uint64_t v24 = ((_DWORD)v39 + 1) | 0x40u;
      }

      while (__stlxr(v21 & 0xFFFF000000000000LL | (v24 << 40), v7));
      unint64_t v16 = 0LL;
      uint64_t v14 = 0LL;
      unint64_t v25 = v21 >> 40;
      unint64_t v22 = HIWORD(v21);
    }

    unint64_t v23 = v22;
  }

uint64_t firehose_buffer_tracepoint_reserve_wait_for_chunks_from_logd(uint64_t guard, uint64_t a2, void *a3)
{
  uint64_t v5 = *(_BYTE *)(a2 + 14) & 1;
  uint64_t v6 = (unint64_t *)(guard + 448);
  int v7 = -6;
  do
    BOOL v8 = __CFADD__(v7++, 1);
  while (!v8 && firehose_drain_notifications_once(guard));
  if (*(_BYTE *)(a2 + 13))
  {
    LOBYTE(v9) = *(_BYTE *)(guard + 452);
  }

  else
  {
    unint64_t v72 = *(void *)(guard + 448);
    unint64_t v54 = (_DWORD *)(guard + 4 * v5 + 1552);
    unsigned int v55 = (_WORD *)((unint64_t)&v74 | (2 * v5));
    uint64_t v56 = v5;
    uint64_t v57 = (_WORD *)((unint64_t)&v73 | (2 * v5));
LABEL_62:
    unint64_t v58 = v72;
    unint64_t v74 = v72;
    do
    {
      if (!*v55)
      {
        if ((*(_BYTE *)(a2 + 14) & 2) != 0) {
          __FIREHOSE_CLIENT_THROTTLED_DUE_TO_HEAVY_LOGGING__(guard, v56, &v72);
        }
        else {
          firehose_client_send_push_and_wait(guard, v56, &v72);
        }
        uint64_t result = 0LL;
        if (*v54 == -1) {
          return result;
        }
        goto LABEL_62;
      }

      unint64_t v73 = v58;
      --*v57;
      unint64_t v59 = v73;
      while (1)
      {
        unint64_t v60 = __ldaxr(v6);
        if (v60 != v58) {
          break;
        }
        if (!__stxr(v59, v6))
        {
          char v61 = 1;
          goto LABEL_69;
        }
      }

      char v61 = 0;
      __clrex();
LABEL_69:
      unint64_t v74 = v60;
      unint64_t v58 = v60;
    }

    while ((v61 & 1) == 0);
    unint64_t v72 = v73;
    unint64_t v9 = HIDWORD(v73);
    uint64_t v5 = v56;
  }

  unint64_t v10 = (unint64_t *)(guard + 256);
  int v11 = (unint64_t *)(guard + 456);
  unint64_t v12 = (unsigned int *)(guard + 536);
  uint64_t v13 = -1LL << v9;
  unsigned int v70 = v5;
  mach_port_context_t v14 = guard + 4 * v5 + 1552;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
  {
    while (1)
    {
      unint64_t v16 = __ldxr(v10);
      unint64_t v17 = HIDWORD(v16);
      if ((unsigned __int16)v16 != WORD1(v16))
      {
        unsigned __int16 v18 = v16 + 1;
        unint64_t v19 = HIDWORD(v16);
        goto LABEL_9;
      }

      if (HIWORD(v16) == WORD2(v16)) {
        break;
      }
      LOWORD(v19) = WORD2(v16) + 1;
      unsigned __int16 v18 = v16;
LABEL_9:
      if (!__stxr(v16 & 0xFFFF0000FFFF0000LL | ((unint64_t)(unsigned __int16)v19 << 32) | v18, v10))
      {
        if ((unsigned __int16)v19 == WORD2(v16))
        {
          uint64_t v20 = guard;
        }

        else
        {
          v16 >>= 32;
          uint64_t v20 = guard + 128;
        }

        unint64_t v21 = v16 & 0x3F;
        __int16 v22 = *(_WORD *)(v20 + 2 * v21);
        unsigned int v23 = v22 & 0x3F;
        if ((v22 & 0x3F) == 0)
        {
          int v30 = -1024;
          do
          {
            if (v30 < 0)
            {
              __yield();
            }

            else
            {
              uint64_t v63 = v13;
              uint64_t v64 = v12;
              mach_port_context_t v65 = v14;
              unint64_t v67 = StatusReg;
              int v62 = v30;
              thread_switch(0, 4, v30 + 1);
              int v30 = v62;
              mach_port_context_t v14 = v65;
              unint64_t StatusReg = v67;
              uint64_t v13 = v63;
              unint64_t v12 = v64;
            }

            __int16 v22 = *(_WORD *)(v20 + 2 * v21);
            ++v30;
            unsigned int v23 = v22 & 0x3F;
          }

          while ((v22 & 0x3F) == 0);
        }

        int v24 = (unsigned __int16)v19;
        unsigned int v25 = v23;
        unint64_t v26 = guard + ((unint64_t)v23 << 12);
        if (v24 == (unsigned __int16)v17 && *(_BYTE *)(v26 + 6) == 3)
        {
          do
            unint64_t v27 = __ldxr(v11);
          while (__stxr(v27 & ~(1LL << v25), v11));
        }

        *(void *)unint64_t v26 = 0x100000000000000LL;
        *(_WORD *)(v20 + 2 * v2_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = (v22 & 0xFFC0) + 64;
        unsigned int v28 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        while (!__ldaxr(v12))
        {
          if (!__stxr(v28, v12)) {
            goto LABEL_31;
          }
        }

        __clrex();
        BOOL v31 = v12;
        uint64_t v32 = v13;
        mach_port_context_t v33 = v14;
        unint64_t v68 = StatusReg;
        _dispatch_unfair_lock_lock_slow((uint64_t)v12, 0x10000);
        unint64_t StatusReg = v68;
        mach_port_context_t v14 = v33;
        uint64_t v13 = v32;
        unint64_t v12 = v31;
LABEL_31:
        if (*(unsigned __int8 *)(guard + 532) <= v25)
        {
          unint64_t v34 = *(void *)(guard + 520) & ~(1LL << v25);
          *(void *)(guard + 52_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v34;
          uint64_t v35 = v25 & 0x3C;
          if (((v34 >> (v25 & 0x3C)) & 0xF) == 0)
          {
            __int16 v36 = v12;
            uint64_t v37 = v13;
            mach_port_context_t v38 = v14;
            unint64_t v39 = StatusReg;
            madvise((void *)(guard + (v35 << 12)), 0x4000uLL, 5);
            unint64_t StatusReg = v39;
            mach_port_context_t v14 = v38;
            uint64_t v13 = v37;
            unint64_t v12 = v36;
          }

          unsigned int v25 = 0;
        }

        unsigned int v40 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        do
          unsigned int v41 = __ldxr(v12);
        while (__stlxr(0, v12));
        if (v41 != v40)
        {
          unint64_t v47 = v12;
          uint64_t v48 = v13;
          mach_port_context_t v49 = v14;
          unint64_t v69 = StatusReg;
          _dispatch_unfair_lock_unlock_slow((uint64_t)v12, v41);
          unint64_t StatusReg = v69;
          mach_port_context_t v14 = v49;
          uint64_t v13 = v48;
          unint64_t v12 = v47;
        }

        if (v25) {
          return firehose_buffer_stream_chunk_install(guard, (unint64_t *)a2, a3, v25);
        }
      }
    }

    unint64_t v66 = (_DWORD *)v14;
    uint64_t v42 = v13;
    char v43 = v12;
    __clrex();
    unint64_t v44 = StatusReg;
    unsigned int v45 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    while (!__ldaxr(v12))
    {
      if (!__stxr(v45, v12)) {
        goto LABEL_46;
      }
    }

    __clrex();
    _dispatch_unfair_lock_lock_slow((uint64_t)v12, 0x10000);
LABEL_46:
    uint64_t v50 = *(void *)(guard + 520);
    if ((v50 | v42) == 0xFFFFFFFFFFFFFFFFLL)
    {
      unsigned int v25 = 0;
    }

    else
    {
      unsigned int v25 = __clz(__rbit64(~(v50 | v42)));
      *(void *)(guard + 52_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v50 | (1 << v25);
    }

    unsigned int v51 = *(_DWORD *)(v44 + 24) & 0xFFFFFFFC;
    do
      unsigned int v52 = __ldxr(v43);
    while (__stlxr(0, v43));
    if (v52 == v51)
    {
      if (v25) {
        return firehose_buffer_stream_chunk_install(guard, (unint64_t *)a2, a3, v25);
      }
    }

    else
    {
      _dispatch_unfair_lock_unlock_slow((uint64_t)v43, v52);
      if (v25) {
        return firehose_buffer_stream_chunk_install(guard, (unint64_t *)a2, a3, v25);
      }
    }

    if ((*(_BYTE *)(a2 + 14) & 2) != 0) {
      __FIREHOSE_CLIENT_THROTTLED_DUE_TO_HEAVY_LOGGING__(guard, v70, 0LL);
    }
    else {
      firehose_client_send_push_and_wait(guard, v70, 0LL);
    }
    mach_port_context_t v14 = (mach_port_context_t)v66;
    unint64_t v12 = v43;
    uint64_t v13 = v42;
    unint64_t StatusReg = v44;
  }

  while (*v66 != -1);
  unsigned int v25 = 0;
  return firehose_buffer_stream_chunk_install(guard, (unint64_t *)a2, a3, v25);
}

void firehose_client_start_quarantine(uint64_t a1)
{
  if (*(uint64_t *)_voucher_libtrace_hooks >= 5)
  {
    mach_port_t v1 = *(void (**)(void))(_voucher_libtrace_hooks + 40);
    if (v1)
    {
      v1();
      *(_BYTE *)(a1 + 1569) = 1;
      uint64_t v3 = *(void *)(a1 + 768);
      if ((~v3 & 0xFF00000000LL) == 0 || BYTE4(*(void *)(a1 + 768)) == 0)
      {
        if (!*(_DWORD *)(a1 + 1552)) {
          firehose_client_reconnect((int *)a1, 0, 0);
        }
      }

      else
      {
        uint64_t v5 = (unint64_t *)(a1 + 768);
        uint64_t v6 = (unint64_t *)(a1 + ((unint64_t)BYTE4(v3) << 12));
        unint64_t v7 = v6[1];
        do
        {
          unint64_t v8 = __ldxr(v6);
          if (!v8 || (v8 & 0x1FF000000000000LL) != 0x1000000000000LL) {
            goto LABEL_27;
          }
          unint64_t v9 = v8 >> 16;
          BOOL v11 = (unsigned __int16)v8 + 25 > WORD1(v8) || v7 < 0xFFFF000000000000LL;
          unint64_t v12 = v8 + 0x100000020LL;
          unint64_t v13 = ((unsigned __int16)(v8 + 32) + 40 > (v8 + 32) >> 16) | ((v8 + 0x100000020LL) >> 56);
          if (v11)
          {
            unint64_t v12 = v8;
            unint64_t v13 = HIBYTE(v8) | 1;
          }

          else
          {
            unint64_t v9 = (v8 + 0x100000020LL) >> 16;
          }
        }

        while (__stxr( ((_DWORD)v9 << 16) | v12 & 0xFFFFFF00000000LL | (v13 << 56) | (unsigned __int16)v12,  v6));
        if (!v11)
        {
          if (!(_WORD)v8) {
            goto LABEL_28;
          }
          qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Allocation should always fail";
          qword_61258 = (unsigned __int16)v8;
          __break(1u);
LABEL_27:
          __clrex();
          goto LABEL_28;
        }

        if ((v12 & 0xFF00000000LL) == 0) {
          firehose_buffer_ring_enqueue((int *)a1, BYTE4(v3));
        }
LABEL_28:
        while (1)
        {
          unint64_t v14 = __ldxr(v5);
          if (v14 != v3) {
            break;
          }
          if (!__stxr(v3 & 0xFFFFFF00FFFFFFFFLL, v5)) {
            goto LABEL_32;
          }
        }

        __clrex();
      }

void __FIREHOSE_CLIENT_THROTTLED_DUE_TO_HEAVY_LOGGING__(uint64_t a1, unsigned int a2, unint64_t *a3)
{
}

void firehose_client_send_push_and_wait(uint64_t guard, unsigned int a2, unint64_t *a3)
{
  mach_port_t v3 = *(_DWORD *)(guard + 4LL * a2 + 1552);
  __int128 v13 = 0uLL;
  int v12 = 0;
  if (v3 == -1) {
    return;
  }
  if (v3)
  {
    int v7 = firehose_send_push_and_wait(v3, &v13, &v12);
    if (!v7)
    {
LABEL_4:
      if (((unint64_t)v13 & *((void *)&v13 + 1)) != 0xFFFFFFFFFFFFFFFFLL)
      {
        uint64_t v8 = 32LL;
        if (a2) {
          uint64_t v8 = 56LL;
        }
        unint64_t v9 = (unint64_t *)(guard + v8 + 448);
        do
          unint64_t v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
        firehose_client_merge_updates(guard, 0, v13, *((unint64_t *)&v13 + 1), v12 != 0, a3);
        return;
      }

      goto LABEL_20;
    }

    if (v7 != 268435459)
    {
      if (v7 == -301)
      {
        qword_61228 = (uint64_t)"MIG_REPLY_MISMATCH";
        qword_61258 = -301LL;
        __break(1u);
      }

      _dispatch_bug(681LL, v7);
    }
  }

  mach_port_t v11 = firehose_client_reconnect((int *)guard, v3, a2);
  if (v11 - 1 > 0xFFFFFFFD) {
    goto LABEL_22;
  }
  int v7 = firehose_send_push_and_wait(v11, &v13, &v12);
  switch(v7)
  {
    case 0:
      goto LABEL_4;
    case 268435459:
      goto LABEL_22;
    case -301:
      qword_61228 = (uint64_t)"MIG_REPLY_MISMATCH";
      qword_61258 = -301LL;
      __break(1u);
LABEL_20:
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Memory corruption in the logging buffers";
      __break(1u);
      break;
  }

  _dispatch_bug(693LL, v7);
LABEL_22:
  if (a3) {
    *a3 = *(void *)(guard + 448);
  }
}

uint64_t _dispatch_iocntl(uint64_t result, uint64_t a2)
{
  switch((int)result)
  {
    case 1:
      dispatch_io_defaults = vm_page_size * a2;
      break;
    case 2:
      qword_61180 = a2;
      break;
    case 3:
      byte_61190 = a2 != 0;
      break;
    case 4:
      qword_61188 = a2;
      break;
    default:
      return result;
  }

  return result;
}

void _dispatch_io_dispose(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  if (v2 && (*(_BYTE *)(a1 + 120) & 3) == 0)
  {
    mach_port_t v3 = *(void **)(v2 + 8);
    if (v3)
    {
      void *v3 = 0LL;
      uint64_t v2 = *(void *)(a1 + 112);
    }

    dispatch_resume(*(dispatch_object_t *)(v2 + 64));
  }

  uint64_t v4 = *(dispatch_object_s **)(a1 + 48);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = *(dispatch_object_s **)(a1 + 56);
  if (v5) {
    dispatch_release(v5);
  }
  uint64_t v6 = *(dispatch_object_s **)(a1 + 64);
  if (v6) {
    dispatch_release(v6);
  }
}

dispatch_io_t dispatch_io_create( dispatch_io_type_t type, dispatch_fd_t fd, dispatch_queue_t queue, void *cleanup_handler)
{
  if (type > 1) {
    return 0LL;
  }
  uint64_t v4 = _dispatch_io_create(type);
  *((_DWORD *)v4 + 3_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = fd;
  *((_DWORD *)v4 + 32) = fd;
  dispatch_suspend((dispatch_object_t)v4[6]);
  if (*((_DWORD *)queue + 2) != 0x7FFFFFFF)
  {
    unint64_t v9 = (unsigned int *)((char *)queue + 8);
    do
      int v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    if (v10 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

  if (*((_DWORD *)v4 + 2) != 0x7FFFFFFF)
  {
    mach_port_t v11 = (unsigned int *)(v4 + 1);
    do
      int v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    if (v12 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 0x40000000LL;
  v14[2] = __dispatch_io_create_block_invoke;
  v14[3] = &unk_590A8;
  v14[6] = type;
  uint64_t v14[7] = queue;
  v14[4] = cleanup_handler;
  v14[5] = v4;
  _dispatch_fd_entry_init_async(fd, (uint64_t)v14);
  return (dispatch_io_t)v4;
}

void *_dispatch_io_create(uint64_t a1)
{
  uint64_t v2 = (void *)_dispatch_object_alloc(&OBJC_CLASS___OS_dispatch_io, 152LL);
  int v2[2] = -1985229329LL;
  v2[3] = &off_653C0;
  uint64_t v3 = dispatch_io_defaults * qword_61180;
  v2[9] = a1;
  v2[10] = v3;
  v2[11] = -1LL;
  v2[6] = dispatch_queue_create("com.apple.libdispatch-io.channelq", 0LL);
  return v2;
}

void _dispatch_fd_entry_init_async(int a1, uint64_t a2)
{
  if (_dispatch_io_init_pred != -1) {
    dispatch_once_f(&_dispatch_io_init_pred, 0LL, (dispatch_function_t)_dispatch_io_queues_init);
  }
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000LL;
  _OWORD v4[2] = ___dispatch_fd_entry_init_async_block_invoke;
  void v4[3] = &unk_59860;
  int v5 = a1;
  v4[4] = a2;
  dispatch_channel_async((dispatch_queue_t)_dispatch_io_fds_lockq, v4);
}

unsigned int *__dispatch_io_create_block_invoke(uint64_t *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 24);
  if (!v4)
  {
    int v5 = *(_WORD *)(a2 + 36) & 0xF000;
    if (v5 == 0x4000)
    {
      int v4 = 21;
    }

    else if (*(void *)(a1[5] + 72) != 1LL || (int v4 = 29, v5 != 4096) && v5 != 49152)
    {
      if (a1[6] == 1)
      {
        unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        do
        {
          off_t v7 = lseek(*(_DWORD *)a2, 0LL, 1);
          if (v7 != -1) {
            goto LABEL_12;
          }
          int v4 = **(_DWORD **)(StatusReg + 8);
        }

        while (v4 == 4);
        if (!v4)
        {
LABEL_12:
          int v4 = 0;
          *(void *)(a1[5] + 136) = v7;
          goto LABEL_14;
        }

        _dispatch_bug(389LL, v4);
      }

      else
      {
        int v4 = 0;
      }
    }
  }

dispatch_group_t _dispatch_io_init(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  if (a5)
  {
    if (*(_DWORD *)(a3 + 8) != 0x7FFFFFFF)
    {
      off_t v7 = (unsigned int *)(a3 + 8);
      do
        int v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      if (v8 <= 0) {
        dispatch_set_target_queue_cold_2();
      }
    }

    unint64_t v9 = (dispatch_queue_s **)(a2 + 64);
    if (a4) {
      unint64_t v9 = (dispatch_queue_s **)(a1 + 6);
    }
    int v10 = *v9;
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000LL;
    block[2] = ___dispatch_io_init_block_invoke;
    block[3] = &unk_59618;
    block[4] = a5;
    block[5] = a3;
    int v13 = a4;
    dispatch_channel_async(v10, block);
  }

  if (a2)
  {
    a1[14] = a2;
    dispatch_retain(*(dispatch_object_t *)(a2 + 72));
    dispatch_retain(*(dispatch_object_t *)(a2 + 80));
    dispatch_group_t result = *(dispatch_group_t *)(a2 + 80);
    a1[7] = *(void *)(a2 + 72);
  }

  else
  {
    a1[7] = dispatch_queue_create("com.apple.libdispatch-io.barrierq", 0LL);
    dispatch_group_t result = dispatch_group_create();
  }

  a1[8] = result;
  return result;
}

dispatch_io_t dispatch_io_create_f( dispatch_io_type_t a1, dispatch_fd_t a2, dispatch_queue_s *a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 0x40000000LL;
    void v7[2] = __dispatch_io_create_f_block_invoke;
    v7[3] = &__block_descriptor_tmp_2;
    v7[4] = a5;
    v7[5] = a4;
    int v5 = v7;
  }

  else
  {
    int v5 = 0LL;
  }

  return dispatch_io_create(a1, a2, a3, v5);
}

uint64_t __dispatch_io_create_f_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 40));
}

dispatch_io_t dispatch_io_create_with_path( dispatch_io_type_t type, const char *path, int oflag, mode_t mode, dispatch_queue_t queue, void *cleanup_handler)
{
  if (type > 1) {
    return 0LL;
  }
  if (*path != 47) {
    return 0LL;
  }
  size_t v12 = strlen(path);
  int v13 = malloc(v12 + 25);
  if (!v13) {
    return 0LL;
  }
  int v14 = v13;
  uint64_t v15 = _dispatch_io_create(type);
  *(void *)((char *)v15 + 124) = -1LL;
  *(void *)int v14 = v15;
  v14[2] = oflag;
  *((_WORD *)v14 + 6) = mode;
  *((void *)v14 + 2) = v12;
  memcpy(v14 + 6, path, v12 + 1);
  if (*((_DWORD *)queue + 2) != 0x7FFFFFFF)
  {
    unint64_t v16 = (unsigned int *)((char *)queue + 8);
    do
      int v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    if (v17 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

  if (*((_DWORD *)v15 + 2) != 0x7FFFFFFF)
  {
    unsigned __int16 v18 = (unsigned int *)(v15 + 1);
    do
      int v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    if (v19 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

  unint64_t v20 = (dispatch_queue_s *)v15[6];
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 0x40000000LL;
  v22[2] = __dispatch_io_create_with_path_block_invoke;
  v22[3] = &unk_59118;
  v22[6] = v15;
  v22[7] = queue;
  v22[4] = cleanup_handler;
  v22[5] = v14;
  dispatch_channel_async(v20, v22);
  return (dispatch_io_t)v15;
}

void __dispatch_io_create_with_path_block_invoke(uint64_t a1)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
  {
    uint64_t v3 = *(void *)(a1 + 40);
    int v4 = (const char *)(v3 + 24);
    if ((*(_DWORD *)(v3 + 8) & 0x200100) != 0) {
      int v5 = lstat(v4, &v28);
    }
    else {
      int v5 = stat(v4, &v28);
    }
    if (v5 != -1) {
      goto LABEL_8;
    }
    int v6 = **(_DWORD **)(StatusReg + 8);
  }

  while (v6 == 4);
  if (v6)
  {
    uint64_t v9 = *(void *)(a1 + 40);
    if ((*(_BYTE *)(v9 + 9) & 2) != 0)
    {
      uint64_t v10 = *(void *)(v9 + 16);
      if (*(_BYTE *)(v9 + v10 + 23) != 47)
      {
        while (1)
        {
          uint64_t v18 = v10 - 1;
          if (v10 < 1) {
            break;
          }
          int v19 = *(unsigned __int8 *)(v9 + v10-- + 23);
          if (v19 == 47)
          {
            unint64_t v20 = (_BYTE *)(v9 + v18 + 24);
            goto LABEL_31;
          }
        }

        unint64_t v20 = 0LL;
LABEL_31:
        *unint64_t v20 = 0;
        do
        {
          int v21 = **(_DWORD **)(StatusReg + 8);
        }

        while (v21 == 4);
        if (!v21)
        {
LABEL_35:
          v28.st_mode = 0x8000;
          *unint64_t v20 = 47;
          uint64_t v8 = *(void *)(a1 + 48);
          goto LABEL_36;
        }

        *unint64_t v20 = 47;
        *(_DWORD *)(*(void *)(a1 + 48) + 144LL) = v6;
        goto LABEL_17;
      }
    }

dispatch_queue_t _dispatch_io_queues_init()
{
  _dispatch_io_fds_lockq = (uint64_t)dispatch_queue_create("com.apple.libdispatch-io.fd_lockq", 0LL);
  dispatch_queue_t result = dispatch_queue_create("com.apple.libdispatch-io.dev_lockq", 0LL);
  _dispatch_io_devs_lockq = (uint64_t)result;
  return result;
}

unsigned int *__dispatch_io_create_with_path_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = _dispatch_fd_entry_create_with_path(*(void *)(a1 + 40), *(_DWORD *)(a1 + 48), *(_WORD *)(a1 + 52));
  _dispatch_io_init(*(void **)(a1 + 192), (uint64_t)v2, *(void *)(a1 + 200), 0, *(void *)(a1 + 32));
  dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 192) + 48LL));
  int v4 = *(unsigned int **)(a1 + 192);
  if (v4[2] != 0x7FFFFFFF)
  {
    int v5 = v4 + 2;
    do
      int v6 = __ldxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (v6 <= 1)
    {
      if (v6 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      _os_object_dispose(v4, v3);
    }
  }

  dispatch_queue_t result = *(unsigned int **)(a1 + 200);
  if (result[2] != 0x7FFFFFFF)
  {
    uint64_t v8 = result + 2;
    do
      int v9 = __ldxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (v9 <= 1)
    {
      if (v9 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      return (unsigned int *)_os_object_dispose(result, v3);
    }
  }

  return result;
}

dispatch_queue_s *_dispatch_fd_entry_create_with_path(uint64_t a1, unsigned int a2, __int16 a3)
{
  int v6 = (dispatch_queue_s *)_dispatch_fd_entry_create(*(dispatch_queue_s **)(*(void *)a1 + 48LL));
  int v7 = v6;
  if ((a3 & 0xF000) == 0x8000) {
    _dispatch_disk_init(v6, HIBYTE(a2));
  }
  else {
    _dispatch_stream_init((uint64_t)v6);
  }
  *(_DWORD *)int v7 = -1;
  *((_DWORD *)v7 + 4) = -1;
  *((void *)v7 + _dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = a1;
  *((_DWORD *)v7 + 8) = a2;
  *((_WORD *)v7 + 18) = a3;
  *((void *)v7 + 9) = dispatch_queue_create("com.apple.libdispatch-io.barrierq", 0LL);
  *((void *)v7 + 1_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = dispatch_group_create();
  uint64_t v8 = (dispatch_queue_s *)*((void *)v7 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = ___dispatch_fd_entry_create_with_path_block_invoke;
  block[3] = &__block_descriptor_tmp_79;
  block[4] = v7;
  dispatch_channel_async(v8, block);
  int v9 = (dispatch_queue_s *)*((void *)v7 + 8);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 0x40000000LL;
  v11[2] = ___dispatch_fd_entry_create_with_path_block_invoke_2;
  v11[3] = &__block_descriptor_tmp_80;
  v11[4] = v7;
  dispatch_channel_async(v9, v11);
  return v7;
}

dispatch_io_t dispatch_io_create_with_path_f( dispatch_io_type_t a1, const char *a2, int a3, mode_t a4, dispatch_queue_s *a5, uint64_t a6, uint64_t a7)
{
  if (a7)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 0x40000000LL;
    void v9[2] = __dispatch_io_create_with_path_f_block_invoke;
    v9[3] = &__block_descriptor_tmp_6;
    v9[4] = a7;
    v9[5] = a6;
    int v7 = v9;
  }

  else
  {
    int v7 = 0LL;
  }

  return dispatch_io_create_with_path(a1, a2, a3, a4, a5, v7);
}

uint64_t __dispatch_io_create_with_path_f_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 40));
}

dispatch_io_t dispatch_io_create_with_io( dispatch_io_type_t type, dispatch_io_t io, dispatch_queue_t queue, void *cleanup_handler)
{
  if (type > 1) {
    return 0LL;
  }
  int v4 = _dispatch_io_create(type);
  dispatch_suspend((dispatch_object_t)v4[6]);
  if (*((_DWORD *)queue + 2) != 0x7FFFFFFF)
  {
    int v9 = (unsigned int *)((char *)queue + 8);
    do
      int v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    if (v10 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

  if (*((_DWORD *)v4 + 2) != 0x7FFFFFFF)
  {
    int v11 = (unsigned int *)(v4 + 1);
    do
      int v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    if (v12 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

  if (*((_DWORD *)io + 2) != 0x7FFFFFFF)
  {
    int v13 = (unsigned int *)((char *)io + 8);
    do
      int v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    if (v14 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

  uint64_t v15 = (dispatch_queue_s *)*((void *)io + 6);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = __dispatch_io_create_with_io_block_invoke;
  block[3] = &unk_591B0;
  void block[6] = v4;
  block[7] = queue;
  block[4] = cleanup_handler;
  void block[5] = io;
  block[8] = type;
  dispatch_channel_async(v15, block);
  return (dispatch_io_t)v4;
}

void __dispatch_io_create_with_io_block_invoke(uint64_t *a1)
{
  uint64_t v2 = a1[5];
  if ((*(_BYTE *)(v2 + 120) & 3) != 0)
  {
    int v3 = 89;
  }

  else
  {
    int v3 = *(_DWORD *)(v2 + 144);
    if (!v3)
    {
      block[0] = _NSConcreteStackBlock;
      block[2] = __dispatch_io_create_with_io_block_invoke_2;
      block[3] = &unk_59188;
      uint64_t v17 = a1[7];
      uint64_t v16 = a1[8];
      void block[6] = a1[6];
      block[7] = v16;
      uint64_t v18 = *(dispatch_queue_s **)(v2 + 56);
      block[1] = 0x40000000LL;
      block[8] = v17;
      block[4] = a1[4];
      void block[5] = v2;
      dispatch_channel_async(v18, block);
      return;
    }
  }

  uint64_t v4 = a1[6];
  uint64_t v5 = a1[7];
  *(_DWORD *)(v4 + 144) = v3;
  _dispatch_io_init((void *)v4, 0LL, v5, v3, a1[4]);
  dispatch_resume(*(dispatch_object_t *)(a1[6] + 48));
  int v7 = (unsigned int *)a1[6];
  if (v7[2] != 0x7FFFFFFF)
  {
    uint64_t v8 = v7 + 2;
    do
      int v9 = __ldxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (v9 <= 1)
    {
      if (v9 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      _os_object_dispose(v7, v6);
    }
  }

  int v10 = (unsigned int *)a1[5];
  if (v10[2] != 0x7FFFFFFF)
  {
    int v11 = v10 + 2;
    do
      int v12 = __ldxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (v12 <= 1)
    {
      if (v12 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      _os_object_dispose(v10, v6);
    }
  }

  int v13 = (unsigned int *)a1[7];
  if (v13[2] != 0x7FFFFFFF)
  {
    int v14 = v13 + 2;
    do
      int v15 = __ldxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (v15 <= 1)
    {
      if (v15 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      _os_object_dispose(v13, v6);
    }
  }

unsigned int *__dispatch_io_create_with_io_block_invoke_2(uint64_t *a1)
{
  uint64_t v2 = a1[5];
  if ((*(_BYTE *)(v2 + 120) & 3) != 0)
  {
    int v3 = 89;
    goto LABEL_7;
  }

  int v3 = *(_DWORD *)(v2 + 144);
  if (v3) {
    goto LABEL_7;
  }
  uint64_t v4 = *(void *)(v2 + 112);
  int v3 = *(_DWORD *)(v4 + 24);
  if (v3) {
    goto LABEL_7;
  }
  int v5 = *(_WORD *)(v4 + 36) & 0xF000;
  if (v5 == 0x4000)
  {
    int v3 = 21;
LABEL_7:
    uint64_t v6 = a1[6];
    *(_DWORD *)(v6 + 144) = v3;
    _dispatch_io_init((void *)v6, 0LL, a1[8], v3, a1[4]);
    dispatch_resume(*(dispatch_object_t *)(a1[6] + 48));
    uint64_t v8 = (unsigned int *)a1[6];
    if (v8[2] != 0x7FFFFFFF)
    {
      int v9 = v8 + 2;
      do
        int v10 = __ldxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (v10 <= 1)
      {
        if (v10 != 1) {
          _os_object_allows_weak_reference_cold_1();
        }
        _os_object_dispose(v8, v7);
      }
    }

    int v11 = (unsigned int *)a1[5];
    if (v11[2] != 0x7FFFFFFF)
    {
      int v12 = v11 + 2;
      do
        int v13 = __ldxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (v13 <= 1)
      {
        if (v13 != 1) {
          _os_object_allows_weak_reference_cold_1();
        }
        _os_object_dispose(v11, v7);
      }
    }

    dispatch_queue_t result = (unsigned int *)a1[8];
    if (result[2] != 0x7FFFFFFF)
    {
      int v15 = result + 2;
      do
        int v16 = __ldxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (v16 <= 1)
      {
        if (v16 != 1) {
          _os_object_allows_weak_reference_cold_1();
        }
        return (unsigned int *)_os_object_dispose(result, v7);
      }
    }

    return result;
  }

  uint64_t v17 = a1[6];
  if (*(void *)(v17 + 72) == 1LL)
  {
    int v3 = 29;
    if (v5 == 4096 || v5 == 49152) {
      goto LABEL_7;
    }
  }

  if (a1[7] == 1 && *(_DWORD *)(v2 + 124) != -1)
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      off_t v19 = lseek(**(_DWORD **)(a1[5] + 112), 0LL, 1);
      if (v19 != -1) {
        goto LABEL_29;
      }
      int v3 = **(_DWORD **)(StatusReg + 8);
    }

    while (v3 == 4);
    if (!v3)
    {
LABEL_29:
      uint64_t v2 = a1[5];
      uint64_t v17 = a1[6];
      *(void *)(v17 + 136) = v19;
      goto LABEL_30;
    }

    _dispatch_bug(590LL, v3);
    goto LABEL_7;
  }

unsigned int *__dispatch_io_create_with_io_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = _dispatch_fd_entry_create_with_path(*(void *)(a1 + 40), *(_DWORD *)(a1 + 64), *(_WORD *)(a1 + 68));
  _dispatch_io_init(*(void **)(a1 + 48), (uint64_t)v2, *(void *)(a1 + 56), 0, *(void *)(a1 + 32));
  dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 48) + 48LL));
  uint64_t v4 = *(unsigned int **)(a1 + 48);
  if (v4[2] != 0x7FFFFFFF)
  {
    int v5 = v4 + 2;
    do
      int v6 = __ldxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (v6 <= 1)
    {
      if (v6 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      _os_object_dispose(v4, v3);
    }
  }

  dispatch_queue_t result = *(unsigned int **)(a1 + 56);
  if (result[2] != 0x7FFFFFFF)
  {
    uint64_t v8 = result + 2;
    do
      int v9 = __ldxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (v9 <= 1)
    {
      if (v9 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      return (unsigned int *)_os_object_dispose(result, v3);
    }
  }

  return result;
}

dispatch_io_t dispatch_io_create_with_io_f( dispatch_io_type_t a1, dispatch_io_s *a2, dispatch_queue_s *a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 0x40000000LL;
    void v7[2] = __dispatch_io_create_with_io_f_block_invoke;
    v7[3] = &__block_descriptor_tmp_10;
    v7[4] = a5;
    v7[5] = a4;
    int v5 = v7;
  }

  else
  {
    int v5 = 0LL;
  }

  return dispatch_io_create_with_io(a1, a2, a3, v5);
}

uint64_t __dispatch_io_create_with_io_f_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 40));
}

void dispatch_io_set_high_water(dispatch_io_t channel, size_t high_water)
{
  if (*((_DWORD *)channel + 2) != 0x7FFFFFFF)
  {
    uint64_t v2 = (unsigned int *)((char *)channel + 8);
    do
      int v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
    if (v3 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

  uint64_t v4 = (dispatch_queue_s *)*((void *)channel + 6);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000LL;
  void v5[2] = __dispatch_io_set_high_water_block_invoke;
  v5[3] = &__block_descriptor_tmp_11;
  v5[4] = channel;
  v5[5] = high_water;
  dispatch_channel_async(v4, v5);
}

char *__dispatch_io_set_high_water_block_invoke(uint64_t a1, const char *a2)
{
  dispatch_queue_t result = *(char **)(a1 + 32);
  unint64_t v4 = *(void *)(a1 + 40);
  if (*((void *)result + 10) > v4)
  {
    *((void *)result + 1_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v4;
    unint64_t v4 = *(void *)(a1 + 40);
  }

  if (v4 <= 1) {
    uint64_t v5 = 1LL;
  }
  else {
    uint64_t v5 = v4;
  }
  *((void *)result + 1_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = v5;
  if (*((_DWORD *)result + 2) != 0x7FFFFFFF)
  {
    int v6 = (unsigned int *)(result + 8);
    do
      int v7 = __ldxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (v7 <= 1)
    {
      if (v7 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      return (char *)_os_object_dispose(result, a2);
    }
  }

  return result;
}

void dispatch_io_set_low_water(dispatch_io_t channel, size_t low_water)
{
  if (*((_DWORD *)channel + 2) != 0x7FFFFFFF)
  {
    uint64_t v2 = (unsigned int *)((char *)channel + 8);
    do
      int v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
    if (v3 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

  unint64_t v4 = (dispatch_queue_s *)*((void *)channel + 6);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000LL;
  void v5[2] = __dispatch_io_set_low_water_block_invoke;
  v5[3] = &__block_descriptor_tmp_12;
  v5[4] = channel;
  v5[5] = low_water;
  dispatch_channel_async(v4, v5);
}

char *__dispatch_io_set_low_water_block_invoke(uint64_t a1, const char *a2)
{
  dispatch_queue_t result = *(char **)(a1 + 32);
  unint64_t v4 = *(void *)(a1 + 40);
  if (*((void *)result + 11) < v4)
  {
    *((void *)result + 1_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = v4;
    unint64_t v4 = *(void *)(a1 + 40);
  }

  *((void *)result + 1_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v4;
  if (*((_DWORD *)result + 2) != 0x7FFFFFFF)
  {
    uint64_t v5 = (unsigned int *)(result + 8);
    do
      int v6 = __ldxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (v6 <= 1)
    {
      if (v6 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      return (char *)_os_object_dispose(result, a2);
    }
  }

  return result;
}

void dispatch_io_set_interval(dispatch_io_t channel, uint64_t interval, dispatch_io_interval_flags_t flags)
{
  if (*((_DWORD *)channel + 2) != 0x7FFFFFFF)
  {
    int v3 = (unsigned int *)((char *)channel + 8);
    do
      int v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
    if (v4 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

  uint64_t v5 = (dispatch_queue_s *)*((void *)channel + 6);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = __dispatch_io_set_interval_block_invoke;
  block[3] = &__block_descriptor_tmp_13;
  block[4] = channel;
  void block[5] = interval;
  void block[6] = flags;
  dispatch_channel_async(v5, block);
}

char *__dispatch_io_set_interval_block_invoke(uint64_t a1, const char *a2)
{
  uint64_t v3 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v6 = a1 + 32;
  dispatch_queue_t result = *(char **)(a1 + 32);
  unint64_t v5 = *(void *)(v6 + 8);
  if (v5 < 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = v5;
  }
  uint64_t v7 = *(void *)(a1 + 48);
  *((void *)result + 12) = v3;
  *((void *)result + 13) = v7;
  if (*((_DWORD *)result + 2) != 0x7FFFFFFF)
  {
    uint64_t v8 = (unsigned int *)(result + 8);
    do
      int v9 = __ldxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (v9 <= 1)
    {
      if (v9 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      return (char *)_os_object_dispose(result, a2);
    }
  }

  return result;
}

void _dispatch_io_set_target_queue(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF)
  {
    uint64_t v2 = (unsigned int *)(a2 + 8);
    do
      int v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
    if (v3 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    int v4 = (unsigned int *)(a1 + 8);
    do
      int v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    if (v5 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

  uint64_t v6 = *(dispatch_queue_s **)(a1 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000LL;
  void v7[2] = ___dispatch_io_set_target_queue_block_invoke;
  v7[3] = &__block_descriptor_tmp_14;
  v7[4] = a1;
  v7[5] = a2;
  dispatch_channel_async(v6, v7);
}

unsigned int *___dispatch_io_set_target_queue_block_invoke(uint64_t a1, const char *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  int v5 = *(unsigned int **)(v3 + 24);
  *(void *)(v3 + 24) = v4;
  if (v5[2] != 0x7FFFFFFF)
  {
    uint64_t v6 = v5 + 2;
    do
      int v7 = __ldxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (v7 <= 1)
    {
      if (v7 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      _os_object_dispose(v5, a2);
    }
  }

  dispatch_queue_t result = *(unsigned int **)(a1 + 32);
  if (result[2] != 0x7FFFFFFF)
  {
    int v9 = result + 2;
    do
      int v10 = __ldxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (v10 <= 1)
    {
      if (v10 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      return (unsigned int *)_os_object_dispose(result, a2);
    }
  }

  return result;
}

dispatch_fd_t dispatch_io_get_descriptor(dispatch_io_t channel)
{
  if ((*((_BYTE *)channel + 120) & 3) != 0) {
    return -1;
  }
  dispatch_fd_t result = *((_DWORD *)channel + 32);
  if (result == -1)
  {
    if (!*((_DWORD *)channel + 36))
    {
      unint64_t v3 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 184;
      while (1)
      {
        unint64_t v3 = *(void *)v3;
        if (!v3) {
          break;
        }
        if (*(char **)(v3 + 8) == "io")
        {
          if (*(dispatch_io_t *)(v3 + 16) != channel) {
            return -1;
          }
          _dispatch_fd_entry_open(*((void *)channel + 14), (uint64_t)channel);
          return *((_DWORD *)channel + 32);
        }
      }
    }

    return -1;
  }

  return result;
}

uint64_t _dispatch_fd_entry_open(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == -1)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    if (v5)
    {
      uint64_t v6 = (unsigned int *)(a1 + 24);
      uint64_t v2 = *(unsigned int *)(a1 + 24);
      if ((_DWORD)v2) {
        return v2;
      }
      uint64_t v8 = *(_DWORD *)(v5 + 8) & 0xFFFFFFFB | (4 * (*(void *)(a1 + 56) == 0LL));
      unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      while (1)
      {
        uint64_t v10 = *(void *)(a1 + 8) + 24LL;
        uint64_t v14 = a1;
        unsigned int v11 = guarded_open_np(v10, &v14, 15LL, v8 | 0x1000000);
        if (v11 != -1) {
          break;
        }
        **(_DWORD **)(StatusReg + 8) = 0;
        unsigned int v11 = open_NOCANCEL(v10, v8);
        if (v11 != -1) {
          goto LABEL_15;
        }
        uint64_t v2 = **(unsigned int **)(StatusReg + 8);
        if ((_DWORD)v2 != 4)
        {
          while (!__ldxr(v6))
          {
            if (!__stxr(v2, v6)) {
              return v2;
            }
          }

          __clrex();
          return v2;
        }
      }

      *(_DWORD *)(a1 + 28) = 15;
LABEL_15:
      while (1)
      {
        unsigned int v13 = __ldxr((unsigned int *)a1);
        if (v13 != -1) {
          break;
        }
        uint64_t v2 = __stxr(v11, (unsigned int *)a1);
        if (!(_DWORD)v2)
        {
          *(_DWORD *)(a2 + 128) = v11;
          return v2;
        }
      }

      __clrex();
      if (*(_DWORD *)(a1 + 28))
      {
        uint64_t v14 = a1;
        guarded_close_np();
      }

      else
      {
        close_NOCANCEL();
      }
    }
  }

  return 0LL;
}

void dispatch_io_close(dispatch_io_t channel, dispatch_io_close_flags_t flags)
{
  uint64_t v2 = (unsigned int *)((char *)channel + 120);
  int v3 = *((_DWORD *)channel + 30);
  if ((flags & 1) != 0)
  {
    if ((v3 & 2) != 0) {
      return;
    }
    do
      unsigned int v8 = __ldxr(v2);
    while (__stxr(v8 | 2, v2));
    if (*((_DWORD *)channel + 2) != 0x7FFFFFFF)
    {
      int v9 = (unsigned int *)((char *)channel + 8);
      do
        int v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      if (v10 <= 0) {
        dispatch_set_target_queue_cold_2();
      }
    }

    uint64_t v6 = (dispatch_queue_s *)*((void *)channel + 6);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000LL;
    block[2] = ___dispatch_io_stop_block_invoke;
    block[3] = &__block_descriptor_tmp_54;
    block[4] = channel;
    int v7 = block;
  }

  else
  {
    if ((v3 & 3) != 0) {
      return;
    }
    if (*((_DWORD *)channel + 2) != 0x7FFFFFFF)
    {
      uint64_t v4 = (unsigned int *)((char *)channel + 8);
      do
        int v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
      if (v5 <= 0) {
        dispatch_set_target_queue_cold_2();
      }
    }

    uint64_t v6 = (dispatch_queue_s *)*((void *)channel + 6);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 0x40000000LL;
    v11[2] = __dispatch_io_close_block_invoke;
    v11[3] = &__block_descriptor_tmp_17;
    v11[4] = channel;
    int v7 = v11;
  }

  dispatch_channel_async(v6, v7);
}

void __dispatch_io_close_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(dispatch_queue_s **)(v1 + 56);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = __dispatch_io_close_block_invoke_2;
  block[3] = &__block_descriptor_tmp_16;
  block[4] = v1;
  dispatch_channel_async(v2, block);
}

char *__dispatch_io_close_block_invoke_2(uint64_t a1, const char *a2)
{
  dispatch_fd_t result = *(char **)(a1 + 32);
  uint64_t v4 = (unsigned int *)(result + 120);
  if ((result[120] & 3) == 0)
  {
    do
      unsigned int v5 = __ldxr(v4);
    while (__stxr(v5 | 1, v4));
    dispatch_fd_t result = *(char **)(a1 + 32);
    uint64_t v6 = *((void *)result + 14);
    if (v6)
    {
      int v7 = *(void **)(v6 + 8);
      if (v7)
      {
        *int v7 = 0LL;
        dispatch_fd_t result = *(char **)(a1 + 32);
      }

      *((void *)result + 14) = 0LL;
      dispatch_resume(*(dispatch_object_t *)(v6 + 64));
      dispatch_fd_t result = *(char **)(a1 + 32);
    }
  }

  if (*((_DWORD *)result + 2) != 0x7FFFFFFF)
  {
    unsigned int v8 = (unsigned int *)(result + 8);
    do
      int v9 = __ldxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (v9 <= 1)
    {
      if (v9 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      return (char *)_os_object_dispose(result, a2);
    }
  }

  return result;
}

void dispatch_io_barrier(dispatch_io_t channel, dispatch_block_t barrier)
{
  if (*((_DWORD *)channel + 2) != 0x7FFFFFFF)
  {
    uint64_t v2 = (unsigned int *)((char *)channel + 8);
    do
      int v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
    if (v3 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

  uint64_t v4 = (dispatch_queue_s *)*((void *)channel + 6);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000LL;
  void v5[2] = __dispatch_io_barrier_block_invoke;
  v5[3] = &unk_59308;
  v5[4] = barrier;
  v5[5] = channel;
  dispatch_channel_async(v4, v5);
}

void __dispatch_io_barrier_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(v1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = __dispatch_io_barrier_block_invoke_2;
  block[3] = &unk_592E0;
  __int128 v5 = *(_OWORD *)(v1 + 56);
  uint64_t v6 = v3;
  uint64_t v7 = v1;
  block[4] = v2;
  dispatch_channel_async((dispatch_queue_t)v5, block);
}

void __dispatch_io_barrier_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(dispatch_group_s **)(a1 + 48);
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 56);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = __dispatch_io_barrier_block_invoke_3;
  block[3] = &unk_592B8;
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 40);
  block[4] = *(void *)(a1 + 32);
  void block[5] = v4;
  void block[6] = v5;
  dispatch_group_notify(v2, v3, block);
}

unsigned int *__dispatch_io_barrier_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  v8[1] = "io";
  v8[2] = v2;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v8[0] = *(void *)(StatusReg + 184);
  *(void *)(StatusReg + 184) = v8;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  *(void *)(StatusReg + 184) = v8[0];
  dispatch_resume(*(dispatch_object_t *)(a1 + 48));
  dispatch_fd_t result = *(unsigned int **)(a1 + 40);
  if (result[2] != 0x7FFFFFFF)
  {
    uint64_t v6 = result + 2;
    do
      int v7 = __ldxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (v7 <= 1)
    {
      if (v7 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      return (unsigned int *)_os_object_dispose(result, v4);
    }
  }

  return result;
}

void dispatch_io_barrier_f(dispatch_io_s *a1, uint64_t a2, uint64_t a3)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000LL;
  v3[2] = __dispatch_io_barrier_f_block_invoke;
  void v3[3] = &__block_descriptor_tmp_21;
  v3[4] = a3;
  v3[5] = a2;
  dispatch_io_barrier(a1, v3);
}

uint64_t __dispatch_io_barrier_f_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 40));
}

void dispatch_io_read( dispatch_io_t channel, off_t offset, size_t length, dispatch_queue_t queue, dispatch_io_handler_t io_handler)
{
  if (*((_DWORD *)channel + 2) != 0x7FFFFFFF)
  {
    uint64_t v5 = (unsigned int *)((char *)channel + 8);
    do
      int v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    if (v6 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

  if (*((_DWORD *)queue + 2) != 0x7FFFFFFF)
  {
    int v7 = (unsigned int *)((char *)queue + 8);
    do
      int v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    if (v8 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

  int v9 = (dispatch_queue_s *)*((void *)channel + 6);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = __dispatch_io_read_block_invoke;
  block[3] = &unk_59370;
  void block[6] = offset;
  void block[7] = length;
  void block[8] = queue;
  block[4] = io_handler;
  void block[5] = channel;
  dispatch_channel_async(v9, block);
}

unsigned int *__dispatch_io_read_block_invoke(uint64_t a1)
{
  uint64_t v2 = _dispatch_operation_create( 0,  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  &_dispatch_data_empty,  *(void *)(a1 + 64),  *(void **)(a1 + 32));
  if (v2)
  {
    uint64_t v4 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 56LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000LL;
    block[2] = __dispatch_io_read_block_invoke_2;
    block[3] = &__block_descriptor_tmp_22;
    block[4] = v2;
    dispatch_channel_async(v4, block);
  }

  uint64_t v5 = *(unsigned int **)(a1 + 40);
  if (v5[2] != 0x7FFFFFFF)
  {
    int v6 = v5 + 2;
    do
      int v7 = __ldxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (v7 <= 1)
    {
      if (v7 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      _os_object_dispose(v5, v3);
    }
  }

  dispatch_fd_t result = *(unsigned int **)(a1 + 64);
  if (result[2] != 0x7FFFFFFF)
  {
    int v9 = result + 2;
    do
      int v10 = __ldxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (v10 <= 1)
    {
      if (v10 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      return (unsigned int *)_os_object_dispose(result, v3);
    }
  }

  return result;
}

uint64_t _dispatch_operation_create(int a1, uint64_t a2, uint64_t a3, uint64_t a4, id a5, uint64_t a6, void *a7)
{
  if ((*(_BYTE *)(a2 + 120) & 3) != 0)
  {
    int v12 = 89;
LABEL_3:
    _dispatch_objc_retain(a5);
    if (*(_DWORD *)(a6 + 8) != 0x7FFFFFFF)
    {
      unsigned int v13 = (unsigned int *)(a6 + 8);
      do
        int v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      if (v14 <= 0) {
        dispatch_set_target_queue_cold_2();
      }
    }

    if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF)
    {
      int v15 = (unsigned int *)(a2 + 8);
      do
        int v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      if (v16 <= 0) {
        dispatch_set_target_queue_cold_2();
      }
    }

    uint64_t v17 = *(dispatch_queue_s **)(a2 + 56);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000LL;
    block[2] = ___dispatch_operation_create_block_invoke;
    block[3] = &unk_59708;
    int v29 = a1;
    int v30 = v12;
    block[4] = a7;
    void block[5] = a6;
    void block[6] = a5;
    void block[7] = a2;
    dispatch_channel_async(v17, block);
    return 0LL;
  }

  int v12 = *(_DWORD *)(a2 + 144);
  if (!a4 || v12) {
    goto LABEL_3;
  }
  uint64_t v18 = _dispatch_object_alloc(&OBJC_CLASS___OS_dispatch_operation, 272LL);
  *(void *)(v18 + 16) = -1985229329LL;
  *(_DWORD *)(v18 + 12) = 0;
  *(void *)(v18 + 48) = dispatch_queue_create_with_target_V2( "com.apple.libdispatch-io.opq",  0LL,  (dispatch_queue_t)a6);
  *(_BYTE *)(v18 + 16_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = 0;
  *(_DWORD *)(v18 + 56) = a1;
  *(void *)(v18 + 104) = *(void *)(a2 + 136) + a3;
  *(void *)(v18 + 112) = a4;
  *(void *)(v18 + 128) = _dispatch_Block_copy(a7);
  if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF)
  {
    int v22 = (unsigned int *)(a2 + 8);
    do
      int v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    if (v23 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

  *(void *)(v18 + 136) = a2;
  __int128 v24 = *(_OWORD *)(a2 + 72);
  __int128 v25 = *(_OWORD *)(a2 + 88);
  *(void *)(v18 + 96) = *(void *)(a2 + 104);
  *(_OWORD *)(v18 + 64) = v24;
  *(_OWORD *)(v18 + 8_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v25;
  uint64_t v26 = *(void *)(a2 + 24);
  do
  {
    uint64_t v27 = v26;
    uint64_t v26 = *(void *)(v26 + 24);
  }

  while (v26);
  *(void *)(v18 + 24) = v27;
  return v18;
}

void __dispatch_io_read_block_invoke_2(uint64_t a1)
{
}

void _dispatch_operation_enqueue(uint64_t a1, unsigned int a2, id a3)
{
  uint64_t v6 = *(void *)(a1 + 136);
  if ((*(_BYTE *)(v6 + 120) & 3) != 0)
  {
    int v7 = 89;
  }

  else
  {
    int v7 = *(_DWORD *)(v6 + 144);
    if (!v7)
    {
      uint64_t v13 = *(void *)(v6 + 112);
      *(void *)(a1 + 144) = v13;
      dispatch_suspend(*(dispatch_object_t *)(v13 + 64));
      dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 144) + 80LL));
      uint64_t v14 = *(void *)(a1 + 144);
      uint64_t v15 = *(void *)(v14 + 56);
      if (v15)
      {
        int v16 = *(dispatch_queue_s **)(v15 + 72);
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 0x40000000LL;
        v19[2] = ___dispatch_operation_enqueue_block_invoke_3;
        v19[3] = &__block_descriptor_tmp_62;
        v19[4] = v15;
        v19[5] = a1;
        v19[6] = a3;
        uint64_t v17 = v19;
      }

      else
      {
        uint64_t v18 = *(dispatch_queue_s ***)(v14 + 8LL * a2 + 40);
        int v16 = *v18;
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 0x40000000LL;
        v20[2] = ___dispatch_operation_enqueue_block_invoke_2;
        v20[3] = &__block_descriptor_tmp_61;
        v20[4] = v18;
        v20[5] = a1;
        v20[6] = a3;
        uint64_t v17 = v20;
      }

      dispatch_channel_async(v16, v17);
      return;
    }
  }

  uint64_t v8 = *(void *)(a1 + 128);
  int v9 = *(dispatch_queue_s **)(a1 + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = ___dispatch_operation_enqueue_block_invoke;
  block[3] = &unk_59730;
  unsigned int v22 = a2;
  int v23 = v7;
  block[4] = v8;
  void block[5] = a3;
  dispatch_channel_async(v9, block);
  if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
  {
    unsigned int v11 = (unsigned int *)(a1 + 8);
    do
      int v12 = __ldxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (v12 <= 1)
    {
      if (v12 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      _os_object_dispose((void *)a1, v10);
    }
  }

void dispatch_io_read_f( dispatch_io_s *a1, off_t a2, size_t a3, dispatch_queue_s *a4, uint64_t a5, uint64_t a6)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000LL;
  void v6[2] = __dispatch_io_read_f_block_invoke;
  void v6[3] = &__block_descriptor_tmp_25;
  v6[4] = a6;
  v6[5] = a5;
  dispatch_io_read(a1, a2, a3, a4, v6);
}

uint64_t __dispatch_io_read_f_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 40));
}

void dispatch_io_write( dispatch_io_t channel, off_t offset, dispatch_data_t data, dispatch_queue_t queue, dispatch_io_handler_t io_handler)
{
  if (*((_DWORD *)channel + 2) != 0x7FFFFFFF)
  {
    int v10 = (unsigned int *)((char *)channel + 8);
    do
      int v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    if (v11 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

  if (*((_DWORD *)queue + 2) != 0x7FFFFFFF)
  {
    int v12 = (unsigned int *)((char *)queue + 8);
    do
      int v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    if (v13 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

  uint64_t v14 = (dispatch_queue_s *)*((void *)channel + 6);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = __dispatch_io_write_block_invoke;
  block[3] = &unk_593D8;
  void block[6] = offset;
  void block[7] = data;
  void block[8] = queue;
  block[4] = io_handler;
  void block[5] = channel;
  dispatch_channel_async(v14, block);
}

unsigned int *__dispatch_io_write_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(dispatch_data_s **)(a1 + 56);
  size_t size = dispatch_data_get_size(v4);
  uint64_t v6 = _dispatch_operation_create(1, v2, v3, size, v4, *(void *)(a1 + 64), *(void **)(a1 + 32));
  if (v6)
  {
    int v7 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 56LL);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 0x40000000LL;
    v16[2] = __dispatch_io_write_block_invoke_2;
    v16[3] = &__block_descriptor_tmp_26_0;
    uint64_t v8 = *(void *)(a1 + 56);
    v16[4] = v6;
    v16[5] = v8;
    dispatch_channel_async(v7, v16);
  }

  else
  {
    _dispatch_objc_release(*(id *)(a1 + 56));
  }

  int v10 = *(unsigned int **)(a1 + 40);
  if (v10[2] != 0x7FFFFFFF)
  {
    int v11 = v10 + 2;
    do
      int v12 = __ldxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (v12 <= 1)
    {
      if (v12 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      _os_object_dispose(v10, v9);
    }
  }

  dispatch_fd_t result = *(unsigned int **)(a1 + 64);
  if (result[2] != 0x7FFFFFFF)
  {
    uint64_t v14 = result + 2;
    do
      int v15 = __ldxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (v15 <= 1)
    {
      if (v15 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      return (unsigned int *)_os_object_dispose(result, v9);
    }
  }

  return result;
}

void __dispatch_io_write_block_invoke_2(uint64_t a1)
{
}

void dispatch_io_write_f( dispatch_io_s *a1, off_t a2, dispatch_data_s *a3, dispatch_queue_s *a4, uint64_t a5, uint64_t a6)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000LL;
  void v6[2] = __dispatch_io_write_f_block_invoke;
  void v6[3] = &__block_descriptor_tmp_28;
  v6[4] = a6;
  v6[5] = a5;
  dispatch_io_write(a1, a2, a3, a4, v6);
}

uint64_t __dispatch_io_write_f_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 40));
}

void dispatch_read(dispatch_fd_t fd, size_t length, dispatch_queue_t queue, void *handler)
{
  if (*((_DWORD *)queue + 2) != 0x7FFFFFFF)
  {
    uint64_t v4 = (unsigned int *)((char *)queue + 8);
    do
      int v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    if (v5 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000LL;
  void v6[2] = __dispatch_read_block_invoke;
  void v6[3] = &unk_594C0;
  v6[4] = handler;
  v6[5] = queue;
  dispatch_fd_t v7 = fd;
  void v6[6] = length;
  _dispatch_fd_entry_init_async(fd, (uint64_t)v6);
}

void __dispatch_read_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 24);
  if (v3)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000LL;
    block[2] = __dispatch_read_block_invoke_2;
    block[3] = &unk_59420;
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v4 = *(dispatch_queue_s **)(a1 + 40);
    block[4] = v5;
    int v22 = v3;
    dispatch_channel_async(v4, block);
    dispatch_fd_t v7 = *(unsigned int **)(a1 + 40);
    if (v7[2] != 0x7FFFFFFF)
    {
      uint64_t v8 = v7 + 2;
      do
        int v9 = __ldxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (v9 <= 1)
      {
        if (v9 != 1) {
          _os_object_allows_weak_reference_cold_1();
        }
        _os_object_dispose(v7, v6);
      }
    }
  }

  else
  {
    int v11 = *(void **)(a2 + 88);
    if (!v11)
    {
      int v11 = _dispatch_io_create(0LL);
      *((_DWORD *)v11 + 3_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = *(_DWORD *)(a1 + 56);
      *((_DWORD *)v11 + 32) = *(_DWORD *)(a1 + 56);
      v11[14] = a2;
      dispatch_retain(*(dispatch_object_t *)(a2 + 72));
      dispatch_retain(*(dispatch_object_t *)(a2 + 80));
      *(_OWORD *)(v11 + 7) = *(_OWORD *)(a2 + 72);
      *(void *)(a2 + 88) = v11;
    }

    v20[0] = 0LL;
    v20[1] = v20;
    v20[2] = 0x2000000000LL;
    v20[3] = &_dispatch_data_empty;
    v18[0] = 0LL;
    v18[1] = v18;
    v18[2] = 0x2000000000LL;
    int v19 = 0;
    int v12 = *(dispatch_queue_s **)(a2 + 64);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 0x40000000LL;
    v17[2] = __dispatch_read_block_invoke_3;
    v17[3] = &unk_59470;
    uint64_t v13 = *(void *)(a1 + 40);
    v17[4] = *(void *)(a1 + 32);
    v17[5] = v20;
    v17[6] = v18;
    v17[7] = v13;
    dispatch_channel_async(v12, v17);
    uint64_t v14 = *(void *)(a1 + 48);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 0x40000000LL;
    v16[2] = __dispatch_read_block_invoke_5;
    v16[3] = &unk_59498;
    v16[4] = v20;
    v16[5] = v18;
    uint64_t v15 = _dispatch_operation_create(0, (uint64_t)v11, 0LL, v14, &_dispatch_data_empty, (uint64_t)&off_65340, v16);
    if (v15) {
      _dispatch_operation_enqueue(v15, 0, &_dispatch_data_empty);
    }
    _Block_object_dispose(v18, 8);
    _Block_object_dispose(v20, 8);
  }

uint64_t __dispatch_read_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void, dispatch_data_s *, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  &_dispatch_data_empty,  *(unsigned int *)(a1 + 40));
}

unsigned int *__dispatch_read_block_invoke_3(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = __dispatch_read_block_invoke_4;
  block[3] = &unk_59448;
  __int128 v8 = *(_OWORD *)(a1 + 32);
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 48);
  dispatch_channel_async(v2, block);
  dispatch_fd_t result = *(unsigned int **)(a1 + 56);
  if (result[2] != 0x7FFFFFFF)
  {
    uint64_t v5 = result + 2;
    do
      int v6 = __ldxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (v6 <= 1)
    {
      if (v6 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      return (unsigned int *)_os_object_dispose(result, v3);
    }
  }

  return result;
}

void __dispatch_read_block_invoke_4(uint64_t a1)
{
}

void __dispatch_read_block_invoke_5(uint64_t a1, int a2, dispatch_data_t data2, int a4)
{
  if (data2)
  {
    dispatch_data_t concat = dispatch_data_create_concat(*(dispatch_data_t *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL), data2);
    _dispatch_objc_release(*(id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL));
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = concat;
  }

  if (a2) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = a4;
  }
}

void dispatch_read_f(dispatch_fd_t a1, size_t a2, dispatch_queue_s *a3, uint64_t a4, uint64_t a5)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000LL;
  void v5[2] = __dispatch_read_f_block_invoke;
  v5[3] = &__block_descriptor_tmp_35;
  v5[4] = a5;
  v5[5] = a4;
  dispatch_read(a1, a2, a3, v5);
}

uint64_t __dispatch_read_f_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 40));
}

void dispatch_write(dispatch_fd_t fd, dispatch_data_t data, dispatch_queue_t queue, void *handler)
{
  if (*((_DWORD *)queue + 2) != 0x7FFFFFFF)
  {
    __int128 v8 = (unsigned int *)((char *)queue + 8);
    do
      int v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    if (v9 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 0x40000000LL;
  v10[2] = __dispatch_write_block_invoke;
  v10[3] = &unk_595A8;
  void v10[4] = handler;
  v10[5] = queue;
  dispatch_fd_t v11 = fd;
  v10[6] = data;
  _dispatch_fd_entry_init_async(fd, (uint64_t)v10);
}

void __dispatch_write_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 24);
  if (v3)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000LL;
    block[2] = __dispatch_write_block_invoke_2;
    block[3] = &unk_59508;
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v4 = *(dispatch_queue_s **)(a1 + 40);
    void block[4] = v5;
    int v23 = v3;
    dispatch_channel_async(v4, block);
    dispatch_fd_t v7 = *(unsigned int **)(a1 + 40);
    if (v7[2] != 0x7FFFFFFF)
    {
      __int128 v8 = v7 + 2;
      do
        int v9 = __ldxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (v9 <= 1)
      {
        if (v9 != 1) {
          _os_object_allows_weak_reference_cold_1();
        }
        _os_object_dispose(v7, v6);
      }
    }
  }

  else
  {
    dispatch_fd_t v11 = *(void **)(a2 + 88);
    if (!v11)
    {
      dispatch_fd_t v11 = _dispatch_io_create(0LL);
      *((_DWORD *)v11 + 3_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = *(_DWORD *)(a1 + 56);
      *((_DWORD *)v11 + 32) = *(_DWORD *)(a1 + 56);
      v11[14] = a2;
      dispatch_retain(*(dispatch_object_t *)(a2 + 72));
      dispatch_retain(*(dispatch_object_t *)(a2 + 80));
      *(_OWORD *)(v11 + 7) = *(_OWORD *)(a2 + 72);
      *(void *)(a2 + 88) = v11;
    }

    v21[0] = 0LL;
    v21[1] = v21;
    v21[2] = 0x2000000000LL;
    v21[3] = 0LL;
    v19[0] = 0LL;
    v19[1] = v19;
    v19[2] = 0x2000000000LL;
    int v20 = 0;
    int v12 = *(dispatch_queue_s **)(a2 + 64);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 0x40000000LL;
    v18[2] = __dispatch_write_block_invoke_3;
    void v18[3] = &unk_59558;
    uint64_t v13 = *(void *)(a1 + 40);
    v18[4] = *(void *)(a1 + 32);
    v18[5] = v21;
    v18[6] = v19;
    v18[7] = v13;
    dispatch_channel_async(v12, v18);
    uint64_t v14 = *(dispatch_data_s **)(a1 + 48);
    size_t size = dispatch_data_get_size(v14);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 0x40000000LL;
    v17[2] = __dispatch_write_block_invoke_5;
    v17[3] = &unk_59580;
    v17[4] = v21;
    v17[5] = v19;
    uint64_t v16 = _dispatch_operation_create(1, (uint64_t)v11, 0LL, size, v14, (uint64_t)&off_65340, v17);
    if (v16) {
      _dispatch_operation_enqueue(v16, 1u, *(id *)(a1 + 48));
    }
    _dispatch_objc_release(*(id *)(a1 + 48));
    _Block_object_dispose(v19, 8);
    _Block_object_dispose(v21, 8);
  }

uint64_t __dispatch_write_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  0LL,  *(unsigned int *)(a1 + 40));
}

unsigned int *__dispatch_write_block_invoke_3(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = __dispatch_write_block_invoke_4;
  block[3] = &unk_59530;
  __int128 v8 = *(_OWORD *)(a1 + 32);
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 48);
  dispatch_channel_async(v2, block);
  dispatch_fd_t result = *(unsigned int **)(a1 + 56);
  if (result[2] != 0x7FFFFFFF)
  {
    uint64_t v5 = result + 2;
    do
      int v6 = __ldxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (v6 <= 1)
    {
      if (v6 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      return (unsigned int *)_os_object_dispose(result, v3);
    }
  }

  return result;
}

void __dispatch_write_block_invoke_4(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  if (v2) {
    _dispatch_objc_release(v2);
  }
}

id __dispatch_write_block_invoke_5(id result, int a2, id a3, int a4)
{
  if (a2)
  {
    uint64_t v6 = (uint64_t)result;
    if (a3)
    {
      dispatch_fd_t result = _dispatch_objc_retain(a3);
      *(void *)(*(void *)(*(void *)(v6 + 32) + 8LL) + 24LL) = a3;
    }

    *(_DWORD *)(*(void *)(*(void *)(v6 + 40) + 8LL) + 24LL) = a4;
  }

  return result;
}

void dispatch_write_f(dispatch_fd_t a1, dispatch_data_s *a2, dispatch_queue_s *a3, uint64_t a4, uint64_t a5)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000LL;
  void v5[2] = __dispatch_write_f_block_invoke;
  v5[3] = &__block_descriptor_tmp_41;
  v5[4] = a5;
  v5[5] = a4;
  dispatch_write(a1, a2, a3, v5);
}

uint64_t __dispatch_write_f_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 40));
}

void _dispatch_operation_dispose(uint64_t a1, const char *a2)
{
  if (*(void *)(a1 + 144))
  {
    _dispatch_operation_deliver_data(a1, 2);
    dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 144) + 80LL));
    dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 144) + 64LL));
  }

  int v3 = *(unsigned int **)(a1 + 136);
  if (v3)
  {
    if (v3[2] != 0x7FFFFFFF)
    {
      uint64_t v4 = v3 + 2;
      do
        int v5 = __ldxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (v5 <= 1)
      {
        if (v5 != 1) {
          _os_object_allows_weak_reference_cold_1();
        }
        _os_object_dispose(v3, a2);
      }
    }
  }

  uint64_t v6 = *(dispatch_object_s **)(a1 + 152);
  if (v6) {
    dispatch_release(v6);
  }
  dispatch_fd_t v7 = *(void **)(a1 + 176);
  if (v7 && !*(_DWORD *)(a1 + 56)) {
    free(v7);
  }
  __int128 v8 = *(void **)(a1 + 224);
  if (v8) {
    _dispatch_objc_release(v8);
  }
  uint64_t v9 = *(void **)(a1 + 232);
  if (v9) {
    _dispatch_objc_release(v9);
  }
  int v10 = *(dispatch_object_s **)(a1 + 48);
  if (v10) {
    dispatch_release(v10);
  }
  _Block_release(*(const void **)(a1 + 128));
}

void _dispatch_operation_deliver_data(uint64_t a1, int a2)
{
  size_t v4 = *(void *)(a1 + 200);
  size_t v5 = v4 + *(void *)(a1 + 208);
  if ((a2 & 3) != 0)
  {
    *(_DWORD *)(a1 + 184) = 0;
LABEL_7:
    int v8 = *(_DWORD *)(a1 + 120);
    if (v8)
    {
LABEL_11:
      int v7 = 1;
      goto LABEL_12;
    }

    if ((*(_BYTE *)(*(void *)(a1 + 136) + 120LL) & 2) != 0)
    {
      int v8 = 89;
      *(_DWORD *)(a1 + 12_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = 89;
      goto LABEL_11;
    }

void _dispatch_disk_dispose(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 112);
  if (v1) {
    *(void *)(v1 + 12_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = *(void *)(a1 + 120);
  }
  **(void **)(a1 + 12_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v1;
  dispatch_release(*(dispatch_object_t *)(a1 + 72));
}

unsigned int *___dispatch_io_init_block_invoke(uint64_t a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000LL;
  void v7[2] = ___dispatch_io_init_block_invoke_2;
  v7[3] = &unk_595F0;
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 40);
  v7[4] = *(void *)(a1 + 32);
  int v8 = *(_DWORD *)(a1 + 48);
  dispatch_channel_async(v2, v7);
  dispatch_fd_t result = *(unsigned int **)(a1 + 40);
  if (result[2] != 0x7FFFFFFF)
  {
    size_t v5 = result + 2;
    do
      int v6 = __ldxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (v6 <= 1)
    {
      if (v6 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      return (unsigned int *)_os_object_dispose(result, v3);
    }
  }

  return result;
}

uint64_t ___dispatch_io_init_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(unsigned int *)(a1 + 40));
}

void ___dispatch_io_stop_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(dispatch_queue_s **)(v1 + 56);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = ___dispatch_io_stop_block_invoke_2;
  block[3] = &__block_descriptor_tmp_53;
  void block[4] = v1;
  dispatch_channel_async(v2, block);
}

unsigned int *___dispatch_io_stop_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 112);
  if (v3)
  {
    _dispatch_fd_entry_cleanup_operations(*(void *)(v2 + 112), v2);
    uint64_t v4 = *(void *)(a1 + 32);
    if ((*(_BYTE *)(v4 + 120) & 1) == 0)
    {
      size_t v5 = *(void **)(v3 + 8);
      if (v5)
      {
        *size_t v5 = 0LL;
        uint64_t v4 = *(void *)(a1 + 32);
      }

      *(void *)(v4 + 112) = 0LL;
      dispatch_resume(*(dispatch_object_t *)(v3 + 64));
    }
  }

  else if (*(_DWORD *)(v2 + 124) != -1)
  {
    if (*(_DWORD *)(v2 + 8) != 0x7FFFFFFF)
    {
      int v6 = (unsigned int *)(v2 + 8);
      do
        int v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
      if (v7 < 1) {
        dispatch_set_target_queue_cold_2();
      }
      uint64_t v2 = *(void *)(a1 + 32);
    }

    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000LL;
    block[2] = ___dispatch_io_stop_block_invoke_3;
    block[3] = &__block_descriptor_tmp_52;
    void block[4] = v2;
    dispatch_channel_async((dispatch_queue_t)_dispatch_io_fds_lockq, block);
  }

  dispatch_fd_t result = *(unsigned int **)(a1 + 32);
  if (result[2] != 0x7FFFFFFF)
  {
    int v9 = result + 2;
    do
      int v10 = __ldxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (v10 <= 1)
    {
      if (v10 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      return (unsigned int *)_os_object_dispose(result, (const char *)v2);
    }
  }

  return result;
}

void _dispatch_fd_entry_cleanup_operations(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4)
  {
    if (a2 && *(_DWORD *)(a2 + 8) != 0x7FFFFFFF)
    {
      size_t v5 = (unsigned int *)(a2 + 8);
      do
        int v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
      if (v6 <= 0) {
        dispatch_set_target_queue_cold_2();
      }
    }

    dispatch_suspend(*(dispatch_object_t *)(a1 + 64));
    int v7 = *(dispatch_queue_s **)(*(void *)(a1 + 56) + 72LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000LL;
    block[2] = ___dispatch_fd_entry_cleanup_operations_block_invoke;
    block[3] = &__block_descriptor_tmp_55;
    void block[4] = a1;
    void block[5] = a2;
    dispatch_channel_async(v7, block);
  }

  else
  {
    int v8 = (unsigned int *)(a2 + 8);
    char v9 = 1;
    do
    {
      char v10 = v9;
      dispatch_fd_t v11 = *(dispatch_queue_s ***)(a1 + 8 * v4 + 40);
      if (v11)
      {
        if (a2 && *v8 != 0x7FFFFFFF)
        {
          do
            int v12 = __ldxr(v8);
          while (__stxr(v12 + 1, v8));
          if (v12 <= 0) {
            dispatch_set_target_queue_cold_2();
          }
        }

        dispatch_suspend(*(dispatch_object_t *)(a1 + 64));
        dispatch_data_t v13 = *v11;
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 0x40000000LL;
        v14[2] = ___dispatch_fd_entry_cleanup_operations_block_invoke_2;
        v14[3] = &__block_descriptor_tmp_56;
        v14[4] = v11;
        v14[5] = a2;
        v14[6] = a1;
        dispatch_channel_async(v13, v14);
      }

      char v9 = 0;
      uint64_t v4 = 1LL;
    }

    while ((v10 & 1) != 0);
  }

void ___dispatch_io_stop_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 32);
  unsigned int v3 = v2[31];
  uint64_t v4 = _dispatch_io_fds[v3 & 0x3F];
  if (v4)
  {
    while (*(_DWORD *)v4 != v3)
    {
      uint64_t v4 = *(void *)(v4 + 112);
      if (!v4) {
        goto LABEL_6;
      }
    }

    _dispatch_fd_entry_cleanup_operations(v4, (uint64_t)v2);
    uint64_t v2 = *(unsigned int **)(a1 + 32);
  }

unsigned int *___dispatch_fd_entry_cleanup_operations_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 56);
  uint64_t v4 = *(void *)(v3 + 48);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    do
    {
      while (1)
      {
        uint64_t v6 = v4;
        uint64_t v4 = *(void *)(v4 + 240);
        if (!*(_BYTE *)(v6 + 160) && (!v5 || *(void *)(v6 + 136) == v5)) {
          break;
        }
        if (!v4) {
          goto LABEL_9;
        }
      }

      _dispatch_disk_complete_operation(v3, v6);
    }

    while (v4);
LABEL_9:
    uint64_t v2 = *(void *)(a1 + 32);
  }

  dispatch_resume(*(dispatch_object_t *)(v2 + 64));
  dispatch_fd_t result = *(unsigned int **)(a1 + 40);
  if (result)
  {
    if (result[2] != 0x7FFFFFFF)
    {
      char v9 = result + 2;
      do
        int v10 = __ldxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (v10 <= 1)
      {
        if (v10 != 1) {
          _os_object_allows_weak_reference_cold_1();
        }
        return (unsigned int *)_os_object_dispose(result, v7);
      }
    }
  }

  return result;
}

unsigned int *___dispatch_fd_entry_cleanup_operations_block_invoke_2(uint64_t *a1)
{
  dispatch_fd_t result = (unsigned int *)a1[5];
  if (result)
  {
    if (result[2] != 0x7FFFFFFF)
    {
      uint64_t v4 = result + 2;
      do
        int v5 = __ldxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (v5 <= 1)
      {
        if (v5 != 1) {
          _os_object_allows_weak_reference_cold_1();
        }
        return (unsigned int *)_os_object_dispose(result, v2);
      }
    }
  }

  return result;
}

void _dispatch_stream_cleanup_operations(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4)
  {
    do
    {
      uint64_t v5 = *(void *)(v4 + 240);
      if (!a2 || *(void *)(v4 + 136) == a2) {
        _dispatch_stream_complete_operation(a1, v4);
      }
      uint64_t v4 = v5;
    }

    while (v5);
  }

  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    do
    {
      uint64_t v7 = *(void *)(v6 + 240);
      if (!a2 || *(void *)(v6 + 136) == a2) {
        _dispatch_stream_complete_operation(a1, v6);
      }
      uint64_t v6 = v7;
    }

    while (v7);
  }

  if (*(_BYTE *)(a1 + 24) && !*(void *)(a1 + 48) && !*(void *)(a1 + 32))
  {
    dispatch_suspend(*(dispatch_object_t *)(a1 + 8));
    *(_BYTE *)(a1 + 24) = 0;
  }

void _dispatch_disk_complete_operation(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 64) == a2) {
    *(void *)(a1 + 64) = **(void **)(*(void *)(a2 + 248) + 8LL);
  }
  if (!*(void *)(a2 + 64))
  {
    uint64_t v3 = *(void **)(a2 + 256);
    uint64_t v4 = *(void **)(a2 + 264);
    if (v3)
    {
      v3[33] = v4;
      **(void **)(a2 + 264) = v3;
      v3[30] = 0LL;
      uint64_t v5 = *(void **)(a1 + 56);
      v3[31] = v5;
      *uint64_t v5 = v3;
      *(void *)(a1 + 56) = v3 + 30;
    }

    else
    {
      *(void *)(*(void *)(a2 + 144) + 104LL) = v4;
      void *v4 = 0LL;
    }
  }

  uint64_t v6 = *(void *)(a2 + 240);
  uint64_t v7 = *(void **)(a2 + 248);
  if (v6)
  {
    *(void *)(v6 + 248) = v7;
    uint64_t v7 = *(void **)(a2 + 248);
  }

  else
  {
    *(void *)(a1 + 56) = v7;
  }

  *uint64_t v7 = v6;
  int v8 = *(dispatch_source_s **)(a2 + 152);
  if (v8) {
    dispatch_source_cancel(v8);
  }
  if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF)
  {
    char v9 = (unsigned int *)(a2 + 8);
    do
      int v10 = __ldxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (v10 <= 1)
    {
      if (v10 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      _os_object_dispose((void *)a2, (const char *)a2);
    }
  }

void _dispatch_stream_complete_operation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 240);
  if (v3) {
    uint64_t v4 = (void *)(v3 + 248);
  }
  else {
    uint64_t v4 = (void *)(a1 + 16LL * *(void *)(a2 + 64) + 40);
  }
  void *v4 = *(void *)(a2 + 248);
  **(void **)(a2 + 248) = v3;
  if (*(void *)(a1 + 16) == a2) {
    *(void *)(a1 + 16) = 0LL;
  }
  uint64_t v5 = *(dispatch_source_s **)(a2 + 152);
  if (v5) {
    dispatch_source_cancel(v5);
  }
  if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF)
  {
    uint64_t v6 = (unsigned int *)(a2 + 8);
    do
      int v7 = __ldxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (v7 <= 1)
    {
      if (v7 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      _os_object_dispose((void *)a2, (const char *)a2);
    }
  }

unsigned int *___dispatch_operation_create_block_invoke(uint64_t a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000LL;
  void v7[2] = ___dispatch_operation_create_block_invoke_2;
  v7[3] = &unk_596E0;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v2 = *(dispatch_queue_s **)(a1 + 40);
  v7[4] = *(void *)(a1 + 32);
  __int128 v8 = *(_OWORD *)(a1 + 48);
  dispatch_channel_async(v2, v7);
  dispatch_fd_t result = *(unsigned int **)(a1 + 40);
  if (result[2] != 0x7FFFFFFF)
  {
    uint64_t v5 = result + 2;
    do
      int v6 = __ldxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (v6 <= 1)
    {
      if (v6 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      return (unsigned int *)_os_object_dispose(result, v3);
    }
  }

  return result;
}

void ___dispatch_operation_create_block_invoke_2(uint64_t a1)
{
  uint64_t v3 = *(unsigned int **)(a1 + 48);
  if (v3[2] != 0x7FFFFFFF)
  {
    uint64_t v4 = v3 + 2;
    do
      int v5 = __ldxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (v5 <= 1)
    {
      if (v5 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      _os_object_dispose(v3, v2);
    }
  }

  _dispatch_objc_release(*(id *)(a1 + 40));
}

void ___dispatch_operation_enqueue_block_invoke(uint64_t a1)
{
}

void ___dispatch_operation_enqueue_block_invoke_2(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  if (_dispatch_operation_should_enqueue((uint64_t)v2, *(dispatch_queue_s **)v3, *(id *)(a1 + 48)))
  {
    if (*(void *)(v3 + 48)) {
      BOOL v4 = 1;
    }
    else {
      BOOL v4 = *(void *)(v3 + 32) != 0LL;
    }
    v2[30] = 0LL;
    uint64_t v5 = v3 + 16LL * v2[8];
    v2[31] = *(void *)(v5 + 40);
    **(void **)(v5 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v2;
    *(void *)(v5 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v2 + 30;
    if (!v4) {
      dispatch_channel_async_f( *(dispatch_queue_t *)v3,  *(void **)v3,  (dispatch_function_t)_dispatch_stream_queue_handler);
    }
  }

  _dispatch_objc_release(*(id *)(a1 + 48));
}

void ___dispatch_operation_enqueue_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  if (_dispatch_operation_should_enqueue((uint64_t)v3, *(dispatch_queue_s **)(v2 + 72), *(id *)(a1 + 48)))
  {
    if (v3[8])
    {
      v3[30] = 0LL;
      BOOL v4 = *(void **)(v2 + 56);
      v3[31] = v4;
      void *v4 = v3;
      *(void *)(v2 + 56) = v3 + 30;
    }

    else
    {
      uint64_t v5 = v3[18];
      if (!*(void *)(v5 + 96))
      {
        v3[30] = 0LL;
        int v6 = *(void **)(v2 + 56);
        v3[31] = v6;
        void *v6 = v3;
        *(void *)(v2 + 56) = v3 + 30;
        uint64_t v5 = v3[18];
      }

      int v7 = *(void **)(v5 + 104);
      v3[32] = 0LL;
      v3[33] = v7;
      *int v7 = v3;
      *(void *)(v3[18] + 104LL) = v3 + 32;
    }

    _dispatch_disk_handler((void *)v2);
  }

  _dispatch_objc_release(*(id *)(a1 + 48));
}

uint64_t _dispatch_operation_should_enqueue(uint64_t a1, dispatch_queue_s *a2, id a3)
{
  *(void *)(a1 + 232) = a3;
  int v7 = *(_DWORD *)(*(void *)(a1 + 136) + 120LL);
  if ((v7 & 3) != 0)
  {
    if ((v7 & 2) != 0)
    {
      int v8 = 89;
      goto LABEL_5;
    }
  }

  else
  {
    int v8 = *(_DWORD *)(*(void *)(a1 + 144) + 24LL);
    if (v8)
    {
LABEL_5:
      *(_DWORD *)(a1 + 12_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v8;
      if (*(_DWORD *)(a1 + 8) != 0x7FFFFFFF)
      {
        uint64_t v9 = (unsigned int *)(a1 + 8);
        do
          int v10 = __ldxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (v10 <= 1)
        {
          if (v10 != 1) {
            _os_object_allows_weak_reference_cold_1();
          }
          _os_object_dispose((void *)a1, v6);
        }
      }

      return 0LL;
    }
  }

  if (*(void *)(a1 + 88))
  {
    int v12 = *(dispatch_source_s **)(a1 + 152);
    if (!v12)
    {
      int v12 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0LL, 0LL, a2);
      dispatch_time_t v13 = dispatch_time(0LL, *(void *)(a1 + 88));
      dispatch_source_set_timer(v12, v13, *(void *)(a1 + 88), 0LL);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 0x40000000LL;
      v14[2] = ___dispatch_operation_timer_block_invoke;
      v14[3] = &__block_descriptor_tmp_63;
      v14[4] = v12;
      v14[5] = a1;
      dispatch_source_set_event_handler(v12, v14);
      *(void *)(a1 + 152) = v12;
    }

    dispatch_resume(v12);
  }

  return 1LL;
}

void _dispatch_stream_queue_handler(dispatch_object_s *a1)
{
  char context = dispatch_get_context(a1);
  if (context) {
    _dispatch_stream_handler((uint64_t)context);
  }
}

void ___dispatch_operation_timer_block_invoke(uint64_t a1)
{
  if (!dispatch_source_testcancel(*(dispatch_source_t *)(a1 + 32)))
  {
    uint64_t v2 = *(void *)(a1 + 40);
    uint64_t v3 = *(void *)(v2 + 96) & 1LL;
    if (*(_BYTE *)(v2 + 160)) {
      BOOL v4 = (*(void *)(v2 + 96) & 1LL) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4) {
      _dispatch_operation_deliver_data(v2, v3);
    }
    else {
      *(_DWORD *)(v2 + 184) = v3;
    }
  }

void _dispatch_stream_handler(uint64_t a1)
{
  while (1)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 64);
      if (v3)
      {
        if (v3 != 1) {
          return;
        }
        uint64_t v2 = *(void *)(v2 + 240);
        if (!v2)
        {
          uint64_t v2 = *(void *)(a1 + 48);
          if (!v2) {
            return;
          }
        }
      }
    }

    else
    {
      uint64_t v4 = *(void *)(a1 + 32);
      if (!(*(void *)(a1 + 48) | v4)) {
        return;
      }
      uint64_t v2 = v4 ? *(void *)(a1 + 32) : *(void *)(a1 + 48);
      if (!v2) {
        return;
      }
    }

    int v5 = *(_DWORD *)(*(void *)(v2 + 136) + 120LL);
    if ((v5 & 3) != 0) {
      break;
    }
    uint64_t v7 = *(void *)(v2 + 144);
    int v6 = *(_DWORD *)(v7 + 24);
    if (!v6) {
      goto LABEL_18;
    }
LABEL_16:
    *(_DWORD *)(v2 + 12_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v6;
    _dispatch_stream_complete_operation(a1, v2);
  }

  if ((v5 & 2) != 0)
  {
    int v6 = 89;
    goto LABEL_16;
  }

  uint64_t v7 = *(void *)(v2 + 144);
LABEL_18:
  *(void *)(a1 + 16) = v2;
  dispatch_suspend(*(dispatch_object_t *)(v7 + 64));
  if (*(void *)(v2 + 216)) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = byte_61190 == 0;
  }
  if (!v8) {
    _dispatch_operation_deliver_data(v2, 1);
  }
  switch(_dispatch_operation_perform(v2))
  {
    case 1u:
      goto LABEL_26;
    case 2u:
      _dispatch_operation_deliver_data(v2, 0);
      goto LABEL_27;
    case 3u:
      _dispatch_operation_deliver_data(v2, 9);
LABEL_26:
      _dispatch_stream_complete_operation(a1, v2);
LABEL_27:
      if (*(void *)(a1 + 48) || *(void *)(a1 + 32)) {
        dispatch_channel_async_f( *(dispatch_queue_t *)a1,  *(void **)a1,  (dispatch_function_t)_dispatch_stream_queue_handler);
      }
      goto LABEL_43;
    case 4u:
      _dispatch_stream_complete_operation(a1, v2);
      goto LABEL_31;
    case 5u:
LABEL_31:
      if (!*(void *)(a1 + 48) && !*(void *)(a1 + 32)) {
        goto LABEL_43;
      }
      *(_BYTE *)(a1 + 24) = 1;
      dispatch_source_t v9 = *(dispatch_source_t *)(a1 + 8);
      if (v9) {
        goto LABEL_42;
      }
      int v10 = *(_DWORD *)(v2 + 56);
      if (!v10)
      {
        dispatch_fd_t v11 = &_dispatch_source_type_read;
        goto LABEL_40;
      }

      if (v10 == 1)
      {
        dispatch_fd_t v11 = &_dispatch_source_type_write;
LABEL_40:
        dispatch_source_t v9 = dispatch_source_create((dispatch_source_type_t)v11, **(int **)(v2 + 144), 0LL, *(dispatch_queue_t *)a1);
        dispatch_set_context(v9, (void *)a1);
        dispatch_source_set_event_handler_f(v9, (dispatch_function_t)_dispatch_stream_source_handler);
        dispatch_time_t v13 = *(void (**)(uint64_t))(*(void *)(v2 + 144) + 64LL);
        v15[0] = (void (*)(uint64_t))_NSConcreteStackBlock;
        v15[1] = (void (*)(uint64_t))0x40000000;
        void v15[2] = ___dispatch_stream_source_block_invoke;
        v15[3] = (void (*)(uint64_t))&__block_descriptor_tmp_67;
        v15[4] = v13;
        dispatch_source_set_mandatory_cancel_handler((uint64_t)v9, v15);
        *(void *)(a1 + 8) = v9;
        goto LABEL_42;
      }

      dispatch_source_t v9 = 0LL;
LABEL_42:
      dispatch_resume(v9);
LABEL_43:
      dispatch_resume(*(dispatch_object_t *)(v7 + 64));
      return;
    case 6u:
      _dispatch_stream_cleanup_operations(a1, *(void *)(v2 + 136));
      goto LABEL_43;
    case 7u:
      dispatch_suspend(*(dispatch_object_t *)(v7 + 64));
      int v12 = *(dispatch_queue_s **)(v7 + 72);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 0x40000000LL;
      v14[2] = ___dispatch_stream_handler_block_invoke;
      v14[3] = &__block_descriptor_tmp_64;
      v14[4] = v7;
      dispatch_channel_async(v12, v14);
      goto LABEL_43;
    default:
      goto LABEL_43;
  }

uint64_t _dispatch_operation_perform(uint64_t a1)
{
  if (a1)
  {
    int v2 = *(_DWORD *)(*(void *)(a1 + 136) + 120LL);
    if ((v2 & 3) == 0)
    {
      uint64_t v3 = (int *)(*(void *)(a1 + 144) + 24LL);
      int v4 = *v3;
      if (*v3) {
        goto LABEL_35;
      }
      goto LABEL_8;
    }
  }

  else
  {
    LOBYTE(v2) = 95;
  }

  if ((v2 & 2) != 0)
  {
    *(_DWORD *)(a1 + 12_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = 89;
    return 6LL;
  }

void ___dispatch_stream_handler_block_invoke(uint64_t a1)
{
}

BOOL ___dispatch_operation_perform_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(v5 + 192);
  unint64_t v7 = v6 + a5;
  if (!v6 || (unint64_t v8 = *(void *)(a1 + 40), v7 <= v8))
  {
    *(void *)(v5 + 192) = v7;
    unint64_t v8 = *(void *)(a1 + 40);
  }

  return v7 < v8;
}

uint64_t _dispatch_stream_source_handler(uint64_t a1)
{
  *(_BYTE *)(a1 + 24) = 0;
  return _dispatch_stream_handler(a1);
}

void ___dispatch_stream_source_block_invoke(uint64_t a1)
{
}

void _dispatch_disk_handler(void *context)
{
  if (!*((_BYTE *)context + 108))
  {
    unint64_t v3 = context[10];
    unint64_t v2 = context[11];
    unint64_t v4 = v2;
    if (v2 <= v3) {
      unint64_t v4 = context[16] + v2;
    }
    if (v3 > v4)
    {
LABEL_33:
      context[10] = v3 % context[16];
      uint64_t v14 = context[v2 + 17];
      if (v14)
      {
        *((_BYTE *)context + 108) = 1;
        dispatch_channel_async_f(*(dispatch_queue_t *)(v14 + 24), context, (dispatch_function_t)_dispatch_disk_perform);
      }

      return;
    }

    while (1)
    {
      unint64_t v5 = v3 % context[16];
      if (context[v5 + 17] || (uint64_t v6 = context[6]) == 0)
      {
LABEL_32:
        unint64_t v2 = context[11];
        goto LABEL_33;
      }

      uint64_t v7 = context[8];
      uint64_t v8 = v7;
      if (v7)
      {
        do
        {
          if (*(void *)(v8 + 240)) {
            uint64_t v8 = *(void *)(v8 + 240);
          }
          else {
            uint64_t v8 = context[6];
          }
          if (*(_BYTE *)(v8 + 160)) {
            BOOL v9 = v8 == v7;
          }
          else {
            BOOL v9 = 1;
          }
        }

        while (!v9);
        if (*(_BYTE *)(v8 + 160)) {
          goto LABEL_32;
        }
      }

      else
      {
        uint64_t v8 = context[6];
        if (*(_BYTE *)(v6 + 160)) {
          goto LABEL_32;
        }
      }

      context[8] = v8;
      int v10 = *(_DWORD *)(*(void *)(v8 + 136) + 120LL);
      if ((v10 & 3) != 0)
      {
        if ((v10 & 2) == 0) {
          goto LABEL_25;
        }
        int v11 = 89;
      }

      else
      {
        int v11 = *(_DWORD *)(*(void *)(v8 + 144) + 24LL);
        if (!v11)
        {
LABEL_25:
          if (*(_DWORD *)(v8 + 8) != 0x7FFFFFFF)
          {
            uint64_t v12 = (unsigned int *)(v8 + 8);
            do
              int v13 = __ldxr(v12);
            while (__stxr(v13 + 1, v12));
            if (v13 < 1) {
              dispatch_set_target_queue_cold_2();
            }
            unint64_t v5 = v3 % context[16];
          }

          context[v5 + 17] = v8;
          *(_BYTE *)(v8 + 16_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = 1;
          ++v3;
          goto LABEL_31;
        }
      }

      *(_DWORD *)(v8 + 12_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v11;
      _dispatch_disk_complete_operation((uint64_t)context, v8);
LABEL_31:
      if (v3 > v4) {
        goto LABEL_32;
      }
    }
  }

void _dispatch_disk_perform(void *a1)
{
  uint64_t v2 = dispatch_io_defaults;
  unint64_t v3 = a1[12];
  unint64_t v4 = a1[10];
  if (v4 <= v3) {
    v4 += a1[16];
  }
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    unint64_t v6 = v3 % a1[16];
    uint64_t v7 = a1[v6 + 17];
    if (!v7) {
      break;
    }
    if (*(_DWORD *)(v7 + 56) != 1)
    {
      uint64_t v8 = *(_DWORD **)(v7 + 144);
      if (*v8 != -1 || !_dispatch_fd_entry_open((uint64_t)v8, *(void *)(v7 + 136)))
      {
        if (*(void *)(v7 + 216)) {
          BOOL v9 = 1;
        }
        else {
          BOOL v9 = byte_61190 == 0;
        }
        if (!v9) {
          _dispatch_operation_deliver_data(v7, 1);
        }
        if (v4 - v3 == 1 && !a1[a1[10] + 17]) {
          v2 <<= *(void *)(v7 + 168) == 0LL;
        }
        int v10 = *(_DWORD *)(*(void *)(v7 + 136) + 120LL);
        if ((v10 & 3) != 0)
        {
          if ((v10 & 2) == 0) {
            goto LABEL_23;
          }
        }

        else if (!*(_DWORD *)(*(void *)(v7 + 144) + 24LL))
        {
LABEL_23:
          int64_t v11 = *(void *)(v7 + 168);
          unint64_t v12 = *(void *)(v7 + 104) + v2;
          if (v11 <= (uint64_t)(v12 + *(void *)(v7 + 216) + vm_page_size))
          {
            if (v11)
            {
              int v13 = v2;
            }

            else
            {
              if (v12 % vm_page_size) {
                int v14 = vm_page_size - v12 % vm_page_size;
              }
              else {
                int v14 = 0;
              }
              int v13 = v14 + v2;
              int64_t v11 = *(void *)(v7 + 104);
            }

            int v24 = v13;
            int64_t v23 = v11;
            *(void *)(v7 + 168) = v11 + v13;
            while (fcntl_NOCANCEL(**(unsigned int **)(v7 + 144), 44LL) == -1)
            {
              unsigned int v15 = **(_DWORD **)(StatusReg + 8);
              if (v15 != 4)
              {
                if (v15 > 0x2D || ((1LL << v15) & 0x200008000001LL) == 0) {
                  _dispatch_bug(2308LL, (int)v15);
                }
                break;
              }
            }
          }
        }
      }
    }

    if (++v3 >= v4)
    {
      unint64_t v6 = v3 % a1[16];
      break;
    }
  }

  a1[12] = v6;
  uint64_t v17 = a1[a1[11] + 17];
  int v18 = _dispatch_operation_perform(v17);
  uint64_t v19 = a1[11];
  a1[v19 + 17] = 0LL;
  a1[11] = (unint64_t)(v19 + 1) % a1[16];
  uint64_t v20 = (dispatch_queue_s *)a1[9];
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = ___dispatch_disk_perform_block_invoke;
  block[3] = &__block_descriptor_tmp_68;
  int v22 = v18;
  void block[4] = v17;
  void block[5] = a1;
  dispatch_channel_async(v20, block);
}

unsigned int *___dispatch_disk_perform_block_invoke(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 48))
  {
    case 1:
      goto LABEL_4;
    case 2:
      _dispatch_operation_deliver_data(*(void *)(a1 + 32), 0);
      break;
    case 3:
      _dispatch_operation_deliver_data(*(void *)(a1 + 32), 9);
LABEL_4:
      _dispatch_disk_complete_operation(*(void *)(a1 + 40), *(void *)(a1 + 32));
      break;
    case 6:
      _dispatch_disk_cleanup_operations(*(void *)(a1 + 40), *(void *)(*(void *)(a1 + 32) + 136LL));
      break;
    case 7:
      uint64_t v2 = *(void *)(a1 + 40);
      uint64_t v3 = *(void *)(v2 + 48);
      if (v3)
      {
        do
        {
          uint64_t v4 = *(void *)(v3 + 240);
          _dispatch_disk_complete_operation(v2, v3);
          uint64_t v3 = v4;
        }

        while (v4);
      }

      break;
    default:
      break;
  }

  unint64_t v5 = *(_BYTE **)(a1 + 40);
  *(_BYTE *)(*(void *)(a1 + 32) + 16pthread_sigmask(3, &_dispatch_sigsuspend_mask, 0LL) = 0;
  v5[108] = 0;
  _dispatch_disk_handler(v5);
  dispatch_fd_t result = *(unsigned int **)(a1 + 32);
  if (result[2] != 0x7FFFFFFF)
  {
    uint64_t v8 = result + 2;
    do
      int v9 = __ldxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (v9 <= 1)
    {
      if (v9 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      return (unsigned int *)_os_object_dispose(result, v6);
    }
  }

  return result;
}

void _dispatch_disk_cleanup_operations(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3)
  {
    do
    {
      uint64_t v5 = *(void *)(v3 + 240);
      if (!a2 || *(void *)(v3 + 136) == a2) {
        _dispatch_disk_complete_operation(a1, v3);
      }
      uint64_t v3 = v5;
    }

    while (v5);
  }

void ___dispatch_fd_entry_init_async_block_invoke(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 40);
  uint64_t v3 = (void *)((char *)&_dispatch_io_fds + 8 * (v2 & 0x3F));
  uint64_t v4 = (void *)*v3;
  if (*v3)
  {
    while (*(_DWORD *)v4 != v2)
    {
      uint64_t v4 = (void *)v4[14];
      if (!v4) {
        goto LABEL_4;
      }
    }

    dispatch_suspend((dispatch_object_t)v4[8]);
  }

  else
  {
LABEL_4:
    uint64_t v5 = _dispatch_fd_entry_create((dispatch_queue_s *)_dispatch_io_fds_lockq);
    uint64_t v4 = v5;
    *(_DWORD *)uint64_t v5 = v2;
    unint64_t v6 = (void *)*v3;
    v5[14] = *v3;
    if (v6) {
      v6[15] = v5 + 14;
    }
    void *v3 = v5;
    v5[15] = v3;
    v5[9] = dispatch_queue_create("com.apple.libdispatch-io.barrierq", 0LL);
    v4[10] = dispatch_group_create();
    uint64_t v7 = (dispatch_queue_s *)v4[9];
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000LL;
    block[2] = ___dispatch_fd_entry_create_with_fd_block_invoke;
    block[3] = &__block_descriptor_tmp_72;
    int v16 = v2;
    void block[4] = v4;
    dispatch_channel_async(v7, block);
    uint64_t v8 = (dispatch_queue_s *)v4[8];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 0x40000000LL;
    v14[2] = ___dispatch_fd_entry_create_with_fd_block_invoke_3;
    v14[3] = &__block_descriptor_tmp_74;
    v14[4] = v4;
    dispatch_channel_async(v8, v14);
    int v9 = (dispatch_queue_s *)v4[8];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 0x40000000LL;
    _DWORD v12[2] = ___dispatch_fd_entry_create_with_fd_block_invoke_5;
    v12[3] = &__block_descriptor_tmp_75;
    v12[4] = v4;
    int v13 = v2;
    dispatch_channel_async(v9, v12);
  }

  int v10 = (dispatch_queue_s *)v4[9];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 0x40000000LL;
  v11[2] = ___dispatch_fd_entry_init_async_block_invoke_2;
  v11[3] = &unk_59838;
  v11[4] = *(void *)(a1 + 32);
  void v11[5] = v4;
  dispatch_channel_async(v10, v11);
}

void ___dispatch_fd_entry_init_async_block_invoke_2(uint64_t a1)
{
}

void *_dispatch_fd_entry_create(dispatch_queue_s *a1)
{
  int v2 = _dispatch_calloc(1uLL, 0x80uLL);
  dispatch_queue_t v3 = dispatch_queue_create_with_target_V2("com.apple.libdispatch-io.closeq", 0LL, a1);
  v2[8] = v3;
  dispatch_suspend(v3);
  return v2;
}

void ___dispatch_fd_entry_create_with_fd_block_invoke(uint64_t a1)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (fstat(*(_DWORD *)(a1 + 40), &v22) == -1)
  {
    int v3 = **(_DWORD **)(StatusReg + 8);
    if (v3 != 4)
    {
      if (v3)
      {
        *(_DWORD *)(*(void *)(a1 + 32) + 24LL) = v3;
        return;
      }

      break;
    }
  }

  uint64_t v4 = *(void *)(a1 + 32);
  *(_DWORD *)(v4 + 32) = v22.st_dev;
  *(_WORD *)(v4 + 36) = v22.st_mode;
  unint64_t v5 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    int v6 = fcntl_NOCANCEL(*(unsigned int *)(a1 + 40), 3LL);
    if (v6 != -1) {
      break;
    }
    int v7 = **(_DWORD **)(v5 + 8);
    if (v7 != 4)
    {
      if (v7) {
        _dispatch_bug(1471LL, v7);
      }
      break;
    }
  }

  if ((v22.st_mode & 0xF000) == 0x1000)
  {
    unint64_t v8 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      if (fcntl_NOCANCEL(*(unsigned int *)(a1 + 40), 74LL) != -1)
      {
        unint64_t v11 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        do
        {
          int v12 = fcntl_NOCANCEL(*(unsigned int *)(a1 + 40), 73LL);
          if (v12 != -1)
          {
            int v13 = v12;
            goto LABEL_22;
          }

          int v9 = **(_DWORD **)(v11 + 8);
        }

        while (v9 == 4);
        if (!v9) {
          goto LABEL_21;
        }
        uint64_t v10 = 1484LL;
        goto LABEL_42;
      }

      int v9 = **(_DWORD **)(v8 + 8);
    }

    while (v9 == 4);
    if (!v9) {
      goto LABEL_21;
    }
    uint64_t v10 = 1477LL;
LABEL_42:
    _dispatch_bug(v10, v9);
  }

void ___dispatch_fd_entry_create_with_fd_block_invoke_2(uint64_t a1)
{
}

dispatch_queue_t _dispatch_disk_init(dispatch_queue_t result, int a2)
{
  dispatch_queue_t v3 = result;
  uint64_t v4 = (uint64_t *)((char *)&_dispatch_io_devs + 8 * (a2 & 0x3F));
  uint64_t v5 = *v4;
  if (*v4)
  {
    while (*(_DWORD *)(v5 + 104) != a2)
    {
      uint64_t v5 = *(void *)(v5 + 112);
      if (!v5) {
        goto LABEL_4;
      }
    }

    if (*(_DWORD *)(v5 + 8) != 0x7FFFFFFF)
    {
      unint64_t v8 = (unsigned int *)(v5 + 8);
      do
        int v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      if (v9 <= 0) {
        dispatch_set_target_queue_cold_2();
      }
    }
  }

  else
  {
LABEL_4:
    uint64_t v6 = qword_61188;
    uint64_t v5 = _dispatch_object_alloc(&OBJC_CLASS___OS_dispatch_disk, 8 * qword_61188 + 136);
    *(void *)(v5 + 16) = -1985229329LL;
    *(_DWORD *)(v5 + 12) = 0;
    *(void *)(v5 + 128) = v6;
    *(void *)(v5 + 24) = &off_65340;
    *(_DWORD *)(v5 + 104) = a2;
    *(void *)(v5 + 48) = 0LL;
    *(void *)(v5 + 56) = v5 + 48;
    *(void *)(v5 + 64) = 0LL;
    snprintf(__str, 0x2DuLL, "com.apple.libdispatch-io.deviceq.%d", a2);
    dispatch_fd_t result = dispatch_queue_create(__str, 0LL);
    *(void *)(v5 + 72) = result;
    uint64_t v7 = *v4;
    *(void *)(v5 + 112) = *v4;
    if (v7) {
      *(void *)(v7 + 12_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v5 + 112;
    }
    uint64_t *v4 = v5;
    *(void *)(v5 + 12_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v4;
  }

  *((void *)v3 + 12) = 0LL;
  uint64_t v10 = (char *)v3 + 96;
  *((void *)v10 - 5) = v5;
  *((void *)v10 + _dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = v10;
  return result;
}

void _dispatch_stream_init(uint64_t a1)
{
  uint64_t v2 = 0LL;
  char v3 = 1;
  do
  {
    char v4 = v3;
    uint64_t v5 = _dispatch_calloc(1uLL, 0x40uLL);
    dispatch_queue_t v6 = dispatch_queue_create_with_target_V2("com.apple.libdispatch-io.streamq", 0LL, (dispatch_queue_t)&off_65340);
    *uint64_t v5 = v6;
    dispatch_set_context(v6, v5);
    char v3 = 0;
    void v5[6] = 0LL;
    v5[7] = v5 + 6;
    v5[4] = 0LL;
    v5[5] = v5 + 4;
    *(void *)(a1 + 8 * v2 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v5;
    uint64_t v2 = 1LL;
  }

  while ((v4 & 1) != 0);
}

void ___dispatch_fd_entry_create_with_fd_block_invoke_3(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 56LL);
  if (v2)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000LL;
    block[2] = ___dispatch_fd_entry_create_with_fd_block_invoke_4;
    block[3] = &__block_descriptor_tmp_73;
    void block[4] = v2;
    dispatch_channel_async((dispatch_queue_t)_dispatch_io_devs_lockq, block);
  }

  else
  {
    _dispatch_stream_dispose(*(void *)(a1 + 32), 0);
    _dispatch_stream_dispose(*(void *)(a1 + 32), 1u);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(v3 + 112);
  if (v4)
  {
    *(void *)(v4 + 12_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = *(void *)(v3 + 120);
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(v3 + 112);
  }

  **(void **)(v3 + 12_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v4;
}

void _dispatch_stream_dispose(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 8LL * a2 + 40);
  if (v2)
  {
    if (*(void *)(v2 + 8))
    {
      dispatch_suspend(*(dispatch_object_t *)(a1 + 64));
      dispatch_source_cancel(*(dispatch_source_t *)(v2 + 8));
      dispatch_resume(*(dispatch_object_t *)(v2 + 8));
      dispatch_release(*(dispatch_object_t *)(v2 + 8));
    }

    dispatch_set_context(*(dispatch_object_t *)v2, 0LL);
    dispatch_release(*(dispatch_object_t *)v2);
    free((void *)v2);
  }

unsigned int *___dispatch_fd_entry_create_with_fd_block_invoke_4(uint64_t a1, const char *a2)
{
  dispatch_fd_t result = *(unsigned int **)(a1 + 32);
  if (result[2] != 0x7FFFFFFF)
  {
    uint64_t v3 = result + 2;
    do
      int v4 = __ldxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (v4 <= 1)
    {
      if (v4 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      return (unsigned int *)_os_object_dispose(result, a2);
    }
  }

  return result;
}

void ___dispatch_fd_entry_create_with_fd_block_invoke_5(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 16) != -1)
  {
    unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v2 = *(void *)(a1 + 32);
  }

  if (*(_DWORD *)(v2 + 20) != -1)
  {
    unint64_t v4 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    uint64_t v2 = *(void *)(a1 + 32);
  }

  uint64_t v5 = *(void *)(v2 + 88);
  if (v5)
  {
    *(void *)(v5 + 112) = 0LL;
    dispatch_release(*(dispatch_object_t *)(*(void *)(a1 + 32) + 88LL));
    uint64_t v2 = *(void *)(a1 + 32);
  }

  free((void *)v2);
}

uint64_t ___dispatch_fd_entry_create_with_path_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 32);
  if (!*((void *)v2 + 7))
  {
    _dispatch_stream_dispose(*(void *)(a1 + 32), 0);
    _dispatch_stream_dispose(*(void *)(a1 + 32), 1u);
    uint64_t v2 = *(unsigned int **)(a1 + 32);
  }

  uint64_t result = *v2;
  if ((_DWORD)result != -1)
  {
    if (v2[7])
    {
      uint64_t v5 = v2;
      uint64_t result = guarded_close_np();
    }

    else
    {
      uint64_t result = close_NOCANCEL();
    }
  }

  uint64_t v4 = **(void **)(*(void *)(a1 + 32) + 8LL);
  if (v4) {
    *(void *)(v4 + 112) = 0LL;
  }
  return result;
}

void ___dispatch_fd_entry_create_with_path_block_invoke_2(uint64_t a1)
{
}

void ___dispatch_operation_deliver_data_block_invoke(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 64) & 2) != 0
    && !*(_DWORD *)(a1 + 68)
    && *(_DWORD *)(a1 + 72)
    && dispatch_data_get_size(*(dispatch_data_t *)(a1 + 40)))
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  uint64_t v3 = *(unsigned int **)(a1 + 48);
  if (v3[2] != 0x7FFFFFFF)
  {
    uint64_t v4 = v3 + 2;
    do
      int v5 = __ldxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (v5 <= 1)
    {
      if (v5 != 1) {
        _os_object_allows_weak_reference_cold_1();
      }
      _os_object_dispose(v3, v2);
    }
  }

  dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 56) + 64LL));
  _dispatch_objc_release(*(id *)(a1 + 40));
}

  ;
}

uint64_t OUTLINED_FUNCTION_1_5(char *a1, uint64_t a2, const char *a3)
{
  return snprintf(a1, v3, a3);
}

const char *OUTLINED_FUNCTION_2_3(id a1)
{
  return object_getClassName(a1);
}

size_t OUTLINED_FUNCTION_3_4()
{
  return _dispatch_object_debug_attr(v2, (char *)(v1 + v3), v0 - v3);
}

  ;
}

uint64_t OUTLINED_FUNCTION_5_1()
{
  return v0;
}

void _dispatch_data_init_with_bytes( void *a1, mach_vm_address_t a2, mach_vm_size_t a3, Block_layout *aBlock)
{
  mach_vm_size_t v4 = a3;
  mach_vm_address_t v5 = a2;
  if (!a2 || !a3)
  {
    if (aBlock)
    {
      uint64_t v7 = (Block_layout *)_dispatch_Block_copy(aBlock);
      _dispatch_data_destroy_buffer(v5, v4, 0LL, v7);
    }

    mach_vm_address_t v5 = 0LL;
    mach_vm_size_t v4 = 0LL;
    aBlock = &__block_literal_global_27;
  }

  a1[5] = aBlock;
  a1[6] = v4;
  a1[4] = v5;
}

void _dispatch_data_destroy_buffer( mach_vm_address_t address, mach_vm_size_t size, dispatch_queue_s *a3, Block_layout *context)
{
  if (&__block_literal_global == context)
  {
    free((void *)address);
  }

  else if (&__block_literal_global_27 != context)
  {
    if (&__block_literal_global_30 == context)
    {
      mach_vm_deallocate(mach_task_self_, address, size);
    }

    else
    {
      if (a3) {
        mach_vm_size_t v4 = a3;
      }
      else {
        mach_vm_size_t v4 = (dispatch_queue_s *)&off_65340;
      }
      dispatch_channel_async_f(v4, context, (dispatch_function_t)_dispatch_call_block_and_release);
    }
  }

dispatch_data_t dispatch_data_create( const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  uint64_t v7 = buffer;
  if (buffer && size)
  {
    if (destructor)
    {
      if (&__block_literal_global_33 != destructor)
      {
        uint64_t v8 = _dispatch_object_alloc_bridged(&OBJC_CLASS___OS_dispatch_data, 64LL);
        *(void *)(v8 + 56) = 0LL;
        int v9 = _dispatch_Block_copy(destructor);
        goto LABEL_16;
      }

      size_t v14 = size + 64;
      if (size < 0xFFFFFFFFFFFFFFC0LL)
      {
        uint64_t v8 = _dispatch_object_alloc_bridged(&OBJC_CLASS___OS_dispatch_data, v14);
        *(void *)(v8 + 56) = 0LL;
      }

      else
      {
        uint64_t v8 = 0LL;
      }

      int v12 = (const void *)(v8 + 64);
      memcpy((void *)(v8 + 64), v7, size);
      int v13 = (const dispatch_block_t *)&_dispatch_data_destructor_none;
    }

    else
    {
      unint64_t v11 = malloc(size);
      if (!v11) {
        return 0LL;
      }
      int v12 = v11;
      memcpy(v11, v7, size);
      uint64_t v8 = _dispatch_object_alloc_bridged(&OBJC_CLASS___OS_dispatch_data, 64LL);
      *(void *)(v8 + 56) = 0LL;
      int v13 = &_dispatch_data_destructor_free;
    }

    int v9 = *v13;
    uint64_t v7 = v12;
LABEL_16:
    *(void *)(v8 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v9;
    *(void *)(v8 + 48) = size;
    *(void *)(v8 + 32) = v7;
    if (queue)
    {
      if (*((_DWORD *)queue + 2) != 0x7FFFFFFF)
      {
        int v15 = (unsigned int *)((char *)queue + 8);
        do
          int v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
        if (v16 <= 0) {
          dispatch_set_target_queue_cold_2();
        }
      }

      *(void *)(v8 + 8) = queue;
    }

    return (dispatch_data_t)v8;
  }

  if (destructor)
  {
    uint64_t v10 = (Block_layout *)_dispatch_Block_copy(destructor);
    _dispatch_data_destroy_buffer((mach_vm_address_t)v7, size, queue, v10);
  }

  return &_dispatch_data_empty;
}

dispatch_data_t dispatch_data_create_f(const void *a1, size_t a2, dispatch_queue_s *a3, Block_layout *a4)
{
  if (a4)
  {
    if (&__block_literal_global != a4
      && &__block_literal_global_27 != a4
      && &__block_literal_global_30 != a4
      && &__block_literal_global_33 != a4)
    {
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 0x40000000LL;
      v8[2] = __dispatch_data_create_f_block_invoke;
      void v8[3] = &__block_descriptor_tmp_2;
      v8[4] = a4;
      v8[5] = a1;
      a4 = (Block_layout *)v8;
    }
  }

  return dispatch_data_create(a1, a2, a3, a4);
}

uint64_t __dispatch_data_create_f_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 40));
}

dispatch_data_s *dispatch_data_create_alloc(unint64_t a1, void *a2)
{
  if (!a1)
  {
    mach_vm_address_t v5 = 0LL;
    uint64_t result = &_dispatch_data_empty;
    if (!a2) {
      return result;
    }
    goto LABEL_6;
  }

  if (a1 < 0xFFFFFFFFFFFFFFC0LL)
  {
    uint64_t result = (dispatch_data_s *)_dispatch_object_alloc_bridged(&OBJC_CLASS___OS_dispatch_data, a1 + 64);
    *((void *)result + 7) = 0LL;
  }

  else
  {
    uint64_t result = 0LL;
  }

  mach_vm_address_t v5 = (char *)result + 64;
  *((void *)result + 5) = &__block_literal_global_27;
  *((void *)result + 6) = a1;
  *((void *)result + 4) = (char *)result + 64;
  if (a2) {
LABEL_6:
  }
    *a2 = v5;
  return result;
}

void _dispatch_data_dispose(uint64_t a1)
{
  if (*(void *)(a1 + 56))
  {
    unint64_t v2 = 0LL;
    uint64_t v3 = (void **)(a1 + 64);
    do
    {
      mach_vm_size_t v4 = *v3;
      v3 += 3;
      _dispatch_objc_release(v4);
      ++v2;
      unint64_t v5 = *(void *)(a1 + 56);
      if (v5 <= 1) {
        unint64_t v5 = 1LL;
      }
    }

    while (v2 < v5);
    free(*(void **)(a1 + 32));
  }

  else
  {
    _dispatch_data_destroy_buffer( *(void *)(a1 + 32),  *(void *)(a1 + 48),  *(dispatch_queue_s **)(a1 + 8),  *(Block_layout **)(a1 + 40));
  }

unsigned int *_dispatch_data_set_target_queue(uint64_t a1, const char *a2)
{
  unint64_t v2 = &off_65340;
  if (a2) {
    unint64_t v2 = (__objc2_class **)a2;
  }
  if (*((_DWORD *)v2 + 2) != 0x7FFFFFFF)
  {
    uint64_t v3 = (unsigned int *)(v2 + 1);
    do
      int v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
    if (v4 <= 0) {
      dispatch_set_target_queue_cold_2();
    }
  }

  unint64_t v5 = (unint64_t *)(a1 + 24);
  do
    uint64_t result = (unsigned int *)__ldxr(v5);
  while (__stlxr((unint64_t)v2, v5));
  if (result)
  {
    if (result[2] != 0x7FFFFFFF)
    {
      uint64_t v7 = result + 2;
      do
        int v8 = __ldxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (v8 <= 1)
      {
        if (v8 != 1) {
          _os_object_allows_weak_reference_cold_1();
        }
        return (unsigned int *)_os_object_dispose(result, a2);
      }
    }
  }

  return result;
}

size_t dispatch_data_get_size(dispatch_data_t data)
{
  return *((void *)data + 6);
}

dispatch_data_t dispatch_data_create_concat(dispatch_data_t data1, dispatch_data_t data2)
{
  dispatch_data_t v2 = data2;
  uint64_t v3 = *((void *)data1 + 6);
  if (!v3) {
    goto LABEL_15;
  }
  uint64_t v5 = *((void *)data2 + 6);
  if (!v5)
  {
    dispatch_data_t v2 = data1;
LABEL_15:
    _dispatch_objc_retain(v2);
    return v2;
  }

  unint64_t v6 = *((void *)data1 + 7);
  if (v6 <= 1) {
    uint64_t v7 = 1LL;
  }
  else {
    uint64_t v7 = *((void *)data1 + 7);
  }
  unint64_t v8 = *((void *)data2 + 7);
  if (v8 <= 1) {
    unint64_t v8 = 1LL;
  }
  uint64_t v9 = 0LL;
  unint64_t v10 = v7 + v8;
  if (!__CFADD__(v7, v8))
  {
    if (is_mul_ok(v10, 0x18uLL) && 24 * v10 < 0xFFFFFFFFFFFFFFC0LL)
    {
      uint64_t v9 = _dispatch_object_alloc_bridged(&OBJC_CLASS___OS_dispatch_data, 24 * v10 + 64);
      *(void *)(v9 + 56) = v10;
      uint64_t v5 = *((void *)v2 + 6);
      uint64_t v3 = *((void *)data1 + 6);
      unint64_t v6 = *((void *)data1 + 7);
    }

    *(void *)(v9 + 48) = v5 + v3;
    if (v6)
    {
      memcpy((void *)(v9 + 64), (char *)data1 + 64, 24 * v6);
    }

    else
    {
      uint64_t v11 = *((void *)data1 + 6);
      *(void *)(v9 + 72) = 0LL;
      *(void *)(v9 + 8_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v11;
      *(void *)(v9 + 64) = data1;
    }

    uint64_t v12 = *((void *)v2 + 7);
    unint64_t v13 = *((void *)data1 + 7);
    if (v13 <= 1) {
      unint64_t v13 = 1LL;
    }
    if (v12)
    {
      memcpy((void *)(v9 + 64 + 24 * v13), (char *)v2 + 64, 24 * v12);
    }

    else
    {
      uint64_t v14 = *((void *)v2 + 6);
      int v15 = (void *)(v9 + 24 * v13);
      v15[9] = 0LL;
      v15[10] = v14;
      v15[8] = v2;
    }

    unint64_t v16 = 0LL;
    uint64_t v17 = 64LL;
    do
    {
      _dispatch_objc_retain(*(id *)(v9 + v17));
      ++v16;
      unint64_t v18 = *(void *)(v9 + 56);
      if (v18 <= 1) {
        unint64_t v18 = 1LL;
      }
      v17 += 24LL;
    }

    while (v16 < v18);
  }

  return (dispatch_data_t)v9;
}

dispatch_data_t dispatch_data_create_subrange(dispatch_data_t data, size_t offset, size_t length)
{
  uint64_t v3 = &_dispatch_data_empty;
  if (!length) {
    return v3;
  }
  dispatch_data_t v5 = data;
  size_t v6 = *((void *)data + 6);
  while (1)
  {
    if (v6 <= offset) {
      return v3;
    }
    size_t v7 = v6 - offset;
    if (v6 - offset >= length)
    {
      size_t v7 = length;
      if (v6 == length)
      {
        uint64_t v3 = v5;
        goto LABEL_18;
      }
    }

    unint64_t v8 = *((void *)v5 + 7);
    if (!v8)
    {
      uint64_t v3 = (dispatch_data_s *)_dispatch_object_alloc_bridged(&OBJC_CLASS___OS_dispatch_data, 88LL);
      *((void *)v3 + 6) = v7;
      *((void *)v3 + 7) = 1LL;
      *((void *)v3 + 9) = offset;
      *((void *)v3 + 1_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v7;
      *((void *)v3 + 8) = v5;
LABEL_18:
      _dispatch_objc_retain(v5);
      return v3;
    }

    uint64_t v9 = 0LL;
    unint64_t v10 = (size_t *)((char *)v5 + 128);
    size_t v11 = offset;
    while (1)
    {
      size_t v12 = *(v10 - 6);
      if (v11 < v12) {
        break;
      }
      ++v9;
      v10 += 3;
      v11 -= v12;
      if (v8 == v9) {
        dispatch_data_create_subrange_cold_1(v8);
      }
    }

    size_t v13 = v11 + v7 - v12;
    if (v11 + v7 > v12) {
      break;
    }
    if (!v7) {
      return v3;
    }
    dispatch_data_t v5 = (dispatch_data_t)*(v10 - 8);
    offset = *(v10 - 7) + v11;
    size_t v6 = *((void *)v5 + 6);
    length = v7;
  }

  uint64_t v14 = v8 - v9;
  if (v7 + offset == v6)
  {
    size_t v13 = 0LL;
    uint64_t v15 = v8 - v9;
  }

  else if (v9 + 1 >= v8)
  {
    uint64_t v15 = 1LL;
  }

  else
  {
    size_t v16 = *(v10 - 3);
    uint64_t v15 = 2LL;
    if (v13 > v16)
    {
      uint64_t v17 = v10;
      do
      {
        if (v14 == v15) {
          dispatch_data_create_subrange_cold_1(v8);
        }
        v13 -= v16;
        ++v15;
        size_t v18 = *v17;
        v17 += 3;
        size_t v16 = v18;
      }

      while (v13 > v18);
    }
  }

  uint64_t v3 = (dispatch_data_s *)_dispatch_object_alloc_bridged(&OBJC_CLASS___OS_dispatch_data, 24 * v15 + 64);
  *((void *)v3 + 6) = v7;
  *((void *)v3 + 7) = v15;
  memcpy((char *)v3 + 64, v10 - 8, 24 * v15);
  if (v11)
  {
    size_t v19 = *((void *)v3 + 10) - v11;
    *((void *)v3 + 9) += v11;
    *((void *)v3 + 1_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v19;
  }

  if (v7 + offset != v6) {
    *((void *)v3 + 3 * v15 + 7) = v13;
  }
  if (v15)
  {
    uint64_t v20 = 64LL;
    do
    {
      _dispatch_objc_retain(*(id *)((char *)v3 + v20));
      v20 += 24LL;
      --v15;
    }

    while (v15);
  }

  return v3;
}

dispatch_data_t dispatch_data_create_map(dispatch_data_t data, const void **buffer_ptr, size_t *size_ptr)
{
  size_t v5 = *((void *)data + 6);
  if (!v5)
  {
    size_t v11 = 0LL;
    size_t v6 = &_dispatch_data_empty;
    if (buffer_ptr) {
      goto LABEL_14;
    }
    goto LABEL_15;
  }

  size_t v6 = data;
  uint64_t v7 = *((void *)data + 7);
  if (v7 == 1)
  {
    dispatch_data_t v9 = (dispatch_data_t)*((void *)data + 8);
    uint64_t v8 = *((void *)data + 9);
    if (!*((void *)v9 + 7)) {
      goto LABEL_4;
    }
  }

  else
  {
    uint64_t v8 = 0LL;
    dispatch_data_t v9 = data;
    if (!v7)
    {
LABEL_4:
      uint64_t v10 = *((void *)v9 + 4);
      goto LABEL_5;
    }
  }

  uint64_t v10 = *((void *)v9 + 4);
  if (v10)
  {
LABEL_5:
    size_t v11 = (const void *)(v10 + v8);
    if (v10 + v8)
    {
      _dispatch_objc_retain(data);
      if (!buffer_ptr) {
        goto LABEL_15;
      }
      goto LABEL_14;
    }
  }

  size_t v12 = _dispatch_data_flatten(data);
  size_t v11 = v12;
  if (v12)
  {
    size_t v6 = dispatch_data_create(v12, v5, 0LL, &__block_literal_global);
    if (!buffer_ptr) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }

  size_t v5 = 0LL;
  size_t v6 = 0LL;
  if (buffer_ptr) {
LABEL_14:
  }
    *buffer_ptr = v11;
LABEL_15:
  if (size_ptr) {
    *size_ptr = v5;
  }
  return v6;
}

void *_dispatch_data_flatten(void *a1)
{
  size_t v2 = a1[6];
  uint64_t v3 = malloc(v2);
  int v4 = v3;
  if (v3)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 0x40000000LL;
    void v6[2] = ___dispatch_data_flatten_block_invoke;
    void v6[3] = &__block_descriptor_tmp_12_0;
    v6[4] = v3;
    if (v2) {
      _dispatch_data_apply(a1, 0LL, 0LL, v2, (uint64_t)v6, (uint64_t)___dispatch_data_flatten_block_invoke);
    }
  }

  return v4;
}

char *dispatch_data_get_flattened_bytes_4libxpc(void *a1)
{
  uint64_t v1 = a1[6];
  if (!v1) {
    return (char *)v1;
  }
  uint64_t v2 = a1[7];
  if (v2 == 1)
  {
    uint64_t v10 = a1 + 8;
    a1 = (void *)a1[8];
    uint64_t v3 = v10[1];
    uint64_t v2 = a1[7];
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  int v4 = a1 + 4;
  if (!v2)
  {
    unint64_t v5 = *v4;
    goto LABEL_6;
  }

  unint64_t v5 = *v4;
  if (*v4)
  {
LABEL_6:
    uint64_t v1 = v5 + v3;
    if (v1) {
      return (char *)v1;
    }
  }

  size_t v6 = (char *)_dispatch_data_flatten(a1);
  if (!v6) {
    return 0LL;
  }
  while (1)
  {
    unint64_t v7 = __ldxr(v4);
    if (v7) {
      break;
    }
    if (!__stlxr((unint64_t)v6, v4))
    {
      char v8 = 1;
      goto LABEL_12;
    }
  }

  char v8 = 0;
  __clrex();
LABEL_12:
  if ((v8 & 1) == 0)
  {
    free(v6);
    size_t v6 = (char *)v7;
  }

  return &v6[v3];
}

uint64_t dispatch_data_apply_f(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1[6];
  if (v3) {
    return _dispatch_data_apply(a1, 0LL, 0LL, v3, a2, a3);
  }
  else {
    return 1LL;
  }
}

uint64_t _dispatch_data_apply(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = a2;
  uint64_t v10 = a1[7];
  if (v10 == 1)
  {
    size_t v12 = (void *)a1[8];
    uint64_t v11 = a1[9];
    if (!v12[7]) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v13 = v12[4];
    if (!v13) {
      goto LABEL_8;
    }
    goto LABEL_4;
  }

  uint64_t v11 = 0LL;
  size_t v12 = a1;
  if (v10) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v13 = v12[4];
LABEL_4:
  uint64_t v14 = v13 + v11;
  if (v14) {
    return _dispatch_data_apply_client_callout(a5, a1, a2, v14 + a3, a4, a6);
  }
LABEL_8:
  size_t v16 = a1 + 10;
  unint64_t v17 = 1LL;
  do
  {
    uint64_t result = _dispatch_data_apply(*(v16 - 2), v8, *(v16 - 1), *v16, a5, a6);
    unint64_t v18 = a1[7];
    if (v18 <= 1) {
      unint64_t v18 = 1LL;
    }
    if (v17 >= v18) {
      break;
    }
    uint64_t v19 = *v16;
    v16 += 3;
    v8 += v19;
    ++v17;
  }

  while ((result & 1) != 0);
  return result;
}

BOOL dispatch_data_apply(dispatch_data_t data, dispatch_data_applier_t applier)
{
  uint64_t v2 = *((void *)data + 6);
  if (v2) {
    return _dispatch_data_apply(data, 0LL, 0LL, v2, (uint64_t)applier, *((void *)applier + 2));
  }
  else {
    return 1;
  }
}

dispatch_data_t dispatch_data_copy_region(dispatch_data_t data, size_t location, size_t *offset_ptr)
{
  size_t v3 = *((void *)data + 6);
  if (v3 <= location)
  {
    *offset_ptr = v3;
    return &_dispatch_data_empty;
  }

  dispatch_data_t v4 = data;
  size_t v5 = 0LL;
  unint64_t v6 = 0LL;
  *offset_ptr = 0LL;
  unint64_t v7 = *((void *)v4 + 6);
LABEL_4:
  if (*((void *)v4 + 6) == v7) {
    uint64_t v8 = (uint64_t)v4;
  }
  else {
    uint64_t v8 = 0LL;
  }
LABEL_7:
  unint64_t v9 = *((void *)v4 + 7);
  if (v9 == 1)
  {
    size_t v16 = (char *)v4 + 64;
    dispatch_data_t v4 = (dispatch_data_t)*((void *)v4 + 8);
    v6 += *((void *)v16 + 1);
    unint64_t v9 = *((void *)v4 + 7);
    if (!v9) {
      goto LABEL_9;
    }
LABEL_24:
    uint64_t v10 = *((void *)v4 + 4);
    if (!v10) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }

  if (v9) {
    goto LABEL_24;
  }
LABEL_9:
  uint64_t v10 = *((void *)v4 + 4);
LABEL_10:
  if (!(v10 + v6))
  {
LABEL_11:
    uint64_t v11 = 0LL;
    if (v9 <= 1) {
      uint64_t v12 = 1LL;
    }
    else {
      uint64_t v12 = v9;
    }
    for (uint64_t i = (unint64_t *)((char *)v4 + 80); ; i += 3)
    {
      unint64_t v14 = *i;
      if (v6 >= *i)
      {
        v6 -= *i;
      }

      else
      {
        unint64_t v7 = v14 - v6;
        size_t v15 = v14 - v6 + v11;
        if (v15 > location)
        {
          dispatch_data_t v4 = (dispatch_data_t)*(i - 2);
          v6 += *(i - 1);
          v5 += v11;
          *offset_ptr = v5;
          location -= v11;
          if (!v6) {
            goto LABEL_4;
          }
          uint64_t v8 = 0LL;
          goto LABEL_7;
        }

        unint64_t v6 = 0LL;
        uint64_t v11 = v15;
      }

      if (!--v12) {
        dispatch_data_copy_region_cold_1(v5, v11);
      }
    }
  }

  if (v8)
  {
    _dispatch_objc_retain((id)v8);
  }

  else
  {
    _dispatch_objc_retain(v4);
    if (v6 || *((void *)v4 + 6) != v7)
    {
      uint64_t v8 = _dispatch_object_alloc_bridged(&OBJC_CLASS___OS_dispatch_data, 88LL);
      *(void *)(v8 + 48) = v7;
      *(void *)(v8 + 56) = 1LL;
      *(void *)(v8 + 72) = v6;
      *(void *)(v8 + 8_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v7;
      *(void *)(v8 + 64) = v4;
    }

    else
    {
      return v4;
    }
  }

  return (dispatch_data_t)v8;
}

uint64_t dispatch_data_make_memory_entry(void *a1)
{
  kern_return_t v5;
  mach_vm_address_t v6;
  uint64_t v7;
  kern_return_t memory_entry_64;
  kern_return_t v9;
  uint64_t v10;
  void v12[5];
  mach_vm_address_t address;
  memory_object_size_t size;
  mach_port_t object_handle;
  object_handle = 0;
  memory_object_size_t v2 = a1[6];
  BOOL v3 = a1[5] != (void)&__block_literal_global_30;
  while (1)
  {
    BOOL v4 = v3;
    if (v3)
    {
      address = vm_page_size;
      size_t v5 = mach_vm_allocate(mach_task_self_, &address, v2, 1);
      if (v5)
      {
        if (v5 == 3) {
          return object_handle;
        }
        uint64_t v10 = 704LL;
        goto LABEL_17;
      }

      v12[0] = _NSConcreteStackBlock;
      v12[1] = 0x40000000LL;
      _DWORD v12[2] = __dispatch_data_make_memory_entry_block_invoke;
      v12[3] = &__block_descriptor_tmp_9_0;
      unint64_t v6 = address;
      v12[4] = address;
      unint64_t v7 = a1[6];
      if (v7)
      {
        _dispatch_data_apply(a1, 0LL, 0LL, v7, (uint64_t)v12, (uint64_t)__dispatch_data_make_memory_entry_block_invoke);
        unint64_t v6 = address;
      }
    }

    else
    {
      unint64_t v6 = a1[4];
      address = v6;
    }

    size_t size = v2;
    memory_entry_64 = mach_make_memory_entry_64(mach_task_self_, &size, v6, 2097219, &object_handle, 0);
    if (memory_entry_64 == 18) {
      memory_entry_64 = mach_make_memory_entry_64(mach_task_self_, &size, address, 67, &object_handle, 0);
    }
    if (memory_entry_64) {
      break;
    }
    if (size >= v2) {
      goto LABEL_19;
    }
    unint64_t v9 = mach_port_deallocate(mach_task_self_, object_handle);
    if (v9) {
      _dispatch_bug(731LL, v9);
    }
    BOOL v3 = 1;
    if (v4)
    {
      object_handle = 0;
      goto LABEL_20;
    }
  }

  _dispatch_bug(726LL, memory_entry_64);
  object_handle = 0;
LABEL_19:
  if (v4)
  {
LABEL_20:
    size_t v5 = mach_vm_deallocate(mach_task_self_, address, v2);
    if (!v5) {
      return object_handle;
    }
    uint64_t v10 = 740LL;
LABEL_17:
    _dispatch_bug(v10, v5);
  }

  return object_handle;
}

uint64_t __dispatch_data_make_memory_entry_block_invoke( uint64_t a1, int a2, uint64_t a3, void *__src, size_t __n)
{
  return 1LL;
}

uint64_t ___dispatch_data_flatten_block_invoke(uint64_t a1, int a2, uint64_t a3, void *__src, size_t __n)
{
  return 1LL;
}

dispatch_data_s *dispatch_data_create_with_transform(dispatch_data_s *a1, uint64_t *a2, void *a3)
{
  BOOL v4 = a2;
  size_t v5 = a1;
  uint64_t v6 = *a2;
  if (*a2 == 16)
  {
    dispatch_data_t v7 = _dispatch_data_subrange_map(a1, (const void **)&v14, 0LL, 2uLL);
    if (!v7) {
      return 0LL;
    }
    int v8 = *v14;
    if (v8 == 65534) {
      unint64_t v9 = (uint64_t *)&_dispatch_data_format_type_utf16be;
    }
    else {
      unint64_t v9 = (uint64_t *)&_dispatch_data_format_type_utf8;
    }
    dispatch_release(v7);
    if (v8 == 65279) {
      BOOL v4 = (uint64_t *)&_dispatch_data_format_type_utf16le;
    }
    else {
      BOOL v4 = v9;
    }
    uint64_t v6 = *v4;
  }

  if ((v6 & ~a3[1]) != 0 || (*a3 & ~v4[2]) != 0) {
    return 0LL;
  }
  if (dispatch_data_get_size(v5))
  {
    uint64_t v11 = (uint64_t (*)(dispatch_data_s *))v4[3];
    if (v11)
    {
      size_t v5 = (dispatch_data_s *)v11(v5);
      if (!v5) {
        return v5;
      }
    }

    else
    {
      dispatch_retain(v5);
    }

    uint64_t v12 = (uint64_t (*)(dispatch_data_s *))a3[4];
    if (v12)
    {
      uint64_t v13 = v12(v5);
    }

    else
    {
      dispatch_retain(v5);
      uint64_t v13 = (uint64_t)v5;
    }

    dispatch_release(v5);
    return (dispatch_data_s *)v13;
  }

  return v5;
}

uint64_t _dispatch_transform_from_base32(dispatch_data_s *a1)
{
  return _dispatch_transform_from_base32_with_table(a1, (uint64_t)&base32_decode_table, 91LL);
}

dispatch_data_t _dispatch_transform_to_base32(dispatch_data_s *a1)
{
  return _dispatch_transform_to_base32_with_table(a1, (uint64_t)"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567");
}

uint64_t _dispatch_transform_from_base32hex(dispatch_data_s *a1)
{
  return _dispatch_transform_from_base32_with_table(a1, (uint64_t)&base32hex_decode_table, 33LL);
}

dispatch_data_t _dispatch_transform_to_base32hex(dispatch_data_s *a1)
{
  return _dispatch_transform_to_base32_with_table(a1, (uint64_t)"0123456789ABCDEFGHIJKLMNOPQRSTUV");
}

uint64_t _dispatch_transform_from_base64(dispatch_data_s *a1)
{
  v11[0] = 0LL;
  v11[1] = v11;
  v11[2] = 0x2000000000LL;
  v11[3] = 0LL;
  v10[0] = 0LL;
  v10[1] = v10;
  v10[2] = 0x2000000000LL;
  v10[3] = 0LL;
  v9[0] = 0LL;
  v9[1] = v9;
  void v9[2] = 0x2000000000LL;
  v9[3] = 0LL;
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000LL;
  int v8 = &_dispatch_data_empty;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000LL;
  _OWORD v4[2] = ___dispatch_transform_from_base64_block_invoke;
  void v4[3] = &unk_59B30;
  v4[4] = v10;
  void v4[5] = v9;
  v4[6] = v11;
  v4[7] = &v5;
  BOOL v1 = dispatch_data_apply(a1, v4);
  uint64_t v2 = v6[3];
  if (!v1)
  {
    dispatch_release((dispatch_object_t)v6[3]);
    uint64_t v2 = 0LL;
  }

  _Block_object_dispose(&v5, 8);
  _Block_object_dispose(v9, 8);
  _Block_object_dispose(v10, 8);
  _Block_object_dispose(v11, 8);
  return v2;
}

dispatch_data_t _dispatch_transform_to_base64(dispatch_data_s *a1)
{
  size_t size = dispatch_data_get_size(a1);
  dispatch_data_t v3 = 0LL;
  v12[0] = 0LL;
  v12[1] = v12;
  _DWORD v12[2] = 0x2000000000LL;
  v12[3] = 0LL;
  if (size == 3 * (size / 3)) {
    unint64_t v4 = size / 3;
  }
  else {
    unint64_t v4 = size / 3 + 1;
  }
  if (!(v4 >> 62))
  {
    size_t v5 = size;
    size_t v6 = 4 * v4;
    uint64_t v7 = malloc(4 * v4);
    if (v7)
    {
      int v8 = v7;
      v11[0] = 0LL;
      v11[1] = v11;
      v11[2] = 0x2000000000LL;
      v11[3] = v7;
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 0x40000000LL;
      v10[2] = ___dispatch_transform_to_base64_block_invoke;
      v10[3] = &unk_59B58;
      void v10[4] = v12;
      v10[5] = v11;
      v10[6] = a1;
      void v10[7] = v5;
      if (dispatch_data_apply(a1, v10))
      {
        dispatch_data_t v3 = dispatch_data_create(v8, v6, 0LL, &__block_literal_global);
      }

      else
      {
        free(v8);
        dispatch_data_t v3 = 0LL;
      }

      _Block_object_dispose(v11, 8);
    }

    else
    {
      dispatch_data_t v3 = 0LL;
    }
  }

  _Block_object_dispose(v12, 8);
  return v3;
}

uint64_t _dispatch_transform_from_utf16le(dispatch_data_s *a1)
{
  return _dispatch_transform_from_utf16(a1, 1);
}

uint64_t _dispatch_transform_to_utf16le(dispatch_data_s *a1)
{
  return _dispatch_transform_to_utf16(a1, 1);
}

uint64_t _dispatch_transform_from_utf16be(dispatch_data_s *a1)
{
  return _dispatch_transform_from_utf16(a1, 2);
}

uint64_t _dispatch_transform_to_utf16be(dispatch_data_s *a1)
{
  return _dispatch_transform_to_utf16(a1, 2);
}

dispatch_data_t _dispatch_transform_to_utf8_without_bom(dispatch_data_s *a1)
{
  BOOL v1 = a1;
  dispatch_data_t v2 = _dispatch_data_subrange_map(a1, (const void **)&v7, 0LL, 3uLL);
  if (v2
    && (*(unsigned __int16 *)v7 == 48111 ? (BOOL v3 = v7[2] == 191) : (BOOL v3 = 0),
        v3 ? (int v4 = 0) : (int v4 = 1),
        dispatch_release(v2),
        !v4))
  {
    size_t size = dispatch_data_get_size(v1);
    return dispatch_data_create_subrange(v1, 3uLL, size - 3);
  }

  else
  {
    dispatch_retain(v1);
  }

  return v1;
}

dispatch_data_t _dispatch_data_subrange_map( dispatch_data_s *a1, const void **a2, size_t offset, size_t length)
{
  dispatch_data_t subrange = dispatch_data_create_subrange(a1, offset, length);
  if (dispatch_data_get_size(subrange) == length) {
    dispatch_data_t map = dispatch_data_create_map(subrange, a2, 0LL);
  }
  else {
    dispatch_data_t map = 0LL;
  }
  dispatch_release(subrange);
  return map;
}

uint64_t _dispatch_transform_from_base32_with_table(dispatch_data_s *a1, uint64_t a2, uint64_t a3)
{
  v13[0] = 0LL;
  v13[1] = v13;
  v13[2] = 0x2000000000LL;
  v13[3] = 0LL;
  v12[0] = 0LL;
  v12[1] = v12;
  _DWORD v12[2] = 0x2000000000LL;
  v12[3] = 0LL;
  v11[0] = 0LL;
  v11[1] = v11;
  v11[2] = 0x2000000000LL;
  v11[3] = 0LL;
  uint64_t v7 = 0LL;
  int v8 = &v7;
  uint64_t v9 = 0x2000000000LL;
  uint64_t v10 = &_dispatch_data_empty;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000LL;
  void v6[2] = ___dispatch_transform_from_base32_with_table_block_invoke;
  void v6[3] = &unk_59AE0;
  double v6[8] = a3;
  v6[9] = a2;
  v6[4] = v12;
  void v6[5] = v11;
  void v6[6] = v13;
  void v6[7] = &v7;
  BOOL v3 = dispatch_data_apply(a1, v6);
  uint64_t v4 = v8[3];
  if (!v3)
  {
    dispatch_release((dispatch_object_t)v8[3]);
    uint64_t v4 = 0LL;
  }

  _Block_object_dispose(&v7, 8);
  _Block_object_dispose(v11, 8);
  _Block_object_dispose(v12, 8);
  _Block_object_dispose(v13, 8);
  return v4;
}

_BYTE *___dispatch_transform_from_base32_with_table_block_invoke( void *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  unint64_t v5 = a5;
  unint64_t v8 = a5 >> 3;
  if ((a5 & 7) != 0) {
    ++v8;
  }
  uint64_t result = malloc(5 * v8);
  if (result)
  {
    uint64_t v10 = result;
    if (v5)
    {
      uint64_t v10 = result;
      do
      {
        unsigned int v12 = *a4++;
        uint64_t v11 = v12;
        uint64_t v13 = (1LL << v12) & 0x100000600LL;
        if (v12 > 0x20 || v13 == 0)
        {
          if (a1[8] <= v11 || (uint64_t v15 = a1[9], *(unsigned __int8 *)(v15 + v11) == 255))
          {
            free(result);
            return 0LL;
          }

          ++*(void *)(*(void *)(a1[4] + 8LL) + 24LL);
          int v16 = *(unsigned __int8 *)(v15 + v11);
          if (v16 == 254)
          {
            LOBYTE(v16) = 0;
            ++*(void *)(*(void *)(a1[5] + 8LL) + 24LL);
          }

          *(void *)(*(void *)(a1[6] + 8LL) + 24LL) *= 32LL;
          *(void *)(*(void *)(a1[6] + 8LL) + 24LL) += (char)v16;
          if ((*(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) & 7) == 0)
          {
            *uint64_t v10 = *(_DWORD *)(*(void *)(a1[6] + 8LL) + 28LL);
            v10[1] = BYTE3(*(void *)(*(void *)(a1[6] + 8LL) + 24LL));
            v10[2] = BYTE2(*(void *)(*(void *)(a1[6] + 8LL) + 24LL));
            v10[3] = BYTE1(*(void *)(*(void *)(a1[6] + 8LL) + 24LL));
            void v10[4] = *(void *)(*(void *)(a1[6] + 8LL) + 24LL);
            v10 += 5;
          }
        }

        --v5;
      }

      while (v5);
    }

    size_t v17 = v10 - result;
    switch(*(void *)(*(void *)(a1[5] + 8LL) + 24LL))
    {
      case 1LL:
        --v17;
        break;
      case 3LL:
        v17 -= 2LL;
        break;
      case 4LL:
        v17 -= 3LL;
        break;
      case 6LL:
        v17 -= 4LL;
        break;
      default:
        break;
    }

    unint64_t v18 = dispatch_data_create(result, v17, 0LL, &__block_literal_global);
    dispatch_data_t concat = dispatch_data_create_concat(*(dispatch_data_t *)(*(void *)(a1[7] + 8LL) + 24LL), v18);
    dispatch_release(v18);
    dispatch_release(*(dispatch_object_t *)(*(void *)(a1[7] + 8LL) + 24LL));
    *(void *)(*(void *)(a1[7] + 8LL) + 24LL) = concat;
    return (_BYTE *)(&dword_0 + 1);
  }

  return result;
}

dispatch_data_t _dispatch_transform_to_base32_with_table(dispatch_data_s *a1, uint64_t a2)
{
  size_t size = dispatch_data_get_size(a1);
  dispatch_data_t v5 = 0LL;
  v14[0] = 0LL;
  v14[1] = v14;
  v14[2] = 0x2000000000LL;
  v14[3] = 0LL;
  if (size == 5 * (size / 5)) {
    unint64_t v6 = size / 5;
  }
  else {
    unint64_t v6 = size / 5 + 1;
  }
  if (!(v6 >> 61))
  {
    size_t v7 = size;
    size_t v8 = 8 * v6;
    uint64_t v9 = malloc(8 * v6);
    if (v9)
    {
      uint64_t v10 = v9;
      v13[0] = 0LL;
      v13[1] = v13;
      v13[2] = 0x2000000000LL;
      v13[3] = v9;
      applier[0] = _NSConcreteStackBlock;
      applier[1] = 0x40000000LL;
      applier[2] = ___dispatch_transform_to_base32_with_table_block_invoke;
      applier[3] = &unk_59B08;
      applier[4] = v14;
      applier[5] = v13;
      applier[6] = a1;
      applier[7] = a2;
      applier[8] = v7;
      if (dispatch_data_apply(a1, applier))
      {
        dispatch_data_t v5 = dispatch_data_create(v10, v8, 0LL, &__block_literal_global);
      }

      else
      {
        free(v10);
        dispatch_data_t v5 = 0LL;
      }

      _Block_object_dispose(v13, 8);
    }

    else
    {
      dispatch_data_t v5 = 0LL;
    }
  }

  _Block_object_dispose(v14, 8);
  return v5;
}

BOOL ___dispatch_transform_to_base32_with_table_block_invoke( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a5)
  {
    BOOL v8 = 0;
    unint64_t v9 = 0LL;
    size_t v10 = a3 - 1;
    do
    {
      unint64_t v11 = *(unsigned __int8 *)(a4 + v9);
      unint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
      if (0xCCCCCCCCCCCCCCCDLL * v12 < 0x3333333333333334LL)
      {
        char v13 = 0;
      }

      else if (v9)
      {
        char v13 = *(_BYTE *)(a4 + v9 - 1);
      }

      else
      {
        dispatch_data_t v14 = _dispatch_data_subrange_map(*(dispatch_data_s **)(a1 + 48), (const void **)&v49, v10, 1uLL);
        if (!v14) {
          return v8;
        }
        char v13 = *v49;
        dispatch_release(v14);
        unint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
      }

      switch(v12 % 5)
      {
        case 0uLL:
          uint64_t v15 = *(void *)(a1 + 56);
          unint64_t v16 = v11 >> 3;
          goto LABEL_15;
        case 1uLL:
          char v17 = *(_BYTE *)(*(void *)(a1 + 56) + ((4 * (v13 & 7u)) | (v11 >> 6)));
          uint64_t v18 = *(void *)(*(void *)(a1 + 40) + 8LL);
          uint64_t v19 = *(_BYTE **)(v18 + 24);
          *(void *)(v18 + 24) = v19 + 1;
          *uint64_t v19 = v17;
          uint64_t v15 = *(void *)(a1 + 56);
          unint64_t v16 = (v11 >> 1) & 0x1F;
          goto LABEL_15;
        case 2uLL:
          uint64_t v15 = *(void *)(a1 + 56);
          unint64_t v16 = (v11 >> 4) & 0xFFFFFFEF | (16LL * (v13 & 1));
          goto LABEL_15;
        case 3uLL:
          char v20 = *(_BYTE *)(*(void *)(a1 + 56) + ((v11 >> 7) & 0xFFFFFFE1 | (2 * (v13 & 0xF))));
          uint64_t v21 = *(void *)(*(void *)(a1 + 40) + 8LL);
          stat v22 = *(_BYTE **)(v21 + 24);
          *(void *)(v21 + 24) = v22 + 1;
          *stat v22 = v20;
          uint64_t v15 = *(void *)(a1 + 56);
          unint64_t v16 = (v11 >> 2) & 0x1F;
          goto LABEL_15;
        case 4uLL:
          char v23 = *(_BYTE *)(*(void *)(a1 + 56) + ((v11 >> 5) & 0xFFFFFFE7 | (8 * (v13 & 3))));
          uint64_t v24 = *(void *)(*(void *)(a1 + 40) + 8LL);
          uint64_t v25 = *(_BYTE **)(v24 + 24);
          *(void *)(v24 + 24) = v25 + 1;
          *uint64_t v25 = v23;
          uint64_t v15 = *(void *)(a1 + 56);
          unint64_t v16 = v11 & 0x1F;
LABEL_15:
          char v26 = *(_BYTE *)(v15 + v16);
          uint64_t v27 = *(void *)(*(void *)(a1 + 40) + 8LL);
          size_t v28 = *(_BYTE **)(v27 + 24);
          *(void *)(v27 + 24) = v28 + 1;
          *size_t v28 = v26;
          break;
        default:
          break;
      }

      ++v9;
      ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
      BOOL v8 = v9 >= a5;
    }

    while (a5 != v9);
  }

  if (a5 + a3 == *(void *)(a1 + 64))
  {
    unint64_t v29 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    switch(~(5 * (v29 / 5)) + v29)
    {
      case 0uLL:
        uint64_t v30 = *(void *)(a1 + 56);
        uint64_t v31 = 4LL * (*(_BYTE *)(a5 + a4 - 1) & 7);
        goto LABEL_23;
      case 1uLL:
        uint64_t v30 = *(void *)(a1 + 56);
        uint64_t v31 = 16LL * (*(_BYTE *)(a5 + a4 - 1) & 1);
        goto LABEL_23;
      case 2uLL:
        uint64_t v30 = *(void *)(a1 + 56);
        uint64_t v31 = 2LL * (*(_BYTE *)(a5 + a4 - 1) & 0xF);
        goto LABEL_23;
      case 3uLL:
        uint64_t v30 = *(void *)(a1 + 56);
        uint64_t v31 = 8LL * (*(_BYTE *)(a5 + a4 - 1) & 3);
LABEL_23:
        char v32 = *(_BYTE *)(v30 + v31);
        uint64_t v33 = *(void *)(*(void *)(a1 + 40) + 8LL);
        size_t v34 = *(_BYTE **)(v33 + 24);
        *(void *)(v33 + 24) = v34 + 1;
        *size_t v34 = v32;
        break;
      default:
        break;
    }

    switch(~(5 * (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) / 5uLL))
           + *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
    {
      case 0uLL:
        uint64_t v35 = *(void *)(*(void *)(a1 + 40) + 8LL);
        uint64_t v36 = *(_BYTE **)(v35 + 24);
        *(void *)(v35 + 24) = v36 + 1;
        *uint64_t v36 = 61;
        uint64_t v37 = *(void *)(*(void *)(a1 + 40) + 8LL);
        int v38 = *(_BYTE **)(v37 + 24);
        *(void *)(v37 + 24) = v38 + 1;
        _BYTE *v38 = 61;
        goto LABEL_26;
      case 1uLL:
LABEL_26:
        uint64_t v39 = *(void *)(*(void *)(a1 + 40) + 8LL);
        int v40 = *(_BYTE **)(v39 + 24);
        *(void *)(v39 + 24) = v40 + 1;
        *int v40 = 61;
        goto LABEL_27;
      case 2uLL:
LABEL_27:
        uint64_t v41 = *(void *)(*(void *)(a1 + 40) + 8LL);
        uint64_t v42 = *(_BYTE **)(v41 + 24);
        *(void *)(v41 + 24) = v42 + 1;
        *uint64_t v42 = 61;
        uint64_t v43 = *(void *)(*(void *)(a1 + 40) + 8LL);
        unint64_t v44 = *(_BYTE **)(v43 + 24);
        *(void *)(v43 + 24) = v44 + 1;
        _BYTE *v44 = 61;
        goto LABEL_28;
      case 3uLL:
LABEL_28:
        uint64_t v45 = *(void *)(*(void *)(a1 + 40) + 8LL);
        char v46 = *(_BYTE **)(v45 + 24);
        *(void *)(v45 + 24) = v46 + 1;
        *char v46 = 61;
        break;
      default:
        break;
    }
  }

  return 1;
}

_BYTE *___dispatch_transform_from_base64_block_invoke( void *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  unint64_t v5 = a5;
  unint64_t v8 = a5 >> 2;
  if ((a5 & 3) != 0) {
    ++v8;
  }
  uint64_t result = malloc(3 * v8);
  if (result)
  {
    size_t v10 = result;
    if (!v5)
    {
LABEL_18:
      unint64_t v16 = dispatch_data_create( result,  v10 - result - *(void *)(*(void *)(a1[5] + 8LL) + 24LL),  0LL,  &__block_literal_global);
      dispatch_data_t concat = dispatch_data_create_concat(*(dispatch_data_t *)(*(void *)(a1[7] + 8LL) + 24LL), v16);
      dispatch_release(v16);
      dispatch_release(*(dispatch_object_t *)(*(void *)(a1[7] + 8LL) + 24LL));
      *(void *)(*(void *)(a1[7] + 8LL) + 24LL) = concat;
      return (_BYTE *)(&dword_0 + 1);
    }

    size_t v10 = result;
    while (1)
    {
      unsigned int v12 = *a4++;
      uint64_t v11 = v12;
      uint64_t v13 = (1LL << v12) & 0x100000600LL;
      if (v12 > 0x20 || v13 == 0)
      {
        if (v11 > 0x7A || (int v15 = base64_decode_table[v11], v15 == 255))
        {
          free(result);
          return 0LL;
        }

        ++*(void *)(*(void *)(a1[4] + 8LL) + 24LL);
        if ((_DWORD)v11 == 61)
        {
          LOBYTE(v15) = 0;
          ++*(void *)(*(void *)(a1[5] + 8LL) + 24LL);
        }

        *(void *)(*(void *)(a1[6] + 8LL) + 24LL) <<= 6;
        *(void *)(*(void *)(a1[6] + 8LL) + 24LL) += (char)v15;
        if ((*(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) & 3) == 0)
        {
          *size_t v10 = BYTE2(*(void *)(*(void *)(a1[6] + 8LL) + 24LL));
          v10[1] = BYTE1(*(void *)(*(void *)(a1[6] + 8LL) + 24LL));
          v10[2] = *(void *)(*(void *)(a1[6] + 8LL) + 24LL);
          v10 += 3;
        }
      }

      if (!--v5) {
        goto LABEL_18;
      }
    }
  }

  return result;
}

BOOL ___dispatch_transform_to_base64_block_invoke( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a5)
  {
    BOOL v8 = 0;
    unint64_t v9 = 0LL;
    size_t v10 = a3 - 1;
    while (1)
    {
      unint64_t v11 = *(unsigned __int8 *)(a4 + v9);
      unint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
      if (0xAAAAAAAAAAAAAAABLL * v12 < 0x5555555555555556LL)
      {
        char v13 = 0;
      }

      else if (v9)
      {
        char v13 = *(_BYTE *)(a4 + v9 - 1);
      }

      else
      {
        dispatch_data_t v14 = _dispatch_data_subrange_map(*(dispatch_data_s **)(a1 + 48), (const void **)&v38, v10, 1uLL);
        if (!v14) {
          return v8;
        }
        char v13 = *v38;
        dispatch_release(v14);
        unint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
      }

      unint64_t v15 = v12 % 3;
      if (v15 == 2) {
        break;
      }
      if (v15 == 1)
      {
        uint64_t v16 = (v11 >> 4) & 0xFFFFFFCF | (16LL * (v13 & 3));
        goto LABEL_15;
      }

      if (!v15)
      {
        uint64_t v16 = v11 >> 2;
LABEL_15:
        char v20 = base64_encode_table[v16];
        uint64_t v21 = *(void *)(*(void *)(a1 + 40) + 8LL);
        stat v22 = *(char **)(v21 + 24);
        *(void *)(v21 + 24) = v22 + 1;
        *stat v22 = v20;
      }

      ++v9;
      ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
      BOOL v8 = v9 >= a5;
      if (a5 == v9) {
        goto LABEL_17;
      }
    }

    char v17 = base64_encode_table[(4 * (v13 & 0xFu)) | (v11 >> 6)];
    uint64_t v18 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v19 = *(char **)(v18 + 24);
    *(void *)(v18 + 24) = v19 + 1;
    *uint64_t v19 = v17;
    uint64_t v16 = v11 & 0x3F;
    goto LABEL_15;
  }

uint64_t _dispatch_transform_from_utf16(dispatch_data_s *a1, int a2)
{
  v13[2] = 0x2000000000LL;
  uint64_t v10 = 0x3800000000LL;
  __int128 v11 = off_59BA0;
  __int128 v12 = *(_OWORD *)algn_59BB0;
  v13[0] = 0LL;
  v13[1] = v13;
  v13[3] = 0LL;
  uint64_t v8 = 0LL;
  unint64_t v9 = &v8;
  applier[0] = _NSConcreteStackBlock;
  applier[1] = 0x40000000LL;
  applier[2] = ___dispatch_transform_from_utf16_block_invoke;
  applier[3] = &unk_59B80;
  applier[4] = &v8;
  applier[5] = v13;
  applier[6] = a1;
  int v7 = a2;
  BOOL v2 = dispatch_data_apply(a1, applier);
  BOOL v3 = v9 + 3;
  if (v2)
  {
    uint64_t v4 = *v3;
  }

  else
  {
    _dispatch_transform_buffer_new((uint64_t)v3, 0LL, 0LL);
    dispatch_release((dispatch_object_t)v9[3]);
    uint64_t v4 = 0LL;
  }

  _Block_object_dispose(&v8, 8);
  _Block_object_dispose(v13, 8);
  return v4;
}

dispatch_object_s *___dispatch_transform_from_utf16_block_invoke( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5 = a5;
  if (!a3)
  {
    unint64_t v9 = a5 == 3 * (a5 / 3) ? a5 / 3 : a5 / 3 + 1;
    uint64_t result = (dispatch_object_s *)_dispatch_transform_buffer_new( *(void *)(*(void *)(a1 + 32) + 8LL) + 24LL,  2 * v9,  0LL);
    if (!(_DWORD)result) {
      return result;
    }
  }

  uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8LL);
  unint64_t v12 = *(void *)(v11 + 24);
  if (v12 >= v5)
  {
    *(void *)(v11 + 24) = v12 - v5;
    return (dispatch_object_s *)(&dword_0 + 1);
  }

  if (v12)
  {
    a4 += v12;
    v5 -= v12;
    *(void *)(v11 + 24) = 0LL;
  }

  unint64_t v13 = (v5 & 1) + (v5 >> 1);
  if (!v13)
  {
LABEL_55:
    _dispatch_transform_buffer_new(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL, 0LL, 0LL);
    return (dispatch_object_s *)(&dword_0 + 1);
  }

  uint64_t v14 = 0LL;
  while (1)
  {
    if ((v5 & 1) != 0 && v14 == v13 - 1)
    {
      uint64_t result = _dispatch_data_subrange_map( *(dispatch_data_s **)(a1 + 48),  (const void **)&v35,  a3 + 2 * (v13 - 1),  2uLL);
      if (!result) {
        return result;
      }
      unsigned int v15 = bswap32(*v35) >> 16;
      LOWORD(v16) = *(_DWORD *)(a1 + 56) == 1 ? *v35 : v15;
      dispatch_release(result);
      ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    }

    else
    {
      unsigned int v17 = bswap32(*(unsigned __int16 *)(a4 + 2 * v14)) >> 16;
      LOWORD(v16) = *(_DWORD *)(a1 + 56) == 1 ? *(_WORD *)(a4 + 2 * v14) : v17;
    }

    unsigned int v16 = (unsigned __int16)v16;
    if (v14 | a3 || (unsigned __int16)v16 != 65279)
    {
      if ((v16 & 0xFC00) == 0xD800)
      {
        if (++v14 >= v13)
        {
          uint64_t result = _dispatch_data_subrange_map(*(dispatch_data_s **)(a1 + 48), (const void **)&v35, a3 + 2 * v14, 2uLL);
          if (!result) {
            return result;
          }
          unsigned int v20 = bswap32(*v35) >> 16;
          if (*(_DWORD *)(a1 + 56) == 1) {
            unsigned __int16 v19 = *v35;
          }
          else {
            unsigned __int16 v19 = v20;
          }
          dispatch_release(result);
          *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) += 2LL;
        }

        else
        {
          unsigned int v18 = bswap32(*(unsigned __int16 *)(a4 + 2 * v14)) >> 16;
          if (*(_DWORD *)(a1 + 56) == 1) {
            unsigned __int16 v19 = *(_WORD *)(a4 + 2 * v14);
          }
          else {
            unsigned __int16 v19 = v18;
          }
        }

        if (v19 >> 10 != 55) {
          return 0LL;
        }
        unsigned int v16 = (((unsigned __int16)v16 << 10) - 56557568) | v19 & 0x3FF;
      }

      else if ((v16 & 0xFC00) == 0xDC00)
      {
        return 0LL;
      }

      uint64_t v21 = 2 * (v13 - v14);
      if (v16 > 0x7F)
      {
        if (v16 > 0x7FF)
        {
          uint64_t v25 = *(void *)(*(void *)(a1 + 32) + 8LL) + 24LL;
          if (HIWORD(v16))
          {
            uint64_t result = (dispatch_object_s *)_dispatch_transform_buffer_new(v25, 4uLL, v21);
            if (!(_DWORD)result) {
              return result;
            }
            uint64_t v27 = *(void *)(*(void *)(a1 + 32) + 8LL);
            size_t v28 = *(_BYTE **)(v27 + 40);
            *(void *)(v27 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v28 + 1;
            *size_t v28 = (v16 >> 18) | 0xF0;
            int v26 = (v16 >> 12) & 0x3F | 0x80;
          }

          else
          {
            uint64_t result = (dispatch_object_s *)_dispatch_transform_buffer_new(v25, 3uLL, v21);
            if (!(_DWORD)result) {
              return result;
            }
            int v26 = (v16 >> 12) | 0xE0;
          }

          uint64_t v29 = *(void *)(*(void *)(a1 + 32) + 8LL);
          uint64_t v30 = *(_BYTE **)(v29 + 40);
          *(void *)(v29 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v30 + 1;
          *uint64_t v30 = v26;
          int v24 = (v16 >> 6) & 0x3F | 0x80;
        }

        else
        {
          uint64_t result = (dispatch_object_s *)_dispatch_transform_buffer_new( *(void *)(*(void *)(a1 + 32) + 8LL) + 24LL,  2uLL,  v21);
          if (!(_DWORD)result) {
            return result;
          }
          int v24 = (v16 >> 6) | 0xC0;
        }

        uint64_t v31 = *(void *)(*(void *)(a1 + 32) + 8LL);
        uint64_t v32 = *(_BYTE **)(v31 + 40);
        *(void *)(v31 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v32 + 1;
        *uint64_t v32 = v24;
        uint64_t v33 = *(void *)(*(void *)(a1 + 32) + 8LL);
        uint64_t v34 = *(_BYTE **)(v33 + 40);
        *(void *)(v33 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v34 + 1;
        *uint64_t v34 = v16 & 0x3F | 0x80;
      }

      else
      {
        uint64_t result = (dispatch_object_s *)_dispatch_transform_buffer_new( *(void *)(*(void *)(a1 + 32) + 8LL) + 24LL,  1uLL,  v21);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v22 = *(void *)(*(void *)(a1 + 32) + 8LL);
        unint64_t v23 = *(_BYTE **)(v22 + 40);
        *(void *)(v22 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v23 + 1;
        *unint64_t v23 = v16;
      }
    }

    else
    {
      uint64_t v14 = 0LL;
    }

    if (++v14 >= v13) {
      goto LABEL_55;
    }
  }

void *_dispatch_transform_buffer_new(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void **)(a1 + 8);
  if (v6)
  {
    unint64_t v7 = *(void *)(a1 + 16);
    if (v7 <= (unint64_t)v6)
    {
      free(v6);
    }

    else
    {
      uint64_t v8 = dispatch_data_create(v6, v7 - (void)v6, 0LL, &__block_literal_global);
      dispatch_data_t concat = dispatch_data_create_concat(*(dispatch_data_t *)a1, v8);
      dispatch_release(v8);
      dispatch_release(*(dispatch_object_t *)a1);
      *(void *)a1 = concat;
    }
  }

  *(void *)(a1 + 8) = 0LL;
  uint64_t result = (void *)(a3 + a2);
  *(void *)(a1 + 24) = a3 + a2;
  if (!(a3 + a2)) {
    goto LABEL_11;
  }
  uint64_t result = malloc((size_t)result);
  *(void *)(a1 + 8) = result;
  if (result)
  {
LABEL_11:
    *(void *)(a1 + 16) = result;
    return &dword_0 + 1;
  }

  return result;
}

uint64_t _dispatch_transform_to_utf16(dispatch_data_s *a1, int a2)
{
  v13[2] = 0x2000000000LL;
  uint64_t v10 = 0x3800000000LL;
  __int128 v11 = off_59BA0;
  __int128 v12 = *(_OWORD *)algn_59BB0;
  v13[0] = 0LL;
  v13[1] = v13;
  v13[3] = 0LL;
  uint64_t v8 = 0LL;
  unint64_t v9 = &v8;
  applier[0] = _NSConcreteStackBlock;
  applier[1] = 0x40000000LL;
  applier[2] = ___dispatch_transform_to_utf16_block_invoke;
  applier[3] = &unk_59BC8;
  int v7 = a2;
  applier[4] = &v8;
  applier[5] = v13;
  applier[6] = a1;
  BOOL v2 = dispatch_data_apply(a1, applier);
  BOOL v3 = v9 + 3;
  if (v2)
  {
    uint64_t v4 = *v3;
  }

  else
  {
    _dispatch_transform_buffer_new((uint64_t)v3, 0LL, 0LL);
    dispatch_release((dispatch_object_t)v9[3]);
    uint64_t v4 = 0LL;
  }

  _Block_object_dispose(&v8, 8);
  _Block_object_dispose(v13, 8);
  return v4;
}

dispatch_object_s *___dispatch_transform_to_utf16_block_invoke( uint64_t a1, uint64_t a2, uint64_t a3, char *a4, size_t a5)
{
  size_t v5 = a5;
  if (!a3)
  {
    uint64_t result = 0LL;
    if ((a5 & 0x8000000000000000LL) != 0) {
      return result;
    }
    if (2 * a5 >= 0xFFFFFFFFFFFFFFFELL) {
      return result;
    }
    uint64_t result = (dispatch_object_s *)_dispatch_transform_buffer_new( *(void *)(*(void *)(a1 + 32) + 8LL) + 24LL,  2 * a5 + 2,  0LL);
    if (!(_DWORD)result) {
      return result;
    }
    if (*(_DWORD *)(a1 + 56) == 1) {
      __int16 v28 = -257;
    }
    else {
      __int16 v28 = -2;
    }
    uint64_t v29 = *(void *)(*(void *)(a1 + 32) + 8LL);
    uint64_t v30 = *(__int16 **)(v29 + 40);
    *(void *)(v29 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v30 + 1;
    *uint64_t v30 = v28;
  }

  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
  unint64_t v10 = *(void *)(v9 + 24);
  if (v10 >= v5)
  {
    *(void *)(v9 + 24) = v10 - v5;
    return (dispatch_object_s *)(&dword_0 + 1);
  }

  if (!v10) {
    goto LABEL_6;
  }
  *(void *)(v9 + 24) = 0LL;
  v5 -= v10;
  if (!v5)
  {
LABEL_36:
    _dispatch_transform_buffer_new(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL, 0LL, 0LL);
    return (dispatch_object_s *)(&dword_0 + 1);
  }

  a4 += v10;
LABEL_6:
  unint64_t v11 = 0LL;
  while (1)
  {
    int v12 = *a4;
    if (v12 < 0)
    {
      if ((v12 & 0xE0) == 0xC0)
      {
        size_t v13 = 2LL;
      }

      else if ((v12 & 0xF0) == 0xE0)
      {
        size_t v13 = 3LL;
      }

      else
      {
        if ((v12 & 0xF8) != 0xF0) {
          return 0LL;
        }
        size_t v13 = 4LL;
      }
    }

    else
    {
      size_t v13 = 1LL;
    }

    if (v13 + v11 <= v5)
    {
      unsigned int utf8_sequence = _dispatch_transform_read_utf8_sequence(a4);
      v11 += v13;
    }

    else
    {
      uint64_t result = _dispatch_data_subrange_map(*(dispatch_data_s **)(a1 + 48), (const void **)&v31, v11 + a3, v13);
      if (!result) {
        return result;
      }
      unsigned int v15 = result;
      unsigned int utf8_sequence = _dispatch_transform_read_utf8_sequence(v31);
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) += v11 - v5 + v13;
      dispatch_release(v15);
      unint64_t v11 = v5;
    }

    if (utf8_sequence != 65279 || v11 + a3 != 3)
    {
      if (utf8_sequence - 55296 < 0x7FF) {
        return 0LL;
      }
      uint64_t v17 = 2 * (v5 - v11);
      uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 8LL) + 24LL;
      if (utf8_sequence < 0x10000)
      {
        uint64_t result = (dispatch_object_s *)_dispatch_transform_buffer_new(v18, 2uLL, v17);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v25 = bswap32(utf8_sequence) >> 16;
        if (*(_DWORD *)(a1 + 56) == 1) {
          LOWORD(v23) = utf8_sequence;
        }
        else {
          LOWORD(v23) = v25;
        }
      }

      else
      {
        uint64_t result = (dispatch_object_s *)_dispatch_transform_buffer_new(v18, 4uLL, v17);
        if (!(_DWORD)result) {
          return result;
        }
        unsigned int v19 = bswap32(((utf8_sequence + 983040) >> 10) & 0x3FF | 0xFFFFD800) >> 16;
        if (*(_DWORD *)(a1 + 56) == 1) {
          __int16 v20 = ((utf8_sequence + 983040) >> 10) & 0x3FF | 0xD800;
        }
        else {
          __int16 v20 = v19;
        }
        uint64_t v21 = *(void *)(*(void *)(a1 + 32) + 8LL);
        uint64_t v22 = *(_WORD **)(v21 + 40);
        *(void *)(v21 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v22 + 1;
        *uint64_t v22 = v20;
        unsigned int v23 = utf8_sequence & 0x3FF | 0xFFFFDC00;
        unsigned int v24 = bswap32(v23) >> 16;
        if (*(_DWORD *)(a1 + 56) != 1) {
          LOWORD(v23) = v24;
        }
      }

      uint64_t v26 = *(void *)(*(void *)(a1 + 32) + 8LL);
      uint64_t v27 = *(_WORD **)(v26 + 40);
      *(void *)(v26 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v27 + 1;
      _WORD *v27 = v23;
    }

    a4 += v13;
    if (v5 <= v11) {
      goto LABEL_36;
    }
  }

uint64_t _dispatch_transform_read_utf8_sequence(char *a1)
{
  uint64_t v1 = *a1;
  if (*a1 < 0)
  {
    if ((v1 & 0xE0) == 0xC0)
    {
      int v2 = 1;
      int v3 = 31;
    }

    else
    {
      if ((v1 & 0xF0) != 0xE0)
      {
        int v5 = v1 & 0xF8;
        unsigned int v6 = (v1 & 7) << 6;
        if (v5 == 240) {
          unsigned int v4 = v6;
        }
        else {
          unsigned int v4 = 0;
        }
        if (v5 == 240) {
          int v2 = 3;
        }
        else {
          int v2 = -1;
        }
        goto LABEL_13;
      }

      int v2 = 2;
      int v3 = 15;
    }

    unsigned int v4 = (v1 & v3) << 6;
LABEL_13:
    int v7 = a1 + 1;
    do
    {
      char v8 = *v7++;
      uint64_t v1 = v4 | v8 & 0x3F;
      --v2;
      unsigned int v4 = (_DWORD)v1 << 6;
    }

    while ((_BYTE)v2);
  }

  return v1;
}

void _dispatch_time_init()
{
  kern_return_t v0;
  mach_timebase_info info;
  uint64_t v0 = mach_timebase_info(&info);
  if (v0) {
    _dispatch_bug(86LL, v0);
  }
  if (info.numer != 125 || info.denom != 3)
  {
    *(double *)&_dispatch_host_time_data_0 = (double)info.numer / (double)info.denom;
    _dispatch_host_time_data_1 = info.numer == info.denom;
    _dispatch_host_time_mach2nano = (uint64_t (*)(void))_dispatch_mach_host_time_mach2nano;
    _dispatch_host_time_nano2mach = (uint64_t (*)(void))_dispatch_mach_host_time_nano2mach;
  }

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  if ((uint64_t)when > -2)
  {
    if (when == -1LL) {
      return when;
    }
    if (when) {
      goto LABEL_14;
    }
    when = mach_absolute_time();
    int v3 = 0;
LABEL_9:
    if (when == -1LL) {
      return when;
    }
    goto LABEL_10;
  }

  if (when == 0x8000000000000000LL)
  {
    int v3 = 1;
    when = mach_continuous_time();
    goto LABEL_9;
  }

  if (when == -2LL)
  {
    when = clock_gettime_nsec_np(_CLOCK_REALTIME);
    int v3 = 2;
    goto LABEL_9;
  }

uint64_t dispatch_time_to_nsecs(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if ((uint64_t)a1 <= -2)
  {
    if (a1 == 0x8000000000000000LL)
    {
      a1 = mach_continuous_time();
      goto LABEL_10;
    }

    if (a1 == -2LL)
    {
      a1 = clock_gettime_nsec_np(_CLOCK_REALTIME);
LABEL_5:
      *a2 = 3LL;
LABEL_21:
      uint64_t v6 = 1LL;
      goto LABEL_22;
    }

uint64_t dispatch_time_from_nsec(uint64_t a1, unint64_t a2)
{
  if (a2 <= 2) {
    unint64_t v3 = 2LL;
  }
  else {
    unint64_t v3 = a2;
  }
  if (_dispatch_host_time_nano2mach)
  {
    unint64_t v5 = _dispatch_host_time_nano2mach(v3);
  }

  else if (v3 > 0x7FFFFFFFFFFFFFFELL)
  {
    unint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
  }

  else if (v3 >= 0x5555555555555555LL)
  {
    unint64_t v5 = 3 * (v3 / 0x7D);
  }

  else
  {
    uint64_t v4 = (3 * v3 * (unsigned __int128)0x624DD2F1A9FBE77uLL) >> 64;
    unint64_t v5 = (v4 + ((3 * v3 - v4) >> 1)) >> 6;
  }

  if (v5 > 0x3FFFFFFFFFFFFFFELL) {
    uint64_t v6 = -1LL;
  }
  else {
    uint64_t v6 = v5;
  }
  unint64_t v7 = v5 | 0x8000000000000000LL;
  if (v5 > 0x3FFFFFFFFFFFFFFELL) {
    unint64_t v7 = -1LL;
  }
  uint64_t v8 = -1LL;
  if (v3 <= 0x3FFFFFFFFFFFFFFELL) {
    uint64_t v8 = -(uint64_t)v3;
  }
  if (a1 == 2) {
    uint64_t v8 = v7;
  }
  if (a1 == 1) {
    return v6;
  }
  else {
    return v8;
  }
}

dispatch_time_t dispatch_walltime(const timespec *when, int64_t delta)
{
  if (when) {
    __uint64_t v3 = when->tv_nsec + 1000000000 * when->tv_sec;
  }
  else {
    __uint64_t v3 = clock_gettime_nsec_np(_CLOCK_REALTIME);
  }
  uint64_t v4 = v3 + delta;
  dispatch_time_t v5 = -2LL;
  if (delta >= 0) {
    dispatch_time_t v5 = -1LL;
  }
  if (v4 >= 2) {
    return -v4;
  }
  else {
    return v5;
  }
}

int64_t _dispatch_timeout(int64_t result)
{
  if (result > -2)
  {
    if (result == -1) {
      return result;
    }
    if (!result) {
      return 0LL;
    }
  }

  else if (result == 0x8000000000000000LL || result == -2)
  {
    return 0LL;
  }

  if (result < 0)
  {
    if ((result & 0x4000000000000000LL) != 0)
    {
      else {
        unint64_t v5 = -result;
      }
      __uint64_t v6 = clock_gettime_nsec_np(_CLOCK_REALTIME);
      if (v5 >= v6) {
        return v5 - v6;
      }
      else {
        return 0LL;
      }
    }

    unint64_t v1 = result & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v2 = mach_continuous_time();
  }

  else
  {
    else {
      unint64_t v1 = result;
    }
    uint64_t v2 = mach_absolute_time();
  }

  BOOL v3 = v1 >= v2;
  unint64_t v4 = v1 - v2;
  if (v4 == 0 || !v3) {
    return 0LL;
  }
  if (_dispatch_host_time_mach2nano) {
    return _dispatch_host_time_mach2nano(v4);
  }
  if (v4 > 0x3126E978D4FDF39LL) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  if (v4 >= 0x20C49BA5E353F7CLL) {
    return 125 * (v4 / 3);
  }
  return 125 * v4 / 3;
}

unint64_t _dispatch_mach_host_time_mach2nano(unint64_t result)
{
  unint64_t v1 = result;
  if (result)
  {
    if (!_dispatch_host_time_data_1)
    {
      uint64_t result = 0x7FFFFFFFFFFFFFFFLL;
      if (v1 <= 0x7FFFFFFFFFFFFFFELL)
      {
        double v2 = (double)v1 * *(double *)&_dispatch_host_time_data_0 + 0.5;
        if (v2 < 9.22337204e18) {
          return (unint64_t)v2;
        }
      }
    }
  }

  return result;
}

unint64_t _dispatch_mach_host_time_nano2mach(unint64_t result)
{
  unint64_t v1 = result;
  if (result)
  {
    if (!_dispatch_host_time_data_1)
    {
      uint64_t result = 0x7FFFFFFFFFFFFFFFLL;
      if (v1 <= 0x7FFFFFFFFFFFFFFELL)
      {
        double v2 = (double)v1 / *(double *)&_dispatch_host_time_data_0 + 0.5;
        if (v2 < 9.22337204e18) {
          return (unint64_t)v2;
        }
      }
    }
  }

  return result;
}

void *_dispatch_continuation_alloc_from_heap()
{
  if (_dispatch_continuation_alloc_init_pred != -1) {
    dispatch_once_f( &_dispatch_continuation_alloc_init_pred,  0LL,  (dispatch_function_t)_dispatch_continuation_alloc_init);
  }
  if (_dispatch_use_dispatch_alloc) {
    return (void *)_dispatch_alloc_continuation_alloc();
  }
  while (1)
  {
    uint64_t result = calloc(1uLL, 0x40uLL);
    if (result) {
      break;
    }
    _dispatch_temporary_resource_shortage();
  }

  return result;
}

unint64_t _dispatch_alloc_continuation_alloc()
{
  if (!_dispatch_main_heap) {
    return _dispatch_alloc_continuation_from_heap_slow();
  }
  __int16 StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
  uint64_t v1 = _dispatch_main_heap;
  uint64_t v2 = *(void *)(_dispatch_main_heap + ((unint64_t)(StatusReg & 0xFFF) << 20) + 8);
  if (v2)
  {
    uint64_t v3 = 0LL;
    while (2)
    {
      unint64_t v4 = (unint64_t *)(v2 + 8 * v3);
      while (1)
      {
        unint64_t v5 = __ldxr(v4);
        if (v5 == -1LL) {
          break;
        }
        unint64_t v6 = __clz(__rbit64(~v5));
        if (!__stxr((1LL << v6) | v5, v4))
        {
          unint64_t v8 = ((unint64_t)v4 & 0xFFFFF) - 64;
          unint64_t v9 = v8 >> 3;
          uint64_t v10 = (v8 >> 9) & 0x3FFFFFF;
          unint64_t result = ((((unint64_t)v4 & 0xFFFFFFFFFFF00000LL) + (v10 << 18)) & 0xFFFFFFFFFFFC0FFFLL | ((v9 & 0x3F) << 12))
                 + (v6 << 6)
                 + 0x4000;
          dispatch_time_t v11 = (unint64_t *)(((unint64_t)v4 & 0xFFFFFFFFFFF00000LL) + 8 * v10 + 16);
          uint64_t v12 = 1LL << v9;
          while (1)
          {
            unint64_t v13 = __ldxr(v11);
            if (*v4 != -1LL) {
              break;
            }
            if (!__stxr(v13 | v12, v11)) {
              return result;
            }
          }

          __clrex();
          return result;
        }
      }

      __clrex();
      if (++v3 != 4) {
        continue;
      }
      break;
    }

    uint64_t v1 = _dispatch_main_heap;
  }

  unint64_t result = _dispatch_alloc_continuation_from_heap(v1);
  if (!result) {
    return _dispatch_alloc_continuation_from_heap_slow();
  }
  return result;
}

void _dispatch_continuation_free_to_heap(uint64_t a1)
{
  if (_dispatch_use_dispatch_alloc) {
    _dispatch_alloc_continuation_free(a1);
  }
  else {
    free((void *)a1);
  }
}

void _dispatch_alloc_continuation_free(uint64_t a1)
{
  *(void *)a1 = 0LL;
  unint64_t v1 = a1 - (a1 & 0xFFFFFFFFFFF00000LL);
  unint64_t v2 = (v1 - 0x4000) >> 6;
  unint64_t v3 = ((v1 - 0x4000) >> 18) & 0xFFFFF;
  unint64_t v4 = (a1 & 0xFFFFFFFFFFF00000LL) + 8 * v3 + 16;
  unint64_t v5 = (unint64_t *)((a1 & 0xFFFFFFFFFFF00000LL) + (v3 << 9) + 8LL * ((v2 >> 6) & 0x3F) + 64);
  unint64_t v6 = (v1 - 1664) >> 6;
  unsigned int v7 = v6 >> 6;
  if ((a1 & 0xFC000) != 0)
  {
    unint64_t v8 = (unint64_t *)v4;
  }

  else
  {
    unint64_t v5 = (unint64_t *)((a1 & 0xFFFFFFFFFFF00000LL) + 8LL * v7 + 1600);
    unint64_t v8 = 0LL;
  }

  if ((a1 & 0xFC000) != 0) {
    LOBYTE(v7) = (v2 >> 6) & 0x3F;
  }
  else {
    LOBYTE(v2) = v6;
  }
  uint64_t v9 = 1LL << v2;
  unint64_t v10 = *v5;
  if ((v9 & *v5) == 0)
  {
    unint64_t v8 = (unint64_t *)*v5;
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corruption: failed to clear bit exclusively";
    qword_61258 = (uint64_t)v8;
    __break(1u);
LABEL_13:
    unint64_t v11 = v10 & v9;
    uint64_t v12 = ~(1LL << v7);
    do
      unint64_t v13 = __ldxr(v8);
    while (__stlxr(v13 & v12, v8));
    if (!v11) {
      _dispatch_alloc_maybe_madvise_page(a1);
    }
    return;
  }

  uint64_t v9 = ~v9;
  do
    unint64_t v10 = __ldxr(v5);
  while (__stlxr(v10 & v9, v5));
  if (v8) {
    goto LABEL_13;
  }
}

const char *_dispatch_continuation_alloc_init()
{
  int v0 = malloc_engaged_nano();
  unint64_t result = getenv("LIBDISPATCH_CONTINUATION_ALLOCATOR");
  if (result)
  {
    unint64_t result = (const char *)atoi(result);
    BOOL v2 = (_DWORD)result != 0;
  }

  else
  {
    BOOL v2 = v0 == 0;
  }

  _dispatch_use_dispatch_alloc = v2;
  return result;
}

uint64_t _dispatch_alloc_continuation_from_heap(uint64_t a1)
{
  uint64_t v1 = 0LL;
  unint64_t v2 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) & 0xFFF;
  while (2)
  {
    unint64_t v3 = (unint64_t *)(a1 + (v2 << 20) + 8 * v1 + 1600);
    while (1)
    {
      unint64_t v4 = __ldxr(v3);
      if (v4 == -1LL) {
        break;
      }
      unint64_t v5 = __clz(__rbit64(~v4));
      if (!__stxr((1LL << v5) | v4, v3))
      {
        uint64_t v7 = ((_DWORD)v1 << 6);
        return a1 + (v2 << 20) + ((v5 | v7) << 6) + 1664;
      }
    }

    __clrex();
    if (++v1 != 3) {
      continue;
    }
    break;
  }

  unint64_t v6 = (unint64_t *)(a1 + (v2 << 20) + 1624);
  uint64_t v7 = 192LL;
  while (1)
  {
    unint64_t v8 = __ldxr(v6);
    if (v8 == -1LL) {
      break;
    }
    unint64_t v5 = __clz(__rbit64(~v8));
    if (!__stxr((1LL << v5) | v8, v6)) {
      return a1 + (v2 << 20) + ((v5 | v7) << 6) + 1664;
    }
  }

  uint64_t v11 = 0LL;
  __clrex();
  do
  {
    uint64_t v12 = a1 + (v2 << 20) + 8 * v11;
    uint64_t v14 = *(void *)(v12 + 16);
    unint64_t v13 = (unint64_t *)(v12 + 16);
    if (v14 != -1)
    {
      uint64_t v15 = 0LL;
      while (2)
      {
        unsigned int v16 = (unint64_t *)(a1 + (v2 << 20) + (v11 << 9) + 8 * v15 + 64);
        while (1)
        {
          unint64_t v17 = __ldxr(v16);
          if (v17 == -1LL) {
            break;
          }
          unint64_t v18 = __clz(__rbit64(~v17));
          if (!__stxr((1LL << v18) | v17, v16))
          {
            __int16 StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
            *(void *)(_dispatch_main_heap + ((unint64_t)(StatusReg & 0xFFF) << 20) + 8) = (unint64_t)v16 & 0xFFFFFFFFFFFFFFE0LL;
            while (1)
            {
              unint64_t v20 = __ldxr(v13);
              if (*v16 != -1LL) {
                break;
              }
              if (!__stxr(v20 | (1LL << v15), v13)) {
                return a1 + (v2 << 20) + (v11 << 18) + (v15 << 12) + (v18 << 6) + 0x4000;
              }
            }

            __clrex();
            return a1 + (v2 << 20) + (v11 << 18) + (v15 << 12) + (v18 << 6) + 0x4000;
          }
        }

        __clrex();
        if (++v15 != 64) {
          continue;
        }
        break;
      }
    }

    uint64_t v9 = 0LL;
    ++v11;
  }

  while (v11 != 3);
  return v9;
}

uint64_t _dispatch_alloc_continuation_from_heap_slow()
{
  for (uint64_t i = (unint64_t *)&_dispatch_main_heap; ; uint64_t i = (unint64_t *)*i)
  {
    uint64_t v1 = *i;
    if (!*i)
    {
      _dispatch_alloc_try_create_heap(i);
      uint64_t v1 = *i;
    }

    uint64_t result = _dispatch_alloc_continuation_from_heap(v1);
    if (result) {
      break;
    }
  }

  return result;
}

void _dispatch_alloc_try_create_heap(unint64_t *a1)
{
  kern_return_t v3;
  void *v4;
  mach_vm_address_t address;
  mach_vm_size_t v2 = (unint64_t)MEMORY[0xFFFFFC036] << 20;
  while (1)
  {
    address = vm_page_size;
    unint64_t v3 = mach_vm_map(mach_task_self_, &address, v2, 0xFFFFFuLL, 1241513985, 0, 0LL, 0, 3, 7, 1u);
    if (!v3) {
      break;
    }
    if (v3 != 3)
    {
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Could not allocate heap";
      qword_61258 = v3;
      __break(1u);
LABEL_12:
      _dispatch_bug(427LL, v3);
      return;
    }

    _dispatch_temporary_resource_shortage();
  }

  unint64_t v4 = (void *)address;
  while (!__ldxr(a1))
  {
  }

  __clrex();
  unint64_t v3 = munmap(v4, (unint64_t)MEMORY[0xFFFFFC036] << 20);
  if (v3) {
    goto LABEL_12;
  }
}

void _dispatch_alloc_maybe_madvise_page(uint64_t a1)
{
  if ((a1 & 0xFC000) != 0)
  {
    mach_vm_size_t v2 = (void *)(a1 & 0xFFFFFFFFFFFFC000LL);
    if (v2)
    {
      uint64_t v3 = 0LL;
      unint64_t v4 = a1 & 0xFFFFFFFFFFF00000LL;
      unint64_t v5 = (unint64_t)v2 - (a1 & 0xFFFFFFFFFFF00000LL) - 0x4000;
      uint64_t v6 = (v5 >> 12) & 0x3F;
      uint64_t v7 = (v5 >> 18) & 0xFFFFF;
      unint64_t v8 = (void *)(((v4 + (v7 << 9)) & 0xFFFFFFFFFFFFFE07LL | (8 * v6)) + 64);
      while (!v8[v3])
      {
        if (++v3 == 4)
        {
          uint64_t v9 = 0LL;
LABEL_8:
          unint64_t v10 = &v8[v9];
          while (!__ldxr(v10))
          {
            if (!__stxr(0xFFFFFFFFFFFFFFFFLL, v10))
            {
              if (++v9 != 4) {
                goto LABEL_8;
              }
              uint64_t v19 = v7;
              unint64_t v17 = v4;
              uint64_t v18 = v6;
              unint64_t v16 = ((v4 + (v7 << 9)) & 0xFFFFFFFFFFFFFE07LL | (8 * v6)) + 64;
              int v12 = madvise(v2, 0x4000uLL, 5);
              if (v12) {
                _dispatch_bug(563LL, v12);
              }
              uint64_t v9 = 4LL;
              unint64_t v8 = (void *)v16;
              unint64_t v4 = v17;
              uint64_t v6 = v18;
              uint64_t v7 = v19;
              goto LABEL_16;
            }
          }

          __clrex();
          if ((int)v9 > 1)
          {
LABEL_16:
            uint64_t v13 = v9 + 7;
            unint64_t v14 = v4 + ((8 * v6) | (v7 << 9));
            do
            {
              *(void *)(v14 + 8 * v13) = 0LL;
              unint64_t v15 = v13 - 7;
              --v13;
            }

            while (v15 > 2);
            goto LABEL_20;
          }

          if (!(_DWORD)v9) {
            return;
          }
LABEL_20:
          *unint64_t v8 = 0LL;
          return;
        }
      }
    }
  }

uint64_t dispatch_benchmark(unint64_t a1, uint64_t a2)
{
  return dispatch_benchmark_f(a1, a2, *(void (**)(uint64_t))(a2 + 16));
}

uint64_t dispatch_benchmark_f(unint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  if (dispatch_benchmark_f_pred == -1)
  {
    if (a1) {
      goto LABEL_3;
    }
    return 0LL;
  }

  dispatch_once_f( &dispatch_benchmark_f_pred,  &dispatch_benchmark_f_bdata,  (dispatch_function_t)_dispatch_benchmark_init);
  if (!a1) {
    return 0LL;
  }
LABEL_3:
  uint64_t v6 = mach_absolute_time();
  unint64_t v7 = a1;
  do
  {
    a3(a2);
    --v7;
  }

  while (v7);
  uint64_t v8 = mach_absolute_time();
  return __udivti3( (v8 - v6) * dispatch_benchmark_f_bdata,  ((v8 - v6) * (unsigned __int128)dispatch_benchmark_f_bdata) >> 64,  *(unsigned int *)algn_611FC * a1,  (*(unsigned int *)algn_611FC * (unsigned __int128)a1) >> 64)
       - qword_61200;
}

uint64_t _dispatch_benchmark_init(unsigned int *a1)
{
  uint64_t v3 = (void (*)(uint64_t))*((void *)a1 + 2);
  uint64_t v2 = *((void *)a1 + 3);
  unint64_t v4 = *((void *)a1 + 4);
  mach_timebase_info((mach_timebase_info_t)a1);
  uint64_t v5 = mach_absolute_time();
  if (v4 <= 1) {
    uint64_t v6 = 1LL;
  }
  else {
    uint64_t v6 = v4;
  }
  do
  {
    v3(v2);
    --v6;
  }

  while (v6);
  uint64_t v7 = mach_absolute_time();
  uint64_t v8 = __udivti3((v7 - v5) * *a1, ((v7 - v5) * (unsigned __int128)*a1) >> 64, a1[1], 0LL);
  uint64_t result = __udivti3(v8, v9, v4, 0LL);
  *((void *)a1 + _dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = result;
  return result;
}

uint64_t _dispatch_introspection_init()
{
  kern_return_t v2;
  uint64_t i;
  char *v4;
  const char *v5;
  unsigned int v6;
  uint64_t v7;
  const char *v9;
  uint64_t v10;
  unsigned int v11;
  const char *v12;
  uint64_t v13;
  unsigned int v14;
  mach_msg_type_number_t thread_info_outCnt;
  integer_t thread_info_out[4];
  uint64_t v17;
  char __dst[16];
  __int128 v19;
  byte_61298 = _dispatch_getenv_BOOL("LIBDISPATCH_DEBUG_QUEUE_INVERSIONS", 0LL);
  int v0 = *(_opaque_pthread_t **)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  thread_info_outCnt = 6;
  thread_inspect_t v1 = pthread_mach_thread_np(v0);
  uint64_t v2 = thread_info(v1, 4u, thread_info_out, &thread_info_outCnt);
  if (v2) {
    _dispatch_bug(72LL, v2);
  }
  else {
    qword_61290 = v17 - (void)v0;
  }
  pthread_key_init_np(26LL, _dispatch_introspection_thread_remove);
  _dispatch_introspection_thread_add();
  for (uint64_t i = 0LL; i != 2304; i += 128LL)
  {
    unint64_t v4 = (char *)&_dispatch_root_queues + i;
    if (!MEMORY[0xFFFFFC100]) {
      goto LABEL_5;
    }
    *(_OWORD *)__dst = 0u;
    uint64_t v19 = 0u;
    if (*((void *)v4 + 9)) {
      uint64_t v5 = (const char *)*((void *)v4 + 9);
    }
    else {
      uint64_t v5 = (const char *)&unk_416DE;
    }
    strncpy(__dst, v5, 0x20uLL);
    uint64_t v6 = *((_DWORD *)v4 + 21);
    if ((v6 & 0x4000000) != 0)
    {
      uint64_t v7 = v6 & 0x8E000000 | 0xFF;
      LOWORD(v6) = (unsigned __int16)v6 >> 12;
    }

    else
    {
      uint64_t v7 = v6 & 0x8E0000FF;
      uint64_t v6 = (v6 >> 8) & 0xF;
      if (!v6) {
        goto LABEL_15;
      }
    }

    v7 |= 256LL << (v6 - 1);
LABEL_15:
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace(772079621LL, *((void *)v4 + 8), v7, 0LL, 0LL);
    }
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace(772079622LL, *(void *)__dst, *(void *)&__dst[8], v19, *((void *)&v19 + 1));
    }
LABEL_5:
    _dispatch_introspection_queue_create((uint64_t)&_dispatch_root_queues + i);
  }

  if (!MEMORY[0xFFFFFC100]) {
    goto LABEL_20;
  }
  if (off_64E08) {
    uint64_t v9 = off_64E08;
  }
  else {
    uint64_t v9 = (const char *)&unk_416DE;
  }
  strncpy(__dst, v9, 0x20uLL);
  if ((dword_64E14 & 0x4000000) != 0)
  {
    unint64_t v10 = dword_64E14 & 0x8E000000 | 0xFF;
    LOWORD(v1_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = (unsigned __int16)dword_64E14 >> 12;
  }

  else
  {
    unint64_t v10 = dword_64E14 & 0x8E0000FF;
    uint64_t v11 = (dword_64E14 >> 8) & 0xF;
    if (!v11) {
      goto LABEL_37;
    }
  }

  v10 |= 256LL << (v11 - 1);
LABEL_37:
  if (MEMORY[0xFFFFFC100]) {
    kdebug_trace(772079621LL, qword_64E00, v10, 0LL, 0LL);
  }
  if (MEMORY[0xFFFFFC100]) {
    kdebug_trace(772079622LL, *(void *)__dst, *(void *)&__dst[8], v19, *((void *)&v19 + 1));
  }
LABEL_20:
  _dispatch_introspection_queue_create((uint64_t)&_dispatch_main_q);
  if (MEMORY[0xFFFFFC100])
  {
    if (off_64E88) {
      int v12 = off_64E88;
    }
    else {
      int v12 = (const char *)&unk_416DE;
    }
    strncpy(__dst, v12, 0x20uLL);
    if ((dword_64E94 & 0x4000000) != 0)
    {
      uint64_t v13 = dword_64E94 & 0x8E000000 | 0xFF;
      LOWORD(v14) = (unsigned __int16)dword_64E94 >> 12;
    }

    else
    {
      uint64_t v13 = dword_64E94 & 0x8E0000FF;
      unint64_t v14 = (dword_64E94 >> 8) & 0xF;
      if (!v14) {
        goto LABEL_43;
      }
    }

    v13 |= 256LL << (v14 - 1);
LABEL_43:
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace(772079621LL, qword_64E80, v13, 0LL, 0LL);
    }
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace(772079622LL, *(void *)__dst, *(void *)&__dst[8], v19, *((void *)&v19 + 1));
    }
  }

  return _dispatch_introspection_queue_create((uint64_t)&_dispatch_mgr_q);
}

void _dispatch_introspection_thread_remove(uint64_t a1)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned int v3 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(&dword_61288))
  {
    if (!__stxr(v3, &dword_61288)) {
      goto LABEL_6;
    }
  }

  __clrex();
  _dispatch_unfair_lock_lock_slow((uint64_t)&dword_61288, 0x10000);
LABEL_6:
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    *(void *)(v5 + 16) = *(void *)(a1 + 16);
  }
  **(void **)(a1 + 16) = v5;
  unsigned int v6 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    unsigned int v7 = __ldxr(&dword_61288);
  while (__stlxr(0, &dword_61288));
  if (v7 != v6) {
    _dispatch_unfair_lock_unlock_slow((uint64_t)&dword_61288, v7);
  }
  uint64_t v8 = *(void *)(StatusReg + 176);
  if (v8) {
    int v9 = *(_DWORD *)(v8 + 8) + 1;
  }
  else {
    int v9 = 1;
  }
  if (v9 > _dispatch_continuation_cache_limit)
  {
    _dispatch_continuation_free_to_cache_limit(a1);
  }

  else
  {
    *(void *)(a1 + 16) = v8;
    *(_DWORD *)(a1 + 8) = v9;
    *(void *)(StatusReg + 176) = a1;
  }

  *(void *)(StatusReg + 208) = 0LL;
}

void _dispatch_introspection_thread_add()
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (!*(void *)(StatusReg + 208))
  {
    uint64_t v1 = *(void *)StatusReg;
    uint64_t v2 = *(void **)(StatusReg + 176);
    if (v2) {
      *(void *)(StatusReg + 176) = v2[2];
    }
    else {
      uint64_t v2 = _dispatch_continuation_alloc_from_heap();
    }
    void *v2 = 65LL;
    v2[3] = v1;
    if (qword_61290) {
      uint64_t v3 = v1 + qword_61290;
    }
    else {
      uint64_t v3 = 0LL;
    }
    v2[4] = v3;
    *(void *)(StatusReg + 208) = v2;
    unsigned int v4 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    while (!__ldaxr(&dword_61288))
    {
      if (!__stxr(v4, &dword_61288)) {
        goto LABEL_12;
      }
    }

    __clrex();
    _dispatch_unfair_lock_lock_slow((uint64_t)&dword_61288, 0x10000);
LABEL_12:
    uint64_t v6 = _dispatch_introspection;
    v2[1] = _dispatch_introspection;
    if (v6) {
      *(void *)(v6 + 16) = v2 + 1;
    }
    _dispatch_introspection = (uint64_t)v2;
    int v2[2] = &_dispatch_introspection;
    unsigned int v7 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
    do
      unsigned int v8 = __ldxr(&dword_61288);
    while (__stlxr(0, &dword_61288));
    if (v8 != v7) {
      _dispatch_unfair_lock_unlock_slow((uint64_t)&dword_61288, v8);
    }
  }

uint64_t dispatch_introspection_queue_get_info@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = *(void *)(*(void *)result + 40LL);
  if (v2 == 18LL)
  {
    unint64_t v2 = *(void *)(result + 56);
    uint64_t v3 = *(void *)(result + 24);
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v3;
    uint64_t v4 = *(void *)(result + 64);
    *(void *)(a2 + 16) = *(void *)(result + 72);
    *(void *)(a2 + 24) = v4;
    *(void *)(a2 + 32) = 1LL;
    LODWORD(v2) = (v2 >> 53) & 2 | ((v2 & 0x4000000001LL) != 0) | *(_BYTE *)(a2 + 40) & 0xE0;
  }

  else
  {
    int v5 = *(_DWORD *)(result + 8);
    unint64_t v6 = *(void *)(result + 56);
    BOOL v7 = (v6 & 0x4000000001LL) != 0;
    uint64_t v8 = *(void *)(result + 24);
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v8;
    uint64_t v9 = *(void *)(result + 64);
    *(void *)(a2 + 16) = *(void *)(result + 72);
    *(void *)(a2 + 24) = v9;
    LODWORD(v8) = *(_DWORD *)(result + 112) + (v6 >> 58);
    *(_DWORD *)(a2 + 32) = *(unsigned __int16 *)(result + 80);
    *(_DWORD *)(a2 + 36) = v8;
    if (v5 == 0x7FFFFFFF) {
      BOOL v7 = 0;
    }
    if (((v6 >> 54) & (v5 != 0x7FFFFFFF)) != 0) {
      char v10 = 2;
    }
    else {
      char v10 = 0;
    }
    char v11 = v10 | v7 | *(_BYTE *)(a2 + 40) & 0xE0;
    if (*(void *)(result + 104) == -1LL)
    {
      char v12 = 4;
    }

    else if (*(void *)(result + 104))
    {
      char v12 = 0;
    }

    else
    {
      char v12 = 4 * (*(void *)(result + 48) != 0LL);
    }

    LOBYTE(v2) = v11 | (8 * (v5 == 0x7FFFFFFF)) | v12 | (16 * (v2 == 394769));
  }

  *(_BYTE *)(a2 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v2;
  return result;
}

_opaque_pthread_t *dispatch_introspection_queue_item_get_info@<X0>( uint64_t *a1@<X1>, _opaque_pthread_t *result@<X0>, uint64_t a3@<X8>)
{
  uint64_t v3 = a1;
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(v5 + 40);
  if (v6 == 256)
  {
    while (1)
    {
      BOOL v7 = v3;
      uint64_t v3 = (uint64_t *)v3[7];
      uint64_t v5 = *v3;
      uint64_t v6 = *(void *)(v5 + 40);
      if (v6 != 256)
      {
        uint64_t result = (_opaque_pthread_t *)v7[6];
        goto LABEL_6;
      }
    }

    uint64_t result = (_opaque_pthread_t *)v7[6];
    return _dispatch_introspection_continuation_get_info(result, v3, a3);
  }

pthread_t _dispatch_introspection_continuation_get_info(pthread_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t)a2;
  pthread_t v5 = result;
  uint64_t v6 = *a2;
  if ((unint64_t)*a2 >= 0x1000)
  {
    while (1)
    {
      *((void *)&v8 + _dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = *(void *)(v6 + 40);
      *(void *)&__int128 v8 = *((void *)&v8 + 1) - 256LL;
      uint64_t v7 = v8 >> 8;
      if ((unint64_t)(v7 - 5) >= 3)
      {
        switch(v7)
        {
          case 0LL:
            _dispatch_introspection_continuation_get_info_cold_3();
          case 1LL:
          case 4LL:
            LOBYTE(v6) = 0;
            LOBYTE(v15) = 0;
            uint64_t result = 0LL;
            int v16 = *(void (**)(char *))(v4 + 32);
            char v17 = *(uint64_t **)(v4 + 40);
            goto LABEL_35;
          case 2LL:
          case 3LL:
            LOBYTE(v15) = 0;
            uint64_t result = 0LL;
            int v16 = *(void (**)(char *))(v4 + 32);
            char v17 = *(uint64_t **)(v4 + 40);
            uint64_t v6 = *(void *)(v4 + 48);
            pthread_t v5 = *(pthread_t *)&v5->__opaque[8];
            if ((v6 & 0x20) != 0) {
              goto LABEL_40;
            }
            goto LABEL_34;
          case 8LL:
            LOBYTE(v15) = 0;
            uint64_t result = 0LL;
            int v16 = *(void (**)(char *))(v4 + 32);
            char v17 = *(uint64_t **)(v4 + 40);
            uint64_t v6 = *(void *)(v4 + 48);
            if ((v6 & 0x20) != 0) {
              goto LABEL_40;
            }
            goto LABEL_34;
          default:
            _dispatch_introspection_continuation_get_info_cold_1(v6);
        }
      }

      uint64_t v4 = *(void *)(v4 + 48);
      uint64_t v6 = *(void *)v4;
      if (*(void *)v4 < 0x1000uLL) {
        break;
      }
      if (*(_BYTE *)(v6 + 40))
      {
        *(void *)a3 = 257LL;
        if (*(void *)(v6 + 40) == 18LL)
        {
          int v9 = 0;
          uint64_t v10 = *(void *)(v4 + 24);
          uint64_t v12 = *(void *)(v4 + 64);
          uint64_t v11 = *(void *)(v4 + 72);
          int v13 = (*(void *)(v4 + 56) >> 53) & 2 | ((*(void *)(v4 + 56) & 0x4000000001LL) != 0);
          int v14 = 1;
        }

        else
        {
          int v19 = *(_DWORD *)(v4 + 8);
          unint64_t v20 = *(void *)(v4 + 56);
          BOOL v21 = (v20 & 0x4000000001LL) != 0;
          uint64_t v10 = *(void *)(v4 + 24);
          uint64_t v12 = *(void *)(v4 + 64);
          uint64_t v11 = *(void *)(v4 + 72);
          int v14 = *(unsigned __int16 *)(v4 + 80);
          int v9 = *(_DWORD *)(v4 + 112) + (v20 >> 58);
          if (v19 == 0x7FFFFFFF) {
            BOOL v21 = 0;
          }
          if (((v20 >> 54) & (v19 != 0x7FFFFFFF)) != 0) {
            char v22 = 2;
          }
          else {
            char v22 = 0;
          }
          if (*(void *)(v4 + 104) == -1LL)
          {
            uint64_t result = (pthread_t)&dword_4;
          }

          else if (*(void *)(v4 + 104))
          {
            uint64_t result = 0LL;
          }

          else
          {
            uint64_t result = (pthread_t)(4 * (*(void *)(v4 + 48) != 0LL));
          }

          LOBYTE(v13) = (16 * (*(void *)(v6 + 40) == 394769LL)) | (8 * (v19 == 0x7FFFFFFF)) | v21 | v22 | result;
        }

        *(void *)(a3 + 8) = v4;
        *(void *)(a3 + 16) = v10;
        *(void *)(a3 + 24) = v11;
        *(void *)(a3 + 32) = v12;
        *(_DWORD *)(a3 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v14;
        *(_DWORD *)(a3 + 44) = v9;
        *(_BYTE *)(a3 + 48) = v13;
        *(_DWORD *)(a3 + 49) = *(_DWORD *)v25;
        *(_DWORD *)(a3 + 52) = *(_DWORD *)&v25[3];
        return result;
      }
    }
  }

  if ((v6 & 0x81) != 0)
  {
    uint64_t result = pthread_from_mach_thread_np(*(_DWORD *)(v4 + 100));
    LOBYTE(v15) = 0;
    int v16 = *(void (**)(char *))(v4 + 64);
    char v17 = *(uint64_t **)(v4 + 72);
    if ((v6 & 0x20) != 0) {
      goto LABEL_40;
    }
LABEL_34:
    if ((v6 & 0x10) != 0)
    {
      *(void *)a3 = 17LL;
      int v16 = (void (*)(char *))v17[2];
      if ((v6 & 2) != 0) {
        goto LABEL_38;
      }
    }

    else
    {
LABEL_35:
      *(void *)a3 = 18LL;
      if ((v6 & 2) != 0) {
        goto LABEL_38;
      }
    }

LABEL_42:
    BOOL v23 = *(unsigned __int16 *)&v5->__opaque[64] == 1;
    goto LABEL_43;
  }

  char v17 = *(uint64_t **)(v4 + 40);
  if ((v6 & 0x400) != 0)
  {
    LOBYTE(v15) = 0;
    uint64_t result = 0LL;
    int v16 = *(void (**)(char *))(*(void *)&v5->__opaque[72] + 16LL);
    if ((v6 & 0x20) == 0) {
      goto LABEL_34;
    }
  }

  else
  {
    int v16 = *(void (**)(char *))(v4 + 32);
    if (v16 != _dispatch_apply_invoke && v16 != _dispatch_apply_redirect_invoke)
    {
      LOBYTE(v15) = 0;
      goto LABEL_33;
    }

    uint64_t v15 = v17[2];
    if (!v15)
    {
LABEL_33:
      uint64_t result = 0LL;
      if ((v6 & 0x20) != 0) {
        goto LABEL_40;
      }
      goto LABEL_34;
    }

    uint64_t result = 0LL;
    uint64_t v4 = *v17;
    pthread_t v5 = *(pthread_t *)(*v17 + 56);
    int v16 = *(void (**)(char *))(*v17 + 32);
    char v17 = *(uint64_t **)(*v17 + 40);
    LOBYTE(v15) = 4;
    if ((v6 & 0x20) == 0) {
      goto LABEL_34;
    }
  }

uint64_t dispatch_introspection_get_queues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t *)(a1 + 40);
  if (!a1) {
    uint64_t v4 = &qword_61280;
  }
  pthread_t v5 = (void *)*v4;
  if (!a2) {
    return *v5;
  }
  uint64_t v6 = (_DWORD *)(a3 + 41);
  while (v5)
  {
    uint64_t v7 = *v5;
    if (*(void *)(*(void *)*v5 + 40LL) == 18LL)
    {
      int v8 = 0;
      uint64_t v9 = *(void *)(v7 + 24);
      uint64_t v10 = *(void *)(v7 + 64);
      uint64_t v11 = *(void *)(v7 + 72);
      unsigned int v3 = v3 & 0xFFFFFFE0 | ((*(void *)(v7 + 56) & 0x4000000001LL) != 0) | (*(void *)(v7 + 56) >> 53) & 2;
      int v12 = 1;
    }

    else
    {
      int v13 = *(_DWORD *)(v7 + 8);
      unint64_t v14 = *(void *)(v7 + 56);
      BOOL v15 = (v14 & 0x4000000001LL) != 0;
      uint64_t v9 = *(void *)(v7 + 24);
      uint64_t v10 = *(void *)(v7 + 64);
      uint64_t v11 = *(void *)(v7 + 72);
      int v12 = *(unsigned __int16 *)(v7 + 80);
      if (v13 == 0x7FFFFFFF) {
        BOOL v15 = 0;
      }
      if (((v14 >> 54) & (v13 != 0x7FFFFFFF)) != 0) {
        int v16 = 2;
      }
      else {
        int v16 = 0;
      }
      if (*(void *)(v7 + 104) == -1LL)
      {
        int v17 = 4;
      }

      else if (*(void *)(v7 + 104))
      {
        int v17 = 0;
      }

      else
      {
        int v17 = 4 * (*(void *)(v7 + 48) != 0LL);
      }

      int v8 = *(_DWORD *)(v7 + 112) + (v14 >> 58);
      unsigned int v3 = v3 & 0xFFFFFFE0 | (16 * (*(void *)(*(void *)*v5 + 40LL) == 394769LL)) | (8 * (v13 == 0x7FFFFFFF)) | v15 | v16 | v17;
    }

    *(void *)((char *)v6 - 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = v7;
    *(void *)((char *)v6 - 33) = v9;
    *(void *)((char *)v6 - 25) = v11;
    *(void *)((char *)v6 - 17) = v10;
    *(_DWORD *)((char *)v6 - 9) = v12;
    *(_DWORD *)((char *)v6 - 5) = v8;
    *((_BYTE *)v6 - _dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = v3;
    _DWORD *v6 = *(_DWORD *)v19;
    *(_DWORD *)((char *)v6 + 3) = *(_DWORD *)&v19[3];
    pthread_t v5 = (void *)v5[2];
    v6 += 12;
    if (!--a2) {
      return *v5;
    }
  }

  uint64_t result = 0LL;
  *(void *)((char *)v6 - 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = 0LL;
  return result;
}

void *dispatch_introspection_get_queue_threads(void *result, uint64_t a2, uint64_t a3)
{
  if (!result) {
    uint64_t result = (void *)_dispatch_introspection;
  }
  if (a2)
  {
    uint64_t v3 = a3 + 32;
    while (result)
    {
      memset(v17, 0, 7);
      uint64_t v4 = result[3];
      pthread_t v5 = (uint64_t *)result[4];
      if (v5 && (pthread_t v5 = (uint64_t *)*v5) != 0LL)
      {
        if (*(void *)(*v5 + 40) == 18LL)
        {
          int v6 = 0;
          uint64_t v7 = v5[3];
          uint64_t v9 = v5[8];
          uint64_t v8 = v5[9];
          int v10 = ((unint64_t)v5[7] >> 53) & 2 | ((v5[7] & 0x4000000001LL) != 0);
          int v11 = 1;
        }

        else
        {
          int v12 = *((_DWORD *)v5 + 2);
          unint64_t v13 = v5[7];
          BOOL v14 = (v13 & 0x4000000001LL) != 0;
          uint64_t v7 = v5[3];
          uint64_t v9 = v5[8];
          uint64_t v8 = v5[9];
          int v11 = *((unsigned __int16 *)v5 + 40);
          if (v12 == 0x7FFFFFFF) {
            BOOL v14 = 0;
          }
          if (((v13 >> 54) & (v12 != 0x7FFFFFFF)) != 0) {
            char v15 = 2;
          }
          else {
            char v15 = 0;
          }
          if (v5[13] == -1)
          {
            char v16 = 4;
          }

          else if (v5[13])
          {
            char v16 = 0;
          }

          else
          {
            char v16 = 4 * (v5[6] != 0);
          }

          int v6 = *((_DWORD *)v5 + 28) + (v13 >> 58);
          LOBYTE(v1_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = (16 * (*(void *)(*v5 + 40) == 394769LL)) | (8 * (v12 == 0x7FFFFFFF)) | v14 | v15 | v16;
        }

        v17[0] = *(_DWORD *)v18;
        *(_DWORD *)((char *)v17 + 3) = *(_DWORD *)&v18[3];
      }

      else
      {
        uint64_t v8 = 0LL;
        uint64_t v9 = 0LL;
        int v11 = 0;
        int v6 = 0;
        LOBYTE(v1_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = 0;
        uint64_t v7 = 0LL;
      }

      *(void *)(v3 - 32) = result;
      *(void *)(v3 - 24) = v4;
      *(void *)(v3 - 16) = v5;
      *(void *)(v3 - 8) = v7;
      *(void *)uint64_t v3 = v8;
      *(void *)(v3 + 8) = v9;
      *(_DWORD *)(v3 + 16) = v11;
      *(_DWORD *)(v3 + 2_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v6;
      *(_BYTE *)(v3 + 24) = v10;
      *(_DWORD *)(v3 + 25) = v17[0];
      *(_DWORD *)(v3 + 28) = *(_DWORD *)((char *)v17 + 3);
      v3 += 64LL;
      uint64_t result = (void *)result[1];
      if (!--a2) {
        return result;
      }
    }

    *(void *)(v3 - 32) = 0LL;
  }

  return result;
}

uint64_t *dispatch_introspection_queue_get_items(_opaque_pthread_t *a1, uint64_t *a2, uint64_t a3, _OWORD *a4)
{
  if (*(_BYTE *)(a1->__sig + 40) != 17LL) {
    return 0LL;
  }
  uint64_t v5 = a3;
  int v6 = a2;
  if (a2) {
    goto LABEL_5;
  }
  if (*(void *)&a1->__opaque[88] != -1LL)
  {
    int v6 = *(uint64_t **)&a1->__opaque[88];
LABEL_5:
    if (a3) {
      goto LABEL_6;
    }
    return v6;
  }

  int v6 = 0LL;
  if (a3)
  {
LABEL_6:
    while (v6)
    {
      --v5;
      dispatch_introspection_queue_item_get_info(v6, a1, (uint64_t)v11);
      __int128 v8 = v11[1];
      *a4 = v11[0];
      a4[1] = v8;
      __int128 v9 = v11[3];
      a4[2] = v11[2];
      a4[3] = v9;
      int v6 = (uint64_t *)v6[2];
      a4 += 4;
      if (!v5) {
        return v6;
      }
    }

    *(void *)a4 = 0LL;
  }

  return v6;
}

uint64_t *_dispatch_introspection_queue_fake_sync_push_pop( _opaque_pthread_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v6 = *(void *)(StatusReg + 32);
  v8[0] = a4 | 1;
  v8[1] = v6;
  v8[2] = 0LL;
  __int128 v10 = 0u;
  __int128 v9 = 0u;
  int v11 = a1;
  uint64_t v12 = a3;
  int v16 = 0;
  uint64_t v13 = a2;
  uint64_t v14 = 0LL;
  uint64_t v15 = 0LL;
  int v17 = *(void *)(StatusReg + 24);
  __int16 v18 = 0;
  char v19 = 0;
  if (MEMORY[0xFFFFFC100]) {
    _dispatch_trace_item_push_internal(a1, v8);
  }
  _dispatch_introspection_queue_item_enqueue((dispatch_queue_s *)a1, (dispatch_object_s *)v8);
  if (MEMORY[0xFFFFFC100]) {
    _dispatch_trace_item_pop_internal(a1, v8);
  }
  _dispatch_introspection_queue_item_dequeue((dispatch_queue_s *)a1, (dispatch_object_s *)v8);
  return v8;
}

__n128 dispatch_introspection_hooks_install(__int128 *a1)
{
  uint64_t v1 = 0LL;
  __int128 v11 = xmmword_612C0;
  __int128 v12 = xmmword_612D0;
  __int128 v13 = xmmword_612E0;
  __int128 v9 = _dispatch_introspection_hooks[0];
  __int128 v10 = xmmword_612B0;
  _dispatch_introspection_hooks[0] = *a1;
  __int128 v2 = a1[4];
  __int128 v4 = a1[1];
  __int128 v3 = a1[2];
  xmmword_612D0 = a1[3];
  xmmword_612E0 = v2;
  xmmword_612B0 = v4;
  xmmword_612C0 = v3;
  v5.i64[0] = -1LL;
  v5.i64[1] = -1LL;
  do
  {
    int32x2_t v6 = vmovn_s64((int64x2_t)vbicq_s8( (int8x16_t)vceqzq_s64((int64x2_t)_dispatch_introspection_hooks[v1]),  (int8x16_t)vceqzq_s64((int64x2_t)_dispatch_introspection_hook_callouts[v1])));
    if ((v6.i8[0] & 1) != 0) {
      *(void *)&_dispatch_introspection_hooks[v1] = -1LL;
    }
    if ((v6.i8[4] & 1) != 0) {
      *((void *)&_dispatch_introspection_hooks[v1] + _dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = -1LL;
    }
    *(__int128 *)((char *)&v9 + v1 * 16) = (__int128)vbicq_s8( *(int8x16_t *)((char *)&v9 + v1 * 16),  (int8x16_t)vceqq_s64(*(int64x2_t *)((char *)&v9 + v1 * 16), v5));
    ++v1;
  }

  while (v1 != 3);
  __int128 v7 = v12;
  a1[2] = v11;
  a1[3] = v7;
  a1[4] = v13;
  __n128 result = (__n128)v10;
  *a1 = v9;
  a1[1] = (__int128)result;
  return result;
}

__int128 *dispatch_introspection_hook_callouts_enable(__int128 *result)
{
  uint64_t v1 = 0LL;
  if (result) {
    __int128 v2 = result;
  }
  else {
    __int128 v2 = (__int128 *)&_dispatch_introspection_hook_callouts_enabled;
  }
  _dispatch_introspection_hook_callouts[0] = *v2;
  __int128 v3 = v2[1];
  __int128 v4 = v2[2];
  __int128 v5 = v2[4];
  xmmword_61320 = v2[3];
  unk_61330 = v5;
  xmmword_61300 = v3;
  unk_61310 = v4;
  do
  {
    uint64_t v6 = *(void *)((char *)_dispatch_introspection_hooks + v1);
    if (*(void *)((char *)_dispatch_introspection_hook_callouts + v1))
    {
      if (v6) {
        goto LABEL_11;
      }
      uint64_t v7 = -1LL;
    }

    else
    {
      if (v6 != -1) {
        goto LABEL_11;
      }
      uint64_t v7 = 0LL;
    }

    *(void *)((char *)_dispatch_introspection_hooks + v_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = v7;
LABEL_11:
    v1 += 8LL;
  }

  while (v1 != 48);
  return result;
}

uint64_t dispatch_introspection_hook_callout_queue_create()
{
  return result;
}

uint64_t _dispatch_object_finalizer(void *a1)
{
  else {
    uint64_t v1 = a1[5] + 8LL;
  }
  return *(void *)v1;
}

void *_dispatch_object_set_finalizer(void *result, uint64_t a2)
{
  else {
    __int128 v2 = (void *)(result[5] + 8LL);
  }
  void *v2 = a2;
  return result;
}

uint64_t _dispatch_introspection_queue_create(uint64_t a1)
{
  if (byte_61298) {
    size_t v2 = 56LL;
  }
  else {
    size_t v2 = 32LL;
  }
  __int128 v3 = _dispatch_calloc(1uLL, v2);
  uint64_t v4 = (uint64_t)v3;
  void *v3 = a1;
  if (byte_61298)
  {
    v3[5] = 0LL;
    void v3[6] = 0LL;
  }

  *(void *)(a1 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v3;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned int v6 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(&dword_6128C))
  {
    if (!__stxr(v6, &dword_6128C)) {
      goto LABEL_11;
    }
  }

  __clrex();
  _dispatch_unfair_lock_lock_slow((uint64_t)&dword_6128C, 0x10000);
LABEL_11:
  uint64_t v8 = qword_61280;
  *(void *)(v4 + 16) = qword_61280;
  if (v8) {
    *(void *)(v8 + 24) = v4 + 16;
  }
  qword_61280 = v4;
  *(void *)(v4 + 24) = &qword_61280;
  unsigned int v9 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    unsigned int v10 = __ldxr(&dword_6128C);
  while (__stlxr(0, &dword_6128C));
  if (v10 != v9) {
    _dispatch_unfair_lock_unlock_slow((uint64_t)&dword_6128C, v10);
  }
  j__dispatch_introspection_hook_queue_create((dispatch_queue_t)a1);
  return a1;
}

uint64_t _dispatch_introspection_queue_create_hook()
{
  return dispatch_introspection_hook_callout_queue_create();
}

uint64_t dispatch_introspection_hook_callout_queue_dispose()
{
  return result;
}

void _dispatch_introspection_queue_dispose(uint64_t a1)
{
  size_t v2 = *(void **)(a1 + 40);
  j__dispatch_introspection_hook_queue_destroy((dispatch_queue_t)a1);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned int v4 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(&dword_6128C))
  {
    if (!__stxr(v4, &dword_6128C)) {
      goto LABEL_8;
    }
  }

  __clrex();
  _dispatch_unfair_lock_lock_slow((uint64_t)&dword_6128C, 0x10000);
LABEL_8:
  uint64_t v6 = v2[2];
  if (v6) {
    *(void *)(v6 + 24) = v2[3];
  }
  *(void *)v2[3] = v6;
  if (byte_61298) {
    _dispatch_introspection_queue_order_dispose((uint64_t)v2);
  }
  unsigned int v7 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    unsigned int v8 = __ldxr(&dword_6128C);
  while (__stlxr(0, &dword_6128C));
  if (v8 != v7) {
    _dispatch_unfair_lock_unlock_slow((uint64_t)&dword_6128C, v8);
  }
  *(void *)(a1 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v2[1];
  free(v2);
}

uint64_t _dispatch_introspection_queue_dispose_hook()
{
  return dispatch_introspection_hook_callout_queue_dispose();
}

void _dispatch_introspection_queue_order_dispose(uint64_t a1)
{
  size_t v2 = (unsigned int *)(a1 + 32);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned int v4 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v2))
  {
    if (!__stxr(v4, v2)) {
      goto LABEL_6;
    }
  }

  __clrex();
  _dispatch_unfair_lock_lock_slow(a1 + 32, 0x10000);
LABEL_6:
  uint64_t v31 = *(void **)(a1 + 40);
  uint64_t v6 = v31;
  *(void *)(a1 + 4_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = 0LL;
  if (v6) {
    v6[1] = &v31;
  }
  unsigned int v7 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    unsigned int v8 = __ldxr(v2);
  while (__stlxr(0, v2));
  if (v8 != v7) {
    _dispatch_unfair_lock_unlock_slow((uint64_t)v2, v8);
  }
  unsigned int v9 = v31;
  if (v31)
  {
    do
    {
      unsigned int v10 = v9;
      unsigned int v9 = (void *)*v9;
      __int128 v11 = (unsigned int *)(*(void *)(v10[7] + 40LL) + 36LL);
      unsigned int v12 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
      while (!__ldaxr(v11))
      {
        if (!__stxr(v12, v11)) {
          goto LABEL_18;
        }
      }

      __clrex();
      _dispatch_unfair_lock_lock_slow((uint64_t)v11, 0x10000);
LABEL_18:
      uint64_t v14 = v10[2];
      if (v14) {
        *(void *)(v14 + 24) = v10[3];
      }
      *(void *)v10[3] = v14;
      unsigned int v15 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
      do
        unsigned int v16 = __ldxr(v11);
      while (__stlxr(0, v11));
      if (v16 != v15) {
        _dispatch_unfair_lock_unlock_slow((uint64_t)v11, v16);
      }
      free(v10);
    }

    while (v9);
  }

  int v17 = (unsigned int *)(a1 + 36);
  unsigned int v18 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v17))
  {
    if (!__stxr(v18, v17)) {
      goto LABEL_30;
    }
  }

  __clrex();
  _dispatch_unfair_lock_lock_slow(a1 + 36, 0x10000);
LABEL_30:
  uint64_t v31 = *(void **)(a1 + 48);
  unint64_t v20 = v31;
  *(void *)(a1 + 48) = 0LL;
  if (v20) {
    v20[1] = &v31;
  }
  unsigned int v21 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    unsigned int v22 = __ldxr(v17);
  while (__stlxr(0, v17));
  if (v22 != v21) {
    _dispatch_unfair_lock_unlock_slow(a1 + 36, v22);
  }
  BOOL v23 = (uint64_t *)v31;
  if (v31)
  {
    do
    {
      uint64_t v24 = v23;
      BOOL v23 = (uint64_t *)v23[2];
      BOOL v25 = (unsigned int *)(*(void *)(v24[6] + 40) + 32LL);
      unsigned int v26 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
      while (!__ldaxr(v25))
      {
        if (!__stxr(v26, v25)) {
          goto LABEL_42;
        }
      }

      __clrex();
      _dispatch_unfair_lock_lock_slow((uint64_t)v25, 0x10000);
LABEL_42:
      uint64_t v28 = *v24;
      if (*v24) {
        *(void *)(v28 + 8) = v24[1];
      }
      *(void *)v24[1] = v28;
      unsigned int v29 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
      do
        unsigned int v30 = __ldxr(v25);
      while (__stlxr(0, v25));
      if (v30 != v29) {
        _dispatch_unfair_lock_unlock_slow((uint64_t)v25, v30);
      }
      free(v24);
    }

    while (v23);
  }

uint64_t dispatch_introspection_hook_callout_queue_item_enqueue()
{
  return result;
}

void _dispatch_introspection_queue_item_enqueue(dispatch_queue_s *a1, dispatch_object_s *a2)
{
  if (xmmword_612B0) {
    _dispatch_introspection_queue_item_enqueue_hook((_opaque_pthread_t *)a1, (uint64_t *)a2);
  }
}

uint64_t _dispatch_introspection_queue_item_enqueue_hook(_opaque_pthread_t *a1, uint64_t *a2)
{
  return dispatch_introspection_hook_callout_queue_item_enqueue();
}

_opaque_pthread_t *_dispatch_trace_item_push_internal(_opaque_pthread_t *result, uint64_t *a2)
{
  if (*(_BYTE *)(result->__sig + 40) == 17LL)
  {
    uint64_t v3 = result;
    if ((unint64_t)*a2 < 0x1000
      || (!*(void *)(*a2 + 40) ? (BOOL v4 = *(void *)(*a2 + 40) == 0LL) : (BOOL v4 = 1), v4))
    {
      uint64_t result = dispatch_introspection_queue_item_get_info(a2, result, (uint64_t)v16);
      uint64_t v5 = v16[3];
      switch(v16[0])
      {
        case 0x42LL:
          unint64_t v11 = v16[6];
          uint64_t v10 = *(void *)&v3->__opaque[48];
          if (!MEMORY[0xFFFFFC100]) {
            return result;
          }
          uint64_t v12 = 772079648LL;
          break;
        case 0x12LL:
          uint64_t v13 = *(void *)&v3->__opaque[48];
          uint64_t v14 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
          if (!MEMORY[0xFFFFFC100]) {
            return result;
          }
          uint64_t v10 = a2[1] | (v14 << 32);
          unint64_t v11 = v17 & 7 | (unint64_t)(v13 << 32);
          uint64_t v12 = 772079644LL;
          goto LABEL_18;
        case 0x11LL:
          uint64_t v6 = v17 & 7;
          uint64_t v7 = *(void *)&v3->__opaque[48];
          uint64_t v8 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
          uint64_t v9 = a2[1];
          if ((*a2 & 0x20) == 0)
          {
            if (!MEMORY[0xFFFFFC100]) {
              return result;
            }
            uint64_t v10 = v9 | (v8 << 32);
            unint64_t v11 = v6 | (v7 << 32);
            uint64_t v12 = 772079640LL;
LABEL_18:
            unsigned int v15 = a2;
            uint64_t v5 = v16[4];
            return (_opaque_pthread_t *)kdebug_trace(v12, v15, v5, v11, v10);
          }

          if (!MEMORY[0xFFFFFC100]) {
            return result;
          }
          uint64_t v10 = v9 | (v8 << 32);
          unint64_t v11 = v6 | (v7 << 32);
          uint64_t v12 = 772079636LL;
          break;
        default:
          return result;
      }

      unsigned int v15 = a2;
      return (_opaque_pthread_t *)kdebug_trace(v12, v15, v5, v11, v10);
    }
  }

  return result;
}

uint64_t dispatch_introspection_hook_callout_queue_item_dequeue()
{
  return result;
}

void _dispatch_introspection_queue_item_dequeue(dispatch_queue_s *a1, dispatch_object_s *a2)
{
  if (*(&xmmword_612B0 + 1)) {
    _dispatch_introspection_queue_item_dequeue_hook((_opaque_pthread_t *)a1, (uint64_t *)a2);
  }
}

uint64_t _dispatch_introspection_queue_item_dequeue_hook(_opaque_pthread_t *a1, uint64_t *a2)
{
  return dispatch_introspection_hook_callout_queue_item_dequeue();
}

_opaque_pthread_t *_dispatch_trace_item_pop_internal(_opaque_pthread_t *result, uint64_t *a2)
{
  if (*(_BYTE *)(result->__sig + 40) == 17LL)
  {
    uint64_t v3 = result;
    if ((unint64_t)*a2 < 0x1000
      || (!*(void *)(*a2 + 40) ? (BOOL v4 = *(void *)(*a2 + 40) == 0LL) : (BOOL v4 = 1), v4))
    {
      uint64_t result = dispatch_introspection_queue_item_get_info(a2, result, (uint64_t)v9);
      if ((unint64_t)(v9[0] - 17LL) >= 2)
      {
        if (v9[0] != 66LL) {
          return result;
        }
        uint64_t v5 = *(void *)&v3->__opaque[48];
        if (!MEMORY[0xFFFFFC100]) {
          return result;
        }
        uint64_t v7 = 772079656LL;
        uint64_t v8 = a2;
        uint64_t v6 = 0LL;
      }

      else
      {
        uint64_t v5 = *(void *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 32);
        uint64_t v6 = *(void *)&v3->__opaque[48];
        if (!MEMORY[0xFFFFFC100]) {
          return result;
        }
        uint64_t v7 = 772079652LL;
        uint64_t v8 = a2;
      }

      return (_opaque_pthread_t *)kdebug_trace(v7, v8, v5, v6, 0LL);
    }
  }

  return result;
}

uint64_t dispatch_introspection_hook_callout_queue_item_complete()
{
  return result;
}

void _dispatch_introspection_queue_item_complete(dispatch_object_s *a1)
{
  if (xmmword_612C0) {
    _dispatch_introspection_queue_item_complete_hook(a1);
  }
}

void _dispatch_introspection_callout_entry(void *context, dispatch_function_t function)
{
}

_opaque_pthread_t *_dispatch_trace_source_callout_entry_internal( _opaque_pthread_t *result, uint64_t a2, _opaque_pthread_t *a3, uint64_t *a4)
{
  if (*(_BYTE *)(a3->__sig + 40) == 17LL)
  {
    if (MEMORY[0xFFFFFC100]) {
      kdebug_trace(772079664LL, result, a4, a2, 0LL);
    }
    return _dispatch_trace_item_push_internal(a3, a4);
  }

  return result;
}

void _dispatch_introspection_callout_return(void *context, dispatch_function_t function)
{
}

uint64_t _dispatch_introspection_runtime_event()
{
  return result;
}

void _dispatch_introspection_order_record(uint64_t a1)
{
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v2 = *(void *)(StatusReg + 160);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 24);
    if (v3)
    {
      uint64_t v5 = *(void *)(a1 + 24);
      if (v5)
      {
        uint64_t v6 = a1;
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = v5;
          uint64_t v5 = *(void *)(v5 + 24);
        }

        while (v5);
        uint64_t v8 = *(void *)(StatusReg + 160);
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = v3;
          uint64_t v3 = *(void *)(v3 + 24);
        }

        while (v3);
        uint64_t v10 = *(void *)(v7 + 40);
        uint64_t v11 = *(void *)(v9 + 40);
        uint64_t v12 = (unsigned int *)(v10 + 32);
        unsigned int v13 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        while (!__ldaxr(v12))
        {
          if (!__stxr(v13, v12)) {
            goto LABEL_13;
          }
        }

        __clrex();
        _dispatch_unfair_lock_lock_slow(v10 + 32, 0x10000);
LABEL_13:
        unsigned int v15 = (void *)(v10 + 40);
        unsigned int v16 = v15;
        while (1)
        {
          unsigned int v16 = (void *)*v16;
          if (!v16) {
            break;
          }
          if (v16[7] == v9)
          {
            unsigned int v17 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
            do
              unsigned int v18 = __ldxr(v12);
            while (__stlxr(0, v12));
            if (v18 != v17) {
              _dispatch_unfair_lock_unlock_slow((uint64_t)v12, v18);
            }
            return;
          }
        }

        unsigned int v19 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        do
          unsigned int v20 = __ldxr(v12);
        while (__stlxr(0, v12));
        if (v20 != v19) {
          _dispatch_unfair_lock_unlock_slow((uint64_t)v12, v20);
        }
        unint64_t v47 = v15;
        _dispatch_introspection_order_check(0LL, a1, v7, v2, v9);
        uint64_t v48 = v11;
        if (backtrace(&v49, 128) < 2) {
          int v21 = 0;
        }
        else {
          int v21 = backtrace(&v49, 128) - 1;
        }
        uint64_t v22 = 8LL * v21;
        int v23 = *(_DWORD *)(a1 + 80);
        if ((v23 & 0x200000) != 0) {
          size_t v24 = v22 + strlen(*(const char **)(a1 + 72)) + 73;
        }
        else {
          size_t v24 = v22 + 72;
        }
        int v46 = *(_DWORD *)(v2 + 80);
        if ((v46 & 0x200000) != 0) {
          v24 += strlen(*(const char **)(v2 + 72)) + 1;
        }
        BOOL v25 = _dispatch_calloc(1uLL, v24);
        v25[6] = v7;
        _BYTE v25[7] = v9;
        *((_DWORD *)v25 + 16) = v21;
        memcpy(v25 + 9, &v50, 8LL * v21);
        unsigned int v26 = (char *)&v25[v21 + 9];
        unint64_t v27 = *(const char **)(a1 + 72);
        if ((v23 & 0x200000) != 0)
        {
          unsigned int v29 = strcpy(v26, v27);
          v25[4] = v26;
          v26 += strlen(v29) + 1;
        }

        else
        {
          if (v27) {
            uint64_t v28 = *(void **)(a1 + 72);
          }
          else {
            uint64_t v28 = &unk_416DE;
          }
          v25[4] = v28;
        }

        unsigned int v30 = *(const char **)(v2 + 72);
        if ((v46 & 0x200000) != 0)
        {
          strcpy(v26, v30);
        }

        else if (v30)
        {
          unsigned int v26 = *(char **)(v2 + 72);
        }

        else
        {
          unsigned int v26 = (char *)&unk_416DE;
        }

        v25[5] = v26;
        unsigned int v31 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        while (!__ldaxr(v12))
        {
          if (!__stxr(v31, v12)) {
            goto LABEL_48;
          }
        }

        __clrex();
        _dispatch_unfair_lock_lock_slow((uint64_t)v12, 0x10000);
LABEL_48:
        uint64_t v33 = v47;
        while (1)
        {
          uint64_t v33 = (void *)*v33;
          if (!v33) {
            break;
          }
          if (v33[7] == v9)
          {
            unsigned int v34 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
            do
              unsigned int v35 = __ldxr(v12);
            while (__stlxr(0, v12));
            if (v35 != v34) {
              _dispatch_unfair_lock_unlock_slow((uint64_t)v12, v35);
            }
            free(v25);
            return;
          }
        }

        uint64_t v36 = *v47;
        *BOOL v25 = *v47;
        if (v36) {
          *(void *)(v36 + 8) = v25;
        }
        *unint64_t v47 = v25;
        v25[1] = v47;
        unsigned int v37 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        do
          unsigned int v38 = __ldxr(v12);
        while (__stlxr(0, v12));
        if (v38 != v37) {
          _dispatch_unfair_lock_unlock_slow((uint64_t)v12, v38);
        }
        uint64_t v39 = (unsigned int *)(v48 + 36);
        unsigned int v40 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        while (!__ldaxr(v39))
        {
          if (!__stxr(v40, v39)) {
            goto LABEL_67;
          }
        }

        __clrex();
        _dispatch_unfair_lock_lock_slow(v48 + 36, 0x10000);
LABEL_67:
        uint64_t v43 = (void *)(v48 + 48);
        uint64_t v42 = *(void *)(v48 + 48);
        v25[2] = v42;
        if (v42) {
          *(void *)(v42 + 24) = v25 + 2;
        }
        *uint64_t v43 = v25;
        void v25[3] = v43;
        unsigned int v44 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
        do
          unsigned int v45 = __ldxr(v39);
        while (__stlxr(0, v39));
        if (v45 != v44) {
          _dispatch_unfair_lock_unlock_slow((uint64_t)v39, v45);
        }
      }
    }
  }

uint64_t _dispatch_introspection_order_check(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = result;
  unsigned int v17 = 0LL;
  uint64_t v8 = *(void *)(a5 + 40);
  uint64_t v9 = (unsigned int *)(v8 + 32);
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned int v11 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(v9))
  {
    if (!__stxr(v11, v9)) {
      goto LABEL_6;
    }
  }

  __clrex();
  uint64_t result = _dispatch_unfair_lock_lock_slow(v8 + 32, 0x10000);
LABEL_6:
  for (uint64_t i = *(void **)(v8 + 40); ; uint64_t i = (void *)*v17)
  {
    unsigned int v17 = i;
    if (!i) {
      break;
    }
    if (i[7] == a3) {
      _dispatch_introspection_lock_inversion_fail(&v16, a2, a4);
    }
    uint64_t result = _dispatch_introspection_order_check(&v16, a2, a3, a4);
  }

  unsigned int v14 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    unsigned int v15 = __ldxr(v9);
  while (__stlxr(0, v9));
  if (v15 != v14) {
    return _dispatch_unfair_lock_unlock_slow(v8 + 32, v15);
  }
  return result;
}

void _dispatch_introspection_target_queue_changed(uint64_t a1)
{
  if (byte_61298)
  {
    if ((*(_DWORD *)(a1 + 80) & 0x100000) != 0)
    {
      _dispatch_introspection_target_queue_changed_cold_2((void *)a1);
    }

    else if (*(void *)(*(void *)(a1 + 40) + 40LL))
    {
      _dispatch_introspection_target_queue_changed_cold_1((void *)a1, (uint64_t *)(a1 + 40));
    }
  }

void _dispatch_introspection_lock_inversion_fail(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _simple_salloc();
  uint64_t v7 = v6;
  uint64_t v8 = (const char *)&unk_416DE;
  uint64_t v9 = *(const char **)(a3 + 72);
  if (!v9) {
    uint64_t v9 = (const char *)&unk_416DE;
  }
  if (*(void *)(a2 + 72)) {
    uint64_t v8 = *(const char **)(a2 + 72);
  }
  _simple_sprintf( v6,  "%s Lock inversion detected\nqueue [%s] trying to sync onto queue [%s] conflicts\n",  "BUG IN CLIENT OF LIBDISPATCH: Assertion failed: ",  v9,  v8);
  if (a1)
  {
    uint64_t v10 = "with";
    do
    {
      uint64_t v11 = a1[1];
      _simple_sprintf( v7,  "%s queue [%s] syncing onto queue [%s] at:\n",  v10,  *(const char **)(v11 + 40),  *(const char **)(v11 + 32));
      uint64_t v12 = backtrace_symbols((void *const *)(v11 + 72), *(_DWORD *)(v11 + 64));
      if (v12)
      {
        unsigned int v13 = v12;
        if (*(int *)(v11 + 64) >= 1)
        {
          uint64_t v14 = 0LL;
          do
            _simple_sprintf(v7, "%s\n", v13[v14++]);
          while (v14 < *(int *)(v11 + 64));
        }

        free(v13);
      }

      else
      {
        _simple_sappend(v7, "<missing backtrace>\n");
      }

      a1 = (void *)*a1;
      uint64_t v10 = "and";
    }

    while (a1);
  }

  byte_61298 = 0;
  unsigned int v15 = (const char *)_simple_string(v7);
  _dispatch_log("%s", v15);
  qword_61228 = (uint64_t)v15;
  __break(1u);
}

uint64_t _dispatch_send_wakeup_runloop_thread(mach_port_t a1, mach_msg_timeout_t timeout)
{
  msg.mach_msg_bits_t msgh_bits = 19;
  msg.mach_port_t msgh_remote_port = a1;
  msg.mach_port_t msgh_local_port = 0;
  msg.mach_port_name_t msgh_voucher_port = 0;
  msg.mach_msg_id_t msgh_id = 78;
  uint64_t v2 = mach_msg(&msg, 17, 0x18u, 0, 0, timeout, 0);
  if ((_DWORD)v2 == 268435460)
  {
    if ((msg.msgh_bits & 0x1F00) == 0x1100) {
      mach_port_deallocate(mach_task_self_, msg.msgh_local_port);
    }
    mach_msg_destroy(&msg);
  }

  return v2;
}

uint64_t _dispatch_send_consume_send_once_right(mach_port_t a1)
{
  msg.mach_msg_bits_t msgh_bits = 18;
  msg.mach_port_t msgh_remote_port = a1;
  msg.mach_port_t msgh_local_port = 0;
  msg.mach_port_name_t msgh_voucher_port = 0;
  msg.mach_msg_id_t msgh_id = 79;
  return mach_msg(&msg, 1, 0x18u, 0, 0, 0, 0);
}

uint64_t (*libdispatch_internal_protocol_server_routine(uint64_t a1))()
{
  int v1 = *(_DWORD *)(a1 + 20);
  else {
    return 0LL;
  }
}

_DWORD *_Xmach_notify_port_deleted(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }

  else
  {
    uint64_t result = (_DWORD *)_dispatch_mach_notify_port_deleted(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }

  return result;
}

_DWORD *_Xmach_notify_send_possible(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }

  else
  {
    uint64_t result = (_DWORD *)_dispatch_mach_notify_send_possible(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }

  return result;
}

uint64_t _Xmach_notify_port_destroyed(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 && *(_DWORD *)(result + 24) == 1 && *(_DWORD *)(result + 4) == 40)
  {
    int v2 = -300;
  }

  else
  {
    int v2 = -304;
  }

  *(_DWORD *)(a2 + 32) = v2;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *_Xmach_notify_no_senders(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) == 0 && result[1] == 36) {
    _dispatch_mach_notify_no_senders(result[3], result[8]);
  }
  *(_DWORD *)(a2 + 32) = -304;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

_DWORD *_Xmach_notify_send_once(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }

  else
  {
    uint64_t result = (_DWORD *)_dispatch_wakeup_runloop_thread();
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }

  return result;
}

_DWORD *_Xmach_notify_dead_name(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }

  else
  {
    uint64_t result = (_DWORD *)_dispatch_mach_notify_dead_name(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }

  return result;
}

_DWORD *_Xwakeup_runloop_thread(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }

  else
  {
    uint64_t result = (_DWORD *)_dispatch_wakeup_runloop_thread();
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }

  return result;
}

_DWORD *_Xconsume_send_once_right(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }

  else
  {
    uint64_t result = (_DWORD *)_dispatch_wakeup_runloop_thread();
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }

  return result;
}

uint64_t libdispatch_internal_protocol_server(_DWORD *a1, uint64_t a2)
{
  int v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  int v3 = a1[5] + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 2_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v3;
  int v4 = a1[5];
  if ((v4 - 80) >= 0xFFFFFFF0
    && (uint64_t v5 = (void (*)(void))_dispatch_libdispatch_internal_protocol_subsystem[5 * (v4 - 64) + 5]) != 0LL)
  {
    v5();
    return 1LL;
  }

  else
  {
    uint64_t result = 0LL;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 32) = -303;
  }

  return result;
}

uint64_t firehose_send_register(int a1, int a2, uint64_t a3, int a4, int a5, int a6, int a7, uint64_t a8)
{
  int v11 = a2;
  int v12 = 1114112;
  int v13 = a4;
  int v14 = 0x100000;
  int v15 = a5;
  int v16 = 0x100000;
  int v17 = a6;
  int v18 = 1310720;
  int v19 = a7;
  int v20 = 1114112;
  NDR_record_t v21 = NDR_record;
  uint64_t v22 = a3;
  uint64_t v23 = a8;
  v9[0] = -2147483629;
  void v9[2] = a1;
  __int128 v10 = xmmword_40500;
  return mach_msg((mach_msg_header_t *)v9, 1, 0x70u, 0, 0, 0, 0);
}

uint64_t firehose_send_push_and_wait(mach_port_t a1, _OWORD *a2, _DWORD *a3)
{
  msg.mach_port_t msgh_remote_port = a1;
  msg.mach_port_t msgh_local_port = mig_get_special_reply_port();
  msg.mach_msg_bits_t msgh_bits = 5395;
  *(void *)&msg.mach_port_name_t msgh_voucher_port = 0x2D5100000000LL;
  uint64_t v5 = mach_msg(&msg, 3162115, 0x18u, 0x40u, msg.msgh_local_port, 0, 0);
  uint64_t v6 = v5;
  if ((v5 - 268435458) > 0xE || ((1 << (v5 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v5)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v6 = 4294966988LL;
      }

      else if (msg.msgh_id == 11701)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 56)
          {
            if (!msg.msgh_remote_port)
            {
              uint64_t v6 = v10;
              if (!v10)
              {
                *a2 = v11;
                *a3 = v12;
                return v6;
              }

              goto LABEL_20;
            }
          }

          else if (msg.msgh_size == 36)
          {
            if (msg.msgh_remote_port) {
              BOOL v7 = 1;
            }
            else {
              BOOL v7 = v10 == 0;
            }
            if (v7) {
              uint64_t v6 = 4294966996LL;
            }
            else {
              uint64_t v6 = v10;
            }
            goto LABEL_20;
          }
        }

        uint64_t v6 = 4294966996LL;
      }

      else
      {
        uint64_t v6 = 4294966995LL;
      }

LABEL_20:
      mach_msg_destroy(&msg);
      return v6;
    }

    mig_dealloc_special_reply_port(msg.msgh_local_port);
  }

  return v6;
}

      mach_msg_destroy(&v7);
      return v4;
    }

    mig_dealloc_special_reply_port(v7.msgh_local_port);
  }

  return v4;
}

uint64_t firehose_send_push_async(mach_port_t a1, int a2, mach_msg_timeout_t timeout)
{
  NDR_record_t v6 = NDR_record;
  int v7 = a2;
  msg.mach_msg_bits_t msgh_bits = 19;
  msg.mach_port_t msgh_remote_port = a1;
  msg.mach_msg_id_t msgh_id = 11602;
  *(void *)&msg.mach_port_t msgh_local_port = 0LL;
  uint64_t v3 = mach_msg(&msg, 17, 0x24u, 0, 0, timeout, 0);
  if ((_DWORD)v3 == 268435460)
  {
    if ((msg.msgh_bits & 0x1F00) == 0x1100) {
      mach_port_deallocate(mach_task_self_, msg.msgh_local_port);
    }
    mach_msg_destroy(&msg);
  }

  return v3;
}

uint64_t firehose_send_get_logging_prefs(mach_port_t a1, _DWORD *a2, void *a3)
{
  v8.mach_port_t msgh_remote_port = a1;
  v8.mach_port_t msgh_local_port = mig_get_special_reply_port();
  v8.mach_msg_bits_t msgh_bits = 5395;
  *(void *)&v8.mach_port_name_t msgh_voucher_port = 0x2D5300000000LL;
  uint64_t v5 = mach_msg(&v8, 3162115, 0x18u, 0x40u, v8.msgh_local_port, 0, 0);
  uint64_t v6 = v5;
  if ((v5 - 268435458) > 0xE || ((1 << (v5 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v5)
    {
      if (v8.msgh_id == 71)
      {
        uint64_t v6 = 4294966988LL;
      }

      else if (v8.msgh_id == 11703)
      {
        if ((v8.msgh_bits & 0x80000000) == 0)
        {
          if (v8.msgh_size == 36)
          {
            uint64_t v6 = 4294966996LL;
            if (v11)
            {
              if (v8.msgh_remote_port) {
                uint64_t v6 = 4294966996LL;
              }
              else {
                uint64_t v6 = v11;
              }
            }
          }

          else
          {
            uint64_t v6 = 4294966996LL;
          }

          goto LABEL_21;
        }

        uint64_t v6 = 4294966996LL;
        if (v9 == 1 && v8.msgh_size == 56 && !v8.msgh_remote_port && v12 << 16 == 1114112)
        {
          uint64_t v6 = 0LL;
          *a2 = v10;
          *a3 = v13;
          return v6;
        }
      }

      else
      {
        uint64_t v6 = 4294966995LL;
      }

uint64_t firehose_send_should_send_strings(mach_port_t a1, _DWORD *a2)
{
  v7.mach_port_t msgh_remote_port = a1;
  v7.mach_port_t msgh_local_port = mig_get_special_reply_port();
  v7.mach_msg_bits_t msgh_bits = 5395;
  *(void *)&v7.mach_port_name_t msgh_voucher_port = 0x2D5400000000LL;
  uint64_t v3 = mach_msg(&v7, 3162115, 0x18u, 0x30u, v7.msgh_local_port, 0, 0);
  uint64_t v4 = v3;
  if ((v3 - 268435458) > 0xE || ((1 << (v3 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v3)
    {
      if (v7.msgh_id == 71)
      {
        uint64_t v4 = 4294966988LL;
      }

      else if (v7.msgh_id == 11704)
      {
        if ((v7.msgh_bits & 0x80000000) == 0)
        {
          if (v7.msgh_size == 40)
          {
            if (!v7.msgh_remote_port)
            {
              uint64_t v4 = v8;
              if (!v8)
              {
                *a2 = v9;
                return v4;
              }

              goto LABEL_20;
            }
          }

          else if (v7.msgh_size == 36)
          {
            if (v7.msgh_remote_port) {
              BOOL v5 = 1;
            }
            else {
              BOOL v5 = v8 == 0;
            }
            if (v5) {
              uint64_t v4 = 4294966996LL;
            }
            else {
              uint64_t v4 = v8;
            }
            goto LABEL_20;
          }
        }

        uint64_t v4 = 4294966996LL;
      }

      else
      {
        uint64_t v4 = 4294966995LL;
      }

uint64_t (*firehoseReply_server_routine(uint64_t a1))()
{
  int v1 = *(_DWORD *)(a1 + 20);
  else {
    return 0LL;
  }
}

_DWORD *_Xpush_reply(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) == 0 && result[1] == 56) {
    firehose_client_push_reply(result[3], result[8]);
  }
  *(_DWORD *)(a2 + 32) = -304;
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t _Xpush_notify_async(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 52)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
  }

  else
  {
    uint64_t result = firehose_client_push_notify_async( *(unsigned int *)(result + 12),  *(void *)(result + 32),  *(void *)(result + 40),  *(_DWORD *)(result + 48));
    *(_DWORD *)(a2 + 32) = result;
  }

  return result;
}

uint64_t firehoseReply_server(_DWORD *a1, uint64_t a2)
{
  int v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  int v3 = a1[5] + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 2_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 0) = v3;
  int v4 = a1[5];
  if ((v4 - 11705) >= 0xFFFFFFFB
    && (BOOL v5 = (void (*)(void))firehose_client_firehoseReply_subsystem[5 * (v4 - 11700) + 5]) != 0LL)
  {
    v5();
    return 1LL;
  }

  else
  {
    uint64_t result = 0LL;
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 32) = -303;
  }

  return result;
}

void os_eventlink_create_with_port_cold_1()
{
  uint64_t v0 = OUTLINED_FUNCTION_0();
  _os_crash(v0);
  __break(1u);
}

void _os_workgroup_interval_xref_dispose_cold_1()
{
}

void _os_workgroup_tsd_cleanup_cold_1(char *a1, uint64_t a2)
{
}

void _os_workgroup_leave_update_wg_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Joined count underflowed";
  __break(1u);
}

void _os_workgroup_set_name_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Invalid workgroup port";
  qword_61258 = 0xFFFFFFFFLL;
  __break(1u);
}

void os_workgroup_create_with_workload_id_cold_1(int a1)
{
}

void os_workgroup_create_with_workload_id_cold_2()
{
}

void _os_workgroup_set_work_interval_workload_id_cold_1(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Invalid workgroup port";
  qword_61258 = a1;
  __break(1u);
}

void os_workgroup_interval_create_with_workload_id_cold_1(int a1)
{
}

void os_workgroup_interval_create_with_workload_id_cold_2()
{
}

void os_workgroup_leave_cold_1()
{
}

void os_workgroup_leave_cold_3()
{
}

void os_workgroup_leave_cold_4()
{
}

void os_workgroup_leave_cold_5()
{
}

void os_workgroup_copy_port_cold_3()
{
}

void os_workgroup_create_with_port_cold_1(char *a1, uint64_t a2)
{
  OUTLINED_FUNCTION_5(a1, a2, "BUG IN DISPATCH: Invalid wi flags = %u");
  OUTLINED_FUNCTION_4();
  __break(1u);
}

void os_workgroup_create_with_port_cold_2()
{
}

void os_workgroup_create_with_workload_id_and_port_cold_2(int a1)
{
}

void os_workgroup_create_with_workload_id_and_port_cold_3(int a1)
{
}

void os_workgroup_create_with_workload_id_and_workgroup_cold_1()
{
}

void _os_workgroup_join_update_wg_cold_1()
{
  __assert_rtn("_os_workgroup_join_update_wg", "workgroup.c", 1653, "cur_wg == NULL");
}

void os_workgroup_get_working_arena_cold_1()
{
}

void os_workgroup_get_working_arena_cold_2()
{
}

void os_workgroup_get_working_arena_cold_3()
{
}

void _os_workgroup_pthread_start_cold_1(int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: pthread_start os_workgroup_join failed";
  qword_61258 = a1;
  __break(1u);
}

void _wg_type_to_wi_flags_cold_1()
{
}

void _os_workgroup_lookup_type_from_workload_id_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Workload identifier must not be NULL";
  __break(1u);
}

void _dispatch_bug(uint64_t a1, uint64_t a2)
{
  if (qword_61360 != -1) {
    dispatch_once_f(&qword_61360, 0LL, (dispatch_function_t)_dispatch_build_init);
  }
  uint64_t v5 = qword_61368;
  qword_61368 = v2;
  if (v2 != v5) {
    _dispatch_log("BUG in libdispatch: %s - %lu - 0x%lx", byte_61390, a1, a2);
  }
  OUTLINED_FUNCTION_2();
}

void _dispatch_log(char *__format, ...)
{
  if (qword_61388 != -1) {
    dispatch_once_f(&qword_61388, 0LL, (dispatch_function_t)_dispatch_logv_init);
  }
  if ((_MergedGlobals & 1) == 0)
  {
    if (dispatch_logfile == -1)
    {
      vasprintf(&v2, __format, va);
      if (v2)
      {
        _simple_asl_log(5LL, "com.apple.libsystem.libdispatch");
        free(v2);
      }
    }

    else
    {
      _dispatch_logv_file(__format, va);
    }
  }

  OUTLINED_FUNCTION_4_0();
}

void _dispatch_bug_mach_client(const char *a1, mach_error_t error_value)
{
  uint64_t v3 = _dispatch_bug_mach_client_last_seen;
  _dispatch_bug_mach_client_last_seen = v2;
  if (v2 == v3
    || (uint64_t v6 = mach_error_string(error_value),
        _dispatch_log("BUG in libdispatch client: %s %s - 0x%x", a1, v6, error_value),
        mach_msg_header_t v7 = mach_error_string(error_value),
        _dispatch_fault( (uint64_t)"LIBDISPATCH_STRICT: _dispatch_bug_mach_client",  "BUG in libdispatch client: %s %s - 0x%x",  a1,  v7,  error_value),  OUTLINED_FUNCTION_0_1(),  (v8 & 1) == 0))
  {
    OUTLINED_FUNCTION_2();
  }

  else
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: LIBDISPATCH_STRICT: _dispatch_bug_mach_client";
    __break(1u);
  }

void _dispatch_bug_kevent_client( const char *a1, const char *a2, const char *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v8 = (const char *)v7;
  LODWORD(v1_dispatch_source_set_handler((uint64_t)source, (void (**)(uint64_t))handler, 2LL, 1) = a4;
  if (a7)
  {
    uint64_t v15 = *(void *)(*(void *)~*(void *)(a7 + 8) + 40LL);
    if (v15 == 787)
    {
      uint64_t function_symbol = *(const void **)(a7 + 40);
    }

    else if (v15 == 275 && (int v16 = *(void **)(a7 + 40)) != 0LL)
    {
      uint64_t function_symbol = (const void *)_dispatch_continuation_get_function_symbol(v16);
    }

    else
    {
      uint64_t function_symbol = 0LL;
    }

    a2 = **(const char ***)a7;
    if (!a3) {
      goto LABEL_15;
    }
  }

  else
  {
    uint64_t function_symbol = 0LL;
    if (!a3) {
      goto LABEL_15;
    }
  }

  if ((_DWORD)v11)
  {
    uint64_t v19 = qword_61370;
    qword_61370 = v7;
    if (v7 == v19) {
      return;
    }
    OUTLINED_FUNCTION_5_0();
    OUTLINED_FUNCTION_3_0();
    char v8 = "BUG in libdispatch client: %s %s: %s - 0x%x { 0x%llx[%s], ident: %lld / 0x%llx, handler: %p }";
    _dispatch_log( "BUG in libdispatch client: %s %s: %s - 0x%x { 0x%llx[%s], ident: %lld / 0x%llx, handler: %p }",  a1,  v27,  v29,  v31,  v33,  v35,  v37,  v39,  v41);
    OUTLINED_FUNCTION_5_0();
    OUTLINED_FUNCTION_3_0();
    _dispatch_fault( (uint64_t)"LIBDISPATCH_STRICT: _dispatch_bug_kevent_client",  "BUG in libdispatch client: %s %s: %s - 0x%x { 0x%llx[%s], ident: %lld / 0x%llx, handler: %p }",  a1,  v28,  v30,  v32,  v34,  v36,  v38,  v40,  v42);
    OUTLINED_FUNCTION_0_1();
    if ((v20 & 1) == 0) {
      return;
    }
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: LIBDISPATCH_STRICT: _dispatch_bug_kevent_client";
    __break(1u);
  }

void _dispatch_bug_kevent_vanished(uint64_t a1)
{
  if (*(void *)(*(void *)~*(void *)(a1 + 8) + 40LL) == 275LL)
  {
    uint64_t v2 = *(void **)(a1 + 40);
    if (v2) {
      _dispatch_continuation_get_function_symbol(v2);
    }
  }

  uint64_t v3 = _dispatch_bug_kevent_vanished_last_seen;
  _dispatch_bug_kevent_vanished_last_seen = v1;
  if (v1 != v3)
  {
    OUTLINED_FUNCTION_1_0();
    _dispatch_log( "BUG in libdispatch client: %s, monitored resource vanished before the source cancel handler was invoked { %p[%s], ident: %d / 0x%x, handler: %p }",  v5,  v7,  v9,  v11,  v13,  v15);
    OUTLINED_FUNCTION_1_0();
    _dispatch_fault( (uint64_t)"LIBDISPATCH_STRICT: _dispatch_bug_kevent_vanished",  "BUG in libdispatch client: %s, monitored resource vanished before the source cancel handler was invoked { %p[%s], ident: %d / 0x%x, handler: %p }",  v6,  v8,  v10,  v12,  v14,  v16);
    OUTLINED_FUNCTION_0_1();
    if ((v4 & 1) != 0)
    {
      qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: LIBDISPATCH_STRICT: _dispatch_bug_kevent_vanished";
      __break(1u);
    }
  }

void _dispatch_bug_deprecated(const char *a1)
{
  uint64_t v2 = _dispatch_bug_deprecated_last_seen;
  _dispatch_bug_deprecated_last_seen = v1;
  if (v1 == v2
    || (_dispatch_log( "DEPRECATED USE in libdispatch client: %s; set a breakpoint on _dispatch_bug_deprecated to debug",
          a1),
        _dispatch_fault( (uint64_t)"LIBDISPATCH_STRICT: _dispatch_bug_deprecated",  "DEPRECATED USE in libdispatch client: %s; set a breakpoint on _dispatch_bug_deprecated to debug",
          a1),
        OUTLINED_FUNCTION_0_1(),
        (v4 & 1) == 0))
  {
    OUTLINED_FUNCTION_4_0();
  }

  else
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: LIBDISPATCH_STRICT: _dispatch_bug_deprecated";
    __break(1u);
  }

void dispatch_debug(dispatch_object_t object, const char *message, ...)
{
}

void _dispatch_queue_attr_to_info_cold_1(uint64_t *a1)
{
  uint64_t v1 = *a1;
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid queue attribute";
  qword_61258 = v1;
  __break(1u);
}

uint64_t _dispatch_fault_cold_1(const char *a1, uint64_t a2)
{
  int v4 = strlen(a1);
  return os_fault_with_payload(18LL, 2LL, a1, (v4 + 1), a2, 0LL);
}

void _dispatch_continuation_get_function_symbol_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corruption of dispatch block object";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_strdup_if_mutable_cold_1()
{
}

void _dispatch_Block_copy_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: NULL was passed where a block should have been";
  __break(1u);
}

size_t _dispatch_object_debug_attr(uint64_t a1, char *__str, size_t __size)
{
  int v4 = snprintf(__str, __size, "xref = %d, ref = %d, ", *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 8));
  size_t v5 = v4;
  if (v4 >= 0) {
    return v5;
  }
  else {
    return 0LL;
  }
}

void _os_object_retain_weak_cold_1()
{
  qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
}

void _os_object_allows_weak_reference_cold_1()
{
  qword_61228 = (uint64_t)"API MISUSE: Over-release of an object";
  __break(1u);
}

void _dispatch_dispose_cold_1(uint64_t *a1)
{
  uint64_t v1 = *a1;
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Release while enqueued";
  qword_61258 = v1;
  __break(1u);
}

void dispatch_set_target_queue_cold_2()
{
  qword_61228 = (uint64_t)"API MISUSE: Resurrection of an object";
  __break(1u);
}

void dispatch_set_target_queue_cold_3(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot target the cooperative root queue - not implemented";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_suspend_cold_1()
{
  qword_61228 = (uint64_t)"API MISUSE: Object type does not support suspension";
  __break(1u);
}

void dispatch_resume_cold_1()
{
  qword_61228 = (uint64_t)"API MISUSE: Object type does not support resume";
  __break(1u);
}

uint64_t _dispatch_objc_debug(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0LL;
  id v5 = [a1 debugDescription];
  objc_msgSend( v5,  "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:",  a2,  a3 - 1,  &v7,  4,  0,  0,  objc_msgSend(v5, "length"),  0);
  uint64_t result = v7;
  if (v7) {
    *(_BYTE *)(a2 + v7) = 0;
  }
  return result;
}

void _dispatch_sema4_create_slow_cold_1(int a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: mach semaphore API failure";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_sema4_create_slow_cold_2()
{
  qword_61228 = (uint64_t)"MIG_REPLY_MISMATCH";
  qword_61258 = -301LL;
  __break(1u);
}

void _dispatch_sema4_create_slow_cold_3()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Use-after-free of dispatch_semaphore_t or dispatch_group_t";
  qword_61258 = 15LL;
  __break(1u);
}

void _dispatch_thread_event_wait_slow_cold_1(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corrupt thread event value";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_unfair_lock_lock_slow_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: trying to lock recursively";
  __break(1u);
}

void _dispatch_unfair_lock_unlock_slow_cold_1(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: lock not owned by current thread";
  qword_61258 = a1;
  __break(1u);
}

void _dlock_wait_cold_1(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: ulock_wait() failed";
  qword_61258 = a1;
  __break(1u);
}

void _dlock_wait_cold_2(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Owner in ulock is unknown - possible memory corruption";
  qword_61258 = a1;
  __break(1u);
}

void _dlock_wake_cold_1(int a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: ulock_wake() failed";
  qword_61258 = -a1;
  __break(1u);
}

size_t _dispatch_semaphore_debug(uint64_t a1, char *a2, size_t a3)
{
  ClassName = object_getClassName((id)a1);
  int v7 = snprintf(a2, a3, "%s[%p] = { ", ClassName + 12, (const void *)a1);
  size_t v8 = v7;
  if (v7 >= 0) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = 0LL;
  }
  size_t v10 = v9 + _dispatch_object_debug_attr(a1, &a2[v9], a3 - v9);
  int v11 = snprintf(&a2[v10], a3 - v10, "port = 0x%x, ", *(_DWORD *)(a1 + 64));
  size_t v12 = v11;
  if (v11 < 0) {
    size_t v12 = 0LL;
  }
  size_t v13 = v12 + v10;
  size_t v14 = a3 - (v12 + v10);
  int v15 = snprintf(&a2[v12 + v10], v14, "value = %ld, orig = %ld }", *(void *)(a1 + 48), *(void *)(a1 + 56));
  size_t v16 = v15;
  if (v15 < 0) {
    size_t v16 = 0LL;
  }
  return v16 + v13;
}

size_t _dispatch_group_debug(void *a1, char *a2, size_t a3)
{
  uint64_t v6 = a1[6];
  ClassName = object_getClassName(a1);
  int v8 = snprintf(a2, a3, "%s[%p] = { ", ClassName + 12, a1);
  size_t v9 = v8;
  if (v8 >= 0) {
    size_t v10 = v9;
  }
  else {
    size_t v10 = 0LL;
  }
  size_t v11 = v10 + _dispatch_object_debug_attr((uint64_t)a1, &a2[v10], a3 - v10);
  size_t v12 = a3 - v11;
  int v13 = snprintf( &a2[v11],  v12,  "count = %u, gen = %d, waiters = %d, notifs = %d }",  -(v6 & 0xFFFFFFFC) >> 2,  HIDWORD(v6),  v6 & 1,  (v6 >> 1) & 1);
  size_t v14 = v13;
  if (v13 < 0) {
    size_t v14 = 0LL;
  }
  return v14 + v11;
}

void _dispatch_semaphore_dispose_cold_1(void *a1, uint64_t a2)
{
  uint64_t v2 = a2 - *a1;
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Semaphore object deallocated while in use (current value < original value)";
  qword_61258 = v2;
  __break(1u);
}

void _dispatch_group_dispose_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Group object deallocated while in use";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_group_leave_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unbalanced call to dispatch_group_leave()";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_group_enter_cold_2(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Too many nested calls to dispatch_group_enter()";
  qword_61258 = a1;
  __break(1u);
}

uint64_t _dispatch_queue_debug_attr(uint64_t a1, char *a2, unint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 24);
  int v7 = &unk_416DE;
  if (v6 && *(void *)(v6 + 72)) {
    int v7 = *(void **)(v6 + 72);
  }
  unint64_t v8 = *(void *)(a1 + 56);
  uint64_t v54 = *(unsigned __int16 *)(a1 + 80);
  uint64_t v55 = v8;
  unsigned int v52 = v7;
  uint64_t v53 = *(void *)(a1 + 24);
  uint64_t v51 = (*(_DWORD *)(a1 + 96) + 1);
  int v9 = OUTLINED_FUNCTION_3_1(a2, (uint64_t)a2, "sref = %d, target = %s[%p], width = 0x%x, state = 0x%016llx");
  unint64_t v11 = v9;
  if (v9 >= 0) {
    unint64_t v12 = v11;
  }
  else {
    unint64_t v12 = 0LL;
  }
  if (v8 >> 55)
  {
    int v13 = (char *)OUTLINED_FUNCTION_2_0();
    uint64_t v51 = v8 >> 58;
    OUTLINED_FUNCTION_1_1(v13, v14, ", suspended = %d");
    OUTLINED_FUNCTION_0_2();
    if (v16 < 0) {
      uint64_t v15 = 0LL;
    }
    v12 += v15;
  }

  uint64_t v17 = v8 & 0x180000000000000LL;
  if ((v8 & 0x180000000000000LL) == 0x80000000000000LL)
  {
    int v18 = (char *)OUTLINED_FUNCTION_2_0();
    char v20 = ", activating";
  }

  else if (v17 == 0x100000000000000LL)
  {
    int v18 = (char *)OUTLINED_FUNCTION_2_0();
    char v20 = ", activated";
  }

  else
  {
    if (v17 != 0x180000000000000LL) {
      goto LABEL_22;
    }
    int v18 = (char *)OUTLINED_FUNCTION_2_0();
    char v20 = ", inactive";
  }

  OUTLINED_FUNCTION_1_1(v18, v19, v20);
  OUTLINED_FUNCTION_0_2();
  if (v22 < 0) {
    uint64_t v21 = 0LL;
  }
  v12 += v21;
LABEL_22:
  if ((v8 & 0x4000000001LL) != 0)
  {
    uint64_t v23 = (char *)OUTLINED_FUNCTION_2_0();
    OUTLINED_FUNCTION_1_1(v23, v24, ", enqueued");
    OUTLINED_FUNCTION_0_2();
    if (v26 < 0) {
      uint64_t v25 = 0LL;
    }
    v12 += v25;
  }

  if ((v8 & 0x8000000000LL) != 0)
  {
    unint64_t v27 = (char *)OUTLINED_FUNCTION_2_0();
    OUTLINED_FUNCTION_1_1(v27, v28, ", dirty");
    OUTLINED_FUNCTION_0_2();
    if (v30 < 0) {
      uint64_t v29 = 0LL;
    }
    v12 += v29;
  }

  if ((v8 & 0x700000000LL) != 0)
  {
    uint64_t v51 = HIDWORD(v8) & 7;
    OUTLINED_FUNCTION_1_1(&a2[v12], v10, ", max qos %d");
    OUTLINED_FUNCTION_0_2();
    if (v32 < 0) {
      uint64_t v31 = 0LL;
    }
    v12 += v31;
  }

  if (v8 >= 4 && ((*(_DWORD *)(a1 + 80) & 0x40000) == 0 || (*(_DWORD *)(a1 + 80) & 0x1000000) != 0))
  {
    uint64_t v51 = v8 | 3;
    OUTLINED_FUNCTION_1_1(&a2[v12], v10, ", draining on 0x%x");
    OUTLINED_FUNCTION_0_2();
    if (v34 < 0) {
      uint64_t v33 = 0LL;
    }
    v12 += v33;
  }

  unsigned int v35 = (char *)OUTLINED_FUNCTION_2_0();
  if ((v8 & 0x40000000000000LL) != 0)
  {
    OUTLINED_FUNCTION_1_1(v35, v36, ", in-barrier");
    OUTLINED_FUNCTION_0_2();
    if (v43 < 0) {
      uint64_t v41 = 0LL;
    }
    uint64_t v39 = v8 & 0x10000000000LL;
  }

  else
  {
    uint64_t v37 = (v8 >> 41) & 0x1FFF;
    LODWORD(v38) = v37 + *(unsigned __int16 *)(a1 + 80) - 4096;
    uint64_t v39 = v8 & 0x10000000000LL;
    if (v39) {
      uint64_t v38 = (v37 - 4095);
    }
    else {
      uint64_t v38 = v38;
    }
    uint64_t v51 = v38;
    OUTLINED_FUNCTION_1_1(v35, v36, ", in-flight = %d");
    OUTLINED_FUNCTION_0_2();
    if (v42 < 0) {
      uint64_t v41 = 0LL;
    }
  }

  uint64_t v44 = v41 + v12;
  if (v39)
  {
    int v45 = snprintf(&a2[v44], a3 - v44, ", pending-barrier", v51, v52, v53, v54, v55);
    uint64_t v46 = v45;
    if (v45 < 0) {
      uint64_t v46 = 0LL;
    }
    v44 += v46;
  }

  if ((*(_DWORD *)(a1 + 80) & 0x40000) != 0 && (*(_DWORD *)(a1 + 80) & 0x1000000) == 0)
  {
    unint64_t v47 = a3 - v44;
    int v48 = OUTLINED_FUNCTION_3_1(&a2[v44], v40, ", thread = 0x%x ");
    unint64_t v49 = v48;
    if (v48 < 0) {
      unint64_t v49 = 0LL;
    }
    v44 += v49;
  }

  return v44;
}

uint64_t _dispatch_queue_debug(id a1, char *a2, unint64_t a3)
{
  if (!*((void *)a1 + 9)) {
    object_getClassName(a1);
  }
  int v6 = OUTLINED_FUNCTION_3_1(a2, (uint64_t)a2, "%s[%p] = { ");
  unint64_t v7 = v6;
  if (v6 >= 0) {
    unint64_t v8 = v7;
  }
  else {
    unint64_t v8 = 0LL;
  }
  size_t v9 = v8 + _dispatch_object_debug_attr((uint64_t)a1, &a2[v8], a3 - v8);
  size_t v10 = v9 + _dispatch_queue_debug_attr((uint64_t)a1, &a2[v9], a3 - v9);
  unint64_t v11 = a3 - v10;
  int v13 = OUTLINED_FUNCTION_3_1(&a2[v10], v12, "}");
  unint64_t v14 = v13;
  if (v13 < 0) {
    unint64_t v14 = 0LL;
  }
  return v14 + v10;
}

size_t _dispatch_channel_debug(void *a1, uint64_t a2, unint64_t a3)
{
  ClassName = object_getClassName(a1);
  int v8 = OUTLINED_FUNCTION_4_1((uint64_t)ClassName, v7, "%s[%p] = { ");
  unint64_t v9 = v8;
  if (v8 >= 0) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = 0LL;
  }
  size_t v11 = v10 + _dispatch_object_debug_attr((uint64_t)a1, (char *)(a2 + v10), a3 - v10);
  uint64_t v12 = _dispatch_queue_debug_attr((uint64_t)a1, (char *)(a2 + v11), a3 - v11);
  int v14 = OUTLINED_FUNCTION_4_1(v12, v13, "%s%s%s");
  unint64_t v15 = v14;
  if (v14 < 0) {
    unint64_t v15 = 0LL;
  }
  return v11 + v15 + v12;
}

void dispatch_assert_queue_V2_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: invalid queue passed to dispatch_assert_queue()";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_assert_queue_not_V2_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: invalid queue passed to dispatch_assert_queue_not()";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_queue_override_invoke_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected object type";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_block_perform_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid flags passed to dispatch_block_perform()";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_block_invoke_direct_cold_1(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: A block object may not be both run more than once and waited for";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_block_cancel_cold_2()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid block object passed to dispatch_block_cancel()";
  __break(1u);
}

void dispatch_block_testcancel_cold_2()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid block object passed to dispatch_block_testcancel()";
  __break(1u);
}

void dispatch_block_wait_cold_1(int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: A block object may not be both run more than once and waited for";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_block_wait_cold_2(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: A block object may not be waited for more than once";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_block_wait_cold_4()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid block object passed to dispatch_block_wait()";
  __break(1u);
}

void dispatch_block_notify_cold_1(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: A block object may not be both run more than once and observed";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_block_notify_cold_3(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid block object passed to dispatch_block_notify()";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_queue_set_label_nocopy_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot change label for this queue";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_set_qos_class_floor_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch queue/source property setter called after activation";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_set_qos_class_floor_cold_2()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_set_qos_class_floor called on invalid object type";
  __break(1u);
}

void dispatch_set_qos_class_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_set_qos_class called on invalid object type";
  __break(1u);
}

void dispatch_set_qos_class_fallback_cold_2()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_set_qos_class_fallback called on invalid object type";
  __break(1u);
}

void _dispatch_lane_class_dispose_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Release of a queue with corrupt state";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_lane_class_dispose_cold_2(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Premature release of a locked queue";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_lane_class_dispose_cold_3(uint64_t *a1)
{
  uint64_t v1 = *a1;
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Release of a queue while items are enqueued";
  qword_61258 = v1;
  __break(1u);
}

void _dispatch_queue_xref_dispose_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Release of a suspended object";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_queue_xref_dispose_cold_2(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Release of an inactive object";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_queue_set_width_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot set width of a serial queue";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_queue_set_width_cold_2(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unexpected dispatch object type";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_lane_set_target_queue_cold_3()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Too many calls to dispatch_suspend() prior to calling dispatch_se"
                         "t_target_queue() or dispatch_set_*_handler()";
  __break(1u);
}

void _dispatch_lane_set_target_queue_cold_4()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot change the target of this object after it has been activated";
  __break(1u);
}

void _dispatch_lane_set_target_queue_cold_5()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot change the target of a queue already targeted by other dispatch objects";
  __break(1u);
}

void _dispatch_lane_set_target_queue_cold_6(unsigned __int8 a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unexpected dispatch object type";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_lane_legacy_set_target_queue_cold_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (MEMORY[0xFFFFFC100]) {
    kdebug_trace(771883012LL, a3, a2, a1, 0LL);
  }
  _dispatch_bug_deprecated("Changing the target of a queue already targeted by other dispatch objects");
}

void _dispatch_queue_priority_inherit_from_target_cold_1(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Corrupted priority";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_workloop_set_cpupercent_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: workloop qos class or priority must be set before cpupercent";
  __break(1u);
}

void _dispatch_workloop_dispose_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Release of a workloop while items are enqueued";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_workloop_dispose_cold_2(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Release of a workloop with corrupt state";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_workloop_dispose_cold_3(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Release of a locked workloop";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_workloop_activate_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Process has too many threads.";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_workloop_wakeup_cold_1(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Invalid way to wake up a workloop";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_workloop_wakeup_cold_2(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Waking up an inactive workloop";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_async_swift_job_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Used Swift only SPI to enqueue non-Swift runtime objects into dispatch";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_channel_xref_dispose_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Release of a channel that has not been cancelled, but has a cance"
                         "l acknowledgement callback";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_channel_invoke_cold_2()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Channel didn't call dispatch_channel_drain";
  __break(1u);
}

void _dispatch_channel_invoke_cold_3()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: sync waiter found on channel";
  __break(1u);
}

void dispatch_channel_foreach_work_item_peek_f_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Called peek after drain";
  __break(1u);
}

void dispatch_channel_drain_f_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Called drain twice in the same invoke";
  __break(1u);
}

void dispatch_channel_create_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unsupported callbacks version";
  qword_61258 = 0LL;
  __break(1u);
}

void _dispatch_mgr_queue_push_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Waiter pushed onto manager";
  __break(1u);
}

void _dispatch_pthread_root_queue_create_with_observer_hooks_4IOHID_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid pthread root queue observer hooks";
  __break(1u);
}

void _dispatch_queue_is_exclusively_owned_by_current_thread_4IOHID_cold_1(unsigned __int16 a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid queue type";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_runloop_root_queue_perform_4CF_cold_3(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Not a runloop queue";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_main_queue_drain_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: _dispatch_main_queue_callback_4CF called after dispatch_main()";
  __break(1u);
}

void _dispatch_main_queue_drain_cold_4()
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Lingering DISPATCH_WLH_ANON";
  __break(1u);
}

void _dispatch_main_queue_drain_cold_5(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: _dispatch_main_queue_callback_4CF called from the wrong thread";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_queue_cleanup_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Premature thread exit while a dispatch queue is running";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_worker_thread_cold_1(int a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Pending thread request underflow";
  qword_61258 = a1 - 1;
  __break(1u);
}

void _dispatch_root_queues_init_once_cold_1(int a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: QoS Maintenance support required";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_root_queues_init_once_cold_2(int a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Missing Kevent WORKQ support";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_root_queues_init_once_cold_3()
{
  uint64_t v0 = **(int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unable to limit cooperative pool size";
  qword_61258 = v0;
  __break(1u);
}

void _dispatch_root_queues_init_once_cold_4(int a1, int a2)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Root queue initialization failed";
  qword_61258 = a2 | (a1 << 16);
  __break(1u);
}

void _dispatch_mgr_queue_drain_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Interrupted drain on manager queue";
  __break(1u);
}

void _dispatch_root_queue_drain_deferred_wlh_cold_4(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Invalid wlh state";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_apply_with_attr_f_cold_2(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: attribute's properties are invalid or meaningless on this system";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_apply_with_attr_f_cold_3(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_apply_attr not initialized using dispatch_apply_attr_init";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_apply_attr_set_parallelism_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unknown entity";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_apply_attr_set_parallelism_cold_2(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid threads_per_entity value for CPU entity";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_apply_attr_set_parallelism_cold_3(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid threads_per_cluster value, only acceptable value is 1";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_apply_attr_set_parallelism_cold_4()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: 0 is an invalid threads_per_cluster value";
  qword_61258 = 0LL;
  __break(1u);
}

size_t _dispatch_source_debug(void *a1, char *a2, size_t a3)
{
  int v6 = (const char ***)a1[11];
  ClassName = object_getClassName(a1);
  int v8 = snprintf(a2, a3, "%s[%p] = { ", ClassName + 12, a1);
  size_t v9 = v8;
  if (v8 >= 0) {
    size_t v10 = v9;
  }
  else {
    size_t v10 = 0LL;
  }
  uint64_t v11 = OUTLINED_FUNCTION_0_3();
  size_t v14 = v10 + _dispatch_object_debug_attr(v11, v12, v13);
  uint64_t v15 = OUTLINED_FUNCTION_0_3();
  size_t v18 = v14 + _dispatch_source_debug_attr(v15, v16, v17);
  char v19 = *((_BYTE *)v6 + 29);
  if ((v19 & 2) != 0)
  {
    int v25 = OUTLINED_FUNCTION_0_3();
    v18 += _dispatch_timer_debug_attr(v25, v26, v27);
    char v19 = *((_BYTE *)v6 + 29);
  }

  size_t v20 = a3 - v18;
  if ((v19 & 1) != 0) {
    uint64_t v21 = " (direct)";
  }
  else {
    uint64_t v21 = (const char *)&unk_416DE;
  }
  int v22 = snprintf(&a2[v18], v20, "kevent = %p%s, filter = %s }", v6, v21, **v6);
  size_t v23 = v22;
  if (v22 < 0) {
    size_t v23 = 0LL;
  }
  return v23 + v18;
}

unint64_t _dispatch_source_debug_attr(uint64_t a1, char *a2, unint64_t a3)
{
  int v4 = OUTLINED_FUNCTION_1_2( (int)"deleted, ",  a2,  "target = %s[%p], ident = 0x%x, mask = 0x%x, pending_data = 0x%llx, registered = %d, armed = %d, %s%s%s");
  unint64_t v5 = v4;
  if (v4 >= 0) {
    return v5;
  }
  else {
    return 0LL;
  }
}

unint64_t _dispatch_timer_debug_attr(int a1, char *a2, unint64_t a3)
{
  int v4 = OUTLINED_FUNCTION_1_2( a1,  a2,  "timer = { target = 0x%llx, deadline = 0x%llx, interval = 0x%llx, flags = 0x%x }, ");
  unint64_t v5 = v4;
  if (v4 >= 0) {
    return v5;
  }
  else {
    return 0LL;
  }
}

void dispatch_source_create_cold_2(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot target source to the cooperative root queue - not implemented";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_source_xref_dispose_cold_1(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Release of a source that has not been cancelled, but has a mandat"
                         "ory cancel handler";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_source_merge_data_cold_1(char a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid source type";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_source_will_reenable_kevent_4NW_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: _dispatch_source_will_reenable_kevent_4NW not called from within "
                         "the event handler";
  __break(1u);
}

void dispatch_source_cancel_and_wait_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Source is suspended";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_source_cancel_and_wait_cold_2(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_source_cancel_and_wait called from a source handler";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_source_cancel_and_wait_cold_3(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Dispatch source used after last release";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_source_cancel_and_wait_cold_4(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Source has a cancel handler";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_source_merge_evt_cold_1(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 24);
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unexpected EV_VANISHED (do not destroy random mach ports or file descriptors)";
  qword_61258 = v1;
  __break(1u);
}

uint64_t _dispatch_mach_msg_debug(_DWORD *a1, char *a2, unint64_t a3)
{
  int v7 = OUTLINED_FUNCTION_3_1(a2, v6, "%s[%p] = { ");
  unint64_t v8 = v7;
  if (v7 >= 0) {
    unint64_t v9 = v8;
  }
  else {
    unint64_t v9 = 0LL;
  }
  size_t v10 = v9 + OUTLINED_FUNCTION_2_1();
  uint64_t v11 = a1 + 22;
  int v12 = snprintf(&a2[v10], a3 - v10, "opts/err = 0x%x, msgh[%p] = { ", a1[12], a1 + 22);
  uint64_t v14 = v12;
  if (v12 < 0) {
    uint64_t v14 = 0LL;
  }
  if (a1[18]) {
    uint64_t v11 = *(_DWORD **)v11;
  }
  size_t v15 = v14 + v10;
  if (v11[5])
  {
    int v16 = (char *)OUTLINED_FUNCTION_3_2();
    OUTLINED_FUNCTION_1_3(v16, v17, "id 0x%x, ");
    OUTLINED_FUNCTION_0_4();
    if (v19 < 0) {
      uint64_t v18 = 0LL;
    }
    v15 += v18;
  }

  if (v11[1])
  {
    size_t v20 = (char *)OUTLINED_FUNCTION_3_2();
    OUTLINED_FUNCTION_1_3(v20, v21, "size %u, ");
    OUTLINED_FUNCTION_0_4();
    if (v23 < 0) {
      uint64_t v22 = 0LL;
    }
    v15 += v22;
  }

  if (*v11)
  {
    OUTLINED_FUNCTION_1_3(&a2[v15], v13, "bits <l %u, r %u");
    OUTLINED_FUNCTION_0_4();
    if (v26 < 0) {
      uint64_t v25 = 0LL;
    }
    size_t v27 = v25 + v15;
    if ((*v11 & 0xFFE0E0E0) != 0)
    {
      uint64_t v28 = (char *)OUTLINED_FUNCTION_3_2();
      OUTLINED_FUNCTION_1_3(v28, v29, ", o 0x%x");
      OUTLINED_FUNCTION_0_4();
      if (v31 < 0) {
        uint64_t v30 = 0LL;
      }
      v27 += v30;
    }

    OUTLINED_FUNCTION_1_3(&a2[v27], v24, ">, ");
    OUTLINED_FUNCTION_0_4();
    if (v33 < 0) {
      uint64_t v32 = 0LL;
    }
    size_t v15 = v32 + v27;
  }

  int v34 = v11[2];
  if (v11[3])
  {
    if (v34) {
      unsigned int v35 = "local 0x%x, remote 0x%x";
    }
    else {
      unsigned int v35 = "local 0x%x";
    }
  }

  else if (v34)
  {
    unsigned int v35 = "remote 0x%x";
  }

  else
  {
    unsigned int v35 = "no ports";
  }

  OUTLINED_FUNCTION_1_3(&a2[v15], v13, v35);
  OUTLINED_FUNCTION_0_4();
  if (v38 < 0) {
    uint64_t v37 = 0LL;
  }
  size_t v39 = v37 + v15;
  unint64_t v40 = a3 - (v37 + v15);
  int v41 = OUTLINED_FUNCTION_3_1(&a2[v37 + v15], v36, " } }");
  unint64_t v42 = v41;
  if (v41 < 0) {
    unint64_t v42 = 0LL;
  }
  return v42 + v39;
}

uint64_t _dispatch_mach_debug(id a1, char *a2, unint64_t a3)
{
  if (!*((void *)a1 + 9) || (*((_WORD *)a1 + 58) & 8) != 0) {
    object_getClassName(a1);
  }
  int v6 = OUTLINED_FUNCTION_3_1(a2, (uint64_t)a2, "%s[%p] = { ");
  unint64_t v7 = v6;
  if (v6 >= 0) {
    unint64_t v8 = v7;
  }
  else {
    unint64_t v8 = 0LL;
  }
  size_t v9 = v8 + OUTLINED_FUNCTION_2_1();
  size_t v10 = v9 + _dispatch_mach_debug_attr((uint64_t)a1, &a2[v9], a3 - v9);
  unint64_t v11 = a3 - v10;
  int v13 = OUTLINED_FUNCTION_3_1(&a2[v10], v12, "}");
  unint64_t v14 = v13;
  if (v13 < 0) {
    unint64_t v14 = 0LL;
  }
  return v14 + v10;
}

size_t _dispatch_mach_debug_attr(uint64_t a1, char *__str, size_t __size)
{
  int v4 = *(void **)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 120);
  int v6 = (const char *)&unk_416DE;
  if (v4)
  {
    unint64_t v7 = (const char *)v4[9];
    if (!v7) {
      unint64_t v7 = (const char *)&unk_416DE;
    }
  }

  else
  {
    unint64_t v7 = (const char *)&unk_416DE;
  }

  if ((*(_BYTE *)(v5 + 30) & 1) != 0) {
    unint64_t v8 = " (armed)";
  }
  else {
    unint64_t v8 = (const char *)&unk_416DE;
  }
  if (*(void *)(v5 + 48)) {
    int v6 = " (pending)";
  }
  int v9 = snprintf( __str,  __size,  "target = %s[%p], receive = 0x%x, send = 0x%x, send-possible = 0x%x%s, checkin = 0x%x%s, send state = %016llx, d isconnected = %d, canceled = %d ",  v7,  v4,  *(_DWORD *)(*(void *)(a1 + 88) + 24LL),  *(_DWORD *)(v5 + 92),  *(_DWORD *)(v5 + 24),  v8,  *(_DWORD *)(v5 + 96),  v6,  *(void *)(v5 + 64),  *(_DWORD *)(v5 + 88),  (*(_DWORD *)(a1 + 80) >> 28) & 1);
  size_t v10 = v9;
  if (v9 >= 0) {
    return v10;
  }
  else {
    return 0LL;
  }
}

void dispatch_mach_hooks_install_4libxpc_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: trying to install hooks with unsupported version";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_mach_hooks_install_4libxpc_cold_2()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_mach_hooks_install_4libxpc called twice";
  qword_61258 = (uint64_t)_dispatch_mach_xpc_hooks;
  __break(1u);
}

void _dispatch_mach_create_cold_2(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Cannot target object to cooperative root queue - not implemented";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_mach_connect_cold_1(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Channel already connected";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_mach_arm_no_senders_cold_2(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Mach port notification collision";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_mach_merge_msg_cold_1()
{
}

void _dispatch_mach_merge_msg_cold_2(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 24);
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unexpected EV_VANISHED (do not destroy random mach ports)";
  qword_61258 = v1;
  __break(1u);
}

void _dispatch_mach_send_and_wait_for_reply_cold_1(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid reply port";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_mach_send_and_wait_for_reply_cold_2(int a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from mach_msg_receive";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_mach_send_and_wait_for_reply_cold_3(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Overlarge message";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_mach_send_and_wait_for_reply_cold_4(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Reply received on unexpected port";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_mach_send_and_wait_for_reply_cold_5()
{
}

void _dispatch_mach_send_and_wait_for_reply_cold_6()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unable to allocate reply port, possible port leak";
  __break(1u);
}

void _dispatch_mach_handoff_context_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Trying to handoff IPC from non IPC context";
  __break(1u);
}

void _dispatch_mach_handoff_context_cold_2()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Calling dispatch_mach_handoff_reply multiple times from the same context";
  __break(1u);
}

void _dispatch_mach_install_cold_1(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Channel never connected";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_mach_msg_create_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Empty message";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_mach_msg_create_cold_2(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Message size too large";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_mach_msg_get_filter_policy_id_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Filter id should be non-NULL";
  qword_61258 = 0LL;
  __break(1u);
}

void dispatch_mach_msg_get_filter_policy_id_cold_2(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Trailer doesn't contain filter policy id";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_mach_msg_get_filter_policy_id_cold_3(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Trailer format is invalid";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_mach_msg_get_filter_policy_id_cold_4(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Messsage should be non-NULL";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_mach_mig_demux_cold_1(int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_mach_mig_demux: mach_msg(MACH_SEND_MSG) failed";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_mach_mig_demux_get_context_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: dispatch_mach_mig_demux_get_context not called from dispatch_mach"
                         "_mig_demux context";
  __break(1u);
}

void _dispatch_sync_ipc_handoff_begin_cold_1(int a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_unote_unregister_muxed_cold_1()
{
}

void _dispatch_unote_unregister_direct_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unregistration failed";
  __break(1u);
}

void _dispatch_event_loop_leave_immediate_cold_2(uint64_t *a1)
{
  uint64_t v1 = *a1;
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid workloop owner, possible memory corruption";
  qword_61258 = v1;
  __break(1u);
}

void _dispatch_event_loop_leave_immediate_cold_3(unsigned int *a1, unsigned __int16 a2)
{
  unint64_t v2 = ((unint64_t)a2 << 16) | ((unint64_t)*a1 << 32) | 2;
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
  qword_61258 = v2;
  __break(1u);
}

void _dispatch_event_loop_leave_immediate_cold_4(int *a1)
{
  uint64_t v1 = *a1;
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Broken priority";
  qword_61258 = v1;
  __break(1u);
}

void _dispatch_event_loop_leave_deferred_cold_1(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Waking up a kq with cooperative thread request is not supported";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_event_loop_cancel_waiter_cold_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid workloop owner, possible memory corruption";
  qword_61258 = v1;
  __break(1u);
}

void _dispatch_event_loop_cancel_waiter_cold_3(uint64_t a1, unsigned __int16 a2)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
  qword_61258 = ((unint64_t)a2 << 16) | (a1 << 32) | 2;
  __break(1u);
}

void _dispatch_event_loop_wake_owner_cold_4(uint64_t a1, unsigned __int16 a2)
{
  unint64_t v2 = ((unint64_t)a2 << 16) | ((unint64_t)*(unsigned int *)(a1 + 24) << 32) | 2;
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unexpected error from kevent";
  qword_61258 = v2;
  __break(1u);
}

void _dispatch_event_loop_wake_owner_cold_5(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 12);
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Broken priority";
  qword_61258 = v1;
  __break(1u);
}

void _dispatch_event_loop_wait_for_ownership_cold_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 72 * a2 + 64);
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid workloop owner, possible memory corruption";
  qword_61258 = v2;
  __break(1u);
}

void _dispatch_event_loop_wait_for_ownership_cold_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int *)(a1 + 72 * a2 + 12);
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Broken priority";
  qword_61258 = v2;
  __break(1u);
}

void _dispatch_mach_msg_sender_is_kernel_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: message received without expected trailer";
  __break(1u);
}

void _dispatch_mach_host_port_init_cold_1(int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Could not get unprivileged host port";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_mach_recv_direct_merge_evt_cold_1()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unexpected EV_VANISHED (do not destroy random mach ports)";
  __break(1u);
}

void _dispatch_kevent_mach_msg_recv_cold_1(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Overlarge message received";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_kevent_mach_msg_recv_cold_2(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 20);
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Received message with MACH_PORT_NULL msgh_local_port";
  qword_61258 = v1;
  __break(1u);
}

void _dispatch_kq_init_cold_1(int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Failed to initalize workqueue kevent";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_kevent_mach_notify_resume_cold_1(int a1, void *a2)
{
  *a2 &= 0xFFFFFFF2uLL;
}

uint64_t _dispatch_kevent_mach_notify_resume_cold_3(unsigned int a1, mach_port_name_t *a2, _DWORD *a3)
{
  uint64_t result = mach_port_deallocate(mach_task_self_, *a2);
  *a3 = result;
  if ((_DWORD)result == -301)
  {
    qword_61228 = (uint64_t)"MIG_REPLY_MISMATCH";
    qword_61258 = -301LL;
    __break(1u);
  }

  if ((_DWORD)result) {
    return 1LL;
  }
  return result;
}

size_t voucher_kvoucher_debug( ipc_space_inspect_t a1, mach_port_name_t a2, uint64_t a3, unint64_t a4, unint64_t a5, const char *a6, unint64_t a7)
{
  kern_return_t v15;
  mach_error_t v16;
  size_t v17;
  int v18;
  size_t v19;
  size_t v20;
  int v21;
  size_t v22;
  size_t v23;
  unint64_t v24;
  uint8_t *v25;
  int v26;
  char *v27;
  uint64_t v28;
  int v29;
  size_t v30;
  uint64_t v31;
  int v32;
  size_t v33;
  char *v34;
  uint64_t v35;
  int v36;
  size_t v37;
  char *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int v44;
  char *v45;
  size_t v46;
  uint64_t v47;
  int v48;
  char *v49;
  size_t v50;
  char *v51;
  size_t v52;
  uint64_t v53;
  int v54;
  char *v55;
  size_t v56;
  uint64_t v57;
  int v58;
  const char *v59;
  unint64_t v60;
  size_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint8_t *v65;
  uint64_t v66;
  char *v67;
  size_t v68;
  uint64_t v69;
  int v70;
  char *v71;
  uint64_t v72;
  int v73;
  char *v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  char *v79;
  size_t v80;
  uint64_t v81;
  int v82;
  char *v84;
  size_t v85;
  uint64_t v86;
  int v87;
  char *v88;
  size_t v89;
  uint64_t v90;
  int v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  size_t v96;
  int v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  size_t v106;
  const char *v108;
  const char *v109;
  unint64_t v110;
  const char *v111;
  unsigned int object_addr[2];
  mach_msg_type_number_t recipesCnt[3];
  uint8_t recipes[8209];
  bzero(recipes, 0x2000uLL);
  *(void *)object_addr = 0LL;
  *(void *)recipesCnt = 0x2000LL;
  if (mach_port_kernel_object(a1, a2, object_addr, &object_addr[1]) || object_addr[0] != 37)
  {
    if (a6)
    {
      unint64_t v92 = (char *)OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_1_1(v92, v93, "%s");
      OUTLINED_FUNCTION_0_2();
      if (v95 < 0) {
        unint64_t v94 = 0LL;
      }
      a5 += v94;
    }

    if (a4 >= a5) {
      char v96 = a4 - a5;
    }
    else {
      char v96 = 0LL;
    }
    char v97 = snprintf((char *)(a3 + a5), v96, "Invalid voucher: 0x%x\n");
    goto LABEL_119;
  }

  size_t v15 = mach_voucher_debug_info(a1, a2, recipes, recipesCnt);
  if (v15)
  {
    int v16 = v15;
    if (v15 != 46)
    {
      if (a6)
      {
        unsigned __int16 v98 = (char *)OUTLINED_FUNCTION_2_2();
        OUTLINED_FUNCTION_1_1(v98, v99, "%s");
        OUTLINED_FUNCTION_0_2();
        if (v101 < 0) {
          unsigned int v100 = 0LL;
        }
        a5 += v100;
      }

      if (a4 >= a5) {
        char v96 = a4 - a5;
      }
      else {
        char v96 = 0LL;
      }
      mach_error_string(v16);
      char v97 = snprintf((char *)(a3 + a5), v96, "Voucher: 0x%x Failed to get contents %s\n");
      goto LABEL_119;
    }
  }

  if (!*(void *)recipesCnt)
  {
    if (a6)
    {
      uint64_t v102 = (char *)OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_1_1(v102, v103, "%s");
      OUTLINED_FUNCTION_0_2();
      if (v105 < 0) {
        int v104 = 0LL;
      }
      a5 += v104;
    }

    if (a4 >= a5) {
      char v96 = a4 - a5;
    }
    else {
      char v96 = 0LL;
    }
    char v97 = snprintf((char *)(a3 + a5), v96, "Voucher: 0x%x has no contents\n");
LABEL_119:
    uint64_t v106 = v97;
    if (v97 < 0) {
      uint64_t v106 = 0LL;
    }
    return v106 + a5;
  }

  if (a6)
  {
    if (a4 >= a5) {
      uint64_t v17 = a4 - a5;
    }
    else {
      uint64_t v17 = 0LL;
    }
    uint64_t v18 = snprintf((char *)(a3 + a5), v17, "%s", a6);
    int v19 = v18;
    if (v18 < 0) {
      int v19 = 0LL;
    }
    a5 += v19;
  }

  if (a4 >= a5) {
    size_t v20 = a4 - a5;
  }
  else {
    size_t v20 = 0LL;
  }
  uint64_t v21 = snprintf((char *)(a3 + a5), v20, "Voucher: 0x%x\n", object_addr[1]);
  uint64_t v22 = v21;
  if (v21 < 0) {
    uint64_t v22 = 0LL;
  }
  int v23 = v22 + a5;
  if (*(void *)recipesCnt)
  {
    unint64_t v110 = a7;
    unint64_t v111 = a6;
    uint64_t v24 = 0LL;
    while (1)
    {
      uint64_t v25 = &recipes[v24];
      int v26 = *(_DWORD *)&recipes[v24];
      if (v26) {
        break;
      }
LABEL_93:
      uint64_t v24 = (v24 + *((_DWORD *)v25 + 3) + 16);
      if (*(void *)recipesCnt <= v24) {
        return v23;
      }
    }

    if (a6)
    {
      size_t v27 = (char *)OUTLINED_FUNCTION_6();
      snprintf(v27, v7, "%s", a6);
      OUTLINED_FUNCTION_0_5();
      if (v29 < 0) {
        uint64_t v28 = 0LL;
      }
      v23 += v28;
      int v26 = *(_DWORD *)v25;
    }

    if (a4 >= v23) {
      uint64_t v30 = a4 - v23;
    }
    else {
      uint64_t v30 = 0LL;
    }
    snprintf((char *)(a3 + v23), v30, "Key: %u, ", v26);
    OUTLINED_FUNCTION_0_5();
    if (v32 < 0) {
      int v31 = 0LL;
    }
    int v33 = v31 + v23;
    int v34 = (char *)OUTLINED_FUNCTION_8();
    snprintf(v34, v23, "Command: %u, ", *((_DWORD *)v25 + 1));
    OUTLINED_FUNCTION_1_4();
    if (v36 < 0) {
      unsigned int v35 = 0LL;
    }
    uint64_t v37 = v35 + v33;
    int v38 = (char *)OUTLINED_FUNCTION_8();
    snprintf(v38, v23, "Previous voucher: 0x%x, ", *((_DWORD *)v25 + 2));
    OUTLINED_FUNCTION_1_4();
    if (v40 < 0) {
      size_t v39 = 0LL;
    }
    int v41 = v39 + v37;
    unint64_t v42 = (char *)OUTLINED_FUNCTION_8();
    snprintf(v42, v23, "Content size: %u\n", *((_DWORD *)v25 + 3));
    OUTLINED_FUNCTION_1_4();
    if (v44 < 0) {
      int v43 = 0LL;
    }
    size_t v7 = v43 + v41;
    if (*(_DWORD *)v25 == 3)
    {
      if (a6)
      {
        uint64_t v51 = (char *)OUTLINED_FUNCTION_7();
        snprintf(v51, v52, "%s", v108);
        OUTLINED_FUNCTION_1_4();
        if (v54 < 0) {
          uint64_t v53 = 0LL;
        }
        v7 += v53;
      }

      uint64_t v55 = (char *)OUTLINED_FUNCTION_4_2();
      snprintf(v55, v56, "RESOURCE ACCOUNTING INFO: %s");
      goto LABEL_52;
    }

    if (*(_DWORD *)v25 == 2)
    {
      if (a6)
      {
        int v45 = (char *)OUTLINED_FUNCTION_7();
        snprintf(v45, v46, "%s", v108);
        OUTLINED_FUNCTION_1_4();
        if (v48 < 0) {
          unint64_t v47 = 0LL;
        }
        v7 += v47;
      }

      unint64_t v49 = (char *)OUTLINED_FUNCTION_4_2();
      snprintf(v49, v50, "IMPORTANCE INFO: %s");
LABEL_52:
      OUTLINED_FUNCTION_1_4();
      if (v58 < 0) {
        uint64_t v57 = 0LL;
      }
      int v23 = v57 + v7;
      goto LABEL_89;
    }

    unint64_t v59 = a6;
    else {
      unint64_t v60 = *((unsigned int *)v25 + 3);
    }
    if (a4 >= v7) {
      char v61 = a4 - v7;
    }
    else {
      char v61 = 0LL;
    }
    snprintf((char *)(a3 + v7), v61, "%s%s:\n", v59, "Recipe Contents");
    OUTLINED_FUNCTION_1_4();
    if (v63 < 0) {
      int v62 = 0LL;
    }
    int v23 = v62 + v7;
    if (v60)
    {
      uint64_t v64 = 0LL;
      mach_port_context_t v65 = v25 + 16;
      do
      {
        unint64_t v66 = v64 & 0xF;
        if ((v64 & 0xF) == 0)
        {
          if (v64)
          {
            unint64_t v67 = (char *)OUTLINED_FUNCTION_3_3();
            snprintf(v67, v68, "  %s\n", v109);
            OUTLINED_FUNCTION_0_5();
            if (v70 < 0) {
              unint64_t v69 = 0LL;
            }
            v23 += v69;
          }

          unint64_t v71 = (char *)OUTLINED_FUNCTION_6();
          snprintf(v71, v7, "%s  %04lx ", v111, v64);
          OUTLINED_FUNCTION_0_5();
          if (v73 < 0) {
            unint64_t v72 = 0LL;
          }
          v23 += v72;
        }

        unint64_t v74 = (char *)OUTLINED_FUNCTION_6();
        snprintf(v74, v7, " %02x", v65[v64]);
        OUTLINED_FUNCTION_0_5();
        if (v76 < 0) {
          unint64_t v75 = 0LL;
        }
        v23 += v75;
        unint64_t v77 = v65[v64];
        recipes[v66 + 0x2000] = v77;
        ++v64;
      }

      while (v60 != v64);
      recipes[v66 + 8193] = 0;
      if ((v60 & 0xF) == 0)
      {
        a6 = v111;
LABEL_89:
        if (*(_BYTE *)(v23 + a3 - 1) != 10)
        {
          uint64_t v88 = (char *)OUTLINED_FUNCTION_9();
          snprintf(v88, v89, "\n");
          OUTLINED_FUNCTION_0_5();
          if (v91 < 0) {
            unint64_t v90 = 0LL;
          }
          v23 += v90;
        }

        goto LABEL_93;
      }

      unint64_t v78 = v60 + 1;
      do
      {
        unint64_t v79 = (char *)OUTLINED_FUNCTION_9();
        snprintf(v79, v80, "   ");
        OUTLINED_FUNCTION_0_5();
        if (v82 < 0) {
          unint64_t v81 = 0LL;
        }
        v23 += v81;
      }

      while ((v78++ & 0xF) != 0);
      unsigned int v84 = (char *)OUTLINED_FUNCTION_3_3();
      snprintf(v84, v85, "  %s\n", v109);
      OUTLINED_FUNCTION_0_5();
      if (v87 < 0) {
        unsigned int v86 = 0LL;
      }
      v23 += v86;
    }

    a6 = v111;
    goto LABEL_89;
  }

  return v23;
}

void _voucher_task_mach_voucher_init_cold_2(int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Could not create task mach voucher";
  qword_61258 = a1;
  __break(1u);
}

void _voucher_find_and_retain_cold_1()
{
  qword_61228 = (uint64_t)"API MISUSE: Voucher over-release";
  __break(1u);
}

void _voucher_insert_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: base voucher has nested base voucher";
  qword_61258 = a1;
  __break(1u);
}

void _voucher_insert_cold_2(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: base voucher has non-zero activity value";
  qword_61258 = a1;
  __break(1u);
}

void _voucher_insert_cold_3()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Voucher corruption";
  __break(1u);
}

void _voucher_create_with_mach_msgv_cold_1(unsigned int a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Invalid msg aux data size.";
  qword_61258 = a1;
  __break(1u);
}

void voucher_decrement_importance_count4CF_cold_1(uint64_t a1, int a2)
{
  if (a2 == 5)
  {
    qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Voucher importance count underflow";
    qword_61258 = a1;
    __break(1u);
  }

void _voucher_activity_debug_channel_init_cold_1(int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Couldn't get debug control port";
  qword_61258 = a1;
  __break(1u);
}

void _voucher_process_can_use_arbitrary_personas_init_cold_1(int a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: mach_voucher_attr_command(BANK_PERSONA_ADOPT_ANY) failed";
  qword_61258 = a1;
  __break(1u);
}

void voucher_activity_initialize_4libtrace_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: unsupported vah_version";
  qword_61258 = a1;
  __break(1u);
}

void voucher_activity_initialize_4libtrace_cold_2()
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: voucher_activity_initialize_4libtrace called twice";
  qword_61258 = _voucher_libtrace_hooks;
  __break(1u);
}

void voucher_activity_create_with_data_2_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Absurd publen";
  qword_61258 = a1;
  __break(1u);
}

void voucher_activity_flush_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Allocation should always fail";
  qword_61258 = a1;
  __break(1u);
}

void firehose_buffer_create_cold_2(int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unable to allocate mach port";
  qword_61258 = a1;
  __break(1u);
}

void firehose_buffer_create_cold_4()
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Invalid values for MADVISE_CHUNK_COUNT / CHUNK_SIZE";
  qword_61258 = 0x4000LL;
  __break(1u);
}

void firehose_client_reconnect_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Invalid size for the firehose buffer";
  qword_61258 = a1;
  __break(1u);
}

void firehose_client_reconnect_cold_3(int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unable to register with logd";
  qword_61258 = a1;
  __break(1u);
}

void firehose_client_reconnect_cold_9(int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: Unable to make memory port";
  qword_61258 = a1;
  __break(1u);
}

void firehose_drain_notifications_once_cold_1(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 20);
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: firehose_mig_server doesn't handle replies";
  qword_61258 = v1;
  __break(1u);
}

void firehose_drain_notifications_once_cold_2(int a1)
{
  qword_61228 = (uint64_t)"BUG IN CLIENT OF LIBDISPATCH: firehose_drain_notifications_once() failed";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_io_debug(void *a1)
{
  OUTLINED_FUNCTION_1_5(v1, v2, "%s[%p] = { ");
  OUTLINED_FUNCTION_0_6();
  if (v4 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = 0LL;
  }
  OUTLINED_FUNCTION_3_4();
  uint64_t v6 = OUTLINED_FUNCTION_5_1();
  uint64_t v8 = _dispatch_io_debug_attr(v6, v7);
  OUTLINED_FUNCTION_1_5(&v1[v5 + v8], v9, "}");
  OUTLINED_FUNCTION_4_3();
}

uint64_t _dispatch_io_debug_attr(uint64_t a1, char *a2)
{
  OUTLINED_FUNCTION_1_5( a2,  (uint64_t)a2,  "type = %s, fd = 0x%lx, %sfd_entry = %p, queue = %p, target = %s[%p], barrier_queue = %p, barrier_dispatch_group_t group = %p, err = 0 x%x, low = 0x%zx, high = 0x%zx, interval%s = %llu ");
  OUTLINED_FUNCTION_0_6();
  if (v3 >= 0) {
    return v2;
  }
  else {
    return 0LL;
  }
}

void _dispatch_operation_debug(void *a1)
{
  OUTLINED_FUNCTION_1_5(v1, v2, "%s[%p] = { ");
  OUTLINED_FUNCTION_0_6();
  if (v4 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = 0LL;
  }
  OUTLINED_FUNCTION_3_4();
  uint64_t v6 = OUTLINED_FUNCTION_5_1();
  uint64_t v8 = _dispatch_operation_debug_attr(v6, v7);
  OUTLINED_FUNCTION_1_5(&v1[v5 + v8], v9, "}");
  OUTLINED_FUNCTION_4_3();
}

uint64_t _dispatch_operation_debug_attr(uint64_t a1, char *a2)
{
  OUTLINED_FUNCTION_1_5( a2,  (uint64_t)a2,  "type = %s %s, fd = 0x%lx, fd_entry = %p, channel = %p, queue = %p -> %s[%p], target = %s[%p], offset = %lld, length = %zu, done = %zu, undelivered = %zu, flags = %u, err = 0x%x, low = 0x%zx, high = 0x%zx, interval%s = %llu ");
  OUTLINED_FUNCTION_0_6();
  if (v3 >= 0) {
    return v2;
  }
  else {
    return 0LL;
  }
}

uint64_t _dispatch_data_debug(void *a1, char *__str, size_t __size)
{
  int v6 = snprintf(__str, __size, "data[%p] = { ", a1);
  size_t v8 = v6;
  if (v6 >= 0) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = 0LL;
  }
  size_t v10 = &__str[v9];
  if (a1[7])
  {
    OUTLINED_FUNCTION_1_1(v10, v7, "composite, size_t size = %zd, num_records = %zd ");
    OUTLINED_FUNCTION_0_2();
    if (v13 < 0) {
      uint64_t v12 = 0LL;
    }
    size_t v14 = v12 + v9;
    if (a1[4])
    {
      OUTLINED_FUNCTION_1_1(&__str[v14], v11, ", flatbuf = %p ");
      OUTLINED_FUNCTION_0_2();
      if (v16 < 0) {
        uint64_t v15 = 0LL;
      }
      v14 += v15;
    }

    unint64_t v17 = 0LL;
    uint64_t v18 = a1 + 10;
    do
    {
      int v19 = snprintf( &__str[v14],  __size - v14,  "record[%zd] = { from = %zd, length = %zd, data_object = %p }, ",  v17,  *(v18 - 1),  *v18,  (const void *)*(v18 - 2));
      size_t v20 = v19;
      if (v19 < 0) {
        size_t v20 = 0LL;
      }
      v14 += v20;
      ++v17;
      unint64_t v21 = a1[7];
      if (v21 <= 1) {
        unint64_t v21 = 1LL;
      }
      v18 += 3;
    }

    while (v17 < v21);
  }

  else
  {
    uint64_t v28 = a1[6];
    uint64_t v29 = a1[4];
    OUTLINED_FUNCTION_1_1(v10, v7, "leaf, size_t size = %zd, buf = %p ");
    OUTLINED_FUNCTION_0_2();
    if (v23 < 0) {
      uint64_t v22 = 0LL;
    }
    size_t v14 = v22 + v9;
  }

  size_t v24 = __size - v14;
  int v25 = snprintf(&__str[v14], v24, "}", v28, v29);
  size_t v26 = v25;
  if (v25 < 0) {
    size_t v26 = 0LL;
  }
  return v26 + v14;
}

void dispatch_data_create_subrange_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: dispatch_data_create_subrange out of bounds";
  qword_61258 = a1;
  __break(1u);
}

void dispatch_data_copy_region_cold_1(uint64_t a1, uint64_t a2)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: dispatch_data_copy_region out of bounds";
  qword_61258 = a1 + a2;
  __break(1u);
}

void _dispatch_introspection_continuation_get_info_cold_1(uint64_t a1)
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Unknown dc vtable type";
  qword_61258 = a1;
  __break(1u);
}

void _dispatch_introspection_continuation_get_info_cold_3()
{
  qword_61228 = (uint64_t)"BUG IN LIBDISPATCH: Handled by the caller";
  __break(1u);
}

void _dispatch_introspection_target_queue_changed_cold_1(void *a1, uint64_t *a2)
{
  int v3 = (const char *)a1[9];
  if (!v3) {
    int v3 = (const char *)&unk_416DE;
  }
  _dispatch_log( "BUG IN CLIENT OF LIBDISPATCH: queue inversion debugging expects queues to not participate in dispatch_sync() before their setup is complete\n forgetting that queue 0x%p[%s] participated as %s of a dispatch_sync",  a1,  v3,  "both an initiator and a recipient");
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  unsigned int v5 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  while (!__ldaxr(&dword_6128C))
  {
    if (!__stxr(v5, &dword_6128C)) {
      goto LABEL_8;
    }
  }

  __clrex();
  _dispatch_unfair_lock_lock_slow((uint64_t)&dword_6128C, 0x10000);
LABEL_8:
  _dispatch_introspection_queue_order_dispose(*a2);
  unsigned int v7 = *(_DWORD *)(StatusReg + 24) & 0xFFFFFFFC;
  do
    unsigned int v8 = __ldxr(&dword_6128C);
  while (__stlxr(0, &dword_6128C));
  if (v8 != v7) {
    _dispatch_unfair_lock_unlock_slow((uint64_t)&dword_6128C, v8);
  }
}

void _dispatch_introspection_target_queue_changed_cold_2(void *a1)
{
  uint64_t v1 = (const char *)a1[9];
  if (!v1) {
    uint64_t v1 = (const char *)&unk_416DE;
  }
  _dispatch_log( "BUG IN CLIENT OF LIBDISPATCH: queue inversion debugging cannot be used with code that changes the target of a queue already targeted by other dispatch objects\n queue %p[%s] was already targeted by other dispatch objects",  a1,  v1);
  byte_61298 = 0;
}

void j__dispatch_introspection_hook_queue_callout_begin( dispatch_queue_t queue, void *context, dispatch_function_t function)
{
}

void j__dispatch_introspection_hook_queue_callout_end( dispatch_queue_t queue, void *context, dispatch_function_t function)
{
}

void j__dispatch_introspection_hook_queue_create(dispatch_queue_t queue)
{
}

void j__dispatch_introspection_hook_queue_destroy(dispatch_queue_t queue)
{
}

void j__dispatch_introspection_hook_queue_item_complete(dispatch_object_t item)
{
}

void j__dispatch_introspection_hook_queue_item_dequeue(dispatch_queue_t queue, dispatch_object_t item)
{
}

void j__dispatch_introspection_hook_queue_item_enqueue(dispatch_queue_t queue, dispatch_object_t item)
{
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "stringWithUTF8String:");
}