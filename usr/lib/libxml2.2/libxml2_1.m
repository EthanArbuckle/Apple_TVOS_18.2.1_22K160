void xmlRelaxNGCheckGroupAttrs(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v5;
  unsigned int v6;
  uint64_t i;
  void **v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t j;
  BOOL v17;
  uint64_t v18;
  void **v19;
  void **v20;
  v2 = *(_DWORD *)a2 == 18 || *(_DWORD *)a2 == 4;
  if (v2 && (*(_WORD *)(a2 + 98) & 0x20) == 0 && !*(_DWORD *)(a1 + 68))
  {
    v5 = *(void *)(a2 + 72);
    if (v5)
    {
      v6 = 0;
      do
      {
        ++v6;
        v5 = *(void *)(v5 + 64);
      }

      while (v5);
    }

    else
    {
      v6 = 0;
    }

    for (i = *(void *)(a2 + 48); i; i = *(void *)(i + 64))
      ++v6;
    v8 = (void **)xmlMalloc(8LL * v6);
    if (v8)
    {
      v9 = v8;
      v10 = v6;
      v11 = *(void *)(a2 + 72);
      if (v11)
      {
        v12 = 0LL;
        do
        {
          v9[v12++] = xmlRelaxNGGetElements(a1, (_DWORD *)v11, 1);
          v11 = *(void *)(v11 + 64);
        }

        while (v11);
        v13 = v12;
      }

      else
      {
        v13 = 0LL;
      }

      v14 = *(void *)(a2 + 48);
      if (v14)
      {
        v15 = &v9[v13];
        do
        {
          *v15++ = xmlRelaxNGGetElements(a1, (_DWORD *)v14, 1);
          v14 = *(void *)(v14 + 64);
        }

        while (v14);
      }

      if ((_DWORD)v10)
      {
        for (j = 0LL; j != v10; ++j)
        {
          if (v9[j]) {
            v17 = j == 0;
          }
          else {
            v17 = 1;
          }
          if (!v17)
          {
            v18 = 0LL;
            do
            {
              v19 = (void **)v9[v18];
              ++v18;
            }

            while (j != v18);
          }
        }

        v20 = v9;
        do
        {
          if (*v20) {
            xmlFree(*v20);
          }
          ++v20;
          --v10;
        }

        while (v10);
      }

      xmlFree(v9);
      *(_WORD *)(a2 + 98) |= 0x20u;
    }

    else
    {
      xmlRngPErrMemory(a1, (const xmlChar *)"building group\n");
    }
  }

void *xmlRelaxNGGetElements(uint64_t a1, _DWORD *a2, int a3)
{
  if (*(_DWORD *)(a1 + 68)) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = a2 == 0LL;
  }
  if (v3) {
    return 0LL;
  }
  int v7 = 0;
  LODWORD(v8) = 0;
  v9 = 0LL;
  v10 = a2;
  while (1)
  {
    v11 = v10;
    if (!a3)
    {
      unsigned int v12 = *v10;
      if (v12 - 3 < 2) {
        goto LABEL_14;
      }
      goto LABEL_23;
    }

    if (a3 != 1) {
      break;
    }
    unsigned int v12 = *v10;
    if (v12 == 9) {
      goto LABEL_14;
    }
LABEL_23:
    if (v12 - 10 <= 9 && (v10 = (_DWORD *)v11[6]) != 0LL)
    {
      uint64_t v15 = v11[6];
      do
      {
        *(void *)(v15 + 56) = v11;
        uint64_t v15 = *(void *)(v15 + 64);
      }

      while (v15);
    }

    else
    {
LABEL_31:
      if (v11 == (void *)a2) {
        return v9;
      }
      while (1)
      {
        v10 = (_DWORD *)v11[8];
        if (v10) {
          break;
        }
        v11 = (void *)v11[7];
        if (v11) {
          BOOL v16 = v11 == (void *)a2;
        }
        else {
          BOOL v16 = 1;
        }
        if (v16) {
          return v9;
        }
      }
    }
  }

  if (a3 != 2)
  {
    unsigned int v12 = *v10;
    goto LABEL_23;
  }

  unsigned int v12 = *v10;
  if (v12 > 8 || ((1 << v12) & 0x1B8) == 0) {
    goto LABEL_23;
  }
LABEL_14:
  if (!v9)
  {
    v9 = xmlMalloc(0x58uLL);
    if (!v9)
    {
      xmlRngPErrMemory(a1, (const xmlChar *)"getting element list\n");
      return v9;
    }

    int v7 = 10;
    goto LABEL_30;
  }

  if (v7 > (int)v8)
  {
LABEL_30:
    v9[(int)v8] = v11;
    uint64_t v8 = (int)v8 + 1LL;
    v9[v8] = 0LL;
    goto LABEL_31;
  }

  v14 = xmlRealloc(v9, 8LL * ((2 * v7) | 1));
  if (v14)
  {
    v7 *= 2;
    v9 = v14;
    goto LABEL_30;
  }

  xmlRngPErrMemory(a1, (const xmlChar *)"getting element list\n");
  xmlFree(v9);
  return 0LL;
}

uint64_t xmlRelaxNGCompareElemDefLists(uint64_t a1, void **a2)
{
  uint64_t result = 1LL;
  if (a1)
  {
    if (a2)
    {
      if (*(void *)a1)
      {
        v5 = *a2;
        if (*a2)
        {
          while (1)
          {
            v6 = a2 + 1;
            if (v5) {
              break;
            }
LABEL_8:
            uint64_t v8 = *(void *)(a1 + 8);
            a1 += 8LL;
            if (!v8) {
              return 1LL;
            }
            v5 = *a2;
          }

          while (1)
          {
            uint64_t result = xmlRelaxNGCompareNameClasses(*(void **)a1, v5);
            if (!(_DWORD)result) {
              break;
            }
            int v7 = (void *)*v6++;
            v5 = v7;
            if (!v7) {
              goto LABEL_8;
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t xmlRelaxNGCompareNameClasses(void *a1, void *a2)
{
  uint64_t v34 = 0LL;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v27 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  DWORD2(v15) = 9;
  int v2 = *(_DWORD *)a1 - 2;
  memset(v14, 0, sizeof(v14));
  switch(v2)
  {
    case 0:
      goto LABEL_17;
    case 1:
      return *(_DWORD *)a2 != 3;
    case 2:
    case 7:
      if (*(_DWORD *)a2 == 3) {
        return 1LL;
      }
      uint64_t v8 = "\x01";
      v9 = (_BYTE *)a1[3];
      if (a1[2]) {
        uint64_t v8 = (const char *)a1[2];
      }
      *(void *)&__int128 v28 = v8;
      if (v9 && *v9)
      {
        *((void *)&v31 + 1) = &v24;
        *(void *)&__int128 v25 = v9;
      }

      else
      {
        *((void *)&v31 + 1) = 0LL;
      }

      if (!xmlRelaxNGElementMatch((uint64_t)v14, a2, (uint64_t)&v27)
        || (uint64_t result = a1[10]) != 0 && (uint64_t result = xmlRelaxNGCompareNameClasses(result, a2), (_DWORD)result))
      {
LABEL_17:
        if (*(_DWORD *)a2 == 9 || *(_DWORD *)a2 == 4)
        {
          v11 = (const char *)a2[2];
          v10 = (_BYTE *)a2[3];
          if (!v11) {
            v11 = "\x01";
          }
          *(void *)&__int128 v28 = v11;
          *((void *)&v31 + 1) = &v24;
          if (v10)
          {
            if (*v10) {
              *(void *)&__int128 v25 = v10;
            }
            else {
              *((void *)&v31 + 1) = 0LL;
            }
          }

          else
          {
            *(void *)&__int128 v25 = "\x01";
          }

          if (xmlRelaxNGElementMatch((uint64_t)v14, a1, (uint64_t)&v27))
          {
            uint64_t result = a2[10];
            if (result) {
              return xmlRelaxNGCompareNameClasses(result, a1);
            }
          }

          else
          {
            return 1LL;
          }
        }

        else
        {
          xmlGenericErrorFunc v12 = *__xmlGenericError();
          v13 = *__xmlGenericErrorContext();
          v12( v13,  "Unimplemented block at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/relaxng.c",  3886);
          return 0LL;
        }
      }

      return result;
    default:
      xmlGenericErrorFunc v6 = *__xmlGenericError();
      int v7 = *__xmlGenericErrorContext();
      v6(v7, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/relaxng.c", 3855);
      return 0LL;
  }

uint64_t xmlRelaxNGElementMatch(uint64_t a1, void *a2, uint64_t a3)
{
  xmlGenericErrorFunc v6 = (const xmlChar *)a2[2];
  if (v6 && !xmlStrEqual(*(const xmlChar **)(a3 + 16), v6))
  {
    v9 = (xmlChar *)a2[2];
    v10 = *(xmlChar **)(a3 + 16);
    uint64_t v11 = a1;
    int v12 = 13;
    goto LABEL_23;
  }

  int v7 = (const xmlChar *)a2[3];
  if (!v7)
  {
    if (!*(void *)(a3 + 72)) {
      goto LABEL_16;
    }
    v9 = (xmlChar *)a2[2];
    if (!v9) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }

  uint64_t v8 = *(void *)(a3 + 72);
  if (!*v7)
  {
    if (!v8) {
      goto LABEL_16;
    }
    v9 = (xmlChar *)a2[2];
    if (!v9) {
      v9 = *(xmlChar **)(a3 + 16);
    }
LABEL_15:
    uint64_t v11 = a1;
    int v12 = 19;
LABEL_22:
    v10 = 0LL;
    goto LABEL_23;
  }

  if (!v8)
  {
    v9 = *(xmlChar **)(a3 + 16);
    uint64_t v11 = a1;
    int v12 = 15;
    goto LABEL_22;
  }

  if (!xmlStrEqual(*(const xmlChar **)(v8 + 16), v7))
  {
    v9 = *(xmlChar **)(a3 + 16);
    v10 = (xmlChar *)a2[3];
    uint64_t v11 = a1;
    int v12 = 17;
LABEL_23:
    xmlRelaxNGAddValidError(v11, v12, v9, v10, 0);
    return 0LL;
  }

void xmlRelaxNGDumpValidError(uint64_t a1)
{
  if (*(int *)(a1 + 80) >= 1)
  {
    uint64_t v2 = 0LL;
    uint64_t v3 = 0LL;
    int v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(a1 + 88);
      if (v4 <= 4)
      {
        int v24 = v4;
        xmlGenericErrorFunc v6 = (int *)(v5 + 40 * v3);
        if (v3)
        {
          uint64_t v7 = 0LL;
          uint64_t v8 = v5 + 40 * v3;
          v9 = (void *)(v8 + 8);
          v10 = (const xmlChar **)(v8 + 24);
          uint64_t v11 = (const xmlChar **)(v8 + 32);
          while (1)
          {
            uint64_t v12 = *(void *)(a1 + 88);
            if (*v6 == *(_DWORD *)(v12 + v7)
              && *v9 == *(void *)(v12 + v7 + 8)
              && xmlStrEqual(*v10, *(const xmlChar **)(v12 + v7 + 24))
              && xmlStrEqual(*v11, *(const xmlChar **)(v12 + v7 + 32)))
            {
              break;
            }

            v7 += 40LL;
            if (v2 == v7) {
              goto LABEL_11;
            }
          }

          int v4 = v24;
        }

        else
        {
LABEL_11:
          xmlRelaxNGShowValidError( a1,  *v6,  *(void *)(v5 + 40 * v3 + 8),  *(void *)(v5 + 40 * v3 + 16),  *(const xmlChar **)(v5 + 40 * v3 + 24),  *(xmlChar **)(v5 + 40 * v3 + 32));
          int v4 = v24 + 1;
        }
      }

      uint64_t v13 = v5 + 40 * v3;
      char v15 = *(_BYTE *)(v13 + 4);
      int v14 = (_DWORD *)(v13 + 4);
      if ((v15 & 1) != 0)
      {
        uint64_t v16 = v5 + 40 * v3;
        int v19 = *(void **)(v16 + 24);
        uint64_t v18 = (void *)(v16 + 24);
        __int128 v17 = v19;
        if (v19) {
          xmlFree(v17);
        }
        *uint64_t v18 = 0LL;
        uint64_t v20 = v5 + 40 * v3;
        __int128 v23 = *(void **)(v20 + 32);
        __int128 v22 = (void *)(v20 + 32);
        int v21 = v23;
        if (v23) {
          xmlFree(v21);
        }
        *__int128 v22 = 0LL;
        _DWORD *v14 = 0;
      }

      ++v3;
      v2 += 40LL;
    }

    while (v3 < *(int *)(a1 + 80));
  }

  *(_DWORD *)(a1 + 80) = 0;
}

void xmlRelaxNGPopErrors(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 80);
  if (v4 > a2)
  {
    uint64_t v5 = a2;
    uint64_t v6 = 40LL * a2;
    do
    {
      uint64_t v7 = *(void *)(a1 + 88);
      uint64_t v8 = v7 + v6;
      if ((*(_BYTE *)(v7 + v6 + 4) & 1) != 0)
      {
        v9 = *(void **)(v8 + 24);
        if (v9) {
          xmlFree(v9);
        }
        *(void *)(v8 + 24) = 0LL;
        uint64_t v10 = v7 + v6;
        uint64_t v11 = *(void **)(v10 + 32);
        if (v11) {
          xmlFree(v11);
        }
        *(void *)(v10 + 32) = 0LL;
        *(_DWORD *)(v8 + 4) = 0;
        int v4 = *(_DWORD *)(a1 + 80);
      }

      ++v5;
      v6 += 40LL;
    }

    while (v5 < v4);
  }

  *(_DWORD *)(a1 + 80) = a2;
  if (a2 <= 0) {
    *(void *)(a1 + 72) = 0LL;
  }
}

void xmlRelaxNGShowValidError(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const xmlChar *a5, xmlChar *a6)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if ((*(_BYTE *)(a1 + 56) & 8) == 0)
  {
    bzero(v21, 0x3E6uLL);
    char __str = 0;
    switch(a2)
    {
      case 0:
        return;
      case 1:
        uint64_t v12 = "out of memory\n";
        goto LABEL_34;
      case 2:
        snprintf(&__str, 0x3E8uLL, "failed to validate type %s\n");
        goto LABEL_39;
      case 3:
        snprintf(&__str, 0x3E8uLL, "Type %s doesn't allow value '%s'\n");
        goto LABEL_39;
      case 4:
        snprintf(&__str, 0x3E8uLL, "ID %s redefined\n");
        goto LABEL_39;
      case 5:
        snprintf(&__str, 0x3E8uLL, "failed to compare type %s\n");
        goto LABEL_39;
      case 6:
        uint64_t v12 = "Internal error: no state\n";
        goto LABEL_34;
      case 7:
        uint64_t v12 = "Internal error: no define\n";
        goto LABEL_34;
      case 8:
        snprintf(&__str, 0x3E8uLL, "Extra data in list: %s\n");
        goto LABEL_39;
      case 10:
        uint64_t v12 = "Internal: interleave block has no data\n";
        goto LABEL_34;
      case 11:
        uint64_t v12 = "Invalid sequence in interleave\n";
        goto LABEL_34;
      case 12:
        snprintf(&__str, 0x3E8uLL, "Extra element %s in interleave\n");
        goto LABEL_39;
      case 13:
        snprintf(&__str, 0x3E8uLL, "Expecting element %s, got %s\n");
        goto LABEL_39;
      case 15:
        snprintf(&__str, 0x3E8uLL, "Expecting a namespace for element %s\n");
        goto LABEL_39;
      case 17:
        snprintf(&__str, 0x3E8uLL, "Element %s has wrong namespace: expecting %s\n");
        goto LABEL_39;
      case 19:
        snprintf(&__str, 0x3E8uLL, "Expecting no namespace for element %s\n");
        goto LABEL_39;
      case 21:
        snprintf(&__str, 0x3E8uLL, "Expecting element %s to be empty\n");
        goto LABEL_39;
      case 22:
        snprintf(&__str, 0x3E8uLL, "Expecting an element %s, got nothing\n");
        goto LABEL_39;
      case 23:
        uint64_t v12 = "Expecting an element got text\n";
        goto LABEL_34;
      case 24:
        snprintf(&__str, 0x3E8uLL, "Element %s failed to validate attributes\n");
        goto LABEL_39;
      case 25:
        snprintf(&__str, 0x3E8uLL, "Element %s failed to validate content\n");
        goto LABEL_39;
      case 26:
        snprintf(&__str, 0x3E8uLL, "Element %s has extra content: %s\n");
        goto LABEL_39;
      case 27:
        snprintf(&__str, 0x3E8uLL, "Invalid attribute %s for element %s\n");
        goto LABEL_39;
      case 28:
        snprintf(&__str, 0x3E8uLL, "Datatype element %s has child elements\n");
        goto LABEL_39;
      case 29:
        snprintf(&__str, 0x3E8uLL, "Value element %s has child elements\n");
        goto LABEL_39;
      case 30:
        snprintf(&__str, 0x3E8uLL, "List element %s has child elements\n");
        goto LABEL_39;
      case 31:
        snprintf(&__str, 0x3E8uLL, "Error validating datatype %s\n");
        goto LABEL_39;
      case 32:
        snprintf(&__str, 0x3E8uLL, "Error validating value %s\n");
        goto LABEL_39;
      case 33:
        uint64_t v12 = "Error validating list\n";
        goto LABEL_34;
      case 34:
        uint64_t v12 = "No top grammar defined\n";
        goto LABEL_34;
      case 35:
        uint64_t v12 = "Extra data in the document\n";
        goto LABEL_34;
      case 36:
        snprintf(&__str, 0x3E8uLL, "Datatype element %s contains no data\n");
        goto LABEL_39;
      case 37:
        snprintf(&__str, 0x3E8uLL, "Internal error: %s\n");
        goto LABEL_39;
      case 38:
        snprintf(&__str, 0x3E8uLL, "Did not expect element %s there\n");
        goto LABEL_39;
      case 39:
        snprintf(&__str, 0x3E8uLL, "Did not expect text in element %s content\n");
LABEL_39:
        if (!__str) {
          snprintf(&__str, 0x3E8uLL, "Unknown error code %d\n", a2);
        }
        v21[998] = 0;
        int v19 = xmlCharStrdup(&__str);
        uint64_t v13 = xmlEscapeFormatString((void **)&v19);
        break;
      default:
        uint64_t v12 = "Unknown error !\n";
LABEL_34:
        uint64_t v13 = (char *)xmlCharStrdup(v12);
        break;
    }

    int v14 = v13;
    if (v13)
    {
      if (!*(_DWORD *)(a1 + 68)) {
        *(_DWORD *)(a1 + 68) = a2;
      }
      if (a4) {
        uint64_t v15 = a4;
      }
      else {
        uint64_t v15 = a3;
      }
      uint64_t v16 = *(void (__cdecl **)(void *, xmlErrorPtr))(a1 + 24);
      if (v16) {
        __int128 v17 = 0LL;
      }
      else {
        __int128 v17 = *(void (**)(void *, const char *, ...))(a1 + 8);
      }
      uint64_t v18 = *(void **)a1;
      ++*(_DWORD *)(a1 + 32);
      __xmlRaiseError(v16, v17, v18, 0LL, v15, 0x13u, a2, 2, 0LL, 0, a5, a6, 0LL, 0, 0, v14, (char)a5);
      xmlFree(v14);
    }
  }

uint64_t xmlRelaxNGIsNullable(uint64_t a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  __int16 v2 = *(_WORD *)(a1 + 98);
  if ((v2 & 1) != 0) {
    return 1LL;
  }
  if ((v2 & 2) != 0) {
    return 0LL;
  }
  uint64_t result = 0xFFFFFFFFLL;
  switch(*(_DWORD *)a1)
  {
    case 0xFFFFFFFF:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0x10:
      uint64_t result = xmlRelaxNGIsNullable(*(void *)(a1 + 48));
      goto LABEL_6;
    case 0:
    case 3:
      goto LABEL_9;
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      goto LABEL_20;
    case 0x11:
      uint64_t v6 = *(void *)(a1 + 48);
      if (!v6) {
        goto LABEL_20;
      }
      while (1)
      {
        uint64_t result = xmlRelaxNGIsNullable(v6);
        if ((_DWORD)result) {
          goto LABEL_6;
        }
        uint64_t v6 = *(void *)(v6 + 64);
        if (!v6) {
          goto LABEL_20;
        }
      }

    case 0x12:
    case 0x13:
    case 0x14:
      uint64_t v5 = *(void *)(a1 + 48);
      if (!v5) {
        return 1LL;
      }
      break;
    default:
      return result;
  }

  while (1)
  {
    uint64_t result = xmlRelaxNGIsNullable(v5);
    if ((_DWORD)result != 1) {
      break;
    }
    uint64_t v5 = *(void *)(v5 + 64);
    if (!v5) {
      return result;
    }
  }

LABEL_6:
  if ((_DWORD)result)
  {
    if ((_DWORD)result != 1) {
      return result;
    }
    __int16 v2 = *(_WORD *)(a1 + 98);
LABEL_9:
    __int16 v4 = v2 | 1;
    uint64_t result = 1LL;
  }

  else
  {
LABEL_20:
    uint64_t result = 0LL;
    __int16 v4 = *(_WORD *)(a1 + 98) | 2;
  }

  *(_WORD *)(a1 + 98) = v4;
  return result;
}

      xmlSchemaPIllegalAttrErr(a1, properties);
      goto LABEL_10;
    }

    __int16 v4 = a1;
    do
    {
      __int16 v4 = *(void *)(v4 + 112);
      if (v4)
      {
        uint64_t v5 = *(_DWORD *)(v4 + 160);
        if (v5 != 45) {
          continue;
        }
      }

      return 0LL;
    }

    while (*(_DWORD *)v4 != 1);
    if (v5 == 46)
    {
LABEL_13:
      uint64_t v6 = 0x1000000;
      goto LABEL_15;
    }

    if (v5 != 2)
    {
      if (v5 != 1) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }

    uint64_t v6 = 0x2000000;
  }

    __int16 v2 = *(void *)(v2 + 8);
LABEL_7:
    if (!v2) {
      return 0LL;
    }
  }

  if (*(_DWORD *)(*(void *)(v2 + 24) + 4LL * (v7 - 1)) != a2) {
    goto LABEL_6;
  }
  if (*(_DWORD *)v2 != 1)
  {
    if (*(_DWORD *)v2 != 2) {
      goto LABEL_111;
    }
    if (*(_DWORD *)v6 == 5 || (uint64_t v8 = v6, *(_DWORD *)(v6 + 160) == 45))
    {
      if ((*(_DWORD *)(v6 + 92) | 2) == 6)
      {
        uint64_t v8 = *(void *)(v6 + 192);
        if (v8) {
          goto LABEL_15;
        }
        v69 = "field resolves to a CT with simple content but the CT is missing the ST definition";
LABEL_124:
        xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaXPathProcessHistory", (const xmlChar *)v69, 0LL);
        return 0xFFFFFFFFLL;
      }

      name = 0LL;
      v38 = *(int **)(*(void *)(*(void *)(v2 + 40) + 24LL) + 8LL);
      v39 = *(const xmlChar **)(*(void *)(v2 + 48) + 24LL);
      ComponentDesignation = xmlSchemaGetComponentDesignation(&name, v38);
      xmlSchemaCustomErr4( (_DWORD *)a1,  1877,  0LL,  v38,  (const xmlChar *)"The XPath '%s' of a field of %s does evaluate to a node of non-simple type",  v39,  ComponentDesignation,  0LL,  0LL);
      if (name) {
        xmlFree(name);
      }
      v41 = *(_DWORD *)(v2 + 32) - 1;
      *(_DWORD *)(v2 + 32) = v41;
LABEL_112:
      if (v41) {
        goto LABEL_6;
      }
      goto LABEL_113;
    }

uint64_t xmlRelaxNGIsCompilable(int *a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  int v2 = *a1;
  __int16 v3 = *((_WORD *)a1 + 49);
  if (*a1 == 4)
  {
    if ((v3 & 0xC0) == 0)
    {
      uint64_t v5 = *((void *)a1 + 6);
      if (v5)
      {
        while (1)
        {
          int v6 = xmlRelaxNGIsCompilable(v5);
          if (v6 != 1) {
            break;
          }
          uint64_t v5 = *(void *)(v5 + 64);
          if (!v5)
          {
            __int16 v7 = *((_WORD *)a1 + 49) & 0x80;
            if ((*((_WORD *)a1 + 49) & 0x80) == 0) {
              __int16 v7 = 64;
            }
            goto LABEL_20;
          }
        }

        if (v6) {
          goto LABEL_4;
        }
        __int16 v7 = *((_WORD *)a1 + 49) & 0xFF3F | 0x80;
LABEL_20:
        *((_WORD *)a1 + 49) = v7;
      }
    }

LABEL_4:
    if (!*((void *)a1 + 10)) {
      return *((void *)a1 + 2) != 0LL;
    }
    return 0LL;
  }

  if ((v3 & 0x40) != 0) {
    return 1LL;
  }
  if ((v3 & 0x80) != 0) {
    return 0LL;
  }
  uint64_t result = 0xFFFFFFFFLL;
  switch(v2)
  {
    case -1:
      uint64_t result = xmlRelaxNGIsCompilable(*((void *)a1 + 6));
      goto LABEL_31;
    case 0:
    case 3:
      goto LABEL_35;
    case 1:
    case 2:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 19:
      goto LABEL_10;
    case 10:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
      uint64_t v8 = *((void *)a1 + 6);
      if (!v8) {
        return result;
      }
      while (1)
      {
        uint64_t result = xmlRelaxNGIsCompilable(v8);
        if ((_DWORD)result != 1) {
          goto LABEL_31;
        }
        uint64_t v8 = *(void *)(v8 + 64);
        if (!v8) {
          goto LABEL_34;
        }
      }

    case 11:
    case 12:
    case 13:
      *((_WORD *)a1 + 48) = -20;
      uint64_t v9 = *((void *)a1 + 6);
      if (!v9) {
        return result;
      }
      break;
    default:
      return result;
  }

  while (1)
  {
    uint64_t result = xmlRelaxNGIsCompilable(v9);
    if ((_DWORD)result != 1) {
      break;
    }
    uint64_t v9 = *(void *)(v9 + 64);
    if (!v9) {
      goto LABEL_34;
    }
  }

    xmlSchemaPIllegalAttrErr((_DWORD *)a1, properties);
    goto LABEL_7;
  }

    xmlSchemaPIllegalAttrErr((_DWORD *)a1, v9);
    goto LABEL_7;
  }

    xmlSchemaPIllegalAttrErr((_DWORD *)a1, v9);
    goto LABEL_7;
  }

    xmlSchemaPIllegalAttrErr((_DWORD *)a1, v6);
    goto LABEL_7;
  }

    xmlSchemaPIllegalAttrErr(a1, v8);
    goto LABEL_7;
  }

uint64_t xmlRelaxNGCompile(uint64_t a1, int *a2)
{
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  int v2 = a2;
  while (2)
  {
    int v4 = *v2;
    switch(*v2)
    {
      case -1:
        int v2 = (int *)*((void *)v2 + 6);
        if (!v2) {
          return 0xFFFFFFFFLL;
        }
        continue;
      case 0:
        uint64_t v8 = *(xmlAutomata **)(a1 + 232);
        uint64_t v9 = *(xmlAutomataState **)(a1 + 240);
        goto LABEL_55;
      case 1:
      case 2:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 19:
        else {
          int v6 = off_189BA2B90[v4 - 1];
        }
        fprintf((FILE *)*MEMORY[0x1895F89D0], "RNG internal error trying to compile %s\n", v6);
        return 0LL;
      case 3:
        uint64_t v10 = xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 232), *(xmlAutomataStatePtr *)(a1 + 240), 0LL);
        *(void *)(a1 + 240) = v10;
        xmlRelaxNGCompile(a1, *((void *)v2 + 6));
        xmlAutomataNewTransition( *(xmlAutomataPtr *)(a1 + 232),  *(xmlAutomataStatePtr *)(a1 + 240),  *(xmlAutomataStatePtr *)(a1 + 240),  (const xmlChar *)"#text",  0LL);
        goto LABEL_30;
      case 4:
        uint64_t v11 = *(xmlAutomata **)(a1 + 232);
        if (v11)
        {
          uint64_t v12 = (const xmlChar *)*((void *)v2 + 2);
          if (v12) {
            *(void *)(a1 + 240) = xmlAutomataNewTransition2( v11,  *(xmlAutomataStatePtr *)(a1 + 240),  0LL,  v12,  *((const xmlChar **)v2 + 3),  v2);
          }
        }

        if ((*((_WORD *)v2 + 49) & 0x40) == 0)
        {
          uint64_t v13 = *(void *)(a1 + 232);
LABEL_51:
          uint64_t result = xmlRelaxNGTryCompile(a1, v2);
          *(void *)(a1 + 232) = v13;
          return result;
        }

        uint64_t v13 = *(void *)(a1 + 232);
        uint64_t v31 = *(void *)(a1 + 240);
        *((_WORD *)v2 + 48) = -25;
        uint64_t v32 = *((void *)v2 + 6);
        xmlAutomataPtr v33 = xmlNewAutomata();
        *(void *)(a1 + 232) = v33;
        if (!v33) {
          return 0xFFFFFFFFLL;
        }
        xmlAutomataSetFlags((uint64_t)v33, 1);
        xmlAutomataStatePtr InitState = xmlAutomataGetInitState(*(xmlAutomataPtr *)(a1 + 232));
        *(void *)(a1 + 240) = InitState;
        if (v32)
        {
          do
          {
            xmlRelaxNGCompile(a1, v32);
            uint64_t v32 = *(void *)(v32 + 64);
          }

          while (v32);
          v35 = *(xmlAutomataState **)(a1 + 240);
        }

        else
        {
          v35 = InitState;
        }

        xmlAutomataSetFinalState(*(xmlAutomataPtr *)(a1 + 232), v35);
        v36 = xmlAutomataCompile(*(xmlAutomataPtr *)(a1 + 232));
        *((void *)v2 + 13) = v36;
        if (!xmlRegexpIsDeterminist(v36))
        {
          xmlRegFreeRegexp(*((xmlRegexpPtr *)v2 + 13));
          *((void *)v2 + 13) = 0LL;
        }

        xmlFreeAutomata(*(xmlAutomataPtr *)(a1 + 232));
        uint64_t result = 0LL;
        *(void *)(a1 + 232) = v13;
        *(void *)(a1 + 240) = v31;
        return result;
      case 10:
      case 11:
      case 12:
      case 13:
      case 18:
        uint64_t v7 = *((void *)v2 + 6);
        if (!v7) {
          return 0LL;
        }
        while (1)
        {
          uint64_t result = xmlRelaxNGCompile(a1, v7);
          if ((_DWORD)result) {
            break;
          }
          uint64_t v7 = *(void *)(v7 + 64);
          if (!v7) {
            return 0LL;
          }
        }

        return result;
      case 14:
        int v14 = *(xmlAutomataState **)(a1 + 240);
        uint64_t v15 = *((void *)v2 + 6);
        uint64_t v16 = v14;
        if (v15)
        {
          do
          {
            xmlRelaxNGCompile(a1, v15);
            uint64_t v15 = *(void *)(v15 + 64);
          }

          while (v15);
          uint64_t v16 = *(xmlAutomataState **)(a1 + 240);
        }

        xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 232), v14, v16);
        return 0LL;
      case 15:
        uint64_t v10 = xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 232), *(xmlAutomataStatePtr *)(a1 + 240), 0LL);
        *(void *)(a1 + 240) = v10;
        uint64_t v17 = *((void *)v2 + 6);
        uint64_t v18 = v10;
        if (v17)
        {
          do
          {
            xmlRelaxNGCompile(a1, v17);
            uint64_t v17 = *(void *)(v17 + 64);
          }

          while (v17);
          uint64_t v18 = *(xmlAutomataState **)(a1 + 240);
        }

        xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 232), v18, v10);
LABEL_30:
        uint64_t v8 = *(xmlAutomata **)(a1 + 232);
        uint64_t v9 = v10;
        goto LABEL_55;
      case 16:
        uint64_t v19 = *((void *)v2 + 6);
        if (!v19)
        {
          int v21 = *(xmlAutomataState **)(a1 + 240);
LABEL_53:
          uint64_t v22 = v21;
          goto LABEL_54;
        }

        do
        {
          xmlRelaxNGCompile(a1, v19);
          uint64_t v19 = *(void *)(v19 + 64);
        }

        while (v19);
        uint64_t v20 = *((void *)v2 + 6);
        int v21 = *(xmlAutomataState **)(a1 + 240);
        if (!v20) {
          goto LABEL_53;
        }
        do
        {
          xmlRelaxNGCompile(a1, v20);
          uint64_t v20 = *(void *)(v20 + 64);
        }

        while (v20);
        uint64_t v22 = *(xmlAutomataState **)(a1 + 240);
LABEL_54:
        xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 232), v22, v21);
        uint64_t v8 = *(xmlAutomata **)(a1 + 232);
        uint64_t v9 = v21;
LABEL_55:
        xmlAutomataStatePtr v30 = xmlAutomataNewEpsilon(v8, v9, 0LL);
        uint64_t result = 0LL;
        *(void *)(a1 + 240) = v30;
        return result;
      case 17:
        uint64_t v23 = *((void *)v2 + 6);
        if (v23)
        {
          int v24 = 0LL;
          uint64_t v25 = *(void *)(a1 + 240);
          do
          {
            *(void *)(a1 + 240) = v25;
            uint64_t result = xmlRelaxNGCompile(a1, v23);
            if ((_DWORD)result) {
              goto LABEL_59;
            }
            if (v24) {
              xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 232), *(xmlAutomataStatePtr *)(a1 + 240), v24);
            }
            else {
              int v24 = *(xmlAutomataState **)(a1 + 240);
            }
            uint64_t v23 = *(void *)(v23 + 64);
          }

          while (v23);
        }

        else
        {
          int v24 = 0LL;
        }

        uint64_t result = 0LL;
LABEL_59:
        *(void *)(a1 + 240) = v24;
        return result;
      case 20:
        __int128 v37 = *(_OWORD *)(a1 + 232);
        *((_WORD *)v2 + 48) = -25;
        uint64_t v26 = *((void *)v2 + 6);
        xmlAutomataPtr v27 = xmlNewAutomata();
        *(void *)(a1 + 232) = v27;
        if (!v27) {
          return 0xFFFFFFFFLL;
        }
        xmlAutomataSetFlags((uint64_t)v27, 1);
        xmlAutomataStatePtr v28 = xmlAutomataGetInitState(*(xmlAutomataPtr *)(a1 + 232));
        *(void *)(a1 + 240) = v28;
        if (v26)
        {
          do
          {
            xmlRelaxNGCompile(a1, v26);
            uint64_t v26 = *(void *)(v26 + 64);
          }

          while (v26);
          __int128 v29 = *(xmlAutomataState **)(a1 + 240);
        }

        else
        {
          __int128 v29 = v28;
        }

        xmlAutomataSetFinalState(*(xmlAutomataPtr *)(a1 + 232), v29);
        if (xmlAutomataIsDeterminist(*(xmlAutomataPtr *)(a1 + 232))) {
          *((void *)v2 + 13) = xmlAutomataCompile(*(xmlAutomataPtr *)(a1 + 232));
        }
        xmlFreeAutomata(*(xmlAutomataPtr *)(a1 + 232));
        uint64_t result = 0LL;
        *(_OWORD *)(a1 + 232) = v37;
        return result;
      default:
        return 0LL;
    }
  }

FILE *xmlRelaxNGDumpDefine(FILE *result, uint64_t a2)
{
  if (a2)
  {
    __int16 v3 = result;
    switch(*(_DWORD *)a2)
    {
      case 0xFFFFFFFF:
        for (uint64_t i = *(void *)(a2 + 48); i; uint64_t i = *(void *)(i + 64))
          uint64_t result = (FILE *)xmlRelaxNGDumpDefine(v3, i);
        return result;
      case 0:
        uint64_t v9 = "<empty/>\n";
        goto LABEL_63;
      case 1:
        uint64_t v9 = "<notAllowed/>\n";
        goto LABEL_67;
      case 2:
      case 6:
      case 0x14:
        xmlGenericErrorFunc v4 = *__xmlGenericError();
        uint64_t v5 = *__xmlGenericErrorContext();
        return (FILE *)((uint64_t (*)(void *, const char *, ...))v4)( v5,  "Unimplemented block at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/relaxng.c",  7849);
      case 3:
        uint64_t v9 = "<text/>\n";
        goto LABEL_24;
      case 4:
        fwrite("<element>\n", 0xAuLL, 1uLL, result);
        if (*(void *)(a2 + 16))
        {
          fwrite("<name", 5uLL, 1uLL, v3);
          if (*(void *)(a2 + 24)) {
            fprintf(v3, " ns=%s", *(const char **)(a2 + 24));
          }
          fprintf(v3, ">%s</name>\n", *(const char **)(a2 + 16));
        }

        for (uint64_t j = *(void *)(a2 + 72); j; uint64_t j = *(void *)(j + 64))
          xmlRelaxNGDumpDefine(v3, j);
        for (uint64_t k = *(void *)(a2 + 48); k; uint64_t k = *(void *)(k + 64))
          xmlRelaxNGDumpDefine(v3, k);
        uint64_t v9 = "</element>\n";
        size_t v12 = 11LL;
        goto LABEL_68;
      case 5:
      case 7:
        xmlGenericErrorFunc v6 = *__xmlGenericError();
        uint64_t v7 = *__xmlGenericErrorContext();
        return (FILE *)((uint64_t (*)(void *, const char *, ...))v6)( v7,  "Unimplemented block at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/relaxng.c",  7845);
      case 8:
        fwrite("<list>\n", 7uLL, 1uLL, result);
        for (uint64_t m = *(void *)(a2 + 48); m; uint64_t m = *(void *)(m + 64))
          xmlRelaxNGDumpDefine(v3, m);
        uint64_t v9 = "</list>\n";
LABEL_24:
        size_t v12 = 8LL;
        goto LABEL_68;
      case 9:
        fwrite("<attribute>\n", 0xCuLL, 1uLL, result);
        for (uint64_t n = *(void *)(a2 + 48); n; uint64_t n = *(void *)(n + 64))
          xmlRelaxNGDumpDefine(v3, n);
        uint64_t v9 = "</attribute>\n";
        goto LABEL_55;
      case 0xA:
        fwrite("<define", 7uLL, 1uLL, result);
        if (*(void *)(a2 + 16)) {
          fprintf(v3, " name=%s", *(const char **)(a2 + 16));
        }
        fwrite(">\n", 2uLL, 1uLL, v3);
        for (iuint64_t i = *(void *)(a2 + 48); ii; iuint64_t i = *(void *)(ii + 64))
          xmlRelaxNGDumpDefine(v3, ii);
        uint64_t v9 = "</define>\n";
        goto LABEL_59;
      case 0xB:
        fwrite("<ref", 4uLL, 1uLL, result);
        if (*(void *)(a2 + 16)) {
          fprintf(v3, " name=%s", *(const char **)(a2 + 16));
        }
        fwrite(">\n", 2uLL, 1uLL, v3);
        for (juint64_t j = *(void *)(a2 + 48); jj; juint64_t j = *(void *)(jj + 64))
          xmlRelaxNGDumpDefine(v3, jj);
        uint64_t v9 = "</ref>\n";
        size_t v12 = 7LL;
        goto LABEL_68;
      case 0xC:
        fwrite("<externalRef>", 0xDuLL, 1uLL, result);
        for (kuint64_t k = *(void *)(a2 + 48); kk; kuint64_t k = *(void *)(kk + 64))
          xmlRelaxNGDumpDefine(v3, kk);
        uint64_t v9 = "</externalRef>\n";
        size_t v12 = 15LL;
        goto LABEL_68;
      case 0xD:
        fwrite("<parentRef", 0xAuLL, 1uLL, result);
        if (*(void *)(a2 + 16)) {
          fprintf(v3, " name=%s", *(const char **)(a2 + 16));
        }
        fwrite(">\n", 2uLL, 1uLL, v3);
        for (muint64_t m = *(void *)(a2 + 48); mm; muint64_t m = *(void *)(mm + 64))
          xmlRelaxNGDumpDefine(v3, mm);
        uint64_t v9 = "</parentRef>\n";
        goto LABEL_55;
      case 0xE:
        fwrite("<optional>\n", 0xBuLL, 1uLL, result);
        for (nuint64_t n = *(void *)(a2 + 48); nn; nuint64_t n = *(void *)(nn + 64))
          xmlRelaxNGDumpDefine(v3, nn);
        uint64_t v9 = "</optional>\n";
        size_t v12 = 12LL;
        goto LABEL_68;
      case 0xF:
        fwrite("<zeroOrMore>\n", 0xDuLL, 1uLL, result);
        for (uint64_t i1 = *(void *)(a2 + 48); i1; uint64_t i1 = *(void *)(i1 + 64))
          xmlRelaxNGDumpDefine(v3, i1);
        uint64_t v9 = "</zeroOrMore>\n";
        goto LABEL_67;
      case 0x10:
        fwrite("<oneOrMore>\n", 0xCuLL, 1uLL, result);
        for (uint64_t i2 = *(void *)(a2 + 48); i2; uint64_t i2 = *(void *)(i2 + 64))
          xmlRelaxNGDumpDefine(v3, i2);
        uint64_t v9 = "</oneOrMore>\n";
LABEL_55:
        size_t v12 = 13LL;
        goto LABEL_68;
      case 0x11:
        fwrite("<choice>\n", 9uLL, 1uLL, result);
        for (uint64_t i3 = *(void *)(a2 + 48); i3; uint64_t i3 = *(void *)(i3 + 64))
          xmlRelaxNGDumpDefine(v3, i3);
        uint64_t v9 = "</choice>\n";
LABEL_59:
        size_t v12 = 10LL;
        goto LABEL_68;
      case 0x12:
        fwrite("<group>\n", 8uLL, 1uLL, result);
        for (uint64_t i4 = *(void *)(a2 + 48); i4; uint64_t i4 = *(void *)(i4 + 64))
          xmlRelaxNGDumpDefine(v3, i4);
        uint64_t v9 = "</group>\n";
LABEL_63:
        size_t v12 = 9LL;
        goto LABEL_68;
      case 0x13:
        fwrite("<interleave>\n", 0xDuLL, 1uLL, result);
        for (uint64_t i5 = *(void *)(a2 + 48); i5; uint64_t i5 = *(void *)(i5 + 64))
          xmlRelaxNGDumpDefine(v3, i5);
        uint64_t v9 = "</interleave>\n";
LABEL_67:
        size_t v12 = 14LL;
LABEL_68:
        uint64_t result = (FILE *)fwrite(v9, v12, 1uLL, v3);
        break;
      default:
        return result;
    }
  }

  return result;
}

uint64_t xmlRelaxNGValidateAttributeList(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v2 = a2;
  int v4 = 0;
  uint64_t v5 = 0LL;
  uint64_t v6 = a2;
  do
  {
    if (*(_DWORD *)v6 == 9)
    {
      else {
        uint64_t v5 = v5;
      }
    }

    else
    {
      int v4 = 1;
    }

    uint64_t v6 = *(void *)(v6 + 64);
  }

  while (v6);
  if (v4)
  {
    do
    {
      if (*(_DWORD *)v2 != 9)
      {
        if (!*(void *)(a1 + 96) && !*(void *)(a1 + 104))
        {
          xmlRelaxNGAddValidError(a1, 6, 0LL, 0LL, 0);
          return 0xFFFFFFFFLL;
        }

        int v7 = xmlRelaxNGValidateDefinition(a1, v2);
        if (v7 < 0) {
          uint64_t v5 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v5 = v5;
        }
        if (v7 == -1) {
          return v5;
        }
      }

      uint64_t v2 = *(void *)(v2 + 64);
    }

    while (v2);
  }

  return v5;
}

uint64_t xmlRelaxNGValidateElementEnd(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 96);
  uint64_t v5 = *(void *)(v4 + 8);
  if (v5 && (uint64_t v6 = xmlRelaxNGSkipIgnored(a1, v5), (*(void *)(v4 + 8) = v6) != 0LL))
  {
    if (a2) {
      xmlRelaxNGAddValidError(a1, 26, *(xmlChar **)(*(void *)v4 + 16LL), *(xmlChar **)(v6 + 16), 0);
    }
    return 0xFFFFFFFFLL;
  }

  else
  {
    uint64_t v8 = *(unsigned int *)(v4 + 16);
    if ((int)v8 < 1)
    {
      return 0LL;
    }

    else
    {
      uint64_t v9 = *(void *)(v4 + 48);
      uint64_t v7 = 0xFFFFFFFFLL;
      while (!*(void *)v9)
      {
        uint64_t v7 = (v7 - 1);
        v9 += 8LL;
        if (!--v8) {
          return 0LL;
        }
      }

      if (a2) {
        xmlRelaxNGAddValidError(a1, 27, *(xmlChar **)(*(void *)v9 + 16LL), *(xmlChar **)(*(void *)v4 + 16LL), 0);
      }
    }
  }

  return v7;
}

uint64_t xmlRelaxNGLogBestError(uint64_t result)
{
  v1 = *(unsigned int **)(result + 104);
  if (v1)
  {
    uint64_t v2 = *v1;
    if ((int)v2 >= 1)
    {
      uint64_t v3 = 0LL;
      uint64_t v4 = *((void *)v1 + 1);
      int v5 = -1;
      int v6 = 1000000;
      do
      {
        uint64_t v7 = *(void *)(v4 + 8 * v3);
        if (v7)
        {
          if (*(void *)(v7 + 8))
          {
            if (v5 == -1 || v6 > 100000)
            {
              int v5 = v3;
              int v6 = 100000;
            }
          }

          else
          {
            int v10 = *(_DWORD *)(v7 + 24);
            if (v5 == -1 || v6 > v10)
            {
              int v5 = v3;
              int v6 = v10;
            }
          }
        }

        ++v3;
      }

      while (v2 != v3);
      if ((v5 & 0x80000000) == 0 && v5 < (int)v2)
      {
        *(void *)(result + 96) = *(void *)(v4 + 8LL * v5);
        return xmlRelaxNGValidateElementEnd(result, 1);
      }
    }
  }

  return result;
}

uint64_t xmlRelaxNGValidateAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 96);
  int v5 = *(_DWORD *)(v2 + 16);
  if (*(void *)(a2 + 16))
  {
    if (v5 >= 1)
    {
      for (uint64_t i = 0LL; i < *(int *)(v2 + 16); ++i)
      {
        uint64_t v7 = *(void *)(*(void *)(v2 + 48) + 8 * i);
        if (!v7 || !xmlStrEqual(*(const xmlChar **)(a2 + 16), *(const xmlChar **)(v7 + 16))) {
          goto LABEL_13;
        }
        uint64_t v8 = *(const xmlChar **)(a2 + 24);
        if (v8 && *v8)
        {
          uint64_t v9 = *(void *)(v7 + 72);
          if (!v9) {
            goto LABEL_13;
          }
        }

        else
        {
          uint64_t v9 = *(void *)(v7 + 72);
          if (!v9) {
            goto LABEL_23;
          }
        }

        if (xmlStrEqual(v8, *(const xmlChar **)(v9 + 16)))
        {
LABEL_23:
          String = xmlNodeListGetString(*(xmlDocPtr *)(v7 + 64), *(const xmlNode **)(v7 + 24), 1);
          uint64_t v15 = *(void **)(a1 + 96);
          uint64_t v16 = v15[4];
          uint64_t v17 = v15[1];
          v15[1] = v7;
          v15[4] = String;
          v15[5] = 0LL;
          uint64_t v18 = *(void *)(a2 + 48);
          if (v18)
          {
            do
            {
              uint64_t v12 = xmlRelaxNGValidateValue(a1, v18);
              if ((_DWORD)v12) {
                break;
              }
              uint64_t v18 = *(void *)(v18 + 64);
            }

            while (v18);
            goto LABEL_30;
          }

uint64_t xmlRelaxNGAttributeMatch(void *a1, uint64_t a2)
{
  uint64_t v4 = (const xmlChar *)a1[2];
  if (v4)
  {
    uint64_t result = xmlStrEqual(v4, *(const xmlChar **)(a2 + 16));
    if (!(_DWORD)result) {
      return result;
    }
  }

  int v6 = (const xmlChar *)a1[3];
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 72);
    if (*v6)
    {
      if (!v7) {
        return 0LL;
      }
      uint64_t result = xmlStrEqual(v6, *(const xmlChar **)(v7 + 16));
      if (!(_DWORD)result) {
        return result;
      }
    }

    else if (v7)
    {
      return 0LL;
    }
  }

  uint64_t v8 = a1[10];
  if (!v8) {
    return 1LL;
  }
  if (*(_DWORD *)v8 != 17)
  {
    if (*(_DWORD *)v8 == 2)
    {
      uint64_t v9 = *(void *)(v8 + 48);
      if (v9)
      {
        while (xmlRelaxNGAttributeMatch(v9, a2) != 1)
        {
          uint64_t v9 = *(void *)(v9 + 64);
          if (!v9) {
            return 1LL;
          }
        }

        return 0LL;
      }
    }

    else
    {
      xmlGenericErrorFunc v11 = *__xmlGenericError();
      uint64_t v12 = __xmlGenericErrorContext();
      v11( *v12,  "Unimplemented block at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/relaxng.c",  9117);
    }

    return 1LL;
  }

  uint64_t v10 = *(void *)(v8 + 80);
  if (!v10) {
    return 0LL;
  }
  while (1)
  {
    uint64_t result = xmlRelaxNGAttributeMatch(v10, a2);
    if ((_DWORD)result == 1) {
      break;
    }
    uint64_t v10 = *(void *)(v10 + 64);
    if (!v10) {
      return 0LL;
    }
  }

  return result;
}

uint64_t xmlRelaxNGValidateValue(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  while (2)
  {
    uint64_t v4 = *(void *)(a1 + 96);
    int v5 = *(unsigned __int8 **)(v4 + 32);
    switch(*(_DWORD *)a2)
    {
      case 0:
        if (!v5) {
          return 0LL;
        }
        unsigned int v9 = *v5;
        if (!*v5) {
          return 0LL;
        }
        for (uint64_t i = v5 + 1; ; ++i)
        {
          if (v9 > 0x20) {
            return 0xFFFFFFFFLL;
          }
          if (((1LL << v9) & 0x100002600LL) == 0) {
            break;
          }
          unsigned int v11 = *i;
          unsigned int v9 = v11;
        }

        if (!v9) {
          return 0LL;
        }
        return 0xFFFFFFFFLL;
      case 2:
        uint64_t v15 = *(void *)(a2 + 48);
        if (!v15) {
          return 0LL;
        }
        uint64_t v14 = 0LL;
        while (xmlRelaxNGValidateValue(v3))
        {
          uint64_t v15 = *(void *)(v15 + 64);
          if (!v15) {
            return v14;
          }
        }

        return 0xFFFFFFFFLL;
      case 3:
        return 0LL;
      case 5:
        uint64_t v14 = xmlRelaxNGValidateDatatype(a1, *(xmlChar **)(v4 + 32), a2, *(void *)(v4 + 8));
        if (!(_DWORD)v14) {
          xmlRelaxNGNextValue(v3);
        }
        return v14;
      case 7:
        if (xmlStrEqual(*(const xmlChar **)(v4 + 32), *(const xmlChar **)(a2 + 32))) {
          goto LABEL_27;
        }
        uint64_t v7 = *(xmlChar **)(a2 + 16);
        if (v7)
        {
          uint64_t v43 = *(void *)(a2 + 40);
          if (v43)
          {
            v44 = *(uint64_t (**)(void, void, void, void, void, unsigned __int8 *, void))(v43 + 32);
            if (v44)
            {
              int v45 = v44( *(void *)(v43 + 8),  *(void *)(a2 + 16),  *(void *)(a2 + 32),  *(void *)(a2 + 8),  *(void *)(a2 + 72),  v5,  **(void **)(v3 + 96));
              if ((v45 & 0x80000000) == 0)
              {
                if (v45 == 1)
                {
LABEL_27:
                  xmlRelaxNGNextValue(v3);
                  return 0LL;
                }

                return 0xFFFFFFFFLL;
              }

              uint64_t v7 = *(xmlChar **)(a2 + 16);
            }
          }

          a1 = v3;
          int v6 = 5;
          goto LABEL_6;
        }

        v47 = xmlRelaxNGNormalize(v3, *(_BYTE **)(a2 + 32));
        v48 = xmlRelaxNGNormalize(v3, v5);
        v49 = (xmlChar *)v48;
        if (v47 && v48)
        {
          if (xmlStrEqual(v47, v48)) {
            int v50 = 0;
          }
          else {
            int v50 = -1;
          }
        }

        else
        {
          int v50 = -1;
          if (!v47) {
            goto LABEL_103;
          }
        }

        xmlFree(v47);
LABEL_103:
        if (v49) {
          xmlFree(v49);
        }
        if (!v50) {
          goto LABEL_27;
        }
        return 0xFFFFFFFFLL;
      case 8:
        uint64_t v16 = *(void *)(a2 + 48);
        uint64_t v17 = *(void *)(v4 + 40);
        uint64_t v18 = xmlStrdup(*(const xmlChar **)(v4 + 32));
        if (v18 || (uint64_t v18 = xmlStrdup((const xmlChar *)&byte_181A3ACBA)) != 0LL)
        {
          uint64_t v19 = v18;
          while (1)
          {
            unsigned int v20 = *v19;
            if (v20 > 0x20) {
              goto LABEL_40;
            }
            if (((1LL << v20) & 0x100002600LL) != 0)
            {
              do
              {
                *v19++ = 0;
                unsigned int v21 = *v19;
                BOOL v22 = v21 > 0x20;
                uint64_t v23 = (1LL << v21) & 0x100002600LL;
                BOOL v24 = v22 || v23 == 0;
              }

              while (!v24);
            }

            else
            {
              if (!*v19)
              {
                uint64_t v35 = *(void *)(v3 + 96);
                *(void *)(v35 + 40) = v19;
                v36 = v18;
                do
                {
                  BOOL v24 = v36 == v19;
                  int v38 = *v36++;
                  int v37 = v38;
                }

                while (!v24 && !v37);
                v39 = v36 - 1;
                *(void *)(v35 + 32) = v36 - 1;
                if (v16)
                {
                  do
                  {
                    uint64_t v40 = *(void *)(v3 + 96);
                    if (*(void *)(v40 + 32) == *(void *)(v40 + 40)) {
                      *(void *)(v40 + 32) = 0LL;
                    }
                    uint64_t v41 = xmlRelaxNGValidateValue(v3);
                    if ((_DWORD)v41)
                    {
                      uint64_t v14 = v41;
                      goto LABEL_94;
                    }

                    uint64_t v16 = *(void *)(v16 + 64);
                  }

                  while (v16);
                  uint64_t v35 = *(void *)(v3 + 96);
                  v39 = *(xmlChar **)(v35 + 32);
                  if (v39) {
                    goto LABEL_74;
                  }
LABEL_92:
                  uint64_t v14 = 0LL;
                }

                else
                {
LABEL_74:
                  if (v39 == *(xmlChar **)(v35 + 40)) {
                    goto LABEL_92;
                  }
                  xmlRelaxNGAddValidError(v3, 8, v39, 0LL, 0);
                  uint64_t v14 = 0xFFFFFFFFLL;
                }

LABEL_40:
              ++v19;
            }
          }
        }

        a1 = v3;
        int v6 = 6;
LABEL_5:
        uint64_t v7 = 0LL;
LABEL_6:
        xmlRelaxNGAddValidError(a1, v6, v7, 0LL, 0);
        return 0xFFFFFFFFLL;
      case 0xA:
      case 0x12:
        uint64_t v8 = *(void *)(a2 + 48);
        if (!v8) {
          return 0LL;
        }
        while (!xmlRelaxNGValidateValue(v3))
        {
          uint64_t v8 = *(void *)(v8 + 64);
          if (!v8) {
            return 0LL;
          }
        }

        return 0xFFFFFFFFLL;
      case 0xB:
      case 0xD:
        a2 = *(void *)(a2 + 48);
        if (a2) {
          continue;
        }
        int v6 = 7;
        goto LABEL_5;
      case 0xE:
        if (!v5 || !*v5) {
          return 0LL;
        }
        int v25 = *(_DWORD *)(a1 + 56);
        *(_DWORD *)(a1 + 56) = v25 | 1;
        int v26 = xmlRelaxNGValidateValue(a1);
        *(_DWORD *)(v3 + 56) = v25;
        if (v26) {
          *(void *)(*(void *)(v3 + 96) + 32LL) = v5;
        }
        goto LABEL_79;
      case 0xF:
        goto LABEL_49;
      case 0x10:
        uint64_t v27 = *(void *)(a2 + 48);
        if (!v27) {
          goto LABEL_49;
        }
        do
        {
          uint64_t v28 = xmlRelaxNGValidateValue(v3);
          if ((_DWORD)v28) {
            return v28;
          }
          uint64_t v27 = *(void *)(v27 + 64);
        }

        while (v27);
        uint64_t v4 = *(void *)(v3 + 96);
        int v5 = *(unsigned __int8 **)(v4 + 32);
LABEL_49:
        if (!v5 || !*v5) {
          return 0LL;
        }
        __int128 v29 = 0LL;
        int v30 = *(_DWORD *)(v3 + 56);
        *(_DWORD *)(v3 + 56) = v30 | 1;
        do
        {
          if (v29 == v5) {
            break;
          }
          __int128 v29 = v5;
          uint64_t v31 = *(void *)(a2 + 48);
          if (v31)
          {
            while (!xmlRelaxNGValidateValue(v3))
            {
              uint64_t v31 = *(void *)(v31 + 64);
              if (!v31)
              {
                uint64_t v4 = *(void *)(v3 + 96);
                goto LABEL_58;
              }
            }

            *(void *)(*(void *)(v3 + 96) + 32LL) = v29;
            break;
          }

    BOOL v22 = *(void *)(v22 + 48);
  }

  while (v22);
  if (!v23) {
    goto LABEL_72;
  }
LABEL_76:
  snprintf(__str, 0x3E7uLL, "%s line %ld: %s\n", (const char *)NodePath, LineNo, (const char *)v23);
  if ((*v14 & 8) != 0)
  {
    uint64_t v41 = *(void (__cdecl **)(void *, xmlErrorPtr))(a1 + 104);
    if (v41) {
      v42 = 0LL;
    }
    else {
      v42 = *(void (**)(void *, const char *, ...))(a1 + 88);
    }
    if (*(_DWORD *)(a2 + 8) == 1) {
      uint64_t v43 = 4000;
    }
    else {
      uint64_t v43 = 4001;
    }
    if (a5) {
      v44 = *(const xmlChar **)(a5 + 16);
    }
    else {
      v44 = 0LL;
    }
    __xmlRaiseError( v41,  v42,  *(void **)(a1 + 80),  0LL,  (uint64_t)a4,  0x1Cu,  v43,  2,  0LL,  LineNo,  v44,  NodePath,  v23,  0,  0,  "%s",  (char)__str);
  }

  else
  {
    fputs(__str, (FILE *)*MEMORY[0x1895F89D0]);
  }

  xmlFree(v23);
  if (NodePath)
  {
    if (NodePath != a4->name) {
      xmlFree(NodePath);
    }
  }

  uint64_t v17 = xmlStringCurrentChar(0LL, value, &len);
  uint64_t v18 = v17;
  if (space)
  {
    if (v17 <= 255)
    {
      while (v18 <= 0x20 && ((1LL << v18) & 0x100002600LL) != 0)
      {
        v3 += len;
        uint64_t v18 = xmlStringCurrentChar(0LL, v3, &len);
        if (v18 >= 256) {
          goto LABEL_53;
        }
      }

  __int128 v29 = *((_DWORD *)DtdAttrDesc + 20);
  attr->atype = v29;
  if (xmlValidateAttributeValueInternal((uint64_t)doc, v29, value))
  {
    int v30 = 1;
  }

  else
  {
    xmlErrValidNode( (uint64_t *)ctxt,  (int)elem,  502,  (uint64_t)"Syntax of value for attribute %s of %s is not valid\n",  (uint64_t)attr->name,  (xmlChar *)elem->name,  0LL);
    int v30 = 0;
  }

  if (*((_DWORD *)DtdAttrDesc + 21) == 4 && !xmlStrEqual(value, *((const xmlChar **)DtdAttrDesc + 11)))
  {
    xmlErrValidNode( (uint64_t *)ctxt,  (int)elem,  500,  (uint64_t)"Value for attribute %s of %s is different from default %s\n",  (uint64_t)attr->name,  (xmlChar *)elem->name,  *((xmlChar **)DtdAttrDesc + 11));
    int v30 = 0;
  }

  uint64_t v31 = *((_DWORD *)DtdAttrDesc + 20);
  if (v31 == 2)
  {
    if (!xmlAddID(ctxt, doc, value, attr)) {
      int v30 = 0;
    }
    uint64_t v31 = *((_DWORD *)DtdAttrDesc + 20);
  }

  if ((v31 - 3) <= 1)
  {
    if (!xmlAddRef(ctxt, doc, value, attr)) {
      int v30 = 0;
    }
    uint64_t v31 = *((_DWORD *)DtdAttrDesc + 20);
  }

  if (v31 == 10)
  {
    uint64_t v32 = (uint64_t **)*((void *)DtdAttrDesc + 12);
    int v33 = doc->intSubset;
    if (!v33 || (uint64_t v34 = (xmlHashTable *)v33->notations) == 0LL || !xmlHashLookup(v34, value))
    {
      uint64_t v35 = doc->extSubset;
      if (!v35 || (notations = (xmlHashTable *)v35->notations) == 0LL || !xmlHashLookup(notations, value))
      {
        xmlErrValidNode( (uint64_t *)ctxt,  (int)elem,  537,  (uint64_t)"Value %s for attribute %s of %s is not a declared Notation\n",  (uint64_t)value,  (xmlChar *)attr->name,  (xmlChar *)elem->name);
        int v30 = 0;
      }
    }

    if (v32)
    {
      while (!xmlStrEqual((const xmlChar *)v32[1], value))
      {
        uint64_t v32 = (uint64_t **)*v32;
        if (!v32) {
          goto LABEL_68;
        }
      }
    }

    else
    {
LABEL_68:
      xmlErrValidNode( (uint64_t *)ctxt,  (int)elem,  527,  (uint64_t)"Value %s for attribute %s of %s is not among the enumerated notations\n",  (uint64_t)value,  (xmlChar *)attr->name,  (xmlChar *)elem->name);
      int v30 = 0;
    }
  }

  if (*((_DWORD *)DtdAttrDesc + 20) == 9)
  {
    int v37 = (const xmlChar **)(DtdAttrDesc + 96);
    while (1)
    {
      int v37 = (const xmlChar **)*v37;
      if (!v37) {
        break;
      }
      if (xmlStrEqual(v37[1], value)) {
        goto LABEL_75;
      }
    }

    xmlErrValidNode( (uint64_t *)ctxt,  (int)elem,  502,  (uint64_t)"Value %s for attribute %s of %s is not among the enumerated set\n",  (uint64_t)value,  (xmlChar *)attr->name,  (xmlChar *)elem->name);
    int v30 = 0;
  }

  if (xmlValidateAttributeValueInternal((uint64_t)doc, *((_DWORD *)DtdAttrDesc + 20), value))
  {
    int v30 = 1;
  }

  else
  {
    v36 = ns->prefix;
    int v37 = (xmlChar *)elem->name;
    if (v36)
    {
      int v38 = "Syntax of value for attribute xmlns:%s of %s is not valid\n";
      v39 = (uint64_t *)ctxt;
      uint64_t v40 = (int)elem;
    }

    else
    {
      int v38 = "Syntax of value for attribute xmlns of %s is not valid\n";
      v39 = (uint64_t *)ctxt;
      uint64_t v40 = (int)elem;
      v36 = elem->name;
      int v37 = 0LL;
    }

    xmlErrValidNode(v39, v40, 516, (uint64_t)v38, (uint64_t)v36, v37, 0LL);
    int v30 = 0;
  }

  if (*((_DWORD *)DtdAttrDesc + 21) == 4 && !xmlStrEqual(value, *((const xmlChar **)DtdAttrDesc + 11)))
  {
    uint64_t v41 = ns->prefix;
    v42 = (xmlChar *)elem->name;
    uint64_t v43 = (xmlChar *)*((void *)DtdAttrDesc + 11);
    if (v41)
    {
      v44 = "Value for attribute xmlns:%s of %s is different from default %s\n";
      int v45 = (uint64_t *)ctxt;
      uint64_t v46 = (int)elem;
    }

    else
    {
      v44 = "Value for attribute xmlns of %s is different from default %s\n";
      int v45 = (uint64_t *)ctxt;
      uint64_t v46 = (int)elem;
      uint64_t v41 = elem->name;
      v42 = (xmlChar *)*((void *)DtdAttrDesc + 11);
      uint64_t v43 = 0LL;
    }

    xmlErrValidNode(v45, v46, 500, (uint64_t)v44, (uint64_t)v41, v42, v43);
    int v30 = 0;
  }

  v47 = *((_DWORD *)DtdAttrDesc + 20);
  if (v47 == 10)
  {
    v48 = (uint64_t **)*((void *)DtdAttrDesc + 12);
    v49 = doc->intSubset;
    if (!v49 || (int v50 = (xmlHashTable *)v49->notations) == 0LL || !xmlHashLookup(v50, value))
    {
      v51 = doc->extSubset;
      if (!v51 || (notations = (xmlHashTable *)v51->notations) == 0LL || !xmlHashLookup(notations, value))
      {
        v53 = (xmlChar *)ns->prefix;
        v54 = (xmlChar *)elem->name;
        if (v53)
        {
          v55 = "Value %s for attribute xmlns:%s of %s is not a declared Notation\n";
          v56 = (uint64_t *)ctxt;
          v57 = (int)elem;
          v58 = value;
        }

        else
        {
          v55 = "Value %s for attribute xmlns of %s is not a declared Notation\n";
          v56 = (uint64_t *)ctxt;
          v57 = (int)elem;
          v58 = value;
          v53 = (xmlChar *)elem->name;
          v54 = 0LL;
        }

        xmlErrValidNode(v56, v57, 537, (uint64_t)v55, (uint64_t)v58, v53, v54);
        int v30 = 0;
      }
    }

    if (v48)
    {
      while (!xmlStrEqual((const xmlChar *)v48[1], value))
      {
        v48 = (uint64_t **)*v48;
        if (!v48) {
          goto LABEL_72;
        }
      }
    }

    else
    {
LABEL_72:
      v59 = (xmlChar *)ns->prefix;
      v60 = (xmlChar *)elem->name;
      if (v59)
      {
        v61 = "Value %s for attribute xmlns:%s of %s is not among the enumerated notations\n";
        v62 = (uint64_t *)ctxt;
        v63 = (int)elem;
        v64 = value;
      }

      else
      {
        v61 = "Value %s for attribute xmlns of %s is not among the enumerated notations\n";
        v62 = (uint64_t *)ctxt;
        v63 = (int)elem;
        v64 = value;
        v59 = (xmlChar *)elem->name;
        v60 = 0LL;
      }

      xmlErrValidNode(v62, v63, 527, (uint64_t)v61, (uint64_t)v64, v59, v60);
      int v30 = 0;
    }

    v47 = *((_DWORD *)DtdAttrDesc + 20);
  }

  if (v47 == 9)
  {
    v65 = (const xmlChar **)(DtdAttrDesc + 96);
    while (1)
    {
      v65 = (const xmlChar **)*v65;
      if (!v65) {
        break;
      }
      if (xmlStrEqual(v65[1], value)) {
        goto LABEL_86;
      }
    }

    v66 = (xmlChar *)ns->prefix;
    v67 = (xmlChar *)elem->name;
    if (v66)
    {
      v68 = "Value %s for attribute xmlns:%s of %s is not among the enumerated set\n";
      v69 = (uint64_t *)ctxt;
      v70 = (int)elem;
      v71 = value;
    }

    else
    {
      v68 = "Value %s for attribute xmlns of %s is not among the enumerated set\n";
      v69 = (uint64_t *)ctxt;
      v70 = (int)elem;
      v71 = value;
      v66 = (xmlChar *)elem->name;
      v67 = 0LL;
    }

    xmlErrValidNode(v69, v70, 502, (uint64_t)v68, (uint64_t)v71, v66, v67);
    int v30 = 0;
  }

  ++v9[14];
  Prop = xmlXIncludeGetProp((uint64_t)v9, (xmlNode *)v16, (const xmlChar *)"href");
  if (!Prop)
  {
    Prop = xmlStrdup((const xmlChar *)&byte_181A3ACBA);
    if (!Prop) {
      goto LABEL_123;
    }
  }

  uint64_t v27 = *Prop;
  if (v27 == 35 || v27 == 0)
  {
    uint64_t v32 = 0;
    v218 = 1;
  }

  else
  {
    v218 = 0;
    uint64_t v32 = 1;
  }

  int v33 = xmlXIncludeGetProp((uint64_t)v9, (xmlNode *)v16, (const xmlChar *)"parse");
  uint64_t v34 = v33;
  base = v32;
  if (v33 && !xmlStrEqual(v33, (const xmlChar *)"xml"))
  {
    if (!xmlStrEqual(v34, (const xmlChar *)"text"))
    {
      xmlXIncludeErr((uint64_t)v9, v16, 1601, "invalid value %s for 'parse'\n", v34);
      xmlFree(Prop);
      xmlFree(v34);
      goto LABEL_123;
    }

    v220 = 0;
  }

  else
  {
    v220 = 1;
  }

  uint64_t v35 = xmlNodeGetBase((const xmlDoc *)*v9, (const xmlNode *)v16);
  if (v35)
  {
    v36 = Prop;
    int v37 = v35;
  }

  else
  {
    int v37 = *(const xmlChar **)(*v9 + 136LL);
    v36 = Prop;
  }

  v222 = xmlBuildURI(v36, v37);
  if (!v222)
  {
    int v38 = xmlURIEscape(v35);
    v39 = xmlURIEscape(Prop);
    v222 = xmlBuildURI(v39, v38);
    if (v38) {
      xmlFree(v38);
    }
    if (v39) {
      xmlFree(v39);
    }
  }

  if (v34) {
    xmlFree(v34);
  }
  xmlFree(Prop);
  if (v35) {
    ((void (*)(xmlChar *))xmlFree)(v35);
  }
  if (!v222)
  {
    xmlXIncludeErr((uint64_t)v9, v16, 1605, "failed build URL\n", 0LL);
    goto LABEL_123;
  }

  uint64_t v40 = xmlXIncludeGetProp((uint64_t)v9, (xmlNode *)v16, (const xmlChar *)"xpointer");
  uint64_t v41 = xmlParseURI((const char *)v222);
  if (v41)
  {
    v42 = v41;
    fragment = v41->fragment;
    if (fragment)
    {
      v44 = v40;
      if (!*((_DWORD *)v9 + 21))
      {
        xmlXIncludeErr( (uint64_t)v9,  v16,  1618,  "Invalid fragment identifier in URI %s use the xpointer attribute\n",  v222);
        if (v40) {
          xmlFree(v40);
        }
        xmlFreeURI(v42);
        xmlFree(v222);
        goto LABEL_123;
      }

      if (v40) {
        xmlFree(fragment);
      }
      else {
        v44 = (xmlChar *)fragment;
      }
      v42->fragment = 0LL;
    }

    else
    {
      v44 = v40;
    }

    int v45 = xmlSaveUri(v42);
    xmlFreeURI(v42);
    if (v45)
    {
      xmlFree(v222);
      if ((v218 & v220) != 1 || v44 && *v44)
      {
        v223 = (uint64_t)v44;
        if ((base & v220) == 1 && *((int *)v9 + 16) >= 1)
        {
          uint64_t v46 = 0LL;
          do
          {
            if (xmlStrEqual(v45, *(const xmlChar **)(v9[9] + 8 * v46)))
            {
              xmlXIncludeErr((uint64_t)v9, v16, 1600, "detected a recursion in %s\n", v45);
              xmlFree(v45);
              ((void (*)(uint64_t))xmlFree)(v223);
              goto LABEL_123;
            }

            ++v46;
          }

          while (v46 < *((int *)v9 + 16));
        }

        v47 = xmlMalloc(0x38uLL);
        if (v47)
        {
          v48 = (uint64_t)v47;
          v47[6] = 0LL;
          *((_OWORD *)v47 + 1) = 0u;
          *((_OWORD *)v47 + 2) = 0u;
          *(_OWORD *)v47 = 0u;
          xmlChar *v47 = xmlStrdup(v45);
          *(void *)(v48 + 24) = v16;
          *(_OWORD *)(v48 + 8) = 0u;
          *(_OWORD *)(v48 + 32) = 0u;
          v49 = *((_DWORD *)v9 + 4);
          if (v49) {
            goto LABEL_109;
          }
          *((_DWORD *)v9 + 4) = 4;
          int v50 = xmlMalloc(0x20uLL);
          v9[3] = v50;
          if (v50)
          {
            v49 = *((_DWORD *)v9 + 4);
LABEL_109:
            v51 = *((_DWORD *)v9 + 3);
            if (v51 < v49)
            {
              v52 = (void *)v9[3];
LABEL_119:
              *((_DWORD *)v9 + 3) = v51 + 1;
              v52[v51] = v48;
              xmlFree(v45);
              *(void *)(v48 + 8) = v223;
              *(void *)(v48 + 16) = 0LL;
              *(_DWORD *)(v48 + 40) = v220;
              *(_DWORD *)(v48 + 44) = 1;
              goto LABEL_123;
            }

            *((_DWORD *)v9 + 4) = 2 * v49;
            v52 = xmlRealloc((void *)v9[3], 16LL * v49);
            v9[3] = v52;
            if (v52)
            {
              v51 = *((_DWORD *)v9 + 3);
              goto LABEL_119;
            }
          }

          xmlXIncludeErrMemory((uint64_t)v9, v16, (const xmlChar *)"growing XInclude context");
          xmlXIncludeFreeRef(v48);
        }

        else
        {
          xmlXIncludeErrMemory((uint64_t)v9, v16, (const xmlChar *)"growing XInclude context");
        }

        ((void (*)(xmlChar *))xmlFree)(v45);
        goto LABEL_123;
      }

      xmlXIncludeErr((uint64_t)v9, v16, 1600, "detected a local recursion with no xpointer in %s\n", v45);
LABEL_114:
      xmlFree(v45);
    }

    else
    {
      int v45 = v44;
      v44 = v222;
      xmlXIncludeErr((uint64_t)v9, v16, 1605, "invalid value URI %s\n", v222);
      if (v45) {
        goto LABEL_114;
      }
    }

    ((void (*)(xmlChar *))xmlFree)(v44);
    goto LABEL_123;
  }

  xmlXIncludeErr((uint64_t)v9, v16, 1605, "invalid value URI %s\n", v222);
  if (v40) {
    xmlFree(v40);
  }
  xmlFree(v222);
  do
  {
LABEL_123:
    if (v16 == a3) {
      break;
    }
    uint64_t v31 = *(void *)(v16 + 48);
    if (v31) {
      goto LABEL_59;
    }
    uint64_t v16 = *(void *)(v16 + 40);
  }

  while (v16);
LABEL_126:
  v53 = *((_DWORD *)v9 + 3);
  v54 = v15 + 1;
  while (2)
  {
    if ((v15 & 0x80000000) != 0) {
      goto LABEL_294;
    }
    v55 = *(void *)(v9[3] + 8LL * v15);
    v56 = *(xmlNode **)(v55 + 24);
    if (!v56) {
      goto LABEL_294;
    }
    v57 = xmlXIncludeGetProp((uint64_t)v9, *(xmlNode **)(v55 + 24), (const xmlChar *)"href");
    if (!v57)
    {
      v57 = xmlStrdup((const xmlChar *)&byte_181A3ACBA);
      if (!v57) {
        goto LABEL_294;
      }
    }

    v58 = v15;
    v59 = xmlXIncludeGetProp((uint64_t)v9, v56, (const xmlChar *)"parse");
    v60 = v59;
    if (v59 && !xmlStrEqual(v59, (const xmlChar *)"xml"))
    {
      if (!xmlStrEqual(v60, (const xmlChar *)"text"))
      {
        xmlXIncludeErr( (uint64_t)v9,  *(void *)(*(void *)(v9[3] + 8LL * v15) + 24LL),  1601,  "invalid value %s for 'parse'\n",  v60);
        ((void (*)(xmlChar *))xmlFree)(v57);
        v62 = (xmlChar *)v60;
        goto LABEL_293;
      }

      v61 = 1;
    }

    else
    {
      v61 = 0;
    }

    basea = (xmlChar *)v56;
    v219 = v60;
    v62 = xmlNodeGetBase((const xmlDoc *)*v9, v56);
    if (v62)
    {
      v63 = v57;
      v64 = v62;
    }

    else
    {
      v64 = *(const xmlChar **)(*v9 + 136LL);
      v63 = v57;
    }

    v65 = xmlBuildURI(v63, v64);
    v221 = v15;
    if (!v65)
    {
      v224 = v15;
      v66 = v54;
      v67 = v9;
      v68 = v4;
      v69 = v62;
      v70 = xmlURIEscape(v62);
      v71 = xmlURIEscape(v57);
      uint64_t v4 = (unint64_t)xmlBuildURI(v71, v70);
      if (v70) {
        ((void (*)(xmlChar *))xmlFree)(v70);
      }
      if (v71) {
        ((void (*)(xmlChar *))xmlFree)(v71);
      }
      v62 = v69;
      v65 = (xmlChar *)v4;
      LODWORD(v4) = v68;
      unsigned int v9 = v67;
      v54 = v66;
      v58 = v221;
      uint64_t v15 = v224;
      if (!v65)
      {
        xmlXIncludeErr((uint64_t)v9, *(void *)(*(void *)(v9[3] + 8 * v221) + 24LL), 1605, "failed build URL\n", 0LL);
        if (v219) {
          ((void (*)(void))xmlFree)();
        }
        ((void (*)(xmlChar *))xmlFree)(v57);
        if (v62) {
          goto LABEL_293;
        }
        goto LABEL_294;
      }
    }

    v213 = v9[12];
    v214 = v62;
    v9[12] = v62;
    v211 = v57;
    v212 = v4;
    v225 = v65;
    if ((v61 & 1) == 0)
    {
      v76 = xmlParseURI((const char *)v65);
      if (!v76)
      {
        v88 = *(void *)(*(void *)(v9[3] + 8 * v58) + 24LL);
        v89 = (uint64_t)v9;
        v90 = v65;
LABEL_190:
        xmlXIncludeErr(v89, v88, 1605, "invalid value URI %s\n", v90);
        goto LABEL_282;
      }

      v77 = v76;
      v78 = (xmlChar *)v76->fragment;
      if (v78) {
        v76->fragment = 0LL;
      }
      v79 = v9[3];
      if (v79)
      {
        v80 = *(void *)(v79 + 8 * v58);
        if (v80)
        {
          v81 = *(const xmlChar **)(v80 + 8);
          if (v81)
          {
            if (v78)
            {
              ((void (*)(xmlChar *))xmlFree)(v78);
              v81 = *(const xmlChar **)(*(void *)(v9[3] + 8 * v58) + 8LL);
            }

            v78 = xmlStrdup(v81);
          }
        }
      }

      v82 = xmlSaveUri(v77);
      xmlFreeURI(v77);
      if (!v82)
      {
        v100 = v9[3];
        if (v100) {
          v101 = *(void *)(*(void *)(v100 + 8 * v58) + 24LL);
        }
        else {
          v101 = 0LL;
        }
        xmlXIncludeErr((uint64_t)v9, v101, 1605, "invalid value URI %s\n", v225);
        if (!v78) {
          goto LABEL_282;
        }
        goto LABEL_237;
      }

      if (!*v82 || *v82 == 35 || *v9 && xmlStrEqual(v82, *(const xmlChar **)(*v9 + 136LL)))
      {
        myDoc = (xmlDoc *)*v9;
        if (v78)
        {
LABEL_166:
          v84 = xmlXPtrNewContext(myDoc, 0LL, 0LL);
          if (!v84)
          {
            xmlXIncludeErr( (uint64_t)v9,  *(void *)(*(void *)(v9[3] + 8 * v58) + 24LL),  1612,  "could not create XPointer context\n",  0LL);
LABEL_236:
            ((void (*)(xmlChar *))xmlFree)(v82);
LABEL_237:
            v117 = xmlFree;
LABEL_238:
            v118 = v78;
            goto LABEL_281;
          }

          v85 = v84;
          v86 = xmlXPtrEval(v78, v84);
          if (!v86)
          {
            xmlXIncludeErr( (uint64_t)v9,  *(void *)(*(void *)(v9[3] + 8 * v58) + 24LL),  1612,  "XPointer evaluation failed: #%s\n",  v78);
            goto LABEL_235;
          }

          obuint64_t j = v86;
          type = v86->type;
          if (v86->type <= XPATH_XSLT_TREE)
          {
            if (((1 << type) & 0x33D) != 0)
            {
              xmlXIncludeErr( (uint64_t)v9,  *(void *)(*(void *)(v9[3] + 8 * v58) + 24LL),  1613,  "XPointer is not a range: #%s\n",  v78);
              xmlXPathFreeObject(obj);
LABEL_235:
              xmlXPathFreeContext(v85);
              goto LABEL_236;
            }

            if (type == XPATH_NODESET)
            {
              str1b = v82;
              p_nodeNr = &v86->nodesetval->nodeNr;
              if (!p_nodeNr || *p_nodeNr <= 0)
              {
                xmlXPathFreeObject(v86);
                xmlXPathFreeContext(v85);
                xmlFree(str1b);
                v117 = xmlFree;
                goto LABEL_238;
              }

              goto LABEL_308;
            }
          }

          str1b = v82;
          p_nodeNr = &v86->nodesetval->nodeNr;
          if (p_nodeNr && *p_nodeNr >= 1)
          {
LABEL_308:
            for (uint64_t i = 0LL; i < *p_nodeNr; ++i)
            {
              v151 = *(void *)(*((void *)p_nodeNr + 1) + 8 * i);
              if (!v151) {
                continue;
              }
              v152 = *(_DWORD *)(v151 + 8);
              if (v152 > 0x14) {
                continue;
              }
              if (((1 << v152) & 0x1BDC00) != 0)
              {
                xmlXIncludeErr( (uint64_t)v9,  *(void *)(*(void *)(v9[3] + 8 * v58) + 24LL),  1613,  "XPointer selects unexpected nodes: #%s\n",  v78);
                *(void *)(*((void *)p_nodeNr + 1) + 8 * i) = 0LL;
              }

              else
              {
                if (v152 == 2)
                {
                  v153 = *(void *)(*(void *)(v9[3] + 8 * v58) + 24LL);
                  v154 = (uint64_t)v9;
                  v155 = "XPointer selects an attribute: #%s\n";
                }

                else
                {
                  if (v152 != 18) {
                    continue;
                  }
                  v153 = *(void *)(*(void *)(v9[3] + 8 * v58) + 24LL);
                  v154 = (uint64_t)v9;
                  v155 = "XPointer selects a namespace: #%s\n";
                }

                xmlXIncludeErr(v154, v153, 1613, v155, v78);
              }

              *(void *)(*((void *)p_nodeNr + 1) + 8 * i) = 0LL;
            }
          }

          *(void *)(*(void *)(v9[3] + 8 * v58) + 32LL) = xmlXIncludeCopyXPointer( v9,  (xmlDoc *)*v9,  (uint64_t)myDoc,  (int *)obj);
          xmlXPathFreeObject(obj);
          xmlXPathFreeContext(v85);
          xmlFree(v78);
          v82 = str1b;
          v57 = v211;
LABEL_348:
          v92 = (xmlChar *)v219;
          if (myDoc && v82 && (*((_BYTE *)v9 + 90) & 4) == 0 && (myDoc->parseFlags & 0x40000) == 0)
          {
            NsProp = xmlGetNsProp( *(const xmlNode **)(*(void *)(v9[3] + 8 * v58) + 24LL),  (const xmlChar *)"base",  (const xmlChar *)"http://www.w3.org/XML/1998/namespace");
            if (NsProp)
            {
LABEL_353:
              v172 = *(void *)(*(void *)(v9[3] + 8 * v58) + 32LL);
              if (v172)
              {
                baseb = NsProp;
                do
                {
                  if (*(_DWORD *)(v172 + 8) == 1)
                  {
                    v173 = v82;
                    v174 = xmlNodeGetBase(*(const xmlDoc **)(v172 + 64), (const xmlNode *)v172);
                    if (v174)
                    {
                      v175 = v174;
                      if (xmlStrEqual(v174, *(const xmlChar **)(*(void *)(v172 + 64) + 136LL)))
                      {
                        xmlNodeSetBase((xmlNodePtr)v172, NsProp);
                      }

                      else
                      {
                        v176 = xmlGetNsProp( (const xmlNode *)v172,  (const xmlChar *)"base",  (const xmlChar *)"http://www.w3.org/XML/1998/namespace");
                        if (v176)
                        {
                          v177 = v176;
                          v178 = xmlBuildURI(v176, baseb);
                          if (v178)
                          {
                            v179 = v178;
                            xmlNodeSetBase((xmlNodePtr)v172, v178);
                            xmlFree(v179);
                          }

                          else
                          {
                            xmlXIncludeErr( (uint64_t)v9,  *(void *)(*(void *)(v9[3] + 8 * v58) + 24LL),  1605,  "trying to rebuild base from %s\n",  v177);
                          }

                          xmlFree(v177);
                          v92 = (xmlChar *)v219;
                          v58 = v221;
                        }
                      }

                      ((void (*)(xmlChar *))xmlFree)(v175);
                      v82 = v173;
                      NsProp = baseb;
                    }

                    else
                    {
                      xmlNodeSetBase((xmlNodePtr)v172, NsProp);
                    }
                  }

                  v172 = *(void *)(v172 + 48);
                }

                while (v172);
              }

              ((void (*)(xmlChar *))xmlFree)(NsProp);
              v57 = v211;
              goto LABEL_368;
            }

            v182 = xmlBuildRelativeURI(v82, (const xmlChar *)v9[12]);
            if (v182)
            {
              NsProp = v182;
              if (xmlStrchr(v182, 0x2Fu)) {
                goto LABEL_353;
              }
              ((void (*)(xmlChar *))xmlFree)(NsProp);
            }

            else
            {
              xmlXIncludeErr( (uint64_t)v9,  *(void *)(*(void *)(v9[3] + 8 * v58) + 24LL),  1605,  "trying to build relative URI from %s\n",  v82);
            }
          }

      int v33 = *(int *)(v15 + 24);
      v16 += 24LL;
      uint64_t v34 = v19++ < v33;
      uint64_t v34 = v34 && v17 < v11;
      if (!v34)
      {
        v36 = 0LL;
        int v37 = 1LL;
        do
        {
          int v38 = *(void *)(v15 + 32);
          v39 = *(unsigned int *)(v38 + v36 + 8);
          if ((v39 & 0x80000000) == 0)
          {
            uint64_t v40 = *(void *)(v38 + v36);
            if (v40)
            {
              uint64_t v41 = *(void *)(v40 + 24);
              if (v41)
              {
                v42 = v38 + v36;
                if (*(_DWORD *)(v42 + 16) >> 1 != 596523 && (*(_DWORD *)(v42 + 12) & 0x80000000) != 0)
                {
                  uint64_t v43 = *(_DWORD **)(*(void *)(*(void *)(a1 + 8) + 16LL) + 8 * v39);
                  if (v43)
                  {
                    if (*v43 == 4)
                    {
                      if (*(_DWORD *)(v40 + 40)) {
                        uint64_t v41 = *(void *)(v40 + 32);
                      }
                      *(void *)(a5 + 8LL * v17++) = v41;
                      ++*a4;
                      LODWORD(v33) = *(_DWORD *)(v15 + 24);
                    }
                  }
                }
              }
            }
          }

          uint64_t result = 0LL;
          v36 += 24LL;
          ++v37;
        }

        while (v17 < v11);
        return result;
      }
    }
  }

  if (a2)
  {
    uint64_t v14 = *(_DWORD *)(a1 + 112);
    if (v14 == -1) {
      return result;
    }
  }

  else
  {
    uint64_t v14 = *(_DWORD *)(a1 + 80);
  }

  if (a6) {
    *a6 = *(_DWORD *)(v13 + 4LL * (v14 + v14 * *(_DWORD *)(v12 + 88))) == 2;
  }
  v44 = *(_DWORD *)(v12 + 88);
  if (v44 < 1) {
    return 0LL;
  }
  int v45 = 0LL;
  uint64_t v46 = 0;
  do
  {
    v47 = *(void *)(v12 + 72);
    v48 = *(_DWORD *)(v47 + 4LL * ((int)v45 + (v44 + 1) * v14 + 1));
    if (v48 >= 1 && v48 <= *(_DWORD *)(v12 + 64) && *(_DWORD *)(v47 + 4LL * (v48 - 1) * (v44 + 1)) != 4)
    {
      *(void *)(a5 + 8LL * v46++) = *(void *)(*(void *)(v12 + 96) + 8 * v45);
      ++*a3;
      v44 = *(_DWORD *)(v12 + 88);
    }

    ++v45;
  }

  while (v45 < v44 && v46 < v11);
  uint64_t result = 0LL;
  if (v44 >= 1 && v46 < v11)
  {
    v49 = 0LL;
    do
    {
      int v50 = *(void *)(v12 + 72);
      v51 = *(_DWORD *)(v50 + 4LL * ((int)v49 + (v44 + 1) * v14 + 1));
      if (v51 >= 1 && v51 <= *(_DWORD *)(v12 + 64) && *(_DWORD *)(v50 + 4LL * (v51 - 1) * (v44 + 1)) == 4)
      {
        *(void *)(a5 + 8LL * v46++) = *(void *)(*(void *)(v12 + 96) + 8 * v49);
        ++*a4;
        v44 = *(_DWORD *)(v12 + 88);
      }

      uint64_t result = 0LL;
      ++v49;
    }

    while (v49 < v44 && v46 < v11);
  }

  return result;
}

LABEL_76:
        *(_DWORD *)(v3 + 56) = v33;
LABEL_79:
        return 0LL;
      default:
        xmlGenericErrorFunc v12 = *__xmlGenericError();
        uint64_t v13 = __xmlGenericErrorContext();
        v12( *v13,  "Unimplemented block at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/relaxng.c",  9029);
        return 0xFFFFFFFFLL;
    }
  }

            xmlSchemaPIllegalAttrErr((_DWORD *)a1, properties);
            goto LABEL_80;
          }

uint64_t xmlRelaxNGNextValue(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 96);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v2 = (void *)(v1 + 32);
  uint64_t v3 = v4;
  if (v4 && (int v5 = *(_BYTE **)(*(void *)(result + 96) + 40LL)) != 0LL)
  {
    int v6 = (_BYTE *)(v3 - 1);
    while (*++v6)
      ;
    while (1)
    {
      if (v6 == v5)
      {
        *uint64_t v2 = 0LL;
        return result;
      }

      if (*v6) {
        break;
      }
      ++v6;
    }

    *uint64_t v2 = v6;
  }

  else
  {
    *uint64_t v2 = 0LL;
    v2[1] = 0LL;
  }

  return result;
}

uint64_t xmlRelaxNGValidateDatatype(uint64_t a1, xmlChar *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = 0LL;
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  int v5 = *(void **)(a3 + 40);
  if (!v5) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, xmlChar *, uint64_t *, uint64_t))v5[3];
  if (!v7) {
    goto LABEL_12;
  }
  uint64_t v10 = *(_DWORD **)(a3 + 72);
  if (v10 && *v10 == 6)
  {
    uint64_t v11 = v5[1];
    uint64_t v12 = *(void *)(a3 + 16);
    uint64_t v13 = &v24;
    uint64_t v14 = a2;
  }

  else
  {
    uint64_t v11 = v5[1];
    uint64_t v12 = *(void *)(a3 + 16);
    uint64_t v14 = a2;
    uint64_t v13 = 0LL;
  }

  int v15 = v7(v11, v12, v14, v13, a4);
  if (v15 < 0)
  {
LABEL_12:
    xmlRelaxNGAddValidError(a1, 2, *(xmlChar **)(a3 + 16), 0LL, 0);
    if (v24)
    {
      uint64_t v17 = (void (*)(void))v5[6];
      if (v17) {
        v17(v5[1]);
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (v15 == 1)
  {
    uint64_t v19 = *(void *)(a3 + 72);
    if (v19)
    {
      while (*(_DWORD *)v19 == 6)
      {
        unsigned int v20 = (unsigned int (*)(void, void, void, void, xmlChar *, uint64_t))v5[5];
        if (v20)
        {
          if (v20(v5[1], *(void *)(a3 + 16), *(void *)(v19 + 16), *(void *)(v19 + 32), a2, v24)) {
            uint64_t v16 = 0xFFFFFFFFLL;
          }
          else {
            uint64_t v16 = 0LL;
          }
          if ((_DWORD)v16)
          {
LABEL_27:
            if ((_DWORD)v16) {
              goto LABEL_32;
            }
            break;
          }
        }

        else
        {
          uint64_t v16 = 0LL;
        }

        uint64_t v19 = *(void *)(v19 + 64);
        if (!v19) {
          goto LABEL_27;
        }
      }
    }

    if (*(void *)(a3 + 48))
    {
      uint64_t v21 = *(void *)(a1 + 96);
      __int128 v23 = *(_OWORD *)(v21 + 32);
      *(void *)(v21 + 32) = a2;
      *(void *)(v21 + 40) = 0LL;
      uint64_t v16 = xmlRelaxNGValidateValue(a1);
      *(_OWORD *)(*(void *)(a1 + 96) + 32LL) = v23;
    }

    else
    {
      uint64_t v16 = 0LL;
    }
  }

  else if (v15 == 2)
  {
    xmlRelaxNGAddValidError(a1, 4, a2, 0LL, 1);
    uint64_t v16 = 2LL;
  }

  else
  {
    xmlRelaxNGAddValidError(a1, 3, *(xmlChar **)(a3 + 16), a2, 1);
    uint64_t v16 = 0xFFFFFFFFLL;
  }

uint64_t xmlRelaxNGSkipIgnored(uint64_t a1, uint64_t a2)
{
  for (; a2; a2 = *(void *)(a2 + 48))
  {
    unsigned int v2 = *(_DWORD *)(a2 + 8);
    if (v2 > 0x14) {
      break;
    }
    int v3 = 1 << v2;
    if ((v3 & 0x180180) == 0)
    {
      if ((v3 & 0x18) == 0) {
        return a2;
      }
      if ((*(_BYTE *)(a1 + 56) & 4) == 0)
      {
        uint64_t v4 = *(_BYTE **)(a2 + 80);
        if (v4)
        {
          while (1)
          {
            unsigned int v5 = *v4;
            if (v5 > 0x20) {
              return a2;
            }
            if (((1LL << v5) & 0x100002600LL) == 0)
            {
              if (*v4) {
                return a2;
              }
              break;
            }

            ++v4;
          }
        }
      }
    }
  }

  return a2;
}

void *xmlRelaxNGNewStates(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 128);
  if (!v3 || (v4 = *(_DWORD *)(a1 + 120), v5 = __OFSUB__(v4, 1), int v6 = v4 - 1, (v6 < 0) ^ v5))
  {
    if (a2 <= 16) {
      unsigned int v8 = 16;
    }
    else {
      unsigned int v8 = a2;
    }
    unsigned int v9 = xmlMalloc(8LL * (v8 - 1) + 16);
    uint64_t v7 = v9;
    if (v9)
    {
      _DWORD *v9 = 0;
      v9[1] = v8;
      uint64_t v10 = xmlMalloc(8LL * v8);
      v7[1] = v10;
      if (!v10)
      {
        xmlRngVErrMemory(a1, (const xmlChar *)"allocating states\n");
        xmlFree(v7);
        return 0LL;
      }
    }

    else
    {
      xmlRngVErrMemory(a1, (const xmlChar *)"allocating states\n");
    }
  }

  else
  {
    *(_DWORD *)(a1 + 120) = v6;
    uint64_t v7 = *(void **)(v3 + 8LL * v6);
    *(_DWORD *)uint64_t v7 = 0;
  }

  return v7;
}

uint64_t xmlRelaxNGValidateState(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if (a2)
  {
    BOOL v5 = (__int128 **)(a1 + 96);
    int v4 = *(__int128 **)(a1 + 96);
    if (v4) {
      uint64_t v6 = *((void *)v4 + 1);
    }
    else {
      uint64_t v6 = 0LL;
    }
    uint64_t v7 = 0LL;
    ++*(_DWORD *)(a1 + 60);
    switch(*(_DWORD *)a2)
    {
      case 0xFFFFFFFF:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0x14:
        unsigned int v8 = *(void **)(a2 + 48);
        goto LABEL_8;
      case 1:
        goto LABEL_251;
      case 2:
      case 6:
        xmlGenericErrorFunc v10 = *__xmlGenericError();
        uint64_t v11 = __xmlGenericErrorContext();
        v10( *v11,  "Unimplemented block at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/relaxng.c",  10628);
        goto LABEL_251;
      case 3:
        for (; v6; uint64_t v6 = *(void *)(v6 + 48))
        {
          unsigned int v12 = *(_DWORD *)(v6 + 8);
          BOOL v13 = v12 > 8;
          int v14 = (1 << v12) & 0x198;
          if (v13 || v14 == 0) {
            break;
          }
        }

        uint64_t v7 = 0LL;
        *((void *)v4 + 1) = v6;
        goto LABEL_252;
      case 4:
        uint64_t v7 = *(unsigned int *)(a1 + 80);
        uint64_t v16 = xmlRelaxNGSkipIgnored(a1, v6);
        if (v16)
        {
          uint64_t v17 = v16;
          if (*(_DWORD *)(v16 + 8) == 1)
          {
            if (*(void *)(v16 + 104) != a2)
            {
              if ((int)xmlRelaxNGElementMatch(v2, (void *)a2, v16) > 0)
              {
                int v18 = *(_DWORD *)(v2 + 80);
                if (v18)
                {
                  while (1)
                  {
                    unsigned int v20 = *(const xmlChar ***)(v2 + 72);
                    if (!v20) {
                      break;
                    }
                    int v19 = *(_DWORD *)v20;
                    if (*(_DWORD *)v20 == 13)
                    {
                      if (xmlStrEqual(v20[4], *(const xmlChar **)(v17 + 16))) {
                        goto LABEL_32;
                      }
                      unsigned int v20 = *(const xmlChar ***)(v2 + 72);
                      int v19 = *(_DWORD *)v20;
                    }

                    if (v19 == 19)
                    {
                      if (xmlStrEqual(v20[3], *(const xmlChar **)(v17 + 16))) {
                        goto LABEL_32;
                      }
                      int v19 = **(_DWORD **)(v2 + 72);
                    }

                    if ((v19 & 0xFFFFFFFE) != 0x16) {
                      break;
                    }
LABEL_32:
                    xmlRelaxNGValidErrorPop(v2);
                  }
                }

                int v21 = *(_DWORD *)(v2 + 56);
                if ((v21 & 4) != 0) {
                  *(_DWORD *)(v2 + 56) = v21 - 4;
                }
                int v22 = *(_DWORD *)(v2 + 80);
                __int128 v23 = (__int128 *)xmlRelaxNGNewValidState(v2, v17);
                if (v23)
                {
                  uint64_t v24 = *v5;
                  void *v5 = v23;
                  uint64_t v25 = *(void *)(a2 + 72);
                  if (v25 && xmlRelaxNGValidateAttributeList(v2, v25))
                  {
                    xmlRelaxNGAddValidError(v2, 24, *(xmlChar **)(v17 + 16), 0LL, 0);
                    uint64_t v7 = 0xFFFFFFFFLL;
                  }

                  else
                  {
                    uint64_t v7 = 0LL;
                  }

                  if (*(void *)(a2 + 104))
                  {
                    int v204 = v21;
                    v168 = v24;
                    int v169 = v22;
                    __int128 v207 = *(_OWORD *)(v2 + 96);
                    v170 = xmlRelaxNGNewValidState(v2, v17);
                    *(void *)(v2 + 96) = v170;
                    *(void *)(v2 + 104) = 0LL;
                    int v171 = xmlRelaxNGValidateCompiledContent((_DWORD *)v2, *(xmlRegexpPtr *)(a2 + 104), v170[1]);
                    uint64_t v172 = *(void *)(*(void *)(v2 + 96) + 8LL);
                    *(_OWORD *)(v2 + 96) = v207;
                    xmlRelaxNGFreeValidState(v2, v170);
                    if (v171) {
                      uint64_t v7 = 0xFFFFFFFFLL;
                    }
                    else {
                      uint64_t v7 = v7;
                    }
                    v173 = *(int **)(v2 + 104);
                    if (v173)
                    {
                      int v22 = v169;
                      uint64_t v24 = v168;
                      int v21 = v204;
                      if (*v173 < 1)
                      {
LABEL_324:
                        *(_DWORD *)(v2 + 56) |= 1u;
                        xmlRelaxNGLogBestError(v2);
                        char v176 = 1;
                      }

                      else
                      {
                        uint64_t v174 = 0LL;
                        while (1)
                        {
                          uint64_t v175 = *(void *)(*((void *)v173 + 1) + 8 * v174);
                          *(void *)(v2 + 96) = v175;
                          *(void *)(v175 + 8) = v172;
                          ++v174;
                          v173 = *(int **)(v2 + 104);
                          if (v174 >= *v173) {
                            goto LABEL_324;
                          }
                        }

                        char v176 = 0;
                      }

                      v185 = *(int **)(v2 + 104);
                      if (*v185 >= 1)
                      {
                        uint64_t v186 = 0LL;
                        do
                        {
                          xmlRelaxNGFreeValidState(v2, *(void **)(*((void *)v185 + 1) + 8 * v186++));
                          v185 = *(int **)(v2 + 104);
                        }

                        while (v186 < *v185);
                      }

                      goto LABEL_381;
                    }

                    v184 = *v5;
                    if (*v5) {
                      *((void *)v184 + 1) = v172;
                    }
                    int v22 = v169;
                    if ((_DWORD)v7)
                    {
                      uint64_t v7 = 0xFFFFFFFFLL;
                      uint64_t v24 = v168;
                      int v21 = v204;
LABEL_376:
                      xmlRelaxNGFreeValidState(v2, v184);
                      goto LABEL_386;
                    }

                    uint64_t v24 = v168;
                    int v21 = v204;
                  }

                  else
                  {
                    uint64_t v177 = *(void *)(a2 + 48);
                    if (v177 && xmlRelaxNGValidateDefinitionList(v2, v177))
                    {
                      if (*v5)
                      {
                        xmlRelaxNGAddValidError(v2, 25, *(xmlChar **)(v17 + 16), 0LL, 0);
                      }

                      else
                      {
                        *(void *)(v2 + 96) = v24;
                        xmlRelaxNGAddValidError(v2, 25, *(xmlChar **)(v17 + 16), 0LL, 0);
                        *(void *)(v2 + 96) = 0LL;
                      }

                      uint64_t v7 = 0xFFFFFFFFLL;
                    }

                    v188 = *(int **)(v2 + 104);
                    if (v188)
                    {
                      if (*v188 < 1)
                      {
LABEL_372:
                        *(_DWORD *)(v2 + 56) |= 1u;
                        xmlRelaxNGLogBestError(v2);
                        char v176 = 1;
                      }

                      else
                      {
                        uint64_t v189 = 0LL;
                        while (1)
                        {
                          *(void *)(v2 + 96) = *(void *)(*((void *)v188 + 1) + 8 * v189);
                          ++v189;
                          v188 = *(int **)(v2 + 104);
                          if (v189 >= *v188) {
                            goto LABEL_372;
                          }
                        }

                        char v176 = 0;
                      }

                      v185 = *(int **)(v2 + 104);
                      if (*v185 >= 1)
                      {
                        uint64_t v190 = 0LL;
                        do
                        {
                          xmlRelaxNGFreeValidState(v2, *(void **)(*((void *)v185 + 1) + 8 * v190));
                          *(void *)(*(void *)(*(void *)(v2 + 104) + 8LL) + 8 * v190++) = 0LL;
                          v185 = *(int **)(v2 + 104);
                        }

                        while (v190 < *v185);
                      }

LABEL_381:
                      xmlRelaxNGFreeStates(v2, (void **)v185);
                      *(void *)(v2 + 104) = 0LL;
                      if ((_DWORD)v7) {
                        char v191 = 0;
                      }
                      else {
                        char v191 = v176;
                      }
                      if ((v191 & 1) != 0)
                      {
                        char v192 = 0;
                        uint64_t v7 = 0xFFFFFFFFLL;
LABEL_389:
                        *(_DWORD *)(v2 + 56) = v21;
                        *(void *)(v2 + 96) = v24;
                        if (v24) {
                          *((void *)v24 + 1) = xmlRelaxNGSkipIgnored(v2, *(void *)(v17 + 48));
                        }
                        if ((v192 & 1) == 0)
                        {
                          if ((v21 & 1) != 0) {
                            goto LABEL_252;
                          }
                          xmlRelaxNGDumpValidError(v2);
                          goto LABEL_233;
                        }

                        if (*(_DWORD *)(v2 + 80) <= v22)
                        {
LABEL_233:
                          uint64_t v7 = 0LL;
LABEL_252:
                          --*(_DWORD *)(v2 + 60);
                          return v7;
                        }

                        uint64_t v126 = v2;
                        int v127 = v22;
LABEL_232:
                        xmlRelaxNGPopErrors(v126, v127);
                        goto LABEL_233;
                      }

LABEL_386:
                      if ((_DWORD)v7)
                      {
                        char v192 = 0;
                      }

                      else
                      {
                        *(void *)(v17 + 104) = a2;
                        char v192 = 1;
                      }

                      goto LABEL_389;
                    }

                    v184 = *v5;
                    if ((_DWORD)v7)
                    {
                      uint64_t v7 = 0xFFFFFFFFLL;
                      goto LABEL_376;
                    }
                  }

                  uint64_t v7 = xmlRelaxNGValidateElementEnd(v2, 1);
                  goto LABEL_376;
                }
              }

              goto LABEL_209;
            }

            *((void *)v4 + 1) = xmlRelaxNGSkipIgnored(v2, *(void *)(v16 + 48));
            if (!(_DWORD)v7) {
              goto LABEL_252;
            }
            v136 = *(const xmlChar ***)(v2 + 72);
            if (!v136) {
              goto LABEL_233;
            }
            while (1)
            {
              int v137 = *(_DWORD *)v136;
              if (*(_DWORD *)v136 == 13)
              {
                if (xmlStrEqual(v136[4], *(const xmlChar **)(v17 + 16))) {
                  goto LABEL_247;
                }
                v136 = *(const xmlChar ***)(v2 + 72);
                int v137 = *(_DWORD *)v136;
              }

              if (v137 != 19) {
                goto LABEL_246;
              }
              if (!xmlStrEqual(v136[3], *(const xmlChar **)(v17 + 16)))
              {
                int v137 = **(_DWORD **)(v2 + 72);
LABEL_246:
                if ((v137 & 0xFFFFFFFE) != 0x16) {
                  goto LABEL_233;
                }
              }

LABEL_219:
        ((void (*)(xmlChar *))xmlFree)(v26);
        goto LABEL_252;
      case 9:
        uint64_t v9 = xmlRelaxNGValidateAttribute(a1, a2);
        goto LABEL_75;
      case 0xA:
      case 0x12:
        uint64_t v9 = xmlRelaxNGValidateDefinitionList(a1, *(void *)(a2 + 48));
        goto LABEL_75;
      case 0xE:
        int v45 = *(_DWORD *)(a1 + 80);
        int v46 = *(_DWORD *)(a1 + 56);
        *(_DWORD *)(a1 + 56) = v46 | 1;
        v47 = xmlRelaxNGCopyValidState(a1, v4);
        if (xmlRelaxNGValidateDefinitionList(v2, *(void *)(a2 + 48)))
        {
          if (*v5) {
            xmlRelaxNGFreeValidState(v2, *v5);
          }
          *(void *)(v2 + 96) = v47;
        }

        else
        {
          v101 = *(int **)(v2 + 104);
          if (v101)
          {
            xmlRelaxNGAddStates(v2, v101, (uint64_t)v47);
          }

          else
          {
            v131 = (int *)xmlRelaxNGNewStates(v2, 1);
            *(void *)(v2 + 104) = v131;
            if (!v131)
            {
              xmlRelaxNGFreeValidState(v2, v47);
              *(_DWORD *)(v2 + 56) = v46;
              if (*(_DWORD *)(v2 + 80) > v45) {
                xmlRelaxNGPopErrors(v2, v45);
              }
              goto LABEL_251;
            }

            xmlRelaxNGAddStates(v2, v131, (uint64_t)v47);
            xmlRelaxNGAddStates(v2, *(int **)(v2 + 104), *(void *)(v2 + 96));
            *(void *)(v2 + 96) = 0LL;
          }
        }

        *(_DWORD *)(v2 + 56) = v46;
        if (*(_DWORD *)(v2 + 80) <= v45) {
          goto LABEL_233;
        }
        uint64_t v126 = v2;
        int v127 = v45;
        goto LABEL_232;
      case 0xF:
        goto LABEL_83;
      case 0x10:
        int v48 = *(_DWORD *)(a1 + 80);
        if (*(_DWORD *)(v2 + 80) > v48) {
          xmlRelaxNGPopErrors(v2, v48);
        }
LABEL_83:
        v49 = (int *)xmlRelaxNGNewStates(v2, 1);
        if (!v49) {
          goto LABEL_251;
        }
        int v50 = v49;
        if (*v5)
        {
          v51 = xmlRelaxNGCopyValidState(v2, *v5);
          xmlRelaxNGAddStates(v2, v50, (uint64_t)v51);
        }

        else
        {
          v104 = *(int **)(v2 + 104);
          if (*v104 >= 1)
          {
            uint64_t v105 = 0LL;
            do
            {
              v106 = xmlRelaxNGCopyValidState(v2, *(__int128 **)(*((void *)v104 + 1) + 8 * v105));
              xmlRelaxNGAddStates(v2, v50, (uint64_t)v106);
              ++v105;
              v104 = *(int **)(v2 + 104);
            }

            while (v105 < *v104);
          }
        }

        v107 = 0LL;
        int v61 = *(_DWORD *)(v2 + 56);
        *(_DWORD *)(v2 + 56) = v61 | 1;
        while (2)
        {
          v108 = *(int **)(v2 + 104);
          if (v108)
          {
            if (*v108 < 1) {
              goto LABEL_257;
            }
            uint64_t v109 = 0LL;
            int v110 = 0;
            int v111 = *v50;
            do
            {
              *(void *)(v2 + 96) = *(void *)(*((void *)v108 + 1) + 8 * v109);
              *(void *)(v2 + 104) = 0LL;
              int v112 = xmlRelaxNGValidateDefinitionList(v2, *(void *)(a2 + 48));
              uint64_t v113 = *(void *)(v2 + 96);
              if (v112)
              {
                if (v113)
                {
                  xmlRelaxNGFreeValidState(v2, *(void **)(v2 + 96));
                  *(void *)(v2 + 96) = 0LL;
                }
              }

              else if (v113)
              {
                int v114 = xmlRelaxNGAddStates(v2, v50, v113);
                *(void *)(v2 + 96) = 0LL;
                if (v114 == 1) {
                  int v110 = 1;
                }
              }

              else
              {
                v115 = *(int **)(v2 + 104);
                if (v115)
                {
                  if (*v115 >= 1)
                  {
                    uint64_t v116 = 0LL;
                    do
                    {
                      ++v116;
                      v115 = *(int **)(v2 + 104);
                    }

                    while (v116 < *v115);
                  }

                  xmlRelaxNGFreeStates(v2, (void **)v115);
                  *(void *)(v2 + 104) = 0LL;
                }
              }

              ++v109;
            }

            while (v109 < *v108);
            v107 = v108;
            if (!v110)
            {
LABEL_257:
              xmlRelaxNGFreeStates(v2, (void **)v108);
              goto LABEL_258;
            }

LABEL_199:
            int v123 = *v50 - v111;
            if (v123 == 1)
            {
              *(void *)(v2 + 96) = xmlRelaxNGCopyValidState(v2, *(__int128 **)(*((void *)v50 + 1) + 8LL * v111));
              continue;
            }

            if (v107 || (xmlRelaxNGNewStates(v2, v123), (v107 = *(int **)(v2 + 104)) != 0LL))
            {
              int *v107 = 0;
              if (v111 < *v50)
              {
                uint64_t v124 = v111;
                do
                {
                  v125 = xmlRelaxNGCopyValidState(v2, *(__int128 **)(*((void *)v50 + 1) + 8 * v124));
                  xmlRelaxNGAddStates(v2, v107, (uint64_t)v125);
                  ++v124;
                }

                while (v124 < *v50);
              }

              *(void *)(v2 + 104) = v107;
              continue;
            }

    uint64_t v83 = *(void *)(v45 + 56);
    if (v83)
    {
      if ((*(_BYTE *)(v83 + 90) & 0x10) != 0)
      {
        *(_DWORD *)(v45 + 64) |= 0x400u;
        unsigned int v8 = 1876LL;
        xmlSchemaCustomErr4(v1, 1876, 0LL, 0LL, (const xmlChar *)"The type definition is abstract", 0LL, 0LL, 0LL, 0LL);
        goto LABEL_207;
      }

      if (*((void *)v1 + 26))
      {
        unsigned int v8 = xmlSchemaXPathEvaluate((uint64_t)v1, 1);
        uint64_t v84 = *((void *)v1 + 24);
        *(_DWORD *)(v84 + 140) = 1;
        if ((_DWORD)v8 == -1)
        {
          int v86 = "calling xmlSchemaXPathEvaluate()";
          goto LABEL_221;
        }

        uint64_t v83 = *(void *)(v84 + 56);
      }

      else
      {
        unsigned int v8 = 0LL;
      }

      if (*(_DWORD *)v83 == 5 || *(_DWORD *)(v83 + 160) == 45)
      {
        if (!v1[74] && !*(void *)(v83 + 216)) {
          goto LABEL_215;
        }
        int v85 = xmlSchemaVAttributesComplex((uint64_t)v1);
      }

      else
      {
        if (!v1[74]) {
          goto LABEL_215;
        }
        int v85 = xmlSchemaVAttributesSimple((uint64_t)v1);
      }

      unsigned int v8 = v85;
LABEL_215:
      if (v1[74]) {
        xmlSchemaClearAttrInfos((uint64_t)v1);
      }
      if ((_DWORD)v8 != -1) {
        return 0LL;
      }
      int v86 = "calling attributes validation";
LABEL_221:
      xmlSchemaInternalErr2(v1, (const xmlChar *)"xmlSchemaValidateElem", (const xmlChar *)v86, 0LL);
      return v8;
    }

    *(_DWORD *)(v45 + 64) |= 0x400u;
LABEL_205:
    unsigned int v8 = 1875LL;
    xmlSchemaCustomErr4(v1, 1875, 0LL, 0LL, (const xmlChar *)"The type definition is absent", 0LL, 0LL, 0LL, 0LL);
    goto LABEL_207;
  }

  unsigned int v8 = v56;
  if ((_DWORD)v56 != -1) {
    goto LABEL_85;
  }
  int v53 = "calling xmlSchemaProcessXSIType() to process the attribute 'xsi:nil'";
LABEL_111:
  xmlSchemaInternalErr2(v1, (const xmlChar *)"xmlSchemaValidateChildElem", (const xmlChar *)v53, 0LL);
LABEL_112:
  int v32 = "xmlSchemaValidateElem";
  uint64_t v33 = "calling xmlSchemaStreamValidateChildElement()";
LABEL_227:
  xmlSchemaInternalErr2(v1, (const xmlChar *)v32, (const xmlChar *)v33, 0LL);
  return 0xFFFFFFFFLL;
}

LABEL_134:
      LODWORD(v83) = (_DWORD)v88 - 1;
      if ((v89[4] & 2) != 0)
      {
        int v90 = xmlRelaxNGNodeMatchesList(v79, *(void ***)(*(void *)(*((void *)v89 + 3) + 8LL * (int)v83) + 8LL));
        uint64_t v79 = v82;
        if (!v90) {
          LODWORD(v83) = v60;
        }
      }

LABEL_254:
      v76 = *v5;
      v73 = v78;
      v75 = v202;
LABEL_261:
      if ((int)v60 < 1)
      {
        char v167 = 1;
        v141 = v76;
        goto LABEL_332;
      }

      int v194 = v61;
      uint64_t v139 = 0LL;
      uint64_t v203 = 0LL;
      uint64_t v60 = v60;
      uint64_t v193 = v79;
      uint64_t v140 = v79;
      v141 = v76;
      uint64_t v196 = v60;
      v197 = v73;
LABEL_263:
      v142 = xmlRelaxNGCopyValidState(v2, v141);
      *(void *)(v2 + 96) = v142;
      if (v142)
      {
        v143 = *(void **)(*((void *)v206 + 3) + 8 * v139);
        uint64_t v144 = v75[v139];
        if (v144)
        {
          uint64_t v203 = *(void *)(v144 + 48);
          *(void *)(v144 + 48) = 0LL;
        }

        v142[1] = v73[v139];
        int v145 = xmlRelaxNGValidateDefinition(v2, *v143);
        v76 = *(__int128 **)(v2 + 96);
        if (!v145)
        {
          if (v76)
          {
            uint64_t v140 = xmlRelaxNGSkipIgnored(v2, *((void *)v76 + 1));
            xmlRelaxNGFreeValidState(v2, v141);
            v141 = *(__int128 **)(v2 + 96);
            *(void *)(v2 + 96) = 0LL;
            if (!v140) {
              goto LABEL_307;
            }
            uint64_t v146 = *(void *)(a2 + 56);
            if (*(_DWORD *)v146 == 10)
            {
              if (xmlStrEqual(*(const xmlChar **)(v146 + 16), (const xmlChar *)"open-name-class")) {
                goto LABEL_307;
              }
            }

            xmlRelaxNGAddValidError(v2, 12, *(xmlChar **)(v140 + 16), 0LL, 0);
            int v179 = 0;
            *(void *)(v2 + 96) = v141;
            uint64_t v7 = 0xFFFFFFFFLL;
            int v180 = v201;
            uint64_t v181 = v195;
            uint64_t v182 = v200;
            int v61 = v194;
            goto LABEL_338;
          }

          v147 = *(void ***)(v2 + 104);
          if (!v147) {
            goto LABEL_325;
          }
          uint64_t v148 = *(unsigned int *)v147;
          if ((int)v148 <= 0)
          {
            xmlRelaxNGFreeStates(v2, v147);
            *(void *)(v2 + 104) = 0LL;
            v73 = v197;
LABEL_360:
            if (v140) {
              v187 = *(xmlChar **)(v140 + 16);
            }
            else {
              v187 = (xmlChar *)"noname";
            }
            xmlRelaxNGAddValidError(v2, 12, v187, 0LL, 0);
            uint64_t v181 = v195;
            uint64_t v182 = v200;
            int v61 = v194;
            int v179 = 0;
            void *v5 = v141;
            uint64_t v7 = 0xFFFFFFFFLL;
            int v180 = v201;
LABEL_338:
            *(_DWORD *)(v2 + 56) = v61;
            if (v182 && v182 != v181)
            {
              do
              {
                uint64_t v183 = *(void *)(v182 + 56);
                if (!v183) {
                  break;
                }
                *(void *)(v183 + 48) = v182;
                uint64_t v182 = v183;
              }

              while (v183 != v181);
            }

            if (v179 && *(_DWORD *)(v2 + 80) > v180) {
              xmlRelaxNGPopErrors(v2, v180);
            }
            xmlFree(v73);
            ((void (*)(void *))xmlFree)(v75);
            goto LABEL_252;
          }

          uint64_t v198 = v139;
          v199 = v141;
          uint64_t v149 = 0LL;
          int v150 = 0;
          v151 = v147[1];
          int v152 = -1;
          int v153 = -1;
          while (1)
          {
            uint64_t v154 = v151[v149];
            uint64_t v155 = xmlRelaxNGSkipIgnored(v2, *(void *)(v154 + 8));
            if (v155)
            {
              if (v150)
              {
                int v150 = 1;
              }

              else
              {
                int v159 = *(_DWORD *)(v154 + 24);
                if (v152 == -1)
                {
                  int v150 = 0;
                  int v153 = v149;
                  int v152 = *(_DWORD *)(v154 + 24);
                }

                else
                {
                  int v150 = 0;
                  if (v159 <= v152) {
                    int v153 = v149;
                  }
                  if (v159 < v152) {
                    int v152 = *(_DWORD *)(v154 + 24);
                  }
                }
              }
            }

            else
            {
              int v156 = *(_DWORD *)(v154 + 24);
              if (v150) {
                int v157 = v153;
              }
              else {
                int v157 = v149;
              }
              if (v150) {
                int v158 = v152;
              }
              else {
                int v158 = *(_DWORD *)(v154 + 24);
              }
              if (v156 <= v158) {
                int v153 = v149;
              }
              else {
                int v153 = v157;
              }
              if (v156 >= v158) {
                int v152 = v158;
              }
              else {
                int v152 = *(_DWORD *)(v154 + 24);
              }
              int v150 = 1;
              if (!v152)
              {
LABEL_300:
                uint64_t v140 = v155;
                xmlRelaxNGFreeValidState(v2, v199);
                v160 = *(int **)(v2 + 104);
                uint64_t v161 = *((void *)v160 + 1);
                if (v153 == -1)
                {
                  uint64_t v164 = v161 + 8LL * *v160;
                  v141 = *(__int128 **)(v164 - 8);
                  *(void *)(v164 - 8) = 0LL;
                  v162 = *(int **)(v2 + 104);
                  int v163 = *v162 - 1;
                  int *v162 = v163;
                }

                else
                {
                  v141 = *(__int128 **)(v161 + 8LL * v153);
                  *(void *)(v161 + 8LL * v153) = 0LL;
                  v162 = *(int **)(v2 + 104);
                  int v163 = *v162;
                }

                uint64_t v60 = v196;
                v73 = v197;
                v75 = v202;
                if (v163 >= 1)
                {
                  uint64_t v165 = 0LL;
                  do
                  {
                    xmlRelaxNGFreeValidState(v2, *(void **)(*((void *)v162 + 1) + 8 * v165++));
                    v162 = *(int **)(v2 + 104);
                  }

                  while (v165 < *v162);
                }

                xmlRelaxNGFreeStates(v2, (void **)v162);
                *(void *)(v2 + 104) = 0LL;
                uint64_t v139 = v198;
                if (!v150) {
                  goto LABEL_360;
                }
LABEL_307:
                uint64_t v166 = v75[v139];
                if (v166) {
                  *(void *)(v166 + 48) = v203;
                }
                if (++v139 == v60)
                {
                  v76 = *v5;
                  char v167 = 1;
                  goto LABEL_331;
                }

                goto LABEL_263;
              }
            }

            if (v148 == ++v149) {
              goto LABEL_300;
            }
          }
        }

        char v167 = 0;
LABEL_331:
        uint64_t v79 = v193;
        int v61 = v194;
LABEL_332:
        if (v76)
        {
          uint64_t v178 = v79;
          xmlRelaxNGFreeValidState(v2, v76);
          uint64_t v79 = v178;
        }

        void *v5 = v141;
        *((void *)v141 + 1) = v79;
        if ((v167 & 1) != 0)
        {
          uint64_t v7 = 0LL;
          int v179 = 1;
LABEL_337:
          int v180 = v201;
          uint64_t v181 = v195;
          uint64_t v182 = v200;
          goto LABEL_338;
        }
      }

      else
      {
LABEL_325:
        void *v5 = v141;
        *((void *)v141 + 1) = v193;
        int v61 = v194;
      }

      xmlRelaxNGAddValidError(v2, 11, 0LL, 0LL, 0);
      int v179 = 0;
      uint64_t v7 = 0xFFFFFFFFLL;
      goto LABEL_337;
    }
  }

  xmlRelaxNGAddValidError(a1, 7, 0LL, 0LL, 0);
  return 0xFFFFFFFFLL;
}

uint64_t xmlRelaxNGAddStates(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a2 && a3)
  {
    int v7 = *a2;
    uint64_t v8 = a2[1];
    if (*a2 >= (int)v8)
    {
      uint64_t v9 = xmlRealloc(*((void **)a2 + 1), 16 * v8);
      if (!v9)
      {
        xmlRngVErrMemory(a1, (const xmlChar *)"adding states\n");
        return 0xFFFFFFFFLL;
      }

      *((void *)a2 + 1) = v9;
      a2[1] = 2 * v8;
      int v7 = *a2;
    }

    if (v7 > 0)
    {
      uint64_t v10 = 0LL;
      while (1)
      {
        uint64_t v11 = *(void *)(*((void *)a2 + 1) + 8 * v10);
        if (v11)
        {
          if (v11 == a3) {
            goto LABEL_24;
          }
          if (*(void *)a3 == *(void *)v11
            && *(void *)(a3 + 8) == *(void *)(v11 + 8)
            && *(_DWORD *)(a3 + 24) == *(_DWORD *)(v11 + 24))
          {
            uint64_t v12 = *(unsigned int *)(a3 + 16);
            if (v12 == *(_DWORD *)(v11 + 16) && *(void *)(a3 + 40) == *(void *)(v11 + 40))
            {
              BOOL v13 = *(const xmlChar **)(a3 + 32);
              int v14 = *(const xmlChar **)(v11 + 32);
              if (v13 != v14)
              {
                if (!xmlStrEqual(v13, v14)) {
                  goto LABEL_15;
                }
                uint64_t v12 = *(unsigned int *)(a3 + 16);
              }

              if ((int)v12 < 1)
              {
LABEL_24:
                xmlRelaxNGFreeValidState(a1, (void *)a3);
                return 0LL;
              }

              int v15 = *(void **)(a3 + 48);
              uint64_t v16 = *(void **)(v11 + 48);
              while (*v15 == *v16)
              {
                ++v16;
                ++v15;
                if (!--v12) {
                  goto LABEL_24;
                }
              }
            }
          }
        }

void xmlRelaxNGValidErrorPop(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 80);
  if (v1 <= 0)
  {
    *(void *)(a1 + 72) = 0LL;
  }

  else
  {
    unsigned int v2 = v1 - 1;
    *(_DWORD *)(a1 + 80) = v1 - 1;
    uint64_t v3 = *(void *)(a1 + 88);
    uint64_t v4 = v3 + 40LL * (v1 - 2);
    if (v1 == 1) {
      uint64_t v4 = 0LL;
    }
    *(void *)(a1 + 72) = v4;
    uint64_t v5 = v3 + 40LL * v2;
    char v7 = *(_BYTE *)(v5 + 4);
    uint64_t v6 = (_DWORD *)(v5 + 4);
    if ((v7 & 1) != 0)
    {
      uint64_t v8 = v3 + 40LL * v2;
      uint64_t v11 = *(void **)(v8 + 24);
      uint64_t v10 = (void *)(v8 + 24);
      uint64_t v9 = v11;
      if (v11) {
        xmlFree(v9);
      }
      void *v10 = 0LL;
      uint64_t v12 = v3 + 40LL * v2;
      int v15 = *(void **)(v12 + 32);
      int v14 = (void *)(v12 + 32);
      BOOL v13 = v15;
      if (v15) {
        xmlFree(v13);
      }
      void *v14 = 0LL;
      _DWORD *v6 = 0;
    }
  }

uint64_t xmlRelaxNGValidateCompiledContent(_DWORD *data, xmlRegexpPtr comp, uint64_t a3)
{
  if (!comp) {
    return 0xFFFFFFFFLL;
  }
  int v5 = data[46];
  uint64_t v6 = xmlRegNewExecCtxt(comp, (xmlRegExecCallbacks)xmlRelaxNGValidateCompiledCallback, data);
  data[46] = 0;
  if (!a3) {
    goto LABEL_17;
  }
  while (1)
  {
    *(void *)(*((void *)data + 12) + 8LL) = a3;
    int v7 = *(_DWORD *)(a3 + 8);
    if ((v7 - 3) < 2)
    {
      if (!xmlIsBlankNode((const xmlNode *)a3) && xmlRegExecPushString(v6, (const xmlChar *)"#text", data) < 0)
      {
        a3 = *(void *)(a3 + 40);
        int v11 = 39;
        goto LABEL_16;
      }

      goto LABEL_12;
    }

    if (v7 != 1) {
      goto LABEL_12;
    }
    uint64_t v8 = *(void *)(a3 + 72);
    uint64_t v9 = *(const xmlChar **)(a3 + 16);
    if (!v8) {
      break;
    }
    if (xmlRegExecPushString2(v6, v9, *(const xmlChar **)(v8 + 16), data) < 0) {
      goto LABEL_15;
    }
LABEL_12:
    a3 = *(void *)(a3 + 48);
    if (!a3) {
      goto LABEL_17;
    }
  }

  if ((xmlRegExecPushString(v6, v9, data) & 0x80000000) == 0) {
    goto LABEL_12;
  }
LABEL_15:
  int v11 = 38;
LABEL_16:
  xmlRelaxNGAddValidError((uint64_t)data, v11, *(xmlChar **)(a3 + 16), 0LL, 0);
LABEL_17:
  int v12 = xmlRegExecPushString(v6, 0LL, 0LL);
  if (v12 == 1)
  {
    *(void *)(*((void *)data + 12) + 8LL) = 0LL;
    xmlRegFreeExecCtxt(v6);
    uint64_t result = data[46];
  }

  else
  {
    if (!v12)
    {
      xmlRelaxNGAddValidError((uint64_t)data, 22, (xmlChar *)&byte_181A3ACBA, 0LL, 0);
      if ((data[14] & 1) == 0) {
        xmlRelaxNGDumpValidError((uint64_t)data);
      }
    }

    xmlRegFreeExecCtxt(v6);
    uint64_t result = 0xFFFFFFFFLL;
  }

  data[46] = v5;
  return result;
}

uint64_t xmlRelaxNGValidateDefinitionList(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if (a2)
  {
    uint64_t v3 = a2;
    LODWORD(v4) = 0;
    while (*(void *)(v2 + 96) || *(void *)(v2 + 104))
    {
      int v5 = xmlRelaxNGValidateDefinition(v2, v3);
      if (v5 < 0) {
        uint64_t v4 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v4 = v4;
      }
      if (v5 != -1)
      {
        uint64_t v3 = *(void *)(v3 + 64);
        if (v3) {
          continue;
        }
      }

      return v4;
    }

    a1 = v2;
    int v7 = 6;
    uint64_t v6 = 0LL;
  }

  else
  {
    uint64_t v6 = (xmlChar *)"NULL definition list";
    int v7 = 37;
  }

  xmlRelaxNGAddValidError(a1, v7, v6, 0LL, 0);
  return 0xFFFFFFFFLL;
}

void *xmlRelaxNGCopyValidState(uint64_t a1, __int128 *a2)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(a1 + 112);
  if (v4 && (unsigned int v5 = *(_DWORD *)v4 - 1, *(int *)v4 >= 1))
  {
    *(_DWORD *)uint64_t v4 = v5;
    uint64_t v6 = *(void **)(*(void *)(v4 + 8) + 8LL * v5);
  }

  else
  {
    int v7 = xmlMalloc(0x38uLL);
    uint64_t v6 = v7;
    if (!v7)
    {
      xmlRngVErrMemory(a1, (const xmlChar *)"allocating states\n");
      return v6;
    }

    v7[6] = 0LL;
    *((_OWORD *)v7 + 1) = 0u;
    *((_OWORD *)v7 + 2) = 0u;
    *(_OWORD *)int v7 = 0u;
  }

  uint64_t v8 = (void *)v6[6];
  int v9 = *((_DWORD *)v6 + 5);
  __int128 v11 = a2[1];
  __int128 v10 = a2[2];
  __int128 v12 = *a2;
  v6[6] = *((void *)a2 + 6);
  *((_OWORD *)v6 + 1) = v11;
  *((_OWORD *)v6 + 2) = v10;
  *(_OWORD *)uint64_t v6 = v12;
  v6[6] = v8;
  *((_DWORD *)v6 + 5) = v9;
  int v13 = *((_DWORD *)a2 + 4);
  if (v13 >= 1)
  {
    if (v8)
    {
      if (v9 >= v13)
      {
LABEL_15:
        memcpy(v8, *((const void **)a2 + 6), 8LL * *((int *)a2 + 4));
        return v6;
      }

      uint64_t v8 = xmlRealloc(v8, 8LL * *((int *)a2 + 5));
      if (v8)
      {
        *((_DWORD *)v6 + 5) = *((_DWORD *)a2 + 5);
        v6[6] = v8;
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v14 = *((int *)a2 + 5);
      *((_DWORD *)v6 + 5) = v14;
      uint64_t v8 = xmlMalloc(8 * v14);
      v6[6] = v8;
      if (v8) {
        goto LABEL_15;
      }
    }

    xmlRngVErrMemory(a1, (const xmlChar *)"allocating states\n");
    *((_DWORD *)v6 + 4) = 0;
  }

  return v6;
}

void xmlRelaxNGValidateCompiledCallback(uint64_t a1, const char *a2, _DWORD *a3, uint64_t a4)
{
  if (!a4)
  {
    fprintf((FILE *)*MEMORY[0x1895F89D0], "callback on %s missing context\n", a2);
    return;
  }

  if (a3)
  {
    if (*a3 == 4)
    {
      int v5 = xmlRelaxNGValidateDefinition(a4, a3);
      if (v5) {
        *(_DWORD *)(a4 + 184) = v5;
      }
      return;
    }

    fprintf((FILE *)*MEMORY[0x1895F89D0], "callback on %s define is not element\n");
  }

  else
  {
    if (*a2 == 35) {
      return;
    }
    fprintf((FILE *)*MEMORY[0x1895F89D0], "callback on %s missing define\n");
  }

  if (!*(_DWORD *)(a4 + 68)) {
    *(_DWORD *)(a4 + 68) = 37;
  }
}

uint64_t xmlRelaxNGNodeMatchesList(uint64_t a1, void **a2)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v3 = *a2;
  if (!v3) {
    return 0LL;
  }
  for (uint64_t i = a2 + 1; ; ++i)
  {
    int v6 = *(_DWORD *)(a1 + 8);
    if (v6 != 1) {
      break;
    }
    if (*(_DWORD *)v3 == 4)
    {
      uint64_t result = xmlRelaxNGElementMatch(0LL, v3, a1);
      if ((_DWORD)result == 1) {
        return result;
      }
    }

void initxmlDefaultSAXHandler(xmlSAXHandlerV1 *hdlr, int warning)
{
  if (hdlr->initialized != 1)
  {
    hdlr->internalSubset = xmlSAX2InternalSubset;
    hdlr->isStandalone = xmlSAX2IsStandalone;
    hdlr->hasInternalSubset = xmlSAX2HasInternalSubset;
    hdlr->hasExternalSubset = xmlSAX2HasExternalSubset;
    hdlr->resolveEntity = xmlSAX2ResolveEntity;
    hdlr->getEntity = xmlSAX2GetEntity;
    hdlr->attributeDecl = xmlSAX2AttributeDecl;
    hdlr->elementDecl = xmlSAX2ElementDecl;
    hdlr->entityDecl = xmlSAX2EntityDecl;
    hdlr->notationDecl = xmlSAX2NotationDecl;
    hdlr->unparsedEntityDecl = xmlSAX2UnparsedEntityDecl;
    hdlr->setDocumentLocator = xmlSAX2SetDocumentLocator;
    hdlr->startDocument = xmlSAX2StartDocument;
    hdlr->endDocument = xmlSAX2EndDocument;
    hdlr->startElement = xmlSAX2StartElement;
    hdlr->endElement = xmlSAX2EndElement;
    hdlr->reference = xmlSAX2Reference;
    hdlr->characters = xmlSAX2Characters;
    hdlr->cdataBlocuint64_t k = xmlSAX2CDataBlock;
    hdlr->externalSubset = xmlSAX2ExternalSubset;
    hdlr->ignorableWhitespace = xmlSAX2Characters;
    hdlr->processingInstructiouint64_t n = xmlSAX2ProcessingInstruction;
    uint64_t v2 = xmlParserWarning;
    if (!warning) {
      uint64_t v2 = 0LL;
    }
    hdlr->warning = v2;
    hdlr->error = xmlParserError;
    hdlr->fatalError = xmlParserError;
    hdlr->getParameterEntity = xmlSAX2GetParameterEntity;
    hdlr->initialized = 1;
  }

void inithtmlDefaultSAXHandler(xmlSAXHandlerV1 *hdlr)
{
  if (hdlr->initialized != 1)
  {
    hdlr->internalSubset = xmlSAX2InternalSubset;
    hdlr->externalSubset = 0LL;
    *(_OWORD *)&hdlr->isStandalone = 0u;
    *(_OWORD *)&hdlr->hasExternalSubset = 0u;
    hdlr->getEntity = xmlSAX2GetEntity;
    *(_OWORD *)&hdlr->entityDecl = 0u;
    *(_OWORD *)&hdlr->attributeDecl = 0u;
    hdlr->unparsedEntityDecl = 0LL;
    hdlr->setDocumentLocator = xmlSAX2SetDocumentLocator;
    hdlr->startDocument = xmlSAX2StartDocument;
    hdlr->endDocument = xmlSAX2EndDocument;
    hdlr->startElement = xmlSAX2StartElement;
    hdlr->endElement = xmlSAX2EndElement;
    hdlr->reference = 0LL;
    hdlr->characters = xmlSAX2Characters;
    hdlr->getParameterEntity = 0LL;
    hdlr->cdataBlocuint64_t k = xmlSAX2CDataBlock;
    hdlr->ignorableWhitespace = xmlSAX2IgnorableWhitespace;
    hdlr->processingInstructiouint64_t n = xmlSAX2ProcessingInstruction;
    hdlr->comment = xmlSAX2Comment;
    hdlr->warning = xmlParserWarning;
    hdlr->error = xmlParserError;
    hdlr->fatalError = xmlParserError;
    hdlr->initialized = 1;
  }

void initdocbDefaultSAXHandler(xmlSAXHandlerV1 *hdlr)
{
  if (hdlr->initialized != 1)
  {
    hdlr->internalSubset = xmlSAX2InternalSubset;
    hdlr->isStandalone = xmlSAX2IsStandalone;
    hdlr->hasInternalSubset = xmlSAX2HasInternalSubset;
    hdlr->hasExternalSubset = xmlSAX2HasExternalSubset;
    hdlr->resolveEntity = xmlSAX2ResolveEntity;
    hdlr->getEntity = xmlSAX2GetEntity;
    hdlr->entityDecl = xmlSAX2EntityDecl;
    *(_OWORD *)&hdlr->notationDecl = 0u;
    *(_OWORD *)&hdlr->elementDecl = 0u;
    hdlr->setDocumentLocator = xmlSAX2SetDocumentLocator;
    hdlr->startDocument = xmlSAX2StartDocument;
    hdlr->endDocument = xmlSAX2EndDocument;
    hdlr->startElement = xmlSAX2StartElement;
    hdlr->endElement = xmlSAX2EndElement;
    hdlr->reference = xmlSAX2Reference;
    hdlr->cdataBlocuint64_t k = 0LL;
    hdlr->externalSubset = 0LL;
    hdlr->characters = xmlSAX2Characters;
    hdlr->ignorableWhitespace = xmlSAX2IgnorableWhitespace;
    hdlr->processingInstructiouint64_t n = 0LL;
    hdlr->comment = xmlSAX2Comment;
    hdlr->warning = xmlParserWarning;
    hdlr->error = xmlParserError;
    hdlr->fatalError = xmlParserError;
    hdlr->getParameterEntity = 0LL;
    hdlr->initialized = 1;
  }

const xmlChar *__cdecl xmlSAX2GetPublicId(void *ctx)
{
  return 0LL;
}

const xmlChar *__cdecl xmlSAX2GetSystemId(const xmlChar *ctx)
{
  if (ctx)
  {
    uint64_t v1 = *((void *)ctx + 7);
    if (v1) {
      return *(const xmlChar **)(v1 + 8);
    }
    else {
      return 0LL;
    }
  }

  return ctx;
}

int xmlSAX2GetLineNumber(void *ctx)
{
  if (ctx)
  {
    uint64_t v1 = *((void *)ctx + 7);
    if (v1) {
      LODWORD(ctx) = *(_DWORD *)(v1 + 52);
    }
    else {
      LODWORD(ctx) = 0;
    }
  }

  return (int)ctx;
}

int xmlSAX2GetColumnNumber(void *ctx)
{
  if (ctx)
  {
    uint64_t v1 = *((void *)ctx + 7);
    if (v1) {
      LODWORD(ctx) = *(_DWORD *)(v1 + 56);
    }
    else {
      LODWORD(ctx) = 0;
    }
  }

  return (int)ctx;
}

int xmlSAX2IsStandalone(void *ctx)
{
  if (ctx)
  {
    uint64_t v1 = *((void *)ctx + 2);
    if (v1) {
      LODWORD(ctx) = *(_DWORD *)(v1 + 76) == 1;
    }
    else {
      LODWORD(ctx) = 0;
    }
  }

  return (int)ctx;
}

int xmlSAX2HasInternalSubset(void *ctx)
{
  if (ctx)
  {
    uint64_t v1 = *((void *)ctx + 2);
    if (v1) {
      LODWORD(ctx) = *(void *)(v1 + 80) != 0LL;
    }
    else {
      LODWORD(ctx) = 0;
    }
  }

  return (int)ctx;
}

int xmlSAX2HasExternalSubset(void *ctx)
{
  if (ctx)
  {
    uint64_t v1 = *((void *)ctx + 2);
    if (v1) {
      LODWORD(ctx) = *(void *)(v1 + 88) != 0LL;
    }
    else {
      LODWORD(ctx) = 0;
    }
  }

  return (int)ctx;
}

void xmlSAX2InternalSubset(void *ctx, const xmlChar *name, const xmlChar *ExternalID, const xmlChar *SystemID)
{
  if (ctx)
  {
    int v5 = (const xmlDoc *)*((void *)ctx + 2);
    if (v5)
    {
      IntSubset = (xmlNode *)xmlGetIntSubset(v5);
      if (IntSubset)
      {
        if (*((_DWORD *)ctx + 13)) {
          return;
        }
        __int128 v10 = (xmlDtd *)IntSubset;
        xmlUnlinkNode(IntSubset);
        xmlFreeDtd(v10);
        __int128 v11 = (xmlDoc *)*((void *)ctx + 2);
        v11->intSubset = 0LL;
      }

      else
      {
        __int128 v11 = (xmlDoc *)*((void *)ctx + 2);
      }

      xmlDtdPtr v12 = xmlCreateIntSubset(v11, name, ExternalID, SystemID);
      *(void *)(*((void *)ctx + 2) + 80LL) = v12;
      if (!v12) {
        xmlSAX2ErrMemory((uint64_t *)ctx, (uint64_t)"xmlSAX2InternalSubset");
      }
    }
  }

uint64_t xmlSAX2ErrMemory(uint64_t *a1, uint64_t a2)
{
  *((_DWORD *)a1 + 34) = 2;
  uint64_t v3 = *a1;
  if (*a1 && *(_DWORD *)(v3 + 216) == -554844497) {
    uint64_t v4 = *(void *)(v3 + 248);
  }
  else {
    LODWORD(v4) = 0;
  }
  uint64_t result = __xmlRaiseError( v4,  a1[21],  a1[20],  (int)a1,  0,  1,  2,  2,  0LL,  0,  (uint64_t)"out of memory\n",  0LL,  0LL,  0,  0,  a2);
  *((_DWORD *)a1 + 34) = 2;
  *((_DWORD *)a1 + 68) = -1;
  *((_DWORD *)a1 + 83) = 1;
  return result;
}

void xmlSAX2ExternalSubset(void *ctx, const xmlChar *name, const xmlChar *ExternalID, const xmlChar *SystemID)
{
  if (ctx
    && (unint64_t)ExternalID | (unint64_t)SystemID
    && (*((_DWORD *)ctx + 39) || *((_DWORD *)ctx + 108)))
  {
    if (*((_DWORD *)ctx + 6))
    {
      if (*((void *)ctx + 2))
      {
        if (*(void *)ctx)
        {
          unsigned int v8 = *(uint64_t (**)(void, const xmlChar *, const xmlChar *))(*(void *)ctx + 32LL);
          if (v8)
          {
            uint64_t v9 = v8(*((void *)ctx + 1), ExternalID, SystemID);
            if (v9)
            {
              uint64_t v10 = v9;
              xmlNewDtd(*((xmlDocPtr *)ctx + 2), name, ExternalID, SystemID);
              uint64_t v11 = *((void *)ctx + 7);
              int v13 = *((_DWORD *)ctx + 16);
              int v12 = *((_DWORD *)ctx + 17);
              uint64_t v14 = *((void *)ctx + 9);
              int v15 = *((_DWORD *)ctx + 102);
              uint64_t v16 = *((void *)ctx + 5);
              *((void *)ctx + 5) = 0LL;
              uint64_t v17 = xmlMalloc(0x28uLL);
              *((void *)ctx + 9) = v17;
              if (!v17)
              {
                xmlSAX2ErrMemory((uint64_t *)ctx, (uint64_t)"xmlSAX2ExternalSubset");
                *((void *)ctx + 7) = v11;
                *((_DWORD *)ctx + 16) = v13;
                *((_DWORD *)ctx + 17) = v12;
                *((void *)ctx + 9) = v14;
                *((_DWORD *)ctx + 102) = v15;
                goto LABEL_23;
              }

              *((void *)ctx + 8) = 0x500000000LL;
              *((void *)ctx + 7) = 0LL;
              xmlPushInput((xmlParserCtxtPtr)ctx, (xmlParserInputPtr)v10);
              uint64_t v18 = *((void *)ctx + 7);
              if (*(int *)(v18 + 48) >= 4)
              {
                xmlCharEncoding v19 = xmlDetectCharEncoding(*(const unsigned __int8 **)(v18 + 32), 4);
                xmlSwitchEncoding((xmlParserCtxtPtr)ctx, v19);
              }

              if (!*(void *)(v10 + 8)) {
                *(void *)(v10 + 8) = xmlCanonicPath(SystemID);
              }
              *(void *)(v10 + 52) = 0x100000001LL;
              uint64_t v20 = *(void *)(*((void *)ctx + 7) + 32LL);
              *(void *)(v10 + 24) = v20;
              *(void *)(v10 + 32) = v20;
              *(void *)(v10 + 72) = 0LL;
              xmlParseExternalSubset((xmlParserCtxtPtr)ctx, ExternalID, SystemID);
              if (*((int *)ctx + 16) >= 2)
              {
                do
                  xmlPopInput((xmlParserCtxtPtr)ctx);
                while (*((int *)ctx + 16) > 1);
              }

              xmlFreeInputStream(*((xmlParserInputPtr *)ctx + 7));
              xmlFree(*((void **)ctx + 9));
              *((void *)ctx + 7) = v11;
              *((_DWORD *)ctx + 16) = v13;
              *((_DWORD *)ctx + 17) = v12;
              *((void *)ctx + 9) = v14;
              *((_DWORD *)ctx + 102) = v15;
              int v21 = (xmlChar *)*((void *)ctx + 5);
              if (!v21) {
                goto LABEL_23;
              }
              int v22 = (xmlDict *)*((void *)ctx + 57);
              if (v22)
              {
                if (xmlDictOwns(v22, v21))
                {
LABEL_23:
                  *((void *)ctx + 5) = v16;
                  return;
                }

                int v21 = (xmlChar *)*((void *)ctx + 5);
              }

              xmlFree(v21);
              goto LABEL_23;
            }
          }
        }
      }
    }
  }

xmlParserInputPtr xmlSAX2ResolveEntity(void *ctx, const xmlChar *publicId, const xmlChar *systemId)
{
  ExternalEntity = (xmlParserCtxt *)ctx;
  if (ctx)
  {
    uint64_t v5 = *((void *)ctx + 7);
    if (!v5 || (int v6 = *(const xmlChar **)(v5 + 8)) == 0LL) {
      int v6 = (const xmlChar *)*((void *)ctx + 35);
    }
    int v7 = xmlBuildURI(systemId, v6);
    ExternalEntity = (xmlParserCtxt *)xmlLoadExternalEntity((const char *)v7, (const char *)publicId, ExternalEntity);
    if (v7) {
      xmlFree(v7);
    }
  }

  return (xmlParserInputPtr)ExternalEntity;
}

xmlEntityPtr xmlSAX2GetEntity(void *ctx, const xmlChar *name)
{
  if (!ctx) {
    return 0LL;
  }
  if (*((_DWORD *)ctx + 84) || (DocEntity = xmlGetPredefinedEntity(name)) == 0LL)
  {
    uint64_t v4 = (const xmlDoc *)*((void *)ctx + 2);
    if (!v4 || v4->standalone != 1) {
      return xmlGetDocEntity(v4, name);
    }
    if (*((_DWORD *)ctx + 84) == 2)
    {
      v4->standalone = 0;
      xmlEntityPtr result = xmlGetDocEntity(v4, name);
      *(_DWORD *)(*((void *)ctx + 2) + 76LL) = 1;
      return result;
    }

    DocEntity = xmlGetDocEntity(v4, name);
    if (!DocEntity)
    {
      int v7 = (const xmlDoc *)*((void *)ctx + 2);
      v7->standalone = 0;
      DocEntity = xmlGetDocEntity(v7, name);
      if (DocEntity) {
        xmlFatalErrMsg_0( ctx,  103,  (uint64_t)"Entity(%s) document marked standalone but requires external subset\n",  (uint64_t)name);
      }
      *(_DWORD *)(*((void *)ctx + 2) + 76LL) = 1;
    }
  }

  return DocEntity;
}

_DWORD *xmlFatalErrMsg_0(_DWORD *result, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = result;
  if (!result[83] || result[68] != -1)
  {
    result[34] = a2;
    xmlEntityPtr result = (_DWORD *)__xmlRaiseError(0, 0, 0, (int)result, 0, 1, a2, 3, 0LL, 0, a4, 0LL, 0LL, 0, 0, a3);
    v4[6] = 0;
    v4[38] = 0;
    if (!v4[112]) {
      v4[83] = 1;
    }
  }

  return result;
}

xmlEntityPtr xmlSAX2GetParameterEntity(xmlEntityPtr ctx, const xmlChar *name)
{
  if (ctx) {
    return xmlGetParameterEntity((xmlDocPtr)ctx->name, name);
  }
  return ctx;
}

void xmlSAX2EntityDecl( void *ctx, const xmlChar *name, int type, const xmlChar *publicId, const xmlChar *systemId, xmlChar *content)
{
  if (!ctx) {
    return;
  }
  int v9 = *((_DWORD *)ctx + 84);
  if (v9 != 2)
  {
    if (v9 != 1)
    {
      xmlFatalErrMsg_0(ctx, 104, (uint64_t)"SAX.xmlSAX2EntityDecl(%s) called while not in subset\n", (uint64_t)name);
      return;
    }

    xmlEntityPtr v10 = xmlAddDocEntity(*((xmlDocPtr *)ctx + 2), name, type, publicId, systemId, content);
    if (!v10)
    {
      if (*((_DWORD *)ctx + 105) && (!*((_DWORD *)ctx + 83) || *((_DWORD *)ctx + 68) != -1))
      {
        *((_DWORD *)ctx + 34) = 107;
        __xmlRaiseError( 0,  0,  0,  (int)ctx,  0,  1,  107,  1,  0LL,  0,  (uint64_t)name,  0LL,  0LL,  0,  0,  (uint64_t)"Entity(%s) already defined in the internal subset\n");
      }

      return;
    }

    goto LABEL_10;
  }

  xmlEntityPtr v10 = xmlAddDtdEntity(*((xmlDocPtr *)ctx + 2), name, type, publicId, systemId, content);
  if (v10)
  {
LABEL_10:
    if (systemId && !v10->URI)
    {
      uint64_t v11 = *((void *)ctx + 7);
      if (!v11 || (int v12 = *(const xmlChar **)(v11 + 8)) == 0LL) {
        int v12 = (const xmlChar *)*((void *)ctx + 35);
      }
      v10->URI = xmlBuildURI(systemId, v12);
    }

    return;
  }

  if (*((_DWORD *)ctx + 105))
  {
    if (*(void *)ctx)
    {
      int v13 = *(void (**)(void, const char *, ...))(*(void *)ctx + 168LL);
      if (v13) {
        v13(*((void *)ctx + 1), "Entity(%s) already defined in the external subset\n", (const char *)name);
      }
    }
  }

void xmlSAX2AttributeDecl( void *ctx, const xmlChar *elem, const xmlChar *fullname, int type, int def, const xmlChar *defaultValue, xmlEnumerationPtr tree)
{
  prefix = 0LL;
  if (ctx && *((void *)ctx + 2))
  {
    int v14 = xmlStrEqual(fullname, (const xmlChar *)"xml:id");
    if (type != 2 && v14)
    {
      int v15 = *((_DWORD *)ctx + 38);
      xmlErrValid((uint64_t *)ctx, 540, (uint64_t)"xml:id : attribute type should be ID\n", 0LL, 0LL);
      *((_DWORD *)ctx + 38) = v15;
    }

    uint64_t v16 = xmlSplitQName((xmlParserCtxtPtr)ctx, fullname, &prefix);
    *((_DWORD *)ctx + 56) = 1;
    int v17 = *((_DWORD *)ctx + 84);
    if (v17 == 2)
    {
      uint64_t v18 = *(xmlDtd **)(*((void *)ctx + 2) + 88LL);
    }

    else
    {
      if (v17 != 1)
      {
        xmlFatalErrMsg_0(ctx, 1, (uint64_t)"SAX.xmlSAX2AttributeDecl(%s) called while not in subset\n", (uint64_t)v16);
        xmlFree(v16);
        xmlFreeEnumeration(tree);
        return;
      }

      uint64_t v18 = *(xmlDtd **)(*((void *)ctx + 2) + 80LL);
    }

    xmlCharEncoding v19 = xmlAddAttributeDecl( (xmlValidCtxtPtr)((char *)ctx + 160),  v18,  elem,  v16,  prefix,  (xmlAttributeType)type,  (xmlAttributeDefault)def,  defaultValue,  tree);
    if (!*((_DWORD *)ctx + 56)) {
      *((_DWORD *)ctx + 38) = 0;
    }
    if (v19)
    {
      if (*((_DWORD *)ctx + 39))
      {
        if (*((_DWORD *)ctx + 6))
        {
          uint64_t v20 = (xmlDoc *)*((void *)ctx + 2);
        }
      }
    }

    if (prefix) {
      xmlFree(prefix);
    }
    if (v16) {
      xmlFree(v16);
    }
  }

uint64_t *xmlErrValid(uint64_t *result, int a2, uint64_t a3, uint64_t a4, xmlChar *a5)
{
  uint64_t v5 = (uint64_t)result;
  if (!*((_DWORD *)result + 83) || *((_DWORD *)result + 68) != -1)
  {
    *((_DWORD *)result + 34) = a2;
    uint64_t v6 = *result;
    if (*result && *(_DWORD *)(v6 + 216) == -554844497) {
      uint64_t v7 = *(void *)(v6 + 248);
    }
    else {
      LODWORD(v7) = 0;
    }
    xmlEntityPtr result = (uint64_t *)__xmlRaiseError( v7,  *(void *)(v5 + 168),  *(void *)(v5 + 160),  v5,  0,  4,  a2,  2,  0LL,  0,  a4,  a5,  0LL,  0,  0,  a3);
    *(_DWORD *)(v5 + 152) = 0;
  }

  return result;
}

void xmlSAX2ElementDecl(void *ctx, const xmlChar *name, int type, xmlElementContentPtr content)
{
  if (ctx)
  {
    uint64_t v5 = *((void *)ctx + 2);
    if (v5)
    {
      int v6 = *((_DWORD *)ctx + 84);
      if (v6 == 2)
      {
        uint64_t v7 = (xmlDtdPtr *)(v5 + 88);
      }

      else
      {
        if (v6 != 1)
        {
          xmlFatalErrMsg_0(ctx, 1, (uint64_t)"SAX.xmlSAX2ElementDecl(%s) called while not in subset\n", (uint64_t)name);
          return;
        }

        uint64_t v7 = (xmlDtdPtr *)(v5 + 80);
      }

      unsigned int v8 = xmlAddElementDecl((xmlValidCtxtPtr)((char *)ctx + 160), *v7, name, (xmlElementTypeVal)type, content);
      if (!v8) {
        *((_DWORD *)ctx + 38) = 0;
      }
      if (*((_DWORD *)ctx + 39))
      {
        if (*((_DWORD *)ctx + 6))
        {
          int v9 = (xmlDoc *)*((void *)ctx + 2);
          if (v9)
          {
          }
        }
      }
    }
  }

void xmlSAX2NotationDecl(void *ctx, const xmlChar *name, const xmlChar *publicId, const xmlChar *systemId)
{
  if (ctx)
  {
    uint64_t v5 = *((void *)ctx + 2);
    if (v5)
    {
      if (!((unint64_t)publicId | (unint64_t)systemId))
      {
        int v6 = "SAX.xmlSAX2NotationDecl(%s) externalID or PublicID missing\n";
LABEL_17:
        xmlFatalErrMsg_0(ctx, 105, (uint64_t)v6, (uint64_t)name);
        return;
      }

      int v7 = *((_DWORD *)ctx + 84);
      if (v7 == 2)
      {
        unsigned int v8 = (xmlDtdPtr *)(v5 + 88);
      }

      else
      {
        if (v7 != 1)
        {
          int v6 = "SAX.xmlSAX2NotationDecl(%s) called while not in subset\n";
          goto LABEL_17;
        }

        unsigned int v8 = (xmlDtdPtr *)(v5 + 80);
      }

      int v9 = xmlAddNotationDecl((xmlValidCtxtPtr)((char *)ctx + 160), *v8, name, publicId, systemId);
      if (!v9) {
        *((_DWORD *)ctx + 38) = 0;
      }
      if (*((_DWORD *)ctx + 39) && *((_DWORD *)ctx + 6))
      {
        xmlEntityPtr v10 = (xmlDoc *)*((void *)ctx + 2);
      }
    }
  }

void xmlSAX2UnparsedEntityDecl( void *ctx, const xmlChar *name, const xmlChar *publicId, const xmlChar *systemId, const xmlChar *notationName)
{
  if (!ctx) {
    return;
  }
  int v7 = *((_DWORD *)ctx + 84);
  if (v7 != 2)
  {
    if (v7 != 1)
    {
      xmlFatalErrMsg_0(ctx, 1, (uint64_t)"SAX.xmlSAX2UnparsedEntityDecl(%s) called while not in subset\n", (uint64_t)name);
      return;
    }

    xmlEntityPtr v8 = xmlAddDocEntity(*((xmlDocPtr *)ctx + 2), name, 3, publicId, systemId, notationName);
    if (!v8)
    {
      if (*((_DWORD *)ctx + 105))
      {
        if (*(void *)ctx)
        {
          int v9 = *(void (**)(uint64_t, const char *))(*(void *)ctx + 168LL);
          if (v9)
          {
            uint64_t v10 = *((void *)ctx + 1);
            uint64_t v11 = "Entity(%s) already defined in the internal subset\n";
LABEL_21:
            v9(v10, v11);
            return;
          }
        }
      }

      return;
    }

void xmlSAX2StartDocument(void *ctx)
{
  if (ctx)
  {
    if (*((_DWORD *)ctx + 13))
    {
      htmlDocPtr v2 = (htmlDocPtr)*((void *)ctx + 2);
      if (!v2)
      {
        htmlDocPtr v2 = htmlNewDocNoDtD(0LL, 0LL);
        *((void *)ctx + 2) = v2;
        if (!v2) {
          goto LABEL_17;
        }
      }

      v2->parseFlags = *((_DWORD *)ctx + 141);
      v2->properties = 128;
    }

    else
    {
      xmlDocPtr v3 = xmlNewDoc(*((const xmlChar **)ctx + 4));
      *((void *)ctx + 2) = v3;
      if (!v3)
      {
LABEL_17:
        xmlSAX2ErrMemory((uint64_t *)ctx, (uint64_t)"xmlSAX2StartDocument");
        return;
      }

      xmlDocPtr v4 = v3;
      v3->properties = (*((_DWORD *)ctx + 141) >> 15) & 4;
      v3->parseFlags = *((_DWORD *)ctx + 141);
      uint64_t v5 = (xmlChar *)*((void *)ctx + 5);
      if (v5) {
        uint64_t v5 = xmlStrdup(v5);
      }
      v4->encoding = v5;
      v4->standalone = *((_DWORD *)ctx + 12);
      if (*((_DWORD *)ctx + 142))
      {
        int v6 = (xmlDict *)*((void *)ctx + 57);
        v4->dict = v6;
        xmlDictReference(v6);
      }
    }

    uint64_t v7 = *((void *)ctx + 2);
    if (v7)
    {
      if (!*(void *)(v7 + 136))
      {
        uint64_t v8 = *((void *)ctx + 7);
        if (v8)
        {
          int v9 = *(const xmlChar **)(v8 + 8);
          if (v9)
          {
            uint64_t v10 = xmlPathToURI(v9);
            *(void *)(*((void *)ctx + 2) + 136LL) = v10;
            if (!v10) {
              goto LABEL_17;
            }
          }
        }
      }
    }
  }

void xmlSAX2EndDocument(void *ctx)
{
  if (ctx)
  {
    if (*((_DWORD *)ctx + 39))
    {
      if (*((_DWORD *)ctx + 6))
      {
        htmlDocPtr v2 = (xmlDoc *)*((void *)ctx + 2);
        if (v2)
        {
        }
      }
    }

    uint64_t v3 = *((void *)ctx + 5);
    if (v3)
    {
      uint64_t v4 = *((void *)ctx + 2);
      if (v4)
      {
        if (!*(void *)(v4 + 112))
        {
          *(void *)(v4 + 112) = v3;
          *((void *)ctx + 5) = 0LL;
        }
      }
    }

    uint64_t v5 = (uint64_t *)*((void *)ctx + 9);
    if (v5)
    {
      if (*((int *)ctx + 16) >= 1)
      {
        uint64_t v6 = *v5;
        if (v6)
        {
          uint64_t v7 = *(const xmlChar **)(v6 + 80);
          if (v7)
          {
            uint64_t v8 = *((void *)ctx + 2);
            if (v8)
            {
              if (!*(void *)(v8 + 112)) {
                *(void *)(*((void *)ctx + 2) + 112LL) = xmlStrdup(v7);
              }
            }
          }
        }
      }
    }

    int v9 = *((_DWORD *)ctx + 102);
    if (v9)
    {
      uint64_t v10 = *((void *)ctx + 2);
      if (v10)
      {
        if (!*(_DWORD *)(v10 + 144)) {
          *(_DWORD *)(v10 + 144) = v9;
        }
      }
    }
  }

void xmlSAX2StartElement(void *ctx, const xmlChar *fullname, const xmlChar **atts)
{
  uint64_t v63 = *MEMORY[0x1895F89C0];
  if (ctx)
  {
    if (fullname)
    {
      uint64_t v5 = *((void *)ctx + 2);
      if (v5)
      {
        childreuint64_t n = (_xmlNode *)*((void *)ctx + 10);
        if (*((_DWORD *)ctx + 39))
        {
          if (!*(void *)(v5 + 88))
          {
            uint64_t v12 = *(void **)(v5 + 80);
            if (!v12 || !v12[9] && !v12[10] && !v12[11] && !v12[12])
            {
              xmlErrValid((uint64_t *)ctx, 94, (uint64_t)"Validation failed: no DTD found !", 0LL, 0LL);
              *((_DWORD *)ctx + 39) = 0;
            }
          }
        }

        prefix = 0LL;
        uint64_t v8 = xmlSplitQName((xmlParserCtxtPtr)ctx, fullname, &prefix);
        xmlNodePtr v9 = xmlNewDocNodeEatName(*((xmlDocPtr *)ctx + 2), 0LL, v8, 0LL);
        if (v9)
        {
          uint64_t v10 = v9;
          uint64_t v11 = (xmlNode *)*((void *)ctx + 2);
          if (v11->children)
          {
            if (!children) {
              childreuint64_t n = v11->children;
            }
          }

          else
          {
            xmlAddChild(v11, v10);
          }

          *((_DWORD *)ctx + 104) = -1;
          if (*((_DWORD *)ctx + 109))
          {
            uint64_t v13 = *((void *)ctx + 7);
            if (v13)
            {
              int v14 = *(_DWORD *)(v13 + 52);
              if (v14 >= 0xFFFF) {
                LOWORD(v14) = -1;
              }
              v10->line = v14;
            }
          }

          if (nodePush((xmlParserCtxtPtr)ctx, v10) < 0)
          {
            xmlUnlinkNode(v10);
            xmlFreeNode(v10);
LABEL_63:
            if (prefix) {
              xmlFree(prefix);
            }
            return;
          }

          if (children)
          {
            if (children->type == XML_ELEMENT_NODE) {
              xmlAddChild(children, v10);
            }
            else {
              xmlAddSibling(children, v10);
            }
          }

          if (*((_DWORD *)ctx + 13))
          {
LABEL_33:
            if (atts)
            {
              int v15 = (xmlChar *)*atts;
              uint64_t v16 = (xmlChar *)atts[1];
              if (*((_DWORD *)ctx + 13))
              {
                if (v15)
                {
                  int v17 = (xmlChar **)(atts + 3);
                  do
                  {
                    xmlSAX2AttributeInternal((uint64_t *)ctx, v15, v16, 0LL);
                    int v15 = *(v17 - 1);
                    uint64_t v16 = *v17;
                    v17 += 2;
                  }

                  while (v15);
                }
              }

              else if (v15 && v16)
              {
                uint64_t v24 = (xmlChar **)(atts + 3);
                do
                {
                  if (*v15 != 120 || v15[1] != 109 || v15[2] != 108 || v15[3] != 110 || v15[4] != 115) {
                    xmlSAX2AttributeInternal((uint64_t *)ctx, v15, v16, 0LL);
                  }
                  int v15 = *(v24 - 1);
                  uint64_t v16 = *v24;
                  v24 += 2;
                  if (v15) {
                    BOOL v25 = v16 == 0LL;
                  }
                  else {
                    BOOL v25 = 1;
                  }
                }

                while (!v25);
              }
            }

            if (*((_DWORD *)ctx + 39) && *((_DWORD *)ctx + 52) == -1412623820)
            {
              int v26 = xmlValidateDtdFinal((xmlValidCtxtPtr)((char *)ctx + 160), *((xmlDocPtr *)ctx + 2));
              if (v26 <= 0)
              {
                *((_DWORD *)ctx + 38) = 0;
                if (v26 < 0) {
                  *((_DWORD *)ctx + 6) = 0;
                }
              }

              *((_DWORD *)ctx + 38) &= xmlValidateRoot((xmlValidCtxtPtr)((char *)ctx + 160), *((xmlDocPtr *)ctx + 2));
              *((_DWORD *)ctx + 52) = -1412623819;
            }

            goto LABEL_63;
          }

          node = children;
          uint64_t v18 = *((void *)ctx + 2);
          xmlCharEncoding v19 = *(xmlDtd **)(v18 + 80);
          if (v19 || *(void *)(v18 + 88))
          {
            uint64_t v20 = prefix;
            xmlElementPtr DtdQElementDesc = xmlGetDtdQElementDesc(v19, v8, prefix);
            if (DtdQElementDesc)
            {
              xmlElementPtr v22 = DtdQElementDesc;
              int v23 = 1;
              goto LABEL_68;
            }

            xmlElementPtr v27 = xmlGetDtdQElementDesc(*(xmlDtdPtr *)(*((void *)ctx + 2) + 88LL), v8, v20);
            if (v27)
            {
              xmlElementPtr v22 = v27;
              int v23 = 0;
LABEL_68:
              int v28 = atts + 2;
              while (1)
              {
                int v57 = v23;
                attributes = v22->attributes;
                uint64_t v30 = *((void *)ctx + 2);
                if (*(_DWORD *)(v30 + 76) == 1)
                {
                  if (*(void *)(v30 + 88))
                  {
                    if (*((_DWORD *)ctx + 39) && attributes != 0LL)
                    {
                      int v56 = v28;
                      do
                      {
                        if (attributes->defaultValue
                          && xmlGetDtdQAttrDesc( *(xmlDtdPtr *)(*((void *)ctx + 2) + 88LL),  attributes->elem,  attributes->name,  attributes->prefix) == attributes && !xmlGetDtdQAttrDesc( *(xmlDtdPtr *)(*((void *)ctx + 2) + 80LL),  attributes->elem,  attributes->name,  attributes->prefix))
                        {
                          int v32 = attributes->prefix;
                          if (v32)
                          {
                            uint64_t v33 = xmlStrdup(v32);
                            int v34 = xmlStrcat(v33, (const xmlChar *)":");
                            uint64_t v35 = xmlStrcat(v34, attributes->name);
                          }

                          else
                          {
                            uint64_t v35 = xmlStrdup(attributes->name);
                          }

                          uint64_t v36 = v35;
                          if (!v35)
                          {
                            xmlSAX2ErrMemory((uint64_t *)ctx, (uint64_t)"xmlSAX2StartElement");
                            int v28 = v56;
                            break;
                          }

                          if (atts && (uint64_t v37 = *atts) != 0LL)
                          {
                            int v38 = v56;
                            while (!xmlStrEqual(v37, v36))
                            {
                              uint64_t v39 = *v38;
                              v38 += 2;
                              uint64_t v37 = v39;
                              if (!v39) {
                                goto LABEL_88;
                              }
                            }
                          }

                          else
                          {
LABEL_88:
                            xmlErrValid( (uint64_t *)ctx,  538,  (uint64_t)"standalone: attribute %s on %s defaulted from external subset\n",  (uint64_t)v36,  (xmlChar *)attributes->elem);
                          }

                          xmlFree(v36);
                          int v28 = v56;
                        }

                        attributes = attributes->nexth;
                      }

                      while (attributes);
                    }
                  }

                  attributes = v22->attributes;
                }

                if (attributes) {
                  break;
                }
LABEL_115:
                if (v57 == 1)
                {
                  xmlElementPtr v22 = xmlGetDtdQElementDesc(*(xmlDtdPtr *)(*((void *)ctx + 2) + 88LL), v8, v20);
                  int v23 = 0;
                  if (v22) {
                    continue;
                  }
                }

                goto LABEL_120;
              }

              while (1)
              {
                if (!attributes->defaultValue) {
                  goto LABEL_114;
                }
                int v40 = attributes->prefix;
                if (v40)
                {
                  if (xmlStrEqual(v40, (const xmlChar *)"xmlns")) {
                    goto LABEL_99;
                  }
                  if (attributes->prefix) {
                    goto LABEL_98;
                  }
                }

                if (!xmlStrEqual(attributes->name, (const xmlChar *)"xmlns"))
                {
LABEL_98:
                  if ((*((_BYTE *)ctx + 432) & 4) == 0) {
                    goto LABEL_114;
                  }
                }

LABEL_99:
                xmlAttributePtr DtdQAttrDesc = xmlGetDtdQAttrDesc( *(xmlDtdPtr *)(*((void *)ctx + 2) + 80LL),  attributes->elem,  attributes->name,  attributes->prefix);
                if (DtdQAttrDesc == attributes || DtdQAttrDesc == 0LL)
                {
                  __int16 v62 = 0;
                  __int128 v60 = 0u;
                  __int128 v61 = 0u;
                  *(_OWORD *)memory = 0u;
                  uint64_t v43 = xmlBuildQName(attributes->name, attributes->prefix, memory, 50);
                  if (!v43)
                  {
                    xmlSAX2ErrMemory((uint64_t *)ctx, (uint64_t)"xmlSAX2StartElement");
                    break;
                  }

                  uint64_t v44 = v43;
                  if (atts && (int v45 = *atts) != 0LL)
                  {
                    int v46 = v28;
                    while (!xmlStrEqual(v45, v44))
                    {
                      v47 = *v46;
                      v46 += 2;
                      int v45 = v47;
                      if (!v47) {
                        goto LABEL_110;
                      }
                    }
                  }

                  else
                  {
LABEL_110:
                    xmlSAX2AttributeInternal((uint64_t *)ctx, v44, (xmlChar *)attributes->defaultValue, v20);
                  }

                  if (v44 != memory && v44 != attributes->name) {
                    xmlFree(v44);
                  }
                }

                int v40 = 0LL;
                do
                {
                  v7->path[v32 + v40] = v39;
                  int v41 = &v6->path[v40++];
                  uint64_t v39 = v41[1];
                }

                while (v39);
                v32 += v40;
              }
            }

    uint64_t v5 = a2 - 1500;
    return __xmlSimpleError(a1, a2, 0, (uint64_t)IOerr[v5], a3);
  }

  uint64_t v5 = a2 - 1500;
  if (a2 < 1500) {
    uint64_t v5 = 0;
  }
  return __xmlSimpleError(a1, a2, 0, (uint64_t)IOerr[v5], a3);
}

          xmlSchemaFreeValue((xmlSchemaValPtr)v18);
          xmlSchemaFreeValue((xmlSchemaValPtr)v15);
          return 0xFFFFFFFFLL;
        }
      }

      else
      {
        if ((v13 & 1) == 0) {
          goto LABEL_122;
        }
        xmlSchemaDateNormalize((__n128 *)a6, 0.0);
        int v15 = v14;
        uint64_t v16 = _xmlSchemaDateCastYMToDays(v14) + (((unint64_t)*(unsigned int *)(v14 + 24) >> 4) & 0x1F);
        xmlSchemaDateNormalize((__n128 *)a2, -50400.0);
        uint64_t v18 = v17;
        xmlCharEncoding v19 = _xmlSchemaDateCastYMToDays(v17);
        uint64_t v20 = *(unsigned int *)(v18 + 24);
        int v21 = v19 + ((v20 >> 4) & 0x1F);
        if (v21 < v16) {
          goto LABEL_99;
        }
        if (v21 == v16)
        {
          if (*(double *)(v18 + 32)
             + (double)(int)(3600 * ((v20 >> 9) & 0x1F)
                           + 60 * (((v20 >> 14) & 0x3F) + ((__int16)(8 * *(_WORD *)(v18 + 40)) >> 4)))
             - (*(double *)(v15 + 32)
              + (double)(3600 * ((*(_DWORD *)(v15 + 24) >> 9) & 0x1F)
                       + 60 * (((*(_DWORD *)(v15 + 24) >> 14) & 0x3F) + ((__int16)(8 * *(_WORD *)(v15 + 40)) >> 4)))) >= 0.0)
          {
            xmlSchemaDateNormalize((__n128 *)a2, 50400.0);
            int v23 = v22;
            uint64_t v24 = _xmlSchemaDateCastYMToDays(v22);
            BOOL v25 = *(unsigned int *)(v23 + 24);
            int v26 = v24 + ((v25 >> 4) & 0x1F);
            if (v26 <= v16)
            {
              if (v26 == v16)
              {
                xmlElementPtr v27 = 0;
                int v28 = *(double *)(v23 + 32)
                    + (double)(int)(3600 * ((v25 >> 9) & 0x1F)
                                  + 60
                                  * (((v25 >> 14) & 0x3F) + ((__int16)(8 * *(_WORD *)(v23 + 40)) >> 4)));
                uint64_t v29 = (double)(3600 * ((*(_DWORD *)(v15 + 24) >> 9) & 0x1F)
                             + 60
                             * (((*(_DWORD *)(v15 + 24) >> 14) & 0x3F) + ((__int16)(8 * *(_WORD *)(v15 + 40)) >> 4)));
                uint64_t v30 = *(double *)(v15 + 32);
                goto LABEL_164;
              }

              goto LABEL_167;
            }

            goto LABEL_120;
          }

          goto LABEL_99;
        }
      }

      xmlSchemaFreeValue((xmlSchemaValPtr)v18);
      xmlSchemaFreeValue((xmlSchemaValPtr)v15);
      goto LABEL_122;
    case 12:
      if (a5 != 12 || !a2 || !a6) {
        return v8;
      }
      return xmlSchemaCompareDurations(a2, a6);
    case 13:
    case 14:
      if (a5 - 13 > 1 || !a2 || !a6) {
        return v8;
      }
      if (*(_DWORD *)a2 == 13)
      {
        uint64_t v39 = *(float *)(a2 + 16);
      }

      else
      {
        if (*(_DWORD *)a2 != 14) {
          return v8;
        }
        uint64_t v39 = *(double *)(a2 + 16);
      }

      if (*(_DWORD *)a6 == 13)
      {
        __int128 v60 = *(float *)(a6 + 16);
      }

      else
      {
        if (*(_DWORD *)a6 != 14) {
          return v8;
        }
        __int128 v60 = *(double *)(a6 + 16);
      }

      IsNaN = xmlXPathIsNaN(v39);
      __int16 v62 = xmlXPathIsNaN(v60);
      if (IsNaN) {
        return v62 == 0;
      }
      if (v62) {
        return 0xFFFFFFFFLL;
      }
      if (v39 == xmlXPathPINF) {
        return v60 != xmlXPathPINF;
      }
      if (v60 == xmlXPathPINF) {
        return 0xFFFFFFFFLL;
      }
      if (v39 == xmlXPathNINF)
      {
        if (v60 == xmlXPathNINF) {
          return 0LL;
        }
        else {
          return 0xFFFFFFFFLL;
        }
      }

      if (v60 == xmlXPathNINF) {
        return 1LL;
      }
      if (v39 < v60) {
        return 0xFFFFFFFFLL;
      }
      if (v39 > v60) {
        return 1LL;
      }
      uint64_t v12 = v39 != v60;
      return (2 * v12);
    case 15:
      if (a5 == 15 && a2 && a6)
      {
        uint64_t v42 = *(_DWORD *)(a2 + 16);
        if (v42) {
          uint64_t v43 = 1;
        }
        else {
          uint64_t v43 = -1;
        }
        if (v42 == *(_DWORD *)(a6 + 16)) {
          return 0LL;
        }
        else {
          return v43;
        }
      }

      return v8;
    case 19:
    case 25:
    case 27:
      uint64_t v31 = *__xmlGenericError();
      int v32 = *__xmlGenericErrorContext();
      v31( v32,  "Unimplemented block at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemastypes.c",  5034);
      return v8;
    case 21:
    case 28:
      if (!a2 || !a6 || a5 != 28 && a5 != 21) {
        return v8;
      }
      if (xmlStrEqual(*(const xmlChar **)(a2 + 16), *(const xmlChar **)(a6 + 16))
        && xmlStrEqual(*(const xmlChar **)(a2 + 24), *(const xmlChar **)(a6 + 24)))
      {
        return 0LL;
      }

      return 2LL;
    case 43:
      if (a5 != 43 || !a2 || !a6) {
        return v8;
      }
      uint64_t v44 = *(_DWORD *)(a2 + 24);
      int v45 = *(_DWORD *)(a6 + 24);
      if (v44 == v45)
      {
        int v46 = xmlStrcmp(*(const xmlChar **)(a2 + 16), *(const xmlChar **)(a6 + 16));
        uint64_t v8 = v46 > 0;
        if ((v46 & 0x80000000) == 0) {
          return v8;
        }
        return 0xFFFFFFFFLL;
      }

      if (v44 <= v45) {
        return 0xFFFFFFFFLL;
      }
      return 1LL;
    case 44:
      if (a5 == 44 && a2 && a6)
      {
        v47 = *(_DWORD *)(a2 + 24);
        int v48 = *(_DWORD *)(a6 + 24);
        if (v47 == v48)
        {
          v49 = xmlStrcmp(*(const xmlChar **)(a2 + 16), *(const xmlChar **)(a6 + 16));
          if (v49) {
            int v50 = -1;
          }
          else {
            int v50 = 0;
          }
          if (v49 >= 1) {
            return 1LL;
          }
          else {
            return v50;
          }
        }

        else if (v47 > v48)
        {
          return 1LL;
        }

        else
        {
          return 0xFFFFFFFFLL;
        }
      }

      return v8;
    default:
      return v8;
  }

void xmlSAX2AttributeInternal(uint64_t *ctxt, xmlChar *cur, xmlChar *a3, const xmlChar *a4)
{
  prefix = 0LL;
  if (*((_DWORD *)ctxt + 13))
  {
    uint64_t v8 = xmlStrdup(cur);
    prefix = 0LL;
    if (!v8)
    {
LABEL_16:
      xmlSAX2ErrMemory(ctxt, (uint64_t)"xmlSAX2StartElement");
      goto LABEL_104;
    }
  }

  else
  {
    xmlNodePtr v9 = xmlSplitQName((xmlParserCtxtPtr)ctxt, cur, &prefix);
    if (!v9) {
      goto LABEL_16;
    }
    uint64_t v8 = v9;
    if (!*v9)
    {
      if (xmlStrEqual(prefix, (const xmlChar *)"xmlns")) {
        xmlNsErrMsg(ctxt, 35, (uint64_t)"invalid namespace declaration '%s'\n", (uint64_t)cur, 0LL);
      }
      else {
        xmlNsWarnMsg(ctxt, 106, (uint64_t)"Avoid attribute ending with ':' like '%s'\n", (uint64_t)cur, 0LL);
      }
      if (prefix) {
        xmlFree(prefix);
      }
      prefix = 0LL;
      xmlFree(v8);
      uint64_t v8 = xmlStrdup(cur);
      if (!v8) {
        goto LABEL_16;
      }
    }
  }

  if (!a3 && *((_DWORD *)ctxt + 13) && htmlIsBooleanAttr(cur))
  {
    a3 = xmlStrdup(cur);
    uint64_t v10 = a3;
  }

  else
  {
    *((_DWORD *)ctxt + 56) = 1;
    uint64_t v11 = xmlValidCtxtNormalizeAttributeValue( (xmlValidCtxtPtr)(ctxt + 20),  (xmlDocPtr)ctxt[2],  (xmlNodePtr)ctxt[10],  cur,  a3);
    uint64_t v10 = v11;
    if (*((_DWORD *)ctxt + 56) != 1) {
      *((_DWORD *)ctxt + 38) = 0;
    }
    if (v11) {
      a3 = v11;
    }
  }

  int v12 = *((_DWORD *)ctxt + 13);
  if (!v12 && !prefix)
  {
    if (*v8 == 120 && v8[1] == 109 && v8[2] == 108 && v8[3] == 110 && v8[4] == 115 && !v8[5])
    {
      uint64_t v13 = a3;
      if (*((_DWORD *)ctxt + 7)
        || (++*((_DWORD *)ctxt + 98),
            uint64_t v13 = xmlStringDecodeEntities((xmlParserCtxtPtr)ctxt, a3, 1, 0, 0, 0),
            --*((_DWORD *)ctxt + 98),
            v13))
      {
        if (*v13)
        {
          xmlURIPtr v14 = xmlParseURI((const char *)v13);
          if (v14)
          {
            int v15 = v14;
            if (!v14->scheme)
            {
              if (*ctxt)
              {
                warningSAXFunc v34 = *(warningSAXFunc *)(*ctxt + 168);
                if (v34) {
                  v34((void *)ctxt[1], "xmlns: URI %s is not absolute\n", (const char *)v13);
                }
              }
            }

            xmlFreeURI(v15);
          }

          else if (*ctxt)
          {
            warningSAXFunc v33 = *(warningSAXFunc *)(*ctxt + 168);
            if (v33) {
              v33((void *)ctxt[1], "xmlns: %s not a valid URI\n", (const char *)v13);
            }
          }
        }

        uint64_t v16 = xmlNewNs((xmlNodePtr)ctxt[10], v13, 0LL);
        if (v16)
        {
          if (*((_DWORD *)ctxt + 39))
          {
            if (*((_DWORD *)ctxt + 6))
            {
              xmlDocPtr v17 = (xmlDocPtr)ctxt[2];
              if (v17)
              {
                if (v17->intSubset) {
                  *((_DWORD *)ctxt + 38) &= xmlValidateOneNamespace( (xmlValidCtxtPtr)(ctxt + 20),  v17,  (xmlNodePtr)ctxt[10],  a4,  v16,  v13);
                }
              }
            }
          }
        }

        xmlFree(v8);
        if (v10) {
LABEL_132:
        }
          ((void (*)(xmlChar *))xmlFree)(v10);
LABEL_133:
        if (v13 == a3) {
          return;
        }
        goto LABEL_105;
      }

      xmlSAX2ErrMemory(ctxt, (uint64_t)"xmlSAX2StartElement");
      ((void (*)(xmlChar *))xmlFree)(v8);
      goto LABEL_122;
    }

    goto LABEL_70;
  }

  if (v12 || !prefix)
  {
    if (!prefix)
    {
LABEL_70:
      xmlNsPtr v20 = 0LL;
      goto LABEL_72;
    }

_DWORD *xmlNsWarnMsg(_DWORD *result, int a2, uint64_t a3, uint64_t a4, xmlChar *a5)
{
  if (!result[83] || result[68] != -1)
  {
    result[34] = a2;
    return (_DWORD *)__xmlRaiseError(0, 0, 0, (int)result, 0, 3, a2, 1, 0LL, 0, a4, a5, 0LL, 0, 0, a3);
  }

  return result;
}

void xmlSAX2EndElement(void *ctx, const xmlChar *name)
{
  if (ctx)
  {
    uint64_t v3 = (xmlNode *)*((void *)ctx + 10);
    *((_DWORD *)ctx + 104) = -1;
    if (*((_DWORD *)ctx + 39))
    {
      if (*((_DWORD *)ctx + 6))
      {
        uint64_t v4 = (xmlDoc *)*((void *)ctx + 2);
        if (v4)
        {
        }
      }
    }

    nodePop((xmlParserCtxtPtr)ctx);
  }

void xmlSAX2StartElementNs( void *ctx, const xmlChar *localname, const xmlChar *prefix, const xmlChar *URI, int nb_namespaces, const xmlChar **namespaces, int nb_attributes, int nb_defaulted, const xmlChar **attributes)
{
  if (!ctx) {
    return;
  }
  uint64_t v16 = (xmlNode *)*((void *)ctx + 10);
  if (*((_DWORD *)ctx + 39))
  {
    uint64_t v17 = *((void *)ctx + 2);
    if (!*(void *)(v17 + 88))
    {
      xmlElementPtr v22 = *(void **)(v17 + 80);
      if (!v22 || !v22[9] && !v22[10] && !v22[11] && !v22[12])
      {
        xmlErrValid((uint64_t *)ctx, 522, (uint64_t)"Validation failed: no DTD found !", 0LL, 0LL);
        *((_DWORD *)ctx + 39) = 0;
      }
    }
  }

  if (startElementNSNeedsUndeclaredPrefixQuirk_hasEvaluatedQuirk != -1) {
    dispatch_once(&startElementNSNeedsUndeclaredPrefixQuirk_hasEvaluatedQuirk, &__block_literal_global_0);
  }
  xmlURIPtr v18 = 0LL;
  if (!startElementNSNeedsUndeclaredPrefixQuirk_needsQuirk && prefix && !URI)
  {
    if (*((_DWORD *)ctx + 142))
    {
      xmlNsPtr v20 = xmlDictQLookup(*((xmlDictPtr *)ctx + 57), prefix, localname);
      xmlURIPtr v18 = 0LL;
      if (v20) {
        localname = v20;
      }
    }

    else
    {
      xmlURIPtr v18 = xmlBuildQName(localname, prefix, 0LL, 0);
    }
  }

  xmlNodePtr v19 = (xmlNodePtr)*((void *)ctx + 72);
  if (v19)
  {
    *((void *)ctx + 72) = v19->next;
    --*((_DWORD *)ctx + 143);
    *(_OWORD *)&v19->content = 0u;
    *(_OWORD *)&v19->nsDef = 0u;
    *(void *)&v19->line = 0LL;
    *(_OWORD *)&v19->next = 0u;
    *(_OWORD *)&v19->doc = 0u;
    *(_OWORD *)&v19->name = 0u;
    *(_OWORD *)&v19->last = 0u;
    *(_OWORD *)&v19->_private = 0u;
    v19->doc = (_xmlDoc *)*((void *)ctx + 2);
    v19->type = XML_ELEMENT_NODE;
    if (*((_DWORD *)ctx + 142))
    {
      xmlURIPtr v18 = (xmlChar *)localname;
    }

    else if (!v18)
    {
      int v40 = xmlStrdup(localname);
      v19->name = v40;
      if (!v40) {
        goto LABEL_74;
      }
      goto LABEL_26;
    }

    v19->name = v18;
LABEL_26:
    if (__xmlRegisterCallbacks && *__xmlRegisterNodeDefaultValue())
    {
      xmlAttrPtr v23 = __xmlRegisterNodeDefaultValue();
      ((void (*)(xmlNodePtr))*v23)(v19);
    }

    goto LABEL_32;
  }

  if (*((_DWORD *)ctx + 142))
  {
    int v21 = (xmlDoc *)*((void *)ctx + 2);
    xmlURIPtr v18 = (xmlChar *)localname;
LABEL_30:
    xmlNodePtr v24 = xmlNewDocNodeEatName(v21, 0LL, v18, 0LL);
    goto LABEL_31;
  }

  int v21 = (xmlDoc *)*((void *)ctx + 2);
  if (v18) {
    goto LABEL_30;
  }
  xmlNodePtr v24 = xmlNewDocNode(v21, 0LL, localname, 0LL);
LABEL_31:
  xmlNodePtr v19 = v24;
  if (!v24) {
    goto LABEL_74;
  }
LABEL_32:
  int v55 = nb_defaulted;
  if (*((_DWORD *)ctx + 109))
  {
    uint64_t v25 = *((void *)ctx + 7);
    if (v25)
    {
      int v26 = *(_DWORD *)(v25 + 52);
      if (v26 >= 0xFFFF) {
        LOWORD(v26) = -1;
      }
      v19->line = v26;
    }
  }

  xmlDocPtr v27 = prefix;
  xmlNodePtr parent = v16;
  if (!v16) {
    xmlAddChild(*((xmlNodePtr *)ctx + 2), v19);
  }
  eleuint64_t m = v19;
  if (nb_namespaces >= 1)
  {
    int v28 = 0LL;
    p_nsDef = &v19->nsDef;
    uint64_t v30 = namespaces + 1;
    do
    {
      uint64_t v31 = *(v30 - 1);
      int v32 = *v30;
      warningSAXFunc v33 = xmlNewNs(0LL, *v30, v31);
      if (v33)
      {
        warningSAXFunc v34 = v33;
        if (v28) {
          p_next = &v28->next;
        }
        else {
          p_next = p_nsDef;
        }
        *p_next = v33;
        if (URI && v31 == v27) {
          elem->xmlNsPtr ns = v33;
        }
        if (!*((_DWORD *)ctx + 13))
        {
          if (*((_DWORD *)ctx + 39))
          {
            if (*((_DWORD *)ctx + 6))
            {
              xmlDocPtr v36 = (xmlDoc *)*((void *)ctx + 2);
              if (v36)
              {
                if (v36->intSubset) {
                  *((_DWORD *)ctx + 38) &= xmlValidateOneNamespace( (xmlValidCtxtPtr)((char *)ctx + 160),  v36,  elem,  v27,  v33,  v32);
                }
              }
            }
          }
        }
      }

      else
      {
        warningSAXFunc v34 = v28;
      }

      v30 += 2;
      int v28 = v34;
      --nb_namespaces;
    }

    while (nb_namespaces);
  }

  *((_DWORD *)ctx + 104) = -1;
  if (nodePush((xmlParserCtxtPtr)ctx, elem) < 0)
  {
    xmlUnlinkNode(elem);
    xmlFreeNode(elem);
    return;
  }

  if (parent)
  {
    if (parent->type != XML_ELEMENT_NODE)
    {
      xmlAddSibling(parent, elem);
      if (!v55) {
        goto LABEL_65;
      }
      goto LABEL_61;
    }

    xmlAddChild(parent, elem);
  }

  if (!v55) {
    goto LABEL_65;
  }
LABEL_61:
  if ((*((_BYTE *)ctx + 432) & 4) != 0) {
    int v37 = 0;
  }
  else {
    int v37 = v55;
  }
  nb_attributes -= v37;
LABEL_65:
  if (!URI) {
    goto LABEL_84;
  }
  if (elem->ns) {
    goto LABEL_84;
  }
  xmlNsPtr v38 = xmlSearchNs(*((xmlDocPtr *)ctx + 2), parent, v27);
  elem->xmlNsPtr ns = v38;
  if (v38) {
    goto LABEL_84;
  }
  if (xmlStrEqual(v27, (const xmlChar *)"xml"))
  {
    xmlNsPtr ns = xmlSearchNs(*((xmlDocPtr *)ctx + 2), elem, v27);
    elem->xmlNsPtr ns = ns;
  }

  else
  {
    xmlNsPtr ns = elem->ns;
  }

  if (ns) {
    goto LABEL_84;
  }
  if (!xmlNewNs(elem, 0LL, v27))
  {
LABEL_74:
    xmlSAX2ErrMemory((uint64_t *)ctx, (uint64_t)"xmlSAX2StartElementNs");
    return;
  }

  if (v27)
  {
    int v41 = "Namespace prefix %s was not found\n";
    uint64_t v42 = ctx;
    uint64_t v43 = (uint64_t)v27;
  }

  else
  {
    int v41 = "Namespace default prefix was not found\n";
    uint64_t v42 = ctx;
    uint64_t v43 = 0LL;
  }

  xmlNsWarnMsg(v42, 201, (uint64_t)v41, v43, 0LL);
LABEL_84:
  if (nb_attributes >= 1)
  {
    uint64_t v44 = attributes + 4;
    do
    {
      int v45 = *(v44 - 3);
      if (v45 && !*(v44 - 2))
      {
        if (*((_DWORD *)ctx + 142))
        {
          BOOL v51 = xmlDictQLookup(*((xmlDictPtr *)ctx + 57), v45, *(v44 - 4));
          if (v51)
          {
            int v46 = (xmlChar *)v51;
            int v48 = (char *)*(v44 - 1);
            v49 = (xmlChar *)*v44;
            int v50 = ctx;
            v47 = 0LL;
            goto LABEL_89;
          }
        }

        else
        {
          xmlNsPtr v52 = xmlBuildQName(*(v44 - 4), v45, 0LL, 0);
          if (v52)
          {
            xmlNsPtr v53 = v52;
            xmlSAX2AttributeNs((uint64_t)ctx, v52, 0LL, (char *)*(v44 - 1), *v44);
            xmlFree(v53);
            goto LABEL_90;
          }
        }
      }

      int v46 = (xmlChar *)*(v44 - 4);
      v47 = (xmlChar *)*(v44 - 3);
      int v48 = (char *)*(v44 - 1);
      v49 = (xmlChar *)*v44;
      int v50 = ctx;
LABEL_89:
      xmlSAX2AttributeNs((uint64_t)v50, v46, v47, v48, v49);
LABEL_90:
      v44 += 5;
      --nb_attributes;
    }

    while (nb_attributes);
  }

  if (*((_DWORD *)ctx + 39) && *((_DWORD *)ctx + 52) == -1412623820)
  {
    int v54 = xmlValidateDtdFinal((xmlValidCtxtPtr)((char *)ctx + 160), *((xmlDocPtr *)ctx + 2));
    if (v54 <= 0)
    {
      *((_DWORD *)ctx + 38) = 0;
      if (v54 < 0) {
        *((_DWORD *)ctx + 6) = 0;
      }
    }

    *((_DWORD *)ctx + 38) &= xmlValidateRoot((xmlValidCtxtPtr)((char *)ctx + 160), *((xmlDocPtr *)ctx + 2));
    *((_DWORD *)ctx + 52) = -1412623819;
  }

void xmlSAX2AttributeNs(uint64_t a1, xmlChar *a2, xmlChar *nameSpace, char *a4, _BYTE *a5)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  if (nameSpace) {
    uint64_t v10 = xmlSearchNs(*(xmlDocPtr *)(a1 + 16), *(xmlNodePtr *)(a1 + 80), nameSpace);
  }
  else {
    uint64_t v10 = 0LL;
  }
  xmlAttrPtr v11 = *(xmlAttrPtr *)(a1 + 592);
  if (v11)
  {
    *(void *)(a1 + 592) = v11->next;
    --*(_DWORD *)(a1 + 584);
    *(_OWORD *)&v11->_private = 0u;
    *(_OWORD *)&v11->name = 0u;
    *(_OWORD *)&v11->doc = 0u;
    *(_OWORD *)&v11->atype = 0u;
    *(_OWORD *)&v11->last = 0u;
    *(_OWORD *)&v11->next = 0u;
    v11->type = XML_ATTRIBUTE_NODE;
    v11->xmlNodePtr parent = *(_xmlNode **)(a1 + 80);
    v11->doc = *(_xmlDoc **)(a1 + 16);
    v11->xmlNsPtr ns = v10;
    int v12 = a2;
    if (!*(_DWORD *)(a1 + 568)) {
      int v12 = xmlStrdup(a2);
    }
    v11->name = v12;
    uint64_t v13 = *(void *)(a1 + 80);
    xmlURIPtr v14 = *(_xmlAttr **)(v13 + 88);
    if (v14)
    {
      do
      {
        int v15 = v14;
        xmlURIPtr v14 = v14->next;
      }

      while (v14);
      v15->next = v11;
      v11->prev = v15;
    }

    else
    {
      *(void *)(v13 + 88) = v11;
    }

    if (__xmlRegisterCallbacks && *__xmlRegisterNodeDefaultValue())
    {
      xmlURIPtr v18 = __xmlRegisterNodeDefaultValue();
      ((void (*)(xmlAttrPtr))*v18)(v11);
    }
  }

  else
  {
    uint64_t v16 = *(xmlNode **)(a1 + 80);
    if (*(_DWORD *)(a1 + 568)) {
      xmlAttrPtr v17 = xmlNewNsPropEatName(v16, v10, a2, 0LL);
    }
    else {
      xmlAttrPtr v17 = xmlNewNsProp(v16, v10, a2, 0LL);
    }
    xmlAttrPtr v11 = v17;
    if (!v17)
    {
      htmlErrMemory((_DWORD *)a1, (uint64_t)"xmlSAX2AttributeNs");
      return;
    }
  }

  if (*(_DWORD *)(a1 + 28) || *(_DWORD *)(a1 + 52))
  {
    if (!a4) {
      goto LABEL_23;
    }
    goto LABEL_21;
  }

  if (*a5)
  {
LABEL_21:
    xmlNodePtr v19 = xmlSAX2TextNode(a1, a4, (int)a5 - (int)a4);
    v11->childreuint64_t n = (_xmlNode *)v19;
    v11->last = (_xmlNode *)v19;
    if (v19)
    {
      *((void *)v19 + 8) = v11->doc;
      *((void *)v19 + 5) = v11;
    }

    goto LABEL_23;
  }

  xmlNodePtr NodeList = xmlStringLenGetNodeList(*(const xmlDoc **)(a1 + 16), (const xmlChar *)a4, (int)a5 - (int)a4);
  v11->childreuint64_t n = NodeList;
  if (NodeList)
  {
    doc = v11->doc;
    do
    {
      xmlNodePtr v24 = NodeList;
      NodeList->doc = doc;
      NodeList->xmlNodePtr parent = (_xmlNode *)v11;
      xmlNodePtr NodeList = NodeList->next;
    }

    while (NodeList);
    v11->last = v24;
  }

void xmlSAX2EndElementNs(void *ctx, const xmlChar *localname, const xmlChar *prefix, const xmlChar *URI)
{
  if (ctx)
  {
    *((_DWORD *)ctx + 104) = -1;
    if (*((_DWORD *)ctx + 39))
    {
      if (*((_DWORD *)ctx + 6))
      {
        uint64_t v5 = (xmlDoc *)*((void *)ctx + 2);
        if (v5)
        {
          if (v5->intSubset) {
            *((_DWORD *)ctx + 38) &= xmlValidateOneElement( (xmlValidCtxtPtr)((char *)ctx + 160),  v5,  *((xmlNodePtr *)ctx + 10));
          }
        }
      }
    }

    nodePop((xmlParserCtxtPtr)ctx);
  }

void xmlSAX2Reference(void *ctx, const xmlChar *name)
{
  if (ctx)
  {
    uint64_t v3 = (xmlDoc *)*((void *)ctx + 2);
    if (*name == 35) {
      uint64_t v4 = xmlNewCharRef(v3, name);
    }
    else {
      uint64_t v4 = xmlNewReference(v3, name);
    }
    uint64_t v5 = v4;
    if (!xmlAddChild(*((xmlNodePtr *)ctx + 10), v4)) {
      xmlFreeNode(v5);
    }
  }

void xmlSAX2Characters(void *ctx, const xmlChar *ch, int len)
{
}

uint64_t xmlSAX2Text(uint64_t result, char *__src, int len, int a4)
{
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  uint64_t v5 = *(void *)(result + 80);
  if (!v5) {
    return result;
  }
  uint64_t v8 = *(void *)(v5 + 32);
  if (!v8)
  {
    if (a4 == 3)
    {
      xmlEntityPtr result = (uint64_t)xmlSAX2TextNode(result, __src, len);
      if (!result) {
        goto LABEL_46;
      }
    }

    else
    {
      xmlEntityPtr result = (uint64_t)xmlNewCDataBlock(*(xmlDocPtr *)(result + 16), (const xmlChar *)__src, len);
      if (!result) {
        goto LABEL_46;
      }
    }

    int v12 = *(void **)(v4 + 80);
    v12[3] = result;
    v12[4] = result;
    *(void *)(result + 40) = v12;
    *(void *)(result + 64) = v12[8];
    goto LABEL_22;
  }

  if (*(_DWORD *)(v8 + 8) != a4)
  {
    if (a4 != 3)
    {
      xmlEntityPtr result = (uint64_t)xmlNewCDataBlock(*(xmlDocPtr *)(result + 16), (const xmlChar *)__src, len);
      goto LABEL_20;
    }

void xmlSAX2ProcessingInstruction(void *ctx, const xmlChar *target, const xmlChar *data)
{
  if (ctx)
  {
    uint64_t v4 = *((void *)ctx + 10);
    xmlNodePtr v5 = xmlNewDocPI(*((xmlDocPtr *)ctx + 2), target, data);
    if (v5)
    {
      uint64_t v6 = v5;
      if (*((_DWORD *)ctx + 109))
      {
        uint64_t v7 = *((void *)ctx + 7);
        if (v7)
        {
          int v8 = *(_DWORD *)(v7 + 52);
          if (v8 >= 0xFFFF) {
            LOWORD(v8) = -1;
          }
          v5->line = v8;
        }
      }

      int v9 = *((_DWORD *)ctx + 84);
      if (v9 == 2)
      {
        uint64_t v10 = *(xmlNode **)(*((void *)ctx + 2) + 88LL);
      }

      else if (v9 == 1)
      {
        uint64_t v10 = *(xmlNode **)(*((void *)ctx + 2) + 80LL);
      }

      else if (v4)
      {
        uint64_t v10 = (xmlNode *)v4;
        if (*(_DWORD *)(v4 + 8) != 1)
        {
          xmlAddSibling((xmlNodePtr)v4, v6);
          return;
        }
      }

      else
      {
        uint64_t v10 = (xmlNode *)*((void *)ctx + 2);
      }

      xmlAddChild(v10, v6);
    }
  }

void xmlSAX2Comment(void *ctx, const xmlChar *value)
{
  if (ctx)
  {
    uint64_t v3 = *((void *)ctx + 10);
    xmlNodePtr v4 = xmlNewDocComment(*((xmlDocPtr *)ctx + 2), value);
    if (v4)
    {
      xmlNodePtr v5 = v4;
      if (*((_DWORD *)ctx + 109))
      {
        uint64_t v6 = *((void *)ctx + 7);
        if (v6)
        {
          int v7 = *(_DWORD *)(v6 + 52);
          if (v7 >= 0xFFFF) {
            LOWORD(v7) = -1;
          }
          v4->line = v7;
        }
      }

      int v8 = *((_DWORD *)ctx + 84);
      if (v8 == 2)
      {
        int v9 = *(xmlNode **)(*((void *)ctx + 2) + 88LL);
      }

      else if (v8 == 1)
      {
        int v9 = *(xmlNode **)(*((void *)ctx + 2) + 80LL);
      }

      else if (v3)
      {
        int v9 = (xmlNode *)v3;
        if (*(_DWORD *)(v3 + 8) != 1)
        {
          xmlAddSibling((xmlNodePtr)v3, v5);
          return;
        }
      }

      else
      {
        int v9 = (xmlNode *)*((void *)ctx + 2);
      }

      xmlAddChild(v9, v5);
    }
  }

void xmlSAX2CDataBlock(void *ctx, const xmlChar *value, int len)
{
}

int xmlSAXDefaultVersion(int version)
{
  int result = xmlSAX2DefaultVersionValue;
  xmlSAX2DefaultVersionValue = version;
  return result;
}

int xmlSAXVersion(xmlSAXHandler *hdlr, int version)
{
  if (hdlr)
  {
    if (version == 1)
    {
      hdlr->startElement = xmlSAX2StartElement;
      hdlr->endElement = xmlSAX2EndElement;
      unsigned int v2 = 1;
      goto LABEL_7;
    }

    if (version == 2)
    {
      hdlr->startElement = 0LL;
      hdlr->endElement = 0LL;
      hdlr->startElementNs = xmlSAX2StartElementNs;
      hdlr->endElementNs = xmlSAX2EndElementNs;
      hdlr->serror = 0LL;
      unsigned int v2 = -554844497;
LABEL_7:
      int v3 = 0;
      hdlr->initialized = v2;
      hdlr->externalSubset = xmlSAX2ExternalSubset;
      hdlr->internalSubset = xmlSAX2InternalSubset;
      hdlr->isStandalone = xmlSAX2IsStandalone;
      hdlr->hasInternalSubset = xmlSAX2HasInternalSubset;
      hdlr->hasExternalSubset = xmlSAX2HasExternalSubset;
      hdlr->resolveEntity = xmlSAX2ResolveEntity;
      hdlr->getEntity = xmlSAX2GetEntity;
      hdlr->attributeDecl = xmlSAX2AttributeDecl;
      hdlr->elementDecl = xmlSAX2ElementDecl;
      hdlr->entityDecl = xmlSAX2EntityDecl;
      hdlr->notationDecl = xmlSAX2NotationDecl;
      hdlr->unparsedEntityDecl = xmlSAX2UnparsedEntityDecl;
      hdlr->setDocumentLocator = xmlSAX2SetDocumentLocator;
      hdlr->startDocument = xmlSAX2StartDocument;
      hdlr->endDocument = xmlSAX2EndDocument;
      hdlr->reference = xmlSAX2Reference;
      hdlr->characters = xmlSAX2Characters;
      hdlr->getParameterEntity = xmlSAX2GetParameterEntity;
      hdlr->cdataBlocuint64_t k = xmlSAX2CDataBlock;
      hdlr->ignorableWhitespace = xmlSAX2Characters;
      hdlr->processingInstructiouint64_t n = xmlSAX2ProcessingInstruction;
      hdlr->comment = xmlSAX2Comment;
      hdlr->warning = xmlParserWarning;
      hdlr->error = xmlParserError;
      hdlr->fatalError = xmlParserError;
      return v3;
    }
  }

  return -1;
}

void xmlSAX2InitDefaultSAXHandler(xmlSAXHandler *hdlr, int warning)
{
  if (hdlr && !hdlr->initialized)
  {
    xmlSAXVersion(hdlr, xmlSAX2DefaultVersionValue);
    xmlNodePtr v4 = xmlParserWarning;
    if (!warning) {
      xmlNodePtr v4 = 0LL;
    }
    hdlr->warning = v4;
  }

void xmlDefaultSAXHandlerInit(void)
{
  v0 = (xmlSAXHandler *)__xmlDefaultSAXHandler();
  xmlSAXVersion(v0, 1);
}

void xmlSAX2InitHtmlDefaultSAXHandler(xmlSAXHandler *hdlr)
{
  if (hdlr)
  {
    if (!hdlr->initialized)
    {
      hdlr->internalSubset = xmlSAX2InternalSubset;
      hdlr->externalSubset = 0LL;
      *(_OWORD *)&hdlr->isStandalone = 0u;
      *(_OWORD *)&hdlr->hasExternalSubset = 0u;
      hdlr->getEntity = xmlSAX2GetEntity;
      *(_OWORD *)&hdlr->entityDecl = 0u;
      *(_OWORD *)&hdlr->attributeDecl = 0u;
      hdlr->unparsedEntityDecl = 0LL;
      hdlr->setDocumentLocator = xmlSAX2SetDocumentLocator;
      hdlr->startDocument = xmlSAX2StartDocument;
      hdlr->endDocument = xmlSAX2EndDocument;
      hdlr->startElement = xmlSAX2StartElement;
      hdlr->endElement = xmlSAX2EndElement;
      hdlr->reference = 0LL;
      hdlr->characters = xmlSAX2Characters;
      hdlr->getParameterEntity = 0LL;
      hdlr->cdataBlocuint64_t k = xmlSAX2CDataBlock;
      hdlr->ignorableWhitespace = xmlSAX2IgnorableWhitespace;
      hdlr->processingInstructiouint64_t n = xmlSAX2ProcessingInstruction;
      hdlr->comment = xmlSAX2Comment;
      hdlr->warning = xmlParserWarning;
      hdlr->error = xmlParserError;
      hdlr->fatalError = xmlParserError;
      hdlr->initialized = 1;
    }
  }

void htmlDefaultSAXHandlerInit(void)
{
  v0 = (xmlSAXHandler *)__htmlDefaultSAXHandler();
  xmlSAX2InitHtmlDefaultSAXHandler(v0);
}

void xmlSAX2InitDocbDefaultSAXHandler(xmlSAXHandler *hdlr)
{
  if (hdlr)
  {
    if (!hdlr->initialized)
    {
      hdlr->internalSubset = xmlSAX2InternalSubset;
      hdlr->isStandalone = xmlSAX2IsStandalone;
      hdlr->hasInternalSubset = xmlSAX2HasInternalSubset;
      hdlr->hasExternalSubset = xmlSAX2HasExternalSubset;
      hdlr->resolveEntity = xmlSAX2ResolveEntity;
      hdlr->getEntity = xmlSAX2GetEntity;
      hdlr->entityDecl = xmlSAX2EntityDecl;
      *(_OWORD *)&hdlr->notationDecl = 0u;
      *(_OWORD *)&hdlr->elementDecl = 0u;
      hdlr->setDocumentLocator = xmlSAX2SetDocumentLocator;
      hdlr->startDocument = xmlSAX2StartDocument;
      hdlr->endDocument = xmlSAX2EndDocument;
      hdlr->startElement = xmlSAX2StartElement;
      hdlr->endElement = xmlSAX2EndElement;
      hdlr->reference = xmlSAX2Reference;
      hdlr->cdataBlocuint64_t k = 0LL;
      hdlr->externalSubset = 0LL;
      hdlr->characters = xmlSAX2Characters;
      hdlr->ignorableWhitespace = xmlSAX2IgnorableWhitespace;
      hdlr->processingInstructiouint64_t n = 0LL;
      hdlr->comment = xmlSAX2Comment;
      hdlr->warning = xmlParserWarning;
      hdlr->error = xmlParserError;
      hdlr->fatalError = xmlParserError;
      hdlr->getParameterEntity = 0LL;
      hdlr->initialized = 1;
    }
  }

void docbDefaultSAXHandlerInit(void)
{
  v0 = (xmlSAXHandler *)__docbDefaultSAXHandler();
  xmlSAX2InitDocbDefaultSAXHandler(v0);
}

_DWORD *xmlNsErrMsg(_DWORD *result, int a2, uint64_t a3, uint64_t a4, xmlChar *a5)
{
  if (!result[83] || result[68] != -1)
  {
    result[34] = a2;
    return (_DWORD *)__xmlRaiseError(0, 0, 0, (int)result, 0, 3, a2, 2, 0LL, 0, a4, a5, 0LL, 0, 0, a3);
  }

  return result;
}

uint64_t __startElementNSNeedsUndeclaredPrefixQuirk_block_invoke()
{
  uint64_t result = (uint64_t)_dyld_get_image_name(0);
  if (result
    && (uint64_t result = (uint64_t)strrchr((const char *)result, 47)) != 0
    && (uint64_t result = strcmp((const char *)(result + 1), "Microsoft Document Connection"), !(_DWORD)result))
  {
    uint64_t result = dyld_get_program_sdk_version();
    BOOL v1 = result >> 8 < 0xA09;
  }

  else
  {
    BOOL v1 = 0;
  }

  startElementNSNeedsUndeclaredPrefixQuirk_needsQuiruint64_t k = v1;
  return result;
}

char *xmlSAX2TextNode(uint64_t a1, char *__src, int len)
{
  uint64_t v6 = *(char **)(a1 + 576);
  if (v6)
  {
    *(void *)(a1 + 576) = *((void *)v6 + 6);
    --*(_DWORD *)(a1 + 572);
  }

  else
  {
    uint64_t v6 = (char *)xmlMalloc(0x78uLL);
    if (!v6)
    {
      htmlErrMemory((_DWORD *)a1, (uint64_t)"xmlSAX2Characters");
      return v6;
    }
  }

  *((void *)v6 + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
  *((_OWORD *)v6 + 5) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
  *((_OWORD *)v6 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *((_OWORD *)v6 + 2) = 0u;
  *(_OWORD *)uint64_t v6 = 0u;
  if (!*(_DWORD *)(a1 + 568)) {
    goto LABEL_22;
  }
  int v7 = __src[len];
  if (len > 15) {
    goto LABEL_12;
  }
  if ((*(_BYTE *)(a1 + 566) & 1) != 0)
  {
    int v9 = (const xmlChar *)(v6 + 88);
    memcpy(v6 + 88, __src, len);
    v6[len + 88] = 0;
    *((_DWORD *)v6 + 2) = 3;
    *((void *)v6 + 2) = "text";
    goto LABEL_33;
  }

  if (len > 3 || v7 != 34 && v7 != 39 && (v7 != 60 || __src[len + 1] == 33))
  {
LABEL_12:
    unsigned int v8 = *__src;
    if (v8 <= 0x20 && ((1LL << v8) & 0x100000600LL) != 0)
    {
      if (len > 59)
      {
LABEL_22:
        *((_DWORD *)v6 + 2) = 3;
        *((void *)v6 + 2) = "text";
        goto LABEL_23;
      }
    }

    else if (len > 59 || v8 != 13)
    {
      goto LABEL_22;
    }

    if (v7 != 60 || __src[len + 1] == 33) {
      goto LABEL_22;
    }
    if (len >= 2)
    {
      int v11 = (unsigned __int8 *)(__src + 1);
      uint64_t v12 = len - 1LL;
      do
      {
        unsigned int v13 = *v11++;
        uint64_t v14 = (1LL << v13) & 0x100002600LL;
        if (v13 > 0x20 || v14 == 0) {
          goto LABEL_22;
        }
      }

      while (--v12);
    }
  }

  int v9 = xmlDictLookup(*(xmlDictPtr *)(a1 + 456), (const xmlChar *)__src, len);
  *((_DWORD *)v6 + 2) = 3;
  *((void *)v6 + 2) = "text";
  if (!v9)
  {
LABEL_23:
    uint64_t v10 = xmlStrndup((const xmlChar *)__src, len);
    *((void *)v6 + 10) = v10;
    if (!v10)
    {
      xmlSAX2ErrMemory((uint64_t *)a1, (uint64_t)"xmlSAX2TextNode");
      xmlFree(v6);
      return 0LL;
    }

    goto LABEL_34;
  }

xmlChar *xmlSAX2DecodeAttrEntities(xmlParserCtxtPtr ctxt, const xmlChar *a2, unint64_t a3)
{
  xmlNodePtr v4 = a2;
  while ((unint64_t)v4 < a3)
  {
    int v5 = *v4++;
    if (v5 == 38)
    {
      ++ctxt->depth;
      uint64_t result = xmlStringLenDecodeEntities(ctxt, a2, (int)a3 - (int)a2, 1, 0, 0, 0);
      --ctxt->depth;
      return result;
    }
  }

  return 0LL;
}

void xmlSchematronFree(xmlSchematronPtr schema)
{
  if (schema)
  {
    unsigned int v2 = (xmlDoc *)*((void *)schema + 2);
    if (v2 && !*((_DWORD *)schema + 2)) {
      xmlFreeDoc(v2);
    }
    int v3 = (void *)*((void *)schema + 11);
    if (v3) {
      xmlFree(v3);
    }
    xmlNodePtr v4 = (void *)*((void *)schema + 9);
    if (v4)
    {
      do
      {
        int v5 = (void *)*v4;
        uint64_t v6 = (void *)v4[4];
        if (v6)
        {
          do
          {
            int v7 = (void *)*v6;
            unsigned int v8 = (void *)v6[3];
            if (v8) {
              xmlFree(v8);
            }
            int v9 = (xmlXPathCompExpr *)v6[4];
            if (v9) {
              xmlXPathFreeCompExpr(v9);
            }
            uint64_t v10 = (void *)v6[5];
            if (v10) {
              xmlFree(v10);
            }
            xmlFree(v6);
            uint64_t v6 = v7;
          }

          while (v7);
        }

        int v11 = (void *)v4[3];
        if (v11) {
          xmlFree(v11);
        }
        uint64_t v12 = (xmlPattern *)v4[5];
        if (v12) {
          xmlFreePattern(v12);
        }
        unsigned int v13 = (void *)v4[6];
        if (v13) {
          xmlFree(v13);
        }
        xmlFree(v4);
        xmlNodePtr v4 = v5;
      }

      while (v5);
    }

    uint64_t v14 = (void *)*((void *)schema + 8);
    if (v14)
    {
      do
      {
        int v15 = (void *)*v14;
        uint64_t v16 = (void *)v14[2];
        if (v16) {
          xmlFree(v16);
        }
        xmlFree(v14);
        uint64_t v14 = v15;
      }

      while (v15);
    }

    xmlDictFree(*((xmlDictPtr *)schema + 5));
    xmlFree(schema);
  }

xmlSchematronParserCtxtPtr xmlSchematronNewParserCtxt(const char *URL)
{
  if (!URL) {
    return 0LL;
  }
  unsigned int v2 = (xmlSchematronParserCtxt *)xmlMalloc(0x90uLL);
  int v3 = v2;
  if (!v2)
  {
    __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"allocating schema parser context");
    return v3;
  }

  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
  *((_OWORD *)v2 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *(_OWORD *)unsigned int v2 = 0u;
  *(_DWORD *)unsigned int v2 = 1;
  xmlNodePtr v4 = xmlDictCreate();
  *((void *)v3 + 6) = v4;
  *((void *)v3 + 1) = xmlDictLookup(v4, (const xmlChar *)URL, -1);
  *((void *)v3 + 1xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0LL;
  xmlXPathContextPtr v5 = xmlXPathNewContext(0LL);
  *((void *)v3 + 8) = v5;
  if (!v5)
  {
    __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"allocating schema parser XPath context");
    xmlSchematronFreeParserCtxt(v3);
    return 0LL;
  }

  v5->flags = 1;
  return v3;
}

void xmlSchematronFreeParserCtxt(xmlSchematronParserCtxtPtr ctxt)
{
  if (ctxt)
  {
    unsigned int v2 = (xmlDoc *)*((void *)ctxt + 2);
    if (v2 && !*((_DWORD *)ctxt + 6)) {
      xmlFreeDoc(v2);
    }
    int v3 = (xmlXPathContext *)*((void *)ctxt + 8);
    if (v3) {
      xmlXPathFreeContext(v3);
    }
    xmlNodePtr v4 = (void *)*((void *)ctxt + 11);
    if (v4) {
      xmlFree(v4);
    }
    xmlDictFree(*((xmlDictPtr *)ctxt + 6));
    xmlFree(ctxt);
  }

xmlSchematronParserCtxtPtr xmlSchematronNewMemParserCtxt(const char *buffer, int size)
{
  unsigned int v2 = 0LL;
  if (buffer && size >= 1)
  {
    xmlXPathContextPtr v5 = xmlMalloc(0x90uLL);
    unsigned int v2 = v5;
    if (v5)
    {
      v5[7] = 0u;
      v5[8] = 0u;
      v5[5] = 0u;
      v5[6] = 0u;
      v5[3] = 0u;
      v5[4] = 0u;
      v5[1] = 0u;
      v5[2] = 0u;
      _OWORD *v5 = 0u;
      *((void *)v5 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = buffer;
      *((_DWORD *)v5 + 10) = size;
      *((void *)v5 + 6) = xmlDictCreate();
      xmlXPathContextPtr v6 = xmlXPathNewContext(0LL);
      *((void *)v2 + 8) = v6;
      if (!v6)
      {
        __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"allocating schema parser XPath context");
        xmlSchematronFreeParserCtxt((xmlSchematronParserCtxtPtr)v2);
        return 0LL;
      }
    }

    else
    {
      __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"allocating schema parser context");
    }
  }

  return (xmlSchematronParserCtxtPtr)v2;
}

xmlSchematronParserCtxtPtr xmlSchematronNewDocParserCtxt(xmlDocPtr doc)
{
  if (!doc) {
    return 0LL;
  }
  unsigned int v2 = (xmlSchematronParserCtxt *)xmlMalloc(0x90uLL);
  int v3 = v2;
  if (!v2)
  {
    __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"allocating schema parser context");
    return v3;
  }

  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
  *((_OWORD *)v2 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *(_OWORD *)unsigned int v2 = 0u;
  *((void *)v2 + 2) = doc;
  *((void *)v2 + 6) = xmlDictCreate();
  *((_DWORD *)v3 + 6) = 1;
  xmlXPathContextPtr v4 = xmlXPathNewContext(doc);
  *((void *)v3 + 8) = v4;
  if (!v4)
  {
    __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"allocating schema parser XPath context");
    xmlSchematronFreeParserCtxt(v3);
    return 0LL;
  }

  return v3;
}

xmlSchematronPtr xmlSchematronParse(xmlSchematronParserCtxtPtr ctxt)
{
  if (!ctxt) {
    return 0LL;
  }
  *((_DWORD *)ctxt + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0;
  unsigned int v2 = (const char *)*((void *)ctxt + 1);
  if (v2)
  {
    xmlDocPtr File = xmlReadFile(v2, 0LL, 2);
    if (File)
    {
      xmlXPathContextPtr v4 = File;
      int v5 = 0;
LABEL_8:
      int v9 = 1;
      goto LABEL_9;
    }

    uint64_t v17 = (const xmlChar *)*((void *)ctxt + 1);
    int v18 = "xmlSchematronParse: could not load '%s'.\n";
    xmlSchematronParserCtxtPtr v19 = ctxt;
    int v20 = 1757;
LABEL_40:
    xmlSchematronPErr((uint64_t)v19, 0LL, v20, v18, v17);
    return 0LL;
  }

  xmlXPathContextPtr v6 = (const char *)*((void *)ctxt + 4);
  if (v6)
  {
    xmlDocPtr Memory = xmlReadMemory(v6, *((_DWORD *)ctxt + 10), 0LL, 0LL, 2);
    if (Memory)
    {
      xmlXPathContextPtr v4 = Memory;
      Memory->URL = xmlStrdup((const xmlChar *)"in_memory_buffer");
      unsigned int v8 = xmlDictLookup(*((xmlDictPtr *)ctxt + 6), (const xmlChar *)"in_memory_buffer", -1);
      int v5 = 0;
      *((void *)ctxt + 1) = v8;
      goto LABEL_8;
    }

    int v18 = "xmlSchematronParse: could not parse.\n";
    xmlSchematronParserCtxtPtr v19 = ctxt;
    int v20 = 1766;
    goto LABEL_39;
  }

  xmlXPathContextPtr v4 = (xmlDoc *)*((void *)ctxt + 2);
  if (!v4)
  {
    int v18 = "xmlSchematronParse: could not parse.\n";
    xmlSchematronParserCtxtPtr v19 = ctxt;
    int v20 = 1758;
LABEL_39:
    uint64_t v17 = 0LL;
    goto LABEL_40;
  }

  int v9 = 0;
  int v5 = 1;
LABEL_9:
  *((_DWORD *)ctxt + 6) = v5;
  xmlNodePtr RootElement = xmlDocGetRootElement(v4);
  if (!RootElement)
  {
    xmlSchematronPErr((uint64_t)ctxt, (uint64_t)v4, 1759, "The schema has no document element.\n", 0LL);
    unsigned int v13 = 0LL;
    if (!v9) {
      return (xmlSchematronPtr)v13;
    }
    xmlFreeDoc(v4);
    return 0LL;
  }

  uint64_t v11 = (uint64_t)RootElement;
  if (RootElement->type != XML_ELEMENT_NODE
    || !RootElement->ns
    || !xmlStrEqual(RootElement->name, (const xmlChar *)"schema")
    || !xmlStrEqual( *(const xmlChar **)(*(void *)(v11 + 72) + 16LL),  (const xmlChar *)"http://purl.oclc.org/dsdl/schematron")
    && !xmlStrEqual( *(const xmlChar **)(*(void *)(v11 + 72) + 16LL),  (const xmlChar *)"http://www.ascc.net/xml/schematron"))
  {
    xmlSchematronPErr( (uint64_t)ctxt,  v11,  1759,  "The XML document '%s' is not a XML schematron document",  *((const xmlChar **)ctxt + 1));
    unsigned int v13 = 0LL;
    goto LABEL_26;
  }

  uint64_t v12 = xmlMalloc(0x60uLL);
  unsigned int v13 = v12;
  if (!v12)
  {
    ++*((_DWORD *)ctxt + 14);
    __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"allocating schema");
    goto LABEL_26;
  }

  v12[4] = 0u;
  v12[5] = 0u;
  v12[2] = 0u;
  v12[3] = 0u;
  *uint64_t v12 = 0u;
  v12[1] = 0u;
  uint64_t v14 = (xmlDict *)*((void *)ctxt + 6);
  *((void *)v13 + 5) = v14;
  xmlDictReference(v14);
  *((void *)ctxt + 9) = v13;
  uint64_t v15 = *(void *)(v11 + 24);
  if (!v15) {
    goto LABEL_22;
  }
  while (1)
  {
    if (*(_DWORD *)(v15 + 8) == 1)
    {
      uint64_t v16 = *(void *)(v15 + 72);
      if (v16)
      {
        if (xmlStrEqual(*(const xmlChar **)(v16 + 16), (const xmlChar *)"http://purl.oclc.org/dsdl/schematron")
          || xmlStrEqual( *(const xmlChar **)(*(void *)(v15 + 72) + 16LL),  (const xmlChar *)"http://www.ascc.net/xml/schematron"))
        {
          break;
        }
      }
    }

    uint64_t v15 = *(void *)(v15 + 48);
    if (!v15) {
      goto LABEL_22;
    }
  }

  if (*(_DWORD *)(v15 + 8) == 1
    && *(void *)(v15 + 72)
    && xmlStrEqual(*(const xmlChar **)(v15 + 16), (const xmlChar *)"title")
    && (xmlStrEqual( *(const xmlChar **)(*(void *)(v15 + 72) + 16LL),  (const xmlChar *)"http://purl.oclc.org/dsdl/schematron")
     || xmlStrEqual( *(const xmlChar **)(*(void *)(v15 + 72) + 16LL),  (const xmlChar *)"http://www.ascc.net/xml/schematron")))
  {
    Content = xmlNodeGetContent((const xmlNode *)v15);
    if (Content)
    {
      xmlAttrPtr v23 = Content;
      *((void *)v13 + 6) = xmlDictLookup(*((xmlDictPtr *)v13 + 5), Content, -1);
      xmlFree(v23);
    }

    uint64_t v15 = *(void *)(v15 + 48);
    if (!v15) {
      goto LABEL_22;
    }
    while (1)
    {
      if (*(_DWORD *)(v15 + 8) == 1)
      {
        uint64_t v24 = *(void *)(v15 + 72);
        if (v24)
        {
          if (xmlStrEqual(*(const xmlChar **)(v24 + 16), (const xmlChar *)"http://purl.oclc.org/dsdl/schematron")
            || xmlStrEqual( *(const xmlChar **)(*(void *)(v15 + 72) + 16LL),  (const xmlChar *)"http://www.ascc.net/xml/schematron"))
          {
            break;
          }
        }
      }

      uint64_t v15 = *(void *)(v15 + 48);
      if (!v15) {
        goto LABEL_22;
      }
    }
  }

  while (*(_DWORD *)(v15 + 8) == 1)
  {
    if (!*(void *)(v15 + 72)
      || !xmlStrEqual(*(const xmlChar **)(v15 + 16), (const xmlChar *)"ns")
      || !xmlStrEqual( *(const xmlChar **)(*(void *)(v15 + 72) + 16LL),  (const xmlChar *)"http://purl.oclc.org/dsdl/schematron")
      && !xmlStrEqual( *(const xmlChar **)(*(void *)(v15 + 72) + 16LL),  (const xmlChar *)"http://www.ascc.net/xml/schematron"))
    {
      break;
    }

    NoNsProp = xmlGetNoNsProp((const xmlNode *)v15, (const xmlChar *)"prefix");
    int v26 = xmlGetNoNsProp((const xmlNode *)v15, (const xmlChar *)"uri");
    xmlDocPtr v27 = v26;
    if (!v26 || !*v26) {
      xmlSchematronPErr((uint64_t)ctxt, v15, 1759, "ns element has no uri", 0LL);
    }
    if (!NoNsProp || !*NoNsProp) {
      xmlSchematronPErr((uint64_t)ctxt, v15, 1759, "ns element has no prefix", 0LL);
    }
    if (!NoNsProp || !v27)
    {
      if (!v27) {
        goto LABEL_84;
      }
      goto LABEL_83;
    }

    xmlXPathRegisterNs(*((xmlXPathContextPtr *)ctxt + 8), NoNsProp, v27);
    int v28 = (void *)*((void *)ctxt + 11);
    if (v28)
    {
      uint64_t v29 = *((int *)ctxt + 21);
      if (*((_DWORD *)ctxt + 20) + 2 >= (int)v29)
      {
        __int16 v30 = xmlRealloc(v28, 32 * v29);
        if (!v30) {
          goto LABEL_81;
        }
        *((void *)ctxt + 11) = v30;
        *((_DWORD *)ctxt + 21) *= 2;
      }
    }

    else
    {
      *((_DWORD *)ctxt + 21) = 10;
      uint64_t v31 = xmlMalloc(0xA0uLL);
      *((void *)ctxt + 11) = v31;
      if (!v31)
      {
LABEL_81:
        __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"allocating parser namespaces");
        goto LABEL_82;
      }

      *((_DWORD *)ctxt + 20) = 0;
    }

    *(void *)(*((void *)ctxt + 11) + 16LL * *((int *)ctxt + 20)) = xmlDictLookup(*((xmlDictPtr *)ctxt + 6), v27, -1);
    int v32 = xmlDictLookup(*((xmlDictPtr *)ctxt + 6), NoNsProp, -1);
    int v33 = *((_DWORD *)ctxt + 20);
    *(void *)(*((void *)ctxt + 11) + 8LL * ((2 * v33) | 1)) = v32;
    *((_DWORD *)ctxt + 20) = v33 + 1;
    *(void *)(*((void *)ctxt + 11) + 16LL * (v33 + 1)) = 0LL;
    *(void *)(*((void *)ctxt + 11) + 16LL * (v33 + 1) + 8) = 0LL;
LABEL_82:
    ++*((_DWORD *)v13 + 14);
LABEL_83:
    xmlFree(v27);
LABEL_84:
    if (NoNsProp) {
      xmlFree(NoNsProp);
    }
    while (1)
    {
      uint64_t v15 = *(void *)(v15 + 48);
      if (!v15) {
        goto LABEL_22;
      }
      if (*(_DWORD *)(v15 + 8) == 1)
      {
        uint64_t v34 = *(void *)(v15 + 72);
        if (v34)
        {
          if (xmlStrEqual(*(const xmlChar **)(v34 + 16), (const xmlChar *)"http://purl.oclc.org/dsdl/schematron")
            || xmlStrEqual( *(const xmlChar **)(*(void *)(v15 + 72) + 16LL),  (const xmlChar *)"http://www.ascc.net/xml/schematron"))
          {
            break;
          }
        }
      }
    }
  }

LABEL_194:
  if (!v73) {
    goto LABEL_147;
  }
LABEL_161:
  ++v76;
LABEL_149:
  for (uint64_t k = *(void *)(k + 48); k; uint64_t k = *(void *)(k + 48))
  {
    if (*(_DWORD *)(k + 8) == 1)
    {
      uint64_t v59 = *(void *)(k + 72);
      if (v59)
      {
        if (xmlStrEqual(*(const xmlChar **)(v59 + 16), (const xmlChar *)"http://purl.oclc.org/dsdl/schematron")
          || xmlStrEqual( *(const xmlChar **)(*(void *)(k + 72) + 16LL),  (const xmlChar *)"http://www.ascc.net/xml/schematron"))
        {
          goto LABEL_124;
        }
      }
    }
  }

  if (!v76) {
LABEL_110:
  }
    xmlSchematronPErr((uint64_t)ctxt, v15, 1759, "Pattern has no rule element", 0LL);
LABEL_122:
  ++*((_DWORD *)v13 + 15);
LABEL_112:
  while (1)
  {
    uint64_t v15 = *(void *)(v15 + 48);
    if (!v15) {
      break;
    }
    if (*(_DWORD *)(v15 + 8) == 1)
    {
      uint64_t v44 = *(void *)(v15 + 72);
      if (v44)
      {
        if (xmlStrEqual(*(const xmlChar **)(v44 + 16), (const xmlChar *)"http://purl.oclc.org/dsdl/schematron")
          || xmlStrEqual( *(const xmlChar **)(*(void *)(v15 + 72) + 16LL),  (const xmlChar *)"http://www.ascc.net/xml/schematron"))
        {
          goto LABEL_92;
        }
      }
    }
  }

_DWORD *xmlSchematronPErr(uint64_t a1, uint64_t a2, int a3, const char *a4, const xmlChar *a5)
{
  return __xmlRaiseError( *(xmlStructuredErrorFunc *)(a1 + 136),  *(void (**)(void *, const char *, ...))(a1 + 120),  *(void **)(a1 + 112),  (void *)a1,  a2,  0x10u,  a3,  2,  0LL,  0,  a5,  0LL,  0LL,  0,  0,  a4,  (char)a5);
}

void xmlSchematronSetValidStructuredErrors( xmlSchematronValidCtxtPtr ctxt, xmlStructuredErrorFunc serror, void *ctx)
{
  if (ctxt)
  {
    *((void *)ctxt + 12) = 0LL;
    *((void *)ctxt + 1xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = serror;
    *((void *)ctxt + 10) = ctx;
    *((void *)ctxt + 11) = 0LL;
  }

xmlSchematronValidCtxtPtr xmlSchematronNewValidCtxt(xmlSchematronPtr schema, int options)
{
  xmlXPathContextPtr v4 = xmlMalloc(0x70uLL);
  int v5 = v4;
  if (v4)
  {
    *xmlXPathContextPtr v4 = 0u;
    v4[1] = 0u;
    v4[5] = 0u;
    v4[6] = 0u;
    v4[3] = 0u;
    v4[4] = 0u;
    v4[2] = 0u;
    *(_DWORD *)xmlXPathContextPtr v4 = 2;
    *((void *)v4 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = schema;
    xmlXPathContextPtr v6 = xmlXPathNewContext(0LL);
    *((void *)v5 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v6;
    *((_DWORD *)v5 + 1) = options;
    if (v6)
    {
      if (*((int *)schema + 20) >= 1)
      {
        uint64_t v7 = 0LL;
        uint64_t v8 = 0LL;
        do
        {
          uint64_t v9 = *((void *)schema + 11);
          uint64_t v10 = *(const xmlChar **)(v9 + v7);
          if (!v10) {
            break;
          }
          uint64_t v11 = *(const xmlChar **)(v9 + v7 + 8);
          if (!v11) {
            break;
          }
          xmlXPathRegisterNs(*((xmlXPathContextPtr *)v5 + 4), v11, v10);
          ++v8;
          v7 += 16LL;
        }

        while (v8 < *((int *)schema + 20));
      }
    }

    else
    {
      __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"allocating schema parser XPath context");
      xmlSchematronFreeValidCtxt((xmlSchematronValidCtxtPtr)v5);
      return 0LL;
    }
  }

  else
  {
    __xmlSimpleError(17, 2, 0, 0LL, (uint64_t)"allocating validation context");
  }

  return (xmlSchematronValidCtxtPtr)v5;
}

void xmlSchematronFreeValidCtxt(xmlSchematronValidCtxtPtr ctxt)
{
  if (ctxt)
  {
    unsigned int v2 = (xmlXPathContext *)*((void *)ctxt + 4);
    if (v2) {
      xmlXPathFreeContext(v2);
    }
    int v3 = (xmlDict *)*((void *)ctxt + 1);
    if (v3) {
      xmlDictFree(v3);
    }
    xmlFree(ctxt);
  }

int xmlSchematronValidateDoc(xmlSchematronValidCtxtPtr ctxt, xmlDocPtr instance)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (!ctxt) {
    return -1;
  }
  uint64_t v3 = *((void *)ctxt + 3);
  if (!v3) {
    return -1;
  }
  int result = -1;
  if (instance && *(void *)(v3 + 72))
  {
    *((_DWORD *)ctxt + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0;
    xmlNodePtr RootElement = xmlDocGetRootElement(instance);
    if (RootElement)
    {
      Node = RootElement;
      int v8 = *((_DWORD *)ctxt + 1);
      if (!v8 || (v8 & 1) != 0)
      {
        do
        {
          for (uint64_t i = *(void **)(*((void *)ctxt + 3) + 72LL); i; uint64_t i = (void *)*i)
          {
            if (xmlPatternMatch((xmlPatternPtr)i[5], Node) == 1)
            {
              for (uint64_t j = (void *)i[4]; j; uint64_t j = (void *)*j)
                xmlSchematronRunTest((uint64_t)ctxt, (uint64_t)j, instance, Node, i[5]);
            }
          }

          Node = (xmlNode *)xmlSchematronNextNode((uint64_t)Node);
        }

        while (Node);
      }

      else
      {
        for (uint64_t k = *(void *)(*((void *)ctxt + 3) + 64LL); k; uint64_t k = *(void *)k)
        {
          int v10 = *((_DWORD *)ctxt + 1);
          if ((v10 & 9) == 0)
          {
            if ((v10 & 4) != 0)
            {
              xmlGenericErrorFunc v11 = *__xmlGenericError();
              uint64_t v12 = __xmlGenericErrorContext();
              v11( *v12,  "Unimplemented block at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/schematron.c",  1460);
            }

            else
            {
              bzero(__str, 0x3E8uLL);
              if (*(void *)(k + 16))
              {
                snprintf(__str, 0x3E7uLL, "Pattern: %s\n", *(const char **)(k + 16));
                fputs(__str, (FILE *)*MEMORY[0x1895F89D0]);
              }
            }
          }

          unsigned int v13 = Node;
          do
          {
            for (uint64_t m = *(void *)(k + 8); m; uint64_t m = *(void *)(m + 8))
            {
              if (xmlPatternMatch(*(xmlPatternPtr *)(m + 40), v13) == 1)
              {
                for (uint64_t n = *(void **)(m + 32); n; uint64_t n = (void *)*n)
                  xmlSchematronRunTest((uint64_t)ctxt, (uint64_t)n, instance, v13, k);
              }
            }

            unsigned int v13 = (xmlNode *)xmlSchematronNextNode((uint64_t)v13);
          }

          while (v13);
        }
      }

      return *((_DWORD *)ctxt + 4);
    }

    else
    {
      xmlGenericErrorFunc v18 = *__xmlGenericError();
      xmlSchematronParserCtxtPtr v19 = __xmlGenericErrorContext();
      v18( *v19,  "Unimplemented block at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/schematron.c",  1684);
      ++*((_DWORD *)ctxt + 4);
      return 1;
    }
  }

  return result;
}

void xmlSchematronRunTest(uint64_t a1, uint64_t a2, xmlDoc *a3, const xmlNode *a4, uint64_t a5)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  uint64_t v9 = *(xmlXPathContext **)(a1 + 32);
  v9->doc = a3;
  v9->node = (xmlNodePtr)a4;
  xmlXPathObjectPtr v10 = xmlXPathCompiledEval(*(xmlXPathCompExprPtr *)(a2 + 32), v9);
  if (v10)
  {
    xmlGenericErrorFunc v11 = v10;
    switch(v10->type)
    {
      case XPATH_UNDEFINED:
      case XPATH_POINT:
      case XPATH_RANGE:
      case XPATH_LOCATIONSET:
      case XPATH_USERS:
        goto LABEL_3;
      case XPATH_NODESET:
      case XPATH_XSLT_TREE:
        p_nodeNr = &v10->nodesetval->nodeNr;
        if (!p_nodeNr || !*p_nodeNr) {
          goto LABEL_3;
        }
        goto LABEL_19;
      case XPATH_BOOLEAN:
        int BOOLval = v10->BOOLval;
        xmlXPathFreeObject(v10);
        if (!BOOLval) {
          break;
        }
        goto LABEL_20;
      case XPATH_NUMBER:
        goto LABEL_3;
      case XPATH_STRING:
        stringval = v10->stringval;
        if (stringval && *stringval) {
          goto LABEL_19;
        }
LABEL_3:
        xmlXPathFreeObject(v11);
        break;
      default:
LABEL_19:
        xmlXPathFreeObject(v11);
LABEL_20:
        int v12 = *(_DWORD *)(a2 + 8);
        if (v12 == 2) {
          ++*(_DWORD *)(a1 + 16);
        }
        int v15 = 1;
        goto LABEL_23;
    }
  }

  int v12 = *(_DWORD *)(a2 + 8);
  if (v12 != 1)
  {
    int v15 = 2;
LABEL_23:
    uint64_t v14 = (_BYTE *)(a1 + 4);
    int v13 = *(_DWORD *)(a1 + 4);
    if ((v13 & 5) == 1)
    {
      if (v12 == 2) {
        return;
      }
      goto LABEL_27;
    }

uint64_t xmlSchematronNextNode(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    int v3 = *(_DWORD *)(result + 8);
    if (v3 != 17)
    {
      if (v3 != 14) {
        return result;
      }
      uint64_t v1 = result;
    }
  }

  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t result = v1;
  if (!v4) {
    goto LABEL_14;
  }
  while (1)
  {
    uint64_t result = v4;
    int v5 = *(_DWORD *)(v4 + 8);
    if (v5 != 17 && v5 != 14) {
      break;
    }
    uint64_t v4 = *(void *)(v4 + 48);
    if (!v4)
    {
LABEL_14:
      while (1)
      {
        uint64_t result = *(void *)(result + 40);
        if (!result) {
          break;
        }
        if (*(_DWORD *)(result + 8) == 9) {
          return 0LL;
        }
        if (*(void *)(result + 48)) {
          return *(void *)(result + 48);
        }
      }

      return result;
    }
  }

  return result;
}

_OWORD *xmlSchematronAddTest(uint64_t a1, int a2, uint64_t a3, uint64_t a4, xmlChar *str, uint64_t a6)
{
  xmlXPathCompExprPtr v12 = xmlXPathCtxtCompile(*(xmlXPathContextPtr *)(a1 + 64), str);
  if (!v12)
  {
    xmlSchematronPErr(a1, a4, 1759, "Failed to compile test expression %s", str);
    return 0LL;
  }

  xmlXPathCompExprPtr v13 = v12;
  uint64_t result = xmlMalloc(0x30uLL);
  if (!result)
  {
    ++*(_DWORD *)(a1 + 56);
    __xmlSimpleError(16, 2, a4, 0LL, (uint64_t)"allocating schema test");
    return 0LL;
  }

  *uint64_t result = 0u;
  result[1] = 0u;
  result[2] = 0u;
  *((_DWORD *)result + 2) = a2;
  *((void *)result + 2) = a4;
  *((void *)result + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = str;
  *((void *)result + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v13;
  *((void *)result + 5) = a6;
  *(void *)uint64_t result = 0LL;
  int v15 = *(void **)(a3 + 32);
  if (v15)
  {
    do
    {
      uint64_t v16 = v15;
      int v15 = (void *)*v15;
    }

    while (v15);
    *uint64_t v16 = result;
  }

  else
  {
    *(void *)(a3 + 32) = result;
  }

  return result;
}

xmlMutexPtr xmlNewMutex(void)
{
  v0 = (pthread_mutex_t *)malloc(0x40uLL);
  uint64_t v1 = (xmlMutex *)v0;
  if (v0) {
    pthread_mutex_init(v0, 0LL);
  }
  return v1;
}

void xmlFreeMutex(xmlMutexPtr tok)
{
  if (tok)
  {
    pthread_mutex_destroy((pthread_mutex_t *)tok);
    free(tok);
  }

void xmlMutexLock(xmlMutexPtr tok)
{
  if (tok) {
    pthread_mutex_lock((pthread_mutex_t *)tok);
  }
}

void xmlMutexUnlock(xmlMutexPtr tok)
{
  if (tok) {
    pthread_mutex_unlock((pthread_mutex_t *)tok);
  }
}

xmlRMutexPtr xmlNewRMutex(void)
{
  v0 = (pthread_mutex_t *)malloc(0x80uLL);
  uint64_t v1 = v0;
  if (v0)
  {
    pthread_mutex_init(v0, 0LL);
    v1[1].__sig = 0LL;
    pthread_cond_init((pthread_cond_t *)&v1[1].__opaque[8], 0LL);
  }

  return (xmlRMutexPtr)v1;
}

void xmlFreeRMutex(xmlRMutexPtr tok)
{
  if (tok)
  {
    pthread_mutex_destroy((pthread_mutex_t *)tok);
    pthread_cond_destroy((pthread_cond_t *)((char *)tok + 80));
    free(tok);
  }

void xmlRMutexLock(xmlRMutexPtr tok)
{
  if (tok)
  {
    pthread_mutex_lock((pthread_mutex_t *)tok);
    if (*((_DWORD *)tok + 16))
    {
      unsigned int v2 = (_opaque_pthread_t *)*((void *)tok + 9);
      int v3 = pthread_self();
      if (pthread_equal(v2, v3))
      {
        int v4 = *((_DWORD *)tok + 16) + 1;
LABEL_11:
        *((_DWORD *)tok + 16) = v4;
        pthread_mutex_unlock((pthread_mutex_t *)tok);
        return;
      }

      int v6 = *((_DWORD *)tok + 16);
      int v5 = *((_DWORD *)tok + 17);
      *((_DWORD *)tok + 17) = v5 + 1;
      if (v6)
      {
        do
          pthread_cond_wait((pthread_cond_t *)((char *)tok + 80), (pthread_mutex_t *)tok);
        while (*((_DWORD *)tok + 16));
        int v5 = *((_DWORD *)tok + 17) - 1;
      }

      *((_DWORD *)tok + 17) = v5;
    }

    *((void *)tok + 9) = pthread_self();
    int v4 = 1;
    goto LABEL_11;
  }

void xmlRMutexUnlock(xmlRMutexPtr tok)
{
  if (tok)
  {
    pthread_mutex_lock((pthread_mutex_t *)tok);
    int v2 = *((_DWORD *)tok + 16) - 1;
    *((_DWORD *)tok + 16) = v2;
    if (!v2)
    {
      if (*((_DWORD *)tok + 17)) {
        pthread_cond_signal((pthread_cond_t *)((char *)tok + 80));
      }
      *((void *)tok + 9) = 0LL;
    }

    pthread_mutex_unlock((pthread_mutex_t *)tok);
  }

uint64_t __xmlGlobalInitMutexLock()
{
  return pthread_mutex_lock(&global_init_lock);
}

uint64_t __xmlGlobalInitMutexUnlock()
{
  return pthread_mutex_unlock(&global_init_lock);
}

xmlGlobalStatePtr xmlGetGlobalState(void)
{
  v0 = (xmlGlobalState *)pthread_getspecific(globalkey);
  if (!v0)
  {
    uint64_t v1 = (xmlGlobalState *)malloc(0x3C8uLL);
    if (v1)
    {
      v0 = v1;
      bzero(v1, 0x3C8uLL);
      xmlInitializeGlobalState(v0);
      pthread_setspecific(globalkey, v0);
    }

    else
    {
      xmlGenericErrorFunc v2 = *__xmlGenericError();
      int v3 = __xmlGenericErrorContext();
      v2(*v3, "xmlGetGlobalState: out of memory\n");
      return 0LL;
    }
  }

  return v0;
}

BOOL xmlOnceInit()
{
  return __xmlInitializeDict();
}

int xmlGetThreadId(void)
{
  return pthread_self();
}

int xmlIsMainThread(void)
{
  return pthread_main_np() == 1;
}

void xmlFreeGlobalState(uint64_t a1)
{
}

xmlChar *__cdecl xmlBuildQName(const xmlChar *ncname, const xmlChar *prefix, xmlChar *memory, int len)
{
  int v4 = ncname;
  if (ncname && prefix)
  {
    int v8 = strlen((const char *)ncname);
    int v9 = strlen((const char *)prefix);
    int v10 = v9;
    if (memory && v8 + v9 + 2 <= len)
    {
      unint64_t v13 = (unint64_t)(v9 + v8) << 32;
    }

    else
    {
      uint64_t v11 = (v9 + v8);
      xmlXPathCompExprPtr v12 = (xmlChar *)xmlMallocAtomic(((v11 << 32) + 0x200000000LL) >> 32);
      if (!v12)
      {
        __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"building QName");
        return 0LL;
      }

      memory = v12;
      unint64_t v13 = v11 << 32;
    }

    memcpy(memory, prefix, v10);
    memory[v10] = 58;
    memcpy(&memory[v10 + 1], v4, v8);
    memory[(uint64_t)(v13 + 0x100000000LL) >> 32] = 0;
    return memory;
  }

  return (xmlChar *)v4;
}

xmlChar *__cdecl xmlSplitQName2(const xmlChar *name, xmlChar **prefix)
{
  if (!prefix) {
    return 0LL;
  }
  const xmlChar *prefix = 0LL;
  if (!name) {
    return 0LL;
  }
  int v4 = *name;
  if (v4 == 58) {
    return 0LL;
  }
  uint64_t v6 = 1LL;
  if (!*name) {
    return 0LL;
  }
  while (v4 != 58)
  {
    int v4 = name[v6++];
    if (!v4) {
      return 0LL;
    }
  }

  uint64_t v7 = xmlStrndup(name, (int)v6 - 1);
  const xmlChar *prefix = v7;
  if (!v7)
  {
    __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"QName split");
    return 0LL;
  }

  uint64_t result = xmlStrdup(&name[v6]);
  if (!result)
  {
    __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"QName split");
    uint64_t result = *prefix;
    if (*prefix)
    {
      xmlFree(result);
      uint64_t result = 0LL;
      const xmlChar *prefix = 0LL;
    }
  }

  return result;
}

const xmlChar *__cdecl xmlSplitQName3(const xmlChar *name, int *len)
{
  xmlGenericErrorFunc v2 = 0LL;
  if (name && len)
  {
    int v3 = *name;
    if (v3 == 58) {
      return 0LL;
    }
    uint64_t v4 = 1LL;
    if (!*name)
    {
      return 0LL;
    }

    else
    {
      while (v3 != 58)
      {
        int v3 = name[v4++];
        if (!v3) {
          return 0LL;
        }
      }

      *leuint64_t n = v4 - 1;
      return &name[v4];
    }
  }

  return v2;
}

int xmlValidateNCName(const xmlChar *value, int space)
{
  if (!value) {
    return -1;
  }
  int v3 = value;
  if (space)
  {
    for (uint64_t i = value; ; ++i)
    {
      unsigned int v5 = *i;
      if (v5 > 0x20 || ((1LL << v5) & 0x100002600LL) == 0) {
        break;
      }
    }
  }

  else
  {
    unsigned int v5 = *value;
    uint64_t i = value;
  }

  leuint64_t n = 0;
  if (v5 - 97 < 0x1A || v5 == 95 || v5 - 65 <= 0x19)
  {
    do
    {
      int v8 = i;
      unsigned int v10 = *++i;
      unsigned int v9 = v10;
      unsigned int v11 = (v10 & 0xFFFFFFDF) - 65;
    }

    while (v10 - 48 < 0xA
         || v11 < 0x1A
         || v9 - 45 <= 0x32 && ((1LL << (v9 - 45)) & 0x4000000000003LL) != 0);
    if (space)
    {
      uint64_t v14 = 2LL;
      while (v9 <= 0x20 && ((1LL << v9) & 0x100002600LL) != 0)
        unsigned int v9 = v8[v14++];
    }

    if (!v9) {
      return 0;
    }
  }

  int v15 = xmlStringCurrentChar(0LL, value, &len);
  signed int v16 = v15;
  if (space)
  {
    if (v15 <= 255)
    {
      while (v16 <= 0x20 && ((1LL << v16) & 0x100002600LL) != 0)
      {
        v3 += len;
        signed int v16 = xmlStringCurrentChar(0LL, v3, &len);
        if (v16 >= 256) {
          goto LABEL_44;
        }
      }

      goto LABEL_38;
    }
  }

  else if (v15 < 256)
  {
LABEL_38:
    if ((v16 - 192) < 0x17
      || (v16 & 0xFFFFFFDF) - 65 < 0x1A
      || v16 > 247
      || (v16 - 216) < 0x1F
      || v16 == 95)
    {
      goto LABEL_55;
    }

    return 1;
  }

int xmlValidateQName(const xmlChar *value, int space)
{
  if (!value) {
    return -1;
  }
  int v3 = value;
  if (space)
  {
    for (uint64_t i = value; ; ++i)
    {
      unsigned int v5 = *i;
      if (v5 > 0x20 || ((1LL << v5) & 0x100002600LL) == 0) {
        break;
      }
    }
  }

  else
  {
    unsigned int v5 = *value;
    uint64_t i = value;
  }

  leuint64_t n = 0;
  if (v5 - 97 < 0x1A || v5 == 95 || v5 - 65 <= 0x19)
  {
    do
    {
      unsigned int v9 = *++i;
      unsigned int v8 = v9;
      unsigned int v10 = (v9 & 0xFFFFFFDF) - 65;
      BOOL v11 = v9 - 48 >= 0xA && v10 >= 0x1A;
    }

    while (!v11 || v8 - 45 < 2 || v8 == 95);
    if (v8 != 58)
    {
LABEL_34:
      if (space)
      {
        int v15 = (unsigned __int8 *)(i + 1);
        while (v8 <= 0x20 && ((1LL << v8) & 0x100002600LL) != 0)
        {
          unsigned int v16 = *v15++;
          unsigned int v8 = v16;
        }
      }

      if (!v8) {
        return 0;
      }
      goto LABEL_40;
    }

    int v12 = i[1];
    if ((v12 - 97) < 0x1A || v12 == 95 || (v12 - 65) <= 0x19)
    {
      for (i += 2; ; ++i)
      {
        unsigned int v8 = *i;
        if (v8 - 48 >= 0xA
          && (v8 & 0xFFFFFFDF) - 65 >= 0x1A
          && (v8 - 45 > 0x32 || ((1LL << (v8 - 45)) & 0x4000000000003LL) == 0))
        {
          break;
        }
      }

      goto LABEL_34;
    }
  }

int xmlValidateName(const xmlChar *value, int space)
{
  if (!value) {
    return -1;
  }
  int v3 = value;
  if (space)
  {
    for (uint64_t i = value; ; ++i)
    {
      unsigned int v5 = *i;
      if (v5 > 0x20 || ((1LL << v5) & 0x100002600LL) == 0) {
        break;
      }
    }
  }

  else
  {
    unsigned int v5 = *value;
    uint64_t i = value;
  }

  leuint64_t n = 0;
  if ((v5 & 0xFFFFFFDF) - 65 < 0x1A || v5 == 95 || v5 == 58)
  {
    do
    {
      unsigned int v8 = i;
      unsigned int v10 = *++i;
      unsigned int v9 = v10;
      unsigned int v11 = (v10 & 0xFFFFFFDF) - 65;
    }

    while (v10 - 48 < 0xA
         || v11 < 0x1A
         || v9 - 45 <= 0x32 && ((1LL << (v9 - 45)) & 0x4000000002003LL) != 0);
    if (space)
    {
      uint64_t v14 = 2LL;
      while (v9 <= 0x20 && ((1LL << v9) & 0x100002600LL) != 0)
        unsigned int v9 = v8[v14++];
    }

    if (!v9) {
      return 0;
    }
  }

  int v15 = xmlStringCurrentChar(0LL, value, &len);
  signed int v16 = v15;
  if (space)
  {
    if (v15 <= 255)
    {
      while (v16 <= 0x20 && ((1LL << v16) & 0x100002600LL) != 0)
      {
        v3 += len;
        signed int v16 = xmlStringCurrentChar(0LL, v3, &len);
        if (v16 >= 256) {
          goto LABEL_45;
        }
      }

      goto LABEL_38;
    }
  }

  else if (v15 < 256)
  {
LABEL_38:
    if ((v16 - 192) < 0x17
      || (v16 & 0xFFFFFFDF) - 65 < 0x1A
      || v16 > 247
      || (v16 - 216) < 0x1F
      || v16 == 95
      || v16 == 58)
    {
      goto LABEL_56;
    }

    return 1;
  }

int xmlValidateNMToken(const xmlChar *value, int space)
{
  if (!value) {
    return -1;
  }
  int v3 = value;
  if (space)
  {
    for (uint64_t i = value; ; ++i)
    {
      unsigned int v5 = *i;
      if (v5 > 0x20 || ((1LL << v5) & 0x100002600LL) == 0) {
        break;
      }
    }
  }

  else
  {
    unsigned int v5 = *value;
    uint64_t i = value;
  }

  leuint64_t n = 0;
  BOOL v8 = v5 - 48 >= 0xA && (v5 & 0xFFFFFFDF) - 65 >= 0x1A;
  if (!v8
    || ((v9 = v5 - 45, v10 = v9 > 0x32, v11 = (1LL << v9) & 0x4000000002003LL, !v10) ? (BOOL v12 = v11 == 0) : (BOOL v12 = 1), !v12))
  {
    do
    {
      unint64_t v13 = i;
      unsigned int v15 = *++i;
      unsigned int v14 = v15;
      unsigned int v16 = (v15 & 0xFFFFFFDF) - 65;
    }

    while (v15 - 48 < 0xA
         || v16 < 0x1A
         || v14 - 45 <= 0x32 && ((1LL << (v14 - 45)) & 0x4000000002003LL) != 0);
    if (space)
    {
      uint64_t v19 = 2LL;
      while (v14 <= 0x20 && ((1LL << v14) & 0x100002600LL) != 0)
        unsigned int v14 = v13[v19++];
    }

    if (!v14) {
      return 0;
    }
  }

  int v20 = xmlStringCurrentChar(0LL, value, &len);
  signed int v21 = v20;
  if (space)
  {
    if (v20 <= 255)
    {
      while (v21 <= 0x20 && ((1LL << v21) & 0x100002600LL) != 0)
      {
        v3 += len;
        signed int v21 = xmlStringCurrentChar(0LL, v3, &len);
        if (v21 >= 256) {
          goto LABEL_50;
        }
      }

      goto LABEL_44;
    }
  }

  else if (v20 < 256)
  {
LABEL_44:
    if ((v21 - 192) < 0x17
      || (v21 & 0xFFFFFFDF) - 65 < 0x1A
      || v21 > 247
      || (v21 - 216) < 0x1F
      || (v21 - 48) < 0xA)
    {
      goto LABEL_60;
    }

    char v22 = 1;
    goto LABEL_102;
  }

void xmlSetBufferAllocationScheme(xmlBufferAllocationScheme scheme)
{
  if (scheme <= XML_BUFFER_ALLOC_HYBRID && ((1 << scheme) & 0x13) != 0) {
    *__xmlBufferAllocScheme() = scheme;
  }
}

xmlBufferAllocationScheme xmlGetBufferAllocationScheme(void)
{
  return *__xmlBufferAllocScheme();
}

xmlNsPtr xmlNewNs(xmlNodePtr node, const xmlChar *href, const xmlChar *prefix)
{
  if (node && node->type != XML_ELEMENT_NODE
    || prefix
    && xmlStrEqual(prefix, (const xmlChar *)"xml")
    && xmlStrEqual(href, (const xmlChar *)"http://www.w3.org/XML/1998/namespace"))
  {
    return 0LL;
  }

  uint64_t v6 = (xmlNs *)xmlMalloc(0x30uLL);
  uint64_t v7 = v6;
  if (!v6)
  {
    __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"building namespace");
    return v7;
  }

  *(_OWORD *)&v6->href = 0u;
  *(_OWORD *)&v6->_private = 0u;
  *(_OWORD *)&v6->next = 0u;
  v6->type = XML_NAMESPACE_DECL;
  if (href) {
    v6->href = xmlStrdup(href);
  }
  if (prefix) {
    v7->prefix = xmlStrdup(prefix);
  }
  if (node)
  {
    nsDef = node->nsDef;
    if (!nsDef)
    {
      node->nsDef = v7;
      return v7;
    }

    unsigned int v9 = nsDef->prefix;
    BOOL v10 = v7->prefix;
    if ((unint64_t)v9 | (unint64_t)v10 && !xmlStrEqual(v9, v10))
    {
      do
      {
        if (!nsDef->next)
        {
          nsDef->next = v7;
          return v7;
        }

        unint64_t v13 = nsDef->next->prefix;
        unsigned int v14 = v7->prefix;
        nsDef = nsDef->next;
      }

      while (!xmlStrEqual(v13, v14));
      unsigned int v16 = (xmlChar *)v7->href;
      if (v16) {
        xmlFree(v16);
      }
      BOOL v17 = (xmlChar *)v7->prefix;
      if (v17) {
        xmlFree(v17);
      }
    }

    else
    {
      uint64_t v11 = (xmlChar *)v7->href;
      if (v11) {
        xmlFree(v11);
      }
      BOOL v12 = (xmlChar *)v7->prefix;
      if (v12) {
        xmlFree(v12);
      }
    }

    ((void (*)(xmlNs *))xmlFree)(v7);
    return 0LL;
  }

  return v7;
}

void xmlFreeNs(xmlNsPtr cur)
{
  if (cur)
  {
    href = (xmlChar *)cur->href;
    if (href) {
      xmlFree(href);
    }
    prefix = (xmlChar *)cur->prefix;
    if (prefix) {
      xmlFree(prefix);
    }
    xmlFree(cur);
  }

void xmlSetNs(xmlNodePtr node, xmlNsPtr ns)
{
  if (node)
  {
    if (node->type - 1 <= 1) {
      node->xmlNsPtr ns = ns;
    }
  }

void xmlFreeNsList(xmlNsPtr cur)
{
  if (cur)
  {
    xmlNsPtr v1 = cur;
    do
    {
      next = v1->next;
      href = (xmlChar *)v1->href;
      if (href) {
        xmlFree(href);
      }
      prefix = (xmlChar *)v1->prefix;
      if (prefix) {
        xmlFree(prefix);
      }
      xmlFree(v1);
      xmlNsPtr v1 = next;
    }

    while (next);
  }

xmlDtdPtr xmlNewDtd(xmlDocPtr doc, const xmlChar *name, const xmlChar *ExternalID, const xmlChar *SystemID)
{
  if (doc && doc->extSubset) {
    return 0LL;
  }
  unsigned int v9 = (xmlDtd *)xmlMalloc(0x80uLL);
  BOOL v8 = v9;
  if (v9)
  {
    *(_OWORD *)&v9->entities = 0u;
    *(_OWORD *)&v9->SystemID = 0u;
    *(_OWORD *)&v9->doc = 0u;
    *(_OWORD *)&v9->elements = 0u;
    *(_OWORD *)&v9->last = 0u;
    *(_OWORD *)&v9->next = 0u;
    *(_OWORD *)&v9->_private = 0u;
    *(_OWORD *)&v9->name = 0u;
    v9->type = XML_DTD_NODE;
    if (name) {
      v9->name = xmlStrdup(name);
    }
    if (ExternalID) {
      v8->ExternalID = xmlStrdup(ExternalID);
    }
    if (SystemID) {
      v8->SystemID = xmlStrdup(SystemID);
    }
    if (doc) {
      doc->extSubset = v8;
    }
    v8->doc = doc;
    if (__xmlRegisterCallbacks && *__xmlRegisterNodeDefaultValue())
    {
      BOOL v10 = __xmlRegisterNodeDefaultValue();
      ((void (*)(xmlDtd *))*v10)(v8);
    }
  }

  else
  {
    __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"building DTD");
  }

  return v8;
}

xmlDtdPtr xmlGetIntSubset(xmlDtdPtr doc)
{
  if (doc)
  {
    xmlDtdPtr v1 = doc;
    doc = (xmlDtdPtr)doc->children;
    if (doc)
    {
      while (doc->type != XML_DTD_NODE)
      {
        doc = (xmlDtdPtr)doc->next;
        if (!doc) {
          return (xmlDtdPtr)v1->elements;
        }
      }
    }

    else
    {
      return (xmlDtdPtr)v1->elements;
    }
  }

  return doc;
}

xmlDtdPtr xmlCreateIntSubset( xmlDocPtr doc, const xmlChar *name, const xmlChar *ExternalID, const xmlChar *SystemID)
{
  if (doc)
  {
    childreuint64_t n = doc->children;
    if (children)
    {
      while (children->type != XML_DTD_NODE)
      {
        childreuint64_t n = children->next;
        if (!children) {
          goto LABEL_5;
        }
      }

      return 0LL;
    }

void xmlFreeDtd(xmlDtdPtr cur)
{
  if (!cur) {
    return;
  }
  doc = cur->doc;
  if (doc) {
    dict = doc->dict;
  }
  else {
    dict = 0LL;
  }
  if (__xmlRegisterCallbacks && *__xmlDeregisterNodeDefaultValue())
  {
    uint64_t v4 = __xmlDeregisterNodeDefaultValue();
    ((void (*)(xmlDtdPtr))*v4)(cur);
  }

  childreuint64_t n = cur->children;
  if (children)
  {
    do
    {
      next = children->next;
      unsigned int type = children->type;
      BOOL v8 = type > 0x11;
      int v9 = (1 << type) & 0x39000;
      if (v8 || v9 == 0)
      {
        xmlUnlinkNode(children);
        xmlFreeNode(children);
      }

      childreuint64_t n = next;
    }

    while (next);
  }

  name = (xmlChar *)cur->name;
  if (name)
  {
    if (dict)
    {
      if (xmlDictOwns(dict, name)) {
        goto LABEL_22;
      }
      name = (xmlChar *)cur->name;
    }

    xmlFree(name);
  }

void xmlUnlinkNode(xmlNodePtr cur)
{
  if (!cur) {
    return;
  }
  xmlElementType type = cur->type;
  switch(type)
  {
    case XML_NAMESPACE_DECL:
      return;
    case XML_ENTITY_DECL:
      doc = cur->doc;
      if (doc)
      {
        intSubset = doc->intSubset;
        if (intSubset)
        {
        }

        extSubset = doc->extSubset;
        if (extSubset)
        {
          if (xmlHashLookup((xmlHashTablePtr)extSubset->entities, cur->name) == cur) {
            xmlHashRemoveEntry((xmlHashTablePtr)doc->extSubset->entities, cur->name, 0LL);
          }
          if (xmlHashLookup((xmlHashTablePtr)doc->extSubset->pentities, cur->name) == cur) {
            xmlHashRemoveEntry((xmlHashTablePtr)doc->extSubset->pentities, cur->name, 0LL);
          }
        }
      }

      break;
    case XML_DTD_NODE:
      int v3 = cur->doc;
      if (v3)
      {
        if ((xmlNodePtr)v3->extSubset == cur) {
          v3->extSubset = 0LL;
        }
      }

      break;
  }

  xmlNodePtr parent = cur->parent;
  if (parent)
  {
    if (cur->type == XML_ATTRIBUTE_NODE)
    {
      properties = (xmlNode *)parent->properties;
      p_properties = &parent->properties;
      if (properties != cur)
      {
LABEL_30:
        cur->xmlNodePtr parent = 0LL;
        goto LABEL_31;
      }

      p_next = &cur->next;
    }

    else
    {
      if (parent->children == cur) {
        parent->childreuint64_t n = cur->next;
      }
      last = parent->last;
      p_properties = &parent->last;
      if (last != cur) {
        goto LABEL_30;
      }
      p_next = &cur->prev;
    }

    void *p_properties = *p_next;
    goto LABEL_30;
  }

void xmlFreeNode(xmlNodePtr cur)
{
  if (cur)
  {
    xmlElementType type = cur->type;
    switch(type)
    {
      case XML_ATTRIBUTE_NODE:
        xmlFreeProp((xmlAttrPtr)cur);
        return;
      case XML_NAMESPACE_DECL:
        name = (xmlChar *)cur->name;
        if (name) {
          xmlFree(name);
        }
        childreuint64_t n = cur->children;
        if (children) {
          xmlFree(children);
        }
        xmlFreeFunc v5 = xmlFree;
        goto LABEL_67;
      case XML_DTD_NODE:
        xmlFreeDtd((xmlDtdPtr)cur);
        return;
    }

    if (__xmlRegisterCallbacks && *__xmlDeregisterNodeDefaultValue())
    {
      uint64_t v6 = __xmlDeregisterNodeDefaultValue();
      ((void (*)(xmlNodePtr))*v6)(cur);
    }

    doc = cur->doc;
    if (doc) {
      dict = doc->dict;
    }
    else {
      dict = 0LL;
    }
    xmlElementType v9 = cur->type;
    if (v9 != XML_ENTITY_DECL)
    {
LABEL_31:
      BOOL v12 = cur->children;
      if (v12)
      {
        if (v9 == XML_ENTITY_REF_NODE)
        {
LABEL_40:
          content = cur->content;
          if (v9 - 19 >= 2 && v9 != XML_ENTITY_REF_NODE && content != 0LL && content != (xmlChar *)&cur->properties)
          {
            if (dict)
            {
              if (xmlDictOwns(dict, content)) {
                goto LABEL_54;
              }
              content = cur->content;
            }

            xmlFree(content);
          }

xmlDocPtr xmlNewDoc(const xmlChar *version)
{
  xmlGenericErrorFunc v2 = (xmlDoc *)xmlMalloc(0xB0uLL);
  int v3 = v2;
  if (v2)
  {
    *(_OWORD *)&v2->charset = 0u;
    *(_OWORD *)&v2->psvuint64_t i = 0u;
    if (version) {
      uint64_t v4 = version;
    }
    else {
      uint64_t v4 = (const xmlChar *)"1.0";
    }
    *(_OWORD *)&v3->encoding = 0uLL;
    *(_OWORD *)&v3->refs = 0uLL;
    *(_OWORD *)&v3->intSubset = 0uLL;
    *(_OWORD *)&v3->oldNs = 0uLL;
    *(_OWORD *)&v3->next = 0uLL;
    *(_OWORD *)&v3->doc = 0uLL;
    *(_OWORD *)&v3->name = 0uLL;
    *(_OWORD *)&v3->last = 0uLL;
    *(_OWORD *)&v3->_private = 0uLL;
    v3->xmlElementType type = XML_DOCUMENT_NODE;
    xmlFreeFunc v5 = xmlStrdup(v4);
    v3->versiouint64_t n = v5;
    if (v5)
    {
      *(void *)&v3->compressiouint64_t n = -1LL;
      v3->doc = v3;
      *(void *)&v3->parseFlags = 0x2000000000LL;
      v3->charset = 1;
      if (__xmlRegisterCallbacks && *__xmlRegisterNodeDefaultValue())
      {
        uint64_t v6 = __xmlRegisterNodeDefaultValue();
        ((void (*)(xmlDoc *))*v6)(v3);
      }
    }

    else
    {
      __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"building doc");
      xmlFree(v3);
      return 0LL;
    }
  }

  else
  {
    __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"building doc");
  }

  return v3;
}

void xmlFreeDoc(xmlDocPtr cur)
{
  if (cur)
  {
    dict = cur->dict;
    if (__xmlRegisterCallbacks && *__xmlDeregisterNodeDefaultValue())
    {
      int v3 = __xmlDeregisterNodeDefaultValue();
      ((void (*)(xmlDocPtr))*v3)(cur);
    }

    ids = (xmlIDTable *)cur->ids;
    if (ids) {
      xmlFreeIDTable(ids);
    }
    cur->ids = 0LL;
    refs = (xmlRefTable *)cur->refs;
    if (refs) {
      xmlFreeRefTable(refs);
    }
    cur->refs = 0LL;
    intSubset = cur->intSubset;
    extSubset = cur->extSubset;
    if (extSubset && intSubset != extSubset)
    {
      xmlUnlinkNode((xmlNodePtr)cur->extSubset);
      cur->extSubset = 0LL;
      xmlFreeDtd(extSubset);
    }

    if (intSubset)
    {
      xmlUnlinkNode((xmlNodePtr)cur->intSubset);
      cur->intSubset = 0LL;
      xmlFreeDtd(intSubset);
    }

    childreuint64_t n = cur->children;
    if (children) {
      xmlFreeNodeList(children);
    }
    oldNs = cur->oldNs;
    if (oldNs) {
      xmlFreeNsList(oldNs);
    }
    versiouint64_t n = (xmlChar *)cur->version;
    if (version)
    {
      if (dict)
      {
        if (xmlDictOwns(dict, version)) {
          goto LABEL_23;
        }
        versiouint64_t n = (xmlChar *)cur->version;
      }

      xmlFree(version);
    }

void xmlFreeNodeList(xmlNodePtr cur)
{
  if (cur)
  {
    xmlNodePtr next = cur;
    if (cur->type == XML_NAMESPACE_DECL)
    {
      xmlFreeNsList((xmlNsPtr)cur);
      return;
    }

    doc = cur->doc;
    if (doc) {
      dict = doc->dict;
    }
    else {
      dict = 0LL;
    }
    uint64_t v3 = 0LL;
    uint64_t v4 = &unk_18C580000;
    while (1)
    {
      childreuint64_t n = next->children;
      if (children)
      {
        while (1)
        {
          xmlNodePtr v6 = children;
          unsigned int type = next->type;
          BOOL v8 = type > 0x15;
          int v9 = (1 << type) & 0x206220;
          if (!v8 && v9 != 0) {
            break;
          }
          ++v3;
          childreuint64_t n = v6->children;
          xmlNodePtr next = v6;
          if (!children) {
            goto LABEL_17;
          }
        }
      }

      xmlNodePtr v6 = next;
LABEL_17:
      xmlNodePtr parent = v6->parent;
      xmlNodePtr next = v6->next;
      unsigned int v12 = v6->type;
      if ((int)v12 > 13)
      {
        if (v12 == 14) {
          goto LABEL_54;
        }
        if (v12 != 21) {
          goto LABEL_26;
        }
      }

      else if (v12 != 9 && v12 != 13)
      {
LABEL_26:
        if (v4[326])
        {
          if (*__xmlDeregisterNodeDefaultValue())
          {
            unsigned int v14 = __xmlDeregisterNodeDefaultValue();
            ((void (*)(xmlNodePtr))*v14)(v6);
          }

          unsigned int v12 = v6->type;
        }

        if (v12 <= 0x14 && ((1 << v12) & 0x180002) != 0)
        {
          properties = v6->properties;
          if (properties)
          {
            unsigned int v16 = v4;
            do
            {
              BOOL v17 = properties->next;
              xmlFreeProp(properties);
              properties = v17;
            }

            while (v17);
            unsigned int v12 = v6->type;
            uint64_t v4 = v16;
          }
        }

        if (v12 <= 0x14 && ((1 << v12) & 0x180022) != 0)
        {
LABEL_40:
          BOOL v8 = v12 > 0x14;
          int v19 = (1 << v12) & 0x180002;
          if (!v8 && v19 != 0)
          {
            nsDef = v6->nsDef;
            if (nsDef) {
              xmlFreeNsList(nsDef);
            }
          }

          name = (xmlChar *)v6->name;
          if (name)
          {
            xmlElementType v23 = v6->type;
            if (v23 != XML_TEXT_NODE && v23 != XML_COMMENT_NODE)
            {
              if (!dict) {
                goto LABEL_52;
              }
              if (!xmlDictOwns(dict, name))
              {
                name = (xmlChar *)v6->name;
LABEL_52:
                xmlFree(name);
              }
            }
          }

          xmlFree(v6);
          goto LABEL_54;
        }

        content = (_xmlAttr **)v6->content;
        if (content != &v6->properties && content != 0LL)
        {
          if (!dict) {
            goto LABEL_65;
          }
          if (!xmlDictOwns(dict, (const xmlChar *)content))
          {
            content = (_xmlAttr **)v6->content;
LABEL_65:
            xmlFree(content);
          }
        }

        unsigned int v12 = v6->type;
        goto LABEL_40;
      }

      xmlFreeDoc((xmlDocPtr)v6);
LABEL_54:
      if (!next)
      {
        if (!v3 || !parent) {
          return;
        }
        --v3;
        parent->childreuint64_t n = 0LL;
        xmlNodePtr next = parent;
      }
    }
  }

xmlNodePtr xmlStringLenGetNodeList(const xmlDoc *doc, const xmlChar *value, int len)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  if (!value) {
    return 0LL;
  }
  uint64_t v4 = value;
  Size = (uint64x2_t *)xmlBufCreateSize(0LL);
  if (!Size) {
    return 0LL;
  }
  uint64_t v7 = Size;
  xmlBufSetAllocationScheme((uint64_t)Size, 4u);
  if (len >= 1)
  {
    Sibling = 0LL;
    int v9 = 0LL;
    uint64_t v10 = len;
    unint64_t v11 = (unint64_t)&v4[len];
    uint64_t v12 = (uint64_t)&v4[v10 - 2];
    unint64_t v13 = v4;
    while (1)
    {
      if (*v13 != 38)
      {
        if (!*v13) {
          goto LABEL_88;
        }
        ++v13;
        goto LABEL_87;
      }

      unsigned int v14 = (unsigned __int8 *)(v13 + 2);
      if ((unint64_t)(v13 + 2) < v11 && v13[1] == 35 && *v14 == 120)
      {
        unsigned int v15 = (unsigned __int8 *)(v13 + 3);
        if ((unint64_t)(v13 + 3) >= v11)
        {
          int v16 = 0;
LABEL_46:
          int v17 = 0;
          BOOL v28 = (unsigned __int8 *)(v13 + 4);
          while (1)
          {
            if ((v16 - 48) < 0xA)
            {
              int v29 = -48;
            }

            else if ((v16 - 97) < 6)
            {
              int v29 = -87;
            }

            else
            {
              if ((v16 - 65) >= 6)
              {
                __xmlSimpleError(2, 1300, (int)doc, (uint64_t)"invalid hexadecimal character value\n", 0LL);
                uint64_t v30 = 0LL;
                int v17 = 0;
                unsigned int v15 = v28 - 1;
                goto LABEL_66;
              }

              int v29 = -55;
            }

            int v17 = v29 + 16 * v17 + v16;
            if (v17 >= 1114112) {
              int v17 = 1114112;
            }
            else {
              int v16 = *v28;
            }
            ++v28;
            if (v16 == 59)
            {
              unsigned int v15 = v28 - 1;
              goto LABEL_60;
            }
          }
        }

        int v16 = *v15;
        if (v16 != 59) {
          goto LABEL_46;
        }
        int v17 = 0;
LABEL_60:
        uint64_t v30 = 1LL;
LABEL_66:
        unint64_t v13 = &v15[v30];
        if (v17)
        {
LABEL_67:
          __int16 v45 = 0;
          *(void *)out = 0LL;
          if (v17 < 1114112) {
            int v34 = v17;
          }
          else {
            int v34 = 65533;
          }
          out[xmlCopyCharMultiByte(out, v34)] = 0;
          uint64_t v4 = v13;
          goto LABEL_87;
        }

        goto LABEL_86;
      }

      signed int v18 = v13 + 1;
      int v19 = *v18;
      if (v19 == 35) {
        break;
      }
      uint64_t v21 = 0LL;
      if (!*v18)
      {
LABEL_94:
        __xmlSimpleError(2, 1302, (int)doc, (uint64_t)"unterminated entity reference %15s\n", (uint64_t)v18);
        goto LABEL_103;
      }

      while (v19 != 59)
      {
        if (v12 - (void)v13 != v21)
        {
          int v19 = v13[v21++ + 2];
          if (v19) {
            continue;
          }
        }

        goto LABEL_94;
      }

      if (v21)
      {
        uint64_t v42 = v12;
        cur = Sibling;
        BOOL v24 = xmlStrndup(v13 + 1, v21);
        xmlEntityPtr DocEntity = xmlGetDocEntity(doc, v24);
        xmlEntityPtr v26 = DocEntity;
        if (DocEntity && DocEntity->etype == XML_INTERNAL_PREDEFINED_ENTITY)
        {
          signed int v27 = v24;
          uint64_t v12 = v42;
          Sibling = cur;
        }

        else
        {
          if (!xmlBufIsEmpty((uint64_t)v7))
          {
            signed int v31 = v24;
            xmlNodePtr v32 = xmlNewText(0LL);
            if (!v32)
            {
              if (!v24) {
                goto LABEL_103;
              }
              goto LABEL_108;
            }

            BOOL v33 = v32;
            v32->doc = (_xmlDoc *)doc;
            v32->content = (xmlChar *)xmlBufDetach(v7->i64);
            if (cur)
            {
              cur = xmlAddNextSibling(cur, v33);
            }

            else
            {
              int v9 = v33;
              cur = v33;
            }

            BOOL v24 = v31;
          }

          signed int v27 = v24;
          xmlNodePtr v35 = xmlNewReference(doc, v24);
          if (!v35)
          {
            if (!v24) {
              goto LABEL_103;
            }
LABEL_108:
            ((void (*)(xmlChar *))xmlFree)(v24);
            goto LABEL_103;
          }

          Sibling = v35;
          if (v26)
          {
            if (!v26->children)
            {
              v26->childreuint64_t n = (_xmlNode *)-1LL;
              xmlNodePtr NodeList = xmlStringGetNodeList(doc, v35->content);
              v26->childreuint64_t n = NodeList;
              v26->owner = 1;
              if (NodeList)
              {
                do
                {
                  xmlNodePtr v37 = NodeList;
                  NodeList->xmlNodePtr parent = (_xmlNode *)v26;
                  xmlNodePtr NodeList = NodeList->next;
                }

                while (NodeList);
                v26->last = v37;
              }
            }
          }

          if (cur) {
            Sibling = xmlAddNextSibling(cur, Sibling);
          }
          else {
            int v9 = Sibling;
          }
          uint64_t v12 = v42;
        }

        xmlFree(v27);
      }

      v13 += v21 + 2;
LABEL_86:
      uint64_t v4 = v13;
LABEL_87:
      if ((unint64_t)v13 >= v11)
      {
LABEL_88:
        if (v13 == v4 || !xmlBufAdd(v7, v4, ((_DWORD)v13 - (_DWORD)v4)))
        {
          if (!v9)
          {
LABEL_96:
            xmlNodePtr v38 = xmlNewText((const xmlChar *)&byte_181A3ACBA);
            int v9 = v38;
            if (v38) {
              v38->doc = (_xmlDoc *)doc;
            }
          }
        }

        goto LABEL_103;
      }
    }

    if ((unint64_t)v14 >= v11)
    {
      int v20 = 0;
    }

    else
    {
      int v20 = *v14;
      if (v20 == 59)
      {
        int v17 = 0;
LABEL_36:
        uint64_t v23 = 1LL;
        goto LABEL_38;
      }
    }

    int v17 = 0;
    char v22 = (unsigned __int8 *)(v13 + 3);
    while ((v20 - 48) <= 9)
    {
      int v17 = v20 + 10 * v17 - 48;
      if (v17 >= 1114112) {
        int v17 = 1114112;
      }
      else {
        int v20 = *v22;
      }
      ++v22;
      if (v20 == 59)
      {
        unsigned int v14 = v22 - 1;
        goto LABEL_36;
      }
    }

    __xmlSimpleError(2, 1301, (int)doc, (uint64_t)"invalid decimal character value\n", 0LL);
    uint64_t v23 = 0LL;
    int v17 = 0;
    unsigned int v14 = v22 - 1;
LABEL_38:
    unint64_t v13 = &v14[v23];
    if (v17) {
      goto LABEL_67;
    }
    goto LABEL_86;
  }

  int v9 = 0LL;
  Sibling = 0LL;
LABEL_99:
  xmlNodePtr v39 = xmlNewText(0LL);
  if (v39)
  {
    int v40 = v39;
    v39->doc = (_xmlDoc *)doc;
    v39->content = (xmlChar *)xmlBufDetach(v7->i64);
    if (Sibling) {
      xmlAddNextSibling(Sibling, v40);
    }
    else {
      int v9 = v40;
    }
  }

LABEL_103:
  xmlBufFree(v7);
  return v9;
}

          int v40 = *(void *)(v11 + 40);
          if (v40
            && *(void *)(v40 + 40) == *(void *)(v11 + 64)
            && xmlStrEqual(*(const xmlChar **)(v11 + 16), (const xmlChar *)"head")
            && xmlStrEqual(*(const xmlChar **)(*(void *)(v11 + 40) + 16LL), (const xmlChar *)"html"))
          {
            int v41 = v11 + 24;
            uint64_t v53 = *(const xmlNode **)(v11 + 24);
            if (v53)
            {
              stra = (char *)(v11 + 24);
              do
              {
                if (xmlStrEqual(v53->name, (const xmlChar *)"meta"))
                {
                  Prop = xmlGetProp(v53, (const xmlChar *)"http-equiv");
                  if (Prop)
                  {
                    uint64_t v55 = Prop;
                    xmlSchematronParserCtxtPtr v56 = xmlStrcasecmp(Prop, (const xmlChar *)"Content-Type");
                    xmlFree(v55);
                    if (!v56) {
                      goto LABEL_105;
                    }
                  }
                }

                uint64_t v53 = v53->next;
              }

              while (v53);
              int v41 = v11 + 24;
              if (*(void *)stra)
              {
                xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, v8);
                uint64_t v7 = "</";
                if (*(_DWORD *)(v3 + 56) == 1)
                {
                  xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, v6);
                  if (*__xmlIndentTreeOutput())
                  {
                    uint64_t v57 = *(_DWORD *)(v3 + 52);
                    if (v57 < *(_DWORD *)(v3 + 124)) {
                      v58 = v57 + 1;
                    }
                    else {
                      v58 = *(_DWORD *)(v3 + 124);
                    }
                    xmlOutputBufferWrite((xmlOutputBufferPtr)v5, v58 * *(_DWORD *)(v3 + 128), buf);
                  }
                }

                xmlOutputBufferWriteString( (xmlOutputBufferPtr)v5,  "<meta http-equiv=Content-Type content=text/html; charset=");
                uint64_t v59 = *(const char **)(v3 + 24);
                int v9 = ":";
                if (v59) {
                  xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, v59);
                }
                else {
                  xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 5, "UTF-8");
                }
                uint64_t result = xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 4, " />");
LABEL_107:
                uint64_t v42 = stra;
                if (*(_DWORD *)(v3 + 56) == 1)
                {
                  int v43 = *(void *)stra;
                  if (*(void *)stra)
                  {
                    while (1)
                    {
                      uint64_t v44 = *(_DWORD *)(v43 + 8);
                      if (v44 == 5 || v44 == 3) {
                        break;
                      }
                      int v43 = *(void *)(v43 + 48);
                      if (!v43) {
                        goto LABEL_114;
                      }
                    }

                    *(_DWORD *)(v3 + 56) = 0;
                    uint64_t v4 = v11;
                  }

                  else
                  {
LABEL_114:
                    uint64_t result = xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, v6);
                    uint64_t v42 = stra;
                  }
                }

                __int16 v62 = *(_DWORD *)(v3 + 52);
                if ((v62 & 0x80000000) == 0) {
                  *(_DWORD *)(v3 + 52) = v62 + 1;
                }
                uint64_t v10 = *(void *)v42;
                goto LABEL_2;
              }

              uint64_t v47 = 0;
              uint64_t v46 = 1;
            }

            else
            {
              uint64_t v47 = 0;
              uint64_t v46 = 1;
            }
          }

          else
          {
LABEL_105:
            int v41 = v11 + 24;
            if (*(void *)(v11 + 24))
            {
              stra = (char *)(v11 + 24);
              uint64_t result = xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, v8);
              uint64_t v7 = "</";
              int v9 = ":";
              goto LABEL_107;
            }

            uint64_t v46 = 0;
            uint64_t v47 = 1;
          }

          uint64_t v48 = *(void *)(v11 + 72);
          if (v48)
          {
            if (!*(void *)(v48 + 24) && *(_DWORD *)(v11 + 8) == 1)
            {
              strc = v46;
              v49 = v47;
              int v50 = (void *)v41;
              BOOL v51 = xmlStrEqual(*(const xmlChar **)(v48 + 16), (const xmlChar *)"http://www.w3.org/1999/xhtml");
              uint64_t v52 = v50;
              uint64_t v47 = v49;
              uint64_t v46 = strc;
              if (v51)
              {
                if (!*v52)
                {
LABEL_140:
                  __int128 v60 = *(const xmlChar **)(v11 + 16);
                  switch(*v60)
                  {
                    case 'a':
                      __int128 v61 = "area";
                      goto LABEL_162;
                    case 'b':
                      if (xmlStrEqual(v60, (const xmlChar *)"br")
                        || xmlStrEqual(*(const xmlChar **)(v11 + 16), (const xmlChar *)"base"))
                      {
                        goto LABEL_158;
                      }

                      __int128 v60 = *(const xmlChar **)(v11 + 16);
                      __int128 v61 = "basefont";
                      goto LABEL_162;
                    case 'c':
                      __int128 v61 = "col";
                      goto LABEL_162;
                    case 'f':
                      __int128 v61 = "frame";
                      goto LABEL_162;
                    case 'h':
                      __int128 v61 = "hr";
                      goto LABEL_162;
                    case 'i':
                      if (xmlStrEqual(v60, (const xmlChar *)"img")
                        || xmlStrEqual(*(const xmlChar **)(v11 + 16), (const xmlChar *)"input"))
                      {
LABEL_158:
                        xmlSchematronParserCtxtPtr v63 = 1;
                      }

                      else
                      {
                        __int128 v60 = *(const xmlChar **)(v11 + 16);
                        __int128 v61 = "isindex";
LABEL_162:
                        xmlSchematronParserCtxtPtr v63 = xmlStrEqual(v60, (const xmlChar *)v61) != 0;
                      }

                      if ((v47 & v63) != 1) {
                        goto LABEL_165;
                      }
                      uint64_t result = xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 3, " />");
                      uint64_t v7 = "</";
                      int v9 = ":";
                      break;
                    case 'l':
                      __int128 v61 = "link";
                      goto LABEL_162;
                    case 'm':
                      __int128 v61 = "meta";
                      goto LABEL_162;
                    case 'p':
                      __int128 v61 = "param";
                      goto LABEL_162;
                    default:
                      goto LABEL_165;
                  }

                  goto LABEL_195;
                }
              }
            }
          }

          else if (*(_DWORD *)(v11 + 8) == 1)
          {
            goto LABEL_140;
          }

        xmlNodePtr v37 = *(_DWORD *)(v22 + 88);
        if ((v37 & 0x20000) == 0) {
          *(_DWORD *)(v22 + 88) = v37 | 0x20000;
        }
LABEL_105:
        char v22 = *(void *)(v22 + 152);
        if (!v22) {
          return;
        }
      }
    }
  }

            xmlNewNsProp(v33, v56, *(const xmlChar **)(v37 + 24), v52);
          }

          else if (!xmlNewProp(v33, *(const xmlChar **)(v37 + 24), v52))
          {
            xmlSchemaInternalErr2( (_DWORD *)a1,  (const xmlChar *)"xmlSchemaVAttributesComplex",  (const xmlChar *)"calling xmlNewProp()",  0LL);
            if (v54) {
              ((void (*)(xmlChar *))*v36)(v54);
            }
            goto LABEL_153;
          }

          if (v54) {
            ((void (*)(xmlChar *))*v36)(v54);
          }
        }

xmlNodePtr xmlNewDocText(const xmlDoc *doc, const xmlChar *content)
{
  xmlNodePtr result = xmlNewText(content);
  if (result) {
    result->doc = (_xmlDoc *)doc;
  }
  return result;
}

xmlNodePtr xmlAddNextSibling(xmlNodePtr cur, xmlNodePtr elem)
{
  if (cur)
  {
    xmlNodePtr v3 = cur;
    cur = 0LL;
    if (elem)
    {
      if (v3->type != XML_NAMESPACE_DECL)
      {
        cur = 0LL;
        if (v3 != elem && elem->type != XML_NAMESPACE_DECL)
        {
          xmlUnlinkNode(elem);
          xmlElementType type = elem->type;
          if (type == XML_ATTRIBUTE_NODE)
          {
            return xmlAddPropSibling((uint64_t)v3, (uint64_t)v3, (uint64_t)elem);
          }

          else
          {
            if (type != XML_TEXT_NODE) {
              goto LABEL_14;
            }
            if (v3->type == XML_TEXT_NODE)
            {
              xmlNodeAddContent(v3, elem->content);
              xmlFreeNode(elem);
              return v3;
            }

            xmlNodePtr next = v3->next;
            if (next && next->type == XML_TEXT_NODE && v3->name == next->name)
            {
              int v9 = xmlStrdup(elem->content);
              uint64_t v10 = xmlStrcat(v9, v3->next->content);
              xmlNodeSetContent(v3->next, v10);
              xmlFree(v10);
              xmlFreeNode(elem);
              return v3->next;
            }

            else
            {
LABEL_14:
              doc = v3->doc;
              if (elem->doc != doc) {
                xmlSetTreeDoc(elem, doc);
              }
              elem->prev = v3;
              __int128 v7 = *(_OWORD *)&v3->parent;
              *(_OWORD *)&elem->xmlNodePtr parent = v7;
              v3->xmlNodePtr next = elem;
              BOOL v8 = elem->next;
              if (v8) {
                v8->prev = elem;
              }
              if ((void)v7)
              {
                if (*(xmlNodePtr *)(v7 + 32) == v3) {
                  *(void *)(v7 + 32) = elem;
                }
              }

              return elem;
            }
          }
        }
      }
    }
  }

  return cur;
}

xmlNodePtr xmlNewReference(const xmlDoc *doc, const xmlChar *name)
{
  if (!name) {
    return 0LL;
  }
  uint64_t v4 = (xmlNode *)xmlMalloc(0x78uLL);
  xmlFreeFunc v5 = v4;
  if (v4)
  {
    *(void *)&v4->line = 0LL;
    *(_OWORD *)&v4->content = 0u;
    *(_OWORD *)&v4->nsDef = 0u;
    *(_OWORD *)&v4->xmlNodePtr next = 0u;
    *(_OWORD *)&v4->doc = 0u;
    *(_OWORD *)&v4->name = 0u;
    *(_OWORD *)&v4->last = 0u;
    *(_OWORD *)&v4->_private = 0u;
    v4->xmlElementType type = XML_ENTITY_REF_NODE;
    v4->doc = (_xmlDoc *)doc;
    if (*name == 38)
    {
      xmlNodePtr v6 = name + 1;
      int v7 = xmlStrlen(v6);
      uint64_t v8 = v7 - 1LL;
      if (v6[v8] != 59) {
        LODWORD(v8) = v7;
      }
      int v9 = xmlStrndup(v6, v8);
    }

    else
    {
      int v9 = xmlStrdup(name);
    }

    v5->name = v9;
    xmlEntityPtr DocEntity = xmlGetDocEntity(doc, v9);
    if (DocEntity)
    {
      v5->content = DocEntity->content;
      v5->childreuint64_t n = (_xmlNode *)DocEntity;
      v5->last = (_xmlNode *)DocEntity;
    }

    if (__xmlRegisterCallbacks && *__xmlRegisterNodeDefaultValue())
    {
      unint64_t v11 = __xmlRegisterNodeDefaultValue();
      ((void (*)(xmlNode *))*v11)(v5);
    }
  }

  else
  {
    __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"building reference");
  }

  return v5;
}

xmlNodePtr xmlStringGetNodeList(const xmlDoc *doc, const xmlChar *value)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  if (!value) {
    return 0LL;
  }
  xmlGenericErrorFunc v2 = value;
  Size = (uint64x2_t *)xmlBufCreateSize(0LL);
  if (!Size) {
    return 0LL;
  }
  xmlFreeFunc v5 = Size;
  xmlBufSetAllocationScheme((uint64_t)Size, 4u);
  xmlNodePtr v6 = 0LL;
  Sibling = 0LL;
LABEL_4:
  for (uint64_t i = v2; *i; ++i)
  {
    if (*i == 38)
    {
      int v9 = i[1];
      if (v9 != 35)
      {
        uint64_t v22 = 2LL;
        if (!i[1])
        {
LABEL_80:
          __xmlSimpleError(2, 1302, (int)doc, (uint64_t)"unterminated entity reference %15s\n", (uint64_t)(i + 1));
          goto LABEL_73;
        }

        while (v9 != 59)
        {
          int v9 = i[v22++];
          if (!v9) {
            goto LABEL_80;
          }
        }

        if (v22 == 2) {
          goto LABEL_67;
        }
        name = xmlStrndup(i + 1, (int)v22 - 2);
        xmlEntityPtr DocEntity = xmlGetDocEntity(doc, name);
        if (DocEntity && DocEntity->etype == XML_INTERNAL_PREDEFINED_ENTITY)
        {
LABEL_66:
          xmlFree(name);
LABEL_67:
          xmlGenericErrorFunc v2 = &i[v22];
          goto LABEL_4;
        }

        xmlEntityPtr v34 = DocEntity;
        if (xmlBufIsEmpty((uint64_t)v5))
        {
LABEL_57:
          xmlNodePtr v25 = xmlNewReference(doc, name);
          if (v25)
          {
            xmlEntityPtr v26 = v25;
            if (v34)
            {
              if (!v34->children)
              {
                v34->childreuint64_t n = (_xmlNode *)-1LL;
                xmlNodePtr elema = v25;
                xmlNodePtr NodeList = xmlStringGetNodeList(doc, v25->content);
                xmlEntityPtr v26 = elema;
                v34->childreuint64_t n = NodeList;
                v34->owner = 1;
                if (NodeList)
                {
                  do
                  {
                    xmlNodePtr v28 = NodeList;
                    NodeList->xmlNodePtr parent = (_xmlNode *)v34;
                    xmlNodePtr NodeList = NodeList->next;
                  }

                  while (NodeList);
                  v34->last = v28;
                }
              }
            }

            if (Sibling)
            {
              Sibling = xmlAddNextSibling(Sibling, v26);
            }

            else
            {
              xmlNodePtr v6 = v26;
              Sibling = v26;
            }

            goto LABEL_66;
          }
        }

        else
        {
          xmlNodePtr v24 = xmlNewText(0LL);
          if (v24)
          {
            v24->doc = (_xmlDoc *)doc;
            eleuint64_t m = v24;
            v24->content = (xmlChar *)xmlBufDetach(v5->i64);
            if (Sibling)
            {
              Sibling = xmlAddNextSibling(Sibling, elem);
            }

            else
            {
              xmlNodePtr v6 = elem;
              Sibling = elem;
            }

            goto LABEL_57;
          }
        }

        if (name) {
          xmlFree(name);
        }
        goto LABEL_73;
      }

      unint64_t v11 = i + 2;
      int v10 = i[2];
      if (v10 == 59)
      {
        int v15 = 0;
LABEL_21:
        uint64_t v17 = 1LL;
      }

      else
      {
        if (v10 == 120)
        {
          int v14 = i[3];
          unint64_t v13 = i + 3;
          int v12 = v14;
          if (v14 != 59)
          {
            int v15 = 0;
            while (1)
            {
              if ((v12 - 48) >= 0xA)
              {
                if ((v12 - 97) >= 6)
                {
                  if ((v12 - 65) >= 6)
                  {
                    __xmlSimpleError(2, 1300, (int)doc, (uint64_t)"invalid hexadecimal character value\n", 0LL);
                    uint64_t v20 = 0LL;
                    int v15 = 0;
                    goto LABEL_36;
                  }

                  int v18 = -55;
                }

                else
                {
                  int v18 = -87;
                }
              }

              else
              {
                int v18 = -48;
              }

              int v15 = v18 + 16 * v15 + v12;
              if (v15 >= 1114112) {
                int v15 = 1114112;
              }
              int v19 = *++v13;
              int v12 = v19;
              if (v19 == 59) {
                goto LABEL_35;
              }
            }
          }

          int v15 = 0;
LABEL_35:
          uint64_t v20 = 1LL;
LABEL_36:
          xmlGenericErrorFunc v2 = &v13[v20];
          if (v15) {
            goto LABEL_37;
          }
          goto LABEL_4;
        }

        int v15 = 0;
        while ((v10 - 48) <= 9)
        {
          int v15 = v10 + 10 * v15 - 48;
          if (v15 >= 1114112) {
            int v15 = 1114112;
          }
          int v16 = *++v11;
          int v10 = v16;
          if (v16 == 59) {
            goto LABEL_21;
          }
        }

        __xmlSimpleError(2, 1301, (int)doc, (uint64_t)"invalid decimal character value\n", 0LL);
        uint64_t v17 = 0LL;
        int v15 = 0;
      }

      xmlGenericErrorFunc v2 = &v11[v17];
      if (!v15) {
        goto LABEL_4;
      }
LABEL_37:
      __int16 v37 = 0;
      *(void *)out = 0LL;
      if (v15 < 1114112) {
        int v21 = v15;
      }
      else {
        int v21 = 65533;
      }
      out[xmlCopyCharMultiByte(out, v21)] = 0;
      goto LABEL_4;
    }
  }

  if (i != v2 || !v6) {
    xmlBufAdd(v5, v2, ((_DWORD)i - (_DWORD)v2));
  }
  if (!xmlBufIsEmpty((uint64_t)v5))
  {
    xmlNodePtr v30 = xmlNewText(0LL);
    if (v30)
    {
      signed int v31 = v30;
      v30->doc = (_xmlDoc *)doc;
      v30->content = (xmlChar *)xmlBufDetach(v5->i64);
      if (Sibling) {
        xmlAddNextSibling(Sibling, v31);
      }
      else {
        xmlNodePtr v6 = v31;
      }
    }

    else
    {
      xmlNodePtr v6 = 0LL;
    }
  }

xmlChar *__cdecl xmlNodeListGetString(xmlDocPtr doc, const xmlNode *list, int inLine)
{
  return xmlNodeListGetStringInternal(doc, (uint64_t)list, inLine, 0);
}

xmlChar *xmlNodeListGetStringInternal(xmlDoc *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4 = 0LL;
  if (a2 && a4 <= 40)
  {
    uint64_t v6 = a2;
    uint64_t v8 = *(void *)(a2 + 40);
    BOOL v9 = !v8 || *(_DWORD *)(v8 + 8) != 2;
    uint64_t v4 = 0LL;
    uint64_t v10 = (a4 + 1);
    while (1)
    {
      int v11 = *(_DWORD *)(v6 + 8);
      if (v11 == 5)
      {
        if (!a3)
        {
          strcpy((char *)add, "&");
          int v18 = xmlStrncat(v4, add, 1);
          int v19 = xmlStrcat(v18, *(const xmlChar **)(v6 + 16));
          strcpy((char *)add, ";");
          unint64_t v13 = xmlStrncat(v19, add, 1);
          goto LABEL_19;
        }

        xmlEntityPtr DocEntity = xmlGetDocEntity(a1, *(const xmlChar **)(v6 + 16));
        if (!DocEntity)
        {
          int v12 = *(xmlChar **)(v6 + 80);
          goto LABEL_10;
        }

        uint64_t StringInternal = xmlNodeListGetStringInternal(a1, DocEntity->children, 1LL, v10);
        if (StringInternal)
        {
          int v16 = (xmlChar *)StringInternal;
LABEL_22:
          uint64_t v4 = xmlStrcat(v4, v16);
          xmlFree(v16);
        }
      }

xmlChar *__cdecl xmlNodeListGetRawString(const xmlDoc *doc, const xmlNode *list, int inLine)
{
  if (list)
  {
    uint64_t v4 = list;
    uint64_t v6 = 0LL;
    while (1)
    {
      xmlElementType type = v4->type;
      if (type - 3 >= 2)
      {
        if (type == XML_ENTITY_REF_NODE)
        {
          if (!inLine)
          {
            strcpy((char *)add, "&");
            unint64_t v13 = xmlStrncat(v6, add, 1);
            int v14 = xmlStrcat(v13, v4->name);
            strcpy((char *)add, ";");
            BOOL v9 = xmlStrncat(v14, add, 1);
            goto LABEL_14;
          }

          xmlEntityPtr DocEntity = xmlGetDocEntity(doc, v4->name);
          if (!DocEntity)
          {
            content = v4->content;
LABEL_5:
            BOOL v9 = xmlStrcat(v6, content);
LABEL_14:
            uint64_t v6 = v9;
            goto LABEL_15;
          }

          RawString = xmlNodeListGetRawString(doc, DocEntity->children, 1);
          if (!RawString) {
            goto LABEL_15;
          }
LABEL_12:
          int v12 = RawString;
          uint64_t v6 = xmlStrcat(v6, RawString);
          xmlFree(v12);
        }
      }

      else
      {
        content = v4->content;
        if (inLine) {
          goto LABEL_5;
        }
        RawString = xmlEncodeSpecialChars(doc, content);
        if (RawString) {
          goto LABEL_12;
        }
      }

xmlAttrPtr xmlNewProp(xmlNodePtr node, const xmlChar *name, const xmlChar *value)
{
  if (name) {
    return xmlNewPropInternal((uint64_t)node, 0LL, (xmlChar *)name, value, 0);
  }
  else {
    return 0LL;
  }
}

xmlAttr *xmlNewPropInternal(uint64_t a1, xmlNs *a2, xmlChar *str, const xmlChar *a4, int a5)
{
  int v7 = str;
  if (a1 && *(_DWORD *)(a1 + 8) != 1)
  {
    if (a5 == 1)
    {
      uint64_t v15 = *(void *)(a1 + 64);
      if (!v15 || !xmlDictOwns(*(xmlDictPtr *)(v15 + 152), str)) {
        xmlFree(v7);
      }
    }

    return 0LL;
  }

  uint64_t v10 = (xmlAttr *)xmlMalloc(0x60uLL);
  if (!v10)
  {
    if (a5 == 1 && (!a1 || (uint64_t v16 = *(void *)(a1 + 64)) == 0 || !xmlDictOwns(*(xmlDictPtr *)(v16 + 152), v7))) {
      xmlFree(v7);
    }
    __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"building attribute");
    return 0LL;
  }

  int v11 = v10;
  *(_OWORD *)&v10->doc = 0u;
  *(_OWORD *)&v10->axmlElementType type = 0u;
  *(_OWORD *)&v10->last = 0u;
  *(_OWORD *)&v10->xmlNodePtr next = 0u;
  *(_OWORD *)&v10->_private = 0u;
  *(_OWORD *)&v10->name = 0u;
  v10->xmlElementType type = XML_ATTRIBUTE_NODE;
  v10->xmlNodePtr parent = (_xmlNode *)a1;
  if (!a1)
  {
    int v12 = 0LL;
    v10->xmlNsPtr ns = a2;
    if (a5) {
      goto LABEL_23;
    }
    goto LABEL_21;
  }

  int v12 = *(_xmlDoc **)(a1 + 64);
  v10->doc = v12;
  v10->xmlNsPtr ns = a2;
  if (a5) {
    goto LABEL_23;
  }
  if (!v12 || (dict = v12->dict) == 0LL)
  {
LABEL_21:
    int v14 = xmlStrdup(v7);
    goto LABEL_22;
  }

  int v14 = (xmlChar *)xmlDictLookup(dict, v7, -1);
LABEL_22:
  int v7 = v14;
LABEL_23:
  v11->name = v7;
  if (!a4) {
    goto LABEL_28;
  }
  xmlNodePtr v17 = xmlNewText(a4);
  if (v17)
  {
    v17->doc = v12;
    v11->childreuint64_t n = v17;
    do
    {
      int v18 = v17;
      v17->xmlNodePtr parent = (_xmlNode *)v11;
      xmlNodePtr v17 = v17->next;
    }

    while (v17);
    v11->last = v18;
LABEL_28:
    if (!a1) {
      goto LABEL_38;
    }
    goto LABEL_29;
  }

  v11->childreuint64_t n = 0LL;
  v11->last = 0LL;
  if (!a1) {
    goto LABEL_38;
  }
LABEL_29:
  int v19 = *(_xmlAttr **)(a1 + 88);
  if (v19)
  {
    do
    {
      uint64_t v20 = v19;
      int v19 = v19->next;
    }

    while (v19);
    v20->xmlNodePtr next = v11;
    v11->prev = v20;
    if (!a4) {
      goto LABEL_38;
    }
LABEL_36:
    if (xmlIsID(*(xmlDocPtr *)(a1 + 64), (xmlNodePtr)a1, v11) == 1) {
      xmlAddID(0LL, *(xmlDocPtr *)(a1 + 64), a4, v11);
    }
    goto LABEL_38;
  }

  *(void *)(a1 + 88) = v11;
  if (a4) {
    goto LABEL_36;
  }
LABEL_38:
  if (__xmlRegisterCallbacks && *__xmlRegisterNodeDefaultValue())
  {
    int v21 = __xmlRegisterNodeDefaultValue();
    ((void (*)(xmlAttr *))*v21)(v11);
  }

  return v11;
}

xmlAttrPtr xmlNewNsProp(xmlNodePtr node, xmlNsPtr ns, const xmlChar *name, const xmlChar *value)
{
  if (name) {
    return xmlNewPropInternal((uint64_t)node, ns, (xmlChar *)name, value, 0);
  }
  else {
    return 0LL;
  }
}

xmlAttrPtr xmlNewNsPropEatName(xmlNodePtr node, xmlNsPtr ns, xmlChar *name, const xmlChar *value)
{
  if (name) {
    return xmlNewPropInternal((uint64_t)node, ns, name, value, 1);
  }
  else {
    return 0LL;
  }
}

xmlAttrPtr xmlNewDocProp(xmlDocPtr doc, const xmlChar *name, const xmlChar *value)
{
  if (!name) {
    return 0LL;
  }
  uint64_t v6 = (xmlAttr *)xmlMalloc(0x60uLL);
  int v7 = v6;
  if (v6)
  {
    *(_OWORD *)&v6->doc = 0u;
    *(_OWORD *)&v6->axmlElementType type = 0u;
    *(_OWORD *)&v6->last = 0u;
    *(_OWORD *)&v6->xmlNodePtr next = 0u;
    *(_OWORD *)&v6->_private = 0u;
    *(_OWORD *)&v6->name = 0u;
    v6->xmlElementType type = XML_ATTRIBUTE_NODE;
    if (doc && (dict = doc->dict) != 0LL) {
      BOOL v9 = xmlDictLookup(dict, name, -1);
    }
    else {
      BOOL v9 = xmlStrdup(name);
    }
    v7->name = v9;
    v7->doc = doc;
    if (value)
    {
      xmlNodePtr NodeList = xmlStringGetNodeList(doc, value);
      v7->childreuint64_t n = NodeList;
      v7->last = 0LL;
      if (NodeList)
      {
        do
        {
          int v11 = NodeList;
          NodeList->xmlNodePtr parent = (_xmlNode *)v7;
          xmlNodePtr NodeList = NodeList->next;
        }

        while (NodeList);
        v7->last = v11;
      }
    }

    if (__xmlRegisterCallbacks && *__xmlRegisterNodeDefaultValue())
    {
      int v12 = __xmlRegisterNodeDefaultValue();
      ((void (*)(xmlAttr *))*v12)(v7);
    }
  }

  else
  {
    __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"building attribute");
  }

  return v7;
}

void xmlFreePropList(xmlAttrPtr cur)
{
  if (cur)
  {
    do
    {
      xmlNodePtr next = cur->next;
      xmlFreeProp(cur);
      cur = next;
    }

    while (next);
  }

void xmlFreeProp(xmlAttrPtr cur)
{
  if (cur)
  {
    doc = cur->doc;
    if (doc) {
      dict = doc->dict;
    }
    else {
      dict = 0LL;
    }
    if (__xmlRegisterCallbacks && *__xmlDeregisterNodeDefaultValue())
    {
      uint64_t v4 = __xmlDeregisterNodeDefaultValue();
      ((void (*)(xmlAttrPtr))*v4)(cur);
    }

    xmlFreeFunc v5 = cur->doc;
    if (v5 && cur->atype == XML_ATTRIBUTE_ID) {
      xmlRemoveID(v5, cur);
    }
    childreuint64_t n = cur->children;
    if (children) {
      xmlFreeNodeList(children);
    }
    name = (xmlChar *)cur->name;
    if (!name) {
      goto LABEL_19;
    }
    if (dict)
    {
      if (xmlDictOwns(dict, name))
      {
LABEL_19:
        xmlFree(cur);
        return;
      }

      name = (xmlChar *)cur->name;
    }

    xmlFree(name);
    goto LABEL_19;
  }

int xmlRemoveProp(xmlAttrPtr cur)
{
  if (!cur) {
    return -1;
  }
  xmlNodePtr parent = cur->parent;
  if (!parent) {
    return -1;
  }
  properties = parent->properties;
  if (properties != cur)
  {
    while (properties)
    {
      xmlNodePtr v3 = properties;
      properties = properties->next;
      if (properties == cur)
      {
        xmlNodePtr next = cur->next;
        v3->xmlNodePtr next = next;
        if (next) {
          goto LABEL_12;
        }
        goto LABEL_13;
      }
    }

    return -1;
  }

  xmlNodePtr next = cur->next;
  parent->properties = next;
  if (next)
  {
    xmlNodePtr v3 = 0LL;
LABEL_12:
    next->prev = v3;
  }

xmlNodePtr xmlNewDocPI(xmlDocPtr doc, const xmlChar *name, const xmlChar *content)
{
  if (!name) {
    return 0LL;
  }
  uint64_t v6 = (xmlNode *)xmlMalloc(0x78uLL);
  int v7 = v6;
  if (v6)
  {
    *(void *)&v6->line = 0LL;
    *(_OWORD *)&v6->content = 0u;
    *(_OWORD *)&v6->nsDef = 0u;
    *(_OWORD *)&v6->xmlNodePtr next = 0u;
    *(_OWORD *)&v6->doc = 0u;
    *(_OWORD *)&v6->name = 0u;
    *(_OWORD *)&v6->last = 0u;
    *(_OWORD *)&v6->_private = 0u;
    v6->xmlElementType type = XML_PI_NODE;
    if (doc && (dict = doc->dict) != 0LL) {
      BOOL v9 = xmlDictLookup(dict, name, -1);
    }
    else {
      BOOL v9 = xmlStrdup(name);
    }
    v7->name = v9;
    if (content) {
      v7->content = xmlStrdup(content);
    }
    v7->doc = doc;
    if (__xmlRegisterCallbacks && *__xmlRegisterNodeDefaultValue())
    {
      uint64_t v10 = __xmlRegisterNodeDefaultValue();
      ((void (*)(xmlNode *))*v10)(v7);
    }
  }

  else
  {
    __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"building PI");
  }

  return v7;
}

xmlNodePtr xmlNewPI(const xmlChar *name, const xmlChar *content)
{
  return xmlNewDocPI(0LL, name, content);
}

xmlNodePtr xmlNewNode(xmlNsPtr ns, const xmlChar *name)
{
  if (!name) {
    return 0LL;
  }
  uint64_t v4 = (xmlNode *)xmlMalloc(0x78uLL);
  xmlFreeFunc v5 = v4;
  if (v4)
  {
    *(void *)&v4->line = 0LL;
    *(_OWORD *)&v4->content = 0u;
    *(_OWORD *)&v4->nsDef = 0u;
    *(_OWORD *)&v4->xmlNodePtr next = 0u;
    *(_OWORD *)&v4->doc = 0u;
    *(_OWORD *)&v4->name = 0u;
    *(_OWORD *)&v4->last = 0u;
    *(_OWORD *)&v4->_private = 0u;
    v4->xmlElementType type = XML_ELEMENT_NODE;
    v4->name = xmlStrdup(name);
    v5->xmlNsPtr ns = ns;
    if (__xmlRegisterCallbacks && *__xmlRegisterNodeDefaultValue())
    {
      uint64_t v6 = __xmlRegisterNodeDefaultValue();
      ((void (*)(xmlNode *))*v6)(v5);
    }
  }

  else
  {
    __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"building node");
  }

  return v5;
}

xmlNodePtr xmlNewNodeEatName(xmlNsPtr ns, xmlChar *name)
{
  if (!name) {
    return 0LL;
  }
  uint64_t v4 = (xmlNode *)xmlMalloc(0x78uLL);
  xmlFreeFunc v5 = v4;
  if (v4)
  {
    *(_OWORD *)&v4->_private = 0u;
    *(_OWORD *)&v4->name = 0u;
    *(void *)&v4->line = 0LL;
    *(_OWORD *)&v4->content = 0u;
    *(_OWORD *)&v4->nsDef = 0u;
    *(_OWORD *)&v4->xmlNodePtr next = 0u;
    *(_OWORD *)&v4->doc = 0u;
    *(_OWORD *)&v4->last = 0u;
    v4->xmlElementType type = XML_ELEMENT_NODE;
    v4->name = name;
    v4->xmlNsPtr ns = ns;
    if (__xmlRegisterCallbacks && *__xmlRegisterNodeDefaultValue())
    {
      uint64_t v6 = __xmlRegisterNodeDefaultValue();
      ((void (*)(xmlNode *))*v6)(v5);
    }
  }

  else
  {
    __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"building node");
  }

  return v5;
}

xmlNodePtr xmlNewDocNode(xmlDocPtr doc, xmlNsPtr ns, const xmlChar *name, const xmlChar *content)
{
  if (doc && (dict = doc->dict) != 0LL)
  {
    uint64_t v8 = (xmlChar *)xmlDictLookup(dict, name, -1);
    xmlNodePtr v9 = xmlNewNodeEatName(ns, v8);
  }

  else
  {
    xmlNodePtr v9 = xmlNewNode(ns, name);
  }

  uint64_t v10 = v9;
  if (v9)
  {
    v9->doc = doc;
    if (content)
    {
      xmlNodePtr NodeList = xmlStringGetNodeList(doc, content);
      v10->childreuint64_t n = NodeList;
      if (NodeList)
      {
        xmlNodePtr next = NodeList->next;
        if (next)
        {
          do
          {
            xmlNodePtr v13 = next;
            NodeList->xmlNodePtr parent = v10;
            xmlNodePtr next = next->next;
            xmlNodePtr NodeList = v13;
          }

          while (next);
        }

        else
        {
          xmlNodePtr v13 = NodeList;
        }

        v13->xmlNodePtr parent = v10;
      }

      else
      {
        xmlNodePtr v13 = 0LL;
      }

      v10->last = v13;
    }
  }

  return v10;
}

xmlNodePtr xmlNewDocNodeEatName(xmlDocPtr doc, xmlNsPtr ns, xmlChar *name, const xmlChar *content)
{
  xmlNodePtr v7 = xmlNewNodeEatName(ns, name);
  uint64_t v8 = v7;
  if (v7)
  {
    v7->doc = doc;
    if (content)
    {
      xmlNodePtr NodeList = xmlStringGetNodeList(doc, content);
      v8->childreuint64_t n = NodeList;
      if (NodeList)
      {
        xmlNodePtr next = NodeList->next;
        if (next)
        {
          do
          {
            xmlNodePtr v11 = next;
            NodeList->xmlNodePtr parent = v8;
            xmlNodePtr next = next->next;
            xmlNodePtr NodeList = v11;
          }

          while (next);
        }

        else
        {
          xmlNodePtr v11 = NodeList;
        }

        v11->xmlNodePtr parent = v8;
        v8->last = v11;
      }

      else
      {
        v8->last = 0LL;
      }
    }
  }

  else if (doc && name && !xmlDictOwns(doc->dict, name))
  {
    xmlFree(name);
  }

  return v8;
}

xmlNodePtr xmlNewDocRawNode(xmlDocPtr doc, xmlNsPtr ns, const xmlChar *name, const xmlChar *content)
{
  xmlNodePtr v6 = xmlNewDocNode(doc, ns, name, 0LL);
  xmlNodePtr v7 = v6;
  if (v6)
  {
    v6->doc = doc;
    if (content)
    {
      xmlNodePtr v8 = xmlNewText(content);
      if (v8)
      {
        v8->doc = doc;
        v7->childreuint64_t n = v8;
        xmlNodePtr next = v8->next;
        if (next)
        {
          do
          {
            xmlNodePtr v10 = next;
            v8->xmlNodePtr parent = v7;
            xmlNodePtr next = next->next;
            xmlNodePtr v8 = v10;
          }

          while (next);
        }

        else
        {
          xmlNodePtr v10 = v8;
        }

        v10->xmlNodePtr parent = v7;
        v7->last = v10;
      }

      else
      {
        v7->childreuint64_t n = 0LL;
        v7->last = 0LL;
      }
    }
  }

  return v7;
}

xmlNodePtr xmlNewDocFragment(xmlDocPtr doc)
{
  xmlGenericErrorFunc v2 = (xmlNode *)xmlMalloc(0x78uLL);
  xmlNodePtr v3 = v2;
  if (v2)
  {
    *(void *)&v2->line = 0LL;
    *(_OWORD *)&v2->content = 0u;
    *(_OWORD *)&v2->nsDef = 0u;
    *(_OWORD *)&v2->xmlNodePtr next = 0u;
    *(_OWORD *)&v2->doc = 0u;
    *(_OWORD *)&v2->name = 0u;
    *(_OWORD *)&v2->last = 0u;
    *(_OWORD *)&v2->_private = 0u;
    v2->xmlElementType type = XML_DOCUMENT_FRAG_NODE;
    v2->doc = doc;
    if (__xmlRegisterCallbacks && *__xmlRegisterNodeDefaultValue())
    {
      uint64_t v4 = __xmlRegisterNodeDefaultValue();
      ((void (*)(xmlNode *))*v4)(v3);
    }
  }

  else
  {
    __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"building fragment");
  }

  return v3;
}

xmlNodePtr xmlNewText(const xmlChar *content)
{
  xmlGenericErrorFunc v2 = (xmlNode *)xmlMalloc(0x78uLL);
  xmlNodePtr v3 = v2;
  if (v2)
  {
    *(_OWORD *)&v2->_private = 0u;
    *(_OWORD *)&v2->name = 0u;
    *(void *)&v2->line = 0LL;
    *(_OWORD *)&v2->content = 0u;
    *(_OWORD *)&v2->nsDef = 0u;
    *(_OWORD *)&v2->xmlNodePtr next = 0u;
    *(_OWORD *)&v2->doc = 0u;
    *(_OWORD *)&v2->last = 0u;
    v2->xmlElementType type = XML_TEXT_NODE;
    v2->name = "text";
    if (content) {
      v2->content = xmlStrdup(content);
    }
    if (__xmlRegisterCallbacks && *__xmlRegisterNodeDefaultValue())
    {
      uint64_t v4 = __xmlRegisterNodeDefaultValue();
      ((void (*)(xmlNode *))*v4)(v3);
    }
  }

  else
  {
    __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"building text");
  }

  return v3;
}

xmlNodePtr xmlNewTextChild(xmlNodePtr parent, xmlNsPtr ns, const xmlChar *name, const xmlChar *content)
{
  xmlNodePtr result = 0LL;
  if (parent && name)
  {
    xmlNodePtr result = 0LL;
    HIDWORD(v6) = parent->type - 1;
    LODWORD(v6) = HIDWORD(v6);
    switch((v6 >> 1))
    {
      case 0u:
        doc = parent->doc;
        if (!ns) {
          xmlNsPtr ns = parent->ns;
        }
        goto LABEL_8;
      case 4u:
      case 6u:
        doc = (xmlDoc *)parent;
        goto LABEL_8;
      case 5u:
        doc = parent->doc;
LABEL_8:
        xmlNodePtr result = xmlNewDocRawNode(doc, ns, name, content);
        if (result)
        {
          result->xmlElementType type = XML_ELEMENT_NODE;
          result->xmlNodePtr parent = parent;
          result->doc = parent->doc;
          if (parent->children)
          {
            last = parent->last;
            p_last = &parent->last;
            last->xmlNodePtr next = result;
            result->prev = last;
          }

          else
          {
            parent->childreuint64_t n = result;
            p_last = &parent->last;
          }

          *p_last = result;
        }

        break;
      default:
        return result;
    }
  }

  return result;
}

xmlNodePtr xmlNewCharRef(xmlDocPtr doc, const xmlChar *name)
{
  if (!name) {
    return 0LL;
  }
  uint64_t v4 = (xmlNode *)xmlMalloc(0x78uLL);
  xmlFreeFunc v5 = v4;
  if (v4)
  {
    *(void *)&v4->line = 0LL;
    *(_OWORD *)&v4->content = 0u;
    *(_OWORD *)&v4->nsDef = 0u;
    *(_OWORD *)&v4->xmlNodePtr next = 0u;
    *(_OWORD *)&v4->doc = 0u;
    *(_OWORD *)&v4->name = 0u;
    *(_OWORD *)&v4->last = 0u;
    *(_OWORD *)&v4->_private = 0u;
    v4->xmlElementType type = XML_ENTITY_REF_NODE;
    v4->doc = doc;
    if (*name == 38)
    {
      unint64_t v6 = name + 1;
      int v7 = xmlStrlen(v6);
      uint64_t v8 = v7 - 1LL;
      if (v6[v8] != 59) {
        LODWORD(v8) = v7;
      }
      xmlNodePtr v9 = xmlStrndup(v6, v8);
    }

    else
    {
      xmlNodePtr v9 = xmlStrdup(name);
    }

    v5->name = v9;
    if (__xmlRegisterCallbacks && *__xmlRegisterNodeDefaultValue())
    {
      xmlNodePtr v10 = __xmlRegisterNodeDefaultValue();
      ((void (*)(xmlNode *))*v10)(v5);
    }
  }

  else
  {
    __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"building character reference");
  }

  return v5;
}

xmlNodePtr xmlNewTextLen(const xmlChar *content, int len)
{
  uint64_t v4 = (xmlNode *)xmlMalloc(0x78uLL);
  xmlFreeFunc v5 = v4;
  if (v4)
  {
    *(_OWORD *)&v4->_private = 0u;
    *(_OWORD *)&v4->name = 0u;
    *(void *)&v4->line = 0LL;
    *(_OWORD *)&v4->content = 0u;
    *(_OWORD *)&v4->nsDef = 0u;
    *(_OWORD *)&v4->xmlNodePtr next = 0u;
    *(_OWORD *)&v4->doc = 0u;
    *(_OWORD *)&v4->last = 0u;
    v4->xmlElementType type = XML_TEXT_NODE;
    v4->name = "text";
    if (content) {
      v4->content = xmlStrndup(content, len);
    }
    if (__xmlRegisterCallbacks && *__xmlRegisterNodeDefaultValue())
    {
      unint64_t v6 = __xmlRegisterNodeDefaultValue();
      ((void (*)(xmlNode *))*v6)(v5);
    }
  }

  else
  {
    __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"building text");
  }

  return v5;
}

xmlNodePtr xmlNewDocTextLen(xmlDocPtr doc, const xmlChar *content, int len)
{
  xmlNodePtr result = xmlNewTextLen(content, len);
  if (result) {
    result->doc = doc;
  }
  return result;
}

xmlNodePtr xmlNewComment(const xmlChar *content)
{
  xmlGenericErrorFunc v2 = (xmlNode *)xmlMalloc(0x78uLL);
  xmlNodePtr v3 = v2;
  if (v2)
  {
    *(_OWORD *)&v2->_private = 0u;
    *(_OWORD *)&v2->name = 0u;
    *(void *)&v2->line = 0LL;
    *(_OWORD *)&v2->content = 0u;
    *(_OWORD *)&v2->nsDef = 0u;
    *(_OWORD *)&v2->xmlNodePtr next = 0u;
    *(_OWORD *)&v2->doc = 0u;
    *(_OWORD *)&v2->last = 0u;
    v2->xmlElementType type = XML_COMMENT_NODE;
    v2->name = "comment";
    if (content) {
      v2->content = xmlStrdup(content);
    }
    if (__xmlRegisterCallbacks && *__xmlRegisterNodeDefaultValue())
    {
      uint64_t v4 = __xmlRegisterNodeDefaultValue();
      ((void (*)(xmlNode *))*v4)(v3);
    }
  }

  else
  {
    __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"building comment");
  }

  return v3;
}

xmlNodePtr xmlNewCDataBlock(xmlDocPtr doc, const xmlChar *content, int len)
{
  unint64_t v6 = (xmlNode *)xmlMalloc(0x78uLL);
  int v7 = v6;
  if (v6)
  {
    *(void *)&v6->line = 0LL;
    *(_OWORD *)&v6->content = 0u;
    *(_OWORD *)&v6->nsDef = 0u;
    *(_OWORD *)&v6->xmlNodePtr next = 0u;
    *(_OWORD *)&v6->doc = 0u;
    *(_OWORD *)&v6->name = 0u;
    *(_OWORD *)&v6->last = 0u;
    *(_OWORD *)&v6->_private = 0u;
    v6->xmlElementType type = XML_CDATA_SECTION_NODE;
    v6->doc = doc;
    if (content) {
      v6->content = xmlStrndup(content, len);
    }
    if (__xmlRegisterCallbacks && *__xmlRegisterNodeDefaultValue())
    {
      uint64_t v8 = __xmlRegisterNodeDefaultValue();
      ((void (*)(xmlNode *))*v8)(v7);
    }
  }

  else
  {
    __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"building CDATA");
  }

  return v7;
}

xmlNodePtr xmlNewDocComment(xmlDocPtr doc, const xmlChar *content)
{
  xmlNodePtr result = xmlNewComment(content);
  if (result) {
    result->doc = doc;
  }
  return result;
}

void xmlSetTreeDoc(xmlNodePtr tree, xmlDocPtr doc)
{
  if (tree)
  {
    xmlElementType type = tree->type;
    if (type != XML_NAMESPACE_DECL)
    {
      xmlFreeFunc v5 = tree->doc;
      if (v5 != doc)
      {
        if (v5)
        {
          dict = v5->dict;
          if (doc)
          {
LABEL_6:
            int v7 = doc->dict;
            goto LABEL_9;
          }
        }

        else
        {
          dict = 0LL;
          if (doc) {
            goto LABEL_6;
          }
        }

        int v7 = 0LL;
LABEL_9:
        if (type == XML_ELEMENT_NODE)
        {
          properties = tree->properties;
          if (!properties) {
            goto LABEL_22;
          }
          do
          {
            if (properties->atype == XML_ATTRIBUTE_ID) {
              xmlRemoveID(tree->doc, properties);
            }
            xmlNodePtr v9 = properties->doc;
            if (v9 != doc)
            {
              if (v9) {
                xmlNodePtr v10 = v9->dict;
              }
              else {
                xmlNodePtr v10 = 0LL;
              }
              properties->name = _copyStringForNewDictIfNeeded(v10, v7, (xmlChar *)properties->name);
              properties->doc = doc;
            }

            xmlSetListDoc(properties->children, doc);
            properties = properties->next;
          }

          while (properties);
          xmlElementType type = tree->type;
        }

        if (type == XML_ENTITY_REF_NODE)
        {
          tree->childreuint64_t n = 0LL;
LABEL_27:
          tree->name = _copyStringForNewDictIfNeeded(dict, v7, (xmlChar *)tree->name);
          tree->content = _copyStringForNewDictIfNeeded(dict, 0LL, tree->content);
          tree->doc = doc;
          return;
        }

xmlChar *_copyStringForNewDictIfNeeded(xmlDict *a1, xmlDict *a2, xmlChar *str)
{
  if (!str || !a1 || xmlDictOwns(a1, str) != 1) {
    return str;
  }
  if (a2) {
    return (xmlChar *)xmlDictLookup(a2, str, -1);
  }
  return xmlStrdup(str);
}

void xmlSetListDoc(xmlNodePtr list, xmlDocPtr doc)
{
  if (list)
  {
    xmlNodePtr v2 = list;
    if (list->type != XML_NAMESPACE_DECL)
    {
      do
      {
        if (v2->doc != doc) {
          xmlSetTreeDoc(v2, doc);
        }
        xmlNodePtr v2 = v2->next;
      }

      while (v2);
    }
  }

xmlNodePtr xmlNewChild(xmlNodePtr parent, xmlNsPtr ns, const xmlChar *name, const xmlChar *content)
{
  xmlNodePtr result = 0LL;
  if (parent && name)
  {
    xmlNodePtr result = 0LL;
    HIDWORD(v6) = parent->type - 1;
    LODWORD(v6) = HIDWORD(v6);
    switch((v6 >> 1))
    {
      case 0u:
        doc = parent->doc;
        if (!ns) {
          xmlNsPtr ns = parent->ns;
        }
        goto LABEL_8;
      case 4u:
      case 6u:
        doc = (xmlDoc *)parent;
        goto LABEL_8;
      case 5u:
        doc = parent->doc;
LABEL_8:
        xmlNodePtr result = xmlNewDocNode(doc, ns, name, content);
        if (result)
        {
          result->xmlElementType type = XML_ELEMENT_NODE;
          result->xmlNodePtr parent = parent;
          result->doc = parent->doc;
          if (parent->children)
          {
            last = parent->last;
            p_last = &parent->last;
            last->xmlNodePtr next = result;
            result->prev = last;
          }

          else
          {
            parent->childreuint64_t n = result;
            p_last = &parent->last;
          }

          *p_last = result;
        }

        break;
      default:
        return result;
    }
  }

  return result;
}

void xmlNodeAddContent(xmlNodePtr cur, const xmlChar *content)
{
  if (cur)
  {
    if (content)
    {
      int v4 = xmlStrlen(content);
      xmlNodeAddContentLen(cur, content, v4);
    }
  }

void xmlNodeSetContent(xmlNodePtr cur, const xmlChar *content)
{
  if (!cur) {
    return;
  }
  xmlElementType type = cur->type;
  if (type > XML_DOCUMENT_FRAG_NODE) {
    return;
  }
  int v5 = 1 << type;
  if ((v5 & 0x1F8) != 0)
  {
    unint64_t v6 = cur->content;
    p_properties = &cur->properties;
    if (v6) {
      BOOL v8 = v6 == (xmlChar *)p_properties;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8) {
      goto LABEL_13;
    }
    doc = cur->doc;
    if (doc)
    {
      dict = doc->dict;
      if (dict)
      {
        if (xmlDictOwns(dict, v6))
        {
LABEL_13:
          childreuint64_t n = cur->children;
          if (children) {
            xmlFreeNodeList(children);
          }
          cur->childreuint64_t n = 0LL;
          cur->last = 0LL;
          if (content) {
            int v12 = xmlStrdup(content);
          }
          else {
            int v12 = 0LL;
          }
          cur->content = v12;
          void *p_properties = 0LL;
          cur->nsDef = 0LL;
          return;
        }

        unint64_t v6 = cur->content;
      }
    }

    xmlFree(v6);
    goto LABEL_13;
  }

  if ((v5 & 0x806) != 0)
  {
    xmlNodePtr v13 = cur->children;
    if (v13) {
      xmlFreeNodeList(v13);
    }
    xmlNodePtr NodeList = xmlStringGetNodeList(cur->doc, content);
    cur->childreuint64_t n = NodeList;
    if (NodeList)
    {
      xmlNodePtr next = NodeList->next;
      if (next)
      {
        do
        {
          uint64_t v16 = next;
          NodeList->xmlNodePtr parent = cur;
          xmlNodePtr next = next->next;
          xmlNodePtr NodeList = v16;
        }

        while (next);
      }

      else
      {
        uint64_t v16 = NodeList;
      }

      v16->xmlNodePtr parent = cur;
      cur->last = v16;
    }

    else
    {
      cur->last = 0LL;
    }
  }

xmlNode *xmlAddPropSibling(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a2 + 8) != 2) {
    return 0LL;
  }
  xmlNodePtr v3 = (xmlNode *)a3;
  if (*(_DWORD *)(a3 + 8) != 2) {
    return 0LL;
  }
  xmlNodePtr next = (_xmlNode *)a2;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 8) != 2) {
      return 0LL;
    }
  }

  uint64_t v6 = *(void *)(a3 + 72);
  uint64_t v7 = *(void *)(a2 + 40);
  BOOL v8 = *(xmlChar **)(a3 + 16);
  if (v6) {
    xmlNodePtr v9 = *(const xmlChar **)(v6 + 16);
  }
  else {
    xmlNodePtr v9 = 0LL;
  }
  xmlAttributePtr PropNodeInternal = xmlGetPropNodeInternal(v7, v8, v9, 1);
  doc = next->doc;
  if (v3->doc != doc) {
    xmlSetTreeDoc(v3, doc);
  }
  xmlNodePtr parent = next->parent;
  v3->xmlNodePtr parent = parent;
  v3->prev = (_xmlNode *)a1;
  if (!a1)
  {
    v3->xmlNodePtr next = next;
    goto LABEL_16;
  }

  v3->xmlNodePtr next = *(_xmlNode **)(a1 + 48);
  *(void *)(a1 + 48) = v3;
  xmlNodePtr next = v3->next;
  if (next) {
LABEL_16:
  }
    next->prev = v3;
  if (!v3->prev && parent) {
    parent->properties = (_xmlAttr *)v3;
  }
  if (PropNodeInternal && PropNodeInternal->type != XML_ATTRIBUTE_DECL) {
    xmlRemoveProp((xmlAttrPtr)PropNodeInternal);
  }
  return v3;
}

xmlNodePtr xmlAddPrevSibling(xmlNodePtr cur, xmlNodePtr elem)
{
  if (cur)
  {
    xmlNodePtr v3 = cur;
    cur = 0LL;
    if (elem)
    {
      if (v3->type != XML_NAMESPACE_DECL)
      {
        cur = 0LL;
        if (v3 != elem && elem->type != XML_NAMESPACE_DECL)
        {
          xmlUnlinkNode(elem);
          xmlElementType type = elem->type;
          if (type == XML_ATTRIBUTE_NODE)
          {
            return xmlAddPropSibling((uint64_t)v3->prev, (uint64_t)v3, (uint64_t)elem);
          }

          else
          {
            if (type != XML_TEXT_NODE) {
              goto LABEL_14;
            }
            if (v3->type == XML_TEXT_NODE)
            {
              int v5 = xmlStrdup(elem->content);
              uint64_t v6 = xmlStrcat(v5, v3->content);
              xmlNodeSetContent(v3, v6);
              xmlFree(v6);
              xmlFreeNode(elem);
              return v3;
            }

            prev = v3->prev;
            if (prev && prev->type == XML_TEXT_NODE && v3->name == prev->name)
            {
              xmlNodeAddContent(prev, elem->content);
              xmlFreeNode(elem);
              return v3->prev;
            }

            else
            {
LABEL_14:
              doc = v3->doc;
              if (elem->doc != doc) {
                xmlSetTreeDoc(elem, doc);
              }
              xmlNodePtr parent = v3->parent;
              elem->xmlNodePtr parent = parent;
              elem->xmlNodePtr next = v3;
              elem->prev = v3->prev;
              v3->prev = elem;
              xmlNodePtr v10 = elem->prev;
              if (v10) {
                v10->xmlNodePtr next = elem;
              }
              if (parent)
              {
                if (parent->children == v3) {
                  parent->childreuint64_t n = elem;
                }
              }

              return elem;
            }
          }
        }
      }
    }
  }

  return cur;
}

xmlNodePtr xmlAddSibling(xmlNodePtr cur, xmlNodePtr elem)
{
  if (!cur) {
    return 0LL;
  }
  xmlNodePtr last = 0LL;
  if (elem)
  {
    xmlElementType type = cur->type;
    if (type != XML_NAMESPACE_DECL)
    {
      xmlNodePtr last = 0LL;
      if (cur != elem && elem->type != XML_NAMESPACE_DECL)
      {
        if (type == XML_ATTRIBUTE_NODE
          || (xmlNodePtr parent = cur->parent) == 0LL
          || !parent->children
          || (xmlNodePtr last = parent->last) == 0LL
          || last->next)
        {
          do
          {
            xmlNodePtr last = cur;
            cur = cur->next;
          }

          while (cur);
        }

        xmlUnlinkNode(elem);
        xmlElementType v6 = elem->type;
        if (last->type != XML_TEXT_NODE || v6 != XML_TEXT_NODE)
        {
          if (v6 == XML_ATTRIBUTE_NODE) {
            return xmlAddPropSibling((uint64_t)last, (uint64_t)last, (uint64_t)elem);
          }
          goto LABEL_21;
        }

        if (last->name != elem->name)
        {
LABEL_21:
          doc = last->doc;
          if (elem->doc != doc) {
            xmlSetTreeDoc(elem, doc);
          }
          xmlNodePtr v10 = last->parent;
          elem->xmlNodePtr next = 0LL;
          elem->prev = last;
          elem->xmlNodePtr parent = v10;
          last->xmlNodePtr next = elem;
          if (v10) {
            v10->xmlNodePtr last = elem;
          }
          return elem;
        }

        xmlNodeAddContent(last, elem->content);
        xmlFreeNode(elem);
      }
    }
  }

  return last;
}

xmlNodePtr xmlAddChildList(xmlNodePtr parent, xmlNodePtr cur)
{
  if (!parent) {
    return 0LL;
  }
  xmlNodePtr v2 = cur;
  xmlNodePtr v3 = 0LL;
  if (cur && parent->type != XML_NAMESPACE_DECL)
  {
    xmlElementType type = cur->type;
    if (type == XML_NAMESPACE_DECL) {
      return 0LL;
    }
    if (parent->children)
    {
      if (type == XML_TEXT_NODE)
      {
        xmlNodePtr last = parent->last;
        if (last->type == XML_TEXT_NODE && cur->name == last->name)
        {
          xmlNodeAddContent(last, cur->content);
          xmlNodePtr next = v2->next;
          xmlFreeNode(v2);
          xmlNodePtr v2 = next;
          if (!next) {
            return parent->last;
          }
        }
      }

      BOOL v8 = parent->last;
      v8->xmlNodePtr next = v2;
      v2->prev = v8;
    }

    else
    {
      parent->childreuint64_t n = cur;
    }

    p_xmlNodePtr next = &v2->next;
    xmlNodePtr v9 = v2->next;
    if (v9)
    {
      xmlNodePtr v3 = v2;
      do
      {
        v3->xmlNodePtr parent = parent;
        doc = parent->doc;
        if (v3->doc != doc)
        {
          xmlSetTreeDoc(v3, doc);
          xmlNodePtr v9 = *p_next;
        }

        xmlNodePtr v3 = v9;
        p_xmlNodePtr next = &v9->next;
        xmlNodePtr v9 = v9->next;
      }

      while (v9);
    }

    else
    {
      xmlNodePtr v3 = v2;
    }

    v3->xmlNodePtr parent = parent;
    int v12 = parent->doc;
    if (v3->doc != v12) {
      xmlSetTreeDoc(v3, v12);
    }
    parent->xmlNodePtr last = v3;
  }

  return v3;
}

xmlNodePtr xmlAddChild(xmlNodePtr parent, xmlNodePtr cur)
{
  if (parent)
  {
    xmlNodePtr v3 = parent;
    xmlNodePtr parent = 0LL;
    if (cur)
    {
      xmlElementType type = v3->type;
      if (type != XML_NAMESPACE_DECL)
      {
        xmlNodePtr parent = 0LL;
        if (v3 != cur)
        {
          xmlElementType v5 = cur->type;
          if (v5 != XML_NAMESPACE_DECL)
          {
            if (v5 == XML_TEXT_NODE)
            {
              if (type == XML_TEXT_NODE && v3->content && v3->name == cur->name) {
                goto LABEL_20;
              }
              xmlNodePtr last = v3->last;
              if (last && last->type == XML_TEXT_NODE && last != cur && last->name == cur->name)
              {
                xmlNodeAddContent(last, cur->content);
                xmlFreeNode(cur);
                return v3->last;
              }
            }

            uint64_t v7 = cur->parent;
            cur->xmlNodePtr parent = v3;
            doc = cur->doc;
            xmlNodePtr v9 = v3->doc;
            if (doc != v9) {
              xmlSetTreeDoc(cur, v9);
            }
            if (v7 == v3) {
              return cur;
            }
            xmlElementType v10 = v3->type;
            if (v10 == XML_TEXT_NODE)
            {
              if (v3->content)
              {
LABEL_20:
                xmlNodeAddContent(v3, cur->content);
                xmlFreeNode(cur);
                return v3;
              }

              if (cur->type == XML_ATTRIBUTE_NODE) {
                return 0LL;
              }
            }

            else if (cur->type == XML_ATTRIBUTE_NODE)
            {
              if (v10 != XML_ELEMENT_NODE) {
                return 0LL;
              }
              if (!v3->properties) {
                goto LABEL_43;
              }
              xmlNsPtr ns = cur->ns;
              if (ns) {
                href = ns->href;
              }
              else {
                href = 0LL;
              }
              xmlAttributePtr PropNodeInternal = xmlGetPropNodeInternal((uint64_t)v3, (xmlChar *)cur->name, href, 1);
              uint64_t v15 = (xmlAttr *)PropNodeInternal;
              if (PropNodeInternal
                && PropNodeInternal != (xmlAttributePtr)cur
                && PropNodeInternal->type != XML_ATTRIBUTE_DECL)
              {
                xmlUnlinkNode((xmlNodePtr)PropNodeInternal);
                xmlFreeProp(v15);
              }

              if (v15 == (xmlAttr *)cur) {
                return cur;
              }
              properties = (_xmlNode *)v3->properties;
              if (properties)
              {
                do
                {
                  xmlNodePtr v17 = properties;
                  properties = properties->next;
                }

                while (properties);
                v17->xmlNodePtr next = cur;
                cur->prev = v17;
              }

              else
              {
LABEL_43:
                v3->properties = (_xmlAttr *)cur;
              }

              return cur;
            }

            if (v3->children)
            {
              xmlNodePtr v13 = v3->last;
              v13->xmlNodePtr next = cur;
              cur->prev = v13;
            }

            else
            {
              v3->childreuint64_t n = cur;
            }

            v3->xmlNodePtr last = cur;
            return cur;
          }
        }
      }
    }
  }

  return parent;
}

xmlAttrPtr xmlHasNsProp(const xmlNode *node, const xmlChar *name, const xmlChar *nameSpace)
{
  return (xmlAttrPtr)xmlGetPropNodeInternal((uint64_t)node, (xmlChar *)name, nameSpace, 1);
}

xmlNodePtr xmlGetLastChild(xmlNodePtr parent)
{
  if (parent)
  {
    if (parent->type == XML_NAMESPACE_DECL) {
      return 0LL;
    }
    else {
      return parent->last;
    }
  }

  return parent;
}

unint64_t xmlChildElementCount(unint64_t parent)
{
  if (parent)
  {
    unsigned int v1 = *(_DWORD *)(parent + 8);
    BOOL v2 = v1 > 0xD;
    int v3 = (1 << v1) & 0x2A42;
    if (v2 || v3 == 0) {
      return 0LL;
    }
    uint64_t v5 = *(void *)(parent + 24);
    if (!v5)
    {
      return 0LL;
    }

    else
    {
      xmlNodePtr parent = 0LL;
      do
      {
        if (*(_DWORD *)(v5 + 8) == 1) {
          ++parent;
        }
        uint64_t v5 = *(void *)(v5 + 48);
      }

      while (v5);
    }
  }

  return parent;
}

xmlNodePtr xmlFirstElementChild(xmlNodePtr parent)
{
  if (parent)
  {
    xmlElementType type = parent->type;
    BOOL v2 = type > XML_HTML_DOCUMENT_NODE;
    int v3 = (1 << type) & 0x2A42;
    if (v2 || v3 == 0)
    {
      return 0LL;
    }

    else
    {
      for (xmlNodePtr parent = parent->children; parent; xmlNodePtr parent = parent->next)
      {
        if (parent->type == XML_ELEMENT_NODE) {
          break;
        }
      }
    }
  }

  return parent;
}

xmlNodePtr xmlLastElementChild(xmlNodePtr parent)
{
  if (parent)
  {
    xmlElementType type = parent->type;
    BOOL v2 = type > XML_HTML_DOCUMENT_NODE;
    int v3 = (1 << type) & 0x2A42;
    if (v2 || v3 == 0)
    {
      return 0LL;
    }

    else
    {
      for (xmlNodePtr parent = parent->last; parent; xmlNodePtr parent = parent->prev)
      {
        if (parent->type == XML_ELEMENT_NODE) {
          break;
        }
      }
    }
  }

  return parent;
}

xmlNodePtr xmlPreviousElementSibling(xmlNodePtr node)
{
  if (node)
  {
    xmlElementType type = node->type;
    BOOL v2 = type > XML_XINCLUDE_END;
    int v3 = (1 << type) & 0x1801FA;
    if (v2 || v3 == 0)
    {
      return 0LL;
    }

    else
    {
      do
        node = node->prev;
      while (node && node->type != XML_ELEMENT_NODE);
    }
  }

  return node;
}

xmlNodePtr xmlNextElementSibling(xmlNodePtr node)
{
  if (node)
  {
    xmlElementType type = node->type;
    BOOL v2 = type > XML_XINCLUDE_END;
    int v3 = (1 << type) & 0x1841FA;
    if (v2 || v3 == 0)
    {
      return 0LL;
    }

    else
    {
      do
        node = node->next;
      while (node && node->type != XML_ELEMENT_NODE);
    }
  }

  return node;
}

xmlNodePtr xmlReplaceNode(xmlNodePtr old, xmlNodePtr cur)
{
  xmlNodePtr result = 0LL;
  if (old && old != cur)
  {
    xmlElementType type = old->type;
    if (type == XML_NAMESPACE_DECL || !old->parent)
    {
      return 0LL;
    }

    else
    {
      if (!cur || (xmlElementType v6 = cur->type, v6 == XML_NAMESPACE_DECL))
      {
        xmlUnlinkNode(old);
        return old;
      }

      BOOL v7 = type == XML_ATTRIBUTE_NODE;
      char v8 = !v7;
      if (v6 == XML_ATTRIBUTE_NODE) {
        BOOL v7 = v8;
      }
      if (v7) {
        return old;
      }
      xmlUnlinkNode(cur);
      xmlSetTreeDoc(cur, old->doc);
      xmlNodePtr parent = old->parent;
      xmlNodePtr next = old->next;
      cur->xmlNodePtr parent = parent;
      cur->xmlNodePtr next = next;
      if (next) {
        next->prev = cur;
      }
      prev = old->prev;
      cur->prev = prev;
      if (prev) {
        prev->xmlNodePtr next = cur;
      }
      if (parent)
      {
        if (cur->type == XML_ATTRIBUTE_NODE)
        {
          properties = (xmlNode *)parent->properties;
          p_properties = &parent->properties;
          xmlNodePtr v13 = properties;
        }

        else
        {
          if (parent->children == old) {
            parent->childreuint64_t n = cur;
          }
          xmlNodePtr last = parent->last;
          p_properties = &parent->last;
          xmlNodePtr v13 = last;
        }

        if (v13 == old) {
          void *p_properties = cur;
        }
      }

      old->xmlNodePtr parent = 0LL;
      old->xmlNodePtr next = 0LL;
      xmlNodePtr result = old;
      old->prev = 0LL;
    }
  }

  return result;
}

xmlNsPtr xmlCopyNamespace(xmlNsPtr cur)
{
  if (cur && cur->type == XML_NAMESPACE_DECL) {
    return xmlNewNs(0LL, cur->href, cur->prefix);
  }
  else {
    return 0LL;
  }
}

xmlNsPtr xmlCopyNamespaceList(xmlNsPtr cur)
{
  if (cur)
  {
    xmlNsPtr v1 = cur;
    BOOL v2 = 0LL;
    int v3 = 0LL;
    do
    {
      if (v1->type == XML_NAMESPACE_DECL) {
        int v4 = xmlNewNs(0LL, v1->href, v1->prefix);
      }
      else {
        int v4 = 0LL;
      }
      cur = v4;
      if (v2)
      {
        v2->xmlNodePtr next = v4;
        cur = v3;
      }

      xmlNsPtr v1 = v1->next;
      BOOL v2 = v4;
      int v3 = cur;
    }

    while (v1);
  }

  return cur;
}

xmlAttrPtr xmlCopyProp(xmlNodePtr target, xmlAttrPtr cur)
{
  return xmlCopyPropInternal(0LL, (uint64_t)target, (uint64_t)cur);
}

xmlAttrPtr xmlCopyPropInternal(xmlDoc *a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 0LL;
  }
  if (a2)
  {
    if (*(_DWORD *)(a2 + 8) == 1)
    {
      a1 = *(xmlDoc **)(a2 + 64);
LABEL_10:
      BOOL v7 = *(const xmlChar **)(a3 + 16);
      goto LABEL_11;
    }

    return 0LL;
  }

  if (a1) {
    goto LABEL_10;
  }
  uint64_t v6 = *(void *)(a3 + 40);
  if (v6 || (uint64_t v6 = *(void *)(a3 + 24)) != 0)
  {
    a1 = *(xmlDoc **)(v6 + 64);
    goto LABEL_10;
  }

  BOOL v7 = *(const xmlChar **)(a3 + 16);
  a1 = 0LL;
LABEL_11:
  xmlAttrPtr v8 = xmlNewDocProp(a1, v7, 0LL);
  xmlAttrPtr v5 = v8;
  if (!v8) {
    return v5;
  }
  xmlNsPtr v9 = 0LL;
  v8->xmlNodePtr parent = (_xmlNode *)a2;
  if (!a2) {
    goto LABEL_24;
  }
  uint64_t v10 = *(void *)(a3 + 72);
  if (!v10) {
    goto LABEL_24;
  }
  xmlNsPtr v11 = xmlSearchNs(*(xmlDocPtr *)(a2 + 64), (xmlNodePtr)a2, *(const xmlChar **)(v10 + 24));
  if (!v11)
  {
    xmlNsPtr v13 = xmlSearchNs( *(xmlDocPtr *)(a3 + 64),  *(xmlNodePtr *)(a3 + 40),  *(const xmlChar **)(*(void *)(a3 + 72) + 24LL));
    if (!v13) {
      goto LABEL_25;
    }
    int v14 = 0LL;
    uint64_t v15 = (xmlNode *)a2;
    do
    {
      uint64_t v16 = v14;
      int v14 = v15;
      uint64_t v15 = v15->parent;
    }

    while (v15);
    if (v14 == *(xmlNode **)(a2 + 64)) {
      int v14 = v16;
    }
    xmlNsPtr v12 = xmlNewNs(v14, v13->href, v13->prefix);
    goto LABEL_23;
  }

  xmlNsPtr v9 = v11;
  if (!xmlStrEqual(v11->href, *(const xmlChar **)(*(void *)(a3 + 72) + 16LL)))
  {
    xmlNsPtr v12 = xmlNewReconciledNs(*(xmlDocPtr *)(a2 + 64), (xmlNodePtr)a2, *(void *)(a3 + 72));
LABEL_23:
    xmlNsPtr v9 = v12;
  }

xmlAttrPtr xmlCopyPropList(xmlNodePtr target, xmlAttrPtr cur)
{
  xmlAttrPtr v2 = cur;
  if (!target)
  {
    if (cur) {
      goto LABEL_9;
    }
    return 0LL;
  }

  if (target->type != XML_ELEMENT_NODE || cur == 0LL) {
    return 0LL;
  }
LABEL_9:
  uint64_t v6 = 0LL;
  BOOL v7 = 0LL;
  do
  {
    xmlAttrPtr result = xmlCopyPropInternal(0LL, (uint64_t)target, (uint64_t)v2);
    if (!result) {
      break;
    }
    xmlAttrPtr v8 = result;
    if (v6)
    {
      v6->xmlNodePtr next = result;
      result->prev = v6;
      xmlAttrPtr result = v7;
    }

    xmlAttrPtr v2 = v2->next;
    uint64_t v6 = v8;
    BOOL v7 = result;
  }

  while (v2);
  return result;
}

xmlNodePtr xmlCopyNode(xmlNodePtr node, int recursive)
{
  return xmlStaticCopyNode(node, 0LL, 0LL, recursive);
}

xmlNodePtr xmlStaticCopyNode(xmlNodePtr result, xmlDoc *a2, xmlNode *a3, int a4)
{
  if (!result) {
    return result;
  }
  uint64_t v7 = (uint64_t)result;
  int v8 = result->type - 2;
  xmlAttrPtr result = 0LL;
  switch(v8)
  {
    case 0:
      return (xmlNodePtr)xmlCopyPropInternal(a2, (uint64_t)a3, v7);
    case 7:
    case 11:
    case 19:
      return (xmlNodePtr)xmlCopyDoc((xmlDocPtr)v7, a4);
    case 8:
    case 10:
    case 12:
    case 13:
    case 14:
    case 15:
      return result;
    case 16:
      return (xmlNodePtr)xmlCopyNamespaceList((xmlNsPtr)v7);
    default:
      xmlNsPtr v9 = (xmlNode *)xmlMalloc(0x78uLL);
      if (!v9)
      {
        __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"copying node");
        return 0LL;
      }

      uint64_t v10 = v9;
      *(void *)&v9->line = 0LL;
      *(_OWORD *)&v9->content = 0u;
      *(_OWORD *)&v9->nsDef = 0u;
      *(_OWORD *)&v9->xmlNodePtr next = 0u;
      *(_OWORD *)&v9->doc = 0u;
      *(_OWORD *)&v9->name = 0u;
      *(_OWORD *)&v9->xmlNodePtr last = 0u;
      *(_OWORD *)&v9->_private = 0u;
      v9->xmlElementType type = *(_DWORD *)(v7 + 8);
      v9->doc = a2;
      v9->xmlNodePtr parent = a3;
      xmlNsPtr v11 = *(const xmlChar **)(v7 + 16);
      xmlNsPtr v12 = "text";
      if (v11 == "text") {
        goto LABEL_18;
      }
      xmlNsPtr v12 = "textnoenc";
      if (v11 == "textnoenc") {
        goto LABEL_18;
      }
      xmlNsPtr v12 = "comment";
      if (v11 == "comment") {
        goto LABEL_18;
      }
      if (v11)
      {
        if (a2 && (dict = a2->dict) != 0LL) {
          xmlNsPtr v12 = xmlDictLookup(dict, v11, -1);
        }
        else {
          xmlNsPtr v12 = xmlStrdup(*(const xmlChar **)(v7 + 16));
        }
LABEL_18:
        v10->name = v12;
      }

      unsigned int v14 = *(_DWORD *)(v7 + 8);
      if (v14 == 1)
      {
        v10->line = *(_WORD *)(v7 + 112);
      }

      else
      {
        uint64_t v15 = *(const xmlChar **)(v7 + 80);
        if (v15 && (v14 > 0x14 || ((1 << v14) & 0x180020) == 0)) {
          v10->content = xmlStrdup(v15);
        }
      }

      if (!a3) {
        goto LABEL_80;
      }
      if (__xmlRegisterCallbacks && *__xmlRegisterNodeDefaultValue())
      {
        uint64_t v16 = __xmlRegisterNodeDefaultValue();
        ((void (*)(xmlNode *))*v16)(v10);
      }

      xmlAttrPtr result = xmlAddChild(a3, v10);
      if (result == v10)
      {
LABEL_80:
        if (!a4) {
          goto LABEL_73;
        }
        int v17 = *(_DWORD *)(v7 + 8);
        if (v17 == 19 || v17 == 1)
        {
          int v18 = *(xmlNs **)(v7 + 96);
          if (v18) {
            v10->nsDef = xmlCopyNamespaceList(v18);
          }
        }

        uint64_t v19 = *(void *)(v7 + 72);
        if (v19)
        {
          xmlNsPtr v20 = xmlSearchNs(a2, v10, *(const xmlChar **)(v19 + 24));
          if (!v20)
          {
            xmlNsPtr v21 = xmlSearchNs(*(xmlDocPtr *)(v7 + 64), (xmlNodePtr)v7, *(const xmlChar **)(*(void *)(v7 + 72) + 24LL));
            if (v21)
            {
              uint64_t v22 = v10;
              do
              {
                uint64_t v23 = v22;
                uint64_t v22 = v22->parent;
              }

              while (v22);
              xmlNsPtr v20 = xmlNewNs(v23, v21->href, v21->prefix);
            }

            else
            {
              xmlNsPtr v20 = xmlNewReconciledNs(a2, v10, *(void *)(v7 + 72));
            }
          }

          v10->xmlNsPtr ns = v20;
        }

        int v24 = *(_DWORD *)(v7 + 8);
        if (v24 == 19 || v24 == 1)
        {
          xmlEntityPtr v26 = *(xmlAttr **)(v7 + 88);
          if (v26)
          {
            v10->properties = xmlCopyPropList(v10, v26);
            int v24 = *(_DWORD *)(v7 + 8);
          }
        }

        if (v24 == 5)
        {
          if (a2 && *(xmlDoc **)(v7 + 64) == a2) {
            xmlEntityPtr DocEntity = *(xmlEntityPtr *)(v7 + 24);
          }
          else {
            xmlEntityPtr DocEntity = xmlGetDocEntity(a2, v10->name);
          }
          v10->childreuint64_t n = (_xmlNode *)DocEntity;
          v10->xmlNodePtr last = (_xmlNode *)DocEntity;
          goto LABEL_73;
        }

        if (a4 == 2 || (uint64_t v28 = *(void *)(v7 + 24)) == 0)
        {
LABEL_73:
          if (!a3 && __xmlRegisterCallbacks)
          {
            if (*__xmlRegisterNodeDefaultValue())
            {
              xmlEntityPtr v34 = __xmlRegisterNodeDefaultValue();
              ((void (*)(xmlNode *))*v34)(v10);
            }
          }

          return v10;
        }

        uint64_t v29 = xmlStaticCopyNode(*(void *)(v7 + 24), a2, v10, 2LL);
        if (v29)
        {
          p_private = &v10->_private;
          do
          {
            uint64_t v31 = p_private[4];
            if (v31 != v29)
            {
              if (v31)
              {
                *(void *)(v29 + 56) = v31;
                xmlNodePtr v32 = (uint64_t *)(v31 + 48);
              }

              else
              {
                xmlNodePtr v32 = p_private + 3;
              }

              *xmlNodePtr v32 = v29;
              p_private[4] = v29;
            }

            if (*(_DWORD *)(v28 + 8) == 5 || (uint64_t v33 = *(void *)(v28 + 24)) == 0)
            {
              while (1)
              {
                uint64_t v33 = *(void *)(v28 + 48);
                if (v33) {
                  break;
                }
                uint64_t v28 = *(void *)(v28 + 40);
                p_private = (void *)p_private[5];
                if (v28 == v7) {
                  goto LABEL_73;
                }
              }

              uint64_t v29 = (uint64_t)p_private;
            }

            p_private = (void *)v29;
            uint64_t v29 = xmlStaticCopyNode(v33, a2, v29, 2LL);
            uint64_t v28 = v33;
          }

          while (v29);
        }

        xmlFreeNode(v10);
        return 0LL;
      }

      return result;
  }

xmlNodePtr xmlDocCopyNode(xmlNodePtr node, xmlDocPtr doc, int recursive)
{
  return xmlStaticCopyNode(node, doc, 0LL, recursive);
}

xmlNodePtr xmlDocCopyNodeList(xmlDocPtr doc, xmlNodePtr node)
{
  return xmlStaticCopyNodeList((xmlDtdPtr)node, (uint64_t)doc, 0LL);
}

xmlNode *xmlStaticCopyNodeList(xmlDtdPtr dtd, uint64_t a2, xmlNodePtr parent)
{
  if (!dtd) {
    return 0LL;
  }
  xmlDtdPtr v5 = dtd;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  int v8 = 0LL;
  while (2)
  {
    xmlDtdPtr v9 = v5;
    while (1)
    {
      if (v9->type != XML_DTD_NODE)
      {
        uint64_t v10 = xmlStaticCopyNode(v9, a2, parent, 1LL);
        xmlDtdPtr v5 = v9;
        if (!v10)
        {
LABEL_20:
          xmlFreeNodeList(v8);
          return 0LL;
        }

xmlNodePtr xmlCopyNodeList(xmlNodePtr node)
{
  return xmlStaticCopyNodeList((xmlDtdPtr)node, 0LL, 0LL);
}

xmlDtdPtr xmlCopyDtd(xmlDtdPtr dtd)
{
  if (!dtd) {
    return 0LL;
  }
  xmlDtdPtr v2 = xmlNewDtd(0LL, dtd->name, dtd->ExternalID, dtd->SystemID);
  if (v2)
  {
    entities = (xmlEntitiesTable *)dtd->entities;
    if (entities) {
      v2->entities = xmlCopyEntitiesTable(entities);
    }
    notatioxmlNsPtr ns = (xmlNotationTable *)dtd->notations;
    if (notations) {
      v2->notatioxmlNsPtr ns = xmlCopyNotationTable(notations);
    }
    elements = (xmlElementTable *)dtd->elements;
    if (elements) {
      v2->elements = xmlCopyElementTable(elements);
    }
    attributes = (xmlAttributeTable *)dtd->attributes;
    if (attributes) {
      v2->attributes = xmlCopyAttributeTable(attributes);
    }
    pentities = (xmlEntitiesTable *)dtd->pentities;
    if (pentities) {
      v2->pentities = xmlCopyEntitiesTable(pentities);
    }
    childreuint64_t n = dtd->children;
    if (children)
    {
      xmlDtdPtr v9 = 0LL;
      while (1)
      {
        switch(children->type)
        {
          case XML_COMMENT_NODE:
            xmlElementPtr DtdQElementDesc = (_xmlNode *)xmlStaticCopyNode(children, 0LL, 0LL, 0LL);
            if (!DtdQElementDesc) {
              goto LABEL_28;
            }
            goto LABEL_30;
          case XML_ELEMENT_DECL:
            xmlElementPtr DtdQElementDesc = (_xmlNode *)xmlGetDtdQElementDesc(v2, children->name, (const xmlChar *)children->nsDef);
            if (DtdQElementDesc) {
              goto LABEL_30;
            }
            goto LABEL_28;
          case XML_ATTRIBUTE_DECL:
            xmlElementPtr DtdQElementDesc = (_xmlNode *)xmlGetDtdQAttrDesc( v2,  *(const xmlChar **)&children->line,  children->name,  (const xmlChar *)children->psvi);
            if (DtdQElementDesc) {
              goto LABEL_30;
            }
            goto LABEL_28;
          case XML_ENTITY_DECL:
            int properties_high = HIDWORD(children->properties);
            if ((properties_high - 1) >= 3)
            {
              xmlNsPtr v12 = (xmlHashTable *)v2->pentities;
              if (!v12) {
                goto LABEL_28;
              }
            }

            else
            {
              xmlNsPtr v12 = (xmlHashTable *)v2->entities;
              if (!v12) {
                goto LABEL_28;
              }
            }

            xmlElementPtr DtdQElementDesc = (_xmlNode *)xmlHashLookup(v12, children->name);
            if (DtdQElementDesc)
            {
LABEL_30:
              p_xmlNodePtr next = &v9->next;
              if (!v9) {
                p_xmlNodePtr next = &v2->children;
              }
              *p_xmlNodePtr next = DtdQElementDesc;
              DtdQElementDesc->xmlNodePtr next = 0LL;
              DtdQElementDesc->prev = v9;
              DtdQElementDesc->xmlNodePtr parent = (_xmlNode *)v2;
              v2->xmlNodePtr last = DtdQElementDesc;
              childreuint64_t n = children->next;
              xmlDtdPtr v9 = DtdQElementDesc;
              if (!children) {
                return v2;
              }
            }

            else
            {
LABEL_28:
              childreuint64_t n = children->next;
              if (!children) {
                return v2;
              }
            }

            break;
          default:
            goto LABEL_28;
        }
      }
    }
  }

  return v2;
}

xmlDocPtr xmlCopyDoc(xmlDocPtr doc, int recursive)
{
  if (!doc) {
    return 0LL;
  }
  xmlDocPtr v4 = xmlNewDoc(doc->version);
  uint64_t v5 = (uint64_t)v4;
  if (v4)
  {
    v4->xmlElementType type = doc->type;
    name = doc->name;
    if (name) {
      *(void *)(v5 + 16) = xmlMemStrdup(name);
    }
    encoding = doc->encoding;
    if (encoding) {
      *(void *)(v5 + 112) = xmlStrdup(encoding);
    }
    URL = doc->URL;
    if (URL) {
      *(void *)(v5 + 136) = xmlStrdup(URL);
    }
    *(_DWORD *)(v5 + 14xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = doc->charset;
    *(void *)(v5 + 72) = *(void *)&doc->compression;
    if (recursive)
    {
      *(void *)(v5 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
      *(void *)(v5 + 32) = 0LL;
      intSubset = doc->intSubset;
      if (!intSubset)
      {
LABEL_13:
        oldNs = doc->oldNs;
        if (oldNs) {
          *(void *)(v5 + 96) = xmlCopyNamespaceList(oldNs);
        }
        childreuint64_t n = doc->children;
        if (children)
        {
          xmlNsPtr v13 = xmlStaticCopyNodeList((xmlDtdPtr)children, v5, (xmlNodePtr)v5);
          *(void *)(v5 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v13;
          *(void *)(v5 + 32) = 0LL;
          if (v13)
          {
            do
            {
              unsigned int v14 = v13;
              xmlNsPtr v13 = v13->next;
            }

            while (v13);
            *(void *)(v5 + 32) = v14;
          }
        }

        return (xmlDocPtr)v5;
      }

      uint64_t v10 = (xmlNode *)xmlCopyDtd(intSubset);
      *(void *)(v5 + 80) = v10;
      if (v10)
      {
        xmlSetTreeDoc(v10, (xmlDocPtr)v5);
        *(void *)(*(void *)(v5 + 80) + 40LL) = v5;
        goto LABEL_13;
      }

      xmlFreeDoc((xmlDocPtr)v5);
      return 0LL;
    }
  }

  return (xmlDocPtr)v5;
}

uint64_t xmlGetLineNo(const xmlNode *node)
{
  return xmlGetLineNoInternal((uint64_t)node, 0);
}

uint64_t xmlGetLineNoInternal(uint64_t a1, int a2)
{
  uint64_t v2 = -1LL;
  if (a1 && a2 <= 4)
  {
    uint64_t v3 = (a2 + 1);
    while (1)
    {
      unsigned int v4 = *(_DWORD *)(a1 + 8);
      if (v4 <= 8 && ((1 << v4) & 0x18A) != 0) {
        break;
      }
      uint64_t v6 = *(void *)(a1 + 56);
      if (v6
        && ((unsigned int v7 = *(_DWORD *)(v6 + 8), v8 = v7 > 8, v9 = (1 << v7) & 0x18A, !v8) ? (v10 = v9 == 0) : (v10 = 1), !v10)
        || (uint64_t v6 = *(void *)(a1 + 40)) != 0 && *(_DWORD *)(v6 + 8) == 1)
      {
        uint64_t v3 = (v3 + 1);
        a1 = v6;
        if ((_DWORD)v3 != 6) {
          continue;
        }
      }

      return -1LL;
    }

    uint64_t v2 = *(unsigned __int16 *)(a1 + 112);
    if (v2 == 0xFFFF)
    {
      if (v4 == 1)
      {
        uint64_t v12 = *(void *)(a1 + 24);
        if (v12) {
          goto LABEL_26;
        }
      }

      else if (v4 == 3)
      {
        uint64_t LineNoInternal = *(void *)(a1 + 104);
        if (LineNoInternal)
        {
LABEL_28:
          if (LineNoInternal == -1) {
            uint64_t v14 = 0xFFFFLL;
          }
          else {
            uint64_t v14 = LineNoInternal;
          }
          if (LineNoInternal != 0xFFFF) {
            return v14;
          }
          return v2;
        }
      }

      uint64_t v12 = *(void *)(a1 + 48);
      if (!v12)
      {
        uint64_t v13 = *(void *)(a1 + 56);
        if (!v13) {
          return v2;
        }
        goto LABEL_27;
      }

xmlChar *__cdecl xmlGetNodePath(const xmlNode *node)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  if (!node) {
    return 0LL;
  }
  xmlNsPtr v1 = node;
  if (node->type == XML_NAMESPACE_DECL) {
    return 0LL;
  }
  uint64_t v2 = (xmlChar *)xmlMallocAtomic(0x1F4uLL);
  if (!v2)
  {
    __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"getting node path");
    return v2;
  }

  uint64_t v3 = xmlMallocAtomic(0x1F4uLL);
  if (!v3)
  {
    __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"getting node path");
    ((void (*)(xmlChar *))xmlFree)(v2);
    return 0LL;
  }

  unsigned int v4 = v3;
  int v40 = 0;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  size_t v5 = 500LL;
  *(_OWORD *)char __str = 0u;
  __int128 v35 = 0u;
  *uint64_t v2 = 0;
  while (1)
  {
    switch(v1->type)
    {
      case XML_ELEMENT_NODE:
        xmlNsPtr ns = v1->ns;
        if (!ns) {
          goto LABEL_22;
        }
        prefix = (const char *)ns->prefix;
        if (prefix)
        {
          snprintf(__str, 0x63uLL, "%s:%s", prefix, (const char *)v1->name);
          HIBYTE(v40) = 0;
LABEL_22:
          int v12 = 1;
        }

        else
        {
          int v12 = 0;
        }

        xmlNodePtr parent = v1->parent;
        prev = v1->prev;
        if (prev)
        {
          int v23 = 0;
          do
          {
            if (prev->type == XML_ELEMENT_NODE)
            {
              if (!v12
                || xmlStrEqual(v1->name, prev->name)
                && ((int v24 = prev->ns, v25 = v1->ns, v24 == v25) || v24 && v25 && xmlStrEqual(v25->prefix, v24->prefix)))
              {
                ++v23;
              }
            }

            prev = prev->prev;
          }

          while (prev);
          if (v23)
          {
            int v9 = v23 + 1;
            goto LABEL_86;
          }
        }

        xmlNodePtr next = v1->next;
        if (next)
        {
          while (1)
          {
            if (next->type == XML_ELEMENT_NODE)
            {
              if (!v12) {
                break;
              }
              if (xmlStrEqual(v1->name, next->name))
              {
                signed int v27 = next->ns;
                uint64_t v28 = v1->ns;
                if (v27 == v28 || v27 && v28 && xmlStrEqual(v28->prefix, v27->prefix)) {
                  break;
                }
              }
            }

            xmlNodePtr next = next->next;
            if (!next)
            {
              int v9 = 0;
              goto LABEL_86;
            }
          }

          int v9 = 1;
        }

        else
        {
          int v9 = 0;
        }

        goto LABEL_86;
      case XML_ATTRIBUTE_NODE:
        uint64_t v13 = v1->ns;
        if (v13)
        {
          if (v13->prefix) {
            snprintf(__str, 0x63uLL, "%s:%s");
          }
          else {
            snprintf(__str, 0x63uLL, "%s", v1->name, v33);
          }
          HIBYTE(v40) = 0;
        }

        int v9 = 0;
        xmlNodePtr parent = v1->parent;
        goto LABEL_86;
      case XML_TEXT_NODE:
      case XML_CDATA_SECTION_NODE:
        xmlNodePtr parent = v1->parent;
        unsigned int v7 = v1->prev;
        if (v7)
        {
          int v8 = 0;
          do
          {
            if (v7->type - 3 < 2) {
              ++v8;
            }
            unsigned int v7 = v7->prev;
          }

          while (v7);
          if (v8)
          {
            int v9 = v8 + 1;
            goto LABEL_86;
          }
        }

        break;
      case XML_PI_NODE:
        snprintf(__str, 0x63uLL, "processing-instruction('%s')", (const char *)v1->name);
        HIBYTE(v40) = 0;
        xmlNodePtr parent = v1->parent;
        uint64_t v14 = v1->prev;
        if (v14)
        {
          int v15 = 0;
          do
          {
            if (v14->type == XML_PI_NODE && xmlStrEqual(v1->name, v14->name)) {
              ++v15;
            }
            uint64_t v14 = v14->prev;
          }

          while (v14);
          if (v15)
          {
            int v9 = v15 + 1;
            goto LABEL_86;
          }
        }

        int v18 = v1->next;
        if (v18)
        {
          do
          {
            if (v18->type == XML_PI_NODE)
            {
              int v9 = xmlStrEqual(v1->name, v18->name) != 0;
              if (v9) {
                goto LABEL_86;
              }
            }

            else
            {
              int v9 = 0;
            }

            int v18 = v18->next;
          }

          while (v18);
        }

        else
        {
          int v9 = 0;
        }

        goto LABEL_86;
      case XML_COMMENT_NODE:
        xmlNodePtr parent = v1->parent;
        uint64_t v16 = v1->prev;
        if (!v16) {
          goto LABEL_49;
        }
        int v17 = 0;
        do
        {
          if (v16->type == XML_COMMENT_NODE) {
            ++v17;
          }
          uint64_t v16 = v16->prev;
        }

        while (v16);
        if (v17)
        {
          int v9 = v17 + 1;
        }

        else
        {
LABEL_49:
          uint64_t v19 = v1->next;
          if (v19)
          {
            do
            {
              xmlElementType type = v19->type;
              uint64_t v19 = v19->next;
              if (v19) {
                BOOL v21 = type == XML_COMMENT_NODE;
              }
              else {
                BOOL v21 = 1;
              }
            }

            while (!v21);
            int v9 = type == XML_COMMENT_NODE;
          }

          else
          {
            int v9 = 0;
          }
        }

        goto LABEL_86;
      case XML_DOCUMENT_NODE:
      case XML_HTML_DOCUMENT_NODE:
        if (*v2 == 47) {
          goto LABEL_98;
        }
        xmlNodePtr parent = 0LL;
        int v9 = 0;
        goto LABEL_86;
      default:
        ((void (*)(void *))xmlFree)(v4);
        goto LABEL_102;
    }

    while (1)
    {
      xmlNsPtr v1 = v1->next;
      if (!v1) {
        break;
      }
      if (v1->type - 3 < 2)
      {
        int v9 = 1;
        goto LABEL_86;
      }
    }

    int v9 = 0;
LABEL_86:
    if (xmlStrlen(v2) + 120LL <= v5) {
      goto LABEL_90;
    }
    size_t v5 = 2 * v5 + xmlStrlen(v2) + 120;
    uint64_t v29 = (xmlChar *)xmlRealloc(v2, v5);
    if (!v29) {
      break;
    }
    xmlNodePtr v30 = v29;
    uint64_t v31 = xmlRealloc(v4, v5);
    if (!v31)
    {
      __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"getting node path");
      xmlFree(v4);
      ((void (*)(xmlChar *))xmlFree)(v30);
      return 0LL;
    }

    uint64_t v2 = v30;
    unsigned int v4 = v31;
LABEL_90:
    if (v9) {
      snprintf((char *)v4, v5, "%s%s[%d]%s");
    }
    else {
      snprintf((char *)v4, v5, "%s%s%s");
    }
    snprintf((char *)v2, v5, "%s", v4);
    xmlNsPtr v1 = parent;
    if (!parent)
    {
LABEL_98:
      xmlFree(v4);
      return v2;
    }
  }

  __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"getting node path");
  ((void (*)(void *))xmlFree)(v4);
LABEL_102:
  ((void (*)(xmlChar *))xmlFree)(v2);
  return 0LL;
}

xmlNodePtr xmlDocGetRootElement(xmlNodePtr doc)
{
  if (doc)
  {
    for (doc = doc->children; doc; doc = doc->next)
    {
      if (doc->type == XML_ELEMENT_NODE) {
        break;
      }
    }
  }

  return doc;
}

xmlNodePtr xmlDocSetRootElement(xmlDocPtr doc, xmlNodePtr root)
{
  uint64_t v2 = 0LL;
  if (doc && root)
  {
    if (root->type == XML_NAMESPACE_DECL)
    {
      return 0LL;
    }

    else
    {
      xmlUnlinkNode(root);
      xmlSetTreeDoc(root, doc);
      root->xmlNodePtr parent = (_xmlNode *)doc;
      childreuint64_t n = doc->children;
      if (children)
      {
        uint64_t v2 = doc->children;
        while (v2->type != XML_ELEMENT_NODE)
        {
          uint64_t v2 = v2->next;
          if (!v2)
          {
            xmlAddSibling(children, root);
            return 0LL;
          }
        }

        xmlReplaceNode(v2, root);
      }

      else
      {
        uint64_t v2 = 0LL;
        doc->childreuint64_t n = root;
        doc->xmlNodePtr last = root;
      }
    }
  }

  return v2;
}

void xmlNodeSetLang(xmlNodePtr cur, const xmlChar *lang)
{
  if (cur && cur->type - 3 >= 0x13)
  {
    unsigned int v4 = xmlSearchNsByHref(cur->doc, cur, (const xmlChar *)"http://www.w3.org/XML/1998/namespace");
    if (v4) {
      xmlSetNsProp(cur, v4, (const xmlChar *)"lang", lang);
    }
  }

xmlNsPtr xmlSearchNsByHref(xmlDocPtr doc, xmlNodePtr node, const xmlChar *href)
{
  if (!node) {
    return 0LL;
  }
  oldNs = 0LL;
  if (!href || node->type == XML_NAMESPACE_DECL) {
    return oldNs;
  }
  if (xmlStrEqual(href, (const xmlChar *)"http://www.w3.org/XML/1998/namespace"))
  {
    if (doc) {
      goto LABEL_6;
    }
    if (node->type == XML_ELEMENT_NODE)
    {
      uint64_t v16 = (_xmlNs *)xmlMalloc(0x30uLL);
      oldNs = v16;
      if (v16)
      {
        *(_OWORD *)&v16->href = 0u;
        *(_OWORD *)&v16->_private = 0u;
        *(_OWORD *)&v16->xmlNodePtr next = 0u;
        v16->xmlElementType type = XML_NAMESPACE_DECL;
        v16->href = xmlStrdup((const xmlChar *)"http://www.w3.org/XML/1998/namespace");
        oldNs->prefix = xmlStrdup((const xmlChar *)"xml");
        oldNs->xmlNodePtr next = node->nsDef;
        node->nsDef = oldNs;
      }

      else
      {
        __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"searching namespace");
      }

      return oldNs;
    }

    doc = node->doc;
    if (doc)
    {
LABEL_6:
      oldNs = doc->oldNs;
      if (oldNs) {
        return oldNs;
      }
      return (xmlNsPtr)xmlTreeEnsureXMLDecl((uint64_t)doc);
    }

    return 0LL;
  }

  xmlElementType type = node->type;
  xmlNodePtr v9 = node;
  while (1)
  {
    xmlElementType v10 = v9->type;
    if (v10 != XML_ELEMENT_NODE)
    {
      if (v10 - 5 < 2 || v10 == XML_ENTITY_DECL) {
        return 0LL;
      }
      goto LABEL_30;
    }

    oldNs = v9->nsDef;
    if (oldNs) {
      break;
    }
LABEL_23:
    if (v9 != node)
    {
      oldNs = v9->ns;
      if (oldNs)
      {
        uint64_t v14 = oldNs->href;
        if (v14)
        {
          if (xmlStrEqual(v14, href))
          {
            prefix = (xmlChar *)oldNs->prefix;
            if ((type != XML_ATTRIBUTE_NODE || prefix)
              && xmlNsInScope((uint64_t)node, (uint64_t)v9, prefix) == 1)
            {
              return oldNs;
            }
          }
        }
      }
    }

xmlAttrPtr xmlSetNsProp(xmlNodePtr node, xmlNsPtr ns, const xmlChar *name, const xmlChar *value)
{
  if (ns)
  {
    href = ns->href;
    if (!href) {
      return 0LL;
    }
  }

  else
  {
    href = 0LL;
  }

  xmlAttributePtr PropNodeInternal = xmlGetPropNodeInternal((uint64_t)node, (xmlChar *)name, href, 0);
  if (!PropNodeInternal) {
    return xmlNewPropInternal((uint64_t)node, ns, (xmlChar *)name, value, 0);
  }
  xmlAttributePtr v9 = PropNodeInternal;
  if (PropNodeInternal->atype == XML_ATTRIBUTE_ID)
  {
    xmlRemoveID(node->doc, (xmlAttrPtr)PropNodeInternal);
    v9->axmlElementType type = XML_ATTRIBUTE_ID;
  }

  p_childreuint64_t n = &v9->children;
  childreuint64_t n = v9->children;
  if (children) {
    xmlFreeNodeList(children);
  }
  *p_childreuint64_t n = 0LL;
  v9->xmlNodePtr last = 0LL;
  v9->nexth = (_xmlAttribute *)ns;
  if (value)
  {
    doc = node->doc;
    xmlNodePtr v14 = xmlNewText(value);
    if (v14)
    {
      v14->doc = doc;
      *p_childreuint64_t n = v14;
      do
      {
        xmlNodePtr v15 = v14;
        v14->xmlNodePtr parent = (_xmlNode *)v9;
        xmlNodePtr v14 = v14->next;
      }

      while (v14);
    }

    else
    {
      xmlNodePtr v15 = 0LL;
      *p_childreuint64_t n = 0LL;
    }

    v9->xmlNodePtr last = v15;
  }

  if (v9->atype == XML_ATTRIBUTE_ID) {
    xmlAddID(0LL, node->doc, value, (xmlAttrPtr)v9);
  }
  return (xmlAttrPtr)v9;
}

xmlChar *__cdecl xmlNodeGetLang(xmlChar *cur)
{
  if (cur)
  {
    xmlNsPtr v1 = (const xmlNode *)cur;
    if (*((_DWORD *)cur + 2) == 18)
    {
      return 0LL;
    }

    else
    {
      while (1)
      {
        cur = xmlGetNsProp(v1, (const xmlChar *)"lang", (const xmlChar *)"http://www.w3.org/XML/1998/namespace");
        if (cur) {
          break;
        }
        xmlNsPtr v1 = v1->parent;
        if (!v1) {
          return 0LL;
        }
      }
    }
  }

  return cur;
}

xmlChar *__cdecl xmlGetNsProp(const xmlNode *node, const xmlChar *name, const xmlChar *nameSpace)
{
  xmlAttrPtr result = (xmlChar *)xmlGetPropNodeInternal((uint64_t)node, (xmlChar *)name, nameSpace, 1);
  if (result) {
    return xmlGetPropNodeValueInternal((uint64_t)result);
  }
  return result;
}

void xmlNodeSetSpacePreserve(xmlNodePtr cur, int val)
{
  if (cur)
  {
    if (cur->type - 3 >= 0x13)
    {
      unsigned int v4 = xmlSearchNsByHref(cur->doc, cur, (const xmlChar *)"http://www.w3.org/XML/1998/namespace");
      if (v4)
      {
        if (!val)
        {
          size_t v5 = "default";
          goto LABEL_9;
        }

        if (val == 1)
        {
          size_t v5 = "preserve";
LABEL_9:
          xmlSetNsProp(cur, v4, (const xmlChar *)"space", (const xmlChar *)v5);
        }
      }
    }
  }

int xmlNodeGetSpacePreserve(const xmlNode *cur)
{
  if (!cur) {
    return -1;
  }
  xmlNsPtr v1 = cur;
  if (cur->type != XML_ELEMENT_NODE) {
    return -1;
  }
  while (1)
  {
    NsProp = xmlGetNsProp(v1, (const xmlChar *)"space", (const xmlChar *)"http://www.w3.org/XML/1998/namespace");
    if (NsProp) {
      break;
    }
LABEL_7:
    xmlNsPtr v1 = v1->parent;
    if (!v1) {
      return -1;
    }
  }

  uint64_t v3 = NsProp;
  if (xmlStrEqual(NsProp, (const xmlChar *)"preserve"))
  {
    int v4 = 1;
    goto LABEL_12;
  }

  if (!xmlStrEqual(v3, (const xmlChar *)"default"))
  {
    xmlFree(v3);
    goto LABEL_7;
  }

  int v4 = 0;
LABEL_12:
  xmlFree(v3);
  return v4;
}

void xmlNodeSetName(xmlNodePtr cur, const xmlChar *name)
{
  if (cur && name)
  {
    xmlElementType type = cur->type;
    BOOL v5 = type > XML_DOCB_DOCUMENT_NODE;
    int v6 = (1 << type) & 0x3C3D18;
    if (v5 || v6 == 0)
    {
      doc = cur->doc;
      if (doc && (dict = doc->dict) != 0LL)
      {
        xmlElementType v10 = cur->name;
        if (v10 && !xmlDictOwns(doc->dict, v10)) {
          xmlNsPtr v11 = (xmlChar *)cur->name;
        }
        else {
          xmlNsPtr v11 = 0LL;
        }
        int v12 = xmlDictLookup(dict, name, -1);
      }

      else
      {
        xmlNsPtr v11 = (xmlChar *)cur->name;
        int v12 = xmlStrdup(name);
      }

      cur->name = v12;
      if (v11) {
        xmlFree(v11);
      }
    }
  }

void xmlNodeSetBase(xmlNodePtr cur, const xmlChar *uri)
{
  if (cur)
  {
    xmlElementType type = cur->type;
    if (type > XML_DOCB_DOCUMENT_NODE) {
      goto LABEL_12;
    }
    int v5 = 1 << type;
    if ((v5 & 0x1FDDF8) != 0) {
      return;
    }
    if ((v5 & 0x202200) != 0)
    {
      name = (xmlChar *)cur[1].name;
      if (name) {
        xmlFree(name);
      }
      if (uri) {
        unsigned int v7 = xmlPathToURI(uri);
      }
      else {
        unsigned int v7 = 0LL;
      }
      cur[1].name = v7;
    }

    else
    {
LABEL_12:
      xmlNsPtr v8 = xmlSearchNsByHref(cur->doc, cur, (const xmlChar *)"http://www.w3.org/XML/1998/namespace");
      if (v8)
      {
        xmlAttributePtr v9 = v8;
        xmlElementType v10 = xmlPathToURI(uri);
        if (v10)
        {
          xmlNsPtr v11 = v10;
          xmlSetNsProp(cur, v9, (const xmlChar *)"base", v10);
          xmlFree(v11);
        }

        else
        {
          xmlSetNsProp(cur, v9, (const xmlChar *)"base", uri);
        }
      }
    }
  }

xmlChar *__cdecl xmlNodeGetBase(const xmlDoc *doc, const xmlNode *cur)
{
  uint64_t v2 = cur;
  uint64_t v3 = doc;
  if (cur)
  {
    if (cur->type == XML_NAMESPACE_DECL) {
      return 0LL;
    }
  }

  if (!doc)
  {
    uint64_t v3 = cur->doc;
    if (!v3)
    {
      char v16 = 1;
      goto LABEL_24;
    }
  }

  if (v3->type == XML_HTML_DOCUMENT_NODE)
  {
    childreuint64_t n = v3->children;
    if (children)
    {
      while (1)
      {
        name = children->name;
        if (!name) {
          return 0LL;
        }
        if (children->type == XML_ELEMENT_NODE)
        {
          if (!xmlStrcasecmp(name, (const xmlChar *)"html") || !xmlStrcasecmp(children->name, (const xmlChar *)"head"))
          {
            p_childreuint64_t n = &children->children;
            goto LABEL_15;
          }

          if (!xmlStrcasecmp(children->name, (const xmlChar *)"base")) {
            return xmlGetProp(children, (const xmlChar *)"href");
          }
        }

        p_childreuint64_t n = &children->next;
LABEL_15:
        childreuint64_t n = *p_children;
        if (!*p_children) {
          return 0LL;
        }
      }
    }

    return 0LL;
  }

  if (!cur)
  {
    URL = v3->URL;
    if (URL) {
      goto LABEL_20;
    }
    return 0LL;
  }

  char v16 = 0;
LABEL_24:
  xmlAttributePtr v9 = 0LL;
  do
  {
    xmlElementType type = v2->type;
    if (type == XML_ELEMENT_NODE)
    {
      NsProp = xmlGetNsProp(v2, (const xmlChar *)"base", (const xmlChar *)"http://www.w3.org/XML/1998/namespace");
      if (NsProp)
      {
        uint64_t v13 = NsProp;
        if (v9)
        {
          xmlNodePtr v14 = xmlBuildURI(v9, NsProp);
          xmlFree(v9);
          xmlFree(v13);
          xmlAttributePtr v9 = v14;
          if (!v14) {
            return v9;
          }
        }

        else
        {
          xmlAttributePtr v9 = NsProp;
        }

        if (!xmlStrncmp(v9, (const xmlChar *)"http://", 7)
          || !xmlStrncmp(v9, (const xmlChar *)"ftp://", 6)
          || !xmlStrncmp(v9, (const xmlChar *)"urn:", 4))
        {
          return v9;
        }
      }
    }

    else if (type == XML_ENTITY_DECL)
    {
      xmlNsPtr v8 = (const xmlChar *)v2[1]._private;
      return xmlStrdup(v8);
    }

    uint64_t v2 = v2->parent;
  }

  while (v2);
  if ((v16 & 1) != 0) {
    return v9;
  }
  URL = v3->URL;
  if (!URL) {
    return v9;
  }
  if (v9)
  {
    xmlNodePtr v15 = xmlBuildURI(v9, URL);
    xmlFree(v9);
    return v15;
  }

xmlChar *__cdecl xmlGetProp(const xmlNode *node, const xmlChar *name)
{
  xmlAttrPtr result = (xmlChar *)xmlHasProp(node, name);
  if (result) {
    return xmlGetPropNodeValueInternal((uint64_t)result);
  }
  return result;
}

int xmlNodeBufGetContent(xmlBufferPtr buffer, const xmlNode *cur)
{
  int result = -1;
  if (buffer && cur)
  {
    int v5 = xmlBufFromBuffer((uint32x2_t *)buffer);
    int NodeContent = xmlBufGetNodeContent((xmlBufPtr)v5, cur);
    uint64_t v7 = xmlBufBackToBuffer((uint64_t)v5);
    int v9 = NodeContent < 0 || v7 == 0;
    return v9 << 31 >> 31;
  }

  return result;
}

int xmlBufGetNodeContent(xmlBufPtr buf, const xmlNode *cur)
{
  int result = -1;
  if (buf && cur)
  {
    int result = 0;
    switch(cur->type)
    {
      case XML_ELEMENT_NODE:
      case XML_DOCUMENT_FRAG_NODE:
        childreuint64_t n = cur;
        while (1)
        {
          do
          {
            int v12 = children;
            xmlElementType type = children->type;
            if (type - 3 >= 2)
            {
              if (type == XML_ENTITY_REF_NODE) {
                xmlBufGetNodeContent(buf, v12);
              }
            }

            else
            {
              content = v12->content;
              if (content) {
                xmlBufCat((uint64x2_t *)buf, content);
              }
            }

            childreuint64_t n = v12->children;
          }

          while (children && children->type != XML_ENTITY_DECL);
          if (v12 == cur) {
            goto LABEL_29;
          }
          while (1)
          {
            childreuint64_t n = v12->next;
            if (children) {
              break;
            }
            int v12 = v12->parent;
            if (v12) {
              BOOL v15 = v12 == cur;
            }
            else {
              BOOL v15 = 1;
            }
            if (v15) {
              goto LABEL_29;
            }
          }
        }

      case XML_ATTRIBUTE_NODE:
        char v16 = cur->children;
        if (!v16) {
          goto LABEL_29;
        }
        do
        {
          if (v16->type == XML_TEXT_NODE) {
            xmlBufCat((uint64x2_t *)buf, v16->content);
          }
          else {
            xmlBufGetNodeContent(buf, v16);
          }
          int result = 0;
          char v16 = v16->next;
        }

        while (v16);
        return result;
      case XML_TEXT_NODE:
      case XML_CDATA_SECTION_NODE:
      case XML_PI_NODE:
      case XML_COMMENT_NODE:
        p_content = (const xmlChar **)&cur->content;
        goto LABEL_5;
      case XML_ENTITY_REF_NODE:
        xmlEntityPtr DocEntity = xmlGetDocEntity(cur->doc, cur->name);
        if (DocEntity)
        {
          int v18 = DocEntity->children;
          if (v18)
          {
            do
            {
              xmlBufGetNodeContent(buf, v18);
              int result = 0;
              int v18 = v18->next;
            }

            while (v18);
          }

          else
          {
LABEL_29:
            int result = 0;
          }
        }

        else
        {
          int result = -1;
        }

        break;
      case XML_DOCUMENT_NODE:
      case XML_HTML_DOCUMENT_NODE:
      case XML_DOCB_DOCUMENT_NODE:
        for (uint64_t i = cur->children; i; uint64_t i = i->next)
        {
          unsigned int v7 = i->type;
          BOOL v8 = v7 > 4;
          int v9 = (1 << v7) & 0x1A;
          if (!v8 && v9 != 0) {
            xmlBufGetNodeContent(buf, i);
          }
        }

        goto LABEL_29;
      case XML_NAMESPACE_DECL:
        p_content = &cur->name;
LABEL_5:
        xmlBufCat((uint64x2_t *)buf, *p_content);
        goto LABEL_29;
      default:
        return result;
    }
  }

  return result;
}

xmlChar *__cdecl xmlNodeGetContent(const xmlNode *cur)
{
  if (!cur) {
    return 0LL;
  }
  switch(cur->type)
  {
    case XML_ELEMENT_NODE:
    case XML_DOCUMENT_FRAG_NODE:
      Size = (xmlBuf *)xmlBufCreateSize(64LL);
      if (!Size) {
        return 0LL;
      }
      goto LABEL_10;
    case XML_ATTRIBUTE_NODE:
      return xmlGetPropNodeValueInternal((uint64_t)cur);
    case XML_TEXT_NODE:
    case XML_CDATA_SECTION_NODE:
    case XML_PI_NODE:
    case XML_COMMENT_NODE:
      content = cur->content;
      if (!content) {
        return 0LL;
      }
      return xmlStrdup(content);
    case XML_ENTITY_REF_NODE:
      if (!xmlGetDocEntity(cur->doc, cur->name)) {
        return 0LL;
      }
      goto LABEL_9;
    case XML_DOCUMENT_NODE:
    case XML_HTML_DOCUMENT_NODE:
    case XML_DOCB_DOCUMENT_NODE:
LABEL_9:
      Size = (xmlBuf *)xmlBufCreate();
      if (!Size) {
        return 0LL;
      }
LABEL_10:
      int v5 = (uint64_t *)Size;
      xmlBufGetNodeContent(Size, cur);
      int v6 = (xmlChar *)xmlBufDetach(v5);
      xmlBufFree(v5);
      int result = v6;
      break;
    case XML_NAMESPACE_DECL:
      content = cur->name;
      return xmlStrdup(content);
    default:
      return 0LL;
  }

  return result;
}

xmlChar *xmlGetPropNodeValueInternal(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  if (v1 == 16) {
    return xmlStrdup(*(const xmlChar **)(a1 + 88));
  }
  if (v1 != 2) {
    return 0LL;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    return xmlStrdup((const xmlChar *)&byte_181A3ACBA);
  }
  int result = xmlNodeListGetStringInternal(*(xmlDoc **)(a1 + 64), v2, 1, 0);
  if (!result) {
    return xmlStrdup((const xmlChar *)&byte_181A3ACBA);
  }
  return result;
}

void xmlNodeSetContentLen(xmlNodePtr cur, const xmlChar *content, int len)
{
  if (!cur) {
    return;
  }
  xmlElementType type = cur->type;
  if (type > XML_NOTATION_NODE) {
    return;
  }
  int v7 = 1 << type;
  if ((v7 & 0x11F8) != 0)
  {
    BOOL v8 = cur->content;
    p_properties = &cur->properties;
    if (v8) {
      BOOL v10 = v8 == (xmlChar *)p_properties;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10) {
      goto LABEL_13;
    }
    doc = cur->doc;
    if (doc)
    {
      dict = doc->dict;
      if (dict)
      {
        if (xmlDictOwns(dict, v8))
        {
LABEL_13:
          childreuint64_t n = cur->children;
          if (children) {
            xmlFreeNodeList(children);
          }
          cur->childreuint64_t n = 0LL;
          cur->xmlNodePtr last = 0LL;
          if (content) {
            xmlNodePtr v14 = xmlStrndup(content, len);
          }
          else {
            xmlNodePtr v14 = 0LL;
          }
          cur->content = v14;
          void *p_properties = 0LL;
          cur->nsDef = 0LL;
          return;
        }

        BOOL v8 = cur->content;
      }
    }

    xmlFree(v8);
    goto LABEL_13;
  }

  if ((v7 & 0x806) != 0)
  {
    BOOL v15 = cur->children;
    if (v15) {
      xmlFreeNodeList(v15);
    }
    xmlNodePtr NodeList = xmlStringLenGetNodeList(cur->doc, content, len);
    cur->childreuint64_t n = NodeList;
    if (NodeList)
    {
      xmlNodePtr next = NodeList->next;
      if (next)
      {
        do
        {
          int v18 = next;
          NodeList->xmlNodePtr parent = cur;
          xmlNodePtr next = next->next;
          xmlNodePtr NodeList = v18;
        }

        while (next);
      }

      else
      {
        int v18 = NodeList;
      }

      v18->xmlNodePtr parent = cur;
      cur->xmlNodePtr last = v18;
    }

    else
    {
      cur->xmlNodePtr last = 0LL;
    }
  }

void xmlNodeAddContentLen(xmlNodePtr cur, const xmlChar *content, int len)
{
  if (cur)
  {
    if (len >= 1)
    {
      xmlElementType type = cur->type;
      if (type <= XML_NOTATION_NODE)
      {
        int v7 = 1 << type;
        if ((v7 & 0x11F8) != 0)
        {
          if (content)
          {
            BOOL v8 = cur->content;
            p_properties = &cur->properties;
            if (v8 == (xmlChar *)&cur->properties
              || (doc = cur->doc) != 0LL
              && (dict = doc->dict) != 0LL
              && (v12 = xmlDictOwns(dict, v8), BOOL v8 = cur->content, v12))
            {
              cur->content = xmlStrncatNew(v8, content, len);
              void *p_properties = 0LL;
              cur->nsDef = 0LL;
            }

            else
            {
              cur->content = xmlStrncat(v8, content, len);
            }
          }
        }

        else if ((v7 & 0x802) != 0)
        {
          xmlNodePtr last = cur->last;
          xmlNodePtr v14 = xmlNewTextLen(content, len);
          if (v14)
          {
            BOOL v15 = v14;
            if (xmlAddChild(cur, v14) == v14 && last && last->next == v15) {
              xmlTextMerge(last, v15);
            }
          }
        }
      }
    }
  }

xmlNodePtr xmlTextMerge(xmlNodePtr first, xmlNodePtr second)
{
  if (!first) {
    return second;
  }
  uint64_t v3 = first;
  if (second && first->type == XML_TEXT_NODE && second->type == XML_TEXT_NODE && second->name == first->name)
  {
    xmlNodeAddContent(first, second->content);
    xmlUnlinkNode(second);
    xmlFreeNode(second);
  }

  return v3;
}

xmlNsPtr *__cdecl xmlGetNsList(const xmlDoc *doc, const xmlNode *node)
{
  if (!node) {
    return 0LL;
  }
  uint64_t v2 = node;
  if (node->type == XML_NAMESPACE_DECL) {
    return 0LL;
  }
  LODWORD(vxmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0;
  int v4 = 0LL;
  int v5 = 10;
  do
  {
    if (v2->type == XML_ELEMENT_NODE)
    {
      for (uint64_t i = v2->nsDef; i; uint64_t i = i->next)
      {
        if (!v4)
        {
          int v7 = (char *)xmlMalloc(8LL * (v5 + 1));
          if (!v7) {
            goto LABEL_21;
          }
          int v4 = v7;
          *(void *)&v7[8 * (int)v3] = 0LL;
        }

        if ((int)v3 < 1)
        {
LABEL_14:
          if ((int)v3 >= v5)
          {
            xmlNsPtr v11 = (char *)xmlRealloc(v4, 8LL * ((2 * v5) | 1));
            if (!v11)
            {
LABEL_21:
              __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"getting namespace list");
              return 0LL;
            }

            int v4 = v11;
            v5 *= 2;
          }

          *(void *)&v4[8 * (int)v3] = i;
          uint64_t v3 = (int)v3 + 1LL;
          *(void *)&v4[8 * v3] = 0LL;
        }

        else
        {
          uint64_t v8 = 0LL;
          while (1)
          {
            prefix = i->prefix;
            BOOL v10 = *(const xmlChar **)(*(void *)&v4[v8] + 24LL);
            if (prefix == v10 || xmlStrEqual(prefix, v10)) {
              break;
            }
            v8 += 8LL;
          }
        }
      }
    }

    uint64_t v2 = v2->parent;
  }

  while (v2);
  return (xmlNsPtr *)v4;
}

xmlNsPtr xmlSearchNs(xmlDocPtr doc, xmlNodePtr node, const xmlChar *nameSpace)
{
  if (!node || node->type == XML_NAMESPACE_DECL) {
    return 0LL;
  }
  if (!nameSpace || !xmlStrEqual(nameSpace, (const xmlChar *)"xml"))
  {
    xmlNodePtr v8 = node;
    while (1)
    {
      xmlElementType type = v8->type;
      if (type == XML_ELEMENT_NODE)
      {
        for (uint64_t i = v8->nsDef; i; uint64_t i = i->next)
        {
          prefix = i->prefix;
          if ((unint64_t)nameSpace | (unint64_t)prefix)
          {
            if (nameSpace && prefix && i->href && xmlStrEqual(prefix, nameSpace)) {
              return i;
            }
          }

          else if (i->href)
          {
            return i;
          }
        }

        if (v8 != node)
        {
          uint64_t i = v8->ns;
          if (i)
          {
            int v12 = i->prefix;
            if ((unint64_t)nameSpace | (unint64_t)v12)
            {
              if (nameSpace && v12 && i->href && xmlStrEqual(v12, nameSpace)) {
                return i;
              }
            }

            else if (i->href)
            {
              return i;
            }
          }
        }
      }

      else if (type - 5 < 2 || type == XML_ENTITY_DECL)
      {
        return 0LL;
      }

      xmlNodePtr v8 = v8->parent;
      if (!v8) {
        return 0LL;
      }
    }
  }

  if (!doc)
  {
    if (node->type == XML_ELEMENT_NODE)
    {
      uint64_t v13 = (xmlNs *)xmlMalloc(0x30uLL);
      uint64_t i = v13;
      if (v13)
      {
        *(_OWORD *)&v13->href = 0u;
        *(_OWORD *)&v13->_private = 0u;
        *(_OWORD *)&v13->xmlNodePtr next = 0u;
        v13->xmlElementType type = XML_NAMESPACE_DECL;
        v13->href = xmlStrdup((const xmlChar *)"http://www.w3.org/XML/1998/namespace");
        i->prefix = xmlStrdup((const xmlChar *)"xml");
        i->xmlNodePtr next = node->nsDef;
        node->nsDef = i;
      }

      else
      {
        __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"searching namespace");
      }

      return i;
    }

    doc = node->doc;
    if (!doc) {
      return 0LL;
    }
  }

  uint64_t i = doc->oldNs;
  if (i) {
    return i;
  }
  return (xmlNsPtr)xmlTreeEnsureXMLDecl((uint64_t)doc);
}

_OWORD *xmlTreeEnsureXMLDecl(uint64_t a1)
{
  int v1 = *(_OWORD **)(a1 + 96);
  if (!v1)
  {
    uint64_t v3 = xmlMalloc(0x30uLL);
    int v1 = v3;
    if (v3)
    {
      v3[1] = 0u;
      v3[2] = 0u;
      *uint64_t v3 = 0u;
      *((_DWORD *)v3 + 2) = 18;
      *((void *)v3 + 2) = xmlStrdup((const xmlChar *)"http://www.w3.org/XML/1998/namespace");
      *((void *)v1 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = xmlStrdup((const xmlChar *)"xml");
      *(void *)(a1 + 96) = v1;
    }

    else
    {
      __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"allocating the XML namespace");
    }
  }

  return v1;
}

uint64_t xmlNsInScope(uint64_t a1, uint64_t a2, xmlChar *str2)
{
  BOOL v3 = a1 != a2;
  if (!a1 || a1 == a2)
  {
LABEL_22:
    if (v3) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 1LL;
    }
  }

  uint64_t v6 = a1;
  while (1)
  {
    int v7 = *(_DWORD *)(v6 + 8);
    if (v7 == 1) {
      break;
    }
LABEL_17:
    uint64_t v6 = *(void *)(v6 + 40);
    BOOL v3 = v6 != a2;
    if (v6) {
      BOOL v11 = v6 == a2;
    }
    else {
      BOOL v11 = 1;
    }
    if (v11) {
      goto LABEL_22;
    }
  }

  int v9 = *(void **)(v6 + 96);
  if (!v9) {
    goto LABEL_17;
  }
  while (1)
  {
    BOOL v10 = (const xmlChar *)v9[3];
    int v9 = (void *)*v9;
    if (!v9) {
      goto LABEL_17;
    }
  }

int xmlReconciliateNs(xmlDocPtr doc, xmlNodePtr tree)
{
  if (!tree) {
    return -1;
  }
  int result = -1;
  if (doc && tree->type == XML_ELEMENT_NODE && doc->type == XML_DOCUMENT_NODE && tree->doc == doc)
  {
    int v5 = 0;
    int v6 = 0;
    int v7 = 0LL;
    xmlNodePtr v8 = 0LL;
    xmlNodePtr v9 = tree;
    while (1)
    {
      if (v9->ns)
      {
        if (!v6)
        {
          BOOL v10 = xmlMalloc(0x50uLL);
          if (!v10)
          {
LABEL_67:
            __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"fixing namespaces");
            return -1;
          }

          xmlNodePtr v8 = v10;
          BOOL v11 = xmlMalloc(0x50uLL);
          if (!v11) {
            goto LABEL_66;
          }
          int v7 = v11;
          int v6 = 10;
        }

        if (v5 < 1)
        {
          LODWORD(v12) = 0;
        }

        else
        {
          uint64_t v12 = 0LL;
          while ((xmlNs *)v8[v12] != v9->ns)
          {
            if (v5 == ++v12) {
              goto LABEL_20;
            }
          }

          v9->xmlNsPtr ns = (xmlNs *)v7[v12];
        }

        if ((_DWORD)v12 == v5)
        {
LABEL_20:
          xmlNsPtr v13 = xmlNewReconciledNs(doc, tree, (uint64_t)v9->ns);
          if (v13)
          {
            xmlNodePtr v14 = v13;
            if (v6 <= v5)
            {
              v6 *= 2;
              BOOL v15 = xmlRealloc(v8, 8LL * v6);
              if (!v15)
              {
LABEL_68:
                __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"fixing namespaces");
                ((void (*)(void *))xmlFree)(v7);
                return -1;
              }

              xmlNodePtr v8 = v15;
              char v16 = xmlRealloc(v7, 8LL * v6);
              if (!v16)
              {
LABEL_66:
                __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"fixing namespaces");
                ((void (*)(void *))xmlFree)(v8);
                return -1;
              }

              int v7 = v16;
            }

            v7[v5] = v14;
            v8[v5++] = v9->ns;
            v9->xmlNsPtr ns = v14;
          }
        }
      }

      if (v9->type == XML_ELEMENT_NODE)
      {
        for (uint64_t i = v9->properties; i; uint64_t i = i->next)
        {
          if (i->ns)
          {
            if (!v6)
            {
              int v18 = xmlMalloc(0x50uLL);
              if (!v18) {
                goto LABEL_67;
              }
              xmlNodePtr v8 = v18;
              uint64_t v19 = xmlMalloc(0x50uLL);
              if (!v19) {
                goto LABEL_66;
              }
              int v7 = v19;
              int v6 = 10;
            }

            if (v5 < 1)
            {
              LODWORD(v20) = 0;
            }

            else
            {
              uint64_t v20 = 0LL;
              while ((xmlNs *)v8[v20] != i->ns)
              {
                if (v5 == ++v20) {
                  goto LABEL_41;
                }
              }

              i->xmlNsPtr ns = (xmlNs *)v7[v20];
            }

            if ((_DWORD)v20 == v5)
            {
LABEL_41:
              xmlNsPtr v21 = xmlNewReconciledNs(doc, tree, (uint64_t)i->ns);
              if (v21)
              {
                xmlNsPtr v22 = v21;
                if (v6 <= v5)
                {
                  v6 *= 2;
                  int v23 = xmlRealloc(v8, 8LL * v6);
                  if (!v23) {
                    goto LABEL_68;
                  }
                  xmlNodePtr v8 = v23;
                  int v24 = xmlRealloc(v7, 8LL * v6);
                  if (!v24) {
                    goto LABEL_66;
                  }
                  int v7 = v24;
                }

                v7[v5] = v22;
                v8[v5++] = i->ns;
                i->xmlNsPtr ns = v22;
              }
            }
          }
        }
      }

      childreuint64_t n = v9->children;
      if (!children || v9->type == XML_ENTITY_REF_NODE)
      {
        if (v9 == tree) {
          goto LABEL_60;
        }
        childreuint64_t n = v9->next;
        if (!children)
        {
          while (v9 != tree)
          {
            if (v9->parent) {
              xmlNodePtr v9 = v9->parent;
            }
            if (v9 == tree || (childreuint64_t n = v9->next) == 0LL)
            {
              childreuint64_t n = v9->parent;
              if (children) {
                continue;
              }
            }

            if (children == tree) {
              break;
            }
            goto LABEL_59;
          }

xmlNsPtr xmlNewReconciledNs(xmlDocPtr doc, xmlNodePtr node, uint64_t a3)
{
  xmlNsPtr result = 0LL;
  uint64_t v12 = *MEMORY[0x1895F89C0];
  if (a3 && node->type == XML_ELEMENT_NODE)
  {
    if (*(_DWORD *)(a3 + 8) == 18)
    {
      xmlNsPtr result = xmlSearchNsByHref(doc, node, *(const xmlChar **)(a3 + 16));
      if (result) {
        return result;
      }
      __int16 v11 = 0;
      __int128 v9 = 0u;
      __int128 v10 = 0u;
      *(_OWORD *)char __str = 0u;
      if (*(void *)(a3 + 24)) {
        snprintf(__str, 0x32uLL, "%.20s", *(const char **)(a3 + 24));
      }
      else {
        strcpy(__str, "default");
      }
      if (!xmlSearchNs(doc, node, (const xmlChar *)__str)) {
        return xmlNewNs(node, *(const xmlChar **)(a3 + 16), (const xmlChar *)__str);
      }
      for (int i = 1; i != 1001; ++i)
      {
        if (*(void *)(a3 + 24)) {
          snprintf(__str, 0x32uLL, "%.20s%d");
        }
        else {
          snprintf(__str, 0x32uLL, "default%d");
        }
        if (!xmlSearchNs(doc, node, (const xmlChar *)__str)) {
          return xmlNewNs(node, *(const xmlChar **)(a3 + 16), (const xmlChar *)__str);
        }
      }
    }

    return 0LL;
  }

  return result;
}

xmlAttrPtr xmlHasProp(const xmlNode *node, const xmlChar *name)
{
  if (!node) {
    return 0LL;
  }
  properties = 0LL;
  if (!name || node->type != XML_ELEMENT_NODE) {
    return properties;
  }
  properties = node->properties;
  if (!properties)
  {
LABEL_7:
    doc = node->doc;
    if (doc)
    {
      intSubset = doc->intSubset;
      if (intSubset)
      {
        properties = (xmlAttr *)xmlGetDtdAttrDesc(intSubset, node->name, name);
        if (properties
          || (extSubset = doc->extSubset) != 0LL
          && (properties = (xmlAttr *)xmlGetDtdAttrDesc(extSubset, node->name, name)) != 0LL)
        {
          if (properties->psvi) {
            return properties;
          }
        }
      }
    }

    return 0LL;
  }

  while (!xmlStrEqual(properties->name, name))
  {
    properties = properties->next;
    if (!properties) {
      goto LABEL_7;
    }
  }

  return properties;
}

xmlAttributePtr xmlGetPropNodeInternal(uint64_t a1, xmlChar *str2, const xmlChar *a3, int a4)
{
  if (!a1) {
    return 0LL;
  }
  xmlAttributePtr v5 = 0LL;
  if (!str2 || *(_DWORD *)(a1 + 8) != 1) {
    return v5;
  }
  xmlAttributePtr v5 = *(xmlAttributePtr *)(a1 + 88);
  if (!v5)
  {
LABEL_15:
    if (!a4) {
      return 0LL;
    }
    uint64_t v10 = *(void *)(a1 + 64);
    if (!v10 || !*(void *)(v10 + 80)) {
      return 0LL;
    }
    uint64_t v11 = *(void *)(a1 + 72);
    if (v11 && (uint64_t v12 = *(const xmlChar **)(v11 + 24)) != 0LL)
    {
      xmlNsPtr v13 = xmlStrdup(v12);
      xmlNodePtr v14 = xmlStrcat(v13, (const xmlChar *)":");
      BOOL v15 = xmlStrcat(v14, *(const xmlChar **)(a1 + 16));
      char v16 = v15;
      if (!v15) {
        return 0LL;
      }
    }

    else
    {
      char v16 = 0LL;
      BOOL v15 = *(xmlChar **)(a1 + 16);
    }

    if (a3)
    {
      int v17 = (const xmlDoc *)xmlStrEqual(a3, (const xmlChar *)"http://www.w3.org/XML/1998/namespace");
      if (!(_DWORD)v17)
      {
        NsList = xmlGetNsList(v17, (const xmlNode *)a1);
        if (!NsList)
        {
          if (v16) {
            xmlFree(v16);
          }
          return 0LL;
        }

        int v23 = NsList;
        xmlNsPtr v24 = *NsList;
        if (*NsList)
        {
          xmlNodePtr v25 = NsList;
          while (1)
          {
            if (xmlStrEqual(v24->href, a3))
            {
              xmlAttributePtr DtdQAttrDesc = xmlGetDtdQAttrDesc(*(xmlDtdPtr *)(v10 + 80), v15, str2, (*v25)->prefix);
              if (DtdQAttrDesc) {
                break;
              }
              signed int v27 = *(xmlDtd **)(v10 + 88);
              if (v27)
              {
                xmlAttributePtr DtdQAttrDesc = xmlGetDtdQAttrDesc(v27, v15, str2, (*v25)->prefix);
                if (DtdQAttrDesc) {
                  break;
                }
              }
            }

            uint64_t v28 = v25[1];
            ++v25;
            xmlNsPtr v24 = v28;
            if (!v28) {
              goto LABEL_40;
            }
          }

          xmlAttributePtr v5 = DtdQAttrDesc;
        }

        else
        {
LABEL_40:
          xmlAttributePtr v5 = 0LL;
        }

        xmlFree(v23);
        goto LABEL_46;
      }

      xmlAttributePtr v5 = xmlGetDtdQAttrDesc(*(xmlDtdPtr *)(v10 + 80), v15, str2, (const xmlChar *)"xml");
      if (v5)
      {
LABEL_46:
        if (v16) {
          xmlFree(v16);
        }
        if (!v5 || v5->defaultValue) {
          return v5;
        }
        return 0LL;
      }

      int v18 = *(xmlDtd **)(v10 + 88);
      if (v18)
      {
        uint64_t v19 = (const xmlChar *)"xml";
        uint64_t v20 = v15;
        xmlNsPtr v21 = str2;
LABEL_31:
        xmlAttributePtr v5 = xmlGetDtdQAttrDesc(v18, v20, v21, v19);
        goto LABEL_46;
      }
    }

    else
    {
      xmlAttributePtr v5 = xmlGetDtdQAttrDesc(*(xmlDtdPtr *)(v10 + 80), v15, str2, 0LL);
      if (v5) {
        goto LABEL_46;
      }
      int v18 = *(xmlDtd **)(v10 + 88);
      if (v18)
      {
        uint64_t v20 = v15;
        xmlNsPtr v21 = str2;
        uint64_t v19 = 0LL;
        goto LABEL_31;
      }
    }

    xmlAttributePtr v5 = 0LL;
    goto LABEL_46;
  }

  if (a3)
  {
    while (1)
    {
      if (v5->nexth)
      {
        if (xmlStrEqual(v5->name, str2))
        {
          name = v5->nexth->name;
          if (name == a3 || xmlStrEqual(name, a3)) {
            break;
          }
        }
      }

      xmlAttributePtr v5 = (xmlAttributePtr)v5->next;
      if (!v5) {
        goto LABEL_15;
      }
    }
  }

  else
  {
    while (v5->nexth || !xmlStrEqual(v5->name, str2))
    {
      xmlAttributePtr v5 = (xmlAttributePtr)v5->next;
      if (!v5) {
        goto LABEL_15;
      }
    }
  }

  return v5;
}

xmlChar *__cdecl xmlGetNoNsProp(const xmlNode *node, const xmlChar *name)
{
  xmlNsPtr result = (xmlChar *)xmlGetPropNodeInternal((uint64_t)node, (xmlChar *)name, 0LL, 1);
  if (result) {
    return xmlGetPropNodeValueInternal((uint64_t)result);
  }
  return result;
}

int xmlUnsetProp(xmlNodePtr node, const xmlChar *name)
{
  xmlAttributePtr PropNodeInternal = (xmlNode *)xmlGetPropNodeInternal((uint64_t)node, (xmlChar *)name, 0LL, 0);
  if (!PropNodeInternal) {
    return -1;
  }
  BOOL v3 = (xmlAttr *)PropNodeInternal;
  xmlUnlinkNode(PropNodeInternal);
  xmlFreeProp(v3);
  return 0;
}

int xmlUnsetNsProp(xmlNodePtr node, xmlNsPtr ns, const xmlChar *name)
{
  if (ns) {
    href = ns->href;
  }
  else {
    href = 0LL;
  }
  xmlAttributePtr PropNodeInternal = (xmlNode *)xmlGetPropNodeInternal((uint64_t)node, (xmlChar *)name, href, 0);
  if (!PropNodeInternal) {
    return -1;
  }
  int v6 = (xmlAttr *)PropNodeInternal;
  xmlUnlinkNode(PropNodeInternal);
  xmlFreeProp(v6);
  return 0;
}

xmlAttrPtr xmlSetProp(xmlNodePtr node, const xmlChar *name, const xmlChar *value)
{
  if (!node || !name || node->type != XML_ELEMENT_NODE) {
    return 0LL;
  }
  int v6 = *name;
  if (v6 == 58) {
    goto LABEL_5;
  }
  uint64_t v11 = 1LL;
  if (!*name) {
    goto LABEL_5;
  }
  while (v6 != 58)
  {
    int v6 = name[v11++];
    if (!v6) {
      goto LABEL_5;
    }
  }

  uint64_t v12 = xmlStrndup(name, (int)v11 - 1);
  xmlNsPtr v13 = xmlSearchNs(node->doc, node, v12);
  if (v12) {
    xmlFree(v12);
  }
  if (v13)
  {
    __int128 v9 = &name[v11];
    int v7 = node;
    xmlNodePtr v8 = v13;
  }

  else
  {
LABEL_5:
    int v7 = node;
    xmlNodePtr v8 = 0LL;
    __int128 v9 = name;
  }

  return xmlSetNsProp(v7, v8, v9, value);
}

int xmlNodeIsText(const xmlNode *node)
{
  if (node) {
    LODWORD(node) = node->type == XML_TEXT_NODE;
  }
  return (int)node;
}

int xmlIsBlankNode(const xmlNode *node)
{
  if (node)
  {
    if (node->type - 3 <= 1)
    {
      content = node->content;
      if (!content)
      {
LABEL_8:
        LODWORD(node) = 1;
        return (int)node;
      }

      while (1)
      {
        unsigned int v2 = *content;
        if (v2 > 0x20) {
          break;
        }
        if (((1LL << v2) & 0x100002600LL) == 0)
        {
          if (*content) {
            break;
          }
          goto LABEL_8;
        }

        ++content;
      }
    }

    LODWORD(node) = 0;
  }

  return (int)node;
}

int xmlTextConcat(xmlNodePtr node, const xmlChar *content, int len)
{
  if (!node) {
    return -1;
  }
  xmlElementType type = node->type;
  BOOL v5 = type > XML_COMMENT_NODE;
  int v6 = (1 << type) & 0x198;
  if (v5 || v6 == 0) {
    return -1;
  }
  uint64_t v10 = node->content;
  if (v10 == (xmlChar *)&node->properties
    || (doc = node->doc) != 0LL && (dict = doc->dict) != 0LL && (int v13 = xmlDictOwns(dict, v10), v10 = node->content, v13))
  {
    xmlNodePtr v14 = xmlStrncatNew(v10, content, len);
  }

  else
  {
    xmlNodePtr v14 = xmlStrncat(v10, content, len);
  }

  node->content = v14;
  node->properties = 0LL;
  if (v14) {
    return 0;
  }
  else {
    return -1;
  }
}

xmlBufferPtr xmlBufferCreate(void)
{
  v0 = (xmlBuffer *)xmlMalloc(0x20uLL);
  int v1 = v0;
  if (v0)
  {
    v0->use = 0;
    v0->size = *__xmlDefaultBufferSize();
    v1->alloc = *__xmlBufferAllocScheme();
    unsigned int v2 = (xmlChar *)xmlMallocAtomic(v1->size);
    v1->content = v2;
    if (v2)
    {
      bzero(v2, v1->size);
      v1->contentIO = 0LL;
    }

    else
    {
      __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"creating buffer");
      xmlFree(v1);
      return 0LL;
    }
  }

  else
  {
    __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"creating buffer");
  }

  return v1;
}

xmlBufferPtr xmlBufferCreateSize(size_t size)
{
  if (size > 0x7FFFFFFE) {
    return 0LL;
  }
  BOOL v3 = (xmlBuffer *)xmlMalloc(0x20uLL);
  int v1 = v3;
  if (!v3)
  {
    __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"creating buffer");
    return v1;
  }

  v3->use = 0;
  xmlBufferAllocationScheme v4 = *__xmlBufferAllocScheme();
  if (size) {
    unsigned int v5 = size + 1;
  }
  else {
    unsigned int v5 = 0;
  }
  v1->size = v5;
  v1->alloc = v4;
  if (!size)
  {
    v1->content = 0LL;
    goto LABEL_12;
  }

  int v6 = (xmlChar *)xmlMallocAtomic((size + 1));
  v1->content = v6;
  if (v6)
  {
    bzero(v6, v1->size);
LABEL_12:
    v1->contentIO = 0LL;
    return v1;
  }

  __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"creating buffer");
  xmlFree(v1);
  return 0LL;
}

xmlChar *__cdecl xmlBufferDetach(xmlChar *buf)
{
  if (buf)
  {
    int v1 = buf;
    if (*((_DWORD *)buf + 4) == 2)
    {
      return 0LL;
    }

    else
    {
      buf = *(xmlChar **)buf;
      *(void *)int v1 = 0LL;
      *((void *)v1 + 1) = 0LL;
    }
  }

  return buf;
}

xmlBufferPtr xmlBufferCreateStatic(void *mem, size_t size)
{
  xmlBufferPtr result = 0LL;
  if (mem)
  {
    unsigned int v4 = size;
    if (size - 0x80000000 >= 0xFFFFFFFF80000001LL)
    {
      xmlBufferPtr result = (xmlBufferPtr)xmlMalloc(0x20uLL);
      if (result)
      {
        result->use = v4;
        result->size = v4;
        result->alloc = XML_BUFFER_ALLOC_IMMUTABLE;
        result->content = (xmlChar *)mem;
      }

      else
      {
        __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"creating buffer");
        return 0LL;
      }
    }
  }

  return result;
}

void xmlBufferSetAllocationScheme(xmlBufferPtr buf, xmlBufferAllocationScheme scheme)
{
  if (buf)
  {
    if ((buf->alloc & 0xFFFFFFFE) == 2)
    {
      BOOL v2 = 1;
      BOOL v3 = 0;
    }

    else
    {
      BOOL v2 = scheme >= XML_BUFFER_ALLOC_HYBRID;
      BOOL v3 = scheme == XML_BUFFER_ALLOC_HYBRID;
    }

    if ((v3 || !v2) && scheme != XML_BUFFER_ALLOC_IO) {
      buf->alloc = scheme;
    }
  }

void xmlBufferFree(xmlBufferPtr buf)
{
  if (buf)
  {
    xmlBufferAllocationScheme alloc = buf->alloc;
    if (alloc == XML_BUFFER_ALLOC_IO)
    {
      contentIO = buf->contentIO;
      if (!contentIO)
      {
        contentIO = buf->content;
        if (!buf->content) {
          goto LABEL_12;
        }
      }
    }

    else
    {
      contentIO = buf->content;
      if (alloc == XML_BUFFER_ALLOC_IMMUTABLE || contentIO == 0LL) {
        goto LABEL_12;
      }
    }

    xmlFree(contentIO);
LABEL_12:
    xmlFree(buf);
  }

void xmlBufferEmpty(xmlBufferPtr buf)
{
  if (buf)
  {
    content = buf->content;
    if (buf->content)
    {
      buf->use = 0;
      xmlBufferAllocationScheme alloc = buf->alloc;
      if (alloc == XML_BUFFER_ALLOC_IO)
      {
        contentIO = buf->contentIO;
        if (contentIO)
        {
          buf->size += (_DWORD)content - (_DWORD)contentIO;
          buf->content = contentIO;
          xmlChar *contentIO = 0;
          return;
        }
      }

      else if (alloc == XML_BUFFER_ALLOC_IMMUTABLE)
      {
        buf->content = (xmlChar *)&byte_181A3ACBA;
        return;
      }

      xmlChar *content = 0;
    }
  }

int xmlBufferShrink(xmlBufferPtr buf, unsigned int len)
{
  if (!buf) {
    return -1;
  }
  unsigned int v2 = len;
  if (len)
  {
    unsigned int use = buf->use;
    size_t v5 = use - len;
    if (use < len) {
      return -1;
    }
    buf->unsigned int use = v5;
    xmlBufferAllocationScheme alloc = buf->alloc;
    if (alloc == XML_BUFFER_ALLOC_IMMUTABLE)
    {
      buf->content += len;
      unsigned int v13 = buf->size - len;
      goto LABEL_13;
    }

    if (alloc != XML_BUFFER_ALLOC_IO || (contentIO = buf->contentIO) == 0LL)
    {
      memmove(buf->content, &buf->content[len], v5);
      buf->content[buf->use] = 0;
      return v2;
    }

    __int128 v9 = &buf->content[len];
    buf->content = v9;
    unint64_t v10 = buf->size - v2;
    buf->size = v10;
    int v11 = (_DWORD)v9 - (_DWORD)contentIO;
    if (v9 - contentIO >= v10)
    {
      memmove(contentIO, v9, v5);
      uint64_t v12 = buf->contentIO;
      buf->content = v12;
      v12[buf->use] = 0;
      unsigned int v13 = buf->size + v11;
LABEL_13:
      buf->size = v13;
    }
  }

  return v2;
}

int xmlBufferGrow(xmlBufferPtr buf, unsigned int len)
{
  if (!buf) {
    return -1;
  }
  xmlBufferAllocationScheme alloc = buf->alloc;
  if (alloc == XML_BUFFER_ALLOC_IMMUTABLE) {
    return 0;
  }
  unsigned int use = buf->use;
  unsigned int size = buf->size;
  if (size - use > len)
  {
    int result = 0;
    buf->content[use + len] = 0;
    return result;
  }

  if (2147483646 - use >= len)
  {
    unsigned int v9 = use + len;
    unsigned int v10 = v9 + 100;
    if (v9 > 0x7FFFFF9B) {
      unsigned int v10 = 0x7FFFFFFF;
    }
    if (size >> 30) {
      unsigned int v11 = 0x7FFFFFFF;
    }
    else {
      unsigned int v11 = 2 * size;
    }
    if (size > len) {
      size_t v12 = v11;
    }
    else {
      size_t v12 = v10;
    }
    if (alloc == XML_BUFFER_ALLOC_IO && (contentIO = buf->contentIO) != 0LL)
    {
      xmlNodePtr v14 = (xmlChar *)(buf->content - contentIO);
      BOOL v15 = (xmlChar *)xmlRealloc(contentIO, (size_t)&v14[v12]);
      if (v15)
      {
        buf->contentIO = v15;
        char v16 = &v14[(void)v15];
LABEL_22:
        buf->content = v16;
        buf->unsigned int size = v12;
        v16[buf->use] = 0;
        buf->content[buf->use + len] = 0;
        return buf->size + ~buf->use;
      }
    }

    else
    {
      char v16 = (xmlChar *)xmlRealloc(buf->content, v12);
      if (v16) {
        goto LABEL_22;
      }
    }

    xmlNodePtr v8 = "growing buffer";
    goto LABEL_24;
  }

  xmlNodePtr v8 = "growing buffer past INT_MAX";
LABEL_24:
  __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)v8);
  return -1;
}

int xmlBufferDump(FILE *file, xmlBufferPtr buf)
{
  if (buf)
  {
    content = buf->content;
    if (buf->content)
    {
      if (file) {
        unsigned int v4 = file;
      }
      else {
        unsigned int v4 = (FILE *)*MEMORY[0x1895F89E0];
      }
      content = (const void *)fwrite(content, 1uLL, buf->use, v4);
    }
  }

  else
  {
    LODWORD(content) = 0;
  }

  return (int)content;
}

const xmlChar *__cdecl xmlBufferContent(const xmlChar *buf)
{
  if (buf) {
    return *(const xmlChar **)buf;
  }
  return buf;
}

int xmlBufferLength(const xmlBuffer *buf)
{
  if (!buf) {
    return 0;
  }
  unsigned int use = buf->use;
  if (use >= 0x7FFFFFFF)
  {
    if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
      xmlBufferLength_cold_1(use);
    }
    return 2147483646;
  }

  return use;
}

int xmlBufferResize(xmlBufferPtr buf, unsigned int size)
{
  if (buf)
  {
    xmlBufferPtr v2 = buf;
    xmlBufferAllocationScheme alloc = buf->alloc;
    if (alloc == XML_BUFFER_ALLOC_IMMUTABLE)
    {
LABEL_39:
      LODWORD(buf) = 0;
      return (int)buf;
    }

    unsigned int v4 = buf->size;
    if (v4 <= size)
    {
      if (size >= 0x7FFFFFF6)
      {
        size_t v5 = "growing buffer past INT_MAX";
LABEL_38:
        __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)v5);
        goto LABEL_39;
      }

      switch(alloc)
      {
        case XML_BUFFER_ALLOC_DOUBLEIT:
        case XML_BUFFER_ALLOC_IO:
          if (v4) {
            unsigned int v6 = buf->size;
          }
          else {
            unsigned int v6 = size + 10;
          }
          while (1)
          {
            if (v6 >= size) {
              goto LABEL_15;
            }
            if (v6 >> 30) {
              goto LABEL_37;
            }
            v6 *= 2;
          }

        case XML_BUFFER_ALLOC_EXACT:
          unsigned int v6 = size + 10;
          goto LABEL_25;
        case XML_BUFFER_ALLOC_HYBRID:
          if (buf->use >= 0x1000)
          {
            unsigned int v6 = buf->size;
            if (v4 < size)
            {
              do
              {
                if (v6 >> 30) {
                  goto LABEL_37;
                }
                v6 *= 2;
              }

              while (v6 < size);
LABEL_15:
              if (alloc == XML_BUFFER_ALLOC_IO)
              {
                contentIO = buf->contentIO;
                if (contentIO)
                {
                  unint64_t v8 = v2->content - contentIO;
                  if (v8 > v6)
                  {
                    memmove(contentIO, v2->content, v2->use);
                    unsigned int v9 = v2->contentIO;
                    goto LABEL_35;
                  }

                  size_t v12 = (xmlChar *)xmlRealloc(contentIO, v8 + v6);
                  if (v12)
                  {
                    v2->contentIO = v12;
                    unsigned int v9 = &v12[v8];
                    goto LABEL_35;
                  }

                  goto LABEL_37;
                }
              }
            }
          }

          else
          {
            unsigned int v6 = size;
          }

int xmlBufferAdd(xmlBufferPtr buf, const xmlChar *str, int len)
{
  int v3 = -1;
  if (buf)
  {
    if (str)
    {
      unsigned int v5 = len;
      if (len >= -1 && buf->alloc != XML_BUFFER_ALLOC_IMMUTABLE)
      {
        if (!len) {
          return 0;
        }
        if ((len & 0x80000000) == 0 || (unsigned int v5 = xmlStrlen(str), (v5 & 0x80000000) == 0))
        {
          if (v5)
          {
            unsigned int use = buf->use;
            if (v5 >= buf->size - use)
            {
              if (v5 >= (use ^ 0x7FFFFFFF))
              {
                unsigned int v10 = "growing buffer past INT_MAX";
              }

              else
              {
                if (xmlBufferResize(buf, v5 + use + 1))
                {
                  unsigned int use = buf->use;
                  goto LABEL_13;
                }

                unsigned int v10 = "growing buffer";
              }

              int v3 = 2;
              __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)v10);
              return v3;
            }

int xmlBufferAddHead(xmlBufferPtr buf, const xmlChar *str, int len)
{
  if (!buf) {
    return -1;
  }
  unsigned int v3 = len;
  int v4 = -1;
  if (len >= -1 && str && buf->alloc != XML_BUFFER_ALLOC_IMMUTABLE)
  {
    if (!len) {
      return 0;
    }
    if (len < 0) {
      unsigned int v3 = xmlStrlen(str);
    }
    if ((int)v3 >= 1)
    {
      if (buf->alloc == XML_BUFFER_ALLOC_IO)
      {
        contentIO = buf->contentIO;
        if (contentIO)
        {
          if ((xmlChar *)(buf->content - contentIO) > (xmlChar *)v3)
          {
            unsigned int v8 = &buf->content[-v3];
            buf->content = v8;
            memmove(v8, str, v3);
            int v4 = 0;
            int32x2_t v9 = vadd_s32(*(int32x2_t *)&buf->use, vdup_n_s32(v3));
            *(int32x2_t *)&buf->unsigned int use = v9;
            buf->content[v9.u32[0]] = 0;
            return v4;
          }
        }
      }

      unsigned int use = buf->use;
      if (v3 >= buf->size - use)
      {
        if (v3 >= (use ^ 0x7FFFFFFF))
        {
          size_t v12 = "growing buffer past INT_MAX";
        }

        else
        {
          if (xmlBufferResize(buf, v3 + use + 1))
          {
            unsigned int use = buf->use;
            goto LABEL_19;
          }

          size_t v12 = "growing buffer";
          int v4 = 2;
        }

        __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)v12);
        return v4;
      }

int xmlBufferCat(xmlBufferPtr buf, const xmlChar *str)
{
  if (buf && str && buf->alloc != XML_BUFFER_ALLOC_IMMUTABLE) {
    return xmlBufferAdd(buf, str, -1);
  }
  else {
    return -1;
  }
}

int xmlBufferCCat(xmlBufferPtr buf, const char *str)
{
  if (buf && str && buf->alloc != XML_BUFFER_ALLOC_IMMUTABLE) {
    return xmlBufferAdd(buf, (const xmlChar *)str, -1);
  }
  else {
    return -1;
  }
}

void xmlBufferWriteCHAR(xmlBufferPtr buf, const xmlChar *string)
{
  if (buf && string && buf->alloc != XML_BUFFER_ALLOC_IMMUTABLE) {
    xmlBufferAdd(buf, string, -1);
  }
}

void xmlBufferWriteChar(xmlBufferPtr buf, const char *string)
{
  if (buf && string && buf->alloc != XML_BUFFER_ALLOC_IMMUTABLE) {
    xmlBufferAdd(buf, (const xmlChar *)string, -1);
  }
}

void xmlBufferWriteQuotedString(xmlBufferPtr buf, const xmlChar *string)
{
  if (!buf || buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) {
    return;
  }
  unsigned int v3 = string;
  if (!xmlStrchr(string, 0x22u))
  {
    if (buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) {
      return;
    }
    xmlBufferAdd(buf, (const xmlChar *)"", -1);
    xmlBufferAllocationScheme alloc = buf->alloc;
    if (!v3 || alloc == XML_BUFFER_ALLOC_IMMUTABLE) {
      goto LABEL_22;
    }
    int v7 = buf;
    unsigned int v8 = v3;
    int v9 = -1;
    goto LABEL_20;
  }

  int v4 = xmlStrchr(v3, 0x27u);
  xmlBufferAllocationScheme v5 = buf->alloc;
  if (v4)
  {
    if (v5 != XML_BUFFER_ALLOC_IMMUTABLE) {
      xmlBufferAdd(buf, (const xmlChar *)"", -1);
    }
LABEL_7:
    for (uint64_t i = 0LL; v3[i]; ++i)
    {
      if (v3[i] == 34)
      {
        if (i) {
          xmlBufferAdd(buf, v3, i);
        }
        xmlBufferAdd(buf, (const xmlChar *)"&quot;", 6);
        v3 += i + 1;
        goto LABEL_7;
      }
    }

    if (!i) {
      goto LABEL_21;
    }
    int v7 = buf;
    unsigned int v8 = v3;
    int v9 = i;
LABEL_20:
    xmlBufferAdd(v7, v8, v9);
LABEL_21:
    xmlBufferAllocationScheme alloc = buf->alloc;
LABEL_22:
    if (alloc != XML_BUFFER_ALLOC_IMMUTABLE)
    {
      unsigned int v11 = "";
LABEL_24:
      xmlBufferAdd(buf, (const xmlChar *)v11, -1);
      return;
    }

    return;
  }

  if (v5 != XML_BUFFER_ALLOC_IMMUTABLE)
  {
    xmlBufferAdd(buf, (const xmlChar *)"'", -1);
    xmlBufferAllocationScheme v12 = buf->alloc;
    if (v3 && v12 != XML_BUFFER_ALLOC_IMMUTABLE)
    {
      xmlBufferAdd(buf, v3, -1);
      xmlBufferAllocationScheme v12 = buf->alloc;
    }

    if (v12 != XML_BUFFER_ALLOC_IMMUTABLE)
    {
      unsigned int v11 = "'";
      goto LABEL_24;
    }
  }

int xmlGetDocCompressMode(const xmlDoc *doc)
{
  if (doc) {
    return doc->compression;
  }
  else {
    return -1;
  }
}

void xmlSetDocCompressMode(xmlDocPtr doc, int mode)
{
  if (doc)
  {
    if (mode < 0)
    {
      doc->compressiouint64_t n = 0;
    }

    else if (mode < 0xA)
    {
      doc->compressiouint64_t n = mode;
    }

    else
    {
      doc->compressiouint64_t n = 9;
    }
  }

int xmlGetCompressMode(void)
{
  return xmlCompressMode;
}

void xmlSetCompressMode(int mode)
{
  else {
    int v1 = mode;
  }
  if (mode < 0) {
    int v1 = 0;
  }
  xmlCompressMode = v1;
}

xmlDOMWrapCtxtPtr xmlDOMWrapNewCtxt(void)
{
  v0 = (xmlDOMWrapCtxt *)xmlMalloc(0x20uLL);
  int v1 = v0;
  if (v0)
  {
    *(_OWORD *)&v0->_private = 0u;
    *(_OWORD *)&v0->namespaceMap = 0u;
  }

  else
  {
    __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"allocating DOM-wrapper context");
  }

  return v1;
}

void xmlDOMWrapFreeCtxt(xmlDOMWrapCtxtPtr ctxt)
{
  if (ctxt)
  {
    namespaceMap = ctxt->namespaceMap;
    if (namespaceMap) {
      xmlDOMWrapNsMapFree(namespaceMap);
    }
    xmlFree(ctxt);
  }

void xmlDOMWrapNsMapFree(void *a1)
{
  if (a1)
  {
    xmlBufferPtr v2 = (void *)a1[2];
    if (v2)
    {
      do
      {
        unsigned int v3 = (void *)*v2;
        xmlFree(v2);
        xmlBufferPtr v2 = v3;
      }

      while (v3);
    }

    int v4 = (void *)*a1;
    if (*a1)
    {
      do
      {
        xmlBufferAllocationScheme v5 = (void *)*v4;
        xmlFree(v4);
        int v4 = v5;
      }

      while (v5);
    }

    xmlFree(a1);
  }

int xmlDOMWrapRemoveNode(xmlDOMWrapCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr node, int options)
{
  uint64_t v17 = 0LL;
  int v18 = 0LL;
  int v4 = -1;
  if (!doc) {
    return v4;
  }
  xmlNodePtr properties = node;
  if (!node || node->doc != doc) {
    return v4;
  }
  if (!node->parent) {
    return 0;
  }
  xmlElementType type = node->type;
  int v4 = 1;
  if (type > XML_COMMENT_NODE) {
    return v4;
  }
  if (((1 << type) & 0x1B8) != 0)
  {
    xmlUnlinkNode(node);
    return 0;
  }

  if (((1 << type) & 6) == 0) {
    return v4;
  }
  xmlUnlinkNode(node);
  int v4 = 0;
  while (1)
  {
    while (1)
    {
      xmlNodePtr v10 = properties;
      xmlElementType v11 = properties->type;
      if (v11 != XML_ATTRIBUTE_NODE)
      {
        if (v11 != XML_ELEMENT_NODE) {
          goto LABEL_38;
        }
        if (!ctxt)
        {
          for (uint64_t i = properties->nsDef; i; uint64_t i = i->next)
          {
            if (xmlDOMWrapNSNormAddNsMapItem2( (void **)&v18,  (int *)&v17 + 1,  (int *)&v17,  (uint64_t)i,  (uint64_t)i) == -1) {
              int v4 = -1;
            }
          }
        }
      }

      xmlNsPtr ns = v10->ns;
      if (!ns) {
        goto LABEL_35;
      }
      if (v18)
      {
        int v14 = v17;
      }

uint64_t xmlDOMWrapNSNormAddNsMapItem2(void **a1, int *a2, int *a3, uint64_t a4, uint64_t a5)
{
  int v9 = *a3;
  int v10 = *a2;
  xmlElementType v11 = *a1;
  if (*a3 >= *a2)
  {
    if (v10) {
      int v13 = 2 * v10;
    }
    else {
      int v13 = 3;
    }
    xmlElementType v11 = xmlRealloc(v11, 16LL * v13);
    if (!v11)
    {
      __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"realloc ns map item");
      return 0xFFFFFFFFLL;
    }

    *a1 = v11;
    *a2 = v13;
    int v9 = *a3;
  }

  uint64_t v14 = 0LL;
  *((void *)v11 + 2 * v9) = a4;
  *((void *)*a1 + 2 * v9 + 1) = a5;
  *a3 = v9 + 1;
  return v14;
}

xmlNsPtr xmlDOMWrapStoreNs(uint64_t a1, const xmlChar *a2, const xmlChar *a3)
{
  xmlBufferAllocationScheme v5 = (const xmlChar **)xmlTreeEnsureXMLDecl(a1);
  if (v5)
  {
    while (1)
    {
      unsigned int v6 = *v5;
      if (!*v5) {
        break;
      }
      xmlBufferAllocationScheme v5 = (const xmlChar **)*v5;
      int v7 = (const xmlChar *)*((void *)v6 + 3);
      if ((v7 == a3 || xmlStrEqual(v7, a3)) && xmlStrEqual(v5[2], a2)) {
        return (xmlNsPtr)v5;
      }
    }

    xmlNsPtr v8 = xmlNewNs(0LL, a2, a3);
    void *v5 = (const xmlChar *)v8;
    return v8;
  }

  return (xmlNsPtr)v5;
}

int xmlDOMWrapReconcileNamespaces(xmlDOMWrapCtxtPtr ctxt, xmlNodePtr elem, int options)
{
  v49 = 0LL;
  int v50 = 0LL;
  uint64_t v48 = 0LL;
  if (!elem || !elem->doc) {
    return -1;
  }
  xmlElementType type = elem->type;
  int v5 = -1;
  if (type == XML_ELEMENT_NODE)
  {
    char v6 = options;
    doc = elem->doc;
    int v7 = 0;
    uint64_t v8 = 0LL;
    int v5 = 0;
    nsDef = 0LL;
    int v9 = -1;
    for (xmlNodePtr i = elem; ; xmlNodePtr i = properties)
    {
      if (type != XML_ATTRIBUTE_NODE)
      {
        if (type != XML_ELEMENT_NODE) {
          goto LABEL_81;
        }
        ++v9;
        if (i->nsDef)
        {
          xmlElementType v11 = 0LL;
          nsDef = i->nsDef;
          BOOL v12 = 1;
          while (1)
          {
            if (!v7)
            {
              xmlNodePtr parent = elem->parent;
              if (parent
                && (_xmlNode *)parent->doc != parent
                && xmlDOMWrapNSNormGatherInScopeNs(&v50, (uint64_t)parent) == -1)
              {
                int v5 = -1;
              }

              int v7 = 1;
            }

            uint64_t v14 = v50;
            if ((v6 & 1) == 0 || !v50 || (uint64_t v15 = *v50) == 0)
            {
LABEL_30:
              xmlNsPtr ns = i->ns;
              uint64_t v23 = (uint64_t)nsDef;
              if (v12 && ns != 0LL) {
                BOOL v12 = ns != nsDef;
              }
              if (v14)
              {
                uint64_t v25 = *v14;
                if (*v14)
                {
                  do
                  {
                    if (*(int *)(v25 + 36) >= -1 && *(_DWORD *)(v25 + 32) == -1)
                    {
                      prefix = nsDef->prefix;
                      signed int v27 = *(const xmlChar **)(*(void *)(v25 + 24) + 24LL);
                      if (prefix == v27 || xmlStrEqual(prefix, v27)) {
                        *(_DWORD *)(v25 + 32) = v9;
                      }
                    }

                    uint64_t v25 = *(void *)v25;
                  }

                  while (v25);
                  uint64_t v23 = (uint64_t)nsDef;
                }
              }

              if (!xmlDOMWrapNsMapAddItem(&v50, -1, v23, v23, v9)) {
                int v5 = -1;
              }
              p_xmlNodePtr next = &nsDef->next;
              xmlElementType v11 = nsDef;
LABEL_47:
              xmlNodePtr next = *p_next;
              goto LABEL_48;
            }

            while (1)
            {
              uint64_t v16 = (uint64_t)nsDef;
              uint64_t v17 = nsDef->prefix;
              uint64_t v18 = *(void *)(v15 + 24);
              uint64_t v19 = *(const xmlChar **)(v18 + 24);
              if (v17 != v19)
              {
                if (!xmlStrEqual(v17, v19)) {
                  goto LABEL_28;
                }
                uint64_t v16 = (uint64_t)nsDef;
                uint64_t v18 = *(void *)(v15 + 24);
              }

              uint64_t v20 = *(const xmlChar **)(v16 + 16);
              xmlNsPtr v21 = *(const xmlChar **)(v18 + 16);
              if (v20 == v21) {
                goto LABEL_26;
              }
              if (xmlStrEqual(v20, v21)) {
                break;
              }
LABEL_28:
              uint64_t v15 = *(void *)v15;
              if (!v15)
              {
                uint64_t v14 = v50;
                goto LABEL_30;
              }
            }

            uint64_t v16 = (uint64_t)nsDef;
            uint64_t v18 = *(void *)(v15 + 24);
LABEL_26:
            if (xmlDOMWrapNSNormAddNsMapItem2((void **)&v49, (int *)&v48 + 1, (int *)&v48, v16, v18) == -1)
            {
              int v5 = -1;
              goto LABEL_28;
            }

            xmlNodePtr next = nsDef->next;
            if (v11)
            {
              v11->xmlNodePtr next = next;
              p_xmlNodePtr next = &nsDef->next;
              goto LABEL_47;
            }

            i->nsDef = next;
LABEL_48:
            nsDef = next;
            if (!next)
            {
              uint64_t v8 = (uint64_t)i;
              if (!v12) {
                goto LABEL_78;
              }
              goto LABEL_56;
            }
          }
        }

        uint64_t v8 = (uint64_t)i;
      }

uint64_t xmlDOMWrapNSNormGatherInScopeNs(uint64_t **a1, uint64_t a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = a2;
  uint64_t v3 = 0xFFFFFFFFLL;
  if (a2 && !*a1 && *(_DWORD *)(a2 + 8) != 18)
  {
    while (1)
    {
      if (v2 == *(void *)(v2 + 64)) {
        return 0LL;
      }
      if (*(_DWORD *)(v2 + 8) == 1)
      {
        int v5 = *(void **)(v2 + 96);
        if (v5) {
          break;
        }
      }

void *xmlDOMWrapNsMapAddItem(uint64_t **a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  int result = 0LL;
  xmlElementType v11 = *a1;
  if (!*a1)
  {
    BOOL v12 = (uint64_t *)xmlMalloc(0x18uLL);
    if (!v12)
    {
      uint64_t v15 = "allocating namespace map";
      goto LABEL_17;
    }

    xmlElementType v11 = v12;
    *BOOL v12 = 0LL;
    v12[1] = 0LL;
    v12[2] = 0LL;
    *a1 = v12;
  }

  int result = (void *)v11[2];
  if (!result)
  {
    int result = xmlMalloc(0x28uLL);
    if (result) {
      goto LABEL_9;
    }
    uint64_t v15 = "allocating namespace map item";
LABEL_17:
    __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)v15);
    return 0LL;
  }

  v11[2] = *result;
LABEL_9:
  result[4] = 0LL;
  *(_OWORD *)int result = 0u;
  *((_OWORD *)result + 1) = 0u;
  uint64_t v13 = *v11;
  if (*v11)
  {
    if (a2 == -1)
    {
      uint64_t v14 = (void *)v11[1];
      ++v11;
      result[1] = v14;
      void *v14 = result;
    }

    else
    {
      *(void *)(v13 + 8) = result;
      *int result = v13;
    }
  }

  else
  {
    *v11++ = (uint64_t)result;
  }

  uint64_t *v11 = (uint64_t)result;
  result[2] = a3;
  result[3] = a4;
  *((_DWORD *)result + 8) = -1;
  *((_DWORD *)result + 9) = a5;
  return result;
}

uint64_t xmlDOMWrapNSNormAcquireNormalizedNs( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t **a5, int a6, int a7)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a3 && a4 && a5)
  {
    *a4 = 0LL;
    uint64_t v15 = *(_BYTE **)(a3 + 24);
    if (v15 && *v15 == 120 && v15[1] == 109 && v15[2] == 108 && !v15[3])
    {
      __int128 v35 = xmlTreeEnsureXMLDecl(a1);
      *a4 = (uint64_t)v35;
      if (v35) {
        return 0LL;
      }
      else {
        return 0xFFFFFFFFLL;
      }
    }

    else
    {
      uint64_t v16 = *a5;
      if (*a5 && (uint64_t v17 = *v16) != 0)
      {
        while (1)
        {
          if (*(int *)(v17 + 36) >= -1 && *(_DWORD *)(v17 + 32) == -1)
          {
            uint64_t v18 = *(void *)(v17 + 24);
            uint64_t v19 = *(const xmlChar **)(v18 + 16);
            if (v19)
            {
              if (*v19 && (!a7 || *(void *)(v18 + 24)))
              {
                uint64_t v20 = *(const xmlChar **)(a3 + 16);
                if (v19 == v20) {
                  goto LABEL_22;
                }
                if (xmlStrEqual(v19, v20)) {
                  break;
                }
              }
            }
          }

          uint64_t v17 = *(void *)v17;
          if (!v17) {
            goto LABEL_23;
          }
        }

        uint64_t v18 = *(void *)(v17 + 24);
LABEL_22:
        uint64_t result = 0LL;
        *(void *)(v17 + 16) = a3;
        *a4 = v18;
      }

      else
      {
LABEL_23:
        xmlNsPtr v21 = *(xmlChar **)(a3 + 16);
        xmlNsPtr v22 = *(xmlChar **)(a3 + 24);
        if (a2)
        {
          xmlNsPtr v23 = xmlDOMWrapNSNormDeclareNsForced(a2, v21, v22, 0);
          if (v23)
          {
            uint64_t v24 = (uint64_t)v23;
            uint64_t v25 = *a5;
            if (*a5)
            {
              uint64_t v26 = *v25;
              if (*v25)
              {
                while (1)
                {
                  if (*(_DWORD *)(v26 + 36) < a6 && *(_DWORD *)(v26 + 32) == -1)
                  {
                    signed int v27 = *(const xmlChar **)(a3 + 24);
                    uint64_t v28 = *(const xmlChar **)(*(void *)(v26 + 24) + 24LL);
                    if (v27 == v28 || xmlStrEqual(v27, v28)) {
                      break;
                    }
                  }

                  uint64_t v26 = *(void *)v26;
                  if (!v26) {
                    goto LABEL_42;
                  }
                }

                *(_DWORD *)(v26 + 32) = a6;
              }
            }

int xmlDOMWrapCloneNode( xmlDOMWrapCtxtPtr ctxt, xmlDocPtr sourceDoc, xmlNodePtr node, xmlNodePtr *clonedNode, xmlDocPtr destDoc, xmlNodePtr destParent, int deep, int options)
{
  namespaceMap = 0LL;
  int v8 = -1;
  if (node && clonedNode && destDoc && (!destParent || destParent->doc == destDoc))
  {
    if (node->type != XML_ELEMENT_NODE) {
      return 1;
    }
    p_doc = &node->doc;
    doc = node->doc;
    if (!doc || doc == sourceDoc || !sourceDoc)
    {
      xmlDocPtr v15 = sourceDoc ? sourceDoc : node->doc;
      if ((unint64_t)sourceDoc | (unint64_t)doc)
      {
        if (ctxt) {
          namespaceMap = (uint64_t *)ctxt->namespaceMap;
        }
        uint64_t v16 = destDoc->dict;
        nsDef = 0LL;
        *clonedNode = 0LL;
        if (*p_doc != v15)
        {
          uint64_t v77 = 0LL;
          goto LABEL_160;
        }

        xmlNodePtr v70 = 0LL;
        dict = v16;
        uint64_t v18 = 0LL;
        uint64_t v19 = 0LL;
        uint64_t v20 = 0LL;
        int v21 = 0;
        int v22 = -1;
        xmlNodePtr v23 = node;
        int v73 = v15;
        while (1)
        {
          v75 = v19;
          xmlElementType type = v23->type;
          BOOL v25 = type - 3 < 6 || type == XML_DOCUMENT_FRAG_NODE;
          int v74 = v21;
          if (v25) {
            goto LABEL_26;
          }
          if (type != XML_ATTRIBUTE_NODE) {
            break;
          }
          uint64_t v28 = xmlMalloc(0x60uLL);
          if (!v28)
          {
            uint64_t v77 = v20;
            v69 = "xmlDOMWrapCloneNode(): allocating an attr-node";
            goto LABEL_170;
          }

          uint64_t v19 = v28;
          v28[4] = 0u;
          v28[5] = 0u;
          v28[2] = 0u;
          v28[3] = 0u;
          *uint64_t v28 = 0u;
          v28[1] = 0u;
          if (!v20)
          {
LABEL_38:
            uint64_t v20 = (xmlNode *)v19;
            signed int v27 = v75;
            goto LABEL_39;
          }

          signed int v27 = v75;
          *((void *)v28 + 5) = v75;
          if (v18)
          {
LABEL_29:
            *((void *)v18 + 6) = v19;
            *((void *)v19 + 7) = v18;
            goto LABEL_39;
          }

          *((void *)v75 + 11) = v28;
LABEL_39:
          *((_DWORD *)v19 + 2) = v23->type;
          *((void *)v19 + 8) = destDoc;
          name = v23->name;
          if (name == "text")
          {
            int v31 = "text";
            goto LABEL_52;
          }

          if (name == "textnoenc")
          {
            int v31 = "textnoenc";
            goto LABEL_52;
          }

          if (name == "comment")
          {
            int v31 = "comment";
            goto LABEL_52;
          }

          if (name)
          {
            if (dict)
            {
              int v30 = xmlDictOwns(dict, name);
              int v31 = v23->name;
              if (!v30)
              {
                xmlNodePtr v32 = xmlDictLookup(dict, v31, -1);
                goto LABEL_50;
              }
            }

            else
            {
              xmlNodePtr v32 = xmlStrdup(name);
LABEL_50:
              int v31 = v32;
            }

            signed int v27 = v75;
LABEL_52:
            *((void *)v19 + 2) = v31;
          }

          uint64_t v77 = v20;
          int v8 = -1;
          switch(v23->type)
          {
            case XML_ELEMENT_NODE:
              ++v22;
              if (!v23->nsDef) {
                goto LABEL_94;
              }
              if (!destParent || v74 || ctxt)
              {
                nsDef = (uint64_t *)v23->nsDef;
LABEL_76:
                int v74 = 1;
                uint64_t v38 = v19 + 6;
                while (1)
                {
                  uint64_t v39 = xmlMalloc(0x30uLL);
                  if (!v39) {
                    break;
                  }
                  uint64_t v40 = (uint64_t)v39;
                  v39[1] = 0u;
                  v39[2] = 0u;
                  _OWORD *v39 = 0u;
                  *((_DWORD *)v39 + 2) = 18;
                  uint64_t v41 = nsDef;
                  uint64_t v42 = (const xmlChar *)nsDef[2];
                  if (v42)
                  {
                    *(void *)(v40 + 16) = xmlStrdup(v42);
                    uint64_t v41 = nsDef;
                  }

                  int v43 = (const xmlChar *)v41[3];
                  if (v43) {
                    *(void *)(v40 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = xmlStrdup(v43);
                  }
                  *uint64_t v38 = v40;
                  if (!ctxt || !ctxt->getNsForNodeFunc)
                  {
                    if (namespaceMap)
                    {
                      for (uint64_t i = *namespaceMap; i; uint64_t i = *(void *)i)
                      {
                        if (*(int *)(i + 36) >= -1 && *(_DWORD *)(i + 32) == -1)
                        {
                          __int16 v45 = (const xmlChar *)nsDef[3];
                          uint64_t v46 = *(const xmlChar **)(*(void *)(i + 24) + 24LL);
                          if (v45 == v46 || xmlStrEqual(v45, v46)) {
                            *(_DWORD *)(i + 32) = v22;
                          }
                        }
                      }
                    }

                    int v8 = -1;
                  }

                  nsDef = (uint64_t *)*nsDef;
                  uint64_t v38 = (void *)v40;
                  if (!nsDef) {
                    goto LABEL_94;
                  }
                }

                __xmlSimpleError(2, 2, 0, 0LL, (uint64_t)"xmlDOMWrapCloneNode(): allocating namespace");
                return -1;
              }

              nsDef = (uint64_t *)v23->nsDef;
              if (nsDef) {
                goto LABEL_76;
              }
              int v74 = 1;
LABEL_94:
              xmlNodePtr v70 = v23;
LABEL_95:
              if (v23->ns)
              {
                int v47 = 1;
                if (destParent && !v74 && !ctxt)
                {
                  int v47 = 1;
                }

                uint64_t v48 = namespaceMap;
                if (namespaceMap)
                {
                  do
                  {
                    uint64_t v48 = (uint64_t *)*v48;
                    if (!v48) {
                      goto LABEL_106;
                    }
                  }

                  while (*((_DWORD *)v48 + 8) != -1 || v23->ns != (xmlNs *)v48[2]);
                  p_nsDef = (uint64_t **)(v48 + 3);
                }

                else
                {
LABEL_106:
                  if (ctxt)
                  {
                    getNsForNodeFunc = (uint64_t (*)(void))ctxt->getNsForNodeFunc;
                    uint64_t ns = (uint64_t)v23->ns;
                    if (getNsForNodeFunc)
                    {
                      nsDef = (uint64_t *)getNsForNodeFunc();
                      if (!xmlDOMWrapNsMapAddItem(&namespaceMap, -1, (uint64_t)v23->ns, (uint64_t)nsDef, -4))
                      {
                        v65 = namespaceMap;
                        int v8 = -1;
                        xmlDOMWrapCtxtPtr v66 = ctxt;
                        if (!namespaceMap) {
                          goto LABEL_164;
                        }
LABEL_162:
                        if (v66->namespaceMap == v65)
                        {
                          uint64_t v67 = *v65;
                          if (*v65)
                          {
                            uint64_t v68 = v65[2];
                            if (v68)
                            {
                              *(void *)v65[1] = v68;
                              v65 = namespaceMap;
                              uint64_t v67 = *namespaceMap;
                            }

                            v65[2] = v67;
                            uint64_t *v65 = 0LL;
                          }

                          goto LABEL_164;
                        }

LABEL_163:
                        xmlDOMWrapNsMapFree(v65);
LABEL_164:
                        *clonedNode = v77;
                        return v8;
                      }

                      p_nsDef = &nsDef;
                      goto LABEL_116;
                    }
                  }

                  else
                  {
                    uint64_t ns = (uint64_t)v23->ns;
                  }

                  if (destParent) {
                    uint64_t v52 = (uint64_t)v70;
                  }
                  else {
                    uint64_t v52 = 0LL;
                  }
                  p_nsDef = &nsDef;
                  if (xmlDOMWrapNSNormAcquireNormalizedNs( (uint64_t)destDoc,  v52,  ns,  (uint64_t *)&nsDef,  &namespaceMap,  v22,  v23->type == XML_ATTRIBUTE_NODE) == -1) {
                    goto LABEL_171;
                  }
                }

int xmlDOMWrapAdoptNode( xmlDOMWrapCtxtPtr ctxt, xmlDocPtr sourceDoc, xmlNodePtr node, xmlDocPtr destDoc, xmlNodePtr destParent, int options)
{
  if (!node)
  {
    LODWORD(ctxt) = -1;
    return (int)ctxt;
  }

  xmlDOMWrapCtxtPtr v7 = ctxt;
  LODWORD(ctxt) = -1;
  if (!destDoc) {
    return (int)ctxt;
  }
  xmlElementType type = node->type;
  if (type == XML_NAMESPACE_DECL || destParent && destParent->doc != destDoc) {
    return (int)ctxt;
  }
  doc = node->doc;
  if (doc)
  {
    if (doc != sourceDoc && sourceDoc) {
      return (int)ctxt;
    }
  }

  xmlDocPtr v12 = sourceDoc ? sourceDoc : node->doc;
  if (v12 == destDoc) {
    return (int)ctxt;
  }
  if (type > XML_DOCUMENT_FRAG_NODE)
  {
LABEL_28:
    LODWORD(ctxt) = 1;
    return (int)ctxt;
  }

  if (((1 << type) & 0x1BE) == 0)
  {
    if (type == XML_DOCUMENT_FRAG_NODE)
    {
      LODWORD(ctxt) = 2;
      return (int)ctxt;
    }

    goto LABEL_28;
  }

  xmlNodePtr parent = node->parent;
  if (parent && parent != destParent)
  {
    xmlUnlinkNode(node);
    xmlElementType type = node->type;
  }

  if (type == XML_ATTRIBUTE_NODE)
  {
    LODWORD(ctxt) = xmlDOMWrapAdoptAttr((uint64_t)v12, (uint64_t)node, destDoc, (uint64_t)destParent);
    return (int)ctxt;
  }

  if (type == XML_ELEMENT_NODE)
  {
    LODWORD(ctxt) = xmlDOMWrapAdoptBranch((uint64_t)v7, v12, (uint64_t)node, destDoc, (uint64_t)destParent);
    return (int)ctxt;
  }

  node->doc = destDoc;
  if (v12) {
    BOOL v14 = v12->dict == destDoc->dict;
  }
  else {
    BOOL v14 = 0;
  }
  if (type - 3 < 2)
  {
    if (v14) {
      goto LABEL_66;
    }
    goto LABEL_41;
  }

  if (type != XML_ENTITY_REF_NODE)
  {
    if (type != XML_PI_NODE || v14) {
      goto LABEL_66;
    }
    name = (xmlChar *)node->name;
    if (name)
    {
      dict = destDoc->dict;
      if (dict)
      {
        node->name = xmlDictLookup(dict, node->name, -1);
        if (!v12 || (uint64_t v17 = v12->dict) == 0LL || !xmlDictOwns(v17, name)) {
          xmlFree(name);
        }
        goto LABEL_41;
      }

      if (v12)
      {
        uint64_t v24 = v12->dict;
        if (v24 && xmlDictOwns(v24, node->name)) {
          node->name = xmlStrdup(node->name);
        }
        goto LABEL_41;
      }

      goto LABEL_66;
    }

uint64_t xmlDOMWrapAdoptBranch(uint64_t a1, xmlDocPtr doc, uint64_t a3, const xmlDoc *a4, uint64_t a5)
{
  int v5 = a4;
  xmlDocPtr v7 = doc;
  uint64_t v8 = a1;
  uint64_t v105 = 0LL;
  v106 = 0LL;
  unint64_t v9 = doc && doc->dict == a4->dict;
  if (!a1)
  {
    if (a5) {
      goto LABEL_10;
    }
LABEL_11:
    int v94 = 1;
    goto LABEL_12;
  }

  v106 = *(uint64_t **)(a1 + 16);
  if (!a5) {
    goto LABEL_11;
  }
  if (!*(void *)(a1 + 24))
  {
LABEL_10:
    int v94 = 0;
    int v104 = 0;
    goto LABEL_13;
  }

  int v94 = 0;
LABEL_12:
  int v104 = 1;
LABEL_13:
  uint64_t v10 = 0LL;
  uint64_t v103 = 0LL;
  uint64_t v11 = a3;
  int v12 = -1;
LABEL_14:
  while (2)
  {
    if (*(xmlDocPtr *)(v11 + 64) == v7)
    {
      int v16 = *(_DWORD *)(v11 + 8);
      uint64_t v15 = v11;
    }

    else
    {
      uint64_t v13 = *(void *)(v11 + 48);
      if (!v13)
      {
        uint64_t v19 = v10;
        uint64_t v15 = v11;
        goto LABEL_135;
      }

      uint64_t v14 = *(void *)(a3 + 64);
      do
      {
        uint64_t v15 = v13;
        int v16 = *(_DWORD *)(v13 + 8);
        uint64_t v17 = *(void *)(v13 + 64);
        if (v16 == 20 || v17 == v14) {
          break;
        }
        uint64_t v13 = *(void *)(v13 + 48);
      }

      while (v13);
      if (v17 != v14)
      {
LABEL_23:
        uint64_t v19 = v10;
        goto LABEL_135;
      }
    }

    *(void *)(v15 + 6xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v5;
    uint64_t v19 = 0xFFFFFFFFLL;
    switch(v16)
    {
      case 1:
        uint64_t v25 = v8;
        uint64_t v83 = v5;
        v88 = v7;
        ++v12;
        uint64_t v26 = *(void **)(v15 + 96);
        if (!v26) {
          goto LABEL_77;
        }
        if (v8 && *(void *)(v8 + 24))
        {
          uint64_t v103 = v15;
          goto LABEL_78;
        }

        if (v104)
        {
          uint64_t v105 = *(void **)(v15 + 96);
          do
          {
LABEL_64:
            if (v106)
            {
              uint64_t v41 = *v106;
              if (*v106)
              {
                do
                {
                  if (*(int *)(v41 + 36) >= -1 && *(_DWORD *)(v41 + 32) == -1)
                  {
                    uint64_t v42 = (const xmlChar *)v105[3];
                    int v43 = *(const xmlChar **)(*(void *)(v41 + 24) + 24LL);
                    if (v42 == v43 || xmlStrEqual(v42, v43)) {
                      *(_DWORD *)(v41 + 32) = v12;
                    }
                  }

                  uint64_t v41 = *(void *)v41;
                }

                while (v41);
                uint64_t v26 = v105;
              }
            }

            else {
              uint64_t v10 = 0xFFFFFFFFLL;
            }
            uint64_t v26 = (void *)*v105;
            uint64_t v105 = v26;
          }

          while (v26);
LABEL_77:
          uint64_t v103 = v15;
          int v5 = v83;
          xmlDocPtr v7 = v88;
          uint64_t v8 = v25;
          goto LABEL_78;
        }

        else {
          uint64_t v10 = v10;
        }
        uint64_t v26 = *(void **)(v15 + 96);
        uint64_t v105 = v26;
        if (v26)
        {
          int v104 = 1;
          goto LABEL_64;
        }

        int v44 = (uint64_t *)(v15 + 72);
        int v104 = 1;
        if (!*(void *)(v15 + 72))
        {
          uint64_t v103 = v15;
          int v5 = v83;
          xmlDocPtr v7 = v88;
          uint64_t v8 = v25;
          goto LABEL_104;
        }

        uint64_t v103 = v15;
        int v5 = v83;
        xmlDocPtr v7 = v88;
        uint64_t v8 = v25;
LABEL_84:
        int v47 = v106;
        uint64_t v98 = v8;
        unsigned int v92 = v9;
        if (v106)
        {
          while (1)
          {
            int v47 = (uint64_t *)*v47;
            if (!v47) {
              break;
            }
            if (*((_DWORD *)v47 + 8) == -1 && *v44 == v47[2])
            {
              uint64_t v48 = v47 + 3;
              goto LABEL_103;
            }
          }
        }

        v89 = v7;
        v49 = v5;
        if (v8)
        {
          int v50 = *(uint64_t (**)(uint64_t, uint64_t, void, void))(v8 + 24);
          uint64_t v51 = *v44;
          if (v50)
          {
            uint64_t v105 = (void *)v50(v8, v15, *(void *)(v51 + 16), *(void *)(v51 + 24));
            else {
              uint64_t v10 = 0xFFFFFFFFLL;
            }
            uint64_t v48 = (uint64_t *)&v105;
            int v5 = v49;
            goto LABEL_102;
          }
        }

        else
        {
          uint64_t v51 = *v44;
        }

        if (v94) {
          uint64_t v52 = 0LL;
        }
        else {
          uint64_t v52 = v103;
        }
        uint64_t v48 = (uint64_t *)&v105;
        int v53 = xmlDOMWrapNSNormAcquireNormalizedNs( (uint64_t)v5,  v52,  v51,  (uint64_t *)&v105,  &v106,  v12,  *(_DWORD *)(v15 + 8) == 2);
        int v5 = v49;
        if (v53 == -1) {
          uint64_t v10 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v10 = v10;
        }
LABEL_102:
        xmlDocPtr v7 = v89;
LABEL_103:
        *int v44 = *v48;
        uint64_t v8 = v98;
        unint64_t v9 = v92;
LABEL_104:
        uint64_t v54 = (xmlDoc *)v9;
        if ((v9 & 1) != 0) {
          goto LABEL_111;
        }
        uint64_t v55 = *(void **)(v15 + 16);
        if (!v55) {
          goto LABEL_111;
        }
        dict = v5->dict;
        if (dict)
        {
          int v86 = v5;
          xmlDocPtr v57 = v7;
          uint64_t v99 = v8;
          *(void *)(v15 + 16) = xmlDictLookup(dict, *(const xmlChar **)(v15 + 16), -1);
          if (!v57
            || (unsigned int v58 = v57->dict) == 0LL
            || (v59 = xmlDictOwns(v58, (const xmlChar *)v55), v8 = v99, xmlDocPtr v7 = v57, v5 = v86, !v59))
          {
            xmlFree(v55);
            uint64_t v8 = v99;
            xmlDocPtr v7 = v57;
            int v5 = v86;
          }
        }

        else
        {
          if (!v7)
          {
            if (*(_DWORD *)(v15 + 8) != 1) {
              goto LABEL_117;
            }
            goto LABEL_112;
          }

          uint64_t v62 = v7->dict;
          if (v62)
          {
            xmlSchematronParserCtxtPtr v63 = v5;
            int v64 = v7;
            uint64_t v101 = v8;
            int v65 = xmlDictOwns(v62, *(const xmlChar **)(v15 + 16));
            uint64_t v8 = v101;
            xmlDocPtr v7 = v64;
            int v5 = v63;
            if (v65)
            {
              xmlDOMWrapCtxtPtr v66 = xmlStrdup(*(const xmlChar **)(v15 + 16));
              uint64_t v8 = v101;
              xmlDocPtr v7 = v64;
              int v5 = v63;
              *(void *)(v15 + 16) = v66;
            }
          }
        }

LABEL_111:
        if (*(_DWORD *)(v15 + 8) != 1)
        {
          if (v7 && *(_DWORD *)(v15 + 80) == 2)
          {
            __int128 v60 = v5;
            uint64_t v61 = v7;
            uint64_t v100 = v8;
            xmlRemoveID(v7, (xmlAttrPtr)v15);
            uint64_t v8 = v100;
            xmlDocPtr v7 = v61;
            int v5 = v60;
          }

LABEL_117:
          *(_DWORD *)(v15 + 80) = 0;
          *(void *)(v15 + 88) = 0LL;
          unint64_t v9 = (unint64_t)v54;
          goto LABEL_118;
        }

    if (*(_DWORD *)v46 != 2) {
      goto LABEL_123;
    }
    if (*(_DWORD *)(v46 + 40) == 1)
    {
      uint64_t v8 = 0LL;
      goto LABEL_207;
    }

    xmlDocPtr v57 = xmlSchemaGetElem(*((void *)v1 + 5), *(const xmlChar **)(v45 + 24), *(xmlChar **)(v45 + 32));
    if (v57)
    {
      *(void *)(*((void *)v1 + 24) + 80LL) = v57;
      goto LABEL_122;
    }

    if (*(_DWORD *)(v46 + 40) == 3)
    {
      xmlSchemaCustomErr4( v1,  1845,  0LL,  0LL,  (const xmlChar *)"No matching global element declaration available, but demanded by the strict wildcard",  0LL,  0LL,  0LL,  0LL);
      uint64_t v8 = v1[26];
      if ((_DWORD)v8)
      {
        if ((v8 & 0x80000000) == 0) {
          goto LABEL_207;
        }
LABEL_153:
        xmlDocPtr v32 = "xmlSchemaValidateElem";
        uint64_t v33 = "calling xmlSchemaValidateElemWildcard()";
        goto LABEL_227;
      }
    }

    else
    {
      int v64 = v1[74];
      if ((int)v64 < 1)
      {
LABEL_149:
        *(void *)(*((void *)v1 + 24) + 56LL) = xmlSchemaGetBuiltInType(XML_SCHEMAS_ANYTYPE);
      }

      else
      {
        int v65 = (uint64_t *)*((void *)v1 + 36);
        while (*(_DWORD *)(*v65 + 92) != 1)
        {
          ++v65;
          if (!--v64) {
            goto LABEL_149;
          }
        }

        if (xmlSchemaProcessXSIType((uint64_t)v1, *v65, *((void *)v1 + 24) + 56LL, 0LL) == -1)
        {
          xmlSchemaInternalErr2( v1,  (const xmlChar *)"xmlSchemaValidateElemWildcard",  (const xmlChar *)"calling xmlSchemaProcessXSIType() to process the attribute 'xsi:nil'",  0LL);
          goto LABEL_153;
        }
      }
    }

LABEL_112:
        *(void *)(v15 + 10xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
        *(_DWORD *)(v15 + 112) = 0;
        uint64_t v11 = *(void *)(v15 + 88);
        unint64_t v9 = (unint64_t)v54;
        if (v11) {
          continue;
        }
LABEL_118:
        uint64_t v11 = *(void *)(v15 + 24);
        uint64_t v19 = v10;
        if (v11) {
          continue;
        }
LABEL_135:
        while (v15 != a3)
        {
          unsigned int v72 = *(_DWORD *)(v15 + 8);
          if (v72 <= 0x14 && ((1 << v72) & 0x180002) != 0)
          {
            int v74 = v106;
            if (v106)
            {
              uint64_t v75 = *v106;
              if (*v106)
              {
                uint64_t v77 = v106 + 1;
                uint64_t v76 = v106[1];
                if (!v76) {
                  goto LABEL_174;
                }
                do
                {
                  if (*(_DWORD *)(v76 + 36) < v12) {
                    break;
                  }
                  v78 = *(uint64_t **)(v76 + 8);
                  *uint64_t v77 = (uint64_t)v78;
                  if (v78) {
                    int v74 = v78;
                  }
                  uint64_t *v74 = 0LL;
                  *(void *)uint64_t v76 = v106[2];
                  int v74 = v106;
                  v106[2] = v76;
                  uint64_t v77 = v74 + 1;
                  uint64_t v76 = v74[1];
                }

                while (v76);
                uint64_t v75 = *v74;
                if (*v74)
                {
LABEL_174:
                  do
                  {
                    if (*(_DWORD *)(v75 + 32) >= v12) {
                      *(_DWORD *)(v75 + 32) = -1;
                    }
                    uint64_t v75 = *(void *)v75;
                  }

                  while (v75);
                }
              }
            }

            --v12;
          }

          uint64_t v11 = *(void *)(v15 + 48);
          if (!v11)
          {
            uint64_t v15 = *(void *)(v15 + 40);
            if (v72 != 2) {
              continue;
            }
            uint64_t v11 = *(void *)(v15 + 24);
            if (!v11) {
              continue;
            }
          }

          uint64_t v10 = v19;
          goto LABEL_14;
        }

        uint64_t v79 = v106;
        if (v106)
        {
          if (v8 && *(uint64_t **)(v8 + 16) == v106)
          {
            uint64_t v81 = *v106;
            if (*v106)
            {
              uint64_t v82 = v106[2];
              if (v82)
              {
                *(void *)v106[1] = v82;
                uint64_t v79 = v106;
                uint64_t v81 = *v106;
              }

              v79[2] = v81;
              *uint64_t v79 = 0LL;
            }
          }

          else
          {
            xmlDOMWrapNsMapFree(v106);
          }
        }

        return v19;
      case 2:
LABEL_78:
        int v44 = (uint64_t *)(v15 + 72);
        if (!*(void *)(v15 + 72)) {
          goto LABEL_104;
        }
        if (!v104)
        {
          int v85 = v5;
          int v91 = v9;
          unint64_t v9 = (unint64_t)v7;
          uint64_t v45 = v8;
          int v46 = xmlDOMWrapNSNormGatherInScopeNs(&v106, a5);
          uint64_t v8 = v45;
          xmlDocPtr v7 = (xmlDocPtr)v9;
          LODWORD(v9) = v91;
          int v5 = v85;
          if (v46 == -1) {
            uint64_t v10 = 0xFFFFFFFFLL;
          }
          else {
            uint64_t v10 = v10;
          }
          int v104 = 1;
        }

        goto LABEL_84;
      case 3:
      case 4:
        if ((v9 & 1) != 0) {
          goto LABEL_23;
        }
        if (!v7) {
          goto LABEL_23;
        }
        uint64_t v20 = *(const xmlChar **)(v15 + 80);
        if (!v20) {
          goto LABEL_23;
        }
        int v21 = v7->dict;
        if (!v21) {
          goto LABEL_23;
        }
        uint64_t v95 = v8;
        v87 = v7;
        int v22 = v5;
        if (xmlDictOwns(v21, v20))
        {
          xmlNodePtr v23 = v22->dict;
          if (v23) {
            uint64_t v24 = (void *)xmlDictLookup(v23, *(const xmlChar **)(v15 + 80), -1);
          }
          else {
            uint64_t v24 = xmlStrdup(*(const xmlChar **)(v15 + 80));
          }
          int v5 = v22;
          *(void *)(v15 + 80) = v24;
          uint64_t v19 = v10;
        }

        else
        {
          uint64_t v19 = v10;
          int v5 = v22;
        }

        xmlDocPtr v7 = v87;
        goto LABEL_134;
      case 5:
        *(void *)(v15 + 80) = 0LL;
        *(void *)(v15 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
        *(void *)(v15 + 32) = 0LL;
        uint64_t v95 = v8;
        unsigned int v90 = v9;
        signed int v27 = v7;
        uint64_t v28 = v5;
        xmlEntityPtr DocEntity = xmlGetDocEntity(v5, *(const xmlChar **)(v15 + 16));
        if (DocEntity)
        {
          *(void *)(v15 + 80) = DocEntity->content;
          *(void *)(v15 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = DocEntity;
          *(void *)(v15 + 32) = DocEntity;
        }

        uint64_t v19 = v10;
        int v5 = v28;
        xmlDocPtr v7 = v27;
        unint64_t v9 = v90;
LABEL_134:
        uint64_t v8 = v95;
        goto LABEL_135;
      case 7:
        if ((v9 & 1) != 0) {
          goto LABEL_118;
        }
        int v30 = *(void **)(v15 + 16);
        if (!v30) {
          goto LABEL_51;
        }
        int v31 = v5->dict;
        if (v31)
        {
          uint64_t v84 = v5;
          xmlDocPtr v32 = v7;
          uint64_t v96 = v8;
          *(void *)(v15 + 16) = xmlDictLookup(v31, *(const xmlChar **)(v15 + 16), -1);
          if (!v32
            || (uint64_t v33 = v32->dict) == 0LL
            || (v34 = xmlDictOwns(v33, (const xmlChar *)v30), v8 = v96, xmlDocPtr v7 = v32, v5 = v84, !v34))
          {
            xmlFree(v30);
            uint64_t v8 = v96;
            xmlDocPtr v7 = v32;
            int v5 = v84;
          }
        }

        else
        {
          if (!v7) {
            goto LABEL_118;
          }
          uint64_t v67 = v7->dict;
          if (v67)
          {
            uint64_t v68 = v5;
            v69 = v7;
            uint64_t v102 = v8;
            int v70 = xmlDictOwns(v67, *(const xmlChar **)(v15 + 16));
            uint64_t v8 = v102;
            xmlDocPtr v7 = v69;
            int v5 = v68;
            if (v70)
            {
              uint64_t v71 = xmlStrdup(*(const xmlChar **)(v15 + 16));
              uint64_t v8 = v102;
              xmlDocPtr v7 = v69;
              int v5 = v68;
              *(void *)(v15 + 16) = v71;
            }
          }
        }

            uint64_t v61 = *(void *)(j + 56);
            if (*(int *)(v61 + 8) >= 1)
            {
              uint64_t v62 = 0LL;
              do
              {
                xmlSchematronParserCtxtPtr v63 = *(void *)(*(void *)v61 + 8 * v62);
                if (!v54) {
                  goto LABEL_136;
                }
                name[0] = 0LL;
                v173 = *(void *)(v63 + 8);
                xmlSchemaFormatIDCKeySequence_1(v8, name, v173, v53, 1);
                int v64 = name[0];
                int v65 = (void **)xmlHashLookup(v56, name[0]);
                if (v64)
                {
                  xmlFree(v64);
                  name[0] = 0LL;
                }

                for (; v65; int v65 = (void **)*v65)
                {
                  if ((int)v53 >= 1)
                  {
                    xmlDOMWrapCtxtPtr v66 = *(void *)(*(void *)(*(void *)(v54 + 16) + 8LL * *((int *)v65 + 2)) + 8LL);
                    uint64_t v67 = v173;
                    uint64_t v68 = v53;
                    while (1)
                    {
                      v69 = xmlSchemaAreValuesEqual( *(xmlSchemaValPtr *)(*(void *)v66 + 8LL),  *(xmlSchemaVal **)(*(void *)v67 + 8LL));
                      if (v69 == -1) {
                        goto LABEL_304;
                      }
                      if (!v69) {
                        break;
                      }
                      v67 += 8LL;
                      v66 += 8LL;
                      if (!--v68) {
                        goto LABEL_144;
                      }
                    }
                  }
                }

                uint64_t v8 = v176;
                if (v170 && (int v70 = *(void *)(v54 + 32), *(int *)(v70 + 8) >= 1))
                {
                  uint64_t v71 = 0LL;
                  while ((int)v53 < 1)
                  {
LABEL_135:
                  }

                  unsigned int v72 = *(void *)(*(void *)(*(void *)v70 + 8 * v71) + 8LL);
                  int v73 = v173;
                  int v74 = v53;
                  do
                  {
                    uint64_t v75 = xmlSchemaAreValuesEqual( *(xmlSchemaValPtr *)(*(void *)v72 + 8LL),  *(xmlSchemaVal **)(*(void *)v73 + 8LL));
                    if (v75 == -1) {
                      goto LABEL_304;
                    }
                    if (!v75)
                    {
                      int v70 = *(void *)(v54 + 32);
                      uint64_t v8 = v176;
                      goto LABEL_135;
                    }

                    v73 += 8LL;
                    v72 += 8LL;
                    --v74;
                  }

                  while (v74);
                  *(void *)nbval = 0LL;
                  *(void *)terminal = 0LL;
                  v78 = xmlSchemaFormatIDCKeySequence_1(v176, (xmlChar **)terminal, *(void *)(v63 + 8), v53, 0);
                  ComponentQName = xmlSchemaGetComponentQName((void **)nbval, *(int **)(*(void *)(j + 24) + 8LL));
                  xmlSchemaKeyrefErr( (uint64_t)v176,  v63,  (const xmlChar *)"More than one match found for key-sequence %s of keyref '%s'",  v78,  ComponentQName);
                  if (*(void *)terminal) {
                    xmlFree(*(void **)terminal);
                  }
                  if (*(void *)nbval) {
                    xmlFree(*(void **)nbval);
                  }
LABEL_144:
                  uint64_t v8 = v176;
                }

                else
                {
LABEL_136:
                  *(void *)terminal = 0LL;
                  name[0] = 0LL;
                  uint64_t v76 = xmlSchemaFormatIDCKeySequence_1(v8, name, *(void *)(v63 + 8), v53, 0);
                  uint64_t v77 = xmlSchemaGetComponentQName((void **)terminal, *(int **)(*(void *)(j + 24) + 8LL));
                  xmlSchemaKeyrefErr( (uint64_t)v8,  v63,  (const xmlChar *)"No match found for key-sequence %s of keyref '%s'",  v76,  v77);
                  if (name[0]) {
                    xmlFree(name[0]);
                  }
                  if (*(void *)terminal) {
                    xmlFree(*(void **)terminal);
                  }
                }

                ++v62;
                uint64_t v61 = *(void *)(j + 56);
              }

              while (v62 < *(int *)(v61 + 8));
            }

            if (v56) {
              xmlHashFree(v56, (xmlHashDeallocator)xmlFreeIDCHashEntry);
            }
          }
        }
      }
    }
  }

  if (!*(void *)(v175 + 96)
    || (v80 = v8[43], v81 = __OFSUB__(v80, 1), uint64_t v82 = v80 - 1, (v82 < 0) ^ v81)
    || !v8[80] && !v8[81]
    || (uint64_t v83 = *(uint64_t **)(*((void *)v8 + 24) + 96LL)) == 0LL)
  {
LABEL_254:
    xmlSchemaClearElemInfo((uint64_t)v8, v175);
    v128 = v8[43];
    if (v128)
    {
      uint64_t v129 = (uint64_t *)*((void *)v8 + 25);
      for (uint64_t result = v168; v129; v129 = (uint64_t *)*v129)
      {
        if (*((_DWORD *)v129 + 4) == v128) {
          *((_DWORD *)v129 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = -1;
        }
      }

      v131 = v128 - 1;
      v8[43] = v131;
      *((void *)v8 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = *(void *)(*((void *)v8 + 22) + 8LL * v131);
    }

    else
    {
      uint64_t result = 0LL;
      v8[43] = -1;
      *((void *)v8 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
    }

    return result;
  }

  uint64_t v84 = 0;
  int v85 = 0LL;
  uint64_t v174 = (void *)(*(void *)(*((void *)v8 + 22) + 8LL * v82) + 96LL);
  while (1)
  {
    int v86 = *((_DWORD *)v83 + 6);
    if (!v86)
    {
      v88 = v83[4];
      if (!v88 || !*(_DWORD *)(v88 + 8)) {
        goto LABEL_253;
      }
    }

    if (!v8[81])
    {
      v87 = (uint64_t *)*((void *)v8 + 25);
      while (v87[1] != v83[1])
      {
        v87 = (uint64_t *)*v87;
        if (!v87) {
          goto LABEL_166;
        }
      }

      v89 = *((_DWORD *)v87 + 4);
      if (v89 == -1 || v89 >= v8[43]) {
        goto LABEL_253;
      }
    }

      if (v17)
      {
LABEL_113:
        for (kuint64_t k = ctxt->cur + 1; ; ++kk)
        {
          uint64_t v40 = *(kk - 1);
          if (((1LL << v40) & 0x100002600LL) == 0)
          {
            if (v40 == 58 && *kk == 58)
            {
              ctxt->cur = kk + 1;
              xmlFree(v10);
              uint64_t v10 = 0LL;
              goto LABEL_30;
            }

            break;
          }

          ctxt->cur = kk;
        }
      }
    }

    else
    {
      if (*ctxt->cur == 64)
      {
        uint64_t v10 = 0LL;
        ++ctxt->cur;
        uint64_t v17 = 3;
        goto LABEL_30;
      }

      uint64_t v10 = 0LL;
    }

uint64_t xmlDOMWrapAdoptAttr(uint64_t a1, uint64_t a2, xmlDoc *doc, uint64_t a4)
{
  *(void *)(a2 + 6xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = doc;
  uint64_t v7 = *(void *)(a2 + 72);
  if (v7)
  {
    uint64_t v9 = *(void *)(v7 + 24);
    if (v9 && *(_BYTE *)v9 == 120 && *(_BYTE *)(v9 + 1) == 109 && *(_BYTE *)(v9 + 2) == 108 && !*(_BYTE *)(v9 + 3))
    {
      uint64_t v14 = (xmlNs *)xmlTreeEnsureXMLDecl((uint64_t)doc);
    }

    else
    {
      uint64_t v10 = *(const xmlChar **)(v7 + 16);
      if (a4)
      {
        if (!v10 || *(_DWORD *)(a4 + 8) == 18) {
          goto LABEL_10;
        }
        if (!xmlStrEqual(v10, (const xmlChar *)"http://www.w3.org/XML/1998/namespace"))
        {
          uint64_t v28 = 0LL;
          uint64_t v29 = 0LL;
          uint64_t v30 = a4;
          while (1)
          {
            int v31 = *(_DWORD *)(v30 + 8);
            if (v31 == 1)
            {
              xmlNsPtr v12 = *(xmlNsPtr *)(v30 + 96);
              if (v12)
              {
                while (1)
                {
                  if (v12->prefix)
                  {
                    if (v28)
                    {
                      int v34 = *(void **)(v28 + 96);
                      while (1)
                      {
                        __int128 v35 = (const xmlChar *)v34[3];
                        prefix = v12->prefix;
                        if (v35 == prefix) {
                          break;
                        }
                        BOOL v37 = !v35 || prefix == 0LL;
                        if (!v37 && xmlStrEqual(v35, prefix)) {
                          break;
                        }
                        int v34 = (void *)*v34;
                        if (!v34) {
                          goto LABEL_77;
                        }
                      }
                    }

                    else
                    {
LABEL_77:
                      href = v12->href;
                      if (href == v10 || xmlStrEqual(v10, href))
                      {
                        if (!v29) {
                          goto LABEL_15;
                        }
                        int v39 = xmlNsInScope(a4, v28, (xmlChar *)v12->prefix);
                        int v40 = v39 ? 0 : 6;
                        unsigned int v11 = v39 < 0 ? 1 : v40;
                        if (v11 != 6)
                        {
                          if (!v11) {
                            goto LABEL_16;
                          }
LABEL_10:
                          unsigned int v11 = -1;
LABEL_11:
                          xmlNsPtr v12 = xmlDOMWrapNSNormDeclareNsForced( a4,  *(xmlChar **)(*(void *)(a2 + 72) + 16LL),  *(xmlChar **)(*(void *)(a2 + 72) + 24LL),  1);
                          goto LABEL_16;
                        }
                      }
                    }
                  }

                  xmlNsPtr v12 = v12->next;
                  if (!v12)
                  {
                    uint64_t v33 = v30;
                    uint64_t v29 = v28;
                    goto LABEL_90;
                  }
                }
              }

              uint64_t v33 = v28;
            }

            else
            {
              BOOL v32 = v31 == 6 || v31 == 17;
              uint64_t v33 = v28;
              if (v32)
              {
LABEL_96:
                unsigned int v11 = 0;
                goto LABEL_11;
              }
            }

LABEL_90:
            uint64_t v30 = *(void *)(v30 + 40);
            if (!v30) {
              goto LABEL_96;
            }
            unsigned int v11 = 0;
            uint64_t v28 = v33;
            if (*(void *)(v30 + 64) == v30) {
              goto LABEL_11;
            }
          }
        }

        uint64_t v14 = (xmlNs *)xmlTreeEnsureXMLDecl((uint64_t)doc);
        if (!v14) {
          goto LABEL_10;
        }
      }

      else
      {
        uint64_t v14 = xmlDOMWrapStoreNs((uint64_t)doc, *(const xmlChar **)(v7 + 16), (const xmlChar *)v9);
      }
    }

    xmlNsPtr v12 = v14;
LABEL_15:
    unsigned int v11 = 0;
LABEL_16:
    if (v12) {
      uint64_t v13 = v11;
    }
    else {
      uint64_t v13 = 0xFFFFFFFFLL;
    }
    *(void *)(a2 + 72) = v12;
  }

  else
  {
    uint64_t v13 = 0LL;
  }

  uint64_t v15 = *(void **)(a2 + 16);
  if (v15)
  {
    dict = doc->dict;
    if (dict)
    {
      *(void *)(a2 + 16) = xmlDictLookup(dict, *(const xmlChar **)(a2 + 16), -1);
      if (!a1 || (uint64_t v17 = *(xmlDict **)(a1 + 152)) == 0LL || !xmlDictOwns(v17, (const xmlChar *)v15)) {
        xmlFree(v15);
      }
    }

    else if (a1)
    {
      uint64_t v18 = *(xmlDict **)(a1 + 152);
      if (v18)
      {
        if (xmlDictOwns(v18, *(const xmlChar **)(a2 + 16))) {
          *(void *)(a2 + 16) = xmlStrdup(*(const xmlChar **)(a2 + 16));
        }
      }
    }
  }

  *(_DWORD *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0LL;
  uint64_t v19 = *(void *)(a2 + 24);
  if (v19)
  {
    int v20 = *(_DWORD *)(v19 + 8);
    if (v20 == 18) {
      uint64_t v13 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v13;
    }
    while (1)
    {
      *(void *)(v19 + 6xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = doc;
      if ((v20 - 3) >= 2)
      {
        if (v20 == 5)
        {
          *(void *)(v19 + 80) = 0LL;
          *(void *)(v19 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
          *(void *)(v19 + 32) = 0LL;
          if (doc->intSubset || doc->extSubset)
          {
            xmlEntityPtr DocEntity = xmlGetDocEntity(doc, *(const xmlChar **)(v19 + 16));
            if (DocEntity)
            {
              *(void *)(v19 + 80) = DocEntity->content;
              *(void *)(v19 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = DocEntity;
              *(void *)(v19 + 32) = DocEntity;
            }
          }
        }
      }

      else if (a1)
      {
        int v21 = *(const xmlChar **)(v19 + 80);
        if (v21)
        {
          int v22 = *(xmlDict **)(a1 + 152);
          if (v22)
          {
            if (xmlDictOwns(v22, v21))
            {
              xmlNodePtr v23 = doc->dict;
              if (v23) {
                uint64_t v24 = (void *)xmlDictLookup(v23, *(const xmlChar **)(v19 + 80), -1);
              }
              else {
                uint64_t v24 = xmlStrdup(*(const xmlChar **)(v19 + 80));
              }
              *(void *)(v19 + 80) = v24;
            }
          }
        }
      }

      uint64_t v26 = *(void *)(v19 + 24);
      if (!v26) {
        break;
      }
LABEL_53:
      int v20 = *(_DWORD *)(v26 + 8);
      uint64_t v19 = v26;
    }

    while (v19 != a2)
    {
      uint64_t v26 = *(void *)(v19 + 48);
      if (v26) {
        goto LABEL_53;
      }
      uint64_t v19 = *(void *)(v19 + 40);
    }
  }

  return v13;
}

xmlNsPtr xmlDOMWrapNSNormDeclareNsForced(uint64_t a1, xmlChar *href, xmlChar *str1, int a4)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (*(_DWORD *)(a1 + 8) != 1) {
    return 0LL;
  }
  int v8 = 0;
  __int16 v23 = 0;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  *(_OWORD *)char __str = 0u;
  uint64_t v9 = (xmlNsPtr *)(a1 + 96);
  uint64_t v10 = (char *)str1;
LABEL_3:
  unsigned int v11 = *v9;
  if (*v9)
  {
    do
    {
      xmlNsPtr v12 = (const xmlChar *)v11[3];
      if (v12 == (const xmlChar *)v10 || xmlStrEqual((const xmlChar *)v10, v12)) {
        goto LABEL_31;
      }
      unsigned int v11 = (void *)*v11;
    }

    while (v11);
  }

  if (a4)
  {
    uint64_t v13 = *(void *)(a1 + 40);
    if (v13)
    {
      if (*(void *)(v13 + 64) != v13 && *(_DWORD *)(v13 + 8) != 18)
      {
        if (v10 && *v10 == 120 && v10[1] == 109 && v10[2] == 108 && !v10[3]) {
          goto LABEL_31;
        }
        do
        {
          int v14 = *(_DWORD *)(v13 + 8);
          if (v14 == 1)
          {
            int v16 = *(void **)(v13 + 96);
            if (v16)
            {
              while (1)
              {
                uint64_t v17 = (const xmlChar *)v16[3];
                if (v17 == (const xmlChar *)v10 || xmlStrEqual((const xmlChar *)v10, v17)) {
                  break;
                }
                int v16 = (void *)*v16;
                if (!v16) {
                  goto LABEL_27;
                }
              }

              if (!v16[2]) {
                break;
              }
LABEL_31:
              if (v8 == 1000) {
                return 0LL;
              }
              ++v8;
              uint64_t v10 = __str;
              if (str1) {
                snprintf(__str, 0x32uLL, "%.30s_%d", (const char *)str1, v8);
              }
              else {
                snprintf(__str, 0x32uLL, "ns_%d", v8);
              }
              goto LABEL_3;
            }
          }

          else if (v14 == 6 || v14 == 17)
          {
            break;
          }

xmlURIPtr xmlParseURI(const char *str)
{
  if (!str) {
    return 0LL;
  }
  xmlURIPtr URI = xmlCreateURI();
  uint64_t v3 = URI;
  if (URI && xmlParse3986URIReference((uint64_t)URI, (unsigned __int8 *)str))
  {
    xmlFreeURI(v3);
    return 0LL;
  }

  return v3;
}

xmlURIPtr xmlCreateURI(void)
{
  v0 = (xmlURI *)xmlMalloc(0x58uLL);
  int v1 = v0;
  if (v0)
  {
    v0->query_raw = 0LL;
    *(_OWORD *)&v0->path = 0u;
    *(_OWORD *)&v0->fragment = 0u;
    *(_OWORD *)&v0->authority = 0u;
    *(_OWORD *)&v0->user = 0u;
    *(_OWORD *)&v0->scheme = 0u;
  }

  else
  {
    xmlURIErrMemory((uint64_t)"creating URI structure\n");
  }

  return v1;
}

uint64_t xmlParse3986URIReference(uint64_t a1, unsigned __int8 *a2)
{
  if (a2)
  {
    xmlCleanURI(a1);
    xmlElementType v36 = a2;
    if ((*a2 & 0xDFu) - 65 > 0x19) {
      goto LABEL_68;
    }
    for (uint64_t i = 0LL; ; ++i)
    {
      unsigned int v5 = a2[i + 1];
      if (v5 - 48 >= 0xA && (v5 & 0xFFFFFFDF) - 65 >= 0x1A && (v5 > 0x2E || ((1LL << v5) & 0x680000000000LL) == 0)) {
        break;
      }
    }

    if (a1)
    {
      if (*(void *)a1) {
        xmlFree(*(void **)a1);
      }
      *(void *)a1 = xmlStrndup(a2, (int)i + 1);
      unsigned int v5 = a2[i + 1];
    }

    if (v5 != 58) {
      goto LABEL_68;
    }
    uint64_t v10 = &a2[i + 2];
    int v9 = *v10;
    BOOL v37 = v10;
    if (v9 == 47)
    {
      if (a2[i + 3] == 47)
      {
        BOOL v37 = &a2[i + 4];
        if (!*(void *)(a1 + 24)) {
          *(_DWORD *)(a1 + 40) = -1;
        }
      }

      else if (xmlParse3986PathAbsolute(a1, &v37))
      {
        goto LABEL_68;
      }

      uint64_t v10 = v37;
      goto LABEL_60;
    }

    if ((v9 - 48) >= 0xA && (v9 & 0xFFFFFFDF) - 65 >= 0x1A)
    {
      uint64_t v11 = (v9 - 33);
      if (v11 == 4)
      {
        if ((a2[i + 3] - 48) >= 0xAu
          && ((unsigned int v17 = a2[i + 3] - 65, v17 > 0x25) || ((1LL << v17) & 0x3F0000003FLL) == 0)
          || (a2[i + 4] - 48) >= 0xAu
          && ((unsigned int v18 = a2[i + 4] - 65, v18 > 0x25) || ((1LL << v18) & 0x3F0000003FLL) == 0))
        {
LABEL_53:
          if (a1)
          {
            uint64_t v19 = *(void **)(a1 + 48);
            if (v19) {
              xmlFree(v19);
            }
            *(void *)(a1 + 48) = 0LL;
          }

LABEL_118:
            uint64_t v8 = 1LL;
            goto LABEL_119;
          }

          if ((v21 - 48) < 0xA || (v21 & 0xFFFFFFDF) - 65 < 0x1A)
          {
LABEL_80:
            uint64_t v38 = a2;
            unsigned __int8 v24 = 58;
            for (int j = 0; !xmlParse3986Segment(&v38, v24, j); int j = 1)
            {
              uint64_t v26 = v38;
              if (*v38 != 47)
              {
                if (a1)
                {
                  signed int v27 = *(void **)(a1 + 48);
                  if (v27) {
                    xmlFree(v27);
                  }
                  if (v26 == a2)
                  {
                    uint64_t v29 = 0LL;
                  }

                  else
                  {
                    int v28 = (_DWORD)v26 - (_DWORD)a2;
                    if ((*(_BYTE *)(a1 + 72) & 2) != 0) {
                      uint64_t v29 = xmlStrndup(a2, v28);
                    }
                    else {
                      uint64_t v29 = xmlURIUnescapeString((const char *)a2, v28, 0LL);
                    }
                  }

                  *(void *)(a1 + 48) = v29;
                }

                BOOL v37 = v26;
                goto LABEL_109;
              }

              ++v38;
              unsigned __int8 v24 = 0;
            }

            goto LABEL_118;
          }

          uint64_t v23 = (v21 - 33);
          if (v23 == 4)
          {
            if ((a2[1] - 48) < 0xAu
              || (unsigned int v30 = a2[1] - 65, v30 <= 0x25) && ((1LL << v30) & 0x3F0000003FLL) != 0)
            {
              unsigned int v31 = a2[2] - 65;
              if (v31 <= 0x25 && ((1LL << v31) & 0x3F0000003FLL) != 0) {
                goto LABEL_80;
              }
            }
          }

          else
          {
LABEL_101:
            if (v21 == 126) {
              goto LABEL_80;
            }
          }

          if (a1)
          {
            BOOL v32 = *(void **)(a1 + 48);
            if (v32) {
              xmlFree(v32);
            }
            *(void *)(a1 + 48) = 0LL;
          }

          goto LABEL_109;
        }
      }

      else
      {
LABEL_52:
        if (v9 != 126) {
          goto LABEL_53;
        }
      }
    }

void xmlFreeURI(xmlURIPtr uri)
{
  if (uri)
  {
    scheme = uri->scheme;
    if (scheme) {
      xmlFree(scheme);
    }
    server = uri->server;
    if (server) {
      xmlFree(server);
    }
    user = uri->user;
    if (user) {
      xmlFree(user);
    }
    path = uri->path;
    if (path) {
      xmlFree(path);
    }
    fragment = uri->fragment;
    if (fragment) {
      xmlFree(fragment);
    }
    opaque = uri->opaque;
    if (opaque) {
      xmlFree(opaque);
    }
    authority = uri->authority;
    if (authority) {
      xmlFree(authority);
    }
    query = uri->query;
    if (query) {
      xmlFree(query);
    }
    query_raw = uri->query_raw;
    if (query_raw) {
      xmlFree(query_raw);
    }
    xmlFree(uri);
  }

xmlURIPtr xmlParseURIRaw(const char *str, int raw)
{
  if (!str) {
    return 0LL;
  }
  xmlURIPtr URI = xmlCreateURI();
  unsigned int v5 = URI;
  if (URI)
  {
    if (raw) {
      URI->cleanup |= 2u;
    }
    if (xmlParse3986URIReference((uint64_t)URI, (unsigned __int8 *)str))
    {
      xmlFreeURI(v5);
      return 0LL;
    }
  }

  return v5;
}

uint64_t xmlURIErrMemory(uint64_t a1)
{
  if (a1) {
    return __xmlRaiseError( 0,  0,  0,  0,  0,  30,  2,  3,  0LL,  0,  a1,  0LL,  0LL,  0,  (unsigned __int128)0LL >> 96,  (uint64_t)"Memory allocation failed : %s\n");
  }
  else {
    return __xmlRaiseError(0, 0, 0, 0, 0, 30, 2, 3, 0LL, 0, 0LL, 0LL, 0LL, 0, 0, (uint64_t)"Memory allocation failed\n");
  }
}

xmlChar *__cdecl xmlSaveUri(xmlChar *uri)
{
  if (uri)
  {
    int v1 = uri;
    int v93 = 80;
    uint64_t v2 = (char *)xmlMallocAtomic(0x51uLL);
    if (!v2)
    {
      xmlURIErrMemory((uint64_t)"saving URI\n");
      return 0LL;
    }

    uint64_t v3 = v2;
    int v4 = *(const xmlChar **)v1;
    if (*(void *)v1)
    {
      LOBYTE(v5) = *v4;
      if (*v4)
      {
        uint64_t v6 = 0LL;
        do
        {
          if (v6 >= v93)
          {
            uint64_t v7 = (char *)xmlSaveUriRealloc(v3, &v93);
            if (!v7) {
              goto LABEL_212;
            }
            LOBYTE(v5) = v4[v6];
            uint64_t v3 = v7;
          }

          int v8 = v6 + 1;
          v3[v6] = v5;
          int v5 = v4[++v6];
        }

        while (v5);
        if (v93 <= v8)
        {
          int v9 = (char *)xmlSaveUriRealloc(v3, &v93);
          if (!v9) {
            goto LABEL_212;
          }
          uint64_t v3 = v9;
        }
      }

      else
      {
        int v8 = 0;
      }

      int v10 = v8 + 1;
      v3[v8] = 58;
    }

    else
    {
      int v10 = 0;
    }

    uint64_t v11 = (_BYTE *)*((void *)v1 + 1);
    if (v11)
    {
      unsigned int v12 = *v11;
      if (*v11)
      {
        uint64_t v13 = v11 + 1;
        do
        {
          int v14 = v10 + 3;
          if (v10 + 3 >= v93)
          {
            int v15 = (char *)xmlSaveUriRealloc(v3, &v93);
            if (!v15) {
              goto LABEL_212;
            }
            unsigned int v12 = *(v13 - 1);
            uint64_t v3 = v15;
          }

          if (v12 - 36 <= 0x39 && ((1LL << (v12 - 36)) & 0x28000001AC00985LL) != 0
            || v12 - 48 < 0xA
            || (v12 & 0xDF) - 65 < 0x1A
            || v12 - 33 <= 0x3E && ((1LL << (v12 - 33)) & 0x40000000000033C1LL) != 0
            || v12 == 126)
          {
            int v14 = v10 + 1;
          }

          else
          {
            unsigned int v17 = v12 & 0xF;
            unsigned int v18 = &v3[v10];
            *unsigned int v18 = 37;
            if (v12 <= 0x9F) {
              char v19 = 48;
            }
            else {
              char v19 = 55;
            }
            v10 += 2;
            v18[1] = v19 + (v12 >> 4);
            if (v17 <= 9) {
              char v20 = 48;
            }
            else {
              char v20 = 55;
            }
            LOBYTE(v12) = v20 + v17;
          }

          v3[v10] = v12;
          unsigned int v16 = *v13++;
          unsigned int v12 = v16;
          int v10 = v14;
        }

        while (v16);
      }

      else
      {
        int v14 = v10;
      }

      goto LABEL_44;
    }

    if (*((void *)v1 + 3) || *((_DWORD *)v1 + 10) == -1)
    {
      if (v10 + 3 >= v93)
      {
        int v21 = (char *)xmlSaveUriRealloc(v3, &v93);
        if (!v21) {
          goto LABEL_212;
        }
      }

      else
      {
        int v21 = v3;
      }

      *(_WORD *)&v21[v10] = 12079;
      v10 += 2;
      uint64_t v33 = (_BYTE *)*((void *)v1 + 4);
      if (v33)
      {
        unsigned int v34 = *v33;
        if (*v33)
        {
          __int128 v35 = v33 + 1;
          uint64_t v3 = v21;
          do
          {
            int v36 = v10 + 3;
            if (v10 + 3 >= v93)
            {
              BOOL v37 = (char *)xmlSaveUriRealloc(v3, &v93);
              if (!v37) {
                goto LABEL_212;
              }
              unsigned int v34 = *(v35 - 1);
              uint64_t v3 = v37;
            }

            if (v34 - 48 < 0xA
              || (v34 & 0xDF) - 65 < 0x1A
              || v34 - 33 <= 0x3E && ((1LL << (v34 - 33)) & 0x4000000016003FE9LL) != 0
              || v34 == 126)
            {
              int v36 = v10 + 1;
            }

            else
            {
              unsigned int v39 = v34 & 0xF;
              int v40 = &v3[v10];
              *int v40 = 37;
              if (v34 <= 0x9F) {
                char v41 = 48;
              }
              else {
                char v41 = 55;
              }
              v10 += 2;
              v40[1] = v41 + (v34 >> 4);
              if (v39 <= 9) {
                char v42 = 48;
              }
              else {
                char v42 = 55;
              }
              LOBYTE(v3xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v42 + v39;
            }

            v3[v10] = v34;
            unsigned int v38 = *v35++;
            unsigned int v34 = v38;
            int v10 = v36;
          }

          while (v38);
        }

        else
        {
          int v36 = v10;
          uint64_t v3 = v21;
        }

        if (v36 + 3 >= v93)
        {
          int v21 = (char *)xmlSaveUriRealloc(v3, &v93);
          if (!v21) {
            goto LABEL_212;
          }
        }

        else
        {
          int v21 = v3;
        }

        int v10 = v36 + 1;
        v21[v36] = 64;
      }

      uint64_t v3 = v21;
      int v44 = (_BYTE *)*((void *)v1 + 3);
      if (v44)
      {
        char v45 = *v44;
        if (*v44)
        {
          uint64_t v46 = v10;
          int v47 = v44 + 1;
          do
          {
            if (v46 >= v93)
            {
              uint64_t v48 = (char *)xmlSaveUriRealloc(v3, &v93);
              if (!v48) {
                goto LABEL_212;
              }
              char v45 = *(v47 - 1);
              uint64_t v3 = v48;
            }

            v3[v46++] = v45;
            int v49 = *v47++;
            char v45 = v49;
            ++v10;
          }

          while (v49);
        }

        int v50 = *((_DWORD *)v1 + 10);
        if (v50 >= 1)
        {
          int v51 = v93;
          if (v10 + 10 >= v93)
          {
            uint64_t v52 = (char *)xmlSaveUriRealloc(v3, &v93);
            if (!v52) {
              goto LABEL_212;
            }
            int v51 = v93;
            int v50 = *((_DWORD *)v1 + 10);
            uint64_t v3 = v52;
          }

          v10 += snprintf(&v3[v10], v51 - v10, ":%d", v50);
        }
      }
    }

    else
    {
      if (*((void *)v1 + 2))
      {
        if (v10 + 3 >= v93)
        {
          int v43 = (char *)xmlSaveUriRealloc(v3, &v93);
          if (!v43) {
            goto LABEL_212;
          }
        }

        else
        {
          int v43 = v3;
        }

        *(_WORD *)&v43[v10] = 12079;
        int v57 = v10 + 2;
        unsigned int v58 = (_BYTE *)*((void *)v1 + 2);
        unsigned int v59 = *v58;
        if (*v58)
        {
          __int128 v60 = v58 + 1;
          do
          {
            int v10 = v57 + 3;
            if (v57 + 3 >= v93)
            {
              uint64_t v61 = (char *)xmlSaveUriRealloc(v43, &v93);
              uint64_t v3 = v43;
              if (!v61) {
                goto LABEL_212;
              }
              unsigned int v59 = *(v60 - 1);
              int v43 = v61;
            }

            if (v59 - 48 < 0xA
              || (v59 & 0xDF) - 65 < 0x1A
              || v59 - 33 <= 0x3E && ((1LL << (v59 - 33)) & 0x4000000096003FE9LL) != 0
              || v59 == 126)
            {
              int v10 = v57 + 1;
            }

            else
            {
              unsigned int v63 = v59 & 0xF;
              int v64 = &v43[v57];
              char *v64 = 37;
              if (v59 <= 0x9F) {
                char v65 = 48;
              }
              else {
                char v65 = 55;
              }
              v57 += 2;
              v64[1] = v65 + (v59 >> 4);
              if (v63 <= 9) {
                char v66 = 48;
              }
              else {
                char v66 = 55;
              }
              LOBYTE(v59) = v66 + v63;
            }

            v43[v57] = v59;
            unsigned int v62 = *v60++;
            unsigned int v59 = v62;
            int v57 = v10;
          }

          while (v62);
        }

        else
        {
          v10 += 2;
        }

LABEL_176:
        if (*((void *)v1 + 10))
        {
          int v14 = v56 + 1;
          if (v56 + 1 >= v93)
          {
            uint64_t v76 = (char *)xmlSaveUriRealloc(v3, &v93);
            if (!v76) {
              goto LABEL_212;
            }
          }

          else
          {
            uint64_t v76 = v3;
          }

          v76[v56] = 63;
          uint64_t v77 = (_BYTE *)*((void *)v1 + 10);
          char v78 = *v77;
          if (*v77)
          {
            uint64_t v79 = v14;
            v80 = v77 + 1;
            uint64_t v3 = v76;
            do
            {
              if (v79 + 1 >= v93)
              {
                uint64_t v81 = (char *)xmlSaveUriRealloc(v3, &v93);
                if (!v81) {
                  goto LABEL_212;
                }
                char v78 = *(v80 - 1);
                uint64_t v3 = v81;
              }

              v3[v79] = v78;
              int v82 = *v80++;
              char v78 = v82;
              ++v14;
              ++v79;
            }

            while (v82);
            goto LABEL_44;
          }
        }

        else
        {
          if (!*((void *)v1 + 7))
          {
            int v14 = v56;
LABEL_44:
            if (!*((void *)v1 + 8))
            {
LABEL_95:
              if (v14 < v93)
              {
                uruint64_t i = (xmlChar *)v3;
LABEL_98:
                uri[v14] = 0;
                return uri;
              }

              uruint64_t i = (xmlChar *)xmlSaveUriRealloc(v3, &v93);
              if (uri) {
                goto LABEL_98;
              }
              goto LABEL_212;
            }

            if (v14 + 3 < v93)
            {
              __int128 v22 = v3;
              goto LABEL_48;
            }

            __int128 v22 = (char *)xmlSaveUriRealloc(v3, &v93);
            if (v22)
            {
LABEL_48:
              int v23 = v14 + 1;
              v22[v14] = 35;
              unsigned __int8 v24 = (_BYTE *)*((void *)v1 + 8);
              unsigned int v25 = *v24;
              if (*v24)
              {
                uint64_t v26 = v24 + 1;
                uint64_t v3 = v22;
                do
                {
                  int v14 = v23 + 3;
                  if (v23 + 3 >= v93)
                  {
                    signed int v27 = (char *)xmlSaveUriRealloc(v3, &v93);
                    if (!v27) {
                      goto LABEL_212;
                    }
                    unsigned int v25 = *(v26 - 1);
                    uint64_t v3 = v27;
                  }

                  if (v25 - 48 < 0xA
                    || (v25 & 0xDF) - 65 < 0x1A
                    || v25 - 33 <= 0x3E && ((1LL << (v25 - 33)) & 0x54000000D6007FE9LL) != 0
                    || v25 == 126)
                  {
                    int v14 = v23 + 1;
                  }

                  else
                  {
                    unsigned int v29 = v25 & 0xF;
                    unsigned int v30 = &v3[v23];
                    *unsigned int v30 = 37;
                    if (v25 <= 0x9F) {
                      char v31 = 48;
                    }
                    else {
                      char v31 = 55;
                    }
                    v23 += 2;
                    v30[1] = v31 + (v25 >> 4);
                    if (v29 <= 9) {
                      char v32 = 48;
                    }
                    else {
                      char v32 = 55;
                    }
                    LOBYTE(v25) = v32 + v29;
                  }

                  v3[v23] = v25;
                  unsigned int v28 = *v26++;
                  unsigned int v25 = v28;
                  int v23 = v14;
                }

                while (v28);
              }

              else
              {
                ++v14;
                uint64_t v3 = v22;
              }

              goto LABEL_95;
            }

LABEL_212:
            xmlFree(v3);
            return 0LL;
          }

          if (v56 + 3 >= v93)
          {
            uint64_t v76 = (char *)xmlSaveUriRealloc(v3, &v93);
            if (!v76) {
              goto LABEL_212;
            }
          }

          else
          {
            uint64_t v76 = v3;
          }

          int v83 = v56 + 1;
          v76[v56] = 63;
          uint64_t v84 = (_BYTE *)*((void *)v1 + 7);
          unsigned int v85 = *v84;
          if (*v84)
          {
            int v86 = v84 + 1;
            uint64_t v3 = v76;
            do
            {
              int v14 = v83 + 3;
              if (v83 + 3 >= v93)
              {
                v87 = (char *)xmlSaveUriRealloc(v3, &v93);
                if (!v87) {
                  goto LABEL_212;
                }
                unsigned int v85 = *(v86 - 1);
                uint64_t v3 = v87;
              }

              if (v85 - 48 < 0xA
                || (v85 & 0xDF) - 65 < 0x1A
                || v85 - 33 <= 0x3E && ((1LL << (v85 - 33)) & 0x54000000D6007FE9LL) != 0
                || v85 == 126)
              {
                int v14 = v83 + 1;
              }

              else
              {
                unsigned int v89 = v85 & 0xF;
                unsigned int v90 = &v3[v83];
                *unsigned int v90 = 37;
                if (v85 <= 0x9F) {
                  char v91 = 48;
                }
                else {
                  char v91 = 55;
                }
                v83 += 2;
                v90[1] = v91 + (v85 >> 4);
                if (v89 <= 9) {
                  char v92 = 48;
                }
                else {
                  char v92 = 55;
                }
                LOBYTE(v85) = v92 + v89;
              }

              v3[v83] = v85;
              unsigned int v88 = *v86++;
              unsigned int v85 = v88;
              int v83 = v14;
            }

            while (v88);
            goto LABEL_44;
          }

          int v14 = v56 + 1;
        }

        uint64_t v3 = v76;
        goto LABEL_44;
      }

      if (*(void *)v1 && v10 + 3 >= v93)
      {
        int v43 = (char *)xmlSaveUriRealloc(v3, &v93);
        if (!v43) {
          goto LABEL_212;
        }
        goto LABEL_119;
      }
    }

    int v43 = v3;
    goto LABEL_119;
  }

  return uri;
}

void *xmlSaveUriRealloc(void *a1, int *a2)
{
  uint64_t v2 = *a2;
  if ((int)v2 <= 0x100000)
  {
    xmlNsPtr result = xmlRealloc(a1, (2 * v2) | 1);
    if (result)
    {
      *a2 = 2 * v2;
      return result;
    }

    uint64_t v3 = "saving URI\n";
  }

  else
  {
    uint64_t v3 = "reaching arbitrary MAX_URI_LENGTH limit\n";
  }

  xmlURIErrMemory((uint64_t)v3);
  return 0LL;
}

void xmlPrintURI(FILE *stream, xmlURIPtr uri)
{
  uint64_t v3 = xmlSaveUri(uri);
  if (v3)
  {
    int v4 = v3;
    fputs((const char *)v3, stream);
    xmlFree(v4);
  }

int xmlNormalizeURIPath(char *path)
{
  if (!path) {
    return -1;
  }
  for (uint64_t i = path; ; ++i)
  {
    int v2 = *i;
    if (v2 != 47) {
      break;
    }
  }

  if (!*i) {
    return 0;
  }
  int v4 = i;
  while (v2 == 46)
  {
    if (i[1] == 47)
    {
      ++i;
      do
      {
        int v5 = *++i;
        int v2 = v5;
      }

      while (v5 == 47);
    }

    else
    {
      if (!i[1]) {
        goto LABEL_21;
      }
LABEL_15:
      while (v2 != 47)
      {
        *v4++ = v2;
        int v6 = *++i;
        int v2 = v6;
        if (!v6) {
          goto LABEL_21;
        }
      }

      do
        int v7 = *++i;
      while (v7 == 47);
      *v4++ = 47;
      int v2 = *i;
    }
  }

  if (v2) {
    goto LABEL_15;
  }
LABEL_21:
  *int v4 = 0;
  for (int j = path; ; ++j)
  {
    int v3 = *j;
    if (v3 != 47) {
      break;
    }
  }

  if (*j)
  {
    do
    {
LABEL_25:
      uint64_t v9 = 0LL;
      int v10 = j;
      while (1)
      {
        while (v10[v9] != 47)
        {
          if (!v10[v9]) {
            goto LABEL_49;
          }
          ++v9;
        }

        int j = &v10[v9 + 1];
        if (*v10 == 46 && v10[1] == 46 && v9 == 2) {
          goto LABEL_25;
        }
        unsigned int v12 = &v10[v9];
        if (*j != 46 || v12[2] != 46) {
          goto LABEL_25;
        }
        int v13 = v12[3];
        if (v13 != 47) {
          break;
        }
        uint64_t v14 = v9 + 4;
        int v15 = v10;
        do
        {
          int v16 = v15[v14];
          *v15++ = v16;
        }

        while (v16);
        unsigned int v17 = v10;
        do
        {
          if (v17 <= path) {
            break;
          }
          int v18 = *--v17;
        }

        while (v18 == 47);
        uint64_t v9 = 0LL;
        if (v17 != path)
        {
          while (v17 > path)
          {
            int j = v17;
            int v19 = *--v17;
            if (v19 == 47) {
              goto LABEL_25;
            }
          }

          int j = v17;
          goto LABEL_25;
        }
      }
    }

    while (v13);
    char *v10 = 0;
LABEL_49:
    int v3 = 0;
    *int v4 = 0;
    if (*path == 47)
    {
      char v20 = path;
      while (1)
      {
        int v21 = v20;
        if (v20[1] != 46 || v20[2] != 46) {
          break;
        }
        v20 += 3;
        if (v21[3] != 47)
        {
          if (!v21[3]) {
            v21 += 3;
          }
          break;
        }
      }

      if (v21 == path) {
        return 0;
      }
      char v22 = *v21;
      if (*v21)
      {
        int v23 = (unsigned __int8 *)(v21 + 1);
        do
        {
          *path++ = v22;
          int v24 = *v23++;
          char v22 = v24;
        }

        while (v24);
      }

      int v3 = 0;
      char *path = 0;
    }
  }

  return v3;
}

char *__cdecl xmlURIUnescapeString(const char *str, int len, char *target)
{
  if (!str) {
    return 0LL;
  }
  unsigned int v4 = len;
  int v5 = str;
  if (len <= 0)
  {
    unsigned int v4 = strlen(str);
    if ((v4 & 0x80000000) != 0) {
      return 0LL;
    }
  }

  if (target || (target = (char *)xmlMallocAtomic(v4 + 1)) != 0LL)
  {
    int v6 = target;
    if (v4)
    {
      int v6 = target;
      do
      {
        int v7 = *(unsigned __int8 *)v5;
        if (v4 >= 3
          && v7 == 37
          && ((int v8 = v5[1], (v5[1] - 58) > 0xF5u) || ((v8 & 0xDF) - 71) >= 0xFAu)
          && ((int v9 = *((unsigned __int8 *)v5 + 2), (v9 - 58) <= 0xFFFFFFF5)
            ? (BOOL v10 = (v9 & 0xFFFFFFDF) - 71 >= 0xFFFFFFFA)
            : (BOOL v10 = 1),
              v10))
        {
          unsigned int v11 = v8 - 48;
          unsigned int v12 = v8 - 97;
          else {
            char v13 = v8 - 55;
          }
          char v14 = v8 - 87;
          if (v12 > 5) {
            char v14 = v13;
          }
          if (v11 > 9) {
            LOBYTE(v11) = v14;
          }
          unsigned int v15 = v9 - 48;
          unsigned int v16 = v9 - 97;
          unsigned int v17 = v9 - 65;
          char v18 = v9 + 16 * v11;
          if (v17 <= 5) {
            LOBYTE(v11) = v18 - 55;
          }
          if (v16 <= 5) {
            LOBYTE(v11) = v18 - 87;
          }
          char v19 = v18 - 48;
          if (v15 <= 9) {
            LOBYTE(v11) = v19;
          }
          v5 += 3;
          char *v6 = v11;
          v4 -= 3;
        }

        else
        {
          ++v5;
          char *v6 = v7;
          --v4;
        }

        ++v6;
      }

      while (v4);
    }

    char *v6 = 0;
  }

  else
  {
    xmlURIErrMemory((uint64_t)"unescaping URI value\n");
  }

  return target;
}

xmlChar *__cdecl xmlURIEscapeStr(const xmlChar *str, const xmlChar *list)
{
  if (!str) {
    return 0LL;
  }
  int v2 = str;
  if (!*str) {
    return xmlStrdup(str);
  }
  int v4 = xmlStrlen(str);
  if (v4 < 1) {
    return 0LL;
  }
  size_t v5 = (v4 + 20);
  int v16 = v5;
  int v6 = (char *)xmlMallocAtomic(v5);
  if (v6)
  {
    xmlChar v7 = *v2;
    if (*v2)
    {
      int v8 = 0;
      while (1)
      {
        if (v16 - v8 <= 3)
        {
          int v9 = (char *)xmlSaveUriRealloc(v6, &v16);
          if (!v9)
          {
            xmlURIErrMemory((uint64_t)"escaping URI value\n");
            xmlFree(v6);
            return 0LL;
          }

          xmlChar v7 = *v2;
          int v6 = v9;
        }

        if ((v7 - 48) >= 0xAu
          && (v7 - 64) >= 0x1Bu
          && (v7 - 97) >= 0x1Au
          && (v7 - 33 > 0x3E || ((1LL << (v7 - 33)) & 0x40000000000033C1LL) == 0)
          && v7 != 126)
        {
          if (xmlStrchr(list, v7))
          {
            xmlChar v7 = *v2;
          }

          else
          {
            unsigned int v11 = &v6[v8];
            char *v11 = 37;
            char v12 = (v7 >> 4) + 55;
            if (v7 < 0xA0u) {
              char v12 = (v7 >> 4) | 0x30;
            }
            v11[1] = v12;
            v8 += 2;
            char v13 = v7 & 0xF;
            if ((v7 & 0xFu) > 9) {
              xmlChar v7 = v13 + 55;
            }
            else {
              xmlChar v7 = v13 | 0x30;
            }
          }
        }

        v6[v8] = v7;
        int v10 = *++v2;
        xmlChar v7 = v10;
        ++v8;
        if (!v10)
        {
          uint64_t v15 = v8;
          goto LABEL_28;
        }
      }
    }

    uint64_t v15 = 0LL;
LABEL_28:
    v6[v15] = 0;
  }

  else
  {
    xmlURIErrMemory((uint64_t)"escaping URI value\n");
  }

  return (xmlChar *)v6;
}

xmlChar *__cdecl xmlURIEscape(const xmlChar *str)
{
  int v1 = (unsigned __int8 *)str;
  uint64_t v39 = *MEMORY[0x1895F89C0];
  if (str)
  {
    xmlURIPtr URI = xmlCreateURI();
    if (!URI) {
      return 0LL;
    }
    int v3 = URI;
    URI->cleanup = 1;
    if (xmlParse3986URIReference((uint64_t)URI, v1))
    {
      xmlFreeURI(v3);
      return 0LL;
    }

    if (v3->scheme)
    {
      int v4 = xmlURIEscapeStr((const xmlChar *)v3->scheme, (const xmlChar *)"+-.");
      if (!v4)
      {
        xmlURIErrMemory((uint64_t)"escaping URI value\n");
        xmlFreeURI(v3);
        ((void (*)(void))xmlFree)(0LL);
        return 0LL;
      }

      size_t v5 = v4;
      int v6 = xmlStrcat(0LL, v4);
      int v1 = xmlStrcat(v6, (const xmlChar *)":");
      xmlFree(v5);
    }

    else
    {
      int v1 = 0LL;
    }

    authority = (const xmlChar *)v3->authority;
    if (authority)
    {
      int v8 = xmlURIEscapeStr(authority, (const xmlChar *)"/?;:@");
      if (!v8) {
        goto LABEL_38;
      }
      int v9 = v8;
      int v10 = xmlStrcat(v1, (const xmlChar *)"//");
      int v1 = xmlStrcat(v10, v9);
      xmlFree(v9);
    }

    user = (const xmlChar *)v3->user;
    if (user)
    {
      char v12 = xmlURIEscapeStr(user, (const xmlChar *)";:&=+$,");
      if (!v12) {
        goto LABEL_38;
      }
      char v13 = v12;
      char v14 = xmlStrcat(v1, (const xmlChar *)"//");
      uint64_t v15 = xmlStrcat(v14, v13);
      int v1 = xmlStrcat(v15, (const xmlChar *)"@");
      xmlFree(v13);
    }

    server = (const xmlChar *)v3->server;
    if (server)
    {
      unsigned int v17 = xmlURIEscapeStr(server, (const xmlChar *)"/?;:@");
      if (!v17) {
        goto LABEL_38;
      }
      char v18 = v17;
      if (!v3->user) {
        int v1 = xmlStrcat(v1, (const xmlChar *)"//");
      }
      int v1 = xmlStrcat(v1, v18);
      xmlFree(v18);
    }

    int port = v3->port;
    if (port)
    {
      __int16 v38 = 0;
      *(void *)char __str = 0LL;
      snprintf(__str, 0xAuLL, "%d", port);
      char v20 = xmlStrcat(v1, (const xmlChar *)":");
      int v1 = xmlStrcat(v20, (const xmlChar *)__str);
    }

    path = (const xmlChar *)v3->path;
    if (path)
    {
      char v22 = xmlURIEscapeStr(path, (const xmlChar *)":@&=+$,/?;");
      if (!v22) {
        goto LABEL_38;
      }
      int v23 = v22;
      int v1 = xmlStrcat(v1, v22);
      xmlFree(v23);
    }

    if (v3->query_raw)
    {
      int v24 = xmlStrcat(v1, (const xmlChar *)"?");
      int v1 = xmlStrcat(v24, (const xmlChar *)v3->query_raw);
    }

    else
    {
      query = (const xmlChar *)v3->query;
      if (query)
      {
        uint64_t v33 = xmlURIEscapeStr(query, (const xmlChar *)";/?:@&=+,$");
        if (!v33) {
          goto LABEL_38;
        }
        unsigned int v34 = v33;
        __int128 v35 = xmlStrcat(v1, (const xmlChar *)"?");
        int v1 = xmlStrcat(v35, v34);
        xmlFree(v34);
      }
    }

    opaque = (const xmlChar *)v3->opaque;
    if (opaque)
    {
      uint64_t v26 = xmlURIEscapeStr(opaque, (const xmlChar *)&byte_181A3ACBA);
      if (!v26) {
        goto LABEL_38;
      }
      signed int v27 = v26;
      int v1 = xmlStrcat(v1, v26);
      xmlFree(v27);
    }

    fragment = (const xmlChar *)v3->fragment;
    if (!fragment)
    {
LABEL_33:
      xmlFreeURI(v3);
      return v1;
    }

    unsigned int v29 = xmlURIEscapeStr(fragment, (const xmlChar *)"#");
    if (v29)
    {
      unsigned int v30 = v29;
      char v31 = xmlStrcat(v1, (const xmlChar *)"#");
      int v1 = xmlStrcat(v31, v30);
      xmlFree(v30);
      goto LABEL_33;
    }

xmlChar *__cdecl xmlBuildURI(const xmlChar *URI, const xmlChar *base)
{
  if (!URI) {
    return 0LL;
  }
  int v4 = *URI;
  if (!*URI)
  {
    int v6 = 0LL;
    goto LABEL_9;
  }

  xmlURIPtr v5 = xmlCreateURI();
  if (!v5) {
    return 0LL;
  }
  int v6 = v5;
  if (xmlParse3986URIReference((uint64_t)v5, (unsigned __int8 *)URI))
  {
    xmlChar v7 = 0LL;
    int v8 = 0LL;
LABEL_6:
    int v9 = 0LL;
LABEL_23:
    xmlFreeURI(v6);
LABEL_24:
    if (!v8) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }

  if (v6->scheme)
  {
    int v9 = xmlStrdup(URI);
    xmlChar v7 = 0LL;
    int v8 = 0LL;
    goto LABEL_23;
  }

xmlChar *__cdecl xmlBuildRelativeURI(const xmlChar *URI, const xmlChar *base)
{
  if (URI)
  {
    int v2 = (xmlChar *)URI;
    if (*URI)
    {
      xmlURIPtr v4 = xmlCreateURI();
      if (v4)
      {
        xmlURIPtr v5 = v4;
        if (*v2 == 46)
        {
          v4->path = (char *)xmlStrdup(v2);
        }

        else if (xmlParse3986URIReference((uint64_t)v4, v2))
        {
          goto LABEL_14;
        }

        if (!base || !*base)
        {
          int v6 = xmlStrdup(v2);
LABEL_15:
          int v8 = v5;
LABEL_16:
          xmlFreeURI(v8);
          return v6;
        }

        xmlURIPtr v7 = xmlCreateURI();
        if (v7)
        {
          int v8 = v7;
          if (*base == 46)
          {
            v7->path = (char *)xmlStrdup(base);
          }

          else if (xmlParse3986URIReference((uint64_t)v7, (unsigned __int8 *)base))
          {
            int v6 = 0LL;
LABEL_36:
            xmlFreeURI(v5);
            goto LABEL_16;
          }

          if (v5->scheme
            && (!v8->scheme
             || xmlStrcmp((const xmlChar *)v8->scheme, (const xmlChar *)v5->scheme)
             || xmlStrcmp((const xmlChar *)v8->server, (const xmlChar *)v5->server)))
          {
            goto LABEL_34;
          }

          if (xmlStrEqual((const xmlChar *)v8->path, (const xmlChar *)v5->path))
          {
            xmlURIPtr v10 = (const xmlChar *)&byte_181A3ACBA;
LABEL_35:
            int v6 = xmlStrdup(v10);
            goto LABEL_36;
          }

          path = v8->path;
          int v2 = (xmlChar *)v5->path;
          if (!path)
          {
LABEL_34:
            xmlURIPtr v10 = v2;
            goto LABEL_35;
          }

          char v12 = v5->path;
          if (!v2)
          {
            char v12 = "/";
            v5->path = "/";
            path = v8->path;
          }

          if (*v12 == 46) {
            v12 += 2 * (v12[1] == 47);
          }
          int v13 = *path;
          if (v13 == 47)
          {
            if (*v12 != 47) {
              ++path;
            }
          }

          else if (v13 == 46)
          {
            path += 2 * (path[1] == 47);
          }

          uint64_t v14 = 0LL;
          do
          {
            int v15 = path[v14];
            int v16 = v12[v14++];
            if (v15) {
              BOOL v17 = v15 == v16;
            }
            else {
              BOOL v17 = 0;
            }
          }

          while (v17);
          if (v15 == v16)
          {
            char v18 = &byte_181A3ACBA;
          }

          else
          {
            while (1)
            {
              uint64_t v20 = v14 - 1;
              if (v14 - 1 < 1) {
                break;
              }
              int v21 = v12[v14-- - 2];
              int v22 = v20;
              if (v21 == 47) {
                goto LABEL_52;
              }
            }

            int v22 = 0;
LABEL_52:
            int v23 = 0;
            int v24 = (unsigned __int8 *)&path[v20 & ~(v20 >> 63)];
            do
            {
              while (1)
              {
                int v26 = *v24++;
                int v25 = v26;
                if (v26 != 47) {
                  break;
                }
                ++v23;
              }
            }

            while (v25);
            signed int v27 = &v12[v22];
            if (v23)
            {
              int v28 = xmlStrlen((const xmlChar *)&v12[v22]);
              unsigned int v29 = (xmlChar *)xmlMalloc(v28 + 1 + 3 * v23);
              if (v29)
              {
                unsigned int v30 = v29;
                char v31 = v29;
                if (v23 < 1) {
                  goto LABEL_68;
                }
                unsigned int v32 = v23 + 1;
                char v31 = v29;
                do
                {
                  *(_WORD *)char v31 = 11822;
                  v31[2] = 47;
                  v31 += 3;
                  --v32;
                }

                while (v32 > 1);
                if (v28 < 0 || v31 <= v29 || *v27 != 47) {
LABEL_68:
                }
                  memcpy(v31, v27, v28 + 1);
                else {
                  memcpy(v31, v27 + 1, v28--);
                }
                v31[v28] = 0;
                int v6 = xmlURIEscapeStr(v30, (const xmlChar *)"/;&=+$,");
                xmlFree(v30);
              }

              else
              {
                xmlURIErrMemory((uint64_t)"building relative URI\n");
                int v6 = 0LL;
              }

              goto LABEL_71;
            }

            if (*v27)
            {
              xmlStrlen((const xmlChar *)v27);
              char v19 = xmlURIEscapeStr((const xmlChar *)v27, (const xmlChar *)"/;&=+$,");
              goto LABEL_47;
            }

            char v18 = "./";
          }

          char v19 = xmlStrdup((const xmlChar *)v18);
LABEL_47:
          int v6 = v19;
LABEL_71:
          if (!v2) {
            v5->path = 0LL;
          }
          goto LABEL_36;
        }

xmlChar *__cdecl xmlCanonicPath(const xmlChar *path)
{
  if (path)
  {
    int v1 = path;
    if (*path == 47 && path[1] == 47 && path[2] != 47) {
      int v1 = path + 1;
    }
    int v2 = xmlParseURI((const char *)v1);
    if (v2)
    {
      xmlFreeURI(v2);
    }

    else
    {
      xmlURIPtr v5 = xmlStrstr(v1, (const xmlChar *)"://");
      if (v5 && ((_DWORD)v5 - (_DWORD)v1 - 21) >= 0xFFFFFFEC)
      {
        uint64_t v6 = 0LL;
        while ((v1[v6] & 0xDFu) - 65 < 0x1A)
        {
          if ((_DWORD)v5 - (_DWORD)v1 == ++v6)
          {
            xmlURIPtr v7 = xmlURIEscapeStr(v1, (const xmlChar *)":/?_.#&;=");
            if (!v7) {
              return xmlStrdup(v1);
            }
            xmlURIPtr v4 = v7;
            int v8 = xmlParseURI((const char *)v7);
            if (v8)
            {
              xmlFreeURI(v8);
              return v4;
            }

            xmlFree(v4);
            return xmlStrdup(v1);
          }
        }
      }
    }

    return xmlStrdup(v1);
  }

  else
  {
    return 0LL;
  }

xmlChar *__cdecl xmlPathToURI(const xmlChar *path)
{
  if (!path) {
    return 0LL;
  }
  int v2 = xmlParseURI((const char *)path);
  if (v2)
  {
    xmlFreeURI(v2);
    return xmlStrdup(path);
  }

  xmlURIPtr v4 = xmlCanonicPath(path);
  if (!v4) {
    return 0LL;
  }
  xmlURIPtr v5 = v4;
  memset(&v7.fragment, 0, 24);
  memset(&v7, 0, 48);
  *(_OWORD *)&v7.path = (unint64_t)v4;
  uint64_t v6 = xmlSaveUri(&v7);
  xmlFree(v5);
  return v6;
}

void xmlCleanURI(uint64_t a1)
{
  if (a1)
  {
    int v2 = *(void **)a1;
    if (v2) {
      xmlFree(v2);
    }
    *(void *)a1 = 0LL;
    int v3 = *(void **)(a1 + 24);
    if (v3) {
      xmlFree(v3);
    }
    *(void *)(a1 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
    xmlURIPtr v4 = *(void **)(a1 + 32);
    if (v4) {
      xmlFree(v4);
    }
    *(void *)(a1 + 32) = 0LL;
    xmlURIPtr v5 = *(void **)(a1 + 48);
    if (v5) {
      xmlFree(v5);
    }
    *(void *)(a1 + 48) = 0LL;
    uint64_t v6 = *(void **)(a1 + 64);
    if (v6) {
      xmlFree(v6);
    }
    *(void *)(a1 + 6xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
    xmlURI v7 = *(void **)(a1 + 8);
    if (v7) {
      xmlFree(v7);
    }
    *(void *)(a1 + 8) = 0LL;
    int v8 = *(void **)(a1 + 16);
    if (v8) {
      xmlFree(v8);
    }
    *(void *)(a1 + 16) = 0LL;
    int v9 = *(void **)(a1 + 56);
    if (v9) {
      xmlFree(v9);
    }
    *(void *)(a1 + 56) = 0LL;
    xmlURIPtr v10 = *(void **)(a1 + 80);
    if (v10) {
      xmlFree(v10);
    }
    *(void *)(a1 + 80) = 0LL;
  }

uint64_t xmlParse3986Query(uint64_t a1, const xmlChar **a2)
{
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  xmlURIPtr v4 = *a2;
  while (1)
  {
    int v5 = *v4;
    if ((v5 - 48) >= 0xA && (v5 & 0xFFFFFFDF) - 65 >= 0x1A)
    {
      uint64_t v7 = (v5 - 33);
      if (v7 == 4)
      {
        if ((v4[1] - 48) < 0xAu
          || (unsigned int v8 = v4[1] - 65, v8 <= 0x25) && ((1LL << v8) & 0x3F0000003FLL) != 0)
        {
          unsigned int v9 = v4[2] - 65;
          if (v9 <= 0x25 && ((1LL << v9) & 0x3F0000003FLL) != 0) {
            goto LABEL_10;
          }
        }
      }

      else
      {
LABEL_38:
        if (v5 == 126) {
          goto LABEL_10;
        }
      }

      if (!a1) {
        goto LABEL_35;
      }
      int v10 = *(_DWORD *)(a1 + 72);
      if ((v10 & 1) == 0
        || (v5 - 91) > 0x22
        || ((1LL << (v5 - 91)) & 0x70000002FLL) == 0)
      {
        break;
      }
    }

uint64_t xmlParse3986Fragment(uint64_t a1, const xmlChar **a2)
{
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  xmlURIPtr v4 = *a2;
  while (1)
  {
    int v5 = *v4;
    if ((v5 - 48) >= 0xA && (v5 & 0xFFFFFFDF) - 65 >= 0x1A)
    {
      uint64_t v7 = (v5 - 33);
      if (v7 == 4)
      {
        if ((v4[1] - 48) < 0xAu
          || (unsigned int v8 = v4[1] - 65, v8 <= 0x25) && ((1LL << v8) & 0x3F0000003FLL) != 0)
        {
          unsigned int v9 = v4[2] - 65;
          if (v9 <= 0x25 && ((1LL << v9) & 0x3F0000003FLL) != 0) {
            goto LABEL_10;
          }
        }
      }

      else
      {
LABEL_36:
        if (v5 == 126) {
          goto LABEL_10;
        }
      }

      if (!a1) {
        goto LABEL_33;
      }
      int v10 = *(_DWORD *)(a1 + 72);
      if ((v10 & 1) == 0
        || (v5 - 92) > 0x21
        || ((1LL << (v5 - 92)) & 0x380000015LL) == 0)
      {
        break;
      }
    }

uint64_t xmlParse3986Authority(uint64_t a1, const xmlChar **a2)
{
  xmlURIPtr v4 = *a2;
  int v5 = *a2;
  while (1)
  {
    int v6 = *v5;
    uint64_t v8 = (v6 - 33);
    if (v8 != 4) {
      break;
    }
    if ((v5[1] - 48) >= 0xAu)
    {
      unsigned int v9 = v5[1] - 65;
      if (v9 > 0x25 || ((1LL << v9) & 0x3F0000003FLL) == 0) {
        goto LABEL_32;
      }
    }

    if ((v5[2] - 48) >= 0xAu)
    {
      unsigned int v10 = v5[2] - 65;
      if (v10 > 0x25 || ((1LL << v10) & 0x3F0000003FLL) == 0) {
        goto LABEL_32;
      }
    }

LABEL_64:
  if (a1)
  {
    int v22 = *(void **)(a1 + 16);
    if (v22) {
      xmlFree(v22);
    }
    *(void *)(a1 + 16) = 0LL;
    int v23 = *(void **)(a1 + 24);
    if (v23) {
      xmlFree(v23);
    }
    int v24 = v33;
    if (v33 == v4)
    {
      *(void *)(a1 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
      int v24 = (unsigned __int8 *)v4;
    }

    else
    {
      int v25 = (_DWORD)v33 - (_DWORD)v4;
      if ((*(_BYTE *)(a1 + 72) & 2) != 0) {
        int v26 = xmlStrndup(v4, v25);
      }
      else {
        int v26 = xmlURIUnescapeString((const char *)v4, v25, 0LL);
      }
      *(void *)(a1 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v26;
    }
  }

  else
  {
    int v24 = v33;
  }

  if (*v24 == 58)
  {
    int v28 = *++v24;
    int v27 = v28;
    if ((v28 - 48) <= 9)
    {
      int v29 = 0;
      while (v29 <= 214748364)
      {
        int v30 = 10 * v29;
        if (v30 > -2147483601 - v27) {
          break;
        }
        int v29 = v27 + v30 - 48;
        int v31 = *++v24;
        int v27 = v31;
        if ((v31 - 48) >= 0xA)
        {
          if (a1) {
            *(_DWORD *)(a1 + 40) = v29;
          }
          goto LABEL_84;
        }
      }
    }

    return 1LL;
  }

          int v12 = 1401;
          int v13 = a3;
          unsigned int v14 = "invalid character value\n";
LABEL_65:
          __xmlSimpleError(7, v12, v13, (uint64_t)v14, 0LL);
          xmlSerializeHexCharRef((uint64_t)&__srca, *v5);
          uint64_t result = (uint64x2_t *)xmlBufAdd(v4, (const xmlChar *)&__srca, 0xFFFFFFFFuLL);
          __src = ++v5;
        }
      }
    }

    else
    {
      if (v6 != 34)
      {
        if (v6 == 38)
        {
          if (__src != v5) {
            xmlBufAdd(v4, __src, ((_DWORD)v5 - (_DWORD)__src));
          }
          uint64_t v7 = v4;
          uint64_t v8 = "&amp;";
LABEL_31:
          unsigned int v9 = 5LL;
          goto LABEL_36;
        }

        goto LABEL_38;
      }

      if (__src != v5) {
        xmlBufAdd(v4, __src, ((_DWORD)v5 - (_DWORD)__src));
      }
      uint64_t v7 = v4;
      uint64_t v8 = "&quot;";
      unsigned int v9 = 6LL;
LABEL_36:
      uint64_t result = (uint64x2_t *)xmlBufAdd(v7, (const xmlChar *)v8, v9);
      __src = ++v5;
    }
  }

  if (*v5 > 9u)
  {
    if (v6 == 10)
    {
      if (__src != v5) {
        xmlBufAdd(v4, __src, ((_DWORD)v5 - (_DWORD)__src));
      }
      uint64_t v7 = v4;
      uint64_t v8 = "&#10;";
      goto LABEL_31;
    }

    if (v6 == 13)
    {
      if (__src != v5) {
        xmlBufAdd(v4, __src, ((_DWORD)v5 - (_DWORD)__src));
      }
      uint64_t v7 = v4;
      uint64_t v8 = "&#13;";
      goto LABEL_31;
    }

    goto LABEL_38;
  }

  if (v6 == 9)
  {
    if (__src != v5) {
      xmlBufAdd(v4, __src, ((_DWORD)v5 - (_DWORD)__src));
    }
    uint64_t v7 = v4;
    uint64_t v8 = "&#9;";
    goto LABEL_35;
  }

  if (*v5) {
    goto LABEL_38;
  }
  if (__src != v5) {
    return (uint64x2_t *)xmlBufAdd(v4, __src, ((_DWORD)v5 - (_DWORD)__src));
  }
  return result;
}

        int v31 = (int *)*((void *)v31 + 14);
        if (!v31 || *v31 == 1) {
          return i;
        }
      }

      uint64_t v8 = 1839LL;
      if (a8)
      {
        xmlSchemaFacetErr((uint64_t)a1, 1839LL, a2, value, 0LL, a3, v30);
        if ((_DWORD)i) {
          return i;
        }
        else {
          return 1839LL;
        }
      }

      return v8;
    }

    return v8;
  }

  while (1)
  {
    int v24 = (xmlSchemaFacet *)v23[1];
    if (v24->type - 1009 <= 2) {
      break;
    }
LABEL_40:
    int v23 = (uint64_t **)*v23;
    if (!v23) {
      goto LABEL_41;
    }
  }

  int v25 = xmlSchemaValidateListSimpleTypeFacet(v24, value, actualLen, 0LL);
  if ((v25 & 0x80000000) == 0)
  {
    uint64_t v8 = v25;
    if ((_DWORD)v25)
    {
      if (!a8) {
        return v8;
      }
      xmlSchemaFacetErr((uint64_t)a1, v25, a2, value, actualLen, a3, (xmlSchemaFacet *)v23[1]);
      if ((_DWORD)i) {
        int i = i;
      }
      else {
        int i = v8;
      }
    }

    goto LABEL_40;
  }

  int v36 = "validating against a list type facet";
LABEL_69:
  xmlSchemaInternalErr2(a1, (const xmlChar *)"xmlSchemaValidateFacets", (const xmlChar *)v36, 0LL);
  return 0xFFFFFFFFLL;
}

LABEL_84:
  uint64_t result = 0LL;
  *a2 = v24;
  return result;
}

  uint64_t result = xmlSchemaCheckFacetValues(typeDecl, ctxt, a3, (const xmlChar *)i);
  if ((_DWORD)result == -1) {
    return result;
  }
  if ((_DWORD)result) {
    goto LABEL_58;
  }
  if (typeDecl->facetSet || typeDecl->baseType->facetSet)
  {
    uint64_t result = xmlSchemaDeriveAndValidateFacets(ctxt, (uint64_t)typeDecl);
    if ((_DWORD)result == -1) {
      return result;
    }
    if ((_DWORD)result) {
      goto LABEL_58;
    }
  }

  uint64_t result = xmlSchemaTypeFixupWhitespace((uint64_t)typeDecl);
  if ((_DWORD)result != -1)
  {
    if (!(_DWORD)result) {
      xmlSchemaTypeFixupOptimFacets((uint64_t)typeDecl);
    }
    goto LABEL_58;
  }

  return result;
}

uint64_t xmlParse3986PathAbEmpty(uint64_t a1, const xmlChar **a2)
{
  xmlURIPtr v4 = *a2;
  xmlURIPtr v11 = (unsigned __int8 *)*a2;
  uint64_t v5 = 1LL;
  while (1)
  {
    int v6 = v11;
    if (*v11 != 47) {
      break;
    }
    ++v11;
    if (xmlParse3986Segment(&v11, 0, 1)) {
      return v5;
    }
  }

  if (a1)
  {
    uint64_t v7 = *(void **)(a1 + 48);
    if (v7)
    {
      xmlFree(v7);
      xmlURIPtr v4 = *a2;
    }

    if (v4 == v6)
    {
      unsigned int v9 = 0LL;
    }

    else
    {
      int v8 = (_DWORD)v6 - (_DWORD)v4;
      if ((*(_BYTE *)(a1 + 72) & 2) != 0) {
        unsigned int v9 = xmlStrndup(v4, v8);
      }
      else {
        unsigned int v9 = xmlURIUnescapeString((const char *)v4, v8, 0LL);
      }
    }

    *(void *)(a1 + 48) = v9;
  }

  uint64_t v5 = 0LL;
  *a2 = v6;
  return v5;
}

uint64_t xmlParse3986PathAbsolute(uint64_t a1, unsigned __int8 **a2)
{
  int v2 = *a2;
  if (**a2 != 47) {
    return 1LL;
  }
  xmlURIPtr v11 = v2 + 1;
  if (!xmlParse3986Segment(&v11, 0, 0))
  {
    uint64_t v9 = 1LL;
    while (*v11 == 47)
    {
      ++v11;
      if (xmlParse3986Segment(&v11, 0, 1)) {
        return v9;
      }
    }
  }

  if (a1)
  {
    uint64_t v5 = *(void **)(a1 + 48);
    if (v5)
    {
      xmlFree(v5);
      int v2 = *a2;
    }

    int v6 = v11;
    if (v11 == v2)
    {
      *(void *)(a1 + 48) = 0LL;
      int v6 = v2;
    }

    else
    {
      int v7 = (_DWORD)v11 - (_DWORD)v2;
      if ((*(_BYTE *)(a1 + 72) & 2) != 0) {
        int v8 = xmlStrndup(v2, v7);
      }
      else {
        int v8 = xmlURIUnescapeString((const char *)v2, v7, 0LL);
      }
      *(void *)(a1 + 48) = v8;
    }
  }

  else
  {
    int v6 = v11;
  }

  uint64_t v9 = 0LL;
  *a2 = v6;
  return v9;
}

uint64_t xmlParse3986DecOctet(unsigned __int8 **a1)
{
  int v1 = *a1;
  int v2 = **a1;
  int v3 = v1 + 1;
  unsigned int v4 = v1[1];
  if (v4 - 48 > 9) {
    goto LABEL_11;
  }
  if (v2 != 48)
  {
    int v3 = v1 + 2;
    if (v1[2] - 48 <= 9)
    {
      if (v2 == 50)
      {
        if (v4 > 0x35) {
          return 1LL;
        }
      }

      else if (v2 != 49)
      {
        return 1LL;
      }

      int v3 = v1 + 3;
    }

BOOL xmlParse3986Segment(unsigned __int8 **a1, unsigned __int8 a2, int a3)
{
  int v3 = *a1;
  int v4 = **a1;
  uint64_t v6 = (v4 - 33);
  if (v6 != 4)
  {
LABEL_42:
    if (v4 == 126) {
      goto LABEL_8;
    }
    return a3 == 0;
  }

  if ((v3[1] - 48) >= 0xAu)
  {
    unsigned int v12 = v3[1] - 65;
    BOOL v13 = v12 > 0x25;
    uint64_t v14 = (1LL << v12) & 0x3F0000003FLL;
    if (v13 || v14 == 0) {
      return a3 == 0;
    }
  }

  if ((v3[2] - 48) >= 0xAu)
  {
    unsigned int v16 = v3[2] - 65;
    BOOL v13 = v16 > 0x25;
    uint64_t v17 = (1LL << v16) & 0x3F0000003FLL;
    if (v13 || v17 == 0) {
      return a3 == 0;
    }
  }

  while (1)
  {
LABEL_8:
    uint64_t v7 = (v4 - 33);
    if (v7 != 4)
    {
LABEL_26:
      if (v4 != 126) {
        break;
      }
LABEL_12:
      if (v4 == a2) {
        break;
      }
      goto LABEL_13;
    }

    if ((v3[1] - 48) >= 0xAu)
    {
      unsigned int v8 = v3[1] - 65;
      if (v8 > 0x25 || ((1LL << v8) & 0x3F0000003FLL) == 0) {
        break;
      }
    }

    int v9 = v3[2];
LABEL_13:
    if (v4 == 37) {
      v3 += 3;
    }
    else {
      ++v3;
    }
    int v4 = *v3;
  }

  uint64_t v10 = 0LL;
  *a1 = v3;
  return v10;
}

int xmlValidBuildContentModel(xmlValidCtxtPtr ctxt, xmlElementPtr elem)
{
  uint64_t v3 = MEMORY[0x1895F8858](ctxt, elem);
  int result = 0;
  uint64_t v10 = *MEMORY[0x1895F89C0];
  if (!v3) {
    return result;
  }
  uint64_t v5 = (uint64_t *)v2;
  if (!v2) {
    return result;
  }
  if (*(_DWORD *)(v2 + 8) != 15) {
    return 0;
  }
  if (*(_DWORD *)(v2 + 72) != 4) {
    return 1;
  }
  uint64_t v6 = *(xmlRegexp **)(v2 + 104);
  if (v6)
  {
    int result = xmlRegexpIsDeterminist(v6);
    if (!result)
    {
      *(_DWORD *)(v3 + 6xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0;
      return result;
    }

    return 1;
  }

  uint64_t v7 = xmlNewAutomata();
  *(void *)(v3 + 96) = v7;
  if (!v7)
  {
    xmlErrValidNode((uint64_t *)v3, (int)v5, 1, (uint64_t)"Cannot create automata for element %s\n", v5[2], 0LL, 0LL);
    return 0;
  }

  *(void *)(v3 + 10xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = xmlAutomataGetInitState(v7);
  xmlValidBuildAContentModel(v5[10], v3, v5[2]);
  xmlAutomataSetFinalState(*(xmlAutomataPtr *)(v3 + 96), *(xmlAutomataStatePtr *)(v3 + 104));
  unsigned int v8 = xmlAutomataCompile(*(xmlAutomataPtr *)(v3 + 96));
  v5[13] = (uint64_t)v8;
  if (xmlRegexpIsDeterminist(v8) == 1)
  {
    *(void *)(v3 + 10xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
    xmlFreeAutomata(*(xmlAutomataPtr *)(v3 + 96));
    *(void *)(v3 + 96) = 0LL;
    return 1;
  }

  bzero(v9, 0x1388uLL);
  xmlSnprintfElementContent(v9, 5000, (xmlElementContentPtr)v5[10], 1);
  xmlErrValidNode( (uint64_t *)v3,  (int)v5,  505,  (uint64_t)"Content model of %s is not determinist: %s\n",  v5[2],  (xmlChar *)v9,  0LL);
  *(_DWORD *)(v3 + 6xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0;
  *(void *)(v3 + 10xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
  xmlFreeAutomata(*(xmlAutomataPtr *)(v3 + 96));
  int result = 0;
  *(void *)(v3 + 96) = 0LL;
  return result;
}

uint64_t xmlErrValidNode(uint64_t *a1, int a2, int a3, uint64_t a4, uint64_t a5, xmlChar *a6, xmlChar *a7)
{
  if (a1)
  {
    uint64_t v10 = *a1;
    uint64_t v9 = a1[1];
    if (*((_DWORD *)a1 + 12) >> 1 == 1441171738) {
      uint64_t v11 = *a1;
    }
    else {
      LODWORD(v11) = 0;
    }
  }

  else
  {
    LODWORD(v9) = 0;
    LODWORD(v11) = 0;
    LODWORD(v10) = 0;
  }

  return __xmlRaiseError(0, v9, v10, v11, a2, 23, a3, 2, 0LL, 0, a5, a6, a7, 0, 0, a4);
}

void xmlValidBuildAContentModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t v5 = a1;
    switch(*(_DWORD *)a1)
    {
      case 1:
        uint64_t v6 = "Found PCDATA in content model of %s\n";
        goto LABEL_5;
      case 2:
        uint64_t v7 = *(xmlAutomataState **)(a2 + 104);
        __int16 v23 = 0;
        memset(v22, 0, sizeof(v22));
        unsigned int v8 = xmlBuildQName(*(const xmlChar **)(a1 + 8), *(const xmlChar **)(a1 + 40), (xmlChar *)v22, 50);
        if (v8)
        {
          uint64_t v9 = v8;
          switch(*(_DWORD *)(v5 + 4))
          {
            case 1:
              *(void *)(a2 + 10xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = xmlAutomataNewTransition( *(xmlAutomataPtr *)(a2 + 96),  *(xmlAutomataStatePtr *)(a2 + 104),  0LL,  v8,  0LL);
              break;
            case 2:
              unsigned int v20 = xmlAutomataNewTransition( *(xmlAutomataPtr *)(a2 + 96),  *(xmlAutomataStatePtr *)(a2 + 104),  0LL,  v8,  0LL);
              *(void *)(a2 + 10xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v20;
              xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a2 + 96), v7, v20);
              break;
            case 3:
              unsigned int v21 = xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a2 + 96), *(xmlAutomataStatePtr *)(a2 + 104), 0LL);
              goto LABEL_38;
            case 4:
              unsigned int v21 = xmlAutomataNewTransition( *(xmlAutomataPtr *)(a2 + 96),  *(xmlAutomataStatePtr *)(a2 + 104),  0LL,  v8,  0LL);
LABEL_38:
              *(void *)(a2 + 10xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v21;
              xmlAutomataNewTransition(*(xmlAutomataPtr *)(a2 + 96), v21, v21, v9, 0LL);
              break;
            default:
              break;
          }

          if (v9 != (xmlChar *)v22 && v9 != *(xmlChar **)(v5 + 8)) {
            xmlFree(v9);
          }
        }

        else
        {
          xmlVErrMemory((uint64_t *)a2, (uint64_t)"Building content model");
        }

        return;
      case 3:
        uint64_t v10 = *(xmlAutomataState **)(a2 + 104);
        int v11 = *(_DWORD *)(a1 + 4);
        if (v11 != 1)
        {
          uint64_t v10 = xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a2 + 96), *(xmlAutomataStatePtr *)(a2 + 104), 0LL);
          *(void *)(a2 + 10xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v10;
        }

        do
        {
          xmlValidBuildAContentModel(*(void *)(v5 + 16), a2, a3);
          uint64_t v5 = *(void *)(v5 + 24);
        }

        while (*(_DWORD *)v5 == 3 && *(_DWORD *)(v5 + 4) == 1);
        xmlValidBuildAContentModel(v5, a2, a3);
        unsigned int v12 = *(xmlAutomataState **)(a2 + 104);
        BOOL v13 = xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a2 + 96), v12, 0LL);
        *(void *)(a2 + 10xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v13;
        if (v11 == 4) {
          goto LABEL_30;
        }
        uint64_t v14 = v13;
        if (v11 == 3)
        {
          xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a2 + 96), v10, v13);
LABEL_30:
          char v18 = *(xmlAutomata **)(a2 + 96);
          uint64_t v19 = v12;
          goto LABEL_33;
        }

        if (v11 == 2) {
          goto LABEL_27;
        }
        return;
      case 4:
        int v15 = *(_DWORD *)(a1 + 4);
        if ((v15 - 3) >= 2)
        {
          uint64_t v10 = *(xmlAutomataState **)(a2 + 104);
        }

        else
        {
          uint64_t v10 = xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a2 + 96), *(xmlAutomataStatePtr *)(a2 + 104), 0LL);
          *(void *)(a2 + 10xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v10;
        }

        unsigned int v16 = xmlAutomataNewState(*(xmlAutomataPtr *)(a2 + 96));
        do
        {
          *(void *)(a2 + 10xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v10;
          xmlValidBuildAContentModel(*(void *)(v5 + 16), a2, a3);
          xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a2 + 96), *(xmlAutomataStatePtr *)(a2 + 104), v16);
          uint64_t v5 = *(void *)(v5 + 24);
        }

        while (*(_DWORD *)v5 == 4 && *(_DWORD *)(v5 + 4) == 1);
        *(void *)(a2 + 10xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v10;
        xmlValidBuildAContentModel(v5, a2, a3);
        xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a2 + 96), *(xmlAutomataStatePtr *)(a2 + 104), v16);
        uint64_t v17 = xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a2 + 96), v16, 0LL);
        *(void *)(a2 + 10xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v17;
        if (v15 == 4) {
          goto LABEL_32;
        }
        uint64_t v14 = v17;
        if (v15 == 3)
        {
          xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a2 + 96), v10, v17);
LABEL_32:
          char v18 = *(xmlAutomata **)(a2 + 96);
          uint64_t v19 = v16;
LABEL_33:
          uint64_t v14 = v10;
        }

        else
        {
          if (v15 != 2) {
            return;
          }
LABEL_27:
          char v18 = *(xmlAutomata **)(a2 + 96);
          uint64_t v19 = v10;
        }

        xmlAutomataNewEpsilon(v18, v19, v14);
        break;
      default:
        xmlErrValid_0((uint64_t *)a2, 1, (uint64_t)"ContentModel broken for element %s\n", a3);
        return;
    }
  }

  else
  {
    uint64_t v6 = "Found NULL content in content model of %s\n";
LABEL_5:
    xmlErrValidNode((uint64_t *)a2, 0, 1, (uint64_t)v6, a3, 0LL, 0LL);
  }

void xmlSnprintfElementContent(char *buf, int size, xmlElementContentPtr content, int englob)
{
  int v4 = size - 1;
  if (size >= 1 && content)
  {
    int v9 = strlen(buf);
    size_t v10 = (size - v9);
    if ((int)v10 <= 49)
    {
LABEL_36:
      terminateBufferTooSmall(buf, size);
    }

    else
    {
      if (englob)
      {
        strncat(buf, "(", v10);
        ++v9;
      }

      if (content->ocur == XML_ELEMENT_CONTENT_ONCE) {
        int v11 = englob != 0;
      }
      else {
        int v11 = (englob != 0) + 1;
      }
      switch(content->type)
      {
        case XML_ELEMENT_CONTENT_PCDATA:
          strncat(buf, "#PCDATA", size - v9);
          v9 += 7;
          goto LABEL_29;
        case XML_ELEMENT_CONTENT_ELEMENT:
          prefix = content->prefix;
          if (!prefix) {
            goto LABEL_14;
          }
          int v13 = xmlStrlen(prefix);
          if (size - v9 <= v11 + v13 + 1) {
            goto LABEL_36;
          }
          int v14 = v13;
          int v15 = strncat(buf, (const char *)content->prefix, size - v9);
          int v16 = v14 + v9;
          strncat(v15, ":", size - v16);
          int v9 = v16 + 1;
LABEL_14:
          name = content->name;
          if (!name) {
            goto LABEL_29;
          }
          int v18 = xmlStrlen(name);
          if (size - v9 <= v18 + v11) {
            goto LABEL_36;
          }
          int v19 = v18;
          strncat(buf, (const char *)content->name, size - v9);
          v9 += v19;
LABEL_29:
          size_t v26 = (size - v9);
          if (englob)
          {
            strncat(buf, ")", v26);
            ++v9;
          }

          unsigned __int32 v27 = content->ocur - 2;
          if (v27 <= 2) {
            strncat(buf, off_189BA2C68[v27], size - v9);
          }
          buf[v4] = 0;
          break;
        case XML_ELEMENT_CONTENT_SEQ:
          xmlSnprintfElementContent(buf, size, content->c1, content->c1->type - 3 < 2);
          size_t v20 = size - strlen(buf);
          strncat(buf, " , ", v20);
          c2 = content->c2;
          xmlElementContentType type = c2->type;
          if (c2->type == XML_ELEMENT_CONTENT_OR) {
            goto LABEL_19;
          }
          goto LABEL_22;
        case XML_ELEMENT_CONTENT_OR:
          xmlSnprintfElementContent(buf, size, content->c1, content->c1->type - 3 < 2);
          size_t v24 = size - strlen(buf);
          strncat(buf, " | ", v24);
          c2 = content->c2;
          xmlElementContentType type = c2->type;
          if (c2->type == XML_ELEMENT_CONTENT_SEQ) {
LABEL_19:
          }
            BOOL v23 = 1;
          else {
LABEL_22:
          }
            BOOL v23 = type != XML_ELEMENT_CONTENT_ELEMENT && c2->ocur != XML_ELEMENT_CONTENT_ONCE;
          xmlSnprintfElementContent(buf, size, c2, v23);
          int v9 = strlen(buf);
          goto LABEL_29;
        default:
          goto LABEL_29;
      }
    }
  }

xmlValidCtxtPtr xmlNewValidCtxt(void)
{
  v0 = (xmlValidCtxt *)xmlMalloc(0x70uLL);
  int v1 = v0;
  if (v0)
  {
    *(_OWORD *)&v0->vstateNr = 0u;
    *(_OWORD *)&v0->auint64_t m = 0u;
    *(_OWORD *)&v0->finishDtd = 0u;
    *(_OWORD *)&v0->valid = 0u;
    *(_OWORD *)&v0->warning = 0u;
    *(_OWORD *)&v0->nodeNr = 0u;
    *(_OWORD *)&v0->userData = 0u;
  }

  else
  {
    xmlVErrMemory(0LL, (uint64_t)"malloc failed");
  }

  return v1;
}

uint64_t xmlVErrMemory(uint64_t *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v4 = *a1;
    uint64_t v3 = a1[1];
    if (*((_DWORD *)a1 + 12) >> 1 == 1441171738) {
      uint64_t v5 = *a1;
    }
    else {
      LODWORD(v5) = 0;
    }
    if (a2) {
      return __xmlRaiseError( 0,  v3,  v4,  v5,  0,  23,  2,  3,  0LL,  0,  a2,  0LL,  0LL,  0,  (unsigned __int128)0LL >> 96,  (uint64_t)"Memory allocation failed : %s\n");
    }
  }

  else
  {
    LODWORD(vxmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0;
    LODWORD(v5) = 0;
    LODWORD(vxmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0;
    if (a2) {
      return __xmlRaiseError( 0,  v3,  v4,  v5,  0,  23,  2,  3,  0LL,  0,  a2,  0LL,  0LL,  0,  (unsigned __int128)0LL >> 96,  (uint64_t)"Memory allocation failed : %s\n");
    }
  }

  return __xmlRaiseError(0, v3, v4, v5, 0, 23, 2, 3, 0LL, 0, 0LL, 0LL, 0LL, 0, 0, (uint64_t)"Memory allocation failed\n");
}

void xmlFreeValidCtxt(xmlValidCtxtPtr a1)
{
  vstateTab = a1->vstateTab;
  if (vstateTab) {
    xmlFree(vstateTab);
  }
  nodeTab = a1->nodeTab;
  if (nodeTab) {
    xmlFree(nodeTab);
  }
  xmlFree(a1);
}

xmlElementContentPtr xmlNewDocElementContent(xmlDocPtr doc, const xmlChar *name, xmlElementContentType type)
{
  if (doc) {
    dict = doc->dict;
  }
  else {
    dict = 0LL;
  }
  if (type - 3 < 2 || type == XML_ELEMENT_CONTENT_PCDATA)
  {
    if (!name) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }

  if (type != XML_ELEMENT_CONTENT_ELEMENT)
  {
    __xmlRaiseError(0, 0, 0, 0, 0, 23, 1, 2, 0LL, 0, 0LL, 0LL, 0LL, 0, 0, (uint64_t)"%s");
    return 0LL;
  }

  if (!name) {
LABEL_10:
  }
    __xmlRaiseError(0, 0, 0, 0, 0, 23, 1, 2, 0LL, 0, 0LL, 0LL, 0LL, 0, 0, (uint64_t)"%s");
LABEL_11:
  uint64_t v6 = (xmlElementContent *)xmlMalloc(0x30uLL);
  uint64_t v7 = v6;
  if (v6)
  {
    *(_OWORD *)&v6->c1 = 0u;
    *(_OWORD *)&v6->xmlNodePtr parent = 0u;
    *(_OWORD *)&v6->xmlElementContentType type = 0u;
    v6->xmlElementContentType type = type;
    v6->ocur = XML_ELEMENT_CONTENT_ONCE;
    if (name)
    {
      leuint64_t n = 0;
      unsigned int v8 = xmlSplitQName3(name, &len);
      if (v8)
      {
        int v9 = v8;
        if (dict)
        {
          v7->prefix = xmlDictLookup(dict, name, len);
          size_t v10 = dict;
          int v11 = v9;
LABEL_20:
          unsigned int v12 = xmlDictLookup(v10, v11, -1);
LABEL_24:
          v7->name = v12;
          return v7;
        }

        v7->prefix = xmlStrndup(name, len);
        int v13 = v9;
      }

      else
      {
        if (dict)
        {
          size_t v10 = dict;
          int v11 = name;
          goto LABEL_20;
        }

        int v13 = name;
      }

      unsigned int v12 = xmlStrdup(v13);
      goto LABEL_24;
    }
  }

  else
  {
    xmlVErrMemory(0LL, (uint64_t)"malloc failed");
  }

  return v7;
}

uint64_t xmlErrValid_0(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    uint64_t v8 = *a1;
    uint64_t v7 = a1[1];
    if (*((_DWORD *)a1 + 12) >> 1 == 1441171738) {
      uint64_t v9 = *a1;
    }
    else {
      LODWORD(v9) = 0;
    }
    if (a4) {
      return __xmlRaiseError(0, v7, v8, v9, 0, 23, a2, 2, 0LL, 0, a4, 0LL, 0LL, 0, (unsigned __int128)0LL >> 96, a3);
    }
  }

  else
  {
    LODWORD(v7) = 0;
    LODWORD(v9) = 0;
    LODWORD(v8) = 0;
    if (a4) {
      return __xmlRaiseError(0, v7, v8, v9, 0, 23, a2, 2, 0LL, 0, a4, 0LL, 0LL, 0, (unsigned __int128)0LL >> 96, a3);
    }
  }

  return __xmlRaiseError(0, v7, v8, v9, 0, 23, a2, 2, 0LL, 0, 0LL, 0LL, 0LL, 0, 0, (uint64_t)"%s");
}

xmlElementContentPtr xmlNewElementContent(const xmlChar *name, xmlElementContentType type)
{
  return xmlNewDocElementContent(0LL, name, type);
}

xmlElementContentPtr xmlCopyDocElementContent(xmlDocPtr doc, xmlElementContentPtr content)
{
  if (!content) {
    return 0LL;
  }
  if (doc) {
    dict = doc->dict;
  }
  else {
    dict = 0LL;
  }
  uint64_t v6 = (xmlElementContent *)xmlMalloc(0x30uLL);
  uint64_t v5 = v6;
  if (!v6)
  {
LABEL_39:
    xmlVErrMemory(0LL, (uint64_t)"malloc failed");
    return v5;
  }

  *(_OWORD *)&v6->c1 = 0u;
  *(_OWORD *)&v6->xmlNodePtr parent = 0u;
  *(_OWORD *)&v6->xmlElementContentType type = 0u;
  *(void *)&v6->xmlElementContentType type = *(void *)&content->type;
  name = content->name;
  if (name)
  {
    if (!dict)
    {
      v6->name = xmlStrdup(content->name);
      prefix = content->prefix;
      if (!prefix) {
        goto LABEL_16;
      }
      goto LABEL_14;
    }

    v6->name = xmlDictLookup(dict, name, -1);
  }

  prefix = content->prefix;
  if (!prefix) {
    goto LABEL_16;
  }
  if (!dict)
  {
LABEL_14:
    uint64_t v9 = xmlStrdup(prefix);
    goto LABEL_15;
  }

  uint64_t v9 = xmlDictLookup(dict, prefix, -1);
LABEL_15:
  v5->prefix = v9;
LABEL_16:
  c1 = content->c1;
  if (c1)
  {
    xmlElementContentPtr v11 = xmlCopyDocElementContent(doc, c1);
    v5->c1 = v11;
    if (!v11) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }

  xmlElementContentPtr v11 = v5->c1;
  if (v11) {
LABEL_18:
  }
    v11->xmlNodePtr parent = v5;
LABEL_19:
  c2 = content->c2;
  if (c2)
  {
    int v13 = v5;
    while (1)
    {
      int v14 = (_xmlElementContent *)xmlMalloc(0x30uLL);
      if (!v14) {
        goto LABEL_39;
      }
      int v15 = v14;
      *(_OWORD *)&v14->c1 = 0u;
      *(_OWORD *)&v14->xmlNodePtr parent = 0u;
      *(_OWORD *)&v14->xmlElementContentType type = 0u;
      *(void *)&v14->xmlElementContentType type = *(void *)&c2->type;
      v13->c2 = v14;
      v14->xmlNodePtr parent = v13;
      int v16 = c2->name;
      if (!v16) {
        break;
      }
      if (!dict)
      {
        v14->name = xmlStrdup(c2->name);
        uint64_t v17 = c2->prefix;
        if (!v17) {
          goto LABEL_32;
        }
LABEL_30:
        int v18 = xmlStrdup(v17);
        goto LABEL_31;
      }

      v14->name = xmlDictLookup(dict, v16, -1);
      uint64_t v17 = c2->prefix;
      if (v17) {
        goto LABEL_28;
      }
LABEL_32:
      int v19 = c2->c1;
      if (!v19)
      {
        xmlElementContentPtr v20 = v15->c1;
        if (!v20) {
          goto LABEL_35;
        }
LABEL_34:
        v20->xmlNodePtr parent = v5;
        goto LABEL_35;
      }

      xmlElementContentPtr v20 = xmlCopyDocElementContent(doc, v19);
      v15->c1 = v20;
      if (v20) {
        goto LABEL_34;
      }
LABEL_35:
      c2 = c2->c2;
      int v13 = v15;
      if (!c2) {
        return v5;
      }
    }

    uint64_t v17 = c2->prefix;
    if (!v17) {
      goto LABEL_32;
    }
    if (!dict) {
      goto LABEL_30;
    }
LABEL_28:
    int v18 = xmlDictLookup(dict, v17, -1);
LABEL_31:
    v15->prefix = v18;
    goto LABEL_32;
  }

  return v5;
}

xmlElementContentPtr xmlCopyElementContent(xmlElementContentPtr content)
{
  return xmlCopyDocElementContent(0LL, content);
}

void xmlFreeDocElementContent(xmlDocPtr doc, xmlElementContentPtr cur)
{
  if (cur)
  {
    xmlElementContentPtr v2 = cur;
    if (doc) {
      dict = doc->dict;
    }
    else {
      dict = 0LL;
    }
    for (uint64_t i = 0LL; ; i += v6)
    {
      c1 = v2->c1;
      if (c1 || (c1 = v2->c2) != 0LL)
      {
        uint64_t v6 = 1LL;
        xmlElementContentPtr v2 = c1;
      }

      else
      {
        if (v2->type - 1 >= 4)
        {
          __xmlRaiseError(0, 0, 0, 0, 0, 23, 1, 2, 0LL, 0, 0LL, 0LL, 0LL, 0, 0, (uint64_t)"%s");
          return;
        }

        name = v2->name;
        if (dict)
        {
          if (name && !xmlDictOwns(dict, name)) {
            xmlFree((void *)v2->name);
          }
          prefix = v2->prefix;
          if (prefix && !xmlDictOwns(dict, prefix)) {
            ((void (*)(const xmlChar *))xmlFree)(v2->prefix);
          }
        }

        else
        {
          if (name) {
            xmlFree((void *)v2->name);
          }
          uint64_t v9 = v2->prefix;
          if (v9) {
            ((void (*)(const xmlChar *))xmlFree)(v9);
          }
        }

        if (!i || (xmlNodePtr parent = v2->parent) == 0LL)
        {
          xmlFree(v2);
          return;
        }

        if (v2 == parent->c1) {
          uint64_t v11 = 16LL;
        }
        else {
          uint64_t v11 = 24LL;
        }
        *(void *)((char *)&parent->type + v11) = 0LL;
        xmlFree(v2);
        c2 = parent->c2;
        if (c2) {
          xmlElementContentPtr v2 = parent->c2;
        }
        else {
          xmlElementContentPtr v2 = parent;
        }
        if (c2) {
          uint64_t v6 = 0LL;
        }
        else {
          uint64_t v6 = -1LL;
        }
      }
    }
  }

void xmlFreeElementContent(xmlElementContentPtr cur)
{
}

size_t terminateBufferTooSmall(char *a1, int a2)
{
  size_t result = strlen(a1);
  size_t v5 = (a2 - result);
  a1[a2 - 1] = 0;
  return result;
}

xmlElementPtr xmlAddElementDecl( xmlValidCtxtPtr ctxt, xmlDtdPtr dtd, const xmlChar *name, xmlElementTypeVal type, xmlElementContentPtr content)
{
  uint64_t v5 = 0LL;
  if (!dtd) {
    return (xmlElementPtr)v5;
  }
  uint64_t v6 = name;
  if (!name) {
    return (xmlElementPtr)v5;
  }
  switch(type)
  {
    case XML_ELEMENT_TYPE_EMPTY:
      if (!content) {
        goto LABEL_12;
      }
      uint64_t v11 = "xmlAddElementDecl: content != NULL for EMPTY\n";
      goto LABEL_18;
    case XML_ELEMENT_TYPE_ANY:
      if (!content) {
        goto LABEL_12;
      }
      uint64_t v11 = "xmlAddElementDecl: content != NULL for ANY\n";
      goto LABEL_18;
    case XML_ELEMENT_TYPE_MIXED:
      if (content) {
        goto LABEL_12;
      }
      uint64_t v11 = "xmlAddElementDecl: content == NULL for MIXED\n";
      goto LABEL_18;
    case XML_ELEMENT_TYPE_ELEMENT:
      if (!content)
      {
        uint64_t v11 = "xmlAddElementDecl: content == NULL for ELEMENT\n";
LABEL_18:
        xmlErrValid_0((uint64_t *)ctxt, 1, (uint64_t)v11, 0LL);
        return 0LL;
      }

void xmlFreeElement(uint64_t a1)
{
  if (a1)
  {
    xmlUnlinkNode((xmlNodePtr)a1);
    xmlFreeDocElementContent(*(xmlDocPtr *)(a1 + 64), *(xmlElementContentPtr *)(a1 + 80));
    xmlElementContentPtr v2 = *(void **)(a1 + 16);
    if (v2) {
      xmlFree(v2);
    }
    uint64_t v3 = *(void **)(a1 + 96);
    if (v3) {
      xmlFree(v3);
    }
    uint64_t v4 = *(xmlRegexp **)(a1 + 104);
    if (v4) {
      xmlRegFreeRegexp(v4);
    }
    xmlFree((void *)a1);
  }

void xmlFreeElementTable(xmlElementTablePtr table)
{
}

xmlElementTablePtr xmlCopyElementTable(xmlElementTablePtr table)
{
  return xmlHashCopy(table, (xmlHashCopier)xmlCopyElement);
}

void *xmlCopyElement(uint64_t a1)
{
  xmlElementContentPtr v2 = xmlMalloc(0x70uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
    *((_OWORD *)v2 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *(_OWORD *)xmlElementContentPtr v2 = 0u;
    *((_DWORD *)v2 + 2) = 15;
    *((_DWORD *)v2 + 18) = *(_DWORD *)(a1 + 72);
    uint64_t v4 = *(xmlChar **)(a1 + 16);
    if (v4) {
      uint64_t v4 = xmlStrdup(v4);
    }
    v3[2] = v4;
    uint64_t v5 = *(xmlChar **)(a1 + 96);
    if (v5) {
      uint64_t v5 = xmlStrdup(v5);
    }
    v3[12] = v5;
    v3[10] = xmlCopyDocElementContent(0LL, *(xmlElementContentPtr *)(a1 + 80));
    v3[11] = 0LL;
  }

  else
  {
    xmlVErrMemory(0LL, (uint64_t)"malloc failed");
  }

  return v3;
}

void xmlDumpElementDecl(xmlBufferPtr buf, xmlElementPtr elem)
{
  if (buf && elem)
  {
    switch(elem->etype)
    {
      case XML_ELEMENT_TYPE_EMPTY:
        xmlBufferWriteChar(buf, "<!ELEMENT ");
        prefix = elem->prefix;
        if (prefix)
        {
          xmlBufferWriteCHAR(buf, prefix);
          xmlBufferWriteChar(buf, ":");
        }

        xmlBufferWriteCHAR(buf, elem->name);
        uint64_t v5 = " EMPTY>\n";
        goto LABEL_15;
      case XML_ELEMENT_TYPE_ANY:
        xmlBufferWriteChar(buf, "<!ELEMENT ");
        uint64_t v7 = elem->prefix;
        if (v7)
        {
          xmlBufferWriteCHAR(buf, v7);
          xmlBufferWriteChar(buf, ":");
        }

        xmlBufferWriteCHAR(buf, elem->name);
        uint64_t v5 = " ANY>\n";
        goto LABEL_15;
      case XML_ELEMENT_TYPE_MIXED:
      case XML_ELEMENT_TYPE_ELEMENT:
        xmlBufferWriteChar(buf, "<!ELEMENT ");
        uint64_t v4 = elem->prefix;
        if (v4)
        {
          xmlBufferWriteCHAR(buf, v4);
          xmlBufferWriteChar(buf, ":");
        }

        xmlBufferWriteCHAR(buf, elem->name);
        xmlBufferWriteChar(buf, " ");
        xmlDumpElementContent(buf, (int *)elem->content);
        uint64_t v5 = ">\n";
LABEL_15:
        xmlBufferWriteChar(buf, v5);
        break;
      default:
        __xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  0LL,  0x17u,  1,  2,  0LL,  0,  0LL,  0LL,  0LL,  0,  0,  "%s",  (char)"Internal: ELEMENT struct corrupted invalid type\n");
        break;
    }
  }

void xmlDumpElementContent(xmlBuffer *a1, int *a2)
{
  if (a2)
  {
    xmlBufferWriteChar(a1, "(");
    uint64_t v4 = a2;
    while (1)
    {
      if (!v4) {
        return;
      }
      int v5 = *v4;
      if (v4 != a2)
      {
        uint64_t v6 = (_DWORD *)*((void *)v4 + 4);
        if (v6)
        {
          if (v5 != *v6 || v4[1] != 1) {
            xmlBufferWriteChar(a1, "(");
          }
        }
      }

      uint64_t v7 = (int **)(v4 + 4);
LABEL_34:
      uint64_t v4 = *v7;
      if (*v7 == a2)
      {
LABEL_35:
        xmlBufferWriteChar(a1, ")");
        unsigned int v13 = a2[1] - 2;
        if (v13 <= 2) {
          xmlBufferWriteChar(a1, off_189BA2C68[v13]);
        }
        return;
      }
    }

    if (v5 == 2)
    {
      uint64_t v8 = (const xmlChar *)*((void *)v4 + 5);
      if (v8)
      {
        xmlBufferWriteCHAR(a1, v8);
        xmlBufferWriteChar(a1, ":");
      }

      xmlBufferWriteCHAR(a1, *((const xmlChar **)v4 + 1));
    }

    else if (v5 == 1)
    {
      xmlBufferWriteChar(a1, "#PCDATA");
    }

    else
    {
      __xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  0LL,  0x17u,  1,  2,  0LL,  0,  0LL,  0LL,  0LL,  0,  0,  "%s",  (char)"Internal: ELEMENT cur corrupted invalid type\n");
    }

    do
    {
      if (v4 == a2) {
        goto LABEL_35;
      }
      uint64_t v9 = (int **)*((void *)v4 + 4);
      if (!v9) {
        return;
      }
      unsigned int v10 = v4[1] - 2;
      if (v10 <= 2) {
        xmlBufferWriteChar(a1, off_189BA2C68[v10]);
      }
      BOOL v11 = v4 == v9[2];
      uint64_t v4 = (int *)v9;
    }

    while (!v11);
    if (*(_DWORD *)v9 == 3)
    {
      unsigned int v12 = " , ";
    }

    else
    {
      if (*(_DWORD *)v9 != 4)
      {
LABEL_33:
        uint64_t v7 = v9 + 3;
        goto LABEL_34;
      }

      unsigned int v12 = " | ";
    }

    xmlBufferWriteChar(a1, v12);
    goto LABEL_33;
  }

void xmlDumpElementTable(xmlBufferPtr buf, xmlElementTablePtr table)
{
  if (buf)
  {
    if (table) {
      xmlHashScan(table, (xmlHashScanner)xmlDumpElementDeclScan, buf);
    }
  }

void xmlDumpElementDeclScan(xmlElementPtr elem, xmlBufferPtr buf)
{
}

xmlEnumerationPtr xmlCreateEnumeration(const xmlChar *name)
{
  xmlElementContentPtr v2 = (xmlEnumeration *)xmlMalloc(0x10uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    v2->xmlNodePtr next = 0LL;
    v2->name = 0LL;
    if (name) {
      v2->name = xmlStrdup(name);
    }
  }

  else
  {
    xmlVErrMemory(0LL, (uint64_t)"malloc failed");
  }

  return v3;
}

void xmlFreeEnumeration(xmlEnumerationPtr cur)
{
  if (cur)
  {
    xmlNodePtr next = cur->next;
    if (next) {
      xmlFreeEnumeration(next);
    }
    name = (xmlChar *)cur->name;
    if (name) {
      xmlFree(name);
    }
    xmlFree(cur);
  }

xmlEnumerationPtr xmlCopyEnumeration(xmlEnumerationPtr cur)
{
  if (!cur) {
    return 0LL;
  }
  Enumeratiouint64_t n = xmlCreateEnumeration(cur->name);
  if (Enumeration)
  {
    xmlNodePtr next = cur->next;
    if (cur->next) {
      xmlNodePtr next = xmlCopyEnumeration(next);
    }
    Enumeration->xmlNodePtr next = next;
  }

  return Enumeration;
}

xmlAttributePtr xmlAddAttributeDecl( xmlValidCtxtPtr ctxt, xmlDtdPtr dtd, const xmlChar *elem, const xmlChar *name, const xmlChar *ns, xmlAttributeType type, xmlAttributeDefault def, const xmlChar *defaultValue, xmlEnumerationPtr tree)
{
  if (!dtd || !name || !elem) {
    goto LABEL_21;
  }
  BOOL v11 = (xmlChar *)defaultValue;
  doc = dtd->doc;
  if (doc) {
    dict = doc->dict;
  }
  else {
    dict = 0LL;
  }
  if (type - 1 >= 0xA)
  {
    xmlErrValid_0((uint64_t *)ctxt, 1, (uint64_t)"Internal: ATTRIBUTE struct corrupted invalid type\n", 0LL);
LABEL_21:
    xmlFreeEnumeration(tree);
    return 0LL;
  }

  if (defaultValue)
  {
    if (!xmlValidateAttributeValueInternal((uint64_t)doc, type, defaultValue))
    {
      xmlErrValidNode( (uint64_t *)ctxt,  (int)dtd,  500,  (uint64_t)"Attribute %s of %s: invalid default value\n",  (uint64_t)elem,  (xmlChar *)name,  v11);
      BOOL v11 = 0LL;
      if (ctxt) {
        ctxt->valid = 0;
      }
    }
  }

  int v19 = dtd->doc;
  if (v19)
  {
    if (v19->extSubset == dtd)
    {
      intSubset = v19->intSubset;
      if (intSubset)
      {
        attributes = (xmlHashTable *)intSubset->attributes;
        if (attributes)
        {
          if (xmlHashLookup3(attributes, name, ns, elem)) {
            goto LABEL_21;
          }
        }
      }
    }
  }

  uint64_t v20 = dtd->attributes;
  if (!v20)
  {
    uint64_t v20 = xmlHashCreateDict(0, dict);
    dtd->attributes = v20;
    if (!v20)
    {
      xmlVErrMemory((uint64_t *)ctxt, (uint64_t)"xmlAddAttributeDecl: Table creation failed!\n");
      goto LABEL_21;
    }
  }

  table = (xmlHashTable *)v20;
  xmlValidCtxtPtr v43 = ctxt;
  uint64_t v21 = dict;
  int v22 = (xmlAttribute *)xmlMalloc(0x78uLL);
  BOOL v23 = v22;
  if (!v22)
  {
    xmlVErrMemory((uint64_t *)v43, (uint64_t)"malloc failed");
    xmlFreeEnumeration(tree);
    return v23;
  }

  v22->eleuint64_t m = 0LL;
  *(_OWORD *)&v22->axmlElementContentType type = 0u;
  *(_OWORD *)&v22->tree = 0u;
  *(_OWORD *)&v22->xmlNodePtr next = 0u;
  *(_OWORD *)&v22->doc = 0u;
  *(_OWORD *)&v22->name = 0u;
  *(_OWORD *)&v22->xmlNodePtr last = 0u;
  *(_OWORD *)&v22->_private = 0u;
  v22->xmlElementContentType type = XML_ATTRIBUTE_DECL;
  v22->axmlElementContentType type = type;
  v22->doc = dtd->doc;
  if (v21)
  {
    v22->name = xmlDictLookup(v21, name, -1);
    v23->prefix = xmlDictLookup(v21, ns, -1);
    v23->eleuint64_t m = xmlDictLookup(v21, elem, -1);
    v23->def = def;
    v23->tree = tree;
    if (!v11) {
      goto LABEL_32;
    }
    size_t v24 = xmlDictLookup(v21, v11, -1);
  }

  else
  {
    v22->name = xmlStrdup(name);
    v23->prefix = xmlStrdup(ns);
    v23->eleuint64_t m = xmlStrdup(elem);
    v23->def = def;
    v23->tree = tree;
    if (!v11) {
      goto LABEL_32;
    }
    size_t v24 = xmlStrdup(v11);
  }

  v23->defaultValue = v24;
LABEL_32:
  if (xmlHashAddEntry3(table, v23->name, v23->prefix, v23->elem, v23) < 0)
  {
    xmlErrValidWarning( (uint64_t *)v43,  (int)dtd,  501,  (uint64_t)"Attribute %s of element %s: already defined\n",  (uint64_t)name,  (xmlChar *)elem,  0LL);
    xmlFreeAttribute((xmlNodePtr)v23);
    return 0LL;
  }

  prefix = 0LL;
  elements = (xmlHashTable *)dtd->elements;
  if (elements
    || ((int v29 = dtd->doc) == 0LL ? (v30 = 0LL) : (v30 = v29->dict),
        elements = xmlHashCreateDict(0, v30),
        (dtd->elements = elements) != 0LL))
  {
    int v31 = xmlSplitQName2(elem, &prefix);
    unsigned int v32 = v31;
    if (v31) {
      int v33 = v31;
    }
    else {
      int v33 = elem;
    }
    int v34 = xmlHashLookup2(elements, v33, prefix);
    if (v34) {
      goto LABEL_46;
    }
    uint64_t v35 = xmlMalloc(0x70uLL);
    if (v35)
    {
      int v34 = v35;
      v35[5] = 0u;
      v35[6] = 0u;
      v35[3] = 0u;
      v35[4] = 0u;
      v35[1] = 0u;
      v35[2] = 0u;
      _OWORD *v35 = 0u;
      *((_DWORD *)v35 + 2) = 15;
      *((void *)v35 + 2) = xmlStrdup(v33);
      v34[12] = xmlStrdup(prefix);
      *((_DWORD *)v34 + 18) = 0;
      xmlHashAddEntry2(elements, v33, prefix, v34);
LABEL_46:
      if (prefix) {
        xmlFree(prefix);
      }
      if (v32) {
        xmlFree(v32);
      }
      if (type == XML_ATTRIBUTE_ID)
      {
        if (xmlScanIDAttributeDecl((uint64_t)v34, 1))
        {
          xmlErrValidNode( (uint64_t *)v43,  (int)dtd,  520,  (uint64_t)"Element %s has too may ID attributes defined : %s\n",  (uint64_t)elem,  (xmlChar *)name,  0LL);
          if (v43) {
            v43->valid = 0;
          }
        }
      }

      if (!xmlStrEqual(v23->name, (const xmlChar *)"xmlns"))
      {
        int v36 = v23->prefix;
        if (!v36 || !xmlStrEqual(v36, (const xmlChar *)"xmlns"))
        {
          uint64_t v37 = v34[11];
          while (v37)
          {
            uint64_t v38 = v37;
            if (xmlStrEqual(*(const xmlChar **)(v37 + 16), (const xmlChar *)"xmlns")
              || (int v39 = v23->prefix) != 0LL && xmlStrEqual(v39, (const xmlChar *)"xmlns"))
            {
              uint64_t v37 = *(void *)(v38 + 72);
              if (v37) {
                continue;
              }
            }

            v23->nexth = *(_xmlAttribute **)(v38 + 72);
            *(void *)(v38 + 72) = v23;
            goto LABEL_68;
          }
        }
      }

      v23->nexth = (_xmlAttribute *)v34[11];
      v34[11] = v23;
      goto LABEL_68;
    }

    uint64_t v40 = "malloc failed";
  }

  else
  {
    uint64_t v40 = "element table allocation failed";
  }

  xmlVErrMemory(0LL, (uint64_t)v40);
LABEL_68:
  v23->xmlNodePtr parent = dtd;
  xmlNodePtr last = dtd->last;
  if (last)
  {
    last->xmlNodePtr next = (_xmlNode *)v23;
    v23->prev = last;
  }

  else
  {
    dtd->childreuint64_t n = (_xmlNode *)v23;
  }

  dtd->xmlNodePtr last = (_xmlNode *)v23;
  return v23;
}

uint64_t xmlValidateAttributeValueInternal(uint64_t a1, int a2, const xmlChar *a3)
{
  switch(a2)
  {
    case 2:
    case 3:
    case 5:
    case 10:
      uint64_t result = xmlValidateNameValueInternal(a1, a3);
      break;
    case 4:
    case 6:
      uint64_t result = xmlValidateNamesValueInternal(a1, a3);
      break;
    case 7:
      uint64_t result = xmlValidateNmtokenValueInternal(a1, a3);
      break;
    case 8:
    case 9:
      uint64_t result = xmlValidateNmtokensValueInternal(a1, a3);
      break;
    default:
      uint64_t result = 1LL;
      break;
  }

  return result;
}

uint64_t xmlErrValidWarning(uint64_t *a1, int a2, int a3, uint64_t a4, uint64_t a5, xmlChar *a6, xmlChar *a7)
{
  if (a1)
  {
    uint64_t v9 = a1[2];
    uint64_t v10 = *a1;
    if (*((_DWORD *)a1 + 12) >> 1 == 1441171738) {
      uint64_t v11 = *a1;
    }
    else {
      LODWORD(v11) = 0;
    }
  }

  else
  {
    LODWORD(v9) = 0;
    LODWORD(v11) = 0;
    LODWORD(v10) = 0;
  }

  return __xmlRaiseError(0, v9, v10, v11, a2, 23, a3, 1, 0LL, 0, a5, a6, a7, 0, 0, a4);
}

void xmlFreeAttribute(xmlNodePtr cur)
{
  if (cur)
  {
    doc = cur->doc;
    if (doc) {
      dict = doc->dict;
    }
    else {
      dict = 0LL;
    }
    xmlUnlinkNode(cur);
    nsDef = cur->nsDef;
    if (nsDef) {
      xmlFreeEnumeration((xmlEnumerationPtr)nsDef);
    }
    int v5 = *(const xmlChar **)&cur->line;
    if (dict)
    {
      if (v5 && !xmlDictOwns(dict, v5)) {
        xmlFree(*(void **)&cur->line);
      }
      name = cur->name;
      if (name && !xmlDictOwns(dict, name)) {
        xmlFree((void *)cur->name);
      }
      psvuint64_t i = (const xmlChar *)cur->psvi;
      if (psvi && !xmlDictOwns(dict, psvi)) {
        xmlFree(cur->psvi);
      }
      xmlNodePtr properties = cur->properties;
      if (properties)
      {
        if (!xmlDictOwns(dict, (const xmlChar *)properties)) {
          ((void (*)(_xmlAttr *))xmlFree)(cur->properties);
        }
      }
    }

    else
    {
      if (v5) {
        xmlFree(*(void **)&cur->line);
      }
      uint64_t v9 = (xmlChar *)cur->name;
      if (v9) {
        xmlFree(v9);
      }
      uint64_t v10 = cur->properties;
      if (v10) {
        xmlFree(v10);
      }
      uint64_t v11 = cur->psvi;
      if (v11) {
        ((void (*)(void *))xmlFree)(v11);
      }
    }

    xmlFree(cur);
  }

uint64_t xmlScanIDAttributeDecl(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 88);
  if (!v2) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  do
  {
    if (*(_DWORD *)(v2 + 80) == 2)
    {
      uint64_t v6 = (v5 + 1);
      if (a2 && (int)v5 >= 1) {
        __xmlRaiseError( 0,  0,  0,  0,  a1,  23,  520,  2,  0LL,  0,  *(void *)(a1 + 16),  *(xmlChar **)(v2 + 16),  0LL,  0,  0,  (uint64_t)"Element %s has too many ID attributes defined : %s\n");
      }
    }

    else
    {
      uint64_t v6 = v5;
    }

    uint64_t v2 = *(void *)(v2 + 72);
    uint64_t v5 = v6;
  }

  while (v2);
  return v6;
}

void xmlFreeAttributeTable(xmlAttributeTablePtr table)
{
}

xmlAttributeTablePtr xmlCopyAttributeTable(xmlAttributeTablePtr table)
{
  return xmlHashCopy(table, (xmlHashCopier)xmlCopyAttribute);
}

void *xmlCopyAttribute(uint64_t a1)
{
  uint64_t v2 = xmlMalloc(0x78uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    v2[14] = 0LL;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
    *((_OWORD *)v2 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *(_OWORD *)uint64_t v2 = 0u;
    *((_DWORD *)v2 + 2) = 16;
    v2[10] = *(void *)(a1 + 80);
    v2[12] = xmlCopyEnumeration(*(xmlEnumerationPtr *)(a1 + 96));
    uint64_t v4 = *(const xmlChar **)(a1 + 112);
    if (v4) {
      v3[14] = xmlStrdup(v4);
    }
    uint64_t v5 = *(const xmlChar **)(a1 + 16);
    if (v5) {
      v3[2] = xmlStrdup(v5);
    }
    uint64_t v6 = *(const xmlChar **)(a1 + 104);
    if (v6) {
      v3[13] = xmlStrdup(v6);
    }
    uint64_t v7 = *(const xmlChar **)(a1 + 88);
    if (v7) {
      v3[11] = xmlStrdup(v7);
    }
  }

  else
  {
    xmlVErrMemory(0LL, (uint64_t)"malloc failed");
  }

  return v3;
}

void xmlDumpAttributeDecl(xmlBufferPtr buf, xmlAttributePtr attr)
{
  if (buf && attr)
  {
    xmlBufferWriteChar(buf, "<!ATTLIST ");
    xmlBufferWriteCHAR(buf, attr->elem);
    xmlBufferWriteChar(buf, " ");
    prefix = attr->prefix;
    if (prefix)
    {
      xmlBufferWriteCHAR(buf, prefix);
      xmlBufferWriteChar(buf, ":");
    }

    xmlBufferWriteCHAR(buf, attr->name);
    switch(attr->atype)
    {
      case XML_ATTRIBUTE_CDATA:
        uint64_t v5 = " CDATA";
        goto LABEL_16;
      case XML_ATTRIBUTE_ID:
        uint64_t v5 = " ID";
        goto LABEL_16;
      case XML_ATTRIBUTE_IDREF:
        uint64_t v5 = " IDREF";
        goto LABEL_16;
      case XML_ATTRIBUTE_IDREFS:
        uint64_t v5 = " IDREFS";
        goto LABEL_16;
      case XML_ATTRIBUTE_ENTITY:
        uint64_t v5 = " ENTITY";
        goto LABEL_16;
      case XML_ATTRIBUTE_ENTITIES:
        uint64_t v5 = " ENTITIES";
        goto LABEL_16;
      case XML_ATTRIBUTE_NMTOKEN:
        uint64_t v5 = " NMTOKEN";
        goto LABEL_16;
      case XML_ATTRIBUTE_NMTOKENS:
        uint64_t v5 = " NMTOKENS";
LABEL_16:
        xmlBufferWriteChar(buf, v5);
        break;
      case XML_ATTRIBUTE_ENUMERATION:
        uint64_t v6 = " (";
        goto LABEL_19;
      case XML_ATTRIBUTE_NOTATION:
        uint64_t v6 = " NOTATION (";
LABEL_19:
        xmlBufferWriteChar(buf, v6);
        xmlDumpEnumeration(buf, (uint64_t **)attr->tree);
        break;
      default:
        __xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  0LL,  0x17u,  1,  2,  0LL,  0,  0LL,  0LL,  0LL,  0,  0,  "%s",  (char)"Internal: ATTRIBUTE struct corrupted invalid type\n");
        break;
    }

    switch(attr->def)
    {
      case XML_ATTRIBUTE_NONE:
        break;
      case XML_ATTRIBUTE_REQUIRED:
        uint64_t v7 = " #REQUIRED";
        goto LABEL_25;
      case XML_ATTRIBUTE_IMPLIED:
        uint64_t v7 = " #IMPLIED";
        goto LABEL_25;
      case XML_ATTRIBUTE_FIXED:
        uint64_t v7 = " #FIXED";
LABEL_25:
        xmlBufferWriteChar(buf, v7);
        break;
      default:
        __xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  0LL,  0x17u,  1,  2,  0LL,  0,  0LL,  0LL,  0LL,  0,  0,  "%s",  (char)"Internal: ATTRIBUTE struct corrupted invalid def\n");
        break;
    }

    if (attr->defaultValue)
    {
      xmlBufferWriteChar(buf, " ");
      xmlBufferWriteQuotedString(buf, attr->defaultValue);
    }

    xmlBufferWriteChar(buf, ">\n");
  }

void xmlDumpEnumeration(xmlBufferPtr buf, uint64_t **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    while (1)
    {
      xmlBufferWriteCHAR(buf, (const xmlChar *)v2[1]);
      if (!*v2) {
        break;
      }
      xmlBufferWriteChar(buf, " | ");
      uint64_t v2 = (uint64_t **)*v2;
      if (!v2) {
        return;
      }
    }

    xmlBufferWriteChar(buf, ")");
  }

void xmlDumpAttributeTable(xmlBufferPtr buf, xmlAttributeTablePtr table)
{
  if (buf)
  {
    if (table) {
      xmlHashScan(table, (xmlHashScanner)xmlDumpAttributeDeclScan, buf);
    }
  }

void xmlDumpAttributeDeclScan(xmlAttributePtr attr, xmlBufferPtr buf)
{
}

xmlNotationPtr xmlAddNotationDecl( xmlValidCtxtPtr ctxt, xmlDtdPtr dtd, const xmlChar *name, const xmlChar *PublicID, const xmlChar *SystemID)
{
  uint64_t v5 = 0LL;
  if (dtd && name)
  {
    notatiouint64_t ns = dtd->notations;
    if (!notations)
    {
      doc = dtd->doc;
      unsigned int v13 = doc ? doc->dict : 0LL;
      notatiouint64_t ns = xmlHashCreateDict(0, v13);
      dtd->notatiouint64_t ns = notations;
      if (!notations)
      {
        xmlVErrMemory((uint64_t *)ctxt, (uint64_t)"xmlAddNotationDecl: Table creation failed!\n");
        return 0LL;
      }
    }

    int v14 = (xmlNotation *)xmlMalloc(0x18uLL);
    uint64_t v5 = v14;
    if (v14)
    {
      v14->name = 0LL;
      v14->PublicID = 0LL;
      v14->SystemID = 0LL;
      v14->name = xmlStrdup(name);
      if (SystemID) {
        v5->SystemID = xmlStrdup(SystemID);
      }
      if (PublicID) {
        v5->PublicID = xmlStrdup(PublicID);
      }
      if (xmlHashAddEntry((xmlHashTablePtr)notations, name, v5))
      {
        __xmlRaiseError( 0,  0,  0,  0,  0,  23,  526,  2,  0LL,  0,  (uint64_t)name,  0LL,  0LL,  0,  0,  (uint64_t)"xmlAddNotationDecl: %s already defined\n");
        xmlFreeNotation((void **)v5);
        return 0LL;
      }
    }

    else
    {
      xmlVErrMemory((uint64_t *)ctxt, (uint64_t)"malloc failed");
    }
  }

  return v5;
}

void xmlFreeNotation(void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2) {
      xmlFree(v2);
    }
    uint64_t v3 = a1[1];
    if (v3) {
      xmlFree(v3);
    }
    uint64_t v4 = a1[2];
    if (v4) {
      xmlFree(v4);
    }
    xmlFree(a1);
  }

void xmlFreeNotationTable(xmlNotationTablePtr table)
{
}

xmlNotationTablePtr xmlCopyNotationTable(xmlNotationTablePtr table)
{
  return xmlHashCopy(table, (xmlHashCopier)xmlCopyNotation);
}

void *xmlCopyNotation(uint64_t a1)
{
  uint64_t v2 = xmlMalloc(0x18uLL);
  if (v2)
  {
    uint64_t v3 = *(xmlChar **)a1;
    if (*(void *)a1) {
      uint64_t v3 = xmlStrdup(v3);
    }
    *uint64_t v2 = v3;
    uint64_t v4 = *(xmlChar **)(a1 + 8);
    if (v4) {
      uint64_t v4 = xmlStrdup(v4);
    }
    v2[1] = v4;
    uint64_t v5 = *(const xmlChar **)(a1 + 16);
    if (v5) {
      v2[2] = xmlStrdup(v5);
    }
    else {
      v2[2] = 0LL;
    }
  }

  else
  {
    xmlVErrMemory(0LL, (uint64_t)"malloc failed");
  }

  return v2;
}

void xmlDumpNotationDecl(xmlBufferPtr buf, xmlNotationPtr nota)
{
  if (buf && nota)
  {
    xmlBufferWriteChar(buf, "<!NOTATION ");
    xmlBufferWriteCHAR(buf, nota->name);
    if (nota->PublicID)
    {
      xmlBufferWriteChar(buf, " PUBLIC ");
      xmlBufferWriteQuotedString(buf, nota->PublicID);
      SystemID = nota->SystemID;
      p_SystemID = &nota->SystemID;
      if (!SystemID)
      {
LABEL_9:
        xmlBufferWriteChar(buf, " >\n");
        return;
      }

      xmlBufferWriteChar(buf, " ");
    }

    else
    {
      xmlBufferWriteChar(buf, " SYSTEM ");
      p_SystemID = &nota->SystemID;
    }

    xmlBufferWriteQuotedString(buf, *p_SystemID);
    goto LABEL_9;
  }

void xmlDumpNotationTable(xmlBufferPtr buf, xmlNotationTablePtr table)
{
  if (buf)
  {
    if (table) {
      xmlHashScan(table, (xmlHashScanner)xmlDumpNotationDeclScan, buf);
    }
  }

void xmlDumpNotationDeclScan(xmlNotationPtr nota, xmlBufferPtr buf)
{
}

xmlIDPtr xmlAddID(xmlValidCtxtPtr ctxt, xmlDocPtr doc, const xmlChar *value, xmlAttrPtr attr)
{
  uint64_t v4 = 0LL;
  if (doc)
  {
    if (value)
    {
      uint64_t v4 = 0LL;
      if (attr)
      {
        if (*value)
        {
          ids = (xmlHashTable *)doc->ids;
          if (ids || (ids = xmlHashCreateDict(0, doc->dict), (doc->ids = ids) != 0LL))
          {
            uint64_t v4 = (xmlID *)xmlMalloc(0x30uLL);
            if (!v4)
            {
              xmlVErrMemory((uint64_t *)ctxt, (uint64_t)"malloc failed");
              return v4;
            }

            v4->value = xmlStrdup(value);
            v4->doc = doc;
            if (ctxt && ctxt->finishDtd >> 1 == 1441171738 && *((_DWORD *)ctxt->userData + 172) == 5)
            {
              dict = doc->dict;
              if (dict) {
                uint64_t v11 = xmlDictLookup(dict, attr->name, -1);
              }
              else {
                uint64_t v11 = xmlStrdup(attr->name);
              }
              v4->name = v11;
              p_attr = &v4->attr;
            }

            else
            {
              v4->attr = attr;
              p_attr = &v4->name;
            }

            void *p_attr = 0LL;
            v4->lineno = xmlGetLineNo(attr->parent);
            if ((xmlHashAddEntry(ids, value, v4) & 0x80000000) == 0)
            {
              attr->axmlElementContentType type = XML_ATTRIBUTE_ID;
              return v4;
            }

            if (ctxt) {
              xmlErrValidNode( (uint64_t *)ctxt,  (int)attr->parent,  513,  (uint64_t)"ID %s already defined\n",  (uint64_t)value,  0LL,  0LL);
            }
            xmlFreeID(v4);
          }

          else
          {
            xmlVErrMemory((uint64_t *)ctxt, (uint64_t)"xmlAddID: Table creation failed!\n");
          }

          return 0LL;
        }
      }
    }
  }

  return v4;
}

void xmlFreeID(void *a1)
{
  if (a1)
  {
    uint64_t v2 = a1[5];
    if (v2)
    {
      uint64_t v3 = *(xmlDict **)(v2 + 152);
      uint64_t v4 = (xmlChar *)a1[1];
      if (!v4) {
        goto LABEL_11;
      }
      if (v3)
      {
        if (xmlDictOwns(*(xmlDictPtr *)(v2 + 152), v4)) {
          goto LABEL_11;
        }
        uint64_t v4 = (xmlChar *)a1[1];
      }
    }

    else
    {
      uint64_t v4 = (xmlChar *)a1[1];
      if (!v4)
      {
        uint64_t v5 = (void *)a1[3];
        if (v5) {
          goto LABEL_16;
        }
        goto LABEL_17;
      }

      uint64_t v3 = 0LL;
    }

    xmlFree(v4);
LABEL_11:
    uint64_t v5 = (void *)a1[3];
    if (v5)
    {
      if (!v3)
      {
LABEL_16:
        xmlFree(v5);
        goto LABEL_17;
      }

      if (!xmlDictOwns(v3, (const xmlChar *)v5))
      {
        uint64_t v5 = (void *)a1[3];
        goto LABEL_16;
      }
    }

void xmlFreeIDTable(xmlIDTablePtr table)
{
}

int xmlIsID(xmlDocPtr doc, xmlNodePtr elem, xmlAttrPtr attr)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if (!attr) {
    return 0;
  }
  name = attr->name;
  if (!name) {
    return 0;
  }
  uint64_t ns = attr->ns;
  if (ns)
  {
    prefix = (const char *)ns->prefix;
    if (prefix)
    {
    }
  }

  if (doc->type != XML_HTML_DOCUMENT_NODE)
  {
    if (!elem) {
      return 0;
    }
    __int16 v22 = 0;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    *(_OWORD *)memory = 0u;
    __int16 v18 = 0;
    memset(v17, 0, sizeof(v17));
    uint64_t v9 = elem->ns;
    if (!v9) {
      goto LABEL_21;
    }
    uint64_t v10 = v9->prefix;
    if (v10)
    {
      uint64_t v11 = xmlBuildQName(elem->name, v10, memory, 50);
      uint64_t ns = attr->ns;
    }

    else
    {
LABEL_21:
      uint64_t v11 = (xmlChar *)elem->name;
    }

    if (ns)
    {
      unsigned int v12 = ns->prefix;
      unsigned int v13 = (xmlChar *)attr->name;
      if (v12) {
        unsigned int v13 = xmlBuildQName(attr->name, v12, (xmlChar *)v17, 50);
      }
    }

    else
    {
      unsigned int v13 = (xmlChar *)attr->name;
    }

    xmlAttributePtr DtdAttrDesc = 0LL;
    if (v11)
    {
      if (v13)
      {
        xmlAttributePtr DtdAttrDesc = xmlGetDtdAttrDesc(doc->intSubset, v11, v13);
        if (!DtdAttrDesc)
        {
          extSubset = doc->extSubset;
          if (extSubset) {
            xmlAttributePtr DtdAttrDesc = xmlGetDtdAttrDesc(extSubset, v11, v13);
          }
          else {
            xmlAttributePtr DtdAttrDesc = 0LL;
          }
        }
      }
    }

    if (v13 != (xmlChar *)v17 && v13 != attr->name) {
      xmlFree(v13);
    }
    if (v11 != memory && v11 != elem->name) {
      xmlFree(v11);
    }
    return DtdAttrDesc && DtdAttrDesc->atype == XML_ATTRIBUTE_ID;
  }

  return xmlStrEqual((const xmlChar *)"id", name)
      || xmlStrEqual((const xmlChar *)"name", attr->name) && (!elem || xmlStrEqual(elem->name, (const xmlChar *)"a"));
}

xmlAttributePtr xmlGetDtdAttrDesc(xmlDtdPtr dtd, const xmlChar *elem, const xmlChar *name)
{
  prefix = 0LL;
  if (!dtd) {
    return 0LL;
  }
  attributes = (xmlHashTable *)dtd->attributes;
  if (!attributes) {
    return 0LL;
  }
  uint64_t v6 = xmlSplitQName2(name, &prefix);
  if (!v6) {
    return (xmlAttributePtr)xmlHashLookup3(attributes, name, 0LL, elem);
  }
  uint64_t v7 = v6;
  uint64_t v8 = (xmlAttribute *)xmlHashLookup3(attributes, v6, prefix, elem);
  if (prefix) {
    xmlFree(prefix);
  }
  xmlFree(v7);
  return v8;
}

int xmlRemoveID(xmlDocPtr doc, xmlAttrPtr attr)
{
  int result = -1;
  if (doc && attr)
  {
    ids = (xmlHashTable *)doc->ids;
    if (ids)
    {
      String = xmlNodeListGetString(doc, attr->children, 1);
      if (String)
      {
        uint64_t v7 = String;
        xmlValidNormalizeString(String);
        uint64_t v8 = (xmlAttrPtr *)xmlHashLookup(ids, v7);
        if (v8 && v8[2] == attr)
        {
          xmlHashRemoveEntry(ids, v7, (xmlHashDeallocator)xmlFreeIDTableEntry);
          xmlFree(v7);
          int result = 0;
          attr->axmlElementContentType type = 0;
          return result;
        }

        xmlFree(v7);
      }
    }

    return -1;
  }

  return result;
}

_BYTE *xmlValidNormalizeString(_BYTE *result)
{
  int v1 = result - 1;
  do
  {
    int v3 = *++v1;
    int v2 = v3;
  }

  while (v3 == 32);
  while (v2 == 32)
  {
    while (v2 == 32)
    {
      int v4 = *++v1;
      int v2 = v4;
    }

    if (v2)
    {
      LOBYTE(v2) = 32;
      goto LABEL_9;
    }

xmlAttrPtr xmlGetID(xmlDocPtr doc, const xmlChar *ID)
{
  xmlAttrPtr result = 0LL;
  if (doc)
  {
    if (ID)
    {
      xmlAttrPtr result = (xmlAttrPtr)doc->ids;
      if (result)
      {
        xmlAttrPtr result = (xmlAttrPtr)xmlHashLookup((xmlHashTablePtr)result, ID);
        if (result)
        {
          if (result->name) {
            return (xmlAttrPtr)result->name;
          }
          else {
            return (xmlAttrPtr)doc;
          }
        }
      }
    }
  }

  return result;
}

xmlRefPtr xmlAddRef(xmlValidCtxtPtr ctxt, xmlDocPtr doc, const xmlChar *value, xmlAttrPtr attr)
{
  int v4 = 0LL;
  if (doc && value && attr)
  {
    refs = doc->refs;
    if (!refs)
    {
      refs = xmlHashCreateDict(0, doc->dict);
      doc->refs = refs;
      if (!refs)
      {
        xmlVErrMemory((uint64_t *)ctxt, (uint64_t)"xmlAddRef: Table creation failed!\n");
        return 0LL;
      }
    }

    int v4 = (xmlRef *)xmlMalloc(0x28uLL);
    if (v4)
    {
      v4->value = xmlStrdup(value);
      if (ctxt && ctxt->finishDtd >> 1 == 1441171738 && *((_DWORD *)ctxt->userData + 172) == 5)
      {
        uint64_t v10 = xmlStrdup(attr->name);
        xmlAttrPtr v11 = 0LL;
      }

      else
      {
        uint64_t v10 = 0LL;
        xmlAttrPtr v11 = attr;
      }

      v4->attr = v11;
      v4->name = v10;
      v4->lineno = xmlGetLineNo(attr->parent);
      unsigned int v12 = (xmlList *)xmlHashLookup((xmlHashTablePtr)refs, value);
      if (!v12)
      {
        xmlListPtr v13 = xmlListCreate((xmlListDeallocator)xmlFreeRef, (xmlListDataCompare)xmlDummyCompare);
        if (!v13)
        {
LABEL_20:
          __xmlRaiseError(0, 0, 0, 0, 0, 23, 1, 2, 0LL, 0, 0LL, 0LL, 0LL, 0, 0, (uint64_t)"%s");
          goto LABEL_21;
        }

        unsigned int v12 = v13;
        if (xmlHashAddEntry((xmlHashTablePtr)refs, value, v13) < 0)
        {
          xmlListDelete(v12);
          xmlErrValid_0(0LL, 1, (uint64_t)"xmlAddRef: Reference list insertion failed!\n", 0LL);
LABEL_21:
          int v14 = (xmlChar *)v4->value;
          if (v14) {
            xmlFree(v14);
          }
          name = (xmlChar *)v4->name;
          if (name) {
            xmlFree(name);
          }
          xmlFree(v4);
          return 0LL;
        }
      }

      if (xmlListAppend(v12, v4)) {
        goto LABEL_20;
      }
    }

    else
    {
      xmlVErrMemory((uint64_t *)ctxt, (uint64_t)"malloc failed");
    }
  }

  return v4;
}

void xmlFreeRef(xmlLink *a1)
{
  Data = xmlLinkGetData(a1);
  if (Data)
  {
    int v2 = Data;
    int v3 = (void *)Data[1];
    if (v3) {
      xmlFree(v3);
    }
    int v4 = (void *)v2[3];
    if (v4) {
      xmlFree(v4);
    }
    xmlFree(v2);
  }

uint64_t xmlDummyCompare()
{
  return 0LL;
}

void xmlFreeRefTable(xmlRefTablePtr table)
{
}

void xmlFreeRefTableEntry(xmlListPtr l)
{
  if (l) {
    xmlListDelete(l);
  }
}

int xmlIsRef(xmlDocPtr doc, xmlNodePtr elem, xmlAttrPtr attr)
{
  if (!attr)
  {
    LODWORD(DtdAttrDesc) = 0;
    return (int)DtdAttrDesc;
  }

  xmlDocPtr v5 = doc;
  if (!doc)
  {
    xmlDocPtr v5 = attr->doc;
    if (!v5) {
      goto LABEL_11;
    }
  }

  intSubset = v5->intSubset;
  if (v5->type == XML_HTML_DOCUMENT_NODE || !elem) {
    goto LABEL_11;
  }
  xmlAttributePtr DtdAttrDesc = xmlGetDtdAttrDesc(intSubset, elem->name, attr->name);
  if (DtdAttrDesc
    || (xmlAttributePtr DtdAttrDesc = (xmlAttributePtr)v5->extSubset) != 0LL
    && (xmlAttributePtr DtdAttrDesc = xmlGetDtdAttrDesc((xmlDtdPtr)DtdAttrDesc, elem->name, attr->name)) != 0LL)
  {
    if (DtdAttrDesc->atype - 3 <= 1)
    {
      LODWORD(DtdAttrDesc) = 1;
      return (int)DtdAttrDesc;
    }

int xmlRemoveRef(xmlDocPtr doc, xmlAttrPtr attr)
{
  int result = -1;
  if (!doc || !attr) {
    return result;
  }
  refs = (xmlHashTable *)doc->refs;
  if (!refs) {
    return -1;
  }
  String = xmlNodeListGetString(doc, attr->children, 1);
  if (!String) {
    return -1;
  }
  uint64_t v7 = String;
  uint64_t v8 = (xmlList *)xmlHashLookup(refs, String);
  if (!v8)
  {
    xmlFree(v7);
    return -1;
  }

  uint64_t v9 = v8;
  v10[0] = v8;
  v10[1] = attr;
  xmlListWalk(v8, (xmlListWalker)xmlWalkRemoveRef, v10);
  if (xmlListEmpty(v9)) {
    xmlHashUpdateEntry(refs, v7, 0LL, (xmlHashDeallocator)xmlFreeRefTableEntry);
  }
  xmlFree(v7);
  return 0;
}

uint64_t xmlWalkRemoveRef(void *data, uint64_t a2)
{
  if (data[2] != *(void *)(a2 + 8)) {
    return 1LL;
  }
  xmlListRemoveFirst(*(xmlListPtr *)a2, data);
  return 0LL;
}

xmlListPtr xmlGetRefs(xmlDocPtr doc, const xmlChar *ID)
{
  if (doc && ID && (refs = (xmlHashTable *)doc->refs) != 0LL) {
    return (xmlListPtr)xmlHashLookup(refs, ID);
  }
  else {
    return 0LL;
  }
}

xmlElementPtr xmlGetDtdElementDesc(xmlDtdPtr dtd, const xmlChar *name)
{
  elements = 0LL;
  prefix = 0LL;
  if (dtd)
  {
    if (name)
    {
      elements = (xmlHashTable *)dtd->elements;
      if (elements)
      {
        int v4 = xmlSplitQName2(name, &prefix);
        xmlDocPtr v5 = v4;
        if (v4) {
          uint64_t v6 = v4;
        }
        else {
          uint64_t v6 = name;
        }
        elements = (xmlHashTable *)xmlHashLookup2(elements, v6, prefix);
        if (prefix) {
          xmlFree(prefix);
        }
        if (v5) {
          xmlFree(v5);
        }
      }
    }
  }

  return (xmlElementPtr)elements;
}

xmlElementPtr xmlGetDtdQElementDesc(xmlDtdPtr dtd, const xmlChar *name, const xmlChar *prefix)
{
  if (dtd && (elements = (xmlHashTable *)dtd->elements) != 0LL) {
    return (xmlElementPtr)xmlHashLookup2(elements, name, prefix);
  }
  else {
    return 0LL;
  }
}

xmlAttributePtr xmlGetDtdQAttrDesc( xmlDtdPtr dtd, const xmlChar *elem, const xmlChar *name, const xmlChar *prefix)
{
  if (dtd && (attributes = (xmlHashTable *)dtd->attributes) != 0LL) {
    return (xmlAttributePtr)xmlHashLookup3(attributes, name, prefix, elem);
  }
  else {
    return 0LL;
  }
}

xmlNotationPtr xmlGetDtdNotationDesc(xmlDtdPtr dtd, const xmlChar *name)
{
  if (dtd && (notatiouint64_t ns = (xmlHashTable *)dtd->notations) != 0LL) {
    return (xmlNotationPtr)xmlHashLookup(notations, name);
  }
  else {
    return 0LL;
  }
}

int xmlValidateNotationUse(xmlValidCtxtPtr ctxt, xmlDocPtr doc, const xmlChar *notationName)
{
  if (!doc) {
    return -1;
  }
  int result = -1;
  if (notationName)
  {
    intSubset = doc->intSubset;
    if (intSubset)
    {
      notatiouint64_t ns = (xmlHashTable *)intSubset->notations;
      if (notations && xmlHashLookup(notations, notationName))
      {
        return 1;
      }

      else
      {
        extSubset = doc->extSubset;
        BOOL v11 = !extSubset
           || (uint64_t v10 = (xmlHashTable *)extSubset->notations) == 0LL
           || xmlHashLookup(v10, notationName) == 0LL;
        int result = 1;
        if (ctxt)
        {
          if (v11)
          {
            xmlErrValidNode( (uint64_t *)ctxt,  (int)doc,  537,  (uint64_t)"NOTATION %s is not declared\n",  (uint64_t)notationName,  0LL,  0LL);
            return 0;
          }
        }
      }
    }
  }

  return result;
}

int xmlIsMixedElement(xmlDocPtr doc, const xmlChar *name)
{
  if (!doc) {
    return -1;
  }
  intSubset = doc->intSubset;
  xmlElementPtr DtdElementDesc = xmlGetDtdElementDesc(intSubset, name);
  if (!DtdElementDesc)
  {
    extSubset = doc->extSubset;
    if (!extSubset) {
      return -1;
    }
    xmlElementPtr DtdElementDesc = xmlGetDtdElementDesc(extSubset, name);
    if (!DtdElementDesc) {
      return -1;
    }
  }

  exmlElementContentType type = (int)DtdElementDesc->etype;
  else {
    return dword_181A37698[etype];
  }
}

int xmlValidateNameValue(const xmlChar *value)
{
  return xmlValidateNameValueInternal(0LL, value);
}

uint64_t xmlValidateNameValueInternal(uint64_t a1, const xmlChar *a2)
{
  if (!a2) {
    return 0LL;
  }
  leuint64_t n = 0;
  signed int v4 = xmlStringCurrentChar(0LL, a2, &len);
  uint64_t v5 = len;
  uint64_t result = xmlIsDocNameStartChar(a1, v4);
  if ((_DWORD)result)
  {
    uint64_t v7 = &a2[v5];
    signed int v8 = xmlStringCurrentChar(0LL, v7, &len);
    uint64_t v9 = len;
    if (xmlIsDocNameChar(a1, v8))
    {
      uint64_t v10 = &v7[v9];
      do
      {
        signed int v8 = xmlStringCurrentChar(0LL, v10, &len);
        v10 += len;
      }

      while (xmlIsDocNameChar(a1, v8));
    }

    return v8 == 0;
  }

  return result;
}

int xmlValidateNamesValue(const xmlChar *value)
{
  return xmlValidateNamesValueInternal(0LL, value);
}

uint64_t xmlValidateNamesValueInternal(uint64_t a1, const xmlChar *a2)
{
  if (!a2) {
    return 0LL;
  }
  leuint64_t n = 0;
  signed int v4 = xmlStringCurrentChar(0LL, a2, &len);
  uint64_t v5 = len;
  uint64_t result = xmlIsDocNameStartChar(a1, v4);
  if ((_DWORD)result)
  {
    uint64_t v7 = &a2[v5];
    do
    {
      signed int v8 = xmlStringCurrentChar(0LL, v7, &len);
      v7 += len;
    }

    while (xmlIsDocNameChar(a1, v8));
    while (v8 == 32)
    {
      do
      {
        signed int v9 = xmlStringCurrentChar(0LL, v7, &len);
        v7 += len;
      }

      while (v9 == 32);
      uint64_t result = xmlIsDocNameStartChar(a1, v9);
      if (!(_DWORD)result) {
        return result;
      }
      do
      {
        signed int v8 = xmlStringCurrentChar(0LL, v7, &len);
        v7 += len;
      }

      while (xmlIsDocNameChar(a1, v8));
    }

    return v8 == 0;
  }

  return result;
}

int xmlValidateNmtokenValue(const xmlChar *value)
{
  return xmlValidateNmtokenValueInternal(0LL, value);
}

uint64_t xmlValidateNmtokenValueInternal(uint64_t a1, const xmlChar *a2)
{
  if (!a2) {
    return 0LL;
  }
  leuint64_t n = 0;
  signed int v4 = xmlStringCurrentChar(0LL, a2, &len);
  uint64_t v5 = len;
  uint64_t result = xmlIsDocNameChar(a1, v4);
  if ((_DWORD)result)
  {
    uint64_t v7 = &a2[v5];
    signed int v8 = xmlStringCurrentChar(0LL, v7, &len);
    uint64_t v9 = len;
    if (xmlIsDocNameChar(a1, v8))
    {
      uint64_t v10 = &v7[v9];
      do
      {
        signed int v8 = xmlStringCurrentChar(0LL, v10, &len);
        v10 += len;
      }

      while (xmlIsDocNameChar(a1, v8));
    }

    return v8 == 0;
  }

  return result;
}

int xmlValidateNmtokensValue(const xmlChar *value)
{
  return xmlValidateNmtokensValueInternal(0LL, value);
}

uint64_t xmlValidateNmtokensValueInternal(uint64_t a1, const xmlChar *a2)
{
  if (!a2) {
    return 0LL;
  }
  leuint64_t n = 0;
  signed int v4 = xmlStringCurrentChar(0LL, a2, &len);
  uint64_t v5 = &a2[len];
  if (v4 <= 255)
  {
    do
    {
      if (((1LL << v4) & 0x100002600LL) == 0) {
        break;
      }
      signed int v4 = xmlStringCurrentChar(0LL, v5, &len);
      v5 += len;
    }

    while (v4 < 256);
  }

  uint64_t result = xmlIsDocNameChar(a1, v4);
  if ((_DWORD)result)
  {
    while (xmlIsDocNameChar(a1, v4))
    {
      signed int v4 = xmlStringCurrentChar(0LL, v5, &len);
      v5 += len;
    }

    while (v4 == 32)
    {
      while (v4 == 32)
      {
        signed int v4 = xmlStringCurrentChar(0LL, v5, &len);
        v5 += len;
      }

      if (!v4) {
        return 1LL;
      }
      uint64_t result = xmlIsDocNameChar(a1, v4);
      if (!(_DWORD)result) {
        return result;
      }
      do
      {
        signed int v4 = xmlStringCurrentChar(0LL, v5, &len);
        v5 += len;
      }

      while (xmlIsDocNameChar(a1, v4));
    }

    return v4 == 0;
  }

  return result;
}

int xmlValidateNotationDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlNotationPtr nota)
{
  return 1;
}

int xmlValidateAttributeValue(xmlAttributeType type, const xmlChar *value)
{
  return xmlValidateAttributeValueInternal(0LL, type, value);
}

xmlChar *__cdecl xmlValidCtxtNormalizeAttributeValue( xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr elem, const xmlChar *name, const xmlChar *value)
{
  uint64_t v5 = 0LL;
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (!doc || !elem || !name || !value) {
    return v5;
  }
  uint64_t ns = elem->ns;
  if (!ns || (prefix = ns->prefix) == 0LL)
  {
    BOOL v15 = 0;
    goto LABEL_12;
  }

  __int16 v23 = 0;
  memset(v22, 0, sizeof(v22));
  uint64_t v5 = xmlBuildQName(elem->name, prefix, (xmlChar *)v22, 50);
  if (!v5) {
    return v5;
  }
  xmlAttributePtr DtdAttrDesc = xmlGetDtdAttrDesc(doc->intSubset, v5, name);
  if (DtdAttrDesc)
  {
    xmlAttributePtr v14 = DtdAttrDesc;
  }

  else
  {
    extSubset = doc->extSubset;
    if (extSubset)
    {
      xmlAttributePtr v14 = xmlGetDtdAttrDesc(extSubset, v5, name);
      BOOL v15 = v14 != 0LL;
      goto LABEL_19;
    }

    xmlAttributePtr v14 = 0LL;
  }

  BOOL v15 = 0;
LABEL_19:
  if (v5 != (xmlChar *)v22 && v5 != elem->name) {
    xmlFree(v5);
  }
  if (!v14)
  {
LABEL_12:
    intSubset = doc->intSubset;
    if (!intSubset || (xmlAttributePtr v14 = xmlGetDtdAttrDesc(intSubset, elem->name, name)) == 0LL)
    {
      uint64_t v17 = doc->extSubset;
      if (!v17) {
        return 0LL;
      }
      xmlAttributePtr v18 = xmlGetDtdAttrDesc(v17, elem->name, name);
      if (!v18) {
        return 0LL;
      }
      xmlAttributePtr v14 = v18;
      BOOL v15 = 1;
    }
  }

  if (v14->atype == XML_ATTRIBUTE_CDATA) {
    return 0LL;
  }
  __int128 v21 = xmlStrdup(value);
  uint64_t v5 = v21;
  if (v21)
  {
    xmlValidNormalizeString(v21);
    if (v15 && doc->standalone && !xmlStrEqual(value, v5))
    {
      xmlErrValidNode( (uint64_t *)ctxt,  (int)elem,  530,  (uint64_t)"standalone: %s on %s value had to be normalized based on external subset declaration\n",  (uint64_t)name,  (xmlChar *)elem->name,  0LL);
      ctxt->valid = 0;
    }
  }

  return v5;
}

xmlChar *__cdecl xmlValidNormalizeAttributeValue( xmlDocPtr doc, xmlNodePtr elem, const xmlChar *name, const xmlChar *value)
{
  signed int v4 = 0LL;
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (!doc || !elem || !name || !value) {
    return v4;
  }
  uint64_t ns = elem->ns;
  if (ns)
  {
    prefix = ns->prefix;
    if (prefix)
    {
      __int16 v17 = 0;
      memset(v16, 0, sizeof(v16));
      BOOL v11 = xmlBuildQName(elem->name, prefix, (xmlChar *)v16, 50);
      if (!v11) {
        return 0LL;
      }
      if (v11 != (xmlChar *)v16 && v11 != elem->name) {
        xmlFree(v11);
      }
    }
  }

  xmlAttributePtr DtdAttrDesc = xmlGetDtdAttrDesc(doc->intSubset, elem->name, name);
  if (!DtdAttrDesc)
  {
    extSubset = doc->extSubset;
    if (!extSubset) {
      return 0LL;
    }
    xmlAttributePtr DtdAttrDesc = xmlGetDtdAttrDesc(extSubset, elem->name, name);
    if (!DtdAttrDesc) {
      return 0LL;
    }
  }

  if (DtdAttrDesc->atype == XML_ATTRIBUTE_CDATA) {
    return 0LL;
  }
  xmlListPtr v13 = xmlStrdup(value);
  signed int v4 = v13;
  if (v13) {
    xmlValidNormalizeString(v13);
  }
  return v4;
}

int xmlValidateAttributeDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlAttributePtr attr)
{
  if (!attr) {
    return 1;
  }
  defaultValue = attr->defaultValue;
  if (defaultValue && !xmlValidateAttributeValueInternal((uint64_t)doc, attr->atype, defaultValue))
  {
    xmlErrValidNode( (uint64_t *)ctxt,  (int)attr,  500,  (uint64_t)"Syntax of default value for attribute %s of %s is not valid\n",  (uint64_t)attr->name,  (xmlChar *)attr->elem,  0LL);
    int v7 = 0;
  }

  else
  {
    int v7 = 1;
  }

  if (attr->atype != XML_ATTRIBUTE_ID) {
    goto LABEL_38;
  }
  if ((attr->def & 0xFFFFFFFE) != 2)
  {
    xmlErrValidNode( (uint64_t *)ctxt,  (int)attr,  512,  (uint64_t)"ID attribute %s of %s is not valid must be #IMPLIED or #REQUIRED\n",  (uint64_t)attr->name,  (xmlChar *)attr->elem,  0LL);
    int v7 = 0;
    if (attr->atype != XML_ATTRIBUTE_ID) {
      goto LABEL_38;
    }
  }

  xmlElementPtr DtdElementDesc = xmlGetDtdElementDesc(doc->intSubset, attr->elem);
  if (DtdElementDesc)
  {
    xmlAttributePtr attributes = DtdElementDesc->attributes;
    if (attributes)
    {
      int v10 = 0;
      do
      {
        if (attributes->atype == XML_ATTRIBUTE_ID) {
          ++v10;
        }
        xmlAttributePtr attributes = attributes->nexth;
      }

      while (attributes);
    }

    else
    {
      int v10 = 0;
    }

    int data = v10;
LABEL_23:
    if (v10 >= 2)
    {
      eleuint64_t m = attr->elem;
      name = (xmlChar *)attr->name;
      xmlAttributePtr v14 = "Element %s has %d ID attribute defined in the internal subset : %s\n";
LABEL_25:
      xmlErrValidNodeNr((uint64_t *)ctxt, (int)attr, 514, (uint64_t)v14, (uint64_t)elem, v10, name);
      goto LABEL_38;
    }

    goto LABEL_26;
  }

  int data = 0;
  intSubset = doc->intSubset;
  if (intSubset)
  {
    xmlHashScan3( (xmlHashTablePtr)intSubset->attributes,  0LL,  0LL,  attr->elem,  (xmlHashScanner)xmlValidateAttributeIdCallback,  &data);
    int v10 = data;
    goto LABEL_23;
  }

uint64_t xmlValidateAttributeIdCallback(uint64_t result, _DWORD *a2)
{
  if (*(_DWORD *)(result + 80) == 2) {
    ++*a2;
  }
  return result;
}

uint64_t xmlErrValidNodeNr(uint64_t *a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, xmlChar *cur)
{
  if (a1)
  {
    uint64_t v10 = *a1;
    uint64_t v9 = a1[1];
    if (*((_DWORD *)a1 + 12) >> 1 == 1441171738) {
      uint64_t v11 = *a1;
    }
    else {
      LODWORD(v11) = 0;
    }
  }

  else
  {
    LODWORD(v9) = 0;
    LODWORD(v11) = 0;
    LODWORD(v10) = 0;
  }

  return __xmlRaiseError(0, v9, v10, v11, a2, 23, a3, 2, 0LL, 0, a5, cur, 0LL, a6, 0, a4);
}

int xmlValidateElementDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlElementPtr elem)
{
  if (!doc) {
    return 0;
  }
  intSubset = doc->intSubset;
  if (!elem) {
    return 1;
  }
  if (elem->etype == XML_ELEMENT_TYPE_MIXED && (xmlElementContentPtr content = elem->content) != 0LL)
  {
    int v8 = 1;
    do
    {
      if (content->type != XML_ELEMENT_CONTENT_OR) {
        break;
      }
      c1 = content->c1;
      if (!c1) {
        break;
      }
      if (c1->type == XML_ELEMENT_CONTENT_ELEMENT)
      {
        c2 = content->c2;
        if (c2)
        {
          name = c1->name;
          while (c2->type != XML_ELEMENT_CONTENT_ELEMENT)
          {
            unsigned int v12 = c2->c1;
            if (v12 && v12->type == XML_ELEMENT_CONTENT_ELEMENT)
            {
              if (xmlStrEqual(v12->name, name) && xmlStrEqual(c2->c1->prefix, content->c1->prefix))
              {
                prefix = (xmlChar *)content->c1->prefix;
                if (prefix)
                {
                  xmlAttributePtr v14 = "Definition of %s has duplicate references to %s:%s\n";
                  BOOL v15 = (xmlChar *)name;
                }

                else
                {
                  xmlAttributePtr v14 = "Definition of %s has duplicate references to %s\n";
                  prefix = (xmlChar *)name;
                  BOOL v15 = 0LL;
                }

                xmlErrValidNode((uint64_t *)ctxt, (int)elem, 503, (uint64_t)v14, (uint64_t)elem->name, prefix, v15);
                int v8 = 0;
              }

              c2 = c2->c2;
              if (c2) {
                continue;
              }
            }

            goto LABEL_29;
          }

          if (xmlStrEqual(c2->name, name) && xmlStrEqual(c2->prefix, content->c1->prefix))
          {
            xmlElementPtr v16 = (xmlChar *)content->c1->prefix;
            if (v16)
            {
              xmlAttributePtr v17 = "Definition of %s has duplicate references of %s:%s\n";
              uint64_t v18 = (xmlChar *)name;
            }

            else
            {
              xmlAttributePtr v17 = "Definition of %s has duplicate references of %s\n";
              xmlElementPtr v16 = (xmlChar *)name;
              uint64_t v18 = 0LL;
            }

            xmlErrValidNode((uint64_t *)ctxt, (int)elem, 503, (uint64_t)v17, (uint64_t)elem->name, v16, v18);
            int v8 = 0;
          }
        }
      }

int xmlValidateOneAttribute( xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr elem, xmlAttrPtr attr, const xmlChar *value)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  if (!doc) {
    goto LABEL_43;
  }
  if (doc->intSubset)
  {
    if (!elem) {
      goto LABEL_43;
    }
  }

  else
  {
    LODWORD(v10) = 0;
    if (!elem || !doc->extSubset) {
      return (int)v10;
    }
  }

  LODWORD(v10) = 0;
  if (!attr) {
    return (int)v10;
  }
  name = elem->name;
  if (!name) {
    return (int)v10;
  }
  if (!attr->name)
  {
LABEL_43:
    LODWORD(v10) = 0;
    return (int)v10;
  }

  uint64_t ns = elem->ns;
  if (ns && ns->prefix)
  {
    __int16 v40 = 0;
    memset(v39, 0, sizeof(v39));
    uint64_t v10 = xmlBuildQName(name, ns->prefix, (xmlChar *)v39, 50);
    if (!v10) {
      return (int)v10;
    }
    xmlListPtr v13 = v10;
    xmlAttributePtr v14 = attr->ns;
    intSubset = doc->intSubset;
    if (v14)
    {
      if (!intSubset
        || (xmlElementPtr v16 = (xmlHashTable *)intSubset->attributes) == 0LL
        || (xmlAttributePtr DtdAttrDesc = (char *)xmlHashLookup3(v16, attr->name, v14->prefix, v13)) == 0LL)
      {
        extSubset = doc->extSubset;
        if (extSubset)
        {
          xmlAttributePtr attributes = (xmlHashTable *)extSubset->attributes;
          if (attributes)
          {
            BOOL v20 = (char *)xmlHashLookup3(attributes, attr->name, attr->ns->prefix, v13);
LABEL_23:
            xmlAttributePtr DtdAttrDesc = v20;
            goto LABEL_25;
          }
        }

        goto LABEL_24;
      }
    }

    else
    {
      xmlAttributePtr DtdAttrDesc = (char *)xmlGetDtdAttrDesc(intSubset, v13, attr->name);
      if (!DtdAttrDesc)
      {
        xmlElementPtr v21 = doc->extSubset;
        if (v21)
        {
          BOOL v20 = (char *)xmlGetDtdAttrDesc(v21, v13, attr->name);
          goto LABEL_23;
        }

uint64_t xmlValidateAttributeValue2(uint64_t *a1, xmlDoc *doc, uint64_t a3, int a4, xmlChar *cur)
{
  if (a4 == 10)
  {
    intSubset = doc->intSubset;
    if (!intSubset || (BOOL v15 = (xmlHashTable *)intSubset->notations) == 0LL || !xmlHashLookup(v15, cur))
    {
      extSubset = doc->extSubset;
      if (!extSubset || (notatiouint64_t ns = (xmlHashTable *)extSubset->notations) == 0LL || !xmlHashLookup(notations, cur))
      {
        uint64_t v10 = "NOTATION attribute %s reference an unknown notation %s\n";
        uint64_t v11 = a1;
        int v12 = (int)doc;
        int v13 = 537;
        goto LABEL_37;
      }
    }

    return 1LL;
  }

  if (a4 != 6)
  {
    if (a4 == 5)
    {
      xmlEntityPtr DocEntity = xmlGetDocEntity(doc, cur);
      if (!DocEntity)
      {
        if (doc->standalone != 1 || (doc->standalone = 0, (xmlEntityPtr DocEntity = xmlGetDocEntity(doc, cur)) == 0LL))
        {
          uint64_t v10 = "ENTITY attribute %s reference an unknown entity %s\n";
          uint64_t v11 = a1;
          int v12 = (int)doc;
          int v13 = 535;
          goto LABEL_37;
        }
      }

      if (DocEntity->etype != XML_EXTERNAL_GENERAL_UNPARSED_ENTITY)
      {
        uint64_t v10 = "ENTITY attribute %s reference an entity %s of wrong type\n";
        uint64_t v11 = a1;
        int v12 = (int)doc;
        int v13 = 511;
LABEL_37:
        xmlErrValidNode(v11, v12, v13, (uint64_t)v10, a3, cur, 0LL);
        return 0LL;
      }
    }

    return 1LL;
  }

  int v19 = xmlStrdup(cur);
  if (!v19) {
    return 0LL;
  }
  BOOL v20 = v19;
  unsigned int v21 = *v19;
  if (*v19)
  {
    __int16 v22 = v19;
    uint64_t v18 = 1LL;
    while (1)
    {
LABEL_17:
      __int16 v23 = v22;
      while (v21 > 0x20 || ((1LL << v21) & 0x100002601LL) == 0)
      {
        unsigned int v24 = *++v23;
        unsigned int v21 = v24;
      }

      *__int16 v23 = 0;
      xmlEntityPtr v25 = xmlGetDocEntity(doc, v22);
      if (v25)
      {
        if (v25->etype == XML_EXTERNAL_GENERAL_UNPARSED_ENTITY) {
          goto LABEL_26;
        }
        xmlElementPtr v26 = a1;
        int v27 = (int)doc;
        int v28 = 511;
        unsigned __int32 v29 = "ENTITIES attribute %s reference an entity %s of wrong type\n";
      }

      else
      {
        xmlElementPtr v26 = a1;
        int v27 = (int)doc;
        int v28 = 535;
        unsigned __int32 v29 = "ENTITIES attribute %s reference an unknown entity %s\n";
      }

      xmlErrValidNode(v26, v27, v28, (uint64_t)v29, a3, v22, 0LL);
      uint64_t v18 = 0LL;
LABEL_26:
      if (!v21) {
        goto LABEL_40;
      }
      *__int16 v23 = v21;
      __int16 v22 = v23;
      while (v21 <= 0x20)
      {
        if (((1LL << v21) & 0x100002600LL) == 0)
        {
          if (!v21) {
            goto LABEL_40;
          }
          goto LABEL_17;
        }

        unsigned int v30 = *++v22;
        unsigned int v21 = v30;
      }
    }
  }

  uint64_t v18 = 1LL;
LABEL_40:
  xmlFree(v20);
  return v18;
}

int xmlValidateOneNamespace( xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr elem, const xmlChar *prefix, xmlNsPtr ns, const xmlChar *value)
{
  uint64_t v81 = *MEMORY[0x1895F89C0];
  if (!doc) {
    return 0;
  }
  if (doc->intSubset)
  {
    if (!elem) {
      return 0;
    }
  }

  else
  {
    int result = 0;
    if (!elem || !doc->extSubset) {
      return result;
    }
  }

  int result = 0;
  if (!ns) {
    return result;
  }
  name = elem->name;
  if (!name) {
    return result;
  }
  if (!ns->href) {
    return 0;
  }
  if (!prefix) {
    goto LABEL_29;
  }
  __int16 v80 = 0;
  memset(v79, 0, sizeof(v79));
  int v13 = xmlBuildQName(name, prefix, (xmlChar *)v79, 50);
  if (!v13)
  {
    xmlVErrMemory((uint64_t *)ctxt, (uint64_t)"Validating namespace");
    return 0;
  }

  xmlAttributePtr v14 = v13;
  BOOL v15 = ns->prefix;
  intSubset = doc->intSubset;
  if (v15)
  {
    if (!intSubset
      || (xmlAttributePtr v17 = (xmlHashTable *)intSubset->attributes) == 0LL
      || (xmlAttributePtr DtdAttrDesc = (char *)xmlHashLookup3(v17, v15, (const xmlChar *)"xmlns", v14)) == 0LL)
    {
      extSubset = doc->extSubset;
      if (extSubset)
      {
        xmlAttributePtr attributes = (xmlHashTable *)extSubset->attributes;
        if (attributes)
        {
          unsigned int v21 = (char *)xmlHashLookup3(attributes, ns->prefix, (const xmlChar *)"xmlns", v14);
LABEL_23:
          xmlAttributePtr DtdAttrDesc = v21;
          goto LABEL_25;
        }
      }

      goto LABEL_24;
    }
  }

  else
  {
    xmlAttributePtr DtdAttrDesc = (char *)xmlGetDtdAttrDesc(intSubset, v14, (const xmlChar *)"xmlns");
    if (!DtdAttrDesc)
    {
      __int16 v22 = doc->extSubset;
      if (v22)
      {
        unsigned int v21 = (char *)xmlGetDtdAttrDesc(v22, v14, (const xmlChar *)"xmlns");
        goto LABEL_23;
      }

LABEL_86:
  if (*((_DWORD *)DtdAttrDesc + 21) == 4 && !xmlStrEqual(*((const xmlChar **)DtdAttrDesc + 11), value))
  {
    unsigned int v72 = ns->prefix;
    int v73 = (xmlChar *)elem->name;
    char v74 = (xmlChar *)*((void *)DtdAttrDesc + 11);
    if (v72)
    {
      char v75 = "Value for attribute xmlns:%s of %s must be %s\n";
      uint64_t v76 = (uint64_t *)ctxt;
      int v77 = (int)elem;
    }

    else
    {
      char v75 = "Value for attribute xmlns of %s must be %s\n";
      uint64_t v76 = (uint64_t *)ctxt;
      int v77 = (int)elem;
      unsigned int v72 = elem->name;
      int v73 = (xmlChar *)*((void *)DtdAttrDesc + 11);
      char v74 = 0LL;
    }

    xmlErrValidNode(v76, v77, 508, (uint64_t)v75, (uint64_t)v72, v73, v74);
    int v30 = 0;
  }

  if (ns->prefix) {
    char v78 = ns->prefix;
  }
  else {
    char v78 = (const xmlChar *)"xmlns";
  }
  return xmlValidateAttributeValue2((uint64_t *)ctxt, doc, (uint64_t)v78, *((_DWORD *)DtdAttrDesc + 20), (xmlChar *)value) & v30;
}

int xmlValidatePushElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr elem, const xmlChar *qname)
{
  int v35 = 0;
  if (!ctxt) {
    return 0;
  }
  xmlValidCtxtPtr v6 = ctxt;
  if (ctxt->vstateNr < 1 || (vstate = ctxt->vstate) == 0LL || (uint64_t v8 = *(void *)vstate) == 0)
  {
LABEL_44:
    int v9 = 1;
    goto LABEL_45;
  }

  int v9 = 1;
  switch(*(_DWORD *)(v8 + 72))
  {
    case 0:
      goto LABEL_67;
    case 1:
      uint64_t v11 = *((void *)vstate + 1);
      int v12 = *(const xmlChar **)(v11 + 16);
      int v13 = "Element %s was declared EMPTY this one has content\n";
      int v14 = 528;
      goto LABEL_11;
    case 3:
      uint64_t v15 = *(void *)(v8 + 80);
      if (!v15)
      {
        leuint64_t n = 0;
        xmlSplitQName3(qname, &len);
LABEL_65:
        uint64_t v11 = *((void *)vstate + 1);
        xmlElementPtr v16 = *(xmlChar **)(v11 + 16);
        int v13 = "Element %s is not declared in %s list of possible children\n";
        ctxt = v6;
        int v14 = 515;
        int v12 = qname;
        goto LABEL_66;
      }

      if (*(_DWORD *)v15 != 1)
      {
        leuint64_t n = 0;
        uint64_t v18 = xmlSplitQName3(qname, &len);
        if (v18)
        {
          int v19 = v18;
          while (*(_DWORD *)v15 == 4)
          {
            uint64_t v22 = *(void *)(v15 + 16);
            if (!v22) {
              goto LABEL_63;
            }
            if (*(_DWORD *)v22 != 1)
            {
              if (*(_DWORD *)v22 != 2)
              {
LABEL_63:
                xmlErrValid_0((uint64_t *)v6, 519, (uint64_t)"Internal: MIXED struct corrupted\n", 0LL);
                goto LABEL_65;
              }

              __int16 v23 = *(const xmlChar **)(v22 + 40);
              if (v23)
              {
                if (!xmlStrncmp(v23, qname, len))
                {
                  unsigned int v21 = *(const xmlChar **)(*(void *)(v15 + 16) + 8LL);
LABEL_29:
                  if (xmlStrEqual(v21, v19)) {
                    goto LABEL_44;
                  }
                }
              }
            }

void *xmlValidGetElemDecl(uint64_t *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  int result = 0LL;
  if (a1 && a2 && a3)
  {
    uint64_t v8 = *(const xmlChar **)(a3 + 16);
    if (!v8) {
      return 0LL;
    }
    if (a4) {
      *a4 = 0;
    }
    uint64_t v10 = *(void *)(a3 + 72);
    if (v10)
    {
      uint64_t v11 = *(const xmlChar **)(v10 + 24);
      if (v11)
      {
        uint64_t v12 = *(void *)(a2 + 80);
        if (v12)
        {
          int v13 = *(xmlHashTable **)(v12 + 80);
          if (v13)
          {
            int result = xmlHashLookup2(v13, v8, v11);
            if (result) {
              return result;
            }
          }
        }

        uint64_t v14 = *(void *)(a2 + 88);
        if (v14)
        {
          uint64_t v15 = *(xmlHashTable **)(v14 + 80);
          if (v15)
          {
            int result = xmlHashLookup2(v15, *(const xmlChar **)(a3 + 16), v11);
            if (a4 && result) {
              goto LABEL_21;
            }
            if (result) {
              return result;
            }
          }
        }
      }
    }

    int result = xmlGetDtdElementDesc(*(xmlDtdPtr *)(a2 + 80), *(const xmlChar **)(a3 + 16));
    if (result) {
      return result;
    }
    xmlElementPtr v16 = *(xmlDtd **)(a2 + 88);
    if (!v16) {
      goto LABEL_23;
    }
    int result = xmlGetDtdElementDesc(v16, *(const xmlChar **)(a3 + 16));
    if (a4 && result)
    {
LABEL_21:
      *a4 = 1;
      return result;
    }

    if (!result)
    {
LABEL_23:
      xmlErrValidNode(a1, a3, 534, (uint64_t)"No declaration for element %s\n", *(void *)(a3 + 16), 0LL, 0LL);
      return 0LL;
    }
  }

  return result;
}

int xmlValidatePushCData(xmlValidCtxtPtr ctxt, const xmlChar *data, int len)
{
  if (!ctxt) {
    return 0;
  }
  if (len >= 1)
  {
    if (ctxt->vstateNr >= 1)
    {
      vstate = ctxt->vstate;
      if (vstate)
      {
        if (*(void *)vstate)
        {
          int v4 = *(_DWORD *)(*(void *)vstate + 72LL);
          switch(v4)
          {
            case 0:
              return v4;
            case 1:
              uint64_t v10 = *((void *)vstate + 1);
              uint64_t v11 = *(void *)(v10 + 16);
              uint64_t v12 = "Element %s was declared EMPTY this one has content\n";
              int v13 = 528;
LABEL_22:
              xmlErrValidNode((uint64_t *)ctxt, v10, v13, (uint64_t)v12, v11, 0LL, 0LL);
              return 0;
            case 4:
              uint64_t v5 = len;
              while (1)
              {
                unsigned int v6 = *data++;
                uint64_t v7 = (1LL << v6) & 0x100002600LL;
                if (v6 > 0x20 || v7 == 0) {
                  break;
                }
                int v4 = 1;
                if (!--v5) {
                  return v4;
                }
              }

              uint64_t v10 = *((void *)vstate + 1);
              uint64_t v11 = *(void *)(v10 + 16);
              uint64_t v12 = "Element %s content does not follow the DTD, Text not allowed\n";
              int v13 = 504;
              goto LABEL_22;
          }
        }
      }
    }

    return 1;
  }

  return 1;
}

int xmlValidatePopElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr elem, const xmlChar *qname)
{
  if (!ctxt) {
    return 0;
  }
  if (ctxt->vstateNr < 1) {
    return 1;
  }
  vstate = ctxt->vstate;
  if (!vstate) {
    return 1;
  }
  if (*(void *)vstate
    && *(_DWORD *)(*(void *)vstate + 72LL) == 4
    && (unsigned int v6 = (xmlRegExecCtxt *)*((void *)vstate + 2)) != 0LL
    && !xmlRegExecPushString(v6, 0LL, 0LL))
  {
    xmlErrValidNode( (uint64_t *)ctxt,  *((void *)vstate + 1),  504,  (uint64_t)"Element %s content does not follow the DTD, Expecting more child\n",  *(void *)(*((void *)vstate + 1) + 16LL),  0LL,  0LL);
    int v7 = 0;
  }

  else
  {
    int v7 = 1;
  }

  int vstateNr = ctxt->vstateNr;
  BOOL v9 = __OFSUB__(vstateNr, 1);
  int v10 = vstateNr - 1;
  if (v10 < 0 == v9)
  {
    ctxt->int vstateNr = v10;
    vstateTab = ctxt->vstateTab;
    uint64_t v12 = (uint64_t *)((char *)vstateTab + 24 * v10);
    uint64_t v13 = *v12;
    *uint64_t v12 = 0LL;
    v12[1] = 0LL;
    if (v13 && *(_DWORD *)(v13 + 72) == 4)
    {
      xmlRegFreeExecCtxt(*((xmlRegExecCtxtPtr *)vstateTab + 3 * v10 + 2));
      vstateTab = ctxt->vstateTab;
      int v10 = ctxt->vstateNr;
    }

    *((void *)vstateTab + 3 * v10 + 2) = 0LL;
    uint64_t v14 = (xmlValidState *)((char *)vstateTab + 24 * (v10 - 1));
    if (v10 <= 0) {
      uint64_t v15 = 0LL;
    }
    else {
      uint64_t v15 = v14;
    }
    ctxt->vstate = v15;
  }

  return v7;
}

int xmlValidateOneElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr elem)
{
  uint64_t v69 = *MEMORY[0x1895F89C0];
  int v64 = 0;
  if (!doc) {
    return 0;
  }
  xmlValidCtxtPtr v5 = ctxt;
  if (doc->intSubset)
  {
    if (!elem) {
      return 0;
    }
  }

  else
  {
    int v6 = 0;
    if (!elem || !doc->extSubset) {
      return v6;
    }
  }

  int v6 = 1;
  switch(elem->type)
  {
    case XML_ELEMENT_NODE:
      ElemDecl = xmlValidGetElemDecl((uint64_t *)ctxt, (uint64_t)doc, (uint64_t)elem, &v64);
      if (!ElemDecl) {
        return 0;
      }
      BOOL v9 = ElemDecl;
      if (v5->vstateNr) {
        goto LABEL_11;
      }
      break;
    case XML_ATTRIBUTE_NODE:
      int v7 = "Attribute element not expected\n";
      goto LABEL_68;
    case XML_TEXT_NODE:
      if (elem->children)
      {
        int v7 = "Text element has children !\n";
      }

      else if (elem->ns)
      {
        int v7 = "Text element has namespace !\n";
      }

      else
      {
        if (elem->content) {
          return v6;
        }
        int v7 = "Text element has no content !\n";
      }

LABEL_110:
          uint64_t v56 = *(void *)(v56 + 24);
          if (!v56) {
            goto LABEL_111;
          }
        }

        if (*(_DWORD *)v56 != 2) {
          goto LABEL_112;
        }
        int v57 = *(const xmlChar **)(v56 + 8);
LABEL_109:
        if (xmlStrEqual(v57, (const xmlChar *)v55)) {
          goto LABEL_113;
        }
        goto LABEL_110;
      }

      if (!xmlValidateOneCdataElement((uint64_t)v5, (uint64_t)elem))
      {
        char v42 = elem->name;
        xmlValidCtxtPtr v43 = "Element %s was declared #PCDATA but contains non text nodes\n";
        int v44 = (uint64_t *)v5;
        int v45 = (int)elem;
        int v46 = 529;
LABEL_80:
        xmlErrValidNode(v44, v45, v46, (uint64_t)v43, (uint64_t)v42, 0LL, 0LL);
        int v6 = 0;
      }

uint64_t xmlValidateOneCdataElement(uint64_t a1, uint64_t a2)
{
  if (!a1 || *(_DWORD *)(a2 + 8) != 1) {
    return 0LL;
  }
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    while (1)
    {
      uint64_t v4 = 0LL;
      unsigned int v5 = *(_DWORD *)(v3 + 8);
      if (v5 > 8) {
        break;
      }
      if (((1 << v5) & 0x198) != 0) {
        goto LABEL_6;
      }
      if (v5 != 5) {
        break;
      }
      uint64_t v10 = *(void *)(v3 + 24);
      if (v10 && *(void *)(v10 + 24))
      {
        nodeVPush(a1, v3);
        uint64_t v3 = *(void *)(*(void *)(v3 + 24) + 24LL);
      }

      else
      {
LABEL_6:
        while (1)
        {
          uint64_t v3 = *(void *)(v3 + 48);
          if (v3) {
            break;
          }
          int v6 = *(_DWORD *)(a1 + 32);
          unsigned int v7 = v6 - 1;
          if (v6 >= 1)
          {
            *(_DWORD *)(a1 + 32) = v7;
            uint64_t v8 = *(void *)(a1 + 40);
            uint64_t v9 = v6 == 1 ? 0LL : *(void *)(v8 + 8LL * (v6 - 2));
            *(void *)(a1 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v9;
            uint64_t v3 = *(void *)(v8 + 8LL * v7);
            *(void *)(v8 + 8LL * v7) = 0LL;
            if (v3) {
              continue;
            }
          }

          goto LABEL_18;
        }
      }

      if (!v3) {
        goto LABEL_18;
      }
    }
  }

  else
  {
LABEL_18:
    uint64_t v4 = 1LL;
  }

  *(void *)(a1 + 32) = 0LL;
  int v11 = *(void **)(a1 + 40);
  if (v11)
  {
    xmlFree(v11);
    *(void *)(a1 + 40) = 0LL;
  }

  return v4;
}

uint64_t xmlValidateElementContent(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x1895F8858](a1, a2);
  uint64_t v53 = *MEMORY[0x1895F89C0];
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  int v6 = v5;
  unsigned int v7 = v4;
  uint64_t v8 = v3;
  uint64_t v9 = v2;
  xmlElementContentPtr content = v4->content;
  name = (xmlChar *)v4->name;
  contModel = v4->contModel;
  if (contModel)
  {
    int valid = 1;
  }

  else
  {
    int valid = xmlValidBuildContentModel((xmlValidCtxtPtr)v9, v4);
    contModel = v7->contModel;
    if (!contModel) {
      return 0xFFFFFFFFLL;
    }
  }

  if (!xmlRegexpIsDeterminist(contModel)) {
    return 0xFFFFFFFFLL;
  }
  *(void *)(v9 + 32) = 0LL;
  *(void *)(v9 + 40) = 0LL;
  xmlRegExecCtxtPtr v14 = xmlRegNewExecCtxt(v7->contModel, 0LL, 0LL);
  if (v14)
  {
    uint64_t v15 = v14;
    if (v8)
    {
      uint64_t v16 = v8;
      do
      {
        int valid = 0;
        switch(*(_DWORD *)(v16 + 8))
        {
          case 1:
            uint64_t v17 = *(void *)(v16 + 72);
            if (!v17 || !*(void *)(v17 + 24))
            {
              xmlRegExecPushString(v15, *(const xmlChar **)(v16 + 16), 0LL);
              break;
            }

            __int16 v52 = 0;
            memset(v51, 0, sizeof(v51));
            uint64_t v18 = xmlBuildQName(*(const xmlChar **)(v16 + 16), *(const xmlChar **)(v17 + 24), v51, 50);
            if (v18)
            {
              int v19 = v18;
              xmlRegExecPushString(v15, v18, 0LL);
              if (v19 != v51 && v19 != *(xmlChar **)(v16 + 16)) {
                xmlFree(v19);
              }
              break;
            }

            int valid = -1;
            goto LABEL_31;
          case 3:
            if (xmlIsBlankNode((const xmlNode *)v16)) {
              break;
            }
            int valid = 0;
            goto LABEL_31;
          case 4:
            goto LABEL_31;
          case 5:
            uint64_t v20 = *(void *)(v16 + 24);
            if (!v20 || !*(void *)(v20 + 24)) {
              break;
            }
            nodeVPush(v9, v16);
            uint64_t v16 = *(void *)(*(void *)(v16 + 24) + 24LL);
            continue;
          default:
            break;
        }

        while (1)
        {
          uint64_t v16 = *(void *)(v16 + 48);
          if (v16) {
            break;
          }
          int v21 = *(_DWORD *)(v9 + 32);
          unsigned int v22 = v21 - 1;
          if (v21 >= 1)
          {
            *(_DWORD *)(v9 + 32) = v22;
            uint64_t v23 = *(void *)(v9 + 40);
            uint64_t v24 = v21 == 1 ? 0LL : *(void *)(v23 + 8LL * (v21 - 2));
            *(void *)(v9 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v24;
            uint64_t v16 = *(void *)(v23 + 8LL * v22);
            *(void *)(v23 + 8LL * v22) = 0LL;
            if (v16) {
              continue;
            }
          }

          goto LABEL_30;
        }
      }

      while (v16);
    }

int xmlValidateRoot(xmlValidCtxtPtr ctxt, xmlDocPtr doc)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (!doc) {
    return 0;
  }
  xmlNodePtr RootElement = xmlDocGetRootElement(doc);
  if (RootElement && (v5 = RootElement, (int v6 = RootElement->name) != 0LL))
  {
    intSubset = doc->intSubset;
    name = intSubset->name;
    if (!name || xmlStrEqual(name, v6)) {
      return 1;
    }
    uint64_t ns = v5->ns;
    if (ns)
    {
      prefix = ns->prefix;
      if (prefix)
      {
        __int16 v16 = 0;
        memset(v15, 0, sizeof(v15));
        uint64_t v12 = xmlBuildQName(v5->name, prefix, (xmlChar *)v15, 50);
        if (!v12)
        {
          xmlVErrMemory((uint64_t *)ctxt, 0LL);
          return 0;
        }

        uint64_t v13 = v12;
        int v14 = xmlStrEqual(doc->intSubset->name, v12);
        if (v13 != (xmlChar *)v15 && v13 != v5->name) {
          xmlFree(v13);
        }
        if (v14 == 1) {
          return 1;
        }
      }
    }

    xmlErrValidNode( (uint64_t *)ctxt,  (int)v5,  531,  (uint64_t)"root and DTD name do not match '%s' and '%s'\n",  (uint64_t)v5->name,  (xmlChar *)doc->intSubset->name,  0LL);
  }

  else
  {
    xmlErrValid_0((uint64_t *)ctxt, 525, (uint64_t)"no root element\n", 0LL);
  }

  return 0;
}

int xmlValidateElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr elem)
{
  int v3 = 0;
  if (doc && elem)
  {
    if (*(_OWORD *)&doc->intSubset == 0LL)
    {
      return 0;
    }

    else
    {
      int v3 = 1;
      childreuint64_t n = elem;
      do
      {
LABEL_6:
        uint64_t v8 = children;
        v3 &= xmlValidateOneElement(ctxt, doc, children);
        if (v8->type != XML_ELEMENT_NODE) {
          break;
        }
        for (uint64_t i = v8->properties; i; uint64_t i = i->next)
        {
          String = xmlNodeListGetString(doc, i->children, 0);
          int v11 = xmlValidateOneAttribute(ctxt, doc, v8, i, String);
          if (String) {
            xmlFree(String);
          }
          v3 &= v11;
        }

        for (int j = v8->nsDef; j; int j = j->next)
        {
          uint64_t ns = v8->ns;
          if (ns) {
            prefix = ns->prefix;
          }
          else {
            prefix = 0LL;
          }
          v3 &= xmlValidateOneNamespace(ctxt, doc, v8, prefix, j, j->href);
        }

        childreuint64_t n = v8->children;
      }

      while (children);
      while (v8 != elem)
      {
        childreuint64_t n = v8->next;
        if (children) {
          goto LABEL_6;
        }
        uint64_t v8 = v8->parent;
      }
    }
  }

  return v3;
}

int xmlValidateDocumentFinal(xmlValidCtxtPtr ctxt, xmlDocPtr doc)
{
  if (ctxt)
  {
    xmlValidCtxtPtr v2 = ctxt;
    if (doc)
    {
      unsigned int finishDtd = ctxt->finishDtd;
      ctxt->unsigned int finishDtd = 0;
      refs = (xmlHashTable *)doc->refs;
      v2->doc = doc;
      v2->int valid = 1;
      xmlHashScan(refs, (xmlHashScanner)xmlValidateCheckRefCallback, v2);
      v2->unsigned int finishDtd = finishDtd;
      LODWORD(ctxt) = v2->valid;
    }

    else
    {
      xmlErrValid_0((uint64_t *)ctxt, 521, (uint64_t)"xmlValidateDocumentFinal: doc == NULL\n", 0LL);
      LODWORD(ctxt) = 0;
    }
  }

  return (int)ctxt;
}

void xmlValidateCheckRefCallback(xmlList *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    v3[0] = a2;
    v3[1] = a3;
    xmlListWalk(a1, (xmlListWalker)xmlWalkValidateList, v3);
  }

int xmlValidateDtd(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlDtdPtr dtd)
{
  int result = 0;
  if (doc && dtd)
  {
    __int128 v10 = *(_OWORD *)&doc->intSubset;
    doc->intSubset = 0LL;
    doc->extSubset = dtd;
    int result = xmlValidateRoot(ctxt, doc);
    if (result)
    {
      ids = (xmlHashTable *)doc->ids;
      if (ids)
      {
        xmlHashFree(ids, (xmlHashDeallocator)xmlFreeIDTableEntry);
        doc->ids = 0LL;
      }

      refs = (xmlHashTable *)doc->refs;
      if (refs)
      {
        xmlHashFree(refs, (xmlHashDeallocator)xmlFreeRefTableEntry);
        doc->refs = 0LL;
      }

      xmlNodePtr RootElement = xmlDocGetRootElement(doc);
      int v9 = xmlValidateElement(ctxt, doc, RootElement);
      int result = xmlValidateDocumentFinal(ctxt, doc) & v9;
    }

    *(_OWORD *)&doc->intSubset = v10;
  }

  return result;
}

int xmlValidateDtdFinal(xmlValidCtxtPtr ctxt, xmlDocPtr doc)
{
  int result = 0;
  if (ctxt && doc)
  {
    intSubset = doc->intSubset;
    if (intSubset)
    {
      ctxt->int valid = 1;
      p_int valid = &ctxt->valid;
      ctxt->doc = doc;
      xmlAttributePtr attributes = (xmlHashTable *)intSubset->attributes;
      if (attributes) {
        xmlHashScan(attributes, (xmlHashScanner)xmlValidateAttributeCallback, ctxt);
      }
      entities = (xmlHashTable *)intSubset->entities;
      if (entities) {
        xmlHashScan(entities, (xmlHashScanner)xmlValidateNotationCallback, ctxt);
      }
    }

    else
    {
      if (!doc->extSubset) {
        return 0;
      }
      ctxt->int valid = 1;
      p_int valid = &ctxt->valid;
      ctxt->doc = doc;
    }

    extSubset = doc->extSubset;
    if (extSubset)
    {
      __int128 v10 = (xmlHashTable *)extSubset->attributes;
      if (v10) {
        xmlHashScan(v10, (xmlHashScanner)xmlValidateAttributeCallback, ctxt);
      }
      int v11 = (xmlHashTable *)extSubset->entities;
      if (v11) {
        xmlHashScan(v11, (xmlHashScanner)xmlValidateNotationCallback, ctxt);
      }
    }

    return *p_valid;
  }

  return result;
}

uint64_t xmlValidateAttributeCallback(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    unsigned int v4 = *(_DWORD *)(result + 80);
    if (v4 <= 0xA && ((1 << v4) & 0x460) != 0)
    {
      int v6 = *(xmlChar **)(result + 88);
      if (v6)
      {
        int result = xmlValidateAttributeValue2((uint64_t *)a2, *(xmlDoc **)(a2 + 56), *(void *)(result + 16), v4, v6);
        if (!(_DWORD)result && *(_DWORD *)(a2 + 64) == 1) {
          *(_DWORD *)(a2 + 6xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0;
        }
      }

      for (uint64_t i = *(uint64_t ***)(v3 + 96); i; uint64_t i = (uint64_t **)*i)
      {
        int result = xmlValidateAttributeValue2( (uint64_t *)a2,  *(xmlDoc **)(a2 + 56),  *(void *)(v3 + 16),  *(_DWORD *)(v3 + 80),  (xmlChar *)i[1]);
        if (!(_DWORD)result && *(_DWORD *)(a2 + 64) == 1) {
          *(_DWORD *)(a2 + 6xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0;
        }
      }

      unsigned int v4 = *(_DWORD *)(v3 + 80);
    }

    if (v4 == 10)
    {
      uint64_t v8 = *(const xmlChar **)(v3 + 112);
      if (v8)
      {
        uint64_t v9 = *(void *)(v3 + 64);
        if (v9
          && ((int result = (uint64_t)xmlGetDtdElementDesc(*(xmlDtdPtr *)(v9 + 80), v8)) != 0
           || (int result = (uint64_t)xmlGetDtdElementDesc(*(xmlDtdPtr *)(v9 + 88), *(const xmlChar **)(v3 + 112))) != 0)
          || (uint64_t v10 = *(void *)(v3 + 40)) != 0
          && *(_DWORD *)(v10 + 8) == 14
          && (int result = (uint64_t)xmlGetDtdElementDesc((xmlDtdPtr)v10, *(const xmlChar **)(v3 + 112))) != 0)
        {
          if (*(_DWORD *)(result + 72) == 1)
          {
            int result = xmlErrValidNode( (uint64_t *)a2,  0,  510,  (uint64_t)"NOTATION attribute %s declared for EMPTY element %s\n",  *(void *)(v3 + 16),  *(xmlChar **)(v3 + 112),  0LL);
            *(_DWORD *)(a2 + 6xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0;
          }
        }

        else
        {
          return xmlErrValidNode( (uint64_t *)a2,  0,  534,  (uint64_t)"attribute %s: could not find decl for element %s\n",  *(void *)(v3 + 16),  *(xmlChar **)(v3 + 112),  0LL);
        }
      }

      else
      {
        return xmlErrValid_0( (uint64_t *)a2,  1,  (uint64_t)"xmlValidateAttributeCallback(%s): internal error\n",  *(void *)(v3 + 16));
      }
    }
  }

  return result;
}

uint64_t xmlValidateNotationCallback(uint64_t result, xmlValidCtxtPtr ctxt)
{
  if (result)
  {
    if (*(_DWORD *)(result + 92) == 3)
    {
      xmlValidCtxtPtr v2 = *(const xmlChar **)(result + 80);
      if (v2)
      {
        int result = xmlValidateNotationUse(ctxt, *(xmlDocPtr *)(result + 64), v2);
        if ((_DWORD)result != 1) {
          ctxt->int valid = 0;
        }
      }
    }
  }

  return result;
}

int xmlValidateDocument(xmlValidCtxtPtr ctxt, xmlDocPtr doc)
{
  if (!doc) {
    return 0;
  }
  uint64_t v3 = ctxt;
  intSubset = doc->intSubset;
  if (intSubset)
  {
    SystemID = intSubset->SystemID;
    if (SystemID)
    {
      if (!doc->extSubset)
      {
        int v6 = xmlBuildURI(SystemID, doc->URL);
        unsigned int v7 = doc->intSubset;
        if (!v6)
        {
          uint64_t ExternalID = (uint64_t)v7->SystemID;
          uint64_t v10 = "Could not build URI for external subset %s\n";
LABEL_24:
          ctxt = v3;
          int v11 = 517;
          goto LABEL_25;
        }

        uint64_t v8 = v6;
        doc->extSubset = xmlParseDTD(v7->ExternalID, v6);
        xmlFree(v8);
        if (!doc->extSubset)
        {
LABEL_21:
          uint64_t v20 = doc->intSubset;
          uint64_t ExternalID = (uint64_t)v20->SystemID;
          if (!ExternalID) {
            uint64_t ExternalID = (uint64_t)v20->ExternalID;
          }
          uint64_t v10 = "Could not load the external subset %s\n";
          goto LABEL_24;
        }
      }
    }

    else
    {
      uint64_t v13 = intSubset->ExternalID;
      if (v13)
      {
        if (!doc->extSubset)
        {
          int v14 = xmlParseDTD(v13, 0LL);
          doc->extSubset = v14;
          if (!v14) {
            goto LABEL_21;
          }
        }
      }
    }
  }

  else if (!doc->extSubset)
  {
    uint64_t v10 = "no DTD found!\n";
    int v11 = 522;
    uint64_t ExternalID = 0LL;
LABEL_25:
    xmlErrValid_0((uint64_t *)ctxt, v11, (uint64_t)v10, ExternalID);
    return 0;
  }

  ids = (xmlHashTable *)doc->ids;
  if (ids)
  {
    xmlHashFree(ids, (xmlHashDeallocator)xmlFreeIDTableEntry);
    doc->ids = 0LL;
  }

  refs = (xmlHashTable *)doc->refs;
  if (refs)
  {
    xmlHashFree(refs, (xmlHashDeallocator)xmlFreeRefTableEntry);
    doc->refs = 0LL;
  }

  int v17 = xmlValidateDtdFinal(v3, doc);
  int result = xmlValidateRoot(v3, doc);
  if (result)
  {
    xmlNodePtr RootElement = xmlDocGetRootElement(doc);
    int v19 = xmlValidateElement(v3, doc, RootElement);
    return v19 & v17 & xmlValidateDocumentFinal(v3, doc);
  }

  return result;
}

int xmlValidGetPotentialChildren(xmlElementContent *ctree, const xmlChar **names, int *len, int max)
{
  int result = -1;
  if (ctree)
  {
    if (names)
    {
      if (len)
      {
        int result = *len;
        if (*len < max)
        {
          uint64_t v9 = result;
          switch(ctree->type)
          {
            case XML_ELEMENT_CONTENT_PCDATA:
              if (result < 1) {
                goto LABEL_12;
              }
              uint64_t v10 = 0LL;
              while (!xmlStrEqual((const xmlChar *)"#PCDATA", names[v10]))
              {
                ++v10;
                int result = *len;
                if (v10 >= *len)
                {
                  uint64_t v9 = result;
LABEL_12:
                  *leuint64_t n = result + 1;
                  name = (const xmlChar *)"#PCDATA";
                  goto LABEL_19;
                }
              }

              return *len;
            case XML_ELEMENT_CONTENT_ELEMENT:
              if (result <= 0) {
                goto LABEL_18;
              }
              uint64_t v12 = 0LL;
              break;
            case XML_ELEMENT_CONTENT_SEQ:
            case XML_ELEMENT_CONTENT_OR:
              xmlValidGetPotentialChildren(ctree->c1, names, len, max);
              xmlValidGetPotentialChildren(ctree->c2, names, len, max);
              return *len;
            default:
              return *len;
          }

          while (!xmlStrEqual(ctree->name, names[v12]))
          {
            ++v12;
            int result = *len;
            if (v12 >= *len)
            {
              uint64_t v9 = result;
LABEL_18:
              name = ctree->name;
              *leuint64_t n = result + 1;
LABEL_19:
              names[v9] = name;
              return *len;
            }
          }

          return *len;
        }
      }
    }
  }

  return result;
}

int xmlValidGetValidElements(xmlNode *prev, xmlNode *next, const xmlChar **names, int max)
{
  uint64_t v4 = *(void *)&max;
  namesa[256] = *(xmlChar **)MEMORY[0x1895F89C0];
  bzero(namesa, 0x800uLL);
  leuint64_t n = 0;
  int v8 = -1;
  memset(&ctxt.warning, 0, 96);
  ctxt.userData = 0LL;
  ctxt.error = (xmlValidityErrorFunc)xmlNoValidityErr;
  if (prev) {
    uint64_t v9 = prev;
  }
  else {
    uint64_t v9 = next;
  }
  xmlNodePtr parent = v9->parent;
  xmlElementPtr DtdElementDesc = xmlGetDtdElementDesc(parent->doc->intSubset, parent->name);
  if (!DtdElementDesc)
  {
    extSubset = parent->doc->extSubset;
    if (!extSubset) {
      return -1;
    }
    xmlElementPtr DtdElementDesc = xmlGetDtdElementDesc(extSubset, parent->name);
    if (!DtdElementDesc) {
      return -1;
    }
  }

  if (prev)
  {
    uint64_t v12 = prev->next;
    if (next)
    {
LABEL_10:
      uint64_t v13 = next->prev;
      goto LABEL_16;
    }
  }

  else
  {
    uint64_t v12 = 0LL;
    if (next) {
      goto LABEL_10;
    }
  }

  uint64_t v13 = 0LL;
LABEL_16:
  __int128 v30 = *(_OWORD *)&parent->children;
  xmlNodePtr v15 = xmlNewDocNode(v9->doc, 0LL, (const xmlChar *)"<!dummy?>", 0LL);
  if (!v15) {
    return -1;
  }
  __int16 v16 = v15;
  p_xmlNodePtr last = &parent->last;
  v15->xmlNodePtr next = next;
  v15->prev = prev;
  v15->xmlNodePtr parent = parent;
  int v27 = v12;
  name = v15->name;
  p_xmlNodePtr next = &prev->next;
  if (!prev) {
    p_xmlNodePtr next = &parent->children;
  }
  *p_xmlNodePtr next = v15;
  unsigned __int32 v29 = next;
  p_prev = &next->prev;
  if (next) {
    p_xmlNodePtr last = &next->prev;
  }
  *p_xmlNodePtr last = v15;
  leuint64_t n = xmlValidGetPotentialChildren(DtdElementDesc->content, (const xmlChar **)namesa, &len, 256);
  if (len < 1)
  {
    int v8 = 0;
    if (!prev) {
      goto LABEL_37;
    }
  }

  else
  {
    uint64_t v19 = 0LL;
    int v8 = 0;
    do
    {
      v16->name = namesa[v19];
      if (xmlValidateOneElement(&ctxt, parent->doc, parent))
      {
        if (v8 <= 0)
        {
          uint64_t v22 = v8;
        }

        else
        {
          uint64_t v20 = v4;
          unint64_t v21 = 0LL;
          uint64_t v22 = v8;
          do
          {
            if (xmlStrEqual(namesa[v19], names[v21++])) {
              BOOL v24 = 1;
            }
            else {
              BOOL v24 = v21 >= v8;
            }
          }

          while (!v24);
          uint64_t v4 = v20;
        }

        ++v8;
        names[v22] = namesa[v19];
      }

      ++v19;
    }

    while (v19 < len);
    if (!prev) {
      goto LABEL_37;
    }
  }

  prev->xmlNodePtr next = v27;
LABEL_37:
  if (v29) {
    *p_prev = v13;
  }
  *(_OWORD *)&parent->childreuint64_t n = v30;
  v16->name = name;
  xmlFreeNode(v16);
  return v8;
}

uint64_t xmlIsDocNameStartChar(uint64_t a1, signed int val)
{
  if (!a1 || (*(_BYTE *)(a1 + 172) & 4) == 0)
  {
    if ((val & 0xFFFFFFDF) - 65 >= 0x1A)
    {
      uint64_t result = 1LL;
      if (val == 58) {
        return result;
      }
      if (val == 95) {
        return result;
      }
      int32x4_t v4 = vdupq_n_s32(val);
      if ((vmaxv_u8((uint8x8_t)vmovn_s16( vuzp1q_s16( (int16x8_t)vcgtq_u32( (uint32x4_t)xmmword_181A37350,  (uint32x4_t)vaddq_s32(v4, (int32x4_t)xmmword_181A37330)),  (int16x8_t)vcgtq_u32( (uint32x4_t)xmmword_181A37360,  (uint32x4_t)vaddq_s32(v4, (int32x4_t)xmmword_181A37340))))) & 1) != 0 || (val - 63744) < 0x4D0 || (val - 65008) < 0x20E || (val - 0x10000) < 0xE0000 || (val & 0xFFFFFFFE) == 0x200C)
      {
        return result;
      }

      return 0LL;
    }

    return 1LL;
  }

  if (val > 255)
  {
    if (xmlCharInRange(val, &xmlIsBaseCharGroup)) {
      return 1LL;
    }
    uint64_t result = 1LL;
  }

  else
  {
    BOOL v6 = val == 95 || val == 58;
    int v7 = (val - 216) < 0x1F || v6;
    if (val > 247) {
      int v7 = 1;
    }
    if ((val & 0xFFFFFFDF) - 65 >= 0x1A) {
      unsigned int v8 = v7;
    }
    else {
      unsigned int v8 = 1;
    }
    else {
      return 1LL;
    }
  }

  return result;
}

uint64_t xmlIsDocNameChar(uint64_t a1, signed int val)
{
  if (a1 && (*(_BYTE *)(a1 + 172) & 4) != 0)
  {
    if (val > 255)
    {
      if (xmlCharInRange(val, &xmlIsBaseCharGroup)) {
        return 1LL;
      }
      uint64_t result = 1LL;
      if (xmlCharInRange(val, &xmlIsDigitGroup)) {
        return 1LL;
      }
    }

    else
    {
      uint64_t result = 1LL;
      if ((val - 192) < 0x17
        || (val & 0xFFFFFFDF) - 65 < 0x1A
        || (val - 48) < 0xA
        || val > 247
        || (val - 216) < 0x1F)
      {
        return result;
      }
    }

    if (val >= 256)
    {
      if (xmlCharInRange(val, &xmlIsCombiningGroup) || xmlCharInRange(val, &xmlIsExtenderGroup)) {
        return 1LL;
      }
    }

    else if (val == 183)
    {
      return 1LL;
    }

    return 0LL;
  }

  uint64_t result = 1LL;
  if ((val - 48) >= 0xB
    && (val & 0xFFFFFFDF) - 65 >= 0x1A
    && ((val - 45) > 0x32 || ((1LL << (val - 45)) & 0x4000000000003LL) == 0)
    && val != 183)
  {
    int32x4_t v4 = vdupq_n_s32(val);
    if ((vmaxv_u8((uint8x8_t)vmovn_s16( vuzp1q_s16( (int16x8_t)vcgtq_u32( (uint32x4_t)xmmword_181A37390,  (uint32x4_t)vaddq_s32(v4, (int32x4_t)xmmword_181A37370)),  (int16x8_t)vcgtq_u32( (uint32x4_t)xmmword_181A373A0,  (uint32x4_t)vaddq_s32(v4, (int32x4_t)xmmword_181A37380))))) & 1) == 0 && (val - 63744) >= 0x4D0 && (val - 65008) >= 0x20E && (val - 0x10000) >= 0xE0000 && (val & 0xFFFFFFFE) != 0x200C)
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t nodeVPush(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 36);
  if (v4 <= 0)
  {
    *(_DWORD *)(a1 + 36) = 4;
    xmlNodePtr v5 = xmlMalloc(0x20uLL);
    *(void *)(a1 + 40) = v5;
    if (!v5)
    {
      uint64_t result = xmlVErrMemory((uint64_t *)a1, (uint64_t)"malloc failed");
      *(_DWORD *)(a1 + 36) = 0;
      return result;
    }

    int v4 = *(_DWORD *)(a1 + 36);
  }

  int v6 = *(_DWORD *)(a1 + 32);
  if (v6 < v4)
  {
    uint64_t result = *(void *)(a1 + 40);
LABEL_8:
    *(void *)(result + 8LL * v6) = a2;
    *(void *)(a1 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = a2;
    *(_DWORD *)(a1 + 32) = v6 + 1;
    return result;
  }

  uint64_t result = (uint64_t)xmlRealloc(*(void **)(a1 + 40), 16LL * v4);
  if (result)
  {
    int v6 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 36) *= 2;
    *(void *)(a1 + 40) = result;
    goto LABEL_8;
  }

  return xmlVErrMemory((uint64_t *)a1, (uint64_t)"realloc failed");
}

uint64_t xmlWalkValidateList(uint64_t a1, uint64_t *a2)
{
  if (a1)
  {
    uint64_t v3 = *a2;
    int v4 = (xmlChar *)a2[1];
    uint64_t v5 = *(void *)(a1 + 16);
    if (v5)
    {
      int v6 = *(_DWORD *)(v5 + 80);
      if (v6 == 4)
      {
        int v14 = xmlStrdup((const xmlChar *)a2[1]);
        if (!v14)
        {
          xmlVErrMemory((uint64_t *)v3, (uint64_t)"IDREFS split");
          goto LABEL_41;
        }

        xmlNodePtr v15 = v14;
        unsigned int v16 = *v14;
        if (*v14)
        {
          int v17 = v14;
LABEL_27:
          while (1)
          {
            uint64_t v18 = v17;
            while (v16 > 0x20 || ((1LL << v16) & 0x100002601LL) == 0)
            {
              unsigned int v19 = *++v18;
              unsigned int v16 = v19;
            }

            *uint64_t v18 = 0;
            if (!xmlGetID(*(xmlDocPtr *)(v3 + 56), v17))
            {
              xmlErrValidNode( (uint64_t *)v3,  *(void *)(v5 + 40),  536,  (uint64_t)"IDREFS attribute %s references an unknown ID %s\n",  *(void *)(v5 + 16),  v17,  0LL);
              *(_DWORD *)(v3 + 6xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0;
            }

            if (!v16) {
              break;
            }
            *uint64_t v18 = v16;
            int v17 = v18;
            while (v16 <= 0x20)
            {
              if (((1LL << v16) & 0x100002600LL) == 0)
              {
                if (v16) {
                  goto LABEL_27;
                }
                goto LABEL_39;
              }

              unsigned int v20 = *++v17;
              unsigned int v16 = v20;
            }
          }
        }

xmlXIncludeCtxtPtr xmlXIncludeNewContext(xmlXIncludeCtxtPtr doc)
{
  if (doc)
  {
    xmlXIncludeCtxtPtr v1 = doc;
    doc = (xmlXIncludeCtxtPtr)xmlMalloc(0x78uLL);
    if (doc)
    {
      *(_OWORD *)doc = 0u;
      *((_OWORD *)doc + 1) = 0u;
      *((void *)doc + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
      *((_OWORD *)doc + 5) = 0u;
      *((_OWORD *)doc + 6) = 0u;
      *((_OWORD *)doc + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
      *((_OWORD *)doc + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0u;
      *((_OWORD *)doc + 2) = 0u;
      *(void *)doc = v1;
      *((void *)doc + 1) = 0LL;
      *((_DWORD *)doc + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0;
      *((void *)doc + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0LL;
      *((_DWORD *)doc + 20) = 0;
    }

    else
    {
      __xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  (uint64_t)v1,  0xBu,  2,  2,  0LL,  0,  (const xmlChar *)"creating XInclude context",  0LL,  0LL,  0,  0,  "Memory allocation failed : %s\n",  (char)"creating XInclude context");
      return 0LL;
    }
  }

  return doc;
}

_DWORD *xmlXIncludeErrMemory(uint64_t a1, uint64_t a2, const xmlChar *a3)
{
  if (a1) {
    ++*(_DWORD *)(a1 + 80);
  }
  return __xmlRaiseError( 0LL,  0LL,  0LL,  (void *)a1,  a2,  0xBu,  2,  2,  0LL,  0,  a3,  0LL,  0LL,  0,  0,  "Memory allocation failed : %s\n",  (char)a3);
}

void xmlXIncludeFreeContext(xmlXIncludeCtxtPtr ctxt)
{
  if (ctxt)
  {
    if (*((int *)ctxt + 16) >= 1)
    {
      do
        xmlXIncludeURLPop((uint64_t)ctxt);
      while (*((int *)ctxt + 16) > 0);
    }

    xmlValidCtxtPtr v2 = (void *)*((void *)ctxt + 9);
    if (v2) {
      xmlFree(v2);
    }
    int v3 = *((_DWORD *)ctxt + 3);
    if (v3 >= 1)
    {
      for (uint64_t i = 0LL; i < v3; ++i)
      {
        uint64_t v5 = *(void *)(*((void *)ctxt + 3) + 8 * i);
        if (v5)
        {
          xmlXIncludeFreeRef(v5);
          int v3 = *((_DWORD *)ctxt + 3);
        }
      }
    }

    int v6 = (void *)*((void *)ctxt + 3);
    if (v6) {
      xmlFree(v6);
    }
    int v7 = (void *)*((void *)ctxt + 5);
    if (v7)
    {
      int v8 = *((_DWORD *)ctxt + 8);
      if (v8 >= 1)
      {
        for (uint64_t j = 0LL; j < v8; ++j)
        {
          uint64_t v10 = *(void **)(*((void *)ctxt + 5) + 8 * j);
          if (v10)
          {
            xmlFree(v10);
            int v8 = *((_DWORD *)ctxt + 8);
          }
        }

        int v7 = (void *)*((void *)ctxt + 5);
      }

      xmlFree(v7);
    }

    int v11 = (void *)*((void *)ctxt + 6);
    if (v11)
    {
      int v12 = *((_DWORD *)ctxt + 8);
      if (v12 >= 1)
      {
        for (uint64_t k = 0LL; k < v12; ++k)
        {
          int v14 = *(void **)(*((void *)ctxt + 6) + 8 * k);
          if (v14)
          {
            xmlFree(v14);
            int v12 = *((_DWORD *)ctxt + 8);
          }
        }

        int v11 = (void *)*((void *)ctxt + 6);
      }

      xmlFree(v11);
    }

    xmlNodePtr v15 = (void *)*((void *)ctxt + 12);
    if (v15) {
      xmlFree(v15);
    }
    xmlFree(ctxt);
  }

void xmlXIncludeURLPop(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 64);
  unsigned int v2 = v1 - 1;
  if (v1 >= 1)
  {
    *(_DWORD *)(a1 + 6xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v2;
    uint64_t v3 = *(void *)(a1 + 72);
    if (v1 == 1) {
      uint64_t v4 = 0LL;
    }
    else {
      uint64_t v4 = *(void *)(v3 + 8LL * (v1 - 2));
    }
    *(void *)(a1 + 56) = v4;
    uint64_t v5 = *(void **)(v3 + 8LL * v2);
    *(void *)(v3 + 8LL * v2) = 0LL;
    if (v5) {
      xmlFree(v5);
    }
  }

void xmlXIncludeFreeRef(uint64_t a1)
{
  unsigned int v2 = *(xmlDoc **)(a1 + 16);
  if (v2) {
    xmlFreeDoc(v2);
  }
  if (*(void *)a1) {
    xmlFree(*(void **)a1);
  }
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3) {
    xmlFree(v3);
  }
  xmlFree((void *)a1);
}

int xmlXIncludeSetFlags(xmlXIncludeCtxtPtr ctxt, int flags)
{
  if (!ctxt) {
    return -1;
  }
  int result = 0;
  *((_DWORD *)ctxt + 22) = flags;
  return result;
}

int xmlXIncludeProcessTreeFlagsData(xmlNodePtr tree, int flags, void *data)
{
  if (!tree) {
    return -1;
  }
  if (tree->type == XML_NAMESPACE_DECL) {
    return -1;
  }
  doc = tree->doc;
  if (!doc) {
    return -1;
  }
  xmlXIncludeCtxtPtr v7 = xmlXIncludeNewContext(doc);
  if (!v7) {
    return -1;
  }
  uint64_t v8 = (uint64_t)v7;
  *((void *)v7 + 1xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = data;
  *((void *)v7 + 12) = xmlStrdup(tree->doc->URL);
  *(_DWORD *)(v8 + 88) = flags;
  int v9 = xmlXIncludeDoProcess(v8, (uint64_t)tree->doc, (uint64_t)tree, 0);
  int v10 = v9;
  if ((v9 & 0x80000000) == 0)
  {
    else {
      int v10 = v9;
    }
  }

  xmlXIncludeFreeContext((xmlXIncludeCtxtPtr)v8);
  return v10;
}

uint64_t xmlXIncludeDoProcess(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v4 = 0xFFFFFFFFLL;
  if (!a2 || !a3) {
    return v4;
  }
  if (*(_DWORD *)(a3 + 8) == 18) {
    return 0xFFFFFFFFLL;
  }
  int v9 = (void *)a1;
  if (a4)
  {
    if (!*(void *)(a3 + 24)) {
      return 0xFFFFFFFFLL;
    }
  }

  unint64_t v4 = *(void *)(a2 + 136);
  if (!v4) {
    goto LABEL_17;
  }
  int v10 = *(_DWORD *)(a1 + 64);
  if (v10 >= 41)
  {
    xmlXIncludeErr(a1, 0LL, 1600, "detected a recursion in %s\n", *(const xmlChar **)(a2 + 136));
    return 0xFFFFFFFFLL;
  }

  int v11 = *(void **)(a1 + 72);
  if (!v11)
  {
    v9[8] = 0x400000000LL;
    int v11 = xmlMalloc(0x20uLL);
    v9[9] = v11;
    if (!v11)
    {
LABEL_414:
      xmlXIncludeErrMemory((uint64_t)v9, 0LL, (const xmlChar *)"adding URL");
      return 0xFFFFFFFFLL;
    }

    int v10 = *((_DWORD *)v9 + 16);
  }

  uint64_t v12 = *((int *)v9 + 17);
  if (v10 >= (int)v12)
  {
    *((_DWORD *)v9 + 17) = 2 * v12;
    unsigned int v13 = xmlRealloc(v11, 16 * v12);
    v9[9] = v13;
    if (!v13) {
      goto LABEL_414;
    }
  }

  int v14 = xmlStrdup((const xmlChar *)v4);
  unint64_t v4 = *((int *)v9 + 16);
  *(void *)(v9[9] + 8 * vxmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v14;
  v9[7] = v14;
  *((_DWORD *)v9 + 16) = v4 + 1;
  if ((v4 & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
LABEL_17:
  uint64_t v207 = a2;
  uint64_t v15 = *((int *)v9 + 3);
  uint64_t v16 = a3;
  if (a4) {
    uint64_t v16 = *(void *)(a3 + 24);
  }
  while (1)
  {
    if (v16)
    {
      if (*(_DWORD *)(v16 + 8) == 1)
      {
        uint64_t v17 = *(void *)(v16 + 72);
        if (v17)
        {
          if (xmlStrEqual(*(const xmlChar **)(v17 + 16), (const xmlChar *)"http://www.w3.org/2003/XInclude")
            || xmlStrEqual( *(const xmlChar **)(*(void *)(v16 + 72) + 16LL),  (const xmlChar *)"http://www.w3.org/2001/XInclude"))
          {
            break;
          }
        }
      }
    }

LABEL_368:
          if (*((_DWORD *)v9 + 3) > (int)v15)
          {
            uint64_t v180 = *(void *)(v9[3] + 8 * v58);
            uint64_t v181 = *(xmlDoc **)(v180 + 16);
            if (v181)
            {
              if (*(int *)(v180 + 44) <= 1)
              {
                xmlFreeDoc(v181);
                *(void *)(*(void *)(v9[3] + 8 * v58) + 16LL) = 0LL;
              }
            }
          }

          ((void (*)(xmlChar *))xmlFree)(v82);
          goto LABEL_373;
        }

LABEL_347:
        *(void *)(*(void *)(v9[3] + 8 * v58) + 32LL) = xmlXIncludeCopyNodeList( (xmlDoc *)*v9,  (uint64_t)myDoc,  myDoc->children);
        goto LABEL_348;
      }

      str1 = v82;
      if (*((int *)v9 + 3) >= 1)
      {
        uint64_t v102 = 0LL;
        while (1)
        {
          if (xmlStrEqual(str1, **(const xmlChar ***)(v9[3] + 8 * v102)))
          {
            myDoc = *(xmlDoc **)(*(void *)(v9[3] + 8 * v102) + 16LL);
            if (myDoc) {
              break;
            }
          }
        }

LABEL_346:
        int v82 = (xmlChar *)str1;
        if (v78) {
          goto LABEL_166;
        }
        goto LABEL_347;
      }

LABEL_203:
      int v103 = *((_DWORD *)v9 + 22);
      if (v78) {
        *((_DWORD *)v9 + 22) = v103 | 2;
      }
      xmlInitParser();
      xmlParserCtxtPtr v104 = xmlNewParserCtxt();
      if (v104)
      {
        uint64_t v105 = v104;
        v104->_private = (void *)v9[13];
        if (*v9)
        {
          v106 = *(xmlDict **)(*v9 + 152LL);
          if (v106)
          {
            if (v105->dict)
            {
              xmlDictFree(v105->dict);
              v106 = *(xmlDict **)(*v9 + 152LL);
            }

            v105->dict = v106;
            xmlDictReference(v106);
          }
        }

        xmlCtxtUseOptions(v105, *((_DWORD *)v9 + 22) | 4);
        v107 = (const char *)str1;
        ExternalEntity = xmlLoadExternalEntity(v107, 0LL, v105);
        if (ExternalEntity)
        {
          inputPush(v105, ExternalEntity);
          if (!v105->directory) {
            v105->directory = xmlParserGetDirectory(v107);
          }
          v105->loadsubset |= 2u;
          xmlParseDocument(v105);
          myDoc = v105->myDoc;
          if (v105->wellFormed)
          {
            xmlFreeParserCtxt(v105);
            *((_DWORD *)v9 + 22) = v103;
            if (myDoc)
            {
              *(void *)(*(void *)(v9[3] + 8 * v58) + 16LL) = myDoc;
              if (!xmlStrEqual(str1, myDoc->URL))
              {
                ((void (*)(const xmlChar *))xmlFree)(str1);
                str1 = xmlStrdup(myDoc->URL);
              }

              uint64_t v109 = v54;
              do
              {
              }

              while (!xmlStrEqual(str1, **(const xmlChar ***)(v9[3] + 8 * v109++)));
              uint64_t v111 = *(void *)(v9[3] + 8 * v58);
              ++*(_DWORD *)(v111 + 44);
LABEL_224:
              intSubset = myDoc->intSubset;
              uint64_t v113 = (xmlDoc *)*v9;
              xmlDtdPtr v114 = *(xmlDtdPtr *)(*v9 + 80LL);
              if (v114) {
                goto LABEL_226;
              }
              xmlNodePtr RootElement = xmlDocGetRootElement((const xmlDoc *)*v9);
              if (!RootElement || (xmlDtdPtr v157 = xmlCreateIntSubset(v113, RootElement->name, 0LL, 0LL)) == 0LL)
              {
LABEL_334:
                xmlXIncludeCtxtPtr v158 = xmlXIncludeNewContext(myDoc);
                if (v158)
                {
                  xmlXIncludeCtxtPtr v159 = v158;
                  *((void *)v158 + 1xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = v9[13];
                  uint64_t v160 = *((int *)v9 + 4);
                  *((_DWORD *)v158 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v160;
                  *((_DWORD *)v158 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = *((_DWORD *)v9 + 3);
                  uint64_t v161 = xmlMalloc(8 * v160);
                  *((void *)v159 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = v161;
                  if (v161)
                  {
                    *((void *)v159 + 8) = v9[8];
                    *((void *)v159 + 9) = v9[9];
                    *((void *)v159 + 12) = xmlStrdup((const xmlChar *)v9[12]);
                    uint64_t v162 = *((unsigned int *)v9 + 3);
                    *((_DWORD *)v159 + 2) = v162;
                    if ((int)v162 >= 1)
                    {
                      uint64_t v163 = 0LL;
                      uint64_t v164 = *((void *)v159 + 3);
                      uint64_t v165 = 8 * v162;
                      do
                      {
                        *(void *)(v164 + v16xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = *(void *)(v9[3] + v163);
                        uint64_t v164 = *((void *)v159 + 3);
                        ++*(_DWORD *)(*(void *)(v164 + v163) + 44LL);
                        v163 += 8LL;
                      }

                      while (v165 != v163);
                    }

                    *((_DWORD *)v159 + 22) = *((_DWORD *)v9 + 22);
                    *((void *)v159 + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v9[14];
                    xmlNodePtr v166 = xmlDocGetRootElement(myDoc);
                    xmlXIncludeDoProcess(v159, myDoc, v166, 0LL);
                    v9[14] = *((void *)v159 + 14);
                    uint64_t v167 = *((unsigned int *)v9 + 3);
                    if ((int)v167 >= 1)
                    {
                      uint64_t v168 = 0LL;
                      uint64_t v169 = 8 * v167;
                      do
                      {
                        uint64_t v170 = *((void *)v159 + 3);
                        --*(_DWORD *)(*(void *)(v170 + v168) + 44LL);
                        *(void *)(v170 + v168) = 0LL;
                        v168 += 8LL;
                      }

                      while (v169 != v168);
                    }

                    v9[9] = *((void *)v159 + 9);
                    *((_DWORD *)v9 + 17) = *((_DWORD *)v159 + 17);
                    *((void *)v159 + 8) = 0LL;
                    *((void *)v159 + 9) = 0LL;
                    xmlXIncludeFreeContext(v159);
                  }

                  else
                  {
                    xmlXIncludeErrMemory((uint64_t)v9, (uint64_t)myDoc, (const xmlChar *)"processing doc");
                    xmlFree(v159);
                  }
                }

                int v57 = v211;
                goto LABEL_346;
              }

              xmlDtdPtr v114 = v157;
              intSubset = myDoc->intSubset;
              if (intSubset)
              {
LABEL_226:
                entities = (xmlHashTable *)intSubset->entities;
                if (entities)
                {
                  int data = v113;
                  v227 = v9;
                  xmlHashScan(entities, (xmlHashScanner)xmlXIncludeMergeEntity, &data);
                }
              }

              extSubset = myDoc->extSubset;
              if (extSubset)
              {
                if (extSubset->entities)
                {
                  int data = v113;
                  v227 = v9;
                  if (!xmlStrEqual(v114->ExternalID, extSubset->ExternalID)
                    && !xmlStrEqual(v114->SystemID, extSubset->SystemID))
                  {
                    xmlHashScan((xmlHashTablePtr)extSubset->entities, (xmlHashScanner)xmlXIncludeMergeEntity, &data);
                  }
                }
              }

              goto LABEL_334;
            }

LABEL_327:
            ((void (*)(const xmlChar *))xmlFree)(str1);
            if (!v78) {
              goto LABEL_282;
            }
            goto LABEL_237;
          }

          if (myDoc) {
            xmlFreeDoc(v105->myDoc);
          }
          v105->myDoc = 0LL;
        }

        xmlFreeParserCtxt(v105);
      }

      else
      {
        xmlXIncludeErrMemory((uint64_t)v9, 0LL, (const xmlChar *)"cannot allocate parser context");
      }

      *((_DWORD *)v9 + 22) = v103;
      goto LABEL_327;
    }

    if (xmlStrcmp(v65, (const xmlChar *)"-")) {
      unsigned int v72 = (const char *)v65;
    }
    else {
      unsigned int v72 = "./-";
    }
    xmlURIPtr v73 = xmlParseURI(v72);
    if (!v73) {
      goto LABEL_189;
    }
    char v74 = v73;
    char v75 = (const xmlChar *)v73->fragment;
    if (v75)
    {
      xmlXIncludeErr( (uint64_t)v9,  *(void *)(*(void *)(v9[3] + 8 * v58) + 24LL),  1606,  "fragment identifier forbidden for text: %s\n",  v75);
      xmlFreeURI(v74);
      goto LABEL_282;
    }

    char v91 = xmlSaveUri(v73);
    xmlFreeURI(v74);
    if (!v91)
    {
LABEL_189:
      uint64_t v88 = *(void *)(*(void *)(v9[3] + 8 * v58) + 24LL);
      uint64_t v89 = (uint64_t)v9;
      unsigned int v90 = (const xmlChar *)v72;
      goto LABEL_190;
    }

    if (!*v91)
    {
      xmlXIncludeErr( (uint64_t)v9,  *(void *)(*(void *)(v9[3] + 8 * v58) + 24LL),  1607,  "text serialization of document not available\n",  0LL);
      goto LABEL_280;
    }

    char v92 = (xmlChar *)v219;
    if (*((int *)v9 + 8) >= 1)
    {
      uint64_t v93 = 0LL;
      while (!xmlStrEqual(v91, *(const xmlChar **)(v9[6] + 8 * v93)))
      {
      }

      xmlNodePtr v124 = xmlNewText(*(const xmlChar **)(v9[5] + 8 * v93));
LABEL_273:
      *(void *)(*(void *)(v9[3] + 8 * v58) + 32LL) = v124;
      ((void (*)(xmlChar *))xmlFree)(v91);
      int v57 = v211;
LABEL_373:
      v9[12] = v213;
      goto LABEL_290;
    }

LABEL_184:
    uint64_t v94 = *(void *)(v9[3] + 8 * v58);
    if (v94
      && (uint64_t v95 = *(const xmlNode **)(v94 + 24)) != 0LL
      && (uint64_t v96 = xmlGetProp(v95, (const xmlChar *)"encoding")) != 0LL)
    {
      uint64_t v97 = v96;
      xmlCharEncoding v98 = xmlParseCharEncoding((const char *)v96);
      if (v98 == XML_CHAR_ENCODING_ERROR)
      {
        xmlXIncludeErr( (uint64_t)v9,  *(void *)(*(void *)(v9[3] + 8 * v58) + 24LL),  1610,  "encoding %s not supported\n",  v97);
        ((void (*)(const xmlChar *))xmlFree)(v97);
        goto LABEL_280;
      }

      xmlCharEncoding v99 = v98;
      ((void (*)(const xmlChar *))xmlFree)(v97);
    }

    else
    {
      xmlCharEncoding v99 = XML_CHAR_ENCODING_NONE;
    }

    int v119 = xmlNewParserCtxt();
    xmlParserInputPtr v120 = xmlLoadExternalEntity((const char *)v91, 0LL, v119);
    if (!v120) {
      goto LABEL_279;
    }
    xmlParserInputBufferPtr buf = v120->buf;
    if (!v120->buf)
    {
      xmlFreeInputStream(v120);
LABEL_279:
      xmlFreeParserCtxt(v119);
LABEL_280:
      xmlFreeFunc v117 = xmlFree;
      uint64_t v118 = v91;
LABEL_281:
      ((void (*)(xmlChar *))v117)(v118);
      goto LABEL_282;
    }

    input = v120;
    xmlValidCtxt ctxt = v119;
    obja = v91;
    encoder = buf->encoder;
    int v123 = buf;
    if (encoder) {
      xmlCharEncCloseFunc(encoder);
    }
    v123->encoder = xmlGetCharEncodingHandler(v99);
    xmlNodePtr v124 = xmlNewText(0LL);
    uint64_t v125 = 0LL;
    str1a = v123;
    while (1)
    {
LABEL_245:
      if (xmlParserInputBufferRead(v123, 128) < 1)
      {
        xmlFreeParserCtxt(ctxt);
        char v91 = obja;
        xmlXIncludeAddTxt((uint64_t)v9, v124->content, obja);
        xmlFreeInputStream(input);
        char v92 = (xmlChar *)v219;
        uint64_t v58 = v221;
        goto LABEL_273;
      }

      uint64_t v126 = xmlBufContent(v123->buffer);
      int v127 = v123;
      v128 = v126;
      int v129 = xmlBufLength((uint64_t)v127->buffer);
      if (v129 >= 1) {
        break;
      }
      uint64_t v135 = v125;
LABEL_262:
      int v123 = str1a;
      xmlBufShrink(str1a->buffer, v129);
      int v136 = 0;
      uint64_t v125 = v135;
LABEL_263:
      if (v136) {
        goto LABEL_264;
      }
    }

    int v130 = 0;
    while (2)
    {
      LODWORD(data) = 0;
      size_t v131 = v130;
      uint64_t v132 = &v128[v130];
      int v133 = xmlStringCurrentChar(0LL, v132, (int *)&data);
      if (v133 <= 255)
      {
        goto LABEL_259;
      }

      BOOL v134 = (v133 - 0x10000) >= 0x100000 && v133 >> 11 >= 0x1B;
      if (!v134 || (v133 - 57344) >> 1 < 0xFFF)
      {
LABEL_259:
        xmlNodeAddContentLen(v124, v132, (int)data);
        uint64_t v125 = 0LL;
        uint64_t v135 = 0LL;
        int v130 = (_DWORD)data + v131;
        continue;
      }

      break;
    }

    if (v129 - (int)v131 <= 3 && !(_DWORD)v125)
    {
      int v123 = str1a;
      xmlBufShrink(str1a->buffer, v131);
      int v136 = 6;
      uint64_t v125 = 1LL;
      goto LABEL_263;
    }

    xmlXIncludeErr( (uint64_t)v9,  *(void *)(*(void *)(v9[3] + 8 * v221) + 24LL),  1608,  "%s contains invalid char\n",  obja);
    xmlFreeParserCtxt(ctxt);
    int v123 = str1a;
    xmlFreeParserInputBuffer(str1a);
    xmlFree(obja);
    int v136 = 1;
LABEL_264:
    if (v136 == 6) {
      goto LABEL_245;
    }
LABEL_282:
    v9[12] = v213;
    char v92 = (xmlChar *)v219;
    uint64_t v138 = *((void *)basea + 3);
    int v57 = v211;
    uint64_t v139 = v221;
    if (!v138) {
      goto LABEL_289;
    }
    while (*(_DWORD *)(v138 + 8) != 1
         || !*(void *)(v138 + 72)
         || !xmlStrEqual(*(const xmlChar **)(v138 + 16), (const xmlChar *)"fallback")
         || !xmlStrEqual( *(const xmlChar **)(*(void *)(v138 + 72) + 16LL),  (const xmlChar *)"http://www.w3.org/2003/XInclude")
         && !xmlStrEqual( *(const xmlChar **)(*(void *)(v138 + 72) + 16LL),  (const xmlChar *)"http://www.w3.org/2001/XInclude"))
    {
      uint64_t v138 = *(void *)(v138 + 48);
      if (!v138) {
        goto LABEL_289;
      }
    }

    if (*(_DWORD *)(v138 + 8) == 18)
    {
LABEL_289:
      xmlXIncludeErr( (uint64_t)v9,  *(void *)(*(void *)(v9[3] + 8 * v139) + 24LL),  1604,  "could not load %s, and no fallback was found\n",  v225);
    }

    else if (*(void *)(v138 + 24))
    {
      int v140 = *((_DWORD *)v9 + 20);
      xmlXIncludeCtxtPtr v141 = xmlXIncludeNewContext((xmlDocPtr)*v9);
      if (!v141) {
        goto LABEL_289;
      }
      xmlXIncludeCtxtPtr v142 = v141;
      *((void *)v141 + 1xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = v9[13];
      *((void *)v141 + 12) = xmlStrdup((const xmlChar *)v9[12]);
      *((_DWORD *)v142 + 22) = *((_DWORD *)v9 + 22);
      *((void *)v142 + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v9[14];
      int v143 = xmlXIncludeDoProcess(v142, *v9, v138, 1LL);
      v9[14] = *((void *)v142 + 14);
      int v144 = *((_DWORD *)v9 + 20);
      xmlXIncludeFreeContext(v142);
      xmlNodePtr v145 = xmlDocCopyNodeList((xmlDocPtr)*v9, *(xmlNodePtr *)(v138 + 24));
      uint64_t v146 = v9[3];
      *(void *)(*(void *)(v146 + 8 * v221) + 32LL) = v145;
      uint64_t v147 = *(void *)(v146 + 8 * v221);
      if (!*(void *)(v147 + 32)) {
        *(_DWORD *)(v147 + 52) = 1;
      }
      *(_DWORD *)(v147 + 48) = 1;
      BOOL v148 = v144 <= v140;
      int v57 = v211;
      char v92 = (xmlChar *)v219;
      uint64_t v139 = v221;
      if (!v148 || v143 < 0) {
        goto LABEL_289;
      }
    }

    else
    {
      uint64_t v149 = v9[3];
      *(void *)(*(void *)(v149 + 8 * v221) + 32LL) = 0LL;
      *(void *)(*(void *)(v149 + 8 * v221) + 48LL) = 0x100000001LL;
    }

LABEL_290:
    xmlFree(v225);
    if (v92) {
      xmlFree(v92);
    }
    xmlFree(v57);
    uint64_t v62 = v214;
    LODWORD(vxmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v212;
    if (v214) {
LABEL_293:
    }
      ((void (*)(xmlChar *))xmlFree)(v62);
LABEL_294:
    unint64_t v4 = (v4 + 1);
    ++v15;
    int v53 = *((_DWORD *)v9 + 3);
    ++v54;
    break;
  }

LABEL_378:
  uint64_t v183 = *((int *)v9 + 2);
  if ((int)v183 < v53)
  {
    while (2)
    {
      uint64_t v184 = v9[3];
      uint64_t v185 = *(void *)(v184 + 8 * v183);
      if (*(void *)(v185 + 32))
      {
        if (v183 < 0) {
          goto LABEL_411;
        }
LABEL_384:
        uint64_t v186 = *(void *)(v184 + 8LL * v183);
        uint64_t v187 = *(void *)(v186 + 24);
        if (v187 && *(_DWORD *)(v187 + 8) != 18)
        {
          v188 = *(xmlNode **)(v186 + 32);
          *(void *)(v186 + 32) = 0LL;
          uint64_t v189 = *(void *)(v184 + 8LL * v183);
          *(_DWORD *)(v189 + 52) = 0;
          uint64_t v190 = *(void *)(v187 + 40);
          if (!v190 || *(_DWORD *)(v190 + 8) == 1) {
            goto LABEL_394;
          }
          if (v188)
          {
            unsigned int v191 = 0;
            char v192 = v188;
            do
            {
              if (v192->type == XML_ELEMENT_NODE) {
                ++v191;
              }
              char v192 = v192->next;
            }

            while (v192);
            if (v191 < 2)
            {
LABEL_394:
              if ((*((_BYTE *)v9 + 89) & 0x80) == 0) {
                goto LABEL_395;
              }
              if (v188)
              {
                do
                {
                  xmlNodePtr next = v188->next;
                  xmlAddPrevSibling((xmlNodePtr)v187, v188);
                  v188 = next;
                }

                while (next);
              }

LABEL_405:
              xmlUnlinkNode((xmlNodePtr)v187);
              xmlFreeNode((xmlNodePtr)v187);
              goto LABEL_411;
            }

            uint64_t v199 = *(void *)(v189 + 24);
            uint64_t v200 = (uint64_t)v9;
            int v201 = 1611;
            v202 = "XInclude error: would result in multiple root nodes\n";
LABEL_410:
            xmlXIncludeErr(v200, v199, v201, v202, 0LL);
            xmlFreeNodeList(v188);
            goto LABEL_411;
          }

          if ((*((_BYTE *)v9 + 89) & 0x80) != 0) {
            goto LABEL_405;
          }
LABEL_395:
          if (*(_DWORD *)(v189 + 48)) {
            xmlUnsetProp((xmlNodePtr)v187, (const xmlChar *)"href");
          }
          *(_DWORD *)(v187 + 8) = 19;
          uint64_t v193 = *(xmlNode **)(v187 + 24);
          if (v193)
          {
            do
            {
              int v194 = v193->next;
              xmlUnlinkNode(v193);
              xmlFreeNode(v193);
              uint64_t v193 = v194;
            }

            while (v194);
          }

          xmlNodePtr v195 = xmlNewDocNode(*(xmlDocPtr *)(v187 + 64), *(xmlNsPtr *)(v187 + 72), *(const xmlChar **)(v187 + 16), 0LL);
          if (!v195)
          {
            uint64_t v199 = *(void *)(*(void *)(v9[3] + 8LL * v183) + 24LL);
            uint64_t v200 = (uint64_t)v9;
            int v201 = 1609;
            v202 = "failed to build node\n";
            goto LABEL_410;
          }

          uint64_t v196 = v195;
          v195->xmlXPathObjectType type = XML_XINCLUDE_END;
          xmlAddNextSibling((xmlNodePtr)v187, v195);
          if (v188)
          {
            do
            {
              v197 = v188->next;
              xmlAddPrevSibling(v196, v188);
              v188 = v197;
            }

            while (v197);
          }
        }
      }

      else if ((v183 & 0x8000000000000000LL) == 0 && *(_DWORD *)(v185 + 52))
      {
        goto LABEL_384;
      }

LABEL_411:
      continue;
    }
  }

  if (*(void *)(v207 + 136)) {
    xmlXIncludeURLPop((uint64_t)v9);
  }
  return v4;
}

int xmlXIncludeProcessFlagsData(xmlDocPtr doc, int flags, void *data)
{
  if (doc && (xmlNodePtr RootElement = xmlDocGetRootElement(doc)) != 0LL) {
    return xmlXIncludeProcessTreeFlagsData(RootElement, flags, data);
  }
  else {
    return -1;
  }
}

int xmlXIncludeProcessFlags(xmlDocPtr doc, int flags)
{
  return xmlXIncludeProcessFlagsData(doc, flags, 0LL);
}

int xmlXIncludeProcess(xmlDocPtr doc)
{
  return xmlXIncludeProcessFlagsData(doc, 0, 0LL);
}

int xmlXIncludeProcessTreeFlags(xmlNodePtr tree, int flags)
{
  if (!tree) {
    return -1;
  }
  if (tree->type == XML_NAMESPACE_DECL) {
    return -1;
  }
  doc = tree->doc;
  if (!doc) {
    return -1;
  }
  xmlXIncludeCtxtPtr v5 = xmlXIncludeNewContext(doc);
  if (!v5) {
    return -1;
  }
  uint64_t v6 = (uint64_t)v5;
  *((void *)v5 + 12) = xmlNodeGetBase(tree->doc, tree);
  *(_DWORD *)(v6 + 88) = flags;
  int v7 = xmlXIncludeDoProcess(v6, (uint64_t)tree->doc, (uint64_t)tree, 0);
  int v8 = v7;
  if ((v7 & 0x80000000) == 0)
  {
    else {
      int v8 = v7;
    }
  }

  xmlXIncludeFreeContext((xmlXIncludeCtxtPtr)v6);
  return v8;
}

int xmlXIncludeProcessTree(xmlNodePtr tree)
{
  return xmlXIncludeProcessTreeFlags(tree, 0);
}

int xmlXIncludeProcessNode(xmlXIncludeCtxtPtr ctxt, xmlNodePtr tree)
{
  if (!tree) {
    return -1;
  }
  if (tree->type == XML_NAMESPACE_DECL) {
    return -1;
  }
  int result = -1;
  if (ctxt)
  {
    doc = tree->doc;
    if (doc)
    {
      int result = xmlXIncludeDoProcess((uint64_t)ctxt, (uint64_t)doc, (uint64_t)tree, 0);
    }
  }

  return result;
}

_DWORD *xmlXIncludeErr(uint64_t a1, uint64_t a2, int a3, const char *a4, const xmlChar *a5)
{
  return __xmlRaiseError(0LL, 0LL, 0LL, (void *)a1, a2, 0xBu, a3, 2, 0LL, 0, a5, 0LL, 0LL, 0, 0, a4, (char)a5);
}

xmlChar *xmlXIncludeGetProp(uint64_t a1, xmlNode *node, const xmlChar *a3)
{
  int result = xmlGetNsProp(node, (const xmlChar *)"http://www.w3.org/2003/XInclude", a3);
  if (!result)
  {
    if (!*(_DWORD *)(a1 + 84)) {
      return xmlGetProp(node, a3);
    }
    int result = xmlGetNsProp(node, (const xmlChar *)"http://www.w3.org/2001/XInclude", a3);
    if (!result) {
      return xmlGetProp(node, a3);
    }
  }

  return result;
}

xmlNodePtr xmlXIncludeCopyNodeList(xmlDoc *a1, uint64_t a2, xmlNode *a3)
{
  xmlNodePtr v3 = 0LL;
  if (a1)
  {
    if (a2)
    {
      xmlXIncludeCtxtPtr v5 = a3;
      if (a3)
      {
        xmlNodePtr v7 = 0LL;
        xmlNodePtr v3 = 0LL;
        do
        {
          xmlNodePtr v8 = xmlXIncludeCopyNode(a1, a2, v5);
          if (v8)
          {
            if (v3)
            {
              v7->xmlNodePtr next = v8;
              v8->prev = v7;
            }

            else
            {
              xmlNodePtr v3 = v8;
            }
          }

          else
          {
            xmlNodePtr v8 = v7;
          }

          xmlXIncludeCtxtPtr v5 = v5->next;
          xmlNodePtr v7 = v8;
        }

        while (v5);
      }
    }
  }

  return v3;
}

xmlNodePtr xmlXIncludeCopyXPointer(uint64_t *a1, xmlDoc *a2, uint64_t a3, int *a4)
{
  uint64_t v4 = a3;
  if (!a3) {
    uint64_t v4 = *a1;
  }
  xmlNodePtr v7 = 0LL;
  if (!a4 || !a2 || !v4) {
    return v7;
  }
  int v8 = *a4;
  if (*a4 == 7)
  {
    uint64_t v20 = (int *)*((void *)a4 + 5);
    if (!v20 || *v20 < 1) {
      return 0LL;
    }
    uint64_t v21 = 0LL;
    uint64_t v22 = 0LL;
    xmlNodePtr v7 = 0LL;
    while (1)
    {
      int v23 = (xmlNode *)xmlXIncludeCopyXPointer(a1, a2, v4, *(void *)(*((void *)v20 + 1) + 8 * v21));
      BOOL v24 = v23;
      if (v22) {
        break;
      }
      xmlNodePtr v7 = v23;
      if (v23) {
        goto LABEL_41;
      }
      uint64_t v22 = 0LL;
LABEL_42:
      if (++v21 >= *v20) {
        return v7;
      }
    }

    xmlAddNextSibling(v22, v23);
    BOOL v24 = v22;
    do
    {
LABEL_41:
      uint64_t v22 = v24;
      BOOL v24 = v24->next;
    }

    while (v24);
    goto LABEL_42;
  }

  if (v8 != 6)
  {
    if (v8 == 1)
    {
      int v9 = (int *)*((void *)a4 + 1);
      if (v9)
      {
        if (*v9 >= 1)
        {
          uint64_t v10 = 0LL;
          int v11 = 0LL;
          xmlNodePtr v7 = 0LL;
          while (1)
          {
            uint64_t v12 = *(void *)(*((void *)v9 + 1) + 8 * v10);
            if (v12)
            {
              unsigned int v13 = *(_DWORD *)(v12 + 8);
              if (v13 > 0x13) {
                goto LABEL_30;
              }
              if (((1 << v13) & 0x7DC04) == 0)
              {
                if (v13 != 19)
                {
LABEL_30:
                  int v19 = xmlXIncludeCopyNode(a2, v4, (xmlNodePtr)v12);
                  xmlNodePtr next = v19;
                  if (v11)
                  {
                    xmlAddNextSibling(v11, v19);
                    if (v11->next) {
                      xmlNodePtr next = v11->next;
                    }
                    else {
                      xmlNodePtr next = v11;
                    }
                  }

                  else
                  {
                    xmlNodePtr v7 = v19;
                  }

                  goto LABEL_16;
                }

                uint64_t v15 = *(void *)(v12 + 48);
                if (v15)
                {
                  while (1)
                  {
                    int v16 = *(_DWORD *)(v15 + 8);
                    uint64_t v18 = xmlXIncludeCopyNode(a2, v4, (xmlNodePtr)v15);
                    xmlNodePtr next = v18;
                    if (v11) {
                      xmlNodePtr next = xmlAddNextSibling(v11, v18);
                    }
                    else {
                      xmlNodePtr v7 = v18;
                    }
                    uint64_t v15 = *(void *)(v15 + 48);
                    int v11 = next;
                    if (!v15) {
                      goto LABEL_16;
                    }
                  }
                }
              }
            }

            xmlNodePtr next = v11;
LABEL_16:
            ++v10;
            int v11 = next;
            if (v10 >= *v9) {
              return v7;
            }
          }
        }
      }
    }

    return 0LL;
  }

  int v67 = 0;
  uint64_t v25 = *((void *)a4 + 5);
  if (!v25 || *(_DWORD *)(v25 + 8) == 18) {
    return 0LL;
  }
  uint64_t v26 = *((void *)a4 + 7);
  if (!v26) {
    return xmlDocCopyNode(*((xmlNodePtr *)a4 + 5), a2, 1);
  }
  if (*(_DWORD *)(v26 + 8) == 18) {
    return 0LL;
  }
  int v28 = 0;
  int v29 = 0;
  int v30 = 0;
  uint64_t v31 = 0LL;
  xmlNodePtr v32 = 0LL;
  xmlNodePtr v7 = 0LL;
  int v64 = a4[16];
  int v65 = a4[12];
  char v66 = 1;
  uint64_t NthChild = *((void *)a4 + 5);
  while (2)
  {
    uint64_t v34 = v26;
    int v35 = v29;
    int v29 = v28;
    xmlNodePtr Sibling = v32;
    while (1)
    {
      if (v29 < 0)
      {
        do
        {
          uint64_t v37 = v7;
          xmlNodePtr v7 = xmlDocCopyNode(v31, a2, 2);
          xmlAddChild(v7, v37);
          uint64_t v31 = v31->parent;
          int v38 = v67;
          int v29 = ++v67;
        }

        while (v38 < -1);
        int v30 = 0;
        xmlNodePtr Sibling = v7;
      }

      else if (v29 < v30)
      {
        do
        {
          xmlNodePtr Sibling = Sibling->parent;
          --v30;
        }

        while (v29 < v30);
        int v30 = v29;
      }

      if (NthChild == v34) {
        break;
      }
      if (NthChild != v25)
      {
        unsigned int v39 = *(_DWORD *)(NthChild + 8);
        BOOL v45 = v39 > 0x14;
        int v40 = (1 << v39) & 0x1BC044;
        if (v45 || v40 == 0)
        {
          int v42 = xmlDocCopyNode((xmlNodePtr)NthChild, a2, 2);
          if (v42)
          {
            if (v67 == v30)
            {
              xmlNodePtr Sibling = xmlAddNextSibling(Sibling, v42);
            }

            else
            {
              xmlNodePtr Sibling = xmlAddChild(Sibling, v42);
              int v30 = v67;
            }
          }
        }

        goto LABEL_83;
      }

      if ((*(_DWORD *)(v25 + 8) - 3) <= 1)
      {
        uint64_t v43 = *(void *)(v25 + 80);
        if (v43)
        {
          int v44 = v65;
          LODWORD(v46) = v65 - 1;
          BOOL v45 = v65 <= 1;
          if (v65 > 1) {
            int v44 = 0;
          }
          int v65 = v44;
          if (v45) {
            uint64_t v46 = 0LL;
          }
          else {
            uint64_t v46 = v46;
          }
          xmlNodePtr v47 = xmlNewDocText(a2, (const xmlChar *)(v43 + v46));
        }

        else
        {
          xmlNodePtr v47 = xmlNewDocTextLen(a2, 0LL, 0);
        }

        xmlNodePtr v7 = v47;
        uint64_t v31 = *(xmlNode **)(v25 + 40);
LABEL_82:
        xmlNodePtr Sibling = v7;
LABEL_83:
        uint64_t v48 = xmlXPtrAdvanceNode(NthChild, &v67);
        int v29 = v67;
        if (!(v66 & 1 | (v67 < v35))) {
          return v7;
        }
        uint64_t NthChild = v48;
        goto LABEL_85;
      }

      xmlNodePtr v7 = xmlDocCopyNode((xmlNodePtr)v25, a2, 2);
      uint64_t v31 = *(xmlNode **)(v25 + 40);
      if (v65 < 2) {
        goto LABEL_82;
      }
      uint64_t NthChild = xmlXIncludeGetNthChild(v25, v65 - 1);
      int v65 = 0;
      int v29 = 1;
      int v67 = 1;
      xmlNodePtr Sibling = v7;
      int v30 = 1;
LABEL_85:
      if (!NthChild) {
        return v7;
      }
    }

    if (*(_DWORD *)(v34 + 8) != 3)
    {
      int v49 = xmlDocCopyNode((xmlNodePtr)v34, a2, 2);
      xmlNodePtr v32 = v49;
      if (v7)
      {
        if (v67 == v30)
        {
          xmlNodePtr v32 = xmlAddNextSibling(Sibling, v49);
        }

        else
        {
          xmlNodePtr v32 = xmlAddChild(Sibling, v49);
          int v30 = v67;
        }
      }

      else
      {
        uint64_t v31 = *(xmlNode **)(v34 + 40);
        xmlNodePtr v7 = v49;
      }

      if (v64 >= 2)
      {
        unsigned int v50 = v32;
        uint64_t v51 = xmlXIncludeGetNthChild(v34, v64 - 1);
        xmlNodePtr v32 = v50;
        uint64_t v26 = v51;
        int v64 = 0;
      }

      else
      {
        uint64_t v26 = v34;
      }

      if (v34 == v25 && v65 >= 2)
      {
        __int16 v52 = v32;
        uint64_t v53 = xmlXIncludeGetNthChild(v25, v65 - 1);
        xmlNodePtr v32 = v52;
        uint64_t NthChild = v53;
        int v65 = 0;
      }

      else
      {
        uint64_t NthChild = *(void *)(v34 + 24);
      }

      int v28 = v67 + 1;
      char v66 = 0;
      ++v67;
      if (!NthChild) {
        return v7;
      }
      continue;
    }

    break;
  }

  uint64_t v54 = *(void *)(v34 + 80);
  if (v54)
  {
    BOOL v55 = v34 == v25;
    BOOL v56 = v65 > 1;
    BOOL v57 = !v55 || !v56;
    if (v55 && v56) {
      uint64_t v58 = (v65 - 1);
    }
    else {
      uint64_t v58 = 0LL;
    }
    int v59 = (const xmlChar *)(v54 + v58);
    if (v57) {
      int v60 = 0;
    }
    else {
      int v60 = v65 - 1;
    }
    int v61 = v64 - v60;
    uint64_t v62 = a2;
  }

  else
  {
    uint64_t v62 = a2;
    int v59 = 0LL;
    int v61 = 0;
  }

  int v63 = xmlNewDocTextLen(v62, v59, v61);
  if (!v7) {
    return v63;
  }
  if (v67 == v30) {
    xmlAddNextSibling(Sibling, v63);
  }
  else {
    xmlAddChild(Sibling, v63);
  }
  return v7;
}

uint64_t xmlXIncludeMergeEntity(uint64_t result, uint64_t a2)
{
  if (result && a2)
  {
    xmlNodePtr v3 = *(xmlDoc **)a2;
    uint64_t v2 = *(void *)(a2 + 8);
    if (v2 && v3 != 0LL)
    {
      uint64_t v5 = result;
      int v6 = *(_DWORD *)(result + 92);
      if ((v6 - 4) >= 3)
      {
        xmlEntityPtr v7 = xmlAddDocEntity( v3,  *(const xmlChar **)(result + 16),  v6,  *(const xmlChar **)(result + 96),  *(const xmlChar **)(result + 104),  *(const xmlChar **)(result + 80));
        if (v7)
        {
          xmlEntityPtr v8 = v7;
          int result = *(void *)(v5 + 120);
          if (result)
          {
            int result = (uint64_t)xmlStrdup((const xmlChar *)result);
            v8->xmlURIPtr URI = (const xmlChar *)result;
          }

          return result;
        }

        int result = (uint64_t)xmlGetDocEntity(v3, *(const xmlChar **)(v5 + 16));
        if (!result) {
          return result;
        }
        unsigned int v9 = *(_DWORD *)(v5 + 92);
        if (v9 != *(_DWORD *)(result + 92)) {
          goto LABEL_21;
        }
        uint64_t v10 = *(const xmlChar **)(v5 + 104);
        if ((!v10 || (int v11 = *(const xmlChar **)(result + 104)) == 0LL)
          && ((v10 = *(const xmlChar **)(v5 + 96)) == 0LL || (int v11 = *(const xmlChar **)(result + 96)) == 0LL)
          && ((v10 = *(const xmlChar **)(v5 + 80)) == 0LL || (int v11 = *(const xmlChar **)(result + 80)) == 0LL)
          || (int result = xmlStrEqual(v10, v11), !(_DWORD)result))
        {
          unsigned int v9 = *(_DWORD *)(v5 + 92);
LABEL_21:
          if (v9 > 6 || ((1 << v9) & 0x76) == 0) {
            return (uint64_t)xmlXIncludeErr( v2,  v5,  1602,  "mismatch in redefinition of entity %s\n",  *(const xmlChar **)(v5 + 16));
          }
        }
      }
    }
  }

  return result;
}

xmlNodePtr xmlXIncludeCopyNode(xmlDocPtr doc, uint64_t a2, xmlNodePtr node)
{
  xmlElementType type = node->type;
  if (type == XML_DTD_NODE) {
    return 0LL;
  }
  if (type == XML_DOCUMENT_NODE) {
    return (xmlNodePtr)xmlXIncludeCopyNodeList(doc, a2, node->children);
  }
  return xmlDocCopyNode(node, doc, 1);
}

uint64_t xmlXIncludeGetNthChild(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 8) == 18) {
    return 0LL;
  }
  uint64_t result = *(void *)(a1 + 24);
  if ((a2 & 0x80000000) == 0)
  {
    int v3 = 0;
    do
    {
      if (!result) {
        break;
      }
      unsigned int v4 = *(_DWORD *)(result + 8);
      BOOL v5 = v4 > 0xD;
      int v6 = (1 << v4) & 0x2202;
      if (!v5 && v6 != 0 && ++v3 == a2) {
        break;
      }
      uint64_t result = *(void *)(result + 48);
    }

    while (v3 <= a2);
  }

  return result;
}

xmlChar *xmlXIncludeAddTxt(uint64_t a1, xmlChar *cur, const xmlChar *a3)
{
  int v6 = *(_DWORD *)(a1 + 36);
  if (!v6)
  {
    *(_DWORD *)(a1 + 36) = 4;
    xmlEntityPtr v7 = xmlMalloc(0x20uLL);
    *(void *)(a1 + 40) = v7;
    if (!v7) {
      return (xmlChar *)xmlXIncludeErrMemory(a1, 0LL, (const xmlChar *)"processing text");
    }
    xmlEntityPtr v8 = xmlMalloc(8LL * *(int *)(a1 + 36));
    *(void *)(a1 + 48) = v8;
    if (!v8) {
      return (xmlChar *)xmlXIncludeErrMemory(a1, 0LL, (const xmlChar *)"processing text");
    }
    int v6 = *(_DWORD *)(a1 + 36);
  }

  if (*(_DWORD *)(a1 + 32) < v6
    || (int v9 = 2 * v6,
        *(_DWORD *)(a1 + 36) = v9,
        uint64_t v10 = xmlRealloc(*(void **)(a1 + 40), 8LL * v9),
        (*(void *)(a1 + 40) = v10) != 0LL)
    && (int v11 = xmlRealloc(*(void **)(a1 + 48), 8LL * *(int *)(a1 + 36)), (*(void *)(a1 + 48) = v11) != 0LL))
  {
    *(void *)(*(void *)(a1 + 40) + 8LL * *(int *)(a1 + 32)) = xmlStrdup(cur);
    uint64_t result = xmlStrdup(a3);
    uint64_t v13 = *(int *)(a1 + 32);
    *(void *)(*(void *)(a1 + 48) + 8 * v1xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = result;
    *(_DWORD *)(a1 + 32) = v13 + 1;
    return result;
  }

  return (xmlChar *)xmlXIncludeErrMemory(a1, 0LL, (const xmlChar *)"processing text");
}

xlinkHandlerPtr xlinkGetDefaultHandler(void)
{
  return (xlinkHandlerPtr)xlinkDefaultHandler;
}

void xlinkSetDefaultHandler(xlinkHandlerPtr handler)
{
  xlinkDefaultHandler = (uint64_t)handler;
}

xlinkNodeDetectFunc xlinkGetDefaultDetect(void)
{
  return (xlinkNodeDetectFunc)xlinkDefaultDetect;
}

void xlinkSetDefaultDetect(xlinkNodeDetectFunc func)
{
  xlinkDefaultDetect = (uint64_t)func;
}

xlinkType xlinkIsLink(xmlDocPtr doc, xmlNodePtr node)
{
  xmlNodePtr v2 = node;
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (node)
  {
    xmlDocPtr v3 = doc;
    if (!doc && (xmlDocPtr v3 = node->doc) == 0LL || v3->type != XML_HTML_DOCUMENT_NODE)
    {
      uint64_t ns = node->ns;
      if (ns) {
        xmlStrEqual(ns->href, (const xmlChar *)"http://www.w3.org/1999/xhtml/");
      }
    }

    NsProp = xmlGetNsProp(v2, (const xmlChar *)"type", (const xmlChar *)"http://www.w3.org/1999/xlink/namespace/");
    if (!NsProp)
    {
      LODWORD(v2) = 0;
      return v2;
    }

    int v6 = NsProp;
    if (xmlStrEqual(NsProp, (const xmlChar *)"simple"))
    {
      LODWORD(v2) = 1;
LABEL_10:
      xmlFree(v6);
      return v2;
    }

    if (!xmlStrEqual(v6, (const xmlChar *)"extended"))
    {
      LODWORD(v2) = 0;
      goto LABEL_10;
    }

    xmlEntityPtr v8 = xmlGetNsProp(v2, (const xmlChar *)"role", (const xmlChar *)"http://www.w3.org/1999/xlink/namespace/");
    if (!v8)
    {
      LODWORD(v2) = 2;
      goto LABEL_10;
    }

    int v9 = v8;
    xmlNsPtr v10 = xmlSearchNs(v3, v2, (const xmlChar *)"http://www.w3.org/1999/xlink/namespace/");
    if (v10)
    {
      __int128 v22 = 0u;
      memset(v23, 0, 23);
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      *(_OWORD *)char __str = 0u;
      __int128 v13 = 0u;
      snprintf(__str, 0xC8uLL, "%s:external-linkset", (const char *)v10->prefix);
      v23[23] = 0;
      int v11 = __str;
    }

    else
    {
      int v11 = "xlink:external-linkset";
    }

    xmlStrEqual(v9, (const xmlChar *)v11);
    xmlFree(v6);
    xmlFree(v9);
    LODWORD(v2) = 2;
  }

  return v2;
}

uint64_t __xmlIOErr(int a1, int a2, uint64_t a3)
{
  if (!a2)
  {
    int v5 = *__error();
    if (!v5)
    {
      a2 = 0;
      return __xmlSimpleError(a1, a2, 0, (uint64_t)IOerr[v5], a3);
    }

    if (*__error() == 13)
    {
      a2 = 1501;
    }

    else if (*__error() == 35)
    {
      a2 = 1502;
    }

    else if (*__error() == 9)
    {
      a2 = 1503;
    }

    else if (*__error() == 94)
    {
      a2 = 1504;
    }

    else if (*__error() == 16)
    {
      a2 = 1505;
    }

    else if (*__error() == 89)
    {
      a2 = 1506;
    }

    else if (*__error() == 10)
    {
      a2 = 1507;
    }

    else if (*__error() == 11)
    {
      a2 = 1508;
    }

    else if (*__error() == 33)
    {
      a2 = 1509;
    }

    else if (*__error() == 17)
    {
      a2 = 1510;
    }

    else if (*__error() == 14)
    {
      a2 = 1511;
    }

    else if (*__error() == 27)
    {
      a2 = 1512;
    }

    else
    {
      if (*__error() != 36)
      {
        if (*__error() == 4)
        {
          a2 = 1514;
          goto LABEL_99;
        }

        if (*__error() == 22)
        {
          a2 = 1515;
          goto LABEL_99;
        }

        if (*__error() == 5)
        {
          a2 = 1516;
          goto LABEL_99;
        }

        if (*__error() == 21)
        {
          a2 = 1517;
          goto LABEL_99;
        }

        if (*__error() == 24)
        {
          a2 = 1518;
          goto LABEL_99;
        }

        if (*__error() == 31)
        {
          a2 = 1519;
          goto LABEL_99;
        }

        if (*__error() == 40)
        {
          a2 = 1520;
          goto LABEL_99;
        }

        if (*__error() == 63)
        {
          a2 = 1521;
          goto LABEL_99;
        }

        if (*__error() == 23)
        {
          a2 = 1522;
          goto LABEL_99;
        }

        if (*__error() == 19)
        {
          a2 = 1523;
          goto LABEL_99;
        }

        if (*__error() == 2)
        {
          a2 = 1524;
          goto LABEL_99;
        }

        if (*__error() == 8)
        {
          a2 = 1525;
          goto LABEL_99;
        }

        if (*__error() == 77)
        {
          a2 = 1526;
          goto LABEL_99;
        }

        if (*__error() == 12)
        {
          a2 = 1527;
          goto LABEL_99;
        }

        if (*__error() == 28)
        {
          a2 = 1528;
          goto LABEL_99;
        }

        if (*__error() == 78)
        {
          a2 = 1529;
          goto LABEL_99;
        }

        if (*__error() == 20)
        {
          a2 = 1530;
          goto LABEL_99;
        }

        if (*__error() == 66)
        {
          a2 = 1531;
          goto LABEL_99;
        }

        if (*__error() == 45)
        {
          a2 = 1532;
          goto LABEL_99;
        }

        if (*__error() == 25)
        {
          a2 = 1533;
          goto LABEL_99;
        }

        if (*__error() == 6)
        {
          a2 = 1534;
          goto LABEL_99;
        }

        if (*__error() == 1)
        {
          a2 = 1535;
          goto LABEL_99;
        }

        if (*__error() == 32)
        {
          a2 = 1536;
          goto LABEL_99;
        }

        if (*__error() == 34)
        {
          a2 = 1537;
          goto LABEL_99;
        }

        if (*__error() == 30)
        {
          a2 = 1538;
          goto LABEL_99;
        }

        if (*__error() == 29)
        {
          a2 = 1539;
          goto LABEL_99;
        }

        if (*__error() == 3)
        {
          a2 = 1540;
          goto LABEL_99;
        }

        if (*__error() == 60) {
          goto LABEL_90;
        }
        if (*__error() == 18)
        {
          a2 = 1542;
          goto LABEL_99;
        }

        if (*__error() == 38)
        {
          a2 = 1550;
          goto LABEL_99;
        }

        if (*__error() == 56)
        {
          a2 = 1551;
          goto LABEL_99;
        }

        if (*__error() == 61)
        {
          a2 = 1552;
          goto LABEL_99;
        }

        if (*__error() == 60)
        {
LABEL_90:
          a2 = 1541;
          goto LABEL_99;
        }

        if (*__error() == 51)
        {
          a2 = 1553;
          goto LABEL_99;
        }

        if (*__error() == 48)
        {
          a2 = 1554;
          goto LABEL_99;
        }

        if (*__error() != 36)
        {
          if (*__error() == 37)
          {
            a2 = 1555;
          }

          else if (*__error() == 47)
          {
            a2 = 1556;
          }

          else
          {
            a2 = 1500;
          }

          goto LABEL_99;
        }
      }

      a2 = 1513;
    }

_DWORD *__xmlLoaderErr(_DWORD *result, const char *a2, const xmlChar *a3)
{
  xmlDocPtr v3 = result;
  if (!result)
  {
    xmlEntityPtr v7 = 0LL;
    uint64_t v4 = 0LL;
    goto LABEL_12;
  }

  if (!result[83] || result[68] != -1)
  {
    uint64_t v4 = *(void *)result;
    if (*(void *)result)
    {
      uint64_t v5 = 176LL;
      if (result[39])
      {
        int v6 = 2;
      }

      else
      {
        uint64_t v5 = 168LL;
        int v6 = 1;
      }

      xmlEntityPtr v7 = *(void (**)(void *, const char *, ...))(v4 + v5);
      if (*(_DWORD *)(v4 + 216) == -554844497) {
        uint64_t result = *(_DWORD **)(v4 + 248);
      }
      else {
        uint64_t result = 0LL;
      }
      uint64_t v4 = v3[1];
      return __xmlRaiseError( (xmlStructuredErrorFunc)result,  v7,  (void *)v4,  v3,  0LL,  8u,  1549,  v6,  0LL,  0,  a3,  0LL,  0LL,  0,  0,  a2,  (char)a3);
    }

    uint64_t result = 0LL;
    xmlEntityPtr v7 = 0LL;
LABEL_12:
    int v6 = 2;
    return __xmlRaiseError( (xmlStructuredErrorFunc)result,  v7,  (void *)v4,  v3,  0LL,  8u,  1549,  v6,  0LL,  0,  a3,  0LL,  0LL,  0,  0,  a2,  (char)a3);
  }

  return result;
}

void xmlCleanupInputCallbacks(void)
{
  if (xmlInputCallbackInitialized == 1)
  {
    if (xmlInputCallbackNr >= 1) {
      bzero(&xmlInputCallbackTable, 32LL * xmlInputCallbackNr);
    }
    xmlInputCallbackNr = 0;
    xmlInputCallbackInitialized = 0;
  }

int xmlPopInputCallbacks(void)
{
  if (xmlInputCallbackInitialized == 1 && (uint64_t v0 = (xmlInputCallbackNr - 1), xmlInputCallbackNr >= 1))
  {
    --xmlInputCallbackNr;
    int v1 = (_OWORD *)((char *)&xmlInputCallbackTable + 32 * v0);
    _OWORD *v1 = 0u;
    v1[1] = 0u;
  }

  else
  {
    LODWORD(v0) = -1;
  }

  return v0;
}

void xmlCleanupOutputCallbacks(void)
{
  if (xmlOutputCallbackInitialized == 1)
  {
    if (xmlOutputCallbackNr >= 1) {
      bzero(&xmlOutputCallbackTable, 32LL * xmlOutputCallbackNr);
    }
    xmlOutputCallbackNr = 0;
    xmlOutputCallbackInitialized = 0;
  }

int xmlPopOutputCallbacks(void)
{
  if (xmlOutputCallbackInitialized == 1 && (uint64_t v0 = (xmlOutputCallbackNr - 1), xmlOutputCallbackNr >= 1))
  {
    --xmlOutputCallbackNr;
    int v1 = (_OWORD *)((char *)&xmlOutputCallbackTable + 32 * v0);
    _OWORD *v1 = 0u;
    v1[1] = 0u;
  }

  else
  {
    LODWORD(v0) = -1;
  }

  return v0;
}

int xmlCheckFilename(const char *path)
{
  if (path)
  {
    memset(&v2, 0, sizeof(v2));
    if (stat(path, &v2) == -1)
    {
      LODWORD(path) = 0;
    }

    else if ((v2.st_mode & 0xF000) == 0x4000)
    {
      LODWORD(path) = 2;
    }

    else
    {
      LODWORD(path) = 1;
    }
  }

  return (int)path;
}

uint64_t xmlInputReadCallbackNop()
{
  return 0LL;
}

int xmlFileMatch(const char *filename)
{
  return 1;
}

void *__cdecl xmlFileOpen(const char *filename)
{
  uint64_t result = xmlFileOpen_real((FILE *)filename);
  if (!result)
  {
    uint64_t result = xmlURIUnescapeString(filename, 0, 0LL);
    if (result)
    {
      xmlDocPtr v3 = result;
      uint64_t v4 = xmlFileOpen_real((FILE *)result);
      xmlFree(v3);
      return v4;
    }
  }

  return result;
}

FILE *xmlFileOpen_real(FILE *result)
{
  if (result)
  {
    int v1 = (const xmlChar *)result;
    if (xmlStrncasecmp(v1, (const xmlChar *)"file://localhost/", 17))
    {
      if (xmlStrncasecmp(v1, (const xmlChar *)"file:///", 8))
      {
        int v2 = xmlStrncasecmp(v1, (const xmlChar *)"file:/", 6);
        uint64_t v3 = 5LL;
        if (v2) {
          uint64_t v3 = 0LL;
        }
      }

      else
      {
        uint64_t v3 = 7LL;
      }
    }

    else
    {
      uint64_t v3 = 16LL;
    }

    uint64_t v4 = (const char *)&v1[v3];
    memset(&v5, 0, sizeof(v5));
    if (stat(v4, &v5) != -1)
    {
      uint64_t result = fopen(v4, "r");
      if (result) {
        return result;
      }
      __xmlIOErr(8, 0, (uint64_t)v4);
    }

    return 0LL;
  }

  return result;
}

int xmlFileRead(void *context, char *buffer, int len)
{
  int v3 = -1;
  if (context)
  {
    if (buffer)
    {
      int v3 = fread(buffer, 1uLL, len, (FILE *)context);
      if (v3 < 0) {
        __xmlIOErr(8, 0, (uint64_t)"fread()");
      }
    }
  }

  return v3;
}

int xmlFileClose(void *context)
{
  if (!context) {
    return -1;
  }
  if ((void *)*MEMORY[0x1895F89E0] != context && *MEMORY[0x1895F89D0] != (void)context)
  {
    int v2 = -1;
    int v3 = "fclose()";
LABEL_14:
    __xmlIOErr(8, 0, (uint64_t)v3);
    return v2;
  }

  int v2 = 0;
  if (fflush((FILE *)context) < 0)
  {
    int v3 = "fflush()";
    goto LABEL_14;
  }

  return v2;
}

int xmlIOHTTPMatch(const char *filename)
{
  return xmlStrncasecmp((const xmlChar *)filename, (const xmlChar *)"http://", 7) == 0;
}

void *__cdecl xmlIOHTTPOpen(const char *filename)
{
  return xmlNanoHTTPOpen(filename, 0LL);
}

void *__cdecl xmlIOHTTPOpenW(const char *post_uri, int compression)
{
  uint64_t v49 = *MEMORY[0x1895F89C0];
  if (!post_uri) {
    return 0LL;
  }
  uint64_t v4 = xmlMalloc(0x18uLL);
  stat v5 = v4;
  if (!v4)
  {
    __xmlSimpleError(8, 2, 0, 0LL, (uint64_t)"creating HTTP output context");
    return v5;
  }

  *uint64_t v4 = 0LL;
  v4[1] = 0LL;
  v4[2] = 0LL;
  int v6 = xmlStrdup((const xmlChar *)post_uri);
  v5[1] = v6;
  if (!v6)
  {
    __xmlSimpleError(8, 2, 0, 0LL, (uint64_t)"copying URI");
LABEL_17:
    xmlFreeHTTPWriteCtxt(v5);
    return 0LL;
  }

  if ((compression - 1) > 8)
  {
    xmlEntityPtr v8 = xmlAllocOutputBufferInternal(0LL);
    goto LABEL_16;
  }

  *(_DWORD *)stat v5 = compression;
  xmlEntityPtr v7 = xmlMalloc(0x88uLL);
  xmlEntityPtr v8 = v7;
  if (!v7)
  {
    __xmlSimpleError(8, 2, 0, 0LL, (uint64_t)"creating buffer context");
    goto LABEL_16;
  }

  v7[16] = 0LL;
  *((_OWORD *)v7 + 6) = 0u;
  *((_OWORD *)v7 + 7) = 0u;
  *((_OWORD *)v7 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  *((_OWORD *)v7 + 2) = 0u;
  *((_OWORD *)v7 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
  *(_OWORD *)xmlEntityPtr v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  *xmlEntityPtr v7 = 0x8000LL;
  int v9 = xmlMalloc(0x8000uLL);
  v8[2] = v9;
  if (!v9)
  {
    xmlFree(0LL);
    deflateEnd((z_streamp)(v8 + 3));
    xmlFree(v8);
    __int128 v13 = (xmlChar *)"creating buffer";
    int v14 = 2;
    uint64_t v12 = 0LL;
    goto LABEL_14;
  }

  int v10 = deflateInit2_((z_streamp)(v8 + 3), compression, 8, -15, 8, 0, "1.2.12", 112);
  if (v10)
  {
    int v11 = v10;
    int v48 = 0;
    __int128 v46 = 0u;
    __int128 v47 = 0u;
    __int128 v44 = 0u;
    __int128 v45 = 0u;
    __int128 v42 = 0u;
    __int128 v43 = 0u;
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    *(_OWORD *)xmlParserInputBufferPtr buf = 0u;
    xmlFree((void *)v8[2]);
    deflateEnd((z_streamp)(v8 + 3));
    xmlFree(v8);
    xmlStrPrintf(buf, 500, "xmlCreateZMemBuff:  %s %d\n", "Error initializing compression context.  ZLIB error:", v11);
    uint64_t v12 = "write error";
    __int128 v13 = buf;
    int v14 = 1546;
LABEL_14:
    __xmlSimpleError(8, v14, 0, (uint64_t)v12, (uint64_t)v13);
    xmlEntityPtr v8 = 0LL;
    goto LABEL_16;
  }

  v8[1] = crc32(0LL, 0LL, 0);
  int v15 = snprintf((char *)v8[2], *v8, "%c%c%c%c%c%c%c%c%c%c", 31LL, 139LL, 8LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 3LL);
  v8[6] = v8[2] + v15;
  *((_DWORD *)v8 + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = *(_DWORD *)v8 - v15;
LABEL_16:
  v5[2] = v8;
  if (!v8) {
    goto LABEL_17;
  }
  return v5;
}

void xmlFreeHTTPWriteCtxt(void *a1)
{
  int v2 = (void *)*((void *)a1 + 1);
  if (v2) {
    xmlFree(v2);
  }
  uint64_t v3 = *((void *)a1 + 2);
  if (v3)
  {
    if (*(int *)a1 < 1)
    {
      xmlOutputBufferClose(*((xmlOutputBufferPtr *)a1 + 2));
    }

    else
    {
      xmlFree(*(void **)(v3 + 16));
      deflateEnd((z_streamp)(v3 + 24));
      xmlFree((void *)v3);
    }
  }

  xmlFree(a1);
}

void *xmlAllocOutputBufferInternal(uint64_t a1)
{
  int v2 = xmlMalloc(0x38uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    v2[6] = 0LL;
    *((_OWORD *)v2 + 1) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *(_OWORD *)int v2 = 0u;
    uint64_t v4 = xmlBufCreate();
    v3[4] = v4;
    if (v4)
    {
      xmlBufSetAllocationScheme((uint64_t)v4, 3u);
      v3[3] = a1;
      if (!a1)
      {
        v3[5] = 0LL;
        goto LABEL_8;
      }

      Size = xmlBufCreateSize(4000LL);
      v3[5] = Size;
      if (Size)
      {
        xmlCharEncOutput(v3, 1);
LABEL_8:
        *((_DWORD *)v3 + 12) = 0;
        v3[1] = 0LL;
        void v3[2] = 0LL;
        *uint64_t v3 = 0LL;
        return v3;
      }

      xmlBufFree((_DWORD *)v3[4]);
    }

    xmlFree(v3);
    return 0LL;
  }

  __xmlSimpleError(8, 2, 0, 0LL, (uint64_t)"creating output buffer");
  return v3;
}

int xmlIOHTTPRead(void *context, char *buffer, int len)
{
  if (!buffer || len < 0) {
    return -1;
  }
  else {
    return xmlNanoHTTPRead(context, buffer, len);
  }
}

int xmlIOHTTPClose(void *context)
{
  return 0;
}

int xmlIOFTPMatch(const char *filename)
{
  return xmlStrncasecmp((const xmlChar *)filename, (const xmlChar *)"ftp://", 6) == 0;
}

int xmlIOFTPRead(void *context, char *buffer, int len)
{
  if (!buffer || len < 0) {
    return -1;
  }
  else {
    return xmlNanoFTPRead(context, buffer, len);
  }
}

int xmlRegisterInputCallbacks( xmlInputMatchCallback matchFunc, xmlInputOpenCallback openFunc, xmlInputReadCallback readFunc, xmlInputCloseCallback closeFunc)
{
  int result = xmlInputCallbackNr;
  if (xmlInputCallbackNr > 14) {
    return -1;
  }
  int v6 = (xmlInputMatchCallback *)((char *)&xmlInputCallbackTable + 32 * xmlInputCallbackNr);
  xmlInputMatchCallback *v6 = matchFunc;
  v6[1] = (xmlInputMatchCallback)openFunc;
  v6[2] = (xmlInputMatchCallback)readFunc;
  v6[3] = (xmlInputMatchCallback)closeFunc;
  xmlInputCallbackInitialized = 1;
  xmlInputCallbackNr = result + 1;
  return result;
}

int xmlRegisterOutputCallbacks( xmlOutputMatchCallback matchFunc, xmlOutputOpenCallback openFunc, xmlOutputWriteCallback writeFunc, xmlOutputCloseCallback closeFunc)
{
  int result = xmlOutputCallbackNr;
  if (xmlOutputCallbackNr > 14) {
    return -1;
  }
  int v6 = (xmlOutputMatchCallback *)((char *)&xmlOutputCallbackTable + 32 * xmlOutputCallbackNr);
  xmlOutputMatchCallback *v6 = matchFunc;
  v6[1] = (xmlOutputMatchCallback)openFunc;
  v6[2] = (xmlOutputMatchCallback)writeFunc;
  v6[3] = (xmlOutputMatchCallback)closeFunc;
  xmlOutputCallbackInitialized = 1;
  xmlOutputCallbackNr = result + 1;
  return result;
}

void xmlRegisterDefaultInputCallbacks(void)
{
  if ((xmlInputCallbackInitialized & 1) == 0)
  {
    uint64_t v0 = xmlInputCallbackNr;
    if (xmlInputCallbackNr <= 14)
    {
      int v1 = (int (__cdecl **)(const char *))((char *)&xmlInputCallbackTable + 32 * xmlInputCallbackNr);
      const xmlChar *v1 = xmlFileMatch;
      v1[1] = (int (__cdecl *)(const char *))xmlFileOpen;
      v1[2] = (int (__cdecl *)(const char *))xmlFileRead;
      v1[3] = (int (__cdecl *)(const char *))xmlFileClose;
      xmlInputCallbackNr = v0 + 1;
      if ((_DWORD)v0 != 14)
      {
        int v2 = (uint64_t (**)())((char *)&xmlInputCallbackTable + 32 * v0 + 32);
        *int v2 = xmlGzfileMatch;
        v2[1] = (uint64_t (*)())xmlGzfileOpen;
        v2[2] = (uint64_t (*)())xmlGzfileRead;
        v2[3] = (uint64_t (*)())xmlGzfileClose;
        xmlInputCallbackNr = v0 + 2;
        if ((int)v0 <= 12)
        {
          uint64_t v3 = (int (__cdecl **)(const char *))((char *)&xmlInputCallbackTable + 32 * v0 + 64);
          *uint64_t v3 = xmlIOHTTPMatch;
          v3[1] = (int (__cdecl *)(const char *))xmlIOHTTPOpen;
          void v3[2] = (int (__cdecl *)(const char *))xmlIOHTTPRead;
          v3[3] = (int (__cdecl *)(const char *))xmlIOHTTPClose;
          xmlInputCallbackNr = v0 + 3;
          if ((_DWORD)v0 != 12)
          {
            uint64_t v4 = (int (__cdecl **)(const char *))((char *)&xmlInputCallbackTable + 32 * v0 + 96);
            *uint64_t v4 = xmlIOFTPMatch;
            v4[1] = (int (__cdecl *)(const char *))xmlIOFTPOpen;
            v4[2] = (int (__cdecl *)(const char *))xmlIOFTPRead;
            v4[3] = (int (__cdecl *)(const char *))xmlIOFTPClose;
            xmlInputCallbackNr = v0 + 4;
          }
        }
      }
    }

    xmlInputCallbackInitialized = 1;
  }

uint64_t xmlGzfileMatch()
{
  return 1LL;
}

gzFile xmlGzfileOpen(const char *a1)
{
  gzFile v2 = xmlGzfileOpen_real(a1);
  if (!v2)
  {
    uint64_t v3 = xmlURIUnescapeString(a1, 0, 0LL);
    uint64_t v4 = v3;
    if (v3) {
      gzFile v2 = xmlGzfileOpen_real(v3);
    }
    else {
      gzFile v2 = 0LL;
    }
    xmlFree(v4);
  }

  return v2;
}

uint64_t xmlGzfileRead(gzFile_s *a1, void *a2, unsigned int a3)
{
  uint64_t v3 = gzread(a1, a2, a3);
  if ((v3 & 0x80000000) != 0) {
    __xmlIOErr(8, 0, (uint64_t)"gzread()");
  }
  return v3;
}

uint64_t xmlGzfileClose(gzFile_s *a1)
{
  if (!gzclose(a1)) {
    return 0LL;
  }
  __xmlIOErr(8, 0, (uint64_t)"gzclose()");
  return 0xFFFFFFFFLL;
}

void xmlRegisterDefaultOutputCallbacks(void)
{
  if ((xmlOutputCallbackInitialized & 1) == 0)
  {
    uint64_t v0 = xmlOutputCallbackNr;
    if (xmlOutputCallbackNr <= 14)
    {
      int v1 = (int (__cdecl **)(const char *))((char *)&xmlOutputCallbackTable + 32 * xmlOutputCallbackNr);
      const xmlChar *v1 = xmlFileMatch;
      v1[1] = (int (__cdecl *)(const char *))xmlFileOpenW;
      v1[2] = (int (__cdecl *)(const char *))xmlFileWrite;
      v1[3] = (int (__cdecl *)(const char *))xmlFileClose;
      xmlOutputCallbackNr = v0 + 1;
      if ((_DWORD)v0 != 14)
      {
        gzFile v2 = (int (__cdecl **)(const char *))((char *)&xmlOutputCallbackTable + 32 * v0 + 32);
        *gzFile v2 = xmlIOHTTPMatch;
        v2[1] = (int (__cdecl *)(const char *))xmlIOHTTPDfltOpenW;
        v2[2] = (int (__cdecl *)(const char *))xmlIOHTTPWrite;
        v2[3] = (int (__cdecl *)(const char *))xmlIOHTTPClosePut;
        xmlOutputCallbackNr = v0 + 2;
      }
    }

    xmlOutputCallbackInitialized = 1;
  }

FILE *xmlFileOpenW(const char *a1)
{
  int v1 = (const xmlChar *)a1;
  if (!strcmp(a1, "-")) {
    return (FILE *)*MEMORY[0x1895F89E0];
  }
  if (xmlStrncasecmp(v1, (const xmlChar *)"file://localhost/", 17))
  {
    if (xmlStrncasecmp(v1, (const xmlChar *)"file:///", 8))
    {
      if (!v1) {
        return 0LL;
      }
    }

    else
    {
      v1 += 7;
    }
  }

  else
  {
    v1 += 16;
  }

  int result = fopen((const char *)v1, "wb");
  if (result) {
    return result;
  }
  __xmlIOErr(8, 0, (uint64_t)v1);
  return 0LL;
}

uint64_t xmlFileWrite(FILE *__stream, void *__ptr, int a3)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (__stream && __ptr)
  {
    int v6 = fwrite(__ptr, a3, 1uLL, __stream);
    if (v6 || !ferror(__stream))
    {
      return (v6 * a3);
    }

    else
    {
      __xmlIOErr(8, 0, (uint64_t)"fwrite()");
      return 0xFFFFFFFFLL;
    }
  }

  return result;
}

void *xmlIOHTTPDfltOpenW(const char *a1)
{
  return xmlIOHTTPOpenW(a1, 0);
}

uint64_t xmlIOHTTPWrite(uint64_t a1, const Bytef *buf, uint64_t len)
{
  uint64_t v42 = *MEMORY[0x1895F89C0];
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0xFFFFFFFFLL;
  if (buf)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    if (v6)
    {
      uint64_t v7 = len;
      if (*(int *)a1 >= 1)
      {
        *(void *)(v6 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = buf;
        *(_DWORD *)(v6 + 32) = len;
        unsigned int v8 = len;
        while (*(_DWORD *)(v6 + 56) > v8 / 5 || xmlZMemBuffExtend(v6, *(void *)v6) != -1)
        {
          int v9 = deflate((z_streamp)(v6 + 24), 0);
          if (v9)
          {
            int v41 = 0;
            __int128 v39 = 0u;
            __int128 v40 = 0u;
            __int128 v37 = 0u;
            __int128 v38 = 0u;
            __int128 v35 = 0u;
            __int128 v36 = 0u;
            __int128 v33 = 0u;
            __int128 v34 = 0u;
            __int128 v31 = 0u;
            __int128 v32 = 0u;
            __int128 v29 = 0u;
            __int128 v30 = 0u;
            __int128 v27 = 0u;
            __int128 v28 = 0u;
            __int128 v25 = 0u;
            __int128 v26 = 0u;
            __int128 v23 = 0u;
            __int128 v24 = 0u;
            __int128 v21 = 0u;
            __int128 v22 = 0u;
            __int128 v19 = 0u;
            __int128 v20 = 0u;
            __int128 v17 = 0u;
            __int128 v18 = 0u;
            __int128 v15 = 0u;
            __int128 v16 = 0u;
            __int128 v13 = 0u;
            __int128 v14 = 0u;
            __int128 v11 = 0u;
            __int128 v12 = 0u;
            *(_OWORD *)bufa = 0u;
            xmlStrPrintf( bufa,  500,  "xmlZMemBuffAppend:  %s %d %s - %d",  "Compression error while appending",  v7,  "bytes to buffer.  ZLIB error",  v9);
            __xmlSimpleError(8, 1546, 0, (uint64_t)"write error", (uint64_t)bufa);
            break;
          }

          unsigned int v8 = *(_DWORD *)(v6 + 32);
          if (!v8)
          {
            *(void *)(v6 + 8) = crc32(*(void *)(v6 + 8), buf, v7);
            goto LABEL_14;
          }
        }

        uint64_t v7 = 0xFFFFFFFFLL;
        goto LABEL_18;
      }

      uint64_t v7 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)(a1 + 16), len, (const char *)buf);
LABEL_14:
      uint64_t result = v7;
      if ((v7 & 0x80000000) != 0)
      {
LABEL_18:
        int v41 = 0;
        __int128 v39 = 0u;
        __int128 v40 = 0u;
        __int128 v37 = 0u;
        __int128 v38 = 0u;
        __int128 v35 = 0u;
        __int128 v36 = 0u;
        __int128 v33 = 0u;
        __int128 v34 = 0u;
        __int128 v31 = 0u;
        __int128 v32 = 0u;
        __int128 v29 = 0u;
        __int128 v30 = 0u;
        __int128 v27 = 0u;
        __int128 v28 = 0u;
        __int128 v25 = 0u;
        __int128 v26 = 0u;
        __int128 v23 = 0u;
        __int128 v24 = 0u;
        __int128 v21 = 0u;
        __int128 v22 = 0u;
        __int128 v19 = 0u;
        __int128 v20 = 0u;
        __int128 v17 = 0u;
        __int128 v18 = 0u;
        __int128 v15 = 0u;
        __int128 v16 = 0u;
        __int128 v13 = 0u;
        __int128 v14 = 0u;
        __int128 v11 = 0u;
        __int128 v12 = 0u;
        *(_OWORD *)bufa = 0u;
        xmlStrPrintf( bufa,  500,  "xmlIOHTTPWrite:  %s\n%s '%s'.\n",  "Error appending to internal buffer.",  "Error sending document to URI",  *(const char **)(a1 + 8));
        __xmlSimpleError(8, 1546, 0, (uint64_t)"write error", (uint64_t)bufa);
        return v7;
      }
    }
  }

  return result;
}

uint64_t xmlIOHTTPClosePut(int *a1)
{
  return xmlIOHTTPCloseWrite(a1, "PUT");
}

void xmlRegisterHTTPPostCallbacks(void)
{
  if ((xmlOutputCallbackInitialized & 1) == 0) {
    xmlRegisterDefaultOutputCallbacks();
  }
  int v0 = xmlOutputCallbackNr;
  if (xmlOutputCallbackNr <= 14)
  {
    int v1 = (int (__cdecl **)(const char *))((char *)&xmlOutputCallbackTable + 32 * xmlOutputCallbackNr);
    const xmlChar *v1 = xmlIOHTTPMatch;
    v1[1] = (int (__cdecl *)(const char *))xmlIOHTTPDfltOpenW;
    v1[2] = (int (__cdecl *)(const char *))xmlIOHTTPWrite;
    v1[3] = (int (__cdecl *)(const char *))xmlIOHTTPClosePost;
    xmlOutputCallbackInitialized = 1;
    xmlOutputCallbackNr = v0 + 1;
  }

uint64_t xmlIOHTTPClosePost(int *a1)
{
  return xmlIOHTTPCloseWrite(a1, "POST");
}

xmlParserInputBufferPtr xmlAllocParserInputBuffer(xmlCharEncoding enc)
{
  gzFile v2 = (xmlParserInputBuffer *)xmlMalloc(0x40uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    *(_OWORD *)&v2->buffer = 0u;
    *(_OWORD *)&v2->compressed = 0u;
    *(_OWORD *)&v2->context = 0u;
    *(_OWORD *)&v2->closecallbacuint64_t k = 0u;
    uint64_t v4 = __xmlDefaultBufferSize();
    Size = (xmlBuf *)xmlBufCreateSize(2LL * *v4);
    v3->buffer = Size;
    if (Size)
    {
      xmlBufSetAllocationScheme((uint64_t)Size, 0);
      xmlCharEncodingHandlerPtr CharEncodingHandler = xmlGetCharEncodingHandler(enc);
      v3->encoder = CharEncodingHandler;
      if (CharEncodingHandler)
      {
        uint64_t v7 = __xmlDefaultBufferSize();
        xmlCharEncodingHandlerPtr CharEncodingHandler = (xmlCharEncodingHandlerPtr)xmlBufCreateSize(2LL * *v7);
      }

      v3->raw = (xmlBufPtr)CharEncodingHandler;
      v3->readcallbacuint64_t k = 0LL;
      v3->closecallbacuint64_t k = 0LL;
      v3->context = 0LL;
      v3->compressed = -1;
      v3->rawconsumed = 0LL;
    }

    else
    {
      xmlFree(v3);
      return 0LL;
    }
  }

  else
  {
    __xmlSimpleError(8, 2, 0, 0LL, (uint64_t)"creating input buffer");
  }

  return v3;
}

xmlOutputBufferPtr xmlAllocOutputBuffer(xmlCharEncodingHandlerPtr encoder)
{
  gzFile v2 = xmlMalloc(0x38uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    v2[6] = 0LL;
    *((_OWORD *)v2 + 1) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *(_OWORD *)gzFile v2 = 0u;
    uint64_t v4 = xmlBufCreate();
    v3[4] = v4;
    if (v4)
    {
      v3[3] = encoder;
      if (!encoder)
      {
        v3[5] = 0LL;
        goto LABEL_10;
      }

      Size = xmlBufCreateSize(4000LL);
      v3[5] = Size;
      if (Size)
      {
        xmlCharEncOutput(v3, 1);
LABEL_10:
        *((_DWORD *)v3 + 12) = 0;
        v3[1] = 0LL;
        void v3[2] = 0LL;
        *uint64_t v3 = 0LL;
        return (xmlOutputBufferPtr)v3;
      }

      xmlBufFree((_DWORD *)v3[4]);
    }

    xmlFree(v3);
    return 0LL;
  }

  __xmlSimpleError(8, 2, 0, 0LL, (uint64_t)"creating output buffer");
  return (xmlOutputBufferPtr)v3;
}

void xmlFreeParserInputBuffer(xmlParserInputBufferPtr in)
{
  if (in)
  {
    xmlBufPtr raw = in->raw;
    if (raw)
    {
      xmlBufFree(raw);
      in->xmlBufPtr raw = 0LL;
    }

    encoder = in->encoder;
    if (encoder) {
      xmlCharEncCloseFunc(encoder);
    }
    closecallbacuint64_t k = in->closecallback;
    if (closecallback) {
      ((void (*)(void *))closecallback)(in->context);
    }
    xmlBufPtr buffer = in->buffer;
    if (buffer)
    {
      xmlBufFree(buffer);
      in->xmlBufPtr buffer = 0LL;
    }

    xmlFree(in);
  }

int xmlOutputBufferClose(xmlOutputBufferPtr out)
{
  if (!out) {
    return -1;
  }
  if (out->writecallback) {
    xmlOutputBufferFlush(out);
  }
  closecallbacuint64_t k = out->closecallback;
  if (closecallback) {
    int v3 = ((uint64_t (*)(void *))closecallback)(out->context);
  }
  else {
    int v3 = 0;
  }
  writteuint64_t n = out->written;
  xmlBufPtr conv = out->conv;
  if (conv)
  {
    xmlBufFree(conv);
    out->xmlBufPtr conv = 0LL;
  }

  encoder = out->encoder;
  if (encoder) {
    xmlCharEncCloseFunc(encoder);
  }
  xmlBufPtr buffer = out->buffer;
  if (buffer)
  {
    xmlBufFree(buffer);
    out->xmlBufPtr buffer = 0LL;
  }

  if (out->error) {
    int v3 = -1;
  }
  xmlFree(out);
  if (v3) {
    return v3;
  }
  else {
    return written;
  }
}

int xmlOutputBufferFlush(xmlOutputBufferPtr out)
{
  if (!out || out->error) {
    return -1;
  }
  p_xmlBufPtr conv = &out->conv;
  if (out->conv && out->encoder)
  {
    do
    {
      int v5 = xmlCharEncOutput(out, 0);
      if (v5 < 0)
      {
        __xmlSimpleError(8, 1544, 0, (uint64_t)"encoder error", 0LL);
        out->error = 1544;
        return -1;
      }
    }

    while (v5);
    if (*p_conv)
    {
      if (out->encoder)
      {
        writecallbacuint64_t k = out->writecallback;
        if (writecallback)
        {
          context = out->context;
          unsigned int v8 = xmlBufContent(*p_conv);
          xmlBufPtr conv = out->conv;
          goto LABEL_15;
        }
      }
    }
  }

  writecallbacuint64_t k = out->writecallback;
  if (writecallback)
  {
    context = out->context;
    p_xmlBufPtr conv = &out->buffer;
    unsigned int v8 = xmlBufContent(out->buffer);
    xmlBufPtr conv = out->buffer;
LABEL_15:
    size_t v10 = xmlBufUse(conv);
    unsigned int v2 = ((uint64_t (*)(void *, xmlChar *, size_t))writecallback)(context, v8, v10);
    if ((v2 & 0x80000000) != 0)
    {
      __xmlSimpleError(8, 1545, 0, (uint64_t)"flush error", 0LL);
      out->error = 1545;
      return v2;
    }

    xmlBufShrink(*p_conv, v2);
  }

  else
  {
    unsigned int v2 = 0;
  }

  writteuint64_t n = out->written;
  else {
    int v12 = 0x7FFFFFFF;
  }
  out->writteuint64_t n = v12;
  return v2;
}

xmlParserInputBufferPtr __xmlParserInputBufferCreateFilename(const char *URI, xmlCharEncoding enc)
{
  if ((xmlInputCallbackInitialized & 1) == 0) {
    xmlRegisterDefaultInputCallbacks();
  }
  if (!URI || xmlInputCallbackNr < 1) {
    return 0LL;
  }
  uint64_t v4 = xmlInputCallbackNr + 1LL;
  while (1)
  {
    uint64_t v5 = (v4 - 2);
    uint64_t v6 = (unsigned int (*)(const char *))*((void *)&xmlInputCallbackTable + 4 * v5);
    if (v6)
    {
      if (v6(URI))
      {
        uint64_t v7 = (char *)&xmlInputCallbackTable + 32 * v5;
        int v9 = (uint64_t (*)(const char *))*((void *)v7 + 1);
        unsigned int v8 = (gzFile (**)(const char *))(v7 + 8);
        uint64_t v10 = v9(URI);
        if (v10) {
          break;
        }
      }
    }
  }

  __int128 v13 = (gzFile_s *)v10;
  xmlParserInputBufferPtr v14 = xmlAllocParserInputBuffer(enc);
  __int128 v11 = v14;
  if (v14)
  {
    v14->context = v13;
    *(_OWORD *)&v14->readcallbacuint64_t k = *((_OWORD *)&xmlInputCallbackTable + 2 * v5 + 1);
    if (*v8 == xmlGzfileOpen && strcmp(URI, "-")) {
      v11->compressed = gzdirect(v13) == 0;
    }
  }

  else
  {
    (*((void (**)(gzFile_s *))&xmlInputCallbackTable + 4 * v5 + 3))(v13);
  }

  return v11;
}

xmlParserInputBufferPtr xmlParserInputBufferCreateFilename(const char *URI, xmlCharEncoding enc)
{
  uint64_t v2 = *(void *)&enc;
  if (!*__xmlParserInputBufferCreateFilenameValue()) {
    return __xmlParserInputBufferCreateFilename(URI, (xmlCharEncoding)v2);
  }
  xmlParserInputBufferCreateFilenameFunc v4 = *__xmlParserInputBufferCreateFilenameValue();
  return (xmlParserInputBufferPtr)((uint64_t (*)(const char *, uint64_t))v4)(URI, v2);
}

xmlOutputBufferPtr __xmlOutputBufferCreateFilename( const char *URI, xmlCharEncodingHandlerPtr encoder, int compression)
{
  if ((xmlOutputCallbackInitialized & 1) == 0) {
    xmlRegisterDefaultOutputCallbacks();
  }
  if (!URI) {
    return 0LL;
  }
  xmlURIPtr v6 = xmlParseURI(URI);
  if (!v6)
  {
    BOOL v9 = 1;
    goto LABEL_28;
  }

  uint64_t v7 = v6;
  scheme = (const xmlChar *)v6->scheme;
  if (scheme)
  {
    BOOL v9 = xmlStrEqual(scheme, (const xmlChar *)"file") != 0;
    if (v7->scheme && !xmlStrEqual((const xmlChar *)v7->scheme, (const xmlChar *)"file"))
    {
      xmlFreeURI(v7);
LABEL_28:
      if ((compression - 1) <= 8 && v9)
      {
        gzFile v20 = xmlGzfileOpenW((const xmlChar *)URI, compression);
        if (v20)
        {
          __int128 v21 = v20;
          __int128 v22 = (xmlOutputBuffer *)xmlAllocOutputBufferInternal((uint64_t)encoder);
          xmlParserInputBufferPtr v14 = v22;
          if (v22)
          {
            v22->context = v21;
            v22->writecallbacuint64_t k = (xmlOutputWriteCallback)xmlGzfileWrite;
            v22->closecallbacuint64_t k = (xmlOutputCloseCallback)xmlGzfileClose;
          }

          else
          {
            xmlGzfileClose(v21);
          }

          return v14;
        }
      }

      if (xmlOutputCallbackNr >= 1)
      {
        uint64_t v23 = xmlOutputCallbackNr + 1LL;
        while (1)
        {
          uint64_t v24 = (v23 - 2);
          __int128 v25 = (int (__cdecl **)(const char *))((char *)&xmlOutputCallbackTable + 32 * v24);
          if (*v25)
          {
            if (((unsigned int (*)(const char *))*v25)(URI))
            {
              __int128 v26 = *v25 == xmlIOHTTPMatch
                  ? xmlIOHTTPOpenW(URI, compression)
                  : (void *)(*((uint64_t (**)(const char *))&xmlOutputCallbackTable + 4 * v24 + 1))(URI);
              __int128 v19 = v26;
              if (v26) {
                break;
              }
            }
          }
        }

        unsigned int v28 = v23 - 2;
LABEL_47:
        __int128 v29 = xmlAllocOutputBufferInternal((uint64_t)encoder);
        xmlParserInputBufferPtr v14 = (xmlOutputBuffer *)v29;
        if (v29)
        {
          *__int128 v29 = v19;
          *(_OWORD *)(v29 + 1) = *((_OWORD *)&xmlOutputCallbackTable + 2 * v28 + 1);
        }

        return v14;
      }

      return 0LL;
    }
  }

  else
  {
    BOOL v9 = 1;
  }

  uint64_t v10 = xmlURIUnescapeString(URI, 0, 0LL);
  xmlFreeURI(v7);
  if (!v10) {
    goto LABEL_28;
  }
  if ((compression - 1) > 8 || !v9 || (gzFile v11 = xmlGzfileOpenW((const xmlChar *)v10, compression)) == 0LL)
  {
    if (xmlOutputCallbackNr >= 1)
    {
      uint64_t v15 = xmlOutputCallbackNr + 1LL;
      while (1)
      {
        uint64_t v16 = (v15 - 2);
        __int128 v17 = (int (__cdecl **)(const char *))((char *)&xmlOutputCallbackTable + 32 * v16);
        if (*v17)
        {
          if (((unsigned int (*)(char *))*v17)(v10))
          {
            __int128 v18 = *v17 == xmlIOHTTPMatch
                ? xmlIOHTTPOpenW(v10, compression)
                : (void *)(*((uint64_t (**)(char *))&xmlOutputCallbackTable + 4 * v16 + 1))(v10);
            __int128 v19 = v18;
            if (v18) {
              break;
            }
          }
        }
      }

      xmlFree(v10);
      unsigned int v28 = v15 - 2;
      goto LABEL_47;
    }

gzFile xmlGzfileOpenW(const xmlChar *a1, int a2)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  *(void *)&__str[7] = 0LL;
  *(void *)char __str = 0LL;
  snprintf(__str, 0xFuLL, "wb%d", a2);
  if (!strcmp((const char *)a1, "-"))
  {
    int v3 = fileno((FILE *)*MEMORY[0x1895F89E0]);
    int v4 = dup(v3);
    gzFile result = gzdopen(v4, "rb");
    if ((v4 & 0x80000000) == 0 && !result)
    {
      close(v4);
      return 0LL;
    }
  }

  else
  {
    if (xmlStrncasecmp(a1, (const xmlChar *)"file://localhost/", 17))
    {
      if (xmlStrncasecmp(a1, (const xmlChar *)"file:///", 8))
      {
        if (!a1) {
          return 0LL;
        }
      }

      else
      {
        a1 += 7;
      }
    }

    else
    {
      a1 += 16;
    }

    return gzopen((const char *)a1, __str);
  }

  return result;
}

uint64_t xmlGzfileWrite(gzFile_s *a1, const void *a2, unsigned int a3)
{
  uint64_t v3 = gzwrite(a1, a2, a3);
  if ((v3 & 0x80000000) != 0) {
    __xmlIOErr(8, 0, (uint64_t)"gzwrite()");
  }
  return v3;
}

xmlOutputBufferPtr xmlOutputBufferCreateFilename( const char *URI, xmlCharEncodingHandlerPtr encoder, int compression)
{
  uint64_t v3 = *(void *)&compression;
  if (!*__xmlOutputBufferCreateFilenameValue()) {
    return __xmlOutputBufferCreateFilename(URI, encoder, v3);
  }
  xmlOutputBufferCreateFilenameFunc v6 = *__xmlOutputBufferCreateFilenameValue();
  return (xmlOutputBufferPtr)((uint64_t (*)(const char *, xmlCharEncodingHandlerPtr, uint64_t))v6)( URI,  encoder,  v3);
}

xmlParserInputBufferPtr xmlParserInputBufferCreateFile(FILE *file, xmlCharEncoding enc)
{
  if ((xmlInputCallbackInitialized & 1) == 0) {
    xmlRegisterDefaultInputCallbacks();
  }
  if (!file) {
    return 0LL;
  }
  xmlParserInputBufferPtr result = xmlAllocParserInputBuffer(enc);
  if (result)
  {
    result->context = file;
    result->readcallbacuint64_t k = xmlFileRead;
    result->closecallbacuint64_t k = (xmlInputCloseCallback)xmlFileFlush;
  }

  return result;
}

uint64_t xmlFileFlush(FILE *a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (fflush(a1) != -1) {
    return 0LL;
  }
  __xmlIOErr(8, 0, (uint64_t)"fflush()");
  return 0xFFFFFFFFLL;
}

xmlOutputBufferPtr xmlOutputBufferCreateFile(FILE *file, xmlCharEncodingHandlerPtr encoder)
{
  if ((xmlOutputCallbackInitialized & 1) == 0) {
    xmlRegisterDefaultOutputCallbacks();
  }
  if (!file) {
    return 0LL;
  }
  xmlOutputBufferPtr result = (xmlOutputBufferPtr)xmlAllocOutputBufferInternal((uint64_t)encoder);
  if (result)
  {
    result->context = file;
    result->writecallbacuint64_t k = (xmlOutputWriteCallback)xmlFileWrite;
    result->closecallbacuint64_t k = (xmlOutputCloseCallback)xmlFileFlush;
  }

  return result;
}

xmlOutputBufferPtr xmlOutputBufferCreateBuffer(xmlOutputBufferPtr buffer, xmlCharEncodingHandlerPtr encoder)
{
  if (buffer)
  {
    xmlOutputBufferPtr v2 = buffer;
    xmlBufPtr buffer = (xmlOutputBufferPtr)xmlAllocOutputBufferInternal((uint64_t)encoder);
    if (buffer)
    {
      buffer->context = v2;
      buffer->writecallbacuint64_t k = (xmlOutputWriteCallback)xmlBufferWrite;
      buffer->closecallbacuint64_t k = 0LL;
    }
  }

  return buffer;
}

xmlOutputBufferPtr xmlOutputBufferCreateIO( xmlOutputBufferPtr iowrite, xmlOutputCloseCallback ioclose, void *ioctx, xmlCharEncodingHandlerPtr encoder)
{
  if (iowrite)
  {
    xmlOutputBufferCreateFilenameFunc v6 = (int (__cdecl *)(void *, const char *, int))iowrite;
    iowrite = (xmlOutputBufferPtr)xmlAllocOutputBufferInternal((uint64_t)encoder);
    if (iowrite)
    {
      iowrite->context = ioctx;
      iowrite->writecallbacuint64_t k = v6;
      iowrite->closecallbacuint64_t k = ioclose;
    }
  }

  return iowrite;
}

uint64_t xmlBufferWrite(xmlBuffer *a1, const xmlChar *a2, unsigned int a3)
{
  if (xmlBufferAdd(a1, a2, a3)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return a3;
  }
}

const xmlChar *__cdecl xmlOutputBufferGetContent(xmlOutputBufferPtr out)
{
  if (out && (xmlBufPtr buffer = out->buffer) != 0LL) {
    return xmlBufContent(buffer);
  }
  else {
    return 0LL;
  }
}

size_t xmlOutputBufferGetSize(xmlOutputBufferPtr out)
{
  if (out && (xmlBufPtr buffer = out->buffer) != 0LL) {
    return xmlBufUse(buffer);
  }
  else {
    return 0LL;
  }
}

xmlParserInputBufferPtr xmlParserInputBufferCreateFd(int fd, xmlCharEncoding enc)
{
  if (fd < 0) {
    return 0LL;
  }
  xmlParserInputBufferPtr result = xmlAllocParserInputBuffer(enc);
  if (result)
  {
    result->context = (void *)fd;
    result->readcallbacuint64_t k = (xmlInputReadCallback)xmlFdRead;
    result->closecallbacuint64_t k = (xmlInputCloseCallback)xmlFdClose;
  }

  return result;
}

ssize_t xmlFdRead(int a1, void *a2, int a3)
{
  ssize_t v3 = read(a1, a2, a3);
  if ((v3 & 0x80000000) != 0) {
    __xmlIOErr(8, 0, (uint64_t)"read()");
  }
  return v3;
}

uint64_t xmlFdClose(int a1)
{
  uint64_t v1 = close(a1);
  if ((v1 & 0x80000000) != 0) {
    __xmlIOErr(8, 0, (uint64_t)"close()");
  }
  return v1;
}

xmlParserInputBufferPtr xmlParserInputBufferCreateMem(const char *mem, int size, xmlCharEncoding enc)
{
  ssize_t v3 = 0LL;
  if (mem)
  {
    size_t v4 = *(void *)&size;
    if ((size & 0x80000000) == 0)
    {
      xmlParserInputBufferPtr v6 = xmlAllocParserInputBuffer(enc);
      ssize_t v3 = v6;
      if (v6)
      {
        v6->context = (void *)mem;
        v6->readcallbacuint64_t k = (xmlInputReadCallback)xmlInputReadCallbackNop;
        v6->closecallbacuint64_t k = 0LL;
        if (xmlBufAdd((uint64x2_t *)v6->buffer, (const xmlChar *)mem, v4))
        {
          xmlFree(v3);
          return 0LL;
        }
      }
    }
  }

  return v3;
}

xmlParserInputBufferPtr xmlParserInputBufferCreateStatic(const char *mem, int size, xmlCharEncoding enc)
{
  ssize_t v3 = 0LL;
  if (mem && (size & 0x80000000) == 0)
  {
    uint64_t v7 = (xmlParserInputBuffer *)xmlMalloc(0x40uLL);
    ssize_t v3 = v7;
    if (v7)
    {
      *(_OWORD *)&v7->xmlBufPtr buffer = 0u;
      *(_OWORD *)&v7->compressed = 0u;
      *(_OWORD *)&v7->context = 0u;
      *(_OWORD *)&v7->closecallbacuint64_t k = 0u;
      Static = (xmlBuf *)xmlBufCreateStatic(mem, size);
      v3->xmlBufPtr buffer = Static;
      if (Static)
      {
        xmlCharEncodingHandlerPtr CharEncodingHandler = xmlGetCharEncodingHandler(enc);
        v3->encoder = CharEncodingHandler;
        if (CharEncodingHandler)
        {
          uint64_t v10 = __xmlDefaultBufferSize();
          xmlCharEncodingHandlerPtr CharEncodingHandler = (xmlCharEncodingHandlerPtr)xmlBufCreateSize(2LL * *v10);
        }

        v3->xmlBufPtr raw = (xmlBufPtr)CharEncodingHandler;
        v3->compressed = -1;
        v3->readcallbacuint64_t k = 0LL;
        v3->closecallbacuint64_t k = 0LL;
        v3->context = (void *)mem;
      }

      else
      {
        xmlFree(v3);
        return 0LL;
      }
    }

    else
    {
      __xmlSimpleError(8, 2, 0, 0LL, (uint64_t)"creating input buffer");
    }
  }

  return v3;
}

xmlOutputBufferPtr xmlOutputBufferCreateFd(int fd, xmlCharEncodingHandlerPtr encoder)
{
  if (fd < 0) {
    return 0LL;
  }
  xmlOutputBufferPtr result = (xmlOutputBufferPtr)xmlAllocOutputBufferInternal((uint64_t)encoder);
  if (result)
  {
    result->context = (void *)fd;
    result->writecallbacuint64_t k = (xmlOutputWriteCallback)xmlFdWrite;
    result->closecallbacuint64_t k = 0LL;
  }

  return result;
}

ssize_t xmlFdWrite(int a1, const void *a2, size_t __nbyte)
{
  ssize_t v3 = write(a1, a2, __nbyte);
  if ((v3 & 0x80000000) != 0) {
    __xmlIOErr(8, 0, (uint64_t)"write()");
  }
  return v3;
}

xmlParserInputBufferPtr xmlParserInputBufferCreateIO( xmlParserInputBufferPtr ioread, xmlInputCloseCallback ioclose, void *ioctx, xmlCharEncoding enc)
{
  if (ioread)
  {
    xmlParserInputBufferPtr v6 = (int (__cdecl *)(void *, char *, int))ioread;
    ioread = xmlAllocParserInputBuffer(enc);
    if (ioread)
    {
      ioread->context = ioctx;
      ioread->readcallbacuint64_t k = v6;
      ioread->closecallbacuint64_t k = ioclose;
    }
  }

  return ioread;
}

xmlParserInputBufferCreateFilenameFunc xmlParserInputBufferCreateFilenameDefault(xmlParserInputBufferCreateFilenameFunc func)
{
  FilenameValue = __xmlParserInputBufferCreateFilenameValue();
  if (*FilenameValue) {
    ssize_t v3 = *FilenameValue;
  }
  else {
    ssize_t v3 = __xmlParserInputBufferCreateFilename;
  }
  *__xmlParserInputBufferCreateFilenameValue() = func;
  return v3;
}

xmlOutputBufferCreateFilenameFunc xmlOutputBufferCreateFilenameDefault(xmlOutputBufferCreateFilenameFunc func)
{
  FilenameValue = __xmlOutputBufferCreateFilenameValue();
  if (*FilenameValue) {
    ssize_t v3 = *FilenameValue;
  }
  else {
    ssize_t v3 = __xmlOutputBufferCreateFilename;
  }
  *__xmlOutputBufferCreateFilenameValue() = func;
  return v3;
}

int xmlParserInputBufferPush(xmlParserInputBufferPtr in, int len, const char *buf)
{
  if (len < 0)
  {
    LODWORD(vxmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0;
  }

  else
  {
    if (in && !in->error)
    {
      size_t v4 = *(void *)&len;
      if (in->encoder)
      {
        xmlBufPtr raw = in->raw;
        if (!raw)
        {
          xmlBufPtr raw = (xmlBuf *)xmlBufCreate();
          in->xmlBufPtr raw = raw;
        }

        if (!xmlBufAdd((uint64x2_t *)raw, (const xmlChar *)buf, v4))
        {
          unsigned int v8 = xmlBufUse(in->raw);
          int v9 = xmlCharEncInput((uint64_t)in, 1);
          if ((v9 & 0x80000000) == 0)
          {
            LODWORD(vxmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v9;
            in->rawconsumed = in->rawconsumed - xmlBufUse(in->raw) + v8;
            return v4;
          }

          __xmlSimpleError(8, 1544, 0, (uint64_t)"encoder error", 0LL);
          in->error = 1544;
        }
      }

      else if (!xmlBufAdd((uint64x2_t *)in->buffer, (const xmlChar *)buf, *(size_t *)&len))
      {
        return v4;
      }
    }

    LODWORD(vxmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = -1;
  }

  return v4;
}

int xmlParserInputBufferGrow(xmlParserInputBufferPtr in, int len)
{
  if (!in || in->error) {
    goto LABEL_23;
  }
  if (len != 4 && len < 4001) {
    uint64_t v4 = 4000LL;
  }
  else {
    uint64_t v4 = len;
  }
  if ((xmlBufGrow((uint64_t)in->buffer, (int)v4 + 1) & 0x80000000) != 0)
  {
    __int128 v13 = "growing input buffer";
    int v14 = 2;
    int v15 = 2;
    uint64_t v16 = 0LL;
LABEL_22:
    __xmlSimpleError(8, v15, 0, (uint64_t)v16, (uint64_t)v13);
    in->error = v14;
LABEL_23:
    LODWORD(v9) = -1;
    return v9;
  }

  uint64_t v5 = xmlBufEnd(in->buffer);
  readcallbacuint64_t k = in->readcallback;
  if (!readcallback)
  {
    uint64_t v16 = "no input";
    int v14 = 1547;
    int v15 = 1547;
LABEL_21:
    __int128 v13 = 0LL;
    goto LABEL_22;
  }

  uint64_t v7 = v5;
  uint64_t v8 = ((uint64_t (*)(void *, xmlChar *, uint64_t))readcallback)(in->context, v5, v4);
  size_t v9 = v8;
  if ((int)v8 < 1)
  {
    in->readcallbacuint64_t k = (xmlInputReadCallback)endOfInput;
    if ((v8 & 0x80000000) != 0) {
      goto LABEL_23;
    }
  }

  if (!in->encoder)
  {
    xmlBufAddLen((uint64x2_t *)in->buffer, v8);
    return v9;
  }

  xmlBufPtr raw = in->raw;
  if (!raw)
  {
    xmlBufPtr raw = (xmlBuf *)xmlBufCreate();
    in->xmlBufPtr raw = raw;
  }

  unsigned int v11 = xmlBufUse(in->raw);
  int v12 = xmlCharEncInput((uint64_t)in, 1);
  if (v12 < 0)
  {
    uint64_t v16 = "encoder error";
    int v14 = 1544;
    int v15 = 1544;
    goto LABEL_21;
  }

  LODWORD(v9) = v12;
  in->rawconsumed = in->rawconsumed - xmlBufUse(in->raw) + v11;
  return v9;
}

uint64_t endOfInput()
{
  return 0LL;
}

int xmlParserInputBufferRead(xmlParserInputBufferPtr in, int len)
{
  if (!in || in->error) {
    return -1;
  }
  if (in->readcallback) {
    return xmlParserInputBufferGrow(in, len);
  }
  return -1;
}

int xmlOutputBufferWrite(xmlOutputBufferPtr out, int len, const char *buf)
{
  if (!out || out->error) {
    return -1;
  }
  int v6 = len;
  if (len < 0) {
    return 0;
  }
  int v4 = 0;
  p_xmlBufPtr conv = &out->conv;
  p_xmlBufPtr buffer = (uint64x2_t **)&out->buffer;
  while (1)
  {
    size_t v10 = v6 >= 16000 ? 16000LL : v6;
    if (out->encoder)
    {
      if (!*p_conv) {
        *p_xmlBufPtr conv = (xmlBufPtr)xmlBufCreate();
      }
      int v12 = xmlCharEncOutput(out, 0);
      if (v12 < 0 && v12 != -3)
      {
        int v24 = 1544;
        __xmlSimpleError(8, 1544, 0, (uint64_t)"encoder error", 0LL);
        unsigned int v19 = -1;
        goto LABEL_42;
      }

      __int128 v13 = &out->conv;
      if (!out->writecallback)
      {
        LODWORD(v1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v12 & ~(v12 >> 31);
LABEL_31:
        buf += v10;
        v6 -= v10;
        goto LABEL_37;
      }
    }

    else
    {
      LODWORD(v1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v10;
      __int128 v13 = &out->buffer;
      if (!out->writecallback) {
        goto LABEL_31;
      }
    }

    size_t v15 = xmlBufUse(*v13);
    size_t v14 = v15;
    writecallbacuint64_t k = out->writecallback;
    buf += v10;
    v6 -= v10;
    if (writecallback) {
      break;
    }
LABEL_37:
    v4 += v14;
    if (v6 <= 0) {
      return v4;
    }
  }

  context = out->context;
  if (out->encoder)
  {
    __int128 v18 = xmlBufContent(*p_conv);
    unsigned int v19 = ((uint64_t (*)(void *, xmlChar *, size_t))writecallback)(context, v18, v14);
    gzFile v20 = &out->conv;
    if ((v19 & 0x80000000) != 0) {
      goto LABEL_41;
    }
    goto LABEL_33;
  }

  __int128 v21 = xmlBufContent((const xmlBuf *)*p_buffer);
  unsigned int v19 = ((uint64_t (*)(void *, xmlChar *, size_t))writecallback)(context, v21, v14);
  gzFile v20 = &out->buffer;
  if ((v19 & 0x80000000) == 0)
  {
LABEL_33:
    xmlBufShrink(*v20, v19);
    writteuint64_t n = out->written;
    else {
      int v23 = 0x7FFFFFFF;
    }
    out->writteuint64_t n = v23;
    goto LABEL_37;
  }

int xmlOutputBufferWriteEscape(xmlOutputBufferPtr out, const xmlChar *str, xmlCharEncodingOutputFunc escaping)
{
  if (!out) {
    return -1;
  }
  ssize_t v3 = (const char *)str;
  unsigned int v4 = -1;
  if (str)
  {
    if (!out->error)
    {
      p_xmlBufPtr buffer = (unint64_t *)&out->buffer;
      xmlBufPtr buffer = out->buffer;
      if (buffer)
      {
        if (xmlBufGetAllocationScheme((uint64_t)buffer) != 2)
        {
          int v9 = strlen(v3);
          if (v9 < 0) {
            return 0;
          }
          if (!out->error)
          {
            uint64_t v10 = 0LL;
            int v34 = 0;
            if (escaping) {
              unsigned int v11 = (uint64_t (*)(xmlChar *, int *, const char *, int *))escaping;
            }
            else {
              unsigned int v11 = (uint64_t (*)(xmlChar *, int *, const char *, int *))xmlEscapeContent;
            }
            p_xmlBufPtr conv = &out->conv;
            while (1)
            {
              int v33 = v9;
              int v34 = xmlBufAvail(*p_buffer);
              if (v34 > 39) {
                break;
              }
              int v13 = xmlBufGrow(*p_buffer, 0x64u);
              unsigned int v4 = -1;
              uint64_t v14 = v10;
              LODWORD(v10) = -1;
              if (v13 < 0) {
                return v4;
              }
LABEL_45:
              if (v9 < 1) {
                return v14;
              }
              unsigned int v4 = v14;
              BOOL v28 = (_DWORD)v10 == (_DWORD)v14;
              uint64_t v10 = v14;
              if (v28) {
                return v4;
              }
            }

            if (out->encoder)
            {
              if (!*p_conv) {
                *p_xmlBufPtr conv = (xmlBufPtr)xmlBufCreate();
              }
              size_t v15 = xmlBufEnd((xmlBufPtr)*p_buffer);
              unsigned int v4 = -1;
              if ((v11(v15, &v34, v3, &v33) & 0x80000000) != 0 || !v34) {
                return v4;
              }
              xmlBufAddLen((uint64x2_t *)*p_buffer, v34);
              if (xmlBufUse((const xmlBufPtr)*p_buffer) <= 0xF9F && v33 == v9) {
                return v10;
              }
              int v16 = xmlCharEncOutput(out, 0);
              if (v16 < 0 && v16 != -3)
              {
                __int128 v30 = "encoder error";
                int v31 = 1544;
                int v32 = 1544;
                goto LABEL_56;
              }

              __int128 v17 = &out->conv;
              if (!out->writecallback)
              {
                LODWORD(v18) = v16 & ~(v16 >> 31);
LABEL_36:
                v3 += v33;
                v9 -= v33;
                goto LABEL_37;
              }
            }

            else
            {
              unsigned int v19 = xmlBufEnd((xmlBufPtr)*p_buffer);
              unsigned int v4 = -1;
              if ((v11(v19, &v34, v3, &v33) & 0x80000000) != 0 || !v34) {
                return v4;
              }
              xmlBufAddLen((uint64x2_t *)out->buffer, v34);
              __int128 v17 = &out->buffer;
              if (!out->writecallback)
              {
                LODWORD(v18) = v34;
                goto LABEL_36;
              }
            }

            size_t v20 = xmlBufUse(*v17);
            size_t v18 = v20;
            writecallbacuint64_t k = out->writecallback;
            v3 += v33;
            v9 -= v33;
            if (writecallback)
            {
              context = out->context;
              if (out->encoder)
              {
                int v23 = xmlBufContent(*p_conv);
                unsigned int v4 = ((uint64_t (*)(void *, xmlChar *, size_t))writecallback)(context, v23, v18);
                int v24 = &out->conv;
                if ((v4 & 0x80000000) != 0) {
                  goto LABEL_55;
                }
              }

              else
              {
                __int128 v25 = xmlBufContent((const xmlBuf *)*p_buffer);
                unsigned int v4 = ((uint64_t (*)(void *, xmlChar *, size_t))writecallback)(context, v25, v18);
                int v24 = &out->buffer;
                if ((v4 & 0x80000000) != 0)
                {
LABEL_55:
                  __int128 v30 = "write error";
                  int v31 = 1546;
                  int v32 = 1546;
LABEL_56:
                  __xmlSimpleError(8, v32, 0, (uint64_t)v30, 0LL);
                  out->error = v31;
                  return v4;
                }
              }

              xmlBufShrink(*v24, v4);
              writteuint64_t n = out->written;
              else {
                int v27 = 0x7FFFFFFF;
              }
              out->writteuint64_t n = v27;
              goto LABEL_44;
            }

uint64_t xmlEscapeContent(_BYTE *a1, int *a2, unsigned __int8 *a3, int *a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a4;
  BOOL v6 = (int)v5 < 1 || (int)v4 < 1;
  LODWORD(i) = (_DWORD)a3;
  LODWORD(v8) = (_DWORD)a1;
  if (!v6)
  {
    unint64_t v9 = (unint64_t)&a1[v4];
    unint64_t v10 = (unint64_t)&a3[v5];
    uint64_t v8 = a1;
    for (uint64_t i = a3; (unint64_t)i < v10 && (unint64_t)v8 < v9; ++i)
    {
      unsigned int v11 = *i;
      if (v11 > 0x3B)
      {
        if (v11 == 62)
        {
          *(_DWORD *)uint64_t v8 = 997484326;
          v8 += 4;
          continue;
        }

        if (v11 == 60)
        {
          *(_DWORD *)uint64_t v8 = 997485606;
          v8 += 4;
          continue;
        }
      }

      else
      {
        if (v11 == 13)
        {
          *(_DWORD *)uint64_t v8 = 858858278;
          goto LABEL_17;
        }

        if (v11 == 38)
        {
          *(_DWORD *)uint64_t v8 = 1886216486;
LABEL_17:
          v8[4] = 59;
          v8 += 5;
          continue;
        }
      }

      *v8++ = v11;
    }
  }

  *a2 = (_DWORD)v8 - (_DWORD)a1;
  *a4 = (_DWORD)i - (_DWORD)a3;
  return 0LL;
}

int xmlOutputBufferWriteString(xmlOutputBufferPtr out, const char *str)
{
  if (!out) {
    return -1;
  }
  int v3 = -1;
  if (str)
  {
    if (!out->error)
    {
      int v3 = strlen(str);
      if (v3 >= 1) {
        return xmlOutputBufferWrite(out, v3, str);
      }
    }
  }

  return v3;
}

char *__cdecl xmlParserGetDirectory(const char *filename)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if ((xmlInputCallbackInitialized & 1) == 0) {
    xmlRegisterDefaultInputCallbacks();
  }
  if (!filename) {
    return 0LL;
  }
  strncpy(&__dst, filename, 0x3FFuLL);
  char v7 = 0;
  int64_t v2 = strlen(&__dst);
  int v3 = &v6[v2 - 1];
  if (v2 >= 1)
  {
    while (*v3 != 47)
    {
      if (--v3 <= &__dst) {
        goto LABEL_7;
      }
    }

    goto LABEL_8;
  }

xmlParserInputPtr xmlCheckHTTPInput(xmlParserCtxtPtr ctxt, xmlParserInputPtr ret)
{
  xmlParserInputPtr v2 = ret;
  if (ret)
  {
    xmlParserInputBufferPtr buf = ret->buf;
    if (ret->buf)
    {
      if (buf->readcallback == xmlIOHTTPRead && buf->context)
      {
        if (xmlNanoHTTPReturnCode(buf->context) < 400)
        {
          uint64_t v8 = xmlNanoHTTPMimeType(v2->buf->context);
          if (xmlStrstr((const xmlChar *)v8, (const xmlChar *)"/xml")
            || xmlStrstr((const xmlChar *)v8, (const xmlChar *)"+xml"))
          {
            unint64_t v9 = xmlNanoHTTPEncoding(v2->buf->context);
            if (v9)
            {
              unint64_t v10 = (const xmlChar *)v9;
              xmlCharEncodingHandlerPtr CharEncodingHandler = xmlFindCharEncodingHandler(v9);
              if (CharEncodingHandler) {
                xmlSwitchInputEncoding(ctxt, v2, CharEncodingHandler);
              }
              else {
                __xmlErrEncoding(ctxt, 31, (uint64_t)"Unknown encoding %s", (uint64_t)v10, 0LL);
              }
              if (!v2->encoding) {
                v2->encoding = xmlStrdup(v10);
              }
            }
          }

          int v12 = xmlNanoHTTPRedir(v2->buf->context);
          if (v12)
          {
            int v13 = (const xmlChar *)v12;
            filename = (char *)v2->filename;
            if (filename) {
              xmlFree(filename);
            }
            directory = (char *)v2->directory;
            if (directory)
            {
              xmlFree(directory);
              v2->directory = 0LL;
            }

            v2->filename = (const char *)xmlStrdup(v13);
          }
        }

        else
        {
          BOOL v6 = (const xmlChar *)v2->filename;
          if (v6) {
            char v7 = "failed to load HTTP resource %s\n";
          }
          else {
            char v7 = "failed to load HTTP resource\n";
          }
          __xmlLoaderErr(ctxt, v7, v6);
          xmlFreeInputStream(v2);
          return 0LL;
        }
      }
    }
  }

  return v2;
}

void xmlSetExternalEntityLoader(xmlExternalEntityLoader f)
{
  xmlCurrentExternalEntityLoader = (uint64_t (*)(char *, char *, xmlParserCtxtPtr))f;
}

xmlExternalEntityLoader xmlGetExternalEntityLoader(void)
{
  return (xmlExternalEntityLoader)xmlCurrentExternalEntityLoader;
}

xmlParserInputPtr xmlLoadExternalEntity(const char *URL, const char *ID, xmlParserCtxtPtr ctxt)
{
  char v7 = (char *)xmlCanonicPath((const xmlChar *)URL);
  if (v7)
  {
    uint64_t v8 = v7;
    unint64_t v9 = (xmlParserInput *)xmlCurrentExternalEntityLoader(v7, (char *)ID, ctxt);
    xmlFree(v8);
    return v9;
  }

  else
  {
    __xmlSimpleError(8, 2, 0, 0LL, (uint64_t)"building canonical path\n");
    return 0LL;
  }

const xmlChar *xmlNoNetExists(const xmlChar *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (xmlStrncasecmp(result, (const xmlChar *)"file://localhost/", 17))
    {
      int v2 = xmlStrncasecmp(v1, (const xmlChar *)"file:///", 8);
      uint64_t v3 = 7LL;
      if (v2) {
        uint64_t v3 = 0LL;
      }
    }

    else
    {
      uint64_t v3 = 16LL;
    }

    memset(&v6, 0, sizeof(v6));
    int v4 = stat((const char *)&v1[v3], &v6);
    if ((v6.st_mode & 0xF000) == 0x4000) {
      unsigned int v5 = 2;
    }
    else {
      unsigned int v5 = 1;
    }
    if (v4 == -1) {
      return 0LL;
    }
    else {
      return (const xmlChar *)v5;
    }
  }

  return result;
}

xmlParserInputPtr xmlNoNetExternalEntityLoader(const char *URL, const char *ID, xmlParserCtxtPtr ctxt)
{
  stat v6 = xmlResolveResourceFromCatalog((const xmlChar *)URL, (const xmlChar *)ID, (uint64_t)ctxt);
  if (v6) {
    char v7 = (char *)v6;
  }
  else {
    char v7 = (char *)URL;
  }
  if (!v7
    || xmlStrncasecmp((const xmlChar *)v7, (const xmlChar *)"ftp://", 6)
    && xmlStrncasecmp((const xmlChar *)v7, (const xmlChar *)"http://", 7))
  {
    uint64_t v8 = xmlDefaultExternalEntityLoader(v7, (char *)ID, ctxt);
    if (v7 != URL) {
      xmlFree(v7);
    }
  }

  else
  {
    __xmlSimpleError(8, 1543, 0, (uint64_t)"Attempt to load network entity %s", (uint64_t)v7);
    if (v7 != URL) {
      xmlFree(v7);
    }
    return 0LL;
  }

  return v8;
}

xmlChar *xmlResolveResourceFromCatalog(const xmlChar *a1, const xmlChar *a2, uint64_t a3)
{
  xmlCatalogAllow Defaults = xmlCatalogGetDefaults();
  if (Defaults == XML_CATA_ALLOW_NONE) {
    return 0LL;
  }
  xmlCatalogAllow v7 = Defaults;
  if (a3)
  {
    if ((v7 & 0xFFFFFFFE) == 2)
    {
      unint64_t v10 = *(void **)(a3 + 440);
      if (v10)
      {
        unsigned int v11 = xmlCatalogLocalResolve(v10, a2, a1);
        if (v11)
        {
          uint64_t v8 = v11;
          BOOL v12 = 1;
LABEL_21:
          if (v12)
          {
            int v13 = *(void **)(a3 + 440);
            if (v13)
            {
              uint64_t v14 = xmlCatalogLocalResolveURI(v13, v8);
              if (v14) {
                goto LABEL_26;
              }
            }
          }

          goto LABEL_24;
        }
      }
    }
  }

  if ((v7 & 0xFFFFFFFD) == 1)
  {
    uint64_t v8 = xmlCatalogResolve(a2, a1);
    if (!a1) {
      goto LABEL_17;
    }
  }

  else
  {
    uint64_t v8 = 0LL;
    if (!a1) {
      goto LABEL_17;
    }
  }

  if (!v8) {
    uint64_t v8 = xmlStrdup(a1);
  }
LABEL_17:
  if (a3)
  {
    BOOL v12 = (v7 & 0xFFFFFFFE) == 2;
    goto LABEL_21;
  }

xmlParserInputPtr xmlDefaultExternalEntityLoader(char *URL, char *ID, xmlParserCtxtPtr ctxt)
{
  if (ctxt && (optiouint64_t ns = ctxt->options, (options & 0x800) != 0))
  {
    ctxt->optiouint64_t ns = options - 2048;
    xmlParserInputPtr result = xmlNoNetExternalEntityLoader(URL, ID, ctxt);
    ctxt->optiouint64_t ns = options;
  }

  else
  {
    xmlCatalogAllow v7 = xmlResolveResourceFromCatalog((const xmlChar *)URL, (const xmlChar *)ID, (uint64_t)ctxt);
    if (v7) {
      uint64_t v8 = (char *)v7;
    }
    else {
      uint64_t v8 = URL;
    }
    if (v8)
    {
      xmlParserInputPtr v9 = xmlNewInputFromFile(ctxt, v8);
      if (v8 != URL) {
        xmlFree(v8);
      }
    }

    else
    {
      if (ID) {
        unsigned int v11 = ID;
      }
      else {
        unsigned int v11 = "NULL";
      }
      __xmlLoaderErr(ctxt, "failed to load external entity %s\n", (const xmlChar *)v11);
      return 0LL;
    }

    return v9;
  }

  return result;
}

gzFile xmlGzfileOpen_real(const char *a1)
{
  uint64_t v1 = (const xmlChar *)a1;
  if (strcmp(a1, "-"))
  {
    if (xmlStrncasecmp(v1, (const xmlChar *)"file://localhost/", 17))
    {
      if (xmlStrncasecmp(v1, (const xmlChar *)"file:///", 8))
      {
        if (!v1) {
          return 0LL;
        }
      }

      else
      {
        v1 += 7;
      }
    }

    else
    {
      v1 += 16;
    }

    memset(&v5, 0, sizeof(v5));
    return 0LL;
  }

  int v2 = fileno((FILE *)*MEMORY[0x1895F89D8]);
  int v3 = dup(v2);
  gzFile result = gzdopen(v3, "rb");
  if ((v3 & 0x80000000) == 0 && !result)
  {
    close(v3);
    return 0LL;
  }

  return result;
}

uint64_t xmlZMemBuffExtend(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (!a2) {
      return 0LL;
    }
    uint64_t v3 = *(void *)(a1 + 48);
    int v4 = *(void **)(a1 + 16);
    size_t v5 = *(void *)a1 + a2;
    stat v6 = (char *)xmlRealloc(v4, v5);
    if (v6)
    {
      xmlCatalogAllow v7 = v6;
      uint64_t result = 0LL;
      *(void *)a1 = v5;
      *(void *)(a1 + 16) = v7;
      *(void *)(a1 + 48) = &v7[v3 - (void)v4];
      *(_DWORD *)(a1 + 56) = v5 - (v3 - (_DWORD)v4);
      return result;
    }

    int v40 = 0;
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    *(_OWORD *)xmlParserInputBufferPtr buf = 0u;
    xmlStrPrintf(buf, 500, "xmlZMemBuffExtend:  %s %lu bytes.\n", "Allocation failure extending output buffer to", v5);
    __xmlSimpleError(8, 1546, 0, (uint64_t)"write error", (uint64_t)buf);
  }

  return 0xFFFFFFFFLL;
}

uint64_t xmlIOHTTPCloseWrite(int *a1, const char *a2)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  contentType = "text/xml";
  uint64_t v2 = 0xFFFFFFFFLL;
  if (a1 && a2)
  {
    uint64_t v5 = *((void *)a1 + 2);
    if (*a1 < 1)
    {
      xmlCatalogAllow v7 = xmlBufContent(*(const xmlBuf **)(v5 + 32));
      int v8 = xmlBufUse(*(const xmlBufPtr *)(v5 + 32));
      xmlParserInputPtr v9 = 0LL;
      if (v7) {
        goto LABEL_18;
      }
    }

    else if (v5)
    {
      while (1)
      {
        int v6 = deflate((z_streamp)(v5 + 24), 4);
        if (v6) {
          break;
        }
      }

      if (v6 == 1)
      {
        if (*(_DWORD *)(v5 + 56) > 0xFu || xmlZMemBuffExtend(v5, 16LL) != -1)
        {
          unint64_t v10 = *(void *)(v5 + 8);
          __int128 v11 = *(_BYTE **)(v5 + 48);
          int v12 = 4;
          do
          {
            _BYTE *v11 = v10;
            v10 >>= 8;
            __int128 v11 = (_BYTE *)(*(void *)(v5 + 48) + 1LL);
            *(void *)(v5 + 48) = v11;
            --v12;
          }

          while (v12);
          unint64_t v13 = *(void *)(v5 + 40);
          int v14 = 4;
          do
          {
            _BYTE *v11 = v13;
            v13 >>= 8;
            __int128 v11 = (_BYTE *)(*(void *)(v5 + 48) + 1LL);
            *(void *)(v5 + 48) = v11;
            --v14;
          }

          while (v14);
          xmlCatalogAllow v7 = *(xmlChar **)(v5 + 16);
          int v8 = (_DWORD)v11 - (_DWORD)v7;
          xmlParserInputPtr v9 = "Content-Encoding: gzip";
          if (v7)
          {
LABEL_18:
            __int128 v15 = xmlNanoHTTPMethod(*((const char **)a1 + 1), a2, (const char *)v7, &contentType, v9, v8);
            if (v15)
            {
              __int128 v16 = v15;
              int v17 = xmlNanoHTTPReturnCode(v15);
              if ((v17 - 200) >= 0x64)
              {
                int v51 = 0;
                __int128 v49 = 0u;
                __int128 v50 = 0u;
                __int128 v47 = 0u;
                __int128 v48 = 0u;
                __int128 v45 = 0u;
                __int128 v46 = 0u;
                __int128 v43 = 0u;
                __int128 v44 = 0u;
                __int128 v41 = 0u;
                __int128 v42 = 0u;
                __int128 v39 = 0u;
                __int128 v40 = 0u;
                __int128 v37 = 0u;
                __int128 v38 = 0u;
                __int128 v35 = 0u;
                __int128 v36 = 0u;
                __int128 v33 = 0u;
                __int128 v34 = 0u;
                __int128 v31 = 0u;
                __int128 v32 = 0u;
                __int128 v29 = 0u;
                __int128 v30 = 0u;
                __int128 v28 = 0u;
                __int128 v26 = 0u;
                __int128 v27 = 0u;
                __int128 v24 = 0u;
                __int128 v25 = 0u;
                __int128 v22 = 0u;
                __int128 v23 = 0u;
                *(_OWORD *)xmlParserInputBufferPtr buf = 0u;
                __int128 v21 = 0u;
                xmlStrPrintf( buf,  500,  "xmlIOHTTPCloseWrite: HTTP '%s' of %d %s\n'%s' %s %d\n",  a2,  v8,  "bytes to URI",  *((const char **)a1 + 1),  "failed.  HTTP return code:",  v17);
                __xmlSimpleError(8, 1546, 0, (uint64_t)"write error", (uint64_t)buf);
                uint64_t v2 = 0xFFFFFFFFLL;
              }

              else
              {
                uint64_t v2 = 0LL;
              }

              xmlNanoHTTPClose(v16);
              xmlFree(contentType);
              goto LABEL_24;
            }

void *__cdecl xmlMallocLoc(size_t size, const char *file, int line)
{
  if ((xmlMemInitialized & 1) == 0) {
    xmlInitMemory();
  }
  if (size < 0xFFFFFFFFFFFFFFD8LL)
  {
    xmlParserInputPtr v9 = malloc(size + 40);
    int v8 = v9;
    if (v9)
    {
      void *v9 = 0x100005AA5LL;
      v9[2] = size;
      v9[3] = file;
      *((_DWORD *)v9 + 8) = line;
      xmlMutexLock((xmlMutexPtr)xmlMemMutex);
      int v10 = ++block;
      v8[1] = block;
      debugMemSize += size;
      ++debugMemBlocks;
      xmlMutexUnlock((xmlMutexPtr)xmlMemMutex);
      if (v10 == xmlMemStopAtBlock)
      {
        xmlGenericErrorFunc v11 = *__xmlGenericError();
        int v12 = __xmlGenericErrorContext();
        v11(*v12, "xmlMallocBreakpoint reached on block %d\n", xmlMemStopAtBlock);
      }

      v8 += 5;
      if ((void *)xmlMemTraceBlockAt == v8)
      {
        xmlGenericErrorFunc v13 = *__xmlGenericError();
        int v14 = __xmlGenericErrorContext();
        v13(*v14, "%p : Malloc(%lu) Ok\n", (const void *)xmlMemTraceBlockAt, size);
        xmlGenericErrorFunc v15 = *__xmlGenericError();
        __int128 v16 = *__xmlGenericErrorContext();
        v15(v16, "xmlMallocBreakpoint reached on block %d\n");
      }
    }

    else
    {
      xmlGenericErrorFunc v17 = *__xmlGenericError();
      __int128 v18 = *__xmlGenericErrorContext();
      v17(v18, "xmlMallocLoc : Out of free space\n");
    }
  }

  else
  {
    xmlGenericErrorFunc v6 = *__xmlGenericError();
    xmlCatalogAllow v7 = __xmlGenericErrorContext();
    v6(*v7, "xmlMallocLoc : Unsigned overflow\n");
    return 0LL;
  }

  return v8;
}

int xmlInitMemory(void)
{
  if ((xmlMemInitialized & 1) != 0)
  {
    LODWORD(v0) = -1;
  }

  else
  {
    xmlMemInitialized = 1;
    xmlMemMutex = (uint64_t)xmlNewMutex();
    uint64_t v1 = getenv("XML_MEM_BREAKPOINT");
    if (v1) {
      sscanf(v1, "%ud", &xmlMemStopAtBlock);
    }
    int v0 = getenv("XML_MEM_TRACE");
    if (v0)
    {
      sscanf(v0, "%p", &xmlMemTraceBlockAt);
      LODWORD(v0) = 0;
    }
  }

  return (int)v0;
}

void *__cdecl xmlMallocAtomicLoc(size_t size, const char *file, int line)
{
  if ((xmlMemInitialized & 1) == 0) {
    xmlInitMemory();
  }
  if (size < 0xFFFFFFFFFFFFFFD8LL)
  {
    xmlParserInputPtr v9 = malloc(size + 40);
    int v8 = v9;
    if (v9)
    {
      void *v9 = 0x400005AA5LL;
      v9[2] = size;
      v9[3] = file;
      *((_DWORD *)v9 + 8) = line;
      xmlMutexLock((xmlMutexPtr)xmlMemMutex);
      int v10 = ++block;
      v8[1] = block;
      debugMemSize += size;
      ++debugMemBlocks;
      xmlMutexUnlock((xmlMutexPtr)xmlMemMutex);
      if (v10 == xmlMemStopAtBlock)
      {
        xmlGenericErrorFunc v11 = *__xmlGenericError();
        int v12 = __xmlGenericErrorContext();
        v11(*v12, "xmlMallocBreakpoint reached on block %d\n", xmlMemStopAtBlock);
      }

      v8 += 5;
      if ((void *)xmlMemTraceBlockAt == v8)
      {
        xmlGenericErrorFunc v13 = *__xmlGenericError();
        int v14 = __xmlGenericErrorContext();
        v13(*v14, "%p : Malloc(%lu) Ok\n", (const void *)xmlMemTraceBlockAt, size);
        xmlGenericErrorFunc v15 = *__xmlGenericError();
        __int128 v16 = *__xmlGenericErrorContext();
        v15(v16, "xmlMallocBreakpoint reached on block %d\n");
      }
    }

    else
    {
      xmlGenericErrorFunc v17 = *__xmlGenericError();
      __int128 v18 = *__xmlGenericErrorContext();
      v17(v18, "xmlMallocAtomicLoc : Out of free space\n");
    }
  }

  else
  {
    xmlGenericErrorFunc v6 = *__xmlGenericError();
    xmlCatalogAllow v7 = __xmlGenericErrorContext();
    v6(*v7, "xmlMallocAtomicLoc : Unsigned overflow\n");
    return 0LL;
  }

  return v8;
}

void *__cdecl xmlMemMalloc(size_t size)
{
  return xmlMallocLoc(size, "none", 0);
}

void *__cdecl xmlReallocLoc(void *ptr, size_t size, const char *file, int line)
{
  if (!ptr) {
    return xmlMallocLoc(size, file, line);
  }
  if ((xmlMemInitialized & 1) == 0) {
    xmlInitMemory();
  }
  uint64_t v8 = *((void *)ptr - 4);
  if (v8 == xmlMemStopAtBlock)
  {
    xmlGenericErrorFunc v9 = *__xmlGenericError();
    int v10 = __xmlGenericErrorContext();
    v9(*v10, "xmlMallocBreakpoint reached on block %d\n", xmlMemStopAtBlock);
  }

  if (*((_DWORD *)ptr - 10) != 23205)
  {
    xmlGenericErrorFunc v14 = *__xmlGenericError();
    xmlGenericErrorFunc v15 = *__xmlGenericErrorContext();
    v14(v15, "Memory tag error occurs :%p \n\t bye\n");
    return 0LL;
  }

  *((_DWORD *)ptr - 10) = -23206;
  xmlMutexLock((xmlMutexPtr)xmlMemMutex);
  debugMemSize -= *((void *)ptr - 3);
  --debugMemBlocks;
  xmlMutexUnlock((xmlMutexPtr)xmlMemMutex);
  if (size >= 0xFFFFFFFFFFFFFFD8LL)
  {
    xmlGenericErrorFunc v11 = *__xmlGenericError();
    int v12 = *__xmlGenericErrorContext();
    v11(v12, "xmlReallocLoc : Unsigned overflow\n");
    return 0LL;
  }

  __int128 v16 = realloc((char *)ptr - 40, size + 40);
  if (!v16)
  {
    free((char *)ptr - 40);
    return 0LL;
  }

  xmlGenericErrorFunc v17 = v16;
  if ((void *)xmlMemTraceBlockAt == ptr)
  {
    xmlGenericErrorFunc v18 = *__xmlGenericError();
    __int128 v19 = __xmlGenericErrorContext();
    v18(*v19, "%p : Realloced(%lu -> %lu) Ok\n", (const void *)xmlMemTraceBlockAt, v17[2], size);
    xmlGenericErrorFunc v20 = *__xmlGenericError();
    __int128 v21 = __xmlGenericErrorContext();
    v20(*v21, "xmlMallocBreakpoint reached on block %d\n", xmlMemStopAtBlock);
  }

  *xmlGenericErrorFunc v17 = 0x200005AA5LL;
  v17[1] = v8;
  v17[2] = size;
  _OWORD v17[3] = file;
  *((_DWORD *)v17 + 8) = line;
  xmlMutexLock((xmlMutexPtr)xmlMemMutex);
  size_t v22 = debugMemSize + size;
  debugMemSize = v22;
  ++debugMemBlocks;
  if (v22 > debugMaxMemSize) {
    debugMaxMemSize = v22;
  }
  xmlMutexUnlock((xmlMutexPtr)xmlMemMutex);
  return v17 + 5;
}

void *__cdecl xmlMemRealloc(void *ptr, size_t size)
{
  return xmlReallocLoc(ptr, size, "none", 0);
}

void xmlMemFree(void *ptr)
{
  if (ptr)
  {
    if (ptr == (void *)-1LL)
    {
      xmlGenericErrorFunc v2 = *__xmlGenericError();
      uint64_t v3 = __xmlGenericErrorContext();
      v2(*v3, "trying to free pointer from freed area\n");
LABEL_11:
      xmlGenericErrorFunc v12 = *__xmlGenericError();
      xmlGenericErrorFunc v13 = __xmlGenericErrorContext();
      v12(*v13, "xmlMemFree(%p) error\n", ptr);
      xmlGenericErrorFunc v14 = *__xmlGenericError();
      xmlGenericErrorFunc v15 = __xmlGenericErrorContext();
      v14(*v15, "xmlMallocBreakpoint reached on block %d\n", xmlMemStopAtBlock);
      return;
    }

    if ((void *)xmlMemTraceBlockAt == ptr)
    {
      xmlGenericErrorFunc v4 = *__xmlGenericError();
      uint64_t v5 = __xmlGenericErrorContext();
      v4(*v5, "%p : Freed()\n", (const void *)xmlMemTraceBlockAt);
      xmlGenericErrorFunc v6 = *__xmlGenericError();
      xmlCatalogAllow v7 = __xmlGenericErrorContext();
      v6(*v7, "xmlMallocBreakpoint reached on block %d\n", xmlMemStopAtBlock);
    }

    if (*((_DWORD *)ptr - 10) != 23205)
    {
      xmlGenericErrorFunc v10 = *__xmlGenericError();
      xmlGenericErrorFunc v11 = __xmlGenericErrorContext();
      v10(*v11, "Memory tag error occurs :%p \n\t bye\n", (char *)ptr - 40);
      goto LABEL_11;
    }

    if (*((void *)ptr - 4) == xmlMemStopAtBlock)
    {
      xmlGenericErrorFunc v8 = *__xmlGenericError();
      xmlGenericErrorFunc v9 = __xmlGenericErrorContext();
      v8(*v9, "xmlMallocBreakpoint reached on block %d\n", xmlMemStopAtBlock);
    }

    *((_DWORD *)ptr - 10) = -23206;
    memset(ptr, 255, *((void *)ptr - 3));
    xmlMutexLock((xmlMutexPtr)xmlMemMutex);
    debugMemSize -= *((void *)ptr - 3);
    --debugMemBlocks;
    xmlMutexUnlock((xmlMutexPtr)xmlMemMutex);
    free((char *)ptr - 40);
  }

char *__cdecl xmlMemStrdupLoc(const char *str, const char *file, int line)
{
  size_t v6 = strlen(str);
  size_t v7 = v6 + 1;
  if ((xmlMemInitialized & 1) == 0) {
    xmlInitMemory();
  }
  if (v7 < 0xFFFFFFFFFFFFFFD8LL)
  {
    xmlGenericErrorFunc v11 = (char *)malloc(v6 + 41);
    xmlGenericErrorFunc v10 = v11;
    if (v11)
    {
      *(void *)xmlGenericErrorFunc v11 = 0x300005AA5LL;
      *((void *)v11 + 2) = v7;
      *((void *)v11 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = file;
      *((_DWORD *)v11 + 8) = line;
      xmlMutexLock((xmlMutexPtr)xmlMemMutex);
      int v12 = ++block;
      *((void *)v10 + 1) = block;
      debugMemSize += v7;
      ++debugMemBlocks;
      xmlMutexUnlock((xmlMutexPtr)xmlMemMutex);
      v10 += 40;
      if (v12 == xmlMemStopAtBlock)
      {
        xmlGenericErrorFunc v13 = *__xmlGenericError();
        xmlGenericErrorFunc v14 = __xmlGenericErrorContext();
        v13(*v14, "xmlMallocBreakpoint reached on block %d\n", xmlMemStopAtBlock);
      }

      strncpy(v10, str, v7);
      v10[v6] = 0;
      if ((char *)xmlMemTraceBlockAt == v10)
      {
        xmlGenericErrorFunc v15 = *__xmlGenericError();
        __int128 v16 = __xmlGenericErrorContext();
        v15(*v16, "%p : Strdup() Ok\n", (const void *)xmlMemTraceBlockAt);
        xmlGenericErrorFunc v17 = *__xmlGenericError();
        xmlGenericErrorFunc v18 = __xmlGenericErrorContext();
        v17(*v18, "xmlMallocBreakpoint reached on block %d\n", xmlMemStopAtBlock);
      }
    }
  }

  else
  {
    xmlGenericErrorFunc v8 = *__xmlGenericError();
    xmlGenericErrorFunc v9 = __xmlGenericErrorContext();
    v8(*v9, "xmlMemStrdupLoc : Unsigned overflow\n");
    return 0LL;
  }

  return v10;
}

char *__cdecl xmlMemoryStrdup(const char *str)
{
  return xmlMemStrdupLoc(str, "none", 0);
}

size_t xmlMemSize(size_t ptr)
{
  if (ptr)
  {
    if (*(_DWORD *)(ptr - 40) == 23205) {
      return *(void *)(ptr - 24);
    }
    else {
      return 0LL;
    }
  }

  return ptr;
}

int xmlMemUsed(void)
{
  int v0 = debugMemSize;
  xmlMutexUnlock((xmlMutexPtr)xmlMemMutex);
  return v0;
}

int xmlMemBlocks(void)
{
  int v0 = debugMemBlocks;
  xmlMutexUnlock((xmlMutexPtr)xmlMemMutex);
  return v0;
}

void xmlMemDisplayLast(FILE *fp, uint64_t nbBytes)
{
  if (nbBytes >= 1)
  {
    if (fp)
    {
      fwrite("Memory list not compiled (MEM_LIST not defined !)\n", 0x32uLL, 1uLL, fp);
    }

    else
    {
      xmlGenericErrorFunc v2 = fopen(".memorylist", "w");
      if (v2)
      {
        uint64_t v3 = v2;
        fwrite("Memory list not compiled (MEM_LIST not defined !)\n", 0x32uLL, 1uLL, v2);
        fclose(v3);
      }
    }
  }

void xmlMemDisplay(FILE *fp)
{
  if (fp)
  {
    fwrite("Memory list not compiled (MEM_LIST not defined !)\n", 0x32uLL, 1uLL, fp);
  }

  else
  {
    uint64_t v1 = fopen(".memorylist", "w");
    if (v1)
    {
      xmlGenericErrorFunc v2 = v1;
      fwrite("Memory list not compiled (MEM_LIST not defined !)\n", 0x32uLL, 1uLL, v1);
      fclose(v2);
    }
  }

void xmlMemShow(FILE *fp, int nr)
{
  if (fp) {
    fprintf(fp, "      MEMORY ALLOCATED : %lu, MAX was %lu\n", debugMemSize, debugMaxMemSize);
  }
}

void xmlCleanupMemory(void)
{
  if (xmlMemInitialized == 1)
  {
    xmlFreeMutex((xmlMutexPtr)xmlMemMutex);
    xmlMemMutex = 0LL;
    xmlMemInitialized = 0;
  }

int xmlMemSetup( xmlFreeFunc freeFunc, xmlMallocFunc mallocFunc, xmlReallocFunc reallocFunc, xmlStrdupFunc strdupFunc)
{
  int result = -1;
  if (freeFunc && mallocFunc && reallocFunc)
  {
    if (strdupFunc)
    {
      int result = 0;
      xmlFree = freeFunc;
      xmlMxmlBufferAllocationScheme alloc = mallocFunc;
      xmlMallocAtomic = mallocFunc;
      xmlRexmlBufferAllocationScheme alloc = reallocFunc;
      xmlMemStrdup = strdupFunc;
    }
  }

  return result;
}

int xmlMemGet( xmlFreeFunc *freeFunc, xmlMallocFunc *mallocFunc, xmlReallocFunc *reallocFunc, xmlStrdupFunc *strdupFunc)
{
  if (freeFunc) {
    *freeFunc = xmlFree;
  }
  if (mallocFunc) {
    *mallocFunc = xmlMalloc;
  }
  if (reallocFunc) {
    *reallocFunc = xmlRealloc;
  }
  if (strdupFunc) {
    *strdupFunc = xmlMemStrdup;
  }
  return 0;
}

int xmlGcMemSetup( xmlFreeFunc freeFunc, xmlMallocFunc mallocFunc, xmlMallocFunc mallocAtomicFunc, xmlReallocFunc reallocFunc, xmlStrdupFunc strdupFunc)
{
  int result = -1;
  if (freeFunc && mallocFunc && mallocAtomicFunc && reallocFunc)
  {
    if (strdupFunc)
    {
      int result = 0;
      xmlFree = freeFunc;
      xmlMxmlBufferAllocationScheme alloc = mallocFunc;
      xmlMallocAtomic = mallocAtomicFunc;
      xmlRexmlBufferAllocationScheme alloc = reallocFunc;
      xmlMemStrdup = strdupFunc;
    }
  }

  return result;
}

int xmlGcMemGet( xmlFreeFunc *freeFunc, xmlMallocFunc *mallocFunc, xmlMallocFunc *mallocAtomicFunc, xmlReallocFunc *reallocFunc, xmlStrdupFunc *strdupFunc)
{
  if (freeFunc) {
    *freeFunc = xmlFree;
  }
  if (mallocFunc) {
    *mallocFunc = xmlMalloc;
  }
  if (mallocAtomicFunc) {
    *mallocAtomicFunc = xmlMallocAtomic;
  }
  if (reallocFunc) {
    *reallocFunc = xmlRealloc;
  }
  if (strdupFunc) {
    *strdupFunc = xmlMemStrdup;
  }
  return 0;
}

xmlModulePtr xmlModuleOpen(const char *filename, int options)
{
  uint64_t v3 = (xmlChar **)xmlMalloc(0x10uLL);
  xmlGenericErrorFunc v4 = v3;
  if (v3)
  {
    *uint64_t v3 = 0LL;
    v3[1] = 0LL;
    uint64_t v5 = (xmlChar *)dlopen(filename, 10);
    v4[1] = v5;
    if (v5)
    {
      *xmlGenericErrorFunc v4 = xmlStrdup((const xmlChar *)filename);
    }

    else
    {
      xmlFree(v4);
      __xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  0LL,  0x1Au,  4900,  3,  0LL,  0,  0LL,  (xmlChar *)filename,  0LL,  0,  0,  "failed to open %s\n",  (char)filename);
      return 0LL;
    }
  }

  else
  {
    __xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  0LL,  0x1Au,  2,  3,  0LL,  0,  (const xmlChar *)"creating module",  0LL,  0LL,  0,  0,  "Memory allocation failed : %s\n",  (char)"creating module");
  }

  return (xmlModulePtr)v4;
}

int xmlModuleSymbol(xmlModulePtr module, const char *name, void **result)
{
  if (!name || !module || !result)
  {
    __xmlRaiseError(0LL, 0LL, 0LL, 0LL, 0LL, 0x1Au, 4900, 3, 0LL, 0, 0LL, 0LL, 0LL, 0, 0, "null parameter\n", v6);
    goto LABEL_7;
  }

  *int result = dlsym(*((void **)module + 1), name);
  xmlGenericErrorFunc v4 = dlerror();
  if (v4)
  {
    __xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  0LL,  0x1Au,  4900,  3,  0LL,  0,  0LL,  (xmlChar *)name,  0LL,  0,  (unsigned __int128)0LL >> 96,  "failed to find symbol: %s\n",  (char)name);
LABEL_7:
    LODWORD(vxmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = -1;
  }

  return (int)v4;
}

int xmlModuleClose(xmlModulePtr module)
{
  if (module)
  {
    if (dlclose(*((void **)module + 1)))
    {
      __xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  0LL,  0x1Au,  4901,  3,  0LL,  0,  0LL,  *(xmlChar **)module,  0LL,  0,  0,  "failed to close: %s\n",  *(void *)module);
      return -2;
    }

    else
    {
      xmlFree(*(void **)module);
      xmlFree(module);
      return 0;
    }
  }

  else
  {
    __xmlRaiseError(0LL, 0LL, 0LL, 0LL, 0LL, 0x1Au, 4901, 3, 0LL, 0, 0LL, 0LL, 0LL, 0, 0, "null module pointer\n", v3);
    return -1;
  }

int xmlModuleFree(xmlModulePtr module)
{
  if (module)
  {
    xmlFree(*(void **)module);
    xmlFree(module);
    return 0;
  }

  else
  {
    __xmlRaiseError(0LL, 0LL, 0LL, 0LL, 0LL, 0x1Au, 4901, 3, 0LL, 0, 0LL, 0LL, 0LL, 0, 0, "null module pointer\n", v3);
    return -1;
  }

int xmlTextReaderRead(xmlTextReaderPtr reader)
{
  if (!reader) {
    return -1;
  }
  *((void *)reader + 15) = 0LL;
  uint64_t v2 = *((void *)reader + 1);
  if (v2)
  {
    int v3 = *((_DWORD *)reader + 6);
    if (v3 == 2) {
      return 0;
    }
    uint64_t v10 = *((void *)reader + 14);
    while (1)
    {
      if (v10)
      {
        if (v3 != 4)
        {
          unsigned int v11 = *(_DWORD *)(v10 + 8);
          if (v11 > 0x13 || ((1 << v11) & 0x84020) == 0)
          {
            uint64_t v13 = *(void *)(v10 + 24);
            if (v13)
            {
              int v3 = 0;
              *((void *)reader + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v13;
              ++*((_DWORD *)reader + 32);
              goto LABEL_26;
            }

            if (v11 == 2)
            {
              int v3 = 4;
              goto LABEL_27;
            }
          }
        }

        uint64_t v13 = *(void *)(v10 + 48);
        if (v13)
        {
          int v3 = 0;
          *((void *)reader + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v13;
LABEL_26:
          uint64_t v10 = v13;
          goto LABEL_27;
        }

        uint64_t v13 = *(void *)(v10 + 40);
        if (v13)
        {
          if ((*(_DWORD *)(v13 + 8) | 4) == 0xD)
          {
LABEL_31:
            int result = 0;
            int v14 = 2;
            goto LABEL_68;
          }

          *((void *)reader + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v13;
          --*((_DWORD *)reader + 32);
          int v3 = 4;
          goto LABEL_26;
        }

        int v3 = 2;
      }

      else
      {
        uint64_t v10 = *(void *)(v2 + 24);
        if (!v10) {
          goto LABEL_31;
        }
        int v3 = 0;
        *((void *)reader + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v10;
      }

LABEL_125:
      uint64_t v43 = *((void *)reader + 14);
      if (v43
        && !*(void *)(v43 + 48)
        && (*(_DWORD *)(v43 + 8) - 3) <= 1
        && !xmlTextReaderExpand(reader))
      {
        return -1;
      }

      if (*((_DWORD *)reader + 68) && !*((_DWORD *)reader + 74) && *((_DWORD *)reader + 6) != 4)
      {
        uint64_t v44 = *((void *)reader + 14);
        if (!v44) {
          goto LABEL_181;
        }
        if (*(_DWORD *)(v44 + 8) == 1)
        {
          uint64_t v45 = *(void *)(v44 + 72);
          if (v45)
          {
            if (xmlStrEqual(*(const xmlChar **)(v45 + 16), (const xmlChar *)"http://www.w3.org/2003/XInclude")
              || xmlStrEqual( *(const xmlChar **)(*(void *)(*((void *)reader + 14) + 72LL) + 16LL),  (const xmlChar *)"http://www.w3.org/2001/XInclude"))
            {
              if (!*((void *)reader + 36))
              {
                __int128 v46 = xmlXIncludeNewContext(*(xmlDocPtr *)(*((void *)reader + 4) + 16LL));
                *((void *)reader + 36) = v46;
                xmlXIncludeSetFlags(v46, *((_DWORD *)reader + 81) & 0xFFFF7FFF);
              }

              if (!xmlTextReaderExpand(reader)) {
                return -1;
              }
              xmlXIncludeProcessNode(*((xmlXIncludeCtxtPtr *)reader + 36), *((xmlNodePtr *)reader + 14));
            }
          }
        }
      }

      uint64_t v8 = *((void *)reader + 14);
      if (!v8)
      {
LABEL_181:
        BOOL v57 = (_DWORD *)((char *)reader + 16);
        goto LABEL_182;
      }

      int v47 = *(_DWORD *)(v8 + 8);
      if (v47 == 5) {
        break;
      }
      int v48 = 1;
      if (v47 == 19) {
        goto LABEL_146;
      }
      if (v47 != 20) {
        goto LABEL_156;
      }
      int v48 = -1;
LABEL_146:
      *((_DWORD *)reader + 74) += v48;
    }

    uint64_t v49 = *((void *)reader + 4);
    if (!v49) {
      goto LABEL_156;
    }
    if (*(_DWORD *)(v49 + 28) == 1)
    {
      uint64_t v50 = *(void *)(v8 + 24);
      if (!v50 || *(_DWORD *)(v50 + 8) != 17 || !*(void *)(v50 + 24)) {
        goto LABEL_156;
      }
      xmlTextReaderEntPush((uint64_t)reader, v8);
      uint64_t v8 = *(void *)(*(void *)(*((void *)reader + 14) + 24LL) + 24LL);
      *((void *)reader + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v8;
    }

    else
    {
      if (!*((_DWORD *)reader + 4)) {
        goto LABEL_156;
      }
      xmlTextReaderValidateEntity((uint64_t)reader);
      uint64_t v8 = *((void *)reader + 14);
    }

    if (!v8) {
      goto LABEL_181;
    }
LABEL_156:
    if (*(_DWORD *)(v8 + 8) != 17) {
      break;
    }
    uint64_t v51 = *((void *)reader + 21);
    if (!v51 || *(void *)(v51 + 24) != v8) {
      break;
    }
    uint64_t v8 = 0LL;
    int v52 = *((_DWORD *)reader + 44);
    unsigned int v53 = v52 - 1;
    if (v52 >= 1)
    {
      uint64_t v54 = 0LL;
      *((_DWORD *)reader + 4xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v53;
      uint64_t v55 = *((void *)reader + 23);
      if (v52 != 1) {
        uint64_t v54 = *(void *)(v55 + 8LL * (v52 - 2));
      }
      *((void *)reader + 21) = v54;
      uint64_t v8 = *(void *)(v55 + 8LL * v53);
      *(void *)(v55 + 8LL * v5xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0LL;
    }

    *((void *)reader + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v8;
    ++*((_DWORD *)reader + 32);
    if (!v8) {
      goto LABEL_164;
    }
  }

  BOOL v57 = (_DWORD *)((char *)reader + 16);
  if (*((_DWORD *)reader + 4))
  {
    int v58 = *(_DWORD *)(v8 + 8);
    if (v58 == 1)
    {
      int v59 = *((_DWORD *)reader + 6);
      if (v59 != 2 && v59 != 4) {
        xmlTextReaderValidatePush((uint64_t)reader);
      }
    }

    else if ((v58 - 3) <= 1)
    {
      int v63 = *(xmlChar **)(v8 + 80);
      int v64 = xmlStrlen(v63);
      xmlTextReaderValidateCData((uint64_t)reader, v63, v64);
    }
  }

      *retValue = v29;
LABEL_109:
      if (*retValue) {
        return 0;
      }
      else {
        return -1;
      }
    case 4:
      memset(__str, 0, sizeof(__str));
      *(void *)((char *)v81 + 6) = 0LL;
      *(void *)&v81[0] = 0LL;
      if ((*((_BYTE *)val + 40) & 1) == 0)
      {
        BOOL v32 = *((_DWORD *)val + 6);
        char v75 = *((void *)val + 4);
        *(void *)&unsigned int v71 = (v32 >> 9) & 0x1F;
        xmlURIPtr v73 = (v32 >> 14) & 0x3F;
        int v33 = "%02u:%02u:%02.14g";
        goto LABEL_68;
      }

      xmlSchemaDateNormalize((__n128 *)val, 0.0);
      if (!v55) {
        return -1;
      }
      int v56 = (xmlSchemaVal *)v55;
      BOOL v57 = *(_DWORD *)(v55 + 24);
      xmlURIPtr v76 = *(void *)(v55 + 32);
      unsigned int v72 = (v57 >> 9) & 0x1F;
      char v74 = (v57 >> 14) & 0x3F;
      int v58 = "%02u:%02u:%02.14gZ";
      goto LABEL_83;
    case 5:
      int v12 = (xmlChar *)xmlMalloc(6uLL);
      *retValue = v12;
      if (!v12) {
        return -1;
      }
      int v70 = (*((_DWORD *)val + 6) >> 4) & 0x1F;
      uint64_t v13 = "---%02u";
      goto LABEL_51;
    case 6:
      int v12 = (xmlChar *)xmlMalloc(6uLL);
      *retValue = v12;
      if (!v12) {
        return -1;
      }
      int v70 = *((_DWORD *)val + 6) & 0xF;
      uint64_t v13 = "--%02u";
LABEL_51:
      char v34 = 6LL;
      goto LABEL_108;
    case 7:
      unsigned int v35 = (xmlChar *)xmlMalloc(8uLL);
      *retValue = v35;
      if (!v35) {
        return -1;
      }
      snprintf((char *)v35, 8uLL, "--%02u-%02u");
      goto LABEL_109;
    case 8:
      memset(__str, 0, sizeof(__str));
      *(void *)((char *)v81 + 6) = 0LL;
      *(void *)&v81[0] = 0LL;
      unsigned int v71 = *((double *)val + 2);
      int v33 = "%04ld";
      goto LABEL_68;
    case 9:
      *(_OWORD *)char __str = 0u;
      memset(v81, 0, 19);
      int v36 = *((void *)val + 2);
      if (v36 < 0)
      {
        *(void *)&unsigned int v71 = -v36;
        xmlURIPtr v73 = *((_DWORD *)val + 6) & 0xF;
        int v33 = "-%04ld-%02u";
      }

      else
      {
        unsigned int v71 = *((double *)val + 2);
        xmlURIPtr v73 = *((_DWORD *)val + 6) & 0xF;
        int v33 = "%04ld-%02u";
      }

      uint64_t v50 = 35LL;
      goto LABEL_100;
    case 0xA:
      memset(__str, 0, sizeof(__str));
      *(void *)((char *)v81 + 6) = 0LL;
      *(void *)&v81[0] = 0LL;
      if ((*((_BYTE *)val + 40) & 1) == 0)
      {
        __int128 v37 = *((_DWORD *)val + 6);
        xmlURIPtr v73 = v37 & 0xF;
        char v75 = (v37 >> 4) & 0x1F;
        unsigned int v71 = *((double *)val + 2);
        int v33 = "%04ld-%02u-%02u";
LABEL_68:
        uint64_t v50 = 30LL;
LABEL_100:
        snprintf( __str,  v50,  v33,  *(void *)&v71,  v73,  v75,  v77,  v78,  v79,  *(void *)__str,  *(void *)&__str[8],  v81[0],  v81[1],  v82,  v83,  v84,  v85);
        goto LABEL_101;
      }

      xmlSchemaDateNormalize((__n128 *)val, 0.0);
      if (!v59) {
        return -1;
      }
      int v56 = (xmlSchemaVal *)v59;
      int v60 = *(_DWORD *)(v59 + 24);
      char v74 = v60 & 0xF;
      xmlURIPtr v76 = (v60 >> 4) & 0x1F;
      unsigned int v72 = *(void *)(v59 + 16);
      int v58 = "%04ld-%02u-%02uZ";
LABEL_83:
      uint64_t v61 = 30LL;
      goto LABEL_86;
    case 0xB:
      LOWORD(v82) = 0;
      memset(v81, 0, sizeof(v81));
      *(_OWORD *)char __str = 0u;
      if ((*((_WORD *)val + 20) & 1) == 0)
      {
        snprintf(__str, 0x32uLL, "%04ld-%02u-%02uT%02u:%02u:%02.14g");
        goto LABEL_101;
      }

      xmlSchemaDateNormalize((__n128 *)val, 0.0);
      if (!v62) {
        return -1;
      }
      int v56 = (xmlSchemaVal *)v62;
      int v63 = *(_DWORD *)(v62 + 24);
      uint64_t v79 = *(void *)(v62 + 32);
      int v77 = (v63 >> 9) & 0x1F;
      char v78 = (v63 >> 14) & 0x3F;
      char v74 = v63 & 0xF;
      xmlURIPtr v76 = (v63 >> 4) & 0x1F;
      unsigned int v72 = *(void *)(v62 + 16);
      int v58 = "%04ld-%02u-%02uT%02u:%02u:%02.14gZ";
      uint64_t v61 = 50LL;
LABEL_86:
      snprintf( __str,  v61,  v58,  v72,  v74,  v76,  v77,  v78,  v79,  *(void *)__str,  *(void *)&__str[8],  v81[0],  v81[1],  (void)v82);
      xmlSchemaFreeValue(v56);
      goto LABEL_101;
    case 0xC:
      LODWORD(v85) = 0;
      int v83 = 0u;
      uint64_t v84 = 0u;
      int v82 = 0u;
      *(_OWORD *)char __str = 0u;
      memset(v81, 0, sizeof(v81));
      char v38 = *((void *)val + 2);
      if (v38 >= 0) {
        int v39 = *((void *)val + 2);
      }
      else {
        int v39 = -v38;
      }
      char v40 = vcvtmd_u64_f64((double)v39 / 12.0);
      uint64_t v41 = v39 - 12 * v40;
      uint64_t v42 = *((double *)val + 4);
      uint64_t v43 = fabs(v42);
      uint64_t v44 = vcvtmd_u64_f64(v43 / 86400.0);
      uint64_t v45 = v43 - (double)(86400 * v44);
      __int128 v46 = 0.0;
      if (v45 <= 0.0)
      {
        int v47 = 0LL;
      }

      else
      {
        int v47 = vcvtmd_u64_f64(v45 / 3600.0);
        int v48 = v45 - (double)(3600 * v47);
        if (v48 > 0.0)
        {
          uint64_t v49 = vcvtmd_u64_f64(v48 / 60.0);
          __int128 v46 = v48 - (double)(60 * v49);
          goto LABEL_90;
        }
      }

      uint64_t v49 = 0LL;
LABEL_90:
      if (v42 < 0.0 || v38 < 0) {
        int v65 = "P%luY%luM%luDT%luH%luM%.14gS";
      }
      else {
        int v65 = "-P%luY%luM%luDT%luH%luM%.14gS";
      }
      snprintf( __str,  0x64uLL,  v65,  v40,  v41,  v44,  v47,  v49,  *(void *)&v46,  *(void *)__str,  *(void *)&__str[8],  v81[0],  v81[1],  v82,  v83,  v84,  v85);
LABEL_101:
      uint64_t v16 = __str;
      goto LABEL_102;
    case 0xD:
      memset(__str, 0, sizeof(__str));
      *(void *)((char *)v81 + 6) = 0LL;
      *(void *)&v81[0] = 0LL;
      unsigned int v71 = *((float *)val + 4);
      int v33 = "%01.14e";
      goto LABEL_68;
    case 0xE:
      snprintf(__str, 0x28uLL, "%01.14e");
      goto LABEL_101;
    case 0xF:
      if (*((_DWORD *)val + 4)) {
        uint64_t v16 = "true";
      }
      else {
        uint64_t v16 = "false";
      }
      goto LABEL_102;
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x14:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x1A:
    case 0x1C:
    case 0x1D:
      int v14 = (const xmlChar *)*((void *)val + 2);
      if (!v14) {
        return -1;
      }
      uint64_t v15 = xmlSchemaCollapseString(v14);
      goto LABEL_14;
    case 0x15:
      if (*((void *)val + 3))
      {
        uint64_t v51 = xmlStrdup((const xmlChar *)"{");
        *retValue = v51;
        int v52 = xmlStrcat(v51, *((const xmlChar **)val + 3));
        *retValue = v52;
        unsigned int v53 = xmlStrcat(v52, (const xmlChar *)"}");
        *retValue = v53;
        uint64_t v54 = xmlStrcat(v53, *((const xmlChar **)val + 3));
        goto LABEL_103;
      }

      char v66 = xmlStrdup(*((const xmlChar **)val + 2));
      int result = 0;
      *retValue = v66;
      return result;
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
      uint64_t v5 = *((unsigned __int16 *)val + 22);
      int v6 = *((void *)val + 2);
      if ((v5 & 0xFF00) == 0x100 && v6 == 0)
      {
        uint64_t v16 = "0";
LABEL_102:
        uint64_t v54 = xmlStrdup((const xmlChar *)v16);
LABEL_103:
        *retValue = v54;
      }

      else
      {
        uint64_t v8 = *((void *)val + 3);
        uint64_t v9 = *((void *)val + 4);
        uint64_t v10 = v5 & 1;
        unsigned int v11 = v10 + (v5 >> 8) + 1;
        int v12 = (xmlChar *)xmlMalloc(v11);
        *retValue = v12;
        if (!v12) {
          return -1;
        }
        if (v9)
        {
          xmlURIPtr v73 = v8;
          char v75 = v6;
          int v70 = v9;
          if (v10) {
            uint64_t v13 = "-%lu%lu%lu";
          }
          else {
            uint64_t v13 = "%lu%lu%lu";
          }
        }

        else if (v8)
        {
          int v70 = v8;
          xmlURIPtr v73 = v6;
          if (v10) {
            uint64_t v13 = "-%lu%lu";
          }
          else {
            uint64_t v13 = "%lu%lu";
          }
        }

        else
        {
          int v70 = v6;
          if (v10) {
            uint64_t v13 = "-%lu";
          }
          else {
            uint64_t v13 = "%lu";
          }
        }

        char v34 = v11;
LABEL_108:
        snprintf((char *)v12, v34, v13, v70, v73, v75);
      }

      goto LABEL_109;
    case 0x2B:
    case 0x2C:
      goto LABEL_15;
    default:
      *retValue = xmlStrdup((const xmlChar *)"???");
      return 1;
  }

LABEL_195:
  if (*v57 == 4 && !*((_DWORD *)reader + 65))
  {
    int v65 = (xmlSchemaValidCtxt *)*((void *)reader + 31);
    if (v65) {
      *((_DWORD *)reader + 65) = xmlSchemaIsValid(v65) == 0;
    }
  }

  return 1;
}

      while (v11 != v2)
      {
        if (*(_DWORD *)(v3 + 56) == 1) {
          int result = xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, v6);
        }
        uint64_t v10 = *(void *)(v11 + 48);
        if (v10) {
          goto LABEL_2;
        }
        unsigned int v11 = *(void *)(v11 + 40);
        if (!v11) {
          return result;
        }
        if (*(_DWORD *)(v11 + 8) == 1)
        {
          uint64_t v69 = *(_DWORD *)(v3 + 52);
          int v70 = __OFSUB__(v69, 1);
          unsigned int v71 = v69 - 1;
          if (v71 < 0 == v70) {
            *(_DWORD *)(v3 + 52) = v71;
          }
          if (*__xmlIndentTreeOutput() && *(_DWORD *)(v3 + 56) == 1)
          {
            unsigned int v72 = *(_DWORD *)(v3 + 52);
            if (v72 >= *(_DWORD *)(v3 + 124)) {
              unsigned int v72 = *(_DWORD *)(v3 + 124);
            }
            xmlOutputBufferWrite((xmlOutputBufferPtr)v5, v72 * *(_DWORD *)(v3 + 128), buf);
          }

          xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 2, v7);
          xmlURIPtr v73 = *(void *)(v11 + 72);
          if (v73)
          {
            char v74 = *(const char **)(v73 + 24);
            if (v74)
            {
              xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, v74);
              xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, v9);
            }
          }

          xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, *(const char **)(v11 + 16));
          int result = xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, v8);
          if (v11 == v4)
          {
            xmlGenericErrorFunc v4 = 0LL;
            *(_DWORD *)(v3 + 56) = v84;
          }
        }
      }

      return result;
    case 5:
      xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, "&");
      xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, *(const char **)(v11 + 16));
      int result = xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, ";");
      goto LABEL_195;
    case 7:
      int v36 = v7;
      __int128 v37 = *(void *)(v11 + 80);
      xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 2, "<?");
      xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, *(const char **)(v11 + 16));
      if (v37 && *(void *)(v11 + 80))
      {
        xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, " ");
        xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, *(const char **)(v11 + 80));
      }

      int result = xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 2, "?>");
      int v7 = v36;
      goto LABEL_195;
    case 8:
      if (*(void *)(v11 + 80))
      {
        xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 4, "<!--");
        xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, *(const char **)(v11 + 80));
        int result = xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 3, "-->");
      }

      goto LABEL_195;
    case 9:
    case 13:
      int result = xmlDocContentDumpOutput(v3, v11);
      goto LABEL_195;
    case 14:
      int result = xmlDtdDumpOutput(v3, v11);
      goto LABEL_195;
    case 15:
      int result = (uint64_t)xmlBufDumpElementDecl(*(uint64x2_t **)(v5 + 32), (xmlElement *)v11);
      goto LABEL_195;
    case 16:
      int result = (uint64_t)xmlBufDumpAttributeDecl(*(uint64x2_t **)(v5 + 32), (xmlAttribute *)v11);
      goto LABEL_195;
    case 17:
      int result = (uint64_t)xmlBufDumpEntityDecl(*(uint64x2_t **)(v5 + 32), (xmlEntity *)v11);
      goto LABEL_195;
    case 18:
      int result = xmlNsDumpOutput(*(void *)(v3 + 40), v11, v3);
      goto LABEL_195;
    default:
      goto LABEL_195;
  }

uint64_t xmlTextReaderPushData(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1)
  {
    int v3 = *(xmlBuf **)(v1 + 32);
    uint64_t result = 0xFFFFFFFFLL;
    if (!v3) {
      return result;
    }
    int v5 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = -1;
    int AllocationScheme = xmlBufGetAllocationScheme((uint64_t)v3);
    while (*(_DWORD *)(a1 + 24) == -1)
    {
      if (xmlBufUse(v3) < (*(_DWORD *)(a1 + 108) + 512))
      {
        if (*(_DWORD *)a1 == 3) {
          goto LABEL_31;
        }
        uint64_t result = xmlParserInputBufferRead(*(xmlParserInputBufferPtr *)(a1 + 48), 4096);
        if ((_DWORD)result || AllocationScheme != 2)
        {
          if ((result & 0x80000000) != 0)
          {
            *(_DWORD *)a1 = 3;
            *(_DWORD *)(a1 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v5;
            return result;
          }

          if (!(_DWORD)result)
          {
            *(_DWORD *)a1 = 3;
            goto LABEL_31;
          }
        }

        else if (xmlBufUse(v3) == *(_DWORD *)(a1 + 108))
        {
          *(_DWORD *)a1 = 3;
          *(_DWORD *)(a1 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v5;
        }
      }

      if (xmlBufUse(v3) < (*(_DWORD *)(a1 + 108) + 512))
      {
        int v11 = xmlBufUse(v3) - *(_DWORD *)(a1 + 108);
        int v12 = *(xmlParserCtxt **)(a1 + 32);
        uint64_t v13 = xmlBufContent(v3);
        int v14 = xmlParseChunk(v12, (const char *)&v13[*(unsigned int *)(a1 + 108)], v11, 0);
        *(_DWORD *)(a1 + 108) += v11;
        if (!v14) {
          break;
        }
        uint64_t v10 = *(void *)(a1 + 32);
LABEL_19:
        *(_DWORD *)(v10 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0;
        break;
      }

      int v7 = *(xmlParserCtxt **)(a1 + 32);
      uint64_t v8 = xmlBufContent(v3);
      int v9 = xmlParseChunk(v7, (const char *)&v8[*(unsigned int *)(a1 + 108)], 512, 0);
      *(_DWORD *)(a1 + 108) += 512;
      uint64_t v10 = *(void *)(a1 + 32);
      if (v9) {
        goto LABEL_19;
      }
      if (!*(_DWORD *)(v10 + 24)) {
        break;
      }
    }

    if (*(_DWORD *)a1 != 3)
    {
      if (*(_DWORD *)a1 == 1 && AllocationScheme != 2 && *(_DWORD *)(a1 + 108) >= 0x1000u)
      {
        size_t v16 = xmlBufUse(v3);
        size_t v17 = *(unsigned int *)(a1 + 108);
        if (v16 - v17 <= 0x200)
        {
          int v18 = xmlBufShrink(v3, v17);
          if ((v18 & 0x80000000) == 0) {
            *(_DWORD *)(a1 + 108) -= v18;
          }
        }
      }

      goto LABEL_35;
    }

void xmlTextReaderValidatePop(uint64_t a1)
{
  uint64_t v2 = *(xmlNode **)(a1 + 112);
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3 == 1)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4 && *(_DWORD *)(v4 + 156) == 1)
    {
      uint64_t ns = v2->ns;
      if (ns && (prefix = ns->prefix) != 0LL)
      {
        int v7 = xmlStrdup(prefix);
        uint64_t v8 = xmlStrcat(v7, (const xmlChar *)":");
        int v9 = xmlStrcat(v8, v2->name);
        *(_DWORD *)(*(void *)(a1 + 32) + 152LL) &= xmlValidatePopElement( (xmlValidCtxtPtr)(*(void *)(a1 + 32) + 160LL),  *(xmlDocPtr *)(*(void *)(a1 + 32) + 16LL),  v2,  v9);
        if (v9) {
          xmlFree(v9);
        }
      }

      else
      {
        *(_DWORD *)(*(void *)(a1 + 32) + 152LL) &= xmlValidatePopElement( (xmlValidCtxtPtr)(v4 + 160),  *(xmlDocPtr *)(v4 + 16),  v2,  v2->name);
      }
    }

    int v3 = *(_DWORD *)(a1 + 16);
  }

  if (v3 == 2)
  {
    uint64_t v10 = *(xmlRelaxNGValidCtxt **)(a1 + 216);
    if (v10)
    {
      int v11 = *(xmlNode **)(a1 + 232);
      if (v11)
      {
        if (v2 == v11) {
          *(void *)(a1 + 232) = 0LL;
        }
      }

      else if (xmlRelaxNGValidatePopElement(v10, *(xmlDocPtr *)(*(void *)(a1 + 32) + 16LL), v2) != 1)
      {
        ++*(_DWORD *)(a1 + 228);
      }
    }
  }

void xmlTextReaderFreeNode(uint64_t a1, xmlAttr *cur)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    int v5 = *(xmlDict **)(v4 + 456);
  }
  else {
    int v5 = 0LL;
  }
  xmlNsType type = cur->type;
  switch(type)
  {
    case XML_ATTRIBUTE_NODE:
      xmlTextReaderFreeProp(a1, cur);
      return;
    case XML_NAMESPACE_DECL:
      xmlFreeNs((xmlNsPtr)cur);
      return;
    case XML_DTD_NODE:
      xmlFreeDtd((xmlDtdPtr)cur);
      return;
  }

  if (type != XML_ENTITY_REF_NODE)
  {
    childreuint64_t n = (xmlChar *)cur->children;
    if (children)
    {
      if (*((xmlAttr **)children + 5) == cur) {
        xmlTextReaderFreeNodeList(a1, (xmlDoc *)children);
      }
      cur->childreuint64_t n = 0LL;
    }
  }

  if (__xmlRegisterCallbacks && *__xmlDeregisterNodeDefaultValue())
  {
    uint64_t v8 = __xmlDeregisterNodeDefaultValue();
    ((void (*)(xmlAttr *))*v8)(cur);
  }

  xmlNsType v9 = cur->type;
  if (v9 <= XML_XINCLUDE_END && ((1 << v9) & 0x180002) != 0)
  {
    psvuint64_t i = (xmlAttr *)cur->psvi;
    if (psvi)
    {
      do
      {
        xmlNodePtr next = psvi->next;
        xmlTextReaderFreeProp(a1, psvi);
        psvuint64_t i = next;
      }

      while (next);
    }
  }

  int v12 = *(xmlNs **)&cur->atype;
  if (v12 == (xmlNs *)&cur->psvi) {
    goto LABEL_34;
  }
  xmlNsType v13 = cur->type;
  if ((v13 > XML_XINCLUDE_END || ((1 << v13) & 0x180022) == 0) && v12 != 0LL)
  {
    if (v5)
    {
      if (xmlDictOwns(v5, (const xmlChar *)v12))
      {
LABEL_34:
        xmlNsType v13 = cur->type;
        goto LABEL_35;
      }

      int v12 = *(xmlNs **)&cur->atype;
    }

    xmlFree(v12);
    goto LABEL_34;
  }

xmlNodePtr xmlTextReaderExpand(xmlNodePtr reader)
{
  if (reader)
  {
    xmlNodePtr v1 = reader;
    reader = *(xmlNodePtr *)&reader->line;
    if (reader)
    {
      if (!*(void *)&v1->type)
      {
        else {
          return *(xmlNodePtr *)&v1->line;
        }
      }
    }
  }

  return reader;
}

void *xmlTextReaderEntPush(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 180);
  if (v4 <= 0)
  {
    *(_DWORD *)(a1 + 180) = 10;
    int v5 = xmlMalloc(0x50uLL);
    *(void *)(a1 + 18xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v5;
    if (!v5)
    {
      xmlGenericErrorFunc v10 = *__xmlGenericError();
      uint64_t v8 = *__xmlGenericErrorContext();
      xmlNsType v9 = "xmlMalloc failed !\n";
      return (void *)((uint64_t (*)(void *, const char *))v10)(v8, v9);
    }

    int v4 = *(_DWORD *)(a1 + 180);
  }

  int v6 = *(_DWORD *)(a1 + 176);
  if (v6 < v4)
  {
    uint64_t result = *(void **)(a1 + 184);
LABEL_8:
    result[v6] = a2;
    *(void *)(a1 + 168) = a2;
    *(_DWORD *)(a1 + 176) = v6 + 1;
    return result;
  }

  *(_DWORD *)(a1 + 180) = 2 * v4;
  uint64_t result = xmlRealloc(*(void **)(a1 + 184), 16LL * v4);
  *(void *)(a1 + 18xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = result;
  if (result)
  {
    int v6 = *(_DWORD *)(a1 + 176);
    goto LABEL_8;
  }

  xmlGenericErrorFunc v10 = *__xmlGenericError();
  uint64_t v8 = *__xmlGenericErrorContext();
  xmlNsType v9 = "xmlRealloc failed !\n";
  return (void *)((uint64_t (*)(void *, const char *))v10)(v8, v9);
}

void xmlTextReaderValidateEntity(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  uint64_t v3 = v2;
  while (1)
  {
    int v4 = *(_DWORD *)(v3 + 8);
    if ((v4 - 3) < 2)
    {
      int v7 = *(xmlChar **)(v3 + 80);
      int v8 = xmlStrlen(v7);
      xmlTextReaderValidateCData(a1, v7, v8);
      goto LABEL_11;
    }

    if (v4 != 1) {
      break;
    }
    *(void *)(a1 + 112) = v3;
    xmlTextReaderValidatePush(a1);
LABEL_11:
    uint64_t v6 = *(void *)(v3 + 24);
    if (!v6)
    {
      if (*(_DWORD *)(v3 + 8) == 1) {
        xmlTextReaderValidatePop(a1);
      }
      goto LABEL_20;
    }

void xmlTextReaderValidatePush(uint64_t a1)
{
  uint64_t v2 = *(xmlNode **)(a1 + 112);
  int v3 = *(_DWORD *)(a1 + 16);
  if (v3 == 1)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4 && *(_DWORD *)(v4 + 156) == 1)
    {
      uint64_t ns = v2->ns;
      if (ns && (prefix = ns->prefix) != 0LL)
      {
        int v7 = xmlStrdup(prefix);
        int v8 = xmlStrcat(v7, (const xmlChar *)":");
        BOOL v9 = xmlStrcat(v8, v2->name);
        *(_DWORD *)(*(void *)(a1 + 32) + 152LL) &= xmlValidatePushElement( (xmlValidCtxtPtr)(*(void *)(a1 + 32) + 160LL),  *(xmlDocPtr *)(*(void *)(a1 + 32) + 16LL),  v2,  v9);
        if (v9) {
          xmlFree(v9);
        }
      }

      else
      {
        *(_DWORD *)(*(void *)(a1 + 32) + 152LL) &= xmlValidatePushElement( (xmlValidCtxtPtr)(v4 + 160),  *(xmlDocPtr *)(v4 + 16),  v2,  v2->name);
      }
    }

    int v3 = *(_DWORD *)(a1 + 16);
  }

  if (v3 == 2)
  {
    int v10 = *(xmlRelaxNGValidCtxt **)(a1 + 216);
    if (v10)
    {
      if (!*(void *)(a1 + 232))
      {
        int v11 = xmlRelaxNGValidatePushElement(v10, *(xmlDocPtr *)(*(void *)(a1 + 32) + 16LL), v2);
        if (!v11)
        {
          int v12 = xmlTextReaderExpand((xmlTextReaderPtr)a1);
          if (!v12)
          {
LABEL_17:
            ++*(_DWORD *)(a1 + 228);
            return;
          }

          unsigned int v13 = v12;
          int v11 = xmlRelaxNGValidateFullElement( *(xmlRelaxNGValidCtxtPtr *)(a1 + 216),  *(xmlDocPtr *)(*(void *)(a1 + 32) + 16LL),  v12);
          *(void *)(a1 + 232) = v13;
        }

        if (v11 == 1) {
          return;
        }
        goto LABEL_17;
      }
    }
  }

uint64_t xmlTextReaderValidateCData(uint64_t result, xmlChar *data, int len)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 16);
  if (v6 == 1)
  {
    uint64_t v7 = *(void *)(result + 32);
    if (!v7 || *(_DWORD *)(v7 + 156) != 1) {
      return result;
    }
    uint64_t result = xmlValidatePushCData((xmlValidCtxtPtr)(v7 + 160), data, len);
    *(_DWORD *)(*(void *)(v5 + 32) + 152LL) &= result;
    int v6 = *(_DWORD *)(v5 + 16);
  }

  if (v6 == 2)
  {
    uint64_t result = *(void *)(v5 + 216);
    if (result)
    {
      if (!*(void *)(v5 + 232))
      {
        uint64_t result = xmlRelaxNGValidatePushCData((xmlRelaxNGValidCtxtPtr)result, data, len);
        if ((_DWORD)result != 1) {
          ++*(_DWORD *)(v5 + 228);
        }
      }
    }
  }

  return result;
}

xmlNodePtr xmlTextReaderPreserve(xmlNodePtr reader)
{
  if (reader)
  {
    xmlNodePtr v1 = reader;
    reader = (xmlNodePtr)reader[1]._private;
    if (reader || (reader = *(xmlNodePtr *)&v1->line) != 0LL)
    {
      xmlElementType type = reader->type;
      if (type != XML_DOCUMENT_NODE && type != XML_DTD_NODE) {
        reader->extra |= 6u;
      }
      ++LODWORD(v1[2].content);
      for (uint64_t i = reader->parent; i; uint64_t i = i->parent)
      {
        if (i->type == XML_ELEMENT_NODE) {
          i->extra |= 2u;
        }
      }
    }
  }

  return reader;
}

int xmlTextReaderReadState(xmlTextReaderPtr reader)
{
  if (reader) {
    return *(_DWORD *)reader;
  }
  else {
    return -1;
  }
}

uint64_t xmlTextReaderDoExpand(uint64_t a1)
{
  if (*(void *)(a1 + 112) && *(void *)(a1 + 32))
  {
    while (1)
    {
      uint64_t v2 = *(void *)(a1 + 32);
      if (*(_DWORD *)(v2 + 272) == -1) {
        return 1LL;
      }
      uint64_t v3 = *(void *)(a1 + 112);
      if (v3)
      {
        while (!*(void *)(v3 + 48))
        {
          uint64_t v3 = *(void *)(v3 + 40);
          if (!v3) {
            goto LABEL_7;
          }
        }

        return 1LL;
      }

int xmlTextReaderNext(xmlTextReaderPtr reader)
{
  if (!reader) {
    return -1;
  }
  if (*((void *)reader + 1)) {
    return xmlTextReaderNextTree((uint64_t)reader);
  }
  uint64_t v3 = *((void *)reader + 14);
  if (!v3) {
    return xmlTextReaderRead(reader);
  }
  if (*(_DWORD *)(v3 + 8) != 1) {
    return xmlTextReaderRead(reader);
  }
  int v4 = *((_DWORD *)reader + 6);
  if (v4 == 4 || v4 == 2 || (*(_WORD *)(v3 + 114) & 1) != 0) {
    return xmlTextReaderRead(reader);
  }
  while (1)
  {
    int result = xmlTextReaderRead(reader);
    if (result != 1) {
      break;
    }
    if (*((void *)reader + 14) == v3) {
      return xmlTextReaderRead(reader);
    }
  }

  return result;
}

uint64_t xmlTextReaderNextTree(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24);
  if (v1 == 2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(a1 + 112);
  if (v4)
  {
    if (v1 != 4)
    {
      uint64_t v5 = *(void *)(v4 + 48);
      if (v5) {
        goto LABEL_13;
      }
      *(_DWORD *)(a1 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 4;
      xmlTextReaderRead((xmlTextReaderPtr)a1);
      uint64_t v4 = *(void *)(a1 + 112);
    }

    uint64_t v5 = *(void *)(v4 + 48);
    if (!v5)
    {
      uint64_t v6 = *(void *)(v4 + 40);
      if (!v6)
      {
LABEL_11:
        uint64_t result = 1LL;
LABEL_15:
        int v7 = 2;
        goto LABEL_16;
      }

      if (*(_DWORD *)(v6 + 8) != 9)
      {
        *(void *)(a1 + 112) = v6;
        --*(_DWORD *)(a1 + 128);
        *(_DWORD *)(a1 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 4;
        xmlTextReaderNextTree(a1);
        goto LABEL_11;
      }

xmlChar *__cdecl xmlTextReaderReadInnerXml(xmlTextReaderPtr reader)
{
  if (!xmlTextReaderExpand(reader)) {
    return 0LL;
  }
  uint64_t v2 = *(xmlDoc **)(*((void *)reader + 14) + 64LL);
  xmlBufferPtr v3 = xmlBufferCreate();
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = v3;
  uint64_t v5 = *(xmlNode **)(*((void *)reader + 14) + 24LL);
  if (v5)
  {
    while (1)
    {
      uint64_t v6 = xmlDocCopyNode(v5, v2, 1);
      int v7 = xmlBufferCreate();
      if (xmlNodeDump(v7, v2, v6, 0, 0) == -1) {
        break;
      }
      xmlBufferCat(v4, v7->content);
      xmlFreeNode(v6);
      xmlBufferFree(v7);
      uint64_t v5 = v5->next;
      if (!v5) {
        goto LABEL_6;
      }
    }

    xmlFreeNode(v6);
    xmlBufferFree(v7);
    xmlElementContentPtr content = 0LL;
  }

  else
  {
LABEL_6:
    xmlElementContentPtr content = v4->content;
    v4->xmlElementContentPtr content = 0LL;
  }

  xmlBufferFree(v4);
  return content;
}

xmlChar *__cdecl xmlTextReaderReadOuterXml(xmlTextReaderPtr reader)
{
  if (!xmlTextReaderExpand(reader)) {
    return 0LL;
  }
  uint64_t v2 = *((void *)reader + 14);
  xmlBufferPtr v3 = *(xmlDoc **)(v2 + 64);
  if (*(_DWORD *)(v2 + 8) == 14) {
    uint64_t v4 = (xmlNode *)xmlCopyDtd((xmlDtdPtr)v2);
  }
  else {
    uint64_t v4 = xmlDocCopyNode((xmlNodePtr)v2, *(xmlDocPtr *)(v2 + 64), 1);
  }
  uint64_t v5 = v4;
  uint64_t v6 = xmlBufferCreate();
  if (xmlNodeDump(v6, v3, v5, 0, 0) == -1)
  {
    xmlFreeNode(v5);
    xmlBufferFree(v6);
    return 0LL;
  }

  xmlElementContentPtr content = v6->content;
  v6->xmlElementContentPtr content = 0LL;
  xmlFreeNode(v5);
  xmlBufferFree(v6);
  return content;
}

xmlChar *__cdecl xmlTextReaderReadString(xmlTextReaderPtr reader)
{
  if (reader && *((void *)reader + 14))
  {
    if (*((void *)reader + 15)) {
      uint64_t v1 = *((void *)reader + 15);
    }
    else {
      uint64_t v1 = *((void *)reader + 14);
    }
    int v2 = *(_DWORD *)(v1 + 8);
    switch(v2)
    {
      case 1:
        break;
      case 2:
        xmlGenericErrorFunc v5 = *__xmlGenericError();
        uint64_t v6 = __xmlGenericErrorContext();
        v5( *v6,  "Unimplemented block at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlreader.c",  1877);
        break;
      case 3:
        xmlBufferPtr v3 = *(const xmlChar **)(v1 + 80);
        if (v3) {
          return xmlStrdup(v3);
        }
        break;
    }
  }

  return 0LL;
}

xmlChar *xmlTextReaderCollectSiblings(uint64_t a1)
{
  xmlElementContentPtr content = (xmlChar *)a1;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 8) == 18) {
      return 0LL;
    }
    xmlBufferPtr v2 = xmlBufferCreate();
    if (!v2)
    {
      return 0LL;
    }

    else
    {
      xmlBufferPtr v3 = v2;
      do
      {
        int v4 = *((_DWORD *)content + 2);
        if ((v4 - 3) >= 2)
        {
          if (v4 == 1)
          {
            xmlGenericErrorFunc v5 = (xmlChar *)xmlTextReaderCollectSiblings(*((void *)content + 3));
            xmlBufferCat(v3, v5);
            xmlFree(v5);
          }
        }

        else
        {
          xmlBufferCat(v3, *((const xmlChar **)content + 10));
        }

        xmlElementContentPtr content = (xmlChar *)*((void *)content + 6);
      }

      while (content);
      xmlElementContentPtr content = v3->content;
      v3->xmlElementContentPtr content = 0LL;
      xmlBufferFree(v3);
    }
  }

  return content;
}

int xmlTextReaderNextSibling(xmlTextReaderPtr reader)
{
  if (!reader || !*((void *)reader + 1)) {
    return -1;
  }
  if (*((_DWORD *)reader + 6) == 2) {
    return 0;
  }
  uint64_t v2 = *((void *)reader + 14);
  if (!v2) {
    return xmlTextReaderNextTree((uint64_t)reader);
  }
  uint64_t v3 = *(void *)(v2 + 48);
  if (!v3) {
    return 0;
  }
  *((void *)reader + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v3;
  *((_DWORD *)reader + 6) = 0;
  return 1;
}

xmlTextReaderPtr xmlNewTextReader(xmlParserInputBufferPtr input, const char *URI)
{
  if (!input) {
    return 0LL;
  }
  int v4 = xmlMalloc(0x150uLL);
  if (!v4) {
    goto LABEL_13;
  }
  xmlGenericErrorFunc v5 = v4;
  *((_OWORD *)v4 + 19) = 0u;
  *((_OWORD *)v4 + 20) = 0u;
  *((_OWORD *)v4 + 17) = 0u;
  *((_OWORD *)v4 + 18) = 0u;
  *((_OWORD *)v4 + 15) = 0u;
  *((_OWORD *)v4 + 16) = 0u;
  *((_OWORD *)v4 + 1xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
  *((_OWORD *)v4 + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0u;
  *((_OWORD *)v4 + 11) = 0u;
  *((_OWORD *)v4 + 12) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  *((_OWORD *)v4 + 10) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
  *((_OWORD *)v4 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *((_OWORD *)v4 + 2) = 0u;
  *(_OWORD *)int v4 = 0u;
  *((void *)v4 + 1) = 0LL;
  *((void *)v4 + 22) = 0LL;
  *((void *)v4 + 2xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0LL;
  *((void *)v4 + 6) = input;
  Size = xmlBufCreateSize(100LL);
  *((void *)v5 + 19) = Size;
  if (!Size)
  {
LABEL_12:
    xmlFree(v5);
LABEL_13:
    xmlGenericErrorFunc v18 = *__xmlGenericError();
    uint64_t v19 = __xmlGenericErrorContext();
    v18(*v19, "xmlNewTextReader : malloc failed\n");
    return 0LL;
  }

  xmlBufSetAllocationScheme((uint64_t)Size, 5u);
  int v7 = (xmlSAXHandler *)xmlMalloc(0x100uLL);
  *((void *)v5 + 5) = v7;
  if (!v7)
  {
    xmlBufFree(*((_DWORD **)v5 + 19));
    goto LABEL_12;
  }

  xmlSAXVersion(v7, 2);
  uint64_t v8 = *((void *)v5 + 5);
  __int128 v9 = *(_OWORD *)(v8 + 112);
  *(void *)(v8 + 112) = xmlTextReaderStartElement;
  *(_OWORD *)(v5 + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v9;
  *(void *)(v8 + 120) = xmlTextReaderEndElement;
  __int128 v10 = 0uLL;
  if (*(_DWORD *)(v8 + 216) == -554844497)
  {
    __int128 v10 = *(_OWORD *)(v8 + 232);
    *(void *)(v8 + 232) = xmlTextReaderStartElementNs;
    *(void *)(v8 + 240) = xmlTextReaderEndElementNs;
  }

  *(_OWORD *)(v5 + 18) = v10;
  uint64_t v11 = *(void *)(v8 + 136);
  *(void *)(v8 + 136) = xmlTextReaderCharacters;
  *(void *)(v8 + 14xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = xmlTextReaderCharacters;
  uint64_t v12 = *(void *)(v8 + 200);
  *((void *)v5 + 11) = v11;
  *((void *)v5 + 12) = v12;
  *(void *)(v8 + 200) = xmlTextReaderCDataBlock;
  _DWORD *v5 = 0;
  *((void *)v5 + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
  *((void *)v5 + 15) = 0LL;
  if (xmlBufUse(*(const xmlBufPtr *)(*((void *)v5 + 6) + 32LL)) <= 3) {
    xmlParserInputBufferRead(input, 4);
  }
  size_t v13 = xmlBufUse(*(const xmlBufPtr *)(*((void *)v5 + 6) + 32LL));
  uint64_t v14 = (xmlSAXHandler *)*((void *)v5 + 5);
  if (v13 < 4)
  {
    xmlParserCtxtPtr PushParserCtxt = xmlCreatePushParserCtxt(*((xmlSAXHandlerPtr *)v5 + 5), 0LL, 0LL, 0, URI);
    int v16 = 0;
  }

  else
  {
    uint64_t v15 = xmlBufContent(*(const xmlBuf **)(*((void *)v5 + 6) + 32LL));
    int v16 = 4;
    xmlParserCtxtPtr PushParserCtxt = xmlCreatePushParserCtxt(v14, 0LL, (const char *)v15, 4, URI);
  }

  *((void *)v5 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = PushParserCtxt;
  v5[26] = 0;
  v5[27] = v16;
  if (PushParserCtxt)
  {
    PushParserCtxt->parseMode = XML_PARSE_READER;
    PushParserCtxt->_private = v5;
    PushParserCtxt->linenumbers = 1;
    PushParserCtxt->dictNames = 1;
    v5[5] = 2;
    PushParserCtxt->docdict = 1;
    *((void *)v5 + 20) = PushParserCtxt->dict;
    v5[68] = 0;
    v5[76] = 0;
    *((void *)v5 + 39) = 0LL;
    return (xmlTextReaderPtr)v5;
  }

  xmlGenericErrorFunc v21 = *__xmlGenericError();
  int v22 = __xmlGenericErrorContext();
  v21(*v22, "xmlNewTextReader : malloc failed\n");
  xmlBufFree(*((_DWORD **)v5 + 19));
  xmlFree(*((void **)v5 + 5));
  xmlFree(v5);
  return 0LL;
}

uint64_t xmlTextReaderStartElement(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 424);
  if (v1)
  {
    uint64_t v2 = *(uint64_t (**)(void))(v1 + 56);
    if (v2)
    {
      uint64_t v3 = result;
      uint64_t result = v2();
      uint64_t v4 = *(void *)(v3 + 80);
      if (v4)
      {
        uint64_t v5 = *(void *)(v3 + 56);
        if (v5)
        {
          uint64_t v6 = *(_BYTE **)(v5 + 32);
          if (v6)
          {
            if (*v6 == 47 && v6[1] == 62) {
              *(_WORD *)(v4 + 11xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 1;
            }
          }
        }
      }
    }

    *(_DWORD *)(v1 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 1;
  }

  return result;
}

uint64_t xmlTextReaderEndElement(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 424);
  if (v1)
  {
    uint64_t v2 = *(uint64_t (**)(void))(v1 + 64);
    if (v2) {
      return v2();
    }
  }

  return result;
}

uint64_t xmlTextReaderStartElementNs(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 424);
  if (v1)
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t))(v1 + 72);
    if (v2)
    {
      uint64_t v3 = result;
      uint64_t result = v2(result);
      uint64_t v4 = *(void *)(v3 + 80);
      if (v4)
      {
        uint64_t v5 = *(void *)(v3 + 56);
        if (v5)
        {
          uint64_t v6 = *(_BYTE **)(v5 + 32);
          if (v6)
          {
            if (*v6 == 47 && v6[1] == 62) {
              *(_WORD *)(v4 + 11xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 1;
            }
          }
        }
      }
    }

    *(_DWORD *)(v1 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 1;
  }

  return result;
}

uint64_t xmlTextReaderEndElementNs(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 424);
  if (v1)
  {
    uint64_t v2 = *(uint64_t (**)(void))(v1 + 80);
    if (v2) {
      return v2();
    }
  }

  return result;
}

uint64_t xmlTextReaderCharacters(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 424);
  if (v1)
  {
    uint64_t v2 = *(uint64_t (**)(void))(v1 + 88);
    if (v2) {
      return v2();
    }
  }

  return result;
}

uint64_t xmlTextReaderCDataBlock(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 424);
  if (v1)
  {
    uint64_t v2 = *(uint64_t (**)(void))(v1 + 96);
    if (v2) {
      return v2();
    }
  }

  return result;
}

xmlTextReaderPtr xmlNewTextReaderFilename(const char *URI)
{
  Filename = xmlParserInputBufferCreateFilename(URI, XML_CHAR_ENCODING_NONE);
  if (!Filename) {
    return 0LL;
  }
  uint64_t v3 = Filename;
  xmlTextReaderPtr v4 = xmlNewTextReader(Filename, URI);
  xmlTextReaderPtr v5 = v4;
  if (v4)
  {
    *((_DWORD *)v4 + 5) |= 1u;
    if (!*(void *)(*((void *)v4 + 4) + 280LL))
    {
      Directory = xmlParserGetDirectory(URI);
      int v7 = Directory;
      if (*(void *)(*((void *)v5 + 4) + 280LL)) {
        BOOL v8 = 1;
      }
      else {
        BOOL v8 = Directory == 0LL;
      }
      if (v8)
      {
        if (!Directory) {
          return v5;
        }
      }

      else
      {
        *(void *)(*((void *)v5 + 4) + 280LL) = xmlStrdup((const xmlChar *)Directory);
      }

      xmlFree(v7);
    }
  }

  else
  {
    xmlFreeParserInputBuffer(v3);
  }

  return v5;
}

void xmlFreeTextReader(xmlTextReaderPtr reader)
{
  if (reader)
  {
    uint64_t v2 = (xmlRelaxNG *)*((void *)reader + 26);
    if (v2)
    {
      xmlRelaxNGFree(v2);
      *((void *)reader + 26) = 0LL;
    }

    uint64_t v3 = (xmlRelaxNGValidCtxt *)*((void *)reader + 27);
    if (v3)
    {
      if (!*((_DWORD *)reader + 56)) {
        xmlRelaxNGFreeValidCtxt(v3);
      }
      *((void *)reader + 27) = 0LL;
    }

    xmlTextReaderPtr v4 = (xmlSchemaSAXPlugStruct *)*((void *)reader + 33);
    if (v4)
    {
      xmlSchemaSAXUnplug(v4);
      *((void *)reader + 3xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0LL;
    }

    xmlTextReaderPtr v5 = (xmlSchemaValidCtxt *)*((void *)reader + 31);
    if (v5)
    {
      if (!*((_DWORD *)reader + 64)) {
        xmlSchemaFreeValidCtxt(v5);
      }
      *((void *)reader + 31) = 0LL;
    }

    uint64_t v6 = (xmlSchema *)*((void *)reader + 30);
    if (v6)
    {
      xmlSchemaFree(v6);
      *((void *)reader + 30) = 0LL;
    }

    int v7 = (xmlXIncludeCtxt *)*((void *)reader + 36);
    if (v7) {
      xmlXIncludeFreeContext(v7);
    }
    BOOL v8 = (void *)*((void *)reader + 39);
    if (v8)
    {
      int v9 = *((_DWORD *)reader + 75);
      if (v9 >= 1)
      {
        for (uint64_t i = 0LL; i < v9; ++i)
        {
          uint64_t v11 = *(xmlPattern **)(*((void *)reader + 39) + 8 * i);
          if (v11)
          {
            xmlFreePattern(v11);
            int v9 = *((_DWORD *)reader + 75);
          }
        }

        BOOL v8 = (void *)*((void *)reader + 39);
      }

      xmlFree(v8);
    }

    if (*(_DWORD *)reader != 4) {
      xmlTextReaderClose(reader);
    }
    uint64_t v12 = (xmlParserCtxt *)*((void *)reader + 4);
    if (v12)
    {
      if ((xmlDictPtr)*((void *)reader + 20) == v12->dict) {
        *((void *)reader + 20) = 0LL;
      }
      if ((*((_BYTE *)reader + 20) & 2) != 0) {
        xmlFreeParserCtxt(v12);
      }
    }

    size_t v13 = (void *)*((void *)reader + 5);
    if (v13) {
      xmlFree(v13);
    }
    uint64_t v14 = (_DWORD *)*((void *)reader + 19);
    if (v14) {
      xmlBufFree(v14);
    }
    uint64_t v15 = (void *)*((void *)reader + 23);
    if (v15) {
      xmlFree(v15);
    }
    int v16 = (xmlDict *)*((void *)reader + 20);
    if (v16) {
      xmlDictFree(v16);
    }
    xmlFree(reader);
  }

int xmlTextReaderClose(xmlTextReaderPtr reader)
{
  if (reader)
  {
    *((void *)reader + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
    *((void *)reader + 15) = 0LL;
    *(_DWORD *)reader = 4;
    uint64_t v2 = (xmlNode *)*((void *)reader + 17);
    if (v2)
    {
      xmlFreeNode(v2);
      *((void *)reader + 17) = 0LL;
    }

    uint64_t v3 = (xmlParserCtxt *)*((void *)reader + 4);
    if (v3)
    {
      vstateTab = v3->vctxt.vstateTab;
      if (vstateTab && v3->vctxt.vstateMax >= 1)
      {
        if (v3->vctxt.vstateNr >= 1)
        {
          do
          {
            xmlValidatePopElement(&v3->vctxt, 0LL, 0LL, 0LL);
            uint64_t v3 = (xmlParserCtxt *)*((void *)reader + 4);
          }

          while (v3->vctxt.vstateNr > 0);
          vstateTab = v3->vctxt.vstateTab;
        }

        xmlFree(vstateTab);
        uint64_t v3 = (xmlParserCtxt *)*((void *)reader + 4);
        v3->vctxt.vstateTab = 0LL;
        v3->vctxt.int vstateMax = 0;
      }

      xmlStopParser(v3);
      uint64_t v5 = *((void *)reader + 4);
      uint64_t v6 = *(void *)(v5 + 16);
      if (v6)
      {
        if (!*((_DWORD *)reader + 36))
        {
          xmlTextReaderFreeDoc((uint64_t)reader, v6);
          uint64_t v5 = *((void *)reader + 4);
        }

        *(void *)(v5 + 16) = 0LL;
      }
    }

    int v7 = (xmlParserInputBuffer *)*((void *)reader + 6);
    if (v7)
    {
      if ((*((_BYTE *)reader + 20) & 1) != 0)
      {
        xmlFreeParserInputBuffer(v7);
        LODWORD(v7) = 0;
        --*((_DWORD *)reader + 5);
      }

      else
      {
        LODWORD(v7) = 0;
      }
    }
  }

  else
  {
    LODWORD(v7) = -1;
  }

  return (int)v7;
}

void xmlTextReaderFreeDoc(uint64_t a1, uint64_t a2)
{
  if (__xmlRegisterCallbacks && *__xmlDeregisterNodeDefaultValue())
  {
    xmlTextReaderPtr v4 = __xmlDeregisterNodeDefaultValue();
    ((void (*)(uint64_t))*v4)(a2);
  }

  uint64_t v5 = *(xmlHashTable **)(a2 + 120);
  if (v5) {
    xmlHashFree(v5, (xmlHashDeallocator)xmlTextReaderFreeIDTableEntry);
  }
  *(void *)(a2 + 120) = 0LL;
  uint64_t v6 = *(xmlRefTable **)(a2 + 128);
  if (v6) {
    xmlFreeRefTable(v6);
  }
  *(void *)(a2 + 128) = 0LL;
  int v7 = *(xmlDtd **)(a2 + 80);
  BOOL v8 = *(xmlDtd **)(a2 + 88);
  if (v8 && v7 != v8)
  {
    xmlUnlinkNode(*(xmlNodePtr *)(a2 + 88));
    *(void *)(a2 + 88) = 0LL;
    xmlFreeDtd(v8);
  }

  if (v7)
  {
    xmlUnlinkNode(*(xmlNodePtr *)(a2 + 80));
    *(void *)(a2 + 80) = 0LL;
    xmlFreeDtd(v7);
  }

  int v9 = *(xmlDoc **)(a2 + 24);
  if (v9) {
    xmlTextReaderFreeNodeList(a1, v9);
  }
  __int128 v10 = *(void **)(a2 + 104);
  if (v10) {
    xmlFree(v10);
  }
  uint64_t v11 = *(void **)(a2 + 16);
  if (v11) {
    xmlFree(v11);
  }
  uint64_t v12 = *(void **)(a2 + 112);
  if (v12) {
    xmlFree(v12);
  }
  size_t v13 = *(xmlNs **)(a2 + 96);
  if (v13) {
    xmlFreeNsList(v13);
  }
  uint64_t v14 = *(void **)(a2 + 136);
  if (v14) {
    xmlFree(v14);
  }
  uint64_t v15 = *(xmlDict **)(a2 + 152);
  if (v15) {
    xmlDictFree(v15);
  }
  xmlFree((void *)a2);
}

xmlChar *__cdecl xmlTextReaderGetAttributeNo(xmlChar *reader, int no)
{
  if (reader)
  {
    uint64_t v2 = *((void *)reader + 14);
    if (!v2 || *((void *)reader + 15) || *(_DWORD *)(v2 + 8) != 1) {
      return 0LL;
    }
    int v3 = 0;
    xmlTextReaderPtr v4 = (uint64_t **)(v2 + 96);
    do
    {
      int v5 = v3;
      xmlTextReaderPtr v4 = (uint64_t **)*v4;
      ++v3;
    }

    while (v5 < no && v4);
    if (v4) {
      return xmlStrdup((const xmlChar *)v4[2]);
    }
    uint64_t v6 = *(void *)(v2 + 88);
    if (!v6) {
      return 0LL;
    }
    if (v5 < no)
    {
      int v7 = no - v3 + 1;
      do
      {
        uint64_t v6 = *(void *)(v6 + 48);
        if (!v6) {
          return 0LL;
        }
      }

      while (--v7);
    }

    reader = xmlNodeListGetString(*(xmlDocPtr *)(v2 + 64), *(const xmlNode **)(v6 + 24), 1);
    if (!reader) {
      return xmlStrdup((const xmlChar *)&byte_181A3ACBA);
    }
  }

  return reader;
}

xmlChar *__cdecl xmlTextReaderGetAttribute(xmlTextReaderPtr reader, const xmlChar *name)
{
  uint64_t v2 = 0LL;
  prefix = 0LL;
  if (!reader || !name) {
    return v2;
  }
  uint64_t v5 = *((void *)reader + 14);
  if (!v5 || *((void *)reader + 15) || *(_DWORD *)(v5 + 8) != 1) {
    return 0LL;
  }
  uint64_t v6 = xmlSplitQName2(name, &prefix);
  if (v6)
  {
    int v7 = v6;
    int v8 = xmlStrEqual(prefix, (const xmlChar *)"xmlns");
    int v9 = (xmlNode *)*((void *)reader + 14);
    if (v8)
    {
      nsDef = v9->nsDef;
      if (nsDef)
      {
        while (1)
        {
          uint64_t v11 = nsDef->prefix;
          if (v11)
          {
            if (xmlStrEqual(v11, v7)) {
              break;
            }
          }

          nsDef = nsDef->next;
          if (!nsDef) {
            goto LABEL_22;
          }
        }

        NsProp = xmlStrdup(nsDef->href);
        goto LABEL_26;
      }
    }

    else
    {
      xmlNsPtr v17 = xmlSearchNs(v9->doc, v9, prefix);
      if (v17)
      {
        NsProp = xmlGetNsProp(*((const xmlNode **)reader + 14), v7, v17->href);
LABEL_26:
        uint64_t v2 = NsProp;
LABEL_27:
        xmlFree(v7);
        if (prefix) {
          xmlFree(prefix);
        }
        return v2;
      }
    }

xmlChar *__cdecl xmlTextReaderGetAttributeNs( xmlTextReaderPtr reader, const xmlChar *localName, const xmlChar *namespaceURI)
{
  if (!reader) {
    return 0LL;
  }
  if (!localName) {
    return 0LL;
  }
  uint64_t v5 = *((void *)reader + 14);
  if (!v5 || *((void *)reader + 15) || *(_DWORD *)(v5 + 8) != 1) {
    return 0LL;
  }
  if (!xmlStrEqual(namespaceURI, (const xmlChar *)"http://www.w3.org/2000/xmlns/")) {
    return xmlGetNsProp(*((const xmlNode **)reader + 14), localName, namespaceURI);
  }
  int v7 = xmlStrEqual(localName, (const xmlChar *)"xmlns");
  int v8 = *(uint64_t ***)(*((void *)reader + 14) + 96LL);
  if (!v8) {
    return 0LL;
  }
  int v9 = v7;
  while (1)
  {
    __int128 v10 = (const xmlChar *)v8[3];
    if (v9) {
      break;
    }
    if (v10) {
      goto LABEL_13;
    }
LABEL_14:
    int v8 = (uint64_t **)*v8;
    if (!v8) {
      return 0LL;
    }
  }

  if (!v10) {
    return xmlStrdup((const xmlChar *)v8[2]);
  }
LABEL_13:
  if (!xmlStrEqual(v10, localName)) {
    goto LABEL_14;
  }
  return xmlStrdup((const xmlChar *)v8[2]);
}

xmlParserInputBufferPtr xmlTextReaderGetRemainder(xmlParserInputBufferPtr reader)
{
  if (reader)
  {
    xmlParserInputBufferPtr v1 = reader;
    if (!*(void *)&reader[1].compressed) {
      return 0LL;
    }
    *(void *)&reader[1].compressed = 0LL;
    reader[1].rawconsumed = 0LL;
    LODWORD(reader->context) = 3;
    xmlBufPtr buffer = (xmlParserCtxt *)reader->buffer;
    if (buffer)
    {
      xmlStopParser(buffer);
      xmlBufPtr v3 = v1->buffer;
      uint64_t v4 = *((void *)v3 + 2);
      if (v4)
      {
        if (!LODWORD(v1[2].closecallback))
        {
          xmlTextReaderFreeDoc((uint64_t)v1, v4);
          xmlBufPtr v3 = v1->buffer;
        }

        *((void *)v3 + 2) = 0LL;
      }
    }

    int closecallback_high = HIDWORD(v1->closecallback);
    if ((closecallback_high & 1) == 0)
    {
      xmlGenericErrorFunc v6 = *__xmlGenericError();
      int v7 = __xmlGenericErrorContext();
      v6( *v7,  "Unimplemented block at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlreader.c",  2605);
      return 0LL;
    }

    reader = *(xmlParserInputBufferPtr *)&v1->compressed;
    *(void *)&v1->compressed = 0LL;
    HIDWORD(v1->closecallback) = closecallback_high - 1;
  }

  return reader;
}

xmlChar *__cdecl xmlTextReaderLookupNamespace(xmlTextReaderPtr reader, const xmlChar *prefix)
{
  if (reader && (xmlBufPtr v3 = (xmlNode *)*((void *)reader + 14)) != 0LL && (v4 = xmlSearchNs(v3->doc, v3, prefix)) != 0LL) {
    return xmlStrdup(v4->href);
  }
  else {
    return 0LL;
  }
}

int xmlTextReaderMoveToAttributeNo(xmlTextReaderPtr reader, int no)
{
  if (!reader) {
    return -1;
  }
  uint64_t v2 = *((void *)reader + 14);
  if (!v2 || *(_DWORD *)(v2 + 8) != 1) {
    return -1;
  }
  int v3 = 0;
  *((void *)reader + 15) = 0LL;
  xmlNsPtr v4 = (void *)(v2 + 96);
  do
  {
    int v5 = v3;
    xmlNsPtr v4 = (void *)*v4;
    ++v3;
  }

  while (v5 < no && v4);
  if (v4) {
    goto LABEL_8;
  }
  xmlNsPtr v4 = *(void **)(v2 + 88);
  if (v4)
  {
    if (v5 >= no)
    {
LABEL_8:
      *((void *)reader + 15) = v4;
      return 1;
    }

    int v7 = no - v3 + 1;
    while (1)
    {
      xmlNsPtr v4 = (void *)v4[6];
      if (!v4) {
        break;
      }
      if (!--v7) {
        goto LABEL_8;
      }
    }
  }

  return 0;
}

int xmlTextReaderMoveToAttribute(xmlTextReaderPtr reader, const xmlChar *name)
{
  prefix = 0LL;
  int result = -1;
  if (reader)
  {
    if (name)
    {
      uint64_t v5 = *((void *)reader + 14);
      if (v5)
      {
        if (*(_DWORD *)(v5 + 8) != 1) {
          return 0;
        }
        xmlGenericErrorFunc v6 = xmlSplitQName2(name, &prefix);
        if (!v6)
        {
          int v12 = xmlStrEqual(name, (const xmlChar *)"xmlns");
          uint64_t v13 = *((void *)reader + 14);
          if (v12)
          {
            uint64_t v14 = (void *)(v13 + 96);
            while (1)
            {
              uint64_t v14 = (void *)*v14;
              if (!v14) {
                break;
              }
              if (!v14[3])
              {
                *((void *)reader + 15) = v14;
                return 1;
              }
            }
          }

          else
          {
            uint64_t v16 = *(void *)(v13 + 88);
            if (v16)
            {
              while (1)
              {
                if (xmlStrEqual(*(const xmlChar **)(v16 + 16), name))
                {
                  uint64_t v17 = *(void *)(v16 + 72);
                  if (!v17 || !*(void *)(v17 + 24)) {
                    break;
                  }
                }

                int result = 0;
                uint64_t v16 = *(void *)(v16 + 48);
                if (!v16) {
                  return result;
                }
              }

              *((void *)reader + 15) = v16;
              return 1;
            }
          }

          return 0;
        }

        int v7 = v6;
        int v8 = xmlStrEqual(prefix, (const xmlChar *)"xmlns");
        uint64_t v9 = *((void *)reader + 14);
        if (v8)
        {
          uint64_t i = *(uint64_t ***)(v9 + 96);
          if (i)
          {
            while (1)
            {
              uint64_t v11 = (const xmlChar *)i[3];
              if (v11)
              {
                if (xmlStrEqual(v11, v7)) {
                  break;
                }
              }

              uint64_t i = (uint64_t **)*i;
              if (!i) {
                goto LABEL_22;
              }
            }

int xmlTextReaderMoveToAttributeNs( xmlTextReaderPtr reader, const xmlChar *localName, const xmlChar *namespaceURI)
{
  int result = -1;
  if (reader)
  {
    if (localName)
    {
      if (namespaceURI)
      {
        uint64_t v7 = *((void *)reader + 14);
        if (v7)
        {
          if (*(_DWORD *)(v7 + 8) != 1) {
            return 0;
          }
          if (xmlStrEqual(namespaceURI, (const xmlChar *)"http://www.w3.org/2000/xmlns/"))
          {
            int v8 = xmlStrEqual(localName, (const xmlChar *)"xmlns");
            uint64_t v9 = *(uint64_t ***)(*((void *)reader + 14) + 96LL);
            if (v9)
            {
              int v10 = v8;
              while (1)
              {
                uint64_t v11 = (const xmlChar *)v9[3];
                if (v10) {
                  break;
                }
                if (v11) {
                  goto LABEL_13;
                }
LABEL_14:
                int result = 0;
                uint64_t v9 = (uint64_t **)*v9;
                if (!v9) {
                  return result;
                }
              }

              if (!v11) {
                goto LABEL_24;
              }
LABEL_13:
              if (xmlStrEqual(v11, localName)) {
                goto LABEL_24;
              }
              goto LABEL_14;
            }

            return 0;
          }

          uint64_t v9 = *(uint64_t ***)(v7 + 88);
          if (!v9) {
            return 0;
          }
          while (1)
          {
            if (xmlStrEqual((const xmlChar *)v9[2], localName))
            {
              int v12 = v9[9];
              if (v12)
              {
                if (xmlStrEqual((const xmlChar *)v12[2], namespaceURI)) {
                  break;
                }
              }
            }

            int result = 0;
            uint64_t v9 = (uint64_t **)v9[6];
            if (!v9) {
              return result;
            }
          }

int xmlTextReaderMoveToFirstAttribute(xmlTextReaderPtr reader)
{
  if (!reader) {
    return -1;
  }
  uint64_t v1 = *((void *)reader + 14);
  if (!v1) {
    return -1;
  }
  if (*(_DWORD *)(v1 + 8) != 1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 96);
  if (!v2)
  {
    uint64_t v2 = *(void *)(v1 + 88);
    if (!v2) {
      return 0;
    }
  }

  *((void *)reader + 15) = v2;
  return 1;
}

int xmlTextReaderMoveToNextAttribute(xmlTextReaderPtr reader)
{
  if (!reader) {
    return -1;
  }
  uint64_t v1 = *((void *)reader + 14);
  if (!v1) {
    return -1;
  }
  if (*(_DWORD *)(v1 + 8) != 1) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)*((void *)reader + 15);
  if (!v2)
  {
    uint64_t v4 = *(void *)(v1 + 96);
    if (!v4) {
      goto LABEL_11;
    }
LABEL_12:
    *((void *)reader + 15) = v4;
    return 1;
  }

  int v3 = *((_DWORD *)v2 + 2);
  if (v3 == 2)
  {
    uint64_t v4 = v2[6];
    if (v4) {
      goto LABEL_12;
    }
    return 0;
  }

  if (v3 != 18) {
    return 0;
  }
  uint64_t v4 = *v2;
  if (v4) {
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v4 = *(void *)(v1 + 88);
  if (v4) {
    goto LABEL_12;
  }
  return 0;
}

int xmlTextReaderMoveToElement(xmlTextReaderPtr reader)
{
  if (!reader) {
    return -1;
  }
  uint64_t v1 = *((void *)reader + 14);
  if (!v1) {
    return -1;
  }
  if (*(_DWORD *)(v1 + 8) != 1 || !*((void *)reader + 15)) {
    return 0;
  }
  *((void *)reader + 15) = 0LL;
  return 1;
}

int xmlTextReaderReadAttributeValue(xmlTextReaderPtr reader)
{
  if (reader)
  {
    uint64_t v2 = *((void *)reader + 14);
    if (v2)
    {
      uint64_t v3 = *((void *)reader + 15);
      if (v3)
      {
        int v4 = *(_DWORD *)(v3 + 8);
        if (v4 == 18)
        {
          uint64_t v6 = *((void *)reader + 17);
          if (v6)
          {
            uint64_t v7 = *(void **)(v6 + 80);
            if (v7) {
              BOOL v8 = v7 == (void *)(v6 + 88);
            }
            else {
              BOOL v8 = 1;
            }
            if (!v8) {
              xmlFree(v7);
            }
            uint64_t v9 = xmlStrdup(*(const xmlChar **)(v3 + 16));
            xmlNodePtr v5 = (xmlNodePtr)*((void *)reader + 17);
            v5->xmlElementContentPtr content = v9;
          }

          else
          {
            xmlNodePtr v5 = xmlNewDocText(*(const xmlDoc **)(v2 + 64), *(const xmlChar **)(v3 + 16));
            *((void *)reader + 17) = v5;
          }
        }

        else if (v4 == 2)
        {
          xmlNodePtr v5 = *(xmlNodePtr *)(v3 + 24);
          if (!v5) {
            return (int)v5;
          }
        }

        else
        {
          xmlNodePtr v5 = *(xmlNodePtr *)(v3 + 48);
          if (!v5) {
            return (int)v5;
          }
        }

        *((void *)reader + 15) = v5;
        LODWORD(v5) = 1;
      }

      else
      {
        LODWORD(v5) = 0;
      }
    }

    else
    {
      LODWORD(v5) = -1;
    }
  }

  else
  {
    LODWORD(v5) = -1;
  }

  return (int)v5;
}

const xmlChar *__cdecl xmlTextReaderConstEncoding(xmlTextReaderPtr reader)
{
  if (reader
    && ((v1 = *((void *)reader + 1)) != 0 || (uint64_t v4 = *((void *)reader + 4)) != 0 && (v1 = *(void *)(v4 + 16)) != 0)
    && (uint64_t v2 = *(const xmlChar **)(v1 + 112)) != 0LL)
  {
    return xmlDictLookup(*((xmlDictPtr *)reader + 20), v2, -1);
  }

  else
  {
    return 0LL;
  }

int xmlTextReaderAttributeCount(xmlTextReaderPtr reader)
{
  if (!reader) {
    return -1;
  }
  uint64_t v1 = *((void *)reader + 14);
  if (!v1) {
    return 0;
  }
  if (*((void *)reader + 15)) {
    uint64_t v1 = *((void *)reader + 15);
  }
  if (*(_DWORD *)(v1 + 8) != 1) {
    return 0;
  }
  int v2 = *((_DWORD *)reader + 6);
  if (v2 == 2 || v2 == 4) {
    return 0;
  }
  uint64_t v5 = *(void *)(v1 + 88);
  if (v5)
  {
    int v6 = 0;
    do
    {
      ++v6;
      uint64_t v5 = *(void *)(v5 + 48);
    }

    while (v5);
  }

  else
  {
    int v6 = 0;
  }

  uint64_t v7 = (void *)(v1 + 96);
  int result = v6 - 1;
  do
  {
    uint64_t v7 = (void *)*v7;
    ++result;
  }

  while (v7);
  return result;
}

int xmlTextReaderNodeType(xmlTextReaderPtr reader)
{
  if (!reader) {
    return -1;
  }
  int v2 = (const xmlNode *)*((void *)reader + 14);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *((void *)reader + 15);
  if (!v3) {
    uint64_t v3 = *((void *)reader + 14);
  }
  int v4 = *(_DWORD *)(v3 + 8);
  int result = 2;
  switch(v4)
  {
    case 1:
      if (((*((_DWORD *)reader + 6) - 2) & 0xFFFFFFFD) != 0) {
        int result = 1;
      }
      else {
        int result = 15;
      }
      break;
    case 2:
    case 18:
      return result;
    case 3:
      if (xmlIsBlankNode(v2))
      {
        if (xmlNodeGetSpacePreserve(*((const xmlNode **)reader + 14))) {
          int result = 14;
        }
        else {
          int result = 13;
        }
      }

      else
      {
        int result = 3;
      }

      break;
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 11:
    case 12:
      int result = v4;
      break;
    case 9:
    case 13:
    case 21:
      int result = 9;
      break;
    case 10:
    case 14:
      int result = 10;
      break;
    case 15:
    case 16:
    case 17:
    case 19:
    case 20:
      return 0;
    default:
      return -1;
  }

  return result;
}

int xmlTextReaderIsEmptyElement(xmlTextReaderPtr reader)
{
  if (!reader) {
    return -1;
  }
  uint64_t v1 = *((void *)reader + 14);
  if (!v1) {
    return -1;
  }
  if (*(_DWORD *)(v1 + 8) != 1 || *((void *)reader + 15) || *(void *)(v1 + 24) || *((_DWORD *)reader + 6) == 2) {
    return 0;
  }
  return *(_WORD *)(v1 + 114) & 1;
}

xmlChar *__cdecl xmlTextReaderLocalName(xmlTextReaderPtr reader)
{
  if (!reader) {
    return 0LL;
  }
  uint64_t v1 = *((void *)reader + 14);
  if (!v1) {
    return 0LL;
  }
  if (*((void *)reader + 15)) {
    uint64_t v1 = *((void *)reader + 15);
  }
  int v2 = *(_DWORD *)(v1 + 8);
  if ((v2 - 1) >= 2)
  {
    if (v2 != 18) {
      return xmlTextReaderName(reader);
    }
    uint64_t v3 = *(const xmlChar **)(v1 + 24);
    if (!v3) {
      return xmlStrdup((const xmlChar *)"xmlns");
    }
  }

  else
  {
    uint64_t v3 = *(const xmlChar **)(v1 + 16);
  }

  return xmlStrdup(v3);
}

xmlChar *__cdecl xmlTextReaderName(xmlChar *reader)
{
  if (reader)
  {
    uint64_t v1 = reader;
    uint64_t v2 = *((void *)reader + 14);
    if (v2)
    {
      reader = 0LL;
      uint64_t v3 = *((void *)v1 + 15);
      if (v3) {
        uint64_t v4 = v3;
      }
      else {
        uint64_t v4 = v2;
      }
      switch(*(_DWORD *)(v4 + 8))
      {
        case 1:
        case 2:
          uint64_t v6 = *(void *)(v4 + 72);
          if (!v6) {
            goto LABEL_7;
          }
          uint64_t v7 = *(const xmlChar **)(v6 + 24);
          if (!v7) {
            goto LABEL_7;
          }
          BOOL v8 = xmlStrdup(v7);
          uint64_t v9 = xmlStrcat(v8, (const xmlChar *)":");
          int v10 = *(const xmlChar **)(v4 + 16);
          goto LABEL_21;
        case 3:
          uint64_t v5 = "#text";
          goto LABEL_18;
        case 4:
          uint64_t v5 = "#cdata-section";
          goto LABEL_18;
        case 5:
        case 6:
        case 7:
        case 0xA:
        case 0xC:
        case 0xE:
LABEL_7:
          uint64_t v5 = *(const char **)(v4 + 16);
          goto LABEL_18;
        case 8:
          uint64_t v5 = "#comment";
          goto LABEL_18;
        case 9:
        case 0xD:
        case 0x15:
          uint64_t v5 = "#document";
          goto LABEL_18;
        case 0xB:
          uint64_t v5 = "#document-fragment";
LABEL_18:
          reader = xmlStrdup((const xmlChar *)v5);
          break;
        case 0x12:
          reader = xmlStrdup((const xmlChar *)"xmlns");
          if (*(void *)(v4 + 24))
          {
            uint64_t v9 = xmlStrcat(reader, (const xmlChar *)":");
            int v10 = *(const xmlChar **)(v4 + 24);
LABEL_21:
            reader = xmlStrcat(v9, v10);
          }

          break;
        default:
          return reader;
      }
    }

    else
    {
      return 0LL;
    }
  }

  return reader;
}

const xmlChar *__cdecl xmlTextReaderConstLocalName(xmlTextReaderPtr reader)
{
  if (!reader) {
    return 0LL;
  }
  uint64_t v1 = *((void *)reader + 14);
  if (!v1) {
    return (const xmlChar *)v1;
  }
  if (*((void *)reader + 15)) {
    uint64_t v1 = *((void *)reader + 15);
  }
  int v2 = *(_DWORD *)(v1 + 8);
  if (v2 != 18) {
    return xmlTextReaderConstName(reader);
  }
  uint64_t v1 = *(void *)(v1 + 24);
  if (v1) {
    return (const xmlChar *)v1;
  }
  return xmlDictLookup(*((xmlDictPtr *)reader + 20), (const xmlChar *)"xmlns", -1);
}

const xmlChar *__cdecl xmlTextReaderConstName(xmlTextReaderPtr reader)
{
  if (reader && (uint64_t v1 = *((void *)reader + 14)) != 0)
  {
    int v2 = 0LL;
    if (*((void *)reader + 15)) {
      uint64_t v1 = *((void *)reader + 15);
    }
    switch(*(_DWORD *)(v1 + 8))
    {
      case 1:
      case 2:
        uint64_t v6 = *(void *)(v1 + 72);
        if (!v6) {
          return *(const xmlChar **)(v1 + 16);
        }
        uint64_t v4 = *(const char **)(v6 + 24);
        if (!v4) {
          return *(const xmlChar **)(v1 + 16);
        }
        uint64_t v3 = (xmlDict *)*((void *)reader + 20);
        uint64_t v7 = *(const xmlChar **)(v1 + 16);
LABEL_13:
        int result = xmlDictQLookup(v3, (const xmlChar *)v4, v7);
        break;
      case 3:
        uint64_t v3 = (xmlDict *)*((void *)reader + 20);
        uint64_t v4 = "#text";
        return xmlDictLookup(v3, (const xmlChar *)v4, -1);
      case 4:
        uint64_t v3 = (xmlDict *)*((void *)reader + 20);
        uint64_t v4 = "#cdata-section";
        return xmlDictLookup(v3, (const xmlChar *)v4, -1);
      case 5:
      case 6:
      case 7:
      case 0xA:
      case 0xC:
      case 0xE:
        uint64_t v3 = (xmlDict *)*((void *)reader + 20);
        uint64_t v4 = *(const char **)(v1 + 16);
        return xmlDictLookup(v3, (const xmlChar *)v4, -1);
      case 8:
        uint64_t v3 = (xmlDict *)*((void *)reader + 20);
        uint64_t v4 = "#comment";
        return xmlDictLookup(v3, (const xmlChar *)v4, -1);
      case 9:
      case 0xD:
      case 0x15:
        uint64_t v3 = (xmlDict *)*((void *)reader + 20);
        uint64_t v4 = "#document";
        return xmlDictLookup(v3, (const xmlChar *)v4, -1);
      case 0xB:
        uint64_t v3 = (xmlDict *)*((void *)reader + 20);
        uint64_t v4 = "#document-fragment";
        return xmlDictLookup(v3, (const xmlChar *)v4, -1);
      case 0x12:
        uint64_t v7 = *(const xmlChar **)(v1 + 24);
        uint64_t v3 = (xmlDict *)*((void *)reader + 20);
        uint64_t v4 = "xmlns";
        if (v7) {
          goto LABEL_13;
        }
        return xmlDictLookup(v3, (const xmlChar *)v4, -1);
      default:
        return v2;
    }
  }

  else
  {
    return 0LL;
  }

  return result;
}

xmlChar *__cdecl xmlTextReaderPrefix(xmlTextReaderPtr reader)
{
  if (!reader) {
    return 0LL;
  }
  uint64_t v1 = *((void *)reader + 14);
  if (!v1) {
    return 0LL;
  }
  if (*((void *)reader + 15)) {
    uint64_t v1 = *((void *)reader + 15);
  }
  int v2 = *(_DWORD *)(v1 + 8);
  if ((v2 - 1) >= 2)
  {
    if (v2 == 18 && *(void *)(v1 + 24)) {
      return xmlStrdup((const xmlChar *)"xmlns");
    }
    return 0LL;
  }

  uint64_t v3 = *(void *)(v1 + 72);
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = *(const xmlChar **)(v3 + 24);
  if (!v4) {
    return 0LL;
  }
  return xmlStrdup(v4);
}

const xmlChar *__cdecl xmlTextReaderConstPrefix(xmlTextReaderPtr reader)
{
  if (!reader) {
    return 0LL;
  }
  uint64_t v1 = *((void *)reader + 14);
  if (!v1) {
    return 0LL;
  }
  if (*((void *)reader + 15)) {
    uint64_t v1 = *((void *)reader + 15);
  }
  int v2 = *(_DWORD *)(v1 + 8);
  if ((v2 - 1) >= 2)
  {
    if (v2 != 18 || !*(void *)(v1 + 24)) {
      return 0LL;
    }
    uint64_t v4 = (const xmlChar *)"xmlns";
    return xmlDictLookup(*((xmlDictPtr *)reader + 20), v4, -1);
  }

  uint64_t v3 = *(void *)(v1 + 72);
  if (v3)
  {
    uint64_t v4 = *(const xmlChar **)(v3 + 24);
    if (v4) {
      return xmlDictLookup(*((xmlDictPtr *)reader + 20), v4, -1);
    }
  }

  return 0LL;
}

xmlChar *__cdecl xmlTextReaderNamespaceUri(xmlTextReaderPtr reader)
{
  if (!reader) {
    return 0LL;
  }
  uint64_t v1 = *((void *)reader + 14);
  if (!v1) {
    return 0LL;
  }
  if (*((void *)reader + 15)) {
    uint64_t v1 = *((void *)reader + 15);
  }
  int v2 = *(_DWORD *)(v1 + 8);
  if ((v2 - 1) >= 2)
  {
    if (v2 == 18) {
      return xmlStrdup((const xmlChar *)"http://www.w3.org/2000/xmlns/");
    }
    return 0LL;
  }

  uint64_t v3 = *(void *)(v1 + 72);
  if (!v3) {
    return 0LL;
  }
  return xmlStrdup(*(const xmlChar **)(v3 + 16));
}

const xmlChar *__cdecl xmlTextReaderConstNamespaceUri(xmlTextReaderPtr reader)
{
  if (reader)
  {
    uint64_t v1 = *((void *)reader + 14);
    if (v1)
    {
      if (*((void *)reader + 15)) {
        uint64_t v1 = *((void *)reader + 15);
      }
      int v2 = *(_DWORD *)(v1 + 8);
      if ((v2 - 1) >= 2)
      {
        if (v2 == 18)
        {
          uint64_t v4 = (xmlDict *)*((void *)reader + 20);
          uint64_t v5 = (const xmlChar *)"http://www.w3.org/2000/xmlns/";
          return xmlDictLookup(v4, v5, -1);
        }
      }

      else
      {
        uint64_t v3 = *(void *)(v1 + 72);
        if (v3)
        {
          uint64_t v4 = (xmlDict *)*((void *)reader + 20);
          uint64_t v5 = *(const xmlChar **)(v3 + 16);
          return xmlDictLookup(v4, v5, -1);
        }
      }
    }
  }

  return 0LL;
}

xmlChar *__cdecl xmlTextReaderBaseUri(xmlTextReaderPtr reader)
{
  if (reader && (uint64_t v1 = (const xmlNode *)*((void *)reader + 14)) != 0LL) {
    return xmlNodeGetBase(0LL, v1);
  }
  else {
    return 0LL;
  }
}

const xmlChar *__cdecl xmlTextReaderConstBaseUri(xmlTextReaderPtr reader)
{
  if (!reader) {
    return 0LL;
  }
  int v2 = (const xmlNode *)*((void *)reader + 14);
  if (!v2) {
    return 0LL;
  }
  Base = xmlNodeGetBase(0LL, v2);
  if (!Base) {
    return 0LL;
  }
  uint64_t v4 = Base;
  uint64_t v5 = xmlDictLookup(*((xmlDictPtr *)reader + 20), Base, -1);
  xmlFree(v4);
  return v5;
}

int xmlTextReaderDepth(xmlTextReaderPtr reader)
{
  if (!reader) {
    return -1;
  }
  if (!*((void *)reader + 14)) {
    return 0;
  }
  uint64_t v1 = *((void *)reader + 15);
  if (!v1) {
    return *((_DWORD *)reader + 32);
  }
  if ((*(_DWORD *)(v1 + 8) | 0x10) == 0x12) {
    return *((_DWORD *)reader + 32) + 1;
  }
  return *((_DWORD *)reader + 32) + 2;
}

int xmlTextReaderHasAttributes(xmlTextReaderPtr reader)
{
  if (!reader) {
    return -1;
  }
  uint64_t v1 = *((void *)reader + 14);
  if (!v1) {
    return 0;
  }
  if (*((void *)reader + 15)) {
    uint64_t v1 = *((void *)reader + 15);
  }
  return *(_DWORD *)(v1 + 8) == 1 && (*(void *)(v1 + 88) || *(void *)(v1 + 96));
}

int xmlTextReaderHasValue(xmlTextReaderPtr reader)
{
  if (!reader) {
    return -1;
  }
  uint64_t v1 = *((void *)reader + 14);
  if (!v1) {
    return 0;
  }
  if (*((void *)reader + 15)) {
    uint64_t v1 = *((void *)reader + 15);
  }
  unsigned int v2 = *(_DWORD *)(v1 + 8);
  int result = 1;
  BOOL v4 = v2 > 0x12;
  int v5 = (1 << v2) & 0x4019C;
  if (v4 || v5 == 0) {
    return 0;
  }
  return result;
}

xmlChar *__cdecl xmlTextReaderValue(xmlTextReaderPtr reader)
{
  if (!reader) {
    return 0LL;
  }
  uint64_t v1 = *((void *)reader + 14);
  if (!v1) {
    return 0LL;
  }
  if (*((void *)reader + 15)) {
    uint64_t v1 = *((void *)reader + 15);
  }
  unsigned int v2 = *(_DWORD *)(v1 + 8);
  if (v2 > 0x12) {
    return 0LL;
  }
  if (((1 << v2) & 0x198) != 0)
  {
    uint64_t v3 = *(const xmlChar **)(v1 + 80);
    if (v3) {
      return xmlStrdup(v3);
    }
    return 0LL;
  }

  if (v2 != 2)
  {
    if (v2 == 18) {
      return xmlStrdup(*(const xmlChar **)(v1 + 16));
    }
    return 0LL;
  }

  uint64_t v5 = *(void *)(v1 + 40);
  if (v5)
  {
    uint64_t v6 = *(xmlDoc **)(v5 + 64);
    uint64_t v7 = *(const xmlNode **)(v1 + 24);
  }

  else
  {
    uint64_t v7 = *(const xmlNode **)(v1 + 24);
    uint64_t v6 = 0LL;
  }

  return xmlNodeListGetString(v6, v7, 1);
}

const xmlChar *__cdecl xmlTextReaderConstValue(const xmlChar *reader)
{
  if (!reader) {
    return reader;
  }
  uint64_t v1 = reader;
  uint64_t v2 = *((void *)reader + 14);
  if (!v2) {
    return 0LL;
  }
  reader = 0LL;
  if (*((void *)v1 + 15)) {
    uint64_t v3 = *((void *)v1 + 15);
  }
  else {
    uint64_t v3 = v2;
  }
  unsigned int v4 = *(_DWORD *)(v3 + 8);
  if (v4 <= 0x12)
  {
    if (((1 << v4) & 0x198) != 0) {
      return *(const xmlChar **)(v3 + 80);
    }
    if (v4 != 2)
    {
      if (v4 == 18) {
        return *(const xmlChar **)(v3 + 16);
      }
      return reader;
    }

    uint64_t v5 = *(void *)(v3 + 24);
    if (v5 && *(_DWORD *)(v5 + 8) == 3 && !*(void *)(v5 + 48)) {
      return *(const xmlChar **)(v5 + 80);
    }
    uint64_t v6 = *((void *)v1 + 19);
    if (v6)
    {
      xmlBufEmpty(v6);
      goto LABEL_19;
    }

    Size = xmlBufCreateSize(100LL);
    *((void *)v1 + 19) = Size;
    if (Size)
    {
      xmlBufSetAllocationScheme((uint64_t)Size, 5u);
LABEL_19:
      xmlBufGetNodeContent(*((xmlBufPtr *)v1 + 19), (const xmlNode *)v3);
      reader = xmlBufContent(*((const xmlBuf **)v1 + 19));
      if (!reader)
      {
        xmlBufFree(*((_DWORD **)v1 + 19));
        BOOL v8 = xmlBufCreateSize(100LL);
        *((void *)v1 + 19) = v8;
        xmlBufSetAllocationScheme((uint64_t)v8, 5u);
        return (const xmlChar *)&byte_181A3ACBA;
      }

      return reader;
    }

    xmlGenericErrorFunc v9 = *__xmlGenericError();
    int v10 = __xmlGenericErrorContext();
    v9(*v10, "xmlTextReaderSetup : malloc failed\n");
    return 0LL;
  }

  return reader;
}

int xmlTextReaderIsDefault(xmlTextReaderPtr reader)
{
  if (reader) {
    return 0;
  }
  else {
    return -1;
  }
}

int xmlTextReaderQuoteChar(xmlTextReaderPtr reader)
{
  if (reader) {
    return 34;
  }
  else {
    return -1;
  }
}

xmlChar *__cdecl xmlTextReaderXmlLang(xmlTextReaderPtr reader)
{
  if (reader && (uint64_t v1 = (const xmlNode *)*((void *)reader + 14)) != 0LL) {
    return xmlNodeGetLang(v1);
  }
  else {
    return 0LL;
  }
}

const xmlChar *__cdecl xmlTextReaderConstXmlLang(xmlTextReaderPtr reader)
{
  if (!reader) {
    return 0LL;
  }
  uint64_t v2 = (const xmlNode *)*((void *)reader + 14);
  if (!v2) {
    return 0LL;
  }
  Lang = xmlNodeGetLang(v2);
  if (!Lang) {
    return 0LL;
  }
  unsigned int v4 = Lang;
  uint64_t v5 = xmlDictLookup(*((xmlDictPtr *)reader + 20), Lang, -1);
  xmlFree(v4);
  return v5;
}

const xmlChar *__cdecl xmlTextReaderConstString(const xmlChar *reader, const xmlChar *str)
{
  if (reader) {
    return xmlDictLookup(*((xmlDictPtr *)reader + 20), str, -1);
  }
  return reader;
}

int xmlTextReaderNormalization(xmlTextReaderPtr reader)
{
  if (reader) {
    return 1;
  }
  else {
    return -1;
  }
}

int xmlTextReaderSetParserProp(xmlTextReaderPtr reader, int prop, int value)
{
  if (!reader) {
    return -1;
  }
  unsigned int v4 = (_DWORD *)*((void *)reader + 4);
  if (!v4) {
    return -1;
  }
  switch(prop)
  {
    case 1:
      if (!value)
      {
        int result = 0;
        v4[108] = 0;
        return result;
      }

      if (v4[108]) {
        return 0;
      }
      if (*(_DWORD *)reader) {
        return -1;
      }
      int result = 0;
      int v7 = 2;
      goto LABEL_21;
    case 2:
      int v6 = v4[108];
      if (value)
      {
        int result = 0;
        int v7 = v6 | 4;
      }

      else
      {
        if ((v6 & 4) == 0) {
          return 0;
        }
        int result = 0;
        int v7 = v6 - 4;
      }

int xmlTextReaderGetParserProp(xmlTextReaderPtr reader, int prop)
{
  if (!reader) {
    return -1;
  }
  uint64_t v2 = (int *)*((void *)reader + 4);
  if (!v2) {
    return -1;
  }
  switch(prop)
  {
    case 1:
      if (v2[108]) {
        int result = 1;
      }
      else {
        int result = v2[39] != 0;
      }
      break;
    case 2:
      int result = (v2[108] >> 2) & 1;
      break;
    case 3:
      int result = *((_DWORD *)reader + 4);
      break;
    case 4:
      int result = v2[7];
      break;
    default:
      return -1;
  }

  return result;
}

int xmlTextReaderGetParserLineNumber(xmlTextReaderPtr reader)
{
  if (reader)
  {
    uint64_t v1 = *((void *)reader + 4);
    if (v1 && (uint64_t v2 = *(void *)(v1 + 56)) != 0) {
      LODWORD(reader) = *(_DWORD *)(v2 + 52);
    }
    else {
      LODWORD(reader) = 0;
    }
  }

  return (int)reader;
}

int xmlTextReaderGetParserColumnNumber(xmlTextReaderPtr reader)
{
  if (reader)
  {
    uint64_t v1 = *((void *)reader + 4);
    if (v1 && (uint64_t v2 = *(void *)(v1 + 56)) != 0) {
      LODWORD(reader) = *(_DWORD *)(v2 + 56);
    }
    else {
      LODWORD(reader) = 0;
    }
  }

  return (int)reader;
}

xmlNodePtr xmlTextReaderCurrentNode(xmlNodePtr reader)
{
  if (reader)
  {
    xmlNodePtr v1 = reader;
    reader = (xmlNodePtr)reader[1]._private;
    if (!reader) {
      return *(xmlNodePtr *)&v1->line;
    }
  }

  return reader;
}

int xmlTextReaderPreservePattern(xmlTextReaderPtr reader, const xmlChar *pattern, const xmlChar **namespaces)
{
  int result = -1;
  if (reader && pattern)
  {
    xmlPatternPtr v5 = xmlPatterncompile(pattern, *((xmlDict **)reader + 20), 0, namespaces);
    if (v5)
    {
      xmlPatternPtr v6 = v5;
      int v7 = *((_DWORD *)reader + 76);
      if (v7 > 0)
      {
LABEL_7:
        int result = *((_DWORD *)reader + 75);
        if (result < v7)
        {
          int v9 = (void *)*((void *)reader + 39);
LABEL_11:
          v9[result] = v6;
          *((_DWORD *)reader + 75) = result + 1;
          return result;
        }

        int v10 = 2 * v7;
        *((_DWORD *)reader + 76) = v10;
        uint64_t v11 = xmlRealloc(*((void **)reader + 39), 8LL * v10);
        if (v11)
        {
          int v9 = v11;
          *((void *)reader + 39) = v11;
          int result = *((_DWORD *)reader + 75);
          goto LABEL_11;
        }

        xmlGenericErrorFunc v12 = *__xmlGenericError();
        uint64_t v13 = __xmlGenericErrorContext();
        v12(*v13, "xmlRealloc failed !\n");
        *((int *)reader + 76) /= 2;
        return -1;
      }

      *((_DWORD *)reader + 76) = 4;
      int v8 = xmlMalloc(0x20uLL);
      *((void *)reader + 39) = v8;
      if (v8)
      {
        int v7 = *((_DWORD *)reader + 76);
        goto LABEL_7;
      }

      xmlGenericErrorFunc v14 = *__xmlGenericError();
      uint64_t v15 = __xmlGenericErrorContext();
      v14(*v15, "xmlMalloc failed !\n");
    }

    return -1;
  }

  return result;
}

xmlDocPtr xmlTextReaderCurrentDoc(xmlDocPtr reader)
{
  if (reader)
  {
    xmlDocPtr v1 = reader;
    reader = *(xmlDocPtr *)&reader->type;
    if (!reader)
    {
      xmlNodePtr last = v1->last;
      if (last)
      {
        reader = (xmlDocPtr)last->name;
        if (reader) {
          v1->charset = 1;
        }
      }

      else
      {
        return 0LL;
      }
    }
  }

  return reader;
}

int xmlTextReaderRelaxNGSetSchema(xmlTextReaderPtr reader, xmlRelaxNGPtr schema)
{
  if (!reader) {
    return -1;
  }
  if (schema)
  {
    if (*(_DWORD *)reader) {
      return -1;
    }
    int v7 = (xmlRelaxNG *)*((void *)reader + 26);
    if (v7)
    {
      xmlRelaxNGFree(v7);
      *((void *)reader + 26) = 0LL;
    }

    int v8 = (xmlRelaxNGValidCtxt *)*((void *)reader + 27);
    if (v8)
    {
      if (!*((_DWORD *)reader + 56)) {
        xmlRelaxNGFreeValidCtxt(v8);
      }
      *((void *)reader + 27) = 0LL;
    }

    *((_DWORD *)reader + 56) = 0;
    int v9 = xmlRelaxNGNewValidCtxt(schema);
    *((void *)reader + 27) = v9;
    if (!v9)
    {
      return -1;
    }

    else
    {
      if (*((void *)reader + 24)) {
        xmlRelaxNGSetValidErrors( v9,  (xmlRelaxNGValidityErrorFunc)xmlTextReaderValidityErrorRelay,  (xmlRelaxNGValidityWarningFunc)xmlTextReaderValidityWarningRelay,  reader);
      }
      if (*((void *)reader + 41)) {
        xmlRelaxNGSetValidStructuredErrors( *((xmlRelaxNGValidCtxtPtr *)reader + 27),  (xmlStructuredErrorFunc)xmlTextReaderValidityStructuredRelay,  reader);
      }
      int result = 0;
      *((_DWORD *)reader + 57) = 0;
      *((void *)reader + 29) = 0LL;
      *((_DWORD *)reader + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 2;
    }
  }

  else
  {
    xmlPatternPtr v5 = (xmlRelaxNG *)*((void *)reader + 26);
    if (v5)
    {
      xmlRelaxNGFree(v5);
      *((void *)reader + 26) = 0LL;
    }

    xmlPatternPtr v6 = (xmlRelaxNGValidCtxt *)*((void *)reader + 27);
    if (v6)
    {
      if (!*((_DWORD *)reader + 56)) {
        xmlRelaxNGFreeValidCtxt(v6);
      }
      *((void *)reader + 27) = 0LL;
    }

    int result = 0;
    *((_DWORD *)reader + 56) = 0;
  }

  return result;
}

void xmlTextReaderValidityErrorRelay(uint64_t a1, char *__format, ...)
{
  uint64_t v3 = xmlTextReaderBuildMessage(__format, va);
  unsigned int v4 = v3;
  xmlPatternPtr v5 = *(void (**)(void, char *, uint64_t, void))(a1 + 192);
  if (v5)
  {
    v5(*(void *)(a1 + 200), v3, 2LL, 0LL);
    if (!v4) {
      return;
    }
  }

  else
  {
    xmlTextReaderValidityError(a1, (xmlChar *)"%s", v3);
    if (!v4) {
      return;
    }
  }

  xmlFree(v4);
}

void xmlTextReaderValidityWarningRelay(uint64_t a1, char *__format, ...)
{
  uint64_t v3 = xmlTextReaderBuildMessage(__format, va);
  unsigned int v4 = v3;
  xmlPatternPtr v5 = *(void (**)(void, char *, uint64_t, void))(a1 + 192);
  if (v5)
  {
    v5(*(void *)(a1 + 200), v3, 1LL, 0LL);
    if (!v4) {
      return;
    }
  }

  else
  {
    xmlTextReaderValidityWarning(a1, (xmlChar *)"%s", v3);
    if (!v4) {
      return;
    }
  }

  xmlFree(v4);
}

void *xmlTextReaderValidityStructuredRelay(void *result, uint64_t a2)
{
  uint64_t v2 = (uint64_t (*)(void))result[41];
  if (v2) {
    return (void *)v2(result[25]);
  }
  if (a2)
  {
    uint64_t v3 = result[53];
    unsigned int v4 = *(uint64_t (**)(void))(v3 + 328);
    if (v4) {
      return (void *)v4(*(void *)(v3 + 200));
    }
  }

  return result;
}

int xmlTextReaderSetSchema(xmlTextReaderPtr reader, xmlSchemaPtr schema)
{
  if (!reader)
  {
    LODWORD(vxmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = -1;
    return (int)v4;
  }

  if (schema)
  {
    if (*(_DWORD *)reader)
    {
LABEL_4:
      LODWORD(vxmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = -1;
      return (int)v4;
    }

    int v7 = (xmlSchemaSAXPlugStruct *)*((void *)reader + 33);
    if (v7)
    {
      xmlSchemaSAXUnplug(v7);
      *((void *)reader + 3xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0LL;
    }

    int v8 = (xmlSchemaValidCtxt *)*((void *)reader + 31);
    if (v8)
    {
      if (!*((_DWORD *)reader + 64)) {
        xmlSchemaFreeValidCtxt(v8);
      }
      *((void *)reader + 31) = 0LL;
    }

    *((_DWORD *)reader + 6xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0;
    int v9 = (xmlSchema *)*((void *)reader + 30);
    if (v9)
    {
      xmlSchemaFree(v9);
      *((void *)reader + 30) = 0LL;
    }

    int v10 = xmlSchemaNewValidCtxt(schema);
    *((void *)reader + 31) = v10;
    if (!v10)
    {
      xmlSchemaFree(*((xmlSchemaPtr *)reader + 30));
      *((void *)reader + 30) = 0LL;
      goto LABEL_4;
    }

    xmlSchemaSAXPlugPtr v11 = xmlSchemaSAXPlug(v10, *((xmlSAXHandlerPtr **)reader + 4), (void **)(*((void *)reader + 4) + 8LL));
    *((void *)reader + 3xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = v11;
    if (!v11)
    {
      xmlSchemaFree(*((xmlSchemaPtr *)reader + 30));
      *((void *)reader + 30) = 0LL;
      xmlSchemaFreeValidCtxt(*((xmlSchemaValidCtxtPtr *)reader + 31));
      *((void *)reader + 31) = 0LL;
      goto LABEL_4;
    }

    xmlSchemaValidateSetLocator( *((xmlSchemaValidCtxtPtr *)reader + 31),  (xmlSchemaValidityLocatorFunc)xmlTextReaderLocator,  reader);
    if (*((void *)reader + 24)) {
      xmlSchemaSetValidErrors( *((xmlSchemaValidCtxtPtr *)reader + 31),  (xmlSchemaValidityErrorFunc)xmlTextReaderValidityErrorRelay,  (xmlSchemaValidityWarningFunc)xmlTextReaderValidityWarningRelay,  reader);
    }
    if (*((void *)reader + 41)) {
      xmlSchemaSetValidStructuredErrors( *((xmlSchemaValidCtxtPtr *)reader + 31),  (xmlStructuredErrorFunc)xmlTextReaderValidityStructuredRelay,  reader);
    }
    LODWORD(vxmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0;
    *((_DWORD *)reader + 65) = 0;
    *((_DWORD *)reader + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 4;
  }

  else
  {
    xmlPatternPtr v5 = (xmlSchemaSAXPlugStruct *)*((void *)reader + 33);
    if (v5)
    {
      xmlSchemaSAXUnplug(v5);
      *((void *)reader + 3xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0LL;
    }

    xmlPatternPtr v6 = (xmlSchemaValidCtxt *)*((void *)reader + 31);
    if (v6)
    {
      if (!*((_DWORD *)reader + 64)) {
        xmlSchemaFreeValidCtxt(v6);
      }
      *((void *)reader + 31) = 0LL;
    }

    *((_DWORD *)reader + 6xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0;
    unsigned int v4 = (xmlSchema *)*((void *)reader + 30);
    if (v4)
    {
      xmlSchemaFree(v4);
      LODWORD(vxmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0;
      *((void *)reader + 30) = 0LL;
    }
  }

  return (int)v4;
}

uint64_t xmlTextReaderLocator(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (!(a2 | a3)) {
    return 0xFFFFFFFFLL;
  }
  if (a2) {
    *(void *)a2 = 0LL;
  }
  if (a3) {
    *(void *)a3 = 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (!v7 || (uint64_t v8 = *(void *)(v7 + 56)) == 0)
  {
    int v9 = *(const xmlNode **)(a1 + 112);
    if (!v9) {
      return 0xFFFFFFFFLL;
    }
    if (a3)
    {
      uint64_t LineNo = xmlGetLineNo(v9);
      if (LineNo < 1)
      {
        uint64_t result = 0xFFFFFFFFLL;
        if (!a2) {
          return result;
        }
      }

      else
      {
        uint64_t v11 = LineNo;
        uint64_t result = 0LL;
        *(void *)a3 = v11;
        if (!a2) {
          return result;
        }
      }
    }

    else
    {
      uint64_t result = 0LL;
      if (!a2) {
        return result;
      }
    }

    uint64_t v12 = *(void *)(*(void *)(a1 + 112) + 64LL);
    if (v12)
    {
      uint64_t v13 = *(void *)(v12 + 136);
      if (v13)
      {
        *(void *)a2 = v13;
        return result;
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (a2) {
    *(void *)a2 = *(void *)(v8 + 8);
  }
  uint64_t result = 0LL;
  if (a3) {
    *(void *)a3 = *(int *)(*(void *)(*(void *)(a1 + 32) + 56LL) + 52LL);
  }
  return result;
}

int xmlTextReaderSchemaValidateCtxt(xmlTextReaderPtr reader, xmlSchemaValidCtxtPtr ctxt, int options)
{
  return xmlTextReaderSchemaValidateInternal((uint64_t)reader, 0LL, ctxt);
}

uint64_t xmlTextReaderSchemaValidateInternal(uint64_t a1, char *URL, xmlSchemaValidCtxtPtr ctxt)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *(xmlSchemaSAXPlugStruct **)(a1 + 264);
  if (v7)
  {
    xmlSchemaSAXUnplug(v7);
    *(void *)(a1 + 26xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
  }

  uint64_t v8 = *(xmlSchemaValidCtxt **)(a1 + 248);
  if (v8)
  {
    if (!*(_DWORD *)(a1 + 256)) {
      xmlSchemaFreeValidCtxt(v8);
    }
    *(void *)(a1 + 248) = 0LL;
  }

  *(_DWORD *)(a1 + 256) = 0;
  int v9 = *(xmlSchema **)(a1 + 240);
  if (v9)
  {
    xmlSchemaFree(v9);
    *(void *)(a1 + 240) = 0LL;
  }

  if (URL)
  {
    int v10 = xmlSchemaNewParserCtxt(URL);
    uint64_t v11 = v10;
    if (*(void *)(a1 + 192)) {
      xmlSchemaSetParserErrors( v10,  (xmlSchemaValidityErrorFunc)xmlTextReaderValidityErrorRelay,  (xmlSchemaValidityWarningFunc)xmlTextReaderValidityWarningRelay,  (void *)a1);
    }
    *(void *)(a1 + 240) = xmlSchemaParse(v11);
    xmlSchemaFreeParserCtxt(v11);
    uint64_t v12 = *(xmlSchema **)(a1 + 240);
    if (!v12) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v13 = xmlSchemaNewValidCtxt(v12);
    *(void *)(a1 + 248) = v13;
    if (!v13)
    {
      xmlSchemaFree(*(xmlSchemaPtr *)(a1 + 240));
      *(void *)(a1 + 240) = 0LL;
      return 0xFFFFFFFFLL;
    }

    xmlSchemaSAXPlugPtr v14 = xmlSchemaSAXPlug(v13, *(xmlSAXHandlerPtr **)(a1 + 32), (void **)(*(void *)(a1 + 32) + 8LL));
    *(void *)(a1 + 26xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v14;
    if (!v14)
    {
      xmlSchemaFree(*(xmlSchemaPtr *)(a1 + 240));
      *(void *)(a1 + 240) = 0LL;
      xmlSchemaFreeValidCtxt(*(xmlSchemaValidCtxtPtr *)(a1 + 248));
      *(void *)(a1 + 248) = 0LL;
      return 0xFFFFFFFFLL;
    }
  }

  else
  {
    *(void *)(a1 + 248) = ctxt;
    *(_DWORD *)(a1 + 256) = 1;
    xmlSchemaSAXPlugPtr v15 = xmlSchemaSAXPlug(ctxt, *(xmlSAXHandlerPtr **)(a1 + 32), (void **)(*(void *)(a1 + 32) + 8LL));
    *(void *)(a1 + 26xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v15;
    if (!v15)
    {
      *(void *)(a1 + 248) = 0LL;
      *(_DWORD *)(a1 + 256) = 0;
      return 0xFFFFFFFFLL;
    }
  }

  xmlSchemaValidateSetLocator( *(xmlSchemaValidCtxtPtr *)(a1 + 248),  (xmlSchemaValidityLocatorFunc)xmlTextReaderLocator,  (void *)a1);
  if (*(void *)(a1 + 192)) {
    xmlSchemaSetValidErrors( *(xmlSchemaValidCtxtPtr *)(a1 + 248),  (xmlSchemaValidityErrorFunc)xmlTextReaderValidityErrorRelay,  (xmlSchemaValidityWarningFunc)xmlTextReaderValidityWarningRelay,  (void *)a1);
  }
  if (*(void *)(a1 + 328)) {
    xmlSchemaSetValidStructuredErrors( *(xmlSchemaValidCtxtPtr *)(a1 + 248),  (xmlStructuredErrorFunc)xmlTextReaderValidityStructuredRelay,  (void *)a1);
  }
  uint64_t result = 0LL;
  *(_DWORD *)(a1 + 260) = 0;
  *(_DWORD *)(a1 + 16) = 4;
  return result;
}

int xmlTextReaderSchemaValidate(xmlTextReaderPtr reader, const char *xsd)
{
  return xmlTextReaderSchemaValidateInternal((uint64_t)reader, (char *)xsd, 0LL);
}

int xmlTextReaderRelaxNGValidateCtxt(xmlTextReaderPtr reader, xmlRelaxNGValidCtxtPtr ctxt, int options)
{
  return xmlTextReaderRelaxNGValidateInternal((uint64_t)reader, 0LL, ctxt);
}

uint64_t xmlTextReaderRelaxNGValidateInternal(uint64_t a1, char *URL, xmlRelaxNGValidCtxt *a3)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = a3;
  uint64_t v7 = *(xmlRelaxNGValidCtxt **)(a1 + 216);
  if (v7)
  {
    if (!*(_DWORD *)(a1 + 224)) {
      xmlRelaxNGFreeValidCtxt(v7);
    }
    *(void *)(a1 + 216) = 0LL;
  }

  *(_DWORD *)(a1 + 22xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0;
  uint64_t v8 = *(xmlRelaxNG **)(a1 + 208);
  if (v8)
  {
    xmlRelaxNGFree(v8);
    *(void *)(a1 + 208) = 0LL;
  }

  if (URL)
  {
    int v9 = xmlRelaxNGNewParserCtxt(URL);
    int v10 = v9;
    if (*(void *)(a1 + 192)) {
      xmlRelaxNGSetParserErrors( v9,  (xmlRelaxNGValidityErrorFunc)xmlTextReaderValidityErrorRelay,  (xmlRelaxNGValidityWarningFunc)xmlTextReaderValidityWarningRelay,  (void *)a1);
    }
    if (*(void *)(a1 + 328)) {
      xmlRelaxNGSetValidStructuredErrors( *(xmlRelaxNGValidCtxtPtr *)(a1 + 216),  (xmlStructuredErrorFunc)xmlTextReaderValidityStructuredRelay,  (void *)a1);
    }
    *(void *)(a1 + 208) = xmlRelaxNGParse(v10);
    xmlRelaxNGFreeParserCtxt(v10);
    uint64_t v11 = *(xmlRelaxNG **)(a1 + 208);
    if (!v11) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v3 = xmlRelaxNGNewValidCtxt(v11);
    *(void *)(a1 + 216) = v3;
    if (!v3)
    {
      xmlRelaxNGFree(*(xmlRelaxNGPtr *)(a1 + 208));
      *(void *)(a1 + 208) = 0LL;
      return 0xFFFFFFFFLL;
    }
  }

  else
  {
    *(void *)(a1 + 216) = v3;
    *(_DWORD *)(a1 + 22xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 1;
  }

  if (*(void *)(a1 + 192)) {
    xmlRelaxNGSetValidErrors( v3,  (xmlRelaxNGValidityErrorFunc)xmlTextReaderValidityErrorRelay,  (xmlRelaxNGValidityWarningFunc)xmlTextReaderValidityWarningRelay,  (void *)a1);
  }
  if (*(void *)(a1 + 328)) {
    xmlRelaxNGSetValidStructuredErrors( *(xmlRelaxNGValidCtxtPtr *)(a1 + 216),  (xmlStructuredErrorFunc)xmlTextReaderValidityStructuredRelay,  (void *)a1);
  }
  uint64_t result = 0LL;
  *(_DWORD *)(a1 + 228) = 0;
  *(void *)(a1 + 232) = 0LL;
  *(_DWORD *)(a1 + 16) = 2;
  return result;
}

int xmlTextReaderRelaxNGValidate(xmlTextReaderPtr reader, const char *rng)
{
  return xmlTextReaderRelaxNGValidateInternal((uint64_t)reader, (char *)rng, 0LL);
}

int xmlTextReaderIsNamespaceDecl(xmlTextReaderPtr reader)
{
  if (!reader) {
    return -1;
  }
  uint64_t v1 = *((void *)reader + 14);
  if (!v1) {
    return -1;
  }
  if (*((void *)reader + 15)) {
    uint64_t v1 = *((void *)reader + 15);
  }
  return *(_DWORD *)(v1 + 8) == 18;
}

const xmlChar *__cdecl xmlTextReaderConstXmlVersion(xmlTextReaderPtr reader)
{
  if (reader
    && ((v1 = *((void *)reader + 1)) != 0 || (uint64_t v4 = *((void *)reader + 4)) != 0 && (v1 = *(void *)(v4 + 16)) != 0)
    && (uint64_t v2 = *(const xmlChar **)(v1 + 104)) != 0LL)
  {
    return xmlDictLookup(*((xmlDictPtr *)reader + 20), v2, -1);
  }

  else
  {
    return 0LL;
  }

int xmlTextReaderStandalone(xmlTextReaderPtr reader)
{
  if (reader
    && ((v1 = *((void *)reader + 1)) != 0 || (uint64_t v3 = *((void *)reader + 4)) != 0 && (v1 = *(void *)(v3 + 16)) != 0))
  {
    return *(_DWORD *)(v1 + 76);
  }

  else
  {
    return -1;
  }

int xmlTextReaderLocatorLineNumber(xmlTextReaderLocatorPtr locator)
{
  if (!locator) {
    return -1;
  }
  if (*((void *)locator + 10)) {
    return xmlGetLineNo(*((const xmlNode **)locator + 10));
  }
  uint64_t v2 = *((void *)locator + 7);
  if (*(void *)(v2 + 8)) {
    return *(_DWORD *)(v2 + 52);
  }
  int v3 = *((_DWORD *)locator + 16);
  BOOL v4 = __OFSUB__(v3, 2);
  int v5 = v3 - 2;
  if (v5 < 0 != v4) {
    return *(_DWORD *)(v2 + 52);
  }
  uint64_t v2 = *(void *)(*((void *)locator + 9) + 8LL * v5);
  if (v2) {
    return *(_DWORD *)(v2 + 52);
  }
  else {
    return -1;
  }
}

xmlChar *__cdecl xmlTextReaderLocatorBaseURI(xmlTextReaderLocatorPtr locator)
{
  if (!locator) {
    return 0LL;
  }
  uint64_t v1 = (const xmlNode *)*((void *)locator + 10);
  if (v1) {
    return xmlNodeGetBase(0LL, v1);
  }
  int v3 = *(const xmlChar **)(*((void *)locator + 7) + 8LL);
  if (!v3)
  {
    int v4 = *((_DWORD *)locator + 16);
    BOOL v5 = __OFSUB__(v4, 2);
    int v6 = v4 - 2;
    if (v6 < 0 == v5)
    {
      uint64_t v7 = *(void *)(*((void *)locator + 9) + 8LL * v6);
      if (v7) {
        return xmlStrdup(*(const xmlChar **)(v7 + 8));
      }
      return 0LL;
    }

    int v3 = 0LL;
  }

  return xmlStrdup(v3);
}

void xmlTextReaderSetErrorHandler(xmlTextReaderPtr reader, xmlTextReaderErrorFunc f, void *arg)
{
  int v4 = (void *)*((void *)reader + 4);
  BOOL v5 = (void *)*v4;
  if (f)
  {
    v5[31] = 0LL;
    v5[21] = xmlTextReaderWarning;
    v5[22] = xmlTextReaderError;
    v4[21] = xmlTextReaderValidityError;
    v4[22] = xmlTextReaderValidityWarning;
    *((void *)reader + 41) = 0LL;
    *((void *)reader + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = f;
    *((void *)reader + 25) = arg;
    int v6 = (xmlRelaxNGValidCtxt *)*((void *)reader + 27);
    if (v6)
    {
      xmlRelaxNGSetValidErrors( v6,  (xmlRelaxNGValidityErrorFunc)xmlTextReaderValidityErrorRelay,  (xmlRelaxNGValidityWarningFunc)xmlTextReaderValidityWarningRelay,  reader);
      xmlRelaxNGSetValidStructuredErrors(*((xmlRelaxNGValidCtxtPtr *)reader + 27), 0LL, reader);
    }

    uint64_t v7 = (xmlSchemaValidCtxt *)*((void *)reader + 31);
    if (v7)
    {
      uint64_t v8 = xmlTextReaderValidityErrorRelay;
      int v9 = xmlTextReaderValidityWarningRelay;
LABEL_10:
      xmlSchemaSetValidErrors(v7, (xmlSchemaValidityErrorFunc)v8, (xmlSchemaValidityWarningFunc)v9, reader);
      xmlSchemaSetValidStructuredErrors(*((xmlSchemaValidCtxtPtr *)reader + 31), 0LL, reader);
    }
  }

  else
  {
    v5[21] = xmlParserWarning;
    v5[22] = xmlParserError;
    v4[21] = xmlParserValidityError;
    v4[22] = xmlParserValidityWarning;
    *((void *)reader + 41) = 0LL;
    *((void *)reader + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
    *((void *)reader + 25) = 0LL;
    int v10 = (xmlRelaxNGValidCtxt *)*((void *)reader + 27);
    if (v10)
    {
      xmlRelaxNGSetValidErrors(v10, 0LL, 0LL, reader);
      xmlRelaxNGSetValidStructuredErrors(*((xmlRelaxNGValidCtxtPtr *)reader + 27), 0LL, reader);
    }

    uint64_t v7 = (xmlSchemaValidCtxt *)*((void *)reader + 31);
    if (v7)
    {
      uint64_t v8 = 0LL;
      int v9 = 0LL;
      goto LABEL_10;
    }
  }

void xmlTextReaderError(uint64_t a1, char *__format, ...)
{
  int v3 = xmlTextReaderBuildMessage(__format, va);
  if (v3)
  {
    int v4 = v3;
    uint64_t v5 = *(void *)(a1 + 424);
    int v6 = *(void (**)(void, char *, uint64_t, uint64_t))(v5 + 192);
    if (v6) {
      v6(*(void *)(v5 + 200), v3, 4LL, a1);
    }
    xmlFree(v4);
  }

void xmlTextReaderValidityError(uint64_t a1, xmlChar *str, ...)
{
  int v4 = xmlStrlen(str);
  if (v4 >= 2 && str[v4 - 2] != 58)
  {
    uint64_t v5 = xmlTextReaderBuildMessage((char *)str, va);
    if (v5)
    {
      int v6 = v5;
      uint64_t v7 = *(void *)(a1 + 424);
      uint64_t v8 = *(void (**)(void, char *, uint64_t, uint64_t))(v7 + 192);
      if (v8) {
        v8(*(void *)(v7 + 200), v5, 2LL, a1);
      }
      xmlFree(v6);
    }
  }

void xmlTextReaderWarning(uint64_t a1, char *__format, ...)
{
  int v3 = xmlTextReaderBuildMessage(__format, va);
  if (v3)
  {
    int v4 = v3;
    uint64_t v5 = *(void *)(a1 + 424);
    int v6 = *(void (**)(void, char *, uint64_t, uint64_t))(v5 + 192);
    if (v6) {
      v6(*(void *)(v5 + 200), v3, 3LL, a1);
    }
    xmlFree(v4);
  }

void xmlTextReaderValidityWarning(uint64_t a1, xmlChar *str, ...)
{
  int v4 = xmlStrlen(str);
  if (v4)
  {
    if (str[v4 - 1] != 58)
    {
      uint64_t v5 = xmlTextReaderBuildMessage((char *)str, va);
      if (v5)
      {
        int v6 = v5;
        uint64_t v7 = *(void *)(a1 + 424);
        uint64_t v8 = *(void (**)(void, char *, uint64_t, uint64_t))(v7 + 192);
        if (v8) {
          v8(*(void *)(v7 + 200), v5, 1LL, a1);
        }
        xmlFree(v6);
      }
    }
  }

void xmlTextReaderSetStructuredErrorHandler(xmlTextReaderPtr reader, xmlStructuredErrorFunc f, void *arg)
{
  int v4 = (void *)*((void *)reader + 4);
  uint64_t v5 = (void *)*v4;
  if (f)
  {
    v5[31] = xmlTextReaderStructuredError;
    v5[21] = xmlTextReaderWarning;
    v5[22] = 0LL;
    v4[21] = xmlTextReaderValidityError;
    v4[22] = xmlTextReaderValidityWarning;
    *((void *)reader + 41) = f;
    *((void *)reader + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
    *((void *)reader + 25) = arg;
    int v6 = (xmlRelaxNGValidCtxt *)*((void *)reader + 27);
    if (v6)
    {
      xmlRelaxNGSetValidErrors(v6, 0LL, 0LL, reader);
      xmlRelaxNGSetValidStructuredErrors( *((xmlRelaxNGValidCtxtPtr *)reader + 27),  (xmlStructuredErrorFunc)xmlTextReaderValidityStructuredRelay,  reader);
    }

    uint64_t v7 = (xmlSchemaValidCtxt *)*((void *)reader + 31);
    if (v7)
    {
      xmlSchemaSetValidErrors(v7, 0LL, 0LL, reader);
      uint64_t v8 = (xmlSchemaValidCtxt *)*((void *)reader + 31);
      int v9 = (void (__cdecl *)(void *, xmlErrorPtr))xmlTextReaderValidityStructuredRelay;
LABEL_10:
      xmlSchemaSetValidStructuredErrors(v8, v9, reader);
    }
  }

  else
  {
    v5[31] = 0LL;
    v5[21] = xmlParserWarning;
    v5[22] = xmlParserError;
    v4[21] = xmlParserValidityError;
    v4[22] = xmlParserValidityWarning;
    *((void *)reader + 41) = 0LL;
    *((void *)reader + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
    *((void *)reader + 25) = 0LL;
    int v10 = (xmlRelaxNGValidCtxt *)*((void *)reader + 27);
    if (v10)
    {
      xmlRelaxNGSetValidErrors(v10, 0LL, 0LL, reader);
      xmlRelaxNGSetValidStructuredErrors(*((xmlRelaxNGValidCtxtPtr *)reader + 27), 0LL, reader);
    }

    uint64_t v11 = (xmlSchemaValidCtxt *)*((void *)reader + 31);
    if (v11)
    {
      xmlSchemaSetValidErrors(v11, 0LL, 0LL, reader);
      uint64_t v8 = (xmlSchemaValidCtxt *)*((void *)reader + 31);
      int v9 = 0LL;
      goto LABEL_10;
    }
  }

uint64_t xmlTextReaderStructuredError(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(result + 424);
    int v3 = *(uint64_t (**)(void))(v2 + 328);
    if (v3) {
      return v3(*(void *)(v2 + 200));
    }
  }

  return result;
}

int xmlTextReaderIsValid(xmlTextReaderPtr reader)
{
  if (!reader) {
    return -1;
  }
  int v1 = *((_DWORD *)reader + 4);
  if (v1 == 4)
  {
    int v2 = *((_DWORD *)reader + 65);
    return v2 == 0;
  }

  if (v1 == 2)
  {
    int v2 = *((_DWORD *)reader + 57);
    return v2 == 0;
  }

  uint64_t v4 = *((void *)reader + 4);
  if (v4 && *(_DWORD *)(v4 + 156) == 1) {
    return *(_DWORD *)(v4 + 152);
  }
  else {
    return 0;
  }
}

void xmlTextReaderGetErrorHandler(xmlTextReaderPtr reader, xmlTextReaderErrorFunc *f, void **arg)
{
  if (f) {
    *f = (xmlTextReaderErrorFunc)*((void *)reader + 24);
  }
  if (arg) {
    *arg = (void *)*((void *)reader + 25);
  }
}

int xmlTextReaderSetup( xmlTextReaderPtr reader, xmlParserInputBufferPtr input, const char *URL, const char *encoding, int options)
{
  xmlParserInputBufferPtr v5 = input;
  if (!reader)
  {
    if (input) {
LABEL_24:
    }
      xmlFreeParserInputBuffer(v5);
    return -1;
  }

  __int16 v6 = options;
  int v10 = options | 0x10000;
  *((void *)reader + 1) = 0LL;
  *((_DWORD *)reader + 4xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0;
  *((_DWORD *)reader + 81) = options | 0x10000;
  *((_DWORD *)reader + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0;
  if (input)
  {
    uint64_t v11 = (xmlParserInputBuffer *)*((void *)reader + 6);
    int v12 = *((_DWORD *)reader + 5);
    if (v11) {
      BOOL v13 = (*((_DWORD *)reader + 5) & 1) == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (!v13)
    {
      xmlFreeParserInputBuffer(v11);
      int v12 = *((_DWORD *)reader + 5) - 1;
    }

    *((void *)reader + 6) = v5;
    *((_DWORD *)reader + 5) = v12 | 1;
  }

  Size = (void *)*((void *)reader + 19);
  if (!Size && (Size = xmlBufCreateSize(100LL), (*((void *)reader + 19) = Size) == 0LL)
    || (xmlBufSetAllocationScheme((uint64_t)Size, 5u), (xmlSchemaSAXPlugPtr v15 = (xmlSAXHandler *)*((void *)reader + 5)) == 0LL)
    && (xmlSchemaSAXPlugPtr v15 = (xmlSAXHandler *)xmlMalloc(0x100uLL), (*((void *)reader + 5) = v15) == 0LL))
  {
LABEL_29:
    xmlGenericErrorFunc v31 = *__xmlGenericError();
    BOOL v32 = __xmlGenericErrorContext();
    v31(*v32, "xmlTextReaderSetup : malloc failed\n");
    return -1;
  }

  xmlSAXVersion(v15, 2);
  uint64_t v16 = *((void *)reader + 5);
  __int128 v17 = *(_OWORD *)(v16 + 112);
  *(void *)(v16 + 112) = xmlTextReaderStartElement;
  *(_OWORD *)((char *)reader + 56) = v17;
  *(void *)(v16 + 120) = xmlTextReaderEndElement;
  __int128 v18 = 0uLL;
  if (*(_DWORD *)(v16 + 216) == -554844497)
  {
    __int128 v18 = *(_OWORD *)(v16 + 232);
    *(void *)(v16 + 232) = xmlTextReaderStartElementNs;
    *(void *)(v16 + 240) = xmlTextReaderEndElementNs;
  }

  *(_OWORD *)((char *)reader + 72) = v18;
  uint64_t v19 = *(void *)(v16 + 136);
  *(void *)(v16 + 136) = xmlTextReaderCharacters;
  *(void *)(v16 + 14xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = xmlTextReaderCharacters;
  uint64_t v20 = *(void *)(v16 + 200);
  *((void *)reader + 11) = v19;
  *((void *)reader + 12) = v20;
  *(void *)(v16 + 200) = xmlTextReaderCDataBlock;
  *(_DWORD *)reader = 0;
  *((void *)reader + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
  *((void *)reader + 15) = 0LL;
  if (v5)
  {
    if (xmlBufUse(*(const xmlBufPtr *)(*((void *)reader + 6) + 32LL)) <= 3) {
      xmlParserInputBufferRead(v5, 4);
    }
    xmlGenericErrorFunc v21 = (xmlParserCtxt *)*((void *)reader + 4);
    if (v21)
    {
      xmlCtxtReset(v21);
      xmlParserInputBufferPtr v22 = xmlAllocParserInputBuffer(XML_CHAR_ENCODING_NONE);
      if (v22)
      {
        xmlParserInputBufferPtr v5 = v22;
        xmlParserInputPtr v23 = xmlNewInputStream(*((xmlParserCtxtPtr *)reader + 4));
        if (v23)
        {
          uint64_t v24 = v23;
          if (URL) {
            BOOL v25 = xmlCanonicPath((const xmlChar *)URL);
          }
          else {
            BOOL v25 = 0LL;
          }
          v24->xmlParserInputBufferPtr buf = v5;
          v24->filename = (const char *)v25;
          xmlBufResetInput((uint64_t *)v5->buffer, v24);
          inputPush(*((xmlParserCtxtPtr *)reader + 4), v24);
          *((_DWORD *)reader + 27) = 0;
          if (*((void *)reader + 4)) {
            goto LABEL_33;
          }
          goto LABEL_29;
        }

        goto LABEL_24;
      }

      return -1;
    }

    size_t v26 = xmlBufUse(*(const xmlBufPtr *)(*((void *)reader + 6) + 32LL));
    int v27 = (xmlSAXHandler *)*((void *)reader + 5);
    if (v26 < 4)
    {
      xmlParserCtxtPtr PushParserCtxt = xmlCreatePushParserCtxt(*((xmlSAXHandlerPtr *)reader + 5), 0LL, 0LL, 0, URL);
      *((void *)reader + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = PushParserCtxt;
      *((void *)reader + 1xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0LL;
      if (PushParserCtxt) {
        goto LABEL_33;
      }
    }

    else
    {
      uint64_t v28 = xmlBufContent(*(const xmlBuf **)(*((void *)reader + 6) + 32LL));
      xmlParserCtxtPtr v29 = xmlCreatePushParserCtxt(v27, 0LL, (const char *)v28, 4, URL);
      *((void *)reader + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v29;
      *((void *)reader + 1xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0x400000000LL;
      if (v29) {
        goto LABEL_33;
      }
    }

    goto LABEL_29;
  }

uint64_t xmlTextReaderByteConsumed(xmlTextReaderPtr reader)
{
  if (reader && (int v1 = (xmlParserCtxt *)*((void *)reader + 4)) != 0LL) {
    return xmlByteConsumed(v1);
  }
  else {
    return -1LL;
  }
}

xmlTextReaderPtr xmlReaderWalker(xmlDocPtr doc)
{
  if (!doc) {
    return 0LL;
  }
  int v2 = (char *)xmlMalloc(0x150uLL);
  if (!v2)
  {
    xmlGenericErrorFunc v4 = *__xmlGenericError();
    xmlParserInputBufferPtr v5 = __xmlGenericErrorContext();
    v4(*v5, "xmlNewTextReader : malloc failed\n");
    return 0LL;
  }

  int v3 = (xmlTextReader *)v2;
  *((_OWORD *)v2 + 19) = 0u;
  *((_OWORD *)v2 + 20) = 0u;
  *((_OWORD *)v2 + 17) = 0u;
  *((_OWORD *)v2 + 18) = 0u;
  *((_OWORD *)v2 + 15) = 0u;
  *((_OWORD *)v2 + 16) = 0u;
  *((_OWORD *)v2 + 1xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
  *((_OWORD *)v2 + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0u;
  *((_OWORD *)v2 + 11) = 0u;
  *((_OWORD *)v2 + 12) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
  *((_OWORD *)v2 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *(_OWORD *)int v2 = 0u;
  *((_DWORD *)v2 + 4xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0;
  *((void *)v2 + 6) = 0LL;
  *(_DWORD *)int v2 = 0;
  *((void *)v2 + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
  *((void *)v2 + 15) = 0LL;
  *((void *)v2 + 1xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0LL;
  *((void *)v2 + 1) = doc;
  *(void *)(v2 + 20) = 2LL;
  *((void *)v2 + 20) = xmlDictCreate();
  return v3;
}

xmlTextReaderPtr xmlReaderForDoc(xmlTextReaderPtr cur, const char *URL, const char *encoding, int options)
{
  if (cur)
  {
    uint64_t v7 = (const char *)cur;
    int v8 = xmlStrlen((const xmlChar *)cur);
    return xmlReaderForMemory(v7, v8, URL, encoding, options);
  }

  return cur;
}

xmlTextReaderPtr xmlReaderForMemory( const char *buffer, int size, const char *URL, const char *encoding, int options)
{
  Static = xmlParserInputBufferCreateStatic(buffer, size, XML_CHAR_ENCODING_NONE);
  if (!Static) {
    return 0LL;
  }
  int v9 = Static;
  xmlTextReaderPtr v10 = xmlNewTextReader(Static, URL);
  uint64_t v11 = v10;
  if (v10)
  {
    *((_DWORD *)v10 + 5) |= 1u;
    xmlTextReaderSetup(v10, 0LL, URL, encoding, options);
  }

  else
  {
    xmlFreeParserInputBuffer(v9);
  }

  return v11;
}

xmlTextReaderPtr xmlReaderForFile(const char *filename, const char *encoding, int options)
{
  xmlParserInputBufferPtr v5 = xmlNewTextReaderFilename(filename);
  __int16 v6 = v5;
  if (v5) {
    xmlTextReaderSetup(v5, 0LL, 0LL, encoding, options);
  }
  return v6;
}

xmlTextReaderPtr xmlReaderForFd(int fd, const char *URL, const char *encoding, int options)
{
  if (fd < 0) {
    return 0LL;
  }
  xmlParserInputBufferPtr v7 = xmlParserInputBufferCreateFd(fd, XML_CHAR_ENCODING_NONE);
  if (!v7) {
    return 0LL;
  }
  int v8 = v7;
  v7->closecallbacuint64_t k = 0LL;
  xmlTextReaderPtr v9 = xmlNewTextReader(v7, URL);
  xmlTextReaderPtr v10 = v9;
  if (v9)
  {
    *((_DWORD *)v9 + 5) |= 1u;
    xmlTextReaderSetup(v9, 0LL, URL, encoding, options);
  }

  else
  {
    xmlFreeParserInputBuffer(v8);
  }

  return v10;
}

xmlTextReaderPtr xmlReaderForIO( xmlInputReadCallback ioread, xmlInputCloseCallback ioclose, void *ioctx, const char *URL, const char *encoding, int options)
{
  if (!ioread) {
    return 0LL;
  }
  xmlTextReaderPtr v10 = (xmlTextReader *)ioclose;
  IO = xmlParserInputBufferCreateIO(ioread, ioclose, ioctx, XML_CHAR_ENCODING_NONE);
  if (!IO)
  {
    if (!v10) {
      return v10;
    }
    ((void (*)(void *))v10)(ioctx);
    return 0LL;
  }

  int v12 = IO;
  xmlTextReaderPtr v13 = xmlNewTextReader(IO, URL);
  xmlTextReaderPtr v10 = v13;
  if (v13)
  {
    *((_DWORD *)v13 + 5) |= 1u;
    xmlTextReaderSetup(v13, 0LL, URL, encoding, options);
  }

  else
  {
    xmlFreeParserInputBuffer(v12);
  }

  return v10;
}

int xmlReaderNewWalker(xmlTextReaderPtr reader, xmlDocPtr doc)
{
  int result = -1;
  if (reader && doc)
  {
    xmlParserInputBufferPtr v5 = (xmlParserInputBuffer *)*((void *)reader + 6);
    if (v5) {
      xmlFreeParserInputBuffer(v5);
    }
    __int16 v6 = (xmlParserCtxt *)*((void *)reader + 4);
    if (v6) {
      xmlCtxtReset(v6);
    }
    int result = 0;
    *((_DWORD *)reader + 4xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0;
    *((void *)reader + 6) = 0LL;
    *(_DWORD *)reader = 0;
    *((void *)reader + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
    *((void *)reader + 15) = 0LL;
    *((void *)reader + 1xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0LL;
    *((void *)reader + 1) = doc;
    *(void *)((char *)reader + 20) = 2LL;
    if (!*((void *)reader + 20))
    {
      uint64_t v7 = *((void *)reader + 4);
      if (!v7 || (xmlDictPtr v8 = *(xmlDictPtr *)(v7 + 456)) == 0LL) {
        xmlDictPtr v8 = xmlDictCreate();
      }
      int result = 0;
      *((void *)reader + 20) = v8;
    }
  }

  return result;
}

int xmlReaderNewDoc( xmlTextReaderPtr reader, const xmlChar *cur, const char *URL, const char *encoding, int options)
{
  if (!reader || !cur) {
    return -1;
  }
  int v10 = xmlStrlen(cur);
  return xmlReaderNewMemory(reader, (const char *)cur, v10, URL, encoding, options);
}

int xmlReaderNewMemory( xmlTextReaderPtr reader, const char *buffer, int size, const char *URL, const char *encoding, int options)
{
  if (reader && buffer && (Static = xmlParserInputBufferCreateStatic(buffer, size, XML_CHAR_ENCODING_NONE)) != 0LL) {
    return xmlTextReaderSetup(reader, Static, URL, encoding, options);
  }
  else {
    return -1;
  }
}

int xmlReaderNewFile(xmlTextReaderPtr reader, const char *filename, const char *encoding, int options)
{
  if (reader && filename && (xmlDictPtr v8 = xmlParserInputBufferCreateFilename(filename, XML_CHAR_ENCODING_NONE)) != 0LL) {
    return xmlTextReaderSetup(reader, v8, filename, encoding, options);
  }
  else {
    return -1;
  }
}

int xmlReaderNewFd(xmlTextReaderPtr reader, int fd, const char *URL, const char *encoding, int options)
{
  if (!reader) {
    return -1;
  }
  if (fd < 0) {
    return -1;
  }
  xmlParserInputBufferPtr v9 = xmlParserInputBufferCreateFd(fd, XML_CHAR_ENCODING_NONE);
  if (!v9) {
    return -1;
  }
  v9->closecallbacuint64_t k = 0LL;
  return xmlTextReaderSetup(reader, v9, URL, encoding, options);
}

int xmlReaderNewIO( xmlTextReaderPtr reader, xmlInputReadCallback ioread, xmlInputCloseCallback ioclose, void *ioctx, const char *URL, const char *encoding, int options)
{
  if (reader && ioread)
  {
    IO = xmlParserInputBufferCreateIO(ioread, ioclose, ioctx, XML_CHAR_ENCODING_NONE);
    if (IO) {
      return xmlTextReaderSetup(reader, IO, URL, encoding, options);
    }
    if (ioclose) {
      ((void (*)(void *))ioclose)(ioctx);
    }
  }

  return -1;
}

void xmlTextReaderFreeProp(uint64_t a1, xmlAttrPtr attr)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    xmlParserInputBufferPtr v5 = *(xmlDict **)(v4 + 456);
  }
  else {
    xmlParserInputBufferPtr v5 = 0LL;
  }
  if (__xmlRegisterCallbacks && *__xmlDeregisterNodeDefaultValue())
  {
    __int16 v6 = __xmlDeregisterNodeDefaultValue();
    ((void (*)(xmlAttrPtr))*v6)(attr);
  }

  xmlNodePtr parent = attr->parent;
  if (parent)
  {
    doc = parent->doc;
    if (doc)
    {
      if (xmlIsID(doc, parent, attr))
      {
        xmlParserInputBufferPtr v9 = attr->parent->doc;
        if (v9)
        {
          ids = (xmlHashTable *)v9->ids;
          if (ids)
          {
            String = xmlNodeListGetString(v9, attr->children, 1);
            if (String)
            {
              int v12 = String;
              xmlTextReaderPtr v13 = xmlHashLookup(ids, String);
              xmlFree(v12);
              if (v13)
              {
                if ((xmlAttrPtr)v13[2] == attr)
                {
                  name = attr->name;
                  attr->name = 0LL;
                  v13[2] = 0LL;
                  v13[3] = name;
                }
              }
            }
          }
        }
      }

      xmlSchemaSAXPlugPtr v15 = attr->parent;
      uint64_t v16 = v15->doc;
      if (v16->intSubset || v16->extSubset)
      {
        if (xmlIsRef(v16, v15, attr))
        {
          __int128 v17 = attr->parent->doc;
          if (v17)
          {
            refs = (xmlHashTable *)v17->refs;
            if (refs)
            {
              uint64_t v19 = xmlNodeListGetString(v17, attr->children, 1);
              if (v19)
              {
                uint64_t v20 = v19;
                xmlGenericErrorFunc v21 = (xmlList *)xmlHashLookup(refs, v19);
                xmlFree(v20);
                if (v21) {
                  xmlListWalk(v21, (xmlListWalker)xmlTextReaderWalkRemoveRef, attr);
                }
              }
            }
          }
        }
      }
    }
  }

  childreuint64_t n = attr->children;
  if (children) {
    xmlTextReaderFreeNodeList(a1, (xmlDoc *)children);
  }
  xmlParserInputPtr v23 = (xmlChar *)attr->name;
  if (v23)
  {
    if (!v5)
    {
LABEL_30:
      xmlFree(v23);
      goto LABEL_31;
    }

    if (!xmlDictOwns(v5, v23))
    {
      xmlParserInputPtr v23 = (xmlChar *)attr->name;
      goto LABEL_30;
    }
  }

void xmlTextReaderFreeNodeList(uint64_t a1, xmlDoc *cur)
{
  xmlNsPtr v2 = (xmlNsPtr)cur;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    xmlParserInputBufferPtr v5 = *(xmlDict **)(v4 + 456);
  }
  else {
    xmlParserInputBufferPtr v5 = 0LL;
  }
  xmlNsType type = cur->type;
  if (type == XML_DOCUMENT_NODE || type == XML_HTML_DOCUMENT_NODE)
  {
    xmlFreeDoc(cur);
    return;
  }

  if (type != XML_NAMESPACE_DECL)
  {
    uint64_t v29 = 0LL;
    while (1)
    {
      while (1)
      {
        xmlNsType v8 = v2->type;
        if (v8 == XML_ENTITY_REF_NODE || v8 == XML_DTD_NODE) {
          break;
        }
        prefix = v2->prefix;
        if (!prefix || *((xmlNsPtr *)prefix + 5) != v2) {
          break;
        }
        ++v29;
        xmlNsPtr v2 = (xmlNsPtr)v2->prefix;
      }

      context = (xmlNs *)v2->context;
      xmlNodePtr next = v2[1].next;
      if (v8 == XML_DTD_NODE) {
        goto LABEL_61;
      }
      if (__xmlRegisterCallbacks && *__xmlDeregisterNodeDefaultValue())
      {
        xmlTextReaderPtr v13 = __xmlDeregisterNodeDefaultValue();
        ((void (*)(xmlNsPtr))*v13)(v2);
      }

      unsigned int v14 = v2->type;
      BOOL v15 = v14 > 0x14;
      int v16 = (1 << v14) & 0x180002;
      if (!v15 && v16 != 0)
      {
        __int128 v18 = (xmlAttr *)v2[1].context;
        if (v18)
        {
          do
          {
            uint64_t v19 = v18->next;
            xmlTextReaderFreeProp(a1, v18);
            __int128 v18 = v19;
          }

          while (v19);
        }
      }

      uint64_t v20 = (xmlChar *)v2[1]._private;
      if (v20 == (xmlChar *)&v2[1].context) {
        goto LABEL_41;
      }
      unsigned int v21 = v2->type;
      BOOL v22 = v21 > 0x14 || ((1 << v21) & 0x180022) == 0;
      if (v22 && v20 != 0LL) {
        break;
      }
LABEL_42:
      if (v21 <= 0x14 && ((1 << v21) & 0x180002) != 0)
      {
        int v25 = v2[2].next;
        if (v25)
        {
          xmlFreeNsList(v25);
          unsigned int v21 = v2->type;
        }
      }

      if (v21 == 3) {
        goto LABEL_56;
      }
      if (v21 == 8) {
        goto LABEL_56;
      }
      href = (xmlChar *)v2->href;
      if (!href) {
        goto LABEL_56;
      }
      if (!v5) {
        goto LABEL_54;
      }
      if (!xmlDictOwns(v5, href))
      {
        href = (xmlChar *)v2->href;
LABEL_54:
        xmlFree(href);
      }

      unsigned int v21 = v2->type;
LABEL_56:
      if ((v21 | 2) == 3 && (uint64_t v27 = *(void *)(a1 + 32)) != 0 && (v28 = *(_DWORD *)(v27 + 572), v28 <= 99))
      {
        v2[1].xmlNodePtr next = *(_xmlNs **)(v27 + 576);
        *(void *)(v27 + 576) = v2;
        *(_DWORD *)(v27 + 572) = v28 + 1;
      }

      else
      {
        xmlFree(v2);
      }

uint64_t xmlTextReaderWalkRemoveRef(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) != a2) {
    return 1LL;
  }
  uint64_t v4 = xmlStrdup(*(const xmlChar **)(a2 + 16));
  uint64_t result = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v4;
  return result;
}

void xmlTextReaderFreeIDTableEntry(void *a1)
{
  if (a1)
  {
    uint64_t v2 = a1[5];
    if (v2)
    {
      int v3 = *(xmlDict **)(v2 + 152);
      uint64_t v4 = (xmlChar *)a1[1];
      if (!v4) {
        goto LABEL_11;
      }
      if (v3)
      {
        if (xmlDictOwns(*(xmlDictPtr *)(v2 + 152), v4)) {
          goto LABEL_11;
        }
        uint64_t v4 = (xmlChar *)a1[1];
      }
    }

    else
    {
      uint64_t v4 = (xmlChar *)a1[1];
      if (!v4)
      {
        xmlParserInputBufferPtr v5 = (void *)a1[3];
        if (v5) {
          goto LABEL_16;
        }
        goto LABEL_17;
      }

      int v3 = 0LL;
    }

    xmlFree(v4);
LABEL_11:
    xmlParserInputBufferPtr v5 = (void *)a1[3];
    if (v5)
    {
      if (!v3)
      {
LABEL_16:
        xmlFree(v5);
        goto LABEL_17;
      }

      if (!xmlDictOwns(v3, (const xmlChar *)v5))
      {
        xmlParserInputBufferPtr v5 = (void *)a1[3];
        goto LABEL_16;
      }
    }

char *xmlTextReaderBuildMessage(char *__format, va_list a2)
{
  LODWORD(vxmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0;
  uint64_t v4 = 0LL;
  while (1)
  {
    xmlParserInputBufferPtr v5 = v4;
    unsigned int v6 = vsnprintf(v4, v3, __format, a2);
    if ((v6 & 0x80000000) != 0) {
      break;
    }
    if (v6 >> 9 < 0x7D) {
      size_t v3 = v6 + 1;
    }
    else {
      size_t v3 = 64000LL;
    }
    uint64_t v4 = (char *)xmlRealloc(v5, v3);
    if (!v4)
    {
      xmlGenericErrorFunc v7 = *__xmlGenericError();
      xmlNsType v8 = *__xmlGenericErrorContext();
      xmlParserInputBufferPtr v9 = "xmlRealloc failed !\n";
      goto LABEL_11;
    }
  }

  xmlGenericErrorFunc v7 = *__xmlGenericError();
  xmlNsType v8 = *__xmlGenericErrorContext();
  xmlParserInputBufferPtr v9 = "vsnprintf failed !\n";
LABEL_11:
  v7(v8, v9);
  if (v5)
  {
    xmlFree(v5);
    return 0LL;
  }

  return v5;
}

xmlRegExecCtxtPtr xmlRegNewExecCtxt(xmlRegexpPtr comp, xmlRegExecCallbacks callback, void *data)
{
  if (!comp || !*((void *)comp + 9) && !*((void *)comp + 2)) {
    return 0LL;
  }
  unsigned int v6 = xmlMalloc(0x98uLL);
  xmlGenericErrorFunc v7 = v6;
  if (v6)
  {
    v6[18] = 0LL;
    *((_OWORD *)v6 + 7) = 0u;
    *((_OWORD *)v6 + 8) = 0u;
    *((_OWORD *)v6 + 5) = 0u;
    *((_OWORD *)v6 + 6) = 0u;
    *((_OWORD *)v6 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
    *((_OWORD *)v6 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0u;
    *((_OWORD *)v6 + 1) = 0u;
    *((_OWORD *)v6 + 2) = 0u;
    *(_OWORD *)unsigned int v6 = 0u;
    v6[12] = 0LL;
    *((_DWORD *)v6 + 20) = 0;
    void *v6 = 0x100000000LL;
    v6[6] = 0LL;
    _BYTE v6[7] = 0LL;
    v6[1] = comp;
    if (!*((void *)comp + 9)) {
      v6[4] = **((void **)comp + 2);
    }
    v6[5] = 0LL;
    v6[2] = callback;
    v6[3] = data;
    uint64_t v8 = *((unsigned int *)comp + 10);
    if ((int)v8 < 1)
    {
      uint64_t v10 = 0LL;
      v6[8] = 0LL;
      goto LABEL_12;
    }

    xmlParserInputBufferPtr v9 = xmlMalloc(8 * v8);
    v7[8] = v9;
    if (v9)
    {
      bzero(v9, 8LL * *((int *)comp + 10));
      uint64_t v10 = v7[8] + 4LL * *((int *)comp + 10);
LABEL_12:
      v7[9] = 0LL;
      v7[13] = 0LL;
      *((_DWORD *)v7 + 28) = -1;
      v7[16] = 0LL;
      v7[17] = v10;
      *((_DWORD *)v7 + 36) = 0;
      return (xmlRegExecCtxtPtr)v7;
    }

    xmlRegexpErrMemory(0LL, (uint64_t)"creating execution context");
    xmlFree(v7);
    return 0LL;
  }

  xmlRegexpErrMemory(0LL, (uint64_t)"creating execution context");
  return (xmlRegExecCtxtPtr)v7;
}

uint64_t xmlRegexpErrMemory(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(xmlChar **)a1;
    *(_DWORD *)(a1 + 16) = 2;
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  return __xmlRaiseError(0, 0, 0, 0, 0, 14, 2, 3, 0LL, 0, a2, v2, 0LL, 0, 0, (uint64_t)"Memory allocation failed : %s\n");
}

void xmlRegFreeExecCtxt(xmlRegExecCtxtPtr exec)
{
  if (exec)
  {
    uint64_t v2 = (void *)*((void *)exec + 7);
    if (v2)
    {
      if (*((void *)exec + 8))
      {
        int v3 = *((_DWORD *)exec + 12);
        if (v3 >= 1)
        {
          uint64_t v4 = 0LL;
          uint64_t v5 = 16LL;
          do
          {
            unsigned int v6 = *(void **)(*((void *)exec + 7) + v5);
            if (v6)
            {
              xmlFree(v6);
              int v3 = *((_DWORD *)exec + 12);
            }

            ++v4;
            v5 += 24LL;
          }

          while (v4 < v3);
          uint64_t v2 = (void *)*((void *)exec + 7);
        }
      }

      xmlFree(v2);
    }

    xmlGenericErrorFunc v7 = (void *)*((void *)exec + 8);
    if (v7) {
      xmlFree(v7);
    }
    uint64_t v8 = (void *)*((void *)exec + 13);
    if (v8)
    {
      int v9 = *((_DWORD *)exec + 19);
      if (v9 >= 1)
      {
        uint64_t v10 = 0LL;
        for (uint64_t i = 0LL; i < v9; ++i)
        {
          int v12 = *(void **)(*((void *)exec + 13) + v10);
          if (v12)
          {
            xmlFree(v12);
            int v9 = *((_DWORD *)exec + 19);
          }

          v10 += 16LL;
        }

        uint64_t v8 = (void *)*((void *)exec + 13);
      }

      xmlFree(v8);
    }

    xmlTextReaderPtr v13 = (void *)*((void *)exec + 16);
    if (v13) {
      xmlFree(v13);
    }
    xmlFree(exec);
  }

int xmlRegExecPushString(xmlRegExecCtxtPtr exec, const xmlChar *value, void *data)
{
  return xmlRegExecPushStringInternal((unsigned int *)exec, (xmlChar *)value, (uint64_t)data, 0LL);
}

uint64_t xmlRegExecPushStringInternal(unsigned int *a1, xmlChar *cur, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = *((void *)a1 + 1);
  if (!v6) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = *a1;
  if ((_DWORD)result) {
    return result;
  }
  uint64_t v8 = a3;
  if (*(void *)(v6 + 72)) {
    return xmlRegCompactPushString((uint64_t)a1, v6, cur, a3);
  }
  if (cur)
  {
    if ((int)a1[19] < 1)
    {
      uint64_t v11 = cur;
    }

    else
    {
      xmlFARegExecSaveInputString((uint64_t)a1, cur, a3);
      uint64_t result = *a1;
      if ((_DWORD)result) {
        return result;
      }
      uint64_t v10 = *((void *)a1 + 13) + 16LL * (int)a1[20];
      uint64_t v11 = *(xmlChar **)v10;
      uint64_t v8 = *(void *)(v10 + 8);
    }
  }

  else
  {
    if (**((_DWORD **)a1 + 4) == 2) {
      return 1LL;
    }
    uint64_t v11 = 0LL;
  }

  uint64_t v12 = 1LL;
  uint64_t v93 = cur;
  unsigned int v92 = a4;
  do
  {
    xmlTextReaderPtr v13 = (int *)*((void *)a1 + 4);
    if (!v11)
    {
      int v14 = *v13;
      if (cur || v14 == 2) {
        return v14 == 2;
      }
      if (!*((void *)a1 + 8))
      {
        uint64_t v11 = 0LL;
        if (!(_DWORD)v12) {
          goto LABEL_136;
        }
        goto LABEL_124;
      }
    }

    uint64_t v100 = v12;
    a1[11] = 0;
    int v15 = a1[10];
    uint64_t v16 = v13[6];
    if (v15 >= (int)v16)
    {
LABEL_87:
      if (v15)
      {
LABEL_88:
        uint64_t v12 = v100;
        if (!(_DWORD)v100) {
          goto LABEL_136;
        }
        goto LABEL_124;
      }

      goto LABEL_122;
    }

    while (1)
    {
      uint64_t v17 = *((void *)v13 + 4);
      __int128 v18 = (unsigned int *)(v17 + 24LL * v15);
      uint64_t v19 = (int *)(v18 + 2);
      uint64_t v20 = v18[2];
      if ((v18[2] & 0x80000000) != 0) {
        goto LABEL_86;
      }
      int v21 = v15;
      uint64_t v22 = *(void *)v18;
      uint64_t v23 = v17 + 24LL * v15;
      unsigned int v26 = *(_DWORD *)(v23 + 16);
      int v25 = (unsigned int *)(v23 + 16);
      uint64_t v24 = v26;
      if (v26 == 1193047)
      {
        if ((unint64_t)cur | (unint64_t)v11)
        {
          uint64_t v91 = *(void *)v18;
          int v96 = v21;
          xmlCharEncoding v98 = v25;
          uint64_t v94 = v8;
          uint64_t v33 = 0LL;
          uint64_t v34 = 0LL;
          while (1)
          {
            uint64_t v35 = (unsigned int *)(*((void *)v13 + 4) + v33);
            uint64_t v36 = v35[3];
            if ((v36 & 0x80000000) == 0 && v35 != v18)
            {
              __int128 v37 = (_DWORD *)(*(void *)(*((void *)a1 + 1) + 48LL) + 8 * v36);
              int v38 = *(_DWORD *)(*((void *)a1 + 8) + 4 * v36);
              if (v38 < v37[1])
              {
                if (*(void *)v35)
                {
                  int v39 = v11;
                  int v40 = xmlStrEqual(v11, *(const xmlChar **)(*(void *)v35 + 24LL));
                  uint64_t v11 = v39;
                  if (v40)
                  {
LABEL_47:
                    cur = v93;
                    uint64_t v8 = v94;
                    a4 = v92;
                    goto LABEL_86;
                  }
                }
              }

              if (v38 >= *v37 && v38 < v37[1])
              {
                if (*(void *)v35)
                {
                  uint64_t v41 = v11;
                  int v42 = xmlStrEqual(v11, *(const xmlChar **)(*(void *)v35 + 24LL));
                  uint64_t v11 = v41;
                  if (v42) {
                    break;
                  }
                }
              }
            }

            ++v34;
            xmlTextReaderPtr v13 = (int *)*((void *)a1 + 4);
            v33 += 24LL;
            if (v34 >= v13[6]) {
              goto LABEL_47;
            }
          }

          cur = v93;
          uint64_t v8 = v94;
          a4 = v92;
          int v25 = v98;
          uint64_t v19 = (int *)(v18 + 2);
          int v21 = v96;
          uint64_t v22 = v91;
        }

        else
        {
          uint64_t v11 = 0LL;
        }

int xmlRegExecPushString2(xmlRegExecCtxtPtr exec, const xmlChar *value, const xmlChar *value2, void *data)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (!exec || !*((void *)exec + 1)) {
    return -1;
  }
  int v5 = *(_DWORD *)exec;
  if (*(_DWORD *)exec) {
    return v5;
  }
  if (value2)
  {
    int v9 = strlen((const char *)value2);
    int v10 = strlen((const char *)value);
    int v11 = v10 + v9;
    if (v10 + v9 < 149)
    {
      uint64_t v12 = v16;
    }

    else
    {
      uint64_t v12 = xmlMallocAtomic((v11 + 2));
      if (!v12)
      {
        int v5 = -1;
        *(_DWORD *)exec = -1;
        return v5;
      }
    }

    memset(v16, 0, sizeof(v16));
    memcpy(v12, value, v10);
    v12[v10] = 124;
    memcpy(&v12[v10 + 1], value2, v9);
    v12[v11 + 1] = 0;
    uint64_t v14 = *((void *)exec + 1);
    if (*(void *)(v14 + 72)) {
      int v15 = xmlRegCompactPushString((uint64_t)exec, v14, v12, (uint64_t)data);
    }
    else {
      int v15 = xmlRegExecPushStringInternal((unsigned int *)exec, v12, (uint64_t)data, 1LL);
    }
    int v5 = v15;
    if (v12 != v16) {
      xmlFree(v12);
    }
    return v5;
  }

  return xmlRegExecPushStringInternal((unsigned int *)exec, (xmlChar *)value, (uint64_t)data, 0LL);
}

uint64_t xmlRegCompactPushString(uint64_t a1, uint64_t a2, xmlChar *cur, uint64_t a4)
{
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = *(void *)(a2 + 72);
  if (!v5) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = *(_BYTE ***)(a2 + 96);
  if (!v6) {
    return 0xFFFFFFFFLL;
  }
  int v9 = *(_DWORD *)(a1 + 80);
  uint64_t v10 = *(unsigned int *)(a2 + 88);
  if (!cur) {
    return *(_DWORD *)(v5 + 4LL * (v9 + v9 * (int)v10)) == 2;
  }
  int v23 = *(_DWORD *)(a1 + 80);
  if ((int)v10 >= 1)
  {
    int v12 = v10 * v9;
    int v22 = v10 + 1;
    int v13 = (v10 + 1) * v9 + 1;
    while (1)
    {
      int v14 = *(_DWORD *)(v5 + 4LL * v13);
      int v15 = v14 - 1;
      ++v12;
      ++v6;
      ++v13;
      if (!--v10) {
        goto LABEL_11;
      }
    }

    *(_DWORD *)(a1 + 80) = v15;
    __int128 v18 = *(void (**)(void, xmlChar *, void, uint64_t))(a1 + 16);
    if (v18)
    {
      uint64_t v19 = *(void *)(a2 + 80);
      int v20 = v22;
      if (v19)
      {
        v18(*(void *)(a1 + 24), cur, *(void *)(v19 + 8LL * v12), a4);
        uint64_t v5 = *(void *)(a2 + 72);
        int v20 = *(_DWORD *)(a2 + 88) + 1;
      }
    }

    else
    {
      int v20 = v22;
    }

    int v21 = *(_DWORD *)(v5 + 4LL * v20 * v15);
    if (v21 == 2) {
      return 1LL;
    }
    if (v21 != 4) {
      return 0LL;
    }
  }

int xmlRegExecNextValues(xmlRegExecCtxtPtr exec, int *nbval, int *nbneg, xmlChar **values, int *terminal)
{
  return xmlRegExecGetValues((uint64_t)exec, 0, nbval, nbneg, (uint64_t)values, terminal);
}

uint64_t xmlRegExecGetValues(uint64_t a1, int a2, int *a3, _DWORD *a4, uint64_t a5, _DWORD *a6)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (!a1) {
    return result;
  }
  if (!a3) {
    return result;
  }
  if (!a4) {
    return result;
  }
  if (!a5) {
    return result;
  }
  int v11 = *a3;
  if (*a3 < 1) {
    return result;
  }
  *a3 = 0;
  *a4 = 0;
  uint64_t v12 = *(void *)(a1 + 8);
  if (!v12 || (uint64_t v13 = *(void *)(v12 + 72)) == 0)
  {
    if (a6) {
      *a6 = **(_DWORD **)(a1 + 32) == 2;
    }
    if (a2)
    {
      uint64_t v15 = *(void *)(a1 + 120);
      if (!v15) {
        return result;
      }
    }

    else
    {
      uint64_t v15 = *(void *)(a1 + 32);
      if (!v15) {
        return result;
      }
    }

    uint64_t v16 = 0LL;
    int v17 = 0;
    uint64_t v18 = 136LL;
    if (!a2) {
      uint64_t v18 = 64LL;
    }
    uint64_t v52 = v18;
    uint64_t v19 = 1LL;
    while (1)
    {
      uint64_t v20 = *(void *)(v15 + 32);
      uint64_t v21 = *(unsigned int *)(v20 + v16 + 8);
      if ((v21 & 0x80000000) == 0)
      {
        uint64_t v22 = *(void *)(v20 + v16);
        if (v22)
        {
          uint64_t v23 = *(void *)(v22 + 24);
          if (v23)
          {
            int v24 = *(_DWORD *)(v20 + v16 + 16);
            if (v24 == 1193046)
            {
              xmlGenericErrorFunc v25 = *__xmlGenericError();
              unsigned int v26 = *__xmlGenericErrorContext();
              int v27 = 4379;
              goto LABEL_28;
            }

            if (v24 == 1193047)
            {
              xmlGenericErrorFunc v25 = *__xmlGenericError();
              unsigned int v26 = *__xmlGenericErrorContext();
              int v27 = 4376;
LABEL_28:
              v25( v26,  "Unimplemented block at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlregexp.c",  v27);
              goto LABEL_40;
            }

            uint64_t v28 = *(unsigned int *)(v20 + v16 + 12);
            if ((v28 & 0x80000000) != 0)
            {
              uint64_t v31 = *(void *)(a1 + 8);
              if (v31)
              {
                int v32 = *(_DWORD **)(*(void *)(v31 + 16) + 8 * v21);
                if (v32)
                {
                  if (*v32 != 4)
                  {
LABEL_37:
                    if (*(_DWORD *)(v22 + 40)) {
                      uint64_t v23 = *(void *)(v22 + 32);
                    }
                    *(void *)(a5 + 8LL * v17++) = v23;
                    ++*a3;
                  }
                }
              }
            }

            else
            {
              uint64_t v29 = *(void *)(a1 + 8);
              if (!v29) {
                goto LABEL_37;
              }
              uint64_t v30 = *(void *)(v29 + 48);
              if (!v30 || *(_DWORD *)(*(void *)(a1 + v52) + 4 * v28) < *(_DWORD *)(v30 + 8 * v28 + 4)) {
                goto LABEL_37;
              }
            }
          }
        }
      }

int xmlRegExecErrInfo( xmlRegExecCtxtPtr exec, const xmlChar **string, int *nbval, int *nbneg, xmlChar **values, int *terminal)
{
  if (!exec) {
    return -1;
  }
  if (string)
  {
    if (*(_DWORD *)exec) {
      uint64_t v6 = (const xmlChar *)*((void *)exec + 16);
    }
    else {
      uint64_t v6 = 0LL;
    }
    *string = v6;
  }

  return xmlRegExecGetValues((uint64_t)exec, 1, nbval, nbneg, (uint64_t)values, terminal);
}

void xmlRegexpPrint(FILE *output, xmlRegexpPtr regexp)
{
  if (output)
  {
    fwrite(" regexp: ", 9uLL, 1uLL, output);
    if (regexp)
    {
      fprintf(output, "'%s' ", *(const char **)regexp);
      fputc(10, output);
      fprintf(output, "%d atoms:\n", *((_DWORD *)regexp + 6));
      if (*((int *)regexp + 6) >= 1)
      {
        uint64_t v4 = 0LL;
        do
        {
          fprintf(output, " %02d ", v4);
          uint64_t v5 = *(void *)(*((void *)regexp + 4) + 8 * v4);
          fwrite(" atom: ", 7uLL, 1uLL, output);
          if (v5)
          {
            if (*(_DWORD *)(v5 + 40)) {
              fwrite("not ", 4uLL, 1uLL, output);
            }
            xmlRegPrintAtomType(output, *(_DWORD *)(v5 + 4));
            int v6 = *(_DWORD *)(v5 + 8);
            switch(v6)
            {
              case 1:
                xmlGenericErrorFunc v7 = "epsilon ";
                size_t v8 = 8LL;
                goto LABEL_19;
              case 2:
                xmlGenericErrorFunc v7 = "once ";
                size_t v8 = 5LL;
                goto LABEL_19;
              case 3:
                xmlGenericErrorFunc v7 = "? ";
                goto LABEL_15;
              case 4:
                xmlGenericErrorFunc v7 = "* ";
                goto LABEL_15;
              case 5:
                xmlGenericErrorFunc v7 = "+ ";
LABEL_15:
                size_t v8 = 2LL;
                goto LABEL_19;
              case 6:
                xmlGenericErrorFunc v7 = "onceonly ";
                size_t v8 = 9LL;
                goto LABEL_19;
              case 7:
                xmlGenericErrorFunc v7 = "all ";
                size_t v8 = 4LL;
                goto LABEL_19;
              case 8:
                xmlGenericErrorFunc v7 = "range ";
                size_t v8 = 6LL;
LABEL_19:
                fwrite(v7, v8, 1uLL, output);
                int v6 = *(_DWORD *)(v5 + 8);
                break;
              default:
                break;
            }

            if (v6 == 8) {
              fprintf(output, "%d-%d ", *(_DWORD *)(v5 + 12), *(_DWORD *)(v5 + 16));
            }
            int v9 = *(_DWORD *)(v5 + 4);
            if (v9 == 5)
            {
              fprintf(output, "'%s' ", *(const char **)(v5 + 24));
              int v9 = *(_DWORD *)(v5 + 4);
            }

            switch(v9)
            {
              case 4:
                fprintf(output, "start %d end %d\n");
                break;
              case 3:
                fprintf(output, "%d entries\n", *(_DWORD *)(v5 + 76));
                if (*(int *)(v5 + 76) >= 1)
                {
                  uint64_t v10 = 0LL;
                  do
                  {
                    int v11 = *(_DWORD **)(*(void *)(v5 + 80) + 8 * v10);
                    fwrite("  range: ", 9uLL, 1uLL, output);
                    if (*v11) {
                      fwrite("negative ", 9uLL, 1uLL, output);
                    }
                    xmlRegPrintAtomType(output, v11[1]);
                    fprintf(output, "%c - %c\n", v11[2], v11[3]);
                    ++v10;
                  }

                  while (v10 < *(int *)(v5 + 76));
                }

                break;
              case 2:
                fprintf(output, "char %c\n");
                break;
              default:
                fputc(10, output);
                break;
            }
          }

          else
          {
            fwrite("NULL\n", 5uLL, 1uLL, output);
          }

          ++v4;
        }

        while (v4 < *((int *)regexp + 6));
      }

      fprintf(output, "%d states:", *((_DWORD *)regexp + 2));
      fputc(10, output);
      if (*((int *)regexp + 2) >= 1)
      {
        for (uint64_t i = 0LL; i < *((int *)regexp + 2); ++i)
        {
          uint64_t v13 = *(int **)(*((void *)regexp + 2) + 8 * i);
          fwrite(" state: ", 8uLL, 1uLL, output);
          if (v13)
          {
            int v14 = *v13;
            if (*v13 == 1)
            {
              fwrite("START ", 6uLL, 1uLL, output);
              int v14 = *v13;
            }

            if (v14 == 2) {
              fwrite("FINAL ", 6uLL, 1uLL, output);
            }
            fprintf(output, "%d, %d transitions:\n", v13[4], v13[6]);
            if (v13[6] >= 1)
            {
              uint64_t v15 = 0LL;
              for (uint64_t j = 0LL; j < v13[6]; ++j)
              {
                uint64_t v17 = *((void *)v13 + 4);
                fwrite("  trans: ", 9uLL, 1uLL, output);
                if (v17)
                {
                  if ((*(_DWORD *)(v17 + v15 + 8) & 0x80000000) == 0)
                  {
                    int v18 = *(_DWORD *)(v17 + v15 + 20);
                    if (v18)
                    {
                      if (v18 == 2)
                      {
                        uint64_t v19 = "last not determinist, ";
                        size_t v20 = 22LL;
                      }

                      else
                      {
                        uint64_t v19 = "not determinist, ";
                        size_t v20 = 17LL;
                      }

                      fwrite(v19, v20, 1uLL, output);
                    }

                    if ((*(_DWORD *)(v17 + v15 + 12) & 0x80000000) == 0) {
                      fprintf(output, "counted %d, ", *(_DWORD *)(v17 + v15 + 12));
                    }
                    int v23 = *(_DWORD *)(v17 + v15 + 16);
                    if (v23 == 1193046)
                    {
                      fwrite("all transition, ", 0x10uLL, 1uLL, output);
                    }

                    else if ((v23 & 0x80000000) == 0)
                    {
                      fprintf(output, "count based %d, ", *(_DWORD *)(v17 + v15 + 16));
                    }

                    uint64_t v24 = *(void *)(v17 + v15);
                    if (v24)
                    {
                      if (*(_DWORD *)(v24 + 4) == 2) {
                        fprintf(output, "char %c ", *(unsigned int *)(v24 + 44));
                      }
                      fprintf(output, "atom %d, to %d\n");
                    }

                    else
                    {
                      fprintf(output, "epsilon to %d\n");
                    }

                    goto LABEL_67;
                  }

                  uint64_t v21 = "removed\n";
                  size_t v22 = 8LL;
                }

                else
                {
                  uint64_t v21 = "NULL\n";
                  size_t v22 = 5LL;
                }

                fwrite(v21, v22, 1uLL, output);
LABEL_67:
                v15 += 24LL;
              }
            }
          }

          else
          {
            fwrite("NULL\n", 5uLL, 1uLL, output);
          }
        }
      }

      fprintf(output, "%d counters:\n", *((_DWORD *)regexp + 10));
      if (*((int *)regexp + 10) >= 1)
      {
        uint64_t v25 = 0LL;
        uint64_t v26 = 0LL;
        do
        {
          fprintf( output,  " %d: min %d max %d\n",  v26++,  *(_DWORD *)(*((void *)regexp + 6) + v25),  *(_DWORD *)(*((void *)regexp + 6) + v25 + 4));
          v25 += 8LL;
        }

        while (v26 < *((int *)regexp + 10));
      }
    }

    else
    {
      fwrite("NULL\n", 5uLL, 1uLL, output);
    }
  }

xmlRegexpPtr xmlRegexpCompile(const xmlChar *regexp)
{
  int v1 = xmlRegNewParserCtxt(regexp);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = (uint64_t)v1;
  v1[4] = 0LL;
  int v3 = xmlRegNewState((uint64_t)v1);
  *(void *)(v2 + 40) = v3;
  *(void *)(v2 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v3;
  xmlRegStatePush(v2, (uint64_t)v3);
  xmlFAParseRegExp(v2, 1);
  if (**(_BYTE **)(v2 + 8))
  {
    *(_DWORD *)(v2 + 16) = 1450;
    xmlRegexpErrCompile(v2, (uint64_t)"xmlFAParseRegExp: extra characters");
  }

  if (*(_DWORD *)(v2 + 16) {
    || (uint64_t v4 = *(_DWORD **)(v2 + 40),
  }
        *(void *)(v2 + 32) = v4,
        **(_DWORD **)(v2 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 1,
        *uint64_t v4 = 2,
        xmlFAEliminateEpsilonTransitions(v2),
        *(_DWORD *)(v2 + 16)))
  {
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v5 = (xmlRegexp *)xmlRegEpxFromParse(v2);
  }

  xmlRegFreeParserCtxt((int *)v2);
  return v5;
}

xmlChar **xmlRegNewParserCtxt(const xmlChar *a1)
{
  uint64_t v2 = (xmlChar **)xmlMalloc(0x78uLL);
  int v3 = v2;
  if (v2)
  {
    v2[14] = 0LL;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
    *((_OWORD *)v2 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *(_OWORD *)uint64_t v2 = 0u;
    if (a1)
    {
      uint64_t v4 = xmlStrdup(a1);
      *int v3 = v4;
    }

    else
    {
      uint64_t v4 = *v2;
    }

    v3[1] = v4;
    void v3[2] = 0LL;
    v3[13] = (xmlChar *)0xFFFFFFFFLL;
  }

  return v3;
}

void *xmlRegNewState(uint64_t a1)
{
  uint64_t v2 = xmlMalloc(0x38uLL);
  int v3 = v2;
  if (v2)
  {
    v2[6] = 0LL;
    *((_OWORD *)v2 + 1) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *(_OWORD *)uint64_t v2 = 0u;
    *uint64_t v2 = 3LL;
  }

  else
  {
    xmlRegexpErrMemory(a1, (uint64_t)"allocating state");
  }

  return v3;
}

uint64_t xmlRegStatePush(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = *(int *)(a1 + 72);
    if ((_DWORD)v4)
    {
      if (*(_DWORD *)(a1 + 76) < (int)v4)
      {
        uint64_t v5 = *(void **)(a1 + 80);
LABEL_10:
        uint64_t v6 = 0LL;
        uint64_t v7 = *(int *)(a1 + 76);
        *(_DWORD *)(a2 + 16) = v7;
        *(_DWORD *)(a1 + 76) = v7 + 1;
        v5[v7] = a2;
        return v6;
      }

      *(_DWORD *)(a1 + 72) = 2 * v4;
      uint64_t v5 = xmlRealloc(*(void **)(a1 + 80), 16 * v4);
      if (v5)
      {
        *(void *)(a1 + 80) = v5;
        goto LABEL_10;
      }

      xmlRegexpErrMemory(a1, (uint64_t)"adding state");
      *(int *)(a1 + 72) /= 2;
    }

    else
    {
      *(_DWORD *)(a1 + 72) = 4;
      uint64_t v5 = xmlMalloc(0x20uLL);
      *(void *)(a1 + 80) = v5;
      if (v5) {
        goto LABEL_10;
      }
      xmlRegexpErrMemory(a1, (uint64_t)"adding state");
      *(_DWORD *)(a1 + 72) = 0;
    }

    return 0xFFFFFFFFLL;
  }

  return 0xFFFFFFFFLL;
}

uint64_t xmlFAParseRegExp(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = 0LL;
  uint64_t result = xmlFAParseBranch(a1, 0LL);
  if (a2) {
    **(_DWORD **)(a1 + 40) = 2;
  }
  uint64_t v6 = *(_BYTE **)(a1 + 8);
  uint64_t v7 = *(void **)(a1 + 40);
  if (*v6 != 124) {
    goto LABEL_8;
  }
  do
  {
    if (*(_DWORD *)(a1 + 16)) {
      break;
    }
    *(void *)(a1 + 8) = v6 + 1;
    *(void *)(a1 + 32) = 0LL;
    *(void *)(a1 + 40) = v4;
    uint64_t result = xmlFAParseBranch(a1, v7);
    uint64_t v6 = *(_BYTE **)(a1 + 8);
  }

  while (*v6 == 124);
  if (!a2)
  {
    *(void *)(a1 + 40) = v7;
LABEL_8:
    *(void *)(a1 + 32) = v7;
  }

  return result;
}

uint64_t xmlRegexpErrCompile(uint64_t a1, uint64_t a2)
{
  cur = *(xmlChar **)a1;
  int v3 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 16) = 1450;
  return __xmlRaiseError( 0,  0,  0,  0,  0,  14,  1450,  3,  0LL,  0,  a2,  cur,  0LL,  v3 - (int)cur,  0,  (uint64_t)"failed to compile: %s\n");
}

void xmlRegFreeParserCtxt(int *a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2) {
    xmlFree(v2);
  }
  int v3 = (void *)*((void *)a1 + 10);
  if (v3)
  {
    if (a1[19] >= 1)
    {
      uint64_t v4 = 0LL;
      do
        xmlRegFreeState(*(void **)(*((void *)a1 + 10) + 8 * v4++));
      while (v4 < a1[19]);
      int v3 = (void *)*((void *)a1 + 10);
    }

    xmlFree(v3);
  }

  uint64_t v5 = (void *)*((void *)a1 + 8);
  if (v5)
  {
    if (a1[15] >= 1)
    {
      uint64_t v6 = 0LL;
      do
        xmlRegFreeAtom(*(void *)(*((void *)a1 + 8) + 8 * v6++));
      while (v6 < a1[15]);
      uint64_t v5 = (void *)*((void *)a1 + 8);
    }

    xmlFree(v5);
  }

  uint64_t v7 = (void *)*((void *)a1 + 12);
  if (v7) {
    xmlFree(v7);
  }
  xmlFree(a1);
}

void xmlFAEliminateEpsilonTransitions(uint64_t a1)
{
  if (!*(void *)(a1 + 80)) {
    return;
  }
  LODWORD(v2) = *(_DWORD *)(a1 + 76);
  uint64_t v3 = 0LL;
  do
  {
    uint64_t v4 = *(int **)(*(void *)(a1 + 80) + 8 * v3);
    if (v4 && v4[6] == 1)
    {
      int v5 = *v4;
      if (*v4 != 2 && v5 != 5)
      {
        uint64_t v7 = *((void *)v4 + 4);
        if (!*(void *)v7)
        {
          uint64_t v8 = *(unsigned int *)(v7 + 8);
          if ((v8 & 0x80000000) == 0
            && v3 != v8
            && (*(_DWORD *)(v7 + 12) & 0x80000000) != 0
            && v5 != 1
            && (*(_DWORD *)(v7 + 16) & 0x80000000) != 0)
          {
            int v9 = v4[11];
            if (v9 >= 1)
            {
              for (uint64_t i = 0LL; i < v9; ++i)
              {
                uint64_t v11 = *(void *)(*(void *)(a1 + 80) + 8LL * *(int *)(*((void *)v4 + 6) + 4 * i));
                int v12 = *(_DWORD *)(v11 + 24);
                if (v12 >= 1)
                {
                  uint64_t v13 = 0LL;
                  for (uint64_t j = 0LL; j < v12; ++j)
                  {
                    uint64_t v15 = *(void *)(v11 + 32) + v13;
                    if (v3 == *(_DWORD *)(v15 + 8))
                    {
                      *(_DWORD *)(v15 + 8) = -1;
                      xmlRegStateAddTrans( a1,  v11,  *(void *)v15,  *(void *)(*(void *)(a1 + 80) + 8 * v8),  *(_DWORD *)(v15 + 12),  *(_DWORD *)(v15 + 16));
                      int v12 = *(_DWORD *)(v11 + 24);
                    }

                    v13 += 24LL;
                  }

                  int v9 = v4[11];
                }
              }

              if (*v4 == 2) {
                **(_DWORD **)(*(void *)(a1 + 80) + 8 * v8) = 2;
              }
            }

            v4[6] = 0;
            *uint64_t v4 = 5;
            LODWORD(v2) = *(_DWORD *)(a1 + 76);
          }
        }
      }
    }

    ++v3;
  }

  while (v3 < (int)v2);
  uint64_t v16 = 0LL;
  do
  {
    uint64_t v17 = *(void **)(*(void *)(a1 + 80) + 8 * v16);
    if (v17 && *(_DWORD *)v17 == 5)
    {
      int v18 = (void *)v17[4];
      if (v18) {
        xmlFree(v18);
      }
      uint64_t v19 = (void *)v17[6];
      if (v19) {
        xmlFree(v19);
      }
      xmlFree(v17);
      *(void *)(*(void *)(a1 + 80) + 8 * v16) = 0LL;
      LODWORD(v2) = *(_DWORD *)(a1 + 76);
    }

    ++v16;
  }

  while (v16 < (int)v2);
  int v20 = 0;
  uint64_t v21 = v2;
  do
  {
    uint64_t v22 = *(void *)(*(void *)(a1 + 80) + 8LL * (v21 - 1));
    if (v22)
    {
      int v23 = *(_DWORD *)(v22 + 24);
      if (v23)
      {
        if (v23 >= 1)
        {
          uint64_t v24 = 0LL;
          for (uint64_t k = 0LL; k < v23; ++k)
          {
            uint64_t v26 = *(void *)(v22 + 32);
            if (!*(void *)(v26 + v24))
            {
              uint64_t v27 = v26 + v24;
              unsigned int v28 = *(_DWORD *)(v26 + v24 + 8);
              if ((v28 & 0x80000000) == 0)
              {
                if (v28 == (_DWORD)v21 - 1)
                {
                  *(_DWORD *)(v27 + 8) = -1;
                }

                else
                {
                  uint64_t v29 = v26 + v24;
                  if ((*(_DWORD *)(v29 + 16) & 0x80000000) != 0)
                  {
                    *(_DWORD *)(v27 + 8) = -2;
                    int v20 = 1;
                    *(_DWORD *)(v22 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 1;
                    xmlFAReduceEpsilonTransitions(a1, v21 - 1, v28, *(_DWORD *)(v29 + 12));
                    *(_DWORD *)(v22 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0;
                    int v23 = *(_DWORD *)(v22 + 24);
                  }
                }
              }
            }

            v24 += 24LL;
          }
        }
      }

      else if (*(_DWORD *)v22 != 2)
      {
        *(_DWORD *)uint64_t v22 = 4;
      }
    }
  }

  while (v21-- > 1);
  uint64_t v2 = *(unsigned int *)(a1 + 76);
  if (v20)
  {
    uint64_t v31 = *(uint64_t **)(a1 + 80);
    for (uint64_t m = 0LL; m != v2; ++m)
    {
      uint64_t v33 = v31[m];
      if (v33)
      {
        uint64_t v34 = *(unsigned int *)(v33 + 24);
        if ((int)v34 >= 1)
        {
          uint64_t v35 = (_DWORD *)(*(void *)(v33 + 32) + 8LL);
          do
          {
            if (!*((void *)v35 - 1) && (v35[2] & 0x80000000) != 0 && (*v35 & 0x80000000) == 0) {
              _DWORD *v35 = -1;
            }
            v35 += 6;
            --v34;
          }

          while (v34);
        }
      }
    }
  }

  else
  {
LABEL_71:
    uint64_t v31 = *(uint64_t **)(a1 + 80);
  }

  if ((int)v2 >= 1)
  {
    uint64_t v36 = 0LL;
    do
    {
      uint64_t v37 = v31[v36];
      if (v37) {
        *(_DWORD *)(v37 + 12) = 0;
      }
      ++v36;
    }

    while (v2 != v36);
    int v38 = 1;
    goto LABEL_79;
  }

void *xmlRegEpxFromParse(uint64_t a1)
{
  uint64_t v2 = xmlMalloc(0x68uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    v2[12] = 0LL;
    *((_OWORD *)v2 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0u;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *((_OWORD *)v2 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
    *(_OWORD *)uint64_t v2 = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    *uint64_t v2 = *(void *)a1;
    *((_DWORD *)v2 + 2) = *(_DWORD *)(a1 + 76);
    v2[2] = *(void *)(a1 + 80);
    *((_DWORD *)v2 + 6) = *(_DWORD *)(a1 + 60);
    v2[4] = *(void *)(a1 + 64);
    *((_DWORD *)v2 + 10) = *(_DWORD *)(a1 + 92);
    v2[6] = *(void *)(a1 + 96);
    int v4 = *(_DWORD *)(a1 + 104);
    int v5 = *(_DWORD *)(a1 + 112);
    *((_DWORD *)v2 + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v4;
    *((_DWORD *)v2 + 15) = v5;
    if (v4 == -1)
    {
      xmlRegexpIsDeterminist((xmlRegexpPtr)v2);
      if (!*((_DWORD *)v3 + 14))
      {
LABEL_9:
        *(void *)a1 = 0LL;
        *(_DWORD *)(a1 + 76) = 0;
        *(void *)(a1 + 80) = 0LL;
        *(_DWORD *)(a1 + 60) = 0;
        *(void *)(a1 + 6xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
        *(_DWORD *)(a1 + 92) = 0;
        *(void *)(a1 + 96) = 0LL;
        return v3;
      }
    }

    else if (!v4)
    {
      goto LABEL_9;
    }

    if (*((_DWORD *)v3 + 10)) {
      goto LABEL_9;
    }
    if (*(_DWORD *)(a1 + 108)) {
      goto LABEL_9;
    }
    uint64_t v7 = (uint64_t *)v3[4];
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *v7;
    if (!v8 || *(_DWORD *)(v8 + 4) != 5) {
      goto LABEL_9;
    }
    int v9 = xmlMalloc(4LL * *((int *)v3 + 2));
    if (!v9)
    {
      xmlRegexpErrMemory(a1, (uint64_t)"compiling regexp");
      ((void (*)(void *))xmlFree)(v3);
      return 0LL;
    }

    uint64_t v10 = v9;
    if (*((int *)v3 + 2) < 1)
    {
      int v12 = 0;
    }

    else
    {
      uint64_t v11 = 0LL;
      int v12 = 0;
      uint64_t v13 = v3[2];
      do
      {
        uint64_t v14 = *(void *)(v13 + 8 * v11);
        BOOL v15 = v14 == 0;
        if (v14) {
          int v16 = v12;
        }
        else {
          int v16 = -1;
        }
        if (!v15) {
          ++v12;
        }
        v9[v11++] = v16;
      }

      while (v11 < *((int *)v3 + 2));
    }

    uint64_t v17 = (char *)xmlMalloc(8LL * *((int *)v3 + 6));
    if (v17)
    {
      int v18 = v17;
      uint64_t v19 = xmlMalloc(4LL * *((int *)v3 + 6));
      if (v19)
      {
        BOOL v69 = v19;
        if (*((int *)v3 + 6) < 1)
        {
          int v21 = 0;
LABEL_46:
          int v62 = v21 + 1;
          unsigned int v28 = xmlRegCalloc2(v12 + 1, v21 + 1, 4uLL);
          if (v28)
          {
            LODWORD(v29) = *((_DWORD *)v3 + 2);
            BOOL v68 = v28;
            if ((int)v29 < 1)
            {
              uint64_t v31 = 0LL;
            }

            else
            {
              uint64_t v30 = 0LL;
              uint64_t v31 = 0LL;
              unint64_t v66 = v21;
              int v32 = v69;
              int v64 = v21;
              int v65 = v18;
              do
              {
                int v33 = v10[v30];
                uint64_t v67 = v30;
                if (v33 != -1)
                {
                  uint64_t v34 = *(void *)(v3[2] + 8 * v30);
                  v28[v33 * v62] = *(_DWORD *)v34;
                  if (*(int *)(v34 + 24) >= 1)
                  {
                    uint64_t v35 = 0LL;
                    uint64_t v36 = 0LL;
                    uint64_t v37 = (v33 * v62 + 1);
                    int v63 = v33 * v64;
                    do
                    {
                      int v38 = (_DWORD *)(*(void *)(v34 + 32) + v35);
                      int v39 = v38[2];
                      if (v39 != -1)
                      {
                        uint64_t v40 = *(int **)v38;
                        if (*(void *)v38)
                        {
                          int v41 = v32[*v40];
                          if (*((void *)v40 + 11)) {
                            BOOL v42 = v31 == 0LL;
                          }
                          else {
                            BOOL v42 = 0;
                          }
                          if (v42)
                          {
                            uint64_t v43 = v37;
                            uint64_t v44 = xmlRegCalloc2(v12, v66, 8uLL);
                            if (!v44)
                            {
                              xmlRegexpErrMemory(a1, (uint64_t)"compiling regexp");
                              uint64_t v31 = 0LL;
                              unsigned int v28 = v68;
                              int v32 = v69;
                              int v18 = v65;
                              break;
                            }

                            uint64_t v31 = v44;
                            int v39 = v38[2];
                            unsigned int v28 = v68;
                            int v32 = v69;
                            uint64_t v37 = v43;
                            int v18 = v65;
                          }

                          int v45 = v28[(int)v37 + v41];
                          int v46 = v10[v39] + 1;
                          if (v45)
                          {
                            if (v45 != v46)
                            {
                              *((_DWORD *)v3 + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0;
                              if (v31)
                              {
                                xmlFree(v31);
                                unsigned int v28 = v68;
                              }

                              xmlFree(v28);
                              xmlFree(v10);
                              xmlFree(v69);
                              if (v64 >= 1)
                              {
                                uint64_t v52 = 0LL;
                                do
                                {
                                  xmlFree(*(void **)&v18[v52]);
                                  v52 += 8LL;
                                }

                                while (8LL * v64 != v52);
                              }

                              uint64_t v53 = v18;
                              goto LABEL_100;
                            }
                          }

                          else
                          {
                            v28[(int)v37 + v41] = v46;
                            if (v31) {
                              *((void *)v31 + v41 + v6xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = *(void *)(*(void *)v38 + 88LL);
                            }
                          }
                        }
                      }

                      ++v36;
                      v35 += 24LL;
                    }

                    while (v36 < *(int *)(v34 + 24));
                  }
                }

                uint64_t v30 = v67 + 1;
                uint64_t v29 = *((int *)v3 + 2);
                int v21 = v64;
              }

              while (v67 + 1 < v29);
            }

            *((_DWORD *)v3 + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 1;
            int v54 = (void *)v3[2];
            if (v54)
            {
              uint64_t v55 = v31;
              if ((int)v29 >= 1)
              {
                uint64_t v56 = 0LL;
                do
                  xmlRegFreeState(*(void **)(v3[2] + 8 * v56++));
                while (v56 < *((int *)v3 + 2));
                int v54 = (void *)v3[2];
              }

              xmlFree(v54);
              uint64_t v31 = v55;
            }

            void v3[2] = 0LL;
            *((_DWORD *)v3 + 2) = 0;
            int v57 = (void *)v3[4];
            if (v57)
            {
              int v58 = v31;
              if (*((int *)v3 + 6) >= 1)
              {
                uint64_t v59 = 0LL;
                do
                  xmlRegFreeAtom(*(void *)(v3[4] + 8 * v59++));
                while (v59 < *((int *)v3 + 6));
                int v57 = (void *)v3[4];
              }

              xmlFree(v57);
              uint64_t v31 = v58;
            }

            v3[4] = 0LL;
            *((_DWORD *)v3 + 6) = 0;
            v3[9] = v68;
            v3[10] = v31;
            v3[12] = v18;
            *((_DWORD *)v3 + 22) = v21;
            *((_DWORD *)v3 + 16) = v12;
            xmlFree(v10);
            uint64_t v53 = v69;
LABEL_100:
            xmlFree(v53);
            goto LABEL_9;
          }

          xmlFree(v10);
          xmlFree(v69);
          if (v21 >= 1)
          {
            uint64_t v49 = v21;
            uint64_t v50 = (void **)v18;
            do
            {
              int v51 = *v50++;
              xmlFree(v51);
              --v49;
            }

            while (v49);
          }
        }

        else
        {
          uint64_t v20 = 0LL;
          int v21 = 0;
          while (1)
          {
            uint64_t v22 = v21;
            uint64_t v23 = *(void *)(v3[4] + 8 * v20);
            if (*(_DWORD *)(v23 + 4) != 5 || *(_DWORD *)(v23 + 8) != 2) {
              break;
            }
            uint64_t v24 = *(const xmlChar **)(v23 + 24);
            int v25 = v21;
            if (v21 < 1)
            {
LABEL_36:
              v69[v20] = v25;
              uint64_t v27 = xmlStrdup(v24);
              *(void *)&v18[8 * v25] = v27;
              if (!v27)
              {
                if (v25 >= 1)
                {
                  uint64_t v60 = (void **)v18;
                  do
                  {
                    uint64_t v61 = *v60++;
                    xmlFree(v61);
                    --v22;
                  }

                  while (v22);
                }

                xmlFree(v69);
                goto LABEL_43;
              }

              int v21 = v25 + 1;
            }

            else
            {
              uint64_t v26 = 0LL;
              while (!xmlStrEqual(*(const xmlChar **)&v18[8 * v26], v24))
              {
                if (v22 == ++v26) {
                  goto LABEL_36;
                }
              }

              v69[v20] = v26;
              int v21 = v22;
            }
          }

          xmlFree(v10);
          xmlFree(v69);
          if (v21 >= 1)
          {
            uint64_t v47 = (void **)v18;
            do
            {
              uint64_t v48 = *v47++;
              xmlFree(v48);
              --v22;
            }

            while (v22);
          }
        }

        ((void (*)(char *))xmlFree)(v18);
        goto LABEL_78;
      }

      xmlRegexpErrMemory(a1, (uint64_t)"compiling regexp");
LABEL_43:
      xmlFree(v18);
    }

    else
    {
      xmlRegexpErrMemory(a1, (uint64_t)"compiling regexp");
    }

    ((void (*)(_DWORD *))xmlFree)(v10);
LABEL_78:
    ((void (*)(void *))xmlFree)(v3);
    return 0LL;
  }

  xmlRegexpErrMemory(a1, (uint64_t)"compiling regexp");
  return v3;
}

int xmlRegexpExec(xmlRegexpPtr comp, const xmlChar *value)
{
  int result = -1;
  if (!comp || !value) {
    return result;
  }
  int v70 = 0;
  __int128 v68 = 0u;
  __int128 v67 = 0u;
  __int128 v64 = 0u;
  __int128 v65 = 0u;
  __int128 v62 = 0u;
  __int128 v61 = 0u;
  __int128 v66 = (unint64_t)value;
  LODWORD(v65) = 0;
  int v69 = 0;
  uint64_t v59 = 0x100000000LL;
  __int128 v63 = 0uLL;
  xmlRegexpPtr v60 = comp;
  __int128 v62 = **((unint64_t **)comp + 2);
  DWORD2(v6xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0;
  uint64_t v4 = *((unsigned int *)comp + 10);
  if ((int)v4 < 1)
  {
    *(void *)&__int128 v64 = 0LL;
  }

  else
  {
    int v5 = xmlMalloc(4 * v4);
    *(void *)&__int128 v64 = v5;
    if (!v5)
    {
      xmlRegexpErrMemory(0LL, (uint64_t)"running regexp");
      return -1;
    }

    bzero(v5, 4LL * *((int *)comp + 10));
  }

  leuint64_t n = 0;
  do
  {
    uint64_t v6 = v62;
    leuint64_t n = 1;
    int v7 = DWORD2(v62);
    int v8 = *(_DWORD *)(v62 + 24);
    else {
      BOOL v9 = (void)v64 == 0LL;
    }
    if (v9)
    {
      if (SDWORD2(v62) >= v8) {
        goto LABEL_78;
      }
      uint64_t v46 = *(void *)(v62 + 32);
      if ((*(_DWORD *)(v46 + 24LL * SDWORD2(v62) + 8) & 0x80000000) == 0)
      {
        uint64_t v47 = *(void *)(v46 + 24LL * SDWORD2(v62));
      }
    }

    HIDWORD(v62) = 0;
    if (SDWORD2(v62) >= v8)
    {
LABEL_77:
      if (!v7)
      {
LABEL_83:
        if (*(_DWORD *)(v62 + 24)) {
          continue;
        }
      }

int xmlRegexpIsDeterminist(xmlRegexpPtr comp)
{
  if (!comp) {
    return -1;
  }
  int v2 = *((_DWORD *)comp + 14);
  if (v2 != -1) {
    return v2;
  }
  xmlAutomataPtr v3 = xmlNewAutomata();
  if (!v3) {
    return -1;
  }
  xmlAutomataPtr v4 = v3;
  int v5 = (void *)*((void *)v3 + 10);
  if (v5)
  {
    if (*((int *)v4 + 19) >= 1)
    {
      uint64_t v6 = 0LL;
      do
        xmlRegFreeState(*(void **)(*((void *)v4 + 10) + 8 * v6++));
      while (v6 < *((int *)v4 + 19));
      int v5 = (void *)*((void *)v4 + 10);
    }

    xmlFree(v5);
  }

  *((_DWORD *)v4 + 15) = *((_DWORD *)comp + 6);
  *((void *)v4 + 8) = *((void *)comp + 4);
  *((_DWORD *)v4 + 19) = *((_DWORD *)comp + 2);
  *((void *)v4 + 10) = *((void *)comp + 2);
  *((_DWORD *)v4 + 26) = -1;
  *((_DWORD *)v4 + 28) = *((_DWORD *)comp + 15);
  int v2 = xmlFAComputesDeterminism(v4);
  *((void *)v4 + 8) = 0LL;
  *((void *)v4 + 10) = 0LL;
  xmlRegFreeParserCtxt((int *)v4);
  *((_DWORD *)comp + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v2;
  return v2;
}

xmlAutomataPtr xmlNewAutomata(void)
{
  int v0 = xmlRegNewParserCtxt(0LL);
  uint64_t v1 = (uint64_t)v0;
  if (v0)
  {
    v0[4] = 0LL;
    int v2 = xmlRegNewState((uint64_t)v0);
    *(void *)(v1 + 40) = v2;
    *(void *)(v1 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v2;
    if (v2)
    {
      *(_DWORD *)int v2 = 1;
      if ((xmlRegStatePush(v1, (uint64_t)v2) & 0x80000000) == 0)
      {
        *(_DWORD *)(v1 + 112) = 0;
        return (xmlAutomataPtr)v1;
      }

      xmlRegFreeState(*(void **)(v1 + 24));
    }

    xmlRegFreeParserCtxt((int *)v1);
    return 0LL;
  }

  return (xmlAutomataPtr)v1;
}

void xmlRegFreeState(void *a1)
{
  if (a1)
  {
    int v2 = (void *)a1[4];
    if (v2) {
      xmlFree(v2);
    }
    xmlAutomataPtr v3 = (void *)a1[6];
    if (v3) {
      xmlFree(v3);
    }
    xmlFree(a1);
  }

uint64_t xmlFAComputesDeterminism(_DWORD *a1)
{
  uint64_t v1 = a1[26];
  if ((_DWORD)v1 == -1)
  {
    uint64_t v2 = (uint64_t)a1;
    int v3 = a1[19];
    if (v3 < 1) {
      goto LABEL_239;
    }
    uint64_t v4 = 0LL;
    int v5 = a1[28];
    char v113 = v5;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(v2 + 80) + 8 * v4);
      if (v6)
      {
        int v7 = *(_DWORD *)(v6 + 24);
        if (v7 >= 2)
        {
          uint64_t v111 = v4;
          uint64_t v8 = 0LL;
          uint64_t v9 = 0LL;
          while (1)
          {
            uint64_t v10 = *(void *)(v6 + 32);
            uint64_t v11 = (uint64_t *)(v10 + 24 * v9);
            if (*v11)
            {
              uint64_t v12 = v10 + 24 * v9;
              int v14 = *(_DWORD *)(v12 + 8);
              int v13 = (_DWORD *)(v12 + 8);
              if (v14 != -1 && v9 != 0) {
                break;
              }
            }

LABEL_183:
                    if (*(_DWORD *)(v48 + 40) == *(_DWORD *)(v47 + 40)) {
                      BOOL v91 = v54;
                    }
                    else {
                      BOOL v91 = v54 == 0;
                    }
                    uint64_t v2 = (uint64_t)a1;
                    int v37 = v112;
                    if (!v91) {
                      goto LABEL_189;
                    }
                    break;
                  case 3u:
                    int v112 = v37;
                    if (v50 != 3)
                    {
LABEL_178:
                      int v54 = 1;
                      goto LABEL_183;
                    }

                    int v62 = *(_DWORD *)(v48 + 76);
                    if (v62 < 1)
                    {
                      int v54 = 0;
                      goto LABEL_183;
                    }

                    uint64_t v63 = 0LL;
                    int v64 = *(_DWORD *)(v47 + 76);
                    while (v64 < 1)
                    {
LABEL_176:
                      int v54 = 0;
                      if (++v63 >= v62) {
                        goto LABEL_183;
                      }
                    }

                    uint64_t v65 = 0LL;
                    while (2)
                    {
                      unsigned int v66 = *(_DWORD *)(*(void *)(*(void *)(v48 + 80) + 8 * v63) + 4LL);
                      if (v66 == 3
                        || ((unsigned int v67 = *(_DWORD *)(*(void *)(*(void *)(v47 + 80) + 8 * v65) + 4LL),
                             (v66 & 0xFFFFFFFE) != 4)
                          ? (BOOL v68 = v67 - 3 >= 3)
                          : (BOOL v68 = 0),
                            !v68))
                      {
LABEL_109:
                        if (++v65 >= v64)
                        {
                          int v62 = *(_DWORD *)(v48 + 76);
                          goto LABEL_176;
                        }

                        continue;
                      }

                      break;
                    }

                    if (v66 <= v67) {
                      int v69 = *(_DWORD **)(*(void *)(v48 + 80) + 8 * v63);
                    }
                    else {
                      int v69 = *(_DWORD **)(*(void *)(v47 + 80) + 8 * v65);
                    }
                    if (v66 <= v67) {
                      int v70 = *(char ***)(*(void *)(v47 + 80) + 8 * v65);
                    }
                    else {
                      int v70 = *(char ***)(*(void *)(v48 + 80) + 8 * v63);
                    }
                    int v71 = v69[1];
                    if (v71 == 6 || (unsigned int v72 = *((_DWORD *)v70 + 1), v72 == 6))
                    {
LABEL_104:
                      int v73 = 1;
                      goto LABEL_105;
                    }

                    if (v71 == 1 || v72 == 1) {
                      goto LABEL_109;
                    }
                    if (v71 == v72)
                    {
                      if (v71 != 2) {
                        goto LABEL_104;
                      }
                      if (v69[3] >= *((_DWORD *)v70 + 2)) {
                        int v73 = *((_DWORD *)v70 + 3) >= v69[2];
                      }
                      else {
LABEL_120:
                      }
                        int v73 = 0;
LABEL_105:
                      int v74 = *(_DWORD *)v70;
                      if (*v69)
                      {
                        if (!v74) {
                          goto LABEL_107;
                        }
                      }

                      else if (v74)
                      {
LABEL_107:
                        v73 ^= 1u;
                      }

                      if (v73) {
                        goto LABEL_178;
                      }
                      goto LABEL_109;
                    }

                    if (v71 != 2)
                    {
                      if (v71 == 136 || v72 == 136) {
                        goto LABEL_178;
                      }
                      if (v71 < 0x64 || v72 <= 0x63)
                      {
                        int v54 = 1;
                        switch(v71)
                        {
                          case 7:
                            if (v72 == 8) {
                              goto LABEL_120;
                            }
                            break;
                          case 9:
                            if (v72 == 10) {
                              goto LABEL_120;
                            }
                            break;
                          case 11:
                            if (v72 == 12) {
                              goto LABEL_120;
                            }
                            break;
                          case 13:
                            if (v72 == 14) {
                              goto LABEL_120;
                            }
                            break;
                          case 15:
                            if (v72 == 16) {
                              goto LABEL_120;
                            }
                            break;
                          default:
                            goto LABEL_183;
                        }

                        goto LABEL_183;
                      }

                      if (v71 <= 113)
                      {
                        switch(v71)
                        {
                          case 'd':
                            BOOL v85 = v72 - 101 >= 5;
                            goto LABEL_171;
                          case 'j':
                            unsigned int v76 = v72 - 107;
                            break;
                          case 'n':
                            unsigned int v76 = v72 - 111;
                            break;
                          default:
                            goto LABEL_174;
                        }
                      }

                      else
                      {
                        if (v71 <= 125)
                        {
                          if (v71 != 114)
                          {
                            if (v71 == 122)
                            {
                              unsigned int v76 = v72 - 123;
                              goto LABEL_169;
                            }

LABEL_174:
                            if (v72 > 0x87) {
                              goto LABEL_178;
                            }
                            goto LABEL_120;
                          }

                          BOOL v85 = v72 - 115 >= 7;
LABEL_171:
                          int v73 = !v85;
                          goto LABEL_105;
                        }

                        if (v71 == 126)
                        {
                          BOOL v85 = v72 - 127 >= 4;
                          goto LABEL_171;
                        }

                        if (v71 != 131) {
                          goto LABEL_174;
                        }
                        unsigned int v76 = v72 - 132;
                      }

LABEL_169:
                      BOOL v85 = v76 >= 3;
                      goto LABEL_171;
                    }

                    int v77 = *(_DWORD *)v70;
                    if (*v69)
                    {
                      if (v77) {
                        goto LABEL_133;
                      }
LABEL_139:
                      char v99 = 1;
                      char v101 = 0;
                    }

                    else
                    {
                      if (v77) {
                        goto LABEL_139;
                      }
LABEL_133:
                      char v99 = 0;
                      char v101 = 1;
                    }

                    int v78 = v69[2];
                    unsigned int v109 = v1;
                    uint64_t v103 = v47;
                    uint64_t v105 = v63;
                    uint64_t v107 = v48;
                    uint64_t v102 = v69;
                    if (v78 <= v69[3])
                    {
                      do
                      {
                        uint64_t v79 = v70;
                        uint64_t v80 = v41;
                        int v81 = xmlRegCheckCharacterRange( *((_DWORD *)v70 + 1),  v78,  *((_DWORD *)v70 + 2),  *((_DWORD *)v70 + 3),  v70[2]);
                        int v70 = v79;
                        uint64_t v47 = v103;
                        uint64_t v63 = v105;
                        uint64_t v48 = v107;
                        uint64_t v41 = v80;
                        uint64_t v1 = v109;
                        if (v81 < 0) {
                          break;
                        }
                        if (v81) {
                          char v82 = 0;
                        }
                        else {
                          char v82 = v99;
                        }
                        char v83 = v101;
                        if (v81 != 1) {
                          char v83 = 0;
                        }
                        int v54 = 1;
                        if ((v82 & 1) != 0 || (v83 & 1) != 0) {
                          goto LABEL_183;
                        }
                      }

                      while (v78++ < v102[3]);
                      int v64 = *(_DWORD *)(v103 + 76);
                    }

                    goto LABEL_109;
                  case 5u:
                    xmlParserCtxtPtr v104 = v41;
                    uint64_t v106 = v48;
                    int v112 = v37;
                    unsigned int v108 = v1;
                    BOOL v52 = *(xmlChar **)(v47 + 24);
                    uint64_t v100 = *(xmlChar **)(v48 + 24);
                    BOOL v53 = xmlStrchr(v100, 0x7Cu) == 0LL;
                    if (v53 != (xmlStrchr(v52, 0x7Cu) != 0LL))
                    {
                      int v54 = xmlRegStrEqualWildcard(v100, v52);
                      uint64_t v1 = v108;
                      uint64_t v41 = v104;
                      uint64_t v48 = v106;
                      goto LABEL_183;
                    }

                    uint64_t v1 = v108;
                    int v37 = v112;
                    uint64_t v41 = v104;
                    goto LABEL_189;
                }
              }
            }

        int v69 = xmlSchemaAddAttributeUseProhib(a1);
        if (!v69) {
          goto LABEL_157;
        }
        uint64_t v44 = (uint64_t)v69;
        int v70 = v86;
        v69[1] = v13;
        v69[2] = v70;
        v69[3] = str2;
        if (v17) {
          xmlSchemaAddItemSize((void **)(*(void *)(a1 + 48) + 40LL), 10, (uint64_t)v69);
        }
        goto LABEL_172;
      }

      uint64_t v63 = (_DWORD *)a1;
      int v64 = v13;
      uint64_t v65 = "Skipping attribute use prohibition, since it is pointless inside an <attributeGroup>";
    }

    xmlSchemaCustomWarning(v63, 3086, v64, (const xmlChar *)v65, 0LL, 0LL, 0LL);
    goto LABEL_157;
  }

  int v59 = xmlSchemaAddAttributeUse(a1, v13);
  if (!v59) {
    goto LABEL_157;
  }
  uint64_t v44 = (uint64_t)v59;
  *((_DWORD *)v59 + 12) = v80;
  unsigned int v60 = (void *)xmlSchemaAddAttribute(a1, (uint64_t)v88, (uint64_t)str1, v13, 0);
  if (!v60) {
    goto LABEL_157;
  }
  if (v86)
  {
    unsigned int v61 = str2;
    v60[6] = v86;
    v60[7] = v61;
  }

  *(void *)(v44 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v60;
  if (v77)
  {
    v60[11] = v77;
    if (v79 == 2)
    {
      uint64_t v48 = v60 + 15;
      unsigned int v49 = 512;
LABEL_105:
      *v48 |= v49;
    }
  }

LABEL_187:
            *uint64_t v41 = 1;
            int v58 = (_DWORD *)(v42 + 24 * v40 + 20);
LABEL_188:
            uint64_t v1 = 0LL;
            _DWORD *v58 = 1;
            xmlDtdPtr v114 = v35;
          }
        }

        else
        {
          uint64_t v55 = *v37;
          if ((_DWORD)v55 != -1)
          {
            uint64_t v56 = v41;
            int v57 = xmlFARecurseDeterminism(v2, *(void *)(*(void *)(v2 + 80) + 8 * v55));
            xmlFAFinishRecurseDeterminism(v2, *(void *)(*(void *)(v2 + 80) + 8LL * *v37));
            uint64_t v41 = v56;
            int v58 = v56;
            if (!v57) {
              goto LABEL_188;
            }
            uint64_t v1 = 1LL;
          }
        }
      }

void xmlFreeAutomata(xmlAutomataPtr am)
{
  if (am) {
    xmlRegFreeParserCtxt((int *)am);
  }
}

void xmlRegFreeRegexp(xmlRegexpPtr regexp)
{
  if (regexp)
  {
    uint64_t v2 = *(void **)regexp;
    if (v2) {
      xmlFree(v2);
    }
    int v3 = (void *)*((void *)regexp + 2);
    if (v3)
    {
      if (*((int *)regexp + 2) >= 1)
      {
        uint64_t v4 = 0LL;
        do
          xmlRegFreeState(*(void **)(*((void *)regexp + 2) + 8 * v4++));
        while (v4 < *((int *)regexp + 2));
        int v3 = (void *)*((void *)regexp + 2);
      }

      xmlFree(v3);
    }

    int v5 = (void *)*((void *)regexp + 4);
    if (v5)
    {
      if (*((int *)regexp + 6) >= 1)
      {
        uint64_t v6 = 0LL;
        do
          xmlRegFreeAtom(*(void *)(*((void *)regexp + 4) + 8 * v6++));
        while (v6 < *((int *)regexp + 6));
        int v5 = (void *)*((void *)regexp + 4);
      }

      xmlFree(v5);
    }

    int v7 = (void *)*((void *)regexp + 6);
    if (v7) {
      xmlFree(v7);
    }
    uint64_t v8 = (void *)*((void *)regexp + 9);
    if (v8) {
      xmlFree(v8);
    }
    uint64_t v9 = (void *)*((void *)regexp + 10);
    if (v9) {
      xmlFree(v9);
    }
    uint64_t v10 = (void *)*((void *)regexp + 12);
    if (v10)
    {
      if (*((int *)regexp + 22) >= 1)
      {
        uint64_t v11 = 0LL;
        do
          xmlFree(*(void **)(*((void *)regexp + 12) + 8 * v11++));
        while (v11 < *((int *)regexp + 22));
        uint64_t v10 = (void *)*((void *)regexp + 12);
      }

      xmlFree(v10);
    }

    xmlFree(regexp);
  }

void xmlRegFreeAtom(uint64_t a1)
{
  if (a1)
  {
    int v2 = *(_DWORD *)(a1 + 76);
    if (v2 >= 1)
    {
      for (uint64_t i = 0LL; i < v2; ++i)
      {
        uint64_t v4 = *(void **)(*(void *)(a1 + 80) + 8 * i);
        if (v4)
        {
          int v5 = (void *)v4[2];
          if (v5) {
            xmlFree(v5);
          }
          xmlFree(v4);
          int v2 = *(_DWORD *)(a1 + 76);
        }
      }
    }

    uint64_t v6 = *(void **)(a1 + 80);
    if (v6) {
      xmlFree(v6);
    }
    int v7 = *(_DWORD *)(a1 + 4);
    if (v7 == 5)
    {
      uint64_t v8 = *(void **)(a1 + 24);
      if (!v8 || (xmlFree(v8), int v7 = *(_DWORD *)(a1 + 4), v7 == 5))
      {
        uint64_t v9 = *(void **)(a1 + 32);
        if (!v9)
        {
LABEL_19:
          xmlFree((void *)a1);
          return;
        }

        xmlFree(v9);
        int v7 = *(_DWORD *)(a1 + 4);
      }
    }

    if (v7 == 136)
    {
      uint64_t v10 = *(void **)(a1 + 24);
      if (v10) {
        xmlFree(v10);
      }
    }

    goto LABEL_19;
  }

uint64_t xmlAutomataSetFlags(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 112) |= a2;
  }
  return result;
}

xmlAutomataStatePtr xmlAutomataGetInitState(xmlAutomataStatePtr am)
{
  if (am) {
    return (xmlAutomataStatePtr)*((void *)am + 3);
  }
  return am;
}

int xmlAutomataSetFinalState(xmlAutomataPtr am, xmlAutomataStatePtr state)
{
  int result = -1;
  if (am)
  {
    if (state)
    {
      int result = 0;
      *(_DWORD *)state = 2;
    }
  }

  return result;
}

xmlAutomataStatePtr xmlAutomataNewTransition( xmlAutomataPtr am, xmlAutomataStatePtr from, xmlAutomataStatePtr to, const xmlChar *token, void *data)
{
  xmlAutomataStatePtr result = 0LL;
  if (am)
  {
    if (from)
    {
      if (token)
      {
        xmlAutomataStatePtr result = (xmlAutomataStatePtr)xmlRegNewAtom((uint64_t)am, 5);
        if (result)
        {
          xmlAutomataStatePtr v11 = result;
          *((void *)result + 11) = data;
          *((void *)result + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = xmlStrdup(token);
          if ((xmlFAGenerateTransitions((uint64_t)am, (uint64_t)from, to, (uint64_t)v11) & 0x80000000) != 0)
          {
            xmlRegFreeAtom((uint64_t)v11);
            return 0LL;
          }

          else
          {
            xmlAutomataStatePtr result = to;
            if (!to) {
              return (xmlAutomataStatePtr)*((void *)am + 5);
            }
          }
        }
      }
    }
  }

  return result;
}

_OWORD *xmlRegNewAtom(uint64_t a1, int a2)
{
  uint64_t v4 = xmlMalloc(0x60uLL);
  int v5 = v4;
  if (v4)
  {
    *uint64_t v4 = 0u;
    v4[1] = 0u;
    v4[4] = 0u;
    v4[5] = 0u;
    v4[2] = 0u;
    v4[3] = 0u;
    *((_DWORD *)v4 + 1) = a2;
    *((void *)v4 + 1) = 2LL;
    *((_DWORD *)v4 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0;
  }

  else
  {
    xmlRegexpErrMemory(a1, (uint64_t)"allocating atom");
  }

  return v5;
}

uint64_t xmlFAGenerateTransitions(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (!a4)
  {
    *(_DWORD *)(a1 + 16) = 1450;
    xmlRegexpErrCompile(a1, (uint64_t)"generate transition: atom == NULL");
    return 0xFFFFFFFFLL;
  }

  uint64_t v6 = a3;
  if (*(_DWORD *)(a4 + 4) == 4)
  {
    if ((xmlRegAtomPush(a1, (_DWORD *)a4) & 0x80000000) == 0)
    {
      if (v6)
      {
        uint64_t v7 = *(void *)(a4 + 64);
        if ((void *)v7 != v6 && *(_DWORD *)(a4 + 8) != 8) {
          xmlRegStateAddTrans(a1, v7, 0LL, (uint64_t)v6, -1, -1);
        }
      }

      uint64_t result = 0LL;
      switch(*(_DWORD *)(a4 + 8))
      {
        case 3:
          *(_DWORD *)(a4 + 8) = 2;
          uint64_t v9 = *(void *)(a4 + 48);
          if (v6)
          {
            uint64_t v10 = a1;
            uint64_t v11 = 0LL;
            uint64_t v12 = (uint64_t)v6;
            goto LABEL_48;
          }

          xmlFAGenerateEpsilonTransition(a1, v9, 0LL);
          uint64_t v19 = *(void *)(a4 + 64);
          uint64_t v20 = *(void **)(a1 + 40);
          goto LABEL_35;
        case 4:
          *(_DWORD *)(a4 + 8) = 2;
          xmlFAGenerateEpsilonTransition(a1, *(void *)(a4 + 48), *(void **)(a4 + 64));
          goto LABEL_34;
        case 5:
          *(_DWORD *)(a4 + 8) = 2;
LABEL_34:
          uint64_t v19 = *(void *)(a4 + 64);
          uint64_t v20 = *(void **)(a4 + 48);
LABEL_35:
          uint64_t v21 = a1;
          goto LABEL_51;
        case 8:
          if (!v6)
          {
            uint64_t v6 = xmlRegNewState(a1);
            xmlRegStatePush(a1, (uint64_t)v6);
          }

          if (*(_DWORD *)(a4 + 12) || *(void *)(a4 + 56))
          {
            unsigned int Counter = xmlRegGetCounter(a1);
            if ((Counter & 0x80000000) != 0) {
              return 0xFFFFFFFFLL;
            }
            int v23 = Counter;
            *(int32x2_t *)(*(void *)(a1 + 96) + 8LL * Counter) = vadd_s32(*(int32x2_t *)(a4 + 12), (int32x2_t)-1LL);
            xmlFAGenerateCountedEpsilonTransition(a1, *(void *)(a4 + 64), *(void **)(a4 + 48), Counter);
            xmlFAGenerateCountedTransition(a1, *(void *)(a4 + 64), v6, v23);
            if (*(_DWORD *)(a4 + 12)) {
              goto LABEL_44;
            }
            int v24 = (uint64_t *)(a4 + 56);
LABEL_43:
            xmlFAGenerateEpsilonTransition(a1, *v24, v6);
LABEL_44:
            uint64_t result = 0LL;
            *(_DWORD *)(a4 + 16) = 0;
            *(void *)(a4 + 8) = 2LL;
            *(void *)(a1 + 40) = v6;
            return result;
          }

          uint64_t v26 = xmlRegCopyAtom(a1, a4);
          if (v26)
          {
            *(void *)(v26 + 8) = 2LL;
            *(_DWORD *)(v26 + 16) = 0;
            int v24 = (uint64_t *)(a4 + 48);
            if ((xmlFAGenerateTransitions(a1, *(void *)(a4 + 48), 0LL, v26) & 0x80000000) == 0)
            {
              uint64_t v27 = *(void *)(a1 + 40);
              unsigned int v28 = xmlRegGetCounter(a1);
              if ((v28 & 0x80000000) == 0)
              {
                int v29 = v28;
                *(int32x2_t *)(*(void *)(a1 + 96) + 8LL * v28) = vadd_s32(*(int32x2_t *)(a4 + 12), (int32x2_t)-1LL);
                xmlFAGenerateCountedEpsilonTransition(a1, v27, *(void **)(a4 + 64), v28);
                xmlFAGenerateCountedTransition(a1, v27, v6, v29);
                goto LABEL_43;
              }
            }
          }

          break;
        default:
          return result;
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (*(_DWORD *)(a4 + 12) || *(_DWORD *)(a4 + 16) || *(_DWORD *)(a4 + 8) != 8)
  {
    if (!a3)
    {
      uint64_t v15 = xmlRegNewState(a1);
      if (!v15) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v6 = v15;
      xmlRegStatePush(a1, (uint64_t)v15);
    }

    uint64_t v16 = v6;
    if ((*(_DWORD *)(a4 + 8) & 0xFFFFFFFE) == 4)
    {
      uint64_t v17 = xmlRegNewState(a1);
      if (!v17) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v16 = v17;
      xmlRegStatePush(a1, (uint64_t)v17);
      xmlFAGenerateEpsilonTransition(a1, (uint64_t)v16, v6);
    }

    if ((xmlRegAtomPush(a1, (_DWORD *)a4) & 0x80000000) == 0)
    {
      if (*(_DWORD *)(a4 + 8) == 8 && !*(_DWORD *)(a4 + 12))
      {
        int v25 = *(_DWORD *)(a4 + 16);
        char v18 = 1;
        if (v25 >= 1)
        {
          *(_DWORD *)(a4 + 12) = 1;
          char v18 = 0;
          if (v25 == 1) {
            *(_DWORD *)(a4 + 8) = 3;
          }
        }
      }

      else
      {
        char v18 = 1;
      }

      xmlRegStateAddTrans(a1, a2, a4, (uint64_t)v16, -1, -1);
      uint64_t result = 0LL;
      *(void *)(a1 + 40) = v6;
      switch(*(_DWORD *)(a4 + 8))
      {
        case 3:
          *(_DWORD *)(a4 + 8) = 2;
          goto LABEL_50;
        case 4:
          *(_DWORD *)(a4 + 8) = 2;
          xmlFAGenerateEpsilonTransition(a1, a2, v16);
          goto LABEL_47;
        case 5:
          *(_DWORD *)(a4 + 8) = 2;
LABEL_47:
          uint64_t v10 = a1;
          uint64_t v9 = (uint64_t)v16;
          uint64_t v11 = a4;
          uint64_t v12 = (uint64_t)v16;
LABEL_48:
          xmlRegStateAddTrans(v10, v9, v11, v12, -1, -1);
          return 0LL;
        case 8:
          if ((v18 & 1) != 0) {
            return 0LL;
          }
LABEL_50:
          uint64_t v21 = a1;
          uint64_t v19 = a2;
          uint64_t v20 = v16;
LABEL_51:
          xmlFAGenerateEpsilonTransition(v21, v19, v20);
          return 0LL;
        default:
          return result;
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (a3) {
    goto LABEL_19;
  }
  int v14 = xmlRegNewState(a1);
  if (!v14) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = v14;
  xmlRegStatePush(a1, (uint64_t)v14);
LABEL_19:
  xmlFAGenerateEpsilonTransition(a1, a2, v6);
  *(void *)(a1 + 40) = v6;
  xmlRegFreeAtom(a4);
  return 0LL;
}

xmlAutomataStatePtr xmlAutomataNewTransition2( xmlAutomataPtr am, xmlAutomataStatePtr from, xmlAutomataStatePtr to, const xmlChar *token, const xmlChar *token2, void *data)
{
  xmlAutomataStatePtr result = 0LL;
  if (am)
  {
    if (from)
    {
      if (token)
      {
        xmlAutomataStatePtr result = (xmlAutomataStatePtr)xmlRegNewAtom((uint64_t)am, 5);
        if (result)
        {
          xmlAutomataStatePtr v13 = result;
          *((void *)result + 11) = data;
          if (token2 && *token2)
          {
            int v14 = strlen((const char *)token2);
            int v15 = strlen((const char *)token);
            uint64_t v16 = (xmlChar *)xmlMallocAtomic(v15 + v14 + 2);
            if (!v16) {
              goto LABEL_13;
            }
            uint64_t v17 = v16;
            memcpy(v16, token, v15);
            v17[v15] = 124;
            memcpy(&v17[v15 + 1], token2, v14);
            v17[v15 + 1 + v14] = 0;
          }

          else
          {
            uint64_t v17 = xmlStrdup(token);
          }

          *((void *)v13 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = v17;
          if ((xmlFAGenerateTransitions((uint64_t)am, (uint64_t)from, to, (uint64_t)v13) & 0x80000000) == 0)
          {
            xmlAutomataStatePtr result = to;
            if (!to) {
              return (xmlAutomataStatePtr)*((void *)am + 5);
            }
            return result;
          }

xmlAutomataStatePtr xmlAutomataNewNegTrans( xmlAutomataPtr am, xmlAutomataStatePtr from, xmlAutomataStatePtr to, const xmlChar *token, const xmlChar *token2, void *data)
{
  xmlAutomataStatePtr result = 0LL;
  uint64_t v30 = *MEMORY[0x1895F89C0];
  if (am)
  {
    if (from)
    {
      if (token)
      {
        xmlAutomataStatePtr result = (xmlAutomataStatePtr)xmlRegNewAtom((uint64_t)am, 5);
        if (result)
        {
          xmlAutomataStatePtr v13 = result;
          __int128 v28 = 0u;
          memset(v29, 0, 23);
          __int128 v26 = 0u;
          __int128 v27 = 0u;
          __int128 v24 = 0u;
          __int128 v25 = 0u;
          __int128 v22 = 0u;
          __int128 v23 = 0u;
          __int128 v20 = 0u;
          __int128 v21 = 0u;
          *(_OWORD *)char __str = 0u;
          __int128 v19 = 0u;
          *((void *)result + 11) = data;
          *((_DWORD *)result + 10) = 1;
          if (token2 && *token2)
          {
            int v14 = strlen((const char *)token2);
            int v15 = strlen((const char *)token);
            uint64_t v16 = (xmlChar *)xmlMallocAtomic(v15 + v14 + 2);
            if (!v16) {
              goto LABEL_13;
            }
            uint64_t v17 = v16;
            memcpy(v16, token, v15);
            v17[v15] = 124;
            memcpy(&v17[v15 + 1], token2, v14);
            v17[v15 + 1 + v14] = 0;
          }

          else
          {
            uint64_t v17 = xmlStrdup(token);
          }

          *((void *)v13 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = v17;
          snprintf(__str, 0xC7uLL, "not %s", (const char *)v17);
          v29[23] = 0;
          *((void *)v13 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = xmlStrdup((const xmlChar *)__str);
          if ((xmlFAGenerateTransitions((uint64_t)am, (uint64_t)from, to, (uint64_t)v13) & 0x80000000) == 0)
          {
            ++*((_DWORD *)am + 27);
            xmlAutomataStatePtr result = to;
            if (!to) {
              return (xmlAutomataStatePtr)*((void *)am + 5);
            }
            return result;
          }

xmlAutomataStatePtr xmlAutomataNewCountTrans2( xmlAutomataPtr am, xmlAutomataStatePtr from, xmlAutomataStatePtr to, const xmlChar *token, const xmlChar *token2, int min, int max, void *data)
{
  xmlAutomataStatePtr result = 0LL;
  if (!am) {
    return result;
  }
  if (!from) {
    return result;
  }
  if (!token) {
    return result;
  }
  if (min < 0) {
    return result;
  }
  xmlAutomataStatePtr result = 0LL;
  if (max < min) {
    return result;
  }
  if (max < 1) {
    return result;
  }
  xmlAutomataStatePtr result = (xmlAutomataStatePtr)xmlRegNewAtom((uint64_t)am, 5);
  if (!result) {
    return result;
  }
  xmlAutomataStatePtr v17 = result;
  if (token2 && *token2)
  {
    int v24 = strlen((const char *)token2);
    int v25 = strlen((const char *)token);
    char v18 = (xmlChar *)xmlMallocAtomic(v25 + v24 + 2);
    if (!v18)
    {
LABEL_23:
      xmlRegFreeAtom((uint64_t)v17);
      return 0LL;
    }

    __int128 v19 = v18;
    memcpy(v18, token, v25);
    v19[v25] = 124;
    memcpy(&v19[v25 + 1], token2, v24);
    v19[v25 + 1 + v24] = 0;
  }

  else
  {
    __int128 v19 = xmlStrdup(token);
  }

  *((void *)v17 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = v19;
  *((void *)v17 + 11) = data;
  if (min) {
    int v20 = min;
  }
  else {
    int v20 = 1;
  }
  *((_DWORD *)v17 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = v20;
  *((_DWORD *)v17 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = max;
  unsigned int Counter = xmlRegGetCounter((uint64_t)am);
  if ((Counter & 0x80000000) != 0) {
    goto LABEL_23;
  }
  int v22 = Counter;
  __int128 v23 = (int *)(*((void *)am + 12) + 8LL * Counter);
  *__int128 v23 = min;
  v23[1] = max;
  if (!to)
  {
    to = (xmlAutomataStatePtr)xmlRegNewState((uint64_t)am);
    xmlRegStatePush((uint64_t)am, (uint64_t)to);
  }

  xmlRegStateAddTrans((uint64_t)am, (uint64_t)from, (uint64_t)v17, (uint64_t)to, v22, -1);
  xmlRegAtomPush((uint64_t)am, v17);
  *((void *)am + 5) = to;
  if (!min)
  {
    if (to) {
      xmlRegStateAddTrans((uint64_t)am, (uint64_t)from, 0LL, (uint64_t)to, -1, -1);
    }
  }

  return to;
}

uint64_t xmlRegGetCounter(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 88);
  if (!(_DWORD)v2)
  {
    *(_DWORD *)(a1 + 88) = 4;
    int v3 = xmlMalloc(0x20uLL);
    *(void *)(a1 + 96) = v3;
    if (v3) {
      goto LABEL_8;
    }
    xmlRegexpErrMemory(a1, (uint64_t)"allocating counter");
    *(_DWORD *)(a1 + 88) = 0;
    return 0xFFFFFFFFLL;
  }

  if (*(_DWORD *)(a1 + 92) >= (int)v2)
  {
    *(_DWORD *)(a1 + 88) = 2 * v2;
    int v3 = xmlRealloc(*(void **)(a1 + 96), 16 * v2);
    if (v3)
    {
      *(void *)(a1 + 96) = v3;
      goto LABEL_8;
    }

    xmlRegexpErrMemory(a1, (uint64_t)"allocating counter");
    *(int *)(a1 + 88) /= 2;
    return 0xFFFFFFFFLL;
  }

  int v3 = *(void **)(a1 + 96);
LABEL_8:
  uint64_t v4 = *(int *)(a1 + 92);
  v3[v4] = -1LL;
  *(_DWORD *)(a1 + 92) = v4 + 1;
  return v4;
}

uint64_t xmlRegStateAddTrans(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6 = result;
  if (!a2)
  {
    *(_DWORD *)(result + 16) = 1450;
    char v18 = "add state: state is NULL";
    return xmlRegexpErrCompile(result, (uint64_t)v18);
  }

  if (!a4)
  {
    *(_DWORD *)(result + 16) = 1450;
    char v18 = "add state: target is NULL";
    return xmlRegexpErrCompile(result, (uint64_t)v18);
  }

  uint64_t v12 = *(unsigned int *)(a2 + 24);
  if ((int)v12 < 1)
  {
LABEL_10:
    uint64_t v16 = *(int *)(a2 + 20);
    if ((_DWORD)v16)
    {
      if ((int)v12 >= (int)v16)
      {
        *(_DWORD *)(a2 + 20) = 2 * v16;
        xmlAutomataStatePtr v17 = (char *)xmlRealloc(*(void **)(a2 + 32), 48 * v16);
        if (!v17)
        {
          xmlAutomataStatePtr result = xmlRegexpErrMemory(v6, (uint64_t)"adding transition");
          *(int *)(a2 + 20) /= 2;
          return result;
        }

        *(void *)(a2 + 32) = v17;
      }

      else
      {
        xmlAutomataStatePtr v17 = *(char **)(a2 + 32);
      }
    }

    else
    {
      *(_DWORD *)(a2 + 20) = 8;
      xmlAutomataStatePtr v17 = (char *)xmlMalloc(0xC0uLL);
      *(void *)(a2 + 32) = v17;
      if (!v17)
      {
        xmlAutomataStatePtr result = xmlRegexpErrMemory(v6, (uint64_t)"adding transition");
        *(_DWORD *)(a2 + 20) = 0;
        return result;
      }
    }

    int v19 = *(_DWORD *)(a2 + 24);
    int v20 = &v17[24 * v19];
    *(void *)int v20 = a3;
    *((_DWORD *)v20 + 2) = *(_DWORD *)(a4 + 16);
    *((_DWORD *)v20 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = a5;
    *((_DWORD *)v20 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = a6;
    *((_DWORD *)v20 + 5) = 0;
    *(_DWORD *)(a2 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v19 + 1;
    int v21 = *(_DWORD *)(a2 + 16);
    uint64_t v22 = *(int *)(a4 + 40);
    if ((_DWORD)v22)
    {
      if (*(_DWORD *)(a4 + 44) >= (int)v22)
      {
        *(_DWORD *)(a4 + 40) = 2 * v22;
        xmlAutomataStatePtr result = (uint64_t)xmlRealloc(*(void **)(a4 + 48), 8 * v22);
        if (!result)
        {
          xmlAutomataStatePtr result = xmlRegexpErrMemory(v6, (uint64_t)"adding transition");
          *(int *)(a4 + 40) /= 2;
          return result;
        }

        *(void *)(a4 + 48) = result;
      }

      else
      {
        xmlAutomataStatePtr result = *(void *)(a4 + 48);
      }
    }

    else
    {
      *(_DWORD *)(a4 + 40) = 8;
      xmlAutomataStatePtr result = (uint64_t)xmlMalloc(0x20uLL);
      *(void *)(a4 + 48) = result;
      if (!result)
      {
        xmlAutomataStatePtr result = xmlRegexpErrMemory(v6, (uint64_t)"adding transition");
        *(_DWORD *)(a4 + 40) = 0;
        return result;
      }
    }

    *(_DWORD *)(result + 4LL * (int)(*(_DWORD *)(a4 + 44))++) = v21;
  }

  else
  {
    uint64_t v13 = *(void *)(a2 + 32);
    uint64_t v14 = v12 + 1;
    while (1)
    {
      unsigned int v15 = v14 - 2;
      if (*(void *)(v13 + 24LL * (v14 - 2)) == a3
        && *(_DWORD *)(v13 + 24LL * v15 + 8) == *(_DWORD *)(a4 + 16)
        && *(_DWORD *)(v13 + 24LL * v15 + 12) == a5
        && *(_DWORD *)(v13 + 24LL * v15 + 16) == a6)
      {
        break;
      }
    }
  }

  return result;
}

uint64_t xmlRegAtomPush(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(int *)(a1 + 56);
  if (!(_DWORD)v4)
  {
    *(_DWORD *)(a1 + 56) = 4;
    int v5 = xmlMalloc(0x20uLL);
    *(void *)(a1 + 6xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v5;
    if (v5) {
      goto LABEL_8;
    }
    xmlRegexpErrMemory(a1, (uint64_t)"pushing atom");
    *(_DWORD *)(a1 + 56) = 0;
    return 0xFFFFFFFFLL;
  }

  if (*(_DWORD *)(a1 + 60) >= (int)v4)
  {
    *(_DWORD *)(a1 + 56) = 2 * v4;
    int v5 = xmlRealloc(*(void **)(a1 + 64), 16 * v4);
    if (v5)
    {
      *(void *)(a1 + 6xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v5;
      goto LABEL_8;
    }

    xmlRegexpErrMemory(a1, (uint64_t)"allocating counter");
    *(int *)(a1 + 56) /= 2;
    return 0xFFFFFFFFLL;
  }

  int v5 = *(void **)(a1 + 64);
LABEL_8:
  uint64_t v6 = 0LL;
  uint64_t v7 = *(int *)(a1 + 60);
  *a2 = v7;
  *(_DWORD *)(a1 + 60) = v7 + 1;
  v5[v7] = a2;
  return v6;
}

uint64_t xmlFAGenerateEpsilonTransition(uint64_t a1, uint64_t a2, void *a3)
{
  int v3 = a3;
  if (!a3)
  {
    int v3 = xmlRegNewState(a1);
    xmlRegStatePush(a1, (uint64_t)v3);
    *(void *)(a1 + 40) = v3;
  }

  return xmlRegStateAddTrans(a1, a2, 0LL, (uint64_t)v3, -1, -1);
}

xmlAutomataStatePtr xmlAutomataNewCountTrans( xmlAutomataPtr am, xmlAutomataStatePtr from, xmlAutomataStatePtr to, const xmlChar *token, int min, int max, void *data)
{
  xmlAutomataStatePtr result = 0LL;
  if (am)
  {
    if (from)
    {
      if (token)
      {
        if ((min & 0x80000000) == 0)
        {
          xmlAutomataStatePtr result = 0LL;
          if (max >= min && max >= 1)
          {
            xmlAutomataStatePtr result = (xmlAutomataStatePtr)xmlRegNewAtom((uint64_t)am, 5);
            if (result)
            {
              xmlAutomataStatePtr v15 = result;
              *((void *)result + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = xmlStrdup(token);
              *((void *)v15 + 11) = data;
              if (min) {
                int v16 = min;
              }
              else {
                int v16 = 1;
              }
              *((_DWORD *)v15 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = v16;
              *((_DWORD *)v15 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = max;
              unsigned int Counter = xmlRegGetCounter((uint64_t)am);
              if ((Counter & 0x80000000) != 0)
              {
                xmlRegFreeAtom((uint64_t)v15);
                return 0LL;
              }

              else
              {
                int v18 = Counter;
                int v19 = (int *)(*((void *)am + 12) + 8LL * Counter);
                *int v19 = min;
                v19[1] = max;
                if (!to)
                {
                  to = (xmlAutomataStatePtr)xmlRegNewState((uint64_t)am);
                  xmlRegStatePush((uint64_t)am, (uint64_t)to);
                }

                xmlRegStateAddTrans((uint64_t)am, (uint64_t)from, (uint64_t)v15, (uint64_t)to, v18, -1);
                xmlRegAtomPush((uint64_t)am, v15);
                *((void *)am + 5) = to;
                if (!min)
                {
                  if (to) {
                    xmlRegStateAddTrans((uint64_t)am, (uint64_t)from, 0LL, (uint64_t)to, -1, -1);
                  }
                }

                return to;
              }
            }
          }
        }
      }
    }
  }

  return result;
}

xmlAutomataStatePtr xmlAutomataNewOnceTrans2( xmlAutomataPtr am, xmlAutomataStatePtr from, xmlAutomataStatePtr to, const xmlChar *token, const xmlChar *token2, int min, int max, void *data)
{
  xmlAutomataStatePtr result = 0LL;
  if (!am) {
    return result;
  }
  if (!from) {
    return result;
  }
  if (!token) {
    return result;
  }
  if (min < 1) {
    return result;
  }
  if (max < min) {
    return result;
  }
  xmlAutomataStatePtr result = (xmlAutomataStatePtr)xmlRegNewAtom((uint64_t)am, 5);
  if (!result) {
    return result;
  }
  xmlAutomataStatePtr v17 = result;
  if (token2 && *token2)
  {
    int v22 = strlen((const char *)token2);
    int v23 = strlen((const char *)token);
    int v18 = (xmlChar *)xmlMallocAtomic(v23 + v22 + 2);
    if (!v18)
    {
LABEL_16:
      xmlRegFreeAtom((uint64_t)v17);
      return 0LL;
    }

    int v19 = v18;
    memcpy(v18, token, v23);
    v19[v23] = 124;
    memcpy(&v19[v23 + 1], token2, v22);
    v19[v23 + 1 + v22] = 0;
  }

  else
  {
    int v19 = xmlStrdup(token);
  }

  *((void *)v17 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = v19;
  *((void *)v17 + 11) = data;
  *((_DWORD *)v17 + 2) = 6;
  *((_DWORD *)v17 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = min;
  *((_DWORD *)v17 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = max;
  unsigned int Counter = xmlRegGetCounter((uint64_t)am);
  if ((Counter & 0x80000000) != 0) {
    goto LABEL_16;
  }
  int v21 = Counter;
  *(void *)(*((void *)am + 12) + 8LL * Counter) = 0x100000001LL;
  if (!to)
  {
    to = (xmlAutomataStatePtr)xmlRegNewState((uint64_t)am);
    xmlRegStatePush((uint64_t)am, (uint64_t)to);
  }

  xmlRegStateAddTrans((uint64_t)am, (uint64_t)from, (uint64_t)v17, (uint64_t)to, v21, -1);
  xmlRegAtomPush((uint64_t)am, v17);
  *((void *)am + 5) = to;
  return to;
}

xmlAutomataStatePtr xmlAutomataNewOnceTrans( xmlAutomataPtr am, xmlAutomataStatePtr from, xmlAutomataStatePtr to, const xmlChar *token, int min, int max, void *data)
{
  xmlAutomataStatePtr result = 0LL;
  if (am)
  {
    if (from)
    {
      if (token)
      {
        if (min >= 1 && max >= min)
        {
          xmlAutomataStatePtr result = (xmlAutomataStatePtr)xmlRegNewAtom((uint64_t)am, 5);
          if (result)
          {
            xmlAutomataStatePtr v15 = result;
            *((void *)result + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = xmlStrdup(token);
            *((void *)v15 + 11) = data;
            *((_DWORD *)v15 + 2) = 6;
            *((_DWORD *)v15 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = min;
            *((_DWORD *)v15 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = max;
            unsigned int Counter = xmlRegGetCounter((uint64_t)am);
            if ((Counter & 0x80000000) != 0)
            {
              xmlRegFreeAtom((uint64_t)v15);
              return 0LL;
            }

            else
            {
              int v17 = Counter;
              *(void *)(*((void *)am + 12) + 8LL * Counter) = 0x100000001LL;
              if (!to)
              {
                to = (xmlAutomataStatePtr)xmlRegNewState((uint64_t)am);
                xmlRegStatePush((uint64_t)am, (uint64_t)to);
              }

              xmlRegStateAddTrans((uint64_t)am, (uint64_t)from, (uint64_t)v15, (uint64_t)to, v17, -1);
              xmlRegAtomPush((uint64_t)am, v15);
              *((void *)am + 5) = to;
              return to;
            }
          }
        }
      }
    }
  }

  return result;
}

xmlAutomataStatePtr xmlAutomataNewState(xmlAutomataPtr am)
{
  if (!am) {
    return 0LL;
  }
  uint64_t v2 = (xmlAutomataState *)xmlRegNewState((uint64_t)am);
  xmlRegStatePush((uint64_t)am, (uint64_t)v2);
  return v2;
}

xmlAutomataStatePtr xmlAutomataNewEpsilon(xmlAutomataPtr am, xmlAutomataStatePtr from, xmlAutomataStatePtr to)
{
  xmlAutomataStatePtr result = 0LL;
  if (am && from)
  {
    xmlFAGenerateEpsilonTransition((uint64_t)am, (uint64_t)from, to);
    xmlAutomataStatePtr result = to;
    if (!to) {
      return (xmlAutomataStatePtr)*((void *)am + 5);
    }
  }

  return result;
}

xmlAutomataStatePtr xmlAutomataNewAllTrans( xmlAutomataPtr am, xmlAutomataStatePtr from, xmlAutomataStatePtr to, int lax)
{
  xmlAutomataStatePtr result = 0LL;
  if (am && from)
  {
    if (to)
    {
      if (lax) {
        int v9 = 1193047;
      }
      else {
        int v9 = 1193046;
      }
      xmlRegStateAddTrans((uint64_t)am, (uint64_t)from, 0LL, (uint64_t)to, -1, v9);
      return to;
    }

    else
    {
      uint64_t v10 = xmlRegNewState((uint64_t)am);
      xmlRegStatePush((uint64_t)am, (uint64_t)v10);
      *((void *)am + 5) = v10;
      if (lax) {
        int v11 = 1193047;
      }
      else {
        int v11 = 1193046;
      }
      xmlRegStateAddTrans((uint64_t)am, (uint64_t)from, 0LL, (uint64_t)v10, -1, v11);
      return (xmlAutomataStatePtr)*((void *)am + 5);
    }
  }

  return result;
}

int xmlAutomataNewCounter(xmlAutomataPtr am, int min, int max)
{
  if (!am) {
    return -1;
  }
  int result = xmlRegGetCounter((uint64_t)am);
  if (result < 0) {
    return -1;
  }
  uint64_t v7 = (int *)(*((void *)am + 12) + 8LL * result);
  *uint64_t v7 = min;
  v7[1] = max;
  return result;
}

xmlAutomataStatePtr xmlAutomataNewCountedTrans( xmlAutomataPtr am, xmlAutomataStatePtr from, xmlAutomataStatePtr to, int counter)
{
  xmlAutomataStatePtr result = 0LL;
  if (am && from && (counter & 0x80000000) == 0)
  {
    xmlFAGenerateCountedEpsilonTransition((uint64_t)am, (uint64_t)from, to, counter);
    xmlAutomataStatePtr result = to;
    if (!to) {
      return (xmlAutomataStatePtr)*((void *)am + 5);
    }
  }

  return result;
}

uint64_t xmlFAGenerateCountedEpsilonTransition(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  int v5 = a3;
  if (!a3)
  {
    int v5 = xmlRegNewState(a1);
    xmlRegStatePush(a1, (uint64_t)v5);
    *(void *)(a1 + 40) = v5;
  }

  return xmlRegStateAddTrans(a1, a2, 0LL, (uint64_t)v5, a4, -1);
}

xmlAutomataStatePtr xmlAutomataNewCounterTrans( xmlAutomataPtr am, xmlAutomataStatePtr from, xmlAutomataStatePtr to, int counter)
{
  xmlAutomataStatePtr result = 0LL;
  if (am && from && (counter & 0x80000000) == 0)
  {
    xmlFAGenerateCountedTransition((uint64_t)am, (uint64_t)from, to, counter);
    xmlAutomataStatePtr result = to;
    if (!to) {
      return (xmlAutomataStatePtr)*((void *)am + 5);
    }
  }

  return result;
}

uint64_t xmlFAGenerateCountedTransition(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  int v5 = a3;
  if (!a3)
  {
    int v5 = xmlRegNewState(a1);
    xmlRegStatePush(a1, (uint64_t)v5);
    *(void *)(a1 + 40) = v5;
  }

  return xmlRegStateAddTrans(a1, a2, 0LL, (uint64_t)v5, -1, a4);
}

xmlRegexpPtr xmlAutomataCompile(xmlAutomataPtr am)
{
  if (!am || *((_DWORD *)am + 4)) {
    return 0LL;
  }
  xmlFAEliminateEpsilonTransitions((uint64_t)am);
  return (xmlRegexpPtr)xmlRegEpxFromParse((uint64_t)am);
}

int xmlAutomataIsDeterminist(xmlAutomataPtr am)
{
  if (am) {
    return xmlFAComputesDeterminism(am);
  }
  else {
    return -1;
  }
}

uint64_t xmlFARegExecSaveInputString(uint64_t a1, xmlChar *cur, uint64_t a3)
{
  uint64_t v6 = *(int *)(a1 + 72);
  if ((_DWORD)v6)
  {
    if (*(_DWORD *)(a1 + 76) + 1 < (int)v6)
    {
LABEL_6:
      uint64_t result = (uint64_t)xmlStrdup(cur);
      uint64_t v10 = *(void *)(a1 + 104);
      uint64_t v11 = *(int *)(a1 + 76);
      uint64_t v12 = (void *)(v10 + 16 * v11);
      *uint64_t v12 = result;
      v12[1] = a3;
      *(_DWORD *)(a1 + 76) = ++v11;
      uint64_t v13 = (void *)(v10 + 16 * v11);
      void *v13 = 0LL;
      v13[1] = 0LL;
      return result;
    }

    *(_DWORD *)(a1 + 72) = 2 * v6;
    uint64_t v7 = xmlRealloc(*(void **)(a1 + 104), 32 * v6);
    if (v7)
    {
      *(void *)(a1 + 10xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v7;
      goto LABEL_6;
    }

    uint64_t result = xmlRegexpErrMemory(0LL, (uint64_t)"pushing input string");
    *(int *)(a1 + 72) /= 2;
  }

  else
  {
    *(_DWORD *)(a1 + 72) = 4;
    uint64_t v8 = xmlMalloc(0x40uLL);
    *(void *)(a1 + 10xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v8;
    if (v8) {
      goto LABEL_6;
    }
    uint64_t result = xmlRegexpErrMemory(0LL, (uint64_t)"pushing input string");
    *(_DWORD *)(a1 + 72) = 0;
  }

  return result;
}

uint64_t xmlRegStrEqualWildcard(_BYTE *a1, _BYTE *a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  uint64_t v2 = 0LL;
  if (a1 && a2)
  {
    int v3 = *a2;
    while (1)
    {
      if (*a1 == v3)
      {
        int v4 = *++a2;
        int v3 = v4;
        int v5 = a1;
      }

      else
      {
        if (v3 == 42) {
          int v5 = a2;
        }
        else {
          int v5 = a1;
        }
        if (v3 == 42) {
          a2 = a1;
        }
        int v3 = *a2;
        if (!*a2 || *v5 != 42) {
          return 0LL;
        }
        while (v3 != 124)
        {
          int v6 = *++a2;
          int v3 = v6;
          if (!v6)
          {
            a1 = v5 + 1;
            return *a1 == 0;
          }
        }
      }

      a1 = v5 + 1;
      if (!v3) {
        return *a1 == 0;
      }
    }
  }

  return v2;
}

void xmlFARegExecSave(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 144);
  if (v1 > 10000000) {
    return;
  }
  *(_DWORD *)(a1 + 14xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v1 + 1;
  uint64_t v3 = *(int *)(a1 + 48);
  if (!(_DWORD)v3)
  {
    *(_DWORD *)(a1 + 48) = 4;
    int v5 = (char *)xmlMalloc(0x60uLL);
    *(void *)(a1 + 56) = v5;
    if (!v5)
    {
      xmlRegexpErrMemory(0LL, (uint64_t)"saving regexp");
      *(_DWORD *)(a1 + 48) = 0;
      return;
    }

    int v6 = *(_DWORD *)(a1 + 48);
LABEL_8:
    bzero(v5, 24LL * v6);
    goto LABEL_9;
  }

  if (*(_DWORD *)(a1 + 52) >= (int)v3)
  {
    *(_DWORD *)(a1 + 48) = 2 * v3;
    int v4 = (char *)xmlRealloc(*(void **)(a1 + 56), 48 * v3);
    if (!v4)
    {
      xmlRegexpErrMemory(0LL, (uint64_t)"saving regexp");
      *(int *)(a1 + 48) /= 2;
      return;
    }

    *(void *)(a1 + 56) = v4;
    int v5 = &v4[24 * (int)v3];
    int v6 = *(_DWORD *)(a1 + 48) - v3;
    goto LABEL_8;
  }

int *xmlFARegExecRollBack(int *result)
{
  int v1 = result;
  int v2 = result[13];
  if (v2 <= 0)
  {
    int v9 = -1;
LABEL_8:
    int *v1 = v9;
    return result;
  }

  unsigned int v3 = v2 - 1;
  result[13] = v3;
  uint64_t v4 = *((void *)result + 7);
  uint64_t v5 = v4 + 24LL * v3;
  *((void *)result + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = *(void *)v5;
  int v6 = *(_DWORD *)(v5 + 8);
  LODWORD(v5) = *(_DWORD *)(v5 + 12);
  result[20] = v6;
  result[10] = v5;
  uint64_t v7 = *(unsigned int *)(*((void *)result + 1) + 40LL);
  int v8 = *(const void **)(v4 + 24LL * v3 + 16);
  if (!v8)
  {
    uint64_t result = (int *)fwrite("exec save: allocation failed", 0x1CuLL, 1uLL, (FILE *)*MEMORY[0x1895F89D0]);
    int v9 = -6;
    goto LABEL_8;
  }

  uint64_t result = (int *)*((void *)result + 8);
  if (result) {
    return (int *)memcpy(result, v8, 4 * v7);
  }
  return result;
}

FILE *xmlRegPrintAtomType(FILE *__stream, int a2)
{
  int v2 = __stream;
  switch(a2)
  {
    case 100:
      unsigned int v3 = "LETTER ";
      goto LABEL_51;
    case 101:
      unsigned int v3 = "LETTER_UPPERCASE ";
      goto LABEL_8;
    case 102:
      unsigned int v3 = "LETTER_LOWERCASE ";
      goto LABEL_8;
    case 103:
      unsigned int v3 = "LETTER_TITLECASE ";
LABEL_8:
      size_t v4 = 17LL;
      return (FILE *)fwrite(v3, v4, 1uLL, v2);
    case 104:
      unsigned int v3 = "LETTER_MODIFIER ";
      goto LABEL_36;
    case 105:
      unsigned int v3 = "LETTER_OTHERS ";
      goto LABEL_43;
    case 106:
      unsigned int v3 = "MARK ";
      size_t v4 = 5LL;
      return (FILE *)fwrite(v3, v4, 1uLL, v2);
    case 107:
      unsigned int v3 = "MARK_NONSPACING ";
      goto LABEL_36;
    case 108:
      unsigned int v3 = "MARK_SPACECOMBINING ";
      size_t v4 = 20LL;
      return (FILE *)fwrite(v3, v4, 1uLL, v2);
    case 109:
      unsigned int v3 = "MARK_ENCLOSING ";
      goto LABEL_26;
    case 110:
      unsigned int v3 = "NUMBER ";
      goto LABEL_51;
    case 111:
      unsigned int v3 = "NUMBER_DECIMAL ";
      goto LABEL_26;
    case 112:
      unsigned int v3 = "NUMBER_LETTER ";
      goto LABEL_43;
    case 113:
      unsigned int v3 = "NUMBER_OTHERS ";
      goto LABEL_43;
    case 114:
      unsigned int v3 = "PUNCT ";
      goto LABEL_46;
    case 115:
      unsigned int v3 = "PUNCT_CONNECTOR ";
      goto LABEL_36;
    case 116:
      unsigned int v3 = "PUNCT_DASH ";
      goto LABEL_62;
    case 117:
      unsigned int v3 = "PUNCT_OPEN ";
      goto LABEL_62;
    case 118:
      unsigned int v3 = "PUNCT_CLOSE ";
      goto LABEL_66;
    case 119:
      unsigned int v3 = "PUNCT_INITQUOTE ";
      goto LABEL_36;
    case 120:
      unsigned int v3 = "PUNCT_FINQUOTE ";
LABEL_26:
      size_t v4 = 15LL;
      return (FILE *)fwrite(v3, v4, 1uLL, v2);
    case 121:
      unsigned int v3 = "PUNCT_OTHERS ";
      goto LABEL_41;
    case 122:
      unsigned int v3 = "SEPAR ";
      goto LABEL_46;
    case 123:
      unsigned int v3 = "SEPAR_SPACE ";
      goto LABEL_66;
    case 124:
      unsigned int v3 = "SEPAR_LINE ";
      goto LABEL_62;
    case 125:
      unsigned int v3 = "SEPAR_PARA ";
LABEL_62:
      size_t v4 = 11LL;
      return (FILE *)fwrite(v3, v4, 1uLL, v2);
    case 126:
      unsigned int v3 = "SYMBOL ";
LABEL_51:
      size_t v4 = 7LL;
      return (FILE *)fwrite(v3, v4, 1uLL, v2);
    case 127:
      unsigned int v3 = "SYMBOL_MATH ";
LABEL_66:
      size_t v4 = 12LL;
      return (FILE *)fwrite(v3, v4, 1uLL, v2);
    case 128:
      unsigned int v3 = "SYMBOL_CURRENCY ";
      goto LABEL_36;
    case 129:
      unsigned int v3 = "SYMBOL_MODIFIER ";
LABEL_36:
      size_t v4 = 16LL;
      return (FILE *)fwrite(v3, v4, 1uLL, v2);
    case 130:
      unsigned int v3 = "SYMBOL_OTHERS ";
      goto LABEL_43;
    case 131:
      unsigned int v3 = "OTHER ";
      goto LABEL_46;
    case 132:
      unsigned int v3 = "OTHER_CONTROL ";
      goto LABEL_43;
    case 133:
      unsigned int v3 = "OTHER_FORMAT ";
LABEL_41:
      size_t v4 = 13LL;
      return (FILE *)fwrite(v3, v4, 1uLL, v2);
    case 134:
      unsigned int v3 = "OTHER_PRIVATE ";
LABEL_43:
      size_t v4 = 14LL;
      break;
    case 135:
      unsigned int v3 = "OTHER_NA ";
LABEL_64:
      size_t v4 = 9LL;
      break;
    case 136:
      unsigned int v3 = "BLOCK ";
LABEL_46:
      size_t v4 = 6LL;
      break;
    default:
      switch(a2)
      {
        case 1:
          unsigned int v3 = "epsilon ";
          goto LABEL_60;
        case 2:
          unsigned int v3 = "charval ";
          goto LABEL_60;
        case 3:
          unsigned int v3 = "ranges ";
          goto LABEL_51;
        case 4:
          unsigned int v3 = "subexpr ";
          goto LABEL_60;
        case 5:
          unsigned int v3 = "string ";
          goto LABEL_51;
        case 6:
          unsigned int v3 = "anychar ";
          goto LABEL_60;
        case 7:
          unsigned int v3 = "anyspace ";
          goto LABEL_64;
        case 8:
          unsigned int v3 = "notspace ";
          goto LABEL_64;
        case 9:
          unsigned int v3 = "initname ";
          goto LABEL_64;
        case 10:
          unsigned int v3 = "notinitname ";
          goto LABEL_66;
        case 11:
          unsigned int v3 = "namechar ";
          goto LABEL_64;
        case 12:
          unsigned int v3 = "notnamechar ";
          goto LABEL_66;
        case 13:
          unsigned int v3 = "decimal ";
LABEL_60:
          size_t v4 = 8LL;
          return (FILE *)fwrite(v3, v4, 1uLL, v2);
        case 14:
          unsigned int v3 = "notdecimal ";
          goto LABEL_62;
        case 15:
          unsigned int v3 = "realchar ";
          goto LABEL_64;
        case 16:
          unsigned int v3 = "notrealchar ";
          goto LABEL_66;
        default:
          return __stream;
      }
  }

  return (FILE *)fwrite(v3, v4, 1uLL, v2);
}

uint64_t xmlFAParseBranch(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  do
  {
    int v5 = **(unsigned __int8 **)(a1 + 8);
    if (!**(_BYTE **)(a1 + 8) || v5 == 124 || v5 == 41) {
      int v6 = a2;
    }
    else {
      int v6 = 0LL;
    }
    uint64_t result = xmlFAGenerateTransitions(a1, v4, v6, *(void *)(a1 + 48));
    if ((result & 0x80000000) != 0) {
      break;
    }
    uint64_t v4 = *(void *)(a1 + 40);
    *(void *)(a1 + 48) = 0LL;
    if (*(_DWORD *)(a1 + 16)) {
      break;
    }
    uint64_t result = xmlFAParsePiece(a1);
  }

  while ((_DWORD)result);
  return result;
}

uint64_t xmlFAParsePiece(uint64_t a1)
{
  *(void *)(a1 + 48) = 0LL;
  *(void *)leuint64_t n = 0LL;
  int v2 = xmlStringCurrentChar(0LL, *(const xmlChar **)(a1 + 8), &len[1]);
  BOOL v3 = v2 > 0x3F || ((1LL << v2) & 0x80004F0000000001LL) == 0;
  if (!v3
    || ((v2 - 91) <= 0x21 ? (BOOL v4 = ((1LL << (v2 - 91)) & 0x200000007LL) == 0) : (BOOL v4 = 1),
        !v4 || v2 < 1))
  {
    int v5 = *(unsigned __int8 **)(a1 + 8);
    unsigned int v6 = *v5;
    if (v6 > 0x5A)
    {
      if (v6 != 91)
      {
        if (v6 != 92) {
          return 0LL;
        }
        goto LABEL_16;
      }

      *(void *)(a1 + 8) = v5 + 1;
      int v9 = xmlRegNewAtom(a1, 3);
      *(void *)(a1 + 48) = v9;
      if (!v9) {
        goto LABEL_34;
      }
      xmlFAParseCharGroup(a1);
      int v10 = *(_BYTE **)(a1 + 8);
      if (*v10 == 93)
      {
        uint64_t v11 = v10 + 1;
LABEL_27:
        *(void *)(a1 + 8) = v11;
        goto LABEL_33;
      }

      *(_DWORD *)(a1 + 16) = 1450;
      int v8 = "xmlFAParseCharClass: ']' expected";
    }

    else
    {
      if (v6 != 40)
      {
        if (v6 != 46) {
          return 0LL;
        }
LABEL_16:
        xmlFAParseCharClassEsc(a1);
        goto LABEL_33;
      }

      *(void *)(a1 + 8) = v5 + 1;
      if (*(int *)(a1 + 116) < 50)
      {
        xmlFAGenerateEpsilonTransition(a1, *(void *)(a1 + 40), 0LL);
        uint64_t v12 = *(void *)(a1 + 40);
        xmlFAGenerateEpsilonTransition(a1, v12, 0LL);
        uint64_t v13 = *(void *)(a1 + 32);
        uint64_t v14 = *(void *)(a1 + 40);
        *(void *)(a1 + 32) = 0LL;
        *(void *)(a1 + 48) = 0LL;
        ++*(_DWORD *)(a1 + 116);
        xmlFAParseRegExp(a1, 0LL);
        --*(_DWORD *)(a1 + 116);
        xmlAutomataStatePtr v15 = *(_BYTE **)(a1 + 8);
        if (*v15 == 41)
        {
          *(void *)(a1 + 8) = v15 + 1;
        }

        else
        {
          *(_DWORD *)(a1 + 16) = 1450;
          xmlRegexpErrCompile(a1, (uint64_t)"xmlFAParseAtom: expecting ')'");
        }

        int v17 = xmlRegNewAtom(a1, 4);
        *(void *)(a1 + 48) = v17;
        if (!v17) {
          goto LABEL_34;
        }
        v17[6] = v14;
        v17[7] = v12;
        v17[8] = *(void *)(a1 + 40);
        *(void *)(a1 + 32) = v13;
LABEL_33:
        if (*(void *)(a1 + 48)) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }

      *(_DWORD *)(a1 + 16) = 1450;
      int v8 = "xmlFAParseAtom: maximum nesting depth exceeded";
    }

    xmlRegexpErrCompile(a1, (uint64_t)v8);
    goto LABEL_33;
  }

  int v16 = xmlRegNewAtom(a1, 2);
  *(void *)(a1 + 48) = v16;
  if (v16)
  {
    *(_DWORD *)(*(void *)(a1 + 48) + 44LL) = xmlStringCurrentChar(0LL, *(const xmlChar **)(a1 + 8), len);
    uint64_t v11 = (_BYTE *)(*(void *)(a1 + 8) + len[0]);
    goto LABEL_27;
  }

uint64_t xmlFAParseCharGroup(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 20);
  BOOL v3 = *(unsigned __int8 **)(result + 8);
  int v4 = *v3;
  if (v4 != 94) {
    goto LABEL_4;
  }
  *(void *)(result + 8) = v3 + 1;
  *(_DWORD *)(result + 20) = v2 == 0;
  uint64_t result = xmlFAParsePosCharGroup(result);
  *(_DWORD *)(v1 + 20) = v2;
  while (1)
  {
    BOOL v3 = *(unsigned __int8 **)(v1 + 8);
    int v4 = *v3;
LABEL_4:
    if (v4 == 93 || *(_DWORD *)(v1 + 16)) {
      break;
    }
    if (v4 == 45 && v3[1] == 91)
    {
      *(void *)(v1 + 8) = v3 + 2;
      *(_DWORD *)(v1 + 20) = 2;
      uint64_t result = xmlFAParseCharGroup(v1);
      *(_DWORD *)(v1 + 20) = v2;
      int v5 = *(_BYTE **)(v1 + 8);
      if (*v5 == 93)
      {
        *(void *)(v1 + 8) = v5 + 1;
      }

      else
      {
        *(_DWORD *)(v1 + 16) = 1450;
        return xmlRegexpErrCompile(v1, (uint64_t)"charClassExpr: ']' expected");
      }

      return result;
    }

    uint64_t result = xmlFAParsePosCharGroup(v1);
  }

  return result;
}

uint64_t xmlFAParseCharClassEsc(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(unsigned __int8 **)(result + 8);
  int v3 = *v2;
  if (v3 != 92)
  {
    if (v3 == 46)
    {
      uint64_t v4 = *(void *)(result + 48);
      if (!v4)
      {
        uint64_t result = (uint64_t)xmlRegNewAtom(result, 6);
        *(void *)(v1 + 48) = result;
        goto LABEL_39;
      }

      if (*(_DWORD *)(v4 + 4) != 3) {
        goto LABEL_39;
      }
      int v5 = *(_DWORD *)(result + 20);
      int v6 = 6;
      int v7 = 0;
      int v8 = 0;
LABEL_38:
      uint64_t result = xmlRegAtomAddRange(result, v4, v5, v6, v7, v8, 0LL);
      goto LABEL_39;
    }

    *(_DWORD *)(result + 16) = 1450;
    uint64_t v12 = "Escaped sequence: expecting \\"";
    return xmlRegexpErrCompile(v1, (uint64_t)v12);
  }

  *(void *)(result + 8) = v2 + 1;
  unsigned int v9 = v2[1];
  if (v9 > 0x43)
  {
    int v10 = 7;
    switch(v2[1])
    {
      case 'P':
        *(void *)(result + 8) = v2 + 2;
        if (v2[2] != 123) {
          goto LABEL_57;
        }
        *(void *)(result + 8) = v2 + 3;
        uint64_t result = (uint64_t)xmlFAParseCharProp((void *)result);
        uint64_t v11 = *(void *)(v1 + 48);
        if (v11) {
          *(_DWORD *)(v11 + 40) = 1;
        }
        goto LABEL_54;
      case 'Q':
      case 'R':
      case 'T':
      case 'U':
      case 'V':
      case 'X':
      case 'Y':
      case 'Z':
      case '_':
      case 'a':
      case 'b':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'o':
      case 'q':
      case 'u':
      case 'v':
      case 'x':
      case 'y':
      case 'z':
        goto LABEL_42;
      case 'S':
        int v10 = 8;
        goto LABEL_59;
      case 'W':
        int v10 = 16;
        goto LABEL_59;
      case '[':
      case '\\':
      case ']':
      case '^':
      case 'n':
      case 'r':
      case 't':
      case '{':
      case '|':
      case '}':
        goto LABEL_21;
      case 'c':
        int v10 = 11;
        goto LABEL_59;
      case 'd':
        int v10 = 13;
        goto LABEL_59;
      case 'i':
        int v10 = 9;
        goto LABEL_59;
      case 'p':
        *(void *)(result + 8) = v2 + 2;
        if (v2[2] != 123)
        {
LABEL_57:
          *(_DWORD *)(result + 16) = 1450;
          uint64_t v12 = "Expecting '{'";
          return xmlRegexpErrCompile(v1, (uint64_t)v12);
        }

        *(void *)(result + 8) = v2 + 3;
        uint64_t result = (uint64_t)xmlFAParseCharProp((void *)result);
LABEL_54:
        uint64_t v14 = *(_BYTE **)(v1 + 8);
        if (*v14 != 125)
        {
          *(_DWORD *)(v1 + 16) = 1450;
          uint64_t v12 = "Expecting '}'";
          return xmlRegexpErrCompile(v1, (uint64_t)v12);
        }

        goto LABEL_40;
      case 's':
        goto LABEL_59;
      case 'w':
        int v10 = 15;
        goto LABEL_59;
      default:
        if (v9 == 68)
        {
          int v10 = 14;
        }

        else
        {
          if (v9 != 73) {
            goto LABEL_42;
          }
          int v10 = 10;
        }

        break;
    }

    goto LABEL_59;
  }

  if (v2[1] > 0x2Cu)
  {
    if (v9 - 45 >= 2 && v9 != 63)
    {
      if (v9 == 67)
      {
        int v10 = 12;
LABEL_59:
        *(void *)(result + 8) = v2 + 2;
        uint64_t v15 = *(void *)(result + 48);
        if (v15)
        {
          if (*(_DWORD *)(v15 + 4) == 3) {
            return xmlRegAtomAddRange(result, v15, *(_DWORD *)(result + 20), v10, 0, 0, 0LL);
          }
        }

        else
        {
          uint64_t result = (uint64_t)xmlRegNewAtom(result, v10);
          *(void *)(v1 + 48) = result;
        }

        return result;
      }

uint64_t xmlFAParsePosCharGroup(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(const xmlChar **)(result + 8);
  int v3 = *v2;
  do
  {
    if (v3 != 92)
    {
      leuint64_t n = 0;
      unsigned int v4 = *v2;
      if (v4 > 0x5B)
      {
        if (v4 == 92)
        {
          int v6 = (unsigned __int8 *)(v2 + 1);
          *(void *)(v1 + 8) = v2 + 1;
          unsigned int v5 = v2[1];
          if (v5 > 0x71)
          {
            if (v5 - 123 >= 3)
            {
              if (v5 == 116)
              {
                unsigned int v5 = 9;
              }

              else
              {
                if (v5 != 114) {
                  goto LABEL_49;
                }
                unsigned int v5 = 13;
              }
            }
          }

          else if (v5 - 40 > 0x36 || ((1LL << (v5 - 40)) & 0x7800000080006FLL) == 0)
          {
            if (v5 != 110) {
              goto LABEL_49;
            }
            unsigned int v5 = 10;
          }

          leuint64_t n = 1;
LABEL_23:
          if (v5 == 45 && v6[1] != 93)
          {
            int v9 = *(v6 - 1);
            if (v9 != 91 && v9 != 94)
            {
              *(void *)(v1 + 8) = &v6[len];
              goto LABEL_55;
            }
          }

          int v10 = &v6[len];
          *(void *)(v1 + 8) = v10;
          if (*v10 != 45 || (uint64_t v11 = v10 + 1, v10[1] == 93))
          {
            uint64_t v12 = *(void *)(v1 + 48);
            int v13 = *(_DWORD *)(v1 + 20);
            uint64_t v14 = v1;
            int v15 = v5;
            unsigned int v16 = v5;
LABEL_30:
            uint64_t result = xmlRegAtomAddRange(v14, v12, v13, 2, v15, v16, 0LL);
            goto LABEL_55;
          }

          *(void *)(v1 + 8) = v11;
          unsigned int v17 = *v11;
          if (v17 > 0x5B)
          {
            if (v17 == 93) {
              goto LABEL_42;
            }
            if (v17 == 92)
            {
              *(void *)(v1 + 8) = v10 + 2;
              unsigned int v16 = v10[2];
              if (v16 > 0x71)
              {
                if (v16 - 123 >= 3)
                {
                  if (v16 == 116)
                  {
                    unsigned int v16 = 9;
                  }

                  else
                  {
                    if (v16 != 114)
                    {
LABEL_49:
                      *(_DWORD *)(v1 + 16) = 1450;
                      uint64_t v7 = v1;
                      int v8 = "Invalid escape value";
                      goto LABEL_54;
                    }

                    unsigned int v16 = 13;
                  }
                }
              }

              else if (v16 - 40 > 0x36 || ((1LL << (v16 - 40)) & 0x7800000080006FLL) == 0)
              {
                if (v16 != 110) {
                  goto LABEL_49;
                }
                unsigned int v16 = 10;
              }

              leuint64_t n = 1;
              goto LABEL_52;
            }
          }

          else if (!*v11 || v17 == 91)
          {
LABEL_42:
            *(_DWORD *)(v1 + 16) = 1450;
            uint64_t v7 = v1;
            int v8 = "Expecting the end of a char range";
            goto LABEL_54;
          }

          unsigned int v16 = xmlStringCurrentChar(0LL, v11, &len);
LABEL_52:
          if ((int)v16 < (int)v5)
          {
            *(_DWORD *)(v1 + 16) = 1450;
            uint64_t v7 = v1;
            int v8 = "End of range is before start of range";
            goto LABEL_54;
          }

          *(void *)(v1 + 8) += len;
          uint64_t v12 = *(void *)(v1 + 48);
          int v13 = *(_DWORD *)(v1 + 20);
          uint64_t v14 = v1;
          int v15 = v5;
          goto LABEL_30;
        }

        if (v4 != 93)
        {
LABEL_7:
          uint64_t result = xmlStringCurrentChar(0LL, v2, &len);
          unsigned int v5 = result;
          int v6 = *(unsigned __int8 **)(v1 + 8);
          goto LABEL_23;
        }

uint64_t xmlRegAtomAddRange(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7)
{
  if (!a2)
  {
    *(_DWORD *)(a1 + 16) = 1450;
    unsigned int v16 = "add range: atom is NULL";
    return xmlRegexpErrCompile(a1, (uint64_t)v16);
  }

  if (*(_DWORD *)(a2 + 4) != 3)
  {
    *(_DWORD *)(a1 + 16) = 1450;
    unsigned int v16 = "add range: atom is not ranges";
    return xmlRegexpErrCompile(a1, (uint64_t)v16);
  }

  uint64_t v14 = *(int *)(a2 + 72);
  if ((_DWORD)v14)
  {
    if (*(_DWORD *)(a2 + 76) >= (int)v14)
    {
      *(_DWORD *)(a2 + 72) = 2 * v14;
      int v15 = xmlRealloc(*(void **)(a2 + 80), 16 * v14);
      if (!v15)
      {
        uint64_t result = xmlRegexpErrMemory(a1, (uint64_t)"adding ranges");
        *(int *)(a2 + 72) /= 2;
        return result;
      }

      *(void *)(a2 + 80) = v15;
    }
  }

  else
  {
    *(_DWORD *)(a2 + 72) = 4;
    int v18 = xmlMalloc(0x20uLL);
    *(void *)(a2 + 80) = v18;
    if (!v18)
    {
      uint64_t result = xmlRegexpErrMemory(a1, (uint64_t)"adding ranges");
      *(_DWORD *)(a2 + 72) = 0;
      return result;
    }
  }

  uint64_t result = (uint64_t)xmlMalloc(0x18uLL);
  if (!result) {
    return xmlRegexpErrMemory(a1, (uint64_t)"allocating range");
  }
  *(_DWORD *)uint64_t result = a3;
  *(_DWORD *)(result + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = a4;
  *(_DWORD *)(result + 8) = a5;
  *(_DWORD *)(result + 12) = a6;
  *(void *)(result + 16) = a7;
  uint64_t v19 = *(void *)(a2 + 80);
  uint64_t v20 = *(int *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = v20 + 1;
  *(void *)(v19 + 8 * v20) = result;
  return result;
}

void *xmlFAParseCharProp(void *result)
{
  uint64_t v1 = (uint64_t)result;
  uint64_t v2 = result[1];
  switch(*(_BYTE *)v2)
  {
    case 'C':
      uint64_t v3 = 0LL;
      result[1] = v2 + 1;
      unsigned int v4 = *(unsigned __int8 *)(v2 + 1);
      int v5 = 131;
      if (v4 > 0x6D)
      {
        if (v4 == 110)
        {
          uint64_t v3 = 0LL;
          result[1] = v2 + 2;
          int v5 = 135;
        }

        else if (v4 == 111)
        {
          uint64_t v3 = 0LL;
          result[1] = v2 + 2;
          int v5 = 134;
        }
      }

      else if (v4 == 99)
      {
        uint64_t v3 = 0LL;
        result[1] = v2 + 2;
        int v5 = 132;
      }

      else if (v4 == 102)
      {
        uint64_t v3 = 0LL;
        result[1] = v2 + 2;
        int v5 = 133;
      }

      goto LABEL_71;
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'J':
    case 'K':
    case 'O':
    case 'Q':
    case 'R':
      goto LABEL_11;
    case 'I':
      result[1] = v2 + 1;
      if (*(_BYTE *)(v2 + 1) != 115)
      {
        *((_DWORD *)result + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 1450;
        uint64_t v7 = "IsXXXX expected";
        return (void *)xmlRegexpErrCompile((uint64_t)result, (uint64_t)v7);
      }

      result[1] = v2 + 2;
      int v8 = *(unsigned __int8 *)(v2 + 2);
      if ((v8 & 0xFFFFFFDF) - 65 > 0x19 && (v8 != 45 ? (BOOL v9 = (v8 - 48) >= 0xA) : (BOOL v9 = 0), v9))
      {
        int v15 = 0;
      }

      else
      {
        for (uint64_t i = 3LL; ; ++i)
        {
          result[1] = v2 + i;
          int v11 = *(unsigned __int8 *)(v2 + i);
        }

        int v15 = i - 2;
      }

      uint64_t result = xmlStrndup((const xmlChar *)(v2 + 2), v15);
      uint64_t v3 = (uint64_t)result;
      int v5 = 136;
      goto LABEL_71;
    case 'L':
      uint64_t v3 = 0LL;
      result[1] = v2 + 1;
      int v5 = 100;
      switch(*(_BYTE *)(v2 + 1))
      {
        case 'l':
          uint64_t v3 = 0LL;
          result[1] = v2 + 2;
          int v5 = 102;
          break;
        case 'm':
          uint64_t v3 = 0LL;
          result[1] = v2 + 2;
          int v5 = 104;
          break;
        case 'o':
          uint64_t v3 = 0LL;
          result[1] = v2 + 2;
          int v5 = 105;
          break;
        case 't':
          uint64_t v3 = 0LL;
          result[1] = v2 + 2;
          int v5 = 103;
          break;
        case 'u':
          uint64_t v3 = 0LL;
          result[1] = v2 + 2;
          int v5 = 101;
          break;
        default:
          goto LABEL_71;
      }

      goto LABEL_71;
    case 'M':
      result[1] = v2 + 1;
      int v13 = *(unsigned __int8 *)(v2 + 1);
      if (v13 == 99)
      {
        uint64_t v3 = 0LL;
        result[1] = v2 + 2;
        int v5 = 108;
      }

      else if (v13 == 101)
      {
        uint64_t v3 = 0LL;
        result[1] = v2 + 2;
        int v5 = 109;
      }

      else
      {
        uint64_t v3 = 0LL;
        if (v13 == 110)
        {
          result[1] = v2 + 2;
          int v5 = 107;
        }

        else
        {
          int v5 = 106;
        }
      }

      goto LABEL_71;
    case 'N':
      result[1] = v2 + 1;
      int v14 = *(unsigned __int8 *)(v2 + 1);
      if (v14 == 111)
      {
        uint64_t v3 = 0LL;
        result[1] = v2 + 2;
        int v5 = 113;
      }

      else if (v14 == 108)
      {
        uint64_t v3 = 0LL;
        result[1] = v2 + 2;
        int v5 = 112;
      }

      else
      {
        uint64_t v3 = 0LL;
        if (v14 == 100)
        {
          result[1] = v2 + 2;
          int v5 = 111;
        }

        else
        {
          int v5 = 110;
        }
      }

      goto LABEL_71;
    case 'P':
      uint64_t v3 = 0LL;
      result[1] = v2 + 1;
      int v5 = 114;
      switch(*(_BYTE *)(v2 + 1))
      {
        case 'c':
          uint64_t v3 = 0LL;
          result[1] = v2 + 2;
          int v5 = 115;
          break;
        case 'd':
          uint64_t v3 = 0LL;
          result[1] = v2 + 2;
          int v5 = 116;
          break;
        case 'e':
          uint64_t v3 = 0LL;
          result[1] = v2 + 2;
          int v5 = 118;
          break;
        case 'f':
          uint64_t v3 = 0LL;
          result[1] = v2 + 2;
          int v5 = 120;
          break;
        case 'i':
          uint64_t v3 = 0LL;
          result[1] = v2 + 2;
          int v5 = 119;
          break;
        case 'o':
          uint64_t v3 = 0LL;
          result[1] = v2 + 2;
          int v5 = 121;
          break;
        case 's':
          uint64_t v3 = 0LL;
          result[1] = v2 + 2;
          int v5 = 117;
          break;
        default:
          goto LABEL_71;
      }

      goto LABEL_71;
    case 'S':
      uint64_t v3 = 0LL;
      result[1] = v2 + 1;
      int v5 = 126;
      switch(((*(_BYTE *)(v2 + 1) - 99) >> 1) | ((*(_BYTE *)(v2 + 1) - 99) << 7))
      {
        case 0:
          uint64_t v3 = 0LL;
          result[1] = v2 + 2;
          int v5 = 128;
          break;
        case 4:
          uint64_t v3 = 0LL;
          result[1] = v2 + 2;
          int v5 = 129;
          break;
        case 5:
          uint64_t v3 = 0LL;
          result[1] = v2 + 2;
          int v5 = 127;
          break;
        case 6:
          uint64_t v3 = 0LL;
          result[1] = v2 + 2;
          int v5 = 130;
          break;
        default:
          goto LABEL_71;
      }

      goto LABEL_71;
    default:
      if (*(_BYTE *)v2 == 90)
      {
        result[1] = v2 + 1;
        int v6 = *(unsigned __int8 *)(v2 + 1);
        if (v6 == 108)
        {
          uint64_t v3 = 0LL;
          result[1] = v2 + 2;
          int v5 = 124;
        }

        else if (v6 == 112)
        {
          uint64_t v3 = 0LL;
          result[1] = v2 + 2;
          int v5 = 125;
        }

        else
        {
          uint64_t v3 = 0LL;
          if (v6 == 115)
          {
            result[1] = v2 + 2;
            int v5 = 123;
          }

          else
          {
            int v5 = 122;
          }
        }

uint64_t xmlFAParseQuantExact(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 **)(a1 + 8);
  int v2 = *v1;
  unsigned int v3 = v2 - 58;
  if ((v2 - 58) >= 0xFFFFFFF6)
  {
    int v5 = 0;
    int v4 = 0;
    int v6 = v1 + 1;
    do
    {
      int v7 = -2147483601 - v2;
      int v8 = v2 - 48;
      if (10 * v4 > v7) {
        int v8 = 0;
      }
      int v9 = v8 + 10 * v4;
      if (10 * v4 > v7) {
        int v5 = 1;
      }
      if (v4 > 214748364) {
        int v5 = 1;
      }
      else {
        int v4 = v9;
      }
      *(void *)(a1 + 8) = v6;
      int v10 = *v6++;
      int v2 = v10;
    }

    while ((v10 - 48) < 0xA);
  }

  else
  {
    int v4 = 0;
    int v5 = 0;
  }

  if (v5 != 1 && v3 >= 0xFFFFFFF6) {
    return v4;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t xmlFAReduceEpsilonTransitions(uint64_t result, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v4 = *(void *)(result + 80);
  int v5 = *(_DWORD **)(v4 + 8LL * a2);
  if (v5)
  {
    uint64_t v6 = *(void *)(v4 + 8LL * a3);
    if (v6)
    {
      if ((*(_DWORD *)(v6 + 4) - 1) >= 2)
      {
        uint64_t v9 = result;
        *(_DWORD *)(v6 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 2;
        if (*(_DWORD *)v6 == 2) {
          _DWORD *v5 = 2;
        }
        if (*(int *)(v6 + 24) >= 1)
        {
          uint64_t v10 = 0LL;
          for (uint64_t i = 0LL; i < *(int *)(v6 + 24); ++i)
          {
            uint64_t v12 = *(void *)(v6 + 32);
            uint64_t v13 = *(unsigned int *)(v12 + v10 + 8);
            if ((v13 & 0x80000000) == 0)
            {
              if (*(void *)(v12 + v10))
              {
                int v14 = *(_DWORD *)(v12 + v10 + 12);
                uint64_t v15 = *(void *)(*(void *)(v9 + 80) + 8 * v13);
                uint64_t v16 = v9;
                uint64_t v17 = (uint64_t)v5;
                uint64_t v18 = *(void *)(v12 + v10);
                if (v14 < 0) {
                  int v14 = a4;
                }
                int v19 = -1;
              }

              else
              {
                if ((_DWORD)v13 == (_DWORD)a2) {
                  goto LABEL_14;
                }
                int v19 = *(_DWORD *)(v12 + v10 + 16);
                if (v19 < 0)
                {
                  uint64_t result = xmlFAReduceEpsilonTransitions(v9, a2);
                  goto LABEL_14;
                }

                uint64_t v15 = *(void *)(*(void *)(v9 + 80) + 8 * v13);
                uint64_t v16 = v9;
                uint64_t v17 = (uint64_t)v5;
                uint64_t v18 = 0LL;
                int v14 = -1;
              }

              uint64_t result = xmlRegStateAddTrans(v16, v17, v18, v15, v14, v19);
            }

void *xmlRegCalloc2(unint64_t a1, unint64_t a2, unint64_t a3)
{
  if (0xFFFFFFFFFFFFFFFFLL / a2 / a3 < a1) {
    return 0LL;
  }
  size_t v4 = a2 * a1 * a3;
  int v5 = xmlMalloc(v4);
  unsigned int v3 = v5;
  if (v5) {
    bzero(v5, v4);
  }
  return v3;
}

uint64_t xmlRegCheckCharacter(uint64_t a1, unsigned int code)
{
  if ((int)code > 255)
  {
    if (code - 0x10000 >= 0x100000 && code >> 11 >= 0x1B && (code - 57344) >> 1 > 0xFFE) {
      return 0xFFFFFFFFLL;
    }
  }

  else if ((int)code <= 31)
  {
    uint64_t v4 = 0xFFFFFFFFLL;
    if (code > 0xD || ((1 << code) & 0x2600) == 0) {
      return v4;
    }
  }

  int v5 = *(_DWORD *)(a1 + 4);
  if ((v5 - 100) >= 0x25)
  {
    uint64_t v4 = 0xFFFFFFFFLL;
    switch(v5)
    {
      case 1:
      case 4:
        return v4;
      case 2:
        return *(_DWORD *)(a1 + 44) == code;
      case 3:
        uint64_t v8 = 0LL;
        uint64_t v4 = 0LL;
        break;
      case 5:
        puts("TODO: XML_REGEXP_STRING");
        return v4;
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
        goto LABEL_12;
      default:
        return 0LL;
    }

    while (1)
    {
      uint64_t v9 = *(void *)(*(void *)(a1 + 80) + 8 * v8);
      if (*(_DWORD *)v9)
      {
        if (*(_DWORD *)v9 == 2)
        {
          if (xmlRegCheckCharacterRange( *(_DWORD *)(v9 + 4),  code,  *(_DWORD *)(v9 + 8),  *(_DWORD *)(v9 + 12),  *(char **)(v9 + 16))) {
            return 0LL;
          }
        }

        else
        {
          if (xmlRegCheckCharacterRange( *(_DWORD *)(v9 + 4),  code,  *(_DWORD *)(v9 + 8),  *(_DWORD *)(v9 + 12),  *(char **)(v9 + 16))) {
            return 0LL;
          }
          uint64_t v4 = 1LL;
        }
      }

      else if (xmlRegCheckCharacterRange( *(_DWORD *)(v9 + 4),  code,  *(_DWORD *)(v9 + 8),  *(_DWORD *)(v9 + 12),  *(char **)(v9 + 16)))
      {
        uint64_t v4 = 1LL;
      }

      else
      {
        uint64_t v4 = v4;
      }
    }
  }

uint64_t xmlRegCheckCharacterRange(int a1, int code, int a3, int a4, char *block)
{
  uint64_t v6 = 0LL;
  switch(a1)
  {
    case 100:
      return xmlUCSIsCatL(code);
    case 101:
      return xmlUCSIsCatLu(code);
    case 102:
      return xmlUCSIsCatLl(code);
    case 103:
      return xmlUCSIsCatLt(code);
    case 104:
      return xmlUCSIsCatLm(code);
    case 105:
      return xmlUCSIsCatLo(code);
    case 106:
      return xmlUCSIsCatM(code);
    case 107:
      return xmlUCSIsCatMn(code);
    case 108:
      return xmlUCSIsCatMc(code);
    case 109:
      return xmlUCSIsCatMe(code);
    case 110:
      return xmlUCSIsCatN(code);
    case 111:
      return xmlUCSIsCatNd(code);
    case 112:
      return xmlUCSIsCatNl(code);
    case 113:
      return xmlUCSIsCatNo(code);
    case 114:
      return xmlUCSIsCatP(code);
    case 115:
      return xmlUCSIsCatPc(code);
    case 116:
      return xmlUCSIsCatPd(code);
    case 117:
      return xmlUCSIsCatPs(code);
    case 118:
      return xmlUCSIsCatPe(code);
    case 119:
      return xmlUCSIsCatPi(code);
    case 120:
      return xmlUCSIsCatPf(code);
    case 121:
      return xmlUCSIsCatPo(code);
    case 122:
      return xmlUCSIsCatZ(code);
    case 123:
      return xmlUCSIsCatZs(code);
    case 124:
      return xmlUCSIsCatZl(code);
    case 125:
      return xmlUCSIsCatZp(code);
    case 126:
      return xmlUCSIsCatS(code);
    case 127:
      return xmlUCSIsCatSm(code);
    case 128:
      return xmlUCSIsCatSc(code);
    case 129:
      return xmlUCSIsCatSk(code);
    case 130:
      return xmlUCSIsCatSo(code);
    case 131:
      return xmlUCSIsCatC(code);
    case 132:
      return xmlUCSIsCatCc(code);
    case 133:
      return xmlUCSIsCatCf(code);
    case 134:
      return xmlUCSIsCatCo(code);
    case 135:
      return v6;
    case 136:
      return xmlUCSIsBlock(code, block);
    default:
      int v8 = a1 - 1;
      uint64_t result = 0xFFFFFFFFLL;
      switch(v8)
      {
        case 0:
        case 2:
        case 3:
        case 4:
          return result;
        case 1:
          return code >= a3 && code <= a4;
        case 5:
          return code != 10 && code != 13;
        case 6:
          goto LABEL_54;
        case 7:
          LODWORD(v6) = 1;
LABEL_54:
          if (code <= 0xD)
          {
            LODWORD(result) = 1;
            if (((1 << code) & 0x2600) != 0) {
              goto LABEL_97;
            }
          }

          BOOL v12 = code == 32;
          goto LABEL_94;
        case 8:
          goto LABEL_58;
        case 9:
          LODWORD(v6) = 1;
LABEL_58:
          if (code > 255)
          {
            if (xmlCharInRange(code, &xmlIsBaseCharGroup)) {
              goto LABEL_85;
            }
            LODWORD(result) = 1;
          }

          else
          {
            LODWORD(result) = 1;
            if ((code - 192) < 0x17
              || (code & 0xFFFFFFDF) - 65 < 0x1A
              || code == 95
              || code > 247
              || (code - 216) < 0x1F)
            {
              goto LABEL_97;
            }
          }

          BOOL v12 = code == 58;
          goto LABEL_94;
        case 10:
          goto LABEL_66;
        case 11:
          LODWORD(v6) = 1;
LABEL_66:
          if (code > 255)
          {
            if (xmlCharInRange(code, &xmlIsBaseCharGroup)) {
              goto LABEL_85;
            }
            LODWORD(result) = 1;
            if (xmlCharInRange(code, &xmlIsDigitGroup))
            {
LABEL_85:
              LODWORD(result) = 1;
              goto LABEL_97;
            }
          }

          else
          {
            LODWORD(result) = 1;
            if ((code - 192) < 0x17
              || (code & 0xFFFFFFDF) - 65 < 0x1A
              || (code - 48) < 0xA
              || code > 247
              || (code - 216) < 0x1F)
            {
              goto LABEL_97;
            }
          }

          if (code < 256)
          {
            BOOL v12 = code == 183;
LABEL_94:
            LODWORD(result) = v12;
            goto LABEL_97;
          }

          if (xmlCharInRange(code, &xmlIsCombiningGroup)) {
            goto LABEL_85;
          }
          LODWORD(result) = xmlCharInRange(code, &xmlIsExtenderGroup) != 0;
LABEL_97:
          if ((_DWORD)v6) {
            return (_DWORD)result == 0;
          }
          else {
            return result;
          }
        case 12:
          goto LABEL_74;
        case 13:
          LODWORD(v6) = 1;
LABEL_74:
          LODWORD(result) = xmlUCSIsCatNd(code);
          goto LABEL_97;
        case 14:
          LODWORD(v6) = 1;
          goto LABEL_76;
        case 15:
LABEL_76:
          LODWORD(result) = xmlUCSIsCatP(code);
          if (!(_DWORD)result)
          {
            LODWORD(result) = xmlUCSIsCatZ(code);
            if (!(_DWORD)result) {
              LODWORD(result) = xmlUCSIsCatC(code);
            }
          }

          goto LABEL_97;
        default:
          return v6;
      }
  }

uint64_t xmlFARecurseDeterminism(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 1LL;
  }
  if (*(_DWORD *)(a2 + 8) == 2) {
    return 1LL;
  }
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  uint64_t v5 = 0LL;
  uint64_t v6 = 24 * v3;
  uint64_t v7 = 1LL;
  do
  {
    uint64_t v8 = *(void *)(a2 + 32);
    if (!*(void *)(v8 + v5))
    {
      uint64_t v9 = *(unsigned int *)(v8 + v5 + 8);
      if ((v9 & 0x80000000) == 0)
      {
        *(_DWORD *)(a2 + 8) = 2;
        else {
          uint64_t v7 = 0LL;
        }
      }
    }

    v5 += 24LL;
  }

  while (v6 != v5);
  return v7;
}

uint64_t xmlFAFinishRecurseDeterminism(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    if (*(_DWORD *)(a2 + 8) == 2)
    {
      *(_DWORD *)(a2 + 8) = 0;
      uint64_t v3 = *(unsigned int *)(a2 + 24);
      if ((int)v3 >= 1)
      {
        uint64_t v4 = result;
        uint64_t v5 = 0LL;
        uint64_t v6 = 24 * v3;
        do
        {
          uint64_t v7 = *(void *)(a2 + 32);
          if (!*(void *)(v7 + v5))
          {
            uint64_t v8 = *(unsigned int *)(v7 + v5 + 8);
            if ((v8 & 0x80000000) == 0) {
              uint64_t result = xmlFAFinishRecurseDeterminism(v4, *(void *)(*(void *)(v4 + 80) + 8 * v8));
            }
          }

          v5 += 24LL;
        }

        while (v6 != v5);
      }
    }
  }

  return result;
}

uint64_t xmlRegCopyAtom(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = xmlMalloc(0x60uLL);
  uint64_t v5 = (uint64_t)v4;
  if (v4)
  {
    v4[4] = 0u;
    v4[5] = 0u;
    v4[2] = 0u;
    v4[3] = 0u;
    *uint64_t v4 = 0u;
    v4[1] = 0u;
    *(_OWORD *)((char *)v4 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = *(_OWORD *)(a2 + 4);
    uint64_t v6 = *(unsigned int *)(a2 + 76);
    if ((int)v6 >= 1)
    {
      uint64_t v7 = xmlMalloc(8 * v6);
      *(void *)(v5 + 80) = v7;
      if (v7)
      {
        if (*(int *)(a2 + 76) >= 1)
        {
          uint64_t v8 = 0LL;
          do
          {
            uint64_t v9 = *(__int128 **)(*(void *)(a2 + 80) + 8 * v8);
            if (v9)
            {
              __int128 v16 = *v9;
              uint64_t v10 = xmlMalloc(0x18uLL);
              int v11 = v10;
              if (!v10)
              {
                xmlRegexpErrMemory(a1, (uint64_t)"allocating range");
                goto LABEL_15;
              }

              _OWORD *v10 = v16;
              BOOL v12 = (const xmlChar *)*((void *)v9 + 2);
              if (!v12) {
                goto LABEL_15;
              }
              uint64_t v13 = xmlStrdup(v12);
              v11[2] = v13;
              if (v13) {
                goto LABEL_15;
              }
              xmlRegexpErrMemory(a1, (uint64_t)"allocating range");
              int v14 = (void *)v11[2];
              if (v14) {
                xmlFree(v14);
              }
              xmlFree(v11);
            }

            int v11 = 0LL;
LABEL_15:
            *(void *)(*(void *)(v5 + 80) + 8 * v8) = v11;
            if (!*(void *)(*(void *)(v5 + 80) + 8 * v8)) {
              goto LABEL_20;
            }
            *(_DWORD *)(v5 + 76) = ++v8;
          }

          while (v8 < *(int *)(a2 + 76));
        }
      }

      else
      {
        xmlRegexpErrMemory(a1, (uint64_t)"copying atom");
LABEL_20:
        xmlRegFreeAtom(v5);
        return 0LL;
      }
    }
  }

  else
  {
    xmlRegexpErrMemory(a1, (uint64_t)"copying atom");
  }

  return v5;
}

int xmlIsXHTML(const xmlChar *systemID, const xmlChar *publicID)
{
  return publicID
      && (xmlStrEqual(publicID, (const xmlChar *)"-//W3C//DTD XHTML 1.0 Strict//EN")
       || xmlStrEqual(publicID, (const xmlChar *)"-//W3C//DTD XHTML 1.0 Frameset//EN")
       || xmlStrEqual(publicID, (const xmlChar *)"-//W3C//DTD XHTML 1.0 Transitional//EN"))
      || systemID
      && (xmlStrEqual(systemID, (const xmlChar *)"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd")
       || xmlStrEqual(systemID, (const xmlChar *)"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd")
       || xmlStrEqual(systemID, (const xmlChar *)"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"));
}

xmlBuffer *xmlBufDumpNotationTable(uint64x2_t *a1, xmlNotationTable *a2)
{
  uint64_t result = xmlBufferCreate();
  if (result)
  {
    uint64_t v5 = result;
    xmlDumpNotationTable(result, a2);
    return (xmlBuffer *)xmlBufMergeBuffer(a1, v5);
  }

  return result;
}

xmlBuffer *xmlBufDumpElementDecl(uint64x2_t *a1, xmlElement *a2)
{
  uint64_t result = xmlBufferCreate();
  if (result)
  {
    uint64_t v5 = result;
    xmlDumpElementDecl(result, a2);
    return (xmlBuffer *)xmlBufMergeBuffer(a1, v5);
  }

  return result;
}

xmlBuffer *xmlBufDumpAttributeDecl(uint64x2_t *a1, xmlAttribute *a2)
{
  uint64_t result = xmlBufferCreate();
  if (result)
  {
    uint64_t v5 = result;
    xmlDumpAttributeDecl(result, a2);
    return (xmlBuffer *)xmlBufMergeBuffer(a1, v5);
  }

  return result;
}

xmlBuffer *xmlBufDumpEntityDecl(uint64x2_t *a1, xmlEntity *a2)
{
  uint64_t result = xmlBufferCreate();
  if (result)
  {
    uint64_t v5 = result;
    xmlDumpEntityDecl(result, a2);
    return (xmlBuffer *)xmlBufMergeBuffer(a1, v5);
  }

  return result;
}

uint64_t xmlNsListDumpOutput(uint64_t result, void *a2)
{
  if (a2)
  {
    int v2 = a2;
    uint64_t v3 = result;
    do
    {
      uint64_t result = xmlNsDumpOutput(v3, (uint64_t)v2, 0LL);
      int v2 = (void *)*v2;
    }

    while (v2);
  }

  return result;
}

uint64_t xmlNsDumpOutput(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    if (a2)
    {
      if (*(_DWORD *)(a2 + 8) == 18)
      {
        if (*(void *)(a2 + 16))
        {
          uint64_t v5 = result;
          uint64_t result = xmlStrEqual(*(const xmlChar **)(a2 + 24), (const xmlChar *)"xml");
          if (!(_DWORD)result)
          {
            if (a3 && *(_DWORD *)(a3 + 56) == 2) {
              xmlOutputBufferWriteWSNonSig((xmlBufPtr)a3, 2);
            }
            else {
              xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, " ");
            }
            if (*(void *)(a2 + 24))
            {
              xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 6, "xmlns:");
              xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, *(const char **)(a2 + 24));
            }

            else
            {
              xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 5, "xmlns");
            }

            xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, "=");
            return xmlBufWriteQuotedString(*(uint64x2_t **)(v5 + 32), *(xmlChar **)(a2 + 16));
          }
        }
      }
    }
  }

  return result;
}

xmlSaveCtxtPtr xmlSaveToFd(int fd, const char *encoding, int options)
{
  uint64_t v4 = xmlNewSaveCtxt(encoding, options);
  uint64_t v5 = v4;
  if (v4)
  {
    xmlOutputBufferPtr v6 = xmlOutputBufferCreateFd(fd, *((xmlCharEncodingHandlerPtr *)v4 + 4));
    *((void *)v5 + 5) = v6;
    if (!v6)
    {
      xmlCharEncCloseFunc(*((xmlCharEncodingHandler **)v5 + 4));
      xmlFreeSaveCtxt(v5);
      return 0LL;
    }
  }

  return (xmlSaveCtxtPtr)v5;
}

int *xmlNewSaveCtxt(const char *a1, int a2)
{
  uint64_t v4 = (int *)xmlMalloc(0x98uLL);
  uint64_t v5 = v4;
  if (v4)
  {
    *((void *)v4 + 18) = 0LL;
    *((_OWORD *)v4 + 7) = 0u;
    *((_OWORD *)v4 + 8) = 0u;
    *((_OWORD *)v4 + 5) = 0u;
    *((_OWORD *)v4 + 6) = 0u;
    *((_OWORD *)v4 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
    *((_OWORD *)v4 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0u;
    *((_OWORD *)v4 + 1) = 0u;
    *((_OWORD *)v4 + 2) = 0u;
    *(_OWORD *)uint64_t v4 = 0u;
    if (a1)
    {
      xmlCharEncodingHandlerPtr CharEncodingHandler = xmlFindCharEncodingHandler(a1);
      *((void *)v5 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = CharEncodingHandler;
      if (!CharEncodingHandler)
      {
        __xmlSimpleError(7, 1403, 0, (uint64_t)"unknown encoding %s\n", (uint64_t)a1);
        xmlFreeSaveCtxt(v5);
        return 0LL;
      }

      *((void *)v5 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = xmlStrdup((const xmlChar *)a1);
      *((void *)v5 + 17) = 0LL;
    }

    xmlSaveCtxtInit(v5);
    if ((((a2 & 4) == 0) & ((v5[12] & 4u) >> 2)) != 0) {
      int v7 = a2 | 4;
    }
    else {
      int v7 = a2;
    }
    v5[12] = v7;
    if ((v7 & 1) != 0)
    {
      int v8 = 1;
      goto LABEL_13;
    }

    if ((v7 & 0x80) != 0)
    {
      int v8 = 2;
LABEL_13:
      v5[14] = v8;
    }
  }

  else
  {
    __xmlSimpleError(7, 2, 0, 0LL, (uint64_t)"creating saving context");
  }

  return v5;
}

void xmlFreeSaveCtxt(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2) {
    xmlFree(v2);
  }
  uint64_t v3 = (xmlOutputBuffer *)a1[5];
  if (v3) {
    xmlOutputBufferClose(v3);
  }
  xmlFree(a1);
}

xmlSaveCtxtPtr xmlSaveToFilename(const char *filename, const char *encoding, int options)
{
  uint64_t v4 = xmlNewSaveCtxt(encoding, options);
  uint64_t v5 = v4;
  if (v4)
  {
    xmlOutputBufferPtr v6 = xmlOutputBufferCreateFilename(filename, *((xmlCharEncodingHandlerPtr *)v4 + 4), 0);
    *((void *)v5 + 5) = v6;
    if (!v6)
    {
      xmlCharEncCloseFunc(*((xmlCharEncodingHandler **)v5 + 4));
      xmlFreeSaveCtxt(v5);
      return 0LL;
    }
  }

  return (xmlSaveCtxtPtr)v5;
}

xmlSaveCtxtPtr xmlSaveToBuffer(xmlBufferPtr buffer, const char *encoding, int options)
{
  uint64_t v4 = xmlNewSaveCtxt(encoding, options);
  uint64_t v5 = v4;
  if (v4)
  {
    xmlOutputBufferPtr v6 = xmlOutputBufferCreateBuffer(buffer, *((xmlCharEncodingHandlerPtr *)v4 + 4));
    *((void *)v5 + 5) = v6;
    if (!v6)
    {
      xmlCharEncCloseFunc(*((xmlCharEncodingHandler **)v5 + 4));
      xmlFreeSaveCtxt(v5);
      return 0LL;
    }
  }

  return (xmlSaveCtxtPtr)v5;
}

xmlSaveCtxtPtr xmlSaveToIO( xmlOutputWriteCallback iowrite, xmlOutputCloseCallback ioclose, void *ioctx, const char *encoding, int options)
{
  int v8 = xmlNewSaveCtxt(encoding, options);
  uint64_t v9 = v8;
  if (v8)
  {
    xmlOutputBufferPtr IO = xmlOutputBufferCreateIO(iowrite, ioclose, ioctx, *((xmlCharEncodingHandlerPtr *)v8 + 4));
    *((void *)v9 + 5) = IO;
    if (!IO)
    {
      xmlCharEncCloseFunc(*((xmlCharEncodingHandler **)v9 + 4));
      xmlFreeSaveCtxt(v9);
      return 0LL;
    }
  }

  return (xmlSaveCtxtPtr)v9;
}

uint64_t xmlSaveDoc(xmlSaveCtxtPtr ctxt, xmlDocPtr doc)
{
  uint64_t result = -1LL;
  if (ctxt)
  {
    if (doc) {
      return (int)xmlDocContentDumpOutput((uint64_t)ctxt, (uint64_t)doc);
    }
  }

  return result;
}

uint64_t xmlDocContentDumpOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 112);
  uint64_t v5 = *(char **)(a1 + 24);
  __int128 v25 = *(_OWORD *)(a1 + 136);
  uint64_t v6 = *(void *)(a1 + 40);
  xmlInitParser();
  int v7 = *(_DWORD *)(a2 + 8);
  if ((v7 | 4) != 0xD) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v8 = *(void *)(a1 + 24);
  if (v8)
  {
    *(void *)(a2 + 112) = v8;
    MetaEncoding = v5;
  }

  else if (*(void *)(a2 + 112))
  {
    MetaEncoding = *(char **)(a2 + 112);
  }

  else
  {
    MetaEncoding = v5;
  }

  if (((*(_DWORD *)(a1 + 48) & 0x30) != 0 || v7 != 13) && (*(_DWORD *)(a1 + 48) & 0x40) == 0)
  {
    if (v7 != 9 && (*(_DWORD *)(a1 + 48) & 0x30) == 0)
    {
      uint64_t result = 0LL;
LABEL_67:
      *(void *)(a2 + 112) = v4;
      return result;
    }

    xmlCharEncoding v13 = xmlParseCharEncoding(MetaEncoding);
    int v14 = 0;
    if (MetaEncoding && !v5)
    {
      if (*(void *)(v6 + 24) || *(void *)(v6 + 40) || (*(_BYTE *)(a1 + 48) & 2) != 0)
      {
        int v14 = 0;
      }

      else
      {
        if (v13 <= XML_CHAR_ENCODING_ASCII && ((1 << v13) & 0x400003) != 0)
        {
          int v14 = 0;
        }

        else
        {
          if ((xmlSaveSwitchEncoding(a1, MetaEncoding) & 0x80000000) != 0)
          {
LABEL_70:
            uint64_t result = 0xFFFFFFFFLL;
            goto LABEL_67;
          }

          int v14 = 1;
        }
      }
    }

    unsigned int v15 = *(_DWORD *)(a1 + 48);
    if ((v15 & 2) != 0)
    {
LABEL_54:
      int v21 = (v15 >> 4) & 1;
      if ((v15 & 8) == 0)
      {
        xmlDtdPtr IntSubset = xmlGetIntSubset((const xmlDoc *)a2);
        if (IntSubset)
        {
          int IsXHTML = xmlIsXHTML(IntSubset->SystemID, IntSubset->ExternalID);
          int v21 = IsXHTML & ~(IsXHTML >> 31);
        }
      }

      for (uint64_t i = *(void *)(a2 + 24); i; uint64_t i = *(void *)(i + 48))
      {
        *(_DWORD *)(a1 + 52) = 0;
        if (v21) {
          xhtmlNodeDumpOutput(a1, i);
        }
        else {
          xmlNodeDumpOutputInternal(a1, i);
        }
      }

      uint64_t result = 0LL;
      if (v14 && !v5)
      {
        xmlSaveClearEncoding(a1);
        uint64_t result = 0LL;
        *(_OWORD *)(a1 + 136) = v25;
      }

      goto LABEL_67;
    }

    xmlOutputBufferWrite((xmlOutputBufferPtr)v6, 14, "<?xml version=");
    __int128 v16 = *(xmlChar **)(a2 + 104);
    if (v16)
    {
      xmlBufWriteQuotedString(*(uint64x2_t **)(v6 + 32), v16);
      if (!MetaEncoding) {
        goto LABEL_46;
      }
    }

    else
    {
      xmlOutputBufferWrite((xmlOutputBufferPtr)v6, 5, "1.0");
      if (!MetaEncoding)
      {
LABEL_46:
        int v17 = *(_DWORD *)(a2 + 76);
        if (v17 == 1)
        {
          uint64_t v18 = " standalone=yes";
          int v19 = (xmlOutputBuffer *)v6;
          int v20 = 17;
        }

        else
        {
          if (v17)
          {
LABEL_53:
            xmlOutputBufferWrite((xmlOutputBufferPtr)v6, 3, "?>\n");
            unsigned int v15 = *(_DWORD *)(a1 + 48);
            goto LABEL_54;
          }

          uint64_t v18 = " standalone=no";
          int v19 = (xmlOutputBuffer *)v6;
          int v20 = 16;
        }

        xmlOutputBufferWrite(v19, v20, v18);
        goto LABEL_53;
      }
    }

    xmlOutputBufferWrite((xmlOutputBufferPtr)v6, 10, " encoding=");
    xmlBufWriteQuotedString(*(uint64x2_t **)(v6 + 32), (xmlChar *)MetaEncoding);
    goto LABEL_46;
  }

  if (MetaEncoding) {
    htmlSetMetaEncoding((htmlDocPtr)a2, (const xmlChar *)MetaEncoding);
  }
  else {
    MetaEncoding = (char *)htmlGetMetaEncoding((htmlDocPtr)a2);
  }
  if (!MetaEncoding) {
    MetaEncoding = "HTML";
  }
  if (!v5
    && !*(void *)(v6 + 24)
    && !*(void *)(v6 + 40)
    && (xmlSaveSwitchEncoding(a1, MetaEncoding) & 0x80000000) != 0)
  {
    goto LABEL_70;
  }

  htmlDocContentDumpFormatOutput((xmlOutputBufferPtr)v6, (xmlDocPtr)a2, MetaEncoding, *(_DWORD *)(a1 + 48) & 1);
  uint64_t result = 0LL;
  if (*(void *)(a1 + 24)) {
    goto LABEL_67;
  }
  return result;
}

uint64_t xmlSaveTree(xmlSaveCtxtPtr ctxt, xmlNodePtr node)
{
  uint64_t result = -1LL;
  if (ctxt && node)
  {
    unsigned int v5 = *((_DWORD *)ctxt + 12);
    if ((v5 & 0x10) != 0)
    {
      xhtmlNodeDumpOutput((uint64_t)ctxt, (uint64_t)node);
      return 0LL;
    }

    if (node->type == XML_NAMESPACE_DECL || (doc = node->doc) == 0LL)
    {
      if ((v5 & 0x40) == 0)
      {
LABEL_10:
        xmlNodeDumpOutputInternal((uint64_t)ctxt, (uint64_t)node);
        return 0LL;
      }
    }

    else
    {
      BOOL v7 = doc->type == XML_HTML_DOCUMENT_NODE;
      int v8 = (v5 >> 5) & 1;
      if (!v7) {
        LOBYTE(v8) = 1;
      }
      if ((v5 & 0x40) == 0 && (v8 & 1) != 0) {
        goto LABEL_10;
      }
    }

    uint64_t v9 = (xmlChar *)*((void *)ctxt + 3);
    uint64_t v10 = (xmlOutputBuffer *)*((void *)ctxt + 5);
    xmlInitParser();
    int v11 = node->doc;
    if (v11)
    {
      encoding = v11->encoding;
      xmlCharEncoding v13 = (const xmlChar *)*((void *)ctxt + 3);
      if (v13)
      {
        v11->encoding = v13;
        MetaEncoding = v9;
      }

      else if (encoding)
      {
        MetaEncoding = (xmlChar *)v11->encoding;
      }

      else
      {
        MetaEncoding = v9;
      }

      if (MetaEncoding) {
        htmlSetMetaEncoding(v11, MetaEncoding);
      }
      else {
        MetaEncoding = (xmlChar *)htmlGetMetaEncoding(v11);
      }
    }

    else
    {
      encoding = 0LL;
      MetaEncoding = v9;
    }

    if (!MetaEncoding) {
      MetaEncoding = (xmlChar *)"HTML";
    }
    if (v9 || v10->encoder || v10->conv)
    {
      int v15 = 0;
    }

    else
    {
      int v15 = 1;
    }

    htmlNodeDumpFormatOutput(v10, v11, node, (const char *)MetaEncoding, *((_DWORD *)ctxt + 12) & 1);
    if (!v9)
    {
      if (v15) {
        xmlSaveClearEncoding((uint64_t)ctxt);
      }
    }

    if (!v11) {
      return 0LL;
    }
LABEL_35:
    uint64_t result = 0LL;
    v11->encoding = encoding;
  }

  return result;
}

uint64_t xhtmlNodeDumpOutput(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = result;
  uint64_t v4 = 0LL;
  int v84 = *(_DWORD *)(result + 56);
  uint64_t v5 = *(void *)(result + 40);
  uint64_t v6 = "\n";
  BOOL v7 = "</";
  int v8 = ">";
  uint64_t v9 = ":";
  xmlParserInputBufferPtr buf = (char *)(result + 60);
  uint64_t v10 = a2;
LABEL_2:
  while (1)
  {
    uint64_t v11 = v10;
    int v12 = *(_DWORD *)(v10 + 8);
    if (v12 != 11) {
      break;
    }
    uint64_t v10 = *(void *)(v11 + 24);
    if (!v10) {
      goto LABEL_195;
    }
  }

  switch(v12)
  {
    case 1:
      if (v11 != v2 && *(_DWORD *)(v3 + 56) == 1 && *__xmlIndentTreeOutput())
      {
        int v13 = *(_DWORD *)(v3 + 52);
        if (v13 >= *(_DWORD *)(v3 + 124)) {
          int v13 = *(_DWORD *)(v3 + 124);
        }
        xmlOutputBufferWrite((xmlOutputBufferPtr)v5, v13 * *(_DWORD *)(v3 + 128), buf);
      }

      xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, "<");
      uint64_t v14 = *(void *)(v11 + 72);
      if (v14)
      {
        int v15 = *(const char **)(v14 + 24);
        if (v15)
        {
          xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, v15);
          xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, v9);
        }
      }

      xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, *(const char **)(v11 + 16));
      for (uint64_t i = *(void **)(v11 + 96); i; uint64_t i = (void *)*i)
        xmlNsDumpOutput(*(void *)(v3 + 40), (uint64_t)i, v3);
      if (xmlStrEqual(*(const xmlChar **)(v11 + 16), (const xmlChar *)"html")
        && !*(void *)(v11 + 72)
        && !*(void *)(v11 + 96))
      {
        xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, " xmlns=http://www.w3.org/1999/xhtml");
      }

      uint64_t v17 = *(void *)(v11 + 88);
      if (!v17) {
        goto LABEL_103;
      }
      uint64_t v18 = 0LL;
      uint64_t v19 = 0LL;
      out = *(xmlOutputBuffer **)(v3 + 40);
      uint64_t v76 = 0LL;
      uint64_t v77 = *(void *)(v17 + 40);
      str = 0LL;
      while (1)
      {
        if (!*(void *)(v17 + 72))
        {
          if (xmlStrEqual(*(const xmlChar **)(v17 + 16), (const xmlChar *)"id"))
          {
            uint64_t v18 = v17;
            goto LABEL_39;
          }

          if (!*(void *)(v17 + 72))
          {
            if (xmlStrEqual(*(const xmlChar **)(v17 + 16), (const xmlChar *)"name"))
            {
              str = (char *)v17;
              goto LABEL_39;
            }

            if (!*(void *)(v17 + 72))
            {
              if (xmlStrEqual(*(const xmlChar **)(v17 + 16), (const xmlChar *)"lang"))
              {
                uint64_t v76 = v17;
                goto LABEL_39;
              }

              if (!*(void *)(v17 + 72))
              {
LABEL_29:
                uint64_t v20 = *(void *)(v17 + 24);
                if (!v20 || (int v21 = *(_BYTE **)(v20 + 80)) == 0LL || !*v21)
                {
                  if (htmlIsBooleanAttr(*(const xmlChar **)(v17 + 16)))
                  {
                    int v22 = *(xmlNode **)(v17 + 24);
                    if (v22) {
                      xmlFreeNode(v22);
                    }
                    xmlNodePtr v23 = xmlNewText(*(const xmlChar **)(v17 + 16));
                    *(void *)(v17 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v23;
                    if (v23) {
                      v23->xmlNodePtr parent = (_xmlNode *)v17;
                    }
                  }
                }

                goto LABEL_39;
              }
            }
          }
        }

        if (xmlStrEqual(*(const xmlChar **)(v17 + 16), (const xmlChar *)"lang")
          && xmlStrEqual(*(const xmlChar **)(*(void *)(v17 + 72) + 24LL), (const xmlChar *)"xml"))
        {
          uint64_t v19 = v17;
        }

        else if (!*(void *)(v17 + 72))
        {
          goto LABEL_29;
        }

LABEL_165:
          xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, v8);
          uint64_t v9 = ":";
          if (v46)
          {
            if (*(_DWORD *)(v3 + 56) == 1)
            {
              xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, v6);
              if (*__xmlIndentTreeOutput())
              {
                int v64 = *(_DWORD *)(v3 + 52);
                if (v64 < *(_DWORD *)(v3 + 124)) {
                  int v65 = v64 + 1;
                }
                else {
                  int v65 = *(_DWORD *)(v3 + 124);
                }
                xmlOutputBufferWrite((xmlOutputBufferPtr)v5, v65 * *(_DWORD *)(v3 + 128), buf);
              }
            }

            xmlOutputBufferWriteString( (xmlOutputBufferPtr)v5,  "<meta http-equiv=Content-Type content=text/html; charset=");
            unsigned int v66 = *(const char **)(v3 + 24);
            if (v66) {
              xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, v66);
            }
            else {
              xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 5, "UTF-8");
            }
            xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 4, " />");
            if (*(_DWORD *)(v3 + 56) == 1) {
              xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, v6);
            }
          }

          BOOL v7 = "</";
          xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 2, "</");
          uint64_t v67 = *(void *)(v11 + 72);
          if (v67)
          {
            BOOL v68 = *(const char **)(v67 + 24);
            if (v68)
            {
              xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, v68);
              xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, ":");
            }
          }

          xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, *(const char **)(v11 + 16));
          uint64_t result = xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, v8);
          goto LABEL_195;
        }
      }

    case 2:
      uint64_t result = xmlAttrDumpOutput(v3, v11);
      goto LABEL_195;
    case 3:
      int v24 = *(const xmlChar **)(v11 + 80);
      if (v24)
      {
        if (*(const xmlChar **)(v11 + 16) != "textnoenc" || "text" == "textnoenc") {
          uint64_t result = xmlOutputBufferWriteEscape((xmlOutputBufferPtr)v5, v24, *(xmlCharEncodingOutputFunc *)(v3 + 136));
        }
        else {
          uint64_t result = xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, (const char *)v24);
        }
      }

      goto LABEL_195;
    case 4:
      __int128 v26 = *(char **)(v11 + 80);
      if (!v26 || (int v27 = *v26, v28 = *(char **)(v11 + 80), v82 = v2, !*v26))
      {
        uint64_t result = xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 12, "<![CDATA[]]>");
        goto LABEL_195;
      }

      while (2)
      {
        if (v27 == 93)
        {
          if (v28[1] == 93)
          {
            int v29 = v9;
            uint64_t v30 = v6;
            uint64_t v31 = v8;
            int v32 = v7;
            uint64_t v33 = v28 + 2;
            if (v28[2] == 62)
            {
              uint64_t v34 = v26;
              xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 9, "<![CDATA[");
              xmlOutputBufferWrite((xmlOutputBufferPtr)v5, (_DWORD)v33 - (_DWORD)v34, v34);
              uint64_t result = xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 3, "]]>");
              __int128 v26 = v33;
              __int128 v28 = v33;
            }

            BOOL v7 = v32;
            int v8 = v31;
            uint64_t v6 = v30;
            uint64_t v9 = v29;
            uint64_t v2 = v82;
          }

          goto LABEL_66;
        }

        if (v27)
        {
LABEL_66:
          int v35 = *++v28;
          int v27 = v35;
          continue;
        }

        break;
      }

      if (v26 != v28)
      {
        strb = v26;
        xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 9, "<![CDATA[");
        xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, strb);
        uint64_t result = xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 3, "]]>");
      }

uint64_t xmlNodeDumpOutputInternal(uint64_t result, uint64_t a2)
{
  if (!a2) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t v4 = 0LL;
  uint64_t v5 = *(unsigned int *)(result + 56);
  uint64_t v6 = "\n";
  uint64_t v7 = *(void *)(result + 40);
  int v8 = "</";
  uint64_t v9 = *(void *)(a2 + 40);
  xmlParserInputBufferPtr buf = (char *)(result + 60);
  uint64_t v10 = a2;
LABEL_3:
  while (2)
  {
    while (1)
    {
      uint64_t v11 = v9;
      uint64_t v9 = v10;
      int v12 = *(_DWORD *)(v10 + 8);
      if (v12 != 11) {
        break;
      }
      if (*(void *)(v9 + 40) == v11)
      {
        uint64_t v10 = *(void *)(v9 + 24);
        if (v10) {
          continue;
        }
      }

      goto LABEL_106;
    }

    switch(v12)
    {
      case 1:
        if (v9 != a2 && *(_DWORD *)(v3 + 56) == 1 && *__xmlIndentTreeOutput())
        {
          int v13 = *(_DWORD *)(v3 + 52);
          if (v13 >= *(_DWORD *)(v3 + 124)) {
            int v13 = *(_DWORD *)(v3 + 124);
          }
          xmlOutputBufferWrite((xmlOutputBufferPtr)v7, v13 * *(_DWORD *)(v3 + 128), buf);
        }

        if (*(void *)(v9 + 40) != v11 && *(void *)(v9 + 24))
        {
          uint64_t result = xmlNodeDumpOutputInternal(v3, v9);
          goto LABEL_106;
        }

        uint64_t v29 = v5;
        xmlOutputBufferWrite((xmlOutputBufferPtr)v7, 1, "<");
        uint64_t v30 = *(void *)(v9 + 72);
        if (v30)
        {
          uint64_t v31 = *(const char **)(v30 + 24);
          if (v31)
          {
            xmlOutputBufferWriteString((xmlOutputBufferPtr)v7, v31);
            xmlOutputBufferWrite((xmlOutputBufferPtr)v7, 1, ":");
          }
        }

        xmlOutputBufferWriteString((xmlOutputBufferPtr)v7, *(const char **)(v9 + 16));
        for (uint64_t i = *(void **)(v9 + 96); i; uint64_t i = (void *)*i)
          xmlNsDumpOutput(*(void *)(v3 + 40), (uint64_t)i, v3);
        for (uint64_t j = *(void *)(v9 + 88); j; uint64_t j = *(void *)(j + 48))
          xmlAttrDumpOutput(v3, j);
        uint64_t v34 = *(void *)(v9 + 24);
        if (v34)
        {
          int v35 = *(_DWORD *)(v3 + 56);
          uint64_t v5 = v29;
          if (v35 == 2)
          {
            xmlOutputBufferWriteWSNonSig((xmlBufPtr)v3, 1);
          }

          else if (v35 == 1)
          {
            while ((*(_DWORD *)(v34 + 8) - 3) > 2)
            {
              uint64_t v34 = *(void *)(v34 + 48);
              if (!v34) {
                goto LABEL_113;
              }
            }

            *(_DWORD *)(v3 + 56) = 0;
            uint64_t v4 = v9;
          }

LABEL_113:
          uint64_t result = xmlOutputBufferWrite((xmlOutputBufferPtr)v7, 1, ">");
          if (*(_DWORD *)(v3 + 56) == 1) {
            uint64_t result = xmlOutputBufferWrite((xmlOutputBufferPtr)v7, 1, v6);
          }
          int v48 = *(_DWORD *)(v3 + 52);
          if ((v48 & 0x80000000) == 0) {
            *(_DWORD *)(v3 + 52) = v48 + 1;
          }
          uint64_t v10 = *(void *)(v9 + 24);
          continue;
        }

        int v38 = *(_DWORD *)(v3 + 56);
        if ((*(_BYTE *)(v3 + 48) & 4) != 0)
        {
          uint64_t v5 = v29;
          if (v38 == 2) {
            xmlOutputBufferWriteWSNonSig((xmlBufPtr)v3, 1);
          }
          xmlOutputBufferWrite((xmlOutputBufferPtr)v7, 3, "></");
          uint64_t v39 = *(void *)(v9 + 72);
          if (v39)
          {
            uint64_t v40 = *(const char **)(v39 + 24);
            if (v40)
            {
              xmlOutputBufferWriteString((xmlOutputBufferPtr)v7, v40);
              xmlOutputBufferWrite((xmlOutputBufferPtr)v7, 1, ":");
            }
          }

          xmlOutputBufferWriteString((xmlOutputBufferPtr)v7, *(const char **)(v9 + 16));
          if (*(_DWORD *)(v3 + 56) == 2) {
            xmlOutputBufferWriteWSNonSig((xmlBufPtr)v3, 0);
          }
          uint64_t result = xmlOutputBufferWrite((xmlOutputBufferPtr)v7, 1, ">");
        }

        else
        {
          uint64_t v5 = v29;
          if (v38 == 2) {
            xmlOutputBufferWriteWSNonSig((xmlBufPtr)v3, 0);
          }
          uint64_t result = xmlOutputBufferWrite((xmlOutputBufferPtr)v7, 2, "/>");
        }

        goto LABEL_106;
      case 2:
        uint64_t result = xmlAttrDumpOutput(v3, v9);
        goto LABEL_106;
      case 3:
        uint64_t v14 = *(const char **)(v9 + 80);
        if (v14)
        {
          if (*(const xmlChar **)(v9 + 16) == "textnoenc") {
            uint64_t result = xmlOutputBufferWriteString((xmlOutputBufferPtr)v7, v14);
          }
          else {
            uint64_t result = xmlOutputBufferWriteEscape( (xmlOutputBufferPtr)v7,  (const xmlChar *)v14,  *(xmlCharEncodingOutputFunc *)(v3 + 136));
          }
        }

        goto LABEL_106;
      case 4:
        int v15 = *(const char **)(v9 + 80);
        if (!v15 || (int v16 = *(unsigned __int8 *)v15, v17 = *(const char **)(v9 + 80), v49 = v4, !*v15))
        {
          uint64_t result = xmlOutputBufferWrite((xmlOutputBufferPtr)v7, 12, "<![CDATA[]]>");
          goto LABEL_106;
        }

        while (2)
        {
          if (v16 == 93)
          {
            if (v17[1] == 93)
            {
              uint64_t v18 = v8;
              uint64_t v19 = v6;
              uint64_t v20 = v5;
              int v21 = v17 + 2;
              if (v17[2] == 62)
              {
                int v22 = v15;
                xmlOutputBufferWrite((xmlOutputBufferPtr)v7, 9, "<![CDATA[");
                int v23 = (_DWORD)v21 - (_DWORD)v22;
                int v24 = v22;
                uint64_t v4 = v49;
                xmlOutputBufferWrite((xmlOutputBufferPtr)v7, v23, v24);
                uint64_t result = xmlOutputBufferWrite((xmlOutputBufferPtr)v7, 3, "]]>");
                int v15 = v21;
                uint64_t v17 = v21;
              }

              uint64_t v5 = v20;
              uint64_t v6 = v19;
              int v8 = v18;
            }

            goto LABEL_31;
          }

          if (v16)
          {
LABEL_31:
            int v25 = *(unsigned __int8 *)++v17;
            int v16 = v25;
            continue;
          }

          break;
        }

        if (v15 != v17)
        {
          uint64_t v36 = v15;
          xmlOutputBufferWrite((xmlOutputBufferPtr)v7, 9, "<![CDATA[");
          uint64_t v37 = v36;
          uint64_t v4 = v49;
          xmlOutputBufferWriteString((xmlOutputBufferPtr)v7, v37);
          uint64_t result = xmlOutputBufferWrite((xmlOutputBufferPtr)v7, 3, "]]>");
        }

LABEL_106:
        while (v9 != a2)
        {
          uint64_t v47 = v9;
          uint64_t v9 = v11;
          uint64_t v10 = *(void *)(v47 + 48);
          if (v10) {
            goto LABEL_3;
          }
          uint64_t v11 = *(void *)(v11 + 40);
          if (*(_DWORD *)(v9 + 8) == 1)
          {
            int v41 = *(_DWORD *)(v3 + 52);
            BOOL v42 = __OFSUB__(v41, 1);
            int v43 = v41 - 1;
            if (v43 < 0 == v42) {
              *(_DWORD *)(v3 + 52) = v43;
            }
            if (*__xmlIndentTreeOutput() && *(_DWORD *)(v3 + 56) == 1)
            {
              int v44 = *(_DWORD *)(v3 + 52);
              if (v44 >= *(_DWORD *)(v3 + 124)) {
                int v44 = *(_DWORD *)(v3 + 124);
              }
              xmlOutputBufferWrite((xmlOutputBufferPtr)v7, v44 * *(_DWORD *)(v3 + 128), buf);
            }

            xmlOutputBufferWrite((xmlOutputBufferPtr)v7, 2, v8);
            uint64_t v45 = *(void *)(v9 + 72);
            if (v45)
            {
              int v46 = *(const char **)(v45 + 24);
              if (v46)
              {
                xmlOutputBufferWriteString((xmlOutputBufferPtr)v7, v46);
                xmlOutputBufferWrite((xmlOutputBufferPtr)v7, 1, ":");
              }
            }

            xmlOutputBufferWriteString((xmlOutputBufferPtr)v7, *(const char **)(v9 + 16));
            if (*(_DWORD *)(v3 + 56) == 2) {
              xmlOutputBufferWriteWSNonSig((xmlBufPtr)v3, 0);
            }
            uint64_t result = xmlOutputBufferWrite((xmlOutputBufferPtr)v7, 1, ">");
            if (v9 == v4)
            {
              uint64_t v4 = 0LL;
              *(_DWORD *)(v3 + 56) = v5;
            }
          }
        }

        return result;
      case 5:
        xmlOutputBufferWrite((xmlOutputBufferPtr)v7, 1, "&");
        xmlOutputBufferWriteString((xmlOutputBufferPtr)v7, *(const char **)(v9 + 16));
        uint64_t result = xmlOutputBufferWrite((xmlOutputBufferPtr)v7, 1, ";");
        goto LABEL_106;
      case 7:
        if (v9 != a2 && *(_DWORD *)(v3 + 56) == 1 && *__xmlIndentTreeOutput())
        {
          int v26 = *(_DWORD *)(v3 + 52);
          if (v26 >= *(_DWORD *)(v3 + 124)) {
            int v26 = *(_DWORD *)(v3 + 124);
          }
          xmlOutputBufferWrite((xmlOutputBufferPtr)v7, v26 * *(_DWORD *)(v3 + 128), buf);
        }

        uint64_t v27 = *(void *)(v9 + 80);
        xmlOutputBufferWrite((xmlOutputBufferPtr)v7, 2, "<?");
        xmlOutputBufferWriteString((xmlOutputBufferPtr)v7, *(const char **)(v9 + 16));
        if (v27)
        {
          if (*(void *)(v9 + 80))
          {
            if (*(_DWORD *)(v3 + 56) == 2) {
              xmlOutputBufferWriteWSNonSig((xmlBufPtr)v3, 0);
            }
            else {
              xmlOutputBufferWrite((xmlOutputBufferPtr)v7, 1, " ");
            }
            xmlOutputBufferWriteString((xmlOutputBufferPtr)v7, *(const char **)(v9 + 80));
          }
        }

        else if (*(_DWORD *)(v3 + 56) == 2)
        {
          xmlOutputBufferWriteWSNonSig((xmlBufPtr)v3, 0);
        }

        uint64_t result = xmlOutputBufferWrite((xmlOutputBufferPtr)v7, 2, "?>");
        goto LABEL_106;
      case 8:
        if (v9 != a2 && *(_DWORD *)(v3 + 56) == 1)
        {
          uint64_t result = (uint64_t)__xmlIndentTreeOutput();
          if (*(_DWORD *)result)
          {
            int v28 = *(_DWORD *)(v3 + 52);
            if (v28 >= *(_DWORD *)(v3 + 124)) {
              int v28 = *(_DWORD *)(v3 + 124);
            }
            uint64_t result = xmlOutputBufferWrite((xmlOutputBufferPtr)v7, v28 * *(_DWORD *)(v3 + 128), buf);
          }
        }

        if (*(void *)(v9 + 80))
        {
          xmlOutputBufferWrite((xmlOutputBufferPtr)v7, 4, "<!--");
          xmlOutputBufferWriteString((xmlOutputBufferPtr)v7, *(const char **)(v9 + 80));
          uint64_t result = xmlOutputBufferWrite((xmlOutputBufferPtr)v7, 3, "-->");
        }

        goto LABEL_106;
      case 9:
      case 13:
        uint64_t result = xmlDocContentDumpOutput(v3, v9);
        goto LABEL_106;
      case 14:
        uint64_t result = xmlDtdDumpOutput(v3, v9);
        goto LABEL_106;
      case 15:
        uint64_t result = (uint64_t)xmlBufDumpElementDecl(*(uint64x2_t **)(v7 + 32), (xmlElement *)v9);
        goto LABEL_106;
      case 16:
        uint64_t result = (uint64_t)xmlBufDumpAttributeDecl(*(uint64x2_t **)(v7 + 32), (xmlAttribute *)v9);
        goto LABEL_106;
      case 17:
        uint64_t result = (uint64_t)xmlBufDumpEntityDecl(*(uint64x2_t **)(v7 + 32), (xmlEntity *)v9);
        goto LABEL_106;
      case 18:
        uint64_t result = xmlNsDumpOutput(*(void *)(v3 + 40), v9, v3);
        goto LABEL_106;
      default:
        goto LABEL_106;
    }
  }

  unsigned int v50 = *(void *)(v13 + 24);
  if (!v50)
  {
LABEL_172:
    uint64_t v9 = (const xmlChar *)"attributeGroup";
    goto LABEL_89;
  }

  if (*(void *)(v50 + 72)
    && xmlStrEqual(*(const xmlChar **)(v50 + 16), (const xmlChar *)"annotation")
    && xmlStrEqual( *(const xmlChar **)(*(void *)(v50 + 72) + 16LL),  (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
  {
    *(void *)(v44 + 8) = xmlSchemaParseAnnotation((_DWORD *)a1, v50, 1);
    unsigned int v50 = *(void *)(v50 + 48);
  }

  if (v17)
  {
    if (v50)
    {
      uint64_t v9 = (const xmlChar *)"attributeGroup";
      if (*(void *)(v50 + 72)
        && xmlStrEqual(*(const xmlChar **)(v50 + 16), (const xmlChar *)"simpleType")
        && xmlStrEqual( *(const xmlChar **)(*(void *)(v50 + 72) + 16LL),  (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
      {
        int v51 = a1;
        BOOL v52 = 3054;
      }

      else
      {
        int v51 = a1;
        BOOL v52 = 3033;
      }

      int v71 = v13;
      int v72 = v50;
      uint64_t v73 = "(annotation?)";
LABEL_180:
      xmlSchemaPContentErr(v51, v52, v71, v72, 0LL, (xmlChar *)v73);
      goto LABEL_89;
    }

    goto LABEL_172;
  }

  if (!v50) {
    goto LABEL_172;
  }
  uint64_t v9 = (const xmlChar *)"attributeGroup";
  if (!*(void *)(v50 + 72)
    || !xmlStrEqual(*(const xmlChar **)(v50 + 16), (const xmlChar *)"simpleType")
    || !xmlStrEqual( *(const xmlChar **)(*(void *)(v50 + 72) + 16LL),  (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
  {
    goto LABEL_179;
  }

  if (*(void *)(*(void *)(v44 + 24) + 48LL)) {
    xmlSchemaPContentErr( a1,  3055,  v13,  v50,  (xmlChar *)"The attribute 'type' and the <simpleType> child are mutually exclusive",  0LL);
  }
  else {
    *(void *)(*(void *)(v44 + 24) + 96LL) = xmlSchemaParseSimpleType(a1, a2, v50, 0LL);
  }
  unsigned int v50 = *(void *)(v50 + 48);
  if (v50)
  {
LABEL_179:
    int v51 = a1;
    BOOL v52 = 3033;
    int v71 = v13;
    int v72 = v50;
    uint64_t v73 = "(annotation?, simpleType?)";
    goto LABEL_180;
  }

int xmlSaveFlush(xmlSaveCtxtPtr ctxt)
{
  if (ctxt && (uint64_t v1 = (xmlOutputBuffer *)*((void *)ctxt + 5)) != 0LL) {
    return xmlOutputBufferFlush(v1);
  }
  else {
    return -1;
  }
}

int xmlSaveClose(xmlSaveCtxtPtr ctxt)
{
  if (!ctxt) {
    return -1;
  }
  uint64_t v2 = (xmlOutputBuffer *)*((void *)ctxt + 5);
  if (v2) {
    int v3 = xmlOutputBufferFlush(v2);
  }
  else {
    int v3 = -1;
  }
  xmlFreeSaveCtxt(ctxt);
  return v3;
}

int xmlSaveSetEscape(xmlSaveCtxtPtr ctxt, xmlCharEncodingOutputFunc escape)
{
  if (!ctxt) {
    return -1;
  }
  int result = 0;
  *((void *)ctxt + 17) = escape;
  return result;
}

int xmlSaveSetAttrEscape(xmlSaveCtxtPtr ctxt, xmlCharEncodingOutputFunc escape)
{
  if (!ctxt) {
    return -1;
  }
  int result = 0;
  *((void *)ctxt + 18) = escape;
  return result;
}

uint64x2_t *xmlBufAttrSerializeTxtContent(uint64x2_t *result, uint64_t a2, int a3, const xmlChar *__src)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (!__src) {
    return result;
  }
  uint64_t v4 = result;
  uint64_t v5 = __src;
  while (1)
  {
    unsigned int v6 = *v5;
    if (v6 <= 0x21) {
      break;
    }
    if (*v5 > 0x3Bu)
    {
      if (v6 == 60)
      {
        if (__src != v5) {
          xmlBufAdd(v4, __src, ((_DWORD)v5 - (_DWORD)__src));
        }
        uint64_t v7 = v4;
        int v8 = "&lt;";
        goto LABEL_35;
      }

      if (v6 == 62)
      {
        if (__src != v5) {
          xmlBufAdd(v4, __src, ((_DWORD)v5 - (_DWORD)__src));
        }
        uint64_t v7 = v4;
        int v8 = "&gt;";
LABEL_35:
        size_t v9 = 4LL;
        goto LABEL_36;
      }

uint64_t xmlSerializeHexCharRef(uint64_t a1, unsigned int a2)
{
  *(_WORD *)a1 = 8998;
  *(_BYTE *)(a1 + 2) = 120;
  if ((int)a2 >= 16)
  {
    if (a2 >> 20) {
      uint64_t v3 = a1 + 8;
    }
    else {
      uint64_t v3 = a1 + 7;
    }
    if (HIWORD(a2)) {
      uint64_t v2 = v3;
    }
    else {
      uint64_t v2 = a1 + 6;
    }
    if (a2 <= 0xFFF) {
      uint64_t v2 = a1 + 5;
    }
    if (a2 <= 0xFF) {
      uint64_t v2 = a1 + 4;
    }
  }

  else
  {
    uint64_t v2 = a1 + 3;
  }

  uint64_t v4 = (_BYTE *)v2;
  do
  {
    *v4-- = byte_181A378E0[a2 & 0xF];
    BOOL v5 = a2 > 0xF;
    a2 >>= 4;
  }

  while (v5);
LABEL_16:
  uint64_t result = v2 + 2;
  *(_WORD *)(v2 + 1) = 59;
  return result;
}

void xmlAttrSerializeTxtContent(xmlBufferPtr buf, xmlDocPtr doc, xmlAttrPtr attr, const xmlChar *string)
{
  if (buf && string)
  {
    int v5 = (int)attr;
    uint64_t v7 = xmlBufFromBuffer((uint32x2_t *)buf);
    if (v7)
    {
      uint64_t v8 = (uint64_t)v7;
      xmlBufAttrSerializeTxtContent((uint64x2_t *)v7, (uint64_t)doc, v5, string);
      xmlBufBackToBuffer(v8);
    }
  }

int xmlNodeDump(xmlBufferPtr buf, xmlDocPtr doc, xmlNodePtr cur, int level, int format)
{
  int result = -1;
  if (buf && cur)
  {
    unsigned int v11 = xmlBufFromBuffer((uint32x2_t *)buf);
    if (v11)
    {
      uint64_t v12 = (uint64_t)v11;
      size_t v13 = xmlBufNodeDump((xmlBufPtr)v11, doc, cur, level, format);
      xmlBufBackToBuffer(v12);
      if (v13 >> 31) {
        return -1;
      }
      else {
        return v13;
      }
    }

    else
    {
      return -1;
    }
  }

  return result;
}

size_t xmlBufNodeDump(xmlBufPtr buf, xmlDocPtr doc, xmlNodePtr cur, int level, int format)
{
  size_t result = -1LL;
  if (buf && cur)
  {
    unsigned int v11 = (xmlOutputBuffer *)xmlMalloc(0x38uLL);
    if (v11)
    {
      uint64_t v12 = v11;
      *(_OWORD *)&v11->closecallbacuint64_t k = 0u;
      *(_OWORD *)&v11->xmlBufPtr buffer = 0u;
      *(void *)&v11->writteuint64_t n = 0LL;
      *(_OWORD *)&v11->context = 0u;
      v11->xmlBufPtr buffer = buf;
      v11->writteuint64_t n = 0;
      int v13 = xmlBufUse(buf);
      unsigned int AllocationScheme = xmlBufGetAllocationScheme((uint64_t)buf);
      xmlBufSetAllocationScheme((uint64_t)buf, 0);
      xmlNodeDumpOutput(v12, doc, cur, level, format, 0LL);
      xmlBufSetAllocationScheme((uint64_t)buf, AllocationScheme);
      xmlFree(v12);
      return (int)(xmlBufUse(buf) - v13);
    }

    else
    {
      __xmlSimpleError(7, 2, 0, 0LL, (uint64_t)"creating buffer");
      return -1LL;
    }
  }

  return result;
}

void xmlNodeDumpOutput( xmlOutputBufferPtr buf, xmlDocPtr doc, xmlNodePtr cur, int level, int format, const char *encoding)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  xmlInitParser();
  if (buf && cur)
  {
    uint64_t v12 = "UTF-8";
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    if (encoding) {
      uint64_t v12 = encoding;
    }
    uint64_t v24 = 0LL;
    __int128 v22 = 0uLL;
    __int128 v23 = 0uLL;
    __int128 v20 = 0uLL;
    __int128 v21 = 0uLL;
    __int128 v19 = 0uLL;
    __int128 v14 = 0uLL;
    uint64_t v15 = 0LL;
    *((void *)&v17 + 1) = buf;
    DWORD1(v18) = level;
    DWORD2(v18) = format != 0;
    xmlChar v16 = v12;
    xmlSaveCtxtInit((int *)&v14);
    LODWORD(v18) = v18 | 0x20;
    xmlDtdPtr IntSubset = xmlGetIntSubset(doc);
    if (IntSubset && xmlIsXHTML(IntSubset->SystemID, IntSubset->ExternalID) >= 1) {
      xhtmlNodeDumpOutput((uint64_t)&v14, (uint64_t)cur);
    }
    else {
      xmlNodeDumpOutputInternal((uint64_t)&v14, (uint64_t)cur);
    }
  }

void xmlElemDump(FILE *f, xmlDocPtr doc, xmlNodePtr cur)
{
  if (cur)
  {
    xmlDocPtr File = xmlOutputBufferCreateFile(f, 0LL);
    if (File)
    {
      uint64_t v7 = File;
      if (doc && doc->type == XML_HTML_DOCUMENT_NODE) {
        htmlNodeDumpOutput(File, doc, cur, 0LL);
      }
      else {
        xmlNodeDumpOutput(File, doc, cur, 0, 1, 0LL);
      }
      xmlOutputBufferClose(v7);
    }
  }

int *xmlSaveCtxtInit(int *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (!*((void *)result + 3) && !*((void *)result + 17)) {
      *((void *)result + 17) = xmlEscapeEntities;
    }
    uint64_t v2 = __xmlTreeIndentString();
    int v3 = xmlStrlen((const xmlChar *)*v2);
    if (*__xmlTreeIndentString() && v3)
    {
      int v4 = 60 / v3;
      v1[31] = 60 / v3;
      v1[32] = v3;
      if (60 / v3 >= 1)
      {
        int v5 = 0;
        do
        {
          unsigned int v6 = (char *)v1 + v1[32] * (uint64_t)v5 + 60;
          uint64_t v7 = (const void **)__xmlTreeIndentString();
          memcpy(v6, *v7, v1[32]);
          ++v5;
          int v4 = v1[31];
        }

        while (v5 < v4);
        int v3 = v1[32];
      }

      *((_BYTE *)v1 + v3 * v4 + 60) = 0;
    }

    else
    {
      *(_OWORD *)((char *)v1 + 105) = 0u;
      *(_OWORD *)(v1 + 2xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
      *(_OWORD *)(v1 + 19) = 0u;
      *(_OWORD *)(v1 + 15) = 0u;
    }

    size_t result = __xmlSaveNoEmptyTags();
    if (*result) {
      v1[12] |= 4u;
    }
  }

  return result;
}

void xmlDocDumpFormatMemoryEnc( xmlDocPtr out_doc, xmlChar **doc_txt_ptr, int *doc_txt_len, const char *txt_encoding, int format)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  if (doc_txt_ptr)
  {
    encoding = txt_encoding;
    *doc_txt_ptr = 0LL;
    if (doc_txt_len) {
      *doc_txt_leuint64_t n = 0;
    }
    if (out_doc)
    {
      if (txt_encoding || (encoding = (const char *)out_doc->encoding) != 0LL)
      {
        xmlCharEncodingHandlerPtr CharEncodingHandler = xmlFindCharEncodingHandler(encoding);
        if (!CharEncodingHandler)
        {
          __xmlSimpleError(7, 1403, (int)out_doc, (uint64_t)"unknown encoding %s\n", (uint64_t)encoding);
          return;
        }
      }

      else
      {
        xmlCharEncodingHandlerPtr CharEncodingHandler = 0LL;
      }

      xmlOutputBufferPtr v11 = xmlAllocOutputBuffer(CharEncodingHandler);
      if (!v11)
      {
        __xmlSimpleError(7, 2, 0, 0LL, (uint64_t)"creating buffer");
        return;
      }

      uint64_t v12 = v11;
      uint64_t v22 = 0LL;
      __int128 v24 = 0u;
      uint64_t v30 = 0LL;
      __int128 v28 = 0u;
      __int128 v29 = 0u;
      __int128 v26 = 0u;
      __int128 v27 = 0u;
      __int128 v25 = 0u;
      __int128 v19 = 0u;
      uint64_t v20 = 0LL;
      xmlOutputBufferPtr v23 = v11;
      DWORD2(v2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = format != 0;
      __int128 v21 = encoding;
      xmlSaveCtxtInit((int *)&v19);
      LODWORD(v2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v24 | 0x20;
      xmlDocContentDumpOutput((uint64_t)&v19, (uint64_t)out_doc);
      xmlOutputBufferFlush(v12);
      xmlBufPtr conv = v12->conv;
      if (conv)
      {
        int v14 = xmlBufUse(conv);
        int v15 = v14;
        if (doc_txt_len)
        {
          *doc_txt_leuint64_t n = v14;
          xmlChar v16 = xmlBufContent(v12->conv);
          int v15 = 0;
          int v17 = *doc_txt_len;
        }

        else
        {
          xmlChar v16 = xmlBufContent(v12->conv);
          int v17 = v15;
        }
      }

      else
      {
        int v18 = xmlBufUse(v12->buffer);
        int v15 = v18;
        if (doc_txt_len)
        {
          *doc_txt_leuint64_t n = v18;
          xmlChar v16 = xmlBufContent(v12->buffer);
          int v15 = 0;
          int v17 = *doc_txt_len;
        }

        else
        {
          xmlChar v16 = xmlBufContent(v12->buffer);
          int v17 = v15;
        }
      }

      *doc_txt_ptr = xmlStrndup(v16, v17);
      xmlOutputBufferClose(v12);
      if (!*doc_txt_ptr)
      {
        if (doc_txt_len)
        {
          if (*doc_txt_len < 1) {
            return;
          }
          *doc_txt_leuint64_t n = 0;
        }

        else if (v15 <= 0)
        {
          return;
        }

        __xmlSimpleError(7, 2, 0, 0LL, (uint64_t)"creating output");
      }
    }
  }

  else if (doc_txt_len)
  {
    *doc_txt_leuint64_t n = 0;
  }

void xmlDocDumpMemory(xmlDocPtr cur, xmlChar **mem, int *size)
{
}

void xmlDocDumpFormatMemory(xmlDocPtr cur, xmlChar **mem, int *size, int format)
{
}

void xmlDocDumpMemoryEnc(xmlDocPtr out_doc, xmlChar **doc_txt_ptr, int *doc_txt_len, const char *txt_encoding)
{
}

int xmlDocFormatDump(FILE *f, xmlDocPtr cur, int format)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if (!cur) {
    return -1;
  }
  encoding = cur->encoding;
  if (encoding)
  {
    xmlCharEncodingHandlerPtr CharEncodingHandler = xmlFindCharEncodingHandler((const char *)cur->encoding);
    if (!CharEncodingHandler)
    {
      xmlFree((void *)cur->encoding);
      encoding = 0LL;
      xmlCharEncodingHandlerPtr CharEncodingHandler = 0LL;
      cur->encoding = 0LL;
    }
  }

  else
  {
    xmlCharEncodingHandlerPtr CharEncodingHandler = 0LL;
  }

  xmlOutputBufferPtr File = xmlOutputBufferCreateFile(f, CharEncodingHandler);
  if (!File) {
    return -1;
  }
  size_t v9 = File;
  uint64_t v14 = 0LL;
  __int128 v16 = 0u;
  uint64_t v22 = 0LL;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v17 = 0u;
  __int128 v11 = 0u;
  uint64_t v12 = 0LL;
  xmlOutputBufferPtr v15 = File;
  DWORD2(v16) = format != 0;
  int v13 = encoding;
  xmlSaveCtxtInit((int *)&v11);
  LODWORD(v16) = v16 | 0x20;
  xmlDocContentDumpOutput((uint64_t)&v11, (uint64_t)cur);
  return xmlOutputBufferClose(v9);
}

int xmlDocDump(FILE *f, xmlDocPtr cur)
{
  return xmlDocFormatDump(f, cur, 0);
}

int xmlSaveFileTo(xmlOutputBufferPtr buf, xmlDocPtr cur, const char *encoding)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (buf)
  {
    if (cur)
    {
      uint64_t v9 = 0LL;
      __int128 v11 = 0u;
      uint64_t v17 = 0LL;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      __int128 v12 = 0u;
      __int128 v6 = 0u;
      uint64_t v7 = 0LL;
      xmlOutputBufferPtr v10 = buf;
      DWORD2(v11) = 0;
      uint64_t v8 = encoding;
      xmlSaveCtxtInit((int *)&v6);
      LODWORD(v11) = v11 | 0x20;
      xmlDocContentDumpOutput((uint64_t)&v6, (uint64_t)cur);
      return xmlOutputBufferClose(buf);
    }

    xmlOutputBufferClose(buf);
  }

  return -1;
}

int xmlSaveFormatFileTo(xmlOutputBufferPtr buf, xmlDocPtr cur, const char *encoding, int format)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (buf)
  {
    if (cur && (cur->type | 4) == 0xD)
    {
      uint64_t v10 = 0LL;
      __int128 v12 = 0u;
      uint64_t v18 = 0LL;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      __int128 v13 = 0u;
      __int128 v7 = 0u;
      uint64_t v8 = 0LL;
      xmlOutputBufferPtr v11 = buf;
      DWORD2(v12) = format != 0;
      uint64_t v9 = encoding;
      xmlSaveCtxtInit((int *)&v7);
      LODWORD(v12) = v12 | 0x20;
      xmlDocContentDumpOutput((uint64_t)&v7, (uint64_t)cur);
      return xmlOutputBufferClose(buf);
    }

    xmlOutputBufferClose(buf);
  }

  return -1;
}

int xmlSaveFormatFileEnc(const char *filename, xmlDocPtr cur, const char *encoding, int format)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  if (!cur) {
    return -1;
  }
  int v5 = encoding;
  if (encoding || (int v5 = (const char *)cur->encoding) != 0LL)
  {
    xmlCharEncodingHandlerPtr CharEncodingHandler = xmlFindCharEncodingHandler(v5);
    if (!CharEncodingHandler) {
      return -1;
    }
  }

  else
  {
    xmlCharEncodingHandlerPtr CharEncodingHandler = 0LL;
  }

  compressiouint64_t n = cur->compression;
  if (compression < 0)
  {
    compressiouint64_t n = xmlGetCompressMode();
    cur->compressiouint64_t n = compression;
  }

  xmlOutputBufferPtr v10 = xmlOutputBufferCreateFilename(filename, CharEncodingHandler, compression);
  if (v10)
  {
    xmlOutputBufferPtr v11 = v10;
    uint64_t v16 = 0LL;
    __int128 v18 = 0u;
    uint64_t v24 = 0LL;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v19 = 0u;
    __int128 v13 = 0u;
    uint64_t v14 = 0LL;
    xmlOutputBufferPtr v17 = v10;
    DWORD2(v18) = format != 0;
    __int128 v15 = v5;
    xmlSaveCtxtInit((int *)&v13);
    LODWORD(v18) = v18 | 0x20;
    xmlDocContentDumpOutput((uint64_t)&v13, (uint64_t)cur);
    return xmlOutputBufferClose(v11);
  }

  return -1;
}

int xmlSaveFileEnc(const char *filename, xmlDocPtr cur, const char *encoding)
{
  return xmlSaveFormatFileEnc(filename, cur, encoding, 0);
}

int xmlSaveFormatFile(const char *filename, xmlDocPtr cur, int format)
{
  return xmlSaveFormatFileEnc(filename, cur, 0LL, format);
}

int xmlSaveFile(const char *filename, xmlDocPtr cur)
{
  return xmlSaveFormatFileEnc(filename, cur, 0LL, 0);
}

xmlBufPtr xmlOutputBufferWriteWSNonSig(xmlBufPtr result, int a2)
{
  if (result)
  {
    xmlBufPtr v2 = result;
    size_t result = (xmlBufPtr)*((void *)result + 5);
    if (result)
    {
      size_t result = (xmlBufPtr)xmlOutputBufferWrite((xmlOutputBufferPtr)result, 1, "\n");
      int v4 = *((_DWORD *)v2 + 13) + a2;
      if (v4 >= 1)
      {
        int v5 = 0;
        int v6 = *((_DWORD *)v2 + 31);
        do
        {
          int v7 = v4 - v5;
          if (v7 >= v6) {
            int v7 = v6;
          }
          size_t result = (xmlBufPtr)xmlOutputBufferWrite( *((xmlOutputBufferPtr *)v2 + 5),  v7 * *((_DWORD *)v2 + 32),  (const char *)v2 + 60);
          int v6 = *((_DWORD *)v2 + 31);
          v5 += v6;
          int v4 = *((_DWORD *)v2 + 13) + a2;
        }

        while (v5 < v4);
      }
    }
  }

  return result;
}

uint64_t xmlSaveSwitchEncoding(uint64_t a1, char *name)
{
  if (!name) {
    return 0LL;
  }
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(v2 + 24) || *(void *)(v2 + 40)) {
    return 0LL;
  }
  xmlCharEncodingHandlerPtr CharEncodingHandler = xmlFindCharEncodingHandler(name);
  *(void *)(v2 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = CharEncodingHandler;
  if (CharEncodingHandler)
  {
    int v6 = xmlBufCreate();
    *(void *)(v2 + 4xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v6;
    if (v6)
    {
      xmlCharEncOutput((void *)v2, 1);
      return 0LL;
    }

    xmlCharEncCloseFunc(*(xmlCharEncodingHandler **)(v2 + 24));
    uint64_t v9 = "creating encoding buffer";
    int v8 = 2;
    int v7 = 0LL;
  }

  else
  {
    int v7 = "unknown encoding %s\n";
    int v8 = 1403;
    uint64_t v9 = name;
  }

  __xmlSimpleError(7, v8, 0, (uint64_t)v7, (uint64_t)v9);
  return 0xFFFFFFFFLL;
}

uint64_t xmlEscapeEntities(_BYTE *a1, int *a2, unsigned __int8 *a3, int *a4)
{
  int v5 = (int)a3;
  int v7 = (int)a1;
  uint64_t v8 = *a2;
  uint64_t v9 = *a4;
  BOOL v10 = (int)v9 < 1 || (int)v8 < 1;
  LODWORD(v11) = (_DWORD)a1;
  LODWORD(v12) = (_DWORD)a3;
  if (v10)
  {
LABEL_6:
    uint64_t result = 0LL;
    goto LABEL_7;
  }

  unint64_t v14 = (unint64_t)&a1[v8];
  unint64_t v15 = (unint64_t)&a3[v9];
  __int128 v12 = a3;
  xmlOutputBufferPtr v11 = a1;
  while (1)
  {
    unsigned int v16 = *v12;
    switch(v16)
    {
      case '&':
        *(_DWORD *)xmlOutputBufferPtr v11 = 1886216486;
        v11[4] = 59;
        v11 += 5;
        goto LABEL_17;
      case '>':
        *(_DWORD *)xmlOutputBufferPtr v11 = 997484326;
        v11 += 4;
        goto LABEL_17;
      case '<':
        *(_DWORD *)xmlOutputBufferPtr v11 = 997485606;
        v11 += 4;
LABEL_17:
        ++v12;
        goto LABEL_27;
    }

    if ((char)v16 > 31 || v16 - 9 <= 1)
    {
      ++v12;
      *v11++ = v16;
      goto LABEL_27;
    }

    if ((v16 & 0x80) != 0)
    {
      if (v16 <= 0xBF)
      {
        __int128 v20 = "string is not in UTF-8\n";
        int v21 = 1400;
        goto LABEL_51;
      }

      if (v16 > 0xDF)
      {
        if (v16 > 0xEF)
        {
          if (v16 > 0xF7) {
            goto LABEL_49;
          }
          int v17 = ((v12[2] & 0x3F) << 6) | ((v12[1] & 0x3F | ((v16 & 7) << 6)) << 12);
          uint64_t v18 = 3LL;
          uint64_t v19 = 4LL;
        }

        else
        {
          int v17 = (v12[1] & 0x3F | ((v16 & 0xF) << 6)) << 6;
          uint64_t v18 = 2LL;
          uint64_t v19 = 3LL;
        }
      }

      else
      {
        int v17 = (v16 & 0x1F) << 6;
        uint64_t v18 = 1LL;
        uint64_t v19 = 2LL;
      }

      unsigned int v16 = v17 | v12[v18] & 0x3F;
      v12 += v19;
      if (v16 > 0xFF)
      {
        if (v16 >> 11 >= 0x1B && (v16 - 57344) >> 1 >= 0xFFF && v16 - 0x10000 >= 0x100000)
        {
LABEL_49:
          __int128 v20 = "invalid character value\n";
          int v21 = 1401;
LABEL_51:
          __xmlSimpleError(7, v21, 0, (uint64_t)v20, 0LL);
          goto LABEL_53;
        }
      }

      else if (v16 <= 0x1F && (v16 > 0xD || ((1 << v16) & 0x2600) == 0))
      {
        goto LABEL_49;
      }

      goto LABEL_26;
    }

    if (v16 > 0xD || ((1 << v16) & 0x2600) == 0) {
      break;
    }
    ++v12;
LABEL_26:
    xmlOutputBufferPtr v11 = (_BYTE *)xmlSerializeHexCharRef((uint64_t)v11, v16);
LABEL_27:
  }

  xmlGenericErrorFunc v22 = *__xmlGenericError();
  __int128 v23 = __xmlGenericErrorContext();
  v22(*v23, "xmlEscapeEntities : char out of range\n");
LABEL_53:
  LODWORD(v12) = (_DWORD)v12 + 1;
  uint64_t result = 0xFFFFFFFFLL;
LABEL_7:
  *a2 = (_DWORD)v11 - v7;
  *a4 = (_DWORD)v12 - v5;
  return result;
}

void xmlSaveClearEncoding(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  xmlOutputBufferFlush((xmlOutputBufferPtr)v1);
  xmlCharEncCloseFunc(*(xmlCharEncodingHandler **)(v1 + 24));
  xmlBufFree(*(_DWORD **)(v1 + 40));
  *(void *)(v1 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
  *(void *)(v1 + 4xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = 0LL;
}

uint64_t xmlDtdDumpOutput(uint64_t result, uint64_t a2)
{
  if (!result) {
    return result;
  }
  if (!a2) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 40);
  if (!v4) {
    return result;
  }
  xmlOutputBufferWrite(*(xmlOutputBufferPtr *)(result + 40), 10, "<!DOCTYPE ");
  xmlOutputBufferWriteString((xmlOutputBufferPtr)v4, *(const char **)(a2 + 16));
  if (*(void *)(a2 + 104))
  {
    xmlOutputBufferWrite((xmlOutputBufferPtr)v4, 8, " PUBLIC ");
    int v5 = (uint64x2_t **)(v4 + 32);
    xmlBufWriteQuotedString(*(uint64x2_t **)(v4 + 32), *(xmlChar **)(a2 + 104));
    xmlOutputBufferWrite((xmlOutputBufferPtr)v4, 1, " ");
    int v6 = (xmlChar **)(a2 + 112);
  }

  else
  {
    int v6 = (xmlChar **)(a2 + 112);
    if (!*(void *)(a2 + 112)) {
      goto LABEL_10;
    }
    xmlOutputBufferWrite((xmlOutputBufferPtr)v4, 8, " SYSTEM ");
    int v5 = (uint64x2_t **)(v4 + 32);
  }

  xmlBufWriteQuotedString(*v5, *v6);
LABEL_10:
  if (*(void *)(a2 + 96)
    || *(void *)(a2 + 80)
    || *(void *)(a2 + 88)
    || *(void *)(a2 + 72)
    || *(void *)(a2 + 120))
  {
    xmlOutputBufferWrite((xmlOutputBufferPtr)v4, 3, " [\n");
    int v7 = *(xmlNotationTable **)(a2 + 72);
    if (v7)
    {
      uint64_t v8 = *(void *)(a2 + 64);
      if (!v8 || *(void *)(v8 + 80) == a2) {
        xmlBufDumpNotationTable(*(uint64x2_t **)(v4 + 32), v7);
      }
    }

    uint64_t v9 = *(void *)(v3 + 52);
    *(void *)(v3 + 52) = 0xFFFFFFFFLL;
    for (uint64_t i = *(void *)(a2 + 24); i; uint64_t i = *(void *)(i + 48))
      xmlNodeDumpOutputInternal(v3, i);
    *(void *)(v3 + 52) = v9;
    xmlOutputBufferPtr v11 = "]>";
    __int128 v12 = (xmlOutputBuffer *)v4;
    int v13 = 2;
  }

  else
  {
    xmlOutputBufferPtr v11 = ">";
    __int128 v12 = (xmlOutputBuffer *)v4;
    int v13 = 1;
  }

  return xmlOutputBufferWrite(v12, v13, v11);
}

uint64_t xmlAttrDumpOutput(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(xmlOutputBuffer **)(result + 40);
    if (v2)
    {
      if (*(_DWORD *)(result + 56) == 2) {
        xmlOutputBufferWriteWSNonSig((xmlBufPtr)result, 2);
      }
      else {
        xmlOutputBufferWrite(*(xmlOutputBufferPtr *)(result + 40), 1, " ");
      }
      uint64_t v4 = *(void *)(a2 + 72);
      if (v4)
      {
        int v5 = *(const char **)(v4 + 24);
        if (v5)
        {
          xmlOutputBufferWriteString(v2, v5);
          xmlOutputBufferWrite(v2, 1, ":");
        }
      }

      xmlOutputBufferWriteString(v2, *(const char **)(a2 + 16));
      xmlOutputBufferWrite(v2, 2, "=");
      xmlAttrSerializeContent((uint64_t)v2, a2);
      return xmlOutputBufferWrite(v2, 1, "");
    }
  }

  return result;
}

uint64_t xmlAttrSerializeContent(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  if (v2)
  {
    uint64_t v4 = result;
    do
    {
      int v5 = *(_DWORD *)(v2 + 8);
      if (v5 == 5)
      {
        xmlBufAdd(*(uint64x2_t **)(v4 + 32), (const xmlChar *)"&", 1uLL);
        int v6 = *(uint64x2_t **)(v4 + 32);
        int v7 = *(const xmlChar **)(v2 + 16);
        size_t v8 = xmlStrlen(v7);
        xmlBufAdd(v6, v7, v8);
        uint64_t result = xmlBufAdd(*(uint64x2_t **)(v4 + 32), (const xmlChar *)";", 1uLL);
      }

      else if (v5 == 3)
      {
        uint64_t result = (uint64_t)xmlBufAttrSerializeTxtContent( *(uint64x2_t **)(v4 + 32),  *(void *)(a2 + 64),  a2,  *(const xmlChar **)(v2 + 80));
      }

      uint64_t v2 = *(void *)(v2 + 48);
    }

    while (v2);
  }

  return result;
}

xmlSchemaFacetPtr xmlSchemaNewFacet(void)
{
  xmlSchemaFacetPtr result = (xmlSchemaFacetPtr)xmlMalloc(0x48uLL);
  if (result)
  {
    result->regexp = 0LL;
    *(_OWORD *)&result->annot = 0u;
    *(_OWORD *)&result->fixed = 0u;
    *(_OWORD *)&result->xmlNsType type = 0u;
    *(_OWORD *)&result->value = 0u;
  }

  return result;
}

void xmlSchemaFreeWildcard(xmlSchemaWildcardPtr wildcard)
{
  if (wildcard)
  {
    xmlSchemaAnnotPtr annot = wildcard->annot;
    if (annot)
    {
      xmlNodePtr next = annot->next;
      xmlFree(annot);
      if (next)
      {
        do
        {
          uint64_t v4 = next->next;
          xmlFree(next);
          xmlNodePtr next = v4;
        }

        while (v4);
      }
    }

    xmlSchemaWildcardNsPtr nsSet = wildcard->nsSet;
    if (nsSet)
    {
      do
      {
        int v6 = nsSet->next;
        xmlFree(nsSet);
        xmlSchemaWildcardNsPtr nsSet = v6;
      }

      while (v6);
    }

    xmlSchemaWildcardNsPtr negNsSet = wildcard->negNsSet;
    if (negNsSet) {
      xmlFree(negNsSet);
    }
    xmlFree(wildcard);
  }

void xmlSchemaFreeFacet(xmlSchemaFacetPtr facet)
{
  if (facet)
  {
    val = facet->val;
    if (val) {
      xmlSchemaFreeValue(val);
    }
    regexp = facet->regexp;
    if (regexp) {
      xmlRegFreeRegexp(regexp);
    }
    xmlSchemaAnnotPtr annot = facet->annot;
    if (annot)
    {
      xmlNodePtr next = annot->next;
      xmlFree(annot);
      if (next)
      {
        do
        {
          int v6 = next->next;
          xmlFree(next);
          xmlNodePtr next = v6;
        }

        while (v6);
      }
    }

    xmlFree(facet);
  }

void xmlSchemaFreeType(xmlSchemaTypePtr type)
{
  if (type)
  {
    xmlSchemaAnnotPtr annot = type->annot;
    if (annot)
    {
      xmlNodePtr next = annot->next;
      xmlFree(annot);
      if (next)
      {
        do
        {
          uint64_t v4 = next->next;
          xmlFree(next);
          xmlNodePtr next = v4;
        }

        while (v4);
      }
    }

    xmlSchemaFacetPtr facets = type->facets;
    if (facets)
    {
      do
      {
        int v6 = facets->next;
        xmlSchemaFreeFacet(facets);
        xmlSchemaFacetPtr facets = v6;
      }

      while (v6);
    }

    attrUses = (void **)type->attrUses;
    if (attrUses)
    {
      if (*attrUses) {
        xmlFree(*attrUses);
      }
      xmlFree(attrUses);
    }

    xmlSchemaTypeLinkPtr memberTypes = type->memberTypes;
    if (memberTypes)
    {
      do
      {
        uint64_t v9 = memberTypes->next;
        xmlFree(memberTypes);
        xmlSchemaTypeLinkPtr memberTypes = v9;
      }

      while (v9);
    }

    xmlSchemaFacetLinkPtr facetSet = type->facetSet;
    if (facetSet)
    {
      do
      {
        xmlOutputBufferPtr v11 = facetSet->next;
        xmlFree(facetSet);
        xmlSchemaFacetLinkPtr facetSet = v11;
      }

      while (v11);
    }

    contModel = type->contModel;
    if (contModel) {
      xmlRegFreeRegexp(contModel);
    }
    xmlFree(type);
  }

void xmlSchemaFree(xmlSchemaPtr schema)
{
  if (schema)
  {
    if (schema->volatiles)
    {
      xmlGenericErrorFunc v2 = *__xmlGenericError();
      uint64_t v3 = __xmlGenericErrorContext();
      v2( *v3,  "Unimplemented block at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemas.c",  4241);
    }

    notaDecl = schema->notaDecl;
    if (notaDecl) {
      xmlHashFree(notaDecl, 0LL);
    }
    attrDecl = schema->attrDecl;
    if (attrDecl) {
      xmlHashFree(attrDecl, 0LL);
    }
    attrgrpDecl = schema->attrgrpDecl;
    if (attrgrpDecl) {
      xmlHashFree(attrgrpDecl, 0LL);
    }
    elemDecl = schema->elemDecl;
    if (elemDecl) {
      xmlHashFree(elemDecl, 0LL);
    }
    typeDecl = schema->typeDecl;
    if (typeDecl) {
      xmlHashFree(typeDecl, 0LL);
    }
    groupDecl = schema->groupDecl;
    if (groupDecl) {
      xmlHashFree(groupDecl, 0LL);
    }
    idcDef = schema->idcDef;
    if (idcDef) {
      xmlHashFree(idcDef, 0LL);
    }
    schemasImports = schema->schemasImports;
    if (schemasImports) {
      xmlHashFree(schemasImports, (xmlHashDeallocator)xmlSchemaBucketFreeEntry);
    }
    includes = (int *)schema->includes;
    if (includes)
    {
      if (includes[2] >= 1)
      {
        uint64_t v13 = 0LL;
        do
          xmlSchemaBucketFree(*(void **)(*(void *)includes + 8 * v13++));
        while (v13 < includes[2]);
      }

      if (*(void *)includes) {
        xmlFree(*(void **)includes);
      }
      xmlFree(includes);
    }

    xmlSchemaAnnotPtr annot = schema->annot;
    if (annot)
    {
      xmlNodePtr next = annot->next;
      xmlFree(annot);
      if (next)
      {
        do
        {
          unsigned int v16 = next->next;
          xmlFree(next);
          xmlNodePtr next = v16;
        }

        while (v16);
      }
    }

    xmlDictFree(schema->dict);
    xmlFree(schema);
  }

void xmlSchemaBucketFree(void *a1)
{
  if (a1)
  {
    xmlGenericErrorFunc v2 = (uint64_t *)*((void *)a1 + 8);
    if (v2)
    {
      xmlSchemaComponentListFree(v2);
      uint64_t v3 = (void **)*((void *)a1 + 8);
      if (v3)
      {
        if (*v3) {
          xmlFree(*v3);
        }
        xmlFree(v3);
      }
    }

    uint64_t v4 = (uint64_t *)*((void *)a1 + 9);
    if (v4)
    {
      xmlSchemaComponentListFree(v4);
      int v5 = (void **)*((void *)a1 + 9);
      if (v5)
      {
        if (*v5) {
          xmlFree(*v5);
        }
        xmlFree(v5);
      }
    }

    int v6 = (void *)*((void *)a1 + 5);
    if (v6)
    {
      do
      {
        int v7 = (void *)*v6;
        xmlFree(v6);
        int v6 = v7;
      }

      while (v7);
    }

    if (!*((_DWORD *)a1 + 15))
    {
      size_t v8 = (xmlDoc *)*((void *)a1 + 4);
      if (v8) {
        xmlFreeDoc(v8);
      }
    }

    if (*(_DWORD *)a1 == 1)
    {
      uint64_t v9 = (xmlSchema *)*((void *)a1 + 10);
      if (v9) {
        xmlSchemaFree(v9);
      }
    }

    xmlFree(a1);
  }

void xmlSchemaDump(FILE *output, xmlSchemaPtr schema)
{
  if (output)
  {
    if (schema)
    {
      fwrite("Schemas: ", 9uLL, 1uLL, output);
      if (schema->name) {
        fprintf(output, "%s, ", (const char *)schema->name);
      }
      else {
        fwrite("no name, ", 9uLL, 1uLL, output);
      }
      targetNamespace = (const char *)schema->targetNamespace;
      if (targetNamespace) {
        fputs(targetNamespace, output);
      }
      else {
        fwrite("no target namespace", 0x13uLL, 1uLL, output);
      }
      fputc(10, output);
      xmlSchemaAnnotPtr annot = schema->annot;
      if (annot) {
        xmlSchemaAnnotDump(output, (uint64_t)annot);
      }
      xmlHashScan(schema->typeDecl, (xmlHashScanner)xmlSchemaTypeDumpEntry, output);
      xmlHashScanFull(schema->elemDecl, (xmlHashScannerFull)xmlSchemaElementDump, output);
    }

    else
    {
      fwrite("Schemas: NULL\n", 0xEuLL, 1uLL, output);
    }
  }

void xmlSchemaAnnotDump(FILE *a1, uint64_t a2)
{
  Content = xmlNodeGetContent(*(const xmlNode **)(a2 + 8));
  if (Content)
  {
    uint64_t v4 = Content;
    fprintf(a1, "  Annot: %s\n", (const char *)Content);
    xmlFree(v4);
  }

  else
  {
    fwrite("  Annot: empty\n", 0xFuLL, 1uLL, a1);
  }

void xmlSchemaElementDump(uint64_t a1, FILE *__stream, uint64_t a3, const char *a4)
{
  if (!a1) {
    return;
  }
  fwrite("Element", 7uLL, 1uLL, __stream);
  if ((*(_BYTE *)(a1 + 88) & 2) != 0) {
    fwrite(" (global)", 9uLL, 1uLL, __stream);
  }
  fprintf(__stream, ": '%s' ", *(const char **)(a1 + 16));
  if (a4) {
    fprintf(__stream, "ns '%s'", a4);
  }
  fputc(10, __stream);
  if ((*(_BYTE *)(a1 + 88) & 0x1D) != 0)
  {
    fwrite("  props: ", 9uLL, 1uLL, __stream);
    int v7 = *(_DWORD *)(a1 + 88);
    if ((v7 & 8) != 0)
    {
      fwrite("[fixed] ", 8uLL, 1uLL, __stream);
      int v7 = *(_DWORD *)(a1 + 88);
      if ((v7 & 4) == 0)
      {
LABEL_9:
        if ((v7 & 0x10) == 0) {
          goto LABEL_10;
        }
        goto LABEL_22;
      }
    }

    else if ((v7 & 4) == 0)
    {
      goto LABEL_9;
    }

    fwrite("[default] ", 0xAuLL, 1uLL, __stream);
    int v7 = *(_DWORD *)(a1 + 88);
    if ((v7 & 0x10) == 0)
    {
LABEL_10:
      if ((v7 & 1) == 0)
      {
LABEL_12:
        fputc(10, __stream);
        goto LABEL_13;
      }

xmlSchemaParserCtxtPtr xmlSchemaNewParserCtxt(const char *URL)
{
  if (!URL) {
    return 0LL;
  }
  xmlGenericErrorFunc v2 = (xmlSchemaParserCtxt *)xmlSchemaParserCtxtCreate();
  if (v2)
  {
    uint64_t v3 = xmlDictCreate();
    *((void *)v2 + 19) = v3;
    *((void *)v2 + 1xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = xmlDictLookup(v3, (const xmlChar *)URL, -1);
  }

  return v2;
}

void *xmlSchemaParserCtxtCreate()
{
  int v0 = xmlMalloc(0xF0uLL);
  uint64_t v1 = v0;
  if (v0)
  {
    v0[13] = 0u;
    v0[14] = 0u;
    v0[11] = 0u;
    v0[12] = 0u;
    v0[9] = 0u;
    v0[10] = 0u;
    v0[7] = 0u;
    v0[8] = 0u;
    v0[5] = 0u;
    v0[6] = 0u;
    v0[3] = 0u;
    v0[4] = 0u;
    v0[1] = 0u;
    v0[2] = 0u;
    _OWORD *v0 = 0u;
    *(_DWORD *)int v0 = 1;
    xmlGenericErrorFunc v2 = xmlSchemaItemListCreate();
    v1[29] = v2;
    if (!v2)
    {
      xmlFree(v1);
      return 0LL;
    }
  }

  else
  {
    __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"allocating schema parser context");
  }

  return v1;
}

xmlSchemaParserCtxtPtr xmlSchemaNewMemParserCtxt(const char *buffer, int size)
{
  xmlGenericErrorFunc v2 = 0LL;
  if (buffer)
  {
    if (size >= 1)
    {
      int v5 = (xmlSchemaParserCtxt *)xmlSchemaParserCtxtCreate();
      xmlGenericErrorFunc v2 = v5;
      if (v5)
      {
        *((void *)v5 + 1xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = buffer;
        *((_DWORD *)v5 + 28) = size;
        *((void *)v5 + 19) = xmlDictCreate();
      }
    }
  }

  return v2;
}

xmlSchemaParserCtxtPtr xmlSchemaNewDocParserCtxt(xmlDocPtr doc)
{
  if (!doc) {
    return 0LL;
  }
  xmlGenericErrorFunc v2 = xmlSchemaParserCtxtCreate();
  uint64_t v3 = v2;
  if (v2)
  {
    v2[11] = doc;
    v2[19] = xmlDictCreate();
    *((_DWORD *)v3 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 1;
  }

  return (xmlSchemaParserCtxtPtr)v3;
}

void xmlSchemaFreeParserCtxt(xmlSchemaParserCtxtPtr ctxt)
{
  if (ctxt)
  {
    xmlGenericErrorFunc v2 = (xmlDoc *)*((void *)ctxt + 11);
    if (v2 && !*((_DWORD *)ctxt + 24)) {
      xmlFreeDoc(v2);
    }
    uint64_t v3 = (xmlSchemaValidCtxt *)*((void *)ctxt + 22);
    if (v3) {
      xmlSchemaFreeValidCtxt(v3);
    }
    if (*((_DWORD *)ctxt + 14))
    {
      uint64_t v4 = (void *)*((void *)ctxt + 6);
      if (v4)
      {
        xmlSchemaConstructionCtxtFree(v4);
        *((void *)ctxt + 6) = 0LL;
        *((_DWORD *)ctxt + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0;
      }
    }

    int v5 = (void **)*((void *)ctxt + 29);
    if (v5)
    {
      if (*v5) {
        xmlFree(*v5);
      }
      xmlFree(v5);
    }

    xmlDictFree(*((xmlDictPtr *)ctxt + 19));
    xmlFree(ctxt);
  }

void xmlSchemaFreeValidCtxt(xmlSchemaValidCtxtPtr ctxt)
{
  if (ctxt)
  {
    xmlGenericErrorFunc v2 = (xmlSchemaVal *)*((void *)ctxt + 17);
    if (v2) {
      xmlSchemaFreeValue(v2);
    }
    uint64_t v3 = (xmlSchemaParserCtxt *)*((void *)ctxt + 20);
    if (v3) {
      xmlSchemaFreeParserCtxt(v3);
    }
    uint64_t v4 = (void *)*((void *)ctxt + 29);
    if (v4)
    {
      if (*((int *)ctxt + 60) >= 1)
      {
        uint64_t v5 = 0LL;
        do
        {
          int v6 = *(void ***)(*((void *)ctxt + 29) + 8 * v5);
          xmlFree(v6[1]);
          xmlFree(v6);
          ++v5;
        }

        while (v5 < *((int *)ctxt + 60));
        uint64_t v4 = (void *)*((void *)ctxt + 29);
      }

      xmlFree(v4);
    }

    int v7 = (void *)*((void *)ctxt + 31);
    if (v7)
    {
      if (*((int *)ctxt + 64) >= 1)
      {
        uint64_t v8 = 0LL;
        do
        {
          uint64_t v9 = *(void **)(*((void *)ctxt + 31) + 8 * v8);
          BOOL v10 = (xmlSchemaVal *)v9[1];
          if (v10) {
            xmlSchemaFreeValue(v10);
          }
          xmlFree(v9);
          ++v8;
        }

        while (v8 < *((int *)ctxt + 64));
        int v7 = (void *)*((void *)ctxt + 31);
      }

      xmlFree(v7);
    }

    xmlOutputBufferPtr v11 = (void *)*((void *)ctxt + 26);
    if (v11)
    {
      xmlSchemaFreeIDCStateObjList(v11);
      *((void *)ctxt + 26) = 0LL;
    }

    __int128 v12 = (void *)*((void *)ctxt + 27);
    if (v12)
    {
      xmlSchemaFreeIDCStateObjList(v12);
      *((void *)ctxt + 27) = 0LL;
    }

    uint64_t v13 = (void *)*((void *)ctxt + 25);
    if (v13)
    {
      do
      {
        unint64_t v14 = (void *)*v13;
        xmlFree(v13);
        uint64_t v13 = v14;
      }

      while (v14);
    }

    if (*((void *)ctxt + 36))
    {
      if (*((_DWORD *)ctxt + 74)) {
        xmlSchemaClearAttrInfos((uint64_t)ctxt);
      }
      if (*((int *)ctxt + 75) >= 1)
      {
        uint64_t v15 = 0LL;
        do
          xmlFree(*(void **)(*((void *)ctxt + 36) + 8 * v15++));
        while (v15 < *((int *)ctxt + 75));
      }

      xmlFree(*((void **)ctxt + 36));
    }

    unsigned int v16 = (void *)*((void *)ctxt + 22);
    if (v16)
    {
      if (*((int *)ctxt + 46) >= 1)
      {
        uint64_t v17 = 0LL;
        while (1)
        {
          unsigned int v16 = (void *)*((void *)ctxt + 22);
          uint64_t v18 = (void *)v16[v17];
          if (!v18) {
            break;
          }
          xmlSchemaClearElemInfo((uint64_t)ctxt, (uint64_t)v18);
          xmlFree(v18);
          if (++v17 >= *((int *)ctxt + 46))
          {
            unsigned int v16 = (void *)*((void *)ctxt + 22);
            break;
          }
        }
      }

      xmlFree(v16);
    }

    uint64_t v19 = (void **)*((void *)ctxt + 39);
    if (v19)
    {
      if (*v19) {
        xmlFree(*v19);
      }
      xmlFree(v19);
    }

    __int128 v20 = (xmlDict *)*((void *)ctxt + 34);
    if (v20) {
      xmlDictFree(v20);
    }
    int v21 = (void *)*((void *)ctxt + 12);
    if (v21) {
      xmlFree(v21);
    }
    xmlFree(ctxt);
  }

void xmlSchemaConstructionCtxtFree(void *a1)
{
  xmlGenericErrorFunc v2 = (void **)a1[3];
  if (v2)
  {
    if (*v2) {
      xmlFree(*v2);
    }
    xmlFree(v2);
  }

  uint64_t v3 = (void **)a1[5];
  if (v3)
  {
    if (*v3) {
      xmlFree(*v3);
    }
    xmlFree(v3);
  }

  uint64_t v4 = (xmlHashTable *)a1[6];
  if (v4) {
    xmlHashFree(v4, (xmlHashDeallocator)xmlSchemaSubstGroupFreeEntry);
  }
  uint64_t v5 = (void *)a1[7];
  if (v5)
  {
    do
    {
      int v6 = (void *)*v5;
      xmlFree(v5);
      uint64_t v5 = v6;
    }

    while (v6);
  }

  int v7 = (xmlDict *)a1[2];
  if (v7) {
    xmlDictFree(v7);
  }
  xmlFree(a1);
}

int xmlSchemaCheckFacet( xmlSchemaFacetPtr facet, xmlSchemaTypePtr typeDecl, xmlSchemaParserCtxtPtr ctxt, const xmlChar *name)
{
  int v4 = -1;
  if (facet)
  {
    xmlSchemaTypePtr baseType = typeDecl;
    if (typeDecl)
    {
      unsigned __int32 v8 = facet->type - 1000;
      xmlSchemaValType v9 = XML_SCHEMAS_PINTEGER;
      switch(v8)
      {
        case 0u:
        case 1u:
        case 2u:
        case 3u:
        case 7u:
          if (typeDecl->type != XML_SCHEMA_TYPE_BASIC)
          {
            xmlSchemaTypePtr baseType = typeDecl->baseType;
            if (!baseType)
            {
              uint64_t v24 = "a type user derived type has no base type";
              goto LABEL_40;
            }
          }

          xmlSchemaParserCtxtPtr v10 = ctxt;
          if (ctxt || (xmlSchemaParserCtxtPtr v10 = xmlSchemaNewParserCtxt("*")) != 0LL)
          {
            int v11 = xmlSchemaVCheckCVCSimpleType( (uint64_t)v10,  facet->node,  (uint64_t)baseType,  (xmlChar *)facet->value,  &facet->val,  1u,  1,  0);
            if (!v11)
            {
              if (!facet->val)
              {
                if (ctxt) {
                  xmlSchemaInternalErr2( v10,  (const xmlChar *)"xmlSchemaCheckFacet",  (const xmlChar *)"value was not computed",  0LL);
                }
                xmlGenericErrorFunc v22 = *__xmlGenericError();
                __int128 v23 = __xmlGenericErrorContext();
                v22( *v23,  "Unimplemented block at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemas.c",  18941);
              }

              int v4 = 0;
              goto LABEL_52;
            }

            if ((v11 & 0x80000000) == 0)
            {
              if (!ctxt)
              {
                int v4 = 1717;
                goto LABEL_52;
              }

              uint64_t v36 = 0LL;
              xmlNodePtr node = facet->node;
              value = facet->value;
              unint64_t v14 = xmlSchemaFormatQName(&v36, baseType->targetNamespace, (xmlChar *)baseType->name);
              xmlSchemaCustomErr4( v10,  1717,  (uint64_t)node,  facet,  (const xmlChar *)"The value '%s' of the facet does not validate against the base type '%s'",  value,  v14,  0LL,  0LL);
              if (v36) {
                xmlFree(v36);
              }
              goto LABEL_57;
            }

            if (ctxt)
            {
              xmlNodePtr v32 = facet->node;
              uint64_t v33 = facet->value;
              uint64_t v34 = (xmlChar *)xmlSchemaFacetTypeToString(facet->type);
              xmlSchemaCustomErr4( v10,  3069,  (uint64_t)v32,  0LL,  (const xmlChar *)"Internal error: xmlSchemaCheckFacet, failed to validate the value '%s' of the facet '%s ' against the base type",  v33,  v34,  0LL,  0LL);
            }

            else
            {
              xmlSchemaFreeParserCtxt(v10);
            }

            return -1;
          }

          return v4;
        case 4u:
          goto LABEL_14;
        case 5u:
        case 9u:
        case 0xAu:
        case 0xBu:
          xmlSchemaValType v9 = XML_SCHEMAS_NNINTEGER;
LABEL_14:
          BuiltInType = xmlSchemaGetBuiltInType(v9);
          int v16 = xmlSchemaValidatePredefinedType(BuiltInType, facet->value, &facet->val);
          if (!v16) {
            goto LABEL_21;
          }
          if (v16 < 0)
          {
            if (ctxt)
            {
              uint64_t v24 = "validating facet value";
LABEL_40:
              xmlSchemaInternalErr2(ctxt, (const xmlChar *)"xmlSchemaCheckFacet", (const xmlChar *)v24, 0LL);
            }
          }

          else
          {
            if (!ctxt) {
              goto LABEL_57;
            }
            xmlNodePtr v17 = facet->node;
            uint64_t v18 = facet->value;
            xmlSchemaTypeType type = facet->type;
            __int128 v20 = (xmlChar *)xmlSchemaFacetTypeToString(type);
            if (type == XML_SCHEMA_FACET_TOTALDIGITS) {
              int v21 = "positiveInteger";
            }
            else {
              int v21 = "nonNegativeInteger";
            }
            int v4 = 1717;
            xmlSchemaCustomErr4( ctxt,  1717,  (uint64_t)v17,  baseType,  (const xmlChar *)"The value '%s' of the facet '%s' is not a valid '%s'",  v18,  v20,  (xmlChar *)v21,  0LL);
          }

          return v4;
        case 6u:
          uint64_t v25 = xmlRegexpCompile(facet->value);
          facet->regexp = v25;
          if (v25) {
            int v4 = 0;
          }
          else {
            int v4 = 1756;
          }
          if (!ctxt) {
            goto LABEL_51;
          }
          xmlSchemaParserCtxtPtr v10 = ctxt;
          if (v25) {
            goto LABEL_52;
          }
          xmlNodePtr v26 = facet->node;
          __int128 v27 = facet->value;
          __int128 v28 = "The value '%s' of the facet 'pattern' is not a valid regular expression";
          int v4 = 1756;
          xmlSchemaParserCtxtPtr v29 = ctxt;
          int v30 = 1756;
          goto LABEL_35;
        case 8u:
          if (xmlStrEqual(facet->value, (const xmlChar *)"preserve"))
          {
            int v4 = 0;
            int v31 = 1;
            goto LABEL_50;
          }

          if (xmlStrEqual(facet->value, (const xmlChar *)"replace"))
          {
            int v4 = 0;
            int v31 = 2;
            goto LABEL_50;
          }

          if (xmlStrEqual(facet->value, (const xmlChar *)"collapse"))
          {
            int v4 = 0;
            int v31 = 3;
LABEL_50:
            facet->whitespace = v31;
LABEL_51:
            xmlSchemaParserCtxtPtr v10 = ctxt;
LABEL_52:
            if (!ctxt && v10) {
              xmlSchemaFreeParserCtxt(v10);
            }
            return v4;
          }

          if (ctxt)
          {
            xmlNodePtr v26 = facet->node;
            __int128 v27 = facet->value;
            __int128 v28 = "The value '%s' of the facet 'whitespace' is not valid";
            int v4 = 1717;
            xmlSchemaParserCtxtPtr v29 = ctxt;
            int v30 = 1717;
LABEL_35:
            xmlSchemaCustomErr4(v29, v30, (uint64_t)v26, baseType, (const xmlChar *)v28, v27, 0LL, 0LL, 0LL);
          }

          else
          {
LABEL_57:
            int v4 = 1717;
          }

          break;
        default:
LABEL_21:
          int v4 = 0;
          goto LABEL_51;
      }
    }
  }

  return v4;
}

uint64_t xmlSchemaVCheckCVCSimpleType( uint64_t a1, xmlNode *a2, uint64_t a3, xmlChar *a4, xmlSchemaValPtr *a5, unsigned int a6, int a7, int a8)
{
  xmlSchemaValPtr val = 0LL;
  if (a5)
  {
    if (*a5)
    {
      xmlSchemaFreeValue(*a5);
      *a5 = 0LL;
    }

    int v14 = 1;
  }

  else
  {
    int v14 = (*(unsigned __int8 *)(a3 + 90) >> 5) & 1;
  }

  int v86 = v14;
  if (a4) {
    uint64_t v15 = a4;
  }
  else {
    uint64_t v15 = (xmlChar *)&byte_181A3ACBA;
  }
  int v16 = *(_DWORD *)a3;
  if (*(_DWORD *)a3 != 1 || *(_DWORD *)(a3 + 160) != 46)
  {
    int v17 = *(_DWORD *)(a3 + 88);
    if ((v17 & 0x100) == 0)
    {
      if ((v17 & 0x40) == 0)
      {
        if ((v17 & 0x80) != 0)
        {
          uint64_t v18 = a3;
          while (1)
          {
            if (*(_DWORD *)v18 != 4)
            {
LABEL_18:
              __int128 v20 = "union simple type has no member types";
LABEL_19:
              xmlSchemaInternalErr2( (_DWORD *)a1,  (const xmlChar *)"xmlSchemaVCheckCVCSimpleType",  (const xmlChar *)v20,  0LL);
              goto LABEL_78;
            }

            uint64_t v19 = *(void **)(v18 + 168);
            if (v19) {
              break;
            }
            uint64_t v18 = *(void *)(v18 + 112);
            if (!v18) {
              goto LABEL_18;
            }
          }

          while (1)
          {
            if (v86)
            {
              p_xmlSchemaValPtr val = &val;
              uint64_t v23 = a1;
              uint64_t v24 = a2;
              uint64_t v25 = v15;
            }

            else
            {
              uint64_t v23 = a1;
              uint64_t v24 = a2;
              uint64_t v25 = v15;
              p_xmlSchemaValPtr val = 0LL;
            }

            int v26 = xmlSchemaVCheckCVCSimpleType(v23, v24, v19[1], v25, p_val, 0LL, 1LL, 0LL);
            if (v26 < 1) {
              break;
            }
            uint64_t v19 = (void *)*v19;
            if (!v19)
            {
              int v21 = 0LL;
              goto LABEL_133;
            }
          }

          if (v26)
          {
            __int128 v20 = "validating members of union simple type";
            goto LABEL_19;
          }

          int v75 = *(_DWORD *)(a3 + 88);
          if ((v75 & 0x8000000) == 0) {
            goto LABEL_157;
          }
          if (a8 || !(v75 & 0x10000000 | a7))
          {
            int v21 = 0LL;
          }

          else
          {
            uint64_t v77 = xmlSchemaNormalizeValue((_DWORD *)v19[1], v15);
            int v21 = v77;
            if (v77) {
              uint64_t v15 = v77;
            }
          }

          int v78 = xmlSchemaValidateFacets((_DWORD *)a1, (uint64_t)a2, (int *)a3, XML_SCHEMAS_UNKNOWN, v15, val, 0LL, a6);
          if (!v78) {
            goto LABEL_151;
          }
          if (v78 < 0)
          {
            uint64_t v33 = "validating facets of union simple type";
            goto LABEL_75;
          }

LABEL_133:
          if (a6)
          {
            uint64_t v42 = 1826LL;
            int v43 = (_DWORD *)a1;
            int v44 = 1826;
            goto LABEL_67;
          }

          uint64_t v42 = 1826LL;
          goto LABEL_152;
        }

        goto LABEL_157;
      }

      xmlSchemaValPtr v89 = 0LL;
      if (a8)
      {
        cur = v15;
        int v80 = 0;
        int v81 = 0LL;
      }

      else if (v17 & 0x10000000 | a7)
      {
        uint64_t v40 = xmlSchemaNormalizeValue((_DWORD *)a3, v15);
        int v80 = 0;
        int v81 = v40;
        if (v40) {
          uint64_t v15 = v40;
        }
        cur = v15;
      }

      else
      {
        cur = v15;
        int v81 = 0LL;
        int v80 = 1;
      }

      unint64_t v51 = 0LL;
      BOOL v52 = 0LL;
      *(void *)uint64_t v82 = a3;
      uint64_t v53 = *(void *)(a3 + 56);
      int v54 = cur;
      int v84 = (_DWORD *)a1;
      do
      {
        for (uint64_t i = v54; ; ++i)
        {
          unsigned int v56 = *i;
          if (v56 > 0x20 || ((1LL << v56) & 0x100002600LL) == 0) {
            break;
          }
          ++v54;
        }

        uint64_t v58 = 0LL;
        for (xmlChar j = *i; j > 0x20u || ((1LL << j) & 0x100002601LL) == 0; xmlChar j = i[++v58])
          ;
        if (!v58) {
          break;
        }
        unsigned int v60 = xmlStrndup(i, v58);
        if (v86)
        {
          unsigned int v61 = &v89;
          uint64_t v62 = a1;
          BOOL v63 = a2;
          uint64_t v64 = v53;
          int v65 = v60;
        }

        else
        {
          uint64_t v62 = a1;
          BOOL v63 = a2;
          uint64_t v64 = v53;
          int v65 = v60;
          unsigned int v61 = 0LL;
        }

        int v66 = xmlSchemaVCheckCVCSimpleType(v62, v63, v64, v65, v61, a6, 0LL, 1LL);
        if (v60) {
          xmlFree(v60);
        }
        xmlSchemaValPtr v67 = v89;
        if (v89)
        {
          if (val)
          {
            xmlSchemaValueAppend(v52, v89);
            xmlSchemaValPtr v67 = v89;
          }

          else
          {
            xmlSchemaValPtr val = v89;
          }

          xmlSchemaValPtr v89 = 0LL;
          BOOL v52 = v67;
        }

        if (v66)
        {
          BOOL v68 = *(_DWORD **)v82;
          int v21 = v81;
          int v69 = cur;
          if ((v66 & 0x80000000) == 0)
          {
LABEL_115:
            if (!a6)
            {
              uint64_t v42 = 1825LL;
              goto LABEL_152;
            }

            if (v80)
            {
              int v71 = xmlSchemaNormalizeValue(v68, v69);
              int v21 = v71;
              if (v71) {
                int v69 = v71;
              }
            }

            uint64_t v42 = 1825LL;
            int v43 = v84;
            int v44 = 1825;
            uint64_t v45 = (uint64_t)a2;
            int v46 = v69;
            uint64_t v47 = (uint64_t)v68;
LABEL_120:
            xmlSchemaSimpleTypeErr(v43, v44, v45, v46, v47);
            goto LABEL_152;
          }

          uint64_t v33 = "validating an item of list simple type";
LABEL_123:
          uint64_t v49 = v84;
          goto LABEL_76;
        }

        int v54 = (xmlChar *)&i[v58];
        ++v51;
        a1 = (uint64_t)v84;
      }

      while (i[v58]);
      BOOL v68 = *(_DWORD **)v82;
      if ((*(_BYTE *)(*(void *)v82 + 91LL) & 8) == 0)
      {
        uint64_t v42 = 0LL;
        int v21 = v81;
        goto LABEL_152;
      }

      int v69 = cur;
      int v70 = xmlSchemaValidateFacets((_DWORD *)a1, (uint64_t)a2, *(int **)v82, XML_SCHEMAS_UNKNOWN, cur, val, v51, a6);
      int v21 = v81;
      if (v70)
      {
        if ((v70 & 0x80000000) == 0) {
          goto LABEL_115;
        }
        uint64_t v33 = "validating facets of list simple type";
        goto LABEL_123;
      }

LABEL_152:
  if (v21) {
    xmlFree(v21);
  }
  if ((_DWORD)v42)
  {
    if (val) {
      xmlSchemaFreeValue(val);
    }
    return v42;
  }

LABEL_157:
  if (a5)
  {
    uint64_t v42 = 0LL;
    *a5 = val;
  }

  else
  {
    if (val) {
      xmlSchemaFreeValue(val);
    }
    return 0LL;
  }

  return v42;
}

    xmlSchemaValType v9 = (const xmlChar *)"attributeGroup";
LABEL_158:
    int v6 = *(void *)(*a3 + 48);
    *a3 = v6;
    if (!v6) {
      return 0LL;
    }
  }

  if (!v75 && (*(_BYTE *)(a2 + 48) & 2) != 0) {
    str1 = *(xmlChar **)(a1 + 200);
  }
  if (xmlStrEqual(str1, (const xmlChar *)"http://www.w3.org/2001/XMLSchema-instance")) {
    xmlSchemaCustomErr4( (_DWORD *)a1,  3057,  v13,  0LL,  (const xmlChar *)"The target namespace must not match '%s'",  (const xmlChar *)"http://www.w3.org/2001/XMLSchema-instance",  0LL,  0LL,  0LL);
  }
  uint64_t v53 = xmlSchemaGetPropNode(v13, v10);
  if (!v53)
  {
    xmlSchemaPMissingAttrErr(a1, v13, v10);
    goto LABEL_157;
  }

  int v54 = (xmlNode *)v53;
  BuiltInType = xmlSchemaGetBuiltInType(XML_SCHEMAS_NCNAME);
  if (xmlStrEqual(v88, (const xmlChar *)"xmlns"))
  {
    unsigned int v56 = xmlSchemaGetBuiltInType(XML_SCHEMAS_NCNAME);
    xmlSchemaPSimpleTypeErr( a1,  3056,  (uint64_t)v54,  (uint64_t)v56,  0LL,  0LL,  (const xmlChar *)"The value of the attribute must not match 'xmlns'",  0);
    goto LABEL_157;
  }

  if (!v80)
  {
LABEL_146:
    uint64_t v62 = *(void *)(v13 + 24);
    if (v62)
    {
      if (!*(void *)(v62 + 72)
        || !xmlStrEqual(*(const xmlChar **)(v62 + 16), (const xmlChar *)"annotation")
        || !xmlStrEqual( *(const xmlChar **)(*(void *)(v62 + 72) + 16LL),  (const xmlChar *)"http://www.w3.org/2001/XMLSchema")
        || (xmlSchemaParseAnnotation((_DWORD *)a1, v62, 0), (uint64_t v62 = *(void *)(v62 + 48)) != 0))
      {
        xmlSchemaPContentErr(a1, 3033, v13, v62, 0LL, (xmlChar *)"(annotation?)");
      }
    }

    if (a5 == 13)
    {
      BOOL v63 = (_DWORD *)a1;
      uint64_t v64 = v13;
      int v65 = "Skipping attribute use prohibition, since it is pointless when extending a type";
    }

    else
    {
      if (a5 != 16)
      {
        if (!v17)
        {
          int v86 = v88;
          str2 = str1;
        }

        if (v16)
        {
          int v66 = *((unsigned int *)v16 + 2);
          if ((int)v66 >= 1)
          {
            xmlSchemaValPtr v67 = *v16;
            while (1)
            {
              BOOL v68 = *v67;
              if (*(_DWORD *)*v67 == 2001 && v86 == v68[2] && str2 == v68[3]) {
                break;
              }
              ++v67;
              if (!--v66) {
                goto LABEL_169;
              }
            }

            BOOL v85 = 0LL;
            int v74 = xmlSchemaFormatQName(&v85, str2, (xmlChar *)v86);
            xmlSchemaCustomWarning( (_DWORD *)a1,  3086,  v13,  (const xmlChar *)"Skipping duplicate attribute use prohibition '%s'",  v74,  0LL,  0LL);
            if (v85) {
              xmlFree(v85);
            }
            goto LABEL_157;
          }
        }

const char *xmlSchemaFacetTypeToString(int a1)
{
  else {
    return off_189BA2E48[a1 - 1000];
  }
}

xmlChar *xmlSchemaFormatQName(void **a1, const xmlChar *a2, xmlChar *a3)
{
  int v6 = *a1;
  if (v6)
  {
    xmlFree(v6);
    *a1 = 0LL;
  }

  if (a2)
  {
    int v7 = xmlStrdup((const xmlChar *)"{");
    *a1 = v7;
    unsigned __int32 v8 = xmlStrcat(v7, a2);
    *a1 = v8;
    xmlSchemaValType v9 = xmlStrcat(v8, (const xmlChar *)"}");
    *a1 = v9;
    if (a3)
    {
      xmlSchemaParserCtxtPtr v10 = a3;
LABEL_9:
      a3 = xmlStrcat(v9, v10);
      *a1 = a3;
      return a3;
    }

void xmlSchemaCustomErr4( _DWORD *a1, int a2, uint64_t a3, _DWORD *a4, const xmlChar *a5, const xmlChar *a6, xmlChar *a7, xmlChar *a8, uint64_t a9)
{
  uint64_t ComponentNode = a3;
  cur = 0LL;
  if (!a3 && a4 && *a1 == 1)
  {
    uint64_t ComponentNode = xmlSchemaGetComponentNode(a4);
    xmlSchemaFormatItemForReport(&cur, (uint64_t)a4, 0LL);
    int v17 = xmlStrcat(cur, (const xmlChar *)": ");
    cur = v17;
  }

  else
  {
    xmlSchemaFormatNodeForError((void **)&cur, (uint64_t)a1, a3);
    int v17 = cur;
  }

  cur = xmlStrcat(v17, a5);
  cur = xmlStrcat(cur, (const xmlChar *)".\n");
  xmlSchemaErr4Line(a1, 2, a2, ComponentNode, 0, (const char *)cur, a6, a7, a8, a9);
  if (cur) {
    xmlFree(cur);
  }
}

xmlSchemaPtr xmlSchemaParse(xmlSchemaParserCtxtPtr ctxt)
{
  xmlSchemaParserCtxtPtr v10 = 0LL;
  xmlSchemaInitTypes();
  if (!ctxt) {
    return 0LL;
  }
  *((void *)ctxt + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
  *((_DWORD *)ctxt + 18) = 0;
  xmlGenericErrorFunc v2 = (xmlSchema *)xmlSchemaNewSchema((uint64_t)ctxt);
  if (v2)
  {
    uint64_t v3 = v2;
    int v4 = (void *)*((void *)ctxt + 6);
    if (v4) {
      goto LABEL_6;
    }
    int v4 = xmlSchemaConstructionCtxtCreate(*((xmlDict **)ctxt + 19));
    *((void *)ctxt + 6) = v4;
    if (v4)
    {
      *((_DWORD *)ctxt + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 1;
LABEL_6:
      *int v4 = v3;
      int v5 = xmlSchemaAddSchemaDoc( (uint64_t)ctxt,  0,  *((const xmlChar **)ctxt + 10),  *((xmlDoc **)ctxt + 11),  *((const char **)ctxt + 13),  *((_DWORD *)ctxt + 28),  0LL,  0LL,  0LL,  &v10);
      if (v5 != -1)
      {
        if (v5) {
          goto LABEL_23;
        }
        if (!v10)
        {
          unsigned __int32 v8 = (const xmlChar *)*((void *)ctxt + 10);
          if (v8) {
            xmlSchemaCustomErr4( ctxt,  1757,  0LL,  0LL,  (const xmlChar *)"Failed to locate the main schema resource at '%s'",  v8,  0LL,  0LL,  0LL);
          }
          else {
            xmlSchemaCustomErr4( ctxt,  1757,  0LL,  0LL,  (const xmlChar *)"Failed to locate the main schema resource",  0LL,  0LL,  0LL,  0LL);
          }
          goto LABEL_23;
        }

        if (xmlSchemaParseNewDocWithContext((uint64_t)ctxt, (uint64_t)v3, (uint64_t)v10) != -1)
        {
          if (*((_DWORD *)ctxt + 9))
          {
LABEL_24:
            xmlSchemaFree(v3);
            xmlSchemaValType v9 = (void *)*((void *)ctxt + 6);
            if (v9)
            {
              xmlSchemaConstructionCtxtFree(v9);
              uint64_t v3 = 0LL;
              *((void *)ctxt + 6) = 0LL;
              *((_DWORD *)ctxt + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0;
              goto LABEL_17;
            }

            goto LABEL_16;
          }

          v3->doc = (xmlDocPtr)v10[4];
          v3->preserve = *((_DWORD *)ctxt + 24);
          *((void *)ctxt + 8) = v3;
LABEL_23:
          if (!*((_DWORD *)ctxt + 9)) {
            goto LABEL_17;
          }
          goto LABEL_24;
        }
      }

_OWORD *xmlSchemaNewSchema(uint64_t a1)
{
  xmlGenericErrorFunc v2 = xmlMalloc(0xA0uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    v2[8] = 0u;
    v2[9] = 0u;
    v2[6] = 0u;
    v2[7] = 0u;
    v2[4] = 0u;
    v2[5] = 0u;
    v2[2] = 0u;
    v2[3] = 0u;
    *xmlGenericErrorFunc v2 = 0u;
    v2[1] = 0u;
    int v4 = *(xmlDict **)(a1 + 152);
    *((void *)v3 + 15) = v4;
    xmlDictReference(v4);
  }

  else
  {
    if (a1) {
      ++*(_DWORD *)(a1 + 36);
    }
    __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"allocating schema");
  }

  return v3;
}

void *xmlSchemaConstructionCtxtCreate(xmlDict *a1)
{
  xmlGenericErrorFunc v2 = xmlMalloc(0x48uLL);
  uint64_t v3 = v2;
  if (!v2)
  {
    __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"allocating schema construction context");
    return v3;
  }

  v2[8] = 0LL;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
  *(_OWORD *)xmlGenericErrorFunc v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  int v4 = xmlSchemaItemListCreate();
  v3[3] = v4;
  if (!v4)
  {
    __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"allocating list of schema buckets");
    xmlFree(v3);
    return 0LL;
  }

  int v5 = xmlSchemaItemListCreate();
  v3[5] = v5;
  if (!v5)
  {
    __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"allocating list of pending global components");
    xmlSchemaConstructionCtxtFree(v3);
    return 0LL;
  }

  void v3[2] = a1;
  xmlDictReference(a1);
  return v3;
}

uint64_t xmlSchemaAddSchemaDoc( uint64_t a1, unsigned int a2, const xmlChar *a3, xmlDoc *a4, const char *a5, int a6, uint64_t a7, uint64_t a8, xmlChar *a9, const xmlChar ***a10)
{
  uint64_t v14 = (uint64_t)a3;
  if (a10) {
    *a10 = 0LL;
  }
  int v17 = 0LL;
  uint64_t v18 = 0LL;
  switch(a2)
  {
    case 0u:
      goto LABEL_16;
    case 1u:
      int v19 = 3082;
      break;
    case 2u:
      int v19 = 3050;
      break;
    case 3u:
      int v19 = 3081;
      break;
    default:
      int v19 = 0;
      break;
  }

  uint64_t v20 = *(void *)(a1 + 48);
  uint64_t v21 = *(void *)(v20 + 24);
  if (!v21 || (uint64_t v22 = *(unsigned int *)(v21 + 8), (int)v22 < 1))
  {
    int v17 = 0LL;
    uint64_t v18 = 0LL;
    goto LABEL_16;
  }

  if (a3)
  {
    uint64_t v23 = *(const xmlChar ****)v21;
    while (1)
    {
      uint64_t v18 = *v23;
      if ((*v23)[1] == a3) {
        break;
      }
      ++v23;
      if (!--v22) {
        goto LABEL_14;
      }
    }

    if (*(const xmlChar ***)(v20 + 32) == v18)
    {
      xmlSchemaCustomErr4( (_DWORD *)a1,  v19,  a7,  0LL,  (const xmlChar *)"The schema must not import/include/redefine itself",  0LL,  0LL,  0LL,  0LL);
      goto LABEL_130;
    }
  }

  else
  {
LABEL_14:
    uint64_t v18 = 0LL;
  }

  int v46 = xmlMalloc(0x20uLL);
  if (!v46)
  {
    int v54 = "allocating schema relation";
LABEL_94:
    __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)v54);
    return 0xFFFFFFFFLL;
  }

  int v17 = v46;
  *int v46 = 0u;
  v46[1] = 0u;
  uint64_t v47 = *(void *)(*(void *)(a1 + 48) + 32LL);
  int v50 = *(void **)(v47 + 40);
  int v48 = (void *)(v47 + 40);
  for (uint64_t i = v50; i; uint64_t i = (void *)*i)
    int v48 = i;
  void *v48 = v46;
  *((_DWORD *)v46 + 2) = a2;
  if (a2 != 1)
  {
    if (!v18) {
      goto LABEL_16;
    }
    if (*((_DWORD *)v18 + 14))
    {
      int v74 = v46;
      if (!v14) {
        uint64_t v14 = (uint64_t)"in_memory_buffer";
      }
      if (!xmlStrEqual((const xmlChar *)v14, v18[1]))
      {
        uint64_t v53 = "The schema document '%s' cannot be included or redefined, since it was already imported";
        goto LABEL_118;
      }

      int v17 = v74;
    }

    if (v18[2] || v18[3] == (const xmlChar *)a8)
    {
LABEL_92:
      *((void *)v17 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = v18;
      goto LABEL_130;
    }

    BOOL v63 = v17;
    uint64_t ChameleonSchemaBucket = xmlSchemaGetChameleonSchemaBucket(a1, v14, a8);
    if (ChameleonSchemaBucket)
    {
      *((void *)v63 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = ChameleonSchemaBucket;
      goto LABEL_130;
    }

    uint64_t v18 = 0LL;
    goto LABEL_139;
  }

  *((void *)v46 + 2) = a9;
  if (!v14) {
    goto LABEL_130;
  }
  if (v18)
  {
    if (!*((_DWORD *)v18 + 14))
    {
      unint64_t v51 = v46;
      int v52 = xmlStrEqual((const xmlChar *)v14, v18[1]);
      int v17 = v51;
      if (!v52)
      {
        uint64_t v53 = "The schema document '%s' cannot be imported, since it was already included or redefined";
LABEL_118:
        xmlSchemaCustomErr4((_DWORD *)a1, v19, a7, 0LL, (const xmlChar *)v53, (const xmlChar *)v14, 0LL, 0LL, 0LL);
        goto LABEL_130;
      }
    }

    goto LABEL_92;
  }

  BOOL v63 = v46;
  uint64_t SchemaBucketByTNS = xmlSchemaGetSchemaBucketByTNS(a1, (uint64_t)a9);
  uint64_t v18 = (const xmlChar **)SchemaBucketByTNS;
  if (!SchemaBucketByTNS)
  {
LABEL_139:
    int v17 = v63;
    goto LABEL_16;
  }

  *((void *)v63 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = SchemaBucketByTNS;
  int v65 = *(const xmlChar **)(SchemaBucketByTNS + 8);
  if (v65)
  {
    if (!xmlStrEqual((const xmlChar *)v14, v65)) {
      xmlSchemaCustomWarning( (_DWORD *)a1,  3083,  a7,  (const xmlChar *)"Skipping import of schema located at '%s' for the namespace '%s', since this namespace was alre ady imported with the schema located at '%s'",  (const xmlChar *)v14,  a9,  (xmlChar *)v18[1]);
    }
    goto LABEL_130;
  }

  int v17 = v63;
  *(void *)(SchemaBucketByTNS + 8) = v14;
  if (*(void *)(SchemaBucketByTNS + 32))
  {
    xmlSchemaInternalErr2( (_DWORD *)a1,  (const xmlChar *)"xmlSchemaAddSchemaDoc",  (const xmlChar *)"trying to load a schema doc, but a doc is already assigned to the schema bucket",  0LL);
    return 0xFFFFFFFFLL;
  }

LABEL_130:
        uint64_t result = 0LL;
        if (a10) {
          *a10 = v18;
        }
        return result;
      }

      xmlSchemaCustomErr4( (_DWORD *)a1,  3067,  a7,  0LL,  (const xmlChar *)"Failed to parse the XML resource '%s'",  (const xmlChar *)v14,  0LL,  0LL,  0LL);
      xmlFreeParserCtxt(v26);
      return *(unsigned int *)(a1 + 32);
    }
  }

  else
  {
    if (!a5)
    {
      uint64_t v14 = 0LL;
      goto LABEL_122;
    }

    xmlDocPtr Memory = xmlCtxtReadMemory(v26, a5, a6, 0LL, 0LL, 2);
    if (!Memory)
    {
      uint64_t v14 = (uint64_t)"in_memory_buffer";
      goto LABEL_122;
    }

    xmlDocPtr File = Memory;
    uint64_t v14 = (uint64_t)"in_memory_buffer";
    Memory->URL = xmlStrdup((const xmlChar *)"in_memory_buffer");
  }

  xmlFreeParserCtxt(v26);
LABEL_29:
  xmlNodePtr RootElement = xmlDocGetRootElement(File);
  if (!RootElement)
  {
    xmlSchemaCustomErr4( (_DWORD *)a1,  1759,  a7,  0LL,  (const xmlChar *)"The document '%s' has no document element",  (const xmlChar *)v14,  0LL,  0LL,  0LL);
    goto LABEL_69;
  }

  uint64_t v31 = RootElement;
  xmlNodePtr v32 = 0LL;
  childreuint64_t n = RootElement;
  do
  {
LABEL_31:
    int v34 = children;
    if (v32)
    {
      xmlUnlinkNode(v32);
      xmlFreeNode(v32);
    }

    xmlElementType type = v34->type;
    if (type != XML_ELEMENT_NODE && type != XML_CDATA_SECTION_NODE)
    {
      xmlNodePtr v32 = v34;
      if (type != XML_TEXT_NODE) {
        goto LABEL_53;
      }
      xmlElementContentPtr content = v34->content;
      if (!content)
      {
LABEL_45:
        if (xmlNodeGetSpacePreserve(v34) == 1) {
          xmlNodePtr v32 = 0LL;
        }
        else {
          xmlNodePtr v32 = v34;
        }
        goto LABEL_48;
      }

      while (1)
      {
        unsigned int v38 = *content;
        if (v38 > 0x20) {
          break;
        }
        if (((1LL << v38) & 0x100002600LL) == 0)
        {
          if (*content) {
            break;
          }
          goto LABEL_45;
        }

        ++content;
      }
    }

    xmlNodePtr v32 = 0LL;
LABEL_48:
    childreuint64_t n = v34->children;
    if (!children) {
      break;
    }
    unsigned int v39 = children->type;
    BOOL v40 = v39 > 0x11;
    int v41 = (1 << v39) & 0x20060;
  }

  while (v40 || v41 == 0);
  do
  {
LABEL_53:
    childreuint64_t n = v34->next;
    if (children) {
      goto LABEL_31;
    }
    int v34 = v34->parent;
    if (v34) {
      BOOL v43 = v34 == v31;
    }
    else {
      BOOL v43 = 1;
    }
  }

  while (!v43);
  if (v32)
  {
    xmlUnlinkNode(v32);
    xmlFreeNode(v32);
  }

  if (!v31->ns
    || !xmlStrEqual(v31->name, (const xmlChar *)"schema")
    || !xmlStrEqual(v31->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
  {
    xmlSchemaCustomErr4( (_DWORD *)a1,  1772,  a7,  0LL,  (const xmlChar *)"The XML document '%s' is not a schema document",  (const xmlChar *)v14,  0LL,  0LL,  0LL);
LABEL_69:
    if (!a4)
    {
      xmlFreeDoc(File);
      if (v18) {
        v18[4] = 0LL;
      }
    }

    return *(unsigned int *)(a1 + 32);
  }

  Prop = xmlSchemaGetProp(a1, v31, (xmlChar *)"targetNamespace");
  if (v18)
  {
LABEL_65:
    *((_DWORD *)v18 + 12) = 1;
    v18[3] = Prop;
    v18[4] = (const xmlChar *)File;
    v18[1] = (const xmlChar *)v14;
    v18[2] = Prop;
    if (a4) {
      *((_DWORD *)v18 + 15) = 1;
    }
LABEL_126:
    if (a2 <= 1) {
      ++*((_DWORD *)v18 + 14);
    }
    if (v73) {
      *((void *)v73 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = v18;
    }
    goto LABEL_130;
  }

  unsigned int v56 = **(const xmlChar ***)(a1 + 48);
  if (!v56)
  {
    xmlSchemaInternalErr2( (_DWORD *)a1,  (const xmlChar *)"xmlSchemaBucketCreate",  (const xmlChar *)"no main schema on constructor",  0LL);
    goto LABEL_159;
  }

  int v57 = xmlMalloc(0x58uLL);
  if (!v57)
  {
    __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"allocating schema bucket");
    goto LABEL_159;
  }

  uint64_t v18 = (const xmlChar **)v57;
  *(_OWORD *)int v57 = 0u;
  *((_OWORD *)v57 + 1) = 0u;
  *((void *)v57 + 1xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = 0LL;
  *((_OWORD *)v57 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
  *((_OWORD *)v57 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0u;
  *((_OWORD *)v57 + 2) = 0u;
  *((void *)v57 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = Prop;
  _DWORD *v57 = a2;
  uint64_t v58 = (const xmlChar *)xmlSchemaItemListCreate();
  v18[8] = v58;
  if (!v58 || (int v59 = (const xmlChar *)xmlSchemaItemListCreate(), (v18[9] = v59) == 0LL))
  {
    xmlFree(v18);
    goto LABEL_159;
  }

  unsigned int v60 = *(void **)(a1 + 48);
  uint64_t v61 = v60[3];
  if (!v61 || *(int *)(v61 + 8) <= 0)
  {
    if ((a2 & 0xFFFFFFFE) == 2)
    {
      uint64_t v62 = "first bucket but it's an include or redefine";
LABEL_157:
      xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaBucketCreate", (const xmlChar *)v62, 0LL);
      goto LABEL_158;
    }

    *(_DWORD *)uint64_t v18 = 0;
    v60[1] = v18;
    v18[10] = v56;
    *((void *)v56 + 1) = Prop;
    if (a2 > 1) {
      goto LABEL_143;
    }
LABEL_150:
    int v71 = (xmlHashTable *)*((void *)v56 + 12);
    if (!v71)
    {
      int v71 = xmlHashCreateDict(5, *(xmlDictPtr *)(*(void *)(a1 + 48) + 16LL));
      *((void *)v56 + 12) = v71;
      if (!v71) {
        goto LABEL_158;
      }
    }

    if (Prop) {
      int v72 = Prop;
    }
    else {
      int v72 = (const xmlChar *)"##";
    }
    if (!xmlHashAddEntry(v71, v72, v18)) {
      goto LABEL_161;
    }
    uint64_t v62 = "failed to add the schema bucket to the hash";
    goto LABEL_157;
  }

  if (a2 == 1)
  {
    int v70 = (const xmlChar *)xmlSchemaNewSchema(a1);
    v18[10] = v70;
    if (!v70)
    {
LABEL_158:
      xmlSchemaBucketFree(v18);
      goto LABEL_159;
    }

    *((void *)v70 + 1) = Prop;
    goto LABEL_150;
  }

  if (!a2)
  {
    uint64_t v62 = "main bucket but it's not the first one";
    goto LABEL_157;
  }

LABEL_143:
  uint64_t v68 = v60[4];
  if (*(_DWORD *)v68 >= 2u) {
    uint64_t v68 = *(void *)(v68 + 80);
  }
  v18[10] = (const xmlChar *)v68;
  int v69 = (void *)*((void *)v56 + 16);
  if (!v69)
  {
    int v69 = xmlSchemaItemListCreate();
    *((void *)v56 + 16) = v69;
    if (!v69) {
      goto LABEL_158;
    }
  }

  xmlSchemaItemListAdd((uint64_t)v69, (uint64_t)v18);
LABEL_161:
LABEL_159:
  uint64_t result = 0xFFFFFFFFLL;
  if (!a4)
  {
    xmlFreeDoc(File);
    return 0xFFFFFFFFLL;
  }

  return result;
}

        int v65 = 0;
        goto LABEL_147;
      }

      if (!v26) {
        goto LABEL_143;
      }
      xmlNodePtr v32 = 0LL;
      uint64_t v33 = 0LL;
      int v65 = 0;
      int v34 = (uint64_t *)(v11 + 24);
      while (1)
      {
        if (!v26->ns
          || (!xmlStrEqual(v26->name, (const xmlChar *)"element")
           || !xmlStrEqual(v26->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
          && (!v26->ns
           || (!xmlStrEqual(v26->name, (const xmlChar *)"group")
            || !xmlStrEqual(v26->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
           && (!v26->ns
            || (!xmlStrEqual(v26->name, (const xmlChar *)"any")
             || !xmlStrEqual(v26->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
            && (!v26->ns
             || (!xmlStrEqual(v26->name, (const xmlChar *)"choice")
              || !xmlStrEqual(v26->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
             && (!v26->ns
              || !xmlStrEqual(v26->name, (const xmlChar *)"sequence")
              || !xmlStrEqual(v26->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))))))
        {
          uint64_t v58 = "(annotation?, (element | group | choice | sequence | any)*)";
LABEL_146:
          xmlSchemaPContentErr(a1, 3033, a3, (uint64_t)v26, 0LL, (xmlChar *)v58);
          goto LABEL_147;
        }

        if (v26->ns)
        {
          if (xmlStrEqual(v26->name, (const xmlChar *)"element")
            && xmlStrEqual(v26->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
          {
            xmlGenericErrorFunc v35 = xmlSchemaParseElement(a1, a2, v26, &v67, 0);
            uint64_t v33 = (uint64_t)v35;
            if (v35) {
              uint64_t v36 = v67 == 0;
            }
            else {
              uint64_t v36 = 1;
            }
            uint64_t v37 = v65;
            if (!v36) {
              uint64_t v37 = v65 + 1;
            }
            int v65 = v37;
            if (!v35) {
              goto LABEL_126;
            }
            goto LABEL_123;
          }

          if (v26->ns)
          {
            if (xmlStrEqual(v26->name, (const xmlChar *)"group")
              && xmlStrEqual(v26->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
            {
              unsigned int v38 = xmlSchemaParseModelGroupDefRef((_DWORD *)a1, a2, (uint64_t)v26);
              uint64_t v33 = (uint64_t)v38;
              unsigned int v39 = v65;
              if (v38) {
                unsigned int v39 = v65 + 1;
              }
              int v65 = v39;
              if (*(_DWORD *)(a1 + 188))
              {
                BOOL v40 = *(void *)(a1 + 216);
                if (v40)
                {
                  if (v38 && **(_DWORD **)(v40 + 8) == 17)
                  {
                    int v41 = v38[3];
                    if (!v41) {
                      goto LABEL_123;
                    }
                    uint64_t v42 = *(xmlChar **)(v41 + 24);
                    if (v42 != *(xmlChar **)(v40 + 32)) {
                      goto LABEL_123;
                    }
                    BOOL v43 = *(const xmlChar **)(v41 + 32);
                    if (v43 != *(const xmlChar **)(v40 + 40)) {
                      goto LABEL_123;
                    }
                    if (*(_DWORD *)(a1 + 224))
                    {
                      int v66 = 0LL;
                      int v44 = xmlSchemaFormatQName(&v66, v43, v42);
                      xmlSchemaCustomErr4( (_DWORD *)a1,  3081,  (uint64_t)v26,  0LL,  (const xmlChar *)"The redefining model group definition '%s' must not contain more than one refer ence to the redefined definition",  v44,  0LL,  0LL,  0LL);
                    }

                    else
                    {
                      if (*((_DWORD *)v38 + 8) == 1 && *((_DWORD *)v38 + 9) == 1) {
                        goto LABEL_141;
                      }
                      int v66 = 0LL;
                      int v57 = xmlSchemaFormatQName(&v66, v43, v42);
                      xmlSchemaCustomErr4( (_DWORD *)a1,  3081,  (uint64_t)v26,  0LL,  (const xmlChar *)"The redefining model group definition '%s' must not contain a reference to the redefined definition with a maxOccurs/minOccurs other than 1",  v57,  0LL,  0LL,  0LL);
                    }

                    if (v66) {
                      xmlFree(v66);
                    }
                    uint64_t v33 = 0LL;
LABEL_141:
                    *(void *)(*(void *)(a1 + 216) + 16LL) = v33;
                    ++*(_DWORD *)(a1 + 224);
                    if (!v33) {
                      goto LABEL_126;
                    }
LABEL_123:
                    uint64_t v55 = (uint64_t *)(v32 + 16);
                    if (!v32) {
                      uint64_t v55 = v34;
                    }
                    *uint64_t v55 = v33;
                    xmlNodePtr v32 = v33;
                    goto LABEL_126;
                  }
                }
              }

              goto LABEL_122;
            }

            if (v26->ns)
            {
              if (xmlStrEqual(v26->name, (const xmlChar *)"any")
                && xmlStrEqual(v26->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
              {
                xmlNodePtr properties = (uint64_t)v26->properties;
                if (properties)
                {
                  while (1)
                  {
                    int v46 = *(void *)(properties + 72);
                    if (!v46) {
                      break;
                    }
                    if (xmlStrEqual(*(const xmlChar **)(v46 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema")) {
                      goto LABEL_97;
                    }
LABEL_103:
                    xmlNodePtr properties = *(void *)(properties + 48);
                    if (!properties) {
                      goto LABEL_104;
                    }
                  }

                  if (xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"id")
                    || xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"minOccurs")
                    || xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"maxOccurs")
                    || xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"namespace")
                    || xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"processContents"))
                  {
                    goto LABEL_103;
                  }

            if ((v82 & 1) == 0)
            {
              if (++v44 == v79) {
                goto LABEL_155;
              }
              goto LABEL_97;
            }

uint64_t xmlSchemaParseNewDocWithContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(v6 + 32);
  unsigned __int32 v8 = (int *)(a2 + 48);
  int v9 = *(_DWORD *)(a2 + 48);
  if (v9)
  {
    unsigned int v10 = v9 & 0xFFFFFFFE;
    if ((v9 & 2) != 0) {
      unsigned int v10 = v9 & 0xFFFFFFFE ^ 2;
    }
    int v11 = v10 & 4 | *(_DWORD *)(a2 + 48) & 3;
    int v12 = v10 & 8;
    if ((v10 & 8) != 0) {
      unsigned int v13 = v10 & 0xFFFFFFFB ^ 8;
    }
    else {
      unsigned int v13 = v10 & 0xFFFFFFFB;
    }
    int v14 = v13 & 0x10;
    int v15 = v13 & 0x20;
    if ((v13 & 0x20) != 0) {
      unsigned int v16 = v13 & 0xFFFFFFEF ^ 0x20;
    }
    else {
      unsigned int v16 = v13 & 0xFFFFFFEF;
    }
    int v17 = v16 & 0x40;
    int v18 = v16 & 0x80;
    if ((v16 & 0x80) != 0) {
      unsigned int v19 = v16 & 0xFFFFFFBF ^ 0x80;
    }
    else {
      unsigned int v19 = v16 & 0xFFFFFFBF;
    }
    if (v11 | v14 | v17 | v12 | v15 | v19 & 0x100 | v18) {
      *unsigned __int32 v8 = v19 & 0xFFFFFEAA;
    }
  }

  uint64_t v103 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = *(void *)(a3 + 32);
  *(void *)(a1 + 6xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = a2;
  uint64_t v20 = *(const xmlChar **)(a3 + 24);
  *(void *)(a1 + 20xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v20;
  *(void *)(v6 + 32) = a3;
  if (v20 && xmlStrEqual(v20, (const xmlChar *)"http://www.w3.org/2001/XMLSchema")) {
    *(_DWORD *)(a1 + 18xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 1;
  }
  ++*(_DWORD *)(a3 + 52);
  xmlNodePtr RootElement = xmlDocGetRootElement(*(const xmlDoc **)(a3 + 32));
  int v22 = *(_DWORD *)(a1 + 36);
  PropNode = (xmlNode *)xmlSchemaGetPropNode((uint64_t)RootElement, (xmlChar *)"id");
  if (PropNode)
  {
    uint64_t v24 = xmlSchemaPValAttrNodeID(a1, PropNode);
    if ((_DWORD)v24 == -1) {
      goto LABEL_45;
    }
  }

  else
  {
    uint64_t v24 = 0LL;
  }

  uint64_t v25 = xmlSchemaGetPropNode((uint64_t)RootElement, (xmlChar *)"targetNamespace");
  if (!v25) {
    goto LABEL_25;
  }
  int v26 = (xmlNode *)v25;
  BuiltInType = xmlSchemaGetBuiltInType(XML_SCHEMAS_ANYURI);
  uint64_t v28 = xmlSchemaPValAttrNode((_DWORD *)a1, v26, BuiltInType, 0LL);
  uint64_t v24 = v28;
  if ((_DWORD)v28 == -1) {
    goto LABEL_45;
  }
  if ((_DWORD)v28)
  {
    *(_DWORD *)(a1 + 196) = 3037;
  }

  else
  {
LABEL_25:
    xmlSchemaParserCtxtPtr v29 = (xmlNode *)xmlSchemaGetPropNode((uint64_t)RootElement, (xmlChar *)"elementFormDefault");
    if (v29)
    {
      uint64_t v30 = (uint64_t)v29;
      int NodeContent = xmlSchemaGetNodeContent(a1, v29);
      if (xmlSchemaPValAttrFormDefault(NodeContent, v8, 1))
      {
        xmlSchemaPSimpleTypeErr(a1, 1705, v30, 0LL, "(qualified | unqualified)", NodeContent, 0LL, 0);
        uint64_t v24 = 1LL;
      }

      else
      {
        uint64_t v24 = 0LL;
      }
    }

    xmlNodePtr v32 = (xmlNode *)xmlSchemaGetPropNode((uint64_t)RootElement, (xmlChar *)"attributeFormDefault");
    if (v32)
    {
      uint64_t v33 = (uint64_t)v32;
      int v34 = xmlSchemaGetNodeContent(a1, v32);
      if (xmlSchemaPValAttrFormDefault(v34, v8, 2))
      {
        xmlSchemaPSimpleTypeErr(a1, 1701, v33, 0LL, "(qualified | unqualified)", v34, 0LL, 0);
        uint64_t v24 = 1LL;
      }

      else
      {
        uint64_t v24 = 0LL;
      }
    }

    xmlGenericErrorFunc v35 = (xmlNode *)xmlSchemaGetPropNode((uint64_t)RootElement, (xmlChar *)"finalDefault");
    if (v35)
    {
      uint64_t v36 = (uint64_t)v35;
      uint64_t v37 = (xmlChar *)xmlSchemaGetNodeContent(a1, v35);
      uint64_t v38 = xmlSchemaPValAttrBlockFinal(v37, v8, 4, 8, -1, 16, 32);
      uint64_t v24 = v38;
      if ((_DWORD)v38 == -1) {
        goto LABEL_45;
      }
      if ((_DWORD)v38)
      {
        xmlSchemaPSimpleTypeErr( a1,  3037,  v36,  0LL,  "(#all | List of (extension | restriction | list | union))",  v37,  0LL,  0);
        uint64_t v24 = 1LL;
      }
    }

    unsigned int v39 = (xmlNode *)xmlSchemaGetPropNode((uint64_t)RootElement, (xmlChar *)"blockDefault");
    if (v39)
    {
      uint64_t v40 = (uint64_t)v39;
      int v41 = (xmlChar *)xmlSchemaGetNodeContent(a1, v39);
      uint64_t v42 = xmlSchemaPValAttrBlockFinal(v41, v8, 64, 128, 256, -1, -1);
      uint64_t v24 = v42;
      if ((_DWORD)v42 == -1) {
        goto LABEL_45;
      }
      if ((_DWORD)v42)
      {
        xmlSchemaPSimpleTypeErr( a1,  3037,  v40,  0LL,  "(#all | List of (extension | restriction | substitution))",  v41,  0LL,  0);
        uint64_t v24 = 1LL;
      }
    }
  }

  if (v22 != *(_DWORD *)(a1 + 36)) {
    uint64_t v24 = *(unsigned int *)(a1 + 32);
  }
  if (!(_DWORD)v24)
  {
    childreuint64_t n = RootElement->children;
    if (!children)
    {
      uint64_t v24 = 0LL;
      goto LABEL_45;
    }

    int v101 = *(_DWORD *)(a1 + 36);
    uint64_t v102 = v7;
    uint64_t v24 = 0LL;
    uint64_t v45 = (const xmlChar *)"include";
    int v46 = (const xmlChar *)"import";
    uint64_t v47 = (const xmlChar *)"redefine";
    while (children->ns
         && (xmlStrEqual(children->name, v45)
          && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema")
          || children->ns
          && (xmlStrEqual(children->name, v46)
           && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema")
           || children->ns
           && (xmlStrEqual(children->name, v47)
            && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema")
            || children->ns
            && xmlStrEqual(children->name, (const xmlChar *)"annotation")
            && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema")))))
    {
      if (children->ns)
      {
        if (xmlStrEqual(children->name, (const xmlChar *)"annotation")
          && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        {
          int v48 = xmlSchemaParseAnnotation((_DWORD *)a1, (uint64_t)children, 1);
          if (*(void *)(a2 + 40))
          {
            if (v48)
            {
              uint64_t v49 = (void *)*v48;
              xmlFree(v48);
              if (v49)
              {
                int v100 = v9;
                int v50 = v47;
                unint64_t v51 = v45;
                int v52 = v46;
                do
                {
                  uint64_t v53 = (void *)*v49;
                  xmlFree(v49);
                  uint64_t v49 = v53;
                }

                while (v53);
                int v46 = v52;
                uint64_t v45 = v51;
                uint64_t v47 = v50;
                int v9 = v100;
              }
            }
          }

          else
          {
            *(void *)(a2 + 4xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v48;
          }

          goto LABEL_101;
        }

        if (children->ns)
        {
          if (!xmlStrEqual(children->name, v46)
            || !xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
          {
            if (!children->ns) {
              goto LABEL_101;
            }
            if (xmlStrEqual(children->name, v45)
              && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
            {
              int v54 = *(_DWORD *)(a1 + 36);
              uint64_t v61 = a1;
              uint64_t v62 = a2;
              BOOL v63 = children;
              unsigned int v64 = 2;
            }

            else
            {
              if (!children->ns
                || !xmlStrEqual(children->name, v47)
                || !xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
              {
                goto LABEL_101;
              }

              int v54 = *(_DWORD *)(a1 + 36);
              uint64_t v61 = a1;
              uint64_t v62 = a2;
              BOOL v63 = children;
              unsigned int v64 = 3;
            }

            uint64_t v24 = xmlSchemaParseIncludeOrRedefine(v61, v62, v63, v64);
            if ((_DWORD)v24 == -1) {
              goto LABEL_221;
            }
            goto LABEL_99;
          }

          int v54 = *(_DWORD *)(a1 + 36);
          *(void *)uint64_t v105 = 0LL;
          str2 = 0LL;
          xmlParserCtxtPtr v104 = 0LL;
          uint64_t properties = (uint64_t)children->properties;
          if (properties)
          {
            while (1)
            {
              uint64_t v56 = *(void *)(properties + 72);
              if (!v56) {
                break;
              }
              if (xmlStrEqual(*(const xmlChar **)(v56 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema")) {
                goto LABEL_76;
              }
LABEL_80:
              uint64_t properties = *(void *)(properties + 48);
              if (!properties) {
                goto LABEL_81;
              }
            }

            if (xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"id")
              || xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"namespace")
              || xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"schemaLocation"))
            {
              goto LABEL_80;
            }

LABEL_101:
      childreuint64_t n = children->next;
      if (!children) {
        goto LABEL_218;
      }
    }

    while (1)
    {
      if (!children->ns) {
        goto LABEL_215;
      }
      if (xmlStrEqual(children->name, (const xmlChar *)"complexType")
        && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
      {
        xmlSchemaParseComplexType(a1, a2, (uint64_t)children, 1);
        goto LABEL_217;
      }

      if (!children->ns) {
        goto LABEL_215;
      }
      if (xmlStrEqual(children->name, (const xmlChar *)"simpleType")
        && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
      {
        xmlSchemaParseSimpleType(a1, a2, children, 1);
        goto LABEL_217;
      }

      if (!children->ns) {
        goto LABEL_215;
      }
      if (xmlStrEqual(children->name, (const xmlChar *)"element")
        && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
      {
        xmlSchemaParseElement(a1, a2, children, 0LL, 1);
        goto LABEL_217;
      }

      if (!children->ns)
      {
LABEL_215:
        uint64_t parent = (uint64_t)children->parent;
        BOOL v85 = "((include | import | redefine | annotation)*, (((simpleType | complexType | group | attributeGroup) | elem"
              "ent | attribute | notation), annotation*)*)";
        uint64_t v86 = a1;
        uint64_t v88 = (uint64_t)children;
        goto LABEL_216;
      }

      if (xmlStrEqual(children->name, (const xmlChar *)"attribute")
        && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
      {
        uint64_t v89 = xmlSchemaGetPropNode((uint64_t)children, (xmlChar *)"name");
        if (!v89)
        {
          xmlSchemaPMissingAttrErr(a1, (uint64_t)children, (xmlChar *)"name");
          goto LABEL_217;
        }

        uint64_t v90 = (xmlNode *)v89;
        str2 = 0LL;
        BOOL v91 = xmlSchemaGetBuiltInType(XML_SCHEMAS_NCNAME);
        if (xmlStrEqual(str2, (const xmlChar *)"xmlns"))
        {
          xmlSchemaTypePtr v92 = xmlSchemaGetBuiltInType(XML_SCHEMAS_NCNAME);
          xmlSchemaPSimpleTypeErr( a1,  3056,  (uint64_t)v90,  (uint64_t)v92,  0LL,  0LL,  (const xmlChar *)"The value of the attribute must not match 'xmlns'",  0);
          goto LABEL_217;
        }

        if (xmlStrEqual(*(const xmlChar **)(a1 + 200), (const xmlChar *)"http://www.w3.org/2001/XMLSchema-instance")) {
          xmlSchemaCustomErr4( (_DWORD *)a1,  3057,  (uint64_t)children,  0LL,  (const xmlChar *)"The target namespace must not match '%s'",  (const xmlChar *)"http://www.w3.org/2001/XMLSchema-instance",  0LL,  0LL,  0LL);
        }
        uint64_t v77 = xmlSchemaAddAttribute(a1, (uint64_t)str2, *(void *)(a1 + 200), (uint64_t)children, 1);
        if (v77)
        {
          uint64_t v78 = v77;
          *(_DWORD *)(v77 + 120) |= 1u;
          uint64_t v79 = (uint64_t)children->properties;
          if (v79)
          {
            while (1)
            {
              uint64_t v80 = *(void *)(v79 + 72);
              if (!v80) {
                break;
              }
              if (xmlStrEqual(*(const xmlChar **)(v80 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema")) {
                goto LABEL_144;
              }
LABEL_150:
              uint64_t v79 = *(void *)(v79 + 48);
              if (!v79) {
                goto LABEL_151;
              }
            }

            if (xmlStrEqual(*(const xmlChar **)(v79 + 16), (const xmlChar *)"id")
              || xmlStrEqual(*(const xmlChar **)(v79 + 16), (const xmlChar *)"default")
              || xmlStrEqual(*(const xmlChar **)(v79 + 16), (const xmlChar *)"fixed")
              || xmlStrEqual(*(const xmlChar **)(v79 + 16), (const xmlChar *)"name")
              || xmlStrEqual(*(const xmlChar **)(v79 + 16), (const xmlChar *)"type"))
            {
              goto LABEL_150;
            }

  if (a1->error) {
    return;
  }
  for (nuint64_t n = a1->cur; ; a1->cur = nn)
  {
    uint64_t v49 = *nn;
    if (v49 > 0x20 || ((1LL << v49) & 0x100002600LL) == 0) {
      break;
    }
    ++nn;
  }

  if (v49 != 91)
  {
    unint64_t v51 = *nn;
LABEL_120:
    if (v51 != 47) {
      goto LABEL_130;
    }
    if (nn[1] == 47)
    {
      for (uint64_t i1 = nn + 2; ; ++i1)
      {
        a1->cur = i1;
        int v54 = *i1;
        uint64_t v21 = v54 > 0x20;
        uint64_t v55 = (1LL << v54) & 0x100002600LL;
        if (v21 || v55 == 0) {
          break;
        }
      }

      xmlXPathCompExprAdd((uint64_t)a1, *((_DWORD *)a1->comp + 4), 0xFFFFFFFF, 0xAu, 6u, 1u, 0, 0LL, 0LL);
    }

uint64_t xmlSchemaFixupComponents(uint64_t a1, uint64_t a2)
{
  xmlGenericErrorFunc v2 = *(void **)(a1 + 48);
  uint64_t v3 = v2[5];
  if (!v3 || !*(_DWORD *)(v3 + 8)) {
    return 0LL;
  }
  uint64_t v148 = v2[4];
  if (!v148) {
    v2[4] = a2;
  }
  for (uint64_t i = (void *)v2[7]; i; uint64_t i = (void *)*i)
  {
    uint64_t v7 = i[1];
    RedefCompInGraph = (int *)xmlSchemaFindRedefCompInGraph(i[6], *(_DWORD *)v7, i[4], i[5]);
    if (!RedefCompInGraph)
    {
      int v150 = 0LL;
      if (i[2]) {
        unsigned int v13 = (_DWORD *)i[2];
      }
      else {
        unsigned int v13 = (_DWORD *)v7;
      }
      uint64_t ComponentNode = xmlSchemaGetComponentNode(v13);
      if (*(_DWORD *)v7 == 1)
      {
        if (*(_DWORD *)(v7 + 160) == 45) {
          int v15 = "complex type definition";
        }
        else {
          int v15 = "simple type definition";
        }
      }

      else
      {
        int v15 = xmlSchemaItemTypeToStr(*(_DWORD *)v7);
      }

      int v17 = xmlSchemaFormatQName(&v150, (const xmlChar *)i[5], (xmlChar *)i[4]);
      xmlSchemaCustomErr4( (_DWORD *)a1,  3081,  ComponentNode,  0LL,  (const xmlChar *)"The %s '%s' to be redefined could not be found in the redefined schema",  (const xmlChar *)v15,  v17,  0LL,  0LL);
LABEL_30:
      if (v150)
      {
        xmlFree(v150);
        int v150 = 0LL;
      }

      continue;
    }

    int v9 = RedefCompInGraph;
    int v10 = *(_DWORD *)v7;
    if ((*(_DWORD *)v7 - 4) < 2)
    {
      int v16 = RedefCompInGraph[22];
      if ((v16 & 0x40000000) != 0) {
        goto LABEL_27;
      }
      RedefCompInGraph[22] = v16 | 0x40000000;
      *(void *)(v7 + 112) = RedefCompInGraph;
    }

    else
    {
      if (v10 != 16)
      {
        if (v10 != 17)
        {
          xmlSchemaInternalErr2( (_DWORD *)a1,  (const xmlChar *)"xmlSchemaResolveRedefReferences",  (const xmlChar *)"Unexpected redefined component type",  0LL);
          break;
        }

        int v11 = RedefCompInGraph[14];
        if ((v11 & 2) != 0)
        {
LABEL_27:
          int v150 = 0LL;
          uint64_t v20 = (_DWORD *)i[2];
          if (!v20) {
            uint64_t v20 = (_DWORD *)i[1];
          }
          uint64_t v21 = xmlSchemaGetComponentNode(v20);
          ComponentDesignatiouint64_t n = xmlSchemaGetComponentDesignation((xmlChar **)&v150, v9);
          xmlSchemaCustomErr4( (_DWORD *)a1,  3081,  v21,  0LL,  (const xmlChar *)"The referenced %s was already redefined. Multiple redefinition of the same component is not supported",  ComponentDesignation,  0LL,  0LL,  0LL);
          goto LABEL_30;
        }

        RedefCompInGraph[14] = v11 | 2;
        uint64_t v12 = i[2];
        if (v12) {
          *(void *)(v12 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = RedefCompInGraph;
        }
LABEL_34:
        i[3] = RedefCompInGraph;
        continue;
      }

      int v18 = RedefCompInGraph[18];
      if ((v18 & 8) != 0) {
        goto LABEL_27;
      }
      RedefCompInGraph[18] = v18 | 8;
      uint64_t v19 = i[2];
      if (!v19) {
        goto LABEL_34;
      }
      *(void *)(v19 + 8) = RedefCompInGraph;
      i[3] = 0LL;
    }
  }

  xmlSchemaAddComponents(a1, a2);
  *(void *)(a1 + 16xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = 0LL;
  uint64_t v149 = v2;
  uint64_t v26 = v2[5];
  uint64_t v27 = *(unsigned int *)(v26 + 8);
  if ((int)v27 >= 1)
  {
    uint64_t v28 = 0LL;
    uint64_t v147 = (_DWORD *)(a1 + 36);
    xmlSchemaParserCtxtPtr v29 = *(uint64_t **)v26;
    while (2)
    {
      uint64_t v30 = v29[v28];
      int v31 = *(_DWORD *)v30;
      switch(*(_DWORD *)v30)
      {
        case 4:
        case 5:
          if (*(void *)(v30 + 112)) {
            goto LABEL_59;
          }
          Type = xmlSchemaGetType(*(void *)(a1 + 64), *(const xmlChar **)(v30 + 96), *(xmlChar **)(v30 + 104));
          *(void *)(v30 + 112) = Type;
          if (Type)
          {
            int v31 = *(_DWORD *)v30;
LABEL_59:
            if (v31 != 4 && (v31 != 1 || *(_DWORD *)(v30 + 160) == 45))
            {
              uint64_t v44 = *(void *)(v30 + 56);
              if (!v44) {
                goto LABEL_158;
              }
              if (*(_DWORD *)v44 != 25) {
                goto LABEL_158;
              }
              uint64_t v45 = *(void *)(v44 + 24);
              if (!v45 || *(_DWORD *)v45 != 2000) {
                goto LABEL_158;
              }
              *(void *)(v44 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
              NamedComponent = xmlSchemaGetNamedComponent( *(void *)(a1 + 64),  *(_DWORD *)(v45 + 16),  *(const xmlChar **)(v45 + 24),  *(xmlChar **)(v45 + 32));
              if (NamedComponent)
              {
                uint64_t v47 = (_DWORD *)NamedComponent[3];
                if (v47)
                {
                  uint64_t v48 = *(void *)(v30 + 56);
                  *(void *)(v48 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v47;
                  if (*v47 == 8 && *(_DWORD *)(v48 + 36) != 1)
                  {
                    uint64_t v49 = xmlSchemaGetComponentNode((_DWORD *)v48);
                    xmlSchemaCustomErr4( (_DWORD *)a1,  3091,  v49,  0LL,  (const xmlChar *)"The particle's {max occurs} must be 1, since the reference resolves to an 'all' model group",  0LL,  0LL,  0LL,  0LL);
                  }

                  goto LABEL_158;
                }
              }

              else
              {
                uint64_t v92 = xmlSchemaGetComponentNode(*(_DWORD **)(v30 + 56));
                xmlSchemaPResCompAttrErr( a1,  0LL,  v92,  (uint64_t)"ref",  *(xmlChar **)(v45 + 24),  *(const xmlChar **)(v45 + 32),  *(_DWORD *)(v45 + 16),  0LL);
              }

              *(void *)(v30 + 56) = 0LL;
              goto LABEL_158;
            }

            int v62 = *(_DWORD *)(v30 + 88);
            if ((v62 & 0x80) != 0)
            {
              uint64_t v77 = (void *)(v30 + 168);
              uint64_t v78 = *(void **)(v30 + 168);
              if (v78)
              {
                uint64_t v79 = 0LL;
                do
                {
                  uint64_t v80 = v78[1];
                  uint64_t v82 = *(xmlChar **)(v80 + 24);
                  int v81 = *(xmlChar **)(v80 + 32);
                  char v83 = xmlSchemaGetType(*(void *)(a1 + 64), v82, v81);
                  if (v83 && (*v83 == 4 || *v83 == 1 && v83[40] != 45))
                  {
                    v78[1] = v83;
                    int v84 = (void *)*v78;
                    uint64_t v79 = v78;
                  }

                  else
                  {
                    xmlSchemaPResCompAttrErr(a1, v30, *(void *)(v30 + 72), (uint64_t)"memberTypes", v82, v81, 4, 0LL);
                    int v84 = (void *)*v78;
                    if (v79)
                    {
                      *uint64_t v79 = v84;
                      int v84 = (void *)*v78;
                    }

                    else
                    {
                      *uint64_t v77 = v84;
                    }

                    xmlFree(v78);
                  }

                  uint64_t v78 = v84;
                }

                while (v84);
              }

              else
              {
                uint64_t v79 = 0LL;
              }

              uint64_t v88 = *(void *)(v30 + 56);
              if (v88)
              {
                while (1)
                {
                  uint64_t v89 = xmlMalloc(0x10uLL);
                  if (!v89) {
                    break;
                  }
                  void *v89 = 0LL;
                  v89[1] = v88;
                  if (v79) {
                    uint64_t v90 = v79;
                  }
                  else {
                    uint64_t v90 = v77;
                  }
                  *uint64_t v90 = v89;
                  uint64_t v88 = *(void *)(v88 + 8);
                  uint64_t v79 = v89;
                  if (!v88) {
                    goto LABEL_158;
                  }
                }

                ++*v147;
                __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"allocating a type link");
              }

LABEL_211:
      ++v112;
      if (!--v111)
      {
        for (uint64_t j = 0LL; j != v27; ++j)
        {
          xmlNodePtr v124 = (_DWORD *)v29[j];
          if ((*v124 & 0xFFFFFFFE) == 6)
          {
            for (uint64_t k = *((void *)v124 + 3); k; uint64_t k = *(void *)(k + 16))
            {
              uint64_t v126 = *(void *)(k + 24);
              if (v126 && *(_DWORD *)v126 == 17) {
                *(void *)(k + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = *(void *)(v126 + 24);
              }
            }
          }
        }

        uint64_t v127 = v27;
        v128 = v29;
        while (1)
        {
          int v129 = (_DWORD *)*v128;
          if (*(_DWORD *)*v128 == 16 && (v129[18] & 0x11) == 0x10)
          {
            xmlSchemaAttributeGroupExpandRefs(a1, (uint64_t)v129);
            if (*(_DWORD *)(a1 + 32) == 3069) {
              break;
            }
          }

          ++v128;
          if (!--v127)
          {
            if (*v106) {
              goto LABEL_183;
            }
            uint64_t v130 = v27;
            size_t v131 = v29;
            while (1)
            {
              uint64_t v132 = (_DWORD *)*v131;
              if (*(_DWORD *)*v131 == 4 && (*((_BYTE *)v132 + 91) & 0x20) == 0)
              {
                xmlSchemaFixupSimpleTypeStageOne((_DWORD *)a1, (uint64_t)v132);
                if (*(_DWORD *)(a1 + 32) == 3069) {
                  goto LABEL_159;
                }
              }

              ++v131;
              if (!--v130)
              {
                if (*v106) {
                  goto LABEL_183;
                }
                uint64_t v133 = v27;
                BOOL v134 = v29;
                while (1)
                {
                  uint64_t v135 = (_DWORD *)*v134;
                  if (*(_DWORD *)*v134 == 4)
                  {
                    uint64_t v24 = (_DWORD *)*((void *)v135 + 21);
                    if (v24)
                    {
                      if ((v135[22] & 0x80) != 0) {
                        xmlSchemaCheckUnionTypeDefCircularRecur(a1, v135, v24);
                      }
                      if (*(_DWORD *)(a1 + 32) == 3069) {
                        goto LABEL_159;
                      }
                    }
                  }

                  ++v134;
                  if (!--v133)
                  {
                    if (*v106) {
                      goto LABEL_183;
                    }
                    uint64_t v136 = v27;
                    int v137 = (xmlSchemaType **)v29;
                    while (1)
                    {
                      uint64_t v138 = *v137;
                      if ((*v137)->type == XML_SCHEMA_TYPE_SIMPLE && (v138->flags & 0x400000) == 0)
                      {
                        xmlSchemaFixupSimpleTypeStageTwo((xmlSchemaParserCtxt *)a1, v138, (uint64_t)v24, v25);
                        if (*(_DWORD *)(a1 + 32) == 3069) {
                          goto LABEL_159;
                        }
                      }

                      ++v137;
                      if (!--v136)
                      {
                        if (*v106) {
                          goto LABEL_183;
                        }
                        uint64_t v139 = v27;
                        int v140 = v29;
                        while (1)
                        {
                          if (*(_DWORD *)*v140 == 15)
                          {
                            xmlSchemaCheckAttrPropsCorrect((_DWORD *)a1, *v140);
                            if (*(_DWORD *)(a1 + 32) == 3069) {
                              goto LABEL_159;
                            }
                          }

                          ++v140;
                          if (!--v139)
                          {
                            if (*v106) {
                              goto LABEL_183;
                            }
                            uint64_t v141 = v27;
                            xmlXIncludeCtxtPtr v142 = v29;
                            while (1)
                            {
                              int v143 = (_DWORD *)*v142;
                              if (*(_DWORD *)*v142 == 26)
                              {
                                if (*((void *)v143 + 7))
                                {
                                  xmlSchemaCheckAttrUsePropsCorrect((_DWORD *)a1, (uint64_t)v143);
                                  if (*(_DWORD *)(a1 + 32) == 3069) {
                                    goto LABEL_159;
                                  }
                                }
                              }

                              ++v142;
                              if (!--v141)
                              {
                                if (*v147) {
                                  goto LABEL_183;
                                }
                                uint64_t v144 = v27;
                                while (1)
                                {
                                  xmlNodePtr v145 = (_DWORD *)*v29;
                                  if (*(_DWORD *)*v29 == 16)
                                  {
                                    uint64_t v146 = *((void *)v145 + 14);
                                    if (v146)
                                    {
                                      if (*(int *)(v146 + 8) >= 2)
                                      {
                                        xmlSchemaCheckAGPropsCorrect(a1, (uint64_t)v145);
                                        if (*(_DWORD *)(a1 + 32) == 3069) {
                                          goto LABEL_159;
                                        }
                                      }
                                    }
                                  }

                                  ++v29;
                                  if (!--v144)
                                  {
                                    uint64_t v93 = (_DWORD *)(a1 + 36);
                                    if (*v147) {
                                      goto LABEL_183;
                                    }
                                    goto LABEL_161;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }

LABEL_159:
        uint64_t v23 = 0xFFFFFFFFLL;
LABEL_184:
        int v97 = v149;
        goto LABEL_185;
      }
    }

    int v119 = (uint64_t *)*((void *)v113 + 14);
    if (v119)
    {
      if ((v113[18] & 0x10) != 0)
      {
        xmlParserInputPtr v120 = (_DWORD *)xmlSchemaCheckAttrGroupCircularRecur(*v112, v119);
        if (v120)
        {
          uint64_t v121 = v120;
          int v150 = 0LL;
          uint64_t v122 = xmlSchemaGetComponentNode(v120);
          xmlSchemaGetComponentQName(&v150, v113);
          xmlSchemaPCustomErrExt( a1,  3073,  0LL,  v122,  (const xmlChar *)"Circular reference to the attribute group '%s' defined");
          if (v150) {
            xmlFree(v150);
          }
          *((void *)v121 + 1) = 0LL;
LABEL_208:
          uint64_t v106 = (_DWORD *)(a1 + 36);
        }
      }
    }

  if ((*(_BYTE *)(a2 + 88) & 2) == 0) {
    goto LABEL_261;
  }
  int v62 = *(void *)(v42 + 152);
  if (!v62) {
    goto LABEL_261;
  }
  BOOL v63 = *(void *)(a2 + 152);
  if (!v63)
  {
    *(void *)(a2 + 152) = v62;
    goto LABEL_261;
  }

  unsigned int v64 = *(_DWORD *)(v63 + 44);
  if (v64 != *(_DWORD *)(v62 + 44))
  {
    if (v64) {
      goto LABEL_261;
    }
    *(_DWORD *)(v63 + 4xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 1;
    uint64_t v71 = *(void **)(v63 + 48);
    if (!v71) {
      goto LABEL_181;
    }
    do
    {
      int v72 = (void *)*v71;
      xmlFree(v71);
      uint64_t v71 = v72;
    }

    while (v72);
    goto LABEL_180;
  }

  uint64_t v65 = *(void **)(v63 + 48);
  uint64_t v66 = *(void **)(v62 + 48);
  if ((v65 != 0LL) != (v66 == 0LL))
  {
    uint64_t v67 = *(void *)(v63 + 56);
    uint64_t v68 = *(void *)(v62 + 56);
    if ((v67 == 0) != (v68 != 0) && (!v67 || *(void *)(v67 + 8) == *(void *)(v68 + 8)))
    {
      if (!v65) {
        goto LABEL_261;
      }
      uint64_t v86 = *(void **)(v63 + 48);
LABEL_219:
      uint64_t v87 = (void *)(v62 + 48);
      while (1)
      {
        uint64_t v87 = (void *)*v87;
        if (!v87) {
          break;
        }
        if (v86[1] == v87[1])
        {
          uint64_t v86 = (void *)*v86;
          if (v86) {
            goto LABEL_219;
          }
          goto LABEL_261;
        }
      }
    }
  }

  if (v65 && v66)
  {
    do
    {
      uint64_t v69 = v65;
      while (v66[1] != v69[1])
      {
        uint64_t v69 = (void *)*v69;
        if (!v69)
        {
          uint64_t v70 = xmlSchemaNewWildcardNsConstraint(a1);
          if (!v70) {
            goto LABEL_19;
          }
          v70[1] = v66[1];
          const char *v70 = *(void *)(v63 + 48);
          *(void *)(v63 + 48) = v70;
          break;
        }
      }

      uint64_t v66 = (void *)*v66;
    }

    while (v66);
    goto LABEL_261;
  }

  uint64_t v73 = *(void **)(v63 + 56);
  uint64_t v79 = *(void *)(v62 + 56);
  if (!v73) {
    goto LABEL_267;
  }
  uint64_t v80 = v73[1];
  if (v79 && v80 != *(void *)(v79 + 8))
  {
LABEL_193:
    v73[1] = 0LL;
    goto LABEL_261;
  }

  if (!v66 || !v80)
  {
LABEL_267:
    if (v79 && v65 && *(void *)(v79 + 8)) {
      goto LABEL_201;
    }
    if (v73 && v66 && !v73[1])
    {
      if (v65) {
        BOOL v85 = *(void **)(v63 + 48);
      }
      else {
        BOOL v85 = *(void **)(v62 + 48);
      }
      goto LABEL_227;
    }

    if (!v79) {
      goto LABEL_261;
    }
    if (!v65) {
      goto LABEL_261;
    }
    uint64_t v88 = *(void *)(v79 + 8);
    BOOL v85 = *(void **)(v63 + 48);
    if (v88) {
      goto LABEL_261;
    }
LABEL_227:
    while (v85[1])
    {
      BOOL v85 = (void *)*v85;
      if (!v85)
      {
        if (v73) {
          goto LABEL_261;
        }
        if (v65)
        {
          do
          {
            uint64_t v89 = (void *)*v65;
            xmlFree(v65);
            uint64_t v65 = v89;
          }

          while (v89);
          *(void *)(v63 + 48) = 0LL;
        }

        goto LABEL_245;
      }
    }

    *(_DWORD *)(v63 + 4xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 1;
    if (!v65) {
      goto LABEL_182;
    }
    do
    {
      uint64_t v92 = (void *)*v65;
      xmlFree(v65);
      uint64_t v65 = v92;
    }

    while (v92);
LABEL_180:
    *(void *)(v63 + 48) = 0LL;
LABEL_181:
    uint64_t v73 = *(void **)(v63 + 56);
    goto LABEL_182;
  }

  int v81 = *(void *)(v63 + 56);
  if (v65)
  {
LABEL_201:
    int v81 = *(void *)(v62 + 56);
    uint64_t v66 = *(void **)(v63 + 48);
  }

  uint64_t v82 = 0;
  char v83 = 0;
  while (1)
  {
    int v84 = v66[1];
    if (v84)
    {
      if (v84 == *(void *)(v81 + 8)) {
        char v83 = 1;
      }
    }

    else
    {
      uint64_t v82 = 1;
    }

    if (v83 && v82) {
      break;
    }
    uint64_t v66 = (void *)*v66;
    if (!v66) {
      goto LABEL_234;
    }
  }

  char v83 = 1;
  uint64_t v82 = 1;
LABEL_234:
  if (v83 && v82)
  {
    *(_DWORD *)(v63 + 4xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 1;
    if (!v65)
    {
LABEL_182:
      if (v73)
      {
        xmlFree(v73);
        *(void *)(v63 + 56) = 0LL;
      }

      goto LABEL_261;
    }

    do
    {
      uint64_t v90 = (void *)*v65;
      xmlFree(v65);
      uint64_t v65 = v90;
    }

    while (v90);
    goto LABEL_180;
  }

  if (v83 && !v82)
  {
    if (v65)
    {
      do
      {
        BOOL v91 = (void *)*v65;
        xmlFree(v65);
        uint64_t v65 = v91;
      }

      while (v91);
      *(void *)(v63 + 48) = 0LL;
      uint64_t v73 = *(void **)(v63 + 56);
    }

    if (!v73)
    {
LABEL_245:
      uint64_t v73 = xmlSchemaNewWildcardNsConstraint(a1);
      *(void *)(v63 + 56) = v73;
      if (!v73) {
        goto LABEL_19;
      }
    }

    goto LABEL_193;
  }

  if (v83 || !v82)
  {
    if (!v73 && !v83 && !v82)
    {
      if (v65)
      {
        do
        {
          uint64_t v93 = (void *)*v65;
          xmlFree(v65);
          uint64_t v65 = v93;
        }

        while (v93);
        *(void *)(v63 + 48) = 0LL;
      }

      uint64_t v94 = xmlSchemaNewWildcardNsConstraint(a1);
      *(void *)(v63 + 56) = v94;
      if (!v94) {
        goto LABEL_19;
      }
      v94[1] = *(void *)(*(void *)(v62 + 56) + 8LL);
    }
  }

  else
  {
    xmlSchemaPErr(a1, *(void *)(v63 + 24), 1794, "The union of the wildcard is not expressible.\n", 0LL, 0LL);
  }

LABEL_209:
    if (*(_DWORD *)(a1 + 32) == 3069) {
      goto LABEL_159;
    }
    if (*v106) {
      goto LABEL_183;
    }
    goto LABEL_211;
  }

  uint64_t v93 = (_DWORD *)(a1 + 36);
  if (*(_DWORD *)(a1 + 36))
  {
LABEL_183:
    uint64_t v23 = *(unsigned int *)(a1 + 32);
    goto LABEL_184;
  }

      uint64_t v107 = v165;
      if ((_DWORD)v105 != v93 || !v165) {
        goto LABEL_241;
      }
    }

    else
    {
      uint64_t v107 = v165;
      if (!v165)
      {
        uint64_t v165 = 0;
        goto LABEL_241;
      }
    }

    int v112 = v107 - 1;
    if (v107 >= 1) {
      break;
    }
    LODWORD(v11xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0;
LABEL_228:
    if ((_DWORD)v113 == v107)
    {
LABEL_229:
      uint64_t v167 = (void *)v90[2];
      if (v167)
      {
        uint64_t v118 = *((int *)v90 + 7);
        uint64_t v101 = v159;
        uint64_t v93 = v161;
        if (*((_DWORD *)v90 + 6) >= (int)v118)
        {
          *((_DWORD *)v90 + 7) = 2 * v118;
          int v119 = xmlRealloc(v167, 16 * v118);
          v90[2] = v119;
          uint64_t v167 = v119;
          if (!v119)
          {
            uint64_t v155 = "re-allocating IDC list of node-table items";
            goto LABEL_336;
          }
        }
      }

      else
      {
        int v123 = xmlMalloc(0x50uLL);
        v90[2] = v123;
        uint64_t v101 = v159;
        uint64_t v93 = v161;
        uint64_t v167 = v123;
        if (!v123)
        {
          uint64_t v155 = "allocating IDC list of node-table items";
          goto LABEL_336;
        }

        *((_DWORD *)v90 + 7) = 1;
      }

      xmlNodePtr v124 = *((int *)v90 + 6);
      *((_DWORD *)v90 + 6) = v124 + 1;
      *((void *)v167 + v12xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v104;
    }

    else
    {
      xmlParserInputPtr v120 = *((_DWORD *)v90 + 6);
      *((_DWORD *)v90 + 6) = v120 - 1;
      *((void *)v167 + (int)v11xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = *((void *)v167 + v112);
      if (v120 != v107) {
        *((void *)v167 + v112) = *((void *)v167 + v120 - 1);
      }
      uint64_t v121 = v112;
      uint64_t v122 = (void *)v90[4];
      if (!v122)
      {
        uint64_t v122 = xmlSchemaItemListCreate();
        v90[4] = v122;
        if (!v122) {
          goto LABEL_304;
        }
      }

      xmlSchemaItemListAdd((uint64_t)v122, v85);
      uint64_t v165 = v121;
      uint64_t v101 = v159;
      uint64_t v93 = v161;
    }

LABEL_161:
  if (*(void *)(*(void *)(a1 + 48) + 56LL))
  {
    xmlSchemaCheckSRCRedefineSecond(a1);
    if (*(_DWORD *)(a1 + 36)) {
      goto LABEL_183;
    }
  }

  if ((int)v27 < 1)
  {
LABEL_170:
    uint64_t v99 = v93;
    int v97 = v149;
    uint64_t v100 = v149[5];
    uint64_t v101 = *(unsigned int *)(v100 + 8);
    if ((int)v101 < 1)
    {
      uint64_t v23 = 0LL;
      goto LABEL_185;
    }

    uint64_t v102 = *(uint64_t **)v100;
    uint64_t v103 = *(unsigned int *)(v100 + 8);
    xmlParserCtxtPtr v104 = *(uint64_t **)v100;
    while (1)
    {
      uint64_t v105 = (_DWORD *)*v104;
      if (*(_DWORD *)*v104 == 14 && (*((_BYTE *)v105 + 90) & 4) == 0)
      {
        xmlSchemaCheckElementDeclComponent((uint64_t)v105, a1);
        if (*(_DWORD *)(a1 + 32) == 3069) {
          break;
        }
      }

      ++v104;
      if (!--v103)
      {
        if (!*v99)
        {
          do
          {
            if (*(_DWORD *)*v102 == 5) {
              xmlSchemaBuildContentModel(*v102, a1);
            }
            ++v102;
            --v101;
          }

          while (v101);
          if (!*v99)
          {
            uint64_t v23 = 0LL;
            goto LABEL_184;
          }
        }

        goto LABEL_183;
      }
    }
  }

  else
  {
    uint64_t v94 = v93;
    uint64_t v95 = 0LL;
    uint64_t v96 = 8 * v27;
    int v97 = v149;
    while (1)
    {
      uint64_t v98 = *(void *)(*(void *)v149[5] + v95);
      if (*(_DWORD *)v98 == 5 && (*(_BYTE *)(v98 + 90) & 0x40) == 0)
      {
        xmlSchemaFixupComplexType(a1, v98);
        if (*(_DWORD *)(a1 + 32) == 3069) {
          break;
        }
      }

      v95 += 8LL;
      if (v96 == v95)
      {
        uint64_t v93 = v94;
        if (*v94) {
          goto LABEL_183;
        }
        goto LABEL_170;
      }
    }
  }

  uint64_t v23 = 0xFFFFFFFFLL;
LABEL_185:
  v97[4] = v148;
  *(_DWORD *)(v97[5] + 8LL) = 0;
  uint64_t v107 = (xmlHashTable *)v97[6];
  if (v107)
  {
    xmlHashFree(v107, (xmlHashDeallocator)xmlSchemaSubstGroupFreeEntry);
    v97[6] = 0LL;
  }

  unsigned int v108 = (void *)v97[7];
  if (v108)
  {
    do
    {
      unsigned int v109 = (void *)*v108;
      xmlFree(v108);
      unsigned int v108 = v109;
    }

    while (v109);
    v97[7] = 0LL;
  }

  return v23;
}

void xmlSchemaSetParserErrors( xmlSchemaParserCtxtPtr ctxt, xmlSchemaValidityErrorFunc err, xmlSchemaValidityWarningFunc warn, void *ctx)
{
  do
  {
    if (!ctxt) {
      break;
    }
    *((void *)ctxt + 2) = err;
    *((void *)ctxt + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = warn;
    *((void *)ctxt + 1) = ctx;
    uint64_t v4 = *((void *)ctxt + 22);
    if (!v4) {
      break;
    }
    *(void *)(v4 + 16) = err;
    *(void *)(v4 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = warn;
    *(void *)(v4 + 8) = ctx;
    xmlValidCtxt ctxt = *(xmlSchemaParserCtxtPtr *)(v4 + 160);
  }

  while (ctxt);
}

void xmlSchemaSetValidErrors( xmlSchemaValidCtxtPtr ctxt, xmlSchemaValidityErrorFunc err, xmlSchemaValidityWarningFunc warn, void *ctx)
{
  if (ctxt)
  {
    *((void *)ctxt + 2) = err;
    *((void *)ctxt + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = warn;
    *((void *)ctxt + 1) = ctx;
    for (uint64_t i = (void *)*((void *)ctxt + 20); i; uint64_t i = (void *)v5[20])
    {
      i[2] = err;
      i[3] = warn;
      i[1] = ctx;
      int v5 = (void *)i[22];
      if (!v5) {
        break;
      }
      v5[2] = err;
      v5[3] = warn;
      v5[1] = ctx;
    }
  }

void xmlSchemaSetParserStructuredErrors(xmlSchemaParserCtxtPtr ctxt, xmlStructuredErrorFunc serror, void *ctx)
{
  do
  {
    if (!ctxt) {
      break;
    }
    *((void *)ctxt + 5) = serror;
    *((void *)ctxt + 1) = ctx;
    uint64_t v3 = *((void *)ctxt + 22);
    if (!v3) {
      break;
    }
    *(void *)(v3 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
    *(void *)(v3 + 32) = serror;
    *(void *)(v3 + 8) = ctx;
    *(void *)(v3 + 16) = 0LL;
    xmlValidCtxt ctxt = *(xmlSchemaParserCtxtPtr *)(v3 + 160);
  }

  while (ctxt);
}

void xmlSchemaSetValidStructuredErrors(xmlSchemaValidCtxtPtr ctxt, xmlStructuredErrorFunc serror, void *ctx)
{
  if (ctxt)
  {
    *((void *)ctxt + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0LL;
    *((void *)ctxt + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = serror;
    *((void *)ctxt + 1) = ctx;
    *((void *)ctxt + 2) = 0LL;
    for (uint64_t i = (void *)*((void *)ctxt + 20); i; uint64_t i = (void *)v4[20])
    {
      i[5] = serror;
      i[1] = ctx;
      uint64_t v4 = (void *)i[22];
      if (!v4) {
        break;
      }
      v4[3] = 0LL;
      v4[4] = serror;
      v4[1] = ctx;
      v4[2] = 0LL;
    }
  }

int xmlSchemaGetParserErrors( xmlSchemaParserCtxtPtr ctxt, xmlSchemaValidityErrorFunc *err, xmlSchemaValidityWarningFunc *warn, void **ctx)
{
  if (!ctxt) {
    return -1;
  }
  if (err) {
    *err = (xmlSchemaValidityErrorFunc)*((void *)ctxt + 2);
  }
  if (warn) {
    *waruint64_t n = (xmlSchemaValidityWarningFunc)*((void *)ctxt + 3);
  }
  int v4 = 0;
  if (ctx) {
    *ctx = (void *)*((void *)ctxt + 1);
  }
  return v4;
}

xmlSchemaValidCtxtPtr xmlSchemaNewValidCtxt(xmlSchemaPtr schema)
{
  xmlGenericErrorFunc v2 = xmlMalloc(0x160uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    v2[20] = 0u;
    v2[21] = 0u;
    v2[18] = 0u;
    v2[19] = 0u;
    v2[16] = 0u;
    v2[17] = 0u;
    v2[14] = 0u;
    v2[15] = 0u;
    v2[12] = 0u;
    v2[13] = 0u;
    v2[10] = 0u;
    v2[11] = 0u;
    v2[8] = 0u;
    v2[9] = 0u;
    v2[6] = 0u;
    v2[7] = 0u;
    v2[4] = 0u;
    v2[5] = 0u;
    v2[2] = 0u;
    v2[3] = 0u;
    *xmlGenericErrorFunc v2 = 0u;
    v2[1] = 0u;
    *(_DWORD *)xmlGenericErrorFunc v2 = 2;
    *((void *)v2 + 3xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = xmlDictCreate();
    *((void *)v3 + 39) = xmlSchemaItemListCreate();
    *((void *)v3 + 5) = schema;
  }

  else
  {
    __xmlSimpleError(17, 2, 0, 0LL, (uint64_t)"allocating validation context");
  }

  return (xmlSchemaValidCtxtPtr)v3;
}

void *xmlSchemaItemListCreate()
{
  int v0 = xmlMalloc(0x10uLL);
  uint64_t v1 = v0;
  if (v0)
  {
    void *v0 = 0LL;
    v0[1] = 0LL;
  }

  else
  {
    __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"allocating an item list structure");
  }

  return v1;
}

void xmlSchemaValidateSetFilename(xmlSchemaValidCtxtPtr vctxt, const char *filename)
{
  if (vctxt)
  {
    int v4 = (void *)*((void *)vctxt + 12);
    if (v4) {
      xmlFree(v4);
    }
    if (filename) {
      int v5 = xmlStrdup((const xmlChar *)filename);
    }
    else {
      int v5 = 0LL;
    }
    *((void *)vctxt + 12) = v5;
  }

void xmlSchemaFreeIDCStateObjList(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      xmlGenericErrorFunc v2 = (void *)v1[1];
      uint64_t v3 = (void *)v1[3];
      if (v3) {
        xmlFree(v3);
      }
      int v4 = (xmlStreamCtxt *)v1[7];
      if (v4) {
        xmlFreeStreamCtxt(v4);
      }
      xmlFree(v1);
      uint64_t v1 = v2;
    }

    while (v2);
  }

void xmlSchemaClearAttrInfos(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 296);
  if (v1)
  {
    if (v1 >= 1)
    {
      uint64_t v3 = 0LL;
      do
      {
        uint64_t v4 = *(void *)(*(void *)(a1 + 288) + 8 * v3);
        if ((*(_BYTE *)(v4 + 64) & 1) != 0)
        {
          int v5 = *(void **)(v4 + 24);
          if (v5) {
            xmlFree(v5);
          }
          uint64_t v6 = *(void **)(v4 + 32);
          if (v6) {
            xmlFree(v6);
          }
        }

        if ((*(_BYTE *)(v4 + 64) & 2) != 0)
        {
          uint64_t v7 = *(void **)(v4 + 40);
          if (v7) {
            xmlFree(v7);
          }
        }

        unsigned __int32 v8 = *(xmlSchemaVal **)(v4 + 48);
        if (v8) {
          xmlSchemaFreeValue(v8);
        }
        *(_OWORD *)(v4 + 8xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = 0u;
        *(_OWORD *)(v4 + 96) = 0u;
        *(_OWORD *)(v4 + 48) = 0u;
        *(_OWORD *)(v4 + 6xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0u;
        *(_OWORD *)(v4 + 16) = 0u;
        *(_OWORD *)(v4 + 32) = 0u;
        *(_OWORD *)uint64_t v4 = 0u;
        ++v3;
      }

      while (v3 < *(int *)(a1 + 296));
    }

    *(_DWORD *)(a1 + 296) = 0;
  }

void xmlSchemaClearElemInfo(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 136) = 0LL;
  uint64_t v4 = (void **)(a2 + 24);
  if ((*(_BYTE *)(a2 + 64) & 1) != 0)
  {
    if (*v4)
    {
      xmlFree(*v4);
      *uint64_t v4 = 0LL;
    }

    int v5 = *(void **)(a2 + 32);
    if (v5)
    {
      xmlFree(v5);
      *(void *)(a2 + 32) = 0LL;
    }
  }

  else
  {
    *uint64_t v4 = 0LL;
    *(void *)(a2 + 32) = 0LL;
  }

  if ((*(_BYTE *)(a2 + 64) & 2) != 0)
  {
    uint64_t v6 = *(void **)(a2 + 40);
    if (!v6) {
      goto LABEL_11;
    }
    xmlFree(v6);
  }

  *(void *)(a2 + 4xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = 0LL;
LABEL_11:
  uint64_t v7 = *(xmlSchemaVal **)(a2 + 48);
  if (v7)
  {
    xmlSchemaFreeValue(v7);
    *(void *)(a2 + 48) = 0LL;
  }

  uint64_t v8 = *(void *)(a2 + 104);
  if (v8)
  {
    do
    {
      uint64_t v9 = *(void *)(v8 + 8);
      if (*(void *)(v8 + 40))
      {
        int v10 = *(_DWORD *)(v8 + 48);
        if (v10 >= 1)
        {
          for (uint64_t i = 0LL; i < v10; ++i)
          {
            uint64_t v12 = *(void **)(*(void *)(v8 + 40) + 8 * i);
            if (v12)
            {
              xmlFree(v12);
              *(void *)(*(void *)(v8 + 40) + 8 * i) = 0LL;
              int v10 = *(_DWORD *)(v8 + 48);
            }
          }
        }
      }

      uint64_t v13 = *(void *)(v8 + 56);
      if (v13)
      {
        if (*(_DWORD *)(v8 + 32) == 24 && *(int *)(v13 + 8) >= 1)
        {
          uint64_t v14 = 0LL;
          do
          {
            int v15 = *(void ***)(*(void *)v13 + 8 * v14);
            xmlFree(v15[1]);
            xmlFree(v15);
            ++v14;
            uint64_t v13 = *(void *)(v8 + 56);
          }

          while (v14 < *(int *)(v13 + 8));
        }

        if (*(void *)v13) {
          xmlFree(*(void **)v13);
        }
        xmlFree((void *)v13);
        *(void *)(v8 + 56) = 0LL;
      }

      int v16 = *(xmlHashTable **)(v8 + 64);
      if (v16)
      {
        xmlHashFree(v16, (xmlHashDeallocator)xmlFreeIDCHashEntry);
        *(void *)(v8 + 6xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
      }

      *(void *)(v8 + 8) = 0LL;
      uint64_t v17 = *(void *)(a1 + 224);
      if (v17) {
        *(void *)(v8 + 16) = v17;
      }
      *(void *)(a1 + 22xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v8;
      uint64_t v8 = v9;
    }

    while (v9);
    *(void *)(a2 + 10xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
  }

  int v18 = *(void **)(a2 + 96);
  if (v18)
  {
    do
    {
      uint64_t v19 = (void *)*v18;
      xmlSchemaIDCFreeBinding(v18);
      int v18 = v19;
    }

    while (v19);
    *(void *)(a2 + 96) = 0LL;
  }

  uint64_t v20 = *(xmlRegExecCtxt **)(a2 + 112);
  if (v20)
  {
    xmlRegFreeExecCtxt(v20);
    *(void *)(a2 + 112) = 0LL;
  }

  uint64_t v23 = *(void **)(a2 + 120);
  int v22 = (void *)(a2 + 120);
  uint64_t v21 = v23;
  if (v23)
  {
    xmlFree(v21);
    *int v22 = 0LL;
    v22[1] = 0LL;
  }

int xmlSchemaIsValid(xmlSchemaValidCtxtPtr ctxt)
{
  if (ctxt) {
    return *((_DWORD *)ctxt + 26) == 0;
  }
  else {
    return -1;
  }
}

int xmlSchemaGetValidErrors( xmlSchemaValidCtxtPtr ctxt, xmlSchemaValidityErrorFunc *err, xmlSchemaValidityWarningFunc *warn, void **ctx)
{
  if (!ctxt) {
    return -1;
  }
  if (err) {
    *err = (xmlSchemaValidityErrorFunc)*((void *)ctxt + 2);
  }
  if (warn) {
    *waruint64_t n = (xmlSchemaValidityWarningFunc)*((void *)ctxt + 3);
  }
  int v4 = 0;
  if (ctx) {
    *ctx = (void *)*((void *)ctxt + 1);
  }
  return v4;
}

int xmlSchemaSetValidOptions(xmlSchemaValidCtxtPtr ctxt, int options)
{
  if (ctxt)
  {
    int v2 = 1;
    while (((options >> v2) & 1) == 0)
    {
      if (++v2 == 32)
      {
        int v3 = 0;
        *((_DWORD *)ctxt + 37) = options;
        return v3;
      }
    }
  }

  return -1;
}

int xmlSchemaValidCtxtGetOptions(xmlSchemaValidCtxtPtr ctxt)
{
  if (ctxt) {
    return *((_DWORD *)ctxt + 37);
  }
  else {
    return -1;
  }
}

int xmlSchemaValidateOneElement(xmlSchemaValidCtxtPtr ctxt, xmlNodePtr elem)
{
  if (!ctxt || !elem || elem->type != XML_ELEMENT_NODE || !*((void *)ctxt + 5)) {
    return -1;
  }
  *((void *)ctxt + 6) = elem->doc;
  *((void *)ctxt + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = elem;
  *((void *)ctxt + 19) = elem;
  return xmlSchemaVStart((uint64_t)ctxt);
}

uint64_t xmlSchemaVStart(uint64_t a1)
{
  if ((xmlSchemaPreRun((void *)a1) & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  int v2 = *(const xmlDoc **)(a1 + 48);
  if (!v2)
  {
    if (*(void *)(a1 + 280))
    {
      xmlSchemaPostRun(a1);
    }

    else
    {
      if (!*(void *)(a1 + 72) || (uint64_t v21 = *(xmlParserCtxt **)(a1 + 80)) == 0LL)
      {
        int v22 = "xmlSchemaVStart";
        uint64_t v23 = "no instance to validate";
        goto LABEL_53;
      }

      uint64_t v19 = xmlParseDocument(v21);
LABEL_46:
      uint64_t v20 = v19;
      xmlSchemaPostRun(a1);
      if ((_DWORD)v20) {
        return v20;
      }
    }

    return *(unsigned int *)(a1 + 104);
  }

  xmlNodePtr RootElement = *(xmlNodePtr *)(a1 + 152);
  if (!RootElement)
  {
    xmlNodePtr RootElement = xmlDocGetRootElement(v2);
    if (!RootElement)
    {
      uint64_t v20 = 1LL;
      xmlSchemaCustomErr4( (_DWORD *)a1,  1,  0LL,  0LL,  (const xmlChar *)"The document has no document element",  0LL,  0LL,  0LL,  0LL);
      goto LABEL_55;
    }
  }

  uint64_t v4 = 0LL;
  *(_DWORD *)(a1 + 172) = -1;
  *(void *)(a1 + 152) = RootElement;
  childreuint64_t n = RootElement;
  while (1)
  {
    xmlNodePtr v6 = children;
    int v7 = *(_DWORD *)(a1 + 304);
    if (v7 != -1 && *(_DWORD *)(a1 + 172) >= v7) {
      goto LABEL_36;
    }
    int type = v6->type;
    if ((type - 3) < 2)
    {
      if (v4)
      {
        int v9 = *(_DWORD *)(v4 + 64);
        if ((v9 & 0x20) != 0) {
          *(_DWORD *)(v4 + 6xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v9 ^ 0x20;
        }
      }

      if ((xmlSchemaVPushText(a1, type, v6->content, -1, 1) & 0x80000000) != 0)
      {
        int v22 = "xmlSchemaVDocWalk";
        uint64_t v23 = "calling xmlSchemaVPushText()";
        goto LABEL_53;
      }

      goto LABEL_16;
    }

    if (type != 1)
    {
      int v22 = "xmlSchemaVDocWalk";
      uint64_t v23 = "there is at least one entity reference in the node-tree currently being validated. Processing of entities wi"
            "th this XML Schema processor is not supported (yet). Please substitute entities before validation.";
      goto LABEL_53;
    }

    ++*(_DWORD *)(a1 + 172);
    uint64_t v4 = *(void *)(a1 + 192);
    *(void *)(v4 + 8) = v6;
    *(_DWORD *)(v4 + 16) = v6->line;
    *(void *)(v4 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v6->name;
    uint64_t ns = v6->ns;
    if (ns) {
      *(void *)(v4 + 32) = ns->href;
    }
    *(_DWORD *)(v4 + 64) |= 0x20u;
    *(_DWORD *)(a1 + 296) = 0;
    uint64_t properties = v6->properties;
    if (properties) {
      break;
    }
LABEL_27:
    int v17 = xmlSchemaValidateElem((int *)a1);
    if (v17)
    {
      if (v17 != -1) {
        goto LABEL_32;
      }
      int v22 = "xmlSchemaDocWalk";
      uint64_t v23 = "calling xmlSchemaValidateElem()";
      goto LABEL_53;
    }

    int v18 = *(_DWORD *)(a1 + 304);
    if (v18 == -1 || *(_DWORD *)(a1 + 172) < v18)
    {
LABEL_16:
      childreuint64_t n = v6->children;
      if (!children) {
        goto LABEL_32;
      }
    }

    else
    {
      while (1)
      {
LABEL_32:
        if (v6->type == XML_ELEMENT_NODE)
        {
          if (v6 != *(xmlNodePtr *)(*(void *)(a1 + 192) + 8LL))
          {
            int v22 = "xmlSchemaVDocWalk";
            uint64_t v23 = "element position mismatch";
            goto LABEL_53;
          }

          uint64_t v19 = xmlSchemaValidatorPopElem((_DWORD *)a1);
          if ((v19 & 0x80000000) != 0)
          {
            int v22 = "xmlSchemaVDocWalk";
            uint64_t v23 = "calling xmlSchemaValidatorPopElem()";
            goto LABEL_53;
          }

          if (v6 == RootElement) {
            goto LABEL_46;
          }
        }

int xmlSchemaValidateDoc(xmlSchemaValidCtxtPtr ctxt, xmlDocPtr instance)
{
  int result = -1;
  if (ctxt && instance)
  {
    *((void *)ctxt + 6) = instance;
    xmlNodePtr RootElement = xmlDocGetRootElement(instance);
    *((void *)ctxt + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = RootElement;
    if (RootElement)
    {
      *((void *)ctxt + 19) = RootElement;
      return xmlSchemaVStart((uint64_t)ctxt);
    }

    else
    {
      xmlSchemaCustomErr4( ctxt,  1872,  (uint64_t)instance,  0LL,  (const xmlChar *)"The document has no document element",  0LL,  0LL,  0LL,  0LL);
      return *((_DWORD *)ctxt + 26);
    }
  }

  return result;
}

xmlSchemaSAXPlugPtr xmlSchemaSAXPlug(xmlSchemaValidCtxtPtr ctxt, xmlSAXHandlerPtr *sax, void **user_data)
{
  int v3 = 0LL;
  if (ctxt && sax && user_data)
  {
    xmlSAXHandlerPtr v7 = *sax;
    if (!*sax
      || v7->initialized == -554844497
      && (v7->startElementNs || v7->endElementNs || !v7->startElement && !v7->endElement))
    {
      uint64_t v8 = (char *)xmlMalloc(0x130uLL);
      int v3 = (xmlSchemaSAXPlugStruct *)v8;
      if (v8)
      {
        *((_OWORD *)v8 + 17) = 0u;
        *((_OWORD *)v8 + 18) = 0u;
        *((_OWORD *)v8 + 15) = 0u;
        *((_OWORD *)v8 + 16) = 0u;
        *((_OWORD *)v8 + 1xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
        *((_OWORD *)v8 + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0u;
        *((_OWORD *)v8 + 11) = 0u;
        *((_OWORD *)v8 + 12) = 0u;
        *((_OWORD *)v8 + 9) = 0u;
        *((_OWORD *)v8 + 1xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = 0u;
        *((_OWORD *)v8 + 7) = 0u;
        *((_OWORD *)v8 + 8) = 0u;
        *((_OWORD *)v8 + 5) = 0u;
        *((_OWORD *)v8 + 6) = 0u;
        *((_OWORD *)v8 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
        *((_OWORD *)v8 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0u;
        *((_OWORD *)v8 + 1) = 0u;
        *((_OWORD *)v8 + 2) = 0u;
        *(_OWORD *)uint64_t v8 = 0u;
        *(_DWORD *)uint64_t v8 = -599541215;
        int v9 = (xmlSAXHandler *)(v8 + 40);
        *((_DWORD *)v8 + 6xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = -554844497;
        *((void *)v8 + 37) = ctxt;
        *((void *)v8 + 1) = sax;
        *((void *)v8 + 2) = v7;
        if (v7)
        {
          if (v7->isStandalone) {
            *((void *)v8 + 6) = isStandaloneSplit;
          }
          if (v7->hasInternalSubset) {
            *((void *)v8 + 7) = hasInternalSubsetSplit;
          }
          if (v7->hasExternalSubset) {
            *((void *)v8 + 8) = hasExternalSubsetSplit;
          }
          if (v7->resolveEntity) {
            *((void *)v8 + 9) = resolveEntitySplit;
          }
          if (v7->getEntity) {
            *((void *)v8 + 1xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = getEntitySplit;
          }
          if (v7->entityDecl) {
            *((void *)v8 + 11) = entityDeclSplit;
          }
          if (v7->notationDecl) {
            *((void *)v8 + 12) = notationDeclSplit;
          }
          if (v7->attributeDecl) {
            *((void *)v8 + 1xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = attributeDeclSplit;
          }
          if (v7->elementDecl) {
            *((void *)v8 + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = elementDeclSplit;
          }
          if (v7->unparsedEntityDecl) {
            *((void *)v8 + 15) = unparsedEntityDeclSplit;
          }
          if (v7->setDocumentLocator) {
            *((void *)v8 + 16) = setDocumentLocatorSplit;
          }
          if (v7->startDocument) {
            *((void *)v8 + 17) = startDocumentSplit;
          }
          if (v7->endDocument) {
            *((void *)v8 + 18) = endDocumentSplit;
          }
          if (v7->comment) {
            *((void *)v8 + 25) = commentSplit;
          }
          if (v7->warning) {
            *((void *)v8 + 26) = warningSplit;
          }
          if (v7->error) {
            *((void *)v8 + 27) = errorSplit;
          }
          if (v7->fatalError) {
            *((void *)v8 + 28) = fatalErrorSplit;
          }
          if (v7->getParameterEntity) {
            *((void *)v8 + 29) = getParameterEntitySplit;
          }
          if (v7->externalSubset) {
            *((void *)v8 + 31) = externalSubsetSplit;
          }
          *((void *)v8 + 22) = charactersSplit;
          ignorableWhitespace = v7->ignorableWhitespace;
          else {
            int v11 = ignorableWhitespaceSplit;
          }
          *((void *)v8 + 2xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = v11;
          *((void *)v8 + 3xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = cdataBlockSplit;
          *((void *)v8 + 21) = referenceSplit;
          *((void *)v8 + 3xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = startElementNsSplit;
          *((void *)v8 + 35) = endElementNsSplit;
          *((void *)v8 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = user_data;
          uint64_t v12 = *user_data;
          xmlSchemaValidCtxtPtr v13 = (xmlSchemaValidCtxtPtr)v8;
        }

        else
        {
          *((void *)v8 + 3xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = xmlSchemaSAXHandleStartElementNs;
          *((void *)v8 + 35) = xmlSchemaSAXHandleEndElementNs;
          *((void *)v8 + 22) = xmlSchemaSAXHandleText;
          *((void *)v8 + 2xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = xmlSchemaSAXHandleText;
          *((void *)v8 + 3xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = xmlSchemaSAXHandleCDataSection;
          *((void *)v8 + 21) = xmlSchemaSAXHandleReference;
          uint64_t v12 = ctxt;
          xmlSchemaValidCtxtPtr v13 = ctxt;
        }

        *((void *)v8 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v12;
        *user_int data = v13;
        *sax = v9;
        *((void *)ctxt + 9) = v9;
        *((_DWORD *)ctxt + 66) |= 1u;
        xmlSchemaPreRun(ctxt);
      }
    }

    else
    {
      return 0LL;
    }
  }

  return v3;
}

void xmlSchemaSAXHandleStartElementNs( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  int v9 = *(_DWORD *)(a1 + 172) + 1;
  *(_DWORD *)(a1 + 172) = v9;
  int v10 = *(_DWORD *)(a1 + 304);
  if (v10 != -1 && v9 >= v10) {
    return;
  }
  if (xmlSchemaValidatorPushElem(a1) == -1)
  {
    int v34 = "calling xmlSchemaValidatorPushElem()";
    goto LABEL_45;
  }

  uint64_t v18 = *(void *)(a1 + 192);
  *(_DWORD *)(v18 + 16) = xmlSAX2GetLineNumber(*(void **)(a1 + 80));
  *(void *)(v18 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = a2;
  *(void *)(v18 + 32) = a4;
  *(_DWORD *)(v18 + 64) |= 0x20u;
  if (a5 >= 1)
  {
    uint64_t v19 = (_BYTE **)(a6 + 8);
    do
    {
      uint64_t v20 = *(void **)(v18 + 120);
      if (v20)
      {
        int v21 = *(_DWORD *)(v18 + 128);
        uint64_t v22 = *(int *)(v18 + 132);
        if ((int)v22 <= v21)
        {
          *(_DWORD *)(v18 + 132) = 2 * v22;
          uint64_t v20 = xmlRealloc(v20, 32 * v22);
          *(void *)(v18 + 12xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v20;
          if (!v20)
          {
            if (a1)
            {
              int v38 = *(_DWORD *)(a1 + 108) + 1;
              *(_DWORD *)(a1 + 10xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 1818;
              *(_DWORD *)(a1 + 108) = v38;
            }

            uint64_t v36 = "re-allocating namespace bindings for SAX validation";
            goto LABEL_52;
          }

          int v21 = *(_DWORD *)(v18 + 128);
        }
      }

      else
      {
        uint64_t v20 = xmlMalloc(0x50uLL);
        *(void *)(v18 + 12xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v20;
        if (!v20)
        {
          if (a1)
          {
            int v37 = *(_DWORD *)(a1 + 108) + 1;
            *(_DWORD *)(a1 + 10xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 1818;
            *(_DWORD *)(a1 + 108) = v37;
          }

          uint64_t v36 = "allocating namespace bindings for SAX validation";
          goto LABEL_52;
        }

        int v21 = 0;
        *(void *)(v18 + 128) = 0x500000000LL;
      }

      *((void *)v20 + 2 * v21) = *(v19 - 1);
      uint64_t v24 = *v19;
      v19 += 2;
      uint64_t v23 = v24;
      if (!*v24) {
        uint64_t v23 = 0LL;
      }
      *(void *)(*(void *)(v18 + 120) + 16LL * v21 + 8) = v23;
      *(_DWORD *)(v18 + 128) = v21 + 1;
      --a5;
    }

    while (a5);
  }

  if (a7 < 1)
  {
LABEL_37:
    if (xmlSchemaValidateElem((int *)a1) == -1)
    {
      int v34 = "calling xmlSchemaValidateElem()";
      goto LABEL_45;
    }

    return;
  }

  uint64_t v25 = 0LL;
  int v26 = 0;
  while (1)
  {
    int v27 = *(_DWORD *)(a9 + 8 * v25 + 32) - *(void *)(a9 + 8 * (v25 + 3));
    uint64_t v28 = (const xmlChar *)xmlMallocAtomic(v27 + 1);
    if (!v28)
    {
      if (a1)
      {
        int v35 = *(_DWORD *)(a1 + 108) + 1;
        *(_DWORD *)(a1 + 10xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 1818;
        *(_DWORD *)(a1 + 108) = v35;
      }

      uint64_t v36 = "allocating string for decoded attribute";
LABEL_52:
      __xmlSimpleError(17, 2, 0, 0LL, (uint64_t)v36);
      goto LABEL_53;
    }

    if (v27 >= 1)
    {
      uint64_t v29 = 0LL;
      uint64_t v30 = 0LL;
      while (1)
      {
        uint64_t v31 = *(void *)(a9 + 8 * (v25 + 3));
        int v32 = *(unsigned __int8 *)(v31 + v30);
        if (*(_BYTE *)(v30 + v31 + 1) != 35 || *(_BYTE *)(v30 + v31 + 2) != 51 || *(_BYTE *)(v30 + v31 + 3) != 56) {
          break;
        }
        LOBYTE(v32) = 38;
        if (*(_BYTE *)(v30 + v31 + 4) != 59) {
          goto LABEL_31;
        }
        uint64_t v33 = 5LL;
LABEL_32:
        v28[v29] = v32;
        v30 += v33;
        ++v29;
      }

      LOBYTE(v32) = 38;
LABEL_31:
      uint64_t v33 = 1LL;
      goto LABEL_32;
    }

    LODWORD(v29) = 0;
LABEL_35:
    v28[v29] = 0;
    if (xmlSchemaValidatorPushAttribute( (_DWORD *)a1,  0LL,  *(_DWORD *)(v18 + 16),  *(const xmlChar **)(a9 + 8 * v25),  *(const xmlChar **)(a9 + 8 * v25 + 16),  v28) == -1) {
      break;
    }
    ++v26;
    v25 += 5LL;
    if (v26 == a7) {
      goto LABEL_37;
    }
  }

  int v34 = "calling xmlSchemaValidatorPushAttribute()";
LABEL_45:
  xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaSAXHandleStartElementNs", (const xmlChar *)v34, 0LL);
LABEL_53:
  *(_DWORD *)(a1 + 10xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = -1;
  xmlStopParser(*(xmlParserCtxtPtr *)(a1 + 80));
}

void xmlSchemaSAXHandleEndElementNs(uint64_t a1, const xmlChar *a2, uint64_t a3, const xmlChar *a4)
{
  int v6 = *(_DWORD *)(a1 + 304);
  if (v6 != -1)
  {
    int v7 = *(_DWORD *)(a1 + 172);
    if (v7 > v6)
    {
      *(_DWORD *)(a1 + 172) = v7 - 1;
      return;
    }

    *(_DWORD *)(a1 + 30xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = -1;
  }

  if (!xmlStrEqual(*(const xmlChar **)(*(void *)(a1 + 192) + 24LL), a2)
    || !xmlStrEqual(*(const xmlChar **)(*(void *)(a1 + 192) + 32LL), a4))
  {
    xmlSchemaInternalErr2( (_DWORD *)a1,  (const xmlChar *)"xmlSchemaSAXHandleEndElementNs",  (const xmlChar *)"elem pop mismatch",  0LL);
  }

  if ((xmlSchemaValidatorPopElem((_DWORD *)a1) & 0x80000000) != 0)
  {
    xmlSchemaInternalErr2( (_DWORD *)a1,  (const xmlChar *)"xmlSchemaSAXHandleEndElementNs",  (const xmlChar *)"calling xmlSchemaValidatorPopElem()",  0LL);
    *(_DWORD *)(a1 + 10xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = -1;
    xmlStopParser(*(xmlParserCtxtPtr *)(a1 + 80));
  }

void xmlSchemaSAXHandleText(uint64_t a1, xmlChar *str2, int len)
{
  int v3 = *(_DWORD *)(a1 + 172);
  if ((v3 & 0x80000000) == 0)
  {
    int v5 = *(_DWORD *)(a1 + 304);
    if (v5 == -1 || v3 < v5)
    {
      uint64_t v7 = *(void *)(a1 + 192);
      int v8 = *(_DWORD *)(v7 + 64);
      if ((v8 & 0x20) != 0) {
        *(_DWORD *)(v7 + 6xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v8 ^ 0x20;
      }
      if (xmlSchemaVPushText(a1, 3, str2, len, 3) == -1)
      {
        xmlSchemaInternalErr2( (_DWORD *)a1,  (const xmlChar *)"xmlSchemaSAXHandleCDataSection",  (const xmlChar *)"calling xmlSchemaVPushText()",  0LL);
        *(_DWORD *)(a1 + 10xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = -1;
        xmlStopParser(*(xmlParserCtxtPtr *)(a1 + 80));
      }
    }
  }

void xmlSchemaSAXHandleCDataSection(uint64_t a1, xmlChar *str2, int len)
{
  int v3 = *(_DWORD *)(a1 + 172);
  if ((v3 & 0x80000000) == 0)
  {
    int v5 = *(_DWORD *)(a1 + 304);
    if (v5 == -1 || v3 < v5)
    {
      uint64_t v7 = *(void *)(a1 + 192);
      int v8 = *(_DWORD *)(v7 + 64);
      if ((v8 & 0x20) != 0) {
        *(_DWORD *)(v7 + 6xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v8 ^ 0x20;
      }
      if (xmlSchemaVPushText(a1, 4, str2, len, 3) == -1)
      {
        xmlSchemaInternalErr2( (_DWORD *)a1,  (const xmlChar *)"xmlSchemaSAXHandleCDataSection",  (const xmlChar *)"calling xmlSchemaVPushText()",  0LL);
        *(_DWORD *)(a1 + 10xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = -1;
        xmlStopParser(*(xmlParserCtxtPtr *)(a1 + 80));
      }
    }
  }

uint64_t xmlSchemaSAXHandleReference(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 172);
  if ((v1 & 0x80000000) == 0)
  {
    int v2 = *(_DWORD *)(result + 304);
    if (v2 == -1 || v1 < v2)
    {
      xmlGenericErrorFunc v4 = *__xmlGenericError();
      int v5 = __xmlGenericErrorContext();
      return ((uint64_t (*)(void *, const char *, ...))v4)( *v5,  "Unimplemented block at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemas.c",  27583);
    }
  }

  return result;
}

uint64_t internalSubsetSplit(uint64_t result)
{
  if (result)
  {
    int v1 = *(uint64_t (***)(void))(result + 16);
    if (v1)
    {
      if (*v1) {
        return (*v1)(*(void *)(result + 32));
      }
    }
  }

  return result;
}

uint64_t isStandaloneSplit(uint64_t a1)
{
  else {
    return 0LL;
  }
}

uint64_t hasInternalSubsetSplit(uint64_t a1)
{
  else {
    return 0LL;
  }
}

uint64_t hasExternalSubsetSplit(uint64_t a1)
{
  else {
    return 0LL;
  }
}

uint64_t resolveEntitySplit(uint64_t a1)
{
  else {
    return 0LL;
  }
}

uint64_t getEntitySplit(uint64_t a1)
{
  else {
    return 0LL;
  }
}

uint64_t entityDeclSplit(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 16);
    if (v1)
    {
      int v2 = *(uint64_t (**)(void))(v1 + 48);
      if (v2) {
        return v2(*(void *)(result + 32));
      }
    }
  }

  return result;
}

uint64_t notationDeclSplit(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 16);
    if (v1)
    {
      int v2 = *(uint64_t (**)(void))(v1 + 56);
      if (v2) {
        return v2(*(void *)(result + 32));
      }
    }
  }

  return result;
}

void attributeDeclSplit( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, xmlEnumerationPtr cur)
{
  if (a1
    && (uint64_t v7 = *(void *)(a1 + 16)) != 0
    && (int v8 = *(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, xmlEnumerationPtr))(v7 + 64)) != 0LL)
  {
    v8(*(void *)(a1 + 32), a2, a3, a4, a5, a6, cur);
  }

  else
  {
    xmlFreeEnumeration(cur);
  }

uint64_t elementDeclSplit(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 16);
    if (v1)
    {
      int v2 = *(uint64_t (**)(void))(v1 + 72);
      if (v2) {
        return v2(*(void *)(result + 32));
      }
    }
  }

  return result;
}

uint64_t unparsedEntityDeclSplit(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 16);
    if (v1)
    {
      int v2 = *(uint64_t (**)(void))(v1 + 80);
      if (v2) {
        return v2(*(void *)(result + 32));
      }
    }
  }

  return result;
}

uint64_t setDocumentLocatorSplit(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 16);
    if (v1)
    {
      int v2 = *(uint64_t (**)(void))(v1 + 88);
      if (v2) {
        return v2(*(void *)(result + 32));
      }
    }
  }

  return result;
}

uint64_t startDocumentSplit(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 16);
    if (v1)
    {
      int v2 = *(uint64_t (**)(void))(v1 + 96);
      if (v2) {
        return v2(*(void *)(result + 32));
      }
    }
  }

  return result;
}

uint64_t endDocumentSplit(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 16);
    if (v1)
    {
      int v2 = *(uint64_t (**)(void))(v1 + 104);
      if (v2) {
        return v2(*(void *)(result + 32));
      }
    }
  }

  return result;
}

uint64_t processingInstructionSplit(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 16);
    if (v1)
    {
      int v2 = *(uint64_t (**)(void))(v1 + 152);
      if (v2) {
        return v2(*(void *)(result + 32));
      }
    }
  }

  return result;
}

uint64_t commentSplit(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 16);
    if (v1)
    {
      int v2 = *(uint64_t (**)(void))(v1 + 160);
      if (v2) {
        return v2(*(void *)(result + 32));
      }
    }
  }

  return result;
}

uint64_t warningSplit(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 16);
    if (v1)
    {
      if (*(void *)(v1 + 168))
      {
        xmlGenericErrorFunc v2 = *__xmlGenericError();
        int v3 = __xmlGenericErrorContext();
        return ((uint64_t (*)(void *, const char *, ...))v2)( *v3,  "Unimplemented block at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemas.c",  28761);
      }
    }
  }

  return result;
}

uint64_t errorSplit(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 16);
    if (v1)
    {
      if (*(void *)(v1 + 176))
      {
        xmlGenericErrorFunc v2 = *__xmlGenericError();
        int v3 = __xmlGenericErrorContext();
        return ((uint64_t (*)(void *, const char *, ...))v2)( *v3,  "Unimplemented block at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemas.c",  28769);
      }
    }
  }

  return result;
}

uint64_t fatalErrorSplit(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 16);
    if (v1)
    {
      if (*(void *)(v1 + 184))
      {
        xmlGenericErrorFunc v2 = *__xmlGenericError();
        int v3 = __xmlGenericErrorContext();
        return ((uint64_t (*)(void *, const char *, ...))v2)( *v3,  "Unimplemented block at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemas.c",  28777);
      }
    }
  }

  return result;
}

uint64_t getParameterEntitySplit(uint64_t a1)
{
  else {
    return 0LL;
  }
}

uint64_t externalSubsetSplit(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 16);
    if (v1)
    {
      xmlGenericErrorFunc v2 = *(uint64_t (**)(void))(v1 + 208);
      if (v2) {
        return v2(*(void *)(result + 32));
      }
    }
  }

  return result;
}

void charactersSplit(void *a1, xmlChar *str2, uint64_t len)
{
  if (a1)
  {
    int v3 = len;
    uint64_t v6 = a1[2];
    if (v6)
    {
      uint64_t v7 = *(void (**)(void, xmlChar *, uint64_t))(v6 + 136);
      if (v7) {
        v7(a1[4], str2, len);
      }
    }

    uint64_t v8 = a1[37];
    if (v8) {
      xmlSchemaSAXHandleText(v8, str2, v3);
    }
  }

void ignorableWhitespaceSplit(void *a1, xmlChar *str2, uint64_t len)
{
  if (a1)
  {
    int v3 = len;
    uint64_t v6 = a1[2];
    if (v6)
    {
      uint64_t v7 = *(void (**)(void, xmlChar *, uint64_t))(v6 + 144);
      if (v7) {
        v7(a1[4], str2, len);
      }
    }

    uint64_t v8 = a1[37];
    if (v8) {
      xmlSchemaSAXHandleText(v8, str2, v3);
    }
  }

void cdataBlockSplit(void *a1, xmlChar *str2, uint64_t len)
{
  if (a1)
  {
    int v3 = len;
    uint64_t v6 = a1[2];
    if (v6)
    {
      uint64_t v7 = *(void (**)(void, xmlChar *, uint64_t))(v6 + 200);
      if (v7) {
        v7(a1[4], str2, len);
      }
    }

    uint64_t v8 = a1[37];
    if (v8) {
      xmlSchemaSAXHandleCDataSection(v8, str2, v3);
    }
  }

uint64_t referenceSplit(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 16);
    if (v2)
    {
      int v3 = *(uint64_t (**)(void))(v2 + 128);
      if (v3) {
        int result = v3(*(void *)(result + 32));
      }
    }

    if (*(void *)(v1 + 296)) {
      return xmlSchemaSAXHandleReference(*(void *)(v1 + 32));
    }
  }

  return result;
}

void startElementNsSplit( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    int v9 = a7;
    int v11 = a5;
    uint64_t v15 = a1[2];
    if (v15)
    {
      int v16 = *(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 232);
      if (v16) {
        v16(a1[4], a2, a3, a4, a5, a6, a7);
      }
    }

    uint64_t v17 = a1[37];
    if (v17) {
      xmlSchemaSAXHandleStartElementNs(v17, a2, a3, a4, v11, a6, v9, a8, a9);
    }
  }

void endElementNsSplit(void *a1, const xmlChar *a2, uint64_t a3, const xmlChar *a4)
{
  if (a1)
  {
    uint64_t v7 = a1[2];
    if (v7)
    {
      uint64_t v8 = *(void (**)(void, const xmlChar *, uint64_t, const xmlChar *))(v7 + 240);
      if (v8) {
        v8(a1[4], a2, a3, a4);
      }
    }

    uint64_t v9 = a1[37];
    if (v9) {
      xmlSchemaSAXHandleEndElementNs(v9, a2, a3, a4);
    }
  }

uint64_t xmlSchemaPreRun(void *data)
{
  data[13] = 0LL;
  *((_DWORD *)data + 4xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = -1;
  *((_DWORD *)data + 76) = -1;
  data[40] = 0LL;
  uint64_t v2 = data[5];
  if (v2) {
    goto LABEL_2;
  }
  *((_DWORD *)data + 42) = 1;
  uint64_t v4 = data[20];
  if (!v4)
  {
    xmlSchemaParserCtxtPtr v5 = xmlSchemaNewParserCtxt("*");
    data[20] = v5;
    if (!v5)
    {
      xmlSchemaInternalErr2( data,  (const xmlChar *)"xmlSchemaCreatePCtxtOnVCtxt",  (const xmlChar *)"failed to create a temp. parser context",  0LL);
      return 0xFFFFFFFFLL;
    }

    uint64_t v7 = data[2];
    uint64_t v6 = data[3];
    uint64_t v8 = v5;
    uint64_t v9 = data[1];
    do
    {
      v8[2] = v7;
      v8[3] = v6;
      v8[1] = v9;
      int v10 = (void *)v8[22];
      if (!v10) {
        break;
      }
      void v10[2] = v7;
      v10[3] = v6;
      v10[1] = v9;
      uint64_t v8 = (void *)v10[20];
    }

    while (v8);
    uint64_t v11 = data[4];
    uint64_t v12 = data[1];
    do
    {
      *((void *)v5 + 5) = v11;
      *((void *)v5 + 1) = v12;
      xmlSchemaValidCtxtPtr v13 = (void *)*((void *)v5 + 22);
      if (!v13) {
        break;
      }
      v13[3] = 0LL;
      v13[4] = v11;
      v13[1] = v12;
      v13[2] = 0LL;
      xmlSchemaParserCtxtPtr v5 = (xmlSchemaParserCtxtPtr)v13[20];
    }

    while (v5);
    uint64_t v4 = data[20];
  }

  *(_DWORD *)(v4 + 192) = 1;
  int v14 = xmlSchemaNewSchema(v4);
  data[5] = v14;
  if (v14)
  {
    uint64_t v15 = xmlSchemaConstructionCtxtCreate(*(xmlDict **)(v4 + 152));
    *(void *)(v4 + 48) = v15;
    if (v15)
    {
      uint64_t v2 = data[5];
      *uint64_t v15 = v2;
      *(_DWORD *)(v4 + 56) = 1;
LABEL_2:
      xmlHashScan(*(xmlHashTablePtr *)(v2 + 96), (xmlHashScanner)xmlSchemaAugmentImportedIDC, data);
      return 0LL;
    }
  }

  return 0xFFFFFFFFLL;
}

int xmlSchemaSAXUnplug(xmlSchemaSAXPlugPtr plug)
{
  if (!plug) {
    return -1;
  }
  if (*(_DWORD *)plug != -599541215) {
    return -1;
  }
  *(_DWORD *)plug = 0;
  xmlSchemaPostRun(*((void *)plug + 37));
  **((void **)plug + 1) = *((void *)plug + 2);
  if (*((void *)plug + 2)) {
    **((void **)plug + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = *((void *)plug + 4);
  }
  xmlFree(plug);
  return 0;
}

void xmlSchemaPostRun(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 168))
  {
    uint64_t v2 = *(xmlSchema **)(a1 + 40);
    if (v2)
    {
      xmlSchemaFree(v2);
      *(void *)(a1 + 4xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = 0LL;
    }
  }

  *(_DWORD *)(a1 + 26xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0;
  *(void *)(a1 + 152) = 0LL;
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 28xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = 0LL;
  *(_DWORD *)(a1 + 32xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = 0;
  int v3 = *(xmlSchemaVal **)(a1 + 136);
  if (v3)
  {
    xmlSchemaFreeValue(v3);
    *(void *)(a1 + 136) = 0LL;
  }

  uint64_t v4 = *(void **)(a1 + 200);
  if (v4)
  {
    do
    {
      xmlSchemaParserCtxtPtr v5 = (void *)*v4;
      xmlFree(v4);
      uint64_t v4 = v5;
    }

    while (v5);
    *(void *)(a1 + 20xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = 0LL;
  }

  uint64_t v6 = *(void *)(a1 + 224);
  if (v6)
  {
    do
    {
      uint64_t v7 = v6;
      uint64_t v6 = *(void *)(v6 + 16);
      do
      {
        uint64_t v8 = *(void *)(v7 + 8);
        uint64_t v9 = *(void **)(v7 + 40);
        if (v9)
        {
          int v10 = *(_DWORD *)(v7 + 48);
          if (v10 >= 1)
          {
            for (uint64_t i = 0LL; i < v10; ++i)
            {
              uint64_t v12 = *(void **)(*(void *)(v7 + 40) + 8 * i);
              if (v12)
              {
                xmlFree(v12);
                int v10 = *(_DWORD *)(v7 + 48);
              }
            }

            uint64_t v9 = *(void **)(v7 + 40);
          }

          xmlFree(v9);
        }

        uint64_t v13 = *(void *)(v7 + 56);
        if (v13)
        {
          if (*(_DWORD *)(v7 + 32) == 24 && *(int *)(v13 + 8) >= 1)
          {
            uint64_t v14 = 0LL;
            do
            {
              uint64_t v15 = *(void ***)(*(void *)v13 + 8 * v14);
              xmlFree(v15[1]);
              xmlFree(v15);
              ++v14;
              uint64_t v13 = *(void *)(v7 + 56);
            }

            while (v14 < *(int *)(v13 + 8));
          }

          if (*(void *)v13) {
            xmlFree(*(void **)v13);
          }
          xmlFree((void *)v13);
        }

        int v16 = *(xmlHashTable **)(v7 + 64);
        if (v16) {
          xmlHashFree(v16, (xmlHashDeallocator)xmlFreeIDCHashEntry);
        }
        xmlFree((void *)v7);
        uint64_t v7 = v8;
      }

      while (v8);
    }

    while (v6);
    *(void *)(a1 + 22xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
  }

  uint64_t v18 = (void **)(a1 + 232);
  uint64_t v17 = *(void **)(a1 + 232);
  if (v17)
  {
    if (*(int *)(a1 + 240) >= 1)
    {
      uint64_t v19 = 0LL;
      do
      {
        uint64_t v20 = *(void ***)(*(void *)(a1 + 232) + 8 * v19);
        xmlFree(v20[1]);
        xmlFree(v20);
        ++v19;
      }

      while (v19 < *(int *)(a1 + 240));
      uint64_t v17 = *v18;
    }

    xmlFree(v17);
    *uint64_t v18 = 0LL;
    *(void *)(a1 + 24xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = 0LL;
  }

  uint64_t v22 = (void **)(a1 + 248);
  int v21 = *(void **)(a1 + 248);
  if (v21)
  {
    if (*(int *)(a1 + 256) >= 1)
    {
      uint64_t v23 = 0LL;
      do
      {
        uint64_t v24 = (void *)*((void *)*v22 + v23);
        uint64_t v25 = (xmlSchemaVal *)v24[1];
        if (v25) {
          xmlSchemaFreeValue(v25);
        }
        xmlFree(v24);
        ++v23;
      }

      while (v23 < *(int *)(a1 + 256));
      int v21 = *v22;
    }

    xmlFree(v21);
    *uint64_t v22 = 0LL;
    *(void *)(a1 + 256) = 0LL;
  }

  int v26 = *(void **)(a1 + 208);
  if (v26)
  {
    xmlSchemaFreeIDCStateObjList(v26);
    *(void *)(a1 + 208) = 0LL;
  }

  if (*(_DWORD *)(a1 + 296)) {
    xmlSchemaClearAttrInfos(a1);
  }
  if (*(void *)(a1 + 176) && *(int *)(a1 + 184) >= 1)
  {
    uint64_t v27 = 0LL;
    do
    {
      uint64_t v28 = *(void *)(*(void *)(a1 + 176) + 8 * v27);
      if (!v28) {
        break;
      }
      xmlSchemaClearElemInfo(a1, v28);
      ++v27;
    }

    while (v27 < *(int *)(a1 + 184));
  }

  uint64_t v29 = *(void *)(a1 + 312);
  if (*(void *)v29)
  {
    xmlFree(*(void **)v29);
    *(void *)uint64_t v29 = 0LL;
  }

  *(void *)(v29 + 8) = 0LL;
  xmlDictFree(*(xmlDictPtr *)(a1 + 272));
  *(void *)(a1 + 272) = xmlDictCreate();
  uint64_t v30 = *(void **)(a1 + 96);
  if (v30)
  {
    xmlFree(v30);
    *(void *)(a1 + 96) = 0LL;
  }

void xmlSchemaValidateSetLocator(xmlSchemaValidCtxtPtr vctxt, xmlSchemaValidityLocatorFunc f, void *ctxt)
{
  if (vctxt)
  {
    *((void *)vctxt + 42) = f;
    *((void *)vctxt + 4xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = ctxt;
  }

int xmlSchemaValidateStream( xmlSchemaValidCtxtPtr ctxt, xmlParserInputBufferPtr input, xmlCharEncoding enc, xmlSAXHandlerPtr sax, void *user_data)
{
  int v5 = -1;
  if (ctxt)
  {
    if (input)
    {
      xmlParserCtxtPtr v11 = xmlNewParserCtxt();
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v13 = v11->sax;
        v11->sax = sax;
        v11->userData = user_data;
        p_userData = &v11->userData;
        v11->linenumbers = 1;
        *((void *)ctxt + 42) = xmlSchemaValidateStreamLocator;
        *((void *)ctxt + 4xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = v11;
        uint64_t v15 = xmlNewIOInputStream(v11, input, enc);
        if (v15 {
          && (inputPush(v12, v15),
        }
              *((void *)ctxt + 1xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v12,
              *((void *)ctxt + 7) = input,
              (xmlSchemaSAXPlugPtr v16 = xmlSchemaSAXPlug(ctxt, &v12->sax, p_userData)) != 0LL))
        {
          uint64_t v17 = v16;
          *((void *)ctxt + 7) = input;
          *((_DWORD *)ctxt + 16) = enc;
          *((void *)ctxt + 9) = v12->sax;
          *((_DWORD *)ctxt + 66) |= 1u;
          int v5 = xmlSchemaVStart((uint64_t)ctxt);
          if (!v5)
          {
            uint64_t v18 = *((void *)ctxt + 10);
            if (*(_DWORD *)(v18 + 24))
            {
              int v5 = 0;
            }

            else
            {
              unsigned int v19 = *(_DWORD *)(v18 + 136);
              if (v19 <= 1) {
                int v5 = 1;
              }
              else {
                int v5 = v19;
              }
            }
          }

          *((void *)ctxt + 7) = 0LL;
          *((void *)ctxt + 9) = 0LL;
          *((void *)ctxt + 1xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = 0LL;
          xmlSchemaSAXUnplug(v17);
        }

        else
        {
          *((void *)ctxt + 7) = 0LL;
          int v5 = -1;
          *((void *)ctxt + 9) = 0LL;
          *((void *)ctxt + 1xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = 0LL;
        }

        v12->sax = v13;
        xmlFreeParserCtxt(v12);
      }
    }
  }

  return v5;
}

uint64_t xmlSchemaValidateStreamLocator(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (!a1 || !(a2 | a3)) {
    return 0xFFFFFFFFLL;
  }
  if (a2) {
    *(void *)a2 = 0LL;
  }
  if (a3) {
    *(void *)a3 = 0LL;
  }
  uint64_t v3 = *(void *)(a1 + 56);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  if (a2) {
    *(void *)a2 = *(void *)(v3 + 8);
  }
  uint64_t v4 = 0LL;
  if (a3) {
    *(void *)a3 = *(int *)(*(void *)(a1 + 56) + 52LL);
  }
  return v4;
}

int xmlSchemaValidateFile(xmlSchemaValidCtxtPtr ctxt, const char *filename, int options)
{
  if (ctxt && filename && (uint64_t v4 = xmlParserInputBufferCreateFilename(filename, XML_CHAR_ENCODING_NONE)) != 0LL) {
    return xmlSchemaValidateStream(ctxt, v4, XML_CHAR_ENCODING_NONE, 0LL, 0LL);
  }
  else {
    return -1;
  }
}

xmlParserCtxtPtr xmlSchemaValidCtxtGetParserCtxt(xmlParserCtxtPtr ctxt)
{
  if (ctxt) {
    return (xmlParserCtxtPtr)ctxt->node;
  }
  return ctxt;
}

void xmlSchemaComponentListFree(uint64_t *a1)
{
  int v1 = *((_DWORD *)a1 + 2);
  if (v1)
  {
    if (v1 >= 1)
    {
      uint64_t v3 = 0LL;
      uint64_t v4 = *a1;
      do
      {
        int v5 = *(void **)(v4 + 8 * v3);
        if (v5)
        {
          int v6 = *(_DWORD *)v5;
          switch(*(_DWORD *)v5)
          {
            case 1:
              if (*((_DWORD *)v5 + 40) == 45) {
                uint64_t v17 = "complex type definition";
              }
              else {
                uint64_t v17 = "simple type definition";
              }
              goto LABEL_30;
            case 2:
            case 0x15:
              xmlSchemaFreeWildcard(*(xmlSchemaWildcardPtr *)(v4 + 8 * v3));
              break;
            case 3:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
            case 0xD:
            case 0x13:
            case 0x14:
              goto LABEL_24;
            case 4:
            case 5:
              xmlSchemaFreeType(*(xmlSchemaTypePtr *)(v4 + 8 * v3));
              break;
            case 6:
            case 7:
            case 8:
              uint64_t v7 = (void **)*((void *)v5 + 1);
              if (v7)
              {
                uint64_t v8 = *v7;
                xmlFree(v7);
                if (v8)
                {
                  do
                  {
                    uint64_t v9 = (void *)*v8;
                    xmlFree(v8);
                    uint64_t v8 = v9;
                  }

                  while (v9);
                }
              }

              goto LABEL_63;
            case 0xE:
              uint64_t v18 = (void **)*((void *)v5 + 6);
              if (v18)
              {
                unsigned int v19 = *v18;
                xmlFree(v18);
                if (v19)
                {
                  do
                  {
                    uint64_t v20 = (void *)*v19;
                    xmlFree(v19);
                    unsigned int v19 = v20;
                  }

                  while (v20);
                }
              }

              int v21 = (xmlRegexp *)*((void *)v5 + 20);
              if (v21) {
                xmlRegFreeRegexp(v21);
              }
              uint64_t v22 = (xmlSchemaVal *)*((void *)v5 + 23);
              if (!v22) {
                goto LABEL_63;
              }
              goto LABEL_62;
            case 0xF:
              uint64_t v23 = (void **)*((void *)v5 + 8);
              if (v23)
              {
                uint64_t v24 = *v23;
                xmlFree(v23);
                if (v24)
                {
                  do
                  {
                    uint64_t v25 = (void *)*v24;
                    xmlFree(v24);
                    uint64_t v24 = v25;
                  }

                  while (v25);
                }
              }

              uint64_t v22 = (xmlSchemaVal *)*((void *)v5 + 17);
              if (!v22) {
                goto LABEL_63;
              }
              goto LABEL_62;
            case 0x10:
              int v26 = (void **)*((void *)v5 + 6);
              if (v26)
              {
                uint64_t v27 = *v26;
                xmlFree(v26);
                if (v27)
                {
                  do
                  {
                    uint64_t v28 = (void *)*v27;
                    xmlFree(v27);
                    uint64_t v27 = v28;
                  }

                  while (v28);
                }
              }

              uint64_t v29 = (void **)*((void *)v5 + 14);
              if (v29)
              {
                if (*v29) {
                  xmlFree(*v29);
                }
                xmlFree(v29);
              }

              goto LABEL_63;
            case 0x11:
              uint64_t v30 = (void **)*((void *)v5 + 1);
              if (v30)
              {
                uint64_t v31 = *v30;
                xmlFree(v30);
                if (v31)
                {
                  do
                  {
                    int v32 = (void *)*v31;
                    xmlFree(v31);
                    uint64_t v31 = v32;
                  }

                  while (v32);
                }
              }

              goto LABEL_63;
            case 0x12:
              goto LABEL_63;
            case 0x16:
            case 0x17:
            case 0x18:
              int v10 = (void **)*((void *)v5 + 1);
              if (v10)
              {
                xmlParserCtxtPtr v11 = *v10;
                xmlFree(v10);
                if (v11)
                {
                  do
                  {
                    uint64_t v12 = (void *)*v11;
                    xmlFree(v11);
                    xmlParserCtxtPtr v11 = v12;
                  }

                  while (v12);
                }
              }

              uint64_t v13 = (xmlPatternPtr *)*((void *)v5 + 6);
              if (v13)
              {
                if (v13[4])
                {
                  xmlFreePattern(v13[4]);
                  uint64_t v13 = (xmlPatternPtr *)*((void *)v5 + 6);
                }

                xmlFree(v13);
              }

              uint64_t v14 = (void *)*((void *)v5 + 7);
              if (v14)
              {
                do
                {
                  uint64_t v15 = (void *)*v14;
                  xmlSchemaSAXPlugPtr v16 = (xmlPattern *)v14[4];
                  if (v16) {
                    xmlFreePattern(v16);
                  }
                  xmlFree(v14);
                  uint64_t v14 = v15;
                }

                while (v15);
              }

              goto LABEL_63;
            case 0x19:
              uint64_t v33 = (void **)*((void *)v5 + 1);
              if (v33)
              {
                int v34 = *v33;
                xmlFree(v33);
                if (v34)
                {
                  do
                  {
                    int v35 = (void *)*v34;
                    xmlFree(v34);
                    int v34 = v35;
                  }

                  while (v35);
                }
              }

              goto LABEL_63;
            case 0x1A:
              uint64_t v36 = (void **)*((void *)v5 + 1);
              if (v36)
              {
                int v37 = *v36;
                xmlFree(v36);
                if (v37)
                {
                  do
                  {
                    int v38 = (void *)*v37;
                    xmlFree(v37);
                    int v37 = v38;
                  }

                  while (v38);
                }
              }

              uint64_t v22 = (xmlSchemaVal *)*((void *)v5 + 8);
              if (v22) {
LABEL_62:
              }
                xmlSchemaFreeValue(v22);
              goto LABEL_63;
            default:
              if (v6 == 2000 || v6 == 2001)
              {
LABEL_63:
                xmlFree(v5);
              }

              else
              {
LABEL_24:
                uint64_t v17 = xmlSchemaItemTypeToStr(v6);
LABEL_30:
                __xmlSimpleError( 16,  3069,  0,  (uint64_t)"Internal error: xmlSchemaComponentListFree, unexpected component type '%s'\n",  (uint64_t)v17);
              }

              break;
          }
        }

        ++v3;
      }

      while (v3 < *((int *)a1 + 2));
    }

    *((_DWORD *)a1 + 2) = 0;
  }

const char *xmlSchemaItemTypeToStr(int a1)
{
  int v1 = a1 - 1;
  int result = "simple type definition";
  switch(v1)
  {
    case 0:
    case 3:
      return result;
    case 1:
      int result = "wildcard (any)";
      break;
    case 2:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 18:
    case 19:
    case 20:
      goto LABEL_5;
    case 4:
      int result = "complex type definition";
      break;
    case 5:
      int result = "model group (sequence)";
      break;
    case 6:
      int result = "model group (choice)";
      break;
    case 7:
      int result = "model group (all)";
      break;
    case 13:
      int result = "element declaration";
      break;
    case 14:
      int result = "attribute declaration";
      break;
    case 15:
      int result = "attribute group definition";
      break;
    case 16:
      int result = "model group definition";
      break;
    case 17:
      int result = "notation declaration";
      break;
    case 21:
      int result = "unique identity-constraint";
      break;
    case 22:
      int result = "key identity-constraint";
      break;
    case 23:
      int result = "keyref identity-constraint";
      break;
    case 24:
      int result = "particle";
      break;
    case 25:
      int result = "attribute use";
      break;
    default:
      if ("simple type definition" == 2000)
      {
        int result = "[helper component] QName reference";
      }

      else if ("simple type definition" == 2001)
      {
        int result = "[helper component] attribute use prohibition";
      }

      else
      {
LABEL_5:
        int result = "Not a schema component";
      }

      break;
  }

  return result;
}

void xmlSchemaTypeDump(uint64_t a1, FILE *__stream)
{
  if (a1)
  {
    fwrite("Type: ", 6uLL, 1uLL, __stream);
    if (*(void *)(a1 + 16)) {
      fprintf(__stream, "'%s' ", *(const char **)(a1 + 16));
    }
    else {
      fwrite("(no name) ", 0xAuLL, 1uLL, __stream);
    }
    if (*(void *)(a1 + 208)) {
      fprintf(__stream, "ns '%s' ", *(const char **)(a1 + 208));
    }
    switch(*(_DWORD *)a1)
    {
      case 1:
        uint64_t v4 = "[basic] ";
        size_t v5 = 8LL;
        goto LABEL_20;
      case 4:
        uint64_t v4 = "[simple] ";
        goto LABEL_15;
      case 5:
        uint64_t v4 = "[complex] ";
        size_t v5 = 10LL;
        goto LABEL_20;
      case 6:
        uint64_t v4 = "[sequence] ";
        size_t v5 = 11LL;
        goto LABEL_20;
      case 7:
        uint64_t v4 = "[choice] ";
LABEL_15:
        size_t v5 = 9LL;
        goto LABEL_20;
      case 8:
        uint64_t v4 = "[all] ";
        size_t v5 = 6LL;
        goto LABEL_20;
      case 0xB:
        uint64_t v4 = "[ur] ";
        size_t v5 = 5LL;
        goto LABEL_20;
      case 0xC:
        uint64_t v4 = "[restriction] ";
        size_t v5 = 14LL;
        goto LABEL_20;
      case 0xD:
        uint64_t v4 = "[extension] ";
        size_t v5 = 12LL;
LABEL_20:
        fwrite(v4, v5, 1uLL, __stream);
        break;
      default:
        fprintf(__stream, "[unknown type %d] ", *(_DWORD *)a1);
        break;
    }

    fwrite("content: ", 9uLL, 1uLL, __stream);
    switch(*(_DWORD *)(a1 + 92))
    {
      case 0:
        int v6 = "[unknown] ";
        goto LABEL_25;
      case 1:
        int v6 = "[empty] ";
        goto LABEL_29;
      case 2:
        int v6 = "[element] ";
LABEL_25:
        size_t v7 = 10LL;
        goto LABEL_31;
      case 3:
        int v6 = "[mixed] ";
        goto LABEL_29;
      case 4:
        int v6 = "[simple] ";
        size_t v7 = 9LL;
        goto LABEL_31;
      case 6:
        int v6 = "[basic] ";
LABEL_29:
        size_t v7 = 8LL;
        goto LABEL_31;
      case 7:
        int v6 = "[any] ";
        size_t v7 = 6LL;
LABEL_31:
        fwrite(v6, v7, 1uLL, __stream);
        break;
      default:
        break;
    }

    fputc(10, __stream);
    if (*(void *)(a1 + 96))
    {
      fprintf(__stream, "  base type: '%s'", *(const char **)(a1 + 96));
      if (*(void *)(a1 + 104)) {
        fprintf(__stream, " ns '%s'\n", *(const char **)(a1 + 104));
      }
      else {
        fputc(10, __stream);
      }
    }

    uint64_t v8 = *(void *)(a1 + 216);
    if (v8)
    {
      uint64_t v17 = 0LL;
      if (*(_DWORD *)(v8 + 8))
      {
        fwrite("  attributes:\n", 0xEuLL, 1uLL, __stream);
        if (*(int *)(v8 + 8) >= 1)
        {
          uint64_t v9 = 0LL;
          do
          {
            uint64_t v10 = *(void *)(*(void *)v8 + 8 * v9);
            if (*(_DWORD *)v10 == 2000)
            {
              fwrite("  [reference] ", 0xEuLL, 1uLL, __stream);
              xmlParserCtxtPtr v11 = (xmlChar **)(v10 + 24);
              uint64_t v12 = (const xmlChar **)(v10 + 32);
            }

            else if (*(_DWORD *)v10 == 2001)
            {
              fwrite("  [prohibition] ", 0x10uLL, 1uLL, __stream);
              xmlParserCtxtPtr v11 = (xmlChar **)(v10 + 16);
              uint64_t v12 = (const xmlChar **)(v10 + 24);
            }

            else
            {
              fwrite("  [use] ", 8uLL, 1uLL, __stream);
              uint64_t v13 = *(void *)(v10 + 24);
              xmlParserCtxtPtr v11 = (xmlChar **)(v13 + 16);
              uint64_t v12 = (const xmlChar **)(v13 + 112);
            }

            uint64_t v14 = xmlSchemaFormatQName(&v17, *v12, *v11);
            fprintf(__stream, "'%s'\n", (const char *)v14);
            if (v17)
            {
              xmlFree(v17);
              uint64_t v17 = 0LL;
            }

            ++v9;
          }

          while (v9 < *(int *)(v8 + 8));
        }
      }
    }

    uint64_t v15 = *(void *)(a1 + 48);
    if (v15) {
      xmlSchemaAnnotDump(__stream, v15);
    }
    if (*(_DWORD *)a1 == 5)
    {
      size_t v16 = *(void *)(a1 + 56);
      if (v16) {
        xmlSchemaContentModelDump(v16, __stream, 1LL);
      }
    }
  }

  else
  {
    fwrite("Type: NULL\n", 0xBuLL, 1uLL, __stream);
  }

size_t xmlSchemaContentModelDump(size_t result, FILE *a2, uint64_t a3)
{
  while (1)
  {
    uint64_t v3 = a3;
    uint64_t v4 = a2;
    size_t v5 = result;
    uint64_t v19 = *MEMORY[0x1895F89C0];
    size_t v16 = 0LL;
    int v18 = 0;
    memset(__b, 0, sizeof(__b));
    unsigned int v6 = a3 - 1;
    if ((int)a3 < 1)
    {
      unsigned int v7 = 0;
    }

    else
    {
      if (v6 >= 0x18) {
        unsigned int v6 = 24;
      }
      unsigned int v7 = 2 * v6 + 2;
      memset(__b, 32, v7);
    }

    *((_BYTE *)__b + (v7 | 1LL)) = 0;
    *((_BYTE *)__b + v7) = 0;
    fputs((const char *)__b, v4);
    uint64_t v8 = *(void *)(v5 + 24);
    if (!v8) {
      break;
    }
    switch(*(_DWORD *)v8)
    {
      case 6:
        uint64_t v9 = "SEQUENCE";
        size_t v10 = 8LL;
        goto LABEL_17;
      case 7:
        uint64_t v9 = "CHOICE";
        size_t v10 = 6LL;
        goto LABEL_17;
      case 8:
        uint64_t v9 = "ALL";
        goto LABEL_16;
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
        goto LABEL_12;
      case 0xE:
        uint64_t v15 = xmlSchemaFormatQName(&v16, *(const xmlChar **)(v8 + 96), *(xmlChar **)(v8 + 16));
        fprintf(v4, "ELEM '%s'", (const char *)v15);
        if (v16) {
          xmlFree(v16);
        }
        goto LABEL_18;
      default:
        if (*(_DWORD *)v8 != 2)
        {
LABEL_12:
          xmlParserCtxtPtr v11 = "UNKNOWN\n";
          size_t v12 = 8LL;
          return fwrite(v11, v12, 1uLL, v4);
        }

        uint64_t v9 = "ANY";
LABEL_16:
        size_t v10 = 3LL;
LABEL_17:
        fwrite(v9, v10, 1uLL, v4);
LABEL_18:
        if (*(_DWORD *)(v5 + 32) != 1) {
          fprintf(v4, " min: %d", *(_DWORD *)(v5 + 32));
        }
        int v13 = *(_DWORD *)(v5 + 36);
        if (v13 < 0x40000000)
        {
          if (v13 != 1) {
            fprintf(v4, " max: %d", *(_DWORD *)(v5 + 36));
          }
        }

        else
        {
          fwrite(" max: unbounded", 0xFuLL, 1uLL, v4);
        }

        fputc(10, v4);
        if ((*(_DWORD *)v8 - 6) <= 2)
        {
          uint64_t v14 = *(void *)(v8 + 24);
          if (v14) {
            xmlSchemaContentModelDump(v14, v4, (v3 + 1));
          }
        }

        int result = *(void *)(v5 + 16);
        if (!result) {
          return result;
        }
        a2 = v4;
        a3 = v3;
        break;
    }
  }

  xmlParserCtxtPtr v11 = "MISSING particle term\n";
  size_t v12 = 22LL;
  return fwrite(v11, v12, 1uLL, v4);
}

void xmlSchemaSubstGroupFree(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (void **)a1[1];
    if (v2)
    {
      if (*v2) {
        xmlFree(*v2);
      }
      xmlFree(v2);
    }

    xmlFree(a1);
  }

void xmlSchemaInternalErr2(_DWORD *a1, const xmlChar *a2, const xmlChar *a3, xmlChar *a4)
{
  if (a1)
  {
    uint64_t v8 = xmlStrdup((const xmlChar *)"Internal error: %s, ");
    uint64_t v9 = xmlStrcat(v8, a3);
    size_t v10 = xmlStrcat(v9, (const xmlChar *)".\n");
    if (*a1 == 2)
    {
      int v11 = 1818;
    }

    else
    {
      if (*a1 != 1) {
        goto LABEL_7;
      }
      int v11 = 3069;
    }

    xmlSchemaErr4Line(a1, 2, v11, 0LL, 0, (const char *)v10, a2, a4, 0LL, 0LL);
LABEL_7:
    if (v10) {
      xmlFree(v10);
    }
  }

_DWORD *xmlSchemaErr4Line( _DWORD *result, int a2, int a3, uint64_t a4, int a5, const char *a6, const xmlChar *a7, xmlChar *cur, xmlChar *a9, uint64_t a10)
{
  if (result)
  {
    uint64_t v12 = a4;
    int v13 = a3;
    uint64_t v15 = result;
    if (*result != 1)
    {
      if (*result != 2)
      {
        xmlGenericErrorFunc v19 = *__xmlGenericError();
        uint64_t v20 = __xmlGenericErrorContext();
        return (_DWORD *)((uint64_t (*)(void *, const char *, ...))v19)( *v20,  "Unimplemented block at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemas.c",  2199);
      }

      int v16 = a5;
      if (a2 == 1)
      {
        uint64_t v17 = (void (**)(void *, const char *, ...))(result + 6);
      }

      else
      {
        int v21 = result[27] + 1;
        result[26] = a3;
        result[27] = v21;
        uint64_t v17 = (void (**)(void *, const char *, ...))(result + 4);
      }

      uint64_t v22 = *v17;
      uint64_t v23 = (void (__cdecl *)(void *, xmlErrorPtr))*((void *)result + 4);
      uint64_t v24 = (void *)*((void *)v15 + 1);
      if (a5)
      {
        uint64_t v25 = *((void *)v15 + 6);
        if (v25)
        {
          uint64_t v12 = 0LL;
          int v26 = 0;
          uint64_t v27 = *(void *)(v25 + 136);
          goto LABEL_29;
        }

        uint64_t v29 = *((void *)v15 + 10);
        if (v29)
        {
          uint64_t v30 = *(void *)(v29 + 56);
          if (v30)
          {
            uint64_t v12 = 0LL;
            int v26 = 0;
            uint64_t v27 = *(void *)(v30 + 8);
            goto LABEL_29;
          }
        }
      }

      else
      {
        if (a4
          || (v15[43] & 0x80000000) == 0 && (v31 = *((void *)v15 + 24)) != 0 && (uint64_t v12 = *(void *)(v31 + 8)) != 0)
        {
          int v16 = 0;
LABEL_28:
          uint64_t v27 = 0LL;
          int v26 = 0;
LABEL_29:
          int v34 = (void (*)(void, uint64_t *, uint64_t *))*((void *)v15 + 42);
          if (v34)
          {
            if (v27 && v16) {
              return __xmlRaiseError( v23,  v22,  v24,  v15,  v12,  0x11u,  v13,  a2,  v27,  v16,  a7,  cur,  a9,  0,  v26,  a6,  (char)a7);
            }
            uint64_t v40 = 0LL;
            uint64_t v41 = 0LL;
            uint64_t v36 = v23;
            int v37 = v24;
            *(void *)int v38 = v22;
            int v35 = a6;
            int v39 = v13;
            v34(*((void *)v15 + 43), &v40, &v41);
            uint64_t v23 = v36;
            uint64_t v24 = v37;
            uint64_t v22 = *(void (**)(void *, const char *, ...))v38;
            int v13 = v39;
            a6 = v35;
            if (!v27) {
              uint64_t v27 = v40;
            }
            if (!v16) {
              int v16 = v41;
            }
          }

          if (!v27) {
            uint64_t v27 = *((void *)v15 + 12);
          }
          return __xmlRaiseError(v23, v22, v24, v15, v12, 0x11u, v13, a2, v27, v16, a7, cur, a9, 0, v26, a6, (char)a7);
        }

        uint64_t v32 = *((void *)v15 + 10);
        if (v32)
        {
          uint64_t v33 = *(void *)(v32 + 56);
          if (v33)
          {
            uint64_t v12 = 0LL;
            uint64_t v27 = *(void *)(v33 + 8);
            int v16 = *(_DWORD *)(v33 + 52);
            int v26 = *(_DWORD *)(v33 + 56);
            goto LABEL_29;
          }
        }

        int v16 = 0;
      }

      uint64_t v12 = 0LL;
      goto LABEL_28;
    }

    if (a2 == 1)
    {
      int v18 = (void (**)(void *, const char *, ...))(result + 6);
    }

    else
    {
      int v28 = result[9] + 1;
      result[8] = a3;
      result[9] = v28;
      int v18 = (void (**)(void *, const char *, ...))(result + 4);
    }

    return __xmlRaiseError( *((xmlStructuredErrorFunc *)result + 5),  *v18,  *((void **)result + 1),  result,  a4,  0x10u,  a3,  a2,  0LL,  0,  a7,  cur,  a9,  0,  0,  a6,  (char)a7);
  }

  return result;
}

uint64_t xmlSchemaGetComponentNode(_DWORD *a1)
{
  uint64_t v1 = 0LL;
  switch(*a1)
  {
    case 2:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
      uint64_t v2 = a1 + 6;
      return *(void *)v2;
    case 3:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0x12:
    case 0x13:
    case 0x14:
      return v1;
    case 4:
    case 5:
    case 0xE:
      uint64_t v2 = a1 + 18;
      return *(void *)v2;
    case 6:
    case 7:
    case 8:
      uint64_t v2 = a1 + 8;
      return *(void *)v2;
    case 0xF:
      uint64_t v2 = a1 + 26;
      return *(void *)v2;
    case 0x10:
      uint64_t v2 = a1 + 16;
      return *(void *)v2;
    case 0x11:
      uint64_t v2 = a1 + 12;
      return *(void *)v2;
    case 0x19:
    case 0x1A:
      goto LABEL_6;
    default:
      if (*a1 == 2000)
      {
LABEL_6:
        uint64_t v2 = a1 + 10;
        return *(void *)v2;
      }

      return v1;
  }

_BYTE *xmlSchemaFormatItemForReport(xmlChar **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v56 = 0LL;
  unsigned int v6 = *a1;
  if (v6)
  {
    xmlFree(v6);
    *a1 = 0LL;
  }

  if (a2)
  {
    int v7 = *(_DWORD *)a2;
    uint64_t v8 = "unique '";
    switch(*(_DWORD *)a2)
    {
      case 1:
        int v19 = *(_DWORD *)(a2 + 88);
        uint64_t v20 = "list type 'xs:";
        int v21 = "union type 'xs:";
        if ((v19 & 0x80) == 0) {
          int v21 = "simple type 'xs:";
        }
        if ((v19 & 0x40) == 0) {
          uint64_t v20 = v21;
        }
        if ((v19 & 0x100) != 0) {
          uint64_t v22 = (const xmlChar *)"atomic type 'xs:";
        }
        else {
          uint64_t v22 = (const xmlChar *)v20;
        }
        uint64_t v14 = xmlStrdup(v22);
        goto LABEL_41;
      case 2:
      case 0x15:
        unsigned int v17 = *(_DWORD *)(a2 + 40) - 1;
        if (v17 > 2) {
          int v18 = "invalid process contents";
        }
        else {
          int v18 = off_189BA2EA8[v17];
        }
        uint64_t v15 = xmlStrdup((const xmlChar *)v18);
        *a1 = v15;
        int v16 = " wildcard";
        goto LABEL_11;
      case 3:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0x13:
      case 0x14:
        break;
      case 4:
        if ((*(_DWORD *)(a2 + 88) & 8) != 0) {
          uint64_t v23 = &byte_181A3ACBA;
        }
        else {
          uint64_t v23 = "local ";
        }
        uint64_t v24 = xmlStrdup((const xmlChar *)v23);
        *a1 = v24;
        int v25 = *(_DWORD *)(a2 + 88);
        int v26 = "list type";
        uint64_t v27 = "union type";
        if ((v25 & 0x80) == 0) {
          uint64_t v27 = "simple type";
        }
        if ((v25 & 0x40) == 0) {
          int v26 = v27;
        }
        if ((v25 & 0x100) != 0) {
          int v28 = "atomic type";
        }
        else {
          int v28 = v26;
        }
        goto LABEL_39;
      case 5:
        if ((*(_DWORD *)(a2 + 88) & 8) != 0) {
          uint64_t v29 = &byte_181A3ACBA;
        }
        else {
          uint64_t v29 = "local ";
        }
        uint64_t v24 = xmlStrdup((const xmlChar *)v29);
        *a1 = v24;
        int v28 = "complex type";
LABEL_39:
        uint64_t v30 = xmlStrcat(v24, (const xmlChar *)v28);
        *a1 = v30;
        if ((*(_BYTE *)(a2 + 88) & 8) == 0) {
          goto LABEL_13;
        }
        uint64_t v14 = xmlStrcat(v30, (const xmlChar *)" '");
LABEL_41:
        *a1 = v14;
        int v13 = *(const xmlChar **)(a2 + 16);
        goto LABEL_9;
      case 6:
      case 7:
      case 8:
      case 0x19:
        uint64_t v9 = xmlSchemaItemTypeToStr(v7);
        size_t v10 = xmlStrdup((const xmlChar *)v9);
        goto LABEL_12;
      case 0xE:
        uint64_t v31 = xmlStrdup((const xmlChar *)"element decl.");
        *a1 = v31;
        int v11 = xmlStrcat(v31, (const xmlChar *)" '");
        *a1 = v11;
        uint64_t v12 = xmlSchemaFormatQName(&v56, *(const xmlChar **)(a2 + 96), *(xmlChar **)(a2 + 16));
        goto LABEL_8;
      case 0xF:
        uint64_t v32 = xmlStrdup((const xmlChar *)"attribute decl.");
        *a1 = v32;
        uint64_t v33 = xmlStrcat(v32, (const xmlChar *)" '");
        *a1 = v33;
        int v34 = xmlSchemaFormatQName(&v56, *(const xmlChar **)(a2 + 112), *(xmlChar **)(a2 + 16));
        goto LABEL_71;
      case 0x10:
        xmlSchemaGetComponentDesignation(a1, (int *)a2);
        goto LABEL_13;
      case 0x11:
        int v35 = xmlStrdup((const xmlChar *)"model group def.");
        *a1 = v35;
        uint64_t v36 = xmlStrcat(v35, (const xmlChar *)" '");
        *a1 = v36;
        ComponentQName = xmlSchemaGetComponentQName(&v56, (int *)a2);
        int v38 = xmlStrcat(v36, ComponentQName);
        *a1 = v38;
        *a1 = xmlStrcat(v38, (const xmlChar *)"'");
        if (v56)
        {
          xmlFree(v56);
          uint64_t v56 = 0LL;
        }

        goto LABEL_13;
      case 0x12:
        int v39 = xmlSchemaItemTypeToStr(18);
        uint64_t v40 = xmlStrdup((const xmlChar *)v39);
        *a1 = v40;
        uint64_t v41 = xmlStrcat(v40, (const xmlChar *)" '");
        *a1 = v41;
        uint64_t v42 = xmlSchemaGetComponentQName(&v56, (int *)a2);
        BOOL v43 = xmlStrcat(v41, v42);
        *a1 = v43;
        *a1 = xmlStrcat(v43, (const xmlChar *)"'");
        if (v56)
        {
          xmlFree(v56);
          uint64_t v56 = 0LL;
        }

        break;
      case 0x16:
        goto LABEL_68;
      case 0x17:
        uint64_t v8 = "key '";
        goto LABEL_68;
      case 0x18:
        uint64_t v8 = "keyRef '";
LABEL_68:
        uint64_t v14 = xmlStrdup((const xmlChar *)v8);
        *a1 = v14;
        int v13 = *(const xmlChar **)(a2 + 32);
        goto LABEL_9;
      case 0x1A:
        uint64_t v15 = xmlStrdup((const xmlChar *)"attribute use ");
        *a1 = v15;
        if (*(void *)(a2 + 24))
        {
          uint64_t v33 = xmlStrcat(v15, (const xmlChar *)"'");
          *a1 = v33;
          int v34 = xmlSchemaGetComponentQName(&v56, *(int **)(a2 + 24));
LABEL_71:
          uint64_t v15 = xmlStrcat(v33, v34);
          *a1 = v15;
          if (v56)
          {
            xmlFree(v56);
            uint64_t v56 = 0LL;
            uint64_t v15 = *a1;
          }

LABEL_63:
  if (v56) {
    xmlFree(v56);
  }
  return xmlEscapeFormatString((void **)a1);
}

    xmlXPathErr(ctxt, v36);
  }

xmlChar *xmlSchemaFormatNodeForError(void **a1, uint64_t a2, uint64_t a3)
{
  int v34 = 0LL;
  *a1 = 0LL;
  if (a3)
  {
    int v5 = *(_DWORD *)(a3 + 8);
    if ((v5 - 1) >= 2)
    {
      int result = xmlStrdup((const xmlChar *)&byte_181A3ACBA);
      *a1 = result;
      return result;
    }

    if (v5 == 2)
    {
      uint64_t v6 = *(void *)(a3 + 40);
      int v7 = xmlStrdup((const xmlChar *)"Element '");
      *a1 = v7;
      uint64_t v8 = *(void *)(v6 + 72);
      if (v8)
      {
        uint64_t v9 = xmlSchemaFormatQName((void **)&v34, *(const xmlChar **)(v8 + 16), *(xmlChar **)(v6 + 16));
        size_t v10 = xmlStrcat(v7, v9);
        int v11 = v34;
      }

      else
      {
        uint64_t v27 = *(const xmlChar **)(v6 + 16);
        if (v27)
        {
          int v11 = 0LL;
        }

        else
        {
          int v11 = xmlStrcat(0LL, (const xmlChar *)"(NULL)");
          int v34 = v11;
          uint64_t v27 = v11;
        }

        size_t v10 = xmlStrcat(v7, v27);
      }

      *a1 = v10;
      if (v11)
      {
        xmlFree(v11);
        int v34 = 0LL;
        size_t v10 = (xmlChar *)*a1;
      }

      int v28 = xmlStrcat(v10, (const xmlChar *)"', ");
      *a1 = v28;
      uint64_t v20 = xmlStrcat(v28, (const xmlChar *)"attribute '");
    }

    else
    {
      uint64_t v20 = xmlStrdup((const xmlChar *)"Element '");
    }

    uint64_t v29 = v20;
    *a1 = v20;
    uint64_t v30 = *(void *)(a3 + 72);
    if (v30)
    {
      uint64_t v31 = xmlSchemaFormatQName((void **)&v34, *(const xmlChar **)(v30 + 16), *(xmlChar **)(a3 + 16));
      int v26 = xmlStrcat(v29, v31);
      uint64_t v32 = v34;
    }

    else
    {
      uint64_t v33 = *(const xmlChar **)(a3 + 16);
      if (v33)
      {
        uint64_t v32 = 0LL;
      }

      else
      {
        uint64_t v32 = xmlStrcat(0LL, (const xmlChar *)"(NULL)");
        uint64_t v33 = v32;
      }

      int v26 = xmlStrcat(v29, v33);
    }

    *a1 = v26;
    if (!v32) {
      goto LABEL_36;
    }
    xmlFree(v32);
    goto LABEL_35;
  }

  if (*(_DWORD *)a2 == 1)
  {
    int v21 = xmlStrdup((const xmlChar *)&byte_181A3ACBA);
LABEL_37:
    *a1 = v21;
    return xmlEscapeFormatString(a1);
  }

  if (*(_DWORD *)a2 == 2)
  {
    if (**(_DWORD **)(a2 + 192) == 2)
    {
      uint64_t v13 = *(void *)(*(void *)(a2 + 176) + 8LL * *(int *)(a2 + 172));
      uint64_t v14 = xmlStrdup((const xmlChar *)"Element '");
      *a1 = v14;
      uint64_t v15 = xmlSchemaFormatQName((void **)&v34, *(const xmlChar **)(v13 + 32), *(xmlChar **)(v13 + 24));
      int v16 = xmlStrcat(v14, v15);
      *a1 = v16;
      if (v34)
      {
        xmlFree(v34);
        int v34 = 0LL;
        int v16 = (xmlChar *)*a1;
      }

      unsigned int v17 = xmlStrcat(v16, (const xmlChar *)"', ");
      *a1 = v17;
      int v18 = xmlStrcat(v17, (const xmlChar *)"attribute '");
    }

    else
    {
      int v18 = xmlStrdup((const xmlChar *)"Element '");
    }

    uint64_t v24 = v18;
    *a1 = v18;
    int v25 = xmlSchemaFormatQName( (void **)&v34,  *(const xmlChar **)(*(void *)(a2 + 192) + 32LL),  *(xmlChar **)(*(void *)(a2 + 192) + 24LL));
    int v26 = xmlStrcat(v24, v25);
    *a1 = v26;
    if (!v34) {
      goto LABEL_36;
    }
    xmlFree(v34);
LABEL_35:
    int v26 = (xmlChar *)*a1;
LABEL_36:
    int v21 = xmlStrcat(v26, (const xmlChar *)"': ");
    goto LABEL_37;
  }

  xmlGenericErrorFunc v22 = *__xmlGenericError();
  uint64_t v23 = __xmlGenericErrorContext();
  return (xmlChar *)((uint64_t (*)(void *, const char *, ...))v22)( *v23,  "Unimplemented block at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemas.c",  2320);
}

xmlChar *xmlSchemaGetComponentQName(void **a1, int *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = "http://www.w3.org/2001/XMLSchema";
  uint64_t v4 = a2;
  while (1)
  {
    if (!v4)
    {
      uint64_t v3 = 0LL;
LABEL_10:
      uint64_t v6 = (const xmlChar *)v3;
      goto LABEL_16;
    }

    int v5 = *v4;
    if (*v4 != 26) {
      break;
    }
    uint64_t v4 = (int *)*((void *)v4 + 3);
    if (!v4)
    {
      uint64_t v6 = 0LL;
      goto LABEL_16;
    }
  }

  uint64_t v6 = 0LL;
  switch(v5)
  {
    case 1:
      goto LABEL_10;
    case 2:
    case 3:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 19:
    case 20:
    case 21:
      goto LABEL_16;
    case 4:
    case 5:
      uint64_t v6 = (const xmlChar *)*((void *)v4 + 26);
      goto LABEL_16;
    case 14:
      uint64_t v6 = (const xmlChar *)*((void *)v4 + 12);
      goto LABEL_16;
    case 15:
      uint64_t v6 = (const xmlChar *)*((void *)v4 + 14);
      goto LABEL_16;
    case 16:
      uint64_t v6 = (const xmlChar *)*((void *)v4 + 13);
      goto LABEL_16;
    case 17:
    case 22:
    case 23:
    case 24:
      uint64_t v6 = (const xmlChar *)*((void *)v4 + 5);
      goto LABEL_16;
    case 18:
      goto LABEL_12;
    default:
      if (v5 == 2000) {
LABEL_12:
      }
        uint64_t v6 = (const xmlChar *)*((void *)v4 + 4);
      break;
  }

  while (1)
  {
LABEL_16:
    if (!v2)
    {
LABEL_19:
      uint64_t v8 = 0LL;
      return xmlSchemaFormatQName(a1, v6, v8);
    }

    int v7 = *v2;
    if (*v2 != 26) {
      break;
    }
    uint64_t v2 = (int *)*((void *)v2 + 3);
    if (!v2) {
      goto LABEL_19;
    }
  }

  uint64_t v8 = 0LL;
  switch(v7)
  {
    case 1:
    case 4:
    case 5:
    case 14:
    case 15:
    case 16:
      uint64_t v9 = (xmlChar **)(v2 + 4);
      goto LABEL_24;
    case 2:
    case 3:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 19:
    case 20:
    case 21:
      return xmlSchemaFormatQName(a1, v6, v8);
    case 17:
    case 22:
    case 23:
    case 24:
      uint64_t v9 = (xmlChar **)(v2 + 8);
      goto LABEL_24;
    case 18:
      uint64_t v9 = (xmlChar **)(v2 + 2);
      goto LABEL_24;
    default:
      if (v7 != 2000) {
        return xmlSchemaFormatQName(a1, v6, v8);
      }
      uint64_t v9 = (xmlChar **)(v2 + 6);
LABEL_24:
      uint64_t v8 = *v9;
      break;
  }

  return xmlSchemaFormatQName(a1, v6, v8);
}

xmlChar *xmlSchemaGetComponentDesignation(xmlChar **a1, int *a2)
{
  int v11 = 0LL;
  uint64_t v4 = *a1;
  if (*a2 == 1)
  {
    if (a2[40] == 45) {
      int v5 = "complex type definition";
    }
    else {
      int v5 = "simple type definition";
    }
  }

  else
  {
    int v5 = xmlSchemaItemTypeToStr(*a2);
  }

  uint64_t v6 = xmlStrcat(v4, (const xmlChar *)v5);
  *a1 = v6;
  int v7 = xmlStrcat(v6, (const xmlChar *)" '");
  *a1 = v7;
  ComponentQName = xmlSchemaGetComponentQName(&v11, a2);
  uint64_t v9 = xmlStrcat(v7, ComponentQName);
  *a1 = v9;
  int result = xmlStrcat(v9, (const xmlChar *)"'");
  *a1 = result;
  if (v11)
  {
    xmlFree(v11);
    return *a1;
  }

  return result;
}

uint64_t xmlSchemaGetSchemaBucketByTNS(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t ***)(*(void *)(a1 + 48) + 24LL);
  uint64_t v3 = *((unsigned int *)v2 + 2);
  for (uint64_t i = *v2; ; ++i)
  {
    uint64_t result = *i;
    if ((*(void *)(*i + 32) || !*(void *)(result + 8))
      && *(void *)(result + 16) == a2
      && *(_DWORD *)(result + 56))
    {
      break;
    }

    if (!--v3) {
      return 0LL;
    }
  }

  return result;
}

void xmlSchemaCustomWarning( _DWORD *a1, int a2, uint64_t a3, const xmlChar *a4, const xmlChar *a5, xmlChar *a6, xmlChar *a7)
{
  cur = 0LL;
  xmlSchemaFormatNodeForError((void **)&cur, (uint64_t)a1, a3);
  cur = xmlStrcat(cur, a4);
  cur = xmlStrcat(cur, (const xmlChar *)".\n");
  xmlSchemaErr4Line(a1, 1, a2, a3, 0, (const char *)cur, a5, a6, a7, 0LL);
  if (cur) {
    xmlFree(cur);
  }
}

uint64_t xmlSchemaGetChameleonSchemaBucket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(uint64_t ***)(*(void *)(a1 + 48) + 24LL);
  uint64_t v4 = *((unsigned int *)v3 + 2);
  for (uint64_t i = *v3; ; ++i)
  {
    uint64_t result = *i;
    if (!*(void *)(*i + 16) && *(void *)(result + 8) == a2 && *(void *)(result + 24) == a3) {
      break;
    }
    if (!--v4) {
      return 0LL;
    }
  }

  return result;
}

_DWORD *xmlSchemaPErr(uint64_t a1, uint64_t a2, int a3, const char *a4, const xmlChar *a5, xmlChar *a6)
{
  uint64_t v8 = (void *)a1;
  if (a1)
  {
    int v9 = *(_DWORD *)(a1 + 36) + 1;
    *(_DWORD *)(a1 + 32) = a3;
    *(_DWORD *)(a1 + 36) = v9;
    int v11 = *(void **)(a1 + 8);
    size_t v10 = *(void (**)(void *, const char *, ...))(a1 + 16);
    a1 = *(void *)(a1 + 40);
  }

  else
  {
    size_t v10 = 0LL;
    int v11 = 0LL;
  }

  return __xmlRaiseError( (xmlStructuredErrorFunc)a1,  v10,  v11,  v8,  a2,  0x10u,  a3,  2,  0LL,  0,  a5,  a6,  0LL,  0,  0,  a4,  (char)a5);
}

xmlChar *xmlSchemaGetProp(uint64_t a1, xmlNode *node, xmlChar *name)
{
  uint64_t result = xmlGetNoNsProp(node, name);
  if (result)
  {
    int v5 = result;
    uint64_t v6 = xmlDictLookup(*(xmlDictPtr *)(a1 + 152), result, -1);
    xmlFree(v5);
    return (xmlChar *)v6;
  }

  return result;
}

uint64_t xmlSchemaItemListAdd(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    uint64_t v5 = *(int *)(a1 + 12);
    if ((int)v5 <= *(_DWORD *)(a1 + 8))
    {
      *(_DWORD *)(a1 + 12) = 2 * v5;
      uint64_t v4 = xmlRealloc(v4, 16 * v5);
      *(void *)a1 = v4;
      if (!v4)
      {
        __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"growing item list");
        *(_DWORD *)(a1 + 12) = 0;
        return 0xFFFFFFFFLL;
      }
    }
  }

  else
  {
    uint64_t v4 = xmlMalloc(0xA0uLL);
    *(void *)a1 = v4;
    if (!v4)
    {
      __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"allocating new item list");
      return 0xFFFFFFFFLL;
    }

    *(_DWORD *)(a1 + 12) = 20;
  }

  uint64_t v6 = 0LL;
  uint64_t v7 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v7 + 1;
  *((void *)v4 + v7) = a2;
  return v6;
}

uint64_t xmlSchemaGetPropNode(uint64_t a1, xmlChar *str2)
{
  uint64_t i = 0LL;
  if (a1)
  {
    if (str2)
    {
      for (uint64_t i = *(void *)(a1 + 88); i; uint64_t i = *(void *)(i + 48))
      {
        if (!*(void *)(i + 72) && xmlStrEqual(*(const xmlChar **)(i + 16), str2)) {
          break;
        }
      }
    }
  }

  return i;
}

uint64_t xmlSchemaPValAttrNode(_DWORD *a1, xmlNode *a2, xmlSchemaType *a3, xmlChar **a4)
{
  if (!a2 || !a3) {
    return 0xFFFFFFFFLL;
  }
  int NodeContent = (xmlChar *)xmlSchemaGetNodeContent((uint64_t)a1, a2);
  if (a4) {
    *a4 = NodeContent;
  }
  return xmlSchemaPValAttrNodeValue(a1, a2, NodeContent, a3);
}

const xmlChar *xmlSchemaGetNodeContent(uint64_t a1, xmlNode *cur)
{
  Content = xmlNodeGetContent(cur);
  if (!Content) {
    Content = xmlStrdup((const xmlChar *)&byte_181A3ACBA);
  }
  uint64_t v4 = xmlDictLookup(*(xmlDictPtr *)(a1 + 152), Content, -1);
  xmlFree(Content);
  return v4;
}

BOOL xmlSchemaPValAttrFormDefault(const xmlChar *a1, _DWORD *a2, int a3)
{
  if (xmlStrEqual(a1, (const xmlChar *)"qualified"))
  {
    if ((*a2 & a3) == 0) {
      *a2 |= a3;
    }
    return 0LL;
  }

  return !xmlStrEqual(a1, (const xmlChar *)"unqualified");
}

void xmlSchemaPSimpleTypeErr( uint64_t a1, int a2, uint64_t a3, uint64_t a4, const char *a5, const xmlChar *a6, const xmlChar *a7, char a8)
{
  cur = 0LL;
  xmlSchemaFormatNodeForError((void **)&cur, a1, a3);
  if (a7)
  {
    cur = xmlStrcat(cur, a7);
    cur = xmlStrcat(cur, (const xmlChar *)".\n");
    xmlSchemaPErrExt(a1, a3, a2, (const char *)cur, a8);
    goto LABEL_37;
  }

  int v16 = *(_DWORD *)(a3 + 8);
  if (!a4)
  {
    if (v16 == 2) {
      uint64_t v24 = "The value '%s' is not valid.";
    }
    else {
      uint64_t v24 = "The character content is not valid.";
    }
    cur = xmlStrcat(cur, (const xmlChar *)v24);
    goto LABEL_28;
  }

  if (v16 == 2) {
    unsigned int v17 = "'%s' is not a valid value of ";
  }
  else {
    unsigned int v17 = "The character content is not a valid value of ";
  }
  int v18 = xmlStrcat(cur, (const xmlChar *)v17);
  cur = v18;
  else {
    int v19 = "the local ";
  }
  uint64_t v20 = xmlStrcat(v18, (const xmlChar *)v19);
  int v21 = v20;
  cur = v20;
  int v22 = *(_DWORD *)(a4 + 88);
  if ((v22 & 0x100) != 0)
  {
    uint64_t v23 = "atomic type";
  }

  else if ((v22 & 0x40) != 0)
  {
    uint64_t v23 = "list type";
  }

  else
  {
    if ((v22 & 0x80) == 0) {
      goto LABEL_21;
    }
    uint64_t v23 = "union type";
  }

  int v21 = xmlStrcat(v20, (const xmlChar *)v23);
  cur = v21;
LABEL_21:
  if (xmlSchemaIsGlobalItem((int *)a4))
  {
    int v35 = 0LL;
    int v25 = xmlStrcat(v21, (const xmlChar *)" '");
    cur = v25;
    if (*(_DWORD *)(a4 + 160))
    {
      cur = xmlStrcat(v25, (const xmlChar *)"xs:");
      int v26 = *(xmlChar **)(a4 + 16);
    }

    else
    {
      int v26 = xmlSchemaFormatQName((void **)&v35, *(const xmlChar **)(a4 + 208), *(xmlChar **)(a4 + 16));
      if (v35)
      {
LABEL_26:
        uint64_t v27 = cur;
        int v28 = xmlEscapeFormatString((void **)&v35);
        cur = xmlStrcat(v27, v28);
        cur = xmlStrcat(cur, (const xmlChar *)"'.");
        if (v35) {
          xmlFree(v35);
        }
        goto LABEL_28;
      }
    }

    int v35 = xmlStrdup(v26);
    goto LABEL_26;
  }

uint64_t xmlSchemaPValAttrBlockFinal(xmlChar *str1, int *a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (str1 && a2)
  {
    if (!*str1) {
      return 0LL;
    }
    if (xmlStrEqual(str1, (const xmlChar *)"#all"))
    {
      if (a3 == -1) {
        int v15 = 0;
      }
      else {
        int v15 = a3;
      }
      if (a5 == -1) {
        int v16 = 0;
      }
      else {
        int v16 = a5;
      }
      int v17 = v15 | v16;
      if (a6 == -1) {
        int v18 = 0;
      }
      else {
        int v18 = a6;
      }
      int v19 = *a2 | v17 | v18 | a4;
      *a2 = v19;
      if (a7 != -1)
      {
        uint64_t result = 0LL;
        *a2 = v19 | a7;
        return result;
      }

      return 0LL;
    }

    int v29 = a4;
    while (1)
    {
      while (1)
      {
        unsigned int v20 = *str1;
        if (v20 > 0x20 || ((1LL << v20) & 0x100002600LL) == 0) {
          break;
        }
        ++str1;
      }

      uint64_t v22 = 0LL;
      if (!v22) {
        return 0LL;
      }
      uint64_t v23 = xmlStrndup(str1, v22);
      if (xmlStrEqual(v23, (const xmlChar *)"extension")) {
        break;
      }
      if (xmlStrEqual(v23, (const xmlChar *)"restriction"))
      {
        int v25 = *a2;
        int v26 = v29;
        goto LABEL_33;
      }

      if (xmlStrEqual(v23, (const xmlChar *)"substitution"))
      {
        if (a5 != -1)
        {
          if ((*a2 & a5) == 0)
          {
            int v24 = *a2 | a5;
LABEL_35:
            *a2 = v24;
          }

          goto LABEL_36;
        }

        goto LABEL_44;
      }

      if (xmlStrEqual(v23, (const xmlChar *)"list"))
      {
        int v26 = a6;
        if (a6 != -1)
        {
          int v25 = *a2;
          goto LABEL_33;
        }

uint64_t xmlSchemaPValAttrNodeID(uint64_t a1, xmlNode *cur)
{
  Content = xmlNodeGetContent(cur);
  uint64_t v5 = xmlValidateNCName(Content, 1);
  if ((_DWORD)v5)
  {
    uint64_t v6 = v5;
    if ((int)v5 >= 1)
    {
      xmlSchemaTypePtr BuiltInType = xmlSchemaGetBuiltInType(XML_SCHEMAS_ID);
      uint64_t v8 = "The value '%s' of simple type 'xs:ID' is not a valid 'xs:NCName'";
      goto LABEL_4;
    }
  }

  else
  {
    if (LODWORD(cur->content) != 2)
    {
      size_t v10 = xmlSchemaCollapseString(Content);
      if (v10)
      {
        int v11 = v10;
        xmlFree(Content);
        Content = v11;
      }

      if (!xmlAddID(0LL, cur->doc, Content, (xmlAttrPtr)cur))
      {
        xmlSchemaTypePtr BuiltInType = xmlSchemaGetBuiltInType(XML_SCHEMAS_ID);
        uint64_t v8 = "Duplicate value '%s' of simple type 'xs:ID'";
LABEL_4:
        uint64_t v6 = 3037LL;
        xmlSchemaPSimpleTypeErr( a1,  3037,  (uint64_t)cur,  (uint64_t)BuiltInType,  0LL,  0LL,  (const xmlChar *)v8,  (char)Content);
        if (!Content) {
          return v6;
        }
        goto LABEL_9;
      }

      uint64_t v6 = 0LL;
      LODWORD(cur->content) = 2;
      if (!Content) {
        return v6;
      }
LABEL_9:
      xmlFree(Content);
      return v6;
    }

    uint64_t v6 = 0LL;
  }

  if (Content) {
    goto LABEL_9;
  }
  return v6;
}

uint64_t xmlSchemaPValAttrNodeValue(_DWORD *a1, xmlNodePtr node, xmlChar *value, xmlSchemaTypePtr type)
{
  if (!type) {
    return 0xFFFFFFFFLL;
  }
  if (type->type != XML_SCHEMA_TYPE_BASIC)
  {
    uint64_t v14 = "the given type is not a built-in type";
LABEL_17:
    xmlSchemaInternalErr2(a1, (const xmlChar *)"xmlSchemaPValAttrNodeValue", (const xmlChar *)v14, 0LL);
    return 0xFFFFFFFFLL;
  }

  unsigned int builtInType = type->builtInType;
  BOOL v7 = builtInType > 0x1D;
  int v8 = (1 << builtInType) & 0x20630000;
  if (v7 || v8 == 0)
  {
    uint64_t v14 = "validation using the given type is not supported while parsing a schema";
    goto LABEL_17;
  }

  int v12 = xmlSchemaValPredefTypeNode(type, value, 0LL, node);
  if (v12 < 0)
  {
    uint64_t v14 = "failed to validate a schema attribute value";
    goto LABEL_17;
  }

  if (!v12) {
    return 0LL;
  }
  if ((type->flags & 0x40) != 0) {
    uint64_t v13 = 1825LL;
  }
  else {
    uint64_t v13 = 1824LL;
  }
  xmlSchemaPSimpleTypeErr((uint64_t)a1, v13, (uint64_t)node, (uint64_t)type, 0LL, value, 0LL, 0);
  return v13;
}

BOOL xmlSchemaIsGlobalItem(int *a1)
{
  int v1 = *a1;
  if ((*a1 - 4) < 2)
  {
    if ((a1[22] & 8) == 0) {
      return 0LL;
    }
  }

  else
  {
    if (v1 != 14) {
      return v1 != 15 || (a1[30] & 1) != 0;
    }
    if ((a1[22] & 2) == 0) {
      return 0LL;
    }
  }

  return 1LL;
}

_DWORD *xmlSchemaPErrExt(uint64_t a1, uint64_t a2, int a3, const char *a4, char a5)
{
  BOOL v7 = (void *)a1;
  if (a1)
  {
    int v8 = *(_DWORD *)(a1 + 36) + 1;
    *(_DWORD *)(a1 + 32) = a3;
    *(_DWORD *)(a1 + 36) = v8;
    size_t v10 = *(void **)(a1 + 8);
    int v9 = *(void (**)(void *, const char *, ...))(a1 + 16);
    a1 = *(void *)(a1 + 40);
  }

  else
  {
    int v9 = 0LL;
    size_t v10 = 0LL;
  }

  return __xmlRaiseError((xmlStructuredErrorFunc)a1, v9, v10, v7, a2, 0x10u, a3, 2, 0LL, 0, 0LL, 0LL, 0LL, 0, 0, a4, a5);
}

void *xmlSchemaParseAnnotation(_DWORD *a1, uint64_t a2, int a3)
{
  if (!a2) {
    return 0LL;
  }
  if (a3)
  {
    uint64_t v5 = xmlMalloc(0x10uLL);
    if (v5)
    {
      uint64_t v6 = v5;
      void *v5 = 0LL;
      v5[1] = a2;
      goto LABEL_10;
    }

    if (a1) {
      ++a1[9];
    }
    __xmlSimpleError(16, 2, a2, 0LL, (uint64_t)"allocating annotation");
  }

  uint64_t v6 = 0LL;
LABEL_10:
  uint64_t v7 = *(void *)(a2 + 88);
  if (v7)
  {
    while (1)
    {
      uint64_t v8 = *(void *)(v7 + 72);
      if (v8) {
        goto LABEL_12;
      }
      if (xmlStrEqual(*(const xmlChar **)(v7 + 16), (const xmlChar *)"id")) {
        break;
      }
LABEL_17:
      xmlSchemaPIllegalAttrErr(a1, v7);
LABEL_18:
      uint64_t v7 = *(void *)(v7 + 48);
      if (!v7) {
        goto LABEL_19;
      }
    }

    uint64_t v8 = *(void *)(v7 + 72);
    if (!v8) {
      goto LABEL_18;
    }
LABEL_12:
    if (!xmlStrEqual(*(const xmlChar **)(v8 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema")) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }

uint64_t xmlSchemaParseComplexType(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4 = a4;
  uint64_t v61 = 0LL;
  xmlNodePtr next = 0LL;
  uint64_t v8 = *(void *)(a1 + 160);
  if (a4)
  {
    uint64_t PropNode = xmlSchemaGetPropNode(a3, (xmlChar *)"name");
    if (!PropNode)
    {
      xmlSchemaPMissingAttrErr(a1, a3, (xmlChar *)"name");
      return PropNode;
    }

    xmlSchemaTypePtr BuiltInType = xmlSchemaGetBuiltInType(XML_SCHEMAS_NCNAME);
    int v11 = xmlSchemaAddType(a1, a2, 5, (uint64_t)v61, *(void *)(a1 + 200), a3, 1);
    uint64_t PropNode = (uint64_t)v11;
    if (!v11) {
      return PropNode;
    }
    v11[9] = a3;
    *(_DWORD *)int v11 = 5;
    *((_DWORD *)v11 + 22) |= 8u;
  }

  else
  {
    uint64_t v12 = xmlSchemaAddType(a1, a2, 5, 0LL, *(void *)(a1 + 200), a3, 0);
    uint64_t PropNode = (uint64_t)v12;
    if (!v12) {
      return PropNode;
    }
    uint64_t v61 = (xmlChar *)v12[2];
    v12[9] = a3;
    *(_DWORD *)uint64_t v12 = 5;
  }

  *(void *)(PropNode + 208) = *(void *)(a1 + 200);
  uint64_t v13 = *(xmlNode **)(a3 + 88);
  if (!v13)
  {
    int v14 = 0;
    goto LABEL_40;
  }

  uint64_t v58 = v8;
  int v56 = 0;
  int v14 = 0;
  uint64_t v15 = (int *)(PropNode + 88);
  do
  {
    uint64_t ns = v13->ns;
    if (ns)
    {
      if (!xmlStrEqual(ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema")) {
        goto LABEL_22;
      }
LABEL_12:
      xmlSchemaPIllegalAttrErr((_DWORD *)a1, (uint64_t)v13);
      goto LABEL_22;
    }

    if (xmlStrEqual(v13->name, (const xmlChar *)"id"))
    {
      int v17 = (xmlNode *)xmlSchemaGetPropNode(a3, (xmlChar *)"id");
      if (v17) {
        xmlSchemaPValAttrNodeID(a1, v17);
      }
    }

    else
    {
      if (xmlStrEqual(v13->name, (const xmlChar *)"mixed"))
      {
        int v18 = *v15 | 1;
        goto LABEL_19;
      }

      if (!v4) {
        goto LABEL_12;
      }
      if (!xmlStrEqual(v13->name, (const xmlChar *)"name"))
      {
        if (xmlStrEqual(v13->name, (const xmlChar *)"abstract"))
        {
          if (xmlSchemaPGetBoolNodeValue(a1, v13))
          {
            int v18 = *v15 | 0x100000;
LABEL_19:
            *uint64_t v15 = v18;
          }
        }

        else if (xmlStrEqual(v13->name, (const xmlChar *)"final"))
        {
          int NodeContent = (xmlChar *)xmlSchemaGetNodeContent(a1, v13);
          if (xmlSchemaPValAttrBlockFinal(NodeContent, (int *)(PropNode + 88), 512, 1024, -1, -1, -1))
          {
            uint64_t v19 = a1;
            uint64_t v20 = (uint64_t)v13;
            int v21 = "(#all | List of (extension | restriction))";
LABEL_33:
            xmlSchemaPSimpleTypeErr(v19, 3037, v20, 0LL, v21, NodeContent, 0LL, 0);
            goto LABEL_22;
          }

          int v14 = 1;
        }

        else
        {
          if (!xmlStrEqual(v13->name, (const xmlChar *)"block")) {
            goto LABEL_12;
          }
          int NodeContent = (xmlChar *)xmlSchemaGetNodeContent(a1, v13);
          if (xmlSchemaPValAttrBlockFinal( NodeContent,  (int *)(PropNode + 88),  0x40000,  0x80000,  -1,  -1,  -1))
          {
            uint64_t v19 = a1;
            uint64_t v20 = (uint64_t)v13;
            int v21 = "(#all | List of (extension | restriction)) ";
            goto LABEL_33;
          }

          int v56 = 1;
        }
      }
    }

LABEL_88:
          xmlSchemaPIllegalAttrErr((_DWORD *)a1, v36);
          goto LABEL_91;
        }

uint64_t xmlSchemaParseSimpleType(uint64_t a1, uint64_t a2, xmlNode *a3, int a4)
{
  name = 0LL;
  if (!a3) {
    return 0LL;
  }
  if (!a4)
  {
    uint64_t v10 = xmlSchemaAddType(a1, a2, 4, 0LL, *(void *)(a1 + 200), (uint64_t)a3, 0);
    uint64_t PropNode = (uint64_t)v10;
    if (!v10) {
      return PropNode;
    }
    _DWORD *v10 = 4;
    v10[23] = 4;
    uint64_t properties = (uint64_t)a3->properties;
    if (!properties) {
      goto LABEL_36;
    }
    while (1)
    {
      uint64_t v12 = *(void *)(properties + 72);
      if (!v12) {
        break;
      }
      if (xmlStrEqual(*(const xmlChar **)(v12 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema")) {
        goto LABEL_10;
      }
LABEL_11:
      uint64_t properties = *(void *)(properties + 48);
      if (!properties) {
        goto LABEL_36;
      }
    }

    if (xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"id")) {
      goto LABEL_11;
    }
LABEL_10:
    xmlSchemaPIllegalAttrErr((_DWORD *)a1, properties);
    goto LABEL_11;
  }

  uint64_t PropNode = xmlSchemaGetPropNode((uint64_t)a3, (xmlChar *)"name");
  if (!PropNode)
  {
    xmlSchemaPMissingAttrErr(a1, (uint64_t)a3, (xmlChar *)"name");
    return PropNode;
  }

  xmlSchemaTypePtr BuiltInType = xmlSchemaGetBuiltInType(XML_SCHEMAS_NCNAME);
  if (*(_DWORD *)(a1 + 184))
  {
    if (*(_DWORD *)(a1 + 188))
    {
      xmlSchemaPCustomErrExt( a1,  3081,  0LL,  (uint64_t)a3,  (const xmlChar *)"Redefinition of built-in simple types is not supported");
      return 0LL;
    }

    uint64_t PropNode = (uint64_t)xmlSchemaGetPredefinedType(name, (const xmlChar *)"http://www.w3.org/2001/XMLSchema");
    if (PropNode) {
      return PropNode;
    }
  }

  uint64_t v13 = xmlSchemaAddType(a1, a2, 4, (uint64_t)name, *(void *)(a1 + 200), (uint64_t)a3, 1);
  uint64_t PropNode = (uint64_t)v13;
  if (!v13) {
    return PropNode;
  }
  _DWORD *v13 = 4;
  v13[23] = 4;
  int v14 = v13 + 22;
  v13[22] |= 8u;
  uint64_t v15 = (uint64_t)a3->properties;
  if (v15)
  {
    while (1)
    {
      uint64_t v16 = *(void *)(v15 + 72);
      if (!v16) {
        break;
      }
      if (xmlStrEqual(*(const xmlChar **)(v16 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema")) {
        goto LABEL_24;
      }
LABEL_28:
      uint64_t v15 = *(void *)(v15 + 48);
      if (!v15) {
        goto LABEL_29;
      }
    }

    if (xmlStrEqual(*(const xmlChar **)(v15 + 16), (const xmlChar *)"id")
      || xmlStrEqual(*(const xmlChar **)(v15 + 16), (const xmlChar *)"name")
      || xmlStrEqual(*(const xmlChar **)(v15 + 16), (const xmlChar *)"final"))
    {
      goto LABEL_28;
    }

void *xmlSchemaParseElement(uint64_t a1, uint64_t a2, xmlNode *a3, _DWORD *a4, int a5)
{
  if (a4) {
    *a4 = 0;
  }
  uint64_t PropNode = (xmlNode *)xmlSchemaGetPropNode((uint64_t)a3, (xmlChar *)"name");
  uint64_t v11 = xmlSchemaGetPropNode((uint64_t)a3, (xmlChar *)"ref");
  if (v11) {
    BOOL v12 = a5 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (!v12 && PropNode == 0LL)
  {
    xmlSchemaPMissingAttrErr(a1, (uint64_t)a3, (xmlChar *)"name");
    return 0LL;
  }

  int v14 = (xmlNode *)v11;
  uint64_t v15 = (xmlNode *)xmlSchemaGetPropNode((uint64_t)a3, (xmlChar *)"id");
  if (v15) {
    xmlSchemaPValAttrNodeID(a1, v15);
  }
  childreuint64_t n = a3->children;
  if (!children
    || !children->ns
    || !xmlStrEqual(children->name, (const xmlChar *)"annotation")
    || !xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
  {
    uint64_t v17 = 0LL;
    if (!a5) {
      goto LABEL_17;
    }
LABEL_40:
    uint64_t v25 = 0LL;
    goto LABEL_41;
  }

  uint64_t v17 = xmlSchemaParseAnnotation((_DWORD *)a1, (uint64_t)children, 1);
  childreuint64_t n = children->next;
  if (a5) {
    goto LABEL_40;
  }
LABEL_17:
  uint64_t v96 = v17;
  int MinOccurs = xmlGetMinOccurs(a1, (uint64_t)a3, -1, "xs:nonNegativeInteger");
  int MaxOccurs = xmlGetMaxOccurs(a1, (uint64_t)a3, 0, 0x40000000, "(xs:nonNegativeInteger | unbounded)");
  xmlSchemaPCheckParticleCorrect_2(a1, (uint64_t)a3, MinOccurs, MaxOccurs);
  uint64_t v95 = xmlSchemaAddParticle(a1, (uint64_t)a3, MinOccurs, MaxOccurs);
  if (!v95)
  {
    uint64_t v17 = v96;
    if (v96) {
      goto LABEL_52;
    }
    return 0LL;
  }

  if (v14)
  {
    uint64_t v98 = 0LL;
    str2 = 0LL;
    if (a4) {
      *a4 = 1;
    }
    int NodeContent = (xmlChar *)xmlSchemaGetNodeContent(a1, v14);
    xmlSchemaPValAttrNodeQNameValue(a1, a2, (uint64_t)v14, NodeContent, (const xmlChar **)&str2, (const xmlChar **)&v98);
    uint64_t v21 = str2;
    xmlSchemaCheckReference(a1, (uint64_t)a3, (uint64_t)v14, str2);
    if (PropNode) {
      xmlSchemaPMutualExclAttrErr(a1, 3039, 0LL, (uint64_t)PropNode);
    }
    uint64_t properties = (uint64_t)a3->properties;
    if (!properties)
    {
LABEL_33:
      if (children) {
        goto LABEL_34;
      }
      goto LABEL_35;
    }

    while (1)
    {
      uint64_t v23 = *(void *)(properties + 72);
      if (v23)
      {
        if (xmlStrEqual(*(const xmlChar **)(v23 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema")) {
          xmlSchemaPIllegalAttrErr((_DWORD *)a1, properties);
        }
      }

      else if (!xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"ref") {
             && !xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"name")
      }
             && !xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"id")
             && !xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"maxOccurs")
             && !xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"minOccurs"))
      {
        xmlSchemaPCustomAttrErr(a1, 3040, properties);
        if (!children) {
          goto LABEL_35;
        }
LABEL_34:
        xmlSchemaPContentErr(a1, 3033, (uint64_t)a3, (uint64_t)children, 0LL, (xmlChar *)"(annotation?)");
LABEL_35:
        if (MaxOccurs | MinOccurs)
        {
          uint64_t v24 = xmlSchemaNewQNameRef(a1, 14, (uint64_t)v98, (uint64_t)v21);
          if (v24)
          {
            uint64_t v25 = v95;
            v95[3] = v24;
            v95[1] = v96;
            xmlSchemaAddItemSize((void **)(*(void *)(a1 + 48) + 40LL), 10, (uint64_t)v95);
            return v25;
          }
        }

        uint64_t v25 = v95;
        uint64_t v17 = v96;
LABEL_42:
        if (v17)
        {
          if (v25) {
            v25[1] = 0LL;
          }
LABEL_52:
          int v34 = (void *)*v17;
          xmlFree(v17);
          if (v34)
          {
            do
            {
              uint64_t v35 = (void *)*v34;
              xmlFree(v34);
              int v34 = v35;
            }

            while (v35);
          }
        }

        return 0LL;
      }

      uint64_t properties = *(void *)(properties + 48);
      if (!properties) {
        goto LABEL_33;
      }
    }
  }

  uint64_t v25 = v95;
  uint64_t v17 = v96;
LABEL_41:
  uint64_t v98 = 0LL;
  xmlSchemaTypePtr BuiltInType = xmlSchemaGetBuiltInType(XML_SCHEMAS_NCNAME);
  if (a5) {
    goto LABEL_46;
  }
  uint64_t v37 = (xmlNode *)xmlSchemaGetPropNode((uint64_t)a3, (xmlChar *)"form");
  if (v37)
  {
    uint64_t v38 = (uint64_t)v37;
    int v39 = xmlSchemaGetNodeContent(a1, v37);
    if (!xmlStrEqual(v39, (const xmlChar *)"qualified"))
    {
      if (!xmlStrEqual(v39, (const xmlChar *)"unqualified")) {
        xmlSchemaPSimpleTypeErr(a1, 3037, v38, 0LL, "(qualified | unqualified)", v39, 0LL, 0);
      }
      goto LABEL_95;
    }

LABEL_156:
      xmlSchemaPIllegalAttrErr((_DWORD *)a1, v65);
      goto LABEL_159;
    }

LABEL_164:
    uint64_t v67 = xmlSchemaGetPropNode((uint64_t)children, (xmlChar *)"name");
    if (!v67)
    {
      xmlSchemaPMissingAttrErr(a1, (uint64_t)children, (xmlChar *)"name");
LABEL_181:
      uint64_t v63 = 0LL;
      goto LABEL_182;
    }

    uint64_t v68 = (xmlNode *)v67;
    uint64_t v69 = xmlSchemaGetBuiltInType(XML_SCHEMAS_NCNAME);
    uint64_t v70 = str2;
    if (!str2) {
      goto LABEL_181;
    }
    uint64_t v71 = xmlMalloc(0x50uLL);
    if (!v71)
    {
      if (a1) {
        ++*(_DWORD *)(a1 + 36);
      }
      __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"allocating an identity-constraint definition");
      uint64_t v63 = 0LL;
      goto LABEL_182;
    }

    uint64_t v63 = (uint64_t)v71;
    *uint64_t v71 = 0u;
    v71[1] = 0u;
    v71[3] = 0u;
    v71[4] = 0u;
    v71[2] = 0u;
    *((void *)v71 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v70;
    *((void *)v71 + 5) = v89;
    *(_DWORD *)uint64_t v71 = v88;
    *((void *)v71 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = children;
    xmlSchemaAddItemSize((void **)(*(void *)(*(void *)(a1 + 48) + 32LL) + 64LL), 5, (uint64_t)v71);
    if (v91) {
      xmlSchemaAddItemSize((void **)(*(void *)(a1 + 48) + 40LL), 10, v63);
    }
    int v72 = (xmlNode *)xmlSchemaGetPropNode((uint64_t)children, (xmlChar *)"id");
    if (v72) {
      xmlSchemaPValAttrNodeID(a1, v72);
    }
    if (v91)
    {
      uint64_t v73 = xmlSchemaGetPropNode((uint64_t)children, (xmlChar *)"refer");
      if (v73)
      {
        int v74 = (xmlNode *)v73;
        int v75 = xmlSchemaNewQNameRef(a1, 23, 0LL, 0LL);
        *(void *)(v63 + 72) = v75;
        if (!v75) {
          goto LABEL_181;
        }
        uint64_t v90 = (const xmlChar **)(v75 + 3);
        uint64_t v92 = (const xmlChar **)(v75 + 4);
        xmlSchemaTypePtr v76 = (xmlChar *)xmlSchemaGetNodeContent(a1, v74);
        xmlSchemaPValAttrNodeQNameValue(a1, a2, (uint64_t)v74, v76, v92, v90);
        xmlSchemaCheckReference(a1, (uint64_t)children, (uint64_t)v74, *(xmlChar **)(*(void *)(v63 + 72) + 32LL));
      }

      else
      {
        xmlSchemaPMissingAttrErr(a1, (uint64_t)children, (xmlChar *)"refer");
      }
    }

    uint64_t v78 = (uint64_t)children->children;
    if (v78)
    {
      if (!*(void *)(v78 + 72)) {
        goto LABEL_197;
      }
      uint64_t v93 = (uint64_t)children->children;
      if (!xmlStrEqual(*(const xmlChar **)(v78 + 16), (const xmlChar *)"annotation")
        || !xmlStrEqual( *(const xmlChar **)(*(void *)(v93 + 72) + 16LL),  (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
      {
        uint64_t v78 = v93;
LABEL_197:
        if (!*(void *)(v78 + 72)) {
          goto LABEL_216;
        }
        uint64_t v79 = v78;
        if (!xmlStrEqual(*(const xmlChar **)(v78 + 16), (const xmlChar *)"selector")
          || !xmlStrEqual( *(const xmlChar **)(*(void *)(v79 + 72) + 16LL),  (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        {
          goto LABEL_215;
        }

        *(void *)(v63 + 48) = xmlSchemaParseIDCSelectorAndField((_DWORD *)a1, v63, v79, 0);
        uint64_t v80 = *(void *)(v79 + 48);
        if (v80)
        {
          uint64_t v79 = *(void *)(v79 + 48);
          if (*(void *)(v80 + 72)
            && xmlStrEqual(*(const xmlChar **)(v80 + 16), (const xmlChar *)"field")
            && xmlStrEqual( *(const xmlChar **)(*(void *)(v79 + 72) + 16LL),  (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
          {
            uint64_t v78 = v79;
            uint64_t v94 = 0LL;
            while (1)
            {
              uint64_t v81 = v78;
              uint64_t v82 = xmlSchemaParseIDCSelectorAndField((_DWORD *)a1, v63, v78, 1);
              if (v82)
              {
                int v83 = *(_DWORD *)(v63 + 64);
                *((_DWORD *)v82 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v83;
                *(_DWORD *)(v63 + 6xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v83 + 1;
                int v84 = (void *)(v63 + 56);
                if (v94) {
                  int v84 = v94;
                }
                *int v84 = v82;
                uint64_t v94 = v82;
              }

              uint64_t v78 = *(void *)(v81 + 48);
              if (!v78) {
                goto LABEL_182;
              }
              if (!*(void *)(v78 + 72)) {
                goto LABEL_216;
              }
              uint64_t v79 = *(void *)(v81 + 48);
              if (!xmlStrEqual(*(const xmlChar **)(v78 + 16), (const xmlChar *)"field")) {
                goto LABEL_215;
              }
              int v85 = xmlStrEqual( *(const xmlChar **)(*(void *)(v79 + 72) + 16LL),  (const xmlChar *)"http://www.w3.org/2001/XMLSchema");
              uint64_t v78 = v79;
              if (!v85) {
                goto LABEL_216;
              }
            }
          }

          xmlSchemaPContentErr(a1, 3033, (uint64_t)children, v79, 0LL, (xmlChar *)"(annotation?, (selector, field+))");
LABEL_215:
          uint64_t v78 = v79;
LABEL_216:
          uint64_t v86 = a1;
          uint64_t v87 = (uint64_t)children;
        }

        else
        {
          uint64_t v86 = a1;
          uint64_t v87 = (uint64_t)children;
          uint64_t v78 = 0LL;
        }

        xmlSchemaPContentErr(v86, 3033, v87, v78, 0LL, (xmlChar *)"(annotation?, (selector, field+))");
        goto LABEL_182;
      }

      *(void *)(v63 + 8) = xmlSchemaParseAnnotation((_DWORD *)a1, v93, 1);
      uint64_t v78 = *(void *)(v93 + 48);
      if (v78) {
        goto LABEL_197;
      }
    }

    xmlSchemaPContentErr( a1,  3034,  (uint64_t)children,  0LL,  (xmlChar *)"A child element is missing",  (xmlChar *)"(annotation?, (selector, field+))");
LABEL_182:
    uint64_t v77 = (uint64_t *)(v62 + 16);
    if (!v62) {
      uint64_t v77 = (uint64_t *)(v30 + 192);
    }
    *uint64_t v77 = v63;
    childreuint64_t n = children->next;
    uint64_t v62 = v63;
    if (!children) {
      goto LABEL_220;
    }
  }

  xmlSchemaPContentErr( a1,  3033,  (uint64_t)a3,  (uint64_t)children,  0LL,  (xmlChar *)"(annotation?, ((simpleType | complexType)?, (unique | key | keyref)*))");
LABEL_220:
  *(void *)(v30 + 48) = v97;
  if (a5) {
    return (void *)v30;
  }
  v25[3] = v30;
  return v25;
}

void xmlSchemaParseAttributeGroupDefinition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v19 = 0;
  uint64_t PropNode = xmlSchemaGetPropNode(a3, (xmlChar *)"name");
  if (!PropNode)
  {
    xmlSchemaPMissingAttrErr(a1, a3, (xmlChar *)"name");
    return;
  }

  uint64_t v7 = (xmlNode *)PropNode;
  uint64_t v21 = 0LL;
  xmlSchemaTypePtr BuiltInType = xmlSchemaGetBuiltInType(XML_SCHEMAS_NCNAME);
  if (!xmlSchemaPValAttrNode((_DWORD *)a1, v7, BuiltInType, &v21))
  {
    int v9 = v21;
    if (v21)
    {
      uint64_t v10 = *(void *)(a1 + 200);
      uint64_t v11 = xmlMalloc(0x78uLL);
      if (!v11)
      {
        ++*(_DWORD *)(a1 + 36);
        __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"allocating attribute group");
        return;
      }

      uint64_t v12 = (uint64_t)v11;
      _OWORD *v11 = 0u;
      v11[1] = 0u;
      v11[5] = 0u;
      v11[6] = 0u;
      v11[3] = 0u;
      v11[4] = 0u;
      v11[2] = 0u;
      *(_DWORD *)uint64_t v11 = 16;
      *((void *)v11 + 2) = v9;
      *((void *)v11 + 1xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = v10;
      *((void *)v11 + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
      *((void *)v11 + 8) = a3;
      *((_DWORD *)v11 + 18) |= 2u;
      if (*(_DWORD *)(a1 + 188))
      {
        uint64_t v13 = xmlSchemaAddRedef(a1, *(void *)(a1 + 208), (uint64_t)v11, (uint64_t)v9, v10);
        *(void *)(a1 + 216) = v13;
        if (!v13)
        {
          xmlFree((void *)v12);
          return;
        }

        *(_DWORD *)(a1 + 22xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0;
      }

      xmlSchemaAddItemSize((void **)(*(void *)(*(void *)(a1 + 48) + 32LL) + 64LL), 5, v12);
      xmlSchemaAddItemSize((void **)(*(void *)(a1 + 48) + 40LL), 10, v12);
      uint64_t v14 = *(void *)(a3 + 88);
      if (v14)
      {
        while (1)
        {
          uint64_t v15 = *(void *)(v14 + 72);
          if (!v15) {
            break;
          }
          if (xmlStrEqual(*(const xmlChar **)(v15 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema")) {
            goto LABEL_13;
          }
LABEL_16:
          uint64_t v14 = *(void *)(v14 + 48);
          if (!v14) {
            goto LABEL_17;
          }
        }

        if (xmlStrEqual(*(const xmlChar **)(v14 + 16), (const xmlChar *)"name")
          || xmlStrEqual(*(const xmlChar **)(v14 + 16), (const xmlChar *)"id"))
        {
          goto LABEL_16;
        }

void xmlSchemaParseModelGroupDefinition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t PropNode = xmlSchemaGetPropNode(a3, (xmlChar *)"name");
  if (!PropNode)
  {
    xmlSchemaPMissingAttrErr(a1, a3, (xmlChar *)"name");
    return;
  }

  uint64_t v7 = (xmlNode *)PropNode;
  int v19 = 0LL;
  xmlSchemaTypePtr BuiltInType = xmlSchemaGetBuiltInType(XML_SCHEMAS_NCNAME);
  int v9 = v19;
  if (!v19) {
    return;
  }
  uint64_t v10 = *(void *)(a1 + 200);
  uint64_t v11 = xmlMalloc(0x40uLL);
  if (!v11)
  {
    ++*(_DWORD *)(a1 + 36);
    __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"adding group");
    return;
  }

  uint64_t v12 = v11;
  *((_OWORD *)v11 + 2) = 0u;
  *((_OWORD *)v11 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
  *(_OWORD *)uint64_t v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *(_DWORD *)uint64_t v11 = 17;
  v11[5] = v10;
  v11[6] = a3;
  v11[4] = v9;
  if (*(_DWORD *)(a1 + 188))
  {
    uint64_t v13 = xmlSchemaAddRedef(a1, *(void *)(a1 + 208), (uint64_t)v11, (uint64_t)v9, v10);
    *(void *)(a1 + 216) = v13;
    if (!v13)
    {
      xmlFree(v12);
      return;
    }

    *(_DWORD *)(a1 + 22xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0;
  }

  xmlSchemaAddItemSize((void **)(*(void *)(*(void *)(a1 + 48) + 32LL) + 64LL), 5, (uint64_t)v12);
  xmlSchemaAddItemSize((void **)(*(void *)(a1 + 48) + 40LL), 10, (uint64_t)v12);
  uint64_t v14 = *(void *)(a3 + 88);
  if (v14)
  {
    while (1)
    {
      uint64_t v15 = *(void *)(v14 + 72);
      if (!v15) {
        break;
      }
      if (xmlStrEqual(*(const xmlChar **)(v15 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema")) {
        goto LABEL_13;
      }
LABEL_16:
      uint64_t v14 = *(void *)(v14 + 48);
      if (!v14) {
        goto LABEL_17;
      }
    }

    if (xmlStrEqual(*(const xmlChar **)(v14 + 16), (const xmlChar *)"name")
      || xmlStrEqual(*(const xmlChar **)(v14 + 16), (const xmlChar *)"id"))
    {
      goto LABEL_16;
    }

void xmlSchemaPContentErr(uint64_t a1, int a2, uint64_t a3, uint64_t a4, xmlChar *a5, xmlChar *a6)
{
  uint64_t v19 = 0LL;
  xmlSchemaFormatItemForReport((xmlChar **)&v19, 0LL, a3);
  if (a5)
  {
    uint64_t v12 = (const xmlChar *)v19;
    uint64_t v13 = "%s: %s.\n";
    uint64_t v14 = a1;
    uint64_t v15 = a3;
    uint64_t v16 = a4;
    int v17 = a2;
    int v18 = a5;
  }

  else
  {
    uint64_t v12 = (const xmlChar *)v19;
    if (a6)
    {
      uint64_t v13 = "%s: The content is not valid. Expected is %s.\n";
      uint64_t v14 = a1;
      uint64_t v15 = a3;
      uint64_t v16 = a4;
      int v17 = a2;
      int v18 = a6;
    }

    else
    {
      uint64_t v13 = "%s: The content is not valid.\n";
      uint64_t v14 = a1;
      uint64_t v15 = a3;
      uint64_t v16 = a4;
      int v17 = a2;
      int v18 = 0LL;
    }
  }

  xmlSchemaPErr2(v14, v15, v16, v17, v13, v12, v18);
  if (v19) {
    xmlFree((void *)v19);
  }
}

void xmlSchemaPIllegalAttrErr(_DWORD *a1, uint64_t a2)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  xmlSchemaFormatNodeForError((void **)&v8, (uint64_t)a1, *(void *)(a2 + 40));
  int v4 = v8;
  uint64_t v5 = *(void *)(a2 + 72);
  uint64_t v6 = *(xmlChar **)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = xmlSchemaFormatQName((void **)&v7, *(const xmlChar **)(v5 + 16), *(xmlChar **)(a2 + 16));
  }

  else if (!v6)
  {
    uint64_t v6 = xmlStrcat(0LL, (const xmlChar *)"(NULL)");
    uint64_t v7 = v6;
  }

  xmlSchemaErr4Line(a1, 2, 3035, a2, 0, "%sThe attribute '%s' is not allowed.\n", v4, v6, 0LL, 0LL);
  if (v8)
  {
    xmlFree(v8);
    uint64_t v8 = 0LL;
  }

  if (v7) {
    xmlFree(v7);
  }
}

uint64_t xmlSchemaPValAttr(_DWORD *a1, uint64_t a2, xmlChar *str2, xmlSchemaType *a4, xmlChar **a5)
{
  if (!a4)
  {
    if (a5) {
      *a5 = 0LL;
    }
    return 0xFFFFFFFFLL;
  }

  if (a4->type != XML_SCHEMA_TYPE_BASIC)
  {
    if (a5) {
      *a5 = 0LL;
    }
    xmlSchemaPErr( (uint64_t)a1,  a2,  3069,  "Internal error: xmlSchemaPValAttr, the given type '%s' is not a built-in type.\n",  a4->name,  0LL);
    return 0xFFFFFFFFLL;
  }

  uint64_t PropNode = (xmlNode *)xmlSchemaGetPropNode(a2, str2);
  if (PropNode) {
    return xmlSchemaPValAttrNode(a1, PropNode, a4, a5);
  }
  uint64_t result = 0LL;
  if (a5) {
    *a5 = 0LL;
  }
  return result;
}

xmlChar *xmlSchemaBuildAbsoluteURI(xmlDict *a1, xmlChar *a2, xmlNode *cur)
{
  uint64_t v3 = a2;
  if (a2 && cur)
  {
    Base = xmlNodeGetBase(cur->doc, cur);
    if (Base)
    {
      uint64_t v7 = Base;
      uint64_t v3 = xmlBuildURI(v3, Base);
      xmlFree(v7);
      if (v3)
      {
LABEL_5:
        uint64_t v8 = xmlDictLookup(a1, v3, -1);
        xmlFree(v3);
        return (xmlChar *)v8;
      }
    }

    else
    {
      uint64_t v3 = xmlBuildURI(v3, cur->doc->URL);
      if (v3) {
        goto LABEL_5;
      }
    }
  }

  return v3;
}

uint64_t xmlSchemaParseNewDoc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a3)
  {
    if (*(_DWORD *)(a3 + 52))
    {
      uint64_t v5 = "reparsing a schema doc";
LABEL_4:
      xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaParseNewDoc", (const xmlChar *)v5, 0LL);
      return 0xFFFFFFFFLL;
    }

    if (!*(void *)(a3 + 32))
    {
      uint64_t v5 = "parsing a schema doc, but there's no doc";
      goto LABEL_4;
    }

    if (!*(void *)(a1 + 48))
    {
      uint64_t v5 = "no constructor";
      goto LABEL_4;
    }

    uint64_t v8 = xmlSchemaNewParserCtxtUseDict(*(const xmlChar **)(a3 + 8), *(xmlDict **)(a1 + 152));
    if (!v8) {
      return 0xFFFFFFFFLL;
    }
    int v9 = v8;
    v8[6] = *(void *)(a1 + 48);
    v8[8] = a2;
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v10 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(a1 + 8);
    uint64_t v13 = v8;
    do
    {
      v13[2] = v11;
      v13[3] = v10;
      v13[1] = v12;
      uint64_t v14 = (void *)v13[22];
      if (!v14) {
        break;
      }
      v14[2] = v11;
      _OWORD v14[3] = v10;
      v14[1] = v12;
      uint64_t v13 = (void *)v14[20];
    }

    while (v13);
    uint64_t v15 = *(void *)(a1 + 40);
    uint64_t v16 = *(void *)(a1 + 8);
    int v17 = v8;
    do
    {
      v17[5] = v15;
      v17[1] = v16;
      int v18 = (void *)v17[22];
      if (!v18) {
        break;
      }
      v18[3] = 0LL;
      v18[4] = v15;
      v18[1] = v16;
      v18[2] = 0LL;
      int v17 = (void *)v18[20];
    }

    while (v17);
    *((_DWORD *)v8 + 18) = *(_DWORD *)(a1 + 72);
    uint64_t v19 = xmlSchemaParseNewDocWithContext(v8, a2, v3);
    uint64_t v3 = v19;
    if ((_DWORD)v19) {
      *(_DWORD *)(a1 + 32) = v19;
    }
    *(_DWORD *)(a1 + 36) += *((_DWORD *)v9 + 9);
    *(_DWORD *)(a1 + 72) = *((_DWORD *)v9 + 18);
    v9[6] = 0LL;
    xmlSchemaFreeParserCtxt((xmlSchemaParserCtxtPtr)v9);
  }

  return v3;
}

void xmlSchemaPCustomErrExt(uint64_t a1, int a2, _DWORD *a3, uint64_t a4, const xmlChar *a5)
{
  uint64_t ComponentNode = a4;
  uint64_t v13 = 0LL;
  xmlSchemaFormatItemForReport(&v13, (uint64_t)a3, a4);
  uint64_t v10 = xmlStrdup((const xmlChar *)"%s: ");
  uint64_t v11 = xmlStrcat(v10, a5);
  uint64_t v12 = xmlStrcat(v11, (const xmlChar *)".\n");
  if (a3 && !ComponentNode) {
    uint64_t ComponentNode = xmlSchemaGetComponentNode(a3);
  }
  xmlSchemaPErrExt(a1, ComponentNode, a2, (const char *)v12, (char)v13);
  if (v13)
  {
    xmlFree(v13);
    uint64_t v13 = 0LL;
  }

  if (v12) {
    xmlFree(v12);
  }
}

void *xmlSchemaNewParserCtxtUseDict(const xmlChar *a1, xmlDict *a2)
{
  int v4 = xmlSchemaParserCtxtCreate();
  uint64_t v5 = v4;
  if (v4)
  {
    v4[19] = a2;
    xmlDictReference(a2);
    if (a1) {
      v5[10] = xmlDictLookup(a2, a1, -1);
    }
  }

  return v5;
}

uint64_t xmlSchemaParseIncludeOrRedefine(uint64_t a1, uint64_t a2, const xmlNode *a3, unsigned int a4)
{
  uint64_t v30 = 0LL;
  xmlURIPtr URI = 0LL;
  uint64_t properties = (uint64_t)a3->properties;
  if (properties)
  {
    while (1)
    {
      uint64_t v9 = *(void *)(properties + 72);
      if (!v9) {
        break;
      }
      if (xmlStrEqual(*(const xmlChar **)(v9 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema")) {
        goto LABEL_4;
      }
LABEL_7:
      uint64_t properties = *(void *)(properties + 48);
      if (!properties) {
        goto LABEL_8;
      }
    }

    if (xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"id")
      || xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"schemaLocation"))
    {
      goto LABEL_7;
    }

void xmlSchemaPMissingAttrErr(uint64_t a1, uint64_t a2, xmlChar *a3)
{
  uint64_t v6 = 0LL;
  xmlSchemaFormatItemForReport((xmlChar **)&v6, 0LL, a2);
  xmlSchemaPErr(a1, a2, 3036, "%s: The attribute '%s' is required but missing.\n", (const xmlChar *)v6, a3);
  if (v6) {
    xmlFree((void *)v6);
  }
}

void *xmlSchemaAddType(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7 = 0LL;
  if (a1 && a2)
  {
    uint64_t v14 = xmlMalloc(0xE0uLL);
    uint64_t v7 = v14;
    if (v14)
    {
      _OWORD *v14 = 0u;
      v14[1] = 0u;
      v14[12] = 0u;
      v14[13] = 0u;
      v14[10] = 0u;
      v14[11] = 0u;
      v14[8] = 0u;
      v14[9] = 0u;
      v14[6] = 0u;
      v14[7] = 0u;
      v14[4] = 0u;
      v14[5] = 0u;
      v14[2] = 0u;
      _OWORD v14[3] = 0u;
      *(_DWORD *)uint64_t v14 = a3;
      *((void *)v14 + 2) = a4;
      *((void *)v14 + 26) = a5;
      *((void *)v14 + 9) = a6;
      if (a7)
      {
        if (*(_DWORD *)(a1 + 188))
        {
          uint64_t v15 = xmlSchemaAddRedef(a1, *(void *)(a1 + 208), (uint64_t)v14, a4, a5);
          *(void *)(a1 + 216) = v15;
          if (!v15)
          {
            xmlFree(v7);
            return 0LL;
          }

          *(_DWORD *)(a1 + 22xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0;
        }

        int v16 = (void **)(*(void *)(*(void *)(a1 + 48) + 32LL) + 64LL);
        int v17 = 5;
      }

      else
      {
        int v16 = (void **)(*(void *)(*(void *)(a1 + 48) + 32LL) + 72LL);
        int v17 = 10;
      }

      xmlSchemaAddItemSize(v16, v17, (uint64_t)v7);
      xmlSchemaAddItemSize((void **)(*(void *)(a1 + 48) + 40LL), 10, (uint64_t)v7);
    }

    else
    {
      ++*(_DWORD *)(a1 + 36);
      __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"allocating type");
    }
  }

  return v7;
}

uint64_t xmlSchemaPGetBoolNodeValue(uint64_t a1, xmlNode *cur)
{
  Content = xmlNodeGetContent(cur);
  if (!xmlStrEqual(Content, (const xmlChar *)"true"))
  {
    if (!xmlStrEqual(Content, (const xmlChar *)"false"))
    {
      if (xmlStrEqual(Content, (const xmlChar *)"1")) {
        goto LABEL_2;
      }
      if (!xmlStrEqual(Content, (const xmlChar *)"0"))
      {
        xmlSchemaTypePtr BuiltInType = xmlSchemaGetBuiltInType(XML_SCHEMAS_BOOLEAN);
        xmlSchemaPSimpleTypeErr(a1, 1714, (uint64_t)cur, (uint64_t)BuiltInType, 0LL, Content, 0LL, 0);
      }
    }

    uint64_t v5 = 0LL;
    if (!Content) {
      return v5;
    }
    goto LABEL_3;
  }

LABEL_2:
  uint64_t v5 = 1LL;
  if (Content) {
LABEL_3:
  }
    xmlFree(Content);
  return v5;
}

void *xmlSchemaParseModelGroup(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if (!a3) {
    return 0LL;
  }
  uint64_t v10 = xmlSchemaAddModelGroup(a1, a2, a4, a3);
  if (!v10) {
    return 0LL;
  }
  uint64_t v11 = v10;
  if (!a5)
  {
    uint64_t v18 = *(void *)(a3 + 88);
    if (!v18)
    {
LABEL_14:
      unint64_t v64 = 0x100000001LL;
      int v20 = (void *)v11;
LABEL_25:
      uint64_t PropNode = (xmlNode *)xmlSchemaGetPropNode(a3, (xmlChar *)"id");
      if (PropNode) {
        xmlSchemaPValAttrNodeID(a1, PropNode);
      }
      int v67 = 0;
      int v26 = *(xmlNode **)(a3 + 24);
      uint64_t v63 = v11;
      if (!v26) {
        goto LABEL_143;
      }
      if (v26->ns
        && xmlStrEqual(v26->name, (const xmlChar *)"annotation")
        && xmlStrEqual(v26->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
      {
        *(void *)(v11 + 8) = xmlSchemaParseAnnotation((_DWORD *)a1, (uint64_t)v26, 1);
        int v26 = v26->next;
      }

      if (a4 == 8)
      {
        if (v26)
        {
          uint64_t v27 = 0LL;
          int v65 = 0;
          while (v26->ns
               && xmlStrEqual(v26->name, (const xmlChar *)"element")
               && xmlStrEqual(v26->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
          {
            int v28 = (int *)xmlSchemaParseElement(a1, a2, v26, &v67, 0);
            if (v28)
            {
              uint64_t v29 = v28;
              int v30 = v65;
              if (v67) {
                int v30 = v65 + 1;
              }
              int v65 = v30;
              if (v28[8] >= 2)
              {
                xmlSchemaPCustomErrExt( a1,  3091,  0LL,  (uint64_t)v26,  (const xmlChar *)"Invalid value for minOccurs (must be 0 or 1)");
                v29[8] = 1;
              }

              if (v29[9] >= 2)
              {
                xmlSchemaPCustomErrExt( a1,  3091,  0LL,  (uint64_t)v26,  (const xmlChar *)"Invalid value for maxOccurs (must be 0 or 1)");
                v29[9] = 1;
              }

              uint64_t v31 = (int **)(v27 + 4);
              if (!v27) {
                uint64_t v31 = (int **)(v63 + 24);
              }
              *uint64_t v31 = v29;
              uint64_t v27 = v29;
            }

            int v26 = v26->next;
            if (!v26) {
              goto LABEL_147;
            }
          }

          uint64_t v58 = "(annotation?, (annotation?, element*)";
          goto LABEL_146;
        }

LABEL_131:
                  if (v62)
                  {
                    int v56 = xmlSchemaAddParticle(a1, (uint64_t)v26, SHIDWORD(v62), v62);
                    uint64_t v33 = (uint64_t)v56;
                    if (v56)
                    {
                      v56[1] = v60;
                      v56[3] = v61;
                      goto LABEL_123;
                    }

                    goto LABEL_126;
                  }
                }

                uint64_t v33 = 0LL;
                goto LABEL_126;
              }

              if (v26->ns)
              {
                if (xmlStrEqual(v26->name, (const xmlChar *)"choice")
                  && xmlStrEqual(v26->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
                {
                  uint64_t v51 = a1;
                  uint64_t v52 = a2;
                  int v53 = v26;
                  uint64_t v54 = 7LL;
LABEL_121:
                  uint64_t v33 = xmlSchemaParseModelGroup(v51, v52, v53, v54, 1LL);
                  goto LABEL_122;
                }

                if (v26->ns
                  && xmlStrEqual(v26->name, (const xmlChar *)"sequence")
                  && xmlStrEqual(v26->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
                {
                  uint64_t v51 = a1;
                  uint64_t v52 = a2;
                  int v53 = v26;
                  uint64_t v54 = 6LL;
                  goto LABEL_121;
                }
              }
            }
          }
        }

LABEL_122:
        if (v33) {
          goto LABEL_123;
        }
LABEL_126:
        int v26 = v26->next;
        if (!v26)
        {
LABEL_147:
          if (v64)
          {
            if (v65) {
              xmlSchemaAddItemSize((void **)(*(void *)(a1 + 48) + 40LL), 10, v63);
            }
            return v20;
          }

          return 0LL;
        }
      }
    }

    while (1)
    {
      uint64_t v19 = *(void *)(v18 + 72);
      if (!v19) {
        break;
      }
      if (xmlStrEqual(*(const xmlChar **)(v19 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema")) {
        goto LABEL_9;
      }
LABEL_10:
      uint64_t v18 = *(void *)(v18 + 48);
      if (!v18) {
        goto LABEL_14;
      }
    }

    if (xmlStrEqual(*(const xmlChar **)(v18 + 16), (const xmlChar *)"id")) {
      goto LABEL_10;
    }
LABEL_9:
    xmlSchemaPIllegalAttrErr((_DWORD *)a1, v18);
    goto LABEL_10;
  }

  if (a4 == 8)
  {
    int MinOccurs = xmlGetMinOccurs(a1, a3, 1, "(0 | 1)");
    uint64_t v13 = "1";
    uint64_t v14 = a1;
    uint64_t v15 = a3;
    int v16 = 1;
    int v17 = 1;
  }

  else
  {
    int MinOccurs = xmlGetMinOccurs(a1, a3, -1, "xs:nonNegativeInteger");
    uint64_t v13 = "(xs:nonNegativeInteger | unbounded)";
    uint64_t v14 = a1;
    uint64_t v15 = a3;
    int v16 = 0;
    int v17 = 0x40000000;
  }

  int v21 = xmlGetMaxOccurs(v14, v15, v16, v17, v13);
  xmlSchemaPCheckParticleCorrect_2(a1, a3, MinOccurs, v21);
  int v22 = xmlSchemaAddParticle(a1, a3, MinOccurs, v21);
  int v20 = v22;
  if (v22)
  {
    unint64_t v64 = __PAIR64__(MinOccurs, v21);
    _OWORD v22[3] = v11;
    uint64_t v23 = *(void *)(a3 + 88);
    if (v23)
    {
      while (1)
      {
        uint64_t v24 = *(void *)(v23 + 72);
        if (!v24) {
          break;
        }
        if (xmlStrEqual(*(const xmlChar **)(v24 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema")) {
          goto LABEL_20;
        }
LABEL_24:
        uint64_t v23 = *(void *)(v23 + 48);
        if (!v23) {
          goto LABEL_25;
        }
      }

      if (xmlStrEqual(*(const xmlChar **)(v23 + 16), (const xmlChar *)"id")
        || xmlStrEqual(*(const xmlChar **)(v23 + 16), (const xmlChar *)"maxOccurs")
        || xmlStrEqual(*(const xmlChar **)(v23 + 16), (const xmlChar *)"minOccurs"))
      {
        goto LABEL_24;
      }

    uint64_t v45 = *((void *)v1 + 24);
    uint64_t v46 = *(void *)(v45 + 80);
    if (*(_DWORD *)v46 != 14)
    {
      *(void *)(v45 + 8xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = 0LL;
      goto LABEL_199;
    }

void *xmlSchemaParseModelGroupDefRef(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  str2 = 0LL;
  uint64_t v19 = 0LL;
  if (!a3) {
    return 0LL;
  }
  uint64_t PropNode = (xmlNode *)xmlSchemaGetPropNode(a3, (xmlChar *)"ref");
  if (!PropNode)
  {
    xmlSchemaPMissingAttrErr((uint64_t)a1, a3, (xmlChar *)"ref");
    return 0LL;
  }

  uint64_t v7 = (uint64_t)PropNode;
  int NodeContent = (xmlChar *)xmlSchemaGetNodeContent((uint64_t)a1, PropNode);
  uint64_t v9 = str2;
  xmlSchemaCheckReference((uint64_t)a1, a3, v7, str2);
  int MinOccurs = xmlGetMinOccurs((uint64_t)a1, a3, -1, "xs:nonNegativeInteger");
  int MaxOccurs = xmlGetMaxOccurs((uint64_t)a1, a3, 0, 0x40000000, "(xs:nonNegativeInteger | unbounded)");
  uint64_t v12 = *(void *)(a3 + 88);
  if (v12)
  {
    while (1)
    {
      uint64_t v13 = *(void *)(v12 + 72);
      if (!v13) {
        break;
      }
      if (xmlStrEqual(*(const xmlChar **)(v13 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema")) {
        goto LABEL_7;
      }
LABEL_12:
      uint64_t v12 = *(void *)(v12 + 48);
      if (!v12) {
        goto LABEL_13;
      }
    }

    if (xmlStrEqual(*(const xmlChar **)(v12 + 16), (const xmlChar *)"ref")
      || xmlStrEqual(*(const xmlChar **)(v12 + 16), (const xmlChar *)"id")
      || xmlStrEqual(*(const xmlChar **)(v12 + 16), (const xmlChar *)"minOccurs")
      || xmlStrEqual(*(const xmlChar **)(v12 + 16), (const xmlChar *)"maxOccurs"))
    {
      goto LABEL_12;
    }

uint64_t xmlSchemaParseLocalAttributes(uint64_t a1, uint64_t a2, uint64_t *a3, void *****a4, int a5, _DWORD *a6)
{
  uint64_t v6 = *a3;
  if (!*a3) {
    return 0LL;
  }
  uint64_t v9 = (const xmlChar *)"attributeGroup";
  uint64_t v10 = (xmlChar *)"name";
  while (1)
  {
    if (*(void *)(v6 + 72))
    {
      int v11 = xmlStrEqual(*(const xmlChar **)(v6 + 16), (const xmlChar *)"attribute");
      uint64_t v6 = *a3;
      if (v11)
      {
        if (xmlStrEqual( *(const xmlChar **)(*(void *)(v6 + 72) + 16LL),  (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        {
          goto LABEL_11;
        }

        uint64_t v6 = *a3;
      }

      if (!v6) {
        return 0LL;
      }
    }

    if (!*(void *)(v6 + 72)) {
      return 0LL;
    }
    uint64_t result = xmlStrEqual(*(const xmlChar **)(v6 + 16), v9);
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t result = xmlStrEqual( *(const xmlChar **)(*(void *)(*a3 + 72) + 16LL),  (const xmlChar *)"http://www.w3.org/2001/XMLSchema");
    if (!(_DWORD)result) {
      return result;
    }
LABEL_11:
    uint64_t v13 = *a3;
    if (!*a3) {
      goto LABEL_158;
    }
    if (!*(void *)(v13 + 72))
    {
      int v88 = 0LL;
      str2 = 0LL;
      goto LABEL_63;
    }

    int v14 = xmlStrEqual(*(const xmlChar **)(v13 + 16), (const xmlChar *)"attribute");
    uint64_t v13 = *a3;
    if (!v14
      || (int v15 = xmlStrEqual( *(const xmlChar **)(*(void *)(v13 + 72) + 16LL),  (const xmlChar *)"http://www.w3.org/2001/XMLSchema"),  v13 = *a3,  !v15))
    {
      int v88 = 0LL;
      str2 = 0LL;
      if (!v13) {
        goto LABEL_158;
      }
LABEL_63:
      int v30 = v10;
      uint64_t PropNode = (xmlNode *)xmlSchemaGetPropNode(v13, (xmlChar *)"ref");
      if (!PropNode)
      {
        xmlSchemaPMissingAttrErr(a1, v13, (xmlChar *)"ref");
        goto LABEL_158;
      }

      uint64_t v32 = (uint64_t)PropNode;
      int NodeContent = (xmlChar *)xmlSchemaGetNodeContent(a1, PropNode);
      xmlSchemaPValAttrNodeQNameValue(a1, a2, v32, NodeContent, (const xmlChar **)&v88, (const xmlChar **)&str2);
      int v34 = v88;
      int v35 = xmlSchemaCheckReference(a1, v13, v32, v88);
      uint64_t v10 = v30;
      if (v35) {
        goto LABEL_158;
      }
      BOOL v36 = v9;
      uint64_t v37 = *(void *)(v13 + 88);
      if (!v37)
      {
LABEL_72:
        int v39 = (xmlNode *)xmlSchemaGetPropNode(v13, (xmlChar *)"id");
        if (v39) {
          xmlSchemaPValAttrNodeID(a1, v39);
        }
        uint64_t v40 = *(void *)(v13 + 24);
        if (v40)
        {
          if (!*(void *)(v40 + 72)
            || !xmlStrEqual(*(const xmlChar **)(v40 + 16), (const xmlChar *)"annotation")
            || !xmlStrEqual( *(const xmlChar **)(*(void *)(v40 + 72) + 16LL),  (const xmlChar *)"http://www.w3.org/2001/XMLSchema")
            || (xmlSchemaParseAnnotation((_DWORD *)a1, v40, 0), (uint64_t v40 = *(void *)(v40 + 48)) != 0))
          {
            xmlSchemaPContentErr(a1, 3033, v13, v40, 0LL, (xmlChar *)"(annotation?)");
          }
        }

        if (*(_DWORD *)(a1 + 188)
          && (uint64_t v41 = *(void *)(a1 + 216)) != 0
          && **(_DWORD **)(v41 + 8) == 16
          && (int v42 = str2, str2 == *(xmlChar **)(v41 + 32))
          && v34 == *(const xmlChar **)(v41 + 40))
        {
          uint64_t v9 = v36;
          if (*(_DWORD *)(a1 + 224))
          {
            uint64_t v86 = 0LL;
            int v57 = xmlSchemaFormatQName(&v86, v34, str2);
            xmlSchemaCustomErr4( (_DWORD *)a1,  3081,  v13,  0LL,  (const xmlChar *)"The redefining attribute group definition '%s' must not contain more than one reference t o the redefined definition",  v57,  0LL,  0LL,  0LL);
            uint64_t v10 = v30;
            if (v86) {
              xmlFree(v86);
            }
            goto LABEL_158;
          }

          *(_DWORD *)(a1 + 22xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 1;
          uint64_t v58 = xmlSchemaNewQNameRef(a1, 16, (uint64_t)v42, (uint64_t)v34);
          uint64_t v10 = v30;
          if (!v58) {
            goto LABEL_158;
          }
          uint64_t v44 = (uint64_t)v58;
          v58[5] = v13;
          *(void *)(*(void *)(a1 + 216) + 16LL) = v58;
        }

        else
        {
          BOOL v43 = xmlSchemaNewQNameRef(a1, 16, (uint64_t)str2, (uint64_t)v34);
          uint64_t v9 = v36;
          uint64_t v10 = v30;
          if (!v43) {
            goto LABEL_158;
          }
          uint64_t v44 = (uint64_t)v43;
          v43[5] = v13;
          xmlSchemaAddItemSize((void **)(*(void *)(a1 + 48) + 40LL), 10, (uint64_t)v43);
        }

        if (a6) {
          *a6 = 1;
        }
        goto LABEL_89;
      }

      while (1)
      {
        uint64_t v38 = *(void *)(v37 + 72);
        if (!v38) {
          break;
        }
        if (xmlStrEqual(*(const xmlChar **)(v38 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema")) {
          goto LABEL_68;
        }
LABEL_71:
        uint64_t v37 = *(void *)(v37 + 48);
        if (!v37) {
          goto LABEL_72;
        }
      }

      if (xmlStrEqual(*(const xmlChar **)(v37 + 16), (const xmlChar *)"ref")
        || xmlStrEqual(*(const xmlChar **)(v37 + 16), (const xmlChar *)"id"))
      {
        goto LABEL_71;
      }

LABEL_89:
  uint64_t v45 = *a4;
  if (!*a4)
  {
    uint64_t v45 = (void ****)xmlSchemaItemListCreate();
    *a4 = v45;
    if (!v45) {
      return 0xFFFFFFFFLL;
    }
  }

  uint64_t result = xmlSchemaItemListAddSize((uint64_t)v45, 2, v44);
  if ((_DWORD)result != -1) {
    goto LABEL_158;
  }
  return result;
}

_OWORD *xmlSchemaParseAnyAttribute(_DWORD *a1, uint64_t a2, xmlNode *a3)
{
  if (!a3) {
    return 0LL;
  }
  uint64_t v5 = xmlSchemaAddWildcard((uint64_t)a1, a2, 21, (uint64_t)a3);
  if (v5)
  {
    uint64_t properties = (uint64_t)a3->properties;
    if (properties)
    {
      while (1)
      {
        uint64_t v7 = *(void *)(properties + 72);
        if (!v7) {
          break;
        }
        if (xmlStrEqual(*(const xmlChar **)(v7 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema")) {
          goto LABEL_6;
        }
LABEL_10:
        uint64_t properties = *(void *)(properties + 48);
        if (!properties) {
          goto LABEL_11;
        }
      }

      if (xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"id")
        || xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"namespace")
        || xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"processContents"))
      {
        goto LABEL_10;
      }

void *xmlSchemaAddRedef(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = xmlMalloc(0x38uLL);
  int v11 = v10;
  if (v10)
  {
    v10[6] = 0LL;
    *((_OWORD *)v10 + 1) = 0u;
    *((_OWORD *)v10 + 2) = 0u;
    *(_OWORD *)uint64_t v10 = 0u;
    v10[1] = a3;
    v10[5] = a5;
    v10[6] = a2;
    v10[4] = a4;
    uint64_t v12 = *(void *)(a1 + 48);
    uint64_t v13 = (void *)(v12 + 56);
    if (*(void *)(v12 + 56)) {
      uint64_t v13 = *(void **)(v12 + 64);
    }
    void *v13 = v10;
    *(void *)(v12 + 6xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v10;
  }

  else
  {
    if (a1) {
      ++*(_DWORD *)(a1 + 36);
    }
    __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"allocating redefinition info");
  }

  return v11;
}

void *xmlSchemaAddItemSize(void **a1, int a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (result) {
    return (void *)xmlSchemaItemListAddSize((uint64_t)result, a2, a3);
  }
  uint64_t result = xmlSchemaItemListCreate();
  *a1 = result;
  if (result) {
    return (void *)xmlSchemaItemListAddSize((uint64_t)result, a2, a3);
  }
  return result;
}

uint64_t xmlSchemaItemListAddSize(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = *(void **)a1;
  if (v5)
  {
    uint64_t v6 = *(int *)(a1 + 12);
    if ((int)v6 <= *(_DWORD *)(a1 + 8))
    {
      *(_DWORD *)(a1 + 12) = 2 * v6;
      uint64_t v5 = xmlRealloc(v5, 16 * v6);
      *(void *)a1 = v5;
      if (!v5)
      {
        __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"growing item list");
        *(_DWORD *)(a1 + 12) = 0;
        return 0xFFFFFFFFLL;
      }
    }
  }

  else
  {
    if (a2 <= 1) {
      unsigned int v7 = 1;
    }
    else {
      unsigned int v7 = a2;
    }
    uint64_t v5 = xmlMalloc(8LL * v7);
    *(void *)a1 = v5;
    if (!v5)
    {
      __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"allocating new item list");
      return 0xFFFFFFFFLL;
    }

    *(_DWORD *)(a1 + 12) = v7;
  }

  uint64_t v8 = 0LL;
  uint64_t v9 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v9 + 1;
  *((void *)v5 + v9) = a3;
  return v8;
}

void xmlSchemaAddAnnotation(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    switch(*(_DWORD *)a1)
    {
      case 2:
      case 0x12:
      case 0x15:
        uint64_t v2 = *(void **)(a1 + 16);
        if (v2) {
          goto LABEL_15;
        }
        *(void *)(a1 + 16) = a2;
        return;
      case 3:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0x13:
      case 0x14:
        goto LABEL_13;
      case 4:
      case 5:
      case 0xE:
      case 0x10:
        uint64_t v2 = *(void **)(a1 + 48);
        if (v2) {
          goto LABEL_15;
        }
        *(void *)(a1 + 48) = a2;
        break;
      case 6:
      case 7:
      case 8:
      case 0x11:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
        uint64_t v2 = *(void **)(a1 + 8);
        if (v2) {
          goto LABEL_15;
        }
        *(void *)(a1 + 8) = a2;
        break;
      case 0xF:
        uint64_t v2 = *(void **)(a1 + 64);
        if (v2) {
          goto LABEL_15;
        }
        *(void *)(a1 + 6xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = a2;
        break;
      default:
        if ((*(_DWORD *)a1 - 1000) >= 0xC)
        {
LABEL_13:
          xmlSchemaPCustomErrExt( 0LL,  3069,  0LL,  0LL,  (const xmlChar *)"Internal error: xmlSchemaAddAnnotation, The item is not a annotated schema component");
        }

        else
        {
          uint64_t v2 = *(void **)(a1 + 32);
          if (v2)
          {
LABEL_15:
            if (*v2) {
              uint64_t v2 = (void *)*v2;
            }
            *uint64_t v2 = a2;
          }

          else
          {
            *(void *)(a1 + 32) = a2;
          }
        }

        break;
    }
  }

void xmlSchemaParseRestriction(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v73 = 0LL;
  uint64_t v8 = *(void *)(a1 + 160);
  *(_DWORD *)(v8 + 88) |= 4u;
  uint64_t v9 = *(void *)(a3 + 88);
  if (v9)
  {
    while (1)
    {
      uint64_t v10 = *(void *)(v9 + 72);
      if (!v10) {
        break;
      }
      if (xmlStrEqual(*(const xmlChar **)(v10 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema")) {
        goto LABEL_4;
      }
LABEL_7:
      uint64_t v9 = *(void *)(v9 + 48);
      if (!v9) {
        goto LABEL_8;
      }
    }

    if (xmlStrEqual(*(const xmlChar **)(v9 + 16), (const xmlChar *)"id")
      || xmlStrEqual(*(const xmlChar **)(v9 + 16), (const xmlChar *)"base"))
    {
      goto LABEL_7;
    }

LABEL_109:
    int v48 = (xmlSchemaFacet *)xmlMalloc(0x48uLL);
    if (!v48)
    {
      if (a1) {
        ++*(_DWORD *)(a1 + 36);
      }
      __xmlSimpleError(16, 2, (int)v13, 0LL, (uint64_t)"allocating facet");
      goto LABEL_180;
    }

    int v49 = v48;
    v48->regexp = 0LL;
    *(_OWORD *)&v48->xmlSchemaAnnotPtr annot = 0u;
    *(_OWORD *)&v48->fixed = 0u;
    *(_OWORD *)&v48->int type = 0u;
    *(_OWORD *)&v48->value = 0u;
    v48->xmlNodePtr node = v13;
    Prop = xmlSchemaGetProp(a1, v13, (xmlChar *)"value");
    if (Prop)
    {
      if (v13->ns)
      {
        uint64_t v51 = Prop;
        if (xmlStrEqual(v13->name, (const xmlChar *)"minInclusive")
          && xmlStrEqual(v13->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        {
          int v52 = 1000;
LABEL_163:
          v49->int type = v52;
          uint64_t v58 = (xmlNode *)xmlSchemaGetPropNode((uint64_t)v13, (xmlChar *)"id");
          if (v58) {
            xmlSchemaPValAttrNodeID(a1, v58);
          }
          v49->value = v51;
          if ((v49->type & 0xFFFFFFFE) != 0x3EE)
          {
            uint64_t v59 = xmlSchemaGetProp(a1, v13, (xmlChar *)"fixed");
            if (v59)
            {
              if (xmlStrEqual(v59, (const xmlChar *)"true")) {
                v49->fixed = 1;
              }
            }
          }

          childreuint64_t n = (uint64_t)v13->children;
          if (children)
          {
            if (!*(void *)(children + 72)
              || !xmlStrEqual(*(const xmlChar **)(children + 16), (const xmlChar *)"annotation")
              || !xmlStrEqual( *(const xmlChar **)(*(void *)(children + 72) + 16LL),  (const xmlChar *)"http://www.w3.org/2001/XMLSchema")
              || (v49->xmlSchemaAnnotPtr annot = (xmlSchemaAnnotPtr)xmlSchemaParseAnnotation((_DWORD *)a1, children, 1),
                  (childreuint64_t n = *(void *)(children + 48)) != 0))
            {
              xmlSchemaPErr(a1, children, 1740, "Facet %s has unexpected child content\n", v13->name, 0LL);
            }
          }

          p_xmlNodePtr next = &v25->next;
          if (!v25) {
            p_xmlNodePtr next = (xmlSchemaFacet **)(v8 + 120);
          }
          *p_xmlNodePtr next = v49;
          v49->xmlNodePtr next = 0LL;
          uint64_t v25 = v49;
          goto LABEL_180;
        }

        if (v13->ns)
        {
          if (xmlStrEqual(v13->name, (const xmlChar *)"minExclusive")
            && xmlStrEqual(v13->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
          {
            int v52 = 1001;
            goto LABEL_163;
          }

          if (v13->ns)
          {
            if (xmlStrEqual(v13->name, (const xmlChar *)"maxInclusive")
              && xmlStrEqual(v13->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
            {
              int v52 = 1002;
              goto LABEL_163;
            }

            if (v13->ns)
            {
              if (xmlStrEqual(v13->name, (const xmlChar *)"maxExclusive")
                && xmlStrEqual(v13->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
              {
                int v52 = 1003;
                goto LABEL_163;
              }

              if (v13->ns)
              {
                if (xmlStrEqual(v13->name, (const xmlChar *)"totalDigits")
                  && xmlStrEqual(v13->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
                {
                  int v52 = 1004;
                  goto LABEL_163;
                }

                if (v13->ns)
                {
                  if (xmlStrEqual(v13->name, (const xmlChar *)"fractionDigits")
                    && xmlStrEqual(v13->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
                  {
                    int v52 = 1005;
                    goto LABEL_163;
                  }

                  if (v13->ns)
                  {
                    if (xmlStrEqual(v13->name, (const xmlChar *)"pattern")
                      && xmlStrEqual(v13->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
                    {
                      int v52 = 1006;
                      goto LABEL_163;
                    }

                    if (v13->ns)
                    {
                      if (xmlStrEqual(v13->name, (const xmlChar *)"enumeration")
                        && xmlStrEqual(v13->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
                      {
                        int v52 = 1007;
                        goto LABEL_163;
                      }

                      if (v13->ns)
                      {
                        if (xmlStrEqual(v13->name, (const xmlChar *)"whiteSpace")
                          && xmlStrEqual(v13->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
                        {
                          int v52 = 1008;
                          goto LABEL_163;
                        }

                        if (v13->ns)
                        {
                          if (xmlStrEqual(v13->name, (const xmlChar *)"length")
                            && xmlStrEqual(v13->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
                          {
                            int v52 = 1009;
                            goto LABEL_163;
                          }

                          if (v13->ns)
                          {
                            if (xmlStrEqual(v13->name, (const xmlChar *)"maxLength")
                              && xmlStrEqual(v13->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
                            {
                              int v52 = 1010;
                              goto LABEL_163;
                            }

                            if (v13->ns
                              && xmlStrEqual(v13->name, (const xmlChar *)"minLength")
                              && xmlStrEqual(v13->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
                            {
                              int v52 = 1011;
                              goto LABEL_163;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      name = v13->name;
      uint64_t v54 = a1;
      uint64_t v55 = (uint64_t)v13;
      int v56 = 1741;
      int v57 = "Unknown facet type %s\n";
    }

    else
    {
      name = v13->name;
      uint64_t v54 = a1;
      uint64_t v55 = (uint64_t)v13;
      int v56 = 1708;
      int v57 = "Facet %s has no value\n";
    }

    xmlSchemaPErr(v54, v55, v56, v57, name, 0LL);
    xmlSchemaFreeFacet(v49);
LABEL_180:
    uint64_t v13 = v13->next;
    if (!v13) {
      break;
    }
  }

  a4 = v70;
LABEL_182:
  uint64_t v73 = v13;
  uint64_t v62 = *(void *)(v8 + 120);
  if (!v62)
  {
LABEL_200:
    if (*(_DWORD *)v8 == 5)
    {
      uint64_t v13 = v73;
      if (!v73) {
        return;
      }
      if (!v73->ns
        || !xmlStrEqual(v73->name, (const xmlChar *)"anyAttribute")
        || !xmlStrEqual(v13->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
      {
        goto LABEL_208;
      }

      *(void *)(v8 + 152) = xmlSchemaParseAnyAttribute((_DWORD *)a1, a2, v13);
      uint64_t v13 = v13->next;
    }

    if (!v13) {
      return;
    }
LABEL_208:
    if (a4 == 9)
    {
      uint64_t v69 = "(annotation?, (simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fract"
            "ionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*)?, ((attribute | attribute"
            "Group)*, anyAttribute?))";
    }

    else if (a4 == 10)
    {
      uint64_t v69 = "annotation?, (group | all | choice | sequence)?, ((attribute | attributeGroup)*, anyAttribute?))";
    }

    else
    {
      uint64_t v69 = "(annotation?, (simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fract"
            "ionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*))";
    }

    xmlSchemaPContentErr(a1, 3033, a3, (uint64_t)v13, 0LL, (xmlChar *)v69);
    return;
  }

  uint64_t v63 = 0LL;
  while (1)
  {
    uint64_t v64 = xmlMalloc(0x10uLL);
    if (!v64) {
      break;
    }
    void *v64 = 0LL;
    v64[1] = v62;
    if (v63) {
      int v65 = v63;
    }
    else {
      int v65 = (void *)(v8 + 176);
    }
    void *v65 = v64;
    uint64_t v62 = *(void *)(v62 + 8);
    uint64_t v63 = v64;
    if (!v62) {
      goto LABEL_200;
    }
  }

  if (a1) {
    ++*(_DWORD *)(a1 + 36);
  }
  __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"allocating a facet link");
  xmlFree(0LL);
}

void xmlSchemaParseExtension(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = *(void *)(a1 + 160);
  *(_DWORD *)(v8 + 88) |= 2u;
  uint64_t v9 = *(void *)(a3 + 88);
  if (v9)
  {
    while (1)
    {
      uint64_t v10 = *(void *)(v9 + 72);
      if (!v10) {
        break;
      }
      if (xmlStrEqual(*(const xmlChar **)(v10 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema")) {
        goto LABEL_4;
      }
LABEL_7:
      uint64_t v9 = *(void *)(v9 + 48);
      if (!v9) {
        goto LABEL_8;
      }
    }

    if (xmlStrEqual(*(const xmlChar **)(v9 + 16), (const xmlChar *)"id")
      || xmlStrEqual(*(const xmlChar **)(v9 + 16), (const xmlChar *)"base"))
    {
      goto LABEL_7;
    }

xmlNode *xmlSchemaPValAttrQName( uint64_t a1, uint64_t a2, uint64_t a3, xmlChar *str2, const xmlChar **a5, const xmlChar **a6)
{
  uint64_t result = (xmlNode *)xmlSchemaGetPropNode(a3, str2);
  if (result)
  {
    uint64_t v11 = (uint64_t)result;
    int NodeContent = (xmlChar *)xmlSchemaGetNodeContent(a1, result);
    return (xmlNode *)xmlSchemaPValAttrNodeQNameValue(a1, a2, v11, NodeContent, a5, a6);
  }

  else
  {
    *a6 = 0LL;
    *a5 = 0LL;
  }

  return result;
}

uint64_t xmlSchemaPValAttrNodeQNameValue( uint64_t a1, uint64_t a2, uint64_t a3, xmlChar *value, const xmlChar **a5, const xmlChar **a6)
{
  *a5 = 0LL;
  *a6 = 0LL;
  int v12 = xmlValidateQName(value, 1);
  if (v12 < 1)
  {
    if (v12 < 0) {
      return 0xFFFFFFFFLL;
    }
    leuint64_t n = 0;
    if (strchr((const char *)value, 58))
    {
      BOOL v15 = xmlSplitQName3(value, &len);
      *a6 = v15;
      *a6 = xmlDictLookup(*(xmlDictPtr *)(a1 + 152), v15, -1);
      int v16 = xmlDictLookup(*(xmlDictPtr *)(a1 + 152), value, len);
      xmlNsPtr v17 = xmlSearchNs(*(xmlDocPtr *)(a3 + 64), *(xmlNodePtr *)(a3 + 40), v16);
      if (v17)
      {
        uint64_t v18 = xmlDictLookup(*(xmlDictPtr *)(a1 + 152), v17->href, -1);
        uint64_t result = 0LL;
        *a5 = v18;
        return result;
      }

      xmlSchemaTypePtr BuiltInType = xmlSchemaGetBuiltInType(XML_SCHEMAS_QNAME);
      xmlSchemaPSimpleTypeErr( a1,  3037,  a3,  (uint64_t)BuiltInType,  0LL,  value,  (const xmlChar *)"The value '%s' of simple type 'xs:QName' has no corresponding namespace declaration in scope",  (char)value);
      return *(unsigned int *)(a1 + 32);
    }

    xmlNsPtr v19 = xmlSearchNs(*(xmlDocPtr *)(a3 + 64), *(xmlNodePtr *)(a3 + 40), 0LL);
    if (v19 && (href = v19->href) != 0LL && *href)
    {
      int v21 = xmlDictLookup(*(xmlDictPtr *)(a1 + 152), href, -1);
    }

    else
    {
      if ((*(_BYTE *)(a2 + 49) & 2) == 0)
      {
LABEL_17:
        int v22 = xmlDictLookup(*(xmlDictPtr *)(a1 + 152), value, -1);
        uint64_t result = 0LL;
        *a6 = v22;
        return result;
      }

      int v21 = *(const xmlChar **)(a1 + 200);
    }

    *a5 = v21;
    goto LABEL_17;
  }

  xmlSchemaTypePtr v13 = xmlSchemaGetBuiltInType(XML_SCHEMAS_QNAME);
  xmlSchemaPSimpleTypeErr(a1, 3037, a3, (uint64_t)v13, 0LL, value, 0LL, 0);
  *a6 = value;
  return *(unsigned int *)(a1 + 32);
}

_DWORD *xmlSchemaPErr2( uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5, const xmlChar *a6, xmlChar *a7)
{
  if (a3) {
    a2 = a3;
  }
  return xmlSchemaPErr(a1, a2, a4, a5, a6, a7);
}

xmlChar *xmlGetBooleanProp(uint64_t a1, xmlNode *a2, xmlChar *a3)
{
  uint64_t result = xmlSchemaGetProp(a1, a2, a3);
  if (result)
  {
    unsigned int v7 = result;
    if (xmlStrEqual(result, (const xmlChar *)"true")) {
      return (xmlChar *)1;
    }
    if (!xmlStrEqual(v7, (const xmlChar *)"false"))
    {
      if (xmlStrEqual(v7, (const xmlChar *)"1")) {
        return (xmlChar *)1;
      }
      if (!xmlStrEqual(v7, (const xmlChar *)"0"))
      {
        uint64_t PropNode = xmlSchemaGetPropNode((uint64_t)a2, a3);
        xmlSchemaTypePtr BuiltInType = xmlSchemaGetBuiltInType(XML_SCHEMAS_BOOLEAN);
        xmlSchemaPSimpleTypeErr(a1, 1714, PropNode, (uint64_t)BuiltInType, 0LL, v7, 0LL, 0);
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t xmlSchemaAddModelGroup(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4 = 0LL;
  if (a1 && a2)
  {
    uint64_t v8 = xmlMalloc(0x28uLL);
    uint64_t v4 = (uint64_t)v8;
    if (v8)
    {
      v8[4] = 0LL;
      *(_OWORD *)uint64_t v8 = 0u;
      *((_OWORD *)v8 + 1) = 0u;
      *(_DWORD *)uint64_t v8 = a3;
      v8[4] = a4;
      xmlSchemaAddItemSize((void **)(*(void *)(*(void *)(a1 + 48) + 32LL) + 72LL), 10, (uint64_t)v8);
      if ((a3 & 0xFFFFFFFE) == 6) {
        xmlSchemaAddItemSize((void **)(*(void *)(a1 + 48) + 40LL), 10, v4);
      }
    }

    else
    {
      ++*(_DWORD *)(a1 + 36);
      __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"allocating model group component");
    }
  }

  return v4;
}

uint64_t xmlGetMinOccurs(uint64_t a1, uint64_t a2, int a3, const char *a4)
{
  uint64_t PropNode = (xmlNode *)xmlSchemaGetPropNode(a2, (xmlChar *)"minOccurs");
  if (PropNode)
  {
    uint64_t v8 = (uint64_t)PropNode;
    int NodeContent = xmlSchemaGetNodeContent(a1, PropNode);
    for (uint64_t i = NodeContent; ; ++i)
    {
      unsigned int v11 = *i;
      if (v11 > 0x20) {
        break;
      }
      if (((1LL << v11) & 0x100002600LL) == 0)
      {
        if (!*i) {
          goto LABEL_25;
        }
        break;
      }
    }

    if (v11 - 48 > 9)
    {
      uint64_t result = 0LL;
    }

    else
    {
      LODWORD(result) = 0;
      do
      {
        int v13 = -2147483601 - v11;
        unsigned int v14 = v11 + 10 * result - 48;
        else {
          uint64_t result = 0x7FFFFFFFLL;
        }
        unsigned int v15 = *++i;
        unsigned int v11 = v15;
      }

      while (v15 - 48 < 0xA);
    }

    int v16 = (unsigned __int8 *)(i + 1);
    while (v11 <= 0x20)
    {
      if (((1LL << v11) & 0x100002600LL) == 0)
      {
        break;
      }

      unsigned int v17 = *v16++;
      unsigned int v11 = v17;
    }

uint64_t xmlGetMaxOccurs(uint64_t a1, uint64_t a2, int a3, int a4, const char *a5)
{
  uint64_t PropNode = (xmlNode *)xmlSchemaGetPropNode(a2, (xmlChar *)"maxOccurs");
  if (PropNode)
  {
    uint64_t v10 = (uint64_t)PropNode;
    int NodeContent = xmlSchemaGetNodeContent(a1, PropNode);
    if (xmlStrEqual(NodeContent, (const xmlChar *)"unbounded"))
    {
      uint64_t result = 0x40000000LL;
      if (a4 == 0x40000000) {
        return result;
      }
    }

    else
    {
      for (uint64_t i = NodeContent; ; ++i)
      {
        unsigned int v14 = *i;
        if (v14 > 0x20) {
          break;
        }
        if (((1LL << v14) & 0x100002600LL) == 0)
        {
          if (!*i) {
            goto LABEL_10;
          }
          break;
        }
      }

      if (v14 - 48 > 9)
      {
        uint64_t result = 0LL;
      }

      else
      {
        LODWORD(result) = 0;
        do
        {
          int v15 = -2147483601 - v14;
          unsigned int v16 = v14 + 10 * result - 48;
          else {
            uint64_t result = 0x7FFFFFFFLL;
          }
          unsigned int v17 = *++i;
          unsigned int v14 = v17;
        }

        while (v17 - 48 < 0xA);
      }

      uint64_t v18 = (unsigned __int8 *)(i + 1);
      while (v14 <= 0x20)
      {
        if (((1LL << v14) & 0x100002600LL) == 0)
        {
          break;
        }

        unsigned int v19 = *v18++;
        unsigned int v14 = v19;
      }
    }

void xmlSchemaPCheckParticleCorrect_2(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (a4 != 0x40000000 && (a4 | a3) != 0)
  {
    if (a4 <= 0)
    {
      uint64_t PropNode = xmlSchemaGetPropNode(a2, (xmlChar *)"maxOccurs");
      uint64_t v7 = a1;
      int v8 = 3044;
      goto LABEL_10;
    }

    if (a3 > a4)
    {
      uint64_t PropNode = xmlSchemaGetPropNode(a2, (xmlChar *)"minOccurs");
      uint64_t v7 = a1;
      int v8 = 3043;
LABEL_10:
      xmlSchemaPCustomAttrErr(v7, v8, PropNode);
    }
  }

void *xmlSchemaAddParticle(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (!a1) {
    return 0LL;
  }
  int v8 = xmlMalloc(0x30uLL);
  uint64_t v9 = v8;
  if (v8)
  {
    *(_DWORD *)int v8 = 25;
    v8[5] = a2;
    *((_DWORD *)v8 + 8) = a3;
    *((_DWORD *)v8 + 9) = a4;
    v8[2] = 0LL;
    v8[3] = 0LL;
    v8[1] = 0LL;
    xmlSchemaAddItemSize((void **)(*(void *)(*(void *)(a1 + 48) + 32LL) + 72LL), 10, (uint64_t)v8);
  }

  else
  {
    ++*(_DWORD *)(a1 + 36);
    __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"allocating particle component");
  }

  return v9;
}

void xmlSchemaPCustomAttrErr(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = 0LL;
  xmlSchemaFormatItemForReport(&v6, 0LL, *(void *)(a3 + 40));
  xmlSchemaPErrExt(a1, a3, a2, "%s, attribute '%s': %s.\n", (char)v6);
  if (v6) {
    xmlFree(v6);
  }
}

_OWORD *xmlSchemaAddWildcard(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4 = 0LL;
  if (a1 && a2)
  {
    int v8 = xmlMalloc(0x48uLL);
    uint64_t v4 = v8;
    if (v8)
    {
      *int v8 = 0u;
      v8[1] = 0u;
      *((void *)v8 + 8) = 0LL;
      v8[2] = 0u;
      v8[3] = 0u;
      *(_DWORD *)int v8 = a3;
      *((void *)v8 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = a4;
      xmlSchemaAddItemSize((void **)(*(void *)(*(void *)(a1 + 48) + 32LL) + 72LL), 10, (uint64_t)v8);
    }

    else
    {
      ++*(_DWORD *)(a1 + 36);
      __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"adding wildcard");
    }
  }

  return v4;
}

uint64_t xmlSchemaParseWildcardNs(uint64_t a1, uint64_t a2, xmlNode *node)
{
  Prop = xmlSchemaGetProp(a1, node, (xmlChar *)"processContents");
  if (Prop && (uint64_t v7 = Prop, !xmlStrEqual(Prop, (const xmlChar *)"strict")))
  {
    if (xmlStrEqual(v7, (const xmlChar *)"skip"))
    {
      uint64_t v8 = 0LL;
      int v9 = 1;
      goto LABEL_5;
    }

    if (xmlStrEqual(v7, (const xmlChar *)"lax"))
    {
      uint64_t v8 = 0LL;
      int v9 = 2;
      goto LABEL_5;
    }

    uint64_t v8 = 3037LL;
    xmlSchemaPSimpleTypeErr(a1, 3037, (uint64_t)node, 0LL, "(strict | skip | lax)", v7, 0LL, 0);
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  int v9 = 3;
LABEL_5:
  *(_DWORD *)(a2 + 4xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v9;
  uint64_t PropNode = (xmlNode *)xmlSchemaGetPropNode((uint64_t)node, (xmlChar *)"namespace");
  int NodeContent = xmlSchemaGetNodeContent(a1, PropNode);
  if (PropNode && (int v12 = NodeContent, !xmlStrEqual(NodeContent, (const xmlChar *)"##any")))
  {
    if (xmlStrEqual(v12, (const xmlChar *)"##other"))
    {
      unsigned int v14 = xmlSchemaNewWildcardNsConstraint(a1);
      *(void *)(a2 + 56) = v14;
      if (v14) {
        v14[1] = *(void *)(a1 + 200);
      }
      else {
        return 0xFFFFFFFFLL;
      }
    }

    else
    {
      int v24 = 0LL;
      uint64_t v25 = (void *)(a2 + 48);
      do
      {
        for (uint64_t i = v12; ; ++i)
        {
          unsigned int v16 = *i;
          if (v16 > 0x20 || ((1LL << v16) & 0x100002600LL) == 0) {
            break;
          }
          ++v12;
        }

        uint64_t v18 = 0LL;
        if (!v18) {
          break;
        }
        unsigned int v19 = xmlStrndup(i, v18);
        if (xmlStrEqual(v19, (const xmlChar *)"##other") || xmlStrEqual(v19, (const xmlChar *)"##any"))
        {
          uint64_t v8 = 1792LL;
          xmlSchemaPSimpleTypeErr( a1,  1792,  (uint64_t)PropNode,  0LL,  "((##any | ##other) | List of (xs:anyURI | (##targetNamespace | ##local)))",  v19,  0LL,  0);
        }

        else
        {
          if (xmlStrEqual(v19, (const xmlChar *)"##targetNamespace"))
          {
            uint64_t v20 = *(const xmlChar **)(a1 + 200);
          }

          else if (xmlStrEqual(v19, (const xmlChar *)"##local"))
          {
            uint64_t v20 = 0LL;
          }

          else
          {
            xmlSchemaTypePtr BuiltInType = xmlSchemaGetBuiltInType(XML_SCHEMAS_ANYURI);
            xmlSchemaPValAttrNodeValue((_DWORD *)a1, PropNode, v19, BuiltInType);
            uint64_t v20 = xmlDictLookup(*(xmlDictPtr *)(a1 + 152), v19, -1);
          }

          int v22 = (void *)(a2 + 48);
          while (1)
          {
            int v22 = (void *)*v22;
            if (!v22) {
              break;
            }
            if (v20 == (const xmlChar *)v22[1]) {
              goto LABEL_31;
            }
          }

          uint64_t v23 = xmlSchemaNewWildcardNsConstraint(a1);
          if (!v23)
          {
            xmlFree(v19);
            return 0xFFFFFFFFLL;
          }

          *uint64_t v23 = 0LL;
          v23[1] = v20;
          if (*v25)
          {
            if (v24) {
              *int v24 = v23;
            }
          }

          else
          {
            *uint64_t v25 = v23;
          }

          int v24 = v23;
        }

void *xmlSchemaNewWildcardNsConstraint(uint64_t a1)
{
  uint64_t v2 = xmlMalloc(0x10uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    *uint64_t v2 = 0LL;
    v2[1] = 0LL;
  }

  else
  {
    if (a1) {
      ++*(_DWORD *)(a1 + 36);
    }
    __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"creating wildcard namespace constraint");
  }

  return v3;
}

uint64_t xmlSchemaCheckReference(uint64_t a1, uint64_t a2, uint64_t a3, xmlChar *str2)
{
  if (xmlStrEqual(*(const xmlChar **)(a1 + 200), str2)
    || xmlStrEqual((const xmlChar *)"http://www.w3.org/2001/XMLSchema", str2))
  {
    return 0LL;
  }

  uint64_t v10 = *(uint64_t **)(*(void *)(*(void *)(a1 + 48) + 32LL) + 40LL);
  if (v10)
  {
    while (*((_DWORD *)v10 + 2) > 1u || !xmlStrEqual(str2, (const xmlChar *)v10[2]))
    {
      uint64_t v10 = (uint64_t *)*v10;
      if (!v10) {
        goto LABEL_9;
      }
    }

    return 0LL;
  }

void *xmlSchemaNewQNameRef(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = xmlMalloc(0x30uLL);
  int v9 = v8;
  if (v8)
  {
    v8[4] = a4;
    v8[5] = 0LL;
    *(_DWORD *)uint64_t v8 = 2000;
    v8[3] = a3;
    v8[1] = 0LL;
    *((_DWORD *)v8 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = a2;
    xmlSchemaAddItemSize((void **)(*(void *)(*(void *)(a1 + 48) + 32LL) + 72LL), 10, (uint64_t)v8);
  }

  else
  {
    if (a1) {
      ++*(_DWORD *)(a1 + 36);
    }
    __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"allocating QName reference item");
  }

  return v9;
}

void xmlSchemaPMutualExclAttrErr(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 0LL;
  xmlSchemaFormatItemForReport(&v7, a3, *(void *)(a4 + 40));
  xmlSchemaPErrExt(a1, a4, a2, "%s: The attributes '%s' and '%s' are mutually exclusive.\n", (char)v7);
  if (v7) {
    xmlFree(v7);
  }
}

void *xmlSchemaAddAttributeUse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = xmlMalloc(0x48uLL);
  uint64_t v5 = v4;
  if (v4)
  {
    v4[8] = 0LL;
    *((_OWORD *)v4 + 2) = 0u;
    *((_OWORD *)v4 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
    *(_OWORD *)uint64_t v4 = 0u;
    *((_OWORD *)v4 + 1) = 0u;
    *(_DWORD *)uint64_t v4 = 26;
    v4[5] = a2;
    xmlSchemaAddItemSize((void **)(*(void *)(*(void *)(a1 + 48) + 32LL) + 72LL), 10, (uint64_t)v4);
  }

  else
  {
    if (a1) {
      ++*(_DWORD *)(a1 + 36);
    }
    __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"allocating attribute");
  }

  return v5;
}

uint64_t xmlSchemaAddAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10 = xmlMalloc(0x98uLL);
  uint64_t v11 = (uint64_t)v10;
  if (v10)
  {
    _OWORD *v10 = 0u;
    v10[1] = 0u;
    v10[6] = 0u;
    v10[7] = 0u;
    *((void *)v10 + 18) = 0LL;
    v10[8] = 0u;
    v10[4] = 0u;
    v10[5] = 0u;
    void v10[2] = 0u;
    v10[3] = 0u;
    *(_DWORD *)uint64_t v10 = 15;
    *((void *)v10 + 2) = a2;
    *((void *)v10 + 1xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = a4;
    *((void *)v10 + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = a3;
    uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 32LL);
    if (a5)
    {
      int v13 = (void **)(v12 + 64);
      int v14 = 5;
    }

    else
    {
      int v13 = (void **)(v12 + 72);
      int v14 = 10;
    }

    xmlSchemaAddItemSize(v13, v14, v11);
    xmlSchemaAddItemSize((void **)(*(void *)(a1 + 48) + 40LL), 10, v11);
  }

  else
  {
    if (a1) {
      ++*(_DWORD *)(a1 + 36);
    }
    __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"allocating attribute");
  }

  return v11;
}

void *xmlSchemaAddAttributeUseProhib(uint64_t a1)
{
  uint64_t v2 = xmlMalloc(0x28uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    v2[4] = 0LL;
    *(_OWORD *)uint64_t v2 = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    *(_DWORD *)uint64_t v2 = 2001;
    xmlSchemaAddItemSize((void **)(*(void *)(*(void *)(a1 + 48) + 32LL) + 72LL), 10, (uint64_t)v2);
  }

  else
  {
    if (a1) {
      ++*(_DWORD *)(a1 + 36);
    }
    __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"allocating attribute use prohibition");
  }

  return v3;
}

void xmlSchemaParseUnion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 160);
  *(_DWORD *)(v5 + 88) |= 0x80u;
  *(void *)(v5 + 112) = xmlSchemaGetBuiltInType(XML_SCHEMAS_ANYSIMPLETYPE);
  uint64_t v6 = *(void *)(a3 + 88);
  if (v6)
  {
    while (1)
    {
      uint64_t v7 = *(void *)(v6 + 72);
      if (!v7) {
        break;
      }
      if (xmlStrEqual(*(const xmlChar **)(v7 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema")) {
        goto LABEL_4;
      }
LABEL_7:
      uint64_t v6 = *(void *)(v6 + 48);
      if (!v6) {
        goto LABEL_8;
      }
    }

    if (xmlStrEqual(*(const xmlChar **)(v6 + 16), (const xmlChar *)"id")
      || xmlStrEqual(*(const xmlChar **)(v6 + 16), (const xmlChar *)"memberTypes"))
    {
      goto LABEL_7;
    }

void *xmlSchemaParseIDCSelectorAndField(_DWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = *(void *)(a3 + 88);
  if (v8)
  {
    while (1)
    {
      uint64_t v9 = *(void *)(v8 + 72);
      if (!v9) {
        break;
      }
      if (xmlStrEqual(*(const xmlChar **)(v9 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema")) {
        goto LABEL_4;
      }
LABEL_7:
      uint64_t v8 = *(void *)(v8 + 48);
      if (!v8) {
        goto LABEL_8;
      }
    }

    if (xmlStrEqual(*(const xmlChar **)(v8 + 16), (const xmlChar *)"id")
      || xmlStrEqual(*(const xmlChar **)(v8 + 16), (const xmlChar *)"xpath"))
    {
      goto LABEL_7;
    }

uint64_t xmlSchemaAddComponents(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  int v3 = *(_DWORD *)(a2 + 4);
  if ((v3 & 2) != 0) {
    return 0LL;
  }
  *(_DWORD *)(a2 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v3 | 2;
  uint64_t v5 = *(void *)(a2 + 64);
  if (*(int *)(v5 + 8) < 1)
  {
LABEL_42:
    uint64_t v21 = *(void **)(a2 + 40);
    if (v21)
    {
      while (1)
      {
        uint64_t v22 = v21[3];
        if (v22)
        {
          if ((*(_BYTE *)(v22 + 4) & 2) == 0)
          {
            uint64_t result = xmlSchemaAddComponents(a1);
            if ((_DWORD)result == -1) {
              break;
            }
          }
        }

        uint64_t v21 = (void *)*v21;
        if (!v21) {
          return 0LL;
        }
      }

      return result;
    }

    return 0LL;
  }

  uint64_t v6 = 0LL;
  while (1)
  {
    uint64_t v7 = *(void *)(*(void *)v5 + 8 * v6);
    switch(*(_DWORD *)v7)
    {
      case 4:
      case 5:
        if ((*(_BYTE *)(v7 + 91) & 0x40) != 0) {
          goto LABEL_41;
        }
        uint64_t v8 = *(const xmlChar **)(v7 + 16);
        uint64_t v11 = *(void *)(a2 + 80);
        if (*(_DWORD *)a2 > 1u) {
          uint64_t v11 = *(void *)(v11 + 80);
        }
        uint64_t v10 = (xmlHashTable **)(v11 + 56);
        break;
      case 0xE:
        uint64_t v8 = *(const xmlChar **)(v7 + 16);
        uint64_t v12 = *(void *)(a2 + 80);
        if (*(_DWORD *)a2 > 1u) {
          uint64_t v12 = *(void *)(v12 + 80);
        }
        uint64_t v10 = (xmlHashTable **)(v12 + 80);
        break;
      case 0xF:
        uint64_t v8 = *(const xmlChar **)(v7 + 16);
        uint64_t v13 = *(void *)(a2 + 80);
        if (*(_DWORD *)a2 > 1u) {
          uint64_t v13 = *(void *)(v13 + 80);
        }
        uint64_t v10 = (xmlHashTable **)(v13 + 64);
        break;
      case 0x10:
        if ((*(_BYTE *)(v7 + 72) & 8) != 0) {
          goto LABEL_41;
        }
        uint64_t v8 = *(const xmlChar **)(v7 + 16);
        uint64_t v14 = *(void *)(a2 + 80);
        if (*(_DWORD *)a2 > 1u) {
          uint64_t v14 = *(void *)(v14 + 80);
        }
        uint64_t v10 = (xmlHashTable **)(v14 + 72);
        break;
      case 0x11:
        if ((*(_BYTE *)(v7 + 56) & 2) != 0) {
          goto LABEL_41;
        }
        uint64_t v8 = *(const xmlChar **)(v7 + 32);
        uint64_t v15 = *(void *)(a2 + 80);
        if (*(_DWORD *)a2 > 1u) {
          uint64_t v15 = *(void *)(v15 + 80);
        }
        uint64_t v10 = (xmlHashTable **)(v15 + 112);
        break;
      case 0x12:
        uint64_t v8 = *(const xmlChar **)(v7 + 8);
        uint64_t v16 = *(void *)(a2 + 80);
        if (*(_DWORD *)a2 > 1u) {
          uint64_t v16 = *(void *)(v16 + 80);
        }
        uint64_t v10 = (xmlHashTable **)(v16 + 88);
        break;
      case 0x16:
      case 0x17:
      case 0x18:
        uint64_t v8 = *(const xmlChar **)(v7 + 32);
        uint64_t v9 = *(void *)(a2 + 80);
        if (*(_DWORD *)a2 > 1u) {
          uint64_t v9 = *(void *)(v9 + 80);
        }
        uint64_t v10 = (xmlHashTable **)(v9 + 144);
        break;
      default:
        xmlSchemaInternalErr2( (_DWORD *)a1,  (const xmlChar *)"xmlSchemaAddComponents",  (const xmlChar *)"Unexpected global component type",  0LL);
        goto LABEL_41;
    }

    Dict = *v10;
    if (!*v10)
    {
      Dict = xmlHashCreateDict(10, *(xmlDictPtr *)(a1 + 152));
      void *v10 = Dict;
      if (!Dict) {
        break;
      }
    }

    if (xmlHashAddEntry(Dict, v8, (void *)v7))
    {
      uint64_t v24 = 0LL;
      uint64_t ComponentNode = xmlSchemaGetComponentNode((_DWORD *)v7);
      if (*(_DWORD *)v7 == 1)
      {
        if (*(_DWORD *)(v7 + 160) == 45) {
          unsigned int v19 = "complex type definition";
        }
        else {
          unsigned int v19 = "simple type definition";
        }
      }

      else
      {
        unsigned int v19 = xmlSchemaItemTypeToStr(*(_DWORD *)v7);
      }

      ComponentQName = xmlSchemaGetComponentQName(&v24, (int *)v7);
      xmlSchemaCustomErr4( (_DWORD *)a1,  1761,  ComponentNode,  (_DWORD *)v7,  (const xmlChar *)"A global %s '%s' does already exist",  (const xmlChar *)v19,  ComponentQName,  0LL,  0LL);
      if (v24) {
        xmlFree(v24);
      }
    }

xmlSchemaTypePtr xmlSchemaResolveElementReferences(xmlSchemaTypePtr result, uint64_t a2)
{
  if (!result) {
    return result;
  }
  uint64_t v2 = (uint64_t)result;
  int flags = result->flags;
  if ((flags & 0x100) != 0) {
    return result;
  }
  result->int flags = flags | 0x100;
  if (!result->subtypes)
  {
    baseNs = result->baseNs;
    if (baseNs)
    {
      Type = xmlSchemaGetType(*(void *)(a2 + 64), baseNs, (xmlChar *)result->baseType);
      if (Type) {
        *(void *)(v2 + 56) = Type;
      }
      else {
        xmlSchemaPResCompAttrErr( a2,  v2,  *(void *)(v2 + 72),  (uint64_t)"type",  *(xmlChar **)(v2 + 104),  *(const xmlChar **)(v2 + 112),  1,  (uint64_t)"type definition");
      }
    }
  }

  uint64_t v5 = *(const xmlChar **)(v2 + 120);
  if (!v5) {
    goto LABEL_13;
  }
  Eleuint64_t m = xmlSchemaGetElem(*(void *)(a2 + 64), v5, *(xmlChar **)(v2 + 128));
  if (!Elem)
  {
    xmlSchemaPResCompAttrErr( a2,  v2,  0LL,  (uint64_t)"substitutionGroup",  *(xmlChar **)(v2 + 120),  *(const xmlChar **)(v2 + 128),  14,  0LL);
LABEL_13:
    uint64_t result = *(xmlSchemaTypePtr *)(v2 + 56);
    goto LABEL_14;
  }

  uint64_t v7 = Elem;
  uint64_t result = (xmlSchemaTypePtr)xmlSchemaResolveElementReferences(Elem, a2);
  *(void *)(v2 + 152) = v7;
  if (*(void *)(v2 + 56)) {
    return result;
  }
  uint64_t result = (xmlSchemaTypePtr)v7[7];
  if (result) {
    goto LABEL_18;
  }
  uint64_t result = xmlSchemaGetBuiltInType(XML_SCHEMAS_ANYTYPE);
  *(void *)(v2 + 56) = result;
LABEL_14:
  if (!result && !*(void *)(v2 + 104) && !*(void *)(v2 + 120))
  {
    uint64_t result = xmlSchemaGetBuiltInType(XML_SCHEMAS_ANYTYPE);
LABEL_18:
    *(void *)(v2 + 56) = result;
  }

  return result;
}

uint64_t xmlSchemaAttributeGroupExpandRefs(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 112);
  if (!v2) {
    return 0LL;
  }
  int v3 = *(_DWORD *)(a2 + 72);
  if ((v3 & 1) != 0) {
    return 0LL;
  }
  *(_DWORD *)(a2 + 72) = v3 | 1;
  else {
    return 0LL;
  }
}

uint64_t xmlSchemaFixupSimpleTypeStageOne(_DWORD *a1, uint64_t a2)
{
  if (*(_DWORD *)a2 != 4) {
    return 0LL;
  }
  int v3 = *(_DWORD *)(a2 + 88);
  if ((v3 & 0x20000000) != 0) {
    return 0LL;
  }
  *(_DWORD *)(a2 + 88) = v3 | 0x20000000;
  if ((v3 & 0x40) != 0)
  {
    if (*(void *)(a2 + 56)) {
      return 0LL;
    }
    uint64_t v8 = "list type has no item-type assigned";
LABEL_21:
    xmlSchemaInternalErr2(a1, (const xmlChar *)"xmlSchemaFixupSimpleTypeStageOne", (const xmlChar *)v8, 0LL);
    return 0xFFFFFFFFLL;
  }

  if ((v3 & 0x80) != 0)
  {
    if (*(void *)(a2 + 168)) {
      return 0LL;
    }
    uint64_t v8 = "union type has no member-types assigned";
    goto LABEL_21;
  }

  uint64_t v4 = *(void *)(a2 + 112);
  if (!v4)
  {
    uint64_t v8 = "type has no base-type assigned";
    goto LABEL_21;
  }

  if (*(_DWORD *)v4 != 1 && (*(_BYTE *)(v4 + 91) & 0x20) == 0)
  {
    uint64_t result = xmlSchemaFixupSimpleTypeStageOne();
    if ((_DWORD)result == -1) {
      return result;
    }
    uint64_t v4 = *(void *)(a2 + 112);
  }

  int v6 = *(_DWORD *)(v4 + 88);
  if ((v6 & 0x100) != 0)
  {
    uint64_t result = 0LL;
    int v7 = *(_DWORD *)(a2 + 88) | 0x100;
    goto LABEL_23;
  }

  if ((v6 & 0x40) != 0)
  {
    uint64_t result = 0LL;
    *(_DWORD *)(a2 + 88) |= 0x40u;
    *(void *)(a2 + 56) = *(void *)(v4 + 56);
    return result;
  }

  if ((v6 & 0x80) != 0)
  {
    uint64_t result = 0LL;
    int v7 = *(_DWORD *)(a2 + 88) | 0x80;
LABEL_23:
    *(_DWORD *)(a2 + 88) = v7;
    return result;
  }

  return 0LL;
}

uint64_t xmlSchemaFixupSimpleTypeStageTwo( xmlSchemaParserCtxt *ctxt, xmlSchemaTypePtr typeDecl, uint64_t a3, xmlSchemaFacetPtr i)
{
  if (typeDecl->type != XML_SCHEMA_TYPE_SIMPLE) {
    return 0xFFFFFFFFLL;
  }
  int flags = typeDecl->flags;
  if ((flags & 0x400000) != 0) {
    return 0LL;
  }
  int v7 = *((_DWORD *)ctxt + 9);
  typeDecl->int flags = flags | 0x400000;
  typeDecl->contentType = XML_SCHEMA_CONTENT_SIMPLE;
  xmlSchemaTypePtr baseType = typeDecl->baseType;
  if (!baseType)
  {
    uint64_t v20 = "xmlSchemaFixupSimpleTypeStageTwo";
    uint64_t v21 = "missing baseType";
LABEL_27:
    xmlSchemaInternalErr2(ctxt, (const xmlChar *)v20, (const xmlChar *)v21, 0LL);
    return 0xFFFFFFFFLL;
  }

  if (baseType->type != XML_SCHEMA_TYPE_BASIC && (baseType->flags & 0x400000) == 0) {
    xmlSchemaTypeFixup((uint64_t)baseType, ctxt);
  }
  p_xmlSchemaTypeLinkPtr memberTypes = &typeDecl->memberTypes;
  xmlSchemaTypeLinkPtr memberTypes = typeDecl->memberTypes;
  if (memberTypes)
  {
    while (1)
    {
      uint64_t type = (uint64_t)memberTypes->type;
      if (*(_DWORD *)type != 1 && (*(_BYTE *)(type + 90) & 0x40) == 0)
      {
        xmlSchemaTypeFixup(type, ctxt);
        uint64_t type = (uint64_t)memberTypes->type;
      }

      if ((*(_BYTE *)(type + 88) & 0x80) != 0)
      {
        while (1)
        {
          if (*(_DWORD *)type != 4) {
            goto LABEL_20;
          }
          uint64_t v12 = *(void *)(type + 168);
          if (v12) {
            break;
          }
          uint64_t type = *(void *)(type + 112);
          if (!type) {
            goto LABEL_20;
          }
        }

        memberTypes->uint64_t type = *(xmlSchemaTypePtr *)(v12 + 8);
        uint64_t v13 = *(void **)v12;
        if (*(void *)v12) {
          break;
        }
      }

void xmlSchemaCheckAttrPropsCorrect(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 96);
  if (v2)
  {
    uint64_t v4 = *(xmlChar **)(a2 + 88);
    if (v4)
    {
      uint64_t v6 = *(void *)(a2 + 96);
      do
      {
        if (*(_DWORD *)v6 == 5) {
          break;
        }
        int v7 = *(_DWORD *)(v6 + 160);
        if (v7 == 45) {
          break;
        }
        if (*(_DWORD *)v6 == 1)
        {
          if (v7 == 23)
          {
            xmlSchemaCustomErr4( a1,  3090,  0LL,  (_DWORD *)a2,  (const xmlChar *)"Value constraints are not allowed if the type definition is or is derived from xs:ID",  0LL,  0LL,  0LL,  0LL);
            return;
          }

          if (v7 == 46) {
            break;
          }
        }

        uint64_t v6 = *(void *)(v6 + 56);
      }

      while (v6);
      int v8 = xmlSchemaVCheckCVCSimpleType( (uint64_t)a1,  *(xmlNode **)(a2 + 104),  v2,  v4,  (xmlSchemaValPtr *)(a2 + 136),  1u,  1,  0);
      if (v8)
      {
        if (v8 < 0) {
          xmlSchemaInternalErr2( a1,  (const xmlChar *)"xmlSchemaCheckAttrPropsCorrect",  (const xmlChar *)"calling xmlSchemaVCheckCVCSimpleType()",  0LL);
        }
        else {
          xmlSchemaCustomErr4( a1,  3079,  0LL,  (_DWORD *)a2,  (const xmlChar *)"The value of the value constraint is not valid",  0LL,  0LL,  0LL,  0LL);
        }
      }
    }
  }

void xmlSchemaCheckAttrUsePropsCorrect(_DWORD *a1, uint64_t a2)
{
  if (a2)
  {
    int v3 = *(xmlChar **)(a2 + 56);
    if (v3)
    {
      uint64_t v4 = *(void *)(a2 + 24);
      if (v4)
      {
        if (*(_DWORD *)v4 == 15)
        {
          uint64_t v5 = a1;
          if (*(void *)(v4 + 88) && (*(_BYTE *)(v4 + 121) & 2) != 0 && (*(_BYTE *)(a2 + 32) & 1) == 0)
          {
            uint64_t v6 = "The attribute declaration has a 'fixed' value constraint , thus the attribute use must also have a 'fix"
                 "ed' value constraint";
            int v7 = (_DWORD *)a2;
LABEL_26:
            xmlSchemaPCustomErrExt((uint64_t)a1, 3078, v7, 0LL, (const xmlChar *)v6);
            return;
          }

          int v8 = (xmlSchemaValPtr *)(a2 + 64);
          if (*(void *)(a2 + 64) && (uint64_t v9 = *(void *)(v4 + 96)) != 0)
          {
            uint64_t v10 = *(void *)(v4 + 96);
            do
            {
              if (*(_DWORD *)v10 == 5) {
                break;
              }
              int v11 = *(_DWORD *)(v10 + 160);
              if (v11 == 45) {
                break;
              }
              if (*(_DWORD *)v10 == 1)
              {
                if (v11 == 23)
                {
                  xmlSchemaCustomErr4( a1,  3089,  0LL,  (_DWORD *)a2,  (const xmlChar *)"Value constraints are not allowed if the type definition is or is derived from xs:ID",  0LL,  0LL,  0LL,  0LL);
                  return;
                }

                if (v11 == 46) {
                  break;
                }
              }

              uint64_t v10 = *(void *)(v10 + 56);
            }

            while (v10);
            int v12 = xmlSchemaVCheckCVCSimpleType( (uint64_t)a1,  *(xmlNode **)(a2 + 40),  v9,  v3,  (xmlSchemaValPtr *)(a2 + 64),  1u,  1,  0);
            if (!v12)
            {
              uint64_t v4 = *(void *)(a2 + 24);
              goto LABEL_22;
            }

            if (v12 < 0) {
              xmlSchemaInternalErr2( v5,  (const xmlChar *)"xmlSchemaCheckAttrUsePropsCorrect",  (const xmlChar *)"calling xmlSchemaVCheckCVCSimpleType()",  0LL);
            }
            else {
              xmlSchemaCustomErr4( v5,  3089,  0LL,  (_DWORD *)a2,  (const xmlChar *)"The value of the value constraint is not valid",  0LL,  0LL,  0LL,  0LL);
            }
          }

          else
          {
LABEL_22:
            uint64_t v13 = *(xmlSchemaVal **)(v4 + 136);
            if (v13 && (*(_BYTE *)(v4 + 120) & 1) == 0 && !xmlSchemaAreValuesEqual(*v8, v13))
            {
              uint64_t v6 = "The 'fixed' value constraint of the attribute use must match the attribute declaration's value constraint '%s'";
              a1 = v5;
              int v7 = (_DWORD *)a2;
              goto LABEL_26;
            }
          }
        }
      }
    }
  }

uint64_t xmlSchemaCheckAGPropsCorrect(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 112);
  if (v2)
  {
    uint64_t v3 = *(unsigned int *)(v2 + 8);
    if ((int)v3 >= 2)
    {
      uint64_t v5 = (_DWORD *)result;
      int v6 = 0;
      unsigned int v7 = v3 - 2;
      int v8 = v3 - 1;
      do
      {
        uint64_t v9 = *(void *)(*(void *)v2 + 8LL * (v3 - 1));
        if (v3 == 1)
        {
LABEL_9:
          for (uint64_t i = *(void *)(*(void *)(v9 + 24) + 96LL); i; uint64_t i = *(void *)(i + 56))
          {
            if (*(_DWORD *)i == 5) {
              break;
            }
            int v15 = *(_DWORD *)(i + 160);
            if (v15 == 45) {
              break;
            }
            if (*(_DWORD *)i == 1)
            {
              if (v15 == 23)
              {
                if (!v6) {
                  goto LABEL_25;
                }
                uint64_t v21 = 0LL;
                uint64_t v18 = *(void *)(a2 + 64);
                ComponentDesignatiouint64_t n = xmlSchemaGetComponentDesignation(&v21, (int *)v9);
                xmlSchemaCustomErr4( v5,  3087,  v18,  (_DWORD *)a2,  (const xmlChar *)"There must not exist more than one attribute declaration of type 'xs:ID' (or derived from 'xs:ID'). The %s violates this constraint",  ComponentDesignation,  0LL,  0LL,  0LL);
                if (v21) {
                  xmlFree(v21);
                }
                uint64_t result = xmlSchemaItemListRemove(v2, (int)v3 - 1);
                if ((_DWORD)result != -1)
                {
LABEL_25:
                  int v6 = 1;
                  break;
                }

                return result;
              }

              if (v15 == 46) {
                break;
              }
            }
          }
        }

        else
        {
          uint64_t v10 = *(void *)(v9 + 24);
          uint64_t v11 = *(void *)v2 + 8LL * v7;
          int v12 = v8;
          while (1)
          {
            uint64_t v13 = *(void *)(*(void *)v11 + 24LL);
            if (*(void *)(v10 + 16) == *(void *)(v13 + 16) && *(void *)(v10 + 112) == *(void *)(v13 + 112)) {
              break;
            }
            --v12;
            v11 -= 8LL;
            if (v12 <= 0) {
              goto LABEL_9;
            }
          }

          uint64_t v21 = 0LL;
          uint64_t v16 = *(void *)(a2 + 64);
          uint64_t v17 = xmlSchemaGetComponentDesignation(&v21, (int *)v9);
          xmlSchemaCustomErr4(v5, 3087, v16, (_DWORD *)a2, (const xmlChar *)"Duplicate %s", v17, 0LL, 0LL, 0LL);
          if (v21) {
            xmlFree(v21);
          }
          uint64_t result = xmlSchemaItemListRemove(v2, (int)v3 - 1);
          if ((_DWORD)result == -1) {
            return result;
          }
        }

        --v7;
        --v8;
      }

      while (v3-- > 1);
    }
  }

  return result;
}

uint64_t xmlSchemaCheckSRCRedefineSecond(uint64_t result)
{
  int v1 = *(void **)(*(void *)(result + 48) + 56LL);
  if (v1)
  {
    uint64_t v2 = (xmlSchemaParserCtxt *)result;
    do
    {
      uint64_t v3 = v1[3];
      if (v3)
      {
        uint64_t v4 = v1[1];
        if ((*(_DWORD *)v4 - 4) >= 2)
        {
          if (*(_DWORD *)v4 == 16)
          {
            uint64_t result = xmlSchemaCheckDerivationOKRestriction2to4( v2,  1,  (int *)v4,  (int *)v3,  *(int **)(v4 + 112),  *(uint64_t ***)(v3 + 112),  *(void *)(v4 + 80),  *(void *)(v3 + 80));
            if ((_DWORD)result == -1) {
              return result;
            }
          }
        }

        else
        {
          *(void *)(v3 + 16) = 0LL;
        }
      }

      int v1 = (void *)*v1;
    }

    while (v1);
  }

  return result;
}

uint64_t xmlSchemaFixupComplexType(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a2 == 1) {
    return 0LL;
  }
  int v3 = *(_DWORD *)(a2 + 88);
  if ((v3 & 0x400000) != 0) {
    return 0LL;
  }
  int v5 = *(_DWORD *)(a1 + 36);
  int v6 = *(xmlSchemaType **)(a2 + 112);
  *(_DWORD *)(a2 + 88) = v3 | 0x400000;
  if (!v6)
  {
    uint64_t v11 = "xmlSchemaFixupComplexType";
    int v12 = "missing baseType";
LABEL_18:
    xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)v11, (const xmlChar *)v12, 0LL);
LABEL_19:
    *(_DWORD *)(a2 + 88) |= 0x800000u;
    return 0xFFFFFFFFLL;
  }

  if (v6->type != XML_SCHEMA_TYPE_BASIC && (v6->flags & 0x400000) == 0) {
    xmlSchemaTypeFixup(v6, (xmlSchemaParserCtxtPtr)a1);
  }
  if ((v6->flags & 0x800000) != 0) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a2 + 112);
  int v8 = *(_DWORD *)(a2 + 92);
  if ((v8 | 2) != 6)
  {
    if (*(_DWORD *)v7 == 5 || *(_DWORD *)(v7 + 160) == 45) {
      goto LABEL_38;
    }
    int v97 = 0LL;
    uint64_t v14 = *(void *)(a2 + 72);
    xmlSchemaFormatQName(&v97, *(const xmlChar **)(v7 + 208), *(xmlChar **)(v7 + 16));
    int v15 = "If using <complexContent>, the base type is expected to be a complex type. The base type '%s' is a simple type";
    uint64_t v16 = a1;
    uint64_t v17 = (_DWORD *)a2;
    uint64_t v18 = v14;
LABEL_32:
    xmlSchemaPCustomErrExt(v16, 3076, v17, v18, (const xmlChar *)v15);
    if (v97) {
      xmlFree(v97);
    }
LABEL_34:
    *(_DWORD *)(a2 + 88) |= 0x800000u;
    return *(unsigned int *)(a1 + 32);
  }

  if (*(_DWORD *)v7 == 4 || *(_DWORD *)v7 == 1 && *(_DWORD *)(v7 + 160) != 45)
  {
    if ((*(_BYTE *)(a2 + 88) & 2) != 0) {
      goto LABEL_38;
    }
    int v97 = 0LL;
    xmlSchemaFormatQName(&v97, *(const xmlChar **)(v7 + 208), *(xmlChar **)(v7 + 16));
    int v15 = "If using <simpleContent> and <restriction>, the base type must be a complex type. The base type '%s' is a simple type";
    goto LABEL_25;
  }

  int v9 = *(_DWORD *)(v7 + 92);
  if (v9 == 3)
  {
    if ((*(_BYTE *)(a2 + 88) & 4) == 0)
    {
      unsigned int v19 = "If <simpleContent> and <extension> is used, the base type must be a simple type. The base type '%s' is a complex type";
LABEL_31:
      int v97 = 0LL;
      xmlSchemaFormatQName(&v97, *(const xmlChar **)(v7 + 208), *(xmlChar **)(v7 + 16));
      uint64_t v16 = a1;
      uint64_t v17 = (_DWORD *)a2;
      uint64_t v18 = 0LL;
      int v15 = v19;
      goto LABEL_32;
    }

    if (!xmlSchemaIsParticleEmptiable(*(void *)(v7 + 56)))
    {
      unsigned int v19 = "If <simpleContent> and <restriction> is used, the base type must be a simple type or a complex type with mix"
            "ed content and particle emptiable. The base type '%s' is none of those";
      goto LABEL_31;
    }

    if (*(void *)(a2 + 192)) {
      goto LABEL_38;
    }
    int v97 = 0LL;
    xmlSchemaFormatQName(&v97, *(const xmlChar **)(v7 + 208), *(xmlChar **)(v7 + 16));
    int v15 = "A <simpleType> is expected among the children of <restriction>, if <simpleContent> is used and the base type '"
          "%s' is a complex type";
LABEL_25:
    uint64_t v16 = a1;
    uint64_t v17 = (_DWORD *)a2;
    uint64_t v18 = 0LL;
    goto LABEL_32;
  }

  if (v9 != 4 && v9 != 6)
  {
    if ((*(_DWORD *)(a2 + 88) & 4) != 0) {
      unsigned int v19 = "If <simpleContent> and <restriction> is used, the base type must be a simple type or a complex type with mix"
    }
            "ed content and particle emptiable. The base type '%s' is none of those";
    else {
      unsigned int v19 = "If <simpleContent> and <extension> is used, the base type must be a simple type. The base type '%s' is a complex type";
    }
    goto LABEL_31;
  }

  if (!*(void *)(v7 + 192))
  {
    uint64_t v10 = "Internal error: xmlSchemaCheckSRCCT, '%s', base type has no content type";
LABEL_55:
    xmlSchemaPCustomErrExt(a1, 3069, (_DWORD *)a2, 0LL, (const xmlChar *)v10);
    goto LABEL_19;
  }

LABEL_261:
  int v95 = xmlSchemaCheckCTComponent((xmlSchemaParserCtxt *)a1, a2);
  if (v95 == -1) {
    goto LABEL_19;
  }
  if (v95) {
    goto LABEL_34;
  }
  if (v96 != *(_DWORD *)(a1 + 36)) {
    return *(unsigned int *)(a1 + 32);
  }
  return 0LL;
}

void xmlSchemaCheckElementDeclComponent(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return;
  }
  int v3 = *(_DWORD *)(a1 + 88);
  if ((v3 & 0x40000) != 0) {
    return;
  }
  *(_DWORD *)(a1 + 88) = v3 | 0x40000;
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 152);
  if (v6)
  {
    xmlSchemaCheckElementDeclComponent(*(void *)(a1 + 152), a2);
    if ((*(_BYTE *)(a1 + 88) & 2) != 0)
    {
      int v7 = 0;
    }

    else
    {
      int v7 = 3046;
      xmlSchemaPCustomErrExt( a2,  3046,  (_DWORD *)a1,  0LL,  (const xmlChar *)"Only global element declarations can have a substitution group affiliation");
    }

    int v8 = (int *)a1;
    if (v6 == a1 || *(void *)(v6 + 152) && (int v8 = (int *)xmlSchemaCheckSubstGroupCircular(v6, v6)) != 0LL)
    {
      int v39 = 0LL;
      uint64_t v40 = 0LL;
      xmlSchemaGetComponentQName(&v40, v8);
      xmlSchemaGetComponentQName(&v39, (int *)v6);
      xmlSchemaPCustomErrExt( a2,  3049,  v8,  0LL,  (const xmlChar *)"The element declaration '%s' defines a circular substitution group to element declaration '%s'");
      if (v40) {
        xmlFree(v40);
      }
      if (v39) {
        xmlFree(v39);
      }
      int v7 = 3049;
    }

    if (v5 != *(void *)(*(void *)(a1 + 152) + 56LL)
      && xmlSchemaCheckCOSDerivedOK( (xmlSchemaParserCtxt *)a2,  v5,  *(void *)(v6 + 56),  (*(_DWORD *)(v6 + 88) >> 14) & 2 | HIWORD(*(_DWORD *)(v6 + 88)) & 1u))
    {
      int v39 = 0LL;
      uint64_t v40 = 0LL;
      int v38 = 0LL;
      xmlSchemaGetComponentQName(&v40, (int *)v5);
      xmlSchemaGetComponentQName(&v39, (int *)v6);
      xmlSchemaGetComponentQName(&v38, *(int **)(v6 + 56));
      xmlSchemaPCustomErrExt( a2,  3047,  (_DWORD *)a1,  0LL,  (const xmlChar *)"The type definition '%s' was either rejected by the substitution group affiliation '%s', or not validly derived from its type definition '%s'");
      if (v40) {
        xmlFree(v40);
      }
      if (v39) {
        xmlFree(v39);
      }
      if (v38) {
        xmlFree(v38);
      }
      int v7 = 3047;
    }
  }

  else
  {
    int v7 = 0;
  }

  if (!*(void *)(a1 + 144)) {
    goto LABEL_58;
  }
  int v9 = *(_DWORD *)v5;
  if (*(_DWORD *)v5 == 5) {
    goto LABEL_111;
  }
  if (v9 == 4 || v9 == 1 && *(_DWORD *)(v5 + 160) != 45)
  {
    uint64_t v10 = v5;
    do
    {
      if (*(_DWORD *)v10 == 5) {
        break;
      }
      int v11 = *(_DWORD *)(v10 + 160);
      if (v11 == 45) {
        break;
      }
      if (*(_DWORD *)v10 == 1)
      {
        if (v11 == 23) {
          goto LABEL_40;
        }
        if (v11 == 46) {
          break;
        }
      }

      uint64_t v10 = *(void *)(v10 + 56);
    }

    while (v10);
  }

  if (*(_DWORD *)(v5 + 160) == 45)
  {
LABEL_111:
    if ((*(_DWORD *)(v5 + 92) | 2) == 6 && xmlSchemaIsDerivedFromBuiltInType(*(void *)(v5 + 192)))
    {
LABEL_40:
      xmlSchemaPCustomErrExt( a2,  3048,  (_DWORD *)a1,  0LL,  (const xmlChar *)"The type definition (or type definition's content type) is or is derived from ID; value constra"
                         "ints are not allowed in conjunction with such a type definition");
      return;
    }
  }

  int v12 = *(const xmlNode **)(a1 + 72);
  if (v12)
  {
    if ((*(_DWORD *)(a1 + 88) & 8) != 0) {
      uint64_t v13 = "fixed";
    }
    else {
      uint64_t v13 = "default";
    }
    xmlAttrPtr v14 = xmlHasProp(v12, (const xmlChar *)v13);
  }

  else
  {
    xmlAttrPtr v14 = 0LL;
  }

  int v15 = *(xmlChar **)(a1 + 144);
  int v16 = *(_DWORD *)v5;
  if (*(_DWORD *)v5 == 5 || *(_DWORD *)(v5 + 160) == 45)
  {
    int v17 = *(_DWORD *)(v5 + 92);
    if (v17 != 6 && v17 != 4 && (v17 != 3 || !xmlSchemaIsParticleEmptiable(*(void *)(v5 + 56))))
    {
      xmlSchemaPCustomErrExt( a2,  3059,  (_DWORD *)v5,  *(void *)(v5 + 72),  (const xmlChar *)"For a string to be a valid default, the type definition must be a simple type or a complex type with mixed content and a particle emptiable");
      return;
    }
  }

  if (v16 != 4 && (v16 != 1 || *(_DWORD *)(v5 + 160) == 45))
  {
    if ((*(_DWORD *)(v5 + 92) | 2) == 6)
    {
      uint64_t v18 = *(void *)(v5 + 192);
      uint64_t v19 = a2;
      uint64_t v20 = (xmlNode *)v14;
      goto LABEL_61;
    }

void xmlSchemaBuildContentModel(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == 5 && !*(void *)(a1 + 200) && (*(_DWORD *)(a1 + 92) & 0xFFFFFFFE) == 2)
  {
    *(void *)(a2 + 12xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = 0LL;
    uint64_t v4 = xmlNewAutomata();
    *(void *)(a2 + 12xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v4;
    if (!v4)
    {
      xmlGenericErrorFunc v10 = *__xmlGenericError();
      int v11 = __xmlGenericErrorContext();
      v10(*v11, "Cannot create automata for complex type %s\n", *(const char **)(a1 + 16));
      return;
    }

    *(void *)(a2 + 14xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = xmlAutomataGetInitState(v4);
    xmlSchemaBuildAContentModel(a2, *(void *)(a1 + 56));
    xmlAutomataSetFinalState(*(xmlAutomataPtr *)(a2 + 120), *(xmlAutomataStatePtr *)(a2 + 144));
    uint64_t v5 = xmlAutomataCompile(*(xmlAutomataPtr *)(a2 + 120));
    *(void *)(a1 + 20xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v5;
    if (v5)
    {
      if (xmlRegexpIsDeterminist(v5) == 1)
      {
LABEL_11:
        *(void *)(a2 + 14xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
        xmlFreeAutomata(*(xmlAutomataPtr *)(a2 + 120));
        *(void *)(a2 + 12xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = 0LL;
        return;
      }

      uint64_t v6 = *(void *)(a1 + 72);
      int v7 = "The content model is not determinist";
      uint64_t v8 = a2;
      int v9 = 3070;
    }

    else
    {
      uint64_t v6 = *(void *)(a1 + 72);
      int v7 = "Failed to compile the content model";
      uint64_t v8 = a2;
      int v9 = 3069;
    }

    xmlSchemaPCustomErrExt(v8, v9, (_DWORD *)a1, v6, (const xmlChar *)v7);
    goto LABEL_11;
  }

void *xmlSchemaFindRedefCompInGraph(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 0LL;
  if (a1 && a3)
  {
    uint64_t v6 = *(void *)(a1 + 64);
    if (v6)
    {
      uint64_t v7 = *(unsigned int *)(v6 + 8);
      if ((int)v7 >= 1)
      {
        uint64_t v8 = *(void **)v6;
        do
        {
          uint64_t result = (void *)*v8;
          if (*(_DWORD *)*v8 == a2)
          {
            if ((a2 - 4) < 2)
            {
              if (result[2] == a3)
              {
                uint64_t v9 = result[26];
                goto LABEL_16;
              }
            }

            else if (a2 == 16)
            {
              if (result[2] == a3)
              {
                uint64_t v9 = result[13];
LABEL_16:
                if (v9 == a4) {
                  return result;
                }
              }
            }

            else
            {
              if (a2 != 17) {
                return 0LL;
              }
              if (result[4] == a3)
              {
                uint64_t v9 = result[5];
                goto LABEL_16;
              }
            }
          }

          ++v8;
          --v7;
        }

        while (v7);
      }
    }

    xmlGenericErrorFunc v10 = *(void **)(a1 + 40);
    if (v10)
    {
      *(_DWORD *)(a1 + 4) |= 1u;
      while (1)
      {
        uint64_t v11 = v10[3];
        if (v11)
        {
          if ((*(_BYTE *)(v11 + 4) & 1) == 0)
          {
            uint64_t result = (void *)xmlSchemaFindRedefCompInGraph();
            if (result) {
              break;
            }
          }
        }

        xmlGenericErrorFunc v10 = (void *)*v10;
        if (!v10)
        {
          uint64_t result = 0LL;
          *(_DWORD *)(a1 + 4) ^= 1u;
          return result;
        }
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

void *xmlSchemaGetType(uint64_t a1, const xmlChar *a2, xmlChar *str1)
{
  if (!a2) {
    return 0LL;
  }
  if (str1 && xmlStrEqual(str1, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
  {
    uint64_t result = xmlSchemaGetPredefinedType(a2, str1);
    if (!a1 || result) {
      return result;
    }
  }

  else if (!a1)
  {
    return 0LL;
  }

  if (xmlStrEqual(str1, *(const xmlChar **)(a1 + 8)))
  {
    uint64_t result = xmlHashLookup(*(xmlHashTablePtr *)(a1 + 56), a2);
    if (result) {
      return result;
    }
  }

  if (xmlHashSize(*(xmlHashTablePtr *)(a1 + 96)) < 2) {
    return 0LL;
  }
  if (str1) {
    uint64_t v7 = str1;
  }
  else {
    uint64_t v7 = (const xmlChar *)"##";
  }
  uint64_t result = xmlHashLookup(*(xmlHashTablePtr *)(a1 + 96), v7);
  if (result) {
    return xmlHashLookup(*(xmlHashTablePtr *)(result[10] + 56LL), a2);
  }
  return result;
}

void xmlSchemaPResCompAttrErr( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, xmlChar *a5, const xmlChar *a6, int a7, uint64_t a8)
{
  int v15 = 0LL;
  int v16 = 0LL;
  xmlSchemaFormatItemForReport(&v16, a2, a3);
  if (!a8) {
    xmlSchemaItemTypeToStr(a7);
  }
  char v14 = (char)v16;
  xmlSchemaFormatQName(&v15, a6, a5);
  xmlSchemaPErrExt(a1, a3, 3004, "%s, attribute '%s': The QName value '%s' does not resolve to a(n) %s.\n", v14);
  if (v16)
  {
    xmlFree(v16);
    int v16 = 0LL;
  }

  if (v15) {
    xmlFree(v15);
  }
}

void *xmlSchemaGetElem(uint64_t a1, const xmlChar *a2, xmlChar *str1)
{
  uint64_t result = 0LL;
  if (a1)
  {
    if (a2)
    {
      if (!xmlStrEqual(str1, *(const xmlChar **)(a1 + 8))
        || (uint64_t result = xmlHashLookup(*(xmlHashTablePtr *)(a1 + 80), a2)) == 0LL)
      {
        if (xmlHashSize(*(xmlHashTablePtr *)(a1 + 96)) < 2)
        {
          return 0LL;
        }

        else
        {
          if (str1) {
            uint64_t v7 = str1;
          }
          else {
            uint64_t v7 = (const xmlChar *)"##";
          }
          uint64_t result = xmlHashLookup(*(xmlHashTablePtr *)(a1 + 96), v7);
          if (result) {
            return xmlHashLookup(*(xmlHashTablePtr *)(result[10] + 80LL), a2);
          }
        }
      }
    }
  }

  return result;
}

void *xmlSchemaGetNamedComponent(uint64_t a1, int a2, const xmlChar *a3, xmlChar *str1)
{
  if (a2 == 14) {
    return xmlSchemaGetElem(a1, a3, str1);
  }
  if (a2 != 17)
  {
    xmlGenericErrorFunc v9 = *__xmlGenericError();
    xmlGenericErrorFunc v10 = __xmlGenericErrorContext();
    v9( *v10,  "Unimplemented block at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemas.c",  5113);
    return 0LL;
  }

  uint64_t result = 0LL;
  if (!a1) {
    return result;
  }
  if (!a3) {
    return result;
  }
  if (xmlStrEqual(str1, *(const xmlChar **)(a1 + 8)))
  {
    uint64_t result = xmlHashLookup(*(xmlHashTablePtr *)(a1 + 112), a3);
    if (result) {
      return result;
    }
  }

  if (xmlHashSize(*(xmlHashTablePtr *)(a1 + 96)) < 2) {
    return 0LL;
  }
  if (str1) {
    uint64_t v8 = str1;
  }
  else {
    uint64_t v8 = (const xmlChar *)"##";
  }
  uint64_t result = xmlHashLookup(*(xmlHashTablePtr *)(a1 + 96), v8);
  if (result) {
    return xmlHashLookup(*(xmlHashTablePtr *)(result[10] + 112LL), a3);
  }
  return result;
}

void *xmlSchemaGetAttributeDecl(uint64_t a1, const xmlChar *a2, xmlChar *str1)
{
  uint64_t result = 0LL;
  if (a1)
  {
    if (a2)
    {
      if (!xmlStrEqual(str1, *(const xmlChar **)(a1 + 8))
        || (uint64_t result = xmlHashLookup(*(xmlHashTablePtr *)(a1 + 64), a2)) == 0LL)
      {
        if (xmlHashSize(*(xmlHashTablePtr *)(a1 + 96)) < 2)
        {
          return 0LL;
        }

        else
        {
          if (str1) {
            uint64_t v7 = str1;
          }
          else {
            uint64_t v7 = (const xmlChar *)"##";
          }
          uint64_t result = xmlHashLookup(*(xmlHashTablePtr *)(a1 + 96), v7);
          if (result) {
            return xmlHashLookup(*(xmlHashTablePtr *)(result[10] + 64LL), a2);
          }
        }
      }
    }
  }

  return result;
}

uint64_t xmlSchemaCheckTypeDefCircularInternal(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (a3 && *a3 != 1)
  {
    if (a2 == a3)
    {
      uint64_t ComponentNode = xmlSchemaGetComponentNode(a3);
      uint64_t v7 = 3009LL;
      xmlSchemaPCustomErrExt(a1, 3009, a3, ComponentNode, (const xmlChar *)"The definition is circular");
      return v7;
    }

    int v5 = a3[22];
    if ((v5 & 0x10000) == 0)
    {
      a3[22] = v5 | 0x10000;
      uint64_t result = xmlSchemaCheckTypeDefCircularInternal(a1);
      a3[22] ^= 0x10000u;
      return result;
    }
  }

  return 0LL;
}

uint64_t xmlSchemaGetCircModelGrDefRef(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = a2; i; uint64_t i = *(void *)(i + 16))
  {
    uint64_t v4 = *(void *)(i + 24);
    if (v4)
    {
      if ((*(_DWORD *)v4 - 6) >= 3)
      {
        if (*(_DWORD *)v4 == 17)
        {
          if (v4 == a1) {
            return i;
          }
          int v6 = *(_DWORD *)(v4 + 56);
          if ((v6 & 1) == 0)
          {
            uint64_t v7 = *(void *)(v4 + 24);
            if (v7)
            {
              *(_DWORD *)(v4 + 56) = v6 | 1;
              uint64_t CircModelGrDefRef = xmlSchemaGetCircModelGrDefRef(a1, *(void *)(v7 + 24));
              *(_DWORD *)(v4 + 56) ^= 1u;
              if (CircModelGrDefRef) {
                return CircModelGrDefRef;
              }
            }
          }
        }
      }

      else
      {
        uint64_t CircModelGrDefRef = xmlSchemaGetCircModelGrDefRef(a1, *(void *)(v4 + 24));
        if (CircModelGrDefRef) {
          return CircModelGrDefRef;
        }
      }
    }
  }

  return i;
}

uint64_t xmlSchemaCheckAttrGroupCircularRecur(uint64_t a1, uint64_t *a2)
{
  int v2 = *((_DWORD *)a2 + 2);
  if (v2 >= 1)
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = *a2;
    do
    {
      uint64_t result = *(void *)(v6 + 8 * v5);
      if (*(_DWORD *)result == 2000 && *(_DWORD *)(result + 16) == 16)
      {
        uint64_t v8 = *(void *)(result + 8);
        if (v8)
        {
          if (v8 == a1) {
            return result;
          }
          int v9 = *(_DWORD *)(v8 + 72);
          if ((v9 & 4) == 0 && (v9 & 0x10) != 0 && *(void *)(v8 + 112))
          {
            *(_DWORD *)(v8 + 72) = v9 | 4;
            uint64_t result = xmlSchemaCheckAttrGroupCircularRecur(a1);
            *(_DWORD *)(v8 + 72) ^= 4u;
            if (result) {
              return result;
            }
            uint64_t v6 = *a2;
            int v2 = *((_DWORD *)a2 + 2);
          }
        }
      }

      ++v5;
    }

    while (v5 < v2);
  }

  return 0LL;
}

uint64_t xmlSchemaExpandAttributeGroupRefs(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a1;
  BOOL v9 = *a3 != 0;
  if (a5) {
    *(_DWORD *)(a5 + 8) = 0;
  }
  int v10 = *(_DWORD *)(a4 + 8);
  if (v10 < 1)
  {
LABEL_103:
    if (!a5) {
      return 0LL;
    }
    uint64_t result = 0LL;
    if (v10)
    {
      uint64_t v55 = *(unsigned int *)(a5 + 8);
      if ((int)v55 >= 1)
      {
        while (1)
        {
          uint64_t v56 = *(unsigned int *)(a4 + 8);
          if ((int)v56 >= 1)
          {
            uint64_t v57 = *(void **)(*(void *)a5 + 8LL * (v55 - 1));
            uint64_t v58 = *(char **)a4;
            uint64_t v59 = (xmlChar *)v57[2];
            while (1)
            {
              uint64_t v60 = *(void *)(*(void *)v58 + 24LL);
              if (v59 == *(xmlChar **)(v60 + 16))
              {
                uint64_t v61 = (const xmlChar *)v57[3];
                if (v61 == *(const xmlChar **)(v60 + 112)) {
                  break;
                }
              }

              v58 += 8;
              if (!--v56) {
                goto LABEL_115;
              }
            }

            uint64_t v67 = 0LL;
            uint64_t v62 = v57[1];
            uint64_t v63 = xmlSchemaFormatQName(&v67, v61, v59);
            xmlSchemaCustomWarning( (_DWORD *)v8,  3086,  v62,  (const xmlChar *)"Skipping pointless attribute use prohibition '%s', since a corresponding attribute use ex ists already in the type definition",  v63,  0LL,  0LL);
            if (v67) {
              xmlFree(v67);
            }
            uint64_t result = xmlSchemaItemListRemove(a5, (int)v55 - 1);
            if ((_DWORD)result == -1) {
              break;
            }
          }

uint64_t xmlSchemaItemListRemove(uint64_t a1, int a2)
{
  int v3 = *(void **)a1;
  if (v3 && (uint64_t v4 = *(int *)(a1 + 8), (int)v4 > a2))
  {
    if ((_DWORD)v4 == 1)
    {
      xmlFree(v3);
      uint64_t result = 0LL;
      *(void *)a1 = 0LL;
      *(void *)(a1 + 8) = 0LL;
    }

    else
    {
      uint64_t v6 = v4 - 1;
      if ((_DWORD)v6 == a2)
      {
        uint64_t result = 0LL;
        *(_DWORD *)(a1 + 8) = a2;
      }

      else
      {
        if ((int)v6 > a2)
        {
          uint64_t v7 = a2;
          do
          {
            *(void *)(*(void *)a1 + 8 * v7) = *(void *)(*(void *)a1 + 8 * v7 + 8);
            ++v7;
          }

          while (v6 != v7);
        }

        uint64_t result = 0LL;
        *(_DWORD *)(a1 + 8) = v6;
      }
    }
  }

  else
  {
    __xmlSimpleError(16, 2, 0, 0LL, (uint64_t)"Internal error: xmlSchemaItemListRemove, index error.\n");
    return 0xFFFFFFFFLL;
  }

  return result;
}

uint64_t xmlSchemaCloneWildcardNsConstraints(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a2 && a3)
  {
    *(_DWORD *)(a2 + 4xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = *(_DWORD *)(a3 + 44);
    uint64_t v7 = *(void **)(a3 + 48);
    if (v7)
    {
      uint64_t v8 = 0LL;
      do
      {
        BOOL v9 = xmlSchemaNewWildcardNsConstraint(a1);
        if (!v9) {
          return 0xFFFFFFFFLL;
        }
        v9[1] = v7[1];
        if (v8) {
          int v10 = v8;
        }
        else {
          int v10 = (void *)(a2 + 48);
        }
        void *v10 = v9;
        uint64_t v7 = (void *)*v7;
        uint64_t v8 = v9;
      }

      while (v7);
    }

    int v11 = *(void **)(a2 + 56);
    if (v11)
    {
      do
      {
        uint64_t v12 = (void *)*v11;
        xmlFree(v11);
        int v11 = v12;
      }

      while (v12);
    }

    if (*(void *)(a3 + 56))
    {
      uint64_t v13 = xmlSchemaNewWildcardNsConstraint(a1);
      *(void *)(a2 + 56) = v13;
      if (v13)
      {
        uint64_t v14 = v13;
        uint64_t result = 0LL;
        v14[1] = *(void *)(*(void *)(a3 + 56) + 8LL);
        return result;
      }

      return 0xFFFFFFFFLL;
    }

    uint64_t result = 0LL;
    *(void *)(a2 + 56) = 0LL;
  }

  return result;
}

uint64_t xmlSchemaCheckUnionTypeDefCircularRecur(uint64_t a1, _DWORD *a2, void *a3)
{
  if (a3)
  {
    int v3 = a3;
    do
    {
      uint64_t v6 = v3[1];
      if (v6)
      {
        while (*(_DWORD *)v6 != 1)
        {
          if ((_DWORD *)v6 == a2)
          {
            uint64_t v11 = 3003LL;
            xmlSchemaPCustomErrExt(a1, 3003, a2, 0LL, (const xmlChar *)"The union type definition is circular");
            return v11;
          }

          int v7 = *(_DWORD *)(v6 + 88);
          if ((v7 & 0x10080) == 0x80)
          {
            *(_DWORD *)(v6 + 88) = v7 | 0x10000;
            uint64_t v8 = v6;
            do
            {
              if (*(_DWORD *)v8 != 4) {
                break;
              }
              uint64_t v9 = *(void *)(v8 + 168);
              if (v9) {
                goto LABEL_12;
              }
              uint64_t v8 = *(void *)(v8 + 112);
            }

            while (v8);
            uint64_t v9 = 0LL;
LABEL_12:
            uint64_t v10 = xmlSchemaCheckUnionTypeDefCircularRecur(a1, a2, v9);
            *(_DWORD *)(v6 + 88) ^= 0x10000u;
            if ((_DWORD)v10) {
              return v10;
            }
          }

          uint64_t v6 = *(void *)(v6 + 112);
          if (!v6) {
            break;
          }
        }
      }

      int v3 = (void *)*v3;
    }

    while (v3);
  }

  return 0LL;
}

uint64_t xmlSchemaTypeFixup(uint64_t typeDecl, xmlSchemaParserCtxtPtr ctxt)
{
  if (typeDecl)
  {
    if (*(_DWORD *)ctxt != 1)
    {
      xmlSchemaInternalErr2( ctxt,  (const xmlChar *)"xmlSchemaTypeFixup",  (const xmlChar *)"this function needs a parser context",  0LL);
      return 0xFFFFFFFFLL;
    }

    int v2 = *(_DWORD *)typeDecl;
    if (*(_DWORD *)typeDecl != 1 && (*(_BYTE *)(typeDecl + 90) & 0x40) == 0)
    {
      if (v2 == 4) {
        return xmlSchemaFixupSimpleTypeStageTwo(ctxt, (xmlSchemaTypePtr)typeDecl);
      }
      if (v2 == 5) {
        return xmlSchemaFixupComplexType((uint64_t)ctxt, typeDecl);
      }
    }

    return 0LL;
  }

  return typeDecl;
}

uint64_t xmlSchemaCheckFacetValues(xmlSchemaTypePtr typeDecl, _DWORD *ctxt, uint64_t a3, const xmlChar *a4)
{
  xmlSchemaFacetPtr facets = typeDecl->facets;
  if (!facets) {
    return 0LL;
  }
  int v7 = ctxt[9];
  if (!*((void *)ctxt + 22))
  {
    xmlSchemaValidCtxtPtr v9 = xmlSchemaNewValidCtxt(0LL);
    *((void *)ctxt + 22) = v9;
    if (!v9)
    {
      xmlSchemaPErr( (uint64_t)ctxt,  0LL,  3069,  "Internal error: xmlSchemaCreateVCtxtOnPCtxt, failed to create a temp. validation context.\n",  0LL,  0LL);
      return 0xFFFFFFFFLL;
    }

    uint64_t v11 = *((void *)ctxt + 2);
    uint64_t v10 = *((void *)ctxt + 3);
    uint64_t v12 = *((void *)ctxt + 1);
    *((void *)v9 + 2) = v11;
    *((void *)v9 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = v10;
    uint64_t v13 = (void *)((char *)v9 + 16);
    uint64_t v14 = (void *)*((void *)v9 + 20);
    if (v14)
    {
      uint64_t v15 = (void *)*((void *)v9 + 20);
      do
      {
        v15[2] = v11;
        _OWORD v15[3] = v10;
        v15[1] = v12;
        uint64_t v16 = (void *)v15[22];
        if (!v16) {
          break;
        }
        v16[2] = v11;
        _OWORD v16[3] = v10;
        v16[1] = v12;
        uint64_t v15 = (void *)v16[20];
      }

      while (v15);
      uint64_t v17 = *((void *)ctxt + 1);
      uint64_t v18 = *((void *)ctxt + 5);
      *((void *)v9 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v18;
      void *v13 = 0LL;
      *((void *)v9 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0LL;
      *((void *)v9 + 1) = v17;
      do
      {
        v14[5] = v18;
        v14[1] = v17;
        uint64_t v19 = (void *)v14[22];
        if (!v19) {
          break;
        }
        v19[3] = 0LL;
        v19[4] = v18;
        v19[1] = v17;
        v19[2] = 0LL;
        uint64_t v14 = (void *)v19[20];
      }

      while (v14);
    }

    else
    {
      *((void *)v9 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = *((void *)ctxt + 5);
      void *v13 = 0LL;
      *((void *)v9 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0LL;
      *((void *)v9 + 1) = v12;
    }
  }

  *(void *)(*((void *)ctxt + 22) + 40LL) = *((void *)ctxt + 8);
  while (1)
  {
    uint64_t result = xmlSchemaCheckFacet(facets, typeDecl, (xmlSchemaParserCtxtPtr)ctxt, a4);
    if ((_DWORD)result == -1) {
      break;
    }
    xmlSchemaFacetPtr facets = facets->next;
    if (!facets)
    {
      *(void *)(*((void *)ctxt + 22) + 40LL) = 0LL;
      if (v7 == ctxt[9]) {
        return 0LL;
      }
      return ctxt[8];
    }
  }

  return result;
}

uint64_t xmlSchemaDeriveAndValidateFacets(_DWORD *a1, uint64_t a2)
{
  uint64_t v5 = *(void **)(a2 + 176);
  int v3 = (void *)(a2 + 176);
  uint64_t v4 = v5;
  uint64_t v6 = *(v3 - 8);
  if (!v5)
  {
    if (!*(void *)(v6 + 176)) {
      return 0LL;
    }
    uint64_t v8 = 0LL;
    goto LABEL_20;
  }

  int v7 = v4;
  do
  {
    uint64_t v8 = v7;
    int v7 = (void *)*v7;
  }

  while (v7);
  if (!v4)
  {
LABEL_20:
    uint64_t v17 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v11 = 0LL;
    uint64_t v10 = 0LL;
    uint64_t v9 = 0LL;
    goto LABEL_21;
  }

  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  uint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  uint64_t v17 = 0LL;
  do
  {
    switch(*(_DWORD *)v4[1])
    {
      case 0x3E8:
        uint64_t v12 = v4[1];
        break;
      case 0x3E9:
        uint64_t v10 = v4[1];
        break;
      case 0x3EA:
        uint64_t v11 = v4[1];
        break;
      case 0x3EB:
        uint64_t v9 = v4[1];
        break;
      case 0x3EC:
        uint64_t v16 = v4[1];
        break;
      case 0x3ED:
        uint64_t v15 = v4[1];
        break;
      case 0x3F1:
        uint64_t v17 = v4[1];
        break;
      case 0x3F2:
        uint64_t v14 = v4[1];
        break;
      case 0x3F3:
        uint64_t v13 = v4[1];
        break;
      default:
        break;
    }

    uint64_t v4 = (void *)*v4;
  }

  while (v4);
LABEL_21:
  uint64_t v83 = v14;
  uint64_t v84 = v11;
  uint64_t v74 = v15;
  int v75 = v3;
  uint64_t v76 = v16;
  uint64_t v18 = *(void **)(v6 + 176);
  if (v18)
  {
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
    uint64_t v21 = 0LL;
    uint64_t v22 = 0LL;
    uint64_t v85 = 0LL;
    uint64_t v86 = 0LL;
    uint64_t v23 = 0LL;
    uint64_t v24 = 0LL;
    uint64_t v25 = 0LL;
    do
    {
      switch(*(_DWORD *)v18[1])
      {
        case 0x3E8:
          uint64_t v22 = v18[1];
          break;
        case 0x3E9:
          uint64_t v20 = v18[1];
          break;
        case 0x3EA:
          uint64_t v21 = v18[1];
          break;
        case 0x3EB:
          uint64_t v19 = v18[1];
          break;
        case 0x3EC:
          uint64_t v25 = v18[1];
          break;
        case 0x3ED:
          uint64_t v24 = v18[1];
          break;
        case 0x3F1:
          uint64_t v85 = v18[1];
          break;
        case 0x3F2:
          uint64_t v23 = v18[1];
          break;
        case 0x3F3:
          uint64_t v86 = v18[1];
          break;
        default:
          break;
      }

      uint64_t v18 = (void *)*v18;
    }

    while (v18);
  }

  else
  {
    uint64_t v85 = 0LL;
    uint64_t v86 = 0LL;
    uint64_t v25 = 0LL;
    uint64_t v24 = 0LL;
    uint64_t v23 = 0LL;
    uint64_t v22 = 0LL;
    uint64_t v21 = 0LL;
    uint64_t v20 = 0LL;
    uint64_t v19 = 0LL;
  }

  uint64_t v82 = v23;
  uint64_t v80 = v22;
  uint64_t v77 = v24;
  uint64_t v78 = v25;
  uint64_t v73 = *(v3 - 8);
  if (v17 && v13 | v83) {
    xmlSchemaPCustomErrExt( (uint64_t)a1,  1717,  (_DWORD *)v17,  *(void *)(v17 + 40),  (const xmlChar *)"It is an error for both 'length' and either of 'minLength' or 'maxLength' to be specified on the same type definition");
  }
  uint64_t v79 = v20;
  uint64_t v81 = v21;
  if (v84 && v9)
  {
    uint64_t v72 = v19;
    uint64_t v26 = v10;
    uint64_t v27 = *(void *)(v84 + 40);
    xmlSchemaFacetTypeToString(*(_DWORD *)v84);
    xmlSchemaFacetTypeToString(*(_DWORD *)v9);
    uint64_t v28 = v27;
    uint64_t v10 = v26;
    uint64_t v19 = v72;
    xmlSchemaPCustomErrExt( (uint64_t)a1,  1717,  (_DWORD *)v84,  v28,  (const xmlChar *)"It is an error for both '%s' and '%s' to be specified on the same type definition");
  }

  if (v12 && v10)
  {
    uint64_t v29 = *(void *)(v12 + 40);
    xmlSchemaFacetTypeToString(*(_DWORD *)v12);
    xmlSchemaFacetTypeToString(*(_DWORD *)v10);
    xmlSchemaPCustomErrExt( (uint64_t)a1,  1717,  (_DWORD *)v12,  v29,  (const xmlChar *)"It is an error for both '%s' and '%s' to be specified on the same type definition");
  }

  uint64_t v30 = v83;
  if (v17 && v85)
  {
    int v31 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v17 + 56), *(xmlSchemaValPtr *)(v85 + 56));
    if (v31 == -2) {
      goto LABEL_222;
    }
    if (v31)
    {
      xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v17, (int *)v85, 0, 0, 1);
      if (*(_DWORD *)(v85 + 48)) {
        xmlSchemaPCustomErrExt( (uint64_t)a1,  1717,  (_DWORD *)v17,  *(void *)(v17 + 40),  (const xmlChar *)"The base type's facet is 'fixed', thus the value must not differ");
      }
    }
  }

  if (v13 && v86)
  {
    int v32 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v13 + 56), *(xmlSchemaValPtr *)(v86 + 56));
    if (v32 == -2) {
      goto LABEL_222;
    }
    if (v32)
    {
      if (v32 == -1) {
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v13, (int *)v86, 1, 1, 1);
      }
      if (*(_DWORD *)(v86 + 48)) {
        xmlSchemaPCustomErrExt( (uint64_t)a1,  1717,  (_DWORD *)v13,  *(void *)(v13 + 40),  (const xmlChar *)"The base type's facet is 'fixed', thus the value must not differ");
      }
    }
  }

  if (v83 && v82)
  {
    int v33 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v83 + 56), *(xmlSchemaValPtr *)(v82 + 56));
    if (v33 == -2) {
      goto LABEL_222;
    }
    if (v33)
    {
      if (v33 == 1) {
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v83, (int *)v82, -1, 1, 1);
      }
      if (*(_DWORD *)(v82 + 48)) {
        xmlSchemaPCustomErrExt( (uint64_t)a1,  1717,  (_DWORD *)v83,  *(void *)(v83 + 40),  (const xmlChar *)"The base type's facet is 'fixed', thus the value must not differ");
      }
    }
  }

  if (!v17) {
    uint64_t v17 = v85;
  }
  if (v17)
  {
    if (v13) {
      uint64_t v34 = v13;
    }
    else {
      uint64_t v34 = v86;
    }
    if (v34)
    {
      int v35 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v17 + 56), *(xmlSchemaValPtr *)(v34 + 56));
      if (v35 == -2) {
        goto LABEL_222;
      }
      if (v35 == -1) {
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v17, (int *)v34, 1, 1, 0);
      }
    }

    if (!v83) {
      uint64_t v30 = v82;
    }
    if (v30)
    {
      int v36 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v17 + 56), *(xmlSchemaValPtr *)(v30 + 56));
      if (v36 == -2) {
        goto LABEL_222;
      }
      if (v36 == 1) {
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v17, (int *)v30, -1, 1, 0);
      }
    }
  }

  uint64_t v37 = v84;
  if (v84)
  {
    if (v12)
    {
      int v38 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v84 + 56), *(xmlSchemaValPtr *)(v12 + 56));
      if (v38 == -2) {
        goto LABEL_222;
      }
      uint64_t v37 = v84;
      if (v38 == -1) {
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v84, (int *)v12, 1, 1, 0);
      }
    }

    if (v81)
    {
      int v39 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v37 + 56), *(xmlSchemaValPtr *)(v81 + 56));
      if (v39 == -2) {
        goto LABEL_222;
      }
      uint64_t v37 = v84;
      if (v39)
      {
        if (v39 == 1) {
          xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v84, (int *)v81, -1, 1, 1);
        }
        if (*(_DWORD *)(v81 + 48)) {
          xmlSchemaPCustomErrExt( (uint64_t)a1,  1717,  (_DWORD *)v84,  *(void *)(v84 + 40),  (const xmlChar *)"The base type's facet is 'fixed', thus the value must not differ");
        }
      }
    }

    if (v19)
    {
      int v40 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v37 + 56), *(xmlSchemaValPtr *)(v19 + 56));
      if (v40 == -2) {
        goto LABEL_222;
      }
      uint64_t v37 = v84;
      if (v40 != -1) {
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v84, (int *)v19, -1, 0, 1);
      }
    }

    if (v80)
    {
      int v41 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v37 + 56), *(xmlSchemaValPtr *)(v80 + 56));
      if (v41 == -2) {
        goto LABEL_222;
      }
      uint64_t v37 = v84;
      if (v41 == -1) {
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v84, (int *)v80, 1, 1, 1);
      }
    }

    if (v79)
    {
      int v42 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v37 + 56), *(xmlSchemaValPtr *)(v79 + 56));
      if (v42 == -2) {
        goto LABEL_222;
      }
      uint64_t v37 = v84;
      if (v42 != 1) {
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v84, (int *)v79, 1, 0, 1);
      }
    }
  }

  if (v9)
  {
    if (v10)
    {
      int v43 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v9 + 56), *(xmlSchemaValPtr *)(v10 + 56));
      if (v43 == -2) {
        goto LABEL_222;
      }
      if (v43 == -1) {
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v9, (int *)v10, 1, 1, 0);
      }
    }

    if (v19)
    {
      int v44 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v9 + 56), *(xmlSchemaValPtr *)(v19 + 56));
      if (v44 == -2) {
        goto LABEL_222;
      }
      if (v44)
      {
        if (v44 == 1) {
          xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v9, (int *)v19, -1, 1, 1);
        }
        if (*(_DWORD *)(v19 + 48)) {
          xmlSchemaPCustomErrExt( (uint64_t)a1,  1717,  (_DWORD *)v9,  *(void *)(v9 + 40),  (const xmlChar *)"The base type's facet is 'fixed', thus the value must not differ");
        }
      }
    }

    if (v81)
    {
      int v45 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v9 + 56), *(xmlSchemaValPtr *)(v81 + 56));
      if (v45 == -2) {
        goto LABEL_222;
      }
      if (v45 == 1) {
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v9, (int *)v81, -1, 1, 1);
      }
    }

    if (v80)
    {
      int v46 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v9 + 56), *(xmlSchemaValPtr *)(v80 + 56));
      if (v46 == -2) {
        goto LABEL_222;
      }
      if (v46 != 1) {
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v9, (int *)v80, 1, 0, 1);
      }
    }

    uint64_t v37 = v84;
    if (v79)
    {
      int v47 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v9 + 56), *(xmlSchemaValPtr *)(v79 + 56));
      if (v47 == -2) {
        goto LABEL_222;
      }
      uint64_t v37 = v84;
      if (v47 != 1) {
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v9, (int *)v79, 1, 0, 1);
      }
    }
  }

  if (v10)
  {
    if (v37)
    {
      int v48 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v10 + 56), *(xmlSchemaValPtr *)(v37 + 56));
      if (v48 == -2) {
        goto LABEL_222;
      }
      if (v48 != -1) {
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v10, (int *)v84, -1, 0, 0);
      }
    }

    if (v79)
    {
      int v49 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v10 + 56), *(xmlSchemaValPtr *)(v79 + 56));
      if (v49 == -2) {
        goto LABEL_222;
      }
      if (v49)
      {
        if (v49 == -1) {
          xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v10, (int *)v79, 1, 1, 1);
        }
        if (*(_DWORD *)(v79 + 48)) {
          xmlSchemaPCustomErrExt( (uint64_t)a1,  1717,  (_DWORD *)v10,  *(void *)(v10 + 40),  (const xmlChar *)"The base type's facet is 'fixed', thus the value must not differ");
        }
      }
    }

    if (v81)
    {
      int v50 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v10 + 56), *(xmlSchemaValPtr *)(v81 + 56));
      if (v50 == -2) {
        goto LABEL_222;
      }
      if (v50 == 1) {
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v10, (int *)v81, -1, 1, 1);
      }
    }

    if (v80)
    {
      int v51 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v10 + 56), *(xmlSchemaValPtr *)(v80 + 56));
      if (v51 == -2) {
        goto LABEL_222;
      }
      if (v51 == -1) {
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v10, (int *)v80, 1, 1, 1);
      }
    }

    if (v19)
    {
      int v52 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v10 + 56), *(xmlSchemaValPtr *)(v19 + 56));
      if (v52 == -2) {
        goto LABEL_222;
      }
      if (v52 != -1) {
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v10, (int *)v19, -1, 0, 1);
      }
    }
  }

  if (v12)
  {
    if (v9)
    {
      int v53 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v12 + 56), *(xmlSchemaValPtr *)(v9 + 56));
      if (v53 == -2) {
        goto LABEL_222;
      }
      if (v53 != -1) {
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v12, (int *)v9, -1, 0, 0);
      }
    }

    if (v80)
    {
      int v54 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v12 + 56), *(xmlSchemaValPtr *)(v80 + 56));
      if (v54 == -2) {
        goto LABEL_222;
      }
      if (v54)
      {
        if (v54 == -1) {
          xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v12, (int *)v80, 1, 1, 1);
        }
        if (*(_DWORD *)(v80 + 48)) {
          xmlSchemaPCustomErrExt( (uint64_t)a1,  1717,  (_DWORD *)v12,  *(void *)(v12 + 40),  (const xmlChar *)"The base type's facet is 'fixed', thus the value must not differ");
        }
      }
    }

    if (v81)
    {
      int v55 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v12 + 56), *(xmlSchemaValPtr *)(v81 + 56));
      if (v55 == -2) {
        goto LABEL_222;
      }
      if (v55 == 1) {
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v12, (int *)v81, -1, 1, 1);
      }
    }

    if (v79)
    {
      int v56 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v12 + 56), *(xmlSchemaValPtr *)(v79 + 56));
      if (v56 == -2) {
        goto LABEL_222;
      }
      if (v56 != 1) {
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v12, (int *)v79, 1, 0, 1);
      }
    }

    if (v19)
    {
      int v57 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v12 + 56), *(xmlSchemaValPtr *)(v19 + 56));
      if (v57 == -2) {
        goto LABEL_222;
      }
      if (v57 != -1) {
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v12, (int *)v19, -1, 0, 1);
      }
    }
  }

  uint64_t v58 = v76;
  if (v76 && v78)
  {
    int v59 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v76 + 56), *(xmlSchemaValPtr *)(v78 + 56));
    if (v59 == -2) {
      goto LABEL_222;
    }
    uint64_t v58 = v76;
    if (v59)
    {
      if (v59 == 1) {
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v76, (int *)v78, -1, 1, 1);
      }
      if (*(_DWORD *)(v78 + 48)) {
        xmlSchemaPCustomErrExt( (uint64_t)a1,  1717,  (_DWORD *)v76,  *(void *)(v76 + 40),  (const xmlChar *)"The base type's facet is 'fixed', thus the value must not differ");
      }
    }
  }

  uint64_t v60 = v74;
  uint64_t v61 = v75;
  if (v74 && v77)
  {
    int v62 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v74 + 56), *(xmlSchemaValPtr *)(v77 + 56));
    if (v62 == -2) {
      goto LABEL_222;
    }
    uint64_t v61 = v75;
    uint64_t v58 = v76;
    uint64_t v60 = v74;
    if (v62)
    {
      if (v62 == 1) {
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v74, (int *)v77, -1, 1, 1);
      }
      if (*(_DWORD *)(v77 + 48)) {
        xmlSchemaPCustomErrExt( (uint64_t)a1,  1717,  (_DWORD *)v74,  *(void *)(v74 + 40),  (const xmlChar *)"The base type's facet is 'fixed', thus the value must not differ");
      }
    }
  }

  if (!v58) {
    uint64_t v58 = v78;
  }
  if (!v60) {
    uint64_t v60 = v77;
  }
  if (v58 && v60)
  {
    int v63 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v60 + 56), *(xmlSchemaValPtr *)(v58 + 56));
    if (v63 != -2)
    {
      uint64_t v61 = v75;
      if (v63 == 1) {
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v60, (int *)v58, -1, 1, 0);
      }
      goto LABEL_204;
    }

LABEL_222:
    xmlSchemaInternalErr2( a1,  (const xmlChar *)"xmlSchemaDeriveAndValidateFacets",  (const xmlChar *)"an error occurred",  0LL);
    return 0xFFFFFFFFLL;
  }

uint64_t xmlSchemaTypeFixupWhitespace(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 88);
  if ((v1 & 0x40) != 0)
  {
LABEL_14:
    int v6 = 0x4000000;
  }

  else
  {
    if ((v1 & 0x80) != 0) {
      return 0LL;
    }
    int v2 = *(void **)(a1 + 176);
    if (v2)
    {
      while (1)
      {
        int v3 = (_DWORD *)v2[1];
        if (*v3 == 1008) {
          break;
        }
        int v2 = (void *)*v2;
        if (!v2) {
          goto LABEL_6;
        }
      }

      int v9 = v3[13] - 1;
      int v6 = dword_181A37A74[v9];
      goto LABEL_15;
    }

uint64_t xmlSchemaTypeFixupOptimFacets(uint64_t result)
{
  int v1 = *(int **)(result + 120);
  unsigned int v2 = *(_DWORD *)(*(void *)(result + 112) + 88LL);
  int v3 = (v2 >> 27) & 1;
  unsigned int v4 = (v2 >> 21) & ((16 * v2) >> 31);
  for (unsigned int i = (v2 >> 28) & ((16 * v2) >> 31); v1; v1 = (int *)*((void *)v1 + 1))
  {
    int v6 = *v1;
    if (*v1 == 1006) {
      int v7 = 1;
    }
    else {
      int v7 = i;
    }
    if (v6 == 1007) {
      int v8 = 1;
    }
    else {
      int v8 = v4;
    }
    if (v6 == 1007) {
      int v7 = 1;
    }
    if (v6 != 1008)
    {
      int v3 = 1;
      unsigned int v4 = v8;
      unsigned int i = v7;
    }
  }

  if (i) {
    *(_DWORD *)(result + 88) |= 0x10000000u;
  }
  if (v4)
  {
    int v10 = *(_DWORD *)(result + 88);
    result += 88LL;
    int v9 = v10;
    *(_DWORD *)uint64_t result = v10 | 0x200000;
    if (v3) {
LABEL_17:
    }
      *(_DWORD *)uint64_t result = v9 | 0x8200000;
  }

  else if (v3)
  {
    uint64_t v11 = result + 88;
    int v9 = *(_DWORD *)(result + 88);
    *(_DWORD *)(result + 88) = v9 | 0x8000000;
    if ((v9 & 0x100) != 0)
    {
      while (1)
      {
        int v12 = *(_DWORD *)(result + 160);
        if (v12 == 46) {
          break;
        }
        if ((*(_BYTE *)(result + 89) & 0x40) != 0)
        {
          if (v12 == 1) {
            return result;
          }
          uint64_t result = v11;
          goto LABEL_17;
        }

        uint64_t result = *(void *)(result + 112);
      }
    }
  }

  return result;
}

void xmlSchemaPIllegalFacetAtomicErr(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v10 = 0LL;
  uint64_t v11 = 0LL;
  xmlSchemaFormatItemForReport(&v11, a2, *(void *)(a2 + 72));
  uint64_t v8 = *(void *)(a2 + 72);
  char v9 = (char)v11;
  xmlSchemaFacetTypeToString(*a4);
  xmlSchemaFormatItemForReport(&v10, a3, 0LL);
  xmlSchemaPErrExt(a1, v8, 3013, "%s: The facet '%s' is not allowed on types derived from the type %s.\n", v9);
  if (v11)
  {
    xmlFree(v11);
    uint64_t v11 = 0LL;
  }

  if (v10) {
    xmlFree(v10);
  }
}

void xmlSchemaPIllegalFacetListUnionErr(uint64_t a1, int a2, uint64_t a3, int *a4)
{
  uint64_t v11 = 0LL;
  xmlSchemaFormatItemForReport(&v11, a3, *(void *)(a3 + 72));
  uint64_t v8 = *(void *)(a3 + 72);
  char v9 = v11;
  int v10 = (xmlChar *)xmlSchemaFacetTypeToString(*a4);
  xmlSchemaPErr(a1, v8, a2, "%s: The facet '%s' is not allowed.\n", v9, v10);
  if (v11) {
    xmlFree(v11);
  }
}

uint64_t xmlSchemaCheckCOSSTDerivedOK(xmlSchemaParserCtxt *a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a2 == a3) {
    return 0LL;
  }
  if (*(_DWORD *)a2 == 1
    || (*(_BYTE *)(a2 + 90) & 0x40) != 0
    || (uint64_t result = xmlSchemaTypeFixup((xmlSchemaTypePtr)a2, a1), (_DWORD)result != -1))
  {
    if (*(_DWORD *)a3 == 1
      || (*(_BYTE *)(a3 + 90) & 0x40) != 0
      || (uint64_t result = xmlSchemaTypeFixup((xmlSchemaTypePtr)a3, a1), (_DWORD)result != -1))
    {
      if ((a4 & 1) != 0) {
        return 3031LL;
      }
      uint64_t v9 = *(void *)(a2 + 112);
      if (v9 && (*(_BYTE *)(v9 + 89) & 4) != 0)
      {
        return 3031LL;
      }

      else
      {
        if (v9 == a3) {
          return 0LL;
        }
        if (*(_DWORD *)v9 == 1 && *(_DWORD *)(v9 + 160) == 45
          || (uint64_t result = xmlSchemaCheckCOSSTDerivedOK(a1), (_DWORD)result))
        {
          if (*(_DWORD *)a3 == 1 && *(_DWORD *)(a3 + 160) == 46 && (*(_BYTE *)(a2 + 88) & 0xC0) != 0) {
            return 0LL;
          }
          if ((*(_BYTE *)(a3 + 88) & 0x80) != 0)
          {
            int v10 = (uint64_t **)(a3 + 168);
            while (1)
            {
              int v10 = (uint64_t **)*v10;
              if (!v10) {
                break;
              }
              uint64_t v11 = v10[1];
              if (*(_DWORD *)v11 == 1
                || (*((_BYTE *)v11 + 90) & 0x40) != 0
                || (uint64_t result = xmlSchemaTypeFixup((xmlSchemaTypePtr)v10[1], a1), (_DWORD)result != -1))
              {
                int v12 = xmlSchemaCheckCOSSTDerivedOK(a1);
                uint64_t result = 0LL;
                if (v12) {
                  continue;
                }
              }

              return result;
            }
          }

          return 3032LL;
        }
      }
    }
  }

  return result;
}

void xmlSchemaDeriveFacetErr(uint64_t a1, int *a2, int *a3, int a4, int a5, int a6)
{
  int v12 = xmlStrdup((const xmlChar *)"'");
  uint64_t v13 = xmlSchemaFacetTypeToString(*a2);
  uint64_t v14 = xmlStrcat(v12, (const xmlChar *)v13);
  uint64_t v15 = xmlStrcat(v14, (const xmlChar *)"' has to be");
  if (a4 == 1)
  {
    uint64_t v16 = " greater than";
  }

  else
  {
    if (!a4) {
      uint64_t v15 = xmlStrcat(v15, (const xmlChar *)" equal to");
    }
    uint64_t v16 = " less than";
  }

  uint64_t v17 = xmlStrcat(v15, (const xmlChar *)v16);
  if (a5) {
    uint64_t v17 = xmlStrcat(v17, (const xmlChar *)" or equal to");
  }
  uint64_t v18 = xmlStrcat(v17, (const xmlChar *)" '");
  uint64_t v19 = xmlSchemaFacetTypeToString(*a3);
  uint64_t v20 = xmlStrcat(v18, (const xmlChar *)v19);
  if (a6) {
    uint64_t v21 = "' of the base type";
  }
  else {
    uint64_t v21 = "'";
  }
  uint64_t v22 = xmlStrcat(v20, (const xmlChar *)v21);
  xmlSchemaPCustomErrExt(a1, 1717, a2, 0LL, v22);
  if (v22) {
    xmlFree(v22);
  }
}

uint64_t xmlSchemaIsDerivedFromBuiltInType(uint64_t result)
{
  for (; result; uint64_t result = *(void *)(result + 56))
  {
    if (*(_DWORD *)result == 5) {
      return 0LL;
    }
    int v1 = *(_DWORD *)(result + 160);
    if (v1 == 45) {
      return 0LL;
    }
    if (*(_DWORD *)result == 1)
    {
      if (v1 == 23) {
        return 1LL;
      }
      if (v1 == 46) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t xmlSchemaAreValuesEqual(xmlSchemaValPtr val, xmlSchemaVal *a2)
{
  while (1)
  {
    if (!val) {
      return 0LL;
    }
    xmlSchemaValType ValType = xmlSchemaGetValType(val);
    xmlSchemaTypePtr BuiltInType = xmlSchemaGetBuiltInType(ValType);
    xmlSchemaValType v6 = xmlSchemaGetValType(a2);
    for (xmlSchemaTypePtr i = xmlSchemaGetBuiltInType(v6); BuiltInType; BuiltInType = BuiltInType->baseType)
    {
      if (BuiltInType->builtInType == 46) {
        break;
      }
      if ((BuiltInType->flags & 0x4000) != 0) {
        break;
      }
    }

    for (; i; xmlSchemaTypePtr i = i->baseType)
    {
      if (i->builtInType == 46) {
        break;
      }
      if ((i->flags & 0x4000) != 0) {
        break;
      }
    }

    if (BuiltInType != i) {
      return 0LL;
    }
    int v8 = BuiltInType->builtInType;
    if (v8 != 1 && (v8 != 46 || BuiltInType->type != XML_SCHEMA_TYPE_BASIC)) {
      break;
    }
    AsString = xmlSchemaValueGetAsString(val);
    int v12 = xmlSchemaValueGetAsString(a2);
    uint64_t result = xmlStrEqual(AsString, v12);
    if (!(_DWORD)result) {
      return result;
    }
LABEL_19:
    xmlSchemaValPtr val = xmlSchemaValueGetNext(val);
    xmlSchemaValPtr Next = xmlSchemaValueGetNext(a2);
    a2 = Next;
    if (!val) {
      return Next == 0LL;
    }
    if (!Next) {
      return 0LL;
    }
  }

  int v10 = xmlSchemaCompareValuesWhtsp(val, XML_SCHEMA_WHITESPACE_PRESERVE, a2, XML_SCHEMA_WHITESPACE_PRESERVE);
  if (!v10) {
    goto LABEL_19;
  }
  if (v10 == -2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0LL;
  }
}

uint64_t xmlSchemaCheckDerivationOKRestriction2to4( xmlSchemaParserCtxt *a1, int a2, int *a3, int *a4, int *a5, uint64_t **a6, uint64_t a7, uint64_t a8)
{
  if (a5 && a5[2] >= 1)
  {
    uint64_t v13 = a1;
    uint64_t v14 = 0LL;
    if (a2) {
      uint64_t v15 = "redefined";
    }
    else {
      uint64_t v15 = "base";
    }
    do
    {
      uint64_t v16 = *(void *)(*(void *)a5 + 8 * v14);
      if (a6 && (uint64_t v17 = *((unsigned int *)a6 + 2), (int)v17 >= 1))
      {
        uint64_t v18 = *a6;
        uint64_t v19 = *(void **)(v16 + 24);
        while (1)
        {
          uint64_t v20 = *v18;
          uint64_t v21 = *(void **)(*v18 + 24);
          if (v19[2] == v21[2] && v19[14] == v21[14]) {
            break;
          }
          ++v18;
          if (!--v17) {
            goto LABEL_12;
          }
        }

        if (*(_DWORD *)(v16 + 48) != 2 || *(_DWORD *)(v20 + 48) != 1)
        {
          int v64 = 0LL;
          int v65 = 0LL;
          int v63 = 0LL;
          uint64_t ComponentNode = xmlSchemaGetComponentNode(a3);
          ComponentDesignatiouint64_t n = xmlSchemaGetComponentDesignation( (xmlChar **)&v65,  *(int **)(*(void *)(v16 + 24) + 96LL));
          uint64_t v27 = xmlSchemaGetComponentDesignation(&v64, *(int **)(*(void *)(v20 + 24) + 96LL));
          uint64_t v28 = xmlSchemaGetComponentDesignation(&v63, a4);
          xmlSchemaPAttrUseErr4( v13,  1789,  ComponentNode,  (uint64_t)a3,  v16,  (const xmlChar *)"The attribute declaration's %s is not validly derived from the corresponding %s of the attr ibute declaration in the %s %s",  ComponentDesignation,  v27,  (xmlChar *)v15,  (uint64_t)v28);
          if (v65) {
            xmlFree(v65);
          }
          if (v64) {
            xmlFree(v64);
          }
          uint64_t v13 = a1;
          uint64_t v24 = v63;
          if (!v63) {
            goto LABEL_17;
          }
LABEL_16:
          xmlFree(v24);
          goto LABEL_17;
        }

        int v65 = 0LL;
        uint64_t v25 = xmlSchemaGetComponentNode(a3);
        uint64_t v26 = xmlSchemaGetComponentDesignation((xmlChar **)&v65, a4);
        xmlSchemaPAttrUseErr4( v13,  1788,  v25,  (uint64_t)a3,  v16,  (const xmlChar *)"The 'optional' attribute use is inconsistent with the corresponding 'required' attribute use of the %s %s",  (const xmlChar *)v15,  v26,  0LL,  0LL);
      }

      else
      {
LABEL_12:
        int v65 = 0LL;
        uint64_t v22 = xmlSchemaGetComponentNode(a3);
        uint64_t v23 = xmlSchemaGetComponentDesignation((xmlChar **)&v65, a4);
        xmlSchemaPAttrUseErr4( v13,  1790,  v22,  (uint64_t)a3,  v16,  (const xmlChar *)"Neither a matching attribute use, nor a matching wildcard exists in the %s %s",  (const xmlChar *)v15,  v23,  0LL,  0LL);
      }

      uint64_t v24 = (xmlChar *)v65;
      if (v65) {
        goto LABEL_16;
      }
LABEL_17:
      ++v14;
    }

    while (v14 < a5[2]);
  }

  if (a6)
  {
    int v29 = *((_DWORD *)a6 + 2);
    if (v29 >= 1)
    {
      uint64_t v30 = 0LL;
      if (a2) {
        int v31 = "redefined";
      }
      else {
        int v31 = "base";
      }
      do
      {
        uint64_t v32 = (*a6)[v30];
        if (*(_DWORD *)(v32 + 48) == 1)
        {
          if (a5 && (uint64_t v33 = a5[2], (int)v33 >= 1))
          {
            uint64_t v34 = *(void *)a5;
            uint64_t v35 = *(void *)(v32 + 24);
            while (1)
            {
              uint64_t v36 = *(void *)(*(void *)v34 + 24LL);
              if (*(void *)(v36 + 16) == *(void *)(v35 + 16) && *(void *)(v36 + 112) == *(void *)(v35 + 112)) {
                break;
              }
              v34 += 8LL;
              if (!--v33) {
                goto LABEL_41;
              }
            }
          }

          else
          {
LABEL_41:
            int v64 = 0LL;
            int v65 = 0LL;
            uint64_t v37 = xmlSchemaGetComponentDesignation((xmlChar **)&v65, (int *)v32);
            int v38 = xmlSchemaGetComponentDesignation(&v64, a4);
            xmlSchemaCustomErr4( a1,  1791,  0LL,  a3,  (const xmlChar *)"A matching attribute use for the 'required' %s of the %s %s is missing",  v37,  (xmlChar *)v31,  v38,  0LL);
            if (v65) {
              xmlFree(v65);
            }
            if (v64) {
              xmlFree(v64);
            }
            int v29 = *((_DWORD *)a6 + 2);
          }
        }

        ++v30;
      }

      while (v30 < v29);
    }
  }

  if (!a7) {
    return 0LL;
  }
  if (!a8)
  {
    int v65 = 0LL;
    if (*a3 == 1)
    {
      if (a3[40] == 45) {
        int v43 = "complex type definition";
      }
      else {
        int v43 = "simple type definition";
      }
    }

    else
    {
      int v43 = xmlSchemaItemTypeToStr(*a3);
    }

    int v39 = a1;
    if (a2) {
      int v50 = "redefined";
    }
    else {
      int v50 = "base";
    }
    if (*a4 == 1)
    {
      if (a4[40] == 45) {
        int v51 = "complex type definition";
      }
      else {
        int v51 = "simple type definition";
      }
    }

    else
    {
      int v51 = (char *)xmlSchemaItemTypeToStr(*a4);
    }

    ComponentQName = xmlSchemaGetComponentQName(&v65, a4);
    xmlSchemaCustomErr4( a1,  1797,  0LL,  a3,  (const xmlChar *)"The %s has an attribute wildcard, but the %s %s '%s' does not have one",  (const xmlChar *)v43,  (xmlChar *)v50,  (xmlChar *)v51,  (uint64_t)ComponentQName);
    goto LABEL_102;
  }

  int v39 = a1;
  if (!*(_DWORD *)(a8 + 44))
  {
    uint64_t v44 = *(void *)(a7 + 56);
    if (!v44 || (uint64_t v45 = *(void *)(a8 + 56)) == 0 || *(void *)(v44 + 8) != *(void *)(v45 + 8))
    {
      int v46 = *(void **)(a7 + 48);
      if (v46)
      {
        if (*(void *)(a8 + 48))
        {
LABEL_66:
          int v47 = (void *)(a8 + 48);
          while (1)
          {
            int v47 = (void *)*v47;
            if (!v47) {
              break;
            }
            if (v46[1] == v47[1])
            {
              int v46 = (void *)*v46;
              if (v46) {
                goto LABEL_66;
              }
              goto LABEL_50;
            }
          }
        }

        else
        {
          uint64_t v52 = *(void *)(a8 + 56);
          if (v52)
          {
            uint64_t v53 = *(void *)(v52 + 8);
            while (v46[1] != v53)
            {
              int v46 = (void *)*v46;
              if (!v46) {
                goto LABEL_50;
              }
            }
          }
        }
      }

      int v65 = 0LL;
      if (a2) {
        int v54 = "redefined";
      }
      else {
        int v54 = "base";
      }
      if (*a4 == 1)
      {
        if (a4[40] == 45) {
          int v55 = "complex type definition";
        }
        else {
          int v55 = "simple type definition";
        }
      }

      else
      {
        int v55 = (char *)xmlSchemaItemTypeToStr(*a4);
      }

      int v56 = xmlSchemaGetComponentQName(&v65, a4);
      xmlSchemaCustomErr4( a1,  1798,  0LL,  a3,  (const xmlChar *)"The attribute wildcard is not a valid subset of the wildcard in the %s %s '%s'",  (const xmlChar *)v54,  (xmlChar *)v55,  v56,  0LL);
      goto LABEL_102;
    }
  }

void xmlSchemaPAttrUseErr4( _DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, const xmlChar *a6, const xmlChar *a7, xmlChar *a8, xmlChar *a9, uint64_t a10)
{
  cur = 0LL;
  uint64_t v21 = 0LL;
  xmlSchemaFormatItemForReport(&cur, a4, 0LL);
  uint64_t v17 = xmlStrcat(cur, (const xmlChar *)", ");
  cur = v17;
  uint64_t v18 = xmlSchemaFormatItemForReport(&v21, a5, 0LL);
  uint64_t v19 = xmlStrcat(v17, v18);
  cur = v19;
  if (v21)
  {
    xmlFree(v21);
    uint64_t v21 = 0LL;
    uint64_t v19 = cur;
  }

  cur = xmlStrcat(v19, (const xmlChar *)": ");
  cur = xmlStrcat(cur, a6);
  cur = xmlStrcat(cur, (const xmlChar *)".\n");
  xmlSchemaErr4Line(a1, 2, a2, a3, 0, (const char *)cur, a7, a8, a9, a10);
  xmlFree(cur);
}

uint64_t xmlSchemaCheckCVCWildcardNamespace(uint64_t a1, xmlChar *str2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 44)) {
    return 0LL;
  }
  unsigned int v4 = *(uint64_t ***)(a1 + 48);
  if (v4)
  {
    while (!xmlStrEqual((const xmlChar *)v4[1], str2))
    {
      unsigned int v4 = (uint64_t **)*v4;
      if (!v4) {
        return 1LL;
      }
    }

    return 0LL;
  }

  if (!str2) {
    return 1LL;
  }
  uint64_t v5 = *(void *)(a1 + 56);
  if (!v5) {
    return 1LL;
  }
  uint64_t result = xmlStrEqual(*(const xmlChar **)(v5 + 8), str2);
  if ((_DWORD)result) {
    return 1LL;
  }
  return result;
}

uint64_t xmlSchemaCheckCTComponent(xmlSchemaParserCtxt *a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD **)(a2 + 112);
  if (v4 && (*v4 == 4 || *v4 == 1 && v4[40] != 45) && (*(_BYTE *)(a2 + 88) & 2) == 0)
  {
    uint64_t v5 = 3076LL;
    xmlSchemaCustomErr4( a1,  3076,  0LL,  (_DWORD *)a2,  (const xmlChar *)"If the base type is a simple type, the derivation method must be 'extension'",  0LL,  0LL,  0LL,  0LL);
    return v5;
  }

  uint64_t v6 = *(void *)(a2 + 216);
  if (!v6 || (uint64_t v7 = *(unsigned int *)(v6 + 8), (int)v7 < 2))
  {
LABEL_35:
    uint64_t v21 = *(int **)(a2 + 112);
    int v22 = *v21;
    if ((*(_BYTE *)(a2 + 88) & 2) == 0)
    {
      if (v22 == 5 || v21[40] == 45)
      {
        if ((*((_BYTE *)v21 + 89) & 4) == 0)
        {
          if (xmlSchemaCheckDerivationOKRestriction2to4( a1,  0,  (int *)a2,  *(int **)(a2 + 112),  *(int **)(a2 + 216),  *((uint64_t ***)v21 + 27),  *(void *)(a2 + 152),  *((void *)v21 + 19)) == -1) {
            return 0xFFFFFFFFLL;
          }
          if (v21[40] != 45)
          {
            uint64_t v5 = 0LL;
            switch(*(_DWORD *)(a2 + 92))
            {
              case 1:
                int v32 = v21[23];
                if ((v32 - 2) >= 2)
                {
                  if (v32 == 1) {
                    return 0LL;
                  }
                }

                else if (xmlSchemaIsParticleEmptiable(*((void *)v21 + 7)))
                {
                  return 0LL;
                }

                uint64_t v33 = "The content type of the base type must be either empty or 'mixed' (or 'elements-only') and an emptiable particle";
                goto LABEL_85;
              case 2:
                return v5;
              case 3:
                if (v21[23] == 3) {
                  return 0LL;
                }
                uint64_t v33 = "If the content type is 'mixed', then the content type of the base type must also be 'mixed'";
                goto LABEL_85;
              case 4:
              case 6:
                int v23 = v21[23];
                if (v23 == 3)
                {
                }

                else if (v23 == 6 || v23 == 4)
                {
                  int v24 = xmlSchemaCheckCOSSTDerivedOK(a1, *(void *)(a2 + 192), *((void *)v21 + 24), 0);
                  if (!v24) {
                    return 0LL;
                  }
                  uint64_t v34 = 0LL;
                  uint64_t v35 = 0LL;
                  if (v24 != -1)
                  {
                    ComponentDesignatiouint64_t n = xmlSchemaGetComponentDesignation(&v35, *(int **)(a2 + 192));
                    uint64_t v26 = xmlSchemaGetComponentDesignation(&v34, *((int **)v21 + 24));
                    xmlSchemaCustomErr4( a1,  1787,  0LL,  (_DWORD *)a2,  (const xmlChar *)"The {content type} %s is not validly derived from the base type's {content type} %s",  ComponentDesignation,  v26,  0LL,  0LL);
                    if (v35) {
                      xmlFree(v35);
                    }
                    if (v34) {
                      xmlFree(v34);
                    }
                    return *((unsigned int *)a1 + 8);
                  }

                  return 0xFFFFFFFFLL;
                }

                uint64_t v33 = "The content type of the base type must be either a simple type or 'mixed' and an emptiable particle";
LABEL_85:
                xmlSchemaPCustomErrExt((uint64_t)a1, 1787, (_DWORD *)a2, 0LL, (const xmlChar *)v33);
                return *((unsigned int *)a1 + 8);
              default:
                uint64_t v33 = "The type is not a valid restriction of its base type";
                goto LABEL_85;
            }
          }

          return 0LL;
        }

        xmlSchemaCustomErr4( a1,  1787,  *(void *)(a2 + 72),  (_DWORD *)a2,  (const xmlChar *)"The 'final' of the base type definition contains 'restriction'",  0LL,  0LL,  0LL,  0LL);
      }

      else
      {
        xmlSchemaCustomErr4( a1,  1787,  *(void *)(a2 + 72),  (_DWORD *)a2,  (const xmlChar *)"The base type must be a complex type",  0LL,  0LL,  0LL,  0LL);
      }

      return *((unsigned int *)a1 + 8);
    }

    if (v22 == 5 || v21[40] == 45)
    {
      if ((*((_BYTE *)v21 + 89) & 2) == 0)
      {
        uint64_t v27 = *(void *)(a2 + 192);
        if (v27 && v27 == *((void *)v21 + 24)) {
          return 0LL;
        }
        int v28 = *(_DWORD *)(a2 + 92);
        if (v28 == 1 && v21[23] == 1) {
          return 0LL;
        }
        if (*(void *)(a2 + 56))
        {
          int v29 = v21[23];
          if (v29 != 1)
          {
            uint64_t v30 = "The content type of both, the type and its base type, must either 'mixed' or 'element-only'";
            if ((v28 & 0xFFFFFFFE) != 2 || v28 != v29) {
              goto LABEL_72;
            }
          }

          return 0LL;
        }

        uint64_t v30 = "The content type must specify a particle";
LABEL_72:
        uint64_t v5 = 3063LL;
        xmlSchemaPCustomErrExt((uint64_t)a1, 3063, (_DWORD *)a2, 0LL, (const xmlChar *)v30);
        return v5;
      }
    }

    else
    {
      if (*(int **)(a2 + 192) != v21)
      {
        uint64_t v30 = "The content type must be the simple base type";
        goto LABEL_72;
      }

      if ((*((_BYTE *)v21 + 89) & 2) == 0) {
        return 0LL;
      }
    }

    uint64_t v30 = "The 'final' of the base type definition contains 'extension'";
    goto LABEL_72;
  }

  int v8 = 0;
  unsigned int v9 = v7 - 2;
  int v10 = v7 - 1;
  while (1)
  {
    uint64_t v11 = *(void *)(*(void *)v6 + 8LL * (v7 - 1));
    if (v7 == 1) {
      break;
    }
    int v12 = *(void **)(v11 + 24);
    uint64_t v13 = *(void *)v6 + 8LL * v9;
    int v14 = v10;
    while (1)
    {
      uint64_t v15 = *(void *)(*(void *)v13 + 24LL);
      if (v12[2] == *(void *)(v15 + 16) && v12[14] == *(void *)(v15 + 112)) {
        break;
      }
      --v14;
      v13 -= 8LL;
      if (v14 <= 0) {
        goto LABEL_16;
      }
    }

    uint64_t v35 = 0LL;
    uint64_t v18 = xmlSchemaGetComponentDesignation(&v35, (int *)v11);
    xmlSchemaCustomErr4(a1, 3087, 0LL, (_DWORD *)a2, (const xmlChar *)"Duplicate %s", v18, 0LL, 0LL, 0LL);
    if (v35) {
      xmlFree(v35);
    }
LABEL_33:
    --v9;
    --v10;
    if (v7-- <= 1) {
      goto LABEL_35;
    }
  }

  int v12 = *(void **)(v11 + 24);
LABEL_16:
  uint64_t v16 = v12[12];
  if (!v16) {
    goto LABEL_33;
  }
  while (1)
  {
    if (*(_DWORD *)v16 == 5) {
      goto LABEL_33;
    }
    int v17 = *(_DWORD *)(v16 + 160);
    if (v17 == 45) {
      goto LABEL_33;
    }
    if (*(_DWORD *)v16 == 1) {
      break;
    }
LABEL_22:
    uint64_t v16 = *(void *)(v16 + 56);
    if (!v16) {
      goto LABEL_33;
    }
  }

  if (v17 != 23)
  {
    if (v17 == 46) {
      goto LABEL_33;
    }
    goto LABEL_22;
  }

  if (!v8) {
    goto LABEL_32;
  }
  uint64_t v35 = 0LL;
  uint64_t v19 = xmlSchemaGetComponentDesignation(&v35, (int *)v11);
  xmlSchemaCustomErr4( a1,  3087,  0LL,  (_DWORD *)a2,  (const xmlChar *)"There must not exist more than one attribute declaration of type 'xs:ID' (or derived from 'xs:ID'). The %s violates this constraint",  v19,  0LL,  0LL,  0LL);
  if (v35) {
    xmlFree(v35);
  }
  if (xmlSchemaItemListRemove(v6, (int)v7 - 1) != -1)
  {
LABEL_32:
    int v8 = 1;
    goto LABEL_33;
  }

  return 0xFFFFFFFFLL;
}

uint64_t xmlSchemaIsParticleEmptiable(uint64_t a1)
{
  if (!a1) {
    return 1LL;
  }
  if (!*(_DWORD *)(a1 + 32)) {
    return 1LL;
  }
  int v1 = *(_DWORD **)(a1 + 24);
  if (!v1) {
    return 1LL;
  }
  return xmlSchemaGetParticleEmptiable(a1);
}

uint64_t xmlSchemaGetParticleEmptiable(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    return 1LL;
  }
  if (!*(_DWORD *)(a1 + 32)) {
    return 1LL;
  }
  uint64_t v2 = *(void *)(v1 + 24);
  if (!v2) {
    return 1LL;
  }
  do
  {
    int v3 = **(_DWORD **)(v2 + 24);
    if (v3 == 14 || v3 == 2) {
      uint64_t result = *(_DWORD *)(v2 + 32) == 0;
    }
    else {
      uint64_t result = xmlSchemaGetParticleEmptiable(v2);
    }
    if (*(_DWORD *)v1 == 7)
    {
      if ((_DWORD)result) {
        return 1LL;
      }
    }

    else if (!(_DWORD)result)
    {
      return result;
    }

    uint64_t v2 = *(void *)(v2 + 16);
  }

  while (v2);
  return *(_DWORD *)v1 != 7;
}

uint64_t xmlSchemaCheckSubstGroupCircular(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = *(void *)(a2 + 152);
  if (!v3) {
    return 0LL;
  }
  if (v3 != a1)
  {
    int v4 = *(_DWORD *)(v3 + 88);
    if ((v4 & 0x200) == 0)
    {
      *(_DWORD *)(v3 + 88) = v4 | 0x200;
      uint64_t result = xmlSchemaCheckSubstGroupCircular();
      *(_DWORD *)(*(void *)(v2 + 152) + 88LL) ^= 0x200u;
      return result;
    }

    return 0LL;
  }

  return v2;
}

uint64_t xmlSchemaCheckCOSDerivedOK(xmlSchemaParserCtxt *a1, uint64_t a2, uint64_t a3, char a4)
{
  if (*(_DWORD *)a2 == 4 || *(_DWORD *)a2 == 1 && *(_DWORD *)(a2 + 160) != 45) {
    return xmlSchemaCheckCOSSTDerivedOK(a1, a2, a3, a4);
  }
  if (a2 == a3 && a3) {
    return 0LL;
  }
  while (((a4 & 2) == 0 || (*(_BYTE *)(a2 + 88) & 2) == 0) && ((a4 & 1) == 0 || (*(_BYTE *)(a2 + 88) & 4) == 0))
  {
    a2 = *(void *)(a2 + 112);
    if (a2 == a3) {
      return 0LL;
    }
    if (*(_DWORD *)a2 != 5)
    {
      if (*(_DWORD *)a2 == 1)
      {
        if (*(_DWORD *)(a2 + 160) != 45) {
          return xmlSchemaCheckCOSSTDerivedOK(a1, a2, a3, a4);
        }
        return 1LL;
      }

      if (*(_DWORD *)(a2 + 160) != 45) {
        return xmlSchemaCheckCOSSTDerivedOK(a1, a2, a3, a4);
      }
    }
  }

  return 1LL;
}

uint64_t xmlSchemaBuildAContentModel(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    int v4 = *(_DWORD **)(a2 + 24);
    if (v4)
    {
      uint64_t v5 = 1LL;
      switch(*v4)
      {
        case 1:
          if (v4[40] == 45) {
            uint64_t v6 = "complex type definition";
          }
          else {
            uint64_t v6 = "simple type definition";
          }
          goto LABEL_15;
        case 2:
          int v8 = *(xmlAutomataState **)(a1 + 144);
          unsigned int v9 = xmlAutomataNewState(*(xmlAutomataPtr *)(a1 + 120));
          int v10 = *(_DWORD *)(a2 + 36);
          if (v10 == 0x40000000 || (--v10, v10))
          {
            int v35 = *(_DWORD *)(a2 + 32);
            if (v35 <= 0) {
              int v36 = 0;
            }
            else {
              int v36 = v35 - 1;
            }
            int v37 = xmlAutomataNewCounter(*(xmlAutomataPtr *)(a1 + 120), v36, v10);
            int v38 = xmlAutomataNewState(*(xmlAutomataPtr *)(a1 + 120));
            if (v4[11] == 1)
            {
              int v39 = xmlAutomataNewTransition2( *(xmlAutomataPtr *)(a1 + 120),  v8,  0LL,  (const xmlChar *)"*",  (const xmlChar *)"*",  v4);
              *(void *)(a1 + 14xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v39;
              xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v39, v38);
              int v40 = xmlAutomataNewTransition2(*(xmlAutomataPtr *)(a1 + 120), v8, 0LL, (const xmlChar *)"*", 0LL, v4);
              *(void *)(a1 + 14xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v40;
              xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v40, v38);
            }

            else
            {
              int v55 = (uint64_t **)*((void *)v4 + 6);
              if (v55)
              {
                do
                {
                  int v56 = xmlAutomataNewTransition2( *(xmlAutomataPtr *)(a1 + 120),  v8,  0LL,  (const xmlChar *)"*",  (const xmlChar *)v55[1],  v4);
                  *(void *)(a1 + 14xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v56;
                  xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v56, v38);
                  int v55 = (uint64_t **)*v55;
                }

                while (v55);
              }

              else
              {
                uint64_t v67 = *((void *)v4 + 7);
                if (v67) {
                  *(void *)(a1 + 14xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = xmlAutomataNewNegTrans( *(xmlAutomataPtr *)(a1 + 120),  v8,  v38,  (const xmlChar *)"*",  *(const xmlChar **)(v67 + 8),  v4);
                }
              }
            }

            xmlAutomataNewCountedTrans(*(xmlAutomataPtr *)(a1 + 120), v38, v8, v37);
            xmlAutomataNewCounterTrans(*(xmlAutomataPtr *)(a1 + 120), v38, v9, v37);
          }

          else if (v4[11] == 1)
          {
            uint64_t v11 = xmlAutomataNewTransition2( *(xmlAutomataPtr *)(a1 + 120),  v8,  0LL,  (const xmlChar *)"*",  (const xmlChar *)"*",  v4);
            *(void *)(a1 + 14xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v11;
            xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v11, v9);
            int v12 = xmlAutomataNewTransition2(*(xmlAutomataPtr *)(a1 + 120), v8, 0LL, (const xmlChar *)"*", 0LL, v4);
            *(void *)(a1 + 14xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v12;
            xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v12, v9);
          }

          else
          {
            int v63 = (uint64_t **)*((void *)v4 + 6);
            if (v63)
            {
              do
              {
                *(void *)(a1 + 14xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v8;
                int v64 = xmlAutomataNewTransition2( *(xmlAutomataPtr *)(a1 + 120),  v8,  0LL,  (const xmlChar *)"*",  (const xmlChar *)v63[1],  v4);
                *(void *)(a1 + 14xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v64;
                xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v64, v9);
                int v63 = (uint64_t **)*v63;
              }

              while (v63);
            }

            else
            {
              uint64_t v77 = *((void *)v4 + 7);
              if (v77) {
                *(void *)(a1 + 14xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = xmlAutomataNewNegTrans( *(xmlAutomataPtr *)(a1 + 120),  v8,  v9,  (const xmlChar *)"*",  *(const xmlChar **)(v77 + 8),  v4);
              }
            }
          }

          if (*(_DWORD *)(a2 + 32))
          {
            uint64_t v5 = 0LL;
          }

          else
          {
            xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v8, v9);
            uint64_t v5 = 1LL;
          }

          *(void *)(a1 + 14xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v9;
          return v5;
        case 6:
          int v15 = *(_DWORD *)(a2 + 32);
          if (v15 == 1)
          {
            int v16 = *(_DWORD *)(a2 + 36);
            if (v16 == 1)
            {
              for (uint64_t i = *((void *)v4 + 3); i; uint64_t i = *(void *)(i + 16))
              {
                else {
                  uint64_t v5 = 0LL;
                }
              }

              return v5;
            }

            int v48 = (xmlAutomataState **)(a1 + 144);
            int v47 = *(xmlAutomataState **)(a1 + 144);
            if (v16 > 0x3FFFFFFF)
            {
LABEL_82:
              xmlAutomataStatePtr v58 = xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v47, 0LL);
              int v22 = v58;
              *(void *)(a1 + 14xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v58;
              uint64_t v59 = *(void *)(*(void *)(a2 + 24) + 24LL);
              if (v59)
              {
                do
                {
                  else {
                    uint64_t v5 = 0LL;
                  }
                  uint64_t v59 = *(void *)(v59 + 16);
                }

                while (v59);
                uint64_t v60 = *v48;
              }

              else
              {
                uint64_t v60 = v58;
              }

              xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v60, v22);
              xmlAutomataStatePtr v57 = xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), *(xmlAutomataStatePtr *)(a1 + 144), 0LL);
              goto LABEL_126;
            }

            if (v16 >= 2) {
              goto LABEL_118;
            }
          }

          else
          {
            int v48 = (xmlAutomataState **)(a1 + 144);
            int v47 = *(xmlAutomataState **)(a1 + 144);
            int v49 = *(_DWORD *)(a2 + 36);
            if (v49 > 0x3FFFFFFF)
            {
              if (v15 >= 2)
              {
                int v50 = xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), *(xmlAutomataStatePtr *)(a1 + 144), 0LL);
                *(void *)(a1 + 14xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v50;
                int v51 = xmlAutomataNewCounter(*(xmlAutomataPtr *)(a1 + 120), *(_DWORD *)(a2 + 32) - 1, 0x40000000);
                for (uint64_t j = *(void *)(*(void *)(a2 + 24) + 24LL); j; uint64_t j = *(void *)(j + 16))
                {
                  else {
                    uint64_t v5 = 0LL;
                  }
                }

                uint64_t v53 = *(xmlAutomataState **)(a1 + 144);
                xmlAutomataNewCountedTrans(*(xmlAutomataPtr *)(a1 + 120), v53, v50, v51);
                int v54 = xmlAutomataNewCounterTrans(*(xmlAutomataPtr *)(a1 + 120), v53, 0LL, v51);
                *(void *)(a1 + 14xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v54;
                if ((_DWORD)v5 == 1) {
                  xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v50, v54);
                }
                return v5;
              }

              goto LABEL_82;
            }

            if (v15 > 1 || v49 > 1)
            {
LABEL_118:
              int v22 = xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v47, 0LL);
              *(void *)(a1 + 14xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v22;
              int v68 = xmlAutomataNewCounter( *(xmlAutomataPtr *)(a1 + 120),  *(_DWORD *)(a2 + 32) - 1,  *(_DWORD *)(a2 + 36) - 1);
              uint64_t v69 = *(void *)(*(void *)(a2 + 24) + 24LL);
              if (v69)
              {
                int v70 = 1;
                do
                {
                  uint64_t v69 = *(void *)(v69 + 16);
                }

                while (v69);
                BOOL v71 = v70 == 1;
              }

              else
              {
                BOOL v71 = 1;
              }

              uint64_t v76 = *(xmlAutomataState **)(a1 + 144);
              xmlAutomataNewCountedTrans(*(xmlAutomataPtr *)(a1 + 120), v76, v22, v68);
              uint64_t v72 = xmlAutomataNewCounterTrans(*(xmlAutomataPtr *)(a1 + 120), v76, 0LL, v68);
              *(void *)(a1 + 14xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v72;
              if (!*(_DWORD *)(a2 + 32) || v71)
              {
LABEL_128:
                uint64_t v73 = *(xmlAutomata **)(a1 + 120);
                uint64_t v74 = v22;
LABEL_147:
                xmlAutomataNewEpsilon(v73, v74, v72);
                return 1LL;
              }

              return 0LL;
            }
          }

          uint64_t v61 = *((void *)v4 + 3);
          if (v61)
          {
            do
            {
              else {
                uint64_t v5 = 0LL;
              }
              uint64_t v61 = *(void *)(v61 + 16);
            }

            while (v61);
            int v62 = *v48;
          }

          else
          {
            int v62 = v47;
          }

          xmlAutomataStatePtr v75 = xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v62, 0LL);
          *(void *)(a1 + 14xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v75;
          if (!*(_DWORD *)(a2 + 32))
          {
            uint64_t v72 = v75;
            uint64_t v73 = *(xmlAutomata **)(a1 + 120);
            uint64_t v74 = v47;
            goto LABEL_147;
          }

          return v5;
        case 7:
          uint64_t v18 = *(xmlAutomataState **)(a1 + 144);
          uint64_t v19 = xmlAutomataNewState(*(xmlAutomataPtr *)(a1 + 120));
          int v20 = *(_DWORD *)(a2 + 36);
          if (v20 == 0x40000000 || (--v20, v20))
          {
            int v41 = *(_DWORD *)(a2 + 32);
            if (v41 <= 0) {
              int v42 = 0;
            }
            else {
              int v42 = v41 - 1;
            }
            int v43 = xmlAutomataNewCounter(*(xmlAutomataPtr *)(a1 + 120), v42, v20);
            uint64_t v44 = xmlAutomataNewState(*(xmlAutomataPtr *)(a1 + 120));
            uint64_t v45 = xmlAutomataNewState(*(xmlAutomataPtr *)(a1 + 120));
            uint64_t v46 = *(void *)(*(void *)(a2 + 24) + 24LL);
            if (v46)
            {
              LODWORD(v5) = 0;
              do
              {
                *(void *)(a1 + 14xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v45;
                else {
                  uint64_t v5 = v5;
                }
                xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), *(xmlAutomataStatePtr *)(a1 + 144), v44);
                uint64_t v46 = *(void *)(v46 + 16);
              }

              while (v46);
            }

            else
            {
              uint64_t v5 = 0LL;
            }

            xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v18, v45);
            xmlAutomataNewCountedTrans(*(xmlAutomataPtr *)(a1 + 120), v44, v45, v43);
            xmlAutomataNewCounterTrans(*(xmlAutomataPtr *)(a1 + 120), v44, v19, v43);
            if ((_DWORD)v5 == 1) {
              xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v45, v19);
            }
          }

          else
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + 24) + 24LL);
            if (v21)
            {
              LODWORD(v5) = 0;
              do
              {
                *(void *)(a1 + 14xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v18;
                else {
                  uint64_t v5 = v5;
                }
                xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), *(xmlAutomataStatePtr *)(a1 + 144), v19);
                uint64_t v21 = *(void *)(v21 + 16);
              }

              while (v21);
            }

            else
            {
              uint64_t v5 = 0LL;
            }
          }

          if (!*(_DWORD *)(a2 + 32))
          {
            xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v18, v19);
            uint64_t v5 = 1LL;
          }

          *(void *)(a1 + 14xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v19;
          return v5;
        case 8:
          uint64_t v5 = *((void *)v4 + 3);
          if (!v5) {
            return 1LL;
          }
          int v22 = *(xmlAutomataState **)(a1 + 144);
          int v23 = xmlAutomataNewState(*(xmlAutomataPtr *)(a1 + 120));
          xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), *(xmlAutomataStatePtr *)(a1 + 144), v23);
          do
          {
            *(void *)(a1 + 14xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v23;
            uint64_t v24 = *(void *)(v5 + 24);
            if (!v24)
            {
              uint64_t v13 = "<element> particle has no term";
              int v14 = (_DWORD *)a1;
              uint64_t v6 = 0LL;
LABEL_16:
              xmlSchemaInternalErr2( v14,  (const xmlChar *)"xmlSchemaBuildAContentModel",  (const xmlChar *)v13,  (xmlChar *)v6);
              return 0LL;
            }

            if ((*(_BYTE *)(v24 + 90) & 2) != 0)
            {
              int v26 = xmlAutomataNewCounter(*(xmlAutomataPtr *)(a1 + 120), *(_DWORD *)(v5 + 32), *(_DWORD *)(v5 + 36));
              xmlSchemaBuildContentModelForSubstGroup(a1, v5, v26, *(xmlAutomataState **)(a1 + 144));
            }

            else
            {
              int v25 = *(_DWORD *)(v5 + 32);
              if (v25)
              {
                if (v25 == 1 && *(_DWORD *)(v5 + 36) == 1) {
                  xmlAutomataNewOnceTrans2( *(xmlAutomataPtr *)(a1 + 120),  v23,  v23,  *(const xmlChar **)(v24 + 16),  *(const xmlChar **)(v24 + 96),  1,  1,  (void *)v24);
                }
              }

              else if (*(_DWORD *)(v5 + 36) == 1)
              {
                xmlAutomataNewCountTrans2( *(xmlAutomataPtr *)(a1 + 120),  v23,  v23,  *(const xmlChar **)(v24 + 16),  *(const xmlChar **)(v24 + 96),  0,  1,  (void *)v24);
              }
            }

            uint64_t v5 = *(void *)(v5 + 16);
          }

          while (v5);
          xmlAutomataStatePtr v57 = xmlAutomataNewAllTrans(*(xmlAutomataPtr *)(a1 + 120), *(xmlAutomataStatePtr *)(a1 + 144), 0LL, 0);
LABEL_126:
          *(void *)(a1 + 14xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v57;
          if (!*(_DWORD *)(a2 + 32))
          {
            uint64_t v72 = v57;
            goto LABEL_128;
          }

          return v5;
        case 0xE:
          int v27 = v4[22];
          if ((v27 & 0x20000) != 0) {
            return xmlSchemaBuildContentModelForSubstGroup(a1, a2, -1, 0LL);
          }
          if ((v27 & 0x10) != 0) {
            return 0LL;
          }
          int v28 = *(_DWORD *)(a2 + 36);
          if (v28 == 1)
          {
            int v29 = *(xmlAutomataState **)(a1 + 144);
            uint64_t v30 = *(xmlAutomata **)(a1 + 120);
            int v31 = (const xmlChar *)*((void *)v4 + 2);
            int v32 = (const xmlChar *)*((void *)v4 + 12);
            uint64_t v33 = *(xmlAutomataState **)(a1 + 144);
            uint64_t v34 = 0LL;
          }

          else
          {
            int v65 = *(_DWORD *)(a2 + 32);
            if (v28 < 0x40000000 || v65 > 1)
            {
              if (v28 == 0x40000000) {
                int v78 = 0x40000000;
              }
              else {
                int v78 = v28 - 1;
              }
              if (v65 <= 0) {
                int v79 = 0;
              }
              else {
                int v79 = v65 - 1;
              }
              int v29 = xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), *(xmlAutomataStatePtr *)(a1 + 144), 0LL);
              int v80 = xmlAutomataNewCounter(*(xmlAutomataPtr *)(a1 + 120), v79, v78);
              uint64_t v81 = xmlAutomataNewTransition2( *(xmlAutomataPtr *)(a1 + 120),  v29,  0LL,  *((const xmlChar **)v4 + 2),  *((const xmlChar **)v4 + 12),  v4);
              *(void *)(a1 + 14xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v81;
              xmlAutomataNewCountedTrans(*(xmlAutomataPtr *)(a1 + 120), v81, v29, v80);
              xmlAutomataStatePtr v66 = xmlAutomataNewCounterTrans( *(xmlAutomataPtr *)(a1 + 120),  *(xmlAutomataStatePtr *)(a1 + 144),  0LL,  v80);
LABEL_145:
              uint64_t v72 = v66;
              *(void *)(a1 + 14xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v66;
              if (!*(_DWORD *)(a2 + 32))
              {
                uint64_t v73 = *(xmlAutomata **)(a1 + 120);
                uint64_t v74 = v29;
                goto LABEL_147;
              }

              return 0LL;
            }

            int v29 = *(xmlAutomataState **)(a1 + 144);
            uint64_t v33 = xmlAutomataNewTransition2( *(xmlAutomataPtr *)(a1 + 120),  v29,  0LL,  *((const xmlChar **)v4 + 2),  *((const xmlChar **)v4 + 12),  v4);
            *(void *)(a1 + 14xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v33;
            uint64_t v30 = *(xmlAutomata **)(a1 + 120);
            int v31 = (const xmlChar *)*((void *)v4 + 2);
            int v32 = (const xmlChar *)*((void *)v4 + 12);
            uint64_t v34 = v33;
          }

          xmlAutomataStatePtr v66 = xmlAutomataNewTransition2(v30, v33, v34, v31, v32, v4);
          goto LABEL_145;
        case 0x11:
          return v5;
        default:
          uint64_t v6 = (char *)xmlSchemaItemTypeToStr(*v4);
LABEL_15:
          uint64_t v13 = "found unexpected term of type '%s' in content model";
          int v14 = (_DWORD *)a1;
          goto LABEL_16;
      }
    }
  }

  else
  {
    xmlSchemaInternalErr2( (_DWORD *)a1,  (const xmlChar *)"xmlSchemaBuildAContentModel",  (const xmlChar *)"particle is NULL",  0LL);
  }

  return 1LL;
}

uint64_t xmlSchemaBuildContentModelForSubstGroup(uint64_t a1, uint64_t a2, int a3, xmlAutomataState *a4)
{
  int v4 = a4;
  int v8 = *(const xmlChar ***)(a2 + 24);
  unsigned int v9 = *(xmlAutomataState **)(a1 + 144);
  if (!a4) {
    int v4 = xmlAutomataNewState(*(xmlAutomataPtr *)(a1 + 120));
  }
  int v10 = *(xmlHashTable **)(*(void *)(a1 + 48) + 48LL);
  if (v10 && (uint64_t v11 = xmlHashLookup2(v10, v8[2], v8[12])) != 0LL)
  {
    int v12 = v11;
    if (a3 < 0)
    {
      int v18 = *(_DWORD *)(a2 + 36);
      if (v18 == 0x40000000 || (--v18, v18))
      {
        int v24 = *(_DWORD *)(a2 + 32);
        if (v24 <= 0) {
          int v25 = 0;
        }
        else {
          int v25 = v24 - 1;
        }
        int v26 = xmlAutomataNewCounter(*(xmlAutomataPtr *)(a1 + 120), v25, v18);
        int v27 = xmlAutomataNewState(*(xmlAutomataPtr *)(a1 + 120));
        int v28 = *(xmlAutomata **)(a1 + 120);
        int v29 = xmlAutomataNewTransition2(v28, v9, 0LL, v8[2], v8[12], v8);
        xmlAutomataNewEpsilon(v28, v29, v27);
        uint64_t v30 = v12[1];
        if (*(int *)(v30 + 8) >= 1)
        {
          uint64_t v31 = 0LL;
          do
          {
            int v32 = *(xmlAutomata **)(a1 + 120);
            uint64_t v33 = xmlAutomataNewTransition2( v32,  v9,  0LL,  *(const xmlChar **)(*(void *)(*(void *)v30 + 8 * v31) + 16LL),  *(const xmlChar **)(*(void *)(*(void *)v30 + 8 * v31) + 96LL),  *(void **)(*(void *)v30 + 8 * v31));
            xmlAutomataNewEpsilon(v32, v33, v27);
            ++v31;
            uint64_t v30 = v12[1];
          }

          while (v31 < *(int *)(v30 + 8));
        }

        xmlAutomataNewCountedTrans(*(xmlAutomataPtr *)(a1 + 120), v27, v9, v26);
        xmlAutomataNewCounterTrans(*(xmlAutomataPtr *)(a1 + 120), v27, v4, v26);
      }

      else
      {
        uint64_t v19 = *(xmlAutomata **)(a1 + 120);
        int v20 = xmlAutomataNewTransition2(v19, v9, 0LL, v8[2], v8[12], v8);
        xmlAutomataNewEpsilon(v19, v20, v4);
        uint64_t v21 = v12[1];
        if (*(int *)(v21 + 8) >= 1)
        {
          uint64_t v22 = 0LL;
          do
          {
            int v23 = xmlAutomataNewTransition2( *(xmlAutomataPtr *)(a1 + 120),  v9,  0LL,  *(const xmlChar **)(*(void *)(*(void *)v21 + 8 * v22) + 16LL),  *(const xmlChar **)(*(void *)(*(void *)v21 + 8 * v22) + 96LL),  *(void **)(*(void *)v21 + 8 * v22));
            xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v23, v4);
            ++v22;
            uint64_t v21 = v12[1];
          }

          while (v22 < *(int *)(v21 + 8));
        }
      }
    }

    else
    {
      uint64_t v13 = xmlAutomataNewCountedTrans(*(xmlAutomataPtr *)(a1 + 120), v9, 0LL, a3);
      xmlAutomataNewTransition2(*(xmlAutomataPtr *)(a1 + 120), v13, v4, v8[2], v8[12], v8);
      uint64_t v14 = v12[1];
      if (*(int *)(v14 + 8) >= 1)
      {
        uint64_t v15 = 0LL;
        do
        {
          xmlAutomataNewTransition2( *(xmlAutomataPtr *)(a1 + 120),  v13,  v4,  *(const xmlChar **)(*(void *)(*(void *)v14 + 8 * v15) + 16LL),  *(const xmlChar **)(*(void *)(*(void *)v14 + 8 * v15) + 96LL),  *(void **)(*(void *)v14 + 8 * v15));
          ++v15;
          uint64_t v14 = v12[1];
        }

        while (v15 < *(int *)(v14 + 8));
      }
    }

    if (*(_DWORD *)(a2 + 32))
    {
      uint64_t result = 0LL;
    }

    else
    {
      xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v9, v4);
      uint64_t result = 1LL;
    }

    *(void *)(a1 + 14xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v4;
  }

  else
  {
    uint64_t ComponentNode = xmlSchemaGetComponentNode((_DWORD *)a2);
    xmlSchemaPErr( a1,  ComponentNode,  3069,  "Internal error: xmlSchemaBuildContentModelForSubstGroup, declaration is marked having a subst. group but none available.\n",  v8[2],  0LL);
    return 0LL;
  }

  return result;
}

xmlChar *xmlSchemaNormalizeValue(_DWORD *a1, const xmlChar *a2)
{
  int WhiteSpaceFacetValue = xmlSchemaGetWhiteSpaceFacetValue(a1);
  if (WhiteSpaceFacetValue == 2) {
    return xmlSchemaWhiteSpaceReplace(a2);
  }
  if (WhiteSpaceFacetValue == 3) {
    return xmlSchemaCollapseString(a2);
  }
  return 0LL;
}

uint64_t xmlSchemaValidateNotation( uint64_t a1, uint64_t a2, xmlNode *a3, xmlChar *value, xmlSchemaValPtr *a5, int a6)
{
  if (a1 && !*(void *)(a1 + 40))
  {
    xmlSchemaInternalErr2( (_DWORD *)a1,  (const xmlChar *)"xmlSchemaValidateNotation",  (const xmlChar *)"a schema is needed on the validation context",  0LL);
    return 0xFFFFFFFFLL;
  }

  uint64_t v12 = xmlValidateQName(value, 1);
  if (!(_DWORD)v12)
  {
    prefix = 0LL;
    uint64_t v13 = xmlSplitQName2(value, &prefix);
    if (prefix)
    {
      uint64_t v14 = v13;
      if (a1)
      {
        href = (xmlChar *)xmlSchemaLookupNamespace(a1, prefix);
        if (href)
        {
LABEL_7:
          if (xmlSchemaGetNotation(a2, v14, href))
          {
            uint64_t v12 = 0LL;
            if (a5 && a6)
            {
              int v16 = xmlStrdup(v14);
              int v17 = xmlStrdup(href);
              xmlSchemaValPtr v18 = xmlSchemaNewNOTATIONValue(v16, v17);
              *a5 = v18;
              if (v18) {
                uint64_t v12 = 0LL;
              }
              else {
                uint64_t v12 = 0xFFFFFFFFLL;
              }
            }
          }

          else
          {
            uint64_t v12 = 1LL;
          }

          xmlFree(prefix);
          xmlFree(v14);
          return v12;
        }
      }

      else if (a3)
      {
        xmlNsPtr v21 = xmlSearchNs(a3->doc, a3, prefix);
        if (v21)
        {
          href = (xmlChar *)v21->href;
          if (href) {
            goto LABEL_7;
          }
        }
      }

      ((void (*)(xmlChar *))xmlFree)(prefix);
      xmlFree(v14);
      return 1LL;
    }

    if (!xmlSchemaGetNotation(a2, value, 0LL)) {
      return 1LL;
    }
    uint64_t v12 = 0LL;
    if (a5 && a6)
    {
      uint64_t v19 = xmlStrdup(value);
      xmlSchemaValPtr v20 = xmlSchemaNewNOTATIONValue(v19, 0LL);
      *a5 = v20;
      if (v20) {
        return 0LL;
      }
      else {
        return 0xFFFFFFFFLL;
      }
    }
  }

  return v12;
}

uint64_t xmlSchemaValidateFacets( _DWORD *a1, uint64_t a2, int *a3, xmlSchemaValType ValType, xmlChar *value, xmlSchemaVal *a6, unint64_t actualLen, int a8)
{
  unint64_t length = 0LL;
  if (*a3 == 1) {
    return 0LL;
  }
  uint64_t v13 = (uint64_t **)*((void *)a3 + 22);
  if (!v13)
  {
    uint64_t i = 0LL;
    goto LABEL_41;
  }

  int v15 = a3[22];
  if ((v15 & 0x100) != 0)
  {
    int v18 = a3[40];
    uint64_t v19 = a3;
    if (v18 != 46)
    {
      if ((*((_BYTE *)a3 + 89) & 0x40) != 0)
      {
LABEL_14:
        if (v18 == 1)
        {
          xmlSchemaWhitespaceValueType WhiteSpaceFacetValue = xmlSchemaGetWhiteSpaceFacetValue(a3);
          if (!a6)
          {
LABEL_19:
            for (i = 0LL; v13; uint64_t v13 = (uint64_t **)*v13)
            {
              xmlNsPtr v21 = (xmlSchemaFacet *)v13[1];
              if (v21->type - 1006 >= 3)
              {
                if (v21->type - 1009 > 2) {
                  uint64_t v22 = xmlSchemaValidateFacetWhtsp(v21, WhiteSpaceFacetValue, ValType, value, a6, WhiteSpaceFacetValue);
                }
                else {
                  uint64_t v22 = xmlSchemaValidateLengthFacetWhtsp(v21, ValType, value, a6, &length, WhiteSpaceFacetValue);
                }
                uint64_t v8 = v22;
                if ((v22 & 0x80000000) != 0)
                {
                  int v36 = "validating against a atomic type facet";
                  goto LABEL_69;
                }

                if ((_DWORD)v22)
                {
                  if (!a8) {
                    return v8;
                  }
                  xmlSchemaFacetErr((uint64_t)a1, v22, a2, value, length, a3, (xmlSchemaFacet *)v13[1]);
                  if ((_DWORD)i) {
                    uint64_t i = i;
                  }
                  else {
                    uint64_t i = v8;
                  }
                }
              }
            }

            goto LABEL_31;
          }
        }

        else
        {
          xmlSchemaWhitespaceValueType WhiteSpaceFacetValue = XML_SCHEMA_WHITESPACE_COLLAPSE;
          if (!a6) {
            goto LABEL_19;
          }
        }

        xmlSchemaValType ValType = xmlSchemaGetValType(a6);
        uint64_t v13 = (uint64_t **)*((void *)a3 + 22);
        goto LABEL_19;
      }

      uint64_t v19 = a3;
      while (1)
      {
        uint64_t v19 = (int *)*((void *)v19 + 14);
        int v18 = v19[40];
        if (v18 == 46) {
          break;
        }
        if ((*((_BYTE *)v19 + 89) & 0x40) != 0) {
          goto LABEL_14;
        }
      }
    }

    int v18 = *v19;
    goto LABEL_14;
  }

  uint64_t i = 0LL;
  if ((v15 & 0x40) == 0) {
    goto LABEL_41;
  }
LABEL_31:
  if ((a3[22] & 0x40) == 0 || (int v23 = (uint64_t **)*((void *)a3 + 22)) == 0LL)
  {
LABEL_41:
    int v26 = a3;
    while (1)
    {
      uint64_t v27 = *((void *)v26 + 15);
      if (v27) {
        break;
      }
LABEL_50:
      int v26 = (int *)*((void *)v26 + 14);
      if (!v26 || *v26 == 1)
      {
        LODWORD(v8) = 0;
        goto LABEL_54;
      }
    }

    int v28 = 0;
    do
    {
      if (*(_DWORD *)v27 == 1007)
      {
        int v29 = xmlSchemaAreValuesEqual(*(xmlSchemaValPtr *)(v27 + 56), a6);
        if (v29 == 1)
        {
          LODWORD(v8) = 1;
          goto LABEL_54;
        }

        if (v29 < 0)
        {
          int v36 = "validating against an enumeration facet";
          goto LABEL_69;
        }

        int v28 = 1;
      }

      uint64_t v27 = *(void *)(v27 + 8);
    }

    while (v27);
    if (!v28) {
      goto LABEL_50;
    }
    uint64_t v8 = 1840LL;
    if (a8)
    {
      xmlSchemaFacetErr((uint64_t)a1, 1840LL, a2, value, 0LL, a3, 0LL);
      if ((_DWORD)i) {
        uint64_t i = i;
      }
      else {
        uint64_t i = 1840LL;
      }
LABEL_54:
      uint64_t v30 = 0LL;
      uint64_t v31 = a3;
      while (1)
      {
        int v32 = (void *)*((void *)v31 + 22);
        if (v32)
        {
          int v33 = 0;
          do
          {
            uint64_t v34 = v32[1];
            if (*(_DWORD *)v34 == 1006)
            {
              int v35 = xmlRegexpExec(*(xmlRegexpPtr *)(v34 + 64), value);
              LODWORD(v8) = v35;
              if (v35 == 1) {
                goto LABEL_64;
              }
              if (v35 < 0)
              {
                int v36 = "validating against a pattern facet";
                goto LABEL_69;
              }

              uint64_t v30 = (xmlSchemaFacet *)v32[1];
              int v33 = 1;
            }

            int v32 = (void *)*v32;
          }

          while (v32);
          if (v33 && (_DWORD)v8 != 1) {
            break;
          }
        }

void xmlSchemaSimpleTypeErr(_DWORD *a1, int a2, uint64_t a3, const xmlChar *a4, uint64_t a5)
{
  cur = 0LL;
  xmlSchemaFormatNodeForError((void **)&cur, (uint64_t)a1, a3);
  int v10 = xmlStrcat(cur, (const xmlChar *)"'%s' is not a valid value of ");
  cur = v10;
  else {
    uint64_t v11 = "the local ";
  }
  uint64_t v12 = xmlStrcat(v10, (const xmlChar *)v11);
  uint64_t v13 = v12;
  cur = v12;
  int v14 = *(_DWORD *)(a5 + 88);
  if ((v14 & 0x100) != 0)
  {
    int v15 = "atomic type";
  }

  else if ((v14 & 0x40) != 0)
  {
    int v15 = "list type";
  }

  else
  {
    if ((v14 & 0x80) == 0) {
      goto LABEL_11;
    }
    int v15 = "union type";
  }

  uint64_t v13 = xmlStrcat(v12, (const xmlChar *)v15);
  cur = v13;
LABEL_11:
  xmlSchemaValPtr v20 = 0LL;
  int v16 = xmlStrcat(v13, (const xmlChar *)" '");
  cur = v16;
  if (*(_DWORD *)(a5 + 160))
  {
    cur = xmlStrcat(v16, (const xmlChar *)"xs:");
    int v17 = *(xmlChar **)(a5 + 16);
LABEL_14:
    xmlSchemaValPtr v20 = xmlStrdup(v17);
    goto LABEL_16;
  }

  int v17 = xmlSchemaFormatQName((void **)&v20, *(const xmlChar **)(a5 + 208), *(xmlChar **)(a5 + 16));
  if (!v20) {
    goto LABEL_14;
  }
LABEL_16:
  int v18 = cur;
  uint64_t v19 = xmlEscapeFormatString((void **)&v20);
  cur = xmlStrcat(v18, v19);
  uint64_t v13 = xmlStrcat(cur, (const xmlChar *)"'");
  cur = v13;
  if (v20)
  {
    xmlFree(v20);
    uint64_t v13 = cur;
  }

uint64_t xmlSchemaGetWhiteSpaceFacetValue(_DWORD *a1)
{
  if (*a1 == 1)
  {
    int v1 = a1[40];
    if (v1 == 2) {
      unsigned int v2 = 2;
    }
    else {
      unsigned int v2 = 3;
    }
    if (v1 == 46) {
      unsigned int v2 = 1;
    }
    if (v1 == 1) {
      return 1LL;
    }
    else {
      return v2;
    }
  }

  else
  {
    int v4 = a1[22];
    if ((v4 & 0x40) != 0)
    {
      return 3LL;
    }

    else
    {
      if ((v4 & 0x2000000) != 0) {
        int v5 = 2;
      }
      else {
        int v5 = 3;
      }
      if ((v4 & 0x1000000) != 0) {
        int v6 = 1;
      }
      else {
        int v6 = v5;
      }
      if ((v4 & 0x100) != 0) {
        unsigned int v7 = v6;
      }
      else {
        unsigned int v7 = -1;
      }
      if ((v4 & 0x80) != 0) {
        return 0LL;
      }
      else {
        return v7;
      }
    }
  }

const xmlChar *xmlSchemaLookupNamespace(uint64_t a1, xmlChar *str1)
{
  if (!*(void *)(a1 + 72))
  {
    uint64_t v11 = *(xmlTextReader **)(a1 + 280);
    if (v11)
    {
      uint64_t result = xmlTextReaderLookupNamespace(v11, str1);
      if (result)
      {
        uint64_t v13 = (xmlChar *)result;
        int v14 = xmlDictLookup(*(xmlDictPtr *)(a1 + 272), result, -1);
        xmlFree(v13);
        return v14;
      }

      return result;
    }

    int v15 = *(xmlNode **)(*(void *)(a1 + 192) + 8LL);
    if (v15)
    {
      doc = v15->doc;
      if (doc)
      {
        uint64_t result = (const xmlChar *)xmlSearchNs(doc, v15, str1);
        if (result) {
          return (const xmlChar *)*((void *)result + 2);
        }
        return result;
      }
    }

    xmlSchemaInternalErr2( (_DWORD *)a1,  (const xmlChar *)"xmlSchemaLookupNamespace",  (const xmlChar *)"no node or node's doc available",  0LL);
    return 0LL;
  }

  uint64_t v4 = *(unsigned int *)(a1 + 172);
  if ((v4 & 0x80000000) != 0) {
    return 0LL;
  }
  while (1)
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 176) + 8 * v4);
    int v6 = *(_DWORD *)(v5 + 128);
    if (v6 >= 1) {
      break;
    }
LABEL_10:
    if (v4-- <= 0) {
      return 0LL;
    }
  }

  uint64_t v7 = 0LL;
  while (1)
  {
    uint64_t v8 = *(void *)(v5 + 120);
    unsigned int v9 = *(const xmlChar **)(v8 + 8 * v7);
    if (str1) {
      break;
    }
    if (!v9) {
      return *(const xmlChar **)(v8 + 8 * v7 + 8);
    }
LABEL_9:
    v7 += 2LL;
    if (v7 >= 2 * v6) {
      goto LABEL_10;
    }
  }

  if (!xmlStrEqual(str1, v9))
  {
    int v6 = *(_DWORD *)(v5 + 128);
    goto LABEL_9;
  }

  uint64_t v8 = *(void *)(v5 + 120);
  return *(const xmlChar **)(v8 + 8 * v7 + 8);
}

void *xmlSchemaGetNotation(uint64_t a1, const xmlChar *a2, xmlChar *str1)
{
  uint64_t result = 0LL;
  if (a1)
  {
    if (a2)
    {
      if (!xmlStrEqual(str1, *(const xmlChar **)(a1 + 8))
        || (uint64_t result = xmlHashLookup(*(xmlHashTablePtr *)(a1 + 88), a2)) == 0LL)
      {
        if (xmlHashSize(*(xmlHashTablePtr *)(a1 + 96)) < 2)
        {
          return 0LL;
        }

        else
        {
          if (str1) {
            uint64_t v7 = str1;
          }
          else {
            uint64_t v7 = (const xmlChar *)"##";
          }
          uint64_t result = xmlHashLookup(*(xmlHashTablePtr *)(a1 + 96), v7);
          if (result) {
            return xmlHashLookup(*(xmlHashTablePtr *)(result[10] + 88LL), a2);
          }
        }
      }
    }
  }

  return result;
}

uint64_t xmlSchemaFacetErr( uint64_t a1, uint64_t a2, uint64_t a3, const xmlChar *a4, uint64_t a5, _DWORD *a6, xmlSchemaFacet *a7)
{
  uint64_t v13 = (_DWORD *)a1;
  uint64_t v65 = *MEMORY[0x1895F89C0];
  cur = 0LL;
  if (a3)
  {
    int v14 = (int *)(a3 + 8);
LABEL_3:
    int v15 = *v14;
    goto LABEL_7;
  }

  if (*(_DWORD *)a1 == 2)
  {
    int v14 = *(int **)(a1 + 192);
    if (v14) {
      goto LABEL_3;
    }
  }

  int v15 = -1;
LABEL_7:
  xmlSchemaFormatNodeForError((void **)&cur, a1, a3);
  if ((_DWORD)a2 == 1840) {
    int type = 1007;
  }
  else {
    int type = a7->type;
  }
  cur = xmlStrcat(cur, (const xmlChar *)"[");
  int v17 = xmlStrcat(cur, (const xmlChar *)"facet '");
  cur = v17;
  int v18 = xmlSchemaFacetTypeToString(type);
  cur = xmlStrcat(v17, (const xmlChar *)v18);
  uint64_t v19 = xmlStrcat(cur, (const xmlChar *)"'] ");
  cur = v19;
  xmlSchemaValPtr v20 = &xmlFree;
  if ((type - 1009) <= 2)
  {
    *(void *)char __str = 0LL;
    uint64_t v62 = 0LL;
    char v64 = 0;
    uint64_t v63 = 0LL;
    *(void *)xmlAutomataStatePtr v57 = 0LL;
    uint64_t v58 = 0LL;
    char v60 = 0;
    if (v15 == 2) {
      xmlNsPtr v21 = "The value '%s' has a length of '%s'; ";
    }
    else {
      xmlNsPtr v21 = "The value has a length of '%s'; ";
    }
    uint64_t v59 = 0LL;
    cur = xmlStrcat(v19, (const xmlChar *)v21);
    unint64_t FacetValueAsULong = xmlSchemaGetFacetValueAsULong(a7);
    snprintf(__str, 0x18uLL, "%lu", FacetValueAsULong);
    snprintf(v57, 0x18uLL, "%lu", a5);
    switch(type)
    {
      case 1011:
        int v23 = cur;
        int v24 = "this underruns the allowed minimum length of '%s'.\n";
        break;
      case 1010:
        int v23 = cur;
        int v24 = "this exceeds the allowed maximum length of '%s'.\n";
        break;
      case 1009:
        int v23 = cur;
        int v24 = "this differs from the allowed length of '%s'.\n";
        break;
      default:
        goto LABEL_23;
    }

    cur = xmlStrcat(v23, (const xmlChar *)v24);
LABEL_23:
    int v26 = cur;
    if (v15 == 2)
    {
      uint64_t v53 = __str;
      value = v57;
LABEL_35:
      int v28 = v13;
      int v29 = a2;
      uint64_t v30 = a3;
      uint64_t v31 = a4;
LABEL_36:
      xmlSchemaErr4Line(v28, 2, v29, v30, 0, (const char *)v26, v31, (xmlChar *)value, (xmlChar *)v53, 0LL);
    }

    else
    {
      xmlSchemaErr4Line(v13, 2, a2, a3, 0, (const char *)cur, (const xmlChar *)v57, (xmlChar *)__str, 0LL, 0LL);
    }

    return ((uint64_t (*)(xmlChar *))*v20)(cur);
  }

  switch(type)
  {
    case 1000:
      uint64_t v25 = "The value '%s' is less than the minimum value allowed ('%s').\n";
      goto LABEL_34;
    case 1001:
      uint64_t v25 = "The value '%s' must be greater than '%s'.\n";
      goto LABEL_34;
    case 1002:
      uint64_t v25 = "The value '%s' is greater than the maximum value allowed ('%s').\n";
      goto LABEL_34;
    case 1003:
      uint64_t v25 = "The value '%s' must be less than '%s'.\n";
      goto LABEL_34;
    case 1004:
      uint64_t v25 = "The value '%s' has more digits than are allowed ('%s').\n";
      goto LABEL_34;
    case 1005:
      uint64_t v25 = "The value '%s' has more fractional digits than are allowed ('%s').\n";
      goto LABEL_34;
    case 1006:
      uint64_t v25 = "The value '%s' is not accepted by the pattern '%s'.\n";
LABEL_34:
      int v26 = xmlStrcat(v19, (const xmlChar *)v25);
      cur = v26;
      value = (char *)a7->value;
      uint64_t v53 = 0LL;
      goto LABEL_35;
    case 1007:
      int v33 = 0LL;
      int v54 = xmlStrcat(v19, (const xmlChar *)"The value '%s' is not an element of the set {%s}.\n");
      uint64_t v55 = (uint64_t)a4;
      cur = v54;
      *(void *)char __str = 0LL;
      uint64_t v34 = (const xmlChar *)"'";
      int v35 = (const xmlChar *)", '";
      break;
    default:
      if (v15 == 2)
      {
        int v26 = xmlStrcat(v19, (const xmlChar *)"The value '%s' is not facet-valid.\n");
        cur = v26;
        uint64_t v53 = 0LL;
        int v28 = v13;
        int v29 = a2;
        uint64_t v30 = a3;
        uint64_t v31 = a4;
      }

      else
      {
        int v26 = xmlStrcat(v19, (const xmlChar *)"The value is not facet-valid.\n");
        cur = v26;
        uint64_t v53 = 0LL;
        int v28 = v13;
        int v29 = a2;
        uint64_t v30 = a3;
        uint64_t v31 = 0LL;
      }

      goto LABEL_60;
  }

  while (1)
  {
    int v36 = a6;
    int v37 = v13;
    int v38 = v34;
    uint64_t v39 = a2;
    int v40 = v35;
    int v41 = v20;
    int v42 = (_DWORD *)*((void *)v36 + 14);
    int WhiteSpaceFacetValue = xmlSchemaGetWhiteSpaceFacetValue(v42);
    uint64_t v44 = v36;
    uint64_t v45 = *((void *)v36 + 15);
    if (v45) {
      break;
    }
    uint64_t v52 = v42;
    xmlSchemaValPtr v20 = v41;
    int v51 = (const xmlChar *)v55;
    int v35 = v40;
    a2 = v39;
    uint64_t v34 = v38;
    uint64_t v13 = v37;
    a6 = v52;
LABEL_53:
    if (!a6 || *a6 == 1) {
      goto LABEL_62;
    }
  }

  int v46 = WhiteSpaceFacetValue;
  int v47 = 0;
  xmlSchemaValPtr v20 = v41;
  int v35 = v40;
  a2 = v39;
  uint64_t v34 = v38;
  uint64_t v13 = v37;
  int v48 = v44;
  do
  {
    if (*(_DWORD *)v45 == 1007)
    {
      if (xmlSchemaGetCanonValueWhtspExt_1(*(xmlSchemaValPtr *)(v45 + 56), v46, (xmlChar **)__str, 0) == -1)
      {
        xmlSchemaInternalErr2( v13,  (const xmlChar *)"xmlSchemaFormatFacetEnumSet",  (const xmlChar *)"compute the canonical lexical representation",  0LL);
        if (v33) {
          ((void (*)(xmlChar *))*v20)(v33);
        }
        uint64_t v53 = 0LL;
        int v28 = v13;
        int v29 = a2;
        uint64_t v30 = a3;
        int v26 = v54;
        uint64_t v31 = (const xmlChar *)v55;
LABEL_60:
        value = 0LL;
        goto LABEL_36;
      }

      if (v33) {
        int v49 = xmlStrcat(v33, v35);
      }
      else {
        int v49 = xmlStrdup(v34);
      }
      int v50 = xmlStrcat(v49, *(const xmlChar **)__str);
      int v33 = xmlStrcat(v50, v34);
      if (*(void *)__str)
      {
        ((void (*)(void))*v20)();
        *(void *)char __str = 0LL;
      }

      int v47 = 1;
    }

    uint64_t v45 = *(void *)(v45 + 8);
  }

  while (v45);
  if (!v47)
  {
    a6 = (_DWORD *)*((void *)v48 + 14);
    int v51 = (const xmlChar *)v55;
    goto LABEL_53;
  }

  int v51 = (const xmlChar *)v55;
LABEL_62:
  xmlSchemaErr4Line(v13, 2, a2, a3, 0, (const char *)v54, v51, v33, 0LL, 0LL);
  if (v33) {
    ((void (*)(xmlChar *))*v20)(v33);
  }
  return ((uint64_t (*)(xmlChar *))*v20)(cur);
}

uint64_t xmlSchemaGetCanonValueWhtspExt_1(xmlSchemaValPtr cur, int a2, xmlChar **a3, int a4)
{
  retValue = 0LL;
  uint64_t result = 0xFFFFFFFFLL;
  if (!cur || !a3) {
    return result;
  }
  xmlSchemaValPtr Next = xmlSchemaValueGetNext(cur);
  *a3 = 0LL;
  while (1)
  {
    xmlSchemaValType ValType = xmlSchemaGetValType(cur);
    xmlSchemaValType v11 = ValType;
    if (ValType <= XML_SCHEMAS_ANYSIMPLETYPE && ((1LL << ValType) & 0x400000000006LL) != 0)
    {
      AsString = xmlSchemaValueGetAsString(cur);
      if (!AsString)
      {
LABEL_30:
        uint64_t v19 = (const xmlChar *)&byte_181A3ACBA;
LABEL_31:
        int v18 = xmlStrdup(v19);
LABEL_32:
        *a3 = v18;
        goto LABEL_33;
      }

      uint64_t v13 = (xmlChar *)AsString;
      if (a2 == 2)
      {
        int v14 = xmlSchemaWhiteSpaceReplace(AsString);
      }

      else
      {
        if (a2 != 3)
        {
          int v14 = retValue;
LABEL_22:
          if (v14) {
            uint64_t v13 = v14;
          }
          goto LABEL_24;
        }

        int v14 = xmlSchemaCollapseString(AsString);
      }

      retValue = v14;
      goto LABEL_22;
    }

    if (xmlSchemaGetCanonValue(cur, (const xmlChar **)&retValue) == -1) {
      break;
    }
    uint64_t v13 = retValue;
    if (a4)
    {
      if (v11 == XML_SCHEMAS_DECIMAL)
      {
        int v15 = xmlStrlen(retValue);
        uint64_t v13 = retValue;
        if (v15 >= 3 && retValue[v15 - 1] == 48)
        {
          uint64_t v16 = (v15 - 2);
          if (retValue[v16] == 46)
          {
            retValue[v16] = 0;
            uint64_t v13 = retValue;
          }
        }
      }
    }

void *xmlFreeIDCHashEntry(void *result)
{
  if (result)
  {
    do
    {
      int v1 = (void *)*result;
      xmlFree(result);
      uint64_t result = v1;
    }

    while (v1);
  }

  return result;
}

void xmlSchemaIDCFreeBinding(void *a1)
{
  unsigned int v2 = (void *)a1[2];
  if (v2) {
    xmlFree(v2);
  }
  uint64_t v3 = (void **)a1[4];
  if (v3)
  {
    if (*v3) {
      xmlFree(*v3);
    }
    xmlFree(v3);
  }

  xmlFree(a1);
}

uint64_t xmlSchemaValidatorPushElem(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 172);
  uint64_t v3 = *(int *)(a1 + 184);
  if ((int)v2 > (int)v3)
  {
    uint64_t v4 = "inconsistent depth encountered";
LABEL_3:
    xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaGetFreshElemInfo", (const xmlChar *)v4, 0LL);
LABEL_21:
    *(void *)(a1 + 192) = 0LL;
    xmlSchemaInternalErr2( (_DWORD *)a1,  (const xmlChar *)"xmlSchemaValidatorPushElem",  (const xmlChar *)"calling xmlSchemaGetFreshElemInfo()",  0LL);
    return 0xFFFFFFFFLL;
  }

  uint64_t v5 = *(void **)(a1 + 176);
  if (!v5)
  {
    uint64_t v7 = xmlMalloc(0x50uLL);
    *(void *)(a1 + 176) = v7;
    if (!v7)
    {
      int v13 = *(_DWORD *)(a1 + 108) + 1;
      *(_DWORD *)(a1 + 10xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 1818;
      *(_DWORD *)(a1 + 108) = v13;
      uint64_t v12 = "allocating the element info array";
      goto LABEL_20;
    }

    v7[3] = 0u;
    v7[4] = 0u;
    v7[1] = 0u;
    v7[2] = 0u;
    *uint64_t v7 = 0u;
    *(_DWORD *)(a1 + 18xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 10;
    goto LABEL_14;
  }

  if ((int)v3 <= (int)v2)
  {
    *(_DWORD *)(a1 + 18xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 2 * v3;
    uint64_t v8 = xmlRealloc(v5, 16 * v3);
    *(void *)(a1 + 176) = v8;
    if (!v8)
    {
      int v14 = *(_DWORD *)(a1 + 108) + 1;
      *(_DWORD *)(a1 + 10xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 1818;
      *(_DWORD *)(a1 + 108) = v14;
      uint64_t v12 = "re-allocating the element info array";
      goto LABEL_20;
    }

    uint64_t v9 = *(int *)(a1 + 184);
    if ((int)v3 < (int)v9)
    {
      do
        *(void *)(*(void *)(a1 + 176) + 8 * v3++) = 0LL;
      while (v9 != v3);
    }

    goto LABEL_14;
  }

  int v6 = (void *)*((void *)v5 + v2);
  if (!v6)
  {
LABEL_14:
    int v6 = xmlMalloc(0x90uLL);
    if (v6)
    {
      *(void *)(*(void *)(a1 + 176) + 8LL * *(int *)(a1 + 172)) = v6;
      goto LABEL_16;
    }

    int v11 = *(_DWORD *)(a1 + 108) + 1;
    *(_DWORD *)(a1 + 10xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 1818;
    *(_DWORD *)(a1 + 108) = v11;
    uint64_t v12 = "allocating an element info";
LABEL_20:
    __xmlSimpleError(17, 2, 0, 0LL, (uint64_t)v12);
    goto LABEL_21;
  }

  if (v6[3])
  {
    uint64_t v4 = "elem info has not been cleared";
    goto LABEL_3;
  }

uint64_t xmlSchemaValidatorPushAttribute( _DWORD *a1, const xmlChar *a2, int a3, const xmlChar *a4, const xmlChar *a5, const xmlChar *a6)
{
  FreshAttrInfo = (const xmlChar **)xmlSchemaGetFreshAttrInfo((uint64_t)a1);
  if (!FreshAttrInfo)
  {
    xmlSchemaInternalErr2( a1,  (const xmlChar *)"xmlSchemaPushAttribute",  (const xmlChar *)"calling xmlSchemaGetFreshAttrInfo()",  0LL);
    return 0xFFFFFFFFLL;
  }

  int v13 = FreshAttrInfo;
  FreshAttrInfo[1] = a2;
  *((_DWORD *)FreshAttrInfo + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = a3;
  *((_DWORD *)FreshAttrInfo + 22) = 1;
  FreshAttrInfo[3] = a4;
  FreshAttrInfo[4] = a5;
  if (a5)
  {
    if (xmlStrEqual(a4, (const xmlChar *)"nil"))
    {
      if (!xmlStrEqual(v13[4], (const xmlChar *)"http://www.w3.org/2001/XMLSchema-instance")) {
        goto LABEL_19;
      }
      int v14 = 2;
    }

    else if (xmlStrEqual(a4, (const xmlChar *)"type"))
    {
      if (!xmlStrEqual(v13[4], (const xmlChar *)"http://www.w3.org/2001/XMLSchema-instance")) {
        goto LABEL_19;
      }
      int v14 = 1;
    }

    else if (xmlStrEqual(a4, (const xmlChar *)"schemaLocation"))
    {
      if (!xmlStrEqual(v13[4], (const xmlChar *)"http://www.w3.org/2001/XMLSchema-instance")) {
        goto LABEL_19;
      }
      int v14 = 3;
    }

    else
    {
      int v16 = xmlStrEqual(a4, (const xmlChar *)"noNamespaceSchemaLocation");
      int v17 = v13[4];
      if (v16)
      {
        if (!xmlStrEqual(v17, (const xmlChar *)"http://www.w3.org/2001/XMLSchema-instance")) {
          goto LABEL_19;
        }
        int v14 = 4;
      }

      else
      {
        if (!xmlStrEqual(v17, (const xmlChar *)"http://www.w3.org/2000/xmlns/")) {
          goto LABEL_19;
        }
        int v14 = 5;
      }
    }

    *((_DWORD *)v13 + 2xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = v14;
  }

uint64_t xmlSchemaValidateElem(int *data)
{
  int v1 = data;
  uint64_t v98 = *MEMORY[0x1895F89C0];
  int v2 = data[76];
  if (v2 != -1 && data[43] >= v2)
  {
    int v32 = "xmlSchemaValidateElem";
    int v33 = "in skip-state";
    goto LABEL_227;
  }

  if (!data[42]) {
    goto LABEL_69;
  }
  uint64_t v3 = data[74];
  uint64_t v4 = (uint64_t *)*((void *)data + 36);
  uint64_t v5 = v4;
  uint64_t v6 = data[74];
  while (1)
  {
    uint64_t v7 = *v5;
    if (*(_DWORD *)(*v5 + 92) == 3) {
      break;
    }
    ++v5;
    if (!--v6)
    {
      while (1)
      {
        uint64_t v7 = *v4;
        if (*(_DWORD *)(*v4 + 92) == 4) {
          goto LABEL_11;
        }
        ++v4;
        if (!--v3) {
          goto LABEL_68;
        }
      }
    }
  }

LABEL_123:
    if ((*(_BYTE *)(v46 + 88) & 0x10) != 0)
    {
      xmlSchemaCustomErr4( v1,  1846,  0LL,  0LL,  (const xmlChar *)"The element declaration is abstract",  0LL,  0LL,  0LL,  0LL);
      uint64_t v8 = v1[26];
      if ((_DWORD)v8)
      {
        if ((v8 & 0x80000000) == 0) {
          goto LABEL_207;
        }
LABEL_226:
        int v32 = "xmlSchemaValidateElem";
        int v33 = "calling xmlSchemaValidateElemDecl()";
        goto LABEL_227;
      }

      uint64_t v45 = *((void *)v1 + 24);
    }

    else
    {
      uint64_t v58 = *(xmlChar **)(v46 + 56);
      if (!v58) {
        goto LABEL_205;
      }
      uint64_t v59 = v1[74];
      if ((int)v59 >= 1)
      {
        char v60 = (uint64_t *)*((void *)v1 + 36);
        while (1)
        {
          uint64_t v61 = *v60;
          if (*(_DWORD *)(*v60 + 92) == 2) {
            break;
          }
          ++v60;
          if (!--v59) {
            goto LABEL_162;
          }
        }

        *((void *)v1 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v61;
        xmlSchemaTypePtr BuiltInType = xmlSchemaGetBuiltInType(XML_SCHEMAS_BOOLEAN);
        int v63 = xmlSchemaVCheckCVCSimpleType( (uint64_t)v1,  0LL,  (uint64_t)BuiltInType,  *(xmlChar **)(v61 + 40),  (xmlSchemaValPtr *)(v61 + 48),  1u,  0,  0);
        *((void *)v1 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = *(void *)(*((void *)v1 + 22) + 8LL * v1[43]);
        if (v63 < 0)
        {
          xmlAutomataStatePtr v66 = "xmlSchemaValidateElemDecl";
          uint64_t v67 = "calling xmlSchemaVCheckCVCSimpleType() to validate the attribute 'xsi:nil'";
          goto LABEL_225;
        }

        if (!v63)
        {
          if ((*(_BYTE *)(v46 + 88) & 1) != 0)
          {
            if (xmlSchemaValueGetAsBoolean(*(xmlSchemaValPtr *)(v61 + 48)))
            {
              if ((*(_BYTE *)(v46 + 88) & 8) != 0 && *(void *)(v46 + 144)) {
                xmlSchemaCustomErr4( v1,  1849,  0LL,  0LL,  (const xmlChar *)"The element cannot be 'nilled' because there is a fixed value constraint defined for it",  0LL,  0LL,  0LL,  0LL);
              }
              else {
                *(_DWORD *)(*((void *)v1 + 24) + 64LL) |= 4u;
              }
            }
          }

          else
          {
            xmlSchemaCustomErr4( v1,  1847,  0LL,  0LL,  (const xmlChar *)"The element is not 'nillable'",  0LL,  0LL,  0LL,  0LL);
          }
        }

LABEL_198:
      *(void *)(v45 + 56) = v58;
    }

uint64_t xmlSchemaVPushText(uint64_t a1, int a2, xmlChar *str2, int len, int a5)
{
  uint64_t v6 = *(void *)(a1 + 192);
  int v7 = *(_DWORD *)(v6 + 64);
  if ((v7 & 4) != 0)
  {
    xmlSchemaCustomErr4( (_DWORD *)a1,  1848,  0LL,  0LL,  (const xmlChar *)"Neither character nor element content is allowed because the element is 'nilled'",  0LL,  0LL,  0LL,  0LL);
    return *(unsigned int *)(a1 + 104);
  }

  uint64_t v8 = str2;
  int v9 = *(_DWORD *)(*(void *)(v6 + 56) + 92LL);
  if (v9 != 2)
  {
    if (v9 == 1)
    {
      xmlSchemaCustomErr4( (_DWORD *)a1,  1841,  0LL,  0LL,  (const xmlChar *)"Character content is not allowed, because the content type is empty",  0LL,  0LL,  0LL,  0LL);
      return *(unsigned int *)(a1 + 104);
    }

    if (str2)
    {
      if (*str2)
      {
        if (v9 != 3 || (uint64_t v17 = *(void *)(v6 + 80)) != 0 && *(void *)(v17 + 144))
        {
          if (*(void *)(v6 + 40))
          {
            if (len < 0)
            {
              leuint64_t n = xmlStrlen(str2);
              uint64_t v6 = *(void *)(a1 + 192);
              int v7 = *(_DWORD *)(v6 + 64);
            }

            int v18 = *(xmlChar **)(v6 + 40);
            if ((v7 & 2) != 0)
            {
              uint64_t v23 = xmlStrncat(v18, v8, len);
              uint64_t result = 0LL;
              *(void *)(*(void *)(a1 + 192) + 40LL) = v23;
              return result;
            }

            uint64_t v19 = xmlStrncatNew(v18, v8, len);
LABEL_32:
            xmlSchemaValPtr v20 = v19;
            uint64_t result = 0LL;
            uint64_t v21 = *(void *)(a1 + 192);
            *(void *)(v21 + 4xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v20;
            *(_DWORD *)(v21 + 64) |= 2u;
            return result;
          }

          switch(a5)
          {
            case 3:
              if (len == -1) {
                uint64_t v19 = xmlStrdup(str2);
              }
              else {
                uint64_t v19 = xmlStrndup(str2, len);
              }
              goto LABEL_32;
            case 2:
              uint64_t result = 0LL;
              *(void *)(v6 + 4xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = str2;
              *(_DWORD *)(v6 + 6xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v7 | 2;
              return result;
            case 1:
              uint64_t result = 0LL;
              *(void *)(v6 + 4xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = str2;
              return result;
          }
        }
      }
    }

    return 0LL;
  }

  if (a2 != 3)
  {
LABEL_42:
    xmlSchemaCustomErr4( (_DWORD *)a1,  1843,  0LL,  0LL,  (const xmlChar *)"Character content other than whitespace is not allowed because the content type is 'element-only'",  0LL,  0LL,  0LL,  0LL);
    return *(unsigned int *)(a1 + 104);
  }

  if (!str2) {
    return 0LL;
  }
  if (len < 0)
  {
    while (1)
    {
      unsigned int v22 = *v8;
      if (v22 > 0x20) {
        goto LABEL_42;
      }
      if (((1LL << v22) & 0x100002600LL) == 0)
      {
        if (*v8) {
          goto LABEL_42;
        }
        return 0LL;
      }

      ++v8;
    }
  }

  uint64_t result = 0LL;
  if (len)
  {
    unsigned int v11 = *str2;
    if (*str2)
    {
      int v12 = len - 1;
      uint64_t v13 = str2 + 1;
      while (v11 <= 0x20 && ((1LL << v11) & 0x100002600LL) != 0)
      {
        uint64_t result = 0LL;
        unsigned int v14 = *v13++;
        unsigned int v11 = v14;
        BOOL v16 = v12-- != 0;
        if (!v11 || !v16) {
          return result;
        }
      }

      goto LABEL_42;
    }
  }

  return result;
}

uint64_t xmlSchemaValidatorPopElem(_DWORD *data)
{
  uint64_t v185 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *((void *)data + 24);
  if (data[74]) {
    xmlSchemaClearAttrInfos((uint64_t)data);
  }
  int v3 = *(_DWORD *)(v2 + 64);
  char v176 = data;
  int v4 = 0;
  if ((v3 & 0x200) != 0)
  {
    data[76] = data[43] - 1;
    goto LABEL_10;
  }

  if ((v3 & 0x400) != 0) {
    goto LABEL_10;
  }
  uint64_t v5 = *(void *)(v2 + 56);
  if (!v5) {
    goto LABEL_10;
  }
  int v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0xFFFFFFFE) != 2) {
    goto LABEL_270;
  }
  if (*(_DWORD *)(v5 + 160) == 45)
  {
    int v4 = 0;
    goto LABEL_272;
  }

  if ((v3 & 0x100) != 0)
  {
LABEL_270:
    int v4 = 0;
    goto LABEL_271;
  }

  __int128 v183 = 0u;
  __int128 v184 = 0u;
  __int128 v181 = 0u;
  __int128 v182 = 0u;
  *(_OWORD *)name = 0u;
  terminal[0] = 0;
  int nbneg = 0;
  nbval[0] = 10;
  uint64_t v132 = *(xmlRegExecCtxt **)(v2 + 112);
  if (!v132)
  {
    uint64_t v132 = xmlRegNewExecCtxt(*(xmlRegexpPtr *)(v5 + 200), (xmlRegExecCallbacks)xmlSchemaVContentModelCallback, data);
    *(void *)(v2 + 112) = v132;
    if (!v132)
    {
      xmlXIncludeCtxtPtr v142 = "failed to create a regex context";
      goto LABEL_303;
    }

    int v3 = *(_DWORD *)(v2 + 64);
  }

  if ((v3 & 4) != 0) {
    goto LABEL_269;
  }
  xmlRegExecNextValues(v132, nbval, &nbneg, name, terminal);
  int v133 = xmlRegExecPushString(*(xmlRegExecCtxtPtr *)(v2 + 112), 0LL, 0LL);
  if (v133 < 0)
  {
    int v134 = *(_DWORD *)(v2 + 64);
LABEL_321:
    *(_DWORD *)(v2 + 6xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v134 | 0x100;
    xmlSchemaComplexTypeErr(data, (const xmlChar *)"Missing child element(s)", nbval[0], nbneg, (uint64_t)name);
    int v4 = 1;
    goto LABEL_322;
  }

  if (!v133)
  {
    int v134 = *(_DWORD *)(v2 + 64);
    if ((v134 & 4) == 0) {
      goto LABEL_321;
    }
  }

LABEL_301:
    if (v4 < 0)
    {
      xmlXIncludeCtxtPtr v142 = "calling xmlSchemaVCheckCVCSimpleType()";
      goto LABEL_303;
    }

    goto LABEL_10;
  }

  if ((v138 & 8) == 0)
  {
    uint64_t v139 = *(void *)(v2 + 56);
    if (*(_DWORD *)v139 != 4 && (*(_DWORD *)v139 != 1 || *(_DWORD *)(v139 + 160) == 45))
    {
      if ((*(_DWORD *)(v139 + 92) | 2) != 6) {
        goto LABEL_284;
      }
      uint64_t v139 = *(void *)(v139 + 192);
    }

    int v4 = xmlSchemaVCheckINodeDataType((uint64_t)data, v2, v139, v137);
LABEL_284:
    if (!v4)
    {
LABEL_308:
      if ((data[37] & 1) == 0 || !*(void *)(v2 + 8)) {
        goto LABEL_327;
      }
      uint64_t v144 = xmlSchemaNormalizeValue(*(_DWORD **)(v2 + 56), *(const xmlChar **)(*(void *)(v2 + 80) + 144LL));
      if (v144)
      {
        xmlNodePtr v145 = v144;
        uint64_t v146 = xmlNewText(v144);
        xmlFree(v145);
      }

      else
      {
        uint64_t v146 = xmlNewText(*(const xmlChar **)(*(void *)(v2 + 80) + 144LL));
      }

      if (v146)
      {
        xmlAddChild(*(xmlNodePtr *)(v2 + 8), v146);
LABEL_327:
        int v4 = 0;
        goto LABEL_10;
      }

      xmlXIncludeCtxtPtr v142 = "calling xmlNewText()";
LABEL_303:
      xmlSchemaInternalErr2(data, (const xmlChar *)"xmlSchemaValidatorPopElem", (const xmlChar *)v142, 0LL);
      goto LABEL_304;
    }

    goto LABEL_301;
  }

  int v143 = xmlSchemaCheckCOSValidDefault((uint64_t)data, v137, (xmlSchemaValPtr *)(v2 + 48));
  if (!v143) {
    goto LABEL_308;
  }
  int v4 = v143;
  if (v143 < 0)
  {
    xmlXIncludeCtxtPtr v142 = "calling xmlSchemaCheckCOSValidDefault()";
    goto LABEL_303;
  }

LABEL_166:
    uint64_t v90 = v174;
    do
    {
      uint64_t v90 = (void *)*v90;
      if (!v90)
      {
        __int128 v94 = xmlSchemaIDCNewBinding(v83[1]);
        if (!v94) {
          goto LABEL_304;
        }
        __int128 v95 = v94;
        int v96 = *((_DWORD *)v83 + 6);
        if (v96)
        {
          if (v176[82])
          {
            __int128 v97 = xmlMalloc(8LL * v96);
            v95[2] = v97;
            if (!v97)
            {
              __xmlSimpleError(17, 2, 0, 0LL, (uint64_t)"allocating an array of IDC node-table items");
              xmlSchemaIDCFreeBinding(v95);
              goto LABEL_304;
            }

            int v98 = *((_DWORD *)v83 + 6);
            *((_DWORD *)v95 + 6) = v98;
            *((_DWORD *)v95 + 7) = v98;
            memcpy(v97, (const void *)v83[2], 8LL * *((int *)v83 + 6));
          }

          else
          {
            v94[2] = v83[2];
            v83[2] = 0LL;
            int v125 = *((_DWORD *)v83 + 7);
            *((_DWORD *)v94 + 6) = v96;
            *((_DWORD *)v94 + 7) = v125;
            v83[3] = 0LL;
          }
        }

        uint64_t v126 = v83[4];
        if (v126)
        {
          uint64_t v127 = (void **)v95[4];
          if (v127)
          {
            if (*v127) {
              xmlFree(*v127);
            }
            xmlFree(v127);
            uint64_t v126 = v83[4];
          }

          v95[4] = v126;
          v83[4] = 0LL;
        }

        if (*v174) {
          *__int128 v95 = *v174;
        }
        *uint64_t v174 = v95;
        goto LABEL_253;
      }

      uint64_t v91 = v90[1];
    }

    while (v91 != v83[1]);
    uint64_t v92 = v90[4];
    if (v92)
    {
      int v93 = *(_DWORD *)(v92 + 8);
      uint64_t v163 = v93 ? *(void *)v92 : 0LL;
    }

    else
    {
      uint64_t v163 = 0LL;
      int v93 = 0;
    }

    if (v86 >= 1) {
      break;
    }
LABEL_253:
    uint64_t v83 = (uint64_t *)*v83;
    uint64_t v8 = v176;
    if (!v83) {
      goto LABEL_254;
    }
  }

  uint64_t v99 = 0LL;
  int v165 = *((_DWORD *)v90 + 6);
  uint64_t v100 = *(unsigned int *)(v91 + 64);
  uint64_t v167 = (void *)v90[2];
  uint64_t v101 = v93;
  uint64_t v158 = v93;
  uint64_t v159 = v93;
  if (v93 <= 1) {
    int v102 = 1;
  }
  else {
    int v102 = v93;
  }
  int v156 = v102;
  int v171 = v100;
  uint64_t v103 = 8 * v100;
  int v161 = v93;
  while (1)
  {
    uint64_t v104 = *(void *)(v83[2] + 8 * v99);
    if (!v104) {
      goto LABEL_241;
    }
    if (v93)
    {
      if (v93 < 1)
      {
        LODWORD(v105) = 0;
      }

      else
      {
        if (v171 == 1)
        {
          uint64_t v105 = 0LL;
          while (1)
          {
            int v106 = xmlSchemaAreValuesEqual( *(xmlSchemaValPtr *)(**(void **)(v104 + 8) + 8LL),  *(xmlSchemaVal **)(**(void **)(*(void *)(v163 + 8 * v105) + 8LL) + 8LL));
            if (v106) {
              break;
            }
            if (++v105 >= v101)
            {
              int v84 = 0;
              LODWORD(v105) = v156;
              goto LABEL_209;
            }
          }

          if (v106 == -1) {
            goto LABEL_304;
          }
          int v84 = 1;
LABEL_207:
          int v93 = v161;
        }

        else
        {
          uint64_t v105 = 0LL;
          uint64_t v108 = 1LL;
          do
          {
            uint64_t v109 = v108;
            uint64_t v85 = *(void *)(v163 + 8 * v105);
            if (v171 < 1)
            {
              if (v84 == 1) {
                goto LABEL_207;
              }
            }

            else
            {
              uint64_t v110 = 0LL;
              while (1)
              {
                int v111 = xmlSchemaAreValuesEqual( *(xmlSchemaValPtr *)(*(void *)(*(void *)(v104 + 8) + v110) + 8LL),  *(xmlSchemaVal **)(*(void *)(*(void *)(v85 + 8) + v110) + 8LL));
                if (v111 == -1) {
                  goto LABEL_304;
                }
                int v84 = v111;
                if (!v111) {
                  break;
                }
                v110 += 8LL;
                if (v103 == v110)
                {
                  int v84 = 1;
                  goto LABEL_207;
                }
              }
            }

            uint64_t v108 = v109 + 1;
            uint64_t v105 = v109;
          }

          while (v109 != v158);
          int v93 = v161;
          LODWORD(v105) = v161;
        }

        uint64_t v101 = v159;
      }

LABEL_223:
    if (++v113 == v114) {
      goto LABEL_229;
    }
  }

  if (v171 < 1)
  {
    if (v84 == 1) {
      goto LABEL_227;
    }
    goto LABEL_223;
  }

  uint64_t v116 = 0LL;
  while (1)
  {
    int v117 = xmlSchemaAreValuesEqual( *(xmlSchemaValPtr *)(*(void *)(*(void *)(v104 + 8) + v116) + 8LL),  *(xmlSchemaVal **)(*(void *)(*(void *)(v85 + 8) + v116) + 8LL));
    if (v117 == -1) {
      break;
    }
    int v84 = v117;
    if (!v117) {
      goto LABEL_223;
    }
    v116 += 8LL;
    if (v103 == v116) {
      goto LABEL_227;
    }
  }

LABEL_304:
  uint64_t result = 0xFFFFFFFFLL;
  v176[26] = -1;
  return result;
}

_OWORD *xmlSchemaGetFreshAttrInfo(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 288);
  if (!v2)
  {
    int v6 = xmlMalloc(8uLL);
    *(void *)(a1 + 288) = v6;
    *(_DWORD *)(a1 + 30xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = 1;
    if (v6)
    {
LABEL_8:
      uint64_t result = xmlMalloc(0x70uLL);
      if (result)
      {
        result[5] = 0u;
        result[6] = 0u;
        result[3] = 0u;
        result[4] = 0u;
        result[1] = 0u;
        result[2] = 0u;
        *uint64_t result = 0u;
        *(_DWORD *)uint64_t result = 2;
        uint64_t v10 = *(void *)(a1 + 288);
        uint64_t v11 = *(int *)(a1 + 296);
        *(_DWORD *)(a1 + 296) = v11 + 1;
        *(void *)(v10 + 8 * v11) = result;
        return result;
      }

      int v12 = *(_DWORD *)(a1 + 108) + 1;
      *(_DWORD *)(a1 + 10xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 1818;
      *(_DWORD *)(a1 + 108) = v12;
      uint64_t v8 = "creating new attribute info";
      goto LABEL_13;
    }

    int v7 = *(_DWORD *)(a1 + 108) + 1;
    *(_DWORD *)(a1 + 10xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 1818;
    *(_DWORD *)(a1 + 108) = v7;
    uint64_t v8 = "allocating attribute info list";
LABEL_13:
    __xmlSimpleError(17, 2, 0, 0LL, (uint64_t)v8);
    return 0LL;
  }

  int v3 = *(_DWORD *)(a1 + 300);
  uint64_t v4 = *(int *)(a1 + 296);
  if (v3 <= (int)v4)
  {
    *(_DWORD *)(a1 + 30xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v3 + 1;
    uint64_t v9 = xmlRealloc(v2, 8LL * (v3 + 1));
    *(void *)(a1 + 288) = v9;
    if (v9) {
      goto LABEL_8;
    }
    int v13 = *(_DWORD *)(a1 + 108) + 1;
    *(_DWORD *)(a1 + 10xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 1818;
    *(_DWORD *)(a1 + 108) = v13;
    uint64_t v8 = "re-allocating attribute info list";
    goto LABEL_13;
  }

  *(_DWORD *)(a1 + 296) = v4 + 1;
  uint64_t result = (_OWORD *)*((void *)v2 + v4);
  if (!*((void *)result + 3))
  {
    *(_DWORD *)uint64_t result = 2;
    return result;
  }

  xmlSchemaInternalErr2( (_DWORD *)a1,  (const xmlChar *)"xmlSchemaGetFreshAttrInfo",  (const xmlChar *)"attr info not cleared",  0LL);
  return 0LL;
}

void xmlSchemaAugmentImportedIDC(uint64_t a1, void *data)
{
  uint64_t v2 = *(xmlHashTable **)(*(void *)(a1 + 80) + 144LL);
  if (v2) {
    xmlHashScan(v2, (xmlHashScanner)xmlSchemaAugmentIDC, data);
  }
}

uint64_t xmlSchemaXPathEvaluate(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 208);
  if (!v2) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  if (a2 == 2) {
    int v7 = *(_DWORD *)(a1 + 172) + 1;
  }
  else {
    int v7 = *(_DWORD *)(a1 + 172);
  }
  uint64_t v8 = &xmlRealloc;
  uint64_t v9 = *(void *)(a1 + 208);
  while (1)
  {
    uint64_t v10 = *(xmlStreamCtxt **)(v9 + 56);
    uint64_t v11 = *(void *)(a1 + 192);
    int v12 = *(const xmlChar **)(v11 + 24);
    int v13 = *(const xmlChar **)(v11 + 32);
    if (a2 != 1) {
      break;
    }
    int v14 = xmlStreamPush(v10, v12, v13);
    if (v14) {
      goto LABEL_10;
    }
LABEL_28:
    uint64_t v9 = *(void *)(v9 + 8);
    if (!v9)
    {
      uint64_t v9 = *(void *)(a1 + 208);
      uint64_t v6 = v2;
    }

    if (v9 == v6) {
      return v5;
    }
  }

  int v14 = xmlStreamPushAttr(v10, v12, v13);
  if (!v14) {
    goto LABEL_28;
  }
LABEL_10:
  if (v14 == -1)
  {
    xmlSchemaInternalErr2( (_DWORD *)a1,  (const xmlChar *)"xmlSchemaXPathEvaluate",  (const xmlChar *)"calling xmlStreamPush()",  0LL);
    return 0xFFFFFFFFLL;
  }

  int v15 = *(_DWORD **)(v9 + 24);
  if (v15)
  {
    int v16 = *(_DWORD *)(v9 + 36);
    if (v16 <= *(_DWORD *)(v9 + 32))
    {
      *(_DWORD *)(v9 + 36) = 2 * v16;
      int v15 = (_DWORD *)((uint64_t (*)(void))*v8)();
      *(void *)(v9 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v15;
      if (!v15)
      {
        uint64_t v22 = "re-allocating the state object history";
        goto LABEL_35;
      }
    }

    goto LABEL_17;
  }

  int v15 = xmlMalloc(0x14uLL);
  *(void *)(v9 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v15;
  if (v15)
  {
    *(_DWORD *)(v9 + 36) = 5;
LABEL_17:
    uint64_t v17 = *(int *)(v9 + 32);
    *(_DWORD *)(v9 + 32) = v17 + 1;
    v15[v17] = v7;
    if (*(_DWORD *)v9 == 2)
    {
      if (!(_DWORD)v5)
      {
        uint64_t v20 = *(void *)(a1 + 192);
        int v21 = *(_DWORD *)(v20 + 64);
        if ((v21 & 0x10) == 0) {
          *(_DWORD *)(v20 + 6xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v21 | 0x10;
        }
      }

      uint64_t v5 = (v5 + 1);
    }

    else if (*(_DWORD *)v9 == 1)
    {
      int v18 = v8;
      int v19 = (void *)(*(void *)(*(void *)(*(void *)(v9 + 40) + 24LL) + 8LL) + 56LL);
      while (1)
      {
        int v19 = (void *)*v19;
        if (!v19) {
          break;
        }
      }

      uint64_t v8 = v18;
    }

    goto LABEL_28;
  }

  uint64_t v22 = "allocating the state object history";
LABEL_35:
  __xmlSimpleError(17, 2, 0, 0LL, (uint64_t)v22);
  return 0xFFFFFFFFLL;
}

uint64_t xmlSchemaVAttributesComplex(uint64_t a1)
{
  uint64_t v86 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(*(void *)(a1 + 192) + 56LL);
  int v3 = *(uint64_t **)(v2 + 216);
  uint64_t v4 = *(unsigned int *)(a1 + 296);
  int v5 = *(_DWORD *)(a1 + 296);
  uint64_t v83 = v2;
  if (v3)
  {
    uint64_t v6 = *((unsigned int *)v3 + 2);
    if ((int)v6 >= 1)
    {
      for (uint64_t i = 0LL; i != v6; ++i)
      {
        uint64_t v8 = *(void *)(*v3 + 8 * i);
        uint64_t v9 = *(void *)(v8 + 24);
        if ((int)v4 < 1)
        {
LABEL_11:
          int v14 = *(_DWORD *)(v8 + 48);
          if (v14 == 2)
          {
            if (*(void *)(v8 + 56) || *(void *)(v9 + 88))
            {
              FreshAttrInfo = xmlSchemaGetFreshAttrInfo(a1);
              if (!FreshAttrInfo)
              {
LABEL_150:
                xmlSchemaInternalErr2( (_DWORD *)a1,  (const xmlChar *)"xmlSchemaVAttributesComplex",  (const xmlChar *)"calling xmlSchemaGetFreshAttrInfo()",  0LL);
                return 0xFFFFFFFFLL;
              }

              *((_DWORD *)FreshAttrInfo + 22) = 8;
              *((void *)FreshAttrInfo + 9) = v9;
              *((void *)FreshAttrInfo + 1xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v8;
              *((void *)FreshAttrInfo + 7) = *(void *)(v9 + 96);
              *((void *)FreshAttrInfo + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = *(void *)(v9 + 16);
              *((void *)FreshAttrInfo + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = *(void *)(v9 + 112);
            }
          }

          else if (v14 == 1)
          {
            int v15 = xmlSchemaGetFreshAttrInfo(a1);
            if (!v15) {
              goto LABEL_150;
            }
            *((_DWORD *)v15 + 22) = 4;
            *((void *)v15 + 9) = v9;
            *((void *)v15 + 1xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v8;
          }
        }

        else
        {
          uint64_t v10 = 0LL;
          while (1)
          {
            uint64_t v11 = *(void *)(*(void *)(a1 + 288) + v10);
            if (!*(_DWORD *)(v11 + 92))
            {
              int v12 = *(const xmlChar **)(v11 + 24);
              int v13 = *(const xmlChar **)(v9 + 16);
              if (*v12 == *v13
                && xmlStrEqual(v12, v13)
                && xmlStrEqual(*(const xmlChar **)(v11 + 32), *(const xmlChar **)(v9 + 112)))
              {
                break;
              }
            }

            v10 += 8LL;
            if (8 * v4 == v10) {
              goto LABEL_11;
            }
          }

          *(_DWORD *)(v11 + 88) = 2;
          *(void *)(v11 + 72) = v9;
          *(void *)(v11 + 8xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v8;
          *(void *)(v11 + 56) = *(void *)(v9 + 96);
        }
      }

      int v5 = *(_DWORD *)(a1 + 296);
      uint64_t v2 = v83;
    }
  }

  if (!v5) {
    return 0LL;
  }
  if (*(void *)(v2 + 152)) {
    BOOL v17 = (int)v4 < 1;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17) {
    goto LABEL_54;
  }
  uint64_t v18 = 0LL;
  int v19 = 0;
  do
  {
    uint64_t v20 = *(void *)(*(void *)(a1 + 288) + 8 * v18);
    if (*(_DWORD *)(v20 + 88) != 1) {
      goto LABEL_43;
    }
    uint64_t v21 = v2;
    if (xmlSchemaCheckCVCWildcardNamespace(*(void *)(v2 + 152), *(xmlChar **)(v20 + 32)))
    {
      uint64_t v2 = v21;
      goto LABEL_43;
    }

    if (*(_DWORD *)(*(void *)(v21 + 152) + 40LL) == 1)
    {
      uint64_t v2 = v21;
      *(_DWORD *)(v20 + 88) = 13;
      goto LABEL_43;
    }

    AttributeDecl = xmlSchemaGetAttributeDecl( *(void *)(a1 + 40),  *(const xmlChar **)(v20 + 24),  *(xmlChar **)(v20 + 32));
    *(void *)(v20 + 72) = AttributeDecl;
    if (AttributeDecl)
    {
      *(_DWORD *)(v20 + 88) = 2;
      uint64_t v23 = AttributeDecl[12];
      *(void *)(v20 + 56) = v23;
      if (v19)
      {
        *(_DWORD *)(v20 + 88) = 15;
        xmlGenericErrorFunc v24 = *__xmlGenericError();
        uint64_t v25 = *__xmlGenericErrorContext();
        v24( v25,  "Unimplemented block at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemas.c",  25708);
LABEL_37:
        int v19 = 1;
LABEL_38:
        uint64_t v2 = v83;
        goto LABEL_43;
      }

      if (!v3) {
        goto LABEL_37;
      }
      uint64_t v27 = *((unsigned int *)v3 + 2);
      uint64_t v2 = v83;
      if ((int)v27 >= 1)
      {
        uint64_t v28 = *v3;
        while (!xmlSchemaIsDerivedFromBuiltInType(*(void *)(*(void *)(*(void *)v28 + 24LL) + 96LL)))
        {
          v28 += 8LL;
          int v19 = 1;
          --v27;
          uint64_t v2 = v83;
          if (!v27) {
            goto LABEL_43;
          }
        }

        *(_DWORD *)(v20 + 88) = 16;
        xmlGenericErrorFunc v29 = *__xmlGenericError();
        int v30 = *__xmlGenericErrorContext();
        v29( v30,  "Unimplemented block at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemas.c",  25726);
        goto LABEL_37;
      }

      int v19 = 1;
    }

    else
    {
      uint64_t v2 = v83;
      if (*(_DWORD *)(*(void *)(v83 + 152) + 40LL) == 2) {
        int v26 = 14;
      }
      else {
        int v26 = 10;
      }
      *(_DWORD *)(v20 + 88) = v26;
    }

LABEL_124:
        for (uint64_t j = *(void *)(a1 + 208); j; uint64_t j = *(void *)(j + 8))
        {
          if (xmlStreamPop(*(xmlStreamCtxtPtr *)(j + 56)) == -1) {
            break;
          }
        }

        goto LABEL_127;
      }

      uint64_t v45 = *(xmlSchemaVal **)(a1 + 136);
      if (v45)
      {
        xmlSchemaFreeValue(v45);
        *(void *)(a1 + 136) = 0LL;
      }

      if ((*(_BYTE *)(*(void *)(v37 + 72) + 121LL) & 2) != 0
        || (uint64_t v46 = *(void *)(v37 + 80)) != 0 && (*(_BYTE *)(v46 + 33) & 2) != 0)
      {
        int v47 = 1;
      }

      else
      {
        if (!v41)
        {
          int v48 = xmlSchemaVCheckCVCSimpleType( a1,  *(xmlNode **)(v37 + 8),  *(void *)(v37 + 56),  *(xmlChar **)(v37 + 40),  0LL,  1u,  0,  0);
          int v47 = 0;
          if (v48) {
            goto LABEL_89;
          }
          goto LABEL_105;
        }

        int v47 = 0;
      }

      *(_DWORD *)(v37 + 64) |= 0x10u;
      int v48 = xmlSchemaVCheckCVCSimpleType( a1,  *(xmlNode **)(v37 + 8),  *(void *)(v37 + 56),  *(xmlChar **)(v37 + 40),  (xmlSchemaValPtr *)(v37 + 48),  1u,  1,  0);
      if (v48)
      {
LABEL_89:
        if (v48 == -1)
        {
          int v82 = "calling xmlSchemaStreamValidateSimpleTypeValue()";
          goto LABEL_152;
        }

        *(_DWORD *)(v37 + 88) = 5;
        goto LABEL_121;
      }

LABEL_127:
    ++v35;
    uint64_t v71 = *(int *)(a1 + 296);
    if (v35 < v71) {
      continue;
    }
    break;
  }

  uint64_t v72 = v83;
  if ((int)v71 >= 1)
  {
    uint64_t v73 = 0LL;
    do
    {
      uint64_t v74 = *(void *)(*(void *)(a1 + 288) + 8 * v73);
      unsigned int v75 = *(_DWORD *)(v74 + 88);
      if (v75 > 0x11 || ((1 << v75) & 0x26004) == 0)
      {
        *(void *)(a1 + 192) = v74;
        switch(v75)
        {
          case 1u:
            if (!*(_DWORD *)(v74 + 92))
            {
              if (*(void *)(v72 + 152)) {
                int v77 = 1867;
              }
              else {
                int v77 = 1866;
              }
              xmlSchemaIllegalAttrErr((_DWORD *)a1, v77, v74);
              goto LABEL_146;
            }

            break;
          case 4u:
            *(void *)char __str = 0LL;
            *(void *)(a1 + 192) = *(void *)(*(void *)(a1 + 176) + 8LL * *(int *)(a1 + 172));
            int v78 = xmlSchemaFormatQName( (void **)__str,  *(const xmlChar **)(*(void *)(v74 + 72) + 112LL),  *(xmlChar **)(*(void *)(v74 + 72) + 16LL));
            xmlSchemaCustomErr4( (_DWORD *)a1,  1868,  0LL,  0LL,  (const xmlChar *)"The attribute '%s' is required but missing",  v78,  0LL,  0LL,  0LL);
            if (*(void *)__str) {
              ((void (*)(void))*v36)();
            }
            goto LABEL_146;
          case 6u:
            int v79 = (_DWORD *)a1;
            int v80 = 1862;
            BOOL v81 = "The type definition is absent";
            goto LABEL_145;
          case 7u:
            xmlSchemaCustomErr4( (_DWORD *)a1,  1874,  0LL,  0LL,  (const xmlChar *)"The value '%s' does not match the fixed value constraint '%s'",  *(const xmlChar **)(v74 + 40),  *(xmlChar **)(v74 + 96),  0LL,  0LL);
            goto LABEL_146;
          case 0xAu:
            int v79 = (_DWORD *)a1;
            int v80 = 1878;
            BOOL v81 = "No matching global attribute declaration available, but demanded by the strict wildcard";
LABEL_145:
            xmlSchemaCustomErr4(v79, v80, 0LL, 0LL, (const xmlChar *)v81, 0LL, 0LL, 0LL, 0LL);
LABEL_146:
            uint64_t v72 = v83;
            break;
          default:
            break;
        }
      }

      ++v73;
    }

    while (v73 < *(int *)(a1 + 296));
  }

uint64_t xmlSchemaVAttributesSimple(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 296);
  if (!v1) {
    return 0LL;
  }
  if (v1 < 1)
  {
    uint64_t v4 = 0LL;
  }

  else
  {
    uint64_t v3 = 0LL;
    uint64_t v4 = 0LL;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 288) + 8 * v3);
      if (!*(_DWORD *)(v5 + 92))
      {
        *(void *)(a1 + 192) = v5;
        uint64_t v4 = 1827LL;
        xmlSchemaIllegalAttrErr((_DWORD *)a1, 1827, v5);
        int v1 = *(_DWORD *)(a1 + 296);
      }

      ++v3;
    }

    while (v3 < v1);
  }

  *(void *)(a1 + 192) = *(void *)(*(void *)(a1 + 176) + 8LL * *(int *)(a1 + 172));
  return v4;
}

_DWORD *xmlSchemaAugmentIDC(_DWORD *a1, uint64_t a2)
{
  uint64_t result = xmlMalloc(0x18uLL);
  if (result)
  {
    result[4] = -1;
    *(void *)uint64_t result = *(void *)(a2 + 200);
    *((void *)result + 1) = a1;
    *(void *)(a2 + 20xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = result;
    if (!*(_DWORD *)(a2 + 320) && *a1 == 24) {
      *(_DWORD *)(a2 + 32xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = 1;
    }
  }

  else
  {
    if (a2)
    {
      int v5 = *(_DWORD *)(a2 + 108) + 1;
      *(_DWORD *)(a2 + 10xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 1818;
      *(_DWORD *)(a2 + 108) = v5;
    }

    return (_DWORD *)__xmlSimpleError( 17,  2,  0,  0LL,  (uint64_t)"xmlSchemaAugmentIDC: allocating an augmented IDC definition");
  }

  return result;
}

uint64_t xmlSchemaProcessXSIType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  *(void *)a3 = 0LL;
  *(void *)(a1 + 192) = a2;
  int v7 = *(const xmlChar **)(a2 + 40);
  int v8 = xmlValidateQName(v7, 1);
  if (v8 == -1)
  {
    xmlSchemaInternalErr2( (_DWORD *)a1,  (const xmlChar *)"xmlSchemaValidateElementByDeclaration",  (const xmlChar *)"calling xmlSchemaQNameExpand() to validate the attribute 'xsi:type'",  0LL);
    uint64_t result = 0xFFFFFFFFLL;
  }

  else if (v8 < 1)
  {
    prefix = 0LL;
    uint64_t v11 = xmlSplitQName2(v7, &prefix);
    int v12 = *(xmlDict **)(a1 + 272);
    if (v11)
    {
      int v13 = (xmlChar *)xmlDictLookup(v12, v11, -1);
      xmlFree(v11);
    }

    else
    {
      int v13 = (xmlChar *)xmlDictLookup(v12, v7, -1);
    }

    int v14 = (xmlChar *)xmlSchemaLookupNamespace(a1, prefix);
    if (prefix && (xmlFree(prefix), !v14))
    {
      xmlSchemaTypePtr BuiltInType = xmlSchemaGetBuiltInType(XML_SCHEMAS_QNAME);
      xmlSchemaCustomErr4( (_DWORD *)a1,  1824,  0LL,  BuiltInType,  (const xmlChar *)"The QName value '%s' has no corresponding namespace declaration in scope",  v7,  0LL,  0LL,  0LL);
      uint64_t result = 2LL;
    }

    else
    {
      Type = xmlSchemaGetType(*(void *)(a1 + 40), v13, v14);
      *(void *)a3 = Type;
      if (Type)
      {
        if (a4)
        {
          int v16 = *(_DWORD *)(a4 + 88);
          if ((v16 & 0x800) != 0 || (*(_BYTE *)(*(void *)(a4 + 56) + 90LL) & 4) != 0) {
            char v17 = 2;
          }
          else {
            char v17 = 0;
          }
          uint64_t v21 = *(void *)(a4 + 56);
          if ((v16 & 0x1000) != 0 || (*(_BYTE *)(v21 + 90) & 8) != 0) {
            v17 |= 1u;
          }
          uint64_t result = xmlSchemaCheckCOSDerivedOK((xmlSchemaParserCtxt *)a1, (uint64_t)Type, v21, v17);
          if ((_DWORD)result)
          {
            prefix = 0LL;
            uint64_t v22 = xmlSchemaFormatQName( (void **)&prefix,  *(const xmlChar **)(*(void *)a3 + 208LL),  *(xmlChar **)(*(void *)a3 + 16LL));
            xmlSchemaCustomErr4( (_DWORD *)a1,  1852,  0LL,  0LL,  (const xmlChar *)"The type definition '%s', specified by xsi:type, is blocked or not validly derived from t he type definition of the element declaration",  v22,  0LL,  0LL,  0LL);
            if (prefix) {
              xmlFree(prefix);
            }
            uint64_t result = *(unsigned int *)(a1 + 104);
            *(void *)a3 = 0LL;
          }
        }

        else
        {
          uint64_t result = 0LL;
        }
      }

      else
      {
        prefix = 0LL;
        xmlSchemaTypePtr v18 = xmlSchemaGetBuiltInType(XML_SCHEMAS_QNAME);
        int v19 = xmlSchemaFormatQName((void **)&prefix, v14, v13);
        xmlSchemaCustomErr4( (_DWORD *)a1,  1851,  0LL,  v18,  (const xmlChar *)"The QName value '%s' of the xsi:type attribute does not resolve to a type definition",  v19,  0LL,  0LL,  0LL);
        if (prefix) {
          xmlFree(prefix);
        }
        uint64_t result = *(unsigned int *)(a1 + 104);
      }
    }
  }

  else
  {
    xmlSchemaTypePtr v9 = xmlSchemaGetBuiltInType(XML_SCHEMAS_QNAME);
    xmlSchemaSimpleTypeErr((_DWORD *)a1, 1824, 0LL, v7, (uint64_t)v9);
    uint64_t result = 1LL;
  }

  *(void *)(a1 + 192) = *(void *)(*(void *)(a1 + 176) + 8LL * *(int *)(a1 + 172));
  return result;
}

void xmlSchemaVContentModelCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a4 + 8xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = a3;
}

void xmlSchemaComplexTypeErr(_DWORD *a1, const xmlChar *a2, int a3, int a4, uint64_t a5)
{
  cur = 0LL;
  int v38 = 0LL;
  xmlSchemaFormatNodeForError((void **)&cur, (uint64_t)a1, 0LL);
  cur = xmlStrcat(cur, a2);
  uint64_t v10 = xmlStrcat(cur, (const xmlChar *)".");
  cur = v10;
  uint64_t v11 = (a4 + a3);
  if ((int)v11 < 1)
  {
    uint64_t v36 = xmlStrcat(v10, (const xmlChar *)"\n");
    cur = v36;
    goto LABEL_46;
  }

  if ((_DWORD)v11 == 1) {
    int v12 = " Expected is(";
  }
  else {
    int v12 = " Expected is one of(";
  }
  unint64_t v13 = 0LL;
  int v38 = xmlStrdup((const xmlChar *)v12);
  int64_t v14 = a3;
  do
  {
    int v15 = *(unsigned __int8 **)(a5 + 8 * v13);
    if (!v15) {
      goto LABEL_41;
    }
    int v16 = *v15;
    if (v16 == 110)
    {
      if (v15[1] != 111 || v15[2] != 116 || v15[3] != 32)
      {
        int v16 = 110;
        goto LABEL_15;
      }

      int v38 = xmlStrcat(v38, (const xmlChar *)"##other");
      int v17 = v15[4];
      v15 += 4;
      int v16 = v17;
    }

    if (v16 == 42)
    {
      xmlSchemaTypePtr v18 = xmlStrdup((const xmlChar *)"*");
      int v19 = v15 + 1;
      goto LABEL_19;
    }

uint64_t xmlSchemaIDCAddStateObject(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8 = *(_OWORD **)(a1 + 216);
  if (v8)
  {
    *(void *)(a1 + 216) = *((void *)v8 + 1);
    *((void *)v8 + 1) = 0LL;
  }

  else
  {
    xmlSchemaTypePtr v9 = xmlMalloc(0x40uLL);
    if (!v9)
    {
      __xmlSimpleError(17, 2, 0, 0LL, (uint64_t)"allocating an IDC state object");
      return 0xFFFFFFFFLL;
    }

    int v8 = v9;
    v9[2] = 0u;
    v9[3] = 0u;
    _OWORD *v9 = 0u;
    v9[1] = 0u;
  }

  uint64_t v10 = *(void *)(a1 + 208);
  if (v10) {
    *((void *)v8 + 1) = v10;
  }
  *(void *)(a1 + 208) = v8;
  uint64_t v11 = (xmlStreamCtxt *)*((void *)v8 + 7);
  if (v11) {
    xmlFreeStreamCtxt(v11);
  }
  xmlStreamCtxtPtr StreamCtxt = xmlPatternGetStreamCtxt(*(xmlPatternPtr *)(a3 + 32));
  *((void *)v8 + 7) = StreamCtxt;
  if (StreamCtxt)
  {
    uint64_t result = 0LL;
    *(_DWORD *)int v8 = a4;
    *((_DWORD *)v8 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = *(_DWORD *)(a1 + 172);
    *((void *)v8 + 5) = a2;
    *((void *)v8 + 6) = a3;
    *((_DWORD *)v8 + 8) = 0;
    return result;
  }

  xmlSchemaInternalErr2( (_DWORD *)a1,  (const xmlChar *)"xmlSchemaIDCAddStateObject",  (const xmlChar *)"failed to create an XPath validation context",  0LL);
  return 0xFFFFFFFFLL;
}

uint64_t xmlSchemaXPathProcessHistory(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 208);
  if (!v2) {
    return 0LL;
  }
  int v5 = 0LL;
  uint64_t v6 = *(void *)(*(void *)(a1 + 192) + 56LL);
  while (1)
  {
    if (xmlStreamPop(*(xmlStreamCtxtPtr *)(v2 + 56)) == -1)
    {
      int v69 = "calling xmlStreamPop()";
      goto LABEL_124;
    }

    int v7 = *(_DWORD *)(v2 + 32);
    if (v7) {
      break;
    }
LABEL_113:
    if (*(_DWORD *)(v2 + 16) == a2)
    {
      if (*(void *)(a1 + 208) != v2) {
        xmlSchemaInternalErr2( (_DWORD *)a1,  (const xmlChar *)"xmlSchemaXPathProcessHistory",  (const xmlChar *)"The state object to be removed is not the first in the list",  0LL);
      }
      uint64_t v66 = *(void *)(v2 + 8);
      *(void *)(a1 + 208) = v66;
      *(void *)(v2 + 8) = *(void *)(a1 + 216);
      *(void *)(a1 + 216) = v2;
      uint64_t v2 = v66;
      goto LABEL_7;
    }

void xmlSchemaIllegalAttrErr(_DWORD *a1, int a2, uint64_t a3)
{
  uint64_t v9 = 0LL;
  cur = 0LL;
  xmlSchemaFormatNodeForError((void **)&cur, (uint64_t)a1, 0LL);
  uint64_t v6 = xmlStrcat(cur, (const xmlChar *)"The attribute '%s' is not allowed.\n");
  cur = v6;
  if (a3)
  {
    int v7 = xmlSchemaFormatQName(&v9, *(const xmlChar **)(a3 + 32), *(xmlChar **)(a3 + 24));
    uint64_t v8 = v9;
    xmlSchemaErr4Line(a1, 2, a2, 0LL, 0, (const char *)v6, v7, 0LL, 0LL, 0LL);
    if (v8) {
      xmlFree(v8);
    }
  }

  else
  {
    xmlSchemaErr4Line(a1, 2, a2, 0LL, 0, (const char *)v6, 0LL, 0LL, 0LL, 0LL);
  }

  if (cur) {
    xmlFree(cur);
  }
}

xmlChar *xmlSchemaFormatIDCKeySequence_1(_DWORD *a1, xmlChar **a2, uint64_t a3, int a4, int a5)
{
  add = 0LL;
  int v10 = xmlStrdup((const xmlChar *)"[");
  *a2 = v10;
  if (a4 >= 1)
  {
    unint64_t v11 = 0LL;
    do
    {
      *a2 = xmlStrcat(*a2, (const xmlChar *)"'");
      uint64_t v12 = *(void *)(a3 + 8 * v11);
      uint64_t v13 = *(xmlSchemaVal **)(v12 + 8);
      if (a5)
      {
        int64_t v14 = *(xmlSchemaVal **)(v12 + 8);
        int WhiteSpaceFacetValue = 3;
        int v16 = 1;
      }

      else
      {
        int WhiteSpaceFacetValue = xmlSchemaGetWhiteSpaceFacetValue(*(_DWORD **)v12);
        int64_t v14 = v13;
        int v16 = 0;
      }

      if (xmlSchemaGetCanonValueWhtspExt_1(v14, WhiteSpaceFacetValue, &add, v16))
      {
        xmlSchemaInternalErr2( a1,  (const xmlChar *)"xmlSchemaFormatIDCKeySequence",  (const xmlChar *)"failed to compute a canonical value",  0LL);
        uint64_t v17 = *a2;
        uint64_t v18 = (xmlChar *)"???";
      }

      else
      {
        uint64_t v17 = *a2;
        uint64_t v18 = add;
      }

      int v19 = xmlStrcat(v17, v18);
      *a2 = v19;
      else {
        uint64_t v20 = "', ";
      }
      *a2 = xmlStrcat(v19, (const xmlChar *)v20);
      if (add)
      {
        xmlFree(add);
        add = 0LL;
      }

      ++v11;
    }

    while (a4 != v11);
    int v10 = *a2;
  }

  uint64_t result = xmlStrcat(v10, (const xmlChar *)"]");
  *a2 = result;
  return result;
}

uint64_t xmlSchemaVCheckINodeDataType(uint64_t a1, uint64_t a2, uint64_t a3, xmlChar *a4)
{
  if ((*(_BYTE *)(a2 + 64) & 0x10) != 0)
  {
    uint64_t v4 = (xmlSchemaValPtr *)(a2 + 48);
    int v5 = 1;
  }

  else
  {
    uint64_t v4 = 0LL;
    int v5 = 0;
  }

  return xmlSchemaVCheckCVCSimpleType(a1, 0LL, a3, a4, v4, 1u, v5, 0);
}

uint64_t xmlSchemaCheckCOSValidDefault(uint64_t a1, xmlChar *a2, xmlSchemaValPtr *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 192) + 56LL);
  int v7 = *(_DWORD *)v6;
  if (*(_DWORD *)v6 != 5 && *(_DWORD *)(v6 + 160) != 45
    || ((int v8 = *(_DWORD *)(v6 + 92), v8 != 6) ? (v9 = v8 == 4) : (v9 = 1),
        v9 || v8 == 3 && xmlSchemaIsParticleEmptiable(*(void *)(v6 + 56))))
  {
    if (v7 == 4 || v7 == 1 && *(_DWORD *)(v6 + 160) != 45)
    {
      uint64_t v11 = a1;
      uint64_t v10 = v6;
    }

    else
    {
      if ((*(_DWORD *)(v6 + 92) | 2) != 6) {
        return 0LL;
      }
      uint64_t v10 = *(void *)(v6 + 192);
      uint64_t v11 = a1;
    }

    uint64_t v12 = xmlSchemaVCheckCVCSimpleType(v11, 0LL, v10, a2, a3, 1u, 1, 0);
    if ((v12 & 0x80000000) != 0) {
      xmlSchemaInternalErr2( (_DWORD *)a1,  (const xmlChar *)"xmlSchemaCheckCOSValidDefault",  (const xmlChar *)"calling xmlSchemaVCheckCVCSimpleType()",  0LL);
    }
  }

  else
  {
    uint64_t v12 = 3059LL;
    xmlSchemaCustomErr4( (_DWORD *)a1,  3059,  0LL,  0LL,  (const xmlChar *)"For a string to be a valid default, the type definition must be a simple type or a complex type w ith simple content or mixed content and a particle emptiable",  0LL,  0LL,  0LL,  0LL);
  }

  return v12;
}

void *xmlSchemaIDCNewBinding(uint64_t a1)
{
  uint64_t v2 = xmlMalloc(0x28uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    v2[4] = 0LL;
    *(_OWORD *)uint64_t v2 = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    v2[1] = a1;
  }

  else
  {
    __xmlSimpleError(17, 2, 0, 0LL, (uint64_t)"allocating a PSVI IDC binding item");
  }

  return v3;
}

void xmlSchemaKeyrefErr(uint64_t a1, uint64_t a2, const xmlChar *a3, xmlChar *a4, xmlChar *a5)
{
  int v16 = 0LL;
  uint64_t v10 = xmlStrdup((const xmlChar *)"Element '%s': ");
  uint64_t v11 = xmlStrcat(v10, a3);
  uint64_t v12 = xmlStrcat(v11, (const xmlChar *)".\n");
  int v13 = *(_DWORD *)(a2 + 16);
  uint64_t v14 = **(void **)(a1 + 312) + 8LL * *(int *)(a2 + 20);
  uint64_t v15 = xmlSchemaFormatQName(&v16, *(const xmlChar **)(v14 + 8), *(xmlChar **)v14);
  xmlSchemaErr4Line((_DWORD *)a1, 2, 1877, 0LL, v13, (const char *)v12, v15, a4, a5, 0LL);
  if (v16) {
    xmlFree(v16);
  }
  if (v12) {
    xmlFree(v12);
  }
}

void xmlSchemaInitTypes(void)
{
  if ((xmlSchemaTypesInitialized & 1) == 0)
  {
    xmlSchemaTypesBanuint64_t k = (uint64_t)xmlHashCreate(40);
    inited = xmlSchemaInitBasicType((const xmlChar *)"anyType", 0x2Du, 0LL);
    xmlSchemaTypeAnyTypeDef = (uint64_t)inited;
    *((void *)inited + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = inited;
    inited[23] = 3;
    int v1 = xmlSchemaAddParticle_0();
    if (v1)
    {
      uint64_t v2 = v1;
      *(void *)(xmlSchemaTypeAnyTypeDef + 56) = v1;
      uint64_t v3 = xmlMalloc(0x28uLL);
      if (v3)
      {
        uint64_t v4 = v3;
        v3[4] = 0LL;
        *(_OWORD *)uint64_t v3 = 0u;
        *((_OWORD *)v3 + 1) = 0u;
        *(_DWORD *)uint64_t v3 = 6;
        *((void *)v2 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = v3;
        int v5 = xmlSchemaAddParticle_0();
        if (!v5) {
          return;
        }
        uint64_t v6 = v5;
        *((void *)v5 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0x4000000000000000LL;
        v4[3] = v5;
        int v7 = xmlMalloc(0x48uLL);
        if (v7)
        {
          v7[8] = 0LL;
          *((_OWORD *)v7 + 2) = 0u;
          *((_OWORD *)v7 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
          *(_OWORD *)int v7 = 0u;
          *((_OWORD *)v7 + 1) = 0u;
          *(_DWORD *)int v7 = 2;
          v7[5] = 0x100000002LL;
          *((void *)v6 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = v7;
          int v8 = xmlMalloc(0x48uLL);
          if (v8)
          {
            v8[8] = 0LL;
            *((_OWORD *)v8 + 2) = 0u;
            *((_OWORD *)v8 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
            *(_OWORD *)int v8 = 0u;
            *((_OWORD *)v8 + 1) = 0u;
            v8[5] = 0x100000002LL;
            uint64_t v9 = xmlSchemaTypeAnyTypeDef;
            *(void *)(xmlSchemaTypeAnyTypeDef + 152) = v8;
            xmlSchemaTypeAnySimpleTypeDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"anySimpleType", 0x2Eu, v9);
            xmlSchemaTypeStringDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"string",  1u,  xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeDecimalDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"decimal",  3u,  xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeDateDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"date",  0xAu,  xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeDatetimeDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"dateTime",  0xBu,  xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeTimeDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"time",  4u,  xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeGYearDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"gYear",  8u,  xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeGYearMonthDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"gYearMonth",  9u,  xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeGMonthDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"gMonth",  6u,  xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeGMonthDayDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"gMonthDay",  7u,  xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeGDayDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"gDay",  5u,  xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeDurationDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"duration",  0xCu,  xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeFloatDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"float",  0xDu,  xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeDoubleDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"double",  0xEu,  xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeBooleanDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"BOOLean",  0xFu,  xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeAnyURIDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"anyURI",  0x1Du,  xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeHexBinaryDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"hexBinary",  0x2Bu,  xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeBase64BinaryDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"base64Binary",  0x2Cu,  xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeNotationDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"NOTATION",  0x1Cu,  xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeQNameDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"QName",  0x15u,  xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeIntegerDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"integer",  0x1Eu,  xmlSchemaTypeDecimalDef);
            xmlSchemaTypeNonPositiveIntegerDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"nonPositiveInteger",  0x1Fu,  xmlSchemaTypeIntegerDef);
            xmlSchemaTypeNegativeIntegerDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"negativeInteger",  0x20u,  xmlSchemaTypeNonPositiveIntegerDef);
            xmlSchemaTypeLongDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"long",  0x25u,  xmlSchemaTypeIntegerDef);
            xmlSchemaTypeIntDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"int", 0x23u, xmlSchemaTypeLongDef);
            xmlSchemaTypeShortDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"short",  0x27u,  xmlSchemaTypeIntDef);
            xmlSchemaTypeByteDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"byte",  0x29u,  xmlSchemaTypeShortDef);
            xmlSchemaTypeNonNegativeIntegerDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"nonNegativeInteger",  0x21u,  xmlSchemaTypeIntegerDef);
            xmlSchemaTypeUnsignedLongDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"unsignedLong",  0x26u,  xmlSchemaTypeNonNegativeIntegerDef);
            xmlSchemaTypeUnsignedIntDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"unsignedInt",  0x24u,  xmlSchemaTypeUnsignedLongDef);
            xmlSchemaTypeUnsignedShortDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"unsignedShort",  0x28u,  xmlSchemaTypeUnsignedIntDef);
            xmlSchemaTypeUnsignedByteDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"unsignedByte",  0x2Au,  xmlSchemaTypeUnsignedShortDef);
            xmlSchemaTypePositiveIntegerDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"positiveInteger",  0x22u,  xmlSchemaTypeNonNegativeIntegerDef);
            xmlSchemaTypeNormStringDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"normalizedString",  2u,  xmlSchemaTypeStringDef);
            xmlSchemaTypeTokenDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"token",  0x10u,  xmlSchemaTypeNormStringDef);
            xmlSchemaTypeLanguageDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"language",  0x11u,  xmlSchemaTypeTokenDef);
            xmlSchemaTypeNameDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"Name",  0x14u,  xmlSchemaTypeTokenDef);
            xmlSchemaTypeNmtokenDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"NMTOKEN",  0x12u,  xmlSchemaTypeTokenDef);
            xmlSchemaTypeNCNameDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"NCName",  0x16u,  xmlSchemaTypeNameDef);
            xmlSchemaTypeIdDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"ID", 0x17u, xmlSchemaTypeNCNameDef);
            xmlSchemaTypeIdrefDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"IDREF",  0x18u,  xmlSchemaTypeNCNameDef);
            xmlSchemaTypeEntityDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"ENTITY",  0x1Au,  xmlSchemaTypeNCNameDef);
            xmlSchemaTypeEntitiesDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"ENTITIES",  0x1Bu,  xmlSchemaTypeAnySimpleTypeDef);
            *(void *)(xmlSchemaTypeEntitiesDef + 56) = xmlSchemaTypeEntityDef;
            xmlSchemaTypeIdrefsDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"IDREFS",  0x19u,  xmlSchemaTypeAnySimpleTypeDef);
            *(void *)(xmlSchemaTypeIdrefsDef + 56) = xmlSchemaTypeIdrefDef;
            xmlSchemaTypeNmtokensDef = (uint64_t)xmlSchemaInitBasicType( (const xmlChar *)"NMTOKENS",  0x13u,  xmlSchemaTypeAnySimpleTypeDef);
            *(void *)(xmlSchemaTypeNmtokensDef + 56) = xmlSchemaTypeNmtokenDef;
            xmlSchemaTypesInitialized = 1;
            return;
          }

          uint64_t v10 = "could not create an attribute wildcard on anyType";
        }

        else
        {
          uint64_t v10 = "allocating wildcard component";
        }
      }

      else
      {
        uint64_t v10 = "allocating model group component";
      }

      __xmlSimpleError(15, 2, 0, 0LL, (uint64_t)v10);
    }
  }

int *xmlSchemaInitBasicType(const xmlChar *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = (int *)xmlMalloc(0xE0uLL);
  int v7 = v6;
  if (v6)
  {
    *(_OWORD *)uint64_t v6 = 0u;
    *((_OWORD *)v6 + 1) = 0u;
    *((_OWORD *)v6 + 12) = 0u;
    *((_OWORD *)v6 + 1xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
    *((_OWORD *)v6 + 1xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = 0u;
    *((_OWORD *)v6 + 11) = 0u;
    *((_OWORD *)v6 + 8) = 0u;
    *((_OWORD *)v6 + 9) = 0u;
    *((_OWORD *)v6 + 6) = 0u;
    *((_OWORD *)v6 + 7) = 0u;
    *((_OWORD *)v6 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0u;
    *((_OWORD *)v6 + 5) = 0u;
    *((_OWORD *)v6 + 2) = 0u;
    *((_OWORD *)v6 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
    *((void *)v6 + 2) = a1;
    *((void *)v6 + 26) = "http://www.w3.org/2001/XMLSchema";
    int *v6 = 1;
    *((void *)v6 + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = a3;
    v6[23] = 6;
    if (a2 <= 0x2E)
    {
      if (((1LL << a2) & 0x18003020FFFALL) != 0)
      {
        int v8 = v6[22] | 0x4000;
        v6[22] = v8;
        if (a2 <= 0x1B && ((1 << a2) & 0xA080000) != 0) {
          goto LABEL_6;
        }
        goto LABEL_13;
      }

      if (((1LL << a2) & 0xA080000) != 0)
      {
LABEL_6:
        v6[22] |= 0x40u;
        xmlSchemaFacetPtr v9 = xmlSchemaNewFacet();
        uint64_t v10 = v9;
        if (v9)
        {
          v9->int type = XML_SCHEMA_FACET_MINLENGTH;
          uint64_t v11 = xmlMalloc(0x30uLL);
          if (v11)
          {
            v11[1] = 0u;
            v11[2] = 0u;
            _OWORD *v11 = 0u;
            *(_DWORD *)uint64_t v11 = 33;
            v10[7] = v11;
            *((void *)v11 + 2) = 1LL;
          }

          else
          {
            v10[7] = 0LL;
            xmlFree(v10);
            uint64_t v10 = 0LL;
          }
        }

        *((void *)v7 + 15) = v10;
        v7[22] |= 0x8000000u;
        a1 = (const xmlChar *)*((void *)v7 + 2);
        goto LABEL_16;
      }

      if (((1LL << a2) & 0x600000000000LL) != 0)
      {
LABEL_16:
        xmlHashAddEntry2( (xmlHashTablePtr)xmlSchemaTypesBank,  a1,  (const xmlChar *)"http://www.w3.org/2001/XMLSchema",  v7);
        v7[40] = a2;
        return v7;
      }
    }

    int v8 = v6[22];
LABEL_13:
    v6[22] = v8 | 0x100;
    goto LABEL_16;
  }

  __xmlSimpleError(15, 2, 0, 0LL, (uint64_t)"could not initialize basic types");
  return v7;
}

_OWORD *xmlSchemaAddParticle_0()
{
  int v0 = xmlMalloc(0x30uLL);
  int v1 = v0;
  if (v0)
  {
    v0[1] = 0u;
    v0[2] = 0u;
    _OWORD *v0 = 0u;
    *(_DWORD *)int v0 = 25;
    *((void *)v0 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0x100000001LL;
  }

  else
  {
    __xmlSimpleError(15, 2, 0, 0LL, (uint64_t)"allocating particle component");
  }

  return v1;
}

void xmlSchemaCleanupTypes(void)
{
  if (xmlSchemaTypesInitialized == 1)
  {
    xmlSchemaFreeWildcard(*(xmlSchemaWildcardPtr *)(xmlSchemaTypeAnyTypeDef + 152));
    int v0 = *(void ***)(xmlSchemaTypeAnyTypeDef + 56);
    xmlSchemaFreeWildcard(*(xmlSchemaWildcardPtr *)(*((void *)v0[3] + 3) + 24LL));
    xmlFree(*((void **)v0[3] + 3));
    xmlFree(v0[3]);
    xmlFree(v0);
    *(void *)(xmlSchemaTypeAnyTypeDef + 56) = 0LL;
    xmlHashFree((xmlHashTablePtr)xmlSchemaTypesBank, (xmlHashDeallocator)xmlSchemaFreeTypeEntry);
    xmlSchemaTypesInitialized = 0;
  }

int xmlSchemaIsBuiltInTypeFacet(xmlSchemaTypePtr type, int facetType)
{
  if (!type || type->type != XML_SCHEMA_TYPE_BASIC) {
    return -1;
  }
  int result = 0;
  switch(type->builtInType)
  {
    case 1:
    case 0x15:
    case 0x1C:
    case 0x1D:
    case 0x2B:
    case 0x2C:
      BOOL v4 = (facetType - 1006) >= 6;
      goto LABEL_8;
    case 3:
      BOOL v4 = (facetType - 1000) >= 9;
LABEL_8:
      int result = !v4;
      break;
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
      else {
        int result = dword_181A37E90[facetType - 1000];
      }
      break;
    case 0xF:
      int result = ((facetType - 1006) & 0xFFFFFFFD) == 0;
      break;
    default:
      return result;
  }

  return result;
}

xmlSchemaTypePtr xmlSchemaGetBuiltInType(xmlSchemaValType type)
{
  if ((xmlSchemaTypesInitialized & 1) == 0) {
    xmlSchemaInitTypes();
  }
  switch(type)
  {
    case XML_SCHEMAS_STRING:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeStringDef;
      break;
    case XML_SCHEMAS_NORMSTRING:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeNormStringDef;
      break;
    case XML_SCHEMAS_DECIMAL:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeDecimalDef;
      break;
    case XML_SCHEMAS_TIME:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeTimeDef;
      break;
    case XML_SCHEMAS_GDAY:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeGDayDef;
      break;
    case XML_SCHEMAS_GMONTH:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeGMonthDef;
      break;
    case XML_SCHEMAS_GMONTHDAY:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeGMonthDayDef;
      break;
    case XML_SCHEMAS_GYEAR:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeGYearDef;
      break;
    case XML_SCHEMAS_GYEARMONTH:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeGYearMonthDef;
      break;
    case XML_SCHEMAS_DATE:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeDateDef;
      break;
    case XML_SCHEMAS_DATETIME:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeDatetimeDef;
      break;
    case XML_SCHEMAS_DURATION:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeDurationDef;
      break;
    case XML_SCHEMAS_FLOAT:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeFloatDef;
      break;
    case XML_SCHEMAS_DOUBLE:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeDoubleDef;
      break;
    case XML_SCHEMAS_BOOLEAN:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeBooleanDef;
      break;
    case XML_SCHEMAS_TOKEN:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeTokenDef;
      break;
    case XML_SCHEMAS_LANGUAGE:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeLanguageDef;
      break;
    case XML_SCHEMAS_NMTOKEN:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeNmtokenDef;
      break;
    case XML_SCHEMAS_NMTOKENS:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeNmtokensDef;
      break;
    case XML_SCHEMAS_NAME:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeNameDef;
      break;
    case XML_SCHEMAS_QNAME:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeQNameDef;
      break;
    case XML_SCHEMAS_NCNAME:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeNCNameDef;
      break;
    case XML_SCHEMAS_ID:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeIdDef;
      break;
    case XML_SCHEMAS_IDREF:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeIdrefDef;
      break;
    case XML_SCHEMAS_IDREFS:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeIdrefsDef;
      break;
    case XML_SCHEMAS_ENTITY:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeEntityDef;
      break;
    case XML_SCHEMAS_ENTITIES:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeEntitiesDef;
      break;
    case XML_SCHEMAS_NOTATION:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeNotationDef;
      break;
    case XML_SCHEMAS_ANYURI:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeAnyURIDef;
      break;
    case XML_SCHEMAS_INTEGER:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeIntegerDef;
      break;
    case XML_SCHEMAS_NPINTEGER:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeNonPositiveIntegerDef;
      break;
    case XML_SCHEMAS_NINTEGER:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeNegativeIntegerDef;
      break;
    case XML_SCHEMAS_NNINTEGER:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeNonNegativeIntegerDef;
      break;
    case XML_SCHEMAS_PINTEGER:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypePositiveIntegerDef;
      break;
    case XML_SCHEMAS_INT:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeIntDef;
      break;
    case XML_SCHEMAS_UINT:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeUnsignedIntDef;
      break;
    case XML_SCHEMAS_LONG:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeLongDef;
      break;
    case XML_SCHEMAS_ULONG:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeUnsignedLongDef;
      break;
    case XML_SCHEMAS_SHORT:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeShortDef;
      break;
    case XML_SCHEMAS_USHORT:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeUnsignedShortDef;
      break;
    case XML_SCHEMAS_BYTE:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeByteDef;
      break;
    case XML_SCHEMAS_UBYTE:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeUnsignedByteDef;
      break;
    case XML_SCHEMAS_HEXBINARY:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeHexBinaryDef;
      break;
    case XML_SCHEMAS_BASE64BINARY:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeBase64BinaryDef;
      break;
    case XML_SCHEMAS_ANYTYPE:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeAnyTypeDef;
      break;
    case XML_SCHEMAS_ANYSIMPLETYPE:
      xmlSchemaTypePtr result = (xmlSchemaTypePtr)xmlSchemaTypeAnySimpleTypeDef;
      break;
    default:
      xmlSchemaTypePtr result = 0LL;
      break;
  }

  return result;
}

int xmlSchemaValueAppend(xmlSchemaValPtr prev, xmlSchemaValPtr cur)
{
  int result = -1;
  if (prev)
  {
    if (cur)
    {
      int result = 0;
      *((void *)prev + 1) = cur;
    }
  }

  return result;
}

xmlSchemaValPtr xmlSchemaValueGetNext(xmlSchemaValPtr cur)
{
  if (cur) {
    return (xmlSchemaValPtr)*((void *)cur + 1);
  }
  return cur;
}

const xmlChar *__cdecl xmlSchemaValueGetAsString(const xmlChar *val)
{
  if (val)
  {
    if (*(_DWORD *)val > 0x2Eu || ((1LL << *(_DWORD *)val) & 0x400025D70006LL) == 0) {
      return 0LL;
    }
    else {
      return (const xmlChar *)*((void *)val + 2);
    }
  }

  return val;
}

int xmlSchemaValueGetAsBoolean(xmlSchemaValPtr val)
{
  if (val)
  {
    if (*(_DWORD *)val == 15) {
      LODWORD(val) = *((_DWORD *)val + 4);
    }
    else {
      LODWORD(val) = 0;
    }
  }

  return (int)val;
}

xmlSchemaValPtr xmlSchemaNewStringValue(xmlSchemaValType type, const xmlChar *value)
{
  if (type != XML_SCHEMAS_STRING) {
    return 0LL;
  }
  xmlSchemaValPtr result = (xmlSchemaValPtr)xmlMalloc(0x30uLL);
  if (result)
  {
    *(_OWORD *)xmlSchemaValPtr result = 0u;
    *((_OWORD *)result + 1) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *(_DWORD *)xmlSchemaValPtr result = 1;
    *((void *)result + 2) = value;
  }

  return result;
}

xmlSchemaValPtr xmlSchemaNewNOTATIONValue(const xmlChar *name, const xmlChar *ns)
{
  xmlSchemaValPtr result = (xmlSchemaValPtr)xmlMalloc(0x30uLL);
  if (result)
  {
    *(_OWORD *)xmlSchemaValPtr result = 0u;
    *((_OWORD *)result + 1) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *(_DWORD *)xmlSchemaValPtr result = 28;
    *((void *)result + 2) = name;
    if (ns) {
      *((void *)result + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = ns;
    }
  }

  return result;
}

double xmlSchemaNewValue(int a1)
{
  uint64_t v2 = xmlMalloc(0x30uLL);
  if (v2)
  {
    double result = 0.0;
    v2[1] = 0u;
    v2[2] = 0u;
    *uint64_t v2 = 0u;
    *(_DWORD *)uint64_t v2 = a1;
  }

  return result;
}

xmlSchemaValPtr xmlSchemaNewQNameValue(const xmlChar *namespaceName, const xmlChar *localName)
{
  xmlSchemaValPtr result = (xmlSchemaValPtr)xmlMalloc(0x30uLL);
  if (result)
  {
    *(_OWORD *)xmlSchemaValPtr result = 0u;
    *((_OWORD *)result + 1) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *(_DWORD *)xmlSchemaValPtr result = 21;
    *((void *)result + 2) = localName;
    *((void *)result + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = namespaceName;
  }

  return result;
}

void xmlSchemaFreeValue(xmlSchemaValPtr val)
{
  if (val)
  {
    xmlSchemaValPtr v1 = val;
    do
    {
      switch(*(_DWORD *)v1)
      {
        case 1:
        case 2:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1D:
        case 0x2B:
        case 0x2C:
        case 0x2E:
          goto LABEL_4;
        case 0x15:
        case 0x1C:
          BOOL v4 = (void *)*((void *)v1 + 3);
          if (v4) {
            xmlFree(v4);
          }
LABEL_4:
          uint64_t v2 = (void *)*((void *)v1 + 2);
          if (v2) {
            xmlFree(v2);
          }
          break;
        default:
          break;
      }

      uint64_t v3 = (xmlSchemaVal *)*((void *)v1 + 1);
      xmlFree(v1);
      xmlSchemaValPtr v1 = v3;
    }

    while (v3);
  }

xmlSchemaTypePtr xmlSchemaGetPredefinedType(const xmlChar *name, const xmlChar *ns)
{
  if ((xmlSchemaTypesInitialized & 1) == 0) {
    xmlSchemaInitTypes();
  }
  if (name) {
    return (xmlSchemaTypePtr)xmlHashLookup2((xmlHashTablePtr)xmlSchemaTypesBank, name, ns);
  }
  else {
    return 0LL;
  }
}

xmlSchemaTypePtr xmlSchemaGetBuiltInListSimpleTypeItemType(xmlSchemaTypePtr type)
{
  if (type)
  {
    if (type->type != XML_SCHEMA_TYPE_BASIC) {
      return 0LL;
    }
    int builtInType = type->builtInType;
    switch(builtInType)
    {
      case 27:
        return (xmlSchemaTypePtr)xmlSchemaTypeEntityDef;
      case 25:
        return (xmlSchemaTypePtr)xmlSchemaTypeIdrefDef;
      case 19:
        return (xmlSchemaTypePtr)xmlSchemaTypeNmtokenDef;
      default:
        return 0LL;
    }
  }

  return type;
}

xmlChar *__cdecl xmlSchemaWhiteSpaceReplace(xmlChar *value)
{
  if (value)
  {
    for (uint64_t i = 0LL; ; ++i)
    {
      int v2 = value[i];
      if (!value[i]) {
        return 0LL;
      }
      if (v2 == 13) {
        break;
      }
    }

    value = xmlStrdup(value);
    uint64_t v3 = &value[i + 1];
    unsigned int v4 = value[i];
    do
    {
      if (v4 <= 0xD && ((1 << v4) & 0x2600) != 0) {
        *(v3 - 1) = 32;
      }
      unsigned int v5 = *v3++;
      unsigned int v4 = v5;
    }

    while (v5);
  }

  return value;
}

xmlChar *__cdecl xmlSchemaCollapseString(xmlChar *value)
{
  if (!value) {
    return value;
  }
  for (uint64_t i = 0LL; ; ++i)
  {
    unsigned int v2 = value[i];
    if (v2 > 0x20 || ((1LL << v2) & 0x100002600LL) == 0) {
      break;
    }
  }

  uint64_t v4 = 0LL;
  uint64_t v5 = 0LL;
  uint64_t v6 = &value[i];
  while (1)
  {
    if (v2 <= 0x1Fu)
    {
      if (!(_BYTE)v2) {
        goto LABEL_33;
      }
LABEL_19:
      LOBYTE(v2) = value[v5 + 1 + i];
      goto LABEL_20;
    }

    unsigned int v2 = value[v5 + 1 + i];
    if (v2 <= 0x20 && ((1LL << v2) & 0x100002600LL) != 0) {
      break;
    }
LABEL_20:
    ++v5;
    v4 += 0x100000000LL;
  }

  if ((_DWORD)v5)
  {
    value = xmlStrdup(&value[i]);
    if (!value) {
      return value;
    }
    int v8 = &value[v4 >> 32];
    xmlSchemaFacetPtr v9 = v8;
LABEL_24:
    while (2)
    {
      unsigned int v10 = *v8;
      if (v10 <= 0x20)
      {
        if (((1LL << v10) & 0x100002600LL) != 0)
        {
          while (1)
          {
            unsigned int v12 = *++v8;
            uint64_t v11 = v12;
            if (v12 > 0x20) {
              break;
            }
            if (((1LL << v11) & 0x100002600LL) == 0)
            {
              if (!v11) {
                goto LABEL_24;
              }
              break;
            }
          }

          LOBYTE(v1xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = 32;
          goto LABEL_32;
        }

        if (!*v8)
        {
          xmlChar *v9 = 0;
          return value;
        }
      }

      ++v8;
LABEL_32:
      *v9++ = v10;
      continue;
    }
  }

int xmlSchemaValPredefTypeNode( xmlSchemaTypePtr type, const xmlChar *value, xmlSchemaValPtr *val, xmlNodePtr node)
{
  return xmlSchemaValAtomicType((uint64_t)type, (char *)value, (xmlChar **)val, (uint64_t)node, 0, 1, 0);
}

uint64_t xmlSchemaValAtomicType(uint64_t a1, char *a2, xmlChar **a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v258 = *MEMORY[0x1895F89C0];
  if ((xmlSchemaTypesInitialized & 1) == 0) {
    xmlSchemaInitTypes();
  }
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (!a2) {
    a2 = &byte_181A3ACBA;
  }
  if (a3) {
    *a3 = 0LL;
  }
  if (a5 || ((v14 = *(_DWORD *)(a1 + 160), (v14 - 45) >= 2) ? (BOOL v15 = v14 == 1) : (BOOL v15 = 1), v15))
  {
    unsigned int v16 = 0LL;
  }

  else
  {
    if (v14 == 2) {
      uint64_t v27 = xmlSchemaWhiteSpaceReplace((const xmlChar *)a2);
    }
    else {
      uint64_t v27 = xmlSchemaCollapseString((const xmlChar *)a2);
    }
    unsigned int v16 = v27;
    if (v27) {
      a2 = (char *)v27;
    }
  }

  int v17 = *(_DWORD *)(a1 + 160);
  switch(v17)
  {
    case 0:
      goto LABEL_599;
    case 1:
      if (!a3 || !a7) {
        goto LABEL_631;
      }
      xmlSchemaNewValue(1);
      if (!v108) {
        goto LABEL_599;
      }
      uint64_t v109 = v108;
      if (v16) {
        BOOL v110 = a6 == 0;
      }
      else {
        BOOL v110 = 1;
      }
      if (v110) {
        int v111 = (const xmlChar *)a2;
      }
      else {
        int v111 = v16;
      }
      goto LABEL_299;
    case 2:
      if (a6)
      {
        int v112 = xmlSchemaWhiteSpaceReplace((const xmlChar *)a2);
        unsigned int v16 = v112;
        if (v112) {
          a2 = (char *)v112;
        }
      }

      if (!a3) {
        goto LABEL_631;
      }
      int v64 = 2;
      goto LABEL_297;
    case 3:
      memset(prefix, 0, sizeof(prefix));
      char v257 = 0;
      v255 = prefix;
      unsigned int v113 = *a2;
      if (!*a2) {
        goto LABEL_625;
      }
      uint64_t v114 = a2 + 1;
      while (2)
      {
        if (v113 > 0x2D) {
          goto LABEL_409;
        }
        if (((1LL << v113) & 0x100002600LL) != 0)
        {
          unsigned int v115 = *v114++;
          unsigned int v113 = v115;
          continue;
        }

        break;
      }

      if (v113 == 43LL)
      {
        __int16 v163 = 0;
      }

      else if (v113 == 45LL)
      {
        __int16 v163 = 1;
      }

      else
      {
LABEL_409:
        __int16 v163 = 0;
        --v114;
      }

      int v182 = *v114;
      if (!*v114) {
        goto LABEL_625;
      }
      int v183 = 0;
      while (v182 == 48)
      {
        int v184 = *++v114;
        int v182 = v184;
        int v183 = 1;
      }

      if (!v182)
      {
        LODWORD(v185) = 0;
        int v186 = -1;
        uint64_t v187 = prefix;
        goto LABEL_606;
      }

      uint64_t v185 = 0LL;
      while (1)
      {
        int v190 = v114[v185];
        *((_BYTE *)prefix + v185) = v190;
        v255 = (xmlChar **)((char *)prefix + ++v185);
        if ((_DWORD)v185 == 24)
        {
          uint64_t v187 = (xmlChar **)((char *)prefix + v185);
          v114 += v185;
          int v186 = -1;
LABEL_546:
          LODWORD(v185) = 24;
          goto LABEL_606;
        }
      }

      v114 += v185;
      if (v190 == 46)
      {
        ++v114;
        uint64_t v214 = v185;
        while (1)
        {
          int v215 = *v114;
          ++v114;
          *((_BYTE *)prefix + v21xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v215;
          v255 = (xmlChar **)((char *)prefix + ++v214);
          if ((_DWORD)v214 == 24)
          {
            uint64_t v187 = (xmlChar **)((char *)prefix + v214);
            int v186 = v185;
            goto LABEL_546;
          }
        }

        if ((((_DWORD)v214 == 0) & ~v183) != 0) {
          goto LABEL_625;
        }
        uint64_t v187 = (xmlChar **)((char *)prefix + v214);
        int v186 = v185;
        LODWORD(v185) = v214;
      }

      else
      {
        uint64_t v187 = (xmlChar **)((char *)prefix + v185);
        int v186 = -1;
      }

LABEL_606:
      while (1)
      {
        unsigned int v229 = *v114;
        if (v229 > 0x20 || ((1LL << v229) & 0x100002600LL) == 0) {
          break;
        }
        ++v114;
      }

      if (a3 && !*v114)
      {
        xmlSchemaNewValue(3);
        if (v231)
        {
          uint64_t v232 = v231;
          if (!(_DWORD)v185) {
            goto LABEL_628;
          }
          if (v186 == -1 || (_DWORD)v185 == v186) {
            goto LABEL_622;
          }
          v233 = v187;
          while (1)
          {
            int v234 = *((unsigned __int8 *)v233 - 1);
            v233 = (xmlChar **)((char *)v233 - 1);
            if (v234 != 48) {
              break;
            }
            LODWORD(v185) = v185 - 1;
            uint64_t v187 = v233;
            if (v186 == (_DWORD)v185)
            {
              uint64_t v187 = v233;
              LODWORD(v185) = v186;
              break;
            }
          }

          if ((_DWORD)v185)
          {
LABEL_622:
            *(_BYTE *)uint64_t v187 = 0;
            v255 = prefix;
            xmlSchemaParseUInt( (unsigned __int8 **)&v255,  (uint64_t *)(v231 + 16),  (uint64_t *)(v231 + 24),  (uint64_t *)(v231 + 32));
            if (v186 == -1) {
              __int16 v235 = ((_WORD)v185 << 8) | v163 & 0xFF01;
            }
            else {
              __int16 v235 = ((_WORD)v185 << 8) | v163 & 0xFF01 | (2 * (((_BYTE)v185 - (_BYTE)v186) & 0x7F));
            }
          }

          else
          {
LABEL_628:
            __int16 v235 = v163 | *(_WORD *)(v231 + 44) & 0xFE | 0x100;
          }

          *(_WORD *)(v232 + 4xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v235;
          *a3 = (xmlChar *)v232;
        }

        goto LABEL_631;
      }

      if (!*v114) {
        goto LABEL_631;
      }
      goto LABEL_625;
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      for (uint64_t i = (xmlChar *)a2; ; ++i)
      {
        prefix[0] = i;
        unsigned int v19 = *i;
        BOOL v58 = v19 > 0x20;
        uint64_t v20 = (1LL << v19) & 0x100002600LL;
        if (v58 || v20 == 0) {
          break;
        }
      }

      int v22 = xmlMalloc(0x30uLL);
      if (!v22)
      {
        uint64_t v38 = 0xFFFFFFFFLL;
        goto LABEL_656;
      }

      uint64_t v23 = v22;
      v22[1] = 0u;
      v22[2] = 0u;
      *int v22 = 0u;
      *(_DWORD *)int v22 = 0;
      int v24 = *i;
      if (v24 == 45)
      {
        if (i[1] == 45)
        {
          prefix[0] = i + 2;
          if (i[2] == 45)
          {
            if (v17 == 6) {
              goto LABEL_649;
            }
            prefix[0] = i + 3;
            int v25 = *prefix[0];
            if ((v25 - 43) > 0x2F || ((1LL << (v25 - 43)) & 0x800000000005LL) == 0)
            {
              if (*prefix[0]) {
                goto LABEL_649;
              }
            }

            int v26 = 5;
            goto LABEL_647;
          }

          if (!_xmlSchemaParseGMonth((uint64_t)(v22 + 1), prefix))
          {
            int v154 = prefix[0];
            int v155 = *prefix[0];
            if (v155 != 45) {
              goto LABEL_641;
            }
            ++prefix[0];
            if (_xmlSchemaParseGDay((uint64_t)(v23 + 1), prefix)
              || (int v156 = *prefix[0], v156 == 58)
              || ((unint64_t v157 = 0x8F5C28F5C28F5C29LL * *((void *)v23 + 2),
                   unint64_t v158 = __ROR8__(v157 + 0x51EB851EB851EB8LL, 2),
                   (v23[1] & 3LL) == 0)
                ? (BOOL v159 = v158 > 0x28F5C28F5C28F5CLL)
                : (BOOL v159 = 0),
                  !v159 ? (int v160 = 0) : (int v160 = 1),
                  __ROR8__(v157 + 0x51EB851EB851EB0LL, 4) >= 0xA3D70A3D70A3D7uLL ? (BOOL v161 = v160 == 0) : (BOOL v161 = 0),
                  v161 ? (uint64_t v162 = &daysInMonth) : (uint64_t v162 = &daysInMonthLeap),
                  ((*((_DWORD *)v23 + 6) >> 4) & 0x1Fu) > v162[(*((_DWORD *)v23 + 6) & 0xF) - 1]))
            {
              prefix[0] = v154;
              int v155 = *v154;
LABEL_641:
              if (((v155 - 43) > 0x2F || ((1LL << (v155 - 43)) & 0x800000000005LL) == 0)
                && v155
                || _xmlSchemaParseTimeZone((uint64_t)(v23 + 1), prefix)
                || *prefix[0])
              {
                goto LABEL_649;
              }

              int v26 = 6;
              goto LABEL_647;
            }

            if (((v156 - 43) > 0x2F || ((1LL << (v156 - 43)) & 0x800000000005LL) == 0)
              && *prefix[0]
              || _xmlSchemaParseTimeZone((uint64_t)(v23 + 1), prefix)
              || *prefix[0])
            {
              goto LABEL_649;
            }

            int v26 = 7;
LABEL_647:
            *(_DWORD *)uint64_t v23 = v26;
            if (v17 && v26 != v17) {
              goto LABEL_649;
            }
            if (a3) {
              goto LABEL_652;
            }
            xmlSchemaFreeValue((xmlSchemaValPtr)v23);
            goto LABEL_655;
          }

          goto LABEL_649;
        }
      }

      else if ((v24 - 48) <= 9 && !_xmlSchemaParseTime((uint64_t)(v22 + 1), prefix))
      {
        int v39 = *prefix[0];
        BOOL v40 = (v39 - 43) > 0x2F || ((1LL << (v39 - 43)) & 0x800000000005LL) == 0;
        BOOL v41 = !v40 || v39 == 0;
        if (v41 && !_xmlSchemaParseTimeZone((uint64_t)(v23 + 1), prefix))
        {
          if (!*prefix[0])
          {
            int v26 = 4;
            goto LABEL_647;
          }

          goto LABEL_649;
        }
      }

      prefix[0] = (xmlChar *)a2;
      int v42 = *a2;
      if ((v42 - 58) > 0xFFFFFFF5 || v42 == 45 || v42 == 43)
      {
        uint64_t v43 = (xmlChar *)(v42 == 45 ? a2 + 1 : a2);
        int v44 = *v43;
        if ((v44 - 48) <= 9)
        {
          uint64_t v45 = (uint64_t *)(v23 + 1);
          uint64_t v46 = *((void *)v23 + 2);
          unsigned int v47 = -1;
          int v48 = v43;
          do
          {
            if (v46 > 0xCCCCCCCCCCCCCCCLL) {
              goto LABEL_649;
            }
            uint64_t v49 = (v44 - 48);
            uint64_t v50 = 10 * v46;
            *uint64_t v45 = v50;
            if (v50 > (v49 ^ 0x7FFFFFFFFFFFFFFFLL)) {
              goto LABEL_649;
            }
            uint64_t v46 = v49 + v50;
            *uint64_t v45 = v46;
            int v51 = *++v48;
            int v44 = v51;
            ++v47;
          }

          while ((v51 - 48) < 0xA);
          if (v47 >= 3 && (v47 == 3 || *v43 != 48))
          {
            if (v42 == 45)
            {
              uint64_t v46 = -v46;
              *uint64_t v45 = v46;
            }

            if (v46)
            {
              if ((prefix[0] = v48, int v52 = *v48, (v52 - 43) <= 0x2F)
                && ((1LL << (v52 - 43)) & 0x800000000005LL) != 0
                || !*v48)
              {
                if (_xmlSchemaParseTimeZone((uint64_t)(v23 + 1), prefix))
                {
                  if (*prefix[0] != 45) {
                    goto LABEL_649;
                  }
                  ++prefix[0];
                  int v53 = *prefix[0];
                  if ((v53 - 43) > 0x2F || ((1LL << (v53 - 43)) & 0x800000000005LL) == 0)
                  {
                    if (*prefix[0]) {
                      goto LABEL_649;
                    }
                  }

                  if (_xmlSchemaParseTimeZone((uint64_t)(v23 + 1), prefix))
                  {
                    if (*prefix[0] != 45) {
                      goto LABEL_649;
                    }
                    ++prefix[0];
                    uint64_t v54 = *v45;
                    if (!*v45) {
                      goto LABEL_649;
                    }
                    uint64_t v55 = (*((_DWORD *)v23 + 6) & 0xFu) - 1;
                    unint64_t v56 = 0x8F5C28F5C28F5C29LL * v54;
                    unint64_t v57 = __ROR8__(0x8F5C28F5C28F5C29LL * v54 + 0x51EB851EB851EB8LL, 2);
                    BOOL v58 = (*v45 & 3) == 0 && v57 > 0x28F5C28F5C28F5CLL;
                    BOOL v59 = v58;
                    int v60 = __ROR8__(v56 + 0x51EB851EB851EB0LL, 4) < 0xA3D70A3D70A3D7uLL || v59
                        ? &daysInMonthLeap
                        : &daysInMonth;
                    if (((*((_DWORD *)v23 + 6) >> 4) & 0x1Fu) > v60[v55]) {
                      goto LABEL_649;
                    }
                    v238 = prefix[0];
                    int v239 = *prefix[0];
                    if (((v239 - 43) > 0x2F
                       || ((1LL << (v239 - 43)) & 0x800000000005LL) == 0)
                      && *prefix[0]
                      || (int v240 = _xmlSchemaParseTimeZone((uint64_t)(v23 + 1), prefix),
                          v238 = prefix[0],
                          int v239 = *prefix[0],
                          v240))
                    {
                      if (v239 != 84) {
                        goto LABEL_649;
                      }
                      prefix[0] = v238 + 1;
                      int v241 = _xmlSchemaParseTimeZone((uint64_t)(v23 + 1), prefix);
                      for (uint64_t j = prefix[0] + 1; ; prefix[0] = j++)
                      {
                        unsigned int v243 = *(j - 1);
                        if (v243 > 0x20 || ((1LL << v243) & 0x100002600LL) == 0) {
                          break;
                        }
                      }

                      if (v241 | v243) {
                        goto LABEL_649;
                      }
                      uint64_t v245 = *v45;
                      if (!*v45) {
                        goto LABEL_649;
                      }
                      unsigned int v246 = *((_DWORD *)v23 + 6);
                      uint64_t v247 = (v246 & 0xF) - 1;
                      unint64_t v248 = __ROR8__(0x8F5C28F5C28F5C29LL * v245 + 0x51EB851EB851EB8LL, 2);
                      BOOL v249 = (v245 & 3) == 0 && v248 > 0x28F5C28F5C28F5CLL;
                      BOOL v250 = v249;
                      BOOL v251 = __ROR8__(0x8F5C28F5C28F5C29LL * v245 + 0x51EB851EB851EB0LL, 4) >= 0xA3D70A3D70A3D7uLL
                          && !v250;
                      v252 = v251 ? &daysInMonth : &daysInMonthLeap;
                      if (((v246 >> 4) & 0x1F) > v252[v247]) {
                        goto LABEL_649;
                      }
                      if ((~v246 & 0x3000) == 0
                        || (v246 & 0xF0000) == 0xF0000
                        || (double v253 = *((double *)v23 + 4), v253 < 0.0)
                        || v253 >= 60.0)
                      {
                      }

                      int v26 = 11;
                      goto LABEL_647;
                    }

                    if (!*prefix[0])
                    {
                      int v26 = 10;
                      goto LABEL_647;
                    }
                  }

                  else if (!*prefix[0])
                  {
                    int v26 = 9;
                    goto LABEL_647;
                  }
                }

                else if (!*prefix[0])
                {
                  int v26 = 8;
                  goto LABEL_647;
                }
              }
            }
          }
        }
      }

LABEL_649:
      xmlSchemaFreeValue((xmlSchemaValPtr)v23);
      goto LABEL_650;
    case 12:
      uint64_t v38 = xmlSchemaValidateDuration((unsigned __int8 *)a2, a3);
      goto LABEL_656;
    case 13:
    case 14:
      for (uint64_t k = a2; ; ++k)
      {
        unsigned int v62 = *k;
        if (v62 > 0x20 || ((1LL << v62) & 0x100002600LL) == 0) {
          break;
        }
      }

      if (v62 == 78 && k[1] == 97 && k[2] == 78)
      {
        int v65 = k[3];
        if (k[3]) {
          int v66 = 7;
        }
        else {
          int v66 = 4;
        }
        if (a3 && !v65)
        {
          if (xmlSchemaTypeFloatDef != a1)
          {
            xmlSchemaNewValue(14);
            if (!v67) {
              goto LABEL_599;
            }
            xmlGenericErrorFunc v68 = &xmlXPathNAN;
LABEL_635:
            *(double *)(v67 + 16) = *v68;
            goto LABEL_512;
          }

          xmlSchemaNewValue(13);
          if (!v67) {
            goto LABEL_599;
          }
          uint64_t v221 = &xmlXPathNAN;
LABEL_637:
          float v236 = *v221;
          *(float *)(v67 + 16) = v236;
LABEL_512:
          *a3 = (xmlChar *)v67;
          goto LABEL_631;
        }

        goto LABEL_513;
      }

      if (v62 == 45) {
        int v69 = k + 1;
      }
      else {
        int v69 = k;
      }
      int v70 = *v69;
      if (v70 == 73 && v69[1] == 78 && v69[2] == 70)
      {
        int v71 = v69[3];
        if (v71) {
          int v66 = 7;
        }
        else {
          int v66 = 4;
        }
        if (a3 && !v71)
        {
          if (xmlSchemaTypeFloatDef != a1)
          {
            xmlSchemaNewValue(14);
            if (!v67) {
              goto LABEL_599;
            }
            if (v62 == 45) {
              xmlGenericErrorFunc v68 = &xmlXPathNINF;
            }
            else {
              xmlGenericErrorFunc v68 = &xmlXPathPINF;
            }
            goto LABEL_635;
          }

          xmlSchemaNewValue(13);
          if (!v67) {
            goto LABEL_599;
          }
          if (v62 == 45) {
            uint64_t v221 = &xmlXPathNINF;
          }
          else {
            uint64_t v221 = &xmlXPathPINF;
          }
          goto LABEL_637;
        }

        goto LABEL_513;
      }

      int v72 = (unsigned __int8 *)(k + 1);
      if (v70 == 43) {
        ++k;
      }
      if (v62 == 45) {
        uint64_t k = (char *)v72;
      }
      unsigned int v73 = *k;
      if (v73 <= 0x2D && ((1LL << v73) & 0x280000000001LL) != 0) {
        goto LABEL_625;
      }
      unsigned int v75 = v73 - 58;
      if (v73 - 58 >= 0xFFFFFFF6)
      {
        do
        {
          unsigned int v76 = *++k;
          unsigned int v73 = v76;
        }

        while (v76 - 48 < 0xA);
      }

      if (v73 == 46)
      {
        int v77 = -1;
        do
        {
          unsigned int v78 = *++k;
          unsigned int v73 = v78;
          ++v77;
        }

        while (v78 - 48 < 0xA);
      }

      else
      {
        int v77 = 0;
      }

      if (v75 <= 0xFFFFFFF5 && !v77) {
        goto LABEL_625;
      }
      if ((v73 | 0x20) == 0x65)
      {
        unsigned int v191 = (unsigned __int8 *)(k + 1);
        int v192 = k[1];
        if (v192 == 45 || v192 == 43) {
          unsigned int v191 = (unsigned __int8 *)(k + 2);
        }
        uint64_t k = (char *)(v191 - 1);
        do
        {
          unsigned int v193 = *++k;
          unsigned int v73 = v193;
        }

        while (v193 - 48 < 0xA);
      }

      int v194 = (unsigned __int8 *)(k + 1);
      while (v73 <= 0x20 && ((1LL << v73) & 0x100002600LL) != 0)
      {
        unsigned int v195 = *v194++;
        unsigned int v73 = v195;
      }

      if (v73) {
        int v66 = 7;
      }
      else {
        int v66 = 4;
      }
      if (!a3 || v73)
      {
LABEL_513:
        if (v66 == 4) {
          goto LABEL_631;
        }
LABEL_625:
        if (v16) {
          xmlFree(v16);
        }
        return 1LL;
      }

      if (xmlSchemaTypeFloatDef == a1)
      {
        double v228 = xmlSchemaNewValue(13);
        if (!v227) {
          goto LABEL_599;
        }
        uint64_t v109 = v227;
        int v198 = sscanf(a2, "%f", v228);
      }

      else
      {
        double v197 = xmlSchemaNewValue(14);
        if (!v196) {
          goto LABEL_599;
        }
        uint64_t v109 = v196;
        int v198 = sscanf(a2, "%lf", v197);
      }

      if (v198 != 1)
      {
        xmlSchemaFreeValue((xmlSchemaValPtr)v109);
        goto LABEL_625;
      }

      goto LABEL_300;
    case 15:
      while (2)
      {
        uint64_t v116 = *a2;
        if (((1LL << v116) & 0x100002600LL) != 0)
        {
          ++a2;
          continue;
        }

        break;
      }

      if (v116 == 48)
      {
        int v165 = 0;
        uint64_t v164 = 1LL;
      }

      else if (v116 == 49)
      {
        uint64_t v164 = 1LL;
        int v165 = 1;
      }

      else
      {
LABEL_349:
        if ((_DWORD)v116 == 102)
        {
          if (a2[1] != 97 || a2[2] != 108 || a2[3] != 115 || a2[4] != 101) {
            goto LABEL_625;
          }
          int v165 = 0;
          uint64_t v164 = 5LL;
        }

        else
        {
          if ((_DWORD)v116 != 116 || a2[1] != 114 || a2[2] != 117 || a2[3] != 101) {
            goto LABEL_625;
          }
          int v165 = 1;
          uint64_t v164 = 4LL;
        }
      }

      unsigned int v188 = a2[v164];
      if (a2[v164])
      {
        for (uint64_t m = v164 + 1; ; ++m)
        {
          if (v188 > 0x20) {
            goto LABEL_625;
          }
          if (((1LL << v188) & 0x100002600LL) == 0) {
            break;
          }
          unsigned int v188 = a2[m];
        }

        if (v188) {
          goto LABEL_625;
        }
      }

      if (!a3) {
        goto LABEL_631;
      }
      xmlSchemaNewValue(15);
      if (v67)
      {
        *(_DWORD *)(v67 + 16) = v165;
        goto LABEL_512;
      }

      goto LABEL_599;
    case 16:
      if (!a3) {
        goto LABEL_631;
      }
      int v64 = 16;
      goto LABEL_297;
    case 17:
      if (!v16)
      {
        int v117 = xmlSchemaCollapseString((const xmlChar *)a2);
        unsigned int v16 = v117;
        if (v117) {
          a2 = (char *)v117;
        }
      }

      if (!a3) {
        goto LABEL_631;
      }
      int v64 = 17;
      goto LABEL_297;
    case 18:
      if (xmlValidateNMToken((const xmlChar *)a2, 1)) {
        goto LABEL_625;
      }
      if (!a3) {
        goto LABEL_631;
      }
      int v64 = 18;
      goto LABEL_297;
    case 19:
      uint64_t v38 = (int)xmlSchemaValAtomicListNode(xmlSchemaTypeNmtokenDef, (xmlChar *)a2, a3, a4) < 1;
      goto LABEL_656;
    case 20:
      uint64_t v83 = xmlValidateName((const xmlChar *)a2, 1);
      uint64_t v38 = v83;
      if (!a3 || (_DWORD)v83) {
        goto LABEL_656;
      }
      xmlSchemaNewValue(20);
      if (!v84) {
        goto LABEL_599;
      }
      uint64_t v23 = v84;
      while (1)
      {
        unsigned int v85 = *a2;
        if (v85 > 0x20 || ((1LL << v85) & 0x100002600LL) == 0) {
          break;
        }
        ++a2;
      }

      uint64_t v181 = 0LL;
      int v120 = xmlStrndup((const xmlChar *)a2, v181);
      goto LABEL_407;
    case 21:
      uint64_t v38 = xmlValidateQName((const xmlChar *)a2, 1);
      if ((_DWORD)v38) {
        goto LABEL_656;
      }
      if (a4)
      {
        prefix[0] = 0LL;
        uint64_t v87 = xmlSplitQName2((const xmlChar *)a2, prefix);
        xmlNsPtr v88 = xmlSearchNs(*(xmlDocPtr *)(a4 + 64), (xmlNodePtr)a4, prefix[0]);
        if (!v88 && prefix[0])
        {
          xmlFree(prefix[0]);
          if (!v87) {
            goto LABEL_625;
          }
          xmlFreeFunc v89 = xmlFree;
LABEL_540:
          ((void (*)(xmlChar *))v89)(v87);
          goto LABEL_625;
        }

        if (v88) {
          href = v88->href;
        }
        else {
          href = 0LL;
        }
        if (prefix[0]) {
          xmlFree(prefix[0]);
        }
        if (!a3)
        {
          if (v87) {
            xmlFree(v87);
          }
LABEL_655:
          uint64_t v38 = 0LL;
          goto LABEL_656;
        }

        xmlSchemaNewValue(21);
        if (!v222) {
          goto LABEL_597;
        }
        uint64_t v23 = v222;
        if (v87)
        {
LABEL_570:
          *((void *)v23 + 2) = v87;
          if (href) {
            *((void *)v23 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = xmlStrdup(href);
          }
          goto LABEL_652;
        }

LABEL_569:
        uint64_t v87 = xmlStrdup((const xmlChar *)a2);
        goto LABEL_570;
      }

      if (!a3) {
        goto LABEL_655;
      }
      xmlSchemaNewValue(21);
      if (v212)
      {
        uint64_t v23 = v212;
        href = 0LL;
        goto LABEL_569;
      }

      goto LABEL_599;
    case 22:
      uint64_t v118 = xmlValidateNCName((const xmlChar *)a2, 1);
      uint64_t v38 = v118;
      if (!a3 || (_DWORD)v118) {
        goto LABEL_656;
      }
      xmlSchemaNewValue(22);
      if (!v119) {
        goto LABEL_599;
      }
      uint64_t v23 = v119;
      int v120 = xmlStrdup((const xmlChar *)a2);
LABEL_407:
      uint64_t v38 = 0LL;
      *((void *)v23 + 2) = v120;
      goto LABEL_653;
    case 23:
      uint64_t v121 = xmlValidateNCName((const xmlChar *)a2, 1);
      uint64_t v38 = v121;
      if (!a3 || (_DWORD)v121) {
        goto LABEL_259;
      }
      xmlSchemaNewValue(23);
      if (!v122) {
        goto LABEL_599;
      }
      int v123 = (xmlChar *)v122;
      *(void *)(v122 + 16) = xmlStrdup((const xmlChar *)a2);
      *a3 = v123;
LABEL_259:
      if (!a4 || (_DWORD)v38) {
        goto LABEL_656;
      }
      if (*(_DWORD *)(a4 + 8) != 2 || *(_DWORD *)(a4 + 80) == 2) {
        goto LABEL_655;
      }
      uint64_t v124 = xmlSchemaStrip((uint64_t)a2);
      int v125 = *(xmlDoc **)(a4 + 64);
      if (v124)
      {
        uint64_t v126 = v124;
        xmlIDPtr v127 = xmlAddID(0LL, v125, v124, (xmlAttrPtr)a4);
        xmlFree(v126);
      }

      else
      {
        xmlIDPtr v127 = xmlAddID(0LL, v125, (const xmlChar *)a2, (xmlAttrPtr)a4);
      }

      uint64_t v38 = 2LL;
      if (!v127) {
        goto LABEL_656;
      }
      *(_DWORD *)(a4 + 8xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = 2;
      goto LABEL_655;
    case 24:
      uint64_t v90 = xmlValidateNCName((const xmlChar *)a2, 1);
      uint64_t v38 = v90;
      if (!a3 || (_DWORD)v90) {
        goto LABEL_195;
      }
      xmlSchemaNewValue(24);
      if (!v91) {
        goto LABEL_599;
      }
      uint64_t v92 = (xmlChar *)v91;
      *(void *)(v91 + 16) = xmlStrdup((const xmlChar *)a2);
      *a3 = v92;
LABEL_195:
      if (!a4 || (_DWORD)v38) {
        goto LABEL_656;
      }
      if (*(_DWORD *)(a4 + 8) != 2) {
        goto LABEL_655;
      }
      int v93 = xmlSchemaStrip((uint64_t)a2);
      __int128 v94 = *(xmlDoc **)(a4 + 64);
      if (v93)
      {
        __int128 v95 = v93;
        xmlAddRef(0LL, v94, v93, (xmlAttrPtr)a4);
        xmlFree(v95);
      }

      else
      {
        xmlAddRef(0LL, v94, (const xmlChar *)a2, (xmlAttrPtr)a4);
      }

      uint64_t v38 = 0LL;
      int v97 = 3;
      goto LABEL_549;
    case 25:
      unsigned int v96 = xmlSchemaValAtomicListNode(xmlSchemaTypeIdrefDef, (xmlChar *)a2, a3, a4);
      uint64_t v38 = (v96 >> 30) & 2;
      if (!a4 || (v96 & 0x80000000) != 0) {
        goto LABEL_656;
      }
      if (*(_DWORD *)(a4 + 8) != 2) {
        goto LABEL_655;
      }
      uint64_t v38 = 0LL;
      int v97 = 4;
      goto LABEL_549;
    case 26:
      uint64_t v128 = xmlValidateNCName((const xmlChar *)a2, 1);
      if (!a4 || !*(void *)(a4 + 64)) {
        goto LABEL_531;
      }
      uint64_t v38 = v128;
      if ((_DWORD)v128) {
        goto LABEL_656;
      }
      int v129 = xmlSchemaStrip((uint64_t)a2);
      uint64_t v130 = *(const xmlDoc **)(a4 + 64);
      if (v129)
      {
        xmlEntityPtr DocEntity = xmlGetDocEntity(v130, v129);
        xmlFree(v129);
      }

      else
      {
        xmlEntityPtr DocEntity = xmlGetDocEntity(v130, (const xmlChar *)a2);
      }

      if (DocEntity)
      {
        eint type = DocEntity->etype;
        BOOL v15 = etype == XML_EXTERNAL_GENERAL_UNPARSED_ENTITY;
        BOOL v217 = etype != XML_EXTERNAL_GENERAL_UNPARSED_ENTITY;
        BOOL v218 = etype == XML_EXTERNAL_GENERAL_UNPARSED_ENTITY;
        uint64_t v38 = (4 * v217);
        if (v15 && a3)
        {
          xmlGenericErrorFunc v219 = *__xmlGenericError();
          int v220 = __xmlGenericErrorContext();
          v219( *v220,  "Unimplemented block at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemastypes.c",  2947);
          uint64_t v38 = 0LL;
          BOOL v218 = 1;
        }

        if (v218 && *(_DWORD *)(a4 + 8) == 2)
        {
          int v97 = 5;
          goto LABEL_549;
        }
      }

      else
      {
        uint64_t v38 = 4LL;
      }

      goto LABEL_656;
    case 27:
      if (!a4 || !*(void *)(a4 + 64))
      {
        if (v16) {
          xmlFree(v16);
        }
        return 3LL;
      }

      if ((int)xmlSchemaValAtomicListNode(xmlSchemaTypeEntityDef, (xmlChar *)a2, a3, a4) < 1)
      {
LABEL_650:
        uint64_t v38 = 1LL;
      }

      else
      {
        if (*(_DWORD *)(a4 + 8) != 2) {
          goto LABEL_655;
        }
        uint64_t v38 = 0LL;
        int v97 = 6;
LABEL_549:
        *(_DWORD *)(a4 + 8xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v97;
      }

      goto LABEL_656;
    case 28:
      uint64_t v132 = xmlValidateQName((const xmlChar *)a2, 1);
      uint64_t v38 = v132;
      if (!a4 || (_DWORD)v132)
      {
        if (!a4)
        {
LABEL_531:
          uint64_t v38 = 3LL;
          goto LABEL_656;
        }

        int v133 = 0LL;
        uint64_t v87 = 0LL;
      }

      else
      {
        prefix[0] = 0LL;
        int v133 = xmlSplitQName2((const xmlChar *)a2, prefix);
        if (prefix[0])
        {
          xmlNsPtr v134 = xmlSearchNs(*(xmlDocPtr *)(a4 + 64), (xmlNodePtr)a4, prefix[0]);
          uint64_t v87 = 0LL;
          uint64_t v38 = v134 == 0LL;
          if (a3 && v134)
          {
            uint64_t v87 = xmlStrdup(v134->href);
            uint64_t v38 = 0LL;
          }
        }

        else
        {
          uint64_t v38 = 0LL;
          uint64_t v87 = 0LL;
        }

        if (v133 && (!a3 || (_DWORD)v38)) {
          xmlFree(v133);
        }
        if (prefix[0]) {
          xmlFree(prefix[0]);
        }
      }

      v209 = *(xmlDoc **)(a4 + 64);
      if (!v209) {
        goto LABEL_531;
      }
      if (!(_DWORD)v38)
      {
        int v210 = xmlValidateNotationUse(0LL, v209, (const xmlChar *)a2);
        uint64_t v38 = v210 != 1;
        if (a3)
        {
          if (v210 == 1)
          {
            xmlSchemaNewValue(28);
            if (v211)
            {
              uint64_t v23 = v211;
              if (!v133) {
                int v133 = xmlStrdup((const xmlChar *)a2);
              }
              *((void *)v23 + 2) = v133;
              if (v87) {
                *((void *)v23 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = v87;
              }
LABEL_652:
              uint64_t v38 = 0LL;
LABEL_653:
              *a3 = (xmlChar *)v23;
              goto LABEL_656;
            }

            if (v133) {
              xmlFree(v133);
            }
LABEL_597:
            if (v87) {
              xmlFree(v87);
            }
LABEL_599:
            if (v16) {
              xmlFree(v16);
            }
            return 0xFFFFFFFFLL;
          }
        }
      }

LABEL_656:
      if (v16) {
        xmlFree(v16);
      }
      return v38;
    case 29:
      if (!*a2) {
        goto LABEL_295;
      }
      if (!v16)
      {
        uint64_t v135 = xmlSchemaCollapseString((const xmlChar *)a2);
        unsigned int v16 = v135;
        if (v135) {
          a2 = (char *)v135;
        }
      }

      uint64_t v136 = (const char *)xmlStrdup((const xmlChar *)a2);
      int v137 = (char *)v136;
      unsigned __int8 v138 = *v136;
      if (*v136)
      {
        uint64_t v139 = (unsigned __int8 *)(v136 + 1);
        do
        {
          if ((v138 - 127) < 0xA2u
            || v138 - 34 <= 0x3E && ((1LL << (v138 - 34)) & 0x5400000014000021LL) != 0
            || v138 - 123 < 3)
          {
            *(v139 - 1) = 95;
          }

          int v140 = *v139++;
          unsigned __int8 v138 = v140;
        }

        while (v140);
      }

      uint64_t v141 = xmlParseURI(v136);
      xmlFree(v137);
      if (!v141) {
        goto LABEL_625;
      }
      xmlFreeURI(v141);
LABEL_295:
      if (!a3) {
        goto LABEL_631;
      }
      int v64 = 29;
LABEL_297:
      xmlSchemaNewValue(v64);
      if (!v142) {
        goto LABEL_599;
      }
      uint64_t v109 = v142;
      int v111 = (const xmlChar *)a2;
LABEL_299:
      *(void *)(v109 + 16) = xmlStrdup(v111);
      goto LABEL_300;
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      v255 = 0LL;
      __int128 v254 = 0uLL;
      while (1)
      {
        unsigned int v28 = *a2;
        if (v28 > 0x20 || ((1LL << v28) & 0x100002600LL) == 0) {
          break;
        }
        ++a2;
      }

      prefix[0] = (xmlChar *)a2;
      if (v28 == 45)
      {
        prefix[0] = (xmlChar *)(a2 + 1);
        __int16 v30 = 1;
      }

      else
      {
        __int16 v30 = 0;
        if (v28 == 43) {
          prefix[0] = (xmlChar *)(a2 + 1);
        }
      }

      unsigned int v79 = xmlSchemaParseUInt(prefix, (uint64_t *)&v255, (uint64_t *)&v254 + 1, (uint64_t *)&v254);
      if ((v79 & 0x80000000) != 0) {
        goto LABEL_625;
      }
      unsigned int v80 = v79;
      BOOL v81 = prefix[0];
      while (2)
      {
        unsigned int v82 = *v81;
        if (v82 > 0x20) {
          goto LABEL_625;
        }
        if (((1LL << v82) & 0x100002600LL) != 0)
        {
          ++v81;
          continue;
        }

        break;
      }

      if (*v81) {
        goto LABEL_625;
      }
      if (v17 == 34)
      {
        if (v28 == 45) {
          goto LABEL_625;
        }
      }

      else
      {
        if (v17 != 32)
        {
          if (v17 == 31)
          {
            if (v28 == 45)
            {
LABEL_375:
              if (!a3) {
                goto LABEL_631;
              }
LABEL_376:
              xmlSchemaNewValue(v17);
              if (!v67) {
                goto LABEL_631;
              }
              if (v80 <= 1) {
                __int16 v168 = 1;
              }
              else {
                __int16 v168 = v80;
              }
              uint64_t v169 = *((void *)&v254 + 1);
              *(void *)(v67 + 16) = v255;
              *(void *)(v67 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v169;
              *(void *)(v67 + 32) = v254;
              __int16 v170 = v30 | (v168 << 8);
LABEL_511:
              *(_WORD *)(v67 + 4xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v170;
              goto LABEL_512;
            }
          }

          else if (v17 != 33 || v28 != 45)
          {
            goto LABEL_375;
          }

          unint64_t v167 = v254 | *((void *)&v254 + 1) | (unint64_t)v255;
          if (v167) {
            int v66 = 7;
          }
          else {
            int v66 = 4;
          }
          if (v167) {
            goto LABEL_513;
          }
LABEL_373:
          if (!a3) {
            goto LABEL_513;
          }
          goto LABEL_376;
        }

        if (v28 != 45) {
          goto LABEL_625;
        }
      }

      unint64_t v166 = v254 | *((void *)&v254 + 1) | (unint64_t)v255;
      if (v166) {
        int v66 = 4;
      }
      else {
        int v66 = 7;
      }
      if (!v166) {
        goto LABEL_513;
      }
      goto LABEL_373;
    case 35:
    case 37:
    case 39:
    case 41:
      v255 = 0LL;
      prefix[0] = (xmlChar *)a2;
      __int128 v254 = 0uLL;
      int v31 = *a2;
      if (v31 == 45)
      {
        prefix[0] = (xmlChar *)(a2 + 1);
        __int16 v32 = 1;
      }

      else
      {
        __int16 v32 = 0;
        if (v31 == 43) {
          prefix[0] = (xmlChar *)(a2 + 1);
        }
      }

      int v103 = xmlSchemaParseUInt(prefix, (uint64_t *)&v255, (uint64_t *)&v254 + 1, (uint64_t *)&v254);
      if (v103 < 0 || *prefix[0]) {
        goto LABEL_625;
      }
      __int16 v104 = v103;
      switch(v17)
      {
        case '#':
          if ((void)v254) {
            goto LABEL_625;
          }
          if (*((void *)&v254 + 1) < 0x15uLL) {
            goto LABEL_495;
          }
          if (*((void *)&v254 + 1) != 21LL) {
            goto LABEL_625;
          }
          uint64_t v105 = v255;
          BOOL v106 = v31 == 45;
          uint64_t v107 = 47483647LL;
          goto LABEL_486;
        case '%':
          if ((void)v254 != 922LL) {
            goto LABEL_625;
          }
          if (*((void *)&v254 + 1) <= 0x202882FuLL)
          {
LABEL_495:
            if (!a3) {
              goto LABEL_631;
            }
          }

          else
          {
            if (*((void *)&v254 + 1) != 33720368LL) {
              goto LABEL_625;
            }
            uint64_t v105 = v255;
            BOOL v106 = v31 == 45;
            uint64_t v107 = 54775807LL;
LABEL_486:
            if (v106) {
              unint64_t v203 = v107 + 1;
            }
            else {
              unint64_t v203 = v107;
            }
            else {
              int v66 = 4;
            }
          }

LABEL_509:
          xmlSchemaNewValue(v17);
          if (!v67) {
            goto LABEL_631;
          }
          uint64_t v208 = *((void *)&v254 + 1);
          *(void *)(v67 + 16) = v255;
          *(void *)(v67 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v208;
          *(void *)(v67 + 32) = v254;
          __int16 v170 = v32 | (v104 << 8);
          break;
        case '\'':
          if (v254 != 0) {
            goto LABEL_625;
          }
          int v204 = v255;
          BOOL v205 = v31 == 45;
          uint64_t v206 = 0x8000LL;
          goto LABEL_501;
        case ')':
          if (v254 != 0) {
            goto LABEL_625;
          }
          int v204 = v255;
          BOOL v205 = v31 == 45;
          uint64_t v206 = 128LL;
LABEL_501:
          if (v205) {
            unint64_t v207 = v206 + 1;
          }
          else {
            unint64_t v207 = v206;
          }
          else {
            int v66 = 4;
          }
          goto LABEL_513;
        default:
          goto LABEL_495;
      }

      goto LABEL_511;
    case 36:
    case 38:
    case 40:
    case 42:
      v255 = 0LL;
      prefix[0] = (xmlChar *)a2;
      __int128 v254 = 0uLL;
      int v33 = xmlSchemaParseUInt(prefix, (uint64_t *)&v255, (uint64_t *)&v254 + 1, (uint64_t *)&v254);
      if (v33 < 0 || *prefix[0]) {
        goto LABEL_625;
      }
      __int16 v34 = v33;
      switch(v17)
      {
        case '$':
          if ((void)v254) {
            goto LABEL_625;
          }
          BOOL v35 = *((void *)&v254 + 1) == 42LL;
          if (*((void *)&v254 + 1) < 0x2AuLL) {
            goto LABEL_460;
          }
          uint64_t v36 = v255;
          unint64_t v37 = 94967295LL;
          goto LABEL_468;
        case '&':
          if ((void)v254 != 1844LL) {
            goto LABEL_625;
          }
          if (*((void *)&v254 + 1) <= 0x4051060uLL)
          {
LABEL_460:
            if (!a3) {
              goto LABEL_631;
            }
          }

          else
          {
            BOOL v35 = *((void *)&v254 + 1) == 67440737LL;
            uint64_t v36 = v255;
            unint64_t v37 = 9551615LL;
LABEL_468:
            int v201 = !v35 || (unint64_t)v36 > v37;
            if (v201) {
              int v66 = 7;
            }
            else {
              int v66 = 4;
            }
            if ((v201 & 1) != 0) {
              goto LABEL_513;
            }
LABEL_478:
            if (!a3) {
              goto LABEL_513;
            }
          }

          xmlSchemaNewValue(v17);
          if (!v67) {
            goto LABEL_631;
          }
          uint64_t v202 = *((void *)&v254 + 1);
          *(void *)(v67 + 16) = v255;
          *(void *)(v67 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v202;
          *(void *)(v67 + 32) = v254;
          __int16 v170 = v34 << 8;
          break;
        case '(':
          unint64_t v199 = *((void *)&v254 + 1) | v254 | ((unint64_t)v255 >> 16);
          if (v199) {
            int v66 = 7;
          }
          else {
            int v66 = 4;
          }
          if (v199) {
            goto LABEL_513;
          }
          goto LABEL_478;
        case '*':
          BOOL v35 = v254 == 0;
          uint64_t v36 = v255;
          unint64_t v37 = 255LL;
          goto LABEL_468;
        default:
          goto LABEL_460;
      }

      goto LABEL_511;
    case 43:
      while (1)
      {
        unsigned int v143 = *a2;
        if (v143 > 0x20 || ((1LL << v143) & 0x100002600LL) == 0) {
          break;
        }
        ++a2;
      }

      unsigned int v145 = 0;
      int v146 = 1;
      uint64_t v147 = a2;
      while ((v143 - 48) < 0xAu
           || v143 - 65 <= 0x25
           && ((1LL << (v143 - 65)) & 0x3F0000003FLL) != 0)
      {
        ++v145;
        char v148 = *++v147;
        LOBYTE(v14xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = v148;
        ++v146;
      }

      uint64_t v149 = 1LL;
      if ((v143 != 0) | v145 & 1 || !a3)
      {
      }

      else
      {
        xmlSchemaNewValue(43);
        if (!v150) {
          goto LABEL_599;
        }
        uint64_t v87 = v150;
        uint64_t v151 = xmlStrndup((const xmlChar *)a2, v145);
        if (!v151)
        {
          __xmlSimpleError(15, 2, a4, 0LL, (uint64_t)"allocating hexbin data");
          xmlFreeFunc v89 = xmlFree;
          goto LABEL_540;
        }

        if (v145)
        {
          unsigned int v152 = v151;
          do
          {
            unsigned int v153 = *v152;
            if (v153 >= 0x61) {
              *unsigned int v152 = v153 - 32;
            }
            ++v152;
            --v146;
          }

          while (v146 > 1);
        }

        *((void *)v87 + 2) = v151;
        *((_DWORD *)v87 + 6) = v145 >> 1;
        *a3 = v87;
      }

      goto LABEL_631;
    case 44:
      xmlChar v98 = *a2;
      if (*a2)
      {
        unsigned int v99 = 0;
        uint64_t v100 = a2;
        while (1)
        {
          int v101 = _xmlSchemaBase64Decode(v98);
          if (v101 >= 64) {
            break;
          }
          int v102 = *++v100;
          xmlChar v98 = v102;
          if (!v102) {
            goto LABEL_382;
          }
        }

        int v178 = 0;
        do
        {
          unsigned int v179 = _xmlSchemaBase64Decode(v98);
          if (v179 < 0x40) {
            goto LABEL_625;
          }
          if (v179 == 64) {
            ++v178;
          }
          int v180 = *++v100;
          xmlChar v98 = v180;
        }

        while (v180);
        int v171 = 3 * (v99 >> 2);
        if (v178 == 2)
        {
          if ((v99 & 3) != 2) {
            goto LABEL_625;
          }
          uint64_t v223 = -1LL;
          do
            unsigned int v224 = _xmlSchemaBase64Decode(v100[v223--]);
          while (v224 > 0x3F);
          if ((v224 & 0xFFFFFFCF) != 0) {
            goto LABEL_625;
          }
          ++v171;
        }

        else
        {
          if (v178 != 1)
          {
            if (v178) {
              goto LABEL_625;
            }
            goto LABEL_383;
          }

          if ((~v99 & 3) != 0) {
            goto LABEL_625;
          }
          uint64_t v225 = -1LL;
          do
            unsigned int v226 = _xmlSchemaBase64Decode(v100[v225--]);
          while (v226 > 0x3F);
          if ((v226 & 0xFFFFFFC3) != 0) {
            goto LABEL_625;
          }
          v171 += 2;
        }

LABEL_385:
        if (!a3) {
          goto LABEL_631;
        }
        xmlSchemaNewValue(44);
        if (v172)
        {
          uint64_t v109 = v172;
          uint64_t v173 = (xmlChar *)xmlMallocAtomic((int)(v99 + v178 + 1));
          if (!v173)
          {
            __xmlSimpleError(15, 2, a4, 0LL, (uint64_t)"allocating base64 data");
            ((void (*)(uint64_t))xmlFree)(v109);
            goto LABEL_625;
          }

          uint64_t v174 = v173;
          *(void *)(v109 + 16) = v173;
          xmlChar v175 = *a2;
          if (*a2)
          {
            char v176 = (unsigned __int8 *)(a2 + 1);
            do
            {
              if ((_xmlSchemaBase64Decode(v175) & 0x80000000) == 0) {
                *v174++ = v175;
              }
              int v177 = *v176++;
              xmlChar v175 = v177;
            }

            while (v177);
          }

          *uint64_t v174 = 0;
          *(_DWORD *)(v109 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v171;
LABEL_300:
          *a3 = (xmlChar *)v109;
LABEL_631:
          if (v16) {
            xmlFree(v16);
          }
          return 0LL;
        }

        goto LABEL_599;
      }

      unsigned int v99 = 0;
LABEL_382:
      int v171 = 3 * ((int)v99 / 4);
LABEL_383:
      if ((v99 & 3) != 0) {
        goto LABEL_625;
      }
      int v178 = 0;
      goto LABEL_385;
    case 45:
    case 46:
      if (!a3 || !a7) {
        goto LABEL_631;
      }
      int v64 = 46;
      goto LABEL_297;
    default:
      goto LABEL_655;
  }

int xmlSchemaValPredefTypeNodeNoNorm( xmlSchemaTypePtr type, const xmlChar *value, xmlSchemaValPtr *val, xmlNodePtr node)
{
  return xmlSchemaValAtomicType((uint64_t)type, (char *)value, (xmlChar **)val, (uint64_t)node, 1, 0, 1);
}

int xmlSchemaValidatePredefinedType(xmlSchemaTypePtr type, const xmlChar *value, xmlSchemaValPtr *val)
{
  return xmlSchemaValAtomicType((uint64_t)type, (char *)value, (xmlChar **)val, 0LL, 0, 1, 0);
}

xmlSchemaValPtr xmlSchemaCopyValue(xmlSchemaValPtr val)
{
  if (val)
  {
    xmlSchemaValPtr v1 = (__n128 *)val;
    uint64_t v2 = 0LL;
    uint64_t v3 = 0LL;
    while (2)
    {
      switch(v1->n128_u32[0])
      {
        case 1u:
        case 2u:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x14u:
        case 0x16u:
        case 0x17u:
        case 0x18u:
        case 0x1Au:
        case 0x1Du:
        case 0x2Bu:
        case 0x2Cu:
        case 0x2Eu:
          xmlSchemaDupVal(v1);
          uint64_t v5 = v4;
          uint64_t v6 = (const xmlChar *)v1[1].n128_u64[0];
          if (v6) {
            *(void *)(v5 + 16) = xmlStrdup(v6);
          }
          goto LABEL_6;
        case 0x13u:
        case 0x19u:
        case 0x1Bu:
        case 0x2Du:
          xmlSchemaFreeValue(v3);
          return 0LL;
        case 0x15u:
        case 0x1Cu:
          xmlSchemaDupVal(v1);
          uint64_t v5 = v7;
          int v8 = (const xmlChar *)v1[1].n128_u64[0];
          if (v8) {
            *(void *)(v5 + 16) = xmlStrdup(v8);
          }
          xmlSchemaFacetPtr v9 = (const xmlChar *)v1[1].n128_u64[1];
          if (v9) {
            *(void *)(v5 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = xmlStrdup(v9);
          }
          goto LABEL_6;
        default:
          xmlSchemaDupVal(v1);
          uint64_t v5 = v10;
LABEL_6:
          xmlSchemaValPtr val = (xmlSchemaValPtr)v5;
          if (v3)
          {
            *(void *)(v2 + 8) = v5;
            xmlSchemaValPtr val = v3;
          }

          xmlSchemaValPtr v1 = (__n128 *)v1->n128_u64[1];
          uint64_t v2 = v5;
          uint64_t v3 = val;
          if (!v1) {
            return val;
          }
          continue;
      }
    }
  }

  return val;
}

__n128 xmlSchemaDupVal(__n128 *a1)
{
  unsigned __int32 v2 = a1->n128_u32[0];
  uint64_t v3 = xmlMalloc(0x30uLL);
  if (v3)
  {
    v3[1] = 0u;
    void v3[2] = 0u;
    *uint64_t v3 = 0u;
    *(_DWORD *)uint64_t v3 = v2;
    __n128 result = a1[2];
    __n128 v5 = *a1;
    v3[1] = a1[1];
    void v3[2] = result;
    *uint64_t v3 = v5;
    *((void *)v3 + 1) = 0LL;
  }

  return result;
}

int xmlSchemaCompareValues(xmlSchemaValPtr x, xmlSchemaValPtr y)
{
  if (!x || !y) {
    return -2;
  }
  int v4 = *(_DWORD *)x;
  if (v4 == 2) {
    int v5 = 2;
  }
  else {
    int v5 = 3;
  }
  if (v4 == 1) {
    int v6 = 1;
  }
  else {
    int v6 = v5;
  }
  unsigned int v7 = *(_DWORD *)y;
  if (*(_DWORD *)y == 2) {
    int v8 = 2;
  }
  else {
    int v8 = 3;
  }
  if (v7 == 1) {
    int v9 = 1;
  }
  else {
    int v9 = v8;
  }
  return xmlSchemaCompareValuesInternal(v4, (uint64_t)x, 0LL, v6, v7, (uint64_t)y, 0LL, v9);
}

uint64_t xmlSchemaCompareValuesInternal( int a1, uint64_t a2, xmlChar *str1, int a4, unsigned int a5, uint64_t a6, xmlChar *str2, int a8)
{
  uint64_t v8 = 4294967294LL;
  switch(a1)
  {
    case 1:
    case 2:
    case 16:
    case 17:
    case 18:
    case 20:
    case 22:
    case 23:
    case 24:
    case 26:
    case 29:
    case 46:
      if (a2) {
        str1 = *(xmlChar **)(a2 + 16);
      }
      if (a6) {
        str2 = *(xmlChar **)(a6 + 16);
      }
      if (a5 > 0x2E) {
        return v8;
      }
      if (((1LL << a5) & 0x400025D70006LL) == 0)
      {
        if (a5 == 21LL)
        {
          xmlGenericErrorFunc v40 = *__xmlGenericError();
          BOOL v41 = *__xmlGenericErrorContext();
          v40( v41,  "Unimplemented block at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemastypes.c",  4909);
        }

        return v8;
      }

      if (a4 == 3)
      {
        if (a8 == 3) {
          return xmlSchemaCompareNormStrings(str1, str2);
        }
        if (a8 != 2)
        {
          if (a8 != 1) {
            return v8;
          }
          int v33 = str2;
          __int16 v34 = str1;
          int v35 = 1;
          return xmlSchemaComparePreserveCollapseStrings(v33, v34, v35);
        }

        int v51 = str2;
        int v52 = str1;
        int v53 = 1;
        return xmlSchemaCompareReplaceCollapseStrings(v51, v52, v53);
      }

      if (a4 != 2)
      {
        if (a4 != 1) {
          return v8;
        }
        if (a8 != 3)
        {
          if (a8 != 2)
          {
            if (a8 != 1) {
              return v8;
            }
            BOOL v12 = xmlStrEqual(str1, str2) == 0;
            return (2 * v12);
          }

          uint64_t v36 = str1;
          unint64_t v37 = str2;
          int v38 = 0;
          return xmlSchemaComparePreserveReplaceStrings(v36, v37, v38);
        }

        int v33 = str1;
        __int16 v34 = str2;
        int v35 = 0;
        return xmlSchemaComparePreserveCollapseStrings(v33, v34, v35);
      }

      if (a8 == 3)
      {
        int v51 = str1;
        int v52 = str2;
        int v53 = 0;
        return xmlSchemaCompareReplaceCollapseStrings(v51, v52, v53);
      }

      if (a8 != 2)
      {
        if (a8 != 1) {
          return v8;
        }
        uint64_t v36 = str2;
        unint64_t v37 = str1;
        int v38 = 1;
        return xmlSchemaComparePreserveReplaceStrings(v36, v37, v38);
      }

      return xmlSchemaCompareReplacedStrings(str1, str2);
    case 3:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
      if (!a2 || !a6 || a5 != a1 && a5 - 30 >= 0xD && a5 != 3) {
        return v8;
      }
      return xmlSchemaCompareDecimals(a2, a6);
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      if (a5 - 4 > 7
        || !a2
        || !a6
        || (unint64_t)(*(void *)(a2 + 16) - 0x5987B1A9448BE5LL) < 0xFF4CF09CAD76E837LL
        || (unint64_t)(*(void *)(a6 + 16) - 0x5987B1A9448BE5LL) < 0xFF4CF09CAD76E837LL)
      {
        return v8;
      }

      __int16 v13 = *(_WORD *)(a6 + 40);
      if ((*(_WORD *)(a2 + 40) & 1) != 0)
      {
        if ((v13 & 1) != 0) {
          goto LABEL_122;
        }
        xmlSchemaDateNormalize((__n128 *)a2, 0.0);
        uint64_t v18 = v54;
        int64_t v55 = _xmlSchemaDateCastYMToDays(v54) + (((unint64_t)*(unsigned int *)(v54 + 24) >> 4) & 0x1F);
        xmlSchemaDateNormalize((__n128 *)a6, 50400.0);
        uint64_t v15 = v56;
        uint64_t v57 = _xmlSchemaDateCastYMToDays(v56);
        unint64_t v58 = *(unsigned int *)(v15 + 24);
        int64_t v59 = v57 + ((v58 >> 4) & 0x1F);
        if (v55 < v59) {
          goto LABEL_99;
        }
        if (v55 == v59)
        {
          if (*(double *)(v18 + 32)
             + (double)(3600 * ((*(_DWORD *)(v18 + 24) >> 9) & 0x1F)
                      + 60 * (((*(_DWORD *)(v18 + 24) >> 14) & 0x3F) + ((__int16)(8 * *(_WORD *)(v18 + 40)) >> 4)))
             - (*(double *)(v15 + 32)
              + (double)(int)(3600 * ((v58 >> 9) & 0x1F)
                            + 60 * (((v58 >> 14) & 0x3F) + ((__int16)(8 * *(_WORD *)(v15 + 40)) >> 4)))) >= 0.0)
          {
            xmlSchemaDateNormalize((__n128 *)a6, -50400.0);
            uint64_t v23 = v63;
            uint64_t v64 = _xmlSchemaDateCastYMToDays(v63);
            unint64_t v65 = *(unsigned int *)(v23 + 24);
            int64_t v66 = v64 + ((v65 >> 4) & 0x1F);
            if (v55 <= v66)
            {
              if (v55 == v66)
              {
                char v27 = 0;
                double v28 = *(double *)(v18 + 32)
                    + (double)(3600 * ((*(_DWORD *)(v18 + 24) >> 9) & 0x1F)
                             + 60
                             * (((*(_DWORD *)(v18 + 24) >> 14) & 0x3F) + ((__int16)(8 * *(_WORD *)(v18 + 40)) >> 4)));
                double v29 = (double)(int)(3600 * ((v65 >> 9) & 0x1F)
                                  + 60
                                  * (((v65 >> 14) & 0x3F) + ((__int16)(8 * *(_WORD *)(v23 + 40)) >> 4)));
                double v30 = *(double *)(v23 + 32);
LABEL_164:
                if (v28 - (v30 + v29) > 0.0) {
                  uint64_t v8 = 1LL;
                }
                else {
                  uint64_t v8 = 2LL;
                }
LABEL_168:
                xmlSchemaFreeValue((xmlSchemaValPtr)v18);
                xmlSchemaFreeValue((xmlSchemaValPtr)v15);
                xmlSchemaFreeValue((xmlSchemaValPtr)v23);
                if ((v27 & 1) == 0) {
                  return v8;
                }
LABEL_122:
                if (*(_DWORD *)a2 == *(_DWORD *)a6)
                {
                  xmlSchemaDateNormalize((__n128 *)a6, 0.0);
                  uint64_t v68 = v67;
                  int64_t v69 = _xmlSchemaDateCastYMToDays(v67) + (((unint64_t)*(unsigned int *)(v67 + 24) >> 4) & 0x1F);
                  xmlSchemaDateNormalize((__n128 *)a2, 0.0);
                  uint64_t v71 = v70;
                  uint64_t v72 = _xmlSchemaDateCastYMToDays(v70);
                  unint64_t v73 = *(unsigned int *)(v71 + 24);
                  int64_t v74 = v72 + ((v73 >> 4) & 0x1F);
                  if (v74 >= v69)
                  {
                    if (v74 <= v69)
                    {
                      double v75 = *(double *)(v71 + 32)
                          + (double)(int)(3600 * ((v73 >> 9) & 0x1F)
                                        + 60
                                        * (((v73 >> 14) & 0x3F)
                                         + ((__int16)(8 * *(_WORD *)(v71 + 40)) >> 4)))
                          - (*(double *)(v68 + 32)
                           + (double)(3600 * ((*(_DWORD *)(v68 + 24) >> 9) & 0x1F)
                                    + 60
                                    * (((*(_DWORD *)(v68 + 24) >> 14) & 0x3F)
                                     + ((__int16)(8 * *(_WORD *)(v68 + 40)) >> 4))));
                      if (v75 < 0.0) {
                        goto LABEL_126;
                      }
                      if (v75 <= 0.0)
                      {
                        uint64_t v8 = 0LL;
                        goto LABEL_155;
                      }
                    }

                    uint64_t v8 = 1LL;
                    goto LABEL_155;
                  }

LABEL_126:
                  uint64_t v8 = 0xFFFFFFFFLL;
LABEL_155:
                  xmlSchemaFreeValue((xmlSchemaValPtr)v71);
                  xmlSchemaFreeValue((xmlSchemaValPtr)v68);
                  return v8;
                }

                int v76 = *(_DWORD *)a2 - 4;
                else {
                  int v77 = dword_181A37EB4[v76];
                }
                int v78 = *(_DWORD *)a6 - 4;
                else {
                  int v79 = dword_181A37EB4[v78];
                }
                unsigned int v80 = v79 ^ v77;
                if (((v79 ^ v77) & 1) == 0)
                {
                  unsigned int v81 = v79 & v77;
                  if ((v81 & 1) != 0)
                  {
                    uint64_t v82 = *(void *)(a2 + 16);
                    uint64_t v83 = *(void *)(a6 + 16);
                    if (v82 < v83) {
                      return 0xFFFFFFFFLL;
                    }
                    if (v82 > v83) {
                      return 1LL;
                    }
                  }

                  if ((v80 & 2) == 0)
                  {
                    if ((v81 & 2) != 0)
                    {
                      if ((*(_DWORD *)(a2 + 24) & 0xFu) < (*(_DWORD *)(a6 + 24) & 0xFu)) {
                        return 0xFFFFFFFFLL;
                      }
                      if ((*(_DWORD *)(a2 + 24) & 0xFu) > (*(_DWORD *)(a6 + 24) & 0xFu)) {
                        return 1LL;
                      }
                    }

                    if ((v80 & 4) == 0)
                    {
                      if ((v81 & 4) != 0)
                      {
                        unsigned int v84 = (*(_DWORD *)(a2 + 24) >> 4) & 0x1F;
                        unsigned int v85 = (*(_DWORD *)(a6 + 24) >> 4) & 0x1F;
                        if (v84 < v85) {
                          return 0xFFFFFFFFLL;
                        }
                        if (v84 > v85) {
                          return 1LL;
                        }
                      }

                      if (v80 <= 7)
                      {
                        if (v81 < 8) {
                          return 0LL;
                        }
                        unsigned int v86 = *(_DWORD *)(a2 + 24);
                        unsigned int v87 = (v86 >> 9) & 0x1F;
                        unsigned int v88 = *(_DWORD *)(a6 + 24);
                        unsigned int v89 = (v88 >> 9) & 0x1F;
                        if (v87 < v89) {
                          return 0xFFFFFFFFLL;
                        }
                        if (v87 <= v89)
                        {
                          unsigned int v90 = (v86 >> 14) & 0x3F;
                          unsigned int v91 = (v88 >> 14) & 0x3F;
                          if (v90 < v91) {
                            return 0xFFFFFFFFLL;
                          }
                          if (v90 <= v91)
                          {
                            double v92 = *(double *)(a2 + 32);
                            double v93 = *(double *)(a6 + 32);
                            if (v92 >= v93) {
                              return v92 > v93;
                            }
                            return 0xFFFFFFFFLL;
                          }
                        }

                        return 1LL;
                      }
                    }
                  }
                }

                return 2LL;
              }

          if ((v82 & 1) != 0)
          {
LABEL_127:
            if (xmlXPathNodeSetAddNs(cur, context->node, (xmlNsPtr)v43) < 0) {
              goto LABEL_128;
            }
            goto LABEL_129;
          }

          ++v44;
          unsigned int v45 = v46;
          if (v44 != v79) {
            goto LABEL_97;
          }
LABEL_175:
          if (xmlXPathNodeSetAddNs(cur, context->node, (xmlNsPtr)v43) < 0) {
LABEL_156:
          }
            v5->error = 15;
LABEL_157:
          p_nodeNr = &nodesetval->nodeNr;
          if (val)
          {
            xmlSchemaValPtr val = (xmlNodeSetPtr)v81((unsigned int *)val, &cur->nodeNr);
          }

          else
          {
            xmlSchemaValPtr val = cur;
            cur = 0LL;
          }

          unint64_t v37 = v46;
LABEL_172:
          if (!v74) {
            goto LABEL_173;
          }
LABEL_184:
          if (v20->BOOLval)
          {
            user = v20->user;
            if (user)
            {
              unint64_t v65 = v5->value;
              v65->int BOOLval = 1;
              v65->user = user;
              v20->user = 0LL;
              v20->int BOOLval = 0;
            }
          }

          xmlXPathReleaseObject((uint64_t)context, v20);
          int64_t v66 = val;
          if (!val)
          {
            if (!cur || (int64_t v66 = cur, cur->nodeNr)) {
              int64_t v66 = xmlXPathNodeSetCreate(0LL);
            }
          }

          if (cur && cur != v66) {
            xmlXPathFreeNodeSet(cur);
          }
          uint64_t v67 = xmlXPathCacheWrapNodeSet((uint64_t)context, v66);
          valuePush(v5, v67);
          context->xmlNodePtr node = node;
          tmpNsList = context->tmpNsList;
          if (tmpNsList)
          {
            xmlFree(tmpNsList);
            context->tmpNsList = 0LL;
          }

          return v18;
        default:
          goto LABEL_96;
      }

    default:
      xmlXPathReleaseObject((uint64_t)context, v20);
      return 0LL;
  }

int xmlSchemaCompareValuesWhtsp( xmlSchemaValPtr x, xmlSchemaWhitespaceValueType xws, xmlSchemaValPtr y, xmlSchemaWhitespaceValueType yws)
{
  if (x && y) {
    return xmlSchemaCompareValuesInternal(*(_DWORD *)x, (uint64_t)x, 0LL, xws, *(_DWORD *)y, (uint64_t)y, 0LL, yws);
  }
  else {
    return -2;
  }
}

unint64_t xmlSchemaGetFacetValueAsULong(unint64_t facet)
{
  if (facet)
  {
    uint64_t v1 = *(void *)(facet + 56);
    if (v1) {
      return *(void *)(v1 + 16);
    }
    else {
      return 0LL;
    }
  }

  return facet;
}

int xmlSchemaValidateListSimpleTypeFacet( xmlSchemaFacetPtr facet, const xmlChar *value, unint64_t actualLen, unint64_t *expectedLen)
{
  if (!facet) {
    return -1;
  }
  xmlSchemaTypeType type = facet->type;
  if (facet->type == XML_SCHEMA_FACET_MINLENGTH)
  {
    unint64_t v5 = *((void *)facet->val + 2);
    if (v5 <= actualLen) {
      return 0;
    }
    int result = 1831;
    if (expectedLen) {
      goto LABEL_15;
    }
  }

  else
  {
    if (type != XML_SCHEMA_FACET_MAXLENGTH)
    {
      if (type == XML_SCHEMA_FACET_LENGTH)
      {
        unint64_t v5 = *((void *)facet->val + 2);
        if (v5 != actualLen)
        {
          int result = 1830;
          if (!expectedLen) {
            return result;
          }
LABEL_15:
          *expectedLeuint64_t n = v5;
          return result;
        }

        return 0;
      }

      return -1;
    }

    unint64_t v5 = *((void *)facet->val + 2);
    if (v5 >= actualLen) {
      return 0;
    }
    int result = 1832;
    if (expectedLen) {
      goto LABEL_15;
    }
  }

  return result;
}

int xmlSchemaValidateFacet( xmlSchemaTypePtr base, xmlSchemaFacetPtr facet, const xmlChar *value, xmlSchemaValPtr val)
{
  if (val)
  {
    unsigned int builtInType = *(_DWORD *)val;
    unsigned int v7 = (int *)facet;
    return xmlSchemaValidateFacetInternal(v7, 0, builtInType, (xmlChar *)value, (uint64_t)val, 0);
  }

  if (base)
  {
    unsigned int builtInType = base->builtInType;
    unsigned int v7 = (int *)facet;
    xmlSchemaValPtr val = 0LL;
    return xmlSchemaValidateFacetInternal(v7, 0, builtInType, (xmlChar *)value, (uint64_t)val, 0);
  }

  return -1;
}

int xmlSchemaValidateLengthFacet( xmlSchemaTypePtr type, xmlSchemaFacetPtr facet, const xmlChar *value, xmlSchemaValPtr val, unint64_t *length)
{
  if (type) {
    return xmlSchemaValidateLengthFacetInternal((uint64_t)facet, type->builtInType, (xmlChar *)value, val, length, 0);
  }
  else {
    return -1;
  }
}

uint64_t xmlSchemaValidateLengthFacetInternal( uint64_t a1, unsigned int a2, xmlChar *utf, _DWORD *a4, void *a5, int a6)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1)
  {
    if (a5)
    {
      *a5 = 0LL;
      if ((*(_DWORD *)a1 - 1009) <= 2)
      {
        uint64_t v9 = *(void *)(a1 + 56);
        if (v9)
        {
          BOOL v10 = *(_DWORD *)v9 == 33 || *(_DWORD *)v9 == 3;
          if (v10 && (*(_WORD *)(v9 + 44) & 0xFE) == 0)
          {
            if (a4 && (*a4 == 44 || *a4 == 43))
            {
              unsigned int v11 = a4[6];
              goto LABEL_27;
            }

            if (a2 <= 0x1D)
            {
              if (((1 << a2) & 0x21D70000) != 0)
              {
                if (utf)
                {
LABEL_18:
                  unsigned int v11 = xmlSchemaNormLen(utf);
                  goto LABEL_27;
                }

                goto LABEL_26;
              }

              if (((1 << a2) & 6) != 0)
              {
                if (a6)
                {
                  if (!utf) {
                    goto LABEL_26;
                  }
                  if (a6 == 3) {
                    goto LABEL_18;
                  }
                }

                else if (a2 != 1)
                {
                  goto LABEL_18;
                }

                unsigned int v11 = xmlUTF8Strlen(utf);
LABEL_27:
                *a5 = v11;
                if (*(_DWORD *)a1 == 1011)
                {
                }

                else if (*(_DWORD *)a1 == 1009)
                {
                  if (*(void *)(*(void *)(a1 + 56) + 16LL) != v11) {
                    return 1830LL;
                  }
                }

                else if (*(void *)(*(void *)(a1 + 56) + 16LL) < (unint64_t)v11)
                {
                  return 1832LL;
                }

                return 0LL;
              }

              if (((1 << a2) & 0x10200000) != 0) {
                return 0LL;
              }
            }

            xmlGenericErrorFunc v12 = *__xmlGenericError();
            __int16 v13 = __xmlGenericErrorContext();
            v12( *v13,  "Unimplemented block at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemastypes.c",  5335);
LABEL_26:
            unsigned int v11 = 0;
            goto LABEL_27;
          }
        }
      }
    }
  }

  return result;
}

uint64_t xmlSchemaValidateFacetInternal(int *a1, int a2, unsigned int a3, xmlChar *str2, uint64_t a5, int a6)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  int v7 = *a1;
  uint64_t v8 = str2;
  uint64_t result = 0LL;
  switch(v7)
  {
    case 1000:
      unsigned int v16 = xmlSchemaCompareValues((xmlSchemaValPtr)a5, *((xmlSchemaValPtr *)a1 + 7));
      BOOL v17 = v16 >= 2;
      unsigned int v18 = 1833;
      goto LABEL_30;
    case 1001:
      int v19 = xmlSchemaCompareValues((xmlSchemaValPtr)a5, *((xmlSchemaValPtr *)a1 + 7));
      BOOL v20 = v19 == 1;
      unsigned int v21 = 1835;
      goto LABEL_52;
    case 1002:
      unsigned int v16 = xmlSchemaCompareValues((xmlSchemaValPtr)a5, *((xmlSchemaValPtr *)a1 + 7));
      BOOL v17 = v16 + 1 >= 2;
      unsigned int v18 = 1834;
LABEL_30:
      if (!v17) {
        unsigned int v18 = 0;
      }
      if (v16 == -2) {
        return 0xFFFFFFFFLL;
      }
      else {
        return v18;
      }
    case 1003:
      int v19 = xmlSchemaCompareValues((xmlSchemaValPtr)a5, *((xmlSchemaValPtr *)a1 + 7));
      BOOL v20 = v19 == -1;
      unsigned int v21 = 1836;
      goto LABEL_52;
    case 1004:
    case 1005:
      uint64_t v13 = *((void *)a1 + 7);
      uint64_t result = 0xFFFFFFFFLL;
      if (v7 != 1005)
      {
        return 0LL;
      }

      return 1838LL;
    case 1006:
      if (!str2) {
        return 0xFFFFFFFFLL;
      }
      if (a5)
      {
        if (*(void *)(a5 + 16))
        {
          int v22 = *(_DWORD *)a5;
        }
      }

      int v23 = xmlRegexpExec(*((xmlRegexpPtr *)a1 + 8), v8);
      if (v23) {
        unsigned int v24 = v23;
      }
      else {
        unsigned int v24 = 1839;
      }
      if (v23 == 1) {
        return 0LL;
      }
      else {
        return v24;
      }
    case 1007:
      if (a6)
      {
        int v19 = xmlSchemaCompareValuesInternal( **((_DWORD **)a1 + 7),  *((void *)a1 + 7),  *((xmlChar **)a1 + 2),  a2,  a3,  a5,  str2,  a6);
        BOOL v20 = v19 == 0;
        unsigned int v21 = 1840;
LABEL_52:
        if (v20) {
          unsigned int v21 = 0;
        }
        if (v19 == -2) {
          return 0xFFFFFFFFLL;
        }
        else {
          return v21;
        }
      }

      unint64_t v25 = (const xmlChar *)*((void *)a1 + 2);
      if (!v25 || !xmlStrEqual(v25, str2)) {
        return 1840LL;
      }
      return 0LL;
    case 1008:
      return result;
    case 1009:
    case 1010:
    case 1011:
      uint64_t result = 0LL;
      if (a3 == 21 || a3 == 28) {
        return result;
      }
      uint64_t v10 = *((void *)a1 + 7);
      if (!v10) {
        return 0xFFFFFFFFLL;
      }
      BOOL v11 = *(_DWORD *)v10 == 33 || *(_DWORD *)v10 == 3;
      if (!v11 || (*(_WORD *)(v10 + 44) & 0xFE) != 0) {
        return 0xFFFFFFFFLL;
      }
      if (a5 && (*(_DWORD *)a5 == 44 || *(_DWORD *)a5 == 43))
      {
        unsigned int v12 = *(_DWORD *)(a5 + 24);
        goto LABEL_76;
      }

      if (a3 > 0x1D) {
        goto LABEL_74;
      }
      if (((1 << a3) & 0x21D70000) != 0)
      {
        if (str2)
        {
LABEL_66:
          unsigned int v12 = xmlSchemaNormLen(str2);
          goto LABEL_76;
        }

        goto LABEL_75;
      }

      if (((1 << a3) & 6) == 0)
      {
LABEL_74:
        xmlGenericErrorFunc v26 = *__xmlGenericError();
        char v27 = __xmlGenericErrorContext();
        v26( *v27,  "Unimplemented block at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemastypes.c",  5589);
        goto LABEL_75;
      }

      if (a6)
      {
        if (str2)
        {
          if (a6 == 3) {
            goto LABEL_66;
          }
          goto LABEL_85;
        }

int xmlSchemaGetCanonValue(xmlSchemaValPtr val, const xmlChar **retValue)
{
  uint64_t v86 = *MEMORY[0x1895F89C0];
  int result = -1;
  if (!val || !retValue) {
    return result;
  }
  xmlChar *retValue = 0LL;
  switch(*(_DWORD *)val)
  {
    case 1:
      unsigned int v16 = (char *)*((void *)val + 2);
      if (v16) {
        goto LABEL_102;
      }
      goto LABEL_75;
    case 2:
      BOOL v17 = (const xmlChar *)*((void *)val + 2);
      if (!v17)
      {
LABEL_75:
        unsigned int v16 = &byte_181A3ACBA;
        goto LABEL_102;
      }

      uint64_t v15 = xmlSchemaWhiteSpaceReplace(v17);
LABEL_14:
      xmlChar *retValue = v15;
      if (!v15)
      {
LABEL_15:
        unsigned int v16 = (char *)*((void *)val + 2);
        goto LABEL_102;
      }

      goto LABEL_109;
    case 3:
      unsigned int v18 = *((unsigned __int16 *)val + 22);
      if ((v18 & 0xFF00) == 0x100 && *((void *)val + 2) == 0LL)
      {
        unsigned int v16 = "0.0";
        goto LABEL_102;
      }

      uint64_t v20 = *((void *)val + 3);
      uint64_t v21 = *((void *)val + 4);
      unsigned int v22 = v18 >> 8;
      if ((v18 & 1) != 0) {
        int v23 = 3;
      }
      else {
        int v23 = 2;
      }
      unsigned int v24 = v23 + (v18 >> 8);
      uint64_t v25 = v18 >> 1;
      else {
        BOOL v26 = 1;
      }
      if (v26) {
        size_t v27 = v24 + 1;
      }
      else {
        size_t v27 = v24;
      }
      double v28 = xmlMalloc(v27);
      if (!v28) {
        return -1;
      }
      double v29 = v28;
      double v30 = v28;
      if ((v18 & 1) != 0)
      {
        *double v28 = 45;
        double v30 = v28 + 1;
      }

      if (v22 == (_DWORD)v25)
      {
        *(_WORD *)double v30 = 11824;
        v30 += 2;
      }

      size_t v31 = &v28[v27] - v30;
      if (v21)
      {
        snprintf(v30, v31, "%lu%lu%lu");
      }

      else if (v20)
      {
        snprintf(v30, v31, "%lu%lu");
      }

      else
      {
        snprintf(v30, v31, "%lu");
      }

      if (!(v18 >> 1))
      {
        int64_t v69 = (char *)&v29[v27 - 3];
        *(_WORD *)&v29[v27 - 2] = 48;
LABEL_124:
        char *v69 = 46;
        goto LABEL_125;
      }

      if (v22 != (_DWORD)v25)
      {
        int64_t v69 = &v30[(int)(v22 - v25)];
        memmove(v69 + 1, v69, v25 + 1);
        goto LABEL_124;
      }

      unsigned int v67 = -1;
      do
        ++v67;
      while (v30[v67]);
      size_t v68 = v22 - v67;
      if (v22 > v67)
      {
        memmove(&v30[v68], v30, v67 + 1);
        memset(v30, 48, v68);
      }

void xmlSchemaDateNormalize(__n128 *a1, double a2)
{
  BOOL v3 = a1->n128_u32[0] > 0xB || ((1 << a1->n128_u32[0]) & 0xC10) == 0;
  if (v3 || (a1[2].n128_u16[4] & 0x1FFE) == 0)
  {
    xmlSchemaDupVal(a1);
    return;
  }

  unsigned int v5 = (double *)xmlMalloc(0x30uLL);
  if (v5)
  {
    uint64_t v6 = v5;
    *((_OWORD *)v5 + 1) = 0u;
    *((_OWORD *)v5 + 2) = 0u;
    *(_OWORD *)unsigned int v5 = 0u;
    *(_DWORD *)unsigned int v5 = 12;
    v5[4] = v5[4] - a2;
    unsigned __int32 v7 = a1->n128_u32[0];
    uint64_t v8 = (xmlSchemaVal *)xmlMalloc(0x30uLL);
    uint64_t v9 = v8;
    if (v8)
    {
      *((_OWORD *)v8 + 1) = 0u;
      *((_OWORD *)v8 + 2) = 0u;
      *(_OWORD *)uint64_t v8 = 0u;
      *(_DWORD *)uint64_t v8 = v7;
      xmlSchemaDupVal(a1);
      if (!v10)
      {
        xmlSchemaFreeValue(v9);
        return;
      }

      int v11 = *(_DWORD *)(v10 + 24);
      if ((v11 & 0xF) == 0) {
        *(_DWORD *)(v10 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v11 & 0xFFFFFFF0 | 1;
      }
      v6[4] = v6[4] - (double)(60 * (*(unsigned __int16 *)(v10 + 40) << 19 >> 20));
      *(_WORD *)(v10 + 40) &= 0xE001u;
      unsigned int v12 = *(_DWORD *)(v10 + 24);
      if ((v12 & 0x1F0) == 0)
      {
        unsigned int v12 = v12 & 0xFFFFFE0F | 0x10;
        *(_DWORD *)(v10 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v12;
      }

      double v13 = (double)(*((void *)v6 + 2) + (v12 & 0xF) - 1LL);
      unsigned int v14 = (v13 - floor(v13 / 12.0) * 12.0 + 1.0);
      unsigned int v15 = *((_DWORD *)v9 + 6) & 0xFFFFFFF0 | v14 & 0xF;
      *((_DWORD *)v9 + 6) = v15;
      int64_t v16 = *(void *)(v10 + 16) + vcvtmd_s64_f64(v13 / 12.0);
      *((void *)v9 + 2) = v16;
      if (!v16)
      {
        int64_t v16 = 1LL;
        *((void *)v9 + 2) = v16;
      }

      __int16 v17 = *((_WORD *)v9 + 20) & 0xE001 | (2 * ((*(_WORD *)(v10 + 40) >> 1) & 0xFFF));
      *((_WORD *)v9 + 2xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v17;
      *((_WORD *)v9 + 2xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v17 & 0xFFFE | *(_WORD *)(v10 + 40) & 1;
      double v18 = *(double *)(v10 + 32) + v6[4];
      unint64_t v19 = vcvtmd_s64_f64((double)(uint64_t)v18 / 60.0);
      double v20 = floor(v18 / 60.0);
      if (v18 != 0.0) {
        double v18 = v18 - v20 * 60.0;
      }
      *((double *)v9 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v18;
      double v21 = (double)(uint64_t)((((unint64_t)*(unsigned int *)(v10 + 24) >> 14) & 0x3F) + v19);
      unsigned int v22 = v15 & 0xFFF03FFF | (((v21 - floor(v21 / 60.0) * 60.0) & 0x3F) << 14);
      *((_DWORD *)v9 + 6) = v22;
      double v23 = (double)(uint64_t)(vcvtmd_s64_f64(v21 / 60.0) + (((unint64_t)*(unsigned int *)(v10 + 24) >> 9) & 0x1F));
      unsigned int v24 = v22 & 0xFFFFC1FF | (((v23 - floor(v23 / 24.0) * 24.0) & 0x1F) << 9);
      *((_DWORD *)v9 + 6) = v24;
      unint64_t v25 = vcvtmd_s64_f64(v23 / 24.0);
      uint64_t v26 = (v14 & 0xF) - 1;
      unsigned int v27 = *(_DWORD *)(v10 + 24);
      if (v26 > 0xB
        || ((v16 & 3) != 0 || !(v16 % 100)
          ? (__ROR8__(0x8F5C28F5C28F5C29LL * v16 + 0x51EB851EB851EB0LL, 4) <= 0xA3D70A3D70A3D6uLL
           ? (unsigned int v28 = daysInMonthLeap[v26])
           : (unsigned int v28 = daysInMonth[v26]))
          : (unsigned int v28 = daysInMonthLeap[v26]),
            ((v27 >> 4) & 0x1F) <= v28))
      {
        unsigned int v28 = (v27 >> 4) & 0x1F;
        if (((v27 >> 4) & 0x1E) == 0) {
          unsigned int v28 = 1;
        }
      }

      uint64_t v29 = *((void *)v6 + 3) + v25 + v28;
      while (1)
      {
        if (v29 <= 0)
        {
          unsigned int v30 = v24 & 0xF;
          double v33 = (double)(int)(v30 - 2);
          uint64_t v34 = (uint64_t)(v33 - floor(v33 / 12.0) * 12.0 + 1.0);
          uint64_t v35 = v16 + vcvtmd_s64_f64(v33 / 12.0);
          if (!v35) {
            uint64_t v35 = -1LL;
          }
          if (v34 <= 1) {
            uint64_t v34 = 1LL;
          }
          unint64_t v36 = 0x8F5C28F5C28F5C29LL * v35;
          unint64_t v37 = __ROR8__(0x8F5C28F5C28F5C29LL * v35 + 0x51EB851EB851EB8LL, 2);
          uint64_t v38 = v35 & 3;
          BOOL v39 = v37 > 0x28F5C28F5C28F5CLL && v38 == 0;
          unint64_t v40 = __ROR8__(v36 + 0x51EB851EB851EB0LL, 4);
          if (!v39 && v40 >= 0xA3D70A3D70A3D7LL) {
            double v42 = daysInMonth;
          }
          else {
            double v42 = daysInMonthLeap;
          }
          v29 += v42[v34 - 1];
          uint64_t v43 = -1LL;
        }

        else
        {
          unsigned int v30 = v24 & 0xF;
          uint64_t v31 = v30 - 1;
          if (v31 > 0xB
            || ((v16 & 3) != 0 || !(v16 % 100)
              ? (__ROR8__(0x51EB851EB851EB0LL - 0x70A3D70A3D70A3D7LL * v16, 4) <= 0xA3D70A3D70A3D6uLL
               ? (unint64_t v32 = daysInMonthLeap[v31])
               : (unint64_t v32 = daysInMonth[v31]))
              : (unint64_t v32 = daysInMonthLeap[v31]),
                v29 <= v32))
          {
            *((_DWORD *)v9 + 6) = v24 & 0xFFFFFE0F | (16 * (v29 & 0x1F));
            int v47 = *(_DWORD *)v9;
            if (*(_DWORD *)v9 != 11)
            {
              int v48 = 11;
              if (v18 != 0.0 || (v24 & 0xFFE00) != 0)
              {
LABEL_75:
                *(_DWORD *)uint64_t v9 = v48;
              }

              else if (v47 != 10)
              {
                int v49 = v24 & 0xF;
                if (v49 != 1 && (v29 & 0x1F) != 1)
                {
                  int v48 = 10;
                  goto LABEL_75;
                }

                if (v49 != 1 && v47 != 9)
                {
                  int v48 = 9;
                  goto LABEL_75;
                }
              }
            }

            xmlSchemaFreeValue((xmlSchemaValPtr)v10);
            xmlSchemaFreeValue((xmlSchemaValPtr)v6);
            return;
          }

          v29 -= v32;
          uint64_t v43 = 1LL;
        }

        uint64_t v44 = v43 + v30;
        double v45 = (double)(v44 - 1);
        unsigned int v24 = v24 & 0xFFFFFFF0 | (v45 - floor(v45 / 12.0) * 12.0 + 1.0) & 0xF;
        *((_DWORD *)v9 + 6) = v24;
        v16 += vcvtmd_s64_f64(v45 / 12.0);
        if (v44 < 1) {
          uint64_t v46 = -1LL;
        }
        else {
          uint64_t v46 = 1LL;
        }
        if (!v16) {
          int64_t v16 = v46;
        }
        *((void *)v9 + 2) = v16;
      }
    }
  }

int xmlSchemaGetCanonValueWhtsp(xmlSchemaValPtr val, const xmlChar **retValue, xmlSchemaWhitespaceValueType ws)
{
  int result = -1;
  if (val && retValue && ws - 4 >= 0xFFFFFFFD)
  {
    xmlChar *retValue = 0LL;
    if (*(_DWORD *)val == 2)
    {
      uint64_t v6 = (const xmlChar *)*((void *)val + 2);
      if (!v6)
      {
        uint64_t v8 = (const xmlChar *)&byte_181A3ACBA;
        goto LABEL_20;
      }

      if (ws == XML_SCHEMA_WHITESPACE_COLLAPSE)
      {
LABEL_12:
        unsigned __int32 v7 = xmlSchemaCollapseString(v6);
        goto LABEL_16;
      }
    }

    else
    {
      if (*(_DWORD *)val != 1) {
        return xmlSchemaGetCanonValue(val, retValue);
      }
      uint64_t v6 = (const xmlChar *)*((void *)val + 2);
      if (!v6)
      {
        unsigned __int32 v7 = xmlStrdup((const xmlChar *)&byte_181A3ACBA);
LABEL_16:
        xmlChar *retValue = v7;
        if (v7) {
          return 0;
        }
        goto LABEL_18;
      }

      if (ws != XML_SCHEMA_WHITESPACE_REPLACE)
      {
        if (ws != XML_SCHEMA_WHITESPACE_COLLAPSE)
        {
LABEL_18:
          uint64_t v8 = (const xmlChar *)*((void *)val + 2);
LABEL_20:
          uint64_t v9 = xmlStrdup(v8);
          int result = 0;
          xmlChar *retValue = v9;
          return result;
        }

        goto LABEL_12;
      }
    }

    unsigned __int32 v7 = xmlSchemaWhiteSpaceReplace(v6);
    goto LABEL_16;
  }

  return result;
}

xmlSchemaValType xmlSchemaGetValType(xmlSchemaValPtr val)
{
  if (val) {
    LODWORD(val) = *(_DWORD *)val;
  }
  return val;
}

uint64_t xmlSchemaParseUInt(unsigned __int8 **a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  int v4 = *a1;
  int v5 = **a1;
  if (v5 == 48)
  {
    do
    {
      int v6 = *++v4;
      unsigned int v7 = v6 - 48;
    }

    while (v6 == 48);
    if (v7 > 9)
    {
      uint64_t v19 = 0LL;
      uint64_t v12 = 0LL;
      uint64_t v13 = 0LL;
      uint64_t v20 = 0LL;
LABEL_22:
      *a1 = v4;
      *a2 = v20;
      *a3 = v19;
      *a4 = v13;
      return v12;
    }
  }

  LODWORD(v8) = -17;
  uint64_t v9 = v4;
  do
  {
    int v10 = *++v9;
    uint64_t v8 = (v8 + 1);
  }

  while ((v10 - 48) < 0xA);
  unsigned int v11 = v8 + 16;
  if ((v8 + 16) <= 0x17)
  {
    uint64_t v12 = (v8 + 17);
    if (v11 < 0x10)
    {
      uint64_t v13 = 0LL;
      uint64_t v19 = 0LL;
      unsigned int v18 = v12;
      unsigned int v21 = v12;
      if (v11 < 8)
      {
LABEL_19:
        uint64_t v20 = 0LL;
        unsigned int v25 = v21 + 1;
        uint64_t v26 = v4;
        do
        {
          unsigned int v27 = *v26++;
          uint64_t v20 = v27 + 10 * v20 - 48;
          --v25;
        }

        while (v25 > 1);
        v4 += v21;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v13 = 0LL;
      uint64_t v14 = v8 + 1;
      unsigned int v15 = v12;
      int64_t v16 = v4;
      do
      {
        unsigned int v17 = *v16++;
        uint64_t v13 = v17 + 10 * v13 - 48;
        --v15;
      }

      while (v15 > 0x10);
      v4 += v14;
      unsigned int v18 = 16;
    }

    uint64_t v19 = 0LL;
    uint64_t v22 = v18 - 9 + 1LL;
    double v23 = v4;
    do
    {
      unsigned int v24 = *v23++;
      uint64_t v19 = v24 + 10 * v19 - 48;
      --v18;
    }

    while (v18 > 8);
    v4 += v22;
    unsigned int v21 = 8;
    goto LABEL_19;
  }

  *a1 = v9;
  return 0xFFFFFFFFLL;
}

uint64_t xmlSchemaValidateDuration(unsigned __int8 *a1, void *a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    unsigned int v3 = *a1;
    BOOL v4 = v3 > 0x20 || ((1LL << v3) & 0x100002600LL) == 0;
    if (v4) {
      break;
    }
    ++a1;
  }

  if (v3 == 45) {
    int v5 = a1 + 1;
  }
  else {
    int v5 = a1;
  }
  int v7 = *v5;
  int v6 = v5 + 1;
  if (v7 != 80 || !*v6) {
    return 1LL;
  }
  uint64_t v8 = xmlMalloc(0x30uLL);
  if (!v8) {
    return 0xFFFFFFFFLL;
  }
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *(_OWORD *)uint64_t v8 = 0u;
  *(_DWORD *)uint64_t v8 = 12;
  int v9 = *v6;
  if (*v6)
  {
    uint64_t v10 = 0LL;
    unsigned int v11 = 0u;
    double v12 = 0.0;
    while (v11 <= 5)
    {
      if (v9 == 84)
      {
        if (v11 > 3) {
          goto LABEL_65;
        }
        int v13 = *++v6;
        int v9 = v13;
        unsigned int v11 = 3u;
      }

      else if (v11 == 3)
      {
        goto LABEL_65;
      }

      if ((v9 - 48) <= 9)
      {
        uint64_t v14 = 0LL;
        while (v14 <= 0xCCCCCCCCCCCCCCCLL)
        {
          uint64_t v15 = (v9 - 48);
          uint64_t v16 = 10 * v14;
          if (v16 > (v15 ^ 0x7FFFFFFFFFFFFFFFLL)) {
            break;
          }
          uint64_t v14 = v15 + v16;
          int v17 = *++v6;
          int v9 = v17;
          if ((v17 - 48) >= 0xA)
          {
            uint64_t v18 = 1LL;
            goto LABEL_27;
          }
        }

        goto LABEL_65;
      }

      uint64_t v14 = 0LL;
      uint64_t v18 = 0LL;
LABEL_27:
      if (v9 == 46)
      {
        int v20 = *++v6;
        int v19 = v20;
        if ((v20 - 48) <= 9)
        {
          double v21 = 1.0;
          do
          {
            double v21 = v21 / 10.0;
            double v12 = v12 + (double)(v19 - 48) * v21;
            int v22 = *++v6;
            int v19 = v22;
          }

          while ((v22 - 48) < 0xA);
          uint64_t v18 = 1LL;
        }
      }

      else
      {
        int v19 = v9;
      }

      while (v19 != aYmdhms[v11])
      {
        if (v11 != 2)
        {
          BOOL v4 = v11++ == 5;
          if (!v4) {
            continue;
          }
        }

        goto LABEL_65;
      }

      BOOL v24 = v9 == 46 && v11 != 5;
      if (!v18 || v24) {
        goto LABEL_65;
      }
      switch(v11)
      {
        case 0u:
          if (v14 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_65;
          }
          uint64_t v25 = 12 * v14;
          goto LABEL_51;
        case 1u:
          uint64_t v26 = *((void *)v8 + 2);
          if (v26 > (v14 ^ 0x7FFFFFFFFFFFFFFFLL)) {
            goto LABEL_65;
          }
          uint64_t v25 = v26 + v14;
LABEL_51:
          *((void *)v8 + 2) = v25;
          break;
        case 2u:
          *((void *)v8 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = v14;
          break;
        case 3u:
          uint64_t v27 = *((void *)v8 + 3);
          if (v27 > ((v14 / 24) ^ 0x7FFFFFFFFFFFFFFFLL)) {
            goto LABEL_65;
          }
          *((void *)v8 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = v27 + v14 / 24;
          uint64_t v10 = 3600 * (v14 % 24);
          break;
        case 4u:
          uint64_t v28 = *((void *)v8 + 3);
          if (v28 > ((v14 / 1440) ^ 0x7FFFFFFFFFFFFFFFLL)) {
            goto LABEL_65;
          }
          *((void *)v8 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = v28 + v14 / 1440;
          v10 += 60 * (v14 % 1440);
          break;
        case 5u:
          uint64_t v29 = *((void *)v8 + 3);
          if (v29 > ((v14 / 86400) ^ 0x7FFFFFFFFFFFFFFFLL)) {
            goto LABEL_65;
          }
          *((void *)v8 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = v29 + v14 / 86400;
          v10 += v14 % 86400;
          break;
        default:
          break;
      }

      ++v11;
      int v30 = *++v6;
      int v9 = v30;
      if (!v30) {
        goto LABEL_64;
      }
    }

    goto LABEL_65;
  }

  uint64_t v10 = 0LL;
  double v12 = 0.0;
LABEL_64:
  uint64_t v32 = *((void *)v8 + 3);
  if (v32 > ((v10 / 86400) ^ 0x7FFFFFFFFFFFFFFFLL))
  {
LABEL_65:
    xmlSchemaFreeValue((xmlSchemaValPtr)v8);
    return 1LL;
  }

  uint64_t v34 = v32 + v10 / 86400;
  *((void *)v8 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = v34;
  double v35 = v12 + (double)(v10 % 86400);
  *((double *)v8 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v35;
  if (v3 == 45)
  {
    *((void *)v8 + 2) = -*((void *)v8 + 2);
    *((void *)v8 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = -v34;
    *((double *)v8 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = -v35;
  }

  if (a2)
  {
    uint64_t v31 = 0LL;
    *a2 = v8;
  }

  else
  {
    xmlSchemaFreeValue((xmlSchemaValPtr)v8);
    return 0LL;
  }

  return v31;
}

_BYTE *xmlSchemaCheckLanguageType(_BYTE *result)
{
  if (result)
  {
    int v1 = *result;
    if (*result)
    {
      int v2 = 0;
      unsigned int v3 = result + 1;
      int v4 = 1;
      while (1)
      {
        if ((v1 & 0xDFu) - 65 >= 0x1A)
        {
          if (v1 == 45)
          {
            int v4 = 0;
            int result = 0LL;
            unsigned int v5 = v2 - 9;
            int v2 = 0;
            if (v5 < 0xFFFFFFF8) {
              return result;
            }
            goto LABEL_11;
          }

          int result = 0LL;
        }

        ++v2;
LABEL_11:
        int v6 = *v3++;
        int v1 = v6;
        if (!v6) {
          return (_BYTE *)((v2 - 1) < 8);
        }
      }
    }

    int v2 = 0;
    return (_BYTE *)((v2 - 1) < 8);
  }

  return result;
}

uint64_t xmlSchemaValAtomicListNode(uint64_t a1, xmlChar *cur, void *a3, uint64_t a4)
{
  if (!cur) {
    return 0xFFFFFFFFLL;
  }
  int v7 = xmlStrdup(cur);
  if (!v7) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v8 = v7;
  if (a3) {
    *a3 = 0LL;
  }
  for (uint64_t i = v7; ; ++i)
  {
    unsigned int v10 = *i;
    BOOL v11 = v10 > 0x20 || ((1LL << v10) & 0x100002600LL) == 0;
    if (v11) {
      break;
    }
    *uint64_t i = 0;
  }

  uint64_t v12 = 0LL;
  while (1)
  {
    while (v10 > 0x20u)
    {
LABEL_22:
      uint64_t v12 = (v12 + 1);
      do
      {
        unsigned int v14 = *++i;
        LOBYTE(v1xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v14;
        uint64_t v15 = (1LL << v14) & 0x100002601LL;
      }

      while (v14 > 0x20 || v15 == 0);
    }

    if (((1LL << v10) & 0x100002600LL) == 0) {
      break;
    }
    do
    {
      *i++ = 0;
      unsigned int v10 = *i;
    }

    while (v10 <= 0x20 && ((1LL << v10) & 0x100002600LL) != 0);
  }

  if ((_BYTE)v10) {
    goto LABEL_22;
  }
  if ((_DWORD)v12)
  {
    int v17 = v7;
    do
    {
      BOOL v11 = v17 == i;
      int v19 = *v17++;
      int v18 = v19;
    }

    while (!v11 && !v18);
    while (1)
    {
      double v23 = v17 - 1;
      if (v17 - 1 == i) {
        break;
      }
      if (xmlSchemaValAtomicType(a1, v17 - 1, 0LL, a4, 0LL, 1LL, 0LL))
      {
        uint64_t v12 = 0xFFFFFFFFLL;
        break;
      }

      int v17 = v23 - 1;
      while (*++v17)
        ;
      do
      {
        BOOL v11 = v17 == i;
        int v22 = *v17++;
        int v21 = v22;
      }

      while (!v11 && !v21);
    }
  }

  xmlFree(v8);
  return v12;
}

xmlChar *xmlSchemaStrip(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  for (uint64_t i = 0LL; ; ++i)
  {
    unsigned int v2 = *(unsigned __int8 *)(a1 + i);
    if (v2 > 0x20) {
      break;
    }
    if (((1LL << v2) & 0x100002600LL) == 0)
    {
      if (!*(_BYTE *)(a1 + i))
      {
        unsigned int v3 = (unsigned __int8 *)(a1 + i);
        goto LABEL_10;
      }

      break;
    }
  }

  unsigned int v3 = (unsigned __int8 *)(a1 + i);
  while (*++v3)
    ;
LABEL_10:
  unsigned int v5 = v3 - 1;
  unint64_t v6 = a1 + i;
  int v7 = v3;
  if ((unint64_t)(v3 - 1) <= a1 + i)
  {
LABEL_17:
    if (i) {
      return xmlStrndup((const xmlChar *)(a1 + i), (int)v7 - (int)a1 - (int)i);
    }
  }

  else
  {
    int v7 = (unsigned __int8 *)(v6 + 1);
    while (1)
    {
      unsigned int v8 = *v5;
      BOOL v9 = v8 > 0x20;
      uint64_t v10 = (1LL << v8) & 0x100002600LL;
      if (v9 || v10 == 0) {
        break;
      }
    }

    int v7 = v5 + 1;
    if (i) {
      return xmlStrndup((const xmlChar *)(a1 + i), (int)v7 - (int)a1 - (int)i);
    }
  }

  if (v3 == v7) {
    return 0LL;
  }
  return xmlStrndup((const xmlChar *)(a1 + i), (int)v7 - (int)a1 - (int)i);
}

uint64_t _xmlSchemaBase64Decode(int a1)
{
  unsigned int v1 = a1 - 65;
  if (a1 == 47) {
    int v2 = 63;
  }
  else {
    int v2 = -1;
  }
  if (a1 == 61) {
    int v3 = 64;
  }
  else {
    int v3 = v2;
  }
  if (a1 == 43) {
    int v4 = 62;
  }
  else {
    int v4 = v3;
  }
  else {
    int v5 = v4;
  }
  else {
    unsigned int v6 = v5;
  }
  if (v1 <= 0x19) {
    return v1;
  }
  else {
    return v6;
  }
}

uint64_t _xmlSchemaParseGDay(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v2 = (uint64_t)*a2;
  int v3 = **a2;
  int v4 = *(unsigned __int8 *)(v2 + 1);
  int v6 = v4 + 10 * v3;
  uint64_t result = 0LL;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 8) & 0xFFFFFE0F | (16 * (((16 * v6 + 256) >> 4) & 0x1F));
  *a2 = (unsigned __int8 *)(v2 + 2);
  return result;
}

uint64_t _xmlSchemaParseTimeZone(uint64_t a1, unsigned __int8 **a2)
{
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = *a2;
  unsigned int v3 = **a2;
  uint64_t v4 = 1LL;
  if (v3 <= 0x2C)
  {
    if (!**a2)
    {
      __int16 v7 = *(_WORD *)(a1 + 24) & 0xE000;
LABEL_14:
      *(_WORD *)(a1 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v7;
      goto LABEL_15;
    }

    if (v3 != 43) {
      return v4;
    }
LABEL_10:
    int v5 = v2[1];
    int v6 = v2[2];
    unsigned int v9 = v6 + 10 * v5;
    if (v9 > 0x227) {
      return 2LL;
    }
    if (v2[3] != 58) {
      return 1LL;
    }
    __int16 v10 = 120 * v9;
    __int16 v11 = (120 * v9 + 2176) & 0x1FF8;
    __int16 v12 = *(_WORD *)(a1 + 24) & 0xE001;
    *(_WORD *)(a1 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v12 | v11;
    int v13 = v2[4];
    int v14 = v2[5];
    unsigned int v15 = v14 + 10 * v13;
    if (v15 > 0x24B) {
      return 2LL;
    }
    __int16 v16 = v10 + 2 * v15;
    __int16 v17 = v16 + 9312;
    __int16 v18 = -9312 - v16;
    __int16 v19 = v3 == 45 ? v18 : v17;
    __int16 v20 = v19 & 0x1FFE | v12;
    *(_WORD *)(a1 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v20;
    v2 += 6;
    __int16 v7 = v20 | 1;
    goto LABEL_14;
  }

  if (v3 == 45) {
    goto LABEL_10;
  }
  if (v3 == 90)
  {
    *(_WORD *)(a1 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = *(_WORD *)(a1 + 24) & 0xE000 | 1;
    ++v2;
LABEL_15:
    uint64_t v4 = 0LL;
    *a2 = v2;
  }

  return v4;
}

uint64_t _xmlSchemaParseGMonth(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v2 = (uint64_t)*a2;
  int v3 = **a2;
  int v4 = *(unsigned __int8 *)(v2 + 1);
  int v6 = v4 + 10 * v3;
  uint64_t result = 0LL;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 8) & 0xFFFFFFF0 | (v6 - 528);
  *a2 = (unsigned __int8 *)(v2 + 2);
  return result;
}

uint64_t _xmlSchemaParseTime(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v2 = *a2;
  int v3 = **a2;
  int v4 = v2[1];
  unsigned int v5 = v4 + 10 * v3;
  if (v5 > 0x228) {
    return 2LL;
  }
  int v7 = (v5 << 9) + 0x2000;
  int v8 = v7 & 0x3E00;
  unsigned int v9 = *(_DWORD *)(a1 + 8) & 0xFFFFC1FF | v8;
  *(_DWORD *)(a1 + 8) = v9;
  int v10 = v2[3];
  int v11 = v2[4];
  unsigned int v13 = v11 + 10 * v10;
  if (v13 > 0x24B) {
    return 2LL;
  }
  int v14 = (v13 << 14) + 786432;
  *(_DWORD *)(a1 + 8) = v14 & 0xFC000 | v9 & 0xFFF03FFF;
  if (v2[5] != 58) {
    return 1LL;
  }
  int v15 = v2[6];
  int v16 = v2[7];
  double v17 = (double)(v16 + 10 * v15 - 528);
  *(double *)(a1 + 16) = v17;
  __int16 v18 = v2 + 8;
  if (v2[8] == 46)
  {
    int v21 = v2[9];
    __int16 v19 = v2 + 9;
    int v20 = v21;
    unsigned int v22 = v21 - 48;
    double v23 = 1.0;
    __int16 v18 = v19;
    do
    {
      double v23 = v23 / 10.0;
      double v17 = v17 + (double)(v20 - 48) * v23;
      *(double *)(a1 + 16) = v17;
      int v24 = *++v18;
      int v20 = v24;
    }

    while ((v24 - 48) < 0xA);
    if (v22 > 9) {
      return 1LL;
    }
  }

  if ((~v7 & 0x3000) != 0 && (v14 & 0xF0000) != 0xF0000 && (v17 >= 0.0 ? (BOOL v25 = v17 < 60.0) : (BOOL v25 = 0), v25)
    || (uint64_t v6 = 2LL, v8 == 12288) && (v14 & 0xFC000) == 0 && v17 == 0.0)
  {
    if ((unsigned __int16)((unsigned __int16)(8 * *(_WORD *)(a1 + 24) + 13440) >> 4) <= 0x690u)
    {
      uint64_t v6 = 0LL;
      *a2 = v18;
      return v6;
    }

    return 2LL;
  }

  return v6;
}

uint64_t xmlSchemaCompareDecimals(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)a1;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 44);
  if ((v3 & 1) != 0 && (*(void *)(a1 + 16) || *(void *)(a1 + 24) || *(void *)(a1 + 32)))
  {
    unsigned int v4 = *(unsigned __int16 *)(a2 + 44);
    if ((v4 & 1) == 0) {
      return 0xFFFFFFFFLL;
    }
    if (*(void *)(a2 + 16) || *(void *)(a2 + 24))
    {
      uint64_t result = 0xFFFFFFFFLL;
    }

    else
    {
      uint64_t result = 0xFFFFFFFFLL;
      if (!*(void *)(a2 + 32)) {
        return result;
      }
    }
  }

  else
  {
    unsigned int v4 = *(unsigned __int16 *)(a2 + 44);
    if ((v4 & 1) != 0)
    {
      if (*(void *)(a2 + 16) || *(void *)(a2 + 24)) {
        return 1LL;
      }
      uint64_t result = 1LL;
      if (*(void *)(a2 + 32)) {
        return result;
      }
    }

    else
    {
      uint64_t result = 1LL;
    }
  }

  int v6 = (v3 >> 8) - (v3 >> 1);
  int v7 = (v4 >> 8) - (v4 >> 1);
  if (v6 == 1 && !v2[2])
  {
    if (v7 != 1) {
      return -(int)result;
    }
    if (*(void *)(a2 + 16)) {
      return -(int)result;
    }
    else {
      return 0LL;
    }
  }

  else if (v7 == 1 && !*(void *)(a2 + 16))
  {
    if (v6 == 1)
    {
      if (v2[2]) {
        return result;
      }
      else {
        return 0LL;
      }
    }
  }

  else
  {
    if (v6 > v7) {
      return result;
    }
    if (v7 > v6) {
      return -(int)result;
    }
    int v8 = (v3 >> 8) - (v4 >> 8);
    if (v8 < 0)
    {
      int v8 = (v4 >> 8) - (v3 >> 8);
      uint64_t result = -(int)result;
      unsigned int v9 = (void *)a2;
    }

    else
    {
      unsigned int v9 = v2;
      uint64_t v2 = (void *)a2;
    }

    unint64_t v10 = v9[2];
    unint64_t v11 = v9[3];
    unsigned int v12 = v8 + 8;
    unint64_t v13 = v9[4];
    do
    {
      unint64_t v14 = v10;
      unint64_t v10 = v11;
      unint64_t v11 = v13;
      v12 -= 8;
      unint64_t v13 = 0LL;
    }

    while (v12 > 8);
    if (v12)
    {
      unsigned int v15 = v12 + 1;
      do
      {
        unint64_t v16 = v11 / 0xA;
        unint64_t v17 = v10 % 0xA;
        unint64_t v10 = (v10 + 100000000 * (v11 % 0xA)) / 0xA;
        unint64_t v14 = (v14 + 100000000 * v17) / 0xA;
        --v15;
        v11 /= 0xAuLL;
      }

      while (v15 > 1);
    }

    else
    {
      unint64_t v16 = v11;
    }

    unint64_t v18 = v2[4];
    if (v16 <= v18)
    {
      if (v16 == v18)
      {
        unint64_t v19 = v2[3];
        if (v10 > v19) {
          return result;
        }
        if (v10 == v19)
        {
          unint64_t v20 = v2[2];
          if (v14 > v20) {
            return result;
          }
          if (v14 == v20)
          {
            if ((v4 ^ v3) >= 0x100) {
              return result;
            }
            else {
              return 0LL;
            }
          }
        }
      }

      return -(int)result;
    }
  }

  return result;
}

uint64_t xmlSchemaCompareDurations(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 32) - *(double *)(a2 + 32);
  uint64_t v3 = (uint64_t)(v2 / 86400.0);
  uint64_t v4 = *(void *)(a2 + 16);
  double v5 = v2 - (double)v3 * 86400.0;
  uint64_t v6 = *(void *)(a1 + 24) - *(void *)(a2 + 24) + v3;
  unint64_t v7 = *(void *)(a1 + 16) - v4;
  if (v7)
  {
    if ((uint64_t)v7 < 1)
    {
      if (v6 <= 0 && v5 <= 0.0) {
        return 0xFFFFFFFFLL;
      }
      unint64_t v7 = v4 - *(void *)(a1 + 16);
      unsigned int v9 = -1;
    }

    else
    {
      if ((v6 & 0x8000000000000000LL) == 0 && v5 >= 0.0) {
        return 1LL;
      }
      uint64_t v6 = -v6;
      unsigned int v9 = 1;
    }

    if (v7 >= 0xC)
    {
      if (v7 > 0x4325C53EF368EBBLL) {
        return 4294967294LL;
      }
      unint64_t v11 = 365 * (v7 / 0xC) + ((v7 / 0xC + 3) >> 2);
      unint64_t v10 = v11 - 1;
    }

    else
    {
      unint64_t v10 = 0LL;
      unint64_t v11 = 0LL;
    }

    unsigned int v12 = (void *)((char *)&xmlSchemaCompareDurations_dayRange + 8 * (v7 % 0xC));
    uint64_t v13 = *v12 + v10;
    uint64_t v14 = v12[12] + v11;
    if (v14 != v13 || v14 != v6)
    {
      if (v14 < v6) {
        return -v9;
      }
      if (v13 <= v6) {
        return 2LL;
      }
      return v9;
    }

    return 0LL;
  }

  if (v6)
  {
    if (v6 < 0) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 1LL;
    }
  }

  else
  {
    if (v5 == 0.0) {
      return 0LL;
    }
    if (v5 >= 0.0) {
      return 1LL;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }

uint64_t xmlSchemaComparePreserveReplaceStrings(_BYTE *a1, _BYTE *a2, int a3)
{
  unsigned int v3 = *a1;
  if (!*a1)
  {
LABEL_14:
    if (a3) {
      unsigned int v8 = 1;
    }
    else {
      unsigned int v8 = -1;
    }
    if (*a2) {
      return v8;
    }
    else {
      return 0LL;
    }
  }

  uint64_t v4 = a1 + 1;
  while (1)
  {
    unsigned int v5 = *a2;
    if (v5 - 9 < 2 || v5 == 13) {
      break;
    }
    if (!*a2) {
      goto LABEL_29;
    }
    if (v3 < v5)
    {
      BOOL v12 = a3 == 0;
      unsigned int v13 = -1;
LABEL_31:
      if (v12) {
        return v13;
      }
      else {
        return -v13;
      }
    }

    if (v3 != v5)
    {
LABEL_29:
      BOOL v12 = a3 == 0;
      unsigned int v13 = 1;
      goto LABEL_31;
    }

uint64_t xmlSchemaComparePreserveCollapseStrings(_BYTE *a1, unsigned __int8 *a2, int a3)
{
  while (1)
  {
    unsigned int v3 = *a2;
    if (v3 > 0x20 || ((1LL << v3) & 0x100002600LL) == 0) {
      break;
    }
    ++a2;
  }

  unsigned int v5 = *a1;
  if (*a1)
  {
    while (1)
    {
      if (v3 > 0x20) {
        goto LABEL_18;
      }
      if (((1LL << v3) & 0x100002600LL) == 0) {
        break;
      }
      if (v5 != 32)
      {
        if (a3) {
          unsigned int v15 = -1;
        }
        else {
          unsigned int v15 = 1;
        }
        if (a3) {
          unsigned int v16 = 1;
        }
        else {
          unsigned int v16 = -1;
        }
        if (v5 <= 0x1F) {
          return v16;
        }
        else {
          return v15;
        }
      }

      do
      {
        unsigned int v6 = *++a2;
        uint64_t v7 = (1LL << v6) & 0x100002600LL;
      }

      while (v6 <= 0x20 && v7 != 0);
LABEL_15:
      unsigned int v9 = *++a1;
      unsigned int v5 = v9;
      unsigned int v3 = *a2;
      if (!v9) {
        goto LABEL_21;
      }
    }

    if (!v3) {
      goto LABEL_38;
    }
LABEL_18:
    if (v5 < v3) {
      goto LABEL_28;
    }
    if (v5 != v3)
    {
LABEL_38:
      BOOL v13 = a3 == 0;
      unsigned int v14 = 1;
      goto LABEL_39;
    }

    ++a2;
    goto LABEL_15;
  }

uint64_t xmlSchemaCompareReplacedStrings(_BYTE *a1, _BYTE *a2)
{
  unsigned int v2 = *a1;
  if (!*a1)
  {
LABEL_15:
    if (*a2) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 0LL;
    }
  }

  unsigned int v3 = a1 + 1;
  while (1)
  {
    unsigned int v4 = *a2;
    if (v4 > 0x20) {
      break;
    }
    if (((1LL << v4) & 0x100002600LL) == 0)
    {
      if (!*a2) {
        return 1LL;
      }
      break;
    }

    if (v2 > 0x20 || ((1LL << v2) & 0x100002600LL) == 0)
    {
      if (v2 < 0x20) {
        return 0xFFFFFFFFLL;
      }
      else {
        return 1LL;
      }
    }

uint64_t xmlSchemaCompareReplaceCollapseStrings(_BYTE *a1, unsigned __int8 *a2, int a3)
{
  while (1)
  {
    unsigned int v3 = *a2;
    if (v3 > 0x20 || ((1LL << v3) & 0x100002600LL) == 0) {
      break;
    }
    ++a2;
  }

  unsigned int v5 = *a1;
  if (*a1)
  {
    do
    {
      if (v3 <= 0x20)
      {
        if (((1LL << v3) & 0x100002600LL) != 0)
        {
          if (v5 > 0x20 || ((1LL << v5) & 0x100002600LL) == 0)
          {
            if (a3) {
              unsigned int v17 = -1;
            }
            else {
              unsigned int v17 = 1;
            }
            if (a3) {
              unsigned int v18 = 1;
            }
            else {
              unsigned int v18 = -1;
            }
            if (v5 <= 0x1F) {
              return v18;
            }
            else {
              return v17;
            }
          }

          do
          {
            unsigned int v6 = *++a2;
            uint64_t v7 = (1LL << v6) & 0x100002600LL;
          }

          while (v6 <= 0x20 && v7 != 0);
          goto LABEL_16;
        }

        if (!v3)
        {
          BOOL v13 = a3 == 0;
          unsigned int v14 = 1;
          goto LABEL_51;
        }
      }

      if (v5 <= 0x20 && ((1LL << v5) & 0x100002600LL) != 0)
      {
        if (a3) {
          unsigned int v15 = -1;
        }
        else {
          unsigned int v15 = 1;
        }
        if (a3) {
          unsigned int v16 = 1;
        }
        else {
          unsigned int v16 = -1;
        }
        if (v3 >= 0x21) {
          return v16;
        }
        else {
          return v15;
        }
      }

      if (v5 < v3) {
        return 0xFFFFFFFFLL;
      }
      if (v5 != v3) {
        return 1LL;
      }
      ++a2;
LABEL_16:
      unsigned int v9 = *++a1;
      unsigned int v5 = v9;
      unsigned int v3 = *a2;
    }

    while (v9);
  }

  if (!v3) {
    return 0LL;
  }
  unsigned int v10 = a2 + 1;
  while (v3 <= 0x20)
  {
    if (((1LL << v3) & 0x100002600LL) == 0)
    {
      if (!v3) {
        return 0LL;
      }
      break;
    }

    unsigned int v11 = *v10++;
    unsigned int v3 = v11;
  }

  BOOL v13 = a3 == 0;
  unsigned int v14 = -1;
LABEL_51:
  if (v13) {
    return v14;
  }
  else {
    return -v14;
  }
}

uint64_t xmlSchemaCompareNormStrings(_BYTE *a1, _BYTE *a2)
{
  while (1)
  {
    unsigned int v2 = *a1;
    if (v2 > 0x20 || ((1LL << v2) & 0x100002600LL) == 0) {
      break;
    }
    ++a1;
  }

  while (1)
  {
    unsigned int v4 = *a2;
    if (v4 > 0x20 || ((1LL << v4) & 0x100002600LL) == 0) {
      break;
    }
    ++a2;
  }

  if (*a1)
  {
    for (; *a2; unsigned int v4 = *a2)
    {
      if (v2 <= 0x20 && ((1LL << v2) & 0x100002600LL) != 0)
      {
        if (v4 > 0x20 || ((1LL << v4) & 0x100002600LL) == 0) {
          return v2 - v4;
        }
        while (v2 <= 0x20 && ((1LL << v2) & 0x100002600LL) != 0)
        {
          unsigned int v6 = *++a1;
          unsigned int v2 = v6;
        }

        while (v4 <= 0x20 && ((1LL << v4) & 0x100002600LL) != 0)
        {
          unsigned int v7 = *++a2;
          unsigned int v4 = v7;
        }

        if (!v2) {
          goto LABEL_35;
        }
      }

      else
      {
        if (v2 < v4) {
          return 0xFFFFFFFFLL;
        }
        if (v2 != v4) {
          return 1LL;
        }
        unsigned int v8 = *++a1;
        unsigned int v2 = v8;
        ++a2;
        if (!v8)
        {
LABEL_35:
          unsigned int v4 = *a2;
          goto LABEL_36;
        }
      }
    }

    unsigned int v9 = a1 + 1;
    while (v2 <= 0x20)
    {
      if (((1LL << v2) & 0x100002600LL) == 0)
      {
        if (v2) {
          return 1LL;
        }
        goto LABEL_35;
      }

      unsigned int v10 = *v9++;
      unsigned int v2 = v10;
    }

    return 1LL;
  }

  else
  {
LABEL_36:
    if (v4)
    {
      unsigned int v11 = a2 + 1;
      while (v4 <= 0x20)
      {
        if (((1LL << v4) & 0x100002600LL) == 0)
        {
          if (v4) {
            return 0xFFFFFFFFLL;
          }
          return 0LL;
        }

        unsigned int v12 = *v11++;
        unsigned int v4 = v12;
      }

      return 0xFFFFFFFFLL;
    }

    else
    {
      return 0LL;
    }
  }

uint64_t _xmlSchemaDateCastYMToDays(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 24) & 0xE) != 0) {
    int v1 = *(_DWORD *)(a1 + 24) & 0xF;
  }
  else {
    int v1 = 1;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = (v1 - 1);
  if (v2 <= 0)
  {
    uint64_t v11 = 365 * v2;
    uint64_t v12 = v2 + 1;
    uint64_t v13 = v2 + 4;
    if (v2 >= -1) {
      uint64_t v13 = v2 + 1;
    }
    uint64_t v14 = ((unsigned __int128)(v12 * (__int128)0x5C28F5C28F5C28F5LL) >> 64) + ~v2;
    uint64_t v15 = (v14 >> 6) + ((unint64_t)v14 >> 63);
    uint64_t v16 = v12 / 400;
    uint64_t v17 = 0x70A3D70A3D70A3D7LL * v2;
    BOOL v18 = __ROR8__(v17, 2) > 0x28F5C28F5C28F5CuLL && (*(void *)(a1 + 16) & 3LL) == 0;
    unint64_t v19 = __ROR8__(v17, 4);
    BOOL v20 = !v18 && v19 >= 0xA3D70A3D70A3D8LL;
    int v21 = &dayInYearByMonth;
    if (!v20) {
      int v21 = &dayInLeapYearByMonth;
    }
    return v11 + (v13 >> 2) + v15 + v16 + v21[v3];
  }

  else
  {
    unint64_t v4 = (v2 - 1) / 0x190uLL - (v2 - 1) / 0x64uLL + ((unint64_t)(v2 - 1) >> 2) + 365 * (v2 - 1);
    unint64_t v5 = 0x8F5C28F5C28F5C29LL * v2;
    BOOL v6 = __ROR8__(v5, 2) > 0x28F5C28F5C28F5CuLL && (*(void *)(a1 + 16) & 3LL) == 0;
    unint64_t v7 = __ROR8__(v5, 4);
    BOOL v8 = !v6 && v7 >= 0xA3D70A3D70A3D8LL;
    unsigned int v9 = &dayInYearByMonth;
    if (!v8) {
      unsigned int v9 = &dayInLeapYearByMonth;
    }
    return v4 + v9[v3];
  }

uint64_t xmlSchemaNormLen(unsigned __int8 *a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  for (uint64_t i = a1; ; ++i)
  {
    unsigned int v2 = *i;
    if (v2 > 0x20) {
      goto LABEL_8;
    }
    if (((1LL << v2) & 0x100002600LL) == 0) {
      break;
    }
  }

  if (*i)
  {
LABEL_8:
    uint64_t result = 0LL;
    while (1)
    {
      if ((v2 & 0x80) != 0)
      {
        if ((i[1] & 0xC0) != 0x80) {
          return 0xFFFFFFFFLL;
        }
        if ((~v2 & 0xE0) != 0)
        {
          i += 2;
        }

        else
        {
          if ((i[2] & 0xC0) != 0x80) {
            return 0xFFFFFFFFLL;
          }
          if ((~v2 & 0xF0) != 0)
          {
            i += 3;
          }

          else
          {
            if ((v2 & 0xF8) != 0xF0 || (i[3] & 0xC0) != 0x80) {
              return 0xFFFFFFFFLL;
            }
            i += 4;
          }
        }
      }

      else if (v2 <= 0x20 && ((1LL << v2) & 0x100002600LL) != 0)
      {
        while (v2 <= 0x20)
        {
          if (((1LL << v2) & 0x100002600LL) == 0)
          {
            if (!v2) {
              return result;
            }
            break;
          }

          unsigned int v4 = *++i;
          unsigned int v2 = v4;
        }
      }

      else
      {
        ++i;
      }

      uint64_t result = (result + 1);
      unsigned int v2 = *i;
      if (!*i) {
        return result;
      }
    }
  }

  return 0LL;
}

xmlChar *__cdecl xmlStrndup(const xmlChar *cur, int len)
{
  unsigned int v2 = 0LL;
  if (cur)
  {
    if ((len & 0x80000000) == 0)
    {
      size_t v4 = len;
      unint64_t v5 = (xmlChar *)xmlMallocAtomic(len + 1LL);
      unsigned int v2 = v5;
      if (v5)
      {
        memcpy(v5, cur, v4);
        v2[v4] = 0;
      }
    }
  }

  return v2;
}

xmlChar *__cdecl xmlStrdup(xmlChar *cur)
{
  if (cur)
  {
    uint64_t v1 = 0LL;
    while (cur[v1++])
      ;
    return xmlStrndup(cur, (int)v1 - 1);
  }

  return cur;
}

xmlChar *__cdecl xmlCharStrndup(const char *cur, int len)
{
  uint64_t result = 0LL;
  if (cur)
  {
    if ((len & 0x80000000) == 0)
    {
      uint64_t result = (xmlChar *)xmlMallocAtomic(len + 1LL);
      if (result)
      {
        if (len)
        {
          uint64_t v5 = 0LL;
          while (1)
          {
            int v6 = cur[v5];
            result[v5] = v6;
            if (!v6) {
              break;
            }
            if (len == ++v5) {
              goto LABEL_8;
            }
          }
        }

        else
        {
LABEL_8:
          result[len] = 0;
        }
      }
    }
  }

  return result;
}

xmlChar *__cdecl xmlCharStrdup(xmlChar *cur)
{
  if (cur)
  {
    uint64_t v1 = 0LL;
    while (cur[v1++])
      ;
    return xmlCharStrndup((const char *)cur, (int)v1 - 1);
  }

  return cur;
}

int xmlStrcmp(const xmlChar *str1, const xmlChar *str2)
{
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return -1;
  }
  if (!str2) {
    return 1;
  }
  while (1)
  {
    int v2 = *str2;
    int v3 = *str1 - v2;
    if (v3) {
      break;
    }
    ++str1;
    ++str2;
    if (!v2) {
      return 0;
    }
  }

  return v3;
}

int xmlStrEqual(const xmlChar *str1, const xmlChar *str2)
{
  if (str1 == str2) {
    return 1;
  }
  int v2 = 0;
  if (str1 && str2)
  {
    while (1)
    {
      int v3 = *str1;
      if (v3 != *str2) {
        break;
      }
      ++str1;
      ++str2;
      if (!v3) {
        return 1;
      }
    }

    return 0;
  }

  return v2;
}

int xmlStrQEqual(const xmlChar *pref, const xmlChar *name, const xmlChar *str)
{
  if (pref)
  {
    int v3 = 0;
    if (name && str)
    {
      int v6 = *pref;
      size_t v4 = pref + 1;
      int v5 = v6;
      unint64_t v7 = str + 2;
      while (1)
      {
        BOOL v8 = v7;
        if (v5 != *(v7 - 2)) {
          break;
        }
        if (v5)
        {
          int v9 = *v4++;
          int v5 = v9;
          ++v7;
          if (v9) {
            continue;
          }
        }

        if (*(v8 - 1) == 58)
        {
          for (uint64_t i = 0LL; ; ++i)
          {
            int v11 = name[i];
            if (v11 != v8[i]) {
              break;
            }
            if (!v11) {
              return 1;
            }
          }
        }

        return 0;
      }

      return 0;
    }
  }

  else if (name == str)
  {
    return 1;
  }

  else
  {
    int v3 = 0;
    if (name && str)
    {
      while (1)
      {
        int v12 = *name;
        if (v12 != *str) {
          break;
        }
        ++name;
        ++str;
        if (!v12) {
          return 1;
        }
      }

      return 0;
    }
  }

  return v3;
}

int xmlStrncmp(const xmlChar *str1, const xmlChar *str2, int len)
{
  int result = 0;
  if (str1 != str2)
  {
    int v5 = len - 1;
    if (len >= 1)
    {
      if (str1)
      {
        if (str2)
        {
          do
          {
            int v6 = *str1;
            int v7 = *str2;
            int result = v6 - v7;
            if (v6 != v7) {
              break;
            }
            if (!v5) {
              break;
            }
            ++str1;
            ++str2;
            --v5;
          }

          while (v7);
        }

        else
        {
          return 1;
        }
      }

      else
      {
        return -1;
      }
    }
  }

  return result;
}

int xmlStrcasecmp(const xmlChar *str1, const xmlChar *str2)
{
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return -1;
  }
  if (!str2) {
    return 1;
  }
  while (1)
  {
    uint64_t v2 = *str2;
    int v3 = casemap[*str1] - casemap[v2];
    if (v3) {
      break;
    }
    ++str1;
    ++str2;
    if (!(_DWORD)v2) {
      return 0;
    }
  }

  return v3;
}

int xmlStrncasecmp(const xmlChar *str1, const xmlChar *str2, int len)
{
  int v3 = 0;
  if (str1 != str2)
  {
    int v4 = len - 1;
    if (len >= 1)
    {
      if (str1)
      {
        if (str2)
        {
          do
          {
            uint64_t v5 = *str2;
            int v3 = casemap[*str1] - casemap[v5];
            if (v3) {
              break;
            }
            if (!v4) {
              break;
            }
            ++str1;
            ++str2;
            --v4;
          }

          while ((_DWORD)v5);
        }

        else
        {
          return 1;
        }
      }

      else
      {
        return -1;
      }
    }
  }

  return v3;
}

const xmlChar *__cdecl xmlStrchr(const xmlChar *str, xmlChar val)
{
  if (str)
  {
    int v2 = *str;
    if (*str)
    {
      while (v2 != val)
      {
        int v3 = *++str;
        int v2 = v3;
        if (!v3) {
          return 0LL;
        }
      }
    }

    else
    {
      return 0LL;
    }
  }

  return str;
}

const xmlChar *__cdecl xmlStrstr(const xmlChar *str, const xmlChar *val)
{
  int v2 = 0LL;
  if (str && val)
  {
    if (!*val) {
      return str;
    }
    unint64_t v3 = 0LL;
    do
      int v4 = &val[v3++];
    while (v4[1]);
    if (!(v3 >> 31) && (_DWORD)v3)
    {
      int v5 = *str;
      if (*str)
      {
        while (1)
        {
          if (v5 == *val)
          {
            uint64_t v6 = 0LL;
            while (1)
            {
              int v7 = str[v6];
              if (v7 != val[v6]) {
                break;
              }
              if ((_DWORD)v3 - 1 != (_DWORD)v6)
              {
                ++v6;
                if (v7) {
                  continue;
                }
              }

              return str;
            }
          }

          int v2 = 0LL;
          int v8 = *++str;
          int v5 = v8;
          if (!v8) {
            return v2;
          }
        }
      }

      return 0LL;
    }

    else
    {
      return str;
    }
  }

  return v2;
}

int xmlStrlen(const xmlChar *str)
{
  if (str)
  {
    if (*str)
    {
      unint64_t v1 = 0LL;
      while (str[++v1])
        ;
      if (v1 >> 31) {
        LODWORD(va_start(va, str) = 0;
      }
      else {
        LODWORD(va_start(va, str) = v1;
      }
    }

    else
    {
      LODWORD(va_start(va, str) = 0;
    }
  }

  return (int)str;
}

const xmlChar *__cdecl xmlStrcasestr(const xmlChar *str, const xmlChar *val)
{
  int v2 = 0LL;
  if (str && val)
  {
    if (!*val) {
      return str;
    }
    unint64_t v3 = 0LL;
    do
      int v4 = &val[v3++];
    while (v4[1]);
    if (!(v3 >> 31) && (_DWORD)v3)
    {
      int v5 = *str;
      if (*str)
      {
        while (1)
        {
          if (casemap[v5] == casemap[*val])
          {
            uint64_t v6 = 0LL;
            while (1)
            {
              uint64_t v7 = val[v6];
              if (casemap[str[v6]] != casemap[v7]) {
                break;
              }
              if ((_DWORD)v3 - 1 != (_DWORD)v6)
              {
                ++v6;
                if ((_DWORD)v7) {
                  continue;
                }
              }

              return str;
            }
          }

          int v2 = 0LL;
          int v8 = *++str;
          int v5 = v8;
          if (!v8) {
            return v2;
          }
        }
      }

      return 0LL;
    }

    else
    {
      return str;
    }
  }

  return v2;
}

xmlChar *__cdecl xmlStrsub(const xmlChar *str, int start, int len)
{
  if (str && ((len | start) & 0x80000000) == 0)
  {
    if (start < 1)
    {
LABEL_8:
      if (*str) {
        return xmlStrndup(str, len);
      }
    }

    else
    {
      unint64_t v3 = &str[start];
      while (*str)
      {
        ++str;
        if (!--start)
        {
          str = v3;
          goto LABEL_8;
        }
      }
    }
  }

  return 0LL;
}

xmlChar *__cdecl xmlStrncat(xmlChar *cur, const xmlChar *add, int len)
{
  unint64_t v3 = cur;
  if (add && len)
  {
    if (len < 0)
    {
      return 0LL;
    }

    else if (cur)
    {
      if (*cur)
      {
        unint64_t v6 = 0LL;
        while (cur[++v6])
          ;
        if (v6 >> 31) {
          unsigned int v8 = 0;
        }
        else {
          unsigned int v8 = v6;
        }
      }

      else
      {
        unsigned int v8 = 0;
      }

      cur = 0LL;
      if ((v8 & 0x80000000) == 0 && (int)v8 <= (len ^ 0x7FFFFFFF))
      {
        int v9 = (xmlChar *)xmlRealloc(v3, len + (unint64_t)v8 + 1);
        cur = v3;
        if (v9)
        {
          memcpy(&v9[v8], add, len);
          v9[v8 + len] = 0;
          return v9;
        }
      }
    }

    else
    {
      return xmlStrndup(add, len);
    }
  }

  return cur;
}

xmlChar *__cdecl xmlStrncatNew(const xmlChar *str1, const xmlChar *str2, int len)
{
  LODWORD(vxmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = len;
  int v5 = str1;
  if (len < 0)
  {
    if (!str2) {
      goto LABEL_16;
    }
    if (!*str2) {
      goto LABEL_16;
    }
    unint64_t v3 = 0LL;
    while (str2[++v3])
      ;
    if (v3 >> 31) {
      goto LABEL_16;
    }
  }

  if (str2 && (_DWORD)v3)
  {
    if (str1)
    {
      if (*str1)
      {
        unint64_t v6 = 0LL;
        while (str1[++v6])
          ;
        if (v6 >> 31) {
          unsigned int v8 = 0;
        }
        else {
          unsigned int v8 = v6;
        }
      }

      else
      {
        unsigned int v8 = 0;
      }

      uint64_t v13 = 0LL;
      uint64_t v14 = (xmlChar *)xmlMalloc(v3 + (unint64_t)v8 + 1);
      if (v14)
      {
        uint64_t v13 = v14;
        memcpy(v14, v5, v8);
        memcpy(&v13[v8], str2, v3);
        v13[(int)(v8 + v3)] = 0;
        return v13;
      }

      str1 = v5;
      int v12 = v8;
    }

    else
    {
      str1 = str2;
      int v12 = v3;
    }
  }

  else
  {
LABEL_16:
    if (!str1) {
      return 0LL;
    }
    uint64_t v10 = 0LL;
    while (str1[v10++])
      ;
    int v12 = v10 - 1;
  }

  return xmlStrndup(str1, v12);
}

xmlChar *__cdecl xmlStrcat(xmlChar *cur, const xmlChar *add)
{
  if (add)
  {
    uint64_t v2 = 0LL;
    if (cur)
    {
      while (add[v2++])
        ;
      return xmlStrncat(cur, add, (int)v2 - 1);
    }

    else
    {
      while (add[v2++])
        ;
      return xmlStrndup(add, (int)v2 - 1);
    }
  }

  return cur;
}

int xmlStrPrintf(xmlChar *buf, int len, const char *msg, ...)
{
  int result = -1;
  if (buf)
  {
    if (msg)
    {
      int result = vsnprintf((char *)buf, len, msg, va);
      buf[len - 1] = 0;
    }
  }

  return result;
}

int xmlStrVPrintf(xmlChar *buf, int len, const char *msg, va_list ap)
{
  if (!buf || !msg) {
    return -1;
  }
  int result = vsnprintf((char *)buf, len, msg, ap);
  buf[len - 1] = 0;
  return result;
}

int xmlUTF8Size(const xmlChar *utf)
{
  if (!utf) {
    return -1;
  }
  int v2 = *utf;
  if ((v2 & 0x40) == 0) {
    return -1;
  }
  unsigned int v3 = 32;
  int result = 2;
  while ((v3 & v2) != 0)
  {
    ++result;
    v3 >>= 1;
    if (result == 8) {
      return -1;
    }
  }

  return result;
}

int xmlUTF8Charcmp(const xmlChar *utf1, const xmlChar *utf2)
{
  if (!utf1)
  {
    if (utf2) {
      return -1;
    }
    else {
      return 0;
    }
  }

  int v2 = *(char *)utf1;
  if (v2 < 0)
  {
    if ((v2 & 0x40) == 0) {
      return 0;
    }
    unsigned int v7 = 32;
    int v3 = 2;
    while ((v7 & *utf1) != 0)
    {
      ++v3;
      v7 >>= 1;
      if (v3 == 8) {
        return 0;
      }
    }
  }

  else
  {
    int v3 = 1;
  }

  if (utf1 == utf2) {
    return 0;
  }
  if (!utf2) {
    return 1;
  }
  int v4 = v3 - 1;
  do
  {
    int v5 = *utf2;
    int v6 = *utf1 - v5;
    if (v6) {
      break;
    }
    if (!v4) {
      break;
    }
    ++utf1;
    ++utf2;
    --v4;
  }

  while (v5);
  return v6;
}

int xmlUTF8Strlen(const xmlChar *utf)
{
  if (!utf) {
    return -1;
  }
  int v1 = *utf;
  if (!*utf) {
    return 0;
  }
  unint64_t v2 = 0LL;
  do
  {
    int v3 = utf + 1;
    if ((v1 & 0x80) != 0)
    {
      if ((*v3 & 0xC0) != 0x80) {
        return -1;
      }
      int v3 = utf + 2;
      if ((~v1 & 0xE0) == 0)
      {
        if ((*v3 & 0xC0) != 0x80) {
          return -1;
        }
        if ((~v1 & 0xF0) != 0)
        {
          int v3 = utf + 3;
        }

        else
        {
          if ((v1 & 0xF8) != 0xF0 || (utf[3] & 0xC0) != 0x80) {
            return -1;
          }
          int v3 = utf + 4;
        }
      }
    }

    ++v2;
    int v1 = *v3;
    utf = v3;
  }

  while (*v3);
  if (v2 >> 31) {
    return 0;
  }
  else {
    return v2;
  }
}

int xmlGetUTF8Char(const unsigned __int8 *utf, int *len)
{
  if (!utf || !len)
  {
    if (!len) {
      return -1;
    }
    goto LABEL_22;
  }

  int v3 = *(char *)utf;
  int result = *utf;
  int v5 = *len;
  if ((v3 & 0x80000000) == 0)
  {
    if (v5 >= 1)
    {
      *leuint64_t n = 1;
      return result;
    }

    goto LABEL_22;
  }

  if (v5 < 2 || (utf[1] & 0xC0) != 0x80) {
    goto LABEL_22;
  }
  if (result <= 0xDF)
  {
    if (result >= 0xC2)
    {
      *leuint64_t n = 2;
      return utf[1] & 0x3F | ((result & 0x1F) << 6);
    }

    goto LABEL_22;
  }

  if (result > 0xEF)
  {
    if (v5 >= 4 && (utf[3] & 0xC0) == 0x80)
    {
      *leuint64_t n = 4;
      int v8 = ((result & 7) << 18) | ((utf[1] & 0x3F) << 12);
    }

    goto LABEL_22;
  }

  *leuint64_t n = 3;
  unsigned __int8 v6 = utf[1];
  __int16 v7 = ((result & 0xF) << 12) | ((v6 & 0x3F) << 6);
  int result = ((result & 0xF) << 12) | ((v6 & 0x3F) << 6) | utf[2] & 0x3F;
  if (result < 0x800 || (v7 & 0xF800) == 0xD800)
  {
LABEL_22:
    *leuint64_t n = 0;
    return -1;
  }

  return result;
}

int xmlCheckUTF8(const unsigned __int8 *utf)
{
  if (utf)
  {
    while (1)
    {
      unsigned __int8 v1 = *utf;
      if (!*utf)
      {
        LODWORD(utf) = 1;
        return (int)utf;
      }

      if ((*utf & 0x80) != 0)
      {
        if ((v1 & 0xE0) == 0xC0)
        {
          if ((utf[1] & 0xC0) != 0x80) {
            goto LABEL_19;
          }
          uint64_t v2 = 2LL;
        }

        else if ((v1 & 0xF0) == 0xE0)
        {
          if ((utf[1] & 0xC0) != 0x80 || (utf[2] & 0xC0) != 0x80) {
            goto LABEL_19;
          }
          uint64_t v2 = 3LL;
        }

        else
        {
          if ((v1 & 0xF8) != 0xF0 || (utf[1] & 0xC0) != 0x80 || (utf[2] & 0xC0) != 0x80 || (utf[3] & 0xC0) != 0x80)
          {
LABEL_19:
            LODWORD(utf) = 0;
            return (int)utf;
          }

          uint64_t v2 = 4LL;
        }
      }

      else
      {
        uint64_t v2 = 1LL;
      }

      utf += v2;
    }
  }

  return (int)utf;
}

int xmlUTF8Strsize(const xmlChar *utf, int len)
{
  LODWORD(v2) = 0;
  if (utf && len >= 1)
  {
    int v3 = utf;
    do
    {
      xmlChar v4 = *v3;
      if (!*v3) {
        break;
      }
      ++v3;
      if ((v4 & 0x80) != 0 && (v4 & 0x40) != 0)
      {
        do
        {
          xmlChar v5 = v4;
          if (!*v3) {
            break;
          }
          v4 *= 2;
          ++v3;
        }

        while ((v5 & 0x20) != 0);
      }
    }

    while (len-- > 1);
    unint64_t v2 = v3 - utf;
    if (v2 >> 31) {
      LODWORD(v2) = 0;
    }
  }

  return v2;
}

xmlChar *__cdecl xmlUTF8Strndup(const xmlChar *utf, int len)
{
  unint64_t v2 = 0LL;
  if (utf)
  {
    if ((len & 0x80000000) == 0)
    {
      size_t v4 = xmlUTF8Strsize(utf, len);
      xmlChar v5 = (xmlChar *)xmlMallocAtomic(v4 + 1);
      unint64_t v2 = v5;
      if (v5)
      {
        memcpy(v5, utf, v4);
        v2[v4] = 0;
      }
    }
  }

  return v2;
}

const xmlChar *__cdecl xmlUTF8Strpos(const xmlChar *utf, int pos)
{
  int result = 0LL;
  if (utf && (pos & 0x80000000) == 0)
  {
    if (pos)
    {
      int result = utf;
      while (1)
      {
        int v5 = *result++;
        int v4 = v5;
        if (!v5) {
          break;
        }
        if ((v4 & 0x80) != 0)
        {
          if ((~v4 & 0xC0) != 0) {
            return 0LL;
          }
          while ((v4 & 0x40) != 0)
          {
            LOBYTE(vxmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 2 * v4;
            char v6 = *result++;
            if ((v6 & 0xC0) != 0x80) {
              return 0LL;
            }
          }
        }

        if (!--pos) {
          return result;
        }
      }

      return 0LL;
    }

    else
    {
      return utf;
    }
  }

  return result;
}

int xmlUTF8Strloc(const xmlChar *utf, const xmlChar *utfchar)
{
  int v2 = -1;
  if (utf && utfchar)
  {
    int v4 = utf;
    int v5 = xmlUTF8Strsize(utfchar, 1);
    int v6 = *v4;
    if (*v4)
    {
      unint64_t v7 = 0LL;
      while (v5 >= 1 && v4 != utfchar)
      {
        int v8 = v5 - 1;
        int v9 = v4;
        uint64_t v10 = utfchar;
        while (1)
        {
          int v11 = *v9;
          if (v11 != *v10) {
            break;
          }
          if (v8)
          {
            ++v9;
            ++v10;
            --v8;
            if (v11) {
              continue;
            }
          }

          goto LABEL_19;
        }

        ++v4;
        if ((v6 & 0x80) != 0)
        {
          if ((~v6 & 0xC0) != 0) {
            return -1;
          }
          while ((v6 & 0x40) != 0)
          {
            LOBYTE(v6) = 2 * v6;
            char v12 = *v4++;
            if ((v12 & 0xC0) != 0x80) {
              return -1;
            }
          }
        }

        ++v7;
        int v6 = *v4;
        int v2 = -1;
        if (!*v4) {
          return v2;
        }
      }

xmlChar *__cdecl xmlUTF8Strsub(const xmlChar *utf, int start, int len)
{
  if (!utf || (len | start) < 0) {
    return 0LL;
  }
  if (start >= 1)
  {
    int v3 = 0;
    while (1)
    {
      int v5 = *utf++;
      int v4 = v5;
      if (!v5) {
        break;
      }
      if ((v4 & 0x80) != 0)
      {
        if ((~v4 & 0xC0) != 0) {
          return 0LL;
        }
        while ((v4 & 0x40) != 0)
        {
          LOBYTE(vxmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 2 * v4;
          char v6 = *utf++;
          if ((v6 & 0xC0) != 0x80) {
            return 0LL;
          }
        }
      }

      if (++v3 == start) {
        return xmlUTF8Strndup(utf, len);
      }
    }

    return 0LL;
  }

  return xmlUTF8Strndup(utf, len);
}

_BYTE *xmlEscapeFormatString(void **a1)
{
  if (!a1) {
    return 0LL;
  }
  int v2 = *a1;
  if (*a1)
  {
    int v3 = *v2;
    if (*v2)
    {
      unint64_t v4 = 0LL;
      unint64_t v5 = 0LL;
      do
      {
        unint64_t v6 = v5;
        int v7 = v3;
        int v8 = &v2[v4++];
        if (v7 == 37) {
          ++v5;
        }
        int v3 = v8[1];
      }

      while (v3);
      if (v5)
      {
        int v2 = 0LL;
        if (!(v5 >> 31) && v4 <= 0x7FFFFFFF - v5)
        {
          if (v7 == 37) {
            unint64_t v9 = v6 + 1;
          }
          else {
            unint64_t v9 = v6;
          }
          uint64_t v10 = xmlMallocAtomic(v9 + v4 + 1);
          int v2 = v10;
          if (v10)
          {
            char v11 = *(_BYTE *)*a1;
            if (v11)
            {
              char v12 = (unsigned __int8 *)*a1 + 1;
              uint64_t v13 = v10;
              do
              {
                _BYTE *v13 = v11;
                if (*(v12 - 1) == 37) {
                  *++uint64_t v13 = 37;
                }
                ++v13;
                int v14 = *v12++;
                char v11 = v14;
              }

              while (v14);
            }

            if (v7 == 37) {
              unint64_t v15 = v6 + 1;
            }
            else {
              unint64_t v15 = v6;
            }
            v10[v15 + v4] = 0;
          }

          xmlFree(*a1);
          *a1 = v2;
        }
      }
    }
  }

  return v2;
}

int xmlUCSIsAegeanNumbers(int code)
{
  return code >> 6 == 1028;
}

int xmlUCSIsAlphabeticPresentationForms(int code)
{
  return (code - 64256) < 0x50;
}

int xmlUCSIsArabic(int code)
{
  return (code & 0xFFFFFF00) == 1536;
}

int xmlUCSIsArabicPresentationFormsA(int code)
{
  return (code - 64336) < 0x2B0;
}

int xmlUCSIsArabicPresentationFormsB(int code)
{
  return (code - 65136) < 0x90;
}

int xmlUCSIsArmenian(int code)
{
  return (code - 1328) < 0x60;
}

int xmlUCSIsArrows(int code)
{
  return (code - 8592) < 0x70;
}

int xmlUCSIsBasicLatin(int code)
{
  return code < 0x80;
}

int xmlUCSIsBengali(int code)
{
  return (code & 0xFFFFFF80) == 2432;
}

int xmlUCSIsBlockElements(int code)
{
  return code >> 5 == 300;
}

int xmlUCSIsBopomofo(int code)
{
  return (code - 12544) < 0x30;
}

int xmlUCSIsBopomofoExtended(int code)
{
  return code >> 5 == 397;
}

int xmlUCSIsBoxDrawing(int code)
{
  return code >> 7 == 74;
}

int xmlUCSIsBraillePatterns(int code)
{
  return code >> 8 == 40;
}

int xmlUCSIsBuhid(int code)
{
  return code >> 5 == 186;
}

int xmlUCSIsByzantineMusicalSymbols(int code)
{
  return (code & 0xFFFFFF00) == 118784;
}

int xmlUCSIsCJKCompatibility(int code)
{
  return code >> 8 == 51;
}

int xmlUCSIsCJKCompatibilityForms(int code)
{
  return (code - 65072) < 0x20;
}

int xmlUCSIsCJKCompatibilityIdeographs(int code)
{
  return (code - 63744) < 0x200;
}

int xmlUCSIsCJKCompatibilityIdeographsSupplement(int code)
{
  return (code - 194560) < 0x220;
}

int xmlUCSIsCJKRadicalsSupplement(int code)
{
  return code >> 7 == 93;
}

int xmlUCSIsCJKSymbolsandPunctuation(int code)
{
  return (code & 0xFFFFFFC0) == 12288;
}

int xmlUCSIsCJKUnifiedIdeographs(int code)
{
  return (code - 19968) >> 9 < 0x29;
}

int xmlUCSIsCJKUnifiedIdeographsExtensionA(int code)
{
  return (code - 13312) >> 6 < 0x67;
}

int xmlUCSIsCJKUnifiedIdeographsExtensionB(int code)
{
  return (code - 0x20000) >> 5 < 0x537;
}

int xmlUCSIsCherokee(int code)
{
  return (code - 5024) < 0x60;
}

int xmlUCSIsCombiningDiacriticalMarks(int code)
{
  return (code - 768) < 0x70;
}

int xmlUCSIsCombiningDiacriticalMarksforSymbols(int code)
{
  return (code - 8400) < 0x30;
}

int xmlUCSIsCombiningHalfMarks(int code)
{
  return code >> 4 == 4066;
}

int xmlUCSIsCombiningMarksforSymbols(int code)
{
  return (code - 8400) < 0x30;
}

int xmlUCSIsControlPictures(int code)
{
  return code >> 6 == 144;
}

int xmlUCSIsCurrencySymbols(int code)
{
  return (code - 8352) < 0x30;
}

int xmlUCSIsCypriotSyllabary(int code)
{
  return code >> 6 == 1056;
}

int xmlUCSIsCyrillic(int code)
{
  return (code & 0xFFFFFF00) == 1024;
}

int xmlUCSIsCyrillicSupplement(int code)
{
  return (code - 1280) < 0x30;
}

int xmlUCSIsDeseret(int code)
{
  return (code - 66560) < 0x50;
}

int xmlUCSIsDevanagari(int code)
{
  return (code & 0xFFFFFF80) == 2304;
}

int xmlUCSIsDingbats(int code)
{
  return (code - 9984) < 0xC0;
}

int xmlUCSIsEnclosedAlphanumerics(int code)
{
  return (code - 9312) < 0xA0;
}

int xmlUCSIsEnclosedCJKLettersandMonths(int code)
{
  return code >> 8 == 50;
}

int xmlUCSIsEthiopic(int code)
{
  return (code - 4608) < 0x180;
}

int xmlUCSIsGeneralPunctuation(int code)
{
  return (code - 0x2000) < 0x70;
}

int xmlUCSIsGeometricShapes(int code)
{
  return (code - 9632) < 0x60;
}

int xmlUCSIsGeorgian(int code)
{
  return (code - 4256) < 0x60;
}

int xmlUCSIsGothic(int code)
{
  return (code - 66352) < 0x20;
}

int xmlUCSIsGreek(int code)
{
  return (code - 880) < 0x90;
}

int xmlUCSIsGreekExtended(int code)
{
  return code >> 8 == 31;
}

int xmlUCSIsGreekandCoptic(int code)
{
  return (code - 880) < 0x90;
}

int xmlUCSIsGujarati(int code)
{
  return (code & 0xFFFFFF80) == 2688;
}

int xmlUCSIsGurmukhi(int code)
{
  return (code & 0xFFFFFF80) == 2560;
}

int xmlUCSIsHalfwidthandFullwidthForms(int code)
{
  return (code - 65280) < 0xF0;
}

int xmlUCSIsHangulCompatibilityJamo(int code)
{
  return (code - 12592) < 0x60;
}

int xmlUCSIsHangulJamo(int code)
{
  return code >> 8 == 17;
}

int xmlUCSIsHangulSyllables(int code)
{
  return (code - 44032) >> 4 < 0x2BB;
}

int xmlUCSIsHanunoo(int code)
{
  return code >> 5 == 185;
}

int xmlUCSIsHebrew(int code)
{
  return (code - 1424) < 0x70;
}

int xmlUCSIsHighPrivateUseSurrogates(int code)
{
  return code >> 7 == 439;
}

int xmlUCSIsHighSurrogates(int code)
{
  return (code - 55296) < 0x380;
}

int xmlUCSIsHiragana(int code)
{
  return (code - 12352) < 0x60;
}

int xmlUCSIsIPAExtensions(int code)
{
  return (code - 592) < 0x60;
}

int xmlUCSIsIdeographicDescriptionCharacters(int code)
{
  return code >> 4 == 767;
}

int xmlUCSIsKanbun(int code)
{
  return code >> 4 == 793;
}

int xmlUCSIsKangxiRadicals(int code)
{
  return (code - 12032) < 0xE0;
}

int xmlUCSIsKannada(int code)
{
  return (code & 0xFFFFFF80) == 3200;
}

int xmlUCSIsKatakana(int code)
{
  return (code - 12448) < 0x60;
}

int xmlUCSIsKatakanaPhoneticExtensions(int code)
{
  return code >> 4 == 799;
}

int xmlUCSIsKhmer(int code)
{
  return code >> 7 == 47;
}

int xmlUCSIsKhmerSymbols(int code)
{
  return code >> 5 == 207;
}

int xmlUCSIsLao(int code)
{
  return (code & 0xFFFFFF80) == 3712;
}

int xmlUCSIsLatin1Supplement(int code)
{
  return (code & 0xFFFFFF80) == 128;
}

int xmlUCSIsLatinExtendedA(int code)
{
  return (code & 0xFFFFFF80) == 256;
}

int xmlUCSIsLatinExtendedB(int code)
{
  return (code - 384) < 0xD0;
}

int xmlUCSIsLatinExtendedAdditional(int code)
{
  return code >> 8 == 30;
}

int xmlUCSIsLetterlikeSymbols(int code)
{
  return (code - 8448) < 0x50;
}

int xmlUCSIsLimbu(int code)
{
  return (code - 6400) < 0x50;
}

int xmlUCSIsLinearBIdeograms(int code)
{
  return code >> 7 == 513;
}

int xmlUCSIsLinearBSyllabary(int code)
{
  return (code & 0xFFFFFF80) == 0x10000;
}

int xmlUCSIsLowSurrogates(int code)
{
  return code >> 10 == 55;
}

int xmlUCSIsMalayalam(int code)
{
  return (code & 0xFFFFFF80) == 3328;
}

int xmlUCSIsMathematicalAlphanumericSymbols(int code)
{
  return code >> 10 == 117;
}

int xmlUCSIsMathematicalOperators(int code)
{
  return code >> 8 == 34;
}

int xmlUCSIsMiscellaneousMathematicalSymbolsA(int code)
{
  return (code - 10176) < 0x30;
}

int xmlUCSIsMiscellaneousMathematicalSymbolsB(int code)
{
  return code >> 7 == 83;
}

int xmlUCSIsMiscellaneousSymbols(int code)
{
  return code >> 8 == 38;
}

int xmlUCSIsMiscellaneousSymbolsandArrows(int code)
{
  return code >> 8 == 43;
}

int xmlUCSIsMiscellaneousTechnical(int code)
{
  return code >> 8 == 35;
}

int xmlUCSIsMongolian(int code)
{
  return (code - 6144) < 0xB0;
}

int xmlUCSIsMusicalSymbols(int code)
{
  return code >> 8 == 465;
}

int xmlUCSIsMyanmar(int code)
{
  return (code - 4096) < 0xA0;
}

int xmlUCSIsNumberForms(int code)
{
  return (code - 8528) < 0x40;
}

int xmlUCSIsOgham(int code)
{
  return code >> 5 == 180;
}

int xmlUCSIsOldItalic(int code)
{
  return (code - 66304) < 0x30;
}

int xmlUCSIsOpticalCharacterRecognition(int code)
{
  return code >> 5 == 290;
}

int xmlUCSIsOriya(int code)
{
  return (code & 0xFFFFFF80) == 2816;
}

int xmlUCSIsOsmanya(int code)
{
  return (code - 66688) < 0x30;
}

int xmlUCSIsPhoneticExtensions(int code)
{
  return code >> 7 == 58;
}

int xmlUCSIsPrivateUse(int code)
{
  unsigned int v1 = code & 0xFFFF0000;
  return (code - 57344) >> 8 < 0x19 || v1 == 983040 || v1 == 0x100000;
}

int xmlUCSIsPrivateUseArea(int code)
{
  return (code - 57344) >> 8 < 0x19;
}

int xmlUCSIsRunic(int code)
{
  return (code - 5792) < 0x60;
}

int xmlUCSIsShavian(int code)
{
  return (code - 66640) < 0x30;
}

int xmlUCSIsSinhala(int code)
{
  return (code & 0xFFFFFF80) == 3456;
}

int xmlUCSIsSmallFormVariants(int code)
{
  return (code - 65104) < 0x20;
}

int xmlUCSIsSpacingModifierLetters(int code)
{
  return (code - 688) < 0x50;
}

int xmlUCSIsSpecials(int code)
{
  return code >> 4 == 4095;
}

int xmlUCSIsSuperscriptsandSubscripts(int code)
{
  return (code - 8304) < 0x30;
}

int xmlUCSIsSupplementalArrowsA(int code)
{
  return code >> 4 == 639;
}

int xmlUCSIsSupplementalArrowsB(int code)
{
  return code >> 7 == 82;
}

int xmlUCSIsSupplementalMathematicalOperators(int code)
{
  return code >> 8 == 42;
}

int xmlUCSIsSupplementaryPrivateUseAreaA(int code)
{
  return (code & 0xFFFF0000) == 983040;
}

int xmlUCSIsSupplementaryPrivateUseAreaB(int code)
{
  return (code & 0xFFFF0000) == 0x100000;
}

int xmlUCSIsSyriac(int code)
{
  return (code - 1792) < 0x50;
}

int xmlUCSIsTagalog(int code)
{
  return code >> 5 == 184;
}

int xmlUCSIsTagbanwa(int code)
{
  return code >> 5 == 187;
}

int xmlUCSIsTags(int code)
{
  return (code & 0xFFFFFF80) == 917504;
}

int xmlUCSIsTaiLe(int code)
{
  return (code - 6480) < 0x30;
}

int xmlUCSIsTaiXuanJingSymbols(int code)
{
  return (code - 119552) < 0x60;
}

int xmlUCSIsTamil(int code)
{
  return (code & 0xFFFFFF80) == 2944;
}

int xmlUCSIsTelugu(int code)
{
  return (code & 0xFFFFFF80) == 3072;
}

int xmlUCSIsThaana(int code)
{
  return (code & 0xFFFFFFC0) == 1920;
}

int xmlUCSIsThai(int code)
{
  return (code & 0xFFFFFF80) == 3584;
}

int xmlUCSIsTibetan(int code)
{
  return (code & 0xFFFFFF00) == 3840;
}

int xmlUCSIsUgaritic(int code)
{
  return code >> 5 == 2076;
}

int xmlUCSIsUnifiedCanadianAboriginalSyllabics(int code)
{
  return (code - 5120) < 0x280;
}

int xmlUCSIsVariationSelectors(int code)
{
  return code >> 4 == 4064;
}

int xmlUCSIsVariationSelectorsSupplement(int code)
{
  return (code - 917760) < 0xF0;
}

int xmlUCSIsYiRadicals(int code)
{
  return (code - 42128) < 0x40;
}

int xmlUCSIsYiSyllables(int code)
{
  return (code - 40960) < 0x490;
}

int xmlUCSIsYijingHexagramSymbols(int code)
{
  return code >> 6 == 311;
}

int xmlUCSIsBlock(int code, const char *block)
{
  uint64_t v2 = *(void *)&code;
  int v3 = (uint64_t (*)(uint64_t))xmlUnicodeLookup((uint64_t *)&xmlUnicodeBlockTbl, (char *)block);
  if (v3) {
    return v3(v2);
  }
  else {
    return -1;
  }
}

uint64_t xmlUnicodeLookup(uint64_t *a1, char *__s1)
{
  uint64_t result = 0LL;
  if (a1 && __s1)
  {
    int v5 = *((_DWORD *)a1 + 2);
    int v6 = v5 - 1;
    if (v5 < 1)
    {
      return 0LL;
    }

    else
    {
      int v7 = 0;
      uint64_t v8 = *a1;
      while (1)
      {
        int v9 = v6 + v7;
        if (v6 + v7 < 0 != __OFADD__(v6, v7)) {
          ++v9;
        }
        uint64_t v10 = (uint64_t)v9 >> 1;
        int v11 = strcmp(__s1, *(const char **)(v8 + 16LL * (v9 >> 1)));
        if (!v11) {
          break;
        }
        if (v11 < 0) {
          int v6 = v10 - 1;
        }
        else {
          int v7 = v10 + 1;
        }
        if (v7 > v6) {
          return 0LL;
        }
      }

      return *(void *)(v8 + 16 * v10 + 8);
    }
  }

  return result;
}

int xmlUCSIsCatC(int code)
{
  return xmlCharInRange(code, &xmlCG);
}

int xmlUCSIsCatCc(int code)
{
  return code < 0x20 || (code - 127) < 0x21;
}

int xmlUCSIsCatCf(int code)
{
  return xmlCharInRange(code, &xmlCfG);
}

int xmlUCSIsCatCo(int code)
{
  int result = 1;
  if (code >= 983040)
  {
    if (code == 983040 || code == 1048573 || code == 0x100000) {
      return result;
    }
    return code == 1114109;
  }

  if (code != 57344 && code != 63743) {
    return code == 1114109;
  }
  return result;
}

int xmlUCSIsCatCs(int code)
{
  return code == 55296 || (code - 56191) < 2 || (code - 56319) < 2 || code == 57343;
}

int xmlUCSIsCatL(int code)
{
  return xmlCharInRange(code, &xmlLG);
}

int xmlUCSIsCatLl(int code)
{
  return xmlCharInRange(code, &xmlLlG);
}

int xmlUCSIsCatLm(int code)
{
  return xmlCharInRange(code, &xmlLmG);
}

int xmlUCSIsCatLo(int code)
{
  return xmlCharInRange(code, &xmlLoG);
}

int xmlUCSIsCatLt(int code)
{
  return xmlCharInRange(code, &xmlLtG);
}

int xmlUCSIsCatLu(int code)
{
  return xmlCharInRange(code, &xmlLuG);
}

int xmlUCSIsCatM(int code)
{
  return xmlCharInRange(code, &xmlMG);
}

int xmlUCSIsCatMc(int code)
{
  return xmlCharInRange(code, &xmlMcG);
}

int xmlUCSIsCatMe(int code)
{
  int v1 = (code - 8413) < 4 || (code - 8418) < 3;
  if (code == 1758) {
    int v1 = 1;
  }
  else {
    return 1;
  }
}

int xmlUCSIsCatMn(int code)
{
  return xmlCharInRange(code, &xmlMnG);
}

int xmlUCSIsCatN(int code)
{
  return xmlCharInRange(code, &xmlNG);
}

int xmlUCSIsCatNd(int code)
{
  return xmlCharInRange(code, &xmlNdG);
}

int xmlUCSIsCatNl(int code)
{
  int v1 = (code - 8544) < 0x24 || code == 66378;
  if (code == 12295) {
    int v1 = 1;
  }
  else {
    return 1;
  }
}

int xmlUCSIsCatNo(int code)
{
  return xmlCharInRange(code, &xmlNoG);
}

int xmlUCSIsCatP(int code)
{
  return xmlCharInRange(code, &xmlPG);
}

int xmlUCSIsCatPc(int code)
{
  unsigned int v1 = code - 8255;
  BOOL v2 = code == 65343 || code == 65381;
  int v3 = (code - 65101) < 3 || v2;
  else {
    int v4 = 1;
  }
  if (code == 12539) {
    int v5 = 1;
  }
  else {
    int v5 = v4;
  }
  if (code == 95) {
    int v5 = 1;
  }
  BOOL v6 = v1 > 0x15;
  int v7 = (1 << v1) & 0x200003;
  if (v6 || v7 == 0) {
    return v5;
  }
  else {
    return 1;
  }
}

int xmlUCSIsCatPd(int code)
{
  return xmlCharInRange(code, &xmlPdG);
}

int xmlUCSIsCatPe(int code)
{
  return xmlCharInRange(code, &xmlPeG);
}

int xmlUCSIsCatPf(int code)
{
  BOOL v1 = code == 8221 || code == 8250;
  int v2 = code == 8217 || v1;
  if (code == 187) {
    return 1;
  }
  else {
    return v2;
  }
}

int xmlUCSIsCatPi(int code)
{
  unsigned int v1 = code - 8216;
  BOOL v2 = code == 8249;
  if (code == 171) {
    BOOL v2 = 1;
  }
  BOOL v3 = v1 > 7;
  int v4 = (1 << v1) & 0x99;
  return !v3 && v4 != 0 || v2;
}

int xmlUCSIsCatPo(int code)
{
  return xmlCharInRange(code, &xmlPoG);
}

int xmlUCSIsCatPs(int code)
{
  return xmlCharInRange(code, &xmlPsG);
}

int xmlUCSIsCatS(int code)
{
  return xmlCharInRange(code, &xmlSG);
}

int xmlUCSIsCatSc(int code)
{
  return xmlCharInRange(code, &xmlScG);
}

int xmlUCSIsCatSk(int code)
{
  return xmlCharInRange(code, &xmlSkG);
}

int xmlUCSIsCatSm(int code)
{
  return xmlCharInRange(code, &xmlSmG);
}

int xmlUCSIsCatSo(int code)
{
  return xmlCharInRange(code, &xmlSoG);
}

int xmlUCSIsCatZ(int code)
{
  return xmlCharInRange(code, &xmlZG);
}

int xmlUCSIsCatZl(int code)
{
  return code == 8232;
}

int xmlUCSIsCatZp(int code)
{
  return code == 8233;
}

int xmlUCSIsCatZs(int code)
{
  int v1 = 1;
  if (code > 5759)
  {
    if (code == 5760 || code == 6158) {
      return v1;
    }
  }

  else if (code == 32 || code == 160)
  {
    return v1;
  }

  BOOL v2 = code == 8287 || code == 12288;
  int v3 = code == 8239 || v2;
  else {
    return 1;
  }
}

int xmlUCSIsCat(int code, const char *cat)
{
  uint64_t v2 = *(void *)&code;
  int v3 = (uint64_t (*)(uint64_t))xmlUnicodeLookup((uint64_t *)&xmlUnicodeCatTbl, (char *)cat);
  if (v3) {
    return v3(v2);
  }
  else {
    return -1;
  }
}

uint64_t linkedOnOrAfterFall2022OSVersions()
{
  if (linkedOnOrAfterFall2022OSVersions_once != -1) {
    dispatch_once(&linkedOnOrAfterFall2022OSVersions_once, &__block_literal_global_1);
  }
  return linkedOnOrAfterFall2022OSVersions_result;
}

uint64_t __linkedOnOrAfterFall2022OSVersions_block_invoke()
{
  uint64_t result = dyld_program_minos_at_least();
  linkedOnOrAfterFall2022OSVersions_uint64_t result = result;
  return result;
}

xmlTextWriterPtr xmlNewTextWriter(xmlOutputBufferPtr out)
{
  uint64_t v2 = xmlMalloc(0x50uLL);
  int v3 = v2;
  if (!v2)
  {
    __xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  0LL,  0x19u,  2,  3,  0LL,  0,  0LL,  0LL,  0LL,  0,  0,  "%s",  (char)"xmlNewTextWriter : out of memory!\n");
    return (xmlTextWriterPtr)v3;
  }

  v2[3] = 0u;
  v2[4] = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  *uint64_t v2 = 0u;
  xmlListPtr v4 = xmlListCreate((xmlListDeallocator)xmlFreeTextWriterStackEntry, (xmlListDataCompare)xmlCmpTextWriterStackEntry);
  *((void *)v3 + 1) = v4;
  if (!v4)
  {
    __xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  0LL,  0x19u,  2,  3,  0LL,  0,  0LL,  0LL,  0LL,  0,  0,  "%s",  (char)"xmlNewTextWriter : out of memory!\n");
LABEL_9:
    xmlFree(v3);
    return 0LL;
  }

  xmlListPtr v5 = xmlListCreate( (xmlListDeallocator)xmlFreeTextWriterNsStackEntry,  (xmlListDataCompare)xmlCmpTextWriterNsStackEntry);
  *((void *)v3 + 2) = v5;
  if (!v5)
  {
    __xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  0LL,  0x19u,  2,  3,  0LL,  0,  0LL,  0LL,  0LL,  0,  0,  "%s",  (char)"xmlNewTextWriter : out of memory!\n");
    xmlListDelete(*((xmlListPtr *)v3 + 1));
    goto LABEL_9;
  }

  *(void *)int v3 = out;
  BOOL v6 = xmlStrdup((const xmlChar *)" ");
  *((void *)v3 + 5) = v6;
  *((_BYTE *)v3 + 48) = 34;
  if (!v6)
  {
    xmlListDelete(*((xmlListPtr *)v3 + 1));
    xmlListDelete(*((xmlListPtr *)v3 + 2));
    xmlFree(v3);
    __xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  0LL,  0x19u,  2,  3,  0LL,  0,  0LL,  0LL,  0LL,  0,  0,  "%s",  (char)"xmlNewTextWriter : out of memory!\n");
    return 0LL;
  }

  *((void *)v3 + 9) = xmlNewDoc(0LL);
  *((_DWORD *)v3 + 16) = 0;
  return (xmlTextWriterPtr)v3;
}

_DWORD *xmlWriterErrMsg(uint64_t a1, int a2, char a3)
{
  if (a1) {
    int v3 = *(void **)(a1 + 56);
  }
  else {
    int v3 = 0LL;
  }
  return __xmlRaiseError(0LL, 0LL, 0LL, v3, 0LL, 0x19u, a2, 3, 0LL, 0, 0LL, 0LL, 0LL, 0, 0, "%s", a3);
}

void xmlFreeTextWriterStackEntry(xmlLink *a1)
{
  Data = (void **)xmlLinkGetData(a1);
  if (Data)
  {
    uint64_t v2 = Data;
    int v3 = *Data;
    if (v3) {
      xmlFree(v3);
    }
    xmlFree(v2);
  }

uint64_t xmlCmpTextWriterStackEntry(const xmlChar **a1, const xmlChar **a2)
{
  if (a1 == a2) {
    return 0LL;
  }
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (a2) {
    return xmlStrcmp(*a1, *a2);
  }
  return 1LL;
}

void xmlFreeTextWriterNsStackEntry(xmlLink *a1)
{
  Data = (void **)xmlLinkGetData(a1);
  if (Data)
  {
    uint64_t v2 = Data;
    int v3 = *Data;
    if (v3) {
      xmlFree(v3);
    }
    xmlListPtr v4 = v2[1];
    if (v4) {
      xmlFree(v4);
    }
    xmlFree(v2);
  }

uint64_t xmlCmpTextWriterNsStackEntry(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 0LL;
  }
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (!a2) {
    return 1LL;
  }
  if (xmlStrcmp(*(const xmlChar **)a1, *(const xmlChar **)a2) || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0xFFFFFFFFLL;
  }
  return 0LL;
}

xmlTextWriterPtr xmlNewTextWriterFilename(const char *uri, int compression)
{
  Filename = xmlOutputBufferCreateFilename(uri, 0LL, compression);
  if (Filename)
  {
    int v3 = Filename;
    xmlTextWriterPtr result = xmlNewTextWriter(Filename);
    if (result)
    {
      *((_DWORD *)result + 7) = 0;
      *((_DWORD *)result + 8) = 0;
      return result;
    }

    __xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  0LL,  0x19u,  2,  3,  0LL,  0,  0LL,  0LL,  0LL,  0,  0,  "%s",  (char)"xmlNewTextWriterFilename : out of memory!\n");
    xmlOutputBufferClose(v3);
  }

  else
  {
    __xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  0LL,  0x19u,  1516,  3,  0LL,  0,  0LL,  0LL,  0LL,  0,  0,  "%s",  (char)"xmlNewTextWriterFilename : cannot open uri\n");
  }

  return 0LL;
}

xmlTextWriterPtr xmlNewTextWriterMemory(xmlBufferPtr buf, int compression)
{
  Buffer = xmlOutputBufferCreateBuffer(buf, 0LL);
  if (Buffer)
  {
    int v3 = Buffer;
    xmlTextWriterPtr result = xmlNewTextWriter(Buffer);
    if (result) {
      return result;
    }
    __xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  0LL,  0x19u,  2,  3,  0LL,  0,  0LL,  0LL,  0LL,  0,  0,  "%s",  (char)"xmlNewTextWriterMemory : out of memory!\n");
    xmlOutputBufferClose(v3);
  }

  else
  {
    __xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  0LL,  0x19u,  2,  3,  0LL,  0,  0LL,  0LL,  0LL,  0,  0,  "%s",  (char)"xmlNewTextWriterMemory : out of memory!\n");
  }

  return 0LL;
}

xmlTextWriterPtr xmlNewTextWriterPushParser(xmlParserCtxtPtr ctxt, int compression)
{
  if (!ctxt)
  {
    BOOL v6 = "xmlNewTextWriterPushParser : invalid context!\n";
LABEL_7:
    __xmlRaiseError(0LL, 0LL, 0LL, 0LL, 0LL, 0x19u, 1, 3, 0LL, 0, 0LL, 0LL, 0LL, 0, 0, "%s", (char)v6);
    return 0LL;
  }

  xmlOutputBufferPtr IO = xmlOutputBufferCreateIO( (xmlOutputWriteCallback)xmlTextWriterWriteDocCallback,  (xmlOutputCloseCallback)xmlTextWriterCloseDocCallback,  ctxt,  0LL);
  if (!IO)
  {
    BOOL v6 = "xmlNewTextWriterPushParser : error at xmlOutputBufferCreateIO!\n";
    goto LABEL_7;
  }

  xmlListPtr v4 = IO;
  xmlTextWriterPtr result = xmlNewTextWriter(IO);
  if (result)
  {
    *((void *)result + 7) = ctxt;
    return result;
  }

  __xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  0LL,  0x19u,  1,  3,  0LL,  0,  0LL,  0LL,  0LL,  0,  0,  "%s",  (char)"xmlNewTextWriterPushParser : error at xmlNewTextWriter!\n");
  xmlOutputBufferClose(v4);
  return 0LL;
}

uint64_t xmlTextWriterWriteDocCallback(xmlParserCtxt *a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  int v4 = xmlParseChunk(a1, a2, a3, 0);
  if (v4)
  {
    __xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  0LL,  0x19u,  1,  3,  0LL,  0,  0LL,  0LL,  0LL,  v4,  0,  "xmlTextWriterWriteDocCallback : XML error %d !\n",  v4);
    return 0xFFFFFFFFLL;
  }

  return v3;
}

uint64_t xmlTextWriterCloseDocCallback(xmlParserCtxt *a1)
{
  uint64_t result = xmlParseChunk(a1, 0LL, 0, 1);
  if ((_DWORD)result)
  {
    __xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  0LL,  0x19u,  1,  3,  0LL,  0,  0LL,  0LL,  0LL,  result,  0,  "xmlTextWriterCloseDocCallback : XML error %d !\n",  result);
    return 0xFFFFFFFFLL;
  }

  return result;
}

xmlTextWriterPtr xmlNewTextWriterDoc(xmlDocPtr *doc, int compression)
{
  hdlr.startDocument = (startDocumentSAXFunc)xmlTextWriterStartDocumentCallback;
  hdlr.startElement = xmlSAX2StartElement;
  hdlr.endElement = xmlSAX2EndElement;
  xmlParserCtxtPtr v4 = xmlCreatePushParserCtxt(&hdlr, 0LL, 0LL, 0, 0LL);
  if (!v4)
  {
    __xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  0LL,  0x19u,  1,  3,  0LL,  0,  0LL,  0LL,  0LL,  0,  0,  "%s",  (char)"xmlNewTextWriterDoc : error at xmlCreatePushParserCtxt!\n");
    return 0LL;
  }

  xmlListPtr v5 = v4;
  v4->dictNames = 0;
  xmlDocPtr v6 = xmlNewDoc((const xmlChar *)"1.0");
  v5->myDoc = v6;
  if (!v6)
  {
    xmlFreeParserCtxt(v5);
    __xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  0LL,  0x19u,  1,  3,  0LL,  0,  0LL,  0LL,  0LL,  0,  0,  "%s",  (char)"xmlNewTextWriterDoc : error at xmlNewDoc!\n");
    return 0LL;
  }

  xmlTextWriterPtr v8 = xmlNewTextWriterPushParser(v5, v7);
  myDoc = v5->myDoc;
  if (v8)
  {
    xmlSetDocCompressMode(myDoc, compression);
    if (doc)
    {
      xmlDoc *doc = v5->myDoc;
      *((_DWORD *)v8 + 16) = 1;
    }
  }

  else
  {
    xmlFreeDoc(myDoc);
    xmlFreeParserCtxt(v5);
    __xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  0LL,  0x19u,  1,  3,  0LL,  0,  0LL,  0LL,  0LL,  0,  0,  "%s",  (char)"xmlNewTextWriterDoc : error at xmlNewTextWriterPushParser!\n");
  }

  return v8;
}

const xmlChar **xmlTextWriterStartDocumentCallback(const xmlChar **result)
{
  int v1 = result;
  uint64_t v2 = (const xmlChar **)result[2];
  if (*((_DWORD *)result + 13))
  {
    if (!v2)
    {
      uint64_t result = (const xmlChar **)htmlNewDocNoDtD(0LL, 0LL);
      uint64_t v2 = result;
      v1[2] = (const xmlChar *)result;
      if (!result)
      {
LABEL_16:
        if (*v1)
        {
          xmlParserCtxtPtr v4 = (uint64_t (*)(const xmlChar *, const char *))*((void *)*v1 + 22);
          if (v4) {
            uint64_t result = (const xmlChar **)v4(v1[1], "SAX.startDocument(): out of memory\n");
          }
        }

        *((_DWORD *)v1 + 3xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 2;
        *((_DWORD *)v1 + 68) = -1;
        *((_DWORD *)v1 + 8xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 1;
        return result;
      }
    }

xmlTextWriterPtr xmlNewTextWriterTree(xmlDocPtr doc, xmlNodePtr node, int compression)
{
  if (!doc)
  {
    int v11 = "xmlNewTextWriterTree : invalid document tree!\n";
LABEL_7:
    __xmlRaiseError(0LL, 0LL, 0LL, 0LL, 0LL, 0x19u, 1, 3, 0LL, 0, 0LL, 0LL, 0LL, 0, 0, "%s", (char)v11);
    return 0LL;
  }

  memset(&hdlr, 0, sizeof(hdlr));
  xmlSAX2InitDefaultSAXHandler(&hdlr, 1);
  hdlr.startDocument = (startDocumentSAXFunc)xmlTextWriterStartDocumentCallback;
  hdlr.startElement = xmlSAX2StartElement;
  hdlr.endElement = xmlSAX2EndElement;
  xmlParserCtxtPtr v6 = xmlCreatePushParserCtxt(&hdlr, 0LL, 0LL, 0, 0LL);
  if (!v6)
  {
    int v11 = "xmlNewTextWriterDoc : error at xmlCreatePushParserCtxt!\n";
    goto LABEL_7;
  }

  xmlTextWriterPtr v8 = v6;
  v6->dictNames = 0;
  xmlTextWriterPtr v9 = xmlNewTextWriterPushParser(v6, v7);
  uint64_t v10 = v9;
  if (v9)
  {
    v8->myDoc = doc;
    v8->xmlNodePtr node = node;
    *((_DWORD *)v9 + 16) = 1;
    xmlSetDocCompressMode(doc, compression);
  }

  else
  {
    xmlFreeParserCtxt(v8);
    __xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  0LL,  0x19u,  1,  3,  0LL,  0,  0LL,  0LL,  0LL,  0,  0,  "%s",  (char)"xmlNewTextWriterDoc : error at xmlNewTextWriterPushParser!\n");
  }

  return v10;
}

void xmlFreeTextWriter(xmlTextWriterPtr writer)
{
  if (writer)
  {
    uint64_t v2 = *(xmlOutputBuffer **)writer;
    if (v2) {
      xmlOutputBufferClose(v2);
    }
    uint64_t v3 = (xmlList *)*((void *)writer + 1);
    if (v3) {
      xmlListDelete(v3);
    }
    xmlParserCtxtPtr v4 = (xmlList *)*((void *)writer + 2);
    if (v4) {
      xmlListDelete(v4);
    }
    xmlListPtr v5 = (xmlParserCtxt *)*((void *)writer + 7);
    if (v5)
    {
      if (v5->myDoc && !*((_DWORD *)writer + 16))
      {
        xmlFreeDoc(v5->myDoc);
        xmlListPtr v5 = (xmlParserCtxt *)*((void *)writer + 7);
        v5->myDoc = 0LL;
      }

      xmlFreeParserCtxt(v5);
    }

    xmlParserCtxtPtr v6 = (xmlDoc *)*((void *)writer + 9);
    if (v6) {
      xmlFreeDoc(v6);
    }
    int v7 = (void *)*((void *)writer + 5);
    if (v7) {
      xmlFree(v7);
    }
    xmlFree(writer);
  }

int xmlTextWriterStartDocument( xmlTextWriterPtr writer, const char *version, const char *encoding, const char *standalone)
{
  if (!writer || !*(void *)writer)
  {
    xmlTextWriterPtr v9 = "xmlTextWriterStartDocument : invalid writer!\n";
    goto LABEL_7;
  }

  xmlTextWriterPtr v8 = xmlListFront(*((xmlListPtr *)writer + 1));
  if (v8 && xmlLinkGetData(v8))
  {
    xmlTextWriterPtr v9 = "xmlTextWriterStartDocument : not allowed in this context!\n";
LABEL_7:
    xmlTextWriterPtr v10 = writer;
    int v11 = 1;
LABEL_8:
    xmlWriterErrMsg((uint64_t)v10, v11, (char)v9);
    return -1;
  }

  if (encoding)
  {
    xmlCharEncodingHandlerPtr CharEncodingHandler = xmlFindCharEncodingHandler(encoding);
    if (!CharEncodingHandler)
    {
      xmlTextWriterPtr v9 = "xmlTextWriterStartDocument : unsupported encoding\n";
      xmlTextWriterPtr v10 = writer;
      int v11 = 32;
      goto LABEL_8;
    }

    xmlCharEncodingHandlerPtr v14 = CharEncodingHandler;
    unint64_t v15 = *(void **)writer;
    _OWORD v15[3] = v14;
    if (!v15[5])
    {
      Size = xmlBufCreateSize(4000LL);
      unint64_t v15 = *(void **)writer;
      *(void *)(*(void *)writer + 40LL) = Size;
    }

    xmlCharEncOutput(v15, 1);
    uint64_t v17 = *((void *)writer + 9);
    if (v17 && !*(void *)(v17 + 112)) {
      *(void *)(*((void *)writer + 9) + 112LL) = xmlStrdup(**(const xmlChar ***)(*(void *)writer + 24LL));
    }
  }

  else
  {
    uint64_t v18 = *(void *)writer;
    *(void *)(v18 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
    *(void *)(v18 + 4xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = 0LL;
  }

  int v19 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "<?xml version=");
  if (v19 < 0) {
    return -1;
  }
  int v20 = v19;
  int v21 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
  if (v21 < 0) {
    return -1;
  }
  int v22 = v21;
  double v23 = version ? version : "1.0";
  int v24 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, v23);
  if (v24 < 0) {
    return -1;
  }
  int v25 = v24;
  int v26 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
  if (v26 < 0) {
    return -1;
  }
  int v27 = v22 + v20 + v25 + v26;
  uint64_t v28 = *(xmlOutputBuffer **)writer;
  if (*(void *)(*(void *)writer + 24LL))
  {
    int v29 = xmlOutputBufferWriteString(v28, " encoding=");
    if (v29 < 0) {
      return -1;
    }
    int v30 = v29;
    int v31 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
    if (v31 < 0) {
      return -1;
    }
    int v32 = v31;
    int v33 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, **(const char ***)(*(void *)writer + 24LL));
    if (v33 < 0) {
      return -1;
    }
    int v34 = v33;
    int v35 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
    if (v35 < 0) {
      return -1;
    }
    v27 += v30 + v32 + v35 + v34;
    uint64_t v28 = *(xmlOutputBuffer **)writer;
  }

  if (standalone)
  {
    int v36 = xmlOutputBufferWriteString(v28, " standalone=");
    if (v36 < 0) {
      return -1;
    }
    int v37 = v36;
    int v38 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
    if (v38 < 0) {
      return -1;
    }
    int v39 = v38;
    int v40 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, standalone);
    if (v40 < 0) {
      return -1;
    }
    int v41 = v40;
    int v42 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
    if (v42 < 0) {
      return -1;
    }
    v27 += v37 + v39 + v41 + v42;
    uint64_t v28 = *(xmlOutputBuffer **)writer;
  }

  int v43 = xmlOutputBufferWriteString(v28, "?>\n");
  if (v43 < 0) {
    return -1;
  }
  return v43 + v27;
}

int xmlTextWriterEndDocument(xmlTextWriterPtr writer)
{
  if (!writer)
  {
    __xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  0LL,  0x19u,  1,  3,  0LL,  0,  0LL,  0LL,  0LL,  0,  0,  "%s",  (char)"xmlTextWriterEndDocument : invalid writer!\n");
    return -1;
  }

  uint64_t v2 = xmlListFront(*((xmlListPtr *)writer + 1));
  for (i = 0; v2; uint64_t v2 = xmlListFront(*((xmlListPtr *)writer + 1)))
  {
    Data = xmlLinkGetData(v2);
    if (!Data) {
      break;
    }
    switch(Data[2])
    {
      case 1:
      case 2:
      case 3:
        int v5 = xmlTextWriterEndElement(writer);
        if (v5 < 0) {
          return -1;
        }
        goto LABEL_14;
      case 4:
      case 5:
        int v5 = xmlTextWriterEndPI(writer);
        if (v5 < 0) {
          return -1;
        }
        goto LABEL_14;
      case 6:
        int v5 = xmlTextWriterEndCDATA(writer);
        if (v5 < 0) {
          return -1;
        }
        goto LABEL_14;
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
        int v5 = xmlTextWriterEndDTD(writer);
        if (v5 < 0) {
          return -1;
        }
        goto LABEL_14;
      case 0x10:
        int v5 = xmlTextWriterEndComment(writer);
        if (v5 < 0) {
          return -1;
        }
LABEL_14:
        i += v5;
        break;
      default:
        continue;
    }
  }

  if (*((_DWORD *)writer + 7)) {
    goto LABEL_19;
  }
  int v6 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "\n");
  if (v6 < 0) {
    return -1;
  }
  i += v6;
LABEL_19:
  int v7 = *(xmlOutputBuffer **)writer;
  if (*(void *)writer) {
    LODWORD(v7) = xmlOutputBufferFlush(v7);
  }
  return (_DWORD)v7 + i;
}

int xmlTextWriterEndElement(xmlTextWriterPtr writer)
{
  if (!writer) {
    return -1;
  }
  uint64_t v2 = xmlListFront(*((xmlListPtr *)writer + 1));
  if (!v2) {
    goto LABEL_8;
  }
  Data = (const char **)xmlLinkGetData(v2);
  if (!Data) {
    goto LABEL_8;
  }
  xmlParserCtxtPtr v4 = Data;
  int v5 = *((_DWORD *)Data + 2);
  if (v5 == 1)
  {
    int v6 = 0;
LABEL_12:
    int v9 = xmlTextWriterOutputNSDecl((uint64_t)writer);
    if (v9 < 0) {
      return -1;
    }
    int v10 = v9;
    if (*((_DWORD *)writer + 7)) {
      *((_DWORD *)writer + 8) = 1;
    }
    int v11 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "/>");
    if (v11 < 0) {
      return -1;
    }
    int v7 = v10 + v6 + v11;
    goto LABEL_25;
  }

  if (v5 != 3)
  {
    if (v5 != 2) {
      return -1;
    }
    int v6 = xmlTextWriterEndAttribute(writer);
    if (v6 < 0)
    {
LABEL_8:
      xmlListDelete(*((xmlListPtr *)writer + 2));
      *((void *)writer + 2) = 0LL;
      return -1;
    }

    goto LABEL_12;
  }

  if (*((_DWORD *)writer + 7) && *((_DWORD *)writer + 8)) {
    int v12 = xmlTextWriterWriteIndent((uint64_t)writer);
  }
  else {
    int v12 = 0;
  }
  *((_DWORD *)writer + 8) = 1;
  int v13 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "</");
  if (v13 < 0) {
    return -1;
  }
  int v14 = v13;
  int v15 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, *v4);
  if (v15 < 0) {
    return -1;
  }
  int v16 = v15;
  int v17 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, ">");
  if (v17 < 0) {
    return -1;
  }
  int v7 = v14 + v12 + v17 + v16;
LABEL_25:
  if (*((_DWORD *)writer + 7)) {
    v7 += xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "\n");
  }
  xmlListPopFront(*((xmlListPtr *)writer + 1));
  return v7;
}

int xmlTextWriterEndPI(xmlTextWriterPtr writer)
{
  if (!writer) {
    return -1;
  }
  uint64_t v2 = xmlListFront(*((xmlListPtr *)writer + 1));
  if (!v2) {
    return 0;
  }
  Data = xmlLinkGetData(v2);
  if (!Data) {
    return 0;
  }
  if ((Data[2] & 0xFFFFFFFE) != 4) {
    return -1;
  }
  int v4 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "?>");
  if (v4 < 0) {
    return -1;
  }
  int v5 = v4;
  if (*((_DWORD *)writer + 7))
  {
    int v6 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "\n");
    if ((v6 & 0x80000000) == 0)
    {
      v5 += v6;
      goto LABEL_9;
    }

    return -1;
  }

int xmlTextWriterEndCDATA(xmlTextWriterPtr writer)
{
  if (!writer) {
    return -1;
  }
  uint64_t v2 = xmlListFront(*((xmlListPtr *)writer + 1));
  if (!v2) {
    return -1;
  }
  Data = xmlLinkGetData(v2);
  if (!Data) {
    return -1;
  }
  if (Data[2] != 6) {
    return -1;
  }
  int v4 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "]]>");
  if (v4 < 0) {
    return -1;
  }
  int v5 = v4;
  xmlListPopFront(*((xmlListPtr *)writer + 1));
  return v5;
}

int xmlTextWriterEndDTD(xmlTextWriterPtr writer)
{
  if (!writer) {
    return -1;
  }
  int v2 = 0;
  while (2)
  {
    uint64_t v3 = xmlListFront(*((xmlListPtr *)writer + 1));
    if (v3)
    {
      Data = xmlLinkGetData(v3);
      if (Data)
      {
        switch(Data[2])
        {
          case 7:
            goto LABEL_11;
          case 8:
            int v6 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "]");
            if (v6 < 0) {
              return -1;
            }
            v2 += v6;
LABEL_11:
            int v7 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, ">");
            int v8 = v7;
            if (!*((_DWORD *)writer + 7)) {
              goto LABEL_14;
            }
            if (v7 < 0) {
              return -1;
            }
            v2 += v7;
            int v8 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "\n");
LABEL_14:
            xmlListPopFront(*((xmlListPtr *)writer + 1));
LABEL_17:
            v2 += v8;
            if (v8 < 0) {
              return -1;
            }
            continue;
          case 9:
          case 0xA:
            int v5 = xmlTextWriterEndDTDElement(writer);
            goto LABEL_16;
          case 0xB:
          case 0xC:
            int v5 = xmlTextWriterEndDTDAttlist(writer);
            goto LABEL_16;
          case 0xD:
          case 0xE:
          case 0xF:
            int v5 = xmlTextWriterEndDTDEntity(writer);
            goto LABEL_16;
          case 0x10:
            int v5 = xmlTextWriterEndComment(writer);
LABEL_16:
            int v8 = v5;
            goto LABEL_17;
          default:
            return v2;
        }
      }
    }

    return v2;
  }

int xmlTextWriterEndComment(xmlTextWriterPtr writer)
{
  if (!writer)
  {
    __xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  0LL,  0x19u,  1,  3,  0LL,  0,  0LL,  0LL,  0LL,  0,  0,  "%s",  (char)"xmlTextWriterEndComment : invalid writer!\n");
    return -1;
  }

  int v2 = xmlListFront(*((xmlListPtr *)writer + 1));
  if (!v2)
  {
    xmlWriterErrMsg((uint64_t)writer, 1, (char)"xmlTextWriterEndComment : not allowed in this context!\n");
    return -1;
  }

  Data = xmlLinkGetData(v2);
  if (!Data) {
    return -1;
  }
  if (Data[2] != 16) {
    return -1;
  }
  int v4 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "-->");
  if (v4 < 0) {
    return -1;
  }
  int v5 = v4;
  if (*((_DWORD *)writer + 7))
  {
    int v6 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "\n");
    if ((v6 & 0x80000000) == 0)
    {
      v5 += v6;
      goto LABEL_9;
    }

    return -1;
  }

int xmlTextWriterFlush(xmlTextWriterPtr writer)
{
  if (writer)
  {
    int v1 = *(xmlOutputBuffer **)writer;
    if (v1) {
      LODWORD(vxmlSAX2InitDefaultSAXHandler(&hdlr, 1) = xmlOutputBufferFlush(v1);
    }
  }

  else
  {
    LODWORD(vxmlSAX2InitDefaultSAXHandler(&hdlr, 1) = -1;
  }

  return (int)v1;
}

int xmlTextWriterStartComment(xmlTextWriterPtr writer)
{
  if (!writer)
  {
    __xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  0LL,  0x19u,  1,  3,  0LL,  0,  0LL,  0LL,  0LL,  0,  0,  "%s",  (char)"xmlTextWriterStartComment : invalid writer!\n");
    return -1;
  }

  int v2 = xmlListFront(*((xmlListPtr *)writer + 1));
  if (v2 && (Data = xmlLinkGetData(v2)) != 0LL && ((v4 = Data, (v5 = Data[2]) != 0) ? (BOOL v6 = v5 == 3) : (BOOL v6 = 1), !v6))
  {
    if (v5 != 1) {
      return -1;
    }
    int v12 = xmlTextWriterOutputNSDecl((uint64_t)writer);
    if (v12 < 0) {
      return -1;
    }
    int v13 = v12;
    int v14 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, ">");
    if (v14 < 0) {
      return -1;
    }
    int v7 = v14 + v13;
    if (*((_DWORD *)writer + 7))
    {
      int v15 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "\n");
      if (v15 < 0) {
        return -1;
      }
      v7 += v15;
    }

    v4[2] = 3;
  }

  else
  {
    int v7 = 0;
  }

  int v8 = xmlMalloc(0x10uLL);
  if (!v8)
  {
    xmlWriterErrMsg((uint64_t)writer, 2, (char)"xmlTextWriterStartElement : out of memory!\n");
    return -1;
  }

  *(void *)int v8 = 0LL;
  v8[2] = 16;
  xmlListPushFront(*((xmlListPtr *)writer + 1), v8);
  if (!*((_DWORD *)writer + 7)) {
    goto LABEL_14;
  }
  int v9 = xmlTextWriterWriteIndent((uint64_t)writer);
  if (v9 < 0) {
    return -1;
  }
  v7 += v9;
LABEL_14:
  int v10 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "<!--");
  if (v10 >= 0) {
    return v10 + v7;
  }
  else {
    return -1;
  }
}

uint64_t xmlTextWriterOutputNSDecl(uint64_t a1)
{
  uint64_t v2 = 0LL;
  while (!xmlListEmpty(*(xmlListPtr *)(a1 + 16)))
  {
    uint64_t v3 = xmlListFront(*(xmlListPtr *)(a1 + 16));
    Data = (const xmlChar **)xmlLinkGetData(v3);
    if (Data)
    {
      int v5 = Data;
      BOOL v6 = xmlStrdup(Data[1]);
      int v7 = xmlStrdup(*v5);
      xmlListPopFront(*(xmlListPtr *)(a1 + 16));
      int v8 = xmlTextWriterWriteAttribute((xmlTextWriterPtr)a1, v7, v6);
      xmlFree(v6);
      xmlFree(v7);
      if (v8 < 0)
      {
        xmlListDelete(*(xmlListPtr *)(a1 + 16));
        *(void *)(a1 + 16) = 0LL;
        return 0xFFFFFFFFLL;
      }

      uint64_t v2 = (v8 + v2);
    }

    else
    {
      xmlListPopFront(*(xmlListPtr *)(a1 + 16));
    }
  }

  return v2;
}

uint64_t xmlTextWriterWriteIndent(uint64_t a1)
{
  int v2 = xmlListSize(*(xmlListPtr *)(a1 + 8));
  uint64_t v3 = (v2 - 1);
  if (v2 < 1) {
    return 0xFFFFFFFFLL;
  }
  if (v2 != 1)
  {
    int v4 = v2 - 1;
    while (xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)a1, *(const char **)(a1 + 40)) != -1)
    {
      if (!--v4) {
        return v3;
      }
    }

    return 0xFFFFFFFFLL;
  }

  return 0LL;
}

int xmlTextWriterWriteFormatComment(xmlTextWriterPtr writer, const char *format, ...)
{
  return xmlTextWriterWriteVFormatComment(writer, format, va);
}

int xmlTextWriterWriteVFormatComment(xmlTextWriterPtr writer, const char *format, va_list argptr)
{
  if (writer)
  {
    int v4 = xmlTextWriterVSprintf(format, argptr);
    if (v4)
    {
      int v5 = v4;
      int v6 = xmlTextWriterWriteComment(writer, (const xmlChar *)v4);
      xmlFree(v5);
      return v6;
    }
  }

  else
  {
    __xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  0LL,  0x19u,  1,  3,  0LL,  0,  0LL,  0LL,  0LL,  0,  0,  "%s",  (char)"xmlTextWriterWriteVFormatComment : invalid writer!\n");
  }

  return -1;
}

void (__cdecl *xmlTextWriterVSprintf(const char *a1, va_list a2))(void *, xmlErrorPtr)
{
  uint64_t v3 = (void (__cdecl *)(void *, xmlErrorPtr))xmlMalloc(0x400uLL);
  int v4 = v3;
  if (!v3)
  {
LABEL_10:
    __xmlRaiseError( v3,  0LL,  0LL,  0LL,  0LL,  0x19u,  2,  3,  0LL,  0,  0LL,  0LL,  0LL,  0,  0,  "%s",  (char)"xmlTextWriterVSprintf : out of memory!\n");
    return v4;
  }

  if (vsnprintf((char *)v3, 0x400uLL, a1, a2) >= 0x3FF)
  {
    for (uint64_t i = 2047LL; ; i += 1024LL)
    {
      xmlFree(v4);
      uint64_t v3 = (void (__cdecl *)(void *, xmlErrorPtr))xmlMalloc(i + 1);
      int v4 = v3;
      if (!v3) {
        break;
      }
      unsigned int v6 = vsnprintf((char *)v3, i + 1, a1, a2);
    }

    goto LABEL_10;
  }

  return v4;
}

int xmlTextWriterWriteComment(xmlTextWriterPtr writer, const xmlChar *content)
{
  int started = xmlTextWriterStartComment(writer);
  if (started < 0) {
    return -1;
  }
  int v5 = started;
  int v6 = xmlTextWriterWriteString(writer, content);
  if (v6 < 0) {
    return -1;
  }
  int v7 = v6;
  int v8 = xmlTextWriterEndComment(writer);
  if (v8 >= 0) {
    return v7 + v5 + v8;
  }
  else {
    return -1;
  }
}

int xmlTextWriterWriteString(xmlTextWriterPtr writer, const xmlChar *content)
{
  int v2 = -1;
  if (writer && content)
  {
    int v5 = xmlListFront(*((xmlListPtr *)writer + 1));
    int v6 = (xmlChar *)content;
    if (v5)
    {
      Data = xmlLinkGetData(v5);
      int v6 = (xmlChar *)content;
      if (Data)
      {
        int v8 = Data[2];
        if (v8 == 1 || v8 == 3)
        {
          int v6 = xmlEncodeSpecialChars(0LL, content);
          if (!v6) {
            return 0;
          }
        }

        else
        {
          int v6 = (xmlChar *)content;
          if (v8 == 2)
          {
            xmlBufAttrSerializeTxtContent( *(uint64x2_t **)(*(void *)writer + 32LL),  *((void *)writer + 9),  0,  content);
            return 0;
          }
        }
      }
    }

    int v10 = xmlStrlen(v6);
    int v2 = xmlTextWriterWriteRawLen(writer, v6, v10);
    if (v6 != content) {
      xmlFree(v6);
    }
    if (v2 < 0) {
      return -1;
    }
  }

  return v2;
}

int xmlTextWriterStartElement(xmlTextWriterPtr writer, const xmlChar *name)
{
  int result = -1;
  if (writer && name && *name)
  {
    int v5 = xmlListFront(*((xmlListPtr *)writer + 1));
    if (v5 && (Data = xmlLinkGetData(v5)) != 0LL)
    {
      int v7 = Data;
      int v8 = Data[2];
      int v9 = 0;
      if (v8 != 1)
      {
        if (v8 != 2) {
          goto LABEL_16;
        }
        int v9 = xmlTextWriterEndAttribute(writer);
        if (v9 < 0) {
          return -1;
        }
      }

      int v10 = xmlTextWriterOutputNSDecl((uint64_t)writer);
      if (v10 < 0) {
        return -1;
      }
      int v11 = v10;
      int v12 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, ">");
      if (v12 < 0) {
        return -1;
      }
      v9 += v11 + v12;
      if (*((_DWORD *)writer + 7)) {
        xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "\n");
      }
      v7[2] = 3;
    }

    else
    {
      int v9 = 0;
    }

int xmlTextWriterEndAttribute(xmlTextWriterPtr writer)
{
  if (!writer) {
    return -1;
  }
  int v2 = xmlListFront(*((xmlListPtr *)writer + 1));
  if (!v2) {
    return -1;
  }
  Data = xmlLinkGetData(v2);
  if (!Data || Data[2] != 2) {
    return -1;
  }
  Data[2] = 1;
  int result = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
  if (result < 0) {
    return -1;
  }
  return result;
}

int xmlTextWriterStartElementNS( xmlTextWriterPtr writer, const xmlChar *prefix, const xmlChar *name, const xmlChar *namespaceURI)
{
  int started = -1;
  if (writer && name && *name)
  {
    if (prefix)
    {
      int v9 = xmlStrdup(prefix);
      int v10 = xmlStrcat(v9, (const xmlChar *)":");
    }

    else
    {
      int v10 = 0LL;
    }

    int v11 = xmlStrcat(v10, name);
    int started = xmlTextWriterStartElement(writer, v11);
    xmlFree(v11);
    if (started < 0) {
      return -1;
    }
    if (namespaceURI)
    {
      int v12 = (xmlChar **)xmlMalloc(0x18uLL);
      if (v12)
      {
        int v13 = v12;
        int v14 = xmlStrdup((const xmlChar *)"xmlns");
        if (prefix)
        {
          int v15 = xmlStrcat(v14, (const xmlChar *)":");
          int v14 = xmlStrcat(v15, prefix);
        }

        _DWORD *v13 = v14;
        int v16 = xmlStrdup(namespaceURI);
        v13[1] = v16;
        if (v16)
        {
          v13[2] = (xmlChar *)xmlListFront(*((xmlListPtr *)writer + 1));
          xmlListPushFront(*((xmlListPtr *)writer + 2), v13);
          return started;
        }

        xmlWriterErrMsg((uint64_t)writer, 2, (char)"xmlTextWriterStartElementNS : out of memory!\n");
        xmlFree(v13);
      }

      else
      {
        xmlWriterErrMsg((uint64_t)writer, 2, (char)"xmlTextWriterStartElementNS : out of memory!\n");
      }

      return -1;
    }
  }

  return started;
}

int xmlTextWriterFullEndElement(xmlTextWriterPtr writer)
{
  if (!writer) {
    return -1;
  }
  int v2 = xmlListFront(*((xmlListPtr *)writer + 1));
  if (!v2) {
    return -1;
  }
  Data = (const char **)xmlLinkGetData(v2);
  if (!Data) {
    return -1;
  }
  int v4 = Data;
  int v5 = *((_DWORD *)Data + 2);
  switch(v5)
  {
    case 1:
      int v6 = 0;
      break;
    case 3:
      int v10 = 0;
      int v11 = (_DWORD *)((char *)writer + 28);
      if (!*((_DWORD *)writer + 7)) {
        goto LABEL_17;
      }
      goto LABEL_15;
    case 2:
      int v6 = xmlTextWriterEndAttribute(writer);
      if (v6 < 0) {
        return -1;
      }
      break;
    default:
      return -1;
  }

  int v7 = xmlTextWriterOutputNSDecl((uint64_t)writer);
  if (v7 < 0) {
    return -1;
  }
  int v8 = v7;
  int v9 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, ">");
  if (v9 < 0) {
    return -1;
  }
  int v10 = v8 + v6 + v9;
  int v11 = (_DWORD *)((char *)writer + 28);
  if (!*((_DWORD *)writer + 7)) {
    goto LABEL_17;
  }
  *((_DWORD *)writer + 8) = 0;
LABEL_15:
  if (*((_DWORD *)writer + 8)) {
    v10 += xmlTextWriterWriteIndent((uint64_t)writer);
  }
LABEL_17:
  *((_DWORD *)writer + 8) = 1;
  int v12 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "</");
  if (v12 < 0) {
    return -1;
  }
  int v13 = v12;
  int v14 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, *v4);
  if (v14 < 0) {
    return -1;
  }
  int v15 = v14;
  int v16 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, ">");
  if (v16 < 0) {
    return -1;
  }
  int v17 = v13 + v10 + v16 + v15;
  if (*v11) {
    v17 += xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "\n");
  }
  xmlListPopFront(*((xmlListPtr *)writer + 1));
  return v17;
}

int xmlTextWriterWriteFormatRaw(xmlTextWriterPtr writer, const char *format, ...)
{
  return xmlTextWriterWriteVFormatRaw(writer, format, va);
}

int xmlTextWriterWriteVFormatRaw(xmlTextWriterPtr writer, const char *format, va_list argptr)
{
  if (!writer) {
    return -1;
  }
  int v4 = xmlTextWriterVSprintf(format, argptr);
  if (!v4) {
    return -1;
  }
  int v5 = (xmlChar *)v4;
  int v6 = xmlStrlen((const xmlChar *)v4);
  int v7 = xmlTextWriterWriteRawLen(writer, v5, v6);
  xmlFree(v5);
  return v7;
}

int xmlTextWriterWriteRaw(xmlTextWriterPtr writer, const xmlChar *content)
{
  int v4 = xmlStrlen(content);
  return xmlTextWriterWriteRawLen(writer, content, v4);
}

int xmlTextWriterWriteRawLen(xmlTextWriterPtr writer, const xmlChar *content, int len)
{
  if (!writer)
  {
    __xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  0LL,  0x19u,  1,  3,  0LL,  0,  0LL,  0LL,  0LL,  0,  0,  "%s",  (char)"xmlTextWriterWriteRawLen : invalid writer!\n");
    return -1;
  }

  if (!content || len < 0)
  {
    xmlWriterErrMsg((uint64_t)writer, 1, (char)"xmlTextWriterWriteRawLen : invalid content!\n");
    return -1;
  }

  int v6 = xmlListFront(*((xmlListPtr *)writer + 1));
  if (v6)
  {
    Data = xmlLinkGetData(v6);
    int v8 = xmlTextWriterHandleStateDependencies((uint64_t)writer, (uint64_t)Data);
    if (v8 < 0) {
      return -1;
    }
  }

  else
  {
    int v8 = 0;
  }

  if (*((_DWORD *)writer + 7)) {
    *((_DWORD *)writer + 8) = 0;
  }
  int v10 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, len, (const char *)content);
  if (v10 < 0) {
    return -1;
  }
  else {
    return v10 + v8;
  }
}

uint64_t xmlTextWriterHandleStateDependencies(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t result = 0LL;
  *(_WORD *)str = 0;
  char v10 = 0;
  switch(*(_DWORD *)(a2 + 8))
  {
    case 1:
      int v7 = xmlTextWriterOutputNSDecl(a1);
      if ((v7 & 0x80000000) == 0)
      {
        int v5 = v7;
        str[0] = 62;
        int v6 = 3;
        goto LABEL_11;
      }

      return 0xFFFFFFFFLL;
    case 4:
      int v5 = 0;
      str[0] = 32;
      int v6 = 5;
      goto LABEL_11;
    case 7:
      int v5 = 0;
      *(_WORD *)str = 23328;
      int v6 = 8;
      goto LABEL_11;
    case 9:
      int v5 = 0;
      str[0] = 32;
      int v6 = 10;
      goto LABEL_11;
    case 0xB:
      int v5 = 0;
      str[0] = 32;
      int v6 = 12;
      goto LABEL_11;
    case 0xD:
    case 0xF:
      int v5 = 0;
      str[0] = 32;
      str[1] = *(_BYTE *)(a1 + 48);
      int v6 = 14;
LABEL_11:
      *(_DWORD *)(a2 + 8) = v6;
      int v8 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)a1, str);
      if (v8 < 0) {
        uint64_t result = 0xFFFFFFFFLL;
      }
      else {
        uint64_t result = (v8 + v5);
      }
      break;
    default:
      return result;
  }

  return result;
}

int xmlTextWriterWriteFormatString(xmlTextWriterPtr writer, const char *format, ...)
{
  int result = -1;
  if (writer)
  {
    if (format) {
      return xmlTextWriterWriteVFormatString(writer, format, va);
    }
  }

  return result;
}

int xmlTextWriterWriteVFormatString(xmlTextWriterPtr writer, const char *format, va_list argptr)
{
  if (!writer) {
    return -1;
  }
  if (!format) {
    return -1;
  }
  int v4 = xmlTextWriterVSprintf(format, argptr);
  if (!v4) {
    return -1;
  }
  int v5 = v4;
  int v6 = xmlTextWriterWriteString(writer, (const xmlChar *)v4);
  xmlFree(v5);
  return v6;
}

int xmlTextWriterWriteBase64(xmlTextWriterPtr writer, const char *data, int start, int len)
{
  int v4 = -1;
  if (writer && data && ((len | start) & 0x80000000) == 0)
  {
    int v9 = xmlListFront(*((xmlListPtr *)writer + 1));
    if (v9 && (char v10 = xmlLinkGetData(v9)) != 0LL)
    {
      int v4 = xmlTextWriterHandleStateDependencies((uint64_t)writer, (uint64_t)v10);
      if (v4 < 0) {
        return -1;
      }
    }

    else
    {
      int v4 = 0;
    }

    if (*((_DWORD *)writer + 7)) {
      *((_DWORD *)writer + 8) = 0;
    }
    int v11 = *(xmlOutputBuffer **)writer;
    if (!v11) {
      return -1;
    }
    unsigned __int8 v27 = 0;
    __int16 __dst = 0;
    if (len >= 1)
    {
      int v12 = 0;
      int v13 = 0;
      int v14 = 0;
      int v22 = &data[start];
      while (1)
      {
        unsigned int v15 = ~v14 + len;
        if (v15 >= 2) {
          unsigned int v15 = 2;
        }
        memcpy(&__dst, &v22[v14], v15 + 1);
        unint64_t v16 = 0LL;
        do
        {
          unint64_t v17 = v16++;
          int64_t v18 = v14 + 1LL + v17;
        }

        while (v17 <= 1 && v18 < len);
        buf[0] = xmlOutputBufferWriteBase64_dtable[(unint64_t)__dst >> 2];
        buf[1] = xmlOutputBufferWriteBase64_dtable[((unint64_t)HIBYTE(__dst) >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16LL * (__dst & 3))];
        char v24 = xmlOutputBufferWriteBase64_dtable[((unint64_t)v27 >> 6) & 0xFFFFFFFFFFFFFFC3LL | (4LL * (HIBYTE(__dst) & 0xF))];
        char v25 = xmlOutputBufferWriteBase64_dtable[v27 & 0x3F];
        if (v17 <= 1)
        {
          char v25 = 61;
          if (v16 != 2) {
            char v24 = 61;
          }
        }

        if (v13 >= 72)
        {
          int v19 = xmlOutputBufferWrite(v11, 2, "\r\n");
          if (v19 == -1) {
            return -1;
          }
          int v13 = 0;
          v12 += v19;
        }

        int v20 = xmlOutputBufferWrite(v11, 4, buf);
        if (v20 == -1) {
          break;
        }
        v12 += v20;
        if (v18 < len)
        {
          v13 += 4;
          unsigned __int8 v27 = 0;
          __int16 __dst = 0;
          v14 += v16;
          if (v14 < len) {
            continue;
          }
        }

        if (v12 < 0) {
          return -1;
        }
        v4 += v12;
        return v4;
      }

      return -1;
    }
  }

  return v4;
}

int xmlTextWriterWriteBinHex(xmlTextWriterPtr writer, const char *data, int start, int len)
{
  int v4 = -1;
  if (writer && data && ((len | start) & 0x80000000) == 0)
  {
    int v9 = xmlListFront(*((xmlListPtr *)writer + 1));
    if (v9 && (char v10 = xmlLinkGetData(v9)) != 0LL)
    {
      int v4 = xmlTextWriterHandleStateDependencies((uint64_t)writer, (uint64_t)v10);
      if (v4 < 0) {
        return -1;
      }
    }

    else
    {
      int v4 = 0;
    }

    if (*((_DWORD *)writer + 7)) {
      *((_DWORD *)writer + 8) = 0;
    }
    int v11 = *(xmlOutputBuffer **)writer;
    if (!v11) {
      return -1;
    }
    if (len >= 1)
    {
      int v12 = 0;
      int v13 = &data[start];
      uint64_t v14 = len;
      while (1)
      {
        int v15 = xmlOutputBufferWrite( v11,  1,  &xmlOutputBufferWriteBinHex_hex[(unint64_t)*(unsigned __int8 *)v13 >> 4]);
        if (v15 == -1) {
          break;
        }
        int v16 = v15;
        int v17 = xmlOutputBufferWrite(v11, 1, &xmlOutputBufferWriteBinHex_hex[*v13 & 0xF]);
        if (v17 == -1) {
          break;
        }
        v12 += v16 + v17;
        ++v13;
        if (!--v14)
        {
          if (v12 < 0) {
            return -1;
          }
          v4 += v12;
          return v4;
        }
      }

      return -1;
    }
  }

  return v4;
}

int xmlTextWriterStartAttribute(xmlTextWriterPtr writer, const xmlChar *name)
{
  int result = -1;
  if (writer && name && *name)
  {
    int v5 = xmlListFront(*((xmlListPtr *)writer + 1));
    if (!v5) {
      return -1;
    }
    Data = xmlLinkGetData(v5);
    if (!Data) {
      return -1;
    }
    int v7 = Data;
    int v8 = Data[2];
    if (v8 == 1)
    {
      int v9 = 0;
    }

    else
    {
      if (v8 != 2) {
        return -1;
      }
      int v9 = xmlTextWriterEndAttribute(writer);
      if (v9 < 0) {
        return -1;
      }
    }

    int v10 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, " ");
    if ((v10 & 0x80000000) == 0)
    {
      int v11 = v10;
      int v12 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, (const char *)name);
      if ((v12 & 0x80000000) == 0)
      {
        int v13 = v12;
        int v14 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "=");
        if ((v14 & 0x80000000) == 0)
        {
          int v15 = v14;
          int v16 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
          if ((v16 & 0x80000000) == 0)
          {
            int result = v11 + v9 + v13 + v15 + v16;
            v7[2] = 2;
            return result;
          }
        }
      }
    }

    return -1;
  }

  return result;
}

int xmlTextWriterStartAttributeNS( xmlTextWriterPtr writer, const xmlChar *prefix, const xmlChar *name, const xmlChar *namespaceURI)
{
  int result = -1;
  if (writer && name && *name)
  {
    if (namespaceURI)
    {
      int v9 = xmlStrdup((const xmlChar *)"xmlns");
      int v10 = v9;
      if (prefix)
      {
        int v11 = xmlStrcat(v9, (const xmlChar *)":");
        int v10 = xmlStrcat(v11, prefix);
      }

      data[0] = v10;
      data[1] = namespaceURI;
      data[2] = xmlListFront(*((xmlListPtr *)writer + 1));
      int v12 = (const xmlChar **)xmlListSearch(*((xmlListPtr *)writer + 2), data);
      if (v12)
      {
        int v13 = v12;
        xmlFree(v10);
        if (xmlStrcmp(v13[1], namespaceURI)) {
          return -1;
        }
      }

      else if (v10)
      {
        int v14 = xmlMalloc(0x18uLL);
        if (!v14)
        {
          xmlWriterErrMsg((uint64_t)writer, 2, (char)"xmlTextWriterStartAttributeNS : out of memory!\n");
          return -1;
        }

        int v15 = v14;
        void *v14 = v10;
        int v16 = xmlStrdup(namespaceURI);
        v15[1] = v16;
        if (!v16)
        {
          xmlWriterErrMsg((uint64_t)writer, 2, (char)"xmlTextWriterStartAttributeNS : out of memory!\n");
          xmlFree(v15);
          return -1;
        }

        v15[2] = xmlListFront(*((xmlListPtr *)writer + 1));
        xmlListPushFront(*((xmlListPtr *)writer + 2), v15);
      }
    }

    if (prefix)
    {
      int v17 = xmlStrdup(prefix);
      int64_t v18 = xmlStrcat(v17, (const xmlChar *)":");
    }

    else
    {
      int64_t v18 = 0LL;
    }

    int v19 = xmlStrcat(v18, name);
    int started = xmlTextWriterStartAttribute(writer, v19);
    xmlFree(v19);
    if (started < 0) {
      return -1;
    }
    else {
      return started;
    }
  }

  return result;
}

int xmlTextWriterWriteFormatAttribute(xmlTextWriterPtr writer, const xmlChar *name, const char *format, ...)
{
  return xmlTextWriterWriteVFormatAttribute(writer, name, format, va);
}

int xmlTextWriterWriteVFormatAttribute( xmlTextWriterPtr writer, const xmlChar *name, const char *format, va_list argptr)
{
  if (!writer) {
    return -1;
  }
  int v6 = xmlTextWriterVSprintf(format, argptr);
  if (!v6) {
    return -1;
  }
  int v7 = v6;
  int v8 = xmlTextWriterWriteAttribute(writer, name, (const xmlChar *)v6);
  xmlFree(v7);
  return v8;
}

int xmlTextWriterWriteAttribute(xmlTextWriterPtr writer, const xmlChar *name, const xmlChar *content)
{
  int started = xmlTextWriterStartAttribute(writer, name);
  if (started < 0) {
    return -1;
  }
  int v6 = started;
  int v7 = xmlTextWriterWriteString(writer, content);
  if (v7 < 0) {
    return -1;
  }
  int v8 = v7;
  int v9 = xmlTextWriterEndAttribute(writer);
  if (v9 >= 0) {
    return v8 + v6 + v9;
  }
  else {
    return -1;
  }
}

int xmlTextWriterWriteFormatAttributeNS( xmlTextWriterPtr writer, const xmlChar *prefix, const xmlChar *name, const xmlChar *namespaceURI, const char *format, ...)
{
  return xmlTextWriterWriteVFormatAttributeNS(writer, prefix, name, namespaceURI, format, va);
}

int xmlTextWriterWriteVFormatAttributeNS( xmlTextWriterPtr writer, const xmlChar *prefix, const xmlChar *name, const xmlChar *namespaceURI, const char *format, va_list argptr)
{
  if (!writer) {
    return -1;
  }
  int v10 = xmlTextWriterVSprintf(format, argptr);
  if (!v10) {
    return -1;
  }
  int v11 = v10;
  int v12 = xmlTextWriterWriteAttributeNS(writer, prefix, name, namespaceURI, (const xmlChar *)v10);
  xmlFree(v11);
  return v12;
}

int xmlTextWriterWriteAttributeNS( xmlTextWriterPtr writer, const xmlChar *prefix, const xmlChar *name, const xmlChar *namespaceURI, const xmlChar *content)
{
  int result = -1;
  if (writer && name && *name)
  {
    int started = xmlTextWriterStartAttributeNS(writer, prefix, name, namespaceURI);
    if (started < 0) {
      return -1;
    }
    int v9 = started;
    int v10 = xmlTextWriterWriteString(writer, content);
    if (v10 < 0)
    {
      return -1;
    }

    else
    {
      int v11 = v10;
      int v12 = xmlTextWriterEndAttribute(writer);
      if (v12 >= 0) {
        return v11 + v9 + v12;
      }
      else {
        return -1;
      }
    }
  }

  return result;
}

int xmlTextWriterWriteFormatElement(xmlTextWriterPtr writer, const xmlChar *name, const char *format, ...)
{
  return xmlTextWriterWriteVFormatElement(writer, name, format, va);
}

int xmlTextWriterWriteVFormatElement( xmlTextWriterPtr writer, const xmlChar *name, const char *format, va_list argptr)
{
  if (!writer) {
    return -1;
  }
  int v6 = xmlTextWriterVSprintf(format, argptr);
  if (!v6) {
    return -1;
  }
  int v7 = v6;
  int v8 = xmlTextWriterWriteElement(writer, name, (const xmlChar *)v6);
  xmlFree(v7);
  return v8;
}

int xmlTextWriterWriteElement(xmlTextWriterPtr writer, const xmlChar *name, const xmlChar *content)
{
  int result = xmlTextWriterStartElement(writer, name);
  if (result != -1)
  {
    int v6 = result;
    if (content)
    {
      int result = xmlTextWriterWriteString(writer, content);
      if (result == -1) {
        return result;
      }
      v6 += result;
    }

    int v7 = xmlTextWriterEndElement(writer);
    if (v7 == -1) {
      return -1;
    }
    else {
      return v7 + v6;
    }
  }

  return result;
}

int xmlTextWriterWriteFormatElementNS( xmlTextWriterPtr writer, const xmlChar *prefix, const xmlChar *name, const xmlChar *namespaceURI, const char *format, ...)
{
  return xmlTextWriterWriteVFormatElementNS(writer, prefix, name, namespaceURI, format, va);
}

int xmlTextWriterWriteVFormatElementNS( xmlTextWriterPtr writer, const xmlChar *prefix, const xmlChar *name, const xmlChar *namespaceURI, const char *format, va_list argptr)
{
  if (!writer) {
    return -1;
  }
  int v10 = xmlTextWriterVSprintf(format, argptr);
  if (!v10) {
    return -1;
  }
  int v11 = v10;
  int v12 = xmlTextWriterWriteElementNS(writer, prefix, name, namespaceURI, (const xmlChar *)v10);
  xmlFree(v11);
  return v12;
}

int xmlTextWriterWriteElementNS( xmlTextWriterPtr writer, const xmlChar *prefix, const xmlChar *name, const xmlChar *namespaceURI, const xmlChar *content)
{
  int result = -1;
  if (writer && name && *name)
  {
    int started = xmlTextWriterStartElementNS(writer, prefix, name, namespaceURI);
    if (started < 0)
    {
      return -1;
    }

    else
    {
      int v9 = started;
      int result = xmlTextWriterWriteString(writer, content);
      if (result != -1)
      {
        int v10 = result;
        int v11 = xmlTextWriterEndElement(writer);
        if (v11 == -1) {
          return -1;
        }
        else {
          return v10 + v9 + v11;
        }
      }
    }
  }

  return result;
}

int xmlTextWriterStartPI(xmlTextWriterPtr writer, const xmlChar *target)
{
  int result = -1;
  if (writer && target && *target)
  {
    if (xmlStrcasecmp(target, (const xmlChar *)"xml"))
    {
      int v5 = xmlListFront(*((xmlListPtr *)writer + 1));
      if (v5 && (Data = xmlLinkGetData(v5)) != 0LL)
      {
        int v7 = Data;
        int v8 = Data[2];
        int result = -1;
        int v9 = 0;
        int v10 = 0;
        switch(v8)
        {
          case 0:
          case 3:
          case 7:
            break;
          case 1:
            goto LABEL_23;
          case 2:
            int v9 = xmlTextWriterEndAttribute(writer);
            if (v9 < 0) {
              return -1;
            }
LABEL_23:
            int v20 = xmlTextWriterOutputNSDecl((uint64_t)writer);
            if (v20 < 0) {
              return -1;
            }
            int v21 = v20;
            int v22 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, ">");
            if (v22 < 0) {
              return -1;
            }
            int v10 = v21 + v9 + v22;
            v7[2] = 3;
            break;
          case 4:
          case 5:
            int v11 = "xmlTextWriterStartPI : nested PI!\n";
            goto LABEL_16;
          default:
            return result;
        }
      }

      else
      {
        int v10 = 0;
      }

      int v12 = xmlMalloc(0x10uLL);
      if (v12)
      {
        int v13 = v12;
        int v14 = xmlStrdup(target);
        *(void *)int v13 = v14;
        if (v14)
        {
          v13[2] = 4;
          xmlListPushFront(*((xmlListPtr *)writer + 1), v13);
          int v15 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "<?");
          if ((v15 & 0x80000000) == 0)
          {
            int v16 = v15;
            int v17 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, *(const char **)v13);
            if ((v17 & 0x80000000) == 0) {
              return v16 + v10 + v17;
            }
          }
        }

        else
        {
          xmlWriterErrMsg((uint64_t)writer, 2, (char)"xmlTextWriterStartPI : out of memory!\n");
          xmlFree(v13);
        }

        return -1;
      }

      int v11 = "xmlTextWriterStartPI : out of memory!\n";
      xmlTextWriterPtr v18 = writer;
      int v19 = 2;
    }

    else
    {
      int v11 = "xmlTextWriterStartPI : target name [Xx][Mm][Ll] is reserved for xml standardization!\n";
LABEL_16:
      xmlTextWriterPtr v18 = writer;
      int v19 = 1;
    }

    xmlWriterErrMsg((uint64_t)v18, v19, (char)v11);
    return -1;
  }

  return result;
}

int xmlTextWriterWriteFormatPI(xmlTextWriterPtr writer, const xmlChar *target, const char *format, ...)
{
  return xmlTextWriterWriteVFormatPI(writer, target, format, va);
}

int xmlTextWriterWriteVFormatPI( xmlTextWriterPtr writer, const xmlChar *target, const char *format, va_list argptr)
{
  if (!writer) {
    return -1;
  }
  int v6 = xmlTextWriterVSprintf(format, argptr);
  if (!v6) {
    return -1;
  }
  int v7 = v6;
  int v8 = xmlTextWriterWritePI(writer, target, (const xmlChar *)v6);
  xmlFree(v7);
  return v8;
}

int xmlTextWriterWritePI(xmlTextWriterPtr writer, const xmlChar *target, const xmlChar *content)
{
  int result = xmlTextWriterStartPI(writer, target);
  if (result != -1)
  {
    int v6 = result;
    if (content)
    {
      int result = xmlTextWriterWriteString(writer, content);
      if (result == -1) {
        return result;
      }
      v6 += result;
    }

    int v7 = xmlTextWriterEndPI(writer);
    if (v7 == -1) {
      return -1;
    }
    else {
      return v7 + v6;
    }
  }

  return result;
}

int xmlTextWriterStartCDATA(xmlTextWriterPtr writer)
{
  if (!writer) {
    return -1;
  }
  int v2 = xmlListFront(*((xmlListPtr *)writer + 1));
  if (v2 && (Data = xmlLinkGetData(v2)) != 0LL)
  {
    int v4 = Data;
    int v5 = 0;
    int v6 = 0;
    switch(Data[2])
    {
      case 0:
      case 3:
      case 4:
      case 5:
        goto LABEL_10;
      case 1:
        break;
      case 2:
        int v5 = xmlTextWriterEndAttribute(writer);
        if (v5 < 0) {
          return -1;
        }
        break;
      case 6:
        int v13 = "xmlTextWriterStartCDATA : CDATA not allowed in this context!\n";
        xmlTextWriterPtr v14 = writer;
        int v15 = 1;
        goto LABEL_16;
      default:
        return -1;
    }

    int v7 = xmlTextWriterOutputNSDecl((uint64_t)writer);
    if (v7 < 0) {
      return -1;
    }
    int v8 = v7;
    int v9 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, ">");
    if (v9 < 0) {
      return -1;
    }
    int v6 = v8 + v5 + v9;
    v4[2] = 3;
  }

  else
  {
    int v6 = 0;
  }

int xmlTextWriterWriteFormatCDATA(xmlTextWriterPtr writer, const char *format, ...)
{
  return xmlTextWriterWriteVFormatCDATA(writer, format, va);
}

int xmlTextWriterWriteVFormatCDATA(xmlTextWriterPtr writer, const char *format, va_list argptr)
{
  if (!writer) {
    return -1;
  }
  int v4 = xmlTextWriterVSprintf(format, argptr);
  if (!v4) {
    return -1;
  }
  int v5 = v4;
  int v6 = xmlTextWriterWriteCDATA(writer, (const xmlChar *)v4);
  xmlFree(v5);
  return v6;
}

int xmlTextWriterWriteCDATA(xmlTextWriterPtr writer, const xmlChar *content)
{
  int result = xmlTextWriterStartCDATA(writer);
  if (result != -1)
  {
    int v5 = result;
    if (content)
    {
      int result = xmlTextWriterWriteString(writer, content);
      if (result == -1) {
        return result;
      }
      v5 += result;
    }

    int v6 = xmlTextWriterEndCDATA(writer);
    if (v6 == -1) {
      return -1;
    }
    else {
      return v6 + v5;
    }
  }

  return result;
}

int xmlTextWriterStartDTD( xmlTextWriterPtr writer, const xmlChar *name, const xmlChar *pubid, const xmlChar *sysid)
{
  int v4 = -1;
  if (writer && name && *name)
  {
    int v9 = xmlListFront(*((xmlListPtr *)writer + 1));
    if (v9 && xmlLinkGetData(v9))
    {
      int v10 = "xmlTextWriterStartDTD : DTD allowed only in prolog!\n";
      xmlTextWriterPtr v11 = writer;
      int v12 = 1;
LABEL_24:
      xmlWriterErrMsg((uint64_t)v11, v12, (char)v10);
      return v4;
    }

    int v13 = xmlMalloc(0x10uLL);
    if (!v13)
    {
      int v10 = "xmlTextWriterStartDTD : out of memory!\n";
      xmlTextWriterPtr v11 = writer;
      int v12 = 2;
      goto LABEL_24;
    }

    xmlTextWriterPtr v14 = v13;
    int v15 = xmlStrdup(name);
    *(void *)xmlTextWriterPtr v14 = v15;
    if (v15)
    {
      v14[2] = 7;
      xmlListPushFront(*((xmlListPtr *)writer + 1), v14);
      int v16 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "<!DOCTYPE ");
      if ((v16 & 0x80000000) == 0)
      {
        int v17 = v16;
        int v18 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, (const char *)name);
        if ((v18 & 0x80000000) == 0)
        {
          int v4 = v18 + v17;
          if (!pubid)
          {
            if (!sysid) {
              return v4;
            }
            if (*((_DWORD *)writer + 7)) {
              int v33 = "\n";
            }
            else {
              int v33 = " ";
            }
            int v34 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, v33);
            if (v34 < 0) {
              return -1;
            }
            int v35 = v34;
            int v31 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "SYSTEM ");
            if (v31 < 0) {
              return -1;
            }
            int v36 = v35 + v4;
            goto LABEL_39;
          }

          if (sysid)
          {
            if (*((_DWORD *)writer + 7)) {
              int v19 = "\n";
            }
            else {
              int v19 = " ";
            }
            int v20 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, v19);
            if ((v20 & 0x80000000) == 0)
            {
              int v21 = v20;
              int v22 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "PUBLIC ");
              if ((v22 & 0x80000000) == 0)
              {
                int v23 = v22;
                int v24 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
                if ((v24 & 0x80000000) == 0)
                {
                  int v25 = v24;
                  int v26 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, (const char *)pubid);
                  if ((v26 & 0x80000000) == 0)
                  {
                    int v27 = v26;
                    int v28 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
                    if ((v28 & 0x80000000) == 0)
                    {
                      int v29 = v28;
                      int v30 = *(xmlOutputBuffer **)writer;
                      int v31 = *((_DWORD *)writer + 7)
                          ? xmlOutputBufferWriteString(v30, "\n       ")
                          : xmlOutputBufferWrite(v30, 1, " ");
                      if ((v31 & 0x80000000) == 0)
                      {
                        int v36 = v21 + v4 + v23 + v25 + v27 + v29;
LABEL_39:
                        int v37 = v36 + v31;
                        int v38 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
                        if ((v38 & 0x80000000) == 0)
                        {
                          int v39 = v38;
                          int v40 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, (const char *)sysid);
                          if ((v40 & 0x80000000) == 0)
                          {
                            int v41 = v40;
                            int v42 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
                            if ((v42 & 0x80000000) == 0) {
                              return v39 + v37 + v41 + v42;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }

          else
          {
            xmlWriterErrMsg((uint64_t)writer, 1, (char)"xmlTextWriterStartDTD : system identifier needed!\n");
          }
        }
      }
    }

    else
    {
      xmlWriterErrMsg((uint64_t)writer, 2, (char)"xmlTextWriterStartDTD : out of memory!\n");
      xmlFree(v14);
    }

    return -1;
  }

  return v4;
}

int xmlTextWriterEndDTDElement(xmlTextWriterPtr writer)
{
  if (!writer) {
    return -1;
  }
  int v2 = xmlListFront(*((xmlListPtr *)writer + 1));
  if (!v2) {
    return -1;
  }
  Data = xmlLinkGetData(v2);
  if (!Data) {
    return -1;
  }
  int v4 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, ">");
  if (v4 < 0) {
    return -1;
  }
  int v5 = v4;
  if (*((_DWORD *)writer + 7))
  {
    int v6 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "\n");
    if ((v6 & 0x80000000) == 0)
    {
      v5 += v6;
      goto LABEL_9;
    }

    return -1;
  }

int xmlTextWriterEndDTDAttlist(xmlTextWriterPtr writer)
{
  if (!writer) {
    return -1;
  }
  int v2 = xmlListFront(*((xmlListPtr *)writer + 1));
  if (!v2) {
    return -1;
  }
  Data = xmlLinkGetData(v2);
  if (!Data) {
    return -1;
  }
  int v4 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, ">");
  if (v4 < 0) {
    return -1;
  }
  int v5 = v4;
  if (*((_DWORD *)writer + 7))
  {
    int v6 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "\n");
    if ((v6 & 0x80000000) == 0)
    {
      v5 += v6;
      goto LABEL_9;
    }

    return -1;
  }

int xmlTextWriterEndDTDEntity(xmlTextWriterPtr writer)
{
  if (!writer) {
    return -1;
  }
  int v2 = xmlListFront(*((xmlListPtr *)writer + 1));
  if (!v2) {
    return -1;
  }
  Data = xmlLinkGetData(v2);
  if (!Data) {
    return -1;
  }
  int v4 = Data[2];
  if (v4 == 13 || v4 == 15)
  {
    int v6 = 0;
  }

  else
  {
    if (v4 != 14) {
      return -1;
    }
    int v6 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
    if (v6 < 0) {
      return -1;
    }
  }

  int v7 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, ">");
  if (v7 < 0) {
    return -1;
  }
  int v8 = v7 + v6;
  if (*((_DWORD *)writer + 7))
  {
    int v9 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "\n");
    if ((v9 & 0x80000000) == 0)
    {
      v8 += v9;
      goto LABEL_16;
    }

    return -1;
  }

int xmlTextWriterWriteFormatDTD( xmlTextWriterPtr writer, const xmlChar *name, const xmlChar *pubid, const xmlChar *sysid, const char *format, ...)
{
  return xmlTextWriterWriteVFormatDTD(writer, name, pubid, sysid, format, va);
}

int xmlTextWriterWriteVFormatDTD( xmlTextWriterPtr writer, const xmlChar *name, const xmlChar *pubid, const xmlChar *sysid, const char *format, va_list argptr)
{
  if (!writer) {
    return -1;
  }
  int v10 = xmlTextWriterVSprintf(format, argptr);
  if (!v10) {
    return -1;
  }
  xmlTextWriterPtr v11 = v10;
  int v12 = xmlTextWriterWriteDTD(writer, name, pubid, sysid, (const xmlChar *)v10);
  xmlFree(v11);
  return v12;
}

int xmlTextWriterWriteDTD( xmlTextWriterPtr writer, const xmlChar *name, const xmlChar *pubid, const xmlChar *sysid, const xmlChar *subset)
{
  int result = xmlTextWriterStartDTD(writer, name, pubid, sysid);
  if (result != -1)
  {
    int v8 = result;
    if (subset)
    {
      int result = xmlTextWriterWriteString(writer, subset);
      if (result == -1) {
        return result;
      }
      v8 += result;
    }

    int v9 = xmlTextWriterEndDTD(writer);
    if (v9 == -1) {
      return -1;
    }
    else {
      return v9 + v8;
    }
  }

  return result;
}

int xmlTextWriterStartDTDElement(xmlTextWriterPtr writer, const xmlChar *name)
{
  int result = -1;
  if (writer && name && *name)
  {
    int v5 = xmlListFront(*((xmlListPtr *)writer + 1));
    if (v5)
    {
      Data = xmlLinkGetData(v5);
      if (!Data || ((int v7 = Data, (v8 = Data[2]) != 0) ? (v9 = v8 == 8) : (v9 = 1), v9))
      {
        int v10 = 0;
      }

      else
      {
        if (v8 != 7) {
          return -1;
        }
        int v18 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, " [");
        if (v18 < 0) {
          return -1;
        }
        int v10 = v18;
        if (*((_DWORD *)writer + 7))
        {
          int v19 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "\n");
          if (v19 < 0) {
            return -1;
          }
          v10 += v19;
        }

        v7[2] = 8;
      }

      xmlTextWriterPtr v11 = xmlMalloc(0x10uLL);
      if (v11)
      {
        int v12 = v11;
        int v13 = xmlStrdup(name);
        *(void *)int v12 = v13;
        if (v13)
        {
          v12[2] = 9;
          xmlListPushFront(*((xmlListPtr *)writer + 1), v12);
          if (!*((_DWORD *)writer + 7))
          {
LABEL_17:
            int v15 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "<!ELEMENT ");
            if ((v15 & 0x80000000) == 0)
            {
              int v16 = v15;
              int v17 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, (const char *)name);
              if ((v17 & 0x80000000) == 0) {
                return v16 + v10 + v17;
              }
            }

            return -1;
          }

          int v14 = xmlTextWriterWriteIndent((uint64_t)writer);
          if ((v14 & 0x80000000) == 0)
          {
            v10 += v14;
            goto LABEL_17;
          }
        }

        else
        {
          xmlWriterErrMsg((uint64_t)writer, 2, (char)"xmlTextWriterStartDTDElement : out of memory!\n");
          xmlFree(v12);
        }
      }

      else
      {
        xmlWriterErrMsg((uint64_t)writer, 2, (char)"xmlTextWriterStartDTDElement : out of memory!\n");
      }
    }

    return -1;
  }

  return result;
}

int xmlTextWriterWriteFormatDTDElement(xmlTextWriterPtr writer, const xmlChar *name, const char *format, ...)
{
  return xmlTextWriterWriteVFormatDTDElement(writer, name, format, va);
}

int xmlTextWriterWriteVFormatDTDElement( xmlTextWriterPtr writer, const xmlChar *name, const char *format, va_list argptr)
{
  if (!writer) {
    return -1;
  }
  int v6 = xmlTextWriterVSprintf(format, argptr);
  if (!v6) {
    return -1;
  }
  int v7 = v6;
  int v8 = xmlTextWriterWriteDTDElement(writer, name, (const xmlChar *)v6);
  xmlFree(v7);
  return v8;
}

int xmlTextWriterWriteDTDElement(xmlTextWriterPtr writer, const xmlChar *name, const xmlChar *content)
{
  if (!content) {
    return -1;
  }
  int result = xmlTextWriterStartDTDElement(writer, name);
  if (result != -1)
  {
    int v6 = result;
    int result = xmlTextWriterWriteString(writer, content);
    if (result != -1)
    {
      int v7 = result;
      int v8 = xmlTextWriterEndDTDElement(writer);
      if (v8 == -1) {
        return -1;
      }
      else {
        return v7 + v6 + v8;
      }
    }
  }

  return result;
}

int xmlTextWriterStartDTDAttlist(xmlTextWriterPtr writer, const xmlChar *name)
{
  int result = -1;
  if (writer && name && *name)
  {
    int v5 = xmlListFront(*((xmlListPtr *)writer + 1));
    if (v5)
    {
      Data = xmlLinkGetData(v5);
      if (!Data || ((int v7 = Data, (v8 = Data[2]) != 0) ? (v9 = v8 == 8) : (v9 = 1), v9))
      {
        int v10 = 0;
      }

      else
      {
        if (v8 != 7) {
          return -1;
        }
        int v18 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, " [");
        if (v18 < 0) {
          return -1;
        }
        int v10 = v18;
        if (*((_DWORD *)writer + 7))
        {
          int v19 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "\n");
          if (v19 < 0) {
            return -1;
          }
          v10 += v19;
        }

        v7[2] = 8;
      }

      xmlTextWriterPtr v11 = xmlMalloc(0x10uLL);
      if (v11)
      {
        int v12 = v11;
        int v13 = xmlStrdup(name);
        *(void *)int v12 = v13;
        if (v13)
        {
          v12[2] = 11;
          xmlListPushFront(*((xmlListPtr *)writer + 1), v12);
          if (!*((_DWORD *)writer + 7))
          {
LABEL_17:
            int v15 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "<!ATTLIST ");
            if ((v15 & 0x80000000) == 0)
            {
              int v16 = v15;
              int v17 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, (const char *)name);
              if ((v17 & 0x80000000) == 0) {
                return v16 + v10 + v17;
              }
            }

            return -1;
          }

          int v14 = xmlTextWriterWriteIndent((uint64_t)writer);
          if ((v14 & 0x80000000) == 0)
          {
            v10 += v14;
            goto LABEL_17;
          }
        }

        else
        {
          xmlWriterErrMsg((uint64_t)writer, 2, (char)"xmlTextWriterStartDTDAttlist : out of memory!\n");
          xmlFree(v12);
        }
      }

      else
      {
        xmlWriterErrMsg((uint64_t)writer, 2, (char)"xmlTextWriterStartDTDAttlist : out of memory!\n");
      }
    }

    return -1;
  }

  return result;
}

int xmlTextWriterWriteFormatDTDAttlist(xmlTextWriterPtr writer, const xmlChar *name, const char *format, ...)
{
  return xmlTextWriterWriteVFormatDTDAttlist(writer, name, format, va);
}

int xmlTextWriterWriteVFormatDTDAttlist( xmlTextWriterPtr writer, const xmlChar *name, const char *format, va_list argptr)
{
  if (!writer) {
    return -1;
  }
  int v6 = xmlTextWriterVSprintf(format, argptr);
  if (!v6) {
    return -1;
  }
  int v7 = v6;
  int v8 = xmlTextWriterWriteDTDAttlist(writer, name, (const xmlChar *)v6);
  xmlFree(v7);
  return v8;
}

int xmlTextWriterWriteDTDAttlist(xmlTextWriterPtr writer, const xmlChar *name, const xmlChar *content)
{
  if (!content) {
    return -1;
  }
  int result = xmlTextWriterStartDTDAttlist(writer, name);
  if (result != -1)
  {
    int v6 = result;
    int result = xmlTextWriterWriteString(writer, content);
    if (result != -1)
    {
      int v7 = result;
      int v8 = xmlTextWriterEndDTDAttlist(writer);
      if (v8 == -1) {
        return -1;
      }
      else {
        return v7 + v6 + v8;
      }
    }
  }

  return result;
}

int xmlTextWriterStartDTDEntity(xmlTextWriterPtr writer, int pe, const xmlChar *name)
{
  int result = -1;
  if (writer && name && *name)
  {
    int v7 = xmlListFront(*((xmlListPtr *)writer + 1));
    if (v7
      && (Data = xmlLinkGetData(v7)) != 0LL
      && ((v9 = Data, (v10 = Data[2]) != 0) ? (BOOL v11 = v10 == 8) : (BOOL v11 = 1), !v11))
    {
      if (v10 != 7) {
        return -1;
      }
      int v22 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, " [");
      if (v22 < 0) {
        return -1;
      }
      int v12 = v22;
      if (*((_DWORD *)writer + 7))
      {
        int v23 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "\n");
        if (v23 < 0) {
          return -1;
        }
        v12 += v23;
      }

      v9[2] = 8;
    }

    else
    {
      int v12 = 0;
    }

    int v13 = xmlMalloc(0x10uLL);
    if (!v13)
    {
      xmlWriterErrMsg((uint64_t)writer, 2, (char)"xmlTextWriterStartDTDElement : out of memory!\n");
      return -1;
    }

    int v14 = v13;
    int v15 = xmlStrdup(name);
    *(void *)int v14 = v15;
    if (!v15)
    {
      xmlWriterErrMsg((uint64_t)writer, 2, (char)"xmlTextWriterStartDTDElement : out of memory!\n");
      xmlFree(v14);
      return -1;
    }

    if (pe) {
      int v16 = 15;
    }
    else {
      int v16 = 13;
    }
    v14[2] = v16;
    xmlListPushFront(*((xmlListPtr *)writer + 1), v14);
    if (*((_DWORD *)writer + 7))
    {
      int v17 = xmlTextWriterWriteIndent((uint64_t)writer);
      if (v17 < 0) {
        return -1;
      }
      v12 += v17;
    }

    int v18 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "<!ENTITY ");
    if ((v18 & 0x80000000) == 0)
    {
      int v19 = v18 + v12;
      if (!pe) {
        goto LABEL_24;
      }
      int v20 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "% ");
      if ((v20 & 0x80000000) == 0)
      {
        v19 += v20;
LABEL_24:
        int v21 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, (const char *)name);
        if (v21 >= 0) {
          return v21 + v19;
        }
        else {
          return -1;
        }
      }
    }

    return -1;
  }

  return result;
}

int xmlTextWriterWriteFormatDTDInternalEntity( xmlTextWriterPtr writer, int pe, const xmlChar *name, const char *format, ...)
{
  return xmlTextWriterWriteVFormatDTDInternalEntity(writer, pe, name, format, va);
}

int xmlTextWriterWriteVFormatDTDInternalEntity( xmlTextWriterPtr writer, int pe, const xmlChar *name, const char *format, va_list argptr)
{
  if (!writer) {
    return -1;
  }
  int v8 = xmlTextWriterVSprintf(format, argptr);
  if (!v8) {
    return -1;
  }
  BOOL v9 = v8;
  int v10 = xmlTextWriterWriteDTDInternalEntity(writer, pe, name, (const xmlChar *)v8);
  xmlFree(v9);
  return v10;
}

int xmlTextWriterWriteDTDInternalEntity( xmlTextWriterPtr writer, int pe, const xmlChar *name, const xmlChar *content)
{
  if (!name) {
    return -1;
  }
  int result = -1;
  if (content)
  {
    if (*name)
    {
      int result = xmlTextWriterStartDTDEntity(writer, pe, name);
      if (result != -1)
      {
        int v7 = result;
        int result = xmlTextWriterWriteString(writer, content);
        if (result != -1)
        {
          int v8 = result;
          int v9 = xmlTextWriterEndDTDEntity(writer);
          if (v9 == -1) {
            return -1;
          }
          else {
            return v8 + v7 + v9;
          }
        }
      }
    }
  }

  return result;
}

int xmlTextWriterWriteDTDEntity( xmlTextWriterPtr writer, int pe, const xmlChar *name, const xmlChar *pubid, const xmlChar *sysid, const xmlChar *ndataid, const xmlChar *content)
{
  if (!sysid && !pubid && !content || pe && ndataid) {
    return -1;
  }
  return xmlTextWriterWriteDTDInternalEntity(writer, pe, name, content);
}

int xmlTextWriterWriteDTDExternalEntity( xmlTextWriterPtr writer, int pe, const xmlChar *name, const xmlChar *pubid, const xmlChar *sysid, const xmlChar *ndataid)
{
  if (pe && ndataid) {
    return -1;
  }
  int result = xmlTextWriterStartDTDEntity(writer, pe, name);
  if (result == -1) {
    return result;
  }
  int v11 = result;
  int v12 = xmlTextWriterWriteDTDExternalEntityContents(writer, pubid, sysid, ndataid);
  if (v12 < 0) {
    return -1;
  }
  int v13 = v12;
  int v14 = xmlTextWriterEndDTDEntity(writer);
  if (v14 == -1) {
    return -1;
  }
  else {
    return v13 + v11 + v14;
  }
}

int xmlTextWriterWriteDTDExternalEntityContents( xmlTextWriterPtr writer, const xmlChar *pubid, const xmlChar *sysid, const xmlChar *ndataid)
{
  if (!writer)
  {
    __xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  0LL,  0x19u,  1,  3,  0LL,  0,  0LL,  0LL,  0LL,  0,  0,  "%s",  (char)"xmlTextWriterWriteDTDExternalEntityContents: xmlTextWriterPtr invalid!\n");
    goto LABEL_11;
  }

  int v8 = xmlListFront(*((xmlListPtr *)writer + 1));
  if (!v8) {
    goto LABEL_9;
  }
  Data = xmlLinkGetData(v8);
  if (!Data)
  {
LABEL_11:
    LODWORD(sysid) = -1;
    return (int)sysid;
  }

  int v10 = Data[2];
  if (v10 == 13) {
    goto LABEL_13;
  }
  if (v10 != 15)
  {
LABEL_9:
    int v11 = "xmlTextWriterWriteDTDExternalEntityContents: you must call xmlTextWriterStartDTDEntity before the call to this function!\n";
    goto LABEL_10;
  }

  if (ndataid)
  {
    int v11 = "xmlTextWriterWriteDTDExternalEntityContents: notation not allowed with parameter entities!\n";
LABEL_10:
    xmlWriterErrMsg((uint64_t)writer, 1, (char)v11);
    goto LABEL_11;
  }

int xmlTextWriterWriteDTDNotation( xmlTextWriterPtr writer, const xmlChar *name, const xmlChar *pubid, const xmlChar *sysid)
{
  int result = -1;
  if (writer && name && *name)
  {
    int v9 = xmlListFront(*((xmlListPtr *)writer + 1));
    if (!v9) {
      return -1;
    }
    Data = xmlLinkGetData(v9);
    if (!Data || (v11 = Data, int v12 = Data[2], v12 == 8))
    {
      int v14 = 0;
    }

    else
    {
      if (v12 != 7) {
        return -1;
      }
      int v13 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, " [");
      if (v13 < 0) {
        return -1;
      }
      int v14 = v13;
      if (*((_DWORD *)writer + 7))
      {
        int v15 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "\n");
        if (v15 < 0) {
          return -1;
        }
        v14 += v15;
      }

      v11[2] = 8;
    }

    if (*((_DWORD *)writer + 7))
    {
      int v16 = xmlTextWriterWriteIndent((uint64_t)writer);
      if (v16 < 0) {
        return -1;
      }
      v14 += v16;
    }

    int v17 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "<!NOTATION ");
    if (v17 < 0) {
      return -1;
    }
    int v18 = v17;
    int v19 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, (const char *)name);
    if (v19 < 0) {
      return -1;
    }
    int v20 = v18 + v14 + v19;
    if (pubid)
    {
      int v21 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, " PUBLIC ");
      if (v21 < 0) {
        return -1;
      }
      int v22 = v21;
      int v23 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
      if (v23 < 0) {
        return -1;
      }
      int v24 = v23;
      int v25 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, (const char *)pubid);
      if (v25 < 0) {
        return -1;
      }
      int v26 = v25;
      int v27 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
      if (v27 < 0) {
        return -1;
      }
      v20 += v22 + v24 + v26 + v27;
      if (!sysid)
      {
LABEL_34:
        int v36 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, ">");
        if (v36 >= 0) {
          return v36 + v20;
        }
        else {
          return -1;
        }
      }
    }

    else
    {
      if (!sysid) {
        goto LABEL_34;
      }
      int v28 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, " SYSTEM");
      if (v28 < 0) {
        return -1;
      }
      v20 += v28;
    }

    int v29 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, " ");
    if ((v29 & 0x80000000) == 0)
    {
      int v30 = v29;
      int v31 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
      if ((v31 & 0x80000000) == 0)
      {
        int v32 = v31;
        int v33 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, (const char *)sysid);
        if ((v33 & 0x80000000) == 0)
        {
          int v34 = v33;
          int v35 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
          if ((v35 & 0x80000000) == 0)
          {
            v20 += v30 + v32 + v34 + v35;
            goto LABEL_34;
          }
        }
      }
    }

    return -1;
  }

  return result;
}

int xmlTextWriterSetIndent(xmlTextWriterPtr writer, int indent)
{
  int result = -1;
  if (writer)
  {
    if ((indent & 0x80000000) == 0)
    {
      int result = 0;
      *((_DWORD *)writer + 7) = indent;
      *((_DWORD *)writer + 8) = 1;
    }
  }

  return result;
}

int xmlTextWriterSetIndentString(xmlTextWriterPtr writer, const xmlChar *str)
{
  int result = -1;
  if (writer && str)
  {
    int v5 = (void *)*((void *)writer + 5);
    if (v5) {
      xmlFree(v5);
    }
    int v6 = xmlStrdup(str);
    *((void *)writer + 5) = v6;
    if (v6) {
      return 0;
    }
    else {
      return -1;
    }
  }

  return result;
}

int xmlTextWriterSetQuoteChar(xmlTextWriterPtr writer, xmlChar quotechar)
{
  int result = 0;
  *((_BYTE *)writer + 48) = quotechar;
  return result;
}

uint64_t libxml_domnode_binary_insertion_sort_start(uint64_t result, unint64_t a2, unint64_t a3)
{
  if (a2 < a3)
  {
    unint64_t v4 = a2;
    int v5 = (uint64_t *)result;
    unint64_t v6 = a2 - 2;
    int v7 = (void *)(result + 8 * a2);
    do
    {
      unint64_t v8 = v4 - 1;
      uint64_t v9 = v5[v4 - 1];
      uint64_t v10 = v5[v4];
      int result = xmlXPathCmpNodesExt(v9, v10);
      if ((_DWORD)result != -2 && (result & 0x80000000) != 0)
      {
        int result = xmlXPathCmpNodesExt(v10, *v5);
        if ((_DWORD)result == -2 || (int)result > 0)
        {
          unint64_t v8 = 0LL;
          goto LABEL_25;
        }

        int result = xmlXPathCmpNodesExt(v10, v9);
        if ((_DWORD)result == -2 || (result & 0x80000000) == 0)
        {
          unint64_t v12 = 0LL;
          unint64_t v13 = v8 >> 1;
          unint64_t v14 = v4 - 1;
          while (1)
          {
            int result = xmlXPathCmpNodesExt(v10, v5[v13]);
            if ((_DWORD)result != -2 && (int)result < 1)
            {
              unint64_t v16 = v14 - v13;
              if (v14 - v13 <= 1)
              {
                ++v13;
LABEL_23:
                BOOL v17 = v8 >= v13;
                unint64_t v8 = v13;
                if (!v17)
                {
LABEL_28:
                  v5[v8] = v10;
                  goto LABEL_29;
                }

                break;
              }

              unint64_t v12 = v13;
              unint64_t v13 = v14;
            }

            else
            {
              unint64_t v16 = v13 - v12;
              if (v13 - v12 < 2) {
                goto LABEL_23;
              }
            }

            unint64_t v14 = v13;
            unint64_t v13 = v12 + (v16 >> 1);
          }
        }

uint64_t libxml_domnode_tim_sort(uint64_t result, unint64_t a2)
{
  uint64_t v32 = result;
  uint64_t v39 = *MEMORY[0x1895F89C0];
  unint64_t v33 = 0LL;
  unint64_t v34 = 0LL;
  if (a2 >= 2)
  {
    unint64_t v2 = a2;
    if (a2 <= 0x3F) {
      return libxml_domnode_binary_insertion_sort_start(result, 1uLL, a2);
    }
    bzero(v36, 0x800uLL);
    char v3 = 58 - __clz(v2);
    int v4 = (v2 & ~(-1LL << v3)) != 0 ? (v2 >> v3) + 1 : v2 >> v3;
    unint64_t v5 = v4;
    v35[0] = 0LL;
    v35[1] = 0LL;
    int result = PUSH_NEXT(v32, v2, (uint64_t)v35, v4, (uint64_t)v36, &v34, &v33);
    if ((_DWORD)result)
    {
      int result = PUSH_NEXT(v32, v2, (uint64_t)v35, v5, (uint64_t)v36, &v34, &v33);
      if ((_DWORD)result)
      {
        int result = PUSH_NEXT(v32, v2, (uint64_t)v35, v5, (uint64_t)v36, &v34, &v33);
        if ((_DWORD)result)
        {
          unint64_t v28 = v5;
          unint64_t v29 = v2;
          while (1)
          {
            while (1)
            {
              int v6 = v34;
LABEL_13:
              int result = PUSH_NEXT(v32, v2, (uint64_t)v35, v5, (uint64_t)v36, &v34, &v33);
              if (!(_DWORD)result) {
                return result;
              }
            }

            if ((_DWORD)v34 == 2)
            {
              if (v37[0] > v38) {
                goto LABEL_13;
              }
            }

            else
            {
              unint64_t v7 = v37[2 * (v34 - 2)];
              unint64_t v8 = v37[2 * (v34 - 1)];
            }

            uint64_t v10 = v34;
            if (v34 == 2LL)
            {
LABEL_38:
              unint64_t v26 = v38 + v37[0];
              unint64_t v2 = v29;
              if (v37[0] <= v38 || v26 == v29)
              {
                libxml_domnode_tim_sort_merge(v32, (uint64_t)v36, 2, (uint64_t)v35);
                v37[0] = v26;
                int v27 = 1;
              }

              else
              {
                int v27 = 2;
              }
            }

            else
            {
              uint64_t v11 = 0LL;
              int v31 = v34 - 2;
              int v30 = v34 - 1;
              uint64_t v12 = v34;
              while (1)
              {
                unint64_t v13 = &v36[16 * (v10 - 3 + v11)];
                unint64_t v16 = *((void *)v13 + 1);
                unint64_t v14 = v13 + 8;
                unint64_t v15 = v16;
                BOOL v17 = &v36[16 * (v31 + v11)];
                unint64_t v20 = *((void *)v17 + 1);
                unint64_t v19 = (unint64_t *)(v17 + 8);
                unint64_t v18 = v20;
                BOOL v21 = (unint64_t)(v10 + v11) >= 4 && v37[2 * (v10 - 4 + v11)] <= v18 + v15;
                int v22 = &v36[16 * (v10 + v11 - 1)];
                unint64_t v23 = *((void *)v22 + 1);
                unint64_t v24 = v23 + v18;
                if (v15 <= v23 + v18) {
                  BOOL v21 = 1;
                }
                if (!v21 && v18 > v23) {
                  break;
                }
                if (v21 && v18 > v23)
                {
                  libxml_domnode_tim_sort_merge(v32, (uint64_t)v36, v30 + v11, (uint64_t)v35);
                  void *v14 = v18 + v15;
                  *(_OWORD *)&v36[16 * (v31 + v11)] = *(_OWORD *)v22;
                }

                else
                {
                  libxml_domnode_tim_sort_merge(v32, (uint64_t)v36, v6, (uint64_t)v35);
                  *unint64_t v19 = v24;
                }

                --v11;
                int v6 = --v12;
                if (v10 + v11 == 2) {
                  goto LABEL_38;
                }
              }

              int v27 = v10 + v11;
              unint64_t v2 = v29;
            }

            unint64_t v34 = v27;
            unint64_t v5 = v28;
          }
        }
      }
    }
  }

  return result;
}

uint64_t PUSH_NEXT( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t *a6, unint64_t *a7)
{
  unint64_t v7 = a7;
  unint64_t v12 = *a7;
  unint64_t v13 = a2 - *a7;
  if (v13 == 1)
  {
    unint64_t v14 = 1LL;
    goto LABEL_30;
  }

  unint64_t v43 = a2 - *a7;
  unint64_t v44 = a4;
  uint64_t v16 = a2 - 2;
  if (a2 - 2 > v12)
  {
    unint64_t v17 = v12 + 2;
    unint64_t v18 = (uint64_t *)(a1 + 8 * v12);
    uint64_t v19 = v18[1];
    int v20 = xmlXPathCmpNodesExt(*v18, v19);
    unint64_t v21 = a2 - 1;
    if (v20 != -2 && v20 < 0)
    {
      if (v17 != v21)
      {
        unint64_t v40 = a2 - 1;
        int v41 = v7;
        uint64_t v22 = a2 - 3;
        unint64_t v23 = v12;
        while (1)
        {
          uint64_t v24 = *(void *)(a1 + 16 + 8 * v23);
          int v25 = xmlXPathCmpNodesExt(v19, v24);
          if (v25 == -2 || (v25 & 0x80000000) == 0) {
            break;
          }
          ++v23;
          uint64_t v19 = v24;
          if (v22 == v23)
          {
            unint64_t v21 = v40;
            unint64_t v7 = v41;
            goto LABEL_22;
          }
        }

        unint64_t v21 = v23 + 2;
        unint64_t v7 = v41;
      }

void xmlXPathInit(void)
{
  xmlXPathNAN = NAN;
  xmlXPathPINF = INFINITY;
  xmlXPathNINF = -INFINITY;
}

int xmlXPathIsNaN(double val)
{
  return 0;
}

int xmlXPathIsInf(double val)
{
  double v1 = fabs(val);
  if (val > 0.0) {
    int v2 = 1;
  }
  else {
    int v2 = -1;
  }
  if (v1 == INFINITY) {
    return v2;
  }
  else {
    return 0;
  }
}

xmlChar *xmlXPathErrMemory(uint64_t a1, const char *a2)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t v4 = a1 + 232;
    xmlResetError((xmlErrorPtr)(a1 + 232));
    if (a2)
    {
      uint64_t v21 = 0LL;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      __int128 v11 = 0u;
      __int128 v12 = 0u;
      *(_OWORD *)xmlParserInputBufferPtr buf = 0u;
      __int128 v10 = 0u;
      xmlStrPrintf(buf, 200, "Memory allocation failed : %s\n", a2);
      unint64_t v5 = buf;
    }

    else
    {
      unint64_t v5 = (xmlChar *)"Memory allocation failed\n";
    }

    uint64_t result = xmlStrdup(v5);
    *(void *)(a1 + 24xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = result;
    *(void *)(a1 + 232) = 0x20000000CLL;
    unint64_t v7 = *(uint64_t (**)(void, uint64_t))(a1 + 224);
    if (v7) {
      return (xmlChar *)v7(*(void *)(a1 + 216), v4);
    }
  }

  else if (a2)
  {
    return (xmlChar *)__xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  0LL,  0xCu,  2,  3,  0LL,  0,  (const xmlChar *)a2,  0LL,  0LL,  0,  (unsigned __int128)0LL >> 96,  "Memory allocation failed : %s\n",  (char)a2);
  }

  else
  {
    return (xmlChar *)__xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  0LL,  0xCu,  2,  3,  0LL,  0,  0LL,  0LL,  0LL,  0,  0,  "Memory allocation failed\n",  v8);
  }

  return result;
}

xmlChar *xmlXPathPErrMemory(uint64_t a1, const char *a2)
{
  if (a1)
  {
    *(_DWORD *)(a1 + 16) = 15;
    a1 = *(void *)(a1 + 24);
  }

  return xmlXPathErrMemory(a1, a2);
}

void xmlXPathErr(xmlXPathParserContextPtr ctxt, int error)
{
  else {
    int v2 = error;
  }
  if (!ctxt)
  {
    int v12 = v2 + 1200;
    __int128 v15 = (&xmlXPathErrorMessages)[v2];
    *(_OWORD *)cur = 0u;
    *(_OWORD *)__int128 v14 = 0u;
LABEL_10:
    uint64_t debugNode = 0LL;
    goto LABEL_12;
  }

  ctxt->error = v2;
  xmlXPathContextPtr context = ctxt->context;
  if (!context)
  {
    int v12 = v2 + 1200;
    *(void *)__int128 v14 = 0LL;
    __int128 v15 = (&xmlXPathErrorMessages)[v2];
    *(void *)&v14[2] = LODWORD(ctxt->cur) - ctxt->base;
    *(_OWORD *)cur = (unint64_t)ctxt->base;
    goto LABEL_10;
  }

  xmlResetError(&context->lastError);
  xmlXPathContextPtr v5 = ctxt->context;
  v5->lastError.domaiuint64_t n = 12;
  v5->lastError.code = v2 + 1200;
  v5->lastError.level = XML_ERR_ERROR;
  int v6 = xmlStrdup(ctxt->base);
  xmlXPathContextPtr v7 = ctxt->context;
  v7->lastError.str1 = (char *)v6;
  int base = ctxt->base;
  unsigned int v9 = LODWORD(ctxt->cur) - (_DWORD)base;
  v7->lastError.int1 = v9;
  uint64_t debugNode = (uint64_t)v7->debugNode;
  v7->lastError.xmlNodePtr node = (void *)debugNode;
  __int128 v11 = (void (*)(void *, xmlError *))v7->error;
  if (v11)
  {
    v11(v7->userData, &v7->lastError);
    return;
  }

  *(void *)__int128 v14 = 0LL;
  __int128 v15 = (&xmlXPathErrorMessages)[v2];
  *(void *)&v14[2] = v9;
  *(_OWORD *)cur = (unint64_t)base;
  int v12 = v2 + 1200;
LABEL_12:
  __xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  debugNode,  0xCu,  v12,  2,  0LL,  0,  cur[0],  cur[1],  *(xmlChar **)v14,  v14[2],  v14[3],  "%s",  (char)v15);
}

void xmlXPatherror(xmlXPathParserContextPtr ctxt, const char *file, int line, int no)
{
}

void xmlXPathFreeCompExpr(xmlXPathCompExprPtr comp)
{
  if (comp)
  {
    int v2 = (xmlDict *)*((void *)comp + 4);
    int v3 = *(_DWORD *)comp;
    if (v2)
    {
      if (v3 >= 1)
      {
        uint64_t v4 = 0LL;
        for (uint64_t i = 0LL; i < v3; ++i)
        {
          uint64_t v6 = *((void *)comp + 1);
          xmlXPathContextPtr v7 = *(xmlXPathObject **)(v6 + v4 + 24);
          if (v7 && *(_DWORD *)(v6 + v4) == 11)
          {
            xmlXPathFreeObject(v7);
            int v3 = *(_DWORD *)comp;
          }

          v4 += 56LL;
        }

        int v2 = (xmlDict *)*((void *)comp + 4);
      }

      xmlDictFree(v2);
    }

    else if (v3 >= 1)
    {
      uint64_t v8 = 0LL;
      uint64_t v9 = 0LL;
      do
      {
        uint64_t v10 = *((void *)comp + 1);
        uint64_t v11 = v10 + v8;
        int v12 = *(xmlXPathObject **)(v10 + v8 + 24);
        if (v12)
        {
          if (*(_DWORD *)(v10 + v8) == 11) {
            xmlXPathFreeObject(v12);
          }
          else {
            xmlFree(v12);
          }
        }

        __int128 v13 = *(void **)(v11 + 32);
        if (v13) {
          xmlFree(v13);
        }
        ++v9;
        v8 += 56LL;
      }

      while (v9 < *(int *)comp);
    }

    __int128 v14 = (void *)*((void *)comp + 1);
    if (v14) {
      xmlFree(v14);
    }
    __int128 v15 = (xmlPattern *)*((void *)comp + 5);
    if (v15) {
      xmlFreePatternList(v15);
    }
    __int128 v16 = (void *)*((void *)comp + 3);
    if (v16) {
      xmlFree(v16);
    }
    xmlFree(comp);
  }

void xmlXPathFreeObject(xmlXPathObjectPtr obj)
{
  if (obj)
  {
    switch(obj->type)
    {
      case XPATH_NODESET:
      case XPATH_XSLT_TREE:
        xmlNodeSetPtr nodesetval = obj->nodesetval;
        if (nodesetval) {
          xmlXPathFreeNodeSet(nodesetval);
        }
        break;
      case XPATH_STRING:
        stringxmlSchemaValPtr val = obj->stringval;
        if (stringval) {
          xmlFree(stringval);
        }
        break;
      case XPATH_LOCATIONSET:
        user = (xmlLocationSet *)obj->user;
        if (user) {
          xmlXPtrFreeLocationSet(user);
        }
        break;
      default:
        break;
    }

    xmlFree(obj);
  }

void xmlXPathDebugDumpObject(FILE *output, xmlXPathObjectPtr cur, int depth)
{
  uint64_t v56 = *MEMORY[0x1895F89C0];
  if (output)
  {
    int v41 = 0;
    memset(__b, 0, sizeof(__b));
    if (depth < 1)
    {
      unsigned int v7 = 0;
    }

    else
    {
      else {
        int v6 = depth - 1;
      }
      memset(__b, 32, (2 * v6 + 2));
      unsigned int v7 = v6 + 1;
    }

    uint64_t v8 = 2LL * v7;
    *((_BYTE *)__b + (v8 & 0xFFFFFFFE) + xmlSAX2InitDefaultSAXHandler(&hdlr, 1) = 0;
    *((_BYTE *)__b + v8) = 0;
    fputs((const char *)__b, output);
    if (cur)
    {
      switch(cur->type)
      {
        case XPATH_UNDEFINED:
          uint64_t v9 = "Object is uninitialized\n";
          size_t v10 = 24LL;
          goto LABEL_13;
        case XPATH_NODESET:
          fwrite("Object is a Node Set :\n", 0x17uLL, 1uLL, output);
          xmlNodeSetPtr nodesetval = cur->nodesetval;
          int v55 = 0;
          __int128 v53 = 0u;
          __int128 v54 = 0u;
          __int128 v51 = 0u;
          __int128 v52 = 0u;
          *(_OWORD *)int v49 = 0u;
          __int128 v50 = 0u;
          unsigned int v12 = depth - 1;
          if (depth < 1)
          {
            unsigned int v13 = 0;
          }

          else
          {
            if (v12 >= 0x18) {
              unsigned int v12 = 24;
            }
            unsigned int v13 = 2 * v12 + 2;
            memset(v49, 32, v13);
          }

          v49[v13 | 1LL] = 0;
          v49[v13] = 0;
          if (!nodesetval)
          {
            fputs(v49, output);
            unint64_t v36 = "NodeSet is NULL !\n";
            size_t v37 = 18LL;
            goto LABEL_78;
          }

          fprintf(output, "Set contains %d nodes:\n", nodesetval->nodeNr);
          if (nodesetval->nodeNr >= 1)
          {
            uint64_t v28 = 0LL;
            int v29 = depth + 1;
            do
            {
              fputs(v49, output);
              fprintf(output, "%d", v28 + 1);
              xmlXPathDebugDumpNode(output, (uint64_t)nodesetval->nodeTab[v28++], v29);
            }

            while (v28 < nodesetval->nodeNr);
          }

          return;
        case XPATH_BOOLEAN:
          fwrite("Object is a Boolean : ", 0x16uLL, 1uLL, output);
          if (cur->BOOLval)
          {
            uint64_t v9 = "true\n";
            size_t v10 = 5LL;
          }

          else
          {
            uint64_t v9 = "false\n";
            size_t v10 = 6LL;
          }

          goto LABEL_13;
        case XPATH_NUMBER:
          floatxmlSchemaValPtr val = cur->floatval;
          double v15 = fabs(floatval);
          else {
            int v16 = -1;
          }
          if (v15 != INFINITY) {
            int v16 = 0;
          }
          if (v16 == -1)
          {
            uint64_t v9 = "Object is a number : -Infinity\n";
            size_t v10 = 31LL;
            goto LABEL_13;
          }

          if (v16 == 1)
          {
            uint64_t v9 = "Object is a number : Infinity\n";
            size_t v10 = 30LL;
            goto LABEL_13;
          }

          if (floatval == 0.0)
          {
            uint64_t v9 = "Object is a number : 0\n";
            goto LABEL_12;
          }

          fprintf(output, "Object is a number : %0g\n", cur->floatval);
          return;
        case XPATH_STRING:
          fwrite("Object is a string : ", 0x15uLL, 1uLL, output);
          xmlDebugDumpString(output, cur->stringval);
          goto LABEL_52;
        case XPATH_POINT:
          fprintf(output, "Object is a point : index %d in node", cur->index);
          user = cur->user;
          int v18 = depth + 1;
          __int128 v19 = output;
          goto LABEL_51;
        case XPATH_RANGE:
          user2 = cur->user2;
          if (!user2 || user2 == cur->user && cur->index == cur->index2)
          {
            fwrite("Object is a collapsed range :\n", 0x1EuLL, 1uLL, output);
            fputs((const char *)__b, output);
            if ((cur->index & 0x80000000) == 0) {
              fprintf(output, "index %d in ", cur->index);
            }
            fwrite("node\n", 5uLL, 1uLL, output);
            xmlXPathDebugDumpNode(output, (uint64_t)cur->user, depth + 1);
          }

          else
          {
            fwrite("Object is a range :\n", 0x14uLL, 1uLL, output);
            fputs((const char *)__b, output);
            fwrite("From ", 5uLL, 1uLL, output);
            if ((cur->index & 0x80000000) == 0) {
              fprintf(output, "index %d in ", cur->index);
            }
            fwrite("node\n", 5uLL, 1uLL, output);
            int v27 = depth + 1;
            xmlXPathDebugDumpNode(output, (uint64_t)cur->user, v27);
            fputs((const char *)__b, output);
            fwrite("To ", 3uLL, 1uLL, output);
            if ((cur->index2 & 0x80000000) == 0) {
              fprintf(output, "index %d in ", cur->index2);
            }
            fwrite("node\n", 5uLL, 1uLL, output);
            user = cur->user2;
            __int128 v19 = output;
            int v18 = v27;
LABEL_51:
            xmlXPathDebugDumpNode(v19, (uint64_t)user, v18);
LABEL_52:
            fputc(10, output);
          }

          return;
        case XPATH_LOCATIONSET:
          fwrite("Object is a Location Set:\n", 0x1AuLL, 1uLL, output);
          uint64_t v21 = (int *)cur->user;
          int v55 = 0;
          __int128 v53 = 0u;
          __int128 v54 = 0u;
          __int128 v51 = 0u;
          __int128 v52 = 0u;
          *(_OWORD *)int v49 = 0u;
          __int128 v50 = 0u;
          unsigned int v22 = depth - 1;
          if (depth < 1)
          {
            unsigned int v23 = 0;
          }

          else
          {
            if (v22 >= 0x18) {
              unsigned int v22 = 24;
            }
            unsigned int v23 = 2 * v22 + 2;
            memset(v49, 32, v23);
          }

          v49[v23 | 1LL] = 0;
          v49[v23] = 0;
          if (!v21)
          {
            fputs(v49, output);
            unint64_t v36 = "LocationSet is NULL !\n";
            size_t v37 = 22LL;
            goto LABEL_78;
          }

          if (*v21 >= 1)
          {
            uint64_t v30 = 0LL;
            int v31 = depth + 1;
            do
            {
              fputs(v49, output);
              fprintf(output, "%d : ", v30 + 1);
              xmlXPathDebugDumpObject(output, *(xmlXPathObjectPtr *)(*((void *)v21 + 1) + 8 * v30++), v31);
            }

            while (v30 < *v21);
          }

          return;
        case XPATH_USERS:
          uint64_t v9 = "Object is user defined\n";
          goto LABEL_12;
        case XPATH_XSLT_TREE:
          fwrite("Object is an XSLT value tree :\n", 0x1FuLL, 1uLL, output);
          xmlNodeSetPtr v24 = cur->nodesetval;
          int v48 = 0;
          __int128 v46 = 0u;
          __int128 v47 = 0u;
          __int128 v44 = 0u;
          __int128 v45 = 0u;
          *(_OWORD *)int v42 = 0u;
          __int128 v43 = 0u;
          if (depth < 1)
          {
            unsigned int v26 = 0;
          }

          else
          {
            else {
              int v25 = depth - 1;
            }
            memset(v42, 32, (2 * v25 + 2));
            unsigned int v26 = v25 + 1;
          }

          uint64_t v32 = 2LL * v26;
          v42[(v32 & 0xFFFFFFFE) + 1] = 0;
          v42[v32] = 0;
          if (v24 && v24->nodeNr && *v24->nodeTab)
          {
            fputs(v42, output);
            fprintf(output, "%d", v26 + 1);
            childreuint64_t n = (*v24->nodeTab)->children;
            int v55 = 0;
            __int128 v53 = 0u;
            __int128 v54 = 0u;
            __int128 v51 = 0u;
            __int128 v52 = 0u;
            *(_OWORD *)int v49 = 0u;
            __int128 v50 = 0u;
            if (depth < 0)
            {
              unsigned int v35 = 0;
            }

            else
            {
              else {
                int v34 = depth;
              }
              unsigned int v35 = 2 * v34 + 2;
              memset(v49, 32, v35);
            }

            v49[v35 | 1LL] = 0;
            v49[v35] = 0;
            if (children)
            {
              int v38 = depth + 1;
              do
              {
                xmlNodePtr next = children->next;
                xmlDebugDumpOneNode(output, children, v38);
                childreuint64_t n = next;
              }

              while (next);
              return;
            }

            fputs(v49, output);
            unint64_t v36 = "Node is NULL !\n";
            size_t v37 = 15LL;
          }

          else
          {
            fputs(v42, output);
            unint64_t v36 = "Value Tree is NULL !\n";
            size_t v37 = 21LL;
          }

void xmlXPathDebugDumpNode(FILE *a1, uint64_t a2, int a3)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  int v12 = 0;
  memset(v11, 0, sizeof(v11));
  unsigned int v6 = a3 - 1;
  if (a3 < 1)
  {
    unsigned int v7 = 0;
  }

  else
  {
    if (v6 >= 0x18) {
      unsigned int v6 = 24;
    }
    unsigned int v7 = 2 * v6 + 2;
    memset(v11, 32, v7);
  }

  *((_BYTE *)v11 + (v7 | 1LL)) = 0;
  *((_BYTE *)v11 + v7) = 0;
  if (!a2)
  {
    fputs((const char *)v11, a1);
    uint64_t v9 = "Node is NULL !\n";
    size_t v10 = 15LL;
    goto LABEL_12;
  }

  int v8 = *(_DWORD *)(a2 + 8);
  if (v8 == 2)
  {
    xmlDebugDumpAttr(a1, (xmlAttrPtr)a2, a3);
  }

  else
  {
    if (v8 == 13 || v8 == 9)
    {
      fputs((const char *)v11, a1);
      uint64_t v9 = " /\n";
      size_t v10 = 3LL;
LABEL_12:
      fwrite(v9, v10, 1uLL, a1);
      return;
    }

    xmlDebugDumpOneNode(a1, (xmlNodePtr)a2, a3);
  }

void xmlXPathDebugDumpCompExpr(FILE *output, xmlXPathCompExprPtr comp, int depth)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  if (output && comp)
  {
    int v9 = 0;
    memset(__b, 0, sizeof(__b));
    unsigned int v6 = depth - 1;
    if (depth < 1)
    {
      unsigned int v7 = 0;
    }

    else
    {
      if (v6 >= 0x18) {
        unsigned int v6 = 24;
      }
      unsigned int v7 = 2 * v6 + 2;
      memset(__b, 32, v7);
    }

    *((_BYTE *)__b + (v7 | 1LL)) = 0;
    *((_BYTE *)__b + v7) = 0;
    fputs((const char *)__b, output);
    if (*((void *)comp + 5))
    {
      fwrite("Streaming Expression\n", 0x15uLL, 1uLL, output);
    }

    else
    {
      fprintf(output, "Compiled Expression : %d elements\n", *(_DWORD *)comp);
      xmlXPathDebugDumpStepOp(output, (uint64_t)comp, *((void *)comp + 1) + 56LL * *((int *)comp + 4), depth + 1);
    }
  }

void xmlXPathDebugDumpStepOp(FILE *a1, uint64_t a2, uint64_t a3, int a4)
{
  while (1)
  {
    int v4 = a4;
    uint64_t v5 = a3;
    uint64_t v6 = a2;
    unsigned int v7 = a1;
    uint64_t v31 = *MEMORY[0x1895F89C0];
    int v30 = 0;
    memset(__b, 0, sizeof(__b));
    if (a4 < 1)
    {
      unsigned int v9 = 0;
    }

    else
    {
      int v8 = (a4 - 1) >= 0x18 ? 24 : a4 - 1;
      memset(__b, 32, (2 * v8 + 2));
      unsigned int v9 = v8 + 1;
    }

    uint64_t v10 = 2LL * v9;
    *((_BYTE *)__b + (v10 & 0xFFFFFFFE) + xmlSAX2InitDefaultSAXHandler(&hdlr, 1) = 0;
    *((_BYTE *)__b + v1xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = 0;
    fputs((const char *)__b, v7);
    if (!v5) {
      break;
    }
    switch(*(_DWORD *)v5)
    {
      case 0:
        uint64_t v11 = "END";
        goto LABEL_37;
      case 1:
        uint64_t v11 = "AND";
        goto LABEL_37;
      case 2:
        uint64_t v11 = "OR";
        size_t v12 = 2LL;
        goto LABEL_52;
      case 3:
        if (!*(_DWORD *)(v5 + 12))
        {
          uint64_t v11 = "EQUAL !=";
          goto LABEL_51;
        }

        uint64_t v11 = "EQUAL =";
LABEL_44:
        size_t v12 = 7LL;
        goto LABEL_52;
      case 4:
        if (*(_DWORD *)(v5 + 12)) {
          uint64_t v13 = "CMP <";
        }
        else {
          uint64_t v13 = "CMP >";
        }
        fwrite(v13, 5uLL, 1uLL, v7);
        if (!*(_DWORD *)(v5 + 16)) {
          fputc(61, v7);
        }
        goto LABEL_53;
      case 5:
        switch(*(_DWORD *)(v5 + 12))
        {
          case 0:
            uint64_t v11 = "PLUS -";
            goto LABEL_40;
          case 1:
            uint64_t v11 = "PLUS +";
            goto LABEL_40;
          case 2:
            uint64_t v11 = "PLUS unary -";
            size_t v12 = 12LL;
            goto LABEL_52;
          case 3:
            uint64_t v11 = "PLUS unary - -";
            size_t v12 = 14LL;
            goto LABEL_52;
          default:
            goto LABEL_53;
        }

        goto LABEL_53;
      case 6:
        int v14 = *(_DWORD *)(v5 + 12);
        if (v14 == 1)
        {
          uint64_t v11 = "MULT div";
LABEL_51:
          size_t v12 = 8LL;
          goto LABEL_52;
        }

        if (v14)
        {
          uint64_t v11 = "MULT mod";
          goto LABEL_51;
        }

        uint64_t v11 = "MULT *";
LABEL_40:
        size_t v12 = 6LL;
LABEL_52:
        fwrite(v11, v12, 1uLL, v7);
LABEL_53:
        fputc(10, v7);
LABEL_54:
        unsigned int v22 = *(_DWORD *)(v5 + 4);
        if ((v22 & 0x80000000) == 0) {
          xmlXPathDebugDumpStepOp(v7, v6, *(void *)(v6 + 8) + 56LL * v22, (v4 + 1));
        }
        unsigned int v23 = *(_DWORD *)(v5 + 8);
        if ((v23 & 0x80000000) != 0) {
          return;
        }
        a3 = *(void *)(v6 + 8) + 56LL * v23;
        a4 = v4 + 1;
        a1 = v7;
        a2 = v6;
        break;
      case 7:
        uint64_t v11 = "UNION";
        size_t v12 = 5LL;
        goto LABEL_52;
      case 8:
        uint64_t v11 = "ROOT";
        goto LABEL_42;
      case 9:
        uint64_t v11 = "NODE";
        goto LABEL_42;
      case 0xA:
        int v16 = *(_DWORD *)(v5 + 12);
        int v15 = *(_DWORD *)(v5 + 16);
        int v17 = *(_DWORD *)(v5 + 20);
        __int128 v19 = *(const char **)(v5 + 24);
        int v18 = *(const char **)(v5 + 32);
        fwrite("COLLECT ", 8uLL, 1uLL, v7);
        switch(v16)
        {
          case 1:
            __int128 v20 = " 'ancestors' ";
            goto LABEL_74;
          case 2:
            __int128 v20 = " 'ancestors-or-self' ";
            goto LABEL_76;
          case 3:
            __int128 v20 = " 'attributes' ";
            goto LABEL_66;
          case 4:
            __int128 v20 = " 'child' ";
            size_t v24 = 9LL;
            goto LABEL_78;
          case 5:
            __int128 v20 = " 'descendant' ";
LABEL_66:
            size_t v24 = 14LL;
            goto LABEL_78;
          case 6:
            __int128 v20 = " 'descendant-or-self' ";
            goto LABEL_70;
          case 7:
            __int128 v20 = " 'following' ";
            goto LABEL_74;
          case 8:
            __int128 v20 = " 'following-siblings' ";
LABEL_70:
            size_t v24 = 22LL;
            goto LABEL_78;
          case 9:
            __int128 v20 = " 'namespace' ";
            goto LABEL_74;
          case 10:
            __int128 v20 = " 'parent' ";
            size_t v24 = 10LL;
            goto LABEL_78;
          case 11:
            __int128 v20 = " 'preceding' ";
LABEL_74:
            size_t v24 = 13LL;
            goto LABEL_78;
          case 12:
            __int128 v20 = " 'preceding-sibling' ";
LABEL_76:
            size_t v24 = 21LL;
            goto LABEL_78;
          case 13:
            __int128 v20 = " 'self' ";
            size_t v24 = 8LL;
LABEL_78:
            fwrite(v20, v24, 1uLL, v7);
            break;
          default:
            break;
        }

        switch(v15)
        {
          case 0:
            int v25 = "'none' ";
            goto LABEL_86;
          case 1:
            int v25 = "'type' ";
            goto LABEL_86;
          case 2:
            int v25 = "'PI' ";
            size_t v26 = 5LL;
            goto LABEL_87;
          case 3:
            int v25 = "'all' ";
            size_t v26 = 6LL;
            goto LABEL_87;
          case 4:
            int v25 = "'namespace' ";
            size_t v26 = 12LL;
            goto LABEL_87;
          case 5:
            int v25 = "'name' ";
LABEL_86:
            size_t v26 = 7LL;
LABEL_87:
            fwrite(v25, v26, 1uLL, v7);
            break;
          default:
            break;
        }

        switch(v17)
        {
          case 0:
            int v27 = "'node' ";
            goto LABEL_91;
          case 3:
            int v27 = "'text' ";
LABEL_91:
            size_t v28 = 7LL;
            goto LABEL_94;
          case 7:
            int v27 = "'PI' ";
            size_t v28 = 5LL;
            goto LABEL_94;
          case 8:
            int v27 = "'comment' ";
            size_t v28 = 10LL;
LABEL_94:
            fwrite(v27, v28, 1uLL, v7);
            break;
          default:
            break;
        }

        if (v19) {
          fprintf(v7, "%s:", v19);
        }
        if (v18) {
          fputs(v18, v7);
        }
        goto LABEL_53;
      case 0xB:
        uint64_t v21 = *(xmlXPathObject **)(v5 + 24);
        fwrite("ELEM ", 5uLL, 1uLL, v7);
        xmlXPathDebugDumpObject(v7, v21, 0);
        goto LABEL_54;
      case 0xC:
        if (*(void *)(v5 + 32)) {
          fprintf(v7, "VARIABLE %s:%s");
        }
        else {
          fprintf(v7, "VARIABLE %s");
        }
        goto LABEL_53;
      case 0xD:
        if (*(void *)(v5 + 32)) {
          fprintf(v7, "FUNCTION %s:%s(%d args)");
        }
        else {
          fprintf(v7, "FUNCTION %s(%d args)");
        }
        goto LABEL_53;
      case 0xE:
        uint64_t v11 = "ARG";
LABEL_37:
        size_t v12 = 3LL;
        goto LABEL_52;
      case 0xF:
        uint64_t v11 = "PREDICATE";
        size_t v12 = 9LL;
        goto LABEL_52;
      case 0x10:
        uint64_t v11 = "FILTER";
        goto LABEL_40;
      case 0x11:
        uint64_t v11 = "SORT";
LABEL_42:
        size_t v12 = 4LL;
        goto LABEL_52;
      case 0x12:
        uint64_t v11 = "RANGETO";
        goto LABEL_44;
      default:
        fprintf(v7, "UNKNOWN %d\n", *(_DWORD *)v5);
        return;
    }
  }

  fwrite("Step is NULL\n", 0xDuLL, 1uLL, v7);
}

int xmlXPathContextSetCache(xmlXPathContextPtr ctxt, int active, int value, int options)
{
  if (!ctxt) {
    return -1;
  }
  cache = (char *)ctxt->cache;
  if (!active)
  {
    if (cache)
    {
      xmlXPathFreeCache((uint64_t *)cache);
      int v8 = 0;
      ctxt->cache = 0LL;
      return v8;
    }

    return 0;
  }

  if (!cache)
  {
    cache = (char *)xmlMalloc(0x40uLL);
    if (!cache)
    {
      xmlXPathErrMemory(0LL, "creating object cache\n");
      ctxt->cache = 0LL;
      return -1;
    }

    *((_OWORD *)cache + 2) = 0u;
    *((_OWORD *)cache + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
    *(_OWORD *)cache = 0u;
    *((_OWORD *)cache + xmlSAX2InitDefaultSAXHandler(&hdlr, 1) = 0u;
    *(void *)&__int128 v9 = 0x6400000064LL;
    *((void *)&v9 + xmlSAX2InitDefaultSAXHandler(&hdlr, 1) = 0x6400000064LL;
    *(_OWORD *)(cache + 4xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v9;
    *((_DWORD *)cache + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 100;
    ctxt->cache = cache;
    if (!options) {
      goto LABEL_12;
    }
    return 0;
  }

  if (options) {
    return 0;
  }
LABEL_12:
  int v8 = 0;
  if (value >= 0) {
    unsigned int v10 = value;
  }
  else {
    unsigned int v10 = 100;
  }
  *(int32x4_t *)(cache + 4xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = vdupq_n_s32(v10);
  *((_DWORD *)cache + 1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v10;
  return v8;
}

void xmlXPathFreeCache(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    xmlXPathCacheFreeObjectList(v2);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    xmlXPathCacheFreeObjectList(v3);
  }
  uint64_t v4 = a1[2];
  if (v4) {
    xmlXPathCacheFreeObjectList(v4);
  }
  uint64_t v5 = a1[3];
  if (v5) {
    xmlXPathCacheFreeObjectList(v5);
  }
  uint64_t v6 = a1[4];
  if (v6) {
    xmlXPathCacheFreeObjectList(v6);
  }
  xmlFree(a1);
}

xmlXPathObjectPtr valuePop(xmlXPathObjectPtr ctxt)
{
  if (ctxt)
  {
    int user = (int)ctxt->user;
    unsigned int v2 = user - 1;
    if (user < 1)
    {
      return 0LL;
    }

    else
    {
      LODWORD(ctxt->user) = v2;
      uint64_t v3 = *(void *)&ctxt->index;
      if (user == 1) {
        uint64_t v4 = 0LL;
      }
      else {
        uint64_t v4 = *(xmlChar **)(v3 + 8LL * (user - 2));
      }
      ctxt->stringxmlSchemaValPtr val = v4;
      xmlValidCtxt ctxt = *(xmlXPathObjectPtr *)(v3 + 8LL * v2);
      *(void *)(v3 + 8LL * v2) = 0LL;
    }
  }

  return ctxt;
}

int valuePush(xmlXPathParserContextPtr ctxt, xmlXPathObjectPtr value)
{
  if (!ctxt) {
    return -1;
  }
  if (value)
  {
    int result = ctxt->valueNr;
    uint64_t valueMax = ctxt->valueMax;
    if (result < (int)valueMax)
    {
      valueTab = ctxt->valueTab;
LABEL_11:
      valueTab[result] = value;
      ctxt->value = value;
      ctxt->valueNr = result + 1;
      return result;
    }

    if ((int)valueMax < 1000000)
    {
      __int128 v9 = (xmlXPathObjectPtr *)xmlRealloc(ctxt->valueTab, 16 * valueMax);
      if (v9)
      {
        valueTab = v9;
        int result = ctxt->valueNr;
        ctxt->valueMax *= 2;
        ctxt->valueTab = valueTab;
        goto LABEL_11;
      }

      ctxt->error = 15;
      xmlXPathContextPtr context = ctxt->context;
      int v8 = "pushing value\n";
    }

    else
    {
      ctxt->error = 15;
      xmlXPathContextPtr context = ctxt->context;
      int v8 = "XPath stack depth limit reached\n";
    }

    xmlXPathErrMemory((uint64_t)context, v8);
  }

  else
  {
    ctxt->error = 15;
  }

  return -1;
}

int xmlXPathPopBoolean(xmlXPathParserContextPtr ctxt)
{
  if (ctxt)
  {
    int valueNr = ctxt->valueNr;
    unsigned int v3 = valueNr - 1;
    if (valueNr >= 1
      && ((ctxt->valueNr = v3, valueTab = ctxt->valueTab, valueNr == 1) ? (uint64_t v6 = 0LL) : (uint64_t v6 = valueTab[valueNr - 2]),
          ctxt->value = v6,
          unsigned int v7 = valueTab[v3],
          valueTab[v3] = 0LL,
          v7))
    {
      if (v7->type == XPATH_BOOLEAN) {
        int BOOLval = v7->BOOLval;
      }
      else {
        int BOOLval = xmlXPathCastToBoolean(v7);
      }
      xmlXPathReleaseObject((uint64_t)ctxt->context, v7);
    }

    else
    {
      xmlXPathErr(ctxt, 10);
      int BOOLval = 0;
      ctxt->error = 10;
    }
  }

  else
  {
    xmlXPathErr(0LL, 10);
    return 0;
  }

  return BOOLval;
}

int xmlXPathCastToBoolean(xmlXPathObjectPtr val)
{
  if (val)
  {
    switch(val->type)
    {
      case XPATH_NODESET:
      case XPATH_XSLT_TREE:
        xmlNodeSetPtr nodesetval = val->nodesetval;
        if (!nodesetval) {
          goto LABEL_4;
        }
        BOOL v4 = nodesetval->nodeNr == 0;
        goto LABEL_13;
      case XPATH_BOOLEAN:
        LODWORD(val) = val->BOOLval;
        return (int)val;
      case XPATH_NUMBER:
        floatxmlSchemaValPtr val = val->floatval;
        LODWORD(val) = floatval > 0.0 || floatval < 0.0;
        return (int)val;
      case XPATH_STRING:
        xmlSchemaValPtr val = (xmlXPathObjectPtr)val->stringval;
        if (val)
        {
          BOOL v4 = xmlStrlen((const xmlChar *)val) == 0;
LABEL_13:
          LODWORD(val) = !v4;
        }

        return (int)val;
      case XPATH_POINT:
      case XPATH_RANGE:
      case XPATH_LOCATIONSET:
      case XPATH_USERS:
        xmlGenericErrorFunc v1 = *__xmlGenericError();
        unsigned int v2 = __xmlGenericErrorContext();
        v1(*v2, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpath.c", 5995);
        goto LABEL_4;
      default:
LABEL_4:
        LODWORD(val) = 0;
        break;
    }
  }

  return (int)val;
}

double xmlXPathReleaseObject(uint64_t a1, xmlXPathObjectPtr obj)
{
  if (obj)
  {
    if (a1 && (uint64_t v3 = *(void *)(a1 + 344)) != 0)
    {
      switch(obj->type)
      {
        case XPATH_NODESET:
        case XPATH_XSLT_TREE:
          xmlNodeSetPtr nodesetval = obj->nodesetval;
          if (!nodesetval) {
            goto LABEL_20;
          }
          if (nodesetval->nodeMax > 40) {
            goto LABEL_9;
          }
          uint64_t v5 = *(void **)v3;
          if (*(void *)v3)
          {
            if (*((_DWORD *)v5 + 2) >= *(_DWORD *)(v3 + 40))
            {
LABEL_9:
              xmlXPathFreeNodeSet(nodesetval);
              obj->xmlNodeSetPtr nodesetval = 0LL;
              goto LABEL_20;
            }
          }

          else
          {
            uint64_t v5 = xmlPointerListCreate();
            *(void *)uint64_t v3 = v5;
            if (!v5) {
              goto LABEL_44;
            }
          }

          unsigned int v7 = v5;
          goto LABEL_35;
        case XPATH_BOOLEAN:
          unsigned int v7 = *(void **)(v3 + 16);
          if (v7)
          {
            int v8 = *((_DWORD *)v7 + 2);
            int v9 = *(_DWORD *)(v3 + 48);
            goto LABEL_19;
          }

          unsigned int v7 = xmlPointerListCreate();
          *(void *)(v3 + 16) = v7;
          if (!v7) {
            goto LABEL_44;
          }
          goto LABEL_35;
        case XPATH_NUMBER:
          unsigned int v7 = *(void **)(v3 + 24);
          if (v7)
          {
            int v8 = *((_DWORD *)v7 + 2);
            int v9 = *(_DWORD *)(v3 + 52);
            goto LABEL_19;
          }

          unsigned int v7 = xmlPointerListCreate();
          *(void *)(v3 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v7;
          if (!v7) {
            goto LABEL_44;
          }
          goto LABEL_35;
        case XPATH_STRING:
          stringxmlSchemaValPtr val = obj->stringval;
          if (stringval) {
            xmlFree(stringval);
          }
          unsigned int v7 = *(void **)(v3 + 8);
          if (v7)
          {
            int v8 = *((_DWORD *)v7 + 2);
            int v9 = *(_DWORD *)(v3 + 44);
LABEL_19:
            if (v8 >= v9)
            {
LABEL_20:
              unsigned int v7 = *(void **)(v3 + 32);
              if (v7)
              {
                if (*((_DWORD *)v7 + 2) >= *(_DWORD *)(v3 + 56)) {
                  goto LABEL_44;
                }
              }

              else
              {
                unsigned int v7 = xmlPointerListCreate();
                *(void *)(v3 + 32) = v7;
                if (!v7) {
                  goto LABEL_44;
                }
              }
            }
          }

          else
          {
            unsigned int v7 = xmlPointerListCreate();
            *(void *)(v3 + 8) = v7;
            if (!v7) {
              goto LABEL_44;
            }
          }

double xmlXPathPopNumber(xmlXPathParserContextPtr ctxt)
{
  if (!ctxt)
  {
    xmlXPathErr(0LL, 10);
    return 0.0;
  }

  int valueNr = ctxt->valueNr;
  unsigned int v3 = valueNr - 1;
  if (valueNr < 1
    || ((ctxt->valueNr = v3, valueTab = ctxt->valueTab, valueNr == 1) ? (uint64_t v5 = 0LL) : (uint64_t v5 = valueTab[valueNr - 2]),
        ctxt->value = v5,
        xmlXPathObjectPtr v6 = valueTab[v3],
        valueTab[v3] = 0LL,
        !v6))
  {
    xmlXPathErr(ctxt, 10);
    ctxt->error = 10;
    return 0.0;
  }

  if (v6->type == XPATH_NUMBER) {
    floatxmlSchemaValPtr val = v6->floatval;
  }
  else {
    floatxmlSchemaValPtr val = xmlXPathCastToNumber(v6);
  }
  xmlXPathReleaseObject((uint64_t)ctxt->context, v6);
  return floatval;
}

double xmlXPathCastToNumber(xmlXPathObjectPtr val)
{
  if (!val) {
    return xmlXPathNAN;
  }
  switch(val->type)
  {
    case XPATH_UNDEFINED:
      return xmlXPathNAN;
    case XPATH_NODESET:
    case XPATH_XSLT_TREE:
      double result = xmlXPathCastNodeSetToNumber(val->nodesetval);
      break;
    case XPATH_BOOLEAN:
      double result = 1.0;
      if (!val->BOOLval) {
        double result = 0.0;
      }
      break;
    case XPATH_NUMBER:
      double result = val->floatval;
      break;
    case XPATH_STRING:
      double result = xmlXPathStringEvalNumber(val->stringval);
      break;
    case XPATH_POINT:
    case XPATH_RANGE:
    case XPATH_LOCATIONSET:
    case XPATH_USERS:
      xmlGenericErrorFunc v1 = *__xmlGenericError();
      unsigned int v2 = __xmlGenericErrorContext();
      v1(*v2, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpath.c", 5881);
      return xmlXPathNAN;
    default:
      double result = 0.0;
      break;
  }

  return result;
}

xmlChar *__cdecl xmlXPathPopString(xmlXPathParserContextPtr ctxt)
{
  if (ctxt)
  {
    int valueNr = ctxt->valueNr;
    unsigned int v3 = valueNr - 1;
    if (valueNr >= 1
      && ((ctxt->valueNr = v3, valueTab = ctxt->valueTab, valueNr == 1) ? (xmlXPathObjectPtr v6 = 0LL) : (xmlXPathObjectPtr v6 = valueTab[valueNr - 2]),
          ctxt->value = v6,
          unsigned int v7 = valueTab[v3],
          valueTab[v3] = 0LL,
          v7))
    {
      uint64_t v5 = xmlXPathCastToString(v7);
      if (v7->stringval == v5) {
        v7->stringxmlSchemaValPtr val = 0LL;
      }
      xmlXPathReleaseObject((uint64_t)ctxt->context, v7);
    }

    else
    {
      xmlXPathErr(ctxt, 10);
      uint64_t v5 = 0LL;
      ctxt->error = 10;
    }
  }

  else
  {
    xmlXPathErr(0LL, 10);
    return 0LL;
  }

  return v5;
}

xmlChar *__cdecl xmlXPathCastToString(xmlXPathObjectPtr val)
{
  if (val)
  {
    switch(val->type)
    {
      case XPATH_UNDEFINED:
        goto LABEL_4;
      case XPATH_NODESET:
      case XPATH_XSLT_TREE:
        double result = xmlXPathCastNodeSetToString(val->nodesetval);
        break;
      case XPATH_BOOLEAN:
        if (val->BOOLval) {
          stringxmlSchemaValPtr val = "true";
        }
        else {
          stringxmlSchemaValPtr val = "false";
        }
        return xmlStrdup((const xmlChar *)stringval);
      case XPATH_NUMBER:
        double result = xmlXPathCastNumberToString(val->floatval);
        break;
      case XPATH_STRING:
        stringxmlSchemaValPtr val = (char *)val->stringval;
        return xmlStrdup((const xmlChar *)stringval);
      case XPATH_POINT:
      case XPATH_RANGE:
      case XPATH_LOCATIONSET:
      case XPATH_USERS:
        xmlGenericErrorFunc v1 = *__xmlGenericError();
        unsigned int v2 = __xmlGenericErrorContext();
        v1(*v2, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpath.c", 5712);
        goto LABEL_4;
      default:
        double result = 0LL;
        break;
    }
  }

  else
  {
LABEL_4:
    stringxmlSchemaValPtr val = &byte_181A3ACBA;
    return xmlStrdup((const xmlChar *)stringval);
  }

  return result;
}

xmlNodeSetPtr xmlXPathPopNodeSet(xmlXPathParserContextPtr ctxt)
{
  if (!ctxt) {
    return 0LL;
  }
  xmlXPathObjectPtr value = ctxt->value;
  if (!value)
  {
    int v8 = 10;
    int v9 = 10;
LABEL_9:
    xmlXPathErr(ctxt, v9);
    xmlNodeSetPtr nodesetval = 0LL;
    ctxt->error = v8;
    return nodesetval;
  }

  if ((value->type | 8) != 9)
  {
    int v8 = 11;
    int v9 = 11;
    goto LABEL_9;
  }

  int valueNr = ctxt->valueNr;
  valueTab = ctxt->valueTab;
  int v5 = valueNr - 1;
  ctxt->int valueNr = valueNr - 1;
  if (valueNr == 1) {
    xmlXPathObjectPtr v6 = 0LL;
  }
  else {
    xmlXPathObjectPtr v6 = valueTab[valueNr - 2];
  }
  ctxt->xmlXPathObjectPtr value = v6;
  unsigned int v10 = valueTab[v5];
  valueTab[v5] = 0LL;
  xmlNodeSetPtr nodesetval = v10->nodesetval;
  v10->xmlNodeSetPtr nodesetval = 0LL;
  xmlXPathReleaseObject((uint64_t)ctxt->context, v10);
  return nodesetval;
}

void *__cdecl xmlXPathPopExternal(xmlXPathParserContextPtr ctxt)
{
  if (!ctxt)
  {
    xmlXPathErr(0LL, 10);
    return 0LL;
  }

  xmlXPathObjectPtr value = ctxt->value;
  if (!value)
  {
    int v8 = 10;
    int v9 = 10;
LABEL_9:
    xmlXPathErr(ctxt, v9);
    int user = 0LL;
    ctxt->error = v8;
    return user;
  }

  if (value->type != XPATH_USERS)
  {
    int v8 = 11;
    int v9 = 11;
    goto LABEL_9;
  }

  int valueNr = ctxt->valueNr;
  valueTab = ctxt->valueTab;
  int v5 = valueNr - 1;
  ctxt->int valueNr = valueNr - 1;
  if (valueNr == 1) {
    xmlXPathObjectPtr v6 = 0LL;
  }
  else {
    xmlXPathObjectPtr v6 = valueTab[valueNr - 2];
  }
  ctxt->xmlXPathObjectPtr value = v6;
  unsigned int v10 = valueTab[v5];
  valueTab[v5] = 0LL;
  int user = v10->user;
  v10->int user = 0LL;
  xmlXPathReleaseObject((uint64_t)ctxt->context, v10);
  return user;
}

uint64_t xmlXPathOrderDocElems(xmlDocPtr doc)
{
  if (!doc) {
    return -1LL;
  }
  childreuint64_t n = doc->children;
  if (children)
  {
    uint64_t v2 = 0LL;
    while (1)
    {
      do
      {
        xmlDocPtr v3 = (xmlDocPtr)children;
        if (children->type != XML_ELEMENT_NODE) {
          break;
        }
        uint64_t v4 = ~v2++;
        v3->intSubset = (_xmlDtd *)v4;
        childreuint64_t n = v3->children;
      }

      while (children);
      while (1)
      {
        childreuint64_t n = v3->next;
        if (children) {
          break;
        }
        xmlDocPtr v3 = (xmlDocPtr)v3->parent;
        if (v3) {
          BOOL v5 = v3 == doc;
        }
        else {
          BOOL v5 = 1;
        }
        if (v5) {
          return v2;
        }
      }
    }
  }

  return 0LL;
}

int xmlXPathCmpNodes(xmlNodePtr node1, xmlNodePtr node2)
{
  int result = -2;
  if (!node1 || !node2) {
    return result;
  }
  if (node1 == node2) {
    return 0;
  }
  xmlElementType type = node1->type;
  if (type == XML_ATTRIBUTE_NODE)
  {
    uint64_t parent = node1->parent;
    int v6 = 1;
  }

  else
  {
    int v6 = 0;
    uint64_t parent = node1;
    node1 = 0LL;
  }

  xmlElementType v7 = node2->type;
  if (v7 == XML_ATTRIBUTE_NODE)
  {
    int v8 = node2->parent;
    int v9 = 1;
  }

  else
  {
    int v9 = 0;
    int v8 = node2;
    node2 = 0LL;
  }

  if (parent == v8)
  {
    if (v6 != v9)
    {
      if (v7 == XML_ATTRIBUTE_NODE) {
        return 1;
      }
      else {
        return -1;
      }
    }

    if (type == XML_ATTRIBUTE_NODE)
    {
      int result = 1;
      while (1)
      {
        node2 = node2->prev;
        if (!node2) {
          break;
        }
        if (node2 == node1) {
          return result;
        }
      }

      return -1;
    }

    return 0;
  }

  xmlElementType v10 = parent->type;
  if (v10 == XML_NAMESPACE_DECL) {
    return 1;
  }
  xmlElementType v11 = v8->type;
  if (v11 == XML_NAMESPACE_DECL || parent == v8->prev) {
    return 1;
  }
  xmlNodePtr next = v8->next;
  if (parent == next) {
    return -1;
  }
  if (v10 == XML_ELEMENT_NODE && v11 == XML_ELEMENT_NODE)
  {
    xmlElementContentPtr content = parent->content;
    if (((unint64_t)content & 0x8000000000000000LL) != 0)
    {
      uint64_t v14 = v8->content;
      if (((unint64_t)v14 & 0x8000000000000000LL) != 0 && parent->doc == v8->doc)
      {
        LODWORD(next) = (uint64_t)v14 < (uint64_t)content ? 1 : -1;
        int result = (int)next;
        if (v14 != content) {
          return result;
        }
      }
    }
  }

  xmlNodePtr v15 = v8->parent;
  if (v15)
  {
    int v16 = 0;
    while (v15 != parent)
    {
      ++v16;
      xmlNodePtr v17 = v15;
      xmlNodePtr v15 = v15->parent;
      if (!v15) {
        goto LABEL_37;
      }
    }

    return 1;
  }

  int v16 = 0;
  xmlNodePtr v17 = v8;
LABEL_37:
  int v18 = parent->parent;
  if (v18)
  {
    int v19 = 0;
    while (v18 != v8)
    {
      __int128 v20 = v18;
      ++v19;
      int v18 = v18->parent;
      if (!v18) {
        goto LABEL_43;
      }
    }

    return -1;
  }

  int v19 = 0;
  __int128 v20 = parent;
LABEL_43:
  if (v17 != v20) {
    return -2;
  }
  if (v19 > v16)
  {
    do
    {
      --v19;
      uint64_t parent = parent->parent;
    }

    while (v19 > v16);
    int v19 = v16;
  }

  while (v16 > v19)
  {
    --v16;
    int v8 = v8->parent;
  }

  int result = -2;
  while (1)
  {
    uint64_t v21 = parent->parent;
    unsigned int v22 = v8->parent;
    if (v21 == v22) {
      break;
    }
    if (v21) {
      BOOL v23 = v22 == 0LL;
    }
    else {
      BOOL v23 = 1;
    }
    uint64_t parent = parent->parent;
    int v8 = v8->parent;
    if (v23) {
      return result;
    }
  }

  if (parent == v8->prev) {
    return 1;
  }
  if (parent == v8->next) {
    return -1;
  }
  if (parent->type != XML_ELEMENT_NODE) {
    goto LABEL_71;
  }
  if (v8->type != XML_ELEMENT_NODE) {
    goto LABEL_71;
  }
  size_t v24 = parent->content;
  int v25 = v8->content;
  int result = (uint64_t)v25 < (uint64_t)v24 ? 1 : (int)next;
  if (v25 == v24)
  {
LABEL_71:
    int result = 1;
    while (1)
    {
      uint64_t parent = parent->next;
      if (!parent) {
        break;
      }
      if (parent == v8) {
        return result;
      }
    }

    return -1;
  }

  return result;
}

void xmlXPathNodeSetSort(xmlNodeSetPtr set)
{
  if (set) {
    libxml_domnode_tim_sort((uint64_t)set->nodeTab, set->nodeNr);
  }
}

void xmlXPathNodeSetFreeNs(xmlNsPtr ns)
{
  if (ns && ns->type == XML_NAMESPACE_DECL && ns->next && ns->next->type != XML_NAMESPACE_DECL)
  {
    href = (xmlChar *)ns->href;
    if (href) {
      xmlFree(href);
    }
    prefix = (xmlChar *)ns->prefix;
    if (prefix) {
      xmlFree(prefix);
    }
    xmlFree(ns);
  }

xmlNodeSetPtr xmlXPathNodeSetCreate(xmlNodePtr val)
{
  uint64_t v2 = (xmlNodeSet *)xmlMalloc(0x10uLL);
  xmlDocPtr v3 = v2;
  if (v2)
  {
    *(void *)&v2->uint64_t nodeNr = 0LL;
    v2->nodeTab = 0LL;
    if (val)
    {
      uint64_t v4 = (xmlNodePtr *)xmlMalloc(0x50uLL);
      v3->nodeTab = v4;
      if (v4)
      {
        *((_OWORD *)v4 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
        *((_OWORD *)v4 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0u;
        *((_OWORD *)v4 + xmlSAX2InitDefaultSAXHandler(&hdlr, 1) = 0u;
        *((_OWORD *)v4 + 2) = 0u;
        *(_OWORD *)uint64_t v4 = 0u;
        v3->nodeMax = 10;
        if (val->type == XML_NAMESPACE_DECL)
        {
          BOOL v5 = (xmlNode *)xmlXPathNodeSetDupNs((uint64_t)val->_private, (uint64_t)val);
          nodeTab = v3->nodeTab;
          uint64_t nodeNr = v3->nodeNr;
          v3->uint64_t nodeNr = nodeNr + 1;
          nodeTab[nodeNr] = v5;
        }

        else
        {
          int v8 = v3->nodeTab;
          uint64_t v9 = v3->nodeNr;
          v3->uint64_t nodeNr = v9 + 1;
          v8[v9] = val;
        }
      }

      else
      {
        xmlXPathErrMemory(0LL, "creating nodeset\n");
        xmlFree(v3);
        return 0LL;
      }
    }
  }

  else
  {
    xmlXPathErrMemory(0LL, "creating nodeset\n");
  }

  return v3;
}

void *xmlXPathNodeSetDupNs(uint64_t a1, uint64_t a2)
{
  if (!a2 || *(_DWORD *)(a2 + 8) != 18) {
    return 0LL;
  }
  if (!a1 || *(_DWORD *)(a1 + 8) == 18) {
    return (void *)a2;
  }
  int v6 = xmlMalloc(0x30uLL);
  uint64_t v4 = v6;
  if (v6)
  {
    *((_OWORD *)v6 + xmlSAX2InitDefaultSAXHandler(&hdlr, 1) = 0u;
    *((_OWORD *)v6 + 2) = 0u;
    *(_OWORD *)int v6 = 0u;
    *((_DWORD *)v6 + 2) = 18;
    xmlElementType v7 = *(const xmlChar **)(a2 + 16);
    if (v7) {
      v4[2] = xmlStrdup(v7);
    }
    int v8 = *(const xmlChar **)(a2 + 24);
    if (v8) {
      v4[3] = xmlStrdup(v8);
    }
    *uint64_t v4 = a1;
  }

  else
  {
    xmlXPathErrMemory(0LL, "duplicating namespace\n");
  }

  return v4;
}

int xmlXPathNodeSetContains(xmlNodeSetPtr cur, xmlNodePtr val)
{
  int result = 0;
  if (cur && val)
  {
    if (val->type == XML_NAMESPACE_DECL)
    {
      int nodeNr = cur->nodeNr;
      if (cur->nodeNr >= 1)
      {
        uint64_t v6 = 0LL;
        do
        {
          xmlNodePtr v7 = cur->nodeTab[v6];
          if (v7->type == XML_NAMESPACE_DECL)
          {
            if (v7 == val) {
              return 1;
            }
            if (val->_private && v7->_private == val->_private)
            {
              if (xmlStrEqual((const xmlChar *)val->children, (const xmlChar *)v7->children)) {
                return 1;
              }
              int nodeNr = cur->nodeNr;
            }
          }

          ++v6;
        }

        while (v6 < nodeNr);
      }

      return 0;
    }

    uint64_t v8 = cur->nodeNr;
    for (uint64_t i = cur->nodeTab; *i != val; ++i)
    {
      if (!--v8) {
        return 0;
      }
    }

    return 1;
  }

  return result;
}

int xmlXPathNodeSetAddNs(xmlNodeSetPtr cur, xmlNodePtr node, xmlNsPtr ns)
{
  int result = -1;
  if (node && cur && ns && ns->type == XML_NAMESPACE_DECL && node->type == XML_ELEMENT_NODE)
  {
    int nodeNr = cur->nodeNr;
    if (cur->nodeNr >= 1)
    {
      for (uint64_t i = 0LL; i < nodeNr; ++i)
      {
        xmlNodePtr v9 = cur->nodeTab[i];
        if (v9 && v9->type == XML_NAMESPACE_DECL && v9->_private == node)
        {
          if (xmlStrEqual(ns->prefix, (const xmlChar *)v9->children)) {
            return 0;
          }
          int nodeNr = cur->nodeNr;
        }
      }
    }

    int nodeMax = cur->nodeMax;
    if (nodeMax)
    {
      if (nodeNr == nodeMax)
      {
        if (nodeNr >= 10000000)
        {
          xmlElementType v11 = "growing nodeset hit limit\n";
          xmlNodeSetPtr v12 = 0LL;
LABEL_24:
          xmlXPathErrMemory((uint64_t)v12, v11);
          return -1;
        }

        xmlNodeSetPtr v12 = (xmlNodePtr *)xmlRealloc(cur->nodeTab, 16LL * nodeNr);
        if (v12)
        {
          cur->nodeMax *= 2;
          cur->nodeTab = v12;
          goto LABEL_22;
        }

int xmlXPathNodeSetAdd(xmlNodeSetPtr cur, xmlNodePtr val)
{
  int result = -1;
  if (!cur || !val) {
    return result;
  }
  int nodeNr = cur->nodeNr;
  if (cur->nodeNr < 1)
  {
LABEL_7:
    int nodeMax = cur->nodeMax;
    if (nodeMax)
    {
      if (nodeNr != nodeMax) {
        goto LABEL_16;
      }
      if (nodeNr >= 10000000)
      {
        xmlNodePtr v9 = "growing nodeset hit limit\n";
        xmlElementType v10 = 0LL;
LABEL_20:
        xmlXPathErrMemory((uint64_t)v10, v9);
        return -1;
      }

      xmlElementType v10 = (xmlNodePtr *)xmlRealloc(cur->nodeTab, 16LL * nodeNr);
      if (v10)
      {
        cur->nodeMax *= 2;
        cur->nodeTab = v10;
LABEL_16:
        if (val->type == XML_NAMESPACE_DECL)
        {
          xmlElementType v11 = (xmlNode *)xmlXPathNodeSetDupNs((uint64_t)val->_private, (uint64_t)val);
          int result = 0;
          nodeTab = cur->nodeTab;
          uint64_t v13 = cur->nodeNr;
          cur->int nodeNr = v13 + 1;
          nodeTab[v13] = v11;
        }

        else
        {
          int result = 0;
          uint64_t v14 = cur->nodeTab;
          uint64_t v15 = cur->nodeNr;
          cur->int nodeNr = v15 + 1;
          v14[v15] = val;
        }

        return result;
      }
    }

    else
    {
      xmlElementType v10 = (xmlNodePtr *)xmlMalloc(0x50uLL);
      cur->nodeTab = v10;
      if (v10)
      {
        *((_OWORD *)v10 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
        *((_OWORD *)v10 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0u;
        *((_OWORD *)v10 + xmlSAX2InitDefaultSAXHandler(&hdlr, 1) = 0u;
        *((_OWORD *)v10 + 2) = 0u;
        *(_OWORD *)xmlElementType v10 = 0u;
        cur->int nodeMax = 10;
        goto LABEL_16;
      }
    }

    xmlNodePtr v9 = "growing nodeset\n";
    goto LABEL_20;
  }

  uint64_t v6 = cur->nodeTab;
  uint64_t v7 = cur->nodeNr;
  while (*v6 != val)
  {
    ++v6;
    if (!--v7) {
      goto LABEL_7;
    }
  }

  return 0;
}

int xmlXPathNodeSetAddUnique(xmlNodeSetPtr cur, xmlNodePtr val)
{
  int result = -1;
  if (cur && val)
  {
    uint64_t nodeMax = cur->nodeMax;
    if ((_DWORD)nodeMax)
    {
      if (cur->nodeNr != (_DWORD)nodeMax) {
        goto LABEL_12;
      }
      if ((int)nodeMax >= 10000000)
      {
        uint64_t v6 = "growing nodeset hit limit\n";
        uint64_t v7 = 0LL;
LABEL_16:
        xmlXPathErrMemory((uint64_t)v7, v6);
        return -1;
      }

      uint64_t v7 = (xmlNodePtr *)xmlRealloc(cur->nodeTab, 16 * nodeMax);
      if (v7)
      {
        cur->nodeTab = v7;
        int v8 = 2 * cur->nodeMax;
        goto LABEL_11;
      }
    }

    else
    {
      uint64_t v7 = (xmlNodePtr *)xmlMalloc(0x50uLL);
      cur->nodeTab = v7;
      if (v7)
      {
        *((_OWORD *)v7 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
        *((_OWORD *)v7 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0u;
        *((_OWORD *)v7 + xmlSAX2InitDefaultSAXHandler(&hdlr, 1) = 0u;
        *((_OWORD *)v7 + 2) = 0u;
        *(_OWORD *)uint64_t v7 = 0u;
        int v8 = 10;
LABEL_11:
        cur->uint64_t nodeMax = v8;
LABEL_12:
        if (val->type == XML_NAMESPACE_DECL)
        {
          xmlNodePtr v9 = (xmlNode *)xmlXPathNodeSetDupNs((uint64_t)val->_private, (uint64_t)val);
          int result = 0;
          nodeTab = cur->nodeTab;
          uint64_t nodeNr = cur->nodeNr;
          cur->uint64_t nodeNr = nodeNr + 1;
          nodeTab[nodeNr] = v9;
        }

        else
        {
          int result = 0;
          xmlNodeSetPtr v12 = cur->nodeTab;
          uint64_t v13 = cur->nodeNr;
          cur->uint64_t nodeNr = v13 + 1;
          v12[v13] = val;
        }

        return result;
      }
    }

    uint64_t v6 = "growing nodeset\n";
    goto LABEL_16;
  }

  return result;
}

xmlNodeSetPtr xmlXPathNodeSetMerge(xmlNodeSetPtr val1, xmlNodeSetPtr val2)
{
  xmlNodeSetPtr v2 = val1;
  if (!val2) {
    return v2;
  }
  if (!val1)
  {
    xmlNodeSetPtr v2 = xmlXPathNodeSetCreate(0LL);
    if (!v2) {
      return v2;
    }
  }

  if (val2->nodeNr < 1) {
    return v2;
  }
  uint64_t v4 = 0LL;
  uint64_t nodeNr = v2->nodeNr;
  while (1)
  {
    xmlNodePtr v6 = val2->nodeTab[v4];
    if ((int)nodeNr >= 1)
    {
      for (uint64_t i = 0LL; i != nodeNr; ++i)
      {
        xmlNodePtr v8 = v2->nodeTab[i];
        if (v8 == v6
          || v8->type == XML_NAMESPACE_DECL
          && v6->type == XML_NAMESPACE_DECL
          && v8->_private == v6->_private
          && xmlStrEqual((const xmlChar *)v8->children, (const xmlChar *)v6->children))
        {
          goto LABEL_25;
        }
      }
    }

    uint64_t nodeMax = v2->nodeMax;
    if (!(_DWORD)nodeMax)
    {
      xmlNodeSetPtr v12 = (xmlNodePtr *)xmlMalloc(0x50uLL);
      v2->nodeTab = v12;
      if (!v12)
      {
LABEL_27:
        uint64_t v15 = "merging nodeset\n";
        goto LABEL_29;
      }

      *((_OWORD *)v12 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
      *((_OWORD *)v12 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0u;
      *((_OWORD *)v12 + xmlSAX2InitDefaultSAXHandler(&hdlr, 1) = 0u;
      *((_OWORD *)v12 + 2) = 0u;
      int v11 = 10;
      *(_OWORD *)xmlNodeSetPtr v12 = 0u;
      goto LABEL_21;
    }

    if (v2->nodeNr == (_DWORD)nodeMax) {
      break;
    }
LABEL_22:
    if (v6->type == XML_NAMESPACE_DECL) {
      xmlNodePtr v6 = (xmlNodePtr)xmlXPathNodeSetDupNs((uint64_t)v6->_private, (uint64_t)v6);
    }
    nodeTab = v2->nodeTab;
    uint64_t v14 = v2->nodeNr;
    v2->uint64_t nodeNr = v14 + 1;
    nodeTab[v14] = v6;
LABEL_25:
    if (++v4 >= val2->nodeNr) {
      return v2;
    }
  }

  if ((int)nodeMax <= 9999999)
  {
    xmlElementType v10 = (xmlNodePtr *)xmlRealloc(v2->nodeTab, 16 * nodeMax);
    if (!v10) {
      goto LABEL_27;
    }
    v2->nodeTab = v10;
    int v11 = 2 * v2->nodeMax;
LABEL_21:
    v2->uint64_t nodeMax = v11;
    goto LABEL_22;
  }

  uint64_t v15 = "merging nodeset hit limit\n";
LABEL_29:
  xmlXPathErrMemory(0LL, v15);
  return 0LL;
}

void xmlXPathNodeSetDel(xmlNodeSetPtr cur, xmlNodePtr val)
{
  if (cur)
  {
    if (val)
    {
      uint64_t nodeNr = cur->nodeNr;
      if ((int)nodeNr >= 1)
      {
        uint64_t v4 = 0LL;
        nodeTab = cur->nodeTab;
        while (nodeTab[v4] != val)
        {
          if (nodeNr == ++v4) {
            return;
          }
        }

        xmlNodePtr v6 = nodeTab[v4];
        if (v6 && v6->type == XML_NAMESPACE_DECL)
        {
          xmlXPathNodeSetFreeNs((xmlNsPtr)v6);
          LODWORD(nodeNr) = cur->nodeNr;
        }

        uint64_t v7 = (nodeNr - 1);
        cur->uint64_t nodeNr = v7;
        if ((int)v7 > (int)v4)
        {
          do
          {
            cur->nodeTab[v4] = cur->nodeTab[v4 + 1];
            ++v4;
          }

          while (v7 != v4);
        }

        cur->nodeTab[(int)v7] = 0LL;
      }
    }
  }

void xmlXPathNodeSetRemove(xmlNodeSetPtr cur, int val)
{
  if (cur)
  {
    int nodeNr = cur->nodeNr;
    if (cur->nodeNr > val)
    {
      xmlNodePtr v5 = cur->nodeTab[val];
      if (v5 && v5->type == XML_NAMESPACE_DECL)
      {
        xmlXPathNodeSetFreeNs((xmlNsPtr)v5);
        int nodeNr = cur->nodeNr;
      }

      int v6 = nodeNr - 1;
      cur->int nodeNr = nodeNr - 1;
      uint64_t v7 = nodeNr - 1;
      if (v6 > val)
      {
        uint64_t v8 = val;
        do
        {
          cur->nodeTab[v8] = cur->nodeTab[v8 + 1];
          ++v8;
        }

        while (v7 != v8);
      }

      cur->nodeTab[v7] = 0LL;
    }
  }

void xmlXPathFreeNodeSet(xmlNodeSetPtr obj)
{
  if (obj)
  {
    nodeTab = obj->nodeTab;
    if (nodeTab)
    {
      int nodeNr = obj->nodeNr;
      if (obj->nodeNr >= 1)
      {
        uint64_t v4 = 0LL;
        do
        {
          xmlNodePtr v5 = obj->nodeTab[v4];
          if (v5)
          {
            if (v5->type == XML_NAMESPACE_DECL)
            {
              xmlXPathNodeSetFreeNs((xmlNsPtr)v5);
              int nodeNr = obj->nodeNr;
            }
          }

          ++v4;
        }

        while (v4 < nodeNr);
        nodeTab = obj->nodeTab;
      }

      xmlFree(nodeTab);
    }

    xmlFree(obj);
  }

xmlXPathObjectPtr xmlXPathNewNodeSet(xmlNodePtr val)
{
  xmlNodeSetPtr v2 = (xmlXPathObject *)xmlMalloc(0x48uLL);
  xmlDocPtr v3 = v2;
  if (v2)
  {
    *(_OWORD *)&v2->xmlElementType type = 0u;
    *(_OWORD *)&v2->int BOOLval = 0u;
    *(void *)&v2->index2 = 0LL;
    *(_OWORD *)&v2->stringxmlSchemaValPtr val = 0u;
    *(_OWORD *)&v2->index = 0u;
    v2->xmlElementType type = XPATH_NODESET;
    v2->int BOOLval = 0;
    v2->xmlNodeSetPtr nodesetval = xmlXPathNodeSetCreate(val);
  }

  else
  {
    xmlXPathErrMemory(0LL, "creating nodeset\n");
  }

  return v3;
}

xmlXPathObjectPtr xmlXPathNewValueTree(xmlNodePtr val)
{
  xmlXPathObjectPtr v1 = xmlXPathNewNodeSet(val);
  xmlNodeSetPtr v2 = v1;
  if (v1) {
    v1->xmlElementType type = XPATH_XSLT_TREE;
  }
  else {
    xmlXPathErrMemory(0LL, "creating result value tree\n");
  }
  return v2;
}

xmlXPathObjectPtr xmlXPathNewNodeSetList(xmlNodeSetPtr val)
{
  if (!val) {
    return 0LL;
  }
  nodeTab = val->nodeTab;
  if (nodeTab)
  {
    xmlXPathObjectPtr v3 = xmlXPathNewNodeSet(*nodeTab);
    if (v3 && val->nodeNr >= 2)
    {
      uint64_t v4 = 1LL;
      do
      {
        if (xmlXPathNodeSetAddUnique(v3->nodesetval, val->nodeTab[v4]) < 0) {
          break;
        }
        ++v4;
      }

      while (v4 < val->nodeNr);
    }

    return v3;
  }

  return xmlXPathNewNodeSet(0LL);
}

xmlXPathObjectPtr xmlXPathWrapNodeSet(xmlNodeSetPtr val)
{
  xmlNodeSetPtr v2 = (xmlXPathObject *)xmlMalloc(0x48uLL);
  xmlXPathObjectPtr v3 = v2;
  if (v2)
  {
    *(void *)&v2->index2 = 0LL;
    *(_OWORD *)&v2->stringxmlSchemaValPtr val = 0u;
    *(_OWORD *)&v2->index = 0u;
    *(_OWORD *)&v2->xmlElementType type = 0u;
    *(_OWORD *)&v2->int BOOLval = 0u;
    v2->xmlElementType type = XPATH_NODESET;
    v2->xmlNodeSetPtr nodesetval = val;
  }

  else
  {
    xmlXPathErrMemory(0LL, "creating node set object\n");
  }

  return v3;
}

void xmlXPathFreeNodeSetList(xmlXPathObjectPtr obj)
{
  if (obj) {
    xmlFree(obj);
  }
}

xmlNodeSetPtr xmlXPathDifference(xmlNodeSetPtr nodes1, xmlNodeSetPtr nodes2)
{
  if (nodes2 && nodes2->nodeNr && nodes2->nodeTab)
  {
    uint64_t v4 = xmlXPathNodeSetCreate(0LL);
    if (nodes1)
    {
      int nodeNr = nodes1->nodeNr;
      if (nodes1->nodeNr)
      {
        if (nodes1->nodeTab && nodeNr >= 1)
        {
          uint64_t v6 = 0LL;
          for (int i = nodes1->nodeNr; ; int i = nodes1->nodeNr)
          {
            uint64_t v8 = (int)v6 >= i ? 0LL : nodes1->nodeTab[v6];
            if (!xmlXPathNodeSetContains(nodes2, v8) && xmlXPathNodeSetAddUnique(v4, v8) < 0) {
              break;
            }
          }
        }
      }
    }

    return v4;
  }

  return nodes1;
}

xmlNodeSetPtr xmlXPathIntersection(xmlNodeSetPtr nodes1, xmlNodeSetPtr nodes2)
{
  xmlNodeSetPtr v4 = xmlXPathNodeSetCreate(0LL);
  xmlNodePtr v5 = v4;
  if (nodes1)
  {
    if (v4)
    {
      int nodeNr = nodes1->nodeNr;
      if (nodes1->nodeNr)
      {
        if (nodes2 && nodes1->nodeTab && nodes2->nodeNr && nodes2->nodeTab && nodeNr >= 1)
        {
          uint64_t v7 = 0LL;
          for (int i = nodes1->nodeNr; ; int i = nodes1->nodeNr)
          {
            xmlNodePtr v9 = (int)v7 >= i ? 0LL : nodes1->nodeTab[v7];
            if (xmlXPathNodeSetContains(nodes2, v9) && xmlXPathNodeSetAddUnique(v5, v9) < 0) {
              break;
            }
          }
        }
      }
    }
  }

  return v5;
}

xmlNodeSetPtr xmlXPathDistinctSorted(xmlNodeSetPtr nodes)
{
  if (!nodes) {
    return 0LL;
  }
  if (!nodes->nodeNr || !nodes->nodeTab) {
    return nodes;
  }
  xmlNodeSetPtr v2 = xmlXPathNodeSetCreate(0LL);
  if (v2)
  {
    int nodeNr = nodes->nodeNr;
    xmlNodeSetPtr v4 = xmlHashCreate(nodes->nodeNr);
    if (nodeNr >= 1)
    {
      uint64_t v5 = 0LL;
      do
      {
        else {
          xmlNodePtr v6 = nodes->nodeTab[v5];
        }
        Content = xmlNodeGetContent(v6);
        if (!Content) {
          Content = xmlStrdup((const xmlChar *)&byte_181A3ACBA);
        }
        if (xmlHashLookup(v4, Content))
        {
          xmlFree(Content);
        }

        else
        {
          xmlHashAddEntry(v4, Content, Content);
          if (xmlXPathNodeSetAddUnique(v2, v6) < 0) {
            break;
          }
        }

        ++v5;
      }

      while ((int)v5 < nodeNr);
    }

    xmlHashFree(v4, (xmlHashDeallocator)xmlHashDefaultDeallocator);
  }

  return v2;
}

xmlChar *__cdecl xmlXPathCastNodeToString(xmlNodePtr node)
{
  int result = xmlNodeGetContent(node);
  if (!result) {
    return xmlStrdup((const xmlChar *)&byte_181A3ACBA);
  }
  return result;
}

xmlNodeSetPtr xmlXPathDistinct(xmlNodeSetPtr nodes)
{
  if (!nodes) {
    return nodes;
  }
  unint64_t nodeNr = nodes->nodeNr;
  if (!(_DWORD)nodeNr) {
    return nodes;
  }
  nodeTab = nodes->nodeTab;
  if (!nodeTab) {
    return nodes;
  }
  libxml_domnode_tim_sort((uint64_t)nodeTab, nodeNr);
  return xmlXPathDistinctSorted(nodes);
}

int xmlXPathHasSameNodes(xmlNodeSetPtr nodes1, xmlNodeSetPtr nodes2)
{
  if (nodes1)
  {
    xmlNodeSetPtr v2 = nodes1;
    uint64_t nodeNr = nodes1->nodeNr;
    if (!(_DWORD)nodeNr) {
      goto LABEL_15;
    }
    LODWORD(nodesxmlSAX2InitDefaultSAXHandler(&hdlr, 1) = 0;
    if (!nodes2 || !v2->nodeTab) {
      return (int)nodes1;
    }
    if (!nodes2->nodeNr)
    {
LABEL_15:
      LODWORD(nodesxmlSAX2InitDefaultSAXHandler(&hdlr, 1) = 0;
      return (int)nodes1;
    }

    LODWORD(nodesxmlSAX2InitDefaultSAXHandler(&hdlr, 1) = 0;
    if (nodes2->nodeTab && (int)nodeNr >= 1)
    {
      uint64_t v5 = 0LL;
      while (1)
      {
        xmlNodePtr v6 = v5 >= v2->nodeNr ? 0LL : v2->nodeTab[v5];
        LODWORD(nodesxmlSAX2InitDefaultSAXHandler(&hdlr, 1) = xmlXPathNodeSetContains(nodes2, v6);
        if ((_DWORD)nodes1) {
          break;
        }
        if (nodeNr == ++v5) {
          return (int)nodes1;
        }
      }

      LODWORD(nodesxmlSAX2InitDefaultSAXHandler(&hdlr, 1) = 1;
    }
  }

  return (int)nodes1;
}

xmlNodeSetPtr xmlXPathNodeLeadingSorted(xmlNodeSetPtr nodes, xmlNodePtr node)
{
  if (node)
  {
    xmlNodeSetPtr v4 = xmlXPathNodeSetCreate(0LL);
    if (v4)
    {
      uint64_t v5 = v4;
      if (nodes)
      {
        if (nodes->nodeNr)
        {
          if (nodes->nodeTab)
          {
            if (xmlXPathNodeSetContains(nodes, node))
            {
              uint64_t nodeNr = nodes->nodeNr;
              if ((int)nodeNr >= 1)
              {
                uint64_t v7 = 0LL;
                uint64_t v8 = nodeNr - 1;
                do
                {
                  if (v7 >= nodes->nodeNr) {
                    xmlNodePtr v9 = 0LL;
                  }
                  else {
                    xmlNodePtr v9 = nodes->nodeTab[v7];
                  }
                  if (v9 == node) {
                    break;
                  }
                  if (xmlXPathNodeSetAddUnique(v5, v9) < 0) {
                    break;
                  }
                }

                while (v8 != v7++);
              }
            }
          }
        }
      }

      return v5;
    }

    else
    {
      return 0LL;
    }
  }

  return nodes;
}

xmlNodeSetPtr xmlXPathNodeLeading(xmlNodeSetPtr nodes, xmlNodePtr node)
{
  if (nodes) {
    libxml_domnode_tim_sort((uint64_t)nodes->nodeTab, nodes->nodeNr);
  }
  return xmlXPathNodeLeadingSorted(nodes, node);
}

xmlNodeSetPtr xmlXPathLeadingSorted(xmlNodeSetPtr nodes1, xmlNodeSetPtr nodes2)
{
  if (nodes2)
  {
    if (nodes2->nodeNr)
    {
      nodeTab = nodes2->nodeTab;
      if (nodeTab)
      {
        if (nodes2->nodeNr < 2) {
          xmlXPathObjectPtr v3 = 0LL;
        }
        else {
          xmlXPathObjectPtr v3 = nodeTab[1];
        }
        return xmlXPathNodeLeadingSorted(nodes1, v3);
      }
    }
  }

  return nodes1;
}

xmlNodeSetPtr xmlXPathLeading(xmlNodeSetPtr nodes1, xmlNodeSetPtr nodes2)
{
  xmlNodeSetPtr v2 = nodes1;
  if (nodes2 && nodes2->nodeNr && nodes2->nodeTab)
  {
    if (nodes1 && (unint64_t nodeNr = nodes1->nodeNr, (_DWORD)nodeNr) && (nodeTab = nodes1->nodeTab) != 0LL)
    {
      libxml_domnode_tim_sort((uint64_t)nodeTab, nodeNr);
      libxml_domnode_tim_sort((uint64_t)nodes2->nodeTab, nodes2->nodeNr);
      if (nodes2->nodeNr < 2) {
        xmlNodePtr v6 = 0LL;
      }
      else {
        xmlNodePtr v6 = (xmlNode *)*((void *)nodes2->nodeTab + 1);
      }
      return xmlXPathNodeLeadingSorted(v2, v6);
    }

    else
    {
      return xmlXPathNodeSetCreate(0LL);
    }
  }

  return nodes1;
}

xmlNodeSetPtr xmlXPathNodeTrailingSorted(xmlNodeSetPtr nodes, xmlNodePtr node)
{
  if (!node) {
    return nodes;
  }
  xmlNodeSetPtr v4 = xmlXPathNodeSetCreate(0LL);
  if (v4 && nodes && nodes->nodeNr && nodes->nodeTab && xmlXPathNodeSetContains(nodes, node))
  {
    uint64_t nodeNr = nodes->nodeNr;
    do
    {
      xmlNodePtr v6 = nodes->nodeNr >= (int)nodeNr ? nodes->nodeTab[nodeNr - 1] : 0LL;
      if (v6 == node) {
        break;
      }
      --nodeNr;
    }

    while ((xmlXPathNodeSetAddUnique(v4, v6) & 0x80000000) == 0);
    libxml_domnode_tim_sort((uint64_t)v4->nodeTab, v4->nodeNr);
  }

  return v4;
}

xmlNodeSetPtr xmlXPathNodeTrailing(xmlNodeSetPtr nodes, xmlNodePtr node)
{
  if (nodes) {
    libxml_domnode_tim_sort((uint64_t)nodes->nodeTab, nodes->nodeNr);
  }
  return xmlXPathNodeTrailingSorted(nodes, node);
}

xmlNodeSetPtr xmlXPathTrailingSorted(xmlNodeSetPtr nodes1, xmlNodeSetPtr nodes2)
{
  if (nodes2)
  {
    if (nodes2->nodeNr)
    {
      nodeTab = nodes2->nodeTab;
      if (nodeTab)
      {
        if (nodes2->nodeNr < 1) {
          xmlXPathObjectPtr v3 = 0LL;
        }
        else {
          xmlXPathObjectPtr v3 = *nodeTab;
        }
        return xmlXPathNodeTrailingSorted(nodes1, v3);
      }
    }
  }

  return nodes1;
}

xmlNodeSetPtr xmlXPathTrailing(xmlNodeSetPtr nodes1, xmlNodeSetPtr nodes2)
{
  xmlNodeSetPtr v2 = nodes1;
  if (nodes2 && nodes2->nodeNr && nodes2->nodeTab)
  {
    if (nodes1 && (unint64_t nodeNr = nodes1->nodeNr, (_DWORD)nodeNr) && (nodeTab = nodes1->nodeTab) != 0LL)
    {
      libxml_domnode_tim_sort((uint64_t)nodeTab, nodeNr);
      libxml_domnode_tim_sort((uint64_t)nodes2->nodeTab, nodes2->nodeNr);
      if (nodes2->nodeNr < 1) {
        xmlNodePtr v6 = 0LL;
      }
      else {
        xmlNodePtr v6 = *nodes2->nodeTab;
      }
      return xmlXPathNodeTrailingSorted(v2, v6);
    }

    else
    {
      return xmlXPathNodeSetCreate(0LL);
    }
  }

  return nodes1;
}

int xmlXPathRegisterFunc(xmlXPathContextPtr ctxt, const xmlChar *name, xmlXPathFunction f)
{
  return xmlXPathRegisterFuncNS(ctxt, name, 0LL, f);
}

int xmlXPathRegisterFuncNS( xmlXPathContextPtr ctxt, const xmlChar *name, const xmlChar *ns_uri, xmlXPathFunction f)
{
  if (!ctxt) {
    return -1;
  }
  if (!name) {
    return -1;
  }
  funcHash = ctxt->funcHash;
  if (!funcHash)
  {
    funcHash = xmlHashCreate(0);
    ctxt->funcHash = funcHash;
    if (!funcHash) {
      return -1;
    }
  }

  if (f) {
    return xmlHashAddEntry2(funcHash, name, ns_uri, f);
  }
  return xmlHashRemoveEntry2(funcHash, name, ns_uri, 0LL);
}

void xmlXPathRegisterFuncLookup(xmlXPathContextPtr ctxt, xmlXPathFuncLookupFunc f, void *funcCtxt)
{
  if (ctxt)
  {
    ctxt->funcLookupFunc = f;
    ctxt->funcLookupData = funcCtxt;
  }

xmlXPathFunction xmlXPathFunctionLookup(xmlXPathFunction ctxt, const xmlChar *name)
{
  if (ctxt)
  {
    xmlXPathObjectPtr v3 = (xmlXPathContext *)ctxt;
    xmlNodeSetPtr v4 = (uint64_t (*)(void, const xmlChar *, void))*((void *)ctxt + 23);
    if (!v4) {
      return xmlXPathFunctionLookupNS(v3, name, 0LL);
    }
    xmlValidCtxt ctxt = (xmlXPathFunction)v4(*((void *)ctxt + 24), name, 0LL);
    if (!ctxt) {
      return xmlXPathFunctionLookupNS(v3, name, 0LL);
    }
  }

  return ctxt;
}

xmlXPathFunction xmlXPathFunctionLookupNS(xmlXPathContextPtr ctxt, const xmlChar *name, const xmlChar *ns_uri)
{
  xmlXPathFunction result = 0LL;
  if (ctxt)
  {
    if (name)
    {
      xmlXPathFuncLookupFunc funcLookupFunc = ctxt->funcLookupFunc;
      if (!funcLookupFunc
        || (xmlXPathFunction result = (xmlXPathFunction)((uint64_t (*)(void *, const xmlChar *, const xmlChar *))funcLookupFunc)( ctxt->funcLookupData,  name,  ns_uri)) == 0LL)
      {
        xmlXPathFunction result = (xmlXPathFunction)ctxt->funcHash;
        if (result) {
          return (xmlXPathFunction)xmlHashLookup2((xmlHashTablePtr)result, name, ns_uri);
        }
      }
    }
  }

  return result;
}

void xmlXPathRegisteredFuncsCleanup(xmlXPathContextPtr ctxt)
{
  if (ctxt)
  {
    xmlHashFree(ctxt->funcHash, 0LL);
    ctxt->funcHash = 0LL;
  }

int xmlXPathRegisterVariable(xmlXPathContextPtr ctxt, const xmlChar *name, xmlXPathObjectPtr value)
{
  return xmlXPathRegisterVariableNS(ctxt, name, 0LL, value);
}

int xmlXPathRegisterVariableNS( xmlXPathContextPtr ctxt, const xmlChar *name, const xmlChar *ns_uri, xmlXPathObjectPtr value)
{
  if (!ctxt) {
    return -1;
  }
  if (!name) {
    return -1;
  }
  varHash = ctxt->varHash;
  if (!varHash)
  {
    varHash = xmlHashCreate(0);
    ctxt->varHash = varHash;
    if (!varHash) {
      return -1;
    }
  }

  if (value) {
    return xmlHashUpdateEntry2(varHash, name, ns_uri, value, (xmlHashDeallocator)xmlXPathFreeObjectEntry);
  }
  return xmlHashRemoveEntry2(varHash, name, ns_uri, (xmlHashDeallocator)xmlXPathFreeObjectEntry);
}

void xmlXPathRegisterVariableLookup(xmlXPathContextPtr ctxt, xmlXPathVariableLookupFunc f, void *data)
{
  if (ctxt)
  {
    ctxt->varLookupFunc = f;
    ctxt->varLookupData = data;
  }

xmlXPathObjectPtr xmlXPathVariableLookup(xmlXPathObjectPtr ctxt, const xmlChar *name)
{
  if (ctxt)
  {
    xmlNodeSetPtr v2 = *(uint64_t (**)(xmlNodeSetPtr, const xmlChar *, void))&ctxt[2].type;
    if (v2) {
      return (xmlXPathObjectPtr)v2(ctxt[2].nodesetval, name, 0LL);
    }
    else {
      return xmlXPathVariableLookupNS((xmlXPathContextPtr)ctxt, name, 0LL);
    }
  }

  return ctxt;
}

xmlXPathObjectPtr xmlXPathVariableLookupNS(xmlXPathObjectPtr ctxt, const xmlChar *name, const xmlChar *ns_uri)
{
  if (ctxt)
  {
    xmlXPathObjectPtr v5 = ctxt;
    xmlNodePtr v6 = *(uint64_t (**)(xmlNodeSetPtr, const xmlChar *, const xmlChar *))&ctxt[2].type;
    if (!v6 || (xmlValidCtxt ctxt = (xmlXPathObjectPtr)v6(ctxt[2].nodesetval, name, ns_uri)) == 0LL)
    {
      xmlValidCtxt ctxt = 0LL;
      if (name)
      {
        if (*(void *)&v5->floatval)
        {
          uint64_t v7 = (xmlXPathObject *)xmlHashLookup2(*(xmlHashTablePtr *)&v5->floatval, name, ns_uri);
          return xmlXPathCacheObjectCopy((uint64_t)v5, v7);
        }
      }
    }
  }

  return ctxt;
}

xmlXPathObjectPtr xmlXPathCacheObjectCopy(uint64_t a1, xmlXPathObjectPtr val)
{
  if (!val) {
    return 0LL;
  }
  if (!a1 || !*(void *)(a1 + 344)) {
    return xmlXPathObjectCopy(val);
  }
  switch(val->type)
  {
    case XPATH_NODESET:
      xmlXPathObjectPtr v3 = xmlXPathNodeSetMerge(0LL, val->nodesetval);
      xmlXPathObjectPtr result = xmlXPathCacheWrapNodeSet(a1, v3);
      break;
    case XPATH_BOOLEAN:
      xmlXPathObjectPtr result = xmlXPathCacheNewBoolean(a1, val->BOOLval);
      break;
    case XPATH_NUMBER:
      xmlXPathObjectPtr result = xmlXPathCacheNewFloat(val->floatval, a1);
      break;
    case XPATH_STRING:
      xmlXPathObjectPtr result = xmlXPathCacheNewString(a1, val->stringval);
      break;
    default:
      return xmlXPathObjectCopy(val);
  }

  return result;
}

void xmlXPathRegisteredVariablesCleanup(xmlXPathContextPtr ctxt)
{
  if (ctxt)
  {
    xmlHashFree(ctxt->varHash, (xmlHashDeallocator)xmlXPathFreeObjectEntry);
    ctxt->varHash = 0LL;
  }

int xmlXPathRegisterNs(xmlXPathContextPtr ctxt, const xmlChar *prefix, const xmlChar *ns_uri)
{
  int result = -1;
  if (ctxt && prefix && *prefix)
  {
    nsHash = ctxt->nsHash;
    if (nsHash || (nsHash = xmlHashCreate(10), (ctxt->nsHash = nsHash) != 0LL))
    {
      if (!ns_uri) {
        return xmlHashRemoveEntry(nsHash, prefix, (xmlHashDeallocator)xmlHashDefaultDeallocator);
      }
      uint64_t v8 = xmlStrdup(ns_uri);
      if (v8)
      {
        xmlNodePtr v9 = v8;
        if ((xmlHashUpdateEntry(ctxt->nsHash, prefix, v8, (xmlHashDeallocator)xmlHashDefaultDeallocator) & 0x80000000) == 0) {
          return 0;
        }
        xmlFree(v9);
      }
    }

    return -1;
  }

  return result;
}

const xmlChar *__cdecl xmlXPathNsLookup(xmlXPathContextPtr ctxt, const xmlChar *prefix)
{
  int result = 0LL;
  if (ctxt && prefix)
  {
    if (!xmlStrEqual(prefix, (const xmlChar *)"xml"))
    {
      if (!ctxt->namespaces) {
        return (const xmlChar *)xmlHashLookup(ctxt->nsHash, prefix);
      }
      int nsNr = ctxt->nsNr;
      if (nsNr < 1) {
        return (const xmlChar *)xmlHashLookup(ctxt->nsHash, prefix);
      }
      uint64_t v6 = 0LL;
      while (1)
      {
        xmlNsPtr v7 = ctxt->namespaces[v6];
        if (v7)
        {
          if (xmlStrEqual(v7->prefix, prefix)) {
            return ctxt->namespaces[v6]->href;
          }
          int nsNr = ctxt->nsNr;
        }

        if (++v6 >= nsNr) {
          return (const xmlChar *)xmlHashLookup(ctxt->nsHash, prefix);
        }
      }
    }

    return (const xmlChar *)"http://www.w3.org/XML/1998/namespace";
  }

  return result;
}

void xmlXPathRegisteredNsCleanup(xmlXPathContextPtr ctxt)
{
  if (ctxt)
  {
    xmlHashFree(ctxt->nsHash, (xmlHashDeallocator)xmlHashDefaultDeallocator);
    ctxt->nsHash = 0LL;
  }

xmlXPathObjectPtr xmlXPathNewFloat(double val)
{
  xmlNodeSetPtr v2 = (xmlXPathObject *)xmlMalloc(0x48uLL);
  xmlXPathObjectPtr v3 = v2;
  if (v2)
  {
    *(_OWORD *)&v2->xmlElementType type = 0u;
    *(_OWORD *)&v2->int BOOLval = 0u;
    *(void *)&v2->index2 = 0LL;
    *(_OWORD *)&v2->stringxmlSchemaValPtr val = 0u;
    *(_OWORD *)&v2->index = 0u;
    v2->xmlElementType type = XPATH_NUMBER;
    v2->floatxmlSchemaValPtr val = val;
  }

  else
  {
    xmlXPathErrMemory(0LL, "creating float object\n");
  }

  return v3;
}

xmlXPathObjectPtr xmlXPathNewBoolean(int val)
{
  xmlNodeSetPtr v2 = (xmlXPathObject *)xmlMalloc(0x48uLL);
  xmlXPathObjectPtr v3 = v2;
  if (v2)
  {
    *(_OWORD *)&v2->xmlElementType type = 0u;
    *(_OWORD *)&v2->int BOOLval = 0u;
    *(void *)&v2->index2 = 0LL;
    *(_OWORD *)&v2->stringxmlSchemaValPtr val = 0u;
    *(_OWORD *)&v2->index = 0u;
    v2->xmlElementType type = XPATH_BOOLEAN;
    v2->int BOOLval = val != 0;
  }

  else
  {
    xmlXPathErrMemory(0LL, "creating BOOLean object\n");
  }

  return v3;
}

xmlXPathObjectPtr xmlXPathNewString(const xmlChar *val)
{
  xmlNodeSetPtr v2 = (xmlXPathObject *)xmlMalloc(0x48uLL);
  xmlXPathObjectPtr v3 = v2;
  if (v2)
  {
    *(void *)&v2->index2 = 0LL;
    *(_OWORD *)&v2->stringxmlSchemaValPtr val = 0u;
    *(_OWORD *)&v2->index = 0u;
    *(_OWORD *)&v2->xmlElementType type = 0u;
    *(_OWORD *)&v2->int BOOLval = 0u;
    v2->xmlElementType type = XPATH_STRING;
    if (val) {
      xmlNodeSetPtr v4 = val;
    }
    else {
      xmlNodeSetPtr v4 = (const xmlChar *)&byte_181A3ACBA;
    }
    v3->stringxmlSchemaValPtr val = xmlStrdup(v4);
  }

  else
  {
    xmlXPathErrMemory(0LL, "creating string object\n");
  }

  return v3;
}

xmlXPathObjectPtr xmlXPathWrapString(xmlChar *val)
{
  xmlNodeSetPtr v2 = (xmlXPathObject *)xmlMalloc(0x48uLL);
  xmlXPathObjectPtr v3 = v2;
  if (v2)
  {
    *(void *)&v2->index2 = 0LL;
    *(_OWORD *)&v2->stringxmlSchemaValPtr val = 0u;
    *(_OWORD *)&v2->index = 0u;
    *(_OWORD *)&v2->xmlElementType type = 0u;
    *(_OWORD *)&v2->int BOOLval = 0u;
    v2->xmlElementType type = XPATH_STRING;
    v2->stringxmlSchemaValPtr val = val;
  }

  else
  {
    xmlXPathErrMemory(0LL, "creating string object\n");
  }

  return v3;
}

xmlXPathObjectPtr xmlXPathNewCString(const char *val)
{
  xmlNodeSetPtr v2 = (xmlXPathObject *)xmlMalloc(0x48uLL);
  xmlXPathObjectPtr v3 = v2;
  if (v2)
  {
    *(void *)&v2->index2 = 0LL;
    *(_OWORD *)&v2->stringxmlSchemaValPtr val = 0u;
    *(_OWORD *)&v2->index = 0u;
    *(_OWORD *)&v2->xmlElementType type = 0u;
    *(_OWORD *)&v2->int BOOLval = 0u;
    v2->xmlElementType type = XPATH_STRING;
    v2->stringxmlSchemaValPtr val = xmlStrdup((const xmlChar *)val);
  }

  else
  {
    xmlXPathErrMemory(0LL, "creating string object\n");
  }

  return v3;
}

xmlXPathObjectPtr xmlXPathWrapExternal(void *val)
{
  xmlNodeSetPtr v2 = (xmlXPathObject *)xmlMalloc(0x48uLL);
  xmlXPathObjectPtr v3 = v2;
  if (v2)
  {
    *(void *)&v2->index2 = 0LL;
    *(_OWORD *)&v2->stringxmlSchemaValPtr val = 0u;
    *(_OWORD *)&v2->index = 0u;
    *(_OWORD *)&v2->xmlElementType type = 0u;
    *(_OWORD *)&v2->int BOOLval = 0u;
    v2->xmlElementType type = XPATH_USERS;
    v2->int user = val;
  }

  else
  {
    xmlXPathErrMemory(0LL, "creating user object\n");
  }

  return v3;
}

xmlXPathObjectPtr xmlXPathObjectCopy(xmlXPathObjectPtr val)
{
  if (!val) {
    return 0LL;
  }
  xmlNodeSetPtr v2 = (xmlXPathObject *)xmlMalloc(0x48uLL);
  xmlXPathObjectPtr v3 = v2;
  if (v2)
  {
    *(_OWORD *)&v2->xmlElementType type = *(_OWORD *)&val->type;
    __int128 v4 = *(_OWORD *)&val->BOOLval;
    __int128 v5 = *(_OWORD *)&val->stringval;
    __int128 v6 = *(_OWORD *)&val->index;
    *(void *)&v2->index2 = *(void *)&val->index2;
    *(_OWORD *)&v2->stringxmlSchemaValPtr val = v5;
    *(_OWORD *)&v2->index = v6;
    *(_OWORD *)&v2->int BOOLval = v4;
    switch(val->type)
    {
      case XPATH_UNDEFINED:
        xmlGenericErrorFunc v7 = *__xmlGenericError();
        uint64_t v8 = __xmlGenericErrorContext();
        v7(*v8, "xmlXPathObjectCopy: unsupported type %d\n", val->type);
        break;
      case XPATH_NODESET:
      case XPATH_XSLT_TREE:
        v2->xmlNodeSetPtr nodesetval = xmlXPathNodeSetMerge(0LL, val->nodesetval);
        v3->int BOOLval = 0;
        break;
      case XPATH_STRING:
        v2->stringxmlSchemaValPtr val = xmlStrdup(val->stringval);
        break;
      case XPATH_LOCATIONSET:
        v2->int user = xmlXPtrLocationSetMerge(0LL, (xmlLocationSetPtr)val->user);
        break;
      case XPATH_USERS:
        v2->int user = val->user;
        break;
      default:
        return v3;
    }
  }

  else
  {
    xmlXPathErrMemory(0LL, "copying object\n");
  }

  return v3;
}

xmlChar *__cdecl xmlXPathCastBooleanToString(int val)
{
  if (val) {
    return xmlStrdup((const xmlChar *)"true");
  }
  else {
    return xmlStrdup((const xmlChar *)"false");
  }
}

xmlChar *__cdecl xmlXPathCastNumberToString(double val)
{
  v32[2] = *MEMORY[0x1895F89C0];
  double v2 = fabs(val);
  if (val > 0.0) {
    int v3 = 1;
  }
  else {
    int v3 = -1;
  }
  if (v2 != INFINITY) {
    int v3 = 0;
  }
  if (v3 == -1)
  {
    __int128 v4 = "-Infinity";
    return xmlStrdup((const xmlChar *)v4);
  }

  if (v3 == 1)
  {
    __int128 v4 = "Infinity";
    return xmlStrdup((const xmlChar *)v4);
  }

  if (val == 0.0)
  {
    __int128 v4 = "0";
    return xmlStrdup((const xmlChar *)v4);
  }

  int v29 = 0;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  *(_OWORD *)cur = 0u;
  __int128 v24 = 0u;
  if (val > 0.0 && v2 == INFINITY)
  {
    strcpy((char *)cur, "Infinity");
  }

  else if (val > -2147483650.0 && ((v6 = (int)val, val < 2147483650.0) ? (BOOL v7 = (double)v6 == val) : (BOOL v7 = 0), v7))
  {
    *(void *)char __str = 0LL;
    uint64_t v31 = 0LL;
    memset(v32, 0, 14);
    if (v6)
    {
      snprintf(__str, 0x1DuLL, "%d", (int)val);
      LOBYTE(v1xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = __str[0];
      if (__str[0])
      {
        uint64_t v14 = 0LL;
        do
        {
          cur[v14] = v13;
          int v13 = __str[++v14];
        }

        while (v13 && v14 < 99);
        uint64_t v15 = &cur[v14];
      }

      else
      {
        uint64_t v15 = cur;
      }
    }

    else
    {
      uint64_t v15 = &cur[1];
      cur[0] = 48;
    }

    v15[-(v15 - cur > 98)] = 0;
  }

  else
  {
    *(void *)char __str = 0LL;
    uint64_t v31 = 0LL;
    LODWORD(v32[1]) = 0;
    v32[0] = 0LL;
    if (v2 > 1000000000.0 || v2 < 0.00001)
    {
      int v11 = snprintf(__str, 0x1CuLL, "%*.*e", 21, 14, val);
      if (v11 >= 1)
      {
        while (__str[v11] != 101)
        {
          BOOL v12 = __OFSUB__(v11--, 1);
          if ((v11 < 0) ^ v12 | (v11 == 0))
          {
            int v11 = 0;
            break;
          }
        }
      }
    }

    else
    {
      int v8 = 1;
      if (val != 0.0)
      {
        int v9 = (int)log10(v2);
        if (v9 < 1) {
          int v10 = 15;
        }
        else {
          int v10 = 14;
        }
        int v8 = v10 - v9;
      }

      int v11 = snprintf(__str, 0x1CuLL, "%0.*f", v8, val);
    }

    while (__str[0] == 32)
    {
      int v16 = &__str[1];
      do
      {
        int v17 = *v16;
        *(v16++ - xmlSAX2InitDefaultSAXHandler(&hdlr, 1) = v17;
      }

      while (v17);
      --v11;
    }

    uint64_t v18 = v11;
    int v19 = &__str[v11];
    do
    {
      int v21 = *--v19;
      int v20 = v21;
    }

    while (v21 == 48);
    if (v20 != 46) {
      ++v19;
    }
    do
    {
      int v22 = __str[v18];
      *v19++ = v22;
      ++v18;
    }

    while (v22);
    strlen(__str);
    __memmove_chk();
  }

  HIBYTE(v29) = 0;
  return xmlStrdup(cur);
}

xmlChar *__cdecl xmlXPathCastNodeSetToString(xmlNodeSetPtr ns)
{
  if (!ns) {
    return xmlStrdup((const xmlChar *)&byte_181A3ACBA);
  }
  unint64_t nodeNr = ns->nodeNr;
  if (!(_DWORD)nodeNr) {
    return xmlStrdup((const xmlChar *)&byte_181A3ACBA);
  }
  nodeTab = (const xmlNode **)ns->nodeTab;
  if (!nodeTab) {
    return xmlStrdup((const xmlChar *)&byte_181A3ACBA);
  }
  if ((int)nodeNr >= 2)
  {
    libxml_domnode_tim_sort((uint64_t)nodeTab, nodeNr);
    nodeTab = (const xmlNode **)ns->nodeTab;
  }

  int result = xmlNodeGetContent(*nodeTab);
  if (!result) {
    return xmlStrdup((const xmlChar *)&byte_181A3ACBA);
  }
  return result;
}

xmlXPathObjectPtr xmlXPathConvertString(xmlXPathObjectPtr val)
{
  if (val)
  {
    xmlXPathObjectPtr v1 = val;
    switch(val->type)
    {
      case XPATH_NODESET:
      case XPATH_XSLT_TREE:
        __int128 v4 = xmlXPathCastNodeSetToString(val->nodesetval);
        goto LABEL_11;
      case XPATH_BOOLEAN:
        if (val->BOOLval) {
          __int128 v5 = "true";
        }
        else {
          __int128 v5 = "false";
        }
        __int128 v4 = xmlStrdup((const xmlChar *)v5);
        goto LABEL_11;
      case XPATH_NUMBER:
        __int128 v4 = xmlXPathCastNumberToString(val->floatval);
LABEL_11:
        int v6 = v4;
        xmlXPathFreeObject(v1);
        if (!v6) {
          return xmlXPathNewCString(&byte_181A3ACBA);
        }
        return xmlXPathWrapString(v6);
      case XPATH_STRING:
        return val;
      case XPATH_POINT:
      case XPATH_RANGE:
      case XPATH_LOCATIONSET:
      case XPATH_USERS:
        xmlGenericErrorFunc v2 = *__xmlGenericError();
        int v3 = __xmlGenericErrorContext();
        v2(*v3, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpath.c", 5759);
        goto LABEL_4;
      default:
LABEL_4:
        xmlXPathFreeObject(v1);
        return xmlXPathNewCString(&byte_181A3ACBA);
    }
  }

  return xmlXPathNewCString(&byte_181A3ACBA);
}

double xmlXPathCastBooleanToNumber(int val)
{
  double result = 1.0;
  if (!val) {
    return 0.0;
  }
  return result;
}

double xmlXPathStringEvalNumber(const xmlChar *str)
{
  if (!str) {
    return 0.0;
  }
  while (1)
  {
    uint64_t v1 = *str;
    if (((1LL << v1) & 0x100002600LL) == 0)
    {
      if (v1 == 46) {
        goto LABEL_10;
      }
      break;
    }

    ++str;
  }

double xmlXPathCastNodeToNumber(xmlNodePtr node)
{
  if (!node) {
    return xmlXPathNAN;
  }
  Content = xmlNodeGetContent(node);
  if (!Content)
  {
    Content = xmlStrdup((const xmlChar *)&byte_181A3ACBA);
    if (!Content) {
      return xmlXPathNAN;
    }
  }

  double v2 = xmlXPathStringEvalNumber(Content);
  xmlFree(Content);
  return v2;
}

double xmlXPathCastNodeSetToNumber(xmlNodeSetPtr ns)
{
  if (!ns) {
    return xmlXPathNAN;
  }
  uint64_t v1 = xmlXPathCastNodeSetToString(ns);
  double v2 = xmlXPathStringEvalNumber(v1);
  xmlFree(v1);
  return v2;
}

xmlXPathObjectPtr xmlXPathConvertNumber(xmlXPathObjectPtr val)
{
  if (!val) {
    return xmlXPathNewFloat(0.0);
  }
  uint64_t v1 = val;
  if (val->type != XPATH_NUMBER)
  {
    double v2 = xmlXPathCastToNumber(val);
    uint64_t v3 = xmlXPathNewFloat(v2);
    xmlXPathFreeObject(v1);
    return v3;
  }

  return val;
}

int xmlXPathCastNumberToBoolean(double val)
{
  return val > 0.0 || val < 0.0;
}

int xmlXPathCastStringToBoolean(const xmlChar *val)
{
  if (val) {
    LODWORD(val) = xmlStrlen(val) != 0;
  }
  return (int)val;
}

int xmlXPathCastNodeSetToBoolean(xmlNodeSetPtr ns)
{
  if (ns) {
    LODWORD(ns) = ns->nodeNr != 0;
  }
  return (int)ns;
}

xmlXPathObjectPtr xmlXPathConvertBoolean(xmlXPathObjectPtr val)
{
  if (!val) {
    return xmlXPathNewBoolean(0);
  }
  uint64_t v1 = val;
  if (val->type != XPATH_BOOLEAN)
  {
    int v2 = xmlXPathCastToBoolean(val);
    uint64_t v3 = xmlXPathNewBoolean(v2);
    xmlXPathFreeObject(v1);
    return v3;
  }

  return val;
}

xmlXPathContextPtr xmlXPathNewContext(xmlDocPtr doc)
{
  int v2 = (xmlXPathContext *)xmlMalloc(0x178uLL);
  uint64_t v3 = v2;
  if (v2)
  {
    *(void *)&v2[1].nb_variables_unused = 0LL;
    *(_OWORD *)&v2->int flags = 0u;
    *(_OWORD *)&v2[1].doc = 0u;
    *(_OWORD *)&v2->lastError.xmlValidCtxt ctxt = 0u;
    *(_OWORD *)&v2->uint64_t debugNode = 0u;
    *(_OWORD *)&v2->lastError.str1 = 0u;
    *(_OWORD *)&v2->lastError.str3 = 0u;
    *(_OWORD *)&v2->lastError.message = 0u;
    *(_OWORD *)&v2->lastError.file = 0u;
    *(_OWORD *)&v2->tmpNsNr = 0u;
    *(_OWORD *)&v2->error = 0u;
    *(_OWORD *)&v2->functionxmlURIPtr URI = 0u;
    *(_OWORD *)&v2->funcLookupData = 0u;
    *(_OWORD *)&v2->varLookupFunc = 0u;
    *(_OWORD *)&v2->extra = 0u;
    *(_OWORD *)&v2->xptr = 0u;
    *(_OWORD *)&v2->origiuint64_t n = 0u;
    *(_OWORD *)&v2->namespaces = 0u;
    *(_OWORD *)&v2->int user = 0u;
    *(_OWORD *)&v2->nb_funcs_unused = 0u;
    *(_OWORD *)&v2->nb_axis = 0u;
    *(_OWORD *)&v2->nb_variables_unused = 0u;
    *(_OWORD *)&v2->nb_types = 0u;
    *(_OWORD *)&v2->doc = 0u;
    v2->doc = doc;
    v2->xmlNodePtr node = 0LL;
    v2->varHash = 0LL;
    *(void *)&v2->nb_types = 0LL;
    v2->types = 0LL;
    xmlHashTablePtr v4 = xmlHashCreate(0);
    v3->nsHash = 0LL;
    v3->int user = 0LL;
    *(void *)&v3->nb_axis = 0LL;
    v3->axis = 0LL;
    v3->funcHash = v4;
    *(void *)&v3->contextSize = -1LL;
    xmlXPathRegisterAllFunctions(v3);
  }

  else
  {
    xmlXPathErrMemory(0LL, "creating context\n");
  }

  return v3;
}

void xmlXPathRegisterAllFunctions(xmlXPathContextPtr ctxt)
{
}

void xmlXPathFreeContext(xmlXPathContextPtr ctxt)
{
  if (ctxt)
  {
    cache = (uint64_t *)ctxt->cache;
    if (cache) {
      xmlXPathFreeCache(cache);
    }
    xmlHashFree(ctxt->nsHash, (xmlHashDeallocator)xmlHashDefaultDeallocator);
    ctxt->nsHash = 0LL;
    xmlHashFree(ctxt->funcHash, 0LL);
    ctxt->funcHash = 0LL;
    xmlHashFree(ctxt->varHash, (xmlHashDeallocator)xmlXPathFreeObjectEntry);
    ctxt->varHash = 0LL;
    xmlResetError(&ctxt->lastError);
    xmlFree(ctxt);
  }

xmlXPathParserContextPtr xmlXPathNewParserContext(const xmlChar *str, xmlXPathContextPtr ctxt)
{
  xmlHashTablePtr v4 = (xmlXPathParserContext *)xmlMalloc(0x58uLL);
  unsigned int v5 = v4;
  if (v4)
  {
    *(_OWORD *)&v4->cur = 0u;
    *(_OWORD *)&v4->error = 0u;
    *(void *)&v4->valueFrame = 0LL;
    *(_OWORD *)&v4->valueTab = 0u;
    *(_OWORD *)&v4->xptr = 0u;
    *(_OWORD *)&v4->xmlXPathObjectPtr value = 0u;
    v4->cur = str;
    v4->int base = str;
    v4->xmlXPathContextPtr context = ctxt;
    unsigned int v6 = (xmlXPathCompExpr *)xmlXPathNewCompExpr();
    v5->comp = v6;
    if (v6)
    {
      if (ctxt)
      {
        dict = ctxt->dict;
        if (dict)
        {
          *((void *)v6 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = dict;
          xmlDictReference(dict);
        }
      }
    }

    else
    {
      xmlFree(v5->valueTab);
      xmlFree(v5);
      return 0LL;
    }
  }

  else
  {
    xmlXPathErrMemory((uint64_t)ctxt, "creating parser context\n");
  }

  return v5;
}

_OWORD *xmlXPathNewCompExpr()
{
  int v0 = xmlMalloc(0x30uLL);
  uint64_t v1 = v0;
  if (v0)
  {
    v0[1] = 0u;
    v0[2] = 0u;
    _OWORD *v0 = 0u;
    *(void *)int v0 = 0xA00000000LL;
    int v2 = xmlMalloc(0x230uLL);
    *((void *)v1 + xmlSAX2InitDefaultSAXHandler(&hdlr, 1) = v2;
    if (v2)
    {
      bzero(v2, 56LL * *((int *)v1 + 1));
      *((_DWORD *)v1 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = -1;
    }

    else
    {
      xmlXPathErrMemory(0LL, "allocating steps\n");
      xmlFree(v1);
      return 0LL;
    }
  }

  else
  {
    xmlXPathErrMemory(0LL, "allocating component\n");
  }

  return v1;
}

void xmlXPathFreeParserContext(xmlXPathParserContextPtr ctxt)
{
  valueTab = ctxt->valueTab;
  if (valueTab)
  {
    if (ctxt->valueNr >= 1)
    {
      uint64_t v3 = 0LL;
      do
      {
        xmlXPathContextPtr context = ctxt->context;
        unsigned int v5 = ctxt->valueTab;
        if (context) {
          xmlXPathReleaseObject((uint64_t)context, v5[v3]);
        }
        else {
          xmlXPathFreeObject(v5[v3]);
        }
        ++v3;
      }

      while (v3 < ctxt->valueNr);
      valueTab = ctxt->valueTab;
    }

    xmlFree(valueTab);
  }

  xmlXPathCompExprPtr comp = ctxt->comp;
  if (comp)
  {
    if (*((void *)comp + 5))
    {
      xmlFreePatternList(*((xmlPatternPtr *)comp + 5));
      xmlXPathCompExprPtr comp = ctxt->comp;
      *((void *)comp + 5) = 0LL;
    }

    xmlXPathFreeCompExpr(comp);
  }

  xmlFree(ctxt);
}

int xmlXPathEqualValues(xmlXPathParserContextPtr ctxt)
{
  if (!ctxt || !ctxt->context) {
    return 0;
  }
  int valueNr = ctxt->valueNr;
  unsigned int v3 = valueNr - 1;
  if (valueNr < 1)
  {
    unsigned int v5 = 0LL;
    goto LABEL_7;
  }

  ctxt->int valueNr = v3;
  valueTab = ctxt->valueTab;
  if (valueNr == 1)
  {
    ctxt->xmlXPathObjectPtr value = 0LL;
    unsigned int v5 = valueTab[v3];
    valueTab[v3] = 0LL;
LABEL_7:
    xmlXPathContextPtr context = ctxt->context;
LABEL_8:
    double v7 = v5;
LABEL_9:
    xmlXPathReleaseObject((uint64_t)context, v7);
    xmlXPathErr(ctxt, 10);
    return 0;
  }

  int v10 = 0LL;
  uint64_t v11 = (valueNr - 2);
  ctxt->xmlXPathObjectPtr value = valueTab[v11];
  unsigned int v5 = valueTab[v3];
  valueTab[v3] = 0LL;
  ctxt->int valueNr = v11;
  double v12 = ctxt->valueTab;
  if (valueNr != 2) {
    int v10 = v12[valueNr - 3];
  }
  ctxt->xmlXPathObjectPtr value = v10;
  double v7 = v12[v11];
  v12[v11] = 0LL;
  if (v7) {
    BOOL v13 = v5 == 0LL;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    xmlXPathContextPtr context = ctxt->context;
    if (v7) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }

  if (v7 == v5)
  {
    xmlXPathFreeObject(v5);
    return 1;
  }

  xmlXPathObjectType type = v5->type;
  if ((v5->type | 8) == 9)
  {
    xmlXPathObjectType v15 = v7->type;
LABEL_26:
    int v16 = v15 | 8;
    if ((v15 | 8) != 9) {
      xmlXPathObjectType type = v15;
    }
    if (v16 == 9) {
      double v17 = v7;
    }
    else {
      double v17 = v5;
    }
    if (v16 == 9) {
      unsigned int v18 = v5;
    }
    else {
      unsigned int v18 = v7;
    }
    switch(type)
    {
      case XPATH_NODESET:
      case XPATH_XSLT_TREE:
        int v21 = xmlXPathEqualNodeSets((uint64_t)v17, (uint64_t)v18, 0);
        goto LABEL_44;
      case XPATH_BOOLEAN:
        p_unint64_t nodeNr = &v17->nodesetval->nodeNr;
        if (p_nodeNr) {
          LODWORD(p_nodeNr) = *p_nodeNr != 0;
        }
        BOOL v8 = (_DWORD)p_nodeNr == v18->BOOLval;
        goto LABEL_45;
      case XPATH_NUMBER:
        int v21 = xmlXPathEqualNodeSetFloat((uint64_t)ctxt, (uint64_t)v17, 0, v18->floatval);
        goto LABEL_44;
      case XPATH_STRING:
        int v21 = xmlXPathEqualNodeSetString((uint64_t)v17, v18->stringval, 0);
LABEL_44:
        BOOL v8 = v21;
        goto LABEL_45;
      case XPATH_POINT:
      case XPATH_RANGE:
      case XPATH_LOCATIONSET:
      case XPATH_USERS:
        xmlGenericErrorFunc v19 = *__xmlGenericError();
        int v20 = __xmlGenericErrorContext();
        v19( *v20,  "Unimplemented block at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpath.c",  7158);
        goto LABEL_36;
      default:
LABEL_36:
        BOOL v8 = 0;
LABEL_45:
        xmlXPathReleaseObject((uint64_t)ctxt->context, v17);
        xmlXPathReleaseObject((uint64_t)ctxt->context, v18);
        break;
    }

    return v8;
  }

  xmlXPathObjectType v15 = v7->type;
  if ((v7->type | 8) == 9) {
    goto LABEL_26;
  }
  return xmlXPathEqualValuesCommon(ctxt, v7, v5);
}

uint64_t xmlXPathEqualNodeSets(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((*(_DWORD *)a1 | 8) != 9) {
    return 0LL;
  }
  if ((*(_DWORD *)a2 | 8) != 9) {
    return 0LL;
  }
  unsigned int v3 = *(unsigned int **)(a1 + 8);
  if (!v3) {
    return 0LL;
  }
  xmlHashTablePtr v4 = *(unsigned int **)(a2 + 8);
  uint64_t v5 = *v3;
  BOOL v6 = (int)v5 < 1 || v4 == 0LL;
  if (!a3)
  {
    uint64_t v23 = 0LL;
    do
    {
      uint64_t v24 = *v4;
      int v25 = (void *)*((void *)v4 + 1);
      do
      {
        if (*(void *)(*((void *)v3 + 1) + 8 * v23) == *v25) {
          return 1LL;
        }
        ++v25;
        --v24;
      }

      while (v24);
      ++v23;
    }

    while (v23 != v5);
  }

  BOOL v8 = xmlMalloc(8LL * (int)v5);
  if (!v8)
  {
    xmlXPathErrMemory(0LL, "comparing nodesets\n");
    return 0LL;
  }

  uint64_t v9 = v8;
  int v10 = xmlMalloc(4LL * (int)*v3);
  if (!v10)
  {
    xmlXPathErrMemory(0LL, "comparing nodesets\n");
    xmlFreeFunc v26 = xmlFree;
LABEL_42:
    ((void (*)(void *))v26)(v9);
    return 0LL;
  }

  uint64_t v11 = v10;
  bzero(v9, 8LL * (int)*v3);
  double v12 = xmlMalloc(8LL * (int)*v4);
  if (!v12)
  {
    xmlXPathErrMemory(0LL, "comparing nodesets\n");
    xmlFree(v11);
    xmlFreeFunc v26 = xmlFree;
    goto LABEL_42;
  }

  BOOL v13 = v12;
  unsigned int v14 = xmlMalloc(4LL * (int)*v4);
  if (!v14)
  {
    xmlXPathErrMemory(0LL, "comparing nodesets\n");
    xmlFree(v11);
    xmlFree(v9);
    ((void (*)(void *))xmlFree)(v13);
    return 0LL;
  }

  xmlXPathObjectType v15 = v14;
  bzero(v13, 8LL * (int)*v4);
  if ((int)*v3 < 1)
  {
    uint64_t v21 = 0LL;
    goto LABEL_54;
  }

  uint64_t v16 = 0LL;
  while (1)
  {
    *((_DWORD *)v11 + v16) = xmlXPathNodeValHash(*(xmlDoc **)(*((void *)v3 + 1) + 8 * v16));
LABEL_30:
    ++v16;
    uint64_t v22 = (int)*v3;
    if (v16 >= v22)
    {
      uint64_t v21 = 0LL;
      goto LABEL_49;
    }
  }

  uint64_t v17 = 0LL;
  while (1)
  {
    if (v16)
    {
      unsigned int v18 = v15[v17];
    }

    else
    {
      unsigned int v18 = xmlXPathNodeValHash(*(xmlDoc **)(*((void *)v4 + 1) + 8 * v17));
      v15[v17] = v18;
    }

    if (*((_DWORD *)v11 + v16) != v18) {
      break;
    }
    Content = (xmlChar *)*((void *)v9 + v16);
    if (!Content)
    {
      Content = xmlNodeGetContent(*(const xmlNode **)(*((void *)v3 + 1) + 8 * v16));
      *((void *)v9 + v16) = Content;
    }

    int v20 = (xmlChar *)*((void *)v13 + v17);
    if (!v20)
    {
      int v20 = xmlNodeGetContent(*(const xmlNode **)(*((void *)v4 + 1) + 8 * v17));
      *((void *)v13 + v17) = v20;
      Content = (xmlChar *)*((void *)v9 + v16);
    }

    uint64_t v21 = xmlStrEqual(Content, v20) ^ a3;
    if ((_DWORD)v21) {
      goto LABEL_48;
    }
LABEL_29:
  }

  if (!a3) {
    goto LABEL_29;
  }
  uint64_t v21 = 1LL;
LABEL_48:
  LODWORD(v22) = *v3;
LABEL_49:
  if ((int)v22 >= 1)
  {
    uint64_t v28 = 0LL;
    do
    {
      int v29 = (void *)*((void *)v9 + v28);
      if (v29)
      {
        xmlFree(v29);
        LODWORD(v22) = *v3;
      }

      ++v28;
    }

    while (v28 < (int)v22);
  }

uint64_t xmlXPathEqualNodeSetFloat(uint64_t a1, uint64_t a2, int a3, double a4)
{
  if ((*(_DWORD *)a2 | 8) != 9) {
    return 0LL;
  }
  xmlHashTablePtr v4 = *(int **)(a2 + 8);
  if (!v4 || *v4 < 1) {
    return 0LL;
  }
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  while (1)
  {
    Content = xmlNodeGetContent(*(const xmlNode **)(*((void *)v4 + 1) + 8 * v8));
    if (Content || (Content = xmlStrdup((const xmlChar *)&byte_181A3ACBA)) != 0LL)
    {
      uint64_t v11 = xmlXPathCacheNewString(*(void *)(a1 + 24), Content);
      valuePush((xmlXPathParserContextPtr)a1, v11);
      xmlFree(Content);
      xmlXPathNumberFunction((xmlXPathParserContextPtr)a1, 1);
      int v12 = *(_DWORD *)(a1 + 40);
      uint64_t v13 = *(void *)(a1 + 48);
      unsigned int v14 = v12 - 1;
      *(_DWORD *)(a1 + 4xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v12 - 1;
      uint64_t v15 = v12 == 1 ? 0LL : *(void *)(v13 + 8LL * (v12 - 2));
      *(void *)(a1 + 32) = v15;
      uint64_t v16 = *(xmlXPathObject **)(v13 + 8LL * v14);
      *(void *)(v13 + 8LL * v1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
      floatxmlSchemaValPtr val = v16->floatval;
      xmlXPathReleaseObject(*(void *)(a1 + 24), v16);
      BOOL v18 = floatval != a4;
      if (a3) {
        BOOL v18 = floatval == a4;
      }
      if (!v18) {
        break;
      }
    }

    if (++v8 >= *v4) {
      return v9;
    }
  }

  return 1LL;
}

uint64_t xmlXPathEqualNodeSetString(uint64_t a1, const xmlChar *a2, int a3)
{
  if (!a2) {
    return 0LL;
  }
  if ((*(_DWORD *)a1 | 8) != 9) {
    return 0LL;
  }
  unsigned int v3 = *(int **)(a1 + 8);
  if (!v3 || *v3 < 1) {
    return 0LL;
  }
  if (*a2) {
    int v6 = *a2 | (a2[1] << 8);
  }
  else {
    int v6 = 0;
  }
  uint64_t v8 = 0LL;
  while (xmlXPathNodeValHash(*(xmlDoc **)(*((void *)v3 + 1) + 8 * v8)) == v6)
  {
    Content = xmlNodeGetContent(*(const xmlNode **)(*((void *)v3 + 1) + 8 * v8));
    if (Content)
    {
      int v10 = Content;
      int v11 = xmlStrEqual(a2, Content);
      xmlFree(v10);
      if (!v11) {
        break;
      }
    }

    else if (!xmlStrEqual(a2, (const xmlChar *)&byte_181A3ACBA))
    {
      break;
    }

    if (!a3) {
      return 1LL;
    }
LABEL_17:
    if (++v8 >= *v3) {
      return 0LL;
    }
  }

  if (!a3) {
    goto LABEL_17;
  }
  return 1LL;
}

uint64_t xmlXPathEqualValuesCommon( xmlXPathParserContextPtr ctxt, xmlXPathObjectPtr obj, xmlXPathObjectPtr value)
{
  xmlXPathObjectPtr v3 = value;
  xmlXPathObjectPtr v4 = obj;
  switch(obj->type)
  {
    case XPATH_BOOLEAN:
      switch(value->type)
      {
        case XPATH_BOOLEAN:
          int BOOLval = obj->BOOLval;
          int v17 = value->BOOLval;
          goto LABEL_19;
        case XPATH_NUMBER:
          int BOOLval = obj->BOOLval;
          floatxmlSchemaValPtr val = value->floatval;
          goto LABEL_17;
        case XPATH_STRING:
          stringxmlSchemaValPtr val = value->stringval;
          if (stringval) {
            LODWORD(stringval) = *stringval != 0;
          }
          int v20 = obj->BOOLval;
          goto LABEL_28;
        case XPATH_POINT:
        case XPATH_RANGE:
        case XPATH_LOCATIONSET:
        case XPATH_USERS:
          xmlGenericErrorFunc v10 = *__xmlGenericError();
          int v11 = *__xmlGenericErrorContext();
          v10( v11,  "Unimplemented block at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpath.c",  6936);
          goto LABEL_3;
        default:
          goto LABEL_3;
      }

    case XPATH_NUMBER:
      switch(value->type)
      {
        case XPATH_BOOLEAN:
          int BOOLval = value->BOOLval;
          floatxmlSchemaValPtr val = obj->floatval;
LABEL_17:
          int v17 = floatval < 0.0;
LABEL_19:
          BOOL v21 = BOOLval == v17;
          goto LABEL_50;
        case XPATH_NUMBER:
          goto LABEL_40;
        case XPATH_STRING:
          valuePush(ctxt, value);
          xmlXPathNumberFunction(ctxt, 1);
          if (!ctxt || (valueNr = ctxt->valueNr, unsigned int v23 = valueNr - 1, valueNr < 1))
          {
            xmlXPathObjectPtr v3 = 0LL;
            goto LABEL_40;
          }

          ctxt->int valueNr = v23;
          valueTab = ctxt->valueTab;
          if (valueNr == 1) {
            xmlFreeFunc v26 = 0LL;
          }
          else {
            xmlFreeFunc v26 = valueTab[valueNr - 2];
          }
          ctxt->xmlXPathObjectPtr value = v26;
          xmlXPathObjectPtr v3 = valueTab[v23];
          break;
        case XPATH_POINT:
        case XPATH_RANGE:
        case XPATH_LOCATIONSET:
        case XPATH_USERS:
          xmlGenericErrorFunc v12 = *__xmlGenericError();
          uint64_t v13 = *__xmlGenericErrorContext();
          v12( v13,  "Unimplemented block at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpath.c",  6995);
          goto LABEL_3;
        default:
          goto LABEL_3;
      }

      goto LABEL_39;
    case XPATH_STRING:
      switch(value->type)
      {
        case XPATH_BOOLEAN:
          stringxmlSchemaValPtr val = obj->stringval;
          if (stringval) {
            LODWORD(stringval) = *stringval != 0;
          }
          int v20 = value->BOOLval;
LABEL_28:
          BOOL v21 = v20 == (_DWORD)stringval;
          goto LABEL_50;
        case XPATH_NUMBER:
          valuePush(ctxt, obj);
          xmlXPathNumberFunction(ctxt, 1);
          if (!ctxt || (v25 = ctxt->valueNr, unsigned int v23 = v25 - 1, v25 < 1))
          {
            xmlXPathObjectPtr v4 = 0LL;
            goto LABEL_40;
          }

          ctxt->int valueNr = v23;
          valueTab = ctxt->valueTab;
          if (v25 == 1) {
            __int128 v27 = 0LL;
          }
          else {
            __int128 v27 = valueTab[v25 - 2];
          }
          ctxt->xmlXPathObjectPtr value = v27;
          xmlXPathObjectPtr v4 = valueTab[v23];
          break;
        case XPATH_STRING:
          uint64_t v8 = xmlStrEqual(obj->stringval, value->stringval);
          goto LABEL_4;
        case XPATH_POINT:
        case XPATH_RANGE:
        case XPATH_LOCATIONSET:
        case XPATH_USERS:
          xmlGenericErrorFunc v14 = *__xmlGenericError();
          uint64_t v15 = *__xmlGenericErrorContext();
          v14( v15,  "Unimplemented block at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpath.c",  7058);
          goto LABEL_3;
        default:
          goto LABEL_3;
      }

int xmlXPathNotEqualValues(xmlXPathParserContextPtr ctxt)
{
  if (!ctxt || !ctxt->context) {
    return 0;
  }
  int valueNr = ctxt->valueNr;
  unsigned int v3 = valueNr - 1;
  if (valueNr < 1)
  {
    uint64_t v5 = 0LL;
    goto LABEL_7;
  }

  ctxt->int valueNr = v3;
  valueTab = ctxt->valueTab;
  if (valueNr == 1)
  {
    ctxt->xmlXPathObjectPtr value = 0LL;
    uint64_t v5 = valueTab[v3];
    valueTab[v3] = 0LL;
LABEL_7:
    xmlXPathContextPtr context = ctxt->context;
LABEL_8:
    double v7 = v5;
LABEL_9:
    xmlXPathReleaseObject((uint64_t)context, v7);
    xmlXPathErr(ctxt, 10);
    return 0;
  }

  xmlGenericErrorFunc v10 = 0LL;
  uint64_t v11 = (valueNr - 2);
  ctxt->xmlXPathObjectPtr value = valueTab[v11];
  uint64_t v5 = valueTab[v3];
  valueTab[v3] = 0LL;
  ctxt->int valueNr = v11;
  xmlGenericErrorFunc v12 = ctxt->valueTab;
  if (valueNr != 2) {
    xmlGenericErrorFunc v10 = v12[valueNr - 3];
  }
  ctxt->xmlXPathObjectPtr value = v10;
  double v7 = v12[v11];
  v12[v11] = 0LL;
  if (v7) {
    BOOL v13 = v5 == 0LL;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    xmlXPathContextPtr context = ctxt->context;
    if (v7) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }

  if (v7 == v5)
  {
    xmlXPathReleaseObject((uint64_t)ctxt->context, v5);
    return 0;
  }

  xmlXPathObjectType type = v5->type;
  if ((v5->type | 8) == 9)
  {
    xmlXPathObjectType v15 = v7->type;
  }

  else
  {
    xmlXPathObjectType v15 = v7->type;
    if ((v7->type | 8) != 9) {
      return xmlXPathEqualValuesCommon(ctxt, v7, v5) == 0;
    }
  }

  int v16 = v15 | 8;
  if ((v15 | 8) != 9) {
    xmlXPathObjectType type = v15;
  }
  if (v16 == 9) {
    int v17 = v7;
  }
  else {
    int v17 = v5;
  }
  if (v16 == 9) {
    BOOL v18 = v5;
  }
  else {
    BOOL v18 = v7;
  }
  switch(type)
  {
    case XPATH_NODESET:
    case XPATH_XSLT_TREE:
      int v21 = xmlXPathEqualNodeSets((uint64_t)v17, (uint64_t)v18, 1u);
      goto LABEL_44;
    case XPATH_BOOLEAN:
      p_unint64_t nodeNr = &v17->nodesetval->nodeNr;
      if (p_nodeNr) {
        LODWORD(p_nodeNr) = *p_nodeNr != 0;
      }
      BOOL v8 = (_DWORD)p_nodeNr != v18->BOOLval;
      goto LABEL_45;
    case XPATH_NUMBER:
      int v21 = xmlXPathEqualNodeSetFloat((uint64_t)ctxt, (uint64_t)v17, 1, v18->floatval);
      goto LABEL_44;
    case XPATH_STRING:
      int v21 = xmlXPathEqualNodeSetString((uint64_t)v17, v18->stringval, 1);
LABEL_44:
      BOOL v8 = v21;
      goto LABEL_45;
    case XPATH_POINT:
    case XPATH_RANGE:
    case XPATH_LOCATIONSET:
    case XPATH_USERS:
      xmlGenericErrorFunc v19 = *__xmlGenericError();
      int v20 = __xmlGenericErrorContext();
      v19(*v20, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpath.c", 7245);
      goto LABEL_36;
    default:
LABEL_36:
      BOOL v8 = 0;
LABEL_45:
      xmlXPathReleaseObject((uint64_t)ctxt->context, v17);
      xmlXPathReleaseObject((uint64_t)ctxt->context, v18);
      break;
  }

  return v8;
}

int xmlXPathCompareValues(xmlXPathParserContextPtr ctxt, int inf, int strict)
{
  if (!ctxt || !ctxt->context) {
    return 0;
  }
  int valueNr = ctxt->valueNr;
  unsigned int v5 = valueNr - 1;
  if (valueNr < 1)
  {
    double v7 = 0LL;
    goto LABEL_7;
  }

  ctxt->int valueNr = v5;
  valueTab = ctxt->valueTab;
  if (valueNr == 1)
  {
    ctxt->xmlXPathObjectPtr value = 0LL;
    double v7 = valueTab[v5];
    valueTab[v5] = 0LL;
LABEL_7:
    xmlXPathContextPtr context = ctxt->context;
    goto LABEL_8;
  }

  int v13 = inf;
  xmlGenericErrorFunc v14 = 0LL;
  uint64_t v15 = (valueNr - 2);
  ctxt->xmlXPathObjectPtr value = valueTab[v15];
  double v7 = valueTab[v5];
  valueTab[v5] = 0LL;
  ctxt->int valueNr = v15;
  int v16 = ctxt->valueTab;
  if (valueNr != 2) {
    xmlGenericErrorFunc v14 = v16[valueNr - 3];
  }
  ctxt->xmlXPathObjectPtr value = v14;
  int v17 = v16[v15];
  v16[v15] = 0LL;
  if (v17) {
    BOOL v18 = v7 == 0LL;
  }
  else {
    BOOL v18 = 1;
  }
  if (v18)
  {
    xmlXPathContextPtr context = ctxt->context;
    if (v17)
    {
      uint64_t v9 = v17;
      goto LABEL_9;
    }

uint64_t xmlXPathCompareNodeSets(int a1, int a2, xmlXPathObjectPtr obj, xmlXPathObjectPtr a4)
{
  if ((obj->type | 8) != 9) {
    goto LABEL_41;
  }
  if ((a4->type | 8) != 9
    || (xmlNodeSetPtr nodesetval = obj->nodesetval) == 0LL
    || nodesetval->nodeNr <= 0
    || (xmlNodeSetPtr v7 = a4->nodesetval) == 0LL
    || (uint64_t nodeNr = v7->nodeNr, (int)nodeNr <= 0))
  {
LABEL_40:
    xmlXPathFreeObject(obj);
LABEL_41:
    xmlXPathFreeObject(a4);
    return 0LL;
  }

  uint64_t v11 = (double *)xmlMalloc(8 * nodeNr);
  if (!v11)
  {
    xmlXPathErrMemory(0LL, "comparing nodesets\n");
    goto LABEL_40;
  }

  xmlGenericErrorFunc v12 = v11;
  if (nodesetval->nodeNr < 1)
  {
LABEL_38:
    uint64_t v23 = 0LL;
    goto LABEL_44;
  }

  uint64_t v13 = 0LL;
  int v14 = 0;
  if (a2) {
    BOOL v15 = a1 != 0;
  }
  else {
    BOOL v15 = 0;
  }
  if (a2) {
    BOOL v16 = 1;
  }
  else {
    BOOL v16 = a1 == 0;
  }
  if (a2) {
    BOOL v17 = a1 == 0;
  }
  else {
    BOOL v17 = 0;
  }
  BOOL v25 = v17;
  BOOL v26 = v16;
  int v18 = a2 | a1;
  while (1)
  {
    double v19 = xmlXPathCastNodeToNumber(nodesetval->nodeTab[v13]);
    if (v7->nodeNr >= 1) {
      break;
    }
LABEL_37:
    int v14 = 1;
    if (++v13 >= nodesetval->nodeNr) {
      goto LABEL_38;
    }
  }

  double v20 = v19;
  uint64_t v21 = 0LL;
  while (1)
  {
    if (v14)
    {
      double v22 = v12[v21];
    }

    else
    {
      double v22 = xmlXPathCastNodeToNumber(v7->nodeTab[v21]);
      v12[v21] = v22;
    }

    if (v15)
    {
      if (v20 < v22) {
        goto LABEL_43;
      }
      goto LABEL_32;
    }

    if (v26) {
      break;
    }
    if (v20 <= v22) {
      goto LABEL_43;
    }
LABEL_32:
    if (++v21 >= v7->nodeNr) {
      goto LABEL_37;
    }
  }

  if (v25)
  {
    if (v20 > v22) {
      goto LABEL_43;
    }
    goto LABEL_32;
  }

  if (v18 || v20 < v22) {
    goto LABEL_32;
  }
LABEL_43:
  uint64_t v23 = 1LL;
LABEL_44:
  xmlFree(v12);
  xmlXPathFreeObject(obj);
  xmlXPathFreeObject(a4);
  return v23;
}

uint64_t xmlXPathCompareNodeSetValue( xmlXPathParserContextPtr ctxt, int a2, int a3, xmlXPathObjectPtr obj, xmlXPathObjectPtr a5)
{
  xmlXPathObjectType type = obj->type;
  if ((obj->type | 8) != 9) {
    return 0LL;
  }
  switch(a5->type)
  {
    case XPATH_NODESET:
    case XPATH_XSLT_TREE:
      return xmlXPathCompareNodeSets(a2, a3, obj, a5);
    case XPATH_BOOLEAN:
      valuePush(ctxt, obj);
      xmlXPathBooleanFunction(ctxt, 1);
      valuePush(ctxt, a5);
      return xmlXPathCompareValues(ctxt, a2, a3);
    case XPATH_NUMBER:
      if ((type | 8) != 9) {
        goto LABEL_25;
      }
      xmlNodeSetPtr nodesetval = obj->nodesetval;
      if (!nodesetval || nodesetval->nodeNr < 1) {
        goto LABEL_22;
      }
      uint64_t v13 = 0LL;
      break;
    case XPATH_STRING:
      if ((type | 8) != 9)
      {
LABEL_25:
        xmlXPathReleaseObject((uint64_t)ctxt->context, obj);
        xmlXPathReleaseObject((uint64_t)ctxt->context, a5);
        return 0LL;
      }

      xmlNodeSetPtr v18 = obj->nodesetval;
      if (!v18 || v18->nodeNr < 1) {
        goto LABEL_22;
      }
      uint64_t v19 = 0LL;
      while (1)
      {
        Content = xmlNodeGetContent(v18->nodeTab[v19]);
        if (Content || (Content = xmlStrdup((const xmlChar *)&byte_181A3ACBA)) != 0LL)
        {
          uint64_t v21 = xmlXPathCacheNewString((uint64_t)ctxt->context, Content);
          valuePush(ctxt, v21);
          xmlFree(Content);
          double v22 = xmlXPathCacheObjectCopy((uint64_t)ctxt->context, a5);
          valuePush(ctxt, v22);
          uint64_t v17 = xmlXPathCompareValues(ctxt, a2, a3);
          if ((_DWORD)v17) {
            goto LABEL_28;
          }
        }

        if (++v19 >= v18->nodeNr) {
          goto LABEL_22;
        }
      }

    default:
      xmlGenericErrorFunc v24 = *__xmlGenericError();
      BOOL v25 = __xmlGenericErrorContext();
      v24(*v25, "xmlXPathCompareNodeSetValue: Can't compare node set and object of type %d\n", a5->type);
      xmlXPathReleaseObject((uint64_t)ctxt->context, obj);
      xmlXPathReleaseObject((uint64_t)ctxt->context, a5);
      xmlXPathErr(ctxt, 11);
      return 0LL;
  }

  while (1)
  {
    int v14 = xmlNodeGetContent(nodesetval->nodeTab[v13]);
    if (v14 || (int v14 = xmlStrdup((const xmlChar *)&byte_181A3ACBA)) != 0LL)
    {
      BOOL v15 = xmlXPathCacheNewString((uint64_t)ctxt->context, v14);
      valuePush(ctxt, v15);
      xmlFree(v14);
      xmlXPathNumberFunction(ctxt, 1);
      BOOL v16 = xmlXPathCacheObjectCopy((uint64_t)ctxt->context, a5);
      valuePush(ctxt, v16);
      uint64_t v17 = xmlXPathCompareValues(ctxt, a2, a3);
      if ((_DWORD)v17) {
        break;
      }
    }

    if (++v13 >= nodesetval->nodeNr)
    {
LABEL_22:
      uint64_t v23 = 0LL;
      goto LABEL_23;
    }
  }

void xmlXPathNumberFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  if (ctxt)
  {
    if (nargs == 1)
    {
      int valueNr = ctxt->valueNr;
      if (valueNr > 0)
      {
        valueTab = ctxt->valueTab;
        int v9 = valueNr - 1;
        ctxt->int valueNr = valueNr - 1;
        if (valueNr == 1) {
          int v10 = 0LL;
        }
        else {
          int v10 = valueTab[valueNr - 2];
        }
        ctxt->xmlXPathObjectPtr value = v10;
        int v14 = valueTab[v9];
        valueTab[v9] = 0LL;
        xmlXPathContextPtr context = ctxt->context;
        if (v14)
        {
          if (v14->type != XPATH_NUMBER)
          {
            double v16 = xmlXPathCastToNumber(v14);
            xmlXPathObjectPtr v17 = xmlXPathCacheNewFloat(v16, (uint64_t)context);
            xmlXPathReleaseObject((uint64_t)context, v14);
            int v14 = v17;
          }
        }

        else
        {
          int v14 = xmlXPathCacheNewFloat(0.0, (uint64_t)ctxt->context);
        }

        uint64_t v13 = ctxt;
        xmlGenericErrorFunc v12 = v14;
LABEL_20:
        valuePush(v13, v12);
        return;
      }

      int v11 = 23;
    }

    else
    {
      if (!nargs)
      {
        xmlXPathContextPtr v3 = ctxt->context;
        if (v3->node)
        {
          Content = xmlNodeGetContent(v3->node);
          double v5 = xmlXPathStringEvalNumber(Content);
          xmlGenericErrorFunc v6 = xmlXPathCacheNewFloat(v5, (uint64_t)ctxt->context);
          valuePush(ctxt, v6);
          xmlFree(Content);
          return;
        }

        xmlGenericErrorFunc v12 = xmlXPathCacheNewFloat(0.0, (uint64_t)v3);
        uint64_t v13 = ctxt;
        goto LABEL_20;
      }

      int v11 = 12;
    }

    xmlXPathErr(ctxt, v11);
  }

void xmlXPathValueFlipSign(xmlXPathParserContextPtr ctxt)
{
  if (ctxt && ctxt->context)
  {
    xmlXPathObjectPtr value = ctxt->value;
    if (value
      && (value->type == XPATH_NUMBER
       || (xmlXPathNumberFunction(ctxt, 1), (xmlXPathObjectPtr value = ctxt->value) != 0LL) && value->type == XPATH_NUMBER))
    {
      value->floatxmlSchemaValPtr val = -value->floatval;
    }

    else
    {
      xmlXPathErr(ctxt, 11);
    }
  }

void xmlXPathAddValues(xmlXPathParserContextPtr ctxt)
{
  xmlXPathParserContextPtr v1 = ctxt;
  if (!ctxt) {
    goto LABEL_12;
  }
  int valueNr = ctxt->valueNr;
  unsigned int v3 = valueNr - 1;
  if (valueNr < 1) {
    goto LABEL_12;
  }
  ctxt->int valueNr = v3;
  valueTab = ctxt->valueTab;
  double v5 = valueNr == 1 ? 0LL : valueTab[valueNr - 2];
  ctxt->xmlXPathObjectPtr value = v5;
  xmlGenericErrorFunc v6 = valueTab[v3];
  valueTab[v3] = 0LL;
  if (v6)
  {
    double v7 = xmlXPathCastToNumber(v6);
    xmlXPathReleaseObject((uint64_t)v1->context, v6);
    xmlXPathObjectPtr value = v1->value;
    if (value)
    {
      if (value->type == XPATH_NUMBER
        || (xmlXPathNumberFunction(v1, 1), (xmlXPathObjectPtr value = v1->value) != 0LL) && value->type == XPATH_NUMBER)
      {
        value->floatxmlSchemaValPtr val = v7 + value->floatval;
        return;
      }
    }

    xmlValidCtxt ctxt = v1;
    int v9 = 11;
  }

  else
  {
LABEL_12:
    int v9 = 10;
  }

  xmlXPathErr(ctxt, v9);
}

void xmlXPathSubValues(xmlXPathParserContextPtr ctxt)
{
  xmlXPathParserContextPtr v1 = ctxt;
  if (!ctxt) {
    goto LABEL_12;
  }
  int valueNr = ctxt->valueNr;
  unsigned int v3 = valueNr - 1;
  if (valueNr < 1) {
    goto LABEL_12;
  }
  ctxt->int valueNr = v3;
  valueTab = ctxt->valueTab;
  double v5 = valueNr == 1 ? 0LL : valueTab[valueNr - 2];
  ctxt->xmlXPathObjectPtr value = v5;
  xmlGenericErrorFunc v6 = valueTab[v3];
  valueTab[v3] = 0LL;
  if (v6)
  {
    double v7 = xmlXPathCastToNumber(v6);
    xmlXPathReleaseObject((uint64_t)v1->context, v6);
    xmlXPathObjectPtr value = v1->value;
    if (value)
    {
      if (value->type == XPATH_NUMBER
        || (xmlXPathNumberFunction(v1, 1), (xmlXPathObjectPtr value = v1->value) != 0LL) && value->type == XPATH_NUMBER)
      {
        value->floatxmlSchemaValPtr val = value->floatval - v7;
        return;
      }
    }

    xmlValidCtxt ctxt = v1;
    int v9 = 11;
  }

  else
  {
LABEL_12:
    int v9 = 10;
  }

  xmlXPathErr(ctxt, v9);
}

void xmlXPathMultValues(xmlXPathParserContextPtr ctxt)
{
  xmlXPathParserContextPtr v1 = ctxt;
  if (!ctxt) {
    goto LABEL_12;
  }
  int valueNr = ctxt->valueNr;
  unsigned int v3 = valueNr - 1;
  if (valueNr < 1) {
    goto LABEL_12;
  }
  ctxt->int valueNr = v3;
  valueTab = ctxt->valueTab;
  double v5 = valueNr == 1 ? 0LL : valueTab[valueNr - 2];
  ctxt->xmlXPathObjectPtr value = v5;
  xmlGenericErrorFunc v6 = valueTab[v3];
  valueTab[v3] = 0LL;
  if (v6)
  {
    double v7 = xmlXPathCastToNumber(v6);
    xmlXPathReleaseObject((uint64_t)v1->context, v6);
    xmlXPathObjectPtr value = v1->value;
    if (value)
    {
      if (value->type == XPATH_NUMBER
        || (xmlXPathNumberFunction(v1, 1), (xmlXPathObjectPtr value = v1->value) != 0LL) && value->type == XPATH_NUMBER)
      {
        value->floatxmlSchemaValPtr val = v7 * value->floatval;
        return;
      }
    }

    xmlValidCtxt ctxt = v1;
    int v9 = 11;
  }

  else
  {
LABEL_12:
    int v9 = 10;
  }

  xmlXPathErr(ctxt, v9);
}

void xmlXPathDivValues(xmlXPathParserContextPtr ctxt)
{
  xmlXPathParserContextPtr v1 = ctxt;
  if (!ctxt) {
    goto LABEL_12;
  }
  int valueNr = ctxt->valueNr;
  unsigned int v3 = valueNr - 1;
  if (valueNr < 1) {
    goto LABEL_12;
  }
  ctxt->int valueNr = v3;
  valueTab = ctxt->valueTab;
  double v5 = valueNr == 1 ? 0LL : valueTab[valueNr - 2];
  ctxt->xmlXPathObjectPtr value = v5;
  xmlGenericErrorFunc v6 = valueTab[v3];
  valueTab[v3] = 0LL;
  if (v6)
  {
    double v7 = xmlXPathCastToNumber(v6);
    xmlXPathReleaseObject((uint64_t)v1->context, v6);
    xmlXPathObjectPtr value = v1->value;
    if (value)
    {
      if (value->type == XPATH_NUMBER
        || (xmlXPathNumberFunction(v1, 1), (xmlXPathObjectPtr value = v1->value) != 0LL) && value->type == XPATH_NUMBER)
      {
        value->floatxmlSchemaValPtr val = value->floatval / v7;
        return;
      }
    }

    xmlValidCtxt ctxt = v1;
    int v9 = 11;
  }

  else
  {
LABEL_12:
    int v9 = 10;
  }

  xmlXPathErr(ctxt, v9);
}

void xmlXPathModValues(xmlXPathParserContextPtr ctxt)
{
  xmlXPathParserContextPtr v1 = ctxt;
  if (!ctxt) {
    goto LABEL_13;
  }
  int valueNr = ctxt->valueNr;
  unsigned int v3 = valueNr - 1;
  if (valueNr < 1) {
    goto LABEL_13;
  }
  ctxt->int valueNr = v3;
  valueTab = ctxt->valueTab;
  double v5 = valueNr == 1 ? 0LL : valueTab[valueNr - 2];
  ctxt->xmlXPathObjectPtr value = v5;
  xmlGenericErrorFunc v6 = valueTab[v3];
  valueTab[v3] = 0LL;
  if (!v6)
  {
LABEL_13:
    int v10 = 10;
LABEL_14:
    xmlXPathErr(ctxt, v10);
    return;
  }

  double v7 = xmlXPathCastToNumber(v6);
  xmlXPathReleaseObject((uint64_t)v1->context, v6);
  xmlXPathObjectPtr value = v1->value;
  if (!value
    || value->type != XPATH_NUMBER
    && ((xmlXPathNumberFunction(v1, 1), (xmlXPathObjectPtr value = v1->value) == 0LL) || value->type != XPATH_NUMBER))
  {
    xmlValidCtxt ctxt = v1;
    int v10 = 11;
    goto LABEL_14;
  }

  if (v7 == 0.0) {
    double v9 = xmlXPathNAN;
  }
  else {
    double v9 = fmod(value->floatval, v7);
  }
  value->floatxmlSchemaValPtr val = v9;
}

xmlNodePtr xmlXPathNextSelf(xmlNodePtr ctxt, xmlNodePtr cur)
{
  if (ctxt)
  {
    xmlNodePtr v2 = ctxt;
    xmlValidCtxt ctxt = 0LL;
    if (!cur)
    {
      childreuint64_t n = v2->children;
      if (children) {
        return *(xmlNodePtr *)&children->type;
      }
    }
  }

  return ctxt;
}

xmlNodePtr xmlXPathNextChild(xmlNodePtr ctxt, xmlNodePtr cur)
{
  if (ctxt)
  {
    childreuint64_t n = ctxt->children;
    if (!children) {
      return 0LL;
    }
    if (cur)
    {
      if ((cur->type | 4) != 0xD)
      {
        p_xmlNodePtr next = &cur->next;
        return *p_next;
      }

      return 0LL;
    }

    uint64_t v4 = *(void *)&children->type;
    if (!v4) {
      return 0LL;
    }
    xmlValidCtxt ctxt = 0LL;
    unsigned int v5 = *(_DWORD *)(v4 + 8);
    if (v5 <= 0x15)
    {
      int v6 = 1 << v5;
      if ((v6 & 0x51FA) != 0 || (v6 & 0x202E00) != 0)
      {
        p_xmlNodePtr next = (_xmlNode **)(v4 + 24);
        return *p_next;
      }
    }
  }

  return ctxt;
}

xmlNodePtr xmlXPathNextDescendant(xmlXPathParserContextPtr ctxt, xmlNodePtr cur)
{
  if (!ctxt) {
    return 0LL;
  }
  xmlXPathContextPtr context = ctxt->context;
  if (!context) {
    return 0LL;
  }
  if (!cur)
  {
    xmlNodePtr node = context->node;
    if (node && (node->type | 0x10) != 0x12) {
      return node->children;
    }
    return 0LL;
  }

  if (cur->type == XML_NAMESPACE_DECL) {
    return 0LL;
  }
  childreuint64_t n = cur->children;
  if (!children || (xmlElementType v4 = children->type, v4 == XML_ENTITY_DECL) || (cur = cur->children, v4 == XML_DTD_NODE))
  {
    unsigned int v5 = context->node;
    if (cur != v5)
    {
      while (1)
      {
        xmlNodePtr next = cur->next;
        if (!next) {
          break;
        }
        cur = cur->next;
        xmlElementType type = next->type;
        if (type != XML_ENTITY_DECL && type != XML_DTD_NODE) {
          return cur;
        }
      }

      xmlNodePtr v11 = cur;
      while (1)
      {
        xmlNodePtr v11 = v11->parent;
        if (!v11 || v11 == v5) {
          break;
        }
        cur = v11->next;
        if (cur) {
          return cur;
        }
      }
    }

    return 0LL;
  }

  return cur;
}

xmlNodePtr xmlXPathNextDescendantOrSelf(xmlNodePtr ctxt, xmlNodePtr cur)
{
  if (ctxt)
  {
    xmlNodePtr v2 = (xmlXPathParserContext *)ctxt;
    childreuint64_t n = ctxt->children;
    if (!children) {
      return 0LL;
    }
    xmlValidCtxt ctxt = *(xmlNodePtr *)&children->type;
    if (cur && ctxt)
    {
      if ((ctxt->type | 0x10) != 0x12) {
        return xmlXPathNextDescendant(v2, cur);
      }
      return 0LL;
    }
  }

  return ctxt;
}

xmlNodePtr xmlXPathNextParent(xmlNodePtr ctxt, xmlNodePtr cur)
{
  if (ctxt)
  {
    xmlNodePtr v2 = ctxt;
    xmlValidCtxt ctxt = 0LL;
    if (!cur)
    {
      childreuint64_t n = v2->children;
      if (children)
      {
        uint64_t v4 = *(void *)&children->type;
        if (!v4) {
          return 0LL;
        }
        xmlValidCtxt ctxt = 0LL;
        unsigned int v5 = *(_DWORD *)(v4 + 8);
        if (v5 > 0x14) {
          return ctxt;
        }
        if (((1 << v5) & 0x1BD1FA) != 0)
        {
          xmlValidCtxt ctxt = *(xmlNodePtr *)(v4 + 40);
          if (!ctxt) {
            return (xmlNodePtr)children->_private;
          }
          if (ctxt->type == XML_ELEMENT_NODE)
          {
            name = ctxt->name;
            if (*name != 32 && !xmlStrEqual(name, (const xmlChar *)"fake node libxslt"))
            {
              uint64_t v4 = *(void *)&v2->children->type;
              return *(xmlNodePtr *)(v4 + 40);
            }

            return 0LL;
          }
        }

        else
        {
          if (v5 == 2) {
            return *(xmlNodePtr *)(v4 + 40);
          }
          if (v5 == 18)
          {
            xmlValidCtxt ctxt = *(xmlNodePtr *)v4;
            if (!*(void *)v4 || ctxt->type == XML_NAMESPACE_DECL) {
              return 0LL;
            }
          }
        }
      }
    }
  }

  return ctxt;
}

xmlNodePtr xmlXPathNextAncestor(xmlNodePtr ctxt, xmlNodePtr cur)
{
  if (!ctxt) {
    return ctxt;
  }
  xmlNodePtr v2 = ctxt;
  childreuint64_t n = ctxt->children;
  if (!children) {
    return 0LL;
  }
  if (!cur)
  {
    uint64_t v7 = *(void *)&children->type;
    if (!v7) {
      return 0LL;
    }
    xmlValidCtxt ctxt = 0LL;
    unsigned int v8 = *(_DWORD *)(v7 + 8);
    if (v8 > 0x14) {
      return ctxt;
    }
    if (((1 << v8) & 0x1BD1FA) != 0)
    {
      xmlValidCtxt ctxt = *(xmlNodePtr *)(v7 + 40);
      if (!ctxt) {
        return (xmlNodePtr)children->_private;
      }
      if (ctxt->type != XML_ELEMENT_NODE) {
        return ctxt;
      }
      name = ctxt->name;
      if (*name != 32 && !xmlStrEqual(name, (const xmlChar *)"fake node libxslt")) {
        return *(xmlNodePtr *)(*(void *)&v2->children->type + 40LL);
      }
      return 0LL;
    }

    if (v8 == 2) {
      return *(xmlNodePtr *)(v7 + 40);
    }
    if (v8 != 18) {
      return ctxt;
    }
    xmlValidCtxt ctxt = *(xmlNodePtr *)v7;
    if (!*(void *)v7) {
      return 0LL;
    }
LABEL_29:
    if (ctxt->type != XML_NAMESPACE_DECL) {
      return ctxt;
    }
    return 0LL;
  }

  xmlValidCtxt ctxt = (xmlNodePtr)children->_private;
  if (*((xmlNodePtr *)children->_private + 3) == cur) {
    return ctxt;
  }
  if (ctxt == cur) {
    return 0LL;
  }
  xmlValidCtxt ctxt = 0LL;
  xmlElementType type = cur->type;
  if (type > XML_XINCLUDE_END) {
    return ctxt;
  }
  if (((1 << type) & 0x1BD1FA) == 0)
  {
    if (type == XML_ATTRIBUTE_NODE) {
      return cur->parent;
    }
    if (type != XML_NAMESPACE_DECL) {
      return ctxt;
    }
    xmlValidCtxt ctxt = (xmlNodePtr)cur->_private;
    if (!cur->_private) {
      return 0LL;
    }
    goto LABEL_29;
  }

  xmlValidCtxt ctxt = cur->parent;
  if (ctxt && ctxt->type == XML_ELEMENT_NODE)
  {
    int v6 = ctxt->name;
    if (*v6 != 32 && !xmlStrEqual(v6, (const xmlChar *)"fake node libxslt")) {
      return cur->parent;
    }
    return 0LL;
  }

  return ctxt;
}

xmlNodePtr xmlXPathNextAncestorOrSelf(xmlNodePtr ctxt, xmlNodePtr cur)
{
  if (ctxt)
  {
    childreuint64_t n = ctxt->children;
    if (children)
    {
      if (cur) {
        return xmlXPathNextAncestor((xmlXPathParserContextPtr)ctxt, cur);
      }
      else {
        return *(xmlNodePtr *)&children->type;
      }
    }

    else
    {
      return 0LL;
    }
  }

  return ctxt;
}

xmlNodePtr xmlXPathNextFollowingSibling(xmlNodePtr ctxt, xmlNodePtr cur)
{
  if (ctxt)
  {
    childreuint64_t n = ctxt->children;
    if (!children) {
      return 0LL;
    }
    xmlNodePtr v3 = *(xmlNodePtr *)&children->type;
    if ((v3->type | 0x10) == 0x12 || children->_private == cur)
    {
      return 0LL;
    }

    else
    {
      if (cur) {
        xmlNodePtr v3 = cur;
      }
      return v3->next;
    }
  }

  return ctxt;
}

xmlNodePtr xmlXPathNextPrecedingSibling(xmlNodePtr ctxt, xmlNodePtr cur)
{
  if (ctxt)
  {
    childreuint64_t n = ctxt->children;
    if (children)
    {
      prev = *(_xmlNode **)&children->type;
      if ((prev->type | 0x10) != 0x12 && children->_private != cur)
      {
        if (!cur) {
          return prev->prev;
        }
        prev = cur->prev;
        if (prev)
        {
          if (prev->type != XML_DTD_NODE) {
            prev = cur;
          }
          return prev->prev;
        }
      }
    }

    return 0LL;
  }

  return ctxt;
}

xmlNodePtr xmlXPathNextFollowing(xmlNodePtr ctxt, xmlNodePtr cur)
{
  if (!ctxt) {
    return ctxt;
  }
  childreuint64_t n = (xmlNodePtr *)ctxt->children;
  if (!children) {
    return 0LL;
  }
  if (cur)
  {
    if ((cur->type | 0x10) == 0x12) {
      goto LABEL_13;
    }
    xmlValidCtxt ctxt = cur->children;
    if (!ctxt) {
      goto LABEL_13;
    }
    return ctxt;
  }

  cur = children[1];
  xmlElementType type = cur->type;
  if (type == XML_ATTRIBUTE_NODE)
  {
    cur = cur->parent;
    if (cur) {
      goto LABEL_13;
    }
    return 0LL;
  }

  if (type == XML_NAMESPACE_DECL)
  {
    cur = (xmlNodePtr)cur->_private;
    if (!cur || cur->type == XML_NAMESPACE_DECL) {
      return 0LL;
    }
  }

xmlNodePtr xmlXPathNextPreceding(xmlXPathParserContextPtr ctxt, xmlNodePtr cur)
{
  if (!ctxt) {
    return 0LL;
  }
  xmlXPathContextPtr context = ctxt->context;
  if (!context) {
    return 0LL;
  }
  if (!cur)
  {
    cur = context->node;
    xmlElementType type = cur->type;
    if (type == XML_ATTRIBUTE_NODE)
    {
      cur = cur->parent;
      if (!cur) {
        return cur;
      }
    }

    else if (type == XML_NAMESPACE_DECL)
    {
      cur = (xmlNodePtr)cur->_private;
      if (!cur) {
        return cur;
      }
      if (cur->type == XML_NAMESPACE_DECL) {
        return 0LL;
      }
    }
  }

  if (cur->type == XML_NAMESPACE_DECL) {
    return 0LL;
  }
  prev = cur->prev;
  if (!prev) {
    goto LABEL_19;
  }
  if (prev->type == XML_DTD_NODE) {
    cur = cur->prev;
  }
  do
  {
LABEL_18:
    int v6 = cur->prev;
    if (v6)
    {
      do
      {
        cur = v6;
        int v6 = v6->last;
      }

      while (v6);
      return cur;
    }

xmlNodePtr xmlXPathNextNamespace(xmlNodePtr ctxt, xmlNodePtr cur)
{
  if (ctxt)
  {
    xmlNodePtr v2 = ctxt;
    childreuint64_t n = ctxt->children;
    if (children && (uint64_t v5 = *(void *)&children->type, *(_DWORD *)(v5 + 8) == 1))
    {
      if (cur)
      {
        int properties = (int)children[1].properties;
        xmlElementContentPtr content = children[1].content;
        BOOL v8 = __OFSUB__(properties, 1);
        int v9 = properties - 1;
        if (v9 < 0 != v8)
        {
          if (content)
          {
            xmlFree(content);
            childreuint64_t n = v2->children;
          }

          xmlValidCtxt ctxt = 0LL;
          children[1].xmlElementContentPtr content = 0LL;
        }

        else
        {
          LODWORD(children[1].properties) = v9;
          return *(xmlNodePtr *)&content[8 * v9];
        }
      }

      else
      {
        int v10 = children[1].content;
        if (v10)
        {
          xmlFree(v10);
          childreuint64_t n = v2->children;
          uint64_t v5 = *(void *)&children->type;
        }

        NsList = xmlGetNsList((const xmlDoc *)children->_private, (const xmlNode *)v5);
        xmlGenericErrorFunc v12 = v2->children;
        v12[1].xmlElementContentPtr content = (xmlChar *)NsList;
        LODWORD(v12[1].properties) = 0;
        if (NsList && *NsList)
        {
          uint64_t v13 = 0LL;
          while (NsList[++v13])
            ;
          LODWORD(v12[1].properties) = v13;
        }

        return (xmlNodePtr)&xmlXPathXMLNamespaceStruct;
      }
    }

    else
    {
      return 0LL;
    }
  }

  return ctxt;
}

xmlNodePtr xmlXPathNextAttribute(xmlNodePtr ctxt, xmlNodePtr cur)
{
  if (ctxt)
  {
    childreuint64_t n = ctxt->children;
    if (children)
    {
      uint64_t v3 = *(void *)&children->type;
      if (v3)
      {
        if (*(_DWORD *)(v3 + 8) == 1)
        {
          if (cur)
          {
            p_xmlNodePtr next = &cur->next;
            return *p_next;
          }

          if ((void *)v3 != children->_private)
          {
            p_xmlNodePtr next = (_xmlNode **)(v3 + 88);
            return *p_next;
          }
        }
      }
    }

    return 0LL;
  }

  return ctxt;
}

void xmlXPathRoot(xmlXPathParserContextPtr ctxt)
{
  if (ctxt)
  {
    xmlXPathContextPtr context = (xmlNodePtr *)ctxt->context;
    if (context)
    {
      uint64_t v3 = xmlXPathCacheNewNodeSet((uint64_t)context, *context);
      valuePush(ctxt, v3);
    }
  }

xmlXPathObjectPtr xmlXPathCacheNewNodeSet(uint64_t a1, xmlNodePtr val)
{
  if (!a1) {
    return xmlXPathNewNodeSet(val);
  }
  uint64_t v3 = *(uint64_t ***)(a1 + 344);
  if (!v3) {
    return xmlXPathNewNodeSet(val);
  }
  uint64_t v4 = *v3;
  if (!*v3 || (int v5 = *((_DWORD *)v4 + 2)) == 0)
  {
    int v10 = v3[4];
    if (v10)
    {
      int v11 = *((_DWORD *)v10 + 2);
      if (v11)
      {
        uint64_t v12 = *v10;
        int v13 = v11 - 1;
        *((_DWORD *)v10 + 2) = v13;
        uint64_t v8 = *(void *)(v12 + 8LL * v13);
        *(_DWORD *)uint64_t v8 = 1;
        *(_DWORD *)(v8 + 16) = 0;
        xmlNodeSetPtr v14 = xmlXPathNodeSetCreate(val);
        *(void *)(v8 + 8) = v14;
        if (!v14)
        {
          uint64_t v8 = 0LL;
          *(void *)(a1 + 232) = 0x20000000CLL;
        }

        return (xmlXPathObjectPtr)v8;
      }
    }

    return xmlXPathNewNodeSet(val);
  }

  uint64_t v6 = *v4;
  int v7 = v5 - 1;
  *((_DWORD *)v4 + 2) = v7;
  uint64_t v8 = *(void *)(v6 + 8LL * v7);
  *(_DWORD *)uint64_t v8 = 1;
  *(_DWORD *)(v8 + 16) = 0;
  if (val)
  {
    int v9 = *(xmlNodeSet **)(v8 + 8);
    if (v9->nodeMax && val->type != XML_NAMESPACE_DECL)
    {
      *v9->nodeTab = val;
      **(_DWORD **)(v8 + 8) = 1;
    }

    else
    {
      xmlXPathNodeSetAddUnique(v9, val);
    }
  }

  return (xmlXPathObjectPtr)v8;
}

void xmlXPathLastFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  if (ctxt)
  {
    xmlNodePtr v2 = ctxt;
    if (nargs)
    {
      int v3 = 12;
LABEL_4:
      xmlXPathErr(ctxt, v3);
      return;
    }

    if (ctxt->valueNr < 0)
    {
      int v3 = 23;
      goto LABEL_4;
    }

    xmlXPathContextPtr context = ctxt->context;
    int contextSize = context->contextSize;
    if (contextSize < 0)
    {
      xmlValidCtxt ctxt = v2;
      int v3 = 13;
      goto LABEL_4;
    }

    uint64_t v6 = xmlXPathCacheNewFloat((double)contextSize, (uint64_t)context);
    valuePush(v2, v6);
  }

xmlXPathObjectPtr xmlXPathCacheNewFloat(double val, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(a2 + 344);
    if (v2)
    {
      int v3 = *(uint64_t **)(v2 + 24);
      if (v3)
      {
        int v4 = *((_DWORD *)v3 + 2);
        if (v4)
        {
          uint64_t v5 = *v3;
          int v6 = v4 - 1;
          *((_DWORD *)v3 + 2) = v6;
          xmlXPathObjectPtr result = *(xmlXPathObjectPtr *)(v5 + 8LL * v6);
LABEL_9:
          result->xmlElementType type = XPATH_NUMBER;
          result->floatxmlSchemaValPtr val = val;
          return result;
        }
      }

      uint64_t v8 = *(uint64_t **)(v2 + 32);
      if (v8)
      {
        int v9 = *((_DWORD *)v8 + 2);
        if (v9)
        {
          uint64_t v10 = *v8;
          int v11 = v9 - 1;
          *((_DWORD *)v8 + 2) = v11;
          xmlXPathObjectPtr result = *(xmlXPathObjectPtr *)(v10 + 8LL * v11);
          goto LABEL_9;
        }
      }
    }
  }

  return xmlXPathNewFloat(val);
}

void xmlXPathPositionFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  if (ctxt)
  {
    uint64_t v2 = ctxt;
    if (nargs)
    {
      int v3 = 12;
LABEL_4:
      xmlXPathErr(ctxt, v3);
      return;
    }

    if (ctxt->valueNr < 0)
    {
      int v3 = 23;
      goto LABEL_4;
    }

    xmlXPathContextPtr context = ctxt->context;
    proximityPositiouint64_t n = context->proximityPosition;
    if (proximityPosition < 0)
    {
      xmlValidCtxt ctxt = v2;
      int v3 = 14;
      goto LABEL_4;
    }

    int v6 = xmlXPathCacheNewFloat((double)proximityPosition, (uint64_t)context);
    valuePush(v2, v6);
  }

void xmlXPathCountFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  if (!ctxt) {
    return;
  }
  if (nargs != 1)
  {
    int v8 = 12;
LABEL_12:
    xmlXPathErr(ctxt, v8);
    return;
  }

  int valueNr = ctxt->valueNr;
  if (valueNr <= 0)
  {
    int v8 = 23;
    goto LABEL_12;
  }

  xmlXPathObjectPtr value = ctxt->value;
  if (!value || (value->type | 8) != 9)
  {
    int v8 = 11;
    goto LABEL_12;
  }

  valueTab = ctxt->valueTab;
  int v6 = valueNr - 1;
  ctxt->int valueNr = valueNr - 1;
  if (valueNr == 1) {
    int v7 = 0LL;
  }
  else {
    int v7 = valueTab[valueNr - 2];
  }
  ctxt->xmlXPathObjectPtr value = v7;
  int v9 = valueTab[v6];
  valueTab[v6] = 0LL;
  if (v9 && (p_uint64_t nodeNr = &v9->nodesetval->nodeNr) != 0LL)
  {
    xmlXPathContextPtr context = ctxt->context;
    double v12 = (double)*p_nodeNr;
  }

  else
  {
    xmlXPathContextPtr context = ctxt->context;
    double v12 = 0.0;
  }

  int v13 = xmlXPathCacheNewFloat(v12, (uint64_t)context);
  valuePush(ctxt, v13);
  xmlXPathReleaseObject((uint64_t)ctxt->context, v9);
}

void xmlXPathIdFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  if (!ctxt) {
    return;
  }
  if (nargs != 1)
  {
    int v7 = 12;
LABEL_21:
    xmlXPathErr(ctxt, v7);
    return;
  }

  int valueNr = ctxt->valueNr;
  if (valueNr <= 0)
  {
    int v7 = 23;
    goto LABEL_21;
  }

  valueTab = ctxt->valueTab;
  int v5 = valueNr - 1;
  ctxt->int valueNr = valueNr - 1;
  if (valueNr == 1) {
    int v6 = 0LL;
  }
  else {
    int v6 = valueTab[valueNr - 2];
  }
  ctxt->xmlXPathObjectPtr value = v6;
  int v8 = valueTab[v5];
  valueTab[v5] = 0LL;
  if (!v8)
  {
    int v7 = 10;
    goto LABEL_21;
  }

  if ((v8->type | 8) == 9)
  {
    int v9 = xmlXPathNodeSetCreate(0LL);
    p_uint64_t nodeNr = &v8->nodesetval->nodeNr;
    if (p_nodeNr && *p_nodeNr >= 1)
    {
      uint64_t v11 = 0LL;
      do
      {
        Content = xmlNodeGetContent(*(const xmlNode **)(*((void *)p_nodeNr + 1) + 8 * v11));
        if (!Content) {
          Content = xmlStrdup((const xmlChar *)&byte_181A3ACBA);
        }
        ElementsByIds = xmlXPathGetElementsByIds(ctxt->context->doc, Content);
        int v9 = xmlXPathNodeSetMerge(v9, ElementsByIds);
        xmlXPathFreeNodeSet(ElementsByIds);
        if (Content) {
          xmlFree(Content);
        }
        ++v11;
        p_uint64_t nodeNr = &v8->nodesetval->nodeNr;
      }

      while (v11 < *p_nodeNr);
    }

    xmlXPathReleaseObject((uint64_t)ctxt->context, v8);
    xmlNodeSetPtr v14 = xmlXPathCacheWrapNodeSet((uint64_t)ctxt->context, v9);
    valuePush(ctxt, v14);
  }

  else
  {
    xmlXPathObjectPtr v15 = xmlXPathCacheConvertString((uint64_t)ctxt->context, v8);
    if (v15)
    {
      double v16 = v15;
      xmlXPathObjectPtr v17 = xmlXPathGetElementsByIds(ctxt->context->doc, v15->stringval);
      xmlNodeSetPtr v18 = xmlXPathCacheWrapNodeSet((uint64_t)ctxt->context, v17);
      valuePush(ctxt, v18);
      xmlXPathReleaseObject((uint64_t)ctxt->context, v16);
    }
  }

xmlNodeSet *xmlXPathGetElementsByIds(xmlDoc *a1, const xmlChar *a2)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v2 = a2;
  int v4 = xmlXPathNodeSetCreate(0LL);
  if (v4)
  {
    for (int i = v2; ; ++i)
    {
      unsigned int v6 = *i;
      if (v6 > 0x20)
      {
        LOBYTE(v7) = *i;
        goto LABEL_12;
      }

      if (((1LL << v6) & 0x100002600LL) == 0) {
        break;
      }
    }

    LOBYTE(v7) = *i;
    if (!*i) {
      return v4;
    }
LABEL_12:
    int v8 = (_DWORD)i - (_DWORD)v2;
    while (v7 > 0x20u || ((1LL << v7) & 0x100002601LL) == 0)
    {
      char v9 = *++i;
      LOBYTE(v7) = v9;
      ++v8;
    }

    uint64_t v10 = xmlStrndup(v2, v8);
    if (v10)
    {
      uint64_t v11 = v10;
      xmlAttrPtr ID = xmlGetID(a1, v10);
      if (ID)
      {
        uint64_t parent = (xmlNode *)ID;
        xmlElementType type = ID->type;
        if (type == XML_ELEMENT_NODE || type == XML_ATTRIBUTE_NODE && (uint64_t parent = ID->parent) != 0LL) {
          xmlXPathNodeSetAdd(v4, parent);
        }
      }

      xmlFree(v11);
    }

    while (1)
    {
      unsigned int v7 = *i;
      if (v7 > 0x20)
      {
LABEL_11:
        uint64_t v2 = i;
        goto LABEL_12;
      }

      if (((1LL << v7) & 0x100002600LL) == 0) {
        break;
      }
      ++i;
    }

    if (*i) {
      goto LABEL_11;
    }
  }

  return v4;
}

xmlXPathObjectPtr xmlXPathCacheWrapNodeSet(uint64_t a1, xmlNodeSetPtr val)
{
  if (!a1) {
    return xmlXPathWrapNodeSet(val);
  }
  uint64_t v2 = *(void *)(a1 + 344);
  if (!v2) {
    return xmlXPathWrapNodeSet(val);
  }
  int v3 = *(uint64_t **)(v2 + 32);
  if (!v3) {
    return xmlXPathWrapNodeSet(val);
  }
  int v4 = *((_DWORD *)v3 + 2);
  if (!v4) {
    return xmlXPathWrapNodeSet(val);
  }
  uint64_t v5 = *v3;
  int v6 = v4 - 1;
  *((_DWORD *)v3 + 2) = v6;
  xmlXPathObjectPtr result = *(xmlXPathObjectPtr *)(v5 + 8LL * v6);
  result->xmlElementType type = XPATH_NODESET;
  result->xmlNodeSetPtr nodesetval = val;
  return result;
}

xmlXPathObjectPtr xmlXPathCacheConvertString(uint64_t a1, xmlXPathObjectPtr obj)
{
  switch(obj->type)
  {
    case XPATH_NODESET:
    case XPATH_XSLT_TREE:
      int v6 = xmlXPathCastNodeSetToString(obj->nodesetval);
      goto LABEL_11;
    case XPATH_BOOLEAN:
      if (obj->BOOLval) {
        unsigned int v7 = "true";
      }
      else {
        unsigned int v7 = "false";
      }
      int v6 = xmlStrdup((const xmlChar *)v7);
      goto LABEL_11;
    case XPATH_NUMBER:
      int v6 = xmlXPathCastNumberToString(obj->floatval);
LABEL_11:
      char v9 = v6;
      xmlXPathReleaseObject(a1, obj);
      if (!v9) {
        goto LABEL_13;
      }
      xmlXPathObjectPtr result = xmlXPathCacheWrapString(a1, v9);
      break;
    case XPATH_STRING:
      return obj;
    case XPATH_POINT:
    case XPATH_RANGE:
    case XPATH_LOCATIONSET:
    case XPATH_USERS:
      xmlGenericErrorFunc v4 = *__xmlGenericError();
      uint64_t v5 = __xmlGenericErrorContext();
      v4(*v5, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpath.c", 2730);
      goto LABEL_3;
    default:
LABEL_3:
      xmlXPathReleaseObject(a1, obj);
LABEL_13:
      xmlXPathObjectPtr result = xmlXPathCacheNewCString(a1);
      break;
  }

  return result;
}

void xmlXPathLocalNameFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  if (ctxt)
  {
    xmlXPathParserContextPtr v2 = ctxt;
    if (nargs != 1)
    {
      if (nargs)
      {
        int v9 = 12;
        goto LABEL_14;
      }

      int v3 = xmlXPathCacheNewNodeSet((uint64_t)ctxt->context, ctxt->context->node);
      valuePush(v2, v3);
    }

    int valueNr = v2->valueNr;
    if (valueNr <= 0)
    {
      xmlValidCtxt ctxt = v2;
      int v9 = 23;
    }

    else
    {
      xmlXPathObjectPtr value = v2->value;
      if (value && (*value | 8) == 9)
      {
        valueTab = v2->valueTab;
        unsigned int v7 = valueNr - 1;
        v2->int valueNr = valueNr - 1;
        if (valueNr == 1) {
          int v8 = 0LL;
        }
        else {
          int v8 = valueTab[valueNr - 2];
        }
        v2->xmlXPathObjectPtr value = v8;
        uint64_t v10 = valueTab[v7];
        valueTab[v7] = 0LL;
        xmlNodeSetPtr nodesetval = v10->nodesetval;
        if (!nodesetval || !nodesetval->nodeNr) {
          goto LABEL_23;
        }
        xmlNodePtr v12 = *nodesetval->nodeTab;
        xmlElementType type = v12->type;
        if (type - 1 < 2) {
          goto LABEL_21;
        }
        if (type == XML_NAMESPACE_DECL)
        {
          uint64_t context = (uint64_t)v2->context;
          childreuint64_t n = (xmlChar *)v12->children;
LABEL_27:
          double v16 = xmlXPathCacheNewString(context, children);
          goto LABEL_25;
        }

        if (type == XML_PI_NODE)
        {
LABEL_21:
          childreuint64_t n = (xmlChar *)v12->name;
          uint64_t context = (uint64_t)v2->context;
          if (*children != 32) {
            goto LABEL_27;
          }
        }

        else
        {
LABEL_23:
          uint64_t context = (uint64_t)v2->context;
        }

        double v16 = xmlXPathCacheNewCString(context);
LABEL_25:
        valuePush(v2, v16);
        xmlXPathReleaseObject((uint64_t)v2->context, v10);
        return;
      }

      xmlValidCtxt ctxt = v2;
      int v9 = 11;
    }

xmlXPathObjectPtr xmlXPathCacheNewCString(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 344);
    if (v1)
    {
      xmlXPathParserContextPtr v2 = *(uint64_t **)(v1 + 8);
      if (v2)
      {
        int v3 = *((_DWORD *)v2 + 2);
        if (v3)
        {
          uint64_t v4 = *v2;
          int v5 = v3 - 1;
          *((_DWORD *)v2 + 2) = v5;
          uint64_t v6 = *(void *)(v4 + 8LL * v5);
LABEL_9:
          *(_DWORD *)uint64_t v6 = 4;
          *(void *)(v6 + 32) = xmlStrdup((const xmlChar *)&byte_181A3ACBA);
          return (xmlXPathObjectPtr)v6;
        }
      }

      unsigned int v7 = *(uint64_t **)(v1 + 32);
      if (v7)
      {
        int v8 = *((_DWORD *)v7 + 2);
        if (v8)
        {
          uint64_t v9 = *v7;
          int v10 = v8 - 1;
          *((_DWORD *)v7 + 2) = v10;
          uint64_t v6 = *(void *)(v9 + 8LL * v10);
          goto LABEL_9;
        }
      }
    }
  }

  return xmlXPathNewCString(&byte_181A3ACBA);
}

xmlXPathObjectPtr xmlXPathCacheNewString(uint64_t a1, xmlChar *val)
{
  if (!a1) {
    return xmlXPathNewString(val);
  }
  uint64_t v2 = *(void *)(a1 + 344);
  if (!v2) {
    return xmlXPathNewString(val);
  }
  int v3 = *(uint64_t **)(v2 + 8);
  if (!v3 || (int v4 = *((_DWORD *)v3 + 2)) == 0)
  {
    int v8 = *(uint64_t **)(v2 + 32);
    if (v8)
    {
      int v9 = *((_DWORD *)v8 + 2);
      if (v9)
      {
        uint64_t v10 = *v8;
        int v11 = v9 - 1;
        *((_DWORD *)v8 + 2) = v11;
        uint64_t v7 = *(void *)(v10 + 8LL * v11);
        goto LABEL_9;
      }
    }

    return xmlXPathNewString(val);
  }

  uint64_t v5 = *v3;
  int v6 = v4 - 1;
  *((_DWORD *)v3 + 2) = v6;
  uint64_t v7 = *(void *)(v5 + 8LL * v6);
LABEL_9:
  *(_DWORD *)uint64_t v7 = 4;
  if (val) {
    xmlNodePtr v12 = val;
  }
  else {
    xmlNodePtr v12 = (const xmlChar *)&byte_181A3ACBA;
  }
  *(void *)(v7 + 32) = xmlStrdup(v12);
  return (xmlXPathObjectPtr)v7;
}

void xmlXPathNamespaceURIFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  if (ctxt)
  {
    xmlXPathParserContextPtr v2 = ctxt;
    if (nargs != 1)
    {
      if (nargs)
      {
        int v9 = 12;
        goto LABEL_14;
      }

      int v3 = xmlXPathCacheNewNodeSet((uint64_t)ctxt->context, ctxt->context->node);
      valuePush(v2, v3);
    }

    int valueNr = v2->valueNr;
    if (valueNr <= 0)
    {
      xmlValidCtxt ctxt = v2;
      int v9 = 23;
    }

    else
    {
      xmlXPathObjectPtr value = v2->value;
      if (value && (*value | 8) == 9)
      {
        valueTab = v2->valueTab;
        unsigned int v7 = valueNr - 1;
        v2->int valueNr = valueNr - 1;
        if (valueNr == 1) {
          int v8 = 0LL;
        }
        else {
          int v8 = valueTab[valueNr - 2];
        }
        v2->xmlXPathObjectPtr value = v8;
        uint64_t v10 = valueTab[v7];
        valueTab[v7] = 0LL;
        xmlNodeSetPtr nodesetval = v10->nodesetval;
        if (nodesetval && nodesetval->nodeNr && (xmlNodePtr v12 = *nodesetval->nodeTab, v12->type - 1 <= 1))
        {
          uint64_t ns = v12->ns;
          uint64_t context = (uint64_t)v2->context;
          if (ns)
          {
            xmlXPathObjectPtr v15 = xmlXPathCacheNewString(context, (xmlChar *)ns->href);
LABEL_23:
            valuePush(v2, v15);
            xmlXPathReleaseObject((uint64_t)v2->context, v10);
            return;
          }
        }

        else
        {
          uint64_t context = (uint64_t)v2->context;
        }

        xmlXPathObjectPtr v15 = xmlXPathCacheNewCString(context);
        goto LABEL_23;
      }

      xmlValidCtxt ctxt = v2;
      int v9 = 11;
    }

void xmlXPathStringFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  if (ctxt)
  {
    if (nargs == 1)
    {
      int valueNr = ctxt->valueNr;
      if (valueNr <= 0)
      {
        int v10 = 23;
      }

      else
      {
        valueTab = ctxt->valueTab;
        int v8 = valueNr - 1;
        ctxt->int valueNr = valueNr - 1;
        if (valueNr == 1) {
          int v9 = 0LL;
        }
        else {
          int v9 = valueTab[valueNr - 2];
        }
        ctxt->xmlXPathObjectPtr value = v9;
        int v11 = valueTab[v8];
        valueTab[v8] = 0LL;
        if (v11)
        {
          uint64_t v5 = xmlXPathCacheConvertString((uint64_t)ctxt->context, v11);
LABEL_16:
          valuePush(ctxt, v5);
          return;
        }

        int v10 = 10;
      }
    }

    else
    {
      if (!nargs)
      {
        xmlXPathContextPtr context = ctxt->context;
        Content = xmlNodeGetContent(context->node);
        if (!Content) {
          Content = xmlStrdup((const xmlChar *)&byte_181A3ACBA);
        }
        uint64_t v5 = xmlXPathCacheWrapString((uint64_t)context, Content);
        goto LABEL_16;
      }

      int v10 = 12;
    }

    xmlXPathErr(ctxt, v10);
  }

xmlXPathObjectPtr xmlXPathCacheWrapString(uint64_t a1, xmlChar *val)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 344);
    if (v2)
    {
      int v3 = *(uint64_t **)(v2 + 8);
      if (v3)
      {
        int v4 = *((_DWORD *)v3 + 2);
        if (v4)
        {
          uint64_t v5 = *v3;
          int v6 = v4 - 1;
          *((_DWORD *)v3 + 2) = v6;
          xmlXPathObjectPtr result = *(xmlXPathObjectPtr *)(v5 + 8LL * v6);
LABEL_9:
          result->xmlElementType type = XPATH_STRING;
          result->stringxmlSchemaValPtr val = val;
          return result;
        }
      }

      int v8 = *(uint64_t **)(v2 + 32);
      if (v8)
      {
        int v9 = *((_DWORD *)v8 + 2);
        if (v9)
        {
          uint64_t v10 = *v8;
          int v11 = v9 - 1;
          *((_DWORD *)v8 + 2) = v11;
          xmlXPathObjectPtr result = *(xmlXPathObjectPtr *)(v10 + 8LL * v11);
          goto LABEL_9;
        }
      }
    }
  }

  return xmlXPathWrapString(val);
}

void xmlXPathStringLengthFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  xmlXPathParserContextPtr v2 = ctxt;
  if (nargs)
  {
    if (!ctxt) {
      return;
    }
    if (nargs == 1)
    {
      int valueNr = ctxt->valueNr;
      if (valueNr <= 0)
      {
        int v14 = 23;
      }

      else
      {
        xmlXPathObjectPtr value = ctxt->value;
        if (value)
        {
          if (value->type == XPATH_STRING)
          {
LABEL_10:
            valueTab = v2->valueTab;
            unsigned int v7 = valueNr - 1;
            v2->int valueNr = valueNr - 1;
            if (valueNr == 1) {
              int v8 = 0LL;
            }
            else {
              int v8 = valueTab[valueNr - 2];
            }
            v2->xmlXPathObjectPtr value = v8;
            double v16 = valueTab[v7];
            valueTab[v7] = 0LL;
            uint64_t context = (uint64_t)v2->context;
            int v18 = xmlUTF8Strlen(v16->stringval);
            uint64_t v19 = xmlXPathCacheNewFloat((double)v18, context);
            valuePush(v2, v19);
            xmlXPathReleaseObject((uint64_t)v2->context, v16);
            return;
          }

          xmlXPathStringFunction(ctxt, 1);
          uint64_t v5 = v2->value;
          if (v5 && *v5 == 4)
          {
            int valueNr = v2->valueNr;
            goto LABEL_10;
          }
        }

        xmlValidCtxt ctxt = v2;
        int v14 = 11;
      }
    }

    else
    {
      int v14 = 12;
    }

    xmlXPathErr(ctxt, v14);
    return;
  }

  if (ctxt)
  {
    xmlXPathContextPtr v9 = ctxt->context;
    if (v9)
    {
      if (v9->node)
      {
        Content = xmlNodeGetContent(v9->node);
        if (!Content) {
          Content = xmlStrdup((const xmlChar *)&byte_181A3ACBA);
        }
        uint64_t v11 = (uint64_t)v2->context;
        int v12 = xmlUTF8Strlen(Content);
        int v13 = xmlXPathCacheNewFloat((double)v12, v11);
        valuePush(v2, v13);
        xmlFree(Content);
      }

      else
      {
        xmlXPathObjectPtr v15 = xmlXPathCacheNewFloat(0.0, (uint64_t)v9);
        valuePush(v2, v15);
      }
    }
  }

void xmlXPathConcatFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  if (ctxt)
  {
    xmlXPathParserContextPtr v3 = ctxt;
    if (nargs <= 1)
    {
      int v4 = 12;
LABEL_4:
      xmlXPathErr(ctxt, v4);
      return;
    }

    xmlXPathObjectPtr value = ctxt->value;
    if (value && value->type != XPATH_STRING) {
      xmlXPathStringFunction(ctxt, 1);
    }
    int valueNr = v3->valueNr;
    unsigned int v7 = valueNr - 1;
    if (valueNr < 1)
    {
      xmlXPathContextPtr v9 = 0LL;
    }

    else
    {
      v3->int valueNr = v7;
      valueTab = v3->valueTab;
      if (valueNr == 1) {
        uint64_t v10 = 0LL;
      }
      else {
        uint64_t v10 = valueTab[valueNr - 2];
      }
      v3->xmlXPathObjectPtr value = v10;
      xmlXPathContextPtr v9 = valueTab[v7];
      valueTab[v7] = 0LL;
      if (v9 && v9->type == XPATH_STRING)
      {
        int v11 = nargs + 1;
        while (1)
        {
          int v12 = v3->value;
          if (v12 && *v12 != 4) {
            xmlXPathStringFunction(v3, 1);
          }
          int v13 = v3->valueNr;
          unsigned int v14 = v13 - 1;
          if (v13 < 1) {
            break;
          }
          v3->int valueNr = v14;
          xmlXPathObjectPtr v15 = v3->valueTab;
          if (v13 == 1) {
            double v16 = 0LL;
          }
          else {
            double v16 = v15[v13 - 2];
          }
          v3->xmlXPathObjectPtr value = v16;
          xmlXPathObjectPtr v17 = v15[v14];
          v15[v14] = 0LL;
          if (!v17 || v17->type != XPATH_STRING) {
            goto LABEL_30;
          }
          int v18 = xmlStrcat(v17->stringval, v9->stringval);
          v17->stringxmlSchemaValPtr val = v9->stringval;
          v9->stringxmlSchemaValPtr val = v18;
          xmlXPathReleaseObject((uint64_t)v3->context, v17);
          if (--v11 <= 2)
          {
            valuePush(v3, v9);
            return;
          }
        }

        xmlXPathObjectPtr v17 = 0LL;
LABEL_30:
        xmlXPathReleaseObject((uint64_t)v3->context, v17);
        xmlXPathReleaseObject((uint64_t)v3->context, v9);
        xmlValidCtxt ctxt = v3;
        int v4 = 11;
        goto LABEL_4;
      }
    }

    xmlXPathReleaseObject((uint64_t)v3->context, v9);
  }

void xmlXPathContainsFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  if (ctxt)
  {
    xmlXPathParserContextPtr v2 = ctxt;
    if (nargs != 2)
    {
      int v5 = 12;
      goto LABEL_30;
    }

    int valueNr = ctxt->valueNr;
    int v4 = valueNr - 1;
    if (valueNr <= 1)
    {
      int v5 = 23;
LABEL_30:
      xmlXPathErr(ctxt, v5);
      return;
    }

    xmlXPathObjectPtr value = ctxt->value;
    if (!value)
    {
LABEL_29:
      xmlValidCtxt ctxt = v2;
      int v5 = 11;
      goto LABEL_30;
    }

    if (value->type == XPATH_STRING)
    {
      ctxt->int valueNr = v4;
      valueTab = ctxt->valueTab;
    }

    else
    {
      xmlXPathStringFunction(ctxt, 1);
      int v13 = v2->value;
      if (!v13 || *v13 != 4) {
        goto LABEL_29;
      }
      int valueNr = v2->valueNr;
      int v4 = valueNr - 1;
      if (valueNr < 1)
      {
        xmlXPathContextPtr v9 = 0LL;
        goto LABEL_27;
      }

      v2->int valueNr = v4;
      valueTab = v2->valueTab;
      if (valueNr == 1)
      {
        int v4 = 0;
        int v8 = 0LL;
        goto LABEL_11;
      }
    }

    int v8 = valueTab[valueNr - 2];
LABEL_11:
    v2->xmlXPathObjectPtr value = v8;
    xmlXPathContextPtr v9 = valueTab[v4];
    valueTab[v4] = 0LL;
    uint64_t v10 = v2->value;
    if (v10 && *v10 != 4)
    {
      xmlXPathStringFunction(v2, 1);
      int v4 = v2->valueNr;
    }

    unsigned int v11 = v4 - 1;
    if (v4 >= 1)
    {
      v2->int valueNr = v11;
      int v12 = v2->valueTab;
      if (v4 == 1) {
        unsigned int v14 = 0LL;
      }
      else {
        unsigned int v14 = v12[v4 - 2];
      }
      v2->xmlXPathObjectPtr value = v14;
      xmlXPathObjectPtr v15 = v12[v11];
      v12[v11] = 0LL;
      if (v15 && v15->type == XPATH_STRING)
      {
        BOOL v16 = xmlStrstr(v15->stringval, v9->stringval) != 0LL;
        xmlXPathObjectPtr v17 = xmlXPathCacheNewBoolean((uint64_t)v2->context, v16);
        valuePush(v2, v17);
        xmlXPathReleaseObject((uint64_t)v2->context, v15);
        xmlXPathReleaseObject((uint64_t)v2->context, v9);
        return;
      }

      goto LABEL_28;
    }

xmlXPathObjectPtr xmlXPathCacheNewBoolean(uint64_t a1, int val)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 344);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 16);
      if (v3)
      {
        int v4 = *(_DWORD *)(v3 + 8);
        if (v4)
        {
          int v5 = v4 - 1;
          xmlXPathObjectPtr result = *(xmlXPathObjectPtr *)(*(void *)v3 + 8LL * v5);
          *(_DWORD *)(v3 + 8) = v5;
LABEL_9:
          result->xmlElementType type = XPATH_BOOLEAN;
          result->int BOOLval = val != 0;
          return result;
        }
      }

      uint64_t v7 = *(void *)(v2 + 32);
      if (v7)
      {
        int v8 = *(_DWORD *)(v7 + 8);
        if (v8)
        {
          int v9 = v8 - 1;
          xmlXPathObjectPtr result = *(xmlXPathObjectPtr *)(*(void *)v7 + 8LL * v9);
          *(_DWORD *)(v7 + 8) = v9;
          goto LABEL_9;
        }
      }
    }
  }

  return xmlXPathNewBoolean(val);
}

void xmlXPathStartsWithFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  if (ctxt)
  {
    xmlXPathParserContextPtr v2 = ctxt;
    if (nargs != 2)
    {
      int v5 = 12;
      goto LABEL_30;
    }

    int valueNr = ctxt->valueNr;
    int v4 = valueNr - 1;
    if (valueNr <= 1)
    {
      int v5 = 23;
LABEL_30:
      xmlXPathErr(ctxt, v5);
      return;
    }

    xmlXPathObjectPtr value = ctxt->value;
    if (!value)
    {
LABEL_29:
      xmlValidCtxt ctxt = v2;
      int v5 = 11;
      goto LABEL_30;
    }

    if (value->type == XPATH_STRING)
    {
      ctxt->int valueNr = v4;
      valueTab = ctxt->valueTab;
    }

    else
    {
      xmlXPathStringFunction(ctxt, 1);
      int v13 = v2->value;
      if (!v13 || *v13 != 4) {
        goto LABEL_29;
      }
      int valueNr = v2->valueNr;
      int v4 = valueNr - 1;
      if (valueNr < 1)
      {
        int v9 = 0LL;
        goto LABEL_27;
      }

      v2->int valueNr = v4;
      valueTab = v2->valueTab;
      if (valueNr == 1)
      {
        int v4 = 0;
        int v8 = 0LL;
        goto LABEL_11;
      }
    }

    int v8 = valueTab[valueNr - 2];
LABEL_11:
    v2->xmlXPathObjectPtr value = v8;
    int v9 = valueTab[v4];
    valueTab[v4] = 0LL;
    uint64_t v10 = v2->value;
    if (v10 && *v10 != 4)
    {
      xmlXPathStringFunction(v2, 1);
      int v4 = v2->valueNr;
    }

    unsigned int v11 = v4 - 1;
    if (v4 >= 1)
    {
      v2->int valueNr = v11;
      int v12 = v2->valueTab;
      if (v4 == 1) {
        unsigned int v14 = 0LL;
      }
      else {
        unsigned int v14 = v12[v4 - 2];
      }
      v2->xmlXPathObjectPtr value = v14;
      xmlXPathObjectPtr v15 = v12[v11];
      v12[v11] = 0LL;
      if (v15 && v15->type == XPATH_STRING)
      {
        int v16 = xmlStrlen(v9->stringval);
        BOOL v17 = xmlStrncmp(v15->stringval, v9->stringval, v16) == 0;
        int v18 = xmlXPathCacheNewBoolean((uint64_t)v2->context, v17);
        valuePush(v2, v18);
        xmlXPathReleaseObject((uint64_t)v2->context, v15);
        xmlXPathReleaseObject((uint64_t)v2->context, v9);
        return;
      }

      goto LABEL_28;
    }

void xmlXPathSubstringFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  xmlXPathParserContextPtr v2 = ctxt;
  if (nargs > 1)
  {
    if (nargs >= 4)
    {
      if (ctxt) {
        goto LABEL_3;
      }
      return;
    }

    floatxmlSchemaValPtr val = 0.0;
    if (nargs == 3)
    {
      xmlXPathObjectPtr value = ctxt->value;
      if (!value) {
        goto LABEL_31;
      }
      if (value->type != XPATH_NUMBER)
      {
        xmlXPathNumberFunction(ctxt, 1);
        uint64_t v7 = v2->value;
        if (!v7 || *v7 != 3) {
          goto LABEL_31;
        }
      }

      int valueNr = v2->valueNr;
      valueTab = v2->valueTab;
      int v10 = valueNr - 1;
      v2->int valueNr = valueNr - 1;
      if (valueNr == 1) {
        unsigned int v11 = 0LL;
      }
      else {
        unsigned int v11 = valueTab[valueNr - 2];
      }
      v2->xmlXPathObjectPtr value = v11;
      int v12 = valueTab[v10];
      valueTab[v10] = 0LL;
      floatxmlSchemaValPtr val = v12->floatval;
      xmlXPathReleaseObject((uint64_t)v2->context, v12);
    }

    int v13 = v2->value;
    if (v13)
    {
      if (*v13 == 3 || (xmlXPathNumberFunction(v2, 1), (unsigned int v14 = v2->value) != 0LL) && *v14 == 3)
      {
        int v15 = v2->valueNr;
        int v16 = v2->valueTab;
        int v17 = v15 - 1;
        v2->int valueNr = v15 - 1;
        int v18 = v15 == 1 ? 0LL : v16[v15 - 2];
        v2->xmlXPathObjectPtr value = v18;
        uint64_t v19 = v16[v17];
        v16[v17] = 0LL;
        double v20 = v19->floatval;
        xmlXPathReleaseObject((uint64_t)v2->context, v19);
        uint64_t v21 = v2->value;
        if (v21)
        {
          if (*v21 == 4 || (xmlXPathStringFunction(v2, 1), (double v22 = v2->value) != 0LL) && *v22 == 4)
          {
            int v23 = v2->valueNr;
            unsigned int v24 = v23 - 1;
            if (v23 < 1)
            {
              BOOL v26 = 0LL;
            }

            else
            {
              v2->int valueNr = v24;
              BOOL v25 = v2->valueTab;
              if (v23 == 1) {
                int v27 = 0LL;
              }
              else {
                int v27 = v25[v23 - 2];
              }
              v2->xmlXPathObjectPtr value = v27;
              BOOL v26 = v25[v24];
              v25[v24] = 0LL;
            }

            if (v20 >= 2147483650.0)
            {
              int v28 = 0x7FFFFFFF;
            }

            else if (v20 >= 1.0)
            {
              int v28 = (int)v20;
              if (v20 - floor(v20) >= 0.5) {
                ++v28;
              }
            }

            else
            {
              int v28 = 1;
            }

            if (nargs == 3)
            {
              double v29 = floor(v20);
              if (v20 - v29 >= 0.5) {
                double v29 = v29 + 1.0;
              }
              double v30 = floor(floatval);
              double v31 = v30 + v29;
              if (v31 < 1.0)
              {
                int v32 = 1;
LABEL_51:
                if (v32 <= v28)
                {
                  double v35 = xmlXPathCacheNewCString((uint64_t)v2->context);
                  valuePush(v2, v35);
                }

                else
                {
                  double v33 = xmlUTF8Strsub(v26->stringval, v28 - 1, v32 - v28);
                  int v34 = xmlXPathCacheNewString((uint64_t)v2->context, v33);
                  valuePush(v2, v34);
                  xmlFree(v33);
                }

                xmlXPathReleaseObject((uint64_t)v2->context, v26);
                return;
              }

              if (v31 < 2147483650.0)
              {
                int v32 = (int)v31;
                goto LABEL_51;
              }
            }

            int v32 = 0x7FFFFFFF;
            goto LABEL_51;
          }
        }
      }
    }

void xmlXPathSubstringBeforeFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  if (!ctxt) {
    return;
  }
  if (nargs != 2)
  {
    int v5 = 12;
    goto LABEL_7;
  }

  int valueNr = ctxt->valueNr;
  unsigned int v4 = valueNr - 1;
  if (valueNr <= 1)
  {
    int v5 = 23;
LABEL_7:
    xmlXPathErr(ctxt, v5);
    return;
  }

  xmlXPathObjectPtr value = ctxt->value;
  if (!value || value->type == XPATH_STRING)
  {
    ctxt->int valueNr = v4;
    valueTab = ctxt->valueTab;
    goto LABEL_11;
  }

  xmlXPathStringFunction(ctxt, 1);
  int valueNr = ctxt->valueNr;
  unsigned int v4 = valueNr - 1;
  if (valueNr >= 1)
  {
    ctxt->int valueNr = v4;
    valueTab = ctxt->valueTab;
    if (valueNr == 1)
    {
      unsigned int v4 = 0;
      int v8 = 0LL;
      goto LABEL_12;
    }

void xmlXPathSubstringAfterFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  if (!ctxt) {
    return;
  }
  if (nargs != 2)
  {
    int v5 = 12;
    goto LABEL_7;
  }

  int valueNr = ctxt->valueNr;
  unsigned int v4 = valueNr - 1;
  if (valueNr <= 1)
  {
    int v5 = 23;
LABEL_7:
    xmlXPathErr(ctxt, v5);
    return;
  }

  xmlXPathObjectPtr value = ctxt->value;
  if (!value || value->type == XPATH_STRING)
  {
    ctxt->int valueNr = v4;
    valueTab = ctxt->valueTab;
    goto LABEL_11;
  }

  xmlXPathStringFunction(ctxt, 1);
  int valueNr = ctxt->valueNr;
  unsigned int v4 = valueNr - 1;
  if (valueNr >= 1)
  {
    ctxt->int valueNr = v4;
    valueTab = ctxt->valueTab;
    if (valueNr == 1)
    {
      unsigned int v4 = 0;
      int v8 = 0LL;
      goto LABEL_12;
    }

void xmlXPathNormalizeFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  if (!ctxt) {
    return;
  }
  xmlXPathParserContextPtr v2 = ctxt;
  if (nargs != 1)
  {
    if (nargs)
    {
      int v12 = 12;
LABEL_18:
      xmlXPathErr(ctxt, v12);
      return;
    }

    xmlXPathContextPtr context = ctxt->context;
    Content = xmlNodeGetContent(context->node);
    if (!Content) {
      Content = xmlStrdup((const xmlChar *)&byte_181A3ACBA);
    }
    int v5 = xmlXPathCacheWrapString((uint64_t)context, Content);
    valuePush(v2, v5);
  }

  int valueNr = v2->valueNr;
  if (valueNr <= 0)
  {
    xmlXPathErr(v2, 23);
    return;
  }

  xmlXPathObjectPtr value = v2->value;
  if (!value)
  {
LABEL_17:
    xmlValidCtxt ctxt = v2;
    int v12 = 11;
    goto LABEL_18;
  }

  if (*value != 4)
  {
    xmlXPathStringFunction(v2, 1);
    int v8 = v2->value;
    if (v8 && *v8 == 4)
    {
      int valueNr = v2->valueNr;
      goto LABEL_13;
    }

    goto LABEL_17;
  }

void xmlXPathTranslateFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  if (!ctxt) {
    return;
  }
  if (nargs != 3)
  {
    int v4 = 12;
    goto LABEL_7;
  }

  int valueNr = ctxt->valueNr;
  if (valueNr <= 2)
  {
    int v4 = 23;
LABEL_7:
    xmlXPathErr(ctxt, v4);
    return;
  }

  xmlXPathObjectPtr value = ctxt->value;
  if (!value || value->type == XPATH_STRING)
  {
    unsigned int v6 = valueNr - 1;
    ctxt->int valueNr = valueNr - 1;
    valueTab = ctxt->valueTab;
    goto LABEL_11;
  }

  xmlXPathStringFunction(ctxt, 1);
  int valueNr = ctxt->valueNr;
  unsigned int v6 = valueNr - 1;
  if (valueNr >= 1)
  {
    ctxt->int valueNr = v6;
    valueTab = ctxt->valueTab;
    if (valueNr == 1)
    {
      unsigned int v6 = 0;
      int v8 = 0LL;
      goto LABEL_12;
    }

void xmlXPathBooleanFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  if (!ctxt) {
    return;
  }
  if (nargs != 1)
  {
    int v7 = 12;
LABEL_15:
    xmlXPathErr(ctxt, v7);
    return;
  }

  int valueNr = ctxt->valueNr;
  if (valueNr <= 0)
  {
    int v7 = 23;
    goto LABEL_15;
  }

  valueTab = ctxt->valueTab;
  int v5 = valueNr - 1;
  ctxt->int valueNr = valueNr - 1;
  if (valueNr == 1) {
    unsigned int v6 = 0LL;
  }
  else {
    unsigned int v6 = valueTab[valueNr - 2];
  }
  ctxt->xmlXPathObjectPtr value = v6;
  int v8 = valueTab[v5];
  valueTab[v5] = 0LL;
  if (!v8)
  {
    int v7 = 10;
    goto LABEL_15;
  }

  if (v8->type != XPATH_BOOLEAN)
  {
    xmlXPathContextPtr context = ctxt->context;
    int v10 = xmlXPathCastToBoolean(v8);
    xmlXPathObjectPtr v11 = xmlXPathCacheNewBoolean((uint64_t)context, v10);
    xmlXPathReleaseObject((uint64_t)context, v8);
    int v8 = v11;
  }

  valuePush(ctxt, v8);
}

void xmlXPathNotFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  if (ctxt)
  {
    xmlXPathParserContextPtr v2 = ctxt;
    if (nargs == 1)
    {
      if (ctxt->valueNr <= 0)
      {
        int v4 = 23;
      }

      else
      {
        xmlXPathObjectPtr value = ctxt->value;
        if (value)
        {
          if (value->type == XPATH_BOOLEAN
            || (xmlXPathBooleanFunction(ctxt, 1), (xmlXPathObjectPtr value = v2->value) != 0LL) && value->type == XPATH_BOOLEAN)
          {
            value->int BOOLval = value->BOOLval == 0;
            return;
          }
        }

        xmlValidCtxt ctxt = v2;
        int v4 = 11;
      }
    }

    else
    {
      int v4 = 12;
    }

    xmlXPathErr(ctxt, v4);
  }

void xmlXPathTrueFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  if (ctxt)
  {
    if (nargs)
    {
      int v3 = 12;
LABEL_4:
      xmlXPathErr(ctxt, v3);
      return;
    }

    if (ctxt->valueNr < 0)
    {
      int v3 = 23;
      goto LABEL_4;
    }

    int v4 = xmlXPathCacheNewBoolean((uint64_t)ctxt->context, 1);
    valuePush(ctxt, v4);
  }

void xmlXPathFalseFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  if (ctxt)
  {
    if (nargs)
    {
      int v3 = 12;
LABEL_4:
      xmlXPathErr(ctxt, v3);
      return;
    }

    if (ctxt->valueNr < 0)
    {
      int v3 = 23;
      goto LABEL_4;
    }

    int v4 = xmlXPathCacheNewBoolean((uint64_t)ctxt->context, 0);
    valuePush(ctxt, v4);
  }

void xmlXPathLangFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  if (ctxt)
  {
    xmlXPathParserContextPtr v2 = ctxt;
    if (nargs == 1)
    {
      int valueNr = ctxt->valueNr;
      if (valueNr <= 0)
      {
        int v9 = 23;
      }

      else
      {
        xmlXPathObjectPtr value = ctxt->value;
        if (value)
        {
          if (value->type == XPATH_STRING) {
            goto LABEL_9;
          }
          xmlXPathStringFunction(ctxt, 1);
          int v5 = v2->value;
          if (v5 && *v5 == 4)
          {
            int valueNr = v2->valueNr;
LABEL_9:
            valueTab = v2->valueTab;
            unsigned int v7 = valueNr - 1;
            v2->int valueNr = valueNr - 1;
            if (valueNr == 1) {
              int v8 = 0LL;
            }
            else {
              int v8 = valueTab[valueNr - 2];
            }
            v2->xmlXPathObjectPtr value = v8;
            int v10 = valueTab[v7];
            valueTab[v7] = 0LL;
            stringxmlSchemaValPtr val = v10->stringval;
            Lang = xmlNodeGetLang(v2->context->node);
            int v13 = Lang;
            if (Lang) {
              BOOL v14 = stringval == 0LL;
            }
            else {
              BOOL v14 = 1;
            }
            if (v14)
            {
              int v15 = 0;
              if (!Lang) {
                goto LABEL_38;
              }
            }

            else
            {
              __darwin_ct_rune_t v16 = *stringval;
              if (*stringval)
              {
                uint64_t v17 = 0LL;
                int v18 = stringval + 1;
                while (1)
                {
                  __darwin_ct_rune_t v19 = __toupper(v16);
                  if (v19 != __toupper(v13[v17])) {
                    break;
                  }
                  uint64_t v20 = v17 + 1;
                  __darwin_ct_rune_t v16 = v18[v17++];
                  if (!v16) {
                    goto LABEL_30;
                  }
                }

                int v15 = 0;
              }

              else
              {
                uint64_t v20 = 0LL;
LABEL_30:
                int v21 = v13[v20];
                if (v21) {
                  BOOL v22 = v21 == 45;
                }
                else {
                  BOOL v22 = 1;
                }
                int v15 = v22;
              }
            }

            xmlFree(v13);
LABEL_38:
            xmlXPathReleaseObject((uint64_t)v2->context, v10);
            int v23 = xmlXPathCacheNewBoolean((uint64_t)v2->context, v15);
            valuePush(v2, v23);
            return;
          }
        }

        xmlValidCtxt ctxt = v2;
        int v9 = 11;
      }
    }

    else
    {
      int v9 = 12;
    }

    xmlXPathErr(ctxt, v9);
  }

void xmlXPathSumFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  if (!ctxt) {
    return;
  }
  if (nargs != 1)
  {
    int v8 = 12;
LABEL_12:
    xmlXPathErr(ctxt, v8);
    return;
  }

  int valueNr = ctxt->valueNr;
  if (valueNr <= 0)
  {
    int v8 = 23;
    goto LABEL_12;
  }

  xmlXPathObjectPtr value = ctxt->value;
  if (!value || (value->type | 8) != 9)
  {
    int v8 = 11;
    goto LABEL_12;
  }

  valueTab = ctxt->valueTab;
  int v6 = valueNr - 1;
  ctxt->int valueNr = valueNr - 1;
  if (valueNr == 1) {
    unsigned int v7 = 0LL;
  }
  else {
    unsigned int v7 = valueTab[valueNr - 2];
  }
  ctxt->xmlXPathObjectPtr value = v7;
  int v9 = valueTab[v6];
  valueTab[v6] = 0LL;
  p_uint64_t nodeNr = &v9->nodesetval->nodeNr;
  double v11 = 0.0;
  if (p_nodeNr && *p_nodeNr >= 1)
  {
    uint64_t v12 = 0LL;
    do
    {
      double v11 = v11 + xmlXPathCastNodeToNumber(*(xmlNodePtr *)(*((void *)p_nodeNr + 1) + 8 * v12++));
      p_uint64_t nodeNr = &v9->nodesetval->nodeNr;
    }

    while (v12 < *p_nodeNr);
  }

  int v13 = xmlXPathCacheNewFloat(v11, (uint64_t)ctxt->context);
  valuePush(ctxt, v13);
  xmlXPathReleaseObject((uint64_t)ctxt->context, v9);
}

void xmlXPathFloorFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  if (ctxt)
  {
    xmlXPathParserContextPtr v2 = ctxt;
    if (nargs == 1)
    {
      if (ctxt->valueNr <= 0)
      {
        int v4 = 23;
      }

      else
      {
        xmlXPathObjectPtr value = ctxt->value;
        if (value)
        {
          if (value->type == XPATH_NUMBER
            || (xmlXPathNumberFunction(ctxt, 1), (xmlXPathObjectPtr value = v2->value) != 0LL) && value->type == XPATH_NUMBER)
          {
            value->floatxmlSchemaValPtr val = floor(value->floatval);
            return;
          }
        }

        xmlValidCtxt ctxt = v2;
        int v4 = 11;
      }
    }

    else
    {
      int v4 = 12;
    }

    xmlXPathErr(ctxt, v4);
  }

void xmlXPathCeilingFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  if (ctxt)
  {
    xmlXPathParserContextPtr v2 = ctxt;
    if (nargs == 1)
    {
      if (ctxt->valueNr <= 0)
      {
        int v4 = 23;
      }

      else
      {
        xmlXPathObjectPtr value = ctxt->value;
        if (value)
        {
          if (value->type == XPATH_NUMBER
            || (xmlXPathNumberFunction(ctxt, 1), (xmlXPathObjectPtr value = v2->value) != 0LL) && value->type == XPATH_NUMBER)
          {
            value->floatxmlSchemaValPtr val = ceil(value->floatval);
            return;
          }
        }

        xmlValidCtxt ctxt = v2;
        int v4 = 11;
      }
    }

    else
    {
      int v4 = 12;
    }

    xmlXPathErr(ctxt, v4);
  }

void xmlXPathRoundFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  if (!ctxt) {
    return;
  }
  xmlXPathParserContextPtr v2 = ctxt;
  if (nargs != 1)
  {
    int v8 = 12;
LABEL_18:
    xmlXPathErr(ctxt, v8);
    return;
  }

  if (ctxt->valueNr <= 0)
  {
    int v8 = 23;
    goto LABEL_18;
  }

  xmlXPathObjectPtr value = ctxt->value;
  if (!value
    || value->type != XPATH_NUMBER
    && ((xmlXPathNumberFunction(ctxt, 1), (xmlXPathObjectPtr value = v2->value) == 0LL) || value->type != XPATH_NUMBER))
  {
    xmlValidCtxt ctxt = v2;
    int v8 = 11;
    goto LABEL_18;
  }

  floatxmlSchemaValPtr val = value->floatval;
  if (floatval >= -0.5 && floatval < 0.5)
  {
    double v7 = floatval * 0.0;
  }

  else
  {
    double v6 = floor(floatval);
    else {
      double v7 = v6;
    }
  }

  value->floatxmlSchemaValPtr val = v7;
}

xmlChar *__cdecl xmlXPathParseNCName(xmlXPathParserContextPtr ctxt)
{
  if (!ctxt) {
    return 0LL;
  }
  cur = ctxt->cur;
  if (!cur) {
    return 0LL;
  }
  int v3 = *cur;
  if ((v3 - 97) < 0x1A || (v3 != 95 ? (BOOL v4 = (v3 - 65) > 0x19) : (BOOL v4 = 0), !v4))
  {
    for (uint64_t i = 1LL; ; ++i)
    {
      int v6 = cur[i];
      if ((v6 - 48) >= 0xA && (v6 & 0xFFFFFFDF) - 65 >= 0x1A)
      {
        unsigned int v8 = v6 - 32;
        if (v8 > 0x3F) {
          return xmlXPathParseNameComplex(ctxt, 0);
        }
        if (((1LL << v8) & 0x8000000000006000LL) == 0) {
          break;
        }
      }
    }

    if (((1LL << v8) & 0x2800000144008401LL) != 0)
    {
      if ((_DWORD)i)
      {
        int v9 = &cur[i];
        xmlXPathObjectPtr result = xmlStrndup(cur, i);
        ctxt->cur = v9;
        return result;
      }

      return 0LL;
    }
  }

  return xmlXPathParseNameComplex(ctxt, 0);
}

xmlChar *xmlXPathParseNameComplex(xmlXPathParserContext *a1, int a2)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  __int128 v33 = 0u;
  memset(v34, 0, sizeof(v34));
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  *(_OWORD *)cur = 0u;
  __int128 v30 = 0u;
  leuint64_t n = 0;
  unsigned int v4 = xmlXPathCurrentChar(a1, &len);
  unsigned int v5 = v4;
  if (v4 > 0xFF)
  {
    if (xmlCharInRange(v4, &xmlIsBaseCharGroup)) {
      BOOL v9 = 1;
    }
    else {
      BOOL v9 = v5 == 12295;
    }
    if (!v9 && v5 - 40870 <= 0xFFFFAE59 && v5 - 12330 < 0xFFFFFFF7) {
      return 0LL;
    }
  }

  else if ((v4 & 0x1FFFDF) - 65 >= 0x1A && v4 - 192 >= 0x17 && v4 != 95 && v4 <= 0xF7 && v4 - 216 >= 0x1F)
  {
    int v6 = 0LL;
    if (!a2 || v4 != 58) {
      return v6;
    }
  }

  int v12 = 0;
  do
  {
    if (v5 <= 0x3E && ((1LL << v5) & 0x4000800100000000LL) != 0)
    {
LABEL_64:
      if (!v12) {
        return 0LL;
      }
      return xmlStrndup(cur, v12);
    }

    if (v5 > 0xFF)
    {
      if (xmlCharInRange(v5, &xmlIsBaseCharGroup)) {
        BOOL v13 = 1;
      }
      else {
        BOOL v13 = v5 == 12295;
      }
      BOOL v15 = !v13 && v5 - 19968 >= 0x51A6 && v5 - 12321 >= 9;
      if (!v15 || xmlCharInRange(v5, &xmlIsDigitGroup)) {
        goto LABEL_52;
      }
    }

    else if ((v5 & 0x1FFFDF) - 65 < 0x1A || v5 - 192 < 0x17 || v5 > 0xF7 || v5 - 216 < 0x1F || v5 - 48 < 0xA)
    {
      goto LABEL_52;
    }

    if ((v5 - 45 > 0x32 || ((1LL << (v5 - 45)) & 0x4000000000003LL) == 0) && (!a2 || v5 != 58))
    {
      if (v5 >= 0x100)
      {
        if (xmlCharInRange(v5, &xmlIsCombiningGroup)) {
          goto LABEL_52;
        }
        int v17 = xmlCharInRange(v5, &xmlIsExtenderGroup);
      }

      else
      {
        int v17 = v5 == 183;
      }

      if (!v17) {
        goto LABEL_64;
      }
    }

xmlChar *__cdecl xmlXPathParseName(xmlXPathParserContextPtr ctxt)
{
  if (!ctxt) {
    return 0LL;
  }
  cur = ctxt->cur;
  if (!cur) {
    return 0LL;
  }
  int v3 = *cur;
  if ((v3 & 0xFFFFFFDF) - 65 >= 0x1A && v3 != 95 && v3 != 58) {
    return xmlXPathParseNameComplex(ctxt, 1);
  }
  for (unint64_t i = 1LL; ; ++i)
  {
    int v5 = cur[i];
    if ((v5 - 48) >= 0xA
      && (v5 & 0xFFFFFFDF) - 65 >= 0x1A
      && ((v5 - 45) > 0x32 || ((1LL << (v5 - 45)) & 0x4000000002003LL) == 0))
    {
      break;
    }
  }

  if (!cur[i] || (v5 & 0x80) != 0) {
    return xmlXPathParseNameComplex(ctxt, 1);
  }
  unsigned int v8 = &cur[i];
  if (i >= 0xC351)
  {
    ctxt->cur = v8;
    xmlXPathErr(ctxt, 7);
    return 0LL;
  }

  xmlXPathObjectPtr result = xmlStrndup(cur, i);
  ctxt->cur = v8;
  return result;
}

int xmlXPathIsNodeType(const xmlChar *name)
{
  if (name)
  {
    uint64_t v1 = name;
    LODWORD(name) = xmlStrEqual(name, (const xmlChar *)"node")
                 || xmlStrEqual(v1, (const xmlChar *)"text")
                 || xmlStrEqual(v1, (const xmlChar *)"comment")
                 || xmlStrEqual(v1, (const xmlChar *)"processing-instruction") != 0;
  }

  return (int)name;
}

int xmlXPathEvalPredicate(xmlXPathContextPtr ctxt, xmlXPathObjectPtr res)
{
  xmlXPathContextPtr v2 = ctxt;
  LODWORD(ctxt) = 0;
  if (v2 && res)
  {
    switch(res->type)
    {
      case XPATH_NODESET:
      case XPATH_XSLT_TREE:
        xmlNodeSetPtr nodesetval = res->nodesetval;
        if (!nodesetval) {
          goto LABEL_14;
        }
        BOOL v4 = nodesetval->nodeNr == 0;
        goto LABEL_10;
      case XPATH_BOOLEAN:
        LODWORD(ctxt) = res->BOOLval;
        break;
      case XPATH_NUMBER:
        LODWORD(ctxt) = res->floatval == (double)v2->proximityPosition;
        break;
      case XPATH_STRING:
        xmlValidCtxt ctxt = (xmlXPathContextPtr)res->stringval;
        if (ctxt)
        {
          BOOL v4 = xmlStrlen((const xmlChar *)ctxt) == 0;
LABEL_10:
          LODWORD(ctxt) = !v4;
        }

        break;
      default:
        xmlGenericErrorFunc v5 = *__xmlGenericError();
        int v6 = __xmlGenericErrorContext();
        v5(*v6, "Internal error at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpath.c", 14036);
LABEL_14:
        LODWORD(ctxt) = 0;
        break;
    }
  }

  return (int)ctxt;
}

int xmlXPathEvaluatePredicateResult(xmlXPathParserContextPtr ctxt, xmlXPathObjectPtr res)
{
  int result = 0;
  if (ctxt && res)
  {
    switch(res->type)
    {
      case XPATH_NODESET:
      case XPATH_XSLT_TREE:
        p_uint64_t nodeNr = &res->nodesetval->nodeNr;
        if (p_nodeNr) {
          goto LABEL_12;
        }
        goto LABEL_14;
      case XPATH_BOOLEAN:
        return res->BOOLval;
      case XPATH_NUMBER:
        return res->floatval == (double)ctxt->context->proximityPosition;
      case XPATH_STRING:
        stringxmlSchemaValPtr val = res->stringval;
        if (!stringval) {
          goto LABEL_14;
        }
        int v6 = *stringval;
        goto LABEL_13;
      case XPATH_LOCATIONSET:
        p_uint64_t nodeNr = (int *)res->user;
        if (!p_nodeNr) {
          goto LABEL_14;
        }
LABEL_12:
        int v6 = *p_nodeNr;
LABEL_13:
        int result = v6 != 0;
        break;
      default:
        xmlGenericErrorFunc v7 = *__xmlGenericError();
        unsigned int v8 = __xmlGenericErrorContext();
        v7(*v8, "Internal error at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpath.c", 14087);
LABEL_14:
        int result = 0;
        break;
    }
  }

  return result;
}

xmlXPathCompExprPtr xmlXPathCtxtCompile(xmlXPathContextPtr ctxt, const xmlChar *str)
{
  xmlXPathCompExprPtr comp = xmlXPathTryStreamCompile((uint64_t)ctxt, (xmlChar *)str);
  if (!comp)
  {
    xmlInitParser();
    xmlXPathParserContextPtr v5 = xmlXPathNewParserContext(str, ctxt);
    if (!v5) {
      return 0LL;
    }
    int v6 = v5;
    int v7 = linkedOnOrAfterFall2022OSVersions();
    if (ctxt && v7) {
      ctxt[1].nb_variables_unused = 0;
    }
    xmlXPathCompileExpr(v6, 1);
    if (v6->error)
    {
LABEL_9:
      xmlXPathFreeParserContext(v6);
      return 0LL;
    }

    if (*v6->cur)
    {
      xmlXPathErr(v6, 7);
      goto LABEL_9;
    }

    xmlXPathCompExprPtr comp = (const xmlChar **)v6->comp;
    if (*(int *)comp >= 2 && ((_DWORD)comp[2] & 0x80000000) == 0)
    {
      int v9 = linkedOnOrAfterFall2022OSVersions();
      if (ctxt && v9) {
        ctxt[1].nb_variables_unused = 0;
      }
      xmlXPathOptimizeExpression((uint64_t)v6, &comp[1][56 * *((int *)comp + 4)]);
    }

    v6->xmlXPathCompExprPtr comp = 0LL;
    xmlXPathFreeParserContext(v6);
    comp[3] = xmlStrdup(str);
  }

  return (xmlXPathCompExprPtr)comp;
}

const xmlChar **xmlXPathTryStreamCompile(uint64_t a1, xmlChar *str)
{
  if (xmlStrchr(str, 0x5Bu) || xmlStrchr(str, 0x28u) || xmlStrchr(str, 0x40u)) {
    return 0LL;
  }
  int v6 = xmlStrchr(str, 0x3Au);
  if (v6)
  {
    if (!a1) {
      return 0LL;
    }
    int v7 = *(_DWORD *)(a1 + 88);
    if (!v7 || v6[1] == 58) {
      return 0LL;
    }
  }

  else
  {
    if (!a1)
    {
      unsigned int v8 = 0LL;
      goto LABEL_20;
    }

    int v7 = *(_DWORD *)(a1 + 88);
  }

  unsigned int v8 = *(xmlDict **)(a1 + 328);
  if (v7 < 1)
  {
LABEL_20:
    uint64_t v16 = xmlPatterncompile(str, v8, 1, 0LL);
    goto LABEL_24;
  }

  int v9 = (const xmlChar **)xmlMalloc(8LL * (2 * v7 + 2));
  BOOL v4 = v9;
  if (!v9)
  {
    int v17 = "allocating namespaces array\n";
LABEL_31:
    xmlXPathErrMemory(a1, v17);
    return v4;
  }

  uint64_t v10 = *(unsigned int *)(a1 + 88);
  if ((int)v10 < 1)
  {
    int v14 = 0;
  }

  else
  {
    uint64_t v11 = 0LL;
    int v12 = v9 + 1;
    uint64_t v13 = 8 * v10;
    int v14 = 2 * v10;
    do
    {
      uint64_t v15 = *(void *)(*(void *)(a1 + 80) + v11);
      *(v12 - xmlSAX2InitDefaultSAXHandler(&hdlr, 1) = *(void *)(v15 + 16);
      *int v12 = *(void *)(v15 + 24);
      v12 += 2;
      v11 += 8LL;
    }

    while (v13 != v11);
  }

  v9[v14] = 0LL;
  v9[v14 | 1u] = 0LL;
  uint64_t v16 = xmlPatterncompile(str, v8, 1, v9);
  xmlFree(v4);
LABEL_24:
  if (!v16 || xmlPatternStreamable(v16) != 1)
  {
    xmlFreePattern(v16);
    return 0LL;
  }

  int v18 = (const xmlChar **)xmlXPathNewCompExpr();
  BOOL v4 = v18;
  if (!v18)
  {
    int v17 = "allocating streamable expression\n";
    goto LABEL_31;
  }

  v18[4] = (const xmlChar *)v8;
  v18[5] = (const xmlChar *)v16;
  if (v8) {
    xmlDictReference(v8);
  }
  return v4;
}

void xmlXPathCompileExpr(xmlXPathParserContext *a1, int a2)
{
  xmlXPathContextPtr context = a1->context;
  if (linkedOnOrAfterFall2022OSVersions() && context)
  {
    int nb_variables_unused = context[1].nb_variables_unused;
    if (nb_variables_unused >= 5000)
    {
      xmlXPathErr(a1, 26);
      return;
    }

    context[1].int nb_variables_unused = nb_variables_unused + 10;
  }

  xmlXPathCompAndExpr(a1);
  if (!a1->error)
  {
    for (unint64_t i = a1->cur; ; a1->cur = i)
    {
      unsigned int v7 = *i;
      if (v7 > 0x20 || ((1LL << v7) & 0x100002600LL) == 0) {
        break;
      }
      ++i;
    }

    if (v7 == 111)
    {
      while (i[1] == 114)
      {
        unsigned int v9 = *((_DWORD *)a1->comp + 4);
        for (uint64_t j = i + 2; ; ++j)
        {
          a1->cur = j;
          unsigned int v11 = *j;
          BOOL v12 = v11 > 0x20;
          uint64_t v13 = (1LL << v11) & 0x100002600LL;
          if (v12 || v13 == 0) {
            break;
          }
        }

        xmlXPathCompAndExpr(a1);
        if (a1->error) {
          return;
        }
        xmlXPathCompExprAdd((uint64_t)a1, v9, *((_DWORD *)a1->comp + 4), 2u, 0, 0, 0, 0LL, 0LL);
        for (unint64_t i = a1->cur; ; a1->cur = i)
        {
          unsigned int v15 = *i;
          if (v15 > 0x20 || ((1LL << v15) & 0x100002600LL) == 0) {
            break;
          }
          ++i;
        }

        if (v15 != 111) {
          break;
        }
      }
    }

    if (a2)
    {
      xmlXPathCompExprPtr comp = a1->comp;
      signed int v18 = *((_DWORD *)comp + 4);
      if (*(_DWORD *)(*((void *)comp + 1) + 56LL * v18) != 11) {
        xmlXPathCompExprAdd((uint64_t)a1, v18, 0xFFFFFFFF, 0x11u, 0, 0, 0, 0LL, 0LL);
      }
    }

    if (linkedOnOrAfterFall2022OSVersions())
    {
      if (context) {
        context[1].nb_variables_unused -= 10;
      }
    }
  }

uint64_t xmlXPathOptimizeExpression(uint64_t result, _DWORD *a2)
{
  if (*a2 != 11)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)(result + 56);
    if (*a2 == 10)
    {
      int v5 = a2[1];
      if (v5 != -1 && a2[2] == -1)
      {
        uint64_t v6 = *(void *)(v4 + 8);
        if (*(_DWORD *)(v6 + 56LL * v5) == 10
          && *(_DWORD *)(v6 + 56LL * v5 + 12) == 6
          && *(_DWORD *)(v6 + 56LL * v5 + 8) == -1
          && *(_DWORD *)(v6 + 56LL * v5 + 16) == 1
          && !*(_DWORD *)(v6 + 56LL * v5 + 20))
        {
          int v7 = a2[3] - 4;
          if (v7 <= 9 && ((0x207u >> v7) & 1) != 0)
          {
            int v8 = dword_181A3AC74[v7];
            a2[1] = *(_DWORD *)(v6 + 56LL * v5 + 4);
            a2[3] = v8;
          }
        }
      }
    }

    int result = linkedOnOrAfterFall2022OSVersions();
    if ((_DWORD)result)
    {
      uint64_t v9 = *(void *)(v3 + 24);
      if (v9)
      {
        int v10 = *(_DWORD *)(v9 + 368);
        if (v10 > 4999) {
          return result;
        }
        *(_DWORD *)(v9 + 368) = v10 + 1;
      }
    }

    else
    {
      uint64_t v9 = 0LL;
    }

    int v11 = a2[1];
    if (v11 != -1) {
      xmlXPathOptimizeExpression(v3, *(void *)(v4 + 8) + 56LL * v11);
    }
    int v12 = a2[2];
    if (v12 != -1) {
      xmlXPathOptimizeExpression(v3, *(void *)(v4 + 8) + 56LL * v12);
    }
    int result = linkedOnOrAfterFall2022OSVersions();
    if (v9)
    {
      if ((_DWORD)result) {
        --*(_DWORD *)(v9 + 368);
      }
    }
  }

  return result;
}

xmlXPathCompExprPtr xmlXPathCompile(const xmlChar *str)
{
  return xmlXPathCtxtCompile(0LL, str);
}

xmlXPathObjectPtr xmlXPathCompiledEval(xmlXPathCompExprPtr comp, xmlXPathContextPtr ctx)
{
  uint64_t v3 = 0LL;
  xmlXPathCompiledEvalInternal((uint64_t)comp, (uint64_t)ctx, &v3, 0);
  return v3;
}

uint64_t xmlXPathCompiledEvalInternal(uint64_t a1, uint64_t a2, xmlXPathObject **a3, int a4)
{
  if (!a2)
  {
    __xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  0LL,  0xCu,  1,  3,  (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpath.c",  14373,  0LL,  0LL,  0LL,  0,  0,  "NULL context pointer\n",  v21);
    return 0xFFFFFFFFLL;
  }

  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  xmlInitParser();
  int v8 = xmlMalloc(0x58uLL);
  uint64_t v9 = (uint64_t)v8;
  if (v8)
  {
    v8[10] = 0LL;
    *((_OWORD *)v8 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
    *((_OWORD *)v8 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0u;
    *((_OWORD *)v8 + xmlSAX2InitDefaultSAXHandler(&hdlr, 1) = 0u;
    *((_OWORD *)v8 + 2) = 0u;
    *(_OWORD *)int v8 = 0u;
    int v10 = xmlMalloc(0x50uLL);
    *(void *)(v9 + 48) = v10;
    if (v10)
    {
      *(void *)(v9 + 4xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = 0xA00000000LL;
      *(void *)(v9 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = a2;
      *(void *)(v9 + 32) = 0LL;
      *(void *)(v9 + 56) = a1;
    }

    else
    {
      xmlFree((void *)v9);
      xmlXPathErrMemory(a2, "creating evaluation context\n");
      uint64_t v9 = 0LL;
    }
  }

  else
  {
    xmlXPathErrMemory(a2, "creating evaluation context\n");
  }

  uint64_t v11 = xmlXPathRunEval(v9, a4);
  if (!*(_DWORD *)(v9 + 16))
  {
    int v13 = *(_DWORD *)(v9 + 40);
    unsigned int v14 = v13 - 1;
    if (v13 >= 1)
    {
      *(_DWORD *)(v9 + 4xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v14;
      uint64_t v15 = *(void *)(v9 + 48);
      if (v13 == 1)
      {
        *(void *)(v9 + 32) = 0LL;
        int v12 = *(xmlXPathObject **)(v15 + 8LL * v14);
        *(void *)(v15 + 8LL * v1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
        if (v12) {
          goto LABEL_12;
        }
      }

      else
      {
        *(void *)(v9 + 32) = *(void *)(v15 + 8LL * (v13 - 2));
        int v12 = *(xmlXPathObject **)(v15 + 8LL * v14);
        *(void *)(v15 + 8LL * v1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
        if (v12)
        {
          xmlGenericErrorFunc v17 = *__xmlGenericError();
          signed int v18 = __xmlGenericErrorContext();
          v17(*v18, "xmlXPathCompiledEval: %d object(s) left on the stack.\n", *(_DWORD *)(v9 + 40));
          goto LABEL_12;
        }
      }
    }

    if (!a4)
    {
      xmlGenericErrorFunc v19 = *__xmlGenericError();
      BOOL v20 = __xmlGenericErrorContext();
      v19(*v20, "xmlXPathCompiledEval: No result on the stack.\n");
    }
  }

  int v12 = 0LL;
LABEL_12:
  if (a3) {
    *a3 = v12;
  }
  else {
    xmlXPathReleaseObject(a2, v12);
  }
  *(void *)(v9 + 56) = 0LL;
  xmlXPathFreeParserContext((xmlXPathParserContextPtr)v9);
  return v11;
}

int xmlXPathCompiledEvalToBoolean(xmlXPathCompExprPtr comp, xmlXPathContextPtr ctxt)
{
  return xmlXPathCompiledEvalInternal((uint64_t)comp, (uint64_t)ctxt, 0LL, 1);
}

void xmlXPathEvalExpr(xmlXPathParserContextPtr ctxt)
{
  if (ctxt)
  {
    xmlXPathContextPtr v2 = xmlXPathTryStreamCompile((uint64_t)ctxt->context, (xmlChar *)ctxt->base);
    if (v2)
    {
      uint64_t v3 = (xmlXPathCompExpr *)v2;
      xmlXPathCompExprPtr comp = ctxt->comp;
      if (comp) {
        xmlXPathFreeCompExpr(comp);
      }
      ctxt->xmlXPathCompExprPtr comp = v3;
LABEL_6:
      xmlXPathRunEval((uint64_t)ctxt, 0);
      return;
    }

    if (linkedOnOrAfterFall2022OSVersions())
    {
      xmlXPathContextPtr context = ctxt->context;
      if (context) {
        context[1].int nb_variables_unused = 0;
      }
    }

    xmlXPathCompileExpr(ctxt, 1);
    if (!ctxt->error)
    {
      if (!*ctxt->cur)
      {
        uint64_t v6 = (int *)ctxt->comp;
        if (*v6 >= 2 && (v6[4] & 0x80000000) == 0)
        {
          if (linkedOnOrAfterFall2022OSVersions())
          {
            xmlXPathContextPtr v7 = ctxt->context;
            if (v7) {
              v7[1].int nb_variables_unused = 0;
            }
          }

          xmlXPathOptimizeExpression( (uint64_t)ctxt,  (_DWORD *)(*((void *)ctxt->comp + 1) + 56LL * *((int *)ctxt->comp + 4)));
        }

        goto LABEL_6;
      }

      xmlXPathErr(ctxt, 7);
    }
  }

uint64_t xmlXPathRunEval(uint64_t a1, int a2)
{
  if (!a1 || !*(void *)(a1 + 56)) {
    return 0xFFFFFFFFLL;
  }
  if (!*(void *)(a1 + 48))
  {
    uint64_t v4 = xmlMalloc(0x50uLL);
    *(void *)(a1 + 48) = v4;
    if (!v4)
    {
      *(_DWORD *)(a1 + 16) = 15;
      xmlXPathErrMemory(*(void *)(a1 + 24), "creating evaluation context\n");
      return 0xFFFFFFFFLL;
    }

    *(void *)(a1 + 4xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = 0xA00000000LL;
    *(void *)(a1 + 32) = 0LL;
  }

  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(xmlPattern **)(v5 + 40);
  if (v6)
  {
    if (!a2)
    {
      xmlXPathObjectPtr value = 0LL;
      if (xmlXPathRunStreamEval(*(void *)(a1 + 24), v6, (uint64_t)&value, 0) != -1 && value != 0LL)
      {
        valuePush((xmlXPathParserContextPtr)a1, value);
        return 0LL;
      }

      if (value) {
        xmlXPathReleaseObject(*(void *)(a1 + 24), value);
      }
      uint64_t v5 = *(void *)(a1 + 56);
      unsigned int v8 = *(_DWORD *)(v5 + 16);
      if ((v8 & 0x80000000) == 0)
      {
LABEL_23:
        xmlXPathCompOpEval(a1, (unsigned int *)(*(void *)(v5 + 8) + 56LL * v8));
        return 0LL;
      }

      goto LABEL_24;
    }

    uint64_t result = xmlXPathRunStreamEval(*(void *)(a1 + 24), v6, 0LL, 1);
    if ((_DWORD)result != -1) {
      return result;
    }
    uint64_t v5 = *(void *)(a1 + 56);
  }

  unsigned int v8 = *(_DWORD *)(v5 + 16);
  if ((v8 & 0x80000000) == 0)
  {
    if (a2) {
      return xmlXPathCompOpEvalToBoolean(a1, (unsigned int *)(*(void *)(v5 + 8) + 56LL * v8), 0);
    }
    goto LABEL_23;
  }

xmlXPathObjectPtr xmlXPathEval(const xmlChar *str, xmlXPathContextPtr ctx)
{
  if (ctx)
  {
    xmlInitParser();
    uint64_t v4 = xmlXPathNewParserContext(str, ctx);
    if (v4)
    {
      uint64_t v5 = v4;
      xmlXPathEvalExpr(v4);
      if (v5->error)
      {
LABEL_13:
        uint64_t v9 = 0LL;
        goto LABEL_14;
      }

      int valueNr = v5->valueNr;
      unsigned int v7 = valueNr - 1;
      if (valueNr >= 1)
      {
        v5->int valueNr = v7;
        valueTab = v5->valueTab;
        if (valueNr == 1)
        {
          v5->xmlXPathObjectPtr value = 0LL;
          uint64_t v9 = valueTab[v7];
          valueTab[v7] = 0LL;
          if (!v9) {
            goto LABEL_12;
          }
LABEL_14:
          xmlXPathFreeParserContext(v5);
          return v9;
        }

        v5->xmlXPathObjectPtr value = valueTab[valueNr - 2];
        uint64_t v9 = valueTab[v7];
        valueTab[v7] = 0LL;
        if (v9)
        {
          xmlGenericErrorFunc v10 = *__xmlGenericError();
          uint64_t v11 = __xmlGenericErrorContext();
          v10(*v11, "xmlXPathCompiledEval: %d object(s) left on the stack.\n", v5->valueNr);
          goto LABEL_14;
        }
      }

int xmlXPathSetContextNode(xmlNodePtr node, xmlXPathContextPtr ctx)
{
  int result = -1;
  if (node && ctx && node->doc == ctx->doc)
  {
    int result = 0;
    ctx->xmlNodePtr node = node;
  }

  return result;
}

xmlXPathObjectPtr xmlXPathNodeEval(xmlNodePtr node, const xmlChar *str, xmlXPathContextPtr ctx)
{
  if (!str || !node || !ctx || node->doc != ctx->doc) {
    return 0LL;
  }
  ctx->xmlNodePtr node = node;
  return xmlXPathEval(str, ctx);
}

double xmlXPathNameFunction(xmlXPathParserContextPtr ctxt, int a2)
{
  xmlXPathParserContextPtr v2 = ctxt;
  if (!a2)
  {
    uint64_t v4 = xmlXPathCacheNewNodeSet((uint64_t)ctxt->context, ctxt->context->node);
    valuePush(v2, v4);
LABEL_6:
    int valueNr = v2->valueNr;
    if (valueNr <= 0)
    {
      xmlValidCtxt ctxt = v2;
      int v3 = 23;
      goto LABEL_14;
    }

    xmlXPathObjectPtr value = v2->value;
    if (!value || (*value | 8) != 9)
    {
      xmlValidCtxt ctxt = v2;
      int v3 = 11;
      goto LABEL_14;
    }

    valueTab = v2->valueTab;
    unsigned int v8 = valueNr - 1;
    v2->int valueNr = valueNr - 1;
    if (valueNr == 1) {
      uint64_t v9 = 0LL;
    }
    else {
      uint64_t v9 = valueTab[valueNr - 2];
    }
    v2->xmlXPathObjectPtr value = v9;
    uint64_t v11 = valueTab[v8];
    valueTab[v8] = 0LL;
    xmlNodeSetPtr nodesetval = v11->nodesetval;
    if (!nodesetval || !nodesetval->nodeNr) {
      goto LABEL_20;
    }
    xmlNodePtr v13 = *nodesetval->nodeTab;
    if (v13->type - 1 > 1)
    {
      uint64_t v16 = xmlXPathCacheNewNodeSet((uint64_t)v2->context, v13);
      valuePush(v2, v16);
      xmlXPathLocalNameFunction(v2, 1);
      return xmlXPathReleaseObject((uint64_t)v2->context, v11);
    }

    name = (xmlChar *)v13->name;
    if (*name != 32)
    {
      uint64_t ns = v13->ns;
      if (ns && (prefix = ns->prefix) != 0LL)
      {
        xmlGenericErrorFunc v19 = xmlBuildQName(name, prefix, 0LL, 0);
        BOOL v20 = v19;
        if (v19 == (*v11->nodesetval->nodeTab)->name) {
          BOOL v20 = xmlStrdup(v19);
        }
        if (!v20)
        {
          xmlValidCtxt ctxt = v2;
          int v3 = 15;
          goto LABEL_14;
        }

        char v15 = xmlXPathCacheWrapString((uint64_t)v2->context, v20);
      }

      else
      {
        char v15 = xmlXPathCacheNewString((uint64_t)v2->context, name);
      }
    }

    else
    {
LABEL_20:
      char v15 = xmlXPathCacheNewCString((uint64_t)v2->context);
    }

    valuePush(v2, v15);
    return xmlXPathReleaseObject((uint64_t)v2->context, v11);
  }

  if (ctxt)
  {
    if (a2 != 1)
    {
      int v3 = 12;
LABEL_14:
      xmlXPathErr(ctxt, v3);
      return result;
    }

    goto LABEL_6;
  }

  return result;
}

double xmlXPathEscapeUriFunction(xmlXPathParserContextPtr ctxt, int a2)
{
  if (ctxt)
  {
    if (a2 != 2)
    {
      int v3 = 12;
      goto LABEL_6;
    }

    if (ctxt->valueNr <= 1)
    {
      int v3 = 23;
LABEL_6:
      xmlXPathErr(ctxt, v3);
      return result;
    }

    int v27 = 37;
    int v5 = xmlXPathPopBoolean(ctxt);
    xmlXPathObjectPtr value = ctxt->value;
    if (value && value->type != XPATH_STRING) {
      xmlXPathStringFunction(ctxt, 1);
    }
    int valueNr = ctxt->valueNr;
    unsigned int v8 = valueNr - 1;
    if (valueNr < 1)
    {
      xmlGenericErrorFunc v10 = 0LL;
    }

    else
    {
      ctxt->int valueNr = v8;
      valueTab = ctxt->valueTab;
      if (valueNr == 1) {
        uint64_t v11 = 0LL;
      }
      else {
        uint64_t v11 = valueTab[valueNr - 2];
      }
      ctxt->xmlXPathObjectPtr value = v11;
      xmlGenericErrorFunc v10 = valueTab[v8];
      valueTab[v8] = 0LL;
    }

    xmlGenericErrorFunc v12 = (const xmlBuf *)xmlBufCreate();
    if (v12)
    {
      stringxmlSchemaValPtr val = v10->stringval;
      unsigned int v14 = *stringval;
      if (*stringval)
      {
        do
        {
          if (v14 - 48 < 0xA || (v14 & 0xDF) - 65 < 0x1A) {
            goto LABEL_22;
          }
          uint64_t v15 = v14 - 33;
          if (v15 == 4)
          {
            if ((stringval[1] - 48) < 0xAu
              || (unsigned int v20 = stringval[1] - 65, v20 <= 0x25) && ((1LL << v20) & 0x3F0000003FLL) != 0)
            {
              unsigned int v21 = stringval[2] - 65;
              if (v21 <= 0x25 && ((1LL << v21) & 0x3F0000003FLL) != 0) {
                goto LABEL_22;
              }
            }
          }

          else
          {
LABEL_33:
            if (v14 == 126) {
              goto LABEL_22;
            }
          }

          if (v5 || v14 - 36 > 0x1C || ((1 << (v14 - 36)) & 0x1AC00985) == 0)
          {
            int v22 = (v14 >> 4) | 0x30;
            if (v14 >= 0xA0) {
              LOBYTE(v22) = (v14 >> 4) + 55;
            }
            BYTE1(v27) = v22;
            if ((v14 & 0xF) >= 0xA) {
              char v23 = (v14 & 0xF) + 55;
            }
            else {
              char v23 = v14 & 0xF | 0x30;
            }
            BYTE2(v27) = v23;
            xmlGenericErrorFunc v17 = (const xmlChar *)&v27;
            uint64_t v16 = (uint64x2_t *)v12;
            size_t v18 = 3LL;
            goto LABEL_23;
          }

uint64_t xmlXPathCmpNodesExt(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 4294967294LL;
  if (!a1 || !a2) {
    return v2;
  }
  if (a1 == a2) {
    return 0LL;
  }
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v2 = 1LL;
  if (v3 > 0x12)
  {
LABEL_15:
    if (v3 == 1)
    {
      if (*(_DWORD *)(a2 + 8) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 80);
        if ((v7 & 0x8000000000000000LL) == 0
          || (uint64_t v8 = *(void *)(a2 + 80), (v8 & 0x8000000000000000LL) == 0)
          || *(void *)(a1 + 64) != *(void *)(a2 + 64))
        {
          uint64_t v9 = a1;
LABEL_57:
          if (v9 != *(void *)(a2 + 56))
          {
            if (v9 == *(void *)(a2 + 48)) {
              return 0xFFFFFFFFLL;
            }
            uint64_t v20 = *(void *)(a2 + 40);
            if (v20)
            {
              int v21 = 0;
              while (v20 != v9)
              {
                ++v21;
                uint64_t v22 = v20;
                uint64_t v20 = *(void *)(v20 + 40);
                if (!v20) {
                  goto LABEL_90;
                }
              }

              return 1LL;
            }

            int v21 = 0;
            uint64_t v22 = a2;
LABEL_90:
            uint64_t v25 = *(void *)(v9 + 40);
            if (v25)
            {
              int v26 = 0;
              while (v25 != a2)
              {
                uint64_t v27 = v25;
                ++v26;
                uint64_t v25 = *(void *)(v25 + 40);
                if (!v25) {
                  goto LABEL_96;
                }
              }

              return 0xFFFFFFFFLL;
            }

            int v26 = 0;
            uint64_t v27 = v9;
LABEL_96:
            if (v22 != v27) {
              return 4294967294LL;
            }
            if (v26 > v21)
            {
              do
              {
                --v26;
                uint64_t v9 = *(void *)(v9 + 40);
              }

              while (v26 > v21);
              int v26 = v21;
            }

            while (v21 > v26)
            {
              --v21;
              a2 = *(void *)(a2 + 40);
            }

            uint64_t v2 = 4294967294LL;
            while (1)
            {
              uint64_t v28 = *(void *)(v9 + 40);
              uint64_t v29 = *(void *)(a2 + 40);
              if (v28 == v29) {
                break;
              }
              if (v28) {
                BOOL v30 = v29 == 0;
              }
              else {
                BOOL v30 = 1;
              }
              uint64_t v9 = *(void *)(v9 + 40);
              a2 = *(void *)(a2 + 40);
              if (v30) {
                return v2;
              }
            }

            if (v9 != *(void *)(a2 + 56))
            {
              if (v9 == *(void *)(a2 + 48)) {
                return 0xFFFFFFFFLL;
              }
              if (*(_DWORD *)(v9 + 8) != 1
                || *(_DWORD *)(a2 + 8) != 1
                || (uint64_t v31 = *(void *)(v9 + 80), (v31 & 0x8000000000000000LL) == 0)
                || (uint64_t v32 = *(void *)(a2 + 80), (v32 & 0x8000000000000000LL) == 0)
                || *(void *)(v9 + 64) != *(void *)(a2 + 64))
              {
LABEL_118:
                uint64_t v2 = 1LL;
                while (1)
                {
                  uint64_t v9 = *(void *)(v9 + 48);
                  if (!v9) {
                    break;
                  }
                  if (v9 == a2) {
                    return v2;
                  }
                }

                return 0xFFFFFFFFLL;
              }

              if (v32 >= v31)
              {
                if (v32 <= v31) {
                  goto LABEL_118;
                }
                return 0xFFFFFFFFLL;
              }
            }
          }

          return 1LL;
        }

        if (v8 < v7) {
          return 1LL;
        }
        if (v8 > v7) {
          return 0xFFFFFFFFLL;
        }
      }

      int v6 = 0;
      char v10 = 1;
      uint64_t v9 = a1;
    }

    else
    {
      int v6 = 0;
      uint64_t v9 = a1;
      char v10 = 1;
    }

    a1 = 0LL;
    goto LABEL_38;
  }

  if (((1 << v3) & 0x198) == 0)
  {
    if (v3 == 2)
    {
      char v10 = 0;
      uint64_t v9 = *(void *)(a1 + 40);
      int v6 = 1;
      goto LABEL_38;
    }

    if (v3 == 18) {
      return v2;
    }
    goto LABEL_15;
  }

  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = a1;
  if (v4)
  {
    while (1)
    {
      uint64_t v5 = v4;
      if (*(_DWORD *)(v4 + 8) == 1) {
        break;
      }
      uint64_t v4 = *(void *)(v4 + 56);
      if (!v4) {
        goto LABEL_9;
      }
    }

    int v6 = 3;
  }

  else
  {
LABEL_9:
    uint64_t v5 = *(void *)(v5 + 40);
    if (!v5 || *(_DWORD *)(v5 + 8) != 1)
    {
      int v6 = 0;
      char v10 = 1;
      uint64_t v9 = a1;
      goto LABEL_38;
    }

    int v6 = 2;
  }

  uint64_t v11 = *(void *)(v5 + 80);
  BOOL v12 = v11 >= 0;
  if (v11 < 0) {
    uint64_t v9 = v5;
  }
  else {
    uint64_t v9 = a1;
  }
  char v10 = v12;
  if (v12) {
    int v6 = 0;
  }
LABEL_38:
  uint64_t v13 = 0LL;
  unsigned int v14 = *(_DWORD *)(a2 + 8);
  if (v14 > 0x12) {
    goto LABEL_51;
  }
  uint64_t v2 = 1LL;
  if (((1 << v14) & 0x198) != 0)
  {
    uint64_t v15 = *(void *)(a2 + 56);
    uint64_t v16 = a2;
    if (v15)
    {
      while (1)
      {
        uint64_t v16 = v15;
        if (*(_DWORD *)(v15 + 8) == 1) {
          break;
        }
        uint64_t v15 = *(void *)(v15 + 56);
        if (!v15) {
          goto LABEL_43;
        }
      }

      int v17 = 3;
    }

    else
    {
LABEL_43:
      uint64_t v16 = *(void *)(v16 + 40);
      uint64_t v13 = a2;
      if (!v16) {
        goto LABEL_51;
      }
      uint64_t v13 = a2;
      if (*(_DWORD *)(v16 + 8) != 1) {
        goto LABEL_51;
      }
      int v17 = 2;
    }

    uint64_t v13 = a2;
    if ((*(void *)(v16 + 80) & 0x8000000000000000LL) == 0)
    {
LABEL_51:
      if ((v10 & 1) != 0) {
        goto LABEL_52;
      }
      int v17 = 0;
      goto LABEL_67;
    }

    uint64_t v13 = a2;
    a2 = v16;
  }

  else
  {
    if (v14 != 2)
    {
      if (v14 == 18) {
        return v2;
      }
      goto LABEL_51;
    }

    uint64_t v13 = a2;
    a2 = *(void *)(a2 + 40);
    int v17 = 1;
  }

uint64_t libxml_domnode_tim_sort_merge(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = a2 + 16LL * a3;
  unint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void *)(v5 - 32);
  unint64_t v8 = *(void *)(v5 - 24);
  if (v8 >= v6) {
    unint64_t v9 = *(void *)(v5 - 8);
  }
  else {
    unint64_t v9 = *(void *)(v5 - 24);
  }
  char v10 = *(void **)(a4 + 8);
  if (*(void *)a4 < v9)
  {
    BOOL v12 = realloc(*(void **)(a4 + 8), 8 * v9);
    if (!v12)
    {
      fprintf((FILE *)*MEMORY[0x1895F89D0], "Error allocating temporary storage for tim sort: need %lu bytes", 8 * v9);
      exit(1);
    }

    char v10 = v12;
    *(void *)a4 = v9;
    *(void *)(a4 + 8) = v12;
  }

  if (v8 >= v6)
  {
    unint64_t v22 = v7 + v8;
    uint64_t result = (uint64_t)memcpy(v10, (const void *)(a1 + 8 * (v7 + v8)), 8 * v6);
    unint64_t v23 = v7 + v8 + v6;
    if (v23 > v7)
    {
      uint64_t v24 = a1 - 8;
      do
      {
        if (v6 && v22 > v7)
        {
          unint64_t v25 = v7;
          int v26 = v10;
          uint64_t v27 = v24;
          uint64_t v31 = v22--;
          uint64_t v28 = *(void *)(a1 + 8 * v22);
          uint64_t v29 = v26;
          uint64_t v30 = *((void *)v26 + v6 - 1);
          uint64_t result = xmlXPathCmpNodesExt(v28, v30);
          if ((_DWORD)result == -2 || (result & 0x80000000) == 0)
          {
            uint64_t v24 = v27;
            *(void *)(v27 + 8 * v2xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = v30;
            --v6;
            char v10 = v29;
            unint64_t v7 = v25;
            unint64_t v22 = v31;
          }

          else
          {
            uint64_t v24 = v27;
            *(void *)(v27 + 8 * v2xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = v28;
            char v10 = v29;
            unint64_t v7 = v25;
          }
        }

        else
        {
          if (!v6) {
            return result;
          }
          --v6;
          *(void *)(v24 + 8 * v2xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = *((void *)v10 + v6);
        }

        --v23;
      }

      while (v23 > v7);
    }
  }

  else
  {
    uint64_t v13 = (uint64_t *)(a1 + 8 * v7);
    uint64_t result = (uint64_t)memcpy(v10, v13, 8 * v8);
    unint64_t v15 = v7 + v8;
    unint64_t v16 = v7 + v8 + v6;
    if (v7 < v16)
    {
      unint64_t v17 = 0LL;
      unint64_t v18 = v8 + v6;
      do
      {
        if (v17 >= v8 || v15 >= v16)
        {
          if (v17 >= v8) {
            return result;
          }
          uint64_t v21 = *((void *)v10 + v17++);
          uint64_t *v13 = v21;
        }

        else
        {
          uint64_t v19 = *((void *)v10 + v17);
          uint64_t v20 = *(void *)(a1 + 8 * v15);
          uint64_t result = xmlXPathCmpNodesExt(v19, v20);
          if ((_DWORD)result == -2 || (result & 0x80000000) == 0)
          {
            ++v17;
            uint64_t *v13 = v19;
          }

          else
          {
            ++v15;
            uint64_t *v13 = v20;
          }
        }

        ++v13;
        --v18;
      }

      while (v18);
    }
  }

  return result;
}

void xmlXPathCacheFreeObjectList(uint64_t a1)
{
  if (*(int *)(a1 + 8) >= 1)
  {
    uint64_t v2 = 0LL;
    do
    {
      unsigned int v3 = *(void **)(*(void *)a1 + 8 * v2);
      uint64_t v4 = (void **)v3[1];
      if (v4)
      {
        if (v4[1])
        {
          xmlFree(v4[1]);
          uint64_t v4 = (void **)v3[1];
        }

        xmlFree(v4);
      }

      xmlFree(v3);
      ++v2;
    }

    while (v2 < *(int *)(a1 + 8));
  }

  if (*(void *)a1) {
    xmlFree(*(void **)a1);
  }
  xmlFree((void *)a1);
}

void *xmlPointerListCreate()
{
  int v0 = xmlMalloc(0x10uLL);
  uint64_t v1 = v0;
  if (v0)
  {
    void *v0 = 0LL;
    v0[1] = 0LL;
    xmlPointerListAddSize((uint64_t)v0, 0LL, 10);
    *((_DWORD *)v1 + 2) = 0;
  }

  else
  {
    xmlXPathErrMemory(0LL, "xmlPointerListCreate: allocating item\n");
  }

  return v1;
}

uint64_t xmlPointerListAddSize(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = *(void **)a1;
  if (v5)
  {
    int v6 = *(_DWORD *)(a1 + 8);
    uint64_t v7 = *(int *)(a1 + 12);
    if ((int)v7 <= v6)
    {
      if ((int)v7 >= 50000001)
      {
        unint64_t v8 = "xmlPointerListAddSize: re-allocating item\n";
LABEL_14:
        xmlXPathErrMemory(0LL, v8);
        return 0xFFFFFFFFLL;
      }

      *(_DWORD *)(a1 + 12) = 2 * v7;
      uint64_t v5 = xmlRealloc(v5, 16 * v7);
      *(void *)a1 = v5;
      if (!v5)
      {
        xmlXPathErrMemory(0LL, "xmlPointerListAddSize: re-allocating item\n");
        *(_DWORD *)(a1 + 12) = 0;
        return 0xFFFFFFFFLL;
      }

      int v6 = *(_DWORD *)(a1 + 8);
    }
  }

  else
  {
    if (a3 <= 1) {
      unsigned int v9 = 1;
    }
    else {
      unsigned int v9 = a3;
    }
    uint64_t v5 = xmlMalloc(8LL * v9);
    *(void *)a1 = v5;
    if (!v5)
    {
      unint64_t v8 = "xmlPointerListCreate: allocating item\n";
      goto LABEL_14;
    }

    int v6 = 0;
    *(_DWORD *)(a1 + 12) = v9;
  }

  uint64_t v10 = 0LL;
  *(_DWORD *)(a1 + 8) = v6 + 1;
  *((void *)v5 + v6) = a2;
  return v10;
}

unsigned __int8 *xmlXPathNodeValHash(xmlDoc *doc)
{
  if (!doc) {
    return 0LL;
  }
  uint64_t v1 = doc;
  if (doc->type == XML_DOCUMENT_NODE)
  {
    doc = (xmlDoc *)xmlDocGetRootElement(doc);
    if (!doc)
    {
      doc = (xmlDoc *)v1->children;
      if (!doc) {
        return 0LL;
      }
    }
  }

  xmlElementType type = doc->type;
  if (type > XML_NAMESPACE_DECL) {
    goto LABEL_16;
  }
  if (((1 << type) & 0x198) != 0)
  {
    intSubset = (unsigned __int8 *)doc->intSubset;
LABEL_14:
    return 0LL;
  }

  if (type == XML_ATTRIBUTE_NODE)
  {
LABEL_17:
    childreuint64_t n = doc->children;
    if (children)
    {
      intSubset = 0LL;
      int v5 = 2;
      while (1)
      {
        int v6 = (xmlDoc *)children;
        xmlElementType v7 = children->type;
        if (v7 - 3 <= 1)
        {
          xmlElementContentPtr content = children->content;
          if (content)
          {
            int v9 = *content;
            if (*content)
            {
              if (v5 == 1) {
                return (unsigned __int8 *)((_DWORD)intSubset + (v9 << 8));
              }
              if (content[1]) {
                return (unsigned __int8 *)(v9 | (content[1] << 8));
              }
              int v5 = 1;
              intSubset = (unsigned __int8 *)*content;
            }
          }
        }

        childreuint64_t n = v6->children;
        if (children) {
          BOOL v10 = v7 == XML_ENTITY_REF_NODE;
        }
        else {
          BOOL v10 = 1;
        }
        BOOL v11 = v10 || v7 == XML_DTD_NODE;
        if (v11 || children->type == XML_ENTITY_DECL)
        {
          if (v6 == doc) {
            return intSubset;
          }
          while (1)
          {
            childreuint64_t n = v6->next;
            if (children) {
              break;
            }
            int v6 = (xmlDoc *)v6->parent;
            if (v6) {
              BOOL v12 = v6 == doc;
            }
            else {
              BOOL v12 = 1;
            }
            if (v12) {
              return intSubset;
            }
          }
        }
      }
    }

    return 0LL;
  }

  if (type != XML_NAMESPACE_DECL)
  {
LABEL_16:
    if (type != XML_ELEMENT_NODE) {
      return 0LL;
    }
    goto LABEL_17;
  }

  intSubset = (unsigned __int8 *)doc->name;
  return intSubset;
}

uint64_t xmlXPathCurrentChar(xmlXPathParserContext *a1, _DWORD *a2)
{
  cur = a1->cur;
  if ((*(char *)a1->cur & 0x80000000) == 0)
  {
    *a2 = 1;
    return *cur;
  }

  uint64_t v4 = cur + 1;
  if ((cur[1] & 0xC0) != 0x80) {
    goto LABEL_10;
  }
  int v5 = *a1->cur;
  if ((~v5 & 0xE0) != 0)
  {
    *a2 = 2;
    unsigned int v10 = (*cur & 0x1F) << 6;
    goto LABEL_16;
  }

  uint64_t v4 = cur + 2;
  if ((cur[2] & 0xC0) != 0x80) {
    goto LABEL_10;
  }
  if ((~v5 & 0xF0) != 0)
  {
    *a2 = 3;
    int v6 = (*cur & 0xF) << 12;
    unsigned __int8 v7 = cur[1];
    goto LABEL_15;
  }

  if ((v5 & 0xF8) != 0xF0 || (uint64_t v4 = cur + 3, (cur[3] & 0xC0) != 0x80))
  {
LABEL_10:
    *a2 = 0;
    int v8 = 20;
LABEL_11:
    xmlXPathErr(a1, v8);
    return 0LL;
  }

  *a2 = 4;
  int v6 = ((*cur & 7) << 18) | ((cur[1] & 0x3F) << 12);
  unsigned __int8 v7 = cur[2];
LABEL_15:
  unsigned int v10 = v6 & 0xFFFFF03F | ((v7 & 0x3F) << 6);
LABEL_16:
  uint64_t v3 = v10 | *v4 & 0x3F;
  if (v3 > 0xFF)
  {
    if (v3 >> 11 < 0x1B
      || (v3 - 57344) >> 1 < 0xFFF
      || (v3 - 0x10000) < 0x100000)
    {
      return v3;
    }

    goto LABEL_27;
  }

  if (v3 <= 0x1F && (v3 > 0xD || ((1 << v3) & 0x2600) == 0))
  {
LABEL_27:
    int v8 = 21;
    goto LABEL_11;
  }

  return v3;
}

void xmlXPathCompAndExpr(xmlXPathParserContext *a1)
{
  if (!a1->error)
  {
    for (unint64_t i = a1->cur; ; a1->cur = i)
    {
      unsigned int v3 = *i;
      if (v3 > 0x20 || ((1LL << v3) & 0x100002600LL) == 0) {
        break;
      }
      ++i;
    }

    if (v3 == 97)
    {
      do
      {
        if (i[1] != 110 || i[2] != 100) {
          break;
        }
        unsigned int v5 = *((_DWORD *)a1->comp + 4);
        for (uint64_t j = i + 3; ; ++j)
        {
          a1->cur = j;
          unsigned int v7 = *j;
          BOOL v8 = v7 > 0x20;
          uint64_t v9 = (1LL << v7) & 0x100002600LL;
          if (v8 || v9 == 0) {
            break;
          }
        }

        xmlXPathCompEqualityExpr(a1);
        if (a1->error) {
          break;
        }
        xmlXPathCompExprAdd((uint64_t)a1, v5, *((_DWORD *)a1->comp + 4), 1u, 0, 0, 0, 0LL, 0LL);
        for (unint64_t i = a1->cur; ; a1->cur = ++i)
        {
          unsigned int v11 = *i;
          if (v11 > 0x20 || ((1LL << v11) & 0x100002600LL) == 0) {
            break;
          }
        }
      }

      while (v11 == 97);
    }
  }

uint64_t xmlXPathCompExprAdd( uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, xmlChar *name, xmlChar *a9)
{
  unint64_t v16 = *(unsigned int **)(a1 + 56);
  uint64_t v17 = *v16;
  uint64_t v18 = (int)v16[1];
  if ((int)v17 < (int)v18)
  {
    uint64_t v19 = (void *)*((void *)v16 + 1);
    goto LABEL_6;
  }

  if ((int)v18 >= 1000000)
  {
LABEL_22:
    *(_DWORD *)(a1 + 16) = 15;
    xmlXPathErrMemory(*(void *)(a1 + 24), "adding step\n");
    return 0xFFFFFFFFLL;
  }

  v16[1] = 2 * v18;
  uint64_t v19 = xmlRealloc(*((void **)v16 + 1), 112 * v18);
  if (!v19)
  {
    v16[1] = (int)v16[1] / 2;
    goto LABEL_22;
  }

  *((void *)v16 + xmlSAX2InitDefaultSAXHandler(&hdlr, 1) = v19;
  uint64_t v17 = *v16;
LABEL_6:
  v16[4] = v17;
  int v21 = v17;
  unint64_t v22 = (unsigned int *)&v19[7 * (int)v17];
  *unint64_t v22 = a4;
  v22[1] = a2;
  v22[2] = a3;
  _OWORD v22[3] = a5;
  v22[4] = a6;
  v22[5] = a7;
  if (*((void *)v16 + 4)) {
    BOOL v23 = a4 > 0xD;
  }
  else {
    BOOL v23 = 1;
  }
  if (!v23 && ((1 << a4) & 0x3400) != 0)
  {
    if (name)
    {
      *(void *)(*((void *)v16 + 1) + 56LL * (int)*v16 + 2xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = xmlDictLookup(*((xmlDictPtr *)v16 + 4), name, -1);
      xmlFree(name);
      if (a9)
      {
LABEL_17:
        *(void *)(*((void *)v16 + 1) + 56LL * (int)*v16 + 32) = xmlDictLookup(*((xmlDictPtr *)v16 + 4), a9, -1);
        xmlFree(a9);
        uint64_t v19 = (void *)*((void *)v16 + 1);
        uint64_t v17 = *v16;
        int v21 = *v16;
        goto LABEL_20;
      }
    }

    else
    {
      v19[7 * (int)v17 + 3] = 0LL;
      if (a9) {
        goto LABEL_17;
      }
    }

    uint64_t v19 = (void *)*((void *)v16 + 1);
    uint64_t v17 = *v16;
    int v21 = v17;
    v19[7 * (int)v17 + 4] = 0LL;
    goto LABEL_20;
  }

  unint64_t v25 = (char *)&v19[7 * (int)v17];
  *((void *)v25 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = name;
  *((void *)v25 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = a9;
LABEL_20:
  v19[7 * v21 + 5] = 0LL;
  *unint64_t v16 = v17 + 1;
  return v17;
}

void xmlXPathCompEqualityExpr(xmlXPathParserContext *a1)
{
  if (!a1->error)
  {
    for (unint64_t i = a1->cur; ; a1->cur = i)
    {
      unsigned int v3 = *i;
      if (v3 > 0x20 || ((1LL << v3) & 0x100002600LL) == 0) {
        break;
      }
      ++i;
    }

    LOBYTE(v5) = *i;
    while (v5 == 33)
    {
      uint64_t v9 = i + 1;
      if (i[1] != 61) {
        return;
      }
      unsigned int v8 = 0;
      unsigned int v6 = *((_DWORD *)a1->comp + 4);
      a1->cur = v9;
      if (*v9)
      {
        uint64_t v7 = 2LL;
LABEL_16:
        uint64_t v9 = &i[v7];
        a1->cur = v9;
      }

      for (uint64_t j = v9 + 1; ; ++j)
      {
        unsigned int v11 = *(j - 1);
        BOOL v12 = v11 > 0x20;
        uint64_t v13 = (1LL << v11) & 0x100002600LL;
        if (v12 || v13 == 0) {
          break;
        }
        a1->cur = j;
      }

      xmlXPathCompRelationalExpr(a1);
      if (a1->error) {
        return;
      }
      xmlXPathCompExprAdd((uint64_t)a1, v6, *((_DWORD *)a1->comp + 4), 3u, v8, 0, 0, 0LL, 0LL);
      for (unint64_t i = a1->cur; ; a1->cur = i)
      {
        unsigned int v5 = *i;
        if (v5 > 0x20 || ((1LL << v5) & 0x100002600LL) == 0) {
          break;
        }
        ++i;
      }
    }

    unsigned int v6 = *((_DWORD *)a1->comp + 4);
    uint64_t v7 = 1LL;
    unsigned int v8 = 1;
    goto LABEL_16;
  }

void xmlXPathCompRelationalExpr(xmlXPathParserContext *a1)
{
  if (!a1->error)
  {
    for (unint64_t i = a1->cur; ; a1->cur = i)
    {
      unsigned int v3 = *i;
      if (v3 > 0x20 || ((1LL << v3) & 0x100002600LL) == 0) {
        break;
      }
      ++i;
    }

    unsigned int v5 = *i;
    while ((v5 | 2) == 0x3E)
    {
      unsigned int v6 = *((_DWORD *)a1->comp + 4);
      unsigned int v7 = v5 == 60;
      unsigned int v8 = i + 1;
      int v9 = i[1];
      a1->cur = i + 1;
      unsigned int v10 = v9 != 61;
      if (v9 == 61 && *v8)
      {
        unsigned int v8 = i + 2;
        goto LABEL_14;
      }

      while (1)
      {
        unsigned int v11 = *v8;
        BOOL v12 = v11 > 0x20;
        uint64_t v13 = (1LL << v11) & 0x100002600LL;
        if (v12 || v13 == 0) {
          break;
        }
        ++v8;
LABEL_14:
        a1->cur = v8;
      }

      xmlXPathCompAdditiveExpr(a1);
      if (a1->error) {
        break;
      }
      xmlXPathCompExprAdd((uint64_t)a1, v6, *((_DWORD *)a1->comp + 4), 4u, v7, v10, 0, 0LL, 0LL);
      for (unint64_t i = a1->cur; ; a1->cur = i)
      {
        unsigned int v5 = *i;
        if (v5 > 0x20 || ((1LL << v5) & 0x100002600LL) == 0) {
          break;
        }
        ++i;
      }
    }
  }

void xmlXPathCompAdditiveExpr(xmlXPathParserContext *a1)
{
  if (!a1->error)
  {
    for (unint64_t i = a1->cur; ; a1->cur = i)
    {
      unsigned int v3 = *i;
      if (v3 > 0x20 || ((1LL << v3) & 0x100002600LL) == 0) {
        break;
      }
      ++i;
    }

    while (v3 == 45 || v3 == 43)
    {
      unsigned int v5 = *((_DWORD *)a1->comp + 4);
      unsigned int v6 = i + 1;
      do
      {
        a1->cur = v6;
        unsigned int v7 = *v6++;
        uint64_t v8 = (1LL << v7) & 0x100002600LL;
      }

      while (v7 <= 0x20 && v8 != 0);
      xmlXPathCompMultiplicativeExpr(a1);
      if (a1->error) {
        break;
      }
      xmlXPathCompExprAdd((uint64_t)a1, v5, *((_DWORD *)a1->comp + 4), 5u, v3 == 43, 0, 0, 0LL, 0LL);
      for (unint64_t i = a1->cur; ; a1->cur = i)
      {
        unsigned int v3 = *i;
        if (v3 > 0x20 || ((1LL << v3) & 0x100002600LL) == 0) {
          break;
        }
        ++i;
      }
    }
  }

void xmlXPathCompMultiplicativeExpr(xmlXPathParserContext *a1)
{
  if (!a1->error)
  {
    for (unint64_t i = a1->cur; ; a1->cur = i)
    {
      unsigned int v3 = *i;
      if (v3 > 0x20 || ((1LL << v3) & 0x100002600LL) == 0) {
        break;
      }
      ++i;
    }

    LOBYTE(v5) = *i;
    while (1)
    {
      if (v5 == 42)
      {
        unsigned int v6 = 0;
        uint64_t v7 = 1LL;
      }

      else
      {
        if (v5 == 109)
        {
          if (i[1] != 111 || i[2] != 100) {
            return;
          }
          unsigned int v6 = 2;
        }

        else
        {
          unsigned int v6 = 1;
        }

        uint64_t v7 = 3LL;
      }

      uint64_t v8 = &i[v7];
      unsigned int v9 = *((_DWORD *)a1->comp + 4);
      while (1)
      {
        a1->cur = v8;
        unsigned int v10 = *v8;
        BOOL v11 = v10 > 0x20;
        uint64_t v12 = (1LL << v10) & 0x100002600LL;
        if (v11 || v12 == 0) {
          break;
        }
        ++v8;
      }

      xmlXPathCompUnaryExpr(a1);
      if (a1->error) {
        break;
      }
      xmlXPathCompExprAdd((uint64_t)a1, v9, *((_DWORD *)a1->comp + 4), 6u, v6, 0, 0, 0LL, 0LL);
      for (unint64_t i = a1->cur; ; a1->cur = i)
      {
        unsigned int v5 = *i;
        if (v5 > 0x20 || ((1LL << v5) & 0x100002600LL) == 0) {
          break;
        }
        ++i;
      }
    }
  }

void xmlXPathCompUnaryExpr(xmlXPathParserContext *a1)
{
  for (unint64_t i = a1->cur; ; a1->cur = i)
  {
    unsigned int v3 = *i;
    if (v3 > 0x20 || ((1LL << v3) & 0x100002600LL) == 0) {
      break;
    }
    ++i;
  }

  if (v3 == 45)
  {
    int v5 = 0;
    while (1)
    {
      a1->cur = ++i;
      unsigned int v6 = *i;
      if (v6 > 0x20 || ((1LL << v6) & 0x100002600LL) == 0)
      {
        int v5 = 1 - v5;
        if (v6 != 45) {
          break;
        }
      }
    }
  }

  else
  {
    int v5 = 0;
  }

  xmlXPathCompPathExpr(a1);
  if (!a1->error)
  {
    for (uint64_t j = (uint64_t)(a1->cur + 1); ; ++j)
    {
      unsigned int v9 = *(unsigned __int8 *)(j - 1);
      if (v9 > 0x20 || ((1LL << v9) & 0x100002600LL) == 0) {
        break;
      }
      a1->cur = (const xmlChar *)j;
    }

    if (v9 == 124)
    {
      while (1)
      {
        unsigned int v11 = *((_DWORD *)a1->comp + 4);
        xmlXPathCompExprAdd((uint64_t)a1, 0xFFFFFFFF, 0xFFFFFFFF, 9u, 0, 0, 0, 0LL, 0LL);
        cur = a1->cur;
        if (!*a1->cur) {
          goto LABEL_26;
        }
        do
        {
          a1->cur = ++cur;
LABEL_26:
          unsigned int v13 = *cur;
          BOOL v14 = v13 > 0x20;
          uint64_t v15 = (1LL << v13) & 0x100002600LL;
        }

        while (!v14 && v15 != 0);
        xmlXPathCompPathExpr(a1);
        xmlXPathCompExprAdd((uint64_t)a1, v11, *((_DWORD *)a1->comp + 4), 7u, 0, 0, 0, 0LL, 0LL);
        for (uint64_t k = a1->cur; ; a1->cur = k)
        {
          unsigned int v18 = *k++;
          if (v18 > 0x20 || ((1LL << v18) & 0x100002600LL) == 0) {
            break;
          }
        }

        if (v18 != 124)
        {
          BOOL v20 = a1->error != 0;
          goto LABEL_40;
        }
      }
    }

    BOOL v20 = 0;
LABEL_40:
    if (v3 == 45 && !v20)
    {
      if (v5) {
        unsigned int v21 = 2;
      }
      else {
        unsigned int v21 = 3;
      }
      xmlXPathCompExprAdd((uint64_t)a1, *((_DWORD *)a1->comp + 4), 0xFFFFFFFF, 5u, v21, 0, 0, 0LL, 0LL);
    }
  }

void xmlXPathCompPathExpr(xmlXPathParserContext *a1)
{
  uint64_t v2 = a1->cur;
  for (unint64_t i = a1->cur + 1; ; ++i)
  {
    unsigned int v4 = *(i - 1);
    if (v4 > 0x28) {
      goto LABEL_27;
    }
    if (((1LL << v4) & 0x100002600LL) == 0) {
      break;
    }
    a1->cur = i;
    LODWORD(v2) = (_DWORD)v2 + 1;
  }

  if (((1LL << v4) & 0x11000000000LL) != 0)
  {
    int v5 = (unsigned __int8 *)(i - 1);
    goto LABEL_7;
  }

LABEL_260:
    a1->cur += (int)v126;
    unsigned int v73 = xmlXPathCurrentChar(a1, &v126);
  }

  uint64_t v108 = xmlStrndup(cur, LODWORD(a1->cur) - (int)v2);
  a1->cur = cur;
  if (!v108)
  {
LABEL_162:
    xmlXPathErr(a1, 7);
    return;
  }

  uint64_t v109 = v108;
  if (xmlStrstr(v108, (const xmlChar *)"::"))
  {
    xmlFree(v109);
    int v5 = (unsigned __int8 *)a1->cur;
    goto LABEL_30;
  }

  for (uint64_t j = xmlStrlen(v109); ; ++j)
  {
    int v117 = a1->cur[j];
    if (v117 != 32)
    {
      BOOL v118 = 0;
      if (!a1->cur[j] || v117 == 47) {
        goto LABEL_295;
      }
    }
  }

  BOOL v118 = v117 == 40 && !xmlXPathIsNodeType(v109) && (!a1->xptr || !xmlStrEqual(v109, (const xmlChar *)"range-to"));
LABEL_295:
  int v120 = a1->cur[j];
  xmlFree(v109);
  int v5 = (unsigned __int8 *)a1->cur;
  if (!v118 || !v120)
  {
LABEL_30:
    unsigned int v4 = *v5;
LABEL_71:
    if (v4 == 47) {
      unsigned int v37 = 8;
    }
    else {
      unsigned int v37 = 9;
    }
    xmlXPathCompExprAdd((uint64_t)a1, 0xFFFFFFFF, 0xFFFFFFFF, v37, 0, 0, 0, 0LL, 0LL);
    for (uint64_t k = (uint64_t)(a1->cur + 1); ; ++k)
    {
      uint64_t v39 = *(unsigned __int8 *)(k - 1);
      if (((1LL << v39) & 0x100002600LL) == 0) {
        break;
      }
      a1->cur = (const xmlChar *)k;
    }

    if (v39 != 47) {
      goto LABEL_129;
    }
    while (2)
    {
      BOOL v40 = a1->cur;
      if (*a1->cur != 47) {
        goto LABEL_130;
      }
      BOOL v41 = v40 + 1;
      if (v40[1] == 47)
      {
        for (uint64_t m = v40 + 2; ; ++m)
        {
          a1->cur = m;
          unsigned int v43 = *m;
          BOOL v21 = v43 > 0x20;
          uint64_t v44 = (1LL << v43) & 0x100002600LL;
          if (v21 || v44 == 0) {
            break;
          }
        }

        xmlXPathCompExprAdd((uint64_t)a1, *((_DWORD *)a1->comp + 4), 0xFFFFFFFF, 0xAu, 6u, 1u, 0, 0LL, 0LL);
LABEL_97:
        xmlXPathCompRelativeLocationPath(a1);
      }

      else
      {
        while (1)
        {
          a1->cur = v41;
          unsigned int v46 = *v41;
          if (v46 > 0x20) {
            goto LABEL_92;
          }
          if (((1LL << v46) & 0x100002600LL) == 0) {
            break;
          }
          ++v41;
        }

        if (*v41)
        {
LABEL_92:
          if ((v46 & 0xFFFFFFDF) - 65 < 0x1A) {
            goto LABEL_97;
          }
        }
      }

      if (a1->error) {
        goto LABEL_130;
      }
      continue;
    }
  }

LABEL_129:
    xmlXPathCompRelativeLocationPath(a1);
LABEL_130:
    for (uint64_t i2 = (uint64_t)(a1->cur + 1); ; ++i2)
    {
      unsigned int v58 = *(unsigned __int8 *)(i2 - 1);
      BOOL v21 = v58 > 0x20;
      uint64_t v59 = (1LL << v58) & 0x100002600LL;
      if (v21 || v59 == 0) {
        break;
      }
      a1->cur = (const xmlChar *)i2;
    }

    return;
  }

  do
  {
    xmlXPathCompPredicate(a1, 1);
    for (nuint64_t n = a1->cur; ; a1->cur = nn)
    {
      unsigned int v51 = *nn;
      if (v51 > 0x20 || ((1LL << v51) & 0x100002600LL) == 0) {
        break;
      }
      ++nn;
    }
  }

  while (v51 == 91);
  if (!a1->error) {
    goto LABEL_120;
  }
}

void xmlXPathCompRelativeLocationPath(xmlXPathParserContext *a1)
{
  for (unint64_t i = a1->cur + 1; ; ++i)
  {
    uint64_t v3 = *(i - 1);
    if (((1LL << v3) & 0x100002600LL) == 0)
    {
      if (v3 == 47)
      {
        if (*i == 47)
        {
          for (uint64_t j = i + 1; ; ++j)
          {
            a1->cur = j;
            unsigned int v5 = *j;
            BOOL v6 = v5 > 0x20;
            uint64_t v7 = (1LL << v5) & 0x100002600LL;
            if (v6 || v7 == 0) {
              break;
            }
          }

          xmlXPathCompExprAdd((uint64_t)a1, *((_DWORD *)a1->comp + 4), 0xFFFFFFFF, 0xAu, 6u, 1u, 0, 0LL, 0LL);
        }

        else
        {
          do
          {
            a1->cur = i;
            unsigned int v9 = *i++;
            uint64_t v10 = (1LL << v9) & 0x100002600LL;
          }

          while (v9 <= 0x20 && v10 != 0);
        }
      }

      break;
    }

    a1->cur = i;
  }

  xmlXPathCompStep(a1);
  if (!a1->error)
  {
    for (uint64_t k = a1->cur; ; a1->cur = k)
    {
      uint64_t v13 = *k;
      if (((1LL << v13) & 0x100002600LL) == 0)
      {
        if (v13 == 47)
        {
LABEL_27:
          uint64_t v14 = k + 1;
          if (k[1] == 47)
          {
            for (uint64_t m = k + 2; ; ++m)
            {
              a1->cur = m;
              unsigned int v16 = *m;
              BOOL v6 = v16 > 0x20;
              uint64_t v17 = (1LL << v16) & 0x100002600LL;
              if (v6 || v17 == 0) {
                break;
              }
            }

            xmlXPathCompExprAdd((uint64_t)a1, *((_DWORD *)a1->comp + 4), 0xFFFFFFFF, 0xAu, 6u, 1u, 0, 0LL, 0LL);
          }

          else
          {
            while (1)
            {
              a1->cur = v14;
              unsigned int v19 = *v14;
              BOOL v6 = v19 > 0x20;
              uint64_t v20 = (1LL << v19) & 0x100002600LL;
              if (v6 || v20 == 0) {
                break;
              }
              ++v14;
            }
          }

          xmlXPathCompStep(a1);
          for (uint64_t k = a1->cur; ; a1->cur = k)
          {
            uint64_t v22 = *k;
            if (((1LL << v22) & 0x100002600LL) == 0)
            {
              if (v22 == 47) {
                goto LABEL_27;
              }
              return;
            }

            ++k;
          }
        }

        return;
      }

      ++k;
    }
  }

void xmlXPathCompPredicate(xmlXPathParserContextPtr ctxt, int a2)
{
  xmlXPathCompExprPtr comp = ctxt->comp;
  unsigned int v5 = *((_DWORD *)comp + 4);
  for (unint64_t i = ctxt->cur + 1; ; ++i)
  {
    unsigned int v7 = *(i - 1);
    if (v7 > 0x20 || ((1LL << v7) & 0x100002600LL) == 0) {
      break;
    }
    ctxt->cur = i;
  }

  if (v7 != 91) {
    goto LABEL_20;
  }
  do
  {
    ctxt->cur = i;
    unsigned int v9 = *i++;
    uint64_t v10 = (1LL << v9) & 0x100002600LL;
  }

  while (v9 <= 0x20 && v10 != 0);
  *((_DWORD *)comp + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = -1;
  xmlXPathCompileExpr(ctxt, a2 != 0);
  if (ctxt->error) {
    return;
  }
  if (*ctxt->cur != 93)
  {
LABEL_20:
    xmlXPathErr(ctxt, 6);
    return;
  }

  if (a2) {
    unsigned int v12 = 16;
  }
  else {
    unsigned int v12 = 15;
  }
  xmlXPathCompExprAdd((uint64_t)ctxt, v5, *((_DWORD *)ctxt->comp + 4), v12, 0, 0, 0, 0LL, 0LL);
  cur = ctxt->cur;
  if (*ctxt->cur) {
    goto LABEL_21;
  }
  while (1)
  {
    unsigned int v14 = *cur;
    BOOL v15 = v14 > 0x20;
    uint64_t v16 = (1LL << v14) & 0x100002600LL;
    if (v15 || v16 == 0) {
      break;
    }
LABEL_21:
    ctxt->cur = ++cur;
  }

xmlChar *xmlXPathParseQName(xmlXPathParserContext *a1, xmlChar **a2)
{
  *a2 = 0LL;
  uint64_t result = xmlXPathParseNCName(a1);
  if (result && *a1->cur == 58)
  {
    *a2 = result;
    if (*a1->cur) {
      ++a1->cur;
    }
    return xmlXPathParseNCName(a1);
  }

  return result;
}

void xmlXPathCompStep(xmlXPathParserContextPtr ctxt)
{
  for (unint64_t i = ctxt->cur + 1; ; ++i)
  {
    uint64_t v3 = *(i - 1);
    if (((1LL << v3) & 0x100002600LL) == 0) {
      break;
    }
    ctxt->cur = i;
  }

  if (v3 != 46)
  {
LABEL_13:
    if (ctxt->xptr)
    {
      unsigned int v9 = xmlXPathParseNCName(ctxt);
      uint64_t v10 = v9;
      if (v9 && xmlStrEqual(v9, (const xmlChar *)"range-to"))
      {
        unsigned int v11 = *((_DWORD *)ctxt->comp + 4);
        xmlFree(v10);
        for (uint64_t j = ctxt->cur + 1; ; ++j)
        {
          uint64_t v13 = *(j - 1);
          if (((1LL << v13) & 0x100002600LL) == 0)
          {
            if (v13 != 40) {
              goto LABEL_177;
            }
            do
            {
              ctxt->cur = j;
              unsigned int v27 = *j++;
              uint64_t v28 = (1LL << v27) & 0x100002600LL;
            }

            while (v27 <= 0x20 && v28 != 0);
            xmlXPathCompileExpr(ctxt, 1LL);
            if (!ctxt->error)
            {
              for (uint64_t k = ctxt->cur + 1; ; ++k)
              {
                uint64_t v31 = *(k - 1);
                if (((1LL << v31) & 0x100002600LL) == 0)
                {
                  if (v31 != 41) {
                    goto LABEL_177;
                  }
                  BOOL v23 = 0LL;
                  unsigned int v26 = 0;
                  unsigned int v24 = 0;
                  char v25 = 0;
                  unsigned int v17 = 0;
                  ctxt->cur = k;
                  goto LABEL_162;
                }

                ctxt->cur = k;
              }

              goto LABEL_177;
            }

            return;
          }

          ctxt->cur = j;
        }

        goto LABEL_177;
      }
    }

    else
    {
      uint64_t v10 = 0LL;
    }

    if (*ctxt->cur == 42) {
      goto LABEL_29;
    }
    if (v10 || (uint64_t v10 = xmlXPathParseNCName(ctxt)) != 0LL)
    {
      unsigned int v19 = *v10;
      unsigned int v17 = 4;
      if (v19 <= 0x6D)
      {
        switch(*v10)
        {
          case 'a':
            unsigned int v17 = xmlStrEqual(v10, (const xmlChar *)"ancestor") != 0;
            if (xmlStrEqual(v10, (const xmlChar *)"ancestor-or-self")) {
              unsigned int v17 = 2;
            }
            if (!xmlStrEqual(v10, (const xmlChar *)"attribute")) {
              goto LABEL_112;
            }
            unsigned int v17 = 3;
            goto LABEL_113;
          case 'c':
            if (xmlStrEqual(v10, (const xmlChar *)"child")) {
              goto LABEL_113;
            }
            break;
          case 'd':
            if (xmlStrEqual(v10, (const xmlChar *)"descendant")) {
              unsigned int v17 = 5;
            }
            else {
              unsigned int v17 = 0;
            }
            if (!xmlStrEqual(v10, (const xmlChar *)"descendant-or-self")) {
              goto LABEL_112;
            }
            unsigned int v17 = 6;
            goto LABEL_113;
          case 'f':
            if (xmlStrEqual(v10, (const xmlChar *)"following")) {
              unsigned int v17 = 7;
            }
            else {
              unsigned int v17 = 0;
            }
            if (!xmlStrEqual(v10, (const xmlChar *)"following-sibling")) {
              goto LABEL_112;
            }
            unsigned int v17 = 8;
            goto LABEL_113;
          default:
            break;
        }

xmlChar *xmlXPathParseLiteral(xmlXPathParserContextPtr ctxt)
{
  xmlXPathParserContextPtr v1 = ctxt;
  cur = ctxt->cur;
  int v3 = *ctxt->cur;
  if (v3 == 39)
  {
    unsigned int v4 = cur + 1;
    for (unint64_t i = cur + 1; ; ++i)
    {
      v1->cur = i;
      unsigned int v7 = *i;
      if (v7 <= 0x1F)
      {
        if (v7 > 0xD || ((1 << v7) & 0x2600) == 0)
        {
LABEL_22:
          xmlValidCtxt ctxt = v1;
          int v9 = 2;
          goto LABEL_20;
        }
      }

      else if (v7 == 39)
      {
LABEL_17:
        uint64_t result = xmlStrndup(v4, (int)i - (int)v4);
        if (*v1->cur) {
          ++v1->cur;
        }
        return result;
      }
    }
  }

  if (v3 == 34)
  {
    unsigned int v4 = cur + 1;
    for (unint64_t i = cur + 1; ; ++i)
    {
      v1->cur = i;
      unsigned int v6 = *i;
      if (v6 <= 0x1F)
      {
        if (v6 > 0xD || ((1 << v6) & 0x2600) == 0) {
          goto LABEL_22;
        }
      }

      else if (v6 == 34)
      {
        goto LABEL_17;
      }
    }
  }

  int v9 = 3;
LABEL_20:
  xmlXPathErr(ctxt, v9);
  return 0LL;
}

uint64_t xmlXPathRunStreamEval(uint64_t a1, xmlPatternPtr comp, uint64_t a3, int a4)
{
  uint64_t v4 = 0xFFFFFFFFLL;
  if (!a1) {
    return v4;
  }
  if (!comp) {
    return v4;
  }
  int v9 = xmlPatternMaxDepth(comp);
  if (v9 == -1) {
    return v4;
  }
  int v10 = v9 == -2 ? 10000 : v9;
  int v11 = xmlPatternMinDepth(comp);
  if (v11 == -1) {
    return v4;
  }
  int v12 = v11;
  int v13 = xmlPatternFromRoot(comp);
  if (v13 < 0) {
    return v4;
  }
  int v14 = v13;
  if (!a4)
  {
    if (!a3) {
      return v4;
    }
    xmlXPathObjectPtr v18 = xmlXPathCacheNewNodeSet(a1, 0LL);
    *(void *)a3 = v18;
    if (!v18) {
      return v4;
    }
  }

  if (!v12)
  {
    if (v14)
    {
      if (!a4)
      {
        xmlXPathNodeSetAddUnique(*(xmlNodeSetPtr *)(*(void *)a3 + 8LL), *(xmlNodePtr *)a1);
        if (!v10) {
          return 0LL;
        }
        goto LABEL_12;
      }
    }

    else if (!a4)
    {
      xmlXPathNodeSetAddUnique(*(xmlNodeSetPtr *)(*(void *)a3 + 8LL), *(xmlNodePtr *)(a1 + 8));
      if (!v10) {
        return 0LL;
      }
      goto LABEL_25;
    }

    return 1LL;
  }

  if (!v10) {
    return 0LL;
  }
LABEL_12:
  if (v14)
  {
    xmlNodePtr v15 = *(xmlNodePtr *)a1;
    if (*(void *)a1)
    {
      uint64_t v16 = 0LL;
      char v17 = 0;
      goto LABEL_28;
    }

    return 0LL;
  }

uint64_t xmlXPathCompOpEvalToBoolean(uint64_t a1, unsigned int *a2, int a3)
{
  while (1)
  {
    if (linkedOnOrAfterFall2022OSVersions()
      && *(void *)(*(void *)(a1 + 24) + 352LL)
      && (xmlXPathCheckOpLimit((xmlXPathParserContext *)a1, 1uLL) & 0x80000000) != 0)
    {
      return 0LL;
    }

    uint64_t BOOLval = *a2;
    if ((_DWORD)BOOLval != 17) {
      break;
    }
    signed int v7 = a2[1];
    if (v7 == -1) {
      return 0LL;
    }
    a2 = (unsigned int *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 56LL * v7);
  }

  if (!(_DWORD)BOOLval) {
    return BOOLval;
  }
  if ((_DWORD)BOOLval == 10)
  {
    signed int v9 = a2[1];
    if (v9 != -1)
    {
      xmlXPathCompOpEval(a1, (unsigned int *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 56LL * v9));
      if (*(_DWORD *)(a1 + 16)) {
        return 0xFFFFFFFFLL;
      }
      xmlXPathNodeCollectAndTest((xmlXPathParserContextPtr)a1, (uint64_t)a2, 0LL, 0LL, 1);
LABEL_17:
      if (!*(_DWORD *)(a1 + 16))
      {
        int v10 = *(_DWORD *)(a1 + 40);
        unsigned int v11 = v10 - 1;
        if (v10 >= 1)
        {
          *(_DWORD *)(a1 + 4xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v11;
          uint64_t v12 = *(void *)(a1 + 48);
          uint64_t v13 = v10 == 1 ? 0LL : *(void *)(v12 + 8LL * (v10 - 2));
          *(void *)(a1 + 32) = v13;
          int v14 = *(xmlXPathObject **)(v12 + 8LL * v11);
          *(void *)(v12 + 8LL * v1xmlSAX2InitDefaultSAXHandler(&hdlr, 1) = 0LL;
          if (v14)
          {
            if (v14->type == XPATH_BOOLEAN)
            {
              uint64_t BOOLval = v14->BOOLval;
            }

            else
            {
              if (a3) {
                uint64_t v15 = xmlXPathEvaluatePredicateResult((xmlXPathParserContextPtr)a1, v14);
              }
              else {
                uint64_t v15 = xmlXPathCastToBoolean(v14);
              }
              uint64_t BOOLval = v15;
            }

            xmlXPathReleaseObject(*(void *)(a1 + 24), v14);
            return BOOLval;
          }
        }
      }

      return 0xFFFFFFFFLL;
    }

    return 0LL;
  }

  if ((_DWORD)BOOLval != 11)
  {
    xmlXPathCompOpEval(a1, a2);
    goto LABEL_17;
  }

  if (a3) {
    return xmlXPathEvaluatePredicateResult((xmlXPathParserContextPtr)a1, *((xmlXPathObjectPtr *)a2 + 3));
  }
  else {
    return xmlXPathCastToBoolean(*((xmlXPathObjectPtr *)a2 + 3));
  }
}

uint64_t xmlXPathCompOpEval(uint64_t a1, unsigned int *a2)
{
  if (*(_DWORD *)(a1 + 16)) {
    return 0LL;
  }
  if (linkedOnOrAfterFall2022OSVersions())
  {
    uint64_t v6 = *(void *)(a1 + 24);
    if (*(void *)(v6 + 352))
    {
      if ((xmlXPathCheckOpLimit((xmlXPathParserContext *)a1, 1uLL) & 0x80000000) != 0) {
        return 0LL;
      }
      uint64_t v6 = *(void *)(a1 + 24);
    }

    int v7 = *(_DWORD *)(v6 + 368);
    if (v7 >= 5000)
    {
      uint64_t v8 = (xmlXPathParserContext *)a1;
      int v9 = 26;
LABEL_10:
      xmlXPathErr(v8, v9);
      return 0LL;
    }

    *(_DWORD *)(v6 + 368) = v7 + 1;
  }

  uint64_t v2 = *a2;
  uint64_t v10 = *(void *)(a1 + 56);
  switch((int)v2)
  {
    case 0:
      goto LABEL_287;
    case 1:
      uint64_t v19 = xmlXPathCompOpEval(a1, *(void *)(v10 + 8) + 56LL * (int)a2[1]);
      if (*(_DWORD *)(a1 + 16)) {
        return 0LL;
      }
      uint64_t v2 = v19;
      xmlXPathBooleanFunction((xmlXPathParserContextPtr)a1, 1);
      uint64_t v20 = *(void *)(a1 + 32);
      if (!v20 || !*(_DWORD *)(v20 + 16)) {
        goto LABEL_287;
      }
      int v21 = *(_DWORD *)(a1 + 40);
      unsigned int v22 = v21 - 1;
      if (v21 < 1)
      {
        uint64_t v105 = 0LL;
      }

      else
      {
        *(_DWORD *)(a1 + 4xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v22;
        uint64_t v23 = *(void *)(a1 + 48);
        if (v21 == 1) {
          uint64_t v108 = 0LL;
        }
        else {
          uint64_t v108 = *(void *)(v23 + 8LL * (v21 - 2));
        }
        *(void *)(a1 + 32) = v108;
        uint64_t v105 = *(xmlXPathObject **)(v23 + 8LL * v22);
        *(void *)(v23 + 8LL * v22) = 0LL;
      }

      uint64_t v2 = xmlXPathCompOpEval(a1, *(void *)(v10 + 8) + 56LL * (int)a2[2]) + v2;
      if (*(_DWORD *)(a1 + 16)) {
        goto LABEL_217;
      }
      xmlXPathBooleanFunction((xmlXPathParserContextPtr)a1, 1);
      uint64_t v109 = *(void *)(a1 + 32);
      if (!v109) {
        goto LABEL_221;
      }
      int v110 = *(_DWORD *)(v109 + 16) & v105->BOOLval;
      goto LABEL_220;
    case 2:
      uint64_t v24 = xmlXPathCompOpEval(a1, *(void *)(v10 + 8) + 56LL * (int)a2[1]);
      if (*(_DWORD *)(a1 + 16)) {
        return 0LL;
      }
      uint64_t v2 = v24;
      xmlXPathBooleanFunction((xmlXPathParserContextPtr)a1, 1);
      uint64_t v25 = *(void *)(a1 + 32);
      if (!v25 || *(_DWORD *)(v25 + 16) == 1) {
        goto LABEL_287;
      }
      int v26 = *(_DWORD *)(a1 + 40);
      unsigned int v27 = v26 - 1;
      if (v26 < 1)
      {
        uint64_t v105 = 0LL;
      }

      else
      {
        *(_DWORD *)(a1 + 4xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v27;
        uint64_t v28 = *(void *)(a1 + 48);
        if (v26 == 1) {
          uint64_t v144 = 0LL;
        }
        else {
          uint64_t v144 = *(void *)(v28 + 8LL * (v26 - 2));
        }
        *(void *)(a1 + 32) = v144;
        uint64_t v105 = *(xmlXPathObject **)(v28 + 8LL * v27);
        *(void *)(v28 + 8LL * v27) = 0LL;
      }

      uint64_t v2 = xmlXPathCompOpEval(a1, *(void *)(v10 + 8) + 56LL * (int)a2[2]) + v2;
      if (*(_DWORD *)(a1 + 16))
      {
LABEL_217:
        xmlXPathFreeObject(v105);
        goto LABEL_287;
      }

      xmlXPathBooleanFunction((xmlXPathParserContextPtr)a1, 1);
      uint64_t v109 = *(void *)(a1 + 32);
      if (v109)
      {
        int v110 = *(_DWORD *)(v109 + 16) | v105->BOOLval;
LABEL_220:
        *(_DWORD *)(v109 + 16) = v110;
      }

LABEL_146:
      BOOL v106 = v71;
      int v107 = (xmlXPathParserContext *)a1;
LABEL_147:
      valuePush(v107, v106);
      goto LABEL_287;
    case 13:
      int v56 = *(_DWORD *)(a1 + 40);
      signed int v57 = a2[1];
      if (v57 == -1)
      {
        uint64_t v2 = 0LL;
        int v58 = *(_DWORD *)(a1 + 40);
      }

      else
      {
        uint64_t v2 = xmlXPathCompOpEval(a1, *(void *)(v10 + 8) + 56LL * v57);
        if (*(_DWORD *)(a1 + 16)) {
          goto LABEL_287;
        }
        int v58 = *(_DWORD *)(a1 + 40);
      }

      uint64_t v75 = a2[3];
      if (v58 < (int)v75 + v56)
      {
        xmlGenericErrorFunc v76 = *__xmlGenericError();
        uint64_t v77 = __xmlGenericErrorContext();
        v76(*v77, "xmlXPathCompOpEval: parameter error\n");
LABEL_103:
        int v78 = 10;
        goto LABEL_104;
      }

      int v90 = v58 - 1;
      while (*(void *)(*(void *)(a1 + 48) + 8LL * v90))
      {
        --v90;
        if (!--v75) {
          goto LABEL_136;
        }
      }

      xmlGenericErrorFunc v94 = *__xmlGenericError();
      int v95 = __xmlGenericErrorContext();
      v94(*v95, "xmlXPathCompOpEval: parameter error\n");
      *(_DWORD *)(a1 + 16) = 10;
LABEL_136:
      xmlXPathFunction v96 = (xmlXPathFunction)*((void *)a2 + 5);
      if (v96)
      {
        int v97 = (const xmlChar *)*((void *)a2 + 6);
      }

      else
      {
        xmlChar v98 = (const xmlChar *)*((void *)a2 + 4);
        int v99 = *(xmlXPathContext **)(a1 + 24);
        if (v98)
        {
          int v100 = xmlXPathNsLookup(v99, v98);
          if (!v100)
          {
            xmlGenericErrorFunc v91 = *__xmlGenericError();
            double v92 = *__xmlGenericErrorContext();
            int v93 = "xmlXPathCompOpEval: function %s bound to undefined prefix %s\n";
            goto LABEL_133;
          }

          int v97 = v100;
          xmlXPathFunction v96 = xmlXPathFunctionLookupNS(*(xmlXPathContextPtr *)(a1 + 24), *((const xmlChar **)a2 + 3), v100);
        }

        else
        {
          xmlXPathFunction v96 = xmlXPathFunctionLookup(v99, *((const xmlChar **)a2 + 3));
          int v97 = 0LL;
        }

        if (!v96)
        {
          xmlGenericErrorFunc v145 = *__xmlGenericError();
          int v146 = __xmlGenericErrorContext();
          v145(*v146, "xmlXPathCompOpEval: function %s not found\n", *((const char **)a2 + 3));
          uint64_t v8 = (xmlXPathParserContext *)a1;
          int v9 = 9;
          goto LABEL_10;
        }

        *((void *)a2 + 5) = v96;
        *((void *)a2 + 6) = v97;
      }

      uint64_t v123 = *(void *)(a1 + 24);
      uint64_t v124 = a2[3];
      *(_OWORD *)cura = *(_OWORD *)(v123 + 168);
      *(void *)(v123 + 168) = *((void *)a2 + 3);
      *(void *)(v123 + 176) = v97;
      ((void (*)(uint64_t, uint64_t))v96)(a1, v124);
      *(_OWORD *)(*(void *)(a1 + 24) + 168LL) = *(_OWORD *)cura;
      if (!*(_DWORD *)(a1 + 16) && *(_DWORD *)(a1 + 40) != v56 + 1)
      {
        uint64_t v8 = (xmlXPathParserContext *)a1;
        int v9 = 23;
        goto LABEL_10;
      }

      goto LABEL_287;
    case 14:
      signed int v59 = a2[1];
      if (v59 == -1)
      {
        uint64_t v2 = 0LL;
      }

      else
      {
        uint64_t v60 = xmlXPathCompOpEval(a1, *(void *)(v10 + 8) + 56LL * v59);
        if (*(_DWORD *)(a1 + 16)) {
          return 0LL;
        }
        uint64_t v2 = v60;
      }

      signed int v79 = a2[2];
      if (v79 == -1) {
        goto LABEL_287;
      }
      int v80 = xmlXPathCompOpEval(a1, *(void *)(v10 + 8) + 56LL * v79);
      if (*(_DWORD *)(a1 + 16)) {
        return 0LL;
      }
      uint64_t v2 = (v80 + v2);
      goto LABEL_287;
    case 15:
    case 16:
      signed int v11 = a2[1];
      if (v11 == -1) {
        goto LABEL_280;
      }
      signed int v12 = a2[2];
      if (v12 == -1) {
        goto LABEL_88;
      }
      uint64_t v13 = *(void *)(v10 + 8);
      int v14 = (unsigned int *)(v13 + 56LL * v11);
      if ((*v14 & 0xFFFFFFFE) == 0x10 && *(_DWORD *)(v13 + 56LL * v12) == 11)
      {
        uint64_t v15 = *(void *)(v13 + 56LL * v12 + 24);
        if (v15)
        {
          if (*(_DWORD *)v15 == 3 && *(double *)(v15 + 24) == 1.0)
          {
            uint64_t v195 = 0LL;
            uint64_t v2 = xmlXPathCompOpEvalFirst(a1, v14, &v195);
            if (*(_DWORD *)(a1 + 16))
            {
LABEL_21:
              int v16 = 1;
              goto LABEL_277;
            }

            uint64_t v175 = *(void *)(a1 + 32);
            if (v175)
            {
              if (*(_DWORD *)v175 == 1)
              {
                char v176 = *(int **)(v175 + 8);
                if (v176)
                {
                  if (*v176 >= 2) {
                    xmlXPathNodeSetClearFromPos(v176, 1, 1);
                  }
                }
              }
            }

LABEL_276:
            int v16 = 2;
LABEL_277:
            if (v16 != 2) {
              return 0LL;
            }
            goto LABEL_287;
          }
        }
      }

      uint64_t v67 = *(void *)(v10 + 8);
      if (*(_DWORD *)(v67 + 56LL * v11) != 17) {
        goto LABEL_88;
      }
      if (*(_DWORD *)(v67 + 56LL * v12) != 17) {
        goto LABEL_88;
      }
      int v68 = *(_DWORD *)(v67 + 56LL * v12 + 4);
      if (v68 == -1) {
        goto LABEL_88;
      }
      if (*(_DWORD *)(v67 + 56LL * v68) != 13) {
        goto LABEL_88;
      }
      if (*(void *)(v67 + 56LL * v68 + 32)) {
        goto LABEL_88;
      }
      if (*(_DWORD *)(v67 + 56LL * v68 + 12)) {
        goto LABEL_88;
      }
      int v177 = *(const xmlChar **)(v67 + 56LL * v68 + 24);
      if (!v177) {
        goto LABEL_88;
      }
      int v178 = xmlStrEqual(v177, (const xmlChar *)"last");
      signed int v179 = a2[1];
      if (v178)
      {
        uint64_t v195 = 0LL;
        uint64_t v2 = xmlXPathCompOpEvalLast(a1, (unsigned int *)(*(void *)(v10 + 8) + 56LL * v179), &v195);
        if (*(_DWORD *)(a1 + 16)) {
          goto LABEL_21;
        }
        uint64_t v180 = *(void *)(a1 + 32);
        if (v180)
        {
          if (*(_DWORD *)v180 == 1)
          {
            uint64_t v181 = *(void *)(v180 + 8);
            if (v181)
            {
            }
          }
        }

        goto LABEL_276;
      }

      signed int v11 = a2[1];
      if (v179 == -1) {
LABEL_280:
      }
        uint64_t v2 = 0LL;
      else {
LABEL_88:
      }
        uint64_t v2 = xmlXPathCompOpEval(a1, *(void *)(v10 + 8) + 56LL * v11);
      if (*(_DWORD *)(a1 + 16)) {
        return 0LL;
      }
      int v182 = a2[2];
      if (v182 != -1)
      {
        uint64_t v183 = *(void *)(a1 + 32);
        if (v183)
        {
          if (*(_DWORD *)v183 == 1)
          {
            int v184 = *(_DWORD *)(a1 + 40);
            uint64_t v185 = *(void *)(a1 + 48);
            unsigned int v186 = v184 - 1;
            *(_DWORD *)(a1 + 4xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v184 - 1;
            if (v184 == 1) {
              uint64_t v187 = 0LL;
            }
            else {
              uint64_t v187 = *(void *)(v185 + 8LL * (v184 - 2));
            }
            *(void *)(a1 + 32) = v187;
            unsigned int v188 = *(xmlXPathObject **)(v185 + 8LL * v186);
            *(void *)(v185 + 8LL * v186) = 0LL;
            uint64_t v189 = &v188->nodesetval->nodeNr;
            if (v189) {
              xmlXPathNodeSetFilter((xmlXPathParserContext *)a1, v189, a2[2], 1, *v189, 1);
            }
            int v107 = (xmlXPathParserContext *)a1;
            BOOL v106 = v188;
            goto LABEL_147;
          }

          if (*(_DWORD *)v183 != 7) {
            goto LABEL_289;
          }
          xmlXPathLocationSetFilter((xmlXPathParserContext *)a1, *(int **)(v183 + 40), v182, **(_DWORD **)(v183 + 40));
        }
      }

      goto LABEL_287;
    case 17:
      signed int v61 = a2[1];
      if (v61 == -1) {
        uint64_t v2 = 0LL;
      }
      else {
        uint64_t v2 = xmlXPathCompOpEval(a1, *(void *)(v10 + 8) + 56LL * v61);
      }
      if (*(_DWORD *)(a1 + 16)) {
        return 0LL;
      }
      uint64_t v81 = *(void *)(a1 + 32);
      if (v81)
      {
        if (*(_DWORD *)v81 == 1)
        {
          unsigned int v82 = *(unsigned int **)(v81 + 8);
          if (v82)
          {
            unint64_t v83 = *v82;
          }
        }
      }

      goto LABEL_287;
    case 18:
      uint64_t v62 = *(void *)(a1 + 24);
      uint64_t v63 = *(void *)(v62 + 8);
      uint64_t v64 = *(void *)(v62 + 104);
      signed int v65 = a2[1];
      if (v65 == -1)
      {
        uint64_t v2 = 0LL;
      }

      else
      {
        uint64_t v66 = xmlXPathCompOpEval(a1, *(void *)(v10 + 8) + 56LL * v65);
        if (*(_DWORD *)(a1 + 16)) {
          return 0LL;
        }
        uint64_t v2 = v66;
      }

      uint64_t v84 = *(void *)(a1 + 32);
      if (!v84)
      {
        uint64_t v8 = (xmlXPathParserContext *)a1;
        int v9 = 10;
        goto LABEL_10;
      }

      if (a2[2] == -1) {
        goto LABEL_287;
      }
      if (*(_DWORD *)v84 == 1)
      {
        int v101 = *(_DWORD *)(a1 + 40);
        uint64_t v102 = *(void *)(a1 + 48);
        unsigned int v103 = v101 - 1;
        *(_DWORD *)(a1 + 4xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v101 - 1;
        if (v101 == 1) {
          uint64_t v104 = 0LL;
        }
        else {
          uint64_t v104 = *(void *)(v102 + 8LL * (v101 - 2));
        }
        *(void *)(a1 + 32) = v104;
        int v125 = *(xmlXPathObject **)(v102 + 8LL * v103);
        *(void *)(v102 + 8LL * v10xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0LL;
        uint64_t v126 = &v125->nodesetval->nodeNr;
        cur = xmlXPtrLocationSetCreate(0LL);
        if (v126 && *v126 >= 1)
        {
          xmlIDPtr v127 = v125;
          uint64_t v128 = 0LL;
          while (1)
          {
            int v129 = *(xmlNode **)(*((void *)v126 + 1) + 8 * v128);
            uint64_t v130 = *(void *)(a1 + 24);
            *(void *)(v130 + 8) = v129;
            int v131 = xmlXPathCacheNewNodeSet(v130, v129);
            valuePush((xmlXPathParserContextPtr)a1, v131);
            signed int v132 = a2[2];
            if (v132 != -1) {
              uint64_t v2 = xmlXPathCompOpEval(a1, *(void *)(v10 + 8) + 56LL * v132) + v2;
            }
            if (*(_DWORD *)(a1 + 16)) {
              break;
            }
            int v133 = *(_DWORD *)(a1 + 40);
            unsigned int v134 = v133 - 1;
            if (v133 < 1)
            {
              uint64_t v136 = 0LL;
            }

            else
            {
              *(_DWORD *)(a1 + 4xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v134;
              uint64_t v135 = *(void *)(a1 + 48);
              if (v133 == 1) {
                uint64_t v137 = 0LL;
              }
              else {
                uint64_t v137 = *(void *)(v135 + 8LL * (v133 - 2));
              }
              *(void *)(a1 + 32) = v137;
              uint64_t v136 = *(xmlXPathObject **)(v135 + 8LL * v134);
              *(void *)(v135 + 8LL * v13xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
            }

            unsigned __int8 v138 = xmlXPtrNewRangeNodeObject(*(xmlNodePtr *)(*((void *)v126 + 1) + 8 * v128), v136);
            if (v138) {
              xmlXPtrLocationSetAdd(cur, v138);
            }
            if (v136) {
              xmlXPathReleaseObject(*(void *)(a1 + 24), v136);
            }
            if (*(xmlXPathObject **)(a1 + 32) == v131)
            {
              int v139 = *(_DWORD *)(a1 + 40);
              unsigned int v140 = v139 - 1;
              if (v139 < 1)
              {
                uint64_t v142 = 0LL;
              }

              else
              {
                *(_DWORD *)(a1 + 4xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v140;
                uint64_t v141 = *(void *)(a1 + 48);
                if (v139 == 1) {
                  uint64_t v143 = 0LL;
                }
                else {
                  uint64_t v143 = *(void *)(v141 + 8LL * (v139 - 2));
                }
                *(void *)(a1 + 32) = v143;
                uint64_t v142 = *(xmlXPathObject **)(v141 + 8LL * v140);
                *(void *)(v141 + 8LL * v14xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = 0LL;
              }

              xmlXPathReleaseObject(*(void *)(a1 + 24), v142);
            }

            if (++v128 >= *v126)
            {
              int v125 = v127;
              goto LABEL_259;
            }
          }

          xmlXPtrFreeLocationSet(cur);
          int v125 = v127;
LABEL_260:
          xmlXPathReleaseObject(*(void *)(a1 + 24), v125);
          uint64_t v174 = *(void *)(a1 + 24);
          *(void *)(v174 + 8) = v63;
          *(void *)(v174 + 10xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v64;
          goto LABEL_287;
        }

LABEL_259:
        uint64_t v173 = xmlXPtrWrapLocationSet(cur);
        valuePush((xmlXPathParserContextPtr)a1, v173);
        goto LABEL_260;
      }

      if (*(_DWORD *)v84 != 7)
      {
LABEL_289:
        uint64_t v8 = (xmlXPathParserContext *)a1;
        int v9 = 11;
        goto LABEL_10;
      }

      uint64_t v85 = *(_DWORD **)(v84 + 40);
      if (v85 && *v85)
      {
        int v86 = *(_DWORD *)(a1 + 40);
        uint64_t v87 = *(void *)(a1 + 48);
        unsigned int v88 = v86 - 1;
        *(_DWORD *)(a1 + 4xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v86 - 1;
        uint64_t v191 = v63;
        if (v86 == 1) {
          uint64_t v89 = 0LL;
        }
        else {
          uint64_t v89 = *(void *)(v87 + 8LL * (v86 - 2));
        }
        *(void *)(a1 + 32) = v89;
        uint64_t v147 = *(xmlXPathObject **)(v87 + 8LL * v88);
        *(void *)(v87 + 8LL * v88) = 0LL;
        int v190 = v147;
        int user = (int *)v147->user;
        cur = xmlXPtrLocationSetCreate(0LL);
        LODWORD(v149) = *user;
        if (*user >= 1)
        {
          uint64_t v150 = 0LL;
          while (1)
          {
            uint64_t v151 = *(xmlNode **)(*(void *)(*((void *)user + 1) + 8 * v150) + 40LL);
            uint64_t v152 = *(void *)(a1 + 24);
            *(void *)(v152 + 8) = v151;
            *(_DWORD *)(v152 + 10xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v149;
            *(_DWORD *)(v152 + 108) = v150 + 1;
            unsigned int v153 = xmlXPathCacheNewNodeSet(v152, v151);
            valuePush((xmlXPathParserContextPtr)a1, v153);
            signed int v154 = a2[2];
            if (v154 != -1) {
              uint64_t v2 = xmlXPathCompOpEval(a1, *(void *)(v10 + 8) + 56LL * v154) + v2;
            }
            if (*(_DWORD *)(a1 + 16)) {
              break;
            }
            int v155 = *(_DWORD *)(a1 + 40);
            unsigned int v156 = v155 - 1;
            uint64_t v192 = v150 + 1;
            if (v155 < 1)
            {
              unint64_t v158 = 0LL;
            }

            else
            {
              *(_DWORD *)(a1 + 4xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v156;
              uint64_t v157 = *(void *)(a1 + 48);
              if (v155 == 1) {
                uint64_t v159 = 0LL;
              }
              else {
                uint64_t v159 = *(void *)(v157 + 8LL * (v155 - 2));
              }
              *(void *)(a1 + 32) = v159;
              unint64_t v158 = *(xmlXPathObject **)(v157 + 8LL * v156);
              *(void *)(v157 + 8LL * v156) = 0LL;
            }

            if (v158->type == XPATH_LOCATIONSET)
            {
              int v160 = (int *)v158->user;
              if (*v160 >= 1)
              {
                uint64_t v161 = 0LL;
                do
                {
                  uint64_t v162 = *(void *)(*((void *)user + 1) + 8 * v150);
                  __int16 v163 = *(xmlNode **)(v162 + 40);
                  int v164 = *(_DWORD *)(v162 + 48);
                  uint64_t v165 = *(void *)(*((void *)v160 + 1) + 8 * v161);
                  unint64_t v166 = xmlXPtrNewRange(v163, v164, *(xmlNodePtr *)(v165 + 56), *(_DWORD *)(v165 + 64));
                  if (v166) {
                    xmlXPtrLocationSetAdd(cur, v166);
                  }
                  ++v161;
                }

                while (v161 < *v160);
              }
            }

            else
            {
              unint64_t v167 = xmlXPtrNewRangeNodeObject( *(xmlNodePtr *)(*(void *)(*((void *)user + 1) + 8 * v150) + 40LL),  v158);
              if (v167) {
                xmlXPtrLocationSetAdd(cur, v167);
              }
            }

            xmlXPathReleaseObject(*(void *)(a1 + 24), v158);
            if (*(xmlXPathObject **)(a1 + 32) == v153)
            {
              int v168 = *(_DWORD *)(a1 + 40);
              unsigned int v169 = v168 - 1;
              if (v168 < 1)
              {
                int v171 = 0LL;
              }

              else
              {
                *(_DWORD *)(a1 + 4xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v169;
                uint64_t v170 = *(void *)(a1 + 48);
                if (v168 == 1) {
                  uint64_t v172 = 0LL;
                }
                else {
                  uint64_t v172 = *(void *)(v170 + 8LL * (v168 - 2));
                }
                *(void *)(a1 + 32) = v172;
                int v171 = *(xmlXPathObject **)(v170 + 8LL * v169);
                *(void *)(v170 + 8LL * v169) = 0LL;
              }

              xmlXPathReleaseObject(*(void *)(a1 + 24), v171);
            }

            uint64_t v149 = *user;
            ++v150;
            if (v192 >= v149) {
              goto LABEL_258;
            }
          }

          xmlXPtrFreeLocationSet(cur);
          int v125 = v190;
          uint64_t v63 = v191;
          goto LABEL_260;
        }

LABEL_287:
      return v2;
    default:
      xmlGenericErrorFunc v17 = *__xmlGenericError();
      xmlXPathObjectPtr v18 = __xmlGenericErrorContext();
      v17(*v18, "XPath: unknown precompiled operation %d\n", *a2);
      uint64_t v2 = 0LL;
      goto LABEL_103;
  }

uint64_t xmlXPathCheckOpLimit(xmlXPathParserContext *a1, unint64_t a2)
{
  uint64_t result = linkedOnOrAfterFall2022OSVersions();
  if ((_DWORD)result)
  {
    xmlXPathContextPtr context = a1->context;
    doc = (xmlNode *)context[1].doc;
    if ((unint64_t)doc >= a2 && (xmlNodePtr node = context[1].node, node <= (xmlNode *)((char *)doc - a2)))
    {
      uint64_t result = 0LL;
      context[1].xmlNodePtr node = (xmlNodePtr)((char *)node + a2);
    }

    else
    {
      context[1].xmlNodePtr node = doc;
      xmlXPathErr(a1, 25);
      return 0xFFFFFFFFLL;
    }
  }

  return result;
}

uint64_t xmlXPathNodeCollectAndTest( xmlXPathParserContextPtr ctxt, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  xmlXPathParserContextPtr v5 = ctxt;
  xmlXPathObjectPtr value = ctxt->value;
  if (!value || value->type != XPATH_NODESET)
  {
    int v17 = 11;
    goto LABEL_8;
  }

  int v85 = *(_DWORD *)(a2 + 12);
  int v86 = *(_DWORD *)(a2 + 16);
  int v83 = *(_DWORD *)(a2 + 20);
  signed int v12 = *(const xmlChar **)(a2 + 24);
  signed int v11 = *(xmlChar **)(a2 + 32);
  xmlXPathContextPtr context = ctxt->context;
  int valueNr = ctxt->valueNr;
  unsigned int v15 = valueNr - 1;
  if (valueNr < 1)
  {
    uint64_t v20 = 0LL;
    if (v12)
    {
LABEL_14:
      int v21 = xmlXPathNsLookup(context, v12);
      if (v21) {
        goto LABEL_15;
      }
      xmlXPathReleaseObject((uint64_t)context, v20);
      xmlValidCtxt ctxt = v5;
      int v17 = 19;
LABEL_8:
      xmlXPathErr(ctxt, v17);
      return 0LL;
    }
  }

  else
  {
    ctxt->int valueNr = v15;
    valueTab = ctxt->valueTab;
    if (valueNr == 1) {
      unsigned int v22 = 0LL;
    }
    else {
      unsigned int v22 = valueTab[valueNr - 2];
    }
    ctxt->xmlXPathObjectPtr value = v22;
    uint64_t v20 = valueTab[v15];
    valueTab[v15] = 0LL;
    if (v12) {
      goto LABEL_14;
    }
  }

  int v21 = 0LL;
LABEL_15:
  int v78 = (xmlChar *)v21;
  str1 = v11;
  uint64_t v23 = 0LL;
  uint64_t v81 = xmlXPathNodeSetMergeAndClear;
  uint64_t v87 = xmlXPathNextAncestor;
  switch(v85)
  {
    case 1:
      goto LABEL_39;
    case 2:
      uint64_t v23 = 0LL;
      uint64_t v81 = xmlXPathNodeSetMergeAndClear;
      uint64_t v24 = xmlXPathNextAncestorOrSelf;
      goto LABEL_38;
    case 3:
      uint64_t v23 = 0LL;
      a4 = 0LL;
      uint64_t v81 = (int *(*)(unsigned int *, int *))xmlXPathNodeSetMergeAndClearNoDupls;
      uint64_t v24 = xmlXPathNextAttribute;
      goto LABEL_38;
    case 4:
      a4 = 0LL;
      BOOL v26 = (v86 == 3 || v86 == 5) && v83 == 0;
      unsigned int v27 = xmlXPathNextChild;
      if (v26) {
        unsigned int v27 = (xmlNodePtr (__cdecl *)(xmlXPathParserContextPtr, xmlNodePtr))xmlXPathNextChildElement;
      }
      uint64_t v87 = v27;
      uint64_t v81 = (int *(*)(unsigned int *, int *))xmlXPathNodeSetMergeAndClearNoDupls;
      uint64_t v23 = a3;
      goto LABEL_39;
    case 5:
      a4 = 0LL;
      uint64_t v81 = xmlXPathNodeSetMergeAndClear;
      uint64_t v23 = a3;
      uint64_t v24 = xmlXPathNextDescendant;
      goto LABEL_38;
    case 6:
      a4 = 0LL;
      uint64_t v81 = xmlXPathNodeSetMergeAndClear;
      uint64_t v23 = a3;
      uint64_t v24 = xmlXPathNextDescendantOrSelf;
      goto LABEL_38;
    case 7:
      a4 = 0LL;
      uint64_t v81 = xmlXPathNodeSetMergeAndClear;
      uint64_t v23 = a3;
      uint64_t v24 = xmlXPathNextFollowing;
      goto LABEL_38;
    case 8:
      a4 = 0LL;
      uint64_t v81 = xmlXPathNodeSetMergeAndClear;
      uint64_t v23 = a3;
      uint64_t v24 = xmlXPathNextFollowingSibling;
      goto LABEL_38;
    case 9:
      uint64_t v23 = 0LL;
      a4 = 0LL;
      uint64_t v81 = (int *(*)(unsigned int *, int *))xmlXPathNodeSetMergeAndClearNoDupls;
      uint64_t v24 = xmlXPathNextNamespace;
      goto LABEL_38;
    case 10:
      uint64_t v23 = 0LL;
      uint64_t v81 = xmlXPathNodeSetMergeAndClear;
      uint64_t v24 = xmlXPathNextParent;
      goto LABEL_38;
    case 11:
      uint64_t v23 = 0LL;
      uint64_t v81 = xmlXPathNodeSetMergeAndClear;
      uint64_t v24 = (xmlNodePtr (__cdecl *)(xmlXPathParserContextPtr, xmlNodePtr))xmlXPathNextPrecedingInternal;
      goto LABEL_38;
    case 12:
      uint64_t v23 = 0LL;
      uint64_t v81 = xmlXPathNodeSetMergeAndClear;
      uint64_t v24 = xmlXPathNextPrecedingSibling;
      goto LABEL_38;
    case 13:
      uint64_t v23 = 0LL;
      a4 = 0LL;
      uint64_t v81 = (int *(*)(unsigned int *, int *))xmlXPathNodeSetMergeAndClearNoDupls;
      uint64_t v24 = xmlXPathNextSelf;
LABEL_38:
      uint64_t v87 = v24;
LABEL_39:
      p_int nodeNr = &v20->nodesetval->nodeNr;
      if (!p_nodeNr || *p_nodeNr <= 0)
      {
        xmlXPathReleaseObject((uint64_t)context, v20);
        uint64_t v36 = xmlXPathCacheWrapNodeSet((uint64_t)context, 0LL);
        valuePush(v5, v36);
        return 0LL;
      }

      int v29 = *(_DWORD *)(a2 + 8);
      int v74 = a5;
      unsigned int v73 = v12;
      if (v29 == -1)
      {
        int v79 = 0;
        int v31 = 0LL;
        goto LABEL_56;
      }

      uint64_t v30 = *((void *)v5->comp + 1);
      int v31 = (_DWORD *)(v30 + 56LL * v29);
      if ((*v31 - 15) > 1
        || (int v32 = *(_DWORD *)(v30 + 56LL * v29 + 8), v32 == -1)
        || *(_DWORD *)(v30 + 56LL * v32) != 11
        || (uint64_t v33 = *(void *)(v30 + 56LL * v32 + 24)) == 0
        || *(_DWORD *)v33 != 3)
      {
        int v79 = 0;
LABEL_56:
        char v69 = 1;
LABEL_57:
        char v82 = 1;
        goto LABEL_58;
      }

      int v79 = 0;
      double v34 = *(double *)(v33 + 24);
      char v69 = 1;
      if (v34 <= -2147483650.0 || v34 >= 2147483650.0) {
        goto LABEL_57;
      }
      int v79 = (int)v34;
      int v35 = *(_DWORD *)(v30 + 56LL * v29 + 4);
      if (v35 != -1)
      {
        char v69 = 0;
        int v31 = (_DWORD *)(v30 + 56LL * v35);
        goto LABEL_57;
      }

      int v31 = 0LL;
      char v82 = 0;
      char v69 = 1;
LABEL_58:
      uint64_t v37 = 0LL;
      xmlNodeSetPtr cur = 0LL;
      xmlNodeSetPtr val = 0LL;
      uint64_t v18 = 0LL;
      if (a5) {
        BOOL v38 = v31 == 0LL;
      }
      else {
        BOOL v38 = 0;
      }
      char v39 = v38;
      char v76 = v39;
      xmlNodePtr node = context->node;
      int v40 = v85;
      uint64_t v71 = (uint64_t)v31;
      xmlNodeSetPtr nodesetval = v20->nodesetval;
      while (1)
      {
        if (v5->error) {
          goto LABEL_184;
        }
        context->xmlNodePtr node = *(xmlNodePtr *)(*((void *)p_nodeNr + 1) + 8 * v37);
        if (!cur)
        {
          uint64_t v41 = v37;
          xmlNodeSetPtr v42 = xmlXPathNodeSetCreate(0LL);
          uint64_t v37 = v41;
          xmlNodeSetPtr cur = v42;
          if (!v42)
          {
            uint64_t v18 = 0LL;
            goto LABEL_183;
          }
        }

        unsigned int v75 = 0;
        uint64_t v43 = 0LL;
        int v44 = 0;
        uint64_t v45 = v37 + 1;
LABEL_69:
        uint64_t v46 = v45;
        if (linkedOnOrAfterFall2022OSVersions()
          && v5->context[1].doc
          && (xmlXPathCheckOpLimit(v5, 1uLL) & 0x80000000) != 0)
        {
          goto LABEL_184;
        }

        uint64_t v47 = ((uint64_t (*)(xmlXPathParserContextPtr, uint64_t))v87)(v5, v43);
        if (v47)
        {
          uint64_t v43 = v47;
          if (!v23
            || (uint64_t v48 = *v23) == 0
            || v48 != v43 && ((_BYTE)v18 || (xmlXPathCmpNodesExt(v48, v43) & 0x80000000) != 0))
          {
            if (!a4) {
              break;
            }
            uint64_t v49 = *a4;
            if (!*a4 || v49 != v43 && ((_BYTE)v18 || (xmlXPathCmpNodesExt(v43, v49) & 0x80000000) != 0)) {
              break;
            }
          }
        }

        if (v5->error) {
          goto LABEL_184;
        }
        p_int nodeNr = &nodesetval->nodeNr;
        uint64_t v37 = v46;
        if (v71)
        {
          int nodeNr = cur->nodeNr;
          if (cur->nodeNr < 1) {
            goto LABEL_173;
          }
          if ((v69 & 1) != 0)
          {
            int v60 = 1;
          }

          else
          {
            int v60 = v79;
            int nodeNr = v79;
          }

          xmlXPathCompOpEvalPredicate(v5, v71, &cur->nodeNr, v60, nodeNr, v75);
          uint64_t v37 = v46;
          if (v5->error)
          {
LABEL_178:
            uint64_t v18 = 0LL;
            goto LABEL_184;
          }
        }

        if (cur->nodeNr >= 1)
        {
          if (val)
          {
            signed int v61 = v81((unsigned int *)val, &cur->nodeNr);
            uint64_t v37 = v46;
            xmlNodeSetPtr val = (xmlNodeSetPtr)v61;
          }

          else
          {
            xmlNodeSetPtr val = cur;
            xmlNodeSetPtr cur = 0LL;
          }

          goto LABEL_172;
        }

LABEL_173:
        if (v37 >= *p_nodeNr) {
          goto LABEL_184;
        }
      }

      uint64_t v18 = (v18 + 1);
      switch(v86)
      {
        case 0:
          xmlGenericErrorFunc v62 = *__xmlGenericError();
          uint64_t v63 = __xmlGenericErrorContext();
          v62(*v63, "Internal error at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpath.c", 12249);
          goto LABEL_178;
        case 1:
          unsigned int v50 = *(_DWORD *)(v43 + 8);
          if (v83)
          {
            if (v50 == v83)
            {
              if (v83 == 18) {
                goto LABEL_126;
              }
              goto LABEL_138;
            }

            if (v83 != 3) {
              goto LABEL_96;
            }
            uint64_t v45 = v46;
            if (v50 != 4) {
              goto LABEL_97;
            }
            goto LABEL_143;
          }

          if (v50 > 0x15) {
            goto LABEL_96;
          }
          if (((1 << v50) & 0x20239E) == 0)
          {
            uint64_t v45 = v46;
            if (v50 == 18)
            {
              if (v40 != 9)
              {
                if ((v82 & 1) != 0)
                {
                  if (xmlXPathNodeSetAddUnique(cur, (xmlNodePtr)v43) < 0) {
LABEL_128:
                  }
                    v5->error = 15;
LABEL_129:
                  if ((v76 & 1) != 0) {
                    goto LABEL_179;
                  }
                  uint64_t v45 = v46;
                }

                else if (++v44 == v79)
                {
LABEL_155:
                  if (xmlXPathNodeSetAddUnique(cur, (xmlNodePtr)v43) < 0) {
                    goto LABEL_156;
                  }
                  goto LABEL_157;
                }

                unsigned int v75 = 1;
                goto LABEL_97;
              }

int *xmlXPathNodeSetMergeAndClear(unsigned int *a1, int *a2)
{
  int v3 = (int *)a1;
  if (*a2 < 1)
  {
LABEL_23:
    *a2 = 0;
    return v3;
  }

  uint64_t v4 = 0LL;
  uint64_t v5 = *a1;
  while (1)
  {
    uint64_t v6 = *(void *)(*((void *)a2 + 1) + 8 * v4);
    if ((int)v5 >= 1)
    {
      uint64_t v7 = 0LL;
      do
      {
        uint64_t v8 = *(void *)(*((void *)v3 + 1) + v7);
        if (v8 == v6) {
          goto LABEL_20;
        }
        if (*(_DWORD *)(v8 + 8) == 18
          && *(_DWORD *)(v6 + 8) == 18
          && *(void *)v8 == *(void *)v6
          && xmlStrEqual(*(const xmlChar **)(v8 + 24), *(const xmlChar **)(v6 + 24)))
        {
          *(void *)(*((void *)a2 + 1) + 8 * vxmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0LL;
          xmlXPathNodeSetFreeNs((xmlNsPtr)v6);
          goto LABEL_20;
        }

        v7 += 8LL;
      }

      while (8 * v5 != v7);
    }

    uint64_t v9 = v3[1];
    if (!(_DWORD)v9)
    {
      uint64_t v10 = xmlMalloc(0x50uLL);
      *((void *)v3 + xmlSAX2InitDefaultSAXHandler(&hdlr, 1) = v10;
      if (!v10)
      {
LABEL_24:
        int v14 = "merging nodeset\n";
        goto LABEL_26;
      }

      v10[3] = 0u;
      v10[4] = 0u;
      v10[1] = 0u;
      void v10[2] = 0u;
      int v11 = 10;
      _OWORD *v10 = 0u;
      goto LABEL_18;
    }

int *xmlXPathNodeSetMergeAndClearNoDupls(int *a1, int *a2)
{
  int v3 = a1;
  if (*a2 < 1)
  {
LABEL_12:
    *a2 = 0;
    return v3;
  }

  uint64_t v4 = 0LL;
  int v5 = a1[1];
  while (1)
  {
    uint64_t v6 = *(void *)(*((void *)a2 + 1) + 8 * v4);
    if (!v5)
    {
      uint64_t v7 = xmlMalloc(0x50uLL);
      *((void *)v3 + xmlSAX2InitDefaultSAXHandler(&hdlr, 1) = v7;
      if (!v7)
      {
LABEL_13:
        uint64_t v10 = "merging nodeset\n";
        goto LABEL_15;
      }

      v7[3] = 0u;
      v7[4] = 0u;
      v7[1] = 0u;
      v7[2] = 0u;
      int v5 = 10;
      *uint64_t v7 = 0u;
      goto LABEL_10;
    }

    if (*v3 >= v5) {
      break;
    }
LABEL_11:
    uint64_t v8 = *((void *)v3 + 1);
    uint64_t v9 = *v3;
    *int v3 = v9 + 1;
    *(void *)(v8 + 8 * v9) = v6;
    if (++v4 >= *a2) {
      goto LABEL_12;
    }
  }

  if (v5 < 10000000)
  {
    uint64_t v7 = xmlRealloc(*((void **)v3 + 1), 16LL * v5);
    if (!v7) {
      goto LABEL_13;
    }
    *((void *)v3 + xmlSAX2InitDefaultSAXHandler(&hdlr, 1) = v7;
    int v5 = 2 * v3[1];
LABEL_10:
    v3[1] = v5;
    goto LABEL_11;
  }

  uint64_t v10 = "merging nodeset hit limit\n";
  uint64_t v7 = 0LL;
LABEL_15:
  xmlXPathErrMemory((uint64_t)v7, v10);
  return 0LL;
}

xmlNodePtr xmlXPathNextChildElement(xmlNodePtr result, uint64_t a2)
{
  if (!result) {
    return result;
  }
  childreuint64_t n = result->children;
  if (!children) {
    return 0LL;
  }
  if (!a2)
  {
    uint64_t v6 = *(void *)&children->type;
    if (v6)
    {
      uint64_t result = 0LL;
      unsigned int v7 = *(_DWORD *)(v6 + 8);
      if (v7 <= 0x15)
      {
        int v8 = 1 << v7;
        if ((v8 & 0x862) != 0)
        {
          for (uint64_t result = *(xmlNodePtr *)(v6 + 24); result; uint64_t result = result->next)
          {
            if (result->type == XML_ELEMENT_NODE) {
              break;
            }
          }
        }

        else if ((v8 & 0x202200) != 0)
        {
          return xmlDocGetRootElement((const xmlDoc *)v6);
        }
      }

      return result;
    }

    return 0LL;
  }

  int v3 = *(_DWORD *)(a2 + 8);
  for (uint64_t result = *(xmlNodePtr *)(a2 + 48); result; uint64_t result = result->next)
  {
    if (result->type == XML_ELEMENT_NODE) {
      break;
    }
  }

  return result;
}

uint64_t xmlXPathNextPrecedingInternal(uint64_t a1, uint64_t *a2)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v2 = *(void **)(a1 + 24);
  if (!v2) {
    return 0LL;
  }
  if (!a2)
  {
    a2 = (uint64_t *)v2[1];
    if (!a2) {
      return 0LL;
    }
    int v3 = *((_DWORD *)a2 + 2);
    if (v3 == 18)
    {
      a2 = (uint64_t *)*a2;
      if (!a2 || *((_DWORD *)a2 + 2) == 18) {
        return 0LL;
      }
    }

    else if (v3 == 2)
    {
      a2 = (uint64_t *)a2[5];
    }

    *(void *)(a1 + 72) = a2[5];
  }

  if (*((_DWORD *)a2 + 2) == 18) {
    return 0LL;
  }
  uint64_t v6 = a2[7];
  if (!v6) {
    goto LABEL_18;
  }
  if (*(_DWORD *)(v6 + 8) == 14) {
    a2 = (uint64_t *)a2[7];
  }
  uint64_t v7 = a2[7];
  if (v7)
  {
    do
    {
LABEL_23:
      uint64_t v4 = v7;
      uint64_t v7 = *(void *)(v7 + 32);
    }

    while (v7);
  }

  else
  {
LABEL_18:
    uint64_t v4 = a2[5];
    while (v4)
    {
      if (v4 == *(void *)(*v2 + 24LL)) {
        return 0LL;
      }
      if (v4 != *(void *)(a1 + 72)) {
        break;
      }
      uint64_t v7 = *(void *)(v4 + 56);
      uint64_t v4 = *(void *)(v4 + 40);
      *(void *)(a1 + 72) = v4;
      if (v7) {
        goto LABEL_23;
      }
    }
  }

  return v4;
}

void xmlXPathCompOpEvalPredicate(xmlXPathParserContext *a1, uint64_t a2, int *a3, int a4, int a5, uint64_t a6)
{
  int v12 = *(_DWORD *)(a2 + 4);
  if (v12 == -1) {
    goto LABEL_12;
  }
  xmlXPathCompExprPtr comp = a1->comp;
  if (*(_DWORD *)(*((void *)comp + 1) + 56LL * v12) != 15)
  {
    xmlGenericErrorFunc v18 = *__xmlGenericError();
    uint64_t v19 = __xmlGenericErrorContext();
    v18(*v19, "xmlXPathCompOpEvalPredicate: Expected a predicate\n");
    int v16 = a1;
    int v17 = 10;
    goto LABEL_7;
  }

  if (linkedOnOrAfterFall2022OSVersions())
  {
    xmlXPathContextPtr context = a1->context;
    int nb_variables_unused = context[1].nb_variables_unused;
    if (nb_variables_unused >= 5000)
    {
      int v16 = a1;
      int v17 = 26;
LABEL_7:
      xmlXPathErr(v16, v17);
      return;
    }

    context[1].int nb_variables_unused = nb_variables_unused + 1;
  }

  xmlXPathCompOpEvalPredicate(a1, *((void *)comp + 1) + 56LL * *(int *)(a2 + 4), a3, 1LL, *a3, a6);
  if (!a1->error)
  {
LABEL_12:
    int v20 = *(_DWORD *)(a2 + 8);
    if (v20 != -1) {
      xmlXPathNodeSetFilter(a1, a3, v20, a4, a5, a6);
    }
  }

void xmlXPathNodeSetFilter(xmlXPathParserContext *a1, int *a2, int a3, int a4, int a5, int a6)
{
  int v6 = *a2;
  if (*a2)
  {
    if (v6 < a4)
    {
      xmlXPathNodeSetClearFromPos(a2, 0, a6);
      return;
    }

    xmlXPathContextPtr context = a1->context;
    __int128 v29 = *(_OWORD *)&context->doc;
    uint64_t v10 = *(void *)&context->contextSize;
    uint64_t v11 = *((void *)a1->comp + 1);
    context->int contextSize = v6;
    if (v6 >= 1)
    {
      uint64_t v13 = 0LL;
      int v14 = 0;
      uint64_t v31 = v11 + 56LL * a3;
      int v15 = 1;
      while (1)
      {
        uint64_t v16 = *(void *)(*((void *)a2 + 1) + 8 * v13);
        context->xmlNodePtr node = (xmlNodePtr)v16;
        uint64_t v17 = v13 + 1;
        context->proximityPositiouint64_t n = v13 + 1;
        if (*(_DWORD *)(v16 + 8) != 18)
        {
          xmlGenericErrorFunc v18 = *(xmlDoc **)(v16 + 64);
          if (v18) {
            context->doc = v18;
          }
        }

        int v19 = xmlXPathCompOpEvalToBoolean(a1, v31, 1LL);
        if (a1->error)
        {
LABEL_28:
          if (a6) {
            goto LABEL_29;
          }
          goto LABEL_35;
        }

        int v20 = v19;
        if (v19 < 0)
        {
          xmlXPathErr(a1, 7);
          goto LABEL_28;
        }

        if (v19 && v15 >= a4 && v15 <= a5)
        {
          if (v13 != v14)
          {
            *(void *)(*((void *)a2 + 1) + 8LL * v1xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = v16;
            *(void *)(*((void *)a2 + 1) + 8 * v1xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0LL;
          }

          ++v14;
        }

        else
        {
          *(void *)(*((void *)a2 + 1) + 8 * v1xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0LL;
          if (*(_DWORD *)(v16 + 8) == 18) {
            xmlXPathNodeSetFreeNs((xmlNsPtr)v16);
          }
          if (!v20) {
            goto LABEL_22;
          }
        }

        if (v15 == a5)
        {
          LODWORD(v1xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = v13 + 1;
          goto LABEL_28;
        }

        ++v15;
LABEL_22:
        ++v13;
        if (v17 >= *a2)
        {
          LODWORD(v1xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = v17;
          goto LABEL_28;
        }
      }
    }

    LODWORD(v1xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0;
    int v14 = 0;
    if (a6)
    {
LABEL_29:
      int v21 = *a2;
      if ((int)v13 < *a2)
      {
        uint64_t v13 = v13;
        do
        {
          uint64_t v22 = *(void *)(*((void *)a2 + 1) + 8 * v13);
          if (v22 && *(_DWORD *)(v22 + 8) == 18)
          {
            xmlXPathNodeSetFreeNs((xmlNsPtr)v22);
            int v21 = *a2;
          }

          ++v13;
        }

        while (v13 < v21);
      }
    }

void xmlXPathNodeSetClearFromPos(int *a1, int a2, int a3)
{
  int v3 = *a1;
  if (*a1 > a2)
  {
    if (a3)
    {
      uint64_t v6 = a2;
      do
      {
        uint64_t v7 = *(void *)(*((void *)a1 + 1) + 8 * v6);
        if (v7)
        {
          if (*(_DWORD *)(v7 + 8) == 18)
          {
            xmlXPathNodeSetFreeNs((xmlNsPtr)v7);
            int v3 = *a1;
          }
        }

        ++v6;
      }

      while (v6 < v3);
    }

    *a1 = a2;
  }

uint64_t xmlXPathCompOpEvalFirst(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  if (*(_DWORD *)(a1 + 16)) {
    return 0LL;
  }
  if (linkedOnOrAfterFall2022OSVersions())
  {
    uint64_t v8 = *(void *)(a1 + 24);
    if (*(void *)(v8 + 352))
    {
      if ((xmlXPathCheckOpLimit((xmlXPathParserContext *)a1, 1uLL) & 0x80000000) != 0) {
        return 0LL;
      }
      uint64_t v8 = *(void *)(a1 + 24);
    }

    int v9 = *(_DWORD *)(v8 + 368);
    if (v9 >= 5000)
    {
      uint64_t v10 = (xmlXPathParserContext *)a1;
      int v11 = 26;
LABEL_10:
      xmlXPathErr(v10, v11);
      return 0LL;
    }

    *(_DWORD *)(v8 + 368) = v9 + 1;
  }

  uint64_t v3 = *a2;
  uint64_t v12 = *(void *)(a1 + 56);
  switch((int)v3)
  {
    case 0:
      goto LABEL_92;
    case 7:
      uint64_t v13 = xmlXPathCompOpEvalFirst(a1, *(void *)(v12 + 8) + 56LL * (int)a2[1], a3);
      if (*(_DWORD *)(a1 + 16)) {
        return 0LL;
      }
      uint64_t v3 = v13;
      uint64_t v14 = *(void *)(a1 + 32);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1)
        {
          int v15 = *(unsigned int **)(v14 + 8);
          if (v15)
          {
            unint64_t v16 = *v15;
            if ((int)v16 >= 1)
            {
              if ((_DWORD)v16 != 1)
              {
                libxml_domnode_tim_sort(*((void *)v15 + 1), v16);
                int v15 = *(unsigned int **)(*(void *)(a1 + 32) + 8LL);
              }

              *a3 = **((void **)v15 + 1);
            }
          }
        }
      }

      int v17 = xmlXPathCompOpEvalFirst(a1, *(void *)(v12 + 8) + 56LL * (int)a2[2], a3);
      if (*(_DWORD *)(a1 + 16)) {
        return 0LL;
      }
      int v18 = *(_DWORD *)(a1 + 40);
      unsigned int v19 = v18 - 1;
      if (v18 < 1)
      {
        uint64_t v22 = 0LL;
        int v21 = 0LL;
        goto LABEL_77;
      }

      *(_DWORD *)(a1 + 4xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v19;
      uint64_t v20 = *(void *)(a1 + 48);
      if (v18 == 1)
      {
        int v21 = 0LL;
        *(void *)(a1 + 32) = 0LL;
        uint64_t v22 = *(xmlXPathObject **)(v20 + 8LL * v19);
        *(void *)(v20 + 8LL * v19) = 0LL;
LABEL_77:
        xmlXPathReleaseObject(*(void *)(a1 + 24), v21);
        xmlXPathReleaseObject(*(void *)(a1 + 24), v22);
        uint64_t v10 = (xmlXPathParserContext *)a1;
        int v11 = 11;
        goto LABEL_10;
      }

      int v39 = v17;
      uint64_t v40 = 0LL;
      uint64_t v41 = (v18 - 2);
      *(void *)(a1 + 32) = *(void *)(v20 + 8LL * v41);
      uint64_t v22 = *(xmlXPathObject **)(v20 + 8LL * v19);
      *(void *)(v20 + 8LL * v19) = 0LL;
      *(_DWORD *)(a1 + 4xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v41;
      uint64_t v42 = *(void *)(a1 + 48);
      if (v18 != 2) {
        uint64_t v40 = *(void *)(v42 + 8LL * (v18 - 3));
      }
      *(void *)(a1 + 32) = v40;
      int v21 = *(xmlXPathObject **)(v42 + 8 * v41);
      *(void *)(v42 + 8 * v4xmlSAX2InitDefaultSAXHandler(&hdlr, 1) = 0LL;
      if (!v21) {
        goto LABEL_77;
      }
      BOOL v43 = v21->type != XPATH_NODESET || v22 == 0LL;
      if (v43 || v22->type != XPATH_NODESET) {
        goto LABEL_77;
      }
      if (linkedOnOrAfterFall2022OSVersions()
        && *(void *)(*(void *)(a1 + 24) + 352LL)
        && ((p_int nodeNr = &v21->nodesetval->nodeNr) != 0LL
         && (xmlXPathCheckOpLimit((xmlXPathParserContext *)a1, *p_nodeNr) & 0x80000000) != 0
         || (uint64_t v45 = &v22->nodesetval->nodeNr) != 0LL
         && (xmlXPathCheckOpLimit((xmlXPathParserContext *)a1, *v45) & 0x80000000) != 0))
      {
        xmlXPathReleaseObject(*(void *)(a1 + 24), v21);
        xmlXPathReleaseObject(*(void *)(a1 + 24), v22);
      }

      else
      {
        v21->xmlNodeSetPtr nodesetval = xmlXPathNodeSetMerge(v21->nodesetval, v22->nodesetval);
        valuePush((xmlXPathParserContextPtr)a1, v21);
        xmlXPathReleaseObject(*(void *)(a1 + 24), v22);
        uint64_t v3 = (v39 + v3);
      }

      goto LABEL_92;
    case 8:
      xmlXPathRoot((xmlXPathParserContextPtr)a1);
      goto LABEL_91;
    case 9:
      signed int v23 = a2[1];
      if (v23 == -1) {
        uint64_t v3 = 0LL;
      }
      else {
        uint64_t v3 = xmlXPathCompOpEval(a1, *(void *)(v12 + 8) + 56LL * v23);
      }
      if (*(_DWORD *)(a1 + 16)) {
        return 0LL;
      }
      signed int v32 = a2[2];
      if (v32 == -1) {
        goto LABEL_50;
      }
      int v33 = xmlXPathCompOpEval(a1, *(void *)(v12 + 8) + 56LL * v32);
      if (*(_DWORD *)(a1 + 16)) {
        return 0LL;
      }
      uint64_t v3 = (v33 + v3);
LABEL_50:
      double v34 = xmlXPathCacheNewNodeSet(*(void *)(a1 + 24), *(xmlNodePtr *)(*(void *)(a1 + 24) + 8LL));
      int v35 = (xmlXPathParserContext *)a1;
      goto LABEL_51;
    case 10:
      signed int v24 = a2[1];
      if (v24 == -1) {
        goto LABEL_91;
      }
      int v25 = xmlXPathCompOpEval(a1, *(void *)(v12 + 8) + 56LL * v24);
      if (*(_DWORD *)(a1 + 16)) {
        return 0LL;
      }
      uint64_t v3 = xmlXPathNodeCollectAndTest((xmlXPathParserContextPtr)a1, (uint64_t)a2, a3, 0LL, 0) + v25;
      goto LABEL_92;
    case 11:
      BOOL v26 = xmlXPathCacheObjectCopy(*(void *)(a1 + 24), *((xmlXPathObjectPtr *)a2 + 3));
      valuePush((xmlXPathParserContextPtr)a1, v26);
      goto LABEL_91;
    case 16:
      if (*(_DWORD *)(a1 + 16)) {
        goto LABEL_91;
      }
      signed int v27 = a2[1];
      if (v27 == -1) {
        goto LABEL_89;
      }
      signed int v28 = a2[2];
      if (v28 == -1) {
        goto LABEL_42;
      }
      uint64_t v29 = *(void *)(v12 + 8);
      if (*(_DWORD *)(v29 + 56LL * v27) != 17) {
        goto LABEL_42;
      }
      if (*(_DWORD *)(v29 + 56LL * v28) != 17) {
        goto LABEL_42;
      }
      int v30 = *(_DWORD *)(v29 + 56LL * v28 + 4);
      if (v30 == -1) {
        goto LABEL_42;
      }
      if (*(_DWORD *)(v29 + 56LL * v30) != 13) {
        goto LABEL_42;
      }
      if (*(void *)(v29 + 56LL * v30 + 32)) {
        goto LABEL_42;
      }
      if (*(_DWORD *)(v29 + 56LL * v30 + 12)) {
        goto LABEL_42;
      }
      uint64_t v46 = *(const xmlChar **)(v29 + 56LL * v30 + 24);
      if (!v46) {
        goto LABEL_42;
      }
      int v47 = xmlStrEqual(v46, (const xmlChar *)"last");
      signed int v48 = a2[1];
      if (v47)
      {
        uint64_t v62 = 0LL;
        uint64_t v49 = xmlXPathCompOpEvalLast(a1, (unsigned int *)(*(void *)(v12 + 8) + 56LL * v48), &v62);
        if (!*(_DWORD *)(a1 + 16))
        {
          uint64_t v3 = v49;
          uint64_t v50 = *(void *)(a1 + 32);
          if (v50)
          {
            if (*(_DWORD *)v50 == 1)
            {
              uint64_t v51 = *(void *)(v50 + 8);
              if (v51)
              {
                if (*(void *)(v51 + 8) && *(int *)v51 >= 2)
                {
                  xmlXPathNodeSetKeepLast(v51);
                  uint64_t v52 = **(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 8LL);
LABEL_101:
                  *a3 = v52;
                  goto LABEL_92;
                }
              }
            }
          }

          goto LABEL_92;
        }

uint64_t xmlXPathCompOpEvalLast(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  if (*(_DWORD *)(a1 + 16)) {
    return 0LL;
  }
  if (linkedOnOrAfterFall2022OSVersions())
  {
    uint64_t v8 = *(void *)(a1 + 24);
    if (*(void *)(v8 + 352))
    {
      if ((xmlXPathCheckOpLimit((xmlXPathParserContext *)a1, 1uLL) & 0x80000000) != 0) {
        return 0LL;
      }
      uint64_t v8 = *(void *)(a1 + 24);
    }

    int v9 = *(_DWORD *)(v8 + 368);
    if (v9 >= 5000)
    {
      uint64_t v10 = (xmlXPathParserContext *)a1;
      int v11 = 26;
LABEL_10:
      xmlXPathErr(v10, v11);
      return 0LL;
    }

    *(_DWORD *)(v8 + 368) = v9 + 1;
  }

  uint64_t v3 = *a2;
  uint64_t v12 = *(void *)(a1 + 56);
  switch((int)v3)
  {
    case 7:
      uint64_t v13 = xmlXPathCompOpEvalLast(a1, *(void *)(v12 + 8) + 56LL * (int)a2[1], a3);
      if (*(_DWORD *)(a1 + 16)) {
        return 0LL;
      }
      uint64_t v3 = v13;
      uint64_t v14 = *(void *)(a1 + 32);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1)
        {
          int v15 = *(unsigned int **)(v14 + 8);
          if (v15)
          {
            unint64_t v16 = *v15;
            if ((int)v16 >= 1)
            {
              if ((_DWORD)v16 == 1)
              {
                uint64_t v17 = 0LL;
              }

              else
              {
                libxml_domnode_tim_sort(*((void *)v15 + 1), v16);
                int v15 = *(unsigned int **)(*(void *)(a1 + 32) + 8LL);
                uint64_t v17 = (int)*v15 - 1LL;
              }

              *a3 = *(void *)(*((void *)v15 + 1) + 8 * v17);
            }
          }
        }
      }

      int v29 = xmlXPathCompOpEvalLast(a1, *(void *)(v12 + 8) + 56LL * (int)a2[2], a3);
      if (*(_DWORD *)(a1 + 16)) {
        return 0LL;
      }
      int v30 = *(_DWORD *)(a1 + 40);
      unsigned int v31 = v30 - 1;
      if (v30 < 1)
      {
        double v34 = 0LL;
        int v33 = 0LL;
        goto LABEL_71;
      }

      *(_DWORD *)(a1 + 4xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v31;
      uint64_t v32 = *(void *)(a1 + 48);
      if (v30 == 1)
      {
        int v33 = 0LL;
        *(void *)(a1 + 32) = 0LL;
        double v34 = *(xmlXPathObject **)(v32 + 8LL * v31);
        *(void *)(v32 + 8LL * v3xmlSAX2InitDefaultSAXHandler(&hdlr, 1) = 0LL;
LABEL_71:
        xmlXPathReleaseObject(*(void *)(a1 + 24), v33);
        xmlXPathReleaseObject(*(void *)(a1 + 24), v34);
        uint64_t v10 = (xmlXPathParserContext *)a1;
        int v11 = 11;
        goto LABEL_10;
      }

      int v35 = v29;
      uint64_t v36 = 0LL;
      uint64_t v37 = (v30 - 2);
      *(void *)(a1 + 32) = *(void *)(v32 + 8LL * v37);
      double v34 = *(xmlXPathObject **)(v32 + 8LL * v31);
      *(void *)(v32 + 8LL * v3xmlSAX2InitDefaultSAXHandler(&hdlr, 1) = 0LL;
      *(_DWORD *)(a1 + 4xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = v37;
      uint64_t v38 = *(void *)(a1 + 48);
      if (v30 != 2) {
        uint64_t v36 = *(void *)(v38 + 8LL * (v30 - 3));
      }
      *(void *)(a1 + 32) = v36;
      int v33 = *(xmlXPathObject **)(v38 + 8 * v37);
      *(void *)(v38 + 8 * v37) = 0LL;
      if (!v33) {
        goto LABEL_71;
      }
      BOOL v39 = v33->type != XPATH_NODESET || v34 == 0LL;
      if (v39 || v34->type != XPATH_NODESET) {
        goto LABEL_71;
      }
      if (linkedOnOrAfterFall2022OSVersions()
        && *(void *)(*(void *)(a1 + 24) + 352LL)
        && ((p_int nodeNr = &v33->nodesetval->nodeNr) != 0LL
         && (xmlXPathCheckOpLimit((xmlXPathParserContext *)a1, *p_nodeNr) & 0x80000000) != 0
         || (uint64_t v41 = &v34->nodesetval->nodeNr) != 0LL
         && (xmlXPathCheckOpLimit((xmlXPathParserContext *)a1, *v41) & 0x80000000) != 0))
      {
        xmlXPathReleaseObject(*(void *)(a1 + 24), v33);
        xmlXPathReleaseObject(*(void *)(a1 + 24), v34);
      }

      else
      {
        v33->xmlNodeSetPtr nodesetval = xmlXPathNodeSetMerge(v33->nodesetval, v34->nodesetval);
        valuePush((xmlXPathParserContextPtr)a1, v33);
        xmlXPathReleaseObject(*(void *)(a1 + 24), v34);
        uint64_t v3 = (v35 + v3);
      }

void xmlXPathNodeSetKeepLast(uint64_t a1)
{
  int v1 = *(_DWORD *)a1;
  if (*(int *)a1 >= 2)
  {
    uint64_t v3 = 0LL;
    do
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8 * v3);
      if (v4)
      {
        if (*(_DWORD *)(v4 + 8) == 18)
        {
          xmlXPathNodeSetFreeNs((xmlNsPtr)v4);
          int v1 = *(_DWORD *)a1;
        }
      }

      ++v3;
    }

    while (v3 < v1 - 1);
    **(void **)(a1 + 8) = *(void *)(*(void *)(a1 + 8) + 8LL * (v1 - 1));
    *(_DWORD *)a1 = 1;
  }

void xmlXPathLocationSetFilter(xmlXPathParserContext *a1, int *a2, int a3, int a4)
{
  if (a2)
  {
    int v5 = *a2;
    if (*a2)
    {
      xmlXPathContextPtr context = a1->context;
      __int128 v26 = *(_OWORD *)&context->doc;
      uint64_t v8 = *(void *)&context->contextSize;
      uint64_t v9 = *((void *)a1->comp + 1);
      context->int contextSize = v5;
      if (v5 >= 1)
      {
        uint64_t v11 = 0LL;
        int v12 = 0;
        uint64_t v13 = v9 + 56LL * a3;
        int v14 = 1;
        while (1)
        {
          uint64_t v15 = *(void *)(*(void *)(*((void *)a2 + 1) + 8 * v11) + 40LL);
          context->xmlNodePtr node = (xmlNodePtr)v15;
          uint64_t v16 = v11 + 1;
          context->proximityPositiouint64_t n = v11 + 1;
          if (*(_DWORD *)(v15 + 8) != 18)
          {
            uint64_t v17 = *(xmlDoc **)(v15 + 64);
            if (v17) {
              context->doc = v17;
            }
          }

          int v18 = xmlXPathCompOpEvalToBoolean(a1, v13, 1LL);
          if (a1->error) {
            goto LABEL_24;
          }
          int v19 = v18;
          if (v18 < 0)
          {
            xmlXPathErr(a1, 7);
            goto LABEL_24;
          }

          if (v18 && v14 >= 1 && v14 <= a4)
          {
            if (v11 != v12)
            {
              *(void *)(*((void *)a2 + 1) + 8LL * v12) = *(void *)(*((void *)a2 + 1) + 8 * v11);
              *(void *)(*((void *)a2 + 1) + 8 * v1xmlSAX2InitDefaultSAXHandler(&hdlr, 1) = 0LL;
            }

            ++v12;
          }

          else
          {
            xmlXPathFreeObject(*(xmlXPathObjectPtr *)(*((void *)a2 + 1) + 8 * v11));
            *(void *)(*((void *)a2 + 1) + 8 * v1xmlSAX2InitDefaultSAXHandler(&hdlr, 1) = 0LL;
            if (!v19) {
              goto LABEL_19;
            }
          }

          if (v14 == a4)
          {
            LODWORD(v1xmlSAX2InitDefaultSAXHandler(&hdlr, 1) = v11 + 1;
            goto LABEL_24;
          }

          ++v14;
LABEL_19:
          ++v11;
          if (v16 >= *a2)
          {
            LODWORD(v1xmlSAX2InitDefaultSAXHandler(&hdlr, 1) = v16;
            goto LABEL_24;
          }
        }
      }

      LODWORD(v1xmlSAX2InitDefaultSAXHandler(&hdlr, 1) = 0;
      int v12 = 0;
LABEL_24:
      if ((int)v11 < *a2)
      {
        uint64_t v20 = v11;
        do
          xmlXPathFreeObject(*(xmlXPathObjectPtr *)(*((void *)a2 + 1) + 8 * v20++));
        while (v20 < *a2);
      }

      *a2 = v12;
      int v21 = a2[1];
      if (v21 >= 11 && v12 < (int)(v21 >> 1))
      {
        if (v12 <= 10) {
          unsigned int v23 = 10;
        }
        else {
          unsigned int v23 = v12;
        }
        int v24 = xmlRealloc(*((void **)a2 + 1), 8LL * v23);
        if (v24)
        {
          *((void *)a2 + xmlSAX2InitDefaultSAXHandler(&hdlr, 1) = v24;
          a2[1] = v23;
        }

        else
        {
          if (a1)
          {
            a1->error = 15;
            uint64_t v25 = (uint64_t)a1->context;
          }

          else
          {
            uint64_t v25 = 0LL;
          }

          xmlXPathErrMemory(v25, "shrinking locset\n");
        }
      }

      *(_OWORD *)&context->doc = v26;
      *(void *)&context->int contextSize = v8;
    }
  }

xmlXPathObjectPtr xmlXPtrNewRange(xmlNodePtr start, int startindex, xmlNodePtr end, int endindex)
{
  char v8 = linkedOnOrAfterFall2022OSVersions();
  uint64_t v9 = 0LL;
  if (((endindex | startindex) & 0x80000000) == 0 && end && start && (v8 & 1) == 0)
  {
    uint64_t v9 = (xmlNode *)xmlXPtrNewRangeInternal((uint64_t)start, startindex, (uint64_t)end, endindex);
    xmlXPtrRangeCheckOrder(v9);
  }

  return (xmlXPathObjectPtr)v9;
}

_OWORD *xmlXPtrNewRangeInternal(uint64_t a1, int a2, uint64_t a3, int a4)
{
  if ((!a1 || *(_DWORD *)(a1 + 8) != 18) && (!a3 || *(_DWORD *)(a3 + 8) != 18))
  {
    uint64_t result = xmlMalloc(0x48uLL);
    if (result)
    {
      result[2] = 0u;
      result[3] = 0u;
      *uint64_t result = 0u;
      result[1] = 0u;
      *(_DWORD *)uint64_t result = 6;
      *((void *)result + 5) = a1;
      *((_DWORD *)result + 12) = a2;
      *((void *)result + 7) = a3;
      *((void *)result + 8) = 0LL;
      *((_DWORD *)result + 16) = a4;
      return result;
    }

    xmlXPtrErrMemory((const xmlChar *)"allocating range");
  }

  return 0LL;
}

xmlNode *xmlXPtrRangeCheckOrder(xmlNode *result)
{
  if (result)
  {
    int v1 = result;
    if (LODWORD(result->_private) == 6)
    {
      prev = result->prev;
      if (prev)
      {
        uint64_t result = result->parent;
        if (result)
        {
          if (result == prev)
          {
            if (SLODWORD(v1->next) <= SLODWORD(v1->doc)) {
              return result;
            }
          }

          else
          {
            uint64_t result = (xmlNode *)xmlXPathCmpNodes(result, prev);
            if ((_DWORD)result != -1) {
              return result;
            }
          }

          uint64_t parent = v1->parent;
          v1->uint64_t parent = v1->prev;
          v1->prev = parent;
          LODWORD(parent) = v1->next;
          LODWORD(v1->next) = v1->doc;
          LODWORD(v1->doc) = (_DWORD)parent;
        }
      }
    }
  }

  return result;
}

xmlXPathObjectPtr xmlXPtrNewRangePoints(xmlXPathObjectPtr start, xmlXPathObjectPtr end)
{
  char v4 = linkedOnOrAfterFall2022OSVersions();
  int v5 = 0LL;
  if (end && start && (v4 & 1) == 0)
  {
    if (start->type == XPATH_POINT && end->type == XPATH_POINT)
    {
      int v5 = (xmlNode *)xmlXPtrNewRangeInternal((uint64_t)start->user, start->index, (uint64_t)end->user, end->index);
      xmlXPtrRangeCheckOrder(v5);
    }

    else
    {
      return 0LL;
    }
  }

  return (xmlXPathObjectPtr)v5;
}

xmlXPathObjectPtr xmlXPtrNewRangePointNode(xmlXPathObjectPtr start, xmlNodePtr end)
{
  char v4 = linkedOnOrAfterFall2022OSVersions();
  int v5 = 0LL;
  if (end && start && (v4 & 1) == 0)
  {
    if (start->type == XPATH_POINT)
    {
      int v5 = (xmlNode *)xmlXPtrNewRangeInternal((uint64_t)start->user, start->index, (uint64_t)end, -1);
      xmlXPtrRangeCheckOrder(v5);
    }

    else
    {
      return 0LL;
    }
  }

  return (xmlXPathObjectPtr)v5;
}

xmlXPathObjectPtr xmlXPtrNewRangeNodePoint(xmlNodePtr start, xmlXPathObjectPtr end)
{
  char v4 = linkedOnOrAfterFall2022OSVersions();
  int v5 = 0LL;
  if (end && start && (v4 & 1) == 0)
  {
    if (end->type == XPATH_POINT)
    {
      int v5 = (xmlNode *)xmlXPtrNewRangeInternal((uint64_t)start, -1, (uint64_t)end->user, end->index);
      xmlXPtrRangeCheckOrder(v5);
    }

    else
    {
      return 0LL;
    }
  }

  return (xmlXPathObjectPtr)v5;
}

xmlXPathObjectPtr xmlXPtrNewRangeNodes(xmlNodePtr start, xmlNodePtr end)
{
  char v4 = linkedOnOrAfterFall2022OSVersions();
  int v5 = 0LL;
  if (end && start && (v4 & 1) == 0)
  {
    int v5 = (xmlNode *)xmlXPtrNewRangeInternal((uint64_t)start, -1, (uint64_t)end, -1);
    xmlXPtrRangeCheckOrder(v5);
  }

  return (xmlXPathObjectPtr)v5;
}

xmlXPathObjectPtr xmlXPtrNewCollapsedRange(xmlNodePtr start)
{
  char v2 = linkedOnOrAfterFall2022OSVersions();
  if (!start || (v2 & 1) != 0) {
    return 0LL;
  }
  else {
    return (xmlXPathObjectPtr)xmlXPtrNewRangeInternal((uint64_t)start, -1, 0LL, -1);
  }
}

xmlXPathObjectPtr xmlXPtrNewRangeNodeObject(xmlNodePtr start, xmlXPathObjectPtr end)
{
  char v4 = linkedOnOrAfterFall2022OSVersions();
  int v5 = 0LL;
  if (end && start && (v4 & 1) == 0)
  {
    xmlXPathObjectType type = end->type;
    if (end->type == XPATH_NODESET)
    {
      xmlNodeSetPtr nodesetval = end->nodesetval;
      if (nodesetval && nodesetval->nodeNr >= 1)
      {
        p_user2 = (uint64_t *)&nodesetval->nodeTab[nodesetval->nodeNr - 1];
        int index2 = -1;
        goto LABEL_13;
      }
    }

    else
    {
      if (type == XPATH_RANGE)
      {
        p_user2 = (uint64_t *)&end->user2;
        int index2 = end->index2;
        goto LABEL_13;
      }

      if (type == XPATH_POINT)
      {
        p_user2 = (uint64_t *)&end->user;
        int index2 = end->index;
LABEL_13:
        int v5 = (xmlNode *)xmlXPtrNewRangeInternal((uint64_t)start, -1, *p_user2, index2);
        xmlXPtrRangeCheckOrder(v5);
        return (xmlXPathObjectPtr)v5;
      }
    }

    return 0LL;
  }

  return (xmlXPathObjectPtr)v5;
}

xmlLocationSetPtr xmlXPtrLocationSetCreate(xmlXPathObjectPtr val)
{
  if ((linkedOnOrAfterFall2022OSVersions() & 1) != 0) {
    return 0LL;
  }
  uint64_t v3 = (xmlLocationSet *)xmlMalloc(0x10uLL);
  char v2 = v3;
  if (!v3)
  {
    xmlXPtrErrMemory((const xmlChar *)"allocating locationset");
    return v2;
  }

  *(void *)&v3->uint64_t locNr = 0LL;
  v3->locTab = 0LL;
  if (val)
  {
    char v4 = (xmlXPathObjectPtr *)xmlMalloc(0x50uLL);
    v2->locTab = v4;
    if (v4)
    {
      *((_OWORD *)v4 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
      *((_OWORD *)v4 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0u;
      *((_OWORD *)v4 + xmlSAX2InitDefaultSAXHandler(&hdlr, 1) = 0u;
      *((_OWORD *)v4 + 2) = 0u;
      *(_OWORD *)char v4 = 0u;
      locTab = v2->locTab;
      uint64_t locNr = v2->locNr;
      v2->uint64_t locNr = locNr + 1;
      v2->locMax = 10;
      locTab[locNr] = val;
      return v2;
    }

    xmlXPtrErrMemory((const xmlChar *)"allocating locationset");
    xmlFree(v2);
    return 0LL;
  }

  return v2;
}

_DWORD *xmlXPtrErrMemory(const xmlChar *a1)
{
  return __xmlRaiseError( 0LL,  0LL,  0LL,  0LL,  0LL,  0xDu,  2,  2,  0LL,  0,  a1,  0LL,  0LL,  0,  0,  "Memory allocation failed : %s\n",  (char)a1);
}

void xmlXPtrLocationSetAdd(xmlLocationSetPtr cur, xmlXPathObjectPtr val)
{
  if ((linkedOnOrAfterFall2022OSVersions() & 1) != 0 || !cur || !val) {
    return;
  }
  int locNr = cur->locNr;
  if (cur->locNr < 1)
  {
LABEL_19:
    int locMax = cur->locMax;
    if (locMax)
    {
      if (locNr != locMax)
      {
LABEL_26:
        locTab = cur->locTab;
        uint64_t v14 = cur->locNr;
        cur->int locNr = v14 + 1;
        locTab[v14] = val;
        return;
      }

      int v10 = 2 * locNr;
      cur->int locMax = v10;
      uint64_t v11 = (xmlXPathObjectPtr *)xmlRealloc(cur->locTab, 8LL * v10);
      if (v11)
      {
        cur->locTab = v11;
        goto LABEL_26;
      }
    }

    else
    {
      int v12 = (xmlXPathObjectPtr *)xmlMalloc(0x50uLL);
      cur->locTab = v12;
      if (v12)
      {
        *((_OWORD *)v12 + xmlSAX2Text((uint64_t)ctx, (char *)ch, len, 3) = 0u;
        *((_OWORD *)v12 + xmlSAX2Text((uint64_t)ctx, (char *)value, len, 4) = 0u;
        *((_OWORD *)v12 + xmlSAX2InitDefaultSAXHandler(&hdlr, 1) = 0u;
        *((_OWORD *)v12 + 2) = 0u;
        *(_OWORD *)int v12 = 0u;
        cur->int locMax = 10;
        goto LABEL_26;
      }
    }

    xmlXPtrErrMemory((const xmlChar *)"adding location to set");
    return;
  }

  int v5 = cur->locTab;
  uint64_t v6 = cur->locNr;
  while (1)
  {
    xmlXPathObjectPtr v7 = *v5;
    if (*v5 == val) {
      break;
    }
    if (v7)
    {
      BOOL v8 = v7->type == XPATH_RANGE && val->type == XPATH_RANGE;
      if (v8
        && v7->user == val->user
        && v7->index == val->index
        && v7->user2 == val->user2
        && v7->index2 == val->index2)
      {
        break;
      }
    }

    ++v5;
    if (!--v6) {
      goto LABEL_19;
    }
  }

  xmlXPathFreeObject(val);
}

xmlLocationSetPtr xmlXPtrLocationSetMerge(xmlLocationSetPtr val1, xmlLocationSetPtr val2)
{
  char v4 = linkedOnOrAfterFall2022OSVersions();
  xmlLocationSetPtr result = 0LL;
  if (val1 && (v4 & 1) == 0)
  {
    if (val2 && val2->locNr >= 1)
    {
      uint64_t v6 = 0LL;
      do
        xmlXPtrLocationSetAdd(val1, val2->locTab[v6++]);
      while (v6 < val2->locNr);
    }

    return val1;
  }

  return result;
}

void xmlXPtrLocationSetDel(xmlLocationSetPtr cur, xmlXPathObjectPtr val)
{
  char v4 = linkedOnOrAfterFall2022OSVersions();
  if (val)
  {
    if (cur)
    {
      if ((v4 & 1) == 0)
      {
        uint64_t locNr = cur->locNr;
        if ((int)locNr >= 1)
        {
          uint64_t v6 = 0LL;
          locTab = cur->locTab;
          while (locTab[v6] != val)
          {
            if (locNr == ++v6) {
              return;
            }
          }

          uint64_t v8 = (locNr - 1);
          cur->uint64_t locNr = v8;
          if ((int)v8 > (int)v6)
          {
            do
            {
              cur->locTab[v6] = cur->locTab[v6 + 1];
              ++v6;
            }

            while (v8 != v6);
            locTab = cur->locTab;
          }

          locTab[(int)v8] = 0LL;
        }
      }
    }
  }

void xmlXPtrLocationSetRemove(xmlLocationSetPtr cur, int val)
{
  char v4 = linkedOnOrAfterFall2022OSVersions();
  if (cur)
  {
    if ((v4 & 1) == 0)
    {
      uint64_t locNr = cur->locNr;
      if ((int)locNr > val)
      {
        uint64_t v6 = locNr - 1;
        cur->uint64_t locNr = v6;
        if ((int)v6 > val)
        {
          uint64_t v7 = val;
          uint64_t v6 = (int)v6;
          do
          {
            cur->locTab[v7] = cur->locTab[v7 + 1];
            ++v7;
          }

          while ((int)v6 != v7);
        }

        cur->locTab[v6] = 0LL;
      }
    }
  }

void xmlXPtrFreeLocationSet(xmlLocationSetPtr obj)
{
  char v2 = linkedOnOrAfterFall2022OSVersions();
  if (obj && (v2 & 1) == 0)
  {
    locTab = obj->locTab;
    if (locTab)
    {
      if (obj->locNr >= 1)
      {
        uint64_t v4 = 0LL;
        do
          xmlXPathFreeObject(obj->locTab[v4++]);
        while (v4 < obj->locNr);
        locTab = obj->locTab;
      }

      xmlFree(locTab);
    }

    xmlFree(obj);
  }

xmlXPathObjectPtr xmlXPtrNewLocationSetNodes(xmlNodePtr start, xmlNodePtr end)
{
  if ((linkedOnOrAfterFall2022OSVersions() & 1) != 0) {
    return 0LL;
  }
  int v5 = (xmlXPathObject *)xmlMalloc(0x48uLL);
  uint64_t v4 = v5;
  if (v5)
  {
    *(void *)&v5->int index2 = 0LL;
    *(_OWORD *)&v5->stringxmlNodeSetPtr val = 0u;
    *(_OWORD *)&v5->index = 0u;
    *(_OWORD *)&v5->xmlXPathObjectType type = 0u;
    *(_OWORD *)&v5->uint64_t BOOLval = 0u;
    v5->xmlXPathObjectType type = XPATH_LOCATIONSET;
    if (end) {
      uint64_t v6 = xmlXPtrNewRangeNodes(start, end);
    }
    else {
      uint64_t v6 = xmlXPtrNewCollapsedRange(start);
    }
    v4->int user = xmlXPtrLocationSetCreate(v6);
  }

  else
  {
    xmlXPtrErrMemory((const xmlChar *)"allocating locationset");
  }

  return v4;
}

xmlXPathObjectPtr xmlXPtrNewLocationSetNodeSet(xmlNodeSetPtr set)
{
  if ((linkedOnOrAfterFall2022OSVersions() & 1) != 0) {
    return 0LL;
  }
  uint64_t v3 = (xmlXPathObject *)xmlMalloc(0x48uLL);
  char v2 = v3;
  if (v3)
  {
    *(void *)&v3->int index2 = 0LL;
    *(_OWORD *)&v3->stringxmlNodeSetPtr val = 0u;
    *(_OWORD *)&v3->index = 0u;
    *(_OWORD *)&v3->xmlXPathObjectType type = 0u;
    *(_OWORD *)&v3->uint64_t BOOLval = 0u;
    v3->xmlXPathObjectType type = XPATH_LOCATIONSET;
    if (set)
    {
      xmlLocationSetPtr v4 = xmlXPtrLocationSetCreate(0LL);
      if (v4)
      {
        int v5 = v4;
        if (set->nodeNr >= 1)
        {
          uint64_t v6 = 0LL;
          do
          {
            uint64_t v7 = xmlXPtrNewCollapsedRange(set->nodeTab[v6]);
            xmlXPtrLocationSetAdd(v5, v7);
            ++v6;
          }

          while (v6 < set->nodeNr);
        }

        v2->int user = v5;
      }
    }
  }

  else
  {
    xmlXPtrErrMemory((const xmlChar *)"allocating locationset");
  }

  return v2;
}

xmlXPathObjectPtr xmlXPtrWrapLocationSet(xmlLocationSetPtr val)
{
  if ((linkedOnOrAfterFall2022OSVersions() & 1) == 0)
  {
    xmlXPathObjectPtr result = (xmlXPathObjectPtr)xmlMalloc(0x48uLL);
    if (result)
    {
      *(void *)&result->int index2 = 0LL;
      *(_OWORD *)&result->stringxmlNodeSetPtr val = 0u;
      *(_OWORD *)&result->index = 0u;
      *(_OWORD *)&result->xmlXPathObjectType type = 0u;
      *(_OWORD *)&result->uint64_t BOOLval = 0u;
      result->xmlXPathObjectType type = XPATH_LOCATIONSET;
      result->int user = val;
      return result;
    }

    xmlXPtrErrMemory((const xmlChar *)"allocating locationset");
  }

  return 0LL;
}

xmlXPathContextPtr xmlXPtrNewContext(xmlDocPtr doc, xmlNodePtr here, xmlNodePtr origin)
{
  xmlXPathContextPtr v5 = xmlXPathNewContext(doc);
  uint64_t v6 = v5;
  if (v5)
  {
    v5->xptr = 1;
    v5->here = here;
    v5->origiuint64_t n = origin;
    xmlXPathRegisterFunc(v5, (const xmlChar *)"range", (xmlXPathFunction)xmlXPtrRangeFunction);
    xmlXPathRegisterFunc(v6, (const xmlChar *)"range-inside", (xmlXPathFunction)xmlXPtrRangeInsideFunction);
    xmlXPathRegisterFunc(v6, (const xmlChar *)"string-range", (xmlXPathFunction)xmlXPtrStringRangeFunction);
    xmlXPathRegisterFunc(v6, (const xmlChar *)"start-point", (xmlXPathFunction)xmlXPtrStartPointFunction);
    xmlXPathRegisterFunc(v6, (const xmlChar *)"end-point", (xmlXPathFunction)xmlXPtrEndPointFunction);
    xmlXPathRegisterFunc(v6, (const xmlChar *)"here", (xmlXPathFunction)xmlXPtrHereFunction);
    xmlXPathRegisterFunc(v6, (const xmlChar *)" origin", (xmlXPathFunction)xmlXPtrOriginFunction);
  }

  return v6;
}

void xmlXPtrRangeFunction(xmlXPathParserContextPtr ctxt, int a2)
{
  if (ctxt)
  {
    xmlXPathParserContextPtr v2 = ctxt;
    if (a2 == 1)
    {
      if (ctxt->valueNr > 0)
      {
        xmlXPathObjectPtr value = ctxt->value;
        if (!value || ((type = value->type, type != XPATH_NODESET) ? (BOOL v5 = type == XPATH_LOCATIONSET) : (BOOL v5 = 1), !v5))
        {
          int v38 = 11;
          goto LABEL_73;
        }

        xmlXPathObjectPtr v6 = valuePop(ctxt);
        uint64_t v7 = v6;
        if (v6->type != XPATH_NODESET
          || (v8 = xmlXPtrNewLocationSetNodeSet(v6->nodesetval), xmlXPathFreeObject(v7), (uint64_t v7 = v8) != 0LL))
        {
          int user = (int *)v7->user;
          xmlLocationSetPtr v10 = xmlXPtrLocationSetCreate(0LL);
          if (v10)
          {
            uint64_t v11 = v10;
            if (!user || *user < 1)
            {
LABEL_70:
              BOOL v39 = xmlXPtrWrapLocationSet(v11);
              valuePush(v2, v39);
              xmlXPathFreeObject(v7);
              return;
            }

            uint64_t v12 = 0LL;
            while (1)
            {
              uint64_t v13 = *(void *)(*((void *)user + 1) + 8 * v12);
              if (!v13) {
                goto LABEL_25;
              }
              p_doc = &v2->context->doc;
              if (!p_doc) {
                goto LABEL_25;
              }
              uint64_t v15 = *p_doc;
              if (!v15) {
                goto LABEL_25;
              }
              if (*(_DWORD *)v13 != 6) {
                break;
              }
              int v18 = *(xmlNode **)(v13 + 56);
              uint64_t v16 = *(void *)(v13 + 40);
              if (v18)
              {
                int v17 = *(_DWORD *)(v13 + 48);
                int v19 = *(_DWORD *)(v13 + 64);
                goto LABEL_63;
              }

              if (v16 == v15)
              {
                if (*(_DWORD *)(v15 + 8) == 18)
                {
                  int v19 = -1;
                }

                else
                {
                  uint64_t v30 = *(void *)(v15 + 24);
                  if (v30)
                  {
                    int v19 = 0;
                    do
                    {
                      unsigned int v31 = *(_DWORD *)(v30 + 8);
                      BOOL v27 = v31 > 0xD;
                      int v32 = (1 << v31) & 0x2202;
                      if (!v27 && v32 != 0) {
                        ++v19;
                      }
                      uint64_t v30 = *(void *)(v30 + 48);
                    }

                    while (v30);
                  }

                  else
                  {
                    int v19 = 0;
                  }
                }

                uint64_t v16 = v15;
                int v17 = 0;
                int v18 = (xmlNode *)v15;
                goto LABEL_63;
              }

              signed int v22 = 0LL;
              unsigned int v23 = *(_DWORD *)(v16 + 8);
              if (v23 <= 0xD)
              {
                if (((1 << v23) & 0x33BA) != 0)
                {
                  int v24 = 1;
                  uint64_t v25 = *(void *)(v13 + 40);
                  do
                  {
                    unsigned int v26 = *(_DWORD *)(v25 + 8);
                    BOOL v27 = v26 > 0xD;
                    int v28 = (1 << v26) & 0x2202;
                    if (!v27 && v28 != 0) {
                      ++v24;
                    }
                    uint64_t v25 = *(void *)(v25 + 56);
                  }

                  while (v25);
                  uint64_t v16 = *(void *)(v16 + 40);
                  int v17 = v24 - 1;
                  int v19 = v24 + 1;
                  goto LABEL_39;
                }

                if (v23 == 2)
                {
                  uint64_t v34 = *(void *)(v16 + 24);
                  if (v34)
                  {
                    int v19 = 0;
                    do
                    {
                      unsigned int v35 = *(_DWORD *)(v34 + 8);
                      BOOL v27 = v35 > 0xD;
                      int v36 = (1 << v35) & 0x2202;
                      if (!v27 && v36 != 0) {
                        ++v19;
                      }
                      uint64_t v34 = *(void *)(v34 + 48);
                    }

                    while (v34);
                  }

                  else
                  {
                    int v19 = 0;
                  }

                  int v17 = 0;
LABEL_39:
                  int v18 = (xmlNode *)v16;
LABEL_63:
                  signed int v22 = xmlXPtrNewRange((xmlNodePtr)v16, v17, v18, v19);
                }
              }

void xmlXPtrRangeInsideFunction(xmlXPathParserContextPtr ctxt, int a2)
{
  if (ctxt)
  {
    xmlXPathParserContextPtr v2 = ctxt;
    if (a2 == 1)
    {
      if (ctxt->valueNr > 0)
      {
        xmlXPathObjectPtr value = ctxt->value;
        if (!value || ((type = value->type, type != XPATH_NODESET) ? (BOOL v5 = type == XPATH_LOCATIONSET) : (BOOL v5 = 1), !v5))
        {
          int v36 = 11;
          goto LABEL_63;
        }

        xmlXPathObjectPtr v6 = valuePop(ctxt);
        uint64_t v7 = v6;
        if (v6->type != XPATH_NODESET
          || (v8 = xmlXPtrNewLocationSetNodeSet(v6->nodesetval), xmlXPathFreeObject(v7), (uint64_t v7 = v8) != 0LL))
        {
          xmlLocationSetPtr v9 = xmlXPtrLocationSetCreate(0LL);
          if (v9)
          {
            xmlLocationSetPtr v10 = v9;
            int user = (int *)v7->user;
            if (!user || *user < 1)
            {
LABEL_60:
              uint64_t v37 = xmlXPtrWrapLocationSet(v10);
              valuePush(v2, v37);
              xmlXPathFreeObject(v7);
              return;
            }

            uint64_t v12 = 0LL;
            while (1)
            {
              uint64_t v13 = *(void *)(*((void *)user + 1) + 8 * v12);
              if (!v13) {
                goto LABEL_35;
              }
              p_doc = &v2->context->doc;
              if (!p_doc || !*p_doc) {
                goto LABEL_35;
              }
              if (*(_DWORD *)v13 == 6)
              {
                uint64_t v16 = *(void *)(v13 + 40);
                uint64_t v25 = *(xmlNode **)(v13 + 56);
                if (v25)
                {
                  int v26 = *(_DWORD *)(v13 + 48);
                  int v20 = *(_DWORD *)(v13 + 64);
                  BOOL v27 = *(xmlNode **)(v13 + 40);
                  goto LABEL_54;
                }

                uint64_t v15 = 0LL;
                unsigned int v30 = *(_DWORD *)(v16 + 8);
                if (v30 <= 0xD)
                {
                  int v18 = 1 << v30;
                  if ((v18 & 0x3226) != 0)
                  {
                    uint64_t v31 = *(void *)(v16 + 24);
                    if (v31)
                    {
                      int v20 = 0;
                      do
                      {
                        unsigned int v32 = *(_DWORD *)(v31 + 8);
                        BOOL v22 = v32 > 0xD;
                        int v33 = (1 << v32) & 0x2202;
                        if (!v22 && v33 != 0) {
                          ++v20;
                        }
                        uint64_t v31 = *(void *)(v31 + 48);
                      }

                      while (v31);
                      goto LABEL_53;
                    }

void xmlXPtrStringRangeFunction(xmlXPathParserContextPtr ctxt, unsigned int a2)
{
  xmlXPathParserContextPtr v2 = ctxt;
  if (a2 - 5 <= 0xFFFFFFFC)
  {
    xmlXPathErr(ctxt, 12);
    return;
  }

  int v78 = 0;
  uint64_t v77 = 0LL;
  if (a2 < 4)
  {
    BOOL v5 = 0LL;
    floatxmlNodeSetPtr val = 0;
    if (a2 != 3)
    {
      int v10 = -1;
      xmlLocationSetPtr v9 = 0LL;
      goto LABEL_17;
    }
  }

  else
  {
    xmlXPathObjectPtr value = ctxt->value;
    if (!value || value->type != XPATH_NUMBER)
    {
      xmlXPathErr(ctxt, 11);
      BOOL v5 = 0LL;
LABEL_15:
      xmlLocationSetPtr v9 = 0LL;
LABEL_118:
      uint64_t v12 = 0LL;
LABEL_119:
      xmlXPathObjectPtr v16 = 0LL;
      goto LABEL_120;
    }

    xmlXPathObjectPtr v4 = valuePop(ctxt);
    BOOL v5 = v4;
    if (v4) {
      floatxmlNodeSetPtr val = (int)v4->floatval;
    }
    else {
      floatxmlNodeSetPtr val = 0;
    }
  }

  uint64_t v7 = v2->value;
  if (!v7 || *v7 != 3)
  {
    xmlXPathErr(v2, 11);
    goto LABEL_15;
  }

  xmlXPathObjectPtr v8 = valuePop(v2);
  xmlLocationSetPtr v9 = v8;
  if (v8) {
    int v10 = (int)v8->floatval - 1;
  }
  else {
    int v10 = -1;
  }
LABEL_17:
  uint64_t v11 = v2->value;
  if (!v11 || *v11 != 4)
  {
    xmlXPathErr(v2, 11);
    goto LABEL_118;
  }

  uint64_t v12 = valuePop(v2);
  uint64_t v13 = v2->value;
  if (!v13 || ((v14 = *v13, v14 != 1) ? (BOOL v15 = v14 == 7) : (BOOL v15 = 1), !v15))
  {
    xmlXPathErr(v2, 11);
    goto LABEL_119;
  }

  xmlXPathObjectPtr v16 = valuePop(v2);
  xmlNodeSetPtr cur = xmlXPtrLocationSetCreate(0LL);
  if (cur)
  {
    xmlNodeSetPtr nodesetval = v16->nodesetval;
    if (!nodesetval) {
      goto LABEL_130;
    }
    if (v16->type == XPATH_NODESET)
    {
      xmlXPathObjectPtr v18 = xmlXPtrNewLocationSetNodeSet(nodesetval);
      xmlXPathFreeObject(v16);
      xmlXPathObjectPtr v16 = v18;
      if (!v18)
      {
        xmlXPathErr(v2, 15);
LABEL_130:
        unsigned int v58 = xmlXPtrWrapLocationSet(cur);
        valuePush(v2, v58);
        goto LABEL_120;
      }
    }

    int user = (int *)v16->user;
    if (*user < 1) {
      goto LABEL_130;
    }
    uint64_t v59 = v16;
    int v60 = v2;
    char v69 = (int *)v16->user;
    int v70 = v12;
    uint64_t v67 = v9;
    uint64_t v20 = 0LL;
    uint64_t v21 = 0LL;
    int v74 = 0;
    signed int v61 = v5;
    BOOL v22 = v5 != 0LL;
    BOOL v23 = floatval > 0 && v5 != 0LL;
    BOOL v64 = v23;
    int v65 = v10;
    BOOL v62 = v22;
    int v63 = floatval;
LABEL_36:
    uint64_t v24 = *((void *)user + 1);
    uint64_t v25 = *(void *)(v24 + 8 * v20);
    if (v25
      && ((*(_DWORD *)v25 - 5) > 1
       || (uint64_t v77 = *(xmlNode **)(v25 + 40),
           int v78 = *(_DWORD *)(v25 + 48) & ~(*(int *)(v25 + 48) >> 31),
           (uint64_t v25 = *(void *)(v24 + 8 * v20)) != 0)))
    {
      int v26 = v70;
      if ((*(_DWORD *)v25 - 5) <= 1)
      {
        uint64_t v21 = *(void *)(v25 + 40);
        int v74 = *(_DWORD *)(v25 + 48) & ~(*(int *)(v25 + 48) >> 31);
      }
    }

    else
    {
      int v26 = v70;
    }

    xmlXPtrAdvanceChar((uint64_t *)&v77, &v78, 0);
    uint64_t v71 = v20;
    if (v21)
    {
      int v27 = *(_DWORD *)(v21 + 8);
      if (v27 == 1 || v27 == 9)
      {
        uint64_t NthChild = v21;
        if (v74 < 1) {
          goto LABEL_54;
        }
LABEL_53:
        uint64_t NthChild = xmlXPtrGetNthChild(v21, v74);
        goto LABEL_54;
      }

      if (v27 != 18)
      {
        uint64_t NthChild = v21;
        if (v27 == 13)
        {
          uint64_t NthChild = v21;
          if (v74 > 0) {
            goto LABEL_53;
          }
        }

        do
        {
LABEL_54:
          if (!NthChild) {
            goto LABEL_59;
          }
          uint64_t v30 = NthChild;
          uint64_t NthChild = *(void *)(NthChild + 32);
        }

        while (NthChild);
        if (*(_DWORD *)(v30 + 8) != 1)
        {
          uint64_t v31 = *(const xmlChar **)(v30 + 80);
          if (v31)
          {
            int v74 = xmlStrlen(v31);
            uint64_t v21 = v30;
          }
        }
      }
    }

void xmlXPtrStartPointFunction(xmlXPathParserContextPtr ctxt, int a2)
{
  if (!ctxt) {
    return;
  }
  xmlXPathParserContextPtr v2 = ctxt;
  if (a2 != 1)
  {
    int v17 = 12;
    goto LABEL_32;
  }

  if (ctxt->valueNr <= 0)
  {
    int v17 = 23;
    goto LABEL_32;
  }

  xmlXPathObjectPtr value = ctxt->value;
  if (!value || ((type = value->type, type != XPATH_NODESET) ? (BOOL v5 = type == XPATH_LOCATIONSET) : (BOOL v5 = 1), !v5))
  {
    int v17 = 11;
    goto LABEL_32;
  }

  xmlXPathObjectPtr v6 = valuePop(ctxt);
  uint64_t v7 = v6;
  if (v6->type == XPATH_NODESET)
  {
    xmlXPathObjectPtr v8 = xmlXPtrNewLocationSetNodeSet(v6->nodesetval);
    xmlXPathFreeObject(v7);
    uint64_t v7 = v8;
    if (!v8)
    {
LABEL_31:
      xmlValidCtxt ctxt = v2;
      int v17 = 15;
      goto LABEL_32;
    }
  }

  xmlLocationSetPtr v9 = xmlXPtrLocationSetCreate(0LL);
  if (!v9)
  {
    xmlXPathFreeObject(v7);
    goto LABEL_31;
  }

  int v10 = v9;
  int user = (int *)v7->user;
  if (!user || *user < 1)
  {
LABEL_25:
    xmlXPathFreeObject(v7);
    xmlXPathObjectPtr v16 = xmlXPtrWrapLocationSet(v10);
    valuePush(v2, v16);
    return;
  }

  uint64_t v12 = 0LL;
  while (1)
  {
    uint64_t v13 = *(void *)(*((void *)user + 1) + 8 * v12);
    if (!v13) {
      goto LABEL_24;
    }
    if (*(_DWORD *)v13 == 6) {
      break;
    }
    if (*(_DWORD *)v13 == 5)
    {
      uint64_t v14 = *(void *)(v13 + 40);
      goto LABEL_22;
    }

void xmlXPtrEndPointFunction(xmlXPathParserContextPtr ctxt, int a2)
{
  if (!ctxt) {
    return;
  }
  xmlXPathParserContextPtr v2 = ctxt;
  if (a2 != 1)
  {
    int v18 = 12;
    goto LABEL_33;
  }

  if (ctxt->valueNr <= 0)
  {
    int v18 = 23;
    goto LABEL_33;
  }

  xmlXPathObjectPtr value = ctxt->value;
  if (!value || ((type = value->type, type != XPATH_NODESET) ? (BOOL v5 = type == XPATH_LOCATIONSET) : (BOOL v5 = 1), !v5))
  {
    int v18 = 11;
    goto LABEL_33;
  }

  xmlXPathObjectPtr v6 = valuePop(ctxt);
  uint64_t v7 = v6;
  if (v6->type == XPATH_NODESET)
  {
    xmlXPathObjectPtr v8 = xmlXPtrNewLocationSetNodeSet(v6->nodesetval);
    xmlXPathFreeObject(v7);
    uint64_t v7 = v8;
    if (!v8)
    {
LABEL_32:
      xmlValidCtxt ctxt = v2;
      int v18 = 15;
      goto LABEL_33;
    }
  }

  xmlLocationSetPtr v9 = xmlXPtrLocationSetCreate(0LL);
  if (!v9)
  {
    xmlXPathFreeObject(v7);
    goto LABEL_32;
  }

  int v10 = v9;
  int user = (int *)v7->user;
  if (!user || *user < 1)
  {
LABEL_26:
    xmlXPathFreeObject(v7);
    int v17 = xmlXPtrWrapLocationSet(v10);
    valuePush(v2, v17);
    return;
  }

  uint64_t v12 = 0LL;
  while (1)
  {
    uint64_t v13 = *(void *)(*((void *)user + 1) + 8 * v12);
    if (!v13) {
      goto LABEL_25;
    }
    if (*(_DWORD *)v13 == 6) {
      break;
    }
    if (*(_DWORD *)v13 == 5)
    {
      uint64_t v14 = *(void *)(v13 + 40);
      int v15 = *(_DWORD *)(v13 + 48);
      goto LABEL_23;
    }

void xmlXPtrHereFunction(xmlXPathParserContextPtr ctxt, int a2)
{
  if (ctxt)
  {
    xmlXPathParserContextPtr v2 = ctxt;
    if (a2)
    {
      int v3 = 12;
LABEL_4:
      xmlXPathErr(ctxt, v3);
      return;
    }

    if (ctxt->valueNr < 0)
    {
      int v3 = 23;
      goto LABEL_4;
    }

    here = ctxt->context->here;
    if (!here)
    {
      xmlValidCtxt ctxt = v2;
      int v3 = 16;
      goto LABEL_4;
    }

    BOOL v5 = xmlXPtrNewLocationSetNodes(here, 0LL);
    valuePush(v2, v5);
  }

void xmlXPtrOriginFunction(xmlXPathParserContextPtr ctxt, int a2)
{
  if (ctxt)
  {
    xmlXPathParserContextPtr v2 = ctxt;
    if (a2)
    {
      int v3 = 12;
LABEL_4:
      xmlXPathErr(ctxt, v3);
      return;
    }

    if (ctxt->valueNr < 0)
    {
      int v3 = 23;
      goto LABEL_4;
    }

    origiuint64_t n = ctxt->context->origin;
    if (!origin)
    {
      xmlValidCtxt ctxt = v2;
      int v3 = 16;
      goto LABEL_4;
    }

    BOOL v5 = xmlXPtrNewLocationSetNodes(origin, 0LL);
    valuePush(v2, v5);
  }

xmlXPathObjectPtr xmlXPtrEval(const xmlChar *str, xmlXPathContextPtr ctx)
{
  xmlXPathObjectPtr v4 = 0LL;
  if (!str || !ctx) {
    return v4;
  }
  xmlXPathParserContextPtr v5 = xmlXPathNewParserContext(str, ctx);
  if (!v5) {
    return 0LL;
  }
  uint64_t v6 = (uint64_t)v5;
  v5->xptr = 1;
  if (!v5->valueTab)
  {
    uint64_t v7 = xmlMalloc(0x50uLL);
    *(void *)(v6 + 48) = v7;
    if (!v7)
    {
      xmlXPtrErrMemory((const xmlChar *)"allocating evaluation context");
      goto LABEL_105;
    }

    *(void *)(v6 + 4xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0) = 0xA00000000LL;
    *(void *)(v6 + 32) = 0LL;
  }

  for (uint64_t i = *(void *)v6 + 1LL; ; ++i)
  {
    uint64_t v9 = *(unsigned __int8 *)(i - 1);
    if (((1LL << v9) & 0x100002600LL) == 0) {
      break;
    }
    *(void *)uint64_t v6 = i;
  }

  if (v9 == 47)
  {
    xmlXPathRoot((xmlXPathParserContextPtr)v6);
    int v10 = (xmlXPathParserContext *)v6;
    uint64_t v11 = 0LL;
    goto LABEL_99;
  }

_DWORD *xmlXPtrErr(uint64_t a1, int a2, const char *a3, const xmlChar *a4)
{
  *(_DWORD *)(a1 + 16) = a2;
  uint64_t v7 = *(void *)(a1 + 24);
  if (!v7) {
    return __xmlRaiseError(0LL, 0LL, 0LL, 0LL, 0LL, 0xDu, a2, 2, 0LL, 0, a4, 0LL, 0LL, 0, 0, a3, (char)a4);
  }
  xmlResetError((xmlErrorPtr)(v7 + 232));
  uint64_t v9 = *(_DWORD **)(a1 + 24);
  v9[58] = 13;
  v9[59] = a2;
  v9[62] = 2;
  int v10 = xmlStrdup(*(const xmlChar **)(a1 + 8));
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)(v11 + 272) = v10;
  xmlNodeSetPtr cur = *(xmlChar **)(a1 + 8);
  int v13 = *(_DWORD *)a1 - (_DWORD)cur;
  *(_DWORD *)(v11 + 296) = v13;
  uint64_t v14 = *(void *)(v11 + 320);
  *(void *)(v11 + 312) = v14;
  int v15 = *(uint64_t (**)(void, uint64_t))(v11 + 224);
  if (v15) {
    return (_DWORD *)v15(*(void *)(v11 + 216), v11 + 232);
  }
  else {
    return __xmlRaiseError(0LL, 0LL, 0LL, 0LL, v14, 0xDu, a2, 2, 0LL, 0, a4, cur, 0LL, v13, 0, a3, (char)a4);
  }
}

xmlNodePtr xmlXPtrBuildNodeList(xmlXPathObjectPtr obj)
{
  char v2 = linkedOnOrAfterFall2022OSVersions();
  int v3 = 0LL;
  if (obj && (v2 & 1) == 0)
  {
    int v3 = 0LL;
    switch(obj->type)
    {
      case XPATH_NODESET:
        xmlNodeSetPtr nodesetval = obj->nodesetval;
        if (!nodesetval || nodesetval->nodeNr < 1) {
          return 0LL;
        }
        uint64_t v5 = 0LL;
        uint64_t v6 = 0LL;
        int v3 = 0LL;
        do
        {
          xmlNodePtr v7 = nodesetval->nodeTab[v5];
          if (v7)
          {
            unsigned int type = v7->type;
            BOOL v9 = type > 0x12;
            int v10 = (1 << type) & 0x7DC04;
            if (v9 || v10 == 0)
            {
              uint64_t v12 = xmlCopyNode(v7, 1);
              if (v6)
              {
                xmlAddNextSibling(v6, v12);
                if (v6->next) {
                  uint64_t v6 = v6->next;
                }
              }

              else
              {
                int v3 = v12;
                uint64_t v6 = v12;
              }
            }
          }

          ++v5;
        }

        while (v5 < nodesetval->nodeNr);
        return v3;
      case XPATH_POINT:
        int user = (xmlNode *)obj->user;
        int v14 = 0;
        return xmlCopyNode(user, v14);
      case XPATH_RANGE:
        int v16 = (xmlNode *)obj->user;
        if (!v16 || v16->type == XML_NAMESPACE_DECL) {
          return 0LL;
        }
        uint64_t user2 = (uint64_t)obj->user2;
        if (user2)
        {
          if (*(_DWORD *)(user2 + 8) == 18) {
            return 0LL;
          }
          int v18 = 0LL;
          int v3 = 0LL;
          int index = obj->index;
          int index2 = obj->index2;
          uint64_t NthChild = (uint64_t)obj->user;
          while (1)
          {
            uint64_t v21 = user2;
            unsigned int v22 = v18;
            while (1)
            {
              BOOL v23 = 0LL;
              uint64_t v24 = index <= 1 ? 0LL : (index - 1);
LABEL_30:
              if (NthChild == v21) {
                break;
              }
              if ((xmlNode *)NthChild != v16 || v3)
              {
                unsigned int v27 = *(_DWORD *)(NthChild + 8);
                if (v27 <= 0x14)
                {
                  if (((1 << v27) & 0x19C040) != 0) {
                    goto LABEL_46;
                  }
                  if (v27 == 2)
                  {
                    xmlGenericErrorFunc v28 = *__xmlGenericError();
                    int v29 = *__xmlGenericErrorContext();
                    uint64_t v30 = "Internal error at %s:%d\n";
LABEL_51:
                    v28(v29, v30);
LABEL_46:
                    if (!v3) {
                      goto LABEL_87;
                    }
                    goto LABEL_47;
                  }

                  if (v27 == 17)
                  {
                    xmlGenericErrorFunc v28 = *__xmlGenericError();
                    int v29 = *__xmlGenericErrorContext();
                    uint64_t v30 = "Unimplemented block at %s:%d\n";
                    goto LABEL_51;
                  }
                }

                uint64_t v31 = xmlCopyNode((xmlNodePtr)NthChild, 1);
                if (!v31) {
                  goto LABEL_46;
                }
                if (!v3 || !((unint64_t)v23 | (unint64_t)v22))
                {
                  xmlGenericErrorFunc v41 = *__xmlGenericError();
                  unsigned int v42 = *__xmlGenericErrorContext();
                  v41( v42,  "Internal error at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpointer.c",  1654);
                  return 0LL;
                }

                if (v23)
                {
                  xmlAddNextSibling(v23, v31);
                  goto LABEL_48;
                }

                BOOL v23 = xmlAddChild(v22, v31);
LABEL_47:
                if (!((unint64_t)v23 | (unint64_t)v22))
                {
LABEL_87:
                  xmlGenericErrorFunc v39 = *__xmlGenericError();
                  uint64_t v40 = *__xmlGenericErrorContext();
                  v39( v40,  "Internal error at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpointer.c",  1668);
                  return 0LL;
                }

void xmlXPtrRangeToFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  if ((linkedOnOrAfterFall2022OSVersions() & 1) == 0) {
    xmlXPathErr(ctxt, 7);
  }
}

uint64_t xmlXPtrAdvanceNode(uint64_t a1, _DWORD *a2)
{
LABEL_1:
  while (a1)
  {
    if (*(_DWORD *)(a1 + 8) == 18) {
      return 0LL;
    }
    uint64_t v4 = *(void *)(a1 + 24);
    uint64_t v5 = a1;
    if (!v4) {
      goto LABEL_10;
    }
    if (a2) {
      ++*a2;
    }
    a1 = v4;
    while (1)
    {
      unsigned int v6 = *(_DWORD *)(a1 + 8);
      if (v6 > 0xD) {
        break;
      }
      if (v6 != 5)
      {
        if (((1 << v6) & 0x221A) == 0) {
          goto LABEL_1;
        }
        return a1;
      }

      xmlGenericErrorFunc v7 = *__xmlGenericError();
      xmlXPathObjectPtr v8 = __xmlGenericErrorContext();
      v7( *v8,  "Unimplemented block at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpointer.c",  2391);
      uint64_t v5 = a1;
LABEL_10:
      while (1)
      {
        a1 = *(void *)(v5 + 48);
        if (a1) {
          break;
        }
        uint64_t v5 = *(void *)(v5 + 40);
        if (a2) {
          --*a2;
        }
        if (!v5) {
          return 0LL;
        }
      }
    }
  }

  return a1;
}

void xmlXPtrEvalRangePredicate(xmlXPathParserContextPtr ctxt)
{
  char v2 = linkedOnOrAfterFall2022OSVersions();
  if (!ctxt || (v2 & 1) != 0) {
    return;
  }
  for (uint64_t i = ctxt->cur + 1; ; ++i)
  {
    unsigned int v4 = *(i - 1);
    if (v4 > 0x20 || ((1LL << v4) & 0x100002600LL) == 0) {
      break;
    }
    ctxt->xmlNodeSetPtr cur = i;
  }

  if (v4 != 91)
  {
LABEL_42:
    int v26 = 6;
    goto LABEL_43;
  }

  do
  {
    ctxt->xmlNodeSetPtr cur = i;
    unsigned int v6 = *i++;
    uint64_t v7 = (1LL << v6) & 0x100002600LL;
  }

  while (v6 <= 0x20 && v7 != 0);
  xmlXPathObjectPtr value = ctxt->value;
  if (!value || value->type != XPATH_LOCATIONSET)
  {
    int v26 = 11;
LABEL_43:
    xmlXPathErr(ctxt, v26);
    return;
  }

  xmlXPathObjectPtr v10 = valuePop(ctxt);
  int user = (int *)v10->user;
  xmlXPathContextPtr context = ctxt->context;
  context->xmlNodePtr node = 0LL;
  if (!user || !*user)
  {
    *(void *)&context->int contextSize = 0LL;
    xmlXPathEvalExpr(ctxt);
    unsigned int v27 = valuePop(ctxt);
    if (v27) {
      xmlXPathFreeObject(v27);
    }
    valuePush(ctxt, v10);
    if (ctxt->error) {
      return;
    }
    goto LABEL_34;
  }

  xmlNodeSetPtr cur = ctxt->cur;
  int v14 = xmlXPtrLocationSetCreate(0LL);
  if (*user < 1)
  {
LABEL_29:
    xmlXPathFreeObject(v10);
    xmlXPathContextPtr v24 = ctxt->context;
    v24->xmlNodePtr node = 0LL;
    *(void *)&v24->int contextSize = -1LL;
    uint64_t v25 = xmlXPtrWrapLocationSet(v14);
    valuePush(ctxt, v25);
LABEL_34:
    if (*ctxt->cur == 93)
    {
      xmlGenericErrorFunc v28 = ctxt->cur + 1;
      do
      {
        ctxt->xmlNodeSetPtr cur = v28;
        unsigned int v29 = *v28++;
        uint64_t v30 = (1LL << v29) & 0x100002600LL;
      }

      while (v29 <= 0x20 && v30 != 0);
      return;
    }

    goto LABEL_42;
  }

  uint64_t v15 = 0LL;
  xmlXPathContextPtr v16 = ctxt->context;
  while (1)
  {
    ctxt->xmlNodeSetPtr cur = cur;
    uint64_t v17 = *(xmlNode **)(*(void *)(*((void *)user + 1) + 8 * v15) + 40LL);
    v16->xmlNodePtr node = v17;
    int v18 = xmlXPathNewNodeSet(v17);
    valuePush(ctxt, v18);
    xmlXPathContextPtr v19 = ctxt->context;
    uint64_t v20 = v15 + 1;
    v19->int contextSize = *user;
    v19->proximityPositiouint64_t n = v15 + 1;
    xmlXPathEvalExpr(ctxt);
    if (ctxt->error) {
      break;
    }
    uint64_t v21 = valuePop(ctxt);
    if (xmlXPathEvaluatePredicateResult(ctxt, v21))
    {
      unsigned int v22 = xmlXPathObjectCopy(*(xmlXPathObjectPtr *)(*((void *)user + 1) + 8 * v15));
      xmlXPtrLocationSetAdd(v14, v22);
    }

    if (v21) {
      xmlXPathFreeObject(v21);
    }
    if (ctxt->value == v18)
    {
      BOOL v23 = valuePop(ctxt);
      xmlXPathFreeObject(v23);
    }

    xmlXPathContextPtr v16 = ctxt->context;
    v16->xmlNodePtr node = 0LL;
    ++v15;
    if (v20 >= *user) {
      goto LABEL_29;
    }
  }

void xmlXPtrEvalChildSeq(xmlXPathParserContext *a1, xmlChar *val)
{
  if (val)
  {
    unsigned int v4 = xmlXPathNewString(val);
    valuePush(a1, v4);
    xmlFree(val);
    xmlXPathIdFunction(a1, 1);
    if (a1->error) {
      return;
    }
  }

  else if (*a1->cur == 47 && *((_BYTE *)a1->cur + 1) != 49)
  {
    xmlXPtrErr((uint64_t)a1, 1901, "warning: ChildSeq not starting by /1\n", 0LL);
  }

  for (uint64_t i = a1->cur; *a1->cur == 47; uint64_t i = a1->cur)
  {
    a1->xmlNodeSetPtr cur = i + 1;
    int v6 = i[1];
    int v7 = 0;
    int v8 = 0;
    BOOL v9 = i + 2;
    do
    {
      int v10 = v6 - 48;
      BOOL v11 = v8 > 214748364;
      int v12 = 10 * v8;
      if (v8 > 214748364) {
        int v12 = v8;
      }
      int v13 = -2147483601 - v6;
      BOOL v14 = v12 <= v13;
      if (v12 <= v13) {
        int v15 = v10;
      }
      else {
        int v15 = 0;
      }
      int v8 = v15 + v12;
      char v16 = !v14 || v11;
      if ((v16 & 1) != 0) {
        int v7 = 1;
      }
      a1->xmlNodeSetPtr cur = v9;
      int v17 = *v9++;
      int v6 = v17;
    }

    while ((v17 - 48) < 0xA);
    if (v7) {
LABEL_22:
    }
      int v8 = 0;
    xmlXPathObjectPtr value = a1->value;
    if (value && *value == 1)
    {
      xmlXPathObjectPtr v19 = valuePop(a1);
      uint64_t v20 = v19;
      if (v8 >= 1
        && (xmlNodeSetPtr nodesetval = v19->nodesetval) != 0LL
        && nodesetval->nodeNr == 1
        && (nodeTab = (uint64_t *)nodesetval->nodeTab, (uint64_t NthChild = xmlXPtrGetNthChild(*nodeTab, v8)) != 0))
      {
        uint64_t *nodeTab = NthChild;
        xmlXPathContextPtr v24 = a1;
        uint64_t v25 = v20;
      }

      else
      {
        xmlXPathFreeObject(v20);
        uint64_t v25 = xmlXPathNewNodeSet(0LL);
        xmlXPathContextPtr v24 = a1;
      }

      valuePush(v24, v25);
    }

    else
    {
      xmlXPathErr(a1, 11);
    }
  }

uint64_t xmlXPtrGetNthChild(uint64_t result, int a2)
{
  if (result)
  {
    if (*(_DWORD *)(result + 8) != 18)
    {
      xmlXPathObjectPtr result = *(void *)(result + 24);
      if ((a2 & 0x80000000) == 0)
      {
        int v2 = 0;
        do
        {
          if (!result) {
            break;
          }
          unsigned int v3 = *(_DWORD *)(result + 8);
          BOOL v4 = v3 > 0xD;
          int v5 = (1 << v3) & 0x2202;
          if (!v4 && v5 != 0 && ++v2 == a2) {
            break;
          }
          xmlXPathObjectPtr result = *(void *)(result + 48);
        }

        while (v2 <= a2);
      }
    }
  }

  return result;
}

_OWORD *xmlXPtrNewPoint(uint64_t a1, int a2)
{
  xmlXPathObjectPtr result = 0LL;
  if (a1 && (a2 & 0x80000000) == 0)
  {
    xmlXPathObjectPtr result = xmlMalloc(0x48uLL);
    if (result)
    {
      result[2] = 0u;
      result[3] = 0u;
      *((void *)result + 8) = 0LL;
      *xmlXPathObjectPtr result = 0u;
      result[1] = 0u;
      *(_DWORD *)xmlXPathObjectPtr result = 5;
      *((void *)result + 5) = a1;
      *((_DWORD *)result + 12) = a2;
    }

    else
    {
      xmlXPtrErrMemory((const xmlChar *)"allocating point");
      return 0LL;
    }
  }

  return result;
}

uint64_t xmlXPtrAdvanceChar(uint64_t *a1, int *a2, int a3)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1)
  {
    if (a2)
    {
      uint64_t v6 = *a1;
      if (*a1)
      {
        if (*(_DWORD *)(v6 + 8) != 18)
        {
          int v7 = a3;
          if ((a3 & 0x80000000) == 0)
          {
            int v8 = *a2;
            while (v6)
            {
              while (1)
              {
                unsigned int v9 = *(_DWORD *)(v6 + 8);
                if (v9 > 0xD || ((1 << v9) & 0x2202) == 0) {
                  break;
                }
                if (v8 < 1) {
                  uint64_t NthChild = xmlXPtrAdvanceNode(v6, 0LL);
                }
                else {
                  uint64_t NthChild = xmlXPtrGetNthChild(v6, v8);
                }
                uint64_t v6 = NthChild;
                int v8 = 0;
                if (!NthChild) {
                  goto LABEL_30;
                }
              }

              if (!v7)
              {
                uint64_t result = 0LL;
                goto LABEL_31;
              }

              if (v9 == 1 || (int v12 = *(const xmlChar **)(v6 + 80)) == 0LL) {
                int v13 = 0;
              }
              else {
                int v13 = xmlStrlen(v12);
              }
              if (v8 > v13)
              {
                xmlGenericErrorFunc v14 = *__xmlGenericError();
                int v15 = __xmlGenericErrorContext();
                v14( *v15,  "Internal error at %s:%d\n",  "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpointer.c",  2465);
                int v8 = v13;
              }

              if (v8 + v7 < v13)
              {
                uint64_t result = 0LL;
                v8 += v7;
                goto LABEL_31;
              }

              uint64_t v6 = xmlXPtrAdvanceNode(v6, 0LL);
              uint64_t result = 0xFFFFFFFFLL;
              int v7 = v7 - v13 + v8;
              int v8 = 0;
              if (v7 < 0) {
                return result;
              }
            }

            int v8 = 0;
LABEL_30:
            uint64_t result = 0xFFFFFFFFLL;
LABEL_31:
            *a1 = v6;
            *a2 = v8;
          }
        }
      }
    }
  }

  return result;
}

BOOL xmlDetectSAX2_cold_1(_DWORD *a1)
{
  *(_WORD *)unsigned int v3 = 0;
  _os_log_fault_impl( &dword_181974000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_FAULT,  "XML SAX2 parser requested but SAX1 used due to startElement/endElement handlers--switch to startElementNs/endElementNs",  v3,  2u);
  return *a1 == -554844497;
}

void xmlBufferLength_cold_1(int a1)
{
  uint64_t v2 = *MEMORY[0x1895F89C0];
  v1[0] = 67240192;
  v1[1] = a1;
  _os_log_error_impl( &dword_181974000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "xmlBufferLength() int overflow: %{public}u",  (uint8_t *)v1,  8u);
}

int __darwin_check_fd_set_overflow(int a1, const void *a2, int a3)
{
  return MEMORY[0x1895F8880](*(void *)&a1, a2, *(void *)&a3);
}

int *__error(void)
{
  return (int *)MEMORY[0x1895F8898]();
}

double __exp10(double a1)
{
  return result;
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1895F8930]();
}

uint64_t __memmove_chk()
{
  return MEMORY[0x1895F8938]();
}

uint64_t __strncat_chk()
{
  return MEMORY[0x1895F8A10]();
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1895F8A30](*(void *)&a1);
}

const char *__cdecl _dyld_get_image_name(uint32_t image_index)
{
  return (const char *)MEMORY[0x1895F8C08](*(void *)&image_index);
}

void _os_log_error_impl( void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl( void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void abort(void)
{
}

int bind(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x1895F9608](*(void *)&a1, a2, *(void *)&a3);
}

void *__cdecl bsearch( const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return (void *)MEMORY[0x1895F9650](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
}

void *__cdecl calloc(size_t __count, size_t __size)
{
  return (void *)MEMORY[0x1895F9710](__count, __size);
}

int close(int a1)
{
  return MEMORY[0x1895FA590](*(void *)&a1);
}

int connect(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x1895FA5F0](*(void *)&a1, a2, *(void *)&a3);
}

uLong crc32(uLong crc, const Bytef *buf, uInt len)
{
  return MEMORY[0x189617578](crc, buf, *(void *)&len);
}

int deflate(z_streamp strm, int flush)
{
  return MEMORY[0x189617580](strm, *(void *)&flush);
}

int deflateEnd(z_streamp strm)
{
  return MEMORY[0x189617590](strm);
}

int deflateInit2_( z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)
{
  return MEMORY[0x189617598]( strm,  *(void *)&level,  *(void *)&method,  *(void *)&windowBits,  *(void *)&memLevel,  *(void *)&strategy,  version,  *(void *)&stream_size);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

int dlclose(void *__handle)
{
  return MEMORY[0x1895FAF50](__handle);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1895FAF58]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1895FAF60](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1895FAF78](__handle, __symbol);
}

int dup(int a1)
{
  return MEMORY[0x1895FAFA8](*(void *)&a1);
}

uint64_t dyld_get_program_sdk_version()
{
  return MEMORY[0x1895FAFF0]();
}

uint64_t dyld_program_minos_at_least()
{
  return MEMORY[0x1895FB080]();
}

void exit(int a1)
{
}

int fclose(FILE *a1)
{
  return MEMORY[0x1895FB208](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1895FB210](*(void *)&a1, *(void *)&a2);
}

int ferror(FILE *a1)
{
  return MEMORY[0x1895FB250](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1895FB268](a1);
}

int fileno(FILE *a1)
{
  return MEMORY[0x1895FB2A0](a1);
}

double fmod(double a1, double a2)
{
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1895FB348](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1895FB360](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1895FB370](*(void *)&a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1895FB378](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1895FB388](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

void freeaddrinfo(addrinfo *a1)
{
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1895FB4C8](__ptr, __size, __nitems, __stream);
}

int getaddrinfo(const char *a1, const char *a2, const addrinfo *a3, addrinfo **a4)
{
  return MEMORY[0x1895FB4E0](a1, a2, a3, a4);
}

char *__cdecl getcwd(char *a1, size_t a2)
{
  return (char *)MEMORY[0x1895FB520](a1, a2);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1895FB538](a1);
}

hostent *__cdecl gethostbyname(const char *a1)
{
  return (hostent *)MEMORY[0x1895FB588](a1);
}

int getsockname(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x1895FB6D0](*(void *)&a1, a2, a3);
}

int getsockopt(int a1, int a2, int a3, void *a4, socklen_t *a5)
{
  return MEMORY[0x1895FB6D8](*(void *)&a1, *(void *)&a2, *(void *)&a3, a4, a5);
}

int gzclose(gzFile file)
{
  return MEMORY[0x1896175B8](file);
}

int gzdirect(gzFile file)
{
  return MEMORY[0x1896175C8](file);
}

gzFile gzdopen(int fd, const char *mode)
{
  return (gzFile)MEMORY[0x1896175D0](*(void *)&fd, mode);
}

gzFile gzopen(const char *a1, const char *a2)
{
  return (gzFile)MEMORY[0x1896175F0](a1, a2);
}

int gzread(gzFile file, voidp buf, unsigned int len)
{
  return MEMORY[0x1896175F8](file, buf, *(void *)&len);
}

int gzwrite(gzFile file, voidpc buf, unsigned int len)
{
  return MEMORY[0x189617600](file, buf, *(void *)&len);
}

const char *__cdecl inet_ntop(int a1, const void *a2, char *a3, socklen_t a4)
{
  return (const char *)MEMORY[0x1895FB838](*(void *)&a1, a2, a3, *(void *)&a4);
}

int inflate(z_streamp strm, int flush)
{
  return MEMORY[0x189617608](strm, *(void *)&flush);
}

int inflateEnd(z_streamp strm)
{
  return MEMORY[0x189617610](strm);
}

int inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size)
{
  return MEMORY[0x189617618](strm, *(void *)&windowBits, version, *(void *)&stream_size);
}

int listen(int a1, int a2)
{
  return MEMORY[0x1895FB9F8](*(void *)&a1, *(void *)&a2);
}

double log10(double a1)
{
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1895FBC88](__size);
}

void *__cdecl memchr(const void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1895FBE00](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1895FBE08](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1895FBE18](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1895FBE30](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1895FBE48](__b, *(void *)&__c, __len);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1895FC248](a1, *(void *)&a2);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1895FC470](oslog, type);
}

int poll(pollfd *a1, nfds_t a2, int a3)
{
  return MEMORY[0x1895FC7B8](a1, *(void *)&a2, *(void *)&a3);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x1895FC9A0](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x1895FC9A8](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x1895FC9B0](a1);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1895FC9C8](a1, a2);
}

int pthread_equal(pthread_t a1, pthread_t a2)
{
  return MEMORY[0x1895FCA00](a1, a2);
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x1895FCA40](a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1895FCA60](a1, a2);
}

int pthread_main_np(void)
{
  return MEMORY[0x1895FCA78]();
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1895FCA88](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1895FCA90](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1895FCA98](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1895FCAA8](a1);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x1895FCAC8](a1, a2);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1895FCB20]();
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1895FCB48](a1, a2);
}

int puts(const char *a1)
{
  return MEMORY[0x1895FCB98](a1);
}

int rand_r(unsigned int *a1)
{
  return MEMORY[0x1895FCBF0](a1);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1895FCC38](*(void *)&a1, a2, a3);
}

void *__cdecl realloc(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x1895FCC68](__ptr, __size);
}

ssize_t recv(int a1, void *a2, size_t a3, int a4)
{
  return MEMORY[0x1895FCCA8](*(void *)&a1, a2, a3, *(void *)&a4);
}

int select(int a1, fd_set *a2, fd_set *a3, fd_set *a4, timeval *a5)
{
  return MEMORY[0x1895FCE10](*(void *)&a1, a2, a3, a4, a5);
}

ssize_t send(int a1, const void *a2, size_t a3, int a4)
{
  return MEMORY[0x1895FCE30](*(void *)&a1, a2, a3, *(void *)&a4);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1895FCF90](__str, __size, __format);
}

int socket(int a1, int a2, int a3)
{
  return MEMORY[0x1895FCFA0](*(void *)&a1, *(void *)&a2, *(void *)&a3);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1895FCFD0](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1895FD010](a1, a2);
}

char *__cdecl strchr(const char *__s, int __c)
{
  return (char *)MEMORY[0x1895FD048](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1895FD050](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1895FD0B8](__s);
}

char *__cdecl strncat(char *__s1, const char *__s2, size_t __n)
{
  return (char *)MEMORY[0x1895FD0E0](__s1, __s2, __n);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1895FD0E8](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1895FD0F0](__dst, __src, __n);
}

char *__cdecl strrchr(const char *__s, int __c)
{
  return (char *)MEMORY[0x1895FD120](__s, *(void *)&__c);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1895FD180](__str, __endptr, *(void *)&__base);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1895FD400](a1);
}

uint64_t ucnv_close()
{
  return MEMORY[0x189615678]();
}

uint64_t ucnv_convertEx()
{
  return MEMORY[0x189615680]();
}

uint64_t ucnv_open()
{
  return MEMORY[0x1896156C8]();
}

uint64_t ucnv_setFromUCallBack()
{
  return MEMORY[0x1896156D8]();
}

uint64_t ucnv_setToUCallBack()
{
  return MEMORY[0x1896156E8]();
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return MEMORY[0x1895FD528](a1, a2, a3);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1895FD610](__str, __size, __format, a4);
}