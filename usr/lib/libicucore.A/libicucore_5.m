UChar **sub_18099E6EC(uint64_t a1, const icu::UnicodeString *a2, int a3, int *a4)
{
  UChar **v8;
  int v9;
  int v10;
  uint64_t v11;
  UChar **v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  icu::UnicodeString *v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  UChar **v26;
  uint64_t *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t *v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;
  v8 = 0LL;
  v9 = *(_DWORD *)a2;
  v10 = 2;
  while (1)
  {
    if (v10 == 1)
    {
      v8 = (UChar **)sub_18099EA40(a1, a2, 1);
      if (!v8) {
        goto LABEL_23;
      }
    }

    if (icu::ICU_Utility::parseChar(a1, a2, 40)) {
      break;
    }
    if (!--v10)
    {
      v11 = (uint64_t)v8;
      if (a3)
      {
        v12 = (UChar **)sub_18099F2B4((uint64_t)v8, a4);
        if (!v12)
        {
          v11 = (uint64_t)v8;
          v13 = 1LL;
          goto LABEL_25;
        }

        goto LABEL_26;
      }

      v13 = 0LL;
LABEL_25:
      v12 = (UChar **)sub_18099EFA4(v11, v13);
      if (v12)
      {
LABEL_26:
        icu::UnicodeString::operator=(v12 + 17, v8 + 25);
        v14 = 0LL;
        if (v8) {
          goto LABEL_27;
        }
        goto LABEL_28;
      }

uint64_t *sub_18099EA40(uint64_t a1, const icu::UnicodeString *a2, int a3)
{
  uint64_t v94 = *MEMORY[0x1895F89C0];
  __int128 v90 = 0u;
  uint64_t v93 = 0LL;
  __int128 v92 = 0u;
  __int128 v91 = 0u;
  LOWORD(v90) = 2;
  __int128 v85 = 0u;
  uint64_t v88 = 0LL;
  v89 = (UChar *)off_18971B688;
  __int128 v87 = 0u;
  __int128 v86 = 0u;
  LOWORD(v85) = 2;
  __int128 v80 = 0u;
  uint64_t v83 = 0LL;
  v84 = (UChar *)off_18971B688;
  __int128 v82 = 0u;
  __int128 v81 = 0u;
  LOWORD(v80) = 2;
  __int128 v75 = 0u;
  uint64_t v78 = 0LL;
  v79 = (UChar *)off_18971B688;
  __int128 v77 = 0u;
  __int128 v76 = 0u;
  v74 = (UChar *)off_18971B688;
  LOWORD(v75) = 2;
  uint64_t v73 = 0LL;
  __int128 v71 = 0u;
  __int128 v72 = 0u;
  __int128 v70 = 0u;
  v69 = (UChar *)off_18971B688;
  LOWORD(v70) = 2;
  unsigned int v51 = *(_DWORD *)a2;
  icu::ICU_Utility::skipWhitespace((icu::ICU_Utility *)a1, a2, (int *)1);
  unint64_t v6 = *(unsigned int *)a2;
  unsigned int v7 = *(unsigned __int16 *)(a1 + 8);
  int v8 = (__int16)v7;
  unsigned int v9 = v7 >> 5;
  if (v8 < 0) {
    unsigned int v9 = *(_DWORD *)(a1 + 12);
  }
  if ((_DWORD)v6 != v9)
  {
    int v15 = 0;
    while (1)
    {
      int v16 = 0;
      while (1)
      {
        if (a3)
        {
          while (1)
          {
            int v17 = (unsigned __int16)v70 >> 5;
            if ((v70 & 0x8000u) != 0LL) {
              int v17 = DWORD1(v70);
            }
            if (v17 || !icu::UnicodeSet::resemblesPattern((icu::UnicodeSet *)a1, (const icu::UnicodeString *)v6)) {
              break;
            }
            unsigned int v18 = *(_DWORD *)a2;
            v53 = off_18970F400;
            unsigned int v54 = v18;
            int v55 = -1;
            UErrorCode v52 = U_ZERO_ERROR;
            uint64_t v68 = 0LL;
            __int128 v66 = 0u;
            __int128 v67 = 0u;
            __int128 v64 = 0u;
            __int128 v65 = 0u;
            __int128 v63 = 0u;
            __int128 v61 = 0u;
            __int128 v62 = 0u;
            __int128 v59 = 0u;
            __int128 v60 = 0u;
            __int128 v57 = 0u;
            __int128 v58 = 0u;
            __int128 v56 = 0u;
            icu::UnicodeSet::UnicodeSet( (icu::UnicodeSet *)&v56,  (const icu::UnicodeString *)a1,  (icu::ParsePosition *)&v53,  1u,  0LL,  &v52);
            if (v52 > U_ZERO_ERROR)
            {
              *(_DWORD *)a2 = v51;
              icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)&v56);
              icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v53);
              v45 = 0LL;
              goto LABEL_81;
            }

            (*(void (**)(uint64_t, void, void, UChar **))(*(void *)a1 + 24LL))( a1,  *(unsigned int *)a2,  v54,  &v69);
            *(_DWORD *)a2 = v54;
            icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)&v56);
            icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v53);
            icu::ICU_Utility::skipWhitespace((icu::ICU_Utility *)a1, a2, (int *)1);
            unint64_t v6 = *(unsigned int *)a2;
            unsigned int v19 = *(unsigned __int16 *)(a1 + 8);
            int v20 = (__int16)v19;
            unsigned int v21 = v19 >> 5;
            if (v20 < 0) {
              unsigned int v21 = *(_DWORD *)(a1 + 12);
            }
            if ((_DWORD)v6 == v21) {
              goto LABEL_4;
            }
          }
        }

        if (v16) {
          break;
        }
        uint64_t v22 = *(int *)a2;
        unsigned int v23 = *(unsigned __int16 *)(a1 + 8);
        if ((v23 & 0x8000u) == 0) {
          unsigned int v24 = v23 >> 5;
        }
        else {
          unsigned int v24 = *(_DWORD *)(a1 + 12);
        }
        uint64_t v25 = (v23 & 2) != 0 ? a1 + 10 : *(void *)(a1 + 24);
        int v26 = *(unsigned __int16 *)(v25 + 2 * v22);
        if (v26 == 47)
        {
          int v27 = (__int16)v75;
          int v28 = (unsigned __int16)v75 >> 5;
          int v29 = DWORD1(v75);
        }

        else
        {
          if (v26 != 45) {
            goto LABEL_48;
          }
          int v27 = (__int16)v80;
          int v28 = (unsigned __int16)v80 >> 5;
          int v29 = DWORD1(v80);
        }

        if (v27 < 0) {
          int v28 = v29;
        }
        if (v28)
        {
LABEL_48:
          if (v15) {
            goto LABEL_4;
          }
          break;
        }

        *(_DWORD *)a2 = v22 + 1;
        icu::ICU_Utility::skipWhitespace((icu::ICU_Utility *)a1, a2, (int *)1);
        unint64_t v6 = *(unsigned int *)a2;
        unsigned int v30 = *(unsigned __int16 *)(a1 + 8);
        int v31 = (__int16)v30;
        unsigned int v32 = v30 >> 5;
        if (v31 < 0) {
          unsigned int v32 = *(_DWORD *)(a1 + 12);
        }
        int v16 = v26;
        if ((_DWORD)v6 == v32) {
          goto LABEL_4;
        }
      }

      __int128 v58 = 0u;
      __int128 v59 = 0u;
      __int128 v56 = 0u;
      __int128 v57 = 0u;
      icu::ICU_Utility::parseUnicodeIdentifier(a1, a2, (uint64_t)&v56);
      LODWORD(v33) = WORD4(v56) >> 5;
      v33 = (SWORD4(v56) & 0x8000u) == 0 ? (void *)v33 : (void *)HIDWORD(v56);
      if (!(_DWORD)v33) {
        break;
      }
      if (v16)
      {
        if (v16 == 47) {
          v34 = &v74;
        }
        else {
          v34 = &v79;
        }
      }

      else
      {
        v34 = &v89;
      }

      icu::UnicodeString::operator=(v34, (UChar **)&v56);
      ++v15;
      icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)&v56);
      icu::ICU_Utility::skipWhitespace((icu::ICU_Utility *)a1, a2, (int *)1);
      unint64_t v6 = *(unsigned int *)a2;
      unsigned int v36 = *(unsigned __int16 *)(a1 + 8);
      int v37 = (__int16)v36;
      unsigned int v38 = v36 >> 5;
      if (v37 < 0) {
        unsigned int v38 = *(_DWORD *)(a1 + 12);
      }
      if ((_DWORD)v6 == v38) {
        goto LABEL_4;
      }
    }

    icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)&v56);
  }

uint64_t *sub_18099EFA4(uint64_t a1, unint64_t a2)
{
  uint64_t v62 = *MEMORY[0x1895F89C0];
  __int128 v58 = 0u;
  uint64_t v61 = 0LL;
  __int128 v60 = 0u;
  __int128 v59 = 0u;
  v2 = (uint64_t *)off_18971B688;
  LOWORD(v58) = 2;
  __int128 v53 = 0u;
  uint64_t v56 = 0LL;
  __int128 v57 = (UChar *)off_18971B688;
  __int128 v55 = 0u;
  __int128 v54 = 0u;
  UErrorCode v52 = (UChar *)off_18971B688;
  LOWORD(v53) = 2;
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  uint64_t v51 = 0LL;
  __int128 v50 = 0u;
  v47 = (UChar *)off_18971B688;
  LOWORD(v48) = 2;
  if (a1)
  {
    __int128 v43 = 0uLL;
    __int128 v44 = 0uLL;
    uint64_t v46 = 0LL;
    __int128 v45 = 0uLL;
    uint64_t v42 = (UChar *)off_18971B688;
    LOWORD(v43) = 2;
    if ((_DWORD)a2)
    {
      unsigned int v4 = *(unsigned __int16 *)(a1 + 80);
      int v5 = (__int16)v4;
      unsigned int v6 = v4 >> 5;
      if (v5 >= 0) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = *(unsigned int *)(a1 + 84);
      }
      uint64_t v8 = icu::UnicodeString::doAppend((uint64_t)&v42, (const icu::UnicodeString *)(a1 + 72), 0, v7);
      __int16 v41 = 45;
      unsigned int v9 = (UChar **)icu::UnicodeString::doAppend(v8, (uint64_t)&v41, 0, 1LL);
      int v10 = (const icu::UnicodeString *)(a1 + 8);
      unsigned int v11 = *(unsigned __int16 *)(a1 + 16);
      int v12 = (__int16)v11;
      unsigned int v13 = v11 >> 5;
      if (v12 >= 0) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = *(unsigned int *)(a1 + 20);
      }
    }

    else
    {
      int v15 = (const icu::UnicodeString *)(a1 + 8);
      if (*(_BYTE *)(a1 + 264))
      {
        unsigned int v16 = *(unsigned __int16 *)(a1 + 16);
        int v17 = (__int16)v16;
        unsigned int v18 = v16 >> 5;
        if (v17 >= 0) {
          uint64_t v19 = v18;
        }
        else {
          uint64_t v19 = *(unsigned int *)(a1 + 20);
        }
        int v20 = (UChar **)icu::UnicodeString::doAppend((uint64_t)&v42, v15, 0, v19);
        __int16 v41 = 45;
      }

      else
      {
        icu::UnicodeString::operator=(&v47, (UChar **)v15);
        __int16 v41 = 45;
        int v20 = &v47;
      }

      icu::UnicodeString::doAppend((uint64_t)v20, (uint64_t)&v41, 0, 1LL);
      int v10 = (const icu::UnicodeString *)(a1 + 72);
      unsigned int v21 = *(unsigned __int16 *)(a1 + 80);
      int v22 = (__int16)v21;
      unsigned int v23 = v21 >> 5;
      if (v22 >= 0) {
        uint64_t v14 = v23;
      }
      else {
        uint64_t v14 = *(unsigned int *)(a1 + 84);
      }
      unsigned int v9 = &v42;
    }

    icu::UnicodeString::doAppend((uint64_t)v9, v10, 0, v14);
    if (*(__int16 *)(a1 + 144) < 0)
    {
      if (!*(_DWORD *)(a1 + 148)) {
        goto LABEL_25;
      }
    }

    else if (!(*(unsigned __int16 *)(a1 + 144) >> 5))
    {
      goto LABEL_25;
    }

    __int16 v41 = 47;
    uint64_t v24 = icu::UnicodeString::doAppend((uint64_t)&v42, (uint64_t)&v41, 0, 1LL);
    unsigned int v25 = *(unsigned __int16 *)(a1 + 144);
    int v26 = (__int16)v25;
    unsigned int v27 = v25 >> 5;
    if (v26 >= 0) {
      uint64_t v28 = v27;
    }
    else {
      uint64_t v28 = *(unsigned int *)(a1 + 148);
    }
    icu::UnicodeString::doAppend(v24, (const icu::UnicodeString *)(a1 + 136), 0, v28);
LABEL_25:
    icu::UnicodeString::operator=(&v52, &v47);
    if ((v43 & 0x8000u) == 0LL) {
      uint64_t v29 = (unsigned __int16)v43 >> 5;
    }
    else {
      uint64_t v29 = DWORD1(v43);
    }
    icu::UnicodeString::doAppend((uint64_t)&v52, (const icu::UnicodeString *)&v42, 0, v29);
    unsigned int v30 = *(unsigned __int16 *)(a1 + 208);
    if ((v30 & 0x8000) != 0)
    {
      if (*(_DWORD *)(a1 + 212)) {
        goto LABEL_30;
      }
    }

    else if (v30 >> 5)
    {
LABEL_30:
      int v31 = (__int16)v30;
      unsigned int v32 = v30 >> 5;
      if (v31 >= 0) {
        uint64_t v33 = v32;
      }
      else {
        uint64_t v33 = *(unsigned int *)(a1 + 212);
      }
      icu::UnicodeString::doReplace( (icu::UnicodeString *)&v42,  0LL,  0LL,  (const icu::UnicodeString *)(a1 + 200),  0,  v33);
    }

    icu::UnicodeString::operator=(&v57, &v42);
    icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)&v42);
  }

  v35 = icu::UMemory::operator new(v2, (icu::UMemory *)0xC8, a2);
  int v37 = v35;
  if (v35)
  {
    v35[1] = (uint64_t)off_18971B688;
    *((_WORD *)v35 + 8) = 2;
    v35[9] = (uint64_t)off_18971B688;
    *((_WORD *)v35 + 40) = 2;
    v35[17] = (uint64_t)off_18971B688;
    *((_WORD *)v35 + 72) = 2;
    icu::UnicodeString::operator=((UChar **)v35 + 1, &v57);
    icu::UnicodeString::operator=((UChar **)v37 + 9, &v52);
  }

  icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)&v47);
  icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)&v52);
  icu::UnicodeString::~UnicodeString(v39, (icu::UnicodeString *)&v57);
  return v37;
}

uint64_t *sub_18099F2B4(uint64_t a1, int *a2)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  uint64_t v4 = a1 + 8;
  unsigned int v5 = *(unsigned __int16 *)(a1 + 16);
  int v6 = (__int16)v5;
  int v7 = v5 >> 5;
  if (v6 >= 0) {
    int v8 = v7;
  }
  else {
    int v8 = *(_DWORD *)(a1 + 20);
  }
  else {
    BOOL v9 = *a2 <= 0;
  }
  if (!v9) {
    return 0LL;
  }
  unsigned int v10 = atomic_load(&dword_18C535B10);
  if (v10 == 2 || !icu::umtx_initImplPreInit(&dword_18C535B10))
  {
    if (dword_18C535B14 >= 1)
    {
      unsigned int v11 = 0LL;
      *a2 = dword_18C535B14;
      return v11;
    }
  }

  else
  {
    sub_1809A05C8(a2);
    dword_18C535B14 = *a2;
    icu::umtx_initImplPostInit(&dword_18C535B10);
  }

  if (*a2 > 0) {
    return 0LL;
  }
  umtx_lock((icu::UMutex *)&unk_18C4498F0);
  uint64_t v13 = uhash_get(*(void *)qword_18C535B08, a1 + 72);
  umtx_unlock((std::mutex **)&unk_18C4498F0);
  if (!v13) {
    return 0LL;
  }
  __int128 v48 = 0u;
  uint64_t v51 = 0LL;
  __int128 v50 = 0u;
  __int128 v49 = 0u;
  v47 = (UChar *)off_18971B688;
  LOWORD(v48) = 2;
  unsigned int v14 = *(unsigned __int16 *)(a1 + 208);
  int v15 = (__int16)v14;
  unsigned int v16 = v14 >> 5;
  if (v15 >= 0) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = *(unsigned int *)(a1 + 212);
  }
  if ((_DWORD)v17) {
    icu::UnicodeString::doAppend((uint64_t)&v47, (const icu::UnicodeString *)(a1 + 200), 0, v17);
  }
  if (*(_BYTE *)(a1 + 264))
  {
    uint64_t v18 = icu::UnicodeString::doAppend((uint64_t)&v47, (uint64_t)L"Any", 0, 3LL);
    LOWORD(v46[0]) = 45;
    icu::UnicodeString::doAppend(v18, (uint64_t)v46, 0, 1LL);
  }

  unsigned int v19 = *(unsigned __int16 *)(v13 + 8);
  int v20 = (__int16)v19;
  unsigned int v21 = v19 >> 5;
  if (v20 >= 0) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = *(unsigned int *)(v13 + 12);
  }
  icu::UnicodeString::doAppend((uint64_t)&v47, (const icu::UnicodeString *)v13, 0, v22);
  memset(v46, 0, sizeof(v46));
  __int128 v44 = L"Any";
  icu::UnicodeString::UnicodeString(v46, 1LL, &v44);
  __int16 v45 = 45;
  uint64_t v23 = icu::UnicodeString::doAppend((uint64_t)v46, (uint64_t)&v45, 0, 1LL);
  unsigned int v24 = *(unsigned __int16 *)(v13 + 8);
  int v25 = (__int16)v24;
  unsigned int v26 = v24 >> 5;
  if (v25 >= 0) {
    uint64_t v27 = v26;
  }
  else {
    uint64_t v27 = *(unsigned int *)(v13 + 12);
  }
  icu::UnicodeString::doAppend(v23, (const icu::UnicodeString *)v13, 0, v27);
  LODWORD(v30) = *(unsigned __int16 *)(a1 + 144);
  int v29 = (__int16)v30;
  LODWORD(v30) = v30 >> 5;
  if (v29 >= 0) {
    unint64_t v30 = v30;
  }
  else {
    unint64_t v30 = *(unsigned int *)(a1 + 148);
  }
  if ((_DWORD)v30)
  {
    __int16 v45 = 47;
    uint64_t v31 = icu::UnicodeString::doAppend((uint64_t)&v47, (uint64_t)&v45, 0, 1LL);
    unsigned int v32 = *(unsigned __int16 *)(a1 + 144);
    int v33 = (__int16)v32;
    unsigned int v34 = v32 >> 5;
    if (v33 >= 0) {
      uint64_t v35 = v34;
    }
    else {
      uint64_t v35 = *(unsigned int *)(a1 + 148);
    }
    icu::UnicodeString::doAppend(v31, (const icu::UnicodeString *)(a1 + 136), 0, v35);
    __int16 v45 = 47;
    uint64_t v36 = icu::UnicodeString::doAppend((uint64_t)v46, (uint64_t)&v45, 0, 1LL);
    unsigned int v37 = *(unsigned __int16 *)(a1 + 144);
    int v38 = (__int16)v37;
    unsigned int v39 = v37 >> 5;
    if (v38 >= 0) {
      uint64_t v40 = v39;
    }
    else {
      uint64_t v40 = *(unsigned int *)(a1 + 148);
    }
    icu::UnicodeString::doAppend(v36, (const icu::UnicodeString *)(a1 + 136), 0, v40);
  }

  __int16 v41 = icu::UMemory::operator new((uint64_t *)v30, (icu::UMemory *)0xC8, v28);
  unsigned int v11 = v41;
  if (v41)
  {
    v41[1] = (uint64_t)off_18971B688;
    *((_WORD *)v41 + 8) = 2;
    v41[9] = (uint64_t)off_18971B688;
    *((_WORD *)v41 + 40) = 2;
    v41[17] = (uint64_t)off_18971B688;
    *((_WORD *)v41 + 72) = 2;
    icu::UnicodeString::operator=((UChar **)v41 + 1, &v47);
    icu::UnicodeString::operator=((UChar **)v11 + 9, (UChar **)v46);
  }

  icu::UnicodeString::~UnicodeString(v42, (icu::UnicodeString *)v46);
  icu::UnicodeString::~UnicodeString(v43, (icu::UnicodeString *)&v47);
  return v11;
}

uint64_t *sub_18099F638(uint64_t a1, const icu::UnicodeString *a2)
{
  int v3 = *(_DWORD *)a2;
  uint64_t v4 = sub_18099EA40(a1, a2, 1);
  if (v4)
  {
    unsigned int v5 = (UChar **)v4;
    int v6 = sub_18099EFA4((uint64_t)v4, 0LL);
    int v8 = v6;
    if (v6) {
      icu::UnicodeString::operator=((UChar **)v6 + 17, v5 + 25);
    }
    icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)(v5 + 25));
    icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)(v5 + 17));
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)(v5 + 9));
    icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)(v5 + 1));
    icu::UMemory::operator delete(v5);
  }

  else
  {
    int v8 = 0LL;
    *(_DWORD *)a2 = v3;
  }

  return v8;
}

icu::UnicodeSet *sub_18099F6C4( icu::ICU_Utility *this, icu::UnicodeString *a2, int a3, int *a4, icu::UnicodeString *a5)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  int v10 = *(_DWORD *)a2;
  if (*a4 == 1)
  {
    if (!icu::ICU_Utility::parseChar((uint64_t)this, a2, 40))
    {
      unsigned int v14 = 0LL;
      *(_DWORD *)a2 = v10;
      return v14;
    }
  }

  else if (*a4 == -1)
  {
    *a4 = icu::ICU_Utility::parseChar((uint64_t)this, a2, 40);
  }

  icu::ICU_Utility::skipWhitespace(this, a2, (int *)1);
  int v12 = (uint64_t *)*(unsigned int *)a2;
  unsigned int v26 = off_18970F400;
  unsigned int v27 = v12;
  int v28 = -1;
  UErrorCode v25 = U_ZERO_ERROR;
  uint64_t v13 = (icu::UnicodeSet *)icu::UMemory::operator new(v12, (icu::UMemory *)0xC8, v11);
  if (!v13) {
    goto LABEL_9;
  }
  unsigned int v14 = v13;
  icu::UnicodeSet::UnicodeSet(v13, this, (icu::ParsePosition *)&v26, 1u, 0LL, &v25);
  if (v25 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    icu::UnicodeSet::~UnicodeSet(v14);
    icu::UMemory::operator delete(v15);
LABEL_9:
    *(_DWORD *)a2 = v10;
LABEL_10:
    icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v26);
    return 0LL;
  }

  __int128 v31 = 0u;
  __int128 v32 = 0u;
  uint64_t v34 = 0LL;
  __int128 v33 = 0u;
  unint64_t v30 = off_18971B688;
  LOWORD(v31) = 2;
  (*(void (**)(icu::ICU_Utility *, void, void, void (***)(icu::UnicodeString *__hidden)))(*(void *)this + 24LL))( this,  *(unsigned int *)a2,  v27,  &v30);
  *(_DWORD *)a2 = v27;
  unint64_t v17 = *a4;
  if ((_DWORD)v17 == 1 && !icu::ICU_Utility::parseChar((uint64_t)this, a2, 41))
  {
    icu::UnicodeSet::~UnicodeSet(v14);
    icu::UMemory::operator delete(v23);
    *(_DWORD *)a2 = v10;
    icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)&v30);
    goto LABEL_10;
  }

  if (a5)
  {
    int v18 = *a4;
    if (a3)
    {
      if (!v18)
      {
        __int16 v29 = 40;
        icu::UnicodeString::doReplace((uint64_t)&v30, 0LL, 0LL, (uint64_t)&v29, 0, 1LL);
        __int16 v29 = 41;
        icu::UnicodeString::doAppend((uint64_t)&v30, (uint64_t)&v29, 0, 1LL);
      }

      if ((v31 & 0x8000u) == 0LL) {
        uint64_t v19 = (unsigned __int16)v31 >> 5;
      }
      else {
        uint64_t v19 = DWORD1(v31);
      }
      icu::UnicodeString::doReplace(a5, 0LL, 0LL, (const icu::UnicodeString *)&v30, 0, v19);
      if ((v31 & 0x8000u) == 0LL) {
        uint64_t v20 = (unsigned __int16)v31 >> 5;
      }
      else {
        uint64_t v20 = DWORD1(v31);
      }
      __int16 v29 = 59;
      icu::UnicodeString::doReplace((uint64_t)a5, v20, 0LL, (uint64_t)&v29, 0, 1LL);
    }

    else
    {
      if (v18 == 1)
      {
        __int16 v29 = 40;
        icu::UnicodeString::doReplace((uint64_t)&v30, 0LL, 0LL, (uint64_t)&v29, 0, 1LL);
        __int16 v29 = 41;
        icu::UnicodeString::doAppend((uint64_t)&v30, (uint64_t)&v29, 0, 1LL);
      }

      if ((v31 & 0x8000u) == 0LL) {
        uint64_t v21 = (unsigned __int16)v31 >> 5;
      }
      else {
        uint64_t v21 = DWORD1(v31);
      }
      uint64_t v22 = icu::UnicodeString::doAppend((uint64_t)a5, (const icu::UnicodeString *)&v30, 0, v21);
      __int16 v29 = 59;
      icu::UnicodeString::doAppend(v22, (uint64_t)&v29, 0, 1LL);
    }
  }

  icu::UnicodeString::~UnicodeString((void *)v17, (icu::UnicodeString *)&v30);
  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v26);
  return v14;
}

uint64_t sub_18099FA08(uint64_t a1, int a2, uint64_t a3, icu::UVector *this, icu::UnicodeSet **a5)
{
  int v36 = 0;
  UErrorCode v37 = U_ZERO_ERROR;
  icu::UVector::removeAllElements((uint64_t)this);
  int v10 = (void (*)(void *))icu::UVector::setDeleter(this, (void (*)(void *))sub_18099FCFC);
  *a5 = 0LL;
  unsigned int v11 = *(unsigned __int16 *)(a3 + 8);
  if ((v11 & 1) != 0)
  {
    icu::UnicodeString::unBogus(a3);
  }

  else
  {
    if ((v11 & 0x8000u) == 0) {
      unsigned int v12 = v11 >> 5;
    }
    else {
      unsigned int v12 = *(_DWORD *)(a3 + 12);
    }
    if (v12) {
      *(_WORD *)(a3 + 8) &= 0x1Fu;
    }
  }

  int v35 = 0;
  uint64_t v13 = sub_18099F6C4((icu::ICU_Utility *)a1, (icu::UnicodeString *)&v36, a2, &v35, (icu::UnicodeString *)a3);
  if (v13)
  {
    unsigned int v14 = v13;
    if (icu::ICU_Utility::parseChar(a1, (const icu::UnicodeString *)&v36, 59))
    {
      if (a2)
      {
LABEL_11:
        icu::UnicodeSet::~UnicodeSet(v14);
        icu::UMemory::operator delete(v15);
        goto LABEL_21;
      }
    }

    else
    {
      unsigned int v16 = *(unsigned __int16 *)(a3 + 8);
      if ((v16 & 1) != 0)
      {
        icu::UnicodeString::unBogus(a3);
      }

      else
      {
        if ((v16 & 0x8000u) == 0) {
          unsigned int v17 = v16 >> 5;
        }
        else {
          unsigned int v17 = *(_DWORD *)(a3 + 12);
        }
        if (v17) {
          *(_WORD *)(a3 + 8) &= 0x1Fu;
        }
      }

      int v36 = 0;
      if (a2) {
        goto LABEL_11;
      }
    }

    *a5 = v14;
    goto LABEL_21;
  }

  do
  {
LABEL_21:
    int v18 = sub_18099E6EC(a1, (const icu::UnicodeString *)&v36, a2, (int *)&v37);
    if (!v18) {
      break;
    }
    if (a2) {
      icu::UVector::insertElementAt((uint64_t (**)(void *))this, v18, 0, &v37);
    }
    else {
      icu::UVector::adoptElement(this, v18, &v37);
    }
    if (v37 > U_ZERO_ERROR) {
      goto LABEL_41;
    }
  }

  while (icu::ICU_Utility::parseChar(a1, (const icu::UnicodeString *)&v36, 59));
  int v19 = *((_DWORD *)this + 2);
  if (v19)
  {
    if (v19 >= 1)
    {
      for (signed int i = 0; i < v26; ++i)
      {
        uint64_t v21 = icu::UVector::elementAt(this, i);
        unsigned int v22 = *(unsigned __int16 *)(v21 + 16);
        int v23 = (__int16)v22;
        unsigned int v24 = v22 >> 5;
        if (v23 >= 0) {
          uint64_t v25 = v24;
        }
        else {
          uint64_t v25 = *(unsigned int *)(v21 + 20);
        }
        icu::UnicodeString::doAppend(a3, (const icu::UnicodeString *)(v21 + 8), 0, v25);
        signed int v26 = *((_DWORD *)this + 2);
        if (i != v26 - 1)
        {
          __int16 v38 = 59;
          icu::UnicodeString::doAppend(a3, (uint64_t)&v38, 0, 1LL);
          signed int v26 = *((_DWORD *)this + 2);
        }
      }
    }

    if (!v18)
    {
      int v35 = 1;
      __int128 v32 = sub_18099F6C4((icu::ICU_Utility *)a1, (icu::UnicodeString *)&v36, a2, &v35, (icu::UnicodeString *)a3);
      if (v32)
      {
        __int128 v33 = v32;
        icu::ICU_Utility::parseChar(a1, (const icu::UnicodeString *)&v36, 59);
        if (a2 == 1)
        {
          *a5 = v33;
        }

        else
        {
          icu::UnicodeSet::~UnicodeSet(v33);
          icu::UMemory::operator delete(v34);
        }
      }
    }

    icu::ICU_Utility::skipWhitespace((icu::ICU_Utility *)a1, (const icu::UnicodeString *)&v36, (int *)1);
    unsigned int v27 = *(unsigned __int16 *)(a1 + 8);
    int v28 = (__int16)v27;
    unsigned int v29 = v27 >> 5;
    if (v28 < 0) {
      unsigned int v29 = *(_DWORD *)(a1 + 12);
    }
    if (v36 == v29)
    {
      icu::UVector::setDeleter(this, v10);
      return 1LL;
    }
  }

void sub_18099FCFC(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (a1)
  {
    icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(a1 + 136));
    icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)(a1 + 72));
    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + 8));
    icu::UMemory::operator delete((void *)a1);
  }

void sub_18099FD3C(icu::UVector *a1, UErrorCode *a2)
{
  v18[8] = *(UChar **)MEMORY[0x1895F89C0];
  uint64_t v17 = 0LL;
  memset(v16, 0, sizeof(v16));
  icu::UVector::UVector((icu::UVector *)v16, a2);
  icu::UVector::setDeleter((icu::UVector *)v16, (void (*)(void *))sub_18099FF40);
  if (*((int *)a1 + 2) >= 1)
  {
    for (signed int i = 0; i < *((_DWORD *)a1 + 2); ++i)
    {
      uint64_t v7 = icu::UVector::elementAt(a1, i);
      unsigned int v10 = *(unsigned __int16 *)(v7 + 80);
      if ((v10 & 0x8000) != 0)
      {
        if (!*(_DWORD *)(v7 + 84)) {
          continue;
        }
      }

      else if (!(v10 >> 5))
      {
        continue;
      }

      unsigned int v11 = sub_18099E5A8(v7, v8, v9);
      if (!v11)
      {
        *a2 = U_INVALID_ID;
        goto LABEL_2;
      }

      icu::UVector::adoptElement((icu::UVector *)v16, v11, a2);
    }
  }

  if (!DWORD2(v16[0]))
  {
    int v15 = &unk_180A3D68E;
    icu::UnicodeString::UnicodeString(v18, 1LL, &v15);
    BasicInstance = icu::Transliterator::createBasicInstance(v18, 0LL, v12);
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v18);
    if (!BasicInstance) {
      *a2 = U_INTERNAL_TRANSLITERATOR_ERROR;
    }
    icu::UVector::adoptElement((icu::UVector *)v16, BasicInstance, a2);
  }

uint64_t sub_18099FF40(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t sub_18099FF54(uint64_t a1, icu::UnicodeString *this, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  unsigned int v10 = *((unsigned __int16 *)this + 4);
  int v11 = (__int16)v10;
  unsigned int v12 = v10 >> 5;
  if (v11 >= 0) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = *((unsigned int *)this + 3);
  }
  icu::UnicodeString::doReplace((uint64_t)this, 0LL, v13, (uint64_t)L"Any", 0, 3LL);
  unsigned int v14 = *(unsigned __int16 *)(a3 + 8);
  if ((v14 & 1) != 0)
  {
    icu::UnicodeString::unBogus(a3);
  }

  else
  {
    if ((v14 & 0x8000u) == 0) {
      unsigned int v15 = v14 >> 5;
    }
    else {
      unsigned int v15 = *(_DWORD *)(a3 + 12);
    }
    if (v15) {
      *(_WORD *)(a3 + 8) &= 0x1Fu;
    }
  }

  unsigned int v16 = *(unsigned __int16 *)(a4 + 8);
  if ((v16 & 1) != 0)
  {
    icu::UnicodeString::unBogus(a4);
  }

  else
  {
    if ((v16 & 0x8000u) == 0) {
      unsigned int v17 = v16 >> 5;
    }
    else {
      unsigned int v17 = *(_DWORD *)(a4 + 12);
    }
    if (v17) {
      *(_WORD *)(a4 + 8) &= 0x1Fu;
    }
  }

  unsigned int v18 = *(unsigned __int16 *)(a1 + 8);
  int v19 = (__int16)v18;
  int32_t v20 = v18 >> 5;
  if (v19 >= 0) {
    int32_t v21 = v20;
  }
  else {
    int32_t v21 = *(_DWORD *)(a1 + 12);
  }
  uint64_t v22 = icu::UnicodeString::doIndexOf(a1, 0x2Du, 0, v21);
  unsigned int v23 = *(unsigned __int16 *)(a1 + 8);
  int v24 = (__int16)v23;
  int32_t v25 = v23 >> 5;
  if (v24 >= 0) {
    int32_t v26 = v25;
  }
  else {
    int32_t v26 = *(_DWORD *)(a1 + 12);
  }
  uint64_t v27 = icu::UnicodeString::doIndexOf(a1, 0x2Fu, 0, v26);
  if ((v27 & 0x80000000) != 0)
  {
    else {
      uint64_t v27 = *(unsigned __int16 *)(a1 + 8) >> 5;
    }
  }

  *a5 = 0;
  if ((v22 & 0x80000000) != 0)
  {
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)a1 + 24LL))(a1, 0LL, v27, a3);
LABEL_34:
    unsigned int v28 = *(unsigned __int16 *)(a1 + 8);
    int v29 = (__int16)v28;
    unsigned int v30 = v28 >> 5;
    if (v29 >= 0) {
      uint64_t v31 = v30;
    }
    else {
      uint64_t v31 = *(unsigned int *)(a1 + 12);
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24LL))(a1, v27, v31, a4);
    goto LABEL_44;
  }

  if ((int)v22 < (int)v27)
  {
    if ((_DWORD)v22)
    {
      (*(void (**)(uint64_t, void, uint64_t, icu::UnicodeString *))(*(void *)a1 + 24LL))( a1,  0LL,  v22,  this);
      *a5 = 1;
    }

    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)a1 + 24LL))( a1,  (v22 + 1),  v27,  a3);
    goto LABEL_34;
  }

  if ((int)v27 >= 1)
  {
    (*(void (**)(uint64_t, void, uint64_t, icu::UnicodeString *))(*(void *)a1 + 24LL))(a1, 0LL, v27, this);
    *a5 = 1;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24LL))(a1, v27, v22, a4);
  unsigned int v33 = *(unsigned __int16 *)(a1 + 8);
  int v34 = (__int16)v33;
  unsigned int v35 = v33 >> 5;
  if (v34 >= 0) {
    uint64_t v36 = v35;
  }
  else {
    uint64_t v36 = *(unsigned int *)(a1 + 12);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)a1 + 24LL))( a1,  (v22 + 1),  v36,  a3);
LABEL_44:
  unsigned int v37 = *(unsigned __int16 *)(a4 + 8);
  int v38 = (__int16)v37;
  int v39 = v37 >> 5;
  if (v38 < 0) {
    int v39 = *(_DWORD *)(a4 + 12);
  }
  if (v39 >= 1) {
    return icu::UnicodeString::doReplace(a4, 0LL, 1LL, 0LL, 0, 0LL);
  }
  return result;
}

uint64_t sub_1809A0214(UChar **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  icu::UnicodeString::operator=((UChar **)a4, a1);
  unsigned int v7 = *(unsigned __int16 *)(a4 + 8);
  int v8 = (__int16)v7;
  unsigned int v9 = v7 >> 5;
  if (v8 < 0) {
    unsigned int v9 = *(_DWORD *)(a4 + 12);
  }
  if (!v9)
  {
    icu::UnicodeString::unBogus(a4);
    unsigned int v10 = *(unsigned __int16 *)(a4 + 8);
    int v11 = (__int16)v10;
    unsigned int v12 = v10 >> 5;
    if (v11 >= 0) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = *(unsigned int *)(a4 + 12);
    }
    icu::UnicodeString::doReplace(a4, 0LL, v13, (uint64_t)L"Any", 0, 3LL);
  }

  __int16 v31 = 45;
  uint64_t v14 = icu::UnicodeString::doAppend(a4, (uint64_t)&v31, 0, 1LL);
  unsigned int v15 = *(unsigned __int16 *)(a2 + 8);
  int v16 = (__int16)v15;
  unsigned int v17 = v15 >> 5;
  if (v16 >= 0) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = *(unsigned int *)(a2 + 12);
  }
  icu::UnicodeString::doAppend(v14, (const icu::UnicodeString *)a2, 0, v18);
  unsigned int v19 = *(unsigned __int16 *)(a3 + 8);
  int v20 = (__int16)v19;
  unsigned int v21 = v19 >> 5;
  if (v20 < 0) {
    unsigned int v21 = *(_DWORD *)(a3 + 12);
  }
  if (v21)
  {
    __int16 v32 = 47;
    uint64_t v22 = icu::UnicodeString::doAppend(a4, (uint64_t)&v32, 0, 1LL);
    unsigned int v23 = *(unsigned __int16 *)(a3 + 8);
    int v24 = (__int16)v23;
    unsigned int v25 = v23 >> 5;
    if (v24 >= 0) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = *(unsigned int *)(a3 + 12);
    }
    icu::UnicodeString::doAppend(v22, (const icu::UnicodeString *)a3, 0, v26);
  }

  __int16 v33 = 0;
  uint64_t result = icu::UnicodeString::doAppend(a4, (uint64_t)&v33, 0, 1LL);
  unsigned int v28 = *(unsigned __int16 *)(a4 + 8);
  else {
    unsigned int v29 = v28 >> 5;
  }
  int v30 = v29 - 1;
  if ((v28 & 1) != 0 && v29 == 1) {
    return icu::UnicodeString::unBogus(a4);
  }
  if (v29 > v30)
  {
    if (v30 > 1023)
    {
      *(_WORD *)(a4 + 8) = v28 | 0xFFE0;
      *(_DWORD *)(a4 + 12) = v30;
    }

    else
    {
      *(_WORD *)(a4 + 8) = *(_WORD *)(a4 + 8) & 0x1F | (32 * v30);
    }
  }

  return result;
}

void sub_1809A03B8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  if (*a4 <= 0)
  {
    unsigned int v8 = atomic_load(&dword_18C535B10);
    if (v8 == 2 || !icu::umtx_initImplPreInit(&dword_18C535B10))
    {
      if (dword_18C535B14 >= 1)
      {
        *a4 = dword_18C535B14;
        return;
      }
    }

    else
    {
      sub_1809A05C8(a4);
      dword_18C535B14 = *a4;
      icu::umtx_initImplPostInit(&dword_18C535B10);
    }

    if (*a4 <= 0)
    {
      if (a3)
      {
        unsigned int v9 = *(unsigned __int16 *)(a1 + 8);
        unsigned int v10 = *(unsigned __int16 *)(a2 + 8);
        if ((v10 & 1) != 0)
        {
          int v16 = (v9 & 1) == 0;
        }

        else
        {
          int v11 = (__int16)v9;
          int v12 = v9 >> 5;
          if (v11 >= 0) {
            int v13 = v12;
          }
          else {
            int v13 = *(_DWORD *)(a1 + 12);
          }
          if ((v10 & 0x8000u) == 0) {
            int v14 = v10 >> 5;
          }
          else {
            int v14 = *(_DWORD *)(a2 + 12);
          }
          if ((v10 & 2) != 0) {
            uint64_t v15 = a2 + 10;
          }
          else {
            uint64_t v15 = *(void *)(a2 + 24);
          }
          int v16 = icu::UnicodeString::doCaseCompare( a1,  0,  v13,  v15,  v14 & (v14 >> 31),  v14 & ~(v14 >> 31),  0);
        }

        BOOL v17 = v16 == 0;
      }

      else
      {
        BOOL v17 = 1;
      }

      umtx_lock((icu::UMutex *)&unk_18C4498F0);
      int v20 = (icu::UnicodeString *)icu::UMemory::operator new(v19, (icu::UMemory *)0x40, v18);
      if (!v20) {
        goto LABEL_32;
      }
      uint64_t v21 = (uint64_t)v20;
      icu::UnicodeString::UnicodeString(v20, (UChar **)a2);
      uint64_t v22 = *(void *)qword_18C535B08;
      int v24 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)qword_18C535B08, (icu::UMemory *)0x40, v23);
      uint64_t v25 = (uint64_t)v24;
      if (v24) {
        icu::UnicodeString::UnicodeString(v24, (UChar **)a1);
      }
      uhash_put(v22, v25, v21, a4);
      if (v17) {
        goto LABEL_33;
      }
      unsigned int v28 = (icu::UnicodeString *)icu::UMemory::operator new(v27, (icu::UMemory *)0x40, v26);
      if (v28)
      {
        uint64_t v29 = (uint64_t)v28;
        icu::UnicodeString::UnicodeString(v28, (UChar **)a1);
        uint64_t v30 = *(void *)qword_18C535B08;
        __int16 v32 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)qword_18C535B08, (icu::UMemory *)0x40, v31);
        uint64_t v33 = (uint64_t)v32;
        if (v32) {
          icu::UnicodeString::UnicodeString(v32, (UChar **)a2);
        }
        uhash_put(v30, v33, v29, a4);
      }

      else
      {
LABEL_32:
        *a4 = 7;
      }

int32x2_t *sub_1809A05C8(int *a1)
{
  uint64_t result = (int32x2_t *)icu::UMemory::operator new(v3, (icu::UMemory *)0x58, v2);
  if (result)
  {
    unsigned int v5 = (uint64_t *)result;
    *uint64_t result = 0LL;
    if (*a1 <= 0)
    {
      int v6 = result + 1;
      uhash_init( result + 1,  (uint64_t)uhash_hashCaselessUnicodeString,  (uint64_t)uhash_compareCaselessUnicodeString,  0LL,  a1);
      if (*a1 <= 0)
      {
        *unsigned int v5 = (uint64_t)v6;
        uhash_setKeyDeleter((uint64_t)(v5 + 1), (uint64_t)uprv_deleteUObject);
      }
    }

    qword_18C535B08 = (uint64_t)v5;
    return (int32x2_t *)uhash_setValueDeleter(*v5, (uint64_t)uprv_deleteUObject);
  }

  else
  {
    qword_18C535B08 = 0LL;
    *a1 = 7;
  }

  return result;
}

void sub_1809A0694()
{
  v0 = (void *)qword_18C535B08;
  if (qword_18C535B08)
  {
    if (*(void *)qword_18C535B08) {
      uhash_close(*(_BYTE **)qword_18C535B08);
    }
    icu::UMemory::operator delete(v0);
    qword_18C535B08 = 0LL;
  }

  atomic_store(0, &dword_18C535B10);
}

void *sub_1809A06DC(void *a1)
{
  *a1 = &off_18972BE28;
  unint64_t v2 = (void *)a1[1];
  if (v2) {
    uprv_free(v2);
  }
  return a1;
}

void sub_1809A0714(void *a1)
{
  *a1 = &off_18972BE28;
  unint64_t v2 = (void *)a1[1];
  if (v2) {
    uprv_free(v2);
  }
  icu::UMemory::operator delete(a1);
}

uint64_t *sub_1809A074C(uint64_t a1, _DWORD *a2)
{
  unint64_t v2 = (uint64_t *)*a2;
  unsigned int v7 = icu::UMemory::operator new(v2, (icu::UMemory *)0x18, (unint64_t)a2);
  int v3 = v7;
  if (!v7)
  {
    *a2 = 7;
    return v3;
  }

  *unsigned int v7 = (uint64_t)&off_18972BE28;
  v7[1] = 0LL;
  *((_DWORD *)v7 + 4) = 0;
  *((_BYTE *)v7 + 20) = 0;
  unsigned int v8 = *(unsigned __int16 *)(a1 + 8);
  int v9 = (__int16)v8;
  int32_t v10 = v8 >> 5;
  if (v9 >= 0) {
    int32_t v11 = v10;
  }
  else {
    int32_t v11 = *(_DWORD *)(a1 + 12);
  }
  int v12 = (UChar *)uprv_malloc(2LL * (v11 + 1));
  v3[1] = (uint64_t)v12;
  if (!v12)
  {
    *a2 = 7;
    (*(void (**)(uint64_t *))(*v3 + 8))(v3);
    return 0LL;
  }

  __int16 v13 = *(_WORD *)(a1 + 8);
  if ((v13 & 0x11) != 0)
  {
    int v14 = 0LL;
  }

  else if ((v13 & 2) != 0)
  {
    int v14 = (const UChar *)(a1 + 10);
  }

  else
  {
    int v14 = *(const UChar **)(a1 + 24);
  }

  u_strncpy(v12, v14, v11);
  *(_WORD *)(v3[1] + 2LL * v11) = 0;
  *((_DWORD *)v3 + 4) = 0;
  return v3;
}

void *icu::TimeZoneFormat::getStaticClassID(icu::TimeZoneFormat *this)
{
  return &unk_18C535B18;
}

void *icu::TimeZoneFormat::getDynamicClassID(icu::TimeZoneFormat *this)
{
  return &unk_18C535B18;
}

icu::TimeZoneFormat *icu::TimeZoneFormat::TimeZoneFormat( icu::TimeZoneFormat *this, char **a2, UErrorCode *a3)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  int v6 = (void *)icu::Format::Format((uint64_t)this);
  *int v6 = off_18972BE48;
  icu::Locale::Locale((icu::Locale *)(v6 + 41), (uint64_t)a2);
  *((_OWORD *)this + 35) = 0u;
  *((void *)this + 72) = off_18971B688;
  *((_WORD *)this + 292) = 2;
  unsigned int v7 = (char *)this + 1024;
  uint64_t v8 = 640LL;
  do
  {
    int v9 = (char *)this + v8;
    *(void *)int v9 = off_18971B688;
    *((_WORD *)v9 + 4) = 2;
    v8 += 64LL;
  }

  while (v9 + 64 != v7);
  *((void *)this + 133) = off_18971B688;
  *((_WORD *)this + 536) = 2;
  *((_DWORD *)this + 282) = 0;
  *((void *)this + 142) = off_18971B688;
  *((_WORD *)this + 572) = 2;
  *((void *)this + 150) = off_18971B688;
  *((_WORD *)this + 604) = 2;
  *((void *)this + 165) = 0LL;
  *((_OWORD *)this + 79) = 0u;
  *((_OWORD *)this + 80) = 0u;
  *((_OWORD *)this + 81) = 0u;
  int v11 = strlen((const char *)this + 354);
  if (v11)
  {
    int v12 = (char *)this + 552;
    if (v11 > 3) {
      *int v12 = 0;
    }
    else {
      strcpy(v12, (const char *)this + 354);
    }
LABEL_12:
    *((void *)this + 70) = icu::TimeZoneNames::createInstance((icu::TimeZoneNames *)a2, (const icu::Locale *)a3, v10);
    if (*(int *)a3 <= 0)
    {
      uint64_t v14 = ures_open("icudt74l-zone", a2[5], (int *)a3);
      uint64_t v15 = ures_getByKeyWithFallback(v14, "zoneStrings", 0LL, a3);
      int v16 = 0LL;
      BOOL v17 = 0LL;
      if (*(int *)a3 <= 0)
      {
        uint64_t v18 = v15;
        LODWORD(v47[0]) = 0;
        StringByKeyWithFallback = ures_getStringByKeyWithFallback(v15, "gmtFormat", (int *)v47, a3);
        if (SLODWORD(v47[0]) <= 0) {
          int v16 = 0LL;
        }
        else {
          int v16 = (const __int16 *)StringByKeyWithFallback;
        }
        int v20 = ures_getStringByKeyWithFallback(v18, "gmtZeroFormat", (int *)v47, a3);
        if (SLODWORD(v47[0]) >= 1)
        {
          __int16 v45 = v20;
          icu::UnicodeString::setTo((icu::TimeZoneFormat *)((char *)this + 1064), 1, &v45, v47[0]);
        }

        BOOL v17 = ures_getStringByKeyWithFallback(v18, "hourFormat", (int *)v47, a3);
        int v21 = v47[0];
        ures_close(v18);
        ures_close(v14);
        if (v21 <= 0) {
          BOOL v17 = 0LL;
        }
      }

      uint64_t v22 = L"GMT{0}";
      if (v16) {
        uint64_t v22 = v16;
      }
      __int128 v44 = v22;
      icu::UnicodeString::UnicodeString(v47, 1LL, &v44);
      icu::TimeZoneFormat::initGMTPattern((uint64_t)this, (const icu::UnicodeString *)v47, a3);
      icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)v47);
      if (!v17) {
        goto LABEL_26;
      }
      int v24 = u_strchr(v17, 0x3Bu);
      if (!v24) {
        goto LABEL_26;
      }
      uint64_t v25 = v24;
      LODWORD(v47[0]) = 0;
      __int128 v43 = v17;
      icu::UnicodeString::setTo( (icu::TimeZoneFormat *)((char *)this + 640),  0,  &v43,  (unint64_t)((char *)v24 - (char *)v17) >> 1);
      uint64_t v42 = v25 + 1;
      icu::UnicodeString::setTo((icu::TimeZoneFormat *)((char *)this + 768), 1, &v42, -1);
      icu::TimeZoneFormat::expandOffsetPattern( (icu::TimeZoneFormat *)((char *)this + 640),  (icu::TimeZoneFormat *)((char *)this + 704),  (icu::UnicodeString *)v47,  v26);
      icu::TimeZoneFormat::expandOffsetPattern( (icu::TimeZoneFormat *)((char *)this + 768),  (icu::TimeZoneFormat *)((char *)this + 832),  (icu::UnicodeString *)v47,  v27);
      icu::TimeZoneFormat::truncateOffsetPattern( (icu::TimeZoneFormat *)((char *)this + 640),  (icu::TimeZoneFormat *)((char *)this + 896),  (icu::UnicodeString *)v47,  v28);
      icu::TimeZoneFormat::truncateOffsetPattern( (icu::TimeZoneFormat *)((char *)this + 768),  (icu::TimeZoneFormat *)((char *)this + 960),  (icu::UnicodeString *)v47,  v29);
      if (SLODWORD(v47[0]) >= 1)
      {
LABEL_26:
        __int16 v41 = (const UChar *)"+";
        icu::UnicodeString::setTo((icu::TimeZoneFormat *)((char *)this + 896), 1, &v41, -1);
        uint64_t v40 = (const UChar *)L"+H:mm";
        icu::UnicodeString::setTo((icu::TimeZoneFormat *)((char *)this + 640), 1, &v40, -1);
        int v39 = (const UChar *)L"+H:mm:ss";
        icu::UnicodeString::setTo((icu::TimeZoneFormat *)((char *)this + 704), 1, &v39, -1);
        int v38 = (const UChar *)"-";
        icu::UnicodeString::setTo((icu::TimeZoneFormat *)((char *)this + 960), 1, &v38, -1);
        unsigned int v37 = (const UChar *)L"-H:mm";
        icu::UnicodeString::setTo((icu::TimeZoneFormat *)((char *)this + 768), 1, &v37, -1);
        uint64_t v36 = (const UChar *)L"-H:mm:ss";
        icu::UnicodeString::setTo((icu::TimeZoneFormat *)((char *)this + 832), 1, &v36, -1);
      }

      icu::TimeZoneFormat::initGMTOffsetPatterns(this, a3);
      Instance = icu::NumberingSystem::createInstance((icu::NumberingSystem *)a2, a3, v30);
      if (Instance)
      {
        __int16 v32 = Instance;
        if (icu::NumberingSystem::isAlgorithmic(Instance)
          || (memset(v47, 0, sizeof(v47)),
              (*(void (**)(_OWORD *__return_ptr, icu::NumberingSystem *))(*(void *)v32 + 24LL))(v47, v32),
              int v33 = icu::TimeZoneFormat::toCodePoints( (icu::TimeZoneFormat *)v47,  (icu::TimeZoneFormat *)((char *)this + 1024),  (int *)0xA),  icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)v47),  !v33))
        {
          *((void *)this + 132) = 0x3900000038LL;
          *(_OWORD *)unsigned int v7 = *(_OWORD *)L"0";
          *((_OWORD *)this + 65) = *(_OWORD *)L"4";
        }

        (*(void (**)(icu::NumberingSystem *))(*(void *)v32 + 8LL))(v32);
      }

      else
      {
        *((void *)this + 132) = 0x3900000038LL;
        *(_OWORD *)unsigned int v7 = *(_OWORD *)L"0";
        *((_OWORD *)this + 65) = *(_OWORD *)L"4";
      }
    }

    return this;
  }

  memset((char *)v47 + 8, 0, 56);
  v46[1] = 0LL;
  *(void *)&v47[0] = (char *)v47 + 13;
  DWORD2(v47[0]) = 40;
  v46[0] = 0LL;
  icu::CharStringByteSink::CharStringByteSink(v46, (uint64_t)v47);
  ulocimp_addLikelySubtags(*((void *)this + 46), v46, a3);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v46);
  int Country = uloc_getCountry(*(uint64_t *)&v47[0], (char *)this + 552, 4, (int *)a3);
  if (*(int *)a3 <= 0)
  {
    *((_BYTE *)this + Country + 552) = 0;
    if (BYTE12(v47[0])) {
      uprv_free(*(void **)&v47[0]);
    }
    goto LABEL_12;
  }

  if (BYTE12(v47[0])) {
    uprv_free(*(void **)&v47[0]);
  }
  return this;
}

uint64_t icu::TimeZoneFormat::initGMTPattern(uint64_t this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (*(int *)a3 <= 0)
  {
    unsigned int v5 = (UChar **)this;
    if (*((__int16 *)a2 + 4) < 0)
    {
      int v7 = *((_DWORD *)a2 + 3);
      int v6 = v7 & (v7 >> 31);
    }

    else
    {
      int v6 = 0;
      int v7 = *((unsigned __int16 *)a2 + 4) >> 5;
    }

    this = icu::UnicodeString::indexOf((uint64_t)a2, (uint64_t)L"{0}mm", 0, 3, v6, v7 - v6);
    if ((this & 0x80000000) != 0)
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }

    else
    {
      int32_t v8 = this;
      icu::UnicodeString::copyFrom(v5 + 72, (UChar **)a2, 0);
      icu::UnicodeString::tempSubString(a2, 0, v8, (icu::UnicodeString *)v13);
      icu::TimeZoneFormat::unquote((icu::TimeZoneFormat *)v13, (const icu::UnicodeString *)(v5 + 142), v9);
      icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v13);
      icu::UnicodeString::tempSubString(a2, v8 + 3, 0x7FFFFFFF, (icu::UnicodeString *)v13);
      icu::TimeZoneFormat::unquote((icu::TimeZoneFormat *)v13, (const icu::UnicodeString *)(v5 + 150), v11);
      return (uint64_t)icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v13);
    }
  }

  return this;
}

const icu::UnicodeString *icu::TimeZoneFormat::expandOffsetPattern( icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  icu::UnicodeString::setToBogus(a2);
  if (*(int *)a3 <= 0)
  {
    if (*((__int16 *)this + 4) < 0)
    {
      int v8 = *((_DWORD *)this + 3);
      int v7 = v8 & (v8 >> 31);
    }

    else
    {
      int v7 = 0;
      int v8 = *((unsigned __int16 *)this + 4) >> 5;
    }

    int32_t v9 = icu::UnicodeString::indexOf((uint64_t)this, (uint64_t)L"mm", 0, 2, v7, v8 - v7);
    if (v9 < 0)
    {
      *(_DWORD *)a3 = 1;
    }

    else
    {
      int32_t v10 = v9;
      __int128 v26 = 0u;
      __int128 v27 = 0u;
      uint64_t v29 = 0LL;
      __int128 v28 = 0u;
      uint64_t v25 = off_18971B688;
      LOWORD(v26) = 2;
      icu::UnicodeString::tempSubString(this, 0, v9, (icu::UnicodeString *)&v22);
      if ((v23 & 0x8000u) == 0) {
        int32_t v11 = v23 >> 5;
      }
      else {
        int32_t v11 = v24;
      }
      int IndexOf = icu::UnicodeString::doLastIndexOf((uint64_t)&v22, 0x48u, 0, v11);
      icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v22);
      if ((IndexOf & 0x80000000) == 0)
      {
        icu::UnicodeString::tempSubString(this, IndexOf + 1, v10 - (IndexOf + 1), (icu::UnicodeString *)&v22);
        icu::UnicodeString::operator=((icu::UnicodeString *)&v25, (icu::UnicodeString *)&v22);
        icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v22);
      }

      int32_t v15 = v10 + 2;
      icu::UnicodeString::tempSubString(this, 0, v15, (icu::UnicodeString *)&v22);
      icu::UnicodeString::copyFrom((UChar **)a2, &v22, 0);
      icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v22);
      if ((v26 & 0x8000u) == 0LL) {
        uint64_t v17 = (unsigned __int16)v26 >> 5;
      }
      else {
        uint64_t v17 = DWORD1(v26);
      }
      icu::UnicodeString::doAppend((uint64_t)a2, (const icu::UnicodeString *)&v25, 0, v17);
      icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)L"ss", 0, 0xFFFFFFFFLL);
      icu::UnicodeString::tempSubString(this, v15, 0x7FFFFFFF, (icu::UnicodeString *)&v22);
      if ((v23 & 0x8000u) == 0) {
        uint64_t v18 = v23 >> 5;
      }
      else {
        uint64_t v18 = v24;
      }
      icu::UnicodeString::doAppend((uint64_t)a2, (const icu::UnicodeString *)&v22, 0, v18);
      icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v22);
      icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v25);
    }
  }

  return a2;
}

icu::UnicodeString *icu::TimeZoneFormat::truncateOffsetPattern( icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  unsigned int v5 = a2;
  uint64_t v26 = *MEMORY[0x1895F89C0];
  icu::UnicodeString::setToBogus(a2);
  if (*(int *)a3 <= 0)
  {
    if (*((__int16 *)this + 4) < 0)
    {
      int v8 = *((_DWORD *)this + 3);
      int v7 = v8 & (v8 >> 31);
    }

    else
    {
      int v7 = 0;
      int v8 = *((unsigned __int16 *)this + 4) >> 5;
    }

    int32_t v9 = icu::UnicodeString::indexOf((uint64_t)this, (uint64_t)L"mm", 0, 2, v7, v8 - v7);
    if ((v9 & 0x80000000) == 0)
    {
      int32_t v10 = v9;
      int v22 = 4718664;
      icu::UnicodeString::tempSubString(this, 0, v9, (icu::UnicodeString *)&v23);
      if ((__int16)v24 < 0)
      {
        int v12 = v25;
        int v11 = v25 & (v25 >> 31);
      }

      else
      {
        int v11 = 0;
        int v12 = v24 >> 5;
      }

      int IndexOf = icu::UnicodeString::lastIndexOf((uint64_t)&v23, (uint64_t)&v22, 0, 2, v11, v12 - v11);
      icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v23);
      if ((IndexOf & 0x80000000) == 0)
      {
        int32_t v15 = IndexOf + 2;
LABEL_16:
        icu::UnicodeString::tempSubString(this, 0, v15, (icu::UnicodeString *)&v23);
        unsigned int v5 = icu::UnicodeString::copyFrom((UChar **)v5, &v23, 0);
        icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v23);
        return v5;
      }

      icu::UnicodeString::tempSubString(this, 0, v10, (icu::UnicodeString *)&v23);
      if ((__int16)v24 < 0)
      {
        int v17 = v25;
        int v16 = v25 & (v25 >> 31);
      }

      else
      {
        int v16 = 0;
        int v17 = v24 >> 5;
      }

      int v18 = icu::UnicodeString::doLastIndexOf((uint64_t)&v23, 0x48u, v16, v17 - v16);
      icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v23);
      if ((v18 & 0x80000000) == 0)
      {
        int32_t v15 = v18 + 1;
        goto LABEL_16;
      }
    }

    *(_DWORD *)a3 = 1;
  }

  return v5;
}

icu::UVector *icu::TimeZoneFormat::initGMTOffsetPatterns(icu::UVector *this, UErrorCode *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = 0LL;
  uint64_t v5 = (uint64_t)this + 640;
  do
  {
    if (v4 <= 5)
    {
      this = icu::TimeZoneFormat::parseOffsetPattern(v5, dword_180A3D8CC[v4], (int *)a2);
      *(void *)(v3 + 8 * v4 + 1264) = this;
    }

    ++v4;
    v5 += 64LL;
  }

  while (v4 != 6);
  return this;
}

uint64_t icu::TimeZoneFormat::toCodePoints(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, int *a3)
{
  LODWORD(v3) = (_DWORD)a3;
  uint64_t v7 = 0LL;
  if (icu::UnicodeString::countChar32(this, 0, 0x7FFFFFFF) == (_DWORD)a3)
  {
    if ((int)v3 < 1)
    {
      return 1LL;
    }

    else
    {
      int v8 = 0;
      uint64_t v3 = v3;
      uint64_t v7 = 1LL;
      do
      {
        *(_DWORD *)a2 = icu::UnicodeString::char32At(v6, this, v8);
        a2 = (const icu::UnicodeString *)((char *)a2 + 4);
        int v8 = icu::UnicodeString::moveIndex32(this, v8, 1);
        --v3;
      }

      while (v3);
    }
  }

  return v7;
}

uint64_t icu::TimeZoneFormat::TimeZoneFormat(icu::TimeZoneFormat *this, const icu::TimeZoneFormat *a2)
{
  uint64_t v4 = (void *)icu::Format::Format((uint64_t)this, (uint64_t)a2);
  *uint64_t v4 = off_18972BE48;
  icu::Locale::Locale((icu::Locale *)(v4 + 41));
  *((_OWORD *)this + 35) = 0u;
  *((void *)this + 72) = off_18971B688;
  *((_WORD *)this + 292) = 2;
  uint64_t v5 = 640LL;
  do
  {
    int v6 = (char *)this + v5;
    *(void *)int v6 = off_18971B688;
    *((_WORD *)v6 + 4) = 2;
    v5 += 64LL;
  }

  while (v6 + 64 != (char *)this + 1024);
  *((void *)this + 133) = off_18971B688;
  *((_WORD *)this + 536) = 2;
  *((void *)this + 142) = off_18971B688;
  *((_WORD *)this + 572) = 2;
  *((void *)this + 150) = off_18971B688;
  *((_WORD *)this + 604) = 2;
  *((void *)this + 165) = 0LL;
  *((_OWORD *)this + 79) = 0u;
  *((_OWORD *)this + 80) = 0u;
  *((_OWORD *)this + 81) = 0u;
  return icu::TimeZoneFormat::operator=((uint64_t)this, (uint64_t)a2);
}

uint64_t icu::TimeZoneFormat::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a1 + 560);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
    uint64_t v5 = *(void *)(a1 + 568);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
    *(void *)(a1 + 568) = 0LL;
    uint64_t v6 = *(void *)(a1 + 1320);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
    *(void *)(a1 + 1320) = 0LL;
    icu::Locale::operator=((icu::Locale *)(a1 + 328), a2 + 328);
    *(_DWORD *)(a1 + 552) = *(_DWORD *)(a2 + 552);
    *(void *)(a1 + 560) = (*(uint64_t (**)(void))(**(void **)(a2 + 560) + 32LL))(*(void *)(a2 + 560));
    uint64_t v7 = *(void *)(a2 + 568);
    if (v7) {
      *(void *)(a1 + 568) = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 32LL))(v7);
    }
    icu::UnicodeString::operator=((UChar **)(a1 + 576), (UChar **)(a2 + 576));
    icu::UnicodeString::operator=((UChar **)(a1 + 1136), (UChar **)(a2 + 1136));
    icu::UnicodeString::operator=((UChar **)(a1 + 1200), (UChar **)(a2 + 1200));
    UErrorCode v14 = U_ZERO_ERROR;
    uint64_t v8 = 640LL;
    uint64_t v9 = 1264LL;
    do
    {
      icu::UnicodeString::operator=((UChar **)(a1 + v8), (UChar **)(a2 + v8));
      uint64_t v10 = *(void *)(a1 + v9);
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
      }
      *(void *)(a1 + v9) = 0LL;
      v8 += 64LL;
      v9 += 8LL;
    }

    while (v8 != 1024);
    icu::TimeZoneFormat::initGMTOffsetPatterns((icu::UVector *)a1, &v14);
    icu::UnicodeString::operator=((UChar **)(a1 + 1064), (UChar **)(a2 + 1064));
    __int128 v11 = *(_OWORD *)(a2 + 1040);
    uint64_t v12 = *(void *)(a2 + 1056);
    *(_OWORD *)(a1 + 1024) = *(_OWORD *)(a2 + 1024);
    *(void *)(a1 + 1056) = v12;
    *(_OWORD *)(a1 + 1040) = v11;
    *(_DWORD *)(a1 + 1128) = *(_DWORD *)(a2 + 1128);
  }

  return a1;
}

void icu::TimeZoneFormat::~TimeZoneFormat(icu::TimeZoneFormat *this)
{
  *(void *)this = off_18972BE48;
  uint64_t v2 = *((void *)this + 70);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *((void *)this + 71);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  uint64_t v4 = *((void *)this + 165);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  for (uint64_t i = 1264LL; i != 1312; i += 8LL)
  {
    uint64_t v6 = *(void *)((char *)this + i);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  icu::UnicodeString::~UnicodeString((icu::TimeZoneFormat *)((char *)this + 1200));
  icu::UnicodeString::~UnicodeString((icu::TimeZoneFormat *)((char *)this + 1136));
  icu::UnicodeString::~UnicodeString((icu::TimeZoneFormat *)((char *)this + 1064));
  for (uint64_t j = 960LL; j != 576; j -= 64LL)
    icu::UnicodeString::~UnicodeString((icu::TimeZoneFormat *)((char *)this + j));
  icu::UnicodeString::~UnicodeString((icu::TimeZoneFormat *)((char *)this + 576));
  icu::Locale::~Locale((icu::TimeZoneFormat *)((char *)this + 328));
  icu::Format::~Format(this);
}

{
  void *v1;
  icu::TimeZoneFormat::~TimeZoneFormat(this);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::TimeZoneFormat::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result = icu::Locale::operator==(a1 + 328, a2 + 328);
  if (!(_DWORD)result) {
    return result;
  }
  unsigned int v5 = *(unsigned __int16 *)(a1 + 584);
  if ((v5 & 1) != 0)
  {
    if ((*(_WORD *)(a2 + 584) & 1) == 0) {
      return 0LL;
    }
  }

  else
  {
    if ((v5 & 0x8000) != 0) {
      int v6 = *(_DWORD *)(a1 + 588);
    }
    else {
      int v6 = v5 >> 5;
    }
    uint64_t result = 0LL;
    unsigned int v7 = *(unsigned __int16 *)(a2 + 584);
    if ((v7 & 0x8000u) == 0) {
      unsigned int v8 = v7 >> 5;
    }
    else {
      unsigned int v8 = *(_DWORD *)(a2 + 588);
    }
    if ((v7 & 1) != 0) {
      return result;
    }
    if (v6 != v8) {
      return result;
    }
    uint64_t result = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 576), (const icu::UnicodeString *)(a2 + 576), v6);
    if (!(_DWORD)result) {
      return result;
    }
  }

  unsigned int v9 = *(unsigned __int16 *)(a1 + 1072);
  if ((v9 & 1) != 0)
  {
    if ((*(_WORD *)(a2 + 1072) & 1) == 0) {
      return 0LL;
    }
    goto LABEL_26;
  }

  if ((v9 & 0x8000) != 0) {
    int v10 = *(_DWORD *)(a1 + 1076);
  }
  else {
    int v10 = v9 >> 5;
  }
  uint64_t result = 0LL;
  unsigned int v11 = *(unsigned __int16 *)(a2 + 1072);
  if ((v11 & 0x8000u) == 0) {
    unsigned int v12 = v11 >> 5;
  }
  else {
    unsigned int v12 = *(_DWORD *)(a2 + 1076);
  }
  if ((v11 & 1) == 0 && v10 == v12)
  {
    uint64_t result = icu::UnicodeString::doEquals( (icu::UnicodeString *)(a1 + 1064),  (const icu::UnicodeString *)(a2 + 1064),  v10);
    if ((_DWORD)result)
    {
LABEL_26:
      uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 560) + 24LL))( *(void *)(a1 + 560),  *(void *)(a2 + 560));
      if (!(_DWORD)result) {
        return result;
      }
      unint64_t v13 = 0LL;
      uint64_t v14 = a1 + 640;
      uint64_t v15 = a2 + 640;
      do
      {
        unsigned int v16 = *(unsigned __int16 *)(v14 + 8);
        if ((v16 & 1) != 0)
        {
          int v18 = *(_WORD *)(v15 + 8) & 1;
        }

        else
        {
          if ((v16 & 0x8000) != 0) {
            int v17 = *(_DWORD *)(v14 + 12);
          }
          else {
            int v17 = v16 >> 5;
          }
          uint64_t result = 0LL;
          unsigned int v19 = *(unsigned __int16 *)(v15 + 8);
          if ((v19 & 0x8000u) == 0) {
            unsigned int v20 = v19 >> 5;
          }
          else {
            unsigned int v20 = *(_DWORD *)(v15 + 12);
          }
          if ((v19 & 1) != 0 || v17 != v20) {
            return result;
          }
          int v18 = icu::UnicodeString::doEquals((icu::UnicodeString *)v14, (const icu::UnicodeString *)v15, v17);
        }

        if (v13 > 4) {
          break;
        }
        ++v13;
        v14 += 64LL;
        v15 += 64LL;
      }

      while ((v18 & 1) != 0);
      if (v18)
      {
        unint64_t v21 = 0LL;
        do
        {
          int v22 = *(_DWORD *)(a1 + 1024 + 4 * v21);
          int v23 = *(_DWORD *)(a2 + 1024 + 4 * v21);
          uint64_t result = v22 == v23;
          if (v21 > 8) {
            break;
          }
          ++v21;
        }

        while (v22 == v23);
        return result;
      }

      return 0LL;
    }
  }

  return result;
}

icu::TimeZoneFormat *icu::TimeZoneFormat::clone@<X0>( icu::TimeZoneFormat *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::TimeZoneFormat *)icu::UMemory::operator new(a3, (icu::UMemory *)0x530, a2);
  if (result) {
    return (icu::TimeZoneFormat *)icu::TimeZoneFormat::TimeZoneFormat(result, this);
  }
  return result;
}

icu::TimeZoneFormat *icu::TimeZoneFormat::createInstance@<X0>( char **this@<X0>, UErrorCode *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::TimeZoneFormat *)icu::UMemory::operator new(a3, (icu::UMemory *)0x530, (unint64_t)a2);
  if (result)
  {
    uint64_t result = icu::TimeZoneFormat::TimeZoneFormat(result, this, a2);
    if (*(int *)a2 >= 1)
    {
      (*(void (**)(icu::TimeZoneFormat *))(*(void *)result + 8LL))(result);
      return 0LL;
    }
  }

  return result;
}

uint64_t icu::TimeZoneFormat::getTimeZoneNames(icu::TimeZoneFormat *this)
{
  return *((void *)this + 70);
}

uint64_t icu::TimeZoneFormat::adoptTimeZoneNames(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 560);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  *(void *)(a1 + 560) = a2;
  return result;
}

uint64_t icu::TimeZoneFormat::setTimeZoneNames(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 560);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32LL))(a2);
  *(void *)(a1 + 560) = result;
  return result;
}

uint64_t icu::TimeZoneFormat::setDefaultParseOptions(uint64_t this, int a2)
{
  *(_DWORD *)(this + 1128) = a2;
  return this;
}

uint64_t icu::TimeZoneFormat::getDefaultParseOptions(icu::TimeZoneFormat *this)
{
  return *((unsigned int *)this + 282);
}

icu::UnicodeString *icu::TimeZoneFormat::getGMTPattern(UChar **this, UChar **a2)
{
  return icu::UnicodeString::copyFrom(a2, this + 72, 0);
}

icu::UnicodeString *icu::TimeZoneFormat::getGMTOffsetPattern(uint64_t a1, unsigned int a2, UChar **this)
{
  return icu::UnicodeString::copyFrom(this, (UChar **)(a1 + ((unint64_t)a2 << 6) + 640), 0);
}

icu::UVector *icu::TimeZoneFormat::setGMTOffsetPattern( icu::UVector *result, unsigned int a2, icu::UnicodeString *this, int *a4)
{
  if (*a4 > 0) {
    return result;
  }
  uint64_t v7 = (uint64_t)result;
  uint64_t v8 = a2;
  unsigned int v9 = (char *)result + 64 * (unint64_t)a2;
  int v10 = (UChar **)(v9 + 640);
  unsigned int v11 = *((unsigned __int16 *)this + 4);
  if ((v11 & 1) != 0)
  {
    if ((*((_WORD *)v9 + 324) & 1) != 0) {
      return result;
    }
    goto LABEL_14;
  }

  int v12 = (__int16)v11;
  int v13 = v11 >> 5;
  if (v12 >= 0) {
    int v14 = v13;
  }
  else {
    int v14 = *((_DWORD *)this + 3);
  }
  unsigned int v15 = *((unsigned __int16 *)v9 + 324);
  unsigned int v16 = *((_DWORD *)v9 + 163);
  if ((v15 & 0x8000u) == 0) {
    unsigned int v16 = v15 >> 5;
  }
  if ((v15 & 1) != 0
    || v14 != v16
    || (uint64_t result = (icu::UVector *)icu::UnicodeString::doEquals(this, (const icu::UnicodeString *)v10, v14),
        !(_DWORD)result))
  {
LABEL_14:
    if (a2 >= 6) {
      abort();
    }
    uint64_t result = icu::TimeZoneFormat::parseOffsetPattern((uint64_t)this, dword_180A3D8CC[a2], a4);
    if (result)
    {
      int v17 = result;
      icu::UnicodeString::copyFrom(v10, (UChar **)this, 0);
      int v18 = (icu::UVector **)(v7 + 8 * v8 + 1264);
      if (*v18) {
        (*(void (**)(icu::UVector *))(*(void *)*v18 + 8LL))(*v18);
      }
      *int v18 = v17;
      return (icu::UVector *)icu::TimeZoneFormat::checkAbuttingHoursAndMinutes(v7);
    }
  }

  return result;
}

icu::UVector *icu::TimeZoneFormat::parseOffsetPattern(uint64_t a1, unint64_t a2, int *a3)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  uint64_t v3 = (uint64_t *)*a3;
  unsigned int v6 = a2;
  uint64_t v8 = icu::UMemory::operator new(v3, (icu::UMemory *)0x28, a2);
  uint64_t v4 = (icu::UVector *)v8;
  if (!v8)
  {
    *a3 = 7;
    return v4;
  }

  unsigned int v39 = v6;
  icu::UVector::UVector((uint64_t)v8, (uint64_t)sub_1809A6204, 0LL, a3);
  memset(v42, 0, sizeof(v42));
  memset(v41, 0, sizeof(v41));
  icu::UnicodeString::UnicodeString(v41, v42, 0LL, 32LL);
  unint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  BOOL v12 = 0;
  int v13 = 0;
  int v14 = 0;
  int v15 = 1;
  while (1)
  {
    int v16 = *(__int16 *)(a1 + 8);
    if (v16 < 0) {
      break;
    }
    unint64_t v17 = (unint64_t)*(unsigned __int16 *)(a1 + 8) >> 5;
LABEL_10:
    if (v17 <= v10)
    {
      int v19 = 0xFFFF;
    }

    else
    {
      if ((v16 & 2) != 0) {
        uint64_t v18 = a1 + 10;
      }
      else {
        uint64_t v18 = *(void *)(a1 + 24);
      }
      int v19 = *(unsigned __int16 *)(v18 + 2 * v10);
      if (v19 == 39)
      {
        if (v13)
        {
          __int16 v40 = 39;
          icu::UnicodeString::doAppend((uint64_t)v41, (uint64_t)&v40, 0, 1LL);
          int v13 = 0;
        }

        else
        {
          int v13 = 1;
          switch((int)v11)
          {
            case 0:
              break;
            case 1:
              goto LABEL_83;
            case 2:
            case 4:
              if (v15 != 2) {
                goto LABEL_83;
              }
LABEL_38:
              unint64_t v21 = (uint64_t *)*a3;
              if ((int)v21 <= 0)
              {
                int v23 = icu::UMemory::operator new(v21, (icu::UMemory *)0x18, v9);
                int v22 = v23;
                if (v23)
                {
                  *int v23 = (uint64_t)&off_18972BE28;
                  v23[1] = 0LL;
                  *((_DWORD *)v23 + 4) = v11;
                  *((_BYTE *)v23 + 20) = v15;
                }

                else
                {
                  *a3 = 7;
                }
              }

              else
              {
                int v22 = 0LL;
              }

              icu::UVector::adoptElement(v4, v22, (UErrorCode *)a3);
              if (*a3 > 0) {
                goto LABEL_91;
              }
              uint64_t v11 = 0LL;
              int v13 = 1;
              break;
            default:
              goto LABEL_94;
          }
        }

        BOOL v12 = !v12;
        goto LABEL_64;
      }
    }

    if (v12)
    {
      __int16 v40 = v19;
      BOOL v12 = 1;
      icu::UnicodeString::doAppend((uint64_t)v41, (uint64_t)&v40, 0, 1LL);
      int v13 = 0;
LABEL_64:
      uint64_t v20 = v11;
      goto LABEL_65;
    }

    switch(v19)
    {
      case 'H':
        uint64_t v20 = 1LL;
        break;
      case 's':
        uint64_t v20 = 4LL;
        break;
      case 'm':
        uint64_t v20 = 2LL;
        break;
      default:
        switch((int)v11)
        {
          case 0:
            goto LABEL_71;
          case 1:
            goto LABEL_83;
          case 2:
          case 4:
            if (v15 != 2) {
              goto LABEL_83;
            }
LABEL_56:
            uint64_t v30 = (uint64_t *)*a3;
            if ((int)v30 <= 0)
            {
              __int16 v32 = icu::UMemory::operator new(v30, (icu::UMemory *)0x18, v9);
              unint64_t v31 = v32;
              if (v32)
              {
                *__int16 v32 = (uint64_t)&off_18972BE28;
                v32[1] = 0LL;
                *((_DWORD *)v32 + 4) = v11;
                *((_BYTE *)v32 + 20) = v15;
              }

              else
              {
                *a3 = 7;
              }
            }

            else
            {
              unint64_t v31 = 0LL;
            }

            icu::UVector::adoptElement(v4, v31, (UErrorCode *)a3);
            if (*a3 > 0) {
              goto LABEL_91;
            }
LABEL_71:
            __int16 v40 = v19;
            icu::UnicodeString::doAppend((uint64_t)v41, (uint64_t)&v40, 0, 1LL);
            int v13 = 0;
            BOOL v12 = 0;
            uint64_t v20 = 0LL;
            break;
          default:
            goto LABEL_94;
        }

        goto LABEL_65;
    }

    if ((_DWORD)v20 == (_DWORD)v11)
    {
      int v13 = 0;
      BOOL v12 = 0;
      ++v15;
      goto LABEL_64;
    }

    switch((int)v11)
    {
      case 0:
        int v24 = WORD4(v41[0]) >> 5;
        if (SWORD4(v41[0]) < 0) {
          int v24 = HIDWORD(v41[0]);
        }
        if (v24 < 1) {
          goto LABEL_68;
        }
        int v25 = sub_1809A074C((uint64_t)v41, a3);
        icu::UVector::adoptElement(v4, v25, (UErrorCode *)a3);
        if (*a3 > 0) {
          goto LABEL_91;
        }
        if ((BYTE8(v41[0]) & 1) != 0) {
          __int16 v26 = 2;
        }
        else {
          __int16 v26 = BYTE8(v41[0]) & 0x1F;
        }
        WORD4(v41[0]) = v26;
LABEL_68:
        int v13 = 0;
        BOOL v12 = 0;
        v14 |= v20;
        int v15 = 1;
        break;
      case 1:
        goto LABEL_83;
      case 2:
      case 4:
        if (v15 != 2) {
          goto LABEL_83;
        }
LABEL_51:
        __int128 v27 = (uint64_t *)*a3;
        if ((int)v27 <= 0)
        {
          uint64_t v29 = icu::UMemory::operator new(v27, (icu::UMemory *)0x18, v9);
          __int128 v28 = v29;
          if (v29)
          {
            *uint64_t v29 = (uint64_t)&off_18972BE28;
            v29[1] = 0LL;
            *((_DWORD *)v29 + 4) = v11;
            *((_BYTE *)v29 + 20) = v15;
          }

          else
          {
            *a3 = 7;
          }
        }

        else
        {
          __int128 v28 = 0LL;
        }

        icu::UVector::adoptElement(v4, v28, (UErrorCode *)a3);
        if (*a3 <= 0) {
          goto LABEL_68;
        }
        goto LABEL_91;
      default:
        goto LABEL_94;
    }

uint64_t icu::TimeZoneFormat::checkAbuttingHoursAndMinutes(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = 0LL;
  *(_BYTE *)(this + 1312) = 0;
  do
  {
    uint64_t v3 = *(icu::UVector **)(v1 + 8 * v2 + 1264);
    if (*((int *)v3 + 2) >= 1)
    {
      signed int v4 = 0;
      BOOL v5 = 0;
      do
      {
        this = icu::UVector::elementAt(v3, v4);
        int v6 = *(_DWORD *)(this + 16);
        if (v6)
        {
          if (v5)
          {
            *(_BYTE *)(v1 + 1312) = 1;
            return this;
          }

          BOOL v5 = v6 == 1;
        }

        else
        {
          if (v5) {
            break;
          }
          BOOL v5 = 0;
        }

        ++v4;
      }

      while (v4 < *((_DWORD *)v3 + 2));
      if (*(_BYTE *)(v1 + 1312)) {
        return this;
      }
    }

    ++v2;
  }

  while (v2 != 6);
  return this;
}

icu::UnicodeString *icu::TimeZoneFormat::getGMTOffsetDigits( icu::TimeZoneFormat *this, icu::UnicodeString *a2)
{
  uint64_t v3 = 0LL;
  if ((*((_WORD *)a2 + 4) & 1) != 0) {
    __int16 v4 = 2;
  }
  else {
    __int16 v4 = *((_WORD *)a2 + 4) & 0x1F;
  }
  *((_WORD *)a2 + 4) = v4;
  BOOL v5 = (char *)this + 1024;
  do
  {
    icu::UnicodeString::append((uint64_t)a2, *(_DWORD *)&v5[v3]);
    v3 += 4LL;
  }

  while (v3 != 40);
  return a2;
}

uint64_t icu::TimeZoneFormat::setGMTOffsetDigits(uint64_t this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  if (*(int *)a3 <= 0)
  {
    uint64_t v4 = this;
    uint64_t v8 = 0LL;
    __int128 v6 = 0u;
    __int128 v7 = 0u;
    this = icu::TimeZoneFormat::toCodePoints(a2, (const icu::UnicodeString *)&v6, (int *)0xA);
    if ((_DWORD)this)
    {
      __int128 v5 = v7;
      *(_OWORD *)(v4 + 1024) = v6;
      *(_OWORD *)(v4 + 1040) = v5;
      *(void *)(v4 + 1056) = v8;
    }

    else
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }

  return this;
}

icu::UnicodeString *icu::TimeZoneFormat::getGMTZeroFormat(UChar **this, UChar **a2)
{
  return icu::UnicodeString::copyFrom(a2, this + 133, 0);
}

icu::UnicodeString *icu::TimeZoneFormat::setGMTZeroFormat( icu::UnicodeString *this, UChar **a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    unsigned int v4 = *((unsigned __int16 *)a2 + 4);
    if (v4 <= 0x1F)
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
      return this;
    }

    __int128 v5 = (UChar **)((char *)this + 1064);
    if ((v4 & 1) != 0)
    {
      if ((*((_WORD *)this + 536) & 1) != 0) {
        return this;
      }
      return icu::UnicodeString::copyFrom(v5, a2, 0);
    }

    int v6 = (__int16)v4;
    unsigned int v7 = v4 >> 5;
    if (v6 >= 0) {
      int v8 = v7;
    }
    else {
      int v8 = *((_DWORD *)a2 + 3);
    }
    unsigned int v9 = *((unsigned __int16 *)this + 536);
    if ((v9 & 0x8000u) == 0) {
      unsigned int v10 = v9 >> 5;
    }
    else {
      unsigned int v10 = *((_DWORD *)this + 269);
    }
    if ((v9 & 1) != 0) {
      return icu::UnicodeString::copyFrom(v5, a2, 0);
    }
    if (v8 != v10) {
      return icu::UnicodeString::copyFrom(v5, a2, 0);
    }
    this = (icu::UnicodeString *)icu::UnicodeString::doEquals( (icu::UnicodeString *)a2,  (const icu::UnicodeString *)v5,  v8);
    if (!(_DWORD)this) {
      return icu::UnicodeString::copyFrom(v5, a2, 0);
    }
  }

  return this;
}

uint64_t icu::TimeZoneFormat::format( icu::TimeZoneFormat *a1, const icu::TimeZone *a2, UChar **a3, uint64_t a4, int *a5, double a6)
{
  int v10 = (int)a2;
  if (a5) {
    *a5 = 0;
  }
  switch((int)a2)
  {
    case 0:
      BOOL v12 = (const icu::TimeZone *)a3;
      int v13 = 1;
      goto LABEL_7;
    case 1:
      BOOL v12 = (const icu::TimeZone *)a3;
      int v13 = 2;
      goto LABEL_7;
    case 2:
      BOOL v12 = (const icu::TimeZone *)a3;
      int v13 = 4;
LABEL_7:
      icu::TimeZoneFormat::formatGeneric(a1, v12, v13, a6, (icu::UnicodeString *)a4);
      goto LABEL_11;
    case 3:
      int v14 = (icu::ZoneMeta *)a3;
      uint64_t v15 = 2LL;
      uint64_t v16 = 4LL;
      goto LABEL_10;
    case 4:
      int v14 = (icu::ZoneMeta *)a3;
      uint64_t v15 = 16LL;
      uint64_t v16 = 32LL;
LABEL_10:
      icu::TimeZoneFormat::formatSpecific((uint64_t)a1, v14, v15, v16, (icu::UnicodeString *)a4, a5, a6);
      goto LABEL_11;
    case 17:
      icu::UnicodeString::operator=((UChar **)a4, a3 + 1);
      return a4;
    case 18:
      ShortID = icu::ZoneMeta::getShortID((const UChar **)a3, a2);
      if (ShortID) {
        int v22 = (const __int16 *)ShortID;
      }
      else {
        int v22 = L"unk";
      }
      icu::UnicodeString::unBogus(a4);
      unsigned int v23 = *(unsigned __int16 *)(a4 + 8);
      int v24 = (__int16)v23;
      unsigned int v25 = v23 >> 5;
      if (v24 >= 0) {
        uint64_t v26 = v25;
      }
      else {
        uint64_t v26 = *(unsigned int *)(a4 + 12);
      }
      icu::UnicodeString::doReplace(a4, 0LL, v26, (uint64_t)v22, 0, 0xFFFFFFFFLL);
      return a4;
    case 19:
      icu::TimeZoneFormat::formatExemplarLocation(a1, (const icu::TimeZone *)a3, (UChar **)a4);
      return a4;
    default:
LABEL_11:
      if (*(unsigned __int16 *)(a4 + 8) <= 0x1Fu)
      {
        *(void *)unsigned int v35 = 0LL;
        int v34 = 0;
        unint64_t v17 = (icu::TimeZoneFormat *)(*((uint64_t (**)(UChar **, void, UErrorCode *, int *, UErrorCode *, double))*a3
                                      + 6))( a3,  0LL,  v35,  &v34,  &v35[1],  a6);
        if (v35[1] <= U_ZERO_ERROR)
        {
          int v18 = v34 + v35[0];
          switch(v10)
          {
            case 0:
            case 1:
            case 3:
            case 5:
              int v19 = (UChar **)a1;
              int v20 = 0;
              goto LABEL_25;
            case 2:
            case 4:
            case 6:
              int v19 = (UChar **)a1;
              int v20 = 1;
LABEL_25:
              icu::TimeZoneFormat::formatOffsetLocalizedGMT(v19, v18, v20, (UChar **)a4, &v35[1]);
              break;
            case 7:
              int v27 = 1;
              int v28 = 1;
              int v29 = 1;
              uint64_t v30 = (icu::UnicodeString *)a4;
              int v31 = 1;
              goto LABEL_44;
            case 8:
              int v27 = 1;
              int v28 = 0;
              int v29 = 1;
              goto LABEL_37;
            case 9:
              int v27 = 1;
              goto LABEL_33;
            case 10:
              int v27 = 1;
              goto LABEL_35;
            case 11:
              int v27 = 1;
              goto LABEL_39;
            case 12:
              int v27 = 1;
              goto LABEL_41;
            case 13:
              int v27 = 0;
LABEL_33:
              int v28 = 1;
              goto LABEL_36;
            case 14:
              int v27 = 0;
LABEL_35:
              int v28 = 0;
LABEL_36:
              int v29 = 0;
LABEL_37:
              int v31 = 1;
              goto LABEL_43;
            case 15:
              int v27 = 0;
LABEL_39:
              int v28 = 1;
              goto LABEL_42;
            case 16:
              int v27 = 0;
LABEL_41:
              int v28 = 0;
LABEL_42:
              int v29 = 0;
              int v31 = 0;
LABEL_43:
              uint64_t v30 = (icu::UnicodeString *)a4;
LABEL_44:
              icu::TimeZoneFormat::formatOffsetISO8601(v17, v18, v27, v28, v29, v31, v30, &v35[1]);
              break;
            default:
              break;
          }

          if (a5)
          {
            if (v34) {
              int v32 = 2;
            }
            else {
              int v32 = 1;
            }
            *a5 = v32;
          }
        }
      }

      return a4;
  }

icu::UnicodeString *icu::TimeZoneFormat::formatGeneric( icu::TimeZoneFormat *this, const icu::TimeZone *a2, int a3, double a4, icu::UnicodeString *GenericLocationName)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  UErrorCode v16 = U_ZERO_ERROR;
  uint64_t TimeZoneGenericNames = icu::TimeZoneFormat::getTimeZoneGenericNames(this, &v16);
  if (v16 >= U_ILLEGAL_ARGUMENT_ERROR) {
    goto LABEL_2;
  }
  uint64_t v11 = (icu::TimeZoneGenericNames *)TimeZoneGenericNames;
  if (a3 != 1) {
    return icu::TimeZoneGenericNames::getDisplayName(TimeZoneGenericNames, a2, a3, GenericLocationName, a4);
  }
  CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID(a2, v10);
  if (CanonicalCLDRID)
  {
    uint64_t v15 = CanonicalCLDRID;
    icu::UnicodeString::UnicodeString(v17, 1LL, &v15);
    GenericLocationName = icu::TimeZoneGenericNames::getGenericLocationName( v11,  (const icu::UnicodeString *)v17,  GenericLocationName);
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v17);
  }

  else
  {
LABEL_2:
    icu::UnicodeString::setToBogus(GenericLocationName);
  }

  return GenericLocationName;
}

icu::UnicodeString *icu::TimeZoneFormat::formatSpecific( uint64_t a1, icu::ZoneMeta *a2, uint64_t a3, uint64_t a4, icu::UnicodeString *this, int *a6, double a7)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  if (!*(void *)(a1 + 560)
    || ((int v25 = 0,
         int v14 = (*(uint64_t (**)(icu::ZoneMeta *, int *))(*(void *)a2 + 80LL))(a2, &v25),
         CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID(a2, v15),
         v25 <= 0)
      ? (BOOL v17 = CanonicalCLDRID == 0LL)
      : (BOOL v17 = 1),
        v17))
  {
    icu::UnicodeString::setToBogus(this);
  }

  else
  {
    uint64_t v19 = *(void *)(a1 + 560);
    if (v14)
    {
      int v24 = CanonicalCLDRID;
      icu::UnicodeString::UnicodeString(v26, 1LL, &v24);
      (*(void (**)(uint64_t, _BYTE *, uint64_t, icu::UnicodeString *, double))(*(void *)v19 + 96LL))( v19,  v26,  a4,  this,  a7);
      icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v26);
      if (!a6) {
        return this;
      }
    }

    else
    {
      unsigned int v23 = CanonicalCLDRID;
      icu::UnicodeString::UnicodeString(v26, 1LL, &v23);
      (*(void (**)(uint64_t, _BYTE *, uint64_t, icu::UnicodeString *, double))(*(void *)v19 + 96LL))( v19,  v26,  a3,  this,  a7);
      icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v26);
      if (!a6) {
        return this;
      }
    }

    if (*((unsigned __int16 *)this + 4) >= 0x20u)
    {
      if (v14) {
        int v22 = 2;
      }
      else {
        int v22 = 1;
      }
      *a6 = v22;
    }
  }

  return this;
}

UChar **icu::TimeZoneFormat::formatExemplarLocation( icu::TimeZoneFormat *this, const icu::TimeZone *a2, UChar **a3)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  memset(v24, 0, sizeof(v24));
  memset(v23, 0, sizeof(v23));
  icu::UnicodeString::UnicodeString(v23, v24, 0LL, 128LL);
  CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID(a2, v6);
  if (CanonicalCLDRID)
  {
    uint64_t v8 = *((void *)this + 70);
    unint64_t v21 = CanonicalCLDRID;
    icu::UnicodeString::UnicodeString(v22, 1LL, &v21);
    (*(void (**)(uint64_t, _BYTE *, _OWORD *))(*(void *)v8 + 88LL))(v8, v22, v23);
    icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v22);
  }

  int v10 = WORD4(v23[0]) >> 5;
  if (SWORD4(v23[0]) < 0) {
    int v10 = HIDWORD(v23[0]);
  }
  if (v10 >= 1) {
    goto LABEL_9;
  }
  uint64_t v11 = *((void *)this + 70);
  int v20 = L"Etc/Unknown";
  icu::UnicodeString::UnicodeString(v22, 1LL, &v20);
  (*(void (**)(uint64_t, _BYTE *, _OWORD *))(*(void *)v11 + 88LL))(v11, v22, v23);
  icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v22);
  int v13 = WORD4(v23[0]) >> 5;
  if (SWORD4(v23[0]) < 0) {
    int v13 = HIDWORD(v23[0]);
  }
  if (v13 < 1)
  {
    icu::UnicodeString::unBogus((uint64_t)a3);
    unsigned int v16 = *((unsigned __int16 *)a3 + 4);
    int v17 = (__int16)v16;
    unsigned int v18 = v16 >> 5;
    if (v17 >= 0) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = *((unsigned int *)a3 + 3);
    }
    icu::UnicodeString::doReplace((uint64_t)a3, 0LL, v19, (uint64_t)L"Unknown", 0, 0xFFFFFFFFLL);
  }

  else
  {
LABEL_9:
    icu::UnicodeString::copyFrom(a3, (UChar **)v23, 0);
  }

  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v23);
  return a3;
}

UChar **icu::TimeZoneFormat::formatOffsetLocalizedGMT(UChar **this, int a2, UChar **a3, UErrorCode *a4)
{
  return icu::TimeZoneFormat::formatOffsetLocalizedGMT(this, a2, 0, a3, a4);
}

UChar **icu::TimeZoneFormat::formatOffsetShortLocalizedGMT(UChar **this, int a2, UChar **a3, UErrorCode *a4)
{
  return icu::TimeZoneFormat::formatOffsetLocalizedGMT(this, a2, 1, a3, a4);
}

icu::UnicodeString *icu::TimeZoneFormat::formatOffsetISO8601Basic( icu::TimeZoneFormat *this, int a2, int a3, int a4, int a5, icu::UnicodeString *a6, UErrorCode *a7)
{
  return icu::TimeZoneFormat::formatOffsetISO8601(this, a2, 1, a3, a4, a5, a6, a7);
}

icu::UnicodeString *icu::TimeZoneFormat::formatOffsetISO8601Extended( icu::TimeZoneFormat *this, int a2, int a3, int a4, int a5, icu::UnicodeString *a6, UErrorCode *a7)
{
  return icu::TimeZoneFormat::formatOffsetISO8601(this, a2, 0, a3, a4, a5, a6, a7);
}

icu::UnicodeString *icu::TimeZoneFormat::format( icu::TimeZoneFormat *this, const icu::Formattable *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (*(int *)a5 <= 0)
  {
    icu::Calendar::getNow(this);
    double TimeInMillis = v10;
    if (icu::Formattable::getType(a2) == 6)
    {
      Object = (const void *)icu::Formattable::getObject(a2);
      if (Object)
      {
        int v13 = Object;
        if (v14)
        {
          uint64_t TimeZone = (uint64_t)v14;
        }

        else
        {
          if (!v16) {
            return a3;
          }
          int v17 = v16;
          uint64_t TimeZone = icu::Calendar::getTimeZone(v16);
          double TimeInMillis = icu::Calendar::getTimeInMillis(v17, a5);
        }

        uint64_t v21 = 0LL;
        (*(void (**)(uint64_t, void, char *, uint64_t *, UErrorCode *, double))(*(void *)TimeZone + 48LL))( TimeZone,  0LL,  (char *)&v21 + 4,  &v21,  a5,  TimeInMillis);
        memset(v23, 0, sizeof(v23));
        memset(v22, 0, sizeof(v22));
        icu::UnicodeString::UnicodeString(v22, v23, 0LL, 128LL);
        icu::TimeZoneFormat::formatOffsetLocalizedGMT((UChar **)this, v21 + HIDWORD(v21), 0, (UChar **)v22, a5);
        unint64_t v18 = *(unsigned int *)a5;
        if ((int)v18 <= 0)
        {
          uint64_t v19 = (SWORD4(v22[0]) & 0x8000u) == 0 ? WORD4(v22[0]) >> 5 : HIDWORD(v22[0]);
          icu::UnicodeString::doAppend((uint64_t)a3, (const icu::UnicodeString *)v22, 0, v19);
          unint64_t v18 = *((unsigned int *)a4 + 2);
          if ((_DWORD)v18 == 17)
          {
            LODWORD(v18) = WORD4(v22[0]) >> 5;
            if ((SWORD4(v22[0]) & 0x8000u) == 0) {
              unint64_t v18 = v18;
            }
            else {
              unint64_t v18 = HIDWORD(v22[0]);
            }
            *((_DWORD *)a4 + 3) = 0;
            *((_DWORD *)a4 + 4) = v18;
          }
        }

        icu::UnicodeString::~UnicodeString((void *)v18, (icu::UnicodeString *)v22);
      }
    }
  }

  return a3;
}

uint64_t icu::TimeZoneFormat::parse(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(unsigned int *, uint64_t, uint64_t, uint64_t, void, uint64_t))(*(void *)a1 + 72LL))( a1,  a2,  a3,  a4,  a1[282],  a5);
}

uint64_t icu::TimeZoneFormat::parse( icu::TimeZoneFormat *this, unsigned int a2, icu::UnicodeString *a3, _DWORD *a4, unsigned int a5, int *a6)
{
  int v6 = a6;
  uint64_t v8 = a4;
  uint64_t v121 = *MEMORY[0x1895F89C0];
  if (a6) {
    *a6 = 0;
  }
  uint64_t v12 = a4[2];
  unsigned int v13 = *((unsigned __int16 *)a3 + 4);
  int v14 = (__int16)v13;
  unsigned int v15 = v13 >> 5;
  if (v14 >= 0) {
    signed int v16 = v15;
  }
  else {
    signed int v16 = *((_DWORD *)a3 + 3);
  }
  signed __int8 v18 = a2 == 4 || a2 == 2;
  v111 = off_18970F400;
  int v112 = v12;
  unsigned int v113 = -1;
  if ((a2 > 3 || ((0xBu >> (a2 & 0xF)) & 1) == 0) && a2 != 4 && a2 != 2)
  {
    unsigned int v104 = a5;
    unsigned int v105 = 0;
    int v24 = -1;
    LODWORD(v19) = 0x7FFFFFFF;
    goto LABEL_21;
  }

  LOBYTE(v120[0]) = 0;
  uint64_t v19 = (icu::TimeZoneFormat *)icu::TimeZoneFormat::parseOffsetLocalizedGMT( this,  a3,  (icu::ParsePosition *)&v111,  v18,  (signed __int8 *)v120);
  if (v113 != -1)
  {
    int v24 = -1;
    LODWORD(v19) = 0x7FFFFFFF;
LABEL_20:
    unsigned int v104 = a5;
    unsigned int v105 = 96;
LABEL_21:
    unsigned int v107 = v19;
    UErrorCode v110 = U_ZERO_ERROR;
    memset(v120, 0, sizeof(v120));
    memset(v119, 0, sizeof(v119));
    BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)icu::UnicodeString::UnicodeString(v119, v120, 0LL, 32LL);
    signed int v108 = v16;
    signed int v30 = 1;
    uint64_t v31 = 6LL;
    switch(a2)
    {
      case 0u:
        goto LABEL_32;
      case 1u:
        signed int v30 = 3;
        goto LABEL_32;
      case 2u:
        signed int v30 = 5;
LABEL_32:
        *(_DWORD *)v115 = 0;
        uint64_t TimeZoneGenericNames = icu::TimeZoneFormat::getTimeZoneGenericNames(this, &v110);
        unint64_t v34 = v110;
        if (v110 > U_ZERO_ERROR
          || (BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)icu::TimeZoneGenericNames::findBestMatch( TimeZoneGenericNames,  (uint64_t)a3,  v12,  v30,  v119,  v115,  &v110),  unint64_t v34 = v110,  v110 >= U_ILLEGAL_ARGUMENT_ERROR))
        {
          uint64_t v31 = 0LL;
          v8[3] = v12;
          goto LABEL_176;
        }

        signed int v30 = v108;
        if ((int)BestMatch < 1)
        {
LABEL_71:
          v103 = this;
          goto LABEL_72;
        }

        if (v6) {
          *int v6 = *(_DWORD *)v115;
        }
        int v39 = (_DWORD)BestMatch + v12;
LABEL_54:
        v8[2] = v39;
        uint64_t TimeZone = icu::TimeZone::createTimeZone(v119, v35);
        goto LABEL_75;
      case 3u:
        goto LABEL_36;
      case 4u:
        uint64_t v31 = 48LL;
LABEL_36:
        v95 = v8;
        BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)(*(uint64_t (**)(void, icu::UnicodeString *, uint64_t, uint64_t, UErrorCode *))(**((void **)this + 70) + 120LL))( *((void *)this + 70),  a3,  v12,  v31,  &v110);
        int v36 = (icu::UVector **)BestMatch;
        unint64_t v34 = v110;
        v103 = this;
        if (v110 >= U_ILLEGAL_ARGUMENT_ERROR)
        {
          uint64_t v31 = 0LL;
          LOBYTE(v37) = 0;
          unint64_t v34 = (unint64_t)v95;
          v95[3] = v12;
LABEL_38:
          signed int v30 = v108;
          goto LABEL_39;
        }

        if (!BestMatch) {
          goto LABEL_122;
        }
        BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)icu::TimeZoneNames::MatchInfoCollection::size(BestMatch);
        __int128 v91 = v6;
        signed int v41 = 0;
        unsigned int v42 = -1;
        do
        {
          int v37 = icu::TimeZoneNames::MatchInfoCollection::getMatchLengthAt(v36, v41) + v12;
          if (v37 > v24)
          {
            int v24 = v37;
            unsigned int v42 = v41;
          }

          ++v41;
          BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)icu::TimeZoneNames::MatchInfoCollection::size((icu::TimeZoneNames::MatchInfoCollection *)v36);
        }

        while (v41 < (int)BestMatch);
        if ((v42 & 0x80000000) == 0)
        {
          int v6 = v91;
          if (!v91)
          {
LABEL_191:
            v95[2] = v37;
            icu::TimeZoneFormat::getTimeZoneID(v103, v36, v42, (icu::UnicodeString *)v119);
            BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)icu::TimeZone::createTimeZone(v119, v84);
            uint64_t v31 = (uint64_t)BestMatch;
            LOBYTE(v37) = 0;
            goto LABEL_38;
          }

          int NameTypeAt = icu::TimeZoneNames::MatchInfoCollection::getNameTypeAt(v36, v42);
          int v44 = 1;
          if (NameTypeAt > 15)
          {
            if (NameTypeAt == 16) {
              goto LABEL_190;
            }
            if (NameTypeAt != 32) {
              goto LABEL_66;
            }
          }

          else
          {
            if (NameTypeAt == 2)
            {
LABEL_190:
              *__int128 v91 = v44;
              goto LABEL_191;
            }

            if (NameTypeAt != 4)
            {
LABEL_66:
              int v44 = 0;
              goto LABEL_190;
            }
          }

          int v44 = 2;
          goto LABEL_190;
        }

        int v6 = v91;
LABEL_122:
        LOBYTE(v37) = 1;
        signed int v30 = v108;
        if (a2 != 4) {
          goto LABEL_39;
        }
        unint64_t v34 = v104;
        if ((v104 & 2) == 0) {
          goto LABEL_39;
        }
        BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)icu::TimeZoneFormat::getTZDBTimeZoneNames(v103, &v110);
        unint64_t v34 = v110;
        if (v110 > U_ZERO_ERROR) {
          goto LABEL_125;
        }
        BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)(*(uint64_t (**)(icu::TimeZoneNames::MatchInfoCollection *, icu::UnicodeString *, uint64_t, uint64_t, UErrorCode *))(*(void *)BestMatch + 120LL))( BestMatch,  a3,  v12,  v31,  &v110);
        uint64_t v31 = (uint64_t)BestMatch;
        unint64_t v34 = v110;
        if (v110 >= U_ILLEGAL_ARGUMENT_ERROR)
        {
          v102 = BestMatch;
          uint64_t v31 = 0LL;
          int v37 = 0;
          unint64_t v34 = (unint64_t)v95;
          v95[3] = v12;
          goto LABEL_129;
        }

        if (!BestMatch) {
          goto LABEL_125;
        }
        if ((int)icu::TimeZoneNames::MatchInfoCollection::size(BestMatch) < 1)
        {
          BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)(*(uint64_t (**)(uint64_t))(*(void *)v31 + 8LL))(v31);
          goto LABEL_125;
        }

        uint64_t v94 = v6;
        signed int v85 = 0;
        unsigned int v86 = -1;
        do
        {
          int v87 = icu::TimeZoneNames::MatchInfoCollection::getMatchLengthAt((icu::UVector **)v31, v85) + v12;
          if (v87 > v24)
          {
            int v24 = v87;
            unsigned int v86 = v85;
          }

          ++v85;
        }

        while (v85 < (int)icu::TimeZoneNames::MatchInfoCollection::size((icu::TimeZoneNames::MatchInfoCollection *)v31));
        v102 = (icu::TimeZoneNames::MatchInfoCollection *)v31;
        if ((v86 & 0x80000000) != 0)
        {
          int v37 = 1;
          int v6 = v94;
LABEL_230:
          signed int v30 = v108;
LABEL_129:
          BestMatch = v102;
          if (v102)
          {
            BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)(*(uint64_t (**)(icu::TimeZoneNames::MatchInfoCollection *))(*(void *)v102 + 8LL))(v102);
            if ((v37 & 1) == 0)
            {
              LOBYTE(v37) = 0;
              goto LABEL_39;
            }
          }

          else if (!v37)
          {
LABEL_39:
            if (v36) {
              BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)(*((uint64_t (**)(icu::UVector **))*v36
            }
                                                                      + 1))(v36);
            uint64_t v8 = v95;
            if ((v37 & 1) == 0) {
              goto LABEL_176;
            }
LABEL_72:
            if (v24 > (int)v12)
            {
              v8[2] = v24;
              int v32 = (icu::ZoneMeta *)v107;
LABEL_74:
              uint64_t TimeZone = icu::TimeZoneFormat::createTimeZoneForOffset(BestMatch, v32, v26, v27, v28, v29);
LABEL_75:
              uint64_t v31 = (uint64_t)TimeZone;
              goto LABEL_176;
            }

            __int16 v45 = word_180A3D7C4[a2];
            __int128 v118 = 0u;
            __int128 v116 = 0u;
            __int128 v117 = 0u;
            *(_OWORD *)v115 = 0u;
            memset(v114, 0, sizeof(v114));
            TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::UnicodeString::UnicodeString(v114, v115, 0LL, 32LL);
            if (v24 < v30 && (v45 & 0x180) != 0x180)
            {
              uint64_t v52 = v6;
              int v112 = v12;
              unsigned int v113 = -1;
              v109[0] = 0;
              TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::TimeZoneFormat::parseOffsetISO8601( TZDBTimeZoneNames,  a3,  (icu::ParsePosition *)&v111,  0,  v109);
              if (v113 == -1)
              {
                __int128 v65 = TZDBTimeZoneNames;
                int v66 = v112;
                if (v112 == v30 || v109[0]) {
                  goto LABEL_106;
                }
                if (v24 < v112)
                {
                  icu::UnicodeString::setToBogus((icu::UnicodeString *)v114);
                  unsigned int v107 = v65;
                  int v24 = v66;
                }
              }

              int v6 = v52;
            }

            uint64_t v53 = v105;
            char v54 = v105 | v45;
            __int128 v55 = v103;
            v101 = (icu::SimpleTimeZone *)v31;
            if (v24 < v30 && ((v105 | v45) & 0x20) == 0)
            {
              __int16 v98 = v45;
              signed int v56 = v30;
              __int128 v57 = v6;
              int v112 = v12;
              unsigned int v113 = -1;
              v109[0] = 0;
              TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::TimeZoneFormat::parseOffsetLocalizedGMT( v103,  a3,  (icu::ParsePosition *)&v111,  0,  v109);
              uint64_t v53 = v113;
              if (v113 == -1)
              {
                __int128 v65 = TZDBTimeZoneNames;
                int v66 = v112;
                if (v112 == v56) {
                  goto LABEL_106;
                }
                uint64_t v53 = v109[0];
                if (v109[0]) {
                  goto LABEL_106;
                }
                if (v24 < v112)
                {
                  icu::UnicodeString::setToBogus((icu::UnicodeString *)v114);
                  unsigned int v107 = v65;
                  int v24 = v66;
                }
              }

              int v6 = v57;
              signed int v30 = v56;
              __int128 v55 = v103;
              __int16 v45 = v98;
            }

            if (v24 >= v30 || (v54 & 0x40) != 0)
            {
LABEL_88:
              if ((v104 & 1) == 0)
              {
                int v60 = 0;
                uint64_t v61 = v107;
                goto LABEL_165;
              }

              if (v24 >= v30)
              {
                int v106 = 0;
                signed int v64 = v24;
                goto LABEL_140;
              }

              __int16 v99 = v45;
              __int128 v92 = v6;
              TZDBTimeZoneNames = (icu::TimeZoneFormat *)(*(uint64_t (**)(void *, icu::UnicodeString *, uint64_t, uint64_t, UErrorCode *))(**((void **)v55 + 70) + 120LL))( *((void **)v55 + 70),  a3,  v12,  118LL,  &v110);
              uint64_t v62 = (icu::UVector **)TZDBTimeZoneNames;
              UErrorCode v63 = v110;
              if (v110 >= U_ILLEGAL_ARGUMENT_ERROR)
              {
                v101 = 0LL;
                int v106 = 0;
                v8[3] = v12;
                signed int v64 = v24;
                goto LABEL_136;
              }

              v96 = v8;
              if (TZDBTimeZoneNames
                && (TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::TimeZoneNames::MatchInfoCollection::size(TZDBTimeZoneNames),
                    (int)TZDBTimeZoneNames >= 1))
              {
                signed int v67 = 0;
                signed int v64 = -1;
                unsigned int v68 = -1;
                do
                {
                  if ((int)(icu::TimeZoneNames::MatchInfoCollection::getMatchLengthAt(v62, v67) + v12) > v64)
                  {
                    signed int v64 = icu::TimeZoneNames::MatchInfoCollection::getMatchLengthAt(v62, v67) + v12;
                    unsigned int v68 = v67;
                  }

                  ++v67;
                  TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::TimeZoneNames::MatchInfoCollection::size((icu::TimeZoneNames::MatchInfoCollection *)v62);
                }

                while (v67 < (int)TZDBTimeZoneNames);
              }

              else
              {
                unsigned int v68 = -1;
                signed int v64 = -1;
              }

              if (v24 >= v64)
              {
                int v106 = 0;
                signed int v64 = v24;
                uint64_t v8 = v96;
                signed int v30 = v108;
                goto LABEL_136;
              }

              icu::TimeZoneFormat::getTimeZoneID(v55, v62, v68, (icu::UnicodeString *)v114);
              TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::TimeZoneNames::MatchInfoCollection::getNameTypeAt( v62,  v68);
              uint64_t v53 = 0x7FFFFFFFLL;
              int v106 = 1;
              unsigned int v107 = 0x7FFFFFFF;
              uint64_t v8 = v96;
              if ((int)TZDBTimeZoneNames > 15)
              {
                signed int v30 = v108;
                if ((_DWORD)TZDBTimeZoneNames == 16) {
                  goto LABEL_136;
                }
                if ((_DWORD)TZDBTimeZoneNames != 32) {
                  goto LABEL_119;
                }
              }

              else
              {
                signed int v30 = v108;
                if ((_DWORD)TZDBTimeZoneNames == 2) {
                  goto LABEL_136;
                }
                if ((_DWORD)TZDBTimeZoneNames != 4)
                {
LABEL_119:
                  int v106 = 0;
LABEL_135:
                  unsigned int v107 = 0x7FFFFFFF;
LABEL_136:
                  if (v62) {
                    TZDBTimeZoneNames = (icu::TimeZoneFormat *)(*((uint64_t (**)(icu::UVector **))*v62 + 1))(v62);
                  }
                  BOOL v69 = v63 <= U_ZERO_ERROR;
                  int v6 = v92;
                  __int16 v45 = v99;
                  if (!v69) {
                    goto LABEL_175;
                  }
LABEL_140:
                  if ((v104 & 2) == 0
                    || v64 >= v30
                    || (v45 & 0x10) != 0
                    || (TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::TimeZoneFormat::getTZDBTimeZoneNames(v55, &v110),
                        uint64_t v53 = v110,
                        v110 > U_ZERO_ERROR))
                  {
                    int v24 = v64;
LABEL_145:
                    if (v24 >= v30)
                    {
                      __int128 v72 = v6;
                      uint64_t v61 = v107;
                    }

                    else
                    {
                      *(_DWORD *)v109 = 0;
                      uint64_t v70 = icu::TimeZoneFormat::getTimeZoneGenericNames(v55, &v110);
                      uint64_t v53 = v110;
                      uint64_t v61 = v107;
                      if (v110 > U_ZERO_ERROR
                        || (TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::TimeZoneGenericNames::findBestMatch( v70,  (uint64_t)a3,  v12,  7u,  v119,  v109,  &v110),  uint64_t v53 = v110,  v110 > U_ZERO_ERROR))
                      {
LABEL_170:
                        v101 = 0LL;
                        v8[3] = v12;
                        goto LABEL_175;
                      }

                      if ((int)TZDBTimeZoneNames >= 1)
                      {
                        int v71 = (_DWORD)TZDBTimeZoneNames + v12;
                        if (v24 < (int)TZDBTimeZoneNames + (int)v12)
                        {
                          TZDBTimeZoneNames = icu::UnicodeString::copyFrom((UChar **)v114, v119, 0);
                          uint64_t v61 = 0x7FFFFFFFLL;
                          uint64_t v53 = *(unsigned int *)v109;
                          int v106 = *(_DWORD *)v109;
                          int v24 = v71;
                        }
                      }

                      __int128 v72 = v6;
                    }

                    int v73 = v45 & 0x200;
                    if (v24 >= v30)
                    {
                      int v60 = v106;
                    }

                    else
                    {
                      int v60 = v106;
                      if (!v73)
                      {
                        int v112 = v12;
                        unsigned int v113 = -1;
                        TZDBTimeZoneNames = icu::TimeZoneFormat::parseZoneID( TZDBTimeZoneNames,  a3,  (icu::ParsePosition *)&v111,  (icu::UnicodeString *)v119);
                        uint64_t v53 = v113;
                        if (v113 == -1)
                        {
                          int v74 = v112;
                          if (v24 < v112)
                          {
                            TZDBTimeZoneNames = icu::UnicodeString::copyFrom((UChar **)v114, v119, 0);
                            int v60 = 0;
                            uint64_t v61 = 0x7FFFFFFFLL;
                            int v24 = v74;
                          }
                        }
                      }
                    }

                    if (v24 < v30
                      && !v73
                      && (int v112 = v12,
                          unsigned int v113 = -1,
                          TZDBTimeZoneNames = icu::TimeZoneFormat::parseShortZoneID( TZDBTimeZoneNames,  a3,  (icu::ParsePosition *)&v111,  (icu::UnicodeString *)v119),  uint64_t v53 = v113,  v113 == -1))
                    {
                      int v81 = v112;
                      int v6 = v72;
                      if (v24 < v112)
                      {
                        TZDBTimeZoneNames = icu::UnicodeString::copyFrom((UChar **)v114, v119, 0);
                        int v60 = 0;
                        uint64_t v61 = 0x7FFFFFFFLL;
                        int v24 = v81;
                      }
                    }

                    else
                    {
                      int v6 = v72;
                    }

uint64_t icu::TimeZoneFormat::parseOffsetLocalizedGMT( icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::ParsePosition *a3, signed __int8 a4, signed __int8 *a5)
{
  int v8 = *((_DWORD *)a3 + 2);
  int v19 = 0;
  if (a5)
  {
    *a5 = 0;
    uint64_t result = icu::TimeZoneFormat::parseOffsetLocalizedGMTPattern(this, a2, v8, 0, &v19);
    int v11 = v19;
    if (v19 >= 1
      || (result = icu::TimeZoneFormat::parseOffsetDefaultLocalizedGMT(this, a2, v8, &v19), int v11 = v19, v19 >= 1))
    {
      *a5 = 1;
LABEL_26:
      int v18 = v11 + v8;
      goto LABEL_27;
    }
  }

  else
  {
    uint64_t result = icu::TimeZoneFormat::parseOffsetLocalizedGMTPattern(this, a2, v8, 0, &v19);
    int v11 = v19;
    if (v19 > 0) {
      goto LABEL_26;
    }
    uint64_t result = icu::TimeZoneFormat::parseOffsetDefaultLocalizedGMT(this, a2, v8, &v19);
    int v11 = v19;
    if (v19 > 0) {
      goto LABEL_26;
    }
  }

  unsigned int v12 = *((unsigned __int16 *)this + 536);
  int v13 = v12 >> 5;
  if ((*((__int16 *)this + 536) & 0x80000000) == 0)
  {
    int v14 = v12 >> 5;
    if ((v12 & 1) == 0) {
      goto LABEL_9;
    }
LABEL_20:
    if ((*((_WORD *)a2 + 4) & 1) == 0) {
      goto LABEL_15;
    }
LABEL_21:
    else {
      int v11 = *((unsigned __int16 *)this + 536) >> 5;
    }
    uint64_t result = 0LL;
    goto LABEL_26;
  }

  int v14 = *((_DWORD *)this + 269);
  if ((v12 & 1) != 0) {
    goto LABEL_20;
  }
LABEL_9:
  if ((v12 & 0x8000u) != 0) {
    int v13 = *((_DWORD *)this + 269);
  }
  if ((v12 & 2) != 0) {
    unsigned int v15 = (char *)this + 1074;
  }
  else {
    unsigned int v15 = (char *)*((void *)this + 136);
  }
  if (!icu::UnicodeString::doCaseCompare( (uint64_t)a2,  v8,  v14,  (uint64_t)v15,  v13 & (v13 >> 31),  v13 & ~(v13 >> 31),  0)) {
    goto LABEL_21;
  }
LABEL_15:
  uint64_t v16 = 0LL;
  while (1)
  {
    int32_t v17 = u_strlen((const UChar *)&aGmt_1[v16]);
    uint64_t result = icu::UnicodeString::doCaseCompare((uint64_t)a2, v8, v17, (uint64_t)&aGmt_1[v16], 0, v17, 0);
    if (!(_DWORD)result) {
      break;
    }
    v16 += 4LL;
    if (v16 == 12)
    {
      uint64_t result = 0LL;
      *((_DWORD *)a3 + 3) = v8;
      return result;
    }
  }

  int v18 = v17 + v8;
LABEL_27:
  *((_DWORD *)a3 + 2) = v18;
  return result;
}

icu::SimpleTimeZone *icu::TimeZoneFormat::createTimeZoneForOffset( icu::TimeZoneFormat *this, icu::ZoneMeta *a2, uint64_t a3, uint64_t a4, uint64_t a5, icu::UnicodeString *a6)
{
  v11[8] = *(UChar **)MEMORY[0x1895F89C0];
  if ((_DWORD)a2) {
    return icu::ZoneMeta::createCustomTimeZone(a2, (int)a2, a3, a4, a5, a6);
  }
  double v10 = "E";
  icu::UnicodeString::UnicodeString(v11, 1LL, &v10);
  uint64_t TimeZone = icu::TimeZone::createTimeZone(v11, v7);
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v11);
  return (icu::SimpleTimeZone *)TimeZone;
}

uint64_t icu::TimeZoneFormat::parseOffsetLocalizedGMT( icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::ParsePosition *a3)
{
  return icu::TimeZoneFormat::parseOffsetLocalizedGMT(this, a2, a3, 0, 0LL);
}

uint64_t icu::TimeZoneFormat::parseOffsetShortLocalizedGMT( icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::ParsePosition *a3)
{
  return icu::TimeZoneFormat::parseOffsetLocalizedGMT(this, a2, a3, 1, 0LL);
}

uint64_t icu::TimeZoneFormat::parseOffsetISO8601( icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::ParsePosition *a3)
{
  return icu::TimeZoneFormat::parseOffsetISO8601(this, a2, a3, 0, 0LL);
}

uint64_t icu::TimeZoneFormat::parseOffsetISO8601( icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::ParsePosition *a3, int a4, signed __int8 *a5)
{
  if (a5) {
    *a5 = 0;
  }
  int v9 = *((_DWORD *)a3 + 2);
  unsigned int v10 = *((unsigned __int16 *)a2 + 4);
  if (*((__int16 *)a2 + 4) < 0)
  {
    unsigned int v11 = *((_DWORD *)a2 + 3);
  }

  else
  {
    unsigned int v11 = v10 >> 5;
  }

  if (v11 <= v9) {
    goto LABEL_16;
  }
  if ((v10 & 2) != 0) {
    unsigned int v12 = (char *)a2 + 10;
  }
  else {
    unsigned int v12 = (char *)*((void *)a2 + 3);
  }
  int v13 = *(unsigned __int16 *)&v12[2 * v9];
  if ((v13 & 0xFFFFFFDF) != 0x5A)
  {
    if (v13 == 43)
    {
      int v15 = 1;
      goto LABEL_19;
    }

    if (v13 == 45)
    {
      int v15 = -1;
LABEL_19:
      unsigned int v23 = off_18970F400;
      int v24 = v9 + 1;
      int v25 = -1;
      int v17 = icu::TimeZoneFormat::parseAsciiOffsetFields((uint64_t)a2, (uint64_t)&v23, 58, 0, 2);
      if (a4 || v25 != -1)
      {
        if (v25 != -1)
        {
          uint64_t v14 = 0LL;
          *((_DWORD *)a3 + 3) = v9;
LABEL_31:
          icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v23);
          return v14;
        }
      }

      else
      {
        int v18 = v24;
        if (v24 - v9 <= 3)
        {
          uint64_t v20 = off_18970F400;
          int v21 = v9 + 1;
          int v22 = -1;
          int v19 = icu::TimeZoneFormat::parseAbuttingAsciiOffsetFields((uint64_t)a2, (uint64_t)&v20, 0, 2, 0);
          if (v22 == -1 && v21 > v18)
          {
            int v24 = v21;
            int v17 = v19;
          }

          icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v20);
        }
      }

      *((_DWORD *)a3 + 2) = v24;
      if (a5) {
        *a5 = 1;
      }
      uint64_t v14 = (v17 * v15);
      goto LABEL_31;
    }

uint64_t icu::TimeZoneFormat::getTimeType(int a1)
{
  uint64_t result = 1LL;
  if (a1 > 15)
  {
    if (a1 == 16) {
      return result;
    }
    if (a1 != 32) {
      return 0LL;
    }
  }

  else
  {
    if (a1 == 2) {
      return result;
    }
    if (a1 != 4) {
      return 0LL;
    }
  }

  return 2LL;
}

icu::UnicodeString *icu::TimeZoneFormat::getTimeZoneID( icu::TimeZoneFormat *this, icu::UVector **a2, unsigned int a3, icu::UnicodeString *a4)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  if (!icu::TimeZoneNames::MatchInfoCollection::getTimeZoneIDAt(a2, a3, a4))
  {
    memset(v11, 0, sizeof(v11));
    memset(v10, 0, sizeof(v10));
    icu::UnicodeString::UnicodeString(v10, v11, 0LL, 32LL);
    if (icu::TimeZoneNames::MatchInfoCollection::getMetaZoneIDAt(a2, a3, (icu::UnicodeString *)v10)) {
      (*(void (**)(void, _OWORD *, char *, icu::UnicodeString *))(**((void **)this + 70) + 64LL))( *((void *)this + 70),  v10,  (char *)this + 552,  a4);
    }
    icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v10);
  }

  return a4;
}

uint64_t icu::TimeZoneFormat::getTZDBTimeZoneNames(icu::TimeZoneFormat *this, UErrorCode *a2)
{
  if (!*((void *)this + 165))
  {
    int v6 = icu::UMemory::operator new(0LL, (icu::UMemory *)0xF0, v5);
    if (v6) {
      *((void *)this + 165) = sub_1809ACCF0(v6, (char *)this + 328);
    }
    else {
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
  }

  umtx_unlock((std::mutex **)&unk_18C535B30);
  return *((void *)this + 165);
}

uint64_t icu::TimeZoneFormat::getTimeZoneGenericNames(icu::TimeZoneFormat *this, UErrorCode *a2)
{
  if (!*((void *)this + 71)) {
    *((void *)this + 71) = icu::TimeZoneGenericNames::createInstance( (icu::TimeZoneFormat *)((char *)this + 328),  a2,  v5);
  }
  umtx_unlock((std::mutex **)&unk_18C535B30);
  return *((void *)this + 71);
}

icu::UnicodeString *icu::TimeZoneFormat::parseZoneID( icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::ParsePosition *a3, icu::UnicodeString *a4)
{
  UErrorCode v30 = U_ZERO_ERROR;
  unsigned int v7 = atomic_load(&dword_18C535B80);
  if (v7 == 2 || !icu::umtx_initImplPreInit(&dword_18C535B80))
  {
    if (dword_18C535B84 >= 1) {
      UErrorCode v30 = dword_18C535B84;
    }
  }

  else
  {
    sub_1809B36C0(0xEu, (uint64_t)sub_1809A6298);
    unsigned int v10 = icu::UMemory::operator new(v9, (icu::UMemory *)0x38, v8);
    if (v10)
    {
      qword_18C535B20 = icu::TextTrieMap::TextTrieMap((uint64_t)v10, 1, 0LL);
      uint64_t Enumeration = icu::TimeZone::createEnumeration((icu::TimeZone *)&v30, v11);
      UErrorCode v13 = v30;
      if (v30 <= U_ZERO_ERROR)
      {
        uint64_t v14 = Enumeration;
        while (1)
        {
          int v15 = (icu::ZoneMeta *)(*(uint64_t (**)(uint64_t, UErrorCode *))(*(void *)v14 + 56LL))(v14, &v30);
          if (!v15) {
            break;
          }
          TimeZoneID = (void *)icu::ZoneMeta::findTimeZoneID(v15, v16);
          if (TimeZoneID) {
            icu::TextTrieMap::put(TimeZoneID, &v30, qword_18C535B20, TimeZoneID, v18);
          }
        }

        (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
        UErrorCode v13 = v30;
      }
    }

    else
    {
      qword_18C535B20 = 0LL;
      UErrorCode v13 = U_MEMORY_ALLOCATION_ERROR;
      UErrorCode v30 = U_MEMORY_ALLOCATION_ERROR;
    }

    dword_18C535B84 = v13;
    icu::umtx_initImplPostInit(&dword_18C535B80);
  }

  uint64_t v19 = *((unsigned int *)a3 + 2);
  icu::UnicodeString::setToBogus(a4);
  if (v30 > U_ZERO_ERROR) {
    goto LABEL_15;
  }
  int v21 = icu::UMemory::operator new((uint64_t *)v30, (icu::UMemory *)0x18, v20);
  int v22 = v21;
  if (v21)
  {
    *int v21 = (uint64_t)&off_18972BEA8;
    *((_DWORD *)v21 + 2) = 0;
    v21[2] = 0LL;
  }

  icu::TextTrieMap::search( (icu::TextTrieMap *)qword_18C535B20,  (uint64_t)a2,  v19,  (uint64_t (***)(void, void, void *, int *))v21,  &v30);
  int v23 = *((_DWORD *)v22 + 2);
  if (v23 <= 0)
  {
    (*(void (**)(uint64_t *))(*v22 + 16))(v22);
LABEL_15:
    *((_DWORD *)a3 + 3) = v19;
    return a4;
  }

  uint64_t v24 = v22[2];
  icu::UnicodeString::unBogus((uint64_t)a4);
  unsigned int v25 = *((unsigned __int16 *)a4 + 4);
  int v26 = (__int16)v25;
  unsigned int v27 = v25 >> 5;
  if (v26 >= 0) {
    uint64_t v28 = v27;
  }
  else {
    uint64_t v28 = *((unsigned int *)a4 + 3);
  }
  icu::UnicodeString::doReplace((uint64_t)a4, 0LL, v28, v24, 0, 0xFFFFFFFFLL);
  (*(void (**)(uint64_t *))(*v22 + 16))(v22);
  *((_DWORD *)a3 + 2) = v23 + v19;
  return a4;
}

icu::UnicodeString *icu::TimeZoneFormat::parseShortZoneID( icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::ParsePosition *a3, icu::UnicodeString *a4)
{
  UErrorCode v32 = U_ZERO_ERROR;
  unsigned int v7 = atomic_load(&dword_18C535B88);
  if (v7 != 2 && icu::umtx_initImplPreInit(&dword_18C535B88))
  {
    sub_1809B36C0(0xEu, (uint64_t)sub_1809A6298);
    uint64_t v8 = icu::TimeZone::createTimeZoneIDEnumeration(1LL, 0LL, 0LL, &v32);
    uint64_t v10 = v8;
    UErrorCode v11 = v32;
    if (v32 <= U_ZERO_ERROR)
    {
      uint64_t v12 = icu::UMemory::operator new((uint64_t *)v32, (icu::UMemory *)0x38, v9);
      if (v12)
      {
        qword_18C535B28 = icu::TextTrieMap::TextTrieMap((uint64_t)v12, 1, 0LL);
        uint64_t v13 = (*(uint64_t (**)(uint64_t, UErrorCode *))(*(void *)v10 + 56LL))(v10, &v32);
        if (v13)
        {
          int v15 = (icu::ZoneMeta *)v13;
          do
          {
            TimeZoneID = (void *)icu::ZoneMeta::findTimeZoneID(v15, v14);
            ShortID = (UChar *)icu::ZoneMeta::getShortID(v15, v17, v18);
            if (ShortID && TimeZoneID) {
              icu::TextTrieMap::put(ShortID, &v32, qword_18C535B28, TimeZoneID, v20);
            }
            int v15 = (icu::ZoneMeta *)(*(uint64_t (**)(uint64_t, UErrorCode *))(*(void *)v10 + 56LL))(v10, &v32);
          }

          while (v15);
        }
      }

      else
      {
        qword_18C535B28 = 0LL;
        UErrorCode v11 = U_MEMORY_ALLOCATION_ERROR;
        UErrorCode v32 = U_MEMORY_ALLOCATION_ERROR;
        if (!v10)
        {
LABEL_18:
          dword_18C535B8C = v11;
          icu::umtx_initImplPostInit(&dword_18C535B88);
          goto LABEL_19;
        }
      }
    }

    else if (!v8)
    {
      goto LABEL_18;
    }

    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
    UErrorCode v11 = v32;
    goto LABEL_18;
  }

  if (dword_18C535B8C >= 1) {
    UErrorCode v32 = dword_18C535B8C;
  }
LABEL_19:
  uint64_t v21 = *((unsigned int *)a3 + 2);
  icu::UnicodeString::setToBogus(a4);
  if (v32 > U_ZERO_ERROR)
  {
LABEL_20:
    *((_DWORD *)a3 + 3) = v21;
    return a4;
  }

  int v23 = icu::UMemory::operator new((uint64_t *)v32, (icu::UMemory *)0x18, v22);
  uint64_t v24 = v23;
  if (v23)
  {
    *int v23 = (uint64_t)&off_18972BEA8;
    *((_DWORD *)v23 + 2) = 0;
    v23[2] = 0LL;
  }

  icu::TextTrieMap::search( (icu::TextTrieMap *)qword_18C535B28,  (uint64_t)a2,  v21,  (uint64_t (***)(void, void, void *, int *))v23,  &v32);
  int v25 = *((_DWORD *)v24 + 2);
  if (v25 <= 0)
  {
    (*(void (**)(uint64_t *))(*v24 + 16))(v24);
    goto LABEL_20;
  }

  uint64_t v26 = v24[2];
  icu::UnicodeString::unBogus((uint64_t)a4);
  unsigned int v27 = *((unsigned __int16 *)a4 + 4);
  int v28 = (__int16)v27;
  unsigned int v29 = v27 >> 5;
  if (v28 >= 0) {
    uint64_t v30 = v29;
  }
  else {
    uint64_t v30 = *((unsigned int *)a4 + 3);
  }
  icu::UnicodeString::doReplace((uint64_t)a4, 0LL, v30, v26, 0, 0xFFFFFFFFLL);
  (*(void (**)(uint64_t *))(*v24 + 16))(v24);
  *((_DWORD *)a3 + 2) = v25 + v21;
  return a4;
}

icu::UnicodeString *icu::TimeZoneFormat::parseExemplarLocation( icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::ParsePosition *a3, icu::UnicodeString *a4)
{
  uint64_t v8 = *((unsigned int *)a3 + 2);
  icu::UnicodeString::setToBogus(a4);
  int v18 = 0;
  unint64_t v9 = (icu::TimeZoneNames::MatchInfoCollection *)(*(uint64_t (**)(void, const icu::UnicodeString *, uint64_t, uint64_t, int *))(**((void **)this + 70) + 120LL))( *((void *)this + 70),  a2,  v8,  64LL,  &v18);
  uint64_t v10 = (icu::UVector **)v9;
  if (v18 > 0) {
    goto LABEL_2;
  }
  if (v9 && (int)icu::TimeZoneNames::MatchInfoCollection::size(v9) >= 1)
  {
    signed int v11 = 0;
    unsigned int v12 = -1;
    int v13 = -1;
    do
    {
      if ((int)(icu::TimeZoneNames::MatchInfoCollection::getMatchLengthAt(v10, v11) + v8) > v13)
      {
        int v13 = icu::TimeZoneNames::MatchInfoCollection::getMatchLengthAt(v10, v11) + v8;
        unsigned int v12 = v11;
      }

      ++v11;
    }

    while (v11 < (int)icu::TimeZoneNames::MatchInfoCollection::size((icu::TimeZoneNames::MatchInfoCollection *)v10));
    if (v13 > 0)
    {
      *((_DWORD *)a3 + 2) = v13;
      icu::TimeZoneFormat::getTimeZoneID(this, v10, v12, a4);
    }
  }

  unsigned int v14 = *((unsigned __int16 *)a4 + 4);
  int v15 = (__int16)v14;
  unsigned int v16 = v14 >> 5;
  if (v15 < 0) {
    unsigned int v16 = *((_DWORD *)a4 + 3);
  }
  if (!v16) {
LABEL_2:
  }
    *((_DWORD *)a3 + 3) = v8;
  if (v10) {
    (*((void (**)(icu::UVector **))*v10 + 1))(v10);
  }
  return a4;
}

uint64_t icu::TimeZoneFormat::parseObject( icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::Formattable *a3, icu::ParsePosition *a4)
{
  unint64_t v5 = (icu::UObject *)(*(uint64_t (**)(icu::TimeZoneFormat *, void, const icu::UnicodeString *, icu::ParsePosition *, uint64_t, void))(*(void *)this + 72LL))( this,  0LL,  a2,  a4,  1LL,  0LL);
  return icu::Formattable::adoptObject(a3, v5);
}

icu::UnicodeString *icu::TimeZoneFormat::formatOffsetISO8601( icu::TimeZoneFormat *this, int a2, int a3, int a4, int a5, int a6, icu::UnicodeString *a7, UErrorCode *a8)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  if (*(int *)a8 < 1)
  {
    if (a2 >= 0) {
      unsigned int v11 = a2;
    }
    else {
      unsigned int v11 = -a2;
    }
    if (a4 && (v11 < 0x3E8 || a6 && v11 >> 5 <= 0x752))
    {
      LOWORD(v34[0]) = 90;
      icu::UnicodeString::unBogus((uint64_t)a7);
      unsigned int v12 = *((unsigned __int16 *)a7 + 4);
      int v13 = (__int16)v12;
      unsigned int v14 = v12 >> 5;
      if (v13 >= 0) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = *((unsigned int *)a7 + 3);
      }
      icu::UnicodeString::doReplace((uint64_t)a7, 0LL, v15, (uint64_t)v34, 0, 1LL);
    }

    else
    {
      unsigned int v16 = a5 == 0;
      if (a3) {
        __int16 v17 = 0;
      }
      else {
        __int16 v17 = 58;
      }
      if (v11 < 0x5265C00)
      {
        if (a6) {
          unsigned int v18 = 1;
        }
        else {
          unsigned int v18 = 2;
        }
        unsigned int v19 = v11 / 0x36EE80;
        unsigned int v20 = v11 % 0x36EE80;
        v34[0] = v19;
        v34[1] = v20 / 0xEA60;
        v34[2] = v20 % 0xEA60 / 0x3E8;
        if (v18 > v16)
        {
          while (!v34[v18])
          {
            if ((int)--v18 <= (int)v16)
            {
              unsigned int v18 = a5 == 0;
              break;
            }
          }
        }

        __int16 v21 = 43;
        if (a2 < 0 && (v18 & 0x80000000) == 0)
        {
          uint64_t v22 = v18 + 1;
          int v23 = v34;
          while (!*v23++)
          {
            if (!--v22)
            {
              __int16 v21 = 43;
              goto LABEL_33;
            }
          }

          __int16 v21 = 45;
        }

UChar **icu::TimeZoneFormat::formatOffsetLocalizedGMT( UChar **this, int a2, int a3, UChar **a4, UErrorCode *a5)
{
  if (*(int *)a5 < 1)
  {
    if ((a2 - 86400000) > 0xF5B34800)
    {
      if (a2)
      {
        if (a2 >= 0) {
          unsigned int v9 = a2;
        }
        else {
          unsigned int v9 = -a2;
        }
        unsigned int v10 = v9 / 0x36EE80;
        unsigned int v11 = v9 % 0x36EE80;
        unsigned int v12 = v11 / 0xEA60;
        unsigned int v13 = v11 % 0xEA60;
        if (a2 < 0)
        {
          if (v13 >= 0x3E8)
          {
            unsigned int v14 = (char *)(this + 161);
          }

          else if (a3 && v11 >> 5 < 0x753)
          {
            unsigned int v14 = (char *)(this + 163);
          }

          else
          {
            unsigned int v14 = (char *)(this + 160);
          }
        }

        else if (v13 >= 0x3E8)
        {
          unsigned int v14 = (char *)(this + 159);
        }

        else if (a3 && v11 >> 5 < 0x753)
        {
          unsigned int v14 = (char *)(this + 162);
        }

        else
        {
          unsigned int v14 = (char *)(this + 158);
        }

        uint64_t v15 = *(icu::UVector **)v14;
        icu::UnicodeString::copyFrom(a4, this + 142, 0);
        if (*((int *)v15 + 2) >= 1)
        {
          signed int v16 = 0;
          unsigned int v17 = (unsigned __int16)v13 / 0x3E8u;
          if (a3) {
            unsigned __int8 v18 = 1;
          }
          else {
            unsigned __int8 v18 = 2;
          }
          int v19 = v18;
          do
          {
            uint64_t v20 = icu::UVector::elementAt(v15, v16);
            switch(*(_DWORD *)(v20 + 16))
            {
              case 0:
                icu::UnicodeString::doAppend((uint64_t)a4, *(void *)(v20 + 8), 0, 0xFFFFFFFFLL);
                break;
              case 1:
                __int16 v21 = (icu::TimeZoneFormat *)this;
                uint64_t v22 = (icu::UnicodeString *)a4;
                int v23 = v10;
                int v24 = v19;
                goto LABEL_34;
              case 2:
                __int16 v21 = (icu::TimeZoneFormat *)this;
                uint64_t v22 = (icu::UnicodeString *)a4;
                int v23 = v12;
                goto LABEL_33;
              case 4:
                __int16 v21 = (icu::TimeZoneFormat *)this;
                uint64_t v22 = (icu::UnicodeString *)a4;
                int v23 = v17;
LABEL_33:
                int v24 = 2;
LABEL_34:
                icu::TimeZoneFormat::appendOffsetDigits(v21, v22, v23, v24);
                break;
              default:
                break;
            }

            ++v16;
          }

          while (v16 < *((_DWORD *)v15 + 2));
        }

        unsigned int v25 = *((unsigned __int16 *)this + 604);
        int v26 = (__int16)v25;
        unsigned int v27 = v25 >> 5;
        if (v26 >= 0) {
          uint64_t v28 = v27;
        }
        else {
          uint64_t v28 = *((unsigned int *)this + 303);
        }
        icu::UnicodeString::doAppend((uint64_t)a4, (const icu::UnicodeString *)(this + 150), 0, v28);
      }

      else
      {
        icu::UnicodeString::copyFrom(a4, this + 133, 0);
      }
    }

    else
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)a4);
      *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }

  else
  {
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a4);
  }

  return a4;
}

uint64_t icu::TimeZoneFormat::appendOffsetDigits( icu::TimeZoneFormat *this, icu::UnicodeString *a2, int a3, int a4)
{
  if (a3 > 9) {
    int v7 = -2;
  }
  else {
    int v7 = -1;
  }
  int v8 = v7 + a4;
  if (v7 + a4 >= 1)
  {
    do
    {
      icu::UnicodeString::append((uint64_t)a2, *((_DWORD *)this + 256));
      --v8;
    }

    while (v8);
  }

  if (a3 > 9) {
    icu::UnicodeString::append((uint64_t)a2, *((_DWORD *)this + a3 / 0xAuLL + 256));
  }
  return icu::UnicodeString::append((uint64_t)a2, *((_DWORD *)this + a3 % 10 + 256));
}

uint64_t icu::TimeZoneFormat::parseAsciiOffsetFields(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v6 = 0LL;
  uint64_t result = 0LL;
  uint64_t v26 = *MEMORY[0x1895F89C0];
  uint64_t v8 = *(int *)(a2 + 8);
  int v9 = *(_DWORD *)(a2 + 8);
  int v25 = 0;
  uint64_t v24 = 0LL;
  int v23 = -1;
  unint64_t v22 = 0xFFFFFFFF00000000LL;
  unint64_t v10 = *(unsigned __int16 *)(a1 + 8);
  int v11 = *(_DWORD *)(a1 + 12);
  uint64_t v12 = a1 + 10;
  uint64_t v13 = *(void *)(a1 + 24);
  if ((v10 & 2) == 0) {
    uint64_t v12 = v13;
  }
  uint64_t v14 = v12 + 2 * v8;
  while (1)
  {
    uint64_t v15 = v8 + v6;
    if ((v10 & 0x8000) != 0)
    {
      if (v15 >= v11) {
        break;
      }
      LODWORD(v16) = v11;
    }

    else
    {
      unint64_t v16 = v10 >> 5;
    }

    else {
      int v17 = *(unsigned __int16 *)(v14 + 2 * v6);
    }
    if (v17 == a3)
    {
      if ((_DWORD)result)
      {
        *((_DWORD *)&v22 + (int)result) = 0;
      }

      else if (!(_DWORD)v22)
      {
        int v20 = -1;
        int v21 = 0;
        goto LABEL_30;
      }
    }

    else
    {
      int v18 = *((_DWORD *)&v22 + (int)result);
      if (v18 == -1) {
        break;
      }
      unsigned int v19 = v17 - 48;
      if (v19 >= 0xA) {
        unsigned int v19 = -1;
      }
      if ((v19 & 0x80000000) != 0) {
        break;
      }
      *((_DWORD *)&v24 + (int)result) = v19 + 10 * *((_DWORD *)&v24 + (int)result);
      *((_DWORD *)&v22 + (int)result) = v18 + 1;
      if (v18 <= 0) {
        uint64_t result = result;
      }
      else {
        uint64_t result = (result + 1);
      }
    }

    ++v6;
  }

  if ((_DWORD)v22)
  {
    if ((int)v24 < 24)
    {
      int v20 = 0;
      uint64_t result = (3600000 * v24);
      if (HIDWORD(v22) == 2)
      {
        int v21 = v22;
        if (SHIDWORD(v24) <= 59)
        {
          uint64_t result = (result + 60000 * HIDWORD(v24));
          int v21 = v22 + 3;
          int v20 = 1;
          if (v23 == 2 && v25 <= 59)
          {
            uint64_t result = (result + 1000 * v25);
            int v21 = v22 + 6;
            int v20 = 2;
          }
        }
      }

      else
      {
        int v21 = v22;
      }
    }

    else
    {
      int v20 = 0;
      uint64_t result = 3600000 * (v24 / 0xA);
      int v21 = 1;
    }
  }

  else
  {
    uint64_t result = 0LL;
    int v21 = 0;
    int v20 = -1;
  }

uint64_t icu::TimeZoneFormat::parseAbuttingAsciiOffsetFields( uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  int v5 = *(_DWORD *)(a2 + 8);
  int v6 = ((__PAIR64__(2 * a3, a5) - 1) >> 32) + 2;
  uint64_t v7 = (2 * a4 + 2);
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  uint64_t v24 = 0LL;
  if ((int)v7 < 1)
  {
    LODWORD(v7) = 0;
  }

  else
  {
    uint64_t v8 = 0LL;
    unint64_t v9 = *(unsigned __int16 *)(a1 + 8);
    int v10 = *(_DWORD *)(a1 + 12);
    uint64_t v11 = *(void *)(a1 + 24);
    if ((v9 & 2) != 0) {
      uint64_t v11 = a1 + 10;
    }
    uint64_t v12 = v11 + 2LL * v5;
    while (1)
    {
      uint64_t v13 = v5 + v8;
      if ((v9 & 0x8000) != 0)
      {
        LODWORD(v14) = v10;
        if (v13 >= v10) {
          break;
        }
      }

      else
      {
        unint64_t v14 = v9 >> 5;
      }

      unsigned int v15 = *(unsigned __int16 *)(v12 + 2 * v8) - 48;
      if (v15 >= 0xA) {
        unsigned int v15 = -1;
      }
      if ((v15 & 0x80000000) != 0) {
        break;
      }
      *((_DWORD *)&v22 + v8++) = v15;
      if (v7 == v8) {
        goto LABEL_17;
      }
    }

    LODWORD(v7) = v8;
  }

uint64_t icu::TimeZoneFormat::parseOffsetLocalizedGMTPattern( icu::TimeZoneFormat *this, const icu::UnicodeString *a2, int a3, signed __int8 a4, int *a5)
{
  unsigned int v9 = *((unsigned __int16 *)this + 572);
  else {
    int v10 = v9 >> 5;
  }
  int v22 = v10;
  if (v10 >= 1)
  {
    if ((v9 & 1) != 0)
    {
      if ((*((_WORD *)a2 + 4) & 1) == 0)
      {
LABEL_13:
        uint64_t v13 = 0LL;
        goto LABEL_28;
      }
    }

    else
    {
      if ((v9 & 0x8000u) == 0) {
        int v11 = v9 >> 5;
      }
      else {
        int v11 = *((_DWORD *)this + 287);
      }
      if ((v9 & 2) != 0) {
        uint64_t v12 = (char *)this + 1146;
      }
      else {
        uint64_t v12 = (char *)*((void *)this + 145);
      }
      if (icu::UnicodeString::doCaseCompare( (uint64_t)a2,  a3,  v10,  (uint64_t)v12,  v11 & (v11 >> 31),  v11 & ~(v11 >> 31),  0)) {
        goto LABEL_13;
      }
    }
  }

  int v14 = v10 + a3;
  uint64_t v13 = icu::TimeZoneFormat::parseOffsetFields(this, a2, v10 + a3, 0, &v22);
  int v15 = v22;
  if (v22)
  {
    unsigned int v16 = *((unsigned __int16 *)this + 604);
    else {
      int v17 = v16 >> 5;
    }
    if (v17 >= 1)
    {
      if ((v16 & 1) != 0)
      {
        if ((*((_WORD *)a2 + 4) & 1) == 0) {
          goto LABEL_28;
        }
      }

      else
      {
        if ((v16 & 0x8000u) == 0) {
          int v18 = v16 >> 5;
        }
        else {
          int v18 = *((_DWORD *)this + 303);
        }
        if ((v16 & 2) != 0) {
          int v19 = (char *)this + 1210;
        }
        else {
          int v19 = (char *)*((void *)this + 153);
        }
        if (icu::UnicodeString::doCaseCompare( (uint64_t)a2,  v22 + v14,  v17,  (uint64_t)v19,  v18 & (v18 >> 31),  v18 & ~(v18 >> 31),  0)) {
          goto LABEL_28;
        }
      }
    }

    int v20 = v15 + v10 + v17;
    goto LABEL_31;
  }

uint64_t icu::TimeZoneFormat::parseOffsetDefaultLocalizedGMT( icu::TimeZoneFormat *this, const icu::UnicodeString *a2, int a3, int *a4)
{
  uint64_t v8 = 0LL;
  while (1)
  {
    int32_t v9 = u_strlen((const UChar *)&aGmt_1[v8]);
    v8 += 4LL;
    if (v8 == 12) {
      goto LABEL_17;
    }
  }

  if (!v9) {
    goto LABEL_17;
  }
  unsigned int v10 = v9 + a3;
  int v11 = v9 + a3 + 1;
  unsigned int v12 = *((unsigned __int16 *)a2 + 4);
  if (*((__int16 *)a2 + 4) < 0)
  {
    int v13 = *((_DWORD *)a2 + 3);
    if (v11 >= v13) {
      goto LABEL_17;
    }
  }

  else
  {
    int v13 = v12 >> 5;
  }

  if (v13 <= v10) {
    goto LABEL_17;
  }
  if ((v12 & 2) != 0) {
    int v14 = (char *)a2 + 10;
  }
  else {
    int v14 = (char *)*((void *)a2 + 3);
  }
  int v15 = *(unsigned __int16 *)&v14[2 * v10];
  if (v15 == 43)
  {
    int v16 = 1;
    goto LABEL_20;
  }

  if (v15 != 45)
  {
LABEL_17:
    uint64_t result = 0LL;
    int v18 = 0;
    goto LABEL_18;
  }

  int v16 = -1;
LABEL_20:
  int v26 = 0;
  int v19 = icu::TimeZoneFormat::parseDefaultOffsetFields(this, (uint64_t)a2, v11, 58, &v26);
  int v20 = v26;
  unsigned int v21 = *((unsigned __int16 *)a2 + 4);
  int v22 = (__int16)v21;
  unsigned int v23 = v21 >> 5;
  if (v22 < 0) {
    unsigned int v23 = *((_DWORD *)a2 + 3);
  }
  if (v26 != v23 - v11)
  {
    int v25 = 0;
    int v24 = icu::TimeZoneFormat::parseAbuttingOffsetFields(this, a2, v11, &v25);
    if (v20 <= v25)
    {
      int v19 = v24;
      int v20 = v25;
    }
  }

  uint64_t result = (v19 * v16);
  int v18 = v9 + v20 + 1;
LABEL_18:
  *a4 = v18;
  return result;
}

uint64_t icu::TimeZoneFormat::parseOffsetFields( icu::TimeZoneFormat *this, const icu::UnicodeString *a2, int a3, signed __int8 a4, int *a5)
{
  uint64_t v9 = 0LL;
  *a5 = 0;
  memset(v19, 0, sizeof(v19));
  while (1)
  {
    int v10 = icu::TimeZoneFormat::parseOffsetFieldsWithPattern( this,  a2,  a3,  *((icu::UVector **)this + dword_180A3D834[v9] + 158),  0,  &v19[2],  &v19[1],  v19);
    if (v10 >= 1) {
      break;
    }
    if (++v9 == 6) {
      return 0LL;
    }
  }

  int v12 = v10;
  else {
    int v13 = dword_180A3D8F0[v9];
  }
  if (*((_BYTE *)this + 1312))
  {
    uint64_t v14 = 0LL;
    int v18 = 0;
    *(void *)int v17 = 0LL;
    while (1)
    {
      int v15 = icu::TimeZoneFormat::parseOffsetFieldsWithPattern( this,  a2,  a3,  *((icu::UVector **)this + dword_180A3D834[v14] + 158),  1,  &v18,  &v17[1],  v17);
      if (v15 >= 1) {
        break;
      }
      if (++v14 == 6)
      {
        int v16 = 1;
        goto LABEL_16;
      }
    }

    int v16 = v14 >= 5 ? -1 : dword_180A3D8F0[v14];
LABEL_16:
    if (v15 > v12)
    {
      v19[2] = v18;
      *(void *)int v19 = *(void *)v17;
      int v13 = v16;
      int v12 = v15;
    }

    if (v12 < 1) {
      return 0LL;
    }
  }

  uint64_t result = (1000 * v13 * (v19[0] + 60 * (v19[1] + 60 * v19[2])));
  *a5 = v12;
  return result;
}

uint64_t icu::TimeZoneFormat::parseOffsetFieldsWithPattern( icu::TimeZoneFormat *this, const icu::UnicodeString *a2, int a3, icu::UVector *a4, int a5, int *a6, int *a7, int *a8)
{
  if (*((int *)a4 + 2) >= 1)
  {
    unsigned int v11 = 0;
    int v34 = 0;
    int v35 = 0;
    int v12 = 0;
    if (a5) {
      unsigned __int8 v13 = 1;
    }
    else {
      unsigned __int8 v13 = 2;
    }
    unsigned int v33 = v13;
    int v14 = a3;
    while (2)
    {
      int v36 = 0;
      uint64_t v15 = icu::UVector::elementAt(a4, v11);
      switch(*(_DWORD *)(v15 + 16))
      {
        case 0:
          int v16 = *(const UChar **)(v15 + 8);
          int32_t v17 = u_strlen(v16);
          if (!v11)
          {
            unsigned int v18 = *((unsigned __int16 *)a2 + 4);
            int v19 = (__int16)v18;
            LODWORD(v20) = v18 >> 5;
            int v20 = v19 >= 0 ? (uint64_t *)v20 : (uint64_t *)*((unsigned int *)a2 + 3);
            if (v14 < (int)v20)
            {
              unsigned int v21 = (icu::PatternProps *)icu::UnicodeString::char32At(v20, a2, v14);
              if (!icu::PatternProps::isWhiteSpace(v21) && v17 >= 1)
              {
                do
                {
                  int v22 = (icu::PatternProps *)*v16;
                  if (((unsigned __int16)v22 & 0xF800) == 0xD800 && ((unsigned __int16)v22 & 0x400) == 0 && v17 != 1)
                  {
                    int v23 = v16[1];
                    BOOL v24 = (v23 & 0xFC00) == 56320;
                    unsigned int v25 = v23 + ((_DWORD)v22 << 10) - 56613888;
                    if (v24) {
                      int v22 = (icu::PatternProps *)v25;
                    }
                    else {
                      int v22 = (icu::PatternProps *)*v16;
                    }
                  }

                  if (!icu::PatternProps::isWhiteSpace(v22)) {
                    break;
                  }
                  unsigned int v26 = v22 < 0x10000 ? 1 : 2;
                  v16 += v26;
                  BOOL v27 = __OFSUB__(v17, v26);
                  v17 -= v26;
                }

                while (!((v17 < 0) ^ v27 | (v17 == 0)));
              }
            }
          }

          goto LABEL_36;
        case 1:
          int v12 = icu::TimeZoneFormat::parseOffsetFieldWithLocalizedDigits(this, a2, v14, 1u, v33, 0, 23, &v36);
          goto LABEL_31;
        case 2:
          int v34 = icu::TimeZoneFormat::parseOffsetFieldWithLocalizedDigits(this, a2, v14, 2u, 2u, 0, 59, &v36);
          goto LABEL_31;
        case 4:
          int v35 = icu::TimeZoneFormat::parseOffsetFieldWithLocalizedDigits(this, a2, v14, 2u, 2u, 0, 59, &v36);
LABEL_31:
          int32_t v17 = v36;
          if (!v36) {
            goto LABEL_36;
          }
LABEL_32:
          v14 += v17;
          continue;
        default:
LABEL_36:
          uint64_t result = 0LL;
          *a8 = 0;
          *a7 = 0;
          *a6 = 0;
          return result;
      }
    }
  }

  int v12 = 0;
  int v34 = 0;
  int v35 = 0;
  int v14 = a3;
LABEL_35:
  *a6 = v12;
  *a7 = v34;
  uint64_t result = (v14 - a3);
  *a8 = v35;
  return result;
}

uint64_t icu::TimeZoneFormat::parseOffsetFieldWithLocalizedDigits( icu::TimeZoneFormat *this, const icu::UnicodeString *a2, int a3, unsigned int a4, unsigned int a5, int a6, int a7, int *a8)
{
  uint64_t v10 = 0LL;
  unsigned int v11 = 0;
  *a8 = 0;
  unsigned int v12 = *((unsigned __int16 *)a2 + 4);
  int v13 = (__int16)v12;
  int v14 = v12 >> 5;
  if (v13 < 0) {
    int v14 = *((_DWORD *)a2 + 3);
  }
  int v30 = 0;
  BOOL v15 = v14 <= a3 || a5 == 0;
  int v16 = a3;
  if (!v15)
  {
    unsigned int v11 = 0;
    uint64_t v21 = 0LL;
    int v16 = a3;
    while (1)
    {
      int v22 = icu::TimeZoneFormat::parseSingleLocalizedDigit(this, a2, v16, &v30);
      if (v22 < 0) {
        break;
      }
      uint64_t v10 = (v22 + 10 * v21);
      ++v11;
      v16 += v30;
      unsigned int v23 = *((unsigned __int16 *)a2 + 4);
      int v24 = (__int16)v23;
      int v25 = v23 >> 5;
      if (v24 < 0) {
        int v25 = *((_DWORD *)a2 + 3);
      }
      BOOL v26 = v16 >= v25 || v11 >= a5;
      uint64_t v21 = (v22 + 10 * v21);
      if (v26) {
        goto LABEL_19;
      }
    }

    uint64_t v10 = v21;
  }

uint64_t icu::TimeZoneFormat::parseAbuttingOffsetFields( icu::TimeZoneFormat *this, const icu::UnicodeString *a2, int a3, int *a4)
{
  uint64_t v8 = 0LL;
  uint64_t v23 = *MEMORY[0x1895F89C0];
  uint64_t v20 = 0LL;
  uint64_t v21 = 0LL;
  uint64_t v22 = 0LL;
  memset(v19, 0, sizeof(v19));
  int v18 = 0;
  int v9 = a3;
  while (1)
  {
    int v10 = icu::TimeZoneFormat::parseSingleLocalizedDigit(this, a2, v9, &v18);
    *((_DWORD *)&v20 + v8) = v10;
    if (v10 < 0) {
      break;
    }
    v9 += v18;
    *((_DWORD *)v19 + v8++) = v9 - a3;
    if (v8 == 6) {
      goto LABEL_7;
    }
  }

  if (!(_DWORD)v8)
  {
    int v17 = 0;
    uint64_t result = 0LL;
    goto LABEL_24;
  }

uint64_t icu::TimeZoneFormat::parseSingleLocalizedDigit( icu::TimeZoneFormat *this, const icu::UnicodeString *a2, int a3, int *a4)
{
  *a4 = 0;
  unsigned int v4 = *((unsigned __int16 *)a2 + 4);
  int v5 = (__int16)v4;
  LODWORD(v6) = v4 >> 5;
  if (v5 >= 0) {
    unint64_t v6 = v6;
  }
  else {
    unint64_t v6 = *((unsigned int *)a2 + 3);
  }
  UChar32 v11 = icu::UnicodeString::char32At((uint64_t *)v6, a2, a3);
  uint64_t v12 = 0LL;
  while (v11 != *((_DWORD *)this + v12 + 256))
  {
    if (++v12 == 10)
    {
      uint64_t v12 = u_charDigitValue(v11);
      break;
    }
  }

  *a4 = icu::UnicodeString::moveIndex32(a2, a3, 1) - a3;
  return v12;
}

uint64_t icu::TimeZoneFormat::parseDefaultOffsetFields( icu::TimeZoneFormat *a1, uint64_t a2, int a3, int a4, _DWORD *a5)
{
  unsigned int v10 = *(unsigned __int16 *)(a2 + 8);
  int v11 = (__int16)v10;
  int v12 = v10 >> 5;
  if (v11 >= 0) {
    int v13 = v12;
  }
  else {
    int v13 = *(_DWORD *)(a2 + 12);
  }
  int v31 = 0;
  *a5 = 0;
  int v14 = icu::TimeZoneFormat::parseOffsetFieldWithLocalizedDigits( a1,  (const icu::UnicodeString *)a2,  a3,  1u,  2u,  0,  23,  &v31);
  if (!v31) {
    return 0LL;
  }
  int v15 = v14;
  int v16 = v31 + a3;
  int v17 = v31 + a3 + 1;
  if (v17 >= v13
    || ((unsigned int v18 = *(unsigned __int16 *)(a2 + 8), (v18 & 0x8000u) == 0) ? (v19 = v18 >> 5) : (v19 = *(_DWORD *)(a2 + 12)),
        v19 <= v16
      ? (int v21 = 0xFFFF)
      : ((v18 & 2) != 0 ? (uint64_t v20 = a2 + 10) : (uint64_t v20 = *(void *)(a2 + 24)), v21 = *(unsigned __int16 *)(v20 + 2LL * v16)),
        v21 != a4))
  {
    int v22 = 0;
LABEL_27:
    int v23 = 0;
    goto LABEL_28;
  }

  int v22 = icu::TimeZoneFormat::parseOffsetFieldWithLocalizedDigits( a1,  (const icu::UnicodeString *)a2,  v16 + 1,  2u,  2u,  0,  59,  &v31);
  int v23 = v31;
  if (!v31) {
    goto LABEL_28;
  }
  int v16 = v17 + v31;
  int v24 = v17 + v31 + 1;
  if (v24 >= v13) {
    goto LABEL_27;
  }
  unsigned int v25 = *(unsigned __int16 *)(a2 + 8);
  unsigned int v26 = (v25 & 0x8000u) == 0 ? v25 >> 5 : *(_DWORD *)(a2 + 12);
  if (v26 <= v16)
  {
    int v28 = 0xFFFF;
  }

  else
  {
    uint64_t v27 = (v25 & 2) != 0 ? a2 + 10 : *(void *)(a2 + 24);
    int v28 = *(unsigned __int16 *)(v27 + 2LL * v16);
  }

  if (v28 != a4) {
    goto LABEL_27;
  }
  int v30 = icu::TimeZoneFormat::parseOffsetFieldWithLocalizedDigits( a1,  (const icu::UnicodeString *)a2,  v16 + 1,  2u,  2u,  0,  59,  &v31);
  if (v31) {
    int v16 = v24 + v31;
  }
  int v23 = 1000 * v30;
LABEL_28:
  if (v16 == a3) {
    return 0LL;
  }
  *a5 = v16 - a3;
  return (3600000 * v15 + 60000 * v22 + v23);
}

icu::UnicodeString *icu::TimeZoneFormat::formatOffsetWithAsciiDigits( int a1, int a2, int a3, int a4, icu::UnicodeString *this)
{
  LODWORD(v6) = a4;
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (a1 >= 0) {
    unsigned int v9 = a1;
  }
  else {
    unsigned int v9 = -a1;
  }
  if (a1 >= 0) {
    __int16 v10 = 43;
  }
  else {
    __int16 v10 = 45;
  }
  LOWORD(v20[0]) = v10;
  icu::UnicodeString::unBogus((uint64_t)this);
  unsigned int v11 = *((unsigned __int16 *)this + 4);
  int v12 = (__int16)v11;
  unsigned int v13 = v11 >> 5;
  if (v12 >= 0) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = *((unsigned int *)this + 3);
  }
  icu::UnicodeString::doReplace((uint64_t)this, 0LL, v14, (uint64_t)v20, 0, 1LL);
  v20[0] = v9 / 0x36EE80;
  v20[1] = v9 % 0x36EE80 / 0xEA60;
  v20[2] = v9 % 0x36EE80 % 0xEA60 / 0x3E8;
  if ((int)v6 <= a3)
  {
LABEL_15:
    if ((v6 & 0x80000000) != 0) {
      return this;
    }
    goto LABEL_18;
  }

  uint64_t v6 = (int)v6;
  while (!v20[v6])
  {
    if (--v6 <= a3)
    {
      LODWORD(v6) = a3;
      goto LABEL_15;
    }
  }

  if ((v6 & 0x80000000) == 0)
  {
LABEL_18:
    unint64_t v15 = 0LL;
    uint64_t v16 = 4LL * (v6 + 1);
    do
    {
      if (a2 && v15)
      {
        __int16 v19 = a2;
        icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v19, 0, 1LL);
      }

      int v17 = v20[v15 / 4];
      __int16 v19 = (__int16)v17 / 10 + 48;
      icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v19, 0, 1LL);
      __int16 v19 = v17 % 10 + 48;
      icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v19, 0, 1LL);
      v15 += 4LL;
    }

    while (v16 != v15);
  }

  return this;
}

const icu::UnicodeString *icu::TimeZoneFormat::unquote( icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::UnicodeString *a3)
{
  unsigned int v5 = *((unsigned __int16 *)this + 4);
  int v6 = (__int16)v5;
  int32_t v7 = v5 >> 5;
  if (v6 >= 0) {
    int32_t v8 = v7;
  }
  else {
    int32_t v8 = *((_DWORD *)this + 3);
  }
  if ((icu::UnicodeString::doIndexOf((uint64_t)this, 0x27u, 0, v8) & 0x80000000) == 0)
  {
    unint64_t v9 = 0LL;
    int v10 = 0;
    if ((*((_WORD *)a2 + 4) & 1) != 0) {
      __int16 v11 = 2;
    }
    else {
      __int16 v11 = *((_WORD *)a2 + 4) & 0x1F;
    }
    *((_WORD *)a2 + 4) = v11;
    while (1)
    {
      int v12 = *((__int16 *)this + 4);
      if (v12 < 0)
      {
        unint64_t v13 = *((unsigned int *)this + 3);
      }

      else
      {
        unint64_t v13 = (unint64_t)*((unsigned __int16 *)this + 4) >> 5;
      }

      if (v13 <= v9) {
        break;
      }
      if ((v12 & 2) != 0) {
        uint64_t v14 = (char *)this + 10;
      }
      else {
        uint64_t v14 = (char *)*((void *)this + 3);
      }
      int v15 = *(unsigned __int16 *)&v14[2 * v9];
      if (v15 != 39) {
        goto LABEL_22;
      }
      if (!v10)
      {
        int v10 = 1;
        goto LABEL_24;
      }

      __int16 v18 = 39;
      uint64_t v16 = &v18;
LABEL_23:
      icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)v16, 0, 1LL);
      int v10 = 0;
LABEL_24:
      ++v9;
    }

    LOWORD(v15) = -1;
LABEL_22:
    __int16 v19 = v15;
    uint64_t v16 = &v19;
    goto LABEL_23;
  }

  icu::UnicodeString::copyFrom((UChar **)a2, (UChar **)this, 0);
  return a2;
}

uint64_t sub_1809A6204(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_1809A621C(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_17(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_1809A6230(uint64_t a1, int a2, uint64_t a3, int *a4)
{
  if (*a4 > 0) {
    return 0LL;
  }
  int v6 = *(icu::UVector **)a3;
  if (*(void *)a3)
  {
    if ((!*(_BYTE *)(a3 + 14) || (int v6 = (icu::UVector *)icu::UVector::elementAt(v6, 0)) != 0LL)
      && *(_DWORD *)(a1 + 8) < a2)
    {
      *(void *)(a1 + 16) = v6;
      *(_DWORD *)(a1 + 8) = a2;
    }
  }

  return 1LL;
}

uint64_t sub_1809A6298()
{
  if (qword_18C535B20) {
    (*(void (**)(uint64_t))(*(void *)qword_18C535B20 + 8LL))(qword_18C535B20);
  }
  qword_18C535B20 = 0LL;
  atomic_store(0, &dword_18C535B80);
  if (qword_18C535B28) {
    (*(void (**)(uint64_t))(*(void *)qword_18C535B28 + 8LL))(qword_18C535B28);
  }
  qword_18C535B28 = 0LL;
  atomic_store(0, &dword_18C535B88);
  return 1LL;
}

icu::UnicodeString *sub_1809A6304(icu::UVector **a1, unsigned int a2, icu::UnicodeString *a3)
{
  uint64_t v4 = icu::UVector::elementAt(*a1, a2);
  if (v4 && *(void *)(*(void *)v4 + 8LL))
  {
    int v6 = *(const UChar **)(*(void *)v4 + 8LL);
    icu::UnicodeString::setTo(a3, 1, &v6, -1);
  }

  else
  {
    icu::UnicodeString::setToBogus(a3);
  }

  return a3;
}

uint64_t sub_1809A6374(void *a1)
{
  *a1 = off_18972BF18;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return nullsub_17(a1);
}

void sub_1809A63B4(void *a1)
{
  *a1 = off_18972BF18;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = (void *)nullsub_17(a1);
  icu::UMemory::operator delete(v3);
}

uint64_t sub_1809A63F8(uint64_t a1, unint64_t a2, _BYTE *a3, int *a4)
{
  if (*a4 > 0) {
    return 0LL;
  }
  if (*(void *)a3)
  {
    int v7 = a2;
    if (a3[14])
    {
      int v9 = *(_DWORD *)(*(void *)a3 + 8LL);
      if (v9 < 1) {
        return 1LL;
      }
    }

    else
    {
      int v9 = 1;
    }

    unsigned int v10 = 0;
    do
    {
      __int16 v11 = *(_DWORD **)a3;
      if (a3[14]) {
        __int16 v11 = (_DWORD *)icu::UVector::elementAt(*(icu::UVector **)a3, v10);
      }
      if (!v11) {
        break;
      }
      if ((*(_DWORD *)(a1 + 8) & *v11) != 0)
      {
        if (!*(void *)(a1 + 16))
        {
          int v12 = icu::UMemory::operator new(0LL, (icu::UMemory *)0x28, a2);
          if (!v12)
          {
            if (*a4 > 0) {
              return 0LL;
            }
            uint64_t result = 0LL;
LABEL_25:
            *a4 = 7;
            return result;
          }

          uint64_t v13 = icu::UVector::UVector((uint64_t)v12, (uint64_t)uprv_free, 0LL, a4);
          if (*a4 > 0)
          {
            (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
            return 0LL;
          }

          *(void *)(a1 + 16) = v13;
        }

        uint64_t result = (uint64_t)uprv_malloc(0x10uLL);
        if (!result) {
          goto LABEL_25;
        }
        *(void *)uint64_t result = v11;
        *(_DWORD *)(result + 8) = v7;
        *(_DWORD *)(result + 12) = 0;
        icu::UVector::adoptElement(*(icu::UVector **)(a1 + 16), (void *)result, (UErrorCode *)a4);
        if (*a4 > 0) {
          return 0LL;
        }
        if (*(_DWORD *)(a1 + 24) < v7) {
          *(_DWORD *)(a1 + 24) = v7;
        }
      }
    }

    while (v9 != ++v10);
  }

  return 1LL;
}

uint64_t sub_1809A655C(uint64_t a1, char **a2, UErrorCode *a3)
{
  *(void *)a1 = off_18972BF40;
  icu::Locale::Locale((icu::Locale *)(a1 + 8), (uint64_t)a2);
  *(void *)(a1 + 232) = 0LL;
  *(void *)(a1 + 240) = 0LL;
  *(void *)(a1 + 248) = 0LL;
  icu::UnicodeString::UnicodeString(a1 + 264, 0);
  icu::UnicodeString::UnicodeString(a1 + 336, 0);
  *(void *)(a1 + 400) = 0LL;
  icu::ZNStringPool::ZNStringPool((icu::ZNStringPool *)(a1 + 408), a3);
  icu::TextTrieMap::TextTrieMap(a1 + 424, 1, j__uprv_free_3);
  *(_BYTE *)(a1 + 480) = 0;
  sub_1809A65F8((void *)a1, a2, (const icu::Locale *)a3);
  return a1;
}

void *sub_1809A65F8(void *result, char **a2, const icu::Locale *a3)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  if (*(int *)a3 <= 0)
  {
    uint64_t v5 = (uint64_t)result;
    uint64_t result = icu::TimeZoneNames::createInstance((icu::TimeZoneNames *)a2, a3, (UErrorCode *)a3);
    *(void *)(v5 + 232) = result;
    if (*(int *)a3 <= 0)
    {
      memset(v32, 0, 64);
      unint64_t v29 = L"{0}";
      icu::UnicodeString::UnicodeString(v32, 1LL, &v29);
      memset(v31, 0, sizeof(v31));
      int v28 = L"{1} ({0})";
      icu::UnicodeString::UnicodeString(v31, 1LL, &v28);
      int v27 = 0;
      uint64_t v6 = ures_open("icudt74l-zone", a2[5], &v27);
      uint64_t v7 = ures_getByKeyWithFallback(v6, "zoneStrings", v6, (UErrorCode *)&v27);
      uint64_t v8 = v7;
      if (v27 <= 0)
      {
        StringByKeyWithFallback = ures_getStringByKeyWithFallback(v7, "regionFormat", 0LL, (UErrorCode *)&v27);
        if (v27 <= 0)
        {
          uint64_t v10 = (uint64_t)StringByKeyWithFallback;
          if (u_strlen(StringByKeyWithFallback) >= 1)
          {
            icu::UnicodeString::unBogus((uint64_t)v32);
            if (SLOWORD(v32[2]) >= 0) {
              uint64_t v11 = LOWORD(v32[2]) >> 5;
            }
            else {
              uint64_t v11 = v32[3];
            }
            icu::UnicodeString::doReplace((uint64_t)v32, 0LL, v11, v10, 0, 0xFFFFFFFFLL);
          }
        }

        int v27 = 0;
        int v12 = ures_getStringByKeyWithFallback(v8, "fallbackFormat", 0LL, (UErrorCode *)&v27);
        if (v27 <= 0)
        {
          uint64_t v13 = (uint64_t)v12;
          if (u_strlen(v12) >= 1)
          {
            icu::UnicodeString::unBogus((uint64_t)v31);
            if (SLOWORD(v31[2]) >= 0) {
              uint64_t v14 = LOWORD(v31[2]) >> 5;
            }
            else {
              uint64_t v14 = v31[3];
            }
            icu::UnicodeString::doReplace((uint64_t)v31, 0LL, v14, v13, 0, 0xFFFFFFFFLL);
          }
        }
      }

      ures_close(v8);
      icu::SimpleFormatter::applyPatternMinMaxArguments( (icu::SimpleFormatter *)(v5 + 256),  (const icu::UnicodeString *)v32,  1,  1,  0,  (UErrorCode *)a3);
      icu::SimpleFormatter::applyPatternMinMaxArguments( (icu::SimpleFormatter *)(v5 + 328),  (const icu::UnicodeString *)v31,  2,  2,  0,  (UErrorCode *)a3);
      if (*(int *)a3 < 1
        && (*(void *)(v5 + 400) = icu::LocaleDisplayNames::createInstance((uint64_t)a2, 0LL),
            *(void *)(v5 + 240) = uhash_open((uint64_t)uhash_hashUChars, (uint64_t)uhash_compareUChars, 0LL, (int *)a3),
            *(int *)a3 < 1)
        && (int v15 = uhash_open((uint64_t)sub_1809A6AE0, (uint64_t)sub_1809A6BD8, 0LL, (int *)a3),
            *(void *)(v5 + 248) = v15,
            *(int *)a3 < 1))
      {
        uhash_setKeyDeleter((uint64_t)v15, (uint64_t)uprv_free);
        int v18 = strlen((const char *)(v5 + 34));
        if (v18)
        {
          int Country = (char *)(v5 + 481);
          if (v18 > 3) {
            *int Country = 0;
          }
          else {
            int Country = strcpy(Country, (const char *)(v5 + 34));
          }
        }

        else
        {
          memset(&v30[1], 0, 56);
          v30[0] = (char *)&v30[1] + 5;
          LODWORD(v30[1]) = 40;
          v26[0] = 0LL;
          v26[1] = 0LL;
          icu::CharStringByteSink::CharStringByteSink(v26, (uint64_t)v30);
          ulocimp_addLikelySubtags(*(void *)(v5 + 48), v26, a3);
          icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v26);
          int Country = (char *)uloc_getCountry((uint64_t)v30[0], (char *)(v5 + 481), 4, (int *)a3);
          int v20 = *(_DWORD *)a3;
          if (v20 <= 0) {
            *(_BYTE *)(v5 + (int)Country + 481) = 0;
          }
          else {
            sub_1809A6A78(v5);
          }
          uint64_t v16 = (void *)BYTE4(v30[1]);
          if (BYTE4(v30[1])) {
            uprv_free(v30[0]);
          }
          if (v20 > 0) {
            goto LABEL_20;
          }
        }

        Default = (icu::ZoneMeta *)icu::TimeZone::createDefault((icu::TimeZone *)Country);
        CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID(Default, v22);
        if (CanonicalCLDRID)
        {
          unsigned int v25 = CanonicalCLDRID;
          icu::UnicodeString::UnicodeString(v30, 1LL, &v25);
          sub_1809A6C34(v5, (uint64_t)v30);
          icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)v30);
        }

        (*(void (**)(icu::ZoneMeta *))(*(void *)Default + 8LL))(Default);
      }

      else
      {
        sub_1809A6A78(v5);
      }

void *sub_1809A6A1C(void *a1)
{
  *a1 = off_18972BF40;
  uint64_t v2 = (icu::Locale *)(a1 + 1);
  sub_1809A6A78((uint64_t)a1);
  icu::TextTrieMap::~TextTrieMap((icu::TextTrieMap *)(a1 + 53));
  icu::ZNStringPool::~ZNStringPool((icu::ZNStringPool *)(a1 + 51));
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 41));
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 32));
  icu::Locale::~Locale(v2);
  return a1;
}

void sub_1809A6A78(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 400);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 232);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  uhash_close(*(_BYTE **)(a1 + 240));
  uhash_close(*(_BYTE **)(a1 + 248));
}

void sub_1809A6ACC(void *a1)
{
  uint64_t v1 = sub_1809A6A1C(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t *sub_1809A6AE0(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  memset(v12, 0, sizeof(v12));
  icu::UnicodeString::UnicodeString((uint64_t)v12, *(void *)a1);
  __int16 v11 = 38;
  uint64_t v2 = icu::UnicodeString::doAppend((uint64_t)v12, (uint64_t)&v11, 0, 1LL);
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = icu::UnicodeString::doAppend(v2, v3, 0, 0xFFFFFFFFLL);
  __int16 v11 = 35;
  uint64_t v5 = icu::UnicodeString::doAppend(v4, (uint64_t)&v11, 0, 1LL);
  if (*(_BYTE *)(a1 + 16)) {
    __int16 v6 = 76;
  }
  else {
    __int16 v6 = 83;
  }
  __int16 v11 = v6;
  icu::UnicodeString::doAppend(v5, (uint64_t)&v11, 0, 1LL);
  uint64_t v10 = v3;
  uint64_t v7 = icu::UnicodeString::doHashCode(&v10, (icu::UnicodeString *)v12);
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v12);
  return v7;
}

BOOL sub_1809A6BD8(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  BOOL result = 0LL;
  if (a1 && a2) {
    return *(void *)a1 == *(void *)a2
  }
        && *(void *)(a1 + 8) == *(void *)(a2 + 8)
        && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  return result;
}

void *sub_1809A6C34(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  sub_1809A7684(a1, a2);
  int v18 = 0;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  uint64_t v28 = 0LL;
  __int128 v27 = 0u;
  uint64_t v23 = 0LL;
  int v24 = off_18971B688;
  LOWORD(v25) = 2;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int16 v19 = off_18971B688;
  LOWORD(v20) = 2;
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, int *))(**(void **)(a1 + 232) + 48LL))( *(void *)(a1 + 232),  a2,  &v18);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v4 + 56LL))(v4, &v18);
  if (v5) {
    BOOL v6 = v18 <= 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    uint64_t v7 = (UChar **)v5;
    do
    {
      (*(void (**)(void, UChar **, uint64_t, void (***)(icu::UnicodeString *__hidden)))(**(void **)(a1 + 232) + 64LL))( *(void *)(a1 + 232),  v7,  a1 + 481,  &v24);
      unsigned int v8 = *(unsigned __int16 *)(a2 + 8);
      if ((v8 & 1) != 0)
      {
        if ((v25 & 1) == 0) {
          goto LABEL_19;
        }
      }

      else
      {
        int v9 = (__int16)v8;
        int v10 = v8 >> 5;
        if (v9 >= 0) {
          int v11 = v10;
        }
        else {
          int v11 = *(_DWORD *)(a2 + 12);
        }
        if ((v25 & 0x8000u) == 0LL) {
          int v12 = (unsigned __int16)v25 >> 5;
        }
        else {
          int v12 = DWORD1(v25);
        }
        if ((v25 & 1) != 0
          || v11 != v12
          || !icu::UnicodeString::doEquals((icu::UnicodeString *)a2, (const icu::UnicodeString *)&v24, v11))
        {
LABEL_19:
          for (uint64_t i = 0LL; i != 2; ++i)
          {
            (*(void (**)(void, UChar **, void, void (***)(icu::UnicodeString *__hidden)))(**(void **)(a1 + 232) + 72LL))( *(void *)(a1 + 232),  v7,  dword_180A3D968[i],  &v19);
          }
        }
      }

      uint64_t v7 = (UChar **)(*(uint64_t (**)(uint64_t, int *))(*(void *)v4 + 56LL))(v4, &v18);
      if (v7) {
        BOOL v14 = v18 < 1;
      }
      else {
        BOOL v14 = 0;
      }
    }

    while (v14);
  }

  (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v19);
  return icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v24);
}

icu::UnicodeString *sub_1809A6E40( uint64_t a1, icu::ZoneMeta *a2, int a3, icu::UnicodeString *this, double a5)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  icu::UnicodeString::setToBogus(this);
  if (a3 == 4 || a3 == 2)
  {
    sub_1809A7044(a1, a2, a3, this, a5);
    if (*((unsigned __int16 *)this + 4) <= 0x1Fu)
    {
      CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID(a2, v13);
      if (CanonicalCLDRID)
      {
        int v17 = CanonicalCLDRID;
        icu::UnicodeString::UnicodeString(v19, 1LL, &v17);
        sub_1809A6F8C(a1, (uint64_t)v19, this);
        icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v19);
      }
    }
  }

  else if (a3 == 1)
  {
    int v11 = icu::ZoneMeta::getCanonicalCLDRID(a2, v10);
    if (v11)
    {
      int v18 = v11;
      icu::UnicodeString::UnicodeString(v19, 1LL, &v18);
      sub_1809A6F8C(a1, (uint64_t)v19, this);
      icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v19);
    }
  }

  return this;
}

icu::UnicodeString *sub_1809A6F8C(uint64_t a1, uint64_t a2, icu::UnicodeString *this)
{
  if (*(unsigned __int16 *)(a2 + 8) > 0x1Fu
    && (umtx_lock((icu::UMutex *)&unk_18C535BA0),
        BOOL v6 = sub_1809A7684(a1, a2),
        umtx_unlock((std::mutex **)&unk_18C535BA0),
        v6))
  {
    uint64_t v7 = u_strlen(v6);
    icu::UnicodeString::unBogus((uint64_t)this);
    unsigned int v8 = *((unsigned __int16 *)this + 4);
    int v9 = (__int16)v8;
    unsigned int v10 = v8 >> 5;
    if (v9 >= 0) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = *((unsigned int *)this + 3);
    }
    icu::UnicodeString::doReplace((uint64_t)this, 0LL, v11, (uint64_t)v6, 0, v7);
  }

  else
  {
    icu::UnicodeString::setToBogus(this);
  }

  return this;
}

icu::UnicodeString *sub_1809A7044( uint64_t a1, icu::ZoneMeta *a2, int a3, icu::UnicodeString *this, double a5)
{
  uint64_t v61 = *MEMORY[0x1895F89C0];
  icu::UnicodeString::setToBogus(this);
  CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID(a2, v10);
  if (CanonicalCLDRID)
  {
    memset(v60, 0, 64);
    UErrorCode v32 = CanonicalCLDRID;
    icu::UnicodeString::UnicodeString(v60, 1LL, &v32);
    if (a3 == 2) {
      uint64_t v12 = 1LL;
    }
    else {
      uint64_t v12 = 8LL;
    }
    (*(void (**)(void, _BYTE *, uint64_t, icu::UnicodeString *))(**(void **)(a1 + 232) + 80LL))( *(void *)(a1 + 232),  v60,  v12,  this);
    uint64_t v13 = (void *)*((unsigned __int16 *)this + 4);
    memset(v59, 0, sizeof(v59));
    memset(v58, 0, sizeof(v58));
    icu::UnicodeString::UnicodeString(v58, v59, 0LL, 32LL);
    (*(void (**)(void, _BYTE *, _WORD *, double))(**(void **)(a1 + 232) + 56LL))( *(void *)(a1 + 232),  v60,  v58,  a5);
    BOOL v14 = (void *)v58[4];
    if (v58[4] >= 0x20u)
    {
      uint64_t v31 = 0LL;
      int v30 = 0;
      memset(v57, 0, sizeof(v57));
      (*(void (**)(icu::ZoneMeta *, void, uint64_t *, int *, char *, double))(*(void *)a2 + 48LL))( a2,  0LL,  &v31,  &v30,  (char *)&v31 + 4,  a5);
      BOOL v14 = (void *)HIDWORD(v31);
      if (SHIDWORD(v31) <= 0)
      {
        if (!v30)
        {
          int v15 = (const void *)(*(uint64_t (**)(icu::ZoneMeta *))(*(void *)a2 + 96LL))(a2);
          uint64_t v16 = v15;
          if (v15
          {
            __int128 v37 = 0u;
            __int128 v38 = 0u;
            icu::TimeZoneTransition::TimeZoneTransition(&v37);
            if ((*(unsigned int (**)(const void *, uint64_t, __int128 *, double))(*(void *)v16 + 120LL))( v16,  1LL,  &v37,  a5)
              && a5 - icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)&v37) < 1.58976e10
              && (int v17 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)&v37),
                  icu::TimeZoneRule::getDSTSavings(v17)))
            {
              BOOL v18 = 0;
            }

            else
            {
              __int128 v53 = 0u;
              __int128 v54 = 0u;
              icu::TimeZoneTransition::TimeZoneTransition(&v53);
              if ((*(unsigned int (**)(const void *, void, __int128 *, double))(*(void *)v16 + 112LL))( v16,  0LL,  &v53,  a5)
                && icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)&v53) - a5 < 1.58976e10)
              {
                __int16 v19 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)&v53);
                BOOL v18 = icu::TimeZoneRule::getDSTSavings(v19) == 0;
              }

              else
              {
                BOOL v18 = 1;
              }

              icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)&v53);
            }

            icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)&v37);
          }

          else
          {
            (*(void (**)(const void *, void, uint64_t *, int *, char *, double))(*(void *)v16 + 48LL))( v16,  0LL,  &v31,  &v30,  (char *)&v31 + 4,  a5 + -1.58976e10);
            BOOL v18 = 0;
            if (!v30)
            {
              (*(void (**)(const void *, void, uint64_t *, int *, char *, double))(*(void *)v16 + 48LL))( v16,  0LL,  &v31,  &v30,  (char *)&v31 + 4,  a5 + 1.58976e10);
              BOOL v18 = v30 == 0;
            }

            if (SHIDWORD(v31) >= 1)
            {
              (*(void (**)(const void *))(*(void *)v16 + 8LL))(v16);
              goto LABEL_47;
            }
          }

          (*(void (**)(const void *))(*(void *)v16 + 8LL))(v16);
          if (v18)
          {
            __int128 v55 = 0u;
            __int128 v56 = 0u;
            if (a3 == 2) {
              uint64_t v20 = 2LL;
            }
            else {
              uint64_t v20 = 16LL;
            }
            __int128 v53 = 0uLL;
            __int128 v54 = 0uLL;
            icu::UnicodeString::UnicodeString(&v53, v57, 0LL, 128LL);
            (*(void (**)(void, _BYTE *, uint64_t, __int128 *, double))(**(void **)(a1 + 232) + 96LL))( *(void *)(a1 + 232),  v60,  v20,  &v53,  a5);
            __int128 v21 = (void *)WORD4(v53);
            if (WORD4(v53) >= 0x20u)
            {
              icu::UnicodeString::copyFrom((UChar **)this, (UChar **)&v53, 0);
              __int128 v51 = 0u;
              __int128 v52 = 0u;
              __int128 v49 = 0u;
              __int128 v50 = 0u;
              __int128 v47 = 0u;
              __int128 v48 = 0u;
              __int128 v45 = 0u;
              __int128 v46 = 0u;
              __int128 v43 = 0u;
              __int128 v44 = 0u;
              __int128 v41 = 0u;
              __int128 v42 = 0u;
              __int128 v39 = 0u;
              __int128 v40 = 0u;
              __int128 v37 = 0u;
              __int128 v38 = 0u;
              __int128 v35 = 0u;
              __int128 v36 = 0u;
              __int128 v33 = 0u;
              __int128 v34 = 0u;
              icu::UnicodeString::UnicodeString(&v33, &v37, 0LL, 128LL);
              (*(void (**)(void, _WORD *, uint64_t, __int128 *))(**(void **)(a1 + 232) + 72LL))( *(void *)(a1 + 232),  v58,  v12,  &v33);
              icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v33);
            }

            icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)&v53);
          }
        }

        BOOL v14 = (void *)*((unsigned __int16 *)this + 4);
        if (v14 <= 0x1F)
        {
          __int128 v39 = 0u;
          __int128 v40 = 0u;
          __int128 v37 = 0u;
          __int128 v38 = 0u;
          icu::UnicodeString::UnicodeString(&v37, v57, 0LL, 128LL);
          (*(void (**)(void, _WORD *, uint64_t, __int128 *))(**(void **)(a1 + 232) + 72LL))( *(void *)(a1 + 232),  v58,  v12,  &v37);
          uint64_t v23 = (void *)WORD4(v37);
          if (WORD4(v37) < 0x20u)
          {
LABEL_46:
            icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v37);
            goto LABEL_47;
          }

          __int128 v55 = 0u;
          __int128 v56 = 0u;
          __int128 v53 = 0u;
          __int128 v54 = 0u;
          __int128 v35 = 0u;
          __int128 v36 = 0u;
          __int128 v33 = 0u;
          __int128 v34 = 0u;
          icu::UnicodeString::UnicodeString(&v33, &v53, 0LL, 32LL);
          (*(void (**)(void, _WORD *, uint64_t, __int128 *))(**(void **)(a1 + 232) + 64LL))( *(void *)(a1 + 232),  v58,  a1 + 481,  &v33);
          if (WORD4(v33) >= 0x20u && sub_18086B6D8((uint64_t)&v33, (uint64_t)v60))
          {
            uint64_t TimeZone = icu::TimeZone::createTimeZone((UChar **)&v33, v24);
            int v28 = 0;
            int v29 = 0;
            (*(void (**)(void *, uint64_t, int *, int *, char *, double))(*(void *)TimeZone + 48LL))( TimeZone,  1LL,  &v29,  &v28,  (char *)&v31 + 4,  (double)(int)v31 + a5 + (double)v30);
            (*(void (**)(void *))(*(void *)TimeZone + 8LL))(TimeZone);
            __int128 v26 = (void *)HIDWORD(v31);
            if (SHIDWORD(v31) > 0)
            {
LABEL_45:
              icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)&v33);
              goto LABEL_46;
            }

            if ((_DWORD)v31 != v29 || v30 != v28)
            {
              sub_1809A7A00(a1, (uint64_t)v60, (uint64_t)v58, a3 == 2, (unsigned __int16 *)&v37, this);
              goto LABEL_45;
            }
          }

          icu::UnicodeString::copyFrom((UChar **)this, (UChar **)&v37, 0);
          goto LABEL_45;
        }
      }
    }

UChar *sub_1809A7684(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  unsigned int v2 = *(unsigned __int16 *)(a2 + 8);
  int v3 = (__int16)v2;
  int v4 = v2 >> 5;
  if (v3 < 0) {
    int v4 = *(_DWORD *)(a2 + 12);
  }
  if (v4 > 128) {
    return 0LL;
  }
  UErrorCode v22 = U_ZERO_ERROR;
  __int16 v39 = 0;
  memset(v38, 0, sizeof(v38));
  __int128 v21 = (UChar *)v38;
  *((_WORD *)v38 + (int)icu::UnicodeString::extract(a2, &v21, 129, (int *)&v22)) = 0;
  unsigned int v8 = (void *)uhash_get(*(void *)(a1 + 240), (uint64_t)v38);
  if (!v8)
  {
    __int128 v34 = 0u;
    uint64_t v37 = 0LL;
    __int128 v36 = 0u;
    __int128 v35 = 0u;
    uint64_t v32 = 0LL;
    __int128 v33 = off_18971B688;
    LOWORD(v34) = 2;
    __int128 v29 = 0u;
    __int128 v31 = 0u;
    __int128 v30 = 0u;
    int v28 = off_18971B688;
    LOWORD(v29) = 2;
    char v20 = 0;
    icu::ZoneMeta::getCanonicalCountry((int32_t *)a2, (const icu::UnicodeString *)&v28, (UErrorCode *)&v20, v9);
    uint64_t v5 = 0LL;
    if ((unsigned __int16)v29 >= 0x20u)
    {
      if (v20)
      {
        *(_DWORD *)__int16 v19 = 0;
        if ((v29 & 0x8000u) == 0LL) {
          uint64_t v11 = (unsigned __int16)v29 >> 5;
        }
        else {
          uint64_t v11 = DWORD1(v29);
        }
        v19[(int)icu::UnicodeString::extract((uint64_t)&v28, 0, v11, v19, 4)] = 0;
        __int128 v24 = 0u;
        uint64_t v27 = 0LL;
        __int128 v26 = 0u;
        __int128 v25 = 0u;
        uint64_t v23 = off_18971B688;
        LOWORD(v24) = 2;
        (*(void (**)(void, char *))(**(void **)(a1 + 400) + 88LL))(*(void *)(a1 + 400), v19);
      }

      else
      {
        __int128 v24 = 0u;
        uint64_t v27 = 0LL;
        __int128 v26 = 0u;
        __int128 v25 = 0u;
        uint64_t v23 = off_18971B688;
        LOWORD(v24) = 2;
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 232) + 88LL))(*(void *)(a1 + 232), a2);
      }

      icu::SimpleFormatter::format( (icu::SimpleFormatter *)(a1 + 256),  (const icu::UnicodeString *)&v23,  (icu::UnicodeString *)&v33,  &v22);
      icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v23);
      unint64_t v14 = v22;
      if (v22 > U_ZERO_ERROR) {
        goto LABEL_26;
      }
      if ((unsigned __int16)v34 <= 0x1Fu)
      {
        uint64_t TimeZoneID = icu::ZoneMeta::findTimeZoneID((icu::ZoneMeta *)a2, v13);
LABEL_25:
        uhash_put(*(void *)(a1 + 240), TimeZoneID, (uint64_t)&unk_180A3D964, (int *)&v22);
LABEL_26:
        uint64_t v5 = 0LL;
        goto LABEL_27;
      }

      uint64_t v5 = icu::ZNStringPool::get((icu::ZNStringPool *)(a1 + 408), (const icu::UnicodeString *)&v33, &v22);
    }

    unint64_t v14 = v22;
    if (v22 > U_ZERO_ERROR)
    {
LABEL_27:
      icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)&v28);
      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v33);
      return v5;
    }

    uint64_t TimeZoneID = icu::ZoneMeta::findTimeZoneID((icu::ZoneMeta *)a2, v10);
    if (v5)
    {
      uhash_put(*(void *)(a1 + 240), TimeZoneID, (uint64_t)v5, (int *)&v22);
      unint64_t v14 = v22;
      if (v22 <= U_ZERO_ERROR)
      {
        uint64_t v16 = uprv_malloc(0x10uLL);
        if (v16)
        {
          *(_DWORD *)uint64_t v16 = 1;
          v16[1] = TimeZoneID;
          icu::TextTrieMap::put(v5, &v22, a1 + 424, v16, (uint64_t *)1);
        }

        goto LABEL_27;
      }

      goto LABEL_26;
    }

    goto LABEL_25;
  }

  if (v8 == &unk_180A3D964) {
    return 0LL;
  }
  else {
    return (UChar *)v8;
  }
}

uint64_t sub_1809A799C(uint64_t a1, uint64_t a2, __int16 a3)
{
  unsigned int v4 = *(unsigned __int16 *)(a1 + 8);
  else {
    int v5 = v4 >> 5;
  }
  unsigned int v6 = *(unsigned __int16 *)(a2 + 8);
  if ((v6 & 1) != 0) {
    return (v4 & 1) == 0;
  }
  if ((v6 & 0x8000u) == 0) {
    int v7 = v6 >> 5;
  }
  else {
    int v7 = *(_DWORD *)(a2 + 12);
  }
  if ((v6 & 2) != 0) {
    uint64_t v8 = a2 + 10;
  }
  else {
    uint64_t v8 = *(void *)(a2 + 24);
  }
  return icu::UnicodeString::doCaseCompare( a1,  0,  v5,  v8,  v7 & (v7 >> 31),  v7 & ~(v7 >> 31),  a3);
}

icu::UnicodeString *sub_1809A7A00( uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned __int16 *a5, icu::UnicodeString *this)
{
  if (*(unsigned __int16 *)(a2 + 8) >= 0x20u && *(unsigned __int16 *)(a3 + 8) >= 0x20u && a5[4] >= 0x20u)
  {
    umtx_lock((icu::UMutex *)&unk_18C535BA0);
    uint64_t v12 = (const UChar *)sub_1809A7AE8(a1, a2, (UChar **)a3, a4, (const icu::UnicodeString *)a5);
    umtx_unlock((std::mutex **)&unk_18C535BA0);
    if (v12)
    {
      unint64_t v14 = v12;
      icu::UnicodeString::setTo(this, 1, &v14, -1);
    }

    else
    {
      icu::UnicodeString::setToBogus(this);
    }
  }

  return this;
}

void *sub_1809A7AE8(uint64_t a1, uint64_t a2, UChar **a3, int a4, const icu::UnicodeString *a5)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  *(void *)&__int128 v31 = icu::ZoneMeta::findTimeZoneID((icu::ZoneMeta *)a2, (const icu::UnicodeString *)a2);
  *((void *)&v31 + 1) = icu::ZoneMeta::findMetaZoneID(a3, v10);
  uint64_t v32 = a4;
  uint64_t v12 = (void *)uhash_get(*(void *)(a1 + 248), (uint64_t)&v31);
  if (v12) {
    return v12;
  }
  __int128 v44 = 0u;
  uint64_t v47 = 0LL;
  __int128 v46 = 0u;
  __int128 v45 = 0u;
  LOWORD(v44) = 2;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  uint64_t v42 = 0LL;
  __int128 v43 = (UChar *)off_18971B688;
  __int128 v41 = 0u;
  __int128 v38 = off_18971B688;
  LOWORD(v39) = 2;
  icu::ZoneMeta::getCanonicalCountry((int32_t *)a2, (const icu::UnicodeString *)&v38, 0LL, v11);
  if ((unsigned __int16)v39 < 0x20u)
  {
    (*(void (**)(void, uint64_t, UChar **))(**(void **)(a1 + 232) + 88LL))( *(void *)(a1 + 232),  a2,  &v43);
    goto LABEL_22;
  }

  UErrorCode v30 = U_ZERO_ERROR;
  if ((v39 & 0x8000u) == 0LL) {
    uint64_t v13 = (unsigned __int16)v39 >> 5;
  }
  else {
    uint64_t v13 = DWORD1(v39);
  }
  *((_BYTE *)&v30 + (int)icu::UnicodeString::extract((uint64_t)&v38, 0, v13, (char *)&v30, 4)) = 0;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  uint64_t v37 = 0LL;
  __int128 v36 = 0u;
  __int128 v33 = off_18971B688;
  LOWORD(v34) = 2;
  (*(void (**)(void, UChar **, UErrorCode *, void (***)(icu::UnicodeString *__hidden)))(**(void **)(a1 + 232) + 64LL))( *(void *)(a1 + 232),  a3,  &v30,  &v33);
  unsigned int v14 = *(unsigned __int16 *)(a2 + 8);
  if ((v14 & 1) == 0)
  {
    int v15 = (__int16)v14;
    int v16 = v14 >> 5;
    if (v15 >= 0) {
      int v17 = v16;
    }
    else {
      int v17 = *(_DWORD *)(a2 + 12);
    }
    if ((v34 & 0x8000u) == 0LL) {
      int v18 = (unsigned __int16)v34 >> 5;
    }
    else {
      int v18 = DWORD1(v34);
    }
    if ((v34 & 1) == 0
      && v17 == v18
      && icu::UnicodeString::doEquals((icu::UnicodeString *)a2, (const icu::UnicodeString *)&v33, v17))
    {
      goto LABEL_16;
    }

uint64_t sub_1809A7E40( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, UChar **this, _DWORD *a6, UErrorCode *a7)
{
  int v9 = this;
  uint64_t v49 = *MEMORY[0x1895F89C0];
  *a6 = 0;
  icu::UnicodeString::setToBogus((icu::UnicodeString *)this);
  uint64_t v14 = 0LL;
  if (*(int *)a7 <= 0)
  {
    if (a4)
    {
      unsigned int v15 = ((int)(a4 << 30) >> 31) & 3;
      if ((a4 & 4) != 0) {
        uint64_t v16 = v15 | 0x18;
      }
      else {
        uint64_t v16 = v15;
      }
      int v17 = (icu::TimeZoneNames::MatchInfoCollection *)(*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, UErrorCode *))(**(void **)(a1 + 232) + 120LL))( *(void *)(a1 + 232),  a2,  a3,  v16,  a7);
      int v18 = (icu::UVector **)v17;
      __int128 v45 = 0u;
      uint64_t v48 = 0LL;
      __int128 v47 = 0u;
      __int128 v46 = 0u;
      __int128 v44 = (UChar *)off_18971B688;
      LOWORD(v45) = 2;
      if (v17)
      {
        uint64_t v37 = v9;
        __int128 v40 = 0uLL;
        uint64_t v43 = 0LL;
        __int128 v42 = 0uLL;
        __int128 v41 = 0uLL;
        __int128 v39 = off_18971B688;
        LOWORD(v40) = 2;
        if ((int)icu::TimeZoneNames::MatchInfoCollection::size(v17) >= 1)
        {
          signed int v21 = 0;
          uint64_t v22 = 0LL;
          uint64_t v38 = 0LL;
          while (1)
          {
            uint64_t MatchLengthAt = icu::TimeZoneNames::MatchInfoCollection::getMatchLengthAt(v18, v21);
            if ((int)MatchLengthAt <= (int)v22)
            {
              uint64_t v14 = v22;
            }

            else
            {
              uint64_t v14 = MatchLengthAt;
              if (!icu::TimeZoneNames::MatchInfoCollection::getTimeZoneIDAt( v18,  v21,  (icu::UnicodeString *)&v44)
                && icu::TimeZoneNames::MatchInfoCollection::getMetaZoneIDAt( v18,  v21,  (icu::UnicodeString *)&v39))
              {
                (*(void (**)(void, void (***)(icu::UnicodeString *__hidden), uint64_t, UChar **))(**(void **)(a1 + 232) + 64LL))( *(void *)(a1 + 232),  &v39,  a1 + 481,  &v44);
              }

              int NameTypeAt = icu::TimeZoneNames::MatchInfoCollection::getNameTypeAt(v18, v21);
              HIDWORD(v38) = 1;
              if (NameTypeAt > 15)
              {
                if (NameTypeAt == 16)
                {
LABEL_27:
                  LODWORD(v38) = 1;
                  goto LABEL_28;
                }

                if (NameTypeAt == 32)
                {
LABEL_26:
                  HIDWORD(v38) = 2;
                  goto LABEL_28;
                }
              }

              else
              {
                if (NameTypeAt == 2) {
                  goto LABEL_27;
                }
                if (NameTypeAt == 4) {
                  goto LABEL_26;
                }
              }

              HIDWORD(v38) = 0;
            }

uint64_t *sub_1809A8234(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, UErrorCode *a5)
{
  uint64_t v29 = 0LL;
  uint64_t v30 = 0LL;
  v28[0] = (uint64_t (**)(void, void, void *, int *))off_18972BF18;
  v28[1] = (uint64_t (**)(void, void, void *, int *))a4;
  umtx_lock((icu::UMutex *)&unk_18C535BA0);
  icu::TextTrieMap::search((icu::TextTrieMap *)(a1 + 424), a2, a3, v28, a5);
  umtx_unlock((std::mutex **)&unk_18C535BA0);
  unsigned int v10 = 0LL;
  uint64_t v12 = v29;
  unint64_t v13 = v30;
  uint64_t v29 = 0LL;
  LODWORD(v30) = 0;
  if (v12)
  {
    unsigned int v14 = *(unsigned __int16 *)(a2 + 8);
    int v15 = (__int16)v14;
    unsigned int v16 = v14 >> 5;
    if (v15 < 0) {
      unsigned int v16 = *(_DWORD *)(a2 + 12);
    }
    if ((_DWORD)v13 == v16 - (_DWORD)a3 || (unint64_t v13 = *(unsigned __int8 *)(a1 + 480), *(_BYTE *)(a1 + 480)))
    {
      int v17 = icu::UMemory::operator new((uint64_t *)v13, (icu::UMemory *)8, v9);
      unsigned int v10 = v17;
      if (v17)
      {
        *int v17 = v12;
      }

      else
      {
        *a5 = U_MEMORY_ALLOCATION_ERROR;
        (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
      }

      goto LABEL_2;
    }

    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
  }

  umtx_lock((icu::UMutex *)&unk_18C535BA0);
  if (!*(_BYTE *)(a1 + 480))
  {
    TimeZoneIDuint64_t Enumeration = icu::TimeZone::createTimeZoneIDEnumeration(1LL, 0LL, 0LL, a5);
    uint64_t v19 = TimeZoneIDEnumeration;
    if (*(int *)a5 <= 0)
    {
      uint64_t v20 = (*(uint64_t (**)(uint64_t, UErrorCode *))(*(void *)TimeZoneIDEnumeration + 56LL))( TimeZoneIDEnumeration,  a5);
      if (v20) {
        BOOL v21 = *a5 <= U_ZERO_ERROR;
      }
      else {
        BOOL v21 = 0;
      }
      if (v21)
      {
        uint64_t v22 = v20;
        do
        {
          sub_1809A6C34(a1, v22);
          uint64_t v22 = (*(uint64_t (**)(uint64_t, UErrorCode *))(*(void *)v19 + 56LL))(v19, a5);
          if (v22) {
            BOOL v23 = *a5 < U_ILLEGAL_ARGUMENT_ERROR;
          }
          else {
            BOOL v23 = 0;
          }
        }

        while (v23);
      }
    }

    else if (!TimeZoneIDEnumeration)
    {
      goto LABEL_30;
    }

    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }

void *icu::TimeZoneGenericNames::TimeZoneGenericNames(void *this)
{
  *this = off_18972BF60;
  this[1] = 0LL;
  return this;
}

{
  *this = off_18972BF60;
  this[1] = 0LL;
  return this;
}

void icu::TimeZoneGenericNames::~TimeZoneGenericNames(icu::TimeZoneGenericNames *this)
{
  *(void *)this = off_18972BF60;
  umtx_lock((icu::UMutex *)&unk_18C535BF0);
  --*(_DWORD *)(*((void *)this + 1) + 8LL);
  umtx_unlock((std::mutex **)&unk_18C535BF0);
}

{
  *(void *)this = off_18972BF60;
  umtx_lock((icu::UMutex *)&unk_18C535BF0);
  --*(_DWORD *)(*((void *)this + 1) + 8LL);
  umtx_unlock((std::mutex **)&unk_18C535BF0);
}

{
  *(void *)this = off_18972BF60;
  umtx_lock((icu::UMutex *)&unk_18C535BF0);
  --*(_DWORD *)(*((void *)this + 1) + 8LL);
  umtx_unlock((std::mutex **)&unk_18C535BF0);
  icu::UMemory::operator delete(this);
}

uint64_t *icu::TimeZoneGenericNames::createInstance( icu::TimeZoneGenericNames *this, UErrorCode *a2, UErrorCode *a3)
{
  int v3 = (uint64_t *)*(unsigned int *)a2;
  unsigned int v6 = icu::UMemory::operator new(v3, (icu::UMemory *)0x10, (unint64_t)a2);
  int v7 = v6;
  if (!v6)
  {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
    return v7;
  }

  *unsigned int v6 = (uint64_t)off_18972BF60;
  v6[1] = 0LL;
  umtx_lock((icu::UMutex *)&unk_18C535BF0);
  if ((byte_18C535B90 & 1) != 0)
  {
LABEL_6:
    unsigned int v10 = (const char *)*((void *)this + 5);
    uint64_t v11 = uhash_get(qword_18C535B98, (uint64_t)v10);
    if (v11)
    {
      unsigned int v14 = (void *)v11;
      ++*(_DWORD *)(v11 + 8);
      *(double *)(v11 + 16) = uprv_getUTCtime();
LABEL_13:
      int v15 = dword_18C449940++;
      if (v15 > 98)
      {
        int v26 = -1;
        double UTCtime = uprv_getUTCtime();
        uint64_t v17 = uhash_nextElement((uint64_t *)qword_18C535B98, &v26);
        if (v17)
        {
          uint64_t v18 = v17;
          do
          {
            uint64_t v19 = *(void *)(v18 + 8);
            uint64_t v18 = uhash_nextElement((uint64_t *)qword_18C535B98, &v26);
          }

          while (v18);
        }

        dword_18C449940 = 0;
      }

      umtx_unlock((std::mutex **)&unk_18C535BF0);
      if (v14)
      {
        v7[1] = (uint64_t)v14;
        return v7;
      }

      (*(void (**)(uint64_t *))(*v7 + 8))(v7);
      return 0LL;
    }

    uint64_t v20 = icu::UMemory::operator new(v13, (icu::UMemory *)0x1E8, v12);
    if (!v20)
    {
      unsigned int v14 = 0LL;
      *a2 = U_MEMORY_ALLOCATION_ERROR;
      goto LABEL_13;
    }

    BOOL v21 = v20;
    sub_1809A655C((uint64_t)v20, (char **)this, a2);
    if (*(int *)a2 > 0)
    {
      uint64_t v22 = 0LL;
LABEL_26:
      unsigned int v14 = 0LL;
      goto LABEL_27;
    }

    size_t v23 = strlen(v10);
    unint64_t v24 = (char *)uprv_malloc(v23 + 1);
    uint64_t v22 = v24;
    if (v24)
    {
      strcpy(v24, v10);
      uint64_t v25 = uprv_malloc(0x18uLL);
      if (v25)
      {
        unsigned int v14 = v25;
        *uint64_t v25 = v21;
        *((_DWORD *)v25 + 2) = 1;
        *((double *)v25 + 2) = uprv_getUTCtime();
        uhash_put(qword_18C535B98, (uint64_t)v22, (uint64_t)v14, (int *)a2);
LABEL_27:
        (*(void (**)(uint64_t *))(*v21 + 8))(v21);
        if (v22) {
          uprv_free(v22);
        }
        if (v14)
        {
          uprv_free(v14);
          unsigned int v14 = 0LL;
        }

        goto LABEL_13;
      }
    }

    unsigned int v14 = 0LL;
    *a2 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_27;
  }

  uint64_t v8 = uhash_open((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, 0LL, (int *)a2);
  qword_18C535B98 = (uint64_t)v8;
  if (*(int *)a2 <= 0)
  {
    uhash_setKeyDeleter((uint64_t)v8, (uint64_t)uprv_free);
    uhash_setValueDeleter(qword_18C535B98, (uint64_t)sub_1809A88F0);
    byte_18C535B90 = 1;
    sub_1809B36C0(0x10u, (uint64_t)sub_1809A8924);
    goto LABEL_6;
  }

void sub_1809A88F0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uprv_free(a1);
}

uint64_t sub_1809A8924()
{
  if (qword_18C535B98)
  {
    uhash_close((_BYTE *)qword_18C535B98);
    qword_18C535B98 = 0LL;
  }

  byte_18C535B90 = 0;
  return 1LL;
}

BOOL icu::TimeZoneGenericNames::operator==(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) == *(void *)(a2 + 8);
}

uint64_t *icu::TimeZoneGenericNames::clone@<X0>( icu::TimeZoneGenericNames *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x10, a2);
  int v5 = v4;
  if (v4)
  {
    *unsigned int v4 = (uint64_t)off_18972BF60;
    v4[1] = 0LL;
    umtx_lock((icu::UMutex *)&unk_18C535BF0);
    uint64_t v6 = *((void *)this + 1);
    ++*(_DWORD *)(v6 + 8);
    v5[1] = v6;
    umtx_unlock((std::mutex **)&unk_18C535BF0);
  }

  return v5;
}

icu::UnicodeString *icu::TimeZoneGenericNames::getDisplayName( uint64_t a1, icu::ZoneMeta *a2, int a3, icu::UnicodeString *a4, double a5)
{
  return sub_1809A6E40(**(void **)(a1 + 8), a2, a3, a4, a5);
}

icu::UnicodeString *icu::TimeZoneGenericNames::getGenericLocationName( icu::TimeZoneGenericNames *this, const icu::UnicodeString *a2, icu::UnicodeString *a3)
{
  return sub_1809A6F8C(**((void **)this + 1), (uint64_t)a2, a3);
}

uint64_t icu::TimeZoneGenericNames::findBestMatch( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, UChar **a5, _DWORD *a6, UErrorCode *a7)
{
  return sub_1809A7E40(**(void **)(a1 + 8), a2, a3, a4, a5, a6, a7);
}

uint64_t sub_1809A8A04(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 16LL))(a1) ^ 1;
}

void *sub_1809A8A24(void *a1, uint64_t a2, int *a3)
{
  *a1 = off_18972BFE0;
  umtx_lock((icu::UMutex *)&unk_18C449960);
  if ((byte_18C449948 & 1) == 0)
  {
    uint64_t v6 = uhash_open((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, 0LL, a3);
    qword_18C449950 = (uint64_t)v6;
    if (*a3 > 0) {
      goto LABEL_16;
    }
    uhash_setKeyDeleter((uint64_t)v6, (uint64_t)uprv_free);
    uhash_setValueDeleter(qword_18C449950, (uint64_t)sub_1809A8CC4);
    byte_18C449948 = 1;
    sub_1809B36C0(0x11u, (uint64_t)sub_1809A8CF8);
  }

  if (*a3 > 0) {
    goto LABEL_16;
  }
  int v7 = *(const char **)(a2 + 40);
  uint64_t v8 = uhash_get(qword_18C449950, (uint64_t)v7);
  if (!v8)
  {
    uint64_t v18 = icu::UMemory::operator new(v10, (icu::UMemory *)0x140, v9);
    if (!v18)
    {
      uint64_t v11 = 0LL;
      *a3 = 7;
      goto LABEL_7;
    }

    uint64_t v19 = v18;
    sub_1809AAAF0(v18, a2, a3);
    if (*a3 > 0)
    {
      uint64_t v20 = 0LL;
LABEL_20:
      uint64_t v11 = 0LL;
      goto LABEL_21;
    }

    size_t v21 = strlen(v7);
    uint64_t v22 = (char *)uprv_malloc(v21 + 1);
    uint64_t v20 = v22;
    if (v22)
    {
      strcpy(v22, v7);
      if (*a3 > 0) {
        goto LABEL_20;
      }
      size_t v23 = uprv_malloc(0x18uLL);
      if (v23)
      {
        uint64_t v11 = v23;
        *size_t v23 = v19;
        *((_DWORD *)v23 + 2) = 1;
        *((double *)v23 + 2) = uprv_getUTCtime();
        uhash_put(qword_18C449950, (uint64_t)v20, (uint64_t)v11, a3);
        if (*a3 < 1) {
          goto LABEL_7;
        }
LABEL_21:
        (*(void (**)(uint64_t *))(*v19 + 8))(v19);
        if (v20) {
          uprv_free(v20);
        }
        if (v11)
        {
          uprv_free(v11);
          uint64_t v11 = 0LL;
        }

        goto LABEL_7;
      }
    }

    uint64_t v11 = 0LL;
    *a3 = 7;
    goto LABEL_21;
  }

  uint64_t v11 = (void *)v8;
  ++*(_DWORD *)(v8 + 8);
  *(double *)(v8 + 16) = uprv_getUTCtime();
LABEL_7:
  int v12 = dword_18C449958++;
  if (v12 >= 99)
  {
    int v24 = -1;
    double UTCtime = uprv_getUTCtime();
    uint64_t v14 = uhash_nextElement((uint64_t *)qword_18C449950, &v24);
    if (v14)
    {
      uint64_t v15 = v14;
      do
      {
        uint64_t v16 = *(void *)(v15 + 8);
        uint64_t v15 = uhash_nextElement((uint64_t *)qword_18C449950, &v24);
      }

      while (v15);
    }

    dword_18C449958 = 0;
  }

  a1[1] = v11;
LABEL_16:
  umtx_unlock((std::mutex **)&unk_18C449960);
  return a1;
}

void sub_1809A8CC4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uprv_free(a1);
}

uint64_t sub_1809A8CF8()
{
  if (qword_18C449950)
  {
    uhash_close((_BYTE *)qword_18C449950);
    qword_18C449950 = 0LL;
  }

  byte_18C449948 = 0;
  return 1LL;
}

void sub_1809A8D30(icu::UObject *a1)
{
  *(void *)a1 = off_18972BFE0;
  umtx_lock((icu::UMutex *)&unk_18C449960);
  uint64_t v2 = *((void *)a1 + 1);
  if (v2) {
    --*(_DWORD *)(v2 + 8);
  }
  umtx_unlock((std::mutex **)&unk_18C449960);
  icu::UObject::~UObject(a1);
}

void sub_1809A8D90(icu::UObject *a1)
{
}

uint64_t sub_1809A8DA4(void *a1, void *lpsrc)
{
  if (a1 == lpsrc) {
    return 1LL;
  }
  if (result) {
    return a1[1] == *(void *)(result + 8);
  }
  return result;
}

uint64_t *sub_1809A8E04@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x10, a2);
  int v5 = v4;
  if (v4)
  {
    *unsigned int v4 = (uint64_t)off_18972BFE0;
    v4[1] = 0LL;
    umtx_lock((icu::UMutex *)&unk_18C449960);
    uint64_t v6 = *(void *)(a1 + 8);
    ++*(_DWORD *)(v6 + 8);
    v5[1] = v6;
    umtx_unlock((std::mutex **)&unk_18C449960);
  }

  return v5;
}

uint64_t sub_1809A8E74(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 40LL))(**(void **)(a1 + 8));
}

uint64_t sub_1809A8E88(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 48LL))(**(void **)(a1 + 8));
}

uint64_t sub_1809A8E9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 56LL))(**(void **)(a1 + 8));
}

uint64_t sub_1809A8EB0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 64LL))(**(void **)(a1 + 8));
}

uint64_t sub_1809A8EC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 72LL))(**(void **)(a1 + 8));
}

uint64_t sub_1809A8ED8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 80LL))(**(void **)(a1 + 8));
}

uint64_t sub_1809A8EEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 88LL))(**(void **)(a1 + 8));
}

uint64_t sub_1809A8F00(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 104LL))(**(void **)(a1 + 8));
}

uint64_t sub_1809A8F14(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 112LL))(**(void **)(a1 + 8));
}

uint64_t sub_1809A8F28(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 120LL))(**(void **)(a1 + 8));
}

void *icu::TimeZoneNames::createInstance(icu::TimeZoneNames *this, const icu::Locale *a2, UErrorCode *a3)
{
  int v3 = (uint64_t *)*(unsigned int *)a2;
  int v7 = icu::UMemory::operator new(v3, (icu::UMemory *)0x10, (unint64_t)a2);
  if (v7) {
    return sub_1809A8A24(v7, (uint64_t)this, (int *)a2);
  }
  uint64_t result = 0LL;
  *(_DWORD *)a2 = 7;
  return result;
}

uint64_t icu::TimeZoneNames::createTZDBInstance( icu::TimeZoneNames *this, const icu::Locale *a2, UErrorCode *a3)
{
  uint64_t v6 = icu::UMemory::operator new((icu::UMemory *)0xF0, (unint64_t)a2);
  if (v6) {
    return sub_1809ACCF0(v6, this);
  }
  uint64_t result = 0LL;
  *(_DWORD *)a2 = 7;
  return result;
}

icu::UnicodeString *icu::TimeZoneNames::getExemplarLocationName( icu::TimeZoneNames *this, const icu::UnicodeString *a2, int32_t *a3)
{
  return sub_1809AC374((uint64_t)a2, a3);
}

uint64_t icu::TimeZoneNames::getDisplayName(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  (*(void (**)(uint64_t))(*(void *)a1 + 80LL))(a1);
  if (*(unsigned __int16 *)(a4 + 8) <= 0x1Fu)
  {
    memset(v12, 0, sizeof(v12));
    memset(v11, 0, sizeof(v11));
    icu::UnicodeString::UnicodeString(v11, v12, 0LL, 32LL);
    (*(void (**)(uint64_t, uint64_t, _OWORD *, double))(*(void *)a1 + 56LL))(a1, a2, v11, a5);
    (*(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t))(*(void *)a1 + 72LL))(a1, v11, a3, a4);
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v11);
  }

  return a4;
}

void icu::TimeZoneNames::getDisplayNames( uint64_t a1, uint64_t a2, unsigned int *a3, int a4, uint64_t a5, int *a6, double a7)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (*a6 <= 0 && *(unsigned __int16 *)(a2 + 8) >= 0x20u)
  {
    __int128 v14 = 0u;
    uint64_t v17 = 0LL;
    __int128 v16 = 0u;
    __int128 v15 = 0u;
    uint64_t v13 = off_18971B688;
    LOWORD(v14) = 2;
    if (a4 >= 1)
    {
      uint64_t v12 = a4;
      do
      {
        (*(void (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)a1 + 80LL))(a1, a2, *a3, a5);
        if (*(unsigned __int16 *)(a5 + 8) <= 0x1Fu)
        {
          if ((unsigned __int16)v14 <= 0x1Fu) {
            (*(void (**)(uint64_t, uint64_t, void (***)(icu::UnicodeString *__hidden), double))(*(void *)a1 + 56LL))( a1,  a2,  &v13,  a7);
          }
          (*(void (**)(uint64_t, void (***)(icu::UnicodeString *__hidden), void, uint64_t))(*(void *)a1 + 72LL))( a1,  &v13,  *a3,  a5);
        }

        a5 += 64LL;
        ++a3;
        --v12;
      }

      while (v12);
    }

    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v13);
  }

void *icu::TimeZoneNames::MatchInfoCollection::MatchInfoCollection(void *this)
{
  *this = off_18972C0A8;
  this[1] = 0LL;
  return this;
}

{
  *this = off_18972C0A8;
  this[1] = 0LL;
  return this;
}

void icu::TimeZoneNames::MatchInfoCollection::~MatchInfoCollection( icu::TimeZoneNames::MatchInfoCollection *this)
{
  *(void *)this = off_18972C0A8;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
}

{
  uint64_t v1;
  *(void *)this = off_18972C0A8;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
}

{
  uint64_t v2;
  *(void *)this = off_18972C0A8;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::UMemory::operator delete(this);
}

void icu::TimeZoneNames::MatchInfoCollection::addZone( icu::TimeZoneNames::MatchInfoCollection *a1, unint64_t a2, int a3, UChar **a4, UErrorCode *a5)
{
  int v5 = (uint64_t *)*(unsigned int *)a5;
  int v9 = a2;
  uint64_t v11 = icu::UMemory::operator new(v5, (icu::UMemory *)0x50, a2);
  uint64_t v12 = v11;
  if (v11)
  {
    v11[1] = (uint64_t)off_18971B688;
    *((_WORD *)v11 + 8) = 2;
    *(_DWORD *)uint64_t v11 = v9;
    *((_DWORD *)v11 + 18) = a3;
    icu::UnicodeString::copyFrom((UChar **)v11 + 1, a4, 0);
    *((_BYTE *)v12 + 76) = 1;
    uint64_t v13 = icu::TimeZoneNames::MatchInfoCollection::matches(a1, a5);
    __int128 v14 = (void *)*(unsigned int *)a5;
    if ((int)v14 > 0)
    {
      icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)(v12 + 1));
      icu::UMemory::operator delete(v12);
      return;
    }

    goto LABEL_9;
  }

  uint64_t v13 = icu::TimeZoneNames::MatchInfoCollection::matches(a1, a5);
  if (*(int *)a5 < 1) {
LABEL_9:
  }
    icu::UVector::adoptElement((icu::UVector *)v13, v12, a5);
}

uint64_t *icu::TimeZoneNames::MatchInfoCollection::matches( icu::TimeZoneNames::MatchInfoCollection *this, UErrorCode *a2)
{
  uint64_t v2 = (uint64_t *)*(unsigned int *)a2;
  uint64_t result = (uint64_t *)*((void *)this + 1);
  if (!result)
  {
    uint64_t result = icu::UMemory::operator new(v2, (icu::UMemory *)0x28, (unint64_t)a2);
    if (result)
    {
      uint64_t result = (uint64_t *)icu::UVector::UVector((uint64_t)result, (uint64_t)sub_1809A9710, 0LL, (int *)a2);
      *((void *)this + 1) = result;
      if (*(int *)a2 >= 1)
      {
        (*(void (**)(uint64_t *))(*result + 8))(result);
        uint64_t result = 0LL;
        *((void *)this + 1) = 0LL;
      }
    }

    else
    {
      *((void *)this + 1) = 0LL;
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
  }

  return result;
}

void icu::TimeZoneNames::MatchInfoCollection::addMetaZone( icu::TimeZoneNames::MatchInfoCollection *a1, unint64_t a2, int a3, UChar **a4, UErrorCode *a5)
{
  int v5 = (uint64_t *)*(unsigned int *)a5;
  int v9 = a2;
  uint64_t v11 = icu::UMemory::operator new(v5, (icu::UMemory *)0x50, a2);
  uint64_t v12 = v11;
  if (v11)
  {
    v11[1] = (uint64_t)off_18971B688;
    *((_WORD *)v11 + 8) = 2;
    *(_DWORD *)uint64_t v11 = v9;
    *((_DWORD *)v11 + 18) = a3;
    icu::UnicodeString::copyFrom((UChar **)v11 + 1, a4, 0);
    *((_BYTE *)v12 + 76) = 0;
    uint64_t v13 = icu::TimeZoneNames::MatchInfoCollection::matches(a1, a5);
    __int128 v14 = (void *)*(unsigned int *)a5;
    if ((int)v14 > 0)
    {
      icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)(v12 + 1));
      icu::UMemory::operator delete(v12);
      return;
    }

    goto LABEL_9;
  }

  uint64_t v13 = icu::TimeZoneNames::MatchInfoCollection::matches(a1, a5);
  if (*(int *)a5 < 1) {
LABEL_9:
  }
    icu::UVector::adoptElement((icu::UVector *)v13, v12, a5);
}

uint64_t icu::TimeZoneNames::MatchInfoCollection::size(icu::TimeZoneNames::MatchInfoCollection *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    return *(unsigned int *)(v1 + 8);
  }
  else {
    return 0LL;
  }
}

unsigned int *icu::TimeZoneNames::MatchInfoCollection::getNameTypeAt(icu::UVector **this, unsigned int a2)
{
  uint64_t result = (unsigned int *)icu::UVector::elementAt(this[1], a2);
  if (result) {
    return (unsigned int *)*result;
  }
  return result;
}

uint64_t icu::TimeZoneNames::MatchInfoCollection::getMatchLengthAt(icu::UVector **this, unsigned int a2)
{
  uint64_t result = icu::UVector::elementAt(this[1], a2);
  if (result) {
    return *(unsigned int *)(result + 72);
  }
  return result;
}

uint64_t icu::TimeZoneNames::MatchInfoCollection::getTimeZoneIDAt( icu::UVector **this, unsigned int a2, icu::UnicodeString *a3)
{
  if ((*((_WORD *)a3 + 4) & 1) != 0) {
    __int16 v4 = 2;
  }
  else {
    __int16 v4 = *((_WORD *)a3 + 4) & 0x1F;
  }
  *((_WORD *)a3 + 4) = v4;
  uint64_t result = icu::UVector::elementAt(this[1], a2);
  if (result)
  {
    if (*(_BYTE *)(result + 76))
    {
      icu::UnicodeString::copyFrom((UChar **)a3, (UChar **)(result + 8), 0);
      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t icu::TimeZoneNames::MatchInfoCollection::getMetaZoneIDAt( icu::UVector **this, unsigned int a2, icu::UnicodeString *a3)
{
  if ((*((_WORD *)a3 + 4) & 1) != 0) {
    __int16 v4 = 2;
  }
  else {
    __int16 v4 = *((_WORD *)a3 + 4) & 0x1F;
  }
  *((_WORD *)a3 + 4) = v4;
  uint64_t result = icu::UVector::elementAt(this[1], a2);
  if (result)
  {
    if (*(_BYTE *)(result + 76))
    {
      return 0LL;
    }

    else
    {
      icu::UnicodeString::copyFrom((UChar **)a3, (UChar **)(result + 8), 0);
      return 1LL;
    }
  }

  return result;
}

void sub_1809A9710(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (a1)
  {
    icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(a1 + 8));
    icu::UMemory::operator delete((void *)a1);
  }

uint64_t sub_1809A9740(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24LL))(a1) ^ 1;
}

uint64_t *sub_1809A9760(uint64_t *result, void *a2, uint64_t (*a3)(void *), UErrorCode *a4)
{
  if (*(int *)a4 >= 1)
  {
    if (a3) {
      return (uint64_t *)a3(a2);
    }
    return result;
  }

  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = (icu::UVector *)*result;
  if (!*result)
  {
    *uint64_t result = (uint64_t)a2;
    return result;
  }

  if (*((_BYTE *)result + 14)) {
    goto LABEL_6;
  }
  uint64_t result = icu::UMemory::operator new( (uint64_t *)*((unsigned __int8 *)result + 14),  (icu::UMemory *)0x28,  (unint64_t)a2);
  uint64_t v6 = (icu::UVector *)result;
  if (result)
  {
    uint64_t result = (uint64_t *)icu::UVector::UVector(result, a3, 0LL, 1LL, a4);
    uint64_t v8 = a3;
    if (*(int *)a4 < 1)
    {
      int v9 = *(void **)v5;
      if (*((void *)v6 + 3)) {
        icu::UVector::adoptElement(v6, v9, a4);
      }
      else {
        icu::UVector::addElement(v6, v9, a4);
      }
      *(void *)uint64_t v5 = v6;
      *(_BYTE *)(v5 + 14) = 1;
LABEL_6:
      if (*((void *)v6 + 3)) {
        return (uint64_t *)icu::UVector::adoptElement(v6, a2, a4);
      }
      else {
        return (uint64_t *)icu::UVector::addElement(v6, a2, a4);
      }
    }
  }

  else
  {
    uint64_t v8 = a3;
  }

  if (v8) {
    uint64_t result = (uint64_t *)v8(a2);
  }
  if (v6) {
    return (uint64_t *)(*(uint64_t (**)(icu::UVector *))(*(void *)v6 + 8LL))(v6);
  }
  return result;
}

uint64_t icu::TextTrieMap::TextTrieMap(uint64_t this, char a2, void (*a3)(void *))
{
  *(void *)this = off_18972C170;
  *(_BYTE *)(this + 8) = a2;
  *(void *)(this + 24) = 0LL;
  *(void *)(this + 32) = 0LL;
  *(void *)(this + 16) = 0LL;
  *(_BYTE *)(this + 40) = 1;
  *(void *)(this + 48) = a3;
  return this;
}

{
  *(void *)this = off_18972C170;
  *(_BYTE *)(this + 8) = a2;
  *(void *)(this + 24) = 0LL;
  *(void *)(this + 32) = 0LL;
  *(void *)(this + 16) = 0LL;
  *(_BYTE *)(this + 40) = 1;
  *(void *)(this + 48) = a3;
  return this;
}

void icu::TextTrieMap::~TextTrieMap(icu::TextTrieMap *this)
{
  *(void *)this = off_18972C170;
  int v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    uint64_t v3 = 0LL;
    for (uint64_t i = 0LL; i < v2; ++i)
    {
      uint64_t v5 = *((void *)this + 2);
      uint64_t v6 = *(void *)(v5 + v3);
      if (v6)
      {
        if (*(_BYTE *)(v5 + v3 + 14))
        {
          int v7 = *(void (**)(void))(*(void *)v6 + 8LL);
LABEL_7:
          v7();
          int v2 = *((_DWORD *)this + 7);
          goto LABEL_8;
        }

        int v7 = (void (*)(void))*((void *)this + 6);
        if (v7) {
          goto LABEL_7;
        }
      }

{
  void *v1;
  icu::TextTrieMap::~TextTrieMap(this);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::TextTrieMap::isEmpty(icu::TextTrieMap *this)
{
  return *((char *)this + 40);
}

icu::UVector *icu::TextTrieMap::put( icu::TextTrieMap *this, const icu::UnicodeString *a2, void *a3, icu::ZNStringPool *a4, UErrorCode *a5)
{
  TerminatedBuffer = (const UChar *)icu::UnicodeString::getTerminatedBuffer(a2);
  unsigned int v10 = icu::ZNStringPool::get((uint64_t *)a4, TerminatedBuffer, (int *)a5);
  return icu::TextTrieMap::put(v10, a5, (uint64_t)this, a3, v11);
}

UChar *icu::ZNStringPool::get(icu::ZNStringPool *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  TerminatedBuffer = (const UChar *)icu::UnicodeString::getTerminatedBuffer(a2);
  return icu::ZNStringPool::get((uint64_t *)this, TerminatedBuffer, (int *)a3);
}

icu::UVector *icu::TextTrieMap::put@<X0>( void *a1@<X1>, UErrorCode *a2@<X3>, uint64_t a3@<X0>, void *a4@<X2>, uint64_t *a5@<X8>)
{
  *(_BYTE *)(a3 + 40) = 0;
  uint64_t result = *(icu::UVector **)(a3 + 32);
  if (!result)
  {
    uint64_t result = (icu::UVector *)icu::UMemory::operator new(a5, (icu::UMemory *)0x28, (unint64_t)a1);
    if (result)
    {
      uint64_t result = icu::UVector::UVector(result, a2);
    }

    else if (*(int *)a2 <= 0)
    {
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    }

    *(void *)(a3 + 32) = result;
  }

  if (*(int *)a2 < 1)
  {
    uint64_t result = (icu::UVector *)icu::UVector::addElement(result, a1, a2);
  }

  unsigned int v10 = *(uint64_t (**)(void *))(a3 + 48);
  if (v10) {
    return (icu::UVector *)v10(a1);
  }
  return result;
}

void *icu::TextTrieMap::putImpl( icu::TextTrieMap *this, const icu::UnicodeString *a2, void *a3, UErrorCode *a4)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (!*((void *)this + 2))
  {
    *((_DWORD *)this + 6) = 512;
    uint64_t result = uprv_malloc(0x2000uLL);
    *((void *)this + 2) = result;
    if (!result)
    {
      *a4 = U_MEMORY_ALLOCATION_ERROR;
      return result;
    }

    *uint64_t result = 0LL;
    result[1] = 0LL;
    *((_DWORD *)this + 7) = 1;
  }

  __int128 v18 = 0u;
  uint64_t v21 = 0LL;
  __int128 v20 = 0u;
  __int128 v19 = 0u;
  uint64_t v17 = (UChar *)off_18971B688;
  LOWORD(v18) = 2;
  if (!*((_BYTE *)this + 8))
  {
    unsigned int v10 = *((unsigned __int16 *)a2 + 4);
    if ((v10 & 0x11) != 0)
    {
      uint64_t v11 = 0LL;
      if ((v10 & 0x8000) == 0) {
        goto LABEL_21;
      }
    }

    else if ((v10 & 2) != 0)
    {
      uint64_t v11 = (char *)a2 + 10;
      if ((v10 & 0x8000) == 0) {
        goto LABEL_21;
      }
    }

    else
    {
      uint64_t v11 = (char *)*((void *)a2 + 3);
      if ((v10 & 0x8000) == 0) {
        goto LABEL_21;
      }
    }

    int v12 = *((_DWORD *)a2 + 3);
    goto LABEL_22;
  }

  int v9 = (const UChar **)icu::UnicodeString::fastCopyFrom(&v17, (UChar **)a2);
  icu::UnicodeString::foldCase(v9, 0LL);
  unsigned int v10 = (unsigned __int16)v18;
  if ((v18 & 0x11) != 0)
  {
    uint64_t v11 = 0LL;
    if ((v18 & 0x8000) != 0) {
      goto LABEL_19;
    }
LABEL_21:
    int v12 = v10 >> 5;
    goto LABEL_22;
  }

  if ((v18 & 2) == 0)
  {
    uint64_t v11 = (char *)v19;
    if ((v18 & 0x8000) != 0) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

  uint64_t v11 = (char *)&v18 + 2;
  if ((v18 & 0x8000) == 0) {
    goto LABEL_21;
  }
LABEL_19:
  int v12 = DWORD1(v18);
LABEL_22:
  uint64_t v13 = (uint64_t *)*((void *)this + 2);
  if (v12 >= 1)
  {
    uint64_t v14 = v12;
    do
    {
      unsigned int v15 = *(unsigned __int16 *)v11;
      v11 += 2;
      uint64_t v13 = (uint64_t *)icu::TextTrieMap::addChildNode(this, (uint64_t)v13, v15, (int *)a4);
      --v14;
    }

    while (v14);
  }

  sub_1809A9760(v13, a3, *((uint64_t (**)(void *))this + 6), a4);
  return icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v17);
}

uint64_t icu::TextTrieMap::addChildNode(icu::TextTrieMap *this, uint64_t a2, unsigned int a3, int *a4)
{
  if (*a4 > 0) {
    return 0LL;
  }
  __int16 v6 = a3;
  uint64_t v7 = a2;
  unsigned int v9 = *(unsigned __int16 *)(a2 + 10);
  if (*(_WORD *)(a2 + 10))
  {
    unsigned int v10 = 0;
    uint64_t v11 = *((void *)this + 2);
    while (1)
    {
      unsigned int v12 = v9;
      unsigned int v13 = *(unsigned __int16 *)(v11 + 16LL * v9 + 8);
      if (v13 == a3) {
        return v11 + 16LL * v9;
      }
      if (v13 > a3) {
        goto LABEL_11;
      }
      unsigned int v9 = *(unsigned __int16 *)(v11 + 16LL * v9 + 12);
      unsigned int v10 = v12;
      if (!v9)
      {
        unsigned int v10 = v12;
        goto LABEL_10;
      }
    }
  }

  else
  {
    unsigned int v10 = 0;
LABEL_10:
    LOWORD(v12) = 0;
LABEL_11:
    int v14 = *((_DWORD *)this + 7);
    uint64_t v15 = *((void *)this + 2);
    if (v14 == *((_DWORD *)this + 6))
    {
      if (!icu::TextTrieMap::growNodes(this))
      {
        uint64_t result = 0LL;
        *a4 = 7;
        return result;
      }

      unint64_t v16 = v7 - v15;
      uint64_t v15 = *((void *)this + 2);
      uint64_t v7 = v15 + 16LL * (int)(v16 >> 4);
      int v14 = *((_DWORD *)this + 7);
    }

    uint64_t result = v15 + 16LL * v14;
    *(void *)uint64_t result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_WORD *)(result + 8) = v6;
    *(_WORD *)(result + 12) = v12;
    int v17 = *((_DWORD *)this + 7);
    if (v10) {
      *(_WORD *)(*((void *)this + 2) + 16LL * v10 + 12) = v17;
    }
    else {
      *(_WORD *)(v7 + 10) = v17;
    }
    *((_DWORD *)this + 7) = v17 + 1;
  }

  return result;
}

uint64_t icu::TextTrieMap::growNodes(icu::TextTrieMap *this)
{
  int v1 = *((_DWORD *)this + 6);
  if (v1 == 0xFFFF) {
    return 0LL;
  }
  if (v1 >= 64535) {
    int v1 = 64535;
  }
  int v4 = v1 + 1000;
  uint64_t result = (uint64_t)uprv_malloc(16LL * (v1 + 1000));
  if (result)
  {
    uint64_t v5 = result;
    __int16 v6 = (void *)*((void *)this + 2);
    memcpy((void *)result, v6, 16LL * *((int *)this + 7));
    uprv_free(v6);
    *((void *)this + 2) = v5;
    *((_DWORD *)this + 6) = v4;
    return 1LL;
  }

  return result;
}

uint64_t icu::TextTrieMap::getChildNode(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3 = *(unsigned __int16 *)(a2 + 10);
  if (!*(_WORD *)(a2 + 10)) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v5 = v3;
    unsigned int v6 = *(unsigned __int16 *)(v4 + 16LL * v3 + 8);
    if (v6 == a3) {
      break;
    }
    if (v6 <= a3)
    {
      unsigned int v3 = *(unsigned __int16 *)(v4 + 16 * v5 + 12);
      if (*(_WORD *)(v4 + 16 * v5 + 12)) {
        continue;
      }
    }

    return 0LL;
  }

  return v4 + 16 * v5;
}

icu::UVector *icu::TextTrieMap::buildTrie(icu::TextTrieMap *this, UErrorCode *a2)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  uint64_t result = (icu::UVector *)*((void *)this + 4);
  if (result)
  {
    if (*((int *)result + 2) >= 1)
    {
      signed int v5 = 0;
      do
      {
        uint64_t v6 = icu::UVector::elementAt(result, v5);
        uint64_t v7 = (void *)icu::UVector::elementAt(*((icu::UVector **)this + 4), v5 + 1);
        memset(v10, 0, sizeof(v10));
        uint64_t v9 = v6;
        icu::UnicodeString::UnicodeString(v10, 1LL, &v9);
        icu::TextTrieMap::putImpl(this, (const icu::UnicodeString *)v10, v7, a2);
        icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v10);
        uint64_t result = (icu::UVector *)*((void *)this + 4);
        v5 += 2;
      }

      while (v5 < *((_DWORD *)result + 2));
    }

    uint64_t result = (icu::UVector *)(*(uint64_t (**)(icu::UVector *, UErrorCode *))(*(void *)result + 8LL))( result,  a2);
    *((void *)this + 4) = 0LL;
  }

  return result;
}

void icu::TextTrieMap::search( icu::TextTrieMap *a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(void, void, void *, int *), UErrorCode *a5)
{
  if (*((void *)a1 + 4)) {
    icu::TextTrieMap::buildTrie(a1, a5);
  }
  umtx_unlock((std::mutex **)&unk_18C535C40);
  unsigned int v10 = (void *)*((void *)a1 + 2);
  if (v10) {
    icu::TextTrieMap::search(a1, v10, a2, a3, a3, a4, (int *)a5);
  }
}

void *icu::TextTrieMap::search( void *result, void *a2, uint64_t a3, uint64_t a4, int a5, uint64_t (***a6)(void, void, void *, int *), int *a7)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  if (*a7 > 0) {
    return result;
  }
  unsigned int v12 = a2;
  unsigned int v13 = result;
  if (*a2)
  {
    uint64_t result = (void *)(**a6)(a6, (a5 - a4), a2, a7);
    if (!(_DWORD)result || *a7 > 0) {
      return result;
    }
  }

  if (*((_BYTE *)v13 + 8))
  {
    unsigned int v15 = icu::UnicodeString::char32At( (uint64_t *)*((unsigned __int8 *)v13 + 8),  (icu::UnicodeString *)a3,  a5);
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    if (v15 < 0x10000) {
      int v16 = 1;
    }
    else {
      int v16 = 2;
    }
    __int128 v33 = 0uLL;
    __int128 v34 = 0uLL;
    icu::UnicodeString::UnicodeString((uint64_t)&v33, v15);
    icu::UnicodeString::foldCase((const UChar **)&v33, 0LL);
    uint64_t v17 = 0LL;
    unint64_t v18 = (unint64_t)&v33 | 0xA;
    if ((BYTE8(v33) & 2) == 0) {
      unint64_t v18 = *((void *)&v34 + 1);
    }
    if ((WORD4(v33) & 0x8000) != 0) {
      goto LABEL_18;
    }
LABEL_16:
    unint64_t v19 = (unint64_t)WORD4(v33) >> 5;
    if (v17 < v19)
    {
      while (1)
      {
        unsigned int v20 = v19 <= v17 ? 0xFFFF : *(unsigned __int16 *)(v18 + 2 * v17);
        unsigned int v21 = *((unsigned __int16 *)v12 + 5);
        if (!*((_WORD *)v12 + 5)) {
          break;
        }
        ++v17;
        uint64_t v22 = v13[2];
        while (1)
        {
          uint64_t v23 = v21;
          unsigned int v24 = *(unsigned __int16 *)(v22 + 16LL * v21 + 8);
          if (v24 == v20) {
            break;
          }
          if (v24 <= v20)
          {
            unsigned int v21 = *(unsigned __int16 *)(v22 + 16 * v23 + 12);
            if (*(_WORD *)(v22 + 16 * v23 + 12)) {
              continue;
            }
          }

          goto LABEL_30;
        }

        unsigned int v12 = (void *)(v22 + 16 * v23);
        if ((WORD4(v33) & 0x8000) == 0) {
          goto LABEL_16;
        }
LABEL_18:
        unint64_t v19 = HIDWORD(v33);
        if (v17 >= SHIDWORD(v33)) {
          goto LABEL_31;
        }
      }

icu::ZNStringPool *icu::ZNStringPool::ZNStringPool(icu::ZNStringPool *this, UErrorCode *a2)
{
  *(void *)this = 0LL;
  *((void *)this + 1) = 0LL;
  unsigned int v3 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v3 <= 0)
  {
    signed int v5 = icu::UMemory::operator new(v3, (icu::UMemory *)0xFB0, (unint64_t)a2);
    if (v5)
    {
      *signed int v5 = 0LL;
      *((_DWORD *)v5 + 2) = 0;
      *(void *)this = v5;
      *((void *)this + 1) = uhash_open( (uint64_t)uhash_hashUChars,  (uint64_t)uhash_compareUChars,  (uint64_t)uhash_compareUChars,  (int *)a2);
    }

    else
    {
      *(void *)this = 0LL;
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
  }

  return this;
}

void icu::ZNStringPool::~ZNStringPool(icu::ZNStringPool *this)
{
  int v2 = (_BYTE *)*((void *)this + 1);
  if (v2)
  {
    uhash_close(v2);
    *((void *)this + 1) = 0LL;
  }

  unsigned int v3 = *(void **)this;
  if (*(void *)this)
  {
    do
    {
      uint64_t v4 = (void *)*v3;
      icu::UMemory::operator delete(v3);
      *(void *)this = v4;
      unsigned int v3 = v4;
    }

    while (v4);
  }

UChar *icu::ZNStringPool::get(uint64_t *a1, const UChar *a2, int *a3)
{
  if (*a3 > 0) {
    return (UChar *)&unk_180A3DA28;
  }
  unsigned int v3 = (UChar *)uhash_get(a1[1], (uint64_t)a2);
  if (v3) {
    return v3;
  }
  int32_t v7 = u_strlen(a2);
  int32_t v9 = v7;
  uint64_t v10 = *a1;
  uint64_t v11 = (uint64_t *)*(unsigned int *)(*a1 + 8);
  if (v7 < 2000)
  {
    unsigned int v13 = icu::UMemory::operator new(v11, (icu::UMemory *)0xFB0, v8);
    if (!v13)
    {
      *a1 = 0LL;
      int v12 = 7;
      goto LABEL_12;
    }

    LODWORD(v11) = 0;
    *((_DWORD *)v13 + 2) = 0;
    *unsigned int v13 = v10;
    uint64_t v10 = (uint64_t)v13;
    *a1 = (uint64_t)v13;
LABEL_9:
    unsigned int v3 = (UChar *)(v10 + 2LL * (int)v11 + 12);
    u_strcpy(v3, a2);
    uint64_t v14 = a1[1];
    *(_DWORD *)(*a1 + 8) += v9 + 1;
    uhash_put(v14, (uint64_t)v3, (uint64_t)v3, a3);
    return v3;
  }

  int v12 = 5;
LABEL_12:
  *a3 = v12;
  return (UChar *)&unk_180A3DA28;
}

void *icu::ZNStringPool::adopt(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 > 0) {
    return &unk_180A3DA28;
  }
  uint64_t v3 = a2;
  if (a2 && !uhash_get(*(void *)(a1 + 8), a2)) {
    uhash_put(*(void *)(a1 + 8), v3, v3, a3);
  }
  return (void *)v3;
}

void icu::ZNStringPool::freeze(icu::ZNStringPool *this)
{
  *((void *)this + 1) = 0LL;
}

void sub_1809AA574(icu::ResourceSink *a1)
{
}

void *sub_1809AA588()
{
  return &unk_18C535C90;
}

uint64_t sub_1809AA594(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 0LL;
  }
  signed int v5 = *(icu::UVector **)(a1 + 128);
  if (!v5) {
    return 0LL;
  }
  signed int v6 = *(_DWORD *)(a1 + 120);
  if (v6 >= *(_DWORD *)(a1 + 116)) {
    return 0LL;
  }
  uint64_t v2 = a1 + 8;
  *(_DWORD *)(a1 + 120) = v6 + 1;
  uint64_t v7 = icu::UVector::elementAt(v5, v6);
  icu::UnicodeString::unBogus(a1 + 8);
  else {
    uint64_t v8 = *(unsigned __int16 *)(a1 + 16) >> 5;
  }
  icu::UnicodeString::doReplace(a1 + 8, 0LL, v8, v7, 0, 0xFFFFFFFFLL);
  return v2;
}

uint64_t sub_1809AA630(uint64_t result)
{
  *(_DWORD *)(result + 120) = 0;
  return result;
}

uint64_t sub_1809AA638(uint64_t a1)
{
  return *(unsigned int *)(a1 + 116);
}

void sub_1809AA640(icu::StringEnumeration *this)
{
  *(void *)this = off_18972C190;
  uint64_t v2 = *((void *)this + 17);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::StringEnumeration::~StringEnumeration(this);
}

void sub_1809AA680(icu::StringEnumeration *this)
{
  *(void *)this = off_18972C190;
  uint64_t v2 = *((void *)this + 17);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::StringEnumeration::~StringEnumeration(this);
  icu::UMemory::operator delete(v3);
}

void *sub_1809AA6C4(void *a1)
{
  *a1 = off_18972C1F8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

void sub_1809AA704(void *a1)
{
  *a1 = off_18972C1F8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::UMemory::operator delete(a1);
}

uint64_t sub_1809AA744(uint64_t a1, unint64_t a2, _BYTE *a3, UErrorCode *a4)
{
  v18[8] = *(UChar **)MEMORY[0x1895F89C0];
  if (*(void *)a3)
  {
    int v7 = a2;
    if (a3[14])
    {
      int v9 = *(_DWORD *)(*(void *)a3 + 8LL);
      if (v9 < 1) {
        return 1LL;
      }
    }

    else
    {
      int v9 = 1;
    }

    unsigned int v10 = 0;
    while (1)
    {
      uint64_t v11 = *(unsigned int **)a3;
      if (a3[14]) {
        uint64_t v11 = (unsigned int *)icu::UVector::elementAt(*(icu::UVector **)a3, v10);
      }
      if (!v11) {
        goto LABEL_24;
      }
      int v12 = (uint64_t *)*v11;
      unsigned int v13 = *(icu::TimeZoneNames::MatchInfoCollection **)(a1 + 16);
      if (v13) {
        goto LABEL_16;
      }
      uint64_t v14 = icu::UMemory::operator new(v12, (icu::UMemory *)0x10, a2);
      if (v14) {
        break;
      }
      *(void *)(a1 + 16) = 0LL;
      *a4 = U_MEMORY_ALLOCATION_ERROR;
LABEL_24:
      if (v9 == ++v10) {
        return 1LL;
      }
    }

    unsigned int v13 = (icu::TimeZoneNames::MatchInfoCollection *)v14;
    *(void *)(a1 + 16) = icu::TimeZoneNames::MatchInfoCollection::MatchInfoCollection(v14);
LABEL_16:
    if (*(int *)a4 <= 0)
    {
      uint64_t v15 = *((void *)v11 + 1);
      unint64_t v16 = *v11;
      if (v15)
      {
        icu::UnicodeString::UnicodeString((uint64_t)v18, v15, 0xFFFFFFFFLL);
        icu::TimeZoneNames::MatchInfoCollection::addZone(v13, v16, v7, v18, a4);
      }

      else
      {
        icu::UnicodeString::UnicodeString((uint64_t)v18, *((void *)v11 + 2), 0xFFFFFFFFLL);
        icu::TimeZoneNames::MatchInfoCollection::addMetaZone(v13, v16, v7, v18, a4);
      }

      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v18);
    }

    goto LABEL_24;
  }

  return 1LL;
}

uint64_t sub_1809AA8F8(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = off_18972C220;
  icu::Locale::Locale((icu::Locale *)(a1 + 8), a2);
  *(void *)(a1 + 232) = 0LL;
  *(void *)(a1 + 240) = 0LL;
  *(_WORD *)(a1 + 256) = 0;
  *(void *)(a1 + 248) = 0LL;
  *(void *)(a1 + 264) = off_18972C170;
  *(_BYTE *)(a1 + 272) = 1;
  *(void *)(a1 + 288) = 0LL;
  *(void *)(a1 + 296) = 0LL;
  *(void *)(a1 + 280) = 0LL;
  *(_BYTE *)(a1 + 304) = 1;
  *(void *)(a1 + 312) = j__uprv_free_4;
  sub_1809AA984((void *)a1, a2, a3);
  return a1;
}

void sub_1809AA984(void *a1, uint64_t a2, int *a3)
{
  v12[8] = *(UChar **)MEMORY[0x1895F89C0];
  if (*a3 <= 0)
  {
    int v11 = 0;
    uint64_t v5 = ures_open("icudt74l-zone", *(char **)(a2 + 40), &v11);
    a1[29] = v5;
    a1[29] = ures_getByKeyWithFallback(v5, "zoneStrings", v5, (UErrorCode *)&v11);
    if (v11 >= 1)
    {
      *a3 = v11;
LABEL_5:
      sub_1809AAAF4(a1);
      return;
    }

    a1[31] = uhash_open((uint64_t)uhash_hashUChars, (uint64_t)uhash_compareUChars, 0LL, a3);
    a1[30] = uhash_open((uint64_t)uhash_hashUChars, (uint64_t)uhash_compareUChars, 0LL, a3);
    if (*a3 >= 1) {
      goto LABEL_5;
    }
    uhash_setValueDeleter(a1[31], (uint64_t)sub_1809AAB40);
    signed int v6 = (icu::TimeZone *)uhash_setValueDeleter(a1[30], (uint64_t)sub_1809AAB40);
    Default = (icu::ZoneMeta *)icu::TimeZone::createDefault(v6);
    CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID(Default, v8);
    if (CanonicalCLDRID)
    {
      icu::UnicodeString::UnicodeString((uint64_t)v12, (uint64_t)CanonicalCLDRID);
      sub_1809AAB88((uint64_t)a1, v12, a3);
      icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v12);
    }

    (*(void (**)(icu::ZoneMeta *))(*(void *)Default + 8LL))(Default);
  }

void sub_1809AAAF4(void *a1)
{
  uint64_t v2 = a1[29];
  if (v2)
  {
    ures_close(v2);
    a1[29] = 0LL;
  }

  uint64_t v3 = (_BYTE *)a1[31];
  if (v3)
  {
    uhash_close(v3);
    a1[31] = 0LL;
  }

  uint64_t v4 = (_BYTE *)a1[30];
  if (v4)
  {
    uhash_close(v4);
    a1[30] = 0LL;
  }

void sub_1809AAB40(void **a1)
{
  if (a1 != (void **)"<empty>" && a1 != 0LL)
  {
    if (*((_BYTE *)a1 + 57)) {
      uprv_free(*a1);
    }
    icu::UMemory::operator delete(a1);
  }

uint64_t sub_1809AAB88(uint64_t a1, UChar **a2, int *a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, UChar **, int *))(*(void *)a1 + 48LL))(a1, a2, a3);
  uint64_t v7 = result;
  if (*a3 <= 0)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t, int *))(*(void *)result + 56LL))(result, a3);
    if (v8) {
      BOOL v9 = *a3 <= 0;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9)
    {
      uint64_t v10 = v8;
      do
      {
        sub_1809AADD4(a1, v10, a3);
        uint64_t v10 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v7 + 56LL))(v7, a3);
        if (v10) {
          BOOL v11 = *a3 <= 0;
        }
        else {
          BOOL v11 = 0;
        }
      }

      while (v11);
    }

    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }

  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  return result;
}

uint64_t sub_1809AAC5C(uint64_t a1, UChar **a2, int *a3)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (*a3 > 0) {
    return 0LL;
  }
  __int16 v16 = 0;
  memset(v15, 0, sizeof(v15));
  uint64_t v14 = (UChar *)v15;
  *((_WORD *)v15 + (int)icu::UnicodeString::extract((uint64_t)a2, &v14, 129, a3)) = 0;
  uint64_t v3 = uhash_get(*(void *)(a1 + 240), (uint64_t)v15);
  if (!v3)
  {
    BOOL v11 = &off_18972C3F8;
    memset(v12, 0, sizeof(v12));
    uint64_t v13 = 0LL;
    sub_1809AB6C8((uint64_t)&v11, *(void *)(a1 + 232), a2, (unsigned int *)a3);
    uint64_t v8 = *(void *)(a1 + 240);
    for (uint64_t i = 1LL; i != 8; ++i)
    {
    }

    uint64_t v3 = (uint64_t)sub_1809AB83C(v8, (const icu::UnicodeString *)v12, (icu::ZoneMeta *)a2, a3);
    int v10 = *a3;
    icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v11);
    if (v10 > 0) {
      return 0LL;
    }
  }

  return v3;
}

char *sub_1809AADD4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (*a3 > 0) {
    return 0LL;
  }
  __int16 v19 = 0;
  memset(v18, 0, sizeof(v18));
  uint64_t v17 = (UChar *)v18;
  icu::UnicodeString::extract(a2, &v17, 129, a3);
  unsigned int v7 = *(unsigned __int16 *)(a2 + 8);
  int v8 = (__int16)v7;
  unsigned int v9 = v7 >> 5;
  if (v8 < 0) {
    unsigned int v9 = *(_DWORD *)(a2 + 12);
  }
  *((_WORD *)v18 + (int)v9) = 0;
  int v10 = (char *)uhash_get(*(void *)(a1 + 248), (uint64_t)v18);
  if (!v10)
  {
    uint64_t v14 = &off_18972C3F8;
    memset(v15, 0, sizeof(v15));
    uint64_t v16 = 0LL;
    sub_1809AB530((uint64_t)&v14, *(void *)(a1 + 232), (unsigned __int16 *)a2, a3);
    uint64_t v11 = *(void *)(a1 + 248);
    for (uint64_t i = 1LL; i != 8; ++i)
    {
    }

    int v10 = (char *)sub_1809AB5FC(v11, (const icu::UnicodeString *)v15, (UChar **)a2, a3);
    int v13 = *a3;
    icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v14);
    if (v13 > 0) {
      return 0LL;
    }
  }

  if (v10 == "<empty>") {
    return 0LL;
  }
  return v10;
}

void sub_1809AAF70(void *a1)
{
  *a1 = off_18972C220;
  uint64_t v2 = (icu::Locale *)(a1 + 1);
  sub_1809AAAF4(a1);
  icu::TextTrieMap::~TextTrieMap((icu::TextTrieMap *)(a1 + 33));
  icu::Locale::~Locale(v2);
  icu::TimeZoneNames::~TimeZoneNames((icu::TimeZoneNames *)a1);
}

void sub_1809AAFB8(void *a1)
{
}

BOOL sub_1809AAFCC(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t *sub_1809AAFD8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v5 = 0;
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0x140, a2);
  if (result) {
    return (uint64_t *)sub_1809AA8F8((uint64_t)result, a1 + 8, &v5);
  }
  return result;
}

uint64_t *sub_1809AB018(uint64_t a1, icu::ZoneMeta *a2)
{
  return sub_1809AB020(a2);
}

uint64_t *sub_1809AB020(icu::ZoneMeta *a1)
{
  uint64_t AvailableMetazoneIDs = icu::ZoneMeta::getAvailableMetazoneIDs(a1);
  uint64_t result = icu::UMemory::operator new(v4, (icu::UMemory *)0x90, v3);
  if (AvailableMetazoneIDs)
  {
    if (result)
    {
      uint64_t result = (uint64_t *)icu::StringEnumeration::StringEnumeration((uint64_t)result);
      *uint64_t result = (uint64_t)off_18972C190;
      result[16] = AvailableMetazoneIDs;
      result[17] = 0LL;
      *(uint64_t *)((char *)result + 116) = *(unsigned int *)(AvailableMetazoneIDs + 8);
    }
  }

  else if (result)
  {
    uint64_t result = (uint64_t *)icu::StringEnumeration::StringEnumeration((uint64_t)result);
    *uint64_t result = (uint64_t)off_18972C190;
    *((_DWORD *)result + 29) = 0;
    *((_DWORD *)result + 30) = 0;
    result[16] = 0LL;
    result[17] = 0LL;
  }

  return result;
}

uint64_t *sub_1809AB0A0(uint64_t a1, icu::ZoneMeta *a2, const icu::UnicodeString *a3)
{
  return sub_1809AB0AC(a2, a3);
}

uint64_t *sub_1809AB0AC(icu::ZoneMeta *a1, const icu::UnicodeString *a2)
{
  uint64_t MetazoneMappings = icu::ZoneMeta::getMetazoneMappings(a1, a2);
  if (!MetazoneMappings)
  {
    uint64_t result = icu::UMemory::operator new(v6, (icu::UMemory *)0x90, v5);
    if (result)
    {
      uint64_t result = (uint64_t *)icu::StringEnumeration::StringEnumeration((uint64_t)result);
      *uint64_t result = (uint64_t)off_18972C190;
      *((_DWORD *)result + 29) = 0;
      *((_DWORD *)result + 30) = 0;
      result[16] = 0LL;
      result[17] = 0LL;
    }

    return result;
  }

  unsigned int v7 = (unsigned int *)MetazoneMappings;
  int v8 = icu::UMemory::operator new(v6, (icu::UMemory *)0x28, v5);
  if (!v8)
  {
    if (*(int *)a2 <= 0)
    {
      uint64_t result = 0LL;
      *(_DWORD *)a2 = 7;
      return result;
    }

    return 0LL;
  }

  unsigned int v9 = v8;
  icu::UVector::UVector((uint64_t)v8, 0LL, (uint64_t)uhash_compareUChars, (int *)a2);
  if (*(int *)a2 > 0)
  {
LABEL_12:
    (*(void (**)(uint64_t *))(*v9 + 8))(v9);
    return 0LL;
  }

  signed int v11 = 0;
  while (1)
  {
    int v12 = (uint64_t *)v7[2];
    int v13 = *(void **)icu::UVector::elementAt((icu::UVector *)v7, v11);
    ++v11;
  }

  uint64_t v14 = icu::UMemory::operator new(v12, (icu::UMemory *)0x90, v10);
  if (!v14)
  {
    goto LABEL_12;
  }

  uint64_t result = (uint64_t *)icu::StringEnumeration::StringEnumeration((uint64_t)v14);
  *uint64_t result = (uint64_t)off_18972C190;
  *((_DWORD *)result + 29) = 0;
  *((_DWORD *)result + 30) = 0;
  result[16] = (uint64_t)v9;
  result[17] = (uint64_t)v9;
  *((_DWORD *)result + 29) = *((_DWORD *)v9 + 2);
  if (*(int *)a2 > 0)
  {
    sub_1809AA680((icu::StringEnumeration *)result);
    return 0LL;
  }

  return result;
}

const icu::UnicodeString *sub_1809AB228( double a1, uint64_t a2, icu::ZoneMeta *a3, const icu::UnicodeString *a4)
{
  return a4;
}

const icu::UnicodeString *sub_1809AB254( uint64_t a1, icu::ZoneMeta *a2, uint64_t a3, const icu::UnicodeString *a4)
{
  return sub_1809AB264(a2, a3, a4);
}

const icu::UnicodeString *sub_1809AB264(icu::ZoneMeta *a1, uint64_t a2, const icu::UnicodeString *a3)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  icu::UnicodeString::UnicodeString(v8, a2, 0xFFFFFFFFLL, 0LL);
  icu::ZoneMeta::getZoneIdByMetazone(a1, (const icu::UnicodeString *)v8, a3, v5);
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v8);
  return a3;
}

icu::UnicodeString *sub_1809AB2E4(uint64_t a1, uint64_t a2, uint64_t a3, icu::UnicodeString *this)
{
  if (*(unsigned __int16 *)(a2 + 8) >= 0x20u)
  {
    umtx_lock((icu::UMutex *)&unk_18C4499B0);
    int v14 = 0;
    int v8 = sub_1809AADD4(a1, a2, &v14);
    int v9 = v14;
    umtx_unlock((std::mutex **)&unk_18C4499B0);
    if (v9 <= 0 && v8 != 0LL)
    {
      int v11 = sub_1809AD7A8(a3);
      if ((v11 & 0x80000000) == 0)
      {
        if (*(void *)&v8[8 * v11])
        {
          int v13 = *(const UChar **)&v8[8 * v11];
          icu::UnicodeString::setTo(this, 1, &v13, -1);
        }
      }
    }
  }

  return this;
}

icu::UnicodeString *sub_1809AB3B4(uint64_t a1, uint64_t a2, uint64_t a3, icu::UnicodeString *this)
{
  if (*(unsigned __int16 *)(a2 + 8) >= 0x20u)
  {
    umtx_lock((icu::UMutex *)&unk_18C4499B0);
    int v14 = 0;
    uint64_t v8 = sub_1809AAC5C(a1, (UChar **)a2, &v14);
    int v9 = v14;
    umtx_unlock((std::mutex **)&unk_18C4499B0);
    if (v9 <= 0 && v8 != 0)
    {
      unsigned int v11 = sub_1809AD7A8(a3);
      if ((v11 & 0x80000000) == 0)
      {
        if (*(void *)(v8 + 8LL * v11))
        {
          int v13 = *(const UChar **)(v8 + 8LL * v11);
          icu::UnicodeString::setTo(this, 1, &v13, -1);
        }
      }
    }
  }

  return this;
}

icu::UnicodeString *sub_1809AB484(uint64_t a1, UChar **a2, icu::UnicodeString *this)
{
  int v10 = 0;
  signed int v6 = (const UChar **)sub_1809AAC5C(a1, a2, &v10);
  LODWORD(a1) = v10;
  umtx_unlock((std::mutex **)&unk_18C4499B0);
  BOOL v7 = (int)a1 > 0 || v6 == 0LL;
  if (!v7 && *v6)
  {
    int v9 = *v6;
    icu::UnicodeString::setTo(this, 1, &v9, -1);
  }

  return this;
}

void sub_1809AB530(uint64_t a1, uint64_t a2, unsigned __int16 *a3, int *a4)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  if (*a4 <= 0)
  {
    char v9 = 0;
    memset(v8, 0, sizeof(v8));
    sub_1809AD4F4(a3, v8);
    int v7 = 0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(void *)(a1 + 56) = 0LL;
    ures_getAllItemsWithFallback(a2, (char *)v8, a1, &v7);
    if (v7 <= 0) {
      *a4 = v7;
    }
  }

const char *sub_1809AB5FC(uint64_t a1, const icu::UnicodeString *a2, UChar **a3, int *a4)
{
  if (*a4 > 0) {
    return 0LL;
  }
  uint64_t MetaZoneID = icu::ZoneMeta::findMetaZoneID(a3, a2);
  if (!memcmp(a2, &unk_180A3DB90, 0x38uLL))
  {
    uint64_t v4 = "<empty>";
  }

  else
  {
    unsigned int v11 = icu::UMemory::operator new(v10, (icu::UMemory *)0x40, v9);
    uint64_t v4 = (const char *)v11;
    if (!v11)
    {
      *a4 = 7;
      return v4;
    }

    *((_BYTE *)v11 + 56) = 0;
    __int128 v12 = *(_OWORD *)a2;
    __int128 v13 = *((_OWORD *)a2 + 1);
    __int128 v14 = *((_OWORD *)a2 + 2);
    v11[6] = *((void *)a2 + 6);
    *((_OWORD *)v11 + 1) = v13;
    *((_OWORD *)v11 + 2) = v14;
    *(_OWORD *)unsigned int v11 = v12;
    *((_BYTE *)v11 + 57) = 0;
  }

  uhash_put(a1, MetaZoneID, (uint64_t)v4, a4);
  return v4;
}

void *sub_1809AB6C8(uint64_t a1, uint64_t a2, UChar **a3, unsigned int *a4)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v22, a3);
  unint64_t v7 = 0LL;
  while ((SWORD4(v22) & 0x80000000) == 0)
  {
    unint64_t v8 = (unint64_t)WORD4(v22) >> 5;
    if (v7 >= v8) {
      goto LABEL_14;
    }
LABEL_7:
    if (v8 > v7)
    {
      unint64_t v9 = (BYTE8(v22) & 2) != 0 ? (unint64_t)&v22 | 0xA : *((void *)&v23 + 1);
      if (*(_WORD *)(v9 + 2 * v7) == 47) {
        icu::UnicodeString::setCharAt((icu::UnicodeString *)&v22, v7, 58);
      }
    }

    ++v7;
  }

  unint64_t v8 = SHIDWORD(v22);
  if ((uint64_t)v7 < SHIDWORD(v22))
  {
    unint64_t v8 = HIDWORD(v22);
    goto LABEL_7;
  }

uint64_t *sub_1809AB83C(uint64_t a1, const icu::UnicodeString *a2, icu::ZoneMeta *a3, int *a4)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  if (*a4 > 0) {
    return 0LL;
  }
  if (*(void *)a2)
  {
    uint64_t v9 = 0LL;
  }

  else
  {
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    uint64_t v28 = 0LL;
    __int128 v27 = 0u;
    __int128 v24 = off_18971B688;
    LOWORD(v25) = 2;
    sub_1809AC374((uint64_t)a3, (int32_t *)&v24);
    LODWORD(v10) = (unsigned __int16)v25 >> 5;
    if ((v25 & 0x8000u) == 0LL) {
      unint64_t v10 = v10;
    }
    else {
      unint64_t v10 = DWORD1(v25);
    }
    if ((int)v10 < 1)
    {
      uint64_t v9 = 0LL;
    }

    else
    {
      TerminatedBuffer = (const void *)icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)&v24);
      int v12 = (unsigned __int16)v25 >> 5;
      if ((v25 & 0x8000u) != 0LL) {
        int v12 = DWORD1(v25);
      }
      size_t v13 = 2 * v12 + 2;
      __int128 v14 = uprv_malloc(v13);
      if (!v14)
      {
        *a4 = 7;
        icu::UnicodeString::~UnicodeString((void *)7, (icu::UnicodeString *)&v24);
        return 0LL;
      }

      uint64_t v9 = (uint64_t)v14;
      memcpy(v14, TerminatedBuffer, v13);
    }

    icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)&v24);
  }

  uint64_t TimeZoneID = icu::ZoneMeta::findTimeZoneID(a3, a2);
  __int128 v18 = icu::UMemory::operator new(v17, (icu::UMemory *)0x40, v16);
  uint64_t v4 = v18;
  if (v18)
  {
    *((_BYTE *)v18 + 56) = 0;
    __int128 v19 = *(_OWORD *)a2;
    __int128 v20 = *((_OWORD *)a2 + 1);
    __int128 v21 = *((_OWORD *)a2 + 2);
    v18[6] = *((void *)a2 + 6);
    *((_OWORD *)v18 + 1) = v20;
    *((_OWORD *)v18 + 2) = v21;
    *(_OWORD *)__int128 v18 = v19;
    if (v9)
    {
      *__int128 v18 = v9;
      char v22 = 1;
    }

    else
    {
      char v22 = 0;
    }

    *((_BYTE *)v18 + 57) = v22;
    uhash_put(a1, TimeZoneID, (uint64_t)v18, a4);
  }

  else
  {
    *a4 = 7;
  }

  return v4;
}

uint64_t sub_1809ABA0C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, UErrorCode *a5)
{
  int v14 = a4;
  int v15 = 0;
  size_t v13 = off_18972C1F8;
  uint64_t v16 = 0LL;
  umtx_lock((icu::UMutex *)&unk_18C4499B0);
  uint64_t v9 = sub_1809ABB50(a1, (uint64_t)&v13, a2, a3, a5);
  uint64_t v10 = 0LL;
  if (*(int *)a5 <= 0)
  {
    uint64_t v10 = v9;
    if (!v9)
    {
      sub_1809ABC00(a1, a5);
      uint64_t v11 = sub_1809ABB50(a1, (uint64_t)&v13, a2, a3, a5);
      if (*(int *)a5 > 0)
      {
LABEL_4:
        uint64_t v10 = 0LL;
        goto LABEL_6;
      }

      uint64_t v10 = v11;
      if (!v11)
      {
        sub_1809ABD04(a1, (int *)a5);
        sub_1809ABC00(a1, a5);
        *(_BYTE *)(a1 + 256) = 1;
        uint64_t v10 = sub_1809ABB50(a1, (uint64_t)&v13, a2, a3, a5);
      }
    }
  }

uint64_t sub_1809ABB50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, UErrorCode *a5)
{
  int v6 = a4;
  icu::TextTrieMap::search( (icu::TextTrieMap *)(a1 + 264),  a3,  a4,  (uint64_t (***)(void, void, void *, int *))a2,  a5);
  uint64_t result = *(void *)(a2 + 16);
  int v11 = *(_DWORD *)(a2 + 12);
  *(void *)(a2 + 16) = 0LL;
  *(_DWORD *)(a2 + 12) = 0;
  if (result)
  {
    unsigned int v12 = *(unsigned __int16 *)(a3 + 8);
    int v13 = (__int16)v12;
    unsigned int v14 = v12 >> 5;
    if (v13 < 0) {
      unsigned int v14 = *(_DWORD *)(a3 + 12);
    }
    if (v11 != v14 - v6 && !*(_BYTE *)(a1 + 256))
    {
      (*(void (**)(uint64_t))(*(void *)result + 8LL))(result);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1809ABC00(uint64_t result, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    uint64_t v3 = result;
    int v5 = -1;
    uint64_t v4 = uhash_nextElement(*(uint64_t **)(result + 248), &v5);
    if (v4)
    {
      while (1)
      {
        if (*(char **)(v4 + 8) != "<empty>")
        {
          uint64_t result = (uint64_t)sub_1809AD820(*(_BYTE **)(v4 + 8), *(void *)(v4 + 16), 0LL, v3 + 264, a2);
        }

        uint64_t v4 = uhash_nextElement(*(uint64_t **)(v3 + 248), &v5);
        if (!v4) {
          goto LABEL_7;
        }
      }
    }

    else
    {
LABEL_7:
      int v5 = -1;
      for (uint64_t result = uhash_nextElement(*(uint64_t **)(v3 + 240), &v5);
            result;
            uint64_t result = uhash_nextElement(*(uint64_t **)(v3 + 240), &v5))
      {
        if (*(char **)(result + 8) != "<empty>")
        {
          uint64_t result = (uint64_t)sub_1809AD820(*(_BYTE **)(result + 8), 0LL, *(void *)(result + 16), v3 + 264, a2);
        }
      }
    }
  }

  return result;
}

void sub_1809ABD04(uint64_t a1, int *a2)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (!*(_BYTE *)(a1 + 257))
  {
    *(_BYTE *)(a1 + 257) = 1;
    v13[0] = 0LL;
    v13[1] = 0LL;
    unsigned int v14 = 0LL;
    sub_1809AD900(v13, a1, a2);
    sub_1809AC1B8((uint64_t)v13, a2);
    if (*a2 <= 0)
    {
      TimeZoneIDuint64_t Enumeration = icu::TimeZone::createTimeZoneIDEnumeration(1LL, 0LL, 0LL, a2);
      uint64_t v5 = TimeZoneIDEnumeration;
      if (*a2 <= 0)
      {
        uint64_t v6 = (*(uint64_t (**)(uint64_t, int *))(*(void *)TimeZoneIDEnumeration + 56LL))( TimeZoneIDEnumeration,  a2);
        if (v6) {
          BOOL v7 = *a2 <= 0;
        }
        else {
          BOOL v7 = 0;
        }
        if (v7)
        {
          unint64_t v8 = (UChar **)v6;
          do
          {
            memset(v15, 0, sizeof(v15));
            icu::UnicodeString::UnicodeString((icu::UnicodeString *)v15, v8);
            uint64_t v9 = *(void *)(a1 + 240);
            uint64_t TerminatedBuffer = icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)v15);
            if (!uhash_get(v9, TerminatedBuffer)) {
              sub_1809AAB88(a1, v8, a2);
            }
            icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v15);
            unint64_t v8 = (UChar **)(*(uint64_t (**)(uint64_t, int *))(*(void *)v5 + 56LL))(v5, a2);
            if (v8) {
              BOOL v12 = *a2 < 1;
            }
            else {
              BOOL v12 = 0;
            }
          }

          while (v12);
        }
      }

      else if (!TimeZoneIDEnumeration)
      {
        goto LABEL_19;
      }

      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }

void sub_1809ABE9C(icu::ResourceSink *a1)
{
  *(void *)a1 = off_18972C2B0;
  uhash_close(*((_BYTE **)a1 + 2));
  icu::ResourceSink::~ResourceSink(a1);
}

void sub_1809ABED0(icu::ResourceSink *a1)
{
  *(void *)a1 = off_18972C2B0;
  uhash_close(*((_BYTE **)a1 + 2));
  icu::ResourceSink::~ResourceSink(a1);
  icu::UMemory::operator delete(v2);
}

void sub_1809ABF08(uint64_t a1, int *a2)
{
  if (*a2 <= 0)
  {
    umtx_lock((icu::UMutex *)&unk_18C4499B0);
    sub_1809ABD04(a1, a2);
    umtx_unlock((std::mutex **)&unk_18C4499B0);
  }

void sub_1809ABF6C( uint64_t a1, uint64_t a2, unsigned int *a3, int a4, icu::UnicodeString *a5, int *a6, double a7)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  if (*a6 <= 0)
  {
    BOOL v7 = (UChar **)a2;
    if (*(unsigned __int16 *)(a2 + 8) >= 0x20u)
    {
      unint64_t v8 = a6;
      umtx_lock((icu::UMutex *)&unk_18C4499B0);
      uint64_t v13 = sub_1809AAC5C(a1, v7, v8);
      int v14 = *v8;
      umtx_unlock((std::mutex **)&unk_18C4499B0);
      if (v14 <= 0 && a4 >= 1)
      {
        int v15 = 0LL;
        uint64_t v16 = a4;
        __int128 v17 = off_18971B688;
        do
        {
          unsigned int v19 = *a3++;
          uint64_t v18 = v19;
          unsigned int v20 = sub_1809AD7A8(v19);
          if ((v20 & 0x80000000) == 0)
          {
            __int128 v21 = *(const UChar **)(v13 + 8LL * v20);
            if (v21) {
              goto LABEL_19;
            }
          }

          if (!v15)
          {
            uint64_t v36 = 0LL;
            __int128 v34 = 0u;
            __int128 v35 = 0u;
            __int128 v33 = 0u;
            unsigned int v32 = v17;
            LOWORD(v33) = 2;
            (*(void (**)(uint64_t, UChar **, void (***)(icu::UnicodeString *__hidden), double))(*(void *)a1 + 56LL))( a1,  v7,  &v32,  a7);
            unint64_t v22 = (unsigned __int16)v33;
            int v15 = "<empty>";
            if ((unsigned __int16)v33 >= 0x20u)
            {
              uint64_t v23 = v13;
              __int128 v24 = v17;
              __int128 v25 = v7;
              umtx_lock((icu::UMutex *)&unk_18C4499B0);
              __int128 v26 = sub_1809AADD4(a1, (uint64_t)&v32, v8);
              __int128 v27 = v8;
              int v28 = *v8;
              if (v26) {
                int v15 = v26;
              }
              else {
                int v15 = "<empty>";
              }
              umtx_unlock((std::mutex **)&unk_18C4499B0);
              if (v28 > 0)
              {
                icu::UnicodeString::~UnicodeString((void *)v22, (icu::UnicodeString *)&v32);
                return;
              }

              unint64_t v8 = v27;
              BOOL v7 = v25;
              __int128 v17 = v24;
              uint64_t v13 = v23;
            }

            icu::UnicodeString::~UnicodeString((void *)v22, (icu::UnicodeString *)&v32);
          }

          if (v15 == "<empty>" || (v29 = sub_1809AD7A8(v18), v29 < 0) || (__int128 v21 = *(const UChar **)&v15[8 * v29]) == 0LL)
          {
            icu::UnicodeString::setToBogus(a5);
          }

          else
          {
LABEL_19:
            uint64_t v31 = v21;
            icu::UnicodeString::setTo(a5, 1, &v31, -1);
          }

          a5 = (icu::UnicodeString *)((char *)a5 + 64);
          --v16;
        }

        while (v16);
      }
    }
  }

void sub_1809AC1B8(uint64_t a1, int *a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  ures_getAllItemsWithFallback(*(void *)(*(void *)(a1 + 8) + 232LL), "", a1, a2);
  if (*a2 <= 0)
  {
    int v13 = -1;
    for (uint64_t i = uhash_nextElement(*(uint64_t **)(a1 + 16), &v13); i; uint64_t i = uhash_nextElement(*(uint64_t **)(a1 + 16), &v13))
    {
      uint64_t v5 = *(char **)(i + 8);
      if (v5 != "<dummy>")
      {
        uint64_t v6 = *(char **)(i + 16);
        if (sub_1809AD99C(a1, v6))
        {
          __int128 v16 = 0uLL;
          __int128 v17 = 0uLL;
          __int128 v14 = 0uLL;
          __int128 v15 = 0uLL;
          int v7 = strlen(v6);
          icu::UnicodeString::UnicodeString(&v14, v6 + 5, (v7 - 5), 0LL);
          uint64_t v8 = *(void *)(*(void *)(a1 + 8) + 248LL);
          for (uint64_t j = 8LL; j != 64; j += 8LL)
          {
            if (*(_UNKNOWN **)&v5[j] == &unk_180A3DBC8) {
              *(void *)&v5[j] = 0LL;
            }
          }

          sub_1809AB5FC(v8, (const icu::UnicodeString *)(v5 + 8), (UChar **)&v14, a2);
        }

        else
        {
          __int128 v16 = 0uLL;
          __int128 v17 = 0uLL;
          __int128 v14 = 0uLL;
          __int128 v15 = 0uLL;
          sub_1809AD9F0((uint64_t)v6, (uint64_t)&v14);
          uint64_t v11 = *(void *)(*(void *)(a1 + 8) + 240LL);
          for (uint64_t k = 8LL; k != 64; k += 8LL)
          {
            if (*(_UNKNOWN **)&v5[k] == &unk_180A3DBC8) {
              *(void *)&v5[k] = 0LL;
            }
          }

          sub_1809AB83C(v11, (const icu::UnicodeString *)(v5 + 8), (icu::ZoneMeta *)&v14, a2);
        }

        icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v14);
        if (*a2 >= 1) {
          break;
        }
      }
    }
  }

icu::UnicodeString *sub_1809AC374(uint64_t a1, int32_t *this)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  if (*(unsigned __int16 *)(a1 + 8) < 0x20u
    || icu::UnicodeString::doEqualsSubstring(a1, 0, 4, (uint64_t)"E", 0, 4)
    || icu::UnicodeString::doEqualsSubstring(a1, 0, 8, (uint64_t)&aTcSystemvRiyad[3], 0, 8))
  {
    goto LABEL_8;
  }

  if (*(__int16 *)(a1 + 8) < 0)
  {
    int v5 = *(_DWORD *)(a1 + 12);
    int v4 = v5 & (v5 >> 31);
  }

  else
  {
    int v4 = 0;
    int v5 = *(unsigned __int16 *)(a1 + 8) >> 5;
  }

  unsigned int v7 = *(unsigned __int16 *)(a1 + 8);
  int v8 = (__int16)v7;
  unsigned int v9 = v7 >> 5;
  int32_t v10 = v8 >= 0 ? v9 : *(_DWORD *)(a1 + 12);
  int IndexOf = icu::UnicodeString::doLastIndexOf(a1, 0x2Fu, 0, v10);
  if (IndexOf < 1) {
    goto LABEL_8;
  }
  int v12 = IndexOf;
  int v13 = IndexOf + 1;
  unsigned int v14 = *(unsigned __int16 *)(a1 + 8);
  int v15 = (__int16)v14;
  int v16 = v14 >> 5;
  if (v15 < 0) {
    int v16 = *(_DWORD *)(a1 + 12);
  }
  if (v13 >= v16)
  {
LABEL_8:
    icu::UnicodeString::setToBogus((icu::UnicodeString *)this);
    return (icu::UnicodeString *)this;
  }

  icu::UnicodeString::unBogus((uint64_t)this);
  unsigned int v17 = *(unsigned __int16 *)(a1 + 8);
  if (*(__int16 *)(a1 + 8) < 0)
  {
    int v18 = *(_DWORD *)(a1 + 12);
    if (v18 <= v12) {
      goto LABEL_21;
    }
  }

  else if (v12 >= v17 >> 5)
  {
    int v18 = v17 >> 5;
LABEL_21:
    int v13 = v18;
  }

  int v19 = (__int16)v17;
  unsigned int v20 = *((unsigned __int16 *)this + 4);
  int v21 = (__int16)v20;
  unsigned int v22 = v20 >> 5;
  if (v21 >= 0) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = this[3];
  }
  unsigned int v24 = v17 >> 5;
  if (v19 < 0) {
    unsigned int v24 = *(_DWORD *)(a1 + 12);
  }
  icu::UnicodeString::doReplace((icu::UnicodeString *)this, 0LL, v23, (const icu::UnicodeString *)a1, v13, v24 - v13);
  icu::UnicodeString::UnicodeString((uint64_t)v36, 95);
  icu::UnicodeString::UnicodeString((uint64_t)v33, 32);
  unsigned int v25 = *((unsigned __int16 *)this + 4);
  int v26 = (__int16)v25;
  int32_t v27 = v25 >> 5;
  if (v26 >= 0) {
    int32_t v28 = v27;
  }
  else {
    int32_t v28 = this[3];
  }
  if ((v37 & 0x8000u) == 0) {
    uint64_t v29 = v37 >> 5;
  }
  else {
    uint64_t v29 = v38;
  }
  int v30 = v34 >> 5;
  if ((v34 & 0x8000u) != 0) {
    int v30 = v35;
  }
  icu::UnicodeString::findAndReplace( (icu::UnicodeString *)this,  0,  v28,  (const icu::UnicodeString *)v36,  0,  v29,  (const icu::UnicodeString *)v33,  0,  v30);
  icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)v33);
  icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)v36);
  return (icu::UnicodeString *)this;
}

uint64_t sub_1809AC60C(uint64_t a1)
{
  *(void *)a1 = off_18972C2E0;
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2) {
    uprv_free(v2);
  }
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3)
  {
    if (*(int *)(a1 + 24) >= 1)
    {
      uint64_t v4 = 0LL;
      do
        uprv_free(v3[v4++]);
      while ((int)v4 < *(_DWORD *)(a1 + 24));
      uint64_t v3 = *(void ***)(a1 + 16);
    }

    uprv_free(v3);
  }

  return a1;
}

void sub_1809AC68C(uint64_t a1)
{
  int v1 = (void *)sub_1809AC60C(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t *sub_1809AC6A0(uint64_t a1, const char *a2)
{
  uint64_t result = 0LL;
  if (a1 && a2)
  {
    if (!*a2) {
      return 0LL;
    }
    *(void *)length = 0LL;
    uint64_t v4 = ures_getByKey(a1, a2, 0LL, &length[1]);
    uint64_t result = 0LL;
    if (length[1] <= 0)
    {
      uint64_t result = (uint64_t *)uprv_malloc(0x10uLL);
      if (result)
      {
        int v5 = result;
        uint64_t v6 = 0LL;
        char v7 = 0;
        do
        {
          while (1)
          {
            uint64_t v8 = v6;
            length[1] = 0;
            StringByKey = ures_getStringByKey(v4, off_18972C2F0[v6], length, &length[1]);
            if (length[1] > 0 || length[0] == 0) {
              break;
            }
            v5[v8] = (uint64_t)StringByKey;
            uint64_t v6 = 1LL;
            char v7 = 1;
            if (v8) {
              goto LABEL_17;
            }
          }

          v5[v8] = 0LL;
          uint64_t v6 = 1LL;
        }

        while (!v8);
        if ((v7 & 1) == 0)
        {
          int v18 = v5;
          goto LABEL_29;
        }

void *sub_1809AC8E4(void *a1)
{
  *a1 = off_18972C310;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

void sub_1809AC924(void *a1)
{
  *a1 = off_18972C310;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::UMemory::operator delete(a1);
}

uint64_t sub_1809AC964(uint64_t a1, unint64_t a2, _BYTE *a3, int *a4)
{
  v29[8] = *(UChar **)MEMORY[0x1895F89C0];
  if (*a4 > 0) {
    return 0LL;
  }
  if (!*(void *)a3) {
    return 1LL;
  }
  if (a3[14])
  {
    int v7 = *(_DWORD *)(*(void *)a3 + 8LL);
    if (v7 < 1) {
      return 1LL;
    }
  }

  else
  {
    int v7 = 1;
  }

  int v26 = a2;
  unsigned int v8 = 0;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  do
  {
    uint64_t v11 = *(void *)a3;
    if (a3[14]) {
      uint64_t v11 = icu::UVector::elementAt(*(icu::UVector **)a3, v8);
    }
    if (!v11 || (*(_DWORD *)(a1 + 8) & *(_DWORD *)(v11 + 8)) == 0) {
      goto LABEL_33;
    }
    uint64_t v12 = *(const char ***)(v11 + 16);
    if (!v12)
    {
      if (!v9)
      {
        uint64_t v10 = v11;
        uint64_t v9 = v11;
      }

      goto LABEL_33;
    }

    unint64_t v13 = *(unsigned int *)(v11 + 24);
    if ((int)v13 <= 0)
    {
      if (!v10) {
        uint64_t v10 = v11;
      }
      goto LABEL_33;
    }

    uint64_t v14 = *(const char **)(a1 + 24);
    if (!strcmp(v14, *v12))
    {
      BOOL v18 = 1;
      uint64_t v10 = v11;
    }

    else
    {
      uint64_t v28 = v9;
      uint64_t v15 = 1LL;
      while (1)
      {
        unint64_t v16 = v15;
        if (v13 == v15) {
          break;
        }
        int v17 = strcmp(v14, v12[v15]);
        uint64_t v15 = v16 + 1;
        if (!v17)
        {
          uint64_t v10 = v11;
          break;
        }
      }

      BOOL v18 = v16 < v13;
      uint64_t v9 = v28;
    }

    uint64_t v19 = v10 ? v10 : v11;
    if (v18) {
      break;
    }
    uint64_t v10 = v19;
LABEL_33:
    ++v8;
  }

  while (v8 != v7);
  if (v10)
  {
    unint64_t v20 = *(unsigned int *)(v10 + 8);
    uint64_t v21 = *(unsigned __int8 *)(v10 + 12);
    if (*(_BYTE *)(v10 + 12))
    {
      unsigned int v22 = (UErrorCode *)a4;
      if ((_DWORD)v20 == 32 || (_DWORD)v20 == 16)
      {
        uint64_t v21 = 8LL;
        if ((~*(_DWORD *)(a1 + 8) & 0x30) != 0) {
          unint64_t v20 = v20;
        }
        else {
          unint64_t v20 = 8LL;
        }
      }
    }

    else
    {
      unsigned int v22 = (UErrorCode *)a4;
    }

    uint64_t v23 = *(icu::TimeZoneNames::MatchInfoCollection **)(a1 + 16);
    if (v23)
    {
LABEL_45:
      if (*(int *)v22 <= 0)
      {
        icu::UnicodeString::UnicodeString((uint64_t)v29, *(void *)v10, 0xFFFFFFFFLL);
        icu::TimeZoneNames::MatchInfoCollection::addMetaZone(v23, v20, v26, v29, v22);
        icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)v29);
      }
    }

    else
    {
      unsigned int v24 = icu::UMemory::operator new((uint64_t *)v21, (icu::UMemory *)0x10, a2);
      if (v24)
      {
        uint64_t v23 = (icu::TimeZoneNames::MatchInfoCollection *)v24;
        *(void *)(a1 + 16) = icu::TimeZoneNames::MatchInfoCollection::MatchInfoCollection(v24);
        goto LABEL_45;
      }

      *(void *)(a1 + 16) = 0LL;
      *unsigned int v22 = U_MEMORY_ALLOCATION_ERROR;
    }
  }

  return 1LL;
}

uint64_t sub_1809ACBC8(uint64_t a1, uint64_t a2)
{
  v11[8] = *(void **)MEMORY[0x1895F89C0];
  *(void *)a1 = off_18972C338;
  uint64_t v3 = (const char *)(a1 + 34);
  icu::Locale::Locale((icu::Locale *)(a1 + 8), a2);
  int v4 = strlen(v3);
  if (v4)
  {
    if (v4 <= 3)
    {
      strcpy((char *)(a1 + 232), v3);
      return a1;
    }

void sub_1809ACCF4(uint64_t a1)
{
  *(void *)a1 = off_18972C338;
  icu::Locale::~Locale((icu::Locale *)(a1 + 8));
  icu::TimeZoneNames::~TimeZoneNames((icu::TimeZoneNames *)a1);
}

void sub_1809ACD24(uint64_t a1)
{
  *(void *)a1 = off_18972C338;
  icu::Locale::~Locale((icu::Locale *)(a1 + 8));
  icu::TimeZoneNames::~TimeZoneNames((icu::TimeZoneNames *)a1);
  icu::UMemory::operator delete(v2);
}

BOOL sub_1809ACD58(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t *sub_1809ACD64@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0xF0, a2);
  if (result) {
    return (uint64_t *)sub_1809ACBC8((uint64_t)result, a1 + 8);
  }
  return result;
}

uint64_t *sub_1809ACD94(uint64_t a1, icu::ZoneMeta *a2)
{
  return sub_1809AB020(a2);
}

uint64_t *sub_1809ACD9C(uint64_t a1, icu::ZoneMeta *a2, const icu::UnicodeString *a3)
{
  return sub_1809AB0AC(a2, a3);
}

const icu::UnicodeString *sub_1809ACDA8( double a1, uint64_t a2, icu::ZoneMeta *a3, const icu::UnicodeString *a4)
{
  return a4;
}

const icu::UnicodeString *sub_1809ACDD4( uint64_t a1, icu::ZoneMeta *a2, uint64_t a3, const icu::UnicodeString *a4)
{
  return sub_1809AB264(a2, a3, a4);
}

icu::UnicodeString *sub_1809ACDE4(int a1, uint64_t a2, int a3, icu::UnicodeString *this)
{
  if (*(unsigned __int16 *)(a2 + 8) >= 0x20u)
  {
    int v13 = 0;
    BOOL v7 = sub_1809ACE98(a2, &v13);
    if (v13 <= 0 && v7 != 0LL)
    {
      uint64_t v9 = (const UChar **)v7[1];
      if (v9)
      {
        if (a3 != 16)
        {
          if (a3 != 32) {
            return this;
          }
          ++v9;
        }

        int v10 = *v9;
        if (v10)
        {
          uint64_t v12 = v10;
          icu::UnicodeString::setTo(this, 1, &v12, -1);
        }
      }
    }
  }

  return this;
}

uint64_t *sub_1809ACE98(uint64_t a1, int *a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if (*a2 <= 0)
  {
    unsigned int v6 = atomic_load(&dword_18C535D00);
    if (v6 == 2 || !icu::umtx_initImplPreInit(&dword_18C535D00))
    {
      if (dword_18C535D04 >= 1)
      {
        uint64_t v2 = 0LL;
        *a2 = dword_18C535D04;
        return v2;
      }
    }

    else
    {
      BOOL v7 = uhash_open((uint64_t)uhash_hashUChars, (uint64_t)uhash_compareUChars, 0LL, a2);
      qword_18C535CF0 = (uint64_t)v7;
      int v8 = *a2;
      if (*a2 < 1)
      {
        uhash_setValueDeleter((uint64_t)v7, (uint64_t)sub_1809ADB10);
        sub_1809B36C0(0xFu, (uint64_t)sub_1809ADAAC);
        int v8 = *a2;
      }

      else
      {
        qword_18C535CF0 = 0LL;
      }

      dword_18C535D04 = v8;
      icu::umtx_initImplPostInit(&dword_18C535D00);
    }

    if (*a2 <= 0)
    {
      __int16 v22 = 0;
      memset(v21, 0, sizeof(v21));
      BOOL v18 = (UChar *)v21;
      icu::UnicodeString::extract(a1, &v18, 129, a2);
      unsigned int v9 = *(unsigned __int16 *)(a1 + 8);
      int v10 = (__int16)v9;
      unsigned int v11 = v9 >> 5;
      if (v10 < 0) {
        unsigned int v11 = *(_DWORD *)(a1 + 12);
      }
      *((_WORD *)v21 + (int)v11) = 0;
      umtx_lock((icu::UMutex *)&unk_18C535CA0);
      uint64_t v12 = (char *)uhash_get(qword_18C535CF0, (uint64_t)v21);
      if (v12)
      {
        if (v12 == "<empty>") {
          uint64_t v2 = 0LL;
        }
        else {
          uint64_t v2 = (uint64_t *)v12;
        }
        goto LABEL_31;
      }

      uint64_t v13 = ures_openDirect((uint64_t)"icudt74l-zone", (uint64_t)"tzdbNames", (uint64_t)a2);
      uint64_t v14 = ures_getByKey(v13, "zoneStrings", v13, a2);
      if (*a2 <= 0)
      {
        char v20 = 0;
        memset(v19, 0, sizeof(v19));
        sub_1809AD4F4((unsigned __int16 *)a1, v19);
        uint64_t v2 = sub_1809AC6A0(v14, (const char *)v19);
        uint64_t MetaZoneID = icu::ZoneMeta::findMetaZoneID((UChar **)a1, v15);
        if (MetaZoneID)
        {
          if (v2) {
            int v17 = (const char *)v2;
          }
          else {
            int v17 = "<empty>";
          }
          uhash_put(qword_18C535CF0, MetaZoneID, (uint64_t)v17, a2);
          if (!v2 || *a2 <= 0) {
            goto LABEL_30;
          }
        }

        else if (!v2)
        {
LABEL_30:
          ures_close(v14);
LABEL_31:
          umtx_unlock((std::mutex **)&unk_18C535CA0);
          return v2;
        }

        (*(void (**)(uint64_t *))(*v2 + 8))(v2);
      }

      uint64_t v2 = 0LL;
      goto LABEL_30;
    }
  }

  return 0LL;
}

icu::UnicodeString *sub_1809AD144(int a1, int a2, int a3, icu::UnicodeString *this)
{
  return this;
}

uint64_t sub_1809AD16C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, icu::ZoneMeta *a5)
{
  unsigned int v11 = atomic_load(&dword_18C535CF8);
  if (v11 != 2 && icu::umtx_initImplPreInit(&dword_18C535CF8))
  {
    uint64_t v13 = (uint64_t *)*(unsigned int *)a5;
    uint64_t v14 = icu::UMemory::operator new(v13, (icu::UMemory *)0x38, v12);
    if (!v14)
    {
      qword_18C535C98 = 0LL;
      *(_DWORD *)a5 = 7;
      goto LABEL_50;
    }

    *uint64_t v14 = (uint64_t)off_18972C170;
    *((_BYTE *)v14 + 8) = 1;
    v14[3] = 0LL;
    v14[4] = 0LL;
    v14[2] = 0LL;
    *((_BYTE *)v14 + 40) = 1;
    v14[6] = (uint64_t)sub_1809ADAA0;
    qword_18C535C98 = (uint64_t)v14;
    uint64_t v15 = sub_1809AB020(a5);
    unint64_t v16 = v15;
    if (*(int *)a5 > 0)
    {
      if (!v15) {
        goto LABEL_46;
      }
      goto LABEL_45;
    }

    uint64_t v17 = (*(uint64_t (**)(uint64_t *, icu::ZoneMeta *))(*v15 + 56))(v15, a5);
    if (v17) {
      BOOL v18 = *(_DWORD *)a5 <= 0;
    }
    else {
      BOOL v18 = 0;
    }
    if (!v18)
    {
LABEL_45:
      (*(void (**)(uint64_t *))(*v16 + 8))(v16);
      if (*(int *)a5 >= 1)
      {
LABEL_46:
        if (qword_18C535C98) {
          (*(void (**)(uint64_t))(*(void *)qword_18C535C98 + 8LL))(qword_18C535C98);
        }
        qword_18C535C98 = 0LL;
        goto LABEL_50;
      }

      sub_1809B36C0(0xFu, (uint64_t)sub_1809ADAAC);
LABEL_50:
      dword_18C535CFC = *(_DWORD *)a5;
      icu::umtx_initImplPostInit(&dword_18C535CF8);
      goto LABEL_51;
    }

    uint64_t v19 = (UChar **)v17;
    while (1)
    {
      char v20 = sub_1809ACE98((uint64_t)v19, (int *)a5);
      if (v20)
      {
        uint64_t v22 = v20[1];
        if (v22)
        {
          unsigned int v24 = *(UChar **)v22;
          uint64_t v23 = *(UChar **)(v22 + 8);
        }

        else
        {
          unsigned int v24 = 0LL;
          uint64_t v23 = 0LL;
        }
      }

unsigned __int16 *sub_1809AD4F4(unsigned __int16 *result, _BYTE *a2)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  unsigned int v3 = result[4];
  if (v3 <= 0x1F)
  {
    *a2 = 0;
  }

  else
  {
    char v9 = 0;
    memset(v8, 0, sizeof(v8));
    int v4 = (__int16)v3;
    unsigned int v5 = v3 >> 5;
    if (v4 >= 0) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = *((unsigned int *)result + 3);
    }
    int v7 = icu::UnicodeString::extract((uint64_t)result, 0, v6, (char *)v8, 129);
    *(_DWORD *)a2 = 1635018093;
    a2[4] = 58;
    uint64_t result = (unsigned __int16 *)memcpy(a2 + 5, v8, v7);
    a2[v7 + 5] = 0;
  }

  return result;
}

void *sub_1809AD5C8(uint64_t a1, char *a2, icu::ResourceValue *a3, uint64_t a4, int *a5)
{
  uint64_t v15 = 0LL;
  unint64_t v16 = a2;
  memset(v14, 0, sizeof(v14));
  uint64_t result = (*(void *(**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(void *)a3 + 88LL))( v14,  a3,  a5);
  if (*a5 <= 0)
  {
    uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v14, 0, (const char **)&v16, a3);
    if ((_DWORD)result)
    {
      unsigned int v9 = 1;
      do
      {
        if ((*(unsigned int (**)(icu::ResourceValue *))(*(void *)a3 + 96LL))(a3))
        {
          int v10 = sub_1809ADBB4((unsigned __int8 *)v16);
          if (v10 != -1)
          {
            uint64_t v11 = a1 + 8LL * v10;
            uint64_t v13 = *(void *)(v11 + 8);
            unint64_t v12 = (void *)(v11 + 8);
            if (!v13) {
              *unint64_t v12 = &unk_180A3DBC8;
            }
          }
        }

        else
        {
          sub_1809ADB34(a1, (unsigned __int8 *)v16, (uint64_t)a3, (uint64_t)a5);
        }

        uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v14, v9++, (const char **)&v16, a3);
      }

      while ((_DWORD)result);
    }
  }

  return result;
}

void *sub_1809AD6C0(void *a1, char *a2, icu::ResourceValue *a3, uint64_t a4, int *a5)
{
  uint64_t v12 = 0LL;
  uint64_t v13 = a2;
  memset(v11, 0, sizeof(v11));
  uint64_t result = (*(void *(**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(void *)a3 + 88LL))( v11,  a3,  a5);
  if (*a5 <= 0)
  {
    uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v11, 0, (const char **)&v13, a3);
    if ((_DWORD)result)
    {
      unsigned int v10 = 1;
      do
      {
        uint64_t result = (void *)(*(uint64_t (**)(icu::ResourceValue *))(*(void *)a3 + 24LL))(a3);
        if ((_DWORD)result == 2) {
          uint64_t result = sub_1809ADC48(a1, v13, (uint64_t)a3, a4, a5);
        }
        if (*a5 >= 1) {
          break;
        }
        uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v11, v10++, (const char **)&v13, a3);
      }

      while ((_DWORD)result);
    }
  }

  return result;
}

uint64_t sub_1809AD7A8(uint64_t result)
{
  if ((int)result > 15)
  {
    switch((_DWORD)result)
    {
      case 0x10:
        return 5LL;
      case 0x20:
        return 6LL;
      case 0x40:
        return 0LL;
      default:
        return 0xFFFFFFFFLL;
    }
  }

  else
  {
    switch((int)result)
    {
      case 1:
      case 2:
        return result;
      case 4:
        uint64_t result = 3LL;
        break;
      case 8:
        uint64_t result = 4LL;
        break;
      default:
        return 0xFFFFFFFFLL;
    }
  }

  return result;
}

_BYTE *sub_1809AD820(_BYTE *result, uint64_t a2, uint64_t a3, uint64_t a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    unsigned int v5 = result;
    if (!result[56])
    {
      uint64_t v10 = 0LL;
      result[56] = 1;
      while (1)
      {
        uint64_t v11 = *(void **)&v5[8 * v10];
        if (v11)
        {
          uint64_t result = uprv_malloc(0x18uLL);
          if (!result)
          {
            *a5 = U_MEMORY_ALLOCATION_ERROR;
            return result;
          }

          *((void *)result + 1) = a3;
          *((void *)result + 2) = a2;
          else {
            uint64_t v12 = (uint64_t *)*(unsigned int *)&asc_180A3DBD8[4 * v10];
          }
          *(_DWORD *)uint64_t result = (_DWORD)v12;
          uint64_t result = icu::TextTrieMap::put(v11, a5, a4, result, v12);
        }

        else if (v10 > 5)
        {
          return result;
        }

        ++v10;
      }
    }
  }

  return result;
}

void *sub_1809AD900(void *a1, uint64_t a2, int *a3)
{
  *a1 = off_18972C2B0;
  a1[1] = a2;
  unsigned int v5 = uhash_open((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, 0LL, a3);
  a1[2] = v5;
  if (*a3 <= 0)
  {
    uhash_setKeyDeleter((uint64_t)v5, (uint64_t)uprv_free);
    uhash_setValueDeleter(a1[2], (uint64_t)sub_1809AD978);
  }

  return a1;
}

char *sub_1809AD978(char *result)
{
  if (result != "<dummy>" && result != 0LL) {
    return (char *)(*(uint64_t (**)(char *))(*(void *)result + 8LL))(result);
  }
  return result;
}

BOOL sub_1809AD99C(int a1, char *__s)
{
  if (strlen(__s) < 5) {
    return 0LL;
  }
  return *(_DWORD *)__s == 1635018093 && __s[4] == 58;
}

icu::UnicodeString *sub_1809AD9F0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t result = (icu::UnicodeString *)icu::UnicodeString::UnicodeString(a2, a1, 0xFFFFFFFFLL, 0LL);
  for (unint64_t i = 0LL; ; ++i)
  {
    int v5 = *(__int16 *)(a2 + 8);
    if (v5 < 0) {
      break;
    }
    unint64_t v6 = (unint64_t)*(unsigned __int16 *)(a2 + 8) >> 5;
LABEL_7:
    if (v6 > i)
    {
      if ((v5 & 2) != 0) {
        uint64_t v7 = a2 + 10;
      }
      else {
        uint64_t v7 = *(void *)(a2 + 24);
      }
      if (*(_WORD *)(v7 + 2 * i) == 58) {
        uint64_t result = icu::UnicodeString::setCharAt((icu::UnicodeString *)a2, i, 47);
      }
    }
  }

  if ((uint64_t)i < *(int *)(a2 + 12))
  {
    unint64_t v6 = *(unsigned int *)(a2 + 12);
    goto LABEL_7;
  }

  return result;
}

void sub_1809ADAA0(void *a1)
{
  if (a1) {
    uprv_free(a1);
  }
}

uint64_t sub_1809ADAAC()
{
  if (qword_18C535CF0)
  {
    uhash_close((_BYTE *)qword_18C535CF0);
    qword_18C535CF0 = 0LL;
  }

  atomic_store(0, &dword_18C535D00);
  if (qword_18C535C98)
  {
    (*(void (**)(uint64_t))(*(void *)qword_18C535C98 + 8LL))(qword_18C535C98);
    qword_18C535C98 = 0LL;
  }

  atomic_store(0, &dword_18C535CF8);
  return 1LL;
}

char *sub_1809ADB10(char *result)
{
  if (result != "<empty>" && result != 0LL) {
    return (char *)(*(uint64_t (**)(char *))(*(void *)result + 8LL))(result);
  }
  return result;
}

void *sub_1809ADB34(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (void *)sub_1809ADBB4(a2);
  if ((_DWORD)result != -1)
  {
    uint64_t v8 = a1 + 8LL * (int)result;
    uint64_t v10 = *(void *)(v8 + 8);
    unsigned int v9 = (void *)(v8 + 8);
    if (!v10)
    {
      int v11 = 0;
      if (a3) {
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)a3 + 32LL))(a3, &v11, a4);
      }
      else {
        uint64_t result = &unk_180A3DBC8;
      }
      *unsigned int v9 = result;
    }
  }

  return result;
}

uint64_t sub_1809ADBB4(unsigned __int8 *a1)
{
  int v1 = *a1;
  if (!*a1) {
    return 0xFFFFFFFFLL;
  }
  int v2 = a1[1];
  if (!a1[1] || a1[2]) {
    return 0xFFFFFFFFLL;
  }
  if (v1 == 115)
  {
    if (v2 == 100) {
      int v10 = 6;
    }
    else {
      int v10 = -1;
    }
    if (v2 == 115) {
      unsigned int v11 = 5;
    }
    else {
      unsigned int v11 = v10;
    }
    if (v2 == 103) {
      return 4LL;
    }
    else {
      return v11;
    }
  }

  else
  {
    int v5 = v1 != 101 || v2 != 99;
    unsigned int v6 = v5 << 31 >> 31;
    if (v2 == 100) {
      int v7 = 3;
    }
    else {
      int v7 = -1;
    }
    if (v2 == 115) {
      int v8 = 2;
    }
    else {
      int v8 = v7;
    }
    if (v2 == 103) {
      unsigned int v9 = 1;
    }
    else {
      unsigned int v9 = v8;
    }
    if (v1 == 108) {
      return v9;
    }
    else {
      return v6;
    }
  }

void *sub_1809ADC48(void *result, char *a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (*a5 <= 0)
  {
    unsigned int v9 = result;
    uint64_t result = (void *)uhash_get(result[2], (uint64_t)a2);
    int v10 = (char *)result;
    if (result)
    {
LABEL_3:
      if (v10 != "<dummy>") {
        return (void *)(*(uint64_t (**)(char *, char *, uint64_t, uint64_t, int *))(*(void *)v10 + 24LL))( v10,  a2,  a3,  a4,  a5);
      }
      return result;
    }

    memset(v17, 0, sizeof(v17));
    if (sub_1809AD99C((int)v9, a2))
    {
      int v11 = strlen(a2);
      icu::UnicodeString::UnicodeString(v17, a2 + 5, (v11 - 5), 0LL);
      uint64_t v12 = *(void *)(v9[1] + 248LL);
    }

    else
    {
      sub_1809AD9F0((uint64_t)a2, (uint64_t)v17);
      uint64_t v12 = *(void *)(v9[1] + 240LL);
    }

    uint64_t TerminatedBuffer = icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)v17);
    if (uhash_get(v12, TerminatedBuffer))
    {
      int v10 = "<dummy>";
    }

    else
    {
      unint64_t v16 = icu::UMemory::operator new(v15, (icu::UMemory *)0x40, v14);
      if (!v16)
      {
        *a5 = 7;
        return icu::UnicodeString::~UnicodeString((void *)7, (icu::UnicodeString *)v17);
      }

      int v10 = (char *)v16;
      uint64_t v15 = (uint64_t *)&off_18972C3F8;
      *unint64_t v16 = (uint64_t)&off_18972C3F8;
      *(_OWORD *)(v16 + 1) = 0u;
      *(_OWORD *)(v16 + 3) = 0u;
      *(_OWORD *)(v16 + 5) = 0u;
      v16[7] = 0LL;
    }

    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v17);
    uint64_t result = sub_1809ADE40((int)v9, a2, a5);
    if (*a5 < 1)
    {
      uint64_t result = (void *)uhash_put(v9[2], (uint64_t)result, (uint64_t)v10, a5);
      if (*a5 > 0) {
        return result;
      }
      goto LABEL_3;
    }

    if (v10 != "<dummy>") {
      return (void *)(*(uint64_t (**)(char *))(*(void *)v10 + 8LL))(v10);
    }
  }

  return result;
}

_BYTE *sub_1809ADE40(int a1, char *__s, _DWORD *a3)
{
  size_t v5 = strlen(__s);
  int v6 = v5;
  size_t v7 = (uint64_t)((v5 << 32) + 0x100000000LL) >> 32;
  int v8 = uprv_malloc(v7);
  unsigned int v9 = v8;
  if (v8)
  {
    memcpy(v8, __s, v7);
    v9[v6] = 0;
  }

  else
  {
    *a3 = 7;
  }

  return v9;
}

icu::TimeZoneRule *icu::TimeZoneRule::TimeZoneRule(icu::TimeZoneRule *this, UChar **a2, int a3, int a4)
{
  *(void *)this = off_18972C4E8;
  icu::UnicodeString::UnicodeString((icu::TimeZoneRule *)((char *)this + 8), a2);
  *((_DWORD *)this + 18) = a3;
  *((_DWORD *)this + 19) = a4;
  return this;
}

icu::TimeZoneRule *icu::TimeZoneRule::TimeZoneRule(icu::TimeZoneRule *this, UChar **a2)
{
  *(void *)this = off_18972C4E8;
  icu::UnicodeString::UnicodeString((icu::TimeZoneRule *)((char *)this + 8), a2 + 1);
  *((void *)this + 9) = a2[9];
  return this;
}

void icu::TimeZoneRule::~TimeZoneRule(icu::TimeZoneRule *this)
{
  *(void *)this = off_18972C4E8;
  icu::UnicodeString::~UnicodeString((icu::TimeZoneRule *)((char *)this + 8));
  icu::UObject::~UObject(this);
}

uint64_t icu::TimeZoneRule::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    icu::UnicodeString::operator=((UChar **)(a1 + 8), (UChar **)(a2 + 8));
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
  }

  return a1;
}

uint64_t icu::TimeZoneRule::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_1807F874C(*(void *)(*(void *)a1 - 8LL), *(void *)(*(void *)a2 - 8LL));
  if ((_DWORD)result)
  {
    unsigned int v5 = *(unsigned __int16 *)(a1 + 16);
    if ((v5 & 1) != 0)
    {
      if ((*(_WORD *)(a2 + 16) & 1) == 0) {
        return 0LL;
      }
LABEL_17:
      if (*(_DWORD *)(a1 + 72) == *(_DWORD *)(a2 + 72)) {
        return *(_DWORD *)(a1 + 76) == *(_DWORD *)(a2 + 76);
      }
      return 0LL;
    }

    if ((v5 & 0x8000) != 0) {
      int v6 = *(_DWORD *)(a1 + 20);
    }
    else {
      int v6 = v5 >> 5;
    }
    uint64_t result = 0LL;
    unsigned int v7 = *(unsigned __int16 *)(a2 + 16);
    if ((v7 & 0x8000u) == 0) {
      unsigned int v8 = v7 >> 5;
    }
    else {
      unsigned int v8 = *(_DWORD *)(a2 + 20);
    }
    if ((v7 & 1) == 0 && v6 == v8)
    {
      uint64_t result = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 8), (const icu::UnicodeString *)(a2 + 8), v6);
      if ((_DWORD)result) {
        goto LABEL_17;
      }
    }
  }

  return result;
}

uint64_t icu::TimeZoneRule::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 32LL))(a1) ^ 1;
}

UChar **icu::TimeZoneRule::getName(UChar **this, UChar **a2)
{
  icu::UnicodeString::operator=(a2, this + 1);
  return a2;
}

uint64_t icu::TimeZoneRule::getRawOffset(icu::TimeZoneRule *this)
{
  return *((unsigned int *)this + 18);
}

uint64_t icu::TimeZoneRule::getDSTSavings(icu::TimeZoneRule *this)
{
  return *((unsigned int *)this + 19);
}

BOOL icu::TimeZoneRule::isEquivalentTo(icu::TimeZoneRule *this, const icu::TimeZoneRule *a2)
{
  if (this == a2) {
    return 1LL;
  }
  if (!this) {
    __cxa_bad_typeid();
  }
  BOOL result = sub_1807F874C(*(void *)(*(void *)this - 8LL), *(void *)(*(void *)a2 - 8LL));
  if (result) {
    return *((_DWORD *)this + 18) == *((_DWORD *)a2 + 18) && *((_DWORD *)this + 19) == *((_DWORD *)a2 + 19);
  }
  return result;
}

void *icu::InitialTimeZoneRule::getStaticClassID(icu::InitialTimeZoneRule *this)
{
  return &unk_18C535D08;
}

void *icu::InitialTimeZoneRule::getDynamicClassID(icu::InitialTimeZoneRule *this)
{
  return &unk_18C535D08;
}

icu::InitialTimeZoneRule *icu::InitialTimeZoneRule::InitialTimeZoneRule( icu::InitialTimeZoneRule *this, UChar **a2, int a3, int a4)
{
  *(void *)this = off_18972C4E8;
  icu::UnicodeString::UnicodeString((icu::InitialTimeZoneRule *)((char *)this + 8), a2);
  *((_DWORD *)this + 18) = a3;
  *((_DWORD *)this + 19) = a4;
  *(void *)this = off_18972C550;
  return this;
}

{
  *(void *)this = off_18972C4E8;
  icu::UnicodeString::UnicodeString((icu::InitialTimeZoneRule *)((char *)this + 8), a2);
  *((_DWORD *)this + 18) = a3;
  *((_DWORD *)this + 19) = a4;
  *(void *)this = off_18972C550;
  return this;
}

icu::InitialTimeZoneRule *icu::InitialTimeZoneRule::InitialTimeZoneRule( icu::InitialTimeZoneRule *this, UChar **a2)
{
  *(void *)this = off_18972C4E8;
  icu::UnicodeString::UnicodeString((icu::InitialTimeZoneRule *)((char *)this + 8), a2 + 1);
  *((void *)this + 9) = a2[9];
  *(void *)this = off_18972C550;
  return this;
}

{
  *(void *)this = off_18972C4E8;
  icu::UnicodeString::UnicodeString((icu::InitialTimeZoneRule *)((char *)this + 8), a2 + 1);
  *((void *)this + 9) = a2[9];
  *(void *)this = off_18972C550;
  return this;
}

void icu::InitialTimeZoneRule::~InitialTimeZoneRule(icu::InitialTimeZoneRule *this)
{
  *(void *)this = off_18972C4E8;
  icu::UnicodeString::~UnicodeString((icu::InitialTimeZoneRule *)((char *)this + 8));
  icu::UObject::~UObject(this);
}

{
  *(void *)this = off_18972C4E8;
  icu::UnicodeString::~UnicodeString((icu::InitialTimeZoneRule *)((char *)this + 8));
  icu::UObject::~UObject(this);
}

{
  void *v2;
  *(void *)this = off_18972C4E8;
  icu::UnicodeString::~UnicodeString(off_18972C4E8, (icu::InitialTimeZoneRule *)((char *)this + 8));
  icu::UObject::~UObject(this);
  icu::UMemory::operator delete(v2);
}

uint64_t *icu::InitialTimeZoneRule::clone@<X0>(UChar **this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x50, a2);
  unsigned int v5 = v4;
  if (v4)
  {
    *int v4 = (uint64_t)off_18972C4E8;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v4 + 1), this + 1);
    v5[9] = (uint64_t)this[9];
    *unsigned int v5 = (uint64_t)off_18972C550;
  }

  return v5;
}

uint64_t icu::InitialTimeZoneRule::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    icu::UnicodeString::operator=((UChar **)(a1 + 8), (UChar **)(a2 + 8));
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
  }

  return a1;
}

uint64_t icu::InitialTimeZoneRule::operator==(void *a1, void *a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_1807F874C(*(void *)(*a1 - 8LL), *(void *)(*a2 - 8LL));
  if ((_DWORD)result) {
    return icu::TimeZoneRule::operator==((uint64_t)a1, (uint64_t)a2);
  }
  return result;
}

uint64_t icu::InitialTimeZoneRule::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 32LL))(a1) ^ 1;
}

BOOL icu::InitialTimeZoneRule::isEquivalentTo(icu::InitialTimeZoneRule *this, const icu::TimeZoneRule *a2)
{
  if (this == a2) {
    return 1LL;
  }
  if (!this) {
    __cxa_bad_typeid();
  }
  BOOL result = sub_1807F874C(*(void *)(*(void *)this - 8LL), *(void *)(*(void *)a2 - 8LL));
  if ((_DWORD)result) {
    return icu::TimeZoneRule::isEquivalentTo(this, a2);
  }
  return result;
}

uint64_t icu::InitialTimeZoneRule::getFirstStart(icu::InitialTimeZoneRule *this, int a2, int a3, double *a4)
{
  return 0LL;
}

uint64_t icu::InitialTimeZoneRule::getFinalStart(icu::InitialTimeZoneRule *this, int a2, int a3, double *a4)
{
  return 0LL;
}

uint64_t icu::InitialTimeZoneRule::getNextStart( icu::InitialTimeZoneRule *this, double a2, int a3, int a4, signed __int8 a5, double *a6)
{
  return 0LL;
}

uint64_t icu::InitialTimeZoneRule::getPreviousStart( icu::InitialTimeZoneRule *this, double a2, int a3, int a4, signed __int8 a5, double *a6)
{
  return 0LL;
}

void *icu::AnnualTimeZoneRule::getStaticClassID(icu::AnnualTimeZoneRule *this)
{
  return &unk_18C535D09;
}

void *icu::AnnualTimeZoneRule::getDynamicClassID(icu::AnnualTimeZoneRule *this)
{
  return &unk_18C535D09;
}

icu::AnnualTimeZoneRule *icu::AnnualTimeZoneRule::AnnualTimeZoneRule( icu::AnnualTimeZoneRule *this, UChar **a2, int a3, int a4, const icu::DateTimeRule *a5, int a6, int a7)
{
  *(void *)this = off_18972C4E8;
  icu::UnicodeString::UnicodeString((icu::AnnualTimeZoneRule *)((char *)this + 8), a2);
  *((_DWORD *)this + 18) = a3;
  *((_DWORD *)this + 19) = a4;
  *(void *)this = off_18972C5B8;
  unint64_t v14 = (icu::DateTimeRule *)icu::UMemory::operator new((uint64_t *)off_18972C5B8, (icu::UMemory *)0x28, v13);
  if (v14) {
    icu::DateTimeRule::DateTimeRule(v14, a5);
  }
  *((void *)this + 10) = v14;
  *((_DWORD *)this + 22) = a6;
  *((_DWORD *)this + 23) = a7;
  return this;
}

icu::AnnualTimeZoneRule *icu::AnnualTimeZoneRule::AnnualTimeZoneRule( icu::AnnualTimeZoneRule *this, UChar **a2, int a3, int a4, icu::DateTimeRule *a5, int a6, int a7)
{
  *(void *)this = off_18972C4E8;
  icu::UnicodeString::UnicodeString((icu::AnnualTimeZoneRule *)((char *)this + 8), a2);
  *((_DWORD *)this + 18) = a3;
  *((_DWORD *)this + 19) = a4;
  *(void *)this = off_18972C5B8;
  *((void *)this + 10) = a5;
  *((_DWORD *)this + 22) = a6;
  *((_DWORD *)this + 23) = a7;
  return this;
}

{
  *(void *)this = off_18972C4E8;
  icu::UnicodeString::UnicodeString((icu::AnnualTimeZoneRule *)((char *)this + 8), a2);
  *((_DWORD *)this + 18) = a3;
  *((_DWORD *)this + 19) = a4;
  *(void *)this = off_18972C5B8;
  *((void *)this + 10) = a5;
  *((_DWORD *)this + 22) = a6;
  *((_DWORD *)this + 23) = a7;
  return this;
}

icu::AnnualTimeZoneRule *icu::AnnualTimeZoneRule::AnnualTimeZoneRule( icu::AnnualTimeZoneRule *this, const icu::AnnualTimeZoneRule *a2)
{
  *(void *)this = off_18972C4E8;
  icu::UnicodeString::UnicodeString((icu::AnnualTimeZoneRule *)((char *)this + 8), (UChar **)a2 + 1);
  *((void *)this + 9) = *((void *)a2 + 9);
  *(void *)this = off_18972C5B8;
  unsigned int v5 = (icu::DateTimeRule *)icu::UMemory::operator new((uint64_t *)off_18972C5B8, (icu::UMemory *)0x28, v4);
  if (v5) {
    icu::DateTimeRule::DateTimeRule(v5, *((const icu::DateTimeRule **)a2 + 10));
  }
  *((void *)this + 10) = v5;
  *((void *)this + 11) = *((void *)a2 + 11);
  return this;
}

void icu::AnnualTimeZoneRule::~AnnualTimeZoneRule(icu::AnnualTimeZoneRule *this)
{
  *(void *)this = off_18972C5B8;
  uint64_t v2 = *((void *)this + 10);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *(void *)this = off_18972C4E8;
  icu::UnicodeString::~UnicodeString((icu::AnnualTimeZoneRule *)((char *)this + 8));
  icu::UObject::~UObject(this);
}

{
  void *v1;
  icu::AnnualTimeZoneRule::~AnnualTimeZoneRule(this);
  icu::UMemory::operator delete(v1);
}

icu::AnnualTimeZoneRule *icu::AnnualTimeZoneRule::clone@<X0>( icu::AnnualTimeZoneRule *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  BOOL result = (icu::AnnualTimeZoneRule *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  if (result) {
    return icu::AnnualTimeZoneRule::AnnualTimeZoneRule(result, this);
  }
  return result;
}

uint64_t icu::AnnualTimeZoneRule::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    icu::UnicodeString::operator=((UChar **)(a1 + 8), (UChar **)(a2 + 8));
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    uint64_t v5 = *(void *)(a1 + 80);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
    icu::DateTimeRule::clone(*(icu::DateTimeRule **)(a2 + 80), v4);
    *(void *)(a1 + 80) = v6;
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
  }

  return a1;
}

BOOL icu::AnnualTimeZoneRule::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  if (!a1) {
    __cxa_bad_typeid();
  }
  BOOL result = sub_1807F874C(*(void *)(*(void *)a1 - 8LL), *(void *)(*(void *)a2 - 8LL));
  if (result)
  {
    BOOL result = icu::DateTimeRule::operator==(*(void *)(a1 + 80), *(void *)(a2 + 80));
    if (result) {
      return *(_DWORD *)(a1 + 88) == *(_DWORD *)(a2 + 88) && *(_DWORD *)(a1 + 92) == *(_DWORD *)(a2 + 92);
    }
  }

  return result;
}

uint64_t icu::AnnualTimeZoneRule::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 32LL))(a1) ^ 1;
}

uint64_t icu::AnnualTimeZoneRule::getRule(icu::AnnualTimeZoneRule *this)
{
  return *((void *)this + 10);
}

uint64_t icu::AnnualTimeZoneRule::getStartYear(icu::AnnualTimeZoneRule *this)
{
  return *((unsigned int *)this + 22);
}

uint64_t icu::AnnualTimeZoneRule::getEndYear(icu::AnnualTimeZoneRule *this)
{
  return *((unsigned int *)this + 23);
}

uint64_t icu::AnnualTimeZoneRule::getStartInYear( icu::AnnualTimeZoneRule *this, int a2, int a3, int a4, double *a5)
{
  if (*((_DWORD *)this + 22) > a2 || *((_DWORD *)this + 23) < a2) {
    return 0LL;
  }
  int DateRuleType = icu::DateTimeRule::getDateRuleType(*((icu::DateTimeRule **)this + 10));
  if (DateRuleType == 1)
  {
    int RuleWeekInMonth = icu::DateTimeRule::getRuleWeekInMonth(*((icu::DateTimeRule **)this + 10));
    int RuleMonth = icu::DateTimeRule::getRuleMonth(*((icu::DateTimeRule **)this + 10));
    if (RuleWeekInMonth < 1)
    {
      int v27 = icu::DateTimeRule::getRuleMonth(*((icu::DateTimeRule **)this + 10));
      HIDWORD(v29) = -1030792151 * a2 + 85899344;
      LODWORD(v29) = HIDWORD(v29);
      unsigned int v28 = v29 >> 2;
      LODWORD(v29) = HIDWORD(v29);
      else {
        int v30 = 12;
      }
      if (v28 <= 0x28F5C28) {
        int v31 = v30;
      }
      else {
        int v31 = 12;
      }
      if ((a2 & 3) != 0) {
        int v31 = 0;
      }
      double v19 = sub_1808FA338(a2, RuleMonth, byte_180A38CF0[v31 + v27]);
      int v18 = 0;
      int v20 = 7 * RuleWeekInMonth + 7;
    }

    else
    {
      int v18 = 1;
      double v19 = sub_1808FA338(a2, RuleMonth, 1);
      int v20 = 7 * RuleWeekInMonth - 7;
    }

    double v32 = v19 + (double)v20;
    goto LABEL_34;
  }

  int v12 = DateRuleType;
  if (DateRuleType)
  {
    int v21 = icu::DateTimeRule::getRuleMonth(*((icu::DateTimeRule **)this + 10));
    int RuleDayOfMonth = icu::DateTimeRule::getRuleDayOfMonth(*((icu::DateTimeRule **)this + 10));
    int v23 = RuleDayOfMonth;
    if (v12 == 3)
    {
      if (v21 == 1)
      {
        HIDWORD(v25) = -1030792151 * a2 + 85899344;
        LODWORD(v25) = HIDWORD(v25);
        unsigned int v24 = v25 >> 2;
        LODWORD(v25) = HIDWORD(v25);
        else {
          int v26 = 29;
        }
        if (v24 > 0x28F5C28) {
          int v26 = 29;
        }
        if ((a2 & 3) != 0) {
          int v26 = 28;
        }
        int v18 = 0;
        if (RuleDayOfMonth == 29) {
          int v23 = v26;
        }
        else {
          int v23 = RuleDayOfMonth;
        }
      }

      else
      {
        int v18 = 0;
      }
    }

    else
    {
      int v18 = 1;
    }

    double v32 = sub_1808FA338(a2, v21, v23);
LABEL_34:
    int v33 = sub_1808FA6F0(v32);
    RuleDayOfWeeuint64_t k = icu::DateTimeRule::getRuleDayOfWeek(*((icu::DateTimeRule **)this + 10));
    BOOL v35 = RuleDayOfWeek > v33;
    if (v18) {
      int v36 = 7;
    }
    else {
      int v36 = -7;
    }
    if (v18) {
      BOOL v35 = RuleDayOfWeek < v33;
    }
    if (v35) {
      int v37 = v36;
    }
    else {
      int v37 = 0;
    }
    double v15 = v32 + (double)(RuleDayOfWeek - v33 + v37);
    goto LABEL_43;
  }

  int v13 = icu::DateTimeRule::getRuleMonth(*((icu::DateTimeRule **)this + 10));
  int v14 = icu::DateTimeRule::getRuleDayOfMonth(*((icu::DateTimeRule **)this + 10));
  double v15 = sub_1808FA338(a2, v13, v14);
LABEL_43:
  *a5 = (double)(int)icu::DateTimeRule::getRuleMillisInDay(*((icu::DateTimeRule **)this + 10)) + v15 * 86400000.0;
  return 1LL;
}

BOOL icu::AnnualTimeZoneRule::isEquivalentTo(icu::AnnualTimeZoneRule *this, const icu::TimeZoneRule *a2)
{
  if (this == a2) {
    return 1LL;
  }
  if (!this) {
    __cxa_bad_typeid();
  }
  BOOL result = sub_1807F874C(*(void *)(*(void *)this - 8LL), *(void *)(*(void *)a2 - 8LL));
  if (result)
  {
    BOOL result = icu::TimeZoneRule::isEquivalentTo(this, a2);
    if (result)
    {
      BOOL result = icu::DateTimeRule::operator==(*((void *)this + 10), *((void *)a2 + 10));
      if (result) {
        return *((_DWORD *)this + 22) == *((_DWORD *)a2 + 22) && *((_DWORD *)this + 23) == *((_DWORD *)a2 + 23);
      }
    }
  }

  return result;
}

uint64_t icu::AnnualTimeZoneRule::getFirstStart(icu::AnnualTimeZoneRule *this, int a2, int a3, double *a4)
{
  return icu::AnnualTimeZoneRule::getStartInYear(this, *((_DWORD *)this + 22), a2, a3, a4);
}

uint64_t icu::AnnualTimeZoneRule::getFinalStart(icu::AnnualTimeZoneRule *this, int a2, int a3, double *a4)
{
  int v7 = *((_DWORD *)this + 23);
  if (v7 == 0x7FFFFFFF) {
    return 0LL;
  }
  else {
    return icu::AnnualTimeZoneRule::getStartInYear(this, v7, a2, a3, a4);
  }
}

uint64_t icu::AnnualTimeZoneRule::getNextStart( icu::AnnualTimeZoneRule *this, double a2, uint64_t a3, uint64_t a4, int a5, double *a6)
{
  uint64_t v15 = 0LL;
  *(void *)unint64_t v16 = 0LL;
  uint64_t v14 = 0LL;
  sub_1808FA670(&v16[1], v16, (_DWORD *)&v15 + 1, (int *)&v15, (int *)&v14 + 1, &v14, a2);
  if (v16[1] < *((_DWORD *)this + 22)) {
    return (*(uint64_t (**)(icu::AnnualTimeZoneRule *, uint64_t, uint64_t, double *))(*(void *)this + 56LL))( this,  a3,  a4,  a6);
  }
  double v13 = 0.0;
  uint64_t result = icu::AnnualTimeZoneRule::getStartInYear(this, v16[1], a3, a4, &v13);
  if ((_DWORD)result)
  {
    if (v13 >= a2 && (a5 || v13 != a2))
    {
      *a6 = v13;
      return 1LL;
    }

    else
    {
      return icu::AnnualTimeZoneRule::getStartInYear(this, v16[1] + 1, a3, a4, a6);
    }
  }

  return result;
}

uint64_t icu::AnnualTimeZoneRule::getPreviousStart( icu::AnnualTimeZoneRule *this, double a2, uint64_t a3, uint64_t a4, int a5, double *a6)
{
  uint64_t v15 = 0LL;
  *(void *)unint64_t v16 = 0LL;
  uint64_t v14 = 0LL;
  sub_1808FA670(&v16[1], v16, (_DWORD *)&v15 + 1, (int *)&v15, (int *)&v14 + 1, &v14, a2);
  if (v16[1] > *((_DWORD *)this + 23)) {
    return (*(uint64_t (**)(icu::AnnualTimeZoneRule *, uint64_t, uint64_t, double *))(*(void *)this + 64LL))( this,  a3,  a4,  a6);
  }
  double v13 = 0.0;
  uint64_t result = icu::AnnualTimeZoneRule::getStartInYear(this, v16[1], a3, a4, &v13);
  if ((_DWORD)result)
  {
    if (v13 <= a2 && (a5 || v13 != a2))
    {
      *a6 = v13;
      return 1LL;
    }

    else
    {
      return icu::AnnualTimeZoneRule::getStartInYear(this, v16[1] - 1, a3, a4, a6);
    }
  }

  return result;
}

void *icu::TimeArrayTimeZoneRule::getStaticClassID(icu::TimeArrayTimeZoneRule *this)
{
  return &unk_18C535D0A;
}

void *icu::TimeArrayTimeZoneRule::getDynamicClassID(icu::TimeArrayTimeZoneRule *this)
{
  return &unk_18C535D0A;
}

uint64_t icu::TimeArrayTimeZoneRule::TimeArrayTimeZoneRule( uint64_t a1, UChar **a2, int a3, int a4, const double *a5, uint64_t a6, int a7)
{
  *(void *)a1 = off_18972C4E8;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 72) = a3;
  *(_DWORD *)(a1 + 76) = a4;
  *(void *)a1 = off_18972C620;
  *(_DWORD *)(a1 + 80) = a7;
  *(void *)(a1 + 88) = 0LL;
  UErrorCode v14 = U_ZERO_ERROR;
  icu::TimeArrayTimeZoneRule::initStartTimes((icu::TimeArrayTimeZoneRule *)a1, a5, a6, &v14);
  return a1;
}

{
  UErrorCode v14;
  *(void *)a1 = off_18972C4E8;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 72) = a3;
  *(_DWORD *)(a1 + 76) = a4;
  *(void *)a1 = off_18972C620;
  *(_DWORD *)(a1 + 80) = a7;
  *(void *)(a1 + 88) = 0LL;
  UErrorCode v14 = U_ZERO_ERROR;
  icu::TimeArrayTimeZoneRule::initStartTimes((icu::TimeArrayTimeZoneRule *)a1, a5, a6, &v14);
  return a1;
}

uint64_t icu::TimeArrayTimeZoneRule::initStartTimes( icu::TimeArrayTimeZoneRule *this, const double *a2, uint64_t a3, UErrorCode *a4)
{
  unsigned int v8 = (char *)*((void *)this + 11);
  unsigned int v9 = (char *)this + 96;
  if (v8) {
    BOOL v10 = v8 == v9;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10) {
    uprv_free(v8);
  }
  if ((int)a3 < 33)
  {
    *((void *)this + 11) = v9;
    int v11 = (char *)this + 96;
  }

  else
  {
    int v11 = (char *)uprv_malloc(8LL * a3);
    *((void *)this + 11) = v11;
    if (!v11)
    {
      *a4 = U_MEMORY_ALLOCATION_ERROR;
      int v12 = (_DWORD *)((char *)this + 84);
LABEL_14:
      uint64_t v13 = 0LL;
      *int v12 = 0;
      return v13;
    }
  }

  memcpy(v11, a2, 8LL * (int)a3);
  *((_DWORD *)this + 21) = a3;
  int v12 = (_DWORD *)((char *)this + 84);
  uint64_t v13 = 1LL;
  uprv_sortArray( (uint64_t)v11,  a3,  8,  (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1809AF578,  0LL,  1,  (int *)a4);
  if (*(int *)a4 >= 1)
  {
    UErrorCode v14 = (char *)*((void *)this + 11);
    if (v14 && v14 != v9) {
      uprv_free(v14);
    }
    goto LABEL_14;
  }

  return v13;
}

icu::TimeArrayTimeZoneRule *icu::TimeArrayTimeZoneRule::TimeArrayTimeZoneRule( icu::TimeArrayTimeZoneRule *this, const icu::TimeArrayTimeZoneRule *a2)
{
  *(void *)this = off_18972C4E8;
  icu::UnicodeString::UnicodeString((icu::TimeArrayTimeZoneRule *)((char *)this + 8), (UChar **)a2 + 1);
  *((void *)this + 9) = *((void *)a2 + 9);
  *(void *)this = off_18972C620;
  uint64_t v4 = *((unsigned int *)a2 + 21);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((void *)this + 11) = 0LL;
  UErrorCode v6 = U_ZERO_ERROR;
  icu::TimeArrayTimeZoneRule::initStartTimes(this, *((const double **)a2 + 11), v4, &v6);
  return this;
}

void icu::TimeArrayTimeZoneRule::~TimeArrayTimeZoneRule(icu::TimeArrayTimeZoneRule *this)
{
  *(void *)this = off_18972C620;
  uint64_t v2 = (char *)*((void *)this + 11);
  if (v2) {
    BOOL v3 = v2 == (char *)this + 96;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3) {
    uprv_free(v2);
  }
  *(void *)this = off_18972C4E8;
  icu::UnicodeString::~UnicodeString(off_18972C4E8, (icu::TimeArrayTimeZoneRule *)((char *)this + 8));
  icu::UObject::~UObject(this);
}

{
  void *v1;
  icu::TimeArrayTimeZoneRule::~TimeArrayTimeZoneRule(this);
  icu::UMemory::operator delete(v1);
}

icu::TimeArrayTimeZoneRule *icu::TimeArrayTimeZoneRule::clone@<X0>( icu::TimeArrayTimeZoneRule *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::TimeArrayTimeZoneRule *)icu::UMemory::operator new(a3, (icu::UMemory *)0x160, a2);
  if (result) {
    return icu::TimeArrayTimeZoneRule::TimeArrayTimeZoneRule(result, this);
  }
  return result;
}

uint64_t icu::TimeArrayTimeZoneRule::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    icu::UnicodeString::operator=((UChar **)(a1 + 8), (UChar **)(a2 + 8));
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    UErrorCode v5 = U_ZERO_ERROR;
    icu::TimeArrayTimeZoneRule::initStartTimes( (icu::TimeArrayTimeZoneRule *)a1,  *(const double **)(a2 + 88),  *(unsigned int *)(a2 + 84),  &v5);
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  }

  return a1;
}

uint64_t icu::TimeArrayTimeZoneRule::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_1807F874C(*(void *)(*(void *)a1 - 8LL), *(void *)(*(void *)a2 - 8LL));
  if ((_DWORD)result)
  {
    uint64_t result = icu::TimeZoneRule::operator==(a1, a2);
    if ((_DWORD)result)
    {
      if (*(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80)) {
        return 0LL;
      }
      uint64_t v5 = *(unsigned int *)(a1 + 84);
      if ((_DWORD)v5 != *(_DWORD *)(a2 + 84)) {
        return 0LL;
      }
      if ((int)v5 >= 1)
      {
        UErrorCode v6 = *(double **)(a1 + 88);
        int v7 = *(double **)(a2 + 88);
        uint64_t v8 = v5 - 1;
        do
        {
          double v9 = *v6++;
          double v10 = v9;
          double v11 = *v7++;
          double v12 = v11;
          BOOL v14 = v8-- != 0;
          uint64_t result = v10 == v12;
        }

        while (v10 == v12 && v14);
        return result;
      }

      return 1LL;
    }
  }

  return result;
}

uint64_t icu::TimeArrayTimeZoneRule::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 32LL))(a1) ^ 1;
}

uint64_t icu::TimeArrayTimeZoneRule::getTimeType(icu::TimeArrayTimeZoneRule *this)
{
  return *((unsigned int *)this + 20);
}

uint64_t icu::TimeArrayTimeZoneRule::getStartTimeAt( icu::TimeArrayTimeZoneRule *this, unsigned int a2, double *a3)
{
  uint64_t result = 0LL;
  if ((a2 & 0x80000000) == 0 && *((_DWORD *)this + 21) > (signed int)a2)
  {
    *a3 = *(double *)(*((void *)this + 11) + 8LL * a2);
    return 1LL;
  }

  return result;
}

uint64_t icu::TimeArrayTimeZoneRule::countStartTimes(icu::TimeArrayTimeZoneRule *this)
{
  return *((unsigned int *)this + 21);
}

BOOL icu::TimeArrayTimeZoneRule::isEquivalentTo(double **this, double **a2)
{
  if (this == a2) {
    return 1LL;
  }
  if (!this) {
    __cxa_bad_typeid();
  }
  BOOL result = sub_1807F874C(*((void *)*this - 1), *((void *)*a2 - 1));
  if (result)
  {
    BOOL result = icu::TimeZoneRule::isEquivalentTo((icu::TimeZoneRule *)this, (const icu::TimeZoneRule *)a2);
    if (result)
    {
      if (*((_DWORD *)this + 20) != *((_DWORD *)a2 + 20)) {
        return 0LL;
      }
      uint64_t v5 = *((unsigned int *)this + 21);
      if ((_DWORD)v5 != *((_DWORD *)a2 + 21)) {
        return 0LL;
      }
      if ((int)v5 >= 1)
      {
        UErrorCode v6 = this[11];
        int v7 = a2[11];
        BOOL result = 1LL;
        while (*v6 == *v7)
        {
          ++v7;
          ++v6;
          if (!--v5) {
            return result;
          }
        }

        return 0LL;
      }

      return 1LL;
    }
  }

  return result;
}

uint64_t icu::TimeArrayTimeZoneRule::getFirstStart( icu::TimeArrayTimeZoneRule *this, int a2, int a3, double *a4)
{
  uint64_t v4 = (double *)*((void *)this + 11);
  if (!v4) {
    return 0LL;
  }
  double v5 = *v4;
  double v6 = (double)a2;
  int v7 = *((_DWORD *)this + 20);
  if (v7 == 2) {
    double v6 = 0.0;
  }
  double v8 = v5 - v6;
  if (v7) {
    double v9 = 0.0;
  }
  else {
    double v9 = (double)a3;
  }
  *a4 = v8 - v9;
  return 1LL;
}

double icu::TimeArrayTimeZoneRule::getUTC(icu::TimeArrayTimeZoneRule *this, double a2, int a3, int a4)
{
  int v4 = *((_DWORD *)this + 20);
  double v5 = (double)a3;
  if (v4 == 2) {
    double v5 = 0.0;
  }
  double v6 = a2 - v5;
  double v7 = (double)a4;
  if (v4) {
    double v7 = 0.0;
  }
  return v6 - v7;
}

uint64_t icu::TimeArrayTimeZoneRule::getFinalStart( icu::TimeArrayTimeZoneRule *this, int a2, int a3, double *a4)
{
  int v4 = *((_DWORD *)this + 21);
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    return 0LL;
  }
  uint64_t v7 = *((void *)this + 11);
  if (!v7) {
    return 0LL;
  }
  double v8 = *(double *)(v7 + 8LL * v6);
  double v9 = (double)a2;
  int v10 = *((_DWORD *)this + 20);
  if (v10 == 2) {
    double v9 = 0.0;
  }
  double v11 = v8 - v9;
  if (v10) {
    double v12 = 0.0;
  }
  else {
    double v12 = (double)a3;
  }
  *a4 = v11 - v12;
  return 1LL;
}

BOOL icu::TimeArrayTimeZoneRule::getNextStart( icu::TimeArrayTimeZoneRule *this, double a2, int a3, int a4, int a5, double *a6)
{
  int v6 = *((_DWORD *)this + 21);
  if (v6 < 1)
  {
    LODWORD(v11) = *((_DWORD *)this + 21);
  }

  else
  {
    uint64_t v7 = *((void *)this + 11);
    int v8 = *((_DWORD *)this + 20);
    double v9 = (double)a3;
    double v10 = 0.0;
    if (v8 == 2) {
      double v9 = 0.0;
    }
    if (!v8) {
      double v10 = (double)a4;
    }
    uint64_t v11 = *((unsigned int *)this + 21);
    while (1)
    {
      BOOL v12 = a5 == 0;
      uint64_t v13 = v11 - 1;
      double v14 = *(double *)(v7 + 8LL * (v11 - 1)) - v9 - v10;
      if (v14 != a2) {
        BOOL v12 = 0;
      }
      if (v14 < a2 || v12) {
        break;
      }
      *a6 = v14;
      --v11;
      if ((unint64_t)(v13 + 1) <= 1)
      {
        LODWORD(v11) = 0;
        return (_DWORD)v11 != v6;
      }
    }
  }

  return (_DWORD)v11 != v6;
}

uint64_t icu::TimeArrayTimeZoneRule::getPreviousStart( icu::TimeArrayTimeZoneRule *this, double a2, int a3, int a4, int a5, double *a6)
{
  uint64_t v6 = *((unsigned int *)this + 21);
  while ((int)v6 >= 1)
  {
    BOOL v7 = a5 != 0;
    uint64_t v8 = *((void *)this + 11) + 8 * v6--;
    double v9 = *(double *)(v8 - 8);
    int v10 = *((_DWORD *)this + 20);
    if (v10 == 2) {
      double v11 = 0.0;
    }
    else {
      double v11 = (double)a3;
    }
    double v12 = v9 - v11;
    if (v10) {
      double v13 = 0.0;
    }
    else {
      double v13 = (double)a4;
    }
    double v14 = v12 - v13;
    if (v14 != a2) {
      BOOL v7 = 0;
    }
    if (v14 < a2 || v7)
    {
      *a6 = v14;
      return 1LL;
    }
  }

  return 0LL;
}

uint64_t sub_1809AF578(uint64_t a1, double *a2, double *a3)
{
  if (*a2 < *a3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a2 != *a3;
  }
}

void *icu::TimeZoneTransition::getStaticClassID(icu::TimeZoneTransition *this)
{
  return &unk_18C535D0B;
}

void *icu::TimeZoneTransition::getDynamicClassID(icu::TimeZoneTransition *this)
{
  return &unk_18C535D0B;
}

icu::TimeZoneTransition *icu::TimeZoneTransition::TimeZoneTransition( icu::TimeZoneTransition *this, double a2, const icu::TimeZoneRule *a3, const icu::TimeZoneRule *a4)
{
  *(void *)this = off_18972C6E8;
  *((double *)this + 1) = a2;
  *((void *)this + 2) = (*(uint64_t (**)(const icu::TimeZoneRule *))(*(void *)a3 + 24LL))(a3);
  *((void *)this + 3) = (*(uint64_t (**)(const icu::TimeZoneRule *))(*(void *)a4 + 24LL))(a4);
  return this;
}

{
  *(void *)this = off_18972C6E8;
  *((double *)this + 1) = a2;
  *((void *)this + 2) = (*(uint64_t (**)(const icu::TimeZoneRule *))(*(void *)a3 + 24LL))(a3);
  *((void *)this + 3) = (*(uint64_t (**)(const icu::TimeZoneRule *))(*(void *)a4 + 24LL))(a4);
  return this;
}

void *icu::TimeZoneTransition::TimeZoneTransition(void *this)
{
  *this = off_18972C6E8;
  this[1] = 0LL;
  this[2] = 0LL;
  this[3] = 0LL;
  return this;
}

{
  *this = off_18972C6E8;
  this[1] = 0LL;
  this[2] = 0LL;
  this[3] = 0LL;
  return this;
}

icu::TimeZoneTransition *icu::TimeZoneTransition::TimeZoneTransition( icu::TimeZoneTransition *this, const icu::TimeZoneTransition *a2)
{
  *(void *)this = off_18972C6E8;
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)this + 2) = 0LL;
  int v4 = (void *)((char *)this + 16);
  *((void *)this + 3) = 0LL;
  uint64_t v5 = *((void *)a2 + 2);
  if (v5) {
    *int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24LL))(v5);
  }
  uint64_t v6 = *((void *)a2 + 3);
  if (v6) {
    *((void *)this + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
  }
  return this;
}

void icu::TimeZoneTransition::~TimeZoneTransition(icu::TimeZoneTransition *this)
{
  *(void *)this = off_18972C6E8;
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  icu::UObject::~UObject(this);
}

{
  void *v1;
  icu::TimeZoneTransition::~TimeZoneTransition(this);
  icu::UMemory::operator delete(v1);
}

icu::TimeZoneTransition *icu::TimeZoneTransition::clone@<X0>( icu::TimeZoneTransition *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  BOOL result = (icu::TimeZoneTransition *)icu::UMemory::operator new(a3, (icu::UMemory *)0x20, a2);
  if (result) {
    return icu::TimeZoneTransition::TimeZoneTransition(result, this);
  }
  return result;
}

void *icu::TimeZoneTransition::operator=(void *a1, void *a2)
{
  if (a1 != a2)
  {
    a1[1] = a2[1];
    uint64_t v4 = a2[2];
    uint64_t v5 = a1[2];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
    a1[2] = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
    uint64_t v6 = a2[3];
    uint64_t v7 = a1[3];
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
    }
    a1[3] = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24LL))(v6);
  }

  return a1;
}

uint64_t icu::TimeZoneTransition::setFrom(icu::TimeZoneTransition *this, const icu::TimeZoneRule *a2)
{
  uint64_t v4 = *((void *)this + 2);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t result = (*(uint64_t (**)(const icu::TimeZoneRule *))(*(void *)a2 + 24LL))(a2);
  *((void *)this + 2) = result;
  return result;
}

uint64_t icu::TimeZoneTransition::setTo(icu::TimeZoneTransition *this, const icu::TimeZoneRule *a2)
{
  uint64_t v4 = *((void *)this + 3);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t result = (*(uint64_t (**)(const icu::TimeZoneRule *))(*(void *)a2 + 24LL))(a2);
  *((void *)this + 3) = result;
  return result;
}

BOOL icu::TimeZoneTransition::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  if (!a1) {
    __cxa_bad_typeid();
  }
  BOOL result = sub_1807F874C(*(void *)(*(void *)a1 - 8LL), *(void *)(*(void *)a2 - 8LL));
  if (result)
  {
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = *(void *)(a2 + 16);
    if (v5 | v6)
    {
    }

    uint64_t v7 = *(void *)(a1 + 24);
    uint64_t v8 = *(void *)(a2 + 24);
    if (v7 | v8)
    {
    }

    return 1LL;
  }

  return result;
}

BOOL icu::TimeZoneTransition::operator!=(uint64_t a1, uint64_t a2)
{
  return !icu::TimeZoneTransition::operator==(a1, a2);
}

uint64_t icu::TimeZoneTransition::setTime(uint64_t this, double a2)
{
  *(double *)(this + 8) = a2;
  return this;
}

uint64_t icu::TimeZoneTransition::adoptFrom(icu::TimeZoneTransition *this, icu::TimeZoneRule *a2)
{
  uint64_t result = *((void *)this + 2);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  *((void *)this + 2) = a2;
  return result;
}

uint64_t icu::TimeZoneTransition::adoptTo(icu::TimeZoneTransition *this, icu::TimeZoneRule *a2)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  *((void *)this + 3) = a2;
  return result;
}

double icu::TimeZoneTransition::getTime(icu::TimeZoneTransition *this)
{
  return *((double *)this + 1);
}

uint64_t icu::TimeZoneTransition::getTo(icu::TimeZoneTransition *this)
{
  return *((void *)this + 3);
}

uint64_t icu::TimeZoneTransition::getFrom(icu::TimeZoneTransition *this)
{
  return *((void *)this + 2);
}

uint64_t uameasfmt_open(const char *a1, unint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  if (*a4 > 0) {
    return 0LL;
  }
  if (a2 >= 5)
  {
    uint64_t v4 = 0LL;
    *a4 = 1;
    return v4;
  }

  uint64_t v8 = dword_180A3DC80[(int)a2];
  uint64_t v4 = icu::UMemory::operator new((icu::UMemory *)0x178, a2);
  if (v4)
  {
    icu::Locale::Locale((icu::Locale *)v10, a1, 0LL, 0LL, 0LL);
    icu::MeasureFormat::MeasureFormat(v4, v10, v8, a3, a4);
    icu::Locale::~Locale((icu::Locale *)v10);
    if (*a4 < 1) {
      return v4;
    }
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    return 0LL;
  }

  if (*a4 >= 1) {
    return 0LL;
  }
  return v4;
}

uint64_t uameasfmt_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t uameasfmt_format( icu::MeasureFormat *a1, int a2, char *a3, unsigned int a4, icu::MeasureUnit *a5, double a6)
{
  return uameasfmt_formatGetPosition(a1, a2, a3, a4, 0LL, a5, a6);
}

uint64_t uameasfmt_formatGetPosition( icu::MeasureFormat *this, int a2, char *a3, unsigned int a4, uint64_t a5, icu::MeasureUnit *a6, double a7)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  if (*(int *)a6 <= 0)
  {
    if (a3)
    {
      if ((a4 & 0x80000000) == 0) {
        goto LABEL_6;
      }
    }

    else if (!a4)
    {
LABEL_6:
      else {
        int v17 = a2;
      }
      uint64_t v18 = icu::MeasureUnit::createFromUAMeasureUnit(v17, a6);
      int v20 = (uint64_t *)*(unsigned int *)a6;
      int v21 = (icu::MeasureUnit *)v18;
      uint64_t v22 = (icu::Measure *)icu::UMemory::operator new(v20, (icu::UMemory *)0x80, v19);
      if (v22)
      {
        icu::Formattable::Formattable((icu::Formattable *)v33, a7);
        icu::Measure::Measure(v22, (const icu::Formattable *)v33, v21, (UErrorCode *)a6);
        icu::Formattable::~Formattable((icu::Formattable *)v33);
      }

      if (*(int *)a6 > 0)
      {
        uint64_t v7 = 0LL;
        if (!v22) {
          return v7;
        }
        goto LABEL_28;
      }

      int v26 = off_189723AC8;
      __int128 v27 = 0xFFFFFFFFuLL;
      if (a5)
      {
        int v23 = *(_DWORD *)a5;
        if (*(_DWORD *)a5 >= 0xEu)
        {
          uint64_t v7 = 0LL;
          *(_DWORD *)a6 = 1;
          goto LABEL_27;
        }
      }

      else
      {
        int v23 = -1;
      }

      LODWORD(v27) = v23;
      memset(v33, 0, sizeof(v33));
      icu::Formattable::Formattable((icu::Formattable *)v33);
      icu::Formattable::adoptObject((icu::Formattable *)v33, v22);
      __int128 v29 = 0u;
      uint64_t v32 = 0LL;
      __int128 v31 = 0u;
      __int128 v30 = 0u;
      unsigned int v28 = off_18971B688;
      LOWORD(v29) = 2;
      icu::UnicodeString::setTo((icu::UnicodeString *)&v28, a3, 0, a4);
      (*(void (**)(icu::MeasureFormat *, _OWORD *, void (***)(icu::UnicodeString *__hidden), void (***)(icu::FieldPosition *__hidden), icu::MeasureUnit *))(*(void *)this + 40LL))( this,  v33,  &v28,  &v26,  a6);
      if (a5) {
        *(void *)(a5 + 4) = *(void *)((char *)&v27 + 4);
      }
      unint64_t v25 = (UChar *)a3;
      uint64_t v7 = icu::UnicodeString::extract((uint64_t)&v28, &v25, a4, (int *)a6);
      unsigned int v24 = v25;
      icu::UnicodeString::~UnicodeString(&v24, (icu::UnicodeString *)&v28);
      icu::Formattable::~Formattable((icu::Formattable *)v33);
      uint64_t v22 = 0LL;
LABEL_27:
      icu::FieldPosition::~FieldPosition((icu::FieldPosition *)&v26);
      if (!v22) {
        return v7;
      }
LABEL_28:
      (*(void (**)(icu::Measure *))(*(void *)v22 + 8LL))(v22);
      return v7;
    }

    uint64_t v7 = 0LL;
    *(_DWORD *)a6 = 1;
    return v7;
  }

  return 0LL;
}

uint64_t uameasfmt_formatMultiple( icu::MeasureFormat *a1, UErrorCode *a2, unsigned int a3, char *a4, unsigned int a5, icu::MeasureUnit *a6)
{
  return uameasfmt_formatMultipleForFields(a1, a2, a3, a4, a5, 0LL, a6);
}

uint64_t uameasfmt_formatMultipleForFields( icu::MeasureFormat *this, UErrorCode *a2, unsigned int a3, char *a4, unsigned int a5, icu::FieldPositionIterator *a6, icu::MeasureUnit *a7)
{
  uint64_t v53 = *MEMORY[0x1895F89C0];
  if (a4)
  {
    if ((a5 & 0x80000000) != 0) {
      goto LABEL_8;
    }
  }

  else if (a5)
  {
LABEL_8:
    uint64_t v7 = 0LL;
    *(_DWORD *)a7 = 1;
    return v7;
  }

  if (a3 - 9 <= 0xFFFFFFF7) {
    goto LABEL_8;
  }
  unint64_t v13 = 0LL;
  __int128 v51 = 0u;
  __int128 v52 = 0u;
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  double v14 = (double *)(a2 + 2);
  do
  {
    if (*(int *)a7 > 0)
    {
      goto LABEL_29;
    }

    if (v13 >= a3)
    {
      GForce = (icu::MeasureUnit *)icu::MeasureUnit::createGForce(a7, a2);
      int v26 = icu::UMemory::operator new(v25, (icu::UMemory *)0x80, v24);
      if (v26)
      {
        int v23 = (icu::Measure *)v26;
        icu::Formattable::Formattable((icu::Formattable *)v41, 0);
        goto LABEL_23;
      }
    }

    else
    {
      int v15 = *(_DWORD *)v14;
      int Width = icu::MeasureFormat::getWidth(this);
      if ((v15 & 0xFFFFFFFE) == 0xA00 && Width == 3) {
        int v18 = 2563;
      }
      else {
        int v18 = v15;
      }
      GForce = (icu::MeasureUnit *)icu::MeasureUnit::createFromUAMeasureUnit(v18, a7);
      uint64_t v22 = icu::UMemory::operator new(v21, (icu::UMemory *)0x80, v20);
      if (v22)
      {
        int v23 = (icu::Measure *)v22;
        icu::Formattable::Formattable((icu::Formattable *)v41, *(v14 - 1));
LABEL_23:
        icu::Measure::Measure(v23, (const icu::Formattable *)v41, GForce, (UErrorCode *)a7);
        *((void *)&v49 + v13) = v23;
        icu::Formattable::~Formattable((icu::Formattable *)v41);
        goto LABEL_25;
      }
    }

    *((void *)&v49 + v13) = 0LL;
LABEL_25:
    ++v13;
    v14 += 2;
  }

  while (v13 != 8);
  if (*(int *)a7 >= 1)
  {
    LODWORD(v13) = 8;
LABEL_29:
    uint64_t v27 = v13;
    do
    {
      uint64_t v28 = *(void *)&v48[8 * v27 + 120];
      if (v28) {
        (*(void (**)(uint64_t))(*(void *)v28 + 8LL))(v28);
      }
      --v27;
    }

    while ((unint64_t)(v27 + 1) > 1);
    return 0LL;
  }

  bzero(v41, 0x400uLL);
  icu::Measure::Measure((icu::Measure *)v41, (const icu::Measure *)v49);
  icu::Measure::Measure((icu::Measure *)&v42, *((const icu::Measure **)&v49 + 1));
  icu::Measure::Measure((icu::Measure *)&v43, (const icu::Measure *)v50);
  icu::Measure::Measure((icu::Measure *)&v44, *((const icu::Measure **)&v50 + 1));
  icu::Measure::Measure((icu::Measure *)&v45, (const icu::Measure *)v51);
  icu::Measure::Measure((icu::Measure *)&v46, *((const icu::Measure **)&v51 + 1));
  icu::Measure::Measure((icu::Measure *)&v47, (const icu::Measure *)v52);
  icu::Measure::Measure((icu::Measure *)v48, *((const icu::Measure **)&v52 + 1));
  __int128 v37 = 0u;
  uint64_t v40 = 0LL;
  __int128 v39 = 0u;
  __int128 v38 = 0u;
  int v36 = off_18971B688;
  LOWORD(v37) = 2;
  icu::UnicodeString::setTo((icu::UnicodeString *)&v36, a4, 0, a5);
  icu::MeasureFormat::formatMeasures( (icu::ListFormatter **)this,  v41,  a3,  (icu::UnicodeString *)&v36,  a6,  (UErrorCode *)a7);
  for (uint64_t i = 0LL; i != 64; i += 8LL)
  {
    uint64_t v30 = *(void *)((char *)&v49 + i);
    if (v30) {
      (*(void (**)(uint64_t))(*(void *)v30 + 8LL))(v30);
    }
  }

  BOOL v35 = (UChar *)a4;
  uint64_t v7 = icu::UnicodeString::extract((uint64_t)&v36, &v35, a5, (int *)a7);
  uint64_t v34 = v35;
  icu::UnicodeString::~UnicodeString(&v34, (icu::UnicodeString *)&v36);
  for (uint64_t j = 112LL; j != -16; j -= 16LL)
    icu::Measure::~Measure((icu::Measure *)&v41[j]);
  return v7;
}

uint64_t uameasfmt_getUnitName( icu::MeasureFormat *a1, int a2, char *a3, unsigned int a4, icu::MeasureUnit *this)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (a3)
  {
    if ((a4 & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v5 = 0LL;
    *(_DWORD *)this = 1;
    return v5;
  }

  if (a4) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v10 = icu::MeasureUnit::createFromUAMeasureUnit(a2, this);
  uint64_t v11 = (const icu::MeasureUnit *)v10;
  if (*(int *)this > 0)
  {
    uint64_t v5 = 0LL;
    if (!v10) {
      return v5;
    }
    goto LABEL_14;
  }

  __int128 v17 = 0u;
  __int128 v18 = 0u;
  uint64_t v20 = 0LL;
  __int128 v19 = 0u;
  unint64_t v16 = off_18971B688;
  LOWORD(v17) = 2;
  icu::UnicodeString::setTo((icu::UnicodeString *)&v16, a3, 0, a4);
  icu::MeasureFormat::getUnitName(a1, v11, (icu::UnicodeString *)&v16);
  double v12 = (UChar **)(unsigned __int16)v17;
  if ((v17 & 1) != 0)
  {
    uint64_t v5 = 0LL;
    *(_DWORD *)this = 2;
  }

  else
  {
    int v15 = (UChar *)a3;
    uint64_t v5 = icu::UnicodeString::extract((uint64_t)&v16, &v15, a4, (int *)this);
    double v14 = v15;
    double v12 = &v14;
  }

  icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v16);
  if (v11) {
LABEL_14:
  }
    (*(void (**)(const icu::MeasureUnit *))(*(void *)v11 + 8LL))(v11);
  return v5;
}

uint64_t uameasfmt_getMultipleUnitNames( icu::MeasureFormat *a1, uint64_t a2, unsigned int a3, int a4, char *a5, unsigned int a6, icu::MeasureUnit *this)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  if (a5)
  {
    if ((a6 & 0x80000000) != 0) {
      goto LABEL_8;
    }
  }

  else if (a6)
  {
LABEL_8:
    uint64_t v7 = 0LL;
    *(_DWORD *)this = 1;
    return v7;
  }

  if (a3 - 9 <= 0xFFFFFFF7) {
    goto LABEL_8;
  }
  uint64_t v16 = 0LL;
  uint64_t v17 = a3;
  memset(v29, 0, sizeof(v29));
  do
  {
    *((void *)v29 + v16) = icu::MeasureUnit::createFromUAMeasureUnit(*(_DWORD *)(a2 + 4 * v16), this);
    ++v16;
  }

  while (a3 != v16);
  if (*(int *)this >= 1)
  {
    LODWORD(v16) = a3;
LABEL_15:
    if ((int)v16 >= 1)
    {
      unint64_t v18 = v16 + 1LL;
      do
      {
        uint64_t v19 = *((void *)v29 + (v18 - 2));
        if (v19) {
          (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
        }
        --v18;
      }

      while (v18 > 1);
    }

    return 0LL;
  }

  __int128 v25 = 0u;
  uint64_t v28 = 0LL;
  __int128 v27 = 0u;
  __int128 v26 = 0u;
  unint64_t v24 = off_18971B688;
  LOWORD(v25) = 2;
  icu::UnicodeString::setTo((icu::UnicodeString *)&v24, a5, 0, a6);
  uint64_t v20 = v29;
  icu::MeasureFormat::getMultipleUnitNames(a1, (const icu::MeasureUnit **)v29, a3, a4, (icu::UnicodeString *)&v24);
  do
  {
    if (*v20) {
      (*(void (**)(void))(*(void *)*v20 + 8LL))(*v20);
    }
    ++v20;
    --v17;
  }

  while (v17);
  if ((v25 & 1) != 0)
  {
    uint64_t v7 = 0LL;
    uint64_t v21 = 2LL;
    *(_DWORD *)this = 2;
  }

  else
  {
    int v23 = (UChar *)a5;
    uint64_t v7 = icu::UnicodeString::extract((uint64_t)&v24, &v23, a6, (int *)this);
    uint64_t v22 = v23;
    uint64_t v21 = (uint64_t)&v22;
  }

  icu::UnicodeString::~UnicodeString((void *)v21, (icu::UnicodeString *)&v24);
  return v7;
}

uint64_t uameasfmt_getUnitsForUsage( char *a1, const char *a2, const char *a3, _DWORD *a4, uint64_t a5, UErrorCode *a6)
{
  uint64_t v69 = *MEMORY[0x1895F89C0];
  uint64_t v68 = 0LL;
  memset(&v67[1], 0, 48);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v36, a2);
  v67[0] = (char *)&v67[1] + 5;
  LODWORD(v67[1]) = 40;
  WORD2(v67[1]) = 0;
  LODWORD(v68) = 0;
  icu::CharString::append((icu::CharString *)v67, v36, v37, a6);
  uint64_t v66 = 0LL;
  memset(&v65[1], 0, 48);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v34, a3);
  v65[0] = (char *)&v65[1] + 5;
  LODWORD(v65[1]) = 40;
  WORD2(v65[1]) = 0;
  LODWORD(v66) = 0;
  icu::CharString::append((icu::CharString *)v65, v34, v35, a6);
  memset(&__key[1], 0, 56);
  __key[0] = (char *)&__key[1] + 5;
  LODWORD(__key[1]) = 40;
  icu::CharString::append((icu::CharString *)__key, (const char *)v67[0], v68, a6);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v62, "/");
  icu::CharString::append((icu::CharString *)__key, (const char *)v62, SDWORD2(v62), a6);
  int v11 = v66;
  if ((_DWORD)v66)
  {
    double v12 = v65[0];
  }

  else
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)&v27, "default");
    double v12 = v27;
    int v11 = v28[0];
  }

  icu::CharString::append((icu::CharString *)__key, v12, v11, a6);
  uint64_t v16 = (const char **)bsearch( __key[0],  off_18C534950,  0x1DuLL,  0x10uLL,  (int (__cdecl *)(const void *, const void *))sub_1809B0AA4);
  if (!v16) {
    goto LABEL_5;
  }
  LODWORD(v66) = 0;
  *v65[0] = 0;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v46, v16[1]);
  icu::CharString::append((icu::CharString *)v65, v46, v47, a6);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v44, "/");
  if (icu::CharString::contains(v65, v44, v45))
  {
    memset(&__s[1], 0, 56);
    __s[0] = (char *)&__s[1] + 5;
    LODWORD(__s[1]) = 40;
    icu::CharString::append((icu::CharString *)__s, v65[0], v66, a6);
    uint64_t v17 = __s[0];
    unint64_t v18 = strchr(__s[0], 47);
    *unint64_t v18 = 0;
    uint64_t v19 = v18 + 1;
    LODWORD(v68) = 0;
    *(_BYTE *)v67[0] = 0;
    icu::StringPiece::StringPiece((icu::StringPiece *)&v42, v17);
    icu::CharString::append((icu::CharString *)v67, v42, v43, a6);
    LODWORD(v66) = 0;
    *v65[0] = 0;
    icu::StringPiece::StringPiece((icu::StringPiece *)&v40, v19);
    icu::CharString::append((icu::CharString *)v65, v40, v41, a6);
    if (BYTE4(__s[1])) {
      uprv_free(__s[0]);
    }
  }

  icu::StringPiece::StringPiece((icu::StringPiece *)&v38, "[");
  if (icu::CharString::contains(v65, v38, v39))
  {
    memset(&__s[1], 0, 56);
    __s[0] = (char *)&__s[1] + 5;
    LODWORD(__s[1]) = 40;
    icu::CharString::append((icu::CharString *)__s, v65[0], v66, a6);
    int v20 = (int)__s[0];
    uint64_t v21 = strchr(__s[0], 91);
    uint64_t v22 = v21 + 1;
    icu::CharString::truncate((uint64_t)v65, (_DWORD)v21 - v20);
    int v13 = atoi(v22);
    if (BYTE4(__s[1])) {
      uprv_free(__s[0]);
    }
  }

  else
  {
LABEL_5:
    int v13 = 0;
  }

  if (BYTE4(__key[1])) {
    uprv_free(__key[0]);
  }
  double v14 = (icu::units::UnitPreferences *)operator new(0xB0uLL);
  uint64_t v46 = (char *)icu::units::UnitPreferences::UnitPreferences(v14, a6);
  if (*(int *)a6 <= 0)
  {
    __int128 v63 = 0u;
    __int128 v64 = 0u;
    __int128 v62 = 0u;
    icu::LocaleBuilder::LocaleBuilder(&v62);
    __int128 v60 = 0u;
    __int128 v61 = 0u;
    __int128 v58 = 0u;
    __int128 v59 = 0u;
    __int128 v56 = 0u;
    __int128 v57 = 0u;
    __int128 v54 = 0u;
    __int128 v55 = 0u;
    __int128 v52 = 0u;
    __int128 v53 = 0u;
    memset(__key, 0, sizeof(__key));
    icu::Locale::Locale(v23, (icu::Locale *)__key, a1, 0LL, 0LL, 0LL);
    icu::LocaleBuilder::setLocale((icu::LocaleBuilder *)&v62, (const icu::Locale *)__key);
    if (!BYTE2(__key[3]))
    {
      __s[0] = 0LL;
      ulocimp_getRegionForSupplementalData(a1, 1, (char *)__s, 8, (int *)a6);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v32, (const char *)__s);
      icu::LocaleBuilder::setRegion((uint64_t)&v62, v32, v33);
    }

    icu::LocaleBuilder::build((icu::LocaleBuilder *)&v62, a6, (icu::Locale *)__s);
    icu::Locale::operator=((uint64_t)__key, (uint64_t)__s);
    icu::Locale::~Locale((icu::Locale *)__s);
    uint64_t v50 = 0LL;
    __int128 v49 = 0u;
    memset(__s, 0, sizeof(__s));
    icu::StringPiece::StringPiece((icu::StringPiece *)v31, (const char *)v67[0]);
    icu::StringPiece::StringPiece((icu::StringPiece *)v30, v65[0]);
    icu::units::UnitPreferences::getPreferencesFor( (uint64_t)v14,  v31[0],  (uint64_t)v31[1],  v30[0],  (uint64_t)v30[1],  (uint64_t)__key,  a6,  (uint64_t)__s);
    if (*(int *)a6 > 0 || SLODWORD(__s[0]) < 1)
    {
      uint64_t UAMeasureUnits = 0LL;
    }

    else
    {
      if (v13 >= SLODWORD(__s[0])) {
        int v24 = LODWORD(__s[0]) - 1;
      }
      else {
        int v24 = v13;
      }
      __int128 v27 = 0LL;
      *(void *)uint64_t v28 = 0LL;
      uint64_t v29 = 0LL;
      icu::StringPiece::StringPiece((icu::StringPiece *)v26, *(const char **)(*(void *)&__s[1][8 * v24] + 8LL));
      icu::MeasureUnit::forIdentifier(v26[0], v26[1], (int *)a6, (uint64_t)&v27);
      else {
        uint64_t UAMeasureUnits = 0LL;
      }
      icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v27);
    }

    sub_1809B0AAC((unsigned int *)__s);
    icu::Locale::~Locale((icu::Locale *)__key);
    icu::LocaleBuilder::~LocaleBuilder((icu::LocaleBuilder *)&v62);
  }

  else
  {
    uint64_t UAMeasureUnits = 0LL;
  }

  sub_1809B0B30((uint64_t *)&v46);
  if (BYTE4(v65[1])) {
    uprv_free(v65[0]);
  }
  if (BYTE4(v67[1])) {
    uprv_free(v67[0]);
  }
  return UAMeasureUnits;
}

const char *uameasfmt_getUnitCategory(int a1, icu::MeasureUnit *a2)
{
  if (*(int *)a2 <= 0)
  {
    uint64_t v4 = (icu::MeasureUnit *)icu::MeasureUnit::createFromUAMeasureUnit(a1, a2);
    uint64_t v5 = v4;
    if (*(int *)a2 <= 0)
    {
      Type = icu::MeasureUnit::getType(v4);
      if (!v5) {
        return Type;
      }
    }

    else
    {
      Type = 0LL;
      if (!v4) {
        return Type;
      }
    }

    (*(void (**)(icu::MeasureUnit *))(*(void *)v5 + 8LL))(v5);
    return Type;
  }

  return 0LL;
}

uint64_t sub_1809B0AA4(const char *a1, const char **a2)
{
  return strcmp(a1, *a2);
}

unsigned int *sub_1809B0AAC(unsigned int *a1)
{
  uint64_t v2 = (void *)*a1;
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0LL;
    do
    {
      uint64_t v4 = *(void *)(*((void *)a1 + 1) + 8 * v3);
      if (v4)
      {
        icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(v4 + 80));
        if (*(_BYTE *)(v4 + 20)) {
          uprv_free(*(void **)(v4 + 8));
        }
        icu::UMemory::operator delete((void *)v4);
        uint64_t v2 = (void *)*a1;
      }

      ++v3;
    }

    while (v3 < (int)v2);
  }

  if (*((_BYTE *)a1 + 20)) {
    uprv_free(*((void **)a1 + 1));
  }
  return a1;
}

uint64_t *sub_1809B0B30(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    sub_1809B0AAC((unsigned int *)(v2 + 88));
    uint64_t v3 = (void *)sub_1809B0B6C(v2);
    operator delete(v3);
  }

  return a1;
}

uint64_t sub_1809B0B6C(uint64_t a1)
{
  int v2 = *(_DWORD *)a1;
  if (*(int *)a1 >= 1)
  {
    uint64_t v3 = 0LL;
    do
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8 * v3);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 148)) {
          uprv_free(*(void **)(v4 + 136));
        }
        if (*(_BYTE *)(v4 + 84)) {
          uprv_free(*(void **)(v4 + 72));
        }
        if (*(_BYTE *)(v4 + 20)) {
          uprv_free(*(void **)(v4 + 8));
        }
        icu::UMemory::operator delete((void *)v4);
        int v2 = *(_DWORD *)a1;
      }

      ++v3;
    }

    while (v3 < v2);
  }

  if (*(_BYTE *)(a1 + 20)) {
    uprv_free(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t uatmufmt_open(const char *a1, unint64_t a2, int *a3)
{
  return uatmufmt_openWithNumberFormat(a1, a2, 0LL, a3);
}

uint64_t uatmufmt_openWithNumberFormat(const char *a1, unint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  if (*a4 > 0) {
    return 0LL;
  }
  if (a2 >= 4)
  {
    uint64_t v4 = 0LL;
    *a4 = 1;
    return v4;
  }

  uint64_t v8 = dword_180A3DCA0[(int)a2];
  uint64_t v4 = icu::UMemory::operator new((icu::UMemory *)0x178, a2);
  if (v4)
  {
    icu::Locale::Locale((icu::Locale *)v10, a1, 0LL, 0LL, 0LL);
    icu::MeasureFormat::MeasureFormat(v4, v10, v8, a3, a4);
    icu::Locale::~Locale((icu::Locale *)v10);
    if (*a4 < 1) {
      return v4;
    }
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    return 0LL;
  }

  if (*a4 >= 1) {
    return 0LL;
  }
  return v4;
}

uint64_t uatmufmt_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

icu::SharedObject *uatmufmt_setNumberFormat(icu::SharedObject *result, uint64_t a2, int *a3)
{
  if (*a3 <= 0)
  {
    uint64_t v4 = result;
    unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32LL))(a2);
    return icu::MeasureFormat::adoptNumberFormat(v4, v5, a3);
  }

  return result;
}

uint64_t uatmufmt_format( uint64_t a1, UErrorCode *a2, char *a3, unsigned int a4, icu::MeasureUnit *this, double a6)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  if (a3)
  {
    if ((a4 & 0x80000000) != 0) {
      goto LABEL_8;
    }
  }

  else if (a4)
  {
LABEL_8:
    uint64_t v6 = 0LL;
    *(_DWORD *)this = 1;
    return v6;
  }

  switch((int)a2)
  {
    case 0:
      uint64_t Year = icu::MeasureUnit::createYear(this, a2);
      break;
    case 1:
      uint64_t Year = icu::MeasureUnit::createMonth(this, a2);
      break;
    case 2:
      uint64_t Year = icu::MeasureUnit::createDay(this, a2);
      break;
    case 3:
      uint64_t Year = icu::MeasureUnit::createWeek(this, a2);
      break;
    case 4:
      uint64_t Year = icu::MeasureUnit::createHour(this, a2);
      break;
    case 5:
      uint64_t Year = icu::MeasureUnit::createMinute(this, a2);
      break;
    case 6:
      uint64_t Year = icu::MeasureUnit::createSecond(this, a2);
      break;
    case 7:
      uint64_t Year = icu::MeasureUnit::createMillisecond(this, a2);
      break;
    case 8:
      uint64_t Year = icu::MeasureUnit::createMicrosecond(this, a2);
      break;
    case 9:
      uint64_t Year = icu::MeasureUnit::createNanosecond(this, a2);
      break;
    default:
      goto LABEL_8;
  }

  int v15 = (icu::MeasureUnit *)Year;
  uint64_t v16 = (uint64_t *)*(unsigned int *)this;
  uint64_t v17 = (icu::UObject *)icu::UMemory::operator new(v16, (icu::UMemory *)0x80, v14);
  if (!v17)
  {
LABEL_25:
    memset(v27, 0, sizeof(v27));
    icu::Formattable::Formattable((icu::Formattable *)v27);
    icu::Formattable::adoptObject((icu::Formattable *)v27, v17);
    __int128 v23 = 0u;
    uint64_t v26 = 0LL;
    __int128 v25 = 0u;
    __int128 v24 = 0u;
    uint64_t v22 = off_18971B688;
    LOWORD(v23) = 2;
    icu::UnicodeString::setTo((icu::UnicodeString *)&v22, a3, 0, a4);
    v21[2] = 0LL;
    v21[0] = off_189723AC8;
    v21[1] = 0LL;
    (*(void (**)(uint64_t, _OWORD *, void (***)(icu::UnicodeString *__hidden), void *, icu::MeasureUnit *))(*(void *)a1 + 40LL))( a1,  v27,  &v22,  v21,  this);
    int v20 = (UChar *)a3;
    uint64_t v6 = icu::UnicodeString::extract((uint64_t)&v22, &v20, a4, (int *)this);
    uint64_t v19 = v20;
    icu::FieldPosition::~FieldPosition(&v19, (icu::FieldPosition *)v21);
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v22);
    icu::Formattable::~Formattable((icu::Formattable *)v27);
    return v6;
  }

  icu::Formattable::Formattable((icu::Formattable *)v27, a6);
  icu::Measure::Measure(v17, (const icu::Formattable *)v27, v15, (UErrorCode *)this);
  icu::Formattable::~Formattable((icu::Formattable *)v27);
  (*(void (**)(icu::UObject *))(*(void *)v17 + 8LL))(v17);
  return 0LL;
}

double uatmufmt_parse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  if (*a6 <= 0) {
    *a6 = 16;
  }
  return 0.0;
}

uint64_t uatmufmt_getTimePattern(char *a1, unsigned int a2, UChar *a3, int32_t a4, int *a5)
{
  if (*a5 > 0) {
    return 0LL;
  }
  if (a3)
  {
    if (a4 < 0) {
      goto LABEL_11;
    }
  }

  else if (a4)
  {
LABEL_11:
    uint64_t result = 0LL;
    *a5 = 1;
    return result;
  }

  if (a2 >= 3) {
    goto LABEL_11;
  }
  double v9 = off_18972C718[a2];
  unsigned int v13 = 0;
  uint64_t v10 = ures_open("icudt74l-unit", a1, a5);
  uint64_t v11 = ures_getByKeyWithFallback(v10, "durationUnits", v10, (UErrorCode *)a5);
  StringByKeyWithFallbacuint64_t k = ures_getStringByKeyWithFallback(v11, v9, (int *)&v13, (UErrorCode *)a5);
  if (*a5 <= 0) {
    u_strncpy(a3, StringByKeyWithFallback, a4);
  }
  ures_close(v11);
  return u_terminateUChars((uint64_t)a3, a4, v13, a5);
}

uint64_t uatmufmt_getListPattern(char *a1, unsigned int a2, unsigned int a3, UChar *a4, int32_t a5, int *a6)
{
  if (*a6 > 0) {
    return 0LL;
  }
  if (a4)
  {
    if (a5 < 0) {
      goto LABEL_12;
    }
  }

  else if (a5)
  {
LABEL_12:
    uint64_t result = 0LL;
    *a6 = 1;
    return result;
  }

  if (a2 >= 4 || a3 >= 4) {
    goto LABEL_12;
  }
  uint64_t v10 = off_18972C730[a2];
  uint64_t v11 = off_18972C750[a3];
  unsigned int v16 = 0;
  uint64_t v12 = ures_open(0LL, a1, a6);
  uint64_t v13 = ures_getByKeyWithFallback(v12, "listPattern", v12, (UErrorCode *)a6);
  uint64_t v14 = ures_getByKeyWithFallback(v13, v10, v13, (UErrorCode *)a6);
  StringByKeyWithFallbacuint64_t k = ures_getStringByKeyWithFallback(v14, v11, (int *)&v16, (UErrorCode *)a6);
  if (*a6 <= 0) {
    u_strncpy(a4, StringByKeyWithFallback, a5);
  }
  ures_close(v14);
  return u_terminateUChars((uint64_t)a4, a5, v16, a6);
}

void *uatimezone_open(UChar *s, unsigned int a2, int *a3)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (*a3 > 0) {
    return 0LL;
  }
  if (s)
  {
    int32_t v7 = a2;
    if ((a2 & 0x80000000) != 0) {
      int32_t v7 = u_strlen(s);
    }
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    uint64_t v16 = 0LL;
    __int128 v15 = 0u;
    uint64_t v11 = s;
    uint64_t v12 = (UChar *)off_18971B688;
    LOWORD(v13) = 2;
    icu::UnicodeString::setTo((icu::UnicodeString *)&v12, a2 >> 31, &v11, v7);
    uint64_t v10 = icu::TimeZone::createTimeZone(&v12, v8);
    if (!v10)
    {
      uint64_t v9 = 7LL;
      *a3 = 7;
    }

    icu::UnicodeString::~UnicodeString((void *)v9, (icu::UnicodeString *)&v12);
    if (*a3 >= 1) {
      return 0LL;
    }
    else {
      return v10;
    }
  }

  else
  {
    uint64_t result = 0LL;
    *a3 = 1;
  }

  return result;
}

uint64_t uatimezone_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t uatimezone_getOffset(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  if (a5)
  {
    if (*a5 <= 0) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 48LL))(result);
    }
  }

  return result;
}

void *uatimezone_getOffsetFromLocal( void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6, double a7)
{
  if (*a6 <= 0)
  {
    if (result
    {
      return (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, int *, double))(*(void *)result + 160LL))( result,  a2,  a3,  a4,  a5,  a6,  a7);
    }

    else
    {
      *a6 = 1;
    }
  }

  return result;
}

uint64_t uatimezone_getDisplayName( icu::Calendar *a1, unsigned int a2, char *a3, char *a4, unsigned int a5, int *a6)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  if (*a6 > 0) {
    return 0xFFFFFFFFLL;
  }
  __int128 v21 = 0u;
  uint64_t v24 = 0LL;
  __int128 v23 = 0u;
  __int128 v22 = 0u;
  int v20 = off_18971B688;
  LOWORD(v21) = 2;
  if (a4 || a5) {
    icu::UnicodeString::setTo((icu::UnicodeString *)&v20, a4, 0, a5);
  }
  switch(a2)
  {
    case 0u:
      icu::Locale::Locale((uint64_t *)a2, (icu::Locale *)v19, a3, 0LL, 0LL, 0LL);
      __int128 v13 = a1;
      int v14 = 0;
      goto LABEL_10;
    case 1u:
      icu::Locale::Locale((uint64_t *)a2, (icu::Locale *)v19, a3, 0LL, 0LL, 0LL);
      __int128 v13 = a1;
      int v14 = 0;
      goto LABEL_12;
    case 2u:
      icu::Locale::Locale((uint64_t *)a2, (icu::Locale *)v19, a3, 0LL, 0LL, 0LL);
      __int128 v13 = a1;
      int v14 = 1;
LABEL_10:
      unsigned int v15 = 1;
      goto LABEL_13;
    case 3u:
      icu::Locale::Locale((uint64_t *)a2, (icu::Locale *)v19, a3, 0LL, 0LL, 0LL);
      __int128 v13 = a1;
      int v14 = 1;
LABEL_12:
      unsigned int v15 = 2;
LABEL_13:
      icu::TimeZone::getDisplayName(v13, v14, v15, v19, (uint64_t)&v20);
      icu::Locale::~Locale((icu::Locale *)v19);
      break;
    default:
      break;
  }

  unint64_t v18 = (UChar *)a4;
  uint64_t v6 = icu::UnicodeString::extract((uint64_t)&v20, &v18, a5, a6);
  uint64_t v17 = v18;
  icu::UnicodeString::~UnicodeString(&v17, (icu::UnicodeString *)&v20);
  return v6;
}

uint64_t uatimezone_getTimeZoneTransitionDate(void *lpsrc, unsigned int a2, double *a3, int *a4, double a5)
{
  uint64_t result = 0LL;
  if (lpsrc)
  {
    if (*a4 <= 0)
    {
      if (result)
      {
        uint64_t v10 = (void *)result;
        memset(v12, 0, sizeof(v12));
        icu::TimeZoneTransition::TimeZoneTransition(v12);
        uint64_t v11 = 120LL;
        if (a2 < 2) {
          uint64_t v11 = 112LL;
        }
        if ((*(unsigned int (**)(void *, BOOL, _OWORD *, double))(*v10 + v11))( v10,  (a2 & 0xFFFFFFFD) == 1,  v12,  a5))
        {
          *a3 = icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v12);
          icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)v12);
          return 1LL;
        }

        else
        {
          icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)v12);
          return 0LL;
        }
      }
    }
  }

  return result;
}

_OWORD *ucal_openTimeZoneIDEnumeration(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  TimeZoneIDuint64_t Enumeration = icu::TimeZone::createTimeZoneIDEnumeration(a1, a2, a3, a4);
  return uenum_openFromStringEnumeration(TimeZoneIDEnumeration, a4);
}

_OWORD *ucal_openTimeZones(int *a1)
{
  TimeZoneIDuint64_t Enumeration = icu::TimeZone::createTimeZoneIDEnumeration(0LL, 0LL, 0LL, a1);
  return uenum_openFromStringEnumeration(TimeZoneIDEnumeration, a1);
}

_OWORD *ucal_openCountryTimeZones(uint64_t a1, int *a2)
{
  TimeZoneIDuint64_t Enumeration = icu::TimeZone::createTimeZoneIDEnumeration(0LL, a1, 0LL, a2);
  return uenum_openFromStringEnumeration(TimeZoneIDEnumeration, a2);
}

uint64_t ucal_getDefaultTimeZone(icu::TimeZone *a1, int a2, int *a3)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (!a3 || *a3 > 0) {
    return 0LL;
  }
  uint64_t Default = icu::TimeZone::createDefault(a1);
  if (Default)
  {
    uint64_t v9 = Default;
    __int128 v13 = 0u;
    uint64_t v16 = 0LL;
    __int128 v15 = 0u;
    __int128 v14 = 0u;
    uint64_t v12 = (UChar *)off_18971B688;
    LOWORD(v13) = 2;
    icu::UnicodeString::operator=(&v12, (UChar **)(Default + 8));
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
    uint64_t v11 = (UChar *)a1;
    uint64_t v4 = icu::UnicodeString::extract((uint64_t)&v12, &v11, a2, a3);
    uint64_t v10 = v11;
    icu::UnicodeString::~UnicodeString(&v10, (icu::UnicodeString *)&v12);
  }

  else
  {
    uint64_t v4 = 0LL;
    *a3 = 7;
  }

  return v4;
}

void ucal_setDefaultTimeZone(UChar *a1, int *a2)
{
  int v2 = (icu::TimeZone *)sub_1809B1940(a1, 0xFFFFFFFF, a2);
  if (v2) {
    icu::TimeZone::adoptDefault(v2, v3);
  }
}

void *sub_1809B1940(UChar *s, unsigned int a2, int *a3)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (!a3 || *a3 > 0) {
    return 0LL;
  }
  int32_t v7 = a2;
  if ((a2 & 0x80000000) != 0) {
    int32_t v7 = u_strlen(s);
  }
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  uint64_t v16 = 0LL;
  __int128 v15 = 0u;
  uint64_t v11 = s;
  uint64_t v12 = (UChar *)off_18971B688;
  LOWORD(v13) = 2;
  icu::UnicodeString::setTo((icu::UnicodeString *)&v12, a2 >> 31, &v11, v7);
  uint64_t v4 = icu::TimeZone::createTimeZone(&v12, v8);
  if (!v4)
  {
    uint64_t v9 = 7LL;
    *a3 = 7;
  }

  icu::UnicodeString::~UnicodeString((void *)v9, (icu::UnicodeString *)&v12);
  return v4;
}

uint64_t ucal_getHostTimeZone(icu::TimeZone *a1, int a2, int *a3)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (!a3 || *a3 > 0) {
    return 0LL;
  }
  uint64_t v8 = icu::TimeZone::detectHostTimeZone(a1);
  if (v8)
  {
    uint64_t v9 = v8;
    __int128 v13 = 0u;
    uint64_t v16 = 0LL;
    __int128 v15 = 0u;
    __int128 v14 = 0u;
    uint64_t v12 = (UChar *)off_18971B688;
    LOWORD(v13) = 2;
    icu::UnicodeString::operator=(&v12, (UChar **)(v8 + 8));
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
    uint64_t v11 = (UChar *)a1;
    uint64_t v4 = icu::UnicodeString::extract((uint64_t)&v12, &v11, a2, a3);
    uint64_t v10 = v11;
    icu::UnicodeString::~UnicodeString(&v10, (icu::UnicodeString *)&v12);
  }

  else
  {
    uint64_t v4 = 0LL;
    *a3 = 7;
  }

  return v4;
}

uint64_t ucal_getDSTSavings(UChar *a1, int *a2)
{
  uint64_t v3 = (icu::Calendar *)sub_1809B1940(a1, 0xFFFFFFFF, a2);
  uint64_t v4 = v3;
  if (*a2 <= 0)
  {
    if (v3
    {
      uint64_t v5 = (*(uint64_t (**)(icu::Calendar *))(*(void *)v3 + 104LL))(v3);
    }

    else
    {
      int v6 = 53;
      icu::Calendar::getNow(v3);
      double v8 = v7;
      LODWORD(v5) = 0;
      do
      {
        uint64_t v13 = 0LL;
        (*(void (**)(icu::Calendar *, void, char *, uint64_t *, int *, double))(*(void *)v4 + 48LL))( v4,  0LL,  (char *)&v13 + 4,  &v13,  a2,  v8);
        int v9 = *a2;
        if ((_DWORD)v13) {
          unsigned int v10 = v13;
        }
        else {
          unsigned int v10 = v5;
        }
        if (v9 >= 1) {
          uint64_t v5 = v5;
        }
        else {
          uint64_t v5 = v10;
        }
        if (v9 > 0 || (_DWORD)v13 != 0) {
          break;
        }
        double v8 = v8 + 604800000.0;
        --v6;
      }

      while (v6);
    }
  }

  else
  {
    uint64_t v5 = 0LL;
    if (!v3) {
      return v5;
    }
  }

  (*(void (**)(icu::Calendar *))(*(void *)v4 + 8LL))(v4);
  return v5;
}

uint64_t ucal_open(UChar *a1, unsigned int a2, const char *a3, int a4, int *a5)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  if (*a5 > 0) {
    return 0LL;
  }
  if (a1) {
    uint64_t Default = (icu::Calendar *)sub_1809B1940(a1, a2, a5);
  }
  else {
    uint64_t Default = (icu::Calendar *)icu::TimeZone::createDefault(0LL);
  }
  unsigned int v10 = Default;
  uint64_t v11 = (uint64_t *)*a5;
  if (!Default && (int)v11 <= 0)
  {
    uint64_t Instance = 0LL;
    *a5 = 7;
    return Instance;
  }

  if (a4 != 1)
  {
    icu::Locale::Locale(v11, (icu::Locale *)__dst, a3, 0LL, 0LL, 0LL);
    uint64_t Instance = icu::Calendar::createInstance(v10, (icu::TimeZone *)__dst, (UErrorCode *)a5, v12);
    icu::Locale::~Locale((icu::Locale *)__dst);
    return Instance;
  }

  __int16 v33 = 0;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  *(_OWORD *)__dst = 0u;
  __int128 v18 = 0u;
  if (!a3) {
    a3 = (const char *)uloc_getDefault(Default);
  }
  if ((int)strlen(a3) < 258)
  {
    strcpy(__dst, a3);
    uloc_setKeywordValue("calendar", "gregorian", __dst, 258, a5);
    __int128 v14 = (uint64_t *)*a5;
    if ((int)v14 > 0)
    {
LABEL_10:
      uint64_t Instance = 0LL;
      goto LABEL_11;
    }

    icu::Locale::Locale(v14, (icu::Locale *)v16, __dst, 0LL, 0LL, 0LL);
    uint64_t Instance = icu::Calendar::createInstance(v10, (icu::TimeZone *)v16, (UErrorCode *)a5, v15);
    icu::Locale::~Locale((icu::Locale *)v16);
    unsigned int v10 = 0LL;
  }

  else
  {
    uint64_t Instance = 0LL;
    *a5 = 1;
  }

uint64_t ucal_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t ucal_clone(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 0LL;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
  if (!result) {
    *a2 = 7;
  }
  return result;
}

icu::TimeZone *ucal_setTimeZone(icu::TimeZone *result, const UChar *a2, unsigned int a3, int *a4)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  if (*a4 <= 0)
  {
    uint64_t v5 = result;
    if (!a2)
    {
      uint64_t result = (icu::TimeZone *)icu::TimeZone::createDefault(result);
      uint64_t v11 = result;
LABEL_18:
      if (v11) {
        return (icu::TimeZone *)icu::Calendar::adoptTimeZone(v5, (uint64_t)v11);
      }
      *a4 = 7;
      return result;
    }

    __int128 v22 = 0u;
    __int128 v23 = 0u;
    uint64_t v25 = 0LL;
    __int128 v24 = 0u;
    uint64_t v20 = 0LL;
    __int128 v21 = (UChar *)off_18971B688;
    LOWORD(v22) = 2;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v15 = a2;
    uint64_t v16 = (UChar *)off_18971B688;
    LOWORD(v17) = 2;
    icu::UnicodeString::setTo((icu::UnicodeString *)&v21, a3 >> 31, &v15, a3);
    __int128 v14 = v15;
    uint64_t TimeZone = icu::Calendar::getTimeZone((uint64_t *)&v14, v5);
    icu::UnicodeString::operator=(&v16, (UChar **)TimeZone + 1);
    if ((v17 & 1) != 0)
    {
      unint64_t v10 = (unsigned __int16)v22;
      if ((v22 & 1) != 0)
      {
LABEL_13:
        uint64_t v11 = 0LL;
        char v12 = 1;
        goto LABEL_17;
      }
    }

    else
    {
      if ((v17 & 0x8000u) == 0LL) {
        int v8 = (unsigned __int16)v17 >> 5;
      }
      else {
        int v8 = DWORD1(v17);
      }
      if ((v22 & 0x8000u) == 0LL) {
        int v9 = (unsigned __int16)v22 >> 5;
      }
      else {
        int v9 = DWORD1(v22);
      }
      if ((v22 & 1) == 0
        && v8 == v9
        && icu::UnicodeString::doEquals((icu::UnicodeString *)&v16, (const icu::UnicodeString *)&v21, v8))
      {
        goto LABEL_13;
      }
    }

    uint64_t v11 = icu::TimeZone::createTimeZone(&v21, v7);
    char v12 = 0;
LABEL_17:
    icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)&v16);
    uint64_t result = (icu::TimeZone *)icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v21);
    if ((v12 & 1) != 0) {
      return result;
    }
    goto LABEL_18;
  }

  return result;
}

uint64_t ucal_getTimeZoneID(icu::Calendar *a1, UChar *a2, int a3, int *a4)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  uint64_t v4 = (uint64_t *)*a4;
  uint64_t TimeZone = icu::Calendar::getTimeZone(v4, a1);
  __int128 v14 = 0u;
  uint64_t v17 = 0LL;
  __int128 v16 = 0u;
  __int128 v15 = 0u;
  uint64_t v13 = (UChar *)off_18971B688;
  LOWORD(v14) = 2;
  icu::UnicodeString::operator=(&v13, (UChar **)TimeZone + 1);
  char v12 = a2;
  uint64_t v5 = icu::UnicodeString::extract((uint64_t)&v13, &v12, a3, a4);
  uint64_t v11 = v12;
  icu::UnicodeString::~UnicodeString(&v11, (icu::UnicodeString *)&v13);
  return v5;
}

uint64_t ucal_getTimeZoneDisplayName( icu::Calendar *a1, unsigned int a2, const char *a3, char *a4, unsigned int a5, int *a6)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  int v6 = (uint64_t *)*a6;
  uint64_t TimeZone = icu::Calendar::getTimeZone(v6, a1);
  __int128 v22 = 0u;
  uint64_t v25 = 0LL;
  __int128 v24 = 0u;
  __int128 v23 = 0u;
  __int128 v21 = off_18971B688;
  LOWORD(v22) = 2;
  if (a4 || a5) {
    icu::UnicodeString::setTo((icu::UnicodeString *)&v21, a4, 0, a5);
  }
  switch(a2)
  {
    case 0u:
      icu::Locale::Locale((uint64_t *)a2, (icu::Locale *)v20, a3, 0LL, 0LL, 0LL);
      __int128 v14 = (icu::Calendar *)TimeZone;
      int v15 = 0;
      goto LABEL_10;
    case 1u:
      icu::Locale::Locale((uint64_t *)a2, (icu::Locale *)v20, a3, 0LL, 0LL, 0LL);
      __int128 v14 = (icu::Calendar *)TimeZone;
      int v15 = 0;
      goto LABEL_12;
    case 2u:
      icu::Locale::Locale((uint64_t *)a2, (icu::Locale *)v20, a3, 0LL, 0LL, 0LL);
      __int128 v14 = (icu::Calendar *)TimeZone;
      int v15 = 1;
LABEL_10:
      unsigned int v16 = 2;
      goto LABEL_13;
    case 3u:
      icu::Locale::Locale((uint64_t *)a2, (icu::Locale *)v20, a3, 0LL, 0LL, 0LL);
      __int128 v14 = (icu::Calendar *)TimeZone;
      int v15 = 1;
LABEL_12:
      unsigned int v16 = 1;
LABEL_13:
      icu::TimeZone::getDisplayName(v14, v15, v16, v20, (uint64_t)&v21);
      icu::Locale::~Locale((icu::Locale *)v20);
      break;
    default:
      break;
  }

  __int128 v19 = (UChar *)a4;
  uint64_t v7 = icu::UnicodeString::extract((uint64_t)&v21, &v19, a5, a6);
  uint64_t v18 = v19;
  icu::UnicodeString::~UnicodeString(&v18, (icu::UnicodeString *)&v21);
  return v7;
}

uint64_t ucal_inDaylightTime(uint64_t a1, int *a2)
{
  if (*a2 <= 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96LL))(a1);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

icu::GregorianCalendar *ucal_setGregorianChange(icu::GregorianCalendar *lpsrc, UErrorCode *a2, double a3)
{
  if (*(int *)a2 <= 0)
  {
    uint64_t v4 = lpsrc;
    if (lpsrc)
    {
      lpsrc = (icu::GregorianCalendar *)sub_1807F874C(*(void *)(*(void *)v4 - 8LL), (uint64_t)&unk_189725080);
      int v7 = 16;
    }

    else
    {
      int v7 = 1;
    }

    *a2 = v7;
  }

  return lpsrc;
}

double ucal_getGregorianChange(void *lpsrc, int *a2)
{
  if (*a2 <= 0)
  {
    if (lpsrc)
    {
        || sub_1807F874C(*(void *)(*lpsrc - 8LL), (uint64_t)&unk_189725080))
      {
        return icu::GregorianCalendar::getGregorianChange(v4);
      }

      int v6 = 16;
    }

    else
    {
      int v6 = 1;
    }

    *a2 = v6;
  }

  return 0.0;
}

uint64_t ucal_getAttribute(icu::Calendar *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = icu::Calendar::isLenient(a1);
      break;
    case 1:
      uint64_t result = icu::Calendar::getFirstDayOfWeek(a1);
      break;
    case 2:
      uint64_t result = icu::Calendar::getMinimalDaysInFirstWeek(a1);
      break;
    case 3:
      uint64_t result = icu::Calendar::getRepeatedWallTimeOption(a1);
      break;
    case 4:
      uint64_t result = icu::Calendar::getSkippedWallTimeOption(a1);
      break;
    default:
      uint64_t result = 0xFFFFFFFFLL;
      break;
  }

  return result;
}

uint64_t ucal_setAttribute(uint64_t result, int a2, unsigned __int8 a3)
{
  switch(a2)
  {
    case 0:
      uint64_t result = icu::Calendar::setLenient(result, a3);
      break;
    case 1:
      uint64_t result = icu::Calendar::setFirstDayOfWeek(result, a3);
      break;
    case 2:
      uint64_t result = icu::Calendar::setMinimalDaysInFirstWeek(result, a3);
      break;
    case 3:
      uint64_t result = icu::Calendar::setRepeatedWallTimeOption(result, a3);
      break;
    case 4:
      uint64_t result = icu::Calendar::setSkippedWallTimeOption(result, a3);
      break;
    default:
      return result;
  }

  return result;
}

double ucal_getMillis(icu::Calendar *this, UErrorCode *a2)
{
  else {
    return 0.0;
  }
}

uint64_t ucal_setMillis(uint64_t this, double a2, UErrorCode *a3)
{
  return this;
}

icu::Calendar *ucal_setDate(icu::Calendar *this, int a2, int a3, int a4, int *a5)
{
  if (*a5 <= 0) {
    return (icu::Calendar *)icu::Calendar::set(this, a2, a3, a4);
  }
  return this;
}

icu::Calendar *ucal_setDateTime( icu::Calendar *this, int a2, int a3, int a4, int a5, int a6, int a7, int *a8)
{
  if (*a8 <= 0) {
    return (icu::Calendar *)icu::Calendar::set(this, a2, a3, a4, a5, a6, a7);
  }
  return this;
}

uint64_t ucal_equivalentTo(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40LL))(a1);
}

uint64_t ucal_add(uint64_t result, unsigned int a2, uint64_t a3, int *a4)
{
  if (*a4 <= 0)
  {
    if (a2 < 0x18) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 56LL))(result);
    }
    else {
      *a4 = 1;
    }
  }

  return result;
}

uint64_t ucal_roll(uint64_t result, unsigned int a2, uint64_t a3, int *a4)
{
  if (*a4 <= 0)
  {
    if (a2 < 0x18) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 72LL))(result);
    }
    else {
      *a4 = 1;
    }
  }

  return result;
}

uint64_t ucal_get(_BYTE *a1, unsigned int a2, UErrorCode *a3)
{
  if (a2 >= 0x18)
  {
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    return 0xFFFFFFFFLL;
  }

  return icu::Calendar::get(a1, a2, a3);
}

_BYTE *ucal_set(_BYTE *this, unsigned int a2, int a3)
{
  if (a2 <= 0x17) {
    return icu::Calendar::set(this, a2, a3);
  }
  return this;
}

BOOL ucal_isSet(uint64_t a1, unsigned int a2)
{
  return a2 <= 0x17 && icu::Calendar::isSet(a1, a2);
}

_BYTE *ucal_clearField(_BYTE *result, unsigned int a2)
{
  if (a2 <= 0x17) {
    return icu::Calendar::clear(result, a2);
  }
  return result;
}

uint64_t ucal_getLimit(uint64_t a1, unsigned int a2, int a3, int *a4)
{
  if (!a4 || *a4 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (a2 >= 0x18)
  {
    *a4 = 1;
    return 0xFFFFFFFFLL;
  }

  switch(a3)
  {
    case 0:
      return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112LL))(a1);
    case 1:
      return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128LL))(a1);
    case 2:
      return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144LL))(a1);
    case 3:
      return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160LL))(a1);
    case 4:
      uint64_t v5 = *(uint64_t (**)(void))(*(void *)a1 + 168LL);
      goto LABEL_13;
    case 5:
      uint64_t v5 = *(uint64_t (**)(void))(*(void *)a1 + 176LL);
LABEL_13:
      uint64_t result = v5();
      break;
    default:
      return 0xFFFFFFFFLL;
  }

  return result;
}

uint64_t ucal_getLocaleByType(uint64_t a1, int a2, int *a3)
{
  if (a1) {
    return icu::Calendar::getLocaleID(a1, a2, a3);
  }
  if (*a3 <= 0) {
    *a3 = 1;
  }
  return 0LL;
}

uint64_t ucal_getCanonicalTimeZoneID( uint64_t a1, uint64_t a2, UChar *a3, int a4, _BYTE *a5, icu::UnicodeString *a6)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (a5) {
    *a5 = 0;
  }
  if (a1 && (_DWORD)a2 && a3 && a4 > 0)
  {
    __int128 v20 = 0u;
    uint64_t v23 = 0LL;
    __int128 v22 = 0u;
    __int128 v21 = 0u;
    __int128 v19 = off_18971B688;
    LOWORD(v20) = 2;
    char v17 = 0;
    icu::UnicodeString::UnicodeString((uint64_t)v18, a1, a2);
    icu::TimeZone::getCanonicalID( (icu::TimeZone *)v18,  (const icu::UnicodeString *)&v19,  (icu::UnicodeString *)&v17,  a6,  v12);
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v18);
    uint64_t v7 = 0LL;
    __int128 v14 = (UChar **)*(unsigned int *)a6;
    if ((int)v14 <= 0)
    {
      if (a5) {
        *a5 = v17;
      }
      unsigned int v16 = a3;
      uint64_t v7 = icu::UnicodeString::extract((uint64_t)&v19, &v16, a4, (int *)a6);
      int v15 = v16;
      __int128 v14 = &v15;
    }

    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v19);
  }

  else
  {
    uint64_t v7 = 0LL;
    *(_DWORD *)a6 = 1;
  }

  return v7;
}

uint64_t ucal_getIanaTimeZoneID(uint64_t a1, uint64_t a2, UChar *a3, int a4, icu::UnicodeString *a5)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  uint64_t v19 = 0LL;
  __int128 v18 = 0u;
  int v15 = off_18971B688;
  LOWORD(v16) = 2;
  icu::UnicodeString::UnicodeString((uint64_t)v14, a1, a2);
  icu::TimeZone::getIanaID((icu::TimeZone *)v14, (const icu::UnicodeString *)&v15, a5, v8);
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v14);
  uint64_t v13 = a3;
  uint64_t v10 = icu::UnicodeString::extract((uint64_t)&v15, &v13, a4, (int *)a5);
  char v12 = v13;
  icu::UnicodeString::~UnicodeString(&v12, (icu::UnicodeString *)&v15);
  return v10;
}

uint64_t ucal_getType(uint64_t a1, int *a2)
{
  if (*a2 <= 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 184LL))(a1);
  }
  else {
    return 0LL;
  }
}

uint64_t ucal_getDayOfWeekType(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 <= 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 192LL))(a1);
  }
  else {
    return 0LL;
  }
}

uint64_t ucal_getWeekendTransition(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 <= 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200LL))(a1);
  }
  else {
    return 0LL;
  }
}

uint64_t ucal_isWeekend(uint64_t a1, int *a2)
{
  if (*a2 <= 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 208LL))(a1);
  }
  else {
    return 0LL;
  }
}

uint64_t ucal_getFieldDifference(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 <= 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88LL))(a1);
  }
  else {
    return 0LL;
  }
}

_OWORD *ucal_getKeywordValuesForLocale(uint64_t a1, char *a2, int a3, int *a4)
{
  int v22 = 0;
  ulocimp_getRegionForSupplementalData(a2, 1, (char *)&v22, 4, a4);
  uint64_t v6 = ures_openDirect(0LL, (uint64_t)"supplementalData", (uint64_t)a4);
  ures_getByKey(v6, "calendarPreferenceData", v6, a4);
  uint64_t v7 = ures_getByKey(v6, (const char *)&v22, 0LL, a4);
  int v8 = *a4;
  if (v6 && v8 == 2)
  {
    *a4 = 0;
    uint64_t v7 = ures_getByKey(v6, "001", 0LL, a4);
    int v8 = *a4;
  }

  if (v8 > 0) {
    goto LABEL_5;
  }
  EmptyList = ulist_createEmptyList(a4);
  if (*a4 <= 0)
  {
    if ((int)ures_getSize(v7) >= 1)
    {
      signed int v12 = 0;
      while (1)
      {
        int32_t length = 0;
        StringByIndex = ures_getStringByIndex(v7, v12, &length, a4);
        __int128 v14 = (char *)uprv_malloc(length + 1LL);
        if (!v14) {
          break;
        }
        int v15 = v14;
        u_UCharsToChars(StringByIndex, v14, length);
        v15[length] = 0;
        ulist_addItemEndList((uint64_t)EmptyList, v15, 1, a4);
        goto LABEL_20;
      }

      *a4 = 7;
    }

uint64_t ucal_getTimeZoneTransitionDate(icu::Calendar *a1, unsigned int a2, double *a3, UErrorCode *a4)
{
  double TimeInMillis = icu::Calendar::getTimeInMillis(a1, a4);
  uint64_t TimeZone = icu::Calendar::getTimeZone(v10, a1);
  if (result)
  {
    if (*(int *)a4 <= 0)
    {
      signed int v12 = (void *)result;
      memset(v14, 0, sizeof(v14));
      icu::TimeZoneTransition::TimeZoneTransition(v14);
      uint64_t v13 = 120LL;
      if (a2 < 2) {
        uint64_t v13 = 112LL;
      }
      if ((*(unsigned int (**)(void *, BOOL, _OWORD *, double))(*v12 + v13))( v12,  (a2 & 0xFFFFFFFD) == 1,  v14,  TimeInMillis))
      {
        *a3 = icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v14);
        icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)v14);
        return 1LL;
      }

      icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)v14);
    }

    return 0LL;
  }

  return result;
}

uint64_t ucal_getWindowsTimeZoneID(uint64_t a1, uint64_t a2, UChar *a3, int a4, icu::UnicodeString *a5)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (*(int *)a5 <= 0)
  {
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    uint64_t v21 = 0LL;
    __int128 v20 = 0u;
    __int128 v17 = off_18971B688;
    LOWORD(v18) = 2;
    icu::UnicodeString::UnicodeString((uint64_t)v16, a1, a2);
    icu::TimeZone::getWindowsID((icu::TimeZone *)v16, (const icu::UnicodeString *)&v17, a5, v9, v10);
    icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v16);
    unint64_t v12 = *(unsigned int *)a5;
    if ((int)v12 > 0)
    {
LABEL_4:
      uint64_t v5 = 0LL;
LABEL_10:
      icu::UnicodeString::~UnicodeString((void *)v12, (icu::UnicodeString *)&v17);
      return v5;
    }

    unint64_t v12 = (__int16)v18;
    if ((v12 & 0x80000000) != 0)
    {
      uint64_t v5 = DWORD1(v18);
      if (SDWORD1(v18) <= 0) {
        goto LABEL_4;
      }
    }

    else
    {
      unint64_t v12 = (unsigned __int16)v18;
      uint64_t v5 = (unsigned __int16)v18 >> 5;
    }

    int v15 = a3;
    icu::UnicodeString::extract((uint64_t)&v17, &v15, a4, (int *)a5);
    __int128 v14 = v15;
    unint64_t v12 = (unint64_t)&v14;
    goto LABEL_10;
  }

  return 0LL;
}

uint64_t ucal_getTimeZoneIDForWindowsID( uint64_t a1, uint64_t a2, const icu::UnicodeString *a3, UChar *a4, int a5, icu::UnicodeString *a6)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if (*(int *)a6 <= 0)
  {
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    uint64_t v22 = 0LL;
    __int128 v21 = 0u;
    *(void *)__int128 v18 = off_18971B688;
    LOWORD(v19) = 2;
    icu::UnicodeString::UnicodeString((uint64_t)v17, a1, a2);
    icu::TimeZone::getIDForWindowsID((icu::TimeZone *)v17, a3, v18, a6, v11);
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v17);
    unint64_t v13 = *(unsigned int *)a6;
    if ((int)v13 > 0)
    {
LABEL_4:
      uint64_t v6 = 0LL;
LABEL_10:
      icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v18);
      return v6;
    }

    unint64_t v13 = (__int16)v19;
    if ((v13 & 0x80000000) != 0)
    {
      uint64_t v6 = DWORD1(v19);
      if (SDWORD1(v19) <= 0) {
        goto LABEL_4;
      }
    }

    else
    {
      unint64_t v13 = (unsigned __int16)v19;
      uint64_t v6 = (unsigned __int16)v19 >> 5;
    }

    int v16 = a4;
    icu::UnicodeString::extract((uint64_t)v18, &v16, a5, (int *)a6);
    int v15 = v16;
    unint64_t v13 = (unint64_t)&v15;
    goto LABEL_10;
  }

  return 0LL;
}

void ucal_getTimeZoneOffsetFromLocal( icu::Calendar *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, UErrorCode *a6)
{
  if (*(int *)a6 <= 0)
  {
    double TimeInMillis = icu::Calendar::getTimeInMillis(a1, a6);
    unint64_t v13 = (uint64_t *)*(unsigned int *)a6;
    if ((int)v13 <= 0)
    {
      double v14 = TimeInMillis;
      uint64_t TimeZone = icu::Calendar::getTimeZone(v13, a1);
      if (v16) {
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, UErrorCode *, double))(*(void *)v16 + 160LL))( v16,  a2,  a3,  a4,  a5,  a6,  v14);
      }
      else {
        *a6 = U_ILLEGAL_ARGUMENT_ERROR;
      }
    }
  }

uint64_t sub_1809B30FC(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  if (*a1 > *a2) {
    return 1LL;
  }
  int v3 = a1[1];
  int v4 = a2[1];
  BOOL v5 = v3 < v4;
  BOOL v6 = v3 > v4;
  if (v5) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v6;
  }
}

uint64_t uacal_getDayPeriod(uint64_t a1, signed int a2, signed int a3, int a4, int *a5)
{
  uint64_t v51 = *MEMORY[0x1895F89C0];
  if (*a5 > 0) {
    return 10LL;
  }
  if (a2 > 0x17 || a3 >= 0x3C)
  {
    *a5 = 1;
    return 10LL;
  }

  __int128 __base = 0u;
  memset(v50, 0, sizeof(v50));
  uint64_t v10 = ures_openDirect(0LL, (uint64_t)"dayPeriods", (uint64_t)a5);
  uint64_t v11 = v10;
  if (*a5 <= 0)
  {
    if (a4) {
      double v14 = "locales";
    }
    else {
      double v14 = "locales_selection";
    }
    uint64_t v15 = ures_getByKey(v10, v14, 0LL, a5);
    if (*a5 > 0)
    {
      uint64_t v12 = 10LL;
LABEL_27:
      if (v15) {
        ures_close(v15);
      }
      goto LABEL_29;
    }

    int v48 = 0;
    uint64_t v47 = 0LL;
    if (!a1
      || (LODWORD(v46) = 0, uloc_getLanguage(a1, (char *)&v47, 12, (int *)&v46), *a5 > 0)
      || *a5 == -124
      || !(_BYTE)v47)
    {
      strcpy((char *)&v47, "en");
    }

    uint64_t v16 = ures_getByKey(v15, (const char *)&v47, 0LL, a5);
    if (*a5 >= 1)
    {
      *a5 = 0;
      uint64_t v16 = ures_getByKey(v15, "en", v16, a5);
      if (*a5 > 0) {
        goto LABEL_24;
      }
    }

    uint64_t v46 = 0LL;
    int32_t v45 = 8;
    ures_getUTF8String(v16, (char *)&v46, &v45, 1, a5);
    if (*a5 > 0
      || (v17 = ures_getByKey(v11, "rules", v15, a5), uint64_t v15 = v17, *a5 > 0)
      || (v18 = ures_getByKey(v17, (const char *)&v46, v11, a5), uint64_t v11 = v18, *a5 > 0))
    {
LABEL_24:
      uint64_t v12 = 10LL;
      goto LABEL_25;
    }

    int v19 = 0;
    uint64_t v20 = 0LL;
    if (ures_hasNext(v18))
    {
      while (1)
      {
        NextResource = ures_getNextResource(v11, v15, a5);
        uint64_t v15 = (uint64_t)NextResource;
        if (*a5 > 0) {
          goto LABEL_72;
        }
        Key = (const char *)ures_getKey((uint64_t)NextResource);
        uint64_t v23 = &off_18972C840;
        while (strcmp(Key, *v23))
        {
          v23 += 2;
          if (v23 >= &off_18972C8E0)
          {
            int v24 = 10;
            goto LABEL_38;
          }
        }

        int v24 = *((_DWORD *)v23 + 2);
LABEL_38:
        int v40 = v24;
        if (ures_hasNext(v15))
        {
          int v41 = 24;
          do
          {
            uint64_t v25 = ures_getNextResource(v15, v20, a5);
            uint64_t v20 = (uint64_t)v25;
            if (*a5 > 0) {
              goto LABEL_72;
            }
            uint64_t v26 = (const char *)ures_getKey((uint64_t)v25);
            __int16 v44 = 0;
            int32_t v42 = 6;
            *(_DWORD *)int v43 = 0;
            ures_getUTF8String(v20, v43, &v42, 1, a5);
            if (*a5 >= 1) {
              goto LABEL_72;
            }
            int v27 = atoi(v43);
            if (!strcmp(v26, "before"))
            {
              int v41 = v27;
            }

            else
            {
              if (!strcmp(v26, "from"))
              {
                int v28 = 1;
                if (v27 > v41 && v19 <= 11)
                {
                  __int128 v29 = (char *)&v50[-1] + 12 * v19;
                  *(void *)__int128 v29 = 0x100000000LL;
                  *((_DWORD *)v29 + 2) = v40;
                  ++v19;
                  int v28 = 1;
                }
              }

              else
              {
                int v28 = 0;
              }

              if (v19 <= 11)
              {
                __int128 v30 = (int *)&v50[-1] + 3 * v19;
                *__int128 v30 = v27;
                v30[1] = v28;
                v30[2] = v40;
                ++v19;
              }
            }
          }

          while (ures_hasNext(v15));
        }

        if (!ures_hasNext(v11))
        {
          if (v19 < 12) {
            break;
          }
          qsort(&__base, v19, 0xCuLL, (int (__cdecl *)(const void *, const void *))sub_1809B30FC);
          goto LABEL_55;
        }
      }
    }

    int v31 = v19;
    __int128 v32 = (char *)&v50[-1] + 12 * v19;
    *(void *)__int128 v32 = 24LL;
    *((_DWORD *)v32 + 2) = 10;
    qsort(&__base, ++v19, 0xCuLL, (int (__cdecl *)(const void *, const void *))sub_1809B30FC);
    if ((v31 & 0x80000000) == 0)
    {
LABEL_55:
      uint64_t v33 = 0LL;
      uint64_t v34 = (_DWORD *)&__base + 1;
      do
      {
        if (!v33 || (*(v34 - 2) & 0xFFFFFFFE) != 8) {
          _DWORD *v34 = 0;
        }
        ++v33;
        v34 += 3;
      }

      while (v19 != v33);
      if (v19 >= 2)
      {
        uint64_t v35 = 0LL;
        uint64_t v36 = (v19 - 1);
        int v37 = (signed int *)v50;
        while (1)
        {
          signed int v38 = *(v37 - 1);
          if (v38 > a2 || v38 >= a2 && *v37 > a3) {
            break;
          }
          ++v35;
          v37 += 3;
          if (v36 == v35) {
            goto LABEL_69;
          }
        }

        LODWORD(v36) = v35;
LABEL_69:
        signed int v39 = *((_DWORD *)&v50[-1] + 3 * v36);
        if (v39 <= a2 && (v39 < a2 || *((_DWORD *)&v50[-1] + 3 * v36 + 1) <= a3))
        {
          uint64_t v12 = *((unsigned int *)&v50[-1] + 3 * v36 + 2);
          if (!v20)
          {
LABEL_25:
            if (v16) {
              ures_close(v16);
            }
            goto LABEL_27;
          }

void sub_1809B36C0(unsigned int a1, uint64_t a2)
{
  if (a1 <= 0x23) {
    qword_18C449A00[a1] = a2;
  }
  umtx_unlock(0LL);
}

uint64_t sub_1809B3710()
{
  for (uint64_t i = 0LL; i != 36; ++i)
  {
    int v1 = (void (*)(void))qword_18C449A00[i];
    if (v1)
    {
      v1();
      qword_18C449A00[i] = 0LL;
    }
  }

  return 1LL;
}

icu::RuleBasedCollator *ucol_openBinary( const unsigned __int8 *a1, unint64_t a2, const icu::RuleBasedCollator *a3, UErrorCode *a4)
{
  int v4 = (uint64_t *)*(unsigned int *)a4;
  int v8 = a2;
  uint64_t result = (icu::RuleBasedCollator *)icu::UMemory::operator new(v4, (icu::UMemory *)0x110, a2);
  if (!result)
  {
    *a4 = U_MEMORY_ALLOCATION_ERROR;
    return result;
  }

  uint64_t result = (icu::RuleBasedCollator *)icu::RuleBasedCollator::RuleBasedCollator(result, a1, v8, a3, a4);
  if (*(int *)a4 >= 1)
  {
    icu::RuleBasedCollator::~RuleBasedCollator(result);
    icu::UMemory::operator delete(v10);
    return 0LL;
  }

  return result;
}

uint64_t ucol_cloneBinary(icu::RuleBasedCollator *a1, unsigned __int8 *a2, int a3, UErrorCode *a4)
{
  if (a1 && *(void (***)(icu::RuleBasedCollator *__hidden))a1 != off_18972A990)
  {
    *a4 = U_UNSUPPORTED_ERROR;
    return 0LL;
  }

  return icu::RuleBasedCollator::cloneBinary(a1, a2, a3, a4);
}

uint64_t ucol_safeClone(uint64_t result, uint64_t a2, int *a3, int *a4)
{
  if (!a4) {
    return 0LL;
  }
  if (*a4 > 0) {
    return 0LL;
  }
  if (!result)
  {
    int v7 = 1;
LABEL_18:
    *a4 = v7;
    return result;
  }

  if (a3)
  {
    int v6 = *a3;
    *a3 = 1;
    if (!v6) {
      return 0LL;
    }
  }

  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40LL))(result);
  if (result) {
    int v7 = -126;
  }
  else {
    int v7 = 7;
  }
  if (result) {
    BOOL v8 = a3 == 0LL;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8) {
    goto LABEL_18;
  }
  return result;
}

uint64_t ucol_clone(uint64_t a1, int *a2)
{
  if (!a2) {
    return 0LL;
  }
  if (*a2 > 0) {
    return 0LL;
  }
  if (a1)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40LL))(a1);
    if (result) {
      return result;
    }
    int v4 = 7;
  }

  else
  {
    int v4 = 1;
  }

  uint64_t result = 0LL;
  *a2 = v4;
  return result;
}

uint64_t ucol_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t ucol_mergeSortkeys(char *__s, int a2, char *a3, int a4, _BYTE *a5, int a6)
{
  if (!a2 || (BOOL v8 = __s) == 0LL || (v9 = a2, a2 < -1))
  {
LABEL_14:
    uint64_t result = 0LL;
    if (a5)
    {
      if (a6 >= 1)
      {
        uint64_t result = 0LL;
        *a5 = 0;
      }
    }

    return result;
  }

  int v10 = a4;
  uint64_t v11 = a3;
  if (a2 < 1)
  {
    if (!a3) {
      goto LABEL_14;
    }
  }

  else if (!a3 || __s[a2 - 1])
  {
    goto LABEL_14;
  }

  if (a4 < -1 || !a4) {
    goto LABEL_14;
  }
  if (a4 < 1)
  {
    if (a6 < 0) {
      return 0LL;
    }
  }

  else if (a6 < 0 || a3[a4 - 1])
  {
    goto LABEL_14;
  }

  if (!a5 && a6) {
    return 0LL;
  }
  if (a2 < 0) {
    int v9 = strlen(__s) + 1;
  }
  if (v10 < 0) {
    int v10 = strlen(v11) + 1;
  }
  uint64_t result = (v10 + v9);
  if ((int)result <= a6)
  {
    for (uint64_t i = a5; ; i += 2)
    {
      unsigned int v14 = *v8;
      if (v14 >= 2)
      {
        do
        {
          *i++ = v14;
          unsigned int v15 = *++v8;
          LOBYTE(v14) = v15;
        }

        while (v15 > 1);
      }

      *uint64_t i = 2;
      uint64_t v16 = i + 1;
      unsigned int v17 = *(unsigned __int8 *)v11;
      if (v17 >= 2)
      {
        do
        {
          *v16++ = v17;
          unsigned int v18 = *(unsigned __int8 *)++v11;
          unsigned int v17 = v18;
        }

        while (v18 > 1);
        uint64_t i = v16 - 1;
      }

      if (!v17 || *v8 != 1) {
        break;
      }
      ++v8;
      ++v11;
      *uint64_t v16 = 1;
    }

    if (*v8) {
      uint64_t v20 = (unsigned __int8 *)v8;
    }
    else {
      uint64_t v20 = (unsigned __int8 *)v11;
    }
    LODWORD(result) = (_DWORD)v16 - (_DWORD)a5;
    do
    {
      int v21 = *v20++;
      *v16++ = v21;
      uint64_t result = (result + 1);
    }

    while (v21);
  }

  return result;
}

uint64_t ucol_getSortKey(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 272LL))(a1);
}

uint64_t ucol_nextSortKeyPart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  if (a6 && *a6 <= 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 304LL))(a1);
  }
  else {
    return 0LL;
  }
}

uint64_t ucol_getBound(char *__src, int a2, int a3, int a4, char *__dst, int a6, int *a7)
{
  if (!a7) {
    return 0LL;
  }
  if (*a7 > 0) {
    return 0LL;
  }
  if (!__src) {
    goto LABEL_19;
  }
  uint64_t v10 = 2LL;
  while (1)
  {
    uint64_t v12 = v10;
    int64_t v13 = v10 - 1;
    int v14 = __src[v10 - 1];
    a4 -= v14 == 1;
    if (!a4) {
      break;
    }
    ++v10;
    if (v14) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = v13 < a2;
    }
    if (!v15)
    {
      *a7 = -123;
      break;
    }
  }

  memcpy(__dst, __src, v13);
  if (a3 == 2)
  {
    char v16 = -1;
    __dst[v12 - 1] = -1;
    int64_t v13 = v12;
    LODWORD(v12) = v12 + 1;
LABEL_23:
    __dst[v13] = v16;
    goto LABEL_24;
  }

  if (a3 == 1)
  {
    char v16 = 2;
    goto LABEL_23;
  }

  if (a3)
  {
LABEL_19:
    uint64_t result = 0LL;
    *a7 = 1;
    return result;
  }

  LODWORD(v12) = v13;
LABEL_24:
  uint64_t result = (v12 + 1);
  __dst[(int)v12] = 0;
  return result;
}

uint64_t ucol_setMaxVariable(uint64_t result, uint64_t a2, int *a3)
{
  if (*a3 <= 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 200LL))(result);
  }
  return result;
}

uint64_t ucol_getMaxVariable(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 208LL))(a1);
}

uint64_t ucol_setVariableTop(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  if (a1 && *a4 <= 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216LL))(a1);
  }
  else {
    return 0LL;
  }
}

uint64_t ucol_getVariableTop(uint64_t a1, int *a2)
{
  if (a1 && *a2 <= 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 240LL))(a1);
  }
  else {
    return 0LL;
  }
}

uint64_t ucol_restoreVariableTop(uint64_t result, uint64_t a2, int *a3)
{
  if (result)
  {
    if (*a3 <= 0) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 232LL))(result);
    }
  }

  return result;
}

uint64_t ucol_setAttribute(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (result)
  {
    if (*a4 <= 0) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 184LL))(result);
    }
  }

  return result;
}

uint64_t ucol_getAttribute(uint64_t a1, uint64_t a2, int *a3)
{
  if (a1 && *a3 <= 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 192LL))(a1);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t ucol_setStrength(uint64_t result, uint64_t a2)
{
  int v2 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)result + 184LL))( result,  5LL,  a2,  &v2);
  }
  return result;
}

uint64_t ucol_getStrength(uint64_t a1)
{
  int v2 = 0;
  if (a1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 192LL))(a1, 5LL, &v2);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t ucol_getReorderCodes(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  if (*a4 <= 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160LL))(a1);
  }
  else {
    return 0LL;
  }
}

uint64_t ucol_setReorderCodes(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (*a4 <= 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 168LL))(result);
  }
  return result;
}

uint64_t ucol_getVersion(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176LL))(a1);
}

uint64_t ucol_strcollIter(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  if (a4 && *a4 <= 0)
  {
    if (a1 && a2 && a3) {
      return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96LL))(a1);
    }
    *a4 = 1;
  }

  return 0LL;
}

uint64_t ucol_strcoll(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 88LL))( a1,  a2,  a3,  a4,  a5,  &v6);
}

uint64_t ucol_strcollUTF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  if (*a6 <= 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 296LL))(a1);
  }
  else {
    return 0LL;
  }
}

BOOL ucol_greater(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6 = 0;
  return (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 88LL))( a1,  a2,  a3,  a4,  a5,  &v6) == 1;
}

BOOL ucol_greaterOrEqual(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6 = 0;
  return (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 88LL))( a1,  a2,  a3,  a4,  a5,  &v6) != -1;
}

BOOL ucol_equal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6 = 0;
  return (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 88LL))( a1,  a2,  a3,  a4,  a5,  &v6) == 0;
}

uint64_t ucol_getUCAVersion(uint64_t result, _BYTE *a2)
{
  if (result)
  {
    int v4 = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, int *))(*(void *)result + 176LL))(result, &v4);
    char v3 = BYTE1(v4);
    *a2 = BYTE1(v4) >> 3;
    a2[1] = v3 & 7;
    a2[2] = BYTE2(v4) >> 6;
    a2[3] = 0;
  }

  return result;
}

void *ucol_getRules(icu::RuleBasedCollator *a1, unsigned int *a2)
{
  if (!a1 || *(void (***)(icu::RuleBasedCollator *__hidden))a1 == off_18972A990)
  {
    uint64_t Rules = icu::RuleBasedCollator::getRules(a1);
    unsigned int v5 = *(unsigned __int16 *)(Rules + 8);
    int v6 = (__int16)v5;
    unsigned int v7 = v5 >> 5;
    if (v6 < 0) {
      unsigned int v7 = *(_DWORD *)(Rules + 12);
    }
    *a2 = v7;
    __int16 v8 = *(_WORD *)(Rules + 8);
    if ((v8 & 0x11) != 0)
    {
      return 0LL;
    }

    else if ((v8 & 2) != 0)
    {
      return (void *)(Rules + 10);
    }

    else
    {
      return *(void **)(Rules + 24);
    }
  }

  else
  {
    *a2 = 0;
    return &unk_180A3DCC8;
  }

uint64_t ucol_getRulesEx( void (***a1)(icu::RuleBasedCollator *__hidden this), int a2, UChar *a3, int a4)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  uint64_t v16 = 0LL;
  __int128 v15 = 0u;
  uint64_t v12 = off_18971B688;
  LOWORD(v13) = 2;
  if (!a1 || *a1 == off_18972A990) {
    icu::RuleBasedCollator::getRules((uint64_t)a1, a2, (uint64_t)&v12);
  }
  if (a3 && a4 >= 1)
  {
    int v11 = 0;
    uint64_t v10 = a3;
    uint64_t v6 = icu::UnicodeString::extract((uint64_t)&v12, &v10, a4, &v11);
    int v9 = v10;
    unint64_t v7 = (unint64_t)&v9;
  }

  else
  {
    unint64_t v7 = (__int16)v13;
    if ((v7 & 0x80000000) != 0)
    {
      uint64_t v6 = DWORD1(v13);
    }

    else
    {
      unint64_t v7 = (unsigned __int16)v13;
      uint64_t v6 = (unsigned __int16)v13 >> 5;
    }
  }

  icu::UnicodeString::~UnicodeString((void *)v7, (icu::UnicodeString *)&v12);
  return v6;
}

const char *ucol_getLocale(void (***a1)(icu::RuleBasedCollator *__hidden this), int a2, int *a3)
{
  if (*a3 > 0) {
    return 0LL;
  }
  if (a1 && *a1 != off_18972A990)
  {
    *a3 = 16;
    return 0LL;
  }

  return icu::RuleBasedCollator::internalGetLocaleID((uint64_t)a1, a2, a3);
}

const char *ucol_getLocaleByType( void (***a1)(icu::RuleBasedCollator *__hidden this), int a2, int *a3)
{
  if (*a3 > 0) {
    return 0LL;
  }
  if (a1 && *a1 != off_18972A990)
  {
    *a3 = 16;
    return 0LL;
  }

  return icu::RuleBasedCollator::internalGetLocaleID((uint64_t)a1, a2, a3);
}

icu::UnicodeSet *ucol_getTailoredSet(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 0LL;
  }
  uint64_t result = (icu::UnicodeSet *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 248LL))(a1);
  unint64_t v4 = *a2;
  if ((int)v4 >= 1 && result)
  {
    unsigned int v5 = icu::UnicodeSet::~UnicodeSet((void *)v4, result);
    icu::UMemory::operator delete(v5);
    return 0LL;
  }

  return result;
}

uint64_t ucol_equals(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  else {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
  }
}

void sub_1809B4198(int *a1)
{
  if (*a1 <= 0)
  {
    uint64_t v2 = ures_open("icudt74l-coll", "root", a1);
    qword_18C535D10 = v2;
    if (*a1 <= 0)
    {
      qword_18C535D20 = (uint64_t)ures_getStringByKey(v2, "UCARules", &dword_18C535D18, a1);
      if (*a1 < 1)
      {
        sub_1809B36C0(0x1Cu, (uint64_t)sub_1809B423C);
      }

      else
      {
        ures_close(qword_18C535D10);
        qword_18C535D10 = 0LL;
      }
    }
  }

uint64_t sub_1809B423C()
{
  qword_18C535D20 = 0LL;
  dword_18C535D18 = 0;
  ures_close(qword_18C535D10);
  qword_18C535D10 = 0LL;
  atomic_store(0, &dword_18C535D28);
  return 1LL;
}

void sub_1809B4284(uint64_t a1)
{
  int v4 = 0;
  unsigned int v2 = atomic_load(&dword_18C535D28);
  if (v2 != 2 && icu::umtx_initImplPreInit(&dword_18C535D28))
  {
    sub_1809B4198(&v4);
    dword_18C535D2C = v4;
    icu::umtx_initImplPostInit(&dword_18C535D28);
    if (v4 > 0) {
      return;
    }
    goto LABEL_10;
  }

  if (dword_18C535D2C <= 0 && v4 <= 0) {
LABEL_10:
  }
    icu::UnicodeString::doAppend(a1, qword_18C535D20, 0, dword_18C535D18);
}

void sub_1809B433C(char *a1, char *__s, uint64_t a3, int *a4)
{
  __dst[2] = *MEMORY[0x1895F89C0];
  if (*a4 <= 0)
  {
    __dst[0] = 0LL;
    __dst[1] = 0LL;
    int v8 = strlen(__s);
    if (v8 < 16)
    {
      memcpy(__dst, __s, v8 + 1);
      T_CString_toLowerCase((unsigned __int8 *)__dst);
      uint64_t v9 = ures_open("icudt74l-coll", a1, a4);
      uint64_t v10 = ures_getByKey(v9, "collations", 0LL, a4);
      uint64_t v11 = ures_getByKeyWithFallback(v10, (char *)__dst, 0LL, (UErrorCode *)a4);
      unsigned int v19 = 0;
      StringByKey = ures_getStringByKey(v11, "Sequence", (int *)&v19, a4);
      if (*a4 <= 0)
      {
        uint64_t v13 = (uint64_t)StringByKey;
        uint64_t v14 = v19;
        icu::UnicodeString::unBogus(a3);
        unsigned int v15 = *(unsigned __int16 *)(a3 + 8);
        int v16 = (__int16)v15;
        unsigned int v17 = v15 >> 5;
        uint64_t v18 = v16 >= 0 ? v17 : *(unsigned int *)(a3 + 12);
        icu::UnicodeString::doReplace(a3, 0LL, v18, v13, 0, v14);
        if ((*(_WORD *)(a3 + 8) & 1) != 0) {
          *a4 = 7;
        }
      }

      if (v11) {
        ures_close(v11);
      }
      if (v10) {
        ures_close(v10);
      }
      if (v9) {
        ures_close(v9);
      }
    }

    else
    {
      *a4 = 1;
    }
  }

uint64_t *icu::LocaleCacheKey<icu::CollationCacheEntry>::createObject(uint64_t a1, uint64_t a2, int *a3)
{
  return sub_1809B44E0(a2, a3);
}

uint64_t *sub_1809B44E0(uint64_t a1, int *a2)
{
  if (!*(void *)(a1 + 504)) {
    return (uint64_t *)sub_1809B48B8(a1, a2);
  }
  if (!*(void *)(a1 + 512)) {
    return sub_1809B4A54(a1, a2);
  }
  if (*(void *)(a1 + 520)) {
    return sub_1809B4F78(a1, a2);
  }
  return sub_1809B4C60(a1, (UErrorCode *)a2);
}

UErrorCode *sub_1809B4508(uint64_t a1, icu::CollationRoot *this)
{
  v8[66] = *(icu::SharedObject ***)MEMORY[0x1895F89C0];
  uint64_t RootCacheEntry = icu::CollationRoot::getRootCacheEntry(this, (UErrorCode *)this);
  unsigned int v5 = (UErrorCode *)RootCacheEntry;
  uint64_t v6 = *(const char **)(a1 + 40);
  if (!*v6 || !strcmp(v6, "root"))
  {
    icu::SharedObject::addRef((uint64_t)v5);
  }

  else
  {
    *(_DWORD *)this = 0;
    bzero(v8, 0x210uLL);
    sub_1809B46DC((uint64_t)v8, v5, (char **)a1, (UErrorCode *)this);
    unsigned int v5 = (UErrorCode *)sub_1809B45EC(v8, (UErrorCode *)this);
    sub_1809B4870((uint64_t *)v8);
  }

  return v5;
}

icu::SharedObject *sub_1809B45EC(icu::SharedObject ***a1, UErrorCode *a2)
{
  v7[30] = *MEMORY[0x1895F89C0];
  memset(&v7[1], 0, 232);
  v7[0] = off_18972C978;
  icu::Locale::Locale((icu::Locale *)&v7[2], (uint64_t)(a1 + 30));
  uint64_t v6 = 0LL;
  sub_18089E200(*a1, (const icu::CacheKeyBase *)v7, a1, &v6, a2);
  int v4 = v6;
  v7[0] = off_18972C978;
  icu::Locale::~Locale((icu::Locale *)&v7[2]);
  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)v7);
  return v4;
}

uint64_t sub_1809B46DC(uint64_t a1, UErrorCode *a2, char **a3, UErrorCode *this)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  *(void *)a1 = icu::UnifiedCache::getInstance(this, a2);
  *(void *)(a1 + 8) = a2;
  icu::Locale::Locale((icu::Locale *)(a1 + 16), (uint64_t)(a2 + 6));
  icu::Locale::Locale((icu::Locale *)(a1 + 240), (uint64_t)a3);
  *(_DWORD *)(a1 + 496) = 0;
  *(_BYTE *)(a1 + 500) = 0;
  *(_BYTE *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 480) = 0;
  *(void *)(a1 + 520) = 0LL;
  *(void *)(a1 + 504) = 0LL;
  *(void *)(a1 + 512) = 0LL;
  if (*(int *)this <= 0)
  {
    if (*(_BYTE *)(a1 + 456)) {
      goto LABEL_3;
    }
    BaseName = (const char *)icu::Locale::getBaseName((icu::Locale *)(a1 + 240));
    icu::Locale::Locale((icu::Locale *)v11, BaseName, 0LL, 0LL, 0LL);
    icu::Locale::operator=(a1 + 240, (uint64_t)v11);
    icu::Locale::~Locale((icu::Locale *)v11);
    if (*(_BYTE *)(a1 + 456)
      || (int KeywordValue = icu::Locale::getKeywordValue(a3, "collation", (char *)(a1 + 464), 15, this), *(int *)this >= 1))
    {
LABEL_3:
      *this = U_ILLEGAL_ARGUMENT_ERROR;
    }

    else
    {
      *(_BYTE *)(a1 + KeywordValue + 464) = 0;
      if (KeywordValue)
      {
        if (uprv_stricmp((_BYTE *)(a1 + 464), "default"))
        {
          T_CString_toLowerCase((unsigned __int8 *)(a1 + 464));
          icu::Locale::setKeywordValue((const char **)(a1 + 240), "collation", (char *)(a1 + 464), this);
        }

        else
        {
          *(_BYTE *)(a1 + 464) = 0;
        }
      }
    }
  }

  return a1;
}

uint64_t *sub_1809B4870(uint64_t *a1)
{
  return a1;
}

void *sub_1809B48B8(uint64_t a1, int *a2)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (*a2 > 0) {
    return 0LL;
  }
  unsigned int v5 = (icu::Locale *)(a1 + 240);
  BaseName = (char *)icu::Locale::getBaseName((icu::Locale *)(a1 + 240));
  *(void *)(a1 + 504) = ures_openNoDefault("icudt74l-coll", BaseName, a2);
  if (*a2 == 2)
  {
    *a2 = -127;
    icu::SharedObject::addRef(*(void *)(a1 + 8));
    return *(void **)(a1 + 8);
  }

  else
  {
    memset(v13, 0, sizeof(v13));
    icu::Locale::Locale((icu::Locale *)v13, (uint64_t)v5);
    LocaleByType = (const char *)ures_getLocaleByType(*(void *)(a1 + 504), 0, a2);
    int v8 = (uint64_t *)*a2;
    if ((int)v8 <= 0)
    {
      icu::Locale::Locale(v8, (icu::Locale *)v12, LocaleByType, 0LL, 0LL, 0LL);
      uint64_t v9 = icu::Locale::operator=(a1 + 16, (uint64_t)v12);
      icu::Locale::operator=(v5, v9);
      icu::Locale::~Locale((icu::Locale *)v12);
      if (*(_BYTE *)(a1 + 464)) {
        icu::Locale::setKeywordValue((const char **)v5, "collation", (char *)(a1 + 464), (UErrorCode *)a2);
      }
      else {
        uint64_t v10 = sub_1809B45EC((icu::SharedObject ***)a1, (UErrorCode *)a2);
      }
      unsigned int v2 = v10;
    }

    else
    {
      unsigned int v2 = 0LL;
    }

    icu::Locale::~Locale((icu::Locale *)v13);
  }

  return v2;
}

uint64_t *sub_1809B4A54(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 0LL;
  }
  uint64_t v5 = ures_getByKey(*(void *)(a1 + 504), "collations", 0LL, a2);
  *(void *)(a1 + 512) = v5;
  if (*a2 == 2)
  {
    *a2 = -127;
    return sub_1809B5308(a1, v6, a2);
  }

  if (*a2 > 0) {
    return 0LL;
  }
  int v13 = 0;
  uint64_t v7 = ures_getByKeyWithFallback(v5, "default", 0LL, (UErrorCode *)&v13);
  int v12 = 0;
  String = ures_getString(v7, &v12, &v13);
  if (v13 > 0 || v12 < 1 || v12 > 15) {
    strcpy((char *)(a1 + 480), "standard");
  }
  else {
    u_UCharsToChars(String, (char *)(a1 + 480), v12 + 1);
  }
  if (v7) {
    ures_close(v7);
  }
  if (*(_BYTE *)(a1 + 464))
  {
    return sub_1809B4C60(a1, (UErrorCode *)a2);
  }

  else
  {
    uint64_t v9 = strcpy((char *)(a1 + 464), (const char *)(a1 + 480));
    int v10 = *(_DWORD *)(a1 + 496);
    int v11 = v10 | 2;
    *(_DWORD *)(a1 + 496) = v10 | 2;
    if (!strcmp(v9, "search"))
    {
      int v11 = v10 | 3;
      *(_DWORD *)(a1 + 496) = v10 | 3;
    }

    icu::Locale::setKeywordValue((const char **)(a1 + 240), "collation", (char *)(a1 + 464), (UErrorCode *)a2);
    return (uint64_t *)sub_1809B45EC((icu::SharedObject ***)a1, (UErrorCode *)a2);
  }

uint64_t *sub_1809B4C60(uint64_t a1, UErrorCode *a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  uint64_t v5 = (void *)(a1 + 464);
  uint64_t v6 = ures_getByKeyWithFallback(*(void *)(a1 + 512), (char *)(a1 + 464), 0LL, a2);
  uint64_t v7 = v6;
  if (*a2 == U_MISSING_RESOURCE_ERROR)
  {
    int v8 = strlen((const char *)(a1 + 464));
    *a2 = U_USING_DEFAULT_WARNING;
    *(_BYTE *)(a1 + 500) = 1;
    int v10 = *(_DWORD *)(a1 + 496);
    if ((v10 & 1) == 0 && v8 >= 7 && !strncmp((const char *)(a1 + 464), "search", 6uLL))
    {
      *(_DWORD *)(a1 + 496) = v10 | 1;
      *(_BYTE *)(a1 + 470) = 0;
    }

    else if ((v10 & 2) != 0)
    {
      if ((v10 & 4) != 0)
      {
        uint64_t v20 = sub_1809B5308(a1, v9, (int *)a2);
        goto LABEL_25;
      }

      *(_DWORD *)(a1 + 496) = v10 | 4;
      *(_BYTE *)(a1 + 472) = 0;
      *uint64_t v5 = *(void *)"standard";
    }

    else
    {
      *(_DWORD *)(a1 + 496) = v10 | 2;
      strcpy((char *)(a1 + 464), (const char *)(a1 + 480));
    }

    icu::Locale::setKeywordValue((const char **)(a1 + 240), "collation", (char *)(a1 + 464), a2);
    uint64_t v20 = sub_1809B45EC((icu::SharedObject ***)a1, a2);
LABEL_25:
    unsigned int v2 = v20;
    if (!v7) {
      return (uint64_t *)v2;
    }
LABEL_26:
    ures_close(v7);
    return (uint64_t *)v2;
  }

  if (*(int *)a2 > 0)
  {
    unsigned int v2 = 0LL;
    if (!v6) {
      return (uint64_t *)v2;
    }
    goto LABEL_26;
  }

  *(void *)(a1 + 520) = v6;
  uint64_t LocaleByType = ures_getLocaleByType(v6, 0, (int *)a2);
  int v12 = (const char *)LocaleByType;
  BaseName = (const char *)icu::Locale::getBaseName((icu::Locale *)(a1 + 16));
  icu::Locale::Locale(v14, (icu::Locale *)v24, v12, 0LL, 0LL, 0LL);
  icu::Locale::Locale(v15, (icu::Locale *)v23, BaseName, 0LL, 0LL, 0LL);
  BOOL v16 = icu::Locale::operator==((uint64_t)v24, (uint64_t)v23);
  icu::Locale::~Locale((icu::Locale *)v23);
  icu::Locale::~Locale((icu::Locale *)v24);
  if (strcmp((const char *)(a1 + 464), (const char *)(a1 + 480)))
  {
    icu::Locale::setKeywordValue((const char **)(a1 + 16), "collation", (char *)(a1 + 464), a2);
  }

  if ((!*v12 || !strcmp(v12, "root")) && !strcmp((const char *)(a1 + 464), "standard"))
  {
    if (*(_BYTE *)(a1 + 500)) {
      *a2 = U_USING_DEFAULT_WARNING;
    }
    return sub_1809B5308(a1, v18, (int *)a2);
  }

  else
  {
    icu::Locale::Locale(v17, (icu::Locale *)v24, v12, 0LL, 0LL, 0LL);
    icu::Locale::operator=(a1 + 240, (uint64_t)v24);
    icu::Locale::~Locale((icu::Locale *)v24);
    if (v16)
    {
      return sub_1809B4F78(a1, (int *)a2);
    }

    else
    {
      icu::Locale::setKeywordValue((const char **)(a1 + 240), "collation", (char *)(a1 + 464), a2);
      uint64_t v22 = sub_1809B45EC((icu::SharedObject ***)a1, a2);
      return sub_1809B5358(a1 + 16, v22, (int *)a2);
    }
  }

uint64_t *sub_1809B4F78(uint64_t a1, int *a2)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  unsigned int v2 = (uint64_t *)*a2;
  uint64_t v6 = (icu::CollationTailoring *)icu::UMemory::operator new(v2, (icu::UMemory *)0x190, (unint64_t)a2);
  uint64_t v7 = v6;
  if (v6)
  {
    icu::CollationTailoring::CollationTailoring( v6,  *(const icu::CollationSettings **)(*(void *)(*(void *)(a1 + 8) + 248LL) + 32LL));
    if (*((void *)v7 + 4))
    {
      uint64_t v8 = ures_getByKey(*(void *)(a1 + 520), "%%CollationBin", 0LL, a2);
      unsigned int v30 = 0;
      Binary = ures_getBinary(v8, (int *)&v30, a2);
      icu::CollationDataReader::read( *(void *)(*(void *)(a1 + 8) + 248LL),  (const icu::CollationTailoring *)Binary,  (const unsigned __int8 *)v30,  (uint64_t)v7,  (UErrorCode *)a2,  v10);
      if (*a2 > 0) {
        goto LABEL_19;
      }
      v32[0] = 0;
      v31[0] = 0;
      StringByKey = ures_getStringByKey(*(void *)(a1 + 520), "Sequence", v31, v32);
      if (v32[0] <= 0)
      {
        __int128 v29 = StringByKey;
        icu::UnicodeString::setTo((icu::CollationTailoring *)((char *)v7 + 40), 1, &v29, v31[0]);
      }

      BaseName = (char *)icu::Locale::getBaseName((icu::Locale *)(a1 + 240));
      int v13 = (const char *)icu::Locale::getBaseName((icu::Locale *)(a1 + 16));
      icu::Locale::Locale(v14, (icu::Locale *)v32, BaseName, 0LL, 0LL, 0LL);
      icu::Locale::Locale(v15, (icu::Locale *)v31, v13, 0LL, 0LL, 0LL);
      LOBYTE(v13) = icu::Locale::operator==((uint64_t)v32, (uint64_t)v31);
      icu::Locale::~Locale((icu::Locale *)v31);
      icu::Locale::~Locale((icu::Locale *)v32);
      if ((v13 & 1) == 0)
      {
        uint64_t v18 = ures_open("icudt74l-coll", BaseName, a2);
        uint64_t v19 = v18;
        if (*a2 > 0)
        {
          if (v18) {
            ures_close(v18);
          }
          goto LABEL_19;
        }

        v32[0] = 0;
        uint64_t v27 = ures_getByKeyWithFallback(v18, "collations/default", 0LL, (UErrorCode *)v32);
        v31[0] = 0;
        String = ures_getString(v27, v31, v32);
        if (v32[0] > 0 || v31[0] > 15) {
          strcpy((char *)(a1 + 480), "standard");
        }
        else {
          u_UCharsToChars(String, (char *)(a1 + 480), v31[0] + 1);
        }
        if (v27) {
          ures_close(v27);
        }
        if (v19) {
          ures_close(v19);
        }
      }

      icu::Locale::operator=((icu::CollationTailoring *)((char *)v7 + 104), a1 + 240);
      if (!strcmp((const char *)(a1 + 464), (const char *)(a1 + 480)))
      {
        uint64_t v20 = *(const char **)(a1 + 280);
        int v21 = (const char *)icu::Locale::getBaseName((icu::Locale *)(a1 + 240));
        if (!strcmp(v20, v21)) {
          goto LABEL_18;
        }
        BOOL v16 = (const char **)((char *)v7 + 104);
        unsigned int v17 = 0LL;
      }

      else
      {
        BOOL v16 = (const char **)((char *)v7 + 104);
        unsigned int v17 = (char *)(a1 + 464);
      }

      icu::Locale::setKeywordValue(v16, "collation", v17, (UErrorCode *)a2);
LABEL_18:
      if (*a2 <= 0)
      {
        if (*(_BYTE *)(a1 + 500)) {
          *a2 = -127;
        }
        int v24 = *(uint64_t **)(a1 + 504);
        *((void *)v7 + 45) = v24;
        *(void *)(a1 + 504) = 0LL;
        uint64_t v25 = icu::UMemory::operator new(v24, (icu::UMemory *)0x100, v22);
        char v3 = v25;
        if (v25)
        {
          uint64_t v26 = sub_1808B4534(v25, a1 + 16, (uint64_t)v7);
          icu::SharedObject::addRef((uint64_t)v26);
          uint64_t v7 = 0LL;
        }

        else
        {
          *a2 = 7;
        }

        goto LABEL_20;
      }

uint64_t *sub_1809B5308(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 > 0) {
    return 0LL;
  }
  icu::SharedObject::addRef(*(void *)(a1 + 8));
  return sub_1809B5358(a1 + 16, *(void **)(a1 + 8), a3);
}

uint64_t *sub_1809B5358(uint64_t a1, void *a2, int *a3)
{
  char v3 = a2;
  if (*a3 <= 0 && !icu::Locale::operator==(a1, (uint64_t)(a2 + 3)))
  {
    uint64_t v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0x100, v6);
    uint64_t v9 = v8;
    if (v8)
    {
      int v10 = sub_1808B4534(v8, a1, v3[31]);
      icu::SharedObject::addRef((uint64_t)v10);
    }

    else
    {
      *a3 = 7;
    }

    icu::SharedObject::removeRef(v3);
    return v9;
  }

  return v3;
}

void sub_1809B53DC(uint64_t a1)
{
  *(void *)a1 = off_18972C978;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));
  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);
}

icu::RuleBasedCollator *ucol_open(char *a1, const icu::Locale *a2)
{
  uint64_t v7 = (uint64_t *)*MEMORY[0x1895F89C0];
  icu::Locale::Locale(v7, (icu::Locale *)v6, a1, 0LL, 0LL, 0LL);
  uint64_t Instance = icu::Collator::createInstance((icu::Collator *)v6, a2, v3);
  icu::Locale::~Locale((icu::Locale *)v6);
  else {
    return 0LL;
  }
}

uint64_t ucol_getDisplayName(char *a1, const char *a2, char *a3, unsigned int a4, int *a5)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (*a5 > 0) {
    return 0xFFFFFFFFLL;
  }
  __int128 v20 = 0u;
  uint64_t v23 = 0LL;
  __int128 v22 = 0u;
  __int128 v21 = 0u;
  uint64_t v19 = off_18971B688;
  uint64_t v11 = 2LL;
  LOWORD(v20) = 2;
  if (a3 || a4) {
    icu::UnicodeString::setTo((icu::UnicodeString *)&v19, a3, 0, a4);
  }
  icu::Locale::Locale((uint64_t *)v11, (icu::Locale *)v18, a1, 0LL, 0LL, 0LL);
  icu::Locale::Locale(v12, (icu::Locale *)v17, a2, 0LL, 0LL, 0LL);
  icu::Collator::getDisplayName((icu::Collator *)v18, (const icu::Locale *)v17, (const icu::Locale *)&v19, v13);
  icu::Locale::~Locale((icu::Locale *)v17);
  icu::Locale::~Locale((icu::Locale *)v18);
  BOOL v16 = (UChar *)a3;
  uint64_t v5 = icu::UnicodeString::extract((uint64_t)&v19, &v16, a4, a5);
  unsigned int v15 = v16;
  icu::UnicodeString::~UnicodeString(&v15, (icu::UnicodeString *)&v19);
  return v5;
}

uint64_t ucol_getAvailable(int a1, int *a2)
{
  int v5 = 0;
  uint64_t AvailableLocales = icu::Collator::getAvailableLocales((icu::Collator *)&v5, a2);
  uint64_t result = 0LL;
  if (AvailableLocales)
  {
    if (v5 > a1) {
      return *(void *)(AvailableLocales + 224LL * a1 + 40);
    }
  }

  return result;
}

uint64_t ucol_countAvailable(uint64_t a1, int *a2)
{
  unsigned int v3 = 0;
  icu::Collator::getAvailableLocales((icu::Collator *)&v3, a2);
  return v3;
}

_OWORD *ucol_getKeywords(int *a1)
{
  if (*a1 <= 0) {
    return uenum_openCharStringsEnumeration((uint64_t)&off_18972C8E0, 1, a1);
  }
  else {
    return 0LL;
  }
}

_OWORD *ucol_getKeywordValues(const char *a1, int *a2)
{
  if (*a2 > 0) {
    return 0LL;
  }
  if (!a1 || strcmp(a1, "collation"))
  {
    *a2 = 1;
    return 0LL;
  }

  return ures_getKeywordValues((uint64_t)"icudt74l-coll");
}

_OWORD *ucol_getKeywordValuesForLocale(uint64_t a1, char *a2, uint64_t a3, int *a4)
{
  uint64_t v5 = ures_open("icudt74l-coll", a2, a4);
  uint64_t v11 = 0LL;
  uint64_t v9 = off_18972C930;
  EmptyList = ulist_createEmptyList(a4);
  ures_getAllItemsWithFallback(v5, "collations", (uint64_t)&v9, a4);
  unint64_t v6 = 0LL;
  if (*a4 <= 0)
  {
    uint64_t v7 = uprv_malloc(0x38uLL);
    unint64_t v6 = v7;
    if (v7)
    {
      *uint64_t v7 = xmmword_18972C8E8;
      v7[1] = *(_OWORD *)&off_18972C8F8;
      v7[2] = xmmword_18972C908;
      *((void *)v7 + 6) = ulist_reset_keyword_values_iterator;
      ulist_resetList(EmptyList);
      *((void *)v6 + 1) = EmptyList;
      EmptyList = 0LL;
    }

    else
    {
      *a4 = 7;
    }
  }

  uint64_t v9 = off_18972C930;
  ulist_deleteList(EmptyList);
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v9);
  if (v5) {
    ures_close(v5);
  }
  return v6;
}

void sub_1809B57FC(icu::ResourceSink *a1)
{
  *(void *)a1 = off_18972C930;
  ulist_deleteList(*((void **)a1 + 1));
  icu::ResourceSink::~ResourceSink(a1);
}

uint64_t ucol_getFunctionalEquivalent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  return ures_getFunctionalEquivalent(a1, a2, (uint64_t)"icudt74l-coll", (uint64_t)"collations", a3, a4, a5, 1LL, a6);
}

void sub_1809B5874(icu::ResourceSink *a1)
{
  *(void *)a1 = off_18972C930;
  ulist_deleteList(*((void **)a1 + 1));
  icu::ResourceSink::~ResourceSink(a1);
  icu::UMemory::operator delete(v2);
}

void sub_1809B58AC(uint64_t a1, char *a2, icu::ResourceValue *a3, uint64_t a4, int *a5)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  __s1 = a2;
  if (*a5 > 0) {
    return;
  }
  uint64_t v17 = 0LL;
  memset(v16, 0, sizeof(v16));
  (*(void (**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(void *)a3 + 88LL))(v16, a3, a5);
  unsigned int v8 = 1;
  while (1)
  {
    int v9 = (*(uint64_t (**)(icu::ResourceValue *))(*(void *)a3 + 24LL))(a3);
    if (v9 == 2)
    {
      int v13 = __s1;
      if (strncmp(__s1, "private-", 8uLL))
      {
        int v14 = strlen(v13);
      }

      goto LABEL_18;
    }

    if (!v9 && !*(_BYTE *)(a1 + 16) && !strcmp(__s1, "default")) {
      break;
    }
LABEL_18:
    if (*a5 < 1)
    {
    }

    return;
  }

  int v24 = 0;
  memset(&v22[1], 0, 48);
  v22[0] = (char *)&v22[1] + 5;
  LODWORD(v22[1]) = 40;
  int v23 = 0;
  int v20 = 0;
  uint64_t v19 = (*(uint64_t (**)(icu::ResourceValue *, int *, int *))(*(void *)a3 + 32LL))(a3, &v20, a5);
  icu::UnicodeString::UnicodeString(v21, 1LL, &v19);
  icu::CharString::appendInvariantChars((icu::CharString *)v22, (const icu::UnicodeString *)v21, (UErrorCode *)a5);
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v21);
  if (*a5 > 0 || !v23)
  {
LABEL_13:
    if (BYTE4(v22[1])) {
      uprv_free(v22[0]);
    }
    goto LABEL_18;
  }

  uint64_t v11 = uprv_strdup(v22[0]);
  if (v11)
  {
    int v12 = v11;
    ulist_removeString(*(void *)(a1 + 8), v22[0]);
    ulist_addItemBeginList(*(void *)(a1 + 8), v12, 1, a5);
    *(_BYTE *)(a1 + 16) = 1;
    goto LABEL_13;
  }

  *a5 = 7;
  if (BYTE4(v22[1])) {
    uprv_free(v22[0]);
  }
}

void sub_1809B5B30(uint64_t a1)
{
  *(void *)a1 = off_18972C978;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));
  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);
  icu::UMemory::operator delete(v2);
}

uint64_t sub_1809B5B64(uint64_t a1)
{
  int v2 = strlen((const char *)((unint64_t)"N3icu19CollationCacheEntryE" & 0x7FFFFFFFFFFFFFFFLL));
  unsigned int v3 = ustr_hashCharsN( (unsigned __int8 *)((unint64_t)"N3icu19CollationCacheEntryE" & 0x7FFFFFFFFFFFFFFFLL),  v2);
  return icu::Locale::hashCode((icu::Locale *)(a1 + 16)) + 37 * v3;
}

uint64_t *sub_1809B5BC0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0xF0, a2);
  uint64_t v5 = v4;
  if (v4)
  {
    *((_DWORD *)v4 + 2) = *(_DWORD *)(a1 + 8);
    *((_BYTE *)v4 + 12) = 0;
    *int v4 = (uint64_t)off_18972C978;
    icu::Locale::Locale((icu::Locale *)(v4 + 2), a1 + 16);
  }

  return v5;
}

char *sub_1809B5C14(uint64_t a1, char *__dst, int a3)
{
  uint64_t result = strncpy(__dst, *(const char **)(a1 + 56), a3);
  __dst[a3 - 1] = 0;
  return result;
}

BOOL sub_1809B5C4C(void *a1, void *a2)
{
  BOOL result = sub_18089E3E8(a1, a2);
  if (result) {
    return icu::Locale::operator==((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  }
  return result;
}

void ucol_prepareShortStringOpen(const char *a1, uint64_t a2, char *a3, UErrorCode *a4)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  if (a3) {
    unint64_t v6 = a3;
  }
  else {
    unint64_t v6 = &v21;
  }
  *(void *)unint64_t v6 = 0LL;
  *((_WORD *)v6 + 4) = 0;
  *((_WORD *)v6 + 20) = 0;
  bzero(v25, 0x670uLL);
  for (uint64_t i = 0LL; i != 384; i += 64LL)
  {
    unsigned int v8 = &v25[i];
    *(void *)unsigned int v8 = &v25[i + 13];
    *((_DWORD *)v8 + 2) = 40;
    *((_WORD *)v8 + 6) = 0;
    *((_DWORD *)v8 + 14) = 0;
  }

  uint64_t v9 = 0LL;
  uint64_t v26 = (char *)&v28 + 1;
  int v27 = 40;
  __int16 v28 = 0;
  int v29 = 0;
  char v35 = 0;
  __int128 v32 = 0u;
  memset(v33, 0, sizeof(v33));
  int v34 = 0;
  do
  {
    int v10 = &v25[v9];
    *((void *)v10 + 70) = &v36[v9];
    *((_DWORD *)v10 + 142) = 40;
    *((_WORD *)v10 + 286) = 0;
    *((_DWORD *)v10 + 154) = 0;
    v9 += 64LL;
  }

  while (v9 != 1088);
  *(void *)&__int128 v11 = -1LL;
  *((void *)&v11 + 1) = -1LL;
  __int128 v30 = v11;
  __int128 v31 = v11;
  sub_1809B5FC0((uint64_t)v25, a1, (uint64_t)v6, a4);
  sub_1809B6130((icu::CharString *)v25, a4);
  memset(&v24[1], 0, 56);
  v24[0] = (char *)&v24[1] + 5;
  LODWORD(v24[1]) = 40;
  v22[0] = 0LL;
  v22[1] = 0LL;
  icu::CharStringByteSink::CharStringByteSink(v22, (uint64_t)v24);
  ulocimp_canonicalize(v26);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v22);
  uint64_t v12 = ures_open("icudt74l-coll", (char *)v24[0], (int *)a4);
  uint64_t v13 = ures_getByKey(v12, "collations", 0LL, (int *)a4);
  memset(&v22[1], 0, 48);
  v22[0] = (char *)&v22[1] + 5;
  LODWORD(v22[1]) = 40;
  uint64_t v23 = 0LL;
  v20[0] = 0LL;
  v20[1] = 0LL;
  icu::CharStringByteSink::CharStringByteSink(v20, (uint64_t)v22);
  ulocimp_getKeywordValue((char *)v24[0], "collation", (uint64_t)v20, (int *)a4);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v20);
  if (!(_DWORD)v23)
  {
    uint64_t v15 = ures_getByKeyWithFallback(v13, "default", 0LL, a4);
    if (*(int *)a4 >= 1)
    {
      *a4 = U_INTERNAL_PROGRAM_ERROR;
      goto LABEL_13;
    }

    uint64_t v18 = v15;
    LODWORD(v20[0]) = 0;
    String = (UChar *)ures_getString(v15, (int *)v20, (int *)a4);
    icu::CharString::appendInvariantChars((int *)v22, String, v20[0], a4);
    ures_close(v18);
  }

  uint64_t v14 = ures_getByKeyWithFallback(v13, (char *)v22[0], 0LL, a4);
  ures_close(v14);
  ures_close(v13);
  ures_close(v12);
LABEL_13:
  if (BYTE4(v22[1])) {
    uprv_free(v22[0]);
  }
  if (BYTE4(v24[1])) {
    uprv_free(v24[0]);
  }
  uint64_t v16 = 68LL;
  do
  {
    if (BYTE12(v33[v16])) {
      uprv_free(*(void **)&v33[v16]);
    }
    v16 -= 4LL;
  }

  while (v16 * 16);
  if ((_BYTE)v28) {
    uprv_free(v26);
  }
  uint64_t v17 = 48LL;
  do
  {
    if (BYTE4(v24[v17 + 1])) {
      uprv_free(v24[v17]);
    }
    v17 -= 8LL;
  }

  while (v17 * 8);
}

const char *sub_1809B5FC0(uint64_t a1, const char *a2, uint64_t a3, UErrorCode *a4)
{
  int v4 = (int)a2;
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v5 = a2;
  if (*(int *)a4 > 0)
  {
LABEL_14:
    *(_DWORD *)(a3 + 4) = (_DWORD)v5 - v4;
  }

  else
  {
    int v8 = *(unsigned __int8 *)a2;
    uint64_t v5 = a2;
    while (v8)
    {
      uint64_t v9 = -560LL;
      int v10 = &dword_18972C9F8;
      while (v8 != *((unsigned __int8 *)v10 - 16))
      {
        v9 -= 64LL;
        v10 += 6;
        if (v9 == -1648)
        {
          *a4 = U_ILLEGAL_ARGUMENT_ERROR;
          goto LABEL_11;
        }
      }

      uint64_t v11 = (*((uint64_t (**)(uint64_t, void, const char *, UErrorCode *))v10 - 1))( a1,  *v10,  v5 + 1,  a4);
      uint64_t v15 = (char *)&v17 + 1;
      int v16 = 40;
      __int16 v17 = 0;
      int v18 = 0;
      icu::CharString::append((icu::CharString *)&v15, v5, v11 - (_DWORD)v5, a4);
      icu::CharString::copyFrom((const void **)(a1 - v9), (const void **)&v15, a4);
      if ((_BYTE)v17) {
        uprv_free(v15);
      }
      uint64_t v5 = (const char *)v11;
LABEL_11:
      --v5;
      do
      {
        int v12 = *(unsigned __int8 *)++v5;
        int v8 = v12;
      }

      while (v12 == 95);
    }
  }

  return v5;
}

icu::CharString *sub_1809B6130(icu::CharString *result, UErrorCode *a2)
{
  if (*((_DWORD *)result + 110)) {
    return result;
  }
  unsigned int v3 = result;
  int v4 = (icu::CharString *)((char *)result + 384);
  BOOL result = icu::CharString::append( (icu::CharString *)((char *)result + 384),  *(const char **)result,  *((_DWORD *)result + 14),  a2);
  if (*((_DWORD *)v3 + 30))
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)&v17, "_");
    icu::CharString::append(v4, v17, v18, a2);
    BOOL result = icu::CharString::append(v4, *((const char **)v3 + 8), *((_DWORD *)v3 + 30), a2);
  }

  if (*((_DWORD *)v3 + 46))
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)&v15, "_");
    icu::CharString::append(v4, v15, v16, a2);
    uint64_t v5 = (char *)*((void *)v3 + 16);
    int v6 = *((_DWORD *)v3 + 46);
LABEL_8:
    BOOL result = icu::CharString::append(v4, v5, v6, a2);
    goto LABEL_9;
  }

  if (*((_DWORD *)v3 + 62))
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)&v13, "_");
    uint64_t v5 = v13;
    int v6 = v14;
    goto LABEL_8;
  }

icu::RuleBasedCollator *ucol_openFromShortString(const char *a1, int a2, char *a3, UErrorCode *a4)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  if (a3) {
    int v8 = a3;
  }
  else {
    int v8 = &v23;
  }
  *(void *)int v8 = 0LL;
  *((_WORD *)v8 + 4) = 0;
  *((_WORD *)v8 + 20) = 0;
  bzero(v25, 0x670uLL);
  for (uint64_t i = 0LL; i != 384; i += 64LL)
  {
    int v10 = &v25[i];
    *(void *)int v10 = &v25[i + 13];
    *((_DWORD *)v10 + 2) = 40;
    *((_WORD *)v10 + 6) = 0;
    *((_DWORD *)v10 + 14) = 0;
  }

  uint64_t v11 = 0LL;
  uint64_t v26 = (char *)&v28 + 1;
  int v27 = 40;
  __int16 v28 = 0;
  int v29 = 0;
  char v36 = 0;
  __int128 v32 = 0u;
  memset(v33, 0, sizeof(v33));
  int v34 = 0;
  do
  {
    int v12 = &v25[v11];
    *((void *)v12 + 70) = &v37[v11];
    *((_DWORD *)v12 + 142) = 40;
    *((_WORD *)v12 + 286) = 0;
    *((_DWORD *)v12 + 154) = 0;
    v11 += 64LL;
  }

  while (v11 != 1088);
  *(void *)&__int128 v13 = -1LL;
  *((void *)&v13 + 1) = -1LL;
  __int128 v30 = v13;
  __int128 v31 = v13;
  unsigned int v14 = sub_1809B5FC0((uint64_t)v25, a1, (uint64_t)v8, a4);
  sub_1809B6130((icu::CharString *)v25, a4);
  memset(&v24[1], 0, 56);
  v24[0] = (char *)&v24[1] + 5;
  LODWORD(v24[1]) = 40;
  v22[0] = 0LL;
  v22[1] = 0LL;
  icu::CharStringByteSink::CharStringByteSink(v22, (uint64_t)v24);
  ulocimp_canonicalize(v26);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v22);
  int v4 = ucol_open(v24[0], (const icu::Locale *)a4);
  for (uint64_t j = 0LL; j != 8; ++j)
  {
    int v16 = &v25[4 * j];
    uint64_t v17 = *((unsigned int *)v16 + 112);
    if ((_DWORD)v17 != -1)
    {
      if (a2
        || (int Attribute = ucol_getAttribute((uint64_t)v4, j, (int *)a4),
            uint64_t v17 = *((unsigned int *)v16 + 112),
            Attribute != (_DWORD)v17))
      {
        ucol_setAttribute((uint64_t)v4, j, v17, (int *)a4);
      }

      if (*(int *)a4 >= 1)
      {
        *((_DWORD *)v8 + 1) = v14 - (_DWORD)a1;
LABEL_23:
        ucol_close((uint64_t)v4);
        int v4 = 0LL;
        goto LABEL_24;
      }
    }
  }

  if (v36)
  {
    if (WORD2(v32)) {
      ucol_setVariableTop((uint64_t)v4, (uint64_t)&v32 + 4, v35, (int *)a4);
    }
    else {
      ucol_restoreVariableTop((uint64_t)v4, v32, (int *)a4);
    }
  }

uint64_t ucol_getShortDefinitionString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  if (*a5 > 0) {
    return 0LL;
  }
  if (!a1)
  {
    *a5 = 1;
    return 0LL;
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 288LL))(a1);
}

uint64_t ucol_normalizeShortDefinitionString(const char *a1, char *a2, int a3, _BYTE *a4, UErrorCode *a5)
{
  uint64_t v44 = *MEMORY[0x1895F89C0];
  if (a2) {
    bzero(a2, a3);
  }
  bzero(v32, 0x670uLL);
  for (uint64_t i = 0LL; i != 384; i += 64LL)
  {
    int v12 = &v32[i];
    *(void *)int v12 = &v32[i + 13];
    *((_DWORD *)v12 + 2) = 40;
    *((_WORD *)v12 + 6) = 0;
    *((_DWORD *)v12 + 14) = 0;
  }

  uint64_t v13 = 0LL;
  uint64_t v33 = (char *)&v35 + 1;
  int v34 = 40;
  __int16 v35 = 0;
  int v36 = 0;
  char v42 = 0;
  __int128 v39 = 0u;
  memset(v40, 0, sizeof(v40));
  int v41 = 0;
  do
  {
    unsigned int v14 = &v32[v13];
    *((void *)v14 + 70) = &v43[v13];
    *((_DWORD *)v14 + 142) = 40;
    *((_WORD *)v14 + 286) = 0;
    *((_DWORD *)v14 + 154) = 0;
    v13 += 64LL;
  }

  while (v13 != 1088);
  if (a4) {
    uint64_t v15 = a4;
  }
  else {
    uint64_t v15 = v31;
  }
  *(void *)&__int128 v16 = -1LL;
  *((void *)&v16 + 1) = -1LL;
  __int128 v37 = v16;
  __int128 v38 = v16;
  sub_1809B5FC0((uint64_t)v32, a1, (uint64_t)v15, a5);
  if (*(int *)a5 <= 0)
  {
    uint64_t v20 = 0LL;
    uint64_t v5 = 0LL;
    do
    {
      char v21 = &v32[64 * v20];
      int v22 = *((_DWORD *)v21 + 154);
      if (v22)
      {
        if ((_DWORD)v5)
        {
          int v23 = v5 + 1;
        }

        else
        {
          int v23 = 0;
        }

        int v24 = v21 + 560;
        unsigned int v25 = **((unsigned __int8 **)v21 + 70) - 75;
        BOOL v26 = v25 > 0xB;
        int v27 = (1 << v25) & 0x883;
        if (v26 || v27 == 0)
        {
          uint64_t v5 = icu::CharString::extract((char **)v21 + 70, &a2[v23], a3 - v23, a5) + v23;
        }

        else
        {
          if (v22 >= 1)
          {
            uint64_t v29 = 0LL;
            __int128 v30 = (int *)(v21 + 616);
            do
            {
              if (v23 + v29 < a3)
              {
                a2[v23 + v29] = uprv_toupper(*(char *)(*v24 + v29));
                int v22 = *v30;
              }

              ++v29;
            }

            while (v29 < v22);
          }

          uint64_t v5 = (v22 + v23);
        }
      }

      ++v20;
    }

    while (v20 != 17);
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  uint64_t v17 = 68LL;
  do
  {
    if (BYTE12(v40[v17])) {
      uprv_free(*(void **)&v40[v17]);
    }
    v17 -= 4LL;
  }

  while (v17 * 16);
  if ((_BYTE)v35) {
    uprv_free(v33);
  }
  uint64_t v18 = 384LL;
  do
  {
    if (v31[v18 + 20]) {
      uprv_free(*(void **)&v31[v18 + 8]);
    }
    v18 -= 64LL;
  }

  while (v18);
  return v5;
}

uint64_t ucol_getContractions(void *a1, icu::UnicodeSet *a2, UErrorCode *a3)
{
  return uset_getItemCount(a2);
}

void *ucol_getContractionsAndExpansions( void *this, icu::UnicodeSet *a2, icu::UnicodeSet *a3, char a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    if (!this)
    {
      UErrorCode v5 = U_ILLEGAL_ARGUMENT_ERROR;
      goto LABEL_6;
    }

    if (*(void (***)(icu::RuleBasedCollator *__hidden))this != off_18972A990)
    {
      UErrorCode v5 = U_UNSUPPORTED_ERROR;
LABEL_6:
      *a5 = v5;
      return this;
    }

    return icu::RuleBasedCollator::internalGetContractionsAndExpansions(this, a2, a3, a4, a5);
  }

  return this;
}

_BYTE *sub_1809B694C(uint64_t a1, unsigned int a2, _BYTE *a3, int *a4)
{
  uint64_t v4 = 0LL;
  while (byte_180A3DD54[v4] != *a3)
  {
    v4 += 8LL;
    if (v4 == 96)
    {
      *a4 = 1;
      int v5 = -1;
      goto LABEL_6;
    }
  }

  int v5 = *(_DWORD *)&byte_180A3DD54[v4 + 4];
LABEL_6:
  *(_DWORD *)(a1 + 4LL * a2 + 448) = v5;
  int v8 = a3[1];
  int v6 = a3 + 1;
  int v7 = v8;
  BOOL v9 = v8 == 95 || v7 == 0;
  if (!v9 || *a4 >= 1) {
    *a4 = 1;
  }
  return v6;
}

char *sub_1809B69C0(uint64_t a1, int a2, char *a3, int *a4)
{
  int v12 = a3;
  if (a2)
  {
    *(_DWORD *)(a1 + 480) = sub_1809B6C30(&v12, a4);
    int v6 = *a4;
  }

  else
  {
    if (*a4 > 0)
    {
      *(_DWORD *)(a1 + 548) = 0;
      return v12;
    }

    unint64_t v7 = 0LL;
    do
    {
      if (!*v12 || *v12 == 95)
      {
        *(_DWORD *)(a1 + 548) = v7;
        goto LABEL_20;
      }

      __int16 v8 = sub_1809B6C30(&v12, a4);
      int v9 = v7 + 1;
      *(_WORD *)(a1 + 484 + 2 * v7) = v8;
      int v6 = *a4;
    }

    while (*a4 <= 0 && v7++ < 0x1F);
    *(_DWORD *)(a1 + 548) = v9;
    if (v9 == 32 && *v12 && *v12 != 95)
    {
      *a4 = 15;
      return v12;
    }
  }

  if (v6 <= 0) {
LABEL_20:
  }
    *(_BYTE *)(a1 + 552) = 1;
  return v12;
}

_BYTE *sub_1809B6AAC(uint64_t a1, unsigned int a2, uint64_t a3, UErrorCode *a4)
{
  int v6 = (icu::CharString *)(a1 + ((unint64_t)a2 << 6));
  unint64_t v7 = (_BYTE *)(a3 + 1);
  do
  {
    __int16 v8 = v7;
    if (a2 <= 5 && ((1 << a2) & 0x31) != 0) {
      char v9 = uprv_asciitolower((char)*(v7 - 1));
    }
    else {
      char v9 = *(v7 - 1);
    }
    icu::CharString::append(v6, v9, a4);
    if (!*v8) {
      break;
    }
    if (*v8 == 95) {
      break;
    }
    unint64_t v7 = v8 + 1;
  }

  while (*(int *)a4 < 1);
  return v8;
}

const char *sub_1809B6B4C(uint64_t a1, int a2, char *__s, UErrorCode *a4)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  int v6 = __s + 1;
  unint64_t v7 = strchr(__s + 2, *__s);
  if (v7 && (__int16 v8 = v7, v7 - v6 < 256))
  {
    int v10 = (char *)&v12 + 1;
    int v11 = 40;
    __int16 v12 = 0;
    int v13 = 0;
    icu::CharString::append((icu::CharString *)&v10, v6, (_DWORD)v7 - (_DWORD)v6, a4);
    icu::CharString::copyFrom((const void **)(a1 + 384), (const void **)&v10, a4);
    if ((_BYTE)v12) {
      uprv_free(v10);
    }
    return v8 + 1;
  }

  else
  {
    *a4 = U_BUFFER_OVERFLOW_ERROR;
  }

  return v6;
}

uint64_t sub_1809B6C30(char **a1, _DWORD *a2)
{
  char v2 = **a1;
  if (!v2)
  {
LABEL_16:
    unsigned __int16 v4 = 0;
LABEL_17:
    *a2 = 1;
    return v4;
  }

  uint64_t v3 = 0LL;
  unsigned __int16 v4 = 0;
  uint64_t v5 = (uint64_t)(*a1 + 1);
  do
  {
    uint64_t v6 = v3;
    __int16 v7 = v2;
    if ((v2 - 48) >= 0xAu)
    {
      if ((v2 - 97) >= 6)
      {
        __int16 v8 = -55;
      }

      else
      {
        __int16 v8 = -87;
      }
    }

    else
    {
      __int16 v8 = -48;
    }

    unsigned __int16 v4 = (v8 + v7) | (16 * v4);
    *a1 = (char *)(v5 + v6);
    char v2 = *(_BYTE *)(v5 + v6);
    uint64_t v3 = v6 + 1;
    if (v2) {
      BOOL v9 = v6 >= 3;
    }
    else {
      BOOL v9 = 1;
    }
  }

  while (!v9);
  return v4;
}

void sub_1809B6CD4(uint64_t a1, int a2, int a3, int a4, int *a5)
{
  if (*a5 <= 0)
  {
    int v9 = *(_DWORD *)(a1 + 200);
    int v10 = *(_DWORD *)(a1 + 204);
    if (v9 < v10)
    {
      int v11 = *(char **)(a1 + 192);
LABEL_8:
      __int128 v16 = &v11[12 * v9];
      *(_DWORD *)__int128 v16 = a2;
      *((_DWORD *)v16 + 1) = a3;
      *((_DWORD *)v16 + 2) = a4;
      *(_DWORD *)(a1 + 200) = v9 + 1;
      return;
    }

    int v13 = (char *)uprv_malloc(12LL * v10 + 96);
    if (v13)
    {
      int v11 = v13;
      uint64_t v14 = *(void **)(a1 + 192);
      uint64_t v15 = *(int *)(a1 + 204);
      memcpy(v13, v14, 12 * v15);
      if (v14 != (void *)a1)
      {
        uprv_free(v14);
        LODWORD(v15) = *(_DWORD *)(a1 + 204);
      }

      *(void *)(a1 + 192) = v11;
      *(_DWORD *)(a1 + 204) = v15 + 8;
      int v9 = *(_DWORD *)(a1 + 200);
      goto LABEL_8;
    }

    *a5 = 7;
  }

void sub_1809B6DB4(uint64_t a1, uint64_t a2, int a3, int a4, int *a5)
{
  if (*a5 <= 0)
  {
    int v9 = *(_DWORD *)(a1 + 264);
    int v10 = *(_DWORD *)(a1 + 268);
    if (v9 < v10)
    {
      int v11 = *(char **)(a1 + 256);
LABEL_8:
      __int128 v16 = &v11[16 * v9];
      *(void *)__int128 v16 = a2;
      *((_DWORD *)v16 + 2) = a3;
      *((_DWORD *)v16 + 3) = a4;
      *(_DWORD *)(a1 + 264) = v9 + 1;
      return;
    }

    int v13 = (char *)uprv_malloc(16LL * (v10 + 8));
    if (v13)
    {
      int v11 = v13;
      uint64_t v14 = *(void **)(a1 + 256);
      uint64_t v15 = *(int *)(a1 + 268);
      memcpy(v13, v14, 16 * v15);
      if (v14 != (void *)a1)
      {
        uprv_free(v14);
        LODWORD(v15) = *(_DWORD *)(a1 + 268);
      }

      *(void *)(a1 + 256) = v11;
      *(_DWORD *)(a1 + 268) = v15 + 8;
      int v9 = *(_DWORD *)(a1 + 264);
      goto LABEL_8;
    }

    *a5 = 7;
  }

uint64_t sub_1809B6E88(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 272) = a2;
  return sub_1809B6ED0(a1, *(void *)(a2 + 16));
}

void *sub_1809B6E94(void *a1, uint64_t a2)
{
  a1[32] = a1;
  a1[33] = 0x1000000000LL;
  a1[34] = a2;
  sub_1809B6ED0((uint64_t)a1, *(void *)(a2 + 16));
  return a1;
}

uint64_t sub_1809B6ED0(uint64_t a1, uint64_t a2)
{
  int v5 = 0;
  *(_DWORD *)(a1 + 280) = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a2 + 192LL))(a2, 5LL, &v5);
  *(_BYTE *)(a1 + 284) = (*(unsigned int (**)(uint64_t, uint64_t, int *))(*(void *)a2 + 192LL))(a2, 1LL, &v5) == 20;
  *(_BYTE *)(a1 + 285) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, int *))(*(void *)a2 + 240LL))(a2, &v5);
  *(_DWORD *)(a1 + 288) = result;
  return result;
}

void *sub_1809B6F58(void *a1)
{
  char v2 = (void *)a1[32];
  if (v2 != a1) {
    uprv_free(v2);
  }
  return a1;
}

uint64_t sub_1809B6F88(uint64_t a1, unsigned int a2)
{
  int v2 = *(_DWORD *)(a1 + 280);
  if (v2 == 1) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = a2;
  }
  uint64_t v4 = BYTE1(a2);
  if (!v2)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 280);
    uint64_t v3 = v4;
  }

  uint64_t v5 = HIWORD(a2);
  if (*(_BYTE *)(a1 + 284) && a2 >= 0x10000 && *(_DWORD *)(a1 + 288) > a2)
  {
    uint64_t v6 = 0LL;
    uint64_t v4 = 0LL;
    uint64_t v3 = 0LL;
    if (v2 <= 2) {
      uint64_t v7 = 0LL;
    }
    else {
      uint64_t v7 = HIWORD(a2);
    }
    *(_BYTE *)(a1 + 285) = 1;
  }

  else
  {
    if (!(_DWORD)v5 && *(_BYTE *)(a1 + 285)) {
      return 0LL;
    }
    BOOL v9 = v2 <= 2;
    uint64_t v7 = 0xFFFFLL;
    if (v9) {
      uint64_t v7 = 0LL;
    }
    *(_BYTE *)(a1 + 285) = 0;
    uint64_t v6 = v5 << 48;
  }

  return v6 | (v4 << 32) | (v3 << 16) | v7;
}

uint64_t ucol_tertiaryOrder(uint64_t result)
{
  return result;
}

uint64_t ucol_secondaryOrder(__int16 a1)
{
  return HIBYTE(a1);
}

uint64_t ucol_primaryOrder(unsigned int a1)
{
  return HIWORD(a1);
}

icu::CollationElementIterator *ucol_openElements( icu::RuleBasedCollator *a1, uint64_t a2, unsigned int a3, int *a4)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  if (*a4 > 0) {
    return 0LL;
  }
  if (!a1 || !a2 && a3)
  {
    CollationElementIterator = 0LL;
    int v7 = 1;
LABEL_9:
    *a4 = v7;
    return CollationElementIterator;
  }

  if (*(void (***)(icu::RuleBasedCollator *__hidden))a1 != off_18972A990)
  {
    CollationElementIterator = 0LL;
    int v7 = 16;
    goto LABEL_9;
  }

  memset(v11, 0, sizeof(v11));
  uint64_t v10 = a2;
  icu::UnicodeString::UnicodeString(v11, a3 >> 31, &v10);
  CollationElementIterator = icu::RuleBasedCollator::createCollationElementIterator(a1, (UChar **)v11);
  if (!CollationElementIterator)
  {
    uint64_t v9 = 7LL;
    *a4 = 7;
  }

  icu::UnicodeString::~UnicodeString((void *)v9, (icu::UnicodeString *)v11);
  return CollationElementIterator;
}

void ucol_closeElements(icu::CollationElementIterator *a1)
{
  if (a1)
  {
    icu::CollationElementIterator::~CollationElementIterator(a1);
    icu::UMemory::operator delete(v1);
  }

uint64_t ucol_next(icu::CollationElementIterator *a1, UErrorCode *a2)
{
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t ucol_nextProcessed(uint64_t a1, _DWORD *a2, _DWORD *a3, UErrorCode *a4)
{
  int v11 = v10;
  uint64_t v12 = 0x1000000000LL;
  uint64_t v13 = a1;
  uint64_t v7 = *(void *)(a1 + 16);
  int v18 = 0;
  int v14 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)v7 + 192LL))(v7, 5LL, &v18);
  BOOL v15 = (*(unsigned int (**)(uint64_t, uint64_t, int *))(*(void *)v7 + 192LL))(v7, 1LL, &v18) == 20;
  char v16 = 0;
  int v17 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v7 + 240LL))(v7, &v18);
  uint64_t v8 = sub_1809B7258((uint64_t)v10, a2, a3, a4);
  if (v11 != v10) {
    uprv_free(v11);
  }
  return v8;
}

uint64_t sub_1809B7258(uint64_t a1, _DWORD *a2, _DWORD *a3, UErrorCode *a4)
{
  *(_DWORD *)(a1 + 264) = 0;
  while (1)
  {
    int Offset = icu::CollationElementIterator::getOffset(*(icu::CollationElementIterator **)(a1 + 272));
    unsigned int v10 = icu::CollationElementIterator::next(*(icu::CollationElementIterator **)(a1 + 272), a4);
    int v11 = icu::CollationElementIterator::getOffset(*(icu::CollationElementIterator **)(a1 + 272));
    if (v10 == -1) {
      break;
    }
    uint64_t result = sub_1809B6F88(a1, v10);
    if (result)
    {
      if (!a2) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }

  uint64_t result = 0x7FFFFFFFFFFFFFFFLL;
  if (a2) {
LABEL_7:
  }
    *a2 = Offset;
LABEL_8:
  if (a3) {
    *a3 = v11;
  }
  return result;
}

uint64_t ucol_previous(icu::CollationElementIterator *a1, UErrorCode *a2)
{
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t ucol_previousProcessed(uint64_t a1, _DWORD *a2, _DWORD *a3, UErrorCode *a4)
{
  int v11 = v10;
  uint64_t v12 = 0x1000000000LL;
  uint64_t v13 = a1;
  uint64_t v7 = *(void *)(a1 + 16);
  int v18 = 0;
  int v14 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)v7 + 192LL))(v7, 5LL, &v18);
  BOOL v15 = (*(unsigned int (**)(uint64_t, uint64_t, int *))(*(void *)v7 + 192LL))(v7, 1LL, &v18) == 20;
  char v16 = 0;
  int v17 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v7 + 240LL))(v7, &v18);
  uint64_t v8 = sub_1809B7408((uint64_t)v10, a2, a3, a4);
  if (v11 != v10) {
    uprv_free(v11);
  }
  return v8;
}

uint64_t sub_1809B7408(uint64_t a1, _DWORD *a2, _DWORD *a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    do
    {
      int v9 = *(_DWORD *)(a1 + 264);
      if (v9 > 0) {
        goto LABEL_28;
      }
      memset(v22, 0, sizeof(v22));
      int v23 = v22;
      uint64_t v24 = 0x1000000000LL;
      while (1)
      {
        int Offset = icu::CollationElementIterator::getOffset(*(icu::CollationElementIterator **)(a1 + 272));
        unsigned int v11 = icu::CollationElementIterator::previous(*(icu::CollationElementIterator **)(a1 + 272), a4);
        int v12 = icu::CollationElementIterator::getOffset(*(icu::CollationElementIterator **)(a1 + 272));
        if (v11 == -1) {
          break;
        }
        sub_1809B6CD4((uint64_t)v22, v11, v12, Offset, (int *)a4);
        UErrorCode v13 = *a4;
        if (v11 >= 0x10000 && (v11 & 0xC0) != 0xC0) {
          goto LABEL_9;
        }
      }

      if ((int)v24 > 0)
      {
        UErrorCode v13 = *a4;
        if (*(int *)a4 <= 0)
        {
LABEL_9:
          int v14 = v24;
          if ((int)v24 >= 1)
          {
            do
            {
              BOOL v15 = v23;
              int v16 = v14 - 1;
              LODWORD(v24) = v14 - 1;
              uint64_t v17 = sub_1809B6F88(a1, v23[3 * (v14 - 1)]);
              if (v17) {
                sub_1809B6DB4(a1, v17, v15[3 * v16 + 1], v15[3 * v16 + 2], (int *)a4);
              }
              UErrorCode v13 = *a4;
              int v14 = v24;
            }

            while (*(int *)a4 <= 0 && (int)v24 > 0);
          }
        }

uint64_t *ucol_setText(uint64_t *result, uint64_t a2, unsigned int a3, UErrorCode *a4)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  if (*(int *)a4 <= 0)
  {
    uint64_t v5 = result;
    if (a2 || !a3)
    {
      memset(v8, 0, sizeof(v8));
      uint64_t v7 = a2;
      icu::UnicodeString::UnicodeString(v8, a3 >> 31, &v7);
      icu::CollationElementIterator::setText(v5, (UChar **)v8, a4);
      return (uint64_t *)icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v8);
    }

    else
    {
      *a4 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }

  return result;
}

unint64_t ucol_setOffset(unint64_t this, uint64_t a2, UErrorCode *a3)
{
  return this;
}

uint64_t **ucsdet_open(int *a1, unint64_t a2)
{
  int v2 = (uint64_t *)*a1;
  uint64_t result = (uint64_t **)icu::UMemory::operator new(v2, (icu::UMemory *)0x20, a2);
  if (result)
  {
    uint64_t result = sub_1808BD54C(result, a1, v5);
    if (*a1 >= 1)
    {
      uint64_t v6 = (void *)sub_1808BD5E4((uint64_t)result);
      icu::UMemory::operator delete(v6);
      return 0LL;
    }
  }

  return result;
}

void ucsdet_close(uint64_t a1)
{
  if (a1)
  {
    int v1 = (void *)sub_1808BD5E4(a1);
    icu::UMemory::operator delete(v1);
  }

uint64_t ucsdet_setText(uint64_t a1, char *a2, int a3, int *a4)
{
  if (*a4 <= 0) {
    return sub_1808BD5E8(a1, a2, a3);
  }
  return a1;
}

uint64_t ucsdet_getName(uint64_t a1, int *a2)
{
  if (*a2 <= 0) {
    return sub_1808BDDC8(a1);
  }
  else {
    return 0LL;
  }
}

uint64_t ucsdet_getConfidence(uint64_t a1, int *a2)
{
  if (*a2 <= 0) {
    return sub_1808BDDD8(a1);
  }
  else {
    return 0LL;
  }
}

uint64_t ucsdet_getLanguage(uint64_t a1, int *a2)
{
  if (*a2 <= 0) {
    return sub_1808BDDD0(a1);
  }
  else {
    return 0LL;
  }
}

uint64_t ucsdet_detect(uint64_t a1, int *a2)
{
  if (*a2 <= 0) {
    return sub_1808BD63C(a1, a2);
  }
  else {
    return 0LL;
  }
}

char **ucsdet_setDeclaredEncoding(char **a1, char *a2, int a3, int *a4)
{
  if (*a4 <= 0) {
    return (char **)sub_1808BD634(a1, a2, a3);
  }
  return a1;
}

uint64_t ucsdet_detectAll(void *a1, _DWORD *a2, int *a3)
{
  if (*a3 <= 0) {
    return sub_1808BD68C(a1, a2, a3);
  }
  else {
    return 0LL;
  }
}

uint64_t ucsdet_isInputFilterEnabled(uint64_t a1)
{
  if (a1) {
    return sub_1808BD62C(a1);
  }
  return a1;
}

uint64_t ucsdet_enableInputFilter(uint64_t result, char a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = sub_1808BD62C(result);
    sub_1808BD614(v3, a2);
    return v4;
  }

  return result;
}

uint64_t ucsdet_getUChars(unsigned __int8 **a1, unint64_t a2, int a3, UErrorCode *a4)
{
  else {
    return 0LL;
  }
}

void *ucsdet_getAllDetectableCharsets(uint64_t a1, int *a2)
{
  return sub_1808BD8F4(a2);
}

uint64_t udat_toCalendarDateField(unsigned int a1)
{
  if (a1 > 0x25) {
    return 24LL;
  }
  else {
    return dword_180A3DE0C[a1];
  }
}

uint64_t udat_patternCharToDateFormatField(icu::DateFormatSymbols *a1)
{
  UChar v1 = (unsigned __int16)a1;
  PatternUChars = icu::DateFormatSymbols::getPatternUChars(a1);
  uint64_t v3 = u_strchr((const UChar *)PatternUChars, v1);
  if (v3) {
    return ((unint64_t)((char *)v3 - (char *)PatternUChars) >> 1);
  }
  else {
    return 38LL;
  }
}

void udat_registerOpener(void *a1, int *a2)
{
  if (*a2 <= 0)
  {
    umtx_lock(0LL);
    if (off_18C535D30) {
      *a2 = 1;
    }
    else {
      off_18C535D30 = a1;
    }
    umtx_unlock(0LL);
  }

void *udat_unregisterOpener(void *a1, int *a2)
{
  if (*a2 > 0) {
    return 0LL;
  }
  int v2 = a1;
  umtx_lock(0LL);
  if (off_18C535D30) {
    BOOL v4 = off_18C535D30 == v2;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    off_18C535D30 = 0LL;
  }

  else
  {
    int v2 = 0LL;
    *a2 = 1;
  }

  umtx_unlock(0LL);
  return v2;
}

icu::SimpleDateFormat *udat_open( icu::Locale *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, UErrorCode *a8)
{
  v30[28] = *(UChar **)MEMORY[0x1895F89C0];
  int v11 = a7;
  int v13 = a5;
  int v16 = a2;
  uint64_t v17 = (uint64_t)a1;
  int v18 = (uint64_t *)off_18C535D30;
  if (!off_18C535D30
    || (a1 = (icu::Locale *)off_18C535D30(a1, a2, a3, a4, a5, a6, a7, a8), (DateTimeuint64_t Instance = a1) == 0LL))
  {
    if ((_DWORD)v17 == -2)
    {
      memset(v29, 0, sizeof(v29));
      uint64_t v28 = a6;
      icu::UnicodeString::UnicodeString(v29, v11 == -1, &v28);
      uint64_t v26 = v28;
      uint64_t v20 = (icu::SimpleDateFormat *)icu::UMemory::operator new(&v26, (icu::UMemory *)0x340, v19);
      DateTimeuint64_t Instance = v20;
      if (a3)
      {
        if (v20)
        {
          icu::Locale::Locale(v21, (icu::Locale *)v30, a3, 0LL, 0LL, 0LL);
          icu::SimpleDateFormat::SimpleDateFormat( DateTimeInstance,  (const icu::UnicodeString *)v29,  (const icu::Locale *)v30,  a8);
          icu::Locale::~Locale((icu::Locale *)v30);
        }
      }

      else if (v20)
      {
        icu::SimpleDateFormat::SimpleDateFormat(v20, (const icu::UnicodeString *)v29, a8);
      }

      icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v29);
      if (DateTimeInstance) {
        goto LABEL_16;
      }
LABEL_22:
      *a8 = U_MEMORY_ALLOCATION_ERROR;
      return DateTimeInstance;
    }

    if (a3)
    {
      icu::Locale::Locale(v18, (icu::Locale *)v30, a3, 0LL, 0LL, 0LL);
      DateTimeuint64_t Instance = icu::DateFormat::createDateTimeInstance(v16, v17, (const icu::Locale *)v30);
      icu::Locale::~Locale((icu::Locale *)v30);
      if (!DateTimeInstance) {
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t Default = icu::Locale::getDefault(a1);
      DateTimeuint64_t Instance = icu::DateFormat::createDateTimeInstance(v16, v17, (const icu::Locale *)Default);
      if (!DateTimeInstance) {
        goto LABEL_22;
      }
    }

uint64_t udat_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t udat_clone(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 0LL;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
  if (!result) {
    *a2 = 7;
  }
  return result;
}

uint64_t udat_format(void *a1, char *a2, unsigned int a3, uint64_t a4, int *a5, double a6)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (*a5 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (!a2)
  {
    if (!a3)
    {
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      uint64_t v23 = 0LL;
      __int128 v22 = 0u;
      unint64_t v19 = off_18971B688;
      LOWORD(v20) = 2;
      goto LABEL_10;
    }

    goto LABEL_6;
  }

  if ((a3 & 0x80000000) != 0)
  {
LABEL_6:
    *a5 = 1;
    return 0xFFFFFFFFLL;
  }

  __int128 v20 = 0u;
  __int128 v21 = 0u;
  uint64_t v23 = 0LL;
  __int128 v22 = 0u;
  unint64_t v19 = off_18971B688;
  LOWORD(v20) = 2;
  icu::UnicodeString::setTo((icu::UnicodeString *)&v19, a2, 0, a3);
LABEL_10:
  uint64_t v17 = off_189723AC8;
  __int128 v18 = 0xFFFFFFFFuLL;
  if (a4)
  {
    LODWORD(v18) = *(_DWORD *)a4;
    icu::DateFormat::format(a1, (uint64_t)&v19, (uint64_t)&v17, a6);
    *(void *)(a4 + 4) = *(void *)((char *)&v18 + 4);
  }

  else
  {
    icu::DateFormat::format(a1, (uint64_t)&v19, (uint64_t)&v17, a6);
  }

  int v16 = (UChar *)a2;
  uint64_t v12 = icu::UnicodeString::extract((uint64_t)&v19, &v16, a3, a5);
  BOOL v15 = v16;
  icu::FieldPosition::~FieldPosition(&v15, (icu::FieldPosition *)&v17);
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v19);
  return v12;
}

uint64_t udat_formatCalendar(uint64_t a1, uint64_t a2, char *a3, unsigned int a4, uint64_t a5, int *a6)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (*a6 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (!a3)
  {
    if (!a4)
    {
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      uint64_t v23 = 0LL;
      __int128 v22 = 0u;
      unint64_t v19 = off_18971B688;
      LOWORD(v20) = 2;
      goto LABEL_10;
    }

    goto LABEL_6;
  }

  if ((a4 & 0x80000000) != 0)
  {
LABEL_6:
    *a6 = 1;
    return 0xFFFFFFFFLL;
  }

  __int128 v20 = 0u;
  __int128 v21 = 0u;
  uint64_t v23 = 0LL;
  __int128 v22 = 0u;
  unint64_t v19 = off_18971B688;
  LOWORD(v20) = 2;
  icu::UnicodeString::setTo((icu::UnicodeString *)&v19, a3, 0, a4);
LABEL_10:
  uint64_t v17 = off_189723AC8;
  __int128 v18 = 0xFFFFFFFFuLL;
  if (a5)
  {
    LODWORD(v18) = *(_DWORD *)a5;
    (*(void (**)(uint64_t, uint64_t, void (***)(icu::UnicodeString *__hidden), void (***)(icu::FieldPosition *__hidden)))(*(void *)a1 + 64LL))( a1,  a2,  &v19,  &v17);
    *(void *)(a5 + 4) = *(void *)((char *)&v18 + 4);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, void (***)(icu::UnicodeString *__hidden), void (***)(icu::FieldPosition *__hidden)))(*(void *)a1 + 64LL))( a1,  a2,  &v19,  &v17);
  }

  int v16 = (UChar *)a3;
  uint64_t v12 = icu::UnicodeString::extract((uint64_t)&v19, &v16, a4, a6);
  BOOL v15 = v16;
  icu::FieldPosition::~FieldPosition(&v15, (icu::FieldPosition *)&v17);
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v19);
  return v12;
}

uint64_t udat_formatForFields(void *a1, char *a2, unsigned int a3, uint64_t a4, UErrorCode *a5, double a6)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (*(int *)a5 <= 0)
  {
    if (a2)
    {
      if ((a3 & 0x80000000) == 0)
      {
        __int128 v17 = 0u;
        __int128 v18 = 0u;
        uint64_t v20 = 0LL;
        __int128 v19 = 0u;
        int v16 = off_18971B688;
        LOWORD(v17) = 2;
        icu::UnicodeString::setTo((icu::UnicodeString *)&v16, a2, 0, a3);
LABEL_10:
        icu::DateFormat::format(a1, (uint64_t)&v16, a4, a5, a6);
        BOOL v15 = (UChar *)a2;
        uint64_t v12 = icu::UnicodeString::extract((uint64_t)&v16, &v15, a3, (int *)a5);
        int v14 = v15;
        icu::UnicodeString::~UnicodeString(&v14, (icu::UnicodeString *)&v16);
        return v12;
      }
    }

    else if (!a3)
    {
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      uint64_t v20 = 0LL;
      __int128 v19 = 0u;
      int v16 = off_18971B688;
      LOWORD(v17) = 2;
      goto LABEL_10;
    }

    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
  }

  return 0xFFFFFFFFLL;
}

uint64_t udat_formatCalendarForFields(uint64_t a1, uint64_t a2, char *a3, unsigned int a4, uint64_t a5, int *a6)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (*a6 <= 0)
  {
    if (a3)
    {
      if ((a4 & 0x80000000) == 0)
      {
        __int128 v17 = 0u;
        __int128 v18 = 0u;
        uint64_t v20 = 0LL;
        __int128 v19 = 0u;
        int v16 = off_18971B688;
        LOWORD(v17) = 2;
        icu::UnicodeString::setTo((icu::UnicodeString *)&v16, a3, 0, a4);
LABEL_10:
        (*(void (**)(uint64_t, uint64_t, void (***)(icu::UnicodeString *__hidden), uint64_t, int *))(*(void *)a1 + 72LL))( a1,  a2,  &v16,  a5,  a6);
        BOOL v15 = (UChar *)a3;
        uint64_t v12 = icu::UnicodeString::extract((uint64_t)&v16, &v15, a4, a6);
        int v14 = v15;
        icu::UnicodeString::~UnicodeString(&v14, (icu::UnicodeString *)&v16);
        return v12;
      }
    }

    else if (!a4)
    {
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      uint64_t v20 = 0LL;
      __int128 v19 = 0u;
      int v16 = off_18971B688;
      LOWORD(v17) = 2;
      goto LABEL_10;
    }

    *a6 = 1;
  }

  return 0xFFFFFFFFLL;
}

double udat_parse(icu::DateFormat *a1, uint64_t a2, int a3, int *a4, int *a5)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  double v5 = 0.0;
  if (*a5 <= 0)
  {
    memset(v16, 0, sizeof(v16));
    uint64_t v15 = a2;
    icu::UnicodeString::UnicodeString(v16, a3 == -1, &v15);
    uint64_t v12 = off_18970F400;
    int v14 = -1;
    if (a4) {
      int v9 = *a4;
    }
    else {
      int v9 = 0;
    }
    int v13 = v9;
    double v5 = icu::DateFormat::parse(a1, (const icu::UnicodeString *)v16, (icu::ParsePosition *)&v12);
    if (v14 == -1)
    {
      if (a4) {
        *a4 = v13;
      }
    }

    else
    {
      if (a4) {
        *a4 = v14;
      }
      *a5 = 9;
    }

    icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v12);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v16);
  }

  return v5;
}

void udat_parseCalendar(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int *a5, int *a6)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (*a6 <= 0)
  {
    memset(v15, 0, sizeof(v15));
    uint64_t v14 = a3;
    icu::UnicodeString::UnicodeString(v15, a4 == -1, &v14);
    int v11 = off_18970F400;
    int v13 = -1;
    if (a5) {
      int v10 = *a5;
    }
    else {
      int v10 = 0;
    }
    int v12 = v10;
    (*(void (**)(uint64_t, _OWORD *, uint64_t, void (***)(icu::ParsePosition *__hidden)))(*(void *)a1 + 88LL))( a1,  v15,  a2,  &v11);
    if (v13 == -1)
    {
      if (a5) {
        *a5 = v12;
      }
    }

    else
    {
      if (a5) {
        *a5 = v13;
      }
      *a6 = 9;
    }

    icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v11);
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v15);
  }

uint64_t udat_isLenient(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96LL))(a1);
}

uint64_t udat_setLenient(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104LL))(a1);
}

uint64_t udat_getBooleanAttribute(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 <= 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 224LL))(a1);
  }
  else {
    return 0LL;
  }
}

uint64_t udat_setBooleanAttribute(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (*a4 <= 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 216LL))(result);
  }
  return result;
}

uint64_t udat_getCalendar(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128LL))(a1);
}

uint64_t udat_setCalendar(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144LL))(a1);
}

uint64_t udat_getNumberFormatForField(void *lpsrc, UChar a2)
{
  if (lpsrc
  {
    return icu::SimpleDateFormat::getNumberFormatForField((uint64_t)lpsrc, a2);
  }

  else
  {
    return (*(uint64_t (**)(void *))(*(void *)lpsrc + 152LL))(lpsrc);
  }

void *sub_1809B859C(void *result, int *a2)
{
  if (*a2 <= 0 {
    && (!result
  }
  {
    *a2 = 1;
  }

  return result;
}

uint64_t udat_getNumberFormat(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152LL))(a1);
}

void *udat_adoptNumberFormatForFields(void *a1, uint64_t a2, icu::NumberFormat *a3, int *a4)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  uint64_t result = sub_1809B859C(a1, a4);
  if (a2)
  {
    if (*a4 <= 0)
    {
      memset(v10, 0, sizeof(v10));
      icu::UnicodeString::UnicodeString((uint64_t)v10, a2);
      icu::SimpleDateFormat::adoptNumberFormat( (icu::SimpleDateFormat *)a1,  (const icu::UnicodeString *)v10,  a3,  (UErrorCode *)a4);
      return icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v10);
    }
  }

  return result;
}

uint64_t udat_setNumberFormat(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 168LL))(a1);
}

uint64_t udat_adoptNumberFormat(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160LL))(a1);
}

double udat_get2DigitYearStart(double *a1, int *a2)
{
  double result = 0.0;
  if (*a2 <= 0) {
    return a1[98];
  }
  return result;
}

void *udat_set2DigitYearStart(void *a1, int *a2, double a3)
{
  double result = sub_1809B859C(a1, a2);
  if (*a2 <= 0) {
    return (void *)(*(uint64_t (**)(void *, int *, double))(*(void *)a1 + 232LL))(a1, a2, a3);
  }
  return result;
}

uint64_t udat_toPattern(const void *a1, int a2, char *a3, unsigned int a4, int *a5)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (*a5 <= 0)
  {
    if (a3)
    {
      if ((a4 & 0x80000000) == 0)
      {
        __int128 v20 = 0u;
        __int128 v21 = 0u;
        uint64_t v23 = 0LL;
        __int128 v22 = 0u;
        __int128 v19 = off_18971B688;
        LOWORD(v20) = 2;
        icu::UnicodeString::setTo((icu::UnicodeString *)&v19, a3, 0, a4);
        if (!a1) {
          goto LABEL_16;
        }
        goto LABEL_11;
      }
    }

    else if (!a4)
    {
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      uint64_t v23 = 0LL;
      __int128 v22 = 0u;
      __int128 v19 = off_18971B688;
      LOWORD(v20) = 2;
      if (!a1)
      {
LABEL_16:
        uint64_t v15 = 1LL;
        *a5 = 1;
        uint64_t v10 = 0xFFFFFFFFLL;
LABEL_19:
        icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v19);
        return v10;
      }

void *udat_applyPattern(uint64_t *a1, int a2, uint64_t a3, int a4)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  memset(v12, 0, sizeof(v12));
  uint64_t v11 = a3;
  icu::UnicodeString::UnicodeString(v12, a4 == -1, &v11);
  uint64_t v9 = v11;
  uint64_t v6 = &v9;
  int v10 = 0;
  if (a1
  {
    uint64_t v7 = *a1;
    if (a2) {
      (*(void (**)(uint64_t *, _OWORD *, int *))(v7 + 264))(a1, v12, &v10);
    }
    else {
      (*(void (**)(uint64_t *, _OWORD *))(v7 + 256))(a1, v12);
    }
  }

  return icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v12);
}

uint64_t udat_getSymbols(const void *a1, unsigned int a2, signed int a3, char *a4, unsigned int a5, int *a6)
{
  v50[9] = *(const UChar **)MEMORY[0x1895F89C0];
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = (icu::DateFormatSymbols *)(*(uint64_t (**)(char *))(*(void *)v12 + 272LL))(v12);
    uint64_t v15 = (uint64_t *)(v13 + 824);
    goto LABEL_6;
  }

  if (!v16) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v17 = v16;
  uint64_t v14 = (icu::DateFormatSymbols *)(*(uint64_t (**)(char *))(*(void *)v16 + 264LL))(v16);
  uint64_t v15 = (uint64_t *)(v17 + 752);
LABEL_6:
  uint64_t v18 = *v15;
  int v48 = 0;
  switch(a2)
  {
    case 0u:
      uint64_t Eras = icu::DateFormatSymbols::getEras(v14, &v48);
      break;
    case 1u:
      uint64_t Eras = icu::DateFormatSymbols::getMonths(v14, &v48);
      break;
    case 2u:
      uint64_t Eras = icu::DateFormatSymbols::getShortMonths(v14, &v48);
      break;
    case 3u:
      uint64_t Eras = icu::DateFormatSymbols::getWeekdays(v14, &v48);
      break;
    case 4u:
      uint64_t Eras = icu::DateFormatSymbols::getShortWeekdays(v14, &v48);
      break;
    case 5u:
      uint64_t Eras = icu::DateFormatSymbols::getAmPmStrings(v14, &v48);
      break;
    case 6u:
      memset((char *)v49 + 8, 0, 56);
      *(void *)&v49[0] = off_18971B688;
      WORD4(v49[0]) = 2;
      if (a4 || a5) {
        icu::UnicodeString::setTo((icu::UnicodeString *)v49, a4, 0, a5);
      }
      icu::DateFormatSymbols::getLocalPatternChars((UChar **)v14, (UChar **)v49);
      uint64_t v47 = (UChar *)a4;
      uint64_t v20 = icu::UnicodeString::extract((uint64_t)v49, &v47, a5, a6);
      uint64_t v44 = v47;
      __int128 v31 = &v44;
      __int128 v32 = (icu::UnicodeString *)v49;
      goto LABEL_73;
    case 7u:
      uint64_t Eras = icu::DateFormatSymbols::getEraNames(v14, &v48);
      break;
    case 8u:
      uint64_t v23 = v14;
      int v24 = 0;
      goto LABEL_34;
    case 9u:
      __int128 v21 = v14;
      int v22 = 0;
      goto LABEL_22;
    case 0xAu:
      uint64_t v23 = v14;
      int v24 = 1;
      int v25 = 1;
      goto LABEL_36;
    case 0xBu:
      uint64_t v23 = v14;
      int v24 = 1;
      int v25 = 0;
      goto LABEL_36;
    case 0xCu:
      uint64_t v23 = v14;
      int v24 = 1;
LABEL_34:
      int v25 = 2;
LABEL_36:
      uint64_t Eras = icu::DateFormatSymbols::getMonths(v23, &v48, v24, v25);
      break;
    case 0xDu:
      __int128 v21 = v14;
      int v22 = 1;
      int v26 = 1;
      goto LABEL_46;
    case 0xEu:
      __int128 v21 = v14;
      int v22 = 1;
      int v26 = 0;
      goto LABEL_46;
    case 0xFu:
      __int128 v21 = v14;
      int v22 = 1;
LABEL_22:
      int v26 = 2;
      goto LABEL_46;
    case 0x10u:
      uint64_t v27 = v14;
      int v28 = 0;
      goto LABEL_40;
    case 0x11u:
      uint64_t v27 = v14;
      int v28 = 0;
      goto LABEL_42;
    case 0x12u:
      uint64_t v27 = v14;
      int v28 = 1;
LABEL_40:
      int v33 = 1;
      goto LABEL_55;
    case 0x13u:
      uint64_t v27 = v14;
      int v28 = 1;
LABEL_42:
      int v33 = 0;
      goto LABEL_55;
    case 0x14u:
      __int128 v21 = v14;
      int v22 = 0;
      goto LABEL_45;
    case 0x15u:
      __int128 v21 = v14;
      int v22 = 1;
LABEL_45:
      int v26 = 3;
LABEL_46:
      uint64_t Eras = icu::DateFormatSymbols::getWeekdays(v21, &v48, v22, v26);
      break;
    case 0x16u:
      uint64_t v29 = (uint64_t)v14;
      goto LABEL_49;
    case 0x17u:
      uint64_t v29 = (uint64_t)v14;
      goto LABEL_49;
    case 0x18u:
      uint64_t v29 = (uint64_t)v14;
LABEL_49:
      uint64_t Eras = icu::DateFormatSymbols::getYearNames(v29, &v48);
      break;
    case 0x19u:
      uint64_t v30 = (uint64_t)v14;
      goto LABEL_51;
    case 0x1Au:
      uint64_t v30 = (uint64_t)v14;
      goto LABEL_51;
    case 0x1Bu:
      uint64_t v30 = (uint64_t)v14;
LABEL_51:
      uint64_t Eras = icu::DateFormatSymbols::getZodiacNames(v30, &v48);
      break;
    case 0x1Cu:
      uint64_t v27 = v14;
      int v28 = 0;
      goto LABEL_54;
    case 0x1Du:
      uint64_t v27 = v14;
      int v28 = 1;
LABEL_54:
      int v33 = 2;
LABEL_55:
      uint64_t Eras = icu::DateFormatSymbols::getQuarters(v27, &v48, v28, v33);
      break;
    default:
      if (a2 == 128)
      {
        uint64_t Eras = icu::DateFormatSymbols::getZodiacNames((uint64_t)v14, &v48);
        if (a3 < 1) {
          a3 = 0;
        }
        else {
          a3 = (a3 - 1) % 0xCu;
        }
      }

      else
      {
        uint64_t Eras = 0LL;
      }

      break;
  }

  if (a3 >= v48) {
    return 0LL;
  }
  int v34 = (uint64_t *)a3;
  __int16 v35 = (icu::UnicodeString *)(Eras + ((uint64_t)a3 << 6));
  UChar32 v36 = icu::UnicodeString::char32At(v34, v35, 0);
  if (!u_islower(v36) || !v18) {
    goto LABEL_70;
  }
  int v37 = (*(uint64_t (**)(const void *, uint64_t, int *))(*(void *)a1 + 208LL))(a1, 1LL, a6);
  switch(v37)
  {
    case 258:
      goto LABEL_66;
    case 260:
      __int128 v38 = (char *)v14 + 2 * sub_1809B9050(a2) + 833;
      break;
    case 259:
      __int128 v38 = (char *)v14 + 2 * sub_1809B9050(a2) + 832;
      break;
    default:
LABEL_70:
      int32_t v45 = (UChar *)a4;
      return icu::UnicodeString::extract((uint64_t)v35, &v45, a5, a6);
  }

  if (!*v38) {
    goto LABEL_70;
  }
LABEL_66:
  memset(v50, 0, 64);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v50, (UChar **)v35);
  __int128 v39 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v18 + 32LL))(v18);
  if (!v39)
  {
LABEL_69:
    icu::UnicodeString::~UnicodeString(v40, (icu::UnicodeString *)v50);
    goto LABEL_70;
  }

  int v41 = (icu::BreakIterator *)v39;
  memset(v49, 0, sizeof(v49));
  icu::BreakIterator::getLocale(v39, 0, a6, (icu::Locale *)v49);
  if (*a6 >= 1)
  {
    (*(void (**)(icu::BreakIterator *))(*(void *)v41 + 8LL))(v41);
    ((void (*)(icu::Locale *__hidden))icu::Locale::~Locale)((icu::Locale *)v49);
    goto LABEL_69;
  }

  icu::UnicodeString::toTitle(v50, v41, (const icu::Locale *)v49, 768LL);
  (*(void (**)(icu::BreakIterator *))(*(void *)v41 + 8LL))(v41);
  uint64_t v46 = (UChar *)a4;
  uint64_t v20 = icu::UnicodeString::extract((uint64_t)v50, &v46, a5, a6);
  int v43 = v46;
  icu::Locale::~Locale(&v43, (icu::Locale *)v49);
  __int128 v32 = (icu::UnicodeString *)v50;
LABEL_73:
  icu::UnicodeString::~UnicodeString(v31, v32);
  return v20;
}

uint64_t sub_1809B9050(unsigned int a1)
{
  if (a1 > 0x15) {
    return 0LL;
  }
  else {
    return dword_180A3DEA4[a1];
  }
}

void *udat_countSymbols(void *result, int a2)
{
  if (result)
  {
    uint64_t v3 = result;
    if (result)
    {
      uint64_t v4 = 34LL;
    }

    else
    {
      if (!result) {
        return result;
      }
      uint64_t v4 = 33LL;
    }

    double v5 = (icu::DateFormatSymbols *)(*(uint64_t (**)(void))(*result + 8 * v4))();
    int v12 = 0;
    switch(a2)
    {
      case 0:
        icu::DateFormatSymbols::getEras(v5, &v12);
        return (void *)v12;
      case 1:
        icu::DateFormatSymbols::getMonths(v5, &v12);
        return (void *)v12;
      case 2:
        icu::DateFormatSymbols::getShortMonths(v5, &v12);
        return (void *)v12;
      case 3:
        icu::DateFormatSymbols::getWeekdays(v5, &v12);
        return (void *)v12;
      case 4:
        icu::DateFormatSymbols::getShortWeekdays(v5, &v12);
        return (void *)v12;
      case 5:
        icu::DateFormatSymbols::getAmPmStrings(v5, &v12);
        return (void *)v12;
      case 6:
        int v12 = 1;
        return (void *)v12;
      case 7:
        icu::DateFormatSymbols::getEraNames(v5, &v12);
        return (void *)v12;
      case 8:
        int v6 = 0;
        goto LABEL_22;
      case 9:
        int v7 = 0;
        goto LABEL_27;
      case 10:
        int v6 = 1;
        int v8 = 1;
        goto LABEL_23;
      case 11:
        int v6 = 1;
        int v8 = 0;
        goto LABEL_23;
      case 12:
        int v6 = 1;
LABEL_22:
        int v8 = 2;
LABEL_23:
        icu::DateFormatSymbols::getMonths(v5, &v12, v6, v8);
        return (void *)v12;
      case 13:
        int v7 = 1;
        int v9 = 1;
        goto LABEL_37;
      case 14:
        int v7 = 1;
        int v9 = 0;
        goto LABEL_37;
      case 15:
        int v7 = 1;
LABEL_27:
        int v9 = 2;
        goto LABEL_37;
      case 16:
        int v10 = 0;
        goto LABEL_31;
      case 17:
        int v10 = 0;
        goto LABEL_33;
      case 18:
        int v10 = 1;
LABEL_31:
        int v11 = 1;
        goto LABEL_43;
      case 19:
        int v10 = 1;
LABEL_33:
        int v11 = 0;
        goto LABEL_43;
      case 20:
        int v7 = 0;
        goto LABEL_36;
      case 21:
        int v7 = 1;
LABEL_36:
        int v9 = 3;
LABEL_37:
        icu::DateFormatSymbols::getWeekdays(v5, &v12, v7, v9);
        return (void *)v12;
      case 22:
      case 23:
      case 24:
        icu::DateFormatSymbols::getYearNames((uint64_t)v5, &v12);
        return (void *)v12;
      case 25:
      case 26:
      case 27:
        goto LABEL_39;
      case 28:
        int v10 = 0;
        goto LABEL_42;
      case 29:
        int v10 = 1;
LABEL_42:
        int v11 = 2;
LABEL_43:
        icu::DateFormatSymbols::getQuarters(v5, &v12, v10, v11);
        break;
      default:
        if (a2 == 128) {
LABEL_39:
        }
          icu::DateFormatSymbols::getZodiacNames((uint64_t)v5, &v12);
        break;
    }

    return (void *)v12;
  }

  return result;
}

uint64_t udat_setSymbols(void *a1, int a2, int a3, uint64_t a4, uint64_t a5, int *a6)
{
  uint64_t result = (uint64_t)sub_1809B859C(a1, a6);
  if (*a6 <= 0)
  {
    uint64_t result = (*(uint64_t (**)(void *))(*(void *)a1 + 272LL))(a1);
    switch(a2)
    {
      case 0:
        uint64_t v13 = *(void *)(result + 8);
        int v14 = *(_DWORD *)(result + 16);
        goto LABEL_31;
      case 1:
        uint64_t v13 = *(void *)(result + 56);
        int v14 = *(_DWORD *)(result + 64);
        goto LABEL_31;
      case 2:
        uint64_t v13 = *(void *)(result + 72);
        int v14 = *(_DWORD *)(result + 80);
        goto LABEL_31;
      case 3:
        uint64_t v13 = *(void *)(result + 152);
        int v14 = *(_DWORD *)(result + 160);
        goto LABEL_31;
      case 4:
        uint64_t v13 = *(void *)(result + 168);
        int v14 = *(_DWORD *)(result + 176);
        goto LABEL_31;
      case 5:
        uint64_t v13 = *(void *)(result + 280);
        int v14 = *(_DWORD *)(result + 288);
        goto LABEL_31;
      case 6:
        uint64_t v15 = result + 768;
        int v14 = 1;
        int v16 = 0;
        goto LABEL_32;
      case 7:
        uint64_t v13 = *(void *)(result + 24);
        int v14 = *(_DWORD *)(result + 32);
        goto LABEL_31;
      case 8:
        uint64_t v13 = *(void *)(result + 88);
        int v14 = *(_DWORD *)(result + 96);
        goto LABEL_31;
      case 9:
        uint64_t v13 = *(void *)(result + 200);
        int v14 = *(_DWORD *)(result + 208);
        goto LABEL_31;
      case 10:
        uint64_t v13 = *(void *)(result + 104);
        int v14 = *(_DWORD *)(result + 112);
        goto LABEL_31;
      case 11:
        uint64_t v13 = *(void *)(result + 120);
        int v14 = *(_DWORD *)(result + 128);
        goto LABEL_31;
      case 12:
        uint64_t v13 = *(void *)(result + 136);
        int v14 = *(_DWORD *)(result + 144);
        goto LABEL_31;
      case 13:
        uint64_t v13 = *(void *)(result + 216);
        int v14 = *(_DWORD *)(result + 224);
        goto LABEL_31;
      case 14:
        uint64_t v13 = *(void *)(result + 232);
        int v14 = *(_DWORD *)(result + 240);
        goto LABEL_31;
      case 15:
        uint64_t v13 = *(void *)(result + 264);
        int v14 = *(_DWORD *)(result + 272);
        goto LABEL_31;
      case 16:
        uint64_t v13 = *(void *)(result + 376);
        int v14 = *(_DWORD *)(result + 384);
        goto LABEL_31;
      case 17:
        uint64_t v13 = *(void *)(result + 392);
        int v14 = *(_DWORD *)(result + 400);
        goto LABEL_31;
      case 18:
        uint64_t v13 = *(void *)(result + 424);
        int v14 = *(_DWORD *)(result + 432);
        goto LABEL_31;
      case 19:
        uint64_t v13 = *(void *)(result + 440);
        int v14 = *(_DWORD *)(result + 448);
        goto LABEL_31;
      case 20:
        uint64_t v13 = *(void *)(result + 184);
        int v14 = *(_DWORD *)(result + 192);
        goto LABEL_31;
      case 21:
        uint64_t v13 = *(void *)(result + 248);
        int v14 = *(_DWORD *)(result + 256);
        goto LABEL_31;
      case 23:
        uint64_t v13 = *(void *)(result + 488);
        int v14 = *(_DWORD *)(result + 496);
        goto LABEL_31;
      case 26:
        uint64_t v13 = *(void *)(result + 504);
        int v14 = *(_DWORD *)(result + 512);
        goto LABEL_31;
      case 28:
        uint64_t v13 = *(void *)(result + 408);
        int v14 = *(_DWORD *)(result + 416);
        goto LABEL_31;
      case 29:
        uint64_t v13 = *(void *)(result + 456);
        int v14 = *(_DWORD *)(result + 464);
LABEL_31:
        uint64_t v15 = v13;
        int v16 = a3;
LABEL_32:
        uint64_t result = sub_1809B9934(v15, v14, v16, a4, a5, a6);
        break;
      default:
        *a6 = 16;
        break;
    }
  }

  return result;
}

uint64_t udat_getLocaleByType(uint64_t a1, int a2, int *a3)
{
  if (a1) {
    return icu::Format::getLocaleID(a1, a2, a3);
  }
  if (*a3 <= 0) {
    *a3 = 1;
  }
  return 0LL;
}

uint64_t udat_setContext(uint64_t result, uint64_t a2, int *a3)
{
  if (*a3 <= 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 200LL))(result);
  }
  return result;
}

uint64_t udat_getContext(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 <= 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 208LL))(a1);
  }
  else {
    return 0LL;
  }
}

uint64_t udat_toPatternRelativeDate(void *a1, char *a2, unsigned int a3, int *a4)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  sub_1809B9678(a1, a4);
  if (*a4 <= 0)
  {
    if (a2)
    {
      if ((a3 & 0x80000000) == 0)
      {
        __int128 v13 = 0u;
        __int128 v14 = 0u;
        uint64_t v16 = 0LL;
        __int128 v15 = 0u;
        int v12 = off_18971B688;
        LOWORD(v13) = 2;
        icu::UnicodeString::setTo((icu::UnicodeString *)&v12, a2, 0, a3);
LABEL_10:
        (*(void (**)(void *, void (***)(icu::UnicodeString *__hidden), int *))(*(void *)a1 + 240LL))( a1,  &v12,  a4);
        int v11 = (UChar *)a2;
        uint64_t v8 = icu::UnicodeString::extract((uint64_t)&v12, &v11, a3, a4);
        int v10 = v11;
        icu::UnicodeString::~UnicodeString(&v10, (icu::UnicodeString *)&v12);
        return v8;
      }
    }

    else if (!a3)
    {
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      uint64_t v16 = 0LL;
      __int128 v15 = 0u;
      int v12 = off_18971B688;
      LOWORD(v13) = 2;
      goto LABEL_10;
    }

    *a4 = 1;
  }

  return 0xFFFFFFFFLL;
}

void *sub_1809B9678(void *result, int *a2)
{
  if (*a2 <= 0 {
    && (!result
  }
  {
    *a2 = 1;
  }

  return result;
}

uint64_t udat_toPatternRelativeTime(void *a1, char *a2, unsigned int a3, int *a4)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  sub_1809B9678(a1, a4);
  if (*a4 <= 0)
  {
    if (a2)
    {
      if ((a3 & 0x80000000) == 0)
      {
        __int128 v13 = 0u;
        __int128 v14 = 0u;
        uint64_t v16 = 0LL;
        __int128 v15 = 0u;
        int v12 = off_18971B688;
        LOWORD(v13) = 2;
        icu::UnicodeString::setTo((icu::UnicodeString *)&v12, a2, 0, a3);
LABEL_10:
        (*(void (**)(void *, void (***)(icu::UnicodeString *__hidden), int *))(*(void *)a1 + 248LL))( a1,  &v12,  a4);
        int v11 = (UChar *)a2;
        uint64_t v8 = icu::UnicodeString::extract((uint64_t)&v12, &v11, a3, a4);
        int v10 = v11;
        icu::UnicodeString::~UnicodeString(&v10, (icu::UnicodeString *)&v12);
        return v8;
      }
    }

    else if (!a3)
    {
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      uint64_t v16 = 0LL;
      __int128 v15 = 0u;
      int v12 = off_18971B688;
      LOWORD(v13) = 2;
      goto LABEL_10;
    }

    *a4 = 1;
  }

  return 0xFFFFFFFFLL;
}

void *udat_applyPatternRelative(void *a1, uint64_t a2, int a3, uint64_t a4, int a5, int *a6)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t result = sub_1809B9678(a1, a6);
  if (*a6 <= 0)
  {
    memset(v18, 0, sizeof(v18));
    uint64_t v16 = a2;
    icu::UnicodeString::UnicodeString(v18, a3 == -1, &v16);
    memset(v17, 0, sizeof(v17));
    uint64_t v15 = a4;
    icu::UnicodeString::UnicodeString(v17, a5 == -1, &v15);
    (*(void (**)(void *, _OWORD *, _OWORD *, int *))(*(void *)a1 + 256LL))(a1, v18, v17, a6);
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v17);
    return icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v18);
  }

  return result;
}

uint64_t sub_1809B9934(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5, int *a6)
{
  if (!result) {
    return result;
  }
  if (a3 >= a2)
  {
    int v10 = 8;
LABEL_8:
    *a6 = v10;
    return result;
  }

  if (!a4)
  {
    int v10 = 1;
    goto LABEL_8;
  }

  uint64_t v8 = result + ((uint64_t)a3 << 6);
  icu::UnicodeString::unBogus(v8);
  else {
    uint64_t v9 = *(unsigned __int16 *)(v8 + 8) >> 5;
  }
  return icu::UnicodeString::doReplace(v8, 0LL, v9, a4, 0, a5);
}

uint64_t udtitvfmt_openResult(int *a1, unint64_t a2)
{
  if (*a1 > 0) {
    return 0LL;
  }
  uint64_t result = icu::UMemory::operator new((icu::UMemory *)0x30, a2);
  if (result)
  {
    *(_DWORD *)uint64_t result = 1430672896;
    *(_DWORD *)(result + 16) = 1178880342;
    *(void *)(result + 24) = off_189722E70;
    *(void *)(result + 32) = 0LL;
    *(_DWORD *)(result + 40) = 27;
    *(void *)(result + 8) = result + 24;
  }

  else
  {
    *a1 = 7;
  }

  return result;
}

uint64_t udtitvfmt_resultAsValue(uint64_t result, int *a2)
{
  int v2 = *a2;
  if (*a2 > 0)
  {
    uint64_t result = 0LL;
    goto LABEL_8;
  }

  if (result)
  {
    if (*(_DWORD *)(result + 16) == 1178880342) {
      goto LABEL_8;
    }
    int v2 = 3;
  }

  else
  {
    int v2 = 1;
  }

  uint64_t result = 0LL;
  *a2 = v2;
LABEL_8:
  if (v2 >= 1) {
    return 0LL;
  }
  return result;
}

void udtitvfmt_closeResult(_DWORD *a1)
{
  if (a1)
  {
    if (a1[4] == 1178880342)
    {
      icu::FormattedDateInterval::~FormattedDateInterval((icu::FormattedDateInterval *)(a1 + 6));
      a1[4] = 0;
      *a1 = 0;
      icu::UMemory::operator delete(a1);
    }
  }

icu::DateIntervalFormat *udtitvfmt_open( const char *a1, uint64_t a2, int a3, uint64_t a4, int a5, UErrorCode *a6)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if (*(int *)a6 <= 0)
  {
    if (a2)
    {
      if (a3 < -1) {
        goto LABEL_13;
      }
    }

    else if (a3)
    {
      goto LABEL_13;
    }

    if (a4)
    {
      if (a5 > -2) {
        goto LABEL_9;
      }
    }

    else if (!a5)
    {
LABEL_9:
      memset(v22, 0, sizeof(v22));
      uint64_t v20 = a2;
      icu::UnicodeString::UnicodeString(v22, a3 == -1, &v20);
      uint64_t v18 = v20;
      icu::Locale::Locale(&v18, (icu::Locale *)v21, a1, 0LL, 0LL, 0LL);
      uint64_t Instance = icu::DateIntervalFormat::createInstance((UErrorCode *)v22, (const icu::UnicodeString *)v21, a6, v11);
      icu::Locale::~Locale(v12, (icu::Locale *)v21);
      uint64_t v13 = *(unsigned int *)a6;
      if ((int)v13 <= 0)
      {
        if (!a4) {
          goto LABEL_17;
        }
        uint64_t v19 = a4;
        icu::UnicodeString::UnicodeString(v21, a5 == -1, &v19);
        uint64_t TimeZone = icu::TimeZone::createTimeZone(v21, v14);
        icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v21);
        if (TimeZone)
        {
          (*(void (**)(icu::DateIntervalFormat *, void *))(*(void *)Instance + 72LL))(Instance, TimeZone);
          goto LABEL_17;
        }

        uint64_t v13 = 7LL;
        *a6 = U_MEMORY_ALLOCATION_ERROR;
        if (!Instance) {
          goto LABEL_17;
        }
      }

      else if (!Instance)
      {
LABEL_17:
        icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v22);
        return Instance;
      }

      (*(void (**)(icu::DateIntervalFormat *))(*(void *)Instance + 8LL))(Instance);
      uint64_t Instance = 0LL;
      goto LABEL_17;
    }

uint64_t udtitvfmt_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t udtitvfmt_format( icu::DateIntervalFormat *a1, char *a2, unsigned int a3, uint64_t a4, UErrorCode *a5, double a6, double a7)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  if (!a2)
  {
    if (!a3)
    {
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      uint64_t v26 = 0LL;
      __int128 v25 = 0u;
      int v22 = off_18971B688;
      LOWORD(v23) = 2;
      goto LABEL_9;
    }

uint64_t udtitvfmt_setAttribute(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (*a4 <= 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 104LL))(result);
  }
  return result;
}

void udtitvfmt_formatToResult(uint64_t *a1, uint64_t a2, UErrorCode *a3, double a4, double a5)
{
  uint64_t v6 = a2;
  if (!a2)
  {
    int v8 = 1;
    goto LABEL_6;
  }

  if (*(_DWORD *)(a2 + 16) != 1178880342)
  {
    int v8 = 3;
LABEL_6:
    uint64_t v6 = 0LL;
    *a3 = v8;
  }

  memset(v10, 0, sizeof(v10));
  icu::DateInterval::DateInterval((uint64_t)v10, a4, a5);
  if (v6)
  {
    icu::DateIntervalFormat::formatToValue(a1, (const icu::DateInterval *)v10, a3, (uint64_t)v9);
    icu::FormattedDateInterval::operator=(v6 + 24, (uint64_t)v9);
    icu::FormattedDateInterval::~FormattedDateInterval((icu::FormattedDateInterval *)v9);
  }

  icu::DateInterval::~DateInterval((icu::DateInterval *)v10);
}

void udtitvfmt_formatCalendarToResult( uint64_t *a1, icu::Calendar *a2, icu::Calendar *a3, uint64_t a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    if (a4)
    {
      if (*(_DWORD *)(a4 + 16) == 1178880342)
      {
        icu::DateIntervalFormat::formatToValue(a1, a2, a3, a5, (uint64_t)v7);
        icu::FormattedDateInterval::operator=(a4 + 24, (uint64_t)v7);
        icu::FormattedDateInterval::~FormattedDateInterval((icu::FormattedDateInterval *)v7);
        return;
      }

      UErrorCode v6 = U_INVALID_FORMAT_ERROR;
    }

    else
    {
      UErrorCode v6 = U_ILLEGAL_ARGUMENT_ERROR;
    }

    *a5 = v6;
  }

uint64_t udtitvfmt_setContext(uint64_t result, uint64_t a2, int *a3)
{
  if (*a3 <= 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 88LL))(result);
  }
  return result;
}

uint64_t udtitvfmt_getContext(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 <= 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96LL))(a1);
  }
  else {
    return 0LL;
  }
}

void *udtitvfmt_getPatternString( icu::DateIntervalFormat *a1, uint64_t a2, unsigned int a3, UChar *a4, int a5, int *a6)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  uint64_t v21 = 0LL;
  __int128 v20 = 0u;
  uint64_t v17 = (UChar *)off_18971B688;
  LOWORD(v18) = 2;
  uint64_t DateIntervalInfo = icu::DateIntervalFormat::getDateIntervalInfo(a1);
  icu::UnicodeString::UnicodeString((uint64_t)v16, a2);
  icu::DateIntervalInfo::getIntervalPattern(DateIntervalInfo, (uint64_t)v16, a3, &v17, a6);
  icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v16);
  uint64_t v15 = a4;
  icu::UnicodeString::extract((uint64_t)&v17, &v15, a5, a6);
  __int128 v14 = v15;
  return icu::UnicodeString::~UnicodeString(&v14, (icu::UnicodeString *)&v17);
}

icu::DateIntervalFormat *udatintv_open(const char *a1, uint64_t a2, int a3, UErrorCode *a4)
{
  return udtitvfmt_open(a1, a2, a3, 0LL, 0, a4);
}

icu::DateTimePatternGenerator *udatpg_open(char *a1, icu::DateTimePatternGenerator *this)
{
  uint64_t v3 = (uint64_t *)*MEMORY[0x1895F89C0];
  v7[28] = *(const char **)MEMORY[0x1895F89C0];
  if (!a1) {
    return icu::DateTimePatternGenerator::createInstance(this, (UErrorCode *)this);
  }
  icu::Locale::Locale(v3, (icu::Locale *)v7, a1, 0LL, 0LL, 0LL);
  uint64_t Instance = icu::DateTimePatternGenerator::createInstance(v7, (UErrorCode *)this, 0LL);
  icu::Locale::~Locale(v5, (icu::Locale *)v7);
  return Instance;
}

uint64_t udatpg_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

icu::DateTimePatternGenerator *udatpg_clone(icu::DateTimePatternGenerator *a1, unsigned int *a2)
{
  int v2 = (uint64_t *)*a2;
  else {
    return 0LL;
  }
}

uint64_t udatpg_getBestPattern(void *a1, uint64_t a2, unsigned int a3, UChar *a4, int a5, int *a6)
{
  return udatpg_getBestPatternWithOptions(a1, a2, a3, 0, a4, a5, a6);
}

uint64_t udatpg_getBestPatternWithOptions( void *a1, uint64_t a2, unsigned int a3, int a4, UChar *a5, int a6, int *a7)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (*a7 > 0) {
    return 0LL;
  }
  if (a2 || !a3)
  {
    memset(v19, 0, sizeof(v19));
    uint64_t v17 = a2;
    icu::UnicodeString::UnicodeString(v19, a3 >> 31, &v17);
    v15[1] = v17;
    memset(v18, 0, sizeof(v18));
    icu::DateTimePatternGenerator::getBestPattern(a1, (uint64_t)v19, a4, a7, (icu::UnicodeString *)v18);
    uint64_t v16 = a5;
    uint64_t v7 = icu::UnicodeString::extract((uint64_t)v18, &v16, a6, a7);
    v15[0] = v16;
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v18);
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v19);
  }

  else
  {
    uint64_t v7 = 0LL;
    *a7 = 1;
  }

  return v7;
}

uint64_t udatpg_getSkeleton(uint64_t a1, uint64_t a2, unsigned int a3, UChar *a4, int a5, int *a6)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (*a6 > 0) {
    return 0LL;
  }
  if (a2 || !a3)
  {
    memset(v16, 0, sizeof(v16));
    uint64_t v14 = a2;
    icu::UnicodeString::UnicodeString(v16, a3 >> 31, &v14);
    v12[1] = v14;
    memset(v15, 0, sizeof(v15));
    icu::DateTimePatternGenerator::staticGetSkeleton((icu::DateTimePatternGenerator *)v16, (uint64_t)v15);
    uint64_t v13 = a4;
    uint64_t v6 = icu::UnicodeString::extract((uint64_t)v15, &v13, a5, a6);
    v12[0] = v13;
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v15);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v16);
  }

  else
  {
    uint64_t v6 = 0LL;
    *a6 = 1;
  }

  return v6;
}

uint64_t udatpg_getBaseSkeleton(uint64_t a1, uint64_t a2, unsigned int a3, UChar *a4, int a5, int *a6)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (*a6 > 0) {
    return 0LL;
  }
  if (a2 || !a3)
  {
    memset(v16, 0, sizeof(v16));
    uint64_t v14 = a2;
    icu::UnicodeString::UnicodeString(v16, a3 >> 31, &v14);
    v12[1] = v14;
    memset(v15, 0, sizeof(v15));
    icu::DateTimePatternGenerator::staticGetBaseSkeleton((icu::DateTimePatternGenerator *)v16, (uint64_t)v15);
    uint64_t v13 = a4;
    uint64_t v6 = icu::UnicodeString::extract((uint64_t)v15, &v13, a5, a6);
    v12[0] = v13;
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v15);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v16);
  }

  else
  {
    uint64_t v6 = 0LL;
    *a6 = 1;
  }

  return v6;
}

uint64_t udatpg_addPattern( icu::DateTimePatternGenerator *a1, uint64_t a2, unsigned int a3, int a4, UChar *a5, int a6, _DWORD *a7, UErrorCode *a8)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  if (a2 || !a3)
  {
    memset(v26, 0, sizeof(v26));
    uint64_t v20 = a2;
    icu::UnicodeString::UnicodeString(v26, a3 >> 31, &v20);
    v18[1] = v20;
    __int128 v22 = 0u;
    uint64_t v25 = 0LL;
    __int128 v24 = 0u;
    __int128 v23 = 0u;
    uint64_t v21 = (UChar *)off_18971B688;
    LOWORD(v22) = 2;
    uint64_t v8 = icu::DateTimePatternGenerator::addPattern(a1, (UChar **)v26, a4, &v21, a8);
    __int128 v19 = a5;
    int v15 = icu::UnicodeString::extract((uint64_t)&v21, &v19, a6, (int *)a8);
    v18[0] = v19;
    if (a7) {
      *a7 = v15;
    }
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v21);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v26);
  }

  else
  {
    uint64_t v8 = 0LL;
    *a8 = U_ILLEGAL_ARGUMENT_ERROR;
  }

  return v8;
}

void *udatpg_setAppendItemFormat(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  memset(v9, 0, sizeof(v9));
  uint64_t v8 = a3;
  icu::UnicodeString::UnicodeString(v9, a4 >> 31, &v8);
  icu::DateTimePatternGenerator::setAppendItemFormat(a1, a2, (UChar **)v9);
  return icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v9);
}

unint64_t udatpg_getAppendItemFormat(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  unint64_t AppendItemFormat = icu::DateTimePatternGenerator::getAppendItemFormat(a1, a2);
  if (a3)
  {
    unsigned int v5 = *(unsigned __int16 *)(AppendItemFormat + 8);
    int v6 = (__int16)v5;
    unsigned int v7 = v5 >> 5;
    if (v6 < 0) {
      unsigned int v7 = *(_DWORD *)(AppendItemFormat + 12);
    }
    *a3 = v7;
  }

  __int16 v8 = *(_WORD *)(AppendItemFormat + 8);
  if ((v8 & 0x11) != 0) {
    return 0LL;
  }
  if ((v8 & 2) != 0) {
    return AppendItemFormat + 10;
  }
  return *(void *)(AppendItemFormat + 24);
}

void *udatpg_setAppendItemName(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  memset(v9, 0, sizeof(v9));
  uint64_t v8 = a3;
  icu::UnicodeString::UnicodeString(v9, a4 >> 31, &v8);
  icu::DateTimePatternGenerator::setAppendItemName(a1, a2, (UChar **)v9);
  return icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v9);
}

uint64_t udatpg_getAppendItemName(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  uint64_t AppendItemName = icu::DateTimePatternGenerator::getAppendItemName(a1, a2);
  if (a3)
  {
    unsigned int v5 = *(unsigned __int16 *)(AppendItemName + 8);
    int v6 = (__int16)v5;
    unsigned int v7 = v5 >> 5;
    if (v6 < 0) {
      unsigned int v7 = *(_DWORD *)(AppendItemName + 12);
    }
    *a3 = v7;
  }

  __int16 v8 = *(_WORD *)(AppendItemName + 8);
  if ((v8 & 0x11) != 0) {
    return 0LL;
  }
  if ((v8 & 2) != 0) {
    return AppendItemName + 10;
  }
  return *(void *)(AppendItemName + 24);
}

uint64_t udatpg_getFieldDisplayName(uint64_t a1, unsigned int a2, unsigned int a3, UChar *a4, int a5, int *a6)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (*a6 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (!a4)
  {
    if (!a5)
    {
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      icu::DateTimePatternGenerator::getFieldDisplayName(a1, a2, a3, (icu::UnicodeString *)&v14);
      unint64_t v10 = SWORD4(v14);
      if ((v10 & 0x80000000) != 0)
      {
        uint64_t v9 = HIDWORD(v14);
      }

      else
      {
        unint64_t v10 = WORD4(v14);
        uint64_t v9 = WORD4(v14) >> 5;
      }

      goto LABEL_5;
    }

    goto LABEL_7;
  }

  if (a5 < 0)
  {
LABEL_7:
    *a6 = 1;
    return 0xFFFFFFFFLL;
  }

  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  icu::DateTimePatternGenerator::getFieldDisplayName(a1, a2, a3, (icu::UnicodeString *)&v14);
  uint64_t v13 = a4;
  uint64_t v9 = icu::UnicodeString::extract((uint64_t)&v14, &v13, a5, a6);
  int v12 = v13;
  unint64_t v10 = (unint64_t)&v12;
LABEL_5:
  icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)&v14);
  return v9;
}

void *udatpg_setDateTimeFormat(icu::DateTimePatternGenerator *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  memset(v7, 0, sizeof(v7));
  uint64_t v6 = a2;
  icu::UnicodeString::UnicodeString(v7, a3 >> 31, &v6);
  icu::DateTimePatternGenerator::setDateTimeFormat(a1, (UChar **)v7);
  return icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v7);
}

char *udatpg_getDateTimeFormat(uint64_t a1, unsigned int *a2)
{
  int v3 = 0;
  return udatpg_getDateTimeFormatForStyle(a1, 2u, a2, &v3);
}

char *udatpg_getDateTimeFormatForStyle(uint64_t a1, unsigned int a2, unsigned int *a3, int *a4)
{
  if (*a4 < 1)
  {
    DateTimeFormat = icu::DateTimePatternGenerator::getDateTimeFormat(a1, a2, a4);
    if (a3)
    {
      unsigned int v7 = *((unsigned __int16 *)DateTimeFormat + 4);
      int v8 = (__int16)v7;
      unsigned int v9 = v7 >> 5;
      if (v8 < 0) {
        unsigned int v9 = DateTimeFormat[3];
      }
      *a3 = v9;
    }

    __int16 v10 = *((_WORD *)DateTimeFormat + 4);
    if ((v10 & 0x11) != 0)
    {
      return 0LL;
    }

    else if ((v10 & 2) != 0)
    {
      return (char *)DateTimeFormat + 10;
    }

    else
    {
      return (char *)*((void *)DateTimeFormat + 3);
    }
  }

  else
  {
    if (a3) {
      *a3 = 0;
    }
    return (char *)&unk_180A3DEFC;
  }

void *udatpg_setDateTimeFormatForStyle(void *result, unsigned int a2, uint64_t a3, unsigned int a4, int *a5)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  if (*a5 <= 0)
  {
    if (a3)
    {
      uint64_t v7 = (uint64_t)result;
      memset(v10, 0, sizeof(v10));
      uint64_t v9 = a3;
      icu::UnicodeString::UnicodeString(v10, a4 >> 31, &v9);
      icu::DateTimePatternGenerator::setDateTimeFormat(v7, a2, (UChar **)v10, a5);
      return icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v10);
    }

    else
    {
      *a5 = 1;
    }
  }

  return result;
}

void *udatpg_setDecimal(UChar **a1, uint64_t a2, unsigned int a3)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  memset(v7, 0, sizeof(v7));
  uint64_t v6 = a2;
  icu::UnicodeString::UnicodeString(v7, a3 >> 31, &v6);
  icu::DateTimePatternGenerator::setDecimal(a1, (UChar **)v7);
  return icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v7);
}

uint64_t udatpg_getDecimal(icu::DateTimePatternGenerator *a1, unsigned int *a2)
{
  uint64_t Decimal = icu::DateTimePatternGenerator::getDecimal(a1);
  if (a2)
  {
    unsigned int v4 = *(unsigned __int16 *)(Decimal + 8);
    int v5 = (__int16)v4;
    unsigned int v6 = v4 >> 5;
    if (v5 < 0) {
      unsigned int v6 = *(_DWORD *)(Decimal + 12);
    }
    *a2 = v6;
  }

  __int16 v7 = *(_WORD *)(Decimal + 8);
  if ((v7 & 0x11) != 0) {
    return 0LL;
  }
  if ((v7 & 2) != 0) {
    return Decimal + 10;
  }
  return *(void *)(Decimal + 24);
}

uint64_t udatpg_replaceFieldTypes( void *a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, UChar *a6, int a7, int *a8)
{
  return udatpg_replaceFieldTypesWithOptions(a1, a2, a3, a4, a5, 0, a6, a7, a8);
}

uint64_t udatpg_replaceFieldTypesWithOptions( void *a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, int a6, UChar *a7, int a8, int *a9)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  if (*a9 > 0) {
    return 0LL;
  }
  if ((a2 || !a3) && (a4 || !a5))
  {
    memset(v25, 0, sizeof(v25));
    uint64_t v22 = a2;
    icu::UnicodeString::UnicodeString(v25, a3 >> 31, &v22);
    v19[2] = v22;
    memset(v24, 0, sizeof(v24));
    uint64_t v21 = a4;
    icu::UnicodeString::UnicodeString(v24, a5 >> 31, &v21);
    v19[1] = v21;
    memset(v23, 0, sizeof(v23));
    icu::DateTimePatternGenerator::replaceFieldTypes( a1,  (const icu::UnicodeString *)v25,  (const icu::UnicodeString *)v24,  a6,  a9,  (uint64_t)v23);
    uint64_t v20 = a7;
    uint64_t v9 = icu::UnicodeString::extract((uint64_t)v23, &v20, a8, a9);
    v19[0] = v20;
    icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v23);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v24);
    icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v25);
  }

  else
  {
    uint64_t v9 = 0LL;
    *a9 = 1;
  }

  return v9;
}

_OWORD *udatpg_openSkeletons(icu::DateTimePatternGenerator *a1, UErrorCode *a2)
{
  uint64_t Skeletons = icu::DateTimePatternGenerator::getSkeletons(a1, a2);
  return uenum_openFromStringEnumeration(Skeletons, (int *)a2);
}

_OWORD *udatpg_openBaseSkeletons(icu::DateTimePatternGenerator *a1, UErrorCode *a2)
{
  Baseuint64_t Skeletons = icu::DateTimePatternGenerator::getBaseSkeletons(a1, a2);
  return uenum_openFromStringEnumeration(BaseSkeletons, (int *)a2);
}

char *udatpg_getPatternForSkeleton( icu::DateTimePatternGenerator *a1, uint64_t a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  memset(v15, 0, sizeof(v15));
  uint64_t v14 = a2;
  icu::UnicodeString::UnicodeString(v15, a3 >> 31, &v14);
  uint64_t v13 = v14;
  PatternForSkeleton = icu::DateTimePatternGenerator::getPatternForSkeleton(&v13, a1, (const icu::UnicodeString *)v15);
  if (a4)
  {
    unsigned int v7 = *((unsigned __int16 *)PatternForSkeleton + 4);
    int v8 = (__int16)v7;
    unsigned int v9 = v7 >> 5;
    if (v8 < 0) {
      unsigned int v9 = *((_DWORD *)PatternForSkeleton + 3);
    }
    *a4 = v9;
  }

  __int16 v10 = (void *)*((unsigned __int16 *)PatternForSkeleton + 4);
  if ((v10 & 0x11) != 0)
  {
    uint64_t v11 = 0LL;
  }

  else if ((v10 & 2) != 0)
  {
    uint64_t v11 = (char *)PatternForSkeleton + 10;
  }

  else
  {
    uint64_t v11 = (char *)PatternForSkeleton[3];
  }

  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v15);
  return v11;
}

uint64_t uadatpg_remapPatternWithOptions( void *a1, uint64_t a2, unsigned int a3, int a4, UChar *a5, int a6, int *a7)
{
  uint64_t v54 = *MEMORY[0x1895F89C0];
  if (*a7 <= 0)
  {
    if (a2)
    {
      if (a5)
      {
        if ((a6 & 0x80000000) == 0)
        {
LABEL_6:
          __int128 v52 = 0u;
          __int128 v53 = 0u;
          __int128 v50 = 0u;
          __int128 v51 = 0u;
          uint64_t v37 = a2;
          icu::UnicodeString::UnicodeString(&v50, a3 >> 31, &v37);
          v35[1] = v37;
          if ((a4 & 0x60000000) == 0x40000000 || (a4 & 0x60000000) == 0x20000000)
          {
            __int128 v46 = 0u;
            uint64_t v49 = 0LL;
            __int128 v48 = 0u;
            __int128 v47 = 0u;
            uint64_t v44 = 0LL;
            int32_t v45 = off_18971B688;
            LOWORD(v46) = 2;
            __int128 v41 = 0u;
            __int128 v43 = 0u;
            __int128 v42 = 0u;
            int v40 = off_18971B688;
            LOWORD(v41) = 2;
            memset(v39, 0, sizeof(v39));
            icu::UnicodeString::UnicodeString(v39, "abBhHKkmsSzZOvVXx", 0xFFFFFFFFLL, 0LL);
            uint64_t v13 = (void *)(WORD4(v50) >> 5);
            if ((SWORD4(v50) & 0x8000u) == 0) {
              int v14 = WORD4(v50) >> 5;
            }
            else {
              int v14 = HIDWORD(v50);
            }
            if (v14 >= 1)
            {
              int v31 = a4 & 0x60000000;
              int v32 = 0;
              unsigned int v15 = 0;
              int v29 = 0;
              uint64_t v30 = 0LL;
              int v16 = 0;
              BOOL v17 = 0;
              unsigned int v33 = 0;
              int v34 = -1;
              while (1)
              {
                if ((SWORD4(v50) & 0x8000u) == 0) {
                  unsigned int v18 = WORD4(v50) >> 5;
                }
                else {
                  unsigned int v18 = HIDWORD(v50);
                }
                if (v18 <= v15)
                {
                  int v20 = 0xFFFF;
                }

                else
                {
                  if ((BYTE8(v50) & 2) != 0) {
                    unint64_t v19 = (unint64_t)&v50 | 0xA;
                  }
                  else {
                    unint64_t v19 = *((void *)&v51 + 1);
                  }
                  int v20 = *(unsigned __int16 *)(v19 + 2LL * (int)v15);
                  if (v20 == 39)
                  {
                    BOOL v17 = !v17;
                    goto LABEL_61;
                  }
                }

                if (v17)
                {
                  BOOL v17 = 1;
                }

                else
                {
                  if ((SWORD4(v39[0]) & 0x8000u) == 0) {
                    int32_t v21 = WORD4(v39[0]) >> 5;
                  }
                  else {
                    int32_t v21 = HIDWORD(v39[0]);
                  }
                  if ((icu::UnicodeString::doIndexOf((uint64_t)v39, v20, 0, v21) & 0x80000000) == 0)
                  {
                    if (!v16)
                    {
                      int v32 = 0;
                      if ((v46 & 1) != 0) {
                        __int16 v22 = 2;
                      }
                      else {
                        __int16 v22 = v46 & 0x1F;
                      }
                      LOWORD(v46) = v22;
                      if ((v41 & 1) != 0) {
                        __int16 v23 = 2;
                      }
                      else {
                        __int16 v23 = v41 & 0x1F;
                      }
                      LOWORD(v41) = v23;
                      int v34 = -1;
                      LODWORD(v30) = v15;
                    }

                    if (v20 > 103)
                    {
                      if (v20 != 107)
                      {
                        if (v20 == 104) {
                          goto LABEL_49;
                        }
LABEL_40:
                        if (v34 < 0 && (v20 == 115 || v20 == 109)) {
                          int v34 = v15;
                        }
                        goto LABEL_54;
                      }
                    }

                    else if (v20 != 72)
                    {
                      if (v20 != 75) {
                        goto LABEL_40;
                      }
LABEL_49:
                      if (v31 == 0x40000000)
                      {
                        int v34 = v15 + 1;
                        ++v32;
                        __int16 v24 = 72;
                        goto LABEL_53;
                      }

uint64_t sub_1809BB4B0( void *a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, int a9, int a10, int *a11)
{
  uint64_t v57 = *MEMORY[0x1895F89C0];
  __int128 v55 = 0u;
  __int128 v56 = 0u;
  if (a3) {
    int v16 = a2 | 0x800;
  }
  else {
    int v16 = a2;
  }
  __int128 v53 = 0uLL;
  __int128 v54 = 0uLL;
  icu::DateTimePatternGenerator::getBestPattern(a1, a6, v16, a11, (icu::UnicodeString *)&v53);
  unint64_t v17 = *a11;
  if ((int)v17 > 0)
  {
    uint64_t v18 = 0LL;
    goto LABEL_81;
  }

  __int128 v51 = 0u;
  __int128 v52 = 0u;
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  icu::DateTimePatternGenerator::getBestPattern(a1, a5, 0xFFFF, a11, (icu::UnicodeString *)&v49);
  if (*a11 <= 0)
  {
    if ((SWORD4(v49) & 0x8000u) == 0) {
      int32_t v31 = WORD4(v49) >> 5;
    }
    else {
      int32_t v31 = HIDWORD(v49);
    }
    if ((BYTE8(v49) & 1) == 0 && v31 >= 1)
    {
      unsigned int v32 = *(unsigned __int16 *)(a4 + 8);
      int v33 = (__int16)v32;
      unsigned int v34 = v32 >> 5;
      int32_t v35 = v33 >= 0 ? v34 : *(_DWORD *)(a4 + 12);
      uint64_t v36 = (BYTE8(v49) & 2) != 0 ? (unint64_t)&v49 | 0xA : *((void *)&v50 + 1);
      uint64_t v37 = icu::UnicodeString::indexOf(a4, v36, 0, v31, 0, v35);
      if ((v37 & 0x80000000) == 0)
      {
        if ((SWORD4(v49) & 0x8000u) == 0) {
          uint64_t v38 = WORD4(v49) >> 5;
        }
        else {
          uint64_t v38 = HIDWORD(v49);
        }
        if ((SWORD4(v53) & 0x8000u) == 0) {
          uint64_t v39 = WORD4(v53) >> 5;
        }
        else {
          uint64_t v39 = HIDWORD(v53);
        }
        icu::UnicodeString::doReplace((icu::UnicodeString *)a4, v37, v38, (const icu::UnicodeString *)&v53, 0, v39);
        LODWORD(v40) = WORD4(v53) >> 5;
        if ((SWORD4(v53) & 0x8000u) == 0) {
          unint64_t v40 = v40;
        }
        else {
          unint64_t v40 = HIDWORD(v53);
        }
        uint64_t v18 = (v40 - v38);
        goto LABEL_80;
      }
    }
  }

  else
  {
    *a11 = 0;
  }

  if (a9 < 0 || a10 <= a9) {
    goto LABEL_73;
  }
  __int128 v45 = 0u;
  uint64_t v48 = 0LL;
  __int128 v47 = 0u;
  __int128 v46 = 0u;
  uint64_t v44 = off_18971B688;
  LOWORD(v45) = 2;
  (*(void (**)(uint64_t))(*(void *)a4 + 24LL))(a4);
  uint64_t v19 = WORD4(v53) >> 5;
  if ((SWORD4(v53) & 0x8000u) == 0) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = HIDWORD(v53);
  }
  unint64_t v21 = 0LL;
  int v22 = 0;
  LOBYTE(v19) = 0;
  int v23 = 0;
  uint64_t v24 = 0xFFFFFFFFLL;
  do
  {
    if ((SWORD4(v53) & 0x8000u) == 0) {
      unint64_t v25 = WORD4(v53) >> 5;
    }
    else {
      unint64_t v25 = HIDWORD(v53);
    }
    if (v21 >= v25)
    {
      UChar32 v27 = 0xFFFF;
    }

    else
    {
      if ((BYTE8(v53) & 2) != 0) {
        unint64_t v26 = (unint64_t)&v53 | 0xA;
      }
      else {
        unint64_t v26 = *((void *)&v54 + 1);
      }
      UChar32 v27 = *(unsigned __int16 *)(v26 + 2 * v21);
      if (v27 == 39)
      {
        uint64_t v19 = v19 == 0;
        goto LABEL_38;
      }
    }

    if ((_BYTE)v19)
    {
      uint64_t v19 = 1LL;
    }

    else
    {
      if ((v27 - 72) <= 0x23 && ((1LL << (v27 - 72)) & 0x900000009LL) != 0)
      {
        uint64_t v24 = (v22 + 1);
      }

      else if ((v24 & 0x80000000) != 0 && (v27 == 115 || v27 == 109))
      {
        uint64_t v24 = v21;
      }

      int isUWhiteSpace = u_isUWhiteSpace(v27);
      uint64_t v19 = 0LL;
    }

uint64_t *ufieldpositer_open(_DWORD *a1, unint64_t a2)
{
  int v2 = (uint64_t *)*a1;
  uint64_t result = icu::UMemory::operator new(v2, (icu::UMemory *)0x18, a2);
  if (result) {
    return (uint64_t *)icu::FieldPositionIterator::FieldPositionIterator((uint64_t)result);
  }
  *a1 = 7;
  return result;
}

uint64_t ufieldpositer_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t ufieldpositer_next(icu::FieldPositionIterator *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v10 = 0LL;
  int v8 = off_189723AC8;
  uint64_t v9 = 0xFFFFFFFFLL;
  if (icu::FieldPositionIterator::next(a1, (icu::FieldPosition *)&v8))
  {
    uint64_t v6 = v9;
    if (a2)
    {
      unint64_t v5 = HIDWORD(v9);
      *a2 = HIDWORD(v9);
    }

    if (a3)
    {
      unint64_t v5 = v10;
      *a3 = v10;
    }
  }

  else
  {
    uint64_t v6 = 0xFFFFFFFFLL;
  }

  icu::FieldPosition::~FieldPosition((void *)v5, (icu::FieldPosition *)&v8);
  return v6;
}

void icu::UIterCollationIterator::~UIterCollationIterator(icu::UIterCollationIterator *this)
{
}

uint64_t icu::UIterCollationIterator::resetToOffset(icu::UIterCollationIterator *this)
{
  return (*(uint64_t (**)(void))(*((void *)this + 49) + 40LL))();
}

uint64_t icu::UIterCollationIterator::getOffset(icu::UIterCollationIterator *this)
{
  return (*(uint64_t (**)(void))(*((void *)this + 49) + 32LL))();
}

uint64_t icu::UIterCollationIterator::handleNextCE32( icu::UIterCollationIterator *this, unsigned int *a2, UErrorCode *a3)
{
  unsigned int v5 = (*(uint64_t (**)(void))(*((void *)this + 49) + 72LL))();
  *a2 = v5;
  if ((v5 & 0x80000000) != 0) {
    return 192LL;
  }
  else {
}
  }

uint64_t icu::UIterCollationIterator::handleGetTrailSurrogate(icu::UIterCollationIterator *this)
{
  int v2 = (*(uint64_t (**)(void))(*((void *)this + 49) + 72LL))();
  unsigned __int16 v3 = v2;
  if ((v2 & 0x80000000) == 0 && (v2 & 0xFFFFFC00) != 0xDC00) {
    (*(void (**)(void))(*((void *)this + 49) + 80LL))();
  }
  return v3;
}

uint64_t icu::UIterCollationIterator::nextCodePoint(UCharIterator **this, UErrorCode *a2)
{
  return uiter_next32(this[49]);
}

uint64_t icu::UIterCollationIterator::previousCodePoint(UCharIterator **this, UErrorCode *a2)
{
  return uiter_previous32(this[49]);
}

uint64_t icu::UIterCollationIterator::forwardNumCodePoints(uint64_t this, int a2, UErrorCode *a3)
{
  if (a2 >= 1)
  {
    int v3 = a2;
    uint64_t v4 = this;
    do
    {
      this = uiter_next32(*(UCharIterator **)(v4 + 392));
      BOOL v5 = __OFSUB__(v3--, 1);
    }

    while ((this & 0x80000000) == 0 && !((v3 < 0) ^ v5 | (v3 == 0)));
  }

  return this;
}

uint64_t icu::UIterCollationIterator::backwardNumCodePoints(uint64_t this, int a2, UErrorCode *a3)
{
  if (a2 >= 1)
  {
    int v3 = a2;
    uint64_t v4 = this;
    do
    {
      this = uiter_previous32(*(UCharIterator **)(v4 + 392));
      BOOL v5 = __OFSUB__(v3--, 1);
    }

    while ((this & 0x80000000) == 0 && !((v3 < 0) ^ v5 | (v3 == 0)));
  }

  return this;
}

void icu::FCDUIterCollationIterator::~FCDUIterCollationIterator(icu::FCDUIterCollationIterator *this)
{
  *(void *)this = off_18972CB90;
  icu::UnicodeString::~UnicodeString(off_18972CB90, (icu::FCDUIterCollationIterator *)((char *)this + 424));
  icu::CollationIterator::~CollationIterator(this);
}

{
  *(void *)this = off_18972CB90;
  icu::UnicodeString::~UnicodeString(off_18972CB90, (icu::FCDUIterCollationIterator *)((char *)this + 424));
  icu::CollationIterator::~CollationIterator(this);
}

{
  void *v2;
  *(void *)this = off_18972CB90;
  icu::UnicodeString::~UnicodeString(off_18972CB90, (icu::FCDUIterCollationIterator *)((char *)this + 424));
  icu::CollationIterator::~CollationIterator(this);
  icu::UMemory::operator delete(v2);
}

uint64_t icu::FCDUIterCollationIterator::resetToOffset(icu::FCDUIterCollationIterator *this, int a2)
{
  uint64_t result = (*(uint64_t (**)(void))(*((void *)this + 49) + 40LL))();
  *((_DWORD *)this + 101) = a2;
  *((_DWORD *)this + 100) = 0;
  return result;
}

uint64_t icu::FCDUIterCollationIterator::getOffset(icu::FCDUIterCollationIterator *this)
{
  int v2 = *((_DWORD *)this + 100);
  if (v2 <= 1) {
    return (*(uint64_t (**)(void))(*((void *)this + 49) + 32LL))();
  }
  uint64_t result = *((unsigned int *)this + 102);
  if (v2 != 2)
  {
    if ((_DWORD)result) {
      return *((unsigned int *)this + 103);
    }
    else {
      return *((unsigned int *)this + 101);
    }
  }

  return result;
}

uint64_t icu::FCDUIterCollationIterator::handleNextCE32( icu::FCDUIterCollationIterator *this, int *a2, UErrorCode *a3)
{
  while (1)
  {
    while (1)
    {
      int v6 = *((_DWORD *)this + 100);
      if (v6 == 2)
      {
        if (*((_DWORD *)this + 102) != *((_DWORD *)this + 103))
        {
          *a2 = (*(uint64_t (**)(void))(*((void *)this + 49) + 72LL))();
          ++*((_DWORD *)this + 102);
          return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16LL)
                                 + 4LL
                                 * ((*a2 & 0x1F)
                                  + 4 * *(unsigned __int16 *)(**((void **)this + 1) + 2LL * (*a2 >> 5))));
        }

        goto LABEL_20;
      }

      if (v6) {
        break;
      }
      unsigned int v7 = (*(uint64_t (**)(void))(*((void *)this + 49) + 72LL))();
      *a2 = v7;
      if ((v7 & 0x80000000) != 0) {
        return 192LL;
      }
      if (v7 < 0xC0) {
        return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16LL)
      }
                               + 4LL
                               * ((*a2 & 0x1F)
                                + 4 * *(unsigned __int16 *)(**((void **)this + 1) + 2LL * (*a2 >> 5))));
      if (!icu::CollationFCD::tcccIndex[(unint64_t)v7 >> 5]) {
        return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16LL)
      }
                               + 4LL
                               * ((*a2 & 0x1F)
                                + 4 * *(unsigned __int16 *)(**((void **)this + 1) + 2LL * (*a2 >> 5))));
      if (((icu::CollationFCD::tcccBits[icu::CollationFCD::tcccIndex[(unint64_t)v7 >> 5]] >> v7) & 1) == 0) {
        return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16LL)
      }
                               + 4LL
                               * ((*a2 & 0x1F)
                                + 4 * *(unsigned __int16 *)(**((void **)this + 1) + 2LL * (*a2 >> 5))));
      if ((v7 & 0x1FFF01) != 0xF01)
      {
        int v8 = (*(uint64_t (**)(void))(*((void *)this + 49) + 64LL))();
        if (v8 < 768
          || !icu::CollationFCD::lcccIndex[(unint64_t)v8 >> 5]
          || ((icu::CollationFCD::lcccBits[icu::CollationFCD::lcccIndex[(unint64_t)v8 >> 5]] >> v8) & 1) == 0)
        {
          return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16LL)
                                 + 4LL
                                 * ((*a2 & 0x1F)
                                  + 4 * *(unsigned __int16 *)(**((void **)this + 1) + 2LL * (*a2 >> 5))));
        }
      }

      (*(void (**)(void))(*((void *)this + 49) + 80LL))();
      if (!icu::FCDUIterCollationIterator::nextSegment(this, a3))
      {
        *a2 = -1;
        return 192LL;
      }
    }

    if (v6 < 3) {
      goto LABEL_20;
    }
    uint64_t v9 = *((int *)this + 102);
    unsigned int v10 = *((unsigned __int16 *)this + 216);
    unsigned int v12 = *((_DWORD *)this + 109);
    if ((_DWORD)v9 != v12) {
      goto LABEL_22;
    }
LABEL_20:
    icu::FCDUIterCollationIterator::switchToForward((uint64_t)this);
  }

  if ((_DWORD)v9 == v10 >> 5) {
    goto LABEL_20;
  }
  unsigned int v12 = v10 >> 5;
LABEL_22:
  *((_DWORD *)this + 102) = v9 + 1;
  if (v12 <= v9)
  {
    int v14 = 0xFFFF;
  }

  else
  {
    if ((v10 & 2) != 0) {
      uint64_t v13 = (char *)this + 434;
    }
    else {
      uint64_t v13 = (char *)*((void *)this + 56);
    }
    int v14 = *(unsigned __int16 *)&v13[2 * v9];
  }

  *a2 = v14;
  return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16LL)
                         + 4LL
                         * ((*a2 & 0x1F)
                          + 4 * *(unsigned __int16 *)(**((void **)this + 1) + 2LL * (*a2 >> 5))));
}

uint64_t icu::FCDUIterCollationIterator::nextSegment(icu::FCDUIterCollationIterator *this, UErrorCode *a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  unsigned __int16 v5 = 0;
  *((_DWORD *)this + 102) = (*(uint64_t (**)(void))(*((void *)this + 49) + 32LL))();
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  uint64_t v25 = 0LL;
  __int128 v24 = 0u;
  unint64_t v21 = off_18971B688;
  LOWORD(v22) = 2;
  while (1)
  {
    UChar32 v6 = uiter_next32(*((UCharIterator **)this + 49));
    if (v6 < 0) {
      goto LABEL_23;
    }
    unsigned int v7 = v6;
    unsigned int v8 = sub_1807E8B6C(*((void *)this + 52), v6);
    unsigned int v9 = v8;
    if (v8 > 0xFF) {
      break;
    }
    if ((unsigned __int16)v22 > 0x1Fu)
    {
      uiter_previous32(*((UCharIterator **)this + 49));
LABEL_23:
      int v15 = *((_DWORD *)this + 102);
      else {
        int v16 = v15 + ((unsigned __int16)v22 >> 5);
      }
      *((_DWORD *)this + 103) = v16;
      uint64_t v2 = 1LL;
      (*(void (**)(void))(*((void *)this + 49) + 40LL))();
      uint64_t v17 = 2LL;
      *((_DWORD *)this + 100) = 2;
      goto LABEL_33;
    }

    icu::UnicodeString::append((uint64_t)&v21, v7);
LABEL_15:
    unsigned __int16 v5 = v9;
    if (!(_BYTE)v9) {
      goto LABEL_23;
    }
  }

  unsigned int v10 = v8 >> 8;
  icu::UnicodeString::append((uint64_t)&v21, v7);
  if (v10 >= v5 && v9 != 33156 && v9 != 33154) {
    goto LABEL_15;
  }
  UChar32 v13 = uiter_next32(*((UCharIterator **)this + 49));
  if ((v13 & 0x80000000) == 0)
  {
    UChar32 v14 = v13;
    while (sub_1807E8B6C(*((void *)this + 52), v14) > 0xFF)
    {
      icu::UnicodeString::append((uint64_t)&v21, v14);
      UChar32 v14 = uiter_next32(*((UCharIterator **)this + 49));
      if (v14 < 0) {
        goto LABEL_28;
      }
    }

    uiter_previous32(*((UCharIterator **)this + 49));
  }

uint64_t icu::FCDUIterCollationIterator::switchToForward(uint64_t this)
{
  UChar v1 = (_DWORD *)this;
  int v2 = *(_DWORD *)(this + 400);
  if (v2 == 4)
  {
    this = (*(uint64_t (**)(void))(*(void *)(this + 392) + 40LL))();
LABEL_6:
    int v4 = 0;
    v1[101] = v1[103];
    goto LABEL_8;
  }

  if (v2 == 2)
  {
    int v4 = 0;
    goto LABEL_8;
  }

  if (v2 != 1) {
    goto LABEL_6;
  }
  this = (*(uint64_t (**)(void))(*(void *)(this + 392) + 32LL))();
  BOOL v3 = this != v1[103];
  v1[102] = this;
  v1[101] = this;
  int v4 = 2 * v3;
LABEL_8:
  v1[100] = v4;
  return this;
}

uint64_t icu::FCDUIterCollationIterator::handleGetTrailSurrogate(icu::FCDUIterCollationIterator *this)
{
  if (*((int *)this + 100) > 2)
  {
    uint64_t v4 = *((int *)this + 102);
    unsigned int v5 = *((unsigned __int16 *)this + 216);
    else {
      unsigned int v6 = v5 >> 5;
    }
    if (v6 <= v4)
    {
      return 0xFFFFLL;
    }

    else
    {
      if ((v5 & 2) != 0) {
        unsigned int v8 = (char *)this + 434;
      }
      else {
        unsigned int v8 = (char *)*((void *)this + 56);
      }
      uint64_t result = *(unsigned __int16 *)&v8[2 * v4];
      if ((result & 0xFC00) == 0xDC00) {
        *((_DWORD *)this + 102) = v4 + 1;
      }
    }
  }

  else
  {
    unsigned int v2 = (*(uint64_t (**)(void))(*((void *)this + 49) + 72LL))();
    unsigned __int16 v3 = v2;
    if (v2 >> 10 == 55)
    {
      if (*((_DWORD *)this + 100) == 2) {
        ++*((_DWORD *)this + 102);
      }
    }

    else if ((v2 & 0x80000000) == 0)
    {
      (*(void (**)(void))(*((void *)this + 49) + 80LL))();
    }

    return v3;
  }

  return result;
}

uint64_t *icu::FCDUIterCollationIterator::nextCodePoint(icu::FCDUIterCollationIterator *this, UErrorCode *a2)
{
  while (1)
  {
    while (1)
    {
      int v4 = *((_DWORD *)this + 100);
      if (v4 == 2)
      {
        if (*((_DWORD *)this + 102) == *((_DWORD *)this + 103)) {
          goto LABEL_20;
        }
        uint64_t v11 = (uint64_t *)uiter_next32(*((UCharIterator **)this + 49));
LABEL_27:
        unsigned int v6 = v11;
        else {
          int v12 = 2;
        }
        *((_DWORD *)this + 102) += v12;
        return v6;
      }

      if (!v4) {
        break;
      }
      if (v4 >= 3)
      {
        unsigned int v8 = *((__int16 *)this + 216) < 0
        int v9 = *((_DWORD *)this + 102);
        if (v9 != (_DWORD)v8)
        {
          uint64_t v11 = icu::UnicodeString::char32At(v8, (icu::FCDUIterCollationIterator *)((char *)this + 424), v9);
          goto LABEL_27;
        }
      }

uint64_t *icu::FCDUIterCollationIterator::previousCodePoint( icu::FCDUIterCollationIterator *this, UErrorCode *a2)
{
  while (1)
  {
    while (1)
    {
      int v4 = *((_DWORD *)this + 100);
      if (v4 != 2) {
        break;
      }
      if (*((_DWORD *)this + 102) != *((_DWORD *)this + 101))
      {
        unsigned int v10 = (uint64_t *)uiter_previous32(*((UCharIterator **)this + 49));
LABEL_31:
        unsigned int v6 = v10;
        else {
          int v11 = -1;
        }
        *((_DWORD *)this + 102) += v11;
        return v6;
      }

uint64_t icu::FCDUIterCollationIterator::previousSegment( icu::FCDUIterCollationIterator *this, UErrorCode *a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  LOBYTE(v5) = 0;
  *((_DWORD *)this + 102) = (*(uint64_t (**)(void))(*((void *)this + 49) + 32LL))();
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  uint64_t v25 = 0LL;
  __int128 v24 = 0u;
  unint64_t v21 = off_18971B688;
  LOWORD(v22) = 2;
  while (1)
  {
    UChar32 v6 = uiter_previous32(*((UCharIterator **)this + 49));
    if (v6 < 0) {
      goto LABEL_33;
    }
    unsigned int v7 = v6;
    unsigned int v8 = sub_1807E8B6C(*((void *)this + 52), v6);
    if (!(_BYTE)v8)
    {
      if ((unsigned __int16)v22 > 0x1Fu)
      {
        uiter_next32(*((UCharIterator **)this + 49));
LABEL_33:
        if ((v22 & 0x8000u) == 0LL) {
          int v19 = (unsigned __int16)v22 >> 5;
        }
        else {
          int v19 = DWORD1(v22);
        }
        *((_DWORD *)this + 101) = *((_DWORD *)this + 102) - v19;
        uint64_t v2 = 1LL;
        (*(void (**)(void))(*((void *)this + 49) + 40LL))();
        uint64_t v15 = 2LL;
        *((_DWORD *)this + 100) = 2;
        goto LABEL_39;
      }

      icu::UnicodeString::append((uint64_t)&v21, v7);
      goto LABEL_16;
    }

    icu::UnicodeString::append((uint64_t)&v21, v7);
    if ((_BYTE)v5 && v8 > v5)
    {
      if (v8 >= 0x100) {
        break;
      }
      goto LABEL_24;
    }

    if (v8 == 33154 || v8 == 33156) {
      break;
    }
LABEL_16:
    unsigned int v5 = v8 >> 8;
    if (v8 <= 0xFF) {
      goto LABEL_33;
    }
  }

  do
  {
    UChar32 v10 = uiter_previous32(*((UCharIterator **)this + 49));
    if (v10 < 0) {
      break;
    }
    unsigned int v11 = v10;
    unsigned int v12 = sub_1807E8B6C(*((void *)this + 52), v10);
    if (!v12)
    {
      uiter_next32(*((UCharIterator **)this + 49));
      break;
    }

    unsigned int v13 = v12;
    icu::UnicodeString::append((uint64_t)&v21, v11);
  }

  while (v13 > 0xFF);
LABEL_24:
  if ((v22 & 0x8000u) == 0LL) {
    int v14 = (unsigned __int16)v22 >> 5;
  }
  else {
    int v14 = DWORD1(v22);
  }
  icu::UnicodeString::doReverse((icu::UnicodeString *)&v21, 0, v14);
  icu::Normalizer2Impl::decompose( *((UChar **)this + 52),  (const icu::UnicodeString *)&v21,  (icu::FCDUIterCollationIterator *)((char *)this + 424),  a2);
  uint64_t v2 = 0LL;
  uint64_t v15 = *(unsigned int *)a2;
  if ((int)v15 <= 0)
  {
    int v16 = *((_DWORD *)this + 102);
    *((_DWORD *)this + 103) = v16;
    int v17 = (unsigned __int16)v22 >> 5;
    if ((v22 & 0x8000u) != 0LL) {
      int v17 = DWORD1(v22);
    }
    *((_DWORD *)this + 101) = v16 - v17;
    *((_DWORD *)this + 100) = 4;
    unsigned int v18 = *((unsigned __int16 *)this + 216);
    if ((v18 & 0x8000) != 0) {
      uint64_t v15 = *((unsigned int *)this + 109);
    }
    else {
      uint64_t v15 = v18 >> 5;
    }
    *((_DWORD *)this + 102) = v15;
    uint64_t v2 = 1LL;
  }

uint64_t icu::FCDUIterCollationIterator::switchToBackward(uint64_t this)
{
  UChar v1 = (_DWORD *)this;
  int v2 = *(_DWORD *)(this + 400);
  if (v2 == 3)
  {
    this = (*(uint64_t (**)(void))(*(void *)(this + 392) + 40LL))();
    goto LABEL_8;
  }

  if (v2 == 2)
  {
LABEL_9:
    int v3 = 1;
    goto LABEL_10;
  }

  if (v2)
  {
LABEL_8:
    v1[103] = v1[101];
    goto LABEL_9;
  }

  this = (*(uint64_t (**)(void))(*(void *)(this + 392) + 32LL))();
  v1[102] = this;
  v1[103] = this;
  if ((_DWORD)this == v1[101]) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
LABEL_10:
  v1[100] = v3;
  return this;
}

uint64_t *icu::FCDUIterCollationIterator::forwardNumCodePoints(uint64_t *this, int a2, UErrorCode *a3)
{
  if (a2 >= 1)
  {
    int v4 = a2;
    unsigned int v5 = (icu::FCDUIterCollationIterator *)this;
    do
    {
      this = icu::FCDUIterCollationIterator::nextCodePoint(v5, a3);
      BOOL v6 = __OFSUB__(v4--, 1);
    }

    while ((this & 0x80000000) == 0 && !((v4 < 0) ^ v6 | (v4 == 0)));
  }

  return this;
}

uint64_t *icu::FCDUIterCollationIterator::backwardNumCodePoints(uint64_t *this, int a2, UErrorCode *a3)
{
  if (a2 >= 1)
  {
    int v4 = a2;
    unsigned int v5 = (icu::FCDUIterCollationIterator *)this;
    do
    {
      this = icu::FCDUIterCollationIterator::previousCodePoint(v5, a3);
      BOOL v6 = __OFSUB__(v4--, 1);
    }

    while ((this & 0x80000000) == 0 && !((v4 < 0) ^ v6 | (v4 == 0)));
  }

  return this;
}

BOOL icu::FCDUIterCollationIterator::normalize(UChar **this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  return *a3 < U_ILLEGAL_ARGUMENT_ERROR;
}

uint64_t *ulistfmt_open(char *a1, UErrorCode *a2)
{
  v9[28] = *(const char **)MEMORY[0x1895F89C0];
  int v3 = (uint64_t *)*(unsigned int *)a2;
  icu::Locale::Locale(v3, (icu::Locale *)v9, a1, 0LL, 0LL, 0LL);
  uint64_t Instance = icu::ListFormatter::createInstance(v9, a2, v6, v7);
  icu::Locale::~Locale(v8, (icu::Locale *)v9);
  if (*(int *)a2 >= 1 && Instance)
  {
    (*(void (**)(uint64_t *))(*Instance + 8))(Instance);
    return 0LL;
  }

  return Instance;
}

uint64_t *ulistfmt_openForType(char *a1, int a2, unsigned int a3, UErrorCode *a4)
{
  v11[28] = *(const char **)MEMORY[0x1895F89C0];
  int v4 = (uint64_t *)*(unsigned int *)a4;
  icu::Locale::Locale(v4, (icu::Locale *)v11, a1, 0LL, 0LL, 0LL);
  uint64_t Instance = icu::ListFormatter::createInstance(v11, a2, a3, a4);
  icu::Locale::~Locale(v10, (icu::Locale *)v11);
  if (*(int *)a4 >= 1 && Instance)
  {
    (*(void (**)(uint64_t *))(*Instance + 8))(Instance);
    return 0LL;
  }

  return Instance;
}

uint64_t ulistfmt_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t ulistfmt_openResult(int *a1, unint64_t a2)
{
  if (*a1 > 0) {
    return 0LL;
  }
  uint64_t result = icu::UMemory::operator new((icu::UMemory *)0x30, a2);
  if (result)
  {
    *(_DWORD *)uint64_t result = 1430672896;
    *(_DWORD *)(result + 16) = 1179407188;
    *(void *)(result + 24) = off_1897252A8;
    *(void *)(result + 32) = 0LL;
    *(_DWORD *)(result + 40) = 27;
    *(void *)(result + 8) = result + 24;
  }

  else
  {
    *a1 = 7;
  }

  return result;
}

uint64_t ulistfmt_resultAsValue(uint64_t result, int *a2)
{
  int v2 = *a2;
  if (*a2 > 0)
  {
    uint64_t result = 0LL;
    goto LABEL_8;
  }

  if (result)
  {
    if (*(_DWORD *)(result + 16) == 1179407188) {
      goto LABEL_8;
    }
    int v2 = 3;
  }

  else
  {
    int v2 = 1;
  }

  uint64_t result = 0LL;
  *a2 = v2;
LABEL_8:
  if (v2 >= 1) {
    return 0LL;
  }
  return result;
}

void ulistfmt_closeResult(_DWORD *a1)
{
  if (a1)
  {
    if (a1[4] == 1179407188)
    {
      icu::FormattedList::~FormattedList((icu::FormattedList *)(a1 + 6));
      a1[4] = 0;
      *a1 = 0;
      icu::UMemory::operator delete(a1);
    }
  }

uint64_t ulistfmt_format( icu::ListFormatter *a1, const UChar **a2, unint64_t a3, unsigned int a4, char *a5, unsigned int a6, int *a7)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  if (*a7 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (a5)
  {
    if ((a6 & 0x80000000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }

  if (a6)
  {
LABEL_9:
    *a7 = 1;
    return 0xFFFFFFFFLL;
  }

char *sub_1809BCE0C(const UChar **a1, unint64_t a2, unsigned int a3, char *a4, void **a5, int *a6)
{
  if ((a3 & 0x80000000) != 0 || (UChar32 v10 = (unsigned int *)a2, (v11 = a1) == 0LL) && a3)
  {
    a4 = 0LL;
    *a6 = 1;
  }

  else
  {
    if (a3 >= 5)
    {
      unsigned int v13 = (void *)icu::UMemory::operator new[]((icu::UMemory *)(((unint64_t)a3 << 6) | 0x10), a2);
      if (v13)
      {
        *unsigned int v13 = 64LL;
        v13[1] = a3;
        int v14 = (char *)(v13 + 2);
        uint64_t v15 = v13 + 2;
        do
        {
          *uint64_t v15 = off_18971B688;
          *((_WORD *)v15 + 4) = 2;
          v15 += 8;
        }

        while (v15 != &v13[8 * (unint64_t)a3 + 2]);
      }

      else
      {
        int v14 = 0LL;
      }

      sub_1809BD0F4(a5, v14, a6);
      if (*a6 > 0) {
        return 0LL;
      }
      a4 = (char *)*a5;
    }

    if (v10)
    {
      if ((int)a3 >= 1)
      {
        uint64_t v16 = 0LL;
        unint64_t v17 = (unint64_t)a3 << 6;
        do
        {
          unsigned int v19 = *v10++;
          int v18 = v19;
          int v20 = v19 >> 31;
          unint64_t v21 = *v11++;
          __int128 v25 = v21;
          icu::UnicodeString::setTo((icu::UnicodeString *)&a4[v16], v20, &v25, v18);
          v16 += 64LL;
        }

        while (v17 != v16);
      }
    }

    else if ((int)a3 >= 1)
    {
      uint64_t v22 = 0LL;
      unint64_t v23 = (unint64_t)a3 << 6;
      do
      {
        __int128 v24 = *v11++;
        __int128 v26 = v24;
        icu::UnicodeString::setTo((icu::UnicodeString *)&a4[v22], 1, &v26, -1);
        v22 += 64LL;
      }

      while (v23 != v22);
    }
  }

  return a4;
}

icu::ListFormatter *ulistfmt_formatStringsToResult( icu::ListFormatter *result, const UChar **a2, unint64_t a3, unsigned int a4, uint64_t a5, int *a6)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (*a6 > 0) {
    return result;
  }
  if (!a5)
  {
    int v15 = 1;
LABEL_13:
    *a6 = v15;
    return result;
  }

  if (*(_DWORD *)(a5 + 16) != 1179407188)
  {
    int v15 = 3;
    goto LABEL_13;
  }

  int v9 = result;
  uint64_t v10 = 0LL;
  memset(v18, 0, sizeof(v18));
  do
  {
    unsigned int v11 = &v18[v10];
    *(void *)unsigned int v11 = off_18971B688;
    *((_WORD *)v11 + 4) = 2;
    v10 += 4LL;
  }

  while (v10 != 16);
  unint64_t v17 = 0LL;
  uint64_t v12 = sub_1809BCE0C(a2, a3, a4, (char *)v18, &v17, a6);
  if (*a6 <= 0)
  {
    icu::ListFormatter::formatStringsToValue(v9, (const icu::UnicodeString *)v12, (UErrorCode *)a6, a4, (uint64_t)v16);
    icu::FormattedList::operator=(a5 + 24, (uint64_t)v16);
    icu::FormattedList::~FormattedList((icu::FormattedList *)v16);
  }

  sub_1807CCEEC((uint64_t *)&v17);
  for (uint64_t i = 12LL; i != -4; i -= 4LL)
    uint64_t result = (icu::ListFormatter *)icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v18[i]);
  return result;
}

void sub_1809BD0F4(void **a1, char *a2, int *a3)
{
  if (*a3 <= 0)
  {
    uint64_t v10 = *a1;
    if (*a1)
    {
      unsigned int v11 = (char *)(v10 - 2);
      uint64_t v12 = *(v10 - 1);
      if (v12)
      {
        uint64_t v13 = v12 << 6;
        int v14 = (char *)(v10 - 8);
        do
        {
          icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v14[v13]);
          v13 -= 64LL;
        }

        while (v13);
      }

      icu::UMemory::operator delete[](v11);
    }

    *a1 = a2;
    if (!a2) {
      *a3 = 7;
    }
  }

  else if (a2)
  {
    int v4 = a2 - 16;
    unsigned int v5 = (void *)*((void *)a2 - 1);
    if (v5)
    {
      uint64_t v6 = (void)v5 << 6;
      unsigned int v7 = a2 - 64;
      do
      {
        icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)&v7[v6]);
        v6 -= 64LL;
      }

      while (v6);
    }

    icu::UMemory::operator delete[](v4);
  }

uint64_t u_formatMessage( const char *a1, UChar *a2, int a3, UChar *a4, int a5, UErrorCode *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return u_vformatMessage(a1, a2, a3, a4, a5, (double *)&a9, a6);
}

uint64_t u_vformatMessage(const char *a1, UChar *a2, int a3, UChar *a4, int a5, double *a6, UErrorCode *a7)
{
  unsigned int v11 = umsg_open(a2, a3, a1, 0LL, a7);
  uint64_t v12 = umsg_vformat((uint64_t)v11, a4, a5, a6, a7);
  if (v11) {
    (*(void (**)(unsigned __int8 *))(*(void *)v11 + 8LL))(v11);
  }
  return v12;
}

unsigned __int8 *umsg_open(UChar *s, int a2, const char *a3, UParseError *a4, UErrorCode *a5)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if (a5 && *(int *)a5 <= 0)
  {
    if (!s || a2 <= -2)
    {
      uint64_t v6 = 0LL;
      *a5 = U_ILLEGAL_ARGUMENT_ERROR;
      return v6;
    }

    uint64_t v20 = 0LL;
    __int128 v11 = 0uLL;
    memset(v19, 0, sizeof(v19));
    if (a4) {
      uint64_t v12 = a4;
    }
    else {
      uint64_t v12 = (UParseError *)v19;
    }
    if (a2 == -1)
    {
      u_strlen(s);
      __int128 v11 = 0uLL;
    }

    void v22[2] = v11;
    v22[3] = v11;
    v22[0] = v11;
    v22[1] = v11;
    int v18 = s;
    icu::UnicodeString::UnicodeString(v22, a2 == -1, &v18);
    unint64_t v17 = v18;
    uint64_t v6 = (unsigned __int8 *)icu::UMemory::operator new((uint64_t *)&v17, (icu::UMemory *)0x330, v13);
    if (v6)
    {
      icu::Locale::Locale(v14, (icu::Locale *)v21, a3, 0LL, 0LL, 0LL);
      icu::MessageFormat::MessageFormat( (icu::MessageFormat *)v6,  (const icu::UnicodeString *)v22,  (const icu::Locale *)v21,  v12,  a5);
      icu::Locale::~Locale(v15, (icu::Locale *)v21);
      uint64_t v16 = *(unsigned int *)a5;
      uint64_t v16 = v6[712];
      if (!v6[712]) {
        goto LABEL_19;
      }
      uint64_t v16 = 65804LL;
    }

    else
    {
      uint64_t v16 = 7LL;
    }

    *a5 = v16;
LABEL_19:
    icu::UnicodeString::~UnicodeString((void *)v16, (icu::UnicodeString *)v22);
    return v6;
  }

  return 0LL;
}

uint64_t umsg_vformat(uint64_t a1, UChar *a2, int a3, double *a4, UErrorCode *a5)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  uint64_t v42 = a4;
  if (!a1 || a3 < 0 || !a2 && a3)
  {
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return 0xFFFFFFFFLL;
  }

  uint64_t v11 = *(unsigned int *)(a1 + 704);
  uint64_t v12 = *(int **)(a1 + 696);
  else {
    int v13 = *(_DWORD *)(a1 + 704);
  }
  unint64_t v14 = v13;
  uint64_t v15 = 112LL * v13;
  BOOL v16 = !is_mul_ok(v14, 0x70uLL);
  BOOL v17 = __CFADD__(v15, 16LL);
  uint64_t v18 = v15 + 16;
  if (v17) {
    BOOL v16 = 1;
  }
  if (v16) {
    uint64_t v19 = -1LL;
  }
  else {
    uint64_t v19 = v18;
  }
  uint64_t v20 = (void *)icu::UMemory::operator new[]((icu::UMemory *)v19, (unint64_t)a2);
  if (v20)
  {
    *uint64_t v20 = 112LL;
    v20[1] = v14;
    unint64_t v21 = (const icu::Formattable *)(v20 + 2);
    uint64_t v22 = 112 * v14;
    uint64_t v23 = (icu::Formattable *)(v20 + 2);
    do
    {
      uint64_t v23 = (icu::Formattable *)((char *)icu::Formattable::Formattable(v23) + 112);
      v22 -= 112LL;
    }

    while (v22);
  }

  else
  {
    unint64_t v21 = 0LL;
  }

  if ((int)v11 >= 1)
  {
    uint64_t v24 = v11;
    __int128 v25 = v21;
    do
    {
      int v26 = *v12++;
      switch(v26)
      {
        case 0:
          uint64_t v27 = v42++;
          icu::Formattable::setDate(v25, *v27);
          break;
        case 1:
          int v28 = v42++;
          icu::Formattable::setDouble(v25, *v28);
          break;
        case 2:
          uint64_t v29 = (int *)v42++;
          icu::Formattable::setLong(v25, *v29);
          break;
        case 3:
          uint64_t v30 = (uint64_t *)v42++;
          if (*v30)
          {
            icu::UnicodeString::UnicodeString((uint64_t)&v43, *v30);
            icu::Formattable::setString(v25, &v43);
            icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)&v43);
          }

          else
          {
            *a5 = U_ILLEGAL_ARGUMENT_ERROR;
          }

          break;
        case 4:
        case 6:
          ++v42;
          break;
        case 5:
          unsigned int v32 = (uint64_t *)v42++;
          icu::Formattable::setInt64(v25, *v32);
          break;
        default:
          abort();
      }

      __int128 v25 = (icu::Formattable *)((char *)v25 + 112);
      --v24;
    }

    while (v24);
  }

  __int128 v44 = 0u;
  uint64_t v47 = 0LL;
  __int128 v46 = 0u;
  __int128 v45 = 0u;
  __int128 v43 = (UChar *)off_18971B688;
  LOWORD(v44) = 2;
  v41[2] = 0LL;
  v41[0] = off_189723AC8;
  v41[1] = 0xFFFFFFFFLL;
  icu::MessageFormat::format( (icu::MessageFormat *)a1,  v21,  v11,  (icu::UnicodeString *)&v43,  (icu::FieldPosition *)v41,  a5);
  if (v21)
  {
    int v33 = (char *)v21 - 16;
    uint64_t v34 = *((void *)v21 - 1);
    if (v34)
    {
      uint64_t v35 = 112 * v34;
      uint64_t v36 = (char *)v21 - 112;
      do
      {
        icu::Formattable::~Formattable((icu::Formattable *)&v36[v35]);
        v35 -= 112LL;
      }

      while (v35);
    }

    icu::UMemory::operator delete[](v33);
  }

  uint64_t v37 = (UChar **)*(unsigned int *)a5;
  if ((int)v37 <= 0)
  {
    unint64_t v40 = a2;
    uint64_t v9 = icu::UnicodeString::extract((uint64_t)&v43, &v40, a3, (int *)a5);
    uint64_t v39 = v40;
    uint64_t v37 = &v39;
  }

  else
  {
    uint64_t v9 = 0xFFFFFFFFLL;
  }

  icu::FieldPosition::~FieldPosition(v37, (icu::FieldPosition *)v41);
  icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)&v43);
  return v9;
}

uint64_t umsg_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t u_formatMessageWithError( const char *a1, UChar *a2, int a3, UChar *a4, int a5, UParseError *a6, UErrorCode *a7, uint64_t a8, uint64_t a9)
{
  return u_vformatMessageWithError(a1, a2, a3, a4, a5, a6, (double *)&a9, a7);
}

uint64_t u_vformatMessageWithError( const char *a1, UChar *s, int a3, UChar *a4, int a5, UParseError *a6, double *a7, UErrorCode *a8)
{
  uint64_t v12 = umsg_open(s, a3, a1, a6, a8);
  uint64_t v13 = umsg_vformat((uint64_t)v12, a4, a5, a7, a8);
  if (v12) {
    (*(void (**)(unsigned __int8 *))(*(void *)v12 + 8LL))(v12);
  }
  return v13;
}

void *u_parseMessage( const char *a1, UChar *a2, int a3, UChar *a4, uint64_t a5, UErrorCode *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return u_vparseMessage(a1, a2, a3, a4, a5, &a9, a6);
}

void *u_vparseMessage(const char *a1, UChar *s, int a3, UChar *a4, uint64_t a5, uint64_t *a6, UErrorCode *a7)
{
  uint64_t v11 = umsg_open(s, a3, a1, 0LL, a7);
  int v13 = 0;
  uint64_t result = umsg_vparse(v11, a4, a5, &v13, a6, (int *)a7);
  if (v11) {
    return (void *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)v11 + 8LL))(v11);
  }
  return result;
}

void *umsg_vparse(void *result, UChar *s, uint64_t a3, int *a4, uint64_t *a5, int *a6)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  if (a6 && *a6 <= 0)
  {
    uint64_t v7 = (uint64_t)result;
    if (result && s && (int)a3 >= -1 && a4)
    {
      if ((_DWORD)a3 == -1) {
        a3 = u_strlen(s);
      }
      memset(v35, 0, sizeof(v35));
      icu::UnicodeString::UnicodeString((uint64_t)v35, (uint64_t)s, a3);
      uint64_t v10 = (*(uint64_t (**)(uint64_t, _OWORD *, int *, int *))(*(void *)v7 + 192LL))(v7, v35, a4, a6);
      uint64_t v11 = v10;
      __int128 v31 = 0u;
      uint64_t v34 = 0LL;
      __int128 v33 = 0u;
      __int128 v32 = 0u;
      uint64_t v30 = (UChar *)off_18971B688;
      LOWORD(v31) = 2;
      uint64_t v12 = *a4;
      if ((int)v12 >= 1)
      {
        uint64_t v13 = 0LL;
        unint64_t v14 = (UChar ***)v10;
        do
        {
          switch(icu::Formattable::getType((icu::Formattable *)v14))
          {
            case 0u:
            case 1u:
              uint64_t v15 = a5++;
              BOOL v16 = (void *)*v15;
              if (!v16) {
                goto LABEL_23;
              }
              *BOOL v16 = v14[1];
              break;
            case 2u:
              BOOL v17 = a5++;
              uint64_t v18 = (_DWORD *)*v17;
              if (!v18) {
                goto LABEL_23;
              }
              *uint64_t v18 = v14[1];
              break;
            case 3u:
              uint64_t v19 = a5++;
              uint64_t v20 = *v19;
              if (!*v19) {
                goto LABEL_23;
              }
              icu::UnicodeString::operator=(&v30, v14[1]);
              if ((v31 & 0x8000u) == 0LL) {
                int v21 = (unsigned __int16)v31 >> 5;
              }
              else {
                int v21 = DWORD1(v31);
              }
              icu::UnicodeString::doExtract((char *)&v30, 0, v21, v20, 0);
              *(_WORD *)(v20 + 2LL * v21) = 0;
              break;
            case 4u:
            case 6u:
              abort();
            case 5u:
              uint64_t v22 = a5++;
              uint64_t v23 = (void *)*v22;
              if (v23) {
                *uint64_t v23 = v14[1];
              }
              else {
LABEL_23:
              }
                *a6 = 1;
              break;
            default:
              break;
          }

          ++v13;
          uint64_t v12 = *a4;
          v14 += 14;
        }

        while (v13 < v12);
      }

      if (v11)
      {
        uint64_t v24 = (void *)(v11 - 16);
        uint64_t v25 = *(void *)(v11 - 8);
        if (v25)
        {
          uint64_t v26 = 112 * v25;
          uint64_t v27 = v11 - 112;
          do
          {
            icu::Formattable::~Formattable((icu::Formattable *)(v27 + v26));
            v26 -= 112LL;
          }

          while (v26);
        }

        icu::UMemory::operator delete[](v24);
      }

      icu::UnicodeString::~UnicodeString((void *)v12, (icu::UnicodeString *)&v30);
      return icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v35);
    }

    else
    {
      *a6 = 1;
    }
  }

  return result;
}

void *u_parseMessageWithError( const char *a1, UChar *a2, int a3, UChar *a4, uint64_t a5, UParseError *a6, UErrorCode *a7, uint64_t a8, uint64_t a9)
{
  return u_vparseMessageWithError(a1, a2, a3, a4, a5, &a9, a6, a7);
}

void *u_vparseMessageWithError( const char *a1, UChar *s, int a3, UChar *a4, uint64_t a5, uint64_t *a6, UParseError *a7, UErrorCode *a8)
{
  uint64_t v12 = umsg_open(s, a3, a1, a7, a8);
  int v14 = 0;
  uint64_t result = umsg_vparse(v12, a4, a5, &v14, a6, (int *)a8);
  if (v12) {
    return (void *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)v12 + 8LL))(v12);
  }
  return result;
}

uint64_t umsg_clone(uint64_t a1, int *a2)
{
  if (!a2) {
    return 0LL;
  }
  if (*a2 > 0) {
    return 0LL;
  }
  if (a1)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
    if (result) {
      return result;
    }
    int v4 = 7;
  }

  else
  {
    int v4 = 1;
  }

  uint64_t result = 0LL;
  *a2 = v4;
  return result;
}

void umsg_setLocale(uint64_t a1, const char *a2)
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    icu::Locale::Locale((icu::Locale *)v3, a2, 0LL, 0LL, 0LL);
    (*(void (**)(uint64_t, _BYTE *))(*(void *)a1 + 64LL))(a1, v3);
    icu::Locale::~Locale((icu::Locale *)v3);
  }

const char *umsg_getLocale(uint64_t a1)
{
  if (a1) {
    return *(const char **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 72LL))(a1) + 40);
  }
  else {
    return "";
  }
}

void *umsg_applyPattern(void *result, uint64_t a2, uint64_t a3, _OWORD *a4, int *a5)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (a5 && *a5 <= 0)
  {
    uint64_t v6 = result;
    if (!result || (!a2 ? (BOOL v7 = (_DWORD)a3 == 0) : (BOOL v7 = 1), v7 ? (v8 = 0) : (v8 = 1), (int)a3 < -1 || v8))
    {
      *a5 = 1;
    }

    else
    {
      uint64_t v12 = 0LL;
      memset(v11, 0, sizeof(v11));
      if (a4) {
        uint64_t v9 = a4;
      }
      else {
        uint64_t v9 = v11;
      }
      icu::UnicodeString::UnicodeString((uint64_t)v13, a2, a3);
      (*(void (**)(void *, _BYTE *, _OWORD *, int *))(*(void *)v6 + 88LL))(v6, v13, v9, a5);
      return icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v13);
    }
  }

  return result;
}

uint64_t umsg_toPattern(uint64_t a1, char *a2, unsigned int a3, int *a4)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (!a4 || *a4 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (!a1 || (a3 & 0x80000000) != 0 || !a2 && a3)
  {
    *a4 = 1;
    return 0xFFFFFFFFLL;
  }

  __int128 v13 = 0u;
  __int128 v14 = 0u;
  uint64_t v16 = 0LL;
  __int128 v15 = 0u;
  uint64_t v12 = off_18971B688;
  LOWORD(v13) = 2;
  if (a2 || a3) {
    icu::UnicodeString::setTo((icu::UnicodeString *)&v12, a2, 0, a3);
  }
  (*(void (**)(uint64_t, void (***)(icu::UnicodeString *__hidden)))(*(void *)a1 + 104LL))( a1,  &v12);
  uint64_t v11 = (UChar *)a2;
  uint64_t v8 = icu::UnicodeString::extract((uint64_t)&v12, &v11, a3, a4);
  uint64_t v10 = v11;
  icu::UnicodeString::~UnicodeString(&v10, (icu::UnicodeString *)&v12);
  return v8;
}

uint64_t umsg_format( uint64_t a1, UChar *a2, int a3, UErrorCode *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return umsg_vformat(a1, a2, a3, (double *)&a9, a4);
}

void *umsg_parse( void *a1, UChar *a2, uint64_t a3, int *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return umsg_vparse(a1, a2, a3, a4, &a9, a5);
}

uint64_t umsg_autoQuoteApostrophe(UChar *s, int32_t a2, uint64_t a3, int a4, int *a5)
{
  if (!a5 || *a5 > 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = s;
  if (!s || a2 < -1 || !a3 && a4 >= 1)
  {
    *a5 = 1;
    return 0xFFFFFFFFLL;
  }

  if (a2 == -1) {
    a2 = u_strlen(s);
  }
  if (a2 < 1)
  {
    uint64_t v18 = 0LL;
    return u_terminateUChars(a3, a4, v18, a5);
  }

  LODWORD(v10) = 0;
  int v11 = 0;
  int v12 = 0;
  uint64_t v13 = a2;
  while (2)
  {
    int v15 = *v6++;
    int v14 = v15;
    switch(v12)
    {
      case 0:
        int v12 = v14 == 39;
        if (v14 == 123)
        {
          int v12 = 3;
          ++v11;
        }

        goto LABEL_31;
      case 1:
        if (v14 == 39)
        {
          int v12 = 0;
          goto LABEL_31;
        }

        if (v14 == 125 || v14 == 123)
        {
          int v12 = 2;
LABEL_31:
          int v17 = v10;
          goto LABEL_32;
        }

        int v12 = 0;
        int v17 = v10 + 1;
LABEL_32:
        if (v17 < a4) {
          *(_WORD *)(a3 + 2LL * v17) = v14;
        }
        uint64_t v10 = v17 + 1LL;
        if (--v13) {
          continue;
        }
        if ((v12 - 1) >= 2)
        {
          uint64_t v18 = v17 + 1LL;
        }

        else
        {
          uint64_t v18 = (v17 + 2);
        }

        return u_terminateUChars(a3, a4, v18, a5);
      case 2:
        int v12 = 2 * (v14 != 39);
        goto LABEL_31;
      case 3:
        int v16 = v11 - 1;
        if (v11 == 1) {
          int v12 = 0;
        }
        else {
          int v12 = 3;
        }
        if (v14 == 123) {
          ++v11;
        }
        if (v14 == 125) {
          int v11 = v16;
        }
        else {
          int v12 = 3;
        }
        goto LABEL_31;
      default:
        goto LABEL_31;
    }
  }

void *icu::UnescapeTransliterator::getStaticClassID(icu::UnescapeTransliterator *this)
{
  return &unk_18C535D38;
}

void *sub_1809BE134()
{
  return &unk_18C535D38;
}

void *sub_1809BE140()
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  uint64_t v27 = "H";
  unint64_t v0 = icu::UnicodeString::UnicodeString(v28, 1LL, &v27);
  icu::Transliterator::_registerFactory(v0, (uint64_t)sub_1809BE348, 0LL);
  int v2 = icu::UnicodeString::~UnicodeString(v1, (icu::UnicodeString *)v28);
  uint64_t v26 = "H";
  unint64_t v3 = icu::UnicodeString::UnicodeString(v2, 1LL, &v26);
  icu::Transliterator::_registerFactory(v3, (uint64_t)sub_1809BE3A4, 0LL);
  unsigned int v5 = icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v28);
  uint64_t v25 = L"Hex-Any/C";
  unint64_t v6 = icu::UnicodeString::UnicodeString(v5, 1LL, &v25);
  icu::Transliterator::_registerFactory(v6, (uint64_t)sub_1809BE400, 0LL);
  uint64_t v8 = icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v28);
  uint64_t v24 = L"Hex-Any/XML";
  unint64_t v9 = icu::UnicodeString::UnicodeString(v8, 1LL, &v24);
  icu::Transliterator::_registerFactory(v9, (uint64_t)sub_1809BE45C, 0LL);
  int v11 = icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v28);
  uint64_t v23 = L"Hex-Any/XML10";
  unint64_t v12 = icu::UnicodeString::UnicodeString(v11, 1LL, &v23);
  icu::Transliterator::_registerFactory(v12, (uint64_t)sub_1809BE4B8, 0LL);
  int v14 = icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v28);
  uint64_t v22 = L"Hex-Any/Perl";
  unint64_t v15 = icu::UnicodeString::UnicodeString(v14, 1LL, &v22);
  icu::Transliterator::_registerFactory(v15, (uint64_t)sub_1809BE514, 0LL);
  int v17 = icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v28);
  int v21 = "H";
  unint64_t v18 = icu::UnicodeString::UnicodeString(v17, 1LL, &v21);
  icu::Transliterator::_registerFactory(v18, (uint64_t)sub_1809BE570, 0LL);
  return icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v28);
}

icu::Transliterator *sub_1809BE348@<X0>(UChar **a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  unsigned int v5 = v4;
  if (v4)
  {
    icu::Transliterator::Transliterator(v4, a1, 0LL);
    *(void *)unsigned int v5 = off_18972CCE0;
    *((void *)v5 + 11) = sub_1809BE5CC(byte_180A3DF64);
  }

  return v5;
}

icu::Transliterator *sub_1809BE3A4@<X0>(UChar **a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  unsigned int v5 = v4;
  if (v4)
  {
    icu::Transliterator::Transliterator(v4, a1, 0LL);
    *(void *)unsigned int v5 = off_18972CCE0;
    *((void *)v5 + 11) = sub_1809BE5CC(byte_180A3DF74);
  }

  return v5;
}

icu::Transliterator *sub_1809BE400@<X0>(UChar **a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  unsigned int v5 = v4;
  if (v4)
  {
    icu::Transliterator::Transliterator(v4, a1, 0LL);
    *(void *)unsigned int v5 = off_18972CCE0;
    *((void *)v5 + 11) = sub_1809BE5CC(byte_180A3DF84);
  }

  return v5;
}

icu::Transliterator *sub_1809BE45C@<X0>(UChar **a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  unsigned int v5 = v4;
  if (v4)
  {
    icu::Transliterator::Transliterator(v4, a1, 0LL);
    *(void *)unsigned int v5 = off_18972CCE0;
    *((void *)v5 + 11) = sub_1809BE5CC(byte_180A3DFA2);
  }

  return v5;
}

icu::Transliterator *sub_1809BE4B8@<X0>(UChar **a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  unsigned int v5 = v4;
  if (v4)
  {
    icu::Transliterator::Transliterator(v4, a1, 0LL);
    *(void *)unsigned int v5 = off_18972CCE0;
    *((void *)v5 + 11) = sub_1809BE5CC(byte_180A3DFB6);
  }

  return v5;
}

icu::Transliterator *sub_1809BE514@<X0>(UChar **a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  unsigned int v5 = v4;
  if (v4)
  {
    icu::Transliterator::Transliterator(v4, a1, 0LL);
    *(void *)unsigned int v5 = off_18972CCE0;
    *((void *)v5 + 11) = sub_1809BE5CC(byte_180A3DFC8);
  }

  return v5;
}

icu::Transliterator *sub_1809BE570@<X0>(UChar **a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  unsigned int v5 = v4;
  if (v4)
  {
    icu::Transliterator::Transliterator(v4, a1, 0LL);
    *(void *)unsigned int v5 = off_18972CCE0;
    *((void *)v5 + 11) = sub_1809BE5CC(byte_180A3DFDC);
  }

  return v5;
}

void *sub_1809BE5CC(char *a1)
{
  uint64_t v2 = 0LL;
  do
  {
    int v3 = *(__int16 *)&a1[v2];
    v2 += 2LL;
  }

  while (v3 != -1);
  size_t v4 = v2 & 0xFFFFFFFE;
  unsigned int v5 = uprv_malloc(v4);
  unint64_t v6 = v5;
  if (v5) {
    memcpy(v5, a1, v4);
  }
  return v6;
}

void sub_1809BE62C(void **a1)
{
  *a1 = off_18972CCE0;
  uprv_free(a1[11]);
  icu::Transliterator::~Transliterator((icu::Transliterator *)a1);
}

void sub_1809BE660(void **a1)
{
  *a1 = off_18972CCE0;
  uprv_free(a1[11]);
  icu::Transliterator::~Transliterator((icu::Transliterator *)a1);
  icu::UMemory::operator delete(v2);
}

icu::Transliterator *sub_1809BE698@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  size_t v4 = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  unsigned int v5 = v4;
  if (v4)
  {
    icu::Transliterator::Transliterator(v4, (UChar **)a1);
    *(void *)unsigned int v5 = off_18972CCE0;
    *((void *)v5 + 11) = sub_1809BE5CC(*(char **)(a1 + 88));
  }

  return v5;
}

uint64_t sub_1809BE6EC(uint64_t result, uint64_t a2, _DWORD *a3, int a4)
{
  uint64_t v44 = *MEMORY[0x1895F89C0];
  uint64_t v4 = a3[2];
  int v5 = a3[3];
  uint64_t v7 = result;
  do
  {
    uint64_t v8 = *(unsigned __int16 **)(v7 + 88);
    unsigned int v9 = *v8;
    if (v9 == 0xFFFF) {
      goto LABEL_39;
    }
    int v10 = 0;
    uint64_t v42 = v4;
    unsigned int v37 = v4;
    int v38 = v5;
    while (1)
    {
      int v11 = &v8[v10];
      unint64_t v12 = v11[1];
      LOWORD(v13) = v11[2];
      unsigned int v39 = v11[3];
      int v14 = v10 + 5;
      unsigned int v15 = v11[4];
      uint64_t v16 = v4;
      unsigned int v41 = v9;
      int v40 = v10 + 5;
      if (!v9) {
        break;
      }
      uint64_t v17 = 0LL;
      uint64_t v18 = 2LL * v14;
      BOOL v19 = 1;
      unint64_t v20 = v9;
      while (1)
      {
        uint64_t v21 = v17;
        uint64_t v22 = v42 + v17;
        if (v17)
        {
        }

        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72LL))(a2, v22);
        if ((_DWORD)result == *(unsigned __int16 *)(*(void *)(v7 + 88) + v18 + 2 * v21))
        {
          uint64_t v17 = v21 + 1;
          BOOL v19 = v21 + 1 < v20;
          if (v20 != v21 + 1) {
            continue;
          }
        }

        if (v19) {
          goto LABEL_33;
        }
        uint64_t v16 = v42 + v21 + 1;
        int v5 = v38;
        goto LABEL_13;
      }

void *icu::UnicodeNameTransliterator::getStaticClassID(icu::UnicodeNameTransliterator *this)
{
  return &unk_18C535D39;
}

void *sub_1809BEA3C()
{
  return &unk_18C535D39;
}

icu::Transliterator *sub_1809BEA48(icu::Transliterator *a1, icu::UnicodeFilter *a2)
{
  v7[8] = *(UChar **)MEMORY[0x1895F89C0];
  unint64_t v6 = "A";
  icu::UnicodeString::UnicodeString(v7, 1LL, &v6);
  icu::Transliterator::Transliterator(a1, v7, a2);
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v7);
  *(void *)a1 = &off_18972CD90;
  return a1;
}

void sub_1809BEAF8(icu::Transliterator *a1)
{
}

icu::Transliterator *sub_1809BEB0C@<X0>(UChar **a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x58, a2);
  if (result)
  {
    uint64_t result = icu::Transliterator::Transliterator(result, a1);
    *(void *)uint64_t result = &off_18972CD90;
  }

  return result;
}

char *sub_1809BEB48(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  uint64_t result = (char *)uprv_getMaxCharNameLength();
  if ((_DWORD)result && (int32_t v6 = (int)result, (result = (char *)uprv_malloc((int)result)) != 0LL))
  {
    uint64_t v7 = result;
    uint64_t v8 = a3[2];
    int v9 = a3[3];
    memset(v28, 0, sizeof(v28));
    unsigned int v23 = L"\\N{";
    icu::UnicodeString::UnicodeString(v28, 0LL, &v23);
    for (pErrorCode = U_ZERO_ERROR; (int)v8 < v9; uint64_t v8 = (v12 + v8))
    {
      unsigned int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 80LL))(a2, v8);
      if (v10 >= 0x10000) {
        int v11 = -2;
      }
      else {
        int v11 = -1;
      }
      if (v10 < 0x10000) {
        int v12 = 1;
      }
      else {
        int v12 = 2;
      }
      UErrorCode pErrorCode = U_ZERO_ERROR;
      uint64_t v13 = u_charName(v10, U_EXTENDED_CHAR_NAME, v7, v6, &pErrorCode);
      if ((int)v13 >= 1 && pErrorCode <= U_ZERO_ERROR)
      {
        int v15 = v13;
        unsigned int v16 = WORD4(v28[0]) >> 5;
        if (SWORD4(v28[0]) < 0) {
          unsigned int v16 = HIDWORD(v28[0]);
        }
        if (v16 >= 4) {
          WORD4(v28[0]) = BYTE8(v28[0]) & 0x1F | 0x60;
        }
        icu::UnicodeString::UnicodeString(v25, v7, v13, 0LL);
        if ((v26 & 0x8000u) == 0) {
          uint64_t v17 = v26 >> 5;
        }
        else {
          uint64_t v17 = v27;
        }
        uint64_t v18 = icu::UnicodeString::doAppend((uint64_t)v28, (const icu::UnicodeString *)v25, 0, v17);
        __int16 v24 = 125;
        icu::UnicodeString::doAppend(v18, (uint64_t)&v24, 0, 1LL);
        icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v25);
        (*(void (**)(uint64_t, uint64_t, void, _OWORD *))(*(void *)a2 + 32LL))( a2,  v8,  (v12 + v8),  v28);
        int v12 = v15 + 4;
        v9 += v11 + v15 + 4;
      }
    }

    int v20 = v9 - a3[3] + a3[1];
    a3[2] = v8;
    a3[3] = v9;
    a3[1] = v20;
    uprv_free(v7);
    return (char *)icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v28);
  }

  else
  {
    a3[2] = a3[3];
  }

  return result;
}

uint64_t icu::units::ComplexUnitsConverter::ComplexUnitsConverter( uint64_t a1, icu::MeasureUnitImpl *this, int *a3, UErrorCode *a4)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 8;
  *(_BYTE *)(a1 + 28) = 0;
  uint64_t v7 = (int *)(a1 + 96);
  icu::MeasureUnitImpl::extractIndividualUnitsWithIndices((int *)this, a4, a1 + 96);
  if (*(int *)a4 <= 0)
  {
    uint64_t v8 = (_DWORD *)(**(void **)(a1 + 104) + 8LL);
    if (*(int *)(a1 + 96) >= 2)
    {
      uint64_t v9 = 1LL;
      do
      {
        int v10 = icu::units::UnitsConverter::compareTwoUnits( (_DWORD *)(*(void *)(*(void *)(a1 + 104) + 8 * v9) + 8LL),  v8,  a3,  (int *)a4);
        UErrorCode v11 = *a4;
        if (v10 >= 1 && v11 <= U_ZERO_ERROR)
        {
          uint64_t v8 = (_DWORD *)(*(void *)(*(void *)(a1 + 104) + 8 * v9) + 8LL);
        }

        else if (v11 >= U_ILLEGAL_ARGUMENT_ERROR)
        {
          return a1;
        }

        ++v9;
      }

      while (v9 < *v7);
    }

    icu::units::ComplexUnitsConverter::init(a1, (unint64_t)v8, (uint64_t)a3, (int *)a4);
  }

  return a1;
}

void icu::units::ComplexUnitsConverter::init(uint64_t a1, unint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v8 = *(unsigned int *)(a1 + 96);
  if ((int)v8 >= 1)
  {
    uint64_t v9 = 0LL;
    uint64_t v10 = 8 * v8 - 8;
    while (1)
    {
      int v11 = *a4;
      if (v9)
      {
        if (v11 > 0) {
          return;
        }
        int v12 = sub_1809BF804( (const void **)(a1 + 8),  *(void *)(*(void *)(a1 + 104) + v9 - 8) + 8LL,  *(void *)(*(void *)(a1 + 104) + v9) + 8LL,  a3,  (uint64_t)a4);
      }

      else
      {
        if (v11 > 0) {
          return;
        }
        int v12 = sub_1809BF804((const void **)(a1 + 8), a2, **(void **)(a1 + 104) + 8LL, a3, (uint64_t)a4);
      }

      BOOL v13 = *a4 <= 0 && v12 == 0LL;
      if (v13) {
        break;
      }
      if (*a4 <= 0)
      {
        BOOL v13 = v10 == v9;
        v9 += 8LL;
        if (!v13) {
          continue;
        }
      }

      return;
    }

    *a4 = 7;
  }

uint64_t icu::units::ComplexUnitsConverter::ComplexUnitsConverter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  *(_DWORD *)(a1 + 96) = 0;
  uint64_t v7 = (int *)(a1 + 96);
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 8;
  *(_BYTE *)(a1 + 28) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(_DWORD *)(a1 + 112) = 8;
  *(_BYTE *)(a1 + 116) = 0;
  if (*a6 <= 0)
  {
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    memset(v22, 0, sizeof(v22));
    icu::MeasureUnitImpl::forIdentifier(a2, a3, a6, (uint64_t)v22);
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    memset(v17, 0, sizeof(v17));
    icu::MeasureUnitImpl::forIdentifier(a4, a5, a6, (uint64_t)v17);
    icu::MeasureUnitImpl::extractIndividualUnitsWithIndices((int *)v17, (UErrorCode *)a6, (uint64_t)&v12);
    sub_18090E4BC(v7, &v12);
    sub_18093F2F8((uint64_t)&v12);
    int v12 = 0;
    BOOL v13 = &v16;
    int v14 = 8;
    char v15 = 0;
    icu::units::getAllConversionRates((uint64_t)&v12, a6);
    icu::units::ComplexUnitsConverter::init(a1, (unint64_t)v22, (uint64_t)&v12, a6);
    sub_18093F1A0((uint64_t)&v12);
    if (BYTE12(v18)) {
      uprv_free((void *)v18);
    }
    sub_180850D68((uint64_t)v17 + 8);
    if (BYTE12(v23)) {
      uprv_free((void *)v23);
    }
    sub_180850D68((uint64_t)&v22[8]);
  }

  return a1;
}

uint64_t icu::units::ComplexUnitsConverter::ComplexUnitsConverter( uint64_t a1, unint64_t a2, icu::MeasureUnitImpl *this, uint64_t a4, UErrorCode *a5)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 8;
  *(_BYTE *)(a1 + 28) = 0;
  icu::MeasureUnitImpl::extractIndividualUnitsWithIndices((int *)this, a5, a1 + 96);
  return a1;
}

BOOL icu::units::ComplexUnitsConverter::greaterThanOrEqual( icu::units::UnitsConverter ***this, double a2, double a3)
{
  return icu::units::UnitsConverter::convert(*this[2], a2) >= a3;
}

void icu::units::ComplexUnitsConverter::convert( uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(void *)(a4 + 80) = 0LL;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(void *)(a4 + 8) = a4 + 24;
  *(_DWORD *)(a4 + 16) = 8;
  BOOL v9 = a5 < 0.0;
  int v10 = *(_DWORD *)(a1 + 8);
  int v11 = v10 - 1;
  BOOL v12 = v10 > 1;
  if (v9 && v12) {
    double v13 = -a5;
  }
  else {
    double v13 = a5;
  }
  if (v9 && v12) {
    int v14 = -1;
  }
  else {
    int v14 = 1;
  }
  uint64_t v40 = 0LL;
  __int128 v38 = 0uLL;
  __int128 v39 = 0uLL;
  *(_OWORD *)unsigned int v37 = 0uLL;
  sub_1809BF53C((uint64_t)v37, v11, *a3);
  if (*a3 <= 0)
  {
    bzero(v37[0], 8LL * *(int *)(a1 + 8) - 8);
    uint64_t v15 = *(unsigned int *)(a1 + 8);
    if ((int)v15 >= 1)
    {
      for (unint64_t i = 0LL; i != v15; ++i)
      {
        double v17 = icu::units::UnitsConverter::convert(*(icu::units::UnitsConverter **)(*(void *)(a1 + 16) + 8 * i), v13);
        double v13 = v17;
        if (i < (v15 - 1))
        {
          BOOL isNaN = uprv_isNaN(v17);
          uint64_t v19 = vcvtmd_s64_f64(v13 * 1.0);
          if (isNaN) {
            uint64_t v19 = 0LL;
          }
          *((void *)v37[0] + i) = v19;
          else {
            double v13 = 0.0;
          }
        }
      }
    }

    double v41 = v13;
    icu::units::ComplexUnitsConverter::applyRounder(a1, (uint64_t *)v37, &v41, a2, a3);
    memset(v36, 0, sizeof(v36));
    sub_1809BF744((uint64_t)v36, *(_DWORD *)(a1 + 8), *a3);
    if (*a3 < 1)
    {
      uint64_t v20 = *(unsigned int *)(a1 + 8);
      if ((int)v20 >= 1)
      {
        unint64_t v21 = 0LL;
        double v22 = v41 * (double)v14;
        uint64_t v23 = v14;
        do
        {
          memset(v45, 0, sizeof(v45));
          else {
            icu::Formattable::Formattable((icu::Formattable *)v45, *((void *)v37[0] + v21) * v23);
          }
          int v28 = (icu::MeasureUnit *)icu::UMemory::operator new(v25, (icu::UMemory *)0x18, v24);
          if (v28)
          {
            icu::MeasureUnitImpl::copy( (icu::MeasureUnitImpl *)(*(void *)(*(void *)(a1 + 104) + 8 * v21) + 8LL),  (UErrorCode *)a3,  (uint64_t)v42);
            icu::MeasureUnitImpl::build((icu::MeasureUnitImpl *)v42, (UErrorCode *)a3, (uint64_t)v28);
            if (v44) {
              uprv_free(v43[11]);
            }
            sub_180850D68((uint64_t)v43);
          }

          uint64_t v29 = (icu::Measure *)icu::UMemory::operator new(v27, (icu::UMemory *)0x80, v26);
          if (v29) {
            uint64_t v29 = (icu::Measure *)icu::Measure::Measure(v29, (const icu::Formattable *)v45, v28, (UErrorCode *)a3);
          }
          *(void *)(*(void *)&v36[0] + 8LL * **(int **)(*(void *)(a1 + 104) + 8 * v2uhash_close(*((_BYTE **)this + 1)) = v29;
          icu::Formattable::~Formattable((icu::Formattable *)v45);
          ++v21;
        }

        while (v20 != v21);
        uint64_t v30 = *(unsigned int *)(a1 + 8);
        if ((int)v30 >= 1)
        {
          uint64_t v31 = 0LL;
          uint64_t v32 = 8 * v30;
          do
          {
            if (*a3 <= 0)
            {
              int v33 = sub_1809BF908((const void **)a4, *(const icu::Measure **)(*(void *)&v36[0] + v31));
              if (*a3 <= 0 && v33 == 0LL) {
                *a3 = 7;
              }
            }

            uint64_t v35 = *(void *)(*(void *)&v36[0] + v31);
            if (v35) {
              (*(void (**)(uint64_t))(*(void *)v35 + 8LL))(v35);
            }
            v31 += 8LL;
          }

          while (v32 != v31);
        }
      }
    }

    if (BYTE12(v36[0])) {
      uprv_free(*(void **)&v36[0]);
    }
  }

  if (BYTE4(v37[1])) {
    uprv_free(v37[0]);
  }
}

uint64_t sub_1809BF53C(uint64_t a1, int a2, int a3)
{
  *(void *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 8) = 5;
  *(_BYTE *)(a1 + 12) = 0;
  if (a2 >= 6 && a3 <= 0)
  {
    int v5 = uprv_malloc(8LL * a2);
    if (v5)
    {
      int32_t v6 = v5;
      if (*(_BYTE *)(a1 + 12)) {
        uprv_free(*(void **)a1);
      }
      *(void *)a1 = v6;
      *(_DWORD *)(a1 + 8) = a2;
      *(_BYTE *)(a1 + 12) = 1;
    }
  }

  return a1;
}

void icu::units::ComplexUnitsConverter::applyRounder( uint64_t a1, uint64_t *a2, double *a3, uint64_t a4, int *a5)
{
  if (!uprv_isInfinite(*a3))
  {
    BOOL isNaN = uprv_isNaN(*a3);
    if (a4)
    {
      if (!isNaN)
      {
        uint64_t v21 = 0LL;
        memset(v20, 0, sizeof(v20));
        icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v20);
        icu::number::impl::DecimalQuantity::setToDouble((void **)v20, *a3);
        sub_180938418(a4, (icu::number::impl::DecimalQuantity *)v20, a5);
        if (*a5 <= 0)
        {
          double v11 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v20);
          *a3 = v11;
          int v12 = *(_DWORD *)(a1 + 8);
          int v13 = v12 - 1;
          if (v12 != 1)
          {
            uint64_t v14 = vcvtmd_s64_f64( icu::units::UnitsConverter::convertInverse( *(icu::units::UnitsConverter **)(*(void *)(a1 + 16) + 8LL * v13),  v11)
                  * 1.0);
            if (v14 >= 1)
            {
              *a3 = *a3
                  - icu::units::UnitsConverter::convert( *(icu::units::UnitsConverter **)(*(void *)(a1 + 16) + 8LL * v13),  (double)v14);
              uint64_t v15 = (v12 - 2);
              uint64_t v16 = *a2;
              *(void *)(*a2 + 8LL * (int)v15) += v14;
              if (v12 >= 3)
              {
                do
                {
                  uint64_t v17 = vcvtmd_s64_f64( icu::units::UnitsConverter::convertInverse( *(icu::units::UnitsConverter **)(*(void *)(a1 + 16) + 8 * v15),  (double)*(uint64_t *)(v16 + 8 * v15))
                        * 1.0);
                  if (v17 < 1) {
                    break;
                  }
                  double v18 = icu::units::UnitsConverter::convert( *(icu::units::UnitsConverter **)(*(void *)(a1 + 16) + 8 * v15),  (double)v17);
                  uint64_t v16 = *a2;
                  *(void *)(*a2 + 8 * v15) -= llround(v18);
                  BOOL v19 = v15-- <= 1;
                  *(void *)(v16 + 8LL * v15) += v17;
                }

                while (!v19);
              }
            }
          }
        }

        icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v20);
      }
    }
  }

uint64_t sub_1809BF744(uint64_t a1, int a2, int a3)
{
  *(void *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 8) = 4;
  *(_BYTE *)(a1 + 12) = 0;
  if (a2 >= 5 && a3 <= 0)
  {
    int v5 = uprv_malloc(8LL * a2);
    if (v5)
    {
      int32_t v6 = v5;
      if (*(_BYTE *)(a1 + 12)) {
        uprv_free(*(void **)a1);
      }
      *(void *)a1 = v6;
      *(_DWORD *)(a1 + 8) = a2;
      *(_BYTE *)(a1 + 12) = 1;
    }
  }

  return a1;
}

uint64_t sub_1809BF7C4(int *a1, uint64_t a2, uint64_t a3)
{
  int v4 = 0;
  return -icu::units::UnitsConverter::compareTwoUnits( (_DWORD *)(*(void *)a2 + 8LL),  (_DWORD *)(*(void *)a3 + 8LL),  a1,  &v4);
}

uint64_t *sub_1809BF804(const void **a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10 = *((_DWORD *)a1 + 4);
  uint64_t v11 = *(unsigned int *)a1;
  if ((_DWORD)v11 == v10)
  {
    if (v10 == 8) {
      int v12 = 32;
    }
    else {
      int v12 = 2 * v10;
    }
    if (v12 < 1) {
      return 0LL;
    }
    uint64_t result = (uint64_t *)uprv_malloc(8LL * v12);
    if (!result) {
      return result;
    }
    uint64_t v14 = result;
    if (v10 >= 1)
    {
      int v15 = *((_DWORD *)a1 + 4);
      if (v15 >= v10) {
        int v15 = v10;
      }
      if (v15 >= v12) {
        int v15 = v12;
      }
      memcpy(result, a1[1], 8LL * v15);
    }

    if (*((_BYTE *)a1 + 20)) {
      uprv_free((void *)a1[1]);
    }
    a1[1] = v14;
    *((_DWORD *)a1 + 4) = v12;
    uint64_t v11 = 1LL;
    *((_BYTE *)a1 + 20) = 1;
  }

  uint64_t result = icu::UMemory::operator new((uint64_t *)v11, (icu::UMemory *)0x178, a2);
  if (result) {
    uint64_t result = (uint64_t *)icu::units::UnitsConverter::UnitsConverter(result, a2, a3, a4, a5);
  }
  uint64_t v16 = *(int *)a1;
  *(_DWORD *)a1 = v16 + 1;
  *((void *)a1[1] + v16) = result;
  return result;
}

uint64_t *sub_1809BF908(const void **a1, const icu::Measure *a2)
{
  int v4 = *((_DWORD *)a1 + 4);
  uint64_t v5 = *(unsigned int *)a1;
  if ((_DWORD)v5 == v4)
  {
    if (v4 == 8) {
      int v6 = 32;
    }
    else {
      int v6 = 2 * v4;
    }
    if (v6 < 1) {
      return 0LL;
    }
    uint64_t result = (uint64_t *)uprv_malloc(8LL * v6);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    if (v4 >= 1)
    {
      int v9 = *((_DWORD *)a1 + 4);
      if (v9 >= v4) {
        int v9 = v4;
      }
      if (v9 >= v6) {
        int v9 = v6;
      }
      memcpy(result, a1[1], 8LL * v9);
    }

    if (*((_BYTE *)a1 + 20)) {
      uprv_free((void *)a1[1]);
    }
    a1[1] = v8;
    *((_DWORD *)a1 + 4) = v6;
    uint64_t v5 = 1LL;
    *((_BYTE *)a1 + 20) = 1;
  }

  uint64_t result = icu::UMemory::operator new((uint64_t *)v5, (icu::UMemory *)0x80, (unint64_t)a2);
  if (result) {
    uint64_t result = (uint64_t *)icu::Measure::Measure((icu::Measure *)result, a2);
  }
  uint64_t v10 = *(int *)a1;
  *(_DWORD *)a1 = v10 + 1;
  *((void *)a1[1] + v10) = result;
  return result;
}

float64x2_t *icu::units::Factor::multiplyBy(float64x2_t *result, float64x2_t *a2)
{
  uint64_t v2 = 0LL;
  *uint64_t result = vmulq_f64(*a2, *result);
  do
  {
    *(_DWORD *)((char *)&result[1].f64[1] + v2 + 4) += *(_DWORD *)((char *)&a2[1].f64[1] + v2 + 4);
    v2 += 4LL;
  }

  while (v2 != 60);
  double v3 = a2[1].f64[0];
  if (v3 < result[1].f64[0]) {
    double v3 = result[1].f64[0];
  }
  result[1].f64[0] = v3;
  return result;
}

double *icu::units::Factor::divideBy(double *result, double *a2)
{
  uint64_t v2 = 0LL;
  double v3 = result[1];
  *uint64_t result = a2[1] * *result;
  result[1] = *a2 * v3;
  do
  {
    *(_DWORD *)((char *)result + v2 + 28) -= *(_DWORD *)((char *)a2 + v2 + 28);
    v2 += 4LL;
  }

  while (v2 != 60);
  double v4 = a2[2];
  if (v4 < result[2]) {
    double v4 = result[2];
  }
  result[2] = v4;
  return result;
}

void icu::units::Factor::power(icu::units::Factor *this, int a2)
{
  for (uint64_t i = 28LL; i != 88; i += 4LL)
    *(_DWORD *)((char *)this + i) *= a2;
  if (a2 >= 0) {
    int v5 = a2;
  }
  else {
    int v5 = -a2;
  }
  double v6 = (double)v5;
  double v7 = pow(*(double *)this, (double)v5);
  *(double *)this = v7;
  double v8 = pow(*((double *)this + 1), v6);
  *((double *)this + 1) = v8;
  if (a2 < 0)
  {
    *(double *)this = v8;
    *((double *)this + 1) = v7;
  }

double icu::units::Factor::applyPrefix(uint64_t a1, int a2, double result)
{
  if (a2 != 30)
  {
    int PrefixPower = umeas_getPrefixPower(a2);
    double PrefixBase = (double)(int)umeas_getPrefixBase(a2);
    if (PrefixPower >= 0) {
      int v7 = PrefixPower;
    }
    else {
      int v7 = -PrefixPower;
    }
    uint64_t result = pow(PrefixBase, (double)v7) * *(double *)(a1 + 8LL * (PrefixPower >> 31));
    *(double *)(a1 + 8LL * (PrefixPower >> 3uhash_close(*((_BYTE **)this + 1)) = result;
  }

  return result;
}

void icu::units::Factor::substituteConstants(icu::units::Factor *this)
{
  for (uint64_t i = 0LL; i != 15; ++i)
  {
    double v3 = (char *)this + 4 * i;
    int v4 = *((_DWORD *)v3 + 7);
    if (v4)
    {
      if (v4 >= 0) {
        int v5 = *((_DWORD *)v3 + 7);
      }
      else {
        int v5 = -v4;
      }
      *((_DWORD *)v3 + 7) = 0;
    }
  }

void icu::units::addSingleFactorConstant( unsigned __int8 *a1, uint64_t a2, int a3, int a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v16 = a1;
  uint64_t v17 = a2;
  icu::StringPiece::StringPiece((icu::StringPiece *)v15, "ft_to_m");
  if (icu::operator==(&v16, v15))
  {
    int v10 = *(_DWORD *)(a5 + 28) + a4 * a3;
LABEL_7:
    *(_DWORD *)(a5 + 28) = v10;
    return;
  }

  icu::StringPiece::StringPiece((icu::StringPiece *)v15, "ft2_to_m2");
  if (icu::operator==(&v16, v15))
  {
    int v10 = *(_DWORD *)(a5 + 28) + 2 * a4 * a3;
    goto LABEL_7;
  }

  icu::StringPiece::StringPiece((icu::StringPiece *)v15, "ft3_to_m3");
  if (icu::operator==(&v16, v15))
  {
    int v10 = *(_DWORD *)(a5 + 28) + 3 * a4 * a3;
    goto LABEL_7;
  }

  icu::StringPiece::StringPiece((icu::StringPiece *)v15, "in3_to_m3");
  if (icu::operator==(&v16, v15))
  {
    *(_DWORD *)(a5 + 28) += 3 * a4 * a3;
    double v11 = (double)(a4 * a3);
LABEL_12:
    double v12 = pow(1728.0, v11) * *(double *)(a5 + 8);
LABEL_13:
    *(double *)(a5 + 8) = v12;
    return;
  }

  icu::StringPiece::StringPiece((icu::StringPiece *)v15, "gal_to_m3");
  if (icu::operator==(&v16, v15))
  {
    *(_DWORD *)(a5 + 28) += 3 * a4 * a3;
    *(double *)a5 = pow(231.0, (double)(a4 * a3)) * *(double *)a5;
    double v11 = (double)(a4 * a3);
    goto LABEL_12;
  }

  icu::StringPiece::StringPiece((icu::StringPiece *)v15, "gal_imp_to_m3");
  if (icu::operator==(&v16, v15))
  {
    *(_DWORD *)(a5 + 44) += a4 * a3;
  }

  else
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)v15, "G");
    if (icu::operator==(&v16, v15))
    {
      *(_DWORD *)(a5 + 40) += a4 * a3;
    }

    else
    {
      icu::StringPiece::StringPiece((icu::StringPiece *)v15, "gravity");
      if (icu::operator==(&v16, v15))
      {
        *(_DWORD *)(a5 + 36) += a4 * a3;
      }

      else
      {
        icu::StringPiece::StringPiece((icu::StringPiece *)v15, "lb_to_kg");
        if (icu::operator==(&v16, v15))
        {
          *(_DWORD *)(a5 + 48) += a4 * a3;
        }

        else
        {
          icu::StringPiece::StringPiece((icu::StringPiece *)v15, "glucose_molar_mass");
          if (icu::operator==(&v16, v15))
          {
            *(_DWORD *)(a5 + 52) += a4 * a3;
          }

          else
          {
            icu::StringPiece::StringPiece((icu::StringPiece *)v15, "item_per_mole");
            if (icu::operator==(&v16, v15))
            {
              *(_DWORD *)(a5 + 56) += a4 * a3;
            }

            else
            {
              icu::StringPiece::StringPiece((icu::StringPiece *)v15, "meters_per_AU");
              if (icu::operator==(&v16, v15))
              {
                *(_DWORD *)(a5 + 60) += a4 * a3;
              }

              else
              {
                icu::StringPiece::StringPiece((icu::StringPiece *)v15, "PI");
                if (icu::operator==(&v16, v15))
                {
                  *(_DWORD *)(a5 + 32) += a4 * a3;
                }

                else
                {
                  icu::StringPiece::StringPiece((icu::StringPiece *)v15, "sec_per_julian_year");
                  if (icu::operator==(&v16, v15))
                  {
                    *(_DWORD *)(a5 + 64) += a4 * a3;
                  }

                  else
                  {
                    icu::StringPiece::StringPiece((icu::StringPiece *)v15, "speed_of_light_meters_per_second");
                    if (icu::operator==(&v16, v15))
                    {
                      *(_DWORD *)(a5 + 68) += a4 * a3;
                    }

                    else
                    {
                      icu::StringPiece::StringPiece((icu::StringPiece *)v15, "sho_to_m3");
                      if (icu::operator==(&v16, v15))
                      {
                        *(_DWORD *)(a5 + 72) += a4 * a3;
                      }

                      else
                      {
                        icu::StringPiece::StringPiece((icu::StringPiece *)v15, "tsubo_to_m2");
                        if (icu::operator==(&v16, v15))
                        {
                          *(_DWORD *)(a5 + 76) += a4 * a3;
                        }

                        else
                        {
                          icu::StringPiece::StringPiece((icu::StringPiece *)v15, "shaku_to_m");
                          if (icu::operator==(&v16, v15))
                          {
                            *(_DWORD *)(a5 + 80) += a4 * a3;
                          }

                          else
                          {
                            icu::StringPiece::StringPiece((icu::StringPiece *)v15, "AMU");
                            if (icu::operator==(&v16, v15))
                            {
                              *(_DWORD *)(a5 + 84) += a4 * a3;
                            }

                            else
                            {
                              sub_1809C0058(v16, v17, a6);
                              double v14 = pow(v13, (double)a3);
                              if (a4 == -1)
                              {
                                double v12 = *(double *)(a5 + 8) * v14;
                                goto LABEL_13;
                              }

                              *(double *)a5 = *(double *)a5 * v14;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

void sub_1809C0058(unsigned __int8 *a1, int a2, _DWORD *a3)
{
  uint64_t v7 = 0LL;
  uint64_t v10 = 0LL;
  __int128 v6 = 0u;
  double v8 = "";
  int v9 = "";
  int v5 = 0;
  sub_1808D6528((double *)&v6, a1, a2, &v5);
  if (v5 != a2) {
    *a3 = 3;
  }
}

uint64_t icu::units::extractCompoundBaseUnit@<X0>( uint64_t result@<X0>, int *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(void *)(a4 + 16) = a4 + 32;
  *(_DWORD *)(a4 + 24) = 8;
  *(void *)(a4 + 96) = a4 + 109;
  *(_DWORD *)(a4 + 104) = 40;
  *(_DWORD *)(a4 + 152) = 0;
  if (*a3 <= 0)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(unsigned int *)(result + 8);
    if ((int)v6 >= 1)
    {
      for (uint64_t i = 0LL; i != v6; ++i)
      {
        uint64_t v10 = *(icu::SingleUnitImpl **)(*(void *)(v5 + 16) + 8 * i);
        SimpleUnitID = (const char *)icu::SingleUnitImpl::getSimpleUnitID(v10);
        icu::StringPiece::StringPiece((icu::StringPiece *)v17, SimpleUnitID);
        uint64_t result = icu::units::ConversionRates::extractConversionInfo(a2, v17[0], v17[1], a3);
        if (*a3 > 0) {
          break;
        }
        if (!result)
        {
          *a3 = 5;
          return result;
        }

        uint64_t v16 = 0LL;
        memset(v15, 0, sizeof(v15));
        icu::MeasureUnitImpl::forIdentifier(*(void *)(result + 72), *(unsigned int *)(result + 128), a3, (uint64_t)v18);
        LODWORD(v15[0]) = v19;
        *((void *)&v15[0] + 1) = v20;
        LODWORD(v15[1]) = v21;
        BYTE4(v15[1]) = v22;
        if (v20 == v23)
        {
          *((void *)&v15[0] + 1) = (char *)&v15[1] + 8;
          memcpy((char *)&v15[1] + 8, v23, 8LL * v21);
        }

        else
        {
          uint64_t v20 = v23;
          int v21 = 8;
          char v22 = 0;
        }

        int v19 = 0;
        if (v24) {
          uprv_free(v23[8]);
        }
        sub_180850D68((uint64_t)&v19);
        if (SLODWORD(v15[0]) >= 1)
        {
          uint64_t v12 = 0LL;
          uint64_t v13 = 8LL * LODWORD(v15[0]);
          do
          {
            double v14 = *(const icu::SingleUnitImpl **)(*((void *)&v15[0] + 1) + v12);
            *((_DWORD *)v14 + 2) *= *((_DWORD *)v10 + 2);
            icu::MeasureUnitImpl::appendSingleUnit((icu::MeasureUnitImpl *)a4, v14, (UErrorCode *)a3);
            if (*a3 >= 1) {
              return sub_180850D68((uint64_t)v15);
            }
            v12 += 8LL;
          }

          while (v13 != v12);
        }

        uint64_t result = sub_180850D68((uint64_t)v15);
      }
    }
  }

  return result;
}

uint64_t icu::units::extractConvertibility(_DWORD *a1, _DWORD *a2, int *a3, int *a4)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  if (*a1 == 2 || *a2 == 2)
  {
    *a4 = 65804;
    return 2LL;
  }

  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  memset(v35, 0, sizeof(v35));
  icu::units::extractCompoundBaseUnit((uint64_t)a1, a3, a4, (uint64_t)v35);
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  memset(v30, 0, sizeof(v30));
  icu::units::extractCompoundBaseUnit((uint64_t)a2, a3, a4, (uint64_t)v30);
  if (*a4 <= 0)
  {
    uint64_t v26 = 0LL;
    memset(v28, 0, sizeof(v28));
    uint64_t v29 = 0LL;
    uint64_t v27 = (void *)v28 + 1;
    LODWORD(v28[0]) = 8;
    uint64_t v22 = 0LL;
    memset(v24, 0, sizeof(v24));
    uint64_t v25 = 0LL;
    uint64_t v23 = (char *)v24 + 8;
    LODWORD(v24[0]) = 8;
    uint64_t v6 = 1LL;
    sub_1809C05E0(&v26, (unint64_t)v35, 1);
    sub_1809C05E0(&v22, (unint64_t)v35, 1);
    sub_1809C05E0(&v26, (unint64_t)v30, -1);
    sub_1809C05E0(&v22, (unint64_t)v30, 1);
    if ((int)v26 >= 1)
    {
      if (*(_DWORD *)(*v27 + 4LL)) {
        goto LABEL_15;
      }
      uint64_t v9 = 1LL;
      do
      {
        unint64_t v10 = v9;
      }

      while (!*(_DWORD *)(v27[v9++] + 4LL));
      if (v10 < v26)
      {
LABEL_15:
        if ((int)v22 < 1)
        {
          uint64_t v6 = 0LL;
LABEL_29:
          if (BYTE4(v24[0])) {
            uprv_free(v23);
          }
          int v18 = v26;
          if ((int)v26 >= 1)
          {
            uint64_t v19 = 0LL;
            do
            {
              uint64_t v20 = (void *)v27[v19];
              if (v20)
              {
                icu::UMemory::operator delete(v20);
                int v18 = v26;
              }

              ++v19;
            }

            while (v19 < v18);
          }

          if (BYTE4(v28[0])) {
            uprv_free(v27);
          }
          goto LABEL_38;
        }

        if (*(_DWORD *)(*(void *)v23 + 4LL))
        {
          uint64_t v6 = 2LL;
        }

        else
        {
          uint64_t v12 = 1LL;
          do
          {
            unint64_t v13 = v12;
          }

          while (!*(_DWORD *)(*((void *)v23 + v12++) + 4LL));
          uint64_t v6 = 2 * (v13 < v22);
        }
      }

      else
      {
        uint64_t v6 = 1LL;
      }
    }

    int v15 = v22;
    if ((int)v22 >= 1)
    {
      uint64_t v16 = 0LL;
      do
      {
        uint64_t v17 = (void *)*((void *)v23 + v16);
        if (v17)
        {
          icu::UMemory::operator delete(v17);
          int v15 = v22;
        }

        ++v16;
      }

      while (v16 < v15);
    }

    goto LABEL_29;
  }

  uint64_t v6 = 2LL;
LABEL_38:
  if (BYTE12(v31)) {
    uprv_free((void *)v31);
  }
  sub_180850D68((uint64_t)v30 + 8);
  if (BYTE12(v36)) {
    uprv_free((void *)v36);
  }
  sub_180850D68((uint64_t)v35 + 8);
  return v6;
}

uint64_t *sub_1809C05E0(uint64_t *result, unint64_t a2, int a3)
{
  if (*(int *)(a2 + 8) >= 1)
  {
    uint64_t v5 = result;
    for (uint64_t i = 0LL; i < *(int *)(a2 + 8); ++i)
    {
      uint64_t v7 = *(int **)(*(void *)(a2 + 16) + 8 * i);
      int v8 = *v7;
      int v9 = v7[2];
      int v10 = *(_DWORD *)v5;
      if (*(int *)v5 >= 1)
      {
        uint64_t v11 = v5[1];
        uint64_t v12 = *(unsigned int *)v5;
        while (**(_DWORD **)v11 != v8)
        {
          v11 += 8LL;
          if (!--v12) {
            goto LABEL_7;
          }
        }

        *(_DWORD *)(*(void *)v11 + 4LL) += v9 * a3;
        continue;
      }

uint64_t icu::units::UnitsConverter::UnitsConverter( uint64_t a1, icu::MeasureUnitImpl *this, icu::MeasureUnitImpl *a3, int *a4, UErrorCode *a5)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  uint64_t v9 = a1 + 8;
  icu::MeasureUnitImpl::copy(this, a5, (uint64_t)&v14);
  icu::MeasureUnitImpl::copy(a3, a5, (uint64_t)&v11);
  sub_1809C100C(v9, &v14, &v11);
  if (v13) {
    uprv_free(v12[11]);
  }
  sub_180850D68((uint64_t)v12);
  if (v16) {
    uprv_free(v15[11]);
  }
  sub_180850D68((uint64_t)v15);
  icu::units::UnitsConverter::init(a1, a4, (int *)a5);
  return a1;
}

void icu::units::UnitsConverter::init(uint64_t a1, int *a2, int *a3)
{
  if (*a3 <= 0)
  {
    uint64_t v4 = a1 + 16;
    if (*(_DWORD *)(a1 + 16) == 2 || (uint64_t v5 = (_DWORD *)(a1 + 176), *(_DWORD *)(a1 + 176) == 2))
    {
LABEL_4:
      *a3 = 65804;
      return;
    }

    int Convertibility = icu::units::extractConvertibility((_DWORD *)(a1 + 16), v5, a2, a3);
    if (*a3 <= 0)
    {
      if (Convertibility != 2)
      {
        sub_1809C0A28(v4 - 8, v4, (uint64_t)v5, Convertibility, a2, a3);
        return;
      }

      goto LABEL_4;
    }
  }

uint64_t icu::units::UnitsConverter::UnitsConverter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  uint64_t v10 = a1 + 8;
  icu::MeasureUnitImpl::forIdentifier(a2, a3, a6, (uint64_t)&v15);
  icu::MeasureUnitImpl::forIdentifier(a4, a5, a6, (uint64_t)&v12);
  sub_1809C100C(v10, &v15, &v12);
  if (v14) {
    uprv_free(v13[11]);
  }
  sub_180850D68((uint64_t)v13);
  if (v17) {
    uprv_free((void *)v16[11]);
  }
  sub_180850D68((uint64_t)v16);
  if (*a6 <= 0)
  {
    uint64_t v15 = 0LL;
    memset(&v16[1], 0, 72);
    v16[0] = &v16[2];
    LODWORD(v16[1]) = 8;
    icu::units::getAllConversionRates((uint64_t)&v15, a6);
    icu::units::UnitsConverter::init(a1, (int *)&v15, a6);
    sub_18093F1A0((uint64_t)&v15);
  }

  return a1;
}

void sub_1809C0A28(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int *a5, int *a6)
{
  __asm { FMOV            V0.2D, #1.0 }

  float64x2_t v32 = _Q0;
  uint64_t v33 = 0LL;
  memset(v34, 0, sizeof(v34));
  __int128 v35 = 0u;
  memset(v36, 0, sizeof(v36));
  uint64_t v31 = 0LL;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  float64x2_t v26 = 0u;
  sub_1809C0CD4(a2, a5, a6, (uint64_t)&v26);
  uint64_t v25 = 0LL;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  float64x2_t v20 = 0u;
  sub_1809C0CD4(a3, a5, a6, (uint64_t)&v20);
  icu::units::Factor::multiplyBy(&v32, &v26);
  if (a4 == 1) {
    icu::units::Factor::divideBy(v32.f64, v20.f64);
  }
  else {
    icu::units::Factor::multiplyBy(&v32, &v20);
  }
  icu::units::Factor::substituteConstants((icu::units::Factor *)&v32);
  *(float64x2_t *)(a1 + 328) = v32;
  if (*a6 <= 0 && !*(_DWORD *)a2)
  {
    if (!*(_DWORD *)(a2 + 8) || (uint64_t v17 = **(void **)(a2 + 16), *(_DWORD *)(v17 + 8) == 1) && *(_DWORD *)(v17 + 4) == 30)
    {
      if (!*(_DWORD *)a3)
      {
        if (!*(_DWORD *)(a3 + 8)
          || (uint64_t v18 = **(void **)(a3 + 16), *(_DWORD *)(v18 + 8) == 1) && *(_DWORD *)(v18 + 4) == 30)
        {
          double v19 = *(double *)&v21 * v20.f64[1] / v20.f64[0];
          *(double *)(a1 + 344) = *(double *)&v27 * v26.f64[1] / v26.f64[0];
          *(double *)(a1 + 352) = v19;
        }
      }
    }
  }

  *(_BYTE *)(a1 + 360) = a4 == 0;
}

uint64_t icu::units::UnitsConverter::compareTwoUnits(_DWORD *a1, _DWORD *a2, int *a3, int *a4)
{
  if (*a4 > 0) {
    return 0LL;
  }
  if (*a1 == 2 || *a2 == 2) {
    goto LABEL_8;
  }
  char Convertibility = icu::units::extractConvertibility(a1, a2, a3, a4);
  if (*a4 > 0) {
    return 0LL;
  }
  if ((Convertibility & 1) == 0)
  {
LABEL_8:
    uint64_t result = 0LL;
    *a4 = 65804;
  }

  else
  {
    uint64_t v16 = 0LL;
    memset(v15, 0, sizeof(v15));
    sub_1809C0CD4((uint64_t)a1, a3, a4, (uint64_t)v15);
    uint64_t v14 = 0LL;
    memset(v13, 0, sizeof(v13));
    sub_1809C0CD4((uint64_t)a2, a3, a4, (uint64_t)v13);
    icu::units::Factor::substituteConstants((icu::units::Factor *)v15);
    icu::units::Factor::substituteConstants((icu::units::Factor *)v13);
    double v11 = *(double *)v15 / *((double *)v15 + 1) - *(double *)v13 / *((double *)v13 + 1);
    if (v11 >= 0.0) {
      unsigned int v12 = 0;
    }
    else {
      unsigned int v12 = -1;
    }
    if (v11 > 0.0) {
      return 1LL;
    }
    else {
      return v12;
    }
  }

  return result;
}

void sub_1809C0CD4(uint64_t a1@<X0>, int *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  __asm { FMOV            V0.2D, #1.0 }

  float64x2_t v31 = _Q0;
  *(float64x2_t *)a4 = _Q0;
  *(void *)(a4 + 16) = 0LL;
  *(void *)(a4 + 24) = 0LL;
  *(_OWORD *)(a4 + 44) = 0u;
  *(_OWORD *)(a4 + 60) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 28) = 0u;
  uint64_t v29 = *(unsigned int *)(a1 + 8);
  if ((int)v29 >= 1)
  {
    uint64_t v10 = 0LL;
    while (1)
    {
      int v41 = 0;
      uint64_t v40 = 0LL;
      double v11 = *(uint64_t **)(*(void *)(a1 + 16) + 8 * v10);
      int v12 = *((_DWORD *)v11 + 2);
      uint64_t v40 = *v11;
      int v41 = v12;
      SimpleUnitID = (const char *)icu::SingleUnitImpl::getSimpleUnitID((icu::SingleUnitImpl *)&v40);
      icu::StringPiece::StringPiece((icu::StringPiece *)v34, SimpleUnitID);
      uint64_t ConversionInfo = icu::units::ConversionRates::extractConversionInfo(a2, v34[0], v34[1], a3);
      if (*a3 > 0) {
        break;
      }
      uint64_t v15 = ConversionInfo;
      if (!ConversionInfo)
      {
        *a3 = 5;
        return;
      }

      uint64_t v16 = *(unsigned __int8 **)(ConversionInfo + 136);
      uint64_t v17 = *(unsigned int *)(ConversionInfo + 192);
      uint64_t v42 = v16;
      uint64_t v43 = v17;
      float64x2_t v35 = v31;
      double v36 = 0.0;
      memset(v37, 0, sizeof(v37));
      __int128 v38 = 0u;
      memset(v39, 0, sizeof(v39));
      if ((int)v17 >= 1)
      {
        uint64_t v18 = 0LL;
        int v19 = 0;
        int v20 = 1;
        do
        {
          int v21 = v16[v18];
          if (v21 == 47 || v21 == 42)
          {
            icu::StringPiece::StringPiece((uint64_t)&v44, (const icu::StringPiece *)&v42, v19, v18 - v19);
            sub_1809C108C((uint64_t)&v35, v44, v45, v20, a3);
            int v19 = v18 + 1;
          }

          else if ((_DWORD)v17 - 1 == v18)
          {
            icu::StringPiece::StringPiece((uint64_t)&v44, (const icu::StringPiece *)&v42, v19, v17);
            sub_1809C108C((uint64_t)&v35, v44, v45, v20, a3);
          }

          if (v16[v18] == 47) {
            int v20 = -1;
          }
          ++v18;
        }

        while (v17 != v18);
      }

      __int128 v22 = *(unsigned __int8 **)(v15 + 200);
      uint64_t v23 = *(unsigned int *)(v15 + 256);
      uint64_t v42 = v22;
      uint64_t v43 = v23;
      if ((int)v23 < 1)
      {
LABEL_20:
        sub_1809C0058(v22, v23, a3);
      }

      else
      {
        uint64_t v24 = 0LL;
        while (v22[v24] != 47)
        {
          if (v23 == ++v24) {
            goto LABEL_20;
          }
        }

        icu::StringPiece::StringPiece((uint64_t)&v44, (const icu::StringPiece *)&v42, 0, v24);
        sub_1809C0058(v44, v45, a3);
        double v27 = v26;
        icu::StringPiece::StringPiece((uint64_t)&v44, (const icu::StringPiece *)&v42, v24 + 1, 0x7FFFFFFF);
        sub_1809C0058(v44, v45, a3);
        double v25 = v27 / v28;
      }

      double v36 = v25;
      if (*a3 <= 0)
      {
        icu::units::Factor::applyPrefix((uint64_t)&v35, SHIDWORD(v40), v25);
        icu::units::Factor::power((icu::units::Factor *)&v35, v41);
        icu::units::Factor::multiplyBy((float64x2_t *)a4, &v35);
        if (++v10 != v29) {
          continue;
        }
      }

      return;
    }
  }

double icu::units::UnitsConverter::convert(icu::units::UnitsConverter *this, double a2)
{
  double result = (*((double *)this + 44) + a2) * (*((double *)this + 42) / *((double *)this + 43)) - *((double *)this + 45);
  if (*((_BYTE *)this + 368))
  {
    if (result == 0.0) {
      return uprv_getInfinity();
    }
    else {
      return 1.0 / result;
    }
  }

  return result;
}

double icu::units::UnitsConverter::convertInverse(icu::units::UnitsConverter *this, double a2)
{
  if (*((_BYTE *)this + 368))
  {
    if (a2 == 0.0) {
      return uprv_getInfinity();
    }
    a2 = 1.0 / a2;
  }

  return (a2 + *((double *)this + 45)) * (*((double *)this + 43) / *((double *)this + 42)) - *((double *)this + 44);
}

double icu::units::UnitsConverter::getConversionInfo@<D0>( icu::units::UnitsConverter *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0LL;
  double result = *((double *)this + 42) / *((double *)this + 43);
  double v3 = -(*((double *)this + 45) - *((double *)this + 44) * result);
  *(double *)a2 = result;
  *(double *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 16) = *((_BYTE *)this + 368);
  return result;
}

uint64_t sub_1809C100C(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *(_DWORD *)(a1 + 8) = *a2;
  sub_18090BCB4(a1 + 16, (uint64_t)(a2 + 2));
  icu::CharString::CharString(a1 + 104, a2 + 24);
  *(_DWORD *)(a1 + 168) = *a3;
  sub_18090BCB4(a1 + 176, (uint64_t)(a3 + 2));
  icu::CharString::CharString(a1 + 264, a3 + 24);
  *(void *)(a1 + 328) = 0x3FF0000000000000LL;
  *(void *)(a1 + 336) = 0x3FF0000000000000LL;
  *(void *)(a1 + 344) = 0LL;
  *(void *)(a1 + 352) = 0LL;
  *(_BYTE *)(a1 + 360) = 0;
  return a1;
}

void sub_1809C108C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4, _DWORD *a5)
{
  unsigned int v7 = a3;
  int v8 = a2;
  v13[0] = a2;
  v13[1] = a3;
  if ((int)a3 < 1)
  {
LABEL_5:
    int v11 = 1;
  }

  else
  {
    uint64_t v10 = 0LL;
    while (a2[v10] != 94)
    {
    }

    icu::StringPiece::StringPiece((uint64_t)&v14, (const icu::StringPiece *)v13, 0, v10);
    int v8 = v14;
    unsigned int v7 = v15;
    icu::StringPiece::StringPiece((uint64_t)&v14, (const icu::StringPiece *)v13, v10 + 1, 0x7FFFFFFF);
    sub_1809C0058(v14, v15, a5);
    int v11 = (int)v12;
  }

  icu::units::addSingleFactorConstant(v8, v7, v11, a4, a1, a5);
}

uint64_t icu::units::UnitPreferenceMetadata::UnitPreferenceMetadata( uint64_t a1, const char *a2, int a3, const char *a4, int a5, const char *a6, int a7, int a8, int a9, UErrorCode *a10)
{
  *(void *)(a1 + 8) = a1 + 21;
  *(_DWORD *)(a1 + 16) = 40;
  *(_WORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = a1 + 85;
  *(_DWORD *)(a1 + 80) = 40;
  *(_WORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = a1 + 149;
  *(_DWORD *)(a1 + 144) = 40;
  *(_WORD *)(a1 + 148) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  icu::CharString::append((icu::CharString *)(a1 + 8), a2, a3, a10);
  icu::CharString::append((icu::CharString *)(a1 + 72), a4, a5, a10);
  icu::CharString::append((icu::CharString *)(a1 + 136), a6, a7, a10);
  *(_DWORD *)(a1 + 200) = a8;
  *(_DWORD *)(a1 + 204) = a9;
  return a1;
}

{
  return icu::units::UnitPreferenceMetadata::UnitPreferenceMetadata(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t icu::units::UnitPreferenceMetadata::compareTo(const char **a1, const char **a2)
{
  uint64_t result = strcmp(a1[1], a2[1]);
  if (!(_DWORD)result)
  {
    uint64_t result = strcmp(a1[9], a2[9]);
    if (!(_DWORD)result) {
      return strcmp(a1[17], a2[17]);
    }
  }

  return result;
}

uint64_t icu::units::UnitPreferenceMetadata::compareTo( const char **a1, const char **a2, _BYTE *a3, _BYTE *a4, _BYTE *a5)
{
  uint64_t result = strcmp(a1[1], a2[1]);
  if (!(_DWORD)result)
  {
    *a3 = 1;
    uint64_t result = strcmp(a1[9], a2[9]);
    if (!(_DWORD)result)
    {
      *a4 = 1;
      uint64_t result = strcmp(a1[17], a2[17]);
      if (!(_DWORD)result) {
        *a5 = 1;
      }
    }
  }

  return result;
}

void icu::units::getAllConversionRates(uint64_t a1, int *a2)
{
  uint64_t v4 = ures_openDirect(0LL, (uint64_t)"units", (uint64_t)a2);
  v5[0] = &off_18972CE40;
  v5[1] = a1;
  ures_getAllItemsWithFallback(v4, "convertUnits", (uint64_t)v5, a2);
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v5);
  if (v4) {
    ures_close(v4);
  }
}

uint64_t icu::units::ConversionRates::extractConversionInfo( int *a1, unsigned __int8 *a2, unsigned __int8 *a3, _DWORD *a4)
{
  v13[0] = a2;
  v13[1] = a3;
  uint64_t v5 = *a1;
  if ((_DWORD)v5)
  {
    uint64_t v7 = 0LL;
    while (1)
    {
      uint64_t v8 = *(void *)(*((void *)a1 + 1) + 8 * v7);
      uint64_t v9 = *(unsigned __int8 **)(v8 + 8);
      uint64_t v10 = (unsigned __int8 *)*(unsigned int *)(v8 + 64);
      v12[0] = v9;
      v12[1] = v10;
      if (icu::operator==(v12, v13)) {
        return *(void *)(*((void *)a1 + 1) + 8 * v7);
      }
      if (v5 == ++v7) {
        goto LABEL_5;
      }
    }
  }

  else
  {
LABEL_5:
    uint64_t result = 0LL;
    *a4 = 5;
  }

  return result;
}

icu::units::UnitPreferences *icu::units::UnitPreferences::UnitPreferences( icu::units::UnitPreferences *this, UErrorCode *a2)
{
  *(_DWORD *)this = 0;
  *((void *)this + 1) = (char *)this + 24;
  *((_DWORD *)this + 4) = 8;
  *((_BYTE *)this + 20) = 0;
  *((_DWORD *)this + 22) = 0;
  uint64_t v4 = (char *)this + 88;
  *((void *)this + 12) = (char *)this + 112;
  *((_DWORD *)this + 26) = 8;
  *((_BYTE *)this + 108) = 0;
  uint64_t v5 = ures_openDirect(0LL, (uint64_t)"units", (uint64_t)a2);
  v7[0] = &off_18972CE88;
  v7[1] = v4;
  v7[2] = this;
  ures_getAllItemsWithFallback(v5, "unitPreferenceData", (uint64_t)v7, (int *)a2);
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v7);
  if (v5) {
    ures_close(v5);
  }
  return this;
}

void sub_1809C14EC(uint64_t a1@<X0>, const char *a2@<X1>, int a3@<W2>, UErrorCode *a4@<X3>, uint64_t a5@<X8>)
{
  *(_OWORD *)(a5 + 8) = 0u;
  *(void *)(a5 + 56) = 0LL;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 24) = 0u;
  *(void *)a5 = a5 + 13;
  *(_DWORD *)(a5 + 8) = 40;
  *(_DWORD *)(a5 + 56) = 0;
  if (*(int *)a4 <= 0)
  {
    v10[0] = 0LL;
    v10[1] = 0LL;
    icu::CharStringByteSink::CharStringByteSink(v10, a5);
    icu::Locale::getKeywordValue(a1, a2, a3, (uint64_t)v10, a4);
    icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v10);
  }

void icu::units::UnitPreferences::getPreferencesFor( uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, UErrorCode *a7@<X6>, uint64_t a8@<X8>)
{
  int v11 = (const void **)a8;
  uint64_t v109 = *MEMORY[0x1895F89C0];
  unsigned int v83 = (const char *)a2;
  uint64_t v84 = a3;
  int v81 = (const char *)a4;
  uint64_t v82 = a5;
  *(_OWORD *)a8 = 0u;
  *(_OWORD *)(a8 + 16) = 0u;
  *(_OWORD *)(a8 + 32) = 0u;
  *(_OWORD *)(a8 + 48) = 0u;
  *(_OWORD *)(a8 + 64) = 0u;
  *(void *)(a8 + 80) = 0LL;
  *(void *)(a8 + 8) = a8 + 24;
  *(_DWORD *)(a8 + 16) = 8;
  int v80 = 0;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v78, "temperature");
  __int128 v100 = 0u;
  __int128 v101 = 0u;
  *(_OWORD *)__s1 = 0u;
  __int128 v99 = 0u;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v76, "mu");
  sub_1809C14EC(a6, v76, v77, (UErrorCode *)&v80, (uint64_t)__s1);
  if (v80 > 0) {
    goto LABEL_3;
  }
  icu::StringPiece::StringPiece((icu::StringPiece *)&__s2, "fahrenhe");
  if (DWORD2(v101) == (_DWORD)v75 && (!(_DWORD)v75 || !memcmp(__s1[0], __s2, (int)v75)))
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)&v72, "fahrenheit");
    *(void *)&__int128 v88 = (char *)&v88 + 13;
    DWORD2(v88) = 40;
    WORD6(v88) = 0;
    DWORD2(v91) = 0;
    icu::CharString::append((icu::CharString *)&v88, v72, v73, a7);
    icu::CharString::operator=((uint64_t)__s1, (uint64_t)&v88);
    if (BYTE12(v88)) {
      uprv_free((void *)v88);
    }
  }

  icu::StringPiece::StringPiece((icu::StringPiece *)&v70, "celsius");
  int v15 = v71[0];
  if (DWORD2(v101) == v71[0])
  {
    uint64_t v16 = (const char *)__s1[0];
    if (!v71[0] || !memcmp(__s1[0], v70, v71[0])) {
      goto LABEL_18;
    }
  }

  if ((icu::StringPiece::StringPiece((icu::StringPiece *)&v68, "fahrenheit"), int v15 = v69, DWORD2(v101) == (_DWORD)v69)
    && ((uint64_t v16 = (const char *)__s1[0], !(_DWORD)v69) || !memcmp(__s1[0], v68, (int)v69))
    || (icu::StringPiece::StringPiece((icu::StringPiece *)&v66, "kelvin"), int v15 = v67, DWORD2(v101) == (_DWORD)v67)
    && ((uint64_t v16 = (const char *)__s1[0], !(_DWORD)v67) || !memcmp(__s1[0], v66, (int)v67)))
  {
LABEL_18:
    *(void *)&__int128 v88 = 0LL;
    __int128 v89 = 0u;
    *((void *)&v93 + 1) = 2LL;
    __int128 v95 = 0u;
    __int128 v96 = 0u;
    __int128 v94 = 0u;
    __int128 v90 = 0u;
    __int128 v91 = 0u;
    *((void *)&v88 + 1) = (char *)&v89 + 5;
    LODWORD(v89) = 40;
    *(void *)&__int128 v92 = 0LL;
    *((void *)&v92 + 1) = 0x3FF0000000000000LL;
    *(void *)&__int128 v93 = off_18971B688;
    icu::CharString::append((icu::CharString *)((char *)&v88 + 8), v16, v15, a7);
    uint64_t v17 = *(unsigned int *)a7;
    if ((int)v17 <= 0)
    {
      uint64_t v18 = sub_1809C2F7C(v11, (unint64_t)&v88);
      uint64_t v17 = *(unsigned int *)a7;
      if ((int)v17 <= 0 && !v18)
      {
        uint64_t v17 = 7LL;
        *a7 = U_MEMORY_ALLOCATION_ERROR;
      }
    }

    icu::UnicodeString::~UnicodeString((void *)v17, (icu::UnicodeString *)&v93);
    if (BYTE4(v89)) {
      uprv_free(*((void **)&v88 + 1));
    }
    int v14 = 0;
    char v13 = 1;
  }

  else
  {
LABEL_3:
    char v13 = 0;
    int v14 = 1;
  }

  if (BYTE4(__s1[1])) {
    uprv_free(__s1[0]);
  }
  if (v14)
  {
LABEL_28:
    *(void *)__s = 0LL;
    ulocimp_getRegionForSupplementalData(*(char **)(a6 + 40), 0, __s, 8, (int *)a7);
    __int128 v107 = 0u;
    memset(v106, 0, sizeof(v106));
    icu::StringPiece::StringPiece((icu::StringPiece *)&v64, __s);
    *(void *)&v106[0] = (unint64_t)v106 | 0xD;
    DWORD2(v106[0]) = 40;
    WORD6(v106[0]) = 0;
    DWORD2(v107) = 0;
    icu::CharString::append((icu::CharString *)v106, v64, v65, a7);
    int v63 = 0;
    __int128 v105 = 0u;
    memset(v104, 0, sizeof(v104));
    icu::StringPiece::StringPiece((icu::StringPiece *)&v61, "measure");
    sub_1809C14EC(a6, v61, v62, (UErrorCode *)&v63, (uint64_t)v104);
    if (v63 >= 1)
    {
      int v63 = 0;
      icu::StringPiece::StringPiece((icu::StringPiece *)&v59, "ms");
      sub_1809C14EC(a6, v59, v60, (UErrorCode *)&v63, (uint64_t)&v88);
      icu::CharString::operator=((uint64_t)v104, (uint64_t)&v88);
      if (BYTE12(v88)) {
        uprv_free((void *)v88);
      }
      if (v63 > 0) {
        goto LABEL_41;
      }
    }

    if ((icu::StringPiece::StringPiece((icu::StringPiece *)&v57, "metric"), DWORD2(v105) == (_DWORD)v58)
      && (!(_DWORD)v58 || !memcmp(*(const void **)&v104[0], v57, (int)v58))
      || (icu::StringPiece::StringPiece((icu::StringPiece *)&v55, "ussystem"), DWORD2(v105) == (_DWORD)v56)
      && (!(_DWORD)v56 || !memcmp(*(const void **)&v104[0], v55, (int)v56))
      || (icu::StringPiece::StringPiece((icu::StringPiece *)&v53, "uksystem"), DWORD2(v105) == (_DWORD)v54)
      && (!(_DWORD)v54 || !memcmp(*(const void **)&v104[0], v53, (int)v54)))
    {
      int v19 = 1;
    }

    else
    {
LABEL_41:
      int v19 = 0;
    }

    int v20 = sub_1809C1E78(a1, v83, v84, v81, v82, *(const char **)&v106[0], SDWORD2(v107), a7);
    uint64_t v21 = *(void *)(*(void *)(a1 + 8) + 8LL * v20);
    if (v19)
    {
      icu::StringPiece::StringPiece((icu::StringPiece *)&v51, "uksystem");
      if (DWORD2(v105) == (_DWORD)v52
        && (!(_DWORD)v52 || !memcmp(*(const void **)&v104[0], v51, (int)v52))
        && (icu::StringPiece::StringPiece((icu::StringPiece *)&v88, "mass"),
            icu::operator==((unsigned __int8 **)&v83, (unsigned __int8 **)&v88))
        && (icu::StringPiece::StringPiece((icu::StringPiece *)__s1, "person"),
            icu::operator==((unsigned __int8 **)&v81, (unsigned __int8 **)__s1)))
      {
LABEL_69:
        DWORD2(v107) = 0;
        **(_BYTE **)&v106[0] = 0;
        icu::StringPiece::StringPiece((icu::StringPiece *)&v43, "ussystem");
        if (DWORD2(v105) == (_DWORD)v44 && (!(_DWORD)v44 || !memcmp(*(const void **)&v104[0], v43, (int)v44)))
        {
          uint64_t v29 = "US";
          __int128 v30 = v42;
          float64x2_t v31 = (icu::StringPiece *)v42;
        }

        else
        {
          icu::StringPiece::StringPiece((icu::StringPiece *)&v40, "uksystem");
          if (DWORD2(v105) == (_DWORD)v41 && (!(_DWORD)v41 || !memcmp(*(const void **)&v104[0], v40, (int)v41)))
          {
            uint64_t v29 = "GB";
            __int128 v30 = v39;
            float64x2_t v31 = (icu::StringPiece *)v39;
          }

          else
          {
            uint64_t v29 = "001";
            __int128 v30 = v38;
            float64x2_t v31 = (icu::StringPiece *)v38;
          }
        }

        icu::StringPiece::StringPiece(v31, v29);
        icu::CharString::append((icu::CharString *)v106, *(const char **)v30, *((_DWORD *)v30 + 2), a7);
        int v32 = sub_1809C1E78(a1, v83, v84, v81, v82, *(const char **)&v106[0], SDWORD2(v107), a7);
        if (*(int *)a7 > 0)
        {
LABEL_93:
          if (BYTE12(v104[0])) {
            uprv_free(*(void **)&v104[0]);
          }
          if (BYTE12(v106[0])) {
            uprv_free(*(void **)&v106[0]);
          }
          return;
        }

        uint64_t v21 = *(void *)(*(void *)(a1 + 8) + 8LL * v32);
      }

      else
      {
        __int128 v37 = v11;
        __s1[0] = 0LL;
        __int128 v99 = 0u;
        uint64_t v103 = 0LL;
        __int128 v101 = 0u;
        __int128 v102 = 0u;
        __int128 v100 = 0u;
        __s1[1] = (char *)&v99 + 8;
        LODWORD(v99) = 8;
        icu::units::getAllConversionRates((uint64_t)__s1, (int *)a7);
        int v22 = 0;
        while (v22 < *(_DWORD *)(v21 + 204))
        {
          uint64_t v23 = *(void *)(*(void *)(a1 + 96) + 8LL * (*(_DWORD *)(v21 + 200) + v22));
          __int128 v96 = 0u;
          __int128 v97 = 0u;
          __int128 v94 = 0u;
          __int128 v95 = 0u;
          __int128 v92 = 0u;
          __int128 v93 = 0u;
          __int128 v90 = 0u;
          __int128 v91 = 0u;
          __int128 v88 = 0u;
          __int128 v89 = 0u;
          icu::StringPiece::StringPiece((icu::StringPiece *)v50, *(const char **)(v23 + 8));
          icu::MeasureUnitImpl::forIdentifier(v50[0], v50[1], (int *)a7, (uint64_t)&v88);
          if (SDWORD2(v88) < 1)
          {
            BOOL v27 = 1;
          }

          else
          {
            uint64_t v24 = 0LL;
            do
            {
              SimpleUnitID = (const char *)icu::SingleUnitImpl::getSimpleUnitID(*(icu::SingleUnitImpl **)(v89 + 8 * v24));
              icu::StringPiece::StringPiece((icu::StringPiece *)v49, SimpleUnitID);
              uint64_t ConversionInfo = icu::units::ConversionRates::extractConversionInfo((int *)__s1, v49[0], v49[1], a7);
              int v87 = 0;
              memset(&v85[1], 0, 48);
              v85[0] = (char *)&v85[1] + 5;
              LODWORD(v85[1]) = 40;
              int v86 = 0;
              icu::CharString::append( (icu::CharString *)v85,  *(const char **)(ConversionInfo + 264),  *(_DWORD *)(ConversionInfo + 320),  a7);
              icu::StringPiece::StringPiece((icu::StringPiece *)&v47, "metric_adjacent");
              if (icu::CharString::contains(v85, v47, v48))
              {
                BOOL v27 = 1;
              }

              else
              {
                icu::StringPiece::StringPiece((icu::StringPiece *)&v45, *(const char **)&v104[0]);
                BOOL v27 = icu::CharString::contains(v85, v45, v46);
              }

              if (BYTE4(v85[1])) {
                uprv_free(v85[0]);
              }
            }

            while (++v24 < SDWORD2(v88) && v27);
          }

          if (BYTE12(v94)) {
            uprv_free((void *)v94);
          }
          sub_180850D68((uint64_t)&v88 + 8);
          ++v22;
          if (!v27)
          {
            sub_18093F1A0((uint64_t)__s1);
            int v11 = v37;
            goto LABEL_69;
          }
        }

        sub_18093F1A0((uint64_t)__s1);
        int v11 = v37;
      }
    }

    if (*(int *)(v21 + 204) >= 1)
    {
      uint64_t v33 = 0LL;
      UErrorCode v34 = *a7;
      do
      {
        if (v34 <= U_ZERO_ERROR)
        {
          float64x2_t v35 = sub_1809C2F7C(v11, *(void *)(*(void *)(a1 + 96) + 8 * (v33 + *(int *)(v21 + 200))));
          UErrorCode v34 = *a7;
          if (*(int *)a7 <= 0 && v35 == 0LL)
          {
            UErrorCode v34 = U_MEMORY_ALLOCATION_ERROR;
            *a7 = U_MEMORY_ALLOCATION_ERROR;
          }
        }

        ++v33;
      }

      while ((int)v33 < *(_DWORD *)(v21 + 204));
    }

    goto LABEL_93;
  }

  if ((v13 & 1) == 0) {
    sub_1809B0AAC((unsigned int *)v11);
  }
}

uint64_t sub_1809C1E78( uint64_t a1, const char *a2, int a3, const char *a4, int a5, const char *a6, int a7, UErrorCode *a8)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  uint64_t v8 = 0xFFFFFFFFLL;
  __int16 v22 = 0;
  char v21 = 0;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v29 = 0u;
  *(_OWORD *)BOOL v27 = 0u;
  __int128 v28 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  icu::units::UnitPreferenceMetadata::UnitPreferenceMetadata((uint64_t)&v23, a2, a3, a4, a5, a6, a7, -1, -1, a8);
  uint64_t v11 = sub_1809C2EC0(a1, (const char **)&v23, (_BYTE *)&v22 + 1, &v22, &v21, (int *)a8);
  if (*(int *)a8 <= 0)
  {
    if ((v11 & 0x80000000) == 0)
    {
LABEL_4:
      uint64_t v8 = v11;
      goto LABEL_14;
    }

    if (HIBYTE(v22))
    {
      while (!(_BYTE)v22)
      {
        int IndexOf = icu::CharString::lastIndexOf((icu::CharString *)&v27[1], 0x2Du);
        if (IndexOf < 1)
        {
          if (!strcmp(v27[1], "default")) {
            goto LABEL_10;
          }
          uint64_t v16 = (icu::CharString *)icu::CharString::truncate((uint64_t)&v27[1], 0);
          icu::StringPiece::StringPiece((icu::StringPiece *)&v19, "default");
          icu::CharString::append(v16, v19, v20, a8);
        }

        else
        {
          icu::CharString::truncate((uint64_t)&v27[1], IndexOf);
        }

        uint64_t v11 = sub_1809C2EC0(a1, (const char **)&v23, (_BYTE *)&v22 + 1, &v22, &v21, (int *)a8);
      }

      uint64_t v8 = v11;
      if (v21) {
        goto LABEL_14;
      }
      if (strcmp(*((const char **)&v31 + 1), "001"))
      {
        uint64_t v12 = (icu::CharString *)icu::CharString::truncate((uint64_t)&v31 + 8, 0);
        icu::StringPiece::StringPiece((icu::StringPiece *)&v17, "001");
        icu::CharString::append(v12, v17, v18, a8);
        uint64_t v11 = sub_1809C2EC0(a1, (const char **)&v23, (_BYTE *)&v22 + 1, &v22, &v21, (int *)a8);
        if (v21) {
          goto LABEL_4;
        }
      }

void sub_1809C20DC(icu::ResourceSink *a1)
{
}

uint64_t sub_1809C20F0(uint64_t result, char *__s1, icu::ResourceValue *a3, uint64_t a4, UErrorCode *a5)
{
  v60[8] = *(void **)MEMORY[0x1895F89C0];
  if (*(int *)a5 <= 0)
  {
    uint64_t v7 = result;
    uint64_t result = strcmp(__s1, "convertUnits");
    if ((_DWORD)result)
    {
      *a5 = U_ILLEGAL_ARGUMENT_ERROR;
      return result;
    }

    uint64_t v37 = 0LL;
    memset(v36, 0, sizeof(v36));
    (*(void (**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 88LL))( v36,  a3,  a5);
    __s = 0LL;
    uint64_t result = icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v36, 0, (const char **)&__s, a3);
    if ((_DWORD)result)
    {
      int v8 = 0;
      while (1)
      {
        uint64_t v34 = 0LL;
        memset(v33, 0, sizeof(v33));
        (*(void (**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 88LL))( v33,  a3,  a5);
        __s1a = 0LL;
        uint64_t v59 = 0LL;
        __int128 v57 = 0u;
        __int128 v58 = 0u;
        __int128 v56 = 0u;
        __int128 v55 = off_18971B688;
        LOWORD(v56) = 2;
        icu::UnicodeString::setToBogus((icu::UnicodeString *)&v55);
        uint64_t v54 = 0LL;
        __int128 v52 = 0u;
        __int128 v53 = 0u;
        __int128 v51 = 0u;
        __int128 v50 = off_18971B688;
        LOWORD(v51) = 2;
        icu::UnicodeString::setToBogus((icu::UnicodeString *)&v50);
        uint64_t v49 = 0LL;
        __int128 v47 = 0u;
        __int128 v48 = 0u;
        __int128 v46 = 0u;
        uint64_t v45 = off_18971B688;
        LOWORD(v46) = 2;
        icu::UnicodeString::setToBogus((icu::UnicodeString *)&v45);
        uint64_t v44 = 0LL;
        __int128 v42 = 0u;
        __int128 v43 = 0u;
        __int128 v41 = 0u;
        uint64_t v40 = off_18971B688;
        LOWORD(v41) = 2;
        icu::UnicodeString::setToBogus((icu::UnicodeString *)&v40);
LABEL_18:
        uint64_t v15 = *(unsigned int *)a5;
        if ((v56 & 1) != 0 || (v51 & 1) != 0)
        {
          uint64_t v15 = 2LL;
LABEL_35:
          *a5 = v15;
LABEL_36:
          icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v40);
          icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v45);
          icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v50);
          return (uint64_t)icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)&v55);
        }

        uint64_t v16 = sub_1809C263C(*(const void ***)(v7 + 8), v9);
        if (!v16)
        {
          uint64_t v15 = 7LL;
          goto LABEL_35;
        }

        uint64_t v17 = v16;
        uint64_t v18 = v7;
        int v19 = (icu::CharString *)(v16 + 1);
        icu::StringPiece::StringPiece((icu::StringPiece *)&v30, __s);
        icu::CharString::append(v19, v30, v31, a5);
        icu::CharString::appendInvariantChars((icu::CharString *)(v17 + 9), (const icu::UnicodeString *)&v55, a5);
        icu::CharString::appendInvariantChars((icu::CharString *)(v17 + 17), (const icu::UnicodeString *)&v50, a5);
        icu::CharString::appendInvariantChars((icu::CharString *)(v17 + 33), (const icu::UnicodeString *)&v40, a5);
        memset(&v60[1], 0, 56);
        v60[0] = (char *)&v60[1] + 5;
        LODWORD(v60[1]) = 40;
        int v20 = *((_DWORD *)v17 + 48);
        if (v20 >= 1)
        {
          for (uint64_t i = 0LL; i < v20; ++i)
          {
            int v22 = *(unsigned __int8 *)(v17[17] + i);
            if (v22 != 32)
            {
              icu::CharString::append((icu::CharString *)v60, v22, a5);
              int v20 = *((_DWORD *)v17 + 48);
            }
          }
        }

        icu::CharString::operator=((uint64_t)(v17 + 17), (uint64_t)v60);
        if (BYTE4(v60[1])) {
          uprv_free(v60[0]);
        }
        unint64_t v23 = (unsigned __int16)v46;
        if ((v46 & 1) == 0) {
          icu::CharString::appendInvariantChars((icu::CharString *)(v17 + 25), (const icu::UnicodeString *)&v45, a5);
        }
        icu::UnicodeString::~UnicodeString((void *)v23, (icu::UnicodeString *)&v40);
        icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)&v45);
        icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)&v50);
        icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)&v55);
        uint64_t result = icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v36, ++v8, (const char **)&__s, a3);
        uint64_t v7 = v18;
        if (!(_DWORD)result) {
          return result;
        }
      }

      unsigned int v10 = 1;
      while (1)
      {
        uint64_t v11 = __s1a;
        if (!strcmp(__s1a, "target")) {
          break;
        }
        if (!strcmp(v11, "factor"))
        {
          int v39 = 0;
          uint64_t v38 = (*(uint64_t (**)(icu::ResourceValue *, int *, UErrorCode *))(*(void *)a3 + 32LL))( a3,  &v39,  a5);
          icu::UnicodeString::UnicodeString(v60, 1LL, &v38);
          uint64_t v12 = &v50;
          goto LABEL_16;
        }

        if (!strcmp(v11, "offset"))
        {
          int v39 = 0;
          uint64_t v38 = (*(uint64_t (**)(icu::ResourceValue *, int *, UErrorCode *))(*(void *)a3 + 32LL))( a3,  &v39,  a5);
          icu::UnicodeString::UnicodeString(v60, 1LL, &v38);
          uint64_t v12 = &v45;
          goto LABEL_16;
        }

        if (!strcmp(v11, "systems"))
        {
          int v39 = 0;
          uint64_t v38 = (*(uint64_t (**)(icu::ResourceValue *, int *, UErrorCode *))(*(void *)a3 + 32LL))( a3,  &v39,  a5);
          icu::UnicodeString::UnicodeString(v60, 1LL, &v38);
          uint64_t v12 = &v40;
LABEL_16:
          icu::UnicodeString::operator=((icu::UnicodeString *)v12, (icu::UnicodeString *)v60);
          icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v60);
        }

        if (!icu::ResourceTable::getKeyAndValue( (icu::ResourceTable *)v33,  v10++,  (const char **)&__s1a,  a3)) {
          goto LABEL_18;
        }
      }

      int v39 = 0;
      uint64_t v38 = (*(uint64_t (**)(icu::ResourceValue *, int *, UErrorCode *))(*(void *)a3 + 32LL))(a3, &v39, a5);
      icu::UnicodeString::UnicodeString(v60, 1LL, &v38);
      uint64_t v12 = &v55;
      goto LABEL_16;
    }
  }

  return result;
}

uint64_t *sub_1809C263C(const void **a1, unint64_t a2)
{
  int v3 = *((_DWORD *)a1 + 4);
  uint64_t v4 = *(unsigned int *)a1;
  if ((_DWORD)v4 == v3)
  {
    if (v3 == 8) {
      int v5 = 32;
    }
    else {
      int v5 = 2 * v3;
    }
    if (v5 < 1) {
      return 0LL;
    }
    uint64_t result = (uint64_t *)uprv_malloc(8LL * v5);
    if (!result) {
      return result;
    }
    uint64_t v7 = result;
    if (v3 >= 1)
    {
      int v8 = *((_DWORD *)a1 + 4);
      if (v8 >= v3) {
        int v8 = v3;
      }
      if (v8 >= v5) {
        int v8 = v5;
      }
      memcpy(result, a1[1], 8LL * v8);
    }

    if (*((_BYTE *)a1 + 20)) {
      uprv_free((void *)a1[1]);
    }
    a1[1] = v7;
    *((_DWORD *)a1 + 4) = v5;
    uint64_t v4 = 1LL;
    *((_BYTE *)a1 + 20) = 1;
  }

  uint64_t result = icu::UMemory::operator new((uint64_t *)v4, (icu::UMemory *)0x148, a2);
  if (result) {
    uint64_t result = (uint64_t *)sub_1809C2710((uint64_t)result);
  }
  uint64_t v9 = *(int *)a1;
  *(_DWORD *)a1 = v9 + 1;
  *((void *)a1[1] + v9) = result;
  return result;
}

uint64_t sub_1809C2710(uint64_t result)
{
  *(void *)(result + 8) = result + 21;
  *(_DWORD *)(result + 16) = 40;
  *(_WORD *)(result + 20) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(void *)(result + 72) = result + 85;
  *(_DWORD *)(result + 80) = 40;
  *(_WORD *)(result + 84) = 0;
  *(_DWORD *)(result + 128) = 0;
  *(void *)(result + 136) = result + 149;
  *(_DWORD *)(result + 144) = 40;
  *(_WORD *)(result + 148) = 0;
  *(_DWORD *)(result + 192) = 0;
  *(void *)(result + 200) = result + 213;
  *(_DWORD *)(result + 208) = 40;
  *(_WORD *)(result + 212) = 0;
  *(_DWORD *)(result + 256) = 0;
  *(void *)(result + 264) = result + 277;
  *(_DWORD *)(result + 272) = 40;
  *(_BYTE *)(result + 276) = 0;
  *(_DWORD *)(result + 320) = 0;
  *(_BYTE *)(result + 277) = 0;
  return result;
}

void sub_1809C2784(icu::ResourceSink *a1)
{
}

uint64_t sub_1809C2798(uint64_t result, char *__s1, icu::ResourceValue *a3, uint64_t a4, UErrorCode *a5)
{
  _BYTE v42[8] = *(void **)MEMORY[0x1895F89C0];
  int v39 = __s1;
  if (*(int *)a5 <= 0)
  {
    uint64_t v7 = result;
    uint64_t result = strcmp(__s1, "unitPreferenceData");
    if ((_DWORD)result)
    {
      int v8 = 1;
LABEL_4:
      *a5 = v8;
    }

    else
    {
      memset(v38, 0, 40);
      (*(void (**)(char **__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 88LL))( v38,  a3,  a5);
      uint64_t v37 = 0LL;
      uint64_t result = icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v38, 0, (const char **)&v37, a3);
      if ((_DWORD)result)
      {
        int v21 = 0;
        uint64_t v24 = v7;
        while (1)
        {
          memset(v36, 0, sizeof(v36));
          (*(void (**)(char **__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 88LL))( v36,  a3,  a5);
          __int128 v35 = 0LL;
LABEL_34:
          uint64_t result = icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v38, ++v21, (const char **)&v37, a3);
          if (!(_DWORD)result) {
            return result;
          }
        }

        int v22 = 0;
        while (1)
        {
          uint64_t v34 = 0LL;
          memset(v33, 0, sizeof(v33));
          (*(void (**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 88LL))( v33,  a3,  a5);
          __int128 v32 = 0LL;
LABEL_33:
          if (!icu::ResourceTable::getKeyAndValue( (icu::ResourceTable *)v36,  ++v22,  (const char **)&v35,  a3)) {
            goto LABEL_34;
          }
        }

        int v9 = 0;
        while (1)
        {
          v30[0] = 0LL;
          v30[1] = 0LL;
          uint64_t v31 = 0LL;
          uint64_t result = (uint64_t)(*(void *(**)(void *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 80LL))( v30,  a3,  a5);
          int v29 = v31;
          unsigned int v10 = *(unsigned int **)(v7 + 16);
          LODWORD(v41[0]) = **(_DWORD **)(v7 + 8);
          uint64_t result = (uint64_t)sub_1809C2C64( v10,  (const char **)&v37,  (const char **)&v35,  (const char **)&v32,  (int *)v41,  &v29,  a5);
          if (!result) {
            goto LABEL_36;
          }
          uint64_t v11 = *(void *)(v7 + 16);
          if (*(int *)v11 >= 2)
          {
            uint64_t result = icu::units::UnitPreferenceMetadata::compareTo( *(const char ***)(*(void *)(v11 + 8) + 8LL * (*(_DWORD *)v11 - 2)),  *(const char ***)(*(void *)(v11 + 8) + 8LL * (*(_DWORD *)v11 - 1)));
            if ((result & 0x80000000) == 0)
            {
              int v8 = 3;
              goto LABEL_4;
            }
          }

          int v23 = v9;
          if (icu::ResourceArray::getValue((icu::ResourceArray *)v30, 0, a3))
          {
            unsigned int v13 = 0;
            while (1)
            {
              uint64_t result = (uint64_t)sub_1809C2DBC(*(const void ***)(v7 + 8), v12);
              if (!result) {
                break;
              }
              uint64_t v14 = result;
              uint64_t v28 = 0LL;
              memset(v27, 0, sizeof(v27));
              uint64_t result = (uint64_t)(*(void *(**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 88LL))( v27,  a3,  a5);
              if (icu::ResourceTable::getKeyAndValue( (icu::ResourceTable *)v27,  0,  (const char **)&v39,  a3))
              {
                unsigned int v15 = 1;
                do
                {
                  uint64_t v16 = v39;
                  if (!strcmp(v39, "unit"))
                  {
                    LODWORD(v41[0]) = 0;
                    uint64_t v18 = (UChar *)(*(uint64_t (**)(icu::ResourceValue *, void **, UErrorCode *))(*(void *)a3 + 32LL))( a3,  v41,  a5);
                    icu::CharString::appendInvariantChars((int *)(v14 + 8), v18, (int32_t)v41[0], a5);
                  }

                  else if (!strcmp(v16, "geq"))
                  {
                    int32_t v40 = 0;
                    int v19 = (UChar *)(*(uint64_t (**)(icu::ResourceValue *, int32_t *, UErrorCode *))(*(void *)a3 + 32LL))( a3,  &v40,  a5);
                    memset(&v42[1], 0, 56);
                    v42[0] = (char *)&v42[1] + 5;
                    LODWORD(v42[1]) = 40;
                    icu::CharString::appendInvariantChars((int *)v42, v19, v40, a5);
                    memset(v41, 0, sizeof(v41));
                    icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v41);
                    icu::StringPiece::StringPiece((icu::StringPiece *)&v25, (const char *)v42[0]);
                    icu::number::impl::DecimalQuantity::setToDecNumber((uint64_t)v41, v25, v26, a5);
                    *(double *)(v14 + 72) = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v41);
                    icu::number::impl::DecimalQuantity::~DecimalQuantity(v41);
                    if (BYTE4(v42[1])) {
                      uprv_free(v42[0]);
                    }
                  }

                  else if (!strcmp(v16, "skeleton"))
                  {
                    int32_t v40 = 0;
                    v42[0] = (void *)(*(uint64_t (**)(icu::ResourceValue *, int32_t *, UErrorCode *))(*(void *)a3 + 32LL))( a3,  &v40,  a5);
                    icu::UnicodeString::UnicodeString(v41, 1LL, v42);
                    icu::UnicodeString::operator=((icu::UnicodeString *)(v14 + 80), (icu::UnicodeString *)v41);
                    icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v41);
                  }
                }

                while (icu::ResourceTable::getKeyAndValue( (icu::ResourceTable *)v27,  v15++,  (const char **)&v39,  a3));
              }

              ++v13;
              uint64_t v7 = v24;
            }

uint64_t *sub_1809C2C64( unsigned int *a1, const char **a2, const char **a3, const char **a4, int *a5, int *a6, UErrorCode *a7)
{
  int v14 = a1[4];
  uint64_t v15 = *a1;
  if ((_DWORD)v15 != v14)
  {
LABEL_16:
    uint64_t v18 = icu::UMemory::operator new((uint64_t *)v15, (icu::UMemory *)0xD0, (unint64_t)a2);
    if (v18)
    {
      icu::StringPiece::StringPiece((icu::StringPiece *)&v26, *a2);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v24, *a3);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v22, *a4);
      icu::units::UnitPreferenceMetadata::UnitPreferenceMetadata( (uint64_t)v18,  v26,  v27,  v24,  v25,  v22,  v23,  *a5,  *a6,  a7);
    }

    uint64_t v20 = (int)*a1;
    *a1 = v20 + 1;
    *(void *)(*((void *)a1 + 1) + 8 * v20) = v18;
    return v18;
  }

  if (v14 == 8) {
    int v16 = 32;
  }
  else {
    int v16 = 2 * v14;
  }
  if (v16 < 1) {
    return 0LL;
  }
  uint64_t v17 = (uint64_t *)uprv_malloc(8LL * v16);
  uint64_t v18 = v17;
  if (v17)
  {
    if (v14 >= 1)
    {
      int v19 = a1[4];
      if (v19 >= v14) {
        int v19 = v14;
      }
      if (v19 >= v16) {
        int v19 = v16;
      }
      memcpy(v17, *((const void **)a1 + 1), 8LL * v19);
    }

    if (*((_BYTE *)a1 + 20)) {
      uprv_free(*((void **)a1 + 1));
    }
    *((void *)a1 + 1) = v18;
    a1[4] = v16;
    uint64_t v15 = 1LL;
    *((_BYTE *)a1 + 20) = 1;
    goto LABEL_16;
  }

  return v18;
}

uint64_t *sub_1809C2DBC(const void **a1, unint64_t a2)
{
  int v3 = *((_DWORD *)a1 + 4);
  uint64_t v4 = *(unsigned int *)a1;
  if ((_DWORD)v4 == v3)
  {
    if (v3 == 8) {
      int v5 = 32;
    }
    else {
      int v5 = 2 * v3;
    }
    if (v5 < 1) {
      return 0LL;
    }
    uint64_t result = (uint64_t *)uprv_malloc(8LL * v5);
    if (!result) {
      return result;
    }
    uint64_t v7 = result;
    if (v3 >= 1)
    {
      int v8 = *((_DWORD *)a1 + 4);
      if (v8 >= v3) {
        int v8 = v3;
      }
      if (v8 >= v5) {
        int v8 = v5;
      }
      memcpy(result, a1[1], 8LL * v8);
    }

    if (*((_BYTE *)a1 + 20)) {
      uprv_free((void *)a1[1]);
    }
    a1[1] = v7;
    *((_DWORD *)a1 + 4) = v5;
    uint64_t v4 = 1LL;
    *((_BYTE *)a1 + 20) = 1;
  }

  uint64_t result = icu::UMemory::operator new((uint64_t *)v4, (icu::UMemory *)0x90, a2);
  if (result)
  {
    result[1] = (uint64_t)result + 21;
    *((_DWORD *)result + 4) = 40;
    *((_WORD *)result + 10) = 0;
    *((_DWORD *)result + 16) = 0;
    result[9] = 0x3FF0000000000000LL;
    result[10] = (uint64_t)off_18971B688;
    *((_WORD *)result + 44) = 2;
  }

  uint64_t v9 = *(int *)a1;
  *(_DWORD *)a1 = v9 + 1;
  *((void *)a1[1] + v9) = result;
  return result;
}

uint64_t sub_1809C2EC0(uint64_t a1, const char **a2, _BYTE *a3, _BYTE *a4, _BYTE *a5, int *a6)
{
  if (*a6 <= 0)
  {
    int v12 = *(_DWORD *)a1;
    *a3 = 0;
    *a4 = 0;
    *a5 = 0;
    if (v12 >= 1)
    {
      int v14 = 0;
      do
      {
        int v15 = v12 + v14;
        if (v12 + v14 < 0 != __OFADD__(v12, v14)) {
          ++v15;
        }
        uint64_t v6 = (v15 >> 1);
        int v16 = icu::units::UnitPreferenceMetadata::compareTo( *(const char ***)(*(void *)(a1 + 8) + 8LL * (int)v6),  a2,  a3,  a4,  a5);
        if (v16 < 0)
        {
          int v14 = v6 + 1;
        }

        else
        {
          int v12 = v6;
          if (!v16) {
            return v6;
          }
        }
      }

      while (v14 < v12);
    }
  }

  return 0xFFFFFFFFLL;
}

uint64_t *sub_1809C2F7C(const void **a1, unint64_t a2)
{
  int v4 = *((_DWORD *)a1 + 4);
  uint64_t v5 = *(unsigned int *)a1;
  if ((_DWORD)v5 == v4)
  {
    if (v4 == 8) {
      int v6 = 32;
    }
    else {
      int v6 = 2 * v4;
    }
    if (v6 < 1) {
      return 0LL;
    }
    uint64_t result = (uint64_t *)uprv_malloc(8LL * v6);
    if (!result) {
      return result;
    }
    int v8 = result;
    if (v4 >= 1)
    {
      int v9 = *((_DWORD *)a1 + 4);
      if (v9 >= v4) {
        int v9 = v4;
      }
      if (v9 >= v6) {
        int v9 = v6;
      }
      memcpy(result, a1[1], 8LL * v9);
    }

    if (*((_BYTE *)a1 + 20)) {
      uprv_free((void *)a1[1]);
    }
    a1[1] = v8;
    *((_DWORD *)a1 + 4) = v6;
    uint64_t v5 = 1LL;
    *((_BYTE *)a1 + 20) = 1;
  }

  uint64_t result = icu::UMemory::operator new((uint64_t *)v5, (icu::UMemory *)0x90, a2);
  if (result) {
    uint64_t result = (uint64_t *)sub_1809C3060((uint64_t)result, a2);
  }
  uint64_t v10 = *(int *)a1;
  *(_DWORD *)a1 = v10 + 1;
  *((void *)a1[1] + v10) = result;
  return result;
}

uint64_t sub_1809C3060(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = a1 + 21;
  *(_DWORD *)(a1 + 16) = 40;
  *(_WORD *)(a1 + 20) = 0;
  *(void *)(a1 + 80) = off_18971B688;
  *(_DWORD *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 88) = 2;
  UErrorCode v5 = U_ZERO_ERROR;
  icu::CharString::append((icu::CharString *)(a1 + 8), *(const char **)(a2 + 8), *(_DWORD *)(a2 + 64), &v5);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  icu::UnicodeString::operator=((UChar **)(a1 + 80), (UChar **)(a2 + 80));
  return a1;
}

void icu::units::UnitsRouter::parseSkeletonToPrecision( unsigned __int8 *a1@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  v15[7] = *MEMORY[0x1895F89C0];
  unsigned int v13 = "p";
  icu::UnicodeString::UnicodeString(&v14, 1LL, &v13);
  int v6 = (void *)LOWORD(v15[0]);
  if (SLOWORD(v15[0]) >= 0) {
    int32_t v7 = LOWORD(v15[0]) >> 5;
  }
  else {
    int32_t v7 = HIDWORD(v15[0]);
  }
  if ((v15[0] & 1) != 0)
  {
    int v6 = (void *)a1[8];
    BOOL v11 = v6 & 1;
    goto LABEL_19;
  }

  int v8 = v7 & (v7 >> 31);
  if (v7 < 0)
  {
    int32_t v9 = 0;
    goto LABEL_12;
  }

  int32_t v9 = v7 - v8;
  int32_t v10 = v7;
  if (v7 - v8 < v7) {
LABEL_12:
  }
    int32_t v10 = v9;
  if ((*((_WORD *)a1 + 4) & 1) != 0)
  {
    BOOL v11 = 0;
  }

  else
  {
    if ((v15[0] & 2) != 0) {
      int v12 = (char *)v15 + 2;
    }
    else {
      int v12 = (char *)v15[2];
    }
    BOOL v11 = icu::UnicodeString::doEqualsSubstring((uint64_t)a1, 0, v7, (uint64_t)v12, v8, v10);
  }

uint64_t icu::units::UnitsRouter::UnitsRouter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, int *a7)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = a1 + 24;
  *(_DWORD *)(a1 + 16) = 8;
  *(_BYTE *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = a1 + 112;
  *(_DWORD *)(a1 + 104) = 8;
  *(_BYTE *)(a1 + 108) = 0;
  icu::MeasureUnit::forIdentifier(a2, a3, a7, (uint64_t)v13);
  icu::units::UnitsRouter::init(a1, v13, a4, a5, a6, a7);
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v13);
  return a1;
}

uint64_t icu::units::UnitsRouter::init( uint64_t result, icu::MeasureUnitImpl **a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, int *a6)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  if (*a6 <= 0)
  {
    uint64_t v11 = result;
    v26[0] = 0LL;
    memset(&v26[2], 0, 72);
    v26[1] = &v26[3];
    LODWORD(v26[2]) = 8;
    icu::units::getAllConversionRates((uint64_t)v26, a6);
    memset(v25, 0, sizeof(v25));
    icu::units::UnitPreferences::UnitPreferences((icu::units::UnitPreferences *)v25, (UErrorCode *)a6);
    __int128 v46 = 0u;
    __int128 v47 = 0u;
    __int128 v44 = 0u;
    __int128 v45 = 0u;
    memset(v43, 0, sizeof(v43));
    icu::MeasureUnitImpl::forMeasureUnitMaybeCopy(a2, (UErrorCode *)a6, (uint64_t)v43);
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    memset(v38, 0, sizeof(v38));
    icu::units::extractCompoundBaseUnit((uint64_t)v43, (int *)v26, a6, (uint64_t)v38);
    __int128 v37 = 0u;
    memset(v36, 0, sizeof(v36));
    icu::getUnitQuantity((icu *)v38, (UErrorCode *)a6, (uint64_t)v36);
    if (*a6 <= 0)
    {
      uint64_t v24 = 0LL;
      memset(v23, 0, sizeof(v23));
      icu::units::UnitPreferences::getPreferencesFor( (uint64_t)v25,  *(unsigned __int8 **)&v36[0],  DWORD2(v37),  a4,  a5,  a3,  (UErrorCode *)a6,  (uint64_t)v23);
      if (SLODWORD(v23[0]) >= 1)
      {
        uint64_t v12 = 0LL;
        uint64_t v13 = 8LL * LODWORD(v23[0]) - 8;
        __int128 v14 = 0uLL;
        do
        {
          uint64_t v15 = *(void *)(*((void *)&v23[0] + 1) + v12);
          __int128 v34 = v14;
          __int128 v35 = v14;
          __int128 v32 = v14;
          __int128 v33 = v14;
          v31[4] = v14;
          v31[5] = v14;
          v31[2] = v14;
          v31[3] = v14;
          v31[0] = v14;
          v31[1] = v14;
          icu::StringPiece::StringPiece((icu::StringPiece *)v22, *(const char **)(v15 + 8));
          icu::MeasureUnitImpl::forIdentifier(v22[0], v22[1], a6, (uint64_t)v31);
          if (*a6 <= 0)
          {
            memset(v30, 0, sizeof(v30));
            icu::UnicodeString::UnicodeString((icu::UnicodeString *)v30, (UChar **)(v15 + 80));
            if (WORD4(v30[0]) < 0x20u
              || icu::UnicodeString::doEqualsSubstring((uint64_t)v30, 0, 19, (uint64_t)"p", 0, 19))
            {
              icu::MeasureUnitImpl::copy((icu::MeasureUnitImpl *)v31, (UErrorCode *)a6, (uint64_t)v27);
              icu::MeasureUnitImpl::build((icu::MeasureUnitImpl *)v27, (UErrorCode *)a6, (uint64_t)v21);
              if (*a6 <= 0)
              {
                uint64_t v17 = sub_1809C39B4((const void **)v11, (unint64_t)v21);
                if (*a6 <= 0 && !v17) {
                  *a6 = 7;
                }
              }

              icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v21);
              if (v29) {
                uprv_free(v28[11]);
              }
              sub_180850D68((uint64_t)v28);
              uint64_t v18 = *a6;
              if ((int)v18 <= 0)
              {
                int v19 = sub_1809C3A98( (unsigned int *)(v11 + 88),  (unint64_t)v43,  (icu::MeasureUnitImpl *)v31,  (double *)(v15 + 72),  (UChar **)v30,  (uint64_t)v26,  (UErrorCode *)a6);
                uint64_t v18 = *a6;
                if ((int)v18 <= 0 && !v19)
                {
                  uint64_t v18 = 7LL;
                  *a6 = 7;
                }
              }

              BOOL v16 = (int)v18 > 0;
            }

            else
            {
              uint64_t v18 = 5LL;
              *a6 = 5;
              BOOL v16 = 1;
            }

            icu::UnicodeString::~UnicodeString((void *)v18, (icu::UnicodeString *)v30);
          }

          else
          {
            BOOL v16 = 1;
          }

          if (BYTE12(v32)) {
            uprv_free((void *)v32);
          }
          sub_180850D68((uint64_t)v31 + 8);
          __int128 v14 = 0uLL;
          if (v16) {
            break;
          }
          BOOL v20 = v13 == v12;
          v12 += 8LL;
        }

        while (!v20);
      }

      sub_1809B0AAC((unsigned int *)v23);
    }

    if (BYTE12(v36[0])) {
      uprv_free(*(void **)&v36[0]);
    }
    if (BYTE12(v39)) {
      uprv_free((void *)v39);
    }
    sub_180850D68((uint64_t)v38 + 8);
    if (BYTE12(v44)) {
      uprv_free((void *)v44);
    }
    sub_180850D68((uint64_t)v43 + 8);
    sub_1809B0AAC((unsigned int *)&v25[5] + 2);
    sub_1809B0B6C((uint64_t)v25);
    return sub_18093F1A0((uint64_t)v26);
  }

  return result;
}

uint64_t icu::units::UnitsRouter::UnitsRouter( uint64_t a1, icu::MeasureUnitImpl **a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, int *a6)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = a1 + 24;
  *(_DWORD *)(a1 + 16) = 8;
  *(_BYTE *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = a1 + 112;
  *(_DWORD *)(a1 + 104) = 8;
  *(_BYTE *)(a1 + 108) = 0;
  icu::units::UnitsRouter::init(a1, a2, a3, a4, a5, a6);
  return a1;
}

{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = a1 + 24;
  *(_DWORD *)(a1 + 16) = 8;
  *(_BYTE *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = a1 + 112;
  *(_DWORD *)(a1 + 104) = 8;
  *(_BYTE *)(a1 + 108) = 0;
  icu::units::UnitsRouter::init(a1, a2, a3, a4, a5, a6);
  return a1;
}

uint64_t icu::units::UnitsRouter::route@<X0>( uint64_t a1@<X0>, _OWORD *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  uint64_t v9 = *(unsigned int *)(a1 + 88);
  if ((int)v9 < 1)
  {
    uint64_t v14 = 0LL;
    if (!a2) {
      goto LABEL_18;
    }
  }

  else
  {
    uint64_t v11 = 0LL;
    double v12 = fabs(a5) * 1.0;
    uint64_t v13 = 8 * v9 - 8;
    do
    {
      uint64_t v14 = *(void *)(*(void *)(a1 + 96) + v11);
      BOOL v15 = icu::units::ComplexUnitsConverter::greaterThanOrEqual( (icu::units::UnitsConverter ***)(v14 + 8),  v12,  *(double *)(v14 + 192))
         || v13 == v11;
      v11 += 8LL;
    }

    while (!v15);
    if (!a2) {
      goto LABEL_18;
    }
  }

  if (!*(_DWORD *)a2)
  {
    else {
      int v16 = *(unsigned __int16 *)(v14 + 208) >> 5;
    }
    if (v16 < 1)
    {
      icu::number::Precision::integer((uint64_t)v21);
      icu::number::FractionPrecision::withMinDigits((uint64_t)v21, 2, (uint64_t)v22);
      *a2 = *(_OWORD *)v22;
      *(_OWORD *)((char *)a2 + 12) = *(_OWORD *)&v22[12];
    }

    else
    {
      uint64_t v17 = (unsigned __int8 *)icu::UnicodeString::UnicodeString((icu::UnicodeString *)v26, (UChar **)(v14 + 200));
      icu::units::UnitsRouter::parseSkeletonToPrecision(v17, a3, (uint64_t)v22);
      *a2 = *(_OWORD *)v22;
      *(_OWORD *)((char *)a2 + 12) = *(_OWORD *)&v22[12];
      icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v26);
    }
  }

uint64_t sub_1809C3968(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(a1 + 96) = *a3;
  sub_18090BCB4(a1 + 104, (uint64_t)(a3 + 2));
  icu::CharString::CharString(a1 + 192, a3 + 24);
  return a1;
}

uint64_t *sub_1809C39B4(const void **a1, unint64_t a2)
{
  int v4 = *((_DWORD *)a1 + 4);
  uint64_t v5 = *(unsigned int *)a1;
  if ((_DWORD)v5 == v4)
  {
    if (v4 == 8) {
      int v6 = 32;
    }
    else {
      int v6 = 2 * v4;
    }
    if (v6 < 1) {
      return 0LL;
    }
    uint64_t result = (uint64_t *)uprv_malloc(8LL * v6);
    if (!result) {
      return result;
    }
    int v8 = result;
    if (v4 >= 1)
    {
      int v9 = *((_DWORD *)a1 + 4);
      if (v9 >= v4) {
        int v9 = v4;
      }
      if (v9 >= v6) {
        int v9 = v6;
      }
      memcpy(result, a1[1], 8LL * v9);
    }

    if (*((_BYTE *)a1 + 20)) {
      uprv_free((void *)a1[1]);
    }
    a1[1] = v8;
    *((_DWORD *)a1 + 4) = v6;
    uint64_t v5 = 1LL;
    *((_BYTE *)a1 + 20) = 1;
  }

  uint64_t result = icu::UMemory::operator new((uint64_t *)v5, (icu::UMemory *)0x18, a2);
  if (result) {
    uint64_t result = (uint64_t *)icu::MeasureUnit::MeasureUnit((uint64_t)result, a2);
  }
  uint64_t v10 = *(int *)a1;
  *(_DWORD *)a1 = v10 + 1;
  *((void *)a1[1] + v10) = result;
  return result;
}

uint64_t *sub_1809C3A98( unsigned int *a1, unint64_t a2, icu::MeasureUnitImpl *a3, double *a4, UChar **a5, uint64_t a6, UErrorCode *a7)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  int v14 = a1[4];
  uint64_t v15 = *a1;
  if ((_DWORD)v15 != v14)
  {
LABEL_16:
    uint64_t v18 = icu::UMemory::operator new((uint64_t *)v15, (icu::UMemory *)0x1A8, a2);
    if (v18)
    {
      double v20 = *a4;
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v24, a5);
      sub_1809C3C2C((uint64_t)v18, a2, a3, (icu::UnicodeString *)v24, a6, a7, v20);
      int v21 = (void *)(int)*a1;
      *a1 = (_DWORD)v21 + 1;
      *(void *)(*((void *)a1 + 1) + 8LL * (void)v21) = v18;
      icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v24);
    }

    else
    {
      uint64_t v22 = (int)*a1;
      *a1 = v22 + 1;
      *(void *)(*((void *)a1 + 1) + 8 * v22) = 0LL;
    }

    return v18;
  }

  if (v14 == 8) {
    int v16 = 32;
  }
  else {
    int v16 = 2 * v14;
  }
  if (v16 < 1) {
    return 0LL;
  }
  uint64_t v17 = (uint64_t *)uprv_malloc(8LL * v16);
  uint64_t v18 = v17;
  if (v17)
  {
    if (v14 >= 1)
    {
      int v19 = a1[4];
      if (v19 >= v14) {
        int v19 = v14;
      }
      if (v19 >= v16) {
        int v19 = v16;
      }
      memcpy(v17, *((const void **)a1 + 1), 8LL * v19);
    }

    if (*((_BYTE *)a1 + 20)) {
      uprv_free(*((void **)a1 + 1));
    }
    *((void *)a1 + 1) = v18;
    a1[4] = v16;
    uint64_t v15 = 1LL;
    *((_BYTE *)a1 + 20) = 1;
    goto LABEL_16;
  }

  return v18;
}

uint64_t sub_1809C3C2C( uint64_t a1, uint64_t a2, icu::MeasureUnitImpl *a3, icu::UnicodeString *a4, uint64_t a5, UErrorCode *a6, double a7)
{
  *(double *)(a1 + 192) = a7;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 200), a4);
  icu::MeasureUnitImpl::copy(a3, a6, a1 + 264);
  return a1;
}

icu::RuleBasedNumberFormat *unum_open( unsigned int a1, unint64_t a2, uint64_t a3, char *a4, UParseError *a5, UErrorCode *a6)
{
  uint64_t v54 = *MEMORY[0x1895F89C0];
  switch(a1)
  {
    case 0u:
      uint64_t v48 = 0LL;
      __int128 v46 = 0u;
      __int128 v47 = 0u;
      __int128 v44 = 0u;
      __int128 v45 = 0u;
      __int128 v51 = 0u;
      __int128 v52 = 0u;
      __int128 v49 = 0u;
      __int128 v50 = 0u;
      icu::UnicodeString::UnicodeString((uint64_t)&v49, a2, a3);
      if (a5) {
        uint64_t v17 = a5;
      }
      else {
        uint64_t v17 = (UParseError *)&v44;
      }
      uint64_t v18 = icu::UMemory::operator new((uint64_t *)&v44, (icu::UMemory *)0xB48, v16);
      if (!v18)
      {
        uint64_t v24 = 7LL;
        *a6 = U_MEMORY_ALLOCATION_ERROR;
        goto LABEL_39;
      }

      double v20 = (icu::DecimalFormatSymbols *)v18;
      icu::Locale::Locale(v19, (icu::Locale *)v53, a4, 0LL, 0LL, 0LL);
      icu::DecimalFormatSymbols::DecimalFormatSymbols(v20, (const icu::Locale *)v53, a6);
      icu::Locale::~Locale(v21, (icu::Locale *)v53);
      int v23 = (uint64_t *)*(unsigned int *)a6;
      if ((int)v23 >= 1)
      {
        (*(void (**)(icu::DecimalFormatSymbols *))(*(void *)v20 + 8LL))(v20);
LABEL_39:
        icu::UnicodeString::~UnicodeString((void *)v24, (icu::UnicodeString *)&v49);
        return 0LL;
      }

      __int128 v43 = (icu::DecimalFormat *)icu::UMemory::operator new(v23, (icu::UMemory *)0x170, v22);
      int v6 = v43;
      if (v43) {
        icu::DecimalFormat::DecimalFormat(v43, (const icu::UnicodeString *)&v49, v20, v17, a6);
      }
      else {
        (*(void (**)(icu::DecimalFormatSymbols *))(*(void *)v20 + 8LL))(v20);
      }
LABEL_32:
      icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)&v49);
      if (v6)
      {
LABEL_33:
        (*(void (**)(icu::RuleBasedNumberFormat *))(*(void *)v6 + 8LL))(v6);
        return 0LL;
      }

uint64_t unum_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t unum_clone(void *lpsrc, int *a2)
{
  if (*a2 > 0) {
    return 0LL;
  }
  if (!lpsrc
  {
  }

  uint64_t result = (*(uint64_t (**)(void *))(*(void *)v5 + 32LL))(v5);
  if (!result) {
    *a2 = 7;
  }
  return result;
}

uint64_t unum_format(void *a1, int a2, char *a3, unsigned int a4, uint64_t a5, int *a6)
{
  return unum_formatInt64(a1, a2, a3, a4, a5, a6);
}

uint64_t unum_formatInt64(void *lpsrc, uint64_t a2, char *a3, unsigned int a4, uint64_t a5, int *a6)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  if (*a6 <= 0)
  {
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    uint64_t v24 = 0LL;
    __int128 v23 = 0u;
    double v20 = off_18971B688;
    LOWORD(v21) = 2;
    if (a3 || a4) {
      icu::UnicodeString::setTo((icu::UnicodeString *)&v20, a3, 0, a4);
    }
    uint64_t v18 = off_189723AC8;
    __int128 v19 = 0xFFFFFFFFuLL;
    if (a5) {
      LODWORD(v19) = *(_DWORD *)a5;
    }
    if (lpsrc
    {
      (*(void (**)(void *, uint64_t, void (***)(icu::UnicodeString *__hidden), void (***)(icu::FieldPosition *__hidden)))(*(void *)v13 + 112LL))( v13,  a2,  &v20,  &v18);
      if (!a5) {
        goto LABEL_14;
      }
    }

    else
    {
      (*(void (**)(void *, uint64_t, void (***)(icu::UnicodeString *__hidden), void (***)(icu::FieldPosition *__hidden), int *))(*(void *)lpsrc + 120LL))( lpsrc,  a2,  &v20,  &v18,  a6);
      if (!a5)
      {
LABEL_14:
        uint64_t v17 = (UChar *)a3;
        uint64_t v6 = icu::UnicodeString::extract((uint64_t)&v20, &v17, a4, a6);
        unint64_t v16 = v17;
        icu::FieldPosition::~FieldPosition(&v16, (icu::FieldPosition *)&v18);
        icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v20);
        return v6;
      }
    }

    *(void *)(a5 + 4) = *(void *)((char *)&v19 + 4);
    goto LABEL_14;
  }

  return 0xFFFFFFFFLL;
}

uint64_t unum_formatDouble(void *lpsrc, char *a2, unsigned int a3, uint64_t a4, int *a5, double a6)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  if (*a5 <= 0)
  {
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    uint64_t v24 = 0LL;
    __int128 v23 = 0u;
    double v20 = off_18971B688;
    LOWORD(v21) = 2;
    if (a2 || a3) {
      icu::UnicodeString::setTo((icu::UnicodeString *)&v20, a2, 0, a3);
    }
    uint64_t v18 = off_189723AC8;
    __int128 v19 = 0xFFFFFFFFuLL;
    if (a4) {
      LODWORD(v19) = *(_DWORD *)a4;
    }
    if (lpsrc
    {
      (*(void (**)(void *, void (***)(icu::UnicodeString *__hidden), void (***)(icu::FieldPosition *__hidden), double))(*(void *)v13 + 64LL))( v13,  &v20,  &v18,  a6);
      if (!a4) {
        goto LABEL_14;
      }
    }

    else
    {
      (*(void (**)(void *, void (***)(icu::UnicodeString *__hidden), void (***)(icu::FieldPosition *__hidden), int *, double))(*(void *)lpsrc + 72LL))( lpsrc,  &v20,  &v18,  a5,  a6);
      if (!a4)
      {
LABEL_14:
        uint64_t v17 = (UChar *)a2;
        uint64_t v6 = icu::UnicodeString::extract((uint64_t)&v20, &v17, a3, a5);
        unint64_t v16 = v17;
        icu::FieldPosition::~FieldPosition(&v16, (icu::FieldPosition *)&v18);
        icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v20);
        return v6;
      }
    }

    *(void *)(a4 + 4) = *(void *)((char *)&v19 + 4);
    goto LABEL_14;
  }

  return 0xFFFFFFFFLL;
}

uint64_t unum_formatDoubleForFields(uint64_t a1, char *a2, unsigned int a3, uint64_t a4, int *a5, double a6)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (*a5 <= 0)
  {
    if (a2)
    {
      if ((a3 & 0x80000000) == 0)
      {
        __int128 v17 = 0u;
        __int128 v18 = 0u;
        uint64_t v20 = 0LL;
        __int128 v19 = 0u;
        unint64_t v16 = off_18971B688;
        LOWORD(v17) = 2;
        icu::UnicodeString::setTo((icu::UnicodeString *)&v16, a2, 0, a3);
LABEL_10:
        (*(void (**)(uint64_t, void (***)(icu::UnicodeString *__hidden), uint64_t, int *, double))(*(void *)a1 + 80LL))( a1,  &v16,  a4,  a5,  a6);
        int v15 = (UChar *)a2;
        uint64_t v12 = icu::UnicodeString::extract((uint64_t)&v16, &v15, a3, a5);
        int v14 = v15;
        icu::UnicodeString::~UnicodeString(&v14, (icu::UnicodeString *)&v16);
        return v12;
      }
    }

    else if (!a3)
    {
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      uint64_t v20 = 0LL;
      __int128 v19 = 0u;
      unint64_t v16 = off_18971B688;
      LOWORD(v17) = 2;
      goto LABEL_10;
    }

    *a5 = 1;
  }

  return 0xFFFFFFFFLL;
}

uint64_t unum_formatDecimal( uint64_t a1, char *__s, int a3, char *a4, unsigned int a5, uint64_t a6, UErrorCode *a7)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  if (a4) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = a5 == 0;
  }
  int v11 = !v10;
  if ((a5 & 0x80000000) != 0 || v11)
  {
    *a7 = U_ILLEGAL_ARGUMENT_ERROR;
    return 0xFFFFFFFFLL;
  }

  uint64_t v20 = off_189723AC8;
  __int128 v21 = 0xFFFFFFFFuLL;
  if (a6) {
    LODWORD(v21) = *(_DWORD *)a6;
  }
  if (a3 < 0) {
    a3 = strlen(__s);
  }
  memset(v27, 0, sizeof(v27));
  icu::Formattable::Formattable((uint64_t)v27, __s, a3, a7);
  __int128 v23 = 0u;
  uint64_t v26 = 0LL;
  __int128 v25 = 0u;
  __int128 v24 = 0u;
  __int128 v22 = off_18971B688;
  LOWORD(v23) = 2;
  if (a5) {
    icu::UnicodeString::setTo((icu::UnicodeString *)&v22, a4, 0, a5);
  }
  (*(void (**)(uint64_t, _OWORD *, void (***)(icu::UnicodeString *__hidden), void (***)(icu::FieldPosition *__hidden), UErrorCode *))(*(void *)a1 + 40LL))( a1,  v27,  &v22,  &v20,  a7);
  if (a6) {
    *(void *)(a6 + 4) = *(void *)((char *)&v21 + 4);
  }
  __int128 v19 = (UChar *)a4;
  uint64_t v15 = icu::UnicodeString::extract((uint64_t)&v22, &v19, a5, (int *)a7);
  __int128 v18 = v19;
  icu::UnicodeString::~UnicodeString(&v18, (icu::UnicodeString *)&v22);
  icu::Formattable::~Formattable((icu::Formattable *)v27);
  icu::FieldPosition::~FieldPosition(v16, (icu::FieldPosition *)&v20);
  return v15;
}

uint64_t unum_formatDoubleCurrency( uint64_t a1, unint64_t a2, char *a3, unsigned int a4, unsigned int *a5, int *a6, double a7)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  if (*a6 > 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v31 = 0LL;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v28 = 0u;
  uint64_t v27 = off_18971B688;
  LOWORD(v28) = 2;
  if (a3 || a4) {
    icu::UnicodeString::setTo((icu::UnicodeString *)&v27, a3, 0, a4);
  }
  uint64_t v15 = (uint64_t *)off_189723AC8;
  __int128 v24 = off_189723AC8;
  __int128 v25 = 0xFFFFFFFFuLL;
  if (a5)
  {
    uint64_t v15 = (uint64_t *)*a5;
    LODWORD(v25) = *a5;
  }

  unint64_t v16 = icu::UMemory::operator new(v15, (icu::UMemory *)0x80, a2);
  if (v16)
  {
    __int128 v17 = (icu::UObject *)v16;
    unint64_t v23 = a2;
    icu::CurrencyAmount::CurrencyAmount(v16, &v23, a6, a7);
    v21[1] = v23;
    memset(v26, 0, sizeof(v26));
    icu::Formattable::Formattable((icu::Formattable *)v26, v17);
    (*(void (**)(uint64_t, _OWORD *, void (***)(icu::UnicodeString *__hidden), void (***)(icu::FieldPosition *__hidden), int *))(*(void *)a1 + 40LL))( a1,  v26,  &v27,  &v24,  a6);
    if (a5) {
      *(void *)(a5 + 1) = *(void *)((char *)&v25 + 4);
    }
    __int128 v22 = (UChar *)a3;
    uint64_t v7 = icu::UnicodeString::extract((uint64_t)&v27, &v22, a4, a6);
    v21[0] = v22;
    icu::Formattable::~Formattable(v21, (icu::Formattable *)v26);
  }

  else
  {
    uint64_t v18 = 7LL;
    *a6 = 7;
    uint64_t v7 = 0xFFFFFFFFLL;
  }

  icu::FieldPosition::~FieldPosition((void *)v18, (icu::FieldPosition *)&v24);
  icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v27);
  return v7;
}

uint64_t unum_parse(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, int *a5)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  memset(v13, 0, sizeof(v13));
  icu::Formattable::Formattable((icu::Formattable *)v13);
  sub_1809C4A78((uint64_t)v13, a1, a2, a3, a4, a5);
  uint64_t Long = icu::Formattable::getLong((icu::Formattable *)v13, (UErrorCode *)a5);
  icu::Formattable::~Formattable(v11, (icu::Formattable *)v13);
  return Long;
}

void sub_1809C4A78(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _DWORD *a5, int *a6)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (*a6 <= 0)
  {
    memset(v14, 0, sizeof(v14));
    uint64_t v13 = a3;
    icu::UnicodeString::UnicodeString(v14, a4 == -1, &v13);
    int v11 = off_18970F400;
    unint64_t v12 = 0xFFFFFFFF00000000LL;
    if (a5) {
      LODWORD(v12) = *a5;
    }
    (*(void (**)(uint64_t, _OWORD *, uint64_t, void (***)(icu::ParsePosition *__hidden)))(*(void *)a2 + 160LL))( a2,  v14,  a1,  &v11);
    int v10 = HIDWORD(v12);
    if (HIDWORD(v12) == -1)
    {
      if (!a5)
      {
LABEL_10:
        icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v11);
        icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v14);
        return;
      }

      int v10 = v12;
    }

    else
    {
      *a6 = 9;
      if (!a5) {
        goto LABEL_10;
      }
    }

    *a5 = v10;
    goto LABEL_10;
  }

uint64_t unum_parseInt64(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, int *a5)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  memset(v13, 0, sizeof(v13));
  icu::Formattable::Formattable((icu::Formattable *)v13);
  sub_1809C4A78((uint64_t)v13, a1, a2, a3, a4, a5);
  uint64_t Int64 = icu::Formattable::getInt64((icu::Formattable *)v13, (UErrorCode *)a5);
  icu::Formattable::~Formattable(v11, (icu::Formattable *)v13);
  return Int64;
}

double unum_parseDouble(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, int *a5)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  memset(v13, 0, sizeof(v13));
  icu::Formattable::Formattable((icu::Formattable *)v13);
  sub_1809C4A78((uint64_t)v13, a1, a2, a3, a4, a5);
  double Double = icu::Formattable::getDouble((icu::Formattable *)v13, (UErrorCode *)a5);
  icu::Formattable::~Formattable(v11, (icu::Formattable *)v13);
  return Double;
}

uint64_t unum_parseDecimal(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, char *a5, uint64_t a6, int *a7)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (*a7 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (a5) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = (_DWORD)a6 == 0;
  }
  int v11 = !v10;
  if ((a6 & 0x80000000) != 0 || v11)
  {
    *a7 = 1;
    return 0xFFFFFFFFLL;
  }

  memset(v21, 0, sizeof(v21));
  icu::Formattable::Formattable((icu::Formattable *)v21);
  sub_1809C4A78((uint64_t)v21, a1, a2, a3, a4, a7);
  DecimalNumber = (const char *)icu::Formattable::getDecimalNumber((icu::Formattable *)v21, (UErrorCode *)a7);
  uint64_t v18 = *a7;
  if ((int)v18 <= 0)
  {
    uint64_t v19 = v17;
    if ((int)v17 <= (int)a6)
    {
      if ((_DWORD)v17 == (_DWORD)a6)
      {
        strncpy(a5, DecimalNumber, (int)v17);
        uint64_t v18 = 4294967172LL;
        *a7 = -124;
        uint64_t v19 = a6;
      }

      else
      {
        strcpy(a5, DecimalNumber);
      }
    }

    else
    {
      uint64_t v18 = 15LL;
      *a7 = 15;
    }
  }

  else
  {
    uint64_t v19 = 0xFFFFFFFFLL;
  }

  icu::Formattable::~Formattable((void *)v18, (icu::Formattable *)v21);
  return v19;
}

double unum_parseDoubleCurrency(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, UChar *a5, UErrorCode *a6)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  *a5 = 0;
  double Double = 0.0;
  if (*(int *)a6 <= 0)
  {
    memset(v20, 0, sizeof(v20));
    uint64_t v19 = a2;
    icu::UnicodeString::UnicodeString(v20, a3 == -1, &v19);
    uint64_t v17 = off_18970F400;
    unint64_t v18 = 0xFFFFFFFF00000000LL;
    if (a4) {
      LODWORD(v18) = *a4;
    }
    *a6 = U_PARSE_ERROR;
    int v11 = (icu::CurrencyAmount *)(*(uint64_t (**)(uint64_t, _OWORD *, void (***)(icu::ParsePosition *__hidden)))(*(void *)a1 + 176LL))( a1,  v20,  &v17);
    unint64_t v12 = v11;
    if (HIDWORD(v18) == -1)
    {
      int v13 = v18;
      if (a4) {
        *a4 = v18;
      }
      if (v13 >= 1)
      {
        *a6 = U_ZERO_ERROR;
        uint64_t Currency = icu::CurrencyAmount::getCurrency(v11);
        u_strcpy(a5, (const UChar *)(Currency + 20));
        double Double = icu::Formattable::getDouble((icu::CurrencyAmount *)((char *)v12 + 8), a6);
      }
    }

    else if (a4)
    {
      *a4 = HIDWORD(v18);
    }

    if (v12) {
      (*(void (**)(icu::CurrencyAmount *))(*(void *)v12 + 8LL))(v12);
    }
    icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v17);
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v20);
  }

  return Double;
}

BOOL unum_hasAttribute(void *a1, int a2)
{
  if (a1) {
  return (a2 - 3) < 0x11 && ((0x1013Fu >> (a2 - 3)) & 1) != 0 || a1 != 0LL;
  }
}

uint64_t unum_getAttribute(icu::NumberFormat *a1, uint64_t a2)
{
  switch((int)a2)
  {
    case 3:
      uint64_t result = icu::NumberFormat::getMaximumIntegerDigits(a1);
      break;
    case 4:
    case 5:
      uint64_t result = icu::NumberFormat::getMinimumIntegerDigits(a1);
      break;
    case 6:
      uint64_t result = icu::NumberFormat::getMaximumFractionDigits(a1);
      break;
    case 7:
    case 8:
      uint64_t result = icu::NumberFormat::getMinimumFractionDigits(a1);
      break;
    case 11:
      uint64_t result = (*(uint64_t (**)(icu::NumberFormat *))(*(void *)a1 + 272LL))(a1);
      break;
    case 19:
      uint64_t result = (*(uint64_t (**)(icu::NumberFormat *))(*(void *)a1 + 200LL))(a1);
      break;
    default:
      if (a1
      {
        int v5 = 0;
        uint64_t result = (*(uint64_t (**)(void *, uint64_t, int *))(*(void *)v4 + 312LL))(v4, a2, &v5);
      }

      else
      {
        uint64_t result = 0xFFFFFFFFLL;
      }

      break;
  }

  return result;
}

void *unum_setAttribute(void *lpsrc, uint64_t a2, uint64_t a3)
{
  int v5 = lpsrc;
  switch((int)a2)
  {
    case 3:
      goto LABEL_4;
    case 4:
      uint64_t v6 = *(uint64_t (**)(void *, uint64_t))(*(void *)lpsrc + 224LL);
      goto LABEL_13;
    case 5:
      (*(void (**)(void *, uint64_t))(*(void *)lpsrc + 224LL))(lpsrc, a3);
LABEL_4:
      uint64_t v6 = *(uint64_t (**)(void *, uint64_t))(*(void *)v5 + 216LL);
      goto LABEL_13;
    case 6:
      goto LABEL_7;
    case 7:
      uint64_t v6 = *(uint64_t (**)(void *, uint64_t))(*(void *)lpsrc + 240LL);
      goto LABEL_13;
    case 8:
      (*(void (**)(void *, uint64_t))(*(void *)lpsrc + 240LL))(lpsrc, a3);
LABEL_7:
      uint64_t v6 = *(uint64_t (**)(void *, uint64_t))(*(void *)v5 + 232LL);
      goto LABEL_13;
    case 11:
      uint64_t v6 = *(uint64_t (**)(void *, uint64_t))(*(void *)lpsrc + 280LL);
LABEL_13:
      lpsrc = (void *)v6(v5, a3);
      break;
    case 19:
      lpsrc = (void *)(*(uint64_t (**)(void *, BOOL))(*(void *)lpsrc + 192LL))(lpsrc, (_DWORD)a3 != 0);
      break;
    default:
      if (lpsrc)
      {
        if (lpsrc)
        {
          int v7 = 0;
          lpsrc = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, int *))(*(void *)lpsrc + 304LL))( lpsrc,  a2,  a3,  &v7);
        }
      }

      break;
  }

  return lpsrc;
}

double unum_getDoubleAttribute(const void *a1, int a2)
{
  if (!a1) {
    return -1.0;
  }
  if (a2 != 12 || !v3) {
    return -1.0;
  }
  (*(void (**)(void *))(*(void *)v3 + 408LL))(v3);
  return result;
}

void *unum_setDoubleAttribute(void *result, int a2, double a3)
{
  if (result)
  {
    if (a2 == 12)
    {
      if (result) {
        return (void *)(*(uint64_t (**)(void *, double))(*(void *)result + 416LL))(result, a3);
      }
    }
  }

  return result;
}

uint64_t unum_getTextAttribute(void *lpsrc, int a2, char *a3, unsigned int a4, int *a5)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  if (*a5 <= 0)
  {
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    uint64_t v32 = 0LL;
    __int128 v31 = 0u;
    __int128 v28 = off_18971B688;
    LOWORD(v29) = 2;
    if (a3 || a4)
    {
      icu::UnicodeString::setTo((icu::UnicodeString *)&v28, a3, 0, a4);
      if (!lpsrc) {
        goto LABEL_15;
      }
    }

    else if (!lpsrc)
    {
      goto LABEL_15;
    }

    if (v11)
    {
      switch(a2)
      {
        case 0:
          icu::DecimalFormat::getPositivePrefix(v11, (icu::UnicodeString *)&v28);
          goto LABEL_22;
        case 1:
          icu::DecimalFormat::getPositiveSuffix(v11, (icu::UnicodeString *)&v28);
          goto LABEL_22;
        case 2:
          icu::DecimalFormat::getNegativePrefix(v11, (icu::UnicodeString *)&v28);
          goto LABEL_22;
        case 3:
          icu::DecimalFormat::getNegativeSuffix(v11, (icu::UnicodeString *)&v28);
          goto LABEL_22;
        case 4:
          (*(void (**)(uint64_t *__return_ptr))(*(void *)v11 + 440LL))(&v25);
          goto LABEL_21;
        case 5:
          uint64_t Currency = icu::NumberFormat::getCurrency(v11);
          icu::UnicodeString::UnicodeString((uint64_t)&v25, Currency);
          goto LABEL_21;
        default:
          goto LABEL_15;
      }
    }

    if (!v12) {
      goto LABEL_15;
    }
    int v13 = v12;
    if (a2 == 7)
    {
      int v18 = (*(uint64_t (**)(void *))(*(void *)v12 + 312LL))(v12);
      if (v18 >= 1)
      {
        int v19 = v18;
        uint64_t v20 = 0LL;
        do
        {
          (*(void (**)(uint64_t *__return_ptr, void *, uint64_t))(*(void *)v13 + 320LL))(&v25, v13, v20);
          if ((v26 & 0x8000u) == 0) {
            uint64_t v21 = v26 >> 5;
          }
          else {
            uint64_t v21 = v27;
          }
          icu::UnicodeString::doAppend((uint64_t)&v28, (const icu::UnicodeString *)&v25, 0, v21);
          icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v25);
          LOWORD(v25) = 59;
          icu::UnicodeString::doAppend((uint64_t)&v28, (uint64_t)&v25, 0, 1LL);
          uint64_t v20 = (v20 + 1);
        }

        while (v19 != (_DWORD)v20);
      }

      goto LABEL_22;
    }

    if (a2 == 6)
    {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v12 + 392LL))(&v25);
LABEL_21:
      icu::UnicodeString::operator=((icu::UnicodeString *)&v28, (icu::UnicodeString *)&v25);
      icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v25);
LABEL_22:
      __int128 v24 = (UChar *)a3;
      uint64_t v5 = icu::UnicodeString::extract((uint64_t)&v28, &v24, a4, a5);
      unint64_t v23 = v24;
      uint64_t v14 = (uint64_t)&v23;
      goto LABEL_23;
    }

void *unum_setTextAttribute(void *result, int a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (*a5 <= 0)
  {
    int v7 = result;
    memset(v13, 0, sizeof(v13));
    icu::UnicodeString::UnicodeString((uint64_t)v13, a3, a4);
    if (v7)
    {
      if (v8)
      {
        int v9 = v8;
        switch(a2)
        {
          case 0:
            (*(void (**)(void *, _OWORD *))(*(void *)v8 + 368LL))(v8, v13);
            break;
          case 1:
            (*(void (**)(void *, _OWORD *))(*(void *)v8 + 384LL))(v8, v13);
            break;
          case 2:
            (*(void (**)(void *, _OWORD *))(*(void *)v8 + 376LL))(v8, v13);
            break;
          case 3:
            (*(void (**)(void *, _OWORD *))(*(void *)v8 + 392LL))(v8, v13);
            break;
          case 4:
            (*(void (**)(void *, _OWORD *))(*(void *)v8 + 448LL))(v8, v13);
            break;
          case 5:
            uint64_t TerminatedBuffer = icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)v13);
            (*(void (**)(void *, uint64_t, int *))(*(void *)v9 + 248LL))(v9, TerminatedBuffer, a5);
            break;
          default:
            goto LABEL_11;
        }

        return icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)v13);
      }
    }

    else
    {
      int v11 = 0LL;
    }

    if (a2 == 6)
    {
      (*(void (**)(void *, _OWORD *, int *))(*(void *)v11 + 384LL))(v11, v13, a5);
    }

    else
    {
LABEL_11:
      uint64_t v10 = 16LL;
      *a5 = 16;
    }

    return icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)v13);
  }

  return result;
}

uint64_t unum_toPattern(void *lpsrc, int a2, char *a3, unsigned int a4, int *a5)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  if (*a5 > 0) {
    return 0xFFFFFFFFLL;
  }
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  uint64_t v24 = 0LL;
  __int128 v23 = 0u;
  uint64_t v20 = off_18971B688;
  LOWORD(v21) = 2;
  if (a3 || a4) {
    icu::UnicodeString::setTo((icu::UnicodeString *)&v20, a3, 0, a4);
  }
  if (lpsrc)
  {
    if (v11)
    {
      uint64_t v12 = *v11;
      if (a2) {
        int v13 = *(void (**)(void))(v12 + 560);
      }
      else {
        int v13 = *(void (**)(void))(v12 + 552);
      }
      v13();
    }

    else
    {
      if (v14)
      {
        (*(void (**)(void *__return_ptr))(*(void *)v14 + 304LL))(v19);
        icu::UnicodeString::operator=((icu::UnicodeString *)&v20, (icu::UnicodeString *)v19);
        icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v19);
      }
    }
  }

  int v18 = (UChar *)a3;
  uint64_t v5 = icu::UnicodeString::extract((uint64_t)&v20, &v18, a4, a5);
  uint64_t v17 = v18;
  icu::UnicodeString::~UnicodeString(&v17, (icu::UnicodeString *)&v20);
  return v5;
}

void *unum_getSymbol(const void *a1, unsigned int a2, UChar *a3, int a4, int *a5)
{
  if (!a5) {
    return 0LL;
  }
  if (*a5 > 0) {
    return 0LL;
  }
  if (a1 && a2 < 0x1D)
  {
    if (result)
    {
      uint64_t v10 = (*(uint64_t (**)(void *))(*(void *)result + 320LL))(result);
      uint64_t v12 = a3;
      return (void *)icu::UnicodeString::extract(v10 + ((unint64_t)a2 << 6) + 8, &v12, a4, a5);
    }

    int v11 = 16;
  }

  else
  {
    double result = 0LL;
    int v11 = 1;
  }

  *a5 = v11;
  return result;
}

void unum_setSymbol(const void *a1, unsigned int a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (a5 && *a5 <= 0)
  {
    if (a1 && a2 <= 0x1C && a3 && (int)a4 > -2)
    {
      if (v9)
      {
        uint64_t v10 = v9;
        bzero(v15, 0xB48uLL);
        int v11 = (const icu::DecimalFormatSymbols *)(*(uint64_t (**)(void *))(*(void *)v10 + 320LL))(v10);
        icu::DecimalFormatSymbols::DecimalFormatSymbols((icu::DecimalFormatSymbols *)v15, v11);
        icu::UnicodeString::UnicodeString((uint64_t)v14, a3, a4);
        sub_1808C5F9C((icu::UnicodeString *)v15, a2, v14, 1);
        icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v14);
        (*(void (**)(void *, _BYTE *))(*(void *)v10 + 336LL))(v10, v15);
        icu::DecimalFormatSymbols::~DecimalFormatSymbols((icu::DecimalFormatSymbols *)v15);
        return;
      }

      int v13 = 16;
    }

    else
    {
      int v13 = 1;
    }

    *a5 = v13;
  }

void *unum_applyPattern(const void *a1, int a2, UChar *s, uint64_t a4, uint64_t a5, int *a6)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  int v15 = 0;
  if (a6) {
    int v9 = a6;
  }
  else {
    int v9 = &v15;
  }
  if ((_DWORD)a4 == -1) {
    a4 = u_strlen(s);
  }
  memset(v16, 0, sizeof(v16));
  icu::UnicodeString::UnicodeString(v16, s, a4, a4);
  if (a1
  {
    uint64_t v11 = *v10;
    if (a2) {
      uint64_t v12 = *(void (**)(void))(v11 + 584);
    }
    else {
      uint64_t v12 = *(void (**)(void))(v11 + 568);
    }
    v12();
  }

  else
  {
    uint64_t v13 = 16LL;
    *int v9 = 16;
  }

  return icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v16);
}

uint64_t unum_getLocaleByType(uint64_t a1, int a2, int *a3)
{
  if (a1) {
    return icu::Format::getLocaleID(a1, a2, a3);
  }
  if (*a3 <= 0) {
    *a3 = 1;
  }
  return 0LL;
}

uint64_t unum_setContext(uint64_t result, uint64_t a2, int *a3)
{
  if (*a3 <= 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 256LL))(result);
  }
  return result;
}

uint64_t unum_getContext(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 <= 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 264LL))(a1);
  }
  else {
    return 0LL;
  }
}

uint64_t *unum_parseToUFormattable(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, _DWORD *a5, int *a6)
{
  uint64_t v6 = a2;
  if (*a6 <= 0)
  {
    if (a1 && (a3 || !a4))
    {
      if (a2)
      {
        uint64_t v13 = 0LL;
      }

      else
      {
        uint64_t v6 = ufmt_open(a6, 0LL);
        uint64_t v13 = (uint64_t)v6;
      }

      sub_1809C4A78((uint64_t)v6, a1, a3, a4, a5, a6);
      if (*a6 >= 1 && v13)
      {
        ufmt_close(v13);
        return 0LL;
      }
    }

    else
    {
      *a6 = 1;
    }
  }

  return v6;
}

uint64_t unum_formatUFormattable(uint64_t a1, uint64_t a2, UChar *a3, uint64_t a4, uint64_t a5, int *a6)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (*a6 > 0) {
    return 0LL;
  }
  if (!a1 || !a2) {
    goto LABEL_10;
  }
  int v11 = a4;
  if (!a3)
  {
    if (!(_DWORD)a4) {
      goto LABEL_7;
    }
LABEL_10:
    uint64_t v6 = 0LL;
    *a6 = 1;
    return v6;
  }

  if ((a4 & 0x80000000) != 0) {
    goto LABEL_10;
  }
LABEL_7:
  memset(v19, 0, sizeof(v19));
  icu::UnicodeString::UnicodeString(v19, a3, 0LL, a4);
  uint64_t v17 = off_189723AC8;
  __int128 v18 = 0xFFFFFFFFuLL;
  if (a5)
  {
    LODWORD(v18) = *(_DWORD *)a5;
    (*(void (**)(uint64_t, uint64_t, _OWORD *, void (***)(icu::FieldPosition *__hidden), int *))(*(void *)a1 + 40LL))( a1,  a2,  v19,  &v17,  a6);
    *(void *)(a5 + 4) = *(void *)((char *)&v18 + 4);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, _OWORD *, void (***)(icu::FieldPosition *__hidden), int *))(*(void *)a1 + 40LL))( a1,  a2,  v19,  &v17,  a6);
  }

  uint64_t v16 = a3;
  uint64_t v6 = icu::UnicodeString::extract((uint64_t)v19, &v16, v11, a6);
  int v15 = v16;
  icu::FieldPosition::~FieldPosition(&v15, (icu::FieldPosition *)&v17);
  icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v19);
  return v6;
}

icu::NumberingSystem *unumsys_open(char *a1, UErrorCode *a2)
{
  int v8 = (uint64_t *)*MEMORY[0x1895F89C0];
  icu::Locale::Locale(v8, (icu::Locale *)v7, a1, 0LL, 0LL, 0LL);
  uint64_t Instance = icu::NumberingSystem::createInstance((icu::NumberingSystem *)v7, a2, v3);
  icu::Locale::~Locale(v5, (icu::Locale *)v7);
  return Instance;
}

icu::NumberingSystem *unumsys_openByName(icu::NumberingSystem *a1, char *a2, UErrorCode *a3)
{
  else {
    return 0LL;
  }
}

uint64_t unumsys_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

_OWORD *unumsys_openAvailableNames(icu::NumberingSystem *a1, UErrorCode *a2)
{
  AvailableNames = icu::NumberingSystem::getAvailableNames(a1, a2);
  return uenum_openFromStringEnumeration((uint64_t)AvailableNames, (int *)a1);
}

uint64_t unumsys_getDescription(uint64_t a1, UChar *a2, int a3, int *a4)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  if (*a4 > 0) {
    return 0xFFFFFFFFLL;
  }
  memset(v11, 0, sizeof(v11));
  (*(void (**)(_OWORD *__return_ptr))(*(void *)a1 + 24LL))(v11);
  uint64_t v10 = a2;
  uint64_t v4 = icu::UnicodeString::extract((uint64_t)v11, &v10, a3, a4);
  int v9 = v10;
  icu::UnicodeString::~UnicodeString(&v9, (icu::UnicodeString *)v11);
  return v4;
}

uint64_t uplrule_select(icu::PluralRules *a1, int a2, UChar *a3, int a4, int *a5)
{
  return uplrules_select(a1, a3, a4, a5, (double)a2);
}

uint64_t *uplrules_open(char *a1, icu::UnifiedCache *a2)
{
  return uplrules_openForType(a1, 0LL, a2);
}

uint64_t *uplrules_openForType(char *a1, unint64_t a2, icu::UnifiedCache *a3)
{
  int v9 = (uint64_t *)*MEMORY[0x1895F89C0];
  icu::Locale::Locale(v9, (icu::Locale *)v8, a1, 0LL, 0LL, 0LL);
  uint64_t v5 = icu::PluralRules::forLocale((icu::Locale *)v8, a2, a3);
  icu::Locale::~Locale(v6, (icu::Locale *)v8);
  return v5;
}

uint64_t uplrules_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t uplrules_select(icu::PluralRules *a1, UChar *a2, int a3, int *a4, double a5)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  if (*a4 <= 0)
  {
    if (a2)
    {
      if ((a3 & 0x80000000) == 0)
      {
LABEL_5:
        memset(v12, 0, sizeof(v12));
        icu::PluralRules::select(a1, a5, (icu::UnicodeString *)v12);
        int v11 = a2;
        uint64_t v5 = icu::UnicodeString::extract((uint64_t)v12, &v11, a3, a4);
        uint64_t v10 = v11;
        icu::UnicodeString::~UnicodeString(&v10, (icu::UnicodeString *)v12);
        return v5;
      }
    }

    else if (!a3)
    {
      goto LABEL_5;
    }

    uint64_t v5 = 0LL;
    *a4 = 1;
    return v5;
  }

  return 0LL;
}

uint64_t uplrules_selectFormatted(icu::PluralRules *a1, uint64_t a2, UChar *a3, int a4, int *a5)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (*a5 > 0) {
    return 0LL;
  }
  if (a3)
  {
    if ((a4 & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_9:
    uint64_t v5 = 0LL;
    *a5 = 1;
    return v5;
  }

  if (a4) {
    goto LABEL_9;
  }
LABEL_6:
  int v11 = (const icu::IFixedDecimal *)sub_18091C850(a2, a5);
  if (*a5 <= 0)
  {
    memset(v14, 0, sizeof(v14));
    icu::PluralRules::select(a1, v11, (icu::UnicodeString *)v14);
    uint64_t v13 = a3;
    uint64_t v5 = icu::UnicodeString::extract((uint64_t)v14, &v13, a4, a5);
    uint64_t v12 = v13;
    icu::UnicodeString::~UnicodeString(&v12, (icu::UnicodeString *)v14);
    return v5;
  }

  return 0LL;
}

uint64_t uplrules_selectForRange(icu::PluralRules *a1, uint64_t a2, UChar *a3, int a4, int *a5)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (*a5 <= 0)
  {
    if (a3)
    {
      if ((a4 & 0x80000000) == 0)
      {
LABEL_5:
        uint64_t v10 = sub_18094933C(a2, a5);
        memset(v14, 0, sizeof(v14));
        icu::PluralRules::select(a1, v10, (const icu::UnicodeString *)a5, (uint64_t)v14);
        uint64_t v13 = a3;
        uint64_t v5 = icu::UnicodeString::extract((uint64_t)v14, &v13, a4, a5);
        uint64_t v12 = v13;
        icu::UnicodeString::~UnicodeString(&v12, (icu::UnicodeString *)v14);
        return v5;
      }
    }

    else if (!a4)
    {
      goto LABEL_5;
    }

    uint64_t v5 = 0LL;
    *a5 = 1;
    return v5;
  }

  return 0LL;
}

uint64_t uplrules_selectWithFormat( icu::PluralRules *a1, const void *a2, UChar *a3, int a4, UErrorCode *a5, double a6)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if (*(int *)a5 <= 0)
  {
    if (a1 && a2)
    {
      if (a3)
      {
        if ((a4 & 0x80000000) == 0) {
          goto LABEL_7;
        }
      }

      else if (!a4)
      {
LABEL_7:
        memset(v22, 0, sizeof(v22));
        icu::Formattable::Formattable((icu::Formattable *)v22, a6);
        memset(v21, 0, sizeof(v21));
        if (*(int *)a5 <= 0)
        {
          if (v14)
          {
            uint64_t v15 = v14;
            uint64_t v20 = 0LL;
            memset(v19, 0, sizeof(v19));
            icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v19);
            icu::DecimalFormat::formatToDecimalQuantity( v15,  (const icu::Formattable *)v22,  (icu::number::impl::DecimalQuantity *)v19,  a5);
            if (*(int *)a5 <= 0)
            {
              icu::PluralRules::select(a1, (const icu::IFixedDecimal *)v19, (icu::UnicodeString *)v21);
              icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v19);
              goto LABEL_9;
            }

            icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v19);
          }

          else
          {
            double Double = icu::Formattable::getDouble((icu::Formattable *)v22, a5);
            if (*(int *)a5 <= 0)
            {
              icu::PluralRules::select(a1, Double, (icu::UnicodeString *)v21);
              goto LABEL_9;
            }
          }
        }

        *(void *)&v21[0] = off_18971B688;
        WORD4(v21[0]) = 2;
LABEL_9:
        __int128 v18 = a3;
        uint64_t v6 = icu::UnicodeString::extract((uint64_t)v21, &v18, a4, (int *)a5);
        uint64_t v17 = v18;
        icu::UnicodeString::~UnicodeString(&v17, (icu::UnicodeString *)v21);
        icu::Formattable::~Formattable(v12, (icu::Formattable *)v22);
        return v6;
      }
    }

    uint64_t v6 = 0LL;
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return v6;
  }

  return 0LL;
}

_OWORD *uplrules_getKeywords(icu::PluralRules *a1, UErrorCode *a2)
{
  if (!a1)
  {
    UErrorCode v5 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_8:
    *a2 = v5;
    return 0LL;
  }

  uint64_t Keywords = icu::PluralRules::getKeywords(a1, a2);
  if (*(int *)a2 <= 0)
  {
    if (Keywords) {
      return uenum_openFromStringEnumeration(Keywords, (int *)a2);
    }
    UErrorCode v5 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_8;
  }

  return 0LL;
}

double uplrules_getSampleForKeyword(icu::PluralRules *a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  double result = 0.0;
  if (*(int *)a3 <= 0)
  {
    if (a1)
    {
      double v9 = 0.0;
      double v10 = 0.0;
      icu::UnicodeString::UnicodeString((uint64_t)v8, a2);
      int Samples = icu::PluralRules::getSamples(a1, (const icu::UnicodeString *)v8, &v9, 2, a3);
      icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v8);
      if (Samples < 1)
      {
        return 0.0;
      }

      else
      {
        double result = v9;
        if (Samples != 1 && v9 == 0.0) {
          return v10;
        }
      }
    }

    else
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }

  return result;
}

uint64_t sub_1809C6730(uint64_t a1)
{
  uint64_t v2 = *(icu::RegexMatcher **)(a1 + 40);
  if (v2)
  {
    icu::RegexMatcher::~RegexMatcher(v2);
    icu::UMemory::operator delete(v3);
  }

  *(void *)(a1 + 40) = 0LL;
  uint64_t v4 = *(unsigned int **)(a1 + 16);
  if (v4)
  {
    do
    {
      unsigned int v5 = __ldaxr(v4);
      unsigned int v6 = v5 - 1;
    }

    while (__stlxr(v6, v4));
    if (!v6)
    {
      int v7 = *(icu::RegexPattern **)(a1 + 8);
      if (v7)
      {
        icu::RegexPattern::~RegexPattern(v7);
        icu::UMemory::operator delete(v8);
      }

      uprv_free(*(void **)(a1 + 24));
      uprv_free(*(void **)(a1 + 16));
    }
  }

  if (*(_BYTE *)(a1 + 60))
  {
    double v9 = *(void **)(a1 + 48);
    if (v9) {
      uprv_free(v9);
    }
  }

  *(_DWORD *)a1 = 0;
  return a1;
}

URegularExpression *__cdecl uregex_open( const UChar *pattern, int32_t patternLength, uint32_t flags, UParseError *pe, UErrorCode *status)
{
  unsigned int v5 = (uint64_t *)*(unsigned int *)status;
  if (!patternLength || !pattern || patternLength <= -2)
  {
    uint64_t v6 = 0LL;
    *status = U_ILLEGAL_ARGUMENT_ERROR;
    return (URegularExpression *)v6;
  }

  uint64_t v12 = *(UText **)&flags;
  int32_t v13 = patternLength;
  if (patternLength == -1) {
    int32_t v13 = u_strlen(pattern);
  }
  uint64_t v14 = icu::UMemory::operator new(v5, (icu::UMemory *)0x40, *(unint64_t *)&patternLength);
  uint64_t v6 = (uint64_t)v14;
  if (v14)
  {
    *(_DWORD *)uint64_t v14 = 1919252592;
    _OWORD v14[2] = 0LL;
    v14[3] = 0LL;
    v14[1] = 0LL;
    *((_DWORD *)v14 + 8) = 0;
    v14[5] = 0LL;
    v14[6] = 0LL;
    *(uint64_t *)((char *)v14 + 53) = 0LL;
  }

  uint64_t v15 = uprv_malloc(4uLL);
  uint64_t v16 = (UChar *)uprv_malloc(2LL * (v13 + 1));
  uint64_t v17 = v16;
  if (!v6 || !v15 || !v16)
  {
    *status = U_MEMORY_ALLOCATION_ERROR;
    if (v6)
    {
      __int128 v21 = (void *)sub_1809C6730(v6);
      icu::UMemory::operator delete(v21);
    }

    uprv_free(v15);
    uprv_free(v17);
    return 0LL;
  }

  *(void *)(v6 + 16) = v15;
  *(void *)(v6 + 24) = v16;
  atomic_store(1u, (unsigned int *)v15);
  *(_DWORD *)(v6 + 32) = patternLength;
  u_memcpy(v16, pattern, v13);
  v17[v13] = 0;
  memset(&v23, 0, sizeof(v23));
  v23.magic = 878368812;
  v23.sizeOfStruct = 144;
  utext_openUChars(&v23, v17, patternLength, status);
  if (pe) {
    uint64_t v20 = icu::RegexPattern::compile(&v23, v12, pe, status, v19);
  }
  else {
    uint64_t v20 = icu::RegexPattern::compile(&v23, v12, status, v18, v19);
  }
  *(void *)(v6 + 8) = v20;
  utext_close(&v23);
  if (*(int *)status > 0
    || (*(void *)(v6 + 40) = icu::RegexPattern::matcher(*(icu::RegexPattern **)(v6 + 8), status), *(int *)status >= 1))
  {
    __int128 v22 = (void *)sub_1809C6730(v6);
    icu::UMemory::operator delete(v22);
    return 0LL;
  }

  return (URegularExpression *)v6;
}

URegularExpression *__cdecl uregex_openUText(UText *pattern, uint32_t flags, UParseError *pe, UErrorCode *status)
{
  if (!pattern || (int v8 = *(UText **)&flags, (v9 = utext_nativeLength(pattern)) == 0))
  {
    uint64_t v4 = 0LL;
    *status = U_ILLEGAL_ARGUMENT_ERROR;
    return (URegularExpression *)v4;
  }

  int64_t v12 = v9;
  int32_t v13 = icu::UMemory::operator new(v11, (icu::UMemory *)0x40, v10);
  uint64_t v4 = (uint64_t)v13;
  if (v13)
  {
    *(_DWORD *)int32_t v13 = 1919252592;
    void v13[2] = 0LL;
    v13[3] = 0LL;
    v13[1] = 0LL;
    *((_DWORD *)v13 + 8) = 0;
    _OWORD v13[5] = 0LL;
    v13[6] = 0LL;
    *(uint64_t *)((char *)v13 + 53) = 0LL;
  }

  statusa[0] = U_ZERO_ERROR;
  int32_t v14 = utext_extract(pattern, 0LL, v12, 0LL, 0, statusa);
  uint64_t v15 = uprv_malloc(4uLL);
  uint64_t v16 = (UChar *)uprv_malloc(2LL * (v14 + 1));
  uint64_t v17 = v16;
  if (!v4 || !v15 || !v16)
  {
    *status = U_MEMORY_ALLOCATION_ERROR;
    if (v4)
    {
      __int128 v22 = (void *)sub_1809C6730(v4);
      icu::UMemory::operator delete(v22);
    }

    uprv_free(v15);
    uprv_free(v17);
    return 0LL;
  }

  *(void *)(v4 + 16) = v15;
  *(void *)(v4 + 24) = v16;
  atomic_store(1u, (unsigned int *)v15);
  *(_DWORD *)(v4 + 32) = v14;
  utext_extract(pattern, 0LL, v12, v16, v14 + 1, status);
  memset(&v24, 0, sizeof(v24));
  v24.magic = 878368812;
  v24.sizeOfStruct = 144;
  utext_openUChars(&v24, v17, v14, status);
  if (pe) {
    uint64_t v20 = icu::RegexPattern::compile(&v24, v8, pe, status, v19);
  }
  else {
    uint64_t v20 = icu::RegexPattern::compile(&v24, v8, status, v18, v19);
  }
  *(void *)(v4 + 8) = v20;
  utext_close(&v24);
  if (*(int *)status > 0
    || (*(void *)(v4 + 40) = icu::RegexPattern::matcher(*(icu::RegexPattern **)(v4 + 8), status), *(int *)status >= 1))
  {
    UText v23 = (void *)sub_1809C6730(v4);
    icu::UMemory::operator delete(v23);
    return 0LL;
  }

  return (URegularExpression *)v4;
}

void uregex_close(URegularExpression *regexp)
{
  if (regexp)
  {
    if (*(_DWORD *)regexp == 1919252592)
    {
      UChar v1 = (void *)sub_1809C6730((uint64_t)regexp);
      icu::UMemory::operator delete(v1);
    }
  }

URegularExpression *__cdecl uregex_clone(const URegularExpression *regexp, UErrorCode *status)
{
  if (!regexp || (unsigned int v5 = (uint64_t *)*(unsigned int *)regexp, (_DWORD)v5 != 1919252592))
  {
    uint64_t v2 = 0LL;
    UErrorCode v8 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_9:
    *status = v8;
    return (URegularExpression *)v2;
  }

  uint64_t v6 = icu::UMemory::operator new(v5, (icu::UMemory *)0x40, (unint64_t)status);
  uint64_t v2 = (uint64_t)v6;
  if (!v6)
  {
    UErrorCode v8 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_9;
  }

  *(_DWORD *)uint64_t v6 = 1919252592;
  v6[2] = 0LL;
  v6[3] = 0LL;
  v6[1] = 0LL;
  *((_DWORD *)v6 + 8) = 0;
  v6[5] = 0LL;
  v6[6] = 0LL;
  *(uint64_t *)((char *)v6 + 53) = 0LL;
  v6[5] = (uint64_t)icu::RegexPattern::matcher(*((icu::RegexPattern **)regexp + 1), status);
  if (*(int *)status >= 1)
  {
    int v7 = (void *)sub_1809C6730(v2);
    icu::UMemory::operator delete(v7);
    return 0LL;
  }

  *(_OWORD *)(v2 + 8) = *(_OWORD *)((char *)regexp + 8);
  unint64_t v10 = (unsigned int *)*((void *)regexp + 2);
  *(void *)(v2 + 24) = *((void *)regexp + 3);
  *(_DWORD *)(v2 + 32) = *((_DWORD *)regexp + 8);
  do
    unsigned int v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  return (URegularExpression *)v2;
}

const UChar *__cdecl uregex_pattern(const URegularExpression *regexp, int32_t *patLength, UErrorCode *status)
{
  if (regexp && *(_DWORD *)regexp == 1919252592)
  {
    if (patLength) {
      *patLength = *((_DWORD *)regexp + 8);
    }
    return (const UChar *)*((void *)regexp + 3);
  }

  else
  {
    double result = 0LL;
    *status = U_ILLEGAL_ARGUMENT_ERROR;
  }

  return result;
}

UText *__cdecl uregex_patternUText(const URegularExpression *regexp, UErrorCode *status)
{
  return (UText *)icu::RegexPattern::patternText(*((icu::RegexPattern **)regexp + 1), status);
}

int32_t uregex_flags(const URegularExpression *regexp, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      return icu::RegexPattern::flags(*((icu::RegexPattern **)regexp + 1));
    }
    *status = U_ILLEGAL_ARGUMENT_ERROR;
  }

  return 0;
}

void uregex_setText(URegularExpression *regexp, const UChar *text, int32_t textLength, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592 && text && textLength > -2)
    {
      if (*((_BYTE *)regexp + 60))
      {
        UErrorCode v8 = (void *)*((void *)regexp + 6);
        if (v8) {
          uprv_free(v8);
        }
      }

      *((void *)regexp + 6) = text;
      *((_DWORD *)regexp + 14) = textLength;
      *((_BYTE *)regexp + 60) = 0;
      memset(&v9, 0, sizeof(v9));
      v9.magic = 878368812;
      v9.sizeOfStruct = 144;
      utext_openUChars(&v9, text, textLength, status);
      icu::RegexMatcher::reset(*((icu::RegexMatcher **)regexp + 5), &v9);
      utext_close(&v9);
    }

    else
    {
      *status = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }

void uregex_setUText(URegularExpression *regexp, UText *text, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592 && text)
    {
      if (*((_BYTE *)regexp + 60))
      {
        unsigned int v5 = (void *)*((void *)regexp + 6);
        if (v5) {
          uprv_free(v5);
        }
      }

      *((void *)regexp + 6) = 0LL;
      *((_DWORD *)regexp + 14) = -1;
      *((_BYTE *)regexp + 60) = 1;
      icu::RegexMatcher::reset(*((icu::RegexMatcher **)regexp + 5), text);
    }

    else
    {
      *status = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }

const UChar *__cdecl uregex_getText(URegularExpression *regexp, int32_t *textLength, UErrorCode *status)
{
  if (regexp && *(_DWORD *)regexp == 1919252592)
  {
    chunkContents = (UChar *)*((void *)regexp + 6);
    if (!chunkContents)
    {
      int v7 = (UText *)icu::RegexMatcher::inputText(*((icu::RegexMatcher **)regexp + 5));
      int64_t v8 = utext_nativeLength(v7);
      int64_t v9 = v8;
      if (!v7->chunkNativeStart && v8 == v7->chunkNativeLimit && v8 == v7->nativeIndexingLimit)
      {
        chunkContents = (UChar *)v7->chunkContents;
        *((void *)regexp + 6) = chunkContents;
        *((_DWORD *)regexp + 14) = v8;
        *((_BYTE *)regexp + 60) = 0;
      }

      else
      {
        UErrorCode statusa = U_ZERO_ERROR;
        int32_t v10 = utext_extract(v7, 0LL, v8, 0LL, 0, &statusa);
        *((_DWORD *)regexp + 14) = v10;
        chunkContents = (UChar *)uprv_malloc(2LL * (v10 + 1));
        utext_extract(v7, 0LL, v9, chunkContents, *((_DWORD *)regexp + 14) + 1, status);
        *((void *)regexp + 6) = chunkContents;
        *((_BYTE *)regexp + 60) = 1;
      }
    }

    if (textLength) {
      *textLength = *((_DWORD *)regexp + 14);
    }
  }

  else
  {
    chunkContents = 0LL;
    *status = U_ILLEGAL_ARGUMENT_ERROR;
  }

  return chunkContents;
}

UText *__cdecl uregex_getUText(URegularExpression *regexp, UText *dest, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      return icu::RegexMatcher::getInput(*((icu::RegexMatcher **)regexp + 5), dest, status);
    }
    *status = U_ILLEGAL_ARGUMENT_ERROR;
  }

  return dest;
}

void uregex_refreshUText(URegularExpression *regexp, UText *text, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      icu::RegexMatcher::refreshInputText(*((const UText ***)regexp + 5), text, status);
    }
    else {
      *status = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }

UBool uregex_matches(URegularExpression *regexp, int32_t startIndex, UErrorCode *status)
{
  return uregex_matches64(regexp, startIndex, status);
}

UBool uregex_matches64(URegularExpression *regexp, int64_t startIndex, UErrorCode *status)
{
  if (!regexp || *(_DWORD *)regexp != 1919252592)
  {
    UErrorCode v5 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_9:
    *status = v5;
    return 0;
  }

  if (!*((void *)regexp + 6) && !*((_BYTE *)regexp + 60))
  {
    UErrorCode v5 = U_REGEX_INVALID_STATE;
    goto LABEL_9;
  }

  int v3 = (icu::RegexMatcher *)*((void *)regexp + 5);
  if (startIndex == -1) {
    return icu::RegexMatcher::matches(v3, status);
  }
  else {
    return icu::RegexMatcher::matches(v3, startIndex, status);
  }
}

UBool uregex_lookingAt(URegularExpression *regexp, int32_t startIndex, UErrorCode *status)
{
  return uregex_lookingAt64(regexp, startIndex, status);
}

UBool uregex_lookingAt64(URegularExpression *regexp, int64_t startIndex, UErrorCode *status)
{
  if (!regexp || *(_DWORD *)regexp != 1919252592)
  {
    UErrorCode v5 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_9:
    *status = v5;
    return 0;
  }

  if (!*((void *)regexp + 6) && !*((_BYTE *)regexp + 60))
  {
    UErrorCode v5 = U_REGEX_INVALID_STATE;
    goto LABEL_9;
  }

  int v3 = (icu::RegexMatcher *)*((void *)regexp + 5);
  if (startIndex == -1) {
    return icu::RegexMatcher::lookingAt(v3, status);
  }
  else {
    return icu::RegexMatcher::lookingAt(v3, startIndex, status);
  }
}

UBool uregex_find(URegularExpression *regexp, int32_t startIndex, UErrorCode *status)
{
  return uregex_find64(regexp, startIndex, status);
}

UBool uregex_find64(URegularExpression *regexp, int64_t startIndex, UErrorCode *status)
{
  if (!regexp || *(_DWORD *)regexp != 1919252592)
  {
    UErrorCode v7 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_9:
    *status = v7;
    return 0;
  }

  if (!*((void *)regexp + 6) && !*((_BYTE *)regexp + 60))
  {
    UErrorCode v7 = U_REGEX_INVALID_STATE;
    goto LABEL_9;
  }

  UErrorCode v5 = (icu::RegexMatcher *)*((void *)regexp + 5);
  if (startIndex != -1) {
    return icu::RegexMatcher::find(v5, startIndex, status);
  }
  icu::RegexMatcher::resetPreserveRegion(v5);
  return icu::RegexMatcher::find(*((icu::RegexMatcher **)regexp + 5), status);
}

UBool uregex_findNext(URegularExpression *regexp, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
    {
      if (*((void *)regexp + 6) || *((_BYTE *)regexp + 60)) {
        return icu::RegexMatcher::find(*((icu::RegexMatcher **)regexp + 5), status);
      }
      UErrorCode v3 = U_REGEX_INVALID_STATE;
    }

    else
    {
      UErrorCode v3 = U_ILLEGAL_ARGUMENT_ERROR;
    }

    *status = v3;
  }

  return 0;
}

int32_t uregex_groupCount(URegularExpression *regexp, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      return icu::RegexMatcher::groupCount(*((icu::RegexMatcher **)regexp + 5));
    }
    *status = U_ILLEGAL_ARGUMENT_ERROR;
  }

  return 0;
}

int32_t uregex_groupNumberFromName( URegularExpression *regexp, const UChar *groupName, int32_t nameLength, UErrorCode *status)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  if (regexp && *(_DWORD *)regexp == 1919252592)
  {
    uint64_t v6 = (icu::RegexPattern *)*((void *)regexp + 1);
    icu::UnicodeString::UnicodeString((uint64_t)v9, (uint64_t)groupName, *(uint64_t *)&nameLength);
    int32_t v4 = icu::RegexPattern::groupNumberFromName(v6, (const icu::UnicodeString *)v9, status);
    icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v9);
  }

  else
  {
    int32_t v4 = 0;
    *status = U_ILLEGAL_ARGUMENT_ERROR;
  }

  return v4;
}

int32_t uregex_groupNumberFromCName( URegularExpression *regexp, const char *groupName, int32_t nameLength, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      return icu::RegexPattern::groupNumberFromName( *((icu::RegexPattern **)regexp + 1),  groupName,  *(uint64_t *)&nameLength,  status);
    }
    *status = U_ILLEGAL_ARGUMENT_ERROR;
  }

  return 0;
}

int32_t uregex_group( URegularExpression *regexp, int32_t groupNum, UChar *dest, int32_t destCapacity, UErrorCode *status)
{
  if (!regexp || *(_DWORD *)regexp != 1919252592)
  {
    UErrorCode v12 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_12:
    int32_t v5 = 0;
    goto LABEL_13;
  }

  int v8 = destCapacity;
  uint64_t v11 = *((void *)regexp + 6);
  if (!v11 && !*((_BYTE *)regexp + 60))
  {
    UErrorCode v12 = U_REGEX_INVALID_STATE;
    goto LABEL_12;
  }

  if (destCapacity < 0 || !dest && destCapacity)
  {
    int32_t v5 = 0;
    UErrorCode v12 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_13:
    *status = v12;
    return v5;
  }

  int32_t v14 = (icu::RegexMatcher *)*((void *)regexp + 5);
  if (!destCapacity || v11)
  {
    int v19 = icu::RegexMatcher::start(v14, groupNum, status);
    int v20 = icu::RegexMatcher::end(*((icu::RegexMatcher **)regexp + 5), groupNum, status);
    if (*(int *)status <= 0)
    {
      int32_t v5 = v20 - v19;
      if (v20 - v19 >= v8)
      {
        if (v5 == v8) {
          UErrorCode v21 = U_STRING_NOT_TERMINATED_WARNING;
        }
        else {
          UErrorCode v21 = U_BUFFER_OVERFLOW_ERROR;
        }
        *status = v21;
      }

      else
      {
        dest[v5] = 0;
        int v8 = v20 - v19;
      }

      if (v8 >= 1) {
        u_memcpy(dest, (const UChar *)(*((void *)regexp + 6) + 2LL * v19), v8);
      }
      return v5;
    }

    return 0;
  }

  int64_t v15 = icu::RegexMatcher::start64(v14, groupNum, status);
  uint64_t v16 = icu::RegexMatcher::end64(*((icu::RegexMatcher **)regexp + 5), groupNum, status);
  int64_t v17 = v16;
  __int128 v18 = (UText *)icu::RegexMatcher::inputText(*((icu::RegexMatcher **)regexp + 5));
  return utext_extract(v18, v15, v17, dest, v8, status);
}

UText *__cdecl uregex_groupUText( URegularExpression *regexp, int32_t groupNum, UText *dest, int64_t *groupLength, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
    {
      if (*((void *)regexp + 6) || *((_BYTE *)regexp + 60)) {
        return icu::RegexMatcher::group(*((icu::RegexMatcher **)regexp + 5), groupNum, dest, groupLength, status);
      }
      UErrorCode v6 = U_REGEX_INVALID_STATE;
    }

    else
    {
      UErrorCode v6 = U_ILLEGAL_ARGUMENT_ERROR;
    }

    *status = v6;
  }

  UErrorCode statusa = U_ZERO_ERROR;
  if (!dest) {
    return utext_openUChars(0LL, 0LL, 0LL, &statusa);
  }
  return dest;
}

int32_t uregex_start(URegularExpression *regexp, int32_t groupNum, UErrorCode *status)
{
  return uregex_start64(regexp, groupNum, status);
}

int64_t uregex_start64(URegularExpression *regexp, int32_t groupNum, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
    {
      if (*((void *)regexp + 6) || *((_BYTE *)regexp + 60)) {
        return icu::RegexMatcher::start64(*((icu::RegexMatcher **)regexp + 5), groupNum, status);
      }
      UErrorCode v4 = U_REGEX_INVALID_STATE;
    }

    else
    {
      UErrorCode v4 = U_ILLEGAL_ARGUMENT_ERROR;
    }

    *status = v4;
  }

  return 0LL;
}

int32_t uregex_end(URegularExpression *regexp, int32_t groupNum, UErrorCode *status)
{
  return uregex_end64(regexp, groupNum, status);
}

int64_t uregex_end64(URegularExpression *regexp, int32_t groupNum, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
    {
      if (*((void *)regexp + 6) || *((_BYTE *)regexp + 60)) {
        return icu::RegexMatcher::end64(*((icu::RegexMatcher **)regexp + 5), groupNum, status);
      }
      UErrorCode v4 = U_REGEX_INVALID_STATE;
    }

    else
    {
      UErrorCode v4 = U_ILLEGAL_ARGUMENT_ERROR;
    }

    *status = v4;
  }

  return 0LL;
}

void uregex_reset(URegularExpression *regexp, int32_t index, UErrorCode *status)
{
}

void uregex_reset64(URegularExpression *regexp, int64_t index, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
    {
      if (*((void *)regexp + 6) || *((_BYTE *)regexp + 60))
      {
        icu::RegexMatcher::reset(*((void *)regexp + 5), index, status);
        return;
      }

      UErrorCode v3 = U_REGEX_INVALID_STATE;
    }

    else
    {
      UErrorCode v3 = U_ILLEGAL_ARGUMENT_ERROR;
    }

    *status = v3;
  }

void uregex_setRegion(URegularExpression *regexp, int32_t regionStart, int32_t regionLimit, UErrorCode *status)
{
}

void uregex_setRegion64( URegularExpression *regexp, int64_t regionStart, int64_t regionLimit, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
    {
      if (*((void *)regexp + 6) || *((_BYTE *)regexp + 60))
      {
        icu::RegexMatcher::region(*((icu::RegexMatcher **)regexp + 5), regionStart, regionLimit, status);
        return;
      }

      UErrorCode v4 = U_REGEX_INVALID_STATE;
    }

    else
    {
      UErrorCode v4 = U_ILLEGAL_ARGUMENT_ERROR;
    }

    *status = v4;
  }

void uregex_setRegionAndStart( URegularExpression *regexp, int64_t regionStart, int64_t regionLimit, int64_t startIndex, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
    {
      if (*((void *)regexp + 6) || *((_BYTE *)regexp + 60))
      {
        icu::RegexMatcher::region(*((void *)regexp + 5), regionStart, regionLimit, startIndex, status);
        return;
      }

      UErrorCode v5 = U_REGEX_INVALID_STATE;
    }

    else
    {
      UErrorCode v5 = U_ILLEGAL_ARGUMENT_ERROR;
    }

    *status = v5;
  }

int32_t uregex_regionStart(const URegularExpression *regexp, UErrorCode *status)
{
  return uregex_regionStart64(regexp, status);
}

int64_t uregex_regionStart64(const URegularExpression *regexp, UErrorCode *status)
{
  if (regexp && *(_DWORD *)regexp == 1919252592)
  {
    if (*((void *)regexp + 6) || *((_BYTE *)regexp + 60)) {
      return (int)icu::RegexMatcher::regionStart(*((icu::RegexMatcher **)regexp + 5));
    }
    UErrorCode v3 = U_REGEX_INVALID_STATE;
  }

  else
  {
    UErrorCode v3 = U_ILLEGAL_ARGUMENT_ERROR;
  }

  int64_t result = 0LL;
  *status = v3;
  return result;
}

int32_t uregex_regionEnd(const URegularExpression *regexp, UErrorCode *status)
{
  return uregex_regionEnd64(regexp, status);
}

int64_t uregex_regionEnd64(const URegularExpression *regexp, UErrorCode *status)
{
  if (regexp && *(_DWORD *)regexp == 1919252592)
  {
    if (*((void *)regexp + 6) || *((_BYTE *)regexp + 60)) {
      return (int)icu::RegexMatcher::regionEnd(*((icu::RegexMatcher **)regexp + 5));
    }
    UErrorCode v3 = U_REGEX_INVALID_STATE;
  }

  else
  {
    UErrorCode v3 = U_ILLEGAL_ARGUMENT_ERROR;
  }

  int64_t result = 0LL;
  *status = v3;
  return result;
}

UBool uregex_hasTransparentBounds(const URegularExpression *regexp, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      return icu::RegexMatcher::hasTransparentBounds(*((icu::RegexMatcher **)regexp + 5));
    }
    *status = U_ILLEGAL_ARGUMENT_ERROR;
  }

  return 0;
}

void uregex_useTransparentBounds(URegularExpression *regexp, UBool b, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      icu::RegexMatcher::useTransparentBounds(*((void *)regexp + 5), b);
    }
    else {
      *status = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }

UBool uregex_hasAnchoringBounds(const URegularExpression *regexp, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      return icu::RegexMatcher::hasAnchoringBounds(*((icu::RegexMatcher **)regexp + 5));
    }
    *status = U_ILLEGAL_ARGUMENT_ERROR;
  }

  return 0;
}

void uregex_useAnchoringBounds(URegularExpression *regexp, UBool b, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      icu::RegexMatcher::useAnchoringBounds(*((void *)regexp + 5), b);
    }
    else {
      *status = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }

UBool uregex_hitEnd(const URegularExpression *regexp, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
    {
      if (*((void *)regexp + 6) || *((_BYTE *)regexp + 60)) {
        return icu::RegexMatcher::hitEnd(*((icu::RegexMatcher **)regexp + 5));
      }
      UErrorCode v3 = U_REGEX_INVALID_STATE;
    }

    else
    {
      UErrorCode v3 = U_ILLEGAL_ARGUMENT_ERROR;
    }

    *status = v3;
  }

  return 0;
}

UBool uregex_requireEnd(const URegularExpression *regexp, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
    {
      if (*((void *)regexp + 6) || *((_BYTE *)regexp + 60)) {
        return icu::RegexMatcher::requireEnd(*((icu::RegexMatcher **)regexp + 5));
      }
      UErrorCode v3 = U_REGEX_INVALID_STATE;
    }

    else
    {
      UErrorCode v3 = U_ILLEGAL_ARGUMENT_ERROR;
    }

    *status = v3;
  }

  return 0;
}

void uregex_setTimeLimit(URegularExpression *regexp, int32_t limit, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      icu::RegexMatcher::setTimeLimit(*((void *)regexp + 5), limit, status);
    }
    else {
      *status = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }

int32_t uregex_getTimeLimit(const URegularExpression *regexp, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      return icu::RegexMatcher::getTimeLimit(*((icu::RegexMatcher **)regexp + 5));
    }
    *status = U_ILLEGAL_ARGUMENT_ERROR;
  }

  return 0;
}

void uregex_setStackLimit(URegularExpression *regexp, int32_t limit, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      icu::RegexMatcher::setStackLimit(*((char **)regexp + 5), limit, status);
    }
    else {
      *status = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }

int32_t uregex_getStackLimit(const URegularExpression *regexp, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      return icu::RegexMatcher::getStackLimit(*((icu::RegexMatcher **)regexp + 5));
    }
    *status = U_ILLEGAL_ARGUMENT_ERROR;
  }

  return 0;
}

void uregex_setMatchCallback( URegularExpression *regexp, URegexMatchCallback *callback, const void *context, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      icu::RegexMatcher::setMatchCallback( *((void *)regexp + 5),  (signed __int8 (*)(const void *, int))callback,  context,  status);
    }
    else {
      *status = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }

void uregex_getMatchCallback( const URegularExpression *regexp, URegexMatchCallback **callback, const void **context, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      icu::RegexMatcher::getMatchCallback( *((void *)regexp + 5),  (signed __int8 (**)(const void *, int))callback,  context,  status);
    }
    else {
      *status = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }

void uregex_setFindProgressCallback( URegularExpression *regexp, URegexFindProgressCallback *callback, const void *context, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      icu::RegexMatcher::setFindProgressCallback( *((void *)regexp + 5),  (signed __int8 (*)(const void *, uint64_t))callback,  context,  status);
    }
    else {
      *status = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }

void uregex_getFindProgressCallback( const URegularExpression *regexp, URegexFindProgressCallback **callback, const void **context, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592) {
      icu::RegexMatcher::getFindProgressCallback( *((void *)regexp + 5),  (signed __int8 (**)(const void *, uint64_t))callback,  context,  status);
    }
    else {
      *status = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }

int32_t uregex_replaceAll( URegularExpression *regexp, const UChar *replacementText, int32_t replacementLength, UChar *destBuf, int32_t destCapacity, UErrorCode *status)
{
  destBufa = destBuf;
  int32_t destCapacitya = destCapacity;
  if (!regexp || *(_DWORD *)regexp != 1919252592)
  {
    UErrorCode v14 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_22:
    int32_t result = 0;
LABEL_24:
    *status = v14;
    return result;
  }

  if (!*((void *)regexp + 6) && !*((_BYTE *)regexp + 60))
  {
    UErrorCode v14 = U_REGEX_INVALID_STATE;
    goto LABEL_22;
  }

  if (!replacementText
    || replacementLength < -1
    || (!destBuf ? (BOOL v11 = destCapacity <= 0) : (BOOL v11 = 1), v11 ? (v12 = 0) : (v12 = 1), destCapacity < 0 || v12))
  {
    int32_t result = 0;
    UErrorCode v14 = U_ILLEGAL_ARGUMENT_ERROR;
    goto LABEL_24;
  }

  uregex_reset64(regexp, 0LL, status);
  UErrorCode v15 = *status;
  for (int i = 0;
        uregex_findNext(regexp, &v15);
    ;
  }

  int32_t result = uregex_appendTail_0(regexp, &destBufa, &destCapacitya, status) + i;
  UErrorCode v14 = v15;
  if (v15 >= U_ILLEGAL_ARGUMENT_ERROR) {
    goto LABEL_24;
  }
  return result;
}

UText *__cdecl uregex_replaceAllUText(URegularExpression *regexp, UText *replacement, UText *dest, UErrorCode *status)
{
  if (regexp && *(_DWORD *)regexp == 1919252592)
  {
    if (!*((void *)regexp + 6) && !*((_BYTE *)regexp + 60))
    {
      UErrorCode v5 = U_REGEX_INVALID_STATE;
      goto LABEL_9;
    }

    if (replacement) {
      return icu::RegexMatcher::replaceAll(*((icu::RegexMatcher **)regexp + 5), replacement, dest, status);
    }
  }

  UErrorCode v5 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_9:
  *status = v5;
  return 0LL;
}

int32_t uregex_replaceFirst( URegularExpression *regexp, const UChar *replacementText, int32_t replacementLength, UChar *destBuf, int32_t destCapacity, UErrorCode *status)
{
  destBufa = destBuf;
  int32_t destCapacitya = destCapacity;
  if (!regexp || *(_DWORD *)regexp != 1919252592)
  {
    UErrorCode v14 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_20:
    int32_t result = 0;
LABEL_22:
    *status = v14;
    return result;
  }

  if (!*((void *)regexp + 6) && !*((_BYTE *)regexp + 60))
  {
    UErrorCode v14 = U_REGEX_INVALID_STATE;
    goto LABEL_20;
  }

  if (!replacementText
    || replacementLength < -1
    || (!destBuf ? (BOOL v11 = destCapacity <= 0) : (BOOL v11 = 1), v11 ? (v12 = 0) : (v12 = 1), destCapacity < 0 || v12))
  {
    int32_t result = 0;
    UErrorCode v14 = U_ILLEGAL_ARGUMENT_ERROR;
    goto LABEL_22;
  }

  uregex_reset64(regexp, 0LL, status);
  if (uregex_find64(regexp, 0LL, status)) {
    int32_t appended = uregex_appendReplacement_0(regexp, replacementText, replacementLength, &destBufa, &destCapacitya, status);
  }
  else {
    int32_t appended = 0;
  }
  return uregex_appendTail_0(regexp, &destBufa, &destCapacitya, status) + appended;
}

UText *__cdecl uregex_replaceFirstUText( URegularExpression *regexp, UText *replacement, UText *dest, UErrorCode *status)
{
  if (regexp && *(_DWORD *)regexp == 1919252592)
  {
    if (!*((void *)regexp + 6) && !*((_BYTE *)regexp + 60))
    {
      UErrorCode v5 = U_REGEX_INVALID_STATE;
      goto LABEL_9;
    }

    if (replacement) {
      return icu::RegexMatcher::replaceFirst(*((icu::RegexMatcher **)regexp + 5), replacement, dest, status);
    }
  }

  UErrorCode v5 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_9:
  *status = v5;
  return 0LL;
}

int32_t uregex_appendReplacement_0( URegularExpression *regexp, const UChar *replacementText, int32_t replacementLength, UChar **destBuf, int32_t *destCapacity, UErrorCode *status)
{
  int v9 = replacementLength;
  uint64_t v85 = *MEMORY[0x1895F89C0];
  UErrorCode v12 = *status;
  if (destCapacity) {
    BOOL v13 = v12 == U_BUFFER_OVERFLOW_ERROR;
  }
  else {
    BOOL v13 = 0;
  }
  char v14 = !v13;
  if (!v13)
  {
    if (v12 <= U_ZERO_ERROR)
    {
      if (!regexp) {
        goto LABEL_32;
      }
      goto LABEL_14;
    }

    return 0;
  }

  if (*destCapacity) {
    return 0;
  }
  *status = U_ZERO_ERROR;
  if (!regexp)
  {
LABEL_32:
    UErrorCode v26 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_33:
    int v15 = 0;
LABEL_35:
    *status = v26;
    return v15;
  }

void uregex_appendReplacementUText( URegularExpression *regexp, UText *replacementText, UText *dest, UErrorCode *status)
{
}

int32_t uregex_appendTail_0( URegularExpression *regexp, UChar **destBuf, int32_t *destCapacity, UErrorCode *status)
{
  UErrorCode v8 = *status;
  if (destCapacity) {
    BOOL v9 = v8 == U_BUFFER_OVERFLOW_ERROR;
  }
  else {
    BOOL v9 = 0;
  }
  char v10 = !v9;
  if (!v9)
  {
    if (v8 <= U_ZERO_ERROR)
    {
      if (!regexp) {
        goto LABEL_30;
      }
      goto LABEL_14;
    }

UText *__cdecl uregex_appendTailUText(URegularExpression *regexp, UText *dest, UErrorCode *status)
{
  return icu::RegexMatcher::appendTail(*((icu::RegexMatcher **)regexp + 5), dest, status);
}

int32_t uregex_split( URegularExpression *regexp, UChar *destBuf, int32_t destCapacity, int32_t *requiredCapacity, UChar *destFields[], int32_t destFieldsCapacity, UErrorCode *status)
{
  if (regexp && *(_DWORD *)regexp == 1919252592)
  {
    if (!*((void *)regexp + 6) && !*((_BYTE *)regexp + 60))
    {
      UErrorCode v10 = U_REGEX_INVALID_STATE;
      goto LABEL_18;
    }

    if (destBuf) {
      BOOL v7 = 1;
    }
    else {
      BOOL v7 = destCapacity <= 0;
    }
    char v8 = !v7;
    if ((destCapacity & 0x80000000) == 0 && (v8 & 1) == 0 && destFields && destFieldsCapacity > 0) {
      return sub_1809C89C4( (icu::RegexMatcher **)regexp,  (uint64_t)destBuf,  destCapacity,  requiredCapacity,  destFields,  destFieldsCapacity,  status);
    }
  }

  UErrorCode v10 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_18:
  *status = v10;
  return 0;
}

uint64_t sub_1809C89C4( icu::RegexMatcher **a1, uint64_t a2, int a3, _DWORD *a4, void *a5, int a6, UErrorCode *a7)
{
  UErrorCode v13 = a1[5];
  int64_t v14 = *((void *)v13 + 6);
  if (!v14) {
    return 0LL;
  }
  uint64_t v35 = a4;
  ut = (UText *)*((void *)v13 + 4);
  int v15 = icu::RegexMatcher::groupCount(v13);
  UErrorCode status = U_ZERO_ERROR;
  int v16 = a6 - 1;
  int v34 = a6;
  if (a6 < 2)
  {
    int64_t v20 = 0LL;
    int v19 = 0;
    LODWORD(v18) = 0;
LABEL_25:
    if (v14 > v20)
    {
      if (v19 != v16) {
        uint64_t v18 = (a5[v16] - *a5) >> 1;
      }
      if (a2) {
        unint64_t v31 = (UChar *)(a2 + 2LL * (int)v18);
      }
      else {
        unint64_t v31 = 0LL;
      }
      a5[v16] = v31;
      LODWORD(v18) = v18 + utext_extract(ut, v20, v14, v31, (a3 - v18) & ~((a3 - (int)v18) >> 31), a7) + 1;
      int v19 = v16;
    }
  }

  else
  {
    int v17 = v15;
    LODWORD(v18) = 0;
    int v19 = 0;
    int v37 = 2 - a6;
    int v38 = a6 - 1;
    int64_t v20 = 0LL;
    int v36 = a5 + 1;
    int64_t v39 = v14;
    __int128 v40 = a5;
    while (1)
    {
      int v21 = icu::RegexMatcher::find(a1[5]);
      if (a2) {
        int v22 = (UChar *)(a2 + 2LL * (int)v18);
      }
      else {
        int v22 = 0LL;
      }
      a5[v19] = v22;
      if (!v21)
      {
        LODWORD(v18) = v18 + utext_extract(ut, v20, v14, v22, (a3 - v18) & ~((a3 - (int)v18) >> 31), a7) + 1;
        goto LABEL_40;
      }

      int32_t v23 = utext_extract(ut, v20, *((void *)a1[5] + 17), v22, (a3 - v18) & ~((a3 - (int)v18) >> 31), &status);
      if (status == U_BUFFER_OVERFLOW_ERROR) {
        UErrorCode status = U_ZERO_ERROR;
      }
      else {
        *a7 = status;
      }
      LODWORD(v18) = v18 + v23 + 1;
      uint64_t v24 = a1[5];
      int64_t v20 = *((void *)v24 + 18);
      if (v19 != v16 && v17 >= 1)
      {
        int64_t v41 = *((void *)v24 + 18);
        uint64_t v25 = 0LL;
        do
        {
          int v26 = v25 + 1;
          unsigned int v27 = (UChar *)(a2 + 2LL * (int)v18);
          v36[v19 + v25] = v27;
          UErrorCode status = U_ZERO_ERROR;
          int32_t v28 = uregex_group((URegularExpression *)a1, v25 + 1, v27, (a3 - v18) & ~((a3 - (int)v18) >> 31), &status);
          if (status == U_BUFFER_OVERFLOW_ERROR) {
            UErrorCode status = U_ZERO_ERROR;
          }
          else {
            *a7 = status;
          }
          LODWORD(v18) = v18 + v28 + 1;
          BOOL v29 = v37 + v19 + (_DWORD)v25++ == 0;
        }

        while (!v29 && v26 < v17);
        v19 += v25;
        int64_t v14 = v39;
        a5 = v40;
        int v16 = v38;
        int64_t v20 = v41;
      }

      if (v20 == v14) {
        break;
      }
      if (++v19 >= v16) {
        goto LABEL_25;
      }
    }

    if ((int)v18 >= a3)
    {
      if (v19 < v16) {
        ++v19;
      }
    }

    else
    {
      int32_t v32 = (_WORD *)(a2 + 2LL * (int)v18);
      *int32_t v32 = 0;
      if (v19 < v16) {
        ++v19;
      }
      a5[v19] = v32;
    }

    LODWORD(v18) = v18 + 1;
  }

int32_t uregex_splitUText( URegularExpression *regexp, UText *destFields[], int32_t destFieldsCapacity, UErrorCode *status)
{
  BOOL v7 = (icu::RegexMatcher *)*((void *)regexp + 5);
  char v8 = (UText *)icu::RegexMatcher::inputText(v7);
  return icu::RegexMatcher::split((int64_t *)v7, v8, destFields, destFieldsCapacity, status);
}

URegularExpression *__cdecl uregex_openC(const char *pattern, uint32_t flags, UParseError *pe, UErrorCode *status)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (pattern)
  {
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v12, pattern);
    if ((BYTE8(v12) & 0x11) != 0)
    {
      char v8 = 0LL;
    }

    else if ((BYTE8(v12) & 2) != 0)
    {
      char v8 = (const UChar *)((unint64_t)&v12 | 0xA);
    }

    else
    {
      char v8 = (const UChar *)*((void *)&v13 + 1);
    }

    if ((SWORD4(v12) & 0x8000u) == 0) {
      int32_t v9 = WORD4(v12) >> 5;
    }
    else {
      int32_t v9 = HIDWORD(v12);
    }
    UErrorCode v4 = uregex_open(v8, v9, flags, pe, status);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v12);
  }

  else
  {
    UErrorCode v4 = 0LL;
    *UErrorCode status = U_ILLEGAL_ARGUMENT_ERROR;
  }

  return v4;
}

_OWORD *uregion_getAvailable(int a1, icu::Region *a2)
{
  Available = icu::Region::getAvailable(a1, a2);
  return uenum_openFromStringEnumeration((uint64_t)Available, (int *)a2);
}

BOOL uregion_areEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

_OWORD *uregion_getContainedRegions(unsigned int **a1, UErrorCode *a2)
{
  ContainedRegions = icu::Region::getContainedRegions(a1, a2);
  return uenum_openFromStringEnumeration((uint64_t)ContainedRegions, (int *)a2);
}

_OWORD *uregion_getContainedRegionsOfType(unsigned int **a1, int a2, icu::Region *a3)
{
  ContainedRegions = icu::Region::getContainedRegions(a1, a2, a3);
  return uenum_openFromStringEnumeration((uint64_t)ContainedRegions, (int *)a3);
}

_OWORD *uregion_getPreferredValues(unsigned int **a1, UErrorCode *a2)
{
  PreferredValues = icu::Region::getPreferredValues(a1, a2);
  return uenum_openFromStringEnumeration((uint64_t)PreferredValues, (int *)a2);
}

void *usearch_open( const UChar *a1, int32_t a2, const UChar *a3, int32_t a4, char *a5, uint64_t a6, const icu::Locale *a7)
{
  if (a5)
  {
    __int128 v14 = ucol_open(a5, a7);
    int32_t result = usearch_openFromCollator(a1, a2, a3, a4, v14, a6, (int *)a7);
    if (!result || *(int *)a7 >= 1)
    {
      if (v14) {
        ucol_close((uint64_t)v14);
      }
      return 0LL;
    }

    *((_BYTE *)result + 3168) = 1;
  }

  else
  {
    int32_t result = 0LL;
    *(_DWORD *)a7 = 1;
  }

  return result;
}

void *usearch_openFromCollator( const UChar *a1, int32_t a2, const UChar *a3, int32_t a4, icu::RuleBasedCollator *a5, uint64_t a6, int *a7)
{
  if (*a7 > 0) {
    return 0LL;
  }
  if (!a1 || !a3 || !a5) {
    goto LABEL_24;
  }
  if (ucol_getAttribute((uint64_t)a5, 7LL, a7) == 17)
  {
    BOOL v7 = 0LL;
    int v16 = 16;
LABEL_25:
    *a7 = v16;
    return v7;
  }

  if (*a7 > 0) {
    return 0LL;
  }
  if (!qword_18C449B20)
  {
    qword_18C449B20 = icu::Normalizer2Factory::getNFCImpl((icu::Normalizer2Factory *)a7, v15);
    sub_1809B36C0(0x1Au, (uint64_t)sub_1809CB73C);
    if (*a7 > 0) {
      return 0LL;
    }
  }

  if (a4 == -1) {
    a4 = u_strlen(a3);
  }
  if (a2 == -1) {
    a2 = u_strlen(a1);
  }
  if (a4 < 1 || a2 <= 0)
  {
LABEL_24:
    BOOL v7 = 0LL;
    int v16 = 1;
    goto LABEL_25;
  }

  int v17 = uprv_malloc(0xC78uLL);
  BOOL v7 = v17;
  if (!v17)
  {
    int v16 = 7;
    goto LABEL_25;
  }

  v17[391] = a5;
  int Strength = ucol_getStrength((uint64_t)a5);
  *((_DWORD *)v7 + 793) = Strength;
  if (Strength == 1) {
    int v19 = -256;
  }
  else {
    int v19 = -1;
  }
  if (!Strength) {
    int v19 = -65536;
  }
  *((_DWORD *)v7 + 794) = v19;
  *((_BYTE *)v7 + 3184) = ucol_getAttribute((uint64_t)a5, 1LL, a7) == 20;
  *((_DWORD *)v7 + 795) = ucol_getVariableTop((uint64_t)a5, a7);
  v7[392] = icu::Normalizer2::getNFDInstance((icu::Normalizer2 *)a7, v20);
  if (*a7 >= 1)
  {
LABEL_23:
    uprv_free(v7);
    return 0LL;
  }

  int v22 = uprv_malloc(0x30uLL);
  *BOOL v7 = v22;
  if (!v22)
  {
    *a7 = 7;
    goto LABEL_23;
  }

  *(void *)int v22 = a3;
  uint64_t v22[2] = a4;
  v7[1] = a1;
  *((_DWORD *)v7 + 4) = a2;
  void v7[3] = 0LL;
  v7[133] = 0LL;
  *((void *)v22 + 2) = 0LL;
  *((void *)v22 + 3) = a6;
  if (a6)
  {
    ubrk_setText(a6, a3, a4, (UErrorCode *)a7);
    int v22 = (_DWORD *)*v7;
  }

  *((_BYTE *)v7 + 3168) = 0;
  *((void *)v22 + 4) = 0xFFFFFFFFLL;
  v7[395] = 0LL;
  v7[393] = ucol_openElements(a5, (uint64_t)a3, a4, a7);
  v7[394] = 0LL;
  if (*a7 >= 1
    || (uint64_t v23 = *v7,
        *(_DWORD *)(v23 + 12) = 0,
        *(_WORD *)(v23 + 40) = 257,
        sub_1809C929C((uint64_t)v7, (UErrorCode *)a7),
        *a7 >= 1))
  {
    usearch_close((char *)v7);
    return 0LL;
  }

  return v7;
}

void usearch_close(char *a1)
{
  if (a1)
  {
    uint64_t v2 = (char *)*((void *)a1 + 3);
    if (v2 != a1 + 32 && v2 != 0LL) {
      uprv_free(v2);
    }
    UErrorCode v4 = (char *)*((void *)a1 + 133);
    if (v4) {
      BOOL v5 = v4 == a1 + 1072;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      uprv_free(v4);
    }
    UErrorCode v6 = (void *)*((void *)a1 + 394);
    if (v6)
    {
      BOOL v7 = sub_1809B6F58(v6);
      icu::UMemory::operator delete(v7);
    }

    ucol_closeElements(*((icu::CollationElementIterator **)a1 + 393));
    ucol_closeElements(*((icu::CollationElementIterator **)a1 + 395));
    if (a1[3168])
    {
      uint64_t v8 = *((void *)a1 + 391);
      if (v8) {
        ucol_close(v8);
      }
    }

    int32_t v9 = *(void **)a1;
    if (*(void *)(*(void *)a1 + 16LL))
    {
      ubrk_close(*(void *)(*(void *)a1 + 16LL));
      int32_t v9 = *(void **)a1;
    }

    uprv_free(v9);
    uprv_free(a1);
  }

uint64_t sub_1809C929C(uint64_t result, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    uint64_t v3 = result;
    if (*(_DWORD *)(result + 3172))
    {
      UErrorCode v4 = *(unsigned __int16 **)(result + 8);
      uint64_t v5 = *(int *)(result + 16);
      int v22 = v4;
      *(_BYTE *)(result + 3120) = (unsigned __int16)sub_1809CB74C(qword_18C449B20, &v22, &v4[v5]) >> 8;
      uint64_t v6 = v5 - 1;
      if ((v4[v5 - 1] & 0xFC00) == 0xDC00 && (int)v5 >= 2)
      {
        else {
          uint64_t v6 = v6;
        }
      }

      int v22 = &v4[v6];
      char v8 = sub_1809CB74C(qword_18C449B20, &v22, &v4[v5]);
    }

    else
    {
      char v8 = 0;
      *(_BYTE *)(v3 + 3120) = 0;
    }

    *(_BYTE *)(v3 + 3121) = v8;
    int32_t v9 = *(void **)(v3 + 1064);
    if (v9)
    {
      *(void *)(v3 + 1064) = 0LL;
    }

    int v10 = *(_DWORD *)(v3 + 16);
    uint64_t v11 = *(icu::CollationElementIterator **)(v3 + 3160);
    if (v11)
    {
      int32_t result = (uint64_t)ucol_setText(*(uint64_t **)(v3 + 3160), *(void *)(v3 + 8), *(_DWORD *)(v3 + 16), a2);
    }

    else
    {
      int32_t result = (uint64_t)ucol_openElements( *(icu::RuleBasedCollator **)(v3 + 3128),  *(void *)(v3 + 8),  *(_DWORD *)(v3 + 16),  (int *)a2);
      uint64_t v11 = (icu::CollationElementIterator *)result;
      *(void *)(v3 + 3160) = result;
    }

    if (*(int *)a2 <= 0)
    {
      __int128 v12 = *(void **)(v3 + 24);
      int32_t result = ucol_next(v11, a2);
      if ((_DWORD)result != -1)
      {
        uint64_t v13 = 0LL;
        int v21 = v10 + 1;
        int v14 = 256;
        __int128 v15 = (_DWORD *)(v3 + 32);
        while (1)
        {
          if (*(int *)a2 > 0)
          {
            uint64_t v18 = v15;
            LODWORD(v19) = v13;
            goto LABEL_49;
          }

          unsigned int v16 = *(_DWORD *)(v3 + 3176) & result;
          if (*(_BYTE *)(v3 + 3184))
          {
            if (*(_DWORD *)(v3 + 3180) > v16)
            {
              v16 &= 0xFFFF0000;
            }
          }

          else if (*(int *)(v3 + 3172) >= 3 && v16 == 0)
          {
            unsigned int v16 = 0xFFFF;
            goto LABEL_37;
          }

          if (!v16)
          {
LABEL_35:
            uint64_t v18 = v15;
            uint64_t v19 = v13;
            goto LABEL_45;
          }

double usearch_setOffset(uint64_t *a1, uint64_t a2, UErrorCode *a3)
{
  if (a1 && *(int *)a3 <= 0)
  {
    uint64_t v4 = *a1;
    if ((a2 & 0x80000000) != 0 || *(_DWORD *)(v4 + 8) < (int)a2)
    {
      *a3 = U_INDEX_OUTOFBOUNDS_ERROR;
    }

    else
    {
      ucol_setOffset(a1[393], a2, a3);
      uint64_t v4 = *a1;
    }

    *(void *)&double result = 0xFFFFFFFFLL;
    *(void *)(v4 + 32) = 0xFFFFFFFFLL;
    *(_BYTE *)(v4 + 41) = 0;
  }

  return result;
}

uint64_t usearch_getOffset(void *a1)
{
  uint64_t v1 = 0xFFFFFFFFLL;
  if (a1)
  {
    int Offset = ucol_getOffset(a1[393]);
    if (Offset > *(_DWORD *)(*a1 + 8LL) || Offset <= -1) {
      return 0xFFFFFFFFLL;
    }
    else {
      return Offset;
    }
  }

  return v1;
}

uint64_t usearch_setAttribute(uint64_t result, int a2, int a3, int *a4)
{
  if (result && *a4 <= 0)
  {
    if (a2 == 2)
    {
      if ((a3 - 3) <= 1)
      {
        *(_WORD *)(*(void *)result + 14LL) = a3;
        return result;
      }

      *(_WORD *)(*(void *)result + 14LL) = 0;
    }

    else if (a2 == 1)
    {
      *(_BYTE *)(*(void *)result + 13LL) = a3 == 1;
    }

    else if (a2)
    {
      *a4 = 1;
    }

    else
    {
      *(_BYTE *)(*(void *)result + 12LL) = a3 == 1;
    }
  }

  if (a3 == 5) {
    *a4 = 1;
  }
  return result;
}

uint64_t usearch_getAttribute(uint64_t a1, int a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (a2 != 2)
  {
    if (a2 == 1)
    {
      int v2 = *(unsigned __int8 *)(*(void *)a1 + 13LL);
      return v2 != 0;
    }

    if (!a2)
    {
      int v2 = *(unsigned __int8 *)(*(void *)a1 + 12LL);
      return v2 != 0;
    }

    return 0xFFFFFFFFLL;
  }

  __int16 v4 = *(_WORD *)(*(void *)a1 + 14LL);
  if (((v4 - 3) & 0xFFFE) != 0) {
    return 2;
  }
  return v4;
}

uint64_t usearch_getMatchedStart(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(*(void *)a1 + 32LL);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t usearch_getMatchedText(uint64_t *a1, void *__dst, int a3, int *a4)
{
  if (*a4 > 0) {
    return 0xFFFFFFFFLL;
  }
  if (!a1 || a3 < 0 || !__dst && a3)
  {
    *a4 = 1;
    return 0xFFFFFFFFLL;
  }

  uint64_t v9 = *a1;
  uint64_t v10 = *(int *)(*a1 + 32);
  if ((_DWORD)v10 == -1)
  {
    u_terminateUChars((uint64_t)__dst, a3, 0LL, a4);
    return 0xFFFFFFFFLL;
  }

  uint64_t v11 = *(unsigned int *)(v9 + 36);
  else {
    int v12 = *(_DWORD *)(v9 + 36);
  }
  if (v12 >= 1)
  {
    memcpy(__dst, (const void *)(*(void *)v9 + 2 * v10), 2LL * v12);
    uint64_t v11 = *(unsigned int *)(*a1 + 36);
  }

  return u_terminateUChars((uint64_t)__dst, a3, v11, a4);
}

uint64_t usearch_getMatchedLength(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(*(void *)a1 + 36LL);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t usearch_setBreakIterator(uint64_t result, uint64_t a2, UErrorCode *a3)
{
  if (result && *(int *)a3 <= 0)
  {
    uint64_t v3 = *(void *)result;
    *(void *)(*(void *)result + 24LL) = a2;
    if (a2) {
      return ubrk_setText(a2, *(const UChar **)v3, *(_DWORD *)(v3 + 8), a3);
    }
  }

  return result;
}

uint64_t usearch_getBreakIterator(uint64_t result)
{
  if (result) {
    return *(void *)(*(void *)result + 24LL);
  }
  return result;
}

uint64_t usearch_setText(uint64_t result, UChar *s, int a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    int32_t v5 = a3;
    if (a3 && (uint64_t v6 = result) != 0 && s && a3 > -2)
    {
      if (a3 == -1) {
        int32_t v5 = u_strlen(s);
      }
      uint64_t v8 = *(void *)v6;
      *(void *)uint64_t v8 = s;
      *(_DWORD *)(v8 + 8) = v5;
      ucol_setText(*(uint64_t **)(v6 + 3144), (uint64_t)s, v5, a4);
      uint64_t v9 = *(void *)v6;
      *(void *)(v9 + 32) = 0xFFFFFFFFLL;
      *(_BYTE *)(v9 + 41) = 1;
      uint64_t v10 = *(void *)(v9 + 24);
      if (v10)
      {
        ubrk_setText(v10, s, v5, a4);
        uint64_t v9 = *(void *)v6;
      }

      double result = *(void *)(v9 + 16);
      if (result) {
        return ubrk_setText(result, s, v5, a4);
      }
    }

    else
    {
      *a4 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }

  return result;
}

uint64_t *usearch_getText(uint64_t *result, _DWORD *a2)
{
  if (result)
  {
    uint64_t v2 = *result;
    *a2 = *(_DWORD *)(*result + 8);
    return *(uint64_t **)v2;
  }

  return result;
}

uint64_t usearch_setCollator(uint64_t result, icu::RuleBasedCollator *a2, int *a3)
{
  if (*a3 <= 0)
  {
    if (a2)
    {
      uint64_t v5 = result;
      if (result)
      {
        uint64_t v6 = *(void **)(result + 3152);
        if (v6)
        {
          BOOL v7 = sub_1809B6F58(v6);
          icu::UMemory::operator delete(v7);
        }

        *(void *)(v5 + 3152) = 0LL;
        ucol_closeElements(*(icu::CollationElementIterator **)(v5 + 3144));
        ucol_closeElements(*(icu::CollationElementIterator **)(v5 + 3160));
        *(void *)(v5 + 3160) = 0LL;
        *(void *)(v5 + 3144) = 0LL;
        if (*(_BYTE *)(v5 + 3168))
        {
          uint64_t v8 = *(void *)(v5 + 3128);
          if ((icu::RuleBasedCollator *)v8 != a2)
          {
            ucol_close(v8);
            *(_BYTE *)(v5 + 3168) = 0;
          }
        }

        *(void *)(v5 + 3128) = a2;
        int Strength = ucol_getStrength((uint64_t)a2);
        *(_DWORD *)(v5 + 3172) = Strength;
        if (Strength == 1) {
          int v10 = -256;
        }
        else {
          int v10 = -1;
        }
        if (!Strength) {
          int v10 = -65536;
        }
        *(_DWORD *)(v5 + 3176) = v10;
        uint64_t v11 = *(void *)(*(void *)v5 + 16LL);
        if (v11)
        {
          ubrk_close(v11);
          *(void *)(*(void *)v5 + 16LL) = 0LL;
        }

        *(_BYTE *)(v5 + 3184) = ucol_getAttribute((uint64_t)a2, 1LL, a3) == 20;
        *(_DWORD *)(v5 + 3180) = ucol_getVariableTop((uint64_t)a2, a3);
        *(void *)(v5 + 3144) = ucol_openElements(a2, **(void **)v5, *(_DWORD *)(*(void *)v5 + 8LL), a3);
        *(void *)(v5 + 3160) = ucol_openElements(a2, *(void *)(v5 + 8), *(_DWORD *)(v5 + 16), a3);
        return sub_1809C929C(v5, (UErrorCode *)a3);
      }
    }

    else
    {
      *a3 = 1;
    }
  }

  return result;
}

uint64_t usearch_getCollator(uint64_t result)
{
  if (result) {
    return *(void *)(result + 3128);
  }
  return result;
}

uint64_t usearch_setPattern(uint64_t result, UChar *s, int a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    uint64_t v5 = result;
    if (result && s)
    {
      if (a3 == -1)
      {
        double result = u_strlen(s);
        a3 = result;
        if ((_DWORD)result) {
          goto LABEL_6;
        }
      }

      else if (a3)
      {
LABEL_6:
        *(void *)(v5 + 8) = s;
        *(_DWORD *)(v5 + 16) = a3;
        return sub_1809C929C(v5, a4);
      }
    }

    *a4 = U_ILLEGAL_ARGUMENT_ERROR;
  }

  return result;
}

uint64_t usearch_getPattern(uint64_t result, _DWORD *a2)
{
  if (result)
  {
    *a2 = *(_DWORD *)(result + 16);
    return *(void *)(result + 8);
  }

  return result;
}

uint64_t usearch_first(uint64_t *a1, UErrorCode *a2)
{
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t usearch_next(uint64_t *a1, UErrorCode *a2)
{
  uint64_t result = 0xFFFFFFFFLL;
  int Offset = ucol_getOffset(a1[393]);
  uint64_t v6 = (uint64_t *)*a1;
  uint64_t v7 = *(unsigned int *)(*a1 + 8);
  else {
    uint64_t v9 = Offset;
  }
  *((_BYTE *)v6 + 41) = 0;
  if (*((_BYTE *)v6 + 40))
  {
    if ((_DWORD)v9 == (_DWORD)v7
      || !*((_BYTE *)v6 + 12) && *((_DWORD *)v6 + 8) != -1 && *((_DWORD *)v6 + 9) + (int)v9 > (int)v7)
    {
      int v16 = 0;
      v6[4] = 0xFFFFFFFFLL;
      ucol_setOffset(a1[393], v7, (UErrorCode *)&v16);
      return 0xFFFFFFFFLL;
    }
  }

  else
  {
    *((_BYTE *)v6 + 40) = 1;
    uint64_t result = *((unsigned int *)v6 + 8);
    if ((_DWORD)result != -1) {
      return result;
    }
  }

  if (!*((_DWORD *)a1 + 5))
  {
    uint64_t v12 = *((int *)v6 + 8);
    if ((_DWORD)v12 != -1)
    {
      uint64_t v13 = *v6;
      uint64_t v9 = (v12 + 1);
      *((_DWORD *)v6 + 8) = v9;
      BOOL v14 = (*(_WORD *)(v13 + 2 * v12) & 0xFC00) != 0xD800 || (_DWORD)v9 == (_DWORD)v7;
      if (v14 || (*(_WORD *)(v13 + 2LL * (int)v9) & 0xFC00) != 0xDC00)
      {
LABEL_33:
        *((_DWORD *)v6 + 9) = 0;
        ucol_setOffset(a1[393], v9, a2);
        if (*((_DWORD *)v6 + 8) == (_DWORD)v7) {
          *((_DWORD *)v6 + 8) = -1;
        }
        goto LABEL_39;
      }

      uint64_t v9 = (v12 + 2);
    }

    *((_DWORD *)v6 + 8) = v9;
    goto LABEL_33;
  }

  int v10 = *((_DWORD *)v6 + 9);
  if (v10 < 1)
  {
    *((_DWORD *)v6 + 8) = v9 - 1;
  }

  else
  {
    if (*((_BYTE *)v6 + 12)) {
      uint64_t v11 = (v9 + 1);
    }
    else {
      uint64_t v11 = (v10 + v9);
    }
    ucol_setOffset(a1[393], v11, a2);
  }

  sub_1809CA0FC(a1, a2);
LABEL_39:
  uint64_t v15 = *((unsigned int *)v6 + 8);
  if ((_DWORD)v15 == -1) {
    uint64_t v15 = *((unsigned int *)v6 + 2);
  }
  ucol_setOffset(a1[393], v15, a2);
  return *((unsigned int *)v6 + 8);
}

uint64_t usearch_following(uint64_t *a1, uint64_t a2, UErrorCode *a3)
{
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t usearch_last(unint64_t *a1, UErrorCode *a2)
{
  if (a1
    && *(int *)a2 <= 0
    && (unint64_t v4 = *a1,
        *(_BYTE *)(v4 + 40) = 0,
        usearch_setOffset((uint64_t *)a1, *(unsigned int *)(v4 + 8), a2),
        *(int *)a2 <= 0))
  {
    return usearch_previous(a1, a2);
  }

  else
  {
    return 0xFFFFFFFFLL;
  }

uint64_t usearch_previous(unint64_t *a1, UErrorCode *a2)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && *(int *)a2 <= 0)
  {
    unint64_t v5 = *a1;
    if (*(_BYTE *)(*a1 + 41))
    {
      uint64_t v6 = *(unsigned int *)(v5 + 8);
      *(_WORD *)(v5 + 40) = 0;
      ucol_setOffset(a1[393], v6, a2);
    }

    else
    {
      int Offset = ucol_getOffset(a1[393]);
      if (Offset > *(_DWORD *)(*a1 + 8) || Offset <= -1) {
        LODWORD(v6) = -1;
      }
      else {
        LODWORD(v6) = Offset;
      }
    }

    uint64_t result = *(unsigned int *)(v5 + 32);
    if (*(_BYTE *)(v5 + 40))
    {
      *(_BYTE *)(v5 + 40) = 0;
      if ((_DWORD)result != -1) {
        return result;
      }
    }

    else
    {
      if ((_DWORD)v6) {
        BOOL v9 = (_DWORD)result == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (v9)
      {
        int v18 = 0;
        unint64_t v10 = *a1;
        *(void *)(v10 + 32) = 0xFFFFFFFFLL;
        if (*(_BYTE *)(v10 + 40)) {
          uint64_t v11 = *(unsigned int *)(v10 + 8);
        }
        else {
          uint64_t v11 = 0LL;
        }
        ucol_setOffset(a1[393], v11, (UErrorCode *)&v18);
        return 0xFFFFFFFFLL;
      }
    }

    if (*(int *)a2 <= 0)
    {
      if (*((_DWORD *)a1 + 5))
      {
        sub_1809CA1C4((uint64_t)a1, a2);
      }

      else
      {
        int v12 = (_DWORD)result == -1 ? v6 : result;
        *(_DWORD *)(v5 + 32) = v12;
        if (v12)
        {
          uint64_t v13 = *(void *)v5;
          uint64_t v14 = (v12 - 1);
          *(_DWORD *)(v5 + 32) = v14;
          BOOL v15 = __OFSUB__(v12, 2);
          uint64_t v16 = (v12 - 2);
          if ((int)v16 < 0 == v15
            && (*(_WORD *)(v13 + 2LL * (int)v14) & 0xFC00) == 56320
            && (*(_WORD *)(v13 + 2LL * v16) & 0xFC00) == 0xD800)
          {
            *(_DWORD *)(v5 + 32) = v16;
            uint64_t v14 = v16;
          }

          ucol_setOffset(a1[393], v14, a2);
          *(_DWORD *)(v5 + 36) = 0;
        }

        else
        {
          sub_1809CA08C((uint64_t *)a1, (int *)a2);
        }
      }
    }

    return 0xFFFFFFFFLL;
  }

  return result;
}

uint64_t usearch_preceding(unint64_t *a1, uint64_t a2, UErrorCode *a3)
{
  else {
    return 0xFFFFFFFFLL;
  }
}

unint64_t sub_1809CA08C(uint64_t *a1, int *a2)
{
  int v7 = 0;
  uint64_t v3 = *a1;
  *(void *)(v3 + 32) = 0xFFFFFFFFLL;
  unint64_t v4 = a1[393];
  if (*(_BYTE *)(v3 + 40)) {
    uint64_t v5 = *(unsigned int *)(v3 + 8);
  }
  else {
    uint64_t v5 = 0LL;
  }
  unint64_t result = ucol_setOffset(v4, v5, (UErrorCode *)&v7);
  if (*a2 <= 0 && v7 >= 1) {
    *a2 = v7;
  }
  return result;
}

uint64_t sub_1809CA0FC(uint64_t *a1, UErrorCode *a2)
{
  if (*(int *)a2 < 1
    && (uint64_t Offset = ucol_getOffset(a1[393]),
        int v10 = -1,
        int v11 = -1,
        usearch_search((uint64_t)a1, Offset, &v11, &v10, a2)))
  {
    uint64_t v7 = *a1;
    int v8 = v10 - v11;
    *(_DWORD *)(v7 + 32) = v11;
    *(_DWORD *)(v7 + 36) = v8;
    return 1LL;
  }

  else
  {
    int v12 = 0;
    uint64_t v4 = *a1;
    *(void *)(v4 + 32) = 0xFFFFFFFFLL;
    if (*(_BYTE *)(v4 + 40)) {
      uint64_t v5 = *(unsigned int *)(v4 + 8);
    }
    else {
      uint64_t v5 = 0LL;
    }
    ucol_setOffset(a1[393], v5, (UErrorCode *)&v12);
    return 0LL;
  }

uint64_t sub_1809CA1C4(uint64_t a1, UErrorCode *a2)
{
  uint64_t v6 = *(void *)a1;
  if (*(_BYTE *)(*(void *)a1 + 12LL))
  {
    int v7 = *(_DWORD *)(v6 + 32);
    if (v7 != -1)
    {
      uint64_t Offset = (v7 + *(_DWORD *)(v6 + 36) - 1);
      goto LABEL_20;
    }

    sub_1809CA950(a1, a2);
    if (*(int *)(a1 + 1056) > 1)
    {
      int v10 = 0;
      do
      {
        if (sub_1809B7258(*(void *)(a1 + 3152), 0LL, 0LL, a2) == 0x7FFFFFFFFFFFFFFFLL) {
          break;
        }
        ++v10;
      }

      while (v10 < *(_DWORD *)(a1 + 1056) - 1);
    }
  }

  uint64_t Offset = ucol_getOffset(*(void *)(a1 + 3144));
LABEL_20:
  int v13 = -1;
  int v14 = -1;
  if (usearch_searchBackwards(a1, Offset, &v14, &v13, a2))
  {
    uint64_t v11 = *(void *)a1;
    int v12 = v13 - v14;
    *(_DWORD *)(v11 + 32) = v14;
    *(_DWORD *)(v11 + 36) = v12;
    return 1LL;
  }

double usearch_reset(uint64_t a1)
{
  if (a1)
  {
    int v13 = 0;
    int Strength = ucol_getStrength(*(void *)(a1 + 3128));
    int v3 = *(_DWORD *)(a1 + 3172);
    BOOL v4 = v3 > 2 || Strength <= 2;
    BOOL v6 = 0;
    if (v4 && (v3 < 3 || Strength > 2)) {
      BOOL v6 = 1;
    }
    int v7 = ucol_getStrength(*(void *)(a1 + 3128));
    *(_DWORD *)(a1 + 3172) = v7;
    if (v7 == 1) {
      int v8 = -256;
    }
    else {
      int v8 = -1;
    }
    if (!v7) {
      int v8 = -65536;
    }
    if (*(_DWORD *)(a1 + 3176) != v8)
    {
      BOOL v6 = 0;
      *(_DWORD *)(a1 + 3176) = v8;
    }

    int Attribute = ucol_getAttribute(*(void *)(a1 + 3128), 1LL, &v13);
    if (*(_BYTE *)(a1 + 3184) != (Attribute == 20))
    {
      BOOL v6 = 0;
      *(_BYTE *)(a1 + 3184) = Attribute == 20;
    }

    int VariableTop = ucol_getVariableTop(*(void *)(a1 + 3128), &v13);
    if (*(_DWORD *)(a1 + 3180) == VariableTop)
    {
      if (v6)
      {
LABEL_27:
        ucol_setText(*(uint64_t **)(a1 + 3144), **(void **)a1, *(_DWORD *)(*(void *)a1 + 8LL), (UErrorCode *)&v13);
        uint64_t v11 = *(uint64_t **)a1;
        *(void *)&double result = 0xFFFFFFFFLL;
        _OWORD v11[4] = 0xFFFFFFFFLL;
        *((_DWORD *)v11 + 3) = 0;
        *((_WORD *)v11 + 20) = 257;
        return result;
      }
    }

    else
    {
      *(_DWORD *)(a1 + 3180) = VariableTop;
    }

    sub_1809C929C(a1, (UErrorCode *)&v13);
    goto LABEL_27;
  }

  return result;
}

uint64_t usearch_search(uint64_t a1, uint64_t a2, int *a3, int *a4, UErrorCode *a5)
{
  if ((a2 & 0x80000000) != 0
    || !*(_DWORD *)(a1 + 20)
    || *(_DWORD *)(*(void *)a1 + 8LL) < (int)a2
    || !*(void *)(a1 + 24))
  {
    uint64_t v5 = 0LL;
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return v5;
  }

  if (!*(void *)(a1 + 1064)) {
    sub_1809CA950(a1, a5);
  }
  ucol_setOffset(*(void *)(a1 + 3144), a2, a5);
  bzero(v60, 0x628uLL);
  sub_1809CAB58((uint64_t)v60, a1, a5);
  if (*(int *)a5 > 0)
  {
    uint64_t v5 = 0LL;
    goto LABEL_101;
  }

  int v53 = a3;
  BOOL v54 = a4;
  int v12 = sub_1809CAC44((uint64_t)v60, 0);
  if (!v12)
  {
    LODWORD(v16) = -1;
    int v55 = -1;
LABEL_83:
    unsigned int v35 = 0;
    *a5 = U_INTERNAL_PROGRAM_ERROR;
LABEL_84:
    int v49 = v54;
    goto LABEL_85;
  }

  int v13 = v12;
  int v14 = 0;
  int v55 = -1;
  int v15 = 1;
  LODWORD(v16) = -1;
  while (1)
  {
    int v17 = *(_DWORD *)(a1 + 1056);
    if (v17 >= 1) {
      break;
    }
    int v59 = v15;
    int v18 = 0;
    uint64_t v20 = 0LL;
LABEL_25:
    int v24 = v17 + v18 + v14;
    uint64_t v25 = sub_1809CAC44((uint64_t)v60, v24 - 1);
    uint64_t v26 = *((unsigned int *)v13 + 2);
    int v56 = v25;
    unsigned int v57 = *((_DWORD *)v25 + 2);
    int v27 = *(unsigned __int16 *)(*(void *)a1 + 14LL);
    int32_t v28 = sub_1809CAC44((uint64_t)v60, v24);
    BOOL v29 = v28;
    if (v27)
    {
      unint64_t v30 = *v28;
      if (*v29 == 0x7FFFFFFFFFFFFFFFLL)
      {
        BOOL v31 = 1;
        uint64_t v16 = v26;
        int v15 = v59;
LABEL_36:
        uint64_t v32 = *((unsigned int *)v29 + 2);
      }

      else
      {
        int v33 = v17 + v18 + v59;
        uint64_t v16 = v26;
        int v15 = v59;
        while (!HIWORD(v30))
        {
          int v34 = sub_1809CACF8(v30, v20, *(__int16 *)(*(void *)a1 + 14LL)) & 0xFFFFFFFD;
          BOOL v31 = v34 != 0;
          if (v34)
          {
            BOOL v29 = sub_1809CAC44((uint64_t)v60, v33);
            unint64_t v30 = *v29;
            ++v33;
            if (*v29 != 0x7FFFFFFFFFFFFFFFLL) {
              continue;
            }
          }

          goto LABEL_36;
        }

        uint64_t v32 = *((unsigned int *)v29 + 2);
        BOOL v31 = v32 != *((_DWORD *)v29 + 3);
      }
    }

    else
    {
      uint64_t v32 = *((unsigned int *)v28 + 2);
      BOOL v31 = (_DWORD)v32 != *((_DWORD *)v28 + 3) || *v28 == 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v16 = v26;
      int v15 = v59;
    }

    else {
      unsigned int v35 = 0;
    }
    if ((_DWORD)v16 == *((_DWORD *)v13 + 3)) {
      unsigned int v35 = 0;
    }
    int v36 = *(void (****)(icu::RuleBasedCollator *__hidden))a1;
    if (**(void **)a1)
    {
      uint64_t v37 = v57;
      if (*((_DWORD *)v36 + 2) <= (int)v32
        || v36[3]
        || !*((_WORD *)v29 + 3)
        || (int)v32 < *((_DWORD *)v56 + 3)
        || *((_DWORD *)v29 + 3) <= (int)v32)
      {
        BOOL v40 = 0;
      }

      else
      {
        uint64_t v38 = *(void *)(a1 + 3136);
        uint64_t v39 = sub_1809CAE18((uint64_t *)v36, v32);
        if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v38 + 120LL))(v38, v39))
        {
          BOOL v40 = 1;
        }

        else
        {
          uint64_t v47 = *(void *)(a1 + 3136);
          uint64_t v48 = sub_1809CAE78(*(uint64_t **)a1, v32);
          BOOL v40 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v47 + 128LL))(v47, v48) != 0;
        }
      }
    }

    else
    {
      BOOL v40 = 0;
      uint64_t v37 = v57;
    }

    uint64_t v41 = v32;
    if ((int)v37 < (int)v32)
    {
      if ((_DWORD)v37 == *((_DWORD *)v56 + 3)
        && sub_1809CADC4((void (****)(icu::RuleBasedCollator *__hidden))a1, v37, (int *)a5))
      {
        uint64_t v41 = v37;
      }

      else
      {
        int v42 = sub_1809CAED0((void (****)(icu::RuleBasedCollator *__hidden))a1, v37, (int *)a5);
        else {
          unsigned int v44 = v32;
        }
        if (v42 >= *((_DWORD *)v56 + 3)) {
          uint64_t v41 = v44;
        }
        else {
          uint64_t v41 = v32;
        }
      }
    }

    if (!v40)
    {
      int v45 = sub_1809CADC4((void (****)(icu::RuleBasedCollator *__hidden))a1, v41, (int *)a5);
    }

    int v55 = v41;
    if (sub_1809CAF24(a1, v16) && v35)
    {
      unsigned int v35 = 1;
LABEL_87:
      int32_t v50 = v53;
      int v49 = v54;
      goto LABEL_88;
    }

void *sub_1809CA950(uint64_t a1, UErrorCode *a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 3160);
  if (v5)
  {
    double result = ucol_setText(*(uint64_t **)(a1 + 3160), *(void *)(a1 + 8), v4, a2);
  }

  else
  {
    double result = ucol_openElements(*(icu::RuleBasedCollator **)(a1 + 3128), *(void *)(a1 + 8), v4, (int *)a2);
    uint64_t v5 = (uint64_t)result;
    *(void *)(a1 + 3160) = result;
  }

  if (*(int *)a2 <= 0)
  {
    int v7 = *(void **)(a1 + 1064);
    uint64_t v21 = 0LL;
    memset(v20, 0, sizeof(v20));
    sub_1809B6E94(v20, v5);
    uint64_t v9 = sub_1809B7258((uint64_t)v20, 0LL, 0LL, a2);
    if (v9 != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v12 = v9;
      unsigned int v13 = 0;
      unsigned int v19 = v4 + 1;
      int v14 = 256;
      uint64_t v11 = (void *)(a1 + 1072);
      while (1)
      {
        int v15 = v11;
        if (*(int *)a2 > 0)
        {
          unsigned int v10 = v13;
          goto LABEL_25;
        }

        int Offset = ucol_getOffset(v5);
        unsigned int v10 = v13 + 1;
        if (v13 + 1 == v14)
        {
          int v14 = v19 + v14 - Offset;
          int v17 = uprv_malloc((8 * v14));
          if (!v17)
          {
            *a2 = U_MEMORY_ALLOCATION_ERROR;
            return sub_1809B6F58(v20);
          }

          uint64_t v11 = v17;
          memcpy(v17, v15, 8LL * v13);
          *((void *)v11 + v13) = v12;
        }

        else
        {
          UErrorCode v18 = *a2;
          *((void *)v11 + v13) = v12;
          if (v18 > U_ZERO_ERROR) {
            return sub_1809B6F58(v20);
          }
        }

        uint64_t v12 = sub_1809B7258((uint64_t)v20, 0LL, 0LL, a2);
        ++v13;
        if (v12 == 0x7FFFFFFFFFFFFFFFLL) {
          goto LABEL_25;
        }
      }
    }

    unsigned int v10 = 0;
    uint64_t v11 = (void *)(a1 + 1072);
LABEL_25:
    *((void *)v11 + v10) = 0LL;
    *(void *)(a1 + 1064) = v11;
    *(_DWORD *)(a1 + 1056) = v10;
    return sub_1809B6F58(v20);
  }

  return result;
}

uint64_t sub_1809CAB58(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(void *)(a1 + 1536) = a1;
  *(void *)(a1 + 1568) = a2;
  int v5 = *(_DWORD *)(a2 + 1056) + 32;
  *(_DWORD *)(a1 + 1544) = v5;
  if (*(_WORD *)(*(void *)a2 + 14LL))
  {
    BOOL v6 = *(unsigned __int16 **)(a2 + 8);
    if (v6)
    {
      uint64_t v7 = *(int *)(a2 + 16);
      if ((int)v7 >= 1)
      {
        int v8 = &v6[v7];
        do
        {
          int v10 = *v6++;
          int v9 = v10;
          unsigned int v11 = v10 - 4352;
          BOOL v12 = (v10 - 12593) >= 0x1E && v11 >= 0x5F;
          unsigned int v13 = v9 - 12645;
          if (v12 && v13 >= 0x22) {
            int v15 = 3;
          }
          else {
            int v15 = 8;
          }
          v5 += v15;
        }

        while (v6 < v8);
        *(_DWORD *)(a1 + 1544) = v5;
      }
    }
  }

  *(void *)(a1 + 1560) = *(void *)(a2 + 3144);
  *(void *)(a1 + 1548) = 0LL;
  if (sub_1809CB6C8(a2, a3))
  {
    uint64_t v16 = *(unsigned int *)(a1 + 1544);
    if ((int)v16 >= 97)
    {
      int v17 = uprv_malloc(16 * v16);
      *(void *)(a1 + 1536) = v17;
      if (!v17) {
        *a3 = 7;
      }
    }
  }

  return a1;
}

uint64_t *sub_1809CAC44(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 1544);
  int v4 = a2 % v3;
  int v5 = *(_DWORD *)(a1 + 1548);
  int v6 = *(_DWORD *)(a1 + 1552);
  if (v5 <= a2 && v6 > a2) {
    return (uint64_t *)(*(void *)(a1 + 1536) + 16LL * v4);
  }
  if (v6 != a2) {
    return 0LL;
  }
  *(_DWORD *)(a1 + 1552) = a2 + 1;
  if (a2 + 1 - v5 >= v3) {
    *(_DWORD *)(a1 + 1548) = v5 + 1;
  }
  int v10 = 0;
  uint64_t v8 = *(void *)(a1 + 1536) + 16LL * v4;
  uint64_t v9 = sub_1809B7258( *(void *)(*(void *)(a1 + 1568) + 3152LL),  (_DWORD *)(v8 + 8),  (_DWORD *)(v8 + 12),  (UErrorCode *)&v10);
  double result = (uint64_t *)(*(void *)(a1 + 1536) + 16LL * v4);
  *double result = v9;
  return result;
}

uint64_t sub_1809CACF8(uint64_t a1, uint64_t a2, int a3)
{
  if (a1 == a2) {
    return 0xFFFFFFFFLL;
  }
  if (!a3) {
    return 0LL;
  }
  if ((HIDWORD(a1) & 0xFFFF0000) == (HIDWORD(a2) & 0xFFFF0000))
  {
    if (WORD2(a1) == WORD2(a2))
    {
      int v4 = a1 & 0xFFFF0000;
      int v5 = a2 & 0xFFFF0000;
      int v8 = a3 == 4 && v4 == 327680 || v5 == 327680;
      unsigned int v9 = v8 << 31 >> 31;
      if (v4 == v5) {
        return 0xFFFFFFFFLL;
      }
      else {
        return v9;
      }
    }

    else if (WORD2(a1))
    {
      if (a3 != 4 || WORD2(a2))
      {
        int v14 = a3 == 4 && WORD2(a1) == 5 || WORD2(a2) == 5;
        return (v14 << 31 >> 31);
      }

      else
      {
        return 2LL;
      }
    }

    else
    {
      return 1LL;
    }
  }

  else
  {
    if ((a2 & 0xFFFF000000000000LL) == 0 && a3 == 4) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = 0;
    }
    if ((a1 & 0xFFFF000000000000LL) != 0) {
      return v11;
    }
    else {
      return 1LL;
    }
  }

uint64_t sub_1809CADC4(void (****a1)(icu::RuleBasedCollator *__hidden this), uint64_t a2, int *a3)
{
  if (*a3 <= 0 && (int v4 = sub_1809CB598(a1, a3), *a3 <= 0)) {
    return ubrk_isBoundary((uint64_t)v4);
  }
  else {
    return 1LL;
  }
}

uint64_t sub_1809CAE18(uint64_t *a1, int a2)
{
  int v2 = *((_DWORD *)a1 + 2);
  if (v2 <= a2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = *a1;
  uint64_t v4 = a2 + 1LL;
  uint64_t result = *(unsigned __int16 *)(*a1 + 2LL * a2);
  if ((result & 0xFC00) == 0xD800 && (_DWORD)v4 != v2)
  {
    int v7 = *(unsigned __int16 *)(v3 + 2 * v4);
    if ((v7 & 0xFC00) == 0xDC00) {
      return (v7 + ((_DWORD)result << 10) - 56613888);
    }
  }

  return result;
}

uint64_t sub_1809CAE78(uint64_t *a1, int a2)
{
  if (a2 < 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = *a1;
  uint64_t result = *(unsigned __int16 *)(*a1 + 2LL * (a2 - 1));
  if (a2 != 1 && (result & 0xFC00) == 0xDC00)
  {
    int v4 = *(unsigned __int16 *)(v2 + 2LL * (a2 - 2));
    if ((v4 & 0xFC00) == 0xD800) {
      return (result + (v4 << 10) - 56613888);
    }
  }

  return result;
}

uint64_t sub_1809CAED0(void (****a1)(icu::RuleBasedCollator *__hidden this), uint64_t a2, int *a3)
{
  if (*a3 <= 0 && (int v5 = sub_1809CB598(a1, a3), *a3 <= 0)) {
    return ubrk_following((uint64_t)v5);
  }
  else {
    return a2;
  }
}

uint64_t sub_1809CAF24(uint64_t a1, int a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  if (*(_DWORD *)(a1 + 3172) != 15) {
    return 1LL;
  }
  int v14 = 0;
  __int128 v22 = 0u;
  uint64_t v25 = 0LL;
  __int128 v24 = 0u;
  __int128 v23 = 0u;
  uint64_t v21 = off_18971B688;
  LOWORD(v22) = 2;
  __int128 v17 = 0u;
  uint64_t v20 = 0LL;
  __int128 v19 = 0u;
  __int128 v18 = 0u;
  uint64_t v16 = off_18971B688;
  LOWORD(v17) = 2;
  uint64_t v3 = *(void *)(a1 + 3136);
  uint64_t v13 = **(void **)a1 + 2LL * a2;
  icu::UnicodeString::UnicodeString(v15, 0LL, &v13);
  (*(void (**)(uint64_t, _BYTE *, void (***)(icu::UnicodeString *__hidden), int *))(*(void *)v3 + 24LL))( v3,  v15,  &v21,  &v14);
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v15);
  uint64_t v5 = *(void *)(a1 + 3136);
  uint64_t v12 = *(void *)(a1 + 8);
  icu::UnicodeString::UnicodeString(v15, 0LL, &v12);
  (*(void (**)(uint64_t, _BYTE *, void (***)(icu::UnicodeString *__hidden), int *))(*(void *)v5 + 24LL))( v5,  v15,  &v16,  &v14);
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v15);
  BOOL v7 = 0LL;
  unint64_t v8 = v14;
  if (v14 <= 0)
  {
    if ((v22 & 1) != 0)
    {
      unint64_t v8 = (unsigned __int16)v17;
      BOOL v7 = v17 & 1;
    }

    else
    {
      BOOL v7 = 0LL;
      if ((v22 & 0x8000u) == 0LL) {
        int v9 = (unsigned __int16)v22 >> 5;
      }
      else {
        int v9 = DWORD1(v22);
      }
      if ((v17 & 0x8000u) == 0LL) {
        unint64_t v8 = (unsigned __int16)v17 >> 5;
      }
      else {
        unint64_t v8 = DWORD1(v17);
      }
      if ((v17 & 1) == 0 && v9 == (_DWORD)v8) {
        BOOL v7 = icu::UnicodeString::doEquals((icu::UnicodeString *)&v21, (const icu::UnicodeString *)&v16, v9);
      }
    }
  }

  icu::UnicodeString::~UnicodeString((void *)v8, (icu::UnicodeString *)&v16);
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v21);
  return v7;
}

BOOL usearch_searchBackwards(uint64_t a1, uint64_t a2, int *a3, int *a4, UErrorCode *a5)
{
  if ((a2 & 0x80000000) != 0
    || !*(_DWORD *)(a1 + 20)
    || *(_DWORD *)(*(void *)a1 + 8LL) < (int)a2
    || !*(void *)(a1 + 24))
  {
    BOOL v5 = 0LL;
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return v5;
  }

  if (!*(void *)(a1 + 1064)) {
    sub_1809CA950(a1, a5);
  }
  bzero(v52, 0x628uLL);
  sub_1809CAB58((uint64_t)v52, a1, a5);
  if (*(_DWORD *)(*(void *)a1 + 8LL) <= (int)a2)
  {
    uint64_t v47 = a4;
    ucol_setOffset(*(void *)(a1 + 3144), a2, a5);
    int v13 = 0;
  }

  else
  {
    unsigned int v11 = sub_1809CB598((void (****)(icu::RuleBasedCollator *__hidden))a1, (int *)a5);
    if (*(int *)a5 > 0)
    {
LABEL_18:
      BOOL v5 = 0LL;
      goto LABEL_19;
    }

    uint64_t v47 = a4;
    uint64_t v12 = ubrk_following((uint64_t)v11);
    ucol_setOffset(*(void *)(a1 + 3144), v12, a5);
    int v13 = -1;
    do
      ++v13;
    while (*((_DWORD *)sub_1809CB614((uint64_t)v52, v13) + 2) >= (int)a2);
  }

  int v49 = sub_1809CB614((uint64_t)v52, v13);
  if (!v49)
  {
    LODWORD(v16) = -1;
    int v15 = -1;
LABEL_86:
    BOOL v24 = 0;
    *a5 = U_INTERNAL_PROGRAM_ERROR;
LABEL_88:
    unsigned int v44 = v47;
    goto LABEL_91;
  }

  int v15 = -1;
  LODWORD(v16) = -1;
  while (1)
  {
    int v50 = v15;
    int v48 = v16;
    int v17 = *(_DWORD *)(a1 + 1056);
    if (v17 >= 1) {
      break;
    }
    int v18 = 0;
LABEL_34:
    __int128 v23 = sub_1809CB614((uint64_t)v52, v13 - 1 + v18 + v17);
    uint64_t v16 = *((unsigned int *)v23 + 2);
    BOOL v24 = sub_1809CADC4((void (****)(icu::RuleBasedCollator *__hidden))a1, v16, (int *)a5) != 0;
    if (*(int *)a5 > 0)
    {
      unsigned int v44 = v47;
      goto LABEL_90;
    }

    if ((_DWORD)v16 == *((_DWORD *)v23 + 3)) {
      BOOL v24 = 0;
    }
    uint64_t v25 = *((unsigned int *)v49 + 2);
    if (v13)
    {
      uint64_t v26 = sub_1809CB614((uint64_t)v52, v13 - 1);
      int v28 = *((_DWORD *)v26 + 2);
      int v27 = *((_DWORD *)v26 + 3);
      if (v28 == v27 && *v26 != 0x7FFFFFFFFFFFFFFFLL) {
        BOOL v24 = 0;
      }
      int v51 = *((_DWORD *)v26 + 2);
      BOOL v29 = *(void (****)(icu::RuleBasedCollator *__hidden))a1;
      if (**(void **)a1 && *((_DWORD *)v29 + 2) > v28 && !v29[3] && *((_WORD *)v26 + 3))
      {
        BOOL v30 = 0;
        if (v27 > v28 && v28 >= *((_DWORD *)v49 + 3))
        {
          uint64_t v40 = *(void *)(a1 + 3136);
          uint64_t v41 = sub_1809CAE18(*(uint64_t **)a1, v28);
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v40 + 120LL))(v40, v41))
          {
            BOOL v30 = 1;
          }

          else
          {
            uint64_t v42 = *(void *)(a1 + 3136);
            uint64_t v43 = sub_1809CAE78(*(uint64_t **)a1, v28);
            BOOL v30 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v42 + 128LL))(v42, v43) != 0;
          }
        }
      }

      else
      {
        BOOL v30 = 0;
      }

      if ((int)v25 < v28)
      {
        int v31 = sub_1809CAED0((void (****)(icu::RuleBasedCollator *__hidden))a1, v25, (int *)a5);
        if (v31 < v28 || !v30) {
          int v33 = v31;
        }
        else {
          int v33 = v28;
        }
        if (v31 >= *((_DWORD *)v49 + 3)) {
          int v34 = v33;
        }
        else {
          int v34 = v28;
        }
        int v51 = v34;
      }

      if (v30)
      {
        int v15 = v51;
      }

      else
      {
        int v15 = v51;
        int v37 = sub_1809CADC4((void (****)(icu::RuleBasedCollator *__hidden))a1, v51, (int *)a5);
        if (v51 > v28 || v37 == 0) {
          BOOL v24 = 0;
        }
      }
    }

    else
    {
      int v35 = sub_1809CAED0( (void (****)(icu::RuleBasedCollator *__hidden))a1,  *((unsigned int *)v49 + 2),  (int *)a5);
      else {
        int v15 = v35;
      }
    }

    else {
      BOOL v39 = 1;
    }
    if (!v39)
    {
      BOOL v24 = 1;
      goto LABEL_88;
    }

char *sub_1809CB598(void (****a1)(icu::RuleBasedCollator *__hidden this), int *a2)
{
  if (*a2 > 0) {
    return 0LL;
  }
  int v4 = *a1;
  uint64_t result = (char *)(*a1)[3];
  if (!result)
  {
    uint64_t result = (char *)v4[2];
    if (!result)
    {
      uint64_t LocaleByType = ucol_getLocaleByType(a1[391], 1, a2);
      uint64_t result = ubrk_open(0, LocaleByType, (const UChar *)**a1, *((_DWORD *)*a1 + 2), (const icu::Locale *)a2);
      (*a1)[2] = (void (**)(icu::RuleBasedCollator *__hidden))result;
    }
  }

  return result;
}

uint64_t *sub_1809CB614(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 1544);
  int v4 = a2 % v3;
  int v5 = *(_DWORD *)(a1 + 1548);
  int v6 = *(_DWORD *)(a1 + 1552);
  if (v5 <= a2 && v6 > a2) {
    return (uint64_t *)(*(void *)(a1 + 1536) + 16LL * v4);
  }
  if (v6 != a2) {
    return 0LL;
  }
  *(_DWORD *)(a1 + 1552) = a2 + 1;
  if (a2 + 1 - v5 >= v3) {
    *(_DWORD *)(a1 + 1548) = v5 + 1;
  }
  int v10 = 0;
  uint64_t v8 = *(void *)(a1 + 1536) + 16LL * v4;
  uint64_t v9 = sub_1809B7408( *(void *)(*(void *)(a1 + 1568) + 3152LL),  (_DWORD *)(v8 + 8),  (_DWORD *)(v8 + 12),  (UErrorCode *)&v10);
  uint64_t result = (uint64_t *)(*(void *)(a1 + 1536) + 16LL * v4);
  *uint64_t result = v9;
  return result;
}

uint64_t sub_1809CB6C8(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = (uint64_t *)*a2;
  uint64_t v5 = *(void *)(a1 + 3152);
  if (v5)
  {
    sub_1809B6E88(v5, *(void *)(a1 + 3144));
    return 1LL;
  }

  uint64_t result = (uint64_t)icu::UMemory::operator new(v2, (icu::UMemory *)0x128, (unint64_t)a2);
  if (result)
  {
    *(void *)(a1 + 3152) = sub_1809B6E94((void *)result, *(void *)(a1 + 3144));
    return 1LL;
  }

  *(void *)(a1 + 3152) = 0LL;
  *a2 = 7;
  return result;
}

uint64_t sub_1809CB73C()
{
  qword_18C449B20 = 0LL;
  return 1LL;
}

uint64_t sub_1809CB74C(uint64_t a1, unsigned __int16 **a2, unsigned __int16 *a3)
{
  int v4 = *a2;
  int v6 = *a2 + 1;
  unint64_t v5 = **a2;
  *a2 = v6;
  if (!*(_BYTE *)(*(void *)(a1 + 56) + (v5 >> 8))
    || ((1 << (v5 >> 5)) & *(unsigned __int8 *)(*(void *)(a1 + 56) + (v5 >> 8))) == 0)
  {
    return 0LL;
  }

  if ((v5 & 0xFC00) == 0xD800 && v6 != a3)
  {
    int v10 = *v6;
    if ((v10 & 0xFC00) == 0xDC00)
    {
      LODWORD(v5) = v10 + ((_DWORD)v5 << 10) - 56613888;
      *a2 = v4 + 2;
    }
  }

  return icu::Normalizer2Impl::getFCD16FromNormData((icu::Normalizer2Impl *)a1, v5);
}

void sub_1809CB7E0(UErrorCode *a1)
{
  if (*(int *)a1 <= 0)
  {
    unsigned int v2 = atomic_load(&dword_18C535D58);
    if (v2 == 2 || !icu::umtx_initImplPreInit(&dword_18C535D58))
    {
      if (dword_18C535D5C >= 1) {
        *a1 = dword_18C535D5C;
      }
    }

    else
    {
      sub_1809CB864(a1, v3);
      dword_18C535D5C = *a1;
      icu::umtx_initImplPostInit(&dword_18C535D58);
    }
  }

void sub_1809CB864(UErrorCode *a1, unint64_t a2)
{
  int v14 = (uint64_t *)*MEMORY[0x1895F89C0];
  unint64_t v3 = icu::UMemory::operator new(v14, (icu::UMemory *)0xC8, a2);
  if (!v3)
  {
    qword_18C535D48 = 0LL;
    goto LABEL_7;
  }

  int v4 = (icu::UnicodeSet *)v3;
  icu::UnicodeString::UnicodeString( (uint64_t)v13,  (uint64_t)L"['\\-.\\:\\u00B7\\u0375\\u058A\\u05F3\\u05F4\\u06FD\\u06FE\\u0F0B\\u2010\\u2019\\u2027\\u30A0\\u30FB]");
  icu::UnicodeSet::UnicodeSet(v4, (const icu::UnicodeString *)v13, a1);
  qword_18C535D48 = (uint64_t)v4;
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v13);
  if (!qword_18C535D48)
  {
LABEL_7:
    *a1 = U_MEMORY_ALLOCATION_ERROR;
    return;
  }

  icu::UnicodeSet::freeze((icu::UnicodeSet *)qword_18C535D48);
  uint64_t v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0xC8, v6);
  if (v8)
  {
    uint64_t v9 = (icu::UnicodeSet *)v8;
    icu::UnicodeString::UnicodeString((uint64_t)v13, (uint64_t)"[");
    icu::UnicodeSet::UnicodeSet(v9, (const icu::UnicodeString *)v13, a1);
    qword_18C535D50 = (uint64_t)v9;
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v13);
    if (qword_18C535D50)
    {
      icu::UnicodeSet::freeze((icu::UnicodeSet *)qword_18C535D50);
      qword_18C535D40 = icu::Normalizer2::getNFDInstance((icu::Normalizer2 *)a1, v11);
      sub_1809B36C0(3u, (uint64_t)sub_1809CDAB8);
      return;
    }
  }

  else
  {
    qword_18C535D50 = 0LL;
  }

  *a1 = U_MEMORY_ALLOCATION_ERROR;
  if (qword_18C535D48)
  {
    uint64_t v12 = icu::UnicodeSet::~UnicodeSet((void *)7, (icu::UnicodeSet *)qword_18C535D48);
    icu::UMemory::operator delete(v12);
  }

uint64_t uspoof_open(UErrorCode *a1, unint64_t a2)
{
  unsigned int v3 = atomic_load(&dword_18C535D58);
  if (v3 == 2 || !icu::umtx_initImplPreInit(&dword_18C535D58))
  {
    int v4 = dword_18C535D5C;
    if (dword_18C535D5C >= 1)
    {
LABEL_6:
      *a1 = v4;
      return 0LL;
    }
  }

  else
  {
    sub_1809CB864(a1, a2);
    dword_18C535D5C = *a1;
    icu::umtx_initImplPostInit(&dword_18C535D58);
  }

  unint64_t v5 = (uint64_t *)*(unsigned int *)a1;
  BOOL v7 = icu::UMemory::operator new(v5, (icu::UMemory *)0x30, a2);
  if (!v7)
  {
    int v4 = 7;
    goto LABEL_6;
  }

  uint64_t v8 = sub_1809CEAEC((uint64_t)v7, a1);
  if (*(int *)a1 >= 1)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
    return 0LL;
  }

  return nullsub_17(v8);
}

uint64_t uspoof_openFromSerialized(uint64_t a1, unint64_t a2, _DWORD *a3, UErrorCode *a4)
{
  if (!a1)
  {
    int v9 = 1;
    goto LABEL_12;
  }

  unsigned int v8 = atomic_load(&dword_18C535D58);
  if (v8 != 2 && icu::umtx_initImplPreInit(&dword_18C535D58))
  {
    sub_1809CB864(a4, a2);
    dword_18C535D5C = *a4;
    icu::umtx_initImplPostInit(&dword_18C535D58);
    goto LABEL_7;
  }

  int v9 = dword_18C535D5C;
  if (dword_18C535D5C >= 1)
  {
LABEL_12:
    *a4 = v9;
    return 0LL;
  }

uint64_t uspoof_clone(uint64_t a1, int *a2)
{
  uint64_t v3 = sub_1809CECA0(a1, a2);
  if (!v3) {
    return 0LL;
  }
  uint64_t v6 = v3;
  BOOL v7 = icu::UMemory::operator new(v5, (icu::UMemory *)0x30, v4);
  if (!v7)
  {
    *a2 = 7;
    return 0LL;
  }

  uint64_t v8 = sub_1809CEBF4(v7, v6, a2);
  if (*a2 >= 1)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
    uint64_t v8 = 0LL;
  }

  return nullsub_17(v8);
}

uint64_t uspoof_close(uint64_t a1)
{
  int v2 = 0;
  uint64_t result = sub_1809CED78(a1, &v2);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t uspoof_setChecks(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t result = sub_1809CED78(a1, a3);
  if (result)
  {
    if ((a2 & 0xBFFF0000) != 0) {
      *a3 = 1;
    }
    else {
      *(_DWORD *)(result + 12) = a2;
    }
  }

  return result;
}

uint64_t uspoof_getChecks(uint64_t a1, int *a2)
{
  uint64_t result = sub_1809CECA0(a1, a2);
  if (result) {
    return *(unsigned int *)(result + 12);
  }
  return result;
}

uint64_t uspoof_setRestrictionLevel(uint64_t a1, int a2)
{
  int v4 = 0;
  uint64_t result = sub_1809CED78(a1, &v4);
  if (result)
  {
    *(_DWORD *)(result + 40) = a2;
    *(_DWORD *)(result + 12) |= 0x10u;
  }

  return result;
}

uint64_t uspoof_getRestrictionLevel(uint64_t a1)
{
  int v3 = 0;
  uint64_t v1 = sub_1809CECA0(a1, &v3);
  if (v1) {
    return *(unsigned int *)(v1 + 40);
  }
  else {
    return 1610612736LL;
  }
}

void *uspoof_setAllowedLocales(uint64_t a1, const char *a2, int *a3)
{
  uint64_t result = (void *)sub_1809CED78(a1, a3);
  if (result) {
    return sub_1809CED7C((uint64_t)result, a2, a3);
  }
  return result;
}

uint64_t uspoof_getAllowedLocales(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1809CED78(a1, a2);
  if (result) {
    return sub_1809CF114(result);
  }
  return result;
}

uint64_t uspoof_getAllowedChars(uint64_t a1, int *a2)
{
  uint64_t result = sub_1809CECA0(a1, a2);
  if (result) {
    return *(void *)(result + 24);
  }
  return result;
}

uint64_t uspoof_getAllowedUnicodeSet(uint64_t a1, int *a2)
{
  uint64_t result = sub_1809CECA0(a1, a2);
  if (result) {
    return *(void *)(result + 24);
  }
  return result;
}

void uspoof_setAllowedUnicodeSet(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  uint64_t v5 = sub_1809CED78(a1, a3);
  if (!v5) {
    return;
  }
  BOOL v7 = (uint64_t *)a2[32];
  if ((v7 & 1) != 0)
  {
    int v14 = 1;
LABEL_10:
    *a3 = v14;
    return;
  }

  uint64_t v8 = v5;
  int v9 = icu::UnicodeSet::clone((icu::UnicodeSet *)a2, v6, v7);
  if (!v9 || (int v10 = v9, (*((_BYTE *)v9 + 32) & 1) != 0))
  {
    int v14 = 7;
    goto LABEL_10;
  }

  icu::UnicodeSet::freeze(v9);
  uint64_t v12 = *(icu::UnicodeSet **)(v8 + 24);
  if (v12)
  {
    unint64_t v13 = icu::UnicodeSet::~UnicodeSet(v11, v12);
    icu::UMemory::operator delete(v13);
  }

  *(void *)(v8 + 24) = v10;
  *(_DWORD *)(v8 + 12) |= 0x40u;
}

uint64_t uspoof_check(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, int *a5)
{
  if (a4) {
    *a4 = 0;
  }
  return uspoof_check2(a1, a2, a3, 0LL, a5);
}

uint64_t uspoof_check2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int *a5)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (!sub_1809CECA0(a1, a5)) {
    return 0LL;
  }
  if (a3 > -2)
  {
    memset(v14, 0, sizeof(v14));
    uint64_t v13 = a2;
    icu::UnicodeString::UnicodeString(v14, a3 == -1, &v13);
    uint64_t v10 = uspoof_check2UnicodeString(a1, (uint64_t)v14, a4, a5);
    icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v14);
  }

  else
  {
    uint64_t v10 = 0LL;
    *a5 = 1;
  }

  return v10;
}

uint64_t uspoof_check2UnicodeString(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = sub_1809CECA0(a1, a4);
  if (v7)
  {
    uint64_t v8 = v7;
    if (!a3)
    {
      memset(v12, 0, sizeof(v12));
      sub_1809CF964((uint64_t)v12);
      uint64_t v11 = sub_1809CCE4C(v8, a2, v12, (UErrorCode *)a4);
      sub_1809CFA18(v12);
      return v11;
    }

    int v9 = (_DWORD *)sub_1809CF9B0(a3, a4);
    if (v9) {
      return sub_1809CCE4C(v8, a2, v9, (UErrorCode *)a4);
    }
  }

  return 0LL;
}

uint64_t uspoof_checkUTF8(uint64_t a1, char *a2, int32_t a3, _DWORD *a4, int *a5)
{
  if (a4) {
    *a4 = 0;
  }
  return uspoof_check2UTF8(a1, a2, a3, 0LL, a5);
}

uint64_t uspoof_check2UTF8(uint64_t a1, char *__s, int32_t a3, uint64_t a4, int *a5)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  if (*a5 > 0) {
    return 0LL;
  }
  memset(v12, 0, sizeof(v12));
  if (a3 < 0) {
    a3 = strlen(__s);
  }
  icu::UnicodeString::fromUTF8(__s, a3, (uint64_t)v12);
  uint64_t v5 = uspoof_check2UnicodeString(a1, (uint64_t)v12, a4, a5);
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v12);
  return v5;
}

uint64_t uspoof_areConfusable(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, int *a6)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  sub_1809CECA0(a1, a6);
  if (*a6 > 0) {
    return 0LL;
  }
  if (a3 < -1 || a5 <= -2)
  {
    uint64_t v12 = 0LL;
    *a6 = 1;
  }

  else
  {
    memset(v19, 0, sizeof(v19));
    uint64_t v17 = a2;
    icu::UnicodeString::UnicodeString(v19, a3 == -1, &v17);
    memset(v18, 0, sizeof(v18));
    uint64_t v16 = a4;
    icu::UnicodeString::UnicodeString(v18, a5 == -1, &v16);
    uint64_t v12 = uspoof_areConfusableUnicodeString(a1, (uint64_t)v19, (uint64_t)v18, a6);
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v18);
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v19);
  }

  return v12;
}

uint64_t uspoof_areConfusableUnicodeString(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  uint64_t v8 = sub_1809CECA0(a1, a4);
  if (*a4 <= 0)
  {
    uint64_t v11 = v8;
    if ((*(_BYTE *)(v8 + 12) & 7) == 0)
    {
      uint64_t v10 = 0LL;
      *a4 = 27;
      return v10;
    }

    __int128 v30 = 0u;
    uint64_t v33 = 0LL;
    __int128 v32 = 0u;
    __int128 v31 = 0u;
    BOOL v29 = off_18971B688;
    LOWORD(v30) = 2;
    uspoof_getSkeletonUnicodeString(a1, v9, a2, (uint64_t)&v29, a4);
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    uint64_t v28 = 0LL;
    __int128 v27 = 0u;
    BOOL v24 = off_18971B688;
    LOWORD(v25) = 2;
    uspoof_getSkeletonUnicodeString(a1, v12, a3, (uint64_t)&v24, a4);
    unint64_t v13 = *a4;
    if ((v30 & 1) != 0)
    {
      unint64_t v13 = (unsigned __int16)v25;
      if ((v25 & 1) == 0) {
        goto LABEL_5;
      }
    }

    else
    {
      uint64_t v10 = 0LL;
      if ((v30 & 0x8000u) == 0LL) {
        int v16 = (unsigned __int16)v30 >> 5;
      }
      else {
        int v16 = DWORD1(v30);
      }
      if ((v25 & 0x8000u) == 0LL) {
        unint64_t v13 = (unsigned __int16)v25 >> 5;
      }
      else {
        unint64_t v13 = DWORD1(v25);
      }
      if ((v25 & 1) != 0 || v16 != (_DWORD)v13) {
        goto LABEL_6;
      }
      if (!icu::UnicodeString::doEquals((icu::UnicodeString *)&v29, (const icu::UnicodeString *)&v24, v16))
      {
LABEL_5:
        uint64_t v10 = 0LL;
LABEL_6:
        icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)&v24);
        icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v29);
        return v10;
      }
    }

    memset(v22, 0, sizeof(v22));
    int v23 = 0;
    icu::ScriptSet::ScriptSet((uint64_t)v22);
    sub_1809CF27C(v11, a2, (icu::ScriptSet *)v22, (UErrorCode *)a4);
    memset(v20, 0, sizeof(v20));
    int v21 = 0;
    icu::ScriptSet::ScriptSet((uint64_t)v20);
    sub_1809CF27C(v11, a3, (icu::ScriptSet *)v20, (UErrorCode *)a4);
    if (icu::ScriptSet::intersects((icu::ScriptSet *)v22, (const icu::ScriptSet *)v20))
    {
      int v17 = 1;
    }

    else
    {
      int v17 = 2;
      if (!icu::ScriptSet::isEmpty((icu::ScriptSet *)v22))
      {
        if (icu::ScriptSet::isEmpty((icu::ScriptSet *)v20)) {
          int v17 = 2;
        }
        else {
          int v17 = 6;
        }
      }
    }

    int v18 = *(_DWORD *)(v11 + 12);
    unsigned int v19 = v17 & 6;
    if ((v18 & 1) != 0) {
      unsigned int v19 = v17;
    }
    if ((v18 & 2) == 0) {
      v19 &= ~2u;
    }
    if ((v18 & 4) != 0) {
      uint64_t v10 = v19;
    }
    else {
      uint64_t v10 = v19 & 3;
    }
    icu::ScriptSet::~ScriptSet((icu::ScriptSet *)v20);
    icu::ScriptSet::~ScriptSet((icu::ScriptSet *)v22);
    goto LABEL_6;
  }

  return 0LL;
}

uint64_t uspoof_areConfusableUTF8( uint64_t a1, const char *a2, int32_t a3, const char *a4, int32_t a5, int *a6)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  sub_1809CECA0(a1, a6);
  if (*a6 > 0) {
    return 0LL;
  }
  if (a3 < -1 || a5 <= -2)
  {
    uint64_t v12 = 0LL;
    *a6 = 1;
  }

  else
  {
    memset(v17, 0, sizeof(v17));
    if (a3 < 0) {
      a3 = strlen(a2);
    }
    icu::UnicodeString::fromUTF8(a2, a3, (uint64_t)v17);
    memset(v16, 0, sizeof(v16));
    if (a5 < 0) {
      a5 = strlen(a4);
    }
    icu::UnicodeString::fromUTF8(a4, a5, (uint64_t)v16);
    uint64_t v12 = uspoof_areConfusableUnicodeString(a1, (uint64_t)v17, (uint64_t)v16, a6);
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v16);
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v17);
  }

  return v12;
}

uint64_t uspoof_getSkeletonUnicodeString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  uint64_t v8 = sub_1809CECA0(a1, a5);
  if (*a5 <= 0)
  {
    uint64_t v9 = v8;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    uint64_t v28 = 0LL;
    __int128 v27 = 0u;
    BOOL v24 = off_18971B688;
    LOWORD(v25) = 2;
    (*(void (**)(uint64_t, uint64_t, void (***)(icu::UnicodeString *__hidden), int *))(*(void *)qword_18C535D40 + 24LL))( qword_18C535D40,  a3,  &v24,  a5);
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    uint64_t v23 = 0LL;
    __int128 v22 = 0u;
    unsigned int v19 = off_18971B688;
    LOWORD(v20) = 2;
    uint64_t v10 = (uint64_t *)((unsigned __int16)v25 >> 5);
    if ((v25 & 0x8000u) == 0LL) {
      int v11 = (unsigned __int16)v25 >> 5;
    }
    else {
      int v11 = DWORD1(v25);
    }
    if (v11 >= 1)
    {
      for (int i = 0; i < v11; i += v15)
      {
        unsigned int v13 = icu::UnicodeString::char32At(v10, (icu::UnicodeString *)&v24, i);
        signed int v14 = v13;
        if (v13 < 0x10000) {
          int v15 = 1;
        }
        else {
          int v15 = 2;
        }
        if (!u_hasBinaryProperty(v13, UCHAR_DEFAULT_IGNORABLE_CODE_POINT)) {
          sub_1809CF838(*(void **)(v9 + 16), v14, (icu::UnicodeString *)&v19);
        }
      }
    }

    (*(void (**)(uint64_t, void (***)(icu::UnicodeString *__hidden), uint64_t, int *))(*(void *)qword_18C535D40 + 24LL))( qword_18C535D40,  &v19,  a4,  a5);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v19);
    icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v24);
  }

  return a4;
}

uint64_t uspoof_areBidiConfusable( uint64_t a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, int a6, int *a7)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  memset(v19, 0, sizeof(v19));
  uint64_t v17 = a3;
  icu::UnicodeString::UnicodeString(v19, a4 == -1, &v17);
  memset(v18, 0, sizeof(v18));
  uint64_t v16 = a5;
  icu::UnicodeString::UnicodeString(v18, a6 == -1, &v16);
  if ((BYTE8(v19[0]) & 1) != 0 || (BYTE8(v18[0]) & 1) != 0)
  {
    uint64_t v13 = 0LL;
    uint64_t v12 = 1LL;
    *a7 = 1;
  }

  else
  {
    uint64_t v13 = uspoof_areBidiConfusableUnicodeString(a1, a2, (uint64_t)v19, (uint64_t)v18, a7);
  }

  icu::UnicodeString::~UnicodeString((void *)v12, (icu::UnicodeString *)v18);
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v19);
  return v13;
}

uint64_t uspoof_areBidiConfusableUnicodeString(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  uint64_t v10 = sub_1809CECA0(a1, a5);
  if (*a5 <= 0)
  {
    uint64_t v12 = v10;
    if ((*(_BYTE *)(v10 + 12) & 7) == 0)
    {
      uint64_t v11 = 0LL;
      *a5 = 27;
      return v11;
    }

    __int128 v28 = 0u;
    uint64_t v31 = 0LL;
    __int128 v30 = 0u;
    __int128 v29 = 0u;
    __int128 v27 = off_18971B688;
    LOWORD(v28) = 2;
    uspoof_getBidiSkeletonUnicodeString(a1, a2, a3, (uint64_t)&v27, a5);
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    uint64_t v26 = 0LL;
    __int128 v25 = 0u;
    __int128 v22 = off_18971B688;
    LOWORD(v23) = 2;
    uspoof_getBidiSkeletonUnicodeString(a1, a2, a4, (uint64_t)&v22, a5);
    unint64_t v13 = *a5;
    if ((v28 & 1) != 0)
    {
      unint64_t v13 = (unsigned __int16)v23;
      if ((v23 & 1) == 0) {
        goto LABEL_5;
      }
    }

    else
    {
      uint64_t v11 = 0LL;
      if ((v28 & 0x8000u) == 0LL) {
        int v16 = (unsigned __int16)v28 >> 5;
      }
      else {
        int v16 = DWORD1(v28);
      }
      if ((v23 & 0x8000u) == 0LL) {
        unint64_t v13 = (unsigned __int16)v23 >> 5;
      }
      else {
        unint64_t v13 = DWORD1(v23);
      }
      if ((v23 & 1) != 0 || v16 != (_DWORD)v13) {
        goto LABEL_6;
      }
      if (!icu::UnicodeString::doEquals((icu::UnicodeString *)&v27, (const icu::UnicodeString *)&v22, v16))
      {
LABEL_5:
        uint64_t v11 = 0LL;
LABEL_6:
        icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)&v22);
        icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v27);
        return v11;
      }
    }

    memset(v20, 0, sizeof(v20));
    int v21 = 0;
    icu::ScriptSet::ScriptSet((uint64_t)v20);
    sub_1809CF27C(v12, a3, (icu::ScriptSet *)v20, (UErrorCode *)a5);
    memset(v18, 0, sizeof(v18));
    int v19 = 0;
    icu::ScriptSet::ScriptSet((uint64_t)v18);
    sub_1809CF27C(v12, a4, (icu::ScriptSet *)v18, (UErrorCode *)a5);
    if (icu::ScriptSet::intersects((icu::ScriptSet *)v20, (const icu::ScriptSet *)v18))
    {
      int v17 = 1;
    }

    else
    {
      int v17 = 2;
      if (!icu::ScriptSet::isEmpty((icu::ScriptSet *)v20))
      {
        if (icu::ScriptSet::isEmpty((icu::ScriptSet *)v18)) {
          int v17 = 2;
        }
        else {
          int v17 = 6;
        }
      }
    }

    uint64_t v11 = *(_DWORD *)(v12 + 12) & v17;
    icu::ScriptSet::~ScriptSet((icu::ScriptSet *)v18);
    icu::ScriptSet::~ScriptSet((icu::ScriptSet *)v20);
    goto LABEL_6;
  }

  return 0LL;
}

uint64_t uspoof_areBidiConfusableUTF8( uint64_t a1, unsigned int a2, char *__s, int32_t a4, const char *a5, int a6, int *a7)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (a4 < -1 || (int32_t v8 = a6, a6 <= -2))
  {
    uint64_t v13 = 0LL;
    *a7 = 1;
  }

  else
  {
    memset(v18, 0, sizeof(v18));
    if (a4 < 0) {
      a4 = strlen(__s);
    }
    icu::UnicodeString::fromUTF8(__s, a4, (uint64_t)v18);
    memset(v17, 0, sizeof(v17));
    if (v8 < 0) {
      int32_t v8 = strlen(a5);
    }
    icu::UnicodeString::fromUTF8(a5, v8, (uint64_t)v17);
    uint64_t v13 = uspoof_areBidiConfusableUnicodeString(a1, a2, (uint64_t)v18, (uint64_t)v17, a7);
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v17);
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v18);
  }

  return v13;
}

uint64_t uspoof_getBidiSkeletonUnicodeString(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  if ((*(_WORD *)(a4 + 8) & 1) != 0) {
    __int16 v7 = 2;
  }
  else {
    __int16 v7 = *(_WORD *)(a4 + 8) & 0x1F;
  }
  *(_WORD *)(a4 + 8) = v7;
  if (a2 < 2)
  {
    unsigned __int8 v9 = a2;
    uint64_t v11 = ubidi_open();
    uint64_t v12 = v11;
    unsigned int v13 = *(unsigned __int16 *)(a3 + 8);
    if ((v13 & 0x11) != 0)
    {
      signed int v14 = 0LL;
    }

    else if ((v13 & 2) != 0)
    {
      signed int v14 = (const UChar *)(a3 + 10);
    }

    else
    {
      signed int v14 = *(const UChar **)(a3 + 24);
    }

    int v15 = (__int16)v13;
    unsigned int v16 = v13 >> 5;
    if (v15 >= 0) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = *(unsigned int *)(a3 + 12);
    }
    ubidi_setPara((uint64_t)v11, v14, v17, v9, 0LL, a5);
    if (*a5 < 1)
    {
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      uint64_t v27 = 0LL;
      __int128 v26 = 0u;
      __int128 v23 = off_18971B688;
      LOWORD(v24) = 2;
      int ProcessedLength = ubidi_getProcessedLength((uint64_t)v12);
      unint64_t Buffer = icu::UnicodeString::getBuffer((icu::UnicodeString *)&v23, ProcessedLength);
      if (Buffer)
      {
        ubidi_writeReordered((uint64_t)v12, Buffer, ProcessedLength, 3, a5);
        icu::UnicodeString::releaseBuffer((uint64_t)&v23, ProcessedLength);
        ubidi_close(v12);
        unint64_t v21 = *a5;
      }

      else
      {
        *a5 = 7;
        ubidi_close(v12);
      }

      icu::UnicodeString::~UnicodeString((void *)v21, (icu::UnicodeString *)&v23);
    }

    else
    {
      ubidi_close(v12);
    }
  }

  else
  {
    *a5 = 1;
  }

  return a4;
}

uint64_t uspoof_checkUnicodeString(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  if (a3) {
    *a3 = 0;
  }
  return uspoof_check2UnicodeString(a1, a2, 0LL, a4);
}

uint64_t sub_1809CCE4C(uint64_t a1, uint64_t a2, _DWORD *a3, UErrorCode *a4)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  sub_1809CF934(a3);
  int v8 = *(_DWORD *)(a1 + 12);
  if ((v8 & 0x10) != 0)
  {
    int v10 = sub_1809CF45C(a1, a2, a4);
    int v9 = 16 * (v10 > *(_DWORD *)(a1 + 40));
    a3[54] = v10;
    int v8 = *(_DWORD *)(a1 + 12);
    if ((v8 & 0x80) == 0) {
      goto LABEL_8;
    }
  }

  else
  {
    int v9 = 0;
    if ((v8 & 0x80) == 0) {
      goto LABEL_8;
    }
  }

  uint64_t v42 = 0LL;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v30);
  sub_1809CF39C(a1, a2, (icu::UnicodeSet *)&v30);
  icu::UnicodeSet::operator=((icu::UnicodeSet *)(a3 + 4), (const icu::UnicodeSet *)&v30);
  icu::UnicodeSet::~UnicodeSet(v11, (icu::UnicodeSet *)&v30);
  int v8 = *(_DWORD *)(a1 + 12);
LABEL_8:
  if ((v8 & 0x100) != 0)
  {
    if ((*(_DWORD *)(a1 + 12) & 0x40) == 0) {
      goto LABEL_23;
    }
  }

  else if ((v8 & 0x40) == 0)
  {
    goto LABEL_23;
  }

  int v12 = 0;
  unsigned int v13 = *(unsigned __int16 *)(a2 + 8);
  int v14 = (__int16)v13;
  int v15 = (uint64_t *)(v13 >> 5);
  if (v14 >= 0) {
    int v16 = (int)v15;
  }
  else {
    int v16 = *(_DWORD *)(a2 + 12);
  }
  while (v12 < v16)
  {
    unsigned int v17 = icu::UnicodeString::char32At(v15, (icu::UnicodeString *)a2, v12);
    if (v17 < 0x10000) {
      int v18 = 1;
    }
    else {
      int v18 = 2;
    }
    v12 += v18;
    if (!icu::UnicodeSet::contains(*(icu::UnicodeSet **)(a1 + 24), v17))
    {
      v9 |= 0x40u;
      break;
    }
  }

uint64_t uspoof_getSkeleton(uint64_t a1, uint64_t a2, uint64_t a3, int a4, UChar *a5, int a6, int *a7)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  sub_1809CECA0(a1, a7);
  if (*a7 > 0) {
    return 0LL;
  }
  if (a4 < -1 || a6 < 0 || a5 && !a6)
  {
    uint64_t v13 = 0LL;
    *a7 = 1;
  }

  else
  {
    memset(v25, 0, sizeof(v25));
    uint64_t v19 = a3;
    icu::UnicodeString::UnicodeString(v25, a4 == -1, &v19);
    __int128 v21 = 0u;
    uint64_t v24 = 0LL;
    __int128 v23 = 0u;
    __int128 v22 = 0u;
    int v20 = off_18971B688;
    LOWORD(v21) = 2;
    uspoof_getSkeletonUnicodeString(a1, v14, (uint64_t)v25, (uint64_t)&v20, a7);
    int v18 = a5;
    icu::UnicodeString::extract((uint64_t)&v20, &v18, a6, a7);
    int v15 = (void *)((unsigned __int16)v21 >> 5);
    if ((v21 & 0x8000u) == 0LL) {
      uint64_t v13 = v15;
    }
    else {
      uint64_t v13 = DWORD1(v21);
    }
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v20);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v25);
  }

  return v13;
}

uint64_t uspoof_getBidiSkeleton(uint64_t a1, unsigned int a2, uint64_t a3, int a4, UChar *a5, int a6, int *a7)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  memset(v23, 0, sizeof(v23));
  uint64_t v17 = a3;
  icu::UnicodeString::UnicodeString(v23, a4 == -1, &v17);
  v15[1] = v17;
  if ((BYTE8(v23[0]) & 1) != 0)
  {
    uint64_t v12 = 0LL;
    uint64_t v13 = 1LL;
    *a7 = 1;
  }

  else
  {
    __int128 v19 = 0u;
    uint64_t v22 = 0LL;
    __int128 v21 = 0u;
    __int128 v20 = 0u;
    int v18 = off_18971B688;
    LOWORD(v19) = 2;
    uspoof_getBidiSkeletonUnicodeString(a1, a2, (uint64_t)v23, (uint64_t)&v18, a7);
    int v16 = a5;
    uint64_t v12 = icu::UnicodeString::extract((uint64_t)&v18, &v16, a6, a7);
    v15[0] = v16;
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v18);
  }

  icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v23);
  return v12;
}

uint64_t uspoof_getSkeletonUTF8( uint64_t a1, uint64_t a2, const char *a3, int32_t a4, char *a5, int32_t a6, int *a7)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  sub_1809CECA0(a1, a7);
  if (*a7 > 0) {
    return 0LL;
  }
  if (a4 < -1 || a6 < 0 || a5 && !a6)
  {
    uint64_t v13 = 0LL;
    *a7 = 1;
  }

  else
  {
    memset(v26, 0, sizeof(v26));
    if (a4 < 0) {
      a4 = strlen(a3);
    }
    icu::UnicodeString::fromUTF8(a3, a4, (uint64_t)v26);
    __int128 v22 = 0u;
    uint64_t v25 = 0LL;
    __int128 v24 = 0u;
    __int128 v23 = 0u;
    __int128 v21 = off_18971B688;
    LOWORD(v22) = 2;
    uspoof_getSkeletonUnicodeString(a1, v14, (uint64_t)v26, (uint64_t)&v21, a7);
    unint64_t v15 = *a7;
    if ((int)v15 <= 0)
    {
      int32_t pDestLength = 0;
      if ((v22 & 0x11) != 0)
      {
        int v16 = 0LL;
      }

      else if ((v22 & 2) != 0)
      {
        int v16 = (const UChar *)&v22 + 1;
      }

      else
      {
        int v16 = (const UChar *)v23;
      }

      if ((v22 & 0x8000u) == 0LL) {
        int32_t v17 = (unsigned __int16)v22 >> 5;
      }
      else {
        int32_t v17 = DWORD1(v22);
      }
      u_strToUTF8(a5, a6, &pDestLength, v16, v17, (UErrorCode *)a7);
      uint64_t v13 = pDestLength;
    }

    else
    {
      uint64_t v13 = 0LL;
    }

    icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v21);
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v26);
  }

  return v13;
}

uint64_t uspoof_getBidiSkeletonUTF8( uint64_t a1, unsigned int a2, char *__s, int32_t a4, char *a5, int32_t a6, int *a7)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  if (a4 > -2)
  {
    memset(v25, 0, sizeof(v25));
    if (a4 < 0) {
      a4 = strlen(__s);
    }
    icu::UnicodeString::fromUTF8(__s, a4, (uint64_t)v25);
    __int128 v21 = 0u;
    uint64_t v24 = 0LL;
    __int128 v23 = 0u;
    __int128 v22 = 0u;
    __int128 v20 = off_18971B688;
    LOWORD(v21) = 2;
    uspoof_getBidiSkeletonUnicodeString(a1, a2, (uint64_t)v25, (uint64_t)&v20, a7);
    unint64_t v14 = *a7;
    if ((int)v14 <= 0)
    {
      int32_t pDestLength = 0;
      if ((v21 & 0x11) != 0)
      {
        unint64_t v15 = 0LL;
      }

      else if ((v21 & 2) != 0)
      {
        unint64_t v15 = (const UChar *)&v21 + 1;
      }

      else
      {
        unint64_t v15 = (const UChar *)v22;
      }

      if ((v21 & 0x8000u) == 0LL) {
        int32_t v16 = (unsigned __int16)v21 >> 5;
      }
      else {
        int32_t v16 = DWORD1(v21);
      }
      u_strToUTF8(a5, a6, &pDestLength, v15, v16, (UErrorCode *)a7);
      uint64_t v8 = pDestLength;
    }

    else
    {
      uint64_t v8 = 0LL;
    }

    icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)&v20);
    icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v25);
  }

  else
  {
    uint64_t v8 = 0LL;
    *a7 = 1;
  }

  return v8;
}

size_t uspoof_serialize(uint64_t a1, void *a2, int a3, _DWORD *a4)
{
  size_t result = sub_1809CED78(a1, a4);
  if (result) {
    return sub_1809CFE08(*(const void ***)(result + 16), a2, a3, a4);
  }
  return result;
}

uint64_t uspoof_getInclusionSet(UErrorCode *a1)
{
  if (*(int *)a1 <= 0)
  {
    unsigned int v2 = atomic_load(&dword_18C535D58);
    if (v2 == 2 || !icu::umtx_initImplPreInit(&dword_18C535D58))
    {
      if (dword_18C535D5C >= 1) {
        *a1 = dword_18C535D5C;
      }
    }

    else
    {
      sub_1809CB864(a1, v3);
      dword_18C535D5C = *a1;
      icu::umtx_initImplPostInit(&dword_18C535D58);
    }
  }

  return qword_18C535D48;
}

uint64_t uspoof_getRecommendedSet(UErrorCode *a1)
{
  if (*(int *)a1 <= 0)
  {
    unsigned int v2 = atomic_load(&dword_18C535D58);
    if (v2 == 2 || !icu::umtx_initImplPreInit(&dword_18C535D58))
    {
      if (dword_18C535D5C >= 1) {
        *a1 = dword_18C535D5C;
      }
    }

    else
    {
      sub_1809CB864(a1, v3);
      dword_18C535D5C = *a1;
      icu::umtx_initImplPostInit(&dword_18C535D58);
    }
  }

  return qword_18C535D50;
}

uint64_t uspoof_getInclusionUnicodeSet(UErrorCode *a1)
{
  if (*(int *)a1 <= 0)
  {
    unsigned int v2 = atomic_load(&dword_18C535D58);
    if (v2 == 2 || !icu::umtx_initImplPreInit(&dword_18C535D58))
    {
      if (dword_18C535D5C >= 1) {
        *a1 = dword_18C535D5C;
      }
    }

    else
    {
      sub_1809CB864(a1, v3);
      dword_18C535D5C = *a1;
      icu::umtx_initImplPostInit(&dword_18C535D58);
    }
  }

  return qword_18C535D48;
}

uint64_t uspoof_getRecommendedUnicodeSet(UErrorCode *a1)
{
  if (*(int *)a1 <= 0)
  {
    unsigned int v2 = atomic_load(&dword_18C535D58);
    if (v2 == 2 || !icu::umtx_initImplPreInit(&dword_18C535D58))
    {
      if (dword_18C535D5C >= 1) {
        *a1 = dword_18C535D5C;
      }
    }

    else
    {
      sub_1809CB864(a1, v3);
      dword_18C535D5C = *a1;
      icu::umtx_initImplPostInit(&dword_18C535D58);
    }
  }

  return qword_18C535D50;
}

uint64_t *uspoof_openCheckResult@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  size_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0xE0, a2);
  if (result)
  {
    uint64_t v5 = sub_1809CF964((uint64_t)result);
    return (uint64_t *)nullsub_17(v5);
  }

  else
  {
    *a1 = 7;
  }

  return result;
}

uint64_t uspoof_closeCheckResult(uint64_t a1)
{
  int v2 = 0;
  uint64_t result = sub_1809CF9B0(a1, &v2);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t uspoof_getCheckResultChecks(uint64_t a1, int *a2)
{
  uint64_t v3 = sub_1809CF9B0(a1, a2);
  if (*a2 <= 0) {
    return *(unsigned int *)(v3 + 12);
  }
  else {
    return 0LL;
  }
}

uint64_t uspoof_getCheckResultRestrictionLevel(uint64_t a1, int *a2)
{
  uint64_t v3 = sub_1809CF9B0(a1, a2);
  if (*a2 <= 0) {
    return *(unsigned int *)(v3 + 216);
  }
  else {
    return 1610612736LL;
  }
}

uint64_t uspoof_getCheckResultNumerics(uint64_t a1, int *a2)
{
  uint64_t v3 = sub_1809CF9B0(a1, a2);
  if (*a2 >= 1) {
    return 0LL;
  }
  else {
    return v3 + 16;
  }
}

uint64_t sub_1809CDAB8@<X0>(void *a1@<X8>)
{
  if (qword_18C535D48)
  {
    uint64_t v1 = icu::UnicodeSet::~UnicodeSet(a1, (icu::UnicodeSet *)qword_18C535D48);
    icu::UMemory::operator delete(v1);
  }

  qword_18C535D48 = 0LL;
  if (qword_18C535D50)
  {
    int v2 = icu::UnicodeSet::~UnicodeSet(a1, (icu::UnicodeSet *)qword_18C535D50);
    icu::UMemory::operator delete(v2);
  }

  qword_18C535D50 = 0LL;
  qword_18C535D40 = 0LL;
  atomic_store(0, &dword_18C535D58);
  return 1LL;
}

uint64_t uspoof_openFromSource( char *a1, int32_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6, UErrorCode *a7)
{
  uint64_t v13 = (uint64_t *)*(unsigned int *)a7;
  if (a5) {
    *a5 = 0;
  }
  if (a6)
  {
    *(void *)a6 = 0LL;
    *(_WORD *)(a6 + 8) = 0;
    *(_WORD *)(a6 + 40) = 0;
  }

  int32_t v16 = icu::UMemory::operator new(v13, (icu::UMemory *)0x38, v12);
  if (!v16)
  {
    uint64_t v14 = 0LL;
    *a7 = U_MEMORY_ALLOCATION_ERROR;
    return v14;
  }

  uint64_t v17 = (uint64_t)v16;
  sub_1809CFCF0(v16, a7);
  __int128 v19 = (uint64_t *)*(unsigned int *)a7;
  if ((int)v19 >= 1)
  {
    __int128 v20 = (void *)sub_1809CFD38(v17);
    icu::UMemory::operator delete(v20);
    return 0LL;
  }

  __int128 v21 = icu::UMemory::operator new(v19, (icu::UMemory *)0x30, v18);
  uint64_t v14 = (uint64_t)v21;
  if (!v21)
  {
    *a7 = U_MEMORY_ALLOCATION_ERROR;
    __int128 v22 = (void *)sub_1809CFD38(v17);
    icu::UMemory::operator delete(v22);
    return v14;
  }

  sub_1809CE948((uint64_t)v21, v17, a7);
  if (*(int *)a7 >= 1 || (sub_1809CE060(v14, a1, a2, a5, (_DWORD *)a6, (int *)a7), *(int *)a7 >= 1))
  {
    (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
    return 0LL;
  }

  return v14;
}

icu::UVector **sub_1809CDC54@<X0>(icu::UVector **a1@<X0>, UErrorCode *a2@<X1>, uint64_t *a3@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  uint64_t v5 = (icu::UVector *)icu::UMemory::operator new(a3, (icu::UMemory *)0x28, (unint64_t)a2);
  if (v5)
  {
    unint64_t v6 = v5;
    icu::UVector::UVector(v5, a2);
    if (*(int *)a2 <= 0)
    {
      icu::UVector::setDeleter(v6, (void (*)(void *))sub_1809CE858);
      *a1 = v6;
      a1[1] = (icu::UVector *)uhash_open( (uint64_t)uhash_hashUnicodeString,  (uint64_t)uhash_compareUnicodeString,  0LL,  (int *)a2);
    }

    else
    {
      (*(void (**)(icu::UVector *))(*(void *)v6 + 8LL))(v6);
    }
  }

  else if (*(int *)a2 <= 0)
  {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
  }

  return a1;
}

uint64_t sub_1809CDD08(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unsigned int v3 = *(unsigned __int16 *)(v2 + 8);
  else {
    signed int v4 = v3 >> 5;
  }
  uint64_t v5 = *a2;
  unsigned int v6 = *(unsigned __int16 *)(*a2 + 8);
  else {
    signed int v7 = v6 >> 5;
  }
  if (v4 < v7) {
    return 0xFFFFFFFFLL;
  }
  if (v4 > v7) {
    return 1LL;
  }
  if ((v3 & 0x8000) != 0)
  {
    int32_t v9 = *(_DWORD *)(v2 + 12);
    if ((v6 & 1) == 0) {
      goto LABEL_13;
    }
    return (v3 & 1) == 0;
  }

  int32_t v9 = v3 >> 5;
  if ((v6 & 1) != 0) {
    return (v3 & 1) == 0;
  }
LABEL_13:
  if ((v6 & 0x8000u) == 0) {
    int v10 = v6 >> 5;
  }
  else {
    int v10 = *(_DWORD *)(v5 + 12);
  }
  int v11 = v10 & (v10 >> 31);
  int32_t v12 = v10 & ~(v10 >> 31);
  uint64_t v13 = v5 + 10;
  uint64_t v14 = *(void *)(v5 + 24);
  if ((v6 & 2) != 0) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v14;
  }
  return icu::UnicodeString::doCompare(v2, 0, v9, v15, v11, v12);
}

uint64_t sub_1809CDDC0(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v3 = a2;
  if (*(int *)a3 > 0)
  {
    uint64_t v4 = 0LL;
    if (!a2) {
      return v4;
    }
    goto LABEL_6;
  }

  uint64_t v7 = uhash_get(*(void *)(a1 + 8), a2);
  if (v7)
  {
    uint64_t v4 = v7;
    if (v3) {
LABEL_6:
    }
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }

  else
  {
    int v11 = icu::UMemory::operator new(v9, (icu::UMemory *)0x10, v8);
    uint64_t v4 = (uint64_t)v11;
    if (v11)
    {
      uint64_t v12 = 0LL;
      *int v11 = v3;
      *((_DWORD *)v11 + 2) = 0;
    }

    else
    {
      uint64_t v12 = v3;
      if (*(int *)a3 <= 0)
      {
        *a3 = U_MEMORY_ALLOCATION_ERROR;
        uint64_t v12 = v3;
      }
    }

    icu::UVector::adoptElement(*(icu::UVector **)a1, v11, a3);
    else {
      uint64_t v4 = 0LL;
    }
    uint64_t v3 = v12;
    if (v12) {
      goto LABEL_6;
    }
  }

  return v4;
}

uint64_t sub_1809CDEB8(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  if (*a3 <= 0)
  {
    *(void *)(a1 + 16) = uhash_open((uint64_t)uhash_hashLong, (uint64_t)uhash_compareLong, 0LL, a3);
    uint64_t v7 = (icu::UnicodeSet *)icu::UMemory::operator new(v6, (icu::UMemory *)0xC8, v5);
    if (v7)
    {
      icu::UnicodeSet::UnicodeSet(v7);
      *(void *)(a1 + 24) = v8;
      int v11 = (icu::UVector *)icu::UMemory::operator new(v10, (icu::UMemory *)0x28, v9);
      if (v11)
      {
        *(void *)(a1 + 32) = icu::UVector::UVector(v11, (UErrorCode *)a3);
        uint64_t v14 = (icu::UVector *)icu::UMemory::operator new(v13, (icu::UMemory *)0x28, v12);
        if (v14)
        {
          *(void *)(a1 + 40) = icu::UVector::UVector(v14, (UErrorCode *)a3);
          uint64_t v17 = (icu::UVector **)icu::UMemory::operator new(v16, (icu::UMemory *)0x10, v15);
          if (v17)
          {
            *(void *)(a1 + 56) = sub_1809CDC54(v17, (UErrorCode *)a3, v18);
            return a1;
          }

          *(void *)(a1 + 56) = 0LL;
        }

        else
        {
          *(void *)(a1 + 40) = 0LL;
        }
      }

      else
      {
        *(void *)(a1 + 32) = 0LL;
      }
    }

    else
    {
      *(void *)(a1 + 24) = 0LL;
    }

    *a3 = 7;
  }

  return a1;
}

uint64_t sub_1809CDFA8(uint64_t a1)
{
  uint64_t v3 = *(icu::UnicodeSet **)(a1 + 24);
  if (v3)
  {
    uint64_t v4 = icu::UnicodeSet::~UnicodeSet(v2, v3);
    icu::UMemory::operator delete(v4);
  }

  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  uint64_t v8 = *(void **)(a1 + 56);
  if (v8)
  {
    if (*v8) {
      (*(void (**)(void))(*(void *)*v8 + 8LL))(*v8);
    }
    uhash_close((_BYTE *)v8[1]);
    icu::UMemory::operator delete(v8);
  }

  return a1;
}

uint64_t sub_1809CE060(uint64_t result, char *a2, int32_t a3, _DWORD *a4, _DWORD *a5, int *a6)
{
  if (*a6 <= 0)
  {
    uint64_t v12 = 0LL;
    memset(v11, 0, sizeof(v11));
    sub_1809CDEB8((uint64_t)v11, result, a6);
    sub_1809CE110((UChar *)v11, a2, a3, (UErrorCode *)a6);
    if (a4)
    {
      if (*a6 >= 1)
      {
        *a4 = 1;
        *a5 = v12;
      }
    }

    return sub_1809CDFA8((uint64_t)v11);
  }

  return result;
}

UChar *sub_1809CE110(UChar *result, char *src, int32_t srcLength, UErrorCode *pErrorCode)
{
  uint64_t v62 = *MEMORY[0x1895F89C0];
  int32_t pDestLength = 0;
  uint64_t v7 = (uint64_t)result;
  uint64_t result = u_strFromUTF8(0LL, 0, &pDestLength, src, srcLength, pErrorCode);
  if (*pErrorCode != U_BUFFER_OVERFLOW_ERROR) {
    return result;
  }
  *UErrorCode pErrorCode = U_ZERO_ERROR;
  uint64_t result = (UChar *)uprv_malloc(2LL * pDestLength + 2);
  *(void *)(v7 + 8) = result;
  if (!result)
  {
    *UErrorCode pErrorCode = U_MEMORY_ALLOCATION_ERROR;
    return result;
  }

  u_strFromUTF8(result, pDestLength + 1, 0LL, src, srcLength, pErrorCode);
  __int128 v60 = 0u;
  __int128 v61 = 0u;
  __int128 v58 = 0u;
  __int128 v59 = 0u;
  icu::UnicodeString::UnicodeString( &v58,  "(?m)^[ \\t]*([0-9A-Fa-f]+)[ \\t]+;[ \\t]*([0-9A-Fa-f]+(?:[ \\t]+[0-9A-Fa-f]+)*)[ \\t]*;\\s*(?:(SL)|(SA)|(ML)|(MA))[ "
    "\\t]*(?:#.*?)?$|^([ \\t]*(?:#.*?)?)$|^(.*?)$",
    0xFFFFFFFFLL,
    0LL);
  uint64_t v8 = 0LL;
  if ((BYTE8(v58) & 0x11) == 0)
  {
    if ((BYTE8(v58) & 2) != 0) {
      uint64_t v8 = (const UChar *)((unint64_t)&v58 | 0xA);
    }
    else {
      uint64_t v8 = (const UChar *)*((void *)&v59 + 1);
    }
  }

  if ((SWORD4(v58) & 0x8000u) == 0) {
    int32_t v9 = WORD4(v58) >> 5;
  }
  else {
    int32_t v9 = HIDWORD(v58);
  }
  *(void *)(v7 + 64) = uregex_open(v8, v9, 0, 0LL, pErrorCode);
  int v55 = L"\\s*([0-9A-F]+)";
  icu::UnicodeString::UnicodeString(v57, 1LL, &v55);
  icu::UnicodeString::operator=((icu::UnicodeString *)&v58, (icu::UnicodeString *)v57);
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v57);
  int v11 = 0LL;
  if ((BYTE8(v58) & 0x11) == 0)
  {
    if ((BYTE8(v58) & 2) != 0) {
      int v11 = (const UChar *)((unint64_t)&v58 | 0xA);
    }
    else {
      int v11 = (const UChar *)*((void *)&v59 + 1);
    }
  }

  if ((SWORD4(v58) & 0x8000u) == 0) {
    int32_t v12 = WORD4(v58) >> 5;
  }
  else {
    int32_t v12 = HIDWORD(v58);
  }
  *(void *)(v7 + 72) = uregex_open(v11, v12, 0, 0LL, pErrorCode);
  uint64_t v13 = *(UChar **)(v7 + 8);
  uregex_setText(*(URegularExpression **)(v7 + 64), v13, pDestLength, pErrorCode);
  if (!uregex_findNext(*(URegularExpression **)(v7 + 64), pErrorCode))
  {
LABEL_31:
    icu::UVector::sort(**(void **)(v7 + 56), (uint64_t)sub_1809CDD08, (int *)pErrorCode);
    __int128 v33 = icu::UMemory::operator new(v32, (icu::UMemory *)0x40, v31);
    if (v33)
    {
      uint64_t *v33 = (uint64_t)off_18971B688;
      *((_WORD *)v33 + 4) = 2;
    }

    *(void *)(v7 + 48) = v33;
    int v34 = *(_DWORD *)(**(void **)(v7 + 56) + 8LL);
    if (v34 < 1)
    {
LABEL_56:
      if ((int)icu::UnicodeSet::getRangeCount(*(icu::UnicodeSet **)(v7 + 24)) >= 1)
      {
        int v48 = 0;
        do
        {
          signed int RangeStart = icu::UnicodeSet::getRangeStart(*(icu::UnicodeSet **)(v7 + 24), v48);
          if (RangeStart <= (int)icu::UnicodeSet::getRangeEnd(*(icu::UnicodeSet **)(v7 + 24), v48))
          {
            do
            {
              int v50 = (_DWORD *)uhash_iget(*(void *)(v7 + 16), RangeStart);
              unsigned int v51 = *(unsigned __int16 *)(*(void *)v50 + 8LL);
              if ((v51 & 0x8000) != 0)
              {
                int v52 = *(_DWORD *)(*(void *)v50 + 12LL);
                if (v52 >= 257)
                {
LABEL_66:
                  uint64_t v30 = 1LL;
                  goto LABEL_69;
                }
              }

              else
              {
                int v52 = v51 >> 5;
                if (v51 >> 5 > 0x100) {
                  goto LABEL_66;
                }
              }

              int v53 = v50[2];
              icu::UVector::addElement(*(icu::UVector **)(v7 + 32), ((v52 << 24) - 0x1000000) | RangeStart, pErrorCode);
              icu::UVector::addElement(*(icu::UVector **)(v7 + 40), v53, pErrorCode);
            }

            while (RangeStart++ < (int)icu::UnicodeSet::getRangeEnd(*(icu::UnicodeSet **)(v7 + 24), v48));
          }

          ++v48;
        }

        while (v48 < (int)icu::UnicodeSet::getRangeCount(*(icu::UnicodeSet **)(v7 + 24)));
      }

      sub_1809CE6DC(v7, (int *)pErrorCode);
      return (UChar *)icu::UnicodeString::~UnicodeString((void *)v30, (icu::UnicodeString *)&v58);
    }

    unsigned int v35 = 0;
    while (1)
    {
      __int128 v36 = (_DWORD *)icu::UVector::elementAt(**(icu::UVector ***)(v7 + 56), v35);
      uint64_t v37 = *(void *)v36;
      unsigned int v38 = *(unsigned __int16 *)(*(void *)v36 + 8LL);
      if ((v38 & 0x8000) != 0) {
        unsigned int v39 = *(_DWORD *)(v37 + 12);
      }
      else {
        unsigned int v39 = v38 >> 5;
      }
      uint64_t v40 = *(void *)(v7 + 48);
      else {
        int v41 = *(unsigned __int16 *)(v40 + 8) >> 5;
      }
      if (v39 != 1)
      {
        _OWORD v36[2] = v41;
        unsigned int v43 = *(unsigned __int16 *)(v37 + 8);
        int v44 = (__int16)v43;
        unsigned int v45 = v43 >> 5;
        if (v44 >= 0) {
          uint64_t v46 = v45;
        }
        else {
          uint64_t v46 = *(unsigned int *)(v37 + 12);
        }
        icu::UnicodeString::doAppend(v40, (const icu::UnicodeString *)v37, 0, v46);
        goto LABEL_55;
      }

      if ((v38 & 0x8000) != 0)
      {
        if (*(_DWORD *)(v37 + 12))
        {
LABEL_44:
          if ((v38 & 2) != 0) {
            uint64_t v42 = (unsigned __int16 *)(v37 + 10);
          }
          else {
            uint64_t v42 = *(unsigned __int16 **)(v37 + 24);
          }
          int v47 = *v42;
          goto LABEL_54;
        }
      }

      else if (v38 >> 5)
      {
        goto LABEL_44;
      }

      int v47 = 0xFFFF;
LABEL_54:
      _OWORD v36[2] = v47;
LABEL_55:
      if (v34 == ++v35) {
        goto LABEL_56;
      }
    }
  }

  while (1)
  {
    ++*(_DWORD *)(v7 + 80);
    if ((uregex_start(*(URegularExpression **)(v7 + 64), 7, pErrorCode) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    if ((uregex_start(*(URegularExpression **)(v7 + 64), 8, pErrorCode) & 0x80000000) == 0)
    {
      uint64_t v30 = 9LL;
      goto LABEL_69;
    }

    uint64_t v14 = *(void *)(v7 + 8);
    int32_t v15 = uregex_start(*(URegularExpression **)(v7 + 64), 1, pErrorCode);
    int32_t v16 = uregex_end(*(URegularExpression **)(v7 + 64), 1, pErrorCode);
    unsigned int v17 = sub_1809CF8C0(v14, v15, v16, (int *)pErrorCode);
    int32_t v18 = uregex_start(*(URegularExpression **)(v7 + 64), 2, pErrorCode);
    int32_t v19 = uregex_end(*(URegularExpression **)(v7 + 64), 2, pErrorCode);
    uregex_setText( *(URegularExpression **)(v7 + 72),  (const UChar *)(*(void *)(v7 + 8) + 2LL * v18),  v19 - v18,  pErrorCode);
    __int128 v22 = icu::UMemory::operator new(v21, (icu::UMemory *)0x40, v20);
    if (!v22) {
      break;
    }
    uint64_t v23 = (uint64_t)v22;
    *__int128 v22 = (uint64_t)off_18971B688;
    *((_WORD *)v22 + 4) = 2;
    if (uregex_findNext(*(URegularExpression **)(v7 + 72), pErrorCode))
    {
      uint64_t v24 = v18;
      do
      {
        uint64_t v25 = *(void *)(v7 + 8) + 2 * v24;
        int32_t v26 = uregex_start(*(URegularExpression **)(v7 + 72), 1, pErrorCode);
        int32_t v27 = uregex_end(*(URegularExpression **)(v7 + 72), 1, pErrorCode);
        unsigned int v28 = sub_1809CF8C0(v25, v26, v27, (int *)pErrorCode);
        icu::UnicodeString::append(v23, v28);
      }

      while (uregex_findNext(*(URegularExpression **)(v7 + 72), pErrorCode));
    }

    uint64_t v29 = sub_1809CDDC0(*(void *)(v7 + 56), v23, pErrorCode);
    uhash_iput(*(void *)(v7 + 16), v17, v29, (int *)pErrorCode);
    uint64_t v30 = *(unsigned int *)pErrorCode;
    icu::UnicodeSet::add(*(icu::UnicodeSet **)(v7 + 24), v17);
LABEL_30:
    if (!uregex_findNext(*(URegularExpression **)(v7 + 64), pErrorCode)) {
      goto LABEL_31;
    }
  }

  uint64_t v30 = 7LL;
LABEL_69:
  *UErrorCode pErrorCode = v30;
  return (UChar *)icu::UnicodeString::~UnicodeString((void *)v30, (icu::UnicodeString *)&v58);
}

uint64_t sub_1809CE6DC(uint64_t a1, int *a2)
{
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 32) + 8LL);
  uint64_t result = (uint64_t)sub_1809CFD3C(*(void *)(*(void *)a1 + 16LL), 4 * (int)v4, a2);
  if (*a2 <= 0)
  {
    uint64_t v6 = result;
    if ((int)v4 >= 1)
    {
      for (uint64_t i = 0LL; i != v4; ++i)
        *(_DWORD *)(v6 + 4 * i) = icu::UVector::elementAti(*(icu::UVector **)(a1 + 32), i);
    }

    uint64_t v8 = *(uint64_t **)(*(void *)a1 + 16LL);
    uint64_t v9 = *v8;
    *(_DWORD *)(v9 + 12) = v6 - *v8;
    *(_DWORD *)(v9 + 16) = v4;
    _OWORD v8[4] = v6;
    uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 40) + 8LL);
    uint64_t result = (uint64_t)sub_1809CFD3C((uint64_t)v8, 2 * (int)v4, a2);
    if (*a2 <= 0)
    {
      uint64_t v11 = result;
      if ((int)v10 >= 1)
      {
        for (uint64_t j = 0LL; j != v10; ++j)
          *(_WORD *)(v11 + 2 * j) = icu::UVector::elementAti(*(icu::UVector **)(a1 + 40), j);
      }

      uint64_t v13 = *(uint64_t **)(*(void *)a1 + 16LL);
      uint64_t v14 = *v13;
      *(_DWORD *)(v14 + 20) = v11 - *v13;
      *(_DWORD *)(v14 + 24) = v10;
      _OWORD v13[5] = v11;
      uint64_t v15 = *(void *)(a1 + 48);
      unsigned int v16 = *(unsigned __int16 *)(v15 + 8);
      if ((v16 & 0x8000) != 0) {
        unsigned int v17 = *(_DWORD *)(v15 + 12);
      }
      else {
        unsigned int v17 = v16 >> 5;
      }
      uint64_t result = (uint64_t)sub_1809CFD3C((uint64_t)v13, 2 * v17 + 2, a2);
      if (*a2 <= 0)
      {
        int32_t v18 = (UChar *)result;
        uint64_t v19 = *(void *)(a1 + 48);
        __int128 v22 = v18;
        uint64_t result = icu::UnicodeString::extract(v19, &v22, v17 + 1, a2);
        unint64_t v20 = *(uint64_t **)(*(void *)a1 + 16LL);
        uint64_t v21 = *v20;
        *(_DWORD *)(v21 + 28) = (_DWORD)v18 - *v20;
        *(_DWORD *)(v21 + 32) = v17;
        v20[6] = (uint64_t)v18;
      }
    }
  }

  return result;
}

void sub_1809CE858(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
    icu::UMemory::operator delete(a1);
  }

void *sub_1809CE894()
{
  return &unk_18C535D60;
}

icu::UnicodeSet *sub_1809CE8A0(icu::UnicodeSet *result, _DWORD *a2)
{
  *((_DWORD *)result + 3) = 0xFFFF;
  *((void *)result + 3) = 0LL;
  *((void *)result + 4) = 0LL;
  *((void *)result + 2) = 0LL;
  *((_DWORD *)result + 10) = 805306368;
  uint64_t v2 = (uint64_t *)*a2;
  if ((int)v2 <= 0)
  {
    uint64_t v4 = result;
    uint64_t v5 = (icu::UnicodeSet *)icu::UMemory::operator new(v2, (icu::UMemory *)0xC8, (unint64_t)a2);
    uint64_t v6 = v5;
    if (v5) {
      icu::UnicodeSet::UnicodeSet(v5, 0, 0x10FFFFu);
    }
    *((void *)v4 + 3) = v6;
    uint64_t result = (icu::UnicodeSet *)uprv_strdup("");
    *((void *)v4 + 4) = result;
    if (*((void *)v4 + 3) && result) {
      return icu::UnicodeSet::freeze(v6);
    }
    else {
      *a2 = 7;
    }
  }

  return result;
}

uint64_t sub_1809CE948(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(a1 + 8) = 944111087;
  *(void *)a1 = off_18972CED0;
  sub_1809CE8A0((icu::UnicodeSet *)a1, a3);
  *(void *)(a1 + 16) = a2;
  return a1;
}

uint64_t sub_1809CE990(UErrorCode *a1)
{
  unsigned int v3 = atomic_load(&dword_18C535D70);
  if (v3 != 2 && icu::umtx_initImplPreInit(&dword_18C535D70))
  {
    uint64_t v4 = udata_openChoice( 0LL,  "cfu",  "confusables",  (unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1809D01C8,  0LL,  a1);
    uint64_t v6 = (uint64_t *)*(unsigned int *)a1;
    if ((int)v6 <= 0)
    {
      uint64_t v7 = (uint64_t)v4;
      uint64_t v8 = icu::UMemory::operator new(v6, (icu::UMemory *)0x38, v5);
      if (v8)
      {
        uint64_t v9 = sub_1809CFA84((uint64_t)v8, v7, (int *)a1);
        qword_18C535D68 = v9;
        if (*(int *)a1 < 1)
        {
          sub_1809B36C0(4u, (uint64_t)sub_1809D023C);
          goto LABEL_15;
        }

        uint64_t v10 = (void *)sub_1809CFCF4(v9);
        icu::UMemory::operator delete(v10);
      }

      else
      {
        qword_18C535D68 = 0LL;
        if (*(int *)a1 < 1)
        {
          *a1 = U_MEMORY_ALLOCATION_ERROR;
          goto LABEL_15;
        }
      }

      qword_18C535D68 = 0LL;
    }

uint64_t sub_1809CEAEC(uint64_t a1, UErrorCode *a2)
{
  *(_DWORD *)(a1 + 8) = 944111087;
  *(void *)a1 = off_18972CED0;
  sub_1809CE8A0((icu::UnicodeSet *)a1, a2);
  *(void *)(a1 + 16) = sub_1809CE990(a2);
  return a1;
}

uint64_t sub_1809CEB38(uint64_t a1, unint64_t a2, int *a3)
{
  *(void *)a1 = off_18972CED0;
  *(void *)(a1 + 8) = 0xFFFF3845FDEFLL;
  *(void *)(a1 + 16) = 0LL;
  uint64_t v4 = (uint64_t *)(a1 + 16);
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  if (*a3 <= 0)
  {
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    uint64_t v7 = *(void *)(a2 + 16);
    if (v7)
    {
      uint64_t v8 = (unsigned int *)(v7 + 28);
      do
        unsigned int v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      *uint64_t v4 = v7;
    }

    *(void *)(a1 + 24) = icu::UnicodeSet::clone(*(icu::UnicodeSet **)(a2 + 24), a2, v4);
    uint64_t v10 = uprv_strdup(*(const char **)(a2 + 32));
    *(void *)(a1 + 32) = v10;
    if (!*(void *)(a1 + 24) || !v10) {
      *a3 = 7;
    }
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  }

  return a1;
}

void sub_1809CEBF8(uint64_t a1)
{
  uint64_t v2 = off_18972CED0;
  *(void *)a1 = off_18972CED0;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    sub_1809CEC4C(v3);
  }
  uint64_t v4 = *(icu::UnicodeSet **)(a1 + 24);
  if (v4)
  {
    unint64_t v5 = icu::UnicodeSet::~UnicodeSet(v2, v4);
    icu::UMemory::operator delete(v5);
  }

  uprv_free(*(void **)(a1 + 32));
  *(_DWORD *)(a1 + 8) = 0;
  icu::UObject::~UObject((icu::UObject *)a1);
}

void sub_1809CEC4C(uint64_t a1)
{
  uint64_t v1 = (unsigned int *)(a1 + 28);
  do
    unsigned int v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1)
  {
    if (v2 == 1)
    {
      uint64_t v3 = (void *)sub_1809CFCF4(a1);
      icu::UMemory::operator delete(v3);
    }
  }

void sub_1809CEC8C(uint64_t a1)
{
}

uint64_t sub_1809CECA0(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 0LL;
  }
  uint64_t v2 = a1;
  if (!a1)
  {
    int v4 = 1;
LABEL_10:
    uint64_t v2 = 0LL;
    *a2 = v4;
    return v2;
  }

  if (*(_DWORD *)(a1 + 8) != 944111087)
  {
    int v4 = 3;
    goto LABEL_10;
  }

  uint64_t v3 = *(uint64_t **)(a1 + 16);
  return v2;
}

uint64_t sub_1809CED14(uint64_t *a1, int *a2)
{
  if (*a2 <= 0)
  {
    uint64_t v3 = *a1;
    if (*a1)
    {
      if (*(_DWORD *)v3 == 944111087
        && *(_BYTE *)(v3 + 4) == 2
        && !*(_BYTE *)(v3 + 5)
        && !*(_BYTE *)(v3 + 6)
        && !*(_BYTE *)(v3 + 7))
      {
        return 1LL;
      }
    }
  }

  uint64_t result = 0LL;
  *a2 = 3;
  return result;
}

void *sub_1809CED7C(uint64_t a1, const char *a2, int *a3)
{
  uint64_t v39 = 0LL;
  memset(v38, 0, sizeof(v38));
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v38);
  int v6 = 0;
  uint64_t v7 = &a2[strlen(a2)];
  uint64_t v8 = a2;
LABEL_2:
  unsigned int v9 = strchr(v8, 44);
  int v10 = 1 - (_DWORD)v8;
  do
  {
    uint64_t v11 = v8;
    int v12 = v10;
    int v13 = *(unsigned __int8 *)v8++;
    --v10;
  }

  while (v13 == 32);
  if (v9) {
    uint64_t v14 = v9;
  }
  else {
    uint64_t v14 = (char *)v7;
  }
  unsigned int v15 = (_DWORD)v14 + v12;
  unsigned int v16 = (unsigned __int8 *)(v14 - 1);
  while (v16 > (unsigned __int8 *)v11)
  {
    int v17 = *v16--;
    --v15;
    if (v17 != 32)
    {
      int32_t v18 = uprv_strndup(v11, v15);
      sub_1809CEFFC((int)v18, v18, (icu::UVector **)v38, a3);
      uprv_free(v18);
      if (*a3 < 1) {
        uint64_t v8 = v14 + 1;
      }
      else {
        uint64_t v8 = v11;
      }
      if (*a3 <= 0)
      {
        ++v6;
        if (v8 < v7) {
          goto LABEL_2;
        }
      }

      goto LABEL_17;
    }
  }

  if (v6)
  {
LABEL_17:
    uint64_t v37 = 0LL;
    memset(v36, 0, sizeof(v36));
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v36);
    icu::UnicodeSet::applyIntPropertyValue((icu::UnicodeSet *)v36, 4106LL, 0, (UErrorCode *)a3);
    icu::UnicodeSet::addAll((icu::UVector **)v38, (const icu::UnicodeSet *)v36);
    icu::UnicodeSet::applyIntPropertyValue((icu::UnicodeSet *)v36, 4106LL, 1u, (UErrorCode *)a3);
    icu::UnicodeSet::addAll((icu::UVector **)v38, (const icu::UnicodeSet *)v36);
    uint64_t v20 = *a3;
    if ((int)v20 <= 0)
    {
      uint64_t v21 = icu::UnicodeSet::clone((icu::UnicodeSet *)v38, v19, (uint64_t *)v20);
      __int128 v22 = uprv_strdup(a2);
      if (v21 && (uint64_t v23 = v22) != 0LL)
      {
        uprv_free(*(void **)(a1 + 32));
        *(void *)(a1 + 32) = v23;
        icu::UnicodeSet::freeze(v21);
        uint64_t v25 = *(icu::UnicodeSet **)(a1 + 24);
        if (v25)
        {
          int32_t v26 = icu::UnicodeSet::~UnicodeSet(v24, v25);
          icu::UMemory::operator delete(v26);
        }

        *(void *)(a1 + 24) = v21;
        uint64_t v20 = *(_DWORD *)(a1 + 12) | 0x40u;
        *(_DWORD *)(a1 + 12) = v20;
      }

      else
      {
        uint64_t v20 = 7LL;
        *a3 = 7;
      }
    }

    icu::UnicodeSet::~UnicodeSet((void *)v20, (icu::UnicodeSet *)v36);
    return icu::UnicodeSet::~UnicodeSet((void *)v34, (icu::UnicodeSet *)v38);
  }

  uprv_free(*(void **)(a1 + 32));
  *(void *)(a1 + 32) = uprv_strdup("");
  uint64_t v29 = (icu::UnicodeSet *)icu::UMemory::operator new(v28, (icu::UMemory *)0xC8, v27);
  if (v29 && (uint64_t v30 = v29, icu::UnicodeSet::UnicodeSet(v29, 0, 0x10FFFFu), *(void *)(a1 + 32)))
  {
    icu::UnicodeSet::freeze(v30);
    __int128 v32 = *(icu::UnicodeSet **)(a1 + 24);
    if (v32)
    {
      __int128 v33 = icu::UnicodeSet::~UnicodeSet(v31, v32);
      icu::UMemory::operator delete(v33);
    }

    *(void *)(a1 + 24) = v30;
    uint64_t v34 = *(_DWORD *)(a1 + 12) & 0xFFFFFFBF;
    *(_DWORD *)(a1 + 12) = v34;
  }

  else
  {
    uint64_t v34 = 7LL;
    *a3 = 7;
  }

  return icu::UnicodeSet::~UnicodeSet((void *)v34, (icu::UnicodeSet *)v38);
}

void *sub_1809CEFFC(int a1, char *__s1, icu::UVector **a3, int *a4)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  uint64_t v14 = 0LL;
  memset(v13, 0, sizeof(v13));
  uint64_t result = (void *)uscript_getCode(__s1, (int32_t *)v13, 30, a4);
  if (*a4 <= 0)
  {
    if (*a4 == -127)
    {
      *a4 = 1;
    }

    else
    {
      LODWORD(v7) = (_DWORD)result;
      uint64_t v12 = 0LL;
      memset(v11, 0, sizeof(v11));
      icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v11);
      if ((int)v7 >= 1)
      {
        uint64_t v7 = v7;
        unsigned int v9 = (unsigned int *)v13;
        do
        {
          unsigned int v10 = *v9++;
          icu::UnicodeSet::applyIntPropertyValue((icu::UnicodeSet *)v11, 4106LL, v10, (UErrorCode *)a4);
          icu::UnicodeSet::addAll(a3, (const icu::UnicodeSet *)v11);
          --v7;
        }

        while (v7);
      }

      return icu::UnicodeSet::~UnicodeSet(v8, (icu::UnicodeSet *)v11);
    }
  }

  return result;
}

uint64_t sub_1809CF114(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_1809CF11C(unsigned int a1, icu::ScriptSet *this, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (icu::ScriptSet::test((uint64_t)this, 0x11u, (int *)a3))
    {
      icu::ScriptSet::set((uint64_t)this, 0xACu, (int *)a3);
      icu::ScriptSet::set((uint64_t)this, 0x69u, (int *)a3);
      icu::ScriptSet::set((uint64_t)this, 0x77u, (int *)a3);
    }

    if (icu::ScriptSet::test((uint64_t)this, 0, (int *)a3)
      || icu::ScriptSet::test((uint64_t)this, 1u, (int *)a3))
    {
      icu::ScriptSet::setAll((uint64_t)this);
    }
  }

void sub_1809CF27C(int a1, uint64_t a2, icu::ScriptSet *this, UErrorCode *a4)
{
}

void sub_1809CF28C(int a1, uint64_t a2, unsigned int a3, icu::ScriptSet *this, UErrorCode *a5)
{
  int v17 = 0;
  icu::ScriptSet::ScriptSet((uint64_t)v16);
  LODWORD(v10) = *(unsigned __int16 *)(a2 + 8);
  int v9 = (__int16)v10;
  LODWORD(v10) = v10 >> 5;
  if (v9 >= 0) {
    unint64_t v10 = v10;
  }
  else {
    unint64_t v10 = *(unsigned int *)(a2 + 12);
  }
  if ((int)v10 >= 1)
  {
    int v11 = 0;
    do
    {
      unsigned int v12 = icu::UnicodeString::char32At((uint64_t *)v10, (icu::UnicodeString *)a2, v11);
      sub_1809CF11C(v12, (icu::ScriptSet *)v16, a5);
      int v13 = v12 < 0x10000 ? 1 : 2;
      v11 += v13;
      unsigned int v14 = *(unsigned __int16 *)(a2 + 8);
      int v15 = (__int16)v14;
      LODWORD(v10) = v14 >> 5;
      unint64_t v10 = v15 >= 0 ? v10 : *(unsigned int *)(a2 + 12);
    }

    while (v11 < (int)v10);
  }

  icu::ScriptSet::~ScriptSet((icu::ScriptSet *)v16);
}

icu::UnicodeSet *sub_1809CF39C(int a1, uint64_t a2, icu::UnicodeSet *this)
{
  uint64_t result = icu::UnicodeSet::clear(this);
  LODWORD(v7) = *(unsigned __int16 *)(a2 + 8);
  int v6 = (__int16)v7;
  LODWORD(v7) = v7 >> 5;
  if (v6 >= 0) {
    unint64_t v7 = v7;
  }
  else {
    unint64_t v7 = *(unsigned int *)(a2 + 12);
  }
  if ((int)v7 >= 1)
  {
    int v8 = 0;
    do
    {
      unsigned int v9 = icu::UnicodeString::char32At((uint64_t *)v7, (icu::UnicodeString *)a2, v8);
      uint64_t result = (icu::UnicodeSet *)u_charType(v9);
      if ((_DWORD)result == 9)
      {
        double NumericValue = u_getNumericValue(v9);
        uint64_t result = icu::UnicodeSet::add(this, v9 - (int)NumericValue);
      }

      if (v9 < 0x10000) {
        int v11 = 1;
      }
      else {
        int v11 = 2;
      }
      v8 += v11;
      unsigned int v12 = *(unsigned __int16 *)(a2 + 8);
      int v13 = (__int16)v12;
      LODWORD(v7) = v12 >> 5;
      if (v13 >= 0) {
        unint64_t v7 = v7;
      }
      else {
        unint64_t v7 = *(unsigned int *)(a2 + 12);
      }
    }

    while (v8 < (int)v7);
  }

  return result;
}

uint64_t sub_1809CF45C(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  if (!icu::UnicodeSet::containsAll(*(icu::UnicodeSet **)(a1 + 24), (const icu::UnicodeString *)a2)) {
    return 1610612736LL;
  }
  unsigned int v5 = *(unsigned __int16 *)(a2 + 8);
  if ((v5 & 0x8000u) == 0) {
    uint64_t v6 = v5 >> 5;
  }
  else {
    uint64_t v6 = *(unsigned int *)(a2 + 12);
  }
  if ((v5 & 2) != 0) {
    unint64_t v7 = (unsigned __int16 *)(a2 + 10);
  }
  else {
    unint64_t v7 = *(unsigned __int16 **)(a2 + 24);
  }
  while (*v7 < 0x80u)
  {
    ++v7;
    if (!--v6) {
      return 0x10000000LL;
    }
  }

  memset(v14, 0, sizeof(v14));
  int v15 = 0;
  int v9 = icu::ScriptSet::ScriptSet((uint64_t)v14);
  sub_1809CF28C(v9, a2, 0xC8u, (icu::ScriptSet *)v14, a3);
  if (*(int *)a3 <= 0)
  {
    if (icu::ScriptSet::isEmpty((icu::ScriptSet *)v14))
    {
      memset(v12, 0, sizeof(v12));
      int v13 = 0;
      int v10 = icu::ScriptSet::ScriptSet((uint64_t)v12);
      sub_1809CF28C(v10, a2, 0x19u, (icu::ScriptSet *)v12, a3);
      if (*(int *)a3 <= 0)
      {
        if (icu::ScriptSet::test((uint64_t)v12, 0xACu, (int *)a3)
          || icu::ScriptSet::test((uint64_t)v12, 0x69u, (int *)a3)
          || icu::ScriptSet::test((uint64_t)v12, 0x77u, (int *)a3))
        {
          uint64_t v8 = 805306368LL;
        }

        else if (icu::ScriptSet::isEmpty((icu::ScriptSet *)v12) {
               || icu::ScriptSet::test((uint64_t)v12, 8u, (int *)a3)
        }
               || icu::ScriptSet::test((uint64_t)v12, 0xEu, (int *)a3)
               || icu::ScriptSet::test((uint64_t)v12, 6u, (int *)a3))
        {
          uint64_t v8 = 1342177280LL;
        }

        else
        {
          uint64_t v8 = 0x40000000LL;
        }
      }

      else
      {
        uint64_t v8 = 1610612736LL;
      }

      icu::ScriptSet::~ScriptSet((icu::ScriptSet *)v12);
    }

    else
    {
      uint64_t v8 = 0x20000000LL;
    }
  }

  else
  {
    uint64_t v8 = 1610612736LL;
  }

  icu::ScriptSet::~ScriptSet((icu::ScriptSet *)v14);
  return v8;
}

uint64_t sub_1809CF624(uint64_t a1, icu::UnicodeString *this)
{
  unsigned int v2 = *((unsigned __int16 *)this + 4);
  int v3 = (__int16)v2;
  LODWORD(v4) = v2 >> 5;
  if (v3 >= 0) {
    unint64_t v4 = v4;
  }
  else {
    unint64_t v4 = *((unsigned int *)this + 3);
  }
  uint64_t v7 = 0LL;
  char v8 = 0;
  while (1)
  {
    UChar32 v9 = icu::UnicodeString::char32At((uint64_t *)v4, this, v7);
    unsigned int v10 = v9;
    if ((v8 & 1) != 0 && v9 == 775) {
      break;
    }
    int CombiningClass = u_getCombiningClass(v9);
    if (CombiningClass == 230 || !CombiningClass) {
      char v8 = sub_1809CF6F4(a1, v10);
    }
    if (v10 < 0x10000) {
      int v12 = 1;
    }
    else {
      int v12 = 2;
    }
    uint64_t v7 = (v12 + v7);
    unsigned int v13 = *((unsigned __int16 *)this + 4);
    int v14 = (__int16)v13;
    LODWORD(v4) = v13 >> 5;
    if (v14 >= 0) {
      unint64_t v4 = v4;
    }
    else {
      unint64_t v4 = *((unsigned int *)this + 3);
    }
  }

  return v7;
}

uint64_t sub_1809CF6F4(uint64_t a1, UChar32 c)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  uint64_t v2 = 1LL;
  BOOL v3 = (c - 105) > 3 || c == 107;
  if (v3 && c != 305 && c != 567 && !u_hasBinaryProperty(c, UCHAR_SOFT_DOTTED))
  {
    __int128 v14 = 0u;
    uint64_t v17 = 0LL;
    __int128 v16 = 0u;
    __int128 v15 = 0u;
    unsigned int v13 = off_18971B688;
    LOWORD(v14) = 2;
    sub_1809CF838(*(void **)(a1 + 16), c, (icu::UnicodeString *)&v13);
    if ((v14 & 0x8000u) == 0LL) {
      int v6 = (unsigned __int16)v14 >> 5;
    }
    else {
      int v6 = DWORD1(v14);
    }
    int v7 = icu::UnicodeString::moveIndex32((icu::UnicodeString *)&v13, v6, -1);
    UChar32 v9 = icu::UnicodeString::char32At(v8, (icu::UnicodeString *)&v13, v7);
    if (v9 == c
      || ((unint64_t v10 = (v9 - 105), v10 <= 3) ? (v11 = (_DWORD)v10 == 2) : (v11 = 1),
          v11 && v9 != 305 && v9 != 567 && !u_hasBinaryProperty(v9, UCHAR_SOFT_DOTTED)))
    {
      uint64_t v2 = 0LL;
    }

    icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)&v13);
  }

  return v2;
}

uint64_t sub_1809CF838(void *a1, signed int a2, icu::UnicodeString *this)
{
  int v3 = 0;
  int v4 = *(_DWORD *)(*a1 + 16LL);
  uint64_t v5 = a1[4];
  do
  {
    int v6 = (v4 + v3) / 2;
    int v7 = *(_DWORD *)(v5 + 4LL * v6);
    if ((v7 & 0xFFFFFF) <= a2)
    {
      if ((v7 & 0xFFFFFF) >= a2) {
        goto LABEL_8;
      }
      int v3 = (v4 + v3) / 2;
    }

    else
    {
      int v4 = (v4 + v3) / 2;
    }
  }

  while (v4 - v3 > 1);
  int v7 = *(_DWORD *)(v5 + 4LL * v3);
  int v6 = v3;
LABEL_8:
  if ((v7 & 0xFFFFFF) == a2) {
    return sub_1809CFE5C(a1, v6, (uint64_t)this);
  }
  icu::UnicodeString::append((uint64_t)this, a2);
  return 1LL;
}

uint64_t sub_1809CF8C0(uint64_t result, int a2, int a3, int *a4)
{
  if (*a4 > 0 || a2 >= a3) {
    return 0LL;
  }
  uint64_t v5 = result;
  LODWORD(result) = 0;
  int v6 = (unsigned __int16 *)(v5 + 2LL * a2);
  uint64_t v7 = a3 - (uint64_t)a2;
  do
  {
    unsigned int v9 = *v6++;
    unsigned int v8 = v9;
    if (v9 <= 0x39) {
      int v10 = -48;
    }
    else {
      int v10 = -55;
    }
    int v11 = v10 + v8;
    int v12 = v8 - 87;
    if (v11 <= 15) {
      int v12 = v11;
    }
    uint64_t result = (v12 + 16 * result);
    --v7;
  }

  while (v7);
  if (result >= 0x110000)
  {
    uint64_t result = 0LL;
    *a4 = 9;
  }

  return result;
}

icu::UnicodeSet *sub_1809CF934(_DWORD *a1)
{
  a1[3] = 0;
  uint64_t result = icu::UnicodeSet::clear((icu::UnicodeSet *)(a1 + 4));
  a1[54] = -1;
  return result;
}

uint64_t sub_1809CF964(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 657779934;
  *(void *)a1 = off_18972CEF8;
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 16));
  *(_DWORD *)(a1 + 12) = 0;
  icu::UnicodeSet::clear(v2);
  *(_DWORD *)(a1 + 216) = -1;
  return a1;
}

uint64_t sub_1809CF9B0(uint64_t result, int *a2)
{
  if (*a2 > 0) {
    return 0LL;
  }
  if (result)
  {
    if (*(_DWORD *)(result + 8) == 657779934) {
      return result;
    }
    int v2 = 3;
  }

  else
  {
    int v2 = 1;
  }

  uint64_t result = 0LL;
  *a2 = v2;
  return result;
}

uint64_t sub_1809CF9F4(uint64_t a1, int a2)
{
  if ((a2 & 0x40000000) == 0) {
    return *(unsigned int *)(a1 + 12);
  }
  unsigned int v2 = *(_DWORD *)(a1 + 216);
  if (v2 == -1) {
    return *(unsigned int *)(a1 + 12);
  }
  else {
    return *(_DWORD *)(a1 + 12) | v2;
  }
}

void sub_1809CFA18(_DWORD *a1)
{
  *(void *)a1 = off_18972CEF8;
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 4));
  a1[2] = 0;
  icu::UObject::~UObject((icu::UObject *)a1);
}

void sub_1809CFA4C(_DWORD *a1)
{
  *(void *)a1 = off_18972CEF8;
  icu::UnicodeSet::~UnicodeSet(off_18972CEF8, (icu::UnicodeSet *)(a1 + 4));
  a1[2] = 0;
  icu::UObject::~UObject((icu::UObject *)a1);
  icu::UMemory::operator delete(v2);
}

uint64_t sub_1809CFA84(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = 0LL;
  *(_BYTE *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0LL;
  *(_DWORD *)(a1 + 24) = 0;
  atomic_store(1u, (unsigned int *)(a1 + 28));
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  int v4 = (void *)(a1 + 32);
  *(void *)(a1 + 48) = 0LL;
  if (*a3 <= 0)
  {
    *(void *)(a1 + 16) = a2;
    *(void *)a1 = udata_getMemory(a2);
    sub_1809CED14((uint64_t *)a1, a3);
    v4[1] = 0LL;
    v4[2] = 0LL;
    *int v4 = 0LL;
    if (*a3 <= 0)
    {
      uint64_t v6 = *(void *)a1;
      uint64_t v7 = *(int *)(*(void *)a1 + 12LL);
      if ((_DWORD)v7) {
        *int v4 = v6 + v7;
      }
      uint64_t v8 = *(int *)(v6 + 20);
      if ((_DWORD)v8) {
        *(void *)(a1 + 40) = v6 + v8;
      }
      uint64_t v9 = *(int *)(v6 + 28);
      if ((_DWORD)v9) {
        *(void *)(a1 + 48) = v6 + v9;
      }
    }
  }

  return a1;
}

uint64_t sub_1809CFB48(uint64_t a1, uint64_t a2, unsigned int a3, int *a4)
{
  *(void *)a1 = 0LL;
  *(_BYTE *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0LL;
  *(_DWORD *)(a1 + 24) = 0;
  atomic_store(1u, (unsigned int *)(a1 + 28));
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  uint64_t v5 = (void *)(a1 + 32);
  *(void *)(a1 + 48) = 0LL;
  if (*a4 <= 0)
  {
    if (a3 <= 0x5F) {
      goto LABEL_5;
    }
    if (!a2)
    {
      int v7 = 1;
      goto LABEL_7;
    }

    *(void *)a1 = a2;
    if (*(_DWORD *)(a2 + 8) > (signed int)a3)
    {
LABEL_5:
      int v7 = 3;
LABEL_7:
      *a4 = v7;
      return a1;
    }

    sub_1809CED14((uint64_t *)a1, a4);
    v5[1] = 0LL;
    void v5[2] = 0LL;
    *uint64_t v5 = 0LL;
    if (*a4 <= 0)
    {
      uint64_t v9 = *(void *)a1;
      uint64_t v10 = *(int *)(*(void *)a1 + 12LL);
      if ((_DWORD)v10) {
        *uint64_t v5 = v9 + v10;
      }
      uint64_t v11 = *(int *)(v9 + 20);
      if ((_DWORD)v11) {
        *(void *)(a1 + 40) = v9 + v11;
      }
      uint64_t v12 = *(int *)(v9 + 28);
      if ((_DWORD)v12) {
        *(void *)(a1 + 48) = v9 + v12;
      }
    }
  }

  return a1;
}

uint64_t sub_1809CFC30(uint64_t a1, int *a2)
{
  *(void *)a1 = 0LL;
  *(_BYTE *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0LL;
  *(_DWORD *)(a1 + 24) = 0;
  atomic_store(1u, (unsigned int *)(a1 + 28));
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  int v3 = (void *)(a1 + 32);
  *(void *)(a1 + 48) = 0LL;
  if (*a2 <= 0)
  {
    *(_BYTE *)(a1 + 8) = 1;
    uint64_t v5 = (char *)uprv_malloc(0x60uLL);
    *(void *)a1 = v5;
    *(_DWORD *)(a1 + 24) = 96;
    if (v5)
    {
      *((void *)v5 + 11) = 0LL;
      *(_OWORD *)(v5 + 72) = 0u;
      *(_OWORD *)(v5 + 56) = 0u;
      *(_OWORD *)(v5 + 40) = 0u;
      *(_OWORD *)(v5 + 24) = 0u;
      *(_OWORD *)(v5 + 8) = 0u;
      *(_DWORD *)uint64_t v5 = 944111087;
      *((_DWORD *)v5 + 1) = 2;
      v3[1] = 0LL;
      v3[2] = 0LL;
      *int v3 = 0LL;
    }

    else
    {
      *a2 = 7;
    }
  }

  return a1;
}

uint64_t sub_1809CFCF4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8)) {
    uprv_free(*(void **)a1);
  }
  *(void *)a1 = 0LL;
  unsigned int v2 = *(_OWORD **)(a1 + 16);
  if (v2) {
    udata_close(v2);
  }
  *(void *)(a1 + 16) = 0LL;
  return a1;
}

char *sub_1809CFD3C(uint64_t a1, int a2, int *a3)
{
  if (*a3 > 0) {
    return 0LL;
  }
  if (!*(_BYTE *)(a1 + 8)) {
    abort();
  }
  signed int v6 = (a2 + 15) & 0xFFFFFFF0;
  uint64_t v7 = *(unsigned int *)(a1 + 24);
  size_t v8 = (v7 + v6);
  *(_DWORD *)(a1 + 24) = v8;
  uint64_t v9 = uprv_realloc(*(void **)a1, v8);
  *(void *)a1 = v9;
  void v9[2] = *(_DWORD *)(a1 + 24);
  bzero((char *)v9 + v7, v6);
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 48) = 0LL;
  uint64_t v10 = *(int **)a1;
  if (*a3 <= 0)
  {
    uint64_t v11 = v10[3];
    if ((_DWORD)v11) {
      *(void *)(a1 + 32) = (char *)v10 + v11;
    }
    uint64_t v12 = v10[5];
    if ((_DWORD)v12) {
      *(void *)(a1 + 40) = (char *)v10 + v12;
    }
    uint64_t v13 = v10[7];
    if ((_DWORD)v13) {
      *(void *)(a1 + 48) = (char *)v10 + v13;
    }
  }

  return (char *)v10 + v7;
}

size_t sub_1809CFE08(const void **a1, void *__dst, int a3, _DWORD *a4)
{
  size_t v4 = *((int *)*a1 + 2);
  else {
    *a4 = 15;
  }
  return v4;
}

uint64_t sub_1809CFE50(uint64_t a1)
{
  return *(unsigned int *)(*(void *)a1 + 8LL);
}

uint64_t sub_1809CFE5C(void *a1, int a2, uint64_t a3)
{
  int v3 = HIBYTE(*(_DWORD *)(a1[4] + 4LL * a2));
  uint64_t v4 = (v3 + 1);
  if (v3)
  {
    icu::UnicodeString::doAppend(a3, a1[6] + 2LL * *(unsigned __int16 *)(a1[5] + 2LL * a2), 0, (v3 + 1));
  }

  else
  {
    __int16 v6 = *(_WORD *)(a1[5] + 2LL * a2);
    icu::UnicodeString::doAppend(a3, (uint64_t)&v6, 0, 1LL);
  }

  return v4;
}

uint64_t uspoof_swap( uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a5) {
    return 0LL;
  }
  if (*a5 > 0) {
    return 0LL;
  }
  if (!a1 || !a2 || (int v12 = a3, (int)a3 < -1) || (int)a3 >= 1 && !a4)
  {
    uint64_t result = 0LL;
    int v13 = 1;
LABEL_20:
    *a5 = v13;
    return result;
  }

  uint64_t v14 = *(unsigned __int8 *)(a2 + 12);
  if (__PAIR64__(*(unsigned __int8 *)(a2 + 13), v14) != 0x6600000043LL
    || *(_BYTE *)(a2 + 14) != 117
    || *(_BYTE *)(a2 + 15) != 32
    || *(_BYTE *)(a2 + 16) != 2
    || *(_BYTE *)(a2 + 17)
    || *(_BYTE *)(a2 + 18)
    || *(_BYTE *)(a2 + 19))
  {
    __int128 v15 = "uspoof_swap(): data format %02x.%02x.%02x.%02x (format version %02x %02x %02x %02x) is not recognized\n";
    uint64_t v33 = v14;
LABEL_19:
    udata_printError(a1, (uint64_t)v15, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, v33);
    uint64_t result = 0LL;
    int v13 = 16;
    goto LABEL_20;
  }

  int v16 = udata_swapDataHeader(a1, (unsigned __int16 *)a2, a3, a4, a5, a6, a7, a8);
  uint64_t v17 = (char *)(a2 + v16);
  if ((*(unsigned int (**)(void))(a1 + 16))(*(unsigned int *)v17) != 944111087
    || (*(unsigned int (**)(void))(a1 + 16))(*((unsigned int *)v17 + 2)) <= 0x5F)
  {
    __int128 v15 = "uspoof_swap(): Spoof Data header is invalid.\n";
    goto LABEL_19;
  }

  uint64_t v18 = (*(uint64_t (**)(void))(a1 + 16))(*((unsigned int *)v17 + 2));
  unsigned int v34 = v18 + v16;
  if ((v12 & 0x80000000) == 0)
  {
    if ((int)v34 > v12)
    {
      udata_printError( a1,  (uint64_t)"uspoof_swap(): too few bytes (%d after ICU Data header) for spoof data.\n",  v19,  v20,  v21,  v22,  v23,  v24,  v18);
      uint64_t result = 0LL;
      int v13 = 8;
      goto LABEL_20;
    }

    uint64_t v25 = (char *)a4 + v16;
    int v26 = (*(uint64_t (**)(void))(a1 + 16))(*((unsigned int *)v17 + 3));
    int v27 = (*(uint64_t (**)(void))(a1 + 16))(*((unsigned int *)v17 + 4));
    (*(void (**)(uint64_t, char *, void, char *, int *))(a1 + 56))( a1,  &v17[v26],  (4 * v27),  &v25[v26],  a5);
    int v28 = (*(uint64_t (**)(void))(a1 + 16))(*((unsigned int *)v17 + 5));
    int v29 = (*(uint64_t (**)(void))(a1 + 16))(*((unsigned int *)v17 + 6));
    (*(void (**)(uint64_t, char *, void, char *, int *))(a1 + 48))( a1,  &v17[v28],  (2 * v29),  &v25[v28],  a5);
    int v30 = (*(uint64_t (**)(void))(a1 + 16))(*((unsigned int *)v17 + 7));
    int v31 = (*(uint64_t (**)(void))(a1 + 16))(*((unsigned int *)v17 + 8));
    (*(void (**)(uint64_t, char *, void, char *, int *))(a1 + 48))( a1,  &v17[v30],  (2 * v31),  &v25[v30],  a5);
    uint64_t v32 = (*(uint64_t (**)(void))(a1 + 16))(*(unsigned int *)v17);
    (*(void (**)(char *, uint64_t))(a1 + 40))(v25, v32);
    (*(void (**)(uint64_t, unsigned int *, uint64_t, char *, int *))(a1 + 56))( a1,  (unsigned int *)v17 + 2,  88LL,  v25 + 8,  a5);
  }

  return v34;
}

uint64_t sub_1809D01C8(_DWORD *a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4)
{
  if (*a4 < 0x14u
    || *((_BYTE *)a4 + 4)
    || *((_BYTE *)a4 + 5)
    || *((_BYTE *)a4 + 8) != 67
    || *((_BYTE *)a4 + 9) != 102
    || *((_BYTE *)a4 + 10) != 117
    || *((_BYTE *)a4 + 11) != 32
    || *((_BYTE *)a4 + 12) != 2)
  {
    return 0LL;
  }

  if (a1) {
    *a1 = *((_DWORD *)a4 + 4);
  }
  return 1LL;
}

uint64_t sub_1809D023C()
{
  if (qword_18C535D68)
  {
    sub_1809CEC4C(qword_18C535D68);
    qword_18C535D68 = 0LL;
    atomic_store(0, &dword_18C535D70);
  }

  return 1LL;
}

void *icu::UTF16CollationIterator::UTF16CollationIterator(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result = (void *)icu::CollationIterator::CollationIterator(a1, (uint64_t)a2);
  *uint64_t result = off_18972CFB0;
  result[49] = a3;
  result[50] = a3 + a2[50] - a2[49];
  uint64_t v6 = a2[51];
  if (v6) {
    uint64_t v7 = a3 + v6 - a2[49];
  }
  else {
    uint64_t v7 = 0LL;
  }
  result[51] = v7;
  return result;
}

{
  void *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t result = (void *)icu::CollationIterator::CollationIterator(a1, (uint64_t)a2);
  *uint64_t result = off_18972CFB0;
  result[49] = a3;
  result[50] = a3 + a2[50] - a2[49];
  uint64_t v6 = a2[51];
  if (v6) {
    uint64_t v7 = a3 + v6 - a2[49];
  }
  else {
    uint64_t v7 = 0LL;
  }
  result[51] = v7;
  return result;
}

void icu::UTF16CollationIterator::~UTF16CollationIterator(icu::UTF16CollationIterator *this)
{
}

uint64_t icu::UTF16CollationIterator::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result = icu::CollationIterator::operator==(a1, a2);
  if ((_DWORD)result) {
    return *(void *)(a1 + 400) - *(void *)(a1 + 392) == *(void *)(a2 + 400) - *(void *)(a2 + 392);
  }
  return result;
}

uint64_t icu::UTF16CollationIterator::resetToOffset(icu::UTF16CollationIterator *this, int a2)
{
  uint64_t result = icu::CollationIterator::reset((uint64_t)this);
  *((void *)this + 50) = *((void *)this + 49) + 2LL * a2;
  return result;
}

uint64_t icu::UTF16CollationIterator::getOffset(icu::UTF16CollationIterator *this)
{
  return (*((void *)this + 50) - *((void *)this + 49)) >> 1;
}

uint64_t icu::UTF16CollationIterator::handleNextCE32( icu::UTF16CollationIterator *this, int *a2, UErrorCode *a3)
{
  int v3 = (unsigned __int16 *)*((void *)this + 50);
  if (v3 == *((unsigned __int16 **)this + 51))
  {
    *a2 = -1;
    return 192LL;
  }

  else
  {
    unsigned int v4 = *v3;
    *((void *)this + 50) = v3 + 1;
    *a2 = (unsigned __int16)v4;
    return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16LL)
                           + 4LL
                           * ((v4 & 0x1F)
                            + 4 * *(unsigned __int16 *)(**((void **)this + 1) + (((unint64_t)v4 >> 4) & 0xFFE))));
  }

uint64_t icu::UTF16CollationIterator::handleGetTrailSurrogate(icu::UTF16CollationIterator *this)
{
  uint64_t v1 = (unsigned __int16 *)*((void *)this + 50);
  uint64_t result = *v1;
  if ((result & 0xFC00) == 0xDC00) {
    *((void *)this + 50) = v1 + 1;
  }
  return result;
}

uint64_t icu::UTF16CollationIterator::foundNULTerminator(icu::UTF16CollationIterator *this)
{
  if (*((void *)this + 51)) {
    return 0LL;
  }
  uint64_t v2 = *((void *)this + 50) - 2LL;
  *((void *)this + 50) = v2;
  *((void *)this + 51) = v2;
  return 1LL;
}

uint64_t icu::UTF16CollationIterator::nextCodePoint(icu::UTF16CollationIterator *this, UErrorCode *a2)
{
  uint64_t v2 = (unsigned __int16 *)*((void *)this + 50);
  int v3 = (unsigned __int16 *)*((void *)this + 51);
  if (v2 == v3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = *v2;
  if (v3) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = (_DWORD)result == 0;
  }
  if (v6)
  {
    *((void *)this + 51) = v2;
    return 0xFFFFFFFFLL;
  }

  uint64_t v7 = v2 + 1;
  *((void *)this + 50) = v2 + 1;
  if ((result & 0xFC00) == 0xD800 && v7 != v3)
  {
    int v9 = *v7;
    if ((v9 & 0xFC00) == 0xDC00)
    {
      *((void *)this + 50) = v2 + 2;
      return (v9 + ((_DWORD)result << 10) - 56613888);
    }
  }

  return result;
}

uint64_t icu::UTF16CollationIterator::previousCodePoint(icu::UTF16CollationIterator *this, UErrorCode *a2)
{
  uint64_t v3 = *((void *)this + 49);
  uint64_t v2 = *((void *)this + 50);
  if (v2 == v3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = *(unsigned __int16 *)(v2 - 2);
  *((void *)this + 50) = v2 - 2;
  if (v2 - 2 != v3 && (result & 0xFC00) == 56320)
  {
    int v9 = *(unsigned __int16 *)(v2 - 4);
    uint64_t v7 = v2 - 4;
    int v8 = v9;
    if ((v9 & 0xFC00) == 0xD800)
    {
      *((void *)this + 50) = v7;
      return (result + (v8 << 10) - 56613888);
    }
  }

  return result;
}

uint64_t icu::UTF16CollationIterator::forwardNumCodePoints(uint64_t this, int a2, UErrorCode *a3)
{
  if (a2 >= 1)
  {
    unsigned int v4 = *(__int16 **)(this + 400);
    uint64_t v3 = *(__int16 **)(this + 408);
    unsigned int v5 = a2 + 1;
    while (v4 != v3)
    {
      __int16 v6 = *v4;
      if (!v3 && !*v4)
      {
        *(void *)(this + 408) = v4;
        return this;
      }

      uint64_t v7 = v4 + 1;
      *(void *)(this + 400) = v4 + 1;
      BOOL v8 = (v6 & 0xFC00) != 0xD800 || v7 == v3;
      if (!v8 && (*v7 & 0xFC00) == 0xDC00)
      {
        uint64_t v7 = v4 + 2;
        *(void *)(this + 400) = v4 + 2;
      }

      --v5;
      unsigned int v4 = v7;
      if (v5 <= 1) {
        return this;
      }
    }
  }

  return this;
}

uint64_t icu::UTF16CollationIterator::backwardNumCodePoints(uint64_t this, int a2, UErrorCode *a3)
{
  if (a2 >= 1)
  {
    uint64_t v3 = *(void *)(this + 392);
    uint64_t v4 = *(void *)(this + 400);
    unsigned int v5 = a2 + 1;
    do
    {
      if (v4 == v3) {
        break;
      }
      uint64_t v6 = v4 - 2;
      __int16 v7 = *(_WORD *)(v4 - 2);
      *(void *)(this + 400) = v4 - 2;
      if (v4 - 2 != v3 && (v7 & 0xFC00) == 0xDC00)
      {
        __int16 v9 = *(_WORD *)(v4 - 4);
        uint64_t v8 = v4 - 4;
        if ((v9 & 0xFC00) == 0xD800)
        {
          *(void *)(this + 400) = v8;
          uint64_t v6 = v8;
        }
      }

      --v5;
      uint64_t v4 = v6;
    }

    while (v5 > 1);
  }

  return this;
}

uint64_t icu::FCDUTF16CollationIterator::FCDUTF16CollationIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)icu::CollationIterator::CollationIterator(a1, a2);
  v6[49] = 0LL;
  v6[50] = 0LL;
  *uint64_t v6 = off_18972D040;
  v6[51] = 0LL;
  v6[52] = a3;
  v6[53] = a3 + *(void *)(a2 + 424) - *(void *)(a2 + 416);
  uint64_t v7 = *(void *)(a2 + 432);
  uint64_t v8 = *(void *)(a2 + 440);
  uint64_t v9 = a3 + v7 - *(void *)(a2 + 416);
  if (!v7) {
    uint64_t v9 = 0LL;
  }
  v6[54] = v9;
  uint64_t v10 = a3 + v8 - *(void *)(a2 + 416);
  if (!v8) {
    uint64_t v10 = 0LL;
  }
  uint64_t v11 = *(void *)(a2 + 448);
  v6[55] = v10;
  v6[56] = v11;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v6 + 57), (UChar **)(a2 + 456));
  int v12 = *(unsigned __int8 *)(a2 + 520);
  *(_BYTE *)(a1 + 520) = v12;
  uint64_t v13 = *(void *)(a2 + 392);
  if (v12 || v13 == *(void *)(a2 + 424))
  {
    uint64_t v17 = *(void *)(a2 + 408);
    uint64_t v16 = *(void *)(a2 + 416);
    uint64_t v18 = a3 + v13 - v16;
    uint64_t v19 = a3 + *(void *)(a2 + 400) - v16;
    *(void *)(a1 + 392) = v18;
    *(void *)(a1 + 400) = v19;
    uint64_t v20 = a3 + v17 - *(void *)(a2 + 416);
    if (!v17) {
      uint64_t v20 = 0LL;
    }
  }

  else
  {
    unsigned int v14 = *(unsigned __int16 *)(a1 + 464);
    if ((v14 & 0x11) != 0)
    {
      uint64_t v15 = 0LL;
    }

    else if ((v14 & 2) != 0)
    {
      uint64_t v15 = a1 + 466;
    }

    else
    {
      uint64_t v15 = *(void *)(a1 + 480);
    }

    *(void *)(a1 + 392) = v15;
    *(void *)(a1 + 400) = v15 + *(void *)(a2 + 400) - *(void *)(a2 + 392);
    if ((v14 & 0x8000) != 0) {
      unsigned int v21 = *(_DWORD *)(a1 + 468);
    }
    else {
      unsigned int v21 = v14 >> 5;
    }
    uint64_t v20 = v15 + 2LL * (int)v21;
  }

  *(void *)(a1 + 408) = v20;
  return a1;
}

void icu::FCDUTF16CollationIterator::~FCDUTF16CollationIterator(icu::FCDUTF16CollationIterator *this)
{
  *(void *)this = off_18972D040;
  icu::UnicodeString::~UnicodeString(off_18972D040, (icu::FCDUTF16CollationIterator *)((char *)this + 456));
  icu::CollationIterator::~CollationIterator(this);
}

{
  *(void *)this = off_18972D040;
  icu::UnicodeString::~UnicodeString(off_18972D040, (icu::FCDUTF16CollationIterator *)((char *)this + 456));
  icu::CollationIterator::~CollationIterator(this);
}

{
  void *v2;
  *(void *)this = off_18972D040;
  icu::UnicodeString::~UnicodeString(off_18972D040, (icu::FCDUTF16CollationIterator *)((char *)this + 456));
  icu::CollationIterator::~CollationIterator(this);
  icu::UMemory::operator delete(v2);
}

uint64_t icu::FCDUTF16CollationIterator::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result = icu::CollationIterator::operator==(a1, a2);
  if ((_DWORD)result)
  {
    if (*(unsigned __int8 *)(a1 + 520) == *(unsigned __int8 *)(a2 + 520))
    {
      if (*(_BYTE *)(a1 + 520))
      {
LABEL_4:
        uint64_t v5 = *(void *)(a1 + 400) - *(void *)(a1 + 416);
        uint64_t v6 = *(void *)(a2 + 416);
        return v5 == *(void *)(a2 + 400) - v6;
      }

      uint64_t v7 = *(void *)(a1 + 392);
      uint64_t v8 = *(void *)(a1 + 424);
      uint64_t v6 = *(void *)(a2 + 392);
      uint64_t v9 = *(void *)(a2 + 424);
      if ((v7 != v8) != (v6 == v9))
      {
        if (v7 == v8) {
          goto LABEL_4;
        }
        if (v8 - *(void *)(a1 + 416) == v9 - *(void *)(a2 + 416))
        {
          uint64_t v5 = *(void *)(a1 + 400) - v7;
          return v5 == *(void *)(a2 + 400) - v6;
        }
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t icu::FCDUTF16CollationIterator::resetToOffset(icu::FCDUTF16CollationIterator *this, int a2)
{
  uint64_t result = icu::CollationIterator::reset((uint64_t)this);
  uint64_t v5 = *((void *)this + 52) + 2LL * a2;
  *((void *)this + 53) = v5;
  *((void *)this + 49) = v5;
  *((void *)this + 50) = v5;
  *((void *)this + 51) = *((void *)this + 55);
  *((_BYTE *)this + 520) = 1;
  return result;
}

uint64_t icu::FCDUTF16CollationIterator::getOffset(icu::FCDUTF16CollationIterator *this)
{
  if (*((_BYTE *)this + 520) || (uint64_t v3 = *((void *)this + 49), v1 = *((void *)this + 53), v3 == v1))
  {
    uint64_t v1 = *((void *)this + 50);
    return (v1 - *((void *)this + 52)) >> 1;
  }

  if (*((void *)this + 50) == v3) {
    return (v1 - *((void *)this + 52)) >> 1;
  }
  return (*((void *)this + 54) - *((void *)this + 52)) >> 1;
}

uint64_t icu::FCDUTF16CollationIterator::handleNextCE32( icu::FCDUTF16CollationIterator *this, int *a2, UErrorCode *a3)
{
  if (*((char *)this + 520) <= 0)
  {
    int v6 = *((unsigned __int8 *)this + 520);
    uint64_t v7 = (unsigned __int16 **)((char *)this + 400);
    do
    {
      if (!v6)
      {
        uint64_t v8 = (unsigned __int16 *)*((void *)this + 50);
      }

      icu::FCDUTF16CollationIterator::switchToForward((uint64_t)this);
      int v6 = *((unsigned __int8 *)this + 520);
    }

    while (*((char *)this + 520) <= 0);
  }

  uint64_t v9 = (unsigned __int16 *)*((void *)this + 50);
  uint64_t v10 = (unsigned __int16 *)*((void *)this + 51);
  if (v9 != v10)
  {
    int v12 = v9 + 1;
    unint64_t v11 = *v9;
    uint64_t v7 = (unsigned __int16 **)((char *)this + 400);
    *((void *)this + 50) = v9 + 1;
    *a2 = v11;
    if (v11 < 0xC0) {
      return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16LL)
    }
                             + 4
                             * ((v11 & 0x1F)
                              + 4
    if (!icu::CollationFCD::tcccIndex[v11 >> 5]) {
      return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16LL)
    }
                             + 4
                             * ((v11 & 0x1F)
                              + 4
    if (((icu::CollationFCD::tcccBits[icu::CollationFCD::tcccIndex[v11 >> 5]] >> v11) & 1) == 0) {
      return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16LL)
    }
                             + 4
                             * ((v11 & 0x1F)
                              + 4
    if ((v11 & 0xFFFFFF01) != 0xF01)
    {
      if (v12 == v10) {
        return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16LL)
      }
                               + 4
                               * ((v11 & 0x1F)
                                + 4
      unint64_t v15 = *v12;
      if (v15 < 0x300
        || !icu::CollationFCD::lcccIndex[v15 >> 5]
        || ((icu::CollationFCD::lcccBits[icu::CollationFCD::lcccIndex[v15 >> 5]] >> v15) & 1) == 0)
      {
        return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16LL)
                               + 4
                               * ((v11 & 0x1F)
                                + 4
      }
    }

    *((void *)this + 50) = v9;
    if (icu::FCDUTF16CollationIterator::nextSegment(this, a3))
    {
      uint64_t v8 = *v7;
LABEL_13:
      int v13 = *v8;
      LODWORD(v11) = v13;
      *uint64_t v7 = v8 + 1;
      *a2 = v13;
      return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16LL)
                             + 4
                             * ((v11 & 0x1F)
                              + 4
    }
  }

  *a2 = -1;
  return 192LL;
}

uint64_t icu::FCDUTF16CollationIterator::nextSegment(icu::FCDUTF16CollationIterator *this, UErrorCode *a2)
{
  unsigned __int16 v5 = 0;
  int v6 = (UChar *)*((void *)this + 50);
  *(void *)unsigned int v14 = v6;
  uint64_t v7 = (unsigned __int16 *)*((void *)this + 55);
  while (1)
  {
    unsigned int v8 = sub_1809CB74C(*((void *)this + 56), (unsigned __int16 **)v14, v7);
    if (v8 <= 0xFF)
    {
      if (v6 != *((UChar **)this + 50)) {
        goto LABEL_19;
      }
      goto LABEL_14;
    }

    BOOL v9 = v8 >> 8 < v5 || v8 == 33156;
    if (v9 || v8 == 33154) {
      break;
    }
LABEL_14:
    unsigned __int16 v5 = v8;
    int v6 = *(UChar **)v14;
    uint64_t v7 = (unsigned __int16 *)*((void *)this + 55);
    if ((_BYTE)v8) {
      BOOL v11 = *(void *)v14 == (void)v7;
    }
    else {
      BOOL v11 = 1;
    }
    if (v11)
    {
LABEL_19:
      *((void *)this + 54) = v6;
      *((void *)this + 51) = v6;
LABEL_24:
      *((_BYTE *)this + 520) = 0;
      return 1LL;
    }
  }

  do
  {
    int v12 = *(UChar **)v14;
    int v13 = (unsigned __int16 *)*((void *)this + 55);
  }

  while (*(unsigned __int16 **)v14 != v13
       && sub_1809CB74C(*((void *)this + 56), (unsigned __int16 **)v14, v13) > 0xFF);
  uint64_t result = icu::FCDUTF16CollationIterator::normalize((uint64_t)this, *((UChar **)this + 50), v12, a2);
  if ((_DWORD)result)
  {
    *((void *)this + 50) = *((void *)this + 49);
    goto LABEL_24;
  }

  return result;
}

uint64_t icu::FCDUTF16CollationIterator::switchToForward(uint64_t this)
{
  if ((*(char *)(this + 520) & 0x80000000) == 0)
  {
    if (*(void *)(this + 392) != *(void *)(this + 424))
    {
      uint64_t v1 = *(void *)(this + 432);
      *(void *)(this + 424) = v1;
      *(void *)(this + 392) = v1;
      *(void *)(this + 400) = v1;
    }

    goto LABEL_6;
  }

  uint64_t v2 = *(void *)(this + 400);
  *(void *)(this + 424) = v2;
  *(void *)(this + 392) = v2;
  if (v2 == *(void *)(this + 432))
  {
LABEL_6:
    *(void *)(this + 408) = *(void *)(this + 440);
    char v3 = 1;
    goto LABEL_7;
  }

  char v3 = 0;
LABEL_7:
  *(_BYTE *)(this + 520) = v3;
  return this;
}

uint64_t icu::FCDUTF16CollationIterator::foundNULTerminator(icu::FCDUTF16CollationIterator *this)
{
  if (*((void *)this + 51)) {
    return 0LL;
  }
  uint64_t v2 = *((void *)this + 50) - 2LL;
  *((void *)this + 55) = v2;
  *((void *)this + 50) = v2;
  *((void *)this + 51) = v2;
  return 1LL;
}

unint64_t icu::FCDUTF16CollationIterator::nextCodePoint( icu::FCDUTF16CollationIterator *this, UErrorCode *a2)
{
  if (*((char *)this + 520) <= 0)
  {
    int v4 = *((unsigned __int8 *)this + 520);
    do
    {
      if (!v4)
      {
        unsigned __int16 v5 = (unsigned __int16 *)*((void *)this + 50);
      }

      icu::FCDUTF16CollationIterator::switchToForward((uint64_t)this);
      int v4 = *((unsigned __int8 *)this + 520);
    }

    while (*((char *)this + 520) <= 0);
  }

  int v6 = (unsigned __int16 *)*((void *)this + 50);
  uint64_t v7 = (unsigned __int16 *)*((void *)this + 51);
  if (v6 == v7) {
    return 0xFFFFFFFFLL;
  }
  BOOL v9 = v6 + 1;
  unint64_t result = *v6;
  *((void *)this + 50) = v6 + 1;
  if (result < 0xC0)
  {
    if (!(_DWORD)result)
    {
      if (v7) {
        return 0LL;
      }
      *((void *)this + 55) = v6;
      unint64_t result = 0xFFFFFFFFLL;
      *((void *)this + 50) = v6;
      *((void *)this + 51) = v6;
      return result;
    }

    goto LABEL_16;
  }

  if (icu::CollationFCD::tcccIndex[result >> 5]
    && ((icu::CollationFCD::tcccBits[icu::CollationFCD::tcccIndex[result >> 5]] >> result) & 1) != 0)
  {
    if ((result & 0xFFFFFF01) == 0xF01) {
      goto LABEL_11;
    }
    if (v9 == v7)
    {
      BOOL v9 = v7;
      goto LABEL_16;
    }

    unint64_t v11 = *v9;
    if (v11 >= 0x300
      && icu::CollationFCD::lcccIndex[v11 >> 5]
      && ((icu::CollationFCD::lcccBits[icu::CollationFCD::lcccIndex[v11 >> 5]] >> v11) & 1) != 0)
    {
LABEL_11:
      *((void *)this + 50) = v6;
      if (icu::FCDUTF16CollationIterator::nextSegment(this, a2))
      {
        unsigned __int16 v5 = (unsigned __int16 *)*((void *)this + 50);
LABEL_13:
        BOOL v9 = v5 + 1;
        *((void *)this + 50) = v5 + 1;
        unint64_t result = *v5;
        goto LABEL_16;
      }

      return 0xFFFFFFFFLL;
    }
  }

unint64_t icu::FCDUTF16CollationIterator::previousCodePoint( icu::FCDUTF16CollationIterator *this, UErrorCode *a2)
{
  if ((*((char *)this + 520) & 0x80000000) == 0)
  {
    int v4 = *((unsigned __int8 *)this + 520);
    do
    {
      if (!v4)
      {
        uint64_t v5 = *((void *)this + 50);
        if (v5 != *((void *)this + 49)) {
          goto LABEL_13;
        }
      }

      icu::FCDUTF16CollationIterator::switchToBackward((uint64_t)this);
      int v4 = *((unsigned __int8 *)this + 520);
    }

    while ((*((char *)this + 520) & 0x80000000) == 0);
  }

  uint64_t v7 = (unsigned __int16 *)*((void *)this + 49);
  int v6 = (unsigned __int16 *)*((void *)this + 50);
  if (v6 == v7) {
    return 0xFFFFFFFFLL;
  }
  BOOL v9 = v6 - 1;
  unint64_t result = *(v6 - 1);
  *((void *)this + 50) = v6 - 1;
  if (result >= 0x300
    && icu::CollationFCD::lcccIndex[result >> 5]
    && ((icu::CollationFCD::lcccBits[icu::CollationFCD::lcccIndex[result >> 5]] >> result) & 1) != 0)
  {
    if ((result & 0xFFFFFF01) == 0xF01) {
      goto LABEL_11;
    }
    if (v9 == v7)
    {
      BOOL v9 = v7;
      goto LABEL_14;
    }

    unint64_t v13 = *(v6 - 2);
    if (v13 >= 0xC0
      && icu::CollationFCD::tcccIndex[v13 >> 5]
      && ((icu::CollationFCD::tcccBits[icu::CollationFCD::tcccIndex[v13 >> 5]] >> v13) & 1) != 0)
    {
LABEL_11:
      *((void *)this + 50) = v6;
      if (icu::FCDUTF16CollationIterator::previousSegment(this, a2))
      {
        uint64_t v5 = *((void *)this + 50);
LABEL_13:
        BOOL v9 = (unsigned __int16 *)(v5 - 2);
        *((void *)this + 50) = v9;
        unint64_t result = *v9;
        goto LABEL_14;
      }

      return 0xFFFFFFFFLL;
    }
  }

uint64_t icu::FCDUTF16CollationIterator::previousSegment( icu::FCDUTF16CollationIterator *this, UErrorCode *a2)
{
  LOBYTE(v5) = 0;
  int v6 = (UChar *)*((void *)this + 50);
  *(void *)unint64_t v13 = v6;
  unint64_t v7 = *((void *)this + 52);
  while (1)
  {
    unsigned int v8 = sub_1809D11F4(*((void *)this + 56), v7, (uint64_t *)v13);
    if (!(_BYTE)v8)
    {
      if (v6 != *((UChar **)this + 50)) {
        goto LABEL_19;
      }
      goto LABEL_14;
    }

    if (v8 == 33156 || v8 == 33154) {
      break;
    }
LABEL_14:
    unsigned int v5 = v8 >> 8;
    int v6 = *(UChar **)v13;
    unint64_t v7 = *((void *)this + 52);
    if (v8 < 0x100 || *(void *)v13 == v7)
    {
LABEL_19:
      *((void *)this + 53) = v6;
      *((void *)this + 49) = v6;
LABEL_25:
      *((_BYTE *)this + 520) = 0;
      return 1LL;
    }
  }

  do
  {
    int v11 = *(UChar **)v13;
    unint64_t v12 = *((void *)this + 52);
    if (*(void *)v13 == v12) {
      break;
    }
    unsigned int v8 = sub_1809D11F4(*((void *)this + 56), v12, (uint64_t *)v13);
  }

  while (v8);
  uint64_t result = icu::FCDUTF16CollationIterator::normalize((uint64_t)this, v11, *((UChar **)this + 50), a2);
  if ((_DWORD)result)
  {
    *((void *)this + 50) = *((void *)this + 51);
    goto LABEL_25;
  }

  return result;
}

uint64_t icu::FCDUTF16CollationIterator::switchToBackward(uint64_t this)
{
  if (*(char *)(this + 520) < 1)
  {
    uint64_t v3 = *(void *)(this + 424);
    if (*(void *)(this + 392) != v3)
    {
      *(void *)(this + 432) = v3;
      *(void *)(this + 400) = v3;
      *(void *)(this + 408) = v3;
    }

    goto LABEL_6;
  }

  uint64_t v1 = *(void *)(this + 400);
  *(void *)(this + 432) = v1;
  *(void *)(this + 408) = v1;
  if (v1 == *(void *)(this + 424))
  {
LABEL_6:
    *(void *)(this + 392) = *(void *)(this + 416);
    char v2 = -1;
    goto LABEL_7;
  }

  char v2 = 0;
LABEL_7:
  *(_BYTE *)(this + 520) = v2;
  return this;
}

unint64_t icu::FCDUTF16CollationIterator::forwardNumCodePoints( unint64_t this, int a2, UErrorCode *a3)
{
  if (a2 >= 1)
  {
    int v4 = a2;
    unsigned int v5 = (icu::FCDUTF16CollationIterator *)this;
    do
    {
      this = icu::FCDUTF16CollationIterator::nextCodePoint(v5, a3);
      BOOL v6 = __OFSUB__(v4--, 1);
    }

    while ((this & 0x80000000) == 0 && !((v4 < 0) ^ v6 | (v4 == 0)));
  }

  return this;
}

unint64_t icu::FCDUTF16CollationIterator::backwardNumCodePoints( unint64_t this, int a2, UErrorCode *a3)
{
  if (a2 >= 1)
  {
    int v4 = a2;
    unsigned int v5 = (icu::FCDUTF16CollationIterator *)this;
    do
    {
      this = icu::FCDUTF16CollationIterator::previousCodePoint(v5, a3);
      BOOL v6 = __OFSUB__(v4--, 1);
    }

    while ((this & 0x80000000) == 0 && !((v4 < 0) ^ v6 | (v4 == 0)));
  }

  return this;
}

uint64_t icu::FCDUTF16CollationIterator::normalize(uint64_t a1, UChar *a2, UChar *a3, UErrorCode *a4)
{
  *(void *)(a1 + 424) = a2;
  *(void *)(a1 + 432) = a3;
  unsigned int v9 = *(unsigned __int16 *)(a1 + 464);
  if ((v9 & 0x11) != 0)
  {
    uint64_t v10 = 0LL;
  }

  else if ((v9 & 2) != 0)
  {
    uint64_t v10 = a1 + 466;
  }

  else
  {
    uint64_t v10 = *(void *)(a1 + 480);
  }

  *(void *)(a1 + 392) = v10;
  if ((v9 & 0x8000) != 0) {
    unsigned int v11 = *(_DWORD *)(a1 + 468);
  }
  else {
    unsigned int v11 = v9 >> 5;
  }
  *(void *)(a1 + 408) = v10 + 2LL * (int)v11;
  return 1LL;
}

uint64_t sub_1809D11F4(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  BOOL v6 = (unsigned __int16 *)(*a3 - 2);
  unint64_t v5 = *v6;
  *a3 = (uint64_t)v6;
  if ((v5 & 0xFC00) == 0xDC00)
  {
    if ((unint64_t)v6 > a2)
    {
      int v10 = *(unsigned __int16 *)(v4 - 4);
      uint64_t v9 = v4 - 4;
      int v8 = v10;
      if ((v10 & 0xFC00) == 0xD800)
      {
        LODWORD(v5) = v5 + (v8 << 10) - 56613888;
        *a3 = v9;
      }
    }
  }

  else
  {
    if (*(_BYTE *)(*(void *)(a1 + 56) + (v5 >> 8))) {
      BOOL v11 = ((1 << (v5 >> 5)) & *(unsigned __int8 *)(*(void *)(a1 + 56) + (v5 >> 8))) == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (v11) {
      return 0LL;
    }
  }

  return icu::Normalizer2Impl::getFCD16FromNormData((icu::Normalizer2Impl *)a1, v5);
}

void icu::UTF8CollationIterator::~UTF8CollationIterator(icu::UTF8CollationIterator *this)
{
}

uint64_t icu::UTF8CollationIterator::resetToOffset(icu::UTF8CollationIterator *this, int a2)
{
  uint64_t result = icu::CollationIterator::reset((uint64_t)this);
  *((_DWORD *)this + 100) = a2;
  return result;
}

uint64_t icu::UTF8CollationIterator::getOffset(icu::UTF8CollationIterator *this)
{
  return *((unsigned int *)this + 100);
}

uint64_t icu::UTF8CollationIterator::handleNextCE32( icu::UTF8CollationIterator *this, int *a2, UErrorCode *a3)
{
  uint64_t v4 = *((int *)this + 100);
  if ((_DWORD)v4 == *((_DWORD *)this + 101))
  {
    *a2 = -1;
    return 192LL;
  }

  unint64_t v7 = (const uint8_t *)*((void *)this + 49);
  *((_DWORD *)this + 100) = v4 + 1;
  int v8 = (char)v7[v4];
  uint64_t v9 = v7[v4];
  UChar32 v10 = v8;
  *a2 = v8;
  if ((v8 & 0x80000000) == 0) {
    return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16LL) + 4 * v9);
  }
  BOOL v11 = (int32_t *)((char *)this + 400);
  int32_t v12 = *((_DWORD *)this + 101);
  if ((v9 & 0xF0) == 0xE0)
  {
    uint64_t v13 = *v11;
    uint64_t v14 = v13 + 1;
    if ((int)v13 + 1 < v12 || v12 < 0)
    {
      uint64_t v15 = v9 & 0xF;
      unsigned int v16 = v7[v13];
      if (((a00000000000000[v15] >> (v16 >> 5)) & 1) != 0)
      {
        unsigned int v17 = v7[v14] ^ 0x80;
        if (v17 <= 0x3F)
        {
          *a2 = ((_DWORD)v15 << 12) | ((v16 & 0x3F) << 6) | v17;
          *((_DWORD *)this + 100) += 2;
          return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16LL)
                                 + 4LL
                                 * ((*a2 & 0x1F)
                                  + 4 * *(unsigned __int16 *)(**((void **)this + 1) + 2LL * (*a2 >> 5))));
        }
      }
    }
  }

  else if ((v8 + 62) <= 0x1Du)
  {
    uint64_t v18 = *v11;
    if ((_DWORD)v18 != v12)
    {
      unsigned int v19 = v7[v18] ^ 0x80;
      if (v19 <= 0x3F)
      {
        *a2 = ((v10 & 0x1F) << 6) | v19;
        ++*((_DWORD *)this + 100);
        return result;
      }
    }
  }

  UChar32 CharSafeBody = utf8_nextCharSafeBody(v7, v11, v12, v10, -3);
  *a2 = CharSafeBody;
  return sub_1808A22C4(*((uint64_t **)this + 2), CharSafeBody);
}

uint64_t icu::UTF8CollationIterator::foundNULTerminator(icu::UTF8CollationIterator *this)
{
  if ((*((_DWORD *)this + 101) & 0x80000000) == 0) {
    return 0LL;
  }
  int v2 = *((_DWORD *)this + 100) - 1;
  *((_DWORD *)this + 100) = v2;
  *((_DWORD *)this + 101) = v2;
  return 1LL;
}

uint64_t icu::UTF8CollationIterator::forbidSurrogateCodePoints(icu::UTF8CollationIterator *this)
{
  return 1LL;
}

uint64_t icu::UTF8CollationIterator::nextCodePoint(icu::UTF8CollationIterator *this, UErrorCode *a2)
{
  int v2 = *((_DWORD *)this + 100);
  int v3 = *((_DWORD *)this + 101);
  if (v2 == v3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = v2;
  uint64_t v5 = *((void *)this + 49);
  if ((v3 & 0x80000000) == 0 || *(_BYTE *)(v5 + v2))
  {
    uint64_t v8 = v2 + 1LL;
    *((_DWORD *)this + 100) = v2 + 1;
    int v9 = *(char *)(v5 + v2);
    uint64_t v6 = *(unsigned __int8 *)(v5 + v2);
    if ((v9 & 0x80000000) == 0) {
      return v6;
    }
    if ((_DWORD)v8 != v3)
    {
      if (v6 < 0xE0)
      {
        int v12 = v6 & 0x1F;
      }

      else
      {
        if (v6 > 0xEF)
        {
          int v14 = v6 - 240;
          unint64_t v10 = *(unsigned __int8 *)(v5 + v8);
          uint64_t v8 = v4 + 2;
          *((_DWORD *)this + 100) = v4 + 2;
          if ((_DWORD)v4 + 2 == v3) {
            return 65533LL;
          }
          unsigned int v11 = *(unsigned __int8 *)(v5 + v8) ^ 0x80;
          if (v11 > 0x3F) {
            return 65533LL;
          }
          LODWORD(v10) = v10 & 0x3F | (v14 << 6);
        }

        else
        {
          unint64_t v10 = v9 & 0xF;
          unsigned int v11 = *(_BYTE *)(v5 + v8) & 0x3F;
        }

        LODWORD(v8) = v8 + 1;
        *((_DWORD *)this + 100) = v8;
        if ((_DWORD)v8 == v3) {
          return 65533LL;
        }
        int v12 = v11 | ((_DWORD)v10 << 6);
      }

      unsigned int v13 = *(unsigned __int8 *)(v5 + (int)v8) ^ 0x80;
      if (v13 <= 0x3F)
      {
        uint64_t v6 = v13 | (v12 << 6);
        *((_DWORD *)this + 100) = v8 + 1;
        return v6;
      }
    }

    return 65533LL;
  }

  *((_DWORD *)this + 101) = v2;
  return 0xFFFFFFFFLL;
}

uint64_t icu::UTF8CollationIterator::previousCodePoint(icu::UTF8CollationIterator *this, UErrorCode *a2)
{
  uint64_t v2 = *((int *)this + 100);
  if (!(_DWORD)v2) {
    return 0xFFFFFFFFLL;
  }
  int v3 = (const uint8_t *)*((void *)this + 49);
  uint64_t v4 = v2 - 1;
  *((_DWORD *)this + 100) = v4;
  int v5 = (char)v3[v4];
  uint64_t v6 = v5;
  if (v5 < 0) {
    return utf8_prevCharSafeBody(v3, 0, (int32_t *)this + 100, v5, -3);
  }
  return v6;
}

uint64_t icu::UTF8CollationIterator::forwardNumCodePoints(uint64_t this, int a2, UErrorCode *a3)
{
  if (a2 >= 1)
  {
    int v3 = *(_DWORD *)(this + 404);
    int v4 = *(_DWORD *)(this + 400);
    for (int i = a2 + 1; i > 1; --i)
    {
      if (v4 >= v3)
      {
        if ((v3 & 0x80000000) == 0) {
          return this;
        }
        uint64_t v6 = *(void *)(this + 392);
        if (!*(_BYTE *)(v6 + v4)) {
          return this;
        }
      }

      else
      {
        uint64_t v6 = *(void *)(this + 392);
      }

      uint64_t v7 = v4 + 1LL;
      *(_DWORD *)(this + 400) = v7;
      unsigned int v8 = *(unsigned __int8 *)(v6 + v4);
      if ((v8 + 11) >= 0xCDu && (_DWORD)v7 != v3)
      {
        unint64_t v10 = *(unsigned __int8 *)(v6 + v7);
        if ((v8 & 0xF0) == 0xE0)
        {
          uint64_t v11 = v4 + 2LL;
          *(_DWORD *)(this + 400) = v11;
          LODWORD(v7) = v3;
          if ((_DWORD)v11 == v3) {
            goto LABEL_12;
          }
          LODWORD(v7) = v4 + 2;
          int v12 = 3;
          goto LABEL_22;
        }

        if (v8 > 0xDF)
        {
          *(_DWORD *)(this + 400) = v4 + 2;
          LODWORD(v7) = v3;
          if (v4 + 2 == v3) {
            goto LABEL_12;
          }
          LODWORD(v7) = v4 + 2;
          uint64_t v13 = v4 + 3LL;
          *(_DWORD *)(this + 400) = v13;
          LODWORD(v7) = v3;
          if ((_DWORD)v13 == v3) {
            goto LABEL_12;
          }
          LODWORD(v7) = v4 + 3;
          int v12 = 4;
          goto LABEL_22;
        }

        if ((char)v10 < -64)
        {
          int v12 = 2;
LABEL_22:
          LODWORD(v7) = v4 + v12;
          *(_DWORD *)(this + 400) = v4 + v12;
        }
      }

uint64_t icu::UTF8CollationIterator::backwardNumCodePoints(uint64_t this, int a2, UErrorCode *a3)
{
  if (a2 >= 1)
  {
    uint64_t v3 = this;
    int32_t v4 = *(_DWORD *)(this + 400);
    int v5 = a2 + 1;
    do
    {
      BOOL v6 = __OFSUB__(v4--, 1);
      if (v4 < 0 != v6) {
        break;
      }
      this = *(void *)(v3 + 392);
      *(_DWORD *)(v3 + 400) = v4;
      if (*(char *)(this + v4) <= -65)
      {
        this = utf8_back1SafeBody((const uint8_t *)this, 0, v4);
        int32_t v4 = this;
        *(_DWORD *)(v3 + 400) = this;
      }

      --v5;
    }

    while (v5 > 1);
  }

  return this;
}

void icu::FCDUTF8CollationIterator::~FCDUTF8CollationIterator(icu::FCDUTF8CollationIterator *this)
{
  *(void *)this = off_18972D100;
  icu::UnicodeString::~UnicodeString(off_18972D100, (icu::FCDUTF8CollationIterator *)((char *)this + 432));
  icu::CollationIterator::~CollationIterator(this);
}

{
  *(void *)this = off_18972D100;
  icu::UnicodeString::~UnicodeString(off_18972D100, (icu::FCDUTF8CollationIterator *)((char *)this + 432));
  icu::CollationIterator::~CollationIterator(this);
}

{
  void *v2;
  *(void *)this = off_18972D100;
  icu::UnicodeString::~UnicodeString(off_18972D100, (icu::FCDUTF8CollationIterator *)((char *)this + 432));
  icu::CollationIterator::~CollationIterator(this);
  icu::UMemory::operator delete(v2);
}

uint64_t icu::FCDUTF8CollationIterator::resetToOffset(icu::FCDUTF8CollationIterator *this, int a2)
{
  uint64_t result = icu::CollationIterator::reset((uint64_t)this);
  *((_DWORD *)this + 100) = a2;
  *((_DWORD *)this + 103) = a2;
  *((_DWORD *)this + 102) = 0;
  return result;
}

uint64_t icu::FCDUTF8CollationIterator::getOffset(icu::FCDUTF8CollationIterator *this)
{
  uint64_t v1 = (char *)this + 400;
  if (*((_DWORD *)this + 102) == 3)
  {
    if (*(_DWORD *)v1) {
      uint64_t v1 = (char *)this + 416;
    }
    else {
      uint64_t v1 = (char *)this + 412;
    }
  }

  return *(unsigned int *)v1;
}

uint64_t icu::FCDUTF8CollationIterator::handleNextCE32( icu::FCDUTF8CollationIterator *this, int *a2, UErrorCode *a3)
{
  BOOL v6 = (int32_t *)((char *)this + 400);
  while (2)
  {
    switch(*((_DWORD *)this + 102))
    {
      case 0:
        uint64_t v7 = *((int *)this + 100);
        if ((_DWORD)v7 == *((_DWORD *)this + 101)) {
          goto LABEL_45;
        }
        unsigned int v8 = (const uint8_t *)*((void *)this + 49);
        *((_DWORD *)this + 100) = v7 + 1;
        int v9 = (char)v8[v7];
        UChar32 v10 = v9;
        *a2 = v9;
        if ((v9 & 0x80000000) == 0) {
          return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16LL) + 4LL * v9);
        }
        int32_t v11 = *((_DWORD *)this + 101);
        if ((v9 & 0xF0) == 0xE0)
        {
          uint64_t v12 = *v6;
          uint64_t v13 = v12 + 1;
          if ((int)v12 + 1 < v11 || v11 < 0)
          {
            uint64_t v14 = v9 & 0xF;
            unsigned int v15 = v8[v12];
            if (((a00000000000000[v14] >> (v15 >> 5)) & 1) != 0)
            {
              unsigned int v16 = v8[v13] ^ 0x80;
              if (v16 <= 0x3F)
              {
                *a2 = ((_DWORD)v14 << 12) | ((v15 & 0x3F) << 6) | v16;
                int32_t v17 = *v6;
                int v18 = *v6 + 2;
                *BOOL v6 = v18;
                unint64_t v19 = *a2;
                if ((int)v19 < 192
                  || !icu::CollationFCD::tcccIndex[v19 >> 5]
                  || ((icu::CollationFCD::tcccBits[icu::CollationFCD::tcccIndex[v19 >> 5]] >> v19) & 1) == 0
                  || (v19 & 0x1FFF01) != 0xF01
                  && (v18 == *((_DWORD *)this + 101) || !icu::FCDUTF8CollationIterator::nextHasLccc(this)))
                {
                  return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16LL)
                                         + 4
                                         * ((v19 & 0x1F)
                                          + 4
                }

uint64_t icu::FCDUTF8CollationIterator::nextHasLccc(icu::FCDUTF8CollationIterator *this)
{
  uint64_t v1 = *((void *)this + 49);
  uint64_t v2 = *((int *)this + 100);
  unsigned int v3 = *(unsigned __int8 *)(v1 + v2);
  if (v3 < 0xCC) {
    return 0LL;
  }
  unint64_t v5 = v2 + 1;
  int v6 = *((_DWORD *)this + 101);
  if ((_DWORD)v2 + 1 == v6) {
    goto LABEL_25;
  }
  if (v3 < 0xE0)
  {
    unsigned int v9 = v3 & 0x1F;
  }

  else
  {
    if (v3 > 0xEF)
    {
      if (v3 > 0xF4) {
        goto LABEL_25;
      }
      unsigned int v13 = v3 - 240;
      unint64_t v5 = *(unsigned __int8 *)(v1 + v5);
      uint64_t v14 = v2 + 2;
      if ((_DWORD)v2 + 2 == v6) {
        goto LABEL_25;
      }
      unsigned int v8 = *(unsigned __int8 *)(v1 + v14) ^ 0x80;
      if (v8 > 0x3F) {
        goto LABEL_25;
      }
      int v7 = v5 & 0x3F | (v13 << 6);
      LODWORD(v5) = v14;
    }

    else
    {
      int v7 = v3 & 0xF;
      unsigned int v8 = *(_BYTE *)(v1 + v5) & 0x3F;
    }

    LODWORD(v5) = v5 + 1;
    if ((_DWORD)v5 == v6) {
      goto LABEL_25;
    }
    unsigned int v9 = v8 | (v7 << 6);
  }

  unsigned int v10 = *(unsigned __int8 *)(v1 + (int)v5) ^ 0x80;
  if (v10 <= 0x3F)
  {
    unsigned int v11 = v10 | (v9 << 6);
    unsigned int v12 = (unsigned __int16)((v9 >> 4) - 10304);
    if (HIWORD(v11)) {
      unsigned int v11 = v12;
    }
    if (v11 < 0x300) {
      return 0LL;
    }
    goto LABEL_26;
  }

uint64_t icu::FCDUTF8CollationIterator::nextSegment(icu::FCDUTF8CollationIterator *this, UErrorCode *a2)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  unsigned __int16 v5 = 0;
  int v6 = *((_DWORD *)this + 100);
  __int128 v36 = 0u;
  uint64_t v39 = 0LL;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  int v35 = off_18971B688;
  LOWORD(v36) = 2;
  int v7 = v6;
  while (1)
  {
    uint64_t v8 = *((void *)this + 49);
    uint64_t v9 = v7 + 1LL;
    *((_DWORD *)this + 100) = v9;
    int v10 = *(char *)(v8 + v7);
    unsigned int v11 = *(unsigned __int8 *)(v8 + v7);
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    int v12 = *((_DWORD *)this + 101);
    if ((_DWORD)v9 == v12) {
      goto LABEL_21;
    }
    if (v11 < 0xE0)
    {
      if (v11 < 0xC2) {
        goto LABEL_21;
      }
      int v15 = v11 & 0x1F;
    }

    else
    {
      if (v11 > 0xEF)
      {
        if (v11 > 0xF4) {
          goto LABEL_21;
        }
        unint64_t v13 = *(unsigned __int8 *)(v8 + v9);
        uint64_t v9 = v7 + 2LL;
        *((_DWORD *)this + 100) = v7 + 2;
        if (v7 + 2 == v12) {
          goto LABEL_21;
        }
        unsigned int v14 = *(unsigned __int8 *)(v8 + v9) ^ 0x80;
        if (v14 > 0x3F) {
          goto LABEL_21;
        }
        LODWORD(v13) = v13 & 0x3F | ((v11 - 240) << 6);
      }

      else
      {
        unint64_t v13 = v10 & 0xF;
        unsigned int v14 = *(_BYTE *)(v8 + v9) & 0x3F;
      }

      LODWORD(v9) = v9 + 1;
      *((_DWORD *)this + 100) = v9;
      if ((_DWORD)v9 == v12) {
        goto LABEL_21;
      }
      int v15 = v14 | ((_DWORD)v13 << 6);
    }

    unsigned int v16 = *(unsigned __int8 *)(v8 + (int)v9) ^ 0x80;
    if (v16 <= 0x3F)
    {
      unsigned int v11 = v16 | (v15 << 6);
      *((_DWORD *)this + 100) = v9 + 1;
      goto LABEL_22;
    }

_DWORD *icu::FCDUTF8CollationIterator::switchToForward(_DWORD *this)
{
  int v1 = this[102];
  if (v1 == 2)
  {
    int v4 = 0;
  }

  else if (v1 == 1)
  {
    int v2 = this[100];
    BOOL v3 = v2 != this[104];
    this[103] = v2;
    int v4 = 2 * v3;
  }

  else
  {
    int v4 = 0;
    int v5 = this[104];
    this[100] = v5;
    this[103] = v5;
  }

  this[102] = v4;
  return this;
}

uint64_t icu::FCDUTF8CollationIterator::previousHasTccc(icu::FCDUTF8CollationIterator *this)
{
  int v2 = (const uint8_t *)*((void *)this + 49);
  uint64_t v3 = *((int *)this + 100) - 1LL;
  int v4 = (char)v2[v3];
  if ((v4 & 0x80000000) == 0) {
    return 0LL;
  }
  pint i = v3;
  LODWORD(v6) = utf8_prevCharSafeBody(v2, 0, &pi, v4, -3);
  uint64_t result = 0LL;
  else {
    unint64_t v6 = (unsigned __int16)((v6 >> 10) - 10304);
  }
  if ((int)v6 >= 192)
  {
    if (!icu::CollationFCD::tcccIndex[v6 >> 5]) {
      return 0LL;
    }
    return (icu::CollationFCD::tcccBits[icu::CollationFCD::tcccIndex[v6 >> 5]] >> v6) & 1;
  }

  return result;
}

uint64_t icu::FCDUTF8CollationIterator::handleGetTrailSurrogate(icu::FCDUTF8CollationIterator *this)
{
  if (*((_DWORD *)this + 102) != 3) {
    return 0LL;
  }
  uint64_t v1 = *((int *)this + 100);
  unsigned int v2 = *((unsigned __int16 *)this + 220);
  else {
    unsigned int v3 = v2 >> 5;
  }
  if ((v2 & 2) != 0) {
    int v5 = (char *)this + 442;
  }
  else {
    int v5 = (char *)*((void *)this + 57);
  }
  uint64_t v4 = *(unsigned __int16 *)&v5[2 * v1];
  if ((v4 & 0xFC00) == 0xDC00) {
    *((_DWORD *)this + 100) = v1 + 1;
  }
  return v4;
}

uint64_t icu::FCDUTF8CollationIterator::foundNULTerminator(icu::FCDUTF8CollationIterator *this)
{
  if (*((_DWORD *)this + 102) || (*((_DWORD *)this + 101) & 0x80000000) == 0) {
    return 0LL;
  }
  int v2 = *((_DWORD *)this + 100) - 1;
  *((_DWORD *)this + 100) = v2;
  *((_DWORD *)this + 101) = v2;
  return 1LL;
}

uint64_t icu::FCDUTF8CollationIterator::nextCodePoint(icu::FCDUTF8CollationIterator *this, UErrorCode *a2)
{
  while (2)
  {
    switch(*((_DWORD *)this + 102))
    {
      case 0:
        uint64_t v4 = *((int *)this + 100);
        int v5 = *((_DWORD *)this + 101);
        if ((_DWORD)v4 == v5) {
          return 0xFFFFFFFFLL;
        }
        uint64_t v6 = *((void *)this + 49);
        uint64_t v7 = *(unsigned __int8 *)(v6 + v4);
        if (v5 < 0 && !*(_BYTE *)(v6 + v4)) {
          return 0xFFFFFFFFLL;
        }
        if ((v7 & 0x80) == 0)
        {
          int v32 = v4 + 1;
          goto LABEL_71;
        }

        uint64_t v8 = v4 + 1;
        *((_DWORD *)this + 100) = v4 + 1;
        int v9 = *(char *)(v6 + v4);
        uint64_t v7 = *(unsigned __int8 *)(v6 + v4);
        if ((v9 & 0x80000000) == 0) {
          goto LABEL_35;
        }
        if ((_DWORD)v8 == v5) {
          goto LABEL_8;
        }
        if (v7 < 0xE0)
        {
          unsigned int v19 = v7 & 0x1F;
          goto LABEL_26;
        }

        if (v7 > 0xEF)
        {
          unint64_t v17 = *(unsigned __int8 *)(v6 + v8);
          uint64_t v8 = v4 + 2;
          *((_DWORD *)this + 100) = v4 + 2;
          if ((_DWORD)v4 + 2 == v5) {
            goto LABEL_8;
          }
          unsigned int v18 = *(unsigned __int8 *)(v6 + v8) ^ 0x80;
          if (v18 > 0x3F)
          {
            uint64_t v7 = 65533LL;
            goto LABEL_35;
          }

          LODWORD(v17) = v17 & 0x3F | (((_DWORD)v7 - 240) << 6);
        }

        else
        {
          unint64_t v17 = v9 & 0xF;
          unsigned int v18 = *(_BYTE *)(v6 + v8) & 0x3F;
        }

        LODWORD(v8) = v8 + 1;
        *((_DWORD *)this + 100) = v8;
        if ((_DWORD)v8 != v5)
        {
          unsigned int v19 = v18 | ((_DWORD)v17 << 6);
LABEL_26:
          unsigned int v20 = *(unsigned __int8 *)(v6 + (int)v8) ^ 0x80;
          if (v20 <= 0x3F)
          {
            uint64_t v7 = v20 | (v19 << 6);
            LODWORD(v8) = v8 + 1;
            *((_DWORD *)this + 100) = v8;
            if (WORD1(v7))
            {
              unsigned int v21 = (unsigned __int16)((v19 >> 4) - 10304);
              goto LABEL_36;
            }

unint64_t icu::FCDUTF8CollationIterator::previousCodePoint( icu::FCDUTF8CollationIterator *this, UErrorCode *a2)
{
  uint64_t v4 = (int32_t *)((char *)this + 400);
  while (1)
  {
    int v5 = *((_DWORD *)this + 102);
    if (v5 == 2) {
      break;
    }
    if (v5 == 1)
    {
      uint64_t v6 = *v4;
      if (!(_DWORD)v6) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v7 = (const uint8_t *)*((void *)this + 49);
      uint64_t v8 = v6 - 1;
      if (((char)v7[v8] & 0x80000000) == 0)
      {
        unint64_t CharSafeBody = v7[v8];
        *uint64_t v4 = v8;
        return CharSafeBody;
      }

      *uint64_t v4 = v8;
      int v9 = (char)v7[v8];
      unint64_t CharSafeBody = v9;
      if (v9 < 0) {
        unint64_t CharSafeBody = utf8_prevCharSafeBody(v7, 0, v4, v9, -3);
      }
      else {
        unint64_t v11 = CharSafeBody;
      }
      if ((int)v11 < 768
        || !icu::CollationFCD::lcccIndex[v11 >> 5]
        || ((icu::CollationFCD::lcccBits[icu::CollationFCD::lcccIndex[v11 >> 5]] >> v11) & 1) == 0)
      {
        return CharSafeBody;
      }

      if ((CharSafeBody & 0x1FFF01) == 0xF01)
      {
LABEL_15:
        if (CharSafeBody >> 11 >= 0x1B)
        {
          if ((CharSafeBody - 1114112) >= 0xFFEFE000)
          {
            else {
              int v12 = 4;
            }
          }

          else
          {
            int v12 = 0;
          }
        }

        else
        {
          int v12 = 3;
        }

        goto LABEL_40;
      }

      if (CharSafeBody >= 0x80)
      {
        int v12 = 2;
      }

      else
      {
        int v12 = 1;
      }

uint64_t icu::FCDUTF8CollationIterator::previousSegment(icu::FCDUTF8CollationIterator *this, UErrorCode *a2)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  LOBYTE(v5) = 0;
  uint64_t v6 = (int32_t *)((char *)this + 400);
  int32_t v7 = *((_DWORD *)this + 100);
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  uint64_t v34 = 0LL;
  __int128 v33 = 0u;
  int v30 = off_18971B688;
  LOWORD(v31) = 2;
  int32_t v8 = v7;
  while (1)
  {
    int v9 = (const uint8_t *)*((void *)this + 49);
    uint64_t v10 = v8 - 1LL;
    *((_DWORD *)this + 100) = v10;
    int v11 = (char)v9[v10];
    UChar32 CharSafeBody = v11;
    if (v11 < 0) {
      UChar32 CharSafeBody = utf8_prevCharSafeBody(v9, 0, v6, v11, -3);
    }
    unsigned int v13 = sub_1807E8B6C(*((void *)this + 53), CharSafeBody);
    unsigned int v14 = v13;
    if ((_BYTE)v13) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = v8 == v7;
    }
    if (!v15)
    {
LABEL_23:
      *((_DWORD *)this + 103) = v8;
      *((_DWORD *)this + 100) = v7;
      uint64_t v19 = 2LL;
      *((_DWORD *)this + 102) = 2;
LABEL_40:
      uint64_t v2 = 1LL;
      goto LABEL_41;
    }

    unsigned int v16 = v13;
    icu::UnicodeString::append((uint64_t)&v30, CharSafeBody);
    if (v14)
    {
      if ((_BYTE)v5 && v14 > v5)
      {
        if (v16 >= 0x100) {
          break;
        }
        goto LABEL_32;
      }

      if (v16 == 33154 || v16 == 33156) {
        break;
      }
    }

    unsigned int v5 = v16 >> 8;
    int32_t v8 = *v6;
    if (v16 < 0x100 || v8 == 0) {
      goto LABEL_23;
    }
  }

  do
  {
    int32_t v20 = *v6;
    if (!*v6) {
      break;
    }
    unsigned int v21 = (const uint8_t *)*((void *)this + 49);
    uint64_t v22 = v20 - 1LL;
    *((_DWORD *)this + 100) = v22;
    int v23 = (char)v21[v22];
    UChar32 v24 = v23;
    if (v23 < 0) {
      UChar32 v24 = utf8_prevCharSafeBody(v21, 0, v6, v23, -3);
    }
    unsigned int v25 = sub_1807E8B6C(*((void *)this + 53), v24);
    if (!v25)
    {
      *uint64_t v6 = v20;
      break;
    }

    unsigned int v26 = v25;
    icu::UnicodeString::append((uint64_t)&v30, v24);
  }

  while (v26 > 0xFF);
LABEL_32:
  if ((v31 & 0x8000u) == 0LL) {
    int v27 = (unsigned __int16)v31 >> 5;
  }
  else {
    int v27 = DWORD1(v31);
  }
  icu::UnicodeString::doReverse((icu::UnicodeString *)&v30, 0, v27);
  icu::Normalizer2Impl::decompose( *((UChar **)this + 53),  (const icu::UnicodeString *)&v30,  (icu::FCDUTF8CollationIterator *)((char *)this + 432),  a2);
  uint64_t v2 = 0LL;
  uint64_t v19 = *(unsigned int *)a2;
  if ((int)v19 <= 0)
  {
    *((_DWORD *)this + 104) = v7;
    *((_DWORD *)this + 103) = *((_DWORD *)this + 100);
    *((_DWORD *)this + 102) = 3;
    unsigned int v28 = *((unsigned __int16 *)this + 220);
    if ((v28 & 0x8000) != 0) {
      uint64_t v19 = *((unsigned int *)this + 111);
    }
    else {
      uint64_t v19 = v28 >> 5;
    }
    *uint64_t v6 = v19;
    goto LABEL_40;
  }

_DWORD *icu::FCDUTF8CollationIterator::switchToBackward(_DWORD *this)
{
  int v1 = this[102];
  if (v1 == 2) {
    goto LABEL_7;
  }
  if (v1)
  {
    int v4 = this[103];
    this[100] = v4;
    this[104] = v4;
LABEL_7:
    int v3 = 1;
    goto LABEL_8;
  }

  int v2 = this[100];
  this[104] = v2;
  if (v2 == this[103]) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
LABEL_8:
  this[102] = v3;
  return this;
}

uint64_t icu::FCDUTF8CollationIterator::forwardNumCodePoints(uint64_t this, int a2, UErrorCode *a3)
{
  if (a2 >= 1)
  {
    int v4 = a2;
    unsigned int v5 = (icu::FCDUTF8CollationIterator *)this;
    do
    {
      this = icu::FCDUTF8CollationIterator::nextCodePoint(v5, a3);
      BOOL v6 = __OFSUB__(v4--, 1);
    }

    while ((this & 0x80000000) == 0 && !((v4 < 0) ^ v6 | (v4 == 0)));
  }

  return this;
}

unint64_t icu::FCDUTF8CollationIterator::backwardNumCodePoints( unint64_t this, int a2, UErrorCode *a3)
{
  if (a2 >= 1)
  {
    int v4 = a2;
    unsigned int v5 = (icu::FCDUTF8CollationIterator *)this;
    do
    {
      this = icu::FCDUTF8CollationIterator::previousCodePoint(v5, a3);
      BOOL v6 = __OFSUB__(v4--, 1);
    }

    while ((this & 0x80000000) == 0 && !((v4 < 0) ^ v6 | (v4 == 0)));
  }

  return this;
}

BOOL icu::FCDUTF8CollationIterator::normalize(UChar **this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  return *a3 < U_ILLEGAL_ARGUMENT_ERROR;
}

uint64_t utmscale_getTimeScaleValue(unsigned int a1, unsigned int a2, int *a3)
{
  if (!a3 || *a3 > 0) {
    return 0LL;
  }
  if (a1 <= 9 && a2 < 0xB) {
    return qword_180A3E2E0[11 * a1 + a2];
  }
  uint64_t result = 0LL;
  *a3 = 1;
  return result;
}

uint64_t utmscale_fromInt64(uint64_t a1, unsigned int a2, int *a3)
{
  if (!a3 || *a3 > 0) {
    return 0LL;
  }
  if (a2 < 0xA)
  {
    int v4 = &qword_180A3E2E0[11 * a2];
    if (v4[2] <= a1 && v4[3] >= a1) {
      return (qword_180A3E2E0[11 * a2 + 1] + a1) * *v4;
    }
  }

  uint64_t result = 0LL;
  *a3 = 1;
  return result;
}

uint64_t utmscale_toInt64(uint64_t a1, unsigned int a2, int *a3)
{
  if (!a3 || *a3 > 0) {
    return 0LL;
  }
  if (a2 >= 0xA || (int v4 = &qword_180A3E2E0[11 * a2], v4[4] > a1) || v4[5] < a1)
  {
    uint64_t result = 0LL;
    *a3 = 1;
    return result;
  }

  uint64_t v5 = v4[8];
  uint64_t v6 = *v4;
  if (a1 < 0)
  {
    if (v4[9] > a1)
    {
      uint64_t v7 = (v5 + a1) / v6;
      uint64_t v8 = v4[6];
      return v7 - v8;
    }

    uint64_t v9 = a1 - v5;
LABEL_15:
    uint64_t v7 = v9 / v6;
    uint64_t v8 = v4[1];
    return v7 - v8;
  }

  if (v4[10] >= a1)
  {
    uint64_t v9 = v5 + a1;
    goto LABEL_15;
  }

  uint64_t v7 = (a1 - v5) / v6;
  uint64_t v8 = v4[7];
  return v7 - v8;
}

void *sub_1809D2E68()
{
  return &unk_18C535D78;
}

void sub_1809D2E78(icu::Replaceable *a1)
{
}

uint64_t sub_1809D2E8C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 16))(*(void *)(a1 + 8));
}

uint64_t sub_1809D2E98(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 8LL))(*(void *)(a1 + 8));
}

uint64_t sub_1809D2EA4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16LL))(*(void *)(a1 + 8));
}

uint64_t sub_1809D2EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + 8;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 + 8) + 24LL);
  unsigned int v7 = *(unsigned __int16 *)(a4 + 8);
  if ((v7 & 0x11) != 0)
  {
    uint64_t v8 = 0LL;
  }

  else if ((v7 & 2) != 0)
  {
    uint64_t v8 = a4 + 10;
  }

  else
  {
    uint64_t v8 = *(void *)(a4 + 24);
  }

  int v9 = (__int16)v7;
  unsigned int v10 = v7 >> 5;
  if (v9 >= 0) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = *(unsigned int *)(a4 + 12);
  }
  return v6(v4, a2, a3, v8, v11);
}

uint64_t sub_1809D2EFC(uint64_t a1, uint64_t a2, uint64_t a3, icu::UnicodeString *this)
{
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 16) + 32LL);
  int v9 = a3 - a2;
  uint64_t Buffer = icu::UnicodeString::getBuffer(this, (int)a3 - (int)a2);
  v8(v7, a2, a3, Buffer);
  return icu::UnicodeString::releaseBuffer((uint64_t)this, v9);
}

uint64_t sub_1809D2F64(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 40LL))(*(void *)(a1 + 8));
}

uint64_t utrans_openU( uint64_t a1, unsigned int a2, int a3, uint64_t a4, unsigned int a5, UParseError *a6, UErrorCode *a7)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t v22 = 0LL;
    memset(v21, 0, sizeof(v21));
    if (a6) {
      unsigned int v13 = a6;
    }
    else {
      unsigned int v13 = (UParseError *)v21;
    }
    memset(v24, 0, sizeof(v24));
    uint64_t v20 = a1;
    uint64_t v14 = icu::UnicodeString::UnicodeString(v24, a2 >> 31, &v20);
    if (a4)
    {
      memset(v23, 0, sizeof(v23));
      uint64_t v19 = a4;
      icu::UnicodeString::UnicodeString(v23, a5 >> 31, &v19);
      BOOL v15 = icu::Transliterator::createFromRules((UChar **)v24, (uint64_t)v23, a3, v13, a7);
      unsigned int v16 = (void *)*(unsigned int *)a7;
      else {
        uint64_t v8 = (uint64_t)v15;
      }
      icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v23);
    }

    else
    {
      uint64_t Instance = icu::Transliterator::createInstance(v14, a3, v13, a7);
      int v17 = (void *)*(unsigned int *)a7;
      else {
        uint64_t v8 = Instance;
      }
    }

    icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v24);
  }

  else
  {
    uint64_t v8 = 0LL;
    *a7 = U_ILLEGAL_ARGUMENT_ERROR;
  }

  return v8;
}

uint64_t utrans_open(uint64_t a1, int a2, uint64_t a3, unsigned int a4, UParseError *a5, UErrorCode *a6)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  icu::UnicodeString::UnicodeString(&v16, a1, 0xFFFFFFFFLL, 0LL);
  if ((BYTE8(v16) & 0x11) != 0)
  {
    unint64_t v11 = 0LL;
  }

  else if ((BYTE8(v16) & 2) != 0)
  {
    unint64_t v11 = (unint64_t)&v16 | 0xA;
  }

  else
  {
    unint64_t v11 = *((void *)&v17 + 1);
  }

  if ((SWORD4(v16) & 0x8000u) == 0) {
    unsigned int v12 = WORD4(v16) >> 5;
  }
  else {
    unsigned int v12 = HIDWORD(v16);
  }
  uint64_t v13 = utrans_openU(v11, v12, a2, a3, a4, a5, a6);
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v16);
  return v13;
}

uint64_t utrans_openInverse(icu::Transliterator *a1, UErrorCode *a2)
{
  else {
    return 0LL;
  }
}

uint64_t utrans_clone(uint64_t a1, int *a2)
{
  if (!a2) {
    return 0LL;
  }
  if (*a2 > 0) {
    return 0LL;
  }
  if (a1)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
    if (result) {
      return result;
    }
    int v4 = 7;
  }

  else
  {
    int v4 = 1;
  }

  uint64_t result = 0LL;
  *a2 = v4;
  return result;
}

uint64_t utrans_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t utrans_getUnicodeID(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104LL))(a1);
  if (a2)
  {
    unsigned int v4 = *(unsigned __int16 *)(v3 + 8);
    int v5 = (__int16)v4;
    unsigned int v6 = v4 >> 5;
    if (v5 < 0) {
      unsigned int v6 = *(_DWORD *)(v3 + 12);
    }
    *a2 = v6;
  }

  __int16 v7 = *(_WORD *)(v3 + 8);
  if ((v7 & 0x11) != 0) {
    return 0LL;
  }
  if ((v7 & 2) != 0) {
    return v3 + 10;
  }
  return *(void *)(v3 + 24);
}

uint64_t utrans_getID(uint64_t a1, char *a2, int a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104LL))(a1);
  return icu::UnicodeString::extract(v5, 0, 0x7FFFFFFFLL, a2, a3);
}

void utrans_register(icu::Transliterator *this, icu::Transliterator *a2)
{
  if (a2)
  {
  }

void *utrans_unregisterID(uint64_t a1, unsigned int a2)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  memset(v6, 0, sizeof(v6));
  uint64_t v5 = a1;
  icu::UnicodeString::UnicodeString(v6, a2 >> 31, &v5);
  icu::Transliterator::unregister((icu::Transliterator *)v6, v2);
  return icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)v6);
}

void *utrans_unregister(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  memset(v4, 0, sizeof(v4));
  icu::UnicodeString::UnicodeString(v4, a1, 0xFFFFFFFFLL, 0LL);
  icu::Transliterator::unregister((icu::Transliterator *)v4, v1);
  return icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)v4);
}

icu::Transliterator *utrans_setFilter( icu::Transliterator *result, _WORD *a2, unsigned int a3, UErrorCode *a4)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  if (a4 && *(int *)a4 <= 0)
  {
    uint64_t v5 = result;
    if (a2 && *a2)
    {
      memset(v12, 0, sizeof(v12));
      uint64_t v11 = (uint64_t)a2;
      icu::UnicodeString::UnicodeString(v12, a3 >> 31, &v11);
      uint64_t v10 = v11;
      uint64_t v7 = (icu::UnicodeSet *)icu::UMemory::operator new(&v10, (icu::UMemory *)0xC8, v6);
      if (!v7)
      {
        *a4 = U_MEMORY_ALLOCATION_ERROR;
        return (icu::Transliterator *)icu::UnicodeString::~UnicodeString((void *)7, (icu::UnicodeString *)v12);
      }

      uint64_t v8 = v7;
      icu::UnicodeSet::UnicodeSet(v7, (const icu::UnicodeString *)v12, a4);
      int v9 = (void *)*(unsigned int *)a4;
      if ((int)v9 >= 1)
      {
        (*(void (**)(icu::UnicodeFilter *))(*(void *)v8 + 8LL))(v8);
        uint64_t v8 = 0LL;
      }

      icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v12);
    }

    else
    {
      uint64_t v8 = 0LL;
    }

    return (icu::Transliterator *)icu::Transliterator::adoptFilter(v5, v8);
  }

  return result;
}

uint64_t utrans_getAvailableID(icu::Transliterator *a1, char *a2, int a3)
{
  AvailableID = icu::Transliterator::getAvailableID(a1);
  return icu::UnicodeString::extract((uint64_t)AvailableID, 0, 0x7FFFFFFFLL, a2, a3);
}

_OWORD *utrans_openIDs(int *a1)
{
  if (!a1 || *a1 > 0) {
    return 0LL;
  }
  unsigned int v4 = uprv_malloc(0x40uLL);
  int v2 = v4;
  if (v4)
  {
    *unsigned int v4 = xmmword_18972D2A8;
    v4[1] = *(_OWORD *)&off_18972D2B8;
    v4[2] = xmmword_18972D2C8;
    *((void *)v4 + 6) = sub_1809D3BC8;
    *((_DWORD *)v4 + 14) = 0;
    *((_DWORD *)v4 + 15) = icu::Transliterator::countAvailableIDs((icu::Transliterator *)v4);
  }

  else
  {
    *a1 = 7;
  }

  return v2;
}

void utrans_trans(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, int *a6)
{
  if (a6 && *a6 <= 0)
  {
    if (a1 && a2 && a3 && a5)
    {
      v6[0] = &off_18972D250;
      v6[1] = a2;
      v6[2] = a3;
      *a5 = (*(uint64_t (**)(uint64_t, void *, uint64_t, void))(*(void *)a1 + 32LL))( a1,  v6,  a4,  *a5);
      icu::Replaceable::~Replaceable((icu::Replaceable *)v6);
    }

    else
    {
      *a6 = 1;
    }
  }

void utrans_transIncremental(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  if (a5 && *a5 <= 0)
  {
    if (a1 && a2 && a3 && a4)
    {
      v5[0] = &off_18972D250;
      v5[1] = a2;
      void v5[2] = a3;
      (*(void (**)(uint64_t, void *, uint64_t, int *))(*(void *)a1 + 64LL))(a1, v5, a4, a5);
      icu::Replaceable::~Replaceable((icu::Replaceable *)v5);
    }

    else
    {
      *a5 = 1;
    }
  }

void *utrans_transUChars(void *result, UChar *s, _DWORD *a3, uint64_t a4, uint64_t a5, _DWORD *a6, int *a7)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (a7 && *a7 <= 0)
  {
    uint64_t v8 = (uint64_t)result;
    if (result && s && a6)
    {
      memset(v18, 0, sizeof(v18));
      icu::UnicodeString::UnicodeString(v18, s, v14, a4);
      *a6 = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, void))(*(void *)v8 + 32LL))( v8,  v18,  a5,  *a6);
      __int128 v17 = s;
      int v15 = icu::UnicodeString::extract((uint64_t)v18, &v17, a4, a7);
      __int128 v16 = v17;
      if (a3) {
        *a3 = v15;
      }
      return icu::UnicodeString::~UnicodeString(&v16, (icu::UnicodeString *)v18);
    }

    else
    {
      *a7 = 1;
    }
  }

  return result;
}

void *utrans_transIncrementalUChars(void *result, UChar *s, _DWORD *a3, uint64_t a4, uint64_t a5, int *a6)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a6 && *a6 <= 0)
  {
    uint64_t v7 = (uint64_t)result;
    if (result && s && a5)
    {
      memset(v16, 0, sizeof(v16));
      icu::UnicodeString::UnicodeString(v16, s, v12, a4);
      (*(void (**)(uint64_t, _OWORD *, uint64_t, int *))(*(void *)v7 + 64LL))(v7, v16, a5, a6);
      int v15 = s;
      int v13 = icu::UnicodeString::extract((uint64_t)v16, &v15, a4, a6);
      uint64_t v14 = v15;
      if (a3) {
        *a3 = v13;
      }
      return icu::UnicodeString::~UnicodeString(&v14, (icu::UnicodeString *)v16);
    }

    else
    {
      *a6 = 1;
    }
  }

  return result;
}

uint64_t utrans_toRules(uint64_t a1, uint64_t a2, char *a3, unsigned int a4, int *a5)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (a5 && *a5 <= 0)
  {
    if (a3)
    {
      if ((a4 & 0x80000000) == 0)
      {
LABEL_7:
        __int128 v15 = 0u;
        __int128 v16 = 0u;
        uint64_t v18 = 0LL;
        __int128 v17 = 0u;
        uint64_t v14 = off_18971B688;
        LOWORD(v15) = 2;
        icu::UnicodeString::setTo((icu::UnicodeString *)&v14, a3, 0, a4);
        (*(void (**)(uint64_t, void (***)(icu::UnicodeString *__hidden), uint64_t))(*(void *)a1 + 112LL))( a1,  &v14,  a2);
        int v13 = (UChar *)a3;
        uint64_t v6 = icu::UnicodeString::extract((uint64_t)&v14, &v13, a4, a5);
        uint64_t v12 = v13;
        icu::UnicodeString::~UnicodeString(&v12, (icu::UnicodeString *)&v14);
        return v6;
      }
    }

    else if (!a4)
    {
      goto LABEL_7;
    }

    uint64_t v6 = 0LL;
    *a5 = 1;
    return v6;
  }

  return 0LL;
}

icu::UVector **utrans_getSourceSet( const icu::UnicodeSet **this, unint64_t a2, icu::UVector **a3, unsigned int *a4)
{
  unsigned int v4 = a3;
  if (a4)
  {
    uint64_t v5 = (uint64_t *)*a4;
    if ((int)v5 <= 0)
    {
      int v6 = a2;
      if (a3)
      {
        if ((_DWORD)a2)
        {
LABEL_5:
          (*((void (**)(const icu::UnicodeSet **, icu::UVector **))*this + 15))(this, v4);
          return v4;
        }
      }

      else
      {
        uset_openEmpty(a2, v5);
        unsigned int v4 = v8;
        if (v6) {
          goto LABEL_5;
        }
      }

      icu::Transliterator::getSourceSet(this, v4);
    }
  }

  return v4;
}

uint64_t sub_1809D3AF4(uint64_t a1, int *a2)
{
  if (a2 && *a2 <= 0) {
    return *(unsigned int *)(a1 + 60);
  }
  else {
    return 0LL;
  }
}

char *sub_1809D3B14(uint64_t a1, unsigned int *a2, int *a3)
{
  if (!a3) {
    return 0LL;
  }
  if (*a3 > 0) {
    return 0LL;
  }
  int v6 = *(_DWORD *)(a1 + 56);
  if (v6 >= *(_DWORD *)(a1 + 60))
  {
    if (!a2) {
      return 0LL;
    }
    uint64_t result = 0LL;
    *a2 = 0;
  }

  else
  {
    AvailableID = icu::Transliterator::getAvailableID((icu::Transliterator *)*(unsigned int *)(a1 + 56));
    *(_DWORD *)(a1 + 56) = v6 + 1;
    if (a2)
    {
      unsigned int v8 = *((unsigned __int16 *)AvailableID + 4);
      int v9 = (__int16)v8;
      unsigned int v10 = v8 >> 5;
      if (v9 < 0) {
        unsigned int v10 = *((_DWORD *)AvailableID + 3);
      }
      *a2 = v10;
    }

    __int16 v11 = *((_WORD *)AvailableID + 4);
    if ((v11 & 0x11) != 0) {
      return 0LL;
    }
    if ((v11 & 2) != 0) {
      return (char *)AvailableID + 10;
    }
    else {
      return (char *)AvailableID[3];
    }
  }

  return result;
}

icu::Transliterator *sub_1809D3BC8(icu::Transliterator *result, int *a2)
{
  if (a2)
  {
    if (*a2 <= 0)
    {
      int v2 = result;
      *((_DWORD *)result + 14) = 0;
      uint64_t result = (icu::Transliterator *)icu::Transliterator::countAvailableIDs(result);
      *((_DWORD *)v2 + 15) = (_DWORD)result;
    }
  }

  return result;
}

uint64_t sub_1809D3C00(int *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = *(void *)a1;
  unsigned int v3 = *(unsigned __int16 *)(*(void *)a1 + 8LL);
  if ((*(__int16 *)(*(void *)a1 + 8LL) & 0x80000000) == 0)
  {
    if ((int)v1 < (int)(v3 >> 5))
    {
      int v4 = v3 >> 5;
      goto LABEL_5;
    }

void *icu::VTimeZone::getStaticClassID(icu::VTimeZone *this)
{
  return &unk_18C535D79;
}

void *icu::VTimeZone::getDynamicClassID(icu::VTimeZone *this)
{
  return &unk_18C535D79;
}

void *icu::VTimeZone::VTimeZone(icu::VTimeZone *this)
{
  uint64_t result = icu::BasicTimeZone::BasicTimeZone(this);
  *uint64_t result = off_18972D308;
  result[9] = 0LL;
  result[10] = 0LL;
  result[11] = off_18971B688;
  *((_WORD *)result + 48) = 2;
  result[19] = 0x43846A3EDDF8CD80LL;
  result[20] = off_18971B688;
  *((_WORD *)result + 84) = 2;
  result[28] = off_18971B688;
  *((_WORD *)result + 116) = 2;
  return result;
}

{
  void *result;
  uint64_t result = icu::BasicTimeZone::BasicTimeZone(this);
  *uint64_t result = off_18972D308;
  result[9] = 0LL;
  result[10] = 0LL;
  result[11] = off_18971B688;
  *((_WORD *)result + 48) = 2;
  result[19] = 0x43846A3EDDF8CD80LL;
  result[20] = off_18971B688;
  *((_WORD *)result + 84) = 2;
  result[28] = off_18971B688;
  *((_WORD *)result + 116) = 2;
  return result;
}

icu::VTimeZone *icu::VTimeZone::VTimeZone(icu::VTimeZone *this, const icu::VTimeZone *a2)
{
  int v4 = icu::BasicTimeZone::BasicTimeZone(this, (UChar **)a2);
  *(void *)int v4 = off_18972D308;
  *((void *)v4 + 9) = 0LL;
  uint64_t v5 = (void *)((char *)v4 + 72);
  *((void *)this + 10) = 0LL;
  icu::UnicodeString::UnicodeString((icu::TimeZone *)((char *)v4 + 88), (UChar **)a2 + 11);
  *((void *)this + 19) = *((void *)a2 + 19);
  icu::UnicodeString::UnicodeString((icu::VTimeZone *)((char *)this + 160), (UChar **)a2 + 20);
  icu::UnicodeString::UnicodeString((icu::VTimeZone *)((char *)this + 224), (UChar **)a2 + 28);
  uint64_t v7 = *((void *)a2 + 9);
  if (v7) {
    *uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 96LL))(v7);
  }
  uint64_t v8 = *((void *)a2 + 10);
  if (v8)
  {
    UErrorCode v17 = U_ZERO_ERROR;
    uint64_t v9 = *(unsigned int *)(v8 + 8);
    unsigned int v10 = icu::UMemory::operator new((uint64_t *)v8, (icu::UMemory *)0x28, v6);
    if (v10)
    {
      __int16 v11 = (icu::UVector *)v10;
      icu::UVector::UVector(v10, uprv_deleteUObject, uhash_compareUnicodeString, v9, &v17);
      if (v17 <= U_ZERO_ERROR)
      {
        if ((int)v9 < 1)
        {
LABEL_15:
          *((void *)this + 10) = v11;
          return this;
        }

        unsigned int v12 = 0;
        while (1)
        {
          uint64_t v13 = icu::UVector::elementAt(*((icu::UVector **)a2 + 10), v12);
          uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 56LL))(v13);
          icu::UVector::adoptElement(v11, v14, &v17);
          if (!v14 || v17 >= U_ILLEGAL_ARGUMENT_ERROR) {
            break;
          }
          if ((_DWORD)v9 == ++v12) {
            goto LABEL_15;
          }
        }
      }

      (*(void (**)(icu::UVector *))(*(void *)v11 + 8LL))(v11);
    }
  }

  return this;
}

void icu::VTimeZone::~VTimeZone(icu::VTimeZone *this)
{
  *(void *)this = off_18972D308;
  uint64_t v2 = *((void *)this + 9);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *((void *)this + 10);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  icu::UnicodeString::~UnicodeString((icu::VTimeZone *)((char *)this + 224));
  icu::UnicodeString::~UnicodeString((icu::VTimeZone *)((char *)this + 160));
  icu::UnicodeString::~UnicodeString((icu::VTimeZone *)((char *)this + 88));
  icu::BasicTimeZone::~BasicTimeZone(this);
}

{
  void *v1;
  icu::VTimeZone::~VTimeZone(this);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::VTimeZone::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2 && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 168LL))(a1))
  {
    icu::TimeZone::operator=(a1, a2);
    uint64_t v5 = *(void *)(a1 + 72);
    if (v5)
    {
      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
      *(void *)(a1 + 72) = 0LL;
    }

    uint64_t v6 = *(void *)(a2 + 72);
    if (v6) {
      *(void *)(a1 + 72) = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 96LL))(v6);
    }
    uint64_t v7 = *(void *)(a1 + 80);
    if (v7)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
      *(void *)(a1 + 80) = 0LL;
    }

    uint64_t v8 = *(void *)(a2 + 80);
    if (!v8) {
      goto LABEL_24;
    }
    UErrorCode v17 = U_ZERO_ERROR;
    uint64_t v9 = *(unsigned int *)(v8 + 8);
    unsigned int v10 = icu::UMemory::operator new((uint64_t *)v8, (icu::UMemory *)0x28, v4);
    if (!v10) {
      goto LABEL_24;
    }
    __int16 v11 = (icu::UVector *)v10;
    icu::UVector::UVector(v10, uprv_deleteUObject, uhash_compareUnicodeString, v9, &v17);
    if (v17 <= U_ZERO_ERROR)
    {
      if ((int)v9 < 1)
      {
LABEL_23:
        *(void *)(a1 + 80) = v11;
        goto LABEL_24;
      }

      unsigned int v12 = 0;
      while (1)
      {
        uint64_t v13 = icu::UVector::elementAt(*(icu::UVector **)(a2 + 80), v12);
        uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 56LL))(v13);
        if (!v14 && v17 <= U_ZERO_ERROR) {
          UErrorCode v17 = U_MEMORY_ALLOCATION_ERROR;
        }
        icu::UVector::adoptElement(v11, v14, &v17);
        if (v17 >= U_ILLEGAL_ARGUMENT_ERROR) {
          break;
        }
        if ((_DWORD)v9 == ++v12) {
          goto LABEL_23;
        }
      }
    }

    (*(void (**)(icu::UVector *))(*(void *)v11 + 8LL))(v11);
LABEL_24:
    icu::UnicodeString::operator=((UChar **)(a1 + 88), (UChar **)(a2 + 88));
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    icu::UnicodeString::operator=((UChar **)(a1 + 160), (UChar **)(a2 + 160));
    icu::UnicodeString::operator=((UChar **)(a1 + 224), (UChar **)(a2 + 224));
  }

  return a1;
}

BOOL icu::VTimeZone::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  if (!a1) {
    __cxa_bad_typeid();
  }
  BOOL result = sub_1807F874C(*(void *)(*(void *)a1 - 8LL), *(void *)(*(void *)a2 - 8LL));
  if (result)
  {
    BOOL result = icu::TimeZone::operator==(a1, a2);
    if (result)
    {
      if ((*(unsigned int (**)(void, void))(**(void **)(a1 + 72) + 24LL))( *(void *)(a1 + 72),  *(void *)(a2 + 72)))
      {
        unsigned int v5 = *(unsigned __int16 *)(a1 + 96);
        if ((v5 & 1) != 0)
        {
          if ((*(_WORD *)(a2 + 96) & 1) != 0) {
            goto LABEL_18;
          }
        }

        else
        {
          if ((v5 & 0x8000) != 0) {
            int v6 = *(_DWORD *)(a1 + 100);
          }
          else {
            int v6 = v5 >> 5;
          }
          unsigned int v7 = *(unsigned __int16 *)(a2 + 96);
          if ((v7 & 0x8000u) == 0) {
            unsigned int v8 = v7 >> 5;
          }
          else {
            unsigned int v8 = *(_DWORD *)(a2 + 100);
          }
          if ((v7 & 1) == 0
            && v6 == v8
            && icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 88), (const icu::UnicodeString *)(a2 + 88), v6))
          {
LABEL_18:
          }
        }
      }

      return 0LL;
    }
  }

  return result;
}

uint64_t icu::VTimeZone::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24LL))(a1) ^ 1;
}

icu::BasicTimeZone *icu::VTimeZone::createVTimeZoneByID@<X0>( UChar **this@<X0>, const icu::UnicodeString *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v4 = (icu::BasicTimeZone *)icu::UMemory::operator new(a3, (icu::UMemory *)0x120, (unint64_t)a2);
  unsigned int v5 = v4;
  if (v4)
  {
    icu::BasicTimeZone::BasicTimeZone(v4);
    *(void *)unsigned int v5 = off_18972D308;
    *((void *)v5 + 9) = 0LL;
    *((void *)v5 + 10) = 0LL;
    *((void *)v5 + 11) = off_18971B688;
    *((_WORD *)v5 + 48) = 2;
    *((void *)v5 + 20) = off_18971B688;
    *((void *)v5 + 19) = 0x43846A3EDDF8CD80LL;
    *((_WORD *)v5 + 84) = 2;
    *((void *)v5 + 28) = off_18971B688;
    *((_WORD *)v5 + 116) = 2;
    uint64_t TimeZone = (UChar **)icu::TimeZone::createTimeZone(this, v6);
    *((void *)v5 + 9) = TimeZone;
    icu::UnicodeString::operator=((UChar **)v5 + 20, TimeZone + 1);
    uint64_t v14 = 0LL;
    uint64_t v8 = ures_openDirect(0LL, (uint64_t)"zoneinfo64", (uint64_t)&v14 + 4);
    StringByKey = ures_getStringByKey(v8, "TZVersion", (int *)&v14, (int *)&v14 + 1);
    if (SHIDWORD(v14) <= 0)
    {
      uint64_t v10 = (uint64_t)StringByKey;
      uint64_t v11 = v14;
      icu::UnicodeString::unBogus((uint64_t)v5 + 224);
      else {
        uint64_t v12 = *((unsigned __int16 *)v5 + 116) >> 5;
      }
      icu::UnicodeString::doReplace((uint64_t)v5 + 224, 0LL, v12, v10, 0, v11);
    }

    ures_close(v8);
  }

  return v5;
}

icu::BasicTimeZone *icu::VTimeZone::createVTimeZoneFromBasicTimeZone( icu::VTimeZone *this, const icu::BasicTimeZone *a2, UErrorCode *a3)
{
  uint64_t v3 = (uint64_t *)*(unsigned int *)a2;
  uint64_t v8 = (icu::BasicTimeZone *)icu::UMemory::operator new(v3, (icu::UMemory *)0x120, (unint64_t)a2);
  unint64_t v4 = v8;
  if (!v8)
  {
    *(_DWORD *)a2 = 7;
    return v4;
  }

  icu::BasicTimeZone::BasicTimeZone(v8);
  *(void *)unint64_t v4 = off_18972D308;
  *((void *)v4 + 9) = 0LL;
  *((void *)v4 + 10) = 0LL;
  *((void *)v4 + 11) = off_18971B688;
  *((_WORD *)v4 + 48) = 2;
  *((void *)v4 + 19) = 0x43846A3EDDF8CD80LL;
  *((void *)v4 + 20) = off_18971B688;
  *((_WORD *)v4 + 84) = 2;
  *((void *)v4 + 28) = off_18971B688;
  *((_WORD *)v4 + 116) = 2;
  uint64_t v9 = (*(uint64_t (**)(icu::VTimeZone *))(*(void *)this + 96LL))(this);
  *((void *)v4 + 9) = v9;
  if (!v9)
  {
    *(_DWORD *)a2 = 7;
    (*(void (**)(icu::BasicTimeZone *))(*(void *)v4 + 8LL))(v4);
    return 0LL;
  }

  icu::UnicodeString::operator=((UChar **)v4 + 20, (UChar **)(v9 + 8));
  unsigned int v15 = 0;
  uint64_t v10 = ures_openDirect(0LL, (uint64_t)"zoneinfo64", (uint64_t)a2);
  StringByKey = ures_getStringByKey(v10, "TZVersion", (int *)&v15, (int *)a2);
  if (*(int *)a2 <= 0)
  {
    uint64_t v12 = (uint64_t)StringByKey;
    uint64_t v13 = v15;
    icu::UnicodeString::unBogus((uint64_t)v4 + 224);
    else {
      uint64_t v14 = *((unsigned __int16 *)v4 + 116) >> 5;
    }
    icu::UnicodeString::doReplace((uint64_t)v4 + 224, 0LL, v14, v12, 0, v13);
  }

  ures_close(v10);
  return v4;
}

icu::BasicTimeZone *icu::VTimeZone::createVTimeZone(icu::VTimeZone *this, UErrorCode *a2, UErrorCode *a3)
{
  uint64_t v3 = (uint64_t *)*(unsigned int *)a2;
  v9[0] = this;
  v9[1] = 0LL;
  unsigned int v7 = (icu::BasicTimeZone *)icu::UMemory::operator new(v3, (icu::UMemory *)0x120, (unint64_t)a2);
  unint64_t v4 = v7;
  if (!v7)
  {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
    return v4;
  }

  uint64_t v8 = (icu::VTimeZone *)icu::BasicTimeZone::BasicTimeZone(v7);
  *(void *)unint64_t v4 = off_18972D308;
  *((void *)v4 + 9) = 0LL;
  *((void *)v4 + 10) = 0LL;
  *((void *)v4 + 11) = off_18971B688;
  *((_WORD *)v4 + 48) = 2;
  *((void *)v4 + 19) = 0x43846A3EDDF8CD80LL;
  *((void *)v4 + 20) = off_18971B688;
  *((_WORD *)v4 + 84) = 2;
  *((void *)v4 + 28) = off_18971B688;
  *((_WORD *)v4 + 116) = 2;
  icu::VTimeZone::load(v8, (int *)v9, a2);
  if (*(int *)a2 >= 1)
  {
    (*(void (**)(icu::BasicTimeZone *))(*(void *)v4 + 8LL))(v4);
    return 0LL;
  }

  return v4;
}

uint64_t *icu::VTimeZone::load(icu::VTimeZone *a1, int *a2, UErrorCode *a3)
{
  int v44 = (uint64_t *)*MEMORY[0x1895F89C0];
  BOOL result = icu::UMemory::operator new(v44, (icu::UMemory *)0x28, (unint64_t)a2);
  if (!result)
  {
    return result;
  }

  unsigned int v7 = (icu::UVector *)result;
  icu::UVector::UVector(result, uprv_deleteUObject, uhash_compareUnicodeString, 100LL, a3);
  uint64_t v34 = a1;
  int v8 = 0;
  int v9 = 0;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  uint64_t v43 = 0LL;
  __int128 v42 = 0u;
  uint64_t v39 = (UChar *)off_18971B688;
  LOWORD(v40) = 2;
  while (1)
  {
    do
      int v10 = sub_1809D3C00(a2);
    while (v10 == 13);
    int v12 = v10;
    if (v10 == 0xFFFF) {
      break;
    }
    if (v8)
    {
      int v8 = 0;
      if (v10 != 9 && v10 != 32)
      {
        char v17 = v40;
        if (v9)
        {
          int v18 = (v40 & 0x8000u) == 0LL ? (unsigned __int16)v40 >> 5 : DWORD1(v40);
          if (v18 >= 1)
          {
            uint64_t v19 = (icu::UnicodeString *)icu::UMemory::operator new( (uint64_t *)(unsigned __int16)v40,  (icu::UMemory *)0x40,  v11);
            uint64_t v20 = v19;
            if (v19)
            {
              icu::UnicodeString::UnicodeString(v19, &v39);
            }

            else if (*(int *)a3 <= 0)
            {
              *a3 = U_MEMORY_ALLOCATION_ERROR;
            }

            icu::UVector::adoptElement(v7, v20, a3);
            uint64_t v26 = *(unsigned int *)a3;
            char v17 = v40;
          }
        }

        int v8 = 0;
        __int16 v28 = (v17 & 1) != 0 ? 2 : v17 & 0x1F;
        LOWORD(v40) = v28;
        if (v12 != 10)
        {
LABEL_38:
          __int16 v38 = v12;
          icu::UnicodeString::doAppend((uint64_t)&v39, (uint64_t)&v38, 0, 1LL);
          int v8 = 0;
        }
      }
    }

    else
    {
      if (v10 != 10) {
        goto LABEL_38;
      }
      if (v9)
      {
        v36[1] = L"END:VTIMEZONE";
        int32_t v13 = u_strlen((const UChar *)L"END:VTIMEZONE");
        BOOL v14 = icu::UnicodeString::doEqualsSubstring((uint64_t)&v39, 0, v13, (uint64_t)L"END:VTIMEZONE", 0, v13);
        v36[0] = L"END:VTIMEZONE";
        __int128 v16 = v36;
        int v8 = 1;
        int v9 = 1;
        if (v14) {
          goto LABEL_43;
        }
      }

      else
      {
        v35[1] = (uint64_t)L"BEGIN:VTIMEZONE";
        int32_t v21 = u_strlen((const UChar *)L"BEGIN:VTIMEZONE");
        BOOL v22 = icu::UnicodeString::doEqualsSubstring((uint64_t)&v39, 0, v21, (uint64_t)L"BEGIN:VTIMEZONE", 0, v21);
        v35[0] = (uint64_t)L"BEGIN:VTIMEZONE";
        int v8 = 1;
        if (v22)
        {
          UChar32 v24 = (icu::UnicodeString *)icu::UMemory::operator new(v35, (icu::UMemory *)0x40, v23);
          uint64_t v25 = v24;
          if (v24)
          {
            icu::UnicodeString::UnicodeString(v24, &v39);
          }

          else if (*(int *)a3 <= 0)
          {
            *a3 = U_MEMORY_ALLOCATION_ERROR;
          }

          icu::UVector::adoptElement(v7, v25, a3);
          uint64_t v26 = *(unsigned int *)a3;
          int v8 = 0;
          if ((v40 & 1) != 0) {
            __int16 v27 = 2;
          }
          else {
            __int16 v27 = v40 & 0x1F;
          }
          LOWORD(v40) = v27;
          int v9 = 1;
        }
      }
    }
  }

  if (!v9
    || (v37[1] = L"END:VTIMEZONE",
        int32_t v29 = u_strlen((const UChar *)L"END:VTIMEZONE"),
        BOOL v30 = icu::UnicodeString::doEqualsSubstring((uint64_t)&v39, 0, v29, (uint64_t)L"END:VTIMEZONE", 0, v29),
        v37[0] = L"END:VTIMEZONE",
        __int128 v16 = v37,
        !v30))
  {
    uint64_t v26 = *(unsigned int *)a3;
    if ((int)v26 <= 0)
    {
      uint64_t v26 = 27LL;
      *a3 = U_INVALID_STATE_ERROR;
    }

    goto LABEL_50;
  }

uint64_t icu::VTimeZone::getTZURL(icu::VTimeZone *this, UChar **a2)
{
  else {
    int v2 = *((unsigned __int16 *)this + 48) >> 5;
  }
  if (v2 < 1) {
    return 0LL;
  }
  icu::UnicodeString::operator=(a2, (UChar **)this + 11);
  return 1LL;
}

icu::UnicodeString *icu::VTimeZone::setTZURL(UChar **this, UChar **a2)
{
  return icu::UnicodeString::operator=(this + 11, a2);
}

uint64_t icu::VTimeZone::getLastModified(icu::VTimeZone *this, double *a2)
{
  double v2 = *((double *)this + 19);
  if (v2 == 1.83882169e17) {
    return 0LL;
  }
  *a2 = v2;
  return 1LL;
}

uint64_t icu::VTimeZone::setLastModified(uint64_t this, double a2)
{
  *(double *)(this + 152) = a2;
  return this;
}

icu::UVector *icu::VTimeZone::write(icu::VTimeZone *this, icu::UnicodeString *a2, UErrorCode *a3)
{
  if ((*((_WORD *)a2 + 4) & 1) != 0) {
    __int16 v3 = 2;
  }
  else {
    __int16 v3 = *((_WORD *)a2 + 4) & 0x1F;
  }
  *((_WORD *)a2 + 4) = v3;
  unsigned int v5 = a2;
  return icu::VTimeZone::write((uint64_t)this, (uint64_t *)&v5, (int *)a3);
}

icu::UVector *icu::VTimeZone::write(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  BOOL result = *(icu::UVector **)(a1 + 80);
  if (result)
  {
    if (*((int *)result + 2) >= 1)
    {
      for (signed int i = 0; i < *((_DWORD *)result + 2); ++i)
      {
        uint64_t v7 = icu::UVector::elementAt(result, i);
        v43[10] = "T";
        int32_t v8 = u_strlen((const UChar *)"T");
        if (icu::UnicodeString::doEqualsSubstring(v7, 0, v8, (uint64_t)"T", 0, v8))
        {
          int32_t v9 = u_strlen((const UChar *)"T");
          unsigned int v10 = *(unsigned __int16 *)(v7 + 8);
          if ((v10 & 0x8000) != 0) {
            unsigned int v11 = *(_DWORD *)(v7 + 12);
          }
          else {
            unsigned int v11 = v10 >> 5;
          }
          if (v11 <= v9)
          {
            v43[9] = "T";
          }

          else
          {
            if ((v10 & 2) != 0) {
              uint64_t v12 = v7 + 10;
            }
            else {
              uint64_t v12 = *(void *)(v7 + 24);
            }
            int v13 = *(unsigned __int16 *)(v12 + 2LL * v9);
            v43[8] = "T";
            if (v13 == 58)
            {
              icu::UnicodeString::doAppend(*a2, (uint64_t)"T", 0, 0xFFFFFFFFLL);
              v43[7] = "T";
              uint64_t v14 = *a2;
              LOWORD(v47) = 58;
              icu::UnicodeString::doAppend(v14, (uint64_t)&v47, 0, 1LL);
              unsigned int v15 = *(unsigned __int16 *)(a1 + 96);
              int v16 = (__int16)v15;
              unsigned int v17 = v15 >> 5;
              if (v16 >= 0) {
                uint64_t v18 = v17;
              }
              else {
                uint64_t v18 = *(unsigned int *)(a1 + 100);
              }
              icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)(a1 + 88), 0, v18);
              icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
              _OWORD v43[6] = L"\r\n";
              goto LABEL_38;
            }
          }
        }

        else
        {
          v43[5] = "T";
        }

        _OWORD v43[4] = "L";
        int32_t v19 = u_strlen((const UChar *)"L");
        int32_t v20 = u_strlen((const UChar *)"L");
        unsigned int v21 = *(unsigned __int16 *)(v7 + 8);
        if ((v21 & 0x8000) != 0) {
          unsigned int v22 = *(_DWORD *)(v7 + 12);
        }
        else {
          unsigned int v22 = v21 >> 5;
        }
        if (v22 <= v20)
        {
          v43[3] = "L";
LABEL_34:
          unsigned int v27 = *(unsigned __int16 *)(v7 + 8);
          int v28 = (__int16)v27;
          unsigned int v29 = v27 >> 5;
          if (v28 >= 0) {
            uint64_t v30 = v29;
          }
          else {
            uint64_t v30 = *(unsigned int *)(v7 + 12);
          }
          icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)v7, 0, v30);
          icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
          goto LABEL_38;
        }

        if ((v21 & 2) != 0) {
          uint64_t v23 = v7 + 10;
        }
        else {
          uint64_t v23 = *(void *)(v7 + 24);
        }
        int v24 = *(unsigned __int16 *)(v23 + 2LL * v20);
        v43[2] = "L";
        if (v24 != 58) {
          goto LABEL_34;
        }
        uint64_t v51 = 0LL;
        __int128 v49 = 0u;
        __int128 v50 = 0u;
        __int128 v48 = 0u;
        int v47 = off_18971B688;
        LOWORD(v48) = 2;
        icu::UnicodeString::doAppend(*a2, (uint64_t)"L", 0, 0xFFFFFFFFLL);
        v43[1] = "L";
        uint64_t v25 = *a2;
        LOWORD(v44[0]) = 58;
        icu::UnicodeString::doAppend(v25, (uint64_t)v44, 0, 1LL);
        sub_1809D93C4((uint64_t)&v47, *(double *)(a1 + 152));
        LOWORD(v44[0]) = 90;
        icu::UnicodeString::doAppend((uint64_t)&v47, (uint64_t)v44, 0, 1LL);
        if ((v48 & 0x8000u) == 0LL) {
          uint64_t v26 = (unsigned __int16)v48 >> 5;
        }
        else {
          uint64_t v26 = DWORD1(v48);
        }
        icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)&v47, 0, v26);
        icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
        v43[0] = L"\r\n";
        icu::UnicodeString::~UnicodeString(v43, (icu::UnicodeString *)&v47);
LABEL_38:
        BOOL result = *(icu::UVector **)(a1 + 80);
      }
    }
  }

  else
  {
    __int128 v48 = 0u;
    uint64_t v51 = 0LL;
    __int128 v50 = 0u;
    __int128 v49 = 0u;
    int v47 = off_18971B688;
    LOWORD(v48) = 2;
    uint64_t v45 = 0LL;
    memset(v44, 0, sizeof(v44));
    icu::UVector::UVector((uint64_t)v44, 0LL, (uint64_t)uhash_compareUnicodeString, a3);
    unsigned int v32 = *(unsigned __int16 *)(a1 + 168);
    else {
      int v33 = v32 >> 5;
    }
    if (v33 >= 1)
    {
      int v34 = *(__int16 *)(a1 + 232) < 0 ? *(_DWORD *)(a1 + 236) : *(unsigned __int16 *)(a1 + 232) >> 5;
      if (v34 >= 1)
      {
        int v35 = (__int16)v32;
        unsigned int v36 = v32 >> 5;
        if (v35 >= 0) {
          uint64_t v37 = v36;
        }
        else {
          uint64_t v37 = *(unsigned int *)(a1 + 172);
        }
        icu::UnicodeString::doAppend((uint64_t)&v47, (const icu::UnicodeString *)(a1 + 160), 0, v37);
        __int16 v46 = 91;
        icu::UnicodeString::doAppend((uint64_t)&v47, (uint64_t)&v46, 0, 1LL);
        unsigned int v38 = *(unsigned __int16 *)(a1 + 232);
        int v39 = (__int16)v38;
        unsigned int v40 = v38 >> 5;
        if (v39 >= 0) {
          uint64_t v41 = v40;
        }
        else {
          uint64_t v41 = *(unsigned int *)(a1 + 236);
        }
        icu::UnicodeString::doAppend((uint64_t)&v47, (const icu::UnicodeString *)(a1 + 224), 0, v41);
        __int16 v46 = 93;
        icu::UnicodeString::doAppend((uint64_t)&v47, (uint64_t)&v46, 0, 1LL);
        icu::UVector::addElement((icu::UVector *)v44, &v47, (UErrorCode *)a3);
      }
    }

    icu::VTimeZone::writeZone((void *)a1, a2, *(UChar ***)(a1 + 72), (icu::UVector *)v44, a3);
    icu::UVector::~UVector((icu::UVector *)v44);
    return (icu::UVector *)icu::UnicodeString::~UnicodeString(v42, (icu::UnicodeString *)&v47);
  }

  return result;
}

void icu::VTimeZone::write(icu::VTimeZone *this, double a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  if ((*((_WORD *)a3 + 4) & 1) != 0) {
    __int16 v4 = 2;
  }
  else {
    __int16 v4 = *((_WORD *)a3 + 4) & 0x1F;
  }
  *((_WORD *)a3 + 4) = v4;
  unsigned int v5 = a3;
  icu::VTimeZone::write((uint64_t)this, (uint64_t *)&v5, (int *)a4, a2);
}

void icu::VTimeZone::write(uint64_t a1, uint64_t *a2, int *a3, double a4)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  if (*a3 > 0) {
    return;
  }
  int v28 = 0LL;
  unsigned int v29 = 0LL;
  uint64_t v27 = 0LL;
  memset(v26, 0, sizeof(v26));
  icu::UVector::UVector((uint64_t)v26, (uint64_t)uprv_deleteUObject, (uint64_t)uhash_compareUnicodeString, a3);
  uint64_t v36 = 0LL;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v33 = 0u;
  unsigned int v32 = (UChar *)off_18971B688;
  LOWORD(v33) = 2;
  icu::BasicTimeZone::getTimeZoneRulesAfter((icu::BasicTimeZone *)a1, a4, &v29, &v28, (UErrorCode *)a3);
  int32_t v8 = v28;
  int32_t v9 = v29;
  unint64_t v10 = *a3;
  if ((int)v10 <= 0)
  {
    icu::UnicodeString::operator=(&v32, (UChar **)(a1 + 8));
    memset(v31, 0, sizeof(v31));
    icu::RuleBasedTimeZone::RuleBasedTimeZone((icu::RuleBasedTimeZone *)v31, &v32, v9);
    if (v8)
    {
      while (*((_DWORD *)v8 + 2))
      {
        unsigned int v11 = (icu::TimeZoneRule *)icu::UVector::orphanElementAt(v8, 0);
        icu::RuleBasedTimeZone::addTransitionRule((uint64_t *)v31, v11, (UErrorCode *)a3);
        if (*a3 >= 1) {
          goto LABEL_25;
        }
      }
    }

    icu::RuleBasedTimeZone::complete((uint64_t)v31, (UErrorCode *)a3);
    if (*a3 > 0) {
      goto LABEL_25;
    }
    else {
      int v13 = *(unsigned __int16 *)(a1 + 168) >> 5;
    }
    if (v13 >= 1)
    {
      uint64_t v14 = *(__int16 *)(a1 + 232) < 0
      if ((int)v14 >= 1)
      {
        unsigned int v15 = icu::UMemory::operator new(v14, (icu::UMemory *)0x40, v12);
        if (!v15)
        {
          *a3 = 7;
          goto LABEL_25;
        }

        int v16 = v15;
        uint64_t v17 = icu::UnicodeString::UnicodeString((uint64_t)v15, (uint64_t)"X");
        unsigned int v18 = *(unsigned __int16 *)(a1 + 168);
        int v19 = (__int16)v18;
        unsigned int v20 = v18 >> 5;
        if (v19 >= 0) {
          uint64_t v21 = v20;
        }
        else {
          uint64_t v21 = *(unsigned int *)(a1 + 172);
        }
        icu::UnicodeString::doAppend(v17, (const icu::UnicodeString *)(a1 + 160), 0, v21);
        __int16 v30 = 91;
        icu::UnicodeString::doAppend((uint64_t)v16, (uint64_t)&v30, 0, 1LL);
        unsigned int v22 = *(unsigned __int16 *)(a1 + 232);
        int v23 = (__int16)v22;
        unsigned int v24 = v22 >> 5;
        if (v23 >= 0) {
          uint64_t v25 = v24;
        }
        else {
          uint64_t v25 = *(unsigned int *)(a1 + 236);
        }
        icu::UnicodeString::doAppend((uint64_t)v16, (const icu::UnicodeString *)(a1 + 224), 0, v25);
        icu::UnicodeString::doAppend((uint64_t)v16, (uint64_t)"/", 0, 0xFFFFFFFFLL);
        sub_1809D7FFC((uint64_t)v16, a4);
        __int16 v30 = 93;
        icu::UnicodeString::doAppend((uint64_t)v16, (uint64_t)&v30, 0, 1LL);
        icu::UVector::adoptElement((icu::UVector *)v26, v16, (UErrorCode *)a3);
        if (*a3 > 0) {
          goto LABEL_25;
        }
      }
    }

    icu::VTimeZone::writeZone((void *)a1, a2, (UChar **)v31, (icu::UVector *)v26, a3);
LABEL_25:
    icu::RuleBasedTimeZone::~RuleBasedTimeZone((icu::RuleBasedTimeZone *)v31);
    int32_t v9 = 0LL;
  }

  if (v8) {
    (*(void (**)(icu::UVector *))(*(void *)v8 + 8LL))(v8);
  }
  if (v9) {
    (*(void (**)(icu::InitialTimeZoneRule *))(*(void *)v9 + 8LL))(v9);
  }
  icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)&v32);
  icu::UVector::~UVector((icu::UVector *)v26);
}

void icu::VTimeZone::writeSimple(UChar **this, double a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  if ((*((_WORD *)a3 + 4) & 1) != 0) {
    __int16 v4 = 2;
  }
  else {
    __int16 v4 = *((_WORD *)a3 + 4) & 0x1F;
  }
  *((_WORD *)a3 + 4) = v4;
  unsigned int v5 = a3;
  icu::VTimeZone::writeSimple(this, (uint64_t *)&v5, (int *)a4, a2);
}

void icu::VTimeZone::writeSimple(UChar **a1, uint64_t *a2, int *a3, double a4)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  if (*a3 > 0) {
    return;
  }
  uint64_t v29 = 0LL;
  memset(v28, 0, sizeof(v28));
  icu::UVector::UVector((uint64_t)v28, (uint64_t)uprv_deleteUObject, (uint64_t)uhash_compareUnicodeString, a3);
  __int128 v33 = 0u;
  uint64_t v36 = 0LL;
  __int128 v35 = 0u;
  __int128 v34 = 0u;
  unsigned int v32 = (UChar *)off_18971B688;
  LOWORD(v33) = 2;
  uint64_t v26 = 0LL;
  uint64_t v27 = 0LL;
  uint64_t v25 = 0LL;
  (*((void (**)(UChar **, icu::InitialTimeZoneRule **, icu::TimeZoneRule **, icu::TimeZoneRule **, int *, double))*a1
   + 19))( a1,  &v27,  &v26,  &v25,  a3,  a4);
  int32_t v8 = v26;
  int32_t v9 = v27;
  unint64_t v10 = v25;
  unint64_t v11 = *a3;
  if ((int)v11 <= 0)
  {
    icu::UnicodeString::operator=(&v32, a1 + 1);
    memset(v31, 0, sizeof(v31));
    icu::RuleBasedTimeZone::RuleBasedTimeZone((icu::RuleBasedTimeZone *)v31, &v32, v9);
    if (v8 && v10)
    {
      icu::RuleBasedTimeZone::addTransitionRule((uint64_t *)v31, v8, (UErrorCode *)a3);
      icu::RuleBasedTimeZone::addTransitionRule((uint64_t *)v31, v10, (UErrorCode *)a3);
      int32_t v8 = 0LL;
      unint64_t v10 = 0LL;
    }

    if (*a3 > 0) {
      goto LABEL_28;
    }
    else {
      int v13 = *((unsigned __int16 *)a1 + 84) >> 5;
    }
    if (v13 >= 1)
    {
      uint64_t v14 = (__int16)a1[29] < 0
      if ((int)v14 >= 1)
      {
        unsigned int v15 = icu::UMemory::operator new(v14, (icu::UMemory *)0x40, v12);
        if (!v15)
        {
          if (*a3 <= 0) {
            *a3 = 7;
          }
          goto LABEL_28;
        }

        int v16 = v15;
        icu::UnicodeString::UnicodeString((uint64_t)v15, (uint64_t)"X");
        if (*a3 > 0)
        {
          (*(void (**)(uint64_t *))(*v16 + 8))(v16);
LABEL_28:
          icu::RuleBasedTimeZone::~RuleBasedTimeZone((icu::RuleBasedTimeZone *)v31);
          int32_t v9 = 0LL;
          goto LABEL_29;
        }

        unsigned int v17 = *((unsigned __int16 *)a1 + 84);
        int v18 = (__int16)v17;
        unsigned int v19 = v17 >> 5;
        if (v18 >= 0) {
          uint64_t v20 = v19;
        }
        else {
          uint64_t v20 = *((unsigned int *)a1 + 43);
        }
        icu::UnicodeString::doAppend((uint64_t)v16, (const icu::UnicodeString *)(a1 + 20), 0, v20);
        __int16 v30 = 91;
        icu::UnicodeString::doAppend((uint64_t)v16, (uint64_t)&v30, 0, 1LL);
        unsigned int v21 = *((unsigned __int16 *)a1 + 116);
        int v22 = (__int16)v21;
        unsigned int v23 = v21 >> 5;
        if (v22 >= 0) {
          uint64_t v24 = v23;
        }
        else {
          uint64_t v24 = *((unsigned int *)a1 + 59);
        }
        icu::UnicodeString::doAppend((uint64_t)v16, (const icu::UnicodeString *)(a1 + 28), 0, v24);
        icu::UnicodeString::doAppend((uint64_t)v16, (uint64_t)"/", 0, 0xFFFFFFFFLL);
        sub_1809D7FFC((uint64_t)v16, a4);
        __int16 v30 = 93;
        icu::UnicodeString::doAppend((uint64_t)v16, (uint64_t)&v30, 0, 1LL);
        icu::UVector::adoptElement((icu::UVector *)v28, v16, (UErrorCode *)a3);
      }
    }

    icu::VTimeZone::writeZone(a1, a2, (UChar **)v31, (icu::UVector *)v28, a3);
    goto LABEL_28;
  }

icu::VTimeZone *icu::VTimeZone::clone@<X0>( icu::VTimeZone *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  BOOL result = (icu::VTimeZone *)icu::UMemory::operator new(a3, (icu::UMemory *)0x120, a2);
  if (result) {
    return icu::VTimeZone::VTimeZone(result, this);
  }
  return result;
}

uint64_t icu::VTimeZone::getOffset( icu::VTimeZone *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, UErrorCode *a8)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, UErrorCode *))(**((void **)this + 9) + 32LL))( *((void *)this + 9),  a2,  a3,  a4,  a5,  a6,  a7,  a8);
}

uint64_t icu::VTimeZone::getOffset( icu::VTimeZone *this, unsigned __int8 a2, int a3, int a4, int a5, unsigned __int8 a6, int a7, int a8, UErrorCode *a9)
{
  return (*(uint64_t (**)(void))(**((void **)this + 9) + 40LL))(*((void *)this + 9));
}

uint64_t icu::VTimeZone::getOffset( icu::VTimeZone *this, double a2, uint64_t a3, int *a4, int *a5, UErrorCode *a6)
{
  return (*(uint64_t (**)(void, uint64_t, int *, int *, UErrorCode *, double))(**((void **)this + 9) + 48LL))( *((void *)this + 9),  a3,  a4,  a5,  a6,  a2);
}

uint64_t icu::VTimeZone::getOffsetFromLocal(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 160LL))(*(void *)(a1 + 72));
}

uint64_t icu::VTimeZone::setRawOffset(icu::VTimeZone *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 9) + 56LL))(*((void *)this + 9));
}

uint64_t icu::VTimeZone::getRawOffset(icu::VTimeZone *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 9) + 64LL))(*((void *)this + 9));
}

uint64_t icu::VTimeZone::useDaylightTime(icu::VTimeZone *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 9) + 72LL))(*((void *)this + 9));
}

uint64_t icu::VTimeZone::inDaylightTime(icu::VTimeZone *this, double a2, UErrorCode *a3)
{
  return (*(uint64_t (**)(void, UErrorCode *, double))(**((void **)this + 9) + 80LL))( *((void *)this + 9),  a3,  a2);
}

uint64_t icu::VTimeZone::hasSameRules(icu::VTimeZone *this, const icu::TimeZone *a2)
{
  return (*(uint64_t (**)(void, const icu::TimeZone *))(**((void **)this + 9) + 88LL))( *((void *)this + 9),  a2);
}

uint64_t icu::VTimeZone::getNextTransition( icu::VTimeZone *this, double a2, uint64_t a3, icu::TimeZoneTransition *a4)
{
  return (*(uint64_t (**)(void, uint64_t, icu::TimeZoneTransition *, double))(**((void **)this + 9) + 112LL))( *((void *)this + 9),  a3,  a4,  a2);
}

uint64_t icu::VTimeZone::getPreviousTransition( icu::VTimeZone *this, double a2, uint64_t a3, icu::TimeZoneTransition *a4)
{
  return (*(uint64_t (**)(void, uint64_t, icu::TimeZoneTransition *, double))(**((void **)this + 9) + 120LL))( *((void *)this + 9),  a3,  a4,  a2);
}

uint64_t icu::VTimeZone::countTransitionRules(icu::VTimeZone *this, UErrorCode *a2)
{
  return (*(uint64_t (**)(void, UErrorCode *))(**((void **)this + 9) + 136LL))(*((void *)this + 9), a2);
}

uint64_t icu::VTimeZone::getTimeZoneRules( icu::VTimeZone *this, const icu::InitialTimeZoneRule **a2, const icu::TimeZoneRule **a3, int *a4, UErrorCode *a5)
{
  return (*(uint64_t (**)(void, const icu::InitialTimeZoneRule **, const icu::TimeZoneRule **, int *, UErrorCode *))(**((void **)this + 9) + 144LL))( *((void *)this + 9),  a2,  a3,  a4,  a5);
}

void *icu::VTimeZone::parse(void *this, UErrorCode *a2)
{
  uint64_t v177 = *MEMORY[0x1895F89C0];
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = this[10];
  if (!v4 || !*(_DWORD *)(v4 + 8))
  {
    *a2 = U_INVALID_STATE_ERROR;
    return this;
  }

  __int128 v173 = 0u;
  uint64_t v176 = 0LL;
  __int128 v175 = 0u;
  __int128 v174 = 0u;
  uint64_t v171 = 0LL;
  v172 = (UChar *)off_18971B688;
  LOWORD(v173) = 2;
  __int128 v168 = 0u;
  __int128 v170 = 0u;
  __int128 v169 = 0u;
  v167 = off_18971B688;
  LOWORD(v168) = 2;
  __int128 v163 = 0u;
  uint64_t v166 = 0LL;
  __int128 v165 = 0u;
  __int128 v164 = 0u;
  v162 = off_18971B688;
  LOWORD(v163) = 2;
  __int128 v158 = 0u;
  uint64_t v161 = 0LL;
  __int128 v160 = 0u;
  __int128 v159 = 0u;
  v157 = (UChar *)off_18971B688;
  LOWORD(v158) = 2;
  __int128 v153 = 0u;
  uint64_t v156 = 0LL;
  __int128 v155 = 0u;
  __int128 v154 = 0u;
  v152 = off_18971B688;
  LOWORD(v153) = 2;
  __int128 v148 = 0u;
  uint64_t v151 = 0LL;
  __int128 v150 = 0u;
  __int128 v149 = 0u;
  uint64_t v146 = 0LL;
  v147 = off_18971B688;
  LOWORD(v148) = 2;
  __int128 v144 = 0u;
  __int128 v145 = 0u;
  __int128 v143 = 0u;
  v142 = (UChar *)off_18971B688;
  LOWORD(v143) = 2;
  memset(v136, 0, sizeof(v136));
  icu::UVector::UVector((uint64_t)v136, (uint64_t)uprv_deleteUObject, 0LL, (int *)a2);
  uint64_t v135 = 0LL;
  memset(v134, 0, sizeof(v134));
  icu::UVector::UVector((uint64_t)v134, (uint64_t)uprv_deleteUObject, (uint64_t)uhash_compareUnicodeString, (int *)a2);
  unint64_t v12 = *(int **)(v3 + 80);
  if (v12[2] < 1)
  {
    unint64_t v123 = 0LL;
    goto LABEL_194;
  }

  int v13 = 0;
  signed int v14 = 0;
  BOOL v120 = 0;
  unint64_t v123 = 0LL;
  unsigned int v121 = 0;
  double v15 = 1.83882169e17;
  do
  {
    uint64_t v16 = icu::UVector::elementAt((icu::UVector *)v12, v14);
    uint64_t v17 = v16;
    unsigned int v18 = *(unsigned __int16 *)(v16 + 8);
    if ((v18 & 0x8000) != 0) {
      int32_t v19 = *(_DWORD *)(v16 + 12);
    }
    else {
      int32_t v19 = v18 >> 5;
    }
    uint64_t v20 = icu::UnicodeString::doIndexOf(v16, 0x3Au, 0, v19);
    if ((v20 & 0x80000000) != 0) {
      goto LABEL_113;
    }
    uint64_t v21 = v20;
    icu::UnicodeString::unBogus((uint64_t)&v147);
    if ((v148 & 0x8000u) == 0LL) {
      uint64_t v22 = (unsigned __int16)v148 >> 5;
    }
    else {
      uint64_t v22 = DWORD1(v148);
    }
    icu::UnicodeString::doReplace((icu::UnicodeString *)&v147, 0LL, v22, (const icu::UnicodeString *)v17, 0, v21);
    int v23 = v21 + 1;
    icu::UnicodeString::unBogus((uint64_t)&v142);
    unsigned int v24 = *(unsigned __int16 *)(v17 + 8);
    if (*(__int16 *)(v17 + 8) < 0)
    {
      int v25 = *(_DWORD *)(v17 + 12);
    }

    else if (v21 >= v24 >> 5)
    {
      int v25 = v24 >> 5;
LABEL_21:
      int v23 = v25;
    }

    int v26 = (__int16)v24;
    if ((v143 & 0x8000u) == 0LL) {
      uint64_t v27 = (unsigned __int16)v143 >> 5;
    }
    else {
      uint64_t v27 = DWORD1(v143);
    }
    unsigned int v28 = v24 >> 5;
    if (v26 < 0) {
      unsigned int v28 = *(_DWORD *)(v17 + 12);
    }
    icu::UnicodeString::doReplace( (icu::UnicodeString *)&v142,  0LL,  v27,  (const icu::UnicodeString *)v17,  v23,  v28 - v23);
    if (v13 != 2)
    {
      if (v13 != 1)
      {
        if ((v148 & 0x8000u) == 0LL) {
          int32_t v29 = (unsigned __int16)v148 >> 5;
        }
        else {
          int32_t v29 = DWORD1(v148);
        }
        if (icu::UnicodeString::doCompare((uint64_t)&v147, 0, v29, (uint64_t)L"BEGIN", 0, -1))
        {
          int v13 = 0;
        }

        else
        {
          if ((v143 & 0x8000u) == 0LL) {
            int32_t v50 = (unsigned __int16)v143 >> 5;
          }
          else {
            int32_t v50 = DWORD1(v143);
          }
          int v13 = icu::UnicodeString::doCompare((uint64_t)&v142, 0, v50, (uint64_t)L"VTIMEZONE", 0, -1) == 0;
        }

        goto LABEL_113;
      }

      if ((v148 & 0x8000u) == 0LL) {
        int32_t v45 = (unsigned __int16)v148 >> 5;
      }
      else {
        int32_t v45 = DWORD1(v148);
      }
      if (icu::UnicodeString::doCompare((uint64_t)&v147, 0, v45, (uint64_t)L"TZID", 0, -1))
      {
        if ((v148 & 0x8000u) == 0LL) {
          int32_t v46 = (unsigned __int16)v148 >> 5;
        }
        else {
          int32_t v46 = DWORD1(v148);
        }
        if (icu::UnicodeString::doCompare((uint64_t)&v147, 0, v46, (uint64_t)"T", 0, -1))
        {
          if ((v148 & 0x8000u) == 0LL) {
            int32_t v47 = (unsigned __int16)v148 >> 5;
          }
          else {
            int32_t v47 = DWORD1(v148);
          }
          if (icu::UnicodeString::doCompare((uint64_t)&v147, 0, v47, (uint64_t)"L", 0, -1))
          {
            if ((v148 & 0x8000u) == 0LL) {
              int32_t v48 = (unsigned __int16)v148 >> 5;
            }
            else {
              int32_t v48 = DWORD1(v148);
            }
            if (!icu::UnicodeString::doCompare((uint64_t)&v147, 0, v48, (uint64_t)L"BEGIN", 0, -1))
            {
              v133 = "D";
              int v53 = sub_1807C3C7C((uint64_t)&v142, (uint64_t *)&v133, -1);
              BOOL v120 = v53 == 0;
              v132 = L"STANDARD";
              if (!sub_1807C3C7C((uint64_t)&v142, (uint64_t *)&v132, -1) || !v53)
              {
                int v54 = (unsigned __int16)v173 >> 5;
                if ((v173 & 0x8000u) != 0LL) {
                  int v54 = DWORD1(v173);
                }
                if (v54)
                {
                  if (v134[2]) {
                    icu::UVector::removeAllElements((uint64_t)v134);
                  }
                  unsigned int v121 = 0;
                  int v13 = 2;
                  if ((v168 & 1) != 0) {
                    __int16 v55 = 2;
                  }
                  else {
                    __int16 v55 = v168 & 0x1F;
                  }
                  LOWORD(v168) = v55;
                  __int16 v56 = v163 & 0x1F;
                  if ((v163 & 1) != 0) {
                    __int16 v56 = 2;
                  }
                  LOWORD(v163) = v56;
                  __int16 v57 = v158 & 0x1F;
                  if ((v158 & 1) != 0) {
                    __int16 v57 = 2;
                  }
                  LOWORD(v158) = v57;
                  goto LABEL_113;
                }
              }

              goto LABEL_5;
            }

            if ((v148 & 0x8000u) == 0LL) {
              int32_t v49 = (unsigned __int16)v148 >> 5;
            }
            else {
              int32_t v49 = DWORD1(v148);
            }
            icu::UnicodeString::doCompare((uint64_t)&v147, 0, v49, (uint64_t)"E", 0, -1);
          }

          else
          {
            *(double *)(v3 + 152) = sub_1809D676C((uint64_t)&v142, 0, (int *)a2);
          }

LABEL_155:
          uint64_t v66 = 0LL;
        }

        int v59 = 0;
        goto LABEL_157;
      }

      if (!v65)
      {
        if (*(int *)a2 <= 0)
        {
          uint64_t v66 = 0LL;
          *a2 = U_MEMORY_ALLOCATION_ERROR;
          goto LABEL_153;
        }

        goto LABEL_152;
      }

      icu::UnicodeString::UnicodeString(v65, (const icu::UnicodeString *)&v142, v58, (v62 - v58));
      if (*(int *)a2 > 0)
      {
        (*(void (**)(icu::UnicodeString *))(*(void *)v66 + 8LL))(v66);
LABEL_152:
        uint64_t v66 = 0LL;
      }

LABEL_153:
      int v59 = 1;
LABEL_157:
      icu::UVector::adoptElement((icu::UVector *)v134, v66, a2);
      int v58 = v62 + 1;
    }

    unsigned int v121 = 0;
LABEL_112:
    int v13 = 2;
LABEL_113:
    ++v14;
    unint64_t v12 = *(int **)(v3 + 80);
  }

  while (v14 < v12[2]);
LABEL_194:
  if (!LODWORD(v136[1])) {
    goto LABEL_5;
  }
  sub_1809D69E4(&v172, 0, &v157);
  __int128 v81 = (icu::InitialTimeZoneRule *)icu::UMemory::operator new(v80, (icu::UMemory *)0x50, v79);
  if (!v81)
  {
    goto LABEL_5;
  }

  __int128 v82 = v81;
  icu::InitialTimeZoneRule::InitialTimeZoneRule(v81, &v157, SHIDWORD(v123), v123);
  uint64_t v84 = (uint64_t *)*(unsigned int *)a2;
  uint64_t v85 = (icu::RuleBasedTimeZone *)icu::UMemory::operator new(v84, (icu::UMemory *)0x70, v83);
  if (!v85)
  {
    goto LABEL_197;
  }

  int v86 = (uint64_t *)v85;
  icu::RuleBasedTimeZone::RuleBasedTimeZone(v85, &v172, v82);
  if (SLODWORD(v136[1]) < 1) {
    goto LABEL_216;
  }
  signed int v87 = 0;
  int v88 = 0;
  unsigned int v89 = -1;
  do
  {
    __int128 v90 = (const void *)icu::UVector::elementAt((icu::UVector *)v136, v87);
    if (v90)
    {
      if (v91)
      {
        if (icu::AnnualTimeZoneRule::getEndYear(v91) == 0x7FFFFFFF)
        {
          unsigned int v89 = v87;
          ++v88;
        }
      }
    }

    ++v87;
  }

  while (v87 < SLODWORD(v136[1]));
  if (v88 >= 3)
  {
    __int128 v82 = 0LL;
    *a2 = U_ILLEGAL_ARGUMENT_ERROR;
    goto LABEL_221;
  }

  if (v88 != 1) {
    goto LABEL_216;
  }
  if (LODWORD(v136[1]) == 1)
  {
    icu::UVector::removeAllElements((uint64_t)v136);
    goto LABEL_216;
  }

  __int128 v93 = (icu::TimeZoneRule *)icu::UVector::elementAt((icu::UVector *)v136, v89);
  Rawint Offset = icu::TimeZoneRule::getRawOffset(v93);
  uint64_t DSTSavings = icu::TimeZoneRule::getDSTSavings(v93);
  double v129 = 0.0;
  v122 = (UChar **)v93;
  (*(void (**)(icu::TimeZoneRule *, void, void, double *))(*(void *)v93 + 56LL))( v93,  HIDWORD(v123),  v123,  &v129);
  double v97 = v129;
  double v128 = v129;
  signed int v98 = (signed int)v136[1];
  double v99 = v129;
  if (SLODWORD(v136[1]) >= 1)
  {
    signed int v100 = 0;
    do
    {
      if (v89 != v100)
      {
        __int128 v101 = (icu::TimeZoneRule *)icu::UVector::elementAt((icu::UVector *)v136, v100);
        *(double *)&v137 = 0.0;
        (*(void (**)(icu::TimeZoneRule *, uint64_t, uint64_t, void **))(*(void *)v101 + 64LL))( v101,  RawOffset,  DSTSavings,  &v137);
        __int128 v102 = v137;
        if (*(double *)&v137 > v128)
        {
          uint64_t v103 = icu::TimeZoneRule::getRawOffset(v101);
          uint64_t v104 = icu::TimeZoneRule::getDSTSavings(v101);
          (*((void (**)(UChar **, uint64_t, uint64_t, void, double *, double))*v122 + 9))( v122,  v103,  v104,  0LL,  &v128,  *(double *)&v102);
        }

        signed int v98 = (signed int)v136[1];
      }

      ++v100;
    }

    while (v100 < v98);
    double v99 = v128;
    double v97 = v129;
  }

  v127 = 0LL;
  uint64_t v141 = 0LL;
  __int128 v139 = 0u;
  __int128 v140 = 0u;
  __int128 v138 = 0u;
  *(double *)&v137 = COERCE_DOUBLE(off_18971B688);
  LOWORD(v138) = 2;
  if (v99 == v97)
  {
    __int128 v105 = icu::UMemory::operator new((uint64_t *)2, (icu::UMemory *)0x160, v96);
    if (v105)
    {
      Name = icu::TimeZoneRule::getName(v122, (UChar **)&v137);
      int v107 = icu::TimeZoneRule::getRawOffset((icu::TimeZoneRule *)v122);
      int v108 = icu::TimeZoneRule::getDSTSavings((icu::TimeZoneRule *)v122);
      icu::TimeArrayTimeZoneRule::TimeArrayTimeZoneRule((uint64_t)v105, Name, v107, v108, &v129, 1LL, 2);
    }
  }

  else
  {
    uint64_t v125 = 0LL;
    *(void *)v126 = 0LL;
    uint64_t v124 = 0LL;
    sub_1808FA670(&v126[1], v126, (_DWORD *)&v125 + 1, (int *)&v125, (int *)&v124 + 1, &v124, v99);
    __int128 v105 = icu::UMemory::operator new(v110, (icu::UMemory *)0x60, v109);
    if (v105)
    {
      v111 = icu::TimeZoneRule::getName(v122, (UChar **)&v137);
      int v112 = icu::TimeZoneRule::getRawOffset((icu::TimeZoneRule *)v122);
      int v113 = icu::TimeZoneRule::getDSTSavings((icu::TimeZoneRule *)v122);
      Rule = (const icu::DateTimeRule *)icu::AnnualTimeZoneRule::getRule((icu::AnnualTimeZoneRule *)v122);
      Startuint64_t Year = icu::AnnualTimeZoneRule::getStartYear((icu::AnnualTimeZoneRule *)v122);
      icu::AnnualTimeZoneRule::AnnualTimeZoneRule( (icu::AnnualTimeZoneRule *)v105,  (const icu::UnicodeString *)v111,  v112,  v113,  Rule,  StartYear,  v126[1]);
    }
  }

  sub_1807C9194((uint64_t)&v127, (uint64_t)v105, (int *)a2);
  __int128 v116 = (void *)*(unsigned int *)a2;
  if ((int)v116 > 0)
  {
    icu::UnicodeString::~UnicodeString(v116, (icu::UnicodeString *)&v137);
    if (v127) {
      (*(void (**)(void *))(*(void *)v127 + 8LL))(v127);
    }
LABEL_220:
    __int128 v82 = 0LL;
LABEL_221:
    (*(void (**)(uint64_t *))(*v86 + 8))(v86);
    if (!v82) {
      goto LABEL_5;
    }
LABEL_197:
    (*(void (**)(icu::InitialTimeZoneRule *))(*(void *)v82 + 8LL))(v82);
    goto LABEL_5;
  }

  icu::UVector::removeElementAt(v136, v89);
  __int128 v117 = v127;
  v127 = 0LL;
  icu::UVector::adoptElement((icu::UVector *)v136, v117, a2);
  int v118 = *a2;
  icu::UnicodeString::~UnicodeString(v119, (icu::UnicodeString *)&v137);
  if (v127) {
    (*(void (**)(void *))(*(void *)v127 + 8LL))(v127);
  }
  if (v118 > 0) {
    goto LABEL_220;
  }
LABEL_216:
  while (LODWORD(v136[1]))
  {
    __int128 v92 = (icu::TimeZoneRule *)icu::UVector::orphanElementAt((icu::UVector *)v136, 0);
    icu::RuleBasedTimeZone::addTransitionRule(v86, v92, a2);
  }

  icu::RuleBasedTimeZone::complete((uint64_t)v86, a2);
  *(void *)(v3 + 72) = v86;
  icu::UnicodeString::operator=((UChar **)(v3 + 8), &v172);
LABEL_5:
  icu::UVector::~UVector((icu::UVector *)v134);
  icu::UVector::~UVector((icu::UVector *)v136);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)&v142);
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v147);
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)&v152);
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v157);
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)&v162);
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v167);
  return icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)&v172);
}

double sub_1809D676C(uint64_t a1, int a2, int *a3)
{
  double v3 = 0.0;
  if (*a3 <= 0)
  {
    unsigned int v7 = *(unsigned __int16 *)(a1 + 8);
    else {
      unsigned int v8 = v7 >> 5;
    }
    if (v8 - 17 < 0xFFFFFFFE) {
      goto LABEL_15;
    }
    uint64_t v9 = a1 + 10;
    if ((v7 & 2) == 0) {
      uint64_t v9 = *(void *)(a1 + 24);
    }
    if (*(_WORD *)(v9 + 16) != 84) {
      goto LABEL_15;
    }
    if (v8 == 16)
    {
      int v10 = (__int16)v7;
      unsigned int v11 = v7 >> 5;
      if (v10 < 0) {
        unsigned int v11 = *(_DWORD *)(a1 + 12);
      }
      if (v11 < 0x10 || *(_WORD *)(v9 + 30) != 90) {
        goto LABEL_15;
      }
    }

    int v12 = sub_1809DA338(a1, 0, 4, a3);
    int v13 = sub_1809DA338(a1, 4u, 2, a3);
    int v14 = sub_1809DA338(a1, 6u, 2, a3);
    int v15 = sub_1809DA338(a1, 9u, 2, a3);
    int v16 = sub_1809DA338(a1, 0xBu, 2, a3);
    int v17 = sub_1809DA338(a1, 0xDu, 2, a3);
    if (*a3 > 0
      || ((v12 & 3) == 0
        ? ((HIDWORD(v21) = -1030792151 * v12 + 85899344,
            LODWORD(v21) = HIDWORD(v21),
            unsigned int v20 = v21 >> 2,
            LODWORD(v21) = HIDWORD(v21),
            (v21 >> 4) >= 0xA3D70B)
         ? (int v22 = 0)
         : (int v22 = 12),
           v20 <= 0x28F5C28 ? (unsigned int v19 = v22) : (unsigned int v19 = 12))
        : (unsigned int v19 = 0),
          v12 < 0
       || v13 < 1
       || v13 > 12
       || v14 < 1
       || v14 > byte_180A38CF0[v19 + (unint64_t)(v13 - 1)]
       || v15 < 0
       || v15 > 23
       || v16 < 0
       || v16 > 59
       || v17 < 0
       || v17 >= 60))
    {
LABEL_15:
      *a3 = 3;
    }

    else
    {
      double v23 = sub_1808FA338(v12, v13 - 1, v14) * 86400000.0 + (double)(3600000 * v15 + 60000 * v16 + 1000 * v17);
      double v24 = (double)a2;
      if (v8 == 16) {
        double v24 = 0.0;
      }
      return v23 - v24;
    }
  }

  return v3;
}

void *sub_1809D69E4(UChar **a1, int a2, UChar **a3)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  icu::UnicodeString::operator=(a3, a1);
  if (a2)
  {
    unsigned int v11 = L"(DST)";
    icu::UnicodeString::UnicodeString(v12, 1LL, &v11);
    if ((v13 & 0x8000u) == 0) {
      uint64_t v5 = v13 >> 5;
    }
    else {
      uint64_t v5 = v14;
    }
    icu::UnicodeString::doAppend((uint64_t)a3, (const icu::UnicodeString *)v12, 0, v5);
    return icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v12);
  }

  else
  {
    int v10 = L"(STD)";
    icu::UnicodeString::UnicodeString(v12, 1LL, &v10);
    if ((v13 & 0x8000u) == 0) {
      uint64_t v8 = v13 >> 5;
    }
    else {
      uint64_t v8 = v14;
    }
    icu::UnicodeString::doAppend((uint64_t)a3, (const icu::UnicodeString *)v12, 0, v8);
    return icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v12);
  }

uint64_t sub_1809D6B04(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 0LL;
  }
  unsigned int v5 = *(unsigned __int16 *)(a1 + 8);
  else {
    unsigned int v6 = v5 >> 5;
  }
  if ((v6 & 0xFFFFFFFD) != 5) {
    goto LABEL_18;
  }
  if ((v5 & 2) != 0) {
    unsigned int v7 = (unsigned __int16 *)(a1 + 10);
  }
  else {
    unsigned int v7 = *(unsigned __int16 **)(a1 + 24);
  }
  int v8 = *v7;
  if (v8 == 43)
  {
    int v9 = 1000;
  }

  else
  {
    if (v8 != 45)
    {
LABEL_18:
      uint64_t result = 0LL;
      *a2 = 3;
      return result;
    }

    int v9 = -1000;
  }

  int v10 = sub_1809DA338(a1, 1u, 2, a2);
  int v11 = sub_1809DA338(a1, 3u, 2, a2);
  if (v6 == 7) {
    int v12 = sub_1809DA338(a1, 5u, 2, a2);
  }
  else {
    int v12 = 0;
  }
  if (*a2 >= 1) {
    goto LABEL_18;
  }
  return (v9 * (v12 + 60 * (v11 + 60 * v10)));
}

icu::AnnualTimeZoneRule *sub_1809D6C1C( UChar **a1, int a2, int a3, icu::UVector *this, int a5, int *a6, double a7)
{
  v73[9] = *(UChar **)MEMORY[0x1895F89C0];
  if (*a6 > 0) {
    return 0LL;
  }
  if (!this || !*((_DWORD *)this + 2))
  {
    unsigned int v7 = 0LL;
    *a6 = 1;
    return v7;
  }

  memset(v73, 0, 64);
  uint64_t v15 = (UChar **)icu::UVector::elementAt(this, 0);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v73, v15);
  uint64_t v68 = 0LL;
  memset(v71, 0, sizeof(v71));
  int v72 = 0;
  int v66 = 7;
  int v67 = 0;
  double v65 = 0.0;
  sub_1809DA4B4(v73, (_DWORD *)&v68 + 1, &v68, &v67, (uint64_t)v71, &v66, &v65, a6);
  unsigned int v7 = 0LL;
  uint64_t v16 = *a6;
  int v17 = *((_DWORD *)this + 2);
  if (v17 != 1)
  {
    if (v17 > 7) {
      goto LABEL_104;
    }
    int v56 = HIDWORD(v68);
    if (HIDWORD(v68) == -1) {
      goto LABEL_104;
    }
    int v54 = v68;
    if (!(_DWORD)v68) {
      goto LABEL_104;
    }
    int v24 = v66;
    if (!v66) {
      goto LABEL_104;
    }
    if (v66 < 1)
    {
      int v20 = 31;
    }

    else
    {
      int v20 = 31;
      int v25 = (int *)v71;
      uint64_t v26 = v66;
      do
      {
        int v28 = *v25++;
        int v27 = v28;
        if (v28 <= 0) {
          v27 += dword_180A3E818[SHIDWORD(v68)] + 1;
        }
        if (v27 < v20) {
          int v20 = v27;
        }
        --v26;
      }

      while (v26);
    }

    double v29 = v65;
    if (v17 <= 1)
    {
      int v55 = HIDWORD(v68);
LABEL_76:
      double v65 = v29;
      int v18 = v55;
      if (v24 != 7) {
        goto LABEL_104;
      }
      goto LABEL_77;
    }

    unsigned int v30 = 1;
    int v53 = -1;
    int v55 = HIDWORD(v68);
    while (1)
    {
      int32_t v31 = (UChar **)icu::UVector::elementAt(this, v30);
      icu::UnicodeString::operator=(v73, v31);
      uint64_t v63 = 0LL;
      double v64 = 0.0;
      memset(v69, 0, sizeof(v69));
      int v70 = 0;
      unsigned int v61 = 7;
      sub_1809DA4B4(v73, (_DWORD *)&v63 + 1, &v63, &v62, (uint64_t)v69, (int *)&v61, &v64, a6);
      uint64_t v16 = *a6;
      if ((int)v16 > 0)
      {
        unsigned int v7 = 0LL;
        goto LABEL_105;
      }

      if (v64 > v29) {
        double v29 = v64;
      }
      int v32 = HIDWORD(v63);
      if (HIDWORD(v63) == -1) {
        goto LABEL_104;
      }
      if (!(_DWORD)v63) {
        goto LABEL_104;
      }
      uint64_t v33 = v61;
      if (!v61) {
        goto LABEL_104;
      }
      v24 += v61;
      if (v24 > 7 || (_DWORD)v63 != v54) {
        goto LABEL_104;
      }
      int v35 = HIDWORD(v63) - v56;
      if (HIDWORD(v63) != v56)
      {
        if (v53 == -1)
        {
          if (v35 > 0)
          {
            if (v35 != 11)
            {
              int v53 = HIDWORD(v63);
              if (v35 != 1) {
                goto LABEL_104;
              }
              goto LABEL_65;
            }
          }

          else
          {
            int v20 = 31;
            if (v35 != -11)
            {
              int v55 = HIDWORD(v63);
              int v53 = HIDWORD(v63);
              if (v35 != -1) {
                goto LABEL_104;
              }
              goto LABEL_65;
            }

            int v55 = HIDWORD(v63);
          }

          int v53 = HIDWORD(v63);
        }

        else if (HIDWORD(v63) != v53)
        {
          goto LABEL_104;
        }
      }

uint64_t *sub_1809D71E8(UChar **a1, unint64_t a2, int a3, int *a4, int a5, int *a6, double a7)
{
  double v25 = a7;
  unsigned int v7 = (uint64_t *)*a6;
  if ((int)v7 <= 0)
  {
    int v12 = a2;
    if (a4 && (uint64_t v14 = a4[2], (_DWORD)v14))
    {
      uint64_t v16 = (double *)uprv_malloc(8 * v14);
      if (v16)
      {
        uint64_t v19 = v16;
        if ((int)v14 >= 1)
        {
          uint64_t v20 = 0LL;
          while (1)
          {
            uint64_t v21 = icu::UVector::elementAt((icu::UVector *)a4, v20);
            v19[v20] = sub_1809D676C(v21, a5, a6);
            int v18 = (uint64_t *)*a6;
          }

          uprv_free(v19);
          return 0LL;
        }

void *icu::VTimeZone::writeZone(void *result, uint64_t *a2, UChar **a3, icu::UVector *a4, int *a5)
{
  uint64_t v120 = *MEMORY[0x1895F89C0];
  if (*a5 > 0) {
    return result;
  }
  unsigned int v5 = a5;
  int v8 = a2;
  uint64_t v9 = (uint64_t)result;
  uint64_t result = icu::VTimeZone::writeHeaders(result, a2, a5);
  if (*v5 > 0) {
    return result;
  }
  if (a4 && *((int *)a4 + 2) >= 1)
  {
    signed int v10 = 0;
    do
    {
      uint64_t v11 = icu::UVector::elementAt(a4, v10);
      unsigned int v12 = *(unsigned __int16 *)(v11 + 8);
      int v13 = (__int16)v12;
      unsigned int v14 = v12 >> 5;
      if (v13 >= 0) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = *(unsigned int *)(v11 + 12);
      }
      icu::UnicodeString::doAppend(*v8, (const icu::UnicodeString *)v11, 0, v15);
      icu::UnicodeString::doAppend(*v8, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
      ++v10;
    }

    while (v10 < *((_DWORD *)a4 + 2));
  }

  __int128 v116 = 0u;
  uint64_t v119 = 0LL;
  __int128 v118 = 0u;
  __int128 v117 = 0u;
  v115 = (UChar *)off_18971B688;
  LOWORD(v116) = 2;
  __int128 v111 = 0u;
  uint64_t v114 = 0LL;
  __int128 v113 = 0u;
  __int128 v112 = 0u;
  UErrorCode v110 = (UChar *)off_18971B688;
  LOWORD(v111) = 2;
  uint64_t v98 = 0LL;
  uint64_t v99 = 0LL;
  uint64_t v97 = 0LL;
  memset(v96, 0, sizeof(v96));
  icu::TimeZoneTransition::TimeZoneTransition(v96);
  __int128 v106 = 0u;
  uint64_t v109 = 0LL;
  __int128 v108 = 0u;
  __int128 v107 = 0u;
  __int128 v105 = (UChar *)off_18971B688;
  LOWORD(v106) = 2;
  if (!(*((unsigned int (**)(UChar **, void, _OWORD *, double))*a3 + 14))(a3, 0LL, v96, -1.84303903e17))
  {
    uint64_t v95 = 0LL;
    (*((void (**)(UChar **, void, char *, uint64_t *, int *, double))*a3 + 6))( a3,  0LL,  (char *)&v95 + 4,  &v95,  v5,  0.0);
    unint64_t v60 = *v5;
    if ((int)v60 <= 0)
    {
      int v63 = v95 + HIDWORD(v95);
      BOOL v64 = v95 != 0;
      __int128 v101 = 0u;
      __int128 v102 = 0u;
      uint64_t v104 = 0LL;
      __int128 v103 = 0u;
      signed int v100 = (UChar *)off_18971B688;
      LOWORD(v101) = 2;
      icu::UnicodeString::operator=(&v100, a3 + 1);
      sub_1809D69E4(&v100, v64, &v105);
      icu::VTimeZone::writeZonePropsByTime(v9, v8, v64, (uint64_t)&v105, v63, v63, 0, v5, 0.0 - (double)v63);
      int v65 = *v5;
      uint64_t v58 = (uint64_t)icu::UnicodeString::~UnicodeString(v66, (icu::UnicodeString *)&v100);
      if (v65 < 1)
      {
        uint64_t v68 = 0LL;
        int v67 = 0LL;
        goto LABEL_123;
      }
    }

    int v67 = 0LL;
    uint64_t v68 = 0LL;
LABEL_124:
    if (v68) {
LABEL_125:
    }
      (*(void (**)(icu::AnnualTimeZoneRule *))(*(void *)v68 + 8LL))(v68);
    goto LABEL_126;
  }

  uint64_t v90 = 0LL;
  __int128 v91 = a3;
  uint64_t v85 = v8;
  uint64_t v86 = v9;
  signed int v87 = v5;
  unint64_t v88 = 0LL;
  uint64_t v16 = 0LL;
  unint64_t v84 = 0LL;
  __int128 v89 = 0uLL;
  unsigned int v83 = 0;
  unint64_t v93 = 0LL;
  __int128 v94 = 0LL;
  uint64_t v17 = 0LL;
  int v92 = 0;
  uint64_t v18 = 0LL;
  uint64_t v19 = 0LL;
  uint64_t v20 = 0LL;
  double v21 = 0.0;
  double v22 = 0.0;
  double v23 = 0.0;
  double v24 = 0.0;
  while (1)
  {
    double Time = icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v96);
    uint64_t v26 = (UChar **)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v96);
    icu::TimeZoneRule::getName(v26, &v105);
    int v27 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v96);
    int DSTSavings = icu::TimeZoneRule::getDSTSavings(v27);
    double v29 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v96);
    Rawint Offset = icu::TimeZoneRule::getRawOffset(v29);
    int32_t v31 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v96);
    uint64_t v32 = icu::TimeZoneRule::getDSTSavings(v31) + RawOffset;
    uint64_t v33 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v96);
    uint64_t v34 = icu::TimeZoneRule::getDSTSavings(v33);
    int v35 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v96);
    int v36 = icu::TimeZoneRule::getRawOffset(v35);
    int v37 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v96);
    uint64_t v38 = icu::TimeZoneRule::getDSTSavings(v37) + v36;
    double v39 = icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v96);
    sub_1808FA670((int *)&v99 + 1, &v99, (_DWORD *)&v98 + 1, (int *)&v98, (int *)&v97 + 1, &v97, v39 + (double)(int)v32);
    uint64_t v40 = sub_1808FA744(SHIDWORD(v99), v99, SHIDWORD(v98));
    if (DSTSavings)
    {
      if (!v94)
      {
        int v41 = (const void *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v96);
        if (v41
        {
          __int128 v94 = (icu::AnnualTimeZoneRule *)(*(uint64_t (**)(icu::AnnualTimeZoneRule *))(*(void *)v43 + 24LL))(v43);
        }

        else
        {
          __int128 v94 = 0LL;
        }
      }

      int v47 = HIDWORD(v93);
      if (SHIDWORD(v93) >= 1)
      {
        int v49 = v92;
        int v48 = v93;
        if (HIDWORD(v99) == HIDWORD(v93) + HIDWORD(v90))
        {
          if ((v116 & 1) != 0)
          {
            int v53 = (v106 & 1) == 0;
          }

          else
          {
            int32_t v50 = (v106 & 0x8000u) == 0LL ? (unsigned __int16)v106 >> 5 : DWORD1(v106);
            int v51 = (v116 & 0x8000u) == 0LL ? (unsigned __int16)v116 >> 5 : DWORD1(v116);
            uint64_t v52 = (v116 & 2) != 0 ? (__int128 *)((char *)&v116 + 2) : (__int128 *)v117;
            int v53 = icu::UnicodeString::doCompare( (uint64_t)&v105,  0,  v50,  (uint64_t)v52,  v51 & (v51 >> 31),  v51 & ~(v51 >> 31));
            int v48 = v93;
            int v47 = HIDWORD(v93);
            int v49 = v92;
          }

          if (!v53
            && (_DWORD)v20 == (_DWORD)v32
            && (_DWORD)v18 == (_DWORD)v38
            && v48 == (_DWORD)v99
            && v49 == (_DWORD)v98
            && (_DWORD)v17 == (_DWORD)v40
            && HIDWORD(v89) == (_DWORD)v97)
          {
            int v59 = v47 + 1;
            uint64_t v32 = v20;
            uint64_t v34 = v19;
            uint64_t v38 = v18;
            uint64_t v40 = v17;
LABEL_65:
            unint64_t v93 = __PAIR64__(v59, v48);
            int v92 = v49;
            uint64_t v61 = v16;
            double v23 = Time;
            if (v16 && v94)
            {
              double v23 = Time;
              UErrorCode v69 = (icu::DateTimeRule *)v86;
              unsigned int v5 = v87;
              int v8 = v85;
              int v70 = v89;
              int v71 = v59;
LABEL_92:
              uint64_t v16 = v61;
              if (v71 == 1)
              {
                int v67 = v94;
                uint64_t v58 = (uint64_t)icu::VTimeZone::writeFinalRule(v69, v8, 1, v94, (int)v32 - (int)v34, v34, v5, v24);
                uint64_t v68 = (icu::AnnualTimeZoneRule *)v16;
                int v72 = v88;
                int v73 = HIDWORD(v88);
              }

              else
              {
                Rule = (icu::DateTimeRule *)icu::AnnualTimeZoneRule::getRule(v94);
                if (sub_1809D8D6C(v93, v40, v92, Rule))
                {
                  icu::VTimeZone::writeZonePropsByDOW( (uint64_t)v69,  v8,  1,  (uint64_t)&v115,  v32,  v38,  v93,  v40,  v24,  1.83882169e17,  v92,  v5);
                  int v67 = v94;
                }

                else
                {
                  icu::VTimeZone::writeZonePropsByDOW( (uint64_t)v69,  v8,  1,  (uint64_t)&v115,  v32,  v38,  v93,  v40,  v24,  v23,  v92,  v5);
                  unint64_t v60 = *v5;
                  if ((int)v60 > 0)
                  {
LABEL_111:
                    int v67 = v94;
                    uint64_t v68 = (icu::AnnualTimeZoneRule *)v16;
                    goto LABEL_124;
                  }

                  signed int v100 = 0LL;
                  int v67 = v94;
                  uint64_t v58 = (*(uint64_t (**)(icu::AnnualTimeZoneRule *, void, uint64_t, void, UChar **, double))(*(void *)v94 + 72LL))( v94,  (v32 - v34),  v34,  0LL,  &v100,  v23);
                  if ((_DWORD)v58) {
                    uint64_t v58 = (uint64_t)icu::VTimeZone::writeFinalRule( v69,  v8,  1,  v94,  (int)v32 - (int)v34,  v34,  v5,  *(double *)&v100);
                  }
                }

                uint64_t v68 = (icu::AnnualTimeZoneRule *)v16;
                int v72 = v88;
                int v73 = HIDWORD(v88);
              }

              unint64_t v60 = v90;
              if (*v5 > 0) {
                goto LABEL_124;
              }
              goto LABEL_100;
            }

            goto LABEL_84;
          }
        }

        if (v47 == 1) {
          icu::VTimeZone::writeZonePropsByTime(v86, v85, 1, (uint64_t)&v115, v20, v18, 1, v87, v24);
        }
        else {
          icu::VTimeZone::writeZonePropsByDOW(v86, v85, 1, (uint64_t)&v115, v20, v18, v48, v17, v24, v23, v49, v87);
        }
        unint64_t v60 = *v87;
      }

      icu::UnicodeString::operator=(&v115, &v105);
      int v48 = v99;
      HIDWORD(v90) = HIDWORD(v99);
      int v49 = v98;
      int v59 = 1;
      double v24 = Time;
      HIDWORD(v89) = v97;
      goto LABEL_65;
    }

    if (!v16)
    {
      int v44 = (const void *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v96);
      if (v44
      {
        uint64_t v16 = (*(uint64_t (**)(icu::AnnualTimeZoneRule *))(*(void *)v46 + 24LL))(v46);
      }

      else
      {
        uint64_t v16 = 0LL;
      }
    }

    int v54 = v90;
    if ((int)v90 >= 1)
    {
      if (HIDWORD(v99) == (_DWORD)v90 + HIDWORD(v84))
      {
        if ((v111 & 1) != 0)
        {
          uint64_t v58 = (v106 & 1) == 0;
        }

        else
        {
          int32_t v55 = (v106 & 0x8000u) == 0LL ? (unsigned __int16)v106 >> 5 : DWORD1(v106);
          int v56 = (v111 & 0x8000u) == 0LL ? (unsigned __int16)v111 >> 5 : DWORD1(v111);
          int v57 = (v111 & 2) != 0 ? (__int128 *)((char *)&v111 + 2) : (__int128 *)v112;
          uint64_t v58 = icu::UnicodeString::doCompare( (uint64_t)&v105,  0,  v55,  (uint64_t)v57,  v56 & (v56 >> 31),  v56 & ~(v56 >> 31));
          int v54 = v90;
        }

        if (!(_DWORD)v58
          && *(void *)((char *)&v89 + 4) == __PAIR64__(v32, v38)
          && v88 == __PAIR64__(v99, v98)
          && (_DWORD)v89 == (_DWORD)v40
          && (_DWORD)v84 == (_DWORD)v97)
        {
          int v62 = v54 + 1;
          goto LABEL_80;
        }
      }

      if (v54 == 1) {
        icu::VTimeZone::writeZonePropsByTime(v86, v85, 0, (uint64_t)&v110, SDWORD2(v89), DWORD1(v89), 1, v87, v22);
      }
      else {
        icu::VTimeZone::writeZonePropsByDOW( v86,  v85,  0,  (uint64_t)&v110,  SDWORD2(v89),  DWORD1(v89),  SHIDWORD(v88),  v89,  v22,  v21,  v88,  v87);
      }
      unint64_t v60 = *v87;
    }

    uint64_t v58 = (uint64_t)icu::UnicodeString::operator=(&v110, &v105);
    int v62 = 1;
    DWORD2(v89) = v32;
    unsigned int v83 = v34;
    unint64_t v88 = __PAIR64__(v99, v98);
    *(void *)&__int128 v89 = __PAIR64__(v38, v40);
    double v22 = Time;
    unint64_t v84 = __PAIR64__(HIDWORD(v99), v97);
LABEL_80:
    uint64_t v61 = v16;
    LODWORD(v90) = v62;
    if (!v16)
    {
      uint64_t v32 = v20;
      uint64_t v34 = v19;
      uint64_t v38 = v18;
      uint64_t v40 = v17;
      double v21 = Time;
      goto LABEL_84;
    }

    uint64_t v32 = v20;
    uint64_t v34 = v19;
    uint64_t v38 = v18;
    uint64_t v40 = v17;
    double v21 = Time;
    if (v94) {
      break;
    }
LABEL_84:
    uint64_t v16 = v61;
    uint64_t v58 = (*((uint64_t (**)(UChar **, void, _OWORD *, double))*v91 + 14))(v91, 0LL, v96, Time);
    uint64_t v17 = v40;
    uint64_t v18 = v38;
    uint64_t v19 = v34;
    uint64_t v20 = v32;
    if (!(_DWORD)v58) {
      goto LABEL_89;
    }
  }

  double v21 = Time;
  LODWORD(v40) = v17;
  LODWORD(v38) = v18;
  uint64_t v34 = v19;
  LODWORD(v32) = v20;
LABEL_89:
  int v71 = HIDWORD(v93);
  if (SHIDWORD(v93) < 1)
  {
    UErrorCode v69 = (icu::DateTimeRule *)v86;
    unsigned int v5 = v87;
    int v67 = v94;
    uint64_t v68 = (icu::AnnualTimeZoneRule *)v16;
    int v8 = v85;
    int v73 = HIDWORD(v88);
    int v70 = v89;
    int v72 = v88;
    LODWORD(v60) = v90;
    goto LABEL_100;
  }

  UErrorCode v69 = (icu::DateTimeRule *)v86;
  unsigned int v5 = v87;
  int v8 = v85;
  int v70 = v89;
  if (v94)
  {
    uint64_t v61 = v16;
    goto LABEL_92;
  }

  if (HIDWORD(v93) == 1) {
    icu::VTimeZone::writeZonePropsByTime(v86, v85, 1, (uint64_t)&v115, v32, v38, 1, v87, v24);
  }
  else {
    icu::VTimeZone::writeZonePropsByDOW(v86, v85, 1, (uint64_t)&v115, v32, v38, v93, v40, v24, v23, v92, v87);
  }
  int v67 = 0LL;
  uint64_t v68 = (icu::AnnualTimeZoneRule *)v16;
  int v72 = v88;
  int v73 = HIDWORD(v88);
  unint64_t v60 = v90;
  if (*v87 >= 1) {
    goto LABEL_124;
  }
LABEL_100:
  if (v68)
  {
    if ((_DWORD)v60 == 1)
    {
      BOOL v75 = v68;
      uint64_t v58 = (uint64_t)icu::VTimeZone::writeFinalRule(v69, v8, 0, v68, DWORD2(v89) - v83, v83, v5, v22);
      uint64_t v68 = v75;
    }

    else
    {
      unsigned int v76 = v68;
      int v77 = (icu::DateTimeRule *)icu::AnnualTimeZoneRule::getRule(v68);
      if (sub_1809D8D6C(v73, v70, v72, v77))
      {
        icu::VTimeZone::writeZonePropsByDOW( (uint64_t)v69,  v8,  0,  (uint64_t)&v110,  SDWORD2(v89),  DWORD1(v89),  v73,  v70,  v22,  1.83882169e17,  v72,  v5);
      }

      else
      {
        icu::VTimeZone::writeZonePropsByDOW( (uint64_t)v69,  v8,  0,  (uint64_t)&v110,  SDWORD2(v89),  DWORD1(v89),  v73,  v70,  v22,  v21,  v72,  v5);
        if (*v5 > 0)
        {
          uint64_t v68 = v76;
          goto LABEL_125;
        }

        signed int v100 = 0LL;
        uint64_t v82 = DWORD2(v89) - v83;
        uint64_t v58 = (*(uint64_t (**)(icu::AnnualTimeZoneRule *, uint64_t, void, void, UChar **, double))(*(void *)v76 + 72LL))( v76,  v82,  v83,  0LL,  &v100,  v21);
        if ((_DWORD)v58) {
          uint64_t v58 = (uint64_t)icu::VTimeZone::writeFinalRule(v69, v8, 0, v76, v82, v83, v5, *(double *)&v100);
        }
      }

      uint64_t v68 = v76;
    }

    if (*v5 > 0) {
      goto LABEL_125;
    }
LABEL_123:
    unint64_t v79 = v68;
    icu::VTimeZone::writeFooter(v58, v8, v5);
    uint64_t v68 = v79;
    goto LABEL_124;
  }

  if ((_DWORD)v60 == 1) {
    icu::VTimeZone::writeZonePropsByTime((uint64_t)v69, v8, 0, (uint64_t)&v110, SDWORD2(v89), DWORD1(v89), 1, v5, v22);
  }
  else {
    icu::VTimeZone::writeZonePropsByDOW( (uint64_t)v69,  v8,  0,  (uint64_t)&v110,  SDWORD2(v89),  DWORD1(v89),  v73,  v70,  v22,  v21,  v72,  v5);
  }
  unint64_t v60 = *v5;
  if ((int)v60 < 1)
  {
    uint64_t v68 = 0LL;
    goto LABEL_123;
  }

uint64_t sub_1809D7FFC(uint64_t a1, double a2)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  if (a2 >= -1.84303903e17)
  {
    if (a2 <= 1.83882169e17) {
      uint64_t v3 = (uint64_t)a2;
    }
    else {
      uint64_t v3 = 183882168921600000LL;
    }
  }

  else
  {
    uint64_t v3 = -184303902528000000LL;
  }

  uint64_t v4 = 0LL;
  memset(v9, 0, sizeof(v9));
  if (v3 >= 0) {
    unint64_t v5 = v3;
  }
  else {
    unint64_t v5 = -v3;
  }
  do
  {
    *((_DWORD *)v9 + v4++) = v5 % 0xA;
    BOOL v6 = v5 > 9;
    v5 /= 0xAuLL;
  }

  while (v6);
  if (v3 < 0)
  {
    __int16 v8 = 45;
    icu::UnicodeString::doAppend(a1, (uint64_t)&v8, 0, 1LL);
  }

  do
  {
    __int16 v8 = *((_WORD *)v9 + 2 * v4 - 2) + 48;
    icu::UnicodeString::doAppend(a1, (uint64_t)&v8, 0, 1LL);
    --v4;
  }

  while (v4 > 0);
  return a1;
}

void *icu::VTimeZone::writeHeaders(void *result, uint64_t *a2, int *a3)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  if (*a3 > 0) {
    return result;
  }
  uint64_t v4 = result;
  __int128 v24 = 0u;
  uint64_t v27 = 0LL;
  __int128 v26 = 0u;
  __int128 v25 = 0u;
  double v23 = (UChar *)off_18971B688;
  LOWORD(v24) = 2;
  icu::UnicodeString::operator=(&v23, (UChar **)(result[9] + 8LL));
  icu::UnicodeString::doAppend(*a2, (uint64_t)L"BEGIN", 0, 0xFFFFFFFFLL);
  v16[8] = L"BEGIN";
  uint64_t v5 = *a2;
  LOWORD(v18) = 58;
  icu::UnicodeString::doAppend(v5, (uint64_t)&v18, 0, 1LL);
  icu::UnicodeString::doAppend(*a2, (uint64_t)L"VTIMEZONE", 0, 0xFFFFFFFFLL);
  v16[7] = L"VTIMEZONE";
  icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
  v16[6] = L"\r\n";
  icu::UnicodeString::doAppend(*a2, (uint64_t)L"TZID", 0, 0xFFFFFFFFLL);
  v16[5] = L"TZID";
  uint64_t v6 = *a2;
  LOWORD(v18) = 58;
  icu::UnicodeString::doAppend(v6, (uint64_t)&v18, 0, 1LL);
  if ((v24 & 0x8000u) == 0LL) {
    uint64_t v7 = (unsigned __int16)v24 >> 5;
  }
  else {
    uint64_t v7 = DWORD1(v24);
  }
  icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)&v23, 0, v7);
  icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
  _OWORD v16[4] = L"\r\n";
  if ((__int16)v4[12] < 0)
  {
    if (*((_DWORD *)v4 + 25)) {
      goto LABEL_7;
    }
  }

  else if (*((unsigned __int16 *)v4 + 48) >> 5)
  {
LABEL_7:
    icu::UnicodeString::doAppend(*a2, (uint64_t)"T", 0, 0xFFFFFFFFLL);
    void v16[3] = "T";
    uint64_t v8 = *a2;
    LOWORD(v18) = 58;
    icu::UnicodeString::doAppend(v8, (uint64_t)&v18, 0, 1LL);
    unsigned int v9 = *((unsigned __int16 *)v4 + 48);
    int v10 = (__int16)v9;
    unsigned int v11 = v9 >> 5;
    if (v10 >= 0) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = *((unsigned int *)v4 + 25);
    }
    icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)(v4 + 11), 0, v12);
    icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
    _OWORD v16[2] = L"\r\n";
  }

  int v13 = &icu::Calendar::kYearPrecedence[1][1][1];
  if (*((double *)v4 + 19) != 1.83882169e17)
  {
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    uint64_t v22 = 0LL;
    __int128 v21 = 0u;
    uint64_t v18 = off_18971B688;
    LOWORD(v19) = 2;
    icu::UnicodeString::doAppend(*a2, (uint64_t)"L", 0, 0xFFFFFFFFLL);
    v16[1] = "L";
    uint64_t v14 = *a2;
    __int16 v17 = 58;
    icu::UnicodeString::doAppend(v14, (uint64_t)&v17, 0, 1LL);
    sub_1809D93C4((uint64_t)&v18, *((double *)v4 + 19));
    __int16 v17 = 90;
    icu::UnicodeString::doAppend((uint64_t)&v18, (uint64_t)&v17, 0, 1LL);
    if ((v19 & 0x8000u) == 0LL) {
      uint64_t v15 = (unsigned __int16)v19 >> 5;
    }
    else {
      uint64_t v15 = DWORD1(v19);
    }
    icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)&v18, 0, v15);
    icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
    v16[0] = L"\r\n";
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v18);
  }

  return icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v23);
}

void icu::VTimeZone::writeZonePropsByTime( uint64_t a1, uint64_t *a2, int a3, uint64_t a4, signed int a5, unsigned int a6, int a7, int *a8, double a9)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (*a8 <= 0)
  {
    icu::VTimeZone::beginZoneProps(a9, a1, a2, a3, a4, a5, a6, a8);
    if (*a8 <= 0)
    {
      if (a7)
      {
        icu::UnicodeString::doAppend(*a2, (uint64_t)L"RDATE", 0, 0xFFFFFFFFLL);
        v18[1] = L"RDATE";
        uint64_t v16 = *a2;
        LOWORD(v19) = 58;
        icu::UnicodeString::doAppend(v16, (uint64_t)&v19, 0, 1LL);
        __int128 v20 = 0u;
        __int128 v21 = 0u;
        uint64_t v23 = 0LL;
        __int128 v22 = 0u;
        __int128 v19 = off_18971B688;
        LOWORD(v20) = 2;
        sub_1809D93C4((uint64_t)&v19, (double)a5 + a9);
        if ((v20 & 0x8000u) == 0LL) {
          uint64_t v17 = (unsigned __int16)v20 >> 5;
        }
        else {
          uint64_t v17 = DWORD1(v20);
        }
        icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)&v19, 0, v17);
        icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
        v18[0] = L"\r\n";
        uint64_t v15 = icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v19);
      }

      icu::VTimeZone::endZoneProps((uint64_t)v15, a2, a3, a8);
    }
  }

void icu::VTimeZone::writeZonePropsByDOW( uint64_t a1, uint64_t *a2, int a3, uint64_t a4, signed int a5, unsigned int a6, int a7, int a8, double a9, double a10, int a11, int *a12)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  if (*a12 <= 0)
  {
    icu::VTimeZone::beginZoneProps(a9, a1, a2, a3, a4, a5, a6, a12);
    if (*a12 <= 0)
    {
      icu::VTimeZone::beginRRULE(v18, a2, a7, a12);
      if (*a12 <= 0)
      {
        icu::UnicodeString::doAppend(*a2, (uint64_t)"B", 0, 0xFFFFFFFFLL);
        uint64_t v19 = *a2;
        LOWORD(v24) = 61;
        icu::UnicodeString::doAppend(v19, (uint64_t)&v24, 0, 1LL);
        __int128 v25 = 0u;
        __int128 v26 = 0u;
        uint64_t v28 = 0LL;
        __int128 v27 = 0u;
        uint64_t v24 = off_18971B688;
        LOWORD(v25) = 2;
        sub_1809D99C0(a8, 0, (uint64_t)&v24);
        if ((v25 & 0x8000u) == 0LL) {
          uint64_t v20 = (unsigned __int16)v25 >> 5;
        }
        else {
          uint64_t v20 = DWORD1(v25);
        }
        icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)&v24, 0, v20);
        icu::UnicodeString::doAppend(*a2, (uint64_t)&aS_4[6 * a11 - 6], 0, 0xFFFFFFFFLL);
        if (a10 == 1.83882169e17
          || (uint64_t v21 = sub_1809D93C4((uint64_t)&v24, (double)a5 + a10),
              icu::VTimeZone::appendUNTIL(v21, a2, (uint64_t)&v24, a12),
              unint64_t v22 = *a12,
              (int)v22 <= 0))
        {
          uint64_t v23 = icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
          icu::VTimeZone::endZoneProps(v23, a2, a3, a12);
        }

        icu::UnicodeString::~UnicodeString((void *)v22, (icu::UnicodeString *)&v24);
      }
    }
  }

icu::DateTimeRule *icu::VTimeZone::writeFinalRule( icu::DateTimeRule *result, uint64_t *a2, int a3, icu::AnnualTimeZoneRule *this, int a5, int a6, int *a7, double a8)
{
  uint64_t v64 = *MEMORY[0x1895F89C0];
  if (*a7 > 0) {
    return result;
  }
  uint64_t v15 = result;
  uint64_t result = (icu::DateTimeRule *)icu::AnnualTimeZoneRule::getRule(this);
  if (*a7 > 0) {
    return result;
  }
  uint64_t v16 = result;
  uint64_t result = (icu::DateTimeRule *)icu::DateTimeRule::getTimeRuleType(result);
  unsigned int v57 = result;
  if ((_DWORD)result)
  {
    int RuleMillisInDay = icu::DateTimeRule::getRuleMillisInDay(v16);
    if (icu::DateTimeRule::getTimeRuleType(v16) == 2)
    {
      int v18 = a6 + a5;
    }

    else if (icu::DateTimeRule::getTimeRuleType(v16) == 1)
    {
      int v18 = a6;
    }

    else
    {
      int v18 = 0;
    }

    unsigned int v20 = v18 + RuleMillisInDay;
    int v55 = a3;
    if (v18 + RuleMillisInDay < 0)
    {
      char v21 = 0;
      int v54 = v20 + 86400000;
      int v22 = -1;
    }

    else
    {
      if (v20 <= 0x5265BFF)
      {
        int v53 = 0;
        int v54 = v18 + RuleMillisInDay;
        char v21 = 1;
LABEL_18:
        int RuleMonth = icu::DateTimeRule::getRuleMonth(v16);
        int RuleDayOfMonth = icu::DateTimeRule::getRuleDayOfMonth(v16);
        RuleDayOfWeeuint64_t k = icu::DateTimeRule::getRuleDayOfWeek(v16);
        int DateRuleType = icu::DateTimeRule::getDateRuleType(v16);
        int v27 = DateRuleType;
        if ((v21 & 1) != 0)
        {
          a3 = v55;
          if (!DateRuleType) {
            goto LABEL_40;
          }
        }

        else
        {
          int v28 = RuleDayOfMonth;
          if (DateRuleType == 1)
          {
            int RuleWeekInMonth = icu::DateTimeRule::getRuleWeekInMonth(v16);
            if (RuleWeekInMonth < 1)
            {
              int v28 = dword_180A3E818[RuleMonth] - RuleWeekInMonth + 8 * RuleWeekInMonth + 7;
              int v27 = 3;
            }

            else
            {
              int v28 = 7 * RuleWeekInMonth - 6;
              int v27 = 2;
            }
          }

          int v30 = v28 + v53;
          if (v30)
          {
            uint64_t v26 = dword_180A3E818[RuleMonth];
            a3 = v55;
            if (v30 > (int)v26)
            {
              if (RuleMonth <= 10) {
                ++RuleMonth;
              }
              else {
                int RuleMonth = 0;
              }
              int v30 = 1;
            }
          }

          else
          {
            if (RuleMonth >= 1) {
              --RuleMonth;
            }
            else {
              int RuleMonth = 11;
            }
            uint64_t v26 = (uint64_t)dword_180A3E818;
            int v30 = dword_180A3E818[RuleMonth];
            a3 = v55;
          }

          int RuleDayOfMonth = v30;
          if (!v27)
          {
LABEL_40:
            uint64_t result = (icu::DateTimeRule *)icu::UMemory::operator new((uint64_t *)v26, (icu::UMemory *)0x28, v25);
            if (result)
            {
              Rule = result;
              uint64_t result = (icu::DateTimeRule *)icu::DateTimeRule::DateTimeRule( (uint64_t)result,  RuleMonth,  RuleDayOfMonth,  v54,  0);
              goto LABEL_46;
            }

            goto LABEL_54;
          }

          LODWORD(v26) = RuleDayOfWeek + v53;
          if (RuleDayOfWeek + v53 < 1)
          {
            uint64_t v26 = 7LL;
          }

          else if (v26 > 7)
          {
            uint64_t v26 = 1LL;
          }

          else
          {
            uint64_t v26 = v26;
          }

          RuleDayOfWeeuint64_t k = v26;
        }

        uint64_t result = (icu::DateTimeRule *)icu::UMemory::operator new((uint64_t *)v26, (icu::UMemory *)0x28, v25);
        if (result)
        {
          Rule = result;
          uint64_t result = (icu::DateTimeRule *)icu::DateTimeRule::DateTimeRule( (uint64_t)result,  RuleMonth,  RuleDayOfMonth,  RuleDayOfWeek,  v27 == 2,  v54,  0);
LABEL_46:
          if (*a7 >= 1) {
            return result;
          }
          goto LABEL_47;
        }

uint64_t sub_1809D8D6C(int a1, int a2, int a3, icu::DateTimeRule *this)
{
  if (icu::DateTimeRule::getRuleMonth(this) != a1
    || icu::DateTimeRule::getRuleDayOfWeek(this) != a3
    || icu::DateTimeRule::getTimeRuleType(this))
  {
    return 0LL;
  }

  if (icu::DateTimeRule::getDateRuleType(this) == 1
    && icu::DateTimeRule::getRuleWeekInMonth(this) == a2)
  {
    return 1LL;
  }

  int RuleDayOfMonth = icu::DateTimeRule::getRuleDayOfMonth(this);
  if (icu::DateTimeRule::getDateRuleType(this) == 2)
  {
    BOOL v10 = RuleDayOfMonth % 7 == 1 && (RuleDayOfMonth + 6) / 7 == a2;
    if (v10) {
      return 1LL;
    }
    if (a1 != 1)
    {
      int v11 = dword_180A3E818[a1] - RuleDayOfMonth;
      BOOL v10 = v11 % 7 == 6;
      int v12 = ((unint64_t)(1840700269LL * (v11 + 1)) >> 32) + ~v11;
      int v13 = (v12 >> 2) + (v12 >> 31);
      if (v10 && v13 == a2) {
        return 1LL;
      }
    }
  }

  if (icu::DateTimeRule::getDateRuleType(this) == 3
    && (!(RuleDayOfMonth % 7) ? (BOOL v15 = RuleDayOfMonth / 7 == a2) : (BOOL v15 = 0),
        v15
     || a1 != 1
     && (int v16 = dword_180A3E818[a1] - RuleDayOfMonth, (-1227133513 * v16 + 306783378) <= 0x24924924)
     && ((int)(((unint64_t)(1840700269LL * v16) >> 32) - v16) >> 2)
      + ((((unint64_t)(1840700269LL * v16) >> 32) - v16) >> 31)
      - 1 == a2))
  {
    return 1LL;
  }

  else
  {
    return 0LL;
  }

uint64_t icu::VTimeZone::writeFooter(uint64_t a1, uint64_t *a2, int *a3)
{
  if (*a3 <= 0)
  {
    icu::UnicodeString::doAppend(*a2, (uint64_t)"E", 0, 0xFFFFFFFFLL);
    uint64_t v4 = *a2;
    __int16 v6 = 58;
    icu::UnicodeString::doAppend(v4, (uint64_t)&v6, 0, 1LL);
    icu::UnicodeString::doAppend(*a2, (uint64_t)L"VTIMEZONE", 0, 0xFFFFFFFFLL);
    return icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
  }

  return result;
}

void icu::VTimeZone::beginZoneProps( double a1, uint64_t a2, uint64_t *a3, int a4, uint64_t a5, signed int a6, unsigned int a7, int *a8)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  if (*a8 <= 0)
  {
    icu::UnicodeString::doAppend(*a3, (uint64_t)L"BEGIN", 0, 0xFFFFFFFFLL);
    v27[11] = L"BEGIN";
    uint64_t v14 = *a3;
    LOWORD(v29) = 58;
    icu::UnicodeString::doAppend(v14, (uint64_t)&v29, 0, 1LL);
    uint64_t v15 = *a3;
    if (a4)
    {
      icu::UnicodeString::doAppend(v15, (uint64_t)"D", 0, 0xFFFFFFFFLL);
      v27[10] = "D";
    }

    else
    {
      icu::UnicodeString::doAppend(v15, (uint64_t)L"STANDARD", 0, 0xFFFFFFFFLL);
      v27[9] = L"STANDARD";
    }

    icu::UnicodeString::doAppend(*a3, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
    _BYTE v27[8] = L"\r\n";
    __int128 v30 = 0u;
    uint64_t v33 = 0LL;
    __int128 v32 = 0u;
    __int128 v31 = 0u;
    uint64_t v29 = off_18971B688;
    LOWORD(v30) = 2;
    icu::UnicodeString::doAppend(*a3, (uint64_t)"T", 0, 0xFFFFFFFFLL);
    _OWORD v27[7] = "T";
    uint64_t v16 = *a3;
    __int16 v28 = 58;
    icu::UnicodeString::doAppend(v16, (uint64_t)&v28, 0, 1LL);
    sub_1809DA220(a7, (uint64_t)&v29);
    if ((v30 & 0x8000u) == 0LL) {
      uint64_t v17 = (unsigned __int16)v30 >> 5;
    }
    else {
      uint64_t v17 = DWORD1(v30);
    }
    icu::UnicodeString::doAppend(*a3, (const icu::UnicodeString *)&v29, 0, v17);
    icu::UnicodeString::doAppend(*a3, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
    v27[6] = L"\r\n";
    icu::UnicodeString::doAppend(*a3, (uint64_t)L"TZOFFSETFROM", 0, 0xFFFFFFFFLL);
    v27[5] = L"TZOFFSETFROM";
    uint64_t v18 = *a3;
    __int16 v28 = 58;
    icu::UnicodeString::doAppend(v18, (uint64_t)&v28, 0, 1LL);
    sub_1809DA220(a6, (uint64_t)&v29);
    if ((v30 & 0x8000u) == 0LL) {
      uint64_t v19 = (unsigned __int16)v30 >> 5;
    }
    else {
      uint64_t v19 = DWORD1(v30);
    }
    icu::UnicodeString::doAppend(*a3, (const icu::UnicodeString *)&v29, 0, v19);
    icu::UnicodeString::doAppend(*a3, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
    v27[4] = L"\r\n";
    icu::UnicodeString::doAppend(*a3, (uint64_t)"T", 0, 0xFFFFFFFFLL);
    v27[3] = "T";
    uint64_t v20 = *a3;
    __int16 v28 = 58;
    icu::UnicodeString::doAppend(v20, (uint64_t)&v28, 0, 1LL);
    unsigned int v21 = *(unsigned __int16 *)(a5 + 8);
    int v22 = (__int16)v21;
    unsigned int v23 = v21 >> 5;
    if (v22 >= 0) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = *(unsigned int *)(a5 + 12);
    }
    icu::UnicodeString::doAppend(*a3, (const icu::UnicodeString *)a5, 0, v24);
    icu::UnicodeString::doAppend(*a3, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
    _OWORD v27[2] = L"\r\n";
    icu::UnicodeString::doAppend(*a3, (uint64_t)"D", 0, 0xFFFFFFFFLL);
    v27[1] = "D";
    uint64_t v25 = *a3;
    __int16 v28 = 58;
    icu::UnicodeString::doAppend(v25, (uint64_t)&v28, 0, 1LL);
    sub_1809D93C4((uint64_t)&v29, (double)a6 + a1);
    if ((v30 & 0x8000u) == 0LL) {
      uint64_t v26 = (unsigned __int16)v30 >> 5;
    }
    else {
      uint64_t v26 = DWORD1(v30);
    }
    icu::UnicodeString::doAppend(*a3, (const icu::UnicodeString *)&v29, 0, v26);
    icu::UnicodeString::doAppend(*a3, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
    v27[0] = L"\r\n";
    icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v29);
  }

uint64_t sub_1809D93C4(uint64_t a1, double a2)
{
  int v10 = 0;
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  int v7 = 0;
  sub_1808FA670(&v10, (_DWORD *)&v9 + 1, &v9, (int *)&v8 + 1, (int *)&v8, &v7, a2);
  if ((*(_WORD *)(a1 + 8) & 1) != 0) {
    __int16 v3 = 2;
  }
  else {
    __int16 v3 = *(_WORD *)(a1 + 8) & 0x1F;
  }
  *(_WORD *)(a1 + 8) = v3;
  sub_1809D99C0(v10, 4u, a1);
  sub_1809D99C0(HIDWORD(v9) + 1, 2u, a1);
  sub_1809D99C0(v9, 2u, a1);
  __int16 v11 = 84;
  icu::UnicodeString::doAppend(a1, (uint64_t)&v11, 0, 1LL);
  int v4 = v7 % 3600000 / 60000;
  int v5 = v7 % 3600000 % 60000 / 1000;
  sub_1809D99C0(v7 / 3600000, 2u, a1);
  sub_1809D99C0(v4, 2u, a1);
  sub_1809D99C0(v5, 2u, a1);
  return a1;
}

void icu::VTimeZone::endZoneProps(uint64_t a1, uint64_t *a2, int a3, int *a4)
{
  if (*a4 <= 0)
  {
    icu::UnicodeString::doAppend(*a2, (uint64_t)"E", 0, 0xFFFFFFFFLL);
    uint64_t v6 = *a2;
    __int16 v8 = 58;
    icu::UnicodeString::doAppend(v6, (uint64_t)&v8, 0, 1LL);
    uint64_t v7 = *a2;
    if (a3) {
      icu::UnicodeString::doAppend(v7, (uint64_t)"D", 0, 0xFFFFFFFFLL);
    }
    else {
      icu::UnicodeString::doAppend(v7, (uint64_t)L"STANDARD", 0, 0xFFFFFFFFLL);
    }
    icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
  }

void icu::VTimeZone::writeZonePropsByDOM( uint64_t a1, uint64_t *a2, int a3, uint64_t a4, signed int a5, unsigned int a6, int a7, int a8, double a9, double a10, int *a11)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  if (*a11 <= 0)
  {
    icu::VTimeZone::beginZoneProps(a9, a1, a2, a3, a4, a5, a6, a11);
    if (*a11 <= 0)
    {
      icu::VTimeZone::beginRRULE(v17, a2, a7, a11);
      if (*a11 <= 0)
      {
        icu::UnicodeString::doAppend(*a2, (uint64_t)L"BYMONTHDAY", 0, 0xFFFFFFFFLL);
        uint64_t v18 = *a2;
        LOWORD(v23) = 61;
        icu::UnicodeString::doAppend(v18, (uint64_t)&v23, 0, 1LL);
        __int128 v24 = 0u;
        __int128 v25 = 0u;
        uint64_t v27 = 0LL;
        __int128 v26 = 0u;
        unsigned int v23 = off_18971B688;
        LOWORD(v24) = 2;
        sub_1809D99C0(a8, 0, (uint64_t)&v23);
        if ((v24 & 0x8000u) == 0LL) {
          uint64_t v19 = (unsigned __int16)v24 >> 5;
        }
        else {
          uint64_t v19 = DWORD1(v24);
        }
        icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)&v23, 0, v19);
        if (a10 == 1.83882169e17
          || (uint64_t v20 = sub_1809D93C4((uint64_t)&v23, (double)a5 + a10),
              icu::VTimeZone::appendUNTIL(v20, a2, (uint64_t)&v23, a11),
              unint64_t v21 = *a11,
              (int)v21 <= 0))
        {
          uint64_t v22 = icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
          icu::VTimeZone::endZoneProps(v22, a2, a3, a11);
        }

        icu::UnicodeString::~UnicodeString((void *)v21, (icu::UnicodeString *)&v23);
      }
    }
  }

void icu::VTimeZone::beginRRULE(uint64_t a1, uint64_t *a2, int a3, int *a4)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (*a4 <= 0)
  {
    __int128 v15 = 0u;
    uint64_t v18 = 0LL;
    __int128 v17 = 0u;
    __int128 v16 = 0u;
    uint64_t v14 = off_18971B688;
    LOWORD(v15) = 2;
    icu::UnicodeString::doAppend(*a2, (uint64_t)L"RRULE", 0, 0xFFFFFFFFLL);
    uint64_t v6 = *a2;
    __int16 v13 = 58;
    icu::UnicodeString::doAppend(v6, (uint64_t)&v13, 0, 1LL);
    icu::UnicodeString::doAppend(*a2, (uint64_t)L"FREQ", 0, 0xFFFFFFFFLL);
    uint64_t v7 = *a2;
    __int16 v13 = 61;
    icu::UnicodeString::doAppend(v7, (uint64_t)&v13, 0, 1LL);
    icu::UnicodeString::doAppend(*a2, (uint64_t)"Y", 0, 0xFFFFFFFFLL);
    uint64_t v8 = *a2;
    __int16 v13 = 59;
    icu::UnicodeString::doAppend(v8, (uint64_t)&v13, 0, 1LL);
    icu::UnicodeString::doAppend(*a2, (uint64_t)L"BYMONTH", 0, 0xFFFFFFFFLL);
    uint64_t v9 = *a2;
    __int16 v13 = 61;
    icu::UnicodeString::doAppend(v9, (uint64_t)&v13, 0, 1LL);
    sub_1809D99C0(a3 + 1, 0, (uint64_t)&v14);
    if ((v15 & 0x8000u) == 0LL) {
      uint64_t v10 = (unsigned __int16)v15 >> 5;
    }
    else {
      uint64_t v10 = DWORD1(v15);
    }
    icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)&v14, 0, v10);
    uint64_t v11 = *a2;
    __int16 v13 = 59;
    icu::UnicodeString::doAppend(v11, (uint64_t)&v13, 0, 1LL);
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v14);
  }

uint64_t sub_1809D99C0(int a1, unsigned int a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  uint64_t v14 = 0LL;
  memset(v13, 0, sizeof(v13));
  if (a1 >= 0) {
    unsigned int v4 = a1;
  }
  else {
    unsigned int v4 = -a1;
  }
  if (a2)
  {
    LODWORD(v5) = a2;
    uint64_t v6 = (unsigned int *)v13;
    uint64_t v7 = a2;
    do
    {
      *v6++ = v4 % 0xA;
      v4 /= 0xAu;
      --v7;
    }

    while (v7);
    if ((a1 & 0x80000000) == 0) {
      goto LABEL_8;
    }
LABEL_13:
    __int16 v12 = 45;
    icu::UnicodeString::doAppend(a3, (uint64_t)&v12, 0, 1LL);
    if (!(_DWORD)v5) {
      return a3;
    }
    goto LABEL_14;
  }

  uint64_t v8 = 0LL;
  do
  {
    *((_DWORD *)v13 + v8++) = v4 % 0xA;
    BOOL v9 = v4 > 9;
    v4 /= 0xAu;
  }

  while (v9);
  LODWORD(v5) = v8;
  if (a1 < 0) {
    goto LABEL_13;
  }
LABEL_8:
  if (!(_DWORD)v5) {
    return a3;
  }
LABEL_14:
  unint64_t v5 = v5;
  do
  {
    __int16 v12 = *(_WORD *)&v11[4 * v5] + 48;
    icu::UnicodeString::doAppend(a3, (uint64_t)&v12, 0, 1LL);
    BOOL v9 = v5-- > 1;
  }

  while (v9);
  return a3;
}

void icu::VTimeZone::appendUNTIL(uint64_t a1, uint64_t *a2, uint64_t a3, int *a4)
{
  if (*a4 <= 0)
  {
    unsigned int v5 = *(unsigned __int16 *)(a3 + 8);
    int v6 = (__int16)v5;
    int v7 = v5 >> 5;
    if (v6 < 0) {
      int v7 = *(_DWORD *)(a3 + 12);
    }
    if (v7 >= 1)
    {
      uint64_t v9 = *a2;
      __int16 v15 = 59;
      icu::UnicodeString::doAppend(v9, (uint64_t)&v15, 0, 1LL);
      icu::UnicodeString::doAppend(*a2, (uint64_t)L"UNTIL", 0, 0xFFFFFFFFLL);
      uint64_t v10 = *a2;
      __int16 v16 = 61;
      icu::UnicodeString::doAppend(v10, (uint64_t)&v16, 0, 1LL);
      unsigned int v11 = *(unsigned __int16 *)(a3 + 8);
      int v12 = (__int16)v11;
      unsigned int v13 = v11 >> 5;
      if (v12 >= 0) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = *(unsigned int *)(a3 + 12);
      }
      icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)a3, 0, v14);
    }
  }

void icu::VTimeZone::writeZonePropsByDOW_GEQ_DOM( uint64_t a1, uint64_t *a2, int a3, uint64_t a4, signed int a5, unsigned int a6, int a7, int a8, double a9, double a10, int a11, int *a12)
{
  if (*a12 > 0) {
    return;
  }
  int v13 = a8;
  if (a8 % 7 == 1)
  {
    int v18 = (unint64_t)(2454267027LL * (a8 + 6)) >> 32;
LABEL_5:
    icu::VTimeZone::writeZonePropsByDOW( a1,  a2,  a3,  a4,  a5,  a6,  a7,  (v18 >> 2) + (v18 >> 31),  a9,  a10,  a11,  a12);
    return;
  }

  if (a7 != 1)
  {
    int v19 = dword_180A3E818[a7] - a8;
    if (v19 % 7 == 6)
    {
      int v18 = ((unint64_t)(1840700269LL * (v19 + 1)) >> 32) + ~v19;
      goto LABEL_5;
    }
  }

  icu::VTimeZone::beginZoneProps(a9, a1, a2, a3, a4, a5, a6, a12);
  if (*a12 > 0) {
    return;
  }
  if (v13 <= 0)
  {
    if (a7 >= 1) {
      int v25 = a7 - 1;
    }
    else {
      int v25 = 11;
    }
    icu::VTimeZone::writeZonePropsByDOW_GEQ_DOM_sub(v20, a2, v25, v13 - 1, a11, 1 - v13, a5, a12, 1.83882169e17);
    if (*a12 < 1)
    {
      int v22 = v13 + 6;
      int v13 = 1;
LABEL_22:
      icu::VTimeZone::writeZonePropsByDOW_GEQ_DOM_sub(v20, a2, a7, v13, a11, v22, a5, a12, a10);
      if (*a12 <= 0) {
        icu::VTimeZone::endZoneProps(v26, a2, a3, a12);
      }
    }
  }

  else
  {
    int v21 = dword_180A3E818[a7];
    int v22 = 7;
    int v23 = v13 + 6 - v21;
    if (v13 + 6 <= v21) {
      goto LABEL_22;
    }
    if (a7 <= 10) {
      int v24 = a7 + 1;
    }
    else {
      int v24 = 0;
    }
    icu::VTimeZone::writeZonePropsByDOW_GEQ_DOM_sub(v20, a2, v24, 1, a11, v23, a5, a12, 1.83882169e17);
    if (*a12 <= 0)
    {
      int v22 = 7 - v23;
      goto LABEL_22;
    }
  }

void icu::VTimeZone::writeZonePropsByDOW_GEQ_DOM_sub( uint64_t a1, uint64_t *a2, int a3, int a4, int a5, int a6, int a7, int *a8, double a9)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  if (*a8 <= 0)
  {
    int v14 = a4;
    if (a3 != 1 && a4 < 0) {
      int v14 = a4 + dword_180A3E818[a3] + 1;
    }
    icu::VTimeZone::beginRRULE(a1, a2, a3, a8);
    if (*a8 <= 0)
    {
      icu::UnicodeString::doAppend(*a2, (uint64_t)"B", 0, 0xFFFFFFFFLL);
      v28[3] = "B";
      uint64_t v16 = *a2;
      LOWORD(v30) = 61;
      icu::UnicodeString::doAppend(v16, (uint64_t)&v30, 0, 1LL);
      __int128 v17 = &aS_4[6 * a5 - 6];
      icu::UnicodeString::doAppend(*a2, (uint64_t)v17, 0, 0xFFFFFFFFLL);
      _OWORD v28[2] = v17;
      uint64_t v18 = *a2;
      LOWORD(v30) = 59;
      icu::UnicodeString::doAppend(v18, (uint64_t)&v30, 0, 1LL);
      icu::UnicodeString::doAppend(*a2, (uint64_t)L"BYMONTHDAY", 0, 0xFFFFFFFFLL);
      v28[1] = L"BYMONTHDAY";
      uint64_t v19 = *a2;
      LOWORD(v30) = 61;
      icu::UnicodeString::doAppend(v19, (uint64_t)&v30, 0, 1LL);
      __int128 v31 = 0u;
      __int128 v32 = 0u;
      uint64_t v34 = 0LL;
      __int128 v33 = 0u;
      __int128 v30 = off_18971B688;
      LOWORD(v31) = 2;
      sub_1809D99C0(v14, 0, (uint64_t)&v30);
      if ((v31 & 0x8000u) == 0LL) {
        uint64_t v20 = (unsigned __int16)v31 >> 5;
      }
      else {
        uint64_t v20 = DWORD1(v31);
      }
      icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)&v30, 0, v20);
      if (a6 >= 2)
      {
        int v21 = a6 - 1;
        int v22 = v14 + 1;
        do
        {
          uint64_t v23 = *a2;
          __int16 v29 = 44;
          icu::UnicodeString::doAppend(v23, (uint64_t)&v29, 0, 1LL);
          if ((v31 & 1) != 0) {
            __int16 v24 = 2;
          }
          else {
            __int16 v24 = v31 & 0x1F;
          }
          LOWORD(v31) = v24;
          sub_1809D99C0(v22, 0, (uint64_t)&v30);
          if ((v31 & 0x8000u) == 0LL) {
            uint64_t v25 = (unsigned __int16)v31 >> 5;
          }
          else {
            uint64_t v25 = DWORD1(v31);
          }
          icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)&v30, 0, v25);
          ++v22;
          --v21;
        }

        while (v21);
      }

      if (a9 == 1.83882169e17
        || (uint64_t v26 = sub_1809D93C4((uint64_t)&v30, (double)a7 + a9),
            icu::VTimeZone::appendUNTIL(v26, a2, (uint64_t)&v30, a8),
            unint64_t v27 = *a8,
            (int)v27 <= 0))
      {
        icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
        v28[0] = L"\r\n";
        unint64_t v27 = (unint64_t)v28;
      }

      icu::UnicodeString::~UnicodeString((void *)v27, (icu::UnicodeString *)&v30);
    }
  }

void icu::VTimeZone::writeZonePropsByDOW_LEQ_DOM( uint64_t a1, uint64_t *a2, int a3, uint64_t a4, signed int a5, unsigned int a6, int a7, int a8, double a9, double a10, int a11, int *a12)
{
  if (*a12 <= 0)
  {
    if (a8 == 7 * (a8 / 7))
    {
      unsigned int v12 = a8 / 7;
      goto LABEL_6;
    }

    if (a7 == 1)
    {
      if (a8 == 29)
      {
        a7 = 1;
        unsigned int v12 = -1;
LABEL_6:
        icu::VTimeZone::writeZonePropsByDOW(a1, a2, a3, a4, a5, a6, a7, v12, a9, a10, a11, a12);
        return;
      }
    }

    else
    {
      int v13 = dword_180A3E818[a7] - a8;
      if ((-1227133513 * v13 + 306783378) <= 0x24924924)
      {
        unsigned int v12 = ((int)(((unint64_t)(1840700269LL * v13) >> 32) - v13) >> 2)
        goto LABEL_6;
      }
    }

    icu::VTimeZone::writeZonePropsByDOW_GEQ_DOM(a1, a2, a3, a4, a5, a6, a7, a8 - 6, a9, a10, a11, a12);
  }

uint64_t sub_1809DA220(unsigned int a1, uint64_t a2)
{
  unsigned int v3 = a1;
  if ((*(_WORD *)(a2 + 8) & 1) != 0) {
    __int16 v4 = 2;
  }
  else {
    __int16 v4 = *(_WORD *)(a2 + 8) & 0x1F;
  }
  *(_WORD *)(a2 + 8) = v4;
  if ((a1 & 0x80000000) != 0)
  {
    __int16 v7 = 45;
    icu::UnicodeString::doAppend(a2, (uint64_t)&v7, 0, 1LL);
    unsigned int v3 = -v3;
  }

  else
  {
    __int16 v6 = 43;
    icu::UnicodeString::doAppend(a2, (uint64_t)&v6, 0, 1LL);
  }

  sub_1809D99C0(v3 / 0x36EE80, 2u, a2);
  sub_1809D99C0((unsigned __int16)(v3 / 0xEA60) % 0x3Cu, 2u, a2);
  return sub_1809D99C0(v3 / 0x3E8 - 60 * ((71582789 * (unint64_t)(v3 / 0x3E8)) >> 32), 2u, a2);
}

uint64_t sub_1809DA338(uint64_t a1, unsigned int a2, int a3, int *a4)
{
  if (*a4 > 0) {
    return 0LL;
  }
  if (a3 < 1) {
    goto LABEL_9;
  }
  unsigned int v5 = *(unsigned __int16 *)(a1 + 8);
  int v6 = a3 + a2;
  unsigned int v7 = v5 >> 5;
  if (*(__int16 *)(a1 + 8) < 0)
  {
    signed int v9 = *(_DWORD *)(a1 + 12);
  }

  else
  {
    BOOL v8 = (int)v7 >= (int)a2 && v6 <= (int)v7;
    signed int v9 = v5 >> 5;
    if (!v8)
    {
LABEL_9:
      uint64_t result = 0LL;
      *a4 = 3;
      return result;
    }
  }

  if (v9 > a2)
  {
    uint64_t v11 = a1 + 10;
    if ((v5 & 2) == 0) {
      uint64_t v11 = *(void *)(a1 + 24);
    }
    if (*(_WORD *)(v11 + 2LL * (int)a2) == 43)
    {
      int v12 = 1;
LABEL_27:
      if (!--a3) {
        return 0LL;
      }
      ++a2;
      goto LABEL_30;
    }
  }

  unsigned int v13 = *(_DWORD *)(a1 + 12);
  if ((v5 & 0x8000u) == 0) {
    unsigned int v13 = v5 >> 5;
  }
  if (v13 > a2)
  {
    uint64_t v14 = a1 + 10;
    if ((v5 & 2) == 0) {
      uint64_t v14 = *(void *)(a1 + 24);
    }
    if (*(_WORD *)(v14 + 2LL * (int)a2) == 45)
    {
      int v12 = -1;
      goto LABEL_27;
    }
  }

  int v12 = 1;
LABEL_30:
  if ((v5 & 0x8000u) != 0) {
    unsigned int v7 = *(_DWORD *)(a1 + 12);
  }
  if ((v5 & 2) != 0) {
    uint64_t v15 = a1 + 10;
  }
  else {
    uint64_t v15 = *(void *)(a1 + 24);
  }
  BOOL v16 = v7 > a2;
  if (v7 >= a2) {
    uint64_t v17 = v7 - a2;
  }
  else {
    uint64_t v17 = 0LL;
  }
  int v18 = 0;
  if (v16)
  {
    uint64_t v19 = 0LL;
    uint64_t v20 = v15 + 2LL * (int)a2;
    BOOL v22 = 1;
    do
    {
      int v21 = *(unsigned __int16 *)(v20 + 2 * v19);
      int v18 = v21 + 10 * v18 - 48;
      BOOL v22 = ++v19 < a3;
    }

    while (v17 != v19);
  }

  else
  {
    BOOL v22 = 1;
  }

  *a4 = 3;
  unsigned int v23 = v18 * v12;
  if (v22) {
    return 0LL;
  }
  else {
    return v23;
  }
}

void *sub_1809DA4B4( void *result, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t a5, int *a6, double *a7, int *a8)
{
  uint64_t v85 = *MEMORY[0x1895F89C0];
  if (*a8 > 0) {
    return result;
  }
  uint64_t v11 = (uint64_t)result;
  int v12 = 0;
  LODWORD(v13) = 0;
  *a2 = -1;
  *a3 = 0;
  *a4 = 0;
  *a7 = -1.84303903e17;
  __int128 v81 = 0u;
  uint64_t v84 = 0LL;
  __int128 v83 = 0u;
  __int128 v82 = 0u;
  int v80 = off_18971B688;
  LOWORD(v81) = 2;
  __int128 v76 = 0u;
  uint64_t v79 = 0LL;
  __int128 v78 = 0u;
  unsigned int v64 = 1;
  __int128 v77 = 0u;
  uint64_t v74 = 0LL;
  BOOL v75 = off_18971B688;
  LOWORD(v76) = 2;
  __int128 v71 = 0u;
  __int128 v73 = 0u;
  int v70 = off_18971B688;
  LOWORD(v71) = 2;
  __int128 v72 = 0u;
  do
  {
    while (1)
    {
      unsigned int v14 = *(unsigned __int16 *)(v11 + 8);
      if (v12 < 0)
      {
        int v16 = 0;
        if ((v14 & 0x8000) != 0) {
          unsigned int v15 = *(_DWORD *)(v11 + 12);
        }
        else {
          unsigned int v15 = v14 >> 5;
        }
      }

      else if ((v14 & 0x8000) != 0)
      {
        unsigned int v15 = *(_DWORD *)(v11 + 12);
        else {
          int v16 = *(_DWORD *)(v11 + 12);
        }
      }

      else
      {
        unsigned int v15 = v14 >> 5;
        if (v15 >= v12) {
          int v16 = v12;
        }
        else {
          int v16 = v15;
        }
      }

      int v17 = icu::UnicodeString::doIndexOf(v11, 0x3Bu, v16, v15 - v16);
      if (v17 != -1)
      {
        icu::UnicodeString::unBogus((uint64_t)&v80);
        if ((v81 & 0x8000u) == 0LL) {
          uint64_t v18 = (unsigned __int16)v81 >> 5;
        }
        else {
          uint64_t v18 = DWORD1(v81);
        }
        icu::UnicodeString::doReplace( (icu::UnicodeString *)&v80,  0LL,  v18,  (const icu::UnicodeString *)v11,  v12,  (v17 - v12));
        int v12 = v17 + 1;
        goto LABEL_32;
      }

      icu::UnicodeString::unBogus((uint64_t)&v80);
      unsigned int v19 = *(unsigned __int16 *)(v11 + 8);
      unsigned int v20 = v19 >> 5;
      if (v12 < 0)
      {
        int v21 = 0;
LABEL_25:
        int v22 = v21;
        goto LABEL_26;
      }

      if ((v19 & 0x8000) == 0)
      {
        int v21 = v19 >> 5;
        int v22 = v12;
        if (v12 <= v19 >> 5) {
          goto LABEL_26;
        }
        goto LABEL_25;
      }

      int v21 = *(_DWORD *)(v11 + 12);
      int v22 = v12;
      if (v21 < v12) {
        goto LABEL_25;
      }
LABEL_26:
      if ((v81 & 0x8000u) == 0LL) {
        uint64_t v23 = (unsigned __int16)v81 >> 5;
      }
      else {
        uint64_t v23 = DWORD1(v81);
      }
      if ((v19 & 0x8000u) != 0) {
        unsigned int v20 = *(_DWORD *)(v11 + 12);
      }
      icu::UnicodeString::doReplace( (icu::UnicodeString *)&v80,  0LL,  v23,  (const icu::UnicodeString *)v11,  v22,  v20 - v22);
LABEL_32:
      if ((v81 & 0x8000u) == 0LL) {
        int32_t v24 = (unsigned __int16)v81 >> 5;
      }
      else {
        int32_t v24 = DWORD1(v81);
      }
      uint64_t v25 = icu::UnicodeString::doIndexOf((uint64_t)&v80, 0x3Du, 0, v24);
      if ((_DWORD)v25 == -1) {
        goto LABEL_132;
      }
      uint64_t v26 = v25;
      icu::UnicodeString::unBogus((uint64_t)&v75);
      if ((v76 & 0x8000u) == 0LL) {
        uint64_t v27 = (unsigned __int16)v76 >> 5;
      }
      else {
        uint64_t v27 = DWORD1(v76);
      }
      icu::UnicodeString::doReplace((icu::UnicodeString *)&v75, 0LL, v27, (const icu::UnicodeString *)&v80, 0, v26);
      icu::UnicodeString::unBogus((uint64_t)&v70);
      unsigned int v28 = 0;
      int v29 = (unsigned __int16)v81 >> 5;
      int v30 = v26 + 1;
      if ((v81 & 0x8000) == 0)
      {
        unsigned int v28 = (unsigned __int16)v81 >> 5;
LABEL_42:
        int v30 = v28;
        goto LABEL_43;
      }

      unsigned int v28 = DWORD1(v81);
LABEL_43:
      if ((v71 & 0x8000u) == 0LL) {
        uint64_t v31 = (unsigned __int16)v71 >> 5;
      }
      else {
        uint64_t v31 = DWORD1(v71);
      }
      if ((v81 & 0x8000u) != 0LL) {
        int v29 = DWORD1(v81);
      }
      icu::UnicodeString::doReplace( (icu::UnicodeString *)&v70,  0LL,  v31,  (const icu::UnicodeString *)&v80,  v30,  (v29 - v30));
      int32_t v32 = (v76 & 0x8000u) == 0LL ? (unsigned __int16)v76 >> 5 : DWORD1(v76);
      int v33 = icu::UnicodeString::doCompare((uint64_t)&v75, 0, v32, (uint64_t)L"FREQ", 0, -1);
      v69[6] = L"FREQ";
      if (v33) {
        break;
      }
      if ((v71 & 0x8000u) == 0LL) {
        int32_t v54 = (unsigned __int16)v71 >> 5;
      }
      else {
        int32_t v54 = DWORD1(v71);
      }
      int v55 = icu::UnicodeString::doCompare((uint64_t)&v70, 0, v54, (uint64_t)"Y", 0, -1);
      v69[0] = "Y";
      uint64_t v47 = (uint64_t)v69;
      if (v55) {
        goto LABEL_132;
      }
      unsigned int v64 = 0;
      if (v17 == -1) {
        goto LABEL_139;
      }
    }

    if ((v76 & 0x8000u) == 0LL) {
      int32_t v34 = (unsigned __int16)v76 >> 5;
    }
    else {
      int32_t v34 = DWORD1(v76);
    }
    int v35 = icu::UnicodeString::doCompare((uint64_t)&v75, 0, v34, (uint64_t)L"UNTIL", 0, -1);
    v69[5] = L"UNTIL";
    if (v35)
    {
      if ((v76 & 0x8000u) == 0LL) {
        int32_t v36 = (unsigned __int16)v76 >> 5;
      }
      else {
        int32_t v36 = DWORD1(v76);
      }
      int v37 = icu::UnicodeString::doCompare((uint64_t)&v75, 0, v36, (uint64_t)L"BYMONTH", 0, -1);
      v69[4] = L"BYMONTH";
      if (v37)
      {
        if ((v76 & 0x8000u) == 0LL) {
          int32_t v38 = (unsigned __int16)v76 >> 5;
        }
        else {
          int32_t v38 = DWORD1(v76);
        }
        int v39 = icu::UnicodeString::doCompare((uint64_t)&v75, 0, v38, (uint64_t)"B", 0, -1);
        void v69[3] = "B";
        if (!v39)
        {
          if ((v71 & 0x8000u) == 0LL) {
            unsigned int v49 = (unsigned __int16)v71 >> 5;
          }
          else {
            unsigned int v49 = DWORD1(v71);
          }
          if (v49 - 5 < 0xFFFFFFFD) {
            goto LABEL_132;
          }
          if (v49 < 3) {
            goto LABEL_121;
          }
          int v50 = (unsigned __int16 *)&v71 + 1;
          if ((v71 & 2) == 0) {
            int v50 = (unsigned __int16 *)v72;
          }
          int v51 = *v50;
          if (v51 != 43)
          {
            if (v51 == 45)
            {
              int v52 = -1;
LABEL_117:
              int v56 = sub_1809DA338((uint64_t)&v70, v49 - 3, 1, a8);
              if (*a8 > 0 || !v56 || v56 > 4) {
                goto LABEL_132;
              }
              *a4 = v56 * v52;
              icu::UnicodeString::doReplace((uint64_t)&v70, 0LL, v49 - 2, 0LL, 0, 0LL);
LABEL_121:
              uint64_t v57 = -7LL;
              uint64_t v58 = "S";
              while (1)
              {
                int32_t v59 = (v71 & 0x8000u) == 0LL ? (unsigned __int16)v71 >> 5 : DWORD1(v71);
                int v60 = icu::UnicodeString::doCompare((uint64_t)&v70, 0, v59, (uint64_t)v58, 0, 2);
                v69[1] = v58;
                if (!v60) {
                  break;
                }
                v58 += 6;
                if (__CFADD__(v57++, 1LL)) {
                  goto LABEL_132;
                }
              }

              *a3 = v57 + 8;
              continue;
            }

            if (v49 == 4) {
              goto LABEL_132;
            }
          }

          int v52 = 1;
          goto LABEL_117;
        }

        if ((v76 & 0x8000u) == 0LL) {
          int32_t v40 = (unsigned __int16)v76 >> 5;
        }
        else {
          int32_t v40 = DWORD1(v76);
        }
        int v41 = icu::UnicodeString::doCompare((uint64_t)&v75, 0, v40, (uint64_t)L"BYMONTHDAY", 0, -1);
        v69[2] = L"BYMONTHDAY";
        if (!v41)
        {
          uint64_t v13 = 0LL;
          unsigned int v42 = 0;
          while (1)
          {
            if ((v42 & 0x80000000) != 0)
            {
              int v44 = 0;
              unsigned int v43 = (v71 & 0x8000) != 0 ? DWORD1(v71) : (unsigned __int16)v71 >> 5;
            }

            else if ((v71 & 0x8000) != 0)
            {
              unsigned int v43 = DWORD1(v71);
              int v44 = SDWORD1(v71) >= (int)v42 ? v42 : DWORD1(v71);
            }

            else
            {
              unsigned int v43 = (unsigned __int16)v71 >> 5;
              int v44 = v43 >= v42 ? v42 : (unsigned __int16)v71 >> 5;
            }

            int v45 = icu::UnicodeString::doIndexOf((uint64_t)&v70, 0x2Cu, v44, v43 - v44);
            int v46 = v45;
            if (v45 == -1)
            {
              else {
                int v46 = (unsigned __int16)v71 >> 5;
              }
            }

            if (v13 >= *a6) {
              break;
            }
            *(_DWORD *)(a5 + 4 * v13) = sub_1809DA338((uint64_t)&v70, v42, v46 - v42, a8);
            uint64_t v47 = *a8;
            ++v13;
            unsigned int v42 = v46 + 1;
            if (v45 == -1) {
              goto LABEL_130;
            }
          }

          uint64_t v47 = 15LL;
          goto LABEL_136;
        }
      }

      else
      {
        if ((__int16)v71 < 0)
        {
          int v48 = DWORD1(v71);
          if (SDWORD1(v71) > 2) {
            goto LABEL_132;
          }
        }

        else
        {
          int v48 = (unsigned __int16)v71 >> 5;
        }

        int v53 = sub_1809DA338((uint64_t)&v70, 0, v48, a8);
        *a2 = v53 - 1;
        uint64_t v47 = *a8;
      }
    }

    else
    {
      *a7 = sub_1809D676C((uint64_t)&v70, 0, a8);
      uint64_t v47 = *a8;
    }

LABEL_139:
  *a6 = v13;
LABEL_137:
  icu::UnicodeString::~UnicodeString((void *)v47, (icu::UnicodeString *)&v70);
  icu::UnicodeString::~UnicodeString(v62, (icu::UnicodeString *)&v75);
  return icu::UnicodeString::~UnicodeString(v63, (icu::UnicodeString *)&v80);
}

icu::BasicTimeZone *vzone_openID(uint64_t a1, int a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  memset(v8, 0, sizeof(v8));
  uint64_t v7 = a1;
  icu::UnicodeString::UnicodeString(v8, a2 == -1, &v7);
  uint64_t v6 = v7;
  unsigned int v3 = icu::VTimeZone::createVTimeZoneByID((UChar **)v8, v2, &v6);
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v8);
  return v3;
}

icu::BasicTimeZone *vzone_openData(uint64_t a1, int a2, UErrorCode *a3)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  memset(v9, 0, sizeof(v9));
  uint64_t v8 = a1;
  icu::UnicodeString::UnicodeString(v9, a2 == -1, &v8);
  Vuint64_t TimeZone = icu::VTimeZone::createVTimeZone((icu::VTimeZone *)v9, a3, v4);
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v9);
  return VTimeZone;
}

uint64_t vzone_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t vzone_equals(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
}

uint64_t vzone_getTZURL(icu::VTimeZone *a1, void **a2, int *a3)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  uint64_t v15 = 0LL;
  __int128 v14 = 0u;
  uint64_t v11 = (UChar *)off_18971B688;
  LOWORD(v12) = 2;
  uint64_t TZURL = icu::VTimeZone::getTZURL(a1, &v11);
  uint64_t v6 = 0LL;
  char v7 = v12;
  if ((v12 & 0x8000u) == 0LL) {
    int v8 = (unsigned __int16)v12 >> 5;
  }
  else {
    int v8 = DWORD1(v12);
  }
  *a3 = v8;
  if ((v7 & 0x11) == 0)
  {
    if ((v7 & 2) != 0) {
      uint64_t v6 = (char *)&v12 + 2;
    }
    else {
      uint64_t v6 = (char *)v13;
    }
  }

  memcpy(*a2, v6, v8);
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)&v11);
  return TZURL;
}

void *vzone_setTZURL(UChar **a1, uint64_t a2, int a3)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  memset(v7, 0, sizeof(v7));
  uint64_t v6 = a2;
  icu::UnicodeString::UnicodeString(v7, a3 == -1, &v6);
  icu::VTimeZone::setTZURL(a1, (UChar **)v7);
  return icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v7);
}

void *vzone_write(icu::VTimeZone *a1, void *a2, int *a3, UErrorCode *a4)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  uint64_t v15 = 0LL;
  __int128 v14 = 0u;
  uint64_t v11 = off_18971B688;
  LOWORD(v12) = 2;
  icu::VTimeZone::write(a1, (icu::UnicodeString *)&v11, a4);
  int v6 = (unsigned __int16)v12 >> 5;
  if ((v12 & 0x8000u) != 0LL) {
    int v6 = DWORD1(v12);
  }
  *a3 = v6;
  char v7 = uprv_malloc(v6);
  uint64_t v8 = 0LL;
  *a2 = v7;
  if ((v12 & 0x11) == 0)
  {
    if ((v12 & 2) != 0) {
      uint64_t v8 = (char *)&v12 + 2;
    }
    else {
      uint64_t v8 = (char *)v13;
    }
  }

  memcpy(v7, v8, *a3);
  return icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)&v11);
}

void *vzone_writeFromStart(icu::VTimeZone *a1, void *a2, int *a3, UErrorCode *a4, double a5)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  uint64_t v16 = 0LL;
  __int128 v15 = 0u;
  __int128 v12 = off_18971B688;
  LOWORD(v13) = 2;
  icu::VTimeZone::write(a1, a5, (icu::UnicodeString *)&v12, a4);
  int v7 = (unsigned __int16)v13 >> 5;
  if ((v13 & 0x8000u) != 0LL) {
    int v7 = DWORD1(v13);
  }
  *a3 = v7;
  uint64_t v8 = uprv_malloc(v7);
  uint64_t v9 = 0LL;
  *a2 = v8;
  if ((v13 & 0x11) == 0)
  {
    if ((v13 & 2) != 0) {
      uint64_t v9 = (char *)&v13 + 2;
    }
    else {
      uint64_t v9 = (char *)v14;
    }
  }

  memcpy(v8, v9, *a3);
  return icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v12);
}

void *vzone_writeSimple(UChar **a1, void *a2, int *a3, UErrorCode *a4, double a5)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  uint64_t v16 = 0LL;
  __int128 v15 = 0u;
  __int128 v12 = off_18971B688;
  LOWORD(v13) = 2;
  icu::VTimeZone::writeSimple(a1, a5, (icu::UnicodeString *)&v12, a4);
  int v7 = (unsigned __int16)v13 >> 5;
  if ((v13 & 0x8000u) != 0LL) {
    int v7 = DWORD1(v13);
  }
  *a3 = v7;
  uint64_t v8 = uprv_malloc(v7);
  uint64_t v9 = 0LL;
  *a2 = v8;
  if ((v13 & 0x11) == 0)
  {
    if ((v13 & 2) != 0) {
      uint64_t v9 = (char *)&v13 + 2;
    }
    else {
      uint64_t v9 = (char *)v14;
    }
  }

  memcpy(v8, v9, *a3);
  return icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v12);
}

uint64_t vzone_getOffset2( icu::VTimeZone *a1, unsigned __int8 a2, int a3, int a4, int a5, unsigned __int8 a6, int a7, int a8, UErrorCode *a9)
{
  return icu::VTimeZone::getOffset(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

const UChar *icu::ZoneMeta::getCanonicalCLDRID( icu::ZoneMeta *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  unsigned int v6 = *((unsigned __int16 *)this + 4);
  if ((v6 & 1) != 0) {
    goto LABEL_7;
  }
  int v7 = (__int16)v6;
  int v8 = v6 >> 5;
  if (v7 < 0) {
    int v8 = *((_DWORD *)this + 3);
  }
  if (v8 >= 129) {
    goto LABEL_7;
  }
  unsigned int v11 = atomic_load(&dword_18C449B48);
  if (v11 == 2 || !icu::umtx_initImplPreInit(&dword_18C449B48))
  {
    int v9 = dword_18C449B4C;
    if (dword_18C449B4C >= 1)
    {
      ID = 0LL;
      goto LABEL_8;
    }
  }

  else
  {
    sub_1809DB660((int *)a2);
    dword_18C449B4C = *(_DWORD *)a2;
    icu::umtx_initImplPostInit(&dword_18C449B48);
  }

  int v28 = 0;
  memset(v38, 0, 258);
  uint64_t v27 = v38;
  icu::UnicodeString::extract((uint64_t)this, &v27, 129, &v28);
  if (!uprv_isInvariantUString(v38, -1))
  {
LABEL_7:
    ID = 0LL;
    int v9 = 1;
LABEL_8:
    *(_DWORD *)a2 = v9;
    return ID;
  }

  umtx_lock((icu::UMutex *)&unk_18C449B50);
  ID = (const UChar *)uhash_get(qword_18C449B28, (uint64_t)v38);
  umtx_unlock((std::mutex **)&unk_18C449B50);
  if (ID) {
    return ID;
  }
  char v37 = 0;
  __int128 v36 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  *(_OWORD *)int v29 = 0u;
  icu::UnicodeString::extract((uint64_t)this, 0, 0x7FFFFFFFLL, v29, 129);
  __int128 v12 = &v29[1];
  if (v29[0])
  {
    __int128 v13 = &v29[1];
    do
    {
      int v14 = *v13;
      if (v14 == 47)
      {
        int v14 = 58;
        *__int128 v13 = 58;
      }

      ++v13;
    }

    while (v14);
  }

  uint64_t v15 = ures_openDirect(0LL, (uint64_t)"keyTypeData", (uint64_t)&v28);
  uint64_t v16 = ures_getByKey(v15, "typeMap", 0LL, &v28);
  ures_getByKey(v16, "timezone", v16, &v28);
  ures_getByKey(v16, v29, v16, &v28);
  if (v28 > 0)
  {
    int v18 = 0;
LABEL_25:
    int v28 = 0;
    ures_getByKey(v15, "typeAlias", v16, &v28);
    ures_getByKey(v16, "timezone", v16, &v28);
    StringByKey = ures_getStringByKey(v16, v29, 0LL, &v28);
    if (v28 > 0 || (ID = StringByKey) == 0LL)
    {
      int v21 = icu::TimeZone::dereferOlsonLink(this, v20);
      ID = v21;
      if (v21)
      {
        int32_t v22 = u_strlen(v21);
        u_UCharsToChars(ID, v29, v22);
        v29[v22] = 0;
        if (v29[0])
        {
          do
          {
            int v23 = *v12;
            if (v23 == 47)
            {
              int v23 = 58;
              *__int128 v12 = 58;
            }

            ++v12;
          }

          while (v23);
        }

        int v28 = 0;
        int32_t v24 = ures_getStringByKey(v16, v29, 0LL, &v28);
        if (v28 > 0) {
          int v18 = 1;
        }
        else {
          ID = v24;
        }
      }

      else
      {
        *(_DWORD *)a2 = 1;
      }
    }

    goto LABEL_38;
  }

  ID = icu::TimeZone::findID(this, v17);
  int v18 = 1;
  if (!ID) {
    goto LABEL_25;
  }
LABEL_38:
  ures_close(v16);
  ures_close(v15);
  if (*(int *)a2 <= 0)
  {
    umtx_lock((icu::UMutex *)&unk_18C449B50);
    if (!uhash_get(qword_18C449B28, (uint64_t)v38))
    {
      uint64_t v26 = icu::TimeZone::findID(this, v25);
      if (v26) {
        uhash_put(qword_18C449B28, (uint64_t)v26, (uint64_t)ID, (int *)a2);
      }
    }

    umtx_unlock((std::mutex **)&unk_18C449B50);
  }

  return ID;
}

void sub_1809DB660(int *a1)
{
  qword_18C449B28 = (uint64_t)uhash_open((uint64_t)uhash_hashUChars, (uint64_t)uhash_compareUChars, 0LL, a1);
  if (qword_18C449B28)
  {
    if (*a1 < 1) {
      goto LABEL_6;
    }
  }

  else
  {
    *a1 = 7;
  }

  qword_18C449B28 = 0LL;
LABEL_6:
  sub_1809B36C0(0x12u, (uint64_t)sub_1809DD2AC);
}

const icu::UnicodeString *icu::ZoneMeta::getCanonicalCLDRID( icu::ZoneMeta *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID(this, a3, (UErrorCode *)a3);
  if (*(int *)a3 > 0 || CanonicalCLDRID == 0LL)
  {
    icu::UnicodeString::setToBogus(a2);
  }

  else
  {
    int v9 = CanonicalCLDRID;
    icu::UnicodeString::setTo(a2, 1, &v9, -1);
  }

  return a2;
}

const UChar *icu::ZoneMeta::getCanonicalCLDRID(icu::ZoneMeta *this, const icu::TimeZone *a2)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  {
    return (const UChar *)*((void *)this + 19);
  }

  int v7 = 0;
  __int128 v9 = 0u;
  uint64_t v12 = 0LL;
  __int128 v11 = 0u;
  __int128 v10 = 0u;
  int v8 = (UChar *)off_18971B688;
  LOWORD(v9) = 2;
  icu::UnicodeString::operator=(&v8, (UChar **)this + 1);
  CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID((icu::ZoneMeta *)&v8, (const icu::UnicodeString *)&v7, v4);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)&v8);
  return CanonicalCLDRID;
}

const icu::UnicodeString *icu::ZoneMeta::getIanaID( icu::ZoneMeta *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID(this, a3, (UErrorCode *)a3);
  if (*(int *)a3 > 0 || CanonicalCLDRID == 0LL)
  {
    icu::UnicodeString::setToBogus(a2);
  }

  else
  {
    int v8 = CanonicalCLDRID;
    int v24 = 0;
    memset(v36, 0, 64);
    icu::UnicodeString::UnicodeString((uint64_t)v36, (uint64_t)CanonicalCLDRID);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v25, "/");
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v27, ":");
    if (SLOWORD(v36[2]) >= 0) {
      int32_t v9 = LOWORD(v36[2]) >> 5;
    }
    else {
      int32_t v9 = v36[3];
    }
    if ((SWORD4(v25[0]) & 0x8000u) == 0) {
      uint64_t v10 = WORD4(v25[0]) >> 5;
    }
    else {
      uint64_t v10 = HIDWORD(v25[0]);
    }
    int v11 = WORD4(v27) >> 5;
    if (SWORD4(v27) < 0) {
      int v11 = HIDWORD(v27);
    }
    icu::UnicodeString::findAndReplace( (icu::UnicodeString *)v36,  0,  v9,  (const icu::UnicodeString *)v25,  0,  v10,  (const icu::UnicodeString *)&v27,  0,  v11);
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v27);
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v25);
    char v35 = 0;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    if (SLOWORD(v36[2]) >= 0) {
      uint64_t v14 = LOWORD(v36[2]) >> 5;
    }
    else {
      uint64_t v14 = v36[3];
    }
    icu::UnicodeString::extract((uint64_t)v36, 0, v14, (char *)&v27, 129);
    uint64_t v26 = 0LL;
    memset(v25, 0, sizeof(v25));
    icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v25);
    ures_openDirectFillIn((uint64_t)v25, 0LL, "keyTypeData", &v24);
    ures_getByKey((uint64_t)v25, "ianaMap", (uint64_t)v25, &v24);
    ures_getByKey((uint64_t)v25, "timezone", (uint64_t)v25, &v24);
    int v23 = 0;
    StringByKey = ures_getStringByKey((uint64_t)v25, (const char *)&v27, &v23, &v24);
    if (v24 <= 0)
    {
      int32_t v22 = StringByKey;
      icu::UnicodeString::setTo(a2, 1, &v22, -1);
      unsigned int v20 = v22;
      uint64_t v16 = &v20;
    }

    else
    {
      int v21 = v8;
      icu::UnicodeString::setTo(a2, 1, &v21, -1);
      unsigned int v19 = v21;
      uint64_t v16 = &v19;
    }

    icu::StackUResourceBundle::~StackUResourceBundle(v16, (icu::StackUResourceBundle *)v25);
    icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v36);
  }

  return a2;
}

const icu::UnicodeString *icu::ZoneMeta::getCanonicalCountry( int32_t *this, const icu::UnicodeString *a2, UErrorCode *a3, signed __int8 *a4)
{
  uint64_t v47 = *MEMORY[0x1895F89C0];
  if (a3) {
    *(_BYTE *)a3 = 0;
  }
  Region = icu::TimeZone::getRegion((icu::TimeZone *)this, a2, a3);
  if (!Region || (int v8 = (UChar *)Region, !u_strcmp((const UChar *)"0", Region)))
  {
    icu::UnicodeString::setToBogus(a2);
    return a2;
  }

  icu::UnicodeString::unBogus((uint64_t)a2);
  unsigned int v9 = *((unsigned __int16 *)a2 + 4);
  int v10 = (__int16)v9;
  unsigned int v11 = v9 >> 5;
  if (v10 >= 0) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = *((unsigned int *)a2 + 3);
  }
  icu::UnicodeString::doReplace((uint64_t)a2, 0LL, v12, (uint64_t)v8, 0, 0xFFFFFFFFLL);
  if (a3)
  {
    char v41 = 0;
    *(_WORD *)int32_t v40 = 0;
    int v39 = 0;
    unsigned int v13 = atomic_load(&dword_18C535D90);
    if (v13 == 2 || !icu::umtx_initImplPreInit(&dword_18C535D90))
    {
      if (dword_18C535D94 > 0) {
        return a2;
      }
      goto LABEL_28;
    }

    uint64_t v16 = icu::UMemory::operator new(v15, (icu::UMemory *)0x28, v14);
    if (v16)
    {
      uint64_t v16 = (uint64_t *)icu::UVector::UVector((uint64_t)v16, 0LL, (uint64_t)uhash_compareUChars, &v39);
    }

    else
    {
      uint64_t v18 = 7LL;
      int v39 = 7;
    }

    qword_18C535D80 = (uint64_t)v16;
    unsigned int v20 = icu::UMemory::operator new((uint64_t *)v18, (icu::UMemory *)0x28, v17);
    if (v20)
    {
      unsigned int v20 = (uint64_t *)icu::UVector::UVector((uint64_t)v20, 0LL, (uint64_t)uhash_compareUChars, &v39);
      qword_18C535D88 = (uint64_t)v20;
      if (v39 < 1) {
        goto LABEL_27;
      }
    }

    else
    {
      int v39 = 7;
      qword_18C535D88 = 0LL;
    }

    if (qword_18C535D80)
    {
      (*(void (**)(uint64_t))(*(void *)qword_18C535D80 + 8LL))(qword_18C535D80);
      unsigned int v20 = (uint64_t *)qword_18C535D88;
    }

    if (v20) {
      (*(void (**)(uint64_t *))(*v20 + 8))(v20);
    }
    qword_18C535D80 = 0LL;
    qword_18C535D88 = 0LL;
LABEL_27:
    sub_1809B36C0(0x12u, (uint64_t)sub_1809DD2AC);
    dword_18C535D94 = v39;
    icu::umtx_initImplPostInit(&dword_18C535D90);
    if (v39 >= 1) {
      return a2;
    }
LABEL_28:
    umtx_lock((icu::UMutex *)&unk_18C449B50);
    if ((icu::UVector::indexOf((icu::UVector *)qword_18C535D80, (uint64_t)v8, 0LL) & 0x80000000) == 0)
    {
LABEL_29:
      umtx_unlock((std::mutex **)&unk_18C449B50);
      *(_BYTE *)a3 = 1;
      return a2;
    }

    int v21 = icu::UVector::indexOf((icu::UVector *)qword_18C535D88, (uint64_t)v8, 0LL);
    umtx_unlock((std::mutex **)&unk_18C449B50);
    if (v21 < 0)
    {
      u_UCharsToChars(v8, v40, 2);
      uint64_t v22 = icu::TimeZone::createTimeZoneIDEnumeration(2LL, v40, 0LL, &v39);
      int v23 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v22 + 32LL))(v22, &v39);
      int v24 = v39;
      (*(void (**)(uint64_t))(*(void *)v22 + 8LL))(v22);
      umtx_lock((icu::UMutex *)&unk_18C449B50);
      v42[0] = U_ZERO_ERROR;
      if (v24 <= 0 && v23 == 1)
      {
        goto LABEL_29;
      }

      umtx_unlock((std::mutex **)&unk_18C449B50);
    }

    int32_t v38 = 0;
    if (!v40[0]) {
      u_UCharsToChars(v8, v40, 2);
    }
    uint64_t v25 = ures_openDirect(0LL, (uint64_t)"metaZones", (uint64_t)&v39);
    ures_getByKey(v25, "primaryZones", v25, &v39);
    StringByKey = ures_getStringByKey(v25, v40, &v38, &v39);
    if (v39 <= 0)
    {
      uint64_t v27 = (uint64_t)StringByKey;
      unsigned int v28 = *((unsigned __int16 *)this + 4);
      int v29 = (__int16)v28;
      int32_t v30 = v28 >> 5;
      if (v29 >= 0) {
        int32_t v31 = v30;
      }
      else {
        int32_t v31 = this[3];
      }
      v36[1] = StringByKey;
      if (icu::UnicodeString::doCompare((uint64_t)this, 0, v31, (uint64_t)StringByKey, 0, v38))
      {
        __int128 v43 = 0u;
        __int128 v44 = 0u;
        uint64_t v46 = 0LL;
        __int128 v45 = 0u;
        *(void *)unsigned int v42 = off_18971B688;
        LOWORD(v43) = 2;
        icu::TimeZone::getCanonicalID( (icu::TimeZone *)this,  (const icu::UnicodeString *)v42,  (icu::UnicodeString *)&v39,  v32,  v33);
        uint64_t v34 = v39;
        if (v39 <= 0)
        {
          uint64_t v37 = v27;
          int v35 = sub_1807C3C7C((uint64_t)v42, &v37, v38);
          v36[0] = v37;
          uint64_t v34 = (uint64_t)v36;
          if (!v35)
          {
            uint64_t v34 = 1LL;
            *(_BYTE *)a3 = 1;
          }
        }

        icu::UnicodeString::~UnicodeString((void *)v34, (icu::UnicodeString *)v42);
      }

      else
      {
        *(_BYTE *)a3 = 1;
      }
    }

    ures_close(v25);
  }

  return a2;
}

const icu::UnicodeString *icu::ZoneMeta::getMetazoneID( icu::ZoneMeta *this, const icu::UnicodeString *a2, double a3, icu::UnicodeString *a4)
{
  uint64_t MetazoneMappings = icu::ZoneMeta::getMetazoneMappings(this, a2);
  if (MetazoneMappings && (int v7 = (icu::UVector *)MetazoneMappings, *(int *)(MetazoneMappings + 8) >= 1))
  {
    unsigned int v8 = 0;
    while (1)
    {
      uint64_t v9 = icu::UVector::elementAt(v7, v8);
    }

    uint64_t v11 = *(void *)v9;
    icu::UnicodeString::unBogus((uint64_t)a2);
    unsigned int v12 = *((unsigned __int16 *)a2 + 4);
    int v13 = (__int16)v12;
    unsigned int v14 = v12 >> 5;
    if (v13 >= 0) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = *((unsigned int *)a2 + 3);
    }
    icu::UnicodeString::doReplace((uint64_t)a2, 0LL, v15, v11, 0, 0xFFFFFFFFLL);
  }

  else
  {
LABEL_7:
    icu::UnicodeString::setToBogus(a2);
  }

  return a2;
}

uint64_t icu::ZoneMeta::getMetazoneMappings(icu::ZoneMeta *this, const icu::UnicodeString *a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  int v17 = 0;
  __int16 v19 = 0;
  memset(v18, 0, sizeof(v18));
  uint64_t v16 = (UChar *)v18;
  icu::UnicodeString::extract((uint64_t)this, &v16, 129, &v17);
  uint64_t MetazoneMappings = 0LL;
  if (v17 <= 0 && v17 != -124)
  {
    unsigned int v4 = atomic_load(&dword_18C449BA0);
    if (v4 == 2 || !icu::umtx_initImplPreInit(&dword_18C449BA0))
    {
      uint64_t MetazoneMappings = 0LL;
      if (dword_18C449BA4 > 0 || v17 > 0) {
        return MetazoneMappings;
      }
    }

    else
    {
      sub_1809B36C0(0x12u, (uint64_t)sub_1809DD2AC);
      unsigned int v5 = uhash_open((uint64_t)uhash_hashUChars, (uint64_t)uhash_compareUChars, 0LL, &v17);
      qword_18C449B30 = (uint64_t)v5;
      int v6 = v17;
      if (v17 < 1)
      {
        uhash_setKeyDeleter((uint64_t)v5, (uint64_t)j__uprv_free_6);
        uhash_setValueDeleter(qword_18C449B30, (uint64_t)uprv_deleteUObject);
        int v6 = v17;
      }

      else
      {
        qword_18C449B30 = 0LL;
      }

      dword_18C449BA4 = v6;
      icu::umtx_initImplPostInit(&dword_18C449BA0);
      if (v17 >= 1) {
        return 0LL;
      }
    }

    umtx_lock((icu::UMutex *)&unk_18C449B50);
    uint64_t MetazoneMappings = uhash_get(qword_18C449B30, (uint64_t)v18);
    umtx_unlock((std::mutex **)&unk_18C449B50);
    if (!MetazoneMappings)
    {
      uint64_t MetazoneMappings = (uint64_t)icu::ZoneMeta::createMetazoneMappings(this, v7);
      if (MetazoneMappings)
      {
        umtx_lock((icu::UMutex *)&unk_18C449B50);
        uint64_t v8 = uhash_get(qword_18C449B30, (uint64_t)v18);
        if (!v8)
        {
          unsigned int v10 = *((unsigned __int16 *)this + 4);
          int v11 = (__int16)v10;
          unsigned int v12 = v10 >> 5;
          if (v11 < 0) {
            unsigned int v12 = *((_DWORD *)this + 3);
          }
          int v13 = v12 + 1;
          unsigned int v14 = (UChar *)uprv_malloc(2LL * (int)(v12 + 1));
          uint64_t v8 = (uint64_t)v14;
          if (v14)
          {
            uint64_t v15 = v14;
            icu::UnicodeString::extract((uint64_t)this, &v15, v13, &v17);
            uhash_put(qword_18C449B30, v8, MetazoneMappings, &v17);
            if (v17 < 1) {
              goto LABEL_17;
            }
            uint64_t v8 = 0LL;
          }
        }

        (*(void (**)(uint64_t))(*(void *)MetazoneMappings + 8LL))(MetazoneMappings);
        uint64_t MetazoneMappings = v8;
LABEL_17:
        umtx_unlock((std::mutex **)&unk_18C449B50);
      }
    }
  }

  return MetazoneMappings;
}

icu::UVector *icu::ZoneMeta::createMetazoneMappings(icu::ZoneMeta *this, const icu::UnicodeString *a2)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  UErrorCode v25 = U_ZERO_ERROR;
  __int128 v36 = 0u;
  uint64_t v39 = 0LL;
  __int128 v38 = 0u;
  __int128 v37 = 0u;
  int v35 = off_18971B688;
  LOWORD(v36) = 2;
  uint64_t v3 = ures_openDirect(0LL, (uint64_t)"metaZones", (uint64_t)&v25);
  ures_getByKey(v3, "metazoneInfo", v3, (int *)&v25);
  icu::ZoneMeta::getCanonicalCLDRID(this, (const icu::UnicodeString *)&v35, (icu::UnicodeString *)&v25, v4);
  unsigned int v5 = 0LL;
  if (v25 > U_ZERO_ERROR) {
    goto LABEL_37;
  }
  char v34 = 0;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  *(_OWORD *)uint64_t v26 = 0u;
  __int128 v27 = 0u;
  if ((v36 & 0x8000u) == 0LL) {
    uint64_t v6 = (unsigned __int16)v36 >> 5;
  }
  else {
    uint64_t v6 = DWORD1(v36);
  }
  int v7 = v26;
  v26[(int)icu::UnicodeString::extract((uint64_t)&v35, 0, v6, v26, 129)] = 0;
  while (*v7 == 47)
  {
    *int v7 = 58;
LABEL_10:
    ++v7;
  }

  if (*v7) {
    goto LABEL_10;
  }
  ures_getByKey(v3, v26, v3, (int *)&v25);
  if (v25 <= U_ZERO_ERROR)
  {
    unsigned int v5 = 0LL;
    NextResource = 0LL;
    while (ures_hasNext(v3))
    {
      NextResource = ures_getNextResource(v3, (uint64_t)NextResource, (int *)&v25);
      StringByIndex = ures_getStringByIndex((uint64_t)NextResource, 0, 0LL, (int *)&v25);
      if (ures_getSize((uint64_t)NextResource) == 3)
      {
        unsigned int v10 = ures_getStringByIndex((uint64_t)NextResource, 1, 0LL, (int *)&v25);
        int v11 = ures_getStringByIndex((uint64_t)NextResource, 2, 0LL, (int *)&v25);
      }

      else
      {
        unsigned int v10 = (const UChar *)"1";
        int v11 = (const UChar *)L"9999-12-31 23:59";
      }

      if (v25 < U_ILLEGAL_ARGUMENT_ERROR
        && (v12 = sub_1809DC5F8(v10, (int *)&v25), double v14 = sub_1809DC5F8(v11, (int *)&v25), v25 <= U_ZERO_ERROR))
      {
        double v15 = v14;
        uint64_t v16 = icu::UMemory::operator new((uint64_t *)v25, (icu::UMemory *)0x18, v13);
        uint64_t v18 = v16;
        __int16 v19 = (uint64_t *)v25;
        if (!v16 && v25 <= U_ZERO_ERROR)
        {
          UErrorCode v25 = U_MEMORY_ALLOCATION_ERROR;
          break;
        }

        if (v25 > U_ZERO_ERROR)
        {
          int v21 = v5;
          if (!v16) {
            break;
          }
          goto LABEL_35;
        }

        *uint64_t v16 = (uint64_t)StringByIndex;
        *((double *)v16 + 1) = v12;
        *((double *)v16 + 2) = v15;
        if (!v5)
        {
          uint64_t v20 = icu::UMemory::operator new(v19, (icu::UMemory *)0x28, v17);
          if (!v20)
          {
            int v21 = 0LL;
            if (v25 <= U_ZERO_ERROR) {
              UErrorCode v25 = U_MEMORY_ALLOCATION_ERROR;
            }
LABEL_35:
            icu::UMemory::operator delete(v18);
            unsigned int v5 = v21;
            break;
          }

          unsigned int v5 = (icu::UVector *)v20;
          icu::UVector::UVector((uint64_t)v20, (uint64_t)sub_1809DC7E4, 0LL, (int *)&v25);
          if (v25 > U_ZERO_ERROR)
          {
            (*(void (**)(icu::UVector *))(*(void *)v5 + 8LL))(v5);
            int v21 = 0LL;
            unsigned int v5 = 0LL;
            if (v25 >= U_ILLEGAL_ARGUMENT_ERROR) {
              goto LABEL_35;
            }
          }
        }

        icu::UVector::adoptElement(v5, v18, &v25);
        if (v25 >= U_ILLEGAL_ARGUMENT_ERROR) {
          break;
        }
      }

      else
      {
        UErrorCode v25 = U_ZERO_ERROR;
      }
    }

    ures_close((uint64_t)NextResource);
  }

  else
  {
    unsigned int v5 = 0LL;
  }

double sub_1809DC5F8(const UChar *a1, int *a2)
{
  double v2 = 0.0;
  if (*a2 <= 0)
  {
    int32_t v5 = u_strlen(a1);
    int32_t v6 = v5;
    if (v5 != 10 && v5 != 16)
    {
LABEL_42:
      *a2 = 3;
      return v2;
    }

    int v7 = *a2;
    if (*a2 <= 0)
    {
      unint64_t v11 = 0LL;
      int v9 = 0;
      do
      {
        unsigned int v12 = a1[v11] - 48;
        if (v12 >= 0xA) {
          unsigned int v12 = -1;
        }
        if ((v12 & 0x80000000) != 0)
        {
          unsigned int v8 = 0;
          goto LABEL_26;
        }

        int v9 = v12 + 10 * v9;
        BOOL v13 = v11++ >= 3;
      }

      while (!v13);
      unsigned int v8 = 0;
      unint64_t v14 = 5LL;
      while (1)
      {
        unsigned int v15 = a1[v14] - 48;
        if (v15 >= 0xA) {
          unsigned int v15 = -1;
        }
        if ((v15 & 0x80000000) != 0) {
          break;
        }
        unsigned int v8 = v15 + 10 * v8;
        BOOL v13 = v14++ >= 6;
        if (v13)
        {
          int v10 = 0;
          unint64_t v16 = 8LL;
          while (1)
          {
            unsigned int v17 = a1[v16] - 48;
            if (v17 >= 0xA) {
              unsigned int v17 = -1;
            }
            if ((v17 & 0x80000000) != 0) {
              goto LABEL_42;
            }
            int v10 = v17 + 10 * v10;
            BOOL v18 = v16++ > 8;
            if (v18) {
              goto LABEL_27;
            }
          }
        }
      }

void sub_1809DC7E4(void *a1)
{
  if (a1) {
    icu::UMemory::operator delete(a1);
  }
}

const icu::UnicodeString *icu::ZoneMeta::getZoneIdByMetazone( icu::ZoneMeta *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3, icu::UnicodeString *a4)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  uint64_t v19 = 0LL;
  unsigned int v5 = *((unsigned __int16 *)this + 4);
  if ((v5 & 1) != 0) {
    goto LABEL_8;
  }
  if ((v5 & 0x8000) != 0)
  {
    uint64_t v7 = *((unsigned int *)this + 3);
    if ((int)v7 > 128)
    {
LABEL_8:
      icu::UnicodeString::setToBogus(a3);
      return a3;
    }
  }

  else
  {
    uint64_t v7 = v5 >> 5;
  }

  char v28 = 0;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  *(_OWORD *)unint64_t v20 = 0u;
  __int128 v21 = 0u;
  v20[(int)icu::UnicodeString::extract((uint64_t)this, 0, v7, v20, 129)] = 0;
  uint64_t v8 = ures_openDirect(0LL, (uint64_t)"metaZones", (uint64_t)&v19 + 4);
  ures_getByKey(v8, "mapTimezones", v8, (int *)&v19 + 1);
  ures_getByKey(v8, v20, v8, (int *)&v19 + 1);
  int v9 = HIDWORD(v19);
  if (SHIDWORD(v19) >= 1)
  {
    ures_close(v8);
    goto LABEL_8;
  }

  if ((*((__int16 *)a2 + 4) & 0x80000000) == 0)
  {
    unsigned int v11 = *((unsigned __int16 *)a2 + 4);
    if ((v11 & 0xFFC0 | 0x20) == 0x60)
    {
      uint64_t v12 = v11 >> 5;
      goto LABEL_14;
    }

uint64_t icu::ZoneMeta::getAvailableMetazoneIDs(icu::ZoneMeta *this)
{
  unsigned int v1 = atomic_load((unsigned int *)&unk_18C449BA8);
  if (v1 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_18C449BA8))
  {
    sub_1809DCA54();
    icu::umtx_initImplPostInit((unsigned int *)&unk_18C449BA8);
  }

  return qword_18C449B38;
}

void sub_1809DCA54()
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  sub_1809B36C0(0x12u, (uint64_t)sub_1809DD2AC);
  UErrorCode v12 = U_ZERO_ERROR;
  unint64_t v0 = uhash_open((uint64_t)uhash_hashUChars, (uint64_t)uhash_compareUChars, 0LL, (int *)&v12);
  qword_18C449B40 = (uint64_t)v0;
  if (v12 > U_ZERO_ERROR || v0 == 0LL) {
    goto LABEL_9;
  }
  uint64_t v3 = icu::UMemory::operator new((uint64_t *)v12, (icu::UMemory *)0x28, v1);
  if (!v3)
  {
LABEL_8:
    qword_18C449B38 = 0LL;
    uhash_close((_BYTE *)qword_18C449B40);
LABEL_9:
    qword_18C449B40 = 0LL;
    return;
  }

  unsigned int v4 = (icu::UVector *)icu::UVector::UVector((uint64_t)v3, 0LL, (uint64_t)uhash_compareUChars, (int *)&v12);
  qword_18C449B38 = (uint64_t)v4;
  if (v12 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    (*(void (**)(icu::UVector *))(*(void *)v4 + 8LL))(v4);
    goto LABEL_8;
  }

  icu::UVector::setDeleter(v4, uprv_free);
  uint64_t v5 = ures_openDirect(0LL, (uint64_t)"metaZones", (uint64_t)&v12);
  uint64_t v6 = ures_getByKey(v5, "mapTimezones", 0LL, (int *)&v12);
  uint64_t v14 = 0LL;
  memset(v13, 0, sizeof(v13));
  icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v13);
  if (v12 <= U_ZERO_ERROR)
  {
    do
    {
      if (!ures_hasNext(v6)) {
        break;
      }
      ures_getNextResource(v6, (uint64_t)v13, (int *)&v12);
      if (v12 > U_ZERO_ERROR) {
        break;
      }
      Key = (const char *)ures_getKey((uint64_t)v13);
      size_t v8 = strlen(Key);
      int32_t v9 = v8;
      int v10 = (UChar *)uprv_malloc((uint64_t)((v8 << 32) + 0x100000000LL) >> 31);
      if (!v10)
      {
        UErrorCode v12 = U_MEMORY_ALLOCATION_ERROR;
        uprv_free(0LL);
        break;
      }

      unsigned int v11 = v10;
      u_charsToUChars(Key, v10, v9);
      v11[v9] = 0;
      if (!uhash_get(qword_18C449B40, (uint64_t)v11))
      {
        uhash_put(qword_18C449B40, (uint64_t)v11, (uint64_t)v11, (int *)&v12);
        icu::UVector::adoptElement((icu::UVector *)qword_18C449B38, v11, &v12);
        unsigned int v11 = 0LL;
      }

      uprv_free(v11);
    }

    while (v12 < U_ILLEGAL_ARGUMENT_ERROR);
  }

  ures_close(v6);
  ures_close(v5);
  if (v12 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    uhash_close((_BYTE *)qword_18C449B40);
    if (qword_18C449B38) {
      (*(void (**)(uint64_t))(*(void *)qword_18C449B38 + 8LL))(qword_18C449B38);
    }
    qword_18C449B40 = 0LL;
    qword_18C449B38 = 0LL;
  }

  icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v13);
}

uint64_t icu::ZoneMeta::findMetaZoneID(UChar **this, const icu::UnicodeString *a2)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  unsigned int v3 = atomic_load((unsigned int *)&unk_18C449BA8);
  if (v3 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_18C449BA8))
  {
    sub_1809DCA54();
    icu::umtx_initImplPostInit((unsigned int *)&unk_18C449BA8);
  }

  if (!qword_18C449B40) {
    return 0LL;
  }
  memset(v9, 0, sizeof(v9));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v9, this);
  uint64_t v4 = qword_18C449B40;
  uint64_t TerminatedBuffer = icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)v9);
  uint64_t v6 = uhash_get(v4, TerminatedBuffer);
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v9);
  return v6;
}

icu::SimpleTimeZone *icu::ZoneMeta::createCustomTimeZone( icu::ZoneMeta *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, icu::UnicodeString *a6)
{
  int v6 = (int)this;
  uint64_t v19 = *MEMORY[0x1895F89C0];
  else {
    unsigned int v7 = -(int)this;
  }
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  uint64_t v18 = 0LL;
  __int128 v17 = 0u;
  uint64_t v14 = (UChar *)off_18971B688;
  LOWORD(v15) = 2;
  icu::ZoneMeta::formatCustomID( (icu::ZoneMeta *)(v7 / 0x36EE80),  (unsigned __int16)(v7 / 0xEA60) % 0x3Cu,  v7 / 0x3E8 - 60 * ((71582789 * (unint64_t)(v7 / 0x3E8)) >> 32),  this >> 31,  (icu::UnicodeString *)&v14,  a6);
  uint64_t v10 = (icu::SimpleTimeZone *)icu::UMemory::operator new(v9, (icu::UMemory *)0xA0, v8);
  UErrorCode v12 = v10;
  if (v10) {
    icu::SimpleTimeZone::SimpleTimeZone(v10, v6, &v14);
  }
  icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)&v14);
  return v12;
}

icu::UnicodeString *icu::ZoneMeta::formatCustomID( icu::ZoneMeta *this, unsigned int a2, int a3, int a4, icu::UnicodeString *a5, icu::UnicodeString *a6)
{
  unsigned int v10 = this;
  icu::UnicodeString::unBogus((uint64_t)a5);
  unsigned int v11 = *((unsigned __int16 *)a5 + 4);
  int v12 = (__int16)v11;
  unsigned int v13 = v11 >> 5;
  if (v12 >= 0) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = *((unsigned int *)a5 + 3);
  }
  icu::UnicodeString::doReplace((uint64_t)a5, 0LL, v14, (uint64_t)L"GMT", 0, 0xFFFFFFFFLL);
  if (a2 | v10)
  {
    if (a4) {
      __int16 v15 = 45;
    }
    else {
      __int16 v15 = 43;
    }
    __int16 v17 = v15;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v17, 0, 1LL);
    __int16 v17 = ((429496730 * (unint64_t)(v10 - 100 * ((42949673 * (unint64_t)v10) >> 32))) >> 32) | 0x30;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v17, 0, 1LL);
    __int16 v17 = (v10 - 10 * ((429496730 * (unint64_t)v10) >> 32)) | 0x30;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v17, 0, 1LL);
    __int16 v17 = 58;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v17, 0, 1LL);
    __int16 v17 = ((429496730 * (unint64_t)(a2 - 100 * ((42949673 * (unint64_t)a2) >> 32))) >> 32) | 0x30;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v17, 0, 1LL);
    __int16 v17 = (a2 - 10 * ((429496730 * (unint64_t)a2) >> 32)) | 0x30;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v17, 0, 1LL);
    if (a3)
    {
      __int16 v17 = 58;
      icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v17, 0, 1LL);
      __int16 v17 = ((103 * (a3 - 100 * ((41 * a3) >> 12))) >> 10) | 0x30;
      icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v17, 0, 1LL);
      __int16 v17 = (a3 - 10 * ((205 * a3) >> 11)) | 0x30;
      icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v17, 0, 1LL);
    }
  }

  return a5;
}

const UChar *icu::ZoneMeta::getShortID(const UChar **this, const icu::TimeZone *a2)
{
    && (unsigned int v3 = this[19]) != 0LL)
  {
    return icu::ZoneMeta::getShortIDFromCanonical(v3);
  }

  else
  {
    return 0LL;
  }

const UChar *icu::ZoneMeta::getShortIDFromCanonical(const UChar *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  int32_t v2 = u_strlen(a1);
  char v17 = 0;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  *(_OWORD *)int32_t v9 = 0u;
  __int128 v10 = 0u;
  u_UCharsToChars(a1, v9, v2);
  v9[v2] = 0;
  if (v9[0])
  {
    unsigned int v3 = &v9[1];
    do
    {
      int v4 = *v3;
      if (v4 == 47)
      {
        int v4 = 58;
        *unsigned int v3 = 58;
      }

      ++v3;
    }

    while (v4);
  }

  int v8 = 0;
  uint64_t v5 = ures_openDirect(0LL, (uint64_t)"keyTypeData", (uint64_t)&v8);
  ures_getByKey(v5, "typeMap", v5, &v8);
  ures_getByKey(v5, "timezone", v5, &v8);
  StringByKey = ures_getStringByKey(v5, v9, 0LL, &v8);
  ures_close(v5);
  return StringByKey;
}

const UChar *icu::ZoneMeta::getShortID(icu::ZoneMeta *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  int v6 = 0;
  CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID(this, (const icu::UnicodeString *)&v6, a3);
  if (v6 > 0 || CanonicalCLDRID == 0LL) {
    return 0LL;
  }
  else {
    return icu::ZoneMeta::getShortIDFromCanonical(CanonicalCLDRID);
  }
}

uint64_t sub_1809DD2AC()
{
  if (qword_18C449B28)
  {
    uhash_close((_BYTE *)qword_18C449B28);
    qword_18C449B28 = 0LL;
  }

  atomic_store(0, &dword_18C449B48);
  if (qword_18C449B30)
  {
    uhash_close((_BYTE *)qword_18C449B30);
    qword_18C449B30 = 0LL;
  }

  atomic_store(0, &dword_18C449BA0);
  if (qword_18C449B40)
  {
    uhash_close((_BYTE *)qword_18C449B40);
    qword_18C449B40 = 0LL;
  }

  if (qword_18C449B38) {
    (*(void (**)(uint64_t))(*(void *)qword_18C449B38 + 8LL))(qword_18C449B38);
  }
  qword_18C449B38 = 0LL;
  atomic_store(0, (unsigned int *)&unk_18C449BA8);
  if (qword_18C535D80) {
    (*(void (**)(uint64_t))(*(void *)qword_18C535D80 + 8LL))(qword_18C535D80);
  }
  qword_18C535D80 = 0LL;
  if (qword_18C535D88) {
    (*(void (**)(uint64_t))(*(void *)qword_18C535D88 + 8LL))(qword_18C535D88);
  }
  qword_18C535D88 = 0LL;
  atomic_store(0, &dword_18C535D90);
  return 1LL;
}

uint64_t zrule_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t zrule_equals(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
}

void *zrule_getName(UChar **a1, void *a2, int a3)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v10 = a2;
  icu::UnicodeString::UnicodeString(&v11, a3 == -1, &v10);
  Name = icu::TimeZoneRule::getName(a1, (UChar **)&v11);
  icu::UnicodeString::operator=((UChar **)&v11, Name);
  int v6 = HIDWORD(v11);
  if ((BYTE8(v11) & 0x11) != 0)
  {
    unsigned int v7 = 0LL;
  }

  else if ((BYTE8(v11) & 2) != 0)
  {
    unsigned int v7 = (const void *)((unint64_t)&v11 | 0xA);
  }

  else
  {
    unsigned int v7 = (const void *)*((void *)&v12 + 1);
  }

  if ((SWORD4(v11) & 0x8000u) == 0) {
    int v6 = WORD4(v11) >> 5;
  }
  memcpy(a2, v7, v6);
  return icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v11);
}

icu::InitialTimeZoneRule *izrule_open(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  memset(v13, 0, sizeof(v13));
  uint64_t v12 = a1;
  icu::UnicodeString::UnicodeString(v13, a2 == -1, &v12);
  uint64_t v11 = v12;
  unsigned int v7 = (icu::InitialTimeZoneRule *)icu::UMemory::operator new(&v11, (icu::UMemory *)0x50, v6);
  int32_t v9 = v7;
  if (v7) {
    icu::InitialTimeZoneRule::InitialTimeZoneRule(v7, (UChar **)v13, a3, a4);
  }
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v13);
  return v9;
}

uint64_t izrule_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t izrule_equals(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
}

void *izrule_getName(UChar **a1, void *a2, int *a3)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  uint64_t v14 = 0LL;
  __int128 v13 = 0u;
  __int128 v10 = (UChar *)off_18971B688;
  LOWORD(v11) = 2;
  icu::TimeZoneRule::getName(a1, &v10);
  int v5 = (unsigned __int16)v11 >> 5;
  if ((v11 & 0x8000u) != 0LL) {
    int v5 = DWORD1(v11);
  }
  *a3 = v5;
  unint64_t v6 = uprv_malloc(v5);
  unsigned int v7 = 0LL;
  *a2 = v6;
  if ((v11 & 0x11) == 0)
  {
    if ((v11 & 2) != 0) {
      unsigned int v7 = (char *)&v11 + 2;
    }
    else {
      unsigned int v7 = (char *)v12;
    }
  }

  memcpy(v6, v7, *a3);
  return icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v10);
}

icu::TimeZoneTransition *ztrans_open@<X0>( const icu::TimeZoneRule *a1@<X0>, const icu::TimeZoneRule *a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  uint64_t result = (icu::TimeZoneTransition *)icu::UMemory::operator new(a3, (icu::UMemory *)0x20, (unint64_t)a2);
  if (result) {
    return icu::TimeZoneTransition::TimeZoneTransition(result, a4, a1, a2);
  }
  return result;
}

uint64_t *ztrans_openEmpty@<X0>(unint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result = icu::UMemory::operator new(a2, (icu::UMemory *)0x20, a1);
  if (result) {
    return icu::TimeZoneTransition::TimeZoneTransition(result);
  }
  return result;
}

uint64_t ztrans_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

BOOL ztrans_equals(uint64_t a1, uint64_t a2)
{
  return icu::TimeZoneTransition::operator==(a1, a2);
}

uint64_t ztrans_getFrom(icu::TimeZoneTransition **a1)
{
  return icu::TimeZoneTransition::getFrom(*a1);
}

void sub_1809DD77C()
{
  *(_WORD *)unint64_t v0 = 0;
  _os_log_error_impl( &dword_1807BC000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_ERROR,  "ICU's u_setMemoryFunctions() is not safe and has been disabled. Please remove calls to it from your code.",  v0,  2u);
}

void icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::toSkeleton( UErrorCode *a2@<X1>, uint64_t a1@<X0>, uint64_t a3@<X8>)
{
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::integerWidth@<X0>( _OWORD *a3@<X8>, uint64_t a1@<X0>, uint64_t a2@<X1>)
{
  return __ZNKR3icu6number23NumberFormatterSettingsINS0_24LocalizedNumberFormatterEE12integerWidthERKNS0_12IntegerWidthE( a1,  a2,  a3);
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::unit@<X0>( _OWORD *a3@<X8>, uint64_t a1@<X0>, unint64_t a2@<X1>)
{
  return __ZNKR3icu6number23NumberFormatterSettingsINS0_24LocalizedNumberFormatterEE4unitERKNS_11MeasureUnitE( a1,  a2,  a3);
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::perUnit@<X0>( _OWORD *a3@<X8>, uint64_t a1@<X0>, unint64_t a2@<X1>)
{
  return __ZNO3icu6number23NumberFormatterSettingsINS0_24LocalizedNumberFormatterEE7perUnitERKNS_11MeasureUnitE( a1,  a2,  a3);
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::unitWidth@<X0>( _OWORD *a3@<X8>, uint64_t a1@<X0>, int a2@<W1>)
{
  return __ZNO3icu6number23NumberFormatterSettingsINS0_24LocalizedNumberFormatterEE9unitWidthE16UNumberUnitWidth( a1,  a2,  a3);
}

uint64_t icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::identityFallback@<X0>( _DWORD *a3@<X8>, uint64_t a1@<X0>, int a2@<W1>)
{
  return __ZNO3icu6number28NumberRangeFormatterSettingsINS0_29LocalizedNumberRangeFormatterEE16identityFallbackE28UNumberRangeIdentityFallback( a1,  a2,  a3);
}

icu::Locale *icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::numberFormatterBoth@<X0>( _BYTE *a3@<X8>, uint64_t a1@<X0>, uint64_t a2@<X1>)
{
  return __ZNO3icu6number28NumberRangeFormatterSettingsINS0_29LocalizedNumberRangeFormatterEE19numberFormatterBothEONS0_26UnlocalizedNumberFormatterE( a1,  a2,  a3);
}

uint64_t icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::collapse@<X0>( _DWORD *a3@<X8>, uint64_t a1@<X0>, int a2@<W1>)
{
  return __ZNO3icu6number28NumberRangeFormatterSettingsINS0_29LocalizedNumberRangeFormatterEE8collapseE20UNumberRangeCollapse( a1,  a2,  a3);
}

void std::__call_once(unint64_t *a1, void *a2, void (__cdecl *a3)(void *))
{
}

std::string *__cdecl std::string::append( std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1896142D8](this, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

void std::condition_variable::notify_all(std::condition_variable *this)
{
}

void std::condition_variable::wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk)
{
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

void operator delete[](void *__p)
{
}

void operator delete(void *__p)
{
}

void *__cdecl operator new[](size_t __sz)
{
  return (void *)off_18970AAD8(__sz);
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_18970AAE0(__sz);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1895F8878](lpfunc, obj, lpdso_handle);
}

void __cxa_bad_typeid(void)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1896147F0](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void *__dynamic_cast( const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x189614810](lpsrc, lpstype, lpdtype, s2d);
}

double __exp10(double a1)
{
  return result;
}

__double2 __sincos_stret(double a1)
{
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

void _os_log_error_impl( void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void abort(void)
{
}

double acos(double a1)
{
  return result;
}

double asin(double a1)
{
  return result;
}

double atan(double a1)
{
  return result;
}

double atan2(double a1, double a2)
{
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x1895F95A0](a1);
}

uint64_t atol(const char *a1)
{
  return MEMORY[0x1895F95A8](a1);
}

void *__cdecl bsearch( const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return (void *)MEMORY[0x1895F9650](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return MEMORY[0x1895FA590](*(void *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x1895FA5A8](a1);
}

double cos(double a1)
{
  return result;
}

div_t div(int a1, int a2)
{
  return (div_t)MEMORY[0x1895FAF40](*(void *)&a1, *(void *)&a2);
}

int dlclose(void *__handle)
{
  return MEMORY[0x1895FAF50](__handle);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1895FAF60](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1895FAF78](__handle, __symbol);
}

float expf(float a1)
{
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1895FB208](a1);
}

double fmod(double a1, double a2)
{
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1895FB348](__filename, __mode);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1895FB388](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x1895FB420](a1, a2, *(void *)&a3);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x1895FB470](a1);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1895FB538](a1);
}

const char *getprogname(void)
{
  return (const char *)MEMORY[0x1895FB638]();
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1895FB6E0](a1, a2);
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x1895FBA20](a1, a2);
}

double log(double a1)
{
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1895FBC88](__size);
}

void *__cdecl memchr(const void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1895FBE00](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1895FBE08](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1895FBE18](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1895FBE30](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1895FBE48](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1895FBF70](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

double modf(double a1, double *a2)
{
  return result;
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1895FBF98](a1, a2);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1895FC248](a1, *(void *)&a2);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x1895FC278](a1);
}

uint64_t os_eligibility_get_domain_answer()
{
  return MEMORY[0x1895FC408]();
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1895FC470](oslog, type);
}

int posix_madvise(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1895FC7D0](a1, a2, *(void *)&a3);
}

double pow(double a1, double a2)
{
  return result;
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x1895FCC40](a1);
}

ssize_t readlink(const char *a1, char *a2, size_t a3)
{
  return MEMORY[0x1895FCC50](a1, a2, a3);
}

void *__cdecl realloc(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x1895FCC68](__ptr, __size);
}

char *__cdecl realpath(const char *a1, char *a2)
{
  return (char *)MEMORY[0x1895FCC78](a1, a2);
}

void rewind(FILE *a1)
{
}

char *__cdecl setlocale(int a1, const char *a2)
{
  return (char *)MEMORY[0x1895FCE98](*(void *)&a1, a2);
}

double sin(double a1)
{
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1895FCF90](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x1895FCFB0](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1895FD010](a1, a2);
}

char *__cdecl strcat(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1895FD040](__s1, __s2);
}

char *__cdecl strchr(const char *__s, int __c)
{
  return (char *)MEMORY[0x1895FD048](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1895FD050](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x1895FD068](__dst, __src);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1895FD0B8](__s);
}

char *__cdecl strncat(char *__s1, const char *__s2, size_t __n)
{
  return (char *)MEMORY[0x1895FD0E0](__s1, __s2, __n);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1895FD0E8](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1895FD0F0](__dst, __src, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1895FD100](__s1, __n);
}

char *__cdecl strrchr(const char *__s, int __c)
{
  return (char *)MEMORY[0x1895FD120](__s, *(void *)&__c);
}

char *__cdecl strstr(const char *__big, const char *__little)
{
  return (char *)MEMORY[0x1895FD148](__big, __little);
}

double strtod(const char *a1, char **a2)
{
  return result;
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1895FD180](__str, __endptr, *(void *)&__base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1895FD1B8](__str, __endptr, *(void *)&__base);
}

double tan(double a1)
{
  return result;
}

float tanhf(float a1)
{
  return result;
}