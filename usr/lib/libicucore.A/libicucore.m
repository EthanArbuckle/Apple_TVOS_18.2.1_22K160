uint64_t icu::Appendable::appendCodePoint(icu::Appendable *this, int a2)
{
  __int16 v2;
  uint64_t result;
  v2 = a2;
  if (a2 < 0x10000) {
    return (*(uint64_t (**)(icu::Appendable *, void))(*(void *)this + 24LL))(this, (unsigned __int16)a2);
  }
  result = (*(uint64_t (**)(icu::Appendable *, void))(*(void *)this + 24LL))( this,  (unsigned __int16)((a2 >> 10) - 10304));
  if ((_DWORD)result) {
    return (*(unsigned int (**)(icu::Appendable *, void))(*(void *)this + 24LL))( this,  v2 & 0x3FF | 0xDC00u) != 0;
  }
  return result;
}

uint64_t icu::Appendable::appendString(uint64_t a1, _WORD *a2, int a3)
{
  v3 = a2;
  if (a3 < 0)
  {
    while (*v3)
    {
      ++v3;
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
      if (!(_DWORD)result) {
        return result;
      }
    }

    return 1LL;
  }

  if (!a3) {
    return 1LL;
  }
  v5 = &a2[a3];
  v6 = a2 + 1;
  do
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 24LL))(a1, (unsigned __int16)*(v6 - 1));
    if ((_DWORD)result) {
      BOOL v8 = v6 >= v5;
    }
    else {
      BOOL v8 = 1;
    }
    ++v6;
  }

  while (!v8);
  if ((_DWORD)result) {
    return 1LL;
  }
  return result;
}

uint64_t icu::Appendable::reserveAppendCapacity(icu::Appendable *this)
{
  return 1LL;
}

uint64_t icu::Appendable::getAppendBuffer(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, int *a6)
{
  BOOL v7 = a2 < 1 || a5 < a2;
  BOOL v8 = !v7;
  if (v7) {
    int v9 = 0;
  }
  else {
    int v9 = a5;
  }
  if (v8) {
    uint64_t result = a4;
  }
  else {
    uint64_t result = 0LL;
  }
  *a6 = v9;
  return result;
}

uint64_t sub_1807BD39C(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = &off_18970AE20;
  *(void *)(a1 + 856) = a2;
  *(_DWORD *)(a1 + 864) = a3;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 748) = 0u;
  *(_OWORD *)(a1 + 764) = 0u;
  *(_OWORD *)(a1 + 716) = 0u;
  *(_OWORD *)(a1 + 732) = 0u;
  *(_OWORD *)(a1 + 684) = 0u;
  *(_OWORD *)(a1 + 700) = 0u;
  *(_OWORD *)(a1 + 652) = 0u;
  *(_OWORD *)(a1 + 668) = 0u;
  *(_OWORD *)(a1 + 620) = 0u;
  *(_OWORD *)(a1 + 636) = 0u;
  *(_OWORD *)(a1 + 588) = 0u;
  *(_OWORD *)(a1 + 604) = 0u;
  *(_OWORD *)(a1 + 556) = 0u;
  *(_OWORD *)(a1 + 572) = 0u;
  *(_OWORD *)(a1 + 524) = 0u;
  *(_OWORD *)(a1 + 540) = 0u;
  *(_OWORD *)(a1 + 492) = 0u;
  *(_OWORD *)(a1 + 508) = 0u;
  *(_OWORD *)(a1 + 460) = 0u;
  *(_OWORD *)(a1 + 476) = 0u;
  *(_OWORD *)(a1 + 428) = 0u;
  *(_OWORD *)(a1 + 444) = 0u;
  *(_OWORD *)(a1 + 396) = 0u;
  *(_OWORD *)(a1 + 412) = 0u;
  *(_OWORD *)(a1 + 364) = 0u;
  *(_OWORD *)(a1 + 380) = 0u;
  *(_OWORD *)(a1 + 332) = 0u;
  *(_OWORD *)(a1 + 348) = 0u;
  *(_OWORD *)(a1 + 300) = 0u;
  *(_OWORD *)(a1 + 316) = 0u;
  *(_OWORD *)(a1 + 268) = 0u;
  *(_OWORD *)(a1 + 284) = 0u;
  uint64_t v4 = sub_1807BD4E4(a1, 2048, 0LL, (a3 - 1));
  *(_DWORD *)(a1 + 780) = v4;
  int v5 = 4096;
  for (uint64_t i = 784LL; i != 848; i += 4LL)
  {
    uint64_t v4 = sub_1807BD4E4(a1, v5, v4, (*(_DWORD *)(a1 + 864) - 1));
    *(_DWORD *)(a1 + i) = v4;
    v5 += 4096;
  }

  *(_DWORD *)(a1 + 848) = *(_DWORD *)(a1 + 864) - 1;
  *(_BYTE *)(a1 + 264) = sub_1807BD4E4(a1, 65533, *(unsigned int *)(a1 + 840), *(unsigned int *)(a1 + 844)) & 1;
  sub_1807BD54C((char *)a1);
  sub_1807BD7B4(a1);
  return a1;
}

uint64_t sub_1807BD4E4(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 856);
  if ((int)a3 < (int)a4)
  {
    int v5 = ((int)a4 + (int)a3) >> 1;
    if (*(_DWORD *)(v4 + 4LL * ((int)a4 - 1)) > a2 && v5 != (_DWORD)a3)
    {
      do
      {
        if (*(_DWORD *)(v4 + 4LL * v5) > a2)
        {
          a4 = v5;
        }

        else
        {
          LODWORD(a3) = v5;
          a4 = a4;
        }

        int v5 = ((int)a4 + (int)a3) >> 1;
      }

      while (v5 != (_DWORD)a3);
    }
  }

  return a4;
}

char *sub_1807BD54C(char *result)
{
  v1 = result;
  int v2 = 0;
  v3 = result + 8;
  while (1)
  {
    uint64_t v4 = *((void *)v1 + 107);
    uint64_t v5 = v2 + 1LL;
    int v6 = *((_DWORD *)v1 + 216);
    if ((int)v5 >= v6)
    {
      int v7 = 1114112;
    }

    else
    {
      int v7 = *(_DWORD *)(v4 + 4 * v5);
      LODWORD(v5) = v2 + 2;
    }

    uint64_t v8 = *(int *)(v4 + 4LL * v2);
    else {
      int v9 = v7;
    }
    LODWORD(v10) = v9 + ~(_DWORD)v8;
    else {
      uint64_t v10 = v10;
    }
    uint64_t result = (char *)memset(&v3[v8], 1, v10 + 1);
    int v2 = v5;
    if (v7 >= 257)
    {
      uint64_t v4 = *((void *)v1 + 107);
      int v6 = *((_DWORD *)v1 + 216);
      break;
    }
  }

  uint64_t v11 = 0LL;
  uint64_t v12 = v6;
  while (1)
  {
    uint64_t v13 = v11;
    if (v11 + 1 >= v12) {
      break;
    }
    v11 += 2LL;
    int v14 = *(_DWORD *)(v4 + 4 * v13 + 4);
    if (v14 > 128) {
      goto LABEL_19;
    }
  }

  LODWORD(v11) = v11 + 1;
  int v14 = 1114112;
LABEL_19:
  int v15 = *(_DWORD *)(v4 + 4 * v13);
  if (v15 <= 128) {
    int v16 = 128;
  }
  else {
    int v16 = v15;
  }
  if (v16 <= 0x7FF)
  {
    while (1)
    {
      int v17 = v14 >= 2048 ? 2048 : v14;
      uint64_t result = (char *)sub_1807BD9AC((_DWORD *)v1 + 67, v16, v17);
      if (v14 > 2048) {
        break;
      }
      uint64_t v18 = *((void *)v1 + 107);
      uint64_t v19 = (int)v11 + 1LL;
      if ((int)v19 >= *((_DWORD *)v1 + 216))
      {
        int v14 = 1114112;
      }

      else
      {
        int v14 = *(_DWORD *)(v18 + 4 * v19);
        LODWORD(v19) = v11 + 2;
      }

      int v16 = *(_DWORD *)(v18 + 4LL * (int)v11);
      LODWORD(v11) = v19;
      if (v16 >= 2048) {
        goto LABEL_33;
      }
    }

    int v16 = 2048;
    goto LABEL_36;
  }

  LODWORD(v19) = v11;
LABEL_33:
  LODWORD(v11) = v19;
  if (!HIWORD(v16))
  {
LABEL_36:
    int v20 = 2048;
    do
    {
      if (v14 >= 0x10000) {
        int v14 = 0x10000;
      }
      if (v16 <= v20) {
        signed int v21 = v20;
      }
      else {
        signed int v21 = v16;
      }
      if (v21 < v14)
      {
        if ((v21 & 0x3F) != 0)
        {
          v22 = &v1[4 * ((v21 >> 6) & 0x3F)];
          *((_DWORD *)v22 + 131) |= 65537 << (v21 >> 12);
          signed int v21 = (v21 & 0xFFFFFFC0) + 64;
          int v20 = v21;
        }

        if (v21 < v14)
        {
          unsigned int v23 = v14 & 0xFFFFFFC0;
          if ((v14 & 0x3F) != 0)
          {
            v24 = &v1[4 * ((v14 >> 6) & 0x3F)];
            *((_DWORD *)v24 + 131) |= 65537 << (v14 >> 12);
            int v14 = v23 + 64;
            int v20 = v23 + 64;
          }
        }
      }

      if (v14 == 0x10000) {
        break;
      }
      uint64_t v25 = *((void *)v1 + 107);
      uint64_t v26 = (int)v11 + 1LL;
      if ((int)v26 >= *((_DWORD *)v1 + 216))
      {
        int v14 = 1114112;
      }

      else
      {
        int v14 = *(_DWORD *)(v25 + 4 * v26);
        LODWORD(v26) = v11 + 2;
      }

      int v16 = *(_DWORD *)(v25 + 4LL * (int)v11);
      LODWORD(v11) = v26;
    }

    while (v16 < 0x10000);
  }

  return result;
}

__n128 sub_1807BD7B4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 264))
  {
    for (uint64_t i = 0LL; i != 256; i += 16LL)
      *(_OWORD *)(a1 + 268 + i) |= __PAIR128__(0x300000003LL, 0x300000003LL);
    for (uint64_t j = 0LL; j != 128; j += 16LL)
      *(_OWORD *)(a1 + 524 + j) |= __PAIR128__(0x100000001LL, 0x100000001LL);
    uint64_t v3 = 0LL;
    uint64_t v4 = a1 + 652;
    do
    {
      __n128 result = (__n128)(*(_OWORD *)(v4 + v3) & __PAIR128__(0xDFFFDFFFDFFFDFFFLL, 0xDFFFDFFFDFFFDFFFLL) | __PAIR128__(0x200000002000LL, 0x200000002000LL));
      *(__n128 *)(v4 + v3) = result;
      v3 += 16LL;
    }

    while (v3 != 128);
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = a1 + 652;
    do
    {
      __n128 result = (__n128)(*(_OWORD *)(v7 + v6) & __PAIR128__(0xDFFFDFFFDFFFDFFFLL, 0xDFFFDFFFDFFFDFFFLL));
      *(__n128 *)(v7 + v6) = result;
      v6 += 16LL;
    }

    while (v6 != 128);
  }

  return result;
}

__n128 sub_1807BD84C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = &off_18970AE20;
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(void *)(a1 + 856) = a3;
  *(_DWORD *)(a1 + 864) = a4;
  __int128 v4 = *(_OWORD *)(a2 + 8);
  __int128 v5 = *(_OWORD *)(a2 + 24);
  __int128 v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  __int128 v7 = *(_OWORD *)(a2 + 72);
  __int128 v8 = *(_OWORD *)(a2 + 88);
  __int128 v9 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v9;
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  __int128 v10 = *(_OWORD *)(a2 + 136);
  __int128 v11 = *(_OWORD *)(a2 + 152);
  __int128 v12 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v12;
  *(_OWORD *)(a1 + 152) = v11;
  *(_OWORD *)(a1 + 136) = v10;
  __int128 v13 = *(_OWORD *)(a2 + 200);
  __int128 v14 = *(_OWORD *)(a2 + 216);
  __int128 v15 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v15;
  *(_OWORD *)(a1 + 216) = v14;
  *(_OWORD *)(a1 + 200) = v13;
  __int128 v16 = *(_OWORD *)(a2 + 268);
  __int128 v17 = *(_OWORD *)(a2 + 284);
  __int128 v18 = *(_OWORD *)(a2 + 316);
  *(_OWORD *)(a1 + 300) = *(_OWORD *)(a2 + 300);
  *(_OWORD *)(a1 + 316) = v18;
  *(_OWORD *)(a1 + 268) = v16;
  *(_OWORD *)(a1 + 284) = v17;
  __int128 v19 = *(_OWORD *)(a2 + 332);
  __int128 v20 = *(_OWORD *)(a2 + 348);
  __int128 v21 = *(_OWORD *)(a2 + 380);
  *(_OWORD *)(a1 + 364) = *(_OWORD *)(a2 + 364);
  *(_OWORD *)(a1 + 380) = v21;
  *(_OWORD *)(a1 + 332) = v19;
  *(_OWORD *)(a1 + 348) = v20;
  __int128 v22 = *(_OWORD *)(a2 + 396);
  __int128 v23 = *(_OWORD *)(a2 + 412);
  __int128 v24 = *(_OWORD *)(a2 + 444);
  *(_OWORD *)(a1 + 428) = *(_OWORD *)(a2 + 428);
  *(_OWORD *)(a1 + 444) = v24;
  *(_OWORD *)(a1 + 396) = v22;
  *(_OWORD *)(a1 + 412) = v23;
  __int128 v25 = *(_OWORD *)(a2 + 460);
  __int128 v26 = *(_OWORD *)(a2 + 476);
  __int128 v27 = *(_OWORD *)(a2 + 508);
  *(_OWORD *)(a1 + 492) = *(_OWORD *)(a2 + 492);
  *(_OWORD *)(a1 + 508) = v27;
  *(_OWORD *)(a1 + 460) = v25;
  *(_OWORD *)(a1 + 476) = v26;
  __int128 v28 = *(_OWORD *)(a2 + 524);
  __int128 v29 = *(_OWORD *)(a2 + 540);
  __int128 v30 = *(_OWORD *)(a2 + 572);
  *(_OWORD *)(a1 + 556) = *(_OWORD *)(a2 + 556);
  *(_OWORD *)(a1 + 572) = v30;
  *(_OWORD *)(a1 + 524) = v28;
  *(_OWORD *)(a1 + 540) = v29;
  __int128 v31 = *(_OWORD *)(a2 + 588);
  __int128 v32 = *(_OWORD *)(a2 + 604);
  __int128 v33 = *(_OWORD *)(a2 + 636);
  *(_OWORD *)(a1 + 620) = *(_OWORD *)(a2 + 620);
  *(_OWORD *)(a1 + 636) = v33;
  *(_OWORD *)(a1 + 588) = v31;
  *(_OWORD *)(a1 + 604) = v32;
  __int128 v34 = *(_OWORD *)(a2 + 652);
  __int128 v35 = *(_OWORD *)(a2 + 668);
  __int128 v36 = *(_OWORD *)(a2 + 700);
  *(_OWORD *)(a1 + 684) = *(_OWORD *)(a2 + 684);
  *(_OWORD *)(a1 + 700) = v36;
  *(_OWORD *)(a1 + 652) = v34;
  *(_OWORD *)(a1 + 668) = v35;
  __int128 v37 = *(_OWORD *)(a2 + 716);
  __int128 v38 = *(_OWORD *)(a2 + 732);
  __int128 v39 = *(_OWORD *)(a2 + 764);
  *(_OWORD *)(a1 + 748) = *(_OWORD *)(a2 + 748);
  *(_OWORD *)(a1 + 764) = v39;
  *(_OWORD *)(a1 + 716) = v37;
  *(_OWORD *)(a1 + 732) = v38;
  *(_OWORD *)(a1 + 780) = *(_OWORD *)(a2 + 780);
  __n128 result = *(__n128 *)(a2 + 796);
  __int128 v41 = *(_OWORD *)(a2 + 812);
  __int128 v42 = *(_OWORD *)(a2 + 828);
  *(void *)(a1 + 844) = *(void *)(a2 + 844);
  *(_OWORD *)(a1 + 812) = v41;
  *(_OWORD *)(a1 + 828) = v42;
  *(__n128 *)(a1 + 796) = result;
  return result;
}

_DWORD *sub_1807BD9AC(_DWORD *result, int a2, int a3)
{
  int v3 = a2 >> 6;
  int v4 = 1 << (a2 >> 6);
  if (a2 + 1 == a3)
  {
    result[a2 & 0x3F] |= v4;
  }

  else
  {
    uint64_t v5 = a3 & 0x3F;
    if (v3 == a3 >> 6)
    {
      if ((a2 & 0x3Fu) < v5)
      {
        __int128 v6 = &result[a2 & 0x3F];
        uint64_t v7 = v5 - (a2 & 0x3F);
        do
        {
          *v6++ |= v4;
          --v7;
        }

        while (v7);
      }
    }

    else
    {
      int v8 = a3 >> 6;
      if ((a2 & 0x3F) != 0)
      {
        uint64_t v9 = a2 & 0x3F;
        do
          result[v9++] |= v4;
        while (v9 != 64);
        ++v3;
      }

      if (v3 < v8)
      {
        uint64_t v10 = 0LL;
        int v11 = -1 << v3;
        if (a3 < 2048) {
          int v12 = ~(-1 << v8);
        }
        else {
          int v12 = -1;
        }
        int8x16_t v13 = (int8x16_t)vdupq_n_s32(v11 & v12);
        do
        {
          *(int8x16_t *)&result[v10] = vorrq_s8(*(int8x16_t *)&result[v10], v13);
          v10 += 4LL;
        }

        while (v10 != 64);
      }

      int v14 = 1 << v8;
      if (v8 == 32) {
        int v14 = 0x80000000;
      }
      if ((a3 & 0x3F) != 0)
      {
        do
        {
          *result++ |= v14;
          --v5;
        }

        while (v5);
      }
    }
  }

  return result;
}

uint64_t sub_1807BDAA4(uint64_t a1, unsigned int a2)
{
  if (a2 > 0xFF)
  {
    if (a2 > 0x7FF)
    {
      if (a2 >> 11 < 0x1B || (a2 & 0xFFFFE000) == 0xE000)
      {
        unsigned int v5 = a2 >> 12;
        unsigned int v2 = (*(_DWORD *)(a1 + 4LL * ((a2 >> 6) & 0x3F) + 524) >> (a2 >> 12)) & 0x10001;
        if (v2 <= 1) {
          return (char)v2;
        }
        uint64_t v3 = *(unsigned int *)(a1 + 780 + 4LL * v5);
        uint64_t v4 = *(unsigned int *)(a1 + 780 + 4LL * (v5 + 1));
      }

      else
      {
        if (HIWORD(a2) > 0x10u)
        {
          LOBYTE(v2) = 0;
          return (char)v2;
        }

        uint64_t v3 = *(unsigned int *)(a1 + 832);
        uint64_t v4 = *(unsigned int *)(a1 + 848);
      }

      LOBYTE(v2) = sub_1807BD4E4(a1, a2, v3, v4) & 1;
      return (char)v2;
    }

    unsigned int v2 = (*(_DWORD *)(a1 + 4LL * (a2 & 0x3F) + 268) >> (a2 >> 6)) & 1;
  }

  else
  {
    LOBYTE(v2) = *(_BYTE *)(a1 + a2 + 8);
  }

  return (char)v2;
}

unsigned __int16 *sub_1807BDB60(unsigned int *a1, unsigned __int16 *a2, unint64_t a3, int a4)
{
  if (a4)
  {
    while (1)
    {
      unint64_t v7 = *a2;
      if (v7 > 0xFF)
      {
        if (v7 > 0x7FF)
        {
          if ((unsigned __int16)((unsigned __int16)(v7 + 0x2000) >> 11) > 0x1Eu)
          {
            int v8 = a2 + 1;
            BOOL v11 = v7 >> 10 > 0x36 || v8 == (unsigned __int16 *)a3;
            if (v11 || (int v14 = *v8, (unsigned __int16)((unsigned __int16)(v14 + 0x2000) >> 10) <= 0x3Eu))
            {
              uint64_t v12 = a1[208];
              uint64_t v13 = a1[209];
              goto LABEL_19;
            }
          }

          else
          {
            unint64_t v9 = v7 >> 12;
            unsigned int v10 = (a1[((v7 >> 6) & 0x3F) + 131] >> (v7 >> 12)) & 0x10001;
            if (v10 > 1)
            {
              uint64_t v12 = a1[v9 + 195];
              uint64_t v13 = a1[(v9 + 1) + 195];
LABEL_19:
              int v8 = a2;
              goto LABEL_20;
            }

            int v8 = a2;
            if (!v10) {
              return a2;
            }
          }
        }

        else
        {
          int v8 = a2;
        }
      }

      else
      {
        int v8 = a2;
        if (!*((_BYTE *)a1 + v7 + 8)) {
          return a2;
        }
      }

LABEL_20:
      a2 = v8 + 1;
    }
  }

  do
  {
    unint64_t v16 = *a2;
    if (v16 <= 0xFF)
    {
      __int128 v17 = a2;
      if (*((_BYTE *)a1 + v16 + 8)) {
        return a2;
      }
      goto LABEL_46;
    }

    if (v16 <= 0x7FF)
    {
      __int128 v17 = a2;
      goto LABEL_46;
    }

    if ((unsigned __int16)((unsigned __int16)(v16 + 0x2000) >> 11) > 0x1Eu)
    {
      __int128 v17 = a2 + 1;
      if (v16 >> 10 <= 0x36 && v17 != (unsigned __int16 *)a3)
      {
        int v15 = *v17;
        if ((unsigned __int16)((unsigned __int16)(v15 + 0x2000) >> 10) > 0x3Eu)
        {
          goto LABEL_46;
        }
      }

      uint64_t v21 = a1[208];
      uint64_t v22 = a1[209];
    }

    else
    {
      unint64_t v18 = v16 >> 12;
      unsigned int v19 = (a1[((v16 >> 6) & 0x3F) + 131] >> (v16 >> 12)) & 0x10001;
      if (v19 <= 1)
      {
        __int128 v17 = a2;
        if (v19) {
          return a2;
        }
        goto LABEL_46;
      }

      uint64_t v21 = a1[v18 + 195];
      uint64_t v22 = a1[(v18 + 1) + 195];
    }

    __int128 v17 = a2;
LABEL_46:
    a2 = v17 + 1;
  }

  while ((unint64_t)(v17 + 1) < a3);
  return a2;
}

      uint64_t v4 = v7;
      if (v7 == a2) {
        return a2;
      }
    }
  }

  do
  {
    __int128 v17 = *(unsigned __int16 *)(v7 - 2);
    v7 -= 2LL;
    unint64_t v16 = v17;
    if (v17 <= 0xFF)
    {
      if (*((_BYTE *)a1 + v16 + 8)) {
        return v4;
      }
      goto LABEL_44;
    }

    if (v16 <= 0x7FF)
    {
      goto LABEL_44;
    }

    if ((unsigned __int16)((unsigned __int16)(v16 + 0x2000) >> 11) > 0x1Eu)
    {
      if (v16 >> 10 >= 0x37 && v7 != a2)
      {
        uint64_t v21 = *(unsigned __int16 *)(v4 - 4);
        if ((unsigned __int16)((unsigned __int16)(v21 + 9216) >> 10) > 0x3Eu)
        {
          unint64_t v7 = v4 - 4;
          goto LABEL_44;
        }
      }

      uint64_t v22 = a1[208];
      __int128 v23 = a1[209];
    }

    else
    {
      unint64_t v18 = v16 >> 12;
      unsigned int v19 = (a1[((v16 >> 6) & 0x3F) + 131] >> (v16 >> 12)) & 0x10001;
      if (v19 <= 1)
      {
        if (v19) {
          return v4;
        }
        goto LABEL_44;
      }

      uint64_t v22 = a1[v18 + 195];
      __int128 v23 = a1[(v18 + 1) + 195];
    }

    unint64_t v16 = v5;
    if (v5 == v8) {
      return v8;
    }
  }

  if (v15 == v16)
  {
    __int128 v25 = 1;
    unint64_t v16 = v15;
    goto LABEL_48;
  }

  if (*(unsigned __int16 *)(a1 + 22) > v20
    || *(unsigned __int16 *)(a1 + 26) <= v20 && *(unsigned __int16 *)(a1 + 30) > v20)
  {
    goto LABEL_31;
  }

  __int128 v27 = v16 - 1;
  __int128 v26 = *(v16 - 1);
  if ((v26 & 0xF800) != 0xD800)
  {
    __int128 v29 = *(void *)(a1 + 32);
    __int128 v32 = (v26 & 0x3F) + *(unsigned __int16 *)(*(void *)v29 + ((v26 >> 5) & 0x7FE));
    goto LABEL_46;
  }

  if ((v26 & 0x400) == 0 || v27 == v15)
  {
    __int128 v29 = *(void *)(a1 + 32);
    goto LABEL_43;
  }

  __int128 v28 = *(v16 - 2);
  __int128 v29 = *(void *)(a1 + 32);
  if ((v28 & 0xFC00) != 0xD800)
  {
LABEL_43:
    __int128 v32 = *(_DWORD *)(v29 + 20) - 1;
    goto LABEL_46;
  }

  __int128 v30 = v26 - 56613888 + (v28 << 10);
  if (v30 >= *(_DWORD *)(v29 + 24))
  {
    __int128 v32 = *(_DWORD *)(v29 + 20) - 2;
  }

  else
  {
    __int128 v31 = ucptrie_internalSmallIndex((uint64_t *)v29, v30);
    a5 = v47;
    __int128 v32 = v31;
    __int128 v29 = *(void *)(a1 + 32);
  }

  __int128 v27 = v16 - 2;
LABEL_46:
  __int128 v25 = *(_WORD *)(*(void *)(v29 + 8) + 2LL * v32);
  if ((v25 & 1) == 0)
  {
    unint64_t v16 = v27;
    goto LABEL_48;
  }

  if (a4 && v25 != 1)
  {
    if (*(unsigned __int16 *)(a1 + 26) <= v25)
    {
      v44 = (v25 & 6u) < 3;
      if ((v25 & 6u) >= 3) {
        goto LABEL_85;
      }
    }

    else
    {
      v43 = *(unsigned __int16 *)(*(void *)(a1 + 48) + (v25 & 0xFFFE));
      v44 = v43 < 0x200;
      if (v43 > 0x1FF)
      {
LABEL_85:
        unint64_t v16 = v27;
        if (!v44) {
          goto LABEL_48;
        }
        goto LABEL_31;
      }
    }

    if (!v44) {
      goto LABEL_48;
    }
  }

      __int128 v23 = v24;
      *((void *)v18 + 2) = v25;
      *(_OWORD *)unint64_t v18 = v23;
      if (++v15 == 8) {
        return v13 + 24 == a2;
      }
    }

    uint64_t v12 = v13;
    v14 += 24LL;
    v13 += 24;
    if (v13 == a2) {
      return 1LL;
    }
  }

  if (v20 == a1)
  {
    *(void *)(a1 + 24) = 0LL;
    *(void *)(a1 + 48) = 0LL;
    *(_DWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
  }

  else
  {
    ubiditransform_close((void *)v20);
  }

  if (*a12 <= 0) {
    return (void *)v29;
  }
  else {
    return 0LL;
  }
}

    int v14 = v11 + 1;
    *(_BYTE *)(v7 + v11 + 65) = v13;
    ++v4;
    ++v11;
  }

  if (v9 == 1)
  {
    goto LABEL_20;
  }

  if ((unint64_t)v2 < v3 && (unint64_t)v8 >= v5)
  {
    __int128 v31 = 15;
LABEL_24:
    *a2 = v31;
  }

  if (v6)
  {
    __int128 v33 = (uint64_t)v8 - v4;
    if (v33)
    {
      __int128 v34 = v33 >> 1;
      do
      {
        *(_DWORD *)__int128 v6 = v27;
        v6 += 4LL;
        ++v27;
        --v34;
      }

      while (v34);
    }
  }

  result[2] = v2;
  result[4] = v8;
  result[6] = v6;
  return result;
}

  unint64_t v9 = *(void *)(a1 + 288);
  if (!v9) {
    return 0LL;
  }
  LODWORD(result) = sub_18082BD0C(v9, a2, a3, a4);
  else {
    return -(int)result;
  }
}

  int v15 = 0;
  unint64_t v16 = *a4;
  LODWORD(v103[0]) = 0;
  if (v16 > 0) {
    goto LABEL_101;
  }
  v118 = 0u;
  memset(v119, 0, sizeof(v119));
  v116 = 0u;
  v117 = 0u;
  v115 = 0u;
  memset(__s, 0, sizeof(__s));
  Variant = uloc_getVariant((char *)v109[0], __s, 157, (int *)v103);
  if (SLODWORD(v103[0]) > 0 || LODWORD(v103[0]) == -124)
  {
    if (!a3) {
      goto LABEL_80;
    }
LABEL_78:
    int v15 = 0;
    *a4 = 1;
    goto LABEL_101;
  }

  unint64_t v18 = Variant;
  if (Variant < 1)
  {
LABEL_80:
    int v15 = 0;
    goto LABEL_101;
  }

  v92 = 0;
  unsigned int v19 = 0LL;
  v104 = 0LL;
  __int128 v20 = __s;
  while (1)
  {
    uint64_t v21 = *v20;
    if (*v20)
    {
      if (v21 != 95 && v21 != 45)
      {
        if (!v19) {
          unsigned int v19 = v20;
        }
        uint64_t v21 = 1;
        goto LABEL_50;
      }

      *__int128 v20 = 0;
      uint64_t v21 = 1;
    }

    if (!v19) {
      goto LABEL_48;
    }
    uint64_t v22 = *v19;
    if (*v19)
    {
      __int128 v23 = (unsigned __int8 *)(v19 + 1);
      do
      {
        *(v23 - 1) = uprv_asciitolower(v22);
        __int128 v24 = *v23++;
        uint64_t v22 = v24;
      }

      while (v24);
    }

    if (!strcmp(v19, "posix") && v18 == 5)
    {
      unsigned int v19 = 0LL;
      v92 = 1;
    }

    else
    {
      __int128 v25 = uprv_malloc(0x10uLL);
      if (!v25)
      {
        __int128 v39 = 7;
        goto LABEL_97;
      }

      __int128 v26 = v25;
      *__int128 v25 = v19;
      if (!sub_180853B18(&v104, (uint64_t)v25))
      {
        uprv_free(v26);
        a3 = v94;
LABEL_48:
        if (!a3)
        {
LABEL_49:
          unsigned int v19 = 0LL;
          goto LABEL_50;
        }

    if (((_WORD)this[1] & 2) != 0) {
      __int128 v17 = (UChar *)this + 5;
    }
    else {
      __int128 v17 = (UChar *)this[3];
    }
    *(_OWORD *)&v35[4] = v12;
    __int128 v36 = v12;
    v47 = v12;
    v46 = v12;
    v45 = v12;
    v44 = v12;
    v43 = v12;
    __int128 v42 = v12;
    __int128 v41 = v12;
    v40 = v12;
    __int128 v39 = v12;
    __int128 v38 = v12;
    __int128 v37 = v12;
    __int128 v32 = (unsigned __int16 *)&v35[8];
    __int128 v33 = 100;
    *(void *)__int128 v34 = 0LL;
    *(void *)__int128 v35 = 0LL;
    v73 = v12;
    v74 = v12;
    v71 = v12;
    v72 = v12;
    v69 = v12;
    v70 = v12;
    v67 = v12;
    v68 = v12;
    v65 = v12;
    v66 = v12;
    v63 = v12;
    v64 = v12;
    v61 = v12;
    v62 = v12;
    v59 = v12;
    v60 = v12;
    v57 = v12;
    v58 = v12;
    v55 = v12;
    v56 = v12;
    v53 = v12;
    v54 = v12;
    v51 = v12;
    v52 = v12;
    *(_OWORD *)v50 = v12;
    if (a4)
    {
      __int128 v31 = v17;
      icu::UnicodeString::setTo((icu::UnicodeString *)&v75, 0, (const UChar **)&v31, v13);
      (*(void (**)(uint64_t, void (***)(icu::UnicodeString *__hidden)))(*(void *)a4 + 56LL))( a4,  &v75);
    }

    a5(a2, a3 | 0x4000, a4, (const UChar *)v50, 200LL, v17, v13, &v32, &v49);
    if (v49 <= U_ZERO_ERROR)
    {
      if (v34[1] >= 1
        && !icu::UnicodeString::cloneArrayIfNeeded( (icu::UnicodeString *)this,  v34[1] + (int)v13,  v34[1] + (int)v13,  1,  0LL,  0))
      {
        goto LABEL_52;
      }

      *(_OWORD *)__int128 v29 = 0u;
      __int128 v30 = 0u;
      __int128 v28 = 0u;
      icu::Edits::Iterator::Iterator((uint64_t)&v28, v32, v34[0], 1, 1);
      while (icu::Edits::Iterator::next((icu::Edits::Iterator *)&v28, v29[4], &v49))
        icu::UnicodeString::doReplace( (uint64_t)this,  DWORD2(v30),  *(unsigned int *)&v29[8],  (uint64_t)v50,  SDWORD1(v30),  *(unsigned int *)&v29[12]);
      if (v49 < U_ILLEGAL_ARGUMENT_ERROR) {
        goto LABEL_52;
      }
    }

    else if (v49 == U_BUFFER_OVERFLOW_ERROR)
    {
      unsigned int v19 = v34[1] + v13;
      icu::Edits::~Edits((void **)&v32);
LABEL_40:
      v50[0] = 0LL;
      if (icu::UnicodeString::cloneArrayIfNeeded( (icu::UnicodeString *)this,  v19,  v19,  0,  (unsigned int **)v50,  1))
      {
        v49 = U_ZERO_ERROR;
        if (((_WORD)this[1] & 2) != 0)
        {
          uint64_t v22 = (const UChar *)this + 5;
          __int128 v23 = 27LL;
        }

        else
        {
          uint64_t v22 = this[3];
          __int128 v23 = *((unsigned int *)this + 4);
        }

        __int128 v25 = a5(a2, a3, a4, v22, v23, v17, v13, 0LL, &v49);
        if (v50[0]) {
          uprv_free(v50[0]);
        }
        if (v49 > U_ZERO_ERROR) {
          goto LABEL_57;
        }
        __int128 v26 = *((unsigned __int16 *)this + 4);
        if (v25 > 1023)
        {
          __int128 v20 = (void *)(v26 | 0xFFE0u);
          *((_WORD *)this + 4) = (_WORD)v20;
          *((_DWORD *)this + 3) = v25;
          goto LABEL_63;
        }

        __int128 v20 = (void *)(v26 & 0x1F | (32 * v25));
LABEL_61:
        *((_WORD *)this + 4) = (_WORD)v20;
      }

    return 0;
  }

  __int128 v6 = *(uint64_t (**)(void))&dword_18971B820[4 * which + 2];
  return v6();
}

  LODWORD(v14) = 0;
LABEL_21:
  unsigned int v10 = v14;
LABEL_22:
  unint64_t v16 = *(_DWORD **)(a1 + 72);
  (*(void (**)(_DWORD *, uint64_t))(*(void *)v16 + 128LL))(v16, a2);
  __int128 v17 = v16[3];
  if (v17 >= v10)
  {
    __int128 v6 = 0LL;
  }

  else
  {
    LODWORD(v6) = 0;
    unint64_t v18 = v16[3];
    do
    {
      unsigned int v19 = (*(uint64_t (**)(_DWORD *))(*(void *)v16 + 48LL))(v16);
      if (v19 < 0x10000) {
        __int128 v20 = 1;
      }
      else {
        __int128 v20 = 2;
      }
      if (v20 + (int)v6 <= a5)
      {
        if (HIWORD(v19))
        {
          uint64_t v22 = v6 + 1;
          *(_WORD *)(a4 + 2LL * (int)v6) = (v19 >> 10) - 10304;
          uint64_t v21 = 2;
          LOWORD(v19) = v19 & 0x3FF | 0xDC00;
        }

        else
        {
          uint64_t v21 = 1;
          uint64_t v22 = v6;
        }

        __int128 v6 = (v6 + v21);
        *(_WORD *)(a4 + 2LL * v22) = v19;
        v18 += v20;
        __int128 v17 = v18;
      }

      else
      {
        *a6 = 15;
        v18 += v20;
        __int128 v6 = (v20 + v6);
      }
    }

    while (v18 < v10);
  }

  sub_180885CC0(a1, v17, 1);
  u_terminateUChars(a4, a5, v6, a6);
  return v6;
}

    __int128 v28 = String;
    icu::UnicodeString::setTo((icu::UnicodeString *)&v30, 1, &v28, v29);
LABEL_23:
    icu::UnicodeString::operator=((icu::UnicodeString *)&v35, (icu::UnicodeString *)&v30);
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v30);
    unsigned int v19 = (void *)*(unsigned int *)a3;
    if ((int)v19 <= 0)
    {
      __int128 v34 = 0LL;
      __int128 v32 = 0u;
      __int128 v33 = 0u;
      __int128 v31 = 0u;
      __int128 v30 = (UChar *)off_18971B688;
      LOWORD(v31) = 2;
      icu::DateTimePatternGenerator::addPatternWithSkeleton(this, &v35, 0LL, 0, &v30, a3);
      icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v30);
    }

    icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v35);
    if (v16) {
      ures_close((uint64_t)v16);
    }
    if (++v15 == 8) {
      goto LABEL_31;
    }
  }

  if (ures_getType((uint64_t)v16) == 8)
  {
    __int128 v34 = 0LL;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    __int128 v31 = 0u;
    __int128 v30 = (UChar *)off_18971B688;
    LOWORD(v31) = 2;
    __int128 v29 = 0;
    String = ures_getStringByIndex((uint64_t)v16, 0, &v29, (int *)a3);
    goto LABEL_20;
  }

  *a3 = U_INVALID_FORMAT_ERROR;
  icu::UnicodeString::~UnicodeString((void *)3, (icu::UnicodeString *)&v35);
  if (v16) {
    ures_close((uint64_t)v16);
  }
LABEL_31:
  if (v14) {
    ures_close(v14);
  }
  if (BYTE4(v40[1])) {
    uprv_free((void *)v40[0]);
  }
LABEL_35:
  if (BYTE4(v41[1])) {
    uprv_free(v41[0]);
  }
  if (v6) {
    ures_close(v6);
  }
}

    icu::number::impl::DecimalQuantity::adjustExponent((uint64_t)a2, -v9);
    sub_18093830C((uint64_t)&v24);
    __n128 result = *(double *)&v24;
    __int128 v23 = v25[0];
    *(_OWORD *)(a3 + 104) = v24;
    *(_OWORD *)(a3 + 120) = v23;
    *(void *)(a3 + 133) = *(void *)((char *)v25 + 13);
  }

  return result;
}

      *a3 = 65811;
      return result;
    }

    unint64_t v18 = (icu::CollationIterator **)(a1 + 16);
    __int128 v20 = *(unsigned __int8 *)(*(void *)(a1 + 16) + 24LL);
    unsigned int v19 = (v20 >> 1) & 1;
    if ((_DWORD)v14)
    {
      if ((_DWORD)v14 == a3 || !sub_1808B2F00(*(void *)(a1 + 8), a2[v14], (v20 >> 1) & 1))
      {
        if ((_DWORD)v14 == v6)
        {
          LODWORD(v14) = v6;
          goto LABEL_32;
        }
      }

      uint64_t v21 = &a2[(v14 - 1)];
      while ((int)v14 >= 2)
      {
        uint64_t v22 = *v21--;
        LODWORD(v14) = v14 - 1;
      }

      LODWORD(v14) = 0;
LABEL_31:
      unint64_t v18 = (icu::CollationIterator **)(a1 + 16);
    }
  }
  }

  icu::SimpleDateFormat::getPatternString(a2, a4, a5, a6, (uint64_t)v29);
  icu::UnicodeString::operator=((icu::UnicodeString *)a7, (icu::UnicodeString *)v29);
  return (uint64_t)icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v29);
}

      *a4 = 0LL;
      goto LABEL_21;
    case 7:
      __n128 result = (uint64_t *)(*((uint64_t (**)(UChar **, void))a3 + 11))(a2, *((void *)a3 + 12));
      if (!result) {
        goto LABEL_21;
      }
      return result;
    default:
      abort();
  }

  while (1)
  {
    __int128 v25 = (uint64_t *)*(unsigned int *)(*((void *)a3 + 11) + 8LL);
    __int128 v26 = icu::UMemory::operator new(v25, (icu::UMemory *)0x68, v21);
    if (!v26)
    {
      *a5 = U_MEMORY_ALLOCATION_ERROR;
LABEL_12:
      (*(void (**)(icu::UVector *))(*(void *)v20 + 8LL))(v20);
      return 0LL;
    }

    __int128 v27 = v26;
    icu::UnicodeString::UnicodeString((uint64_t)v38, (uint64_t)L"%Pass");
    icu::UnicodeString::UnicodeString((uint64_t)v37, v24 + 1);
    icu::operator+((uint64_t)v38, (uint64_t)v37, (uint64_t)v35);
    __int128 v28 = icu::UVector::elementAt(*((icu::UVector **)a3 + 11), v24);
    sub_18095C8BC(v27, v35, v28, 0LL);
    icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v35);
    icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)v37);
    icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)v38);
    icu::UVector::adoptElement(v20, v27, a5);
    ++v24;
  }

  icu::UVector::setDeleter(v20, 0LL);
  __n128 result = icu::UMemory::operator new(v33, (icu::UMemory *)0xA0, v32);
  __int128 v34 = result;
  if (result)
  {
    sub_18099B7D0(result, a2, (UChar **)a3 + 1, (uint64_t)v20, *((void *)a3 + 10));
    __n128 result = 0LL;
    *a4 = v34;
  }

  else
  {
    *a4 = 0LL;
LABEL_21:
    *a5 = U_MEMORY_ALLOCATION_ERROR;
  }

  return result;
}

      icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v31);
      return icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v32);
    }
  }

  return result;
}

    unsigned int v19 = *(void (**)(void))(**(void **)(a1 + 232) + 88LL);
    goto LABEL_21;
  }

  if ((v34 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_16:
  unsigned int v19 = *(void (**)(void))(**(void **)(a1 + 400) + 88LL);
LABEL_21:
  v19();
  icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v33);
LABEL_22:
  __int128 v30 = U_ZERO_ERROR;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v37 = 0LL;
  __int128 v36 = 0u;
  __int128 v33 = off_18971B688;
  LOWORD(v34) = 2;
  icu::SimpleFormatter::format( (icu::SimpleFormatter *)(a1 + 328),  (const icu::UnicodeString *)&v43,  a5,  (icu::UnicodeString *)&v33,  &v30);
  uint64_t v12 = 0LL;
  uint64_t v21 = v30;
  if (v30 <= U_ZERO_ERROR)
  {
    uint64_t v12 = icu::ZNStringPool::get((icu::ZNStringPool *)(a1 + 408), (const icu::UnicodeString *)&v33, &v30);
    uint64_t v21 = v30;
    if (v30 <= U_ZERO_ERROR)
    {
      __int128 v25 = uprv_malloc(0x18uLL);
      if (v25)
      {
        __int128 v26 = v25;
        *__int128 v25 = v31;
        *((_BYTE *)v25 + 16) = v32;
        uhash_put(*(void *)(a1 + 248), (uint64_t)v25, (uint64_t)v12, (int *)&v30);
        if (v30 < U_ILLEGAL_ARGUMENT_ERROR)
        {
          __int128 v27 = uprv_malloc(0x10uLL);
          if (v27)
          {
            if (a4) {
              __int128 v28 = 2;
            }
            else {
              __int128 v28 = 4;
            }
            *(_DWORD *)__int128 v27 = v28;
            __int128 v29 = (uint64_t *)v31;
            v27[1] = v31;
            icu::TextTrieMap::put(v12, &v30, a1 + 424, v27, v29);
          }
        }

        else
        {
          uprv_free(v26);
        }
      }
    }
  }

  icu::UnicodeString::~UnicodeString((void *)v21, (icu::UnicodeString *)&v33);
  icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v38);
  icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v43);
  return v12;
}

    unint64_t v16 = *a4;
    if (!a3 && v16 <= 0)
    {
      for (uint64_t i = 0LL; i != 18; ++i)
      {
        while (1)
        {
          unint64_t v18 = off_18972C770[i];
          unsigned int v19 = strlen(v18);
          ulist_addItemEndList((uint64_t)EmptyList, v18, 0, a4);
          unint64_t v16 = *a4;
          ++i;
          if (*a4 > 0 || i == 18) {
            goto LABEL_31;
          }
        }
      }

      unint64_t v16 = *a4;
    }

        unsigned int v19 = v13 > U_ZERO_ERROR;
        goto LABEL_21;
      }

      unsigned int v19 = 6;
LABEL_21:
      if (v23 != (_DWORD *)v22) {
        uprv_free(v23);
      }
    }

    while (!v19);
    if (v19 != 6) {
      return 0x7FFFFFFFFFFFFFFFLL;
    }
    unint64_t v9 = *(_DWORD *)(a1 + 264);
    if (v9 > 0)
    {
LABEL_28:
      __int128 v20 = *(void *)(a1 + 256);
      uint64_t v21 = (v9 - 1);
      *(_DWORD *)(a1 + 264) = v21;
      if (a2) {
        *a2 = *(_DWORD *)(v20 + 16 * v21 + 8);
      }
      if (a3) {
        *a3 = *(_DWORD *)(v20 + 16 * v21 + 12);
      }
      return *(void *)(v20 + 16LL * v21);
    }

    if (a2) {
      *a2 = -1;
    }
    if (a3) {
      *a3 = -1;
    }
  }

  return 0x7FFFFFFFFFFFFFFFLL;
}

      icu::FCDUIterCollationIterator::switchToForward((uint64_t)this);
    }

    unsigned int v5 = (*(uint64_t (**)(void))(*((void *)this + 49) + 72LL))();
    __int128 v6 = (uint64_t *)v5;
    if ((v5 & 0x80000000) != 0) {
      return v6;
    }
    if ((v5 & 0x1FFF01) != 0xF01)
    {
      unint64_t v7 = (*(uint64_t (**)(void))(*((void *)this + 49) + 64LL))();
      if (v7 < 768
        || !icu::CollationFCD::lcccIndex[(unint64_t)v7 >> 5]
        || ((icu::CollationFCD::lcccBits[icu::CollationFCD::lcccIndex[(unint64_t)v7 >> 5]] >> v7) & 1) == 0)
      {
        break;
      }
    }

    (*(void (**)(void))(*((void *)this + 49) + 80LL))();
  }

  if (v6 >> 10 == 54)
  {
    unsigned int v10 = (*(uint64_t (**)(void))(*((void *)this + 49) + 72LL))();
    if (v10 >> 10 == 55)
    {
      return (uint64_t *)(v10 + ((_DWORD)v6 << 10) - 56613888);
    }

    else if ((v10 & 0x80000000) == 0)
    {
      (*(void (**)(void))(*((void *)this + 49) + 80LL))();
    }
  }

  return v6;
}

uint64_t sub_1807BDDB4(unsigned int *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = a3;
  uint64_t v7 = a3;
  if (a4)
  {
    while (1)
    {
      unsigned int v9 = *(unsigned __int16 *)(v7 - 2);
      v7 -= 2LL;
      unint64_t v8 = v9;
      if (v9 > 0xFF)
      {
        if (v8 > 0x7FF)
        {
          if ((unsigned __int16)((unsigned __int16)(v8 + 0x2000) >> 11) > 0x1Eu)
          {
            BOOL v12 = v8 >> 10 < 0x37 || v7 == a2;
            if (v12
              || (int v13 = *(unsigned __int16 *)(v4 - 4), (unsigned __int16)((unsigned __int16)(v13 + 9216) >> 10) <= 0x3Eu))
            {
              uint64_t v14 = a1[208];
              uint64_t v15 = a1[209];
              goto LABEL_19;
            }

            uint64_t v7 = v4 - 4;
          }

          else
          {
            unint64_t v10 = v8 >> 12;
            unsigned int v11 = (a1[((v8 >> 6) & 0x3F) + 131] >> (v8 >> 12)) & 0x10001;
            if (v11 > 1)
            {
              uint64_t v14 = a1[v10 + 195];
              uint64_t v15 = a1[(v10 + 1) + 195];
LABEL_19:
              goto LABEL_20;
            }

            if (!v11) {
              return v4;
            }
          }
        }

        else if (((a1[(v8 & 0x3F) + 67] >> (v8 >> 6)) & 1) == 0)
        {
          return v4;
        }
      }

      else if (!*((_BYTE *)a1 + v8 + 8))
      {
        return v4;
      }

LABEL_44:
    uint64_t v4 = v7;
  }

  while (v7 != a2);
  return a2;
}

      __int128 v33 = *(unsigned __int16 *)(*(void *)(v30 + 8) + 2LL * v32);
      if (v33 < 0xFE02) {
        goto LABEL_121;
      }
      __int128 v34 = v25;
      __int128 v25 = v33 >> 1;
    }

    while (v34 <= (v33 >> 1));
    if (!v73) {
      return 0LL;
    }
LABEL_121:
    if (*(unsigned __int16 *)(a1 + 22) <= v33
      && (*(unsigned __int16 *)(a1 + 26) > v33 || *(unsigned __int16 *)(a1 + 30) <= v33))
    {
      int v21 = v26;
      goto LABEL_92;
    }

    else {
      unsigned int v11 = v21;
    }
    int v21 = v15;
LABEL_115:
    uint64_t v15 = v21;
  }

  while (v11 != v14);
LABEL_140:
  v52 = 1LL;
  if (v73 && v21 != v14) {
    icu::ReorderingBuffer::appendZeroCC((UChar **)v72, v21, v14, a7);
  }
  return v52;
}

          fclose(__stream);
          unint64_t v10 = v27;
LABEL_45:
          BOOL v12 = 1;
          goto LABEL_14;
        }

  if (*a2 != 12) {
    goto LABEL_48;
  }
LABEL_108:
  __int128 v24 = 0;
  *(_DWORD *)(v2 + 72) = 64;
LABEL_109:
  *(_DWORD *)(v2 + 76) = v24;
  *(_BYTE *)(v2 + 64) = v10;
  result[2] = v3;
  result[4] = v4;
  return result;
}

      *a4 = v18;
      __int128 v25 = v18;
LABEL_45:
      unsigned int v11 = v28;
      if (v25 <= 0 && (int)v28 < (int)a3)
      {
        u_strcpy(a2, v17);
        unsigned int v11 = v28;
      }

      unsigned int v9 = (uint64_t)a2;
      unint64_t v10 = a3;
      goto LABEL_49;
    }

    __int128 v20 = Size;
    int v21 = 0;
    unsigned int v17 = 0LL;
    while (1)
    {
      uint64_t v22 = ures_getByIndex(v16, v21, 0LL, &v29);
      LODWORD(v30[0]) = v29;
      StringByKey = ures_getStringByKey((uint64_t)v22, "tender", 0LL, (int *)v30);
      if (SLODWORD(v30[0]) < 1)
      {
        __int128 v24 = u_strcmp(StringByKey, word_180A47C42);
        if (!v24 && v17)
        {
          __int128 v24 = 4;
          goto LABEL_29;
        }

        unsigned int v17 = ures_getStringByKey((uint64_t)v22, "id", (int *)&v28, &v29);
        if (!v24) {
          goto LABEL_29;
        }
      }

      else
      {
        unsigned int v17 = ures_getStringByKey((uint64_t)v22, "id", (int *)&v28, &v29);
      }

      __int128 v24 = 2;
LABEL_29:
      if (v22) {
        ures_close((uint64_t)v22);
      }
      if ((v24 | 4) == 4 && v20 != ++v21) {
        continue;
      }
      goto LABEL_35;
    }
  }

  if (a3 >= 4)
  {
    T_CString_toUpperCase((unsigned __int8 *)v40[0]);
    u_charsToUChars((const char *)v40[0], a2, 3);
  }

  unsigned int v9 = (uint64_t)a2;
  unint64_t v10 = a3;
  unsigned int v11 = 3LL;
LABEL_49:
  uint64_t v4 = u_terminateUChars(v9, v10, v11, a4);
LABEL_50:
  if (BYTE4(v40[1])) {
    uprv_free(v40[0]);
  }
  return v4;
}

    __int128 v30 = "v";
    icu::UnicodeString::UnicodeString(&v32, 1LL, &v30);
    __int128 v26 = sub_1807FF934((uint64_t)&v35, (uint64_t)&v32);
    icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v32);
    if (!v26) {
      goto LABEL_47;
    }
    __int128 v24 = sub_1808B7A2C((uint64_t)a3, 65534);
    __int128 v25 = 10247;
    goto LABEL_46;
  }

  return 0LL;
}

                        icu::FormattedStringBuilder::insertCodePoint(v50, v51[1], v28, 0, a5);
                        __int128 v25 = 1;
                        goto LABEL_66;
                      }

                      goto LABEL_33;
                    }

                    if (v28 != 39)
                    {
                      __int128 v29 = Double;
                      if (v28 == 72) {
                        goto LABEL_37;
                      }
                      goto LABEL_33;
                    }

                    __int128 v30 = v24 + 1LL;
                    if (v24 + 1 < v23 && v26 > v30 && *(_WORD *)&v27[2 * v30] == 39)
                    {
                      icu::FormattedStringBuilder::insertCodePoint(v50, v51[1], 0x27u, 0, a5);
LABEL_65:
                      __int128 v24 = v30;
                      goto LABEL_66;
                    }

                    __int128 v25 = !v25;
LABEL_66:
                    if (++v24 >= v23) {
                      goto LABEL_71;
                    }
                  }

                  __int128 v28 = 0xFFFF;
LABEL_33:
                  icu::FormattedStringBuilder::insertCodePoint(v50, v51[1], v28, 0, a5);
                  goto LABEL_66;
                }

unsigned __int8 *sub_1807BE004(uint64_t a1, char *a2, int a3, int a4)
{
  unsigned int v5 = (unsigned __int8 *)a2;
  uint64_t v7 = &a2[a3];
  if ((*a2 & 0x80000000) == 0)
  {
    uint64_t v8 = *a2;
    uint64_t v9 = a3 - 1LL;
    if (a4)
    {
      while (1)
      {
        if (!*(_BYTE *)(a1 + v8 + 8)) {
          return v5;
        }
        if (!v9) {
          return (unsigned __int8 *)&a2[a3];
        }
        uint64_t v8 = *++v5;
        --v9;
      }
    }

    do
    {
      if (*(_BYTE *)(a1 + v8 + 8)) {
        return v5;
      }
      if (!v9) {
        return (unsigned __int8 *)&a2[a3];
      }
      uint64_t v8 = *++v5;
      --v9;
    }

    while (((char)*v5 & 0x80000000) == 0);
LABEL_6:
    a3 = (_DWORD)v7 - (_DWORD)v5;
  }

  int v10 = a4 != 0;
  unsigned int v11 = v7 - 1;
  if ((*(v7 - 1) & 0x80000000) == 0) {
    goto LABEL_8;
  }
  if (*(v7 - 1) <= 0xBFu)
  {
    if (a3 < 2) {
      goto LABEL_8;
    }
    unsigned int v11 = v7 - 2;
    unsigned int v13 = *(v7 - 2);
    if (v13 <= 0xDF)
    {
      if ((char)v13 <= -65 && a3 >= 3)
      {
        unsigned int v11 = v7 - 3;
        BOOL v12 = v7;
        goto LABEL_19;
      }

LABEL_8:
      BOOL v12 = v7;
      goto LABEL_23;
    }
  }

      *(_DWORD *)(a1 + 52) = 0;
      uint64_t v8 = *(_DWORD *)(*(void *)(a1 + 16) + 56LL);
      if (v8 <= 1024) {
        uint64_t v9 = 1024LL;
      }
      else {
        uint64_t v9 = v8;
      }
      if (*(_DWORD *)(a1 + 48) < (int)v9)
      {
        uprv_free(*(void **)(a1 + 40));
        int v10 = uprv_malloc(v9);
        *(void *)(a1 + 40) = v10;
        if (!v10)
        {
          *a3 = 7;
          *(_DWORD *)(a1 + 48) = 0;
          return;
        }

        *(_DWORD *)(a1 + 48) = v9;
      }

      icu::StringTrieBuilder::build((int32x2_t *)a1, a2, *(unsigned int *)(a1 + 36), (UErrorCode *)a3);
      if (*(void *)(a1 + 40)) {
        return;
      }
      unsigned int v11 = 7;
LABEL_21:
      *a3 = v11;
    }
  }

  unsigned int v11 = a1 + 240;
  if (*(_DWORD *)(a1 + 1260) != 768)
  {
    sub_1807D5E5C(v11, "Scripts", 0LL, a2, (uint64_t)a3);
    if (a4) {
      return a3;
    }
    goto LABEL_11;
  }

  sub_1807D5D50(v11, "Scripts", 0LL, a2, (uint64_t)a3);
LABEL_10:
  if (!a4) {
LABEL_11:
  }
    sub_1807D68D8(a1, 1u, a3);
  return a3;
}

  if (BYTE4(v13[1])) {
    uprv_free(v13[0]);
  }
  if (BYTE4(v15[1])) {
    uprv_free(v15[0]);
  }
}

    uint64_t v4 = *((_DWORD *)this + 7);
    return (unint64_t)((char *)icu::PatternProps::skipWhiteSpace((unsigned __int16 *)&v3[2 * a2], v4 - a2) - v3) >> 1;
  }

  uint64_t v3 = 0LL;
  if ((v2 & 0x8000) != 0) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v4 = v2 >> 5;
  return (unint64_t)((char *)icu::PatternProps::skipWhiteSpace((unsigned __int16 *)&v3[2 * a2], v4 - a2) - v3) >> 1;
}

    uint64_t v4 = *((_DWORD *)this + 7);
    return (unint64_t)((char *)icu::PatternProps::skipIdentifier((unsigned __int16 *)&v3[2 * a2], v4 - a2) - v3) >> 1;
  }

  uint64_t v3 = 0LL;
  if ((v2 & 0x8000) != 0) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v4 = v2 >> 5;
  return (unint64_t)((char *)icu::PatternProps::skipIdentifier((unsigned __int16 *)&v3[2 * a2], v4 - a2) - v3) >> 1;
}

      unsigned int v11 = v21;
      if (v21 == v14) {
        goto LABEL_139;
      }
    }

    if (*(unsigned __int16 *)(a1 + 30) > v19)
    {
      if (v73)
      {
        if (*(unsigned __int16 *)(a1 + 26) <= v19)
        {
          if ((v19 & 1) == 0
            || (v19 != 1 ? (v40 = (v19 & 6) >= 3) : (v40 = 0), v40 ? (__int128 v41 = v71 == 0) : (__int128 v41 = 1), !v41))
          {
            if (!icu::Normalizer2Impl::hasCompBoundaryBefore(a1, v21, v14)) {
              goto LABEL_92;
            }
          }

          appended = sub_1807EA538(v72, v16 + (v19 >> 3) - *(unsigned __int16 *)(a1 + 28), 0, a7);
        }

        else
        {
          if (v19 >= *(unsigned __int16 *)(a1 + 20))
          {
            if (v19 < *(unsigned __int16 *)(a1 + 24)
              || !icu::Normalizer2Impl::hasCompBoundaryBefore(a1, v21, v14)
              && !icu::Normalizer2Impl::hasCompBoundaryAfter(a1, (uint64_t)v15, (uint64_t)v11, v71))
            {
              goto LABEL_92;
            }

            if (v15 == v11)
            {
LABEL_101:
              unsigned int v11 = v21;
              goto LABEL_115;
            }

            v45 = (UChar **)v72;
            v46 = v15;
            v47 = v11;
          }

          else
          {
            if (((v19 & 1) == 0
               || v71
               && v19 != 1
               && *(unsigned __int16 *)(*(void *)(a1 + 48) + ((unsigned __int16)v19 & 0xFFFE)) >= 0x200u)
              && !icu::Normalizer2Impl::hasCompBoundaryBefore(a1, v21, v14))
            {
              goto LABEL_92;
            }

            v48 = (_WORD *)(*(void *)(a1 + 48) + ((unsigned __int16)v19 & 0xFFFE));
            v49 = *v48;
            v46 = v48 + 1;
            v47 = &v46[v49 & 0x1F];
            v45 = (UChar **)v72;
          }

          appended = icu::ReorderingBuffer::appendZeroCC(v45, v46, v47, a7);
        }

    *a2 = 3;
    udata_close(a1);
  }

      unsigned int v2 = 0LL;
      int v10 = 1;
      goto LABEL_9;
    }

    __int128 v6 = *(uint64_t **)(a1 + 8);
    BOOL v12 = *(_DWORD *)(a1 + 20);
    uint64_t v8 = *((_DWORD *)v6 + v12 - 1);
    uint64_t v9 = *((_DWORD *)v6 + v12 - 2);
  }

    if (v2 != 127)
    {
      *(_BYTE *)(a1 + v2++) = v4;
      continue;
    }

    return 0LL;
  }

  *a9 = v16;
  return v9;
}

    int v10 = (const char *)sub_18086E040(*(char **)a1, (uint64_t)&unk_180A287CD, (uint64_t)"Aghb", dword_180A29A60, 2052);
    if (!v10) {
      return;
    }
    goto LABEL_9;
  }

    uint64_t v9 = *(void *)(v5 + 8);
LABEL_10:
    uint64_t v7 = (const char *)(v9 + v4);
    goto LABEL_11;
  }

  uint64_t v4 = *(unsigned __int16 *)(*(void *)this + 2LL * a2);
  unsigned int v5 = *((void *)a4 + 1);
  __int128 v6 = *(int *)(v5 + 36);
  uint64_t v7 = (const char *)(*(void *)(v5 + 24) + v4 - v6);
LABEL_11:
  *a3 = v7;
  int v10 = *((void *)this + 2);
  if (v10)
  {
    unsigned int v11 = *((void *)a4 + 1);
    BOOL v12 = *(unsigned __int16 *)(v10 + 2LL * a2);
    unsigned int v13 = *(_DWORD *)(v11 + 52);
    unint64_t v14 = __OFSUB__(v12, v13);
    uint64_t v15 = v12 - v13;
    if (v15 < 0 == v14) {
      BOOL v12 = v15 + *(_DWORD *)(v11 + 48);
    }
    int v16 = v12 | 0x60000000;
  }

  else
  {
    int v16 = *(_DWORD *)(*((void *)this + 3) + 4LL * a2);
  }

  *((_DWORD *)a4 + 6) = v16;
  return 1LL;
}

                  (*(void (**)(unsigned int *))(*(void *)v9 + 8LL))(v9);
                  goto LABEL_137;
                }

                v61 = (uint64_t)v60;
                icu::UnicodeString::UnicodeString((icu::UnicodeString *)v106, (UChar **)v20);
                v105 = -1;
                v62 = (UChar **)icu::UnicodeString::doAppend((uint64_t)v106, (uint64_t)&v105, 0, 1LL);
                icu::AlphabeticIndex::Bucket::Bucket(v61, v90, v62, 0);
                sub_1807C9194((uint64_t)&v101, v61, (int *)a2);
                icu::UnicodeString::~UnicodeString(v63, (icu::UnicodeString *)v106);
                unsigned int v22 = *(unsigned int *)a2;
                v64 = v101;
                *((void *)v101 + 18) = v56;
                v101 = 0LL;
                icu::UVector::adoptElement((icu::UVector *)v9, v64, a2);
                unsigned int v22 = *(unsigned int *)a2;
                v91 = 1;
              }
            }
          }

          else
          {
            v95 = &unk_180A2CD02;
          }
        }

    uint64_t v8 = *(_DWORD *)(a2 + 20);
    return icu::SimpleFormatter::getTextWithNoArguments(__b, v7, v8, a3, a4);
  }

  uint64_t v7 = 0LL;
  if ((v6 & 0x8000) != 0) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v8 = v6 >> 5;
  return icu::SimpleFormatter::getTextWithNoArguments(__b, v7, v8, a3, a4);
}

    unsigned int v5 = *(unsigned int *)(a1 + 20);
    goto LABEL_9;
  }

  uint64_t v4 = 0LL;
  if ((v3 & 0x8000) != 0) {
    goto LABEL_8;
  }
LABEL_6:
  unsigned int v5 = v3 >> 5;
LABEL_9:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 40LL))(a2, v4, v5);
  return a2;
}

  *(_DWORD *)a4 = 0;
  icu::StringPiece::StringPiece((icu::StringPiece *)(a4 + 8), "");
  uint64_t v9 = &unk_180A479F2;
LABEL_9:
  *(void *)(a4 + 24) = 0LL;
  *(void *)(a4 + 32) = v9;
  *(void *)(a4 + 40) = v9;
  *(_DWORD *)(a4 + 48) = -1;
  *(_BYTE *)(a4 + 56) = 0;
}

    uint64_t v4 = *(_DWORD *)(a1 + 20);
    return icu::SimpleFormatter::getTextWithNoArguments(0LL, v3, v4, 0, a2);
  }

  uint64_t v3 = 0LL;
  if ((v2 & 0x8000) != 0) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v4 = v2 >> 5;
  return icu::SimpleFormatter::getTextWithNoArguments(0LL, v3, v4, 0, a2);
}

  if ((icu::StringSegment::charAt(a1, v10) & 0xFFFE) != 0x2A)
  {
    if (v10 < (int)icu::StringSegment::length(a1))
    {
      unsigned int v13 = v7;
      do
      {
        ++v13;
        ++v10;
      }

      while (v10 < (int)icu::StringSegment::length(a1));
LABEL_19:
      if (v10 >= (int)icu::StringSegment::length(a1))
      {
        icu::number::Precision::minMaxFraction(v7, v13, (uint64_t)v14);
        *(_OWORD *)(a2 + 64) = *(_OWORD *)v14;
        __n128 result = *(double *)&v14[12];
        *(_OWORD *)(a2 + 76) = *(_OWORD *)&v14[12];
        return result;
      }

  uint64_t v15 = ")";
  icu::UnicodeString::UnicodeString(v16, 1LL, &v15);
  BOOL v12 = sub_18095D2CC(a1, a2, a3, a4, v10, (uint64_t)v16, 0, a5);
  icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v16);
  if (*(int *)(a1 + 84) >= 1 && *(_DWORD *)(a1 + 72) != *(_DWORD *)(a1 + 88))
  {
    sub_18095F4F8(*(void *)(a1 + 104), 65545, a2, a3, a5);
    return a3;
  }

  return v12;
}

  icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)v41);
  return icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v42);
}

  if (v8 != 1) {
    return (icu::Transliterator *)(*(uint64_t (**)(void *, uint64_t))(*(void *)v7 + 144LL))(v7, a2);
  }
  return this;
}

  unint64_t v14 = *(unsigned __int16 *)(a5 + 8);
  if ((v14 & 1) != 0)
  {
    icu::UnicodeString::unBogus(a5);
  }

  else
  {
    if ((v14 & 0x8000u) == 0) {
      uint64_t v15 = v14 >> 5;
    }
    else {
      uint64_t v15 = *(_DWORD *)(a5 + 12);
    }
    if (v15) {
      *(_WORD *)(a5 + 8) &= 0x1Fu;
    }
  }

  return a5;
}

      v3 += 16LL;
    }
  }

  uprv_free(*((void **)this + 2));
  uint64_t v8 = (icu::UVector *)*((void *)this + 4);
  if (v8)
  {
    if (*((int *)v8 + 2) >= 1)
    {
      uint64_t v9 = 0;
      do
      {
        int v10 = (void (*)(uint64_t))*((void *)this + 6);
        if (v10)
        {
          unsigned int v11 = icu::UVector::elementAt(v8, v9 + 1);
          v10(v11);
          uint64_t v8 = (icu::UVector *)*((void *)this + 4);
        }

        v9 += 2;
      }

      while (v9 < *((_DWORD *)v8 + 2));
    }

    (*(void (**)(icu::UVector *))(*(void *)v8 + 8LL))(v8);
  }

        uint64_t v7 = 65533LL;
        LODWORD(v8) = v5;
        goto LABEL_35;
      case 1:
        int v10 = *((_DWORD *)this + 100);
        unsigned int v11 = v10 != *((_DWORD *)this + 104);
        *((_DWORD *)this + 103) = v10;
        BOOL v12 = 2 * v11;
        goto LABEL_17;
      case 2:
        unsigned int v13 = *((int *)this + 100);
        if ((_DWORD)v13 == *((_DWORD *)this + 104))
        {
          BOOL v12 = 0;
LABEL_17:
          *((_DWORD *)this + 102) = v12;
          continue;
        }

        unsigned int v24 = *((void *)this + 49);
        unsigned int v25 = v13 + 1;
        *((_DWORD *)this + 100) = v13 + 1;
        int v26 = *(char *)(v24 + v13);
        uint64_t v7 = *(unsigned __int8 *)(v24 + v13);
        if (v26 < 0)
        {
          char v27 = *((_DWORD *)this + 101);
          if ((_DWORD)v25 == v27) {
            return 65533LL;
          }
          if (v7 < 0xE0)
          {
            __int128 v30 = v7 & 0x1F;
LABEL_75:
            __int128 v34 = *(unsigned __int8 *)(v24 + (int)v25) ^ 0x80;
            if (v34 > 0x3F) {
              return 65533LL;
            }
            uint64_t v7 = v34 | (v30 << 6);
            __int128 v32 = v25 + 1;
LABEL_71:
            *((_DWORD *)this + 100) = v32;
          }

          else
          {
            if (v7 <= 0xEF)
            {
              __int128 v28 = v26 & 0xF;
              if (((a00000000000000[v28] >> (*(_BYTE *)(v24 + v25) >> 5)) & 1) != 0)
              {
                __int128 v29 = *(_BYTE *)(v24 + v25) & 0x3F;
                goto LABEL_64;
              }

              return 65533LL;
            }

            if (v7 <= 0xF4)
            {
              __int128 v28 = *(unsigned __int8 *)(v24 + v25);
              if (((byte_180A3E28F[v28 >> 4] >> (v7 + 16)) & 1) != 0)
              {
                unsigned int v25 = v13 + 2;
                *((_DWORD *)this + 100) = v13 + 2;
                if ((_DWORD)v13 + 2 != v27)
                {
                  __int128 v29 = *(unsigned __int8 *)(v24 + v25) ^ 0x80;
                  if (v29 <= 0x3F)
                  {
                    LODWORD(v28) = v28 & 0x3F | (((_DWORD)v7 - 240) << 6);
LABEL_64:
                    LODWORD(v25) = v25 + 1;
                    *((_DWORD *)this + 100) = v25;
                    if ((_DWORD)v25 != v27)
                    {
                      __int128 v30 = v29 | ((_DWORD)v28 << 6);
                      goto LABEL_75;
                    }
                  }
                }
              }
            }

            return 65533LL;
          }
        }

        return v7;
      case 3:
        else {
          unint64_t v14 = (uint64_t *)(*((unsigned __int16 *)this + 220) >> 5);
        }
        uint64_t v15 = *((_DWORD *)this + 100);
        if (v15 == (_DWORD)v14) {
          goto LABEL_16;
        }
        uint64_t v7 = (uint64_t)icu::UnicodeString::char32At(v14, (icu::FCDUTF8CollationIterator *)((char *)this + 432), v15);
        else {
          __int128 v31 = 2;
        }
        __int128 v32 = v31 + *((_DWORD *)this + 100);
        goto LABEL_71;
      default:
LABEL_16:
        BOOL v12 = 0;
        int v16 = *((_DWORD *)this + 104);
        *((_DWORD *)this + 100) = v16;
        *((_DWORD *)this + 103) = v16;
        goto LABEL_17;
    }
  }

    __int128 v6 = 0xFFFFLL;
    goto LABEL_11;
  }

  uint64_t v4 = *(_DWORD *)(v2 + 12);
LABEL_5:
  if ((v3 & 2) != 0) {
    unsigned int v5 = v2 + 10;
  }
  else {
    unsigned int v5 = *(void *)(v2 + 24);
  }
  __int128 v6 = *(unsigned __int16 *)(v5 + 2 * v1);
LABEL_11:
  a1[2] = v1 + 1;
  return v6;
}

LABEL_19:
  else {
    BOOL v12 = v11;
  }
  uint64_t v7 = v11;
LABEL_23:
  while (1)
  {
    unint64_t v14 = *v5;
LABEL_34:
    unint64_t v18 = v5 + 1;
    if (v14 < 0xE0)
    {
      if (v14 < 0xC0 || (uint64_t v23 = *v18 ^ 0x80LL, v23 > 0x3F))
      {
LABEL_50:
        goto LABEL_51;
      }

      if ((a4 != 0) == (((*(_DWORD *)(a1 + 4 * v23 + 268) >> v14) & 1) == 0)) {
        return v5;
      }
      unint64_t v18 = v5 + 2;
    }

    else
    {
      uint64_t v19 = *v18 ^ 0x80LL;
      if (v14 > 0xEF)
      {
        unsigned int v24 = v5[2] ^ 0x80;
        if (v24 > 0x3F) {
          goto LABEL_50;
        }
        unsigned int v25 = v5[3] ^ 0x80;
        if (v25 > 0x3F) {
          goto LABEL_50;
        }
        int v26 = (((_DWORD)v14 << 18) - 62914560) | ((_DWORD)v19 << 12);
        else {
          char v27 = sub_1807BD4E4(a1, v25 | (v24 << 6) | v26, *(unsigned int *)(a1 + 844), *(unsigned int *)(a1 + 848)) & 1;
        }
        if (v10 != v27) {
          return v5;
        }
        unint64_t v18 = v5 + 4;
      }

      else
      {
        unsigned int v20 = v5[2] ^ 0x80;
        if (v20 > 0x3F) {
          goto LABEL_50;
        }
        unint64_t v21 = v14 & 0xF;
        unsigned int v22 = (*(_DWORD *)(a1 + 4 * v19 + 524) >> v21) & 0x10001;
        if (v22 > 1)
        {
          if ((a4 != 0) == ((sub_1807BD4E4( a1,  ((_DWORD)v19 << 6) | ((_DWORD)v21 << 12) | v20,  *(unsigned int *)(a1 + 780 + 4 * v21),  *(unsigned int *)(a1 + 780 + 4LL * (v21 + 1))) & 1) == 0)) {
            return v5;
          }
        }

        else if (v22 != v10)
        {
          return v5;
        }

        unint64_t v18 = v5 + 3;
      }
    }

  if (v9) {
    ures_close(v9);
  }
  if (v6) {
    ures_close(v6);
  }
  return a1;
}

        v9 += 256;
        continue;
      }

      break;
    }

    v9 += uprv_ebcdictolower(v11);
LABEL_21:
    if (v4 == v9
      || (__n128 result = v4 - v9, v4 == v9))
    {
      a1 += v4 >> 8;
      a2 += v9 >> 8;
      continue;
    }

    return result;
  }

      ++*(_DWORD *)(a1 + 536);
      v9 &= ~0x4000u;
      goto LABEL_20;
    }

    if (v10 == 2) {
      break;
    }
    unsigned int v13 = 0;
    uint64_t v15 = *(unsigned __int16 *)(v38 + v11);
    unsigned int v11 = (v41 * v15);
    int v16 = (unsigned __int16 *)(v40 + v11);
    int v17 = *(unsigned __int16 *)(v40 + v11);
    uint64_t v9 = 1;
    int v10 = 2;
    if (v17 == 0xFFFF) {
      goto LABEL_25;
    }
LABEL_30:
    if ((__int16)v17 >= 1 && SLODWORD(v42[0]) >= 1)
    {
      unsigned int v20 = 0LL;
      while (*((unsigned __int16 *)&v43 + v20 + 2) != v17)
      {
        if (LODWORD(v42[0]) == ++v20) {
          goto LABEL_37;
        }
      }

      uint64_t v8 = *((unsigned int *)v42 + v20 + 1);
      if ((v8 & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 528) = (__int16)v16[2];
        __int128 v29 = *(UText **)(a1 + 488);
        __int128 v33 = v8 - v29->chunkNativeStart;
        if (v33 < 0 || v33 >= v29->nativeIndexingLimit || v29->chunkContents[v33] >> 10 > 0x36u)
        {
          __int128 v32 = v8;
          goto LABEL_79;
        }

    ((void (*)(uint64_t, void, uint64_t))a2[2])(*a2, 0LL, 127LL);
    goto LABEL_21;
  }

  if (v8 != 107)
  {
    if (v8 != 122) {
      goto LABEL_21;
    }
    goto LABEL_19;
  }

  (*(void (**)(void))(*(void *)(*(void *)(*(void *)(v7 + 80) + 48LL) + 32LL) + 120LL))();
LABEL_21:
  for (uint64_t i = 0LL; i != 80; i += 8LL)
  {
    unint64_t v14 = *(void *)(v7 + i);
    if (v14)
    {
      uint64_t v15 = *(unsigned __int8 *)(v7 + 143);
      if (i == 32 && v15 == 106)
      {
        int v16 = 3;
      }

      else if ((v15 == 122 || v15 == 99) && i == 24 && !*(_DWORD *)(v7 + 108))
      {
        int v16 = 2;
      }

      else
      {
        int v16 = 4 * (i == 56);
      }

      sub_180837E60(v14, a2, a3, v16, a4);
    }
  }

  ((void (*)(uint64_t, uint64_t))a2[4])(*a2, 14LL);
  ((void (*)(uint64_t, uint64_t))a2[4])(*a2, 15LL);
  ((void (*)(uint64_t, uint64_t))a2[4])(*a2, 27LL);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a2[5])(*a2, 128LL, 159LL);
}

  udata_close(v7);
  return 0LL;
}

    *v3++ = v2;
    unsigned int v2 = *a2;
  }

  while (*a2);
LABEL_20:
  char *v3 = 0;
  return result;
}

    *v3++ = v2;
    LOBYTE(v2) = *a2;
  }

  while (*a2);
LABEL_20:
  char *v3 = 0;
  return result;
}

    unint64_t v21 = *a8;
    int v16 = v12;
LABEL_20:
    if (v21 > 0)
    {
LABEL_21:
      int v16 = 0LL;
LABEL_22:
      int v17 = (UChar *)v48;
      goto LABEL_23;
    }

    if (!(_DWORD)v16)
    {
      *a8 = 66567;
      goto LABEL_22;
    }

    if ((int)v16 < 1)
    {
      if ((a5 & 2) == 0)
      {
LABEL_64:
        u_memmove(a3, v14, v16);
        int v17 = (UChar *)v48;
        goto LABEL_66;
      }

      char v27 = 1;
    }

    else
    {
      unsigned int v24 = 0LL;
      unsigned int v25 = 1;
      int v26 = -1;
      char v27 = 1;
      __int128 v28 = v16;
      do
      {
        __int128 v29 = (unsigned __int16)v14[v24];
        if (v29 <= 0x7F)
        {
          if (v29 > 0x7A || v29 != 45 && v29 - 48 >= 0xA && v29 - 65 >= 0x1A && v29 <= 0x60)
          {
            unsigned int v25 = 0;
            int v26 = v24;
          }
        }

        else
        {
          char v27 = 0;
        }

        ++v24;
      }

      while (v16 != v24);
      if ((a5 & 2) == 0) {
        goto LABEL_63;
      }
      if (!v25)
      {
        *a8 = 66563;
        __int128 v34 = v14;
LABEL_62:
        uprv_syntaxError(v34, v26, v28, a7);
        goto LABEL_21;
      }
    }

    if (*v14 == 45)
    {
      __int128 v35 = 66563;
LABEL_58:
      *a8 = v35;
      __int128 v34 = v14;
      int v26 = 0;
LABEL_61:
      __int128 v28 = v16;
      goto LABEL_62;
    }

    if (v14[(int)v16 - 1] == 45)
    {
      *a8 = 66563;
      int v26 = v16 - ((int)v16 > 0);
      __int128 v34 = v14;
      goto LABEL_61;
    }

      *a1 = v7;
      return 1LL;
    case 6:
      if (sub_180851440(__s, v3)) {
        goto LABEL_18;
      }
      return sub_180851260(__s, v3, 3);
    default:
      return result;
  }

  unint64_t v14 = *a4;
  LODWORD(v104) = 0;
  if (v14 > 0) {
    goto LABEL_20;
  }
  *(_DWORD *)__s = 0;
  Country = uloc_getCountry((uint64_t)v109[0], __s, 4, (int *)&v104);
  __int128 v36 = Country;
  if (!sub_180850EFC(__s, Country))
  {
LABEL_75:
    if (a3) {
      goto LABEL_78;
    }
  }

  else
  {
    (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)a2 + 16LL))(a2, "-", 1LL);
    __int128 v37 = (const char *)&unk_180A27068;
    __int128 v38 = -2LL;
    while (strcmp(__s, v37))
    {
      v37 += 6;
      v38 += 2LL;
      if (v38 >= 0xA) {
        goto LABEL_82;
      }
    }

    strcpy(__s, v37 + 3);
    __int128 v36 = strlen(__s);
LABEL_82:
    (*(void (**)(uint64_t, char *, size_t))(*(void *)a2 + 16LL))(a2, __s, v36);
  }

                  unsigned int v11 = a1 + 10;
LABEL_20:
                  First = u_strFindFirst((const UChar *)(v11 + 2LL * a5), length, (const UChar *)(a2 + 2LL * a3), a4);
                  __int128 v6 = ((unint64_t)First - v11) >> 1;
                  if (First) {
                    return v6;
                  }
                  else {
                    return 0xFFFFFFFFLL;
                  }
                }

                  unsigned int v11 = a1 + 10;
LABEL_20:
                  Last = u_strFindLast((const UChar *)(v11 + 2LL * a5), length, (const UChar *)(a2 + 2LL * a3), a4);
                  __int128 v6 = ((unint64_t)Last - v11) >> 1;
                  if (Last) {
                    return v6;
                  }
                  else {
                    return 0xFFFFFFFFLL;
                  }
                }

  if ((a2 & 0x2000) == 0)
  {
    if (a9) {
      icu::Edits::reset((uint64_t)a9);
    }
  }

  unsigned int v20 = a8(a1, a2, a3, a4, a5, s, v14, a9, a10);
  return u_terminateUChars(a4, a5, v20, a10);
}

          icu::Calendar::set(v10, v11, v8);
LABEL_20:
          unsigned int v13 = (*(uint64_t (**)(_BYTE *, uint64_t))(*(void *)v7 + 144LL))(v7, a2);
          __n128 result = icu::Calendar::set(v7, a2, v13);
          break;
      }
    }

    else
    {
      *a4 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }

  return result;
}

    unsigned int v13 = 0LL;
    memset(v16, 0, 124);
    while (1)
    {
      unint64_t v14 = icu::CollationDataBuilder::encodeOneCEAsCE32(a2[v13]);
      if (v14 == 1) {
        break;
      }
      *((_DWORD *)v16 + v13++) = v14;
    }

    return icu::CollationDataBuilder::encodeExpansion(this, (const uint64_t *)a2, v4, a4);
  }

  if ((_DWORD)v4 != 1) {
    goto LABEL_19;
  }
  return icu::CollationDataBuilder::encodeOneCE(this, (icu::CollationDataBuilder *)*a2, a4);
}

    if ((_DWORD)v15 != 39) {
      goto LABEL_66;
    }
    if ((v12 & 0x8000) != 0)
    {
      int v16 = *(_DWORD *)(v11 + 12);
    }

    else
    {
      int v16 = v12 >> 5;
    }

    if (v16 <= v5)
    {
LABEL_31:
      unsigned int v20 = (int)a2 + 1LL;
      break;
    }

    uint64_t v19 = (v12 & 2) != 0 ? v11 + 10 : *(void *)(v11 + 24);
    unsigned int v20 = (int)a2 + 1LL;
    if (*(_WORD *)(v19 + 2 * v5) != 39) {
      break;
    }
    __int128 v37 = 39;
    icu::UnicodeString::doAppend((uint64_t)a3, (uint64_t)&v37, 0, 1LL);
    a2 = (a2 + 2);
  }

  while ((v12 & 0x8000) == 0)
  {
    if ((_DWORD)v20 == v12 >> 5) {
      goto LABEL_81;
    }
    unint64_t v21 = v12 >> 5;
LABEL_36:
    a2 = (int)v20 + 1LL;
    if (v21 <= v20)
    {
      LOWORD(v23) = -1;
    }

    else
    {
      if ((v12 & 2) != 0) {
        unsigned int v22 = v11 + 10;
      }
      else {
        unsigned int v22 = *(void *)(v11 + 24);
      }
      uint64_t v23 = *(unsigned __int16 *)(v22 + 2LL * (int)v20);
      if (v23 == 39)
      {
        if ((v12 & 0x8000) != 0)
        {
          unsigned int v24 = *(_DWORD *)(v11 + 12);
        }

        else
        {
          unsigned int v24 = v12 >> 5;
        }

        unsigned int v25 = (v12 & 2) != 0 ? v11 + 10 : *(void *)(v11 + 24);
        if (*(_WORD *)(v25 + 2 * a2) != 39) {
          goto LABEL_8;
        }
        a2 = (v20 + 2);
        LOWORD(v23) = 39;
      }
    }

    __int128 v38 = v23;
    icu::UnicodeString::doAppend((uint64_t)a3, (uint64_t)&v38, 0, 1LL);
    unsigned int v11 = *((void *)this + 2);
    BOOL v12 = *(unsigned __int16 *)(v11 + 8);
    unsigned int v20 = a2;
  }

  unint64_t v21 = *(_DWORD *)(v11 + 12);
  if ((_DWORD)v20 != v21) {
    goto LABEL_36;
  }
LABEL_81:
  if (*(int *)a4 <= 0)
  {
    *a4 = U_INVALID_FORMAT_ERROR;
    *((void *)this + 6) = "quoted literal text missing terminating apostrophe";
    unsigned int v5 = v20;
    if (!*((void *)this + 5)) {
      return v5;
    }
LABEL_89:
    icu::CollationRuleParser::setErrorContext((char *)this);
  }

  return v20;
}

  if (BYTE12(__s)) {
    uprv_free((void *)__s);
  }
  return sub_180850D68((uint64_t)&v34 + 8);
}

      LODWORD(v13) = 0;
      goto LABEL_22;
    }

    unsigned int v13 = (*(void *)(a1 + 48) >> (4 * v12)) & 0xFLL;
LABEL_22:
    if (v12 > 0)
    {
      unint64_t v14 = 0;
      goto LABEL_29;
    }

        icu::RuleBasedCollator::setAttribute((uint64_t)v18, 4, 0x11u, (int *)&v21);
        *((void *)this + 77) = v18;
        if (!v6) {
          return *((void *)this + 77);
        }
        goto LABEL_6;
      }

      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v22);
    }
  }

  return 0LL;
}

  icu::UnicodeString::~UnicodeString((void *)v16, (icu::UnicodeString *)&v20);
  return SetForProperty;
}

        uint64_t v8 = U_MEMORY_ALLOCATION_ERROR;
        goto LABEL_6;
      }

      unsigned int v11 = *(const icu::CollationSettings **)(*(void *)(v7 + 24) + 32LL);
      if ((const icu::CollationSettings *)v9 != v11)
      {
        this = (uint64_t)sub_1808A41AC((icu::SharedObject **)(v7 + 16));
        if (this)
        {
          BOOL v12 = (_DWORD *)this;
          icu::CollationSettings::copyReorderingFrom((_DWORD *)this, v11, a4);
          this = icu::CollationFastLatin::getOptions( *(icu::CollationFastLatin **)(v7 + 8),  (const icu::CollationData *)v12,  (const icu::CollationSettings *)(v12 + 21),  (unsigned __int16 *)0x180);
          v12[20] = this;
          return this;
        }

        goto LABEL_19;
      }
    }
  }

  return this;
}

    char v27 = v19;
    this = icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)&v27, 0, 1LL);
    ++v11;
  }

  if ((uint64_t)v11 < *(int *)(v10 + 12))
  {
    int v17 = *(unsigned int *)(v10 + 12);
    goto LABEL_11;
  }

        icu::Formattable::~Formattable((icu::Formattable *)v48);
        unsigned int v13 = 0;
        unsigned int v11 = 1LL;
      }

      while ((v15 & 1) != 0);
    }

    ++v6;
  }

  while (v6 != 7);
  if (v37 || !v39)
  {
    unsigned int v25 = (uint64_t *)v39;
    if (v39) {
      goto LABEL_43;
    }
LABEL_46:
    *((_DWORD *)a4 + 2) = v7;
    *((_DWORD *)a4 + 3) = 0;
    goto LABEL_48;
  }

  else {
    unsigned int v24 = *(unsigned __int16 *)(v35 + 8) >> 5;
  }
  if (icu::UnicodeString::doCompare(v35, 0, v24, (uint64_t)"z", 0, 4))
  {
    else {
      int v26 = *(unsigned __int16 *)(v35 + 8) >> 5;
    }
    if (icu::UnicodeString::doCompare(v35, 0, v26, (uint64_t)L"one", 0, 3))
    {
      else {
        __int128 v28 = *(unsigned __int16 *)(v35 + 8) >> 5;
      }
      else {
        char v27 = 2.0;
      }
    }

    else
    {
      char v27 = 1.0;
    }
  }

  else
  {
    char v27 = 0.0;
  }

  icu::Formattable::Formattable((icu::Formattable *)v48, v27);
  icu::Formattable::operator=((uint64_t)v55, (uint64_t)v48);
  icu::Formattable::~Formattable((icu::Formattable *)v48);
LABEL_43:
  LODWORD(v48[0]) = 0;
  __int128 v29 = (icu::Measure *)icu::UMemory::operator new(v25, (icu::UMemory *)0x80, v10);
  if (!v29) {
    goto LABEL_46;
  }
  __int128 v30 = v29;
  icu::TimeUnitAmount::TimeUnitAmount(v29, (const icu::Formattable *)v55, v36, (UErrorCode *)v48);
  if (SLODWORD(v48[0]) <= 0)
  {
    icu::Formattable::adoptObject(a3, v30);
    *((_DWORD *)a4 + 2) = v34;
    *((_DWORD *)a4 + 3) = -1;
  }

  else
  {
    *((_DWORD *)a4 + 2) = v7;
    *((_DWORD *)a4 + 3) = 0;
    (*(void (**)(icu::UObject *))(*(void *)v30 + 8LL))(v30);
  }

  __n128 result = 0xFFFFFFFFLL;
  if ((int)v10 >= a6 && v11 >= a4)
  {
    *a8 = v16 - a3;
    return v10;
  }

  return result;
}

    v13[0] = off_18972C2B0;
    uhash_close(v14);
    icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v13);
  }

        uint64_t v15 = 1;
LABEL_20:
        ures_close(v12);
        ures_close(v4);
        if ((v15 & 1) != 0)
        {
          __n128 result = icu::UMemory::operator new(v17, (icu::UMemory *)0x20, v16);
          if (result)
          {
            *__n128 result = (uint64_t)off_18972C2E0;
            result[1] = (uint64_t)v5;
            result[2] = (uint64_t)v13;
            *((_DWORD *)result + 6) = v14;
          }

          return result;
        }

        uprv_free(v5);
        if (!v13) {
          return 0LL;
        }
        if ((int)v14 >= 1)
        {
          uint64_t v19 = v13;
          do
          {
            unsigned int v20 = *v19++;
            uprv_free(v20);
            LODWORD(v14) = v14 - 1;
          }

          while ((_DWORD)v14);
        }

        unint64_t v18 = v13;
LABEL_29:
        uprv_free(v18);
        return 0LL;
      }
    }
  }

  return result;
}

      uint64_t v3 = 0LL;
LABEL_20:
      if (v8) {
        ures_close(v8);
      }
      goto LABEL_22;
    }
  }

  uint64_t v3 = 0LL;
  *a2 = 7;
LABEL_22:
  if (v7) {
    (*(void (**)(icu::CollationTailoring *))(*(void *)v7 + 8LL))(v7);
  }
  return v3;
}

  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v14);
  if (!v11)
  {
    *a2 = U_INVALID_FORMAT_ERROR;
LABEL_2:
    *(_DWORD *)a3 = 0;
    *(_DWORD *)(a3 + 24) = 0;
    return;
  }

  unint64_t v14 = 0LL;
  v15[0] = 0LL;
  v15[1] = 0LL;
  icu::StringSegment::StringSegment((uint64_t)&v14, (const icu::UnicodeString *)a1, 0);
  icu::StringSegment::adjustOffset((uint64_t)&v14, 20);
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  sub_180937868((icu::StringSegment *)&v14, a3, a2);
}

LABEL_51:
    unsigned int v5 = v18;
  }

  uint64_t v15 = (char *)(v5 + 1);
  if (a4)
  {
    while (*(_BYTE *)(a1 + v14 + 8))
    {
      if (v15 == v7) {
        return (unsigned __int8 *)v12;
      }
      int v16 = *v15++;
      unint64_t v14 = v16;
      if (v16 < 0) {
        goto LABEL_33;
      }
    }
  }

  else
  {
    while (!*(_BYTE *)(a1 + v14 + 8))
    {
      if (v15 == v7) {
        return (unsigned __int8 *)v12;
      }
      int v17 = *v15++;
      unint64_t v14 = v17;
      if (v17 < 0)
      {
LABEL_33:
        unsigned int v5 = (unsigned __int8 *)(v15 - 1);
        goto LABEL_34;
      }
    }
  }

  return (unsigned __int8 *)(v15 - 1);
}

  *(_DWORD *)(a1 + 24) = v7;
  *(void *)(a1 + 16) = v6;
  if ((v7 & 0x80000000) == 0) {
    return 1LL;
  }
  unsigned int v22 = *v6;
  uint64_t v23 = v22 >= 0x40;
  unsigned int v24 = (v22 >> 15) ^ 3;
  if (v23) {
    return v24;
  }
  else {
    return 1LL;
  }
}

  if (*a2 <= 0 && v11 == 0)
  {
    LOBYTE(v11) = 0;
    if (*(_BYTE *)(result + 2) && v3 >= v5)
    {
      if ((_BYTE)v9 == 0xFF)
      {
        *int v10 = 38;
        uint64_t v19 = 1;
      }

      else
      {
        uint64_t v19 = 0;
      }

      unint64_t v21 = 11;
LABEL_72:
      *a2 = v21;
      unsigned int v20 = 0x1000000;
LABEL_73:
      LOBYTE(v11) = v19;
    }

    else
    {
      unsigned int v20 = 0;
    }
  }

  else
  {
    unsigned int v20 = 0;
  }

  *(_DWORD *)(v2 + 72) = v20 | (v9 << 16) | (unsigned __int16)v8;
  *(_BYTE *)(v2 + 64) = v11;
  *(void *)(result + 16) = v3;
  *(void *)(result + 32) = v4;
  *(void *)(result + 48) = v6;
  return result;
}

      ++v7;
    }

    while (v7 != v8);
  }

    ures_close(v14);
    ures_close(v13);
    if (!a3) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }

  *a4 = U_USING_FALLBACK_WARNING;
  if (a3) {
LABEL_17:
  }
    ures_close((uint64_t)a3);
LABEL_18:
  if (v9) {
    ures_close(v9);
  }
  icu::Locale::~Locale((icu::Locale *)v33);
  icu::Locale::~Locale((icu::Locale *)&v34);
}

      (*(void (**)(uint64_t, void (***)(icu::UnicodeString *__hidden), UErrorCode *))(*(void *)v34 + 304LL))( v34,  &v47,  a6);
      return icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)&v47);
    }

    else
    {
      *a6 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }

  return this;
}

            if (!v24)
            {
              icu::UnicodeString::~UnicodeString((void *)v24, (icu::UnicodeString *)&__src);
              v121[9] = (uint64_t)v145;
              goto LABEL_66;
            }

            int v26 = (unsigned __int16)v172;
            if ((__int16)v172 < 0)
            {
              char v27 = DWORD1(v172);
              if (DWORD1(v172) != 7)
              {
LABEL_58:
                if (v27 < 8)
                {
                  __int128 v28 = 0xFFFF;
                }

                else
                {
                  if ((v172 & 2) != 0) {
                    int v26 = (uint64_t)v173;
                  }
                  else {
                    int v26 = v173[0] + 14LL;
                  }
                  __int128 v28 = *(unsigned __int16 *)v26;
                }

                icu::UnicodeString::~UnicodeString((void *)v26, (icu::UnicodeString *)&__src);
                v121[11] = (uint64_t)v145;
                if (v28 == 32) {
                  goto LABEL_65;
                }
LABEL_66:
                v144 = L"backwards 2";
                icu::UnicodeString::UnicodeString(&__src, 1LL, &v144);
                if ((v172 & 1) != 0)
                {
                  __int128 v32 = (void *)WORD4(__src);
                  __int128 v33 = BYTE8(__src) & 1;
                }

                else
                {
                  if ((v172 & 0x8000u) == 0LL) {
                    __int128 v30 = (unsigned __int16)v172 >> 5;
                  }
                  else {
                    __int128 v30 = DWORD1(v172);
                  }
                  if ((SWORD4(__src) & 0x8000u) == 0) {
                    __int128 v31 = (void *)(WORD4(__src) >> 5);
                  }
                  else {
                    __int128 v31 = (void *)HIDWORD(__src);
                  }
                  if ((BYTE8(__src) & 1) != 0 || v30 != (_DWORD)v31)
                  {
                    icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)&__src);
                    v121[8] = (uint64_t)v144;
                    goto LABEL_84;
                  }

                  __int128 v33 = icu::UnicodeString::doEquals( (icu::UnicodeString *)&v171,  (const icu::UnicodeString *)&__src,  v30);
                }

                icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)&__src);
                v121[7] = (uint64_t)v144;
                if (v33)
                {
                  icu::CollationSettings::setFlag(*(void *)(v3 + 32), 2048, 17, 0, (int *)a2);
                  goto LABEL_79;
                }

        if (v21) {
          goto LABEL_52;
        }
        return 0LL;
      }
    }

    unsigned int v20 = v19;
    goto LABEL_45;
  }

  if ((v13 & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) == 0) {
      goto LABEL_26;
    }
LABEL_52:
    else {
      return (icu::RuleBasedCollator *)(*(unsigned __int16 *)(a3 + 8) >> 5);
    }
  }

  uint64_t v15 = v14 & ((int)v14 >> 31);
  if ((v14 & 0x80000000) != 0)
  {
    int v16 = 0;
  }

  else
  {
    int v16 = (_DWORD)v14 - v15;
    int v17 = (int)v14;
  }

  int v17 = v16;
LABEL_21:
  if ((*(_WORD *)(a2 + 8) & 1) == 0)
  {
    unsigned int v22 = (v13 & 2) != 0 ? a3 + 10 : *(void *)(a3 + 24);
  }

      *(void *)&__int128 v31 = off_18971B688;
      unsigned int v25 = 2LL;
      WORD4(v31) = 2;
LABEL_52:
      icu::UnicodeString::~UnicodeString((void *)v25, (icu::UnicodeString *)&v38);
      goto LABEL_53;
    }

    icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v31, (icu::UnicodeString *)&v38);
    goto LABEL_52;
  }

  return result;
}

          uint64_t v8 = 0;
        }

        goto LABEL_54;
      }

      uint64_t v8 = 0;
      ++a1;
LABEL_22:
    }

    if (v11 == 35)
    {
      do
      {
        uint64_t v15 = v7;
        if (v7 <= a3) {
          break;
        }
        v7 -= 2;
      }

      while (*((_WORD *)v15 - 1) == 32);
      while (a1 != (unsigned __int16 *)v10)
      {
        int v16 = *a1++;
        unsigned int v11 = v16;
        if (v16 == 10 || v11 == 13)
        {
          uint64_t v8 = 0;
          uint64_t v7 = v15;
          goto LABEL_36;
        }
      }

      uint64_t v7 = v15;
      goto LABEL_61;
    }

    uint64_t v8 = 0;
LABEL_36:
    if (v11 == 13 || v11 == 10)
    {
      while ((unint64_t)a1 < v10)
      {
        uint64_t v19 = *a1;
        unsigned int v20 = v19 > 0x20;
        unint64_t v21 = (1LL << v19) & 0x100002400LL;
        if (v20 || v21 == 0) {
          break;
        }
        ++a1;
      }

      uint64_t v8 = 0;
      goto LABEL_22;
    }

    if (v11 >= 0x10000)
    {
      *(_WORD *)uint64_t v7 = (v11 >> 10) - 10304;
      *((_WORD *)v7 + 1) = v11 & 0x3FF | 0xDC00;
      uint64_t v23 = 2LL;
LABEL_55:
      v7 += 2 * v23;
      goto LABEL_22;
    }

      __int128 v33 = (double *)icu::UMemory::operator new(v30, (icu::UMemory *)0x18, v13);
      __int128 v34 = *(unsigned int *)a2;
      if ((int)v34 >= 1)
      {
        if (v33) {
          icu::UMemory::operator delete(v33);
        }
        goto LABEL_96;
      }

      *__int128 v33 = v15;
      *((void *)v33 + 1) = v6;
      *((void *)v33 + 2) = v24;
      icu::UVector::adoptElement(*(icu::UVector **)(v2 + 96), v33, a2);
      __int128 v35 = *a2;
      icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)&v70);
      icu::UnicodeString::~UnicodeString(v37, (icu::UnicodeString *)&v75);
      uint64_t v7 = v15;
      __int128 v6 = v24;
      if (v35 >= 1)
      {
LABEL_97:
        uprv_free(v10);
        goto LABEL_98;
      }

      continue;
    }

    break;
  }

  unsigned int v20 = *(void (**)(void))(**(void **)(a1 + 352) + 200LL);
LABEL_24:
  v20();
  if (*(unsigned __int16 *)(a1 + 368) <= 0x1Fu)
  {
    __int128 v30 = *(void (**)(void))(**(void **)(a1 + 352) + 256LL);
    goto LABEL_47;
  }

  unint64_t v21 = (UChar **)(a1 + 360);
  if (*(unsigned __int16 *)(a1 + 432) < 0x20u || !*(void *)(a1 + 488))
  {
    if ((v51 & 0x8000u) == 0LL) {
      __int128 v31 = (unsigned __int16)v51 >> 5;
    }
    else {
      __int128 v31 = DWORD1(v51);
    }
    if ((int)v31 >= 1)
    {
      icu::UnicodeString::doAppend(a3, (const icu::UnicodeString *)&v50, 0, v31);
      goto LABEL_48;
    }

    __int128 v30 = *(void (**)(void))(**(void **)(a1 + 352) + 256LL);
LABEL_47:
    v30();
    (*(void (**)(void, _BYTE *, uint64_t, uint64_t))(**(void **)(a1 + 352) + 64LL))( *(void *)(a1 + 352),  a2,  a3,  a4);
    goto LABEL_48;
  }

  v46 = 0u;
  v49 = 0LL;
  v48 = 0u;
  v47 = 0u;
  v45 = (UChar *)off_18971B688;
  LOWORD(v46) = 2;
  unsigned int v22 = (unsigned __int16)v51 >> 5;
  if ((v51 & 0x8000u) != 0LL) {
    unsigned int v22 = DWORD1(v51);
  }
  if (v22 >= 1)
  {
    __int128 v35 = L"'";
    icu::UnicodeString::UnicodeString(&v40, 1LL, &v35);
    __int128 v34 = "'";
    icu::UnicodeString::UnicodeString(v37, 1LL, &v34);
    if ((v51 & 0x8000u) == 0LL) {
      uint64_t v23 = (unsigned __int16)v51 >> 5;
    }
    else {
      uint64_t v23 = DWORD1(v51);
    }
    if ((v41 & 0x8000u) == 0LL) {
      unsigned int v24 = (unsigned __int16)v41 >> 5;
    }
    else {
      unsigned int v24 = DWORD1(v41);
    }
    unsigned int v25 = v38 >> 5;
    if ((v38 & 0x8000u) != 0) {
      unsigned int v25 = v39;
    }
    unint64_t v21 = (UChar **)&v50;
    icu::UnicodeString::findAndReplace( (icu::UnicodeString *)&v50,  0,  v23,  (const icu::UnicodeString *)&v40,  0,  v24,  (const icu::UnicodeString *)v37,  0,  v25);
    icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v37);
    __int128 v33 = v34;
    icu::UnicodeString::~UnicodeString(&v33, (icu::UnicodeString *)&v40);
    LOWORD(v40) = 39;
    icu::UnicodeString::doReplace((uint64_t)&v50, 0LL, 0LL, (uint64_t)&v40, 0, 1LL);
    LOWORD(v40) = 39;
    icu::UnicodeString::doAppend((uint64_t)&v50, (uint64_t)&v40, 0, 1LL);
  }

  icu::UnicodeString::copyFrom(&v45, v21, 0);
  __int128 v41 = 0u;
  v44 = 0LL;
  v43 = 0u;
  __int128 v42 = 0u;
  v40 = off_18971B688;
  LOWORD(v41) = 2;
  icu::SimpleFormatter::format( *(icu::SimpleFormatter **)(a1 + 488),  (const icu::UnicodeString *)(a1 + 424),  (const icu::UnicodeString *)&v45,  (icu::UnicodeString *)&v40,  &v36);
  (*(void (**)(void, void (***)(icu::UnicodeString *__hidden)))(**(void **)(a1 + 352) + 256LL))( *(void *)(a1 + 352),  &v40);
  (*(void (**)(void, _BYTE *, uint64_t, uint64_t))(**(void **)(a1 + 352) + 64LL))( *(void *)(a1 + 352),  a2,  a3,  a4);
  icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v40);
  icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v45);
LABEL_48:
  icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)&v50);
  return a3;
}

  icu::UVector::~UVector((icu::UVector *)v46);
  Instance = 0LL;
LABEL_2:
  sub_18095EA84(&v55);
  return Instance;
}

  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v57);
  icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)&v62);
  return v35;
}

  __int128 v33 = off_18972C310;
  __int128 v34 = a4;
  __int128 v35 = 0;
  __int128 v36 = 0LL;
  __int128 v37 = a1 + 232;
  icu::TextTrieMap::search( (icu::TextTrieMap *)qword_18C535C98,  a2,  a3,  (uint64_t (***)(void, void, void *, int *))&v33,  (UErrorCode *)a5);
  __n128 result = v36;
  if (*(int *)a5 >= 1)
  {
    __int128 v33 = off_18972C310;
    if (v36)
    {
      (*(void (**)(void))(*(void *)v36 + 8LL))();
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1807BE314(uint64_t a1, uint8_t *s, uint64_t a3, int a4)
{
  int v7 = a4 != 0;
  uint64_t v8 = s - 2;
  while (1)
  {
    uint64_t v9 = (int)a3 - 1LL;
    puint64_t i = a3 - 1;
    uint64_t v10 = s[v9];
    if ((v10 & 0x80) == 0) {
      break;
    }
LABEL_16:
    UChar32 v13 = utf8_prevCharSafeBody(s, 0, &pi, v10, -3);
    if (v13 <= 2047)
    {
      if ((a4 != 0) == (((*(_DWORD *)(a1 + 4LL * (v13 & 0x3F) + 268) >> (v13 >> 6)) & 1) == 0)) {
        return (v9 + 1);
      }
      goto LABEL_26;
    }

    if (HIWORD(v13))
    {
      BOOL v16 = a4 != 0;
      uint64_t v17 = *(unsigned int *)(a1 + 844);
      uint64_t v18 = *(unsigned int *)(a1 + 848);
    }

    else
    {
      unsigned int v14 = v13 >> 12;
      unsigned int v15 = (*(_DWORD *)(a1 + 4LL * ((v13 >> 6) & 0x3F) + 524) >> (v13 >> 12)) & 0x10001;
      if (v15 <= 1)
      {
        if (v15 != v7) {
          return (v9 + 1);
        }
        goto LABEL_26;
      }

      BOOL v16 = a4 != 0;
      uint64_t v17 = *(unsigned int *)(a1 + 780 + 4LL * v14);
      uint64_t v18 = *(unsigned int *)(a1 + 780 + 4LL * (v14 + 1));
    }

    if (((v16 ^ ((sub_1807BD4E4(a1, v13, v17, v18) & 1) == 0)) & 1) == 0) {
      return (v9 + 1);
    }
LABEL_26:
    a3 = pi;
    if (pi <= 0) {
      return 0LL;
    }
  }

  if (a4)
  {
    if (*(_BYTE *)(a1 + v10 + 8))
    {
      uint64_t v11 = (int)a3;
      LODWORD(v9) = a3 - 2;
      do
      {
        a3 = v11 - 1;
        if (v11 == 1) {
          break;
        }
        puint64_t i = v9;
        uint64_t v10 = v8[v11];
        if ((v10 & 0x80) != 0) {
          goto LABEL_16;
        }
        LODWORD(v9) = v9 - 1;
        --v11;
      }

      while (*(_BYTE *)(a1 + v10 + 8));
    }
  }

  else if (!*(_BYTE *)(a1 + v10 + 8))
  {
    uint64_t v12 = (int)a3;
    LODWORD(v9) = a3 - 2;
    do
    {
      a3 = v12 - 1;
      if (v12 == 1) {
        break;
      }
      puint64_t i = v9;
      uint64_t v10 = v8[v12];
      if ((v10 & 0x80) != 0) {
        goto LABEL_16;
      }
      LODWORD(v9) = v9 - 1;
      --v12;
    }

    while (!*(_BYTE *)(a1 + v10 + 8));
  }

  return a3;
}

void *sub_1807BE4E4(void *result)
{
  *__n128 result = off_18970AE70;
  return result;
}

void *sub_1807BE500(void *result)
{
  *__n128 result = &off_18970AEA8;
  result[1] = 0LL;
  return result;
}

void sub_1807BE510(icu::UObject *this)
{
  *(void *)this = &off_18970AEA8;
  unsigned int v2 = (icu::UnicodeSet *)*((void *)this + 1);
  if (v2)
  {
    icu::UnicodeSet::~UnicodeSet(v2);
    icu::UMemory::operator delete(v3);
  }

  *((void *)this + 1) = 0LL;
  icu::UObject::~UObject(this);
}

void sub_1807BE554(icu::UObject *a1)
{
}

icu::UnicodeSet *sub_1807BE568(uint64_t a1, int a2)
{
  __n128 result = *(icu::UnicodeSet **)(a1 + 8);
  if (result) {
    return (icu::UnicodeSet *)(icu::UnicodeSet::contains(result, a2) != 0);
  }
  return result;
}

uint64_t sub_1807BE58C(uint64_t a1, UText *ut, int a3, int a4, uint64_t a5, uint64_t a6, int *a7)
{
  if (*a7 <= 0)
  {
    utext_setNativeIndex(ut, a3);
    while (1)
    {
      UChar32 v11 = utext_current32(ut);
      if ((int)utext_getNativeIndex(ut) >= a4
        || !icu::UnicodeSet::contains(*(icu::UnicodeSet **)(a1 + 8), v11))
      {
        break;
      }

      utext_next32(ut);
    }
  }

  return 0LL;
}

icu::UnicodeSet *sub_1807BE60C(uint64_t a1, unint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = *(icu::UnicodeSet **)(a1 + 8);
  if (!v4)
  {
    __n128 result = (icu::UnicodeSet *)icu::UMemory::operator new((icu::UMemory *)0xC8, a2);
    if (!result)
    {
      *(void *)(a1 + 8) = 0LL;
      return result;
    }

    icu::UnicodeSet::UnicodeSet(result);
    *(void *)(a1 + 8) = v4;
  }

  __n128 result = (icu::UnicodeSet *)icu::UnicodeSet::contains(v4, v2);
  if (!(_DWORD)result)
  {
    UErrorCode pErrorCode = U_ZERO_ERROR;
    int32_t IntPropertyValue = u_getIntPropertyValue(v2, UCHAR_SCRIPT);
    return icu::UnicodeSet::applyIntPropertyValue(*(icu::UnicodeSet **)(a1 + 8), 4106LL, IntPropertyValue, &pErrorCode);
  }

  return result;
}

void *sub_1807BE688(void *result)
{
  *__n128 result = &off_18970AEE8;
  result[1] = 0LL;
  return result;
}

void *sub_1807BE698(void *a1)
{
  *a1 = &off_18970AEE8;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

void sub_1807BE6D8(void *a1)
{
  *a1 = &off_18970AEE8;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::UMemory::operator delete(a1);
}

void sub_1807BE718(uint64_t a1, int *a2)
{
  if (!*(void *)(a1 + 8))
  {
    uint64_t v5 = icu::UMemory::operator new((icu::UMemory *)0x28, v4);
    if (v5)
    {
      __int128 v6 = icu::UStack::UStack(v5, (uint64_t)uprv_deleteUObject, 0LL, a2);
      if (*a2 <= 0) {
        *(void *)(a1 + 8) = v6;
      }
      else {
        (*(void (**)(void *))(*v6 + 8LL))(v6);
      }
    }

    else if (*a2 <= 0)
    {
      *a2 = 7;
    }
  }

  umtx_unlock((std::mutex **)&unk_18C534B20);
}

uint64_t sub_1807BE7B0(icu::UVector **a1, uint64_t a2, uint64_t a3)
{
  UErrorCode v13 = U_ZERO_ERROR;
  sub_1807BE718((uint64_t)a1, (int *)&v13);
  if (v13 > U_ZERO_ERROR) {
    return 0LL;
  }
  umtx_lock((icu::UMutex *)&unk_18C534B70);
  int v7 = *((_DWORD *)a1[1] + 2);
  if (v7 < 1)
  {
LABEL_8:
    uint64_t v10 = (void *)(*((uint64_t (**)(icu::UVector **, uint64_t, uint64_t))*a1 + 4))(a1, a2, a3);
    if (v10)
    {
      UChar32 v11 = a1[1];
      if (*((void *)v11 + 3)) {
        icu::UVector::adoptElement(v11, v10, &v13);
      }
      else {
        icu::UVector::addElement(v11, v10, &v13);
      }
    }

    if (v13 <= U_ZERO_ERROR) {
      uint64_t v6 = (uint64_t)v10;
    }
    else {
      uint64_t v6 = 0LL;
    }
  }

  else
  {
    int v8 = v7 + 1;
    while (1)
    {
      uint64_t v9 = icu::UVector::elementAt(a1[1], v8 - 2);
      if (v9)
      {
        uint64_t v6 = v9;
      }
    }
  }

  umtx_unlock((std::mutex **)&unk_18C534B70);
  return v6;
}

uint64_t sub_1807BE8C8(uint64_t a1, unsigned int a2)
{
  int v17 = 0;
  uint64_t Script = uscript_getScript(a2, &v17);
  if (v17 > 0) {
    return 0LL;
  }
  uint64_t v6 = Script;
  int v7 = (void *)CreateLSTMDataForScript(Script, &v17);
  if (v17 <= 0 && v7 != 0LL)
  {
    uint64_t v9 = v7;
    LSTMBreakEngine = CreateLSTMBreakEngine(v6, v7, (UErrorCode *)&v17);
    uint64_t v4 = (uint64_t)LSTMBreakEngine;
    if (v17 <= 0 && LSTMBreakEngine) {
      return v4;
    }
    if (LSTMBreakEngine) {
      (*(void (**)(void *))(*LSTMBreakEngine + 8LL))(LSTMBreakEngine);
    }
    else {
      DeleteLSTMData(v9);
    }
  }

  int v17 = 0;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 40LL))(a1, v6);
  if (v4)
  {
    switch((int)v6)
    {
      case 17:
      case 20:
      case 22:
        if (!icu::UMemory::operator new((icu::UMemory *)0x3A0, v11)) {
          goto LABEL_23;
        }
        goto LABEL_21;
      case 18:
        if (!icu::UMemory::operator new((icu::UMemory *)0x3A0, v11)) {
          goto LABEL_23;
        }
LABEL_21:
        uint64_t v13 = sub_1807C7EF4();
        break;
      case 19:
      case 21:
      case 25:
      case 26:
      case 27:
        goto LABEL_23;
      case 23:
        uint64_t v14 = icu::UMemory::operator new((icu::UMemory *)0x330, v11);
        if (!v14) {
          goto LABEL_23;
        }
        uint64_t v13 = sub_1807C76B4(v14, v4, &v17);
        break;
      case 24:
        uint64_t v15 = icu::UMemory::operator new((icu::UMemory *)0x330, v11);
        if (!v15) {
          goto LABEL_23;
        }
        uint64_t v13 = sub_1807C67FC(v15, v4, &v17);
        break;
      case 28:
        uint64_t v16 = icu::UMemory::operator new((icu::UMemory *)0x330, v11);
        if (!v16) {
          goto LABEL_23;
        }
        uint64_t v13 = sub_1807C6F34(v16, v4, &v17);
        break;
      default:
        if ((_DWORD)v6 != 38) {
          goto LABEL_23;
        }
        uint64_t v12 = icu::UMemory::operator new((icu::UMemory *)0x3F8, v11);
        if (!v12) {
          goto LABEL_23;
        }
        uint64_t v13 = sub_1807C5ED0(v12, v4, &v17);
        break;
    }

    uint64_t v4 = v13;
    if (v17 >= 1)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
      return 0LL;
    }
  }

  return v4;
}

char *sub_1807BEA98(uint64_t a1, int32_t a2)
{
  v27[8] = *(void **)MEMORY[0x1895F89C0];
  UErrorCode v24 = U_ZERO_ERROR;
  uint64_t v3 = ures_open("icudt74l-brkitr", "", (int *)&v24);
  uint64_t v4 = ures_getByKeyWithFallback(v3, "dictionaries", v3, &v24);
  int32_t count = 0;
  ShortName = (char *)uscript_getShortName(a2);
  StringByKeyWithFallback = ures_getStringByKeyWithFallback(v4, ShortName, &count, &v24);
  if (v24 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    ures_close(v4);
    return 0LL;
  }

  int v7 = (char *)StringByKeyWithFallback;
  memset(&v27[1], 0, 56);
  v27[0] = (char *)&v27[1] + 5;
  LODWORD(v27[1]) = 40;
  memset(&v26[1], 0, 56);
  v26[0] = (char *)&v26[1] + 5;
  LODWORD(v26[1]) = 40;
  int v8 = u_memrchr(StringByKeyWithFallback, 0x2Eu, count);
  if (v8)
  {
    unint64_t v9 = (unint64_t)((char *)v8 - v7) >> 1;
    unsigned int v22 = v8 + 1;
    icu::UnicodeString::UnicodeString(v25, 0LL, &v22);
    icu::CharString::appendInvariantChars((icu::CharString *)v26, (const icu::UnicodeString *)v25, &v24);
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v25);
    int32_t count = v9;
  }

  unint64_t v21 = v7;
  icu::UnicodeString::UnicodeString(v25, 0LL, &v21);
  icu::CharString::appendInvariantChars((icu::CharString *)v27, (const icu::UnicodeString *)v25, &v24);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v25);
  ures_close(v4);
  uint64_t v10 = udata_open("icudt74l-brkitr", (const char *)v26[0], (const char *)v27[0], &v24);
  if (v24 > U_ZERO_ERROR)
  {
    if (v7)
    {
      int v7 = 0LL;
      UErrorCode v24 = U_ZERO_ERROR;
    }

    goto LABEL_15;
  }

  unint64_t v11 = v10;
  Memory = (int *)udata_getMemory((uint64_t)v10);
  uint64_t v14 = Memory;
  uint64_t v15 = *Memory;
  int v16 = Memory[4] & 7;
  if (v16)
  {
    if (v16 == 1)
    {
      uint64_t v19 = (char *)icu::UMemory::operator new((icu::UMemory *)0x18, v13);
      if (v19)
      {
        int v7 = v19;
        *(void *)uint64_t v19 = off_18970B6B8;
        *((void *)v19 + 1) = (char *)v14 + v15;
        *((void *)v19 + 2) = v11;
        goto LABEL_15;
      }
    }

LABEL_14:
    udata_close(v11);
    int v7 = 0LL;
    goto LABEL_15;
  }

  int v17 = Memory[5];
  uint64_t v18 = icu::UMemory::operator new((icu::UMemory *)0x20, v13);
  if (!v18) {
    goto LABEL_14;
  }
  int v7 = (char *)v18;
  *(void *)uint64_t v18 = off_18970B6E8;
  *(void *)(v18 + 8) = (char *)v14 + v15;
  *(_DWORD *)(v18 + 16) = v17;
  *(void *)(v18 + 24) = v11;
LABEL_15:
  if (BYTE4(v26[1])) {
    uprv_free(v26[0]);
  }
  if (BYTE4(v27[1])) {
    uprv_free(v27[0]);
  }
  return v7;
}

  icu::LocalePriorityList::~LocalePriorityList((icu::LocalePriorityList *)v11);
  return a1;
}

        __n128 result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v15, ++v8, (const char **)&__s1, a3);
      }

      while ((_DWORD)result);
    }
  }

  return result;
}

      unsigned int v25 = *(unsigned __int16 *)(*(void *)(v22 + 8) + 2LL * v24);
      if (v25 >> 10 < 0x3F)
      {
        int v26 = (_WORD *)(*(void *)(a1 + 48) + ((unsigned __int16)v25 & 0xFFFE));
        if ((*v26 & 0x80) == 0) {
          goto LABEL_27;
        }
        LOWORD(v26) = *(v26 - 1);
      }

      else
      {
        LODWORD(v26) = v25 >> 1;
      }

      if (!(_BYTE)v26) {
        goto LABEL_27;
      }
      if ((v16 & 1) != 0) {
        uint64_t v15 = v26;
      }
      int v17 = v18;
      uint64_t v14 = v26;
      int v16 = 0;
      if (v18 == a3)
      {
        uint64_t v14 = v26;
        int v17 = a3;
        if (!a3) {
          goto LABEL_28;
        }
        goto LABEL_29;
      }
    }
  }

  uint64_t v15 = 0;
  uint64_t v14 = 0;
  int v17 = a2;
LABEL_27:
  if (!a3) {
LABEL_28:
  }
    a3 = u_strchr(v17, 0);
LABEL_29:
  __n128 result = (UChar *)icu::ReorderingBuffer::append( (icu::ReorderingBuffer *)a6,  a2,  (unint64_t)((char *)v17 - (char *)a2) >> 1,  0,  v15,  v14,  a7);
  if ((_DWORD)result) {
    return (UChar *)icu::ReorderingBuffer::appendZeroCC(a6, v17, a3, a7);
  }
  return result;
}

  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v21);
}

  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v21);
}

    *unint64_t v9 = *v7;
    LODWORD(v9) = (_DWORD)v9 + 1;
    return ucnv_cbFromUWriteBytes(a1, (char *)v20, v9 - v20, a2, a3);
  }

  unint64_t v11 = *(unsigned __int8 *)(v5 + 89);
  if (!*(_DWORD *)(v6 + 108))
  {
    uint64_t v18 = *(_DWORD *)(v5 + 80);
    if (v11 != 1)
    {
      uint64_t v19 = (char *)v20;
      if (!v18)
      {
        *(_DWORD *)(v5 + 80) = 1;
        uint64_t v19 = (char *)v20 + 1;
        LOBYTE(v20[0]) = 14;
      }

      *uint64_t v19 = *v7;
      LODWORD(v9) = (_DWORD)v19 + 2;
      v19[1] = v7[1];
      return ucnv_cbFromUWriteBytes(a1, (char *)v20, v9 - v20, a2, a3);
    }

    unint64_t v9 = (char *)v20;
    if (!v18) {
      goto LABEL_14;
    }
    *(_DWORD *)(v5 + 80) = 0;
    goto LABEL_13;
  }

  uint64_t v12 = *(void *)(v6 + 80);
  unint64_t v13 = *(void *)(v12 + 40);
  uint64_t v14 = *(_BYTE *)(v12 + 89);
  *(void *)(v12 + 40) = v7;
  *(_BYTE *)(v12 + 89) = v11;
  a1[1] = v12;
  *(_DWORD *)(v12 + 84) = *(_DWORD *)(v5 + 84);
  __n128 result = (void *)ucnv_cbFromUWriteSub((uint64_t)a1, 0, a3);
  int v16 = *(void *)(v6 + 80);
  *(_DWORD *)(v5 + 84) = *(_DWORD *)(v16 + 84);
  a1[1] = v5;
  *(void *)(v16 + 40) = v13;
  *(_BYTE *)(v16 + 89) = v14;
  if (*a3 == 15)
  {
    int v17 = *(char *)(v16 + 91);
    if (v17 >= 1)
    {
      __n128 result = memcpy((void *)(v5 + 104), (const void *)(v16 + 104), *(unsigned __int8 *)(v16 + 91));
      int v16 = *(void *)(v6 + 80);
      LOBYTE(v17) = *(_BYTE *)(v16 + 91);
    }

    *(_BYTE *)(v5 + 91) = v17;
    *(_BYTE *)(v16 + 91) = 0;
  }

  return result;
}

  int v7 = v11;
  if (!a4) {
    return v7 == 0;
  }
LABEL_8:
  if ((v6 & 2) != 0) {
    uint64_t v12 = a1 + 10;
  }
  else {
    uint64_t v12 = *(void *)(a1 + 24);
  }
  uint64_t v14 = (const UChar *)(a4 + 2LL * a5);
  if (a6 < 0) {
    a6 = u_strlen(&v14[a5]);
  }
  if (v7 != a6) {
    return 0LL;
  }
  __n128 result = 1LL;
  if (v7 && (const UChar *)(v12 + 2LL * v8) != v14) {
    return u_memcmp((const UChar *)(v12 + 2LL * v8), v14, v7) == 0;
  }
  return result;
}

  a2 = v11;
  if ((length & 0x80000000) == 0)
  {
LABEL_10:
    uint64_t v12 = (v10 - a2);
    goto LABEL_16;
  }

      uint64_t v12 = 0;
      goto LABEL_16;
    }
  }

          int v7 = v14;
          goto LABEL_15;
        }

    *(void *)dest = 0LL;
    unint64_t v9 = ucase_toFullFolding(v2, dest, 0);
    uint64_t v5 = ~v9;
    uint64_t v4 = v9 >= 0;
    goto LABEL_15;
  }

  uint64_t v6 = (unsigned __int16)v30;
  if (((__int16)v30 & 0x80000000) == 0)
  {
    if ((v30 & 0xFFE0) != 0x20)
    {
      int v7 = (unsigned __int16)v30 >> 5;
      goto LABEL_17;
    }

  uint64_t v14 = -6;
LABEL_15:
  if ((v13 & v14) != 0) {
    *(_BYTE *)(a4 + 10) = 0;
  }
  for (uint64_t i = v13 | v11; v8 < a3; i |= 1 << result)
  {
    int v16 = v8 + 1LL;
    int v17 = a2[v8];
    if ((v17 & 0xFC00) == 0xD800)
    {
      v8 += 2;
      int v17 = (v17 << 10) - 56613888 + a2[v16];
    }

    else
    {
      ++v8;
    }

    __n128 result = u_charDirection(v17);
  }

  if (v10)
  {
    if ((i & 0xFFF9DB81) != 0) {
      *(_BYTE *)(a4 + 10) = 0;
    }
    if ((~i & 0x24) == 0) {
      goto LABEL_26;
    }
  }

  else if ((i & 0xFFF9FBA2) != 0)
  {
LABEL_26:
    *(_BYTE *)(a4 + 10) = 0;
  }

  if ((i & 0x2022) != 0) {
    *(_BYTE *)(a4 + 9) = 1;
  }
  return result;
}

    *a3 = U_MEMORY_ALLOCATION_ERROR;
    return this;
  }

  this = icu::UMemory::operator new(v8, (icu::UMemory *)0x1A0, v5);
  if (!this) {
    goto LABEL_14;
  }
  uint64_t v10 = this;
  unint64_t v11 = *(uint64_t **)(v4[2] + 8);
  else {
    uint64_t v12 = *((unsigned __int16 *)v4 + 24) >> 5;
  }
  uint64_t v15 = *v11;
  this[2] = (uint64_t)v11;
  *((_DWORD *)this + 6) = 0;
  this[4] = (uint64_t)(this + 6);
  *((_DWORD *)this + 10) = 40;
  *((_BYTE *)this + 44) = 0;
  *((_DWORD *)this + 92) = 0;
  this[47] = 0LL;
  *((_DWORD *)this + 96) = -1;
  *((_BYTE *)this + 388) = v9;
  *this = (uint64_t)off_18972CFB0;
  this[1] = v15;
  this[49] = (uint64_t)v7;
  this[50] = (uint64_t)v7;
  this[51] = (uint64_t)&v7[2 * v12];
LABEL_19:
  this = (uint64_t *)v4[1];
  if (this) {
    this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
  }
  v4[1] = (uint64_t)v10;
  *((_DWORD *)v4 + 6) = 0;
  *((_BYTE *)v4 + 28) = 0;
  return this;
}

  if ((a3 & 8) != 0) {
    return 256LL;
  }
LABEL_18:
  uint64_t v10 = (icu::CollationBuilder *)((char *)this + 48);
  if (a4 == 1) {
    return icu::CollationRootElements::getSecondaryBefore(v10, HIDWORD(a3), v7);
  }
  else {
    return icu::CollationRootElements::getTertiaryBefore(v10, HIDWORD(a3), v7, v4);
  }
}

  sub_1808B92B8(a1, a2, a3, a4);
  return *(_DWORD *)(a1 + 760) < 1;
}

  if (*((_DWORD *)this + 19))
  {
    uprv_free(this[8]);
    *((_DWORD *)this + 19) = 0;
  }

  this[4] = (void *)a7;
  this[8] = (void *)a3;
  *((_DWORD *)this + 18) = a4;
  if (a6 < 1)
  {
    LODWORD(v16) = 0;
  }

  else
  {
    int v16 = 0LL;
    while (!(BYTE2(a5[v16]) << 16))
    {
      if (a6 == ++v16) {
        goto LABEL_23;
      }
    }
  }

  if (a6 == (_DWORD)v16)
  {
LABEL_23:
    *((_DWORD *)this + 10) = 0;
    this[6] = 0LL;
    *((_DWORD *)this + 14) = 0;
  }

  else
  {
    *((_DWORD *)this + 10) = HIWORD(a5[a6 - 1]) << 16;
    this[6] = (void *)&a5[v16];
    *((_DWORD *)this + 14) = a6 - v16;
  }

  if ((SWORD4(v14) & 0x8000u) == 0) {
    int v7 = WORD4(v14) >> 5;
  }
  else {
    int v7 = HIDWORD(v14);
  }
  if ((v3 & 0x8000) != 0) {
    int v8 = *(_DWORD *)(a1 + 20);
  }
  else {
    int v8 = (unsigned __int16)v3 >> 5;
  }
  uint64_t v6 = 1LL;
  if ((BYTE8(v14) & 1) == 0 && v7 >= 1)
  {
    if ((BYTE8(v14) & 2) != 0) {
      unint64_t v9 = (unint64_t)&v14 | 0xA;
    }
    else {
      unint64_t v9 = *((void *)&v15 + 1);
    }
    uint64_t v6 = icu::UnicodeString::indexOf(a1 + 8, v9, 0, v7, 0, v8) == -1;
  }

  if ((_DWORD)v7 == (_DWORD)v5)
  {
    *a3 = U_NUMBER_SKELETON_SYNTAX_ERROR;
    return icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v34);
  }

  memset(&v33[1], 0, 56);
  v33[0] = (char *)&v33[1] + 5;
  LODWORD(v33[1]) = 40;
  v30[0] = U_ZERO_ERROR;
  if ((BYTE8(v34) & 2) != 0) {
    int v8 = (unint64_t)&v34 | 0xA;
  }
  if ((BYTE8(v34) & 0x11) != 0) {
    unint64_t v11 = 0LL;
  }
  else {
    unint64_t v11 = v8;
  }
  __int128 v28 = v11;
  icu::UnicodeString::UnicodeString(v29, 0LL, &v28);
  icu::CharString::appendInvariantChars((icu::CharString *)v33, (const icu::UnicodeString *)v29, v30);
  icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v29);
  unint64_t v13 = v30[0];
  if (v30[0] != U_INVARIANT_CONVERSION_ERROR)
  {
    if (v30[0] > U_ZERO_ERROR) {
      goto LABEL_24;
    }
    memset(v31, 0, sizeof(v31));
    *(void *)__int128 v30 = (char *)&v31[1] + 1;
    v31[0] = 40;
    __int128 v32 = 0LL;
    char v27 = U_ZERO_ERROR;
    uint64_t v15 = *((void *)&v35 + 1);
    if ((BYTE8(v34) & 2) != 0) {
      uint64_t v15 = (unint64_t)&v34 | 0xA;
    }
    if ((BYTE8(v34) & 0x11) != 0) {
      uint64_t v15 = 0LL;
    }
    int v26 = v15 + 2LL * (v5 + 1);
    icu::UnicodeString::UnicodeString(v29, 0LL, &v26);
    icu::CharString::appendInvariantChars((icu::CharString *)v30, (const icu::UnicodeString *)v29, &v27);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v29);
    int v17 = v27;
    if (v27 == U_INVARIANT_CONVERSION_ERROR)
    {
      int v17 = U_NUMBER_SKELETON_SYNTAX_ERROR;
    }

    else if (v27 <= U_ZERO_ERROR)
    {
      bzero(v29, 0x3C0uLL);
      for (uint64_t i = 0LL; i != 960; i += 24LL)
        icu::MeasureUnit::MeasureUnit((uint64_t)&v29[i]);
      char v27 = U_ZERO_ERROR;
      Available = icu::MeasureUnit::getAvailable( (icu::MeasureUnit *)v33[0],  (icu::MeasureUnit *)v29,  (icu::MeasureUnit *)0x28,  (int *)&v27,  v19);
      if (v27 <= U_ZERO_ERROR)
      {
        if (Available < 1)
        {
LABEL_46:
          *a3 = U_NUMBER_SKELETON_SYNTAX_ERROR;
        }

        else
        {
          unint64_t v21 = Available;
          unsigned int v22 = v29;
          while (1)
          {
            uint64_t v23 = *(const char **)v30;
            Subtype = icu::MeasureUnit::getSubtype((icu::MeasureUnit *)v22);
            if (!strcmp(v23, Subtype)) {
              break;
            }
            v22 += 24;
            if (!--v21) {
              goto LABEL_46;
            }
          }

          icu::MeasureUnit::operator=(a2 + 16, (unint64_t)v22);
        }
      }

      else
      {
        *a3 = U_INTERNAL_PROGRAM_ERROR;
      }

      for (uint64_t j = 936LL; j != -24; j -= 24LL)
        icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v29[j]);
      goto LABEL_36;
    }

    *a3 = v17;
LABEL_36:
    if (LOBYTE(v31[1])) {
      uprv_free(*(void **)v30);
    }
    goto LABEL_25;
  }

  unint64_t v13 = U_NUMBER_SKELETON_SYNTAX_ERROR;
LABEL_24:
  *a3 = v13;
LABEL_25:
  uint64_t v6 = (void *)BYTE4(v33[1]);
  if (BYTE4(v33[1])) {
    uprv_free(v33[0]);
  }
  return icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v34);
}

      if (*(_DWORD *)(a1 + 88) == 1) {
        icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)L"/w", 0, 0xFFFFFFFFLL);
      }
      return 1LL;
    case 5:
    case 6:
    case 7:
      icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)"p", 0, 0xFFFFFFFFLL);
      sub_18093E02C(*(_DWORD *)(a1 + 72), *(__int16 *)(a1 + 80), *(__int16 *)(a1 + 82), (uint64_t)this);
      goto LABEL_14;
    case 8:
      if (*(_DWORD *)(a1 + 72)) {
        icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)L"precision-currency-cash", 0, 0xFFFFFFFFLL);
      }
      else {
        icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)L"precision-currency-standard", 0, 0xFFFFFFFFLL);
      }
      goto LABEL_14;
    case 9:
      uint64_t v5 = *(__int16 *)(a1 + 80);
      uint64_t v6 = *(__int16 *)(a1 + 82);
      goto LABEL_13;
    default:
      return 0LL;
  }

  unint64_t v21 = 0;
  uint64_t v19 = 0u;
  unsigned int v20 = 0u;
  int v17 = 0u;
  uint64_t v18 = 0u;
  uint64_t v15 = 0u;
  int v16 = 0u;
  *(_OWORD *)unint64_t v13 = 0u;
  uint64_t v14 = 0u;
  icu::UnicodeString::extract((uint64_t)&v22, 0, v8, v13, 129);
  uint64_t v12 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0LL;
  ures_getAllItemsWithFallback(a2, v13, a1, (int *)&v12);
  uint64_t v10 = (void *)v12;
  return icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v22);
}

  if (BYTE4(v32)) {
    uprv_free(*((void **)&v31 + 1));
  }
  if (BYTE4(v28)) {
    uprv_free(v27[1]);
  }
  if (BYTE4(v24)) {
    uprv_free(*((void **)&v23 + 1));
  }
  return v8;
}

  if (*(_DWORD *)regexp != 1919252592) {
    goto LABEL_32;
  }
  int v16 = *((void *)regexp + 6);
  if (!v16 && !*((_BYTE *)regexp + 60))
  {
    int v26 = U_REGEX_INVALID_STATE;
    goto LABEL_33;
  }

  if (!replacementText
    || replacementLength < -1
    || !destBuf
    || !destCapacity
    || ((int v17 = *destBuf, v18 = *destCapacity, (int)v18 > 0) ? (v19 = v17 == 0LL) : (v19 = 0),
        v19 || (v18 & 0x80000000) != 0))
  {
    uint64_t v15 = 0;
    int v26 = U_ILLEGAL_ARGUMENT_ERROR;
    goto LABEL_35;
  }

  unsigned int v20 = *((void *)regexp + 5);
  if (!*(_BYTE *)(v20 + 130))
  {
    uint64_t v15 = 0;
    int v26 = U_REGEX_INVALID_STATE;
    goto LABEL_35;
  }

  if (replacementLength == -1)
  {
    unint64_t v9 = u_strlen(replacementText);
    int v16 = *((void *)regexp + 6);
  }

  v75 = v14;
  v74 = v20;
  if (v16)
  {
    unint64_t v21 = *(UText **)(v20 + 32);
    if (v21->pFuncs->mapNativeIndexToUTF16)
    {
      statusa[0] = U_ZERO_ERROR;
      unsigned int v22 = utext_extract(v21, 0LL, *(void *)(v20 + 152), 0LL, 0, statusa);
      uint64_t v23 = v20;
      UErrorCode v24 = v22;
      statusa[0] = U_ZERO_ERROR;
      unsigned int v25 = utext_extract(*(UText **)(v23 + 32), *(void *)(v23 + 152), *(void *)(v23 + 136), 0LL, 0, statusa) + v22;
    }

    else
    {
      __int128 v28 = v20;
      UErrorCode v24 = *(_DWORD *)(v20 + 152);
      unsigned int v25 = *(_DWORD *)(v28 + 136);
    }

    __int128 v29 = __OFSUB__(v25, v24);
    __int128 v30 = (v25 - v24);
    if (((int)v30 < 0) ^ v29 | ((_DWORD)v30 == 0))
    {
      uint64_t v15 = 0;
    }

    else
    {
      __int128 v31 = 0LL;
      do
      {
        if (v31 < v18) {
          v17[v31] = *(_WORD *)(*((void *)regexp + 6) + 2LL * v24 + 2 * v31);
        }
        ++v31;
      }

      while (v30 != v31);
      uint64_t v15 = v30;
    }
  }

  else
  {
    statusa[0] = U_ZERO_ERROR;
    uint64_t v15 = utext_extract(*(UText **)(v20 + 32), *(void *)(v20 + 152), *(void *)(v20 + 136), v17, v18, statusa);
  }

  if (v9 >= 1)
  {
    __int128 v32 = 0;
    v76 = v18;
    v77 = v17;
    while (1)
    {
      __int128 v33 = v32;
      __int128 v34 = replacementText[v32];
      __int128 v35 = v32 + 1LL;
      offset = v35;
      if (v34 != 36)
      {
        if (v34 == 92)
        {
          __int128 v36 = replacementText[v35];
          if ((v36 & 0xFFFFFFDF) != 0x55
            || (__int128 v37 = u_unescapeAt((UNESCAPE_CHAR_AT)sub_18096A3A0, &offset, v9, (void *)replacementText), v37 == -1))
          {
            ++v15;
            ++offset;
            goto LABEL_144;
          }

          if (v37 >= 0x10000)
          {
            v60 = v15 + 1LL;
            v15 += 2;
            goto LABEL_144;
          }
        }

        else if ((int)v18 > v15)
        {
          v17[v15] = v34;
        }

        ++v15;
        goto LABEL_144;
      }

      if ((int)v35 >= v9)
      {
        if (!u_isdigit(-1))
        {
LABEL_147:
          v73 = U_REGEX_INVALID_CAPTURE_GROUP_NAME;
LABEL_148:
          int v17 = v77;
          *status = v73;
          goto LABEL_149;
        }

  if (*(_DWORD *)regexp != 1919252592) {
    goto LABEL_30;
  }
  uint64_t v12 = *((void *)regexp + 6);
  if (!v12 && !*((_BYTE *)regexp + 60))
  {
    LODWORD(v11) = 0;
    unint64_t v13 = U_REGEX_INVALID_STATE;
    goto LABEL_31;
  }

  LODWORD(v11) = 0;
  unint64_t v13 = U_ILLEGAL_ARGUMENT_ERROR;
  if (!destBuf || !destCapacity) {
    goto LABEL_31;
  }
  LODWORD(v11) = 0;
  uint64_t v14 = *destBuf;
  uint64_t v15 = *destCapacity;
  int v16 = (int)v15 > 0 && v14 == 0LL;
  if (v16 || (v15 & 0x80000000) != 0) {
    goto LABEL_31;
  }
  int v17 = *((void *)regexp + 5);
  if (v12)
  {
    uint64_t v18 = 144LL;
    if (!*(_BYTE *)(v17 + 130)) {
      uint64_t v18 = 152LL;
    }
    uint64_t v19 = *(void *)(v17 + v18);
    if (v19 == -1)
    {
      LODWORD(v19) = 0;
    }

    else
    {
      unsigned int v20 = *(UText **)(v17 + 32);
      if (v20->pFuncs->mapNativeIndexToUTF16)
      {
        statusa = U_ZERO_ERROR;
        LODWORD(v19) = utext_extract(v20, 0LL, v19, 0LL, 0, &statusa);
      }
    }

    unsigned int v22 = *((_DWORD *)regexp + 14);
    unint64_t v11 = (v22 - v19);
    if (v22 != (_DWORD)v19)
    {
      uint64_t v23 = 0LL;
      UErrorCode v24 = *((void *)regexp + 6) + 2LL * (int)v19;
      do
      {
        if (v22 == -1 && !*(_WORD *)(v24 + 2 * v23))
        {
          *((_DWORD *)regexp + 14) = v19 + v23;
          LODWORD(v11) = v23;
          break;
        }

        if (v23 >= v15)
        {
          if (v22 >= 1)
          {
            LODWORD(v11) = v22 - v19;
            break;
          }
        }

        else
        {
          v14[v23] = *(_WORD *)(v24 + 2 * v23);
        }

        ++v23;
      }

      while (v11 != v23);
    }
  }

  else
  {
    if (*(_BYTE *)(v17 + 130))
    {
      unint64_t v21 = *(void *)(v17 + 144);
    }

    else if (*(void *)(v17 + 152) == -1LL)
    {
      unint64_t v21 = 0LL;
    }

    else
    {
      unint64_t v21 = *(void *)(v17 + 152);
    }

    LODWORD(v11) = utext_extract(*(UText **)(v17 + 32), v21, *(void *)(v17 + 48), *destBuf, *destCapacity, status);
  }

  if ((int)v11 < (int)v15)
  {
    v14[(int)v11] = 0;
    *destBuf += (int)v11;
    unsigned int v25 = *destCapacity - v11;
LABEL_59:
    *destCapacity = v25;
    goto LABEL_60;
  }

  if ((_DWORD)v11 == (_DWORD)v15) {
    int v26 = U_STRING_NOT_TERMINATED_WARNING;
  }
  else {
    int v26 = U_BUFFER_OVERFLOW_ERROR;
  }
  *status = v26;
  if (*destBuf)
  {
    unsigned int v25 = 0;
    *destBuf += v15;
    goto LABEL_59;
  }

  if ((result & 0xFC00) == 0xDC00 && v9 != *((unsigned __int16 **)this + 49))
  {
    uint64_t v12 = *(v9 - 1);
    uint64_t v10 = v9 - 1;
    unint64_t v11 = v12;
    if ((v12 & 0xFC00) == 0xD800)
    {
      *((void *)this + 50) = v10;
      return (result + (v11 << 10) - 56613888);
    }
  }

  return result;
}

void sub_1807BED74(uint64_t a1, uint64_t a2, int *a3)
{
  if (!a2 && *a3 <= 0) {
    *a3 = 7;
  }
  sub_1807BE718(a1, a3);
  int v7 = (void *)icu::UMemory::operator new((icu::UMemory *)0x10, v6);
  int v8 = v7;
  if (v7)
  {
    uint64_t v9 = 0LL;
    *int v7 = off_18970AF28;
    v7[1] = a2;
    if (a2) {
      goto LABEL_10;
    }
    int v10 = *a3;
  }

  else
  {
    int v10 = *a3;
    uint64_t v9 = a2;
  }

  if (v10 <= 0) {
    *a3 = 7;
  }
LABEL_10:
  umtx_lock((icu::UMutex *)&unk_18C534BC0);
  unint64_t v11 = *(icu::UVector **)(a1 + 8);
  if (*((void *)v11 + 3)) {
    icu::UVector::adoptElement(v11, v8, (UErrorCode *)a3);
  }
  else {
    icu::UVector::addElement(v11, v8, (UErrorCode *)a3);
  }
  umtx_unlock((std::mutex **)&unk_18C534BC0);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
}

void sub_1807BEE74(icu::UObject *this)
{
  *(void *)this = off_18970AF28;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::UObject::~UObject(this);
}

void sub_1807BEEB4(icu::UObject *this)
{
  *(void *)this = off_18970AF28;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::UObject::~UObject(this);
  icu::UMemory::operator delete(v3);
}

uint64_t sub_1807BEEF8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24LL))(*(void *)(a1 + 8));
}

uint64_t sub_1807BEF18(uint64_t a1, UText *ut, int a3, int a4, uint64_t a5, uint64_t a6, UErrorCode *a7)
{
  int64_t NativeIndex = utext_getNativeIndex(ut);
  while (1)
  {
    uint64_t v13 = utext_current32(ut);
    int64_t v14 = utext_getNativeIndex(ut);
    if ((int)v14 >= a4
      || !(*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 8) + 32LL))(*(void *)(a1 + 8), v13))
    {
      break;
    }

    utext_next32(ut);
  }

  uint64_t v15 = *(int *)(a5 + 8);
  uint64_t v16 = (v14 - NativeIndex + 1);
  int v17 = v15 + v16;
  icu::UVector32::setSize((icu::UVector32 *)a5, v16 + 2 * v15);
  uint64_t v18 = (*(uint64_t (**)(void, UText *, int64_t, int64_t, uint64_t, uint64_t, UErrorCode *))(**(void **)(a1 + 8) + 40LL))( *(void *)(a1 + 8),  ut,  NativeIndex,  v14,  *(void *)(a5 + 24) + 4 * v15,  v16,  a7);
  uint64_t v19 = v18;
  icu::UVector32::setSize((icu::UVector32 *)a5, v18 + v15);
  utext_setNativeIndex(ut, (int)v14);
  return v19;
}

char *icu::BreakIterator::buildInstance(char **this, const icu::Locale *a2, char *a3, UErrorCode *a4)
{
  uint64_t v4 = 0LL;
  uint64_t v49 = *MEMORY[0x1895F89C0];
  __int128 v47 = 0u;
  __int128 v48 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  *(_OWORD *)__int128 v33 = 0u;
  __int128 v34 = 0u;
  *(void *)char v27 = 0LL;
  memset(&__src[1], 0, 56);
  __src[0] = (char *)&__src[1] + 5;
  LODWORD(__src[1]) = 40;
  uint64_t v31 = 0LL;
  memset(v30, 0, sizeof(v30));
  uint64_t v29 = 0LL;
  memset(v28, 0, sizeof(v28));
  if (*(int *)a3 <= 0)
  {
    int v8 = v30;
    ures_initStackObject((uint64_t)v30);
    uint64_t v9 = v28;
    ures_initStackObject((uint64_t)v28);
    uint64_t v10 = ures_openNoDefault("icudt74l-brkitr", this[5], (int *)a3);
    uint64_t v11 = v10;
    if (*(int *)a3 <= 0)
    {
      int v8 = (_BYTE *)ures_getByKeyWithFallback(v10, "boundaries", (uint64_t)v30, (UErrorCode *)a3);
      uint64_t v9 = (_OWORD *)ures_getByKeyWithFallback((uint64_t)v8, (char *)a2, (uint64_t)v28, (UErrorCode *)a3);
      String = ures_getString((uint64_t)v9, (int *)v27, (int *)a3);
      int v15 = *(_DWORD *)a3;
      if (*(_DWORD *)v27 < 0x100u)
      {
        if (v15 <= 0)
        {
          unsigned int v20 = String;
          if (String)
          {
            LocaleInternal = (const char *)ures_getLocaleInternal((uint64_t)v9, (int *)a3);
            icu::CharString::append((icu::CharString *)__src, LocaleInternal, -1, (UErrorCode *)a3);
            unsigned int v22 = u_strchr(v20, 0x2Eu);
            if (v22)
            {
              uint64_t v23 = (char *)v22 - (char *)v20;
              unint64_t v24 = (unint64_t)((char *)v22 - (char *)v20) >> 1;
              u_UCharsToChars(v22 + 1, &v27[4], 4);
              u_UCharsToChars(v20, v33, v24);
              uint64_t v25 = (int)(v23 >> 1);
            }

            else
            {
              uint64_t v25 = 0LL;
            }

            v33[v25] = 0;
          }
        }
      }

      else
      {
        *(_DWORD *)char v27 = 0;
        if (v15 <= 0) {
          *(_DWORD *)a3 = 15;
        }
      }
    }

    ures_close((uint64_t)v8);
    ures_close((uint64_t)v9);
    uint64_t v12 = udata_open("icudt74l-brkitr", &v27[4], v33, (UErrorCode *)a3);
    if (*(int *)a3 >= 1)
    {
      ures_close(v11);
LABEL_14:
      uint64_t v4 = 0LL;
      goto LABEL_15;
    }

    uint64_t v16 = v12;
    uint64_t v4 = (char *)icu::UMemory::operator new((icu::UMemory *)0x310, v13);
    if (v4)
    {
      char v17 = strstr((const char *)a2, "phrase") != 0LL;
      icu::RuleBasedBreakIterator::RuleBasedBreakIterator( (icu::RuleBasedBreakIterator *)v4,  (uint64_t)v16,  v17,  (UErrorCode *)a3);
      if (*(int *)a3 <= 0)
      {
        v26[0] = v4 + 169;
        v26[1] = v4 + 12;
        LocaleByType = (const char *)ures_getLocaleByType(v11, 1, (int *)a3);
        icu::LocaleBased::setLocaleIDs((char *)v26, LocaleByType, __src[0]);
        strncpy(v4 + 326, this[5], 0x9DuLL);
        v4[482] = 0;
      }
    }

    ures_close(v11);
    if (v4 && *(int *)a3 >= 1)
    {
      (*(void (**)(char *))(*(void *)v4 + 8LL))(v4);
      goto LABEL_14;
    }

    if (!v4)
    {
      udata_close(v16);
      uint64_t v4 = 0LL;
      *(_DWORD *)a3 = 7;
    }
  }

LABEL_15:
  if (BYTE4(__src[1])) {
    uprv_free(__src[0]);
  }
  return v4;
}

  sub_180820C94(0xAu, (uint64_t)sub_1807D2EB0);
}

  if (a6 >= 1)
  {
    *((_BYTE *)__dst + (int)v13) = 95;
    memcpy((char *)__dst + (int)v13 + 1, a5, a6);
    unint64_t v13 = (v13 + 1 + a6);
LABEL_17:
    uint64_t v23 = 1;
    goto LABEL_39;
  }

  if (a9)
  {
    LODWORD(v28) = 0;
    __src = (uint64_t *)uloc_getCountry(a9, (char *)&v28, 4, a11);
    uint64_t v11 = *a11;
    if (*a11 <= 0)
    {
      uint64_t v25 = (int)__src;
      if ((int)__src <= 3)
      {
        if ((int)__src >= 1)
        {
          *((_BYTE *)__dst + (int)v13) = 95;
          memcpy((char *)__dst + (int)v13 + 1, &v28, __src);
          unint64_t v13 = (v25 + v13 + 1);
          goto LABEL_17;
        }

        goto LABEL_38;
      }
    }

    dword_18C534DCC = v26;
    icu::umtx_initImplPostInit(&dword_18C534DC8);
    goto LABEL_16;
  }

  if (dword_18C534DCC >= 1) {
    int v26 = dword_18C534DCC;
  }
LABEL_16:
  int v8 = (uint64_t *)qword_18C534DC0;
  if (!qword_18C534DC0) {
    return 0LL;
  }
  umtx_lock(0LL);
  uint64_t v9 = (uint64_t *)uhash_get(*v8, (uint64_t)this);
  umtx_unlock(0LL);
  if (!v9)
  {
    uint64_t v11 = (int32x2_t *)icu::UMemory::operator new((icu::UMemory *)0x58, v10);
    uint64_t v9 = (uint64_t *)v11;
    if (v11)
    {
      *uint64_t v11 = 0LL;
      if (v26 <= U_ZERO_ERROR)
      {
        uint64_t v12 = v11 + 1;
        uhash_init(v11 + 1, (uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0LL, (int *)&v26);
        if (v26 <= U_ZERO_ERROR)
        {
          *uint64_t v9 = (uint64_t)v12;
          uhash_setKeyDeleter((uint64_t)(v9 + 1), (uint64_t)uprv_deleteUObject);
          if (v26 <= U_ZERO_ERROR)
          {
            memset(&v28[1], 0, 48);
            uint64_t v29 = 0LL;
            v28[0] = (char *)&v28[1] + 5;
            LODWORD(v28[1]) = 40;
            icu::CharString::appendInvariantChars((icu::CharString *)v28, this, &v26);
            if ((_DWORD)v29) {
              unint64_t v13 = (const char *)v28[0];
            }
            else {
              unint64_t v13 = 0LL;
            }
            int64_t v14 = (void **)ures_openAvailableLocales(v13, (int *)&v26);
            int v15 = uenum_unext((uint64_t)v14, 0LL, (int *)&v26);
            if (v15)
            {
              uint64_t v16 = v15;
              do
              {
                icu::UnicodeString::UnicodeString((uint64_t)v27, v16);
                char v17 = *v9;
                uint64_t v19 = (icu::UnicodeString *)icu::UMemory::operator new((icu::UMemory *)0x40, v18);
                unsigned int v20 = (uint64_t)v19;
                if (v19) {
                  icu::UnicodeString::UnicodeString(v19, v27);
                }
                uhash_put(v17, v20, (uint64_t)v9, (int *)&v26);
                icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v27);
                uint64_t v16 = uenum_unext((uint64_t)v14, 0LL, (int *)&v26);
              }

              while (v16);
            }

            unsigned int v22 = v26;
            if (v26 < U_ILLEGAL_ARGUMENT_ERROR)
            {
              umtx_lock(0LL);
              uint64_t v23 = uhash_get(*v8, (uint64_t)this);
              if (v23)
              {
                unint64_t v24 = (uint64_t *)v23;
                umtx_unlock(0LL);
                if (*v9) {
                  uhash_close((_BYTE *)*v9);
                }
                icu::UMemory::operator delete(v9);
                uint64_t v9 = v24;
              }

              else
              {
                sub_1807C33C4(v8, (UChar **)this, (uint64_t)v9, (int *)&v26);
                umtx_unlock(0LL);
              }
            }

            else
            {
              if (*v9) {
                uhash_close((_BYTE *)*v9);
              }
              icu::UMemory::operator delete(v9);
            }

            if (v14) {
              uenum_close(v14);
            }
            if (BYTE4(v28[1])) {
              uprv_free(v28[0]);
            }
            if (v22 > U_ZERO_ERROR) {
              return 0LL;
            }
          }
        }
      }
    }
  }

  return v9;
}

  if (v7 >= a2)
  {
    if (*((_DWORD *)this + *((int *)this + 4) + 8) > a2)
    {
      do
      {
        icu::RuleBasedBreakIterator::BreakCache::populatePreceding((icu::RuleBasedBreakIterator::BreakCache *)this, a3);
        uint64_t v16 = *((int *)this + 4);
        char v17 = (char *)this + 4 * v16;
        uint64_t v19 = *((_DWORD *)v17 + 8);
        uint64_t v18 = (int *)(v17 + 32);
      }

      while (v19 > a2);
      *((_DWORD *)this + 7) = v16;
      unsigned int v20 = *v18;
      *((_DWORD *)this + 6) = *v18;
      while (v20 < a2)
      {
        sub_1807F6540((uint64_t)this);
        unsigned int v20 = *((_DWORD *)this + 6);
      }

      if (v20 > a2) {
        icu::RuleBasedBreakIterator::BreakCache::previous(this, a3);
      }
    }
  }

  else
  {
    while (1)
    {
      uint64_t v12 = *((int *)this + 5);
      unint64_t v13 = (char *)this + 4 * v12;
      int v15 = *((_DWORD *)v13 + 8);
      int64_t v14 = (int *)(v13 + 32);
      if (v15 >= a2) {
        break;
      }
    }

    *((_DWORD *)this + 7) = v12;
    unint64_t v21 = *v14;
    *((_DWORD *)this + 6) = *v14;
    while (v21 > a2)
    {
      icu::RuleBasedBreakIterator::BreakCache::previous(this, a3);
      unint64_t v21 = *((_DWORD *)this + 6);
    }
  }

  return 1LL;
}

    if ((v18 & 3) == 0)
    {
      *uint64_t v11 = v12;
      goto LABEL_49;
    }

    v60 = v6;
    v61 = v13;
    v58 = v11;
    unsigned int v20 = a1[4 * v4 + 128] & 1;
    uint64_t v19 = v14 == v12;
    if (*(_DWORD *)(v16 + v15 + 16) != v20) {
      unsigned int v20 = *(_DWORD *)(v16 + v15 + 16);
    }
    goto LABEL_19;
  }

  if ((v18 & 2) == 0) {
    goto LABEL_15;
  }
  v60 = v6;
  v61 = v13;
  v58 = v11;
  uint64_t v19 = 1;
  LOBYTE(v20) = 1;
LABEL_19:
  v59 = *(void *)(*(void *)a1 + 128LL);
  *(_BYTE *)(v7 + *(int *)(v16 + v15)) = v20;
  *(_BYTE *)(*(void *)(*(void *)a1 + 128LL) + a2) = v20;
  v57 = v20;
  sub_180813918((uint64_t)a1, v12, *(_DWORD *)(v16 + v15), v20);
  if (v19)
  {
    LODWORD(v27) = *v61;
    if (v27 >= (unsigned __int16)v12)
    {
      __int128 v28 = v12;
      unint64_t v6 = v60;
    }

    else
    {
      __int128 v28 = v12;
      unint64_t v6 = v60;
      while (*(_DWORD *)(*((void *)a1 + 61) + 24LL * (v28 - 1)) == *(_DWORD *)(v16 + v15))
      {
        if (v27 >= --v28)
        {
          __int128 v28 = *v61;
          break;
        }
      }
    }

    int v7 = v59;
    __int128 v35 = v57;
    *v58 = v28;
  }

  else
  {
    *(_DWORD *)(v16 + v15 + 4) = -a2;
    char v27 = *v61;
    if ((int)v12 > (int)v27)
    {
      uint64_t v29 = *((void *)a1 + 61);
      __int128 v30 = *(_DWORD *)(v16 + v15);
      uint64_t v31 = v12;
      do
      {
        *(_DWORD *)(v29 + 24LL * v31 + 4) = 0;
      }

      while (v31 > v27);
    }

    __int128 v32 = *v58;
    unint64_t v6 = v60;
    if ((int)v12 + 1 < (int)v32)
    {
      __int128 v33 = (v12 + 1);
      __int128 v34 = (int *)(*((void *)a1 + 61) + 24 * v33 + 4);
      do
      {
        if (*(v34 - 1) >= a2) {
          break;
        }
        if (*v34 >= 1) {
          *__int128 v34 = 0;
        }
        ++v33;
        v34 += 6;
      }

      while (v33 < v32);
    }

    int v7 = v59;
    __int128 v35 = v57;
  }

  if (v35 != 10)
  {
    __int128 v36 = &a1[4 * v4];
    *((_BYTE *)v36 + 514) = 10;
    v36[129] = v35;
    void *v6 = a2;
    __int128 v37 = *(void *)(*(void *)a1 + 136LL);
    __int128 v38 = *(char *)(v37 + v8);
    if (v38 < 0)
    {
      *((_BYTE *)v36 + 513) = v38 & 1;
      if ((int)v12 > (int)v27)
      {
        __int128 v39 = 1 << (v38 & 1);
        __int128 v40 = v27;
        __int128 v41 = (_WORD *)(*((void *)a1 + 61) + 24LL * v27 + 12);
        do
        {
          *v41 |= v39;
          v41 += 12;
          ++v40;
        }

        while (v40 < v12);
      }

      *(_BYTE *)(v37 + v8) &= ~0x80u;
      __int128 v37 = *(void *)(*(void *)a1 + 136LL);
    }

    __int128 v42 = *(int *)(*((void *)a1 + 61) + v15);
    *(_BYTE *)(v37 + v42) &= ~0x80u;
    return 1LL;
  }

  sub_1808162FC(s, v16, &v31, &v30);
  unint64_t v21 = sub_180816364(v31, v30, a7, a9);
  *(void *)(v20 + 8) = v21;
  if (v21)
  {
    *(_DWORD *)(v20 + 56) = 2 * (a10 != 0);
    *(int8x8_t *)(v20 + 60) = vand_s8((int8x8_t)vdup_n_s32(a11), (int8x8_t)0xFFFFFF1BFFFFFFE3LL);
    unsigned int v22 = a5 <= (int)v16 ? v16 : a5;
    sub_1808163C0(v20, s, v16, v22, a12);
    if (*a12 <= 0)
    {
      uint64_t v23 = *(void *)v20;
      if (*(void *)v20 || (v23 = (uint64_t)ubidi_openSized(0, 0, a12), *(void *)unsigned int v20 = v23, *a12 <= 0))
      {
        *(void *)(v20 + 24) = a4;
        *(_DWORD *)(v20 + 40) = a5;
        *(void *)(v20 + 48) = &v29;
        unint64_t v24 = *(void *)(v20 + 8);
        uint64_t v25 = *(unsigned int (**)(uint64_t, int *))(v24 + 32);
        if (v25)
        {
          int v26 = 0;
          char v27 = (unsigned int (**)(uint64_t, int *))(v24 + 40);
          do
          {
            if (*a12 > 0) {
              break;
            }
            if (v25(v20, a12))
            {
              sub_1808163C0( v20,  *(const UChar **)(v20 + 24),  **(unsigned int **)(v20 + 48),  **(_DWORD **)(v20 + 48),  a12);
              int v26 = 1;
            }

            __int128 v28 = *v27++;
            uint64_t v25 = v28;
          }

          while (v28);
          ubidi_setInverse(*(void *)v20, 0);
          if (v26) {
            goto LABEL_20;
          }
        }

        else
        {
          ubidi_setInverse(v23, 0);
        }

        if (*a12 <= 0)
        {
          if (a5 >= (int)v16)
          {
            u_strncpy(a4, s, v16);
            uint64_t v29 = v16;
          }

          else
          {
            *a12 = 15;
          }
        }
      }
    }
  }

  if (a2)
  {
    unint64_t v13 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    int64_t v14 = v34;
    int v15 = v13 - a2 + v34;
    uint64_t v16 = v15 <= v11;
    else {
      char v17 = v11 - (v13 - a2);
    }
    if (v16) {
      uint64_t v18 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    }
    else {
      uint64_t v18 = a2;
    }
    __int128 v35 = v17;
    if (v17 >= v34 && v18)
    {
      uint64_t v19 = 0LL;
      uint64_t v5 = v18;
      goto LABEL_30;
    }
  }

  else
  {
    uint64_t v18 = 0LL;
    int64_t v14 = v34;
  }

  unsigned int v20 = uprv_malloc(v14);
  uint64_t v5 = (uint64_t)v20;
  if (!v20)
  {
    uint64_t v12 = 7;
    goto LABEL_12;
  }

  if (v8 != &v35) {
    *a4 = -126;
  }
  int64_t v14 = v34;
  *int v8 = v34;
  uint64_t v19 = v20;
LABEL_30:
  bzero((void *)v5, v14);
  memcpy((void *)v5, a1, 0x120uLL);
  *(_WORD *)(v5 + 61) = 0;
  if ((char *)a1[5] == (char *)(a1 + 17))
  {
    *(void *)(v5 + 40) = v5 + 136;
  }

  else
  {
    unint64_t v21 = uprv_malloc(0x40uLL);
    *(void *)(v5 + 40) = v21;
    if (!v21)
    {
LABEL_40:
      uprv_free(v19);
      return 0LL;
    }

    unsigned int v22 = (__int128 *)a1[5];
    uint64_t v23 = v22[3];
    uint64_t v25 = *v22;
    unint64_t v24 = v22[1];
    v21[2] = v22[2];
    v21[3] = v23;
    *unint64_t v21 = v25;
    v21[1] = v24;
  }

  int v26 = *(uint64_t (**)(void, void, void, void))(*((void *)a1[6] + 4) + 112LL);
  if (v26 && (uint64_t v5 = v26(a1, v5, v8, a4)) == 0 || *a4 >= 1)
  {
    if (v19)
    {
      char v27 = (void *)v19[5];
      if (v27 != v19 + 17) {
        uprv_free(v27);
      }
    }

    goto LABEL_40;
  }

  __int128 v28 = (uint64_t)a1[6];
  if (*(_BYTE *)(v28 + 25)) {
    sub_180827BF4(v28);
  }
  if (v5 == v18) {
    *(_BYTE *)(v18 + 61) = 1;
  }
  *((void *)&v29[0] + 1) = v5;
  *((void *)&v31[0] + 1) = v5;
  __int128 v33 = 0;
  ((void (*)(void, _OWORD *, void, void, uint64_t, _DWORD *))a1[1])(a1[4], v31, 0LL, 0LL, 5LL, &v33);
  __int128 v33 = 0;
  (*a1)(a1[3], v29, 0LL, 0LL, 0LL, 5LL, &v33);
  return v5;
}

    int64_t v14 = 2;
    goto LABEL_16;
  }

  if (__dst[1] != 114 && __dst[1] != 111 || __dst[2] != 95 && __dst[2] || v11 >= 2) {
    goto LABEL_15;
  }
  if (v11 == 1)
  {
    int v15 = "icu-internal-25546";
  }

  else
  {
    *((_DWORD *)v7 + 27) = 0;
    int v15 = "ibm-949";
  }

  if (v8)
  {
    sub_18082835C((unsigned __int8 *)v15, a3);
    uprv_free(*(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0LL;
    return;
  }

  uint64_t v19 = ucnv_open((unsigned __int8 *)v15, a3);
  *((void *)v7 + 10) = v19;
  if (v11 == 1)
  {
    strcpy((char *)v7 + 113, "ISO_2022,locale=ko,version=1");
    **(_DWORD **)(a1 + 40) = **((_DWORD **)v19 + 5);
    uint64_t v19 = (_OWORD *)*((void *)v7 + 10);
    *(_BYTE *)(a1 + 89) = *((_BYTE *)v19 + 89);
  }

  else
  {
    strcpy((char *)v7 + 113, "ISO_2022,locale=ko,version=0");
  }

  unsigned int v20 = *((_DWORD *)v7 + 27);
  if (v20 == 1)
  {
    *((void *)v19 + 9) = 0LL;
    *((_BYTE *)v19 + 64) = 0;
  }

  if (!*(_BYTE *)(a1 + 91))
  {
    *(_BYTE *)(a1 + 91) = 4;
    *(_DWORD *)(a1 + 104) = 1126769691;
  }

  if (v20 == 1) {
    *((void *)v19 + 10) = 1LL;
  }
  char v17 = &unk_189711CA0;
  *(void *)(a1 + 48) = &unk_189711CA0;
  strcpy((char *)v7 + 143, "ko");
LABEL_50:
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(v17[2] + 71LL);
  if (*(int *)a3 > 0 || *(_BYTE *)(a2 + 8)) {
LABEL_52:
  }
    sub_18082469C(a1);
}

  int v7 = v11;
  if (!a4) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v6 & 2) != 0) {
    uint64_t v12 = a1 + 10;
  }
  else {
    uint64_t v12 = *(void *)(a1 + 24);
  }
  int64_t v14 = (unsigned __int16 *)(a4 + 2LL * a5);
  if (a6 < 0) {
    a6 = u_strlen(&v14[a5]);
  }
  if (v7 >= a6) {
    int v15 = a6;
  }
  else {
    int v15 = v7;
  }
  if (v7 < a6) {
    LOBYTE(v13) = -1;
  }
  else {
    LOBYTE(v13) = 1;
  }
  if (v7 == a6) {
    LOBYTE(v13) = 0;
  }
  if (v15 >= 1)
  {
    uint64_t v16 = (unsigned __int16 *)(v12 + 2LL * v8);
    if (v16 != v14)
    {
      char v17 = v15 + 1;
      while (1)
      {
        uint64_t v18 = *v16 - *v14;
        if (v18) {
          break;
        }
        ++v14;
        ++v16;
        if (--v17 <= 1) {
          return (char)v13;
        }
      }

      unint64_t v13 = (v18 >> 15) | 1;
    }
  }

  return (char)v13;
}

  uint64_t v12 = 0LL;
LABEL_16:
  length = v12;
LABEL_17:
  if ((int)length <= a5)
  {
    if ((v9 & 2) != 0) {
      unint64_t v13 = a1 + 10;
    }
    else {
      unint64_t v13 = *(void *)(a1 + 24);
    }
    u_UCharsToChars((const UChar *)(v13 + 2LL * a2), cs, length);
  }

  int64_t v14 = 0;
  return u_terminateChars((uint64_t)cs, a5, length, &v14);
}

  int v8 = a1 + 10;
LABEL_16:
  uint64_t v10 = u_memrchr((const UChar *)(v8 + 2LL * a3), a2, count);
  if (v10) {
    return (((unint64_t)v10 - v8) >> 1);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

  icu::UnicodeString::~UnicodeString((void *)v5, (icu::UnicodeString *)&v29);
  return v4;
}

  int v8 = result;
  if ((a4 & 0x8000000000000000LL) == 0)
  {
LABEL_10:
    goto LABEL_17;
  }

  __n128 result = 0LL;
  *a6 = 1;
  return result;
}

  uint64_t v18 = 0LL;
  unint64_t v13 = *v12;
  do
  {
    if (byte_180A378BC[v18] == v13)
    {
      if (++v12 == (unsigned __int8 *)v6)
      {
        *a5 = a3;
        return a1[1];
      }

      goto LABEL_15;
    }

    ++v18;
  }

  while (v18 != 6);
  *(void *)v78 = v12;
  if ((v10 & 8) == 0 && v12 != a2) {
    return a1[2];
  }
LABEL_5:
  int64_t v14 = a3;
  if (v13 == 45 || v13 == 43)
  {
    int v15 = v13 == 45;
    *(void *)v78 = v12 + 1;
    uint64_t v16 = 1LL;
LABEL_9:
    for (uint64_t i = 0LL; i != 6; ++i)
    {
      if (byte_180A378BC[i] == v12[v16])
      {
        if (++v16 == &a2[a3] - v12) {
          return a1[2];
        }
        goto LABEL_9;
      }
    }

    if ((v10 & 0x20) == 0 && v16 != 1) {
      return a1[2];
    }
    v12 += v16;
    *(void *)v78 = v12;
  }

  else
  {
    int v15 = 0;
  }

  unsigned int v20 = (unsigned __int8 *)*((void *)a1 + 3);
  if (!v20)
  {
    unint64_t v24 = (unsigned __int8 *)*((void *)a1 + 4);
    if (!v24)
    {
      unint64_t v21 = *v12;
      goto LABEL_58;
    }

    if ((v10 & 0x40) == 0)
    {
      unint64_t v21 = *v12;
      goto LABEL_46;
    }

  if ((_DWORD)a2 == 5)
  {
    if (v10)
    {
      unsigned int v22 = v7;
      uint64_t v23 = 5LL;
      return (double *)icu::Calendar::roll(v22, v23, a3, a4);
    }

    unint64_t v24 = uprv_fmod(v7[29] - v11 + (double)a3 * 86400000.0, (double)v12 * 86400000.0);
    uint64_t v25 = -0.0;
    if (v24 < 0.0) {
      uint64_t v25 = (double)v12 * 86400000.0;
    }
    int v26 = v11 + v24 + v25;
    return (double *)icu::Calendar::setTimeInMillis((uint64_t)v7, v26, a4);
  }

  if ((_DWORD)a2 == 4)
  {
    if (v10)
    {
      unsigned int v22 = v7;
      uint64_t v23 = 4LL;
      return (double *)icu::Calendar::roll(v22, v23, a3, a4);
    }

    char v27 = *((_DWORD *)v7 + 10);
    FirstDayOfWeek = icu::Calendar::getFirstDayOfWeek((icu::Calendar *)v7);
    if (v27 >= FirstDayOfWeek) {
      uint64_t v29 = v27 - FirstDayOfWeek;
    }
    else {
      uint64_t v29 = v27 - FirstDayOfWeek + 7;
    }
    __int128 v30 = (v29 - v9 + 1) % 7;
    if (v30 >= 0) {
      uint64_t v31 = (v29 - v9 + 1) % 7;
    }
    else {
      uint64_t v31 = v30 + 7;
    }
    else {
      __int128 v32 = 8;
    }
    __int128 v33 = v32 - v31;
    __int128 v34 = 7 * ((v12 - v9 + v29) / 7) - (v29 - v9) - v33 + 7;
    __int128 v35 = v9 - a3 + 8 * a3 - (v9 - a3 + 8 * a3 - v33) / v34 * v34 + (v34 & (((v9 - a3 + 8 * a3 - v33) % v34) >> 31));
    if (v35 <= 1) {
      __int128 v35 = 1;
    }
    if (v35 >= v12) {
      __int128 v35 = v12;
    }
    int v26 = v11 + (double)(v35 - 1) * 86400000.0;
    return (double *)icu::Calendar::setTimeInMillis((uint64_t)v7, v26, a4);
  }

  if ((_DWORD)a2 != 3)
  {
    unsigned int v22 = v7;
    uint64_t v23 = a2;
    return (double *)icu::Calendar::roll(v22, v23, a3, a4);
  }

  uint64_t v19 = icu::Calendar::get(v7, 3u, a4);
  unsigned int v20 = icu::Calendar::get(v7, 0x11u, a4);
  unint64_t v21 = *((_DWORD *)v7 + 9);
  if ((*(unsigned int (**)(double *))(*(void *)v7 + 264LL))(v7))
  {
    if (v19 == 1) {
      v21 -= (*(uint64_t (**)(double *, void))(*(void *)v7 + 320LL))(v7, (v20 - 1));
    }
  }

  else if (v19 >= 52)
  {
    v21 += (*(uint64_t (**)(double *, uint64_t))(*(void *)v7 + 320LL))(v7, v20);
  }

  __int128 v36 = v19 + a3;
  if ((v36 - 53) <= 0xFFFFFFCB)
  {
    __int128 v37 = (*(uint64_t (**)(double *, uint64_t))(*(void *)v7 + 320LL))(v7, v20);
    __int128 v38 = *((_DWORD *)v7 + 10);
    __int128 v39 = (int)(v37 + v38 - (v21 + icu::Calendar::getFirstDayOfWeek((icu::Calendar *)v7))) % 7;
    if (v39 >= 0) {
      __int128 v40 = v39;
    }
    else {
      __int128 v40 = v39 + 7;
    }
    else {
      __int128 v41 = v37;
    }
    __int128 v42 = icu::Calendar::weekNumber((icu::Calendar *)v7, v41, v41, v40 + 1);
    __int128 v36 = (v36 + v42 - 1) % v42 + 1;
  }

  icu::Calendar::set(v7, 3u, v36);
  return (double *)icu::Calendar::set(v7, 0x11u, v20);
}

    int64_t v14 = v4 + 1;
    int v15 = v14
        - (*(uint64_t (**)(icu::IslamicUmalquraCalendar *, uint64_t, uint64_t))(*(void *)this + 448LL))( this,  v5,  v8);
    uint64_t v16 = (*(uint64_t (**)(icu::IslamicUmalquraCalendar *, uint64_t, void))(*(void *)this + 448LL))( this,  v5,  0LL);
    *((_BYTE *)this + 108) = 1;
    *((_DWORD *)this + 3) = 0;
    *((_DWORD *)this + 4) = v5;
    *(void *)&__n128 result = 0x100000001LL;
    *(void *)((char *)this + 132) = 0x100000001LL;
    *(_WORD *)((char *)this + 109) = 257;
    *((_DWORD *)this + 22) = v5;
    *((_DWORD *)this + 52) = 1;
    *((_BYTE *)this + 127) = 1;
    *((_DWORD *)this + 5) = v8;
    *((_DWORD *)this + 35) = 1;
    *((_DWORD *)this + 26) = v8;
    *((_DWORD *)this + 56) = 1;
    *((_BYTE *)this + 131) = 1;
    *(_WORD *)((char *)this + 113) = 257;
    *((_DWORD *)this + 8) = v15;
    *((_DWORD *)this + 9) = v14 - v16;
    *((void *)this + 19) = 0x100000001LL;
  }

  return result;
}

  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v25 = U_ZERO_ERROR;
    Double = icu::Formattable::getDouble(a6, &v25);
    uint64_t v23 = (*(double (**)(void *, double, double))(*a1 + 88LL))(a1, Double, a7);
    icu::Formattable::setDouble(a6, v23);
    return 1LL;
  }

  else
  {
    icu::Formattable::setLong(a6, 0);
    return 0LL;
  }

    unint64_t v13 = *(_DWORD *)(a1 + 1212);
    goto LABEL_16;
  }

  ures_getByKey(a3, "trans", (uint64_t)v43, a5);
  *(void *)(a1 + 88) = ures_getIntVector((uint64_t)v43, (int *)&v36, a5);
  int v15 = v36;
  *(_WORD *)(a1 + 74) = v36;
  if (*a5 == 2)
  {
    uint64_t v16 = 0;
    *(void *)(a1 + 88) = 0LL;
    *(_WORD *)(a1 + 74) = 0;
LABEL_20:
    *a5 = v16;
    goto LABEL_21;
  }

  if (*a5 <= 0 && v15 >= 0x8000)
  {
    uint64_t v16 = 3;
    goto LABEL_20;
  }

    SubMessage = icu::PluralFormat::findSubMessage( (icu::PluralFormat *)((char *)this + 552),  0LL,  (uint64_t)this + 696,  (const icu::PluralFormat::PluralSelector *)v40,  (int *)a6,  a3,  v18);
    uint64_t v16 = (void *)*(unsigned int *)a6;
    if ((int)v16 <= 0)
    {
      LODWORD(v20) = SubMessage;
      unint64_t v21 = *((void *)this + 80);
      unsigned int v22 = *(_DWORD *)(v21 + 16LL * SubMessage + 4) + *(unsigned __int16 *)(v21 + 16LL * SubMessage + 8);
      while (1)
      {
        unsigned int v20 = (int)v20 + 1LL;
        uint64_t v23 = v21 + 16 * v20;
        int v26 = *(_DWORD *)(v23 + 4);
        uint64_t v25 = (_DWORD *)(v23 + 4);
        unint64_t v24 = (const icu::UnicodeString *)v26;
        switch(*(_DWORD *)(v21 + 16 * v20))
        {
          case 1:
            unint64_t v6 = (icu::UnicodeString *)icu::UnicodeString::doAppend( (uint64_t)v6,  (icu::PluralFormat *)((char *)this + 568),  v22,  ((_DWORD)v24 - v22));
            goto LABEL_30;
          case 2:
            if (*((_DWORD *)this + 140) != 1) {
              goto LABEL_28;
            }
            char v27 = ((_DWORD)v24 - v22);
            __int128 v28 = (uint64_t)v6;
            uint64_t v29 = (icu::PluralFormat *)((char *)this + 568);
            __int128 v30 = v22;
            goto LABEL_24;
          case 4:
            icu::UnicodeString::doAppend( (uint64_t)v6,  (icu::PluralFormat *)((char *)this + 568),  v22,  ((_DWORD)v24 - v22));
            if ((v35 & 0x8000u) == 0LL) {
              char v27 = (unsigned __int16)v35 >> 5;
            }
            else {
              char v27 = DWORD1(v35);
            }
            uint64_t v29 = (const icu::UnicodeString *)&v34;
            __int128 v28 = (uint64_t)v6;
            __int128 v30 = 0;
LABEL_24:
            icu::UnicodeString::doAppend(v28, v29, v30, v27);
            unsigned int v22 = *v25 + *(unsigned __int16 *)(v21 + 16 * v20 + 8);
            goto LABEL_28;
          case 5:
            icu::UnicodeString::doAppend( (uint64_t)v6,  (icu::PluralFormat *)((char *)this + 568),  v22,  ((_DWORD)v24 - v22));
            __int128 v32 = *((void *)this + 80);
            unsigned int v22 = *(_DWORD *)(v32 + 16LL * (int)v20 + 4) + *(unsigned __int16 *)(v32 + 16LL * (int)v20 + 8);
            icu::MessageImpl::appendReducedApostrophes( (icu::PluralFormat *)((char *)this + 568),  v24,  v22,  (uint64_t)v6,  v31);
            goto LABEL_28;
          default:
LABEL_28:
            unint64_t v21 = *((void *)this + 80);
            break;
        }
      }
    }

    goto LABEL_30;
  }

  int v15 = (icu::number::LocalizedNumberFormatter *)icu::DecimalFormat::toNumberFormatter(v14, a6);
  uint64_t v16 = (void *)*(unsigned int *)a6;
  if ((int)v16 <= 0)
  {
    icu::number::LocalizedNumberFormatter::formatImpl(v15, (icu::number::impl::UFormattedNumberData *)v39, a6);
    uint64_t v16 = (void *)*(unsigned int *)a6;
    if ((int)v16 <= 0)
    {
      icu::FormattedStringBuilder::toUnicodeString((icu::FormattedStringBuilder *)((char *)v39 + 8), (uint64_t)v33);
      icu::UnicodeString::operator=((icu::UnicodeString *)&v34, (icu::UnicodeString *)v33);
      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v33);
      goto LABEL_15;
    }
  }

  uint64_t v12 = 0;
  return v12 ^ (*(_BYTE *)(a1 + 32) != 0);
}
      }

      icu::UnicodeString::doAppend((uint64_t)a5, a2, v11, (v36 - v11));
      uint64_t v11 = v36;
      unint64_t v21 = (unsigned __int16 *)v12;
      unsigned int v22 = (unsigned int *)v13;
      uint64_t v23 = v33;
LABEL_11:
      unint64_t v24 = *v21;
      uint64_t v25 = (__int16)v24;
      int v26 = v24 >> 5;
      char v27 = *v22;
      if (v25 >= 0) {
        __int128 v28 = v26;
      }
      else {
        __int128 v28 = v27;
      }
      icu::UnicodeString::doAppend((uint64_t)a5, v23, 0, v28);
      goto LABEL_15;
    }

    icu::TimeZoneTransition::setTime((uint64_t)a4, v18);
    icu::TimeZoneTransition::setFrom(a4, *v19);
    icu::TimeZoneTransition::setTo(a4, *v10);
    return 1LL;
  }

  if ((_DWORD)result)
  {
    uint64_t v18 = v20;
    uint64_t v19 = v10 - 1;
    goto LABEL_15;
  }

  return result;
}

  icu::UVector::~UVector((icu::UVector *)v12);
}

    int64_t v14 = 16LL;
    *a5 = 16;
    uint64_t v5 = 0xFFFFFFFFLL;
LABEL_23:
    icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)&v28);
    return v5;
  }

  return 0xFFFFFFFFLL;
}

    dword_18C535D74 = *a1;
    icu::umtx_initImplPostInit(&dword_18C535D70);
    goto LABEL_16;
  }

  if (dword_18C535D74 >= 1)
  {
    __n128 result = 0LL;
    *a1 = dword_18C535D74;
    return result;
  }

char *icu::BreakIterator::createWordInstance( char **this, const icu::Locale *a2, UErrorCode *a3, UErrorCode *a4)
{
  else {
    return 0LL;
  }
}

char *icu::BreakIterator::createInstance(char **this, const icu::Locale *a2, char *a3, UErrorCode *a4)
{
  else {
    return 0LL;
  }
}

char *icu::BreakIterator::createLineInstance( char **this, const icu::Locale *a2, UErrorCode *a3, UErrorCode *a4)
{
  else {
    return 0LL;
  }
}

char *icu::BreakIterator::createCharacterInstance( char **this, const icu::Locale *a2, UErrorCode *a3, UErrorCode *a4)
{
  else {
    return 0LL;
  }
}

char *icu::BreakIterator::createSentenceInstance( char **this, const icu::Locale *a2, UErrorCode *a3, UErrorCode *a4)
{
  else {
    return 0LL;
  }
}

char *icu::BreakIterator::createTitleInstance( char **this, const icu::Locale *a2, UErrorCode *a3, UErrorCode *a4)
{
  else {
    return 0LL;
  }
}

uint64_t icu::BreakIterator::BreakIterator(uint64_t this)
{
  *(void *)this = off_18970AFD8;
  *(_DWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 326) = 0;
  *(_BYTE *)(this + 12) = 0;
  *(_BYTE *)(this + 169) = 0;
  return this;
}

icu::BreakIterator *icu::BreakIterator::BreakIterator( icu::BreakIterator *this, const icu::BreakIterator *a2)
{
  *(void *)this = off_18970AFD8;
  uint64_t v4 = (char *)this + 169;
  strncpy((char *)this + 12, (const char *)a2 + 12, 0x9DuLL);
  strncpy(v4, (const char *)a2 + 169, 0x9DuLL);
  strncpy((char *)this + 326, (const char *)a2 + 326, 0x9DuLL);
  return this;
}

char *icu::BreakIterator::operator=(char *a1, const char *a2)
{
  if (a1 != a2)
  {
    strncpy(a1 + 12, a2 + 12, 0x9DuLL);
    strncpy(a1 + 169, a2 + 169, 0x9DuLL);
    strncpy(a1 + 326, a2 + 326, 0x9DuLL);
  }

  return a1;
}

char *icu::BreakIterator::makeInstance(char **this, const icu::Locale *a2, char *a3, UErrorCode *a4)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  switch((int)a2)
  {
    case 0:
      int v7 = "grapheme";
      goto LABEL_10;
    case 1:
      int v7 = "word";
      goto LABEL_10;
    case 2:
      uint64_t v43 = 0LL;
      uint64_t v42 = 0LL;
      memset(v44, 0, sizeof(v44));
      strcpy(__s, "line");
      int v36 = 0;
      memset(&v38[8], 0, 32);
      uint64_t v40 = 0LL;
      __int128 v39 = 0u;
      *(void *)__int128 v38 = &v38[13];
      *(_DWORD *)&v38[8] = 40;
      v35[0] = 0LL;
      v35[1] = 0LL;
      icu::CharStringByteSink::CharStringByteSink(v35, (uint64_t)v38);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v33, "lb");
      icu::Locale::getKeywordValue((uint64_t)this, v33, v34, (uint64_t)v35, (UErrorCode *)&v36);
      if (v36 < 1)
      {
        icu::StringPiece::StringPiece((icu::StringPiece *)&__s2, "strict");
        if ((_DWORD)v40 == (_DWORD)v32
          && ((int v8 = *(const char **)v38, !(_DWORD)v32) || !memcmp(*(const void **)v38, __s2, (int)v32))
          || (icu::StringPiece::StringPiece((icu::StringPiece *)&v29, "normal"), (_DWORD)v40 == (_DWORD)v30)
          && ((int v8 = *(const char **)v38, !(_DWORD)v30) || !memcmp(*(const void **)v38, v29, (int)v30))
          || (icu::StringPiece::StringPiece((icu::StringPiece *)&v27, "loose"),
              int v8 = *(const char **)v38,
              (_DWORD)v40 == (_DWORD)v28)
          && (!(_DWORD)v28 || !memcmp(*(const void **)v38, v27, (int)v28)))
        {
          *(_WORD *)&__s[strlen(__s)] = 95;
          strcat(__s, v8);
        }
      }

      else
      {
        int v8 = *(const char **)v38;
      }

      LODWORD(v40) = 0;
      *int v8 = 0;
      int v36 = 0;
      icu::StringPiece::StringPiece((icu::StringPiece *)&v25, "lw");
      icu::Locale::getKeywordValue((uint64_t)this, v25, v26, (uint64_t)v35, (UErrorCode *)&v36);
      if (v36 <= 0)
      {
        icu::StringPiece::StringPiece((icu::StringPiece *)&v23, "phrase");
        if ((_DWORD)v40 == (_DWORD)v24
          && (!(_DWORD)v24 || !memcmp(*(const void **)v38, v23, (int)v24))
          && (!(*((unsigned __int16 *)this + 4) ^ 0x616A | *((unsigned __int8 *)this + 10))
           || !(*((unsigned __int16 *)this + 4) ^ 0x6F6B | *((unsigned __int8 *)this + 10))))
        {
          *(_WORD *)&__s[strlen(__s)] = 95;
          strcat(__s, *(const char **)v38);
        }
      }

      int v15 = icu::BreakIterator::buildInstance(this, (const icu::Locale *)__s, a3, v14);
      uint64_t v9 = v15;
      if (v36 > 0) {
        goto LABEL_40;
      }
      icu::StringPiece::StringPiece((icu::StringPiece *)&v21, "keepall");
      if ((_DWORD)v40 == (_DWORD)v22 && (!(_DWORD)v22 || !memcmp(*(const void **)v38, v21, (int)v22))
        || (icu::StringPiece::StringPiece((icu::StringPiece *)&v19, "keep-all"), (_DWORD)v40 == (_DWORD)v20)
        && (!(_DWORD)v20 || !memcmp(*(const void **)v38, v19, (int)v20)))
      {
        int v16 = 127;
      }

      else
      {
        icu::StringPiece::StringPiece((icu::StringPiece *)&v17, "keep-hangul");
        else {
LABEL_40:
        }
          int v16 = 0;
      }

      *((_DWORD *)v9 + 2) = v16;
      icu::Locale::Locale((icu::Locale *)v37, (uint64_t)this);
      (*(void (**)(char *, _BYTE *))(*(void *)v9 + 208LL))(v9, v37);
      icu::Locale::~Locale((icu::Locale *)v37);
LABEL_53:
      icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v35);
      if (v38[12]) {
        uprv_free(*(void **)v38);
      }
LABEL_11:
      else {
        __n128 result = v9;
      }
      break;
    case 3:
      uint64_t v9 = icu::BreakIterator::buildInstance(this, (const icu::Locale *)"sentence", a3, a4);
      memset(v38, 0, 32);
      *(_DWORD *)__s = 0;
      int KeywordValue = icu::Locale::getKeywordValue(this, "ss", v38, 32, (UErrorCode *)__s);
      if (*(int *)__s <= 0 && KeywordValue >= 1 && !(*(void *)v38 ^ 0x647261646E617473LL | v38[8]))
      {
        Instance = icu::FilteredBreakIteratorBuilder::createInstance( (icu::FilteredBreakIteratorBuilder *)this,  (const icu::Locale *)__s,  v11);
        if (*(int *)__s <= 0)
        {
          unint64_t v13 = Instance;
          uint64_t v9 = (char *)(*(uint64_t (**)(void *, char *, char *))(*Instance + 40LL))(Instance, v9, a3);
          (*(void (**)(void *))(*v13 + 8LL))(v13);
        }
      }

      goto LABEL_11;
    case 4:
      int v7 = "title";
LABEL_10:
      uint64_t v9 = icu::BreakIterator::buildInstance(this, (const icu::Locale *)v7, a3, a4);
      goto LABEL_11;
    default:
      uint64_t v9 = 0LL;
      *(_DWORD *)a3 = 1;
      goto LABEL_11;
  }

  return result;
}

uint64_t icu::BreakIterator::getLocale@<X0>( const char *a1@<X0>, int a2@<W1>, int *a3@<X2>, icu::Locale *a4@<X8>)
{
  if (a2 == 2) {
    return icu::Locale::Locale(a4, a1 + 326, 0LL, 0LL, 0LL);
  }
  v7[2] = v4;
  v7[3] = v5;
  v7[0] = a1 + 169;
  v7[1] = a1 + 12;
  return icu::LocaleBased::getLocale(v7, a2, a3, a4);
}

uint64_t icu::BreakIterator::getLocaleID(uint64_t a1, int a2, int *a3)
{
  if (a2 == 2) {
    return a1 + 326;
  }
  v6[2] = v3;
  v6[3] = v4;
  v6[0] = a1 + 169;
  v6[1] = a1 + 12;
  return icu::LocaleBased::getLocaleID(v6, a2, a3);
}

uint64_t icu::BreakIterator::getRuleStatus(icu::BreakIterator *this)
{
  return 0LL;
}

uint64_t icu::BreakIterator::getRuleStatusVec(icu::BreakIterator *this, int *a2, int a3, UErrorCode *a4)
{
  if (a3 <= 0) {
    *a4 = U_BUFFER_OVERFLOW_ERROR;
  }
  else {
    *a2 = 0;
  }
  return 1LL;
}

icu::BreakIterator *icu::BreakIterator::BreakIterator( icu::BreakIterator *this, const icu::Locale *a2, const icu::Locale *a3)
{
  *(void *)this = off_18970AFD8;
  v5[0] = (char *)this + 169;
  v5[1] = (char *)this + 12;
  icu::LocaleBased::setLocaleIDs(v5, (uint64_t)a2, (uint64_t)a3);
  return this;
}

uint64_t icu::ByteSinkUtil::appendChange(int a1, uint64_t a2, int a3, uint64_t a4, _DWORD *a5, int *a6)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  if (*a6 > 0) {
    return 0LL;
  }
  uint64_t v31 = 0LL;
  memset(v30, 0, sizeof(v30));
  if (a3 >= 1)
  {
    int v10 = 0;
    int v11 = 0;
    while (1)
    {
      int v29 = 0;
      int v12 = 2 * (a3 - v10);
      if (a3 - v10 >= 0x3FFFFFFF) {
        int v12 = 0x7FFFFFFF;
      }
      uint64_t v13 = a3 - v10 >= 715827882 ? v12 : (3 * (a3 - v10));
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t, int *))(*(void *)a4 + 24LL))( a4,  4LL,  v13,  v30,  200LL,  &v29);
      int v15 = v29;
      v29 -= 3;
      if (v15 >= 4) {
        break;
      }
      uint64_t v16 = 0LL;
LABEL_26:
      if ((int)v16 > (v11 ^ 0x7FFFFFFF))
      {
        uint64_t result = 0LL;
        *a6 = 8;
        return result;
      }

      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a4 + 16LL))(a4, v14, v16);
      v11 += v16;
      if (v10 >= a3) {
        goto LABEL_30;
      }
    }

    LODWORD(v16) = 0;
    while (1)
    {
      uint64_t v17 = v10 + 1LL;
      unsigned int v18 = *(unsigned __int16 *)(a2 + 2LL * v10);
      if ((v18 & 0xFC00) == 0xD800) {
        break;
      }
      if (v18 <= 0x7F)
      {
        int v23 = v16;
        uint64_t v16 = (v16 + 1);
        __int16 v24 = *(_WORD *)(a2 + 2LL * v10);
        goto LABEL_22;
      }

      if (v18 > 0x7FF) {
        goto LABEL_19;
      }
      unsigned int v25 = (v18 >> 6) | 0xFFFFFFC0;
LABEL_21:
      *(_BYTE *)(v14 + (int)v16) = v25;
      int v23 = v16 + 1;
      LOBYTE(v24) = v18 & 0x3F | 0x80;
      uint64_t v16 = (v16 + 2);
LABEL_22:
      int v10 = v17;
      *(_BYTE *)(v14 + v23) = v24;
    }

    int v19 = *(unsigned __int16 *)(a2 + 2 * v17);
    LODWORD(v17) = v10 + 2;
    unsigned int v18 = v19 + (v18 << 10) - 56613888;
    if (HIWORD(v18))
    {
      int v20 = v16 + 1;
      *(_BYTE *)(v14 + (int)v16) = (v18 >> 18) | 0xF0;
      unsigned int v21 = (v18 >> 12) & 0x3F | 0xFFFFFF80;
      int v22 = 2;
    }

    else
    {
LABEL_19:
      unsigned int v21 = (v18 >> 12) | 0xFFFFFFE0;
      int v22 = 1;
      int v20 = v16;
    }

    LODWORD(v16) = v16 + v22;
    *(_BYTE *)(v14 + v20) = v21;
    unsigned int v25 = (v18 >> 6) & 0x3F | 0xFFFFFF80;
    goto LABEL_21;
  }

  int v11 = 0;
LABEL_30:
  if (a5) {
    icu::Edits::addReplace(a5, a1, v11);
  }
  return 1LL;
}

uint64_t icu::ByteSinkUtil::appendChange( uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, _DWORD *a6, int *a7)
{
  if (*a7 > 0) {
    return 0LL;
  }
  uint64_t v7 = a2 - a1;
  if (v7 >= 0x80000000LL)
  {
    *a7 = 8;
    return 0LL;
  }

  return icu::ByteSinkUtil::appendChange(v7, a3, a4, a5, a6, a7);
}

uint64_t icu::ByteSinkUtil::appendCodePoint( icu::ByteSinkUtil *this, unsigned int a2, uint64_t a3, icu::ByteSink *a4, icu::Edits *a5)
{
  int v11 = 0;
  if (a2 <= 0x7F)
  {
    LOBYTE(v11) = a2;
    uint64_t v6 = 1LL;
    if (!a4) {
      return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)a3 + 16LL))(a3, &v11, v6);
    }
    goto LABEL_11;
  }

  if (a2 > 0x7FF)
  {
    if (HIWORD(a2))
    {
      unsigned int v8 = (a2 >> 18) | 0xFFFFFFF0;
      BYTE1(v11) = (a2 >> 12) & 0x3F | 0x80;
      unsigned int v9 = 2;
    }

    else
    {
      unsigned int v8 = (a2 >> 12) | 0xFFFFFFE0;
      unsigned int v9 = 1;
    }

    LOBYTE(v11) = v8;
    unsigned int v7 = v9 + 1;
    *(_BYTE *)((unint64_t)&v11 | v9) = (a2 >> 6) & 0x3F | 0x80;
  }

  else
  {
    LOBYTE(v11) = (a2 >> 6) | 0xC0;
    unsigned int v7 = 1;
  }

  uint64_t v6 = v7 + 1;
  *((_BYTE *)&v11 + v7) = a2 & 0x3F | 0x80;
  if (a4) {
LABEL_11:
  }
    icu::Edits::addReplace(a4, (int)this, v6);
  return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)a3 + 16LL))(a3, &v11, v6);
}

uint64_t icu::ByteSinkUtil::appendTwoBytes(unsigned int a1, uint64_t a2)
{
  v3[0] = (a1 >> 6) | 0xC0;
  v3[1] = a1 & 0x3F | 0x80;
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(void *)a2 + 16LL))(a2, v3, 2LL);
}

_DWORD *icu::ByteSinkUtil::appendNonEmptyUnchanged( _DWORD *this, const unsigned __int8 *a2, uint64_t a3, icu::ByteSink *a4, icu::Edits *a5, icu::Edits *a6)
{
  __int16 v6 = (__int16)a4;
  unsigned int v9 = this;
  if (a5) {
    this = icu::Edits::addUnchanged(a5, a2);
  }
  if ((v6 & 0x4000) == 0) {
    return (_DWORD *)(*(uint64_t (**)(uint64_t, _DWORD *, const unsigned __int8 *))(*(void *)a3 + 16LL))( a3,  v9,  a2);
  }
  return this;
}

uint64_t icu::ByteSinkUtil::appendUnchanged( icu::ByteSinkUtil *this, const unsigned __int8 *a2, const unsigned __int8 *a3, icu::ByteSink *a4, icu::Edits *a5, icu::Edits *a6, UErrorCode *a7)
{
  uint64_t v9 = a2 - (const unsigned __int8 *)this;
  if (a2 - (const unsigned __int8 *)this < 0x80000000LL)
  {
    if ((int)v9 >= 1)
    {
      __int16 v10 = (__int16)a4;
      if (a5) {
        icu::Edits::addUnchanged(a5, v9);
      }
      if ((v10 & 0x4000) == 0) {
        (*(void (**)(const unsigned __int8 *, icu::ByteSinkUtil *, uint64_t))(*(void *)a3 + 16LL))( a3,  this,  v9);
      }
    }

    return 1LL;
  }

  else
  {
    uint64_t result = 0LL;
    *(_DWORD *)a6 = 8;
  }

  return result;
}

void *icu::CharStringByteSink::CharStringByteSink(void *result, uint64_t a2)
{
  *uint64_t result = off_18970B0B8;
  result[1] = a2;
  return result;
}

{
  *uint64_t result = off_18970B0B8;
  result[1] = a2;
  return result;
}

void icu::CharStringByteSink::~CharStringByteSink(icu::CharStringByteSink *this)
{
}

icu::CharString *icu::CharStringByteSink::Append(icu::CharString **this, const char *a2, int a3)
{
  UErrorCode v4 = U_ZERO_ERROR;
  return icu::CharString::append(this[1], a2, a3, &v4);
}

char *icu::CharStringByteSink::GetAppendBuffer( icu::CharString **this, int a2, int a3, char *a4, int a5, int *a6)
{
  if (a2 < 1 || a5 < a2)
  {
    a4 = 0LL;
    *a6 = 0;
  }

  else
  {
    UErrorCode v11 = U_ZERO_ERROR;
    uint64_t AppendBuffer = icu::CharString::getAppendBuffer(this[1], a2, a3, a6, &v11);
    if (v11 < U_ILLEGAL_ARGUMENT_ERROR) {
      return (char *)AppendBuffer;
    }
    else {
      *a6 = a5;
    }
  }

  return a4;
}

char *icu::ByteSink::GetAppendBuffer(icu::ByteSink *this, int a2, int a3, char *a4, int a5, int *a6)
{
  BOOL v7 = a2 < 1 || a5 < a2;
  BOOL v8 = !v7;
  if (v7) {
    int v9 = 0;
  }
  else {
    int v9 = a5;
  }
  if (v8) {
    uint64_t result = a4;
  }
  else {
    uint64_t result = 0LL;
  }
  *a6 = v9;
  return result;
}

uint64_t icu::CheckedArrayByteSink::CheckedArrayByteSink(uint64_t this, char *a2, int a3)
{
  *(void *)this = off_18970B108;
  *(void *)(this + 8) = a2;
  *(_DWORD *)(this + 16) = a3 & ~(a3 >> 31);
  *(void *)(this + 20) = 0LL;
  *(_BYTE *)(this + 28) = 0;
  return this;
}

{
  *(void *)this = off_18970B108;
  *(void *)(this + 8) = a2;
  *(_DWORD *)(this + 16) = a3 & ~(a3 >> 31);
  *(void *)(this + 20) = 0LL;
  *(_BYTE *)(this + 28) = 0;
  return this;
}

uint64_t icu::CheckedArrayByteSink::Reset(uint64_t this)
{
  *(_BYTE *)(this + 28) = 0;
  *(void *)(this + 20) = 0LL;
  return this;
}

char *icu::CheckedArrayByteSink::Append(char *this, char *a2, size_t __n)
{
  if ((int)__n >= 1)
  {
    unsigned int v3 = __n;
    UErrorCode v4 = this;
    int v5 = *((_DWORD *)this + 6);
    if ((v5 ^ 0x7FFFFFFFu) >= __n)
    {
      *((_DWORD *)this + 6) = v5 + __n;
      int v6 = *((_DWORD *)this + 5);
      int v7 = *((_DWORD *)this + 4) - v6;
      if (v7 < (int)__n && (this[28] = 1, unsigned int v3 = v7, v7 < 1))
      {
        unsigned int v3 = v7;
      }

      else
      {
        this = (char *)(*((void *)this + 1) + v6);
        if (this != a2)
        {
          this = (char *)memcpy(this, a2, v3);
          int v6 = *((_DWORD *)v4 + 5);
        }
      }

      *((_DWORD *)v4 + 5) = v6 + v3;
    }

    else
    {
      *((_DWORD *)this + 6) = 0x7FFFFFFF;
      this[28] = 1;
    }
  }

  return this;
}

char *icu::CheckedArrayByteSink::GetAppendBuffer( icu::CheckedArrayByteSink *this, int a2, int a3, char *a4, int a5, int *a6)
{
  if (a2 < 1 || a5 < a2)
  {
    a4 = 0LL;
    *a6 = 0;
  }

  else
  {
    int v6 = *((_DWORD *)this + 4) - *((_DWORD *)this + 5);
    if (v6 >= a2)
    {
      *a6 = v6;
      return (char *)(*((void *)this + 1) + *((int *)this + 5));
    }

    else
    {
      *a6 = a5;
    }
  }

  return a4;
}

void icu::BytesTrie::~BytesTrie(void **this)
{
}

{
  uprv_free(*this);
}

uint64_t icu::BytesTrie::readValue(icu::BytesTrie *this, const unsigned __int8 *a2)
{
  if (a2 <= 0x7D) {
  int v3 = *(unsigned __int8 *)this;
  }
  int v4 = *((unsigned __int8 *)this + 1);
  unsigned int v5 = *((unsigned __int8 *)this + 2);
  if ((_DWORD)a2 == 126) {
    return (v3 << 16) | (v4 << 8) | v5;
  }
  else {
    return (v3 << 24) | (v4 << 16) | (v5 << 8) | *((unsigned __int8 *)this + 3);
  }
}

char *icu::BytesTrie::jumpByDelta(icu::BytesTrie *this, const unsigned __int8 *a2)
{
  int v3 = (char *)this + 1;
  unsigned int v2 = *(unsigned __int8 *)this;
  if (v2 >= 0xC0)
  {
    if (v2 > 0xEF)
    {
      if (v2 > 0xFD)
      {
        int v4 = *((unsigned __int8 *)this + 1);
        int v5 = *((unsigned __int8 *)this + 2);
        int v6 = *((unsigned __int8 *)this + 3);
        if (v2 == 254)
        {
          unsigned int v2 = (v4 << 16) | (v5 << 8) | v6;
          int v3 = (char *)this + 4;
        }

        else
        {
          unsigned int v2 = (v4 << 24) | (v5 << 16) | (v6 << 8) | *((unsigned __int8 *)this + 4);
          int v3 = (char *)this + 5;
        }
      }

      else
      {
        unsigned int v2 = ((*((unsigned __int8 *)this + 1) << 8) | (v2 << 16) | *((unsigned __int8 *)this + 2)) - 15728640;
        int v3 = (char *)this + 3;
      }
    }

    else
    {
      int v3 = (char *)this + 2;
      unsigned int v2 = (*((unsigned __int8 *)this + 1) | (v2 << 8)) - 49152;
    }
  }

  return &v3[v2];
}

uint64_t icu::BytesTrie::current(icu::BytesTrie *this)
{
  v1 = (unsigned __int8 *)*((void *)this + 2);
  if (!v1) {
    return 0LL;
  }
  if ((*((_DWORD *)this + 6) & 0x80000000) != 0)
  {
    unsigned int v2 = *v1;
    if (v2 >= 0x20) {
      return v2 & 1 ^ 3;
    }
  }

  return 1LL;
}

uint64_t icu::BytesTrie::branchNext(icu::BytesTrie *this, const unsigned __int8 *a2, int a3, int a4)
{
  if (!a3)
  {
    int v6 = *a2++;
    a3 = v6;
  }

  int v7 = a3 + 1;
  if (a3 < 5)
  {
    int v9 = a2;
  }

  else
  {
    do
    {
      unsigned int v8 = v7 >> 1;
      if (*a2 <= a4)
      {
        v7 -= v8;
        int v9 = a2 + 2;
        unsigned int v10 = a2[1];
        if (v10 >= 0xC0)
        {
          UErrorCode v11 = &v9[(v10 & 1) + 3];
          if (v10 <= 0xFD) {
            UErrorCode v11 = a2 + 4;
          }
          if (v10 <= 0xEF) {
            int v9 = a2 + 3;
          }
          else {
            int v9 = v11;
          }
        }
      }

      else
      {
        int v9 = (const unsigned __int8 *)icu::BytesTrie::jumpByDelta((icu::BytesTrie *)(a2 + 1), a2);
        int v7 = v8;
      }

      a2 = v9;
    }

    while (v7 > 5);
  }

  int v12 = v7 + 1;
  while (1)
  {
    uint64_t v13 = v9;
    uint64_t v14 = v9 + 1;
    if (*v9 == a4) {
      break;
    }
    v9 += 2;
    unint64_t v15 = v13[1];
    if (v15 >= 0xA2)
    {
      if (v15 > 0xD7)
      {
        BOOL v16 = v15 > 0xFB;
        uint64_t v17 = (uint64_t)&v9[((v15 >> 1) & 1) + 3];
        unsigned int v18 = v13 + 4;
        if (v16) {
          int v9 = (const unsigned __int8 *)v17;
        }
        else {
          int v9 = v18;
        }
      }

      else
      {
        int v9 = v13 + 3;
      }
    }

    if (--v12 <= 2)
    {
      if (*v9 == a4)
      {
        *((void *)this + 2) = v9 + 1;
        unsigned int v19 = v9[1];
        BOOL v20 = v19 >= 0x20;
        unsigned int v21 = v19 & 1 ^ 3;
        if (v20) {
          return v21;
        }
        else {
          return 1LL;
        }
      }

      else
      {
        uint64_t result = 0LL;
        *((void *)this + 2) = 0LL;
      }

      return result;
    }
  }

  unsigned int v23 = *v14;
  if ((v23 & 1) != 0)
  {
    uint64_t result = 2LL;
  }

  else
  {
    unsigned int v24 = v23 >> 1;
    if (v23 > 0xA1)
    {
      if (v23 > 0xD7)
      {
        if (v23 > 0xFB)
        {
          int v27 = v9[2];
          int v28 = v9[3];
          int v29 = v9[4];
          if (v24 == 126)
          {
            int v26 = (v27 << 16) | (v28 << 8) | v29;
            unsigned int v25 = v9 + 5;
          }

          else
          {
            int v26 = (v27 << 24) | (v28 << 16) | (v29 << 8) | v9[5];
            unsigned int v25 = v9 + 6;
          }
        }

        else
        {
          int v26 = ((v9[2] << 8) | (v24 << 16) | v9[3]) - 7077888;
          unsigned int v25 = v9 + 4;
        }
      }

      else
      {
        unsigned int v25 = v9 + 3;
        int v26 = (v9[2] | (v24 << 8)) - 20736;
      }
    }

    else
    {
      unsigned int v25 = v9 + 2;
      int v26 = v24 - 16;
    }

    uint64_t v14 = &v25[v26];
    unsigned int v30 = *v14;
    if (v30 < 0x20) {
      uint64_t result = 1LL;
    }
    else {
      uint64_t result = v30 & 1 ^ 3;
    }
  }

  *((void *)this + 2) = v14;
  return result;
}

uint64_t icu::BytesTrie::nextImpl(icu::BytesTrie *this, const unsigned __int8 *a2, int a3)
{
  for (uint64_t i = a2; ; a2 = i)
  {
    unsigned int v7 = *a2;
    int v5 = a2 + 1;
    unsigned int v6 = v7;
    if (v7 < 0x10) {
      return icu::BytesTrie::branchNext(this, v5, v6, a3);
    }
    if (v6 <= 0x1F) {
      break;
    }
    if ((v6 & 1) != 0) {
      goto LABEL_18;
    }
    unsigned int v8 = &v5[((v6 >> 1) & 1) + 3];
    if (v6 <= 0xFB) {
      unsigned int v8 = i + 3;
    }
    i += 2;
    if (v6 > 0xD7) {
      uint64_t i = v8;
    }
    if (v6 < 0xA2) {
      uint64_t i = v5;
    }
  }

  if (*v5 != a3)
  {
LABEL_18:
    unsigned int v10 = 0LL;
    *((void *)this + 2) = 0LL;
    return (uint64_t)v10;
  }

  unsigned int v10 = (unsigned __int8 *)(i + 2);
  *((_DWORD *)this + 6) = v6 - 17;
  *((void *)this + 2) = v10;
  if (v6 > 0x10) {
    return 1LL;
  }
  unsigned int v11 = *v10;
  BOOL v12 = v11 >= 0x20;
  LODWORD(v10) = v11 & 1 ^ 3;
  if (v12) {
    return v10;
  }
  else {
    return 1LL;
  }
}

uint64_t icu::BytesTrie::next(icu::BytesTrie *this, int a2)
{
  int v3 = (const unsigned __int8 *)*((void *)this + 2);
  if (!v3) {
    return 0LL;
  }
  if (a2 >= 0) {
    int v4 = a2;
  }
  else {
    int v4 = a2 + 256;
  }
  int v5 = *((_DWORD *)this + 6);
  if (v5 < 0) {
    return icu::BytesTrie::nextImpl(this, v3, v4);
  }
  int v7 = *v3;
  unsigned int v6 = (unsigned __int8 *)(v3 + 1);
  if (v4 == v7)
  {
    *((_DWORD *)this + 6) = v5 - 1;
    *((void *)this + 2) = v6;
    if (v5) {
      return 1LL;
    }
    unsigned int v8 = *v6;
    if (v8 < 0x20) {
      return 1LL;
    }
    else {
      return v8 & 1 ^ 3;
    }
  }

  else
  {
    uint64_t v9 = 0LL;
    *((void *)this + 2) = 0LL;
  }

  return v9;
}

uint64_t icu::BytesTrie::next(icu::BytesTrie *this, const char *a2, int a3)
{
  int v3 = a3;
  int v4 = a2;
  if ((a3 & 0x80000000) == 0)
  {
    if (a3) {
      goto LABEL_3;
    }
LABEL_45:
    unsigned int v19 = (unsigned __int8 *)*((void *)this + 2);
    if (v19)
    {
      if ((*((_DWORD *)this + 6) & 0x80000000) != 0)
      {
        unsigned int v20 = *v19;
        if (v20 >= 0x20) {
          return v20 & 1 ^ 3;
        }
      }

      return 1LL;
    }

    return 0LL;
  }

  if (!*a2) {
    goto LABEL_45;
  }
LABEL_3:
  unsigned int v6 = (const unsigned __int8 *)*((void *)this + 2);
  if (!v6) {
    return 0LL;
  }
  int v7 = *((_DWORD *)this + 6);
  if (a3 < 0) {
    goto LABEL_14;
  }
LABEL_5:
  if (!v3)
  {
LABEL_51:
    *((_DWORD *)this + 6) = v7;
    *((void *)this + 2) = v6;
    if (v7 < 0)
    {
      unsigned int v21 = *v6;
      BOOL v22 = v21 >= 0x20;
      unsigned int v23 = v21 & 1 ^ 3;
      if (v22) {
        return v23;
      }
      else {
        return 1LL;
      }
    }

    return 1LL;
  }

  uint64_t v8 = 0LL;
  if (v7 >= -1) {
    int v9 = -1;
  }
  else {
    int v9 = v7;
  }
  int v10 = v7;
  while (1)
  {
    int v11 = v4[v8];
    if (v10 < 0) {
      break;
    }
    if (v11 != v6[v8]) {
      goto LABEL_50;
    }
    --v10;
    if (v3 == (_DWORD)++v8)
    {
      v6 += (v3 - 1) + 1;
      v7 -= v3;
      goto LABEL_51;
    }
  }

  v6 += v8;
  v3 += ~(_DWORD)v8;
  v4 += v8 + 1;
  while (1)
  {
    *((_DWORD *)this + 6) = v9;
    while (1)
    {
      while (1)
      {
        uint64_t v14 = v6;
        unsigned int v16 = *v6++;
        unint64_t v15 = v16;
        if (v16 > 0xF) {
          break;
        }
        uint64_t result = icu::BytesTrie::branchNext(this, v6, v15, v11);
        if (!(_DWORD)result) {
          return result;
        }
        if (v3 < 0)
        {
          char v18 = *v4;
          if (!*v4) {
            return result;
          }
        }

        else
        {
          if (!v3) {
            return result;
          }
          char v18 = *v4;
          --v3;
        }

        if ((_DWORD)result == 2) {
          goto LABEL_50;
        }
        int v11 = v18;
        ++v4;
        unsigned int v6 = (const unsigned __int8 *)*((void *)this + 2);
      }

      if ((v15 & 1) != 0) {
        goto LABEL_50;
      }
      if (v15 >= 0xA2)
      {
        if (v15 > 0xD7)
        {
          unsigned int v6 = v14 + 3;
        }

        else
        {
          unsigned int v6 = v14 + 2;
        }
      }
    }

    if (v11 != *v6) {
      break;
    }
    unsigned int v6 = v14 + 2;
    int v7 = v15 - 17;
    if ((v3 & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_14:
    char v12 = *v4;
    if (!*v4) {
      goto LABEL_51;
    }
    if (v7 >= -1) {
      int v9 = -1;
    }
    else {
      int v9 = v7;
    }
    ++v4;
    while (1)
    {
      int v11 = v12;
      if (v7 < 0) {
        break;
      }
      if (v12 != *v6) {
        goto LABEL_50;
      }
      ++v6;
      --v7;
      int v13 = *(unsigned __int8 *)v4++;
      char v12 = v13;
      if (!v13) {
        goto LABEL_51;
      }
    }
  }

LABEL_50:
  uint64_t result = 0LL;
  *((void *)this + 2) = 0LL;
  return result;
}

    this = icu::MessagePattern::setParseError(v10, a5, a2);
    *a6 = U_PATTERN_SYNTAX_ERROR;
    return this;
  }

  if (v15 != 45)
  {
    char v18 = 0;
    unsigned int v19 = 0x7FFF;
    goto LABEL_31;
  }

  if ((_DWORD)v13 == a3) {
    goto LABEL_50;
  }
  if ((v11 & 0x8000) != 0) {
    unsigned int v16 = *((_DWORD *)this + 7);
  }
  else {
    unsigned int v16 = v11 >> 5;
  }
  if ((v11 & 2) != 0) {
    unsigned int v20 = this + 26;
  }
  else {
    unsigned int v20 = (char *)*((void *)this + 5);
  }
  unsigned int v19 = 0x8000;
  char v18 = 1;
LABEL_30:
  unint64_t v15 = *(unsigned __int16 *)&v20[2 * v13];
  LODWORD(v13) = a2 + 2;
LABEL_31:
  if (v15 != 8734)
  {
    if ((v15 - 48) <= 9)
    {
      BOOL v22 = 0;
      unsigned int v23 = (int)v13;
      while (1)
      {
        BOOL v22 = v15 + 10 * v22 - 48;
        if (v22 > v19) {
          break;
        }
        if (a3 == v23)
        {
          if (v18) {
            int v28 = -v22;
          }
          else {
            LOWORD(v28) = v22;
          }
          return (char *)icu::MessagePattern::addPart( (uint64_t)this,  12,  a2,  (unsigned __int16)a3 - (unsigned __int16)a2,  v28,  (int *)a6);
        }

        unsigned int v24 = v11 >> 5;
        if ((v11 & 0x8000) != 0) {
          unsigned int v24 = *((_DWORD *)this + 7);
        }
        if (v24 > v13)
        {
          unsigned int v25 = this + 26;
          if ((v11 & 2) == 0) {
            unsigned int v25 = (char *)*((void *)this + 5);
          }
          unint64_t v15 = *(unsigned __int16 *)&v25[2 * v23];
          LODWORD(v13) = v13 + 1;
          ++v23;
        }

        break;
      }
    }

  char v18 = *((_DWORD *)a2 + 3);
  if (v18 >= v16) {
    uint64_t v32 = v16;
  }
  else {
    uint64_t v32 = *((_DWORD *)a2 + 3);
  }
LABEL_56:
  __int128 v33 = 2;
  uint64_t v34 = icu::UnicodeString::indexOf((uint64_t)a2, (uint64_t)L":]", 0, 2, v32, v18 - v32);
  unsigned int v23 = 0;
  if ((v34 & 0x80000000) != 0) {
    goto LABEL_88;
  }
LABEL_57:
  __int128 v35 = *((unsigned __int16 *)a2 + 4);
  if ((v42 & 0x80000000) != 0)
  {
    __int128 v37 = 0;
    if ((v35 & 0x8000) != 0) {
      int v36 = *((_DWORD *)a2 + 3);
    }
    else {
      int v36 = v35 >> 5;
    }
  }

  else if ((v35 & 0x8000) != 0)
  {
    int v36 = *((_DWORD *)a2 + 3);
    else {
      __int128 v37 = *((_DWORD *)a2 + 3);
    }
  }

  else
  {
    int v36 = v35 >> 5;
    if (v36 >= v42) {
      __int128 v37 = v42;
    }
    else {
      __int128 v37 = v36;
    }
  }

  __int128 v38 = icu::UnicodeString::doIndexOf((uint64_t)a2, 0x3Du, v37, v36 - v37);
  v50 = 0u;
  v53 = 0LL;
  v52 = 0u;
  v51 = 0u;
  uint64_t v49 = (UChar *)off_18971B688;
  LOWORD(v50) = 2;
  uint64_t v45 = 0u;
  __int128 v48 = 0LL;
  __int128 v47 = 0u;
  __int128 v46 = 0u;
  __int128 v44 = (UChar *)off_18971B688;
  LOWORD(v45) = 2;
  if ((v38 & 0x80000000) != 0 || (__int128 v39 = v38, v38 >= v34) || v23)
  {
    (*(void (**)(const icu::UnicodeString *, void, uint64_t, UChar **))(*(void *)a2 + 24LL))( a2,  v42,  v34,  &v49);
    if (v23)
    {
      icu::UnicodeString::operator=(&v44, &v49);
      icu::UnicodeString::UnicodeString(v43, "na", 2LL, 0LL);
      icu::UnicodeString::operator=((icu::UnicodeString *)&v49, (icu::UnicodeString *)v43);
      icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v43);
    }
  }

  else
  {
    (*(void (**)(const icu::UnicodeString *, void, uint64_t, UChar **))(*(void *)a2 + 24LL))( a2,  v42,  v38,  &v49);
    (*(void (**)(const icu::UnicodeString *, void, uint64_t, UChar **))(*(void *)a2 + 24LL))( a2,  (v39 + 1),  v34,  &v44);
  }

  icu::UnicodeSet::applyPropertyAlias(this, (const icu::UnicodeString *)&v49, (const icu::UnicodeString *)&v44, a4);
  if (*(int *)a4 <= 0)
  {
    if (v20)
    {
      uint64_t v40 = icu::UnicodeSet::complement(this);
      icu::UnicodeSet::removeAllStrings(v40);
    }

    *((_DWORD *)a3 + 2) = v34 + v33;
  }

  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v44);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v49);
  return this;
}

            *(_DWORD *)(a4 + 4) |= 0x2000u;
          }
        }

        else
        {
          if (v9 == 885)
          {
            if (v7 < v31)
            {
              uint64_t v34 = 0;
              unsigned int v21 = v7 + 2;
              BOOL v22 = *(unsigned __int16 *)(a2 + 2 * v7 + 2);
              if ((v22 & 0xFC00) == 0xD800 && v21 != v8)
              {
                unsigned int v24 = *(unsigned __int16 *)(a2 + 2 * v21);
                uint64_t v14 = (v24 & 0xFC00) == 56320;
                unsigned int v25 = (v22 << 10) - 56613888 + v24;
                if (v14) {
                  BOOL v22 = v25;
                }
              }
            }

            goto LABEL_50;
          }

          if (v9 == 183)
          {
            if (v7)
            {
              int v10 = *(_WORD *)(a2 + 2LL * (v7 - 1)) != 108 || v7 >= v31;
              if (!v10 && *(_WORD *)(a2 + 2 * v7 + 2) == 108) {
                goto LABEL_51;
              }
            }

            goto LABEL_50;
          }

          if (v9 - 1523 <= 1)
          {
            if (v7)
            {
              __int128 v33 = 0;
              int v26 = *(unsigned __int16 *)(a2 + 2LL * (v7 - 1));
              if (v7 != 1 && (v26 & 0xFC00) == 0xDC00)
              {
                int v27 = *(unsigned __int16 *)(a2 + 2LL * (v7 - 2));
                uint64_t v14 = (v27 & 0xFC00) == 55296;
                int v28 = v26 - 56613888 + (v27 << 10);
                if (v14) {
                  int v26 = v28;
                }
              }
            }

            goto LABEL_50;
          }

          if (v9 >= 0x660)
          {
            if (v9 <= 0x669)
            {
              if (v30 >= 1) {
                *(_DWORD *)(a4 + 4) |= 0x4000u;
              }
              int v29 = -1;
LABEL_62:
              unsigned int v30 = v29;
              goto LABEL_51;
            }

            if (v9 >= 0x6F0)
            {
              if (v30 < 0) {
                *(_DWORD *)(a4 + 4) |= 0x4000u;
              }
              int v29 = 1;
              goto LABEL_62;
            }
          }
        }
      }

          icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v42);
          ++v9;
          unsigned int v6 = a2;
          int v7 = a4;
          uint64_t v8 = a3;
          if (v9 == v37) {
            goto LABEL_51;
          }
        }

        __int128 v41 = 45;
        icu::UnicodeString::doAppend((uint64_t)&v47, (uint64_t)&v41, 0, 1LL);
LABEL_11:
        __int128 v41 = 8734;
        icu::UnicodeString::doAppend((uint64_t)&v47, (uint64_t)&v41, 0, 1LL);
        if (!v8) {
          goto LABEL_18;
        }
        goto LABEL_12;
      }

    int v36 = "latn";
    goto LABEL_51;
  }

  return 0LL;
}

uint64_t icu::BytesTrie::findUniqueValueFromBranch( icu::BytesTrie *this, const unsigned __int8 *a2, int a3, _DWORD *a4, int *a5)
{
  int v7 = (int)a2;
  uint64_t v8 = this;
  if ((int)a2 < 6)
  {
    char v12 = this;
  }

  else
  {
    do
    {
      int v9 = icu::BytesTrie::jumpByDelta((icu::BytesTrie *)((char *)v8 + 1), a2);
      uint64_t result = icu::BytesTrie::findUniqueValueFromBranch( (icu::BytesTrie *)v9,  (const unsigned __int8 *)(v7 >> 1),  a3,  (signed __int8)a4,  v10);
      if (!result) {
        return result;
      }
      char v12 = (icu::BytesTrie *)((char *)v8 + 2);
      unsigned int v13 = *((unsigned __int8 *)v8 + 1);
      if (v13 >= 0xC0)
      {
        uint64_t v14 = (uint64_t)v12 + (v13 & 1) + 3;
        if (v13 <= 0xFD) {
          uint64_t v14 = (uint64_t)v8 + 4;
        }
        if (v13 <= 0xEF) {
          char v12 = (icu::BytesTrie *)((char *)v8 + 3);
        }
        else {
          char v12 = (icu::BytesTrie *)v14;
        }
      }

      v7 -= v7 >> 1;
      uint64_t v8 = v12;
    }

    while (v7 > 5);
  }

  int v15 = v7 + 1;
  while (1)
  {
    unint64_t v16 = *((unsigned __int8 *)v12 + 1);
    int Value = icu::BytesTrie::readValue( (icu::BytesTrie *)((char *)v12 + 2),  (const unsigned __int8 *)(v16 >> 1));
    uint64_t v20 = (uint64_t)v12 + ((v16 >> 1) & 1) + 5;
    else {
      char v12 = (icu::BytesTrie *)((char *)v12 + 2);
    }
    if ((v16 & 1) == 0)
    {
      if (!icu::BytesTrie::findUniqueValue( (icu::BytesTrie *)((char *)v12 + Value),  (const unsigned __int8 *)(char)a3,  a4,  v18,  v19)) {
        return 0LL;
      }
      goto LABEL_27;
    }

    if (!(_BYTE)a3)
    {
      *a4 = Value;
LABEL_27:
      LOBYTE(a3) = 1;
      goto LABEL_28;
    }

    if (Value != *a4) {
      return 0LL;
    }
LABEL_28:
    if (--v15 <= 2) {
      return (uint64_t)v12 + 1;
    }
  }
}

uint64_t icu::BytesTrie::findUniqueValue( icu::BytesTrie *this, const unsigned __int8 *a2, _DWORD *a3, int *a4, int *a5)
{
  char v6 = (char)a2;
  do
  {
LABEL_2:
    uint64_t v8 = (unsigned __int8 *)this;
    while (1)
    {
      unsigned int v10 = *(unsigned __int8 *)this;
      this = (icu::BytesTrie *)((char *)this + 1);
      unint64_t v9 = v10;
      uint64_t v11 = v10 - 15;
      if (v10 <= 0xF) {
        break;
      }
      if (v9 > 0x1F)
      {
        int Value = icu::BytesTrie::readValue(this, (const unsigned __int8 *)(v9 >> 1));
        if (v6)
        {
          if (Value != *a3) {
            return 0LL;
          }
          if ((v9 & 1) != 0) {
            return 1LL;
          }
        }

        else
        {
          *a3 = Value;
          char v6 = 1;
          if ((v9 & 1) != 0) {
            return 1LL;
          }
        }

        if (v9 >= 0xA2)
        {
          if (v9 > 0xD7)
          {
            else {
              this = (icu::BytesTrie *)(v8 + 3);
            }
          }

          else
          {
            this = (icu::BytesTrie *)(v8 + 2);
          }
        }

        goto LABEL_2;
      }

      uint64_t v8 = (unsigned __int8 *)this + v11;
      this = (icu::BytesTrie *)((char *)this + v11);
    }

    if (!(_DWORD)v9)
    {
      this = (icu::BytesTrie *)(v8 + 2);
      LODWORD(v9) = v8[1];
    }

    uint64_t result = icu::BytesTrie::findUniqueValueFromBranch( this,  (const unsigned __int8 *)(v9 + 1),  v6,  (signed __int8)a3,  a5);
    this = (icu::BytesTrie *)result;
    char v6 = 1;
  }

  while (result);
  return result;
}

uint64_t icu::BytesTrie::getNextBytes(icu::BytesTrie *this, icu::ByteSink *a2, uint64_t a3, icu::ByteSink *a4)
{
  int v4 = (char *)*((void *)this + 2);
  if (!v4) {
    return 0LL;
  }
  if ((*((_DWORD *)this + 6) & 0x80000000) == 0)
  {
    char v11 = *v4;
    uint64_t v5 = 1LL;
    (*(void (**)(icu::ByteSink *, char *, uint64_t))(*(void *)a2 + 16LL))(a2, &v11, 1LL);
    return v5;
  }

  char v6 = (icu::BytesTrie *)(v4 + 1);
  unint64_t v7 = *v4;
  if ((v7 & 1) != 0) {
    return 0LL;
  }
  if (v7 >= 0xA2)
  {
    if (v7 > 0xD7)
    {
      else {
        char v6 = (icu::BytesTrie *)(v4 + 3);
      }
    }

    else
    {
      char v6 = (icu::BytesTrie *)(v4 + 2);
    }
  }

  int v9 = *(unsigned __int8 *)v6;
  char v6 = (icu::BytesTrie *)((char *)v6 + 1);
  LODWORD(v7) = v9;
LABEL_16:
  if (v7 > 0xF)
  {
    char v12 = *(_BYTE *)v6;
    uint64_t v5 = 1LL;
    (*(void (**)(icu::ByteSink *, char *, uint64_t))(*(void *)a2 + 16LL))(a2, &v12, 1LL);
  }

  else
  {
    if (!(_DWORD)v7)
    {
      int v10 = *(unsigned __int8 *)v6;
      char v6 = (icu::BytesTrie *)((char *)v6 + 1);
      LODWORD(v7) = v10;
    }

    uint64_t v5 = (v7 + 1);
    icu::BytesTrie::getNextBranchBytes(v6, (const unsigned __int8 *)v5, (uint64_t)a2, a4);
  }

  return v5;
}

uint64_t icu::BytesTrie::append(icu::BytesTrie *this, icu::ByteSink *a2)
{
  char v3 = (char)a2;
  return (*(uint64_t (**)(icu::BytesTrie *, char *, uint64_t))(*(void *)this + 16LL))(this, &v3, 1LL);
}

uint64_t icu::BytesTrie::getNextBranchBytes( icu::BytesTrie *this, const unsigned __int8 *a2, uint64_t a3, icu::ByteSink *a4)
{
  int v5 = (int)a2;
  char v6 = this;
  if ((int)a2 < 6)
  {
    int v9 = this;
  }

  else
  {
    do
    {
      unint64_t v7 = icu::BytesTrie::jumpByDelta((icu::BytesTrie *)((char *)v6 + 1), a2);
      icu::BytesTrie::getNextBranchBytes((icu::BytesTrie *)v7, (const unsigned __int8 *)(v5 >> 1), a3, v8);
      int v9 = (icu::BytesTrie *)((char *)v6 + 2);
      unsigned int v10 = *((unsigned __int8 *)v6 + 1);
      if (v10 >= 0xC0)
      {
        int v9 = (icu::BytesTrie *)((char *)v9 + (v10 & 1) + 3);
        if (v10 <= 0xFD) {
          int v9 = (icu::BytesTrie *)((char *)v6 + 4);
        }
        if (v10 <= 0xEF) {
          int v9 = (icu::BytesTrie *)((char *)v6 + 3);
        }
      }

      v5 -= v5 >> 1;
      char v6 = v9;
    }

    while (v5 > 5);
  }

  int v11 = v5 + 1;
  do
  {
    char v12 = (unsigned __int8 *)v9;
    char v15 = *(_BYTE *)v9;
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)a3 + 16LL))(a3, &v15, 1LL);
    int v9 = (icu::BytesTrie *)(v12 + 2);
    unint64_t v13 = v12[1];
    if (v13 >= 0xA2)
    {
      if (v13 > 0xD7)
      {
        int v9 = (icu::BytesTrie *)((char *)v9 + ((v13 >> 1) & 1) + 3);
      }

      else
      {
        int v9 = (icu::BytesTrie *)(v12 + 3);
      }
    }

    --v11;
  }

  while (v11 > 2);
  char v16 = *(_BYTE *)v9;
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)a3 + 16LL))(a3, &v16, 1LL);
}

icu::CharString *sub_1807C0E58( icu::CharString *result, const char *a2, int a3, int a4, icu::CharString *this, UErrorCode *a6)
{
  if (*(int *)a6 <= 0)
  {
    if (a3 < 0x10000)
    {
      int v11 = result;
      int v12 = *((_DWORD *)this + 14);
      if (a3 >= 256)
      {
        int v12 = ~v12;
        icu::CharString::append(this, SBYTE1(a3), a6);
      }

      icu::CharString::append(this, a3, a6);
      *int v11 = v12;
      v11[1] = a4;
      return icu::CharString::append(this, a2, a3, a6);
    }

    else
    {
      *a6 = U_INDEX_OUTOFBOUNDS_ERROR;
    }
  }

  return result;
}

uint64_t sub_1807C0F18(unsigned int *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a3;
  if ((v3 & 0x80000000) != 0)
  {
    unsigned int v6 = *(unsigned __int8 *)(v4 + -(int)v3) | (*(unsigned __int8 *)(v4 + ~(_DWORD)v3) << 8);
    unsigned int v5 = 1 - v3;
  }

  else
  {
    unsigned int v5 = v3 + 1;
    unsigned int v6 = *(unsigned __int8 *)(v4 + v3);
  }

  uint64_t v7 = *a2;
  if ((v7 & 0x80000000) != 0)
  {
    unsigned int v9 = *(unsigned __int8 *)(v4 + -(int)v7) | (*(unsigned __int8 *)(v4 + ~(_DWORD)v7) << 8);
    unsigned int v8 = 1 - v7;
  }

  else
  {
    unsigned int v8 = v7 + 1;
    unsigned int v9 = *(unsigned __int8 *)(v4 + v7);
  }

  unsigned int v10 = v6 - v9;
  else {
    size_t v11 = v6;
  }
  LODWORD(result) = memcmp((const void *)(v4 + v5), (const void *)(v4 + v8), v11);
  if ((_DWORD)result) {
    return result;
  }
  else {
    return v10;
  }
}

icu::BytesTrieBuilder *icu::BytesTrieBuilder::BytesTrieBuilder(icu::BytesTrieBuilder *this, UErrorCode *a2)
{
  uint64_t v4 = icu::StringTrieBuilder::StringTrieBuilder(this);
  *uint64_t v4 = off_18970B1B0;
  *((_OWORD *)v4 + 1) = 0u;
  unsigned int v6 = v4 + 2;
  *((_OWORD *)v4 + 2) = 0u;
  v4[6] = 0LL;
  if (*(int *)a2 <= 0)
  {
    uint64_t v7 = icu::UMemory::operator new((icu::UMemory *)0x40, v5);
    if (v7)
    {
      *(void *)uint64_t v7 = v7 + 13;
      *(_DWORD *)(v7 + 8) = 40;
      *(_WORD *)(v7 + 12) = 0;
      *(_DWORD *)(v7 + 56) = 0;
      uint64_t *v6 = v7;
    }

    else
    {
      uint64_t *v6 = 0LL;
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
  }

  return this;
}

void icu::BytesTrieBuilder::~BytesTrieBuilder(icu::BytesTrieBuilder *this)
{
  *(void *)this = off_18970B1B0;
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 12)) {
      uprv_free(*(void **)v2);
    }
    icu::UMemory::operator delete((void *)v2);
  }

  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3) {
    icu::UMemory::operator delete[](v3);
  }
  uprv_free(*((void **)this + 5));
  icu::StringTrieBuilder::~StringTrieBuilder(this);
}

{
  void *v1;
  icu::BytesTrieBuilder::~BytesTrieBuilder(this);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::BytesTrieBuilder::add(uint64_t a1, const char *a2, int a3, int a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    if (*(int *)(a1 + 52) >= 1)
    {
      int v7 = 30;
LABEL_4:
      *a5 = v7;
      return a1;
    }

    int v11 = *(_DWORD *)(a1 + 36);
    if (v11 == *(_DWORD *)(a1 + 32))
    {
      if (v11) {
        int v12 = 4 * v11;
      }
      else {
        int v12 = 1024;
      }
      if (v12 < 0) {
        uint64_t v13 = -1LL;
      }
      else {
        uint64_t v13 = 8LL * v12;
      }
      uint64_t v14 = (char *)icu::UMemory::operator new[]((icu::UMemory *)v13, (unint64_t)a2);
      if (!v14)
      {
        int v7 = 7;
        goto LABEL_4;
      }

      char v15 = v14;
      uint64_t v16 = *(unsigned int *)(a1 + 36);
      uint64_t v17 = *(void **)(a1 + 24);
      if (v17) {
        icu::UMemory::operator delete[](v17);
      }
      *(void *)(a1 + 24) = v15;
      *(_DWORD *)(a1 + 32) = v12;
      int v11 = *(_DWORD *)(a1 + 36);
    }

    else
    {
      char v15 = *(char **)(a1 + 24);
    }

    *(_DWORD *)(a1 + 36) = v11 + 1;
    sub_1807C0E58((icu::CharString *)&v15[8 * v11], a2, a3, a4, *(icu::CharString **)(a1 + 16), a5);
  }

  return a1;
}

uint64_t icu::BytesTrieBuilder::build(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 > 0) {
    return 0LL;
  }
  uint64_t result = icu::UMemory::operator new((icu::UMemory *)0x20, v5);
  if (result)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = v7 - *(int *)(a1 + 52) + *(int *)(a1 + 48);
    *(void *)uint64_t result = v7;
    *(void *)(result + 8) = v8;
    *(void *)(result + 16) = v8;
    *(_DWORD *)(result + 24) = -1;
    *(void *)(a1 + 40) = 0LL;
    *(_DWORD *)(a1 + 48) = 0;
  }

  else
  {
    *a3 = 7;
  }

  return result;
}

void icu::BytesTrieBuilder::buildBytes(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 <= 0)
  {
    int v4 = *(_DWORD *)(a1 + 52);
    if (!*(void *)(a1 + 40) || v4 <= 0)
    {
      if (!v4)
      {
        uint64_t v12 = *(unsigned int *)(a1 + 36);
        if (!(_DWORD)v12)
        {
          int v11 = 8;
          goto LABEL_21;
        }

        uprv_sortArray( *(void *)(a1 + 24),  v12,  8,  (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1807C1478,  *(void *)(a1 + 16),  0,  a3);
        if (*a3 > 0) {
          return;
        }
        uint64_t v13 = **(unsigned int **)(a1 + 24);
        uint64_t v14 = **(void **)(a1 + 16);
        if ((v13 & 0x80000000) != 0)
        {
          unint64_t v16 = *(unsigned __int8 *)(v14 + -(int)v13) | ((unint64_t)*(unsigned __int8 *)(v14 + ~(_DWORD)v13) << 8);
          unsigned int v15 = 1 - v13;
        }

        else
        {
          unsigned int v15 = v13 + 1;
          unint64_t v16 = *(unsigned __int8 *)(v14 + v13);
        }

        unsigned int v25 = (unsigned __int8 *)(v14 + v15);
        unint64_t v26 = v16;
        if (*(int *)(a1 + 36) >= 2)
        {
          uint64_t v17 = 8LL;
          uint64_t v18 = 1LL;
          while (1)
          {
            unsigned int v23 = 0LL;
            unint64_t v24 = 0LL;
            uint64_t v19 = *(unsigned int *)(*(void *)(a1 + 24) + v17);
            uint64_t v20 = **(void **)(a1 + 16);
            if ((v19 & 0x80000000) != 0)
            {
              unint64_t v22 = *(unsigned __int8 *)(v20 + -(int)v19) | ((unint64_t)*(unsigned __int8 *)(v20 + ~(_DWORD)v19) << 8);
              unsigned int v21 = 1 - v19;
            }

            else
            {
              unsigned int v21 = v19 + 1;
              unint64_t v22 = *(unsigned __int8 *)(v20 + v19);
            }

            unsigned int v23 = (unsigned __int8 *)(v20 + v21);
            unint64_t v24 = v22;
            if (icu::operator==(&v25, &v23)) {
              break;
            }
            unsigned int v25 = v23;
            LODWORD(v26) = v24;
            ++v18;
            v17 += 8LL;
          }

          int v11 = 1;
          goto LABEL_21;
        }
      }

uint64_t icu::BytesTrieBuilder::buildStringPiece(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 <= 0) {
    return *(void *)(a1 + 40) - *(int *)(a1 + 52) + *(int *)(a1 + 48);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1807C1478(uint64_t *a1, unsigned int *a2, unsigned int *a3)
{
  return sub_1807C0F18(a2, a3, a1);
}

uint64_t icu::BytesTrieBuilder::clear(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 16);
  *(_DWORD *)(v1 + 56) = 0;
  **(_BYTE **)uint64_t v1 = 0;
  *(_DWORD *)(this + 36) = 0;
  *(_DWORD *)(this + 52) = 0;
  return this;
}

uint64_t icu::BytesTrieBuilder::getElementStringLength(icu::BytesTrieBuilder *this, int a2)
{
  uint64_t v2 = (void *)*((void *)this + 2);
  uint64_t v3 = *(unsigned int *)(*((void *)this + 3) + 8LL * a2);
  if ((v3 & 0x80000000) != 0) {
    return *(unsigned __int8 *)(*v2 + -(int)v3) | (*(unsigned __int8 *)(*v2 + ~(_DWORD)v3) << 8);
  }
  else {
    return *(unsigned __int8 *)(*v2 + v3);
  }
}

uint64_t icu::BytesTrieBuilder::getElementUnit(icu::BytesTrieBuilder *this, int a2, int a3)
{
  int v3 = *(_DWORD *)(*((void *)this + 3) + 8LL * a2);
  if (v3 < 0) {
    int v3 = -v3;
  }
  return *(unsigned __int8 *)(**((void **)this + 2) + v3 + 1 + a3);
}

uint64_t icu::BytesTrieBuilder::getElementValue(icu::BytesTrieBuilder *this, int a2)
{
  return *(unsigned int *)(*((void *)this + 3) + 8LL * a2 + 4);
}

uint64_t icu::BytesTrieBuilder::getLimitOfLinearMatch( icu::BytesTrieBuilder *this, int a2, int a3, uint64_t a4)
{
  uint64_t v4 = *((void *)this + 3);
  uint64_t v5 = *(unsigned int *)(v4 + 8LL * a2);
  uint64_t v6 = **((void **)this + 2);
  if ((v5 & 0x80000000) != 0) {
    LODWORD(v7) = *(unsigned __int8 *)(v6 + -(int)v5) | (*(unsigned __int8 *)(v6
  }
                                                                                          + ~(_DWORD)v5) << 8);
  else {
    LODWORD(v7) = *(unsigned __int8 *)(v6 + v5);
  }
  int v8 = (int *)(v4 + 8LL * a3);
  int v9 = v5 + 1;
  uint64_t v10 = v7;
  else {
    uint64_t v7 = v7;
  }
  uint64_t v11 = v6 + v9;
  for (uint64_t i = (int)a4 + 1LL; i < v10; ++i)
  {
    int v13 = *(unsigned __int8 *)(v11 + i);
    int v14 = *v8;
    if (*v8 < 0) {
      int v14 = -v14;
    }
    int v15 = *(unsigned __int8 *)(v6 + v14 + 1 + i);
    a4 = (a4 + 1);
    if (v13 != v15) {
      return a4;
    }
  }

  return v7;
}

uint64_t icu::BytesTrieBuilder::countElementUnits(icu::BytesTrieBuilder *this, int a2, int a3, int a4)
{
  int v4 = 0;
  uint64_t v5 = *((void *)this + 3);
  uint64_t v6 = **((void **)this + 2) + a4;
LABEL_2:
  uint64_t v7 = a2;
  int v8 = *(_DWORD *)(v5 + 8LL * a2);
  if (v8 < 0) {
    int v8 = -v8;
  }
  int v9 = *(unsigned __int8 *)(v6 + v8 + 1);
  uint64_t v10 = (int *)(v5 + 8 + 8LL * a2);
  while (++v7 < a3)
  {
    int v12 = *v10;
    v10 += 2;
    int v11 = v12;
    if (v12 < 0) {
      int v11 = -v11;
    }
    if (v9 != *(unsigned __int8 *)(v6 + v11 + 1))
    {
      ++v4;
      a2 = v7;
      goto LABEL_2;
    }
  }

  return (v4 + 1);
}

uint64_t icu::BytesTrieBuilder::skipElementsBySomeUnits( icu::BytesTrieBuilder *this, uint64_t a2, int a3, int a4)
{
  uint64_t v4 = *((void *)this + 3);
  uint64_t v5 = **((void **)this + 2) + a3;
  do
  {
    int v6 = *(_DWORD *)(v4 + 8LL * (int)a2);
    if (v6 < 0) {
      int v6 = -v6;
    }
    int v7 = *(unsigned __int8 *)(v5 + v6 + 1);
    int v8 = (int *)(v4 + 8 + 8LL * (int)a2);
    do
    {
      int v10 = *v8;
      v8 += 2;
      int v9 = v10;
      if (v10 < 0) {
        int v9 = -v9;
      }
      a2 = (a2 + 1);
    }

    while (v7 == *(unsigned __int8 *)(v5 + v9 + 1));
    BOOL v11 = __OFSUB__(a4--, 1);
  }

  while (!((a4 < 0) ^ v11 | (a4 == 0)));
  return a2;
}

uint64_t icu::BytesTrieBuilder::indexOfElementWithNextUnit(uint64_t result, int a2, int a3, char a4)
{
  uint64_t v4 = *(void *)(result + 24);
  uint64_t v5 = **(void **)(result + 16) + a3;
  LODWORD(result) = a2 - 1;
  int v6 = (int *)(v4 + 8LL * a2);
  do
  {
    int v8 = *v6;
    v6 += 2;
    int v7 = v8;
    if (v8 < 0) {
      int v7 = -v7;
    }
    uint64_t result = (result + 1);
  }

  while (a4 == *(char *)(v5 + v7 + 1));
  return result;
}

icu::BytesTrieBuilder::BTLinearMatchNode *icu::BytesTrieBuilder::BTLinearMatchNode::BTLinearMatchNode( icu::BytesTrieBuilder::BTLinearMatchNode *this, char *a2, int a3, icu::StringTrieBuilder::Node *a4)
{
  if (a4) {
    int v5 = *((_DWORD *)a4 + 2);
  }
  else {
    int v5 = 0;
  }
  unsigned int v6 = v5 + 37 * a3 + 298634171;
  *((void *)this + 1) = v6;
  *((_BYTE *)this + 16) = 0;
  *((_DWORD *)this + 5) = 0;
  *((_DWORD *)this + 6) = a3;
  *(void *)this = &off_18970B260;
  *((void *)this + 4) = a4;
  *((void *)this + 5) = a2;
  *((_DWORD *)this + 2) = ustr_hashCharsN((unsigned __int8 *)a2, a3) + 37 * v6;
  return this;
}

uint64_t icu::BytesTrieBuilder::BTLinearMatchNode::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  uint64_t result = icu::StringTrieBuilder::LinearMatchNode::operator==(a1, a2);
  if ((_DWORD)result) {
    return memcmp(*(const void **)(a1 + 40), *(const void **)(a2 + 40), *(int *)(a1 + 24)) == 0;
  }
  return result;
}

uint64_t icu::BytesTrieBuilder::BTLinearMatchNode::write( icu::BytesTrieBuilder::BTLinearMatchNode *this, icu::StringTrieBuilder *a2)
{
  int v4 = (*(uint64_t (**)(icu::StringTrieBuilder *))(*(void *)a2 + 96LL))(a2);
  uint64_t result = (*(uint64_t (**)(icu::StringTrieBuilder *, void))(*(void *)a2 + 120LL))( a2,  (v4 + *((_DWORD *)this + 6) - 1));
  *((_DWORD *)this + 3) = result;
  return result;
}

uint64_t icu::BytesTrieBuilder::write(icu::BytesTrieBuilder *this, const char *a2, int a3)
{
  uint64_t v6 = *((int *)this + 13);
  uint64_t v7 = v6 + a3;
  if (icu::BytesTrieBuilder::ensureCapacity(this, (int)v6 + a3))
  {
    *((_DWORD *)this + 13) = v7;
    memcpy((void *)(*((void *)this + 5) - v7 + *((int *)this + 12)), a2, a3);
  }

  return *((unsigned int *)this + 13);
}

icu::BytesTrieBuilder::BTLinearMatchNode *icu::BytesTrieBuilder::createLinearMatchNode( icu::BytesTrieBuilder *this, unint64_t a2, int a3, int a4, icu::StringTrieBuilder::Node *a5)
{
  int v8 = a2;
  uint64_t result = (icu::BytesTrieBuilder::BTLinearMatchNode *)icu::UMemory::operator new((icu::UMemory *)0x30, a2);
  if (result)
  {
    int v11 = *(_DWORD *)(*((void *)this + 3) + 8LL * v8);
    if (v11 < 0) {
      int v11 = -v11;
    }
    return icu::BytesTrieBuilder::BTLinearMatchNode::BTLinearMatchNode( result,  (char *)(**((void **)this + 2) + (v11 + 1) + a3),  a4,  a5);
  }

  return result;
}

uint64_t icu::BytesTrieBuilder::ensureCapacity(icu::BytesTrieBuilder *this, int a2)
{
  if (!*((void *)this + 5)) {
    return 0LL;
  }
  LODWORD(v3) = *((_DWORD *)this + 12);
  do
    uint64_t v3 = 2LL * (int)v3;
  while ((int)v3 <= a2);
  int v4 = (char *)uprv_malloc((int)v3);
  int v5 = v4;
  if (v4)
  {
    uint64_t v6 = (char *)*((void *)this + 5);
    memcpy(&v4[v3 - *((int *)this + 13)], &v6[*((int *)this + 12) - *((int *)this + 13)], *((int *)this + 13));
    uint64_t v7 = 1LL;
  }

  else
  {
    LODWORD(v3) = 0;
    uint64_t v7 = 0LL;
    uint64_t v6 = (char *)*((void *)this + 5);
  }

  uprv_free(v6);
  *((void *)this + 5) = v5;
  *((_DWORD *)this + 12) = v3;
  return v7;
}

uint64_t icu::BytesTrieBuilder::write(icu::BytesTrieBuilder *this, char a2)
{
  uint64_t v4 = *((int *)this + 13);
  uint64_t v5 = v4 + 1;
  if (icu::BytesTrieBuilder::ensureCapacity(this, (int)v4 + 1))
  {
    *((_DWORD *)this + 13) = v5;
    *(_BYTE *)(*((void *)this + 5) - v5 + *((int *)this + 12)) = a2;
  }

  return *((unsigned int *)this + 13);
}

uint64_t icu::BytesTrieBuilder::writeElementUnits(icu::BytesTrieBuilder *this, int a2, int a3, int a4)
{
  int v4 = *(_DWORD *)(*((void *)this + 3) + 8LL * a2);
  if (v4 < 0) {
    int v4 = -v4;
  }
  return icu::BytesTrieBuilder::write(this, (const char *)(**((void **)this + 2) + (v4 + 1) + a3), a4);
}

uint64_t icu::BytesTrieBuilder::writeValueAndFinal(icu::BytesTrieBuilder *this, unsigned int a2, int a3)
{
  if (a2 <= 0x40) {
    return (*(uint64_t (**)(icu::BytesTrieBuilder *, void))(*(void *)this + 120LL))( this,  (2 * a2 + 32) | a3);
  }
  int v10 = 0;
  if (HIBYTE(a2))
  {
    LOBYTE(v10) = HIBYTE(a2);
    BYTE1(v10) = BYTE2(a2);
    BYTE2(v10) = BYTE1(a2);
    int v4 = 5;
    LOBYTE(v5) = 127;
    uint64_t v6 = 4LL;
  }

  else
  {
    if (a2 >> 8 > 0x1A)
    {
      if (a2 >> 17 > 8)
      {
        LOBYTE(v10) = BYTE2(a2);
        unsigned int v8 = 2;
        LOBYTE(v5) = 126;
      }

      else
      {
        int v5 = HIWORD(a2) + 108;
        unsigned int v8 = 1;
      }

      unsigned int v7 = v8 + 1;
      *(&v9 + v8) = BYTE1(a2);
    }

    else
    {
      LOBYTE(v5) = BYTE1(a2) + 81;
      unsigned int v7 = 1;
    }

    int v4 = v7 + 1;
    uint64_t v6 = v7;
  }

  *(&v9 + v6) = a2;
  char v9 = a3 | (2 * v5);
  return icu::BytesTrieBuilder::write(this, &v9, v4);
}

uint64_t icu::BytesTrieBuilder::writeValueAndType( icu::BytesTrieBuilder *this, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (*(uint64_t (**)(icu::BytesTrieBuilder *, uint64_t))(*(void *)this + 120LL))(this, a4);
  if (a2) {
    return (*(uint64_t (**)(icu::BytesTrieBuilder *, uint64_t, void))(*(void *)this + 136LL))( this,  a3,  0LL);
  }
  return result;
}

uint64_t icu::BytesTrieBuilder::writeDeltaTo(icu::BytesTrieBuilder *this, int a2, char *a3)
{
  int v4 = (icu::BytesTrieBuilder *)(*((_DWORD *)this + 13) - a2);
  if ((int)v4 <= 191) {
    return (*(uint64_t (**)(icu::BytesTrieBuilder *, void))(*(void *)this + 120LL))( this,  (*((_DWORD *)this + 13) - a2));
  }
  char v8 = 0;
  *(_DWORD *)unsigned int v7 = 0;
  int v6 = icu::BytesTrieBuilder::internalEncodeDelta(v4, v7, a3);
  return icu::BytesTrieBuilder::write(this, v7, v6);
}

uint64_t icu::BytesTrieBuilder::internalEncodeDelta(icu::BytesTrieBuilder *this, char *a2, char *a3)
{
  if ((int)this > 191)
  {
    if (this >> 12 > 2)
    {
      if (this >> 17 > 6)
      {
        if (this >> 24)
        {
          a2[1] = BYTE3(this);
          unsigned int v6 = 2;
          char v7 = -1;
        }

        else
        {
          unsigned int v6 = 1;
          char v7 = -2;
        }

        *a2 = v7;
        unsigned int v5 = v6 + 1;
        a2[v6] = BYTE2(this);
      }

      else
      {
        *a2 = BYTE2(this) - 16;
        unsigned int v5 = 1;
      }

      unsigned int v4 = v5 + 1;
      a2[v5] = BYTE1(this);
    }

    else
    {
      *a2 = BYTE1(this) - 64;
      unsigned int v4 = 1;
    }

    uint64_t v3 = v4 + 1;
    a2[v4] = (char)this;
  }

  else
  {
    *a2 = (char)this;
    return 1LL;
  }

  return v3;
}

uint64_t sub_1807C1C78()
{
  return 0LL;
}

uint64_t sub_1807C1C80()
{
  return 5LL;
}

uint64_t sub_1807C1C88()
{
  return 16LL;
}

uint64_t sub_1807C1C90()
{
  return 16LL;
}

void sub_1807C1C9C(icu::UObject *a1)
{
}

icu::BytesTrie::Iterator *icu::BytesTrie::Iterator::Iterator( icu::BytesTrie::Iterator *this, unint64_t a2, int a3, UErrorCode *a4)
{
  *(void *)this = a2;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = a2;
  *((void *)this + 3) = -1LL;
  *((void *)this + 4) = 0LL;
  *((_DWORD *)this + 10) = a3;
  *((_DWORD *)this + 11) = 0;
  *((void *)this + 6) = 0LL;
  if (*(int *)a4 <= 0)
  {
    uint64_t v6 = icu::UMemory::operator new((icu::UMemory *)0x40, a2);
    if (v6)
    {
      *(void *)uint64_t v6 = v6 + 13;
      *(_DWORD *)(v6 + 8) = 40;
      *(_WORD *)(v6 + 12) = 0;
      *(_DWORD *)(v6 + 56) = 0;
    }

    *((void *)this + 4) = v6;
    char v8 = (icu::UVector32 *)icu::UMemory::operator new((icu::UMemory *)0x20, v7);
    if (v8) {
      char v8 = icu::UVector32::UVector32(v8, a4);
    }
    *((void *)this + 6) = v8;
  }

  return this;
}

icu::BytesTrie::Iterator *icu::BytesTrie::Iterator::Iterator( icu::BytesTrie::Iterator *this, const icu::BytesTrie *a2, int a3, UErrorCode *a4)
{
  uint64_t v5 = *((void *)a2 + 2);
  *(void *)this = *((void *)a2 + 1);
  *((void *)this + 1) = v5;
  *((void *)this + 2) = v5;
  int v6 = *((_DWORD *)a2 + 6);
  *((_DWORD *)this + 6) = v6;
  *((_DWORD *)this + 7) = v6;
  *((void *)this + 4) = 0LL;
  *((_DWORD *)this + 10) = a3;
  *((_DWORD *)this + 11) = 0;
  *((void *)this + 6) = 0LL;
  if (*(int *)a4 <= 0)
  {
    uint64_t v8 = icu::UMemory::operator new((icu::UMemory *)0x40, (unint64_t)a2);
    if (v8)
    {
      *(void *)uint64_t v8 = v8 + 13;
      *(_DWORD *)(v8 + 8) = 40;
      *(_WORD *)(v8 + 12) = 0;
      *(_DWORD *)(v8 + 56) = 0;
    }

    *((void *)this + 4) = v8;
    int v10 = (icu::UVector32 *)icu::UMemory::operator new((icu::UMemory *)0x20, v9);
    if (v10) {
      int v10 = icu::UVector32::UVector32(v10, a4);
    }
    *((void *)this + 6) = v10;
    if (*(int *)a4 <= 0)
    {
      if (v10 && (int v11 = (icu::CharString *)*((void *)this + 4)) != 0LL)
      {
        int v12 = *((_DWORD *)this + 6);
        if ((v12 & 0x80000000) == 0)
        {
          int v13 = *((_DWORD *)this + 10);
          if (v12 < v13 || v13 < 1) {
            int v15 = v12 + 1;
          }
          else {
            int v15 = *((_DWORD *)this + 10);
          }
          icu::CharString::append(v11, *((const char **)this + 1), v15, a4);
          *((void *)this + 1) += v15;
          *((_DWORD *)this + 6) -= v15;
        }
      }

      else
      {
        *a4 = U_MEMORY_ALLOCATION_ERROR;
      }
    }
  }

  return this;
}

void icu::BytesTrie::Iterator::~Iterator(icu::BytesTrie::Iterator *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 12)) {
      uprv_free(*(void **)v2);
    }
    icu::UMemory::operator delete((void *)v2);
  }

  uint64_t v3 = *((void *)this + 6);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
}

icu::BytesTrie::Iterator *icu::BytesTrie::Iterator::reset(icu::BytesTrie::Iterator *this)
{
  *((void *)this + 1) = *((void *)this + 2);
  int v2 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 6) = v2;
  int v3 = *((_DWORD *)this + 10);
  if (v2 < v3 || v3 < 1) {
    int v5 = v2 + 1;
  }
  else {
    int v5 = *((_DWORD *)this + 10);
  }
  icu::CharString::truncate(*((void *)this + 4), v5);
  *((void *)this + 1) += v5;
  *((_DWORD *)this + 6) -= v5;
  icu::UVector32::setSize(*((icu::UVector32 **)this + 6), 0);
  return this;
}

BOOL icu::BytesTrie::Iterator::hasNext(icu::BytesTrie::Iterator *this)
{
  return *((void *)this + 1) || *(_DWORD *)(*((void *)this + 6) + 8LL) != 0;
}

uint64_t icu::BytesTrie::Iterator::next(icu::BytesTrie::Iterator *this, UErrorCode *a2)
{
  int v5 = (char *)*((void *)this + 1);
  if (!v5)
  {
    uint64_t v13 = *((void *)this + 6);
    int v14 = *(_DWORD *)(v13 + 8);
    if (!v14) {
      return 0LL;
    }
    if (v14 <= 0)
    {
      unsigned int v17 = 0;
      uint64_t v18 = 0LL;
      uint64_t v16 = *(void *)this;
      int v19 = v14 - 2;
    }

    else
    {
      uint64_t v15 = *(void *)(v13 + 24);
      uint64_t v16 = *(void *)this;
      unsigned int v17 = *(_DWORD *)(v15 + 4LL * (v14 - 1));
      if (v14 == 1)
      {
        uint64_t v18 = 0LL;
        int v19 = -1;
      }

      else
      {
        int v19 = v14 - 2;
        uint64_t v18 = *(int *)(v15 + 4LL * (v14 - 2));
      }
    }

    uint64_t v20 = (char *)(v16 + v18);
    icu::UVector32::setSize((icu::UVector32 *)v13, v19);
    icu::CharString::truncate(*((void *)this + 4), (unsigned __int16)v17);
    if (v17 < 0x20000)
    {
      char v21 = *v20;
      int v5 = v20 + 1;
      icu::CharString::append(*((icu::CharString **)this + 4), v21, a2);
    }

    else
    {
      int v5 = icu::BytesTrie::Iterator::branchNext(this, v20, HIWORD(v17), a2);
      if (!v5) {
        return 1LL;
      }
    }
  }

  if ((*((_DWORD *)this + 6) & 0x80000000) == 0)
  {
LABEL_5:
    *((void *)this + 1) = 0LL;
    *((_DWORD *)this + 11) = -1;
    return 1LL;
  }

  while (1)
  {
    int v11 = v5 + 1;
    unsigned int v10 = *v5;
    if (v10 > 0x1F) {
      break;
    }
    int v6 = *((_DWORD *)this + 10);
    if (v6 < 1)
    {
      if (v10 >= 0x10)
      {
        unsigned int v9 = v10 - 15;
        unint64_t v7 = (icu::CharString *)*((void *)this + 4);
        goto LABEL_17;
      }

LABEL_12:
      if (!*v5)
      {
        unsigned int v10 = *v11;
        int v11 = v5 + 2;
      }

      int v5 = icu::BytesTrie::Iterator::branchNext(this, v11, v10 + 1, a2);
      if (!v5) {
        return 1LL;
      }
    }

    else
    {
      unint64_t v7 = (icu::CharString *)*((void *)this + 4);
      int v8 = *((_DWORD *)v7 + 14);
      if (v6 == v8) {
        goto LABEL_5;
      }
      if (v10 < 0x10) {
        goto LABEL_12;
      }
      unsigned int v9 = v10 - 15;
      if ((int)(v8 + v10 - 15) > v6)
      {
        icu::CharString::append(v7, v11, v6 - v8, a2);
        goto LABEL_5;
      }

    unsigned int v9 = v3 == 0;
  }

  else
  {
    unsigned int v9 = a2 == 0LL;
  }

  if (v9) {
    return 0LL;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

  unsigned int v17 = uhash_get(*(void *)(a2 + 16), a3);
  if (v17) {
    uint64_t v18 = (char *)v17;
  }
  else {
    uint64_t v18 = (char *)a3;
  }
  int v19 = uhash_get(*(void *)(a2 + 24), (uint64_t)a5);
  if (v19) {
    uint64_t v20 = (char *)v19;
  }
  else {
    uint64_t v20 = a5;
  }
  sub_1807E0B78(v18, a2, a4, v20, a7);
}

  if (v6 > 0x2F)
  {
    unsigned int v4 = *v7;
    goto LABEL_4;
  }

  if (!v6)
  {
    unsigned int v10 = *v7++;
    int v6 = v10;
  }

  int v5 = v6 + 1;
  (*(void (**)(icu::Appendable *, uint64_t))(*(void *)a2 + 48LL))(a2, v5);
  icu::UCharsTrie::getNextBranchUChars(v7, v5, (uint64_t)a2);
  return v5;
}

  uint64_t v13 = v6 + 1;
  do
  {
    int v14 = *v2++;
    *v3++ = v14;
    --v13;
  }

  while (v13 > 1);
  *(void *)(result + 16) = v2;
  *(void *)(result + 32) = v3;
  if (v5)
  {
    do
    {
      *(_DWORD *)int v5 = v12;
      v5 += 4LL;
      ++v12;
      --v6;
    }

    while (v6);
LABEL_18:
    *(void *)(result + 48) = v5;
  }

  return result;
}

  unsigned int v9 = *((_DWORD *)this + 3);
LABEL_13:
  offset = 0;
  if (v9)
  {
    unsigned int v10 = 0;
    int v11 = 0;
    while (1)
    {
      int v12 = v10 + 1;
      offset = v10 + 1;
      if (*(_WORD *)&v8[2 * v10] == 92)
      {
        icu::UnicodeString::doAppend(a2, (uint64_t)v8, v11, (v10 - v11));
        uint64_t v13 = *((unsigned __int16 *)this + 4);
        if ((v13 & 0x8000) != 0) {
          int v14 = *((_DWORD *)this + 3);
        }
        else {
          int v14 = v13 >> 5;
        }
        uint64_t result = u_unescapeAt((UNESCAPE_CHAR_AT)sub_1808671A4, &offset, v14, this);
        if ((result & 0x80000000) != 0)
        {
          if ((*(_WORD *)(a2 + 8) & 1) != 0) {
            uint64_t v15 = 2;
          }
          else {
            uint64_t v15 = *(_WORD *)(a2 + 8) & 0x1F;
          }
          *(_WORD *)(a2 + 8) = v15;
          return result;
        }

        icu::UnicodeString::append(a2, result);
        int v12 = offset;
        int v11 = offset;
      }

      unsigned int v10 = v12;
      if (v12 == v9) {
        return icu::UnicodeString::doAppend(a2, (uint64_t)v8, v11, v9 - v11);
      }
    }
  }

  int v11 = 0;
  return icu::UnicodeString::doAppend(a2, (uint64_t)v8, v11, v9 - v11);
}

  int v8 = v10;
  if (count < 0) {
    goto LABEL_13;
  }
LABEL_6:
  int v11 = v9 - v8;
  if (v11 >= count)
  {
    if (a4) {
      goto LABEL_8;
    }
    return v7 == 0;
  }

  unsigned int v9 = 0;
LABEL_13:
  a3 = v9;
LABEL_14:
  if (a4) {
    int v11 = a6;
  }
  else {
    int v11 = 0;
  }
  if ((v6 & 2) != 0) {
    int v12 = a1 + 10;
  }
  else {
    int v12 = *(void *)(a1 + 24);
  }
  uint64_t v13 = (unsigned __int16 *)(v12 + 2LL * a2);
  if (a4) {
    int v14 = a5;
  }
  else {
    int v14 = 0LL;
  }
  uint64_t v15 = (unsigned __int16 *)(a4 + 2 * v14);
  if (!a4) {
    uint64_t v15 = 0LL;
  }
  uint64_t v16 = sub_18087F540(v13, a3, v15, v11, 0, 1);
  unsigned int v10 = (v16 >> 15) | 1;
  if (!v16) {
    LOBYTE(v10) = 0;
  }
  return (char)v10;
}

  a3 = v6;
  if (count < 0) {
    goto LABEL_13;
  }
LABEL_6:
  unint64_t v7 = v5 - a3;
  if (v7 < count) {
    goto LABEL_14;
  }
  if ((v4 & 2) == 0)
  {
LABEL_8:
    int v8 = *(void *)(a1 + 24);
    goto LABEL_16;
  }

  int v19 = v21;
  if (length < 0) {
    goto LABEL_13;
  }
LABEL_8:
  unint64_t v22 = v20 - v19;
  if (v22 < length) {
LABEL_14:
  }
    uint64_t v18 = v22;
  unsigned int v23 = (__int16)v12;
  unint64_t v24 = v12 >> 5;
  if (v23 < 0) {
    unint64_t v24 = *((_DWORD *)a4 + 3);
  }
  if (a5 < 0)
  {
    unsigned int v25 = 0;
    goto LABEL_21;
  }

  unsigned int v25 = v24;
  if (v24 < a5) {
LABEL_21:
  }
    unsigned int v17 = v25;
  unint64_t v26 = a9;
  if ((a6 & 0x80000000) != 0)
  {
    int v27 = 0LL;
    goto LABEL_26;
  }

  int v27 = (v24 - v17);
  if ((int)v27 < (int)a6) {
LABEL_26:
  }
    uint64_t v16 = v27;
  int v28 = (__int16)v14;
  int v29 = v14 >> 5;
  if (v28 < 0) {
    int v29 = *((_DWORD *)a7 + 3);
  }
  if (a8 < 0)
  {
    unsigned int v30 = 0;
  }

  else
  {
    unsigned int v30 = v29;
    if (v29 >= a8)
    {
      if ((a9 & 0x80000000) == 0) {
        goto LABEL_32;
      }
      goto LABEL_36;
    }
  }

  uint64_t v15 = v30;
  if ((a9 & 0x80000000) == 0)
  {
LABEL_32:
    uint64_t v31 = (v29 - v15);
    goto LABEL_37;
  }

  int v11 = 0;
LABEL_13:
  a3 = v11;
LABEL_14:
  if (a4) {
    uint64_t v13 = a6;
  }
  else {
    uint64_t v13 = 0;
  }
  if ((v7 & 2) != 0) {
    int v14 = a1 + 10;
  }
  else {
    int v14 = *(void *)(a1 + 24);
  }
  uint64_t v15 = (UChar *)(v14 + 2LL * a2);
  if (a4) {
    uint64_t v16 = a5;
  }
  else {
    uint64_t v16 = 0LL;
  }
  unsigned int v17 = (UChar *)(a4 + 2 * v16);
  if (v15 == v17)
  {
    if (v13 < 0) {
      uint64_t v13 = u_strlen(&v15[v16]);
    }
    uint64_t v20 = a3 - v13;
    if (v20)
    {
      int v19 = HIBYTE(v20);
      return (char)(v19 | 1);
    }
  }

  else
  {
    unint64_t v22 = 0;
    uint64_t v18 = sub_18087D62C(v15, a3, v17, v13, a7, &v22);
    if (v18)
    {
      int v19 = HIBYTE(v18);
      return (char)(v19 | 1);
    }
  }

  return 0;
}

        int v8 = v13;
        if ((a3 & 0x80000000) == 0)
        {
LABEL_8:
          int v14 = (v12 - v8);
          if ((int)v14 >= (int)a3)
          {
LABEL_15:
            uint64_t v15 = (_DWORD)cs + 0x7FFFFFFF;
            uint64_t v16 = v15 - (_DWORD)cs;
            if (a5 >= 0x7FFFFFFF) {
              unsigned int v17 = v16;
            }
            else {
              unsigned int v17 = a5;
            }
            unsigned int v30 = U_ZERO_ERROR;
            if (!(_DWORD)v7)
            {
              int v19 = cs;
              uint64_t v20 = v17;
              char v21 = 0LL;
              return u_terminateChars((uint64_t)v19, v20, v21, (int *)&v30);
            }

            if (a6)
            {
              if (*a6)
              {
                uint64_t v18 = (UConverter *)ucnv_open((unsigned __int8 *)a6, &v30);
                unsigned int v10 = icu::UnicodeString::doExtract(this, v8, v7, cs, v17, v18, &v30);
                ucnv_close(v18);
                return v10;
              }

              else {
                unint64_t v24 = v7;
              }
              if ((v11 & 2) != 0) {
                unsigned int v25 = (char *)this + 10;
              }
              else {
                unsigned int v25 = (char *)*((void *)this + 3);
              }
              u_UCharsToChars((const UChar *)&v25[2 * v8], cs, v24);
              int v19 = cs;
              uint64_t v20 = v17;
              char v21 = v7;
              return u_terminateChars((uint64_t)v19, v20, v21, (int *)&v30);
            }

            DefaultName = ucnv_getDefaultName();
            unsigned int v23 = *(unsigned __int8 *)DefaultName;
            if (v23 == 117)
            {
              if (DefaultName[1] != 116 || DefaultName[2] != 102) {
                goto LABEL_47;
              }
            }

            else if (v23 != 85 || DefaultName[1] != 84 || DefaultName[2] != 70)
            {
              goto LABEL_47;
            }

            unint64_t v26 = *((unsigned __int8 *)DefaultName + 3);
            if (v26 == 56)
            {
              if (!DefaultName[4]) {
                return icu::UnicodeString::toUTF8(this, v8, v7, cs, v17);
              }
            }

            else if (v26 == 45 && DefaultName[4] == 56 && !DefaultName[5])
            {
              return icu::UnicodeString::toUTF8(this, v8, v7, cs, v17);
            }

  if (v9 >= srcLength)
  {
    if (srcLength <= 715827882)
    {
      int v11 = 3 * srcLength;
      int v12 = v9 - (3 * srcLength + 1);
      if (v9 <= 3 * srcLength + 1) {
        int v12 = 0;
      }
      uint64_t v13 = &dest[v12];
      if (v9 >= v11 + 1) {
        int v14 = v11 + 1;
      }
      else {
        int v14 = v9;
      }
      if (!a5)
      {
        int v6 = v13;
        unsigned int v9 = v14;
      }
    }

    unsigned int v10 = v6;
  }

  else
  {
    unsigned int v10 = 0LL;
    unsigned int v9 = 0;
  }

  return u_strToUTF8(v10, v9, pDestLength, src, srcLength, (UErrorCode *)a6);
}

    unsigned int v9 = 0LL;
    int v6 = 0LL;
    unint64_t v7 = 0LL;
    int v11 = 0LL;
    goto LABEL_13;
  }

  if (v5 != 2)
  {
    *a2 = 17;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 32) = 0;
    return result;
  }

  if (!(_DWORD)v4) {
    goto LABEL_12;
  }
  int v6 = 0LL;
  unint64_t v7 = 0LL;
  int v8 = (unsigned __int16 *)(*(void *)(*(void *)(result + 8) + 8LL) + 4 * v4);
  unsigned int v10 = *v8;
  unsigned int v9 = v8 + 1;
  LODWORD(v4) = v10;
  int v11 = (uint64_t)&v9[v10 + ((v10 & 1) == 0)];
LABEL_13:
  *(void *)a3 = v9;
  *(void *)(a3 + 8) = v6;
  *(void *)(a3 + 16) = v7;
  *(void *)(a3 + 24) = v11;
  *(_DWORD *)(a3 + 32) = v4;
  return result;
}

  ucnv_toUnicode( (uint64_t)v9,  (char **)&v15,  (unint64_t)&dst[n],  (unint64_t *)&v16,  (unint64_t)&src[v10],  0LL,  1,  &v14);
  ucnv_reset((uint64_t)v9);
  u_releaseDefaultConverter(v9);
  if (v14 >= 1 && v14 != 15) {
    *dst = 0;
  }
  int v8 = v15;
  if (v15 < &dst[n]) {
LABEL_18:
  }
    *int v8 = 0;
  return dst;
}

  ucnv_fromUnicode( (uint64_t)v9,  (uint64_t *)&v15,  (unint64_t)&dst[n],  (unint64_t *)&v16,  (unint64_t)&src[v10],  0LL,  1,  &v14);
  ucnv_reset((uint64_t)v9);
  u_releaseDefaultConverter(v9);
  if (v14 >= 1 && v14 != 15) {
    *dst = 0;
  }
  int v8 = v15;
  if (v15 < &dst[n]) {
LABEL_18:
  }
    *int v8 = 0;
  return dst;
}

  if (pIsError)
  {
    *pIsError = 1;
  }

  else if (length - i >= 1)
  {
    if (length - i >= 3) {
      unsigned int v10 = 3;
    }
    else {
      unsigned int v10 = length - i;
    }
    int v11 = &s[i];
    int v12 = dword_180A2CA74[v10 - 1];
    if (v10 == 1)
    {
      *int v11 = v12;
      uint64_t v15 = 1;
    }

    else
    {
      if (v10 > 2)
      {
        uint64_t v13 = (v12 >> 12) | 0xFFFFFFE0;
        v11[1] = (v12 >> 6) & 0x3F | 0x80;
        int v14 = 2;
      }

      else
      {
        uint64_t v13 = (v12 >> 6) | 0xFFFFFFC0;
        int v14 = 1;
      }

      *int v11 = v13;
      uint64_t v16 = v12 & 0x3F | 0x80;
      uint64_t v15 = v14 + 1;
      v11[v14] = v16;
    }

    i += v15;
  }

  return i;
}

  a1[36038] = v9 + 32;
  unsigned int v10 = (uint64_t)(int)v9 >> 5;
LABEL_13:
  uint64_t v16 = (__int128 *)((char *)*v6 + 4 * v8);
  unsigned int v17 = *v16;
  uint64_t v18 = v16[1];
  int v19 = v16[3];
  uint64_t v20 = (char *)*v6 + 4 * (int)v9;
  v20[2] = v16[2];
  v20[3] = v19;
  *uint64_t v20 = v17;
  v20[1] = v18;
  char v21 = v16[4];
  unint64_t v22 = v16[5];
  unsigned int v23 = v16[7];
  v20[6] = v16[6];
  v20[7] = v23;
  v20[4] = v21;
  v20[5] = v22;
  a1[v10 + 36044] = 0;
  if ((v9 & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  ++a1[(v9 >> 5) + 36044];
  unint64_t v24 = v7[544];
  unsigned int v25 = &a1[(v24 >> 5) + 36044];
  if ((*v25)-- == 1)
  {
    *unsigned int v25 = -a1[36039];
    a1[36039] = v24;
  }

  v7[544] = v9;
  return v9;
}

      ++v3;
    }

    while (v3 < v2);
  }

  return v4;
}

      icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v46);
      unsigned int v10 = (icu::Transliterator *)((_DWORD)v10 + 1);
      if ((_DWORD)v10 == v9) {
        goto LABEL_37;
      }
    }

    unsigned int v23 = v21;
    unint64_t v24 = 0LL;
    while (1)
    {
      memset(&__s1[8], 0, 56);
      *(void *)__s1 = off_18971B688;
      *(_WORD *)&__s1[8] = 2;
      icu::Transliterator::_getAvailableVariant( v24,  (uint64_t)&v51,  (const icu::UnicodeString *)&v46,  (const icu::UnicodeString *)__s1,  v22);
      uint64_t v45 = 0LL;
      uint64_t v43 = 0u;
      __int128 v44 = 0u;
      uint64_t v42 = 0u;
      __int128 v41 = (UChar *)off_18971B688;
      LOWORD(v42) = 2;
      v38[0] = "A";
      icu::UnicodeString::UnicodeString(v40, 1LL, v38);
      sub_1809A0214(v40, (uint64_t)&v46, (uint64_t)__s1, (uint64_t)&v41);
      icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)v40);
      __int128 v35 = v38[0];
      __int128 v39 = 0;
      int v27 = (icu::Transliterator *)icu::UMemory::operator new(&v35, (icu::UMemory *)0xA8, v26);
      if (v27)
      {
        int v27 = sub_180894518(v27, &v41, &v46, (uint64_t)__s1, v20, &v39);
        if (v39 < 1) {
          goto LABEL_34;
        }
        (*(void (**)(icu::Transliterator *))(*(void *)v27 + 8LL))(v27);
      }

      else
      {
        int v29 = v39;
        if (v39 < 1)
        {
LABEL_34:
          icu::Transliterator::_registerInstance(v27, v28);
          __int128 v37 = "N";
          icu::UnicodeString::UnicodeString(v40, 1LL, &v37);
          icu::Transliterator::_registerSpecialInverse( (icu::Transliterator *)&v46,  (const icu::UnicodeString *)v40,  0LL);
          icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)v40);
          uint64_t v34 = v37;
          int v29 = (unint64_t)&v34;
        }
      }

      icu::UnicodeString::~UnicodeString((void *)v29, (icu::UnicodeString *)&v41);
      icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)__s1);
      unint64_t v24 = (icu::Transliterator *)((_DWORD)v24 + 1);
      if (v23 == (_DWORD)v24) {
        goto LABEL_12;
      }
    }
  }

    *(void *)a4 = off_189722E70;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = v10;
    if (!v9) {
      return this;
    }
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v9 + 8))(v9);
  }

  this = (uint64_t *)sub_1808F5480((uint64_t)this, 5, a3);
  *unsigned int v9 = (uint64_t)&off_189722F68;
  unsigned int v10 = *a3;
  uint64_t v20 = 0u;
  unsigned int v23 = 0LL;
  unint64_t v22 = 0u;
  char v21 = 0u;
  int v19 = (UChar *)off_18971B688;
  LOWORD(v20) = 2;
  unsigned int v17 = 0;
  uint64_t v16 = 0LL;
  memset(v15, 0, sizeof(v15));
  sub_1808F5774(a3, (uint64_t)v9, (uint64_t)v15);
  HIDWORD(v16) = 1;
  umtx_lock((icu::UMutex *)&unk_18C535368);
  icu::DateIntervalFormat::formatIntervalImpl( v8,  a2,  (icu::UnicodeString *)&v19,  (BOOL *)&v17,  (icu::FieldPositionHandler *)v15,  a3);
  umtx_unlock((std::mutex **)&unk_18C535368);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v18, &v19);
  sub_1808F5784((uint64_t)v9, (uint64_t)v18, (int *)a3);
  icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v18);
  int v12 = *a3;
  if (v17 != 255)
  {
    sub_1808F57E8((uint64_t)v9, 4101, v17, a3);
    int v12 = *a3;
    if (*(int *)a3 > 0)
    {
LABEL_9:
      uint64_t v13 = 0LL;
      goto LABEL_19;
    }

    sub_1808F5BE0((uint64_t)v9);
  }

  int v12 = U_ZERO_ERROR;
  uint64_t v13 = v9;
  unsigned int v9 = 0LL;
LABEL_19:
  *(void *)a4 = off_189722E70;
  *(void *)(a4 + 8) = v13;
  *(_DWORD *)(a4 + 16) = v12;
  icu::FieldPositionIteratorHandler::~FieldPositionIteratorHandler((icu::FieldPositionIteratorHandler *)v15);
  this = (uint64_t *)icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v19);
  if (!v9) {
    return this;
  }
  return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v9 + 8))(v9);
}

    *(void *)a5 = off_189722E70;
    *(void *)(a5 + 8) = 0LL;
    *(_DWORD *)(a5 + 16) = v12;
    if (!v11) {
      return this;
    }
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v11 + 8))(v11);
  }

  this = (uint64_t *)sub_1808F5480((uint64_t)this, 5, a4);
  *int v11 = (uint64_t)&off_189722F68;
  int v12 = *a4;
  unint64_t v22 = 0u;
  unsigned int v25 = 0LL;
  unint64_t v24 = 0u;
  unsigned int v23 = 0u;
  char v21 = (UChar *)off_18971B688;
  LOWORD(v22) = 2;
  int v19 = 0;
  uint64_t v18 = 0LL;
  memset(v17, 0, sizeof(v17));
  sub_1808F5774(a4, (uint64_t)v11, (uint64_t)v17);
  HIDWORD(v18) = 1;
  umtx_lock((icu::UMutex *)&unk_18C535368);
  icu::DateIntervalFormat::formatImpl( v10,  a2,  a3,  (icu::UnicodeString *)&v21,  (BOOL *)&v19,  (icu::FieldPositionHandler *)v17,  a4);
  umtx_unlock((std::mutex **)&unk_18C535368);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v20, &v21);
  sub_1808F5784((uint64_t)v11, (uint64_t)v20, (int *)a4);
  icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v20);
  int v14 = *a4;
  if (*(int *)a4 <= 0)
  {
    if (v19 != 255)
    {
      sub_1808F57E8((uint64_t)v11, 4101, v19, a4);
      sub_1808F5BE0((uint64_t)v11);
    }

    int v14 = U_ZERO_ERROR;
    uint64_t v15 = v11;
    int v11 = 0LL;
  }

  else
  {
    uint64_t v15 = 0LL;
  }

  *(void *)a5 = off_189722E70;
  *(void *)(a5 + 8) = v15;
  *(_DWORD *)(a5 + 16) = v14;
  icu::FieldPositionIteratorHandler::~FieldPositionIteratorHandler((icu::FieldPositionIteratorHandler *)v17);
  this = (uint64_t *)icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v21);
  if (v11) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v11 + 8))(v11);
  }
  return this;
}

    ++v5;
  }

  while (v5 != 16);
  return result;
}

            *a3 = 3;
LABEL_13:
            uint64_t v18 = 1;
            goto LABEL_14;
          }

          uint64_t v18 = 0;
          int v29 = v32;
          uint64_t v32 = v29;
LABEL_14:
          if (v15) {
            ures_close(v15);
          }
          if (v18)
          {
            unsigned int v4 = 0LL;
            goto LABEL_56;
          }

          goto LABEL_6;
        }

        uint64_t v20 = ures_getNextResource(v15, 0LL, a3);
        char v21 = (uint64_t)v20;
        if (*a3 > 0) {
          break;
        }
        unsigned int v23 = (const char *)ures_getKey((uint64_t)v20);
        if (!strcmp(v23, "start"))
        {
          IntVector = ures_getIntVector(v21, &v33, a3);
          if (*a3 > 0) {
            break;
          }
          if (v33 != 3
            || (unint64_t v26 = *IntVector, v26 != (__int16)v26)
            || (int v27 = IntVector[1], (v27 - 1) > 0xB)
            || (int v28 = IntVector[2], (v28 - 1) >= 0x1F))
          {
            unint64_t v22 = 0;
            *a3 = 3;
            if (!v21) {
              goto LABEL_29;
            }
LABEL_28:
            ures_close(v21);
            goto LABEL_29;
          }

          v11[v17] = (v27 << 8) | (v26 << 16) | v28;
        }

        else if (!strcmp(v23, "named"))
        {
          String = ures_getString(v21, &v33, a3);
          if (!u_strncmp(String, (const UChar *)"f", 5)) {
            int v19 = 0;
          }
        }

        unint64_t v22 = 1;
        if (v21) {
          goto LABEL_28;
        }
LABEL_29:
        if ((v22 & 1) == 0) {
          goto LABEL_13;
        }
      }

      unint64_t v22 = 0;
      if (!v21) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }

    unsigned int v30 = icu::UMemory::operator new(v13, (icu::UMemory *)0x10, v12);
    unsigned int v4 = (icu::EraRules *)v30;
    if (v6 || v32 == 0x7FFFFFFF)
    {
      if (v30)
      {
        *unsigned int v30 = 0LL;
        *((_DWORD *)v30 + 2) = Size;
LABEL_54:
        uprv_free(0LL);
        *(void *)unsigned int v4 = v11;
        icu::EraRules::initCurrentEra(v4);
        int v11 = 0LL;
        goto LABEL_56;
      }
    }

    else if (v30)
    {
      *unsigned int v30 = 0LL;
      *((_DWORD *)v30 + 2) = v32;
      goto LABEL_54;
    }

          if (v10 < 13) {
            break;
          }
          ++v9;
          v11 += 12;
          v10 -= 13;
        }
      }

      icu::Calendar::set(v6, 2u, v10);
      icu::Calendar::set(v6, 1u, v9);
      return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, UErrorCode *))(*(void *)v6 + 392LL))(v6, 5LL, a4);
    }

    else
    {
      return icu::Calendar::add(result, a2, a3, a4);
    }
  }

  return result;
}

          if (v8 != 2) {
            goto LABEL_13;
          }
          uint64_t v15 = 39;
          icu::UnicodeString::doAppend(v3, (uint64_t)&v15, 0, 1LL);
          this = icu::UnicodeString::append(v3, v10);
          int v8 = 0;
LABEL_14:
          if (v10 < 0x10000) {
            int v11 = 1;
          }
          else {
            int v11 = 2;
          }
          v7 += v11;
          int v12 = *(unsigned __int16 *)(v6 + 8);
          uint64_t v13 = (__int16)v12;
          LODWORD(a2) = v12 >> 5;
          if (v13 >= 0) {
            a2 = a2;
          }
          else {
            a2 = *(unsigned int *)(v6 + 12);
          }
          if (v8 == 2)
          {
            uint64_t v16 = 39;
            this = icu::UnicodeString::doAppend(v3, (uint64_t)&v16, 0, 1LL);
          }

          break;
      }

      break;
    }
  }

  return this;
}

  int v11 = 5;
  if (a3)
  {
    memset(v16, 0, sizeof(v16));
    icu::PluralRules::select(a3, a4, (icu::UnicodeString *)v16);
    uint64_t v13 = icu::StandardPlural::indexOrNegativeFromString((icu::StandardPlural *)v16, v12);
    if (v13 < 0) {
      int v11 = 5;
    }
    else {
      int v11 = v13;
    }
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v16);
  }

  uint64_t v15 = *(__int16 **)(a1 + 8LL * (v11 + 8 * v7) + 8);
  if (v11 != 5 && !v15) {
    uint64_t v15 = *(__int16 **)(a1 + (((uint64_t)v7 << 6) | 0x28) + 8);
  }
  if (v15 == L"<USE FALLBACK>") {
    return 0LL;
  }
  else {
    return v15;
  }
}

      LOBYTE(v10) = 0;
      goto LABEL_14;
    }

    LOBYTE(v10) = *(_BYTE *)(*((void *)this + 6) + v10);
LABEL_14:
    uint64_t result = 10 * result + (char)v10;
    if (v4 <= v6) {
      break;
    }
    --v4;
    v8 -= 4;
  }

  while ((double)result <= 1.0e18);
  if ((a2 & 1) == 0 && result)
  {
    while (!(result % 0xA))
    {
      int v11 = result > 9;
      result /= 0xAuLL;
      if (!v11) {
        return 0LL;
      }
    }
  }

  return result;
}

    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    return 0LL;
  }

  icu::number::impl::MutablePatternModifier::createImmutableForPlural(this, 8, a2, v16);
  icu::number::impl::AdoptingSignumModifierStore::operator=(v6 + 208, (uint64_t)v16);
  icu::number::impl::AdoptingSignumModifierStore::~AdoptingSignumModifierStore((icu::number::impl::AdoptingSignumModifierStore *)v16);
  uint64_t v15 = (uint64_t *)*(unsigned int *)a2;
  uint64_t result = icu::UMemory::operator new(v15, (icu::UMemory *)0x20, v14);
  if (result)
  {
    *uint64_t result = (uint64_t)&off_1897280D8;
    result[1] = v6;
    result[2] = 0LL;
    result[3] = 0LL;
  }

  return result;
}

    uint64_t result = icu::number::impl::ParsedPatternInfo::consumeLiteral((icu::number::impl::ParsedPatternInfo *)a1, a3);
  }

  switch((int)result)
  {
    case '#':
    case '*':
    case ',':
    case '.':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ';':
    case '@':
      break;
    case '$':
    case '&':
    case '\'':
    case '(':
    case ')':
    case '/':
    case ':':
    case '<':
    case '=':
    case '>':
    case '?':
      goto LABEL_12;
    case '%':
      *(_BYTE *)(*(void *)(a1 + 424) + 136LL) = 1;
      goto LABEL_12;
    case '+':
      *(_BYTE *)(*(void *)(a1 + 424) + 141LL) = 1;
      goto LABEL_12;
    case '-':
      *(_BYTE *)(*(void *)(a1 + 424) + 140LL) = 1;
      goto LABEL_12;
    default:
      if ((_DWORD)result != -1) {
        goto LABEL_12;
      }
      break;
  }

  a2[1] = *(_DWORD *)(a1 + 416);
  return result;
}

  *(void *)&v14[0] = off_189727648;
  if (BYTE4(v24)) {
    uprv_free(*((void **)&v23 + 1));
  }
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v22);
  *((void *)&v20 + 1) = off_189727B38;
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)((char *)&v20 + 8));
  *(void *)&v19[1] = off_189727DF0;
  icu::number::Scale::~Scale((icu::number::Scale *)((char *)&v19[1] + 8));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)v19);
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)&v18);
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)((char *)v17 + 8));
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v15);
  *(void *)&v27[0] = off_189727648;
  if (BYTE4(v37)) {
    uprv_free(*((void **)&v36 + 1));
  }
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v35);
  *((void *)&v33 + 1) = off_189727B38;
  icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v34);
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)((char *)&v33 + 8));
  *(void *)&v32[1] = off_189727DF0;
  icu::number::Scale::~Scale((icu::number::Scale *)((char *)&v32[1] + 8));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)v32);
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)&v31);
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)((char *)v30 + 8));
  return icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v28);
}

  int v14 = 0;
  uint64_t v15 = 0;
LABEL_20:
  uint64_t v16 = 1;
LABEL_21:
  *(void *)v58 = 0LL;
  unsigned int v17 = icu::number::impl::SimpleModifier::formatTwoArgPattern( a1 + 1224,  (icu::FormattedStringBuilder *)(a2 + 8),  0,  &v58[1],  v58,  0,  a5);
  if (*(int *)a5 < 1)
  {
    uint64_t v18 = v17;
    v56 = v15;
    v57 = v16;
    int v19 = v14;
    uint64_t v20 = v58[0];
    char v21 = v58[1];
    v54 = v19;
    unint64_t v22 = (v19 & 1) == 0 && (*(int (**)(void *))(*a3[26] + 32LL))(a3[26]) > 0;
    unsigned int v23 = v21 + v20;
    unint64_t v24 = (v56 & 1) == 0 && (*(int (**)(void *))(*a3[25] + 32LL))(a3[25]) > 0;
    unsigned int v25 = v18 - v23;
    unint64_t v26 = (v57 & 1) == 0 && (*(int (**)(void *))(*a3[24] + 32LL))(a3[24]) > 0;
    int v27 = v58[1];
    if (v22 || v24 || v26)
    {
      int v28 = *(void *)(a2 + 16);
      if (!*(_BYTE *)(a2 + 8)) {
        int v28 = a2 + 16;
      }
      if (!icu::PatternProps::isWhiteSpace((icu::PatternProps *)*(unsigned __int16 *)(v28
                                                                                     + 2LL
                                                                                     * (*(_DWORD *)(a2 + 136) + v58[1]))))
        v25 += icu::FormattedStringBuilder::insertCodePoint((void *)(a2 + 8), v58[1], 0x20u, 0, a5);
      if (*(_BYTE *)(a2 + 8)) {
        int v29 = *(void *)(a2 + 16);
      }
      else {
        int v29 = a2 + 16;
      }
      isWhiteSpace = icu::PatternProps::isWhiteSpace((icu::PatternProps *)*(unsigned __int16 *)(v29
                                                                                              + 2LL
                                                                                              * (v25
                                                                                               + v58[1]
                                                                                               + *(_DWORD *)(a2 + 136)
                                                                                               - 1)));
      int v27 = v58[1];
      if (!isWhiteSpace)
      {
        v25 += icu::FormattedStringBuilder::insertCodePoint((void *)(a2 + 8), v58[1] + v25, 0x20u, 0, a5);
        int v27 = v58[1];
      }
    }

    uint64_t v31 = sub_180927EA0( (uint64_t)(a3 + 1),  (icu::number::impl::DecimalQuantity *)(a2 + 304),  (icu::FormattedStringBuilder *)(a2 + 8),  v27,  a5);
    v60 = 0LL;
    memset(v59, 0, sizeof(v59));
    icu::FormattedStringBuilder::FormattedStringBuilder((icu::FormattedStringBuilder *)v59);
    sub_180927EA0( (uint64_t)(a4 + 1),  (icu::number::impl::DecimalQuantity *)(a2 + 376),  (icu::FormattedStringBuilder *)v59,  0,  a5);
    uint64_t v32 = icu::FormattedStringBuilder::insert( (icu::FormattedStringBuilder *)(a2 + 8),  v31 + v25 + v58[1],  (const icu::FormattedStringBuilder *)v59,  a5);
    __int128 v33 = (uint64_t)a3[26];
    if (v54)
    {
      v55 = v25;
      uint64_t v34 = sub_18094C5D4(a1, v33, a4[26]);
      __int128 v35 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v34 + 16LL))(v34, a2 + 8);
      v58[0] += v35;
      int v36 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 24LL))(v34);
      v58[1] += v36;
      __int128 v37 = *(uint64_t (**)(uint64_t))(*(void *)v34 + 24LL);
      __int128 v38 = v34;
      unsigned int v25 = v55;
      __int128 v39 = v37(v38);
      v58[0] -= v39;
    }

    else
    {
      v31 += (*(uint64_t (**)(uint64_t, uint64_t, void, void, UErrorCode *))(*(void *)v33 + 16LL))( v33,  a2 + 8,  v58[1],  (v58[1] + v31),  a5);
      v32 += (*(uint64_t (**)(uint64_t, uint64_t, void, void, UErrorCode *))(*(void *)a4[26] + 16LL))( a4[26],  a2 + 8,  (v31 + v25 + v58[1]),  (v58[0] + v32 + v31 + v25 + v58[1]),  a5);
    }

    uint64_t v40 = (uint64_t)a3[25];
    if (v56)
    {
      __int128 v41 = v25;
      uint64_t v42 = sub_18094C5D4(a1, v40, a4[25]);
      uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v42 + 16LL))(v42, a2 + 8);
      v58[0] += v43;
      __int128 v44 = (*(uint64_t (**)(uint64_t))(*(void *)v42 + 24LL))(v42);
      v58[1] += v44;
      uint64_t v45 = *(uint64_t (**)(uint64_t))(*(void *)v42 + 24LL);
      __int128 v46 = v42;
      unsigned int v25 = v41;
      __int128 v47 = v45(v46);
      v58[0] -= v47;
    }

    else
    {
      v31 += (*(uint64_t (**)(uint64_t, uint64_t, void, void, UErrorCode *))(*(void *)v40 + 16LL))( v40,  a2 + 8,  v58[1],  (v58[1] + v31),  a5);
      v32 += (*(uint64_t (**)(uint64_t, uint64_t, void, void, UErrorCode *))(*(void *)a4[25] + 16LL))( a4[25],  a2 + 8,  (v31 + v25 + v58[1]),  (v58[0] + v32 + v31 + v25 + v58[1]),  a5);
    }

    __int128 v48 = (uint64_t)a3[24];
    if (v57)
    {
      uint64_t v49 = sub_18094C5D4(a1, v48, a4[24]);
      v50 = v31 + v25;
      v51 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v49 + 16LL))(v49, a2 + 8);
      v58[0] += v51;
      v52 = (*(uint64_t (**)(uint64_t))(*(void *)v49 + 24LL))(v49);
      v58[1] += v52;
      v53 = (*(uint64_t (**)(uint64_t))(*(void *)v49 + 24LL))(v49);
      v58[0] -= v53;
    }

    else
    {
      v31 += (*(uint64_t (**)(uint64_t, uint64_t, void, void, UErrorCode *))(*(void *)v48 + 16LL))( v48,  a2 + 8,  v58[1],  (v58[1] + v31),  a5);
      v50 = v31 + v25;
      v32 += (*(uint64_t (**)(uint64_t, uint64_t, void, void, UErrorCode *))(*(void *)a4[24] + 16LL))( a4[24],  a2 + 8,  (v31 + v25 + v58[1]),  (v58[0] + v32 + v31 + v25 + v58[1]),  a5);
    }

    icu::FormattedValueStringBuilderImpl::appendSpanInfo(a2, 4098, 0, v58[1], v31, (int *)a5);
    icu::FormattedValueStringBuilderImpl::appendSpanInfo(a2, 4098, 1, v50 + v58[1], v32, (int *)a5);
    icu::FormattedStringBuilder::~FormattedStringBuilder((icu::FormattedStringBuilder *)v59);
  }

  icu::UnicodeString::~UnicodeString((void *)v12, (icu::UnicodeString *)&v19);
  if (v7) {
    ures_close(v7);
  }
  if (v6) {
    ures_close(v6);
  }
  if (v5) {
    ures_close(v5);
  }
  return v13;
}

      int v19 = (char *)*((void *)this + 11);
      unint64_t v24 = *(_DWORD *)&v19[16 * v21 + 12];
      int v12 = v24 + 1;
      if (v24 + 1 >= v14) {
        goto LABEL_51;
      }
    }
  }

  return 0LL;
}

          int v14 = ut;
          uint64_t v15 = v10;
          uint64_t v16 = v10;
          unsigned int v17 = 0LL;
          uint64_t v18 = 0;
          return utext_replace(v14, v15, v16, v17, v18, a4);
        }
      }

      uint64_t v13 = U_INDEX_OUTOFBOUNDS_ERROR;
    }

    else
    {
      uint64_t v13 = U_REGEX_INVALID_STATE;
    }

    *a4 = v13;
    goto LABEL_12;
  }

  return 0LL;
}

    LODWORD(v11) = 0;
    return v11;
  }

  if (*destCapacity) {
    goto LABEL_12;
  }
  *status = U_ZERO_ERROR;
  if (!regexp)
  {
LABEL_30:
    LODWORD(v11) = 0;
    uint64_t v13 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_31:
    *status = v13;
    return v11;
  }

      unsigned int v4 = v7;
    }
  }

  return this;
}

LABEL_17:
      icu::CharString::append(v7, v11, v9, a2);
      int v5 = &v11[v9];
    }
  }

  *((_DWORD *)this + 11) = icu::BytesTrie::readValue((icu::BytesTrie *)(v5 + 1), (const unsigned __int8 *)(v10 >> 1));
  if ((v10 & 1) != 0 || (int v12 = *((_DWORD *)this + 10), v12 >= 1) && *(_DWORD *)(*((void *)this + 4) + 56LL) == v12)
  {
    int v11 = 0LL;
  }

  else if (v10 >= 0xA2)
  {
    if (v10 > 0xD7)
    {
      if (v10 > 0xFB) {
        v11 += ((v10 >> 1) & 1) + 3;
      }
      else {
        int v11 = v5 + 3;
      }
    }

    else
    {
      int v11 = v5 + 2;
    }
  }

  *((void *)this + 1) = v11;
  return 1LL;
}

LABEL_21:
  icu::BytesTrie::~BytesTrie((void **)v19);
  return v11;
}

        if (v15 == a1) {
          return ~v15;
        }
        else {
          return v15;
        }
      }

      uint64_t v31 = -1;
      do
      {
        uint64_t v32 = a2(a3, v31);
        if ((v32 & 0x80000000) != 0) {
          break;
        }
        if (v32 == 73) {
          return 0LL;
        }
        if (v32 >> 11 > 0x1A)
        {
          if (HIWORD(v32))
          {
            if (v32 > 0x10FFFF)
            {
              __int128 v35 = 3540LL;
              goto LABEL_80;
            }

            if (v32 > 0xE07FF)
            {
              __int128 v35 = 13156LL;
              goto LABEL_80;
            }

            __int128 v33 = ((v32 >> 5) & 0x3F) + word_1809FB5A8[(v32 >> 11) + 2080];
          }

          else
          {
            if (v32 >> 10 >= 0x37) {
              uint64_t v34 = 0;
            }
            else {
              uint64_t v34 = 320;
            }
            __int128 v33 = v34 + (v32 >> 5);
          }
        }

        else
        {
          __int128 v33 = v32 >> 5;
        }

        __int128 v35 = (v32 & 0x1F) + 4 * word_1809FB5A8[v33];
LABEL_80:
        int v36 = word_1809FB5A8[v35];
        if ((v36 & 8) != 0) {
          LODWORD(v36) = *(unsigned __int16 *)((char *)&unk_1809FA5C4 + ((v36 >> 3) & 0x1FFE)) >> 7;
        }
        uint64_t v31 = 0;
      }

      while ((~(_DWORD)v36 & 0x60) == 0);
    }

    if (a1 != 73 || a5 != 2) {
      goto LABEL_112;
    }
    if (!a2) {
      return 305LL;
    }
    for (uint64_t i = 1; ; uint64_t i = 0)
    {
      __int128 v38 = a2(a3, i);
      if ((v38 & 0x80000000) != 0) {
        return 305LL;
      }
      if (v38 == 775) {
        goto LABEL_112;
      }
      if (v38 >> 11 > 0x1A)
      {
        if (HIWORD(v38))
        {
          if (v38 > 0x10FFFF)
          {
            __int128 v41 = 3540LL;
            goto LABEL_103;
          }

          if (v38 > 0xE07FF)
          {
            __int128 v41 = 13156LL;
            goto LABEL_103;
          }

          __int128 v39 = ((v38 >> 5) & 0x3F) + word_1809FB5A8[(v38 >> 11) + 2080];
        }

        else
        {
          if (v38 >> 10 >= 0x37) {
            uint64_t v40 = 0;
          }
          else {
            uint64_t v40 = 320;
          }
          __int128 v39 = v40 + (v38 >> 5);
        }
      }

      else
      {
        __int128 v39 = v38 >> 5;
      }

      __int128 v41 = (v38 & 0x1F) + 4 * word_1809FB5A8[v39];
LABEL_103:
      uint64_t v42 = word_1809FB5A8[v41];
      if ((v42 & 8) != 0) {
        LODWORD(v42) = *(unsigned __int16 *)((char *)&unk_1809FA5C4 + ((v42 >> 3) & 0x1FFE)) >> 7;
      }
      uint64_t result = 305LL;
      if ((~(_DWORD)v42 & 0x60) != 0) {
        return result;
      }
    }
  }

  if ((int)a1 > 295)
  {
    if ((int)a1 <= 303)
    {
      if (a1 == 296) {
        goto LABEL_143;
      }
      if (a1 != 302) {
        goto LABEL_126;
      }
      goto LABEL_36;
    }

  uint64_t v18 = 0LL;
  int v19 = a1[5];
  while (2)
  {
    if ((unint64_t)v8 >= v19)
    {
      char v21 = 15;
      goto LABEL_27;
    }

    int v14 = v5[v18];
    uint64_t v20 = v5[v18];
    switch(v20)
    {
      case 0xAu:
      case 0xDu:
        uint64_t v40 = &v5[v18 + 1];
        *unsigned int v10 = 0;
        *(_WORD *)(v9 + 96) = 0;
        *(_BYTE *)(v9 + 112) = 0;
        goto LABEL_31;
      case 0xBu:
      case 0xCu:
        goto LABEL_34;
      case 0xEu:
        if (!*(_BYTE *)(v9 + 93))
        {
          v5 += v18 + 1;
          uint64_t v40 = v5;
          *(_BYTE *)(v9 + 112) = 0;
          LODWORD(v14) = 14;
          uint64_t result = 0xFFFFLL;
          goto LABEL_49;
        }

        *(_BYTE *)(v9 + 96) = 1;
        *(_BYTE *)(v9 + 112) = 1;
LABEL_24:
        if (v7 - (void)v5 == ++v18)
        {
          int v5 = (unsigned __int8 *)v7;
          goto LABEL_28;
        }

        continue;
      case 0xFu:
        *(_BYTE *)(v9 + 96) = 0;
        if (!*(_BYTE *)(v9 + 112)) {
          goto LABEL_24;
        }
        *(_BYTE *)(v9 + 112) = 0;
        *a2 = 18;
        __int128 v37 = a1[1];
        *(_DWORD *)(v37 + 284) = 2;
        *(_BYTE *)(v37 + 65) = 15;
        *(_BYTE *)(a1[1] + 64LL) = 1;
        a1[4] = v8;
        a1[2] = &v5[v18 + 1];
        return result;
      default:
        if ((_DWORD)v14 == 27)
        {
          v5 += v18;
          uint64_t v40 = v5;
          uint64_t result = a1[1];
          goto LABEL_2;
        }

      LODWORD(v16) = 0;
      if ((_DWORD)v9 != (_DWORD)v14)
      {
        uint64_t v16 = 0LL;
        unsigned int v17 = (char *)&unk_180A24F78 + 5 * v14;
        uint64_t v20 = *v17;
        uint64_t v18 = v17 + 1;
        LOBYTE(v19) = v20;
        do
        {
          v61[v16] = v19;
          int v19 = v18[v16++];
        }

        while (v19);
        unsigned int v9 = v14;
      }

      if ((_DWORD)v9)
      {
        v59 = v6;
        if ((_DWORD)v9 != -1)
        {
          unsigned int v25 = v4;
          unint64_t v26 = a2;
          int v27 = v9;
          uint64_t result = sub_18083AB3C(*(void *)(v8 + 8LL * (int)v9), v10, (int *)&v60, v58);
          if ((int)result >= 1)
          {
            int v28 = v60;
            int v29 = &v61[v16];
            unsigned int v30 = result + 1;
            uint64_t v31 = 8 * result - 8;
            LODWORD(v16) = result + v16;
            do
            {
              *v29++ = v28 >> v31;
              --v30;
              v31 -= 8;
            }

            while (v30 > 1);
          }

          unsigned int v9 = v27;
          a2 = v26;
          unsigned int v4 = v25;
LABEL_32:
          int v6 = v59;
          goto LABEL_57;
        }

        goto LABEL_23;
      }

      v61[v16] = v10;
      LODWORD(v16) = v16 + 1;
LABEL_57:
      if ((int)v16 < 1)
      {
        LODWORD(v41) = 0;
LABEL_65:
        __int128 v46 = *a2;
      }

      else
      {
        __int128 v41 = v4 - (void)v3;
        uint64_t v42 = v16;
        uint64_t v43 = v61;
        __int128 v44 = v41;
        while (v44)
        {
          uint64_t v45 = *v43++;
          *v3++ = v45;
          --v44;
          if (!--v42)
          {
            LODWORD(v41) = v16;
            goto LABEL_65;
          }
        }

        __int128 v46 = 15;
        *a2 = 15;
      }

      if (v46 == 15 && (int)v41 < (int)v16)
      {
        __int128 v47 = &v61[v41];
        __int128 v48 = v16 - (unint64_t)v41;
        do
        {
          uint64_t v49 = *v47++;
          v50 = v2[1];
          v51 = *(char *)(v50 + 91);
          *(_BYTE *)(v50 + 91) = v51 + 1;
          *(_BYTE *)(v50 + v51 + 104) = v49;
          --v48;
        }

        while (v48);
      }

    *a7 = 0;
  }

    unint64_t v26 = *(_DWORD *)(a1 + 80);
    if (v26)
    {
      if ((_DWORD)v22 == 1 && v26 > 1)
      {
        int v27 = 15;
        int v28 = 1;
LABEL_28:
        *(_DWORD *)(a1 + 80) = v28;
        LOBYTE(v33[0]) = v27;
        LODWORD(v22) = v22 + 1;
        unsigned int v23 = (char *)v33;
        return sub_180829514(a1, v23, v22, v19, v20, v21, a3, a4);
      }

      if (v22 >= 2 && v26 == 1)
      {
        int v27 = 14;
        int v28 = 2;
        goto LABEL_28;
      }
    }

    return sub_180829514(a1, v23, v22, v19, v20, v21, a3, a4);
  }

  if ((result & 0x80000000) != 0)
  {
    if (-2 - (int)result > v11)
    {
      int v29 = (_WORD *)(a1 + 2LL * v11 + 212);
      unsigned int v30 = -2 - (v11 + (uint64_t)(int)result);
      do
      {
        uint64_t v31 = *v12++;
        *v29++ = v31;
        --v30;
      }

      while (v30);
    }

    *(void *)(a2 + 16) = v12;
    *(_BYTE *)(a1 + 281) = -2 - result;
  }

  else
  {
    if ((_DWORD)result == 1) {
      *(_BYTE *)(a1 + 95) = 1;
    }
    *(_DWORD *)(a1 + 84) = v9;
    *(_DWORD *)(a1 + 208) = -1;
    *(_BYTE *)(a1 + 281) = -(char)v11;
    *a4 = 10;
  }

  return result;
}

              unsigned int v10 = 0;
              goto LABEL_18;
            }
          }

          else
          {
            int v8 = v7 >> 5;
            if ((a5 & 0x80000000) == 0) {
              goto LABEL_9;
            }
          }

          unsigned int v9 = 0;
          goto LABEL_16;
        }
      }
    }
  }

  return v6;
}

              unsigned int v10 = 0;
              goto LABEL_18;
            }
          }

          else
          {
            int v8 = v7 >> 5;
            if ((a5 & 0x80000000) == 0) {
              goto LABEL_9;
            }
          }

          unsigned int v9 = 0;
          goto LABEL_16;
        }
      }
    }
  }

  return v6;
}

  if (BYTE4(v44[1])) {
    uprv_free(v44[0]);
  }
  if (v13 >= 1) {
    return 0LL;
  }
LABEL_27:
  if (*a5 > 0) {
    return 0LL;
  }
  if (!v14)
  {
    int v5 = 0LL;
    unint64_t v24 = 2;
    goto LABEL_37;
  }

  if (!v5)
  {
    unint64_t v26 = uprv_malloc(0x88uLL);
    int v5 = (uint64_t)v26;
    if (v26)
    {
      unsigned int v23 = 19700503;
      v26[16] = 0LL;
      *((_OWORD *)v26 + 6) = 0u;
      *((_OWORD *)v26 + 7) = 0u;
      *((_OWORD *)v26 + 4) = 0u;
      *((_OWORD *)v26 + 5) = 0u;
      *((_OWORD *)v26 + 2) = 0u;
      *((_OWORD *)v26 + 3) = 0u;
      *(_OWORD *)unint64_t v26 = 0u;
      *((_OWORD *)v26 + 1) = 0u;
LABEL_44:
      unint64_t v22 = vdup_n_s32(0x12BB38Bu);
      goto LABEL_45;
    }

    sub_180871DB4(v14);
    unint64_t v24 = 7;
LABEL_37:
    *a5 = v24;
    return v5;
  }

  if (*(_DWORD *)(v5 + 116) != 19700503)
  {
    sub_18086E18C(v5, 0);
    *(void *)(v5 + 128) = 0LL;
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    unint64_t v22 = 0LL;
    *(_OWORD *)int v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    goto LABEL_47;
  }

  char v21 = *(_DWORD *)(v5 + 120);
  sub_18086E18C(v5, 0);
  *(void *)(v5 + 128) = 0LL;
  v22.i32[1] = 0;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)int v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  if (v21 == 19641227) {
    unsigned int v23 = 19700503;
  }
  else {
    unsigned int v23 = 0;
  }
  if (v21 == 19641227) {
    goto LABEL_44;
  }
LABEL_45:
  v22.i32[0] = v23;
LABEL_47:
  *(int32x2_t *)(v5 + 116) = v22;
  *(void *)(v5 + 8) = v14;
  *(void *)(v5 + 24) = v14;
  int v27 = a4 != 2 && *(_BYTE *)(v14 + 96) == 0;
  *(_BYTE *)(v5 + 112) = v27;
  *(_BYTE *)(v5 + 113) = 1;
  int v28 = *(_DWORD *)(v14 + 72);
  *(_DWORD *)(v5 + 108) = v28;
  int v29 = res_countArrayItems(v14 + 40, v28);
  *(_DWORD *)(v5 + 124) = -1;
  *(_DWORD *)(v5 + 128) = v29;
  return v5;
}

    *a6 = 0;
    *a7 = 0;
    return 1LL;
  }

  if (c == 65039)
  {
    uint64_t result = u_isEmoji(a2);
    if ((_DWORD)result) {
      return 1LL;
    }
  }

  else
  {
    if ((c - 917536) > 0x5E)
    {
      if (c == 917631) {
        return 0LL;
      }
      int v19 = u_charType(c);
      uint64_t v20 = ((v19 >> 1) | (v19 << 7));
      if ((v20 - 3) < 2)
      {
        if (u_getCombiningClass(c))
        {
          char v21 = (*a3)++;
          return v21 <= 29;
        }
      }

      else
      {
        uint64_t result = 0LL;
        if (!v20 || v20 == 9) {
          return result;
        }
      }

      *a3 = 0;
      return 1LL;
    }

    uint64_t result = u_isEmoji(a2);
    if (a2 == 65039 || (_DWORD)result)
    {
      *a4 = 1;
      return 1LL;
    }
  }

  return result;
}

  int v14 = 0LL;
LABEL_18:
  a4 = v14;
LABEL_19:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 40LL))(v12, a2, a3, a4);
  if (a5)
  {
    uint64_t v16 = a3 - a2;
    unsigned int v17 = (int)a4 < (int)a2;
    else {
      a2 = a3;
    }
    if (!v17) {
      uint64_t v16 = 0;
    }
    a3 = (v16 + a3);
    char v21 = off_18971B688;
    unint64_t v22 = 2;
    (*(void (**)(uint64_t, uint64_t, uint64_t, void (***)(icu::UnicodeString *__hidden)))(*(void *)v12 + 32LL))( v12,  a2,  a3,  &v21);
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v21);
  }

  else {
    int v19 = a4;
  }
  if (*(void *)(a1 + 16) > v19)
  {
    *(void *)(a1 + 16) = 0LL;
    *(void *)(a1 + 36) = 0LL;
    *(void *)(a1 + 28) = 0LL;
    *(_DWORD *)(a1 + 44) = 0;
  }

  uint64_t v20 = a4 - a2 + a3;
  return sub_18088484C(a1, v20, 1);
}

    if (*(int *)a2 <= 0)
    {
      *a2 = U_INVALID_FORMAT_ERROR;
      *((void *)this + 6) = "reset without position";
      if (*((void *)this + 5)) {
        icu::CollationRuleParser::setErrorContext((char *)this);
      }
    }

    return 0xFFFFFFFFLL;
  }

  int v29 = 0u;
  uint64_t v32 = 0LL;
  uint64_t v31 = 0u;
  unsigned int v30 = 0u;
  int v28 = off_18971B688;
  LOWORD(v29) = 2;
  unsigned int v9 = *(_DWORD *)(v7 + 12);
LABEL_14:
  if (v9 > v6
    && ((v8 & 2) != 0 ? (int v14 = v7 + 10) : (int v14 = *(void *)(v7 + 24)), *(_WORD *)(v14 + 2LL * (int)v6) == 91))
  {
    uint64_t v16 = icu::CollationRuleParser::parseSpecialPosition(this, v6, (icu::UnicodeString *)&v28, a2);
  }

  else
  {
    uint64_t v16 = icu::CollationRuleParser::parseTailoringString(this, v6, (icu::UnicodeString *)&v28, a2);
  }

  unsigned int v17 = v16;
  (*(void (**)(void, uint64_t, void (***)(icu::UnicodeString *__hidden), char *, UErrorCode *))(**((void **)this + 7) + 24LL))( *((void *)this + 7),  v2,  &v28,  (char *)this + 48,  a2);
  uint64_t v18 = (void *)*(unsigned int *)a2;
  *((_DWORD *)this + 18) = v17;
  icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v28);
  return v2;
}

    unsigned int v17 = *a6;
LABEL_18:
    uint64_t v18 = v17 | 0x80;
LABEL_19:
    *a6 = v18;
    return a1;
  }

  if (((v12 | v11) & 0x30) == 0)
  {
    if (((v12 ^ v11) & 0x40) == 0)
    {
      uprv_decNumberCopy((uint64_t)a1, (unsigned int *)a2);
      return a1;
    }

    goto LABEL_17;
  }

  sub_1808CB138((uint64_t)a1, a2, a3, (int *)a4, a6);
  return a1;
}

      if ((a3 & 0x80000000) == 0) {
        return;
      }
LABEL_21:
      unsigned int v9 = *(_DWORD *)a1;
      if (*(_DWORD *)a1 >= 2u)
      {
        unsigned int v10 = (_BYTE *)((v9 - 2) + a1 + 10);
        int v12 = *(_DWORD *)a1;
        uint64_t v13 = (_BYTE *)(a1 + 9);
        do
        {
          if (*v13) {
            goto LABEL_36;
          }
          --v12;
          ++v13;
        }

        while (v12 >= 2);
        int v11 = 1;
      }

      else
      {
        unsigned int v10 = (_BYTE *)(a1 + 9);
        int v11 = *(_DWORD *)a1;
      }

      int v14 = *v10;
      if (dword_180A37120[v11 - 1] != v14)
      {
LABEL_36:
        uint64_t v18 = -1;
        goto LABEL_54;
      }

      *unsigned int v10 = LOBYTE(dword_180A37120[v11]) - 1;
      if ((unint64_t)(v10 - 1) >= a1 + 9)
      {
        uint64_t v15 = (uint64_t)(v10 - 2);
        memset((void *)(v15 + 1), 9, (size_t)&v10[~v15]);
      }

      uint64_t v16 = *(_DWORD *)(a1 + 4);
      *(_DWORD *)(a1 + 4) = v16 - 1;
      if (v16 == a2[2] - *a2 + 1)
      {
        unsigned int v17 = *(_DWORD *)a1;
        if (v11 && v17 == 1)
        {
          *unsigned int v10 = 0;
        }

        else
        {
          *unsigned int v10 = v14 - 1;
          *(_DWORD *)a1 = v17 - 1;
        }

        *(_DWORD *)(a1 + 4) = v16;
        unint64_t v7 = *a4 | 0x3820;
LABEL_7:
        *a4 = v7;
      }

      return;
    case 7:
      int v8 = *(unsigned __int8 *)(a1 + 9) % 5u;
      if (a3 < 0 && v8 != 1) {
        goto LABEL_21;
      }
      if (a3 >= 1 && !v8) {
        goto LABEL_39;
      }
      return;
    default:
      unint64_t v7 = *a4 | 0x40;
      goto LABEL_7;
  }

    LOBYTE(v10) = 0;
    goto LABEL_19;
  }

      LOBYTE(v12) = 0;
      goto LABEL_19;
    }

    char v21 = 48;
    uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)&v21, 0, 1LL);
    int v14 = v7 - 1;
    if (v8 < 0)
    {
LABEL_21:
      unint64_t v22 = 46;
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)&v22, 0, 1LL);
    }

      unsigned int v17 = (icu::UVector **)(icu::UVector::elementAt(*((icu::UVector **)this + 12), v20) + 16);
    }

    else
    {
      unsigned int v17 = (icu::UVector **)((char *)this + 72);
    }

    RuleInFinal = *v17;
    if (!*v17) {
      return;
    }
LABEL_19:
    *a6 = icu::TimeZoneRule::getRawOffset(RuleInFinal);
    *a7 = icu::TimeZoneRule::getDSTSavings(RuleInFinal);
  }

    ++*((void *)this + 6);
    *((void *)this + 7) = 0LL;
    goto LABEL_19;
  }

  if ((_DWORD)result == -1) {
    return result;
  }
  if ((_DWORD)result != 10) {
    goto LABEL_18;
  }
  if (*((_DWORD *)this + 16) != 13) {
    goto LABEL_17;
  }
LABEL_19:
  *((_DWORD *)this + 16) = result;
  return result;
}

  unsigned int v9 = *(_DWORD *)(a1 + 36);
LABEL_18:
  unsigned int v10 = usearch_openFromCollator( v5,  v6,  v8,  v9,  *(icu::RuleBasedCollator **)(*(void *)(a2 + 152) + 3128LL),  0LL,  &v12);
  *(void *)(a1 + 152) = v10;
  if (v10) {
    *(void *)(a1 + 8) = *v10;
  }
  return a1;
}

            (*(void (**)(icu::DecimalFormat *))(*(void *)v21 + 8LL))(v21);
            uint64_t v15 = 0LL;
LABEL_18:
            icu::Formattable::~Formattable((icu::Formattable *)v49);
            goto LABEL_21;
          }
        }

        else if ((int)v31 < (int)(v32 >> 5))
        {
          __int128 v33 = v32 >> 5;
          goto LABEL_51;
        }

  uint64_t v16 = v7 & ~(a5 != 0);
  if (v16 < v6)
  {
LABEL_33:
    uint64_t result = 0LL;
    *(_DWORD *)(a2 + 12) = v5;
  }

  else
  {
    if (a5) {
      unsigned int v17 = -2;
    }
    else {
      unsigned int v17 = -1;
    }
    while (1)
    {
      switch(v16)
      {
        case 1:
          uint64_t v18 = 0;
          int v19 = 0;
          uint64_t v20 = v22;
          break;
        case 2:
          uint64_t v18 = 0;
          int v19 = 0;
          uint64_t v20 = HIDWORD(v22) + 10 * v22;
          break;
        case 3:
          int v19 = 0;
          uint64_t v20 = v22;
          uint64_t v18 = v23 + 10 * HIDWORD(v22);
          break;
        case 4:
          int v19 = 0;
          uint64_t v20 = HIDWORD(v22) + 10 * v22;
          uint64_t v18 = HIDWORD(v23) + 10 * v23;
          break;
        case 5:
          uint64_t v20 = v22;
          uint64_t v18 = v23 + 10 * HIDWORD(v22);
          int v19 = v24 + 10 * HIDWORD(v23);
          break;
        case 6:
          uint64_t v20 = HIDWORD(v22) + 10 * v22;
          uint64_t v18 = HIDWORD(v23) + 10 * v23;
          int v19 = HIDWORD(v24) + 10 * v24;
          break;
        default:
          uint64_t v20 = 0;
          uint64_t v18 = 0;
          int v19 = 0;
          break;
      }

      if (v20 <= 23 && v18 <= 59 && v19 < 60) {
        break;
      }
      v16 += v17;
      if (v16 < v6) {
        goto LABEL_33;
      }
    }

    *(_DWORD *)(a2 + 8) = v5 + v16;
    return (1000 * (v19 + 60 * (v18 + 60 * v20)));
  }

  return result;
}

        int v11 = ures_getByKey(v4, "parseRegions", 0LL, &length[1]);
        int v12 = v11;
        if (length[1] <= 0)
        {
          Size = ures_getSize(v11);
          int v14 = Size;
          if (Size <= 0)
          {
            uint64_t v13 = 0LL;
          }

          else
          {
            unint64_t v22 = (void **)uprv_malloc(8LL * Size);
            uint64_t v13 = v22;
            if (v22)
            {
              bzero(v22, 8 * v14);
              unsigned int v23 = 0LL;
              while (1)
              {
                length[1] = 0;
                StringByIndex = ures_getStringByIndex(v12, v23, length, &length[1]);
                if (length[1] > 0) {
                  break;
                }
                unsigned int v25 = StringByIndex;
                unint64_t v26 = (char *)uprv_malloc(length[0] + 1LL);
                v13[v23] = v26;
                if (!v26) {
                  break;
                }
                u_UCharsToChars(v25, v26, length[0]);
                *((_BYTE *)v13[v23++] + length[0]) = 0;
                if ((_DWORD)v14 == (_DWORD)v23) {
                  goto LABEL_19;
                }
              }

              uint64_t v15 = 0;
              goto LABEL_20;
            }
          }
        }

        else
        {
          uint64_t v13 = 0LL;
          LODWORD(v14) = 0;
        }

  if (v9 <= 0 && !StringByKey) {
    StringByKey = ures_getStringByKey(v8, "001", (int *)&v19, (int *)&v19 + 1);
  }
  ures_close(v8);
  if (!StringByKey) {
    goto LABEL_8;
  }
  int v14 = v19;
  icu::UnicodeString::unBogus((uint64_t)a3);
  uint64_t v15 = *((unsigned __int16 *)a3 + 4);
  uint64_t v16 = (__int16)v15;
  unsigned int v17 = v15 >> 5;
  if (v16 >= 0) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = *((unsigned int *)a3 + 3);
  }
  icu::UnicodeString::doReplace((uint64_t)a3, 0LL, v18, (uint64_t)StringByKey, 0, v14);
  return a3;
}

char *icu::BytesTrie::Iterator::branchNext(icu::BytesTrie::Iterator *this, char *a2, int a3, UErrorCode *a4)
{
  unsigned int v5 = a3;
  int v6 = a2;
  if (a3 >= 6)
  {
    while (1)
    {
      unsigned int v9 = (icu::BytesTrie *)(v6 + 1);
      unsigned int v8 = v6[1];
      int v10 = (_DWORD)v6 + 2;
      if (v8 >= 0xC0)
      {
        if (v8 > 0xEF)
        {
          if (v8 > 0xFD) {
            v10 += (v8 & 1) + 3;
          }
          else {
            int v10 = (_DWORD)v6 + 4;
          }
        }

        else
        {
          int v10 = (_DWORD)v6 + 3;
        }
      }

      uint64_t v11 = *((void *)this + 6);
      int v12 = *(_DWORD *)this;
      int v13 = *(_DWORD *)(v11 + 8);
      if (v13 >= -1 && *(_DWORD *)(v11 + 12) > v13) {
        goto LABEL_12;
      }
LABEL_13:
      uint64_t v14 = *((void *)this + 6);
      int v15 = *(_DWORD *)(*((void *)this + 4) + 56LL);
      int v16 = *(_DWORD *)(v14 + 8);
      if (v16 >= -1 && *(_DWORD *)(v14 + 12) > v16) {
        goto LABEL_17;
      }
      if (icu::UVector32::expandCapacity(*((icu::UVector32 **)this + 6), v16 + 1, a4))
      {
        int v16 = *(_DWORD *)(v14 + 8);
LABEL_17:
        *(_DWORD *)(*(void *)(v14 + 24) + 4LL * v16) = v15 | ((v5 - (v5 >> 1)) << 16);
        ++*(_DWORD *)(v14 + 8);
      }

      unsigned int v17 = v5 >> 1;
      int v6 = icu::BytesTrie::jumpByDelta(v9, (const unsigned __int8 *)a2);
      BOOL v18 = v5 > 0xB;
      v5 >>= 1;
      if (!v18) {
        goto LABEL_21;
      }
    }

    int v13 = *(_DWORD *)(v11 + 8);
LABEL_12:
    *(_DWORD *)(*(void *)(v11 + 24) + 4LL * v13) = v10 - v12;
    ++*(_DWORD *)(v11 + 8);
    goto LABEL_13;
  }

  unsigned int v17 = a3;
LABEL_21:
  char v19 = *v6;
  uint64_t v20 = v6 + 2;
  unint64_t v21 = v6[1];
  int Value = icu::BytesTrie::readValue((icu::BytesTrie *)(v6 + 2), (const unsigned __int8 *)(v21 >> 1));
  if (v21 >= 0xA2)
  {
    if (v21 > 0xD7)
    {
      else {
        uint64_t v20 = v6 + 4;
      }
    }

    else
    {
      uint64_t v20 = v6 + 3;
    }
  }

  uint64_t v23 = *((void *)this + 6);
  int v24 = *(_DWORD *)this;
  int v25 = *(_DWORD *)(v23 + 8);
  if (v25 >= -1 && *(_DWORD *)(v23 + 12) > v25) {
    goto LABEL_31;
  }
  if (icu::UVector32::expandCapacity(*((icu::UVector32 **)this + 6), v25 + 1, a4))
  {
    int v25 = *(_DWORD *)(v23 + 8);
LABEL_31:
    *(_DWORD *)(*(void *)(v23 + 24) + 4LL * v25) = (_DWORD)v20 - v24;
    ++*(_DWORD *)(v23 + 8);
  }

  uint64_t v26 = *((void *)this + 6);
  int v27 = *(_DWORD *)(*((void *)this + 4) + 56LL);
  int v28 = *(_DWORD *)(v26 + 8);
  if (v28 < -1 || *(_DWORD *)(v26 + 12) <= v28)
  {
    int v28 = *(_DWORD *)(v26 + 8);
  }

  *(_DWORD *)(*(void *)(v26 + 24) + 4LL * v28) = v27 | ((v17 << 16) - 0x10000);
  ++*(_DWORD *)(v26 + 8);
LABEL_37:
  icu::CharString::append(*((icu::CharString **)this + 4), v19, a4);
  if ((v21 & 1) == 0) {
    return &v20[Value];
  }
  uint64_t result = 0LL;
  *((void *)this + 1) = 0LL;
  *((_DWORD *)this + 11) = Value;
  return result;
}

uint64_t icu::BytesTrie::Iterator::truncateAndStop(icu::BytesTrie::Iterator *this)
{
  *((void *)this + 1) = 0LL;
  *((_DWORD *)this + 11) = -1;
  return 1LL;
}

uint64_t icu::BytesTrie::Iterator::getString(icu::BytesTrie::Iterator *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1) {
    return *(void *)v1;
  }
  else {
    return 0LL;
  }
}

void *icu::CanonicalIterator::getStaticClassID(icu::CanonicalIterator *this)
{
  return &unk_18C534C10;
}

void *icu::CanonicalIterator::getDynamicClassID(icu::CanonicalIterator *this)
{
  return &unk_18C534C10;
}

icu::CanonicalIterator *icu::CanonicalIterator::CanonicalIterator( icu::CanonicalIterator *this, UErrorCode *a2, UErrorCode *a3)
{
  *(void *)this = off_18970B2D0;
  *((void *)this + 1) = off_18971B688;
  *((_WORD *)this + 8) = 2;
  *((void *)this + 10) = 0LL;
  *((_DWORD *)this + 22) = 0;
  *((void *)this + 12) = 0LL;
  *((void *)this + 13) = 0LL;
  *((_DWORD *)this + 28) = 0;
  *((void *)this + 15) = off_18971B688;
  *((_WORD *)this + 64) = 2;
  *((void *)this + 23) = icu::Normalizer2::getNFDInstance((icu::Normalizer2 *)a3, a2);
  NFCImpl = (icu::Normalizer2Impl *)icu::Normalizer2Factory::getNFCImpl((icu::Normalizer2Factory *)a3, v6);
  *((void *)this + 24) = NFCImpl;
  return this;
}

void icu::CanonicalIterator::setSource( icu::CanonicalIterator *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  *((_BYTE *)this + 72) = 0;
  icu::CanonicalIterator::cleanPieces(this);
  unsigned int v7 = *((unsigned __int16 *)a2 + 4);
  int v8 = (__int16)v7;
  unsigned int v9 = v7 >> 5;
  if (v8 < 0) {
    unsigned int v9 = *((_DWORD *)a2 + 3);
  }
  if (!v9)
  {
    *((void *)this + 10) = uprv_malloc(8uLL);
    *((void *)this + 12) = uprv_malloc(4uLL);
    *((_DWORD *)this + 22) = 1;
    uint64_t v11 = uprv_malloc(4uLL);
    *((void *)this + 13) = v11;
    *((_DWORD *)this + 28) = 1;
    if (*((void *)this + 10) && *((void *)this + 12) && v11)
    {
      *uint64_t v11 = 0;
      uint64_t v13 = icu::UMemory::operator new[]((icu::UMemory *)0x50, v12);
      if (v13)
      {
        *(_OWORD *)uint64_t v13 = xmmword_1809DDE50;
        *(void *)(v13 + 16) = off_18971B688;
        uint64_t v14 = v13 + 16;
        *(_WORD *)(v13 + 24) = 2;
      }

      else
      {
        uint64_t v14 = 0LL;
      }

      **((void **)this + 10) = v14;
      **((_DWORD **)this + 12) = 1;
      if (**((void **)this + 10)) {
        return;
      }
    }

    goto LABEL_58;
  }

  else {
    int v10 = *((unsigned __int16 *)this + 8) >> 5;
  }
  uint64_t v15 = v10;
  if (v10 < 0) {
    uint64_t v16 = -1LL;
  }
  else {
    uint64_t v16 = ((uint64_t)v10 << 6) | 0x10;
  }
  unsigned int v17 = (void *)icu::UMemory::operator new[]((icu::UMemory *)v16, v6);
  if (!v17)
  {
LABEL_58:
    *a3 = U_MEMORY_ALLOCATION_ERROR;
LABEL_59:
    icu::CanonicalIterator::cleanPieces(this);
    return;
  }

  *unsigned int v17 = 64LL;
  v17[1] = v15;
  uint64_t v45 = v17;
  BOOL v18 = (const icu::UnicodeString *)(v17 + 2);
  if ((_DWORD)v15)
  {
    char v19 = v17 + 2;
    do
    {
      *(void *)char v19 = off_18971B688;
      v19[4] = 2;
      v19 += 32;
    }

    while (v19 != (_WORD *)((char *)v18 + 64 * v15));
  }

  int v20 = 0;
  int v21 = 0;
  else {
    int v22 = 2;
  }
  while (1)
  {
    int v23 = *((__int16 *)this + 8) < 0 ? *((_DWORD *)this + 5) : *((unsigned __int16 *)this + 8) >> 5;
    if (v22 >= v23) {
      break;
    }
    unsigned int v24 = icu::UnicodeString::char32At((icu::CanonicalIterator *)((char *)this + 8), v22);
    if (icu::Normalizer2Impl::isCanonSegmentStarter(*((icu::Normalizer2Impl **)this + 24), v24))
    {
      int v25 = (const icu::UnicodeString *)((char *)v18 + 64 * (uint64_t)v20);
      unsigned int v26 = *((unsigned __int16 *)v25 + 4);
      int v27 = (__int16)v26;
      unsigned int v28 = v26 >> 5;
      if (v27 >= 0) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = *((unsigned int *)v25 + 3);
      }
      icu::UnicodeString::doReplace( v25,  0LL,  v29,  (icu::CanonicalIterator *)((char *)this + 8),  v21,  (v22 - v21));
      ++v20;
      int v21 = v22;
    }

    if (v24 < 0x10000) {
      int v30 = 1;
    }
    else {
      int v30 = 2;
    }
    v22 += v30;
  }

  uint64_t v31 = (v22 - v21);
  int v32 = v20 + 1;
  __int128 v33 = (const icu::UnicodeString *)((char *)v18 + 64 * (uint64_t)v20);
  unsigned int v34 = *((unsigned __int16 *)v33 + 4);
  int v35 = (__int16)v34;
  unsigned int v36 = v34 >> 5;
  if (v35 >= 0) {
    uint64_t v37 = v36;
  }
  else {
    uint64_t v37 = *((unsigned int *)v33 + 3);
  }
  icu::UnicodeString::doReplace(v33, 0LL, v37, (icu::CanonicalIterator *)((char *)this + 8), v21, v31);
  *((void *)this + 10) = uprv_malloc(8LL * v32);
  *((_DWORD *)this + 22) = v32;
  *((void *)this + 12) = uprv_malloc(4LL * v32);
  __int128 v38 = uprv_malloc(4LL * v32);
  *((void *)this + 13) = v38;
  *((_DWORD *)this + 28) = v32;
  if (!*((void *)this + 10) || !*((void *)this + 12) || !v38)
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
    uint64_t v43 = v45[1];
    if (v43)
    {
      uint64_t v44 = v43 << 6;
      do
      {
        icu::UnicodeString::~UnicodeString((icu::UnicodeString *)((char *)v45 + v44 - 48));
        v44 -= 64LL;
      }

      while (v44);
    }

    icu::UMemory::operator delete[](v45);
    goto LABEL_59;
  }

  if ((v20 & 0x80000000) == 0) {
    bzero(v38, 4LL * (v20 + 1));
  }
  if (*((int *)this + 22) >= 1)
  {
    uint64_t v39 = 0LL;
    uint64_t v40 = 0LL;
    do
    {
      *(void *)(*((void *)this + 10) + 8 * v40++) = icu::CanonicalIterator::getEquivalents( this,  v18,  (int *)(*((void *)this + 12) + v39),  a3);
      v39 += 4LL;
      BOOL v18 = (const icu::UnicodeString *)((char *)v18 + 64);
    }

    while (v40 < *((int *)this + 22));
  }

  uint64_t v41 = v45[1];
  if (v41)
  {
    uint64_t v42 = v41 << 6;
    do
    {
      icu::UnicodeString::~UnicodeString((icu::UnicodeString *)((char *)v45 + v42 - 48));
      v42 -= 64LL;
    }

    while (v42);
  }

  icu::UMemory::operator delete[](v45);
}

void icu::CanonicalIterator::~CanonicalIterator(icu::CanonicalIterator *this)
{
}

{
  void *v1;
  icu::CanonicalIterator::~CanonicalIterator(this);
  icu::UMemory::operator delete(v1);
}

void icu::CanonicalIterator::cleanPieces(icu::CanonicalIterator *this)
{
  int v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    int v3 = *((_DWORD *)this + 22);
    if (v3 >= 1)
    {
      for (uint64_t i = 0LL; i < v3; ++i)
      {
        uint64_t v5 = *(void *)(*((void *)this + 10) + 8 * i);
        if (v5)
        {
          uint64_t v6 = *(void *)(v5 - 8);
          if (v6)
          {
            uint64_t v7 = v6 << 6;
            do
            {
              icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(v5 - 64 + v7));
              v7 -= 64LL;
            }

            while (v7);
          }

          icu::UMemory::operator delete[]((void *)(v5 - 16));
          int v3 = *((_DWORD *)this + 22);
        }
      }

      int v2 = (void *)*((void *)this + 10);
    }

    uprv_free(v2);
    *((void *)this + 10) = 0LL;
    *((_DWORD *)this + 22) = 0;
  }

  int v8 = (void *)*((void *)this + 12);
  if (v8)
  {
    uprv_free(v8);
    *((void *)this + 12) = 0LL;
  }

  unsigned int v9 = (void *)*((void *)this + 13);
  if (v9)
  {
    uprv_free(v9);
    *((void *)this + 13) = 0LL;
    *((_DWORD *)this + 28) = 0;
  }

icu::UnicodeString *icu::CanonicalIterator::getSource@<X0>(UChar **this@<X0>, icu::UnicodeString *a2@<X8>)
{
  return icu::UnicodeString::UnicodeString(a2, this + 1);
}

uint64_t icu::CanonicalIterator::reset(uint64_t this)
{
  *(_BYTE *)(this + 72) = 0;
  if (*(int *)(this + 112) >= 1)
  {
    uint64_t v1 = 0LL;
    uint64_t v2 = *(void *)(this + 104);
    do
      *(_DWORD *)(v2 + 4 * v1++) = 0;
    while (v1 < *(int *)(this + 112));
  }

  return this;
}

icu::UnicodeString *icu::CanonicalIterator::next@<X0>( icu::CanonicalIterator *this@<X0>, icu::UnicodeString *a2@<X8>)
{
  int v3 = (UChar **)((char *)this + 120);
  if (*((_BYTE *)this + 72))
  {
    icu::UnicodeString::setToBogus((icu::CanonicalIterator *)((char *)this + 120));
  }

  else
  {
    if ((*((_WORD *)this + 64) & 1) != 0) {
      __int16 v5 = 2;
    }
    else {
      __int16 v5 = *((_WORD *)this + 64) & 0x1F;
    }
    *((_WORD *)this + 64) = v5;
    if (*((int *)this + 22) >= 1)
    {
      uint64_t v6 = 0LL;
      do
      {
        uint64_t v7 = *(void *)(*((void *)this + 10) + 8 * v6) + ((uint64_t)*(int *)(*((void *)this + 13) + 4 * v6) << 6);
        unsigned int v8 = *(unsigned __int16 *)(v7 + 8);
        int v9 = (__int16)v8;
        unsigned int v10 = v8 >> 5;
        if (v9 >= 0) {
          uint64_t v11 = v10;
        }
        else {
          uint64_t v11 = *(unsigned int *)(v7 + 12);
        }
        icu::UnicodeString::doAppend((uint64_t)v3, (const icu::UnicodeString *)v7, 0, v11);
        ++v6;
      }

      while (v6 < *((int *)this + 22));
    }

    uint64_t v12 = *((unsigned int *)this + 28);
    if ((int)v12 < 1)
    {
LABEL_16:
      *((_BYTE *)this + 72) = 1;
    }

    else
    {
      uint64_t v14 = *((void *)this + 12);
      uint64_t v13 = *((void *)this + 13);
      uint64_t v15 = v12 + 1;
      while (1)
      {
        uint64_t v16 = (v15 - 2);
        int v17 = *(_DWORD *)(v13 + 4LL * v16) + 1;
        *(_DWORD *)(v13 + 4LL * v16) = v17;
        *(_DWORD *)(v13 + 4 * v16) = 0;
      }
    }
  }

  return icu::UnicodeString::UnicodeString(a2, v3);
}

void *icu::CanonicalIterator::getEquivalents( icu::CanonicalIterator *this, const icu::UnicodeString *a2, int *a3, UErrorCode *a4)
{
  uint64_t v53 = *MEMORY[0x1895F89C0];
  memset(v44, 0, 88);
  if (*(int *)a4 > 0
    || (uhash_init( (int32x2_t *)&v44[1],  (uint64_t)uhash_hashUnicodeString,  (uint64_t)uhash_compareUnicodeString,  0LL,  (int *)a4),  *(int *)a4 >= 1))
  {
    unsigned int v8 = 0LL;
    goto LABEL_4;
  }

  v44[0] = &v44[1];
  uhash_setKeyDeleter((uint64_t)&v44[1], (uint64_t)uprv_deleteUObject);
  int v10 = *a4;
  uint64_t v43 = 0LL;
  memset(v42, 0, sizeof(v42));
  if (v10 > 0
    || (uhash_init( (int32x2_t *)v42 + 1,  (uint64_t)uhash_hashUnicodeString,  (uint64_t)uhash_compareUnicodeString,  0LL,  (int *)a4),  *(int *)a4 >= 1))
  {
    unsigned int v8 = 0LL;
    goto LABEL_10;
  }

  *(void *)&v42[0] = (char *)v42 + 8;
  uhash_setKeyDeleter((uint64_t)v42 + 8, (uint64_t)uprv_deleteUObject);
  unsigned int v8 = 0LL;
  int v11 = *a4;
  uint64_t v41 = 0LL;
  memset(v40, 0, sizeof(v40));
  if (v11 <= 0)
  {
    uhash_init( (int32x2_t *)v40 + 1,  (uint64_t)uhash_hashUnicodeString,  (uint64_t)uhash_compareUnicodeString,  0LL,  (int *)a4);
    unsigned int v8 = 0LL;
    *(void *)&v40[0] = (char *)v40 + 8;
    uhash_setKeyDeleter((uint64_t)v40 + 8, (uint64_t)uprv_deleteUObject);
    uhash_setValueDeleter((uint64_t)v44[0], (uint64_t)uprv_deleteUObject);
    uhash_setValueDeleter(*(uint64_t *)&v42[0], (uint64_t)uprv_deleteUObject);
    uhash_setValueDeleter(*(uint64_t *)&v40[0], (uint64_t)uprv_deleteUObject);
    memset(v52, 0, 512);
    uint64_t v39 = (UChar *)v52;
    uint64_t v12 = icu::UnicodeString::extract((uint64_t)a2, &v39, 256, (int *)a4);
    icu::CanonicalIterator::getEquivalents2((uint64_t)this, (uint64_t *)v40, (uint64_t)v52, v12, (int *)a4);
    int v38 = -1;
    uint64_t v13 = uhash_nextElement(*(uint64_t **)&v40[0], &v38);
    if (v13)
    {
      uint64_t v14 = v13;
      while (1)
      {
        memset(v51, 0, sizeof(v51));
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)v51, *(UChar ***)(v14 + 8));
        uhash_removeAll(*(uint64_t *)&v42[0]);
        icu::CanonicalIterator::permute((uint64_t)v51, 1LL, (uint64_t *)v42, (int *)a4);
        int v37 = -1;
        uint64_t v15 = uhash_nextElement(*(uint64_t **)&v42[0], &v37);
        if (v15) {
          break;
        }
LABEL_37:
        uint64_t v14 = uhash_nextElement(*(uint64_t **)&v40[0], &v38);
        icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v51);
        if (!v14) {
          goto LABEL_38;
        }
      }

      uint64_t v16 = v15;
      while (1)
      {
        memset(v50, 0, sizeof(v50));
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)v50, *(UChar ***)(v16 + 8));
        uint64_t v49 = 0LL;
        __int128 v47 = 0u;
        __int128 v48 = 0u;
        __int128 v46 = 0u;
        uint64_t v45 = off_18971B688;
        LOWORD(v46) = 2;
        (*(void (**)(void, UChar **, void (***)(icu::UnicodeString *__hidden), UErrorCode *))(**((void **)this + 23) + 24LL))( *((void *)this + 23),  v50,  &v45,  a4);
        if ((v46 & 1) != 0)
        {
          if ((*((_WORD *)a2 + 4) & 1) != 0) {
            goto LABEL_31;
          }
        }

        else
        {
          if ((v46 & 0x8000u) == 0LL) {
            int v18 = (unsigned __int16)v46 >> 5;
          }
          else {
            int v18 = DWORD1(v46);
          }
          unsigned int v19 = *((unsigned __int16 *)a2 + 4);
          if ((v19 & 0x8000u) == 0) {
            unsigned int v20 = v19 >> 5;
          }
          else {
            unsigned int v20 = *((_DWORD *)a2 + 3);
          }
          if ((v19 & 1) == 0 && v18 == v20 && icu::UnicodeString::doEquals((icu::UnicodeString *)&v45, a2, v18))
          {
LABEL_31:
            int v21 = (icu::UnicodeString *)icu::UMemory::operator new((icu::UMemory *)0x40, v17);
            uint64_t v23 = (uint64_t)v21;
            if (v21) {
              icu::UnicodeString::UnicodeString(v21, v50);
            }
            unsigned int v24 = v44[0];
            int v25 = (icu::UnicodeString *)icu::UMemory::operator new((icu::UMemory *)0x40, v22);
            uint64_t v26 = (uint64_t)v25;
            if (v25) {
              icu::UnicodeString::UnicodeString(v25, v50);
            }
            uhash_put((uint64_t)v24, v26, v23, (int *)a4);
          }
        }

        uint64_t v16 = uhash_nextElement(*(uint64_t **)&v42[0], &v37);
        icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v45);
        icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v50);
        if (!v16) {
          goto LABEL_37;
        }
      }
    }

LABEL_38:
    if (*(int *)a4 > 0)
    {
LABEL_39:
      unsigned int v8 = 0LL;
      goto LABEL_40;
    }

    int v27 = uhash_count((uint64_t)v44[0]);
    if (v27)
    {
      uint64_t v29 = v27;
      if (v27 < 0) {
        uint64_t v30 = -1LL;
      }
      else {
        uint64_t v30 = ((uint64_t)v27 << 6) | 0x10;
      }
      uint64_t v31 = (void *)icu::UMemory::operator new[]((icu::UMemory *)v30, v28);
      if (v31)
      {
        *uint64_t v31 = 64LL;
        v31[1] = v29;
        unsigned int v8 = v31 + 2;
        int v32 = v31 + 2;
        do
        {
          *int v32 = off_18971B688;
          *((_WORD *)v32 + 4) = 2;
          v32 += 8;
        }

        while (v32 != &v31[8 * v29 + 2]);
        *a3 = 0;
        int v38 = -1;
        while (1)
        {
          uint64_t v33 = uhash_nextElement((uint64_t *)v44[0], &v38);
          if (!v33) {
            break;
          }
          unsigned int v34 = *(UChar ***)(v33 + 8);
          uint64_t v35 = *a3;
          *a3 = v35 + 1;
          icu::UnicodeString::operator=((UChar **)&v8[8 * v35], v34);
        }

  uint64_t v23 = 0;
LABEL_39:
  __src = (uint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *, uint64_t))(*(void *)a10 + 16LL))(a10, __dst, v13);
  if ((int)a8 >= 1)
  {
    if (*a7 != 64)
    {
      (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)a10 + 16LL))(a10, "_", 1LL);
      if (!v23) {
        (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)a10 + 16LL))(a10, "_", 1LL);
      }
    }

    return (uint64_t *)(*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(void *)a10 + 16LL))(a10, a7, a8);
  }

  return __src;
}

  if ((unint64_t)v4 >= v7)
  {
    int v10 = -v10;
    uint64_t v14 = v4;
    goto LABEL_54;
  }

  uint64_t v23 = *v4;
  unsigned int v24 = (v23 & 0xFC00) == 56320;
  int v25 = v23 + (v10 << 10) - 56613888;
  uint64_t v14 = &v4[v24];
  if (v24)
  {
    int v10 = v25;
    ++v3;
  }

  while (1)
  {
    uint64_t result = v10 - v11;
    if (v10 - 55204 <= 0xFFFF589B
      || (int v11 = 12400, v10 >> 5 >= 0x185) && (int v11 = 30481, v10 - 19968 >= 0x51A6) && (int v11 = 49617, v10 >> 10 <= 0x2A))
    {
      int v11 = v10 & 0xFFFFFF80 | 0x40;
    }

    if ((result + 64) > 0x7F)
    {
      if ((result + 10513) <= 0x5221 && v8 >= 2)
      {
        if ((result & 0x80000000) != 0)
        {
          uint64_t v30 = (-64 - (int)result) / 0xF3u;
          uint64_t v31 = (-64 - (int)result) % 0xF3u;
          uint64_t v26 = 243 - v31;
          if (v31) {
            int v32 = ~(_BYTE)v30;
          }
          else {
            int v32 = -(char)v30;
          }
          LOBYTE(v27) = v32 + 80;
          if (!v31)
          {
            uint64_t v26 = 0u;
            UErrorCode *v6 = v27;
            goto LABEL_74;
          }
        }

        else
        {
          uint64_t v26 = (__int16)(result - 64) % 243;
          int v27 = (__int16)(result - 64) / 243 + 208;
        }

        UErrorCode *v6 = v27;
        if (v26 >= 20)
        {
          uint64_t v33 = v26 + 13;
LABEL_75:
          v6[1] = v33;
          v6 += 2;
          unsigned int v19 = v9 + 2;
          *int v9 = v12;
          v9[1] = v12;
          v8 -= 2;
          goto LABEL_27;
        }

      int v32 = v66++;
      *int v32 = v27;
      uint64_t v15 = v26;
      int v25 = (unsigned __int8 *)v5;
      if (v5 >= v7) {
        goto LABEL_39;
      }
    }

    unsigned int v24 = 1;
    if ((v27 + 62) < 0x33u)
    {
      if (*v25 <= 0xEFu) {
        uint64_t v44 = 2;
      }
      else {
        uint64_t v44 = 3;
      }
      uint64_t v43 = 1;
LABEL_61:
      LOBYTE(v12) = 0;
      LOBYTE(v14) = v44 + v43;
      goto LABEL_65;
    }

    LOBYTE(v12) = 0;
    LOBYTE(v14) = 0;
LABEL_66:
LABEL_83:
    if (v24 != v14)
    {
      v59 = (char)v12 - (uint64_t)v24;
      if ((char)v12 < v24)
      {
        v60 = (_BYTE *)((char)v12 + v6 + 65);
        do
          *v60++ = *(_BYTE *)(v5 + v59);
        while (!__CFADD__(v59++, 1LL));
      }

      *(_BYTE *)(v6 + 64) = v24;
      a2[2] = v5 + v59;
      *(void *)(v64 + 32) = v66;
      *a3 = 12;
      return result;
    }

    int v25 = (unsigned __int8 *)v5;
LABEL_85:
    uint64_t v13 = (v13 - dword_180A266D8[(char)v14]);
    if ((char)v14 < 4 || (v23 & 1) != 0) {
      int v27 = *(unsigned __int16 *)(v17
    }
                                + 2
                                * ((v13 & 0xF)
                                 + *(unsigned __int16 *)(v16
                                                       + 2LL
    else {
      int v27 = 0;
    }
LABEL_89:
    if (v11 <= v27)
    {
      v58 = v66++;
      *v58 = v27;
      --v15;
    }

    else
    {
      v62 = v23;
      v52 = v22;
      uint64_t v53 = v11;
      v54 = v21;
      v55 = v17;
      v63 = v6;
      v56 = a2;
      v65 = &unk_180A266EC;
      v57 = a3;
      uint64_t result = sub_18083A99C( v4,  *(void *)(v4 + 48),  v13,  (uint64_t *)&v65,  (uint64_t)&unk_180A266EC,  &v66,  (unint64_t)&v66[v15],  0LL,  -1,  *(_BYTE *)(v64 + 2),  a3);
      a3 = v57;
      if (*v57 >= 1)
      {
        *(_DWORD *)(v4 + 84) = result;
        __int16 v5 = (unint64_t)v25;
        a2 = v56;
LABEL_111:
        uint64_t v6 = v63;
LABEL_39:
        if (*a3 <= 0 && (*(_DWORD *)(v4 + 208) & 0x80000000) != 0 && (uint64_t v33 = a2[3], v5 < v33))
        {
          unsigned int v34 = *(char *)v5;
          *(_BYTE *)(v6 + 65) = *(_BYTE *)v5;
          uint64_t v35 = v34;
          else {
            UErrorCode v36 = 3;
          }
          else {
            int v37 = 0;
          }
          if (v34 < 0) {
            int v38 = v37;
          }
          else {
            int v38 = 1;
          }
          int v25 = (unsigned __int8 *)(v5 + 1);
          if (v5 + 1 >= v33)
          {
            uint64_t v40 = 1;
          }

          else
          {
            uint64_t v39 = ~v5 + v33;
            uint64_t v40 = 1;
            do
            {
              uint64_t v41 = *v25++;
              uint64_t v42 = v40++;
              *(_BYTE *)(v6 + v42 + 65) = v41;
              uint64_t v35 = v41 + (v35 << 6);
              --v39;
            }

            while (v39);
            int v25 = (unsigned __int8 *)v33;
          }

          *(_BYTE *)(v6 + 64) = v40;
          *(_DWORD *)(v6 + 72) = v35;
          *(_DWORD *)(v6 + 76) = v38;
        }

        else
        {
          int v25 = (unsigned __int8 *)v5;
        }

    int v18 = (16 * v19 + 511) & 0x7FFFFE00;
    if (v18 == 1114112)
    {
      v0[6].i32[1] = v0[5].i32[0];
      uint64_t v23 = 1114112;
      goto LABEL_45;
    }

    uint64_t v23 = (16 * v19 + 511) & 0x7FFFFE00;
    if (v18 >= v12)
    {
LABEL_45:
      v281 = v3;
      unint64_t v28 = 0LL;
      v0[6].i32[0] = v23;
      memset(__src, 0, sizeof(__src));
      do
      {
        uint64_t v29 = v16;
        if (v28 < v23)
        {
          uint64_t v30 = v28 >> 4;
          if (v0[8].i8[v30]) {
            uint64_t v29 = (_DWORD *)(*(void *)&v0[2] + 4LL
          }
                                               * (*(_DWORD *)(*(void *)v0 + 4 * v30) + (v28 & 0xF)));
          else {
            uint64_t v29 = (_DWORD *)(*(void *)v0 + 4 * v30);
          }
        }

        *((_DWORD *)__src + v28++) = *v29;
      }

      while (v28 != 128);
      v269 = v18;
      v272 = v1;
      v273 = v12;
      v292 = 0LL;
      memset(v291, 0, sizeof(v291));
      DWORD1(v291[0]) = -1;
      if (!v23)
      {
        uint64_t v33 = 148;
        goto LABEL_109;
      }

      uint64_t v31 = 0;
      int v32 = v23 >> 4;
      uint64_t v33 = 148;
      unsigned int v34 = 64;
      uint64_t v35 = 4;
      while (1)
      {
        if (v31 == (_DWORD)v13)
        {
          unsigned int v34 = 16;
          uint64_t v35 = 1;
        }

        UErrorCode v36 = *v5;
        int v37 = *(unsigned int *)(*(void *)v5 + 4LL * v31);
        int v38 = (char *)v5 + v31;
        uint64_t v40 = v38[64];
        uint64_t v39 = v38 + 64;
        if (v40 == 1)
        {
          uint64_t v41 = (int *)(*(void *)&v5[2] + 4 * v37);
          uint64_t v43 = *v41;
          uint64_t v42 = v41 + 1;
          LODWORD(v37) = v43;
          uint64_t v44 = &v42[v34 - 1];
          do
          {
            if (*v42 != (_DWORD)v37) {
              break;
            }
            ++v42;
          }

          while (v42 < v44);
          if (v42 != v44) {
            goto LABEL_93;
          }
          *uint64_t v39 = 0;
          UErrorCode v36 = *v5;
          *(_DWORD *)(*(void *)v5 + 4LL * v31) = v37;
        }

        else if (v35 >= 2)
        {
          uint64_t v45 = v31 + 1LL;
          do
          {
            if (v45 >= v35 + v31) {
              goto LABEL_67;
            }
            __int128 v46 = *(_DWORD *)(*(void *)&v36 + 4 * v45++);
          }

          while (v46 == (_DWORD)v37);
          __int128 v47 = sub_180857EC8(v5, v31);
          if (v47 < 0) {
            goto LABEL_117;
          }
          v33 += v34 & ~(v47 >> 31);
          goto LABEL_94;
        }

        unsigned int v20 = 0LL;
        goto LABEL_39;
      }
    }

    else
    {
      int v18 = v12 >> 5;
      if ((v11 & 0x80000000) == 0) {
        goto LABEL_31;
      }
    }

    unsigned int v19 = 0LL;
    goto LABEL_37;
  }

  return icu::UnicodeString::doAppend(a1, a4, a5, a6);
}

    if (v21 > v22)
    {
      if (v22 > 1023)
      {
        LOWORD(v11) = v11 | 0xFFE0;
        *((_WORD *)a5 + 4) = v11;
        *((_DWORD *)a5 + 3) = v22;
      }

      else
      {
        LOWORD(v11) = v11 & 0x1F | (32 * v22);
        *((_WORD *)a5 + 4) = v11;
      }
    }
  }

  if ((v11 & 0x8000) == 0) {
    goto LABEL_45;
  }
LABEL_44:
  unint64_t v17 = *((_DWORD *)a5 + 3);
LABEL_45:
  if (v17 >= 1)
  {
    uint64_t v41 = 39;
    icu::UnicodeString::doAppend((uint64_t)v9, (uint64_t)&v41, 0, 1LL);
    uint64_t v23 = *((unsigned __int16 *)a5 + 4);
    unsigned int v24 = (__int16)v23;
    int v25 = v23 >> 5;
    if (v24 >= 0) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = *((unsigned int *)a5 + 3);
    }
    icu::UnicodeString::doAppend((uint64_t)v9, a5, 0, v26);
    uint64_t v42 = 39;
    this = (icu::ICU_Utility *)icu::UnicodeString::doAppend((uint64_t)v9, (uint64_t)&v42, 0, 1LL);
    int v27 = *((unsigned __int16 *)a5 + 4);
    if ((v27 & 1) != 0)
    {
      this = (icu::ICU_Utility *)icu::UnicodeString::unBogus((uint64_t)a5);
    }

    else
    {
      if ((v27 & 0x8000u) == 0) {
        unint64_t v28 = v27 >> 5;
      }
      else {
        unint64_t v28 = *((_DWORD *)a5 + 3);
      }
      if (v28) {
        *((_WORD *)a5 + 4) &= 0x1Fu;
      }
    }
  }

  if (i != 1)
  {
    do
    {
      uint64_t v43 = 92;
      int v32 = icu::UnicodeString::doAppend((uint64_t)v9, (uint64_t)&v43, 0, 1LL);
      uint64_t v44 = 39;
      this = (icu::ICU_Utility *)icu::UnicodeString::doAppend(v32, (uint64_t)&v44, 0, 1LL);
      --i;
    }

    while (i > 1);
  }

    if (v10 >= v14)
    {
      *uint64_t v16 = v14;
      uint64_t v14 = v10 + 32;
      v10 += 32;
    }

    else
    {
      unint64_t v28 = 0;
      *uint64_t v16 = v10;
      uint64_t v29 = (int *)(*(void *)v4 + v15);
      uint64_t v30 = (_DWORD *)(*(void *)v4 + 4LL * v10);
      do
      {
        uint64_t v31 = *v29++;
        *v30++ = v31;
        int v32 = v28 - 1;
        uint64_t v33 = v28 + 32;
        --v28;
      }

      while (v33 > 1);
      v14 -= v32;
      v10 -= v32;
    }

  if (v38[1]) {
    uhash_close((_BYTE *)v38[1]);
  }
}

                int v32 = v27 == 125 && v19 > 0;
                v19 -= v32;
                goto LABEL_48;
              }

              uint64_t v41 = 39;
              uint64_t v29 = icu::UnicodeString::doAppend((uint64_t)&v47, (uint64_t)&v41, 0, 1LL);
              uint64_t v41 = 124;
              uint64_t v30 = (void (***)(icu::UnicodeString *__hidden))icu::UnicodeString::doAppend( v29,  (uint64_t)&v41,  0,  1LL);
              uint64_t v41 = 39;
LABEL_49:
              icu::UnicodeString::doAppend((uint64_t)v30, (uint64_t)&v41, 0, 1LL);
              if (v23 == ++v18) {
                goto LABEL_50;
              }
            }

            int v27 = 0xFFFF;
            goto LABEL_38;
          }

  if (!v12) {
    return this;
  }
LABEL_39:
  *(_DWORD *)a5 = 3;
  return this;
}

    int v32 = icu::UMemory::operator new((uint64_t *)v11, (icu::UMemory *)0x90, v8);
    if (v32)
    {
      uint64_t v33 = v37;
      uint64_t result = icu::StringEnumeration::StringEnumeration((uint64_t)v32);
      *(void *)uint64_t result = &off_18972B858;
      *(void *)(result + 120) = v10;
      *(void *)(result + 128) = 0LL;
      *(_DWORD *)(result + 136) = v33;
      *(_DWORD *)(result + 140) = 0;
      return result;
    }

    goto LABEL_40;
  }

  if (v12) {
    uprv_free(v12);
  }
  return 0LL;
}

  icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)(v15 + 17));
  icu::UnicodeString::~UnicodeString(v46, (icu::UnicodeString *)(v15 + 9));
  icu::UnicodeString::~UnicodeString(v47, v19);
  icu::UMemory::operator delete(v15);
  if (v8)
  {
LABEL_27:
    icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)(v8 + 25));
    icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)(v8 + 17));
    icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)(v8 + 9));
    icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)(v8 + 1));
    icu::UMemory::operator delete(v8);
  }

    ++v21;
    ++v22;
  }

  while (v20 != v21);
  if ((v24 & 0x80000000) == 0 && v23 > (int)v24)
  {
    if ((v45 & 0x8000u) == 0LL) {
      uint64_t v41 = (unsigned __int16)v45 >> 5;
    }
    else {
      uint64_t v41 = DWORD1(v45);
    }
    icu::UnicodeString::doReplace( (icu::UnicodeString *)&v53,  v24,  (v23 - v24),  (const icu::UnicodeString *)&v44,  0,  v41);
  }

LABEL_40:
        if (*(void *)&v40[0]) {
          uhash_close(*(_BYTE **)&v40[0]);
        }
        goto LABEL_10;
      }

      UErrorCode v36 = U_MEMORY_ALLOCATION_ERROR;
    }

    else
    {
      UErrorCode v36 = U_ILLEGAL_ARGUMENT_ERROR;
    }

    unsigned int v8 = 0LL;
    *a4 = v36;
    goto LABEL_40;
  }

  icu::Locale::setKeywordValue(*(const char ***)(a1 + 40), "attribute", v38, v4);
LABEL_41:
  if (BYTE4(v39)) {
    uprv_free(v38);
  }
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v37);
  if (BYTE4(__s1[1])) {
    uprv_free(__s1[0]);
  }
LABEL_45:
  if (BYTE4(v45[1])) {
    uprv_free(v45[0]);
  }
  return a1;
}

  uint64_t v44 = icu::UMemory::operator new(v41, (icu::UMemory *)0x30, v35);
  uint64_t v39 = *(UErrorCode **)(a1 + 16);
  if (!v44)
  {
LABEL_49:
    *uint64_t v39 = U_MEMORY_ALLOCATION_ERROR;
LABEL_18:
    int v25 = sub_180805EF0(v18);
    icu::UMemory::operator delete(v25);
    goto LABEL_13;
  }

  __int128 v46 = v44;
  sub_180805E5C((uint64_t)v44, (v2 - 1), v39, v45);
  __int128 v47 = *(UErrorCode **)(a1 + 16);
  v46[4] = (uint64_t)v33;
  icu::UVector::addElement(*(icu::UVector **)(a1 + 24), v46, v47);
  if (**(int **)(a1 + 16) <= 0)
  {
    uint64_t v42 = *(_DWORD *)(*(void *)(a1 + 24) + 8LL) - 1;
LABEL_45:
    icu::UVector32::setElementAt(*((void *)v29 + 5), v42, v30);
    goto LABEL_46;
  }

  uint64_t v44 = icu::UMemory::operator new(v41, (icu::UMemory *)0x30, v35);
  uint64_t v39 = *(UErrorCode **)(a1 + 16);
  if (!v44)
  {
LABEL_49:
    *uint64_t v39 = U_MEMORY_ALLOCATION_ERROR;
LABEL_18:
    int v25 = sub_180803788(v18);
    icu::UMemory::operator delete(v25);
    goto LABEL_13;
  }

  __int128 v46 = v44;
  sub_180804D98((uint64_t)v44, (v2 - 1), v39, v45);
  __int128 v47 = *(UErrorCode **)(a1 + 16);
  v46[4] = (uint64_t)v33;
  icu::UVector::addElement(*(icu::UVector **)(a1 + 24), v46, v47);
  if (**(int **)(a1 + 16) <= 0)
  {
    uint64_t v42 = *(_DWORD *)(*(void *)(a1 + 24) + 8LL) - 1;
LABEL_45:
    icu::UVector32::setElementAt(*((void *)v29 + 5), v42, v30);
    goto LABEL_46;
  }

        ures_close(v28);
LABEL_10:
        uint64_t v12 = v6[2];
        goto LABEL_11;
      }
    }

  if (*a2 <= 0)
  {
    if ((_WORD)v8) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = v3 == v5;
    }
    if (v26) {
      int v27 = 0;
    }
    else {
      int v27 = v11;
    }
    if (*(_BYTE *)(result + 2)) {
      int v11 = v27;
    }
  }

  *(_DWORD *)(v2 + 72) = v20 | (v9 << 16) | (unsigned __int16)v8;
  *(_BYTE *)(v2 + 64) = v11;
  *(void *)(result + 16) = v3;
  *(void *)(result + 32) = v4;
  *(void *)(result + 48) = v6;
  return result;
}

  v2[4] = v3;
  v2[2] = v5;
  return result;
}

        uint64_t v7 = (_DWORD *)((char *)v7 + *((unsigned __int16 *)v7 + 5));
        if (!--v5) {
          goto LABEL_43;
        }
      }

      int v10 = v7 + 3;
      int v11 = *((unsigned __int8 *)v7 + 9);
      uint64_t v12 = (char *)v7 + 2 * v11 + 12;
      uint64_t v13 = *v12;
      if (*v12)
      {
        uint64_t v14 = 0LL;
        do
        {
          dword_18C535064[v13 >> 5] |= 1 << v13;
          uint64_t v13 = *((unsigned __int8 *)v7 + 2 * v11 + v14++ + 13);
        }

        while (v13);
        if (!(_DWORD)v11)
        {
LABEL_38:
          goto LABEL_40;
        }
      }

      else
      {
        LODWORD(v14) = 0;
        if (!*((_BYTE *)v7 + 9)) {
          goto LABEL_38;
        }
      }

      uint64_t v16 = 0LL;
      unint64_t v17 = &v12[(int)v14 + 1];
      do
      {
        int v18 = *((unsigned __int16 *)v10 + v16);
        if (*((_WORD *)v10 + v16))
        {
          unsigned int v19 = 0;
          do
          {
            unsigned int v20 = *v17;
            if (*v17)
            {
              int v21 = 0LL;
              do
              {
                dword_18C535064[v20 >> 5] |= 1 << v20;
                unsigned int v20 = v17[++v21];
              }

              while (v20);
            }

            else
            {
              LODWORD(v21) = 0;
            }

            v17 += (int)v21 + 1;
            unint64_t v22 = __OFSUB__(v18--, 1);
          }

          while (!((v18 < 0) ^ v22 | (v18 == 0)));
        }

        else
        {
          unsigned int v19 = 0;
        }

        LODWORD(v14) = v19 + v14;
        ++v16;
      }

      while (v16 != v11);
      goto LABEL_38;
    }

    uint64_t v6 = 0;
LABEL_43:
    for (uint64_t j = 0LL; j != 33; ++j)
    {
      unsigned int v24 = off_18971B188[j];
      int v25 = *v24;
      if (*v24)
      {
        uint64_t v26 = 0LL;
        int v27 = v24 + 1;
        do
        {
          dword_18C535064[v25 >> 5] |= 1 << v25;
          int v25 = v27[v26++];
        }

        while (v25);
      }

      else
      {
        LODWORD(v26) = 0;
      }

      unint64_t v28 = v26 + 9;
      if (v28 > v6) {
        uint64_t v6 = v28;
      }
    }

    uint64_t v29 = *((unsigned __int16 *)v3 + 8);
    uint64_t v30 = *v3;
    uint64_t v31 = uprv_malloc(v29);
    int v32 = v31;
    if (v31) {
      bzero(v31, v29);
    }
    uint64_t v45 = qword_18C535058;
    uint64_t v33 = (_WORD *)(qword_18C535058 + *(unsigned int *)(qword_18C535058 + 4));
    unsigned int v34 = (unsigned __int16)*v33;
    if (*v33)
    {
      uint64_t v35 = (uint64_t)v3 + 18;
      v52 = 0;
      UErrorCode v36 = (uint64_t)v3 + v30;
      memset(v51, 0, sizeof(v51));
      memset(v49, 0, sizeof(v49));
      int v37 = v33 + 1;
      v50 = 0;
      do
      {
        __int128 v47 = v34;
        __int128 v46 = v37;
        int v38 = sub_18085AC78( (unsigned __int8 *)(v45 + *(unsigned int *)(v45 + 8)
                                  + (((unsigned __int16)v37[1] << 16) | (unint64_t)(unsigned __int16)v37[2])),
                v51,
                v49);
        for (k = 0LL; k != 64; k += 2LL)
        {
          uint64_t v40 = &v38[*(unsigned __int16 *)((char *)v51 + k)];
          __int128 v48 = v40;
          uint64_t v41 = *(unsigned __int16 *)((char *)v49 + k);
          if (*(_WORD *)((char *)v49 + k))
          {
            uint64_t v42 = &v40[v41];
            uint64_t v43 = sub_18085B490(v35, v29, v36, (uint64_t)v32, &v48, &v40[v41]);
            if (v43 > v6) {
              uint64_t v6 = v43;
            }
            if (v48 != v42)
            {
              uint64_t v44 = sub_18085B490(v35, v29, v36, (uint64_t)v32, &v48, v42);
              if (v44 > v6) {
                uint64_t v6 = v44;
              }
            }
          }
        }

        int v37 = v46 + 3;
        unsigned int v34 = v47 - 1;
      }

      while (v47 > 1);
    }

    if (v32) {
      uprv_free(v32);
    }
    dword_18C535060 = v6;
  }

  return 1LL;
}

        unsigned int v4 = 0LL;
LABEL_41:
        if (BYTE4(v19[1])) {
          uprv_free(v19[0]);
        }
        return v4;
      }
    }

    else if (v9 - v6 != 3 || strlen(v6) <= 8)
    {
      goto LABEL_13;
    }
  }

  uint64_t v12 = u_getPropertyValueEnum(UCHAR_SCRIPT, v6);
  if (v12 == -1)
  {
    int v10 = 0;
    goto LABEL_23;
  }

  if (*a4 > 0) {
    return 0LL;
  }
  if (a3) {
    *a2 = v12;
  }
  else {
    *a4 = 15;
  }
  return 1LL;
}

  uint64_t v26 = 0;
  int v27 = (const uint8_t *)(v16 + (int)a2);
  unint64_t v28 = v10 - a2;
  if (a4) {
    uint64_t v29 = a4 + 2LL * a5;
  }
  else {
    uint64_t v29 = 0LL;
  }
  puint64_t i = 0;
  uint64_t v30 = (_WORD *)a4;
  uint64_t v31 = 0;
  if (v28 >= 1 && v29 > a4)
  {
    uint64_t v26 = 0;
    uint64_t v30 = (_WORD *)a4;
    while (1)
    {
      puint64_t i = v26 + 1;
      int v32 = v27[v26];
      if ((char)v27[v26] < 0)
      {
        uint64_t v33 = utf8_nextCharSafeBody(v27, &pi, v28, v32, -3);
        if (HIWORD(v33))
        {
          *uint64_t v30 = (v33 >> 10) - 10304;
          if ((unint64_t)(v30 + 1) >= v29)
          {
            uint64_t v31 = 1;
            uint64_t v26 = pi;
            ++v30;
            break;
          }

          v30[1] = v33 & 0x3FF | 0xDC00;
          v30 += 2;
        }

        else
        {
          *v30++ = v33;
        }
      }

      else
      {
        *v30++ = v32;
      }

      uint64_t v26 = pi;
      if (pi >= v28 || (unint64_t)v30 >= v29)
      {
        uint64_t v31 = 0;
        break;
      }
    }
  }

  while (v26 < v28)
  {
    uint64_t v35 = v26 + 1;
    puint64_t i = v26 + 1;
    UErrorCode v36 = (char)v27[v26];
    if (v36 < 0)
    {
      else {
        int v37 = 2;
      }
      v31 += v37;
      uint64_t v26 = pi;
    }

    else
    {
      ++v31;
      uint64_t v26 = v35;
    }
  }

  uint64_t v6 = v31 + (((unint64_t)v30 - a4) >> 1);
  u_terminateUChars(a4, a5, v6, a6);
  sub_180883AAC(a1, v10, 1);
  return v6;
}

  uint64_t result = dword_180A2CA74[(int)v6 - v5];
LABEL_44:
  *puint64_t i = v6;
  return result;
}

  if (BYTE4(v25[1])) {
    uprv_free(v25[0]);
  }
LABEL_42:
  icu::UVector32::~UVector32((void **)v22);
}

    icu::TimeZoneTransition::setTime((uint64_t)a4, v21);
    int v27 = (icu::TimeZoneRule *)(*((uint64_t (**)(UChar **))*v20 + 3))(v20);
    icu::TimeZoneTransition::adoptFrom(a4, v27);
    unint64_t v28 = (icu::TimeZoneRule *)(*((uint64_t (**)(UChar **))*v19 + 3))(v19);
    icu::TimeZoneTransition::adoptTo(a4, v28);
    unsigned int v8 = 1LL;
    goto LABEL_41;
  }

  return v8;
}

                    icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)status);
                    goto LABEL_88;
                  }

                  goto LABEL_45;
                }
              }

              icu::UnicodeString::append((uint64_t)status, v31);
            }

            uint64_t v30 = 0;
            if (v32 == 125) {
              goto LABEL_40;
            }
            uint64_t v29 = (void *)*(unsigned int *)a4;
            continue;
          }
        }

        if (u_isdigit(v28))
        {
          uint64_t v33 = 0;
          uint64_t v30 = 0;
          unsigned int v34 = *(_DWORD *)(*(void *)(*((void *)this + 1) + 136LL) + 8LL);
          while (1)
          {
            chunkOffset = a3->chunkOffset;
            if ((int)chunkOffset >= a3->chunkLength || (UErrorCode v36 = a3->chunkContents[chunkOffset], v36 >> 11 > 0x1A))
            {
              UErrorCode v36 = utext_current32(a3);
              if (v36 == -1) {
                goto LABEL_88;
              }
            }

            if (!u_isdigit(v36)) {
              goto LABEL_88;
            }
            int v37 = u_charDigitValue(v36) + 10 * v30;
            if (v37 > v34) {
              break;
            }
            int v38 = a3->chunkOffset;
            else {
              a3->chunkOffset = v38 + 1;
            }
            --v33;
            uint64_t v30 = v37;
          }

          if (v33)
          {
LABEL_88:
          }

          else
          {
            *a4 = U_INDEX_OUTOFBOUNDS_ERROR;
          }
        }

        else
        {
          *a4 = U_REGEX_INVALID_CAPTURE_GROUP_NAME;
        }
      }

      else
      {
        if (v20 != 92)
        {
          if (!HIWORD(v20))
          {
            LOWORD(status[0]) = v20;
            goto LABEL_72;
          }

          LOWORD(status[0]) = (v20 >> 10) - 10304;
          HIWORD(status[0]) = v20 & 0x3FF | 0xDC00;
LABEL_65:
          uint64_t v39 = ut;
          uint64_t v40 = v10;
          uint64_t v41 = v10;
          uint64_t v42 = 2;
LABEL_73:
          v10 += utext_replace(v39, v40, v41, (const UChar *)status, v42, a4);
          goto LABEL_95;
        }

        int v21 = a3->chunkOffset;
        if ((int)v21 >= a3->chunkLength || (unint64_t v22 = a3->chunkContents[v21], v22 >> 11 > 0x1A))
        {
          unint64_t v22 = utext_current32(a3);
          if (v22 == -1) {
            return this;
          }
        }

        if ((v22 & 0xFFFFFFDF) == 0x55)
        {
          offset = 0;
          *(void *)status = a3;
          *(void *)&v52 = 0xFFFFFFFFLL;
          uint64_t v23 = u_unescapeAt((UNESCAPE_CHAR_AT)sub_18096A248, &offset, 0x7FFFFFFF, status);
          if (v23 != -1)
          {
            if (!HIWORD(v23))
            {
              replacementText[0] = v23;
              unsigned int v24 = ut;
              int v25 = v10;
              uint64_t v26 = v10;
              int v27 = 1;
              goto LABEL_80;
            }

            replacementText[0] = (v23 >> 10) - 10304;
            replacementText[1] = v23 & 0x3FF | 0xDC00;
            if (*(int *)a4 <= 0)
            {
              unsigned int v24 = ut;
              int v25 = v10;
              uint64_t v26 = v10;
              int v27 = 2;
LABEL_80:
              v10 += utext_replace(v24, v25, v26, replacementText, v27, a4);
            }

            if ((_DWORD)v52 == offset)
            {
              uint64_t v44 = a3->chunkOffset;
              uint64_t v45 = __OFSUB__(v44, 1);
              __int128 v46 = v44 - 1;
              if (v46 < 0 != v45 || a3->chunkContents[v46] >> 11 > 0x1Au) {
                utext_previous32(a3);
              }
              else {
                a3->chunkOffset = v46;
              }
            }

            else if ((_DWORD)v52 != offset - 1)
            {
              utext_moveIndex32(a3, offset + ~(_DWORD)v52);
            }
          }
        }

        else
        {
          uint64_t v43 = a3->chunkOffset;
          else {
            a3->chunkOffset = v43 + 1;
          }
          if (!HIWORD(v22))
          {
            LOWORD(status[0]) = v22;
LABEL_72:
            uint64_t v39 = ut;
            uint64_t v40 = v10;
            uint64_t v41 = v10;
            uint64_t v42 = 1;
            goto LABEL_73;
          }

          LOWORD(status[0]) = (v22 >> 10) - 10304;
          HIWORD(status[0]) = v22 & 0x3FF | 0xDC00;
        }
      }

                  int v25 = v79;
                  goto LABEL_43;
                }
              }
            }

    LOBYTE(v7) = v10 - v7;
  }

  return (char)v7;
}

      uint64_t result = 0LL;
      goto LABEL_41;
    }

    if (v15)
    {
      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)(v15 + 17));
      icu::UnicodeString::~UnicodeString(v48, (icu::UnicodeString *)(v15 + 9));
      icu::UnicodeString::~UnicodeString(v49, (icu::UnicodeString *)(v15 + 1));
      icu::UMemory::operator delete(v15);
    }

    if (v12)
    {
      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)(v12 + 17));
      icu::UnicodeString::~UnicodeString(v50, (icu::UnicodeString *)(v12 + 9));
      icu::UnicodeString::~UnicodeString(v51, (icu::UnicodeString *)(v12 + 1));
      icu::UMemory::operator delete(v12);
    }

    uint64_t v12 = 0LL;
    goto LABEL_45;
  }

  uint64_t v15 = sub_18099EFA4(v14, 0LL);
  uint64_t v39 = sub_18099EFA4((uint64_t)v8, 0LL);
  uint64_t v12 = (UChar **)v39;
  if (!v15 || !v39) {
    goto LABEL_40;
  }
  uint64_t v53 = 40;
  uint64_t v40 = icu::UnicodeString::doAppend((uint64_t)(v39 + 1), (uint64_t)&v53, 0, 1LL);
  unsigned int v19 = (icu::UnicodeString *)(v15 + 1);
  uint64_t v41 = *((unsigned __int16 *)v15 + 8);
  uint64_t v42 = (__int16)v41;
  uint64_t v43 = v41 >> 5;
  if (v42 >= 0) {
    uint64_t v44 = v43;
  }
  else {
    uint64_t v44 = *((unsigned int *)v15 + 5);
  }
  uint64_t v45 = icu::UnicodeString::doAppend(v40, (const icu::UnicodeString *)(v15 + 1), 0, v44);
  v54 = 41;
  icu::UnicodeString::doAppend(v45, (uint64_t)&v54, 0, 1LL);
  if (v8)
  {
    uint64_t v26 = v8 + 25;
    goto LABEL_37;
  }

  uint64_t v30 = (v19 + 1);
  if (v35) {
    *uint64_t v35 = v18;
  }
  return v30;
}

      *((_DWORD *)this + 100) += v12;
    }

    else
    {
      if (v5 >= 3)
      {
        uint64_t v14 = (uint64_t *)*v4;
        if ((_DWORD)v14)
        {
          unint64_t v22 = icu::UnicodeString::char32At(v14, (icu::FCDUTF8CollationIterator *)((char *)this + 432), (int)v14 - 1);
          CharSafeBody = (unint64_t)v22;
          else {
            uint64_t v23 = -1;
          }
          *((_DWORD *)this + 100) += v23;
          return CharSafeBody;
        }

LABEL_10:
  if (*(void *)&v42[0]) {
    uhash_close(*(_BYTE **)&v42[0]);
  }
LABEL_4:
  if (v44[0]) {
    uhash_close(v44[0]);
  }
  return v8;
}

    uint64_t v6 = 0LL;
    *a6 = 1;
    return v6;
  }

  return 0LL;
}

  qword_18C4489C0 = (uint64_t)v5;
LABEL_11:
  if (BYTE4(v12[1])) {
    uprv_free(v12[0]);
  }
  umtx_unlock((std::mutex **)&unk_18C4489D8);
  return v5;
}

  uint64_t v12 = icu::UMemory::operator new(v5, (icu::UMemory *)0xA0, v4);
  if (!v12)
  {
    *a1[2] = U_MEMORY_ALLOCATION_ERROR;
    return;
  }

  uint64_t v13 = v12;
  uint64_t v14 = sub_1807FD388(v12, 8LL);
  uint64_t v15 = (uint64_t **)a1[1];
  *(void *)(v14 + 16) = *v15;
  uint64_t v16 = *v15;
  v16[1] = v14;
  int v18 = icu::UMemory::operator new(v16, (icu::UMemory *)0xA0, v17);
  if (!v18)
  {
    v13[3] = 0LL;
    *a1[2] = U_MEMORY_ALLOCATION_ERROR;
    int v11 = (uint64_t)v13;
    goto LABEL_22;
  }

  unsigned int v19 = (uint64_t)v18;
  unsigned int v20 = sub_1807FD388(v18, 6LL);
  v13[3] = v20;
  *(void *)(v20 + 8) = v13;
  *(void *)a1[1] = v13;
  sub_1807FD620(*(void *)a1[1], v21);
  sub_1808039B4((uint64_t)a1, *(int **)a1[1]);
  sub_180803A84((uint64_t)a1, *(icu::UVector ***)a1[1]);
  sub_180803B68((uint64_t)a1, *(icu::UVector ***)a1[1]);
  sub_180803C48((uint64_t)a1, *(int **)a1[1]);
  unint64_t v22 = *a1;
  if (*((_BYTE *)*a1 + 152))
  {
    sub_180803D38((uint64_t)a1, *(void *)a1[1], v19);
    unint64_t v22 = *a1;
  }

  sub_180803FA4((uint64_t)a1);
  sub_180804320((uint64_t)a1, v23, v24);
  sub_1808044C4((uint64_t)a1);
  sub_180804644((uint64_t)a1);
  sub_180804770((uint64_t)a1);
  sub_18080488C(a1);
}

    uint64_t v6 = v2 - 1;
    if (v5) {
      uint64_t v6 = v4;
    }
  }

  return LOBYTE(v3[2 * v6 + 1]);
}

    v82 = v5;
    uint64_t v13 = *v3;
    if ((v13 & 0xFC00) != 0xDC00) {
      goto LABEL_164;
    }
    ++v3;
    uint64_t v14 = (i << 10) - 56613888 + v13;
    uint64_t v15 = v13 - v9;
    if ((v14 - v9) < 0x80)
    {
LABEL_13:
      UErrorCode *v6 = v15 | 0x80;
      goto LABEL_92;
    }

    uint64_t v16 = 0LL;
    unint64_t v17 = 4224;
    while ((v14 - *(_DWORD *)(v4 + 4 * v16 + 32)) >= 0x80)
    {
      ++v16;
      v17 += 256;
      if (v16 == 8) {
        goto LABEL_27;
      }
    }

    if ((v16 & 0x80) == 0)
    {
      unint64_t v22 = *(unsigned int *)(v4 + 4 * v16 + 32);
      LOBYTE(v86) = v16;
      uint64_t v23 = v8;
      uint64_t result = sub_18083F604(v4, v16);
      int v9 = v22;
      unsigned int v8 = v23;
      uint64_t i = v17 | (v14 - v22);
      goto LABEL_98;
    }

  a2 = v5;
  if (length < 0) {
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v6 = v4 - a2;
  if (v6 < length) {
    goto LABEL_12;
  }
  if ((v3 & 2) != 0) {
    goto LABEL_13;
  }
LABEL_7:
  uint64_t v7 = (char *)*((void *)this + 3);
  return u_countChar32((const UChar *)&v7[2 * a2], length);
}

  a2 = v6;
  if (length < 0) {
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v7 = v5 - a2;
  if (v7 < length) {
    goto LABEL_12;
  }
  if ((v4 & 2) != 0) {
    goto LABEL_13;
  }
LABEL_7:
  unsigned int v8 = (char *)*((void *)this + 3);
  return u_strHasMoreChar32Than((const UChar *)&v8[2 * a2], length, number);
}

  a2 = v7;
  if (a3 < 0) {
    goto LABEL_11;
  }
LABEL_5:
  unsigned int v8 = v6 - a2;
  if (v8 < a3) {
    goto LABEL_12;
  }
  if ((v5 & 2) == 0)
  {
LABEL_7:
    int v9 = (char *)*((void *)result + 3);
    goto LABEL_14;
  }

  int v10 = 0;
LABEL_11:
  a3 = v10;
LABEL_12:
  if ((v7 & 0x11) != 0) {
    goto LABEL_13;
  }
  if ((v7 & 2) != 0)
  {
    int v11 = (char *)this + 10;
    goto LABEL_18;
  }

  int v11 = (char *)*((void *)this + 3);
  if (!v11)
  {
LABEL_13:
    int v11 = (char *)this + 10;
    a3 = -2;
  }

  a3 = v6;
  if (count < 0) {
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v7 = v5 - a3;
  if (v7 < count) {
    goto LABEL_12;
  }
  if ((v4 & 2) == 0)
  {
LABEL_7:
    unsigned int v8 = *(void *)(a1 + 24);
    goto LABEL_14;
  }

  a3 = v6;
  if (count < 0) {
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v7 = v5 - a3;
  if (v7 < count) {
    goto LABEL_12;
  }
  if ((v4 & 2) == 0)
  {
LABEL_7:
    unsigned int v8 = (char *)*((void *)this + 3);
    goto LABEL_14;
  }

  a3 = v6;
  if (count < 0) {
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v7 = v5 - a3;
  if (v7 < count) {
    goto LABEL_12;
  }
  if ((v4 & 2) == 0)
  {
LABEL_7:
    unsigned int v8 = (char *)*((void *)this + 3);
    goto LABEL_14;
  }

  __int16 v5 = 27;
LABEL_11:
  if (v4 >= v5)
  {
    if (v4 == 0x7FFFFFFF) {
      return 0LL;
    }
    goto LABEL_19;
  }

  if ((v1 & 8) == 0)
  {
    if ((v1 & 4) == 0) {
      goto LABEL_23;
    }
    uint64_t v6 = atomic_load((unsigned int *)(*((void *)this + 3) - 4LL));
    if (v6 == 1) {
      goto LABEL_23;
    }
LABEL_19:
    if (icu::UnicodeString::cloneArrayIfNeeded(this, v4 + 1, -1, 1, 0LL, 0))
    {
      if ((*((_WORD *)this + 4) & 2) != 0) {
        uint64_t result = (uint64_t)this + 10;
      }
      else {
        uint64_t result = *((void *)this + 3);
      }
LABEL_23:
      *(_WORD *)(result + 2LL * v4) = 0;
      return result;
    }

    return 0LL;
  }

  if (*(_WORD *)(result + 2LL * v4)) {
    goto LABEL_19;
  }
  return result;
}

    if ((v30 & 2) != 0) {
      unsigned int v8 = (unsigned __int16 *)&v30 + 1;
    }
    else {
      unsigned int v8 = (unsigned __int16 *)v31;
    }
    LODWORD(v2) = *v8;
    goto LABEL_14;
  }

  uint64_t v7 = DWORD1(v30);
  if (DWORD1(v30) == 1) {
    goto LABEL_10;
  }
  if (SDWORD1(v30) >= 3) {
    goto LABEL_23;
  }
LABEL_17:
  int v11 = icu::UnicodeString::char32At((uint64_t *)(unsigned __int16)v30, (icu::UnicodeString *)&v29, 0);
  if (v11 < 0x10000) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = 2;
  }
  if ((v11 & 0x80000000) == 0)
  {
    LODWORD(v2) = v11;
    if (v7 == v12) {
      goto LABEL_14;
    }
  }

  uint64_t v6 = (unsigned __int16)v30;
LABEL_23:
  int v27 = 0u;
  memset(v28, 0, sizeof(v28));
  int v25 = 0u;
  uint64_t v26 = 0u;
  uint64_t v23 = 0u;
  unsigned int v24 = 0u;
  *(_OWORD *)dest = 0u;
  if ((v6 & 0x11) != 0)
  {
    uint64_t v13 = 0LL;
  }

  else if ((v6 & 2) != 0)
  {
    uint64_t v13 = (const UChar *)&v30 + 1;
  }

  else
  {
    uint64_t v13 = (const UChar *)v31;
  }

  uint64_t v14 = (__int16)v6;
  uint64_t v15 = v6 >> 5;
  if (v14 >= 0) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = DWORD1(v30);
  }
  unint64_t v17 = u_strFoldCase(dest, 62, v13, v16, 0, &pErrorCode);
  unsigned int v4 = 0LL;
  __int16 v5 = pErrorCode;
  if (pErrorCode <= U_ZERO_ERROR)
  {
    int v18 = v17;
    if ((v30 & 0x11) != 0)
    {
      unsigned int v19 = 0LL;
    }

    else if ((v30 & 2) != 0)
    {
      unsigned int v19 = (const UChar *)&v30 + 1;
    }

    else
    {
      unsigned int v19 = (const UChar *)v31;
    }

    if ((v30 & 0x8000u) == 0LL) {
      unsigned int v20 = (unsigned __int16)v30 >> 5;
    }
    else {
      unsigned int v20 = DWORD1(v30);
    }
    unsigned int v4 = u_strCompare(v19, v20, dest, v18, 0) != 0;
  }

        *a5 = v10;
        return v5;
      }
    }

    else if (!a4)
    {
      goto LABEL_5;
    }

    __int16 v5 = 0LL;
    int v10 = 1;
    goto LABEL_10;
  }

  return 0LL;
}

      ++v8;
      if (!--v7) {
        goto LABEL_11;
      }
    }

    int v9 = word_180A2C1E0[v9 - 64336];
    if (!v9) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }

  uint64_t v14 = icu::RuleBasedCollator::clone(Instance, v10, (uint64_t *)v12);
  *((void *)this + 8) = v14;
  if (!v14) {
    goto LABEL_27;
  }
  icu::RuleBasedCollator::setAttribute((uint64_t)v14, 5, 0, (int *)a3);
  StringsInuint64_t Script = icu::AlphabeticIndex::firstStringsInScript((uint64_t ***)this, a3);
  *((void *)this + 6) = StringsInScript;
  if (*(int *)a3 <= 0)
  {
    icu::UVector::sortWithUComparator( StringsInScript,  (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_180893D88,  *((void *)this + 8),  a3);
    if (*(int *)a3 <= 0)
    {
      while (1)
      {
        uint64_t v16 = (icu::UVector *)*((void *)this + 6);
        if (!*((_DWORD *)v16 + 2)) {
          break;
        }
        unint64_t v17 = (icu::RuleBasedCollator *)*((void *)this + 8);
        int v18 = (const icu::UnicodeString *)icu::UVector::elementAt(v16, 0);
        if (icu::RuleBasedCollator::compare(v17, v18, (icu::AlphabeticIndex *)((char *)this + 336), a3))
        {
          int v21 = icu::AlphabeticIndex::addChineseIndexCharacters(this, a3);
          if (a2)
          {
            if (!v21) {
              icu::AlphabeticIndex::addIndexExemplars((icu::UVector ***)this, (char **)a2, a3);
            }
          }

          return;
        }

        icu::UVector::removeElementAt(*((uint64_t (***)(void))this + 6), 0);
      }

      goto LABEL_20;
    }
  }

  unsigned int v8 = 0;
LABEL_22:
  uint64_t v14 = v6 + v1;
  if (v14 > 10) {
    return v8 & 1 | 0x80000002;
  }
  if (v7 >= v14)
  {
    unint64_t v17 = v8;
  }

  else
  {
    uint64_t v15 = &dword_180A37120[v7];
    uint64_t v16 = v14 - (uint64_t)v7;
    unint64_t v17 = v8;
    do
    {
      unsigned int v19 = *v3++;
      int v18 = v19;
      unsigned int v20 = *v15++;
      v17 += v20 * v18;
      --v16;
    }

    while (v16);
    uint64_t v7 = v14;
  }

  if (v14 == 10)
  {
    int v21 = v17 / dword_180A37120[v7 - 1];
    unint64_t v22 = *(v3 - 1);
    uint64_t v23 = v2 >= 0 || v17 <= 1999999997;
    unsigned int v24 = !v23;
    if (v21 != v22 || v24) {
      return v8 & 1 | 0x80000002;
    }
    if (v17 > 999999999 && v2 > -1) {
      return v8 & 1 | 0x80000002;
    }
  }

  if (v2 >= 0) {
    return v17;
  }
  return -v17;
}

  int v11 = *(unsigned __int16 *)(a3 + 8);
  if (v11 < 0x20)
  {
    uint64_t v15 = 0;
  }

  else
  {
    if ((v11 & 0x8000u) == 0) {
      uint64_t v12 = v11 >> 5;
    }
    else {
      uint64_t v12 = *(_DWORD *)(a3 + 12);
    }
    if (v12)
    {
      if ((v11 & 2) != 0) {
        uint64_t v13 = (unsigned __int16 *)(a3 + 10);
      }
      else {
        uint64_t v13 = *(unsigned __int16 **)(a3 + 24);
      }
      uint64_t v14 = *v13;
    }

    else
    {
      uint64_t v14 = 0xFFFF;
    }

    uint64_t v15 = uscript_getScript(v14, &v22) != 38;
  }

  uint64_t v16 = 8LL;
  if (v15) {
    uint64_t v16 = 352LL;
  }
  unint64_t v17 = a1 + v16;
  int v18 = !v15;
  unsigned int v19 = 280LL;
  if (!v18) {
    unsigned int v19 = 424LL;
  }
  unsigned int v20 = a1 + v19;
  if (v5) {
    return v20;
  }
  else {
    return v17;
  }
}

      if (!(_DWORD)v31) {
        goto LABEL_21;
      }
    }

    icu::number::impl::DecimalQuantity::appendDigit((icu::number::impl::DecimalQuantity *)v28, Long, 0, 1);
    ++v15;
    int v18 = v31;
    *(_DWORD *)(a3 + 8) += v31;
    icu::UnicodeString::doReplace((uint64_t)&v33, 0LL, v18, 0LL, 0, 0LL);
    while (1)
    {
      if (SWORD4(v33) < 0)
      {
      }

      else if (WORD4(v33) < 0x20u)
      {
        break;
      }

      unsigned int v19 = (_WORD *)((BYTE8(v33) & 2) != 0 ? (unint64_t)&v33 | 0xA : *((void *)&v34 + 1));
      if (*v19 != 32) {
        break;
      }
      icu::UnicodeString::doReplace((uint64_t)&v33, 0LL, 1LL, 0LL, 0, 0LL);
      ++*(_DWORD *)(a3 + 8);
    }

  uint64_t v14 = *((_DWORD *)this + 25);
LABEL_11:
  uint64_t v15 = *((unsigned __int16 *)this + 16);
  if ((v15 & 0x11) != 0)
  {
    uint64_t v16 = 0LL;
    if ((v15 & 0x8000) != 0) {
      goto LABEL_18;
    }
LABEL_16:
    unint64_t v17 = v15 >> 5;
    goto LABEL_19;
  }

  if ((v15 & 2) != 0)
  {
    uint64_t v16 = (const UChar *)this + 17;
    if ((v15 & 0x8000) == 0) {
      goto LABEL_16;
    }
  }

  else
  {
    uint64_t v16 = (const UChar *)this[6];
    if ((v15 & 0x8000) == 0) {
      goto LABEL_16;
    }
  }

  uint64_t v14 = *((_DWORD *)this + 25);
LABEL_11:
  uint64_t v15 = *((unsigned __int16 *)this + 16);
  if ((v15 & 0x11) != 0)
  {
    uint64_t v16 = 0LL;
    if ((v15 & 0x8000) != 0) {
      goto LABEL_18;
    }
LABEL_16:
    unint64_t v17 = v15 >> 5;
    goto LABEL_19;
  }

  if ((v15 & 2) != 0)
  {
    uint64_t v16 = (const UChar *)this + 17;
    if ((v15 & 0x8000) == 0) {
      goto LABEL_16;
    }
  }

  else
  {
    uint64_t v16 = (const UChar *)this[6];
    if ((v15 & 0x8000) == 0) {
      goto LABEL_16;
    }
  }

  unsigned int v8 = *((_DWORD *)this + 25);
LABEL_11:
  int v9 = *((unsigned __int16 *)this + 16);
  if ((v9 & 0x11) != 0)
  {
    int v10 = 0LL;
    if ((v9 & 0x8000) != 0) {
      goto LABEL_18;
    }
LABEL_16:
    int v11 = v9 >> 5;
    goto LABEL_19;
  }

  if ((v9 & 2) != 0)
  {
    int v10 = (const UChar *)this + 17;
    if ((v9 & 0x8000) == 0) {
      goto LABEL_16;
    }
  }

  else
  {
    int v10 = (const UChar *)this[6];
    if ((v9 & 0x8000) == 0) {
      goto LABEL_16;
    }
  }

  ures_close(v7);
  return *a3 < 1;
}

      unsigned int v4 = 0LL;
      goto LABEL_11;
    }

    uint64_t v15 = (uint64_t *)DWORD2(v23[0]);
    if (SDWORD2(v23[0]) <= 1
      && ((v27 & 0x8000u) == 0LL ? (uint64_t v16 = (unsigned __int16)v27 >> 5) : (uint64_t v16 = DWORD1(v27)),
          (icu::UnicodeString::doIndexOf((uint64_t)&v26, 0x3Bu, 0, v16) & 0x80000000) != 0))
    {
      unsigned int v4 = icu::UVector::elementAt((icu::UVector *)v23, 0);
      if (v4) {
        goto LABEL_20;
      }
    }

    else
    {
      unint64_t v17 = (icu::CompoundTransliterator *)icu::UMemory::operator new(v15, (icu::UMemory *)0x68, v10);
      if (v17)
      {
        unsigned int v4 = (uint64_t)v17;
        icu::CompoundTransliterator::CompoundTransliterator(v17, (icu::UVector *)v23, a3, a4);
LABEL_20:
        icu::UnicodeString::operator=((UChar **)(v4 + 8), &v26);
        int v25 = 0;
        icu::UnicodeString::doAppend(v4 + 8, (uint64_t)&v25, 0, 1LL);
        int v18 = *(unsigned __int16 *)(v4 + 16);
        else {
          unsigned int v19 = v18 >> 5;
        }
        unsigned int v20 = v19 - 1;
        if ((v18 & 1) != 0 && v19 == 1)
        {
          icu::UnicodeString::unBogus(v4 + 8);
        }

        else if (v19 > v20)
        {
          if (v20 > 1023)
          {
            *(_WORD *)(v4 + 16) = v18 | 0xFFE0;
            *(_DWORD *)(v4 + 20) = v20;
          }

          else
          {
            *(_WORD *)(v4 + 16) = *(_WORD *)(v4 + 16) & 0x1F | (32 * v20);
          }
        }

        if (v9)
        {
          int v21 = *(void *)(v4 + 72);
          if (v21) {
            (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
          }
          *(void *)(v4 + 72) = v9;
        }

        goto LABEL_11;
      }
    }

    goto LABEL_6;
  }

  return 0LL;
}

  uint64_t v45 = a1;
  __int128 v47 = 0LL;
  memset(v46, 0, sizeof(v46));
  icu::UVector::UVector((icu::UVector *)v46, a5);
  uint64_t v15 = DWORD2(v58[0]);
  else {
    uint64_t v16 = v56;
  }
  if (v16 < 1)
  {
    int v18 = 1;
LABEL_29:
    uint64_t v29 = (icu::CompoundTransliterator *)icu::UMemory::operator new((uint64_t *)v15, (icu::UMemory *)0x68, v14);
    Instance = (uint64_t *)v29;
    if (v29)
    {
      icu::CompoundTransliterator::CompoundTransliterator(v29, (icu::UVector *)v46, v18 - 1, a4, a5);
      icu::UnicodeString::operator=((UChar **)Instance + 1, v45);
      LOWORD(v50) = 0;
      icu::UnicodeString::doAppend((uint64_t)(Instance + 1), (uint64_t)&v50, 0, 1LL);
      uint64_t v30 = *((unsigned __int16 *)Instance + 8);
      else {
        uint64_t v31 = v30 >> 5;
      }
      int v38 = v31 - 1;
      if ((v30 & 1) != 0 && v31 == 1)
      {
        icu::UnicodeString::unBogus((uint64_t)(Instance + 1));
      }

      else if (v31 > v38)
      {
        if (v38 > 1023)
        {
          *((_WORD *)Instance + 8) = v30 | 0xFFE0;
          *((_DWORD *)Instance + 5) = v38;
        }

        else
        {
          *((_WORD *)Instance + 8) = Instance[2] & 0x1F | (32 * v38);
        }
      }

      uint64_t v42 = sub_18095F4C0((uint64_t)&v55);
      uint64_t v43 = Instance[9];
      if (v43) {
        (*(void (**)(uint64_t))(*(void *)v43 + 8LL))(v43);
      }
      Instance[9] = v42;
    }

    icu::UVector::~UVector((icu::UVector *)v46);
    goto LABEL_57;
  }

  unint64_t v17 = 0;
  int v18 = 1;
  while (1)
  {
    if (v17 < SDWORD2(v58[0]))
    {
      unsigned int v19 = icu::UVector::elementAt((icu::UVector *)v58, v17);
      if (*(unsigned __int16 *)(v19 + 8) >= 0x20u)
      {
        unsigned int v20 = (uint64_t *)icu::Transliterator::createInstance(v19, 0, a4, a5);
        int v21 = v20;
        if (*(int *)a5 >= 1)
        {
          if (!v20) {
            goto LABEL_51;
          }
LABEL_50:
          (*(void (**)(uint64_t *))(*v21 + 8))(v21);
          goto LABEL_51;
        }

        if (v20)
        {
          if (sub_1807F874C(*(void *)(*v20 - 8), (uint64_t)&unk_1897273B0))
          {
            (*(void (**)(uint64_t *))(*v21 + 8))(v21);
          }

          else
          {
            icu::UVector::addElement((icu::UVector *)v46, v21, a5);
          }
        }
      }
    }

    uint64_t v15 = v56;
    if ((_DWORD)v56) {
      break;
    }
LABEL_26:
    if (v16 == ++v17) {
      goto LABEL_29;
    }
  }

  unint64_t v22 = icu::UVector::orphanElementAt((icu::UVector *)((char *)&v55 + 8), 0);
  int v25 = icu::UMemory::operator new(v24, (icu::UMemory *)0x68, v23);
  if (v25)
  {
    int v21 = v25;
    icu::UnicodeString::UnicodeString((uint64_t)v49, (uint64_t)L"%Pass");
    icu::UnicodeString::UnicodeString((uint64_t)v48, v18);
    icu::operator+((uint64_t)v49, (uint64_t)v48, (uint64_t)&v50);
    sub_18095C8BC(v21, &v50, v22, 1LL);
    icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)&v50);
    icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)v48);
    icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v49);
    icu::UVector::addElement((icu::UVector *)v46, v21, a5);
    uint64_t v15 = *(unsigned int *)a5;
    ++v18;
    goto LABEL_26;
  }

      uint64_t v13 = 2;
    }

    else
    {
      uint64_t v13 = 1;
    }

    *a8 = v13;
LABEL_13:
    unsigned int v8 = 0xFFFFFFFFLL;
  }

        unint64_t v22 = icu::UMemory::operator new(v18, (icu::UMemory *)0x160, v17);
        if (v22)
        {
          unsigned int v8 = v22;
          icu::TimeArrayTimeZoneRule::TimeArrayTimeZoneRule((uint64_t)v22, a1, v12, a3, v19, v14, 2);
          uprv_free(v19);
          return v8;
        }

        uprv_free(v19);
      }
    }

    else
    {
      uint64_t v23 = icu::UMemory::operator new(v7, (icu::UMemory *)0x160, a2);
      if (v23)
      {
        unsigned int v8 = v23;
        icu::TimeArrayTimeZoneRule::TimeArrayTimeZoneRule((uint64_t)v23, a1, v12, a3, &v25, 1LL, 2);
        return v8;
      }
    }

    unsigned int v8 = 0LL;
    *a6 = 7;
    return v8;
  }

  return 0LL;
}

void icu::CanonicalIterator::permute(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  if (*a4 > 0) {
    return;
  }
  unsigned int v8 = *(unsigned __int16 *)(a1 + 8);
  int v9 = (__int16)v8;
  int v10 = v8 >> 5;
  if (v9 < 0) {
    int v10 = *(_DWORD *)(a1 + 12);
  }
  if (v10 > 2)
  {
    uint64_t v50 = 0LL;
    __int128 v48 = 0u;
    __int128 v49 = 0u;
    __int128 v46 = 0u;
    __int128 v47 = 0u;
    __int128 v45 = 0u;
  }

  else
  {
    if ((int)icu::UnicodeString::countChar32((icu::UnicodeString *)a1, 0, 0x7FFFFFFF) < 2)
    {
      uint64_t v12 = (icu::UnicodeString *)icu::UMemory::operator new((icu::UMemory *)0x40, v11);
      if (v12)
      {
        uint64_t v13 = (uint64_t)v12;
        icu::UnicodeString::UnicodeString(v12, (UChar **)a1);
        uint64_t v14 = *a3;
        uint64_t v16 = (icu::UnicodeString *)icu::UMemory::operator new((icu::UMemory *)0x40, v15);
        uint64_t v17 = (uint64_t)v16;
        if (v16) {
          icu::UnicodeString::UnicodeString(v16, (UChar **)a1);
        }
        uhash_put(v14, v17, v13, a4);
      }

      else
      {
        *a4 = 7;
      }

      return;
    }

    int v43 = *a4;
    uint64_t v50 = 0LL;
    __int128 v48 = 0u;
    __int128 v49 = 0u;
    __int128 v46 = 0u;
    __int128 v47 = 0u;
    __int128 v45 = 0u;
    if (v43 > 0) {
      return;
    }
  }

  uhash_init((int32x2_t *)&v45 + 1, (uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0LL, a4);
  if (*a4 <= 0)
  {
    *(void *)&__int128 v45 = (char *)&v45 + 8;
    uhash_setKeyDeleter((uint64_t)&v45 + 8, (uint64_t)uprv_deleteUObject);
    if (*a4 <= 0)
    {
      uhash_setValueDeleter(v45, (uint64_t)uprv_deleteUObject);
      unsigned int v18 = *(unsigned __int16 *)(a1 + 8);
      int v19 = (__int16)v18;
      int v20 = v18 >> 5;
      if (v19 < 0) {
        int v20 = *(_DWORD *)(a1 + 12);
      }
      if (v20 >= 1)
      {
        uint64_t v21 = 0LL;
        do
        {
          unsigned int v22 = icu::UnicodeString::char32At((icu::UnicodeString *)a1, v21);
          int v44 = -1;
          memset(v51, 0, sizeof(v51));
          icu::UnicodeString::UnicodeString((icu::UnicodeString *)v51, (UChar **)a1);
          if (!(_DWORD)a2 || !(_DWORD)v21 || u_getCombiningClass(v22))
          {
            uhash_removeAll(v45);
            if (v22 < 0x10000) {
              uint64_t v23 = 1LL;
            }
            else {
              uint64_t v23 = 2LL;
            }
            uint64_t v24 = icu::UnicodeString::doReplace((uint64_t)v51, v21, v23, 0LL, 0, 0LL);
            icu::CanonicalIterator::permute(v24, a2, &v45, a4);
            if (*a4 > 0)
            {
LABEL_44:
              icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v51);
              break;
            }

            while (1)
            {
              uint64_t v25 = uhash_nextElement((uint64_t *)v45, &v44);
              if (!v25) {
                break;
              }
              uint64_t v27 = *(void *)(v25 + 8);
              uint64_t v28 = icu::UMemory::operator new((icu::UMemory *)0x40, v26);
              if (!v28)
              {
                *a4 = 7;
                goto LABEL_44;
              }

              uint64_t v29 = (UChar **)v28;
              uint64_t v30 = icu::UnicodeString::UnicodeString(v28, v22);
              unsigned int v31 = *(unsigned __int16 *)(v27 + 8);
              int v32 = (__int16)v31;
              unsigned int v33 = v31 >> 5;
              if (v32 >= 0) {
                uint64_t v34 = v33;
              }
              else {
                uint64_t v34 = *(unsigned int *)(v27 + 12);
              }
              icu::UnicodeString::doAppend(v30, (const icu::UnicodeString *)v27, 0, v34);
              uint64_t v35 = *a3;
              int v37 = (icu::UnicodeString *)icu::UMemory::operator new((icu::UMemory *)0x40, v36);
              uint64_t v38 = (uint64_t)v37;
              if (v37) {
                icu::UnicodeString::UnicodeString(v37, v29);
              }
              uhash_put(v35, v38, (uint64_t)v29, a4);
            }
          }

          icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v51);
          if (v22 < 0x10000) {
            int v39 = 1;
          }
          else {
            int v39 = 2;
          }
          uint64_t v21 = (v39 + v21);
          unsigned int v40 = *(unsigned __int16 *)(a1 + 8);
          int v41 = (__int16)v40;
          int v42 = v40 >> 5;
          if (v41 < 0) {
            int v42 = *(_DWORD *)(a1 + 12);
          }
        }

        while ((int)v21 < v42);
      }
    }
  }

  if ((void)v45) {
    uhash_close((_BYTE *)v45);
  }
}

uint64_t sub_1807C33C4(uint64_t *a1, UChar **a2, uint64_t a3, int *a4)
{
  uint64_t v7 = *a1;
  unsigned int v8 = (icu::UnicodeString *)icu::UMemory::operator new((icu::UMemory *)0x40, (unint64_t)a2);
  uint64_t v9 = (uint64_t)v8;
  if (v8) {
    icu::UnicodeString::UnicodeString(v8, a2);
  }
  return uhash_put(v7, v9, a3, a4);
}

uint64_t *icu::CanonicalIterator::getEquivalents2(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int *a5)
{
  v49[9] = *(UChar **)MEMORY[0x1895F89C0];
  if (*a5 > 0) {
    return 0LL;
  }
  int v7 = a4;
  __int16 v5 = a2;
  memset(v49, 0, 64);
  icu::UnicodeString::UnicodeString((uint64_t)v49, a3, a4);
  int v10 = (icu::UnicodeString *)icu::UMemory::operator new((icu::UMemory *)0x40, v9);
  uint64_t v12 = (uint64_t)v10;
  if (v10) {
    icu::UnicodeString::UnicodeString(v10, v49);
  }
  uint64_t v13 = *v5;
  uint64_t v14 = (icu::UnicodeString *)icu::UMemory::operator new((icu::UMemory *)0x40, v11);
  uint64_t v15 = (uint64_t)v14;
  if (v14) {
    icu::UnicodeString::UnicodeString(v14, v49);
  }
  uhash_put(v13, v15, v12, a5);
  uint64_t v46 = 0LL;
  memset(v45, 0, sizeof(v45));
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v45);
  uint64_t v16 = a1;
  if (v7 < 1)
  {
LABEL_47:
    if (*a5 >= 1) {
      __int16 v5 = 0LL;
    }
    goto LABEL_51;
  }

  uint64_t v17 = 0LL;
  while (1)
  {
    unsigned int v18 = *(unsigned __int16 *)(a3 + 2LL * v17);
    if ((v18 & 0xF800) != 0xD800) {
      goto LABEL_18;
    }
    if ((v18 & 0x400) != 0)
    {
      if (!(_DWORD)v17) {
        goto LABEL_18;
      }
      int v22 = *(unsigned __int16 *)(a3 + 2LL * (v17 - 1));
      BOOL v20 = (v22 & 0xFC00) == 55296;
      unsigned int v21 = v18 + (v22 << 10);
    }

    else
    {
      if ((_DWORD)v17 + 1 == v7) {
        goto LABEL_18;
      }
      int v19 = *(unsigned __int16 *)(a3 + 2LL * (v17 + 1));
      BOOL v20 = (v19 & 0xFC00) == 56320;
      unsigned int v21 = v19 + (v18 << 10);
    }

    unsigned int v23 = v21 - 56613888;
    if (v20) {
      unsigned int v18 = v23;
    }
LABEL_18:
    if (icu::Normalizer2Impl::getCanonStartSet( *(icu::Normalizer2Impl **)(v16 + 192),  v18,  (icu::UnicodeSet *)v45)) {
      break;
    }
LABEL_43:
    if (v18 < 0x10000) {
      int v38 = 1;
    }
    else {
      int v38 = 2;
    }
    uint64_t v17 = (v38 + v17);
  }

  memset(v44, 0, sizeof(v44));
  icu::UnicodeSetIterator::UnicodeSetIterator((icu::UnicodeSetIterator *)v44, (const icu::UnicodeSet *)v45);
  if (!icu::UnicodeSetIterator::next((icu::UnicodeSetIterator *)v44))
  {
LABEL_42:
    icu::UnicodeSetIterator::~UnicodeSetIterator((icu::UnicodeSetIterator *)v44);
    goto LABEL_43;
  }

  while (1)
  {
    unsigned int v24 = DWORD2(v44[0]);
    uint64_t v43 = 0LL;
    memset(v42, 0, sizeof(v42));
    if (*a5 <= 0)
    {
      uhash_init((int32x2_t *)v42 + 1, (uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0LL, a5);
      if (*a5 <= 0)
      {
        *(void *)&v42[0] = (char *)v42 + 8;
        uhash_setKeyDeleter((uint64_t)v42 + 8, (uint64_t)uprv_deleteUObject);
      }
    }

    uhash_setValueDeleter(*(uint64_t *)&v42[0], (uint64_t)uprv_deleteUObject);
    if (icu::CanonicalIterator::extract(v16, (uint64_t *)v42, v24, a3, v7, v17, a5))
    {
      memset(v48, 0, sizeof(v48));
      uint64_t v25 = icu::UnicodeString::UnicodeString((uint64_t)v48, a3, v17);
      icu::UnicodeString::append(v25, v24);
      int v41 = -1;
      uint64_t v26 = uhash_nextElement(*(uint64_t **)&v42[0], &v41);
      if (v26)
      {
        uint64_t v27 = v26;
        while (1)
        {
          memset(v47, 0, sizeof(v47));
          icu::UnicodeString::UnicodeString((icu::UnicodeString *)v47, *(UChar ***)(v27 + 8));
          uint64_t v29 = (icu::UnicodeString *)icu::UMemory::operator new((icu::UMemory *)0x40, v28);
          if (!v29) {
            break;
          }
          uint64_t v30 = (UChar **)v29;
          unsigned int v31 = icu::UnicodeString::UnicodeString(v29, v48);
          if (SLOWORD(v47[2]) >= 0) {
            uint64_t v32 = LOWORD(v47[2]) >> 5;
          }
          else {
            uint64_t v32 = v47[3];
          }
          icu::UnicodeString::doAppend((uint64_t)v31, (const icu::UnicodeString *)v47, 0, v32);
          uint64_t v33 = *v5;
          uint64_t v35 = (icu::UnicodeString *)icu::UMemory::operator new((icu::UMemory *)0x40, v34);
          uint64_t v36 = (uint64_t)v35;
          if (v35) {
            icu::UnicodeString::UnicodeString(v35, v30);
          }
          uhash_put(v33, v36, (uint64_t)v30, a5);
          uint64_t v27 = uhash_nextElement(*(uint64_t **)&v42[0], &v41);
          icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v47);
          if (!v27) {
            goto LABEL_33;
          }
        }

        *a5 = 7;
        icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v47);
        int v37 = 1;
      }

      else
      {
LABEL_33:
        int v37 = 0;
      }

      icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v48);
    }

    else
    {
      int v37 = 7;
    }

    if (*(void *)&v42[0]) {
      uhash_close(*(_BYTE **)&v42[0]);
    }
    if (v37 != 7 && v37) {
      break;
    }
    uint64_t v16 = a1;
  }

  icu::UnicodeSetIterator::~UnicodeSetIterator((icu::UnicodeSetIterator *)v44);
  __int16 v5 = 0LL;
LABEL_51:
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v45);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v49);
  return v5;
}

uint64_t icu::CanonicalIterator::extract( uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t a4, int a5, int a6, int *a7)
{
  uint64_t v58 = *MEMORY[0x1895F89C0];
  if (*a7 > 0) {
    return 0LL;
  }
  __int128 v56 = 0u;
  __int128 v57 = 0u;
  __int128 v54 = 0u;
  __int128 v55 = 0u;
  icu::UnicodeString::UnicodeString((uint64_t)&v54, a3);
  if ((SWORD4(v54) & 0x8000u) == 0) {
    int v14 = WORD4(v54) >> 5;
  }
  else {
    int v14 = HIDWORD(v54);
  }
  __int128 v50 = 0u;
  uint64_t v53 = 0LL;
  __int128 v52 = 0u;
  __int128 v51 = 0u;
  __int128 v49 = off_18971B688;
  LOWORD(v50) = 2;
  (*(void (**)(void, __int128 *, void (***)(icu::UnicodeString *__hidden), int *))(**(void **)(a1 + 184) + 24LL))( *(void *)(a1 + 184),  &v54,  &v49,  a7);
  uint64_t Equivalents2 = 0LL;
  if (*a7 > 0) {
    goto LABEL_56;
  }
  if ((v50 & 1) != 0)
  {
    uint64_t Equivalents2 = 0LL;
    *a7 = 7;
    goto LABEL_56;
  }

  int v41 = v14;
  int v42 = a6;
  if ((v50 & 0x11) != 0)
  {
    uint64_t v15 = 0LL;
  }

  else if ((v50 & 2) != 0)
  {
    uint64_t v15 = (unsigned __int16 *)&v50 + 1;
  }

  else
  {
    uint64_t v15 = (unsigned __int16 *)v51;
  }

  if ((v50 & 0x8000u) == 0LL) {
    int v16 = (unsigned __int16)v50 >> 5;
  }
  else {
    int v16 = DWORD1(v50);
  }
  int v17 = *v15;
  int v18 = 1;
  if ((v17 & 0xFC00) == 0xD800 && v16 != 1)
  {
    int v19 = v15[1];
    BOOL v20 = (v19 & 0xFC00) == 56320;
    int v21 = v19 + (v17 << 10) - 56613888;
    int v18 = v20 ? 2 : 1;
    if (v20) {
      int v17 = v21;
    }
  }

  if (a5 <= v42)
  {
LABEL_55:
    uint64_t Equivalents2 = 0LL;
    goto LABEL_56;
  }

  unsigned int v40 = a2;
  int v22 = v42;
  while (1)
  {
    uint64_t v23 = v22 + 1LL;
    unsigned int v24 = *(unsigned __int16 *)(a4 + 2LL * v22);
    if ((v24 & 0xFC00) != 0xD800 || (_DWORD)v23 == a5)
    {
      ++v22;
    }

    else
    {
      int v26 = *(unsigned __int16 *)(a4 + 2 * v23);
      BOOL v27 = (v26 & 0xFC00) == 56320;
      unsigned int v28 = (v24 << 10) - 56613888 + v26;
      if (v27) {
        unsigned int v24 = v28;
      }
      if (v27) {
        v22 += 2;
      }
      else {
        ++v22;
      }
    }

    if (v24 == v17) {
      break;
    }
    icu::UnicodeString::append((uint64_t)&v54, v24);
LABEL_54:
    if (a5 <= v22) {
      goto LABEL_55;
    }
  }

  if (v18 != v16)
  {
    uint64_t v29 = v18 + 1LL;
    int v17 = v15[v18];
    if ((v17 & 0xFC00) != 0xD800 || (_DWORD)v29 == v16)
    {
      ++v18;
    }

    else
    {
      int v31 = v15[v29];
      BOOL v32 = (v31 & 0xFC00) == 56320;
      int v33 = (v17 << 10) - 56613888 + v31;
      if (v32) {
        v18 += 2;
      }
      else {
        ++v18;
      }
      if (v32) {
        int v17 = v33;
      }
    }

    goto LABEL_54;
  }

  icu::UnicodeString::doAppend((uint64_t)&v54, a4 + 2LL * v22, 0, (a5 - v22));
  int v36 = WORD4(v54) >> 5;
  if (SWORD4(v54) < 0) {
    int v36 = HIDWORD(v54);
  }
  if (v41 == v36)
  {
    int v44 = (UChar *)off_18971B688;
    LOWORD(v45) = 2;
    uint64_t v37 = icu::UMemory::operator new((icu::UMemory *)0x40, v35);
    uint64_t Equivalents2 = (uint64_t)v40;
    if (v37)
    {
      *(void *)uint64_t v37 = off_18971B688;
      *(_WORD *)(v37 + 8) = 2;
    }

    sub_1807C33C4(v40, &v44, v37, a7);
  }

  else
  {
    __int128 v45 = 0u;
    uint64_t v48 = 0LL;
    __int128 v47 = 0u;
    __int128 v46 = 0u;
    int v44 = (UChar *)off_18971B688;
    LOWORD(v45) = 2;
    (*(void (**)(void, __int128 *, UChar **, int *))(**(void **)(a1 + 184) + 24LL))( *(void *)(a1 + 184),  &v54,  &v44,  a7);
    uint64_t Equivalents2 = 0LL;
    if (*a7 <= 0)
    {
      uint64_t v43 = a4 + 2LL * v42;
      if (sub_1807C3C7C((uint64_t)&v44, &v43, a5 - v42))
      {
        uint64_t Equivalents2 = 0LL;
      }

      else
      {
        if ((BYTE8(v54) & 0x11) != 0)
        {
          unint64_t v38 = 0LL;
        }

        else if ((BYTE8(v54) & 2) != 0)
        {
          unint64_t v38 = (unint64_t)&v54 | 0xA;
        }

        else
        {
          unint64_t v38 = *((void *)&v55 + 1);
        }

        int v39 = WORD4(v54) >> 5;
        if (SWORD4(v54) < 0) {
          int v39 = HIDWORD(v54);
        }
        uint64_t Equivalents2 = icu::CanonicalIterator::getEquivalents2(a1, v40, v38 + 2LL * v41, (v39 - v41), a7);
      }
    }
  }

  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v44);
LABEL_56:
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v49);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v54);
  return Equivalents2;
}

uint64_t sub_1807C3C7C(uint64_t a1, uint64_t *a2, int32_t a3)
{
  else {
    int32_t v4 = *(unsigned __int16 *)(a1 + 8) >> 5;
  }
  return icu::UnicodeString::doCompare(a1, 0, v4, *a2, 0, a3);
}

uint64_t sub_1807C3CA8(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 0LL;
  }
  if ((a1 - 4096) > 0x18)
  {
    uint64_t v5 = sub_18086C48C(a1);
    return sub_1807C3F3C(v5, a2);
  }

  else
  {
    int32_t v4 = (unsigned int *)&qword_18C448438[2 * (a1 - 4078)];
    sub_1807C3D28(v4 + 2, (void (*)(uint64_t, int *))sub_1807C3DB4, a1, a2);
    return *(void *)v4;
  }

void sub_1807C3D28(unsigned int *a1, void (*a2)(uint64_t, int *), uint64_t a3, int *a4)
{
  if (*a4 <= 0)
  {
    unsigned int v6 = atomic_load(a1);
    if (v6 == 2 || !icu::umtx_initImplPreInit(a1))
    {
      int v9 = a1[1];
      if (v9 >= 1) {
        *a4 = v9;
      }
    }

    else
    {
      a2(a3, a4);
      a1[1] = *a4;
      icu::umtx_initImplPostInit(a1);
    }
  }

void sub_1807C3DB4(UProperty a1, int *a2)
{
  uint64_t v4 = sub_18086C48C(a1);
  uint64_t v5 = sub_1807C3F3C(v4, a2);
  if (*a2 <= 0)
  {
    int v7 = (icu::UnicodeSet *)v5;
    unsigned int v8 = (icu::UnicodeSet *)icu::UMemory::operator new((icu::UMemory *)0xC8, v6);
    if (v8)
    {
      int v9 = v8;
      icu::UnicodeSet::UnicodeSet(v8, 0, 0);
      int RangeCount = icu::UnicodeSet::getRangeCount(v7);
      if (RangeCount >= 1)
      {
        int v11 = RangeCount;
        int v12 = 0;
        int32_t v13 = 0;
        do
        {
          signed int RangeEnd = icu::UnicodeSet::getRangeEnd(v7, v12);
          signed int RangeStart = icu::UnicodeSet::getRangeStart(v7, v12);
          if (RangeStart <= RangeEnd)
          {
            unsigned int v16 = RangeStart;
            int v17 = RangeEnd + 1;
            do
            {
              int32_t IntPropertyValue = u_getIntPropertyValue(v16, a1);
              if (IntPropertyValue != v13)
              {
                int32_t v19 = IntPropertyValue;
                icu::UnicodeSet::add(v9, v16);
                int32_t v13 = v19;
              }

              ++v16;
            }

            while (v17 != v16);
          }

          ++v12;
        }

        while (v12 != v11);
      }

      if ((*((_BYTE *)v9 + 32) & 1) != 0)
      {
        *a2 = 7;
        icu::UnicodeSet::~UnicodeSet(v9);
        icu::UMemory::operator delete(v20);
      }

      else
      {
        icu::UnicodeSet::compact(v9);
        qword_18C448438[2 * a1 - 8156] = (uint64_t)v9;
        sub_180820C94(0x11u, (uint64_t)sub_1807C4448);
      }
    }

    else
    {
      *a2 = 7;
    }
  }

uint64_t sub_1807C3F3C(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 0LL;
  }
  if (a1 < 0x12)
  {
    int v3 = (unsigned int *)&qword_18C448438[2 * a1];
    sub_1807C3D28(v3 + 2, sub_1807C44E8, a1, a2);
    return *(void *)v3;
  }

  else
  {
    uint64_t result = 0LL;
    *a2 = 1;
  }

  return result;
}

icu::UnicodeSet *sub_1807C3FA8(uint64_t a1, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    if (a1 >= 0x4B)
    {
      uint64_t v2 = 0LL;
      *a2 = U_ILLEGAL_ARGUMENT_ERROR;
      return v2;
    }

    umtx_lock((icu::UMutex *)&unk_18C448940);
    uint64_t v2 = (icu::UnicodeSet *)qword_18C4486E8[a1];
    if (v2)
    {
LABEL_16:
      umtx_unlock((std::mutex **)&unk_18C448940);
      return v2;
    }

    uint64_t v6 = a1;
    int v7 = (icu::UnicodeSet *)icu::UMemory::operator new((icu::UMemory *)0xC8, v5);
    uint64_t v2 = v7;
    if (!v7)
    {
      *a2 = U_MEMORY_ALLOCATION_ERROR;
      goto LABEL_15;
    }

    icu::UnicodeSet::UnicodeSet(v7);
    uint64_t v8 = sub_1807CB318(a2);
    if (*(int *)a2 > 0)
    {
LABEL_13:
      icu::UnicodeSet::~UnicodeSet(v2);
      icu::UMemory::operator delete(v10);
LABEL_14:
      uint64_t v2 = 0LL;
LABEL_15:
      qword_18C4486E8[v6] = (uint64_t)v2;
      goto LABEL_16;
    }

    v20[0] = v2;
    v20[1] = icu::UnicodeSet::add;
    v20[2] = icu::UnicodeSet::add;
    v20[3] = sub_1807C4714;
    v20[4] = 0LL;
    v20[5] = 0LL;
    sub_1807CB890(v8, (uint64_t)v20, a1, a2);
    if ((_DWORD)a1 == 71 || (_DWORD)a1 == 65)
    {
LABEL_12:
      int v9 = (icu::UnicodeSet *)sub_1807C3CA8(a1, (int *)a2);
      int v12 = v9;
      int RangeCount = icu::UnicodeSet::getRangeCount(v9);
      if (RangeCount >= 1)
      {
        int v14 = RangeCount;
        int v15 = 0;
        signed int v16 = -1;
        do
        {
          int RangeEnd = icu::UnicodeSet::getRangeEnd(v12, v15);
          int RangeStart = icu::UnicodeSet::getRangeStart(v12, v15);
          if (RangeStart <= RangeEnd)
          {
            unsigned int v19 = RangeStart - 1;
            do
            {
              if (u_hasBinaryProperty(v19 + 1, (UProperty)a1))
              {
                if (v16 < 0) {
                  signed int v16 = v19 + 1;
                }
              }

              else if ((v16 & 0x80000000) == 0)
              {
                icu::UnicodeSet::add(v2, v16, v19);
                signed int v16 = -1;
              }

              ++v19;
            }

            while (RangeEnd != v19);
          }

          ++v15;
        }

        while (v15 != v14);
        uint64_t v6 = a1;
        if ((v16 & 0x80000000) == 0) {
          icu::UnicodeSet::add(v2, v16, 0x10FFFFu);
        }
      }
    }

    icu::UnicodeSet::freeze(v2);
    goto LABEL_15;
  }

  return 0LL;
}

const USet *__cdecl u_getBinaryPropertySet(UProperty property, UErrorCode *pErrorCode)
{
  uint64_t result = sub_1807C3FA8(*(uint64_t *)&property, pErrorCode);
  return result;
}

const UCPMap *__cdecl u_getIntPropertyMap(UProperty property, UErrorCode *pErrorCode)
{
  uint64_t v4 = *(void *)&property;
  if ((property - 4121) > 0xFFFFFFE6)
  {
    umtx_lock((icu::UMutex *)&unk_18C448940);
    uint64_t v5 = (v4 - 4096);
    uint64_t v2 = (char *)qword_18C534C18[v5];
    if (!v2)
    {
      if (*(int *)pErrorCode <= 0)
      {
        if ((_DWORD)v4 == 4106) {
          unint64_t v6 = 103LL;
        }
        else {
          unint64_t v6 = 0LL;
        }
        int v7 = umutablecptrie_open(v6, v6, (int *)pErrorCode);
        uint64_t v8 = (icu::UnicodeSet *)sub_1807C3CA8(v4, (int *)pErrorCode);
        if (*(int *)pErrorCode <= 0)
        {
          int v9 = v8;
          int RangeCount = icu::UnicodeSet::getRangeCount(v8);
          if (RangeCount < 1)
          {
            unsigned int v11 = 0;
            LODWORD(v15) = v6;
          }

          else
          {
            int v10 = 0;
            unsigned int v11 = 0;
            unint64_t v12 = v6;
            BOOL v20 = v9;
            do
            {
              UChar32 RangeEnd = icu::UnicodeSet::getRangeEnd(v9, v10);
              UChar32 RangeStart = icu::UnicodeSet::getRangeStart(v9, v10);
              if (RangeStart <= RangeEnd)
              {
                UChar32 v16 = RangeStart;
                int v17 = RangeEnd + 1;
                do
                {
                  unint64_t IntPropertyValue = u_getIntPropertyValue(v16, (UProperty)v4);
                  if ((_DWORD)v12 == (_DWORD)IntPropertyValue)
                  {
                    unint64_t v15 = v12;
                  }

                  else
                  {
                    unint64_t v15 = IntPropertyValue;
                    if ((_DWORD)v12 != (_DWORD)v6) {
                      umutablecptrie_setRange((uint64_t)v7, v11, v16 - 1, v12, (int *)pErrorCode);
                    }
                    unsigned int v11 = v16;
                  }

                  ++v16;
                  unint64_t v12 = v15;
                }

                while (v17 != v16);
              }

              else
              {
                unint64_t v15 = v12;
              }

              ++v10;
              unint64_t v12 = v15;
              int v9 = v20;
            }

            while (v10 != RangeCount);
          }

          if ((_DWORD)v15) {
            umutablecptrie_setRange((uint64_t)v7, v11, 1114111, v15, (int *)pErrorCode);
          }
          u_getIntPropertyMaxValue((UProperty)v4);
          uint64_t v2 = umutablecptrie_buildImmutable();
          uint64_t v5 = (v4 - 4096);
        }

        else
        {
          uint64_t v2 = 0LL;
        }

        if (v7) {
          umutablecptrie_close(v7);
        }
      }

      else
      {
        uint64_t v2 = 0LL;
      }

      qword_18C534C18[v5] = (uint64_t)v2;
    }

    umtx_unlock((std::mutex **)&unk_18C448940);
  }

  else
  {
    uint64_t v2 = 0LL;
    *UErrorCode pErrorCode = U_ILLEGAL_ARGUMENT_ERROR;
  }

  return (const UCPMap *)v2;
}

uint64_t sub_1807C4448()
{
  v0 = (icu::UnicodeSet **)&qword_18C448438;
  do
  {
    if (*v0)
    {
      icu::UnicodeSet::~UnicodeSet(*v0);
      icu::UMemory::operator delete(v1);
    }

    uint64_t v2 = (unsigned int *)(v0 + 1);
    *v0 = 0LL;
    v0 += 2;
    atomic_store(0, v2);
  }

  while (v0 != (icu::UnicodeSet **)qword_18C4486E8);
  for (uint64_t i = 0LL; i != 75; ++i)
  {
    uint64_t v4 = (icu::UnicodeSet *)qword_18C4486E8[i];
    if (v4)
    {
      icu::UnicodeSet::~UnicodeSet(v4);
      icu::UMemory::operator delete(v5);
    }

    qword_18C4486E8[i] = 0LL;
  }

  for (uint64_t j = 0LL; j != 25; ++j)
  {
    ucptrie_close(qword_18C534C18[j]);
    qword_18C534C18[j] = 0LL;
  }

  return 1LL;
}

void sub_1807C44E8(uint64_t a1, int *a2)
{
  if (!(_DWORD)a1)
  {
    int v10 = 5;
LABEL_7:
    *a2 = v10;
    return;
  }

  uint64_t v4 = (icu::UnicodeSet *)icu::UMemory::operator new((icu::UMemory *)0xC8, (unint64_t)a2);
  if (!v4)
  {
    int v10 = 7;
    goto LABEL_7;
  }

  uint64_t v5 = v4;
  icu::UnicodeSet::UnicodeSet(v4);
  v16[0] = v7;
  v16[1] = icu::UnicodeSet::add;
  v16[2] = icu::UnicodeSet::add;
  v16[3] = sub_1807C4714;
  v16[4] = 0LL;
  v16[5] = 0LL;
  int v8 = 5;
  switch((int)a1)
  {
    case 1:
      sub_18081D7EC((uint64_t)v16, a2);
      goto LABEL_27;
    case 2:
      goto LABEL_11;
    case 4:
      goto LABEL_14;
    case 5:
      sub_180813F24((uint64_t)v16, a2);
      goto LABEL_27;
    case 6:
      sub_18081D7EC((uint64_t)v16, a2);
LABEL_11:
      sub_18081DA2C((uint64_t)v16, a2);
      goto LABEL_27;
    case 7:
      uint64_t NFCImpl = icu::Normalizer2Factory::getNFCImpl((icu::Normalizer2Factory *)a2, v6);
      if (*a2 <= 0) {
        icu::Normalizer2Impl::addPropertyStarts(NFCImpl, v16);
      }
LABEL_14:
      sub_180817C98((uint64_t)v16, a2);
      goto LABEL_27;
    case 8:
      uint64_t NFKCImpl = icu::Normalizer2Factory::getNFCImpl((icu::Normalizer2Factory *)a2, v6);
      goto LABEL_18;
    case 9:
      uint64_t NFKCImpl = icu::Normalizer2Factory::getNFKCImpl((icu::Normalizer2Factory *)a2, v6);
      goto LABEL_18;
    case 10:
      uint64_t NFKCImpl = icu::Normalizer2Factory::getNFKC_CFImpl((icu::Normalizer2Factory *)a2, v6);
LABEL_18:
      if (*a2 > 0) {
        goto LABEL_32;
      }
      icu::Normalizer2Impl::addPropertyStarts(NFKCImpl, v16);
      goto LABEL_27;
    case 11:
      int32_t v13 = (icu::Normalizer2Impl *)icu::Normalizer2Factory::getNFCImpl((icu::Normalizer2Factory *)a2, v6);
      if (*a2 > 0) {
        goto LABEL_32;
      }
      icu::Normalizer2Impl::addCanonIterPropertyStarts(v13, (uint64_t)v16, (UErrorCode *)a2);
      goto LABEL_27;
    case 12:
    case 13:
    case 14:
      uint64_t v9 = a1;
      goto LABEL_26;
    case 15:
      uint64_t v14 = sub_1807CB318((UErrorCode *)a2);
      if (*a2 > 0) {
        goto LABEL_32;
      }
      sub_1807CB554(v14, (uint64_t)v16);
      goto LABEL_27;
    case 16:
      icu::UnicodeSet::add(v5, 0x2FFEu);
      icu::UnicodeSet::add(v5, 0x3000u);
      goto LABEL_27;
    case 17:
      uint64_t v9 = 17LL;
LABEL_26:
      sub_18086C554(v9, v16, (UErrorCode *)a2);
LABEL_27:
      if (*a2 > 0) {
        goto LABEL_32;
      }
      if ((*((_BYTE *)v5 + 32) & 1) != 0)
      {
        int v8 = 7;
LABEL_31:
        *a2 = v8;
LABEL_32:
        icu::UnicodeSet::~UnicodeSet(v5);
        icu::UMemory::operator delete(v15);
      }

      else
      {
        icu::UnicodeSet::compact(v5);
        qword_18C448438[2 * a1] = (uint64_t)v5;
        sub_180820C94(0x11u, (uint64_t)sub_1807C4448);
      }

      break;
    default:
      goto LABEL_31;
  }

void sub_1807C4714(icu::UnicodeSet *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  uint64_t v4 = a2;
  icu::UnicodeString::UnicodeString(v5, a3 >> 31, &v4);
  icu::UnicodeSet::add(a1, (const icu::UnicodeString *)v5);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v5);
}

void *icu::ForwardCharacterIterator::ForwardCharacterIterator(void *this)
{
  *this = off_18970B310;
  return this;
}

void *icu::ForwardCharacterIterator::ForwardCharacterIterator( void *this, const icu::ForwardCharacterIterator *a2)
{
  *this = off_18970B310;
  return this;
}

void *icu::CharacterIterator::CharacterIterator(void *this)
{
  this[1] = 0LL;
  this[2] = 0LL;
  *this = off_18970B360;
  return this;
}

uint64_t icu::CharacterIterator::CharacterIterator(uint64_t this, int a2)
{
  *(void *)this = off_18970B360;
  *(_DWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 12) = 0;
  *(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 20) = a2;
  if (a2 < 0)
  {
    *(_DWORD *)(this + 20) = 0;
    *(_DWORD *)(this + 8) = 0;
  }

  return this;
}

uint64_t icu::CharacterIterator::CharacterIterator(uint64_t this, unsigned int a2, unsigned int a3)
{
  *(void *)this = off_18970B360;
  *(_DWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 12) = a3;
  *(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 20) = a2;
  if ((a2 & 0x80000000) == 0)
  {
    if ((a3 & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    a2 = 0;
    goto LABEL_7;
  }

  a2 = 0;
  *(_DWORD *)(this + 20) = 0;
  *(_DWORD *)(this + 8) = 0;
  if ((a3 & 0x80000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (a2 < a3) {
LABEL_7:
  }
    *(_DWORD *)(this + 12) = a2;
  return this;
}

uint64_t icu::CharacterIterator::CharacterIterator( uint64_t this, unsigned int a2, unsigned int a3, signed int a4, int a5)
{
  *(_DWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 12) = a5;
  *(void *)this = off_18970B360;
  *(_DWORD *)(this + 16) = a3;
  *(_DWORD *)(this + 20) = a4;
  if ((a2 & 0x80000000) != 0)
  {
    a2 = 0;
    *(_DWORD *)(this + 8) = 0;
    if ((a3 & 0x80000000) == 0)
    {
LABEL_3:
      unsigned int v5 = a2;
      if (a2 >= a3) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }

  else if ((a3 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }

  unsigned int v5 = 0;
LABEL_7:
  *(_DWORD *)(this + 16) = v5;
  a3 = v5;
LABEL_8:
  unsigned int v6 = a3;
  if ((int)a3 > a4 || (unsigned int v6 = a2, (int)a2 < a4))
  {
    *(_DWORD *)(this + 20) = v6;
    a4 = v6;
  }

  return this;
}

__n128 icu::CharacterIterator::CharacterIterator( icu::CharacterIterator *this, const icu::CharacterIterator *a2)
{
  *(void *)this = off_18970B360;
  __n128 result = *(__n128 *)((char *)a2 + 8);
  *(__n128 *)((char *)this + 8) = result;
  return result;
}

__n128 icu::CharacterIterator::operator=(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a1 + 8) = result;
  return result;
}

uint64_t icu::CharacterIterator::firstPostInc(icu::CharacterIterator *this)
{
  return (*(uint64_t (**)(icu::CharacterIterator *))(*(void *)this + 40LL))(this);
}

uint64_t icu::CharacterIterator::first32PostInc(icu::CharacterIterator *this)
{
  return (*(uint64_t (**)(icu::CharacterIterator *))(*(void *)this + 48LL))(this);
}

uint64_t icu::CharString::CharString(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  uint64_t v4 = *(const void **)a2;
  if (v4 == (const void *)(a2 + 13))
  {
    *(void *)a1 = a1 + 13;
    memcpy((void *)(a1 + 13), v4, *(int *)(a2 + 8));
  }

  else
  {
    *(void *)a2 = a2 + 13;
    *(_DWORD *)(a2 + 8) = 40;
    *(_BYTE *)(a2 + 12) = 0;
  }

  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  return a1;
}

uint64_t icu::CharString::operator=(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 12)) {
    uprv_free(*(void **)a1);
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  uint64_t v4 = *(const void **)a2;
  if (*(void *)a2 == a2 + 13)
  {
    *(void *)a1 = a1 + 13;
    memcpy((void *)(a1 + 13), v4, *(int *)(a2 + 8));
  }

  else
  {
    *(void *)a1 = v4;
    *(void *)a2 = a2 + 13;
    *(_DWORD *)(a2 + 8) = 40;
    *(_BYTE *)(a2 + 12) = 0;
  }

  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  return a1;
}

void *icu::CharString::cloneData(const void **this, UErrorCode *a2)
{
  unsigned int v5 = uprv_malloc(*((int *)this + 14) + 1LL);
  uint64_t v2 = v5;
  if (v5) {
    memcpy(v5, *this, *((int *)this + 14) + 1LL);
  }
  else {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
  }
  return v2;
}

uint64_t icu::CharString::extract(char **this, char *__dst, int a3, UErrorCode *a4)
{
  if (a3 < 0 || !__dst && a3)
  {
    *a4 = U_ILLEGAL_ARGUMENT_ERROR;
    return *((unsigned int *)this + 14);
  }

  uint64_t v9 = *this;
  size_t v10 = *((unsigned int *)this + 14);
  if ((int)v10 >= 1 && (int)v10 <= a3 && v9 != __dst)
  {
    memcpy(__dst, v9, v10);
    size_t v10 = *((unsigned int *)this + 14);
  }

  return u_terminateChars((uint64_t)__dst, a3, v10, (int *)a4);
}

icu::CharString *icu::CharString::copyFrom(const void **this, const void **a2, UErrorCode *a3)
{
  if (this != a2
    && *(int *)a3 <= 0
    && icu::CharString::ensureCapacity((icu::CharString *)this, *((_DWORD *)a2 + 14) + 1, 0, a3))
  {
    uint64_t v5 = *((int *)a2 + 14);
    *((_DWORD *)this + 14) = v5;
    memcpy((void *)*this, *a2, v5 + 1);
  }

  return (icu::CharString *)this;
}

uint64_t icu::CharString::ensureCapacity(icu::CharString *this, int a2, unsigned int a3, UErrorCode *a4)
{
  int v7 = *((_DWORD *)this + 2);
  if (v7 >= a2) {
    return 1LL;
  }
  unsigned int v9 = v7 + a2;
  if (a3) {
    size_t v10 = a3;
  }
  else {
    size_t v10 = v9;
  }
  if ((int)v10 > a2 && (int)v10 >= 1)
  {
    int v11 = *((_DWORD *)this + 14);
    unint64_t v12 = uprv_malloc(v10);
    if (v12)
    {
      int32_t v13 = v12;
      if ((v11 & 0x80000000) == 0)
      {
        int v14 = v11 + 1;
        if (*((_DWORD *)this + 2) < v11 + 1) {
          int v14 = *((_DWORD *)this + 2);
        }
        memcpy(v12, *(const void **)this, v14);
      }

      if (*((_BYTE *)this + 12)) {
        uprv_free(*(void **)this);
      }
      *(void *)this = v13;
      *((_DWORD *)this + 2) = v10;
LABEL_31:
      uint64_t result = 1LL;
      *((_BYTE *)this + 12) = 1;
      return result;
    }
  }

  if (a2 >= 1)
  {
    int v15 = *((_DWORD *)this + 14);
    UChar32 v16 = uprv_malloc(a2);
    if (v16)
    {
      int v17 = v16;
      if ((v15 & 0x80000000) == 0)
      {
        int v18 = v15 + 1;
        if (*((_DWORD *)this + 2) < v15 + 1) {
          int v18 = *((_DWORD *)this + 2);
        }
        if (v18 >= a2) {
          int v18 = a2;
        }
        memcpy(v16, *(const void **)this, v18);
      }

      if (*((_BYTE *)this + 12)) {
        uprv_free(*(void **)this);
      }
      *(void *)this = v17;
      *((_DWORD *)this + 2) = a2;
      goto LABEL_31;
    }
  }

  uint64_t result = 0LL;
  *a4 = U_MEMORY_ALLOCATION_ERROR;
  return result;
}

uint64_t icu::CharString::lastIndexOf(icu::CharString *this, unsigned __int8 a2)
{
  uint64_t result = *((unsigned int *)this + 14);
  uint64_t v4 = result - 1;
  while (1)
  {
    BOOL v5 = __OFSUB__((_DWORD)result, 1);
    uint64_t result = (result - 1);
    int v6 = *(unsigned __int8 *)(*(void *)this + v4--);
    if (v6 == a2) {
      return result;
    }
  }

  return 0xFFFFFFFFLL;
}

BOOL icu::CharString::contains(char **a1, void *__s2, int a3)
{
  if (!a3) {
    return 0LL;
  }
  int v3 = *((_DWORD *)a1 + 14);
  BOOL v4 = __OFSUB__(v3, a3);
  int v5 = v3 - a3;
  if (v5 < 0 != v4) {
    return 0LL;
  }
  int v8 = *a1;
  size_t v9 = a3;
  uint64_t v10 = (v5 + 1) - 1LL;
  do
  {
    uint64_t v11 = v10;
    int v12 = memcmp(v8, __s2, v9);
    BOOL result = v12 == 0;
    if (!v12) {
      break;
    }
    uint64_t v10 = v11 - 1;
    ++v8;
  }

  while (v11);
  return result;
}

uint64_t icu::CharString::truncate(uint64_t this, int a2)
{
  int v2 = a2 & ~(a2 >> 31);
  if (v2 < *(_DWORD *)(this + 56))
  {
    *(_DWORD *)(this + 56) = v2;
    *(_BYTE *)(*(void *)this + v2) = 0;
  }

  return this;
}

icu::CharString *icu::CharString::append(icu::CharString *this, char a2, UErrorCode *a3)
{
  if (icu::CharString::ensureCapacity(this, *((_DWORD *)this + 14) + 2, 0, a3))
  {
    uint64_t v5 = *((int *)this + 14);
    *((_DWORD *)this + 14) = v5 + 1;
    *(_BYTE *)(*(void *)this + v5) = a2;
    *(_BYTE *)(*(void *)this + *((int *)this + 1(*(void (**)(void))(**((void **)this + 4) + 40LL))(*((void *)this + 4)) = 0;
  }

  return this;
}

icu::CharString *icu::CharString::append(icu::CharString *this, const char *a2, int a3, UErrorCode *a4)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (*(int *)a4 <= 0)
  {
    int v6 = a3;
    if (a3 < -1 || !a2 && a3)
    {
      UErrorCode v8 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_6:
      *a4 = v8;
      return this;
    }

    if (a3 < 0) {
      int v6 = strlen(a2);
    }
    if (v6 >= 1)
    {
      unint64_t v10 = *(void *)this;
      uint64_t v11 = *((int *)this + 14);
      int v12 = (const char *)(*(void *)this + v11);
      if (v12 == a2)
      {
        if (v6 < *((_DWORD *)this + 2) - (int)v11)
        {
          int v14 = v11 + v6;
          *((_DWORD *)this + 14) = v14;
          *(_BYTE *)(v10 + v14) = 0;
          return this;
        }

        UErrorCode v8 = U_INTERNAL_PROGRAM_ERROR;
        goto LABEL_6;
      }

      if (v10 <= (unint64_t)a2 && v12 > a2 && v6 >= *((_DWORD *)this + 2) - (int)v11)
      {
        int v15 = (char *)&v17 + 1;
        int v16 = 40;
        __int16 v17 = 0;
        int v18 = 0;
        icu::CharString::append((icu::CharString *)&v15, a2, v6, a4);
        this = (icu::CharString *)icu::CharString::append(this, v15, v18, a4);
        if ((_BYTE)v17) {
          uprv_free(v15);
        }
      }

      else if (icu::CharString::ensureCapacity(this, v6 + (int)v11 + 1, 0, a4))
      {
        memcpy((void *)(*(void *)this + *((int *)this + 14)), a2, v6);
        uint64_t v13 = *((int *)this + 14) + (uint64_t)v6;
        *((_DWORD *)this + 14) = v13;
        *(_BYTE *)(*(void *)this + v13) = 0;
      }
    }
  }

  return this;
}

icu::CharString *icu::CharString::appendNumber(icu::CharString *this, int a2, UErrorCode *a3)
{
  int v4 = a2;
  if (a2 < 0)
  {
    this = icu::CharString::append(this, 45, a3);
  }

  else if (!a2)
  {
    return icu::CharString::append(this, 48, a3);
  }

  uint64_t v5 = 0LL;
  while (v4)
  {
    int v6 = v4 % 10;
    if (v4 % 10 < 0) {
      int v6 = -v6;
    }
    this = icu::CharString::append(this, v6 + 48, a3);
    --v5;
    v4 /= 10;
  }

  uint64_t v7 = *((int *)this + 14);
  if ((int)v7 + (int)v5 < (int)v7 - 1)
  {
    uint64_t v8 = v7 - 1;
    uint64_t v9 = v7 + v5;
    do
    {
      uint64_t v10 = *(void *)this;
      char v11 = *(_BYTE *)(*(void *)this + v9);
      *(_BYTE *)(v10 + v9) = *(_BYTE *)(*(void *)this + v8);
      *(_BYTE *)(v10 + v8--) = v11;
      ++v9;
    }

    while (v9 < v8);
  }

  return this;
}

uint64_t icu::CharString::getAppendBuffer(icu::CharString *this, int a2, int a3, int *a4, UErrorCode *a5)
{
  int v8 = *((_DWORD *)this + 14);
  int v9 = *((_DWORD *)this + 2) + ~v8;
  if (v9 >= a2)
  {
    *a4 = v9;
  }

  else
  {
    if (!icu::CharString::ensureCapacity(this, a2 + v8 + 1, a3 + v8 + 1, a5))
    {
LABEL_2:
      uint64_t result = 0LL;
      *a4 = 0;
      return result;
    }

    *a4 = *((_DWORD *)this + 2) + ~*((_DWORD *)this + 14);
  }

  return *(void *)this + *((int *)this + 14);
}

int *icu::CharString::appendInvariantChars( icu::CharString *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  unsigned int v4 = *((unsigned __int16 *)a2 + 4);
  if ((v4 & 0x11) != 0)
  {
    uint64_t v5 = 0LL;
  }

  else if ((v4 & 2) != 0)
  {
    uint64_t v5 = (UChar *)((char *)a2 + 10);
  }

  else
  {
    uint64_t v5 = (UChar *)*((void *)a2 + 3);
  }

  int v6 = (__int16)v4;
  int32_t v7 = v4 >> 5;
  if (v6 >= 0) {
    int32_t v8 = v7;
  }
  else {
    int32_t v8 = *((_DWORD *)a2 + 3);
  }
  return icu::CharString::appendInvariantChars((int *)this, v5, v8, a3);
}

int *icu::CharString::appendInvariantChars(int *a1, UChar *a2, int32_t a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    if (uprv_isInvariantUString(a2, a3))
    {
      if (icu::CharString::ensureCapacity((icu::CharString *)a1, a3 + a1[14] + 1, 0, a4))
      {
        u_UCharsToChars(a2, (char *)(*(void *)a1 + a1[14]), a3);
        uint64_t v9 = a1[14] + (uint64_t)a3;
        a1[14] = v9;
        *(_BYTE *)(*(void *)a1 + v9) = 0;
      }
    }

    else
    {
      *a4 = U_INVARIANT_CONVERSION_ERROR;
    }
  }

  return a1;
}

icu::CharString *icu::CharString::appendPathPart( icu::CharString *a1, const char *a2, int a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0 && a3 != 0LL)
  {
    int v9 = *((_DWORD *)a1 + 14);
    BOOL v10 = __OFSUB__(v9, 1);
    int v11 = v9 - 1;
    icu::CharString::append(a1, a2, a3, a4);
  }

  return a1;
}

uint64_t icu::CharString::getDirSepChar(icu::CharString *this)
{
  return 47LL;
}

icu::CharString *icu::CharString::ensureEndsWithFileSeparator(icu::CharString *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    int v2 = *((_DWORD *)this + 14);
    BOOL v3 = __OFSUB__(v2, 1);
    int v4 = v2 - 1;
  }

  return this;
}

void *uprv_malloc(size_t a1)
{
  if (a1) {
    return malloc(a1);
  }
  else {
    return &unk_1809DDEC8;
  }
}

void *uprv_realloc(void *a1, size_t __size)
{
  if (a1 == &unk_1809DDEC8)
  {
    if (__size) {
      return malloc(__size);
    }
  }

  else
  {
    if (__size) {
      return realloc(a1, __size);
    }
    free(a1);
  }

  return &unk_1809DDEC8;
}

void uprv_free(void *a1)
{
  if (a1 != &unk_1809DDEC8) {
    free(a1);
  }
}

void *uprv_calloc(uint64_t a1, uint64_t a2)
{
  size_t v2 = a2 * a1;
  if (a2 * a1)
  {
    BOOL v3 = malloc(a2 * a1);
    if (!v3) {
      return v3;
    }
  }

  else
  {
    BOOL v3 = &unk_1809DDEC8;
  }

  bzero(v3, v2);
  return v3;
}

void u_setMemoryFunctions()
{
  if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_ERROR)) {
    sub_1809DD77C();
  }
}

uint64_t sub_1807C5460()
{
  return 1LL;
}

icu::CStr *icu::CStr::CStr(icu::CStr *this, const icu::UnicodeString *a2)
{
  *((void *)this + 1) = (char *)this + 21;
  int v4 = (icu::CStr *)((char *)this + 8);
  *((_DWORD *)this + 4) = 40;
  *((_WORD *)this + 10) = 0;
  *((_DWORD *)this + 16) = 0;
  UErrorCode v18 = U_ZERO_ERROR;
  unsigned int v5 = *((unsigned __int16 *)a2 + 4);
  int v6 = (__int16)v5;
  int32_t v7 = v5 >> 5;
  if (v6 >= 0) {
    int32_t v8 = v7;
  }
  else {
    int32_t v8 = *((_DWORD *)a2 + 3);
  }
  int v9 = icu::UnicodeString::extract(a2, 0, v8, 0LL, 0);
  unsigned int v17 = 0;
  uint64_t AppendBuffer = (char *)icu::CharString::getAppendBuffer(v4, v9, v9, (int *)&v17, &v18);
  if (v18 <= U_ZERO_ERROR)
  {
    int v11 = AppendBuffer;
    unsigned int v12 = *((unsigned __int16 *)a2 + 4);
    int v13 = (__int16)v12;
    int32_t v14 = v12 >> 5;
    if (v13 >= 0) {
      int32_t v15 = v14;
    }
    else {
      int32_t v15 = *((_DWORD *)a2 + 3);
    }
    icu::UnicodeString::extract(a2, 0, v15, AppendBuffer, v17);
    icu::CharString::append(v4, v11, v9, &v18);
  }

  return this;
}

void icu::CStr::~CStr(void **this)
{
  if (*((_BYTE *)this + 20)) {
    uprv_free(this[1]);
  }
}

{
  if (*((_BYTE *)this + 20)) {
    uprv_free(this[1]);
  }
}

uint64_t icu::CStr::operator()(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

BOOL uprv_isASCIILetter(char a1)
{
  return (a1 & 0xDFu) - 65 < 0x1A;
}

uint64_t uprv_toupper(int a1)
{
  else {
    return (char)(a1 - 32);
  }
}

uint64_t uprv_asciitolower(int a1)
{
  else {
    return (char)(a1 + 32);
  }
}

uint64_t uprv_ebcdictolower(char a1)
{
  else {
    return (char)(a1 - 64);
  }
}

unsigned __int8 *T_CString_toLowerCase(unsigned __int8 *result)
{
  if (result)
  {
    uint64_t v1 = result;
    do
    {
      int v2 = *v1;
      *v1++ = v2;
    }

    while ((_BYTE)v2);
  }

  return result;
}

unsigned __int8 *T_CString_toUpperCase(unsigned __int8 *result)
{
  if (result)
  {
    uint64_t v1 = result;
    do
    {
      int v2 = *v1;
      *v1++ = v2;
    }

    while ((_BYTE)v2);
  }

  return result;
}

uint64_t T_CString_integerToString(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = 0LL;
  uint64_t v12 = *MEMORY[0x1895F89C0];
  if ((a2 & 0x80000000) != 0 && a3 == 10)
  {
    a2 = -a2;
    *a1 = 45;
    uint64_t v3 = 1LL;
  }

  uint64_t v4 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  memset(v10, 0, sizeof(v10));
  v11[0] = 0;
  do
  {
    if (((a2 % a3) & 0xFE) >= 0xA) {
      char v5 = 55;
    }
    else {
      char v5 = 48;
    }
    v10[v4-- + 12] = v5 + a2 % a3;
    BOOL v6 = a2 >= a3;
    a2 /= a3;
  }

  while (v6);
  strcpy(&a1[v3], &v11[v4]);
  return (v3 - v4);
}

uint64_t T_CString_int64ToString(_BYTE *a1, unint64_t a2, unsigned int a3)
{
  uint64_t v3 = 0LL;
  uint64_t v13 = *MEMORY[0x1895F89C0];
  if ((a2 & 0x8000000000000000LL) != 0 && a3 == 10)
  {
    a2 = -(uint64_t)a2;
    *a1 = 45;
    uint64_t v3 = 1LL;
  }

  uint64_t v4 = 0LL;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  memset(v11, 0, sizeof(v11));
  v12[0] = 0;
  do
  {
    int v5 = a2 % a3;
    if ((v5 & 0xFEu) >= 0xA) {
      char v6 = 55;
    }
    else {
      char v6 = 48;
    }
    v11[v4-- + 12] = v6 + v5;
    BOOL v7 = a2 >= a3;
    a2 /= a3;
  }

  while (v7);
  strcpy(&a1[v3], &v12[v4]);
  return (v3 - v4);
}

unint64_t T_CString_stringToInteger(const char *a1, int __base)
{
  __endptr = 0LL;
  return strtoul(a1, &__endptr, __base);
}

uint64_t uprv_stricmp(_BYTE *a1, unsigned __int8 *a2)
{
  if (a1)
  {
    if (!a2) {
      return 1LL;
    }
    LOBYTE(v2) = *a1;
    int v3 = *a2;
    if (*a1)
    {
      uint64_t v4 = a2 + 1;
      int v5 = a1 + 1;
      while ((_BYTE)v3)
      {
        uint64_t result = v2 - v3;
        int v7 = *v5++;
        int v2 = v7;
        int v8 = *v4++;
        int v3 = v8;
        if (!v2) {
          goto LABEL_12;
        }
      }

      return 1LL;
    }

uint64_t uprv_strnicmp(_BYTE *a1, _BYTE *a2, int a3)
{
  if (a1)
  {
    if (!a2) {
      return 1LL;
    }
    if (!a3) {
      return 0LL;
    }
    while (1)
    {
      int v3 = *a1;
      int v4 = *a2;
      if (!*a1) {
        break;
      }
      if (!*a2) {
        return 1LL;
      }
      uint64_t v5 = v3 - v4;
      if ((_DWORD)v5) {
        return v5;
      }
      ++a1;
      ++a2;
      if (!--a3) {
        return 0LL;
      }
    }

    BOOL v6 = v4 == 0;
  }

  else
  {
    BOOL v6 = a2 == 0LL;
  }

  if (v6) {
    return 0LL;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void *uprv_strdup(const char *a1)
{
  size_t v2 = strlen(a1) + 1;
  int v3 = uprv_malloc(v2);
  int v4 = v3;
  if (v3) {
    memcpy(v3, a1, v2);
  }
  return v4;
}

_BYTE *uprv_strndup(const char *a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    return uprv_strdup(a1);
  }
  int v4 = uprv_malloc(a2 + 1);
  uint64_t v5 = v4;
  if (v4)
  {
    memcpy(v4, a1, a2);
    v5[a2] = 0;
  }

  return v5;
}

void *sub_1807C5A24(void *a1)
{
  size_t v2 = sub_1807BE4E4(a1);
  *size_t v2 = off_18970B478;
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(v2 + 1));
  return a1;
}

void sub_1807C5A58(uint64_t a1)
{
  *(void *)a1 = off_18970B478;
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 8));
  icu::UObject::~UObject((icu::UObject *)a1);
}

uint64_t sub_1807C5A90(uint64_t a1, int a2)
{
  return icu::UnicodeSet::contains((icu::UnicodeSet *)(a1 + 8), a2);
}

uint64_t sub_1807C5A98(uint64_t a1, UText *ut, int a3, int a4, uint64_t a5, uint64_t a6, int *a7)
{
  if (*a7 > 0) {
    return 0LL;
  }
  utext_setNativeIndex(ut, a3);
  int64_t NativeIndex = utext_getNativeIndex(ut);
  UChar32 v15 = utext_current32(ut);
  for (int64_t i = utext_getNativeIndex(ut); (int)i < a4; int64_t i = utext_getNativeIndex(ut))
  {
    utext_next32(ut);
    UChar32 v15 = utext_current32(ut);
  }

  uint64_t v17 = (*(uint64_t (**)(uint64_t, UText *, int64_t, int64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 48LL))( a1,  ut,  NativeIndex,  i,  a5,  a6,  a7);
  utext_setNativeIndex(ut, (int)i);
  return v17;
}

icu::UnicodeSet *sub_1807C5BAC(uint64_t a1, const icu::UnicodeSet *a2)
{
  size_t v2 = (icu::UnicodeSet *)(a1 + 8);
  icu::UnicodeSet::operator=((icu::UnicodeSet *)(a1 + 8), a2);
  return icu::UnicodeSet::compact(v2);
}

uint64_t sub_1807C5BD4(unsigned int *a1, UText *ut, uint64_t a3, int a4)
{
  unsigned int NativeIndex = utext_getNativeIndex(ut);
  signed int v9 = NativeIndex;
  if (a1[2] != NativeIndex)
  {
    a1[2] = NativeIndex;
    LODWORD(result) = (*(uint64_t (**)(uint64_t, UText *, void, uint64_t, unsigned int *, unsigned int *, void, unsigned int *))(*(void *)a3 + 16LL))( a3,  ut,  a4 - NativeIndex,  20LL,  a1 + 5,  a1 + 25,  0LL,  a1 + 1);
    *a1 = result;
    if ((int)result > 0)
    {
LABEL_5:
      utext_setNativeIndex(ut, (int)a1[(result - 1) + 5] + (uint64_t)v9);
      uint64_t result = *a1;
      goto LABEL_6;
    }

    utext_setNativeIndex(ut, v9);
  }

  uint64_t result = *a1;
LABEL_6:
  a1[3] = result - 1;
  a1[4] = result - 1;
  return result;
}

uint64_t sub_1807C5C9C(uint64_t a1, UText *ut)
{
  int v2 = *(_DWORD *)(a1 + 16);
  BOOL v3 = __OFSUB__(v2, 1);
  int v4 = v2 - 1;
  if (v4 < 0 != v3) {
    return 0LL;
  }
  uint64_t v5 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 16) = v4;
  utext_setNativeIndex(ut, *(int *)(a1 + 4LL * v4 + 20) + v5);
  return 1LL;
}

void *sub_1807C5CE4(void *a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  BOOL v6 = sub_1807BE4E4(a1);
  void *v6 = off_18970B478;
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(v6 + 1));
  *a1 = off_18970B4C0;
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 26));
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 51));
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 76));
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 101));
  a1[126] = a2;
  uint64_t v9 = 0LL;
  memset(v8, 0, sizeof(v8));
  icu::UnicodeString::UnicodeString((uint64_t)v10, (uint64_t)L"[[:Thai:]&[:LineBreak=SA:]]");
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v8, (const icu::UnicodeString *)v10, a3);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v10);
  icu::UnicodeString::UnicodeString((uint64_t)v10, (uint64_t)L"[[:Thai:]&[:LineBreak=SA:]&[:M:]]");
  icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 101), (const icu::UnicodeString *)v10, a3);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v10);
  icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 101), 0x20u);
  icu::UnicodeSet::operator=((icu::UnicodeSet *)(a1 + 26), (const icu::UnicodeSet *)v8);
  icu::UnicodeSet::remove((icu::UnicodeSet *)(a1 + 26), 0xE31u);
  icu::UnicodeSet::remove((icu::UnicodeSet *)(a1 + 26), 0xE40u, 0xE44u);
  icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 51), 0xE01u, 0xE2Eu);
  icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 51), 0xE40u, 0xE44u);
  icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 76), 0xE2Fu);
  icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 76), 0xE46u);
  icu::UnicodeSet::compact((icu::UnicodeSet *)(a1 + 101));
  icu::UnicodeSet::compact((icu::UnicodeSet *)(a1 + 26));
  icu::UnicodeSet::compact((icu::UnicodeSet *)(a1 + 51));
  icu::UnicodeSet::compact((icu::UnicodeSet *)(a1 + 76));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v8);
  return a1;
}

void sub_1807C5ED4(void *a1)
{
  *a1 = off_18970B4C0;
  uint64_t v2 = a1[126];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 101));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 76));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 51));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 26));
  *a1 = off_18970B478;
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 1));
  icu::UObject::~UObject((icu::UObject *)a1);
}

void sub_1807C5F4C(void *a1)
{
}

uint64_t sub_1807C5F60(uint64_t *a1, UText *ut, int a3, int a4, uint64_t a5, uint64_t a6, int *a7)
{
  uint64_t v58 = *MEMORY[0x1895F89C0];
  if (*a7 > 0) {
    return 0LL;
  }
  int64_t v12 = a3;
  utext_setNativeIndex(ut, a3);
  utext_moveIndex32(ut, 4);
  if (utext_getNativeIndex(ut) >= a4) {
    return 0LL;
  }
  utext_setNativeIndex(ut, v12);
  bzero(v57, 0x21CuLL);
  for (uint64_t i = 0LL; i != 135; i += 45LL)
  {
    int32_t v14 = &v57[i];
    *(_OWORD *)int32_t v14 = xmmword_1809DDEE0;
    v14[4] = 0;
  }

  utext_setNativeIndex(ut, v12);
  if (*a7 <= 0)
  {
    uint64_t v15 = 0LL;
    __int128 v51 = (icu::UnicodeSet *)(a1 + 76);
    uint64_t v52 = a5;
    __int128 v55 = a7;
    while (1)
    {
      int NativeIndex = utext_getNativeIndex(ut);
      if (NativeIndex >= a4) {
        goto LABEL_64;
      }
      unsigned int v17 = v15 % 3;
      UErrorCode v18 = &v57[45 * (v15 % 3)];
      int v19 = sub_1807C5BD4(v18, ut, a1[126], a4);
      if (v19 == 1)
      {
        BOOL v20 = &v57[45 * v17];
        utext_setNativeIndex(ut, (int)v20[v20[3] + 5] + (uint64_t)(int)v20[2]);
        uint64_t v21 = (int)v20[3];
        int v22 = v20[v21 + 5];
        int v23 = v20[v21 + 25];
        uint64_t v15 = (v15 + 1);
      }

      else if (v19 < 2)
      {
        int v22 = 0;
        int v23 = 0;
      }

      else
      {
        uint64_t v24 = (v15 + 1);
        if ((int)utext_getNativeIndex(ut) < a4)
        {
          uint64_t v25 = &v57[45 * v17];
          uint64_t v53 = v25 + 3;
          __int128 v54 = v25 + 4;
          int v26 = &v57[45 * (((int)v15 + 2) % 3u)];
          while ((int)sub_1807C5BD4(&v57[45 * (v24 % 3)], ut, a1[126], a4) < 1)
          {
LABEL_20:
          }

          *uint64_t v53 = *v54;
          if ((int)utext_getNativeIndex(ut) < a4)
          {
            while (!sub_1807C5BD4(v26, ut, a1[126], a4))
            {
            }

            *uint64_t v53 = *v54;
          }
        }

LABEL_24:
        BOOL v27 = &v57[45 * v17];
        utext_setNativeIndex(ut, (int)v27[v27[3] + 5] + (uint64_t)(int)v27[2]);
        uint64_t v28 = (int)v27[3];
        int v22 = v27[v28 + 5];
        int v23 = v27[v28 + 25];
        uint64_t v15 = v24;
        a5 = v52;
      }

      uint64_t v29 = (UErrorCode *)v55;
      if ((int)utext_getNativeIndex(ut) < a4 && v23 <= 2)
      {
        if ((int)sub_1807C5BD4(&v57[45 * (v15 % 3)], ut, a1[126], a4) > 0
          || v22 && (int)v57[45 * (v15 % 3) + 1] > 2)
        {
          utext_setNativeIndex(ut, v22 + NativeIndex);
        }

        else
        {
          int v30 = utext_getNativeIndex(ut);
          UChar32 v31 = utext_next32(ut);
          int v32 = utext_getNativeIndex(ut) - v30;
          int v33 = a4 - v32 - (v22 + NativeIndex);
          if (v33 >= 1)
          {
            do
            {
              UChar32 v34 = utext_current32(ut);
              if (icu::UnicodeSet::contains((icu::UnicodeSet *)(a1 + 26), v31))
              {
                if (icu::UnicodeSet::contains((icu::UnicodeSet *)(a1 + 51), v34))
                {
                  int v35 = sub_1807C5BD4(&v57[45 * (((int)v15 + 1) % 3u)], ut, a1[126], a4);
                  utext_setNativeIndex(ut, v32 + v22 + NativeIndex);
                  if (v35 > 0) {
                    break;
                  }
                }
              }

              int v36 = utext_getNativeIndex(ut);
              UChar32 v31 = utext_next32(ut);
              int v37 = utext_getNativeIndex(ut);
              v32 += v37 - v36;
              BOOL v38 = __OFSUB__(v33, v37 - v36);
              v33 -= v37 - v36;
            }

            while (!((v33 < 0) ^ v38 | (v33 == 0)));
          }

          if (v22 >= 1) {
            uint64_t v15 = v15;
          }
          else {
            uint64_t v15 = (v15 + 1);
          }
          v22 += v32;
          a5 = v52;
          uint64_t v29 = (UErrorCode *)v55;
        }
      }

      int v39 = utext_getNativeIndex(ut);
      if (v39 < a4)
      {
        int v40 = v39;
        do
        {
          UChar32 v41 = utext_current32(ut);
          utext_next32(ut);
          int v22 = v22 - v40 + utext_getNativeIndex(ut);
          int v40 = utext_getNativeIndex(ut);
        }

        while (v40 < a4);
      }

      if ((int)sub_1807C5BD4(&v57[45 * (v15 % 3)], ut, a1[126], a4) <= 0
        && (UChar32 v42 = utext_current32(ut), icu::UnicodeSet::contains(v51, v42)))
      {
        if (v42 != 3631) {
          goto LABEL_54;
        }
        UChar32 v43 = utext_previous32(ut);
        int v44 = icu::UnicodeSet::contains(v51, v43);
        utext_next32(ut);
        if (!v44)
        {
          int v45 = utext_getNativeIndex(ut);
          utext_next32(ut);
          int v22 = v22 - v45 + utext_getNativeIndex(ut);
          UChar32 v42 = utext_current32(ut);
LABEL_54:
          if (v42 == 3654)
          {
            UChar32 v46 = utext_previous32(ut);
            utext_next32(ut);
            if (v46 != 3654)
            {
              int v47 = utext_getNativeIndex(ut);
              utext_next32(ut);
              int v22 = v22 - v47 + utext_getNativeIndex(ut);
            }
          }

  if (a5)
  {
    UErrorCode v18 = strlen(a5);
    if (v18 > 0x15555555) {
      goto LABEL_41;
    }
  }

  else
  {
    UErrorCode v18 = 0;
  }

  if (v15 | v11) {
    icu::CharString::append((icu::CharString *)v27, 95, &v26);
  }
  if (v11)
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)&v24, a3);
    icu::CharString::append((icu::CharString *)v27, v24, v25, &v26);
  }

  if (v15)
  {
    int v19 = icu::CharString::append((icu::CharString *)v27, 95, &v26);
    icu::CharString::append(v19, v12, v15, &v26);
  }

  if (v18)
  {
    if (strchr(a5, 61))
    {
      BOOL v20 = 64;
    }

    else
    {
      BOOL v20 = 95;
      icu::CharString::append((icu::CharString *)v27, 95, &v26);
      if (v15) {
        goto LABEL_39;
      }
    }

    icu::CharString::append((icu::CharString *)v27, v20, &v26);
LABEL_39:
    icu::StringPiece::StringPiece((icu::StringPiece *)&v22, a5);
    icu::CharString::append((icu::CharString *)v27, v22, v23, &v26);
  }

  if (v26 >= U_ILLEGAL_ARGUMENT_ERROR) {
    goto LABEL_41;
  }
  icu::Locale::init(this, v27[0], 0);
LABEL_42:
  if (BYTE4(v27[1])) {
    uprv_free(v27[0]);
  }
  return this;
}

  if (BYTE4(__s1[1])) {
    uprv_free(__s1[0]);
  }
  return v6;
}

    uint64_t v1 = 65533LL;
  }

      UErrorCode v18 = ures_getByKey(a1, a2, 0LL, a4);
      String = ures_getString(v18, a3, a4);
      sub_18086E18C(v18, 1);
      return String;
    }

    uint64_t v21 = a2;
    if (!*(_BYTE *)(a1 + 112) || (int v16 = sub_18086FC1C(a1, &v21, &v22, a4), *a4 > 0))
    {
      uint64_t v15 = 2;
LABEL_26:
      String = 0LL;
      goto LABEL_27;
    }

    int64_t v12 = v22;
    unsigned int v17 = v22 >> 28;
    if (v22 >> 28 != 6)
    {
      if (v17 == 3) {
        goto LABEL_24;
      }
      if (v17)
      {
LABEL_25:
        uint64_t v15 = 17;
        goto LABEL_26;
      }
    }

    int32_t v14 = v16 + 40;
    return res_getStringNoTrace(v14, v12, a3);
  }

  return 0LL;
}

    uint64_t v5 = 0LL;
    uint64_t v11 = 3;
    goto LABEL_8;
  }

  int v19 = 3;
LABEL_20:
  uint64_t v5 = 2 * v15 + 16 + (v16 << v19);
  if ((a3 & 0x80000000) != 0) {
    return v5;
  }
  BOOL v20 = 2 * v15;
  (*(void (**)(uint64_t, unsigned __int16 *, uint64_t, uint64_t, int *))(a1 + 56))(a1, a2, 4LL, a4, a5);
  (*(void (**)(uint64_t, unsigned __int16 *, uint64_t, uint64_t, int *))(a1 + 48))(a1, a2 + 2, 12LL, a4 + 4, a5);
  if (v17 == 1)
  {
    uint64_t v21 = a2 + 8;
    int v22 = a4 + 16;
    (*(void (**)(uint64_t, unsigned __int16 *, uint64_t, uint64_t, int *))(a1 + 48))(a1, v21, v20, v22, a5);
    (*(void (**)(uint64_t, unsigned __int16 *, void, uint64_t, int *))(a1 + 56))( a1,  &v21[v15],  16 * v18,  v22 + 2LL * v15,  a5);
  }

  else
  {
    (*(void (**)(uint64_t, unsigned __int16 *, void, uint64_t, int *))(a1 + 48))( a1,  a2 + 8,  v20 + 8 * v18,  a4 + 16,  a5);
  }

  return v5;
}

      icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)&v36);
      BOOL v38 = 0u;
      int v39 = 0u;
      int v36 = 0u;
      int v37 = 0u;
      icu::CanonicalIterator::next((icu::CanonicalIterator *)&v40, (icu::UnicodeString *)&v36);
      int32_t v14 = WORD4(v36);
      if ((BYTE8(v36) & 1) != 0) {
        goto LABEL_25;
      }
    }
  }

  uint64_t v52 = 0LL;
  int v50 = 0u;
  __int128 v51 = 0u;
  int v48 = 0u;
  int v49 = 0u;
  UChar32 v46 = 0u;
  int v47 = 0u;
  int v44 = 0u;
  int v45 = 0u;
  UChar32 v42 = 0u;
  UChar32 v43 = 0u;
  int v40 = 0u;
  UChar32 v41 = 0u;
  icu::CanonicalIterator::CanonicalIterator((icu::CanonicalIterator *)&v40, a2, a7);
  int v35 = 0LL;
  memset(v34, 0, sizeof(v34));
  icu::CanonicalIterator::CanonicalIterator((icu::CanonicalIterator *)v34, a3, a7);
  BOOL v38 = 0u;
  int v39 = 0u;
  int v36 = 0u;
  int v37 = 0u;
  icu::CanonicalIterator::next((icu::CanonicalIterator *)&v40, (icu::UnicodeString *)&v36);
  BOOL v20 = (void *)WORD4(v36);
  if ((BYTE8(v36) & 1) != 0)
  {
LABEL_62:
    icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v36);
    goto LABEL_63;
  }

  uint64_t v21 = 0;
  while (1)
  {
    int v22 = (void *)*(unsigned int *)a7;
    if ((int)v22 <= 0)
    {
      if ((*(unsigned int (**)(icu::CollationDataBuilder *, __int128 *, UErrorCode *))(*(void *)this[2]
                                                                                                 + 88LL))( this[2],  &v36,  a7))
      {
        break;
      }
    }

  if (result) {
    goto LABEL_25;
  }
  return result;
}

  *a2 = 3;
  return result;
}

      *a7 = 0;
      int v23 = v16 == 0;
      goto LABEL_25;
    }

    int v16 = **a1 + 8 * v16 - 48;
    uint64_t v21 = v16 >> v17;
    if (sub_1808D8294(a1, a4, &v39)) {
      goto LABEL_24;
    }
  }

  uint64_t v24 = 1;
  if ((int)v21 >= 2)
  {
    do
    {
      ++v24;
      uint64_t v28 = v21 > 3;
      LODWORD(v21) = v21 >> 1;
    }

    while (v28);
  }

  BOOL v38 = a3;
  uint64_t v25 = 1;
  for (uint64_t i = v24; !sub_1808D8294(a1, a4, &v39); i += 3)
  {
    BOOL v27 = **a1;
    uint64_t v28 = v27 > 55 || (v27 - 48) > 9;
    if (v28) {
      break;
    }
    v25 &= v27 == 48;
  }

  if ((a5 & 1) == 0)
  {
    for (uint64_t j = *a1; j != a2; *a1 = j)
    {
      int v30 = 0LL;
      while (byte_180A378BC[v30] != *j)
      {
        if (++v30 == 6) {
          return a8;
        }
      }

      ++j;
    }
  }

  UChar32 v31 = v16 & ~(-1 << v24);
  int v32 = 1 << (v24 - 1);
  int v33 = (v16 >> v24) + ((v16 >> v24) & 1u | ((v25 & 1) == 0));
  if (v31 != v32) {
    int v33 = v16 >> v24;
  }
  if (v31 > v32) {
    UChar32 v34 = (v16 >> v24) + 1;
  }
  else {
    UChar32 v34 = v33;
  }
  int v35 = ((unint64_t)v34 >> v17) & 1;
  int v16 = v34 >> (((unint64_t)v34 >> v17) & 1);
  *a7 = 0;
  int v23 = v16 == 0;
  a3 = v38;
  if (i + (_DWORD)v35 && v16)
  {
    int v36 = COERCE_DOUBLE(sub_1808D81FC(v16, i + (int)v35));
    if (v38) {
      return -v36;
    }
    else {
      return v36;
    }
  }

          uint64_t v11 = 0;
          int64_t v12 = 30LL;
          while ((int)result < 128)
          {
            if (v11 > 1) {
              goto LABEL_49;
            }
            int64_t v12 = (result - 64);
            uint64_t v11 = 2;
LABEL_32:
            if (*(_DWORD *)v4 >= *(_DWORD *)(v4 + 16)) {
              goto LABEL_49;
            }
            uint64_t result = sub_18090E404((int *)v4, a2);
          }

          if (result <= 0x1FF)
          {
            if (v11) {
              goto LABEL_49;
            }
            v10 *= (char)result;
            uint64_t v11 = 1;
            goto LABEL_32;
          }

          int v16 = (result - 512) | (unint64_t)(v12 << 32);
          unsigned int v17 = v10;
          uint64_t result = icu::MeasureUnitImpl::appendSingleUnit( (icu::MeasureUnitImpl *)a3,  (const icu::SingleUnitImpl *)&v16,  a2);
          if (v9) {
            uint64_t v13 = result;
          }
          else {
            uint64_t v13 = 1;
          }
          if (v13 != 1) {
            goto LABEL_49;
          }
          int32_t v14 = *(_DWORD *)(a3 + 8);
          if (v14 < 2) {
            goto LABEL_47;
          }
          if (v9) {
            uint64_t v15 = 2;
          }
          else {
            uint64_t v15 = 1;
          }
          if (v14 == 2)
          {
            *(_DWORD *)a3 = v15;
            goto LABEL_47;
          }

          if (*(_DWORD *)a3 != v15)
          {
LABEL_49:
            *a2 = U_ILLEGAL_ARGUMENT_ERROR;
            return result;
          }

    if (!*(_BYTE *)(a1 + 21) && (!a4 || !(_DWORD)v13 || (_DWORD)v13 == 5)) {
      return;
    }
    int32_t v14 = 1;
LABEL_29:
    uint64_t v15 = *(_DWORD *)(a1 + 16);
    if (!v15) {
      return;
    }
    int v16 = v12 == 0x80000000 ? 0x80000000 : v12 - 1;
    if (*(_BYTE *)(a1 + 64))
    {
      LODWORD(v17) = 0;
    }

    else if (v16 <= 0xF)
    {
      unsigned int v17 = (*(void *)(a1 + 48) >> (4 * v16)) & 0xFLL;
    }

    else
    {
      LODWORD(v17) = 0;
    }

    if (!*(_BYTE *)(a1 + 21)) {
      break;
    }
    __int128 v54 = v14;
    if (v12 >= -2147483646) {
      UErrorCode v18 = v12 - 2;
    }
    else {
      UErrorCode v18 = 0x80000000;
    }
    int v19 = uprv_max(0LL, v15 - 14);
    switch((int)v17)
    {
      case 0:
        if (a4)
        {
          switch((int)v13)
          {
            case 0:
            case 5:
              break;
            case 2:
            case 7:
              goto LABEL_101;
            default:
              goto LABEL_104;
          }
        }

        if (v18 < v19) {
          goto LABEL_60;
        }
        if (v12 <= -2147483646) {
          BOOL v20 = -2147483646;
        }
        else {
          BOOL v20 = v12;
        }
        uint64_t v21 = v20 - 1;
        int v22 = 4 * v20 - 8;
        while (1)
        {
          --v21;
          if (*(_BYTE *)(a1 + 64))
          {
            if ((v21 & 0x80000000) == 0
              && *(_DWORD *)(a1 + 16) > (signed int)v21
              && *(_BYTE *)(*(void *)(a1 + 48) + v21))
            {
              goto LABEL_105;
            }
          }

          else if (v21 <= 0xF && ((*(void *)(a1 + 48) >> v22) & 0xF) != 0)
          {
            goto LABEL_105;
          }

          v22 -= 4;
          if ((int)v21 <= v19)
          {
LABEL_60:
            int v23 = 0;
            uint64_t v24 = 1;
            goto LABEL_106;
          }
        }

      case 4:
        if (a4 && (_DWORD)v13 != 7 && (_DWORD)v13 != 2) {
          goto LABEL_104;
        }
        if (v18 < v19) {
          goto LABEL_98;
        }
        if (v12 <= -2147483646) {
          uint64_t v25 = -2147483646;
        }
        else {
          uint64_t v25 = v12;
        }
        int v26 = v25 - 1;
        BOOL v27 = 4 * v25 - 8;
        while (2)
        {
          --v26;
          if (*(_BYTE *)(a1 + 64))
          {
            LODWORD(v28) = *(unsigned __int8 *)(*(void *)(a1 + 48) + v26);
          }

          else
          {
            if (v26 > 0xF) {
              break;
            }
            uint64_t v28 = (*(void *)(a1 + 48) >> v27) & 0xFLL;
          }

          if ((_DWORD)v28 == 9)
          {
            uint64_t v24 = 0;
            v27 -= 4;
            uint64_t v29 = 2;
            int v23 = 1;
            continue;
          }

          break;
        }

        uint64_t result = 0LL;
        *a3 = 65811;
        return result;
      }

      uint64_t v9 = v8;
      if (v8 < (int)icu::StringSegment::length(a1))
      {
        uint64_t v9 = v8;
        do
        {
          ++v9;
        }

        while (v9 < (int)icu::StringSegment::length(a1));
      }
    }

    uint64_t v10 = (_OWORD *)(a2 + 64);
    if (v9 >= (int)icu::StringSegment::length(a1))
    {
      if (v8 != 1) {
        goto LABEL_24;
      }
      icu::number::FractionPrecision::withMaxDigits((uint64_t)v10, v9, (uint64_t)v12);
    }

    else
    {
      if (icu::StringSegment::codePointAt((uint64_t **)a1, v9) == 114)
      {
        uint64_t v11 = 0;
      }

      else
      {
        uint64_t v11 = 1;
      }

      icu::number::FractionPrecision::withSignificantDigits((uint64_t)v10, v8, v9, v11, (uint64_t)v12);
    }

    *uint64_t v10 = *(_OWORD *)v12;
    *(_OWORD *)((char *)v10 + 12) = *(_OWORD *)&v12[12];
    return 1LL;
  }

  return result;
}

    *a2 = U_ILLEGAL_ARGUMENT_ERROR;
  }

  return this;
}

  if (BYTE4(v24[1])) {
    uprv_free(v24[0]);
  }
  int v19 = 1088LL;
  do
  {
    if (v33[v19 + 12]) {
      uprv_free(*(void **)&v33[v19]);
    }
    v19 -= 64LL;
  }

  while (v19);
  if ((_BYTE)v28) {
    uprv_free(v26);
  }
  BOOL v20 = 48LL;
  do
  {
    if (BYTE4(v24[v20 + 1])) {
      uprv_free(v24[v20]);
    }
    v20 -= 8LL;
  }

  while (v20 * 8);
  return v4;
}

LABEL_57:
          if (v22 < 1) {
            goto LABEL_63;
          }
        }
      }

      else
      {
        utext_setNativeIndex(ut, v22 + NativeIndex);
      }

      int v48 = *(_DWORD *)(a5 + 8);
      if (v48 >= -1 && *(_DWORD *)(a5 + 12) > v48) {
        goto LABEL_62;
      }
      if (icu::UVector32::expandCapacity((icu::UVector32 *)a5, v48 + 1, v29))
      {
        int v48 = *(_DWORD *)(a5 + 8);
LABEL_62:
        *(_DWORD *)(*(void *)(a5 + 24) + 4LL * v48) = v22 + NativeIndex;
        ++*(_DWORD *)(a5 + 8);
      }

    BOOL v6 = 0;
    if (v7 <= 0xEF) {
      LOBYTE(v8) = 2;
    }
    else {
      LOBYTE(v8) = 3;
    }
    if (v7 > 0xDF) {
      LOBYTE(v8) = v8 + 1;
    }
    int v16 = 1;
LABEL_63:
    if (v16 >= (char)v8)
    {
LABEL_80:
      int v39 = (char)v16;
      if (v16 == v8)
      {
        UChar32 v41 = v4;
LABEL_82:
        if (v6 < 1)
        {
          int v50 = 0;
        }

        else
        {
          int v47 = v6;
          int v48 = (char *)(v3 + 65);
          do
          {
            int v49 = *v48++;
            *v9++ = v49;
            --v47;
          }

          while (v47);
          int v50 = v6;
        }

        unsigned int v17 = &v41[v6 - v39];
        while (v50 < (char)v8)
        {
          __int128 v51 = *v17++;
          *v9++ = v51;
          int v50 = (char)(v50 + 1);
        }

        v10 -= v39;
        continue;
      }

      unsigned int v17 = &v4[v6 - (char)v16];
      if (v6 < (char)v16)
      {
LABEL_92:
        uint64_t v52 = (_BYTE *)(v3 + v6 + 65);
        uint64_t v53 = v16 - (unint64_t)v6;
        do
        {
          __int128 v54 = *v17++;
          *v52++ = v54;
          --v53;
        }

        while (v53);
      }

      *(_BYTE *)(v3 + 64) = v16;
      a2[2] = v17;
      *(void *)(result + 32) = v9;
      int64_t v12 = 12;
      goto LABEL_33;
    }

    break;
  }

  int v39 = (char)v8;
  LOBYTE(v40) = v16;
  UChar32 v41 = v4;
  while (v41 < v5)
  {
    UChar32 v42 = *v41;
    if ((char)v8 < 3 || v40 >= 2u)
    {
    }

    else
    {
      if (v8 == 3)
      {
        UChar32 v43 = a00000000000000[v7 & 0xF];
        int v44 = v42 >> 5;
      }

      else
      {
        UChar32 v43 = byte_180A25F4C[v42 >> 4];
        LOBYTE(v44) = v7 & 7;
      }

      if ((v43 & (1 << v44)) == 0)
      {
LABEL_79:
        LOBYTE(v16) = v40;
        int v4 = v41;
        goto LABEL_80;
      }
    }

    int v40 = (char)(v40 + 1);
    ++v41;
    int v7 = v42 + (v7 << 6);
  }

  int v45 = v6;
  if (v6 >= (char)v40)
  {
    uint64_t v5 = &v41[v6 - (uint64_t)(char)v40];
  }

  else
  {
    do
    {
      UChar32 v46 = v45 + 1;
      *(_BYTE *)(v3 + 65 + v45) = v4[v45 - v16];
      int v45 = v46;
    }

    while (v46 < (char)v40);
    uint64_t v5 = &v4[v46 - v16];
  }

  *(_BYTE *)(v3 + 64) = v40;
  *(_DWORD *)(v3 + 72) = v7;
  *(_DWORD *)(v3 + 76) = (char)v8;
LABEL_125:
  a2[2] = v5;
  *(void *)(result + 32) = v9;
  return result;
}

  return a7;
}

    *a8 = 0;
    if (a5) {
      goto LABEL_62;
    }
    goto LABEL_78;
  }

  *a8 = 0;
LABEL_62:
  sub_1808D7748(a1, a4, 16, &v53);
  int v39 = 0;
  int v40 = **a1;
  if (v40 == 43)
  {
LABEL_65:
    sub_1808D7748(a1, a4, 16, &v53);
  }

  else if (v40 == 45)
  {
    int v39 = 1;
    goto LABEL_65;
  }

  UChar32 v41 = 0;
  do
  {
    UChar32 v42 = **a1;
    if (v41 >= 0) {
      UChar32 v43 = v41;
    }
    else {
      UChar32 v43 = -v41;
    }
    int v44 = v42 + 10 * v41 - 48;
    if (v43 < 0x17BB1) {
      UChar32 v41 = v44;
    }
  }

  while (!sub_1808D7748(a1, a4, 16, &v53));
  if (v39) {
    int v45 = -v41;
  }
  else {
    int v45 = v41;
  }
  v20 += v45;
LABEL_78:
  if (v20) {
    UChar32 v46 = v21 == 0;
  }
  else {
    UChar32 v46 = 1;
  }
  if (v46)
  {
    if (a3)
    {
      if (!v21) {
        return -0.0;
      }
      return (double)-v21;
    }

    return (double)v21;
  }

  else
  {
    int v47 = COERCE_DOUBLE(sub_1808D81FC(v21, v20));
    if (a3) {
      return -v47;
    }
    else {
      return v47;
    }
  }

    if (v27)
    {
      icu::CollationElementIterator::~CollationElementIterator(v27);
      icu::UMemory::operator delete(v34);
    }

    if (CollationElementIterator)
    {
      icu::CollationElementIterator::~CollationElementIterator(CollationElementIterator);
      icu::UMemory::operator delete(v35);
    }
  }

  else
  {
    *a4 = 7;
  }

  return v24;
}

          uprv_itou((__int16 *)v78, 16, *(_DWORD *)(v8 + 16), 0xAu, 0LL);
          icu::UnicodeString::UnicodeString((uint64_t)&v75, (uint64_t)v78);
          if ((v76 & 0x8000u) == 0) {
            int v33 = v76 >> 5;
          }
          else {
            int v33 = v77;
          }
          icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v33);
          uint64_t result = icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)&v75);
          goto LABEL_87;
        }

        if (*(_BYTE *)(v8 + 32))
        {
          if (*(_BYTE *)(v8 + 33))
          {
            v69 = L" not in ";
            icu::UnicodeString::UnicodeString(&v75, 1LL, &v69);
            if ((v76 & 0x8000u) == 0) {
              uint64_t v15 = v76 >> 5;
            }
            else {
              uint64_t v15 = v77;
            }
            icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v15);
            uint64_t result = icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v75);
            v60[12] = v69;
          }

          else
          {
            v68 = " ";
            icu::UnicodeString::UnicodeString(&v75, 1LL, &v68);
            if ((v76 & 0x8000u) == 0) {
              uint64_t v29 = v76 >> 5;
            }
            else {
              uint64_t v29 = v77;
            }
            icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v29);
            uint64_t result = icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)&v75);
            v60[11] = v68;
          }
        }

        else if (*(_BYTE *)(v8 + 33))
        {
          v67 = L" in ";
          icu::UnicodeString::UnicodeString(&v75, 1LL, &v67);
          if ((v76 & 0x8000u) == 0) {
            int v19 = v76 >> 5;
          }
          else {
            int v19 = v77;
          }
          icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v19);
          uint64_t result = icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v75);
          v60[10] = v67;
        }

        else
        {
          v66 = " ";
          icu::UnicodeString::UnicodeString(&v75, 1LL, &v66);
          if ((v76 & 0x8000u) == 0) {
            int v35 = v76 >> 5;
          }
          else {
            int v35 = v77;
          }
          icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v35);
          uint64_t result = icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)&v75);
          v60[9] = v66;
        }

        int v37 = *(void *)(v8 + 24);
        BOOL v38 = *(unsigned int *)(v37 + 8);
        if ((int)v38 >= 1)
        {
          int v39 = 0LL;
          while ((int)v38 >= 1)
          {
            int v40 = *(void *)(v37 + 24);
            UChar32 v41 = *(_DWORD *)(v40 + 4 * v39);
            if (v39 + 1 >= v38) {
              goto LABEL_71;
            }
            UChar32 v42 = *(_DWORD *)(v40 + 4 * v39 + 4);
LABEL_72:
            uprv_itou((__int16 *)v78, 16, v41, 0xAu, 0LL);
            icu::UnicodeString::UnicodeString((uint64_t)&v75, (uint64_t)v78);
            if ((v76 & 0x8000u) == 0) {
              UChar32 v43 = v76 >> 5;
            }
            else {
              UChar32 v43 = v77;
            }
            icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v43);
            int v45 = icu::UnicodeString::~UnicodeString(v44, (icu::UnicodeString *)&v75);
            v65 = L"..";
            icu::UnicodeString::UnicodeString(v45, 1LL, &v65);
            if ((v76 & 0x8000u) == 0) {
              UChar32 v46 = v76 >> 5;
            }
            else {
              UChar32 v46 = v77;
            }
            icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v46);
            icu::UnicodeString::~UnicodeString(v47, (icu::UnicodeString *)&v75);
            v60[8] = v65;
            uprv_itou((__int16 *)v78, 16, v42, 0xAu, 0LL);
            icu::UnicodeString::UnicodeString((uint64_t)&v75, (uint64_t)v78);
            if ((v76 & 0x8000u) == 0) {
              int v48 = v76 >> 5;
            }
            else {
              int v48 = v77;
            }
            icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v48);
            uint64_t result = icu::UnicodeString::~UnicodeString(v49, (icu::UnicodeString *)&v75);
            v39 += 2LL;
            int v37 = *(void *)(v8 + 24);
            BOOL v38 = *(unsigned int *)(v37 + 8);
            if ((int)v38 > (int)v39)
            {
              v64 = L", ";
              icu::UnicodeString::UnicodeString(result, 1LL, &v64);
              if ((v76 & 0x8000u) == 0) {
                int v50 = v76 >> 5;
              }
              else {
                int v50 = v77;
              }
              icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v50);
              uint64_t result = icu::UnicodeString::~UnicodeString(v51, (icu::UnicodeString *)&v75);
              v60[7] = v64;
              int v37 = *(void *)(v8 + 24);
              BOOL v38 = *(unsigned int *)(v37 + 8);
            }
          }

          UChar32 v41 = 0;
LABEL_71:
          UChar32 v42 = 0;
          goto LABEL_72;
        }

LABEL_63:
    }
  }

  uint64_t v15 = 0LL;
LABEL_64:
  int v49 = *(_DWORD *)(a5 + 8);
  BOOL v38 = __OFSUB__(v49, 1);
  int v50 = v49 - 1;
  if (v50 < 0 != v38)
  {
    if (a4 <= 0) {
      return (v15 - 1);
    }
  }

  else if (*(_DWORD *)(*(void *)(a5 + 24) + 4LL * v50) >= a4)
  {
    *(_DWORD *)(a5 + 8) = v50;
    return (v15 - 1);
  }

  return v15;
}

              a4 = *(char **)(v22 + 48 * v23 + 16);
              goto LABEL_75;
            }

            icu::MessagePattern::addPart((uint64_t)this, 9, v37, v39, 0, (int *)a6);
            if (v47 != 125) {
              BOOL v27 = icu::MessagePattern::parseSimpleStyle(this, (v27 + 1), a5, a6);
            }
            int v32 = 1;
            goto LABEL_25;
          }
        }

        else if (v39 == 6)
        {
          if (icu::MessagePattern::isChoice(this, v37))
          {
            *(_WORD *)(**((void **)this + 10) + 16 * v12 + 10) = 2;
            if (v47 != 125)
            {
              BOOL v27 = icu::MessagePattern::parseChoiceStyle(this, v27 + 1, a4, a5, a6);
              int v32 = 2;
              goto LABEL_25;
            }

    uint64_t v24 = (unint64_t)v7;
LABEL_65:
    int32_t v14 = (v14 - dword_180A266D8[(char)v15]);
    if ((char)v15 < 4 || (UChar32 v42 = 0, (v22 & 1) != 0)) {
      UChar32 v42 = *(_DWORD *)(v62
    }
                      + 4LL * (((v14 >> 4) & 0x3F) + *(unsigned __int16 *)(v62 + 2LL * ((int)v14 >> 10))));
    int v33 = *(unsigned __int16 *)(v17 + 2 * (v14 & 0xF | (16 * (unsigned __int16)v42)));
    if (((v42 >> (v14 & 0xF | 0x10)) & 1) == 0)
    {
LABEL_72:
      if (!v33) {
        goto LABEL_78;
      }
    }

  if ((((_DWORD)v5 + 1) & v25) == 0)
  {
    int32_t v14 = 1;
    unsigned int v17 = v28;
    uint64_t v5 = (v5 + 1);
    uint64_t v13 = v32;
LABEL_80:
    LODWORD(v8) = v59;
    uint64_t v15 = v58;
    int v23 = v62;
    int v22 = v63;
    uint64_t v24 = v61;
    BOOL v27 = v60;
    goto LABEL_81;
  }

  BOOL v38 = v7;
  int v39 = v30 + 1LL;
  while (1)
  {
    int v40 = a1[1];
    if (v10 == 2)
    {
      UChar32 v41 = *(unsigned __int8 *)(v40 + v39);
    }

    else if (v10 == 1)
    {
      UChar32 v41 = *(unsigned int *)(v40 + 4 * v39);
    }

    else
    {
      UChar32 v41 = v10 ? 0xFFFFFFFFLL : *(unsigned __int16 *)(v40 + 2 * v39);
    }

    if ((_DWORD)v41 != (_DWORD)v32)
    {
      if (!a3) {
        return v5;
      }
      UChar32 v42 = v11;
      if ((_DWORD)v41 != *((_DWORD *)a1 + 11))
      {
        UChar32 v43 = v18;
        UChar32 v42 = v66(v38, v41);
        UErrorCode v18 = v43;
        uint64_t v11 = v65;
        a3 = v66;
      }

      int v32 = v41;
      if (v42 != (_DWORD)v18) {
        return v5;
      }
    }

    int v44 = v5 + 2;
    ++v39;
    uint64_t v5 = (v5 + 1);
    if ((v44 & v25) == 0)
    {
      uint64_t v5 = (v5 + 1);
      int32_t v14 = 1;
      unsigned int v17 = v28;
      uint64_t v13 = v32;
      int v7 = v38;
      BOOL v6 = v57;
      goto LABEL_80;
    }
  }

    if (v27) {
      goto LABEL_64;
    }
    if ((int)v16 >= 4)
    {
      int v36 = (unsigned __int16)*v14;
      if ((unsigned __int16)v36 == 120)
      {
        int v37 = 1LL;
        while (v37 != 4)
        {
          BOOL v38 = (unsigned __int16)v14[v37];
          int v39 = (unsigned __int16)aXn[v37++];
          if (v39 != (unsigned __int16)v38)
          {
            break;
          }
        }

        int v35 = 66564;
        goto LABEL_58;
      }
    }

      icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v75);
      return (icu::UnicodeString *)this;
    }

    icu::UnicodeString::setToBogus((icu::UnicodeString *)this);
LABEL_52:
    icu::Edits::~Edits((void **)&v32);
    goto LABEL_63;
  }

  return (icu::UnicodeString *)this;
}

  if ((_DWORD)a2 == -1) {
    return this;
  }
  if ((_DWORD)a2 != 32)
  {
    goto LABEL_80;
  }

  int v33 = *((unsigned __int16 *)v9 + 4);
  if ((*((__int16 *)v9 + 4) & 0x80000000) == 0)
  {
    if (v33 >= 0x20)
    {
      UChar32 v34 = v33 >> 5;
      goto LABEL_72;
    }

    return this;
  }

  UChar32 v34 = *((_DWORD *)v9 + 3);
  if (v34 <= 0) {
    return this;
  }
LABEL_72:
  int v35 = v34 - 1;
  if ((v33 & 2) != 0) {
    int v36 = (char *)v9 + 10;
  }
  else {
    int v36 = (char *)*((void *)v9 + 3);
  }
  if (*(_WORD *)&v36[2 * v35] != 32)
  {
    int v37 = (uint64_t)v9;
    BOOL v38 = 32;
    return (icu::ICU_Utility *)icu::UnicodeString::append(v37, v38);
  }

  return this;
}

    *a8 = 0;
    if (a5) {
      goto LABEL_68;
    }
    goto LABEL_84;
  }

  *a8 = 0;
LABEL_68:
  sub_1808D843C(a1, a4, 16, &v58);
  UChar32 v42 = 0;
  UChar32 v43 = **a1;
  if (v43 == 43)
  {
LABEL_71:
    sub_1808D843C(a1, a4, 16, &v58);
  }

  else if (v43 == 45)
  {
    UChar32 v42 = 1;
    goto LABEL_71;
  }

  int v44 = 0;
  do
  {
    int v45 = **a1;
    if (v44 >= 0) {
      UChar32 v46 = v44;
    }
    else {
      UChar32 v46 = -v44;
    }
    int v47 = v45 + 10 * v44 - 48;
    if (v46 < 0x17BB1) {
      int v44 = v47;
    }
  }

  while (!sub_1808D843C(a1, a4, 16, &v58));
  if (v42) {
    int v48 = -v44;
  }
  else {
    int v48 = v44;
  }
  v20 += v48;
LABEL_84:
  if (v20) {
    int v49 = v21 == 0;
  }
  else {
    int v49 = 1;
  }
  if (v49)
  {
    if (a3)
    {
      if (!v21) {
        return -0.0;
      }
      return (double)-v21;
    }

    return (double)v21;
  }

  else
  {
    int v50 = COERCE_DOUBLE(sub_1808D81FC(v21, v20));
    if (a3) {
      return -v50;
    }
    else {
      return v50;
    }
  }

      *a5 = 0;
      int v32 = 0xFFFFFFFFLL;
      goto LABEL_64;
    }

    int v37 = *(unsigned __int16 *)(a2 + 8);
    if ((v37 & 1) != 0) {
      goto LABEL_67;
    }
LABEL_61:
    int v40 = 1;
    goto LABEL_62;
  }

  int32_t v14 = (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 200LL))(*(void *)(a1 + 96));
  uint64_t v15 = *(unsigned __int16 *)(a3 + 8);
  int v16 = (__int16)v15;
  unsigned int v17 = v15 >> 5;
  if (v16 < 0) {
    unsigned int v17 = *(_DWORD *)(a3 + 12);
  }
  *a5 = v17;
  UErrorCode v18 = *(unsigned __int16 *)(a2 + 8);
  if (v14)
  {
    if ((a4 & 0x80000000) != 0)
    {
      int v19 = 0;
    }

    else if ((v18 & 0x8000) != 0)
    {
      int v19 = *(_DWORD *)(a2 + 12);
      BOOL v20 = a4;
      if (v19 >= (int)a4)
      {
LABEL_30:
        BOOL v27 = *(unsigned __int16 *)(a3 + 8);
        if ((v27 & 0x8000u) == 0) {
          uint64_t v28 = v27 >> 5;
        }
        else {
          uint64_t v28 = *(_DWORD *)(a3 + 12);
        }
        if ((v27 & 1) != 0 || v28 < 1) {
          return sub_18091830C(a1, a2, a3, a4, a5);
        }
        uint64_t v29 = (__int16)v18;
        int v30 = v18 >> 5;
        if (v29 < 0) {
          int v30 = *(_DWORD *)(a2 + 12);
        }
        UChar32 v31 = (v27 & 2) != 0 ? a3 + 10 : *(void *)(a3 + 24);
        int v32 = icu::UnicodeString::indexOf(a2, v31, 0, v28, v20, v30 - v20);
        if ((v32 & 0x80000000) != 0) {
          return sub_18091830C(a1, a2, a3, a4, a5);
        }
        return v32;
      }
    }

    else
    {
      int v19 = v18 >> 5;
      BOOL v20 = a4;
    }

    BOOL v20 = v19;
    goto LABEL_30;
  }

  if ((a4 & 0x80000000) != 0)
  {
    int v26 = 0;
    goto LABEL_74;
  }

  if ((v18 & 0x8000) != 0)
  {
    int v26 = *(_DWORD *)(a2 + 12);
    goto LABEL_74;
  }

  int v26 = v18 >> 5;
  if (v18 >> 5 < a4) {
LABEL_74:
  }
    LODWORD(a4) = v26;
LABEL_75:
  int v44 = *(unsigned __int16 *)(a3 + 8);
  if ((v44 & 0x8000u) == 0) {
    int v45 = v44 >> 5;
  }
  else {
    int v45 = *(_DWORD *)(a3 + 12);
  }
  int v32 = 0xFFFFFFFFLL;
  if ((v44 & 1) != 0 || v45 < 1) {
    return v32;
  }
  UChar32 v46 = (__int16)v18;
  int v47 = v18 >> 5;
  if (v46 < 0) {
    int v47 = *(_DWORD *)(a2 + 12);
  }
  if ((v44 & 2) != 0) {
    int v48 = a3 + 10;
  }
  else {
    int v48 = *(void *)(a3 + 24);
  }
  return icu::UnicodeString::indexOf(a2, v48, 0, v45, a4, v47 - a4);
}

void *sub_1807C6638(void *a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  BOOL v6 = sub_1807BE4E4(a1);
  void *v6 = off_18970B478;
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(v6 + 1));
  *a1 = off_18970B508;
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 26));
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 51));
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 76));
  a1[101] = a2;
  uint64_t v9 = 0LL;
  memset(v8, 0, sizeof(v8));
  icu::UnicodeString::UnicodeString((uint64_t)v10, (uint64_t)L"[[:Laoo:]&[:LineBreak=SA:]]");
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v8, (const icu::UnicodeString *)v10, a3);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v10);
  icu::UnicodeString::UnicodeString((uint64_t)v10, (uint64_t)L"[[:Laoo:]&[:LineBreak=SA:]&[:M:]]");
  icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 76), (const icu::UnicodeString *)v10, a3);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v10);
  icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 76), 0x20u);
  icu::UnicodeSet::operator=((icu::UnicodeSet *)(a1 + 26), (const icu::UnicodeSet *)v8);
  icu::UnicodeSet::remove((icu::UnicodeSet *)(a1 + 26), 0xEC0u, 0xEC4u);
  icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 51), 0xE81u, 0xEAEu);
  icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 51), 0xEDCu, 0xEDDu);
  icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 51), 0xEC0u, 0xEC4u);
  icu::UnicodeSet::compact((icu::UnicodeSet *)(a1 + 76));
  icu::UnicodeSet::compact((icu::UnicodeSet *)(a1 + 26));
  icu::UnicodeSet::compact((icu::UnicodeSet *)(a1 + 51));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v8);
  return a1;
}

void sub_1807C6800(void *a1)
{
  *a1 = off_18970B508;
  uint64_t v2 = a1[101];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 76));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 51));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 26));
  *a1 = off_18970B478;
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 1));
  icu::UObject::~UObject((icu::UObject *)a1);
}

void sub_1807C6870(void *a1)
{
}

uint64_t sub_1807C6884(uint64_t *a1, UText *a2, int a3, int a4, uint64_t a5, uint64_t a6, int *a7)
{
  uint64_t v53 = *MEMORY[0x1895F89C0];
  if (*a7 > 0 || a4 - a3 < 4) {
    return 0LL;
  }
  bzero(v52, 0x21CuLL);
  for (uint64_t i = 0LL; i != 135; i += 45LL)
  {
    int v16 = &v52[i];
    *(_OWORD *)int v16 = xmmword_1809DDEE0;
    v16[4] = 0;
  }

  utext_setNativeIndex(a2, a3);
  if (*a7 <= 0)
  {
    uint64_t v8 = 0LL;
    uint64_t v47 = a5;
    int v50 = a7;
    while (1)
    {
      int NativeIndex = utext_getNativeIndex(a2);
      if (NativeIndex >= a4) {
        goto LABEL_56;
      }
      unsigned int v17 = v8 % 3;
      UErrorCode v18 = &v52[45 * (v8 % 3)];
      int v19 = sub_1807C5BD4(v18, a2, a1[101], a4);
      if (v19 == 1)
      {
        BOOL v20 = &v52[45 * v17];
        utext_setNativeIndex(a2, (int)v20[v20[3] + 5] + (uint64_t)(int)v20[2]);
        uint64_t v21 = (int)v20[3];
        int v22 = v20[v21 + 5];
        int v23 = v20[v21 + 25];
        uint64_t v8 = (v8 + 1);
      }

      else if (v19 < 2)
      {
        int v22 = 0;
        int v23 = 0;
      }

      else
      {
        uint64_t v24 = (v8 + 1);
        if (utext_getNativeIndex(a2) < a4)
        {
          uint64_t v25 = &v52[45 * v17];
          int v48 = v25 + 3;
          int v49 = v25 + 4;
          int v26 = &v52[45 * (((int)v8 + 2) % 3u)];
          while ((int)sub_1807C5BD4(&v52[45 * (v24 % 3)], a2, a1[101], a4) < 1)
          {
LABEL_21:
          }

          *int v48 = *v49;
          if ((int)utext_getNativeIndex(a2) < a4)
          {
            while (!sub_1807C5BD4(v26, a2, a1[101], a4))
            {
            }

            *int v48 = *v49;
          }
        }

LABEL_25:
        BOOL v27 = &v52[45 * v17];
        utext_setNativeIndex(a2, (int)v27[v27[3] + 5] + (uint64_t)(int)v27[2]);
        uint64_t v28 = (int)v27[3];
        int v22 = v27[v28 + 5];
        int v23 = v27[v28 + 25];
        uint64_t v8 = v24;
        a5 = v47;
      }

      uint64_t v29 = (UErrorCode *)v50;
      if ((int)utext_getNativeIndex(a2) < a4 && v23 <= 2)
      {
        if ((int)sub_1807C5BD4(&v52[45 * (v8 % 3)], a2, a1[101], a4) > 0
          || v22 && (int)v52[45 * (v8 % 3) + 1] > 2)
        {
          utext_setNativeIndex(a2, v22 + NativeIndex);
        }

        else
        {
          int v30 = utext_getNativeIndex(a2);
          UChar32 v31 = utext_next32(a2);
          int v32 = utext_getNativeIndex(a2) - v30;
          int v33 = a4 - v32 - (v22 + NativeIndex);
          if (v33 >= 1)
          {
            do
            {
              UChar32 v34 = utext_current32(a2);
              if (icu::UnicodeSet::contains((icu::UnicodeSet *)(a1 + 26), v31))
              {
                if (icu::UnicodeSet::contains((icu::UnicodeSet *)(a1 + 51), v34))
                {
                  int v35 = sub_1807C5BD4(&v52[45 * (((int)v8 + 1) % 3u)], a2, a1[101], a4);
                  utext_setNativeIndex(a2, v32 + v22 + NativeIndex);
                  if (v35 > 0) {
                    break;
                  }
                }
              }

              int v36 = utext_getNativeIndex(a2);
              UChar32 v31 = utext_next32(a2);
              int v37 = utext_getNativeIndex(a2);
              v32 += v37 - v36;
              BOOL v38 = __OFSUB__(v33, v37 - v36);
              v33 -= v37 - v36;
            }

            while (!((v33 < 0) ^ v38 | (v33 == 0)));
          }

          if (v22 >= 1) {
            uint64_t v8 = v8;
          }
          else {
            uint64_t v8 = (v8 + 1);
          }
          v22 += v32;
          a5 = v47;
          uint64_t v29 = (UErrorCode *)v50;
        }
      }

      int v39 = utext_getNativeIndex(a2);
      if (v39 < a4)
      {
        int v40 = v39;
        do
        {
          UChar32 v41 = utext_current32(a2);
          utext_next32(a2);
          int v22 = v22 - v40 + utext_getNativeIndex(a2);
          int v40 = utext_getNativeIndex(a2);
        }

        while (v40 < a4);
      }

      if (v22 >= 1)
      {
        int v42 = *(_DWORD *)(a5 + 8);
        if (v42 >= -1 && *(_DWORD *)(a5 + 12) > v42) {
          goto LABEL_54;
        }
      }

        BOOL v27 = &v52[45 * v17];
        utext_setNativeIndex(a2, (int)v27[v27[3] + 5] + (uint64_t)(int)v27[2]);
        uint64_t v28 = (int)v27[3];
        int v22 = v27[v28 + 5];
        int v23 = v27[v28 + 25];
        uint64_t v8 = v24;
        a5 = v47;
      }

      uint64_t v29 = (UErrorCode *)v50;
      if ((int)utext_getNativeIndex(a2) < a4 && v23 <= 2)
      {
        if ((int)sub_1807C5BD4(&v52[45 * (v8 % 3)], a2, a1[101], a4) > 0
          || v22 && (int)v52[45 * (v8 % 3) + 1] > 2)
        {
          utext_setNativeIndex(a2, v22 + NativeIndex);
        }

        else
        {
          int v30 = utext_getNativeIndex(a2);
          UChar32 v31 = utext_next32(a2);
          int v32 = utext_getNativeIndex(a2) - v30;
          int v33 = a4 - v32 - (v22 + NativeIndex);
          if (v33 >= 1)
          {
            do
            {
              UChar32 v34 = utext_current32(a2);
              if (icu::UnicodeSet::contains((icu::UnicodeSet *)(a1 + 26), v31))
              {
                if (icu::UnicodeSet::contains((icu::UnicodeSet *)(a1 + 51), v34))
                {
                  int v35 = sub_1807C5BD4(&v52[45 * (((int)v8 + 1) % 3u)], a2, a1[101], a4);
                  utext_setNativeIndex(a2, v32 + v22 + NativeIndex);
                  if (v35 > 0) {
                    break;
                  }
                }
              }

              int v36 = utext_getNativeIndex(a2);
              UChar32 v31 = utext_next32(a2);
              int v37 = utext_getNativeIndex(a2);
              v32 += v37 - v36;
              BOOL v38 = __OFSUB__(v33, v37 - v36);
              v33 -= v37 - v36;
            }

            while (!((v33 < 0) ^ v38 | (v33 == 0)));
          }

          if (v22 >= 1) {
            uint64_t v8 = v8;
          }
          else {
            uint64_t v8 = (v8 + 1);
          }
          v22 += v32;
          a5 = v47;
          uint64_t v29 = (UErrorCode *)v50;
        }
      }

      int v39 = utext_getNativeIndex(a2);
      if (v39 < a4)
      {
        int v40 = v39;
        do
        {
          UChar32 v41 = utext_current32(a2);
          utext_next32(a2);
          int v22 = v22 - v40 + utext_getNativeIndex(a2);
          int v40 = utext_getNativeIndex(a2);
        }

        while (v40 < a4);
      }

      if (v22 >= 1)
      {
        int v42 = *(_DWORD *)(a5 + 8);
        if (v42 >= -1 && *(_DWORD *)(a5 + 12) > v42) {
          goto LABEL_54;
        }
      }

        BOOL v27 = &v52[45 * v17];
        utext_setNativeIndex(a2, (int)v27[v27[3] + 5] + (uint64_t)(int)v27[2]);
        uint64_t v28 = (int)v27[3];
        int v22 = v27[v28 + 5];
        int v23 = v27[v28 + 25];
        uint64_t v8 = v24;
        a5 = v47;
      }

      uint64_t v29 = (UErrorCode *)v50;
      if ((int)utext_getNativeIndex(a2) < a4 && v23 <= 2)
      {
        if ((int)sub_1807C5BD4(&v52[45 * (v8 % 3)], a2, a1[101], a4) > 0
          || v22 && (int)v52[45 * (v8 % 3) + 1] > 2)
        {
          utext_setNativeIndex(a2, v22 + NativeIndex);
        }

        else
        {
          int v30 = utext_getNativeIndex(a2);
          UChar32 v31 = utext_next32(a2);
          int v32 = utext_getNativeIndex(a2) - v30;
          int v33 = a4 - v32 - (v22 + NativeIndex);
          if (v33 >= 1)
          {
            do
            {
              UChar32 v34 = utext_current32(a2);
              if (icu::UnicodeSet::contains((icu::UnicodeSet *)(a1 + 26), v31))
              {
                if (icu::UnicodeSet::contains((icu::UnicodeSet *)(a1 + 51), v34))
                {
                  int v35 = sub_1807C5BD4(&v52[45 * (((int)v8 + 1) % 3u)], a2, a1[101], a4);
                  utext_setNativeIndex(a2, v32 + v22 + NativeIndex);
                  if (v35 > 0) {
                    break;
                  }
                }
              }

              int v36 = utext_getNativeIndex(a2);
              UChar32 v31 = utext_next32(a2);
              int v37 = utext_getNativeIndex(a2);
              v32 += v37 - v36;
              BOOL v38 = __OFSUB__(v33, v37 - v36);
              v33 -= v37 - v36;
            }

            while (!((v33 < 0) ^ v38 | (v33 == 0)));
          }

          if (v22 >= 1) {
            uint64_t v8 = v8;
          }
          else {
            uint64_t v8 = (v8 + 1);
          }
          v22 += v32;
          a5 = v47;
          uint64_t v29 = (UErrorCode *)v50;
        }
      }

      int v39 = utext_getNativeIndex(a2);
      if (v39 < a4)
      {
        int v40 = v39;
        do
        {
          UChar32 v41 = utext_current32(a2);
          utext_next32(a2);
          int v22 = v22 - v40 + utext_getNativeIndex(a2);
          int v40 = utext_getNativeIndex(a2);
        }

        while (v40 < a4);
      }

      if (v22 >= 1)
      {
        int v42 = *(_DWORD *)(a5 + 8);
        if (v42 >= -1 && *(_DWORD *)(a5 + 12) > v42) {
          goto LABEL_54;
        }
      }

    int v19 = 1;
    *a4 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_26:
    icu::Locale::~Locale((icu::Locale *)v32);
LABEL_27:
    if (BYTE4(v35[0])) {
      uprv_free(v34);
    }
    if (v19)
    {
      if (v19 != 3) {
        return a1;
      }
LABEL_68:
      icu::LocalePriorityList::sort((uint64_t **)a1, a4);
      return a1;
    }

    int v7 = v31;
    uint64_t v9 = 0uLL;
  }

  uint64_t v29 = 1;
LABEL_70:
  *a4 = v29;
  return a1;
}

  sub_1807FDFB8((uint64_t)&v35);
  return v4;
}

  sub_180827F5C((uint64_t)a1, (uint64_t)v7, (uint64_t)v6, a4);
  ConverterName = ucnv_io_getConverterName(*((char **)v6 + 3), &v20, (UErrorCode *)&v21);
  *((void *)v6 + 3) = ConverterName;
  if (v21 <= 0 && (uint64_t v11 = (_BYTE *)ConverterName) != 0LL)
  {
    if (v21 == -122) {
      *a4 = U_AMBIGUOUS_ALIAS_WARNING;
    }
  }

  else
  {
    *((void *)v6 + 3) = v7;
    uint64_t v11 = v7;
  }

  if (v20)
  {
    if (v11 == (_BYTE *)v7)
    {
      uint64_t v11 = v7;
    }

    else
    {
      sub_180827F5C((uint64_t)v11, (uint64_t)v7, (uint64_t)v6, a4);
      uint64_t v11 = (_BYTE *)*((void *)v6 + 3);
    }
  }

  memset(__s1, 0, 60);
  ucnv_io_stripASCIIForCompare(__s1, v11);
  int64_t v12 = 0;
  uint64_t v13 = 34LL;
  int32_t v14 = 17LL;
  while (1)
  {
    uint64_t v15 = strcmp((const char *)__s1, (&off_189712200)[2 * v14]);
    int v16 = v14;
    if ((v15 & 0x80000000) == 0)
    {
      int64_t v12 = v14;
      int v16 = v13;
      if (!v15) {
        break;
      }
    }

    unsigned int v17 = (_DWORD)v14 == (v16 + v12) >> 1;
    int32_t v14 = (v16 + v12) >> 1;
    uint64_t v13 = v16;
    if (v17) {
      goto LABEL_43;
    }
  }

  UErrorCode v18 = SLODWORD((&off_189712200)[2 * v14 + 1]);
  if (((0x203uLL >> v18) & 1) == 0) {
    return (_BYTE *)qword_1897120F0[v18];
  }
LABEL_43:
  *((_DWORD *)v6 + 1) = 1;
  *((void *)v6 + 2) = 0LL;
  umtx_lock((icu::UMutex *)&unk_18C534EB8);
  int v19 = ucnv_load((uint64_t)v6, a4);
  umtx_unlock((std::mutex **)&unk_18C534EB8);
  uint64_t result = 0LL;
  return result;
}

      v60 = 0LL;
      v61 = 2 - (_DWORD)v20 + v59;
      do
      {
        v62 = v61;
        uint64_t v9 = (unsigned __int8 *)(v59 + v60);
        if (v59 + v60 >= v12) {
          goto LABEL_190;
        }
        v164[0] = (uint64_t)(v9 + 1);
        v63 = *(_DWORD *)(v16 + 4LL * *v9);
        v64 = (v63 >> 20) & 0xF;
        if (v63 < -2146435072 || v64 == 2)
        {
          *v11++ = v63;
          v163 = v11;
          v59 = v164[0];
          uint64_t v52 = __OFSUB__((_DWORD)v14, 1);
          LODWORD(v14) = v14 - 1;
          goto LABEL_25;
        }

        ++v60;
        if (v64 == 6) {
          goto LABEL_37;
        }
        v61 = v62 + 1;
      }

      while (v64 != 7);
      *uint64_t v2 = 12;
LABEL_37:
      v66 = v162;
      if (v162 && (int)v59 - (int)v20 + (int)v60 > 1)
      {
        do
        {
          *v66++ = v8++;
          --v62;
        }

        while (v62 > 2);
        v162 = v66;
      }

      if (*v2 >= 1)
      {
        uint64_t v9 = (unsigned __int8 *)v164[0];
        goto LABEL_190;
      }

      BOOL v20 = (unsigned __int8 *)(v59 + v60);
      *(_BYTE *)(v10 + 65) = *(_BYTE *)(v59 + v60 - 1);
      v67 = *(void *)(*(void *)(v10 + 48) + 288LL);
      if (!v67)
      {
        uint64_t v9 = (unsigned __int8 *)v164[0];
LABEL_188:
        *uint64_t v2 = 10;
        *(_BYTE *)(v10 + 64) = 1;
        uint64_t v8 = (_DWORD)v9 + v8 - v59 - v60 + 1;
        BOOL v20 = (unsigned __int8 *)(v59 + v60);
        goto LABEL_190;
      }

      v68 = v2;
      uint64_t result = sub_18082B208( v10,  v67,  1,  v164,  v12,  (unint64_t *)&v163,  *(void *)(v13 + 40),  &v162,  v8,  *(_BYTE *)(v13 + 2),  v2);
      uint64_t v9 = (unsigned __int8 *)v164[0];
      if (!(_DWORD)result)
      {
        uint64_t v2 = v68;
        goto LABEL_188;
      }

      v69 = *v68;
      *(_BYTE *)(v10 + 64) = 0;
      uint64_t v2 = v68;
      if (v69 >= 1) {
        break;
      }
      uint64_t v8 = 1 - v59 + v8 + (_DWORD)v9 - v60;
      uint64_t v11 = v163;
      int32_t v14 = (*(void *)(v13 + 40) - (void)v163) >> 1;
      UErrorCode v18 = (int32x4_t)xmmword_180A26590;
      unsigned int v17 = (int32x4_t)xmmword_180A26580;
      int v19 = (int32x4_t)xmmword_180A265A0;
      uint64_t result = 2LL;
    }

    BOOL v20 = (unsigned __int8 *)(v59 + v60);
    uint64_t v8 = v8 + (_DWORD)v9 - v59 - v60 + 1;
LABEL_190:
    v143 = *v2 > 0 || (unint64_t)v9 >= v12;
    v144 = v162;
    if (v162 && v9 != v20)
    {
      v145 = v20 - v9;
      do
      {
        *v144++ = v8++;
        v143 = __CFADD__(v145++, 1LL);
      }

      while (!v143);
    }

    *(void *)(v13 + 16) = v9;
    *(void *)(v13 + 32) = v163;
    *(void *)(v13 + 48) = v144;
    return result;
  }

  v125 = *(void *)(v3 + 8);
  v124 = *(_BYTE **)(v3 + 16);
  v127 = *(void *)(v3 + 24);
  v126 = *(_WORD **)(v3 + 32);
  v128 = *(void *)(v3 + 40);
  v162 = *(int **)(v3 + 48);
  v163 = v126;
  v129 = 64LL;
  if ((*(_BYTE *)(v125 + 56) & 0x10) == 0) {
    v129 = 56LL;
  }
  if ((unint64_t)v124 >= v127)
  {
LABEL_179:
    v132 = (unint64_t)v124;
    goto LABEL_180;
  }

  v130 = 0;
  v131 = *(void *)(*(void *)(v125 + 48) + v129);
  while (1)
  {
    v126 = v163;
    if ((unint64_t)v163 >= v128)
    {
      *uint64_t v2 = 15;
      goto LABEL_179;
    }

    v132 = (unint64_t)(v124 + 1);
    v164[0] = (uint64_t)(v124 + 1);
    v133 = *(_DWORD *)(v131 + 4LL * *v124);
    if (v133 < -2146435072)
    {
LABEL_155:
      *v163 = v133;
      v163 = v126 + 1;
      v134 = v162;
      if (v162)
      {
        *v162 = v130;
        v162 = v134 + 1;
      }

      goto LABEL_167;
    }

    if ((v133 & 0xD00000) == 0x100000) {
      break;
    }
    v138 = (v133 >> 20) & 0xF;
    if (v138 == 2) {
      goto LABEL_155;
    }
    if (v138 != 6)
    {
      if (v138 == 7)
      {
        *uint64_t v2 = 12;
        goto LABEL_180;
      }

      goto LABEL_167;
    }

    if (*v2 > 0) {
      goto LABEL_177;
    }
    *(void *)(v3 + 16) = v132;
    *(_BYTE *)(v125 + 65) = *v124;
    v139 = *(void *)(*(void *)(v125 + 48) + 288LL);
    if (v139
      && (v140 = v2,
          uint64_t result = sub_18082B208( v125,  v139,  1,  v164,  v127,  (unint64_t *)&v163,  v128,  &v162,  v130,  *(_BYTE *)(v3 + 2),  v2),  v2 = v140,  (_DWORD)result))
    {
      v141 = 0;
      v142 = *v140;
    }

    else
    {
      v142 = 10;
      *uint64_t v2 = 10;
      v141 = 1;
    }

    *(_BYTE *)(v125 + 64) = v141;
    v132 = v164[0];
    if (v142 >= 1)
    {
LABEL_177:
      v126 = v163;
      goto LABEL_180;
    }

    v130 += LODWORD(v164[0]) - *(_DWORD *)(v3 + 16) + 1;
LABEL_168:
    v124 = (_BYTE *)v132;
    if (v132 >= v127) {
      goto LABEL_177;
    }
  }

  *v163 = (v133 >> 10) & 0x3FF | 0xD800;
  v135 = v126 + 1;
  v136 = v162;
  v137 = v133 & 0x3FF | 0xDC00;
  if (v162)
  {
    *v162 = v130;
    v162 = v136 + 1;
    v163 = v126 + 2;
    v126[1] = v137;
    v162 = v136 + 2;
    v136[1] = v130;
    goto LABEL_167;
  }

  if ((unint64_t)v135 < v128)
  {
    v163 = v126 + 2;
    v126[1] = v137;
LABEL_167:
    ++v130;
    goto LABEL_168;
  }

    uprv_free(v8);
    goto LABEL_26;
  }

  uint64_t v9 = 0LL;
  *a3 = 7;
LABEL_26:
  uprv_free(v7);
  uprv_free(a2);
  return v9;
}

  uint64_t v13 = *((_DWORD *)a1 + 4);
  if (v13 < 0)
  {
    if ((_DWORD)v6 == v4)
    {
      uint64_t v15 = *((_DWORD *)a1 + 2);
      if ((v15 & 0x80000000) == 0) {
        *((_DWORD *)a1 + 4) = v15 - ((int)v1 >= 0x10000);
      }
    }
  }

  else
  {
    *((_DWORD *)a1 + 4) = v13 + 1;
    if ((a1[1] & 0x80000000) != 0 && (_DWORD)v6 == v4)
    {
      int32_t v14 = v13 + 2;
      *((_DWORD *)a1 + 2) = v14;
    }
  }

  if ((int)v1 >= 0x10000)
  {
    *((_DWORD *)a1 + 6) = v1;
    return (unsigned __int16)((v1 >> 10) - 10304);
  }

  return v1;
}

      uint64_t v25 = v41;
      if (BYTE4(__dst[1])) {
        uprv_free(__dst[0]);
      }
      if (v27 > U_ZERO_ERROR) {
        goto LABEL_72;
      }
      goto LABEL_69;
    }

    int v40 = v26 + 40;
    uint64_t v29 = *(unsigned int *)(v26 + 72);
    if (a6)
    {
      LODWORD(v56) = 0;
      *__s[0] = 0;
      icu::StringPiece::StringPiece((icu::StringPiece *)&v47, a6);
      icu::CharString::append((icu::CharString *)__s, v47, v48, a9);
      uint64_t v25 = v41;
      if (*(int *)a9 > 0)
      {
LABEL_58:
        a8 = 0LL;
        goto LABEL_72;
      }

      __dst[0] = __s[0];
      uint64_t v29 = sub_180875000(v40, v29, (const char **)__dst, (const char **)&__s2);
    }

    else
    {
      uint64_t v25 = v41;
    }

    if (a3)
    {
      LODWORD(v56) = 0;
      *__s[0] = 0;
      icu::StringPiece::StringPiece((icu::StringPiece *)&v45, a3);
      icu::CharString::append((icu::CharString *)__s, v45, v46, a9);
      __dst[0] = __s[0];
      TableItemByIndex = sub_180875000(v40, v29, (const char **)__dst, (const char **)&__s2);
    }

    else
    {
      if (a4 == -1) {
        goto LABEL_66;
      }
      if (v29 >> 28 == 2 || (v29 & 0xE0000000) == 0x40000000)
      {
        __dst[0] = 0LL;
        TableItemByIndex = res_getTableItemByIndex(v40, v29, a4, __dst);
      }

      else
      {
        TableItemByIndex = res_getArrayItem(v40, v29, a4);
      }
    }

    uint64_t v29 = TableItemByIndex;
LABEL_66:
    if ((_DWORD)v29 == -1)
    {
      *a9 = U_MISSING_RESOURCE_ERROR;
      uint64_t v28 = a8;
    }

    else
    {
      uint64_t v28 = sub_180871E00(v26, v29, __s2, 0xFFFFFFFFLL, a5, 0LL, (a7 + 1), a8, a9);
    }

    if (v2[9]) {
      return v2;
    }
    *a2 = 7;
    uprv_free(v2);
    return 0LL;
  }

  uint64_t v15 = *(void *)(a1 + 72);
  int v16 = (void **)uprv_malloc(0x453C0uLL);
  unsigned int v17 = v16;
  if (v16)
  {
    UErrorCode v18 = v16 + 18016;
    int v19 = uprv_malloc(4LL * *(int *)(v15 + 144148));
    *UErrorCode v18 = v19;
    if (v19)
    {
      *((_DWORD *)v17 + 36037) = *(_DWORD *)(v15 + 144148);
      memcpy(v17, (const void *)v15, 0x880uLL);
      BOOL v20 = *(int *)(v15 + 144144);
      memcpy(v17 + 272, (const void *)(v15 + 2176), 4 * v20);
      *((_DWORD *)v17 + 36040) = *(_DWORD *)(v15 + 144160);
      *((_DWORD *)v17 + 36036) = v20;
      memcpy(*v18, *(const void **)(v15 + 144128), 4LL * *(int *)(v15 + 144152));
      *((_DWORD *)v17 + 36041) = *(_DWORD *)(v15 + 144164);
      uint64_t v21 = *(int *)(v15 + 144152);
      *((_DWORD *)v17 + 36038) = v21;
      int v22 = *(_BYTE *)(v15 + 144172);
      if (v22)
      {
        int v23 = 0;
      }

      else
      {
        memcpy(v17 + 18022, (const void *)(v15 + 144176), (v21 >> 3) & 0x1FFFFFFFFFFFFFFCLL);
        int v23 = *(_DWORD *)(v15 + 144156);
      }

      *((_DWORD *)v17 + 36039) = v23;
      v17[18017] = *(void **)(v15 + 144136);
      *((_DWORD *)v17 + 36042) = *(_DWORD *)(v15 + 144168);
      *((_BYTE *)v17 + 144172) = v22;
    }

    else
    {
      uprv_free(v17);
      unsigned int v17 = 0LL;
    }
  }

  v2[9] = v17;
  if (!v2[7]) {
    goto LABEL_25;
  }
  return v2;
}

      uint64_t v5 = 0LL;
      goto LABEL_8;
    }

    BOOL v20 = 4 * v19;
  }

          uint64_t v24 = 0LL;
          goto LABEL_54;
        }
      }
    }

    else
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, _OWORD *, double))(*(void *)v11 + 120LL))( v11,  1LL,  v102,  a2))
      {
        uint64_t v25 = (UChar **)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v102);
        icu::TimeZoneRule::getName(v25, &v109);
        int v26 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v102);
        HIDWORD(v103) = icu::TimeZoneRule::getRawOffset(v26);
        BOOL v27 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v102);
        uint64_t v28 = icu::TimeZoneRule::getDSTSavings(v27);
        int v23 = 0LL;
        uint64_t v24 = 0LL;
LABEL_10:
        LODWORD(v103) = v28;
LABEL_54:
        v92 = (icu::InitialTimeZoneRule *)icu::UMemory::operator new(v21, (icu::UMemory *)0x50, v20);
        if (v92) {
          v92 = icu::InitialTimeZoneRule::InitialTimeZoneRule(v92, &v109, SHIDWORD(v103), v103);
        }
        *a3 = v92;
        if (v23 && v24)
        {
          v93 = icu::TimeZoneRule::getDSTSavings(v23);
          if (v93) {
            v94 = a5;
          }
          else {
            v94 = a4;
          }
          if (v93) {
            v95 = a4;
          }
          else {
            v95 = a5;
          }
          *v94 = v23;
          *v95 = (icu::AnnualTimeZoneRule *)v24;
        }

        goto LABEL_65;
      }

      (*(void (**)(uint64_t, void, char *, uint64_t *, UErrorCode *, double))(*(void *)v11 + 48LL))( v11,  0LL,  (char *)&v103 + 4,  &v103,  a6,  a2);
      uint64_t v21 = (uint64_t *)*(unsigned int *)a6;
      if ((int)v21 > 0)
      {
LABEL_65:
        icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)v102);
        icu::UnicodeString::~UnicodeString(v96, (icu::UnicodeString *)&v104);
        return icu::UnicodeString::~UnicodeString(v97, (icu::UnicodeString *)&v109);
      }
    }

    int v23 = 0LL;
    goto LABEL_25;
  }

  return this;
}

  if (v5 < 0x64 && v3 < 4) {
    int64_t v12 = 0;
  }
  else {
    int64_t v12 = v5;
  }
  sub_1808BDD5C(a3, a2, a1, v12, 0LL, 0LL);
  return v12 != 0;
}

  if (v9 < 0x64 && v6 < 4) {
    int v16 = 0;
  }
  else {
    int v16 = v9;
  }
  sub_1808BDD5C(a3, a2, a1, v16, 0LL, 0LL);
  return v16 != 0;
}

          if (!icu::ResourceTable::getKeyAndValue( (icu::ResourceTable *)v24,  v12++,  (const char **)&__s1,  a3)) {
            goto LABEL_26;
          }
        }

        int32_t v14 = 0LL;
        goto LABEL_15;
      }

  int32_t v14 = *v21;
  if (v14 != 45 && v14 != 43) {
    goto LABEL_32;
  }
  if ((sub_1808D7748(&v21, a3, 16, &v22) & 1) != 0) {
    return 0LL;
  }
  LOBYTE(v14) = *v21;
LABEL_32:
  if ((sub_1808D7748(&v21, a3, 16, &v22) & 1) != 0) {
    return 1LL;
  }
  while (1)
  {
    int v16 = v21;
    unsigned int v17 = *v21;
    int v19 = sub_1808D7748(&v21, a3, 16, &v22);
    uint64_t result = 1LL;
    if ((v19 & 1) != 0) {
      return result;
    }
  }

  uint64_t result = 1LL;
  if (v21 != a2 && (a4 & 1) == 0)
  {
    do
    {
      BOOL v20 = 0LL;
      while (byte_180A378BC[v20] != *v16)
      {
        uint64_t result = 0LL;
        if (++v20 == 6) {
          return result;
        }
      }

      ++v16;
      uint64_t result = 1LL;
    }

    while (v16 != a2);
  }

  return result;
}

  if (a3)
  {
    if (v23) {
      return -0.0;
    }
    return (double)-v16;
  }

  return (double)v16;
}

  if ((v7 & 1) == 0 || (v8 | 0x20) != 0x70 || (sub_1808D843C(&v19, a3, 16, &v20) & 1) != 0) {
    return 0LL;
  }
  int32_t v14 = *v19;
  if (v14 != 45 && v14 != 43) {
    goto LABEL_32;
  }
  if ((sub_1808D843C(&v19, a3, 16, &v20) & 1) != 0) {
    return 0LL;
  }
  int32_t v14 = *v19;
LABEL_32:
  if (v14 > 0x39 || v14 - 48 > 9) {
    return 0LL;
  }
  if ((sub_1808D843C(&v19, a3, 16, &v20) & 1) != 0) {
    return 1LL;
  }
  do
  {
    int v16 = *v19;
    if (v16 > 0x39 || v16 - 48 > 9) {
      break;
    }
    UErrorCode v18 = sub_1808D843C(&v19, a3, 16, &v20);
    uint64_t result = 1LL;
  }

  while ((v18 & 1) == 0);
  if ((a4 & 1) != 0) {
    return 1LL;
  }
  else {
    return sub_1808D8338(&v19, a2) ^ 1;
  }
}

    uint64_t v11 = v12;
  }

  icu::UnicodeString::doAppend((uint64_t)a5, a2, v11, (HIDWORD(v31) - v11));
  unsigned int v17 = *(unsigned int *)a6;
  UErrorCode v18 = HIDWORD(v31);
  int64_t v12 = v32;
  while (1)
  {
    int v19 = icu::UnicodeString::char32At((uint64_t *)v17, a2, v18);
    BOOL v20 = u_charDigitValue(v19);
    if ((v20 & 0x80000000) != 0) {
      break;
    }
    int v33 = word_180A3CB8E[v20];
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v33, 0, 1LL);
    if (v19 < 0x10000) {
      unsigned int v17 = 1LL;
    }
    else {
      unsigned int v17 = 2LL;
    }
    v18 += v17;
    if (v18 >= (int)v12)
    {
      int64_t v12 = v32;
      goto LABEL_25;
    }
  }

  if (*(int *)(a1 + 96) > 0)
  {
    int v22 = 41;
    icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v22, 0, 1LL);
  }

  icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)0xFFFFFFFFLL, 1, a3, (icu::UnicodeString *)&v23, a6);
  icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v23);
  icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v28);
  return this;
}

  uint64_t v11 = 65533;
LABEL_26:
  return 0LL;
}

LABEL_55:
    }

    int v42 = *(_DWORD *)(a5 + 8);
LABEL_54:
    *(_DWORD *)(*(void *)(a5 + 24) + 4LL * v42) = v22 + NativeIndex;
    ++*(_DWORD *)(a5 + 8);
    goto LABEL_55;
  }

  uint64_t v8 = 0LL;
LABEL_56:
  int v44 = *(_DWORD *)(a5 + 8);
  BOOL v38 = __OFSUB__(v44, 1);
  int v45 = v44 - 1;
  if (v45 < 0 != v38)
  {
    if (a4 <= 0) {
      return (v8 - 1);
    }
  }

  else if (*(_DWORD *)(*(void *)(a5 + 24) + 4LL * v45) >= a4)
  {
    *(_DWORD *)(a5 + 8) = v45;
    return (v8 - 1);
  }

  return v8;
}
    }

    int v42 = *(_DWORD *)(a5 + 8);
LABEL_54:
    *(_DWORD *)(*(void *)(a5 + 24) + 4LL * v42) = v22 + NativeIndex;
    ++*(_DWORD *)(a5 + 8);
    goto LABEL_55;
  }

  uint64_t v8 = 0LL;
LABEL_56:
  int v44 = *(_DWORD *)(a5 + 8);
  BOOL v38 = __OFSUB__(v44, 1);
  int v45 = v44 - 1;
  if (v45 < 0 != v38)
  {
    if (a4 <= 0) {
      return (v8 - 1);
    }
  }

  else if (*(_DWORD *)(*(void *)(a5 + 24) + 4LL * v45) >= a4)
  {
    *(_DWORD *)(a5 + 8) = v45;
    return (v8 - 1);
  }

  return v8;
}
    }

    int v42 = *(_DWORD *)(a5 + 8);
LABEL_54:
    *(_DWORD *)(*(void *)(a5 + 24) + 4LL * v42) = v22 + NativeIndex;
    ++*(_DWORD *)(a5 + 8);
    goto LABEL_55;
  }

  uint64_t v8 = 0LL;
LABEL_56:
  int v44 = *(_DWORD *)(a5 + 8);
  BOOL v38 = __OFSUB__(v44, 1);
  int v45 = v44 - 1;
  if (v45 < 0 != v38)
  {
    if (a4 <= 0) {
      return (v8 - 1);
    }
  }

  else if (*(_DWORD *)(*(void *)(a5 + 24) + 4LL * v45) >= a4)
  {
    *(_DWORD *)(a5 + 8) = v45;
    return (v8 - 1);
  }

  return v8;
}

            uint64_t v11 = v21;
            if (v21 < v4) {
              continue;
            }
          }

          break;
        }

        uint64_t v28 = *((_DWORD *)this + 202);
        if (v28)
        {
          uint64_t v29 = v28 - 1;
          if (v28 < 1)
          {
            LOWORD(v30) = 0;
          }

          else
          {
            *((_DWORD *)this + 202) = v29;
            int v30 = *(_DWORD *)(*((void *)this + 103) + 4LL * v29);
            if (v28 != 1)
            {
              v28 -= 2;
              *((_DWORD *)this + 202) = v28;
              UChar32 v31 = *(_DWORD *)(*((void *)this + 103) + 4LL * v28);
              goto LABEL_63;
            }

            uint64_t v28 = 0;
          }

          UChar32 v31 = 0;
LABEL_63:
          int v32 = *((_DWORD *)this + 4);
          int v33 = ((_BYTE)v32 - 1) & 0x7F;
          if (v33 == *((_DWORD *)this + 5)) {
            *((_DWORD *)this + 5) = ((_BYTE)v32 + 126) & 0x7F;
          }
          *((_DWORD *)this + ((v32 - 1) & 0x7F) + 8) = v31;
          *((_WORD *)this + ((v32 - 1) & 0x7F) + 272) = v30;
          *((_DWORD *)this + 4) = v33;
          *((_DWORD *)this + 6) = v31;
          *((_DWORD *)this + 7) = v33;
          if (!v28) {
            return 1LL;
          }
          int v35 = *((_DWORD *)this + 4);
          UChar32 v34 = *((_DWORD *)this + 5);
          while (2)
          {
            int v36 = v28 - 1;
            if (v28 < 1)
            {
              LOWORD(v37) = 0;
              goto LABEL_69;
            }

            *((_DWORD *)this + 202) = v36;
            int v37 = *(_DWORD *)(*((void *)this + 103) + 4LL * v36);
            if (v28 == 1)
            {
              uint64_t v28 = 0;
LABEL_69:
              BOOL v38 = 0;
            }

            else
            {
              v28 -= 2;
              *((_DWORD *)this + 202) = v28;
              BOOL v38 = *(_DWORD *)(*((void *)this + 103) + 4LL * v28);
            }

            int v39 = ((_BYTE)v35 - 1) & 0x7F;
            if (v39 == v34)
            {
              if (*((_DWORD *)this + 7) == v34) {
                return 1LL;
              }
              UChar32 v34 = ((_BYTE)v35 + 126) & 0x7F;
              *((_DWORD *)this + 5) = v34;
            }

            *((_DWORD *)this + ((v35 - 1) & 0x7F) + 8) = v38;
            *((_WORD *)this + ((v35 - 1) & 0x7F) + 272) = v37;
            *((_DWORD *)this + 4) = v39;
            LOBYTE(v35) = (v35 - 1) & 0x7F;
            if (!v28) {
              return 1LL;
            }
            continue;
          }
        }

        return 0LL;
      }
    }
  }

  int v7 = v40[0];
  BOOL v6 = v40[1];
  uint64_t v8 = *((_DWORD *)this + 4);
  uint64_t v9 = ((_BYTE)v8 - 1) & 0x7F;
  if (v9 == *((_DWORD *)this + 5)) {
    *((_DWORD *)this + 5) = ((_BYTE)v8 + 126) & 0x7F;
  }
  *((_DWORD *)this + ((v8 - 1) & 0x7F) + 8) = v6;
  *((_WORD *)this + ((v8 - 1) & 0x7F) + 272) = v7;
  *((_DWORD *)this + 4) = v9;
  *((_DWORD *)this + 6) = v6;
  *((_DWORD *)this + 7) = v9;
  return 1LL;
}

            LODWORD(v55) = v30;
            goto LABEL_56;
          }

          uint64_t v5 = (v5 + 1);
        }
      }

        uint64_t v25 = *((void *)this + 6);
        *(_DWORD *)(v25 + 4LL * v8) = 1114112;
        *((void *)this + 2) = v25;
        *((void *)this + 6) = v9;
        LODWORD(v25) = *((_DWORD *)this + 6);
        *((_DWORD *)this + 6) = *((_DWORD *)this + 14);
        *((_DWORD *)this + 7) = v8 + 1;
        *((_DWORD *)this + 14) = v25;
        int v26 = (void *)*((void *)this + 8);
        if (v26)
        {
          uprv_free(v26);
          *((void *)this + 8) = 0LL;
          *((_DWORD *)this + 18) = 0;
        }

        return;
      case 3:
        if (v11 <= v10)
        {
          if (v10 == 1114112) {
            goto LABEL_55;
          }
        }

        else
        {
          uint64_t v10 = v11;
          if (v11 == 1114112) {
            goto LABEL_55;
          }
        }

        a4 = 0;
        *(_DWORD *)(*((void *)this + 6) + 4LL * v8++) = v10;
        uint64_t v10 = v9[v12++];
        goto LABEL_34;
      default:
        continue;
    }
  }

      if (v13 >= a3) {
        return u_terminateUChars(a4, a5, v14, a8);
      }
    }

    uint64_t v25 = 4;
    goto LABEL_23;
  }

  int32_t v14 = 0LL;
  return u_terminateUChars(a4, a5, v14, a8);
}

      uint64_t v13 = *(_DWORD *)(v6 + 12);
      goto LABEL_56;
    }

    if ((v7 & 0x8000) != 0)
    {
      int32_t v14 = *(_DWORD *)(v6 + 12);
      if ((int)v9 < v14)
      {
LABEL_30:
        if (v14 > v9)
        {
          if ((v7 & 2) != 0) {
            int v16 = v6 + 10;
          }
          else {
            int v16 = *(void *)(v6 + 24);
          }
          unsigned int v17 = *(unsigned __int16 *)(v16 + 2LL * (int)v9) == 42;
          else {
            int64_t v12 = 15;
          }
          if (v17) {
            LODWORD(v9) = v5 + 2;
          }
          return v12 | (((_DWORD)v9 - v5) << 8);
        }
      }
    }

    else if ((int)v9 < (int)(v7 >> 5))
    {
      int32_t v14 = v7 >> 5;
      goto LABEL_30;
    }

    int64_t v12 = 15;
    return v12 | (((_DWORD)v9 - v5) << 8);
  }

  return 0xFFFFFFFFLL;
}

  if (v12 != 48)
  {
    uint64_t v58 = a4;
    v59 = v16;
    v60 = a5;
    LOBYTE(v22) = 0;
LABEL_57:
    v61 = 0;
    int v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    while (1)
    {
      int v26 = *(unsigned __int16 **)v65;
      BOOL v27 = (unsigned __int16)**(_WORD **)v65;
      if ((v27 - 48) > 9)
      {
        int v22 = (v25 != 0) & v22;
        if (v27 != 46)
        {
          uint64_t v28 = 0;
          goto LABEL_96;
        }

        if (v22 && (v10 & 4) == 0) {
          return a1[2];
        }
        if ((v22 & 1) == 0)
        {
          __int128 v57 = *((unsigned __int16 *)a1 + 20);
          if (sub_1808D843C((unsigned __int16 **)v65, v57, 10, &v64))
          {
            uint64_t v28 = 0;
            if (v25 || v12 == 48) {
              goto LABEL_67;
            }
            return a1[2];
          }

          if (v25 || **(_WORD **)v65 != 48)
          {
            uint64_t v28 = 0;
            goto LABEL_144;
          }

          uint64_t v28 = 0;
          do
          {
            if (sub_1808D843C((unsigned __int16 **)v65, v57, 10, &v64))
            {
              *v60 = (*(void *)v65 - (void)a2) >> 1;
              int v35 = v59 == 0;
              goto LABEL_75;
            }

            --v28;
          }

          while (**(_WORD **)v65 == 48);
LABEL_144:
          while (1)
          {
            int v26 = *(unsigned __int16 **)v65;
            BOOL v27 = (unsigned __int16)**(_WORD **)v65;
            if (v25 > 771)
            {
              v61 |= v27 != 48;
            }

            else
            {
              v66[v23++] = v27;
              ++v25;
              --v28;
            }
          }

    int v4 = 0LL;
    *a3 = 7;
LABEL_56:
    uprv_free(v11);
  }

  if (v8) {
    ures_close(v8);
  }
  return v4;
}

      int v40 = *((void *)v11 + 80) + 16LL * v20;
      UChar32 v41 = *(_DWORD *)(v40 + 4);
      int v42 = (void *)*(unsigned __int16 *)(v40 + 8);
      uint64_t v13 = v41 + (_DWORD)v42;
      uint64_t result = (char *)icu::UnicodeString::~UnicodeString(v42, (icu::UnicodeString *)v75);
      a8 = 0LL;
      LODWORD(v10) = v20;
    }

    while (*(int *)a9 < 1);
  }

  return result;
}

                    uint64_t v28 = 0LL;
                    *a5 = U_MEMORY_ALLOCATION_ERROR;
                  }

  memset(v31, 0, sizeof(v31));
  *(void *)int v32 = 0LL;
  v29[1] = 0LL;
  *(void *)int v30 = (char *)v31 + 5;
  LODWORD(v31[0]) = 40;
  v29[0] = 0LL;
  icu::CharStringByteSink::CharStringByteSink(v29, (uint64_t)v30);
  ulocimp_getKeywordValue(__s, "collation", (uint64_t)v29, (int *)a5);
  sub_1809810FC((icu::CharString *)v35, 75, *(char **)v30, v32[0], a5);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v29);
  if (BYTE4(v31[0])) {
    uprv_free(*(void **)v30);
  }
  Language = uloc_getLanguage((uint64_t)__s, (char *)v33, 100, (int *)a5);
  if (Language)
  {
    int v22 = Language;
    int v23 = (char *)v33;
  }

  else
  {
    int v23 = "root";
    int v22 = 4;
  }

  sub_1809810FC((icu::CharString *)v35, 76, v23, v22, a5);
  if ((*((_BYTE *)this + 264) & 0x10) != 0)
  {
    else {
      uint64_t v24 = -1;
    }
    sub_180981074((icu::CharString *)v35, 78, v24, a5);
  }

  Country = uloc_getCountry((uint64_t)__s, (char *)v33, 100, (int *)a5);
  sub_1809810FC((icu::CharString *)v35, 82, (char *)v33, Country, a5);
  if ((*((_BYTE *)this + 264) & 0x20) != 0)
  {
    else {
      int v26 = -1;
    }
    sub_180981074((icu::CharString *)v35, 83, v26, a5);
  }

  Variant = uloc_getVariant(__s, (char *)v33, 100, (int *)a5);
  sub_1809810FC((icu::CharString *)v35, 86, (char *)v33, Variant, a5);
  uint64_t Script = uloc_getScript((uint64_t)__s, (char *)v33, 100, (int *)a5);
  sub_1809810FC((icu::CharString *)v35, 90, (char *)v33, Script, a5);
  else {
    uint64_t v5 = 0LL;
  }
  if (BYTE4(v35[1])) {
    uprv_free(v35[0]);
  }
  return v5;
}

      *a2 = U_MEMORY_ALLOCATION_ERROR;
      icu::SimpleTimeZone::deleteTransitionRules(v2);
      return (icu::SimpleTimeZone *)icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v76);
    }
  }

  return this;
}

void *sub_1807C6DDC(void *a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  BOOL v6 = sub_1807BE4E4(a1);
  void *v6 = off_18970B478;
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(v6 + 1));
  *a1 = off_18970B550;
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 26));
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 51));
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 76));
  a1[101] = a2;
  icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 51), 0x1000u, 0x102Au);
  icu::UnicodeString::UnicodeString((uint64_t)v8, (uint64_t)L"[[:Mymr:]&[:LineBreak=SA:]]");
  icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 26), (const icu::UnicodeString *)v8, a3);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v8);
  icu::UnicodeString::UnicodeString((uint64_t)v8, (uint64_t)L"[[:Mymr:]&[:LineBreak=SA:]&[:M:]]");
  icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 76), (const icu::UnicodeString *)v8, a3);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v8);
  icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 76), 0x20u);
  icu::UnicodeSet::compact((icu::UnicodeSet *)(a1 + 76));
  icu::UnicodeSet::compact((icu::UnicodeSet *)(a1 + 26));
  icu::UnicodeSet::compact((icu::UnicodeSet *)(a1 + 51));
  return a1;
}

void sub_1807C6F38(void *a1)
{
  *a1 = off_18970B550;
  uint64_t v2 = a1[101];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 76));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 51));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 26));
  *a1 = off_18970B478;
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 1));
  icu::UObject::~UObject((icu::UObject *)a1);
}

void sub_1807C6FA8(void *a1)
{
}

uint64_t sub_1807C6FBC(uint64_t *a1, UText *a2, int a3, int a4, uint64_t a5, uint64_t a6, int *a7)
{
  uint64_t v53 = *MEMORY[0x1895F89C0];
  if (*a7 > 0 || a4 - a3 < 4) {
    return 0LL;
  }
  bzero(v52, 0x21CuLL);
  for (uint64_t i = 0LL; i != 135; i += 45LL)
  {
    int v16 = &v52[i];
    *(_OWORD *)int v16 = xmmword_1809DDEE0;
    v16[4] = 0;
  }

  utext_setNativeIndex(a2, a3);
  if (*a7 <= 0)
  {
    uint64_t v8 = 0LL;
    uint64_t v47 = a5;
    int v50 = a7;
    while (1)
    {
      int NativeIndex = utext_getNativeIndex(a2);
      if (NativeIndex >= a4) {
        goto LABEL_56;
      }
      unsigned int v17 = v8 % 3;
      UErrorCode v18 = &v52[45 * (v8 % 3)];
      int v19 = sub_1807C5BD4(v18, a2, a1[101], a4);
      if (v19 == 1)
      {
        BOOL v20 = &v52[45 * v17];
        utext_setNativeIndex(a2, (int)v20[v20[3] + 5] + (uint64_t)(int)v20[2]);
        uint64_t v21 = (int)v20[3];
        int v22 = v20[v21 + 5];
        int v23 = v20[v21 + 25];
        uint64_t v8 = (v8 + 1);
      }

      else if (v19 < 2)
      {
        int v22 = 0;
        int v23 = 0;
      }

      else
      {
        uint64_t v24 = (v8 + 1);
        if (utext_getNativeIndex(a2) < a4)
        {
          uint64_t v25 = &v52[45 * v17];
          int v48 = v25 + 3;
          int v49 = v25 + 4;
          int v26 = &v52[45 * (((int)v8 + 2) % 3u)];
          while ((int)sub_1807C5BD4(&v52[45 * (v24 % 3)], a2, a1[101], a4) < 1)
          {
LABEL_21:
          }

          *int v48 = *v49;
          if ((int)utext_getNativeIndex(a2) < a4)
          {
            while (!sub_1807C5BD4(v26, a2, a1[101], a4))
            {
            }

            *int v48 = *v49;
          }
        }

void *sub_1807C7514(void *a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  BOOL v6 = sub_1807BE4E4(a1);
  void *v6 = off_18970B478;
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(v6 + 1));
  *a1 = off_18970B598;
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 26));
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 51));
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 76));
  a1[101] = a2;
  uint64_t v9 = 0LL;
  memset(v8, 0, sizeof(v8));
  icu::UnicodeString::UnicodeString((uint64_t)v10, (uint64_t)L"[[:Khmr:]&[:LineBreak=SA:]]");
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v8, (const icu::UnicodeString *)v10, a3);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v10);
  icu::UnicodeString::UnicodeString((uint64_t)v10, (uint64_t)L"[[:Khmr:]&[:LineBreak=SA:]&[:M:]]");
  icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 76), (const icu::UnicodeString *)v10, a3);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v10);
  icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 76), 0x20u);
  icu::UnicodeSet::operator=((icu::UnicodeSet *)(a1 + 26), (const icu::UnicodeSet *)v8);
  icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 51), 0x1780u, 0x17B3u);
  icu::UnicodeSet::remove((icu::UnicodeSet *)(a1 + 26), 0x17D2u);
  icu::UnicodeSet::compact((icu::UnicodeSet *)(a1 + 76));
  icu::UnicodeSet::compact((icu::UnicodeSet *)(a1 + 26));
  icu::UnicodeSet::compact((icu::UnicodeSet *)(a1 + 51));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v8);
  return a1;
}

void sub_1807C76B8(void *a1)
{
  *a1 = off_18970B598;
  uint64_t v2 = a1[101];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 76));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 51));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 26));
  *a1 = off_18970B478;
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 1));
  icu::UObject::~UObject((icu::UObject *)a1);
}

void sub_1807C7728(void *a1)
{
}

uint64_t sub_1807C773C(uint64_t *a1, UText *a2, int a3, int a4, uint64_t a5, uint64_t a6, int *a7)
{
  uint64_t v53 = *MEMORY[0x1895F89C0];
  if (*a7 > 0 || a4 - a3 < 4) {
    return 0LL;
  }
  bzero(v52, 0x21CuLL);
  for (uint64_t i = 0LL; i != 135; i += 45LL)
  {
    int v16 = &v52[i];
    *(_OWORD *)int v16 = xmmword_1809DDEE0;
    v16[4] = 0;
  }

  utext_setNativeIndex(a2, a3);
  if (*a7 <= 0)
  {
    uint64_t v8 = 0LL;
    uint64_t v47 = a5;
    int v50 = a7;
    while (1)
    {
      int NativeIndex = utext_getNativeIndex(a2);
      if (NativeIndex >= a4) {
        goto LABEL_56;
      }
      unsigned int v17 = v8 % 3;
      UErrorCode v18 = &v52[45 * (v8 % 3)];
      int v19 = sub_1807C5BD4(v18, a2, a1[101], a4);
      if (v19 == 1)
      {
        BOOL v20 = &v52[45 * v17];
        utext_setNativeIndex(a2, (int)v20[v20[3] + 5] + (uint64_t)(int)v20[2]);
        uint64_t v21 = (int)v20[3];
        int v22 = v20[v21 + 5];
        int v23 = v20[v21 + 25];
        uint64_t v8 = (v8 + 1);
      }

      else if (v19 < 2)
      {
        int v22 = 0;
        int v23 = 0;
      }

      else
      {
        uint64_t v24 = (v8 + 1);
        if ((int)utext_getNativeIndex(a2) < a4)
        {
          uint64_t v25 = &v52[45 * v17];
          int v48 = v25 + 3;
          int v49 = v25 + 4;
          int v26 = &v52[45 * (((int)v8 + 2) % 3u)];
          while ((int)sub_1807C5BD4(&v52[45 * (v24 % 3)], a2, a1[101], a4) < 1)
          {
LABEL_21:
          }

          *int v48 = *v49;
          if ((int)utext_getNativeIndex(a2) < a4)
          {
            while (!sub_1807C5BD4(v26, a2, a1[101], a4))
            {
            }

            *int v48 = *v49;
          }
        }

int32x2_t *sub_1807C7C8C(int32x2_t *a1, uint64_t a2, int a3, icu::Normalizer2 *a4)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  uint64_t v8 = sub_1807BE4E4(a1);
  *uint64_t v8 = off_18970B478;
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(v8 + 1));
  *a1 = (int32x2_t)off_18970B5E0;
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&a1[26]);
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&a1[51]);
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&a1[76]);
  a1[101] = (int32x2_t)a2;
  a1[104].i8[0] = 0;
  a1[105] = 0LL;
  LODWORD(v12[0]) = 0;
  uhash_init(a1 + 106, (uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0LL, (int *)v12);
  if (SLODWORD(v12[0]) <= 0)
  {
    a1[105] = (int32x2_t)&a1[106];
    uhash_setKeyDeleter((uint64_t)&a1[106], (uint64_t)uprv_deleteUObject);
  }

  a1[103] = 0LL;
  a1[102] = (int32x2_t)icu::Normalizer2::getNFKCInstance(a4, v9);
  icu::UnicodeString::UnicodeString((uint64_t)v12, (uint64_t)L"[\\uac00-\\ud7a3]");
  icu::UnicodeSet::applyPattern((icu::UnicodeSet *)&a1[26], (const icu::UnicodeString *)v12, (UErrorCode *)a4);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v12);
  icu::UnicodeSet::compact((icu::UnicodeSet *)&a1[26]);
  icu::UnicodeString::UnicodeString((uint64_t)v12, (uint64_t)L"[[:Nd:][:Pi:][:Ps:][:Alphabetic:]]");
  icu::UnicodeSet::applyPattern((icu::UnicodeSet *)&a1[51], (const icu::UnicodeString *)v12, (UErrorCode *)a4);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v12);
  icu::UnicodeSet::compact((icu::UnicodeSet *)&a1[51]);
  icu::UnicodeString::UnicodeString((uint64_t)v12, (uint64_t)"[");
  icu::UnicodeSet::applyPattern((icu::UnicodeSet *)&a1[76], (const icu::UnicodeString *)v12, (UErrorCode *)a4);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v12);
  icu::UnicodeSet::compact((icu::UnicodeSet *)&a1[76]);
  if (a3)
  {
    uint64_t v13 = 0LL;
    memset(v12, 0, sizeof(v12));
    icu::UnicodeString::UnicodeString( (uint64_t)v11,  (uint64_t)L"[[:Han:][:Hiragana:][:Katakana:]\\u30fc\\uff70\\uff9e\\uff9f]");
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v12, (const icu::UnicodeString *)v11, (UErrorCode *)a4);
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v11);
    a1[104].i8[0] = 1;
    if (*(int *)a4 <= 0)
    {
      (*(void (**)(int32x2_t *, _OWORD *))(*(void *)a1 + 40LL))(a1, v12);
      sub_1807C9270((uint64_t)a1, (UErrorCode *)a4);
      sub_1807C93C8((uint64_t)a1, (UErrorCode *)a4);
    }

    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v12);
  }

  else if (*(int *)a4 <= 0)
  {
    (*(void (**)(int32x2_t *, int32x2_t *))(*(void *)a1 + 40LL))(a1, a1 + 26);
  }

  return a1;
}

void sub_1807C7EF8(void *a1)
{
  *a1 = off_18970B5E0;
  uint64_t v2 = a1[101];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = a1[103];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  int v4 = (_BYTE *)a1[105];
  if (v4) {
    uhash_close(v4);
  }
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 76));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 51));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 26));
  *a1 = off_18970B478;
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 1));
  icu::UObject::~UObject((icu::UObject *)a1);
}

void sub_1807C7F88(void *a1)
{
}

uint64_t sub_1807C7F9C(uint64_t a1, UText *ut, int a3, int a4, uint64_t a5, int a6, UErrorCode *a7)
{
  uint64_t v8 = 0LL;
  uint64_t v185 = *MEMORY[0x1895F89C0];
  BOOL v9 = __OFSUB__(a4, a3);
  int v10 = a4 - a3;
  if (!((v10 < 0) ^ v9 | (v10 == 0)) && *(int *)a7 <= 0)
  {
    int v14 = a3;
    uint64_t v15 = ut;
    __int128 v181 = 0u;
    uint64_t v184 = 0LL;
    __int128 v183 = 0u;
    __int128 v182 = 0u;
    v180 = off_18971B688;
    LOWORD(v181) = 2;
    v170 = 0LL;
    if ((ut->providerProperties & 4) != 0)
    {
      int64_t chunkNativeStart = ut->chunkNativeStart;
      int64_t v17 = a3;
      if (chunkNativeStart <= a3 && v15->chunkNativeLimit >= a4 && a4 - chunkNativeStart <= v15->nativeIndexingLimit)
      {
        int v154 = a4;
        v169 = &v15->chunkContents[a3 - chunkNativeStart];
        icu::UnicodeString::setTo((icu::UnicodeString *)&v180, 0, &v169, v10);
        goto LABEL_33;
      }
    }

    else
    {
      int64_t v17 = a3;
    }

    utext_setNativeIndex(v15, v17);
    int v20 = a4;
    if (utext_nativeLength(v15) < a4) {
      int v20 = utext_nativeLength(v15);
    }
    uint64_t v21 = (icu::UVector32 *)icu::UMemory::operator new((icu::UMemory *)0x20, v19);
    if (!v21)
    {
      if (*(int *)a7 <= 0)
      {
        uint64_t v8 = 0LL;
        *a7 = U_MEMORY_ALLOCATION_ERROR;
LABEL_336:
        icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v180);
        return v8;
      }

      goto LABEL_230;
    }

    int v22 = icu::UVector32::UVector32(v21, a7);
    if (*(int *)a7 <= 0)
    {
      v170 = v22;
    }

    else
    {
      (*(void (**)(icu::UVector32 *))(*(void *)v22 + 8LL))(v22);
    }

    int v155 = a6;
    uint64_t v23 = a5;
    int v24 = v14;
    int v154 = a4;
    uint64_t v25 = a1;
    if (utext_getNativeIndex(v15) < v20)
    {
      do
      {
        int NativeIndex = utext_getNativeIndex(v15);
        UChar32 v27 = utext_next32(v15);
        icu::UnicodeString::append((uint64_t)&v180, v27);
        while (1)
        {
          uint64_t v29 = (int *)((char *)v170 + 8);
          int v28 = *((_DWORD *)v170 + 2);
          int v30 = (unsigned __int16)v181 >> 5;
          if ((v181 & 0x8000u) != 0LL) {
            int v30 = DWORD1(v181);
          }
          if (v28 >= v30) {
            break;
          }
          if (v28 >= -1 && *((_DWORD *)v170 + 3) > v28)
          {
LABEL_26:
            *(_DWORD *)(*((void *)v170 + 3) + 4LL * v28) = NativeIndex;
            ++*v29;
          }

          else if (icu::UVector32::expandCapacity(v170, v28 + 1, a7))
          {
            int v28 = *v29;
            goto LABEL_26;
          }
        }

        uint64_t v15 = ut;
      }

      while (utext_getNativeIndex(ut) < v20);
    }

    UChar32 v31 = v170;
    int v32 = *((_DWORD *)v170 + 2);
    a1 = v25;
    int v14 = v24;
    a5 = v23;
    a6 = v155;
    if (v32 < -1 || *((_DWORD *)v170 + 3) <= v32)
    {
      int v32 = *((_DWORD *)v170 + 2);
    }

    *(_DWORD *)(*((void *)v170 + 3) + 4LL * v32) = v20;
    ++*((_DWORD *)v31 + 2);
LABEL_33:
    if ((*(unsigned int (**)(void, void (***)(icu::UnicodeString *__hidden), UErrorCode *))(**(void **)(a1 + 816) + 88LL))( *(void *)(a1 + 816),  &v180,  a7))
    {
LABEL_34:
      int v156 = a6;
      uint64_t v34 = icu::UnicodeString::countChar32((icu::UnicodeString *)&v180, 0, 0x7FFFFFFF);
      uint64_t v36 = v34;
      int v37 = (unsigned __int16)v181 >> 5;
      if ((v181 & 0x8000u) != 0LL) {
        int v37 = DWORD1(v181);
      }
      if ((_DWORD)v34 == v37)
      {
LABEL_37:
        memset(v172, 0, 32);
        icu::UVector32::UVector32((icu::UVector32 *)v172, v36 + 1, a7);
        int v38 = *(_DWORD *)&v172[8];
        if (*(int *)&v172[8] < -1 || *(int *)&v172[12] <= *(int *)&v172[8])
        {
          int v38 = *(_DWORD *)&v172[8];
        }

        *(_DWORD *)(*(void *)&v172[24] + 4LL * v38) = 0;
        ++*(_DWORD *)&v172[8];
LABEL_42:
        if ((int)v36 >= 1)
        {
          int v39 = v36;
          while (1)
          {
            int v40 = *(_DWORD *)&v172[8];
LABEL_52:
            if (!--v39) {
              goto LABEL_53;
            }
          }

          int v40 = *(_DWORD *)&v172[8];
LABEL_51:
          *(_DWORD *)(*(void *)&v172[24] + 4LL * v40) = -1;
          ++*(_DWORD *)&v172[8];
          goto LABEL_52;
        }

LABEL_53:
        __int128 v167 = 0u;
        __int128 v168 = 0u;
        icu::UVector32::UVector32((icu::UVector32 *)&v167, v36 + 1, a7);
        if ((v36 & 0x80000000) == 0)
        {
          int v42 = v36 + 1;
          while (1)
          {
            int v43 = DWORD2(v167);
            if (SDWORD2(v167) >= -1 && SHIDWORD(v167) > SDWORD2(v167)) {
              goto LABEL_62;
            }
LABEL_63:
            if (!--v42) {
              goto LABEL_64;
            }
          }

          int v43 = DWORD2(v167);
LABEL_62:
          *(_DWORD *)(*((void *)&v168 + 1) + 4LL * v43) = -1;
          ++DWORD2(v167);
          goto LABEL_63;
        }

      if ((_DWORD)result) {
        goto LABEL_21;
      }
LABEL_54:
      int v40 = 0LL;
      UChar32 v41 = 0LL;
      int v42 = 0;
      uint64_t v23 = *(unsigned __int8 *)(v6 + 160);
      if (v23 == 1 || (v21 != 128 || v23 >= 0x10) && v21 != 130 && (v21 != 129 || v23 < 0x10)) {
        goto LABEL_55;
      }
      uint64_t v25 = *(unsigned __int8 *)(v6 + 161);
      if (v25 <= 0xF)
      {
        uint64_t result = sub_18082EFB0(v6, 1u, v10, &v38, &v39, (uint64_t)&v40);
        if ((_DWORD)result) {
          goto LABEL_21;
        }
        uint64_t result = sub_18082EFB0(v6, 0, v10, &v38, &v39, (uint64_t)&v40);
        if ((_DWORD)result) {
          goto LABEL_21;
        }
        uint64_t v25 = *(unsigned __int8 *)(v6 + 161);
      }

      uint64_t result = sub_18082EFB0(v6, v25, v10, &v38, &v39, (uint64_t)&v40);
      if (!(_DWORD)result)
      {
LABEL_55:
        int v24 = *(unsigned __int8 *)(v6 + 161);
        if (*(_BYTE *)(v6 + 161) && (v21 == 128 && v24 < 0x10 || v21 == 130 || v21 == 129 && v24 >= 0x10))
        {
          uint64_t result = sub_18082EFB0(v6, v24, v10, &v38, &v39, (uint64_t)&v40);
          if ((_DWORD)result)
          {
LABEL_79:
            if (!(_DWORD)result) {
              goto LABEL_89;
            }
            goto LABEL_21;
          }
        }

        else
        {
          uint64_t result = 0LL;
        }

        if (v39)
        {
          if (v21 != 128 || v39 >= 0x10u)
          {
            int v26 = v21 == 129 && v39 > 0xFu;
            UChar32 v27 = v26;
            if (v21 != 130 && !v27)
            {
LABEL_89:
              unint64_t v35 = v7;
              if (v21 == 129) {
                int v28 = 16LL;
              }
              else {
                int v28 = 1LL;
              }
              if ((((_BYTE)v21 + 127) & 0xFE) != 0) {
                uint64_t v29 = 11LL;
              }
              else {
                uint64_t v29 = 19LL;
              }
              if (v29 >= v28)
              {
                do
                {
                  int v30 = *(void *)(v6 + 8 * v28);
                  if (v30)
                  {
                    if (*((_BYTE *)&v40 + v28)) {
                      int v30 = 0LL;
                    }
                    else {
                      int v30 = sub_18082EFB0(v6, v28, v10, &v38, &v39, (uint64_t)&v40);
                    }
                  }

                  UChar32 v31 = v30 == 0;
                  if (v28 >= v29) {
                    break;
                  }
                  ++v28;
                }

                while (!(_DWORD)v30);
              }

              else
              {
                int v30 = 0LL;
                UChar32 v31 = 1;
              }

              if (v21 == 129)
              {
                int v7 = v35;
              }

              else
              {
                int v7 = v35;
                if (v31) {
                  int v30 = sub_18082EFB0(v6, 0, v10, &v38, &v39, (uint64_t)&v40);
                }
              }

              uint64_t result = v30;
              if (!(_DWORD)v30)
              {
                int v32 = v38;
                unint64_t v33 = HIBYTE(v38);
                *(_BYTE *)int v10 = 20;
                if (v32) {
                  uint64_t v34 = v33;
                }
                else {
                  uint64_t v34 = -10;
                }
                if (!v32) {
                  int v32 = v33;
                }
                *((_BYTE *)v10 + 1) = v34;
                *((_BYTE *)v10 + 2) = v32;
                uint64_t result = v10 - &v36 + 3;
              }

              goto LABEL_21;
            }
          }

          uint64_t result = sub_18082EFB0(v6, v39, v10, &v38, &v39, (uint64_t)&v40);
        }

        goto LABEL_79;
      }

    int v42 = U_ZERO_ERROR;
    goto LABEL_54;
  }

  BOOL v6 = 0LL;
LABEL_64:
  if (v14) {
    ures_close(v14);
  }
  if (v13) {
    ures_close(v13);
  }
  if (BYTE4(v46[1])) {
    uprv_free(v46[0]);
  }
  return v6;
}

    if ((v47 & 0x2000) != 0)
    {
      BOOL v48 = *(_DWORD *)a2 + *(_DWORD *)(a2 + 4);
      uint64_t v49 = *(_DWORD *)(a3 + 8);
      int v50 = v48 <= 2 * v49;
      BOOL v51 = v48 <= 2 * v49 ? v47 : v47 & 0xFFFFCFFF;
      if (!v50 || (v51 & 0x20) == 0)
      {
        if ((v51 & 0x20) == 0) {
          v51 &= ~0x2000u;
        }
        LODWORD(v68) = v51;
      }
    }

    uprv_decNumberCopy(a1, v18);
    goto LABEL_64;
  }

  LODWORD(v68) = 16;
LABEL_65:
  if (v12) {
    uprv_free(v12);
  }
  if (v18) {
    uprv_free(v18);
  }
  if (v20) {
    uprv_free(v20);
  }
LABEL_71:
  int v14 = v68;
  if ((_DWORD)v68) {
    goto LABEL_72;
  }
  return a1;
}

        UErrorCode v18 = 1;
LABEL_54:
        uint64_t v25 = (char *)(a1 + 9);
        if (v9 <= 49) {
          BOOL v9 = byte_180A37148[v9];
        }
        sub_1808CE154(v25, v9, (unsigned __int8 *)&unk_180A37244, 1, 0, (char *)(a1 + 9), v18);
        return;
      }

LABEL_64:
        int v151 = v36 + 1;
        uint64_t v152 = a5;
        uint64_t v158 = a1;
        __int128 v165 = 0u;
        __int128 v166 = 0u;
        icu::UVector32::UVector32((icu::UVector32 *)&v165, v36, a7);
        icu::UVector32::setSize((icu::UVector32 *)&v165, v36);
        __int128 v163 = 0u;
        __int128 v164 = 0u;
        icu::UVector32::UVector32((icu::UVector32 *)&v163, v36, a7);
        icu::UVector32::setSize((icu::UVector32 *)&v163, v36);
        memset(&v171, 0, sizeof(v171));
        v171.magic = 878368812;
        v171.int sizeOfStruct = 144;
        utext_openUnicodeString(&v171, (uint64_t)&v180, a7);
        if ((int)v36 >= 1)
        {
          uint64_t v45 = 0LL;
          BOOL v46 = 0LL;
          int v47 = 0;
          v157 = (icu::UnicodeSet *)(a1 + 208);
          uint64_t v159 = v36;
          do
          {
            BOOL v48 = *(int *)&v172[8] >= 1 && v45 < *(int *)&v172[8];
            if (v48 && *(_DWORD *)(*(void *)&v172[24] + 4 * v45) == -1)
            {
              BOOL v62 = v46;
            }

            else
            {
              utext_setNativeIndex(&v171, v47);
              uint64_t v49 = v36;
              int v50 = (*(uint64_t (**)(void, UText *, uint64_t, uint64_t, void, void, void, void))(**(void **)(v158 + 808) + 16LL))( *(void *)(v158 + 808),  &v171,  20LL,  v36,  0LL,  *((void *)&v164 + 1),  *((void *)&v166 + 1),  0LL);
              if (v50) {
                BOOL v51 = SDWORD2(v163) < 1;
              }
              else {
                BOOL v51 = 1;
              }
              if (v51 || **((_DWORD **)&v164 + 1) != 1)
              {
                int v52 = icu::UnicodeString::char32At((icu::UnicodeString *)&v180, v47);
                if (!icu::UnicodeSet::contains(v157, v52))
                {
                  icu::UVector32::setElementAt((uint64_t)&v165, 255, v50);
                  icu::UVector32::setElementAt((uint64_t)&v163, 1, v50++);
                }
              }

              if (v50 >= 1)
              {
                uint64_t v53 = 0LL;
                uint64_t v54 = v50;
                do
                {
                  else {
                    int v55 = *(_DWORD *)(*(void *)&v172[24] + 4 * v45);
                  }
                  if (SDWORD2(v165) >= 1 && v53 < SDWORD2(v165)) {
                    int v57 = *(_DWORD *)(*((void *)&v166 + 1) + 4 * v53);
                  }
                  else {
                    int v57 = 0;
                  }
                  if (SDWORD2(v163) >= 1 && v53 < SDWORD2(v163)) {
                    int v59 = *(_DWORD *)(*((void *)&v164 + 1) + 4 * v53);
                  }
                  else {
                    int v59 = 0;
                  }
                  unsigned int v60 = v59 + v45;
                  if (v59 + (int)v45 >= 0
                    && *(int *)&v172[8] >= 1
                    && *(int *)&v172[8] > (int)v60
                    && (v57 + v55) < *(_DWORD *)(*(void *)&v172[24] + 4LL * v60))
                  {
                    icu::UVector32::setElementAt((uint64_t)v172, v57 + v55, v59 + v45);
                    icu::UVector32::setElementAt((uint64_t)&v167, v45, v60);
                  }

                  ++v53;
                }

                while (v54 != v53);
              }

              int v61 = icu::UnicodeString::char32At((icu::UnicodeString *)&v180, v47);
              BOOL v62 = v61 != 12539 && (v61 - 12449) < 0x5E || (v61 - 65382) < 0x3A;
              if (!v46 && v62)
              {
                unsigned int v63 = 1;
                int v64 = icu::UnicodeString::moveIndex32((icu::UnicodeString *)&v180, v47, 1);
                int v65 = (unsigned __int16)v181 >> 5;
                if ((v181 & 0x8000u) != 0LL) {
                  int v65 = DWORD1(v181);
                }
                if (v64 < v65)
                {
                  int v66 = v64;
                  while (1)
                  {
                    unsigned int v67 = v63;
                    int v68 = icu::UnicodeString::char32At((icu::UnicodeString *)&v180, v66);
                    BOOL v69 = v68 == 12539 || (v68 - 12449) >= 0x5E;
                    BOOL v70 = !v69;
                    int v72 = icu::UnicodeString::moveIndex32((icu::UnicodeString *)&v180, v66, 1);
                    int v66 = v72;
                    ++v63;
                    int v73 = (unsigned __int16)v181 >> 5;
                    if ((v181 & 0x8000u) != 0LL) {
                      int v73 = DWORD1(v181);
                    }
                    if (v72 >= v73 || v67 >= 0x13)
                    {
                      if (v67 > 0x12) {
                        goto LABEL_107;
                      }
                      break;
                    }
                  }
                }

                int v75 = 0;
                if (v63 <= 8) {
                  int v76 = dword_1809DDF88[v63];
                }
                else {
                  int v76 = 0x2000;
                }
                if (*(int *)&v172[8] >= 1
                  && *(int *)&v172[8] > (int)(v63 + v45)
                  && (v76 + v75) < *(_DWORD *)(*(void *)&v172[24] + 4LL * (v63 + v45)))
                {
                  icu::UVector32::setElementAt((uint64_t)v172, v76 + v75, v63 + v45);
                  icu::UVector32::setElementAt((uint64_t)&v167, v45, v63 + v45);
                }
              }

  uint64_t v36 = *(UText **)(v2 + 488);
  uint64_t v8 = v35;
  if ((_DWORD)v35 != v34) {
    goto LABEL_93;
  }
LABEL_81:
  int v42 = v34 - v36->chunkNativeStart;
  if (v42 < 0 || v42 >= v36->nativeIndexingLimit || v36->chunkContents[v42] >> 10 > 0x36u)
  {
    utext_setNativeIndex(v36, v34);
    int v43 = v50;
    uint64_t v36 = *(UText **)(v50 + 488);
    LODWORD(v42) = v36->chunkOffset;
  }

  else
  {
    v36->chunkOffset = v42;
    int v43 = v50;
  }

  BOOL v9 = __OFSUB__((_DWORD)v42, 1);
  int v44 = v42 - 1;
  if (v44 < 0 != v9 || v36->chunkContents[v44] >> 11 > 0x1Au)
  {
    utext_previous32(v36);
    uint64_t v36 = *(UText **)(v43 + 488);
    int v44 = v36->chunkOffset;
  }

  else
  {
    v36->chunkOffset = v44;
  }

  if (v44 <= v36->nativeIndexingLimit)
  {
    uint64_t v8 = v36->chunkNativeStart + v44;
  }

  else
  {
    uint64_t v8 = ((uint64_t (*)(void))v36->pFuncs->mapOffsetToNative)();
    uint64_t v36 = *(UText **)(v43 + 488);
  }

  if ((v16 & 3) != 1 || (v20 & 0x10) == 0)
  {
    if (a6 || (v20 & 8) == 0)
    {
      if ((v20 & 4) == 0) {
        return ~a1;
      }
      int v40 = 2;
    }

    else
    {
      int v40 = 3;
    }

    UChar32 v41 = byte_1809F9E61[~(-1 << v40) & v20];
    if ((v20 & 0x100) != 0) {
      int64_t v17 = *(unsigned __int16 *)&v21[4 * v41 + 2] | (*(unsigned __int16 *)&v21[4 * v41] << 16);
    }
    else {
      int64_t v17 = *(unsigned __int16 *)&v21[2 * v41];
    }
    goto LABEL_17;
  }

  int v38 = byte_1809F9E61[v20 & 0xF];
  if ((v20 & 0x100) != 0) {
    int v39 = *(unsigned __int16 *)&v21[4 * v38 + 2] | (*(unsigned __int16 *)&v21[4 * v38] << 16);
  }
  else {
    int v39 = *(unsigned __int16 *)&v21[2 * v38];
  }
  if ((v20 & 0x400) != 0) {
    int v39 = -v39;
  }
  return v39 + a1;
}

      if ((unint64_t)v4 >= v5)
      {
        uint64_t v21 = 0;
        int64_t v17 = 1;
        goto LABEL_83;
      }
    }

    if ((_BYTE)v11)
    {
      *v6++ = aAbcdefghijklmn[v9];
      if (v7) {
        *v7++ = v2 - 1;
      }
    }

    if (byte_180A25CB0[v19] != 255)
    {
      if ((unint64_t)v6 < v8)
      {
        *v6++ = 45;
        if (v7) {
          *v7++ = v2 - 1;
        }
        goto LABEL_76;
      }

      int64_t v17 = 0;
      *(_BYTE *)(v3 + 104) = 45;
      *(_BYTE *)(v3 + 91) = 1;
      uint64_t v21 = 0x1000000;
LABEL_67:
      int v4 = v18;
      goto LABEL_82;
    }

        if (v8 >= v9 || v8 == 0LL) {
          unint64_t v35 = 0;
        }
        else {
          unint64_t v35 = (_DWORD)v8 - (_DWORD)v9;
        }
        if (v7 <= *(_DWORD *)a3)
        {
          int v38 = 0LL;
          int v37 = (char *)(a1 + 9);
        }

        else
        {
          uint64_t v36 = v7;
          if (v7 > 49) {
            goto LABEL_74;
          }
          if ((unint64_t)(v7 - 46LL) > 3)
          {
            int v38 = 0LL;
            int v37 = (char *)v50;
          }

          else
          {
            uint64_t v36 = byte_180A37148[v7];
LABEL_74:
            int v37 = (char *)uprv_malloc(v36);
            int v38 = v37;
            if (!v37)
            {
              int v14 = 16;
              goto LABEL_98;
            }
          }
        }

        UChar32 v41 = v35 + v28;
        if (v9 >= j)
        {
          int v42 = v37;
          do
          {
            int v43 = *v9;
            if (v43 != 46) {
              *v42++ = v43 - 48;
            }
            --v9;
          }

          while (v9 >= j);
        }

        *(_BYTE *)(a1 + 8) = v6;
        *(_DWORD *)a1 = v7;
        *(_DWORD *)(a1 + 4) = v41;
        if (v7 > *(_DWORD *)a3)
        {
          uint64_t v49 = 0;
          sub_1808C77A4((_BYTE *)a1, (int *)a3, v37, v7, &v49, &v48);
          goto LABEL_94;
        }

        if (v41 <= *(_DWORD *)(a3 + 8) - v7 || v41 - 1 > *(_DWORD *)(a3 + 4) - *(_DWORD *)a3)
        {
          uint64_t v49 = 0;
LABEL_94:
          sub_1808C7A24((unsigned int *)a1, a3, &v49, &v48);
        }

        if (v38) {
          uprv_free(v38);
        }
      }
    }

LABEL_107:
              uint64_t v36 = v49;
            }

            ++v45;
            int v47 = icu::UnicodeString::moveIndex32((icu::UnicodeString *)&v180, v47, 1);
            BOOL v46 = v62;
          }

          while (v45 != v159);
        }

        utext_close(&v171);
        __int128 v161 = 0u;
        __int128 v162 = 0u;
        icu::UVector32::UVector32((icu::UVector32 *)&v161, v151, a7);
        if ((v36 & 0x80000000) != 0
          || *(int *)&v172[8] < 1
          || *(int *)&v172[8] <= (int)v36
          || *(_DWORD *)(*(void *)&v172[24] + 4LL * v36) != -1)
        {
          int v77 = v156;
          if (v156)
          {
            int v78 = DWORD2(v161);
            if (SDWORD2(v161) < -1 || SHIDWORD(v161) <= SDWORD2(v161))
            {
              if (!icu::UVector32::expandCapacity((icu::UVector32 *)&v161, DWORD2(v161) + 1, a7))
              {
LABEL_154:
                int v79 = *a7 < U_ILLEGAL_ARGUMENT_ERROR;
                if (*(int *)a7 <= 0 && (v36 & 0x80000000) == 0)
                {
                  int v79 = 1;
                  if (SDWORD2(v167) >= 1 && SDWORD2(v167) > (int)v36)
                  {
                    int v80 = *(_DWORD *)(*((void *)&v168 + 1) + 4LL * v36);
                    if (v80 >= 1)
                    {
                      while (1)
                      {
                        int v81 = v80;
                        int v82 = icu::UnicodeString::moveIndex32((icu::UnicodeString *)&v180, 0, v80);
                        int v83 = icu::UnicodeString::moveIndex32((icu::UnicodeString *)&v180, 0, v36);
                        icu::UnicodeString::tempSubString( (icu::UnicodeString *)&v180,  v82,  v83 - v82,  (icu::UnicodeString *)&v175);
                        if (uhash_containsKey(*(void *)(v158 + 840), (uint64_t)&v175))
                        {
                          icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v175);
                          LODWORD(v36) = v81;
                          goto LABEL_180;
                        }

                        int v84 = icu::UnicodeString::moveIndex32((icu::UnicodeString *)&v180, v82, -1);
                        int v85 = icu::UnicodeString::char32At((icu::UnicodeString *)&v180, v84);
                        BOOL v86 = v85 == 12539 || (v85 - 12449) >= 0x5E;
                        BOOL v87 = !v86;
                        int v88 = icu::UnicodeString::char32At((icu::UnicodeString *)&v180, v82);
                        LODWORD(v36) = v81;
                        if (v88 != 12539 && (v88 - 12449) <= 0x5D)
                        {
                          icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v175);
                          goto LABEL_180;
                        }

                        unsigned int v89 = v88 - 65382;
                        icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v175);
                        if (v89 >= 0x3A) {
                          goto LABEL_174;
                        }
LABEL_180:
                        if (SDWORD2(v167) >= 1 && SDWORD2(v167) > (int)v36)
                        {
                          int v80 = *(_DWORD *)(*((void *)&v168 + 1) + 4LL * v36);
                          if (v80 > 0) {
                            continue;
                          }
                        }

                        goto LABEL_275;
                      }

                      icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v175);
                      LODWORD(v36) = v81;
LABEL_174:
                      int v90 = DWORD2(v161);
                      if (SDWORD2(v161) < -1 || SHIDWORD(v161) <= SDWORD2(v161))
                      {
                        if (!icu::UVector32::expandCapacity( (icu::UVector32 *)&v161,  DWORD2(v161) + 1,  a7))
                        {
LABEL_179:
                          ++v79;
                          goto LABEL_180;
                        }

                        int v90 = DWORD2(v161);
                      }

                      *(_DWORD *)(*((void *)&v162 + 1) + 4LL * v90) = v36;
                      ++DWORD2(v161);
                      goto LABEL_179;
                    }
                  }
                }

              else {
                BOOL v87 = 2;
              }
              int v88 = v207;
              if (v207)
              {
                unsigned int v89 = ((unint64_t)(v21 - v9) >> 1) - v87;
                if (v89 >= 1)
                {
                  int v90 = v89 + 1;
                  do
                  {
                    *v88++ = v19++;
                    --v90;
                  }

                  while (v90 > 1);
                  v207 = v88;
                }
              }

              uint64_t result = sub_18083A99C( v10,  *(void *)(v10 + 48),  v18,  (uint64_t *)&v209,  v11,  &v208,  *(void *)(v3 + 40),  &v207,  v19,  *(_BYTE *)(v3 + 2),  v2);
              LODWORD(v18) = result;
              BOOL v9 = (char *)v209;
              v19 += v87 + ((unint64_t)((char *)v209 - v21) >> 1);
              if (*v2 <= 0)
              {
                int v20 = (v11 - (unint64_t)v209) >> 1;
                goto LABEL_81;
              }

LABEL_275:
                int v126 = *(_DWORD *)(v152 + 8);
                if (v126)
                {
                  BOOL v9 = __OFSUB__(v126, 1);
                  int v127 = v126 - 1;
                  int v128 = v127 < 0 != v9 ? 0 : *(_DWORD *)(*(void *)(v152 + 24) + 4LL * v127);
                  if (v128 >= v14)
                  {
LABEL_286:
                    if (v79 >= 1)
                    {
                      uint64_t v8 = 0LL;
                      uint64_t v130 = v79;
                      if (v77) {
                        BOOL v131 = v14 <= 0;
                      }
                      else {
                        BOOL v131 = 1;
                      }
                      int v132 = !v131;
                      int v133 = -1;
                      while (1)
                      {
                        int v134 = v133;
                        if (SDWORD2(v161) >= 1 && v130-- <= SDWORD2(v161))
                        {
                          int v136 = *(_DWORD *)(*((void *)&v162 + 1) + 4LL * v130);
                          v137 = v170;
                          if (!v170)
                          {
LABEL_308:
                            int v133 = v136 + v14;
                            goto LABEL_309;
                          }

                          if (v136 < 0)
                          {
LABEL_307:
                            int v133 = 0;
                            goto LABEL_309;
                          }
                        }

                        else
                        {
                          int v136 = 0;
                          v137 = v170;
                          if (!v170) {
                            goto LABEL_308;
                          }
                        }

                        int v138 = *((_DWORD *)v137 + 2);
                        if (v138 < 1 || v138 <= v136) {
                          goto LABEL_307;
                        }
                        int v133 = *(_DWORD *)(*((void *)v137 + 3) + 4LL * v136);
LABEL_309:
                        if (v133 <= v134) {
                          goto LABEL_319;
                        }
                        if (v133 == v14)
                        {
                          if (!v132) {
                            goto LABEL_319;
                          }
                          UChar32 v140 = utext_char32At(ut, (v14 - 1));
                        }

                        int v141 = *(_DWORD *)(v152 + 8);
                        if (v141 >= -1 && *(_DWORD *)(v152 + 12) > v141) {
                          goto LABEL_317;
                        }
                        if (icu::UVector32::expandCapacity((icu::UVector32 *)v152, v141 + 1, a7))
                        {
                          int v141 = *(_DWORD *)(v152 + 8);
LABEL_317:
                          *(_DWORD *)(*(void *)(v152 + 24) + 4LL * v141) = v133;
                          ++*(_DWORD *)(v152 + 8);
                        }

                        uint64_t v8 = (v8 + 1);
LABEL_319:
                      }
                    }

                    uint64_t v8 = 0LL;
LABEL_322:
                    UChar32 v142 = utext_char32At(ut, v154);
                    int v143 = *(_DWORD *)(v152 + 8);
                    if (!v143) {
                      goto LABEL_333;
                    }
                    int v144 = v143 < 1 ? 0 : *(_DWORD *)(*(void *)(v152 + 24) + 4LL * (v143 - 1));
                    if (v144 != v154) {
                      goto LABEL_333;
                    }
                    if (v77)
                    {
                      if (icu::UnicodeSet::contains((icu::UnicodeSet *)(v158 + 408), v142))
                      {
LABEL_333:
                        icu::UVector32::~UVector32((void **)&v161);
                        icu::UVector32::~UVector32((void **)&v163);
                        icu::UVector32::~UVector32((void **)&v165);
                        icu::UVector32::~UVector32((void **)&v167);
                        icu::UVector32::~UVector32((void **)v172);
LABEL_334:
                        if (v170) {
                          (*(void (**)(icu::UVector32 *))(*(void *)v170 + 8LL))(v170);
                        }
                        goto LABEL_336;
                      }

                      int v143 = *(_DWORD *)(v152 + 8);
                    }

                    BOOL v9 = __OFSUB__(v143, 1);
                    int v145 = v143 - 1;
                    if (v145 < 0 == v9) {
                      *(_DWORD *)(v152 + 8) = v145;
                    }
                    uint64_t v8 = (v8 - 1);
                    goto LABEL_333;
                  }
                }

                int v129 = DWORD2(v161);
                if (SDWORD2(v161) < -1 || SHIDWORD(v161) <= SDWORD2(v161))
                {
                  if (!icu::UVector32::expandCapacity((icu::UVector32 *)&v161, DWORD2(v161) + 1, a7))
                  {
LABEL_285:
                    ++v79;
                    goto LABEL_286;
                  }

                  int v129 = DWORD2(v161);
                }

                *(_DWORD *)(*((void *)&v162 + 1) + 4LL * v129) = 0;
                ++DWORD2(v161);
                goto LABEL_285;
              }

              int v78 = DWORD2(v161);
            }

            *(_DWORD *)(*((void *)&v162 + 1) + 4LL * v78) = v36;
            ++DWORD2(v161);
            goto LABEL_154;
          }

          if ((int)v36 < 1)
          {
            int v79 = 0;
            goto LABEL_275;
          }

          int v102 = 1;
          while (1)
          {
            int v79 = v102;
            int v103 = DWORD2(v161);
            if (SDWORD2(v161) >= -1 && SHIDWORD(v161) > SDWORD2(v161)) {
              goto LABEL_216;
            }
LABEL_217:
            if (SDWORD2(v167) >= 1 && SDWORD2(v167) > (int)v36)
            {
              LODWORD(v36) = *(_DWORD *)(*((void *)&v168 + 1) + 4LL * v36);
              int v102 = v79 + 1;
            }

            goto LABEL_275;
          }

          int v103 = DWORD2(v161);
LABEL_216:
          *(_DWORD *)(*((void *)&v162 + 1) + 4LL * v103) = v36;
          ++DWORD2(v161);
          goto LABEL_217;
        }

        int v125 = DWORD2(v161);
        int v77 = v156;
        if (SDWORD2(v161) < -1 || SHIDWORD(v161) <= SDWORD2(v161))
        {
          if (!icu::UVector32::expandCapacity((icu::UVector32 *)&v161, DWORD2(v161) + 1, a7))
          {
LABEL_274:
            int v79 = 1;
            goto LABEL_275;
          }

          int v125 = DWORD2(v161);
        }

        *(_DWORD *)(*((void *)&v162 + 1) + 4LL * v125) = v36;
        ++DWORD2(v161);
        goto LABEL_274;
      }

      v93 = v170;
      if (!v170)
      {
        v106 = (icu::UVector32 *)icu::UMemory::operator new((icu::UMemory *)0x20, v35);
        uint64_t v107 = (uint64_t)v106;
        if (v106) {
          icu::UVector32::UVector32(v106, a7);
        }
        sub_1807C9194((uint64_t)&v170, v107, (int *)a7);
        if (*(int *)a7 > 0)
        {
LABEL_230:
          uint64_t v8 = 0LL;
          goto LABEL_334;
        }
      }

      unsigned int v94 = 0;
      for (int i = 0; ; int i = icu::UnicodeString::moveIndex32((icu::UnicodeString *)&v180, i, 1))
      {
        v96 = v170;
        if (v93)
        {
          if (i < 0 || ((int v97 = *((_DWORD *)v170 + 2), v97 >= 1) ? (v98 = v97 <= i) : (v98 = 1), v98)) {
            int v100 = 0;
          }
          else {
            int v100 = *(_DWORD *)(*((void *)v170 + 3) + 4LL * i);
          }
          icu::UVector32::setElementAt((uint64_t)v170, v100, v94);
        }

        else
        {
          int v99 = *((_DWORD *)v170 + 2);
          if (v99 < -1 || *((_DWORD *)v170 + 3) <= v99)
          {
            int v99 = *((_DWORD *)v96 + 2);
          }

          *(_DWORD *)(*((void *)v96 + 3) + 4LL * v99) = i + v14;
          ++*((_DWORD *)v96 + 2);
        }

LABEL_203:
        int v101 = (unsigned __int16)v181 >> 5;
        if ((v181 & 0x8000u) != 0LL) {
          int v101 = DWORD1(v181);
        }
        if (i == v101) {
          goto LABEL_37;
        }
        ++v94;
      }
    }

    memset(&v171.providerProperties, 0, 56);
    *(void *)&v171.magic = off_18971B688;
    LOWORD(v171.providerProperties) = 2;
    v91 = (icu::UVector32 *)icu::UMemory::operator new((icu::UMemory *)0x20, v33);
    if (!v91)
    {
      goto LABEL_226;
    }

    v92 = v91;
    icu::UVector32::UVector32(v91, a7);
    if (*(int *)a7 > 0)
    {
      (*(void (**)(icu::UVector32 *))(*(void *)v92 + 8LL))(v92);
LABEL_226:
      icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v171);
      goto LABEL_230;
    }

    __int128 v176 = 0u;
    uint64_t v179 = 0LL;
    __int128 v178 = 0u;
    __int128 v177 = 0u;
    v175 = off_18971B688;
    LOWORD(v176) = 2;
    memset(&v172[8], 0, 32);
    uint64_t v174 = 0LL;
    __int128 v173 = 0u;
    *(void *)v172 = off_18971B688;
    *(_WORD *)&v172[8] = 2;
    unsigned __int16 v108 = v181;
    int v109 = (unsigned __int16)v181 >> 5;
    int v110 = DWORD1(v181);
    if ((v181 & 0x8000u) != 0LL) {
      int v109 = DWORD1(v181);
    }
    if (v109 >= 1)
    {
      uint64_t v153 = a5;
      int v111 = 0;
      while (1)
      {
        int v112 = v111;
        if ((v176 & 1) != 0) {
          __int16 v113 = 2;
        }
        else {
          __int16 v113 = v176 & 0x1F;
        }
        LOWORD(v176) = v113;
        LODWORD(v114) = icu::UnicodeString::char32At((icu::UnicodeString *)&v180, v111);
        do
        {
          icu::UnicodeString::append((uint64_t)&v175, v114);
          int v115 = icu::UnicodeString::moveIndex32((icu::UnicodeString *)&v180, v111, 1);
          int v111 = v115;
          int v116 = (unsigned __int16)v181 >> 5;
          if ((v181 & 0x8000u) != 0LL) {
            int v116 = DWORD1(v181);
          }
          if (v115 == v116) {
            break;
          }
          uint64_t v114 = icu::UnicodeString::char32At((icu::UnicodeString *)&v180, v115);
        }

        while (!(*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 816) + 120LL))( *(void *)(a1 + 816),  v114));
        (*(void (**)(void, void (***)(icu::UnicodeString *__hidden), _BYTE *, UErrorCode *))(**(void **)(a1 + 816) + 24LL))( *(void *)(a1 + 816),  &v175,  v172,  a7);
        else {
          uint64_t v117 = *(unsigned int *)&v172[12];
        }
        icu::UnicodeString::doAppend((uint64_t)&v171, (const icu::UnicodeString *)v172, 0, v117);
        if (v170)
        {
          if (v112 < 0 || ((int v118 = *((_DWORD *)v170 + 2), v118 >= 1) ? (v119 = v118 <= v112) : (v119 = 1), v119)) {
            int v120 = 0;
          }
          else {
            int v120 = *(_DWORD *)(*((void *)v170 + 3) + 4LL * v112);
          }
        }

        else
        {
          int v120 = v112 + v14;
        }

        do
        {
          int v121 = *((_DWORD *)v92 + 2);
          int sizeOfStruct = LOWORD(v171.providerProperties) >> 5;
          if (SLOWORD(v171.providerProperties) < 0) {
            int sizeOfStruct = v171.sizeOfStruct;
          }
          if (v121 >= sizeOfStruct) {
            break;
          }
          if (v121 >= -1 && *((_DWORD *)v92 + 3) > v121) {
            goto LABEL_262;
          }
          if (icu::UVector32::expandCapacity(v92, v121 + 1, a7))
          {
            int v121 = *((_DWORD *)v92 + 2);
LABEL_262:
            *(_DWORD *)(*((void *)v92 + 3) + 4LL * v121) = v120;
            ++*((_DWORD *)v92 + 2);
          }
        }

        while (*(int *)a7 < 1);
        unsigned __int16 v108 = v181;
        int v123 = (unsigned __int16)v181 >> 5;
        int v110 = DWORD1(v181);
        if ((v181 & 0x8000u) != 0LL) {
          int v123 = DWORD1(v181);
        }
        if (v111 >= v123)
        {
          unsigned int v124 = (__int16)v181 >> 31;
          a5 = v153;
          goto LABEL_339;
        }
      }
    }

    unsigned int v124 = (__int16)v181 >> 31;
LABEL_339:
    if (!v170)
    {
      int v147 = v108 >> 5;
      if (!v124) {
        int v110 = v147;
      }
      int v148 = v110 + v14;
      goto LABEL_353;
    }

    if ((v124 & 1) != 0)
    {
      if (v110 < 0) {
        goto LABEL_352;
      }
    }

    else
    {
      int v110 = v108 >> 5;
    }

    int v149 = *((_DWORD *)v170 + 2);
    if (v149 >= 1 && v149 > v110)
    {
      int v148 = *(_DWORD *)(*((void *)v170 + 3) + 4LL * v110);
LABEL_353:
      sub_1807C9210(v92, v148, a7);
      if (v170) {
        (*(void (**)(icu::UVector32 *))(*(void *)v170 + 8LL))(v170);
      }
      v170 = v92;
      icu::UnicodeString::operator=((icu::UnicodeString *)&v180, (icu::UnicodeString *)&v171);
      icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v172);
      icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v175);
      icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v171);
      goto LABEL_34;
    }

LABEL_352:
    int v148 = 0;
    goto LABEL_353;
  }

  return v8;
}

uint64_t sub_1807C9194(uint64_t result, uint64_t a2, int *a3)
{
  if (*a3 <= 0)
  {
    uint64_t v5 = (void *)result;
    uint64_t result = *(void *)result;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    }
    void *v5 = a2;
    if (!a2) {
      *a3 = 7;
    }
  }

  else if (a2)
  {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8LL))(a2);
  }

  return result;
}

_DWORD *sub_1807C9210(_DWORD *this, int a2, UErrorCode *a3)
{
  int v4 = this;
  int v5 = this[2];
  if (v5 < -1 || this[3] <= v5)
  {
    this = (_DWORD *)icu::UVector32::expandCapacity((icu::UVector32 *)this, v5 + 1, a3);
    if (!(_DWORD)this) {
      return this;
    }
    int v5 = v4[2];
  }

  *(_DWORD *)(*((void *)v4 + 3) + 4LL * v5) = a2;
  ++v4[2];
  return this;
}

void sub_1807C9270(uint64_t a1, UErrorCode *a2)
{
  v10[28] = *(char **)MEMORY[0x1895F89C0];
  memset(v9, 0, sizeof(v9));
  icu::Locale::Locale((icu::Locale *)v10, "ja", 0LL, 0LL, 0LL);
  icu::ResourceBundle::ResourceBundle((icu::ResourceBundle *)v9, "icudt74l-brkitr", v10, a2);
  icu::Locale::~Locale((icu::Locale *)v10);
  if (*(int *)a2 <= 0)
  {
    memset(v8, 0, sizeof(v8));
    icu::ResourceBundle::get((icu::ResourceBundle *)v9, "extensions", a2, v8);
    if (*(int *)a2 <= 0)
    {
      do
      {
        if (!icu::ResourceBundle::hasNext((icu::ResourceBundle *)v8)) {
          break;
        }
        icu::ResourceBundle::getNextString((icu::ResourceBundle *)v8, a2, (uint64_t)v10);
        uint64_t v4 = *(void *)(a1 + 840);
        BOOL v6 = (icu::UnicodeString *)icu::UMemory::operator new((icu::UMemory *)0x40, v5);
        uint64_t v7 = (uint64_t)v6;
        if (v6) {
          icu::UnicodeString::UnicodeString(v6, (UChar **)v10);
        }
        uhash_puti(v4, v7, 1u, (int *)a2);
        icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v10);
      }

      while (*(int *)a2 < 1);
    }

    icu::ResourceBundle::~ResourceBundle((icu::ResourceBundle *)v8);
  }

  icu::ResourceBundle::~ResourceBundle((icu::ResourceBundle *)v9);
}

void sub_1807C93C8(uint64_t a1, UErrorCode *a2)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  uint64_t v10 = 0LL;
  memset(v9, 0, sizeof(v9));
  icu::UnicodeString::UnicodeString((uint64_t)v12, (uint64_t)L"[:Hiragana:]");
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v9, (const icu::UnicodeString *)v12, a2);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v12);
  icu::UnicodeSet::compact((icu::UnicodeSet *)v9);
  memset(v12, 0, sizeof(v12));
  for (int i = icu::UnicodeSetIterator::UnicodeSetIterator((icu::UnicodeSetIterator *)v12, (const icu::UnicodeSet *)v9);
        icu::UnicodeSetIterator::next(i);
        int i = (icu::UnicodeSetIterator *)v12)
  {
    icu::UnicodeString::UnicodeString((uint64_t)v11, DWORD2(v12[0]));
    uint64_t v5 = *(void *)(a1 + 840);
    uint64_t v7 = (icu::UnicodeString *)icu::UMemory::operator new((icu::UMemory *)0x40, v6);
    uint64_t v8 = (uint64_t)v7;
    if (v7) {
      icu::UnicodeString::UnicodeString(v7, v11);
    }
    uhash_puti(v5, v8, 1u, (int *)a2);
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v11);
  }

  icu::UnicodeSetIterator::~UnicodeSetIterator((icu::UnicodeSetIterator *)v12);
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v9);
}

void icu::UCharsDictionaryMatcher::~UCharsDictionaryMatcher(icu::UCharsDictionaryMatcher *this)
{
  *(void *)this = off_18970B6B8;
  udata_close(*((_OWORD **)this + 2));
}

{
  *(void *)this = off_18970B6B8;
  udata_close(*((_OWORD **)this + 2));
}

{
  *(void *)this = off_18970B6B8;
  udata_close(*((_OWORD **)this + 2));
  icu::UMemory::operator delete(this);
}

uint64_t icu::UCharsDictionaryMatcher::getType(icu::UCharsDictionaryMatcher *this)
{
  return 1LL;
}

uint64_t icu::UCharsDictionaryMatcher::matches( icu::UCharsDictionaryMatcher *this, UText *ut, int a3, int a4, int *a5, int *a6, int *a7, int *a8)
{
  uint64_t v15 = (unsigned __int16 *)*((void *)this + 1);
  int v32 = 0LL;
  unint64_t v33 = v15;
  uint64_t v34 = v15;
  uint64_t v35 = 0xFFFFFFFFLL;
  int NativeIndex = utext_getNativeIndex(ut);
  UChar32 v17 = utext_next32(ut);
  UChar32 v31 = a8;
  if ((v17 & 0x80000000) == 0)
  {
    UChar32 v18 = v17;
    uint64_t v19 = 0LL;
    int v20 = 1;
    while (1)
    {
      int v21 = v20;
      if (v20 == 1)
      {
        LODWORD(v35) = -1;
        int Impl = icu::UCharsTrie::nextImpl((uint64_t)&v32, v33, v18);
      }

      else
      {
        int Impl = icu::UCharsTrie::next((icu::UCharsTrie *)&v32, v18);
      }

      int v23 = Impl;
      int v24 = utext_getNativeIndex(ut) - NativeIndex;
      if (v23 < 2)
      {
        if (!v23) {
          goto LABEL_33;
        }
      }

      else
      {
        if ((int)v19 < a4)
        {
          if (a7)
          {
            uint64_t v25 = v34 + 1;
            unsigned int v26 = *v34;
            if ((__int16)*v34 < 0)
            {
              unsigned int v28 = v26 & 0x7FFF;
              if (v28 >= 0x4000)
              {
                if (v28 == 0x7FFF)
                {
                  int v29 = v34[1] << 16;
                  uint64_t v25 = v34 + 2;
                }

                else
                {
                  int v29 = (v28 << 16) - 0x40000000;
                }

                unsigned int v28 = v29 | *v25;
              }
            }

            else
            {
              unsigned int v27 = v26 >> 6;
              if (v27 > 0x100)
              {
                if (v27 > 0x1FE) {
                  unsigned int v28 = v34[2] | (v34[1] << 16);
                }
                else {
                  unsigned int v28 = (*v25 | ((v27 & 0x1FF) << 16)) - 16842752;
                }
              }

              else
              {
                unsigned int v28 = v27 - 1;
              }
            }

            a7[(int)v19] = v28;
          }

          if (a5) {
            a5[(int)v19] = v24;
          }
          if (a6) {
            a6[(int)v19] = v21;
          }
          uint64_t v19 = (v19 + 1);
        }

        if (v23 == 2) {
          goto LABEL_33;
        }
      }

      if (v24 < a3)
      {
        UChar32 v18 = utext_next32(ut);
        int v20 = v21 + 1;
        if ((v18 & 0x80000000) == 0) {
          continue;
        }
      }

      goto LABEL_33;
    }
  }

  uint64_t v19 = 0LL;
  int v21 = 0;
LABEL_33:
  if (v31) {
    *UChar32 v31 = v21;
  }
  icu::UCharsTrie::~UCharsTrie(&v32);
  return v19;
}

void icu::BytesDictionaryMatcher::~BytesDictionaryMatcher(icu::BytesDictionaryMatcher *this)
{
  *(void *)this = off_18970B6E8;
  udata_close(*((_OWORD **)this + 3));
}

{
  *(void *)this = off_18970B6E8;
  udata_close(*((_OWORD **)this + 3));
}

{
  *(void *)this = off_18970B6E8;
  udata_close(*((_OWORD **)this + 3));
  icu::UMemory::operator delete(this);
}

uint64_t icu::BytesDictionaryMatcher::transform(icu::BytesDictionaryMatcher *this, uint64_t a2)
{
  int v2 = *((_DWORD *)this + 4);
  if ((v2 & 0x7F000000) == 0x1000000)
  {
    if ((_DWORD)a2 == 8205)
    {
      return 255LL;
    }

    else if ((_DWORD)a2 == 8204)
    {
      return 254LL;
    }

    else
    {
      unsigned int v3 = a2 - (v2 & 0x1FFFFF);
      if (v3 > 0xFD) {
        return 0xFFFFFFFFLL;
      }
      else {
        return v3;
      }
    }
  }

  return a2;
}

uint64_t icu::BytesDictionaryMatcher::getType(icu::BytesDictionaryMatcher *this)
{
  return 0LL;
}

uint64_t icu::BytesDictionaryMatcher::matches( icu::BytesDictionaryMatcher *this, UText *ut, int a3, int a4, int *a5, int *a6, int *a7, int *a8)
{
  uint64_t v15 = (unsigned __int8 *)*((void *)this + 1);
  uint64_t v34 = 0LL;
  uint64_t v35 = v15;
  uint64_t v36 = v15;
  uint64_t v37 = 0xFFFFFFFFLL;
  int NativeIndex = utext_getNativeIndex(ut);
  UChar32 v16 = utext_next32(ut);
  int v30 = a8;
  if ((v16 & 0x80000000) == 0)
  {
    UChar32 v17 = v16;
    UChar32 v31 = a7;
    uint64_t v18 = 0LL;
    int v19 = 1;
    while (1)
    {
      int v20 = v19;
      int v21 = *((_DWORD *)this + 4);
      int v22 = v21 & 0x7F000000;
      if (v20 == 1)
      {
        unsigned int v23 = v17 - (v21 & 0x1FFFFF);
        if (v23 > 0xFD) {
          unsigned int v23 = 255;
        }
        if (v17 == 8204) {
          unsigned int v23 = 254;
        }
        if (v17 == 8205) {
          unsigned int v23 = 255;
        }
        if (v22 == 0x1000000) {
          int v24 = v23;
        }
        else {
          int v24 = v17;
        }
        LODWORD(v37) = -1;
        int Impl = icu::BytesTrie::nextImpl((icu::BytesTrie *)&v34, v35, v24);
      }

      else
      {
        if (v22 == 0x1000000)
        {
          if (v17 == 8205)
          {
            UChar32 v17 = 255;
          }

          else
          {
            unsigned int v26 = v17 - (v21 & 0x1FFFFF);
            if (v26 > 0xFD) {
              unsigned int v26 = -1;
            }
            if (v17 == 8204) {
              UChar32 v17 = 254;
            }
            else {
              UChar32 v17 = v26;
            }
          }
        }

        int Impl = icu::BytesTrie::next((icu::BytesTrie *)&v34, v17);
      }

      int v27 = Impl;
      int v28 = utext_getNativeIndex(ut) - NativeIndex;
      if (v27 < 2)
      {
        if (!v27) {
          goto LABEL_39;
        }
      }

      else
      {
        if ((int)v18 < a4)
        {
          if (v31) {
            v31[(int)v18] = icu::BytesTrie::readValue((icu::BytesTrie *)(v36 + 1), (const unsigned __int8 *)(*v36 >> 1));
          }
          if (a5) {
            a5[(int)v18] = v28;
          }
          if (a6) {
            a6[(int)v18] = v20;
          }
          uint64_t v18 = (v18 + 1);
        }

        if (v27 == 2) {
          goto LABEL_39;
        }
      }

      if (v28 < a3)
      {
        UChar32 v17 = utext_next32(ut);
        int v19 = v20 + 1;
        if ((v17 & 0x80000000) == 0) {
          continue;
        }
      }

      goto LABEL_39;
    }
  }

  uint64_t v18 = 0LL;
  int v20 = 0;
LABEL_39:
  if (v30) {
    *int v30 = v20;
  }
  icu::BytesTrie::~BytesTrie(&v34);
  return v18;
}

uint64_t udict_swap( uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = a3;
  uint64_t v37 = *MEMORY[0x1895F89C0];
  int v13 = udata_swapDataHeader(a1, (unsigned __int16 *)a2, a3, a4, a5, a6, a7, a8);
  if (!a5 || *a5 > 0) {
    return 0LL;
  }
  if (__PAIR64__(*(unsigned __int8 *)(a2 + 13), *(unsigned __int8 *)(a2 + 12)) != 0x6900000044LL
    || *(_BYTE *)(a2 + 14) != 99
    || *(_BYTE *)(a2 + 15) != 116
    || *(_BYTE *)(a2 + 16) != 1)
  {
    uint64_t v34 = *(unsigned __int8 *)(a2 + 12);
    unsigned int v23 = "udict_swap(): data format %02x.%02x.%02x.%02x (format version %02x) is not recognized as dictionary data\n";
    goto LABEL_15;
  }

  int v21 = v13;
  if (a4) {
    int v22 = (char *)a4 + v13;
  }
  else {
    int v22 = 0LL;
  }
  if ((v10 & 0x80000000) == 0)
  {
    uint64_t v10 = (v10 - v13);
    if ((int)v10 <= 31)
    {
      udata_printError( a1,  (uint64_t)"udict_swap(): too few bytes (%d after header) for dictionary data\n",  v14,  v15,  v16,  v17,  v18,  v19,  v10);
LABEL_22:
      uint64_t result = 0LL;
      int v24 = 8;
      goto LABEL_16;
    }
  }

  uint64_t v25 = 0LL;
  unsigned int v26 = (char *)(a2 + v13);
  *(_OWORD *)__n = 0u;
  __int128 v36 = 0u;
  do
  {
    *(_DWORD *)((char *)__n + v25) = udata_readInt32(a1, *(unsigned int *)&v26[v25]);
    v25 += 4LL;
  }

  while (v25 != 32);
  int v33 = HIDWORD(__n[1]);
  if ((v10 & 0x80000000) == 0)
  {
    if ((int)v10 < SHIDWORD(__n[1]))
    {
      udata_printError( a1,  (uint64_t)"udict_swap(): too few bytes (%d after header) for all of dictionary data\n",  v27,  v28,  v29,  v30,  v31,  v32,  v10);
      goto LABEL_22;
    }

    if (v26 != v22) {
      memcpy(v22, v26, SHIDWORD(__n[1]));
    }
    (*(void (**)(uint64_t, char *, uint64_t, char *, int *))(a1 + 56))(a1, v26, 32LL, v22, a5);
    if ((v36 & 7) != 0)
    {
      if ((v36 & 7) == 1)
      {
        (*(void (**)(uint64_t, char *, void, char *, int *))(a1 + 48))( a1,  v26 + 32,  (HIDWORD(__n[0]) - 32),  v22 + 32,  a5);
        return (v33 + v21);
      }

      unsigned int v23 = "udict_swap(): unknown trie type!\n";
LABEL_15:
      udata_printError(a1, (uint64_t)v23, v14, v15, v16, v17, v18, v19, v34);
      uint64_t result = 0LL;
      int v24 = 16;
LABEL_16:
      *a5 = v24;
      return result;
    }
  }

  return (v33 + v21);
}

void *icu::DateInterval::getStaticClassID(icu::DateInterval *this)
{
  return &unk_18C534CE0;
}

void *icu::DateInterval::getDynamicClassID(icu::DateInterval *this)
{
  return &unk_18C534CE0;
}

uint64_t icu::DateInterval::DateInterval(uint64_t this, double a2, double a3)
{
  *(void *)this = off_18970B790;
  *(double *)(this + 8) = a2;
  *(double *)(this + 16) = a3;
  return this;
}

{
  *(void *)this = off_18970B790;
  *(double *)(this + 8) = a2;
  *(double *)(this + 16) = a3;
  return this;
}

void icu::DateInterval::~DateInterval(icu::DateInterval *this)
{
}

__n128 icu::DateInterval::DateInterval(icu::DateInterval *this, const icu::DateInterval *a2)
{
  *(void *)this = off_18970B790;
  if (this != a2)
  {
    __n128 result = *(__n128 *)((char *)a2 + 8);
    *(__n128 *)((char *)this + 8) = result;
  }

  return result;
}

{
  __n128 result;
  *(void *)this = off_18970B790;
  if (this != a2)
  {
    __n128 result = *(__n128 *)((char *)a2 + 8);
    *(__n128 *)((char *)this + 8) = result;
  }

  return result;
}

__n128 icu::DateInterval::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    __n128 result = *(__n128 *)(a2 + 8);
    *(__n128 *)(a1 + 8) = result;
  }

  return result;
}

__n128 icu::DateInterval::clone(icu::DateInterval *this, unint64_t a2)
{
  uint64_t v3 = icu::UMemory::operator new((icu::UMemory *)0x18, a2);
  if (v3)
  {
    *(void *)uint64_t v3 = off_18970B790;
    if ((icu::DateInterval *)v3 != this)
    {
      __n128 result = *(__n128 *)((char *)this + 8);
      *(__n128 *)(v3 + 8) = result;
    }
  }

  return result;
}

BOOL icu::DateInterval::operator==(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 8) == *(double *)(a2 + 8) && *(double *)(a1 + 16) == *(double *)(a2 + 16);
}

void icu::Edits::releaseArray(void **this)
{
  int v2 = (char *)this + 28;
  uint64_t v1 = (char *)*this;
  if (v1 != v2) {
    uprv_free(v1);
  }
}

icu::Edits *icu::Edits::copyArray(icu::Edits *this, const void **a2)
{
  if (*((int *)this + 6) < 1)
  {
    int v4 = *((_DWORD *)this + 3);
    if (v4 > *((_DWORD *)this + 2))
    {
      uint64_t v5 = uprv_malloc(2LL * v4);
      if (!v5)
      {
        *(_OWORD *)((char *)this + 12) = xmmword_1809DE040;
        return this;
      }

      unint64_t v6 = v5;
      *(void *)this = v6;
      int v4 = *((_DWORD *)this + 3);
      *((_DWORD *)this + 2) = v4;
    }

    if (v4 >= 1) {
      memcpy(*(void **)this, *a2, 2LL * v4);
    }
  }

  else
  {
    *((void *)this + 2) = 0LL;
    *((_DWORD *)this + 3) = 0;
  }

  return this;
}

icu::Edits *icu::Edits::moveArray(icu::Edits *this, icu::Edits *a2)
{
  if (*((int *)this + 6) < 1)
  {
    uint64_t v5 = (char *)this + 28;
    int v4 = *(icu::Edits **)this;
    uint64_t v6 = *((unsigned int *)this + 3);
    if ((int)v6 < 101)
    {
      *(void *)this = v5;
      *((_DWORD *)this + 2) = 100;
    }

    else
    {
      *(void *)this = *(void *)a2;
      *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
      *(void *)a2 = (char *)a2 + 28;
      *((_DWORD *)a2 + 2) = 100;
      *(void *)((char *)a2 + 20) = 0LL;
      *(void *)((char *)a2 + 12) = 0LL;
    }
  }

  else
  {
    *((void *)this + 2) = 0LL;
    *((_DWORD *)this + 3) = 0;
  }

  return this;
}

uint64_t icu::Edits::reset(uint64_t this)
{
  *(void *)(this + 20) = 0LL;
  *(void *)(this + 12) = 0LL;
  return this;
}

icu::Edits *icu::Edits::operator=(icu::Edits *result, uint64_t a2)
{
  if (result != (icu::Edits *)a2)
  {
    *(_OWORD *)((char *)result + 12) = *(_OWORD *)(a2 + 12);
    return icu::Edits::copyArray(result, (const void **)a2);
  }

  return result;
}

icu::Edits *icu::Edits::operator=(icu::Edits *this, icu::Edits *a2)
{
  *(_OWORD *)((char *)this + 12) = *(_OWORD *)((char *)a2 + 12);
  return icu::Edits::moveArray(this, a2);
}

void icu::Edits::~Edits(void **this)
{
  int v2 = (char *)this + 28;
  uint64_t v1 = (char *)*this;
  if (v1 != v2) {
    uprv_free(v1);
  }
}

{
  char *v1;
  char *v2;
  int v2 = (char *)this + 28;
  uint64_t v1 = (char *)*this;
  if (v1 != v2) {
    uprv_free(v1);
  }
}

_DWORD *icu::Edits::addUnchanged(_DWORD *this, unsigned int a2)
{
  if (a2)
  {
    int v2 = this;
    if ((int)this[6] <= 0)
    {
      int v3 = a2;
      if ((a2 & 0x80000000) != 0)
      {
        this[6] = 1;
        return this;
      }

      int v4 = this[3];
      BOOL v5 = __OFSUB__(v4, 1);
      uint64_t v6 = (v4 - 1);
      if ((int)v6 < 0 == v5)
      {
        uint64_t v7 = *(void *)this;
        unsigned int v8 = *(unsigned __int16 *)(*(void *)this + 2LL * v6);
        if (v8 <= 0xFFE)
        {
          if (a2 <= 4095 - v8)
          {
            *(_WORD *)(v7 + 2 * v6) = v8 + a2;
            return this;
          }

          *(_WORD *)(v7 + 2 * v6) = 4095;
          int v3 = a2 - (4095 - v8);
        }
      }

      if (v3 < 4096)
      {
        int v9 = v3;
      }

      else
      {
        do
        {
          this = icu::Edits::append(v2, 4095);
          int v9 = v3 - 4096;
          unsigned int v10 = v3 >> 13;
          v3 -= 4096;
        }

        while (v10);
      }

      if (v9 >= 1) {
        return icu::Edits::append(v2, (unsigned __int16)v9 - 1);
      }
    }
  }

  return this;
}

_DWORD *icu::Edits::append(_DWORD *this, __int16 a2)
{
  int v3 = this;
  int v4 = this[3];
  if (v4 >= this[2])
  {
    this = (_DWORD *)icu::Edits::growArray((icu::Edits *)this);
    if (!(_DWORD)this) {
      return this;
    }
    int v4 = v3[3];
  }

  uint64_t v5 = *(void *)v3;
  v3[3] = v4 + 1;
  *(_WORD *)(v5 + 2LL * v4) = a2;
  return this;
}

_DWORD *icu::Edits::addReplace(_DWORD *this, int a2, int a3)
{
  if ((int)this[6] <= 0)
  {
    unsigned int v3 = a3;
    unsigned int v4 = a2;
    uint64_t v5 = this;
    if ((a3 | a2) < 0)
    {
      int v8 = 1;
      goto LABEL_10;
    }

    if (!(a3 | a2)) {
      return this;
    }
    ++this[5];
    signed int v6 = a3 - a2;
    if (a3 != a2)
    {
      if (v6 < 1)
      {
        int v7 = this[4];
      }

      else
      {
        int v7 = this[4];
        if ((v7 & 0x80000000) == 0 && v6 > (v7 ^ 0x7FFFFFFFu))
        {
LABEL_8:
          int v8 = 8;
LABEL_10:
          this[6] = v8;
          return this;
        }
      }

      this[4] = v7 + v6;
    }

    if ((a2 - 1) <= 5 && a3 <= 7)
    {
      int v9 = this[3];
      BOOL v10 = __OFSUB__(v9, 1);
      int v11 = v9 - 1;
      if (v11 < 0 != v10) {
        int v12 = 0xFFFF;
      }
      else {
        int v12 = *(unsigned __int16 *)(*(void *)this + 2LL * v11);
      }
      a2 = (a3 << 9) | (a2 << 12);
      if ((~v12 & 0x1FF) != 0 && (v12 - 28671) >= 0xFFFFA001 && (v12 & 0xFE00) == a2)
      {
        *(_WORD *)(*(void *)this + 2LL * v11) = v12 + 1;
        return this;
      }

      return icu::Edits::append(this, a2);
    }

    if (a2 <= 60 && a3 <= 60)
    {
      LOWORD(a2) = a3 | ((_WORD)a2 << 6) | 0x7000;
      return icu::Edits::append(this, a2);
    }

    int v13 = this[3];
    if (this[2] - v13 <= 4)
    {
      this = (_DWORD *)icu::Edits::growArray((icu::Edits *)this);
      if (!(_DWORD)this) {
        return this;
      }
      int v13 = v5[3];
    }

    uint64_t v14 = v13 + 1LL;
    if ((int)v4 > 60)
    {
      if (v4 >> 15)
      {
        int v15 = ((HIBYTE(v4) & 0xC0) + 3968) | 0x7000;
        uint64_t v16 = *(void *)v5;
        *(_WORD *)(*(void *)v5 + 2 * v14) = (v4 >> 15) | 0x8000;
        LODWORD(v14) = v13 + 3;
        *(_WORD *)(v16 + 2LL * v13 + 4) = v4 | 0x8000;
      }

      else
      {
        *(_WORD *)(*(void *)v5 + 2LL * (int)v14) = v4 | 0x8000;
        LODWORD(v14) = v13 + 2;
        LOWORD(v15) = 32576;
      }
    }

    else
    {
      LOWORD(v15) = ((_WORD)v4 << 6) | 0x7000;
    }

    if ((int)v3 > 60)
    {
      unsigned int v18 = v3 >> 15;
      if (v3 >> 15)
      {
        __int16 v19 = v3 | 0x8000;
        unsigned int v3 = (v3 >> 30) + 62;
        __int16 v20 = v18 | 0x8000;
        uint64_t v17 = *(void *)v5;
        int v21 = (_WORD *)(*(void *)v5 + 2LL * (int)v14);
        *int v21 = v20;
        LODWORD(v14) = v14 + 2;
        v21[1] = v19;
      }

      else
      {
        uint64_t v17 = *(void *)v5;
        *(_WORD *)(*(void *)v5 + 2LL * (int)v14) = v3 | 0x8000;
        LODWORD(v14) = v14 + 1;
        LOWORD(v3) = 61;
      }
    }

    else
    {
      uint64_t v17 = *(void *)v5;
    }

    *(_WORD *)(v17 + 2LL * v13) = v3 | v15;
    v5[3] = v14;
  }

  return this;
}

uint64_t icu::Edits::growArray(icu::Edits *this)
{
  int v2 = (char *)this + 28;
  int v3 = *((_DWORD *)this + 2);
  if (*(icu::Edits **)this == (icu::Edits *)((char *)this + 28))
  {
    int v4 = 2000;
  }

  else
  {
    if (v3 == 0x7FFFFFFF)
    {
LABEL_8:
      uint64_t result = 0LL;
      int v6 = 8;
LABEL_9:
      *((_DWORD *)this + 6) = v6;
      return result;
    }

    if (v3 <= 1073741822) {
      int v4 = 2 * v3;
    }
    else {
      int v4 = 0x7FFFFFFF;
    }
  }

  if (v4 - v3 <= 4) {
    goto LABEL_8;
  }
  uint64_t result = (uint64_t)uprv_malloc(2LL * v4);
  if (!result)
  {
    int v6 = 7;
    goto LABEL_9;
  }

  uint64_t v7 = result;
  int v8 = *(char **)this;
  memcpy((void *)result, *(const void **)this, 2LL * *((int *)this + 3));
  if (v8 != v2) {
    uprv_free(v8);
  }
  *(void *)this = v7;
  *((_DWORD *)this + 2) = v4;
  return 1LL;
}

uint64_t icu::Edits::copyErrorTo(icu::Edits *this, UErrorCode *a2)
{
  UErrorCode v2 = *((_DWORD *)this + 6);
  if (v2 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    *a2 = v2;
    return 1LL;
  }

  return 0LL;
}

icu::Edits *icu::Edits::mergeAndAppend( icu::Edits *this, const icu::Edits *a2, const icu::Edits *a3, UErrorCode *a4)
{
  UErrorCode v6 = *((_DWORD *)this + 6);
  if (v6 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
LABEL_3:
    *a4 = v6;
    return this;
  }

  signed int v7 = 0;
  signed int v8 = 0;
  signed int v9 = 0;
  signed int v10 = 0;
  int v11 = 0;
  int v12 = 0;
  uint64_t v13 = *(void *)a2;
  uint64_t v28 = 0LL;
  uint64_t v29 = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 3);
  int v30 = 0;
  int v31 = v13;
  uint64_t v22 = *(void *)a3;
  uint64_t v34 = 0LL;
  uint64_t v35 = 0LL;
  *(void *)uint64_t v32 = 0LL;
  uint64_t v33 = 0LL;
  LODWORD(v13) = *((_DWORD *)a3 + 3);
  int v23 = 0;
  int v24 = v13;
  uint64_t v26 = 0LL;
  uint64_t v27 = 0LL;
  *(void *)uint64_t v25 = 0LL;
  int v14 = 1;
  while (1)
  {
    while (v9 || !v14)
    {
LABEL_18:
      if (!v8) {
        goto LABEL_19;
      }
LABEL_25:
      if (!v9) {
        goto LABEL_52;
      }
      if (v32[7])
      {
        if (v25[7])
        {
          if (v8 == v9)
          {
            icu::Edits::addReplace(this, v7 + v11, v10 + v12);
            signed int v8 = 0;
            signed int v9 = 0;
LABEL_30:
            int v11 = 0;
            int v12 = 0;
          }

          else
          {
LABEL_35:
            v11 += v7;
            v12 += v10;
            signed int v18 = v9 - v8;
            BOOL v19 = v8 < v9;
            if (v8 < v9)
            {
              signed int v8 = 0;
            }

            else
            {
              signed int v7 = 0;
              v8 -= v9;
            }

            if (v19) {
              signed int v9 = v18;
            }
            else {
              signed int v9 = 0;
            }
            if (v19) {
              signed int v10 = 0;
            }
          }
        }

        else
        {
          if (v8 > v9) {
            goto LABEL_35;
          }
          icu::Edits::addReplace(this, v7 + v11, v8 + v12);
          int v11 = 0;
          int v12 = 0;
          v9 -= v8;
          signed int v10 = v9;
          signed int v8 = 0;
        }
      }

      else if (v25[7])
      {
        signed int v17 = v8 - v9;
        if (v8 < v9) {
          goto LABEL_35;
        }
        icu::Edits::addReplace(this, v9 + v11, v10 + v12);
        signed int v9 = 0;
        int v11 = 0;
        int v12 = 0;
        signed int v7 = v17;
        signed int v8 = v17;
      }

      else
      {
        if (v11 | v12) {
          icu::Edits::addReplace(this, v11, v12);
        }
        if (v7 >= v10) {
          unsigned int v20 = v10;
        }
        else {
          unsigned int v20 = v7;
        }
        icu::Edits::addUnchanged(this, v20);
        int v11 = 0;
        int v12 = 0;
        v7 -= v20;
        signed int v9 = v10 - v20;
        signed int v8 = v7;
        signed int v10 = v9;
      }
    }

    if (v8) {
      BOOL v15 = v32[7] == 0;
    }
    else {
      BOOL v15 = 1;
    }
    int v16 = v15;
    while (1)
    {
      if (!icu::Edits::Iterator::next((icu::Edits::Iterator *)&v22, v25[4], a4))
      {
        int v14 = 0;
        signed int v9 = 0;
        goto LABEL_18;
      }

      signed int v9 = v26;
      signed int v10 = HIDWORD(v26);
      if ((_DWORD)v26) {
        break;
      }
      v12 += HIDWORD(v26);
      if (v16)
      {
        icu::Edits::addReplace(this, v11, v12);
        int v11 = 0;
        int v12 = 0;
      }
    }

    int v14 = 1;
    if (v8) {
      goto LABEL_25;
    }
LABEL_19:
    signed int v7 = v33;
    signed int v8 = HIDWORD(v33);
    if (HIDWORD(v33)) {
      goto LABEL_25;
    }
    v11 += v33;
    if (v9 != (_DWORD)v26)
    {
      signed int v8 = 0;
      if (v25[7]) {
        continue;
      }
    }

    icu::Edits::addReplace(this, v11, v12);
    signed int v8 = 0;
    goto LABEL_30;
  }

  if (v9)
  {
LABEL_52:
    UErrorCode v6 = *((_DWORD *)this + 6);
    if (v6 <= U_ILLEGAL_ARGUMENT_ERROR) {
      UErrorCode v6 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    goto LABEL_3;
  }

  if (v11 | v12) {
    icu::Edits::addReplace(this, v11, v12);
  }
  if (*(int *)a4 <= 0)
  {
    UErrorCode v6 = *((_DWORD *)this + 6);
    if (v6 > U_ZERO_ERROR) {
      goto LABEL_3;
    }
  }

  return this;
}

uint64_t icu::Edits::Iterator::Iterator(uint64_t this, const unsigned __int16 *a2, int a3, char a4, char a5)
{
  *(void *)this = a2;
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = a3;
  *(_DWORD *)(this + 16) = 0;
  *(_BYTE *)(this + 20) = a4;
  *(_BYTE *)(this + 21) = a5;
  *(void *)(this + 30) = 0LL;
  *(void *)(this + 22) = 0LL;
  *(void *)(this + 36) = 0LL;
  return this;
}

{
  *(void *)this = a2;
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = a3;
  *(_DWORD *)(this + 16) = 0;
  *(_BYTE *)(this + 20) = a4;
  *(_BYTE *)(this + 21) = a5;
  *(void *)(this + 30) = 0LL;
  *(void *)(this + 22) = 0LL;
  *(void *)(this + 36) = 0LL;
  return this;
}

uint64_t icu::Edits::Iterator::readLength(icu::Edits::Iterator *this, uint64_t a2)
{
  if ((int)a2 >= 61)
  {
    if ((_DWORD)a2 == 61)
    {
      uint64_t v2 = *(void *)this;
      uint64_t v3 = *((int *)this + 2);
      *((_DWORD *)this + 2) = v3 + 1;
      return *(_WORD *)(v2 + 2 * v3) & 0x7FFF;
    }

    else
    {
      uint64_t v4 = *((int *)this + 2);
      a2 = ((a2 & 1) << 30) | ((unsigned __int16)(*(_WORD *)(*(void *)this + 2 * v4) & 0x7FFF) << 15) | *(_WORD *)(*(void *)this + 2LL * ((int)v4 + 1)) & 0x7FFF;
      *((_DWORD *)this + 2) = v4 + 2;
    }
  }

  return a2;
}

uint64_t icu::Edits::Iterator::updateNextIndexes(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 32) += *(_DWORD *)(this + 24);
  if (*(_BYTE *)(this + 23)) {
    *(_DWORD *)(this + 36) += v1;
  }
  *(_DWORD *)(this + 40) += v1;
  return this;
}

uint64_t icu::Edits::Iterator::updatePreviousIndexes(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 32) -= *(_DWORD *)(this + 24);
  if (*(_BYTE *)(this + 23)) {
    *(_DWORD *)(this + 36) -= v1;
  }
  *(_DWORD *)(this + 40) -= v1;
  return this;
}

uint64_t icu::Edits::Iterator::noNext(icu::Edits::Iterator *this)
{
  *((_WORD *)this + 15) = 0;
  *(void *)((char *)this + 22) = 0LL;
  return 0LL;
}

uint64_t icu::Edits::Iterator::next(icu::Edits::Iterator *this, int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    UErrorCode v6 = (char *)this + 22;
    int v5 = *((char *)this + 22);
    if (v5 < 1)
    {
      if (v5 < 0 && *((int *)this + 4) >= 1)
      {
        ++*((_DWORD *)this + 2);
        uint64_t v3 = 1LL;
        *((_BYTE *)this + 22) = 1;
        return v3;
      }

      _BYTE *v6 = 1;
    }

    else
    {
      int v7 = *((_DWORD *)this + 7);
      *((_DWORD *)this + 8) += *((_DWORD *)this + 6);
      if (*((_BYTE *)this + 23)) {
        *((_DWORD *)this + 9) += v7;
      }
      *((_DWORD *)this + 10) += v7;
    }

    int v8 = *((_DWORD *)this + 4);
    BOOL v9 = __OFSUB__(v8, 1);
    int v10 = v8 - 1;
    if (v10 < 0 == v9)
    {
      if (v10)
      {
        *((_DWORD *)this + 4) = v10;
        return 1LL;
      }

      *((_DWORD *)this + 4) = 0;
    }

    int v11 = *((_DWORD *)this + 3);
    uint64_t v12 = *((int *)this + 2);
    if ((int)v12 < v11)
    {
      uint64_t v13 = *(void *)this;
      uint64_t v14 = v12 + 1;
      *((_DWORD *)this + 2) = v12 + 1;
      unsigned int v15 = *(unsigned __int16 *)(v13 + 2 * v12);
      if (v15 > 0xFFF) {
        goto LABEL_30;
      }
      *((_BYTE *)this + 23) = 0;
      unsigned int v16 = v15 + 1;
      if ((int)v14 >= v11)
      {
        BOOL v20 = 0;
      }

      else
      {
        unsigned int v15 = *(unsigned __int16 *)(v13 + 2 * v14);
        if (v15 > 0xFFF)
        {
          BOOL v20 = 1;
        }

        else
        {
          uint64_t v17 = 0LL;
          uint64_t v18 = v13 + 2 * v14 + 2;
          while (1)
          {
            v16 += v15 + 1;
            if (!(2 - v11 + (_DWORD)v12 + (_DWORD)v17)) {
              break;
            }
            unsigned int v15 = *(unsigned __int16 *)(v18 + 2 * v17++);
            if (v15 > 0xFFF)
            {
              int v19 = v12 + v17 + 1;
              *((_DWORD *)this + 2) = v19;
              BOOL v20 = v14 + v17 < v11;
              LODWORD(v14) = v19;
              goto LABEL_27;
            }
          }

          *((_DWORD *)this + 2) = v12 + v17 + 2;
          BOOL v20 = v14 + v17 + 1 < v11;
          LODWORD(v14) = v11;
        }
      }

LABEL_27:
      *((_DWORD *)this + 6) = v16;
      *((_DWORD *)this + 7) = v16;
      if (!a2) {
        return 1LL;
      }
      *((_DWORD *)this + 8) += v16;
      *((_DWORD *)this + 10) += v16;
      if (v20)
      {
        LODWORD(v14) = v14 + 1;
        *((_DWORD *)this + 2) = v14;
LABEL_30:
        *((_BYTE *)this + 23) = 1;
        unsigned int v21 = v15 >> 12;
        if (v15 >> 12 > 6)
        {
          *((_DWORD *)this + 6) = icu::Edits::Iterator::readLength(this, (v15 >> 6) & 0x3F);
          int Length = icu::Edits::Iterator::readLength(this, v15 & 0x3F);
          *((_DWORD *)this + 7) = Length;
          if (!*((_BYTE *)this + 21)) {
            return 1LL;
          }
          LODWORD(v14) = *((_DWORD *)this + 2);
          int v11 = *((_DWORD *)this + 3);
        }

        else
        {
          int v22 = (v15 >> 9) & 7;
          int v23 = (v15 & 0x1FF) + 1;
          if (!*((_BYTE *)this + 21))
          {
            *((_DWORD *)this + 6) = v21;
            *((_DWORD *)this + 7) = v22;
            if ((v15 & 0x1FF) != 0) {
              *((_DWORD *)this + 4) = v23;
            }
            return 1LL;
          }

          int Length = v23 * v22;
          *((_DWORD *)this + 6) = v23 * v21;
          *((_DWORD *)this + 7) = v23 * v22;
        }

        if ((int)v14 < v11)
        {
          while (1)
          {
            unsigned int v26 = *(unsigned __int16 *)(*(void *)this + 2LL * (int)v14);
            if (v26 < 0x1000) {
              break;
            }
            LODWORD(v14) = v14 + 1;
            *((_DWORD *)this + 2) = v14;
            if (v26 >> 12 > 6)
            {
              *((_DWORD *)this + 6) += icu::Edits::Iterator::readLength(this, (v26 >> 6) & 0x3F);
              int Length = *((_DWORD *)this + 7) + icu::Edits::Iterator::readLength(this, v26 & 0x3F);
              *((_DWORD *)this + 7) = Length;
              LODWORD(v14) = *((_DWORD *)this + 2);
              int v11 = *((_DWORD *)this + 3);
            }

            else
            {
              int v27 = (v26 & 0x1FF) + 1;
              Length += ((v26 >> 9) & 7) * v27;
              *((_DWORD *)this + 6) += v27 * (v26 >> 12);
              *((_DWORD *)this + 7) = Length;
            }

            uint64_t v3 = 1LL;
          }
        }

        return 1LL;
      }
    }

    uint64_t v3 = 0LL;
    *((_WORD *)this + 15) = 0;
    *(void *)UErrorCode v6 = 0LL;
    return v3;
  }

  return 0LL;
}

        sub_1807D74A8((uint64_t)v128, a2, (uint64_t)this, a4, a5, a6, a7, a8, v11, (uint64_t)"_");
        sub_1807D7510(a1, v128, (uint64_t)&v131, 0);
        BOOL v20 = (unsigned __int16)v132;
        int v19 = v132 & (v16 != 0);
        unsigned int v21 = v18;
        goto LABEL_28;
      }

      if (v16) {
        goto LABEL_27;
      }
      int v19 = 0;
      unsigned int v21 = 0;
    }

    else
    {
      unsigned int v21 = v14 != 0;
    }

      memset(v32, 0, sizeof(v32));
      uint64_t v13 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)((char *)v32 + 8) = v13;
      DWORD2(v32[1]) = *(_DWORD *)(a2 + 56);
      uint64_t v14 = (char)v10 - 97;
      if (v14 <= 0x19 && v7[1] && (unsigned int v15 = *(void *)(a2 + 8LL * v14 + 88)) != 0)
      {
        DWORD2(v32[1]) = (v15 >> 59) - 2;
        *(void *)&v32[1] = v13 + (v15 & 0x7FFFFFFFFFFFFFFLL);
        unsigned int v16 = 1;
      }

      else
      {
        unsigned int v16 = 0;
      }

      uint64_t v17 = sub_1807E10FC((icu::BytesTrie *)v32, (uint64_t)v7, v16);
      if (v17 < 0)
      {
        int v19 = 0LL;
        BOOL v20 = *(void *)(a2 + 64);
        DWORD2(v32[1]) = (v20 >> 59) - 2;
        *(void *)&v32[1] = *((void *)&v32[0] + 1) + (v20 & 0x7FFFFFFFFFFFFFFLL);
        uint64_t v18 = 4;
      }

      else
      {
        uint64_t v18 = 4 * (*v7 != 0);
        int v19 = (*(void *)&v32[1] - *((void *)&v32[0] + 1)) | ((unint64_t)(DWORD2(v32[1]) + 2) << 59);
        if (v17)
        {
          if (*a3) {
            v18 |= 2u;
          }
          if (v17 != 1)
          {
LABEL_51:
            if (!*a4)
            {
              int v22 = *(void *)(a2 + 296);
              int v23 = v17;
              int v24 = (const char **)(v22 + 48LL * v17);
              if (!v18)
              {
                uint64_t v25 = *v24;
                uint64_t v28 = v22 + 48LL * v17;
                a3 = *(const char **)(v28 + 8);
                a4 = *(char **)(v28 + 16);
                uint64_t v18 = *(_DWORD *)(v28 + 36);
                goto LABEL_75;
              }

      uint64_t v25 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 2LL * (int)v15);
      if (v25 >= *(unsigned __int16 *)(a1 + 26))
      {
        if (*(unsigned __int16 *)(a1 + 30) > v25)
        {
          if (a4) {
            return v7;
          }
          unsigned int v26 = sub_1807EBFB4((unint64_t)v7, (uint64_t)v14) + (v25 >> 3) - *(unsigned __int16 *)(a1 + 28);
          uint64_t v25 = sub_1807EA4C4(a1, v26);
          goto LABEL_34;
        }

        if (v25 >> 10 <= 0x3E) {
          int v30 = 0;
        }
        else {
          int v30 = v25 >> 1;
        }
        if (a4 == 1 && !v30) {
          return v7;
        }
        int v31 = sub_1807EBFB4((unint64_t)v7, (uint64_t)v14);
        uint64_t v32 = v38;
        if (v32 != 1) {
          return v14;
        }
LABEL_77:
        int v7 = v14;
        if (v14 >= a3) {
          return v7;
        }
      }

      else
      {
        unsigned int v26 = -1;
LABEL_34:
        int v27 = *(unsigned __int16 *)(a1 + 14);
        if (v25 >= v27)
        {
          if (v27 == v25 || (*(unsigned __int16 *)(a1 + 16) | 1) == v25)
          {
            if ((v26 & 0x80000000) != 0) {
              unsigned int v26 = sub_1807EBFB4((unint64_t)v7, (uint64_t)v14);
            }
            int v40 = 0;
            uint64_t v28 = (int)(v26 - 44032) % 28;
            src[0] = (__int16)(v26 + 21504) / 588 + 4352;
            src[1] = (int)(v26 - 44032) / 28 % 21 + 4449;
            if (v28)
            {
              int v40 = v28 + 4519;
              uint64_t v29 = 3LL;
            }

            else
            {
              uint64_t v29 = 2LL;
            }
          }

          else
          {
            uint64_t v33 = (unsigned __int16 *)(*(void *)(a1 + 48) + ((unsigned __int16)v25 & 0xFFFE));
            uint64_t v34 = *v33;
            if ((v34 & 0x80) != 0) {
              uint64_t v35 = *((_BYTE *)v33 - 1);
            }
            else {
              uint64_t v35 = 0;
            }
            if (a4 == 1 && !v35) {
              return v7;
            }
          }
        }

        else
        {
          if ((v26 & 0x80000000) != 0) {
            unsigned int v26 = sub_1807EBFB4((unint64_t)v7, (uint64_t)v14);
          }
        }

        if (a4 == 1)
        {
          goto LABEL_77;
        }

        if (a4 != 2 || (v25 & 1) == 0) {
          goto LABEL_77;
        }
        if (!a5 || v25 == 1) {
          return v14;
        }
        if (*(unsigned __int16 *)(a1 + 26) <= v25)
        {
          if ((v25 & 6) < 3) {
            return v14;
          }
          goto LABEL_77;
        }

        __int128 v36 = *(unsigned __int16 *)(*(void *)(a1 + 48) + ((unsigned __int16)v25 & 0xFFFE)) < 0x200u || v14 >= a3;
        int v7 = v14;
        if (v36) {
          return v7;
        }
      }
    }
  }

  return 0LL;
}

  if (v12) {
    return (v13 - 1);
  }
  else {
    return ~v13;
  }
}

    if ((unint64_t)v14 >= v7)
    {
      BOOL v9 = v19;
      goto LABEL_54;
    }

    if (v8 < 1) {
      break;
    }
    BOOL v20 = 0LL;
    unsigned int v21 = 1LL;
    int v22 = v14;
    BOOL v9 = v19;
    while (1)
    {
      uint64_t v4 = v22 + 1;
      int v10 = v14[v20];
      if (v10 > 0x20) {
        break;
      }
      if (v10 != 32) {
        int v11 = 64;
      }
      v6[v20] = v10;
      ++v9;
      v19[v20] = v3 + v20;
      if ((unint64_t)v4 >= v7)
      {
        uint64_t v14 = v22 + 1;
        v6 += v20 + 1;
        goto LABEL_54;
      }

      ++v20;
      --v21;
      ++v22;
      if (v8 + (int)v21 < 2)
      {
        v6 += v20;
        uint64_t v14 = v4;
        goto LABEL_36;
      }
    }

    v6 += v20;
    v8 -= v20;
    uint64_t v12 = v20 + v3;
    v3 += v20 + 1;
    if ((v10 & 0xFC00) == 0xD800) {
      goto LABEL_38;
    }
    uint64_t v14 = v22 + 1;
  }

  BOOL v9 = v19;
LABEL_36:
  *a2 = 15;
LABEL_54:
  *(_DWORD *)(v5 + 80) = v11;
  *(_DWORD *)(v5 + 84) = -v10 & ((int)v10 >> 31);
  *(void *)(v2 + 16) = v14;
  *(void *)(v2 + 32) = v6;
  *(void *)(v2 + 48) = v9;
  return result;
}

    int v24 = v9;
    uint64_t v25 = v8;
    uint64_t result = sub_18083F67C((i << 10) - 56613888 + v13, &v87);
    if ((result & 0x80000000) != 0)
    {
      int v8 = 0LL;
      *v6++ = 15;
      --v7;
      uint64_t v32 = 4;
      int i = v13 | (i << 16);
      BOOL v9 = v24;
    }

    else
    {
      unsigned int v26 = result;
      int v27 = *(char *)(v4 + 75);
      uint64_t v28 = *(_BYTE *)(v4 + v27 + 76);
      uint64_t v29 = v28;
      else {
        int v30 = v27 + 1;
      }
      *(_BYTE *)(v4 + 75) = v30;
      int v31 = v87;
      *(_DWORD *)(v4 + 4LL * v28 + 32) = v87;
      uint64_t result = sub_18083F604(v4, v28);
      BOOL v9 = v31;
      LOBYTE(v86) = v29;
      int i = ((v26 << 8) - 0x20000) | (v29 << 21) | (v14 - v31) | 0xB000080;
      uint64_t v32 = 4;
      int v8 = v25;
    }

    int v5 = v82;
LABEL_99:
    if (v7 < v32)
    {
LABEL_143:
      int v75 = v85;
      int v76 = v32 - v7;
      int v77 = v85 + 104;
      switch(v76)
      {
        case 1:
          goto LABEL_147;
        case 2:
          goto LABEL_146;
        case 3:
          goto LABEL_145;
        case 4:
          int v77 = v85 + 105;
          v85[104] = HIBYTE(i);
LABEL_145:
          *v77++ = BYTE2(i);
LABEL_146:
          *v77++ = BYTE1(i);
LABEL_147:
          *int v77 = i;
          break;
        default:
          break;
      }

      v85[91] = v76;
      if (v76 == 4) {
        int v78 = 0;
      }
      else {
        int v78 = i >> (8 * v76);
      }
      if (v7 == 1)
      {
        int v80 = a2;
        int v79 = v84;
      }

      else
      {
        if (v7 != 2)
        {
          if (v7 != 3)
          {
            int i = 0;
            int v81 = 15;
            int v79 = v84;
            goto LABEL_166;
          }

          *v6++ = BYTE2(v78);
        }

        int v80 = a2;
        int v79 = v84;
        *v6++ = BYTE1(v78);
      }

      int i = 0;
      *v6++ = v78;
      int v81 = 15;
LABEL_167:
      *int v80 = v81;
      goto LABEL_168;
    }

    if (v32 != 2)
    {
      if (v32 != 3) {
        *v6++ = HIBYTE(i);
      }
      *v6++ = BYTE2(i);
    }

    *(_WORD *)UErrorCode v6 = bswap32(i) >> 16;
    v6 += 2;
    v7 -= v32;
  }

  if (v12)
  {
LABEL_19:
    if ((unint64_t)v3 < v5)
    {
      uint64_t v18 = *v3;
      if ((v18 & 0xFC00) != 0xDC00)
      {
        LOBYTE(v8) = 0;
        goto LABEL_164;
      }

      int v19 = 0LL;
      ++v3;
      BOOL v20 = v18 + (i << 10) - 56613888;
      unsigned int v21 = 57472;
      while (v20 - *(_DWORD *)(v4 + 4 * v19 + 32) >= 0x80)
      {
        ++v19;
        v21 += 256;
        if (v19 == 8) {
          goto LABEL_46;
        }
      }

      if ((v19 & 0x80) != 0 || (unint64_t)v3 < v5 && (*v3 - 13312) >> 10 < 0x29)
      {
LABEL_46:
        if ((unint64_t)v3 >= v5
          || *v3 != (unsigned __int16)i
          || (v35 = v9, uint64_t result = sub_18083F67C(v20, &v87), v9 = v35, (result & 0x80000000) != 0))
        {
          int v8 = 0LL;
          int i = v18 | (i << 16);
          uint64_t v32 = 4;
          goto LABEL_99;
        }

        __int128 v36 = result;
        uint64_t v37 = *(char *)(v4 + 75);
        int v38 = *(char *)(v4 + v37 + 76);
        LOBYTE(v86) = *(_BYTE *)(v4 + v37 + 76);
        else {
          int v39 = v37 + 1;
        }
        *(_BYTE *)(v4 + 75) = v39;
        int v40 = v87;
        *(_DWORD *)(v4 + 4LL * v38 + 32) = v87;
        uint64_t result = sub_18083F604(v4, v38);
        BOOL v9 = v40;
        int i = ((v36 << 8) + 268304384) | (v38 << 21) | (v20 - v40) | 0xF1000080;
        uint64_t v32 = 4;
      }

      else
      {
        int v43 = *(unsigned int *)(v4 + 4 * v19 + 32);
        LOBYTE(v86) = v19;
        uint64_t result = sub_18083F604(v4, v19);
        BOOL v9 = v43;
        int i = v21 | (v20 - v43);
        uint64_t v32 = 2;
      }

      int v8 = 1LL;
      goto LABEL_99;
    }
  }

  else if ((unint64_t)v3 < v5)
  {
    if (v7 < 1)
    {
      LOBYTE(v8) = 0;
      goto LABEL_157;
    }

    uint64_t v33 = 0LL;
    while (1)
    {
      int i = v3[v33 / 2];
      if ((i - 13312) >> 10 > 0x28) {
        break;
      }
      if (v7 < 2)
      {
        LOBYTE(v8) = 0;
        uint64_t v3 = (unsigned __int16 *)((char *)v3 + v33 + 2);
        v6 += v33;
        int v7 = 1;
        uint64_t v32 = 2;
        goto LABEL_143;
      }

      uint64_t v34 = &v6[v33];
      *uint64_t v34 = BYTE1(i);
      v34[1] = i;
      if ((unint64_t)&v3[v33 / 2 + 1] >= v5)
      {
        LOBYTE(v8) = 0;
        int i = 0;
        uint64_t v3 = (unsigned __int16 *)((char *)v3 + v33 + 2);
        UErrorCode v6 = v34 + 2;
        goto LABEL_162;
      }

      v33 += 2LL;
      int v11 = v7 < 3;
      v7 -= 2;
      if (v11)
      {
        LOBYTE(v8) = 0;
        int i = 0;
        uint64_t v3 = (unsigned __int16 *)((char *)v3 + v33);
        v6 += v33;
LABEL_157:
        int v81 = 15;
        goto LABEL_165;
      }
    }

    UChar32 v41 = &v3[v33 / 2 + 1];
    int v42 = &v6[v33];
    if ((i - 13312) >> 8 < 0xBF)
    {
      if (i >> 13 <= 6)
      {
        if ((i & 0x400) != 0)
        {
          LOBYTE(v8) = 0;
          uint64_t v3 = (unsigned __int16 *)((char *)v3 + v33 + 2);
          v6 += v33;
          goto LABEL_164;
        }

        uint64_t v3 = (unsigned __int16 *)((char *)v3 + v33 + 2);
        v6 += v33;
        goto LABEL_19;
      }

      int v8 = 0LL;
      i |= 0xF00000u;
      uint64_t v32 = 3;
    }

    else if ((unint64_t)v41 >= v5 || (*v41 - 13312) >> 10 >= 0x29)
    {
      if (i - 48 >= 0xA && i - 97 >= 0x1A && i - 65 >= 0x1A)
      {
        BOOL v46 = 0LL;
        int v47 = 57472;
        while (i - *(_DWORD *)(v4 + 4 * v46 + 32) >= 0x80)
        {
          ++v46;
          v47 += 256;
          if (v46 == 8) {
            goto LABEL_80;
          }
        }

        if ((v46 & 0x80) != 0)
        {
LABEL_80:
          uint64_t v49 = v9;
          uint64_t result = sub_18083F67C(i, &v87);
          if ((result & 0x80000000) != 0)
          {
            int v8 = 0LL;
            uint64_t v32 = 2;
            uint64_t v3 = v41;
            UErrorCode v6 = v42;
            BOOL v9 = v49;
          }

          else
          {
            int v50 = result;
            BOOL v51 = *(char *)(v4 + 75);
            int v52 = *(_BYTE *)(v4 + v51 + 76);
            uint64_t v53 = v52;
            else {
              uint64_t v54 = v51 + 1;
            }
            *(_BYTE *)(v4 + 75) = v54;
            int v55 = v87;
            *(_DWORD *)(v4 + 4LL * v52 + 32) = v87;
            uint64_t result = sub_18083F604(v4, v52);
            BOOL v9 = v55;
            LOBYTE(v86) = v53;
            int i = ((v53 << 16) + 15204352) | (v50 << 8) | (i - v55) | 0x80;
            uint64_t v32 = 3;
            int v8 = 1LL;
            uint64_t v3 = v41;
            UErrorCode v6 = v42;
          }

          goto LABEL_99;
        }

        BOOL v48 = *(unsigned int *)(v4 + 4 * v46 + 32);
        LOBYTE(v86) = v46;
        uint64_t result = sub_18083F604(v4, v46);
        BOOL v9 = v48;
        int i = v47 | (i - v48);
      }

      else
      {
        i |= (v86 << 8) + 57344;
      }

      uint64_t v32 = 2;
      int v8 = 1LL;
    }

    else
    {
      int v8 = 0LL;
      uint64_t v32 = 2;
    }

    uint64_t v3 = v41;
    UErrorCode v6 = v42;
    goto LABEL_99;
  }

  LOBYTE(v8) = 0;
LABEL_162:
  int v79 = v84;
  int v75 = v85;
LABEL_168:
  *(_BYTE *)(v4 + 72) = v8;
  *(_BYTE *)(v4 + 73) = v86;
  *((_DWORD *)v75 + 21) = i;
  *(void *)(v79 + 16) = v3;
  *(void *)(v79 + 32) = v6;
  return result;
}

      int v22 = *(_DWORD *)(v19 + 12);
LABEL_28:
      if (v18 == 254)
      {
        int v23 = -1;
        if ((*v21 & 0xFC00) == 0xD800 && v22 != 1)
        {
          if ((v21[1] & 0xFC00) == 0xDC00) {
            int v23 = -2;
          }
          else {
            int v23 = -1;
          }
        }

        uint64_t v18 = v23 + v22;
      }

      if (v18 >= v9) {
        int v24 = v9;
      }
      else {
        int v24 = v18;
      }
      LODWORD(v25) = v22 - v24;
      if ((int)(v22 - v24) <= (int)v8)
      {
        unsigned int v26 = (int)v22;
        int v27 = (int)v22 - 1LL;
        uint64_t v25 = (int)v25;
        uint64_t v28 = a3 - (uint64_t)(int)v22;
        uint64_t v29 = v22 + 1;
        do
        {
          int v30 = v69;
          int v31 = LODWORD(v70[0]) + v25 - v30;
          uint64_t v32 = (char *)v68;
          if (!*((_BYTE *)v68 + v31))
          {
            uint64_t v33 = (int)v8 - v25;
            uint64_t v34 = &s[v33];
            uint64_t v35 = v29;
            __int128 v36 = v34;
            uint64_t v37 = v21;
            while (*v36 == *v37)
            {
              ++v37;
              ++v36;
              if ((int)--v35 <= 1)
              {
                if (v33 >= 1 && (*(v34 - 1) & 0xFC00) == 0xD800 && (*v34 & 0xFC00) == 0xDC00
                  || v33 < v28 && (v34[v27] & 0xFC00) == 0xD800 && (v34[v26] & 0xFC00) == 0xDC00)
                {
                  break;
                }

                if ((_DWORD)v8 != (_DWORD)v25)
                {
                  *((_BYTE *)v68 + v31) = 1;
                  ++HIDWORD(v69);
                  break;
                }

                uint64_t v13 = 0LL;
                goto LABEL_126;
              }
            }
          }

          if (!v24) {
            break;
          }
          --v24;
          ++v25;
        }

        while ((_DWORD)v8 + 1 != (_DWORD)v25);
      }

      goto LABEL_39;
    }

    int v7 = 0LL;
    int v19 = 1;
    goto LABEL_28;
  }

  return u_terminateUChars((uint64_t)dest, a4, 0LL, a6);
}

    ++v8;
  }

  while (a2 != v8);
  if (v9)
  {
    uint64_t v18 = *a5;
    int v19 = *((void *)a5 + 2);
    return sub_180879334(a1, a2, a2, a3, a4, 1, (uint64_t)&v18);
  }

  return a2;
}

  if (v14 == *(_DWORD *)(a7 + 8)) {
    a3 = sub_180879720(a1, a2, a5);
  }
  if (v14 == *(_DWORD *)(a7 + 4)) {
    a3 = sub_1808798CC(a1, a2, a5);
  }
  unsigned int v16 = 0;
  uint64_t v18 = 0;
  uint64_t v17 = 0;
LABEL_32:
  int v24 = v14 == 1 && a6 == 1;
  uint64_t v25 = v24;
  if (v24 || v16 || v18)
  {
    a3 = a2;
    if ((int)a2 >= 1)
    {
      unsigned int v26 = 0LL;
      int v27 = *(_WORD *)a7;
      while (1)
      {
        if (!v17
          || (uint64_t v28 = a1[v26], (unsigned __int16)(v28 + 335) > 0xDu)
          || ((0xCCCuLL >> (v28 + 79)) & 1) != 0)
        {
          if (v16 && (int v30 = a1[v26], (unsigned __int16)(v30 + 373) >= 0xFFFEu))
          {
            if (!v26) {
              goto LABEL_58;
            }
            uint64_t v33 = (v26 - 1);
            a1[v26] = word_180A2C4B2[v30 - 65161];
            a1[v33] = -384;
          }

          else
          {
            if (!v25) {
              goto LABEL_59;
            }
            int v31 = &a1[v26];
            uint64_t v32 = v31[1];
            if (a1[v26] != 32)
            {
LABEL_58:
              *a5 = 20;
              goto LABEL_59;
            }

            v31[1] = 1604;
            a1[v26] = word_180A2C4A2[v32 - 65269];
          }
        }

        else
        {
          if (!v26) {
            goto LABEL_58;
          }
          uint64_t v29 = (v26 - 1);
          a1[v29] = v27;
        }

        *(void *)(a1 + 16) = utrie_defaultGetFoldingOffset;
        return v7;
      }
    }

    else
    {
      int v7 = (4 * v13) | 0x1040u;
      if ((int)v7 <= a3)
      {
        *(_BYTE *)(a1 + 36) = 1;
        *(_DWORD *)(a1 + 32) = a4;
        *(void *)a1 = __b;
        bzero(__b, 0x1040uLL);
        if (a5 != a4) {
          memset_pattern16(__b + 3456, asc_180A2CBA0, 0x40uLL);
        }
        uint64_t v18 = 0LL;
        int v19 = *(int *)(a1 + 24);
        BOOL v20 = &__b[2 * v19];
        *(void *)(a1 + 8) = v20;
        unsigned int v21 = vdupq_n_s32(a4);
        do
        {
          *(int32x4_t *)&v20[v18] = v21;
          v18 += 16LL;
        }

        while (v18 != 1024);
        if (a5 != a4)
        {
          int v22 = 0LL;
          int v23 = vdupq_n_s32(a5);
          int v24 = &__b[2 * v19 + 1024];
          do
          {
            *(int32x4_t *)&v24[v22] = v23;
            v22 += 16LL;
          }

          while (v22 != 128);
        }

        goto LABEL_27;
      }
    }

    *a7 = 15;
    return v7;
  }

  return 0xFFFFFFFFLL;
}

  int v27 = *((_DWORD *)v9 + 2);
  if (!v27)
  {
    uint64_t v29 = 0;
LABEL_36:
    int v30 = 0;
    goto LABEL_37;
  }

  else {
    uint64_t v28 = *(unsigned __int16 *)(a1 + 112) >> 5;
  }
  uint64_t v29 = v28 * v27;
  if (v27 < 1) {
    goto LABEL_36;
  }
  int v30 = *(_DWORD *)(*((void *)v9 + 3) + 4LL * (v27 - 1));
  do
  {
    *((_DWORD *)v9 + 2) = v27 - 1;
    (*(void (**)(const void *, void, void, uint64_t))(*(void *)a2 + 32LL))( a2,  *(unsigned int *)(*((void *)v9 + 3) + 4LL * (v27 - 1)),  *(unsigned int *)(*((void *)v9 + 3) + 4LL * (v27 - 1)),  a1 + 104);
    int v27 = *((_DWORD *)v9 + 2);
  }

  while (v27 > 0);
  LODWORD(v18) = a3[3];
LABEL_37:
  int v31 = a3[1] + v29;
  uint64_t v32 = (_DWORD)v18 + v29;
  a3[3] = v32;
  if (a4) {
    uint64_t v32 = v30 + v29;
  }
  a3[1] = v31;
  a3[2] = v32;
  umtx_lock(0LL);
  if (!*(void *)(a1 + 88))
  {
    *(void *)(a1 + 88) = WordInstance;
    WordInstance = 0LL;
  }

  if (!*(void *)(a1 + 96))
  {
    *(void *)(a1 + 96) = v9;
    BOOL v9 = 0LL;
  }

  umtx_unlock(0LL);
  uint64_t result = (icu::UVector32 *)icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)v35);
  if (v9) {
    goto LABEL_44;
  }
LABEL_45:
  if (WordInstance) {
    return (icu::UVector32 *)(*(uint64_t (**)(char *))(*(void *)WordInstance + 8LL))(WordInstance);
  }
  return result;
}

  if (*((unsigned __int16 *)a2 + 4) >= 0x20u)
  {
    memset((char *)v65 + 8, 0, 56);
    *(void *)&v65[0] = off_18971B688;
    WORD4(v65[0]) = 2;
    (*(void (**)(uint64_t, const icu::UnicodeString *, _OWORD *, UErrorCode *))(*(void *)NFDInstance + 24LL))( NFDInstance,  a2,  v65,  a5);
    int v24 = icu::UnicodeString::countChar32(a2, 0, 0x7FFFFFFF);
    if (v24 > 2) {
      goto LABEL_34;
    }
    uint64_t v25 = v24;
    *(void *)c = 0LL;
    int v64 = 0LL;
    if (icu::UnicodeString::toUTF32(a2, c, 4, a5) != v24)
    {
      int v27 = 27LL;
      goto LABEL_35;
    }

    if (u_getCombiningClass(c[0]) || v25 >= 2 && (unsigned int v26 = (c[1] - 12441), v26 >= 2))
    {
LABEL_34:
      int v27 = 16LL;
LABEL_35:
      *a5 = v27;
      goto LABEL_36;
    }

    icu::UnicodeString::~UnicodeString((void *)v26, (icu::UnicodeString *)v65);
  }

  int v30 = *((unsigned __int16 *)a3 + 4);
  if ((v30 & 0x8000u) == 0LL) {
    int v31 = v30 >> 5;
  }
  else {
    int v31 = *((_DWORD *)a3 + 3);
  }
  if (v31 > v14)
  {
    uint64_t v32 = 0LL;
    uint64_t v33 = (char *)a3 + 10;
    if ((v30 & 2) == 0) {
      uint64_t v33 = (char *)*((void *)a3 + 3);
    }
    do
    {
      if ((v30 & 0x8000) != 0)
      {
        uint64_t v34 = *((unsigned int *)a3 + 3);
      }

      else
      {
        uint64_t v34 = v30 >> 5;
        if (v32 >= v30 >> 5) {
          goto LABEL_69;
        }
      }

      if (v34 <= v32) {
        uint64_t v35 = 0xFFFF;
      }
      else {
        uint64_t v35 = *(unsigned __int16 *)&v33[2 * v32];
      }
      ++v32;
    }

    while ((vmaxv_u16( vcgt_u16( (uint16x4_t)0x2BA4001C00130015LL,  (uint16x4_t)vadd_s16(vdup_n_s16(v35), (int16x4_t)0x5400EE59EF00EE9FLL))) & 1) == 0);
    goto LABEL_67;
  }

        if (v17 > v14)
        {
          int v11 = v17 & 0xFF8;
          goto LABEL_3;
        }

        unsigned int v21 = icu::CollationFastLatin::nextPair(v13, v19, v17, a4, 0LL, (int *)&v89 + 1, &v91);
        if (v21 == 1) {
          return 4294967294LL;
        }
        else {
          int v22 = 0;
        }
        else {
          int v11 = v22;
        }
        if (v11) {
          goto LABEL_3;
        }
      }

      int v11 = *(unsigned __int16 *)(a2 + 2 * v19);
      if (*(_WORD *)(a2 + 2 * v19)) {
        goto LABEL_3;
      }
      if ((v9 & 2) != 0)
      {
        BOOL v20 = *(unsigned __int16 *)(a4 + 2 * v18);
      }

      else
      {
        BOOL v20 = *(unsigned __int16 *)(a4 + 2 * v18);
      }

      goto LABEL_25;
    }

  if (!v6) {
    return result;
  }
  *a2 = U_INVALID_FORMAT_ERROR;
  uint64_t v14 = "reset not followed by a relation";
LABEL_30:
  *((void *)this + 6) = v14;
  if (*((void *)this + 5)) {
    return (uint64_t)icu::CollationRuleParser::setErrorContext((char *)this);
  }
  return result;
}

  if (v11 >= 1)
  {
    do
    {
      uint64_t v28 = 121;
      this = icu::UnicodeString::doAppend((uint64_t)a3, (uint64_t)&v28, 0, 1LL);
      --v11;
    }

    while (v11);
  }

  if ((_DWORD)v24)
  {
    if ((int)v24 >= 3)
    {
      BOOL v20 = v24 - 1;
      unsigned int v21 = v20 + 1;
      do
      {
        uint64_t v28 = 77;
        this = icu::UnicodeString::doAppend((uint64_t)a3, (uint64_t)&v28, 0, 1LL);
        --v21;
      }

      while (v21);
    }

    else
    {
      uint64_t v28 = 77;
      this = icu::UnicodeString::doAppend((uint64_t)a3, (uint64_t)&v28, 0, 1LL);
    }
  }

  if (HIDWORD(v24))
  {
    if (SHIDWORD(v24) >= 4)
    {
      int v22 = HIDWORD(v24) - 1;
      int v23 = v22 + 1;
      do
      {
        uint64_t v28 = 69;
        this = icu::UnicodeString::doAppend((uint64_t)a3, (uint64_t)&v28, 0, 1LL);
        --v23;
      }

      while (v23);
    }

    else
    {
      uint64_t v28 = 69;
      this = icu::UnicodeString::doAppend((uint64_t)a3, (uint64_t)&v28, 0, 1LL);
    }
  }

  if ((_DWORD)v25)
  {
    uint64_t v28 = 100;
    this = icu::UnicodeString::doAppend((uint64_t)a3, (uint64_t)&v28, 0, 1LL);
  }

  if (v12)
  {
    uint64_t v28 = v12;
    this = icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v28, 0, 1LL);
  }

  if (HIDWORD(v25))
  {
    uint64_t v28 = 109;
    this = icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v28, 0, 1LL);
  }

  if ((_DWORD)v26)
  {
    uint64_t v28 = 122;
    this = icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v28, 0, 1LL);
  }

  if (HIDWORD(v26))
  {
    uint64_t v28 = 118;
    return icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v28, 0, 1LL);
  }

  return this;
}

  if (a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v11;
  }
}

    int v8 = *(_WORD **)(a1 + 24);
    if ((v1 & 2) != 0) {
      int v8 = (_WORD *)(a1 + 10);
    }
    BOOL v9 = *v8 == 49 && v6 >= 2;
    return v9 && v8[1] == 49 && (v2 == 2 || v6 >= 3 && v8[2] == 32);
  }

  return v5;
}

        v6 += v11;
        a2 = 9;
        break;
      default:
LABEL_57:
        abort();
    }

  ures_getByKey(a3, "typeOffsets", (uint64_t)v43, a5);
  *(void *)(a1 + 112) = ures_getIntVector((uint64_t)v43, (int *)&v36, a5);
  BOOL v20 = *a5;
  unsigned int v21 = v36;
  if (*a5 <= 0 && (v36 - 2 > 0x7FFC || (v36 & 1) != 0))
  {
    BOOL v20 = 3;
    *a5 = 3;
  }

  *(_WORD *)(a1 + 104) = v21 >> 1;
  *(void *)(a1 + 120) = 0LL;
  if ((__int16)(*(_WORD *)(a1 + 74) + *(_WORD *)(a1 + 72) + *(_WORD *)(a1 + 76)) < 1)
  {
    if (v20 > 0) {
      goto LABEL_49;
    }
    goto LABEL_38;
  }

  ures_getByKey(a3, "typeMap", (uint64_t)v43, a5);
  *(void *)(a1 + 120) = ures_getBinary((uint64_t)v43, (int *)&v36, a5);
  if (*a5 == 2)
  {
LABEL_33:
    *a5 = 3;
    goto LABEL_49;
  }

  if (*a5 <= 0)
  {
LABEL_38:
    StringByKey = ures_getStringByKey(a3, "finalRule", (int *)&v36, a5);
    ures_getByKey(a3, "finalRaw", (uint64_t)v43, a5);
    Int = ures_getInt((uint64_t)v43, a5);
    ures_getByKey(a3, "finalYear", (uint64_t)v43, a5);
    int v24 = ures_getInt((uint64_t)v43, a5);
    if (*a5 <= 0)
    {
      uint64_t v25 = v24;
      memset(v42, 0, sizeof(v42));
      uint64_t v35 = StringByKey;
      icu::UnicodeString::UnicodeString(v42, 1LL, &v35);
      Rule = icu::TimeZone::loadRule(a2, (uint64_t)v42, 0LL, a5);
      IntVector = ures_getIntVector(Rule, (int *)&v36, a5);
      if (*a5 <= 0 && v36 == 11)
      {
        uint64_t v29 = IntVector;
        int v38 = 0u;
        UChar32 v41 = 0LL;
        int v40 = 0u;
        int v39 = 0u;
        uint64_t v37 = (UChar *)off_18971B688;
        LOWORD(v38) = 2;
        int v30 = (icu::BasicTimeZone *)icu::UMemory::operator new((uint64_t *)2, (icu::UMemory *)0xA0, v28);
        if (v30)
        {
          *(void *)(a1 + 128) = icu::SimpleTimeZone::SimpleTimeZone( v30,  1000 * Int,  &v37,  *(_BYTE *)v29,  *((_BYTE *)v29 + 4),  *((_BYTE *)v29 + 8),  1000 * v29[3],  v29[4],  v29[5],  v29[6],  v29[7],  1000 * v29[8],  v29[9],  1000 * v29[10],  (UErrorCode *)a5);
          *(_DWORD *)(a1 + 144) = v25;
          int v31 = sub_1808FA338(v25, 0, 1);
          uint64_t v32 = (uint64_t)&word_180A2BED8[148];
          *(double *)(a1 + 136) = v31 * 86400000.0;
        }

        else
        {
          *(void *)(a1 + 128) = 0LL;
          uint64_t v32 = 7LL;
          *a5 = 7;
        }

        icu::UnicodeString::~UnicodeString((void *)v32, (icu::UnicodeString *)&v37);
      }

      else
      {
        *a5 = 3;
      }

      ures_close(Rule);
      icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)v42);
    }

    else if (*a5 == 2)
    {
      *a5 = 0;
    }
  }

    if (v6 == 16)
    {
      if (v7 <= 0)
      {
        int v19 = 0;
        BOOL v20 = 11LL;
        while (1)
        {
          unsigned int v21 = a1[v20] - 48;
          if (v21 >= 0xA) {
            unsigned int v21 = -1;
          }
          if ((v21 & 0x80000000) != 0) {
            goto LABEL_42;
          }
          int v19 = v21 + 10 * v19;
          uint64_t v13 = v20++ >= 0xC;
          if (v13)
          {
            int v22 = 0;
            int v23 = 14LL;
            while (1)
            {
              int v24 = a1[v23] - 48;
              if (v24 >= 0xA) {
                int v24 = -1;
              }
              if ((v24 & 0x80000000) != 0) {
                break;
              }
              int v22 = v24 + 10 * v22;
              uint64_t v18 = v23++ > 0xE;
              if (v18)
              {
                uint64_t v25 = (double)(int)(3600000 * v19);
                uint64_t v2 = (double)(int)(60000 * v22);
                return v25 + sub_1808FA338(v9, v8 - 1, v10) * 86400000.0 + v2;
              }
            }

            goto LABEL_42;
          }
        }
      }
    }

    else
    {
      uint64_t v2 = 0.0;
      uint64_t v25 = 0.0;
      if (v7 <= 0) {
        return v25 + sub_1808FA338(v9, v8 - 1, v10) * 86400000.0 + v2;
      }
    }
  }

  return v2;
}

uint64_t icu::Edits::Iterator::previous(icu::Edits::Iterator *this, UErrorCode *a2)
{
  uint64_t v4 = (char *)this + 22;
  if (*((char *)this + 22) < 0)
  {
LABEL_11:
    signed int v6 = *((_DWORD *)this + 4);
    if (v6 <= 0)
    {
      LODWORD(v7) = *((_DWORD *)this + 2);
    }

    else
    {
      uint64_t v7 = *((int *)this + 2);
      if (v6 <= (*(_WORD *)(*(void *)this + 2 * v7) & 0x1FFu))
      {
        *((_DWORD *)this + 4) = v6 + 1;
        int v17 = *((_DWORD *)this + 7);
        *((_DWORD *)this + 8) -= *((_DWORD *)this + 6);
        if (*((_BYTE *)this + 23)) {
          *((_DWORD *)this + 9) -= v17;
        }
        int v16 = *((_DWORD *)this + 10) - v17;
        goto LABEL_50;
      }

      *((_DWORD *)this + 4) = 0;
    }

    if ((int)v7 <= 0)
    {
      uint64_t result = 0LL;
      *((_WORD *)v4 + 4) = 0;
      *(void *)uint64_t v4 = 0LL;
      return result;
    }

    uint64_t v8 = *(void *)this;
    uint64_t v9 = (v7 - 1);
    *((_DWORD *)this + 2) = v9;
    unsigned int v10 = *(unsigned __int16 *)(v8 + 2LL * v9);
    if (v10 <= 0xFFF)
    {
      *((_BYTE *)this + 23) = 0;
      unsigned int v11 = v10 + 1;
      BOOL v12 = v7 >= 2;
      int v13 = v7 - 2;
      if (v12)
      {
        unint64_t v14 = v9 + 1;
        do
        {
          unsigned int v15 = *(unsigned __int16 *)(v8 + 2LL * (v14 - 2));
          if (v15 > 0xFFF) {
            break;
          }
          *((_DWORD *)this + 2) = v13;
          v11 += v15 + 1;
          --v14;
          --v13;
        }

        while (v14 > 1);
      }

      *((_DWORD *)this + 6) = v11;
      *((_DWORD *)this + 7) = v11;
      *((_DWORD *)this + 8) -= v11;
      int v16 = *((_DWORD *)this + 10) - v11;
LABEL_50:
      *((_DWORD *)this + 10) = v16;
      return 1LL;
    }

    *((_BYTE *)this + 23) = 1;
    unsigned int v18 = v10 >> 12;
    if (v10 >> 12 > 6)
    {
      if ((v10 & 0x8000) != 0)
      {
        int v22 = (__int16 *)(v8 + 2 * v9 - 2);
        do
        {
          int v24 = *v22--;
          unsigned __int16 v23 = v24;
          LODWORD(v7) = v7 - 1;
        }

        while (v24 < 0);
        char v25 = v23;
        int v26 = v7 - 1;
        *((_DWORD *)this + 2) = v7;
        *((_DWORD *)this + 6) = icu::Edits::Iterator::readLength(this, (v23 >> 6) & 0x3F);
        int Length = icu::Edits::Iterator::readLength(this, v25 & 0x3F);
        *((_DWORD *)this + 7) = Length;
        *((_DWORD *)this + 2) = v26;
      }

      else
      {
        *((_DWORD *)this + 6) = icu::Edits::Iterator::readLength(this, (v10 >> 6) & 0x3F);
        int Length = icu::Edits::Iterator::readLength(this, v10 & 0x3F);
        *((_DWORD *)this + 7) = Length;
      }

      if (!*((_BYTE *)this + 21))
      {
LABEL_47:
        *((_DWORD *)this + 8) -= *((_DWORD *)this + 6);
        if (*((_BYTE *)this + 23)) {
          *((_DWORD *)this + 9) -= Length;
        }
        int v16 = *((_DWORD *)this + 10) - Length;
        goto LABEL_50;
      }

      LODWORD(v9) = *((_DWORD *)this + 2);
    }

    else
    {
      unsigned int v19 = (v10 >> 9) & 7;
      if (!*((_BYTE *)this + 21))
      {
        *((_DWORD *)this + 6) = v18;
        *((_DWORD *)this + 7) = v19;
        if ((v10 & 0x1FF) != 0) {
          *((_DWORD *)this + 4) = 1;
        }
        *((_DWORD *)this + 8) -= v18;
        *(int32x2_t *)((char *)this + 36) = vsub_s32(*(int32x2_t *)((char *)this + 36), vdup_n_s32(v19));
        return 1LL;
      }

      int v20 = (v10 & 0x1FF) + 1;
      int Length = v20 * v19;
      *((_DWORD *)this + 6) = v20 * v18;
      *((_DWORD *)this + 7) = v20 * v19;
    }

    if ((int)v9 >= 1)
    {
      do
      {
        int v27 = v9 - 1;
        unsigned int v28 = *(unsigned __int16 *)(*(void *)this + 2LL * (v9 - 1));
        if (v28 < 0x1000) {
          break;
        }
        *((_DWORD *)this + 2) = v27;
        if (v28 >> 12 > 6)
        {
          if ((v28 & 0x8000) == 0)
          {
            *((_DWORD *)this + 2) = v9;
            *((_DWORD *)this + 6) += icu::Edits::Iterator::readLength(this, (v28 >> 6) & 0x3F);
            int Length = *((_DWORD *)this + 7) + icu::Edits::Iterator::readLength(this, v28 & 0x3F);
            *((_DWORD *)this + 7) = Length;
            *((_DWORD *)this + 2) = v27;
          }
        }

        else
        {
          int v29 = (v28 & 0x1FF) + 1;
          Length += ((v28 >> 9) & 7) * v29;
          *((_DWORD *)this + 6) += v29 * (v28 >> 12);
          *((_DWORD *)this + 7) = Length;
        }

        LODWORD(v9) = v27;
      }

      while ((v27 + 1) > 1);
    }

    goto LABEL_47;
  }

  if (!*((_BYTE *)this + 22))
  {
LABEL_10:
    *uint64_t v4 = -1;
    goto LABEL_11;
  }

  if (*((int *)this + 4) < 1)
  {
    int v5 = *((_DWORD *)this + 7);
    *((_DWORD *)this + 8) += *((_DWORD *)this + 6);
    if (*((_BYTE *)this + 23)) {
      *((_DWORD *)this + 9) += v5;
    }
    *((_DWORD *)this + 10) += v5;
    goto LABEL_10;
  }

  --*((_DWORD *)this + 2);
  *((_BYTE *)this + 22) = -1;
  return 1LL;
}

uint64_t icu::Edits::Iterator::findIndex(int32x2_t *this, signed int a2, int a3, UErrorCode *a4)
{
  uint64_t result = 0xFFFFFFFFLL;
  if ((a2 & 0x80000000) == 0 && *(int *)a4 <= 0)
  {
    uint64_t v8 = (int32x2_t *)((char *)this + 28);
    if (a3) {
      uint64_t v9 = 6LL;
    }
    else {
      uint64_t v9 = 7LL;
    }
    if (a3)
    {
      uint64_t v8 = this + 3;
      uint64_t v10 = 4LL;
    }

    else
    {
      uint64_t v10 = 5LL;
    }

    __int32 v11 = this[v10].i32[0];
    if (v11 > a2)
    {
      if (a2 < v11 >> 1)
      {
        this[2].i8[6] = 0;
        this[2].i32[0] = 0;
        this[1].i32[0] = 0;
        this[3] = 0LL;
        this[4] = 0LL;
        this[5].i32[0] = 0;
        goto LABEL_22;
      }

      while (1)
      {
        icu::Edits::Iterator::previous((icu::Edits::Iterator *)this, a4);
        __int32 v12 = this[v10].i32[0];
        if (v12 <= a2) {
          return 0LL;
        }
        int v13 = this[2].i32[0];
        if (v13 >= 1)
        {
          __int32 v14 = this->i32[v9];
          unsigned int v15 = (*(_WORD *)(*(void *)this + 2LL * this[1].i32[0]) & 0x1FF) - v13 + 1;
          if ((int)(v12 - v15 * v14) <= a2)
          {
            uint64_t result = 0LL;
            unsigned int v24 = (v12 + ~a2) / v14 + 1;
            int32x2_t v25 = vmul_s32(vdup_n_s32(v24), this[3]);
            int v26 = this[5].i32[0] - v25.i32[1];
            this[4] = vsub_s32(this[4], v25);
            this[5].i32[0] = v26;
            unsigned int v23 = v24 + v13;
            goto LABEL_26;
          }

          int32x2_t v16 = vmul_s32(this[3], vdup_n_s32(v15));
          this[4] = vsub_s32(this[4], v16);
          this[5].i32[0] -= v16.i32[1];
          this[2].i32[0] = 0;
        }
      }
    }

    if (v8->i32[0] + v11 > a2) {
      return 0LL;
    }
    while (1)
    {
      do
      {
LABEL_22:
        __int32 v17 = this[v10].i32[0];
        __int32 v18 = this->i32[v9];
        if (v18 + v17 > a2) {
          return 0LL;
        }
        signed int v19 = this[2].i32[0];
      }

      while (v19 < 2);
      if (v17 + v19 * v18 > a2) {
        break;
      }
      this[3] = vmul_s32(this[3], vdup_n_s32(v19));
      this[2].i32[0] = 0;
    }

    uint64_t result = 0LL;
    unsigned int v20 = (a2 - v17) / v18;
    int32x2_t v21 = vmul_s32(this[3], vdup_n_s32(v20));
    int v22 = this[5].i32[0] + v21.i32[1];
    this[4] = vadd_s32(this[4], v21);
    this[5].i32[0] = v22;
    unsigned int v23 = v19 - v20;
LABEL_26:
    this[2].i32[0] = v23;
  }

  return result;
}

uint64_t icu::Edits::Iterator::destinationIndexFromSourceIndex( int32x2_t *this, signed int a2, UErrorCode *a3)
{
  int Index = icu::Edits::Iterator::findIndex(this, a2, 1, a3);
  if (Index < 0) {
    return 0LL;
  }
  if (Index) {
    return this[5].u32[0];
  }
  __int32 v6 = a2 - this[4].i32[0];
  if (!v6) {
    return this[5].u32[0];
  }
  if (this[2].i8[7]) {
    __int32 v6 = this[3].i32[1];
  }
  return (v6 + this[5].i32[0]);
}

uint64_t icu::Edits::Iterator::sourceIndexFromDestinationIndex( int32x2_t *this, signed int a2, UErrorCode *a3)
{
  int Index = icu::Edits::Iterator::findIndex(this, a2, 0, a3);
  if (Index < 0) {
    return 0LL;
  }
  if (Index) {
    return this[4].u32[0];
  }
  __int32 v6 = a2 - this[5].i32[0];
  if (!v6) {
    return this[4].u32[0];
  }
  if (this[2].i8[7]) {
    __int32 v6 = this[3].i32[0];
  }
  return (v6 + this[4].i32[0]);
}

icu::UnicodeString *icu::Edits::Iterator::toString(icu::Edits::Iterator *this, icu::UnicodeString *a2)
{
  if (*((_BYTE *)this + 23)) {
    icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)"]", 0, 0xFFFFFFFFLL);
  }
  else {
    icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)&unk_180A4796A, 0, 0xFFFFFFFFLL);
  }
  icu::ICU_Utility::appendNumber(a2, (icu::UnicodeString *)*((unsigned int *)this + 10), 0xAu, 1);
  icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)L"..", 0, 0xFFFFFFFFLL);
  icu::ICU_Utility::appendNumber( a2,  (icu::UnicodeString *)(*((_DWORD *)this + 7) + *((_DWORD *)this + 10)),  0xAu,  1);
  if (*((_BYTE *)this + 23))
  {
    icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)&unk_180A4797E, 0, 0xFFFFFFFFLL);
    icu::ICU_Utility::appendNumber(a2, (icu::UnicodeString *)*((unsigned int *)this + 9), 0xAu, 1);
    icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)L"..", 0, 0xFFFFFFFFLL);
    icu::ICU_Utility::appendNumber( a2,  (icu::UnicodeString *)(*((_DWORD *)this + 7) + *((_DWORD *)this + 9)),  0xAu,  1);
    icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)L"] }", 0, 0xFFFFFFFFLL);
  }

  else
  {
    icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)L"] (no-change) }", 0, 0xFFFFFFFFLL);
  }

  return a2;
}

uint64_t sub_1807CB318(UErrorCode *a1)
{
  unsigned int v3 = atomic_load(&dword_18C448998);
  if (v3 == 2 || !icu::umtx_initImplPreInit(&dword_18C448998))
  {
    if (dword_18C44899C >= 1) {
      *a1 = dword_18C44899C;
    }
  }

  else
  {
    UErrorCode v5 = *a1;
    if (*(int *)a1 <= 0)
    {
      uint64_t v6 = icu::UMemory::operator new((icu::UMemory *)0x40, v4);
      if (v6)
      {
        uint64_t v7 = (void *)v6;
        *(_OWORD *)(v6 + 32) = 0u;
        *(_OWORD *)(v6 + 48) = 0u;
        *(_OWORD *)uint64_t v6 = 0u;
        *(_OWORD *)(v6 + 16) = 0u;
        sub_1807CB470((void *)v6, a1);
        qword_18C448990 = (uint64_t)v7;
        if (*(int *)a1 >= 1)
        {
          udata_close((_OWORD *)*v7);
          ucptrie_close(v7[1]);
          icu::UMemory::operator delete(v7);
          qword_18C448990 = 0LL;
        }
      }

      else
      {
        qword_18C448990 = 0LL;
        *a1 = U_MEMORY_ALLOCATION_ERROR;
      }

      sub_180820C94(0x15u, (uint64_t)sub_1807CB9EC);
      UErrorCode v5 = *a1;
    }

    dword_18C44899C = v5;
    icu::umtx_initImplPostInit(&dword_18C448998);
  }

  return qword_18C448990;
}

BOOL sub_1807CB424(uint8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  a1.i32[0] = *((_DWORD *)a5 + 2);
  unsigned __int32 v5 = vmovn_s16((int16x8_t)vmovl_u8(a1)).u32[0];
  if (a5[2]) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v5 == 1785687365;
  }
  return v6 && *a5 > 0x13u && *((_BYTE *)a5 + 12) == 1;
}

unsigned int *sub_1807CB470(void *a1, UErrorCode *a2)
{
  uint64_t result = (unsigned int *)udata_openChoice( 0LL,  "icu",  "uemoji",  (unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1807CB424,  (uint64_t)a1,  a2);
  *a1 = result;
  if (*(int *)a2 <= 0)
  {
    uint64_t result = (unsigned int *)udata_getMemory((uint64_t)result);
    uint64_t v5 = *result;
    if ((int)v5 > 39)
    {
      BOOL v6 = result;
      uint64_t result = ucptrie_openFromBinary(0, 2, (uint64_t)result + v5, result[1] - v5, 0LL, (int *)a2);
      a1[1] = result;
      if (*(int *)a2 <= 0)
      {
        uint64_t v7 = 0LL;
        signed int v8 = v6[4];
        do
        {
          signed int v9 = v6[v7 + 5];
          if (v9 <= v8) {
            uint64_t v10 = 0LL;
          }
          else {
            uint64_t v10 = (char *)v6 + v8;
          }
          a1[v7++ + 2] = v10;
          signed int v8 = v9;
        }

        while (v7 != 6);
      }
    }

    else
    {
      *a2 = U_INVALID_FORMAT_ERROR;
    }
  }

  return result;
}

uint64_t sub_1807CB554(uint64_t a1, uint64_t a2)
{
  int v7 = 0;
  uint64_t result = ucptrie_getRange(*(void *)(a1 + 8), 0LL, 0, 0, 0LL, 0LL, &v7);
  if ((result & 0x80000000) == 0)
  {
    int v5 = result;
    uint64_t v6 = 0LL;
    do
    {
      (*(void (**)(void, uint64_t))(a2 + 8))(*(void *)a2, v6);
      uint64_t v6 = (v5 + 1);
      uint64_t result = ucptrie_getRange(*(void *)(a1 + 8), v6, 0, 0, 0LL, 0LL, &v7);
      int v5 = result;
    }

    while ((result & 0x80000000) == 0);
  }

  return result;
}

BOOL sub_1807CB5EC(unsigned int a1, int a2)
{
  int v6 = 0;
  uint64_t v4 = sub_1807CB318((UErrorCode *)&v6);
  BOOL result = 0LL;
  if (v6 <= 0) {
    return sub_1807CB64C(v4, a1, a2) != 0;
  }
  return result;
}

uint64_t sub_1807CB64C(uint64_t a1, unsigned int a2, int a3)
{
  char v3 = byte_1809DE050[a3 - 57];
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v4 + 8);
  if (HIWORD(a2))
  {
    if (HIWORD(a2) > 0x10u)
    {
      int v6 = *(_DWORD *)(v4 + 20) - 1;
    }

    else if (*(_DWORD *)(v4 + 24) <= (signed int)a2)
    {
      int v6 = *(_DWORD *)(v4 + 20) - 2;
    }

    else
    {
      int v6 = ucptrie_internalSmallIndex((uint64_t *)v4, a2);
    }
  }

  else
  {
    int v6 = (a2 & 0x3F) + *(unsigned __int16 *)(*(void *)v4 + 2LL * (a2 >> 6));
  }

  return (*(unsigned __int8 *)(v5 + v6) >> v3) & 1;
}

BOOL sub_1807CB6F8(_WORD *a1, int a2, unsigned int a3)
{
  int v8 = 0;
  uint64_t v6 = sub_1807CB318((UErrorCode *)&v8);
  BOOL result = 0LL;
  if (v8 <= 0) {
    return sub_1807CB768(v6, a1, a2, a3) != 0;
  }
  return result;
}

uint64_t sub_1807CB768(uint64_t a1, _WORD *a2, int a3, unsigned int a4)
{
  if (!a2 && a3) {
    return 0LL;
  }
  if (a3 > 0)
  {
    if (a4 - 72 < 0xFFFFFFF9) {
      return 0LL;
    }
LABEL_9:
    if (a4 == 71) {
      unsigned int v8 = 65;
    }
    else {
      unsigned int v8 = a4;
    }
    if (a4 == 71) {
      int v9 = 70;
    }
    else {
      int v9 = a4;
    }
    if (v8 > v9) {
      return 0LL;
    }
    unsigned int v10 = v8 - 65;
    unsigned int v11 = v8 - 1;
    while (1)
    {
      __int32 v12 = *(void **)(a1 + 8LL * v10 + 16);
      if (v12)
      {
        v15[0] = 0LL;
        v15[1] = v12;
        v15[2] = v12;
        v15[3] = (void *)0xFFFFFFFFLL;
        __int32 v14 = a2;
        int v13 = icu::UCharsTrie::next((uint64_t)v15, &v14, a3);
        icu::UCharsTrie::~UCharsTrie(v15);
        if (v13 > 1) {
          break;
        }
      }

      ++v10;
    }

    return 1LL;
  }

  if (!a3) {
    return 0LL;
  }
  uint64_t result = 0LL;
  if (a4 - 72 >= 0xFFFFFFF9 && *a2) {
    goto LABEL_9;
  }
  return result;
}

void sub_1807CB890(uint64_t a1, uint64_t a2, int a3, UErrorCode *a4)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  BOOL v4 = (a3 - 72) >= 0xFFFFFFF9 && *a4 <= U_ZERO_ERROR;
  if (v4)
  {
    int v5 = a3 == 71 ? 70 : a3;
    int v6 = a3 == 71 ? 65 : a3;
    if (v6 <= v5)
    {
      do
      {
        uint64_t v10 = *(void *)(a1 + 8LL * (v6 - 65) + 16);
        if (v10)
        {
          uint64_t v20 = 0LL;
          __int128 v18 = 0u;
          __int128 v19 = 0u;
          __int128 v16 = 0u;
          __int128 v17 = 0u;
          memset(v15, 0, sizeof(v15));
          uint64_t v14 = v10;
          icu::UCharsTrie::Iterator::Iterator(v15, &v14, 0LL, a4);
          while (icu::UCharsTrie::Iterator::next((icu::UCharsTrie::Iterator *)v15, a4))
          {
            unsigned int v11 = (char *)v17;
            if ((v16 & 2) != 0) {
              unsigned int v11 = (char *)&v16 + 2;
            }
            if ((v16 & 0x11) != 0) {
              __int32 v12 = 0LL;
            }
            else {
              __int32 v12 = v11;
            }
            if ((v16 & 0x8000u) == 0LL) {
              uint64_t v13 = (unsigned __int16)v16 >> 5;
            }
            else {
              uint64_t v13 = DWORD1(v16);
            }
            (*(void (**)(void, char *, uint64_t))(a2 + 24))(*(void *)a2, v12, v13);
          }

          icu::UCharsTrie::Iterator::~Iterator((icu::UCharsTrie::Iterator *)v15);
        }

        BOOL v4 = v5 <= v6++;
      }

      while (!v4);
    }
  }

uint64_t sub_1807CB9EC()
{
  v0 = (void *)qword_18C448990;
  if (qword_18C448990)
  {
    udata_close(*(_OWORD **)qword_18C448990);
    ucptrie_close(v0[1]);
    icu::UMemory::operator delete(v0);
  }

  qword_18C448990 = 0LL;
  atomic_store(0, &dword_18C448998);
  return 1LL;
}

uint64_t icu::ErrorCode::reset(icu::ErrorCode *this)
{
  uint64_t v1 = *((unsigned int *)this + 2);
  *((_DWORD *)this + 2) = 0;
  return v1;
}

int *icu::ErrorCode::assertSuccess(int *this)
{
  if (this[2] >= 1) {
    return (int *)(*(uint64_t (**)(int *))(*(void *)this + 16LL))(this);
  }
  return this;
}

const char *icu::ErrorCode::errorName(icu::ErrorCode *this)
{
  return u_errorName((UErrorCode)*((_DWORD *)this + 2));
}

void sub_1807CBA84(void **a1)
{
}

uint64_t sub_1807CBA98(uint64_t a1)
{
  *(void *)a1 = off_18970B820;
  uint64_t v2 = (void ***)(a1 + 8);
  sub_1807CCEBC((void ***)(a1 + 16));
  sub_1807CCEBC(v2);
  return a1;
}

void sub_1807CBAD8(void ***a1)
{
  *a1 = (void **)off_18970B820;
  uint64_t v2 = a1 + 1;
  sub_1807CCEBC(a1 + 2);
  sub_1807CCEBC(v2);
  icu::UMemory::operator delete(a1);
}

icu::BreakIterator *sub_1807CBB18(icu::BreakIterator *a1, const char *a2, void **a3, void **a4, int *a5)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  icu::BreakIterator::getLocale(a2, 1, a5, (icu::Locale *)v16);
  icu::BreakIterator::getLocale(a2, 0, a5, (icu::Locale *)v15);
  icu::BreakIterator::BreakIterator(a1, (const icu::Locale *)v16, (const icu::Locale *)v15);
  icu::Locale::~Locale((icu::Locale *)v15);
  icu::Locale::~Locale((icu::Locale *)v16);
  *(void *)a1 = &off_18970B840;
  uint64_t v11 = icu::UMemory::operator new((icu::UMemory *)0x20, v10);
  if (v11)
  {
    *(void *)uint64_t v11 = off_18970B820;
    *(void *)(v11 + 8) = a3;
    *(void *)(v11 + 16) = a4;
    *(_DWORD *)(v11 + 24) = 1;
    *((void *)a1 + 61) = v11;
    *((void *)a1 + 62) = a2;
    *((void *)a1 + 63) = 0LL;
  }

  else
  {
    *((void *)a1 + 61) = 0LL;
    *((void *)a1 + 62) = a2;
    *((void *)a1 + 63) = 0LL;
    if (a3)
    {
      icu::UCharsTrie::~UCharsTrie(a3);
      icu::UMemory::operator delete(v12);
    }

    if (a4)
    {
      icu::UCharsTrie::~UCharsTrie(a4);
      icu::UMemory::operator delete(v13);
    }

    if (*a5 <= 0) {
      *a5 = 7;
    }
  }

  return a1;
}

void sub_1807CBC54(icu::BreakIterator *this)
{
  *(void *)this = &off_18970B840;
  uint64_t v2 = (unsigned int *)*((void *)this + 61);
  char v3 = v2 + 6;
  do
    int v4 = __ldaxr(v3);
  while (__stlxr(v4 - 1, v3));
  if (v2 && v4 <= 1) {
    (*(void (**)(unsigned int *))(*(void *)v2 + 8LL))(v2);
  }
  *((void *)this + 61) = 0LL;
  int v5 = (UText *)*((void *)this + 63);
  if (v5) {
    utext_close(v5);
  }
  uint64_t v6 = *((void *)this + 62);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  icu::BreakIterator::~BreakIterator(this);
}

void sub_1807CBCD8(icu::BreakIterator *a1)
{
}

UText *sub_1807CBCEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 496);
  uint64_t v5 = *(void *)(a1 + 504);
  *(void *)(a1 + 504) = 0LL;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 48LL))(v4, v5, a2);
  uint64_t result = *(UText **)(a1 + 504);
  if (result) {
    uint64_t result = utext_close(result);
  }
  *(void *)(a1 + 504) = v6;
  return result;
}

uint64_t sub_1807CBD38(uint64_t a1, int a2)
{
  if (utext_previous32(*(UText **)(a1 + 504)) != 32) {
    utext_next32(*(UText **)(a1 + 504));
  }
  uint64_t v22 = 0LL;
  uint64_t v3 = *(void *)(*(void *)(a1 + 488) + 16LL);
  uint64_t v20 = 0LL;
  __int128 v21 = *(_OWORD *)(v3 + 8);
  unsigned int v4 = -1;
  LODWORD(v22) = *(_DWORD *)(v3 + 24);
  int64_t NativeIndex = -1LL;
  while (1)
  {
    UChar32 v6 = utext_previous32(*(UText **)(a1 + 504));
    if (v6 == -1) {
      break;
    }
    int v7 = icu::UCharsTrie::nextForCodePoint((icu::UCharsTrie *)&v20, v6);
    char v8 = v7;
    if (v7 < 2)
    {
LABEL_17:
      if ((v8 & 1) == 0) {
        break;
      }
    }

    else
    {
      int64_t NativeIndex = utext_getNativeIndex(*(const UText **)(a1 + 504));
      int v9 = (unsigned __int16 *)(*((void *)&v21 + 1) + 2LL);
      unsigned int v10 = (unsigned __int16)**((_WORD **)&v21 + 1);
      if ((v10 & 0x8000) != 0)
      {
        unsigned int v4 = v10 & 0x7FFF;
        if (v4 < 0x4000) {
          goto LABEL_17;
        }
        if (v4 == 0x7FFF)
        {
          int v12 = *(unsigned __int16 *)(*((void *)&v21 + 1) + 2LL) << 16;
          int v9 = (unsigned __int16 *)(*((void *)&v21 + 1) + 4LL);
        }

        else
        {
          int v12 = (v4 << 16) - 0x40000000;
        }

        unsigned int v4 = v12 | *v9;
        if ((v8 & 1) == 0) {
          break;
        }
      }

      else
      {
        unsigned int v11 = v10 >> 6;
        if (v11 > 0x100)
        {
          if (v11 > 0x1FE)
          {
            unsigned int v4 = *(unsigned __int16 *)(*((void *)&v21 + 1) + 4LL) | (*(unsigned __int16 *)(*((void *)&v21 + 1) + 2LL) << 16);
            goto LABEL_17;
          }

          unsigned int v4 = (*v9 | ((v11 & 0x1FF) << 16)) - 16842752;
          if ((v8 & 1) == 0) {
            break;
          }
        }

        else
        {
          unsigned int v4 = v11 - 1;
          if ((v8 & 1) == 0) {
            break;
          }
        }
      }
    }
  }

  icu::UCharsTrie::~UCharsTrie(&v20);
  if (NativeIndex < 0) {
    return 0LL;
  }
  if (NativeIndex)
  {
    UChar32 v13 = utext_char32At(*(UText **)(a1 + 504), NativeIndex - 1);
    if (v13 != -1)
    {
      if (u_isUAlphabetic(v13)) {
        return 0LL;
      }
    }
  }

  if (v4 == 2) {
    return 1LL;
  }
  if (v4 != 1 || !*(void *)(*(void *)(a1 + 488) + 8LL)) {
    return 0LL;
  }
  utext_setNativeIndex(*(UText **)(a1 + 504), NativeIndex);
  uint64_t v22 = 0LL;
  uint64_t v14 = *(void *)(*(void *)(a1 + 488) + 8LL);
  uint64_t v20 = 0LL;
  __int128 v21 = *(_OWORD *)(v14 + 8);
  LODWORD(v22) = *(_DWORD *)(v14 + 24);
  UChar32 v15 = utext_next32(*(UText **)(a1 + 504));
  if (v15 == -1)
  {
    BOOL v18 = 1LL;
  }

  else
  {
    for (UChar32 i = v15; i != -1; UChar32 i = utext_next32(*(UText **)(a1 + 504)))
    {
      int v17 = icu::UCharsTrie::nextForCodePoint((icu::UCharsTrie *)&v20, i);
      if ((v17 & 1) == 0) {
        break;
      }
    }

    BOOL v18 = v17 != 0;
  }

  icu::UCharsTrie::~UCharsTrie(&v20);
  return v18;
}

uint64_t sub_1807CBF64(uint64_t a1, uint64_t a2)
{
  if ((_DWORD)a2 == -1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = a2;
  if (*(void *)(*(void *)(a1 + 488) + 16LL))
  {
    int v9 = 0;
    sub_1807CBCEC(a1, (uint64_t)&v9);
    if (v9 > 0) {
      return 0xFFFFFFFFLL;
    }
    int64_t v5 = utext_nativeLength(*(UText **)(a1 + 504));
    if (v5 != (int)v2)
    {
      int64_t v6 = v5;
      do
      {
        uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 496) + 104LL))(*(void *)(a1 + 496));
        uint64_t v2 = v7;
      }

      while ((_DWORD)v7 != -1 && v6 != (int)v7);
    }
  }

  return v2;
}

uint64_t sub_1807CC018(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if ((a2 + 1) >= 2 && *(void *)(*(void *)(a1 + 488) + 16LL))
  {
    int v5 = 0;
    sub_1807CBCEC(a1, (uint64_t)&v5);
    if (v5 <= 0)
    {
      do
      {
        uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 496) + 96LL))(*(void *)(a1 + 496));
      }

      while ((v2 - 1) < 0xFFFFFFFE);
    }

    else
    {
      return 0xFFFFFFFFLL;
    }
  }

  return v2;
}

uint64_t sub_1807CC0B0(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 496) + 104LL))(*(void *)(a1 + 496));
  return sub_1807CBF64(a1, v2);
}

uint64_t sub_1807CC0E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 496) + 80LL))(*(void *)(a1 + 496));
}

uint64_t sub_1807CC0F4(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 496) + 128LL))(*(void *)(a1 + 496));
  return sub_1807CC018(a1, v2);
}

uint64_t sub_1807CC128(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 496) + 96LL))(*(void *)(a1 + 496));
  return sub_1807CC018(a1, v2);
}

uint64_t sub_1807CC15C(uint64_t a1, int a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 496) + 136LL))(*(void *)(a1 + 496));
  if ((_DWORD)result)
  {
    if (*(void *)(*(void *)(a1 + 488) + 16LL))
    {
      int v5 = 0;
      sub_1807CBCEC(a1, (uint64_t)&v5);
      return sub_1807CBD38(a1, a2) == 0;
    }

    else
    {
      return 1LL;
    }
  }

  return result;
}

uint64_t sub_1807CC1D0(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 496) + 144LL))(*(void *)(a1 + 496));
  return sub_1807CBF64(a1, v2);
}

uint64_t sub_1807CC204(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 496) + 120LL))(*(void *)(a1 + 496));
  return sub_1807CBF64(a1, v2);
}

uint64_t sub_1807CC238(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 496) + 88LL))(*(void *)(a1 + 496));
}

void sub_1807CC24C(void **a1)
{
  *a1 = off_18970B908;
  icu::UVector::~UVector(a1 + 1);
  icu::UObject::~UObject((icu::UObject *)a1);
}

void sub_1807CC27C(void **a1)
{
  *a1 = off_18970B908;
  icu::UVector::~UVector(a1 + 1);
  icu::UObject::~UObject((icu::UObject *)a1);
  icu::UMemory::operator delete(v2);
}

void *icu::FilteredBreakIteratorBuilder::FilteredBreakIteratorBuilder(void *this)
{
  *this = off_18970B948;
  return this;
}

void *sub_1807CC2C0(void *a1, icu::Locale *a2, int *a3)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  *a1 = off_18970B908;
  icu::UVector::UVector((uint64_t)(a1 + 1), (uint64_t)uprv_deleteUObject, (uint64_t)uhash_compareUnicodeString, 1u, a3);
  a1[1] = &off_18970B988;
  if (*a3 <= 0)
  {
    int v19 = 0;
    BaseName = (char *)icu::Locale::getBaseName(a2);
    uint64_t v7 = ures_open("icudt74l-brkitr", BaseName, &v19);
    uint64_t v8 = v7;
    if (v19 > 0 || v19 == -127)
    {
      *a3 = v19;
    }

    else
    {
      uint64_t v9 = ures_getByKeyWithFallback(v7, "exceptions", 0LL, (UErrorCode *)&v19);
      uint64_t v10 = v9;
      if (v19 > 0 || v19 == -127)
      {
        *a3 = v19;
      }

      else
      {
        uint64_t v11 = ures_getByKeyWithFallback(v9, "SentenceBreak", 0LL, (UErrorCode *)&v19);
        if (v19 > 0 || v19 == -127)
        {
          *a3 = v19;
        }

        else
        {
          uint64_t v12 = 0LL;
          int v19 = *a3;
          do
          {
            NextResource = ures_getNextResource(v11, v12, &v19);
            uint64_t v12 = (uint64_t)NextResource;
            int v14 = v19;
            if (!NextResource || v19 > 0) {
              break;
            }
            uint64_t v26 = 0LL;
            __int128 v24 = 0u;
            __int128 v25 = 0u;
            __int128 v23 = 0u;
            uint64_t v22 = off_18971B688;
            LOWORD(v23) = 2;
            int v21 = 0;
            String = ures_getString((uint64_t)NextResource, &v21, a3);
            if (*a3 <= 0)
            {
              uint64_t v20 = String;
              icu::UnicodeString::setTo((icu::UnicodeString *)&v22, 1, &v20, v21);
            }

            else
            {
              icu::UnicodeString::setToBogus((icu::UnicodeString *)&v22);
            }

            (*(void (**)(void *, void (***)(icu::UnicodeString *__hidden), int *))(*a1 + 24LL))( a1,  &v22,  a3);
            icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v22);
            int v14 = v19;
          }

          while (v19 < 1);
          if (v14 >= 1 && v14 != 8 && *a3 <= 0) {
            *a3 = v14;
          }
          if (v12) {
            ures_close(v12);
          }
        }

        if (v11) {
          ures_close(v11);
        }
      }

      if (v10) {
        ures_close(v10);
      }
    }

    if (v8) {
      ures_close(v8);
    }
  }

  return a1;
}

icu::UnicodeString *sub_1807CC558(uint64_t a1, UChar **a2, int *a3)
{
  if (*a3 > 0) {
    return 0LL;
  }
  uint64_t result = (icu::UnicodeString *)icu::UMemory::operator new((icu::UMemory *)0x40, (unint64_t)a2);
  if (result)
  {
    uint64_t v7 = (uint64_t)result;
    icu::UnicodeString::UnicodeString(result, a2);
    if (*a3 > 0 || (uint64_t v8 = (icu::UVector *)(a1 + 8), (icu::UVector::indexOf(v8, v7, 0LL) & 0x80000000) == 0))
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
      return 0LL;
    }

    icu::UVector::sortedInsert(v8, v7, sub_1807CCE4C, a3);
    return (icu::UnicodeString *)(*a3 < 1);
  }

  else
  {
    *a3 = 7;
  }

  return result;
}

uint64_t sub_1807CC614(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 <= 0) {
    return icu::UVector::removeElement((icu::UVector *)(a1 + 8), a2);
  }
  else {
    return 0LL;
  }
}

icu::BreakIterator *sub_1807CC630(uint64_t a1, unint64_t a2, UErrorCode *a3)
{
  unsigned int v4 = (const char *)a2;
  uint64_t v76 = *MEMORY[0x1895F89C0];
  int64_t v6 = (icu::UCharsTrieBuilder *)icu::UMemory::operator new((icu::UMemory *)0x70, a2);
  uint64_t v8 = v6;
  if (v6)
  {
    icu::UCharsTrieBuilder::UCharsTrieBuilder(v6, a3);
  }

  else if (*(int *)a3 <= 0)
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }

  uint64_t v9 = (icu::UCharsTrieBuilder *)icu::UMemory::operator new((icu::UMemory *)0x70, v7);
  if (!v9)
  {
    UChar32 v13 = 0LL;
    goto LABEL_104;
  }

  uint64_t v10 = v9;
  v12.n128_f64[0] = icu::UCharsTrieBuilder::UCharsTrieBuilder(v9, a3);
  if (*(int *)a3 > 0)
  {
    UChar32 v13 = 0LL;
    goto LABEL_103;
  }

  int v14 = *(_DWORD *)(a1 + 16);
  uint64_t v70 = v14;
  uint64_t v15 = v14;
  if (v14 < 0) {
    uint64_t v16 = -1LL;
  }
  else {
    uint64_t v16 = ((uint64_t)v14 << 6) | 0x10;
  }
  int v17 = (void *)icu::UMemory::operator new[]((icu::UMemory *)v16, v11);
  if (v17)
  {
    *int v17 = 64LL;
    v17[1] = v15;
    uint64_t v19 = (uint64_t)(v17 + 2);
    uint64_t v20 = v17 + 2;
    do
    {
      *uint64_t v20 = off_18971B688;
      *((_WORD *)v20 + 4) = 2;
      v20 += 8;
    }

    while (v20 != &v17[8 * v15 + 2]);
  }

  else
  {
    uint64_t v19 = 0LL;
  }

  uint64_t v21 = v70;
  v71 = v10;
  int v72 = a3;
  uint64_t v74 = v19;
  if ((int)v70 < 1)
  {
    __int128 v23 = 0LL;
  }

  else
  {
    uint64_t v22 = (int *)uprv_malloc(4 * v70);
    __int128 v23 = v22;
    if (v22)
    {
      bzero(v22, 4 * v70);
      uprv_free(0LL);
    }
  }

  if (*(int *)(a1 + 16) >= 1)
  {
    uint64_t v24 = 0LL;
    __int128 v25 = (UChar **)v19;
    do
    {
      uint64_t v26 = (UChar **)icu::UVector::elementAt((icu::UVector *)(a1 + 8), v24);
      if (!v26)
      {
        UChar32 v13 = 0LL;
        *a3 = U_MEMORY_ALLOCATION_ERROR;
        goto LABEL_102;
      }

      icu::UnicodeString::operator=(v25, v26);
      v23[v24++] = 0;
      v25 += 8;
    }

    while (*(_DWORD *)(a1 + 16) > (int)v24);
  }

  if ((int)v70 < 1)
  {
    BOOL v62 = 0LL;
    goto LABEL_93;
  }

  int v68 = v4;
  BOOL v69 = v8;
  uint64_t v27 = 0LL;
  uint64_t v28 = 0LL;
  int v73 = 0;
  uint64_t v29 = v70 << 6;
  int v30 = v72;
  do
  {
    uint64_t v31 = v19 + (v28 << 6);
    else {
      int32_t v32 = *(unsigned __int16 *)(v31 + 8) >> 5;
    }
    int32_t v33 = icu::UnicodeString::doIndexOf(v31, 0x2Eu, 0, v32);
    if (v33 < 0) {
      goto LABEL_74;
    }
    int32_t v34 = v33;
    uint64_t v35 = v19 + (v28 << 6);
    else {
      int v36 = *(unsigned __int16 *)(v35 + 8) >> 5;
    }
    int32_t v37 = v33 + 1;
    if (v33 + 1 == v36)
    {
      int v30 = v72;
      goto LABEL_74;
    }

    uint64_t v38 = 0LL;
    uint64_t v39 = 0LL;
    int v40 = -1;
    do
    {
      if (v27 == v38) {
        goto LABEL_65;
      }
      uint64_t v41 = v19 + v38;
      unsigned int v42 = *(unsigned __int16 *)(v19 + v38 + 8);
      if ((v42 & 1) != 0)
      {
        if ((*(_WORD *)(v19 + (v28 << 6) + 8) & 1) == 0) {
          goto LABEL_65;
        }
      }

      else
      {
        if ((v42 & 0x8000u) == 0) {
          int v43 = v42 >> 5;
        }
        else {
          int v43 = *(_DWORD *)(v41 + 12);
        }
        int v44 = v43 & (v43 >> 31);
        int32_t v45 = v43 - v44;
        if (v45 <= v34) {
          int32_t v46 = v45;
        }
        else {
          int32_t v46 = v37;
        }
        uint64_t v47 = v41 + 10;
        uint64_t v48 = *(void *)(v41 + 24);
        if ((v42 & 2) != 0) {
          uint64_t v49 = v47;
        }
        else {
          uint64_t v49 = v48;
        }
      }

      int v50 = v23[v39];
      if (v50)
      {
        if ((v50 & 1) != 0) {
          int v40 = v39;
        }
      }

      else
      {
        else {
          int v51 = *(unsigned __int16 *)(v19 + v38 + 8) >> 5;
        }
        if (v51 == v37) {
          int v52 = 3;
        }
        else {
          int v52 = 2;
        }
        v23[v39] = v52;
      }

LABEL_65:
      ++v39;
      v38 += 64LL;
    }

    while (v29 != v38);
    memset(v75, 0, sizeof(v75));
    icu::UnicodeString::UnicodeString( (icu::UnicodeString *)v75,  (const icu::UnicodeString *)(v19 + (v28 << 6)),  0,  (v34 + 1));
    if (v40 == -1)
    {
      uint64_t v8 = v69;
      uint64_t v21 = v70;
      uint64_t v10 = v71;
      int v30 = v72;
      if (!v23[v28])
      {
        if ((SWORD4(v75[0]) & 0x8000u) == 0) {
          int v53 = WORD4(v75[0]) >> 5;
        }
        else {
          int v53 = HIDWORD(v75[0]);
        }
        icu::UnicodeString::doReverse((icu::UnicodeString *)v75, 0, v53);
        icu::UCharsTrieBuilder::add(v69, (const icu::UnicodeString *)v75, 1u, v72);
        ++v73;
        v23[v28] = 2;
      }
    }

    else
    {
      uint64_t v8 = v69;
      uint64_t v21 = v70;
      uint64_t v10 = v71;
      int v30 = v72;
    }

    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v75);
LABEL_74:
    ++v28;
    v27 += 64LL;
  }

  while (v28 != v21);
  uint64_t v54 = 0LL;
  int v55 = 0;
  __int128 v56 = v23;
  do
  {
    int v57 = *v56;
    if ((*v56 & 1) == 0)
    {
      uint64_t v58 = (icu::UnicodeString *)(v19 + v54);
      else {
        int v59 = *(unsigned __int16 *)(v19 + v54 + 8) >> 5;
      }
      icu::UnicodeString::doReverse(v58, 0, v59);
      uint64_t v19 = v74;
      icu::UCharsTrieBuilder::add(v8, (const icu::UnicodeString *)(v74 + v54), 2u, v30);
      ++v73;
      int v57 = *v56;
    }

    if ((v57 & 2) != 0)
    {
      icu::UCharsTrieBuilder::add(v10, (const icu::UnicodeString *)(v19 + v54), 2u, v30);
      ++v55;
    }

    ++v56;
    v54 += 64LL;
  }

  while (v29 != v54);
  if (v73 <= 0)
  {
    BOOL v62 = 0LL;
    unsigned int v4 = v68;
    goto LABEL_90;
  }

  uint64_t v60 = icu::UCharsTrieBuilder::build((uint64_t)v8, 0LL, v30);
  int v61 = (int *)v30;
  BOOL v62 = (void **)v60;
  unsigned int v4 = v68;
  if (*v61 > 0) {
    goto LABEL_99;
  }
LABEL_90:
  if (v55 < 1)
  {
LABEL_93:
    unsigned int v63 = 0LL;
    goto LABEL_94;
  }

  unsigned int v63 = (void **)icu::UCharsTrieBuilder::build((uint64_t)v10, 0LL, v72);
  if (*(int *)v72 <= 0)
  {
LABEL_94:
    int v64 = (icu::BreakIterator *)icu::UMemory::operator new((icu::UMemory *)0x200, v18);
    if (v64)
    {
      UChar32 v13 = v64;
      sub_1807CBB18(v64, v4, v63, v62, (int *)v72);
      unsigned int v4 = 0LL;
      uint64_t v10 = v71;
      goto LABEL_102;
    }
  }

  if (v63)
  {
    icu::UCharsTrie::~UCharsTrie(v63);
    icu::UMemory::operator delete(v65);
  }

  uint64_t v10 = v71;
LABEL_99:
  if (v62)
  {
    icu::UCharsTrie::~UCharsTrie(v62);
    icu::UMemory::operator delete(v66);
  }

  UChar32 v13 = 0LL;
LABEL_102:
  uprv_free(v23);
  sub_1807CCEEC(&v74);
LABEL_103:
  (*(void (**)(icu::UCharsTrieBuilder *, __n128))(*(void *)v10 + 8LL))(v10, v12);
LABEL_104:
  if (v8) {
    (*(void (**)(icu::UCharsTrieBuilder *))(*(void *)v8 + 8LL))(v8);
  }
  if (v4) {
    (*(void (**)(const char *))(*(void *)v4 + 8LL))(v4);
  }
  return v13;
}

      *a7 = v13;
      return result;
    }

    UChar32 v13 = 0;
    if (a5 <= 8202)
    {
      if (a5 > 6067)
      {
        uint64_t v19 = -6068;
      }

      else
      {
        if (a5 <= 4446)
        {
          if (a5 == 173 || a5 == 847 || a5 == 1564) {
            goto LABEL_65;
          }
LABEL_37:
          UChar32 v13 = 0;
          if (a5 == 12644) {
            goto LABEL_65;
          }
          if ((a5 & 0xFFFFFFF0) == 0x2060) {
            goto LABEL_65;
          }
          UChar32 v13 = 0;
          if ((a5 & 0xFFFFF000) == 0xE0000
            || (a5 - 119155) < 8
            || (a5 & 0xFFFFFFFC) == 0x1BCA0
            || (a5 - 65520) < 9
            || a5 == 65440
            || a5 == 65279
            || (a5 & 0xFFFFFFF0) == 0xFE00)
          {
            goto LABEL_65;
          }

          goto LABEL_3;
        }

        uint64_t v19 = -4447;
      }

      goto LABEL_37;
    }

    goto LABEL_37;
  }

  return result;
}

          uint64_t v26 = (void *)*(unsigned __int8 *)(a7 + 9);
          if (*(_BYTE *)(a7 + 9)) {
            int v36 = *a8 <= 0;
          }
          else {
            int v36 = 0;
          }
          if (v36)
          {
            int32_t v37 = *(_DWORD *)a7;
            if ((*(_DWORD *)a7 & 0x7C0) == 0)
            {
              uint64_t v26 = (void *)*(unsigned __int8 *)(a7 + 10);
              if (!*(_BYTE *)(a7 + 10) || (int)v19 >= 1 && !sub_18088DA3C((uint64_t)a2, v19))
              {
                uint64_t v26 = (void *)(v37 | 0x800u);
                *(_DWORD *)a7 = (_DWORD)v26;
              }
            }
          }
        }

        else
        {
          memset(v43, 0, sizeof(v43));
          int v40 = 0;
          uint64_t v16 = (*(uint64_t (**)(icu::ByteSink *, uint64_t, void, _OWORD *, uint64_t, int *))(*(void *)a6 + 24LL))( a6,  a3,  (a3 + 20),  v43,  256LL,  &v40);
          int v17 = v16;
          unint64_t v18 = 0LL;
          uint64_t v19 = 0LL;
          uint64_t v20 = a2 - 1;
          uint64_t v21 = *(_DWORD *)(v15 + 16) & 2;
          do
          {
            uint64_t v22 = a2[v18];
            if (v22 < 0)
            {
LABEL_41:
              *(_DWORD *)a7 |= *(_DWORD *)(a7 + 4);
              uint64_t v28 = v18 - v19;
              icu::UnicodeString::fromUTF8((const char *)(v16 + (int)v19), v18 - v19, (uint64_t)v42);
              icu::UnicodeString::operator=((icu::UnicodeString *)&v44, (icu::UnicodeString *)v42);
              icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v42);
              (*(void (**)(icu::ByteSink *, uint64_t, uint64_t))(*(void *)a6 + 16LL))(a6, v17, v19);
              icu::StringPiece::StringPiece((uint64_t)&v38, (const icu::StringPiece *)v41, v19);
              icu::UnicodeString::fromUTF8(v38, v39, (uint64_t)v42);
              sub_18088D630(v15, (icu::UnicodeString *)v42, 0LL, v28, a4, a5, (uint64_t)&v44, a7, a8);
              icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)v42);
              goto LABEL_42;
            }

            if ((unint64_t)a2[v18] - 65 > 0x19)
            {
              *(_BYTE *)(v16 + v18) = v22;
              if (v22 == 46)
              {
                if (a4) {
                  goto LABEL_41;
                }
                __int128 v23 = (int)v18 - (int)v19 <= 63 || a5 == 0;
                uint64_t v24 = *(_DWORD *)(a7 + 4) | (v18 == v19);
                if (!v23) {
                  v24 |= 2u;
                }
                *(void *)a7 = *(_DWORD *)a7 | v24;
                uint64_t v19 = (v18 + 1);
              }

              else if (v22 == 45)
              {
                if (v18 == (_DWORD)v19 + 3 && v20[v18] == 45) {
                  goto LABEL_41;
                }
              }
            }

            else
            {
              *(_BYTE *)(v16 + v18) = v22 + 32;
            }

            ++v18;
          }

          while (a3 != v18);
          if (a5)
          {
            if (!a4)
            {
              __int128 v25 = v18 - 1;
            }
          }

          *(_DWORD *)a7 |= *(_DWORD *)(a7 + 4);
          (*(void (**)(icu::ByteSink *, uint64_t, uint64_t))(*(void *)a6 + 16LL))(a6, v16, a3);
          (*(void (**)(icu::ByteSink *))(*(void *)a6 + 32LL))(a6);
        }

        return icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)&v44);
      }

      else
      {
        *(_DWORD *)a7 = 1;
        return (void *)(*(uint64_t (**)(icu::ByteSink *))(*(void *)a6 + 32LL))(a6);
      }
    }

    else
    {
      *a8 = 1;
    }
  }

  return result;
}

      icu::UnicodeString::~UnicodeString((void *)v26, (icu::UnicodeString *)&v45);
    }
  }

  while (v10 < v6);
  if (v41 < 0) {
    goto LABEL_70;
  }
  int32_t v37 = (unsigned __int16)v50 >> 5;
  if ((v50 & 0x8000u) != 0LL) {
    int32_t v37 = DWORD1(v50);
  }
  *(_DWORD *)(a5 + 12) = v41;
  *(_DWORD *)(a5 + 16) = v37 + v41;
  icu::Formattable::setString(a4, &v54);
LABEL_71:
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)&v49);
  icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)&v54);
  return result;
}

    ++v10;
    unint64_t v11 = v20;
  }

  if ((uint64_t)v10 < *(int *)(a1 + 12))
  {
    int v17 = *(unsigned int *)(a1 + 12);
    goto LABEL_10;
  }

      if (HIDWORD(v63) == v55 && (int)v61 >= 1)
      {
        int v36 = (int *)v69;
        do
        {
          int32_t v37 = *v36;
          if (*v36 <= 0) {
            v37 += dword_180A3E818[v32] + 1;
          }
          *v36++ = v37;
          if (v37 < v20) {
            uint64_t v20 = v37;
          }
          --v33;
        }

        while (v33);
      }
    }
  }

  unint64_t v18 = HIDWORD(v68);
  if (v66 < 2)
  {
    uint64_t v20 = 0;
  }

  else
  {
    if (v66 != 7 || HIDWORD(v68) == -1 || !(_DWORD)v68) {
      goto LABEL_104;
    }
    uint64_t v19 = 0LL;
    uint64_t v20 = 31;
    do
    {
      uint64_t v21 = *(_DWORD *)((char *)v71 + v19);
      if (v21 < 0)
      {
        v21 += dword_180A3E818[v18] + 1;
        *(_DWORD *)((char *)v71 + v19) = v21;
      }

      if (v21 < v20) {
        uint64_t v20 = v21;
      }
      v19 += 4LL;
    }

    while (v19 != 28);
    for (UChar32 i = 1; i != 7; ++i)
    {
      __int128 v23 = 0LL;
      while (*(_DWORD *)((char *)v71 + v23) != i + v20)
      {
        v23 += 4LL;
        if (v23 == 28) {
          goto LABEL_104;
        }
      }
    }
  }

void *icu::FilteredBreakIteratorBuilder::createInstance( icu::FilteredBreakIteratorBuilder *this, const icu::Locale *a2, UErrorCode *a3)
{
  int64_t v6 = (void *)icu::UMemory::operator new((icu::UMemory *)0x30, (unint64_t)a2);
  if (!v6)
  {
    if (*(int *)a2 <= 0)
    {
      uint64_t result = 0LL;
      *(_DWORD *)a2 = 7;
      return result;
    }

    return 0LL;
  }

  uint64_t result = sub_1807CC2C0(v6, this, (int *)a2);
  if (*(int *)a2 >= 1)
  {
    (*(void (**)(void *))(*result + 8LL))(result);
    return 0LL;
  }

  return result;
}

void *icu::FilteredBreakIteratorBuilder::createEmptyInstance( icu::FilteredBreakIteratorBuilder *this, UErrorCode *a2)
{
  if (*(int *)this <= 0)
  {
    int v5 = (void *)icu::UMemory::operator new((icu::UMemory *)0x30, (unint64_t)a2);
    if (v5)
    {
      uint64_t v2 = v5;
      void *v5 = off_18970B908;
      icu::UVector::UVector( (uint64_t)(v5 + 1),  (uint64_t)uprv_deleteUObject,  (uint64_t)uhash_compareUnicodeString,  1u,  (int *)this);
      v2[1] = &off_18970B988;
      (*(void (**)(void *))(*v2 + 8LL))(v2);
    }

    else if (*(int *)this <= 0)
    {
      uint64_t v2 = 0LL;
      *(_DWORD *)this = 7;
      return v2;
    }
  }

  return 0LL;
}

uint64_t sub_1807CCD1C()
{
  return 0LL;
}

BOOL sub_1807CCD24(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

icu::BreakIterator *sub_1807CCD30(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (icu::BreakIterator *)icu::UMemory::operator new((icu::UMemory *)0x200, a2);
  unsigned int v4 = v3;
  if (v3)
  {
    icu::BreakIterator::BreakIterator(v3, (const icu::BreakIterator *)a1);
    *(void *)unsigned int v4 = &off_18970B840;
    uint64_t v5 = *(void *)(a1 + 488);
    int64_t v6 = (unsigned int *)(v5 + 24);
    do
      unsigned int v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    *((void *)v4 + 61) = v5;
    *((void *)v4 + 62) = (*(uint64_t (**)(void))(**(void **)(a1 + 496) + 32LL))(*(void *)(a1 + 496));
    *((void *)v4 + 63) = 0LL;
  }

  return v4;
}

uint64_t sub_1807CCDA8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 496) + 40LL))(*(void *)(a1 + 496));
}

uint64_t sub_1807CCDB8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 496) + 48LL))(*(void *)(a1 + 496));
}

uint64_t sub_1807CCDC8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 496) + 56LL))(*(void *)(a1 + 496));
}

uint64_t sub_1807CCDD8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 496) + 64LL))(*(void *)(a1 + 496));
}

uint64_t sub_1807CCDE8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 496) + 72LL))(*(void *)(a1 + 496));
}

uint64_t sub_1807CCDF8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 496) + 112LL))(*(void *)(a1 + 496));
}

uint64_t sub_1807CCE08(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = -126;
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32LL))(a1);
}

uint64_t sub_1807CCE1C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1807CCE4C(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 8);
  else {
    int32_t v3 = v2 >> 5;
  }
  unsigned int v4 = *(unsigned __int16 *)(a2 + 8);
  if ((v4 & 1) != 0) {
    return (v2 & 1) == 0;
  }
  if ((v4 & 0x8000u) == 0) {
    int v5 = v4 >> 5;
  }
  else {
    int v5 = *(_DWORD *)(a2 + 12);
  }
  if ((v4 & 2) != 0) {
    uint64_t v6 = a2 + 10;
  }
  else {
    uint64_t v6 = *(void *)(a2 + 24);
  }
  return icu::UnicodeString::doCompare(a1, 0, v3, v6, v5 & (v5 >> 31), v5 & ~(v5 >> 31));
}

void ***sub_1807CCEBC(void ***a1)
{
  unsigned int v2 = *a1;
  if (v2)
  {
    icu::UCharsTrie::~UCharsTrie(v2);
    icu::UMemory::operator delete(v3);
  }

  return a1;
}

uint64_t *sub_1807CCEEC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    int32_t v3 = (void *)(v2 - 16);
    uint64_t v4 = *(void *)(v2 - 8);
    if (v4)
    {
      uint64_t v5 = v4 << 6;
      uint64_t v6 = v2 - 64;
      do
      {
        icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(v6 + v5));
        v5 -= 64LL;
      }

      while (v5);
    }

    icu::UMemory::operator delete[](v3);
  }

  return a1;
}

void icu::FilteredNormalizer2::~FilteredNormalizer2(icu::FilteredNormalizer2 *this)
{
}

icu::UnicodeString *icu::FilteredNormalizer2::normalize( icu::FilteredNormalizer2 *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  if ((*((_WORD *)a2 + 4) & 1) != 0)
  {
    *a4 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_9:
    icu::UnicodeString::setToBogus(a3);
    return a3;
  }

  if (a3 == a2)
  {
    *a4 = U_ILLEGAL_ARGUMENT_ERROR;
  }

  else
  {
    if ((*((_WORD *)a3 + 4) & 1) != 0) {
      __int16 v5 = 2;
    }
    else {
      __int16 v5 = *((_WORD *)a3 + 4) & 0x1F;
    }
    *((_WORD *)a3 + 4) = v5;
    icu::FilteredNormalizer2::normalize((uint64_t)this, (uint64_t)a2, (uint64_t)a3, 2, (int *)a4);
  }

  return a3;
}

uint64_t icu::FilteredNormalizer2::normalize(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int *a5)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  uint64_t v36 = 0LL;
  __int128 v35 = 0u;
  int32_t v32 = off_18971B688;
  LOWORD(v33) = 2;
  unsigned int v6 = *(unsigned __int16 *)(a2 + 8);
  BOOL v7 = (v6 & 0x8000u) != 0;
  int v8 = v6 >> 5;
  int v9 = *(_DWORD *)(a2 + 12);
  if ((v6 & 0x8000u) != 0) {
    int v8 = *(_DWORD *)(a2 + 12);
  }
  if (v8 >= 1)
  {
    int v14 = 0;
    uint64_t v15 = a2 + 10;
    do
    {
      uint64_t v16 = *(void *)(a2 + 24);
      if ((v6 & 2) != 0) {
        uint64_t v16 = v15;
      }
      if ((v6 & 0x11) != 0) {
        uint64_t v16 = 0LL;
      }
      int v17 = v6 >> 5;
      if (v7) {
        int v17 = v9;
      }
      if (v17 >= v14) {
        int v18 = v14;
      }
      else {
        int v18 = v17;
      }
      if (v14 >= 0) {
        int v19 = v18;
      }
      else {
        int v19 = 0;
      }
      int v20 = icu::UnicodeSet::span( *(icu::UnicodeSet **)(a1 + 16),  (UChar *)(v16 + 2LL * v19),  (v17 - v19),  a4)
          + v19;
      if (a4)
      {
        if (v20 == v14)
        {
          a4 = 0;
        }

        else
        {
          uint64_t v21 = *(void *)(a1 + 8);
          icu::UnicodeString::tempSubString((icu::UnicodeString *)a2, v14, v20 - v14, (icu::UnicodeString *)v31);
          uint64_t v22 = (*(uint64_t (**)(uint64_t, _BYTE *, void (***)(icu::UnicodeString *__hidden), int *))(*(void *)v21 + 24LL))( v21,  v31,  &v32,  a5);
          unsigned int v23 = *(unsigned __int16 *)(v22 + 8);
          int v24 = (__int16)v23;
          unsigned int v25 = v23 >> 5;
          if (v24 >= 0) {
            uint64_t v26 = v25;
          }
          else {
            uint64_t v26 = *(unsigned int *)(v22 + 12);
          }
          icu::UnicodeString::doAppend(a3, (const icu::UnicodeString *)v22, 0, v26);
          icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v31);
          a4 = 0;
          if (*a5 > 0) {
            break;
          }
        }
      }

      else
      {
        if (v20 != v14) {
          icu::UnicodeString::doAppend(a3, (const icu::UnicodeString *)a2, v14, (v20 - v14));
        }
        a4 = 2;
      }

      int v27 = *(__int16 *)(a2 + 8);
      unsigned int v6 = *(unsigned __int16 *)(a2 + 8);
      BOOL v28 = v27 < 0;
      BOOL v7 = v27 < 0;
      int v29 = (unsigned __int16)v27 >> 5;
      int v9 = *(_DWORD *)(a2 + 12);
      if (v28) {
        int v29 = *(_DWORD *)(a2 + 12);
      }
      int v14 = v20;
    }

    while (v20 < v29);
  }

  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v32);
  return a3;
}

uint64_t icu::FilteredNormalizer2::normalizeUTF8( uint64_t result, int a2, char *a3, size_t a4, uint64_t a5, _DWORD *a6, int *a7)
{
  if (*a7 <= 0)
  {
    uint64_t v13 = result;
    if ((a2 & 0x2000) == 0)
    {
      if (a6) {
        icu::Edits::reset((uint64_t)a6);
      }
    }

    return icu::FilteredNormalizer2::normalizeUTF8(v13, a2 | 0x2000u, a3, a4, a5, a6, 2, a7);
  }

  return result;
}

uint64_t icu::FilteredNormalizer2::normalizeUTF8( uint64_t result, uint64_t a2, char *a3, size_t a4, uint64_t a5, _DWORD *a6, int a7, int *a8)
{
  if ((int)a4 >= 1)
  {
    size_t v12 = a4;
    uint64_t v15 = result;
    do
    {
      uint64_t result = icu::UnicodeSet::spanUTF8(*(icu::UnicodeSet **)(v15 + 16), a3, v12, a7);
      uint64_t v16 = result;
      if (a7)
      {
        if ((_DWORD)result)
        {
          uint64_t result = (*(uint64_t (**)(void, uint64_t, char *, void, uint64_t, _DWORD *, int *))(**(void **)(v15 + 8) + 32LL))( *(void *)(v15 + 8),  a2,  a3,  result,  a5,  a6,  a8);
          if (*a8 > 0) {
            return result;
          }
        }

        a7 = 0;
      }

      else
      {
        if ((_DWORD)result)
        {
          if (a6) {
            uint64_t result = (uint64_t)icu::Edits::addUnchanged(a6, result);
          }
          if ((a2 & 0x4000) == 0) {
            uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)a5 + 16LL))(a5, a3, v16);
          }
        }

        a7 = 2;
      }

      a3 += (int)v16;
      BOOL v17 = __OFSUB__((_DWORD)v12, (_DWORD)v16);
      size_t v12 = (v12 - v16);
    }

    while (!(((v12 & 0x80000000) != 0LL) ^ v17 | ((_DWORD)v12 == 0)));
  }

  return result;
}

icu::UnicodeString *icu::FilteredNormalizer2::normalizeSecondAndAppend( icu::FilteredNormalizer2 *this, icu::UnicodeString *a2, const icu::UnicodeString *a3, UErrorCode *a4)
{
  return icu::FilteredNormalizer2::normalizeSecondAndAppend(this, a2, a3, 1, a4);
}

icu::UnicodeString *icu::FilteredNormalizer2::normalizeSecondAndAppend( icu::FilteredNormalizer2 *this, icu::UnicodeString *a2, const icu::UnicodeString *a3, int a4, UErrorCode *a5)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  unsigned int v7 = *((unsigned __int16 *)a2 + 4);
  if ((v7 & 1) != 0 || (unsigned int v9 = *((unsigned __int16 *)a3 + 4), (v9 & 1) != 0) || a2 == a3)
  {
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return a2;
  }

  if (v7 > 0x1F)
  {
    size_t v12 = (icu::UnicodeSet *)*((void *)this + 2);
    if ((v9 & 0x11) != 0)
    {
      uint64_t v13 = 0LL;
    }

    else if ((v9 & 2) != 0)
    {
      uint64_t v13 = (char *)a3 + 10;
    }

    else
    {
      uint64_t v13 = (char *)*((void *)a3 + 3);
    }

    int v15 = (__int16)v9;
    int v16 = v9 >> 5;
    if (v15 < 0) {
      int v16 = *((_DWORD *)a3 + 3);
    }
    if (v17)
    {
      __int128 v36 = 0u;
      __int128 v37 = 0u;
      __int128 v34 = 0u;
      __int128 v35 = 0u;
      icu::UnicodeString::tempSubString(a3, 0, v17, (icu::UnicodeString *)&v34);
      unsigned int v18 = *((unsigned __int16 *)a2 + 4);
      if ((v18 & 0x11) != 0)
      {
        int v19 = 0LL;
      }

      else if ((v18 & 2) != 0)
      {
        int v19 = (UChar *)((char *)a2 + 10);
      }

      else
      {
        int v19 = (UChar *)*((void *)a2 + 3);
      }

      int v20 = (__int16)v18;
      unsigned int v21 = v18 >> 5;
      if (v20 >= 0) {
        uint64_t v22 = v21;
      }
      else {
        uint64_t v22 = *((unsigned int *)a2 + 3);
      }
      unint64_t v23 = icu::UnicodeSet::spanBack(*((icu::UnicodeSet **)this + 2), v19, v22, 2);
      if ((_DWORD)v23)
      {
        uint64_t v24 = v23;
        memset(v33, 0, sizeof(v33));
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)v33, a2, v23, 0x7FFFFFFFLL);
        uint64_t v25 = 40LL;
        if (!a4) {
          uint64_t v25 = 48LL;
        }
        (*(void (**)(void))(**((void **)this + 1) + v25))();
        if ((SWORD4(v33[0]) & 0x8000u) == 0) {
          uint64_t v26 = WORD4(v33[0]) >> 5;
        }
        else {
          uint64_t v26 = HIDWORD(v33[0]);
        }
        icu::UnicodeString::doReplace(a2, v24, 0x7FFFFFFFLL, (const icu::UnicodeString *)v33, 0, v26);
        icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v33);
      }

      else
      {
        uint64_t v27 = **((void **)this + 1);
        if (a4) {
          BOOL v28 = *(void (**)(void))(v27 + 40);
        }
        else {
          BOOL v28 = *(void (**)(void))(v27 + 48);
        }
        v28();
      }

      icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v34);
    }

    unsigned int v29 = *((unsigned __int16 *)a3 + 4);
    int v30 = (__int16)v29;
    int32_t v31 = v29 >> 5;
    if (v30 < 0) {
      int32_t v31 = *((_DWORD *)a3 + 3);
    }
    if (v17 < v31)
    {
      __int128 v36 = 0u;
      __int128 v37 = 0u;
      __int128 v34 = 0u;
      __int128 v35 = 0u;
      icu::UnicodeString::tempSubString(a3, v17, 0x7FFFFFFF, (icu::UnicodeString *)&v34);
      if (a4)
      {
        icu::FilteredNormalizer2::normalize((uint64_t)this, (uint64_t)&v34, (uint64_t)a2, 0, (int *)a5);
      }

      else
      {
        if ((SWORD4(v34) & 0x8000u) == 0) {
          uint64_t v32 = WORD4(v34) >> 5;
        }
        else {
          uint64_t v32 = HIDWORD(v34);
        }
        icu::UnicodeString::doAppend((uint64_t)a2, (const icu::UnicodeString *)&v34, 0, v32);
      }

      icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v34);
    }

    return a2;
  }

  if (a4) {
    return (icu::UnicodeString *)(*(uint64_t (**)(icu::FilteredNormalizer2 *, const icu::UnicodeString *, icu::UnicodeString *, UErrorCode *))(*(void *)this + 24LL))( this,  a3,  a2,  a5);
  }
  else {
    return icu::UnicodeString::operator=((UChar **)a2, (UChar **)a3);
  }
}

icu::UnicodeString *icu::FilteredNormalizer2::append( icu::FilteredNormalizer2 *this, icu::UnicodeString *a2, const icu::UnicodeString *a3, UErrorCode *a4)
{
  return icu::FilteredNormalizer2::normalizeSecondAndAppend(this, a2, a3, 0, a4);
}

uint64_t icu::FilteredNormalizer2::getDecomposition( icu::UnicodeSet **this, uint64_t a2, icu::UnicodeString *a3)
{
  uint64_t result = icu::UnicodeSet::contains(this[2], a2);
  if ((_DWORD)result) {
    return (*(unsigned int (**)(icu::UnicodeSet *, uint64_t, icu::UnicodeString *))(*(void *)this[1] + 56LL))( this[1],  a2,  a3) != 0;
  }
  return result;
}

uint64_t icu::FilteredNormalizer2::getRawDecomposition( icu::UnicodeSet **this, uint64_t a2, icu::UnicodeString *a3)
{
  uint64_t result = icu::UnicodeSet::contains(this[2], a2);
  if ((_DWORD)result) {
    return (*(unsigned int (**)(icu::UnicodeSet *, uint64_t, icu::UnicodeString *))(*(void *)this[1] + 64LL))( this[1],  a2,  a3) != 0;
  }
  return result;
}

uint64_t icu::FilteredNormalizer2::composePair(icu::FilteredNormalizer2 *this, uint64_t a2, uint64_t a3)
{
  if (icu::UnicodeSet::contains(*((icu::UnicodeSet **)this + 2), a2)
    && icu::UnicodeSet::contains(*((icu::UnicodeSet **)this + 2), a3))
  {
    return (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 1) + 72LL))( *((void *)this + 1),  a2,  a3);
  }

  else
  {
    return 0xFFFFFFFFLL;
  }

uint64_t icu::FilteredNormalizer2::getCombiningClass(icu::UnicodeSet **this, uint64_t a2)
{
  uint64_t result = icu::UnicodeSet::contains(this[2], a2);
  if ((_DWORD)result) {
    return (*(uint64_t (**)(icu::UnicodeSet *, uint64_t))(*(void *)this[1] + 80LL))(this[1], a2);
  }
  return result;
}

uint64_t icu::FilteredNormalizer2::isNormalized( icu::UnicodeSet **this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  unsigned int v6 = *((unsigned __int16 *)a2 + 4);
  if ((v6 & 1) != 0)
  {
    uint64_t result = 0LL;
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
  }

  else
  {
    BOOL v7 = (v6 & 0x8000u) != 0;
    int v8 = v6 >> 5;
    int v9 = *((_DWORD *)a2 + 3);
    if ((v6 & 0x8000u) != 0) {
      int v8 = *((_DWORD *)a2 + 3);
    }
    if (v8 >= 1)
    {
      int v11 = 0;
      int v12 = 2;
      do
      {
        uint64_t v13 = (char *)*((void *)a2 + 3);
        if ((v6 & 2) != 0) {
          uint64_t v13 = (char *)a2 + 10;
        }
        if ((v6 & 0x11) != 0) {
          uint64_t v13 = 0LL;
        }
        int v14 = v6 >> 5;
        if (v7) {
          int v14 = v9;
        }
        if (v14 >= v11) {
          int v15 = v11;
        }
        else {
          int v15 = v14;
        }
        if (v11 >= 0) {
          int v16 = v15;
        }
        else {
          int v16 = 0;
        }
        int v17 = icu::UnicodeSet::span(this[2], (UChar *)&v13[2 * v16], (v14 - v16), v12) + v16;
        if (v12)
        {
          unsigned int v18 = this[1];
          icu::UnicodeString::tempSubString(a2, v11, v17 - v11, (icu::UnicodeString *)v24);
          if (!(*(unsigned int (**)(icu::UnicodeSet *, _BYTE *, UErrorCode *))(*(void *)v18 + 88LL))( v18,  v24,  a3))
          {
            icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v24);
            return 0LL;
          }

          int v20 = *a3;
          icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v24);
          int v12 = 0;
          if (v20 >= 1) {
            return 0LL;
          }
        }

        else
        {
          int v12 = 2;
        }

        int v21 = *((__int16 *)a2 + 4);
        unsigned int v6 = *((unsigned __int16 *)a2 + 4);
        BOOL v22 = v21 < 0;
        BOOL v7 = v21 < 0;
        int v23 = (unsigned __int16)v21 >> 5;
        int v9 = *((_DWORD *)a2 + 3);
        if (v22) {
          int v23 = *((_DWORD *)a2 + 3);
        }
        int v11 = v17;
      }

      while (v17 < v23);
    }

    return 1LL;
  }

  return result;
}

uint64_t icu::FilteredNormalizer2::isNormalizedUTF8(uint64_t a1, char *a2, size_t a3, int *a4)
{
  if (*a4 > 0) {
    return 0LL;
  }
  size_t v5 = a3;
  if ((int)a3 >= 1)
  {
    int v9 = 2;
    do
    {
      unsigned int v10 = icu::UnicodeSet::spanUTF8(*(icu::UnicodeSet **)(a1 + 16), a2, v5, v9);
      if (v9)
      {
        int v9 = 0;
        if ((*(unsigned int (**)(void, char *, void, int *))(**(void **)(a1 + 8) + 96LL))( *(void *)(a1 + 8),  a2,  v10,  a4))
        {
          BOOL v11 = *a4 <= 0;
        }

        else
        {
          BOOL v11 = 0;
        }

        if (!v11) {
          return 0LL;
        }
      }

      else
      {
        int v9 = 2;
      }

      a2 += (int)v10;
      BOOL v12 = __OFSUB__((_DWORD)v5, v10);
      size_t v5 = v5 - v10;
    }

    while (!(((v5 & 0x80000000) != 0LL) ^ v12 | ((_DWORD)v5 == 0)));
  }

  return 1LL;
}

uint64_t icu::FilteredNormalizer2::quickCheck( icu::UnicodeSet **this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  unsigned int v5 = *((unsigned __int16 *)a2 + 4);
  if ((v5 & 1) != 0)
  {
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    return 2LL;
  }

  BOOL v6 = (v5 & 0x8000u) != 0;
  int v7 = v5 >> 5;
  int v8 = *((_DWORD *)a2 + 3);
  if ((v5 & 0x8000u) != 0) {
    int v7 = *((_DWORD *)a2 + 3);
  }
  if (v7 < 1) {
    return 1LL;
  }
  int v10 = 0;
  uint64_t v11 = 1LL;
  int v12 = 2;
  do
  {
    uint64_t v13 = (char *)*((void *)a2 + 3);
    if ((v5 & 2) != 0) {
      uint64_t v13 = (char *)a2 + 10;
    }
    if ((v5 & 0x11) != 0) {
      uint64_t v13 = 0LL;
    }
    int v14 = v5 >> 5;
    if (v6) {
      int v14 = v8;
    }
    if (v14 >= v10) {
      int v15 = v10;
    }
    else {
      int v15 = v14;
    }
    if (v10 >= 0) {
      int v16 = v15;
    }
    else {
      int v16 = 0;
    }
    int v17 = icu::UnicodeSet::span(this[2], (UChar *)&v13[2 * v16], (v14 - v16), v12) + v16;
    if (v12)
    {
      unsigned int v18 = this[1];
      icu::UnicodeString::tempSubString(a2, v10, v17 - v10, (icu::UnicodeString *)v25);
      uint64_t v19 = (*(uint64_t (**)(icu::UnicodeSet *, _BYTE *, UErrorCode *))(*(void *)v18 + 104LL))(v18, v25, a3);
      icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v25);
      if ((_DWORD)v19 == 2) {
        uint64_t v11 = 2LL;
      }
      else {
        uint64_t v11 = v11;
      }
      int v12 = 0;
    }

    else
    {
      int v12 = 2;
    }

    int v21 = *((__int16 *)a2 + 4);
    unsigned int v5 = *((unsigned __int16 *)a2 + 4);
    BOOL v22 = v21 < 0;
    BOOL v6 = v21 < 0;
    int v23 = (unsigned __int16)v21 >> 5;
    int v8 = *((_DWORD *)a2 + 3);
    if (v22) {
      int v23 = *((_DWORD *)a2 + 3);
    }
    int v10 = v17;
    uint64_t v19 = v11;
  }

  while (v17 < v23);
  return v19;
}

uint64_t icu::FilteredNormalizer2::spanQuickCheckYes( icu::UnicodeSet **this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  unsigned int v6 = *((unsigned __int16 *)a2 + 4);
  if ((v6 & 1) != 0)
  {
    uint64_t v3 = 0LL;
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
  }

  else
  {
    BOOL v7 = (v6 & 0x8000u) != 0;
    int v8 = v6 >> 5;
    unsigned int v9 = *((_DWORD *)a2 + 3);
    if ((v6 & 0x8000u) != 0) {
      int v8 = *((_DWORD *)a2 + 3);
    }
    if (v8 >= 1)
    {
      int v11 = 0;
      int v12 = 2;
      do
      {
        uint64_t v13 = (char *)*((void *)a2 + 3);
        if ((v6 & 2) != 0) {
          uint64_t v13 = (char *)a2 + 10;
        }
        if ((v6 & 0x11) != 0) {
          uint64_t v13 = 0LL;
        }
        int v14 = v6 >> 5;
        if (v7) {
          int v14 = v9;
        }
        if (v14 >= v11) {
          int v15 = v11;
        }
        else {
          int v15 = v14;
        }
        if (v11 >= 0) {
          int v16 = v15;
        }
        else {
          int v16 = 0;
        }
        int v17 = icu::UnicodeSet::span(this[2], (UChar *)&v13[2 * v16], (v14 - v16), v12) + v16;
        if (v12)
        {
          unsigned int v18 = this[1];
          icu::UnicodeString::tempSubString(a2, v11, v17 - v11, (icu::UnicodeString *)v23);
          uint64_t v3 = (*(unsigned int (**)(icu::UnicodeSet *, _BYTE *, UErrorCode *))(*(void *)v18 + 112LL))( v18,  v23,  a3)
             + v11;
          icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v23);
          int v12 = 0;
        }

        else
        {
          int v12 = 2;
        }

        int v19 = *((__int16 *)a2 + 4);
        unsigned int v6 = *((unsigned __int16 *)a2 + 4);
        BOOL v20 = v19 < 0;
        BOOL v7 = v19 < 0;
        int v21 = (unsigned __int16)v19 >> 5;
        unsigned int v9 = *((_DWORD *)a2 + 3);
        if (v20) {
          int v21 = *((_DWORD *)a2 + 3);
        }
        int v11 = v17;
      }

      while (v17 < v21);
    }

    if ((v6 & 0x8000) != 0) {
      return v9;
    }
    else {
      return v6 >> 5;
    }
  }

  return v3;
}

BOOL icu::FilteredNormalizer2::hasBoundaryBefore(icu::UnicodeSet **this, uint64_t a2)
{
}

BOOL icu::FilteredNormalizer2::hasBoundaryAfter(icu::UnicodeSet **this, uint64_t a2)
{
}

BOOL icu::FilteredNormalizer2::isInert(icu::UnicodeSet **this, uint64_t a2)
{
}

void *unorm2_openFiltered(uint64_t a1, unint64_t a2, int *a3)
{
  if (*a3 > 0) {
    return 0LL;
  }
  if (a2)
  {
    uint64_t result = (void *)icu::UMemory::operator new((icu::UMemory *)0x18, a2);
    if (result)
    {
      *uint64_t result = off_18970BA28;
      result[1] = a1;
      result[2] = a2;
      return result;
    }

    int v7 = 7;
  }

  else
  {
    uint64_t result = 0LL;
    int v7 = 1;
  }

  *a3 = v7;
  return result;
}

void u_getDataVersion(uint8_t *a1, int *a2)
{
  if (a1 && *a2 <= 0)
  {
    uint64_t v4 = ures_openDirect(0LL, (uint64_t)"icuver", (uint64_t)a2);
    uint64_t v5 = v4;
    if (*a2 <= 0) {
      ures_getVersionByKey(v4, "DataVersion", a1, a2);
    }
    ures_close(v5);
  }

void sub_1807CE000(uint64_t a1)
{
  *(void *)a1 = off_18970BAE0;
  udata_close(*(_OWORD **)(a1 + 80));
  ucptrie_close(*(void *)(a1 + 88));
  icu::Normalizer2Impl::~Normalizer2Impl((icu::Normalizer2Impl *)a1);
}

void sub_1807CE040(uint64_t a1)
{
}

BOOL sub_1807CE054(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  return *(unsigned __int16 *)a4 >= 0x14u
      && !a4[4]
      && !a4[5]
      && a4[8] == 78
      && a4[9] == 114
      && a4[10] == 109
      && a4[11] == 50
      && a4[12] == 4;
}

unsigned int *sub_1807CE0BC(unsigned int *result, char *a2, const char *a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    uint64_t v5 = (uint64_t)result;
    uint64_t result = (unsigned int *)udata_openChoice( a2,  "nrm",  a3,  (unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1807CE054,  (uint64_t)result,  a4);
    *(void *)(v5 + 80) = result;
    if (*(int *)a4 <= 0)
    {
      uint64_t result = (unsigned int *)udata_getMemory((uint64_t)result);
      uint64_t v6 = *result;
      if ((int)v6 > 75)
      {
        int v7 = result;
        uint64_t v8 = (int)result[1];
        uint64_t result = ucptrie_openFromBinary(0, 0, (uint64_t)result + v6, (int)v8 - (int)v6, 0LL, (int *)a4);
        *(void *)(v5 + 88) = result;
        if (*(int *)a4 <= 0) {
          return (unsigned int *)icu::Normalizer2Impl::init( v5,  v7,  (uint64_t)result,  (uint64_t)v7 + v8,  (uint64_t)v7 + (int)v7[2]);
        }
      }

      else
      {
        *a4 = U_INVALID_FORMAT_ERROR;
      }
    }
  }

  return result;
}

uint64_t sub_1807CE19C(char *a1, const char *a2, UErrorCode *a3)
{
  uint64_t v7 = icu::UMemory::operator new((icu::UMemory *)0x60, (unint64_t)a2);
  if (!v7)
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
    return 0LL;
  }

  uint64_t v8 = v7;
  *(void *)(v7 + 32) = 0LL;
  *(void *)(v7 + 64) = 0LL;
  *(void *)(v7 + 72) = 0LL;
  *(void *)uint64_t v7 = off_18970BAE0;
  *(void *)(v7 + 80) = 0LL;
  *(void *)(v7 + 88) = 0LL;
  sub_1807CE0BC((unsigned int *)v7, a1, a2, a3);
  return sub_1807E7D60(v8, (int *)a3);
}

void sub_1807CE234(const char *a1, UErrorCode *a2)
{
  uint64_t v4 = "nfkc";
  if (!strcmp(a1, "nfkc"))
  {
    uint64_t v5 = &qword_18C4489A0;
  }

  else
  {
    uint64_t v4 = "nfkc_cf";
    if (!strcmp(a1, "nfkc_cf"))
    {
      uint64_t v5 = &qword_18C534CE8;
    }

    else
    {
      uint64_t v4 = "nfkc_scf";
      if (strcmp(a1, "nfkc_scf")) {
        abort();
      }
      uint64_t v5 = &qword_18C534CF0;
    }
  }

  uint64_t *v5 = sub_1807CE19C(0LL, v4, a2);
  sub_180820C94(0xFu, (uint64_t)sub_1807CE758);
}

uint64_t icu::Normalizer2::getNFKCInstance(icu::Normalizer2 *this, UErrorCode *a2)
{
  if (*(int *)this <= 0)
  {
    sub_1807C3D28( (unsigned int *)&unk_18C4489B0,  (void (*)(uint64_t, int *))sub_1807CE234,  (uint64_t)"nfkc",  (int *)this);
    uint64_t v2 = qword_18C4489A0;
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  if (v2) {
    return v2 + 8;
  }
  else {
    return 0LL;
  }
}

uint64_t icu::Normalizer2::getNFKDInstance(icu::Normalizer2 *this, UErrorCode *a2)
{
  if (*(int *)this <= 0)
  {
    sub_1807C3D28( (unsigned int *)&unk_18C4489B0,  (void (*)(uint64_t, int *))sub_1807CE234,  (uint64_t)"nfkc",  (int *)this);
    uint64_t v2 = qword_18C4489A0;
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  if (v2) {
    return v2 + 32;
  }
  else {
    return 0LL;
  }
}

uint64_t icu::Normalizer2::getNFKCCasefoldInstance(icu::Normalizer2 *this, UErrorCode *a2)
{
  if (*(int *)this <= 0)
  {
    sub_1807C3D28( (unsigned int *)&unk_18C534CF8,  (void (*)(uint64_t, int *))sub_1807CE234,  (uint64_t)"nfkc_cf",  (int *)this);
    uint64_t v2 = qword_18C534CE8;
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  if (v2) {
    return v2 + 8;
  }
  else {
    return 0LL;
  }
}

uint64_t icu::Normalizer2::getNFKCSimpleCasefoldInstance(icu::Normalizer2 *this, UErrorCode *a2)
{
  if (*(int *)this <= 0)
  {
    sub_1807C3D28( (unsigned int *)&unk_18C534D00,  (void (*)(uint64_t, int *))sub_1807CE234,  (uint64_t)"nfkc_scf",  (int *)this);
    uint64_t v2 = qword_18C534CF0;
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  if (v2) {
    return v2 + 8;
  }
  else {
    return 0LL;
  }
}

uint64_t icu::Normalizer2::getInstance(char *a1, char *__s1, int a3, int *a4)
{
  if (*a4 > 0) {
    return 0LL;
  }
  if (!__s1 || !*__s1)
  {
    uint64_t result = 0LL;
    *a4 = 1;
    return result;
  }

  if (a1) {
    goto LABEL_6;
  }
  if (!strcmp(__s1, "nfc"))
  {
    uint64_t v9 = sub_1807E7E94(a4);
  }

  else if (!strcmp(__s1, "nfkc"))
  {
    sub_1807C3D28( (unsigned int *)&unk_18C4489B0,  (void (*)(uint64_t, int *))sub_1807CE234,  (uint64_t)"nfkc",  a4);
    uint64_t v9 = qword_18C4489A0;
  }

  else if (!strcmp(__s1, "nfkc_cf"))
  {
    sub_1807C3D28( (unsigned int *)&unk_18C534CF8,  (void (*)(uint64_t, int *))sub_1807CE234,  (uint64_t)"nfkc_cf",  a4);
    uint64_t v9 = qword_18C534CE8;
  }

  else
  {
    if (strcmp(__s1, "nfkc_scf")) {
      goto LABEL_6;
    }
    sub_1807C3D28( (unsigned int *)&unk_18C534D00,  (void (*)(uint64_t, int *))sub_1807CE234,  (uint64_t)"nfkc_scf",  a4);
    uint64_t v9 = qword_18C534CF0;
  }

  if (v9) {
    goto LABEL_31;
  }
  if (*a4 > 0) {
    return 0LL;
  }
LABEL_6:
  umtx_lock(0LL);
  if (!qword_18C4489A8)
  {
    umtx_unlock(0LL);
    goto LABEL_17;
  }

  uint64_t v9 = uhash_get(qword_18C4489A8, (uint64_t)__s1);
  umtx_unlock(0LL);
  if (!v9)
  {
LABEL_17:
    sub_180820C94(0xFu, (uint64_t)sub_1807CE758);
    int v10 = (uint64_t *)sub_1807CE19C(a1, __s1, (UErrorCode *)a4);
    int v17 = v10;
    if (*a4 >= 1)
    {
LABEL_18:
      sub_1807CEB60(&v17);
      return 0LL;
    }

    uint64_t v11 = (uint64_t)v10;
    umtx_lock(0LL);
    uint64_t v12 = qword_18C4489A8;
    if (!qword_18C4489A8)
    {
      int v16 = uhash_open((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, 0LL, a4);
      qword_18C4489A8 = (uint64_t)v16;
      if (*a4 > 0) {
        goto LABEL_40;
      }
      uhash_setKeyDeleter((uint64_t)v16, (uint64_t)uprv_free);
      uhash_setValueDeleter(qword_18C4489A8, (uint64_t)sub_1807CE7F0);
      uint64_t v12 = qword_18C4489A8;
    }

    uint64_t v9 = uhash_get(v12, (uint64_t)__s1);
    if (v9) {
      goto LABEL_23;
    }
    size_t v13 = (int)(strlen(__s1) + 1);
    int v14 = uprv_malloc(v13);
    if (v14)
    {
      uint64_t v15 = (uint64_t)v14;
      memcpy(v14, __s1, v13);
      int v17 = 0LL;
      uhash_put(qword_18C4489A8, v15, v11, a4);
      uint64_t v9 = v11;
LABEL_23:
      umtx_unlock(0LL);
      sub_1807CEB60(&v17);
      if (!v9) {
        return 0LL;
      }
      goto LABEL_31;
    }

    *a4 = 7;
LABEL_40:
    umtx_unlock(0LL);
    goto LABEL_18;
  }

LABEL_31:
  if (*a4 > 0) {
    return 0LL;
  }
  switch(a3)
  {
    case 0:
      uint64_t result = v9 + 8;
      break;
    case 1:
      uint64_t result = v9 + 32;
      break;
    case 2:
      uint64_t result = v9 + 48;
      break;
    case 3:
      uint64_t result = v9 + 64;
      break;
    default:
      return 0LL;
  }

  return result;
}

  uint64_t v25 = 1;
LABEL_48:
  __int128 v33 = *(unsigned __int16 *)(a1 + 30);
  if (v33 <= v20)
  {
    __int128 v34 = v20 >> 10 <= 0x3E ? 0 : v20 >> 1;
    if (!a4
      || !v34
      || *(unsigned __int16 *)(a1 + 14) >= v25
      || *(unsigned __int8 *)(*(void *)(a1 + 48) + (v25 & 0xFFFE) + 1LL) <= v34)
    {
      while (1)
      {
        uint64_t v15 = v5;
        if ((unsigned __int16)v20 <= 0xFE01u)
        {
          if (!a5) {
            return v16;
          }
          *a5 = 2;
        }

        if (v5 == v8) {
          return v8;
        }
        ++v5;
        __int128 v36 = *v15;
        if ((v36 & 0xF800) != 0xD800)
        {
          uint64_t v38 = *(void *)(a1 + 32);
          __int128 v35 = (v36 & 0x3F) + *(unsigned __int16 *)(*(void *)v38 + ((v36 >> 5) & 0x7FE));
          goto LABEL_71;
        }

        if ((v36 & 0x400) != 0 || v5 == v8) {
          break;
        }
        __int128 v37 = *v5;
        uint64_t v38 = *(void *)(a1 + 32);
        if ((v37 & 0xFC00) != 0xDC00) {
          goto LABEL_70;
        }
        uint64_t v5 = v15 + 2;
        uint64_t v39 = ((_DWORD)v36 << 10) - 56613888 + v37;
        if (v39 >= *(_DWORD *)(v38 + 24))
        {
          __int128 v35 = *(_DWORD *)(v38 + 20) - 2;
        }

        else
        {
          int v40 = ucptrie_internalSmallIndex((uint64_t *)v38, v39);
          a5 = v47;
          __int128 v35 = v40;
          uint64_t v38 = *(void *)(a1 + 32);
          LOWORD(v33) = *(_WORD *)(a1 + 30);
        }

  *a2 = 15;
LABEL_56:
  *(_DWORD *)(v4 + 80) = v10;
  *(_DWORD *)(v4 + 84) = -v9 & ((int)v9 >> 31);
  *(void *)(v3 + 16) = v5;
  *(void *)(v3 + 32) = v6;
  return result;
}

    uint64_t v8 = 0LL;
    *a8 = 1;
    return v8;
  }

  return 0LL;
}

    if (a2)
    {
      int v21 = v14 + 28;
      BOOL v22 = 29;
      uint64_t result = 5LL;
      int v23 = 28LL;
      while (2)
      {
        uint64_t v24 = (_DWORD *)(v17 + 4 * (v10 - v23));
        uint64_t v25 = v22;
        uint64_t v26 = (_DWORD *)(*(void *)v4 + 4LL * v14);
        while (*v24 == *v26)
        {
          ++v24;
          ++v26;
          if (--v25 <= 1)
          {
            *int v16 = v10 - v23;
            if ((int)v23 > 31)
            {
              v14 += v23;
            }

            else
            {
              __int128 v34 = 0;
              __int128 v35 = (int *)(v17 + 4LL * v21);
              __int128 v36 = (_DWORD *)(v17 + 4LL * v10);
              do
              {
                __int128 v37 = *v35++;
                *v36++ = v37;
                --v34;
                uint64_t result = (result - 1);
              }

              while (result > 1);
              int v14 = v21 - v34;
              v10 -= v34;
            }

            goto LABEL_48;
          }
        }

        v21 -= 4;
        v22 -= 4;
        uint64_t result = (result + 4);
        uint64_t v27 = v23 > 4;
        v23 -= 4LL;
        if (v27) {
          continue;
        }
        break;
      }
    }

  if (v3 >= 1 && !*((_BYTE *)&v17[-4] + v2 - 1)) {
    uint64_t v3 = 0;
  }
  return v4 - v3;
}

  icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)&v24);
LABEL_32:
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)&v28);
  return icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v33);
}

      int v30 = 0;
LABEL_39:
      *a4 = v21;
      *a5 = v30;
      return v23;
    }

  *a6 = U_INVALID_CHAR_FOUND;
LABEL_32:
  icu::FieldPosition::~FieldPosition((icu::FieldPosition *)&v30);
  return a5;
}

  LODWORD(i) = *(_DWORD *)a4;
  if (v90)
  {
    UChar32 i = (int)i;
    icu::UnicodeString::trim((icu::UnicodeString *)&v92);
    while (1)
    {
      BOOL v20 = *((__int16 *)a3 + 4);
      if (v20 < 0)
      {
        int v21 = a3[3];
        if (i >= v21) {
          break;
        }
      }

      else
      {
        int v21 = (unint64_t)*((unsigned __int16 *)a3 + 4) >> 5;
      }

      if (v21 <= i)
      {
        int v23 = 0xFFFF;
      }

      else
      {
        BOOL v22 = (v20 & 2) != 0 ? (int *)((char *)a3 + 10) : (int *)*((void *)a3 + 3);
        int v23 = *((unsigned __int16 *)v22 + i);
      }

      ++i;
    }

    uint64_t v12 = *((unsigned __int16 *)this + 4);
  }

  if ((v12 & 0x8000u) == 0) {
    uint64_t v24 = v12 >> 5;
  }
  else {
    uint64_t v24 = *((_DWORD *)this + 3);
  }
  if (v24 <= v10)
  {
    uint64_t v26 = -1;
  }

  else
  {
    if ((v12 & 2) != 0) {
      uint64_t v25 = v11;
    }
    else {
      uint64_t v25 = (char *)*((void *)this + 3);
    }
    uint64_t v26 = *(_WORD *)&v25[2 * v10];
  }

  PatternCharint Index = icu::DateFormatSymbols::getPatternCharIndex(v26);
  if (PatternCharIndex == 38) {
    BOOL v28 = 0LL;
  }
  else {
    BOOL v28 = (icu::UnicodeSet *)sub_18098F640(PatternCharIndex);
  }
  unsigned int v29 = (unsigned __int16)v93;
  if ((v93 & 0x8000u) == 0LL) {
    int v30 = (unsigned __int16)v93 >> 5;
  }
  else {
    int v30 = DWORD1(v93);
  }
  if (v30 < 1)
  {
LABEL_166:
    for (UChar32 i = *(int *)a4; ; ++i)
    {
      uint64_t v70 = *((__int16 *)a3 + 4);
      if (v70 < 0)
      {
        v71 = a3[3];
        if (i >= v71) {
          goto LABEL_164;
        }
      }

      else
      {
        v71 = (unint64_t)*((unsigned __int16 *)a3 + 4) >> 5;
      }

      if (v71 <= i)
      {
        int v73 = 0xFFFF;
        if (!v28) {
          goto LABEL_164;
        }
      }

      else
      {
        if ((v70 & 2) != 0) {
          int v72 = (char *)a3 + 10;
        }
        else {
          int v72 = (char *)*((void *)a3 + 3);
        }
        int v73 = *(unsigned __int16 *)&v72[2 * i];
        if (!v28) {
          goto LABEL_164;
        }
      }
    }
  }

  BOOL v86 = v28;
  int32_t v31 = 0LL;
  while (1)
  {
    uint64_t v32 = *((unsigned __int16 *)a3 + 4);
    __int128 v33 = (__int16)v32;
    __int128 v34 = v32 >> 5;
    if (v33 < 0) {
      __int128 v34 = a3[3];
    }
    __int128 v35 = (int)v31;
    __int128 v36 = v31 << 32;
    __int128 v37 = 1;
    if ((v29 & 0x8000) == 0)
    {
LABEL_69:
      uint64_t v38 = v29 >> 5;
      if (v35 >= v38) {
        goto LABEL_81;
      }
      goto LABEL_72;
    }

    while (1)
    {
      LODWORD(v38) = DWORD1(v93);
      if (v35 >= SDWORD1(v93)) {
        break;
      }
LABEL_72:
      if (v38 <= v31)
      {
        int v40 = 0xFFFFLL;
      }

      else
      {
        uint64_t v39 = (v29 & 2) != 0 ? (__int128 *)((char *)&v93 + 2) : (__int128 *)v94;
        int v40 = *((unsigned __int16 *)v39 + v35);
      }

      if (!icu::PatternProps::isWhiteSpace((icu::PatternProps *)v40)) {
        break;
      }
      __int128 v37 = 0;
      ++v35;
      unsigned int v29 = (unsigned __int16)v93;
      v36 += 0x100000000LL;
      int32_t v31 = (v31 + 1);
      if ((v93 & 0x8000) == 0) {
        goto LABEL_69;
      }
    }

              ures_close(v12);
            }

            else
            {
              BOOL v20 = 0;
            }

            uint64_t v24 = ures_hasNext(v9);
            if (v20) {
              break;
            }
          }

          while (v24);
        }

        ures_close(v10);
        ures_close(v9);
      }
    }

    else if ((_DWORD)v8 == 1)
    {
      *(_DWORD *)a3 = 0;
    }

    icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v29);
  }

  return a2;
}

    uint64_t result = icu::UnicodeString::~UnicodeString((void *)v17, (icu::UnicodeString *)&v33);
    if (v12) {
      return (void *)icu::TextTrieMap::search(v13, v12, a3, a4, (v16 + a5), a6, a7);
    }
  }

  else
  {
    uint64_t v25 = *(unsigned __int16 *)(a3 + 8);
    if ((v25 & 0x8000u) == 0) {
      uint64_t v26 = v25 >> 5;
    }
    else {
      uint64_t v26 = *(_DWORD *)(a3 + 12);
    }
    if (v26 <= a5)
    {
      BOOL v28 = 0xFFFF;
    }

    else
    {
      if ((v25 & 2) != 0) {
        uint64_t v27 = a3 + 10;
      }
      else {
        uint64_t v27 = *(void *)(a3 + 24);
      }
      BOOL v28 = *(unsigned __int16 *)(v27 + 2LL * a5);
    }

    unsigned int v29 = *((unsigned __int16 *)v12 + 5);
    if (*((_WORD *)v12 + 5))
    {
      int v30 = v13[2];
      while (1)
      {
        int32_t v31 = v29;
        uint64_t v32 = *(unsigned __int16 *)(v30 + 16LL * v29 + 8);
        if (v32 == v28) {
          break;
        }
        if (v32 <= v28)
        {
          unsigned int v29 = *(unsigned __int16 *)(v30 + 16 * v31 + 12);
          if (*(_WORD *)(v30 + 16 * v31 + 12)) {
            continue;
          }
        }

        return result;
      }

      uint64_t v12 = (void *)(v30 + 16 * v31);
      int v16 = 1;
      if (v12) {
        return (void *)icu::TextTrieMap::search(v13, v12, a3, a4, (v16 + a5), a6, a7);
      }
    }
  }

  return result;
}

    if (v16 >= 1)
    {
      ulist_deleteList(EmptyList);
LABEL_5:
      EmptyList = 0LL;
    }
  }

  ures_close(v7);
  ures_close(v6);
  int v10 = 0LL;
  if (*a4 <= 0 && EmptyList)
  {
    int v10 = uprv_malloc(0x38uLL);
    if (v10)
    {
      ulist_resetList(EmptyList);
      *int v10 = xmmword_18972C808;
      v10[1] = *(_OWORD *)&off_18972C818;
      v10[2] = xmmword_18972C828;
      *((void *)v10 + 6) = ulist_reset_keyword_values_iterator;
      *((void *)v10 + 1) = EmptyList;
    }

    else
    {
      *a4 = 7;
      ulist_deleteList(EmptyList);
    }
  }

  return v10;
}

                unsigned int v29 = v17 - 1;
                goto LABEL_39;
              }
            }
          }
        }

        else if ((v9 + 62) <= 0x1Du)
        {
          uint64_t v25 = *v6;
          if ((_DWORD)v25 != v11)
          {
            uint64_t v26 = v8[v25] ^ 0x80;
            if (v26 <= 0x3F)
            {
              uint64_t v27 = *(unsigned int *)(*(void *)(*((void *)this + 1) + 16LL)
                                    + 4LL
              *a2 = ((v9 & 0x1F) << 6) | v26;
              int v17 = *((_DWORD *)this + 100);
              *((_DWORD *)this + 100) = v17 + 1;
              BOOL v28 = *a2;
              if ((int)v28 < 192
                || !icu::CollationFCD::tcccIndex[v28 >> 5]
                || ((icu::CollationFCD::tcccBits[icu::CollationFCD::tcccIndex[v28 >> 5]] >> v28) & 1) == 0
                || v17 + 1 == *((_DWORD *)this + 101)
                || !icu::FCDUTF8CollationIterator::nextHasLccc(this))
              {
                return v27;
              }

              goto LABEL_31;
            }
          }
        }

        CharSafeBody = utf8_nextCharSafeBody(v8, v6, v11, v10, -3);
        *a2 = CharSafeBody;
        if (CharSafeBody == 65533) {
          return 4294771973LL;
        }
        int32_t v31 = CharSafeBody;
        uint64_t v32 = (unsigned __int16)((CharSafeBody >> 10) - 10304);
        __int128 v33 = icu::CollationFCD::tcccIndex[v32 >> 5];
        if (!v33) {
          return sub_1808B2488(*((uint64_t **)this + 2), v31);
        }
        if (((icu::CollationFCD::tcccBits[v33] >> (CharSafeBody >> 10)) & 1) == 0) {
          return sub_1808B2488(*((uint64_t **)this + 2), v31);
        }
        __int128 v34 = *((_DWORD *)this + 100);
        unsigned int v29 = v34 - 4;
LABEL_39:
        *((_DWORD *)this + 100) = v29;
LABEL_45:
        *a2 = -1;
        return 192LL;
      case 1:
        BOOL v20 = *((_DWORD *)this + 100);
        int v21 = v20 != *((_DWORD *)this + 104);
        *((_DWORD *)this + 103) = v20;
        BOOL v22 = 2 * v21;
        goto LABEL_43;
      case 2:
        if (*((_DWORD *)this + 100) != *((_DWORD *)this + 104)) {
          return icu::UTF8CollationIterator::handleNextCE32(this, a2, a3);
        }
        BOOL v22 = 0;
        goto LABEL_43;
      case 3:
        int v23 = *((int *)this + 100);
        uint64_t v24 = *((unsigned __int16 *)this + 220);
        if (*((__int16 *)this + 220) < 0)
        {
          __int128 v37 = *((_DWORD *)this + 111);
          if ((_DWORD)v23 != v37) {
            goto LABEL_49;
          }
          goto LABEL_42;
        }

        if ((_DWORD)v23 == v24 >> 5)
        {
LABEL_42:
          BOOL v22 = 0;
          __int128 v35 = *((_DWORD *)this + 104);
          *((_DWORD *)this + 100) = v35;
          *((_DWORD *)this + 103) = v35;
LABEL_43:
          *((_DWORD *)this + 102) = v22;
          continue;
        }

        __int128 v37 = v24 >> 5;
LABEL_49:
        unsigned int *v6 = v23 + 1;
        if (v37 <= v23)
        {
          LODWORD(v19) = 0xFFFF;
        }

        else
        {
          if ((v24 & 2) != 0) {
            uint64_t v38 = (char *)this + 442;
          }
          else {
            uint64_t v38 = (char *)*((void *)this + 57);
          }
          LODWORD(v19) = *(unsigned __int16 *)&v38[2 * v23];
        }

        *a2 = v19;
        return *(unsigned int *)(*(void *)(*((void *)this + 1) + 16LL)
                               + 4
                               * ((v19 & 0x1F)
                                + 4
                                * *(unsigned __int16 *)(**((void **)this + 1) + 2LL * ((int)v19 >> 5))));
      default:
        goto LABEL_42;
    }
  }

uint64_t sub_1807CE758()
{
  if (qword_18C4489A0)
  {
    v0 = sub_1807E7D5C((uint64_t *)qword_18C4489A0);
    icu::UMemory::operator delete(v0);
  }

  qword_18C4489A0 = 0LL;
  atomic_store(0, (unsigned int *)&unk_18C4489B0);
  if (qword_18C534CE8)
  {
    uint64_t v1 = sub_1807E7D5C((uint64_t *)qword_18C534CE8);
    icu::UMemory::operator delete(v1);
  }

  qword_18C534CE8 = 0LL;
  atomic_store(0, (unsigned int *)&unk_18C534CF8);
  if (qword_18C534CF0)
  {
    uint64_t v2 = sub_1807E7D5C((uint64_t *)qword_18C534CF0);
    icu::UMemory::operator delete(v2);
  }

  qword_18C534CF0 = 0LL;
  atomic_store(0, (unsigned int *)&unk_18C534D00);
  uhash_close((_BYTE *)qword_18C4489A8);
  qword_18C4489A8 = 0LL;
  return 1LL;
}

void sub_1807CE7F0(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v1 = sub_1807E7D5C(a1);
    icu::UMemory::operator delete(v1);
  }

uint64_t icu::Normalizer2Factory::getInstance(int a1, icu::Normalizer2Factory *this)
{
  switch(a1)
  {
    case 2:
      uint64_t result = icu::Normalizer2::getNFDInstance(this, (UErrorCode *)this);
      break;
    case 3:
      sub_1807C3D28( (unsigned int *)&unk_18C4489B0,  (void (*)(uint64_t, int *))sub_1807CE234,  (uint64_t)"nfkc",  (int *)this);
      uint64_t v3 = qword_18C4489A0;
      uint64_t v4 = qword_18C4489A0 + 32;
      goto LABEL_10;
    case 4:
      uint64_t result = icu::Normalizer2::getNFCInstance(this, (UErrorCode *)this);
      break;
    case 5:
      sub_1807C3D28( (unsigned int *)&unk_18C4489B0,  (void (*)(uint64_t, int *))sub_1807CE234,  (uint64_t)"nfkc",  (int *)this);
      uint64_t v3 = qword_18C4489A0;
      uint64_t v4 = qword_18C4489A0 + 8;
LABEL_10:
      if (v3) {
        uint64_t result = v4;
      }
      else {
        uint64_t result = 0LL;
      }
      break;
    case 6:
      uint64_t result = icu::Normalizer2Factory::getFCDInstance(this, (UErrorCode *)this);
      break;
    default:
      uint64_t result = icu::Normalizer2Factory::getNoopInstance(this, (UErrorCode *)this);
      break;
  }

  return result;
}

uint64_t icu::Normalizer2Factory::getNFKCImpl(icu::Normalizer2Factory *this, UErrorCode *a2)
{
  if (*(int *)this <= 0
    && (sub_1807C3D28( (unsigned int *)&unk_18C4489B0,  (void (*)(uint64_t, int *))sub_1807CE234,  (uint64_t)"nfkc",  (int *)this),  qword_18C4489A0))
  {
    return *(void *)qword_18C4489A0;
  }

  else
  {
    return 0LL;
  }

uint64_t icu::Normalizer2Factory::getNFKC_CFImpl(icu::Normalizer2Factory *this, UErrorCode *a2)
{
  if (*(int *)this <= 0
    && (sub_1807C3D28( (unsigned int *)&unk_18C534CF8,  (void (*)(uint64_t, int *))sub_1807CE234,  (uint64_t)"nfkc_cf",  (int *)this),  qword_18C534CE8))
  {
    return *(void *)qword_18C534CE8;
  }

  else
  {
    return 0LL;
  }

uint64_t unorm2_getNFKCInstance(int *a1)
{
  if (*a1 <= 0)
  {
    sub_1807C3D28( (unsigned int *)&unk_18C4489B0,  (void (*)(uint64_t, int *))sub_1807CE234,  (uint64_t)"nfkc",  a1);
    uint64_t v1 = qword_18C4489A0;
  }

  else
  {
    uint64_t v1 = 0LL;
  }

  if (v1) {
    return v1 + 8;
  }
  else {
    return 0LL;
  }
}

uint64_t unorm2_getNFKDInstance(int *a1)
{
  if (*a1 <= 0)
  {
    sub_1807C3D28( (unsigned int *)&unk_18C4489B0,  (void (*)(uint64_t, int *))sub_1807CE234,  (uint64_t)"nfkc",  a1);
    uint64_t v1 = qword_18C4489A0;
  }

  else
  {
    uint64_t v1 = 0LL;
  }

  if (v1) {
    return v1 + 32;
  }
  else {
    return 0LL;
  }
}

uint64_t unorm2_getNFKCCasefoldInstance(int *a1)
{
  if (*a1 <= 0)
  {
    sub_1807C3D28( (unsigned int *)&unk_18C534CF8,  (void (*)(uint64_t, int *))sub_1807CE234,  (uint64_t)"nfkc_cf",  a1);
    uint64_t v1 = qword_18C534CE8;
  }

  else
  {
    uint64_t v1 = 0LL;
  }

  if (v1) {
    return v1 + 8;
  }
  else {
    return 0LL;
  }
}

uint64_t unorm2_getNFKCSimpleCasefoldInstance(int *a1)
{
  if (*a1 <= 0)
  {
    sub_1807C3D28( (unsigned int *)&unk_18C534D00,  (void (*)(uint64_t, int *))sub_1807CE234,  (uint64_t)"nfkc_scf",  a1);
    uint64_t v1 = qword_18C534CF0;
  }

  else
  {
    uint64_t v1 = 0LL;
  }

  if (v1) {
    return v1 + 8;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1807CEAF0(uint64_t a1, int a2)
{
  uint64_t v8 = v2;
  uint64_t v9 = v3;
  int v7 = 0;
  uint64_t Instance = icu::Normalizer2Factory::getInstance(a2, (icu::Normalizer2Factory *)&v7);
  if (v7 <= 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)Instance + 168LL))(Instance, a1);
  }
  else {
    return 2LL;
  }
}

uint64_t **sub_1807CEB60(uint64_t **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = sub_1807E7D5C(v2);
    icu::UMemory::operator delete(v3);
  }

  return a1;
}

void *icu::LocaleBuilder::LocaleBuilder(void *this)
{
  this[1] = 0LL;
  this[2] = 0LL;
  *this = off_18970BB20;
  *(void *)((char *)this + 22) = 0LL;
  this[4] = 0LL;
  this[5] = 0LL;
  return this;
}

{
  this[1] = 0LL;
  this[2] = 0LL;
  *this = off_18970BB20;
  *(void *)((char *)this + 22) = 0LL;
  this[4] = 0LL;
  this[5] = 0LL;
  return this;
}

void icu::LocaleBuilder::~LocaleBuilder(icu::LocaleBuilder *this)
{
  *(void *)this = off_18970BB20;
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 12)) {
      uprv_free(*(void **)v2);
    }
    icu::UMemory::operator delete((void *)v2);
  }

  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  icu::UObject::~UObject(this);
}

{
  void *v1;
  icu::LocaleBuilder::~LocaleBuilder(this);
  icu::UMemory::operator delete(v1);
}

icu::LocaleBuilder *icu::LocaleBuilder::setLocale(icu::LocaleBuilder *this, const icu::Locale *a2)
{
  uint64_t v5 = icu::Locale::clone(a2, v4);
  *((void *)this + 5) = v5;
  if (!v5) {
    *((_DWORD *)this + 2) = 7;
  }
  return this;
}

icu::LocaleBuilder *icu::LocaleBuilder::clear(icu::LocaleBuilder *this)
{
  *((_DWORD *)this + 2) = 0;
  *((_BYTE *)this + 12) = 0;
  *((_BYTE *)this + 21) = 0;
  *((_BYTE *)this + 26) = 0;
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 12)) {
      uprv_free(*(void **)v2);
    }
    icu::UMemory::operator delete((void *)v2);
  }

  *((void *)this + 4) = 0LL;
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  *((void *)this + 5) = 0LL;
  return this;
}

uint64_t icu::LocaleBuilder::setLanguage(uint64_t a1, void *a2, signed int a3)
{
  if (*(int *)(a1 + 8) <= 0)
  {
    uint64_t v6 = (_BYTE *)(a1 + 12);
    if (a3)
    {
      if (sub_180850E44((char *)a2, a3))
      {
        memcpy((void *)(a1 + 12), a2, a3);
        v6[a3] = 0;
      }

      else
      {
        *(_DWORD *)(a1 + 8) = 1;
      }
    }

    else
    {
      _BYTE *v6 = 0;
    }
  }

  return a1;
}

uint64_t icu::LocaleBuilder::setScript(uint64_t a1, void *a2, int a3)
{
  if (*(int *)(a1 + 8) <= 0)
  {
    uint64_t v6 = (_BYTE *)(a1 + 21);
    if (a3)
    {
      if (sub_180850EA0((char *)a2, a3))
      {
        memcpy((void *)(a1 + 21), a2, a3);
        v6[a3] = 0;
      }

      else
      {
        *(_DWORD *)(a1 + 8) = 1;
      }
    }

    else
    {
      _BYTE *v6 = 0;
    }
  }

  return a1;
}

uint64_t icu::LocaleBuilder::setRegion(uint64_t a1, void *a2, int a3)
{
  if (*(int *)(a1 + 8) <= 0)
  {
    uint64_t v6 = (_BYTE *)(a1 + 26);
    if (a3)
    {
      if (sub_180850EFC((char *)a2, a3))
      {
        memcpy((void *)(a1 + 26), a2, a3);
        v6[a3] = 0;
      }

      else
      {
        *(_DWORD *)(a1 + 8) = 1;
      }
    }

    else
    {
      _BYTE *v6 = 0;
    }
  }

  return a1;
}

uint64_t icu::LocaleBuilder::setVariant(uint64_t a1, const char *a2, int a3)
{
  unint64_t v4 = (UErrorCode *)(a1 + 8);
  if (a3)
  {
    uint64_t v8 = icu::UMemory::operator new((icu::UMemory *)0x40, (unint64_t)a2);
    if (v8)
    {
      uint64_t v9 = v8;
      *(void *)uint64_t v8 = v8 + 13;
      *(_DWORD *)(v8 + 8) = 40;
      *(_WORD *)(v8 + 12) = 0;
      *(_DWORD *)(v8 + 56) = 0;
      icu::CharString::append((icu::CharString *)v8, a2, a3, v4);
      uint64_t v10 = *(char **)v9;
      int v11 = *(_DWORD *)(v9 + 56);
      if (v11 >= 1)
      {
        do
        {
          int v12 = *v10;
          if (v12 == 95) {
            char v13 = 45;
          }
          else {
            char v13 = uprv_asciitolower((char)v12);
          }
          *v10++ = v13;
          --v11;
        }

        while (v11);
        uint64_t v10 = *(char **)v9;
        int v11 = *(_DWORD *)(v9 + 56);
      }

      if (sub_180850F84(v10, v11))
      {
        uint64_t v14 = *(void *)(a1 + 32);
        if (v14)
        {
          if (*(_BYTE *)(v14 + 12)) {
            uprv_free(*(void **)v14);
          }
          icu::UMemory::operator delete((void *)v14);
        }

        *(void *)(a1 + 32) = v9;
        return a1;
      }

      if (*(_BYTE *)(v9 + 12)) {
        uprv_free(*(void **)v9);
      }
      icu::UMemory::operator delete((void *)v9);
      int v16 = 1;
    }

    else
    {
      int v16 = 7;
    }

    *unint64_t v4 = v16;
    return a1;
  }

  uint64_t v15 = *(void *)(a1 + 32);
  if (v15)
  {
    if (*(_BYTE *)(v15 + 12)) {
      uprv_free(*(void **)v15);
    }
    icu::UMemory::operator delete((void *)v15);
  }

  *(void *)(a1 + 32) = 0LL;
  return a1;
}

int *icu::LocaleBuilder::setLanguageTag(int *a1, char *a2, int a3)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  memset(v5, 0, sizeof(v5));
  icu::Locale::forLanguageTag(a2, a3, a1 + 2, (uint64_t)v5);
  if (a1[2] <= 0) {
    icu::LocaleBuilder::setLocale((icu::LocaleBuilder *)a1, (const icu::Locale *)v5);
  }
  icu::Locale::~Locale((icu::Locale *)v5);
  return a1;
}

uint64_t icu::LocaleBuilder::setExtension(uint64_t a1, int a2, const char *a3, int a4)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  char v28 = a2;
  uint64_t v5 = (UErrorCode *)(a1 + 8);
  if (!uprv_isASCIILetter(a2) && (a2 - 48) >= 0xAu)
  {
    UErrorCode *v5 = U_ILLEGAL_ARGUMENT_ERROR;
    return a1;
  }

  memset(&__s[1], 0, 48);
  uint64_t v32 = 0LL;
  __s[0] = (char *)&__s[1] + 5;
  LODWORD(__s[1]) = 40;
  uint64_t v9 = (uint64_t)icu::CharString::append((icu::CharString *)__s, a3, a4, v5);
  if (*(int *)v5 <= 0)
  {
    int v11 = v32;
    if ((int)v32 >= 1)
    {
      int v12 = __s[0];
      do
      {
        int v13 = *v12;
        if (v13 == 95) {
          uint64_t v9 = 45LL;
        }
        else {
          uint64_t v9 = uprv_asciitolower((char)v13);
        }
        *v12++ = v9;
        --v11;
      }

      while (v11);
      int v11 = v32;
    }

    if (v11 && (uint64_t v9 = sub_1807CF38C(a2, __s[0], v11), (v9 & 1) == 0))
    {
      int v24 = 1;
    }

    else
    {
      if (*(void *)(a1 + 40)
        || (Root = (icu::Locale *)icu::Locale::getRoot((icu::Locale *)v9),
            int v16 = icu::Locale::clone(Root, v15),
            (*(void *)(a1 + 40) = v16) != 0LL))
      {
        int v17 = uprv_asciitolower(a2);
        unsigned int v18 = *(const char ***)(a1 + 40);
        if (v17 != 117)
        {
          icu::StringPiece::StringPiece((icu::StringPiece *)&v26, __s[0]);
          icu::Locale::setKeywordValue(v18, &v28, 1, v26, v27, v5);
          goto LABEL_6;
        }

        icu::Locale::setKeywordValue(*(const char ***)(a1 + 40), "attribute", "", v5);
        UnicodeKeywords = icu::Locale::createUnicodeKeywords((icu::Locale *)v18, v5);
        BOOL v20 = UnicodeKeywords;
        UErrorCode v21 = *v5;
        if (*(int *)v5 <= 0 && UnicodeKeywords)
        {
          uint64_t v22 = (*(uint64_t (**)(char *, void, UErrorCode *))(*(void *)UnicodeKeywords + 40LL))( UnicodeKeywords,  0LL,  v5);
          if (v22)
          {
            int v23 = (const char *)v22;
            do
            {
              icu::StringPiece::StringPiece((icu::StringPiece *)&v29, v23);
              icu::Locale::setUnicodeKeywordValue(v18, v29, v30, 0LL, 0, v5);
              int v23 = (const char *)(*(uint64_t (**)(char *, void, UErrorCode *))(*(void *)v20 + 40LL))( v20,  0LL,  v5);
            }

            while (v23);
          }
        }

        else if (!UnicodeKeywords)
        {
          goto LABEL_31;
        }

        (*(void (**)(char *))(*(void *)v20 + 8LL))(v20);
        UErrorCode v21 = *v5;
LABEL_31:
        if (v21 <= U_ZERO_ERROR && a4 != 0LL) {
          sub_1807CF40C(*(const char ***)(a1 + 40), (uint64_t)__s, v5);
        }
        goto LABEL_6;
      }

      int v24 = 7;
    }

    UErrorCode *v5 = v24;
  }

LABEL_6:
  if (BYTE4(__s[1])) {
    uprv_free(__s[0]);
  }
  return a1;
}

  sub_1807D5E5C(a1 + 240, "Languages", 0LL, a2, a3);
  if ((*(_WORD *)(a3 + 8) & 1) != 0)
  {
    if (!strchr(a2, 95))
    {
      uint64_t v25 = 0u;
      uint64_t v26 = 0u;
      int v23 = 0u;
      int v24 = 0u;
      UErrorCode v21 = 0u;
      uint64_t v22 = 0u;
      int v19 = 0u;
      BOOL v20 = 0u;
      int v17 = 0u;
      unsigned int v18 = 0u;
      unint64_t v15 = 0u;
      int v16 = 0u;
      memset(v14, 0, sizeof(v14));
      icu::Locale::createCanonical((icu::Locale *)a2, (icu::Locale *)v14);
      int v11 = (char *)*((void *)&v15 + 1);
      if (*(_DWORD *)(a1 + 1256) == 513)
      {
        sub_1807D5E5C(a1 + 240, "Languages%short", 0LL, *((char **)&v15 + 1), a3);
        if ((*(_WORD *)(a3 + 8) & 1) == 0)
        {
          icu::Locale::~Locale((icu::Locale *)v14);
          return a3;
        }
      }

      sub_1807D5E5C(a1 + 240, "Languages", 0LL, v11, a3);
      icu::Locale::~Locale((icu::Locale *)v14);
      if ((*(_WORD *)(a3 + 8) & 1) == 0) {
        return a3;
      }
    }

    if (a4)
    {
      icu::UnicodeString::UnicodeString(v14, a2, 0xFFFFFFFFLL, 0LL);
      icu::UnicodeString::copyFrom((UChar **)a3, (UChar **)v14, 0);
      icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v14);
    }
  }

  return a3;
}

  PropertyValueEnum = u_getPropertyValueEnum(UCHAR_SCRIPT, alias);
  return uscript_isRightToLeft(PropertyValueEnum);
}

    icu::MessagePattern::setParseError((char *)this, a5, 0);
    uint64_t result = 0LL;
    unsigned int v18 = U_UNMATCHED_BRACES;
LABEL_70:
    *a6 = v18;
  }

  return result;
}

    int v13 = v22[0];
    uint64_t v10 = v22[1];
    *(_DWORD *)(a1 + 668) = v22[1];
    *(_DWORD *)(a1 + 672) = v13;
LABEL_7:
    uint64_t v14 = *(void *)(*(void *)(a1 + 632) + 32LL);
    unint64_t v15 = (int *)(v14 + 4LL * v13);
    int v16 = *v15;
    int v17 = v15[v16];
    if (v17 == -1)
    {
      uint64_t v6 = v11;
    }

    else
    {
      uint64_t v6 = v11 + 16;
      *(void *)int v11 = v12;
      *((void *)v11 + 1) = v10 - v12;
      if (a4)
      {
        if ((int)v16 >= 2)
        {
          unsigned int v18 = (int *)(v14 + 4 * v16 + 4LL * v13 - 4);
          int v19 = v16 + 1;
          do
          {
            BOOL v20 = *v18--;
            v17 |= v20;
            --v19;
          }

          while (v19 > 2);
        }

        *a4++ = v17;
      }
    }

    int v11 = v6;
    if (v6 >= v9) {
      return (unint64_t)(v6 - a3) >> 4;
    }
  }

  uint64_t v6 = v11;
  return (unint64_t)(v6 - a3) >> 4;
}

  if (!*(_DWORD *)(v9 + 104)) {
    *(_BYTE *)(v9 + 112) = 1;
  }
  uint64_t v5 = v45;
LABEL_20:
  int v19 = v7 - (void)v5;
  while (2)
  {
    if ((unint64_t)v8 >= a1[5])
    {
      int v23 = 15;
      goto LABEL_31;
    }

    BOOL v20 = *v5;
    UErrorCode v21 = *v5;
    switch(*v5)
    {
      case 0xAu:
      case 0xDu:
        int32_t v45 = v5 + 1;
        unint64_t v15 = *v10;
        if (*v10 && v15 != 3)
        {
          LOBYTE(v15) = 0;
          *uint64_t v10 = 0;
        }

        *(_BYTE *)(v9 + 94) = 0;
        *(_BYTE *)(v9 + 96) = 0;
        *(_BYTE *)(v9 + 112) = 0;
        goto LABEL_46;
      case 0xBu:
      case 0xCu:
        goto LABEL_40;
      case 0xEu:
        if (*(_DWORD *)(v9 + 108) != 3)
        {
          int32_t v45 = ++v5;
          *(_BYTE *)(v9 + 112) = 0;
          LODWORD(v20) = 14;
          goto LABEL_52;
        }

        *(_BYTE *)(v9 + 93) = 8;
        uint64_t v22 = 1;
        goto LABEL_28;
      case 0xFu:
        if (*(_DWORD *)(v9 + 108) == 3)
        {
          uint64_t v22 = 0;
LABEL_28:
          *(_BYTE *)(v9 + 96) = v22;
          ++v5;
          if (!--v19)
          {
            uint64_t v5 = (unsigned __int8 *)v7;
            goto LABEL_32;
          }

          continue;
        }

        int32_t v45 = ++v5;
        *(_BYTE *)(v9 + 112) = 0;
        LODWORD(v20) = 15;
LABEL_52:
        uint64_t result = 0xFFFFLL;
LABEL_91:
        if (result <= 0xFFFD)
        {
          __int128 v35 = a1[6];
          if (v35)
          {
            else {
              __int128 v36 = -1;
            }
            *(_DWORD *)(v35 + 2LL * ((void)v8 - a1[4])) = v36 + (_DWORD)v5 - *((_DWORD *)a1 + 4);
          }

          *v8++ = result;
          goto LABEL_20;
        }

        if (result >= 0x10000)
        {
          *uint64_t v8 = ((result + 67043328) >> 10) - 10240;
          __int128 v37 = a1[6];
          if (v37)
          {
            else {
              uint64_t v38 = -1;
            }
            uint64_t v39 = v38 + (_DWORD)v5 - *((_DWORD *)a1 + 4);
            int v40 = a1[4];
            uint64_t v41 = a1[5];
            *(_DWORD *)(v37 + 2 * ((void)v8 - v40)) = v39;
            unsigned int v42 = v8 + 1;
            if ((unint64_t)(v8 + 1) < v41)
            {
              *unsigned int v42 = result & 0x3FF | 0xDC00;
              *(_DWORD *)(v37 + 2 * ((void)v42 - v40)) = v39;
LABEL_107:
              v8 += 2;
              goto LABEL_20;
            }
          }

          else
          {
            unsigned int v42 = v8 + 1;
            if ((unint64_t)(v8 + 1) < a1[5])
            {
              *unsigned int v42 = result & 0x3FF | 0xDC00;
              goto LABEL_107;
            }
          }

          int v17 = a1[1];
          unsigned int v18 = *(char *)(v17 + 93);
          *(_BYTE *)(v17 + 93) = v18 + 1;
          *(_WORD *)(v17 + 2 * v18 + 144) = result & 0x3FF | 0xDC00;
          uint64_t v8 = v42;
          goto LABEL_20;
        }

        int v43 = (_BYTE *)a1[1];
        if (v20 < 0x100)
        {
          int v44 = 1;
        }

        else
        {
          v43[66] = v20;
          LODWORD(v20) = v20 >> 8;
          int v44 = 2;
        }

        v43[65] = v20;
        v43[64] = v44;
        if ((_DWORD)result == 65534) {
          int v23 = 10;
        }
        else {
          int v23 = 12;
        }
LABEL_31:
        *a2 = v23;
LABEL_32:
        a1[4] = v8;
        a1[2] = v5;
        return result;
      default:
        if ((_DWORD)v20 != 27)
        {
LABEL_40:
          int32_t v45 = v5 + 1;
          *(_BYTE *)(v9 + 112) = 0;
          int v24 = *(char *)(v9 + 96);
          LOBYTE(v15) = v10[v24];
          if (((char)v20 + 95) <= 0x3E && *(_DWORD *)(v9 + 108) == 4 && (v15 & 0xFC) != 4)
          {
            uint64_t result = (v20 + 65216);
            ++v5;
            goto LABEL_91;
          }

      if ((unint64_t)v3 >= v4)
      {
        *a2 = 15;
        goto LABEL_75;
      }

      int v12 = *v6++;
      uint64_t v10 = v12;
    }

    while ((v12 & 0xF800) != 0xD800);
    if ((v10 & 0x400) != 0) {
      goto LABEL_72;
    }
  }

  *(_DWORD *)(v5 + 84) = v10;
LABEL_75:
  *(_DWORD *)(v8 + 160) = v9;
  v2[2] = v6;
  v2[4] = v3;
  return result;
}

    uint64_t v10 = 0;
    LODWORD(v9) = 0;
  }

  uint64_t v9 = v9;
  while ((unint64_t)v5 < v3)
  {
    int v12 = *v5++;
    uint64_t v10 = v12 | (v10 << 8);
    *(_BYTE *)(v7 + v9++) = v12;
    if (v9 == 4) {
      goto LABEL_14;
    }
  }

  int v16 = v10 + 1;
  int v17 = result[1];
  *(_DWORD *)(v17 + 72) = v16;
  *(_BYTE *)(v17 + 64) = v9;
LABEL_23:
  result[4] = v2;
  result[2] = v5;
  return result;
}

    uint64_t v10 = 0;
    LODWORD(v9) = 0;
  }

  int v12 = 8 * v9;
  uint64_t v9 = v9;
  while ((unint64_t)v5 < v3)
  {
    int v13 = *v5++;
    v10 |= v13 << v12;
    *(_BYTE *)(v7 + v9) = v13;
    v12 += 8;
    if (++v9 == 4) {
      goto LABEL_14;
    }
  }

  int v17 = v10 + 1;
  unsigned int v18 = result[1];
  *(_DWORD *)(v18 + 72) = v17;
  *(_BYTE *)(v18 + 64) = v9;
LABEL_23:
  result[4] = v2;
  result[2] = v5;
  return result;
}

  if (BYTE4(v21[1])) {
    uprv_free(v21[0]);
  }
  return Name;
}

  *(void *)(v1 + 124) = 0LL;
  *(_OWORD *)(v1 + 108) = 0u;
  *(_OWORD *)(v1 + 92) = 0u;
  *(_OWORD *)(v1 + 76) = 0u;
  *(_OWORD *)(v1 + 60) = 0u;
  *(_OWORD *)(v1 + 44) = 0u;
  *(_OWORD *)(v1 + 28) = 0u;
  unint64_t v4 = 132LL;
  *(_OWORD *)(v1 + 12) = 0u;
  do
  {
    uint64_t v5 = (void *)(v1 + v4);
    UErrorCode *v5 = 0LL;
    v5[1] = 0LL;
    v4 += 16LL;
  }

  while (v4 != 228);
  *(_DWORD *)(v1 + 8) = 0;
  if (v3 >= 1) {
    return icu::Calendar::set((_BYTE *)v1, 0, v3);
  }
  return this;
}

    if (v13 == (_DWORD)a4) {
      return 1LL;
    }
    goto LABEL_11;
  }

  return result;
}

  umtx_unlock((std::mutex **)&unk_18C4499B0);
  int v13 = off_18972C1F8;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
  }
  return v10;
}

BOOL sub_1807CF38C(int a1, char *a2, int a3)
{
  int v5 = uprv_asciitolower(a1);
  switch(v5)
  {
    case 't':
      int v6 = sub_18085149C(a2, a3);
      break;
    case 'x':
      int v6 = sub_1808511A4(a2, a3);
      break;
    case 'u':
      int v6 = sub_1808516A8(a2, a3);
      break;
    default:
      int v6 = sub_1808510F0(a2, a3);
      break;
  }

  return v6 != 0;
}

void sub_1807CF40C(const char **a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  uint64_t v12 = 0LL;
  memset(&v11[1], 0, 48);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v8, "und-u-");
  v11[0] = (char *)&v11[1] + 5;
  LODWORD(v11[1]) = 40;
  WORD2(v11[1]) = 0;
  LODWORD(icu::LocaleBuilder::setScript((uint64_t)this, v11, v12) = 0;
  icu::CharString::append((icu::CharString *)v11, v8, v9, a3);
  icu::CharString::append((icu::CharString *)v11, *(const char **)a2, *(_DWORD *)(a2 + 56), a3);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v6, (const char *)v11[0]);
  icu::Locale::forLanguageTag(v6, v7, (int *)a3, (uint64_t)v10);
  sub_1807CFD98(v10, 0LL, a1, 0, a3);
  icu::Locale::~Locale((icu::Locale *)v10);
  if (BYTE4(v11[1])) {
    uprv_free(v11[0]);
  }
}

uint64_t icu::LocaleBuilder::setUnicodeLocaleKeyword(uint64_t a1, char *a2, int a3, char *a4, int a5)
{
  int v6 = (UErrorCode *)(a1 + 8);
  if (*(int *)(a1 + 8) <= 0)
  {
    if (sub_18085136C(a2, a3) && (!a5 || sub_1808512B8(a4, a5)))
    {
      int v11 = *(const char ***)(a1 + 40);
      if (v11
        || (Root = (icu::Locale *)icu::Locale::getRoot(0LL),
            int v11 = (const char **)icu::Locale::clone(Root, v13),
            (*(void *)(a1 + 40) = v11) != 0LL))
      {
        icu::Locale::setUnicodeKeywordValue(v11, a2, a3, a4, a5, v6);
        return a1;
      }

      int v14 = 7;
    }

    else
    {
      int v14 = 1;
    }

    UErrorCode *v6 = v14;
  }

  return a1;
}

uint64_t icu::LocaleBuilder::addUnicodeLocaleAttribute(uint64_t a1, const char *a2, int a3)
{
  uint64_t v47 = *MEMORY[0x1895F89C0];
  memset(&v45[1], 0, 48);
  uint64_t v46 = 0LL;
  unint64_t v4 = (UErrorCode *)(a1 + 8);
  v45[0] = (char *)&v45[1] + 5;
  LODWORD(v45[1]) = 40;
  icu::CharString::append((icu::CharString *)v45, a2, a3, (UErrorCode *)(a1 + 8));
  int v5 = (char *)v45[0];
  int v6 = v46;
  if ((int)v46 >= 1)
  {
    do
    {
      int v7 = *v5;
      if (v7 == 95) {
        char v8 = 45;
      }
      else {
        char v8 = uprv_asciitolower((char)v7);
      }
      *v5++ = v8;
      --v6;
    }

    while (v6);
    int v5 = (char *)v45[0];
    int v6 = v46;
  }

  BOOL v9 = sub_180851258(v5, v6);
  if (!v9)
  {
    int v13 = 1;
    goto LABEL_13;
  }

  if (!*(void *)(a1 + 40))
  {
    Root = (icu::Locale *)icu::Locale::getRoot((icu::Locale *)v9);
    int v16 = (const char **)icu::Locale::clone(Root, v15);
    *(void *)(a1 + 40) = v16;
    if (v16)
    {
      icu::Locale::setKeywordValue(v16, "attribute", (char *)v45[0], v4);
      goto LABEL_45;
    }

    int v13 = 7;
LABEL_13:
    *unint64_t v4 = v13;
    goto LABEL_45;
  }

  memset(&__s1[1], 0, 48);
  __s1[0] = (char *)&__s1[1] + 5;
  LODWORD(__s1[1]) = 40;
  uint64_t v44 = 0LL;
  v37[0] = 0LL;
  v37[1] = 0LL;
  icu::CharStringByteSink::CharStringByteSink(v37, (uint64_t)__s1);
  int v36 = 0;
  uint64_t v10 = *(void *)(a1 + 40);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v34, "attribute");
  icu::Locale::getKeywordValue(v10, v34, v35, (uint64_t)v37, (UErrorCode *)&v36);
  if (v36 >= 1)
  {
    uint64_t v42 = 0LL;
    __int128 v41 = 0u;
    __int128 v40 = 0u;
    __int128 v39 = 0u;
    icu::StringPiece::StringPiece((icu::StringPiece *)&v32, (const char *)v45[0]);
    int v11 = v32;
    int v12 = v33;
    uint64_t v38 = (char *)&v39 + 5;
    LODWORD(v39) = 40;
    WORD2(v39) = 0;
    LODWORD(v42) = 0;
LABEL_39:
    icu::CharString::append((icu::CharString *)&v38, v11, v12, v4);
    goto LABEL_40;
  }

  int v17 = __s1[0];
  int v18 = v44;
  if ((int)v44 >= 1)
  {
    do
    {
      int v19 = *v17;
      if (v19 == 95) {
        char v20 = 45;
      }
      else {
        char v20 = uprv_asciitolower((char)v19);
      }
      *v17++ = v20;
      --v18;
    }

    while (v18);
    int v17 = __s1[0];
    int v18 = v44;
  }

  __int128 v39 = 0u;
  __int128 v41 = 0u;
  __int128 v40 = 0u;
  uint64_t v38 = (char *)&v39 + 5;
  LODWORD(v39) = 40;
  uint64_t v42 = 0LL;
  if (v18 < 1)
  {
LABEL_38:
    icu::StringPiece::StringPiece((icu::StringPiece *)&v26, (const char *)v45[0]);
    int v11 = v26;
    int v12 = v27;
    goto LABEL_39;
  }

  char v21 = 0;
  uint64_t v22 = &v17[v18];
  do
  {
    if ((v21 & 1) != 0) {
      goto LABEL_30;
    }
    int v23 = (const char *)v45[0];
    int v24 = strcmp(v17, (const char *)v45[0]);
    if (!v24) {
      goto LABEL_41;
    }
    if (v24 >= 1)
    {
      if ((_DWORD)v42)
      {
        icu::CharString::append((icu::CharString *)&v38, 95, v4);
        int v23 = (const char *)v45[0];
      }

      icu::StringPiece::StringPiece((icu::StringPiece *)&v30, v23);
      icu::CharString::append((icu::CharString *)&v38, v30, v31, v4);
LABEL_30:
      char v21 = 1;
      goto LABEL_32;
    }

    char v21 = 0;
LABEL_32:
    if ((_DWORD)v42) {
      icu::CharString::append((icu::CharString *)&v38, 95, v4);
    }
    icu::StringPiece::StringPiece((icu::StringPiece *)&v28, v17);
    icu::CharString::append((icu::CharString *)&v38, v28, v29, v4);
    v17 += strlen(v17) + 1;
  }

  while (v17 < v22);
  if ((v21 & 1) == 0)
  {
    if ((_DWORD)v42) {
      icu::CharString::append((icu::CharString *)&v38, 95, v4);
    }
    goto LABEL_38;
  }

uint64_t icu::LocaleBuilder::removeUnicodeLocaleAttribute(uint64_t a1, const char *a2, int a3)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  memset(&v28[1], 0, 48);
  uint64_t v29 = 0LL;
  unint64_t v4 = (UErrorCode *)(a1 + 8);
  v28[0] = (char *)&v28[1] + 5;
  LODWORD(v28[1]) = 40;
  icu::CharString::append((icu::CharString *)v28, a2, a3, (UErrorCode *)(a1 + 8));
  if (*(int *)(a1 + 8) <= 0)
  {
    int v6 = (char *)v28[0];
    int v7 = v29;
    if ((int)v29 >= 1)
    {
      do
      {
        int v8 = *v6;
        if (v8 == 95) {
          char v9 = 45;
        }
        else {
          char v9 = uprv_asciitolower((char)v8);
        }
        *v6++ = v9;
        --v7;
      }

      while (v7);
      int v6 = (char *)v28[0];
      int v7 = v29;
    }

    if (sub_180851258(v6, v7))
    {
      if (*(void *)(a1 + 40))
      {
        int v23 = 0;
        memset(&__s1[1], 0, 48);
        __s1[0] = (char *)&__s1[1] + 5;
        LODWORD(__s1[1]) = 40;
        uint64_t v27 = 0LL;
        v22[0] = 0LL;
        v22[1] = 0LL;
        icu::CharStringByteSink::CharStringByteSink(v22, (uint64_t)__s1);
        uint64_t v10 = *(void *)(a1 + 40);
        icu::StringPiece::StringPiece((icu::StringPiece *)&v20, "attribute");
        icu::Locale::getKeywordValue(v10, v20, v21, (uint64_t)v22, (UErrorCode *)&v23);
        if (v23 <= 0)
        {
          int v11 = v27;
          if ((_DWORD)v27)
          {
            int v12 = __s1[0];
            if ((int)v27 >= 1)
            {
              uint64_t v13 = 0LL;
              do
              {
                char v14 = 0;
                int v15 = v12[v13];
                if (v15 != 45 && v15 != 95) {
                  char v14 = uprv_asciitolower((char)v15);
                }
                v12[v13] = v14;
                int v11 = v27;
                ++v13;
              }

              while ((int)v13 < (int)v27);
              int v12 = __s1[0];
            }

            memset(&v24[1], 0, 48);
            uint64_t v25 = 0LL;
            v24[0] = (char *)&v24[1] + 5;
            LODWORD(v24[1]) = 40;
            if (v11 >= 1)
            {
              char v16 = 0;
              int v17 = &v12[v11];
              do
              {
                while (!strcmp(v12, (const char *)v28[0]))
                {
                  v12 += strlen(v12) + 1;
                  char v16 = 1;
                  if (v12 >= v17) {
                    goto LABEL_33;
                  }
                }

                if ((_DWORD)v25) {
                  icu::CharString::append((icu::CharString *)v24, 95, v4);
                }
                icu::StringPiece::StringPiece((icu::StringPiece *)&v18, v12);
                icu::CharString::append((icu::CharString *)v24, v18, v19, v4);
                v12 += strlen(v12) + 1;
              }

              while (v12 < v17);
              if ((v16 & 1) == 0) {
                goto LABEL_34;
              }
LABEL_33:
              icu::Locale::setKeywordValue(*(const char ***)(a1 + 40), "attribute", v24[0], v4);
LABEL_34:
              if (BYTE4(v24[1])) {
                uprv_free(v24[0]);
              }
            }
          }
        }

        icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v22);
        if (BYTE4(__s1[1])) {
          uprv_free(__s1[0]);
        }
      }
    }

    else
    {
      *unint64_t v4 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }

  if (BYTE4(v28[1])) {
    uprv_free(v28[0]);
  }
  return a1;
}

icu::LocaleBuilder *icu::LocaleBuilder::clearExtensions(icu::LocaleBuilder *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *((void *)this + 5) = 0LL;
  return this;
}

char *icu::LocaleBuilder::copyExtensionsFrom(char *this, const icu::Locale *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    int v5 = this;
    this = icu::Locale::createKeywords(a2, a3);
    int v6 = this;
    if (*(int *)a3 <= 0 && this != 0LL)
    {
      int v8 = (icu::Locale *)(*(uint64_t (**)(char *, UErrorCode *))(*(void *)this + 32LL))(this, a3);
      if ((_DWORD)v8)
      {
        char v9 = (const char **)*((void *)v5 + 5);
        if (v9
          || (Root = (icu::Locale *)icu::Locale::getRoot(v8),
              char v9 = (const char **)icu::Locale::clone(Root, v11),
              (*((void *)v5 + 5) = v9) != 0LL))
        {
          sub_1807CFD98((char *)a2, v6, v9, 0, a3);
        }

        else
        {
          *((_DWORD *)v5 + 2) = 7;
        }
      }

      return (char *)(*(uint64_t (**)(char *))(*(void *)v6 + 8LL))(v6);
    }

    if (this) {
      return (char *)(*(uint64_t (**)(char *))(*(void *)v6 + 8LL))(v6);
    }
  }

  return this;
}

char *sub_1807CFD98(char *this, char *a2, const char **a3, int a4, UErrorCode *a5)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  if (*(int *)a5 <= 0)
  {
    int v8 = a2;
    uint64_t v9 = (uint64_t)this;
    if (a2)
    {
      this = 0LL;
    }

    else
    {
      this = icu::Locale::createKeywords((icu::Locale *)this, a5);
      BOOL v10 = *(int *)a5 > 0 || this == 0LL;
      int v8 = this;
      if (v10)
      {
LABEL_40:
        if (this) {
          return (char *)(*(uint64_t (**)(char *))(*(void *)this + 8LL))(this);
        }
        return this;
      }
    }

    int v24 = this;
    do
    {
      uint64_t v11 = (*(uint64_t (**)(char *, void, UErrorCode *))(*(void *)v8 + 40LL))(v8, 0LL, a5);
      if (!v11) {
        break;
      }
      int v12 = (char *)v11;
      int v30 = 0;
      memset(&v28[1], 0, 48);
      v27[1] = 0LL;
      v28[0] = (char *)&v28[1] + 5;
      LODWORD(v28[1]) = 40;
      int v29 = 0;
      v27[0] = 0LL;
      icu::CharStringByteSink::CharStringByteSink(v27, (uint64_t)v28);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v25, v12);
      icu::Locale::getKeywordValue(v9, v25, v26, (uint64_t)v27, a5);
      if (!strcmp(v12, "attribute"))
      {
        int v13 = v29;
        if (v29 >= 1)
        {
          char v14 = v28[0];
          do
          {
            int v15 = *v14;
            if (v15 == 95) {
              char v16 = 45;
            }
            else {
              char v16 = uprv_asciitolower((char)v15);
            }
            *v14++ = v16;
            --v13;
          }

          while (v13);
        }
      }

      if (a4)
      {
        int v17 = v28[0];
        int v18 = v29;
        if (v12[1])
        {
          if (!strcmp(v12, "attribute"))
          {
            if (!sub_1808512B8(v17, v18)) {
              goto LABEL_36;
            }
          }

          else
          {
            int v19 = uloc_toUnicodeLocaleKey((uint64_t)v12);
            char v20 = uloc_toUnicodeLocaleType((uint64_t)v12, v17);
            if (!v19) {
              goto LABEL_36;
            }
            uint64_t v21 = v20;
            if (!v20 || !sub_18085136C(v19, -1) || !sub_1808512B8(v21, -1)) {
              goto LABEL_36;
            }
          }
        }

        else
        {
          char v22 = uprv_asciitolower(*v12);
          if (!uprv_isASCIILetter(v22) && ((int)uprv_asciitolower(*v12) < 48 || (int)uprv_asciitolower(*v12) > 57)
            || !sub_1807CF38C(*v12, v17, v18))
          {
LABEL_36:
            *a5 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_37:
            icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v27);
            if (BYTE4(v28[1])) {
              uprv_free(v28[0]);
            }
            break;
          }
        }
      }

      icu::Locale::setKeywordValue(a3, v12, v28[0], a5);
      UErrorCode v23 = *a5;
      icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v27);
      if (BYTE4(v28[1])) {
        uprv_free(v28[0]);
      }
    }

    while (v23 < U_ILLEGAL_ARGUMENT_ERROR);
    this = v24;
    goto LABEL_40;
  }

  return this;
}

void icu::LocaleBuilder::build(icu::LocaleBuilder *this@<X0>, UErrorCode *a2@<X1>, icu::Locale *a3@<X8>)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (*(int *)a2 >= 1)
  {
    *((_OWORD *)a3 + 12) = 0u;
    *((_OWORD *)a3 + 13) = 0u;
    *((_OWORD *)a3 + 10) = 0u;
    *((_OWORD *)a3 + 11) = 0u;
    *((_OWORD *)a3 + 8) = 0u;
    *((_OWORD *)a3 + 9) = 0u;
    *((_OWORD *)a3 + 6) = 0u;
    *((_OWORD *)a3 + 7) = 0u;
    *((_OWORD *)a3 + 4) = 0u;
    *((_OWORD *)a3 + 5) = 0u;
    *((_OWORD *)a3 + 2) = 0u;
    *((_OWORD *)a3 + 3) = 0u;
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
LABEL_5:
    icu::Locale::Locale(a3);
    icu::Locale::setToBogus(a3);
    return;
  }

  UErrorCode v6 = *((_DWORD *)this + 2);
  if (v6 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    *a2 = v6;
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
    *((_OWORD *)a3 + 2) = 0u;
    *((_OWORD *)a3 + 3) = 0u;
    *((_OWORD *)a3 + 4) = 0u;
    *((_OWORD *)a3 + 5) = 0u;
    *((_OWORD *)a3 + 6) = 0u;
    *((_OWORD *)a3 + 7) = 0u;
    *((_OWORD *)a3 + 8) = 0u;
    *((_OWORD *)a3 + 9) = 0u;
    *((_OWORD *)a3 + 10) = 0u;
    *((_OWORD *)a3 + 11) = 0u;
    *((_OWORD *)a3 + 12) = 0u;
    *((_OWORD *)a3 + 13) = 0u;
    goto LABEL_5;
  }

  uint64_t v23 = 0LL;
  memset(&v22[1], 0, 48);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v19, (const char *)this + 12);
  v22[0] = (char *)&v22[1] + 5;
  LODWORD(v22[1]) = 40;
  WORD2(v22[1]) = 0;
  LODWORD(v23) = 0;
  icu::CharString::append((icu::CharString *)v22, v19, v20, a2);
  if (*((_BYTE *)this + 21))
  {
    int v7 = icu::CharString::append((icu::CharString *)v22, 45, a2);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v17, (const char *)this + 21);
    icu::CharString::append(v7, v17, v18, a2);
  }

  if (*((_BYTE *)this + 26))
  {
    int v8 = icu::CharString::append((icu::CharString *)v22, 45, a2);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v15, (const char *)this + 26);
    icu::CharString::append(v8, v15, v16, a2);
  }

  if (*((void *)this + 4))
  {
    uint64_t v9 = icu::CharString::append((icu::CharString *)v22, 45, a2);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v13, **((const char ***)this + 4));
    icu::CharString::append(v9, v13, v14, a2);
  }

  if (*(int *)a2 < 1)
  {
    memset(v21, 0, sizeof(v21));
    icu::Locale::Locale((icu::Locale *)v21, (const char *)v22[0], 0LL, 0LL, 0LL);
    uint64_t v11 = (char *)*((void *)this + 5);
    if (v11) {
      sub_1807CFD98(v11, 0LL, (const char **)v21, 1, a2);
    }
    if (*(int *)a2 < 1)
    {
      icu::Locale::Locale((uint64_t)a3, (uint64_t)v21);
    }

    else
    {
      *((_OWORD *)a3 + 12) = 0u;
      *((_OWORD *)a3 + 13) = 0u;
      *((_OWORD *)a3 + 10) = 0u;
      *((_OWORD *)a3 + 11) = 0u;
      *((_OWORD *)a3 + 8) = 0u;
      *((_OWORD *)a3 + 9) = 0u;
      *((_OWORD *)a3 + 6) = 0u;
      *((_OWORD *)a3 + 7) = 0u;
      *((_OWORD *)a3 + 4) = 0u;
      *((_OWORD *)a3 + 5) = 0u;
      *((_OWORD *)a3 + 2) = 0u;
      *((_OWORD *)a3 + 3) = 0u;
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      int v12 = (icu::Locale *)icu::Locale::Locale(a3);
      icu::Locale::setToBogus(v12);
    }

    icu::Locale::~Locale((icu::Locale *)v21);
  }

  else
  {
    *((_OWORD *)a3 + 12) = 0uLL;
    *((_OWORD *)a3 + 13) = 0uLL;
    *((_OWORD *)a3 + 10) = 0uLL;
    *((_OWORD *)a3 + 11) = 0uLL;
    *((_OWORD *)a3 + 8) = 0uLL;
    *((_OWORD *)a3 + 9) = 0uLL;
    *((_OWORD *)a3 + 6) = 0uLL;
    *((_OWORD *)a3 + 7) = 0uLL;
    *((_OWORD *)a3 + 4) = 0uLL;
    *((_OWORD *)a3 + 5) = 0uLL;
    *((_OWORD *)a3 + 2) = 0uLL;
    *((_OWORD *)a3 + 3) = 0uLL;
    *(_OWORD *)a3 = 0uLL;
    *((_OWORD *)a3 + 1) = 0uLL;
    BOOL v10 = (icu::Locale *)icu::Locale::Locale(a3);
    icu::Locale::setToBogus(v10);
  }

  if (BYTE4(v22[1])) {
    uprv_free(v22[0]);
  }
}

BOOL icu::LocaleBuilder::copyErrorTo(icu::LocaleBuilder *this, UErrorCode *a2)
{
  UErrorCode v3 = *((_DWORD *)this + 2);
  *a2 = v3;
  return v3 > U_ZERO_ERROR;
}

uint64_t icu::LocaleMatcher::Result::Result(uint64_t result, uint64_t a2)
{
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = *(void *)(a2 + 16);
  int v2 = *(unsigned __int8 *)(a2 + 24);
  *(_BYTE *)(result + 24) = v2;
  if (v2)
  {
    *(void *)a2 = 0LL;
    *(_DWORD *)(a2 + 16) = -1;
    *(_BYTE *)(a2 + 24) = 0;
  }

  return result;
}

{
  int v2;
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = *(void *)(a2 + 16);
  int v2 = *(unsigned __int8 *)(a2 + 24);
  *(_BYTE *)(result + 24) = v2;
  if (v2)
  {
    *(void *)a2 = 0LL;
    *(_DWORD *)(a2 + 16) = -1;
    *(_BYTE *)(a2 + 24) = 0;
  }

  return result;
}

void icu::LocaleMatcher::Result::~Result(icu::LocaleMatcher::Result *this)
{
  if (*((_BYTE *)this + 24))
  {
    uint64_t v2 = *(void *)this;
    if (*(void *)this) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

{
  uint64_t v2;
  if (*((_BYTE *)this + 24))
  {
    uint64_t v2 = *(void *)this;
    if (*(void *)this) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
  }

uint64_t *icu::LocaleMatcher::Result::operator=(uint64_t *a1, uint64_t a2)
{
  if (*((_BYTE *)a1 + 24))
  {
    uint64_t v4 = *a1;
    if (*a1) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
  }

  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  int v5 = *(unsigned __int8 *)(a2 + 24);
  *((_BYTE *)a1 + 24) = v5;
  if (v5)
  {
    *(void *)a2 = 0LL;
    *(_DWORD *)(a2 + 16) = -1;
    *(_BYTE *)(a2 + 24) = 0;
  }

  return a1;
}

void icu::LocaleMatcher::Result::makeResolvedLocale( icu::LocaleMatcher::Result *this@<X0>, UErrorCode *a2@<X1>, icu::Locale *a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (*(int *)a2 > 0 || (uint64_t Root = *((void *)this + 1)) == 0)
  {
    uint64_t Root = icu::Locale::getRoot(this);
LABEL_3:
    icu::Locale::Locale(a3, Root);
    return;
  }

  uint64_t v7 = *(void *)this;
  if (!*(void *)this) {
    goto LABEL_3;
  }
  if (icu::Locale::operator==(*((void *)this + 1), *(void *)this))
  {
    uint64_t Root = *((void *)this + 1);
    goto LABEL_3;
  }

  memset(v13, 0, sizeof(v13));
  icu::LocaleBuilder::LocaleBuilder(v13);
  icu::LocaleBuilder::setLocale((icu::LocaleBuilder *)v13, *((const icu::Locale **)this + 1));
  if (*(_BYTE *)(v7 + 26))
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)&v11, (const char *)(v7 + 26));
    icu::LocaleBuilder::setRegion((uint64_t)v13, v11, v12);
  }

  int v8 = (const char *)(*(void *)(v7 + 208) + *(int *)(v7 + 32));
  if (*v8)
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)&v9, v8);
    icu::LocaleBuilder::setVariant((uint64_t)v13, v9, v10);
  }

  icu::LocaleBuilder::copyExtensionsFrom((char *)v13, (const icu::Locale *)v7, a2);
  icu::LocaleBuilder::build((icu::LocaleBuilder *)v13, a2, a3);
  icu::LocaleBuilder::~LocaleBuilder((icu::LocaleBuilder *)v13);
}

double icu::LocaleMatcher::Builder::Builder(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  double result = *(double *)(a2 + 36);
  *(double *)(a1 + 36) = result;
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  return result;
}

{
  double result;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  double result = *(double *)(a2 + 36);
  *(double *)(a1 + 36) = result;
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  return result;
}

void icu::LocaleMatcher::Builder::~Builder(icu::LocaleMatcher::Builder *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  uint64_t v4 = *((void *)this + 6);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = *((void *)this + 7);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
}

double icu::LocaleMatcher::Builder::operator=(icu::LocaleMatcher::Builder *a1, uint64_t a2)
{
  *(_DWORD *)uint64_t v3 = *(_DWORD *)a2;
  *(void *)(v3 + 8) = *(void *)(a2 + 8);
  *(void *)(v3 + 16) = *(void *)(a2 + 16);
  *(void *)(v3 + 24) = *(void *)(a2 + 24);
  *(_BYTE *)(v3 + 32) = *(_BYTE *)(a2 + 32);
  double result = *(double *)(a2 + 36);
  *(double *)(v3 + 36) = result;
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  return result;
}

uint64_t icu::LocaleMatcher::Builder::clearSupportedLocales(icu::LocaleMatcher::Builder *this)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    return icu::UVector::removeAllElements(result);
  }
  return result;
}

uint64_t icu::LocaleMatcher::Builder::ensureSupportedLocaleVector( icu::LocaleMatcher::Builder *this, unint64_t a2)
{
  if (*((void *)this + 1)) {
    return 1LL;
  }
  uint64_t v4 = icu::UMemory::operator new((icu::UMemory *)0x28, a2);
  if (v4)
  {
    uint64_t v5 = icu::UVector::UVector(v4, (uint64_t)uprv_deleteUObject, 0LL, (int *)this);
    if (*(int *)this <= 0)
    {
      *((void *)this + 1) = v5;
      return 1LL;
    }

    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    return 0LL;
  }

  uint64_t result = 0LL;
  *(_DWORD *)this = 7;
  return result;
}

uint64_t icu::LocaleMatcher::Builder::setSupportedLocalesFromListString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(int *)a1 <= 0)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    if (v5) {
      icu::UVector::removeAllElements(v5);
    }
    if (icu::LocaleMatcher::Builder::ensureSupportedLocaleVector((icu::LocaleMatcher::Builder *)a1, v4))
    {
      int v6 = DWORD2(v11[0]);
      if (SDWORD2(v11[0]) >= 1)
      {
        int v7 = 0;
        do
        {
          while (1)
          {
            int v8 = (void *)icu::LocalePriorityList::orphanLocaleAt((uint64_t **)v11, v7);
            if (v8) {
              break;
            }
            if (++v7 >= v6) {
              goto LABEL_14;
            }
          }

          icu::UVector::adoptElement(*(icu::UVector **)(a1 + 8), v8, (UErrorCode *)a1);
          ++v7;
        }

        while (*(int *)a1 <= 0 && v7 < v6);
      }
    }
  }

icu::LocaleMatcher::Builder *icu::LocaleMatcher::Builder::setSupportedLocales( icu::LocaleMatcher::Builder *this, icu::Locale::Iterator *a2)
{
  if (icu::LocaleMatcher::Builder::ensureSupportedLocaleVector(this, (unint64_t)a2))
  {
    uint64_t v4 = *((void *)this + 1);
    if (v4) {
      icu::UVector::removeAllElements(v4);
    }
    while ((*(unsigned int (**)(icu::Locale::Iterator *))(*(void *)a2 + 16LL))(a2))
    {
      uint64_t v5 = (icu::Locale *)(*(uint64_t (**)(icu::Locale::Iterator *))(*(void *)a2 + 24LL))(a2);
      int v7 = icu::Locale::clone(v5, v6);
      if (!v7 && *(_DWORD *)this <= 0) {
        *(_DWORD *)this = 7;
      }
      icu::UVector::adoptElement(*((icu::UVector **)this + 1), v7, (UErrorCode *)this);
    }
  }

  return this;
}

icu::UVector **icu::LocaleMatcher::Builder::addSupportedLocale(icu::UVector **this, const icu::Locale *a2)
{
  if (icu::LocaleMatcher::Builder::ensureSupportedLocaleVector( (icu::LocaleMatcher::Builder *)this,  (unint64_t)a2))
  {
    uint64_t v5 = icu::Locale::clone(a2, v4);
    icu::UVector::adoptElement(this[1], v5, (UErrorCode *)this);
  }

  return this;
}

icu::LocaleMatcher::Builder *icu::LocaleMatcher::Builder::setNoDefaultLocale( icu::LocaleMatcher::Builder *this)
{
  if (*(int *)this <= 0)
  {
    uint64_t v2 = *((void *)this + 3);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    }
    *((void *)this + 3) = 0LL;
    *((_BYTE *)this + 32) = 0;
  }

  return this;
}

icu::LocaleMatcher::Builder *icu::LocaleMatcher::Builder::setDefaultLocale( icu::LocaleMatcher::Builder *this, const icu::Locale *a2)
{
  if (*(int *)this <= 0)
  {
    if (a2)
    {
      uint64_t v3 = icu::Locale::clone(a2, (unint64_t)a2);
      if (!v3)
      {
        *(_DWORD *)this = 7;
        return this;
      }
    }

    else
    {
      uint64_t v3 = 0LL;
    }

    uint64_t v4 = *((void *)this + 3);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
    *((void *)this + 3) = v3;
    *((_BYTE *)this + 32) = 1;
  }

  return this;
}

int *icu::LocaleMatcher::Builder::setFavorSubtag(int *result, int a2)
{
  if (*result <= 0) {
    result[9] = a2;
  }
  return result;
}

int *icu::LocaleMatcher::Builder::setDemotionPerDesiredLocale(int *result, int a2)
{
  if (*result <= 0) {
    result[5] = a2;
  }
  return result;
}

icu::LocaleMatcher::Builder *icu::LocaleMatcher::Builder::setMaxDistance( icu::LocaleMatcher::Builder *this, const icu::Locale *a2, const icu::Locale *a3)
{
  if (*(int *)this <= 0)
  {
    uint64_t v5 = icu::Locale::clone(a2, (unint64_t)a2);
    int v7 = icu::Locale::clone(a3, v6);
    int v8 = v7;
    if (v5 && v7)
    {
      uint64_t v9 = *((void *)this + 6);
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
      }
      uint64_t v10 = *((void *)this + 7);
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
      }
      *((void *)this + 6) = v5;
      *((void *)this + 7) = v8;
    }

    else
    {
      if (v5) {
        (*(void (**)(icu::Locale *))(*(void *)v5 + 8LL))(v5);
      }
      if (v8) {
        (*(void (**)(icu::Locale *))(*(void *)v8 + 8LL))(v8);
      }
      *(_DWORD *)this = 7;
    }
  }

  return this;
}

uint64_t icu::LocaleMatcher::Builder::copyErrorTo(UErrorCode *this, UErrorCode *a2)
{
  if (*(int *)this >= 1)
  {
    *a2 = *this;
    return 1LL;
  }

  return 0LL;
}

icu::LocaleMatcher *icu::LocaleMatcher::Builder::build@<X0>( icu::LocaleMatcher::Builder *this@<X0>, UErrorCode *a2@<X1>, icu::LocaleMatcher *a3@<X8>)
{
  return icu::LocaleMatcher::LocaleMatcher(a3, this, a2);
}

uint64_t icu::LocaleMatcher::putIfAbsent(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4, int *a5)
{
  if (*a5 <= 0 && !uhash_containsKey(a1[7], a2))
  {
    uhash_putiAllowZero(a1[7], a2, a3, a5);
    if (*a5 <= 0)
    {
      *(void *)(a1[8] + 8LL * (int)a4) = a2;
      *(_DWORD *)(a1[9] + 4LL * (int)a4) = a3;
      return (a4 + 1);
    }
  }

  return a4;
}

icu::LocaleMatcher *icu::LocaleMatcher::LocaleMatcher( icu::LocaleMatcher *this, const icu::LocaleMatcher::Builder *a2, UErrorCode *a3)
{
  uint64_t v62 = *MEMORY[0x1895F89C0];
  *(void *)this = sub_1807E067C((int *)a3);
  *((void *)this + 1) = sub_1807D52D8((int *)a3);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  uint64_t v7 = *(void *)((char *)a2 + 36);
  *((void *)this + 4) = 0LL;
  int v8 = (void *)((char *)this + 32);
  *((void *)this + 7) = 0LL;
  *((void *)this + 3) = v7;
  *((void *)this + 11) = 0LL;
  *((_DWORD *)this + 12) = 0;
  *((void *)this + 5) = 0LL;
  *((_DWORD *)this + 20) = 0;
  *((void *)this + 8) = 0LL;
  *((void *)this + 9) = 0LL;
  *((void *)this + 12) = 0LL;
  uint64_t v9 = (icu::Locale *)*((void *)a2 + 3);
  v50[0] = "und";
  v50[1] = "";
  uint64_t v52 = 0LL;
  uint64_t v53 = 0LL;
  v50[2] = "";
  uint64_t v51 = 0LL;
  if (v9)
  {
    uint64_t v10 = icu::Locale::clone(v9, v6);
    *((void *)this + 11) = v10;
    if (!v10) {
      goto LABEL_46;
    }
    uint64_t v11 = v10;
    sub_1807D12AC(*(void *)this, (uint64_t)v10, (int *)a3, (uint64_t)&v54);
    sub_1807E29B0((uint64_t)v50, (uint64_t)&v54);
    if (*((void *)&v55 + 1)) {
      sub_1807E29A8((uint64_t)&v54);
    }
    uint64_t v12 = v50;
  }

  else
  {
    uint64_t v12 = 0LL;
    uint64_t v11 = 0LL;
  }

  uint64_t v13 = *((void *)a2 + 1);
  if (!v13)
  {
    *((_DWORD *)this + 12) = 0;
    goto LABEL_34;
  }

  uint64_t v14 = *(unsigned int *)(v13 + 8);
  *((_DWORD *)this + 12) = v14;
  if ((int)v14 < 1)
  {
LABEL_34:
    *((void *)this + 12) = v11;
    if (*((_DWORD *)a2 + 5) == 1) {
      *((_DWORD *)this + 5) = *(_DWORD *)(*((void *)this + 1) + 84LL);
    }
    if ((*((_DWORD *)this + 4) & 0x80000000) != 0)
    {
      if (*((void *)a2 + 6))
      {
        __int128 v56 = 0u;
        __int128 v54 = 0u;
        __int128 v55 = 0u;
        sub_1807D12AC(*(void *)this, *((void *)a2 + 7), (int *)a3, (uint64_t)&v54);
        uint64_t v49 = &v54;
        uint64_t v32 = *((void *)this + 1);
        sub_1807D12AC(*(void *)this, *((void *)a2 + 6), (int *)a3, (uint64_t)v47);
        unsigned int v33 = sub_1807D549C(v32, (uint64_t)v47, (uint64_t)&v49, 1, 800LL, *((_DWORD *)this + 6), *((_DWORD *)this + 7));
        if (v48) {
          sub_1807E29A8((uint64_t)v47);
        }
        else {
          int v34 = 0;
        }
        *((_DWORD *)this + 4) = v34;
        if (*((void *)&v55 + 1)) {
          sub_1807E29A8((uint64_t)&v54);
        }
      }

      else
      {
        *((_DWORD *)this + 4) = *(_DWORD *)(*((void *)this + 1) + 72LL);
      }
    }

    goto LABEL_47;
  }

  *((void *)this + 4) = uprv_malloc(8 * v14);
  unint64_t v16 = *((int *)this + 12);
  BOOL v17 = !is_mul_ok(v16, 0x30uLL);
  if (48 * v16 >= 0xFFFFFFFFFFFFFFF0LL) {
    BOOL v17 = 1;
  }
  if (v17) {
    uint64_t v18 = -1LL;
  }
  else {
    uint64_t v18 = 48 * v16 + 16;
  }
  int v19 = (void *)icu::UMemory::operator new[]((icu::UMemory *)v18, v15);
  if (v19)
  {
    *int v19 = 48LL;
    v19[1] = v16;
    int v20 = v19 + 2;
    if ((_DWORD)v16)
    {
      uint64_t v21 = v19 + 2;
      do
      {
        *uint64_t v21 = "und";
        v21[1] = "";
        v21[3] = 0LL;
        v21[4] = 0LL;
        v21[2] = "";
        *((_DWORD *)v21 + 10) = 0;
        v21 += 6;
      }

      while (v21 != &v20[6 * (int)v16]);
    }

    *((void *)this + 5) = v20;
    char v22 = (void *)*((void *)this + 4);
    if (v22)
    {
      bzero(v22, 8LL * *((int *)this + 12));
      LODWORD(v23) = *((_DWORD *)this + 12);
      if ((int)v23 >= 1)
      {
        uint64_t v24 = 0LL;
        uint64_t v25 = 0LL;
        do
        {
          uint64_t v26 = (icu::Locale *)icu::UVector::elementAt(*((icu::UVector **)a2 + 1), v25);
          *(void *)(*v8 + 8 * v25) = icu::Locale::clone(v26, v27);
          uint64_t v28 = *(void *)(*v8 + 8 * v25);
          if (!v28) {
            goto LABEL_46;
          }
          sub_1807D12AC(*(void *)this, v28, (int *)a3, (uint64_t)&v54);
          uint64_t v29 = sub_1807E29B0(*((void *)this + 5) + v24, (uint64_t)&v54);
          if (*((void *)&v55 + 1)) {
            sub_1807E29A8((uint64_t)&v54);
          }
          sub_1807E2B14(v29);
          ++v25;
          uint64_t v23 = *((int *)this + 12);
          v24 += 48LL;
        }

        while (v25 < v23);
      }

      *((void *)this + 7) = uhash_openSize( (uint64_t)sub_1807D1324,  (uint64_t)sub_1807D132C,  (uint64_t)uhash_compareLong,  v23,  (int *)a3);
      *((void *)this + 8) = uprv_malloc(8LL * *((int *)this + 12));
      int v30 = uprv_malloc(4LL * *((int *)this + 12));
      *((void *)this + 9) = v30;
      if (*((void *)this + 8))
      {
        if (v30)
        {
          uint64_t v61 = 0LL;
          __int128 v59 = 0u;
          __int128 v60 = 0u;
          __int128 v57 = 0u;
          __int128 v58 = 0u;
          __int128 v56 = 0u;
          __int128 v54 = 0u;
          __int128 v55 = 0u;
          sub_1807D1340((uint64_t)&v54, *((_DWORD *)this + 12), *a3);
          if (*(int *)a3 <= 0)
          {
            if (*((int *)this + 12) < 1)
            {
              LODWORD(v38) = 0;
LABEL_78:
              *((_DWORD *)this + 20) = v38;
              int v31 = 1;
LABEL_79:
              if (BYTE12(v54)) {
                uprv_free((void *)v54);
              }
              if (!v31) {
                goto LABEL_47;
              }
              goto LABEL_34;
            }

            uint64_t v36 = 0LL;
            uint64_t v37 = 0LL;
            int v46 = 0;
            uint64_t v38 = 0LL;
            while (1)
            {
              uint64_t v39 = *((void *)this + 5) + v36;
              if (v12 || !*((_BYTE *)a2 + 32))
              {
                if (v12 && sub_1807E2A18(v39, (uint64_t)v12))
                {
                  *(_BYTE *)(v54 + v37) = 1;
                  uint64_t v38 = icu::LocaleMatcher::putIfAbsent((uint64_t *)this, v39, v37, v38, (int *)a3);
                }

                else if (sub_1807D5C24(*((void *)this + 1), v39))
                {
                  *(_BYTE *)(v54 + v37) = 2;
                  ++v46;
                }

                else
                {
                  *(_BYTE *)(v54 + v37) = 3;
                }
              }

              else
              {
                uint64_t v11 = *(icu::Locale **)(*((void *)this + 4) + 8 * v37);
                *(_BYTE *)(v54 + v37) = 1;
                uint64_t v38 = icu::LocaleMatcher::putIfAbsent((uint64_t *)this, v39, 0, v38, (int *)a3);
                uint64_t v12 = (void *)v39;
              }

              ++v37;
              uint64_t v40 = *((int *)this + 12);
              v36 += 48LL;
              if (v37 >= v40)
              {
                if ((int)v40 >= 1 && v46 >= 1)
                {
                  uint64_t v41 = 0LL;
                  uint64_t v42 = 0LL;
                  int v43 = v46 + v38;
                  do
                  {
                    if (*(_BYTE *)(v54 + v42) == 2)
                    {
                      uint64_t v38 = icu::LocaleMatcher::putIfAbsent( (uint64_t *)this,  *((void *)this + 5) + v41,  v42,  v38,  (int *)a3);
                      LODWORD(v40) = *((_DWORD *)this + 12);
                    }

                    v41 += 48LL;
                  }

                  while ((int)v38 < v43);
                }

                if ((int)v40 >= 1)
                {
                  uint64_t v44 = 0LL;
                  uint64_t v45 = 0LL;
                  do
                  {
                    if (*(_BYTE *)(v54 + v45) == 3)
                    {
                      uint64_t v38 = icu::LocaleMatcher::putIfAbsent( (uint64_t *)this,  *((void *)this + 5) + v44,  v45,  v38,  (int *)a3);
                      LODWORD(v40) = *((_DWORD *)this + 12);
                    }

                    ++v45;
                    v44 += 48LL;
                  }

                  while (v45 < (int)v40);
                }

                goto LABEL_78;
              }
            }
          }

          int v31 = 0;
          goto LABEL_79;
        }
      }
    }
  }

  else
  {
    *((void *)this + 5) = 0LL;
  }

LABEL_46:
  *a3 = U_MEMORY_ALLOCATION_ERROR;
LABEL_47:
  if (v51) {
    sub_1807E29A8((uint64_t)v50);
  }
  return this;
}

    uint64_t v1 = v8 - 1;
    *(_BYTE *)(v3 + v19) = v21;
  }

  while (v1 > 0);
  return result;
}

    *a6 = 15;
    return v7;
  }

  uint64_t v12 = a2;
  do
  {
    uint64_t v13 = v12;
    while (1)
    {
      uint64_t v14 = v13 - 1;
      unint64_t v15 = v8[v13 - 1];
      if (v13 <= 1 || (v15 & 0xFC00) != 0xDC00) {
        break;
      }
      unint64_t v16 = v13 - 2;
      BOOL v17 = v8[v13 - 2];
      --v13;
      if ((v17 & 0xFC00) == 0xD800)
      {
        unint64_t v15 = v15 - 56613888 + (v17 << 10);
        uint64_t v14 = v16;
        break;
      }

          unint64_t v15 = (char)v15;
          ++v5;
          switch((char)v15)
          {
            case 0:
              if ((v20 & 0x80u) != 0LL) {
                uint64_t result = 0xFFFFLL;
              }
              else {
                uint64_t result = v20;
              }
              goto LABEL_91;
            case 1:
              *(_BYTE *)(v9 + 96) = *(_BYTE *)(v9 + 97);
              if ((v20 & 0x80u) != 0LL) {
                uint64_t result = 0xFFFFLL;
              }
              else {
                uint64_t result = (v20 + 128);
              }
              goto LABEL_91;
            case 2:
              uint64_t result = 0xFFFFLL;
              *(_BYTE *)(v9 + 96) = *(_BYTE *)(v9 + 97);
              goto LABEL_91;
            case 3:
              uint64_t result = 0xFFFFLL;
              if ((_DWORD)v20 == 126)
              {
                uint64_t result = 8254LL;
              }

              else if ((_DWORD)v20 == 92)
              {
                uint64_t result = 165LL;
              }

              else
              {
LABEL_113:
                uint64_t result = v20;
              }

              goto LABEL_91;
            case 8:
              else {
                uint64_t result = (v20 + 65344);
              }
              goto LABEL_91;
            default:
              if ((unint64_t)v5 >= v7)
              {
                *(_BYTE *)(a1[1] + 65LL) = v21;
                *(_BYTE *)(a1[1] + 64LL) = 1;
                goto LABEL_32;
              }

              uint64_t v14 = v20;
              break;
          }

  v9 += 2 * v20;
  uint64_t v2 = v21;
  if (v12) {
    goto LABEL_11;
  }
LABEL_50:
  if (v17)
  {
LABEL_51:
    uint64_t result = (void *)sub_180829514(v6, (char *)&v31, v17, &v33, v5[5], &v32, v15, a2);
    uint64_t v7 = v33;
    uint64_t v9 = *((_DWORD *)v5 + 10) - (_DWORD)v33;
  }

  v9 += 2 * v20;
  uint64_t v2 = v21;
  if (v12) {
    goto LABEL_11;
  }
LABEL_50:
  if (v17)
  {
LABEL_51:
    uint64_t result = (void *)sub_180829514(v6, (char *)&v35, v17, &v37, v5[5], &v36, v15, a2);
    uint64_t v7 = v37;
    uint64_t v9 = *((_DWORD *)v5 + 10) - (_DWORD)v37;
  }

            if ((_DWORD)v23 != v22) {
              break;
            }
            int v19 = 0xFFFFFFFFLL;
            char v22 = -1;
            if ((v23 & 0x80000000) != 0) {
              goto LABEL_123;
            }
          }

          if ((v23 & 0x80000000) != 0)
          {
            unint64_t v6 = 0xFFFFFFFFLL;
            goto LABEL_124;
          }

          if ((v22 & 0x80000000) != 0)
          {
            unint64_t v6 = 1LL;
            goto LABEL_124;
          }

          uint64_t v26 = v23;
          uint64_t v47 = v23 & 0xFFFFF800;
          if ((v23 & 0xFFFFF800) == 0xD800)
          {
            if ((v23 & 0x400) != 0)
            {
              uint64_t v26 = v23;
              if (v20 <= v8 - 2)
              {
                uint64_t v28 = *(v8 - 2);
                uint64_t v26 = v23;
                if ((v28 & 0xFC00) == 0xD800) {
                  uint64_t v26 = v23 - 56613888 + (v28 << 10);
                }
              }
            }

            else
            {
              uint64_t v26 = v23;
              if (v8 != v17)
              {
                unint64_t v27 = *v8;
                uint64_t v26 = v23;
                if ((v27 & 0xFC00) == 0xDC00) {
                  uint64_t v26 = ((_DWORD)v23 << 10) - 56613888 + v27;
                }
              }
            }
          }

          uint64_t v12 = v22 & 0xFFFFF800;
          uint64_t v29 = v22;
          uint64_t v48 = v12;
          if ((_DWORD)v12 == 55296)
          {
            if ((v22 & 0x400) != 0)
            {
              uint64_t v12 = (uint64_t)(v10 - 2);
              uint64_t v29 = v22;
              if (v21 <= v10 - 2)
              {
                uint64_t v12 = *(unsigned __int16 *)v12;
                uint64_t v29 = v22;
                if ((v12 & 0xFC00) == 0xD800) {
                  uint64_t v29 = v22 - 56613888 + ((_DWORD)v12 << 10);
                }
              }
            }

            else
            {
              uint64_t v29 = v22;
              if (v10 != v18)
              {
                uint64_t v12 = *v10;
                uint64_t v29 = v22;
                if ((v12 & 0xFC00) == 0xDC00) {
                  uint64_t v29 = (v22 << 10) - 56613888 + v12;
                }
              }
            }
          }

          uint64_t v49 = v29;
          int v46 = v26;
          if ((v16 & 0x10000) == 0) {
            break;
          }
          if (v14) {
            break;
          }
          int v30 = ucase_toFullFolding(v26, &src, a5);
          unint64_t v16 = a5;
          uint64_t v51 = v30;
          if ((v30 & 0x80000000) != 0) {
            break;
          }
          LOWORD(v31) = v30;
          if (v47 == 55296)
          {
            if ((v23 & 0x400) != 0)
            {
              char v22 = *(v10 - 2);
              --v10;
            }

            else
            {
              ++v8;
            }
          }

          *(void *)&int v75 = v20;
          *((void *)&v75 + 1) = v8;
          v76[0] = v17;
          if (v30 > 0x1F)
          {
            if (HIWORD(v30))
            {
              int v31 = (v30 >> 10) - 10304;
              dest[1] = v30 & 0x3FF | 0xDC00;
              uint64_t v12 = 2LL;
            }

            else
            {
              uint64_t v12 = 1LL;
            }

            dest[0] = v31;
            uint64_t v51 = v12;
          }

          else
          {
            u_memcpy(dest, src, v30);
            unint64_t v16 = a5;
            uint64_t v12 = v51;
          }

          int v8 = dest;
          BOOL v17 = &dest[(int)v12];
          int v19 = 0xFFFFFFFFLL;
          uint64_t v14 = 1;
          int v20 = dest;
        }

        if ((v16 & 0x10000) == 0) {
          break;
        }
        if (v15) {
          break;
        }
        uint64_t v32 = ucase_toFullFolding(v49, &src, a5);
        unint64_t v16 = a5;
        uint64_t v51 = v32;
        if ((v32 & 0x80000000) != 0) {
          break;
        }
        LOWORD(v33) = v32;
        if (v48 != 55296) {
          goto LABEL_79;
        }
        if ((v22 & 0x400) == 0)
        {
          ++v10;
LABEL_79:
          int v19 = v23;
          goto LABEL_106;
        }

        int v19 = *(v8 - 2);
        --v8;
LABEL_106:
        *(void *)&int v73 = v21;
        *((void *)&v73 + 1) = v10;
        v74[0] = v18;
        if (v32 > 0x1F)
        {
          if (HIWORD(v32))
          {
            unsigned int v33 = (v32 >> 10) - 10304;
            v63[1] = v32 & 0x3FF | 0xDC00;
            uint64_t v12 = 2LL;
          }

          else
          {
            uint64_t v12 = 1LL;
          }

          v63[0] = v33;
          uint64_t v51 = v12;
        }

        else
        {
          uint64_t v38 = v19;
          u_memcpy(v63, src, v32);
          int v19 = v38;
          unint64_t v16 = a5;
          uint64_t v12 = v51;
        }

        uint64_t v10 = v63;
        uint64_t v18 = &v63[(int)v12];
        char v22 = -1;
        unint64_t v15 = 1;
        uint64_t v21 = v63;
      }

      if (v14 > 1) {
        break;
      }
      Decomposition = icu::Normalizer2Impl::getDecomposition(v45, v46, &v72, (int *)&v51);
      unint64_t v16 = a5;
      src = Decomposition;
      if (!Decomposition) {
        break;
      }
      if (v47 == 55296)
      {
        if ((v23 & 0x400) != 0)
        {
          char v22 = *(v10 - 2);
          --v10;
        }

        else
        {
          ++v8;
        }
      }

      uint64_t v39 = (UChar **)&v76[3 * v14 - 2];
      *uint64_t v39 = v20;
      v39[1] = v8;
      v39[2] = v17;
      if (v14 <= 0)
      {
        uint64_t v40 = v14;
        v14 += 2;
        v76[3 * v40 + 1] = 0LL;
      }

      else
      {
        uint64_t v14 = 2;
      }

      uint64_t v12 = (int)v51;
      BOOL v17 = &Decomposition[v51];
      int v19 = 0xFFFFFFFFLL;
      int v8 = Decomposition;
      int v20 = Decomposition;
    }

    if (v15 > 1) {
      break;
    }
    uint64_t v35 = icu::Normalizer2Impl::getDecomposition(v45, v49, &v71, (int *)&v51);
    unint64_t v16 = a5;
    src = v35;
    if (!v35) {
      break;
    }
    if (v48 != 55296) {
      goto LABEL_90;
    }
    if ((v22 & 0x400) == 0)
    {
      ++v10;
LABEL_90:
      int v19 = v23;
      goto LABEL_100;
    }

    int v19 = *(v8 - 2);
    --v8;
LABEL_100:
    uint64_t v36 = (UChar **)&v74[3 * v15 - 2];
    *uint64_t v36 = v21;
    v36[1] = v10;
    v36[2] = v18;
    if (v15 <= 0)
    {
      uint64_t v37 = v15;
      v15 += 2;
      v74[3 * v37 + 1] = 0LL;
    }

    else
    {
      unint64_t v15 = 2;
    }

    uint64_t v12 = (int)v51;
    uint64_t v18 = &v35[v51];
    char v22 = -1;
    uint64_t v10 = v35;
    uint64_t v21 = v35;
  }

  if ((v16 & 0x8000) != 0)
  {
    uint64_t v12 = v23 >> 11;
    if (v12 >= 0x1B)
    {
      uint64_t v12 = v22 >> 11;
      if (v12 >= 0x1B)
      {
        if ((v23 >> 10 > 0x36 || v8 == v17 || (*v8 & 0xFC00) != 0xDC00)
          && (v23 >> 10 != 55 || v20 == v8 - 1 || (*(v8 - 2) & 0xFC00) != 0xD800))
        {
          LODWORD(v23) = v23 - 10240;
        }

        uint64_t v12 = v22 >> 10;
        if (v12 > 0x36 || v10 == v18 || (*v10 & 0xFC00) != 0xDC00)
        {
          if ((_DWORD)v12 != 55 || v21 == v10 - 1 || (uint64_t v12 = *(v10 - 2) & 0xFC00, (_DWORD)v12 != 55296))
          {
            uint64_t v12 = 4294957056LL;
            v22 -= 10240;
          }
        }
      }
    }
  }

  unint64_t v6 = v23 - v22;
LABEL_124:
  icu::UnicodeString::~UnicodeString((void *)v12, (icu::UnicodeString *)&v53);
  icu::UnicodeString::~UnicodeString(v43, (icu::UnicodeString *)&v58);
  return v6;
}

    uint64_t v18 = 128;
    goto LABEL_67;
  }

  if (v11 + 0x80000000 > 3 || v11 == -2147483647)
  {
    if (!v11)
    {
      *(_WORD *)(a1 + 8) = 256;
      *(void *)a1 = 1LL;
      goto LABEL_66;
    }

    if (v11 >= 0) {
      unint64_t v16 = v11;
    }
    else {
      unint64_t v16 = -v11;
    }
    *(_OWORD *)((char *)v38 + 12) = *(_OWORD *)(a4 + 12);
    v38[0] = *(_OWORD *)a4;
    int v19 = *(_DWORD *)a3 + v8 + *(_DWORD *)(a3 + 4);
    unint64_t v15 = v19 + 2;
    HIDWORD(v38[0]) = 3;
    LODWORD(v38[0]) = v19 + 2;
    if (v19 > 999999997) {
      goto LABEL_46;
    }
  }

  else
  {
    if ((v9 & 0x80) != 0) {
      goto LABEL_46;
    }
    uprv_decContextDefault((uint64_t)v38, 64);
    *(void *)((char *)v38 + 4) = 0xFFF0BDC1000F423FLL;
    BYTE8(v38[1]) = 0;
    uint64_t v14 = *(_DWORD *)v6;
    if (*(_DWORD *)v6 <= *(_DWORD *)a4) {
      uint64_t v14 = *(_DWORD *)a4;
    }
    unint64_t v15 = v14 + 10;
    LODWORD(v38[0]) = v14 + 10;
    unint64_t v16 = v12;
  }

  if (v15 <= 49)
  {
    char v22 = 0LL;
    int v20 = byte_180A37148[v15] + 11LL;
    uint64_t v21 = v41;
  }

  else
  {
    int v20 = (v15 + 11);
    uint64_t v21 = uprv_malloc(v20);
    char v22 = v21;
    if (!v21)
    {
      uint64_t v18 = v39 | 0x10;
      goto LABEL_67;
    }
  }

  uint64_t v35 = v22;
  if (v12 + 0x80000000 <= 3 && v12 != -2147483647)
  {
    uint64_t v24 = sub_1808CAA40((uint64_t)v21, (uint64_t)v6, (uint64_t)v38, (int *)&v39);
    uint64_t v26 = *(unsigned __int8 *)(v24 + 9);
    uint64_t v25 = (_BYTE *)(v24 + 9);
    if (v26 || *(_DWORD *)v21 != 1 || (*((_BYTE *)v21 + 8) & 0x70) != 0)
    {
      unint64_t v27 = sub_1808CA160((uint64_t)v21, (uint64_t)v21, a3, (int *)v38, (int *)&v39);
      sub_1808C9920(v27, (uint64_t)v21, (uint64_t)v38, (int *)&v39);
    }

    else
    {
      *uint64_t v25 = 1;
      if (v12 == 0x80000000)
      {
        int v31 = *(_DWORD *)a4;
        uint64_t v28 = 0LL;
        *(_DWORD *)uint64_t v21 = sub_1808CC550(v25, 1LL, *(_DWORD *)a4 - 1);
        *((_DWORD *)v21 + 1) = 1 - v31;
        LODWORD(v39) = v39 | 0x820;
        goto LABEL_61;
      }
    }

    uint64_t v28 = 0LL;
LABEL_61:
    *(_BYTE *)(a1 + 8) = *((_BYTE *)v21 + 8);
    uint64_t v29 = *(_DWORD *)v21;
    *(_DWORD *)(a1 + 4) = *((_DWORD *)v21 + 1);
    sub_1808C77A4((_BYTE *)a1, (int *)a4, (char *)v21 + 9, v29, (int *)&v39 + 1, (int *)&v39);
    sub_1808C7A24((unsigned int *)a1, a4, (int *)&v39 + 1, (int *)&v39);
    goto LABEL_62;
  }

  *((_WORD *)v21 + 4) = 256;
  *(void *)uint64_t v21 = 1LL;
  if (*(char *)(a3 + 8) < 0)
  {
    uprv_decNumberCopy((uint64_t)&v36, (unsigned int *)v21);
    sub_1808C8BD0((uint64_t)v21, (uint64_t)&v36, (uint64_t)v6, (int *)v38, 128, (int *)&v39);
    if (v15 < 50)
    {
      uint64_t v28 = 0LL;
      unint64_t v6 = v40;
    }

    else
    {
      uint64_t v28 = uprv_malloc(v20);
      unint64_t v6 = v28;
      if (!v28)
      {
        LODWORD(v39) = v39 | 0x10;
        goto LABEL_62;
      }
    }

    uprv_decNumberCopy((uint64_t)v6, (unsigned int *)v21);
    uprv_decNumberCopy((uint64_t)v21, (unsigned int *)&v36);
  }

  else
  {
    uint64_t v28 = 0LL;
  }

  uint64_t v32 = 0;
  for (UChar32 i = 30; ; --i)
  {
    int v34 = v39 & 0x2200;
    if ((v39 & 0x2200) != 0
      && ((v39 & 0x200) != 0 || !*((_BYTE *)v21 + 9) && *(_DWORD *)v21 == 1 && (*((_BYTE *)v21 + 8) & 0x70) == 0))
    {
      break;
    }

    v16 *= 2;
    if (v16 < 0)
    {
      sub_1808CA160((uint64_t)v21, (uint64_t)v21, (uint64_t)v6, (int *)v38, (int *)&v39);
      if (!i)
      {
        int v34 = v39 & 0x2200;
LABEL_93:
        if (!v34) {
          goto LABEL_61;
        }
        break;
      }

      uint64_t v32 = 1;
LABEL_90:
      sub_1808CA160((uint64_t)v21, (uint64_t)v21, (uint64_t)v21, (int *)v38, (int *)&v39);
      continue;
    }

    if (!i) {
      goto LABEL_93;
    }
    if (v32) {
      goto LABEL_90;
    }
  }

  *((_BYTE *)v21 + 8) = *((_BYTE *)v21 + 8) & 0x7F | v13;
  sub_1808C7A24((unsigned int *)v21, a4, (int *)&v39 + 1, (int *)&v39);
  uprv_decNumberCopy(a1, (unsigned int *)v21);
LABEL_62:
  if (v35) {
    uprv_free(v35);
  }
  if (v28) {
    uprv_free(v28);
  }
LABEL_66:
  uint64_t v18 = v39;
  if ((_DWORD)v39) {
LABEL_67:
  }
    sub_1808C7B8C(a1, v18, a4);
  return a1;
}

    icu::UnicodeSet::~UnicodeSet(v21, (icu::UnicodeSet *)&v30);
    icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v43);
    int v19 = *(_DWORD *)(a1 + 12);
  }

  a3[3] = v9;
  return sub_1809CF9F4((uint64_t)a3, v19);
}

double sub_1807D12AC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v5 = *a3 <= 0 && *(_BYTE *)(a2 + 216) == 0;
  if (v5 && **(_BYTE **)(a2 + 40))
  {
    sub_1807E0910(a1, a2, (uint64_t)a3, a4);
  }

  else
  {
    *(void *)a4 = "und";
    *(void *)(a4 + 8) = "";
    *(void *)(a4 + 16) = "";
    *(void *)(a4 + 24) = 0LL;
    *(_DWORD *)(a4 + 32) = sub_1807E2910("");
    *(void *)&double result = 7LL;
    *(void *)(a4 + 36) = 7LL;
  }

  return result;
}

uint64_t sub_1807D1324(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

BOOL sub_1807D132C(uint64_t a1, uint64_t a2)
{
  return sub_1807E2A94(a1, a2);
}

uint64_t sub_1807D1340(uint64_t a1, int a2, int a3)
{
  *(void *)a1 = a1 + 13;
  *(_DWORD *)(a1 + 8) = 100;
  *(_BYTE *)(a1 + 12) = 0;
  if (a2 >= 101 && a3 <= 0)
  {
    BOOL v5 = uprv_malloc(a2);
    if (v5)
    {
      unint64_t v6 = v5;
      if (*(_BYTE *)(a1 + 12)) {
        uprv_free(*(void **)a1);
      }
      *(void *)a1 = v6;
      *(_DWORD *)(a1 + 8) = a2;
      *(_BYTE *)(a1 + 12) = 1;
    }
  }

  return a1;
}

__n128 icu::LocaleMatcher::LocaleMatcher(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  __n128 result = *(__n128 *)(a2 + 88);
  *(__n128 *)(a1 + 88) = result;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  *(_DWORD *)(a2 + 48) = 0;
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 72) = 0LL;
  *(void *)(a2 + 56) = 0LL;
  *(_DWORD *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0LL;
  *(void *)(a2 + 96) = 0LL;
  return result;
}

void icu::LocaleMatcher::~LocaleMatcher(icu::LocaleMatcher *this)
{
  int v2 = *((_DWORD *)this + 12);
  if (v2 >= 1)
  {
    for (uint64_t i = 0LL; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*((void *)this + 4) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
        int v2 = *((_DWORD *)this + 12);
      }
    }
  }

  uprv_free(*((void **)this + 4));
  uint64_t v5 = *((void *)this + 5);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 - 8);
    if (v6)
    {
      uint64_t v7 = 48 * v6;
      do
      {
        if (*(void *)(v5 + v7 - 24)) {
          sub_1807E29A8(v5 + v7 - 48);
        }
        v7 -= 48LL;
      }

      while (v7);
    }

    icu::UMemory::operator delete[]((void *)(v5 - 16));
  }

  uhash_close(*((_BYTE **)this + 7));
  uprv_free(*((void **)this + 8));
  uprv_free(*((void **)this + 9));
  uint64_t v8 = *((void *)this + 11);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
}

__n128 icu::LocaleMatcher::operator=(icu::LocaleMatcher *a1, uint64_t a2)
{
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v3 + 32) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(v3 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(v3 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(v3 + 80) = *(_DWORD *)(a2 + 80);
  __n128 result = *(__n128 *)(a2 + 88);
  *(__n128 *)(v3 + 88) = result;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  *(_DWORD *)(a2 + 48) = 0;
  *(void *)(a2 + 64) = 0LL;
  *(void *)(a2 + 72) = 0LL;
  *(void *)(a2 + 56) = 0LL;
  *(_DWORD *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0LL;
  *(void *)(a2 + 96) = 0LL;
  return result;
}

uint64_t icu::LocaleMatcher::getBestMatch(icu::LocaleMatcher *this, const icu::Locale *a2, UErrorCode *a3)
{
  BestSuppint Index = icu::LocaleMatcher::getBestSuppIndex((uint64_t)this, (uint64_t)v8, 0LL, (int *)a3);
  if (v8[3]) {
    sub_1807E29A8((uint64_t)v8);
  }
  else {
    uint64_t v7 = (char *)(*((void *)this + 4) + 8LL * BestSuppIndex);
  }
  return *(void *)v7;
}

uint64_t icu::LocaleMatcher::getBestSuppIndex(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  if (*a4 > 0) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v10 = 0LL;
  uint64_t v11 = (8 * *(_DWORD *)(a1 + 16));
  unsigned int v12 = -1;
  while (1)
  {
    if (*(void *)(a1 + 56))
    {
      sub_1807E2B14(a2);
      v17[0] = 0;
      uint64_t v13 = uhash_getiAndFound(*(void *)(a1 + 56), a2, v17);
      if (v17[0])
      {
        uint64_t v4 = v13;
        if (a3) {
          sub_1807D1B54((icu::Locale *)a3, v10, a4);
        }
        return v4;
      }
    }

    unsigned int v14 = sub_1807D549C( *(void *)(a1 + 8),  a2,  *(void *)(a1 + 64),  *(_DWORD *)(a1 + 80),  v11,  *(_DWORD *)(a1 + 24),  *(_DWORD *)(a1 + 28));
    if ((v14 & 0x80000000) == 0)
    {
      unsigned int v15 = v14;
      if (a3)
      {
        sub_1807D1B54((icu::Locale *)a3, v10, a4);
        if (*a4 > 0) {
          return 0xFFFFFFFFLL;
        }
      }

      LODWORD(v11) = v15 & 0x3FF;
      unsigned int v12 = v15 >> 10;
    }

    if (!a3) {
      break;
    }
    uint64_t v11 = (v11 - 8 * *(_DWORD *)(a1 + 20));
    uint64_t v16 = (*(uint64_t (**)(void))(**(void **)(a3 + 8) + 24LL))(*(void *)(a3 + 8));
    *(void *)(a3 + 24) = v16;
    sub_1807D12AC(*(void *)a3, v16, a4, (uint64_t)v17);
    sub_1807E29B0(a2, (uint64_t)v17);
    if (v18) {
      sub_1807E29A8((uint64_t)v17);
    }
    if (*a4 > 0) {
      return 0xFFFFFFFFLL;
    }
    unint64_t v10 = (v10 + 1);
  }

  if ((v12 & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  return *(unsigned int *)(*(void *)(a1 + 72) + 4LL * v12);
}

uint64_t icu::LocaleMatcher::getBestMatch( icu::LocaleMatcher *this, icu::Locale::Iterator *a2, UErrorCode *a3)
{
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  v11[0] = *(void *)this;
  v11[1] = (uint64_t)a2;
  *(void *)&__int128 v13 = 0LL;
  DWORD2(v13) = -1;
  *((void *)&v12 + 1) = (*(uint64_t (**)(icu::Locale::Iterator *))(*(void *)a2 + 24LL))(a2);
  sub_1807D12AC(v11[0], *((uint64_t *)&v12 + 1), (int *)a3, (uint64_t)v10);
  BestSuppint Index = icu::LocaleMatcher::getBestSuppIndex((uint64_t)this, (uint64_t)v10, (uint64_t)v11, (int *)a3);
  if (v10[3]) {
    sub_1807E29A8((uint64_t)v10);
  }
  else {
    uint64_t v9 = (uint64_t *)(*((void *)this + 4) + 8LL * BestSuppIndex);
  }
  uint64_t v3 = *v9;
  if (!(_DWORD)v12 && (void)v13) {
    (*(void (**)(void))(*(void *)v13 + 8LL))(v13);
  }
  return v3;
}

uint64_t icu::LocaleMatcher::getBestMatchForListString( icu::LocaleMatcher *a1, uint64_t a2, uint64_t a3, UErrorCode *a4)
{
  v8[0] = &unk_18970BB60;
  v8[1] = v9;
  v8[2] = 0LL;
  void v8[3] = (DWORD2(v9[0]) - HIDWORD(v9[0]));
  uint64_t BestMatch = icu::LocaleMatcher::getBestMatch(a1, (icu::Locale::Iterator *)v8, a4);
  icu::Locale::Iterator::~Iterator((icu::Locale::Iterator *)v8);
  icu::LocalePriorityList::~LocalePriorityList((icu::LocalePriorityList *)v9);
  return BestMatch;
}

void icu::LocaleMatcher::getBestMatchResult( icu::LocaleMatcher *this@<X0>, const icu::Locale *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = a2;
  sub_1807D12AC(*(void *)this, (uint64_t)a2, (int *)a3, (uint64_t)v12);
  BestSuppint Index = icu::LocaleMatcher::getBestSuppIndex((uint64_t)this, (uint64_t)v12, 0LL, (int *)a3);
  if (v12[3]) {
    sub_1807E29A8((uint64_t)v12);
  }
  if (*(int *)a3 > 0 || (BestSuppIndex & 0x80000000) != 0)
  {
LABEL_2:
    uint64_t v6 = 0LL;
    uint64_t v7 = (uint64_t *)((char *)this + 96);
    int v8 = -1;
    BestSuppint Index = -1;
  }

  else
  {
    int v8 = 0;
    uint64_t v7 = (uint64_t *)(*((void *)this + 4) + 8LL * BestSuppIndex);
  }

  uint64_t v11 = *v7;
  *(void *)a4 = v6;
  *(void *)(a4 + 8) = v11;
  *(_DWORD *)(a4 + 16) = v8;
  *(_DWORD *)(a4 + 20) = BestSuppIndex;
  *(_BYTE *)(a4 + 24) = 0;
}

void icu::LocaleMatcher::getBestMatchResult( icu::LocaleMatcher *this@<X0>, icu::Locale::Iterator *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  if (*(int *)a3 <= 0 && (*(unsigned int (**)(icu::Locale::Iterator *))(*(void *)a2 + 16LL))(a2))
  {
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    v16[0] = *(void *)this;
    v16[1] = (uint64_t)a2;
    *(void *)&__int128 v18 = 0LL;
    DWORD2(v18) = -1;
    *((void *)&v17 + 1) = (*(uint64_t (**)(icu::Locale::Iterator *))(*(void *)a2 + 24LL))(a2);
    sub_1807D12AC(v16[0], *((uint64_t *)&v17 + 1), (int *)a3, (uint64_t)v15);
    BestSuppint Index = icu::LocaleMatcher::getBestSuppIndex((uint64_t)this, (uint64_t)v15, (uint64_t)v16, (int *)a3);
    if (v15[3]) {
      sub_1807E29A8((uint64_t)v15);
    }
    if (*(int *)a3 > 0 || (BestSuppIndex & 0x80000000) != 0)
    {
      uint64_t v10 = 0LL;
      char v12 = 0;
      uint64_t v11 = (uint64_t *)((char *)this + 96);
      int v13 = -1;
      BestSuppint Index = -1;
    }

    else
    {
      uint64_t v10 = v18;
      *(void *)&__int128 v18 = 0LL;
      uint64_t v11 = (uint64_t *)(*((void *)this + 4) + 8LL * BestSuppIndex);
      char v12 = 1;
      int v13 = DWORD2(v18);
    }

    uint64_t v14 = *v11;
    *(void *)a4 = v10;
    *(void *)(a4 + 8) = v14;
    *(_DWORD *)(a4 + 16) = v13;
    *(_DWORD *)(a4 + 20) = BestSuppIndex;
    *(_BYTE *)(a4 + 24) = v12;
    if (!(_DWORD)v17)
    {
      if ((void)v18) {
        (*(void (**)(void))(*(void *)v18 + 8LL))(v18);
      }
    }
  }

  else
  {
    uint64_t v6 = *((void *)this + 12);
    *(void *)a4 = 0LL;
    *(void *)(a4 + 8) = v6;
    *(void *)(a4 + 16) = -1LL;
    *(_BYTE *)(a4 + 24) = 0;
  }

icu::Locale *sub_1807D1B54(icu::Locale *result, unint64_t a2, int *a3)
{
  if (*a3 <= 0)
  {
    uint64_t v3 = result;
    *((_DWORD *)result + 10) = a2;
    if (*((_DWORD *)result + 4) == 1)
    {
      *((void *)result + 4) = *((void *)result + 3);
    }

    else
    {
      uint64_t v5 = *((void *)result + 4);
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
      }
      __n128 result = (icu::Locale *)icu::UMemory::operator new((icu::UMemory *)0xE0, a2);
      if (result)
      {
        __n128 result = icu::Locale::Locale(result, *((void *)v3 + 3));
        *((void *)v3 + 4) = result;
      }

      else
      {
        *((void *)v3 + 4) = 0LL;
        *a3 = 7;
      }
    }
  }

  return result;
}

BOOL icu::LocaleMatcher::isMatch( icu::LocaleMatcher *this, const icu::Locale *a2, const icu::Locale *a3, UErrorCode *a4)
{
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v14 = 0u;
  sub_1807D12AC(*(void *)this, (uint64_t)a3, (int *)a4, (uint64_t)&v14);
  if (*(int *)a4 <= 0)
  {
    int v13 = &v14;
    uint64_t v8 = *((void *)this + 1);
    sub_1807D12AC(*(void *)this, (uint64_t)a2, (int *)a4, (uint64_t)v11);
    int v9 = sub_1807D549C( v8,  (uint64_t)v11,  (uint64_t)&v13,  1,  (8 * *((_DWORD *)this + 4)),  *((_DWORD *)this + 6),  *((_DWORD *)this + 7));
    if (v12) {
      sub_1807E29A8((uint64_t)v11);
    }
    BOOL v7 = v9 >= 0;
  }

  else
  {
    BOOL v7 = 0LL;
  }

  if (*((void *)&v15 + 1)) {
    sub_1807E29A8((uint64_t)&v14);
  }
  return v7;
}

double icu::LocaleMatcher::internalMatch( icu::LocaleMatcher *this, const icu::Locale *a2, const icu::Locale *a3, UErrorCode *a4)
{
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v14 = 0u;
  sub_1807D12AC(*(void *)this, (uint64_t)a3, (int *)a4, (uint64_t)&v14);
  double v7 = 0.0;
  if (*(int *)a4 <= 0)
  {
    int v13 = &v14;
    uint64_t v8 = *((void *)this + 1);
    sub_1807D12AC(*(void *)this, (uint64_t)a2, (int *)a4, (uint64_t)v11);
    __int16 v9 = sub_1807D549C( v8,  (uint64_t)v11,  (uint64_t)&v13,  1,  (8 * *((_DWORD *)this + 4)),  *((_DWORD *)this + 6),  *((_DWORD *)this + 7));
    if (v12) {
      sub_1807E29A8((uint64_t)v11);
    }
    double v7 = ((double)(v9 & 0x3FF) * -0.125 + 100.0) / 100.0;
  }

  if (*((void *)&v15 + 1)) {
    sub_1807E29A8((uint64_t)&v14);
  }
  return v7;
}

uint64_t uloc_acceptLanguage( icu::Locale *a1, int a2, int *a3, uint64_t a4, unsigned int a5, uint64_t a6, int *a7)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (*a7 <= 0)
  {
    if (a1)
    {
      if (a2 < 0) {
        goto LABEL_13;
      }
    }

    else if (a2)
    {
      goto LABEL_13;
    }

    if (a4)
    {
      if ((a5 & 0x80000000) != 0) {
        goto LABEL_13;
      }
    }

    else if (a5)
    {
      goto LABEL_13;
    }

    if (a6)
    {
      memset(v20, 0, 224);
      uint64_t Root = icu::Locale::getRoot(a1);
      icu::Locale::Locale((icu::Locale *)v20, Root);
      memset(v19, 0, sizeof(v19));
      icu::Locale::Locale((icu::Locale *)v17, (uint64_t)v20);
      v18[0] = off_18970BBA8;
      v18[1] = a4;
      v18[2] = a4 + 8LL * a5;
      icu::Locale::Locale((icu::Locale *)v19, (uint64_t)v17);
      icu::Locale::~Locale((icu::Locale *)v17);
      uint64_t v7 = sub_1807D1F5C(a6, (icu::Locale::Iterator *)v18, a1, a2, a3, a7);
      v18[0] = off_18970BBA8;
      icu::Locale::~Locale((icu::Locale *)v19);
      icu::Locale::Iterator::~Iterator((icu::Locale::Iterator *)v18);
      icu::Locale::~Locale((icu::Locale *)v20);
      return v7;
    }

LABEL_13:
    uint64_t v7 = 0LL;
    *a7 = 1;
    return v7;
  }

  return 0LL;
}

  int v13 = *(const char **)(a1 + 16);
LABEL_14:
  if (v11 >= 1)
  {
    __int128 v14 = 0;
    __int128 v15 = 0LL;
    int v72 = v13;
    int v73 = (icu::UVector *)(a1 + 32);
    uint64_t v70 = v11;
    BOOL v69 = v12;
    while (1)
    {
      if (v9) {
        __int128 v15 = icu::UVector::elementAt(v73, v14);
      }
      int v84 = 0;
      memset(&v82[1], 0, 48);
      v82[0] = (char *)&v82[1] + 5;
      LODWORD(v82[1]) = 40;
      int v83 = 0;
      int v81 = *v8;
      icu::StringPiece::StringPiece((icu::StringPiece *)&v79, v12);
      icu::CharString::append((icu::CharString *)v82, v79, v80, &v81);
      if (v13 && *v13)
      {
        __int128 v16 = icu::CharString::append((icu::CharString *)v82, 95, &v81);
        icu::StringPiece::StringPiece((icu::StringPiece *)&v77, v13);
        icu::CharString::append(v16, v77, v78, &v81);
      }

      if (v15 && *(_BYTE *)v15)
      {
        __int128 v17 = icu::CharString::append((icu::CharString *)v82, 95, &v81);
        icu::StringPiece::StringPiece((icu::StringPiece *)&v75, (const char *)v15);
        icu::CharString::append(v17, v75, v76, &v81);
      }

      if (*(int *)v8 > 0)
      {
        uint64_t v74 = 0;
        __int128 v18 = 1;
        goto LABEL_110;
      }

      int v19 = (const char *)uhash_get(*((void *)v10[9] + 1), (uint64_t)v82[0]);
      if (!v19)
      {
        __int128 v18 = 4;
        int v13 = v72;
        goto LABEL_110;
      }

      v71 = 0LL;
      int v20 = 0LL;
      uint64_t v21 = 0LL;
      char v22 = 0LL;
      int v77 = 0LL;
      uint64_t v38 = (char *)v19;
      if (!strchr(v19, 95))
      {
        v71 = 0LL;
        int v20 = 0LL;
        uint64_t v21 = 0LL;
        char v22 = 0LL;
        int v77 = v38;
        goto LABEL_150;
      }

      uint64_t v40 = icu::UMemory::operator new((icu::UMemory *)0x40, v39);
      if (v40)
      {
        uint64_t v41 = strlen(v38);
        *(void *)uint64_t v40 = v40 + 13;
        *(_DWORD *)(v40 + 8) = 40;
        *(_WORD *)(v40 + 12) = 0;
        *(_DWORD *)(v40 + 56) = 0;
        icu::CharString::append((icu::CharString *)v40, v38, v41, v8);
      }

      else if (*(int *)v8 <= 0)
      {
        *uint64_t v8 = U_MEMORY_ALLOCATION_ERROR;
      }

      int v79 = 0LL;
      icu::UVector::adoptElement(a5, (void *)v40, v8);
      if (*(int *)v8 >= 1)
      {
        sub_1807DDC3C((uint64_t *)&v79);
        v71 = 0LL;
        int v20 = 0LL;
        uint64_t v21 = 0LL;
        char v22 = 0LL;
LABEL_31:
        uint64_t v23 = &v77;
        goto LABEL_32;
      }

      uint64_t v38 = *(char **)v40;
      int v77 = v38;
      uint64_t v48 = strchr(v38, 95);
      *uint64_t v48 = 0;
      char v22 = v48 + 1;
      uint64_t v49 = strchr(v48 + 1, 95);
      int v50 = v49;
      if (v49)
      {
        uint64_t v51 = v49 - v22;
        *int v50 = 0;
      }

      else
      {
        uint64_t v51 = strlen(v22);
        int v50 = 0LL;
      }

      if (v51 != 4)
      {
        int v65 = v10;
        __int128 v55 = 0LL;
        __int128 v54 = v50;
        __int128 v56 = v22;
        goto LABEL_128;
      }

      uint64_t v52 = v50;
      if (!uprv_isASCIILetter(*v22))
      {
        uint64_t v61 = 0LL;
        __int128 v60 = 0LL;
        int v20 = (char *)v22;
        __int128 v56 = v52;
        goto LABEL_143;
      }

      int v20 = (char *)v52;
      if (!v52)
      {
        __int128 v56 = 0LL;
        v71 = 0LL;
        goto LABEL_149;
      }

      int v65 = v10;
      uint64_t v53 = strchr(v52, 95);
      if (v53) {
        break;
      }
      uint64_t v51 = strlen(v52);
      __int128 v60 = 0LL;
      __int128 v59 = 0LL;
      int v20 = 0LL;
      v71 = 0LL;
      __int128 v56 = v52;
      if ((v51 & 0xFFFFFFFFFFFFFFFELL) != 2) {
        goto LABEL_141;
      }
LABEL_149:
      uint64_t v62 = v56;
      sub_1807DDC3C((uint64_t *)&v79);
      uint64_t v21 = v62;
      if (!v38) {
        goto LABEL_31;
      }
LABEL_150:
      unsigned int v63 = v21;
      int v64 = strcmp(v38, "und");
      uint64_t v21 = v63;
      uint64_t v23 = v10;
      if (v64) {
        goto LABEL_31;
      }
LABEL_32:
      uint64_t v24 = *v23;
      int v77 = *v23;
      uint64_t v25 = v10[1];
      uint64_t v26 = v25;
      if (v22)
      {
        if (v25) {
          unint64_t v27 = v10[1];
        }
        else {
          unint64_t v27 = v22;
        }
        if (*v22) {
          uint64_t v26 = (char *)v27;
        }
        else {
          uint64_t v26 = v10[1];
        }
      }

      uint64_t v28 = v10;
      uint64_t v29 = v10[2];
      if (v21)
      {
        int v30 = *v21;
        if (v29) {
          int v31 = v29;
        }
        else {
          int v31 = v21;
        }
        if (v72) {
          uint64_t v32 = 0LL;
        }
        else {
          uint64_t v32 = v29;
        }
        if (v30) {
          unsigned int v33 = (char *)v31;
        }
        else {
          unsigned int v33 = (char *)v32;
        }
        if (!v20) {
          goto LABEL_56;
        }
      }

      else
      {
        if (v72) {
          unsigned int v33 = 0LL;
        }
        else {
          unsigned int v33 = v29;
        }
        if (!v20) {
          goto LABEL_56;
        }
      }

      if (v15) {
        int v34 = (char *)v15;
      }
      else {
        int v34 = v20;
      }
      if (*v20) {
        int v20 = v34;
      }
      else {
        int v20 = 0LL;
      }
LABEL_56:
      uint64_t v35 = *v28;
      if ((unint64_t)v24 | (unint64_t)*v28)
      {
        uint64_t v36 = v24 == 0LL;
        if (v35)
        {
          uint64_t v37 = 1;
        }

        else
        {
          uint64_t v36 = 0;
          uint64_t v37 = v24 == 0LL;
        }

        if (!v37 || v36 || strcmp(v35, v24)) {
          goto LABEL_101;
        }
      }

      if ((unint64_t)v25 | (unint64_t)v26)
      {
        uint64_t v42 = v25 != 0LL;
        if (v26)
        {
          uint64_t v42 = 0;
          int v43 = v25 == 0LL;
        }

        else
        {
          int v43 = 0;
        }

        if (v43 || v42 || strcmp(v25, v26)) {
          goto LABEL_101;
        }
      }

      if ((unint64_t)v29 | (unint64_t)v33
        && ((uint64_t v44 = v29 != 0LL, !v33) ? (v45 = 0) : (uint64_t v44 = 0, v45 = v29 == 0LL), v45 || v44 || strcmp(v29, v33))
        || v15 | (unint64_t)v20
        && ((int v46 = v15 != 0, !v20) ? (v47 = 0) : (int v46 = 0, v47 = v15 == 0), v47 || v46 || strcmp((const char *)v15, v20))
        || v71)
      {
LABEL_101:
        uint64_t v10 = v28;
        v28[1] = v26;
        v28[2] = v33;
        *uint64_t v28 = v24;
        if (v15)
        {
          __int16 v9 = a4;
          uint64_t v8 = (UErrorCode *)a6;
          int v13 = v72;
          if (v20 && *v20) {
            icu::UVector::setElementAt((uint64_t)v73, v20, v14);
          }
          else {
            icu::UVector::removeElementAt((uint64_t (**)(void))v73, v14);
          }
          uint64_t v74 = 1;
          __int128 v18 = 1;
          goto LABEL_109;
        }

        uint64_t v74 = 1;
        __int128 v18 = 1;
        __int16 v9 = a4;
      }

      else
      {
        __int128 v18 = 4;
        __int16 v9 = a4;
        uint64_t v10 = v28;
      }

      uint64_t v8 = (UErrorCode *)a6;
      int v13 = v72;
LABEL_109:
      uint64_t v11 = v70;
      uint64_t v12 = v69;
LABEL_110:
      if (BYTE4(v82[1])) {
        uprv_free(v82[0]);
      }
      if (v18 != 4)
      {
        uint64_t v6 = v74;
        return v6 & 1;
      }

      if (v11 == ++v14) {
        goto LABEL_2;
      }
    }

    __int128 v54 = v53;
    uint64_t v51 = v53 - v52;
    *__int128 v54 = 0;
    __int128 v55 = v22;
    __int128 v56 = v52;
LABEL_128:
    if ((v51 & 0xFFFFFFFFFFFFFFFELL) == 2)
    {
      if (!v54)
      {
        int v20 = 0LL;
        v71 = 0LL;
        char v22 = v55;
        uint64_t v10 = v65;
        goto LABEL_149;
      }

      __int128 v57 = v56;
      __int128 v58 = strchr(v54, 95);
      if (v58)
      {
        __int128 v59 = v58;
        uint64_t v51 = v58 - v54;
        *__int128 v59 = 0;
      }

      else
      {
        uint64_t v51 = strlen(v54);
        __int128 v59 = 0LL;
      }

      char v22 = v55;
      __int128 v60 = v57;
      __int128 v56 = v54;
    }

    else
    {
      __int128 v60 = 0LL;
      char v22 = v55;
      __int128 v59 = v54;
    }

    uint64_t v10 = v65;
LABEL_141:
    if (v51 < 4)
    {
      int v20 = 0LL;
    }

    else
    {
      uint64_t v61 = v22;
      int v20 = (char *)v56;
      __int128 v56 = v59;
LABEL_143:
      if (!v56)
      {
        v71 = 0LL;
        char v22 = v61;
        goto LABEL_148;
      }

      char v22 = v61;
    }

    v71 = v56;
LABEL_148:
    __int128 v56 = v60;
    goto LABEL_149;
  }

  if (a4 > 0)
  {
LABEL_14:
    *((_BYTE *)__dst + (int)v13) = 95;
    char v22 = (int)v13 + 1LL;
    memcpy((char *)__dst + v22, a3, a4);
    int v13 = (v22 + a4);
    goto LABEL_15;
  }

  if (a9)
  {
    WORD2(v28) = 0;
    LODWORD(v28) = 0;
    __src = (uint64_t *)uloc_getScript(a9, (char *)&v28, 6, a11);
    uint64_t v11 = *a11;
    if (*a11 > 0) {
      goto LABEL_2;
    }
    uint64_t v26 = (int)__src;
    if ((int)__src >= 1)
    {
      *((_BYTE *)__dst + (int)v13) = 95;
      unint64_t v27 = (int)v13 + 1LL;
      memcpy((char *)__dst + v27, &v28, __src);
      int v13 = (v26 + v27);
    }
  }

    if (v6 >= *((unsigned __int16 *)this + 4))
    {
      uint64_t v11 = *(unsigned __int16 *)(*(void *)(v9 + 8) + 2LL * v10);
      if (!icu::Normalizer2Impl::norm16HasDecompBoundaryAfter(this, v11))
      {
        a3 = v7;
        if (!icu::Normalizer2Impl::norm16HasDecompBoundaryBefore(this, v11)) {
          continue;
        }
      }
    }

    return a3;
  }

  return a3;
}

    icu::UnicodeSet::~UnicodeSet(v6);
    icu::UMemory::operator delete(v15);
    goto LABEL_14;
  }

  __int128 v16 = v22;
  while (*(_DWORD *)(a1 + 20) < v16)
    sub_1807FFC38(a1);
  if (**(int **)(*(void *)(a1 + 8) + 16LL) <= 0)
  {
    __int128 v17 = sub_1807FF53C(a1, 0LL);
    __int128 v18 = *(void *)(a1 + 8);
    if (**(int **)(v18 + 16) <= 0)
    {
      int v19 = v17;
      *(_DWORD *)(v17 + 112) = v4;
      *(_DWORD *)(v17 + 116) = *(_DWORD *)(a1 + 20);
      (*(void (**)(void, uint64_t))(**(void **)(v18 + 32) + 24LL))(*(void *)(v18 + 32), v4);
      sub_1807FF734(a1, v19 + 48, v19, v6);
    }
  }

    icu::UnicodeSet::~UnicodeSet(v6);
    icu::UMemory::operator delete(v15);
    goto LABEL_14;
  }

  __int128 v16 = v22;
  while (*(_DWORD *)(a1 + 20) < v16)
    sub_1808016B8(a1);
  if (**(int **)(*(void *)(a1 + 8) + 16LL) <= 0)
  {
    __int128 v17 = sub_1808010D0(a1, 0LL);
    __int128 v18 = *(void *)(a1 + 8);
    if (**(int **)(v18 + 16) <= 0)
    {
      int v19 = v17;
      *(_DWORD *)(v17 + 112) = v4;
      *(_DWORD *)(v17 + 116) = *(_DWORD *)(a1 + 20);
      (*(void (**)(void, uint64_t))(**(void **)(v18 + 32) + 24LL))(*(void *)(v18 + 32), v4);
      sub_180801188(a1, v19 + 48, v19, v6);
    }
  }

  if ((v9 & 0x200) != 0) {
    return result;
  }
  if ((v6 & 2) != 0 && (v9 & 0x10) != 0)
  {
    uint64_t v11 = byte_1809F9E61[v9 & 0xF];
    if ((v9 & 0x100) != 0) {
      uint64_t v12 = (unsigned __int16)v8[2 * v11 + 1] | ((unsigned __int16)v8[2 * v11] << 16);
    }
    else {
      uint64_t v12 = (unsigned __int16)v8[v11];
    }
    if ((v9 & 0x400) != 0) {
      uint64_t v12 = -v12;
    }
    return (v12 + result);
  }

  else
  {
    if ((v9 & 2) != 0)
    {
      int v13 = 1;
    }

    else
    {
      if ((v9 & 1) == 0) {
        return result;
      }
      int v13 = 0;
    }

    __int128 v14 = byte_1809F9E61[~(-1 << v13) & v9];
    if ((v9 & 0x100) != 0) {
      return (unsigned __int16)v8[2 * v14 + 1] | ((unsigned __int16)v8[2 * v14] << 16);
    }
    else {
      return (unsigned __int16)v8[v14];
    }
  }

  *a3 = (unint64_t)v8;
  if ((a2 & 0x80000000) == 0)
  {
    if (result)
    {
      if (HIWORD(a2))
      {
        __int128 v15 = a2 & 0x3FF | 0xDC00;
        a2 = (a2 >> 10) - 10304;
        *(_WORD *)(result + 146) = v15;
        __int128 v14 = 2;
      }

      else
      {
        __int128 v14 = 1;
      }

      *(_WORD *)(result + 144) = a2;
      *(_BYTE *)(result + 93) = v14;
    }

    *a7 = 15;
  }

  return result;
}

    while ((unint64_t)v2 < v5 && (unint64_t)v4 < v6)
    {
      uint64_t v10 = *v2++;
      uint64_t v8 = v10;
      if (v10 > 0x7F)
      {
        if (v8 > 0x7FF)
        {
          if ((v8 & 0xF800) != 0xD800 || v7 == &unk_189714F08) {
            goto LABEL_27;
          }
          goto LABEL_23;
        }

        *uint64_t v4 = (v8 >> 6) | 0xC0;
        uint64_t v11 = v8 & 0x3F | 0x80;
        if ((unint64_t)(v4 + 1) >= v6)
        {
          *(_BYTE *)(v3 + 104) = v11;
          *(_BYTE *)(v3 + 91) = 1;
          *a2 = 15;
          ++v4;
        }

        else
        {
          v4[1] = v11;
          v4 += 2;
        }
      }

      else
      {
        *v4++ = v8;
      }
    }
  }

  result[4] = v4;
  result[2] = v2;
  return result;
}

  int v13 = icu::UMemory::operator new(v6, (icu::UMemory *)0x11040, (unint64_t)a2);
  if (!v13)
  {
    if (*a2 > 0) {
      return 0LL;
    }
    int v2 = 0LL;
    uint64_t v10 = 7;
LABEL_9:
    *a2 = v10;
    return v2;
  }

  int v2 = (void **)v13;
  sub_180855A1C((uint64_t)v13, v9, v8, a2);
  if (*a2 > 0) {
    goto LABEL_23;
  }
  __int128 v18 = 0;
  Range = ucptrie_getRange(a1, 0LL, 0, 0, 0LL, 0LL, (int *)&v18);
  if ((Range & 0x80000000) == 0)
  {
    __int128 v15 = Range;
    __int128 v16 = 0;
    do
    {
      if (v18 != v9)
      {
        if (v16 == v15) {
          sub_1808562D0((uint64_t)v2, v15, v18, a2);
        }
        else {
          sub_180856368((uint64_t)v2, v16, v15, v18, a2);
        }
      }

      __int128 v16 = v15 + 1;
      __int128 v15 = ucptrie_getRange(a1, v15 + 1, 0, 0, 0LL, 0LL, (int *)&v18);
    }

    while ((v15 & 0x80000000) == 0);
  }

  if (*a2 >= 1)
  {
LABEL_23:
    __int128 v17 = sub_180855C30(v2);
    icu::UMemory::operator delete(v17);
    return 0LL;
  }

  return v2;
}

  uint64_t v8 = (_DWORD *)*((void *)this + 10);
  if (v8 && !v8[2])
  {
    (*(void (**)(_DWORD *))(*(void *)v8 + 8LL))(v8);
    *((void *)this + 10) = 0LL;
  }

  return this;
}

  uint64_t v8 = v10;
  if (a3 < 0) {
    goto LABEL_14;
  }
LABEL_6:
  uint64_t v11 = v9 - v8;
  if (v11 >= a3)
  {
    if (a4) {
      goto LABEL_8;
    }
LABEL_16:
    LOBYTE(v13) = v7 != 0;
    return (char)v13;
  }

  __int16 v9 = result + 10;
LABEL_14:
  if (a3 >= 1)
  {
    uint64_t v10 = &v9[2 * a2];
    __n128 result = (char *)(a4 + 2LL * a5);
    if (v10 != result) {
      return (char *)memmove(result, v10, 2LL * a3);
    }
  }

  return result;
}

  uint64_t v8 = a1 + 10;
LABEL_14:
  __int16 v9 = u_memchr((const UChar *)(v8 + 2LL * a3), a2, count);
  if (v9) {
    return (((unint64_t)v9 - v8) >> 1);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

  uint64_t v8 = (char *)this + 10;
LABEL_14:
  __int16 v9 = u_memchr32((const UChar *)&v8[2 * a3], a2, count);
  if (v9) {
    return ((unint64_t)((char *)v9 - v8) >> 1);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

  uint64_t v8 = (char *)this + 10;
LABEL_14:
  __int16 v9 = u_memrchr32((const UChar *)&v8[2 * a3], a2, count);
  if (v9) {
    return ((unint64_t)((char *)v9 - v8) >> 1);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

  uint64_t v7 = 0LL;
LABEL_14:
  a4 = v7;
LABEL_15:
  if ((v4 & 2) != 0) {
    uint64_t v8 = (char *)a2 + 10;
  }
  else {
    uint64_t v8 = (char *)*((void *)a2 + 3);
  }
  return icu::UnicodeString::doAppend(this, (uint64_t)v8, a3, a4);
}

        __int128 v14 = 0LL;
        goto LABEL_14;
      }
    }

    else
    {
      uint64_t v12 = v11 >> 5;
      if ((a2 & 0x80000000) == 0) {
        goto LABEL_6;
      }
    }

    int v13 = 0;
    goto LABEL_12;
  }

  return 0LL;
}

        *a4 = 15;
        return 1LL;
      }
    }

    else if (!a3)
    {
      goto LABEL_13;
    }

    __int16 v9 = 0LL;
    uint64_t v11 = 1;
    goto LABEL_12;
  }

  uint64_t v8 = *(void *)(a1 + 8);
  (*(void (**)(void *__return_ptr, uint64_t, int *))(*(void *)a1 + 80LL))(v14, a1, a4);
  return sub_180874618(v8, (uint64_t)v14, a2, a3, a4);
}

          uint64_t v3 = 0LL;
          goto LABEL_14;
        }

        *((_DWORD *)this + 1823) = *((_DWORD *)this + 1821);
        icu::CollationFastLatinBuilder::resetCEs(this);
        icu::CollationFastLatinBuilder::getCEs((uint64_t)this, a2, a3);
        if (icu::CollationFastLatinBuilder::encodeUniqueCEs((void **)this, a3))
        {
          if (*((_BYTE *)this + 7296)) {
            goto LABEL_13;
          }
          goto LABEL_11;
        }
      }
    }
  }

  return 0LL;
}

  else {
    int v13 = (unint64_t)&a6[a2];
  }
  if ((unint64_t)v9 < v13)
  {
    __int128 v14 = 0;
    while (1)
    {
      __int128 v15 = *v10++;
      __int128 v16 = v14 + v15;
      __int128 v17 = *a3++;
      __int128 v18 = v16 + v17 * a7;
      if (v18 > 9)
      {
        if ((v18 & 0x80000000) != 0)
        {
          int v19 = v18 + 100;
          int v20 = (26215 * ((v18 + 100) >> 1)) >> 17;
          *__int16 v9 = v19 - 10 * v20;
          __int128 v14 = v20 - 10;
          goto LABEL_25;
        }

        __int128 v14 = (26215 * (v18 >> 1)) >> 17;
        LOBYTE(v18) = v18 - 10 * v14;
      }

      else
      {
        __int128 v14 = 0;
      }

      *__int16 v9 = v18;
LABEL_25:
    }
  }

  __int128 v14 = 0;
LABEL_29:
  while ((unint64_t)v9 < v7)
  {
    if (v10 >= &a1[a2])
    {
      uint64_t v23 = *a3++;
      uint64_t v21 = v23 * a7;
    }

    else
    {
      char v22 = *v10++;
      uint64_t v21 = v22;
    }

    uint64_t v24 = v21 + v14;
    if (v24 > 9)
    {
      if ((v24 & 0x80000000) != 0)
      {
        uint64_t v25 = v24 + 100;
        uint64_t v26 = (26215 * ((v24 + 100) >> 1)) >> 17;
        *__int16 v9 = v25 - 10 * v26;
        __int128 v14 = v26 - 10;
        goto LABEL_38;
      }

      __int128 v14 = (26215 * (v24 >> 1)) >> 17;
      LOBYTE(v24) = v24 - 10 * v14;
    }

    else
    {
      __int128 v14 = 0;
    }

    *__int16 v9 = v24;
LABEL_38:
    ++v9;
  }

  if (v14)
  {
    if (v14 <= 0)
    {
      unint64_t v27 = 1;
      for (uint64_t i = a6; (unint64_t)i < v7; ++i)
      {
        uint64_t v29 = v27 - *i;
        int v30 = v29 + 9;
        int v31 = v29 < 0;
        unint64_t v27 = v29 + 9 > 9;
        if (!(v31 ^ __OFSUB__(v30, 9) | (v30 == 9))) {
          LOBYTE(v30) = 0;
        }
        *uint64_t i = v30;
      }

      uint64_t v32 = v27 + ~v14;
      if (v32)
      {
        *uint64_t i = v32;
        LODWORD(i) = (_DWORD)i + 1;
      }

      LODWORD(v9) = (_DWORD)a6;
      LODWORD(a6) = (_DWORD)i;
    }

    else
    {
      *__int16 v9 = v14;
      LODWORD(v9) = (_DWORD)v9 + 1;
    }
  }

  return ((_DWORD)v9 - (_DWORD)a6);
}

      if (++v11 == v6)
      {
        *a5 = a3;
        return a1[1];
      }
    }

    for (uint64_t i = 0LL; i != 20; ++i)
    {
    }

  if ((int)result < v6 - 1)
  {
    uint64_t v10 = (a3 << 8) | (a2 << 16) | a4;
    if ((a3 | a4) <= 1) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = -1;
    }
    do
    {
      uint64_t v12 = result + v6;
      int v13 = v12 >> 1;
      __int128 v14 = *(_DWORD *)(v8 + 4LL * v13);
      if (a2 > -32769)
      {
        if (a2 < 0x8000)
        {
          __int128 v16 = v10 <= v14;
          __int128 v15 = v10 != v14;
          if (!v16) {
            __int128 v15 = -1;
          }
        }

        else
        {
          __int128 v15 = -1;
        }
      }

      else if (v14 == -2147483391)
      {
        __int128 v15 = v11;
      }

      else
      {
        __int128 v15 = 1;
      }

      if (v15 < 1)
      {
        __n128 result = v13;
      }

      else
      {
        uint64_t v6 = v13;
        __n128 result = result;
      }
    }

    while ((int)result < v6 - 1);
  }

  return result;
}

            this = icu::UnicodeString::append(v3, v9);
            goto LABEL_14;
          }

    *a2 = v6 - v4;
    v2 += v4;
  }

  return v2;
}

  if ((v11 & 0x8000) != 0) {
    int v13 = *(_DWORD *)(a1 + 20);
  }
  if (v13 < 2)
  {
    __int128 v16 = 65279;
  }

  else
  {
    if ((v11 & 2) != 0) {
      __int128 v15 = a1 + 18;
    }
    else {
      __int128 v15 = *(void *)(a1 + 32);
    }
    __int128 v16 = *(unsigned __int16 *)(v15 + 2) - 256;
  }

  __int128 v17 = 0;
  *(_DWORD *)(a1 + 76) = v16;
  *(_DWORD *)(a1 + 80) = -1;
LABEL_49:
  *(_DWORD *)(a1 + 84) = v17;
  return a1;
}

        sub_18093DF90(v5, v6, this);
      }

      else
      {
        sub_18093DF90(*(__int16 *)(a1 + 76), v6, this);
        if (*(_DWORD *)(a1 + 80)) {
          uint64_t v7 = 115;
        }
        else {
          uint64_t v7 = 114;
        }
        uint64_t v8 = v7;
        icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v8, 0, 1LL);
      }

  if (v10) {
    ures_close(v10);
  }
  return v12;
}

      ++v14;
    }

    while (v8 != v14);
    char v22 = (char *)v8;
    uint64_t v23 = v10;
    uint64_t v24 = (icu::TimeZoneRule *)v67;
    if (!v67)
    {
      while (*v23++)
      {
        if (!--v22) {
          goto LABEL_58;
        }
      }
    }

    char v22 = *(char **)(v2 + 88);
    if (v22)
    {
      uint64_t v26 = 0;
      LOBYTE(v22) = 1;
      do
      {
        unint64_t v27 = (char)v22;
        uint64_t v28 = icu::UVector::elementAt(*(icu::UVector **)(v2 + 88), v26);
        if (((*(uint64_t (**)(uint64_t, icu::TimeZoneRule *))(*(void *)v28 + 32LL))(v28, v6) & 1) == 0)
        {
          uint64_t v29 = icu::UVector::elementAt(*(icu::UVector **)(v2 + 88), v26);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void, double *, double))(*(void *)v29 + 72LL))( v29,  RawOffset,  DSTSavings,  0LL,  &v69,  v7))
          {
            if (v69 < v15)
            {
              __int128 v15 = v69;
              uint64_t v24 = (icu::TimeZoneRule *)v29;
            }
          }
        }

        char v22 = 0LL;
        uint64_t v26 = 1;
      }

      while ((v27 & 1) != 0);
    }

    if (v24)
    {
      int v30 = *(uint64_t **)(v2 + 96);
      if (!v30)
      {
        int v31 = icu::UMemory::operator new(0LL, (icu::UMemory *)0x28, v13);
        if (v31)
        {
          uint64_t v32 = icu::UVector::UVector((uint64_t)v31, (uint64_t)sub_180962864, 0LL, (int *)a2);
          int v30 = (uint64_t *)*(unsigned int *)a2;
          if ((int)v30 < 1)
          {
            *(void *)(v2 + 96) = v32;
            goto LABEL_51;
          }

          (*(void (**)(uint64_t))(*(void *)v32 + 8LL))(v32);
LABEL_96:
          icu::UnicodeString::~UnicodeString((void *)v34, (icu::UnicodeString *)&v70);
          icu::UnicodeString::~UnicodeString(v66, (icu::UnicodeString *)&v75);
          goto LABEL_97;
        }

        int v34 = *(unsigned int *)a2;
LABEL_94:
        int v34 = 7LL;
        *a2 = U_MEMORY_ALLOCATION_ERROR;
        goto LABEL_96;
      }

  __int128 v15 = *((_DWORD *)this + 25);
LABEL_14:
  __int128 v16 = *((unsigned __int16 *)this + 16);
  if ((v16 & 0x11) != 0)
  {
    __int128 v17 = 0LL;
    if ((v16 & 0x8000) != 0) {
      goto LABEL_21;
    }
LABEL_19:
    __int128 v18 = v16 >> 5;
    goto LABEL_22;
  }

  if ((v16 & 2) != 0)
  {
    __int128 v17 = (const UChar *)this + 17;
    if ((v16 & 0x8000) == 0) {
      goto LABEL_19;
    }
  }

  else
  {
    __int128 v17 = (const UChar *)this[6];
    if ((v16 & 0x8000) == 0) {
      goto LABEL_19;
    }
  }

  __int128 v15 = *((_DWORD *)this + 25);
LABEL_14:
  __int128 v16 = *((unsigned __int16 *)this + 16);
  if ((v16 & 0x11) != 0)
  {
    __int128 v17 = 0LL;
    if ((v16 & 0x8000) != 0) {
      goto LABEL_21;
    }
LABEL_19:
    __int128 v18 = v16 >> 5;
    goto LABEL_22;
  }

  if ((v16 & 2) != 0)
  {
    __int128 v17 = (const UChar *)this + 17;
    if ((v16 & 0x8000) == 0) {
      goto LABEL_19;
    }
  }

  else
  {
    __int128 v17 = (const UChar *)this[6];
    if ((v16 & 0x8000) == 0) {
      goto LABEL_19;
    }
  }

          uint64_t v23 = *((_DWORD *)a4 + 2) - v7;
          if (v23 > (int)v39)
          {
            if (icu::MessageFormat::getArgTypeCount(v14))
            {
              icu::Formattable::operator=((uint64_t)v55, (uint64_t)v47);
              uint64_t v37 = 1;
            }

            else
            {
              uint64_t v37 = 0;
            }

            int v34 = *((_DWORD *)a4 + 2);
            uint64_t v36 = v6;
            uint64_t v39 = v23;
            uint64_t v35 = v38;
          }

          goto LABEL_18;
        }

    *(_DWORD *)(a1 + 232) = 3223600;
    return a1;
  }

  uint64_t v10 = 0;
  memset(&v11[1], 0, 56);
  v11[0] = (char *)&v11[1] + 5;
  LODWORD(v11[1]) = 40;
  v9[0] = 0LL;
  v9[1] = 0LL;
  icu::CharStringByteSink::CharStringByteSink(v9, (uint64_t)v11);
  ulocimp_addLikelySubtags(*(void *)(a1 + 48), v9, &v10);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v9);
  Country = uloc_getCountry((uint64_t)v11[0], (char *)(a1 + 232), 4, &v10);
  uint64_t v7 = v10 < 1 && Country < 4;
  if (BYTE4(v11[1])) {
    uprv_free(v11[0]);
  }
  if (!v7) {
    goto LABEL_13;
  }
  return a1;
}

    uint64_t Instance = 0LL;
    *a6 = U_ILLEGAL_ARGUMENT_ERROR;
    return Instance;
  }

  return 0LL;
}

      icu::FCDUIterCollationIterator::switchToBackward((uint64_t)this);
    }

    if (v4 != 1)
    {
      if (v4 >= 3)
      {
        uint64_t v8 = (uint64_t *)*((unsigned int *)this + 102);
        if ((_DWORD)v8)
        {
          uint64_t v10 = icu::UnicodeString::char32At(v8, (icu::FCDUIterCollationIterator *)((char *)this + 424), (int)v8 - 1);
          goto LABEL_31;
        }
      }

      goto LABEL_13;
    }

    uint64_t v5 = (*(uint64_t (**)(void))(*((void *)this + 49) + 80LL))();
    if ((v5 & 0x80000000) != 0)
    {
      *((_DWORD *)this + 102) = 0;
      *((void *)this + 50) = 2LL;
      return (uint64_t *)0xFFFFFFFFLL;
    }

    uint64_t v6 = (uint64_t *)v5;
    if (v5 < 0x300
      || !icu::CollationFCD::lcccIndex[(unint64_t)v5 >> 5]
      || ((icu::CollationFCD::lcccBits[icu::CollationFCD::lcccIndex[(unint64_t)v5 >> 5]] >> v5) & 1) == 0)
    {
      return v6;
    }

    if ((v5 & 0x1FFF01) != 0xF01) {
      break;
    }
    uint64_t v7 = -1;
LABEL_17:
    (*(void (**)(void))(*((void *)this + 49) + 72LL))();
    if ((v7 & 0x80000000) == 0) {
      (*(void (**)(void))(*((void *)this + 49) + 72LL))();
    }
  }

  __int16 v9 = (*(uint64_t (**)(void))(*((void *)this + 49) + 80LL))();
  uint64_t v7 = v9;
  if (v9 >= 192
    && icu::CollationFCD::tcccIndex[(unint64_t)v9 >> 5]
    && ((icu::CollationFCD::tcccBits[icu::CollationFCD::tcccIndex[(unint64_t)v9 >> 5]] >> v9) & 1) != 0)
  {
    goto LABEL_17;
  }

  if (v9 < 0) {
    uint64_t v7 = (*(uint64_t (**)(void))(*((void *)this + 49) + 80LL))();
  }
  if (v7 >> 10 == 54) {
    return (uint64_t *)(v6 + (v7 << 10) - 56613888);
  }
LABEL_28:
  if ((v7 & 0x80000000) == 0) {
    (*(void (**)(void))(*((void *)this + 49) + 72LL))();
  }
  return v6;
}

    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v13 = (char)v13;
    while ((int)v16 < v5)
    {
      uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 80LL))(a2, v16);
      __n128 result = u_digit(v25, v13);
      if ((result & 0x80000000) != 0) {
        goto LABEL_22;
      }
      if (v25 < 0x10000) {
        uint64_t v26 = 1;
      }
      else {
        uint64_t v26 = 2;
      }
      __int128 v16 = (v26 + v16);
      uint64_t v23 = result + v23 * v13;
      if (v15 == ++v24)
      {
        uint64_t v24 = v15;
        goto LABEL_22;
      }
    }

    if (a4)
    {
      LODWORD(v4) = v37;
      break;
    }

uint64_t sub_1807D1F5C(uint64_t a1, icu::Locale::Iterator *a2, void *a3, int a4, int *a5, int *a6)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  if (*a6 > 0) {
    return 0LL;
  }
  __int128 v24 = 0u;
  v23[0] = 0u;
  v23[1] = 0x1FFFFFFFFuLL;
  LOBYTE(v24) = 1;
  DWORD2(v24) = 0;
  uint64_t v25 = 0LL;
  uint64_t v26 = 0LL;
  uint64_t v13 = uenum_next(a1, 0LL, a6);
  if (v13)
  {
    __int128 v14 = (const char *)v13;
    while (1)
    {
      __int128 v39 = 0u;
      __int128 v40 = 0u;
      __int128 v37 = 0u;
      __int128 v38 = 0u;
      __int128 v35 = 0u;
      __int128 v36 = 0u;
      __int128 v33 = 0u;
      __int128 v34 = 0u;
      __int128 v31 = 0u;
      __int128 v32 = 0u;
      __int128 v29 = 0u;
      __int128 v30 = 0u;
      __int128 v27 = 0u;
      __int128 v28 = 0u;
      icu::Locale::Locale((icu::Locale *)&v27, v14, 0LL, 0LL, 0LL);
      if (BYTE8(v40)) {
        break;
      }
      icu::LocaleMatcher::Builder::addSupportedLocale((icu::UVector **)v23, (const icu::Locale *)&v27);
      icu::Locale::~Locale((icu::Locale *)&v27);
      __int128 v14 = (const char *)uenum_next(a1, 0LL, a6);
      if (!v14) {
        goto LABEL_7;
      }
    }

    *a6 = 1;
    icu::Locale::~Locale((icu::Locale *)&v27);
    uint64_t v6 = 0LL;
  }

  else
  {
LABEL_7:
    *(void *)&__int128 v33 = 0LL;
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    if (*a6 <= 0 && SLODWORD(v23[0]) >= 1) {
      *a6 = v23[0];
    }
    icu::LocaleMatcher::LocaleMatcher( (icu::LocaleMatcher *)&v27,  (const icu::LocaleMatcher::Builder *)v23,  (UErrorCode *)a6);
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    icu::LocaleMatcher::getBestMatchResult((icu::LocaleMatcher *)&v27, a2, (UErrorCode *)a6, (uint64_t)&v21);
    if (*a6 <= 0)
    {
      if ((v22 & 0x80000000) != 0)
      {
        uint64_t v17 = 0LL;
        if (a5) {
          *a5 = 0;
        }
      }

      else
      {
        if (a5)
        {
          uint64_t v15 = *((void *)&v21 + 1);
          else {
            int v16 = 2;
          }
          *a5 = v16;
        }

        else
        {
          uint64_t v15 = *((void *)&v21 + 1);
        }

        __int128 v18 = *(const char **)(v15 + 40);
        size_t v19 = strlen(v18);
        uint64_t v17 = v19;
      }

      uint64_t v6 = u_terminateChars((uint64_t)a3, a4, v17, a6);
    }

    else
    {
      uint64_t v6 = 0LL;
    }

    if (BYTE8(v22) && (void)v21) {
      (*(void (**)(void))(*(void *)v21 + 8LL))(v21);
    }
    icu::LocaleMatcher::~LocaleMatcher((icu::LocaleMatcher *)&v27);
  }

  icu::LocaleMatcher::Builder::~Builder((icu::LocaleMatcher::Builder *)v23);
  return v6;
}

void sub_1807D21C8(uint64_t a1)
{
  *(void *)a1 = off_18970BBA8;
  icu::Locale::~Locale((icu::Locale *)(a1 + 24));
  icu::Locale::Iterator::~Iterator((icu::Locale::Iterator *)a1);
}

uint64_t uloc_acceptLanguageFromHTTP(void *a1, int a2, int *a3, char *__s, uint64_t a5, int *a6)
{
  if (*a6 <= 0)
  {
    if (a1)
    {
      if (a2 < 0) {
        goto LABEL_10;
      }
    }

    else if (a2)
    {
      goto LABEL_10;
    }

    if (__s && a5)
    {
      memset(v15, 0, sizeof(v15));
      icu::StringPiece::StringPiece((icu::StringPiece *)v14, __s);
      icu::LocalePriorityList::LocalePriorityList(v15, v14[0], v14[1], a6);
      v13[0] = &unk_18970BB60;
      v13[1] = v15;
      v13[2] = 0LL;
      _OWORD v13[3] = (DWORD2(v15[0]) - HIDWORD(v15[0]));
      uint64_t v6 = sub_1807D1F5C(a5, (icu::Locale::Iterator *)v13, a1, a2, a3, a6);
      icu::Locale::Iterator::~Iterator((icu::Locale::Iterator *)v13);
      icu::LocalePriorityList::~LocalePriorityList((icu::LocalePriorityList *)v15);
      return v6;
    }

void sub_1807D22F8(icu::Locale::Iterator *a1)
{
}

BOOL sub_1807D230C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 20) < *(_DWORD *)(a1 + 24);
}

uint64_t sub_1807D231C(uint64_t a1)
{
  do
  {
    int v2 = *(icu::LocalePriorityList **)(a1 + 8);
    int v3 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v3 + 1;
    uint64_t result = icu::LocalePriorityList::localeAt(v2, v3);
  }

  while (!result);
  ++*(_DWORD *)(a1 + 20);
  return result;
}

void sub_1807D235C(uint64_t a1)
{
  *(void *)a1 = off_18970BBA8;
  icu::Locale::~Locale((icu::Locale *)(a1 + 24));
  icu::Locale::Iterator::~Iterator((icu::Locale::Iterator *)a1);
  icu::UMemory::operator delete(v2);
}

BOOL sub_1807D2390(uint64_t a1)
{
  return *(void *)(a1 + 8) != *(void *)(a1 + 16);
}

uint64_t sub_1807D23A0(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1 + 24;
  int v2 = *(const char ***)(a1 + 8);
  *(void *)(a1 + 8) = v2 + 1;
  icu::Locale::Locale((icu::Locale *)v5, *v2, 0LL, 0LL, 0LL);
  uint64_t v3 = icu::Locale::operator=(v1, (uint64_t)v5);
  icu::Locale::~Locale((icu::Locale *)v5);
  return v3;
}

uint64_t icu::LocalePriorityList::LocalePriorityList(uint64_t a1, unint64_t a2, int a3, UErrorCode *a4)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  *(void *)(a1 + 24) = 0LL;
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(_BYTE *)(a1 + 16) = 0;
  uint64_t v7 = (const char *)a2;
  uint64_t v8 = icu::UMemory::operator new((icu::UMemory *)0x150, a2);
  if (!v8)
  {
    *(void *)a1 = 0LL;
    int v29 = 7;
    goto LABEL_70;
  }

  *(void *)(v8 + 328) = 0LL;
  __int128 v9 = 0uLL;
  *(_OWORD *)(v8 + 248) = 0u;
  *(_OWORD *)(v8 + 232) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 296) = 0u;
  *(_OWORD *)(v8 + 312) = 0u;
  *(_OWORD *)(v8 + 264) = 0u;
  *(_OWORD *)(v8 + 280) = 0u;
  *(void *)uint64_t v8 = v8 + 16;
  uint64_t v10 = (unsigned __int8 *)&v7[a3];
  *(_DWORD *)(v8 + 8) = 20;
  *(void *)a1 = v8;
LABEL_4:
  __int128 v31 = (char *)v7;
  while (1)
  {
    if (v7 < (const char *)v10)
    {
      int64_t v11 = v10 - (unsigned __int8 *)v7;
      while (*v7 == 32)
      {
        ++v7;
        if (!--v11)
        {
          uint64_t v7 = (const char *)v10;
          break;
        }
      }
    }

    __int128 v31 = (char *)v7;
    if (*v7 == 44)
    {
      ++v7;
      goto LABEL_4;
    }

    LODWORD(icu::LocaleBuilder::setScript((uint64_t)this, v11, v12) = (_DWORD)v7;
    if (v7 < (const char *)v10)
    {
      int64_t v13 = v10 - (unsigned __int8 *)v7;
      uint64_t v12 = v7;
      while (1)
      {
        unsigned int v14 = *(unsigned __int8 *)v12;
        BOOL v15 = v14 > 0x3B;
        uint64_t v16 = (1LL << v14) & 0x800100100000000LL;
        if (!v15 && v16 != 0) {
          break;
        }
        ++v12;
        if (!--v13)
        {
          LODWORD(icu::LocaleBuilder::setScript((uint64_t)this, v11, v12) = (_DWORD)v10;
          break;
        }
      }
    }

    int v18 = (_DWORD)v12 - (_DWORD)v7;
    if ((_DWORD)v12 == (_DWORD)v7) {
      break;
    }
    uint64_t v36 = 0LL;
    v35[1] = v9;
    void v35[2] = v9;
    v35[0] = v9;
    __int128 v34 = (char *)v35 + 5;
    LODWORD(v35[0]) = 40;
    icu::CharString::append((icu::CharString *)&v34, v7, v18, a4);
    if (*(int *)a4 > 0)
    {
      int v19 = 1;
      goto LABEL_27;
    }

    __int128 v33 = 0u;
    memset(v32, 0, sizeof(v32));
    icu::Locale::Locale((icu::Locale *)v32, v34, 0LL, 0LL, 0LL);
    if (BYTE8(v33)) {
      goto LABEL_25;
    }
    int v20 = (unsigned __int8 *)&v31[v18];
    if (v20 < v10)
    {
      unint64_t v21 = v10 - (unsigned __int8 *)v31 - v18;
      while (*v20 == 32)
      {
        ++v20;
        if (!--v21)
        {
          int v20 = v10;
          break;
        }
      }
    }

    __int128 v31 = (char *)v20;
    if (v20 == v10)
    {
      int v27 = 1000;
LABEL_64:
      icu::LocalePriorityList::add((icu::LocalePriorityList *)a1, (const icu::Locale *)v32, v27, a4);
      int v19 = 3;
      goto LABEL_26;
    }

    if (*v20 == 59)
    {
      __int128 v22 = v20 + 1;
      if (v20 + 1 < v10)
      {
        int64_t v23 = v10 - v22;
        while (*v22 == 32)
        {
          ++v22;
          if (!--v23)
          {
            __int128 v22 = v10;
            break;
          }
        }
      }

      __int128 v31 = (char *)v22;
      if (v22 == v10 || *v22 != 113) {
        goto LABEL_25;
      }
      __int128 v24 = v22 + 1;
      if (v24 < v10)
      {
        int64_t v25 = v10 - v24;
        while (*v24 == 32)
        {
          ++v24;
          if (!--v25)
          {
            __int128 v24 = v10;
            break;
          }
        }
      }

      __int128 v31 = (char *)v24;
      if (v24 == v10) {
        goto LABEL_25;
      }
      if (*v24 != 61) {
        goto LABEL_25;
      }
      __int128 v31 = (char *)(v24 + 1);
      int v26 = sub_1807D284C((unint64_t *)&v31, v10);
      if (v26 < 0) {
        goto LABEL_25;
      }
      int v27 = v26;
      int v20 = (unsigned __int8 *)v31;
      if (v31 < (char *)v10)
      {
        __int128 v28 = (unsigned __int8 *)(v10 - (unsigned __int8 *)v31);
        while (*v20 == 32)
        {
          ++v20;
          if (!--v28)
          {
            int v20 = v10;
            break;
          }
        }
      }

      __int128 v31 = (char *)v20;
    }

    else
    {
      int v27 = 1000;
    }

    if (v20 == v10) {
      goto LABEL_64;
    }
    if (*v20 == 44)
    {
      icu::LocalePriorityList::add((icu::LocalePriorityList *)a1, (const icu::Locale *)v32, v27, a4);
      int v19 = 0;
      __int128 v31 = (char *)(v20 + 1);
      goto LABEL_26;
    }

uint64_t sub_1807D284C(unint64_t *a1, unsigned __int8 *a2)
{
  int v2 = (unsigned __int8 *)*a1;
  if (*a1 < (unint64_t)a2)
  {
    int64_t v3 = a2 - v2;
    while (*v2 == 32)
    {
      ++v2;
      if (!--v3)
      {
        int v2 = a2;
        break;
      }
    }
  }

  *a1 = (unint64_t)v2;
  if (v2 == a2) {
    return 0xFFFFFFFFLL;
  }
  int v4 = *v2;
  uint64_t v5 = (1000 * v4 - 48000);
  *a1 = (unint64_t)(v2 + 1);
  if (v2 + 1 != a2 && v2[1] == 46)
  {
    uint64_t v7 = v2 + 2;
    *a1 = (unint64_t)v7;
    if (v7 != a2)
    {
      int v8 = 100;
      do
      {
        unsigned int v9 = (*v7 - 48);
        int v10 = v9 <= 4 ? v5 : (int)v5 + 1;
        if (v8)
        {
          int v10 = v5;
          int v11 = v8;
        }

        else
        {
          int v11 = -1;
        }

        LODWORD(v5) = v5 + v8 * v9;
        if (v8 >= 1)
        {
          v8 /= 0xAu;
        }

        else
        {
          LODWORD(v5) = v10;
          int v8 = v11;
        }

        *a1 = (unint64_t)++v7;
      }

      while (v7 != a2);
    }

    else {
      return v5;
    }
  }

  return v5;
}

uint64_t icu::LocalePriorityList::add( icu::LocalePriorityList *this, const icu::Locale *a2, int a3, UErrorCode *a4)
{
  int v10 = (int32x2_t *)*((void *)this + 3);
  if (v10) {
    goto LABEL_5;
  }
  if (a3 < 1) {
    return 1LL;
  }
  int v10 = uhash_open((uint64_t)icu::Locale::hashCode, (uint64_t)sub_1807D2CB0, (uint64_t)uhash_compareLong, (int *)a4);
  *((void *)this + 3) = v10;
  if (*(int *)a4 <= 0)
  {
LABEL_5:
    BOOL v24 = 0;
    int v11 = uhash_getiAndFound((uint64_t)v10, (uint64_t)a2, &v24);
    if (v24)
    {
      uint64_t v13 = **(void **)this + 16LL * v11;
      uint64_t v14 = *(void *)v13;
      *(void *)uint64_t v13 = 0LL;
      *(_DWORD *)(v13 + 8) = 0;
      ++*((_DWORD *)this + 3);
      if (a3 <= 0)
      {
        uhash_removei(*((void *)this + 3), (uint64_t)a2);
        uint64_t v4 = 1LL;
        goto LABEL_36;
      }

      if (v14) {
        goto LABEL_8;
      }
LABEL_30:
      int64_t v23 = icu::Locale::clone(a2, v12);
      uint64_t v14 = (uint64_t)v23;
      if (v23 && (!*((_BYTE *)v23 + 216) || *((_BYTE *)a2 + 216)))
      {
LABEL_8:
        signed int v15 = *((_DWORD *)this + 2);
        uint64_t v16 = *(void *)this;
        if (v15 == *(_DWORD *)(*(void *)this + 8LL))
        {
          if (v15 >= 50) {
            int v17 = 4 * v15;
          }
          else {
            int v17 = 100;
          }
          if (v17 < 1 || (int v18 = uprv_malloc(16LL * v17)) == 0LL)
          {
            *a4 = U_MEMORY_ALLOCATION_ERROR;
LABEL_39:
            uint64_t v4 = 0LL;
LABEL_40:
            (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
            return v4;
          }

          int v19 = v18;
          if (v15 >= 1)
          {
            signed int v20 = *(_DWORD *)(v16 + 8);
            if (v20 >= v15) {
              signed int v20 = v15;
            }
            if (v20 >= v17) {
              signed int v20 = v17;
            }
            memcpy(v18, *(const void **)v16, 16LL * v20);
          }

          if (*(_BYTE *)(v16 + 12)) {
            uprv_free(*(void **)v16);
          }
          *(void *)uint64_t v16 = v19;
          *(_DWORD *)(v16 + 8) = v17;
          *(_BYTE *)(v16 + 12) = 1;
          signed int v15 = *((_DWORD *)this + 2);
        }

        uhash_putiAllowZero(*((void *)this + 3), v14, v15, (int *)a4);
        if (*(int *)a4 <= 0)
        {
          uint64_t v21 = *((int *)this + 2);
          uint64_t v22 = **(void **)this + 16 * v21;
          *(void *)uint64_t v22 = v14;
          *((_DWORD *)this + 2) = v21 + 1;
          *(_DWORD *)(v22 + 8) = a3;
          *(_DWORD *)(v22 + 12) = v21;
          return 1LL;
        }

        goto LABEL_39;
      }

      uint64_t v4 = 0LL;
      *a4 = U_MEMORY_ALLOCATION_ERROR;
LABEL_36:
      if (!v14) {
        return v4;
      }
      goto LABEL_40;
    }

    if (a3 > 0) {
      goto LABEL_30;
    }
    return 1LL;
  }

  return 0LL;
}

void icu::LocalePriorityList::sort(uint64_t **this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    uint64_t v3 = *((unsigned int *)this + 2);
    if ((int)v3 - *((_DWORD *)this + 3) >= 2)
    {
      if (*((_BYTE *)this + 16)) {
        uprv_sortArray(**this, v3, 16, sub_1807D2CC4, 0LL, 0, (int *)a2);
      }
    }
  }

void icu::LocalePriorityList::~LocalePriorityList(icu::LocalePriorityList *this)
{
  uint64_t v2 = *(void *)this;
  if (*(void *)this)
  {
    int v3 = *((_DWORD *)this + 2);
    if (v3 < 1) {
      goto LABEL_14;
    }
    uint64_t v4 = 0LL;
    for (uint64_t i = 0LL; i < v3; ++i)
    {
      uint64_t v6 = *(void *)(**(void **)this + v4);
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
        int v3 = *((_DWORD *)this + 2);
      }

      v4 += 16LL;
    }

    uint64_t v2 = *(void *)this;
    if (*(void *)this)
    {
LABEL_14:
      if (*(_BYTE *)(v2 + 12)) {
        uprv_free(*(void **)v2);
      }
      icu::UMemory::operator delete((void *)v2);
    }
  }

  uhash_close(*((_BYTE **)this + 3));
}

uint64_t icu::LocalePriorityList::localeAt(icu::LocalePriorityList *this, int a2)
{
  return *(void *)(**(void **)this + 16LL * a2);
}

uint64_t icu::LocalePriorityList::orphanLocaleAt(uint64_t **this, int a2)
{
  if (!*this) {
    return 0LL;
  }
  uint64_t v2 = **this;
  uint64_t v3 = 16LL * a2;
  uint64_t result = *(void *)(v2 + v3);
  *(void *)(v2 + v3) = 0LL;
  return result;
}

BOOL sub_1807D2CB0(uint64_t a1, uint64_t a2)
{
  return icu::Locale::operator==(a1, a2);
}

uint64_t sub_1807D2CC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 8);
  int v4 = *(_DWORD *)(a2 + 8);
  uint64_t result = (v3 - v4);
  if (v3 == v4) {
    return (*(_DWORD *)(a2 + 12) - *(_DWORD *)(a3 + 12));
  }
  return result;
}

uint64_t uprv_svc_hook()
{
  return 0LL;
}

void sub_1807D2CF0()
{
  int v0 = uloc_countAvailable();
  dword_18C534D08 = v0;
  if (v0)
  {
    uint64_t v2 = v0;
    if (is_mul_ok(v0, 0xE0uLL)) {
      uint64_t v3 = (224LL * v0) | 0x10;
    }
    else {
      uint64_t v3 = -1LL;
    }
    int v4 = (void *)icu::UMemory::operator new[]((icu::UMemory *)v3, v1);
    if (v4)
    {
      *int v4 = 224LL;
      v4[1] = v2;
      uint64_t v5 = (uint64_t)(v4 + 2);
      uint64_t v6 = 224 * v2;
      uint64_t v7 = (icu::Locale *)(v4 + 2);
      do
      {
        uint64_t v7 = (icu::Locale *)(icu::Locale::Locale(v7) + 224);
        v6 -= 224LL;
      }

      while (v6);
    }

    else
    {
      uint64_t v5 = 0LL;
    }

    qword_18C534D10 = v5;
    if (v5) {
      goto LABEL_13;
    }
LABEL_10:
    dword_18C534D08 = 0;
    goto LABEL_15;
  }

  if (!qword_18C534D10) {
    goto LABEL_10;
  }
LABEL_13:
  unint64_t v8 = dword_18C534D08;
  if (dword_18C534D08 >= 1)
  {
    do
    {
      unsigned int v9 = (icu::Locale *)(qword_18C534D10 + 224LL * (v8 - 1));
      Available = (char *)uloc_getAvailable((int)v8 - 1);
      icu::Locale::setFromPOSIXID(v9, Available);
    }

    while (v8-- > 1);
  }

uint64_t uloc_countAvailable()
{
  uint64_t v2 = &unk_18970B7E0;
  uint64_t v3 = 0LL;
  sub_1807D2F8C((int *)&v3);
  else {
    uint64_t v0 = 0LL;
  }
  icu::ErrorCode::~ErrorCode((icu::ErrorCode *)&v2);
  return v0;
}

uint64_t uloc_getAvailable(int a1)
{
  uint64_t v5 = &unk_18970B7E0;
  uint64_t v6 = 0LL;
  sub_1807D2F8C((int *)&v6);
  uint64_t v2 = 0LL;
  icu::ErrorCode::~ErrorCode((icu::ErrorCode *)&v5);
  return v2;
}

uint64_t sub_1807D2EB0()
{
  if (qword_18C534D10)
  {
    uint64_t v0 = (void *)(qword_18C534D10 - 16);
    uint64_t v1 = *(void *)(qword_18C534D10 - 8);
    if (v1)
    {
      uint64_t v2 = 224 * v1;
      uint64_t v3 = qword_18C534D10 - 224;
      do
      {
        icu::Locale::~Locale((icu::Locale *)(v3 + v2));
        v2 -= 224LL;
      }

      while (v2);
    }

    icu::UMemory::operator delete[](v0);
    qword_18C534D10 = 0LL;
  }

  dword_18C534D08 = 0;
  atomic_store(0, (unsigned int *)&unk_18C534D30);
  return 1LL;
}

uint64_t icu::Locale::getAvailableLocales(icu::Locale *this, int *a2)
{
  unsigned int v3 = atomic_load((unsigned int *)&unk_18C534D30);
  if (v3 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_18C534D30))
  {
    sub_1807D2CF0();
    icu::umtx_initImplPostInit((unsigned int *)&unk_18C534D30);
  }

  *(_DWORD *)this = dword_18C534D08;
  return qword_18C534D10;
}

void sub_1807D2F8C(int *a1)
{
  if (*a1 <= 0)
  {
    unsigned int v2 = atomic_load(&dword_18C534D38);
    if (v2 == 2 || !icu::umtx_initImplPreInit(&dword_18C534D38))
    {
      if (dword_18C534D3C >= 1) {
        *a1 = dword_18C534D3C;
      }
    }

    else
    {
      sub_180820C94(0xDu, (uint64_t)sub_1807D3128);
      uint64_t v3 = ures_openDirect(0LL, (uint64_t)"res_index", (uint64_t)a1);
      int v4 = &off_18970BC10;
      ures_getAllItemsWithFallback(v3, "", (uint64_t)&v4, a1);
      icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v4);
      if (v3) {
        ures_close(v3);
      }
      dword_18C534D3C = *a1;
      icu::umtx_initImplPostInit(&dword_18C534D38);
    }
  }

_OWORD *uloc_openAvailableByType(unsigned int a1, int *a2)
{
  if (*a2 > 0) {
    return 0LL;
  }
  if (a1 >= 3)
  {
    int v4 = 1;
LABEL_4:
    *a2 = v4;
    return 0LL;
  }

  sub_1807D2F8C(a2);
  if (*a2 > 0) {
    return 0LL;
  }
  uint64_t v7 = icu::UMemory::operator new((icu::UMemory *)0x80, v5);
  if (!v7)
  {
    if (*a2 > 0) {
      return 0LL;
    }
    int v4 = 7;
    goto LABEL_4;
  }

  unint64_t v8 = (_DWORD *)icu::StringEnumeration::StringEnumeration(v7);
  *(void *)unint64_t v8 = &off_18970BC58;
  v8[29] = a1;
  v8[30] = 0;
  if (*a2 > 0)
  {
    (*(void (**)(_DWORD *))(*(void *)v8 + 8LL))(v8);
    return 0LL;
  }

  return uenum_openFromStringEnumeration((uint64_t)v8, a2);
}

uint64_t sub_1807D3128()
{
  qword_18C534D20 = 0LL;
  dword_18C534D18[0] = 0;
  uprv_free((void *)qword_18C534D28);
  qword_18C534D28 = 0LL;
  dword_18C534D1C = 0;
  atomic_store(0, &dword_18C534D38);
  return 1LL;
}

void sub_1807D3184(icu::ResourceSink *a1)
{
}

void *sub_1807D3198(uint64_t a1, char *a2, icu::ResourceValue *a3, uint64_t a4, int *a5)
{
  uint64_t v16 = 0LL;
  __s1 = a2;
  memset(v15, 0, sizeof(v15));
  uint64_t result = (*(void *(**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(void *)a3 + 88LL))( v15,  a3,  a5);
  if (*a5 <= 0)
  {
    uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v15, 0, (const char **)&__s1, a3);
    if ((_DWORD)result)
    {
      int v8 = 0;
      do
      {
        unsigned int v9 = __s1;
        if (!strcmp(__s1, "InstalledLocales"))
        {
          uint64_t v10 = 0LL;
        }

        else
        {
          if (strcmp(v9, "AliasLocales")) {
            goto LABEL_14;
          }
          uint64_t v10 = 1LL;
        }

        uint64_t v14 = 0LL;
        memset(v13, 0, sizeof(v13));
        uint64_t result = (*(void *(**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(void *)a3 + 88LL))( v13,  a3,  a5);
        if (*a5 > 0) {
          return result;
        }
        uint64_t v11 = (int)v14;
        dword_18C534D18[v10] = v14;
        uint64_t result = uprv_malloc(8 * v11);
        qword_18C534D20[v10] = (uint64_t)result;
        if (!result)
        {
          *a5 = 7;
          return result;
        }

        if (icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v13, 0, (const char **)&__s1, a3))
        {
          uint64_t v12 = 0LL;
          do
            *(void *)(qword_18C534D20[v10] + 8 * v12++) = __s1;
          while (icu::ResourceTable::getKeyAndValue( (icu::ResourceTable *)v13,  v12,  (const char **)&__s1,  a3));
        }

void sub_1807D3338(icu::StringEnumeration *a1)
{
}

uint64_t sub_1807D334C(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 116);
  if ((_DWORD)v1 == 2) {
    return (dword_18C534D1C + dword_18C534D18[0]);
  }
  else {
    return dword_18C534D18[v1];
  }
}

uint64_t sub_1807D337C(uint64_t a1, _DWORD *a2)
{
  int v4 = *(_DWORD *)(a1 + 116);
  int v3 = *(_DWORD *)(a1 + 120);
  *(_DWORD *)(a1 + 120) = v3 + 1;
  if (v4 == 2)
  {
    int v5 = dword_18C534D18[0];
    int v4 = v3 >= dword_18C534D18[0];
    if (v3 < dword_18C534D18[0]) {
      int v5 = 0;
    }
    v3 -= v5;
  }

  if (v3 >= dword_18C534D18[v4])
  {
    uint64_t v7 = 0LL;
    if (a2)
    {
      int v8 = 0;
      goto LABEL_10;
    }
  }

  else
  {
    uint64_t v6 = qword_18C534D20[v4];
    uint64_t v7 = *(void *)(v6 + 8LL * v3);
    if (a2)
    {
      int v8 = strlen(*(const char **)(v6 + 8LL * v3));
LABEL_10:
      *a2 = v8;
    }
  }

  return v7;
}

uint64_t sub_1807D3410(uint64_t result)
{
  *(_DWORD *)(result + 120) = 0;
  return result;
}

uint64_t icu::LocaleBased::getLocale@<X0>( const char **a1@<X0>, int a2@<W1>, int *a3@<X2>, icu::Locale *a4@<X8>)
{
  if (*a3 <= 0)
  {
    if (a2)
    {
      if (a2 == 1)
      {
        uint64_t v6 = *a1;
      }

      else
      {
        uint64_t v6 = 0LL;
        *a3 = 1;
      }
    }

    else
    {
      uint64_t v6 = a1[1];
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = "";
  }
  return icu::Locale::Locale(a4, v7, 0LL, 0LL, 0LL);
}

uint64_t icu::LocaleBased::getLocaleID(void *a1, int a2, int *a3)
{
  if (*a3 > 0) {
    return 0LL;
  }
  if (!a2) {
    return a1[1];
  }
  if (a2 == 1) {
    return *a1;
  }
  uint64_t result = 0LL;
  *a3 = 1;
  return result;
}

char *icu::LocaleBased::setLocaleIDs(char *this, const char *a2, const char *__src)
{
  int v4 = (char **)this;
  if (a2)
  {
    this = strncpy(*(char **)this, a2, 0x9DuLL);
    (*v4)[156] = 0;
  }

  if (__src)
  {
    this = strncpy(v4[1], __src, 0x9DuLL);
    v4[1][156] = 0;
  }

  return this;
}

char *icu::LocaleBased::setLocaleIDs(char **a1, uint64_t a2, uint64_t a3)
{
  return strcpy(a1[1], *(const char **)(a3 + 40));
}

icu::UnicodeString *icu::Locale::getDisplayLanguage(icu::Locale *this, icu::UnicodeString *a2)
{
  Default = icu::Locale::getDefault(this);
  return icu::Locale::getDisplayLanguage(this, (char **)Default, a2);
}

icu::UnicodeString *icu::Locale::getDisplayLanguage(icu::Locale *this, char **a2, icu::UnicodeString *a3)
{
  int v18 = 0;
  Buffer = (UChar *)icu::UnicodeString::getBuffer(a3, 157);
  if (Buffer)
  {
    if ((*((_WORD *)a3 + 4) & 2) != 0) {
      int v7 = 27;
    }
    else {
      int v7 = *((_DWORD *)a3 + 4);
    }
    int DisplayLanguage = uloc_getDisplayLanguage(*((void *)this + 5), a2[5], Buffer, v7, &v18);
    int v9 = DisplayLanguage;
    if (v18 <= 0) {
      int v10 = DisplayLanguage;
    }
    else {
      int v10 = 0;
    }
    icu::UnicodeString::releaseBuffer((uint64_t)a3, v10);
    if (v18 != 15) {
      return a3;
    }
    uint64_t v11 = (UChar *)icu::UnicodeString::getBuffer(a3, v9);
    if (v11)
    {
      int v18 = 0;
      if ((*((_WORD *)a3 + 4) & 2) != 0) {
        int v12 = 27;
      }
      else {
        int v12 = *((_DWORD *)a3 + 4);
      }
      int v13 = uloc_getDisplayLanguage(*((void *)this + 5), a2[5], v11, v12, &v18);
      if (v18 <= 0) {
        int v14 = v13;
      }
      else {
        int v14 = 0;
      }
      icu::UnicodeString::releaseBuffer((uint64_t)a3, v14);
      return a3;
    }
  }

  unsigned int v15 = *((unsigned __int16 *)a3 + 4);
  if ((v15 & 1) != 0)
  {
    icu::UnicodeString::unBogus((uint64_t)a3);
  }

  else
  {
    if ((v15 & 0x8000u) == 0) {
      unsigned int v16 = v15 >> 5;
    }
    else {
      unsigned int v16 = *((_DWORD *)a3 + 3);
    }
    if (v16) {
      *((_WORD *)a3 + 4) &= 0x1Fu;
    }
  }

  return a3;
}

uint64_t uloc_getDisplayLanguage(uint64_t a1, char *a2, UChar *a3, int a4, int *a5)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (!a5 || *a5 > 0) {
    return 0LL;
  }
  if (a4 < 0
    || !a3 && a4
    || (bzero(v13, 0x274uLL), int v12 = 0, Language = uloc_getLanguage(a1, v13, 628, &v12), v12 > 0)
    || v12 == -124)
  {
    uint64_t result = 0LL;
    *a5 = 1;
  }

  else if (Language)
  {
    return sub_1807D4FA8("icudt74l-lang", a2, "Languages", 0LL, v13, v13, a3, a4, a5);
  }

  else
  {
    return u_terminateUChars((uint64_t)a3, a4, 0LL, a5);
  }

  return result;
}

icu::UnicodeString *icu::Locale::getDisplayScript(icu::Locale *this, icu::UnicodeString *a2)
{
  Default = icu::Locale::getDefault(this);
  return icu::Locale::getDisplayScript(this, (char **)Default, a2);
}

icu::UnicodeString *icu::Locale::getDisplayScript(icu::Locale *this, char **a2, icu::UnicodeString *a3)
{
  int v18 = 0;
  Buffer = (UChar *)icu::UnicodeString::getBuffer(a3, 157);
  if (Buffer)
  {
    if ((*((_WORD *)a3 + 4) & 2) != 0) {
      int v7 = 27;
    }
    else {
      int v7 = *((_DWORD *)a3 + 4);
    }
    Displayuint64_t Script = uloc_getDisplayScript(*((void *)this + 5), a2[5], Buffer, v7, &v18);
    int v9 = DisplayScript;
    if (v18 <= 0) {
      int v10 = DisplayScript;
    }
    else {
      int v10 = 0;
    }
    icu::UnicodeString::releaseBuffer((uint64_t)a3, v10);
    if (v18 != 15) {
      return a3;
    }
    uint64_t v11 = (UChar *)icu::UnicodeString::getBuffer(a3, v9);
    if (v11)
    {
      int v18 = 0;
      if ((*((_WORD *)a3 + 4) & 2) != 0) {
        int v12 = 27;
      }
      else {
        int v12 = *((_DWORD *)a3 + 4);
      }
      int v13 = uloc_getDisplayScript(*((void *)this + 5), a2[5], v11, v12, &v18);
      if (v18 <= 0) {
        int v14 = v13;
      }
      else {
        int v14 = 0;
      }
      icu::UnicodeString::releaseBuffer((uint64_t)a3, v14);
      return a3;
    }
  }

  unsigned int v15 = *((unsigned __int16 *)a3 + 4);
  if ((v15 & 1) != 0)
  {
    icu::UnicodeString::unBogus((uint64_t)a3);
  }

  else
  {
    if ((v15 & 0x8000u) == 0) {
      unsigned int v16 = v15 >> 5;
    }
    else {
      unsigned int v16 = *((_DWORD *)a3 + 3);
    }
    if (v16) {
      *((_WORD *)a3 + 4) &= 0x1Fu;
    }
  }

  return a3;
}

uint64_t uloc_getDisplayScript(uint64_t a1, char *a2, UChar *a3, int a4, int *a5)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  int v19 = 0;
  if (a4 < 0 || !a3 && a4) {
    goto LABEL_4;
  }
  bzero(v21, 0x274uLL);
  int v20 = 0;
  int Script = uloc_getScript(a1, v21, 628, &v20);
  if (v20 > 0 || v20 == -124)
  {
    uint64_t v10 = 0LL;
    int v19 = 1;
  }

  else
  {
    if (Script) {
      uint64_t v14 = sub_1807D4FA8("icudt74l-lang", a2, "Scripts%stand-alone", 0LL, v21, v21, a3, a4, &v19);
    }
    else {
      uint64_t v14 = u_terminateUChars((uint64_t)a3, a4, 0LL, &v19);
    }
    uint64_t v10 = v14;
  }

  int v11 = v19;
  if (a4 || v19 != 15)
  {
    if (v19 != -127) {
      goto LABEL_5;
    }
    if (!a5 || *a5 > 0) {
      return 0LL;
    }
    bzero(v21, 0x274uLL);
    int v20 = 0;
    int v17 = uloc_getScript(a1, v21, 628, &v20);
    if (v20 > 0 || v20 == -124)
    {
LABEL_4:
      uint64_t v10 = 0LL;
      int v11 = 1;
LABEL_5:
      *a5 = v11;
      return v10;
    }

    if (v17) {
      return sub_1807D4FA8("icudt74l-lang", a2, "Scripts", 0LL, v21, v21, a3, a4, a5);
    }
    else {
      return u_terminateUChars((uint64_t)a3, a4, 0LL, a5);
    }
  }

  else
  {
    if (a5 && *a5 <= 0)
    {
      bzero(v21, 0x274uLL);
      int v20 = 0;
      int v16 = uloc_getScript(a1, v21, 628, &v20);
      if (v20 > 0 || v20 == -124)
      {
        int v15 = 0;
        *a5 = 1;
      }

      else if (v16)
      {
        int v15 = sub_1807D4FA8("icudt74l-lang", a2, "Scripts", 0LL, v21, v21, a3, 0, a5);
      }

      else
      {
        int v15 = u_terminateUChars((uint64_t)a3, 0, 0LL, a5);
      }
    }

    else
    {
      int v15 = 0;
    }

    else {
      return v15;
    }
  }

icu::UnicodeString *icu::Locale::getDisplayCountry(icu::Locale *this, icu::UnicodeString *a2)
{
  Default = icu::Locale::getDefault(this);
  return icu::Locale::getDisplayCountry(this, (char **)Default, a2);
}

icu::UnicodeString *icu::Locale::getDisplayCountry(icu::Locale *this, char **a2, icu::UnicodeString *a3)
{
  int v18 = 0;
  Buffer = (UChar *)icu::UnicodeString::getBuffer(a3, 157);
  if (Buffer)
  {
    if ((*((_WORD *)a3 + 4) & 2) != 0) {
      uint64_t v7 = 27LL;
    }
    else {
      uint64_t v7 = *((unsigned int *)a3 + 4);
    }
    int DisplayCountry = uloc_getDisplayCountry(*((void *)this + 5), a2[5], Buffer, v7, &v18);
    int v9 = DisplayCountry;
    if (v18 <= 0) {
      int v10 = DisplayCountry;
    }
    else {
      int v10 = 0;
    }
    icu::UnicodeString::releaseBuffer((uint64_t)a3, v10);
    if (v18 != 15) {
      return a3;
    }
    int v11 = (UChar *)icu::UnicodeString::getBuffer(a3, v9);
    if (v11)
    {
      int v18 = 0;
      if ((*((_WORD *)a3 + 4) & 2) != 0) {
        uint64_t v12 = 27LL;
      }
      else {
        uint64_t v12 = *((unsigned int *)a3 + 4);
      }
      int v13 = uloc_getDisplayCountry(*((void *)this + 5), a2[5], v11, v12, &v18);
      if (v18 <= 0) {
        int v14 = v13;
      }
      else {
        int v14 = 0;
      }
      icu::UnicodeString::releaseBuffer((uint64_t)a3, v14);
      return a3;
    }
  }

  unsigned int v15 = *((unsigned __int16 *)a3 + 4);
  if ((v15 & 1) != 0)
  {
    icu::UnicodeString::unBogus((uint64_t)a3);
  }

  else
  {
    if ((v15 & 0x8000u) == 0) {
      unsigned int v16 = v15 >> 5;
    }
    else {
      unsigned int v16 = *((_DWORD *)a3 + 3);
    }
    if (v16) {
      *((_WORD *)a3 + 4) &= 0x1Fu;
    }
  }

  return a3;
}

uint64_t uloc_getDisplayCountry(uint64_t a1, char *a2, UChar *a3, uint64_t a4, int *a5)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  int v20 = 0;
  int Country = uloc_getCountry(a1, (char *)&v20, 4, a5);
  if (*a5 > 0 || Country < 1)
  {
    if (*a5 > 0) {
      return 0LL;
    }
    goto LABEL_11;
  }

  unsigned int v12 = Country;
  if (!sub_1807D4C58((const char *)&v20))
  {
LABEL_11:
    if ((a4 & 0x80000000) != 0
      || !a3 && (_DWORD)a4
      || (bzero(v22, 0x274uLL), v21 = 0, int v15 = uloc_getCountry(a1, v22, 628, &v21), v21 > 0)
      || v21 == -124)
    {
      uint64_t v14 = 0LL;
      *a5 = 1;
    }

    else if (v15)
    {
      return sub_1807D4FA8("icudt74l-region", a2, "Countries", 0LL, v22, v22, a3, a4, a5);
    }

    else
    {
      return u_terminateUChars((uint64_t)a3, a4, 0LL, a5);
    }

    return v14;
  }

  uint64_t v13 = uldn_open(a2, 0LL, a5);
  if (*a5 >= 1) {
    return 0LL;
  }
  uint64_t v18 = v13;
  uint64_t v14 = uldn_regionDisplayName(v13, (uint64_t)&v20, a3, a4, a5);
  uldn_close(v18);
  if ((_DWORD)v14 == v12)
  {
    uint64_t v19 = 0LL;
    while (*((char *)&v20 + v19) == a3[v19])
    {
      if (v12 == ++v19) {
        goto LABEL_28;
      }
    }

    if (v12 != (_DWORD)v19) {
      return v12;
    }
LABEL_28:
    *a5 = -127;
    return v12;
  }

  return v14;
}

icu::UnicodeString *icu::Locale::getDisplayVariant(icu::Locale *this, icu::UnicodeString *a2)
{
  Default = icu::Locale::getDefault(this);
  return icu::Locale::getDisplayVariant((char **)this, (char **)Default, a2);
}

icu::UnicodeString *icu::Locale::getDisplayVariant(char **this, char **a2, icu::UnicodeString *a3)
{
  int v18 = 0;
  Buffer = (UChar *)icu::UnicodeString::getBuffer(a3, 157);
  if (Buffer)
  {
    if ((*((_WORD *)a3 + 4) & 2) != 0) {
      int v7 = 27;
    }
    else {
      int v7 = *((_DWORD *)a3 + 4);
    }
    int DisplayVariant = uloc_getDisplayVariant(this[5], a2[5], Buffer, v7, &v18);
    int v9 = DisplayVariant;
    if (v18 <= 0) {
      int v10 = DisplayVariant;
    }
    else {
      int v10 = 0;
    }
    icu::UnicodeString::releaseBuffer((uint64_t)a3, v10);
    if (v18 != 15) {
      return a3;
    }
    int v11 = (UChar *)icu::UnicodeString::getBuffer(a3, v9);
    if (v11)
    {
      int v18 = 0;
      if ((*((_WORD *)a3 + 4) & 2) != 0) {
        int v12 = 27;
      }
      else {
        int v12 = *((_DWORD *)a3 + 4);
      }
      int v13 = uloc_getDisplayVariant(this[5], a2[5], v11, v12, &v18);
      if (v18 <= 0) {
        int v14 = v13;
      }
      else {
        int v14 = 0;
      }
      icu::UnicodeString::releaseBuffer((uint64_t)a3, v14);
      return a3;
    }
  }

  unsigned int v15 = *((unsigned __int16 *)a3 + 4);
  if ((v15 & 1) != 0)
  {
    icu::UnicodeString::unBogus((uint64_t)a3);
  }

  else
  {
    if ((v15 & 0x8000u) == 0) {
      unsigned int v16 = v15 >> 5;
    }
    else {
      unsigned int v16 = *((_DWORD *)a3 + 3);
    }
    if (v16) {
      *((_WORD *)a3 + 4) &= 0x1Fu;
    }
  }

  return a3;
}

uint64_t uloc_getDisplayVariant(char *a1, char *a2, UChar *a3, int a4, int *a5)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (!a5 || *a5 > 0) {
    return 0LL;
  }
  if (a4 < 0
    || !a3 && a4
    || (bzero(v13, 0x274uLL), int v12 = 0, Variant = uloc_getVariant(a1, v13, 628, &v12), v12 > 0)
    || v12 == -124)
  {
    uint64_t result = 0LL;
    *a5 = 1;
  }

  else if (Variant)
  {
    return sub_1807D4FA8("icudt74l-lang", a2, "Variants", 0LL, v13, v13, a3, a4, a5);
  }

  else
  {
    return u_terminateUChars((uint64_t)a3, a4, 0LL, a5);
  }

  return result;
}

icu::UnicodeString *icu::Locale::getDisplayName(icu::Locale *this, icu::UnicodeString *a2)
{
  Default = icu::Locale::getDefault(this);
  return icu::Locale::getDisplayName((char **)this, (char **)Default, a2);
}

icu::UnicodeString *icu::Locale::getDisplayName(char **this, char **a2, icu::UnicodeString *a3)
{
  int v18 = 0;
  Buffer = (UChar *)icu::UnicodeString::getBuffer(a3, 157);
  if (Buffer)
  {
    if ((*((_WORD *)a3 + 4) & 2) != 0) {
      unsigned int v7 = 27;
    }
    else {
      unsigned int v7 = *((_DWORD *)a3 + 4);
    }
    int DisplayName = uloc_getDisplayName(this[5], a2[5], Buffer, v7, &v18);
    int v9 = DisplayName;
    if (v18 <= 0) {
      int v10 = DisplayName;
    }
    else {
      int v10 = 0;
    }
    icu::UnicodeString::releaseBuffer((uint64_t)a3, v10);
    if (v18 != 15) {
      return a3;
    }
    int v11 = (UChar *)icu::UnicodeString::getBuffer(a3, v9);
    if (v11)
    {
      int v18 = 0;
      if ((*((_WORD *)a3 + 4) & 2) != 0) {
        unsigned int v12 = 27;
      }
      else {
        unsigned int v12 = *((_DWORD *)a3 + 4);
      }
      int v13 = uloc_getDisplayName(this[5], a2[5], v11, v12, &v18);
      if (v18 <= 0) {
        int v14 = v13;
      }
      else {
        int v14 = 0;
      }
      icu::UnicodeString::releaseBuffer((uint64_t)a3, v14);
      return a3;
    }
  }

  unsigned int v15 = *((unsigned __int16 *)a3 + 4);
  if ((v15 & 1) != 0)
  {
    icu::UnicodeString::unBogus((uint64_t)a3);
  }

  else
  {
    if ((v15 & 0x8000u) == 0) {
      unsigned int v16 = v15 >> 5;
    }
    else {
      unsigned int v16 = *((_DWORD *)a3 + 3);
    }
    if (v16) {
      *((_WORD *)a3 + 4) &= 0x1Fu;
    }
  }

  return a3;
}

uint64_t uloc_getDisplayName(char *a1, char *a2, UChar *a3, unsigned int a4, int *a5)
{
  uint64_t v107 = *MEMORY[0x1895F89C0];
  uint64_t v104 = 0LL;
  if (a5 && *a5 <= 0)
  {
    if ((a4 & 0x80000000) == 0 && (a3 || !a4))
    {
      int v106 = 0;
      uint64_t v105 = 0LL;
      __int16 v103 = 0;
      int v102 = 0;
      uint64_t v101 = 0LL;
      uloc_getLanguage((uint64_t)a1, (char *)&v105, 12, (int *)&v101);
      int Script = uloc_getScript((uint64_t)a1, (char *)&v102, 6, (int *)&v101);
      int Country = uloc_getCountry((uint64_t)a1, (char *)&v101 + 4, 4, (int *)&v101);
      if ((int)v101 <= 0
        && (Script >= 1
         && (!((unsigned __int16)v105 ^ 0x687A | BYTE2(v105))
          || (_DWORD)v105 == 6649209
          || !((unsigned __int16)v105 ^ 0x736B | BYTE2(v105))
          || !((unsigned __int16)v105 ^ 0x6170 | BYTE2(v105))
          || !((unsigned __int16)v105 ^ 0x7275 | BYTE2(v105)))
         || Country >= 1 && sub_1807D4C58((const char *)&v101 + 4)))
      {
        uint64_t v10 = uldn_open(a2, 0LL, (int *)&v101);
        if ((int)v101 <= 0)
        {
          uint64_t v81 = v10;
          uint64_t v6 = uldn_localeDisplayName(v10, (uint64_t)a1, a3, a4, a5);
          uldn_close(v81);
          return v6;
        }
      }

      LODWORD(v105) = 0;
      uint64_t v11 = ures_open("icudt74l-lang", a2, (int *)&v105);
      uint64_t v12 = ures_getByKeyWithFallback(v11, "localeDisplayPattern", 0LL, (UErrorCode *)&v105);
      StringByKeyWithFallback = ures_getStringByKeyWithFallback(v12, "separator", (int *)&v104 + 1, (UErrorCode *)&v105);
      ucs1 = (UChar *)ures_getStringByKeyWithFallback(v12, "pattern", (int *)&v104, (UErrorCode *)&v105);
      if (v12) {
        ures_close(v12);
      }
      if (v11) {
        ures_close(v11);
      }
      int v14 = HIDWORD(v104) ? StringByKeyWithFallback : (const UChar *)L"{0}, {1}";
      unsigned int v15 = u_strstr(v14, (const UChar *)"{");
      unsigned int v16 = u_strstr(v14, (const UChar *)"{");
      if (v15)
      {
        if (v16 && v16 >= v15)
        {
          int v17 = v15 + 3;
          HIDWORD(v104) = (unint64_t)((char *)v16 - (char *)(v15 + 3)) >> 1;
          if (!(_DWORD)v104 || (_DWORD)v104 == 9 && !u_strncmp(ucs1, (const UChar *)"{", 9))
          {
            uint64_t v22 = 0LL;
            int v100 = 0;
            LODWORD(v104) = 9;
            __int16 v23 = 93;
            int v24 = 41;
            __int16 v25 = 91;
            int v26 = 40;
            int v92 = 5;
            ucs1 = (UChar *)"{";
LABEL_42:
            int v27 = a4;
            __int128 v28 = a3;
            int v29 = 0;
            uint64_t v30 = 1LL;
            BOOL v31 = 1;
            BOOL v86 = v17;
            int v84 = v24;
            __int16 v85 = v23;
            int v83 = v26;
            while (1)
            {
              int v82 = v29;
              uint64_t v32 = v22;
              if (!(_DWORD)v22) {
                goto LABEL_49;
              }
              int v33 = v22;
              __int128 v34 = v28;
LABEL_50:
              uint64_t v38 = 0LL;
              int v39 = 0;
              uint64_t v88 = 0LL;
              int v93 = 0;
              unsigned int v94 = 0;
              v91 = 0LL;
              unsigned int v90 = v32;
              do
              {
                int v40 = v27 - v32;
                uint64_t v41 = &v28[(int)v32];
                int v42 = v40 & ~(v40 >> 31);
                if (v39 == v100)
                {
                  if ((_BYTE)v30)
                  {
                    uint64_t v43 = v38;
                    signed int DisplayLanguage = uloc_getDisplayLanguage( (uint64_t)a1,  a2,  v34,  v40 & ~(v40 >> 31),  a5);
                    uint64_t v38 = v43;
                    __int128 v28 = a3;
                    int v27 = a4;
                    uint64_t v45 = (DisplayLanguage + v32);
                    int v93 = v32;
                    unsigned int v94 = DisplayLanguage;
                    uint64_t v30 = DisplayLanguage > 0;
                    int v46 = 1;
                    goto LABEL_118;
                  }

                  uint64_t v30 = 0LL;
                }

                else
                {
                  if (v31)
                  {
                    HIDWORD(v101) = 0;
                    int v95 = v38;
                    switch((int)v38)
                    {
                      case 0:
                        if (*a5 <= 0)
                        {
                          if (v40 < 1 || v34)
                          {
                            uint64_t v61 = v30;
                            bzero(&v105, 0x274uLL);
                            int v102 = 0;
                            int v62 = uloc_getScript((uint64_t)a1, (char *)&v105, 628, &v102);
                            if (v102 > 0 || v102 == -124)
                            {
                              LODWORD(v47) = 0;
                              *a5 = 1;
                            }

                            else if (v62)
                            {
                              LODWORD(v47) = sub_1807D4FA8( "icudt74l-lang",  a2,  "Scripts",  0LL,  (char *)&v105,  (const char *)&v105,  v34,  v40 & ~(v40 >> 31),  a5);
                            }

                            else
                            {
                              LODWORD(v47) = u_terminateUChars((uint64_t)v34, v40 & ~(v40 >> 31), 0LL, a5);
                            }

                            int v27 = a4;
                            __int128 v28 = a3;
                            uint64_t v30 = v61;
                          }

                          else
                          {
                            LODWORD(v47) = 0;
                            *a5 = 1;
                          }
                        }

                        else
                        {
                          LODWORD(v47) = 0;
                        }

                        int v46 = 0;
                        char v56 = 1;
                        LODWORD(v88) = v32;
                        goto LABEL_101;
                      case 1:
                        uint64_t v48 = v30;
                        LODWORD(v47) = uloc_getDisplayCountry( (uint64_t)a1,  a2,  v34,  v40 & ~(v40 >> 31),  a5);
                        goto LABEL_65;
                      case 2:
                        uint64_t v48 = v30;
                        LODWORD(v47) = uloc_getDisplayVariant(a1, a2, v34, v40 & ~(v40 >> 31), a5);
LABEL_65:
                        uint64_t v30 = v48;
                        __int128 v28 = a3;
                        int v27 = a4;
                        int v46 = 0;
                        goto LABEL_89;
                      case 3:
                        unsigned int v89 = v30;
                        uint64_t v49 = uloc_openKeywords(a1, a5);
                        if (v91) {
                          uenum_close(v91);
                        }
                        uint64_t v50 = (uint64_t)v49;
                        goto LABEL_70;
                      default:
                        unsigned int v89 = v30;
                        uint64_t v50 = (uint64_t)v91;
LABEL_70:
                        v91 = (void **)v50;
                        uint64_t v47 = (char *)uenum_next(v50, (uint64_t)&v101 + 4, a5);
                        if (v47)
                        {
                          uint64_t v51 = v47;
                          int DisplayKeyword = uloc_getDisplayKeyword(v47, a2, v34, v40 & ~(v40 >> 31), a5);
                          HIDWORD(v101) = DisplayKeyword;
                          if (DisplayKeyword)
                          {
                            if (DisplayKeyword < v42) {
                              v34[DisplayKeyword] = 61;
                            }
                            uint64_t v53 = DisplayKeyword + 1LL;
                            HIDWORD(v101) = v53;
                            int v54 = v42 - v53;
                            __int128 v55 = &v34[v53];
                            if (v54 < 1) {
                              int v54 = 0;
                            }
                            else {
                              __int128 v34 = v55;
                            }
                          }

                          else
                          {
                            int v54 = v40 & ~(v40 >> 31);
                          }

                          if (*a5 == 15) {
                            *a5 = 0;
                          }
                          __int128 v57 = v51;
                          int v58 = v54;
                          Displayint KeywordValue = uloc_getDisplayKeywordValue(a1, v57, a2, v34, v54, a5);
                          int v60 = HIDWORD(v101);
                          if (HIDWORD(v101))
                          {
                            int v27 = a4;
                            __int128 v28 = a3;
                            uint64_t v30 = v89;
                            if (!DisplayKeywordValue) {
                              int v60 = --HIDWORD(v101);
                            }
                            if (v40 > 0) {
                              __int128 v34 = v41;
                            }
                          }

                          else
                          {
                            int v42 = v58;
                            int v27 = a4;
                            __int128 v28 = a3;
                            uint64_t v30 = v89;
                          }

                          int v46 = 0;
                          LODWORD(v47) = v60 + DisplayKeywordValue;
LABEL_89:
                          char v56 = 1;
                        }

                        else
                        {
                          char v56 = 0;
                          int v46 = 1;
                          int v27 = a4;
                          __int128 v28 = a3;
                          uint64_t v30 = v89;
                        }

LABEL_101:
                        if ((int)v47 >= 1)
                        {
                          uint64_t v63 = HIDWORD(v104);
                          int v64 = HIDWORD(v104) + (_DWORD)v47;
                          int v65 = &v34[v47];
                          do
                          {
                            int v66 = *v34;
                            UChar v67 = v25;
                            if (v66 == v83 || (UChar v67 = v85, v66 == v84)) {
                              *__int128 v34 = v67;
                            }
                            ++v34;
                          }

                          while (v34 < v65);
                          if ((int)v63 < 1)
                          {
LABEL_112:
                            int v70 = v95;
                          }

                          else
                          {
                            unint64_t v68 = 0LL;
                            uint64_t v69 = 2 * v63;
                            int v70 = v95;
                            do
                            {
                              v34[v68 / 2] = v86[v68 / 2];
                              v68 += 2LL;
                            }

                            while (v69 != v68);
                            __int128 v34 = (UChar *)((char *)v34 + v68);
                          }

                          uint64_t v32 = (v64 + v32);
LABEL_115:
                          BOOL v31 = 1;
                          goto LABEL_116;
                        }

                        int v70 = v95;
                        if ((v56 & 1) != 0) {
                          goto LABEL_115;
                        }
                        int v76 = HIDWORD(v104);
                        if ((_DWORD)v32 == (_DWORD)v88) {
                          int v76 = 0;
                        }
                        uint64_t v32 = (v32 - v76);
                        HIDWORD(v88) = v32 - v88;
                        BOOL v31 = (int)v32 > (int)v88;
LABEL_116:
                        uint64_t v38 = (v70 + 1);
                        break;
                    }

                    goto LABEL_117;
                  }

                  BOOL v31 = 0;
                }

                int v46 = 1;
LABEL_117:
                uint64_t v45 = v32;
LABEL_118:
                if (*a5 == 15) {
                  *a5 = 0;
                }
                if (v46)
                {
                  if ((_BYTE)v30 && v31)
                  {
                    int v71 = v33 + 3;
                    if (v39) {
                      int v33 = v104;
                    }
                    else {
                      int v33 = v92;
                    }
                    int v72 = v33 - v71;
                    uint64_t v73 = (v33 - v71 + v45);
                    if ((int)v73 <= v27)
                    {
                      __int128 v34 = &v28[(int)v45];
                      if (v72 >= 1)
                      {
                        uint64_t v74 = &ucs1[v71];
                        do
                        {
                          UChar v75 = *v74++;
                          *v34++ = v75;
                          ++v71;
                        }

                        while (v33 != v71);
                      }

                      uint64_t v45 = v73;
                      int v33 = v71;
                    }

                    else
                    {
                      uint64_t v45 = (v72 + v45);
                    }
                  }

                  else if (v39)
                  {
                    if ((int)v45 >= 1)
                    {
                      uint64_t v45 = (_BYTE)v30 ? v94 : HIDWORD(v88);
                      if (v28 && v90)
                      {
                        if ((int)(v45 + v90) <= v27)
                        {
                          int v77 = v93;
                          if (!(_BYTE)v30) {
                            int v77 = v88;
                          }
                          uint64_t v78 = v30;
                          uint64_t v79 = v38;
                          u_memmove(v28, &v28[v77], v45);
                          uint64_t v38 = v79;
                          uint64_t v30 = v78;
                          __int128 v28 = a3;
                          int v27 = a4;
                        }

                        else
                        {
                          unsigned int v90 = 0;
                          int v82 = 1;
                        }
                      }
                    }
                  }

                  else
                  {
                    unsigned int v90 = 0;
                    uint64_t v45 = 0LL;
                  }

                  ++v39;
                }

                uint64_t v32 = v45;
              }

              while (v39 < 2);
              if (v91)
              {
                uint64_t v80 = v30;
                uenum_close(v91);
                uint64_t v30 = v80;
                __int128 v28 = a3;
                int v27 = a4;
              }

              int v29 = 1;
              uint64_t v22 = v90;
              if (!v82) {
                return u_terminateUChars((uint64_t)v28, v27, v45, a5);
              }
            }

            if ((int)v22 >= 1)
            {
              uint64_t v35 = v22;
              uint64_t v36 = ucs1;
              __int128 v34 = v28;
              do
              {
                UChar v37 = *v36++;
                *v34++ = v37;
                --v35;
              }

              while (v35);
              int v33 = v22;
              goto LABEL_50;
            }

      icu::UnicodeString::~UnicodeString(v56, (icu::UnicodeString *)v87);
      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 15:
      *(_DWORD *)(a1 + 3156) = *(_DWORD *)(a1 + 16);
      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 16:
      *(_BYTE *)(a1 + 1132) = 1;
      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 17:
      UChar v37 = sub_1808010D0(a1, 0LL);
      int v9 = v37;
      icu::UnicodeString::UnicodeString((uint64_t)v87, *(_DWORD *)(a1 + 40));
      sub_180801188(a1, (uint64_t)v87, v9, 0LL);
      icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)v87);
LABEL_45:
      int v39 = *(unsigned int *)(a1 + 16);
      *(_DWORD *)(v9 + 112) = v39;
      *(_DWORD *)(v9 + 116) = *(_DWORD *)(a1 + 20);
      int v40 = *(void *)(*(void *)(a1 + 8) + 32LL);
      goto LABEL_67;
    case 18:
      int v4 = *(void *)(a1 + 8);
      int v5 = *(int **)(v4 + 16);
      if (*v5 > 0) {
        return 0LL;
      }
      unsigned int v7 = 66051;
      goto LABEL_63;
    case 19:
      int v4 = *(void *)(a1 + 8);
      int v5 = *(int **)(v4 + 16);
      if (*v5 > 0) {
        return 0LL;
      }
      uint64_t v6 = 5;
      goto LABEL_62;
    case 20:
      sub_180801388(a1, a2);
      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 21:
      uint64_t v41 = (_DWORD *)sub_1808010D0(a1, 4uLL);
      int v42 = *(void *)(a1 + 8);
      if (**(int **)(v42 + 16) <= 0)
      {
        v41[31] = *(_DWORD *)(a1 + 3152);
        v41[28] = *(_DWORD *)(a1 + 16);
        v41[29] = *(_DWORD *)(a1 + 20);
        (*(void (**)(void))(**(void **)(v42 + 32) + 24LL))(*(void *)(v42 + 32));
        *(_BYTE *)(a1 + 1133) = 1;
      }

      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 22:
      *(_DWORD *)(*(void *)(a1 + 8LL * *(int *)(a1 + 1128) + 320) + 112LL) = *(_DWORD *)(a1 + 20);
      BOOL v31 = a1;
      uint64_t v32 = 7LL;
LABEL_54:
      sub_1808010D0(v31, v32);
      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 23:
      uint64_t v43 = sub_1808010D0(a1, 5uLL);
      if (**(int **)(*(void *)(a1 + 8) + 16LL) <= 0)
      {
        *(_DWORD *)(v43 + 124) = 0;
        *(void *)(v43 + 112) = *(void *)(a1 + 16);
      }

      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 24:
      uint64_t v44 = sub_1808010D0(a1, 2uLL);
      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 25:
      uint64_t v45 = *(void *)(a1 + 8LL * *(int *)(a1 + 1128) + 328);
      *(_DWORD *)(v45 + 124) = u_charDigitValue(*(_DWORD *)(a1 + 40)) + 10 * *(_DWORD *)(v45 + 124);
      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 26:
      int v4 = *(void *)(a1 + 8);
      int v5 = *(int **)(v4 + 16);
      if (*v5 > 0) {
        return 0LL;
      }
      uint64_t v6 = 13;
LABEL_62:
      unsigned int v7 = v6 | 0x10200;
      goto LABEL_63;
    case 27:
      uint64_t v47 = *(void *)(a1 + 8LL * *(int *)(a1 + 1128) + 328);
      *(_DWORD *)(v47 + 116) = *(_DWORD *)(a1 + 20);
      int v40 = *(void *)(*(void *)(a1 + 8) + 32LL);
      int v39 = *(unsigned int *)(v47 + 112);
LABEL_67:
      (*(void (**)(uint64_t, uint64_t))(*(void *)v40 + 24LL))(v40, v39);
      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 28:
      uint64_t v48 = *(int *)(a1 + 1128);
      *(_DWORD *)(a1 + 1128) = v48 - 1;
      int v27 = *(void *)(a1 + 8 * v48 + 328);
      __int128 v28 = a1;
      int v29 = 11LL;
      goto LABEL_71;
    case 29:
      uint64_t v49 = *(int *)(a1 + 1128);
      *(_DWORD *)(a1 + 1128) = v49 - 1;
      int v27 = *(void *)(a1 + 8 * v49 + 328);
      __int128 v28 = a1;
      int v29 = 12LL;
      goto LABEL_71;
    case 30:
      uint64_t v50 = *(int *)(a1 + 1128);
      *(_DWORD *)(a1 + 1128) = v50 - 1;
      int v27 = *(void *)(a1 + 8 * v50 + 328);
      __int128 v28 = a1;
      int v29 = 10LL;
LABEL_71:
      uint64_t v51 = sub_1808010D0(v28, v29);
      if (**(int **)(*(void *)(a1 + 8) + 16LL) <= 0)
      {
        *(void *)(v51 + 16) = v27;
        *(void *)(v27 + 8) = v51;
      }

      return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
    case 31:
      uint64_t v52 = *(void *)(a1 + 8);
      uint64_t v53 = *(int **)(v52 + 16);
      if (*v53 > 0) {
        return **(_DWORD **)(*(void *)(a1 + 8) + 16LL) < 1;
      }
      int v54 = 66051;
      goto LABEL_77;
    default:
      int v4 = *(void *)(a1 + 8);
      int v5 = *(int **)(v4 + 16);
      if (*v5 > 0) {
        return 0LL;
      }
      unsigned int v7 = 66048;
LABEL_63:
      void *v5 = v7;
      int v46 = *(void *)(v4 + 24);
      if (!v46) {
        return 0LL;
      }
      uint64_t result = 0LL;
      *(void *)int v46 = *(void *)(a1 + 28);
      *(_WORD *)(v46 + 8) = 0;
      *(_WORD *)(v46 + 40) = 0;
      return result;
  }

            uint64_t v51 = (int)v46 + 1LL;
            LODWORD(v46) = v46 + 2;
            if (v50) {
              uint64_t v48 = v48;
            }
            else {
              uint64_t v48 = (v48 + 2);
            }
            if (v50) {
              uint64_t v52 = 2;
            }
            else {
              uint64_t v52 = 0;
            }
            int v64 = v52;
          }

      ++v26;
    }

    while (v26 < v33 && v29 < 1);
    unsigned int v2 = a2;
    int v3 = v74;
    uint64_t v12 = v71;
    unsigned int v7 = v72;
    int v8 = v75;
    if (!v29)
    {
LABEL_136:
      *unsigned int v2 = 10;
      *(_DWORD *)(v7 + 84) = v13;
      uint64_t v6 = v76;
      goto LABEL_149;
    }

    if (*(unsigned __int8 *)(v71 + v27) == v28)
    {
      uint64_t v52 = 0;
      uint64_t v10 = v70;
      int v4 = v77;
    }

    else
    {
      uint64_t v53 = (char)v28;
      LODWORD(v87[0]) = *(_DWORD *)(&off_1897120A0)[v53];
      *(_BYTE *)(v71 + v27) = v28;
      int v4 = v77;
      uint64_t v52 = 4;
      uint64_t v10 = v70;
    }

    int v9 = v69;
    if (*(char *)(v11 + 102) == v27)
    {
      uint64_t v6 = v76;
      goto LABEL_119;
    }

    uint64_t v6 = v76;
    if (v27 == 2)
    {
      __int128 v55 = v52 | (unint64_t)v87;
      *(_BYTE *)__int128 v55 = 27;
      v52 |= 2u;
      char v56 = (_BYTE *)(v55 | 1);
      __int128 v57 = 78;
    }

    else
    {
      if (v27 == 1)
      {
        int v54 = v52;
        v52 |= 1u;
        *(_BYTE *)((unint64_t)v87 | v54) = 14;
        *(_BYTE *)(v11 + 102) = 1;
        goto LABEL_119;
      }

      int v58 = v52 | (unint64_t)v87;
      *(_BYTE *)int v58 = 27;
      v52 |= 2u;
      char v56 = (_BYTE *)(v58 | 1);
      __int128 v57 = 79;
    }

    *char v56 = v57;
LABEL_119:
    int v18 = v52 + 2;
    *(_WORD *)((unint64_t)v87 | v52) = bswap32(v5) >> 16;
LABEL_120:
    if (v18 == 2)
    {
      *int v8 = v87[0];
      uint64_t v63 = v85;
      if (v85)
      {
        if (v13 >= 0x10000) {
          int v64 = -2;
        }
        else {
          int v64 = -1;
        }
        int v65 = (((unint64_t)v6 - *(void *)(v3 + 16)) >> 1) + v64;
        *__int16 v85 = v65;
        __int16 v85 = v63 + 2;
        v63[1] = v65;
      }

      ++v8;
LABEL_6:
      if ((unint64_t)v8 >= v10)
      {
        *unsigned int v2 = 15;
        goto LABEL_149;
      }

      unsigned int v15 = *v6++;
      int v13 = v15;
      if ((v15 & 0xF800) == 0xD800)
      {
        if ((v13 & 0x400) == 0) {
          continue;
        }
        goto LABEL_38;
      }

      goto LABEL_13;
    }

    break;
  }

  if (v18 == 1)
  {
    *(_BYTE *)int v8 = v87[0];
    int v8 = (_WORD *)((char *)v8 + 1);
    __int128 v59 = v85;
    if (v85)
    {
      *__int16 v85 = (((unint64_t)v6 - *(void *)(v3 + 16)) >> 1) - 1;
      __int16 v85 = v59 + 1;
    }

    goto LABEL_6;
  }

  if ((unint64_t)v4 >= v7)
  {
    int v27 = 0;
    goto LABEL_120;
  }

  uint64_t v41 = 0LL;
  int v13 = v17;
  int v42 = v10;
  while (1)
  {
    if ((unint64_t)v6 >= v9)
    {
      int v27 = 0;
      *unsigned int v2 = 15;
      goto LABEL_120;
    }

    uint64_t v43 = v4[v41];
    if (!v42) {
      break;
    }
    if (v42 == 1)
    {
      *(_BYTE *)(v3 + 66) = v43;
      uint64_t v44 = 2;
      int v42 = 2;
      goto LABEL_115;
    }

    if (v42 == 2)
    {
      *v6++ = v43 | ((_WORD)v13 << 8);
      v16 += 1 + v41;
      v4 += v41 + 1;
      if (v8) {
        *v8++ = v15;
      }
      goto LABEL_131;
    }

        if ((int)++v17 >= SDWORD2(v103[0]))
        {
          uint64_t v22 = *(unsigned int *)a2;
          int v65 = v93;
          int v66 = v91;
          goto LABEL_125;
        }
      }
    }

    int v65 = 0;
    int v66 = 0;
LABEL_125:
    uint64_t v22 = v9[2];
    if ((_DWORD)v22 == 1) {
      goto LABEL_126;
    }
    int v70 = icu::UMemory::operator new((uint64_t *)v22, (icu::UMemory *)0xA8, v16);
    if (v70)
    {
      int v71 = (UChar **)(*((uint64_t (**)(icu::UVector **))*this + 8))(this);
      icu::AlphabeticIndex::Bucket::Bucket((uint64_t)v70, v71, (UChar **)v15, 3);
    }

    sub_1807C9194((uint64_t)&v101, (uint64_t)v70, (int *)a2);
    int v72 = v101;
    uint64_t v101 = 0LL;
    icu::UVector::adoptElement((icu::UVector *)v9, v72, a2);
    uint64_t v22 = *(unsigned int *)a2;
    if ((int)v22 <= 0)
    {
      if (v65)
      {
        uint64_t v22 = 0LL;
        uint64_t v74 = 0LL;
        do
        {
          UChar v75 = *(void *)((char *)v112 + v22);
          if (v75) {
            int v76 = v74 == 0;
          }
          else {
            int v76 = 1;
          }
          if (!v76)
          {
            *(void *)(v75 + 144) = v74;
            int v66 = 1;
          }

          v22 += 8LL;
        }

        while (v22 != 208);
      }

      if (!v66)
      {
LABEL_126:
        UChar v67 = icu::UMemory::operator new((uint64_t *)v22, (icu::UMemory *)0x18, v16);
        int v4 = v67;
        if (!v67) {
          goto LABEL_163;
        }
        unint64_t v68 = (uint64_t)v9;
        uint64_t v69 = (icu::UVector *)v9;
        goto LABEL_128;
      }

      int v77 = v9[2];
      uint64_t v78 = v77 - 1;
      uint64_t v79 = icu::UVector::elementAt((icu::UVector *)v9, v77 - 1);
      if (v77 >= 3)
      {
        int v82 = v79;
        do
        {
          int v83 = icu::UVector::elementAt((icu::UVector *)v9, --v78);
          uint64_t v81 = *(uint64_t **)(v83 + 144);
          if (!v81)
          {
            uint64_t v81 = (uint64_t *)*(unsigned int *)(v83 + 136);
            else {
              int v82 = v83;
            }
          }
        }

        while (v78 > 1);
      }

      int v84 = (icu::UVector *)icu::UMemory::operator new(v81, (icu::UMemory *)0x28, v80);
      if (v84)
      {
        __int16 v85 = v84;
        icu::UVector::UVector(v84, a2);
        if (*(int *)a2 <= 0)
        {
          BOOL v87 = (uint64_t *)v9[2];
          uint64_t v88 = 0;
          do
          {
            unsigned int v89 = (void *)icu::UVector::elementAt((icu::UVector *)v9, v88);
            if (!v89[18]) {
              icu::UVector::addElement(v85, v89, a2);
            }
            ++v88;
          }

          while (v88 < (int)v9[2]);
          BOOL v87 = (uint64_t *)*(unsigned int *)a2;
          if ((int)v87 < 1)
          {
LABEL_170:
            UChar v67 = icu::UMemory::operator new(v87, (icu::UMemory *)0x18, v86);
            if (v67)
            {
              int v4 = v67;
              unint64_t v68 = (uint64_t)v9;
              uint64_t v69 = v85;
LABEL_128:
              sub_1808943A8(v67, v68, v69);
              int v9 = 0LL;
              goto LABEL_133;
            }

            *a2 = U_MEMORY_ALLOCATION_ERROR;
          }
        }

        (*(void (**)(icu::UVector *))(*(void *)v85 + 8LL))(v85);
      }

      else
      {
        uint64_t v22 = *(unsigned int *)a2;
        if ((int)v22 <= 0)
        {
          int v4 = 0LL;
          goto LABEL_163;
        }
      }
    }

  if (*(int *)(a1 + 392) >= 1)
  {
    uint64_t v45 = 0;
    do
    {
      if (!icu::UVector::elementAt((icu::UVector *)(a1 + 384), v45)) {
        sub_18095F4F8(a1, 65568, a2, a3, a5);
      }
      ++v45;
    }

    while (v45 < *(_DWORD *)(a1 + 392));
  }

  int v13 = (void *)*(unsigned int *)(a1 + 104);
  if (v19 == 126)
  {
    int v46 = (_DWORD)v13 == 1;
    if ((_DWORD)v13 == 1) {
      uint64_t v47 = &v83;
    }
    else {
      uint64_t v47 = &v93;
    }
    if ((_DWORD)v13 == 1) {
      uint64_t v48 = &v93;
    }
    else {
      uint64_t v48 = &v83;
    }
    uint64_t v81 = (uint64_t)v48;
    sub_18095E6E8((uint64_t)v48);
    *((_DWORD *)v47 + 18) = -1;
    *((_DWORD *)v47 + 21) = 0;
    goto LABEL_121;
  }

  if ((v19 == 62) == ((_DWORD)v13 != 0))
  {
    a3 = v30;
    goto LABEL_48;
  }

  uint64_t v49 = (_DWORD)v13 == 1;
  int v46 = (_DWORD)v13 == 1;
  uint64_t v50 = &v93;
  if (v49) {
    uint64_t v47 = &v83;
  }
  else {
    uint64_t v47 = &v93;
  }
  if (!v49) {
    uint64_t v50 = &v83;
  }
  uint64_t v81 = (uint64_t)v50;
LABEL_121:
  if (v46) {
    uint64_t v51 = &v83;
  }
  else {
    uint64_t v51 = &v93;
  }
  if ((*((_DWORD *)v51 + 19) & 0x80000000) != 0) {
    *((_DWORD *)v51 + 19) = 0;
  }
  if (v46) {
    uint64_t v52 = &v83;
  }
  else {
    uint64_t v52 = &v93;
  }
  if ((v52[10] & 0x80000000) != 0)
  {
    uint64_t v53 = v85;
    if (!v46) {
      uint64_t v53 = &v95;
    }
    int v54 = *(__int16 *)v53;
    __int128 v55 = (char *)v85 + 4;
    if (!v46) {
      __int128 v55 = (char *)&v95 + 4;
    }
    char v56 = *(_DWORD *)v55;
    if (v54 >= 0) {
      char v56 = (unsigned __int16)v54 >> 5;
    }
    *((_DWORD *)v52 + 20) = v56;
  }

  __int128 v57 = (char *)&v99 + 4;
  if (v46)
  {
    int v58 = (int *)&v100;
  }

  else
  {
    __int128 v57 = (char *)&v87 + 4;
    int v58 = &v88;
  }

  if (v46) {
    __int128 v59 = v87;
  }
  else {
    __int128 v59 = v99;
  }
  if ((*(_DWORD *)v57 & 0x80000000) != 0 && *v58 < 0 && v59 < 0)
  {
    int v60 = v46 ? &v93 : &v83;
    uint64_t v80 = v60;
    uint64_t v61 = *((_DWORD *)v60 + 21);
    int v62 = v46 ? v99 : v87;
    uint64_t v63 = &v90;
    if (v46)
    {
      uint64_t v63 = (int *)&v100 + 3;
      int v64 = (char *)&v100 + 13;
    }

    else
    {
      int v64 = (char *)&v90 + 1;
    }

    if ((v62 > -1 || v61 == 0) && !*(_BYTE *)v63 && !*v64)
    {
      int v66 = (uint64_t)v47;
      UChar v67 = v51;
      uint64_t v79 = v52;
      if (sub_18095E808(v66, a1) && sub_18095E770(v81, a1) && *((_DWORD *)v67 + 19) <= *((_DWORD *)v79 + 20))
      {
        uint64_t v69 = (uint64_t *)*(unsigned int *)(a1 + 392);
        if ((int)v69 < 1)
        {
          int v82 = 0LL;
        }

        else
        {
          int v70 = (void **)uprv_malloc(8LL * (void)v69);
          if (!v70) {
            goto LABEL_187;
          }
          int v82 = v70;
          icu::UVector::toArray((icu::UVector *)(a1 + 384), v70);
        }

        int v71 = icu::UMemory::operator new(v69, (icu::UMemory *)0x88, v68);
        if (v71)
        {
          int v72 = v71;
          if (v46) {
            uint64_t v73 = (void (***)(icu::UnicodeString *__hidden))&v84;
          }
          else {
            uint64_t v73 = &v94;
          }
          if (v46) {
            uint64_t v74 = &v94;
          }
          else {
            uint64_t v74 = (void (***)(icu::UnicodeString *__hidden))&v84;
          }
          UChar v75 = &v99;
          if (!v46) {
            UChar v75 = &v87;
          }
          int v76 = (char *)&v90;
          if (!v46) {
            int v76 = (char *)&v100 + 12;
          }
          int v77 = *v76;
          uint64_t v78 = (char *)&v100 + 13;
          if (v46) {
            uint64_t v78 = (char *)&v90 + 1;
          }
          sub_180960668( (uint64_t)v71,  (uint64_t)v73,  *((_DWORD *)v67 + 19),  *((_DWORD *)v79 + 20),  (uint64_t)v74,  *(_DWORD *)v75,  *((_DWORD *)v80 + 21),  (uint64_t)v82,  *(_DWORD *)(a1 + 392),  v77,  *v78,  *(void *)(a1 + 96),  (int *)a5);
          sub_18096139C(*(void *)(a1 + 96) + 8LL, v72, a5);
          goto LABEL_84;
        }

        uprv_free(v82);
LABEL_187:
        __int16 v25 = a1;
        int v24 = 7;
        goto LABEL_40;
      }
    }
  }

  int v24 = 65537;
LABEL_39:
  __int16 v25 = a1;
LABEL_40:
  sub_18095F4F8(v25, v24, a2, a3, a5);
LABEL_48:
  icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v84);
  icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v94);
  return a3;
}

LABEL_49:
            int v33 = 0;
            __int128 v34 = v28;
            goto LABEL_50;
          }

          int v18 = u_strstr(ucs1, (const UChar *)"{");
          uint64_t v19 = u_strstr(ucs1, (const UChar *)"{");
          if (v18 && v19)
          {
            unint64_t v20 = (unint64_t)((char *)v18 - (char *)ucs1) >> 1;
            unint64_t v21 = (unint64_t)((char *)v19 - (char *)ucs1) >> 1;
            int v100 = (int)v21 < (int)v20;
            else {
              uint64_t v22 = v21;
            }
            int v92 = v20;
            if (u_strchr(ucs1, 0xFF08u))
            {
              __int16 v23 = -195;
              int v24 = 65289;
              __int16 v25 = -197;
              int v26 = 65288;
            }

            else
            {
              __int16 v23 = 93;
              int v24 = 41;
              __int16 v25 = 91;
              int v26 = 40;
            }

            goto LABEL_42;
          }
        }
      }
    }

    uint64_t v6 = 0LL;
    *a5 = 1;
    return v6;
  }

  return 0LL;
}

  if (BYTE4(v33[1])) {
    uprv_free(v33[0]);
  }
  return v4;
}

  uint64_t v44 = *(char *)(*(void *)(*(void *)a1 + 136LL) + v8);
  if (v44 < 0)
  {
    uint64_t v47 = v44 & 1;
    uint64_t v48 = &a1[4 * v4];
    *((_BYTE *)v48 + 514) = v47;
    *((_BYTE *)v48 + 513) = v47;
    v48[129] = v47;
    const char *v6 = a2;
    int v9 = v47;
LABEL_68:
    uint64_t result = 1LL;
    return result;
  }

  if (v9 > 4)
  {
    if (v9 == 5)
    {
      BYTE2(a1[4 * v4 + 128]) = 5;
LABEL_77:
      int v9 = 1;
      goto LABEL_78;
    }

    if (v9 == 17)
    {
      int v9 = BYTE2(a1[4 * v4 + 128]);
      if (v9 == 10)
      {
        *(_BYTE *)(v7 + icu::LocaleBuilder::setVariant((uint64_t)this, v7, v8) = 10;
        return 1LL;
      }

      goto LABEL_68;
    }

    if (v9 != 13) {
      goto LABEL_67;
    }
LABEL_63:
    uint64_t v49 = &a1[4 * v4];
    *((_BYTE *)v49 + 514) = v9;
    *((_BYTE *)v49 + 513) = v9;
    int v9 = v9 != 0;
    v49[129] = v9;
    const char *v6 = a2;
    goto LABEL_68;
  }

  if (v9 != 2)
  {
LABEL_67:
    BYTE2(a1[4 * v4 + 128]) = v9;
    goto LABEL_68;
  }

  uint64_t v45 = &a1[4 * v4];
  *((_BYTE *)v45 + 514) = 2;
  int v46 = *((unsigned __int8 *)v45 + 513);
  if (v46 == 13)
  {
    uint64_t v51 = 5;
LABEL_76:
    *(_BYTE *)(v7 + icu::LocaleBuilder::setVariant((uint64_t)this, v7, v8) = v51;
    goto LABEL_77;
  }

  if (v46)
  {
    uint64_t v51 = 24;
    goto LABEL_76;
  }

  int v9 = 0;
  if (!*((_BYTE *)a1 + 2536)) {
    *(_BYTE *)(v7 + icu::LocaleBuilder::setVariant((uint64_t)this, v7, v8) = 23;
  }
LABEL_78:
  a1[4 * v4 + 129] = v9;
  const char *v6 = a2;
LABEL_79:
  uint64_t result = 1LL;
  uint64_t v52 = &a1[4 * v4];
  uint64_t v53 = *((unsigned __int16 *)v52 + 254);
  int v54 = *((unsigned __int16 *)v52 + 255);
  if (v53 < v54)
  {
    __int128 v55 = (_WORD *)(*((void *)a1 + 61) + 24LL * *((unsigned __int16 *)v52 + 254) + 12);
    char v56 = v54 - v53;
    do
    {
      if (*((_DWORD *)v55 - 3) < a2) {
        *v55 |= 1 << (v9 != 0);
      }
      v55 += 12;
      --v56;
    }

    while (v56);
    return 1LL;
  }

  return result;
}

        if (result <= 0xFFFD)
        {
          int v29 = a1[6];
          if (v29)
          {
            else {
              uint64_t v30 = -1;
            }
            *(_DWORD *)(v29 + 2LL * ((void)v8 - a1[4])) = v30 + (_DWORD)v5 - *((_DWORD *)a1 + 4);
          }

          *v8++ = result;
          goto LABEL_17;
        }

        if (result >= 0x10000)
        {
          *int v8 = ((result + 67043328) >> 10) - 10240;
          BOOL v31 = a1[6];
          if (v31)
          {
            else {
              uint64_t v32 = -1;
            }
            int v33 = v32 + (_DWORD)v5 - *((_DWORD *)a1 + 4);
            __int128 v34 = a1[4];
            uint64_t v35 = a1[5];
            *(_DWORD *)(v31 + 2 * ((void)v8 - v3(*(void (**)(void))(**((void **)this + 4) + 40LL))(*((void *)this + 4)) = v33;
            uint64_t v36 = v8 + 1;
            if ((unint64_t)(v8 + 1) < v35)
            {
              *uint64_t v36 = result & 0x3FF | 0xDC00;
              *(_DWORD *)(v31 + 2 * ((void)v36 - v3(*(void (**)(void))(**((void **)this + 4) + 40LL))(*((void *)this + 4)) = v33;
              goto LABEL_65;
            }

      if (v30 >= v24) {
        goto LABEL_60;
      }
      int v29 = v17[v30];
      if (v25 != HIBYTE(v29)) {
        goto LABEL_60;
      }
    }

    int v14 = v29 & 0xFFFFFF;
    if (!v14) {
      goto LABEL_60;
    }
    if (v14 >= 0x1F0000)
    {
      uint64_t v36 = (a2 == 0) ^ (v13 + v12 != 1);
      if (a2 < 0) {
        uint64_t v36 = 1;
      }
      if (v36)
      {
        uint64_t v11 = v14;
        uint64_t result = (v13 + v12);
      }

      else
      {
        uint64_t result = result;
      }

      goto LABEL_60;
    }
  }

  if (v13 < a6)
  {
    uint64_t v22 = v13++;
    __int16 v23 = a5;
    goto LABEL_25;
  }

  if (!v9 && v13 + v12 <= 31) {
    return -(v13 + v12);
  }
LABEL_60:
  if ((_DWORD)result) {
    *a7 = v11 & 0xFF7FFFFF;
  }
  return result;
}

      *(_DWORD *)(v6 + 84) = v12;
      unint64_t v21 = v2;
      goto LABEL_50;
    }
  }

  uint64_t v19 = 2 * v3;
  v9 -= v19;
  unint64_t v20 = v19 >> 1;
  int v17 = v3 - (v19 >> 1);
  if (v10)
  {
    if (v19)
    {
      unint64_t v21 = v2;
      while (1)
      {
        uint64_t v22 = *v21++;
        uint64_t v12 = v22;
        if ((v22 & 0xF800) == 0xD800)
        {
          if (v20 < 2) {
            goto LABEL_46;
          }
          if ((v12 & 0x400) != 0) {
            goto LABEL_46;
          }
          __int16 v23 = *v21;
          if ((*v21 & 0xFC00) != 0xDC00) {
            goto LABEL_46;
          }
          unint64_t v21 = v2 + 2;
          --v20;
          *unsigned int v7 = BYTE1(v12);
          int v24 = v33;
          v33[1] = v12;
          v24[2] = HIBYTE(v23);
          v24[3] = v23;
          unsigned int v7 = v24 + 4;
          __int16 v25 = v32;
          *uint64_t v32 = vdupq_n_s32(v15);
          uint64_t v32 = v25 + 1;
          int v33 = v7;
          v15 += 2;
        }

        else
        {
          *unsigned int v7 = BYTE1(v12);
          int v26 = v33;
          v33[1] = v12;
          unsigned int v7 = v26 + 2;
          int v33 = v7;
          int v27 = v32;
          v32->i32[0] = v15;
          uint64_t v32 = (int32x4_t *)&v27->u64[1];
          v27->i32[1] = v15++;
        }

        unsigned int v2 = v21;
        if (!--v20) {
          goto LABEL_42;
        }
      }
    }

    goto LABEL_41;
  }

  if (!v19)
  {
LABEL_41:
    unint64_t v21 = v2;
LABEL_42:
    if (!v17 || !v9) {
      goto LABEL_52;
    }
    uint64_t v12 = *v21;
    unsigned int v2 = v21 + 1;
    if ((v12 & 0xF800) != 0xD800)
    {
      LOBYTE(v31) = BYTE1(v12);
      BYTE1(v31) = v12;
      int v17 = 2;
      ++v21;
      goto LABEL_51;
    }

    goto LABEL_11;
  }

  while (1)
  {
    unint64_t v21 = v2 + 1;
    uint64_t v12 = *v2;
    if ((v12 & 0xF800) != 0xD800)
    {
      *unsigned int v7 = BYTE1(v12);
      uint64_t v30 = v33;
      v33[1] = v12;
      unsigned int v7 = v30 + 2;
      ++v2;
      goto LABEL_40;
    }

    if (v20 < 2) {
      break;
    }
    if ((v12 & 0x400) != 0) {
      break;
    }
    __int128 v28 = *v21;
    if ((*v21 & 0xFC00) != 0xDC00) {
      break;
    }
    v2 += 2;
    --v20;
    *unsigned int v7 = BYTE1(v12);
    int v29 = v33;
    v33[1] = v12;
    v29[2] = HIBYTE(v28);
    v29[3] = v28;
    unsigned int v7 = v29 + 4;
LABEL_40:
    int v33 = v7;
    if (!--v20) {
      goto LABEL_41;
    }
  }

      *(_DWORD *)(v6 + 84) = v12;
      unint64_t v21 = v2;
      goto LABEL_50;
    }
  }

  uint64_t v19 = v9 & 0xFFFFFFFE;
  v9 -= v19;
  unint64_t v20 = v19 >> 1;
  int v17 = v3 - (v19 >> 1);
  if (v10)
  {
    if (v19)
    {
      unint64_t v21 = v2;
      while (1)
      {
        uint64_t v22 = *v21++;
        uint64_t v12 = v22;
        if ((v22 & 0xF800) == 0xD800)
        {
          if (v20 < 2) {
            goto LABEL_46;
          }
          if ((v12 & 0x400) != 0) {
            goto LABEL_46;
          }
          __int16 v23 = *v21;
          if ((*v21 & 0xFC00) != 0xDC00) {
            goto LABEL_46;
          }
          unint64_t v21 = v2 + 2;
          --v20;
          *(_BYTE *)unsigned int v7 = v12;
          int v24 = v12 >> 8;
          __int16 v25 = v37;
          *((_BYTE *)v37 + 1) = v24;
          v25[1] = v23;
          unsigned int v7 = v25 + 2;
          int v26 = v36;
          *uint64_t v36 = vdupq_n_s32(v15);
          uint64_t v36 = v26 + 1;
          UChar v37 = v7;
          v15 += 2;
        }

        else
        {
          *(_BYTE *)unsigned int v7 = v12;
          int v27 = v12 >> 8;
          __int128 v28 = v37;
          *((_BYTE *)v37 + 1) = v27;
          unsigned int v7 = v28 + 1;
          UChar v37 = v28 + 1;
          int v29 = v36;
          v36->i32[0] = v15;
          uint64_t v36 = (int32x4_t *)&v29->u64[1];
          v29->i32[1] = v15++;
        }

        unsigned int v2 = v21;
        if (!--v20) {
          goto LABEL_42;
        }
      }
    }

    goto LABEL_41;
  }

  if (!v19)
  {
LABEL_41:
    unint64_t v21 = v2;
LABEL_42:
    if (!v17 || !v9) {
      goto LABEL_52;
    }
    uint64_t v12 = *v21;
    unsigned int v2 = v21 + 1;
    if ((v12 & 0xF800) != 0xD800)
    {
      LOWORD(v35) = v12;
      int v17 = 2;
      ++v21;
      goto LABEL_51;
    }

    goto LABEL_11;
  }

  while (1)
  {
    unint64_t v21 = v2 + 1;
    uint64_t v12 = *v2;
    if ((v12 & 0xF800) != 0xD800)
    {
      *(_BYTE *)unsigned int v7 = v12;
      int v33 = v12 >> 8;
      __int128 v34 = v37;
      *((_BYTE *)v37 + 1) = v33;
      unsigned int v7 = v34 + 1;
      ++v2;
      goto LABEL_40;
    }

    if (v20 < 2) {
      break;
    }
    if ((v12 & 0x400) != 0) {
      break;
    }
    uint64_t v30 = *v21;
    if ((*v21 & 0xFC00) != 0xDC00) {
      break;
    }
    v2 += 2;
    --v20;
    *(_BYTE *)unsigned int v7 = v12;
    BOOL v31 = v12 >> 8;
    uint64_t v32 = v37;
    *((_BYTE *)v37 + 1) = v31;
    v32[1] = v30;
    unsigned int v7 = v32 + 2;
LABEL_40:
    UChar v37 = v7;
    if (!--v20) {
      goto LABEL_41;
    }
  }

    ++v3;
    goto LABEL_69;
  }

    int v17 = (v31 + v17);
    if (v10 <= v31) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v31;
    }
    if (v10 <= v31) {
      uint64_t v10 = 0;
    }
    else {
      v10 -= v31;
    }
    unsigned int v16 = v30;
    if (!v29) {
      goto LABEL_64;
    }
    v13 += v32;
    if (v10 >= 1)
    {
      *v13++ = v18[(int)v20];
      --v10;
    }

    int v17 = (v17 + 1);
    else {
      uint64_t v19 = v36 - ((unint64_t)((char *)v21 - (char *)v35) >> 1);
    }
    int v18 = v21;
  }

  unsigned int v16 = v30;
LABEL_64:
  usprep_close(v16);
  return u_terminateUChars(v33, v34, v17, (int *)status);
}

      uint64_t v36 = v33 - v35;
      UChar v37 = v16;
LABEL_55:
      if (v37 >= 1)
      {
        uint64_t v38 = (v32 & 2) != 0 ? (uint64_t)v43 : *((void *)a4 + 3);
        int v39 = icu::UnicodeString::indexOf((uint64_t)this, v38, v35, v37, v19, v18);
        if ((v39 & 0x80000000) == 0)
        {
          int v40 = v39;
          icu::UnicodeString::doReplace(this, v39, v16, a7, v15, v26);
          int v18 = v19 + v18 - v16 - v40;
          uint64_t v19 = v40 + v26;
        }
      }

      return this;
    }
  }

  return this;
}

  *(void *)(a1 + 152) = icu::ZoneMeta::getCanonicalCLDRID((icu::ZoneMeta *)a4, (const icu::UnicodeString *)a5, v19);
  icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v43);
  if (*a5 >= 1) {
    goto LABEL_50;
  }
  return a1;
}

    *(_BYTE *)(a1 + 40) = v17;
    icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1);
  }

  if (v16 != 48) {
    goto LABEL_40;
  }
  *a2 = 0;
  icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1);
  int v29 = 0;
  while (1)
  {
    uint64_t v30 = *(_DWORD *)(a1 + 68);
    if (v30 == -1)
    {
      uint64_t v30 = icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1);
      *(_DWORD *)(a1 + 68) = v30;
    }

    BOOL v31 = *a2;
    uint64_t v32 = v30 & 7 | (8 * *a2);
    *a2 = v32;
    if (v32 > 255) {
      *a2 = v31 & 0x1FFFFFFF;
    }
    else {
      icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1);
    }
    if (--v29 == -3) {
      goto LABEL_83;
    }
  }

  if (!v29) {
    icu::RegexCompile::error((void *)a1, 66307);
  }
LABEL_83:
  *((_BYTE *)a2 + 4) = 1;
LABEL_86:
  *(_BYTE *)(a1 + 42) = 1;
}

  icu::UnicodeString::~UnicodeString((void *)v32, (icu::UnicodeString *)v43);
  icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)v44);
  return sub_1808C144C((_BYTE ***)&v38);
}

icu::UnicodeString *icu::BreakIterator::getDisplayName( icu::BreakIterator *this, const icu::Locale *a2, icu::UnicodeString *a3)
{
  Default = icu::Locale::getDefault(this);
  return icu::Locale::getDisplayName((char **)this, (char **)Default, a2);
}

BOOL sub_1807D4C58(const char *a1)
{
  return !strcmp(a1, "CN") || !strcmp(a1, "HK") || !strcmp(a1, "MO") || strcmp(a1, "TW") == 0;
}

uint64_t uloc_getDisplayKeyword(char *a1, char *a2, UChar *a3, int a4, int *a5)
{
  if (a5 && *a5 <= 0)
  {
    if ((a4 & 0x80000000) == 0 && (a3 || !a4)) {
      return sub_1807D4FA8("icudt74l-lang", a2, "Keys", 0LL, a1, a1, a3, a4, a5);
    }
    *a5 = 1;
  }

  return 0LL;
}

uint64_t uloc_getDisplayKeywordValue(char *a1, char *a2, char *a3, UChar *a4, int a5, int *a6)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if (!a6 || *a6 > 0) {
    return 0LL;
  }
  if (a5 < 0 || !a4 && a5)
  {
    uint64_t v7 = 0LL;
    *a6 = 1;
    return v7;
  }

  memset(&v21[1], 0, 48);
  *(void *)length = 0LL;
  uint64_t v20 = 0LL;
  v21[0] = (char *)&v21[1] + 5;
  LODWORD(v21[1]) = 40;
  *(void *)int32_t count = 0LL;
  icu::CharStringByteSink::CharStringByteSink(count, (uint64_t)v21);
  ulocimp_getKeywordValue(a1, a2, (uint64_t)count, a6);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)count);
  if (!uprv_stricmp(a2, "currency"))
  {
    count[0] = 0;
    uint64_t v14 = ures_open("icudt74l-curr", a3, a6);
    uint64_t v15 = ures_getByKey(v14, "Currencies", 0LL, a6);
    uint64_t v16 = ures_getByKeyWithFallback(v15, v21[0], 0LL, (UErrorCode *)a6);
    StringByint Index = ures_getStringByIndex(v16, 1, count, a6);
    if (*a6 >= 1)
    {
      if (*a6 != 2)
      {
        uint64_t v7 = 0LL;
        goto LABEL_22;
      }

      *a6 = -127;
    }

    if (StringByIndex)
    {
      uint64_t v7 = count[0];
      if (count[0] <= a5)
      {
        u_memcpy(a4, StringByIndex, count[0]);
        uint64_t v18 = count[0];
LABEL_21:
        uint64_t v7 = u_terminateUChars((uint64_t)a4, a5, v18, a6);
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v7 = length[0];
      if (length[0] <= a5)
      {
        u_charsToUChars(v21[0], a4, length[0]);
        uint64_t v18 = length[0];
        goto LABEL_21;
      }
    }

    *a6 = 15;
LABEL_22:
    if (v16) {
      ures_close(v16);
    }
    if (v15) {
      ures_close(v15);
    }
    if (v14) {
      ures_close(v14);
    }
    goto LABEL_28;
  }

  uint64_t v7 = sub_1807D4FA8("icudt74l-lang", a3, "Types", a2, v21[0], v21[0], a4, a5, a6);
LABEL_28:
  if (BYTE4(v21[1])) {
    uprv_free(v21[0]);
  }
  return v7;
}

uint64_t sub_1807D4FA8( const char *a1, char *a2, char *__s1, char *a4, char *a5, const char *a6, UChar *a7, int a8, int *a9)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  unsigned int v26 = 0;
  if (!a5)
  {
    uint64_t v19 = ures_open(a1, a2, a9);
    uint64_t v20 = v19;
    if (*a9 <= 0)
    {
      StringByKey = ures_getStringByKey(v19, __s1, (int *)&v26, a9);
      if (!v20) {
        goto LABEL_9;
      }
    }

    else
    {
      StringByKey = 0LL;
      if (!v19) {
        goto LABEL_9;
      }
    }

    ures_close(v20);
    goto LABEL_9;
  }

  int v16 = strncmp(__s1, "Languages", 9uLL);
  if (!v16 && strtol(a5, 0LL, 10))
  {
    *a9 = 2;
    goto LABEL_16;
  }

  StringByKey = uloc_getTableStringWithFallback(a1, a2, __s1, a4, a5, (int *)&v26, a9);
  int v18 = *a9;
  if (!v16 && v18 >= 1)
  {
    *a9 = 0;
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    memset(v27, 0, sizeof(v27));
    icu::Locale::createCanonical((icu::Locale *)a5, (icu::Locale *)v27);
    StringByKey = uloc_getTableStringWithFallback(a1, a2, __s1, a4, *((char **)&v28 + 1), (int *)&v26, a9);
    icu::Locale::~Locale((icu::Locale *)v27);
LABEL_9:
    int v18 = *a9;
  }

  if (v18 > 0)
  {
LABEL_16:
    size_t v22 = strlen(a6);
    unsigned int v26 = v22;
    int32_t v23 = uprv_min(v22, a8);
    u_charsToUChars(a6, a7, v23);
    *a9 = -127;
    return u_terminateUChars((uint64_t)a7, a8, v26, a9);
  }

  int32_t v21 = uprv_min(v26, a8);
  if (v21 >= 1 && StringByKey) {
    u_memcpy(a7, StringByKey, v21);
  }
  return u_terminateUChars((uint64_t)a7, a8, v26, a9);
}

void sub_1807D51DC(int *a1)
{
  unsigned int v2 = (int8x16_t *)sub_1807E067C(a1);
  if (*a1 <= 0)
  {
    uint64_t v4 = (uint64_t)v2;
    v5.i64[0] = v2[20].i64[0];
    v5.i64[1] = v2[21].i64[1];
    if ((vmaxv_u16((uint16x4_t)vmovn_s32( vuzp1q_s32( (int32x4_t)vceqzq_s64((int64x2_t)vextq_s8(v2[19], v2[19], 8uLL)),  (int32x4_t)vceqzq_s64(v5)))) & 1) != 0)
    {
      int v6 = 2;
    }

    else
    {
      uint64_t v7 = icu::UMemory::operator new((icu::UMemory *)0x58, v3);
      if (v7)
      {
        qword_18C534D40 = sub_1807D5368(v7, (uint64_t *)(v4 + 304), v4);
        sub_180820C94(0xCu, (uint64_t)sub_1807D5290);
        return;
      }

      qword_18C534D40 = 0LL;
      int v6 = 7;
    }

    *a1 = v6;
  }

uint64_t sub_1807D5290()
{
  uint64_t v0 = (void *)qword_18C534D40;
  if (qword_18C534D40)
  {
    icu::BytesTrie::~BytesTrie((void **)(qword_18C534D40 + 8));
    icu::UMemory::operator delete(v0);
  }

  qword_18C534D40 = 0LL;
  atomic_store(0, &dword_18C4489B8);
  return 1LL;
}

uint64_t sub_1807D52D8(int *a1)
{
  if (*a1 > 0) {
    return 0LL;
  }
  unsigned int v3 = atomic_load(&dword_18C4489B8);
  if (v3 == 2 || !icu::umtx_initImplPreInit(&dword_18C4489B8))
  {
    if (dword_18C4489BC >= 1) {
      *a1 = dword_18C4489BC;
    }
  }

  else
  {
    sub_1807D51DC(a1);
    dword_18C4489BC = *a1;
    icu::umtx_initImplPostInit(&dword_18C4489B8);
  }

  return qword_18C534D40;
}

uint64_t sub_1807D5368(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)a1 = a3;
  uint64_t v4 = *a2;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = -1;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 1);
  *(void *)(a1 + 56) = a2[3];
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 8);
  int64x2_t v5 = (_DWORD *)a2[5];
  *(_DWORD *)(a1 + 68) = *v5;
  *(_DWORD *)(a1 + 72) = v5[1];
  *(_DWORD *)(a1 + 76) = v5[2];
  *(_DWORD *)(a1 + 80) = v5[3];
  int v17 = 0;
  v13[0] = "en";
  v13[1] = "Latn";
  _OWORD v13[2] = "US";
  uint64_t v14 = 0LL;
  int v15 = sub_1807E2910("US");
  uint64_t v16 = 7LL;
  int v12 = 0;
  v8[0] = "en";
  v8[1] = "Latn";
  v8[2] = "GB";
  uint64_t v9 = 0LL;
  int v10 = sub_1807E2910("GB");
  uint64_t v11 = 7LL;
  uint64_t v7 = v8;
  *(_DWORD *)(a1 + 84) = (sub_1807D549C(a1, (uint64_t)v13, (uint64_t)&v7, 1, 400LL, 0, 0) >> 3) & 0x7F;
  if (v9) {
    sub_1807E29A8((uint64_t)v8);
  }
  if (v14) {
    sub_1807E29A8((uint64_t)v13);
  }
  return a1;
}

uint64_t sub_1807D549C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6, int a7)
{
  *(_OWORD *)((char *)v39 + 8) = *(_OWORD *)(a1 + 16);
  DWORD2(v39[1]) = *(_DWORD *)(a1 + 32);
  int v10 = sub_1807D5860((icu::BytesTrie *)v39, *(unsigned __int8 **)a2, 0);
  if (a4 <= 1 || v10 < 0)
  {
    if (a4 < 1)
    {
      uint64_t v12 = 4294967072LL;
      goto LABEL_53;
    }

    unint64_t v11 = 0LL;
  }

  else
  {
    unint64_t v11 = (*(void *)&v39[1] - *((void *)&v39[0] + 1)) | ((unint64_t)(DWORD2(v39[1]) + 2) << 59);
  }

  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int v34 = (v11 >> 59) - 2;
  uint64_t v33 = v11 & 0x7FFFFFFFFFFFFFFLL;
  unsigned int v30 = -1;
  int v32 = -1;
  uint64_t v36 = a4;
  int v14 = v10;
  do
  {
    uint64_t v15 = *(void *)(a3 + 8 * v13);
    if (v10 < 0) {
      goto LABEL_12;
    }
    if (v13)
    {
      DWORD2(v39[1]) = v34;
      *(void *)&v39[1] = *((void *)&v39[0] + 1) + v33;
    }

    int v16 = sub_1807D5860((icu::BytesTrie *)v39, *(unsigned __int8 **)v15, 1);
    if (v16 < 0)
    {
LABEL_12:
      if (!strcmp(*(const char **)a2, *(const char **)v15))
      {
        signed int v19 = 0;
        unsigned int v18 = 0;
      }

      else
      {
        unsigned int v18 = 0;
        signed int v19 = *(_DWORD *)(a1 + 68);
      }

      int v17 = 1;
    }

    else
    {
      int v17 = 0;
      unsigned int v18 = v16 & 0x180;
      signed int v19 = v16 & 0xFFFFFE7F;
    }

    int v20 = a5 + 7;
    if (a6 == 1) {
      int v21 = v19 >> 2;
    }
    else {
      int v21 = v19;
    }
    if (v21 <= v20 >> 3)
    {
      if (((v18 == 0) & ~v17) != 0)
      {
        int v23 = sub_1807D5900( (uint64_t)v39,  (*(void *)&v39[1] - *((void *)&v39[0] + 1)) | ((unint64_t)(DWORD2(v39[1]) + 2) << 59),  *(char **)(a2 + 8),  *(char **)(v15 + 8));
        unsigned int v18 = v23 & 0x100;
        unsigned int v22 = v23 & 0xFFFFFEFF;
      }

      else
      {
        unsigned int v22 = !strcmp(*(const char **)(a2 + 8), *(const char **)(v15 + 8)) ? 0 : *(_DWORD *)(a1 + 72);
      }

      int v24 = v20 >> 3;
      signed int v25 = v22 + v21;
      int v26 = (v20 >> 3) - v25;
      if (v24 >= v25)
      {
        if (strcmp(*(const char **)(a2 + 16), *(const char **)(v15 + 16)))
        {
          if ((v17 | (v18 >> 8)) == 1)
          {
            v25 += *(_DWORD *)(a1 + 76);
          }

          else
          {
            if (*(_DWORD *)(a1 + 80) > v26) {
              goto LABEL_48;
            }
            v25 += sub_1807D59AC( (icu::BytesTrie *)v39,  (*(void *)&v39[1] - *((void *)&v39[0] + 1)) | ((unint64_t)(DWORD2(v39[1]) + 2) << 59),  *(char **)(*(void *)(a1 + 48)
                              + 8LL * *(unsigned __int8 *)(*(void *)(a1 + 40) + *(int *)(a2 + 32))),
                     *(char **)(*(void *)(a1 + 48)
                              + 8LL * *(unsigned __int8 *)(*(void *)(a1 + 40) + *(int *)(v15 + 32))),
                     v26);
          }
        }

        uint64_t v27 = (8 * v25);
        if ((_DWORD)v27)
        {
          if ((int)v27 >= (int)a5)
          {
            if ((_DWORD)v27 == (_DWORD)a5 && (v32 & 0x80000000) == 0)
            {
              if (a7 != 1 || (uint64_t v40 = a2, (sub_1807D549C(a1, v15, &v40, 1LL, a5, a6, 0LL) & 0x80000000) == 0))
              {
                int v28 = v32;
                unsigned int v30 = sub_1807E11AC(*(void *)a1, v15, *(const char ***)(a3 + 8LL * v32), v30);
                if ((v30 & 1) != 0) {
                  int v28 = v13;
                }
                int v32 = v28;
              }
            }
          }

          else
          {
            if (a7 != 1) {
              goto LABEL_40;
            }
            uint64_t v40 = a2;
            if ((sub_1807D549C(a1, v15, &v40, 1LL, a5, a6, 0LL) & 0x80000000) == 0) {
              goto LABEL_40;
            }
          }
        }

        else
        {
          uint64_t v27 = (*(_DWORD *)(v15 + 36) ^ *(_DWORD *)(a2 + 36));
          if ((int)v27 < (int)a5)
          {
            if (a7 != 1 || (uint64_t v40 = a2, (sub_1807D549C(a1, v15, &v40, 1LL, a5, a6, 0LL) & 0x80000000) == 0))
            {
              if (!(_DWORD)v27) {
                goto LABEL_53;
              }
LABEL_40:
              unsigned int v30 = -1;
              a5 = v27;
              int v32 = v13;
            }
          }
        }
      }
    }

LABEL_48:
    ++v13;
    uint64_t v12 = (v12 + 1024);
    int v10 = v14;
  }

  while (v36 != v13);
  if (v32 >= 0) {
    uint64_t v12 = a5 | (v32 << 10);
  }
  else {
    uint64_t v12 = 4294967072LL;
  }
LABEL_53:
  icu::BytesTrie::~BytesTrie((void **)v39);
  return v12;
}

  if (v6 < v5)
  {
    __int128 v29 = v5 - v6;
    do
    {
      unsigned int v30 = *v6++;
      __int128 v31 = a1[1];
      int v32 = *(char *)(v31 + 64);
      *(_BYTE *)(v31 + 64) = v32 + 1;
      *(_BYTE *)(v31 + v32 + 65) = v30;
      --v29;
    }

    while (v29);
    int v6 = v5;
  }

  *a2 = 0;
LABEL_57:
  *(_DWORD *)(v34 + 160) = v11;
  a1[4] = v4;
  a1[2] = v6;
  return result;
}

    uint64_t v33 = *((_DWORD *)a1 + 11);
    if ((_DWORD)v32 == v33) {
      unsigned int v18 = v11;
    }
    else {
      unsigned int v18 = v32;
    }
    if (a3 && (_DWORD)v32 != v33)
    {
      int v34 = v66(v7, v32);
      unint64_t v11 = v65;
      a3 = v66;
      unsigned int v18 = v34;
    }

    if (v6) {
      const char *v6 = v18;
    }
    goto LABEL_63;
  }

  int v32 = *(unsigned __int8 *)(v31 + v30);
  if ((v14 & 1) == 0) {
    goto LABEL_48;
  }
LABEL_57:
  if ((_DWORD)v32 == (_DWORD)v13)
  {
    int v32 = v13;
  }

  else
  {
    if (!a3) {
      return (v5 - 1);
    }
    __int128 v35 = v11;
    if ((_DWORD)v32 != *((_DWORD *)a1 + 11))
    {
      uint64_t v36 = v7;
      __int128 v55 = v7;
      __int128 v37 = v18;
      __int128 v35 = v66(v36, v32);
      unsigned int v18 = v37;
      uint64_t v7 = v55;
      unint64_t v11 = v65;
      a3 = v66;
    }

    if (v35 != (_DWORD)v18) {
      return (v5 - 1);
    }
  }

          __int128 v35 = (char)v18;
        }

        else
        {
          int v10 = v12 - 2;
          __int128 v35 = 37LL;
        }

    uint64_t v12 = *(_DWORD *)(v4 + 20);
  }

  while (v14 < v12);
LABEL_49:
  if (*(int *)(v4 + 12) >= 1)
  {
    __int128 v38 = 0LL;
    do
    {
      __int128 v39 = v3[v38];
      if (v39 < 0) {
        __int128 v39 = -v39;
      }
      v3[v38++] = v3[(v39 >> 5) + 34855];
    }

    while (v38 < *(int *)(v4 + 12));
  }

  *(_DWORD *)(v4 + 20) = v10;
  return result;
}

      if ((v11 & 2) != 0 && v20 >= 2)
      {
        int v32 = (unint64_t)v20 >> 24;
        uint64_t v33 = *(unsigned __int8 *)(a2 + v32);
        int v34 = *(void *)(a3 + 32);
        if (v34)
        {
          __int128 v35 = *(unsigned __int8 *)(v34 + v32);
          if (v35) {
            LODWORD(v20) = v20 & 0xFFFFFF | (v35 << 24);
          }
          else {
            LODWORD(v20) = icu::CollationSettings::reorderEx((icu::CollationSettings *)a3, v20);
          }
        }

        uint64_t v36 = BYTE3(v20);
        if (v33) {
          __int128 v37 = v36 == HIBYTE(v121);
        }
        else {
          __int128 v37 = 0;
        }
        if (v37)
        {
LABEL_68:
          if ((v20 & 0xFF0000) != 0)
          {
            v123[0] = BYTE2(v20);
            v123[1] = BYTE1(v20);
            v123[2] = v20;
            if ((_BYTE)v20) {
              uint64_t v40 = 3;
            }
            else {
              uint64_t v40 = 2;
            }
            if (BYTE1(v20)) {
              uint64_t v41 = v40;
            }
            else {
              uint64_t v41 = 1LL;
            }
            (*(void (**)(_DWORD *, _BYTE *, uint64_t))(*(void *)a4 + 16LL))(a4, v123, v41);
          }

          if (!a7 && a4[5] > a4[4])
          {
            goto LABEL_248;
          }

          continue;
        }

        if (v121)
        {
          if (v20 >= v121)
          {
            __int128 v38 = -1;
            goto LABEL_63;
          }

          if (v36 >= 3)
          {
            __int128 v38 = 3;
LABEL_63:
            sub_1808B3FB4(a4, v38);
          }
        }

        sub_1808B3FB4(a4, SBYTE3(v20));
        if (v33) {
          __int128 v39 = v20;
        }
        else {
          __int128 v39 = 0;
        }
        int v121 = v39;
        goto LABEL_68;
      }
    }

    while (!(_DWORD)v19);
    int v42 = BYTE3(v19);
    if ((v11 & 4) == 0) {
      goto LABEL_80;
    }
    uint64_t v43 = v118;
    if (v19 < 0x10000)
    {
LABEL_92:
      if ((v11 & 8) == 0) {
        goto LABEL_164;
      }
      goto LABEL_93;
    }

    uint64_t v44 = WORD1(v19);
    int v46 = (v109 & 0x800) == 0 || (_DWORD)v20 != 0x2000000;
    if (v44 == 1280 && v46)
    {
      ++v107;
      goto LABEL_92;
    }

    if ((v109 & 0x800) == 0)
    {
      if (v107)
      {
        if (v107 < 34)
        {
          uint64_t v51 = v107 - 1;
        }

        else
        {
          uint64_t v50 = v107 + 32;
          do
          {
            sub_1808B3F60((uint64_t)&v128, 37);
            v50 -= 33;
          }

          while (v50 > 0x41);
          uint64_t v51 = v50 - 33;
          int v42 = BYTE3(v19);
        }

        int v66 = v51 + 5;
        UChar v67 = 69 - v51;
        if (v42 >= 5) {
          unint64_t v68 = v67;
        }
        else {
          unint64_t v68 = v66;
        }
        sub_1808B3F60((uint64_t)&v128, v68);
        LOWORD(v44) = WORD1(v19);
      }

      sub_1808B4024((uint64_t)&v128, v44);
      uint64_t v107 = 0;
      goto LABEL_80;
    }

    if (v107)
    {
      int v54 = (v107 - 1) % 33;
      if (v104 >= 0x500) {
        __int128 v55 = 69 - v54;
      }
      else {
        __int128 v55 = v54 + 5;
      }
      sub_1808B3F60((uint64_t)&v128, v55);
      char v56 = 33 * ((v107 - 1) / 33);
      if (v56 >= 1)
      {
        __int128 v57 = v107 - v54 + 32;
        do
        {
          sub_1808B3F60((uint64_t)&v128, 37);
          v57 -= 33;
          char v56 = v57 - 33;
        }

        while (v57 > 0x21);
      }

      uint64_t v107 = v56;
      uint64_t v44 = WORD1(v19);
    }

    else
    {
      uint64_t v107 = 0;
    }

    if ((v20 - 1) >> 25)
    {
      if ((v19 & 0xFF0000) != 0) {
        int v62 = 2;
      }
      else {
        int v62 = 1;
      }
      uint64_t v63 = v130;
      if ((int)v130 + v62 <= SLODWORD(v129[0]))
      {
LABEL_143:
        if ((v19 & 0xFF0000) != 0)
        {
          v128[v63] = v44;
          v128[(int)v130 + 1] = BYTE3(v19);
          LODWORD(v130) = v130 + 2;
        }

        else
        {
          LODWORD(v130) = v63 + 1;
          v128[v63] = BYTE3(v19);
        }

        uint64_t v104 = v44;
      }

      else
      {
        int v102 = v44;
        if (sub_1808B40A8((uint64_t)&v128, v62))
        {
          uint64_t v63 = v130;
          uint64_t v44 = v102;
          goto LABEL_143;
        }

        uint64_t v104 = v102;
      }

      uint64_t v43 = v118;
      int v42 = BYTE3(v19);
      if ((v11 & 8) == 0) {
        goto LABEL_164;
      }
LABEL_93:
      if (v109 > 0xFFF)
      {
      }

      else if (!(_DWORD)v20)
      {
        goto LABEL_164;
      }

      uint64_t v47 = BYTE1(v19);
      if ((v19 & 0xC000) == 0 && BYTE1(v19) >= 2u)
      {
        ++v43;
        goto LABEL_164;
      }

      if ((v109 & 0x100) != 0)
      {
        if (v43)
        {
          if (v43 < 14)
          {
            uint64_t v53 = v43 - 1;
          }

          else
          {
            int v111 = v42;
            uint64_t v52 = v43 + 12;
            do
            {
              sub_1808B3F60((uint64_t)v131, 48);
              v52 -= 13;
            }

            while (v52 > 0x19);
            uint64_t v53 = v52 - 13;
            int v42 = v111;
          }

          sub_1808B3F60((uint64_t)v131, 16 * v53 + 48);
        }

        int v64 = BYTE1(v19) >= 2u;
        int v65 = ~(v19 >> 10) & 0x30;
      }

      else
      {
        if (v43)
        {
          if (BYTE1(v19) <= 1u && !(_DWORD)v132)
          {
LABEL_163:
            sub_1808B3F60((uint64_t)v131, v47);
            uint64_t v43 = v118;
            goto LABEL_164;
          }

          if (v43 < 8)
          {
            uint64_t v49 = v43 - 1;
          }

          else
          {
            int v110 = v42;
            uint64_t v48 = v43 + 6;
            do
            {
              sub_1808B3F60((uint64_t)v131, 112);
              v48 -= 7;
            }

            while (v48 > 0xD);
            uint64_t v49 = v48 - 7;
            int v42 = v110;
          }

          if (BYTE1(v19) < 2u) {
            uint64_t v69 = v49 + 1;
          }
          else {
            uint64_t v69 = 13 - v49;
          }
          sub_1808B3F60((uint64_t)v131, 16 * v69);
        }

        int v64 = BYTE1(v19) >= 2u;
        int v65 = ((v19 >> 10) & 0x30) + 208;
      }

      int v118 = 0;
      if (v64) {
        uint64_t v47 = v65;
      }
      goto LABEL_163;
    }

    int v42 = BYTE3(v19);
    if (v117 < (int)v130 - 1)
    {
      int v58 = &v128[v117];
      __int128 v59 = &v128[(int)v130 - 2];
      do
      {
        int v60 = *v58;
        *v58++ = v59[1];
        v59[1] = v60;
        int v64 = v58 >= v59--;
      }

      while (!v64);
    }

    if ((_DWORD)v20 == 1) {
      uint64_t v61 = 1;
    }
    else {
      uint64_t v61 = 2;
    }
    sub_1808B3F60((uint64_t)&v128, v61);
    uint64_t v104 = 0;
    uint64_t v117 = v130;
LABEL_80:
    uint64_t v43 = v118;
    if ((v11 & 8) != 0) {
      goto LABEL_93;
    }
LABEL_164:
    int v118 = v43;
    if ((v11 & 0x10) == 0)
    {
      int v70 = v116;
      uint64_t v15 = v117;
      goto LABEL_215;
    }

    int v71 = v108 & v19;
    int v72 = v116;
    if ((v108 & v19) != 0x500)
    {
      if (v105 == 512)
      {
        if ((v109 & 0x100) == 0)
        {
          if (v116)
          {
            if (v116 < 34)
            {
              uint64_t v74 = v116 - 1;
            }

            else
            {
              int v112 = v42;
              uint64_t v73 = v116 + 32;
              do
              {
                sub_1808B3F60((uint64_t)v126, 37);
                v73 -= 33;
              }

              while (v73 > 0x41);
              uint64_t v74 = v73 - 33;
              int v42 = v112;
            }

            uint64_t v81 = v74 + 5;
            int v82 = 69 - v74;
            if (v71 >= 0x500) {
              int v83 = v82;
            }
            else {
              int v83 = v81;
            }
            sub_1808B3F60((uint64_t)v126, v83);
          }

          uint64_t v80 = v71 + 0x4000;
          goto LABEL_198;
        }

        if (v71 >= 0x101)
        {
          if (v19 < 0x10000)
          {
            v71 += 0x4000;
          }

          else
          {
            if ((v71 ^ 0xC000) >> 8 >= 0xC5) {
              v71 ^= 0xC000u;
            }
            else {
              int v71 = (v71 ^ 0xC000) - 0x4000;
            }
            int v72 = v116;
          }
        }

        if (v72)
        {
          if (v72 < 34)
          {
            BOOL v86 = v72 - 1;
          }

          else
          {
            uint64_t v114 = v42;
            __int16 v85 = v72 + 32;
            do
            {
              sub_1808B3F60((uint64_t)v126, 165);
              v85 -= 33;
            }

            while (v85 > 0x41);
            BOOL v86 = v85 - 33;
            int v42 = v114;
          }

          BOOL v87 = v86 - 123;
          uint64_t v88 = -59 - v86;
          if (v71 >> 8 >= 0x85) {
            unsigned int v89 = v88;
          }
          else {
            unsigned int v89 = v87;
          }
          sub_1808B3F60((uint64_t)v126, v89);
        }

        int v84 = v71;
      }

      else
      {
        if (v116)
        {
          if (v116 < 98)
          {
            int v76 = v116 - 1;
          }

          else
          {
            __int16 v113 = v42;
            UChar v75 = v116 + 96;
            do
            {
              sub_1808B3F60((uint64_t)v126, 101);
              v75 -= 97;
            }

            while (v75 > 0xC1);
            int v76 = v75 - 97;
            int v42 = v113;
          }

          int v77 = v76 + 5;
          uint64_t v78 = -59 - v76;
          if (v71 >= 0x500) {
            uint64_t v79 = v78;
          }
          else {
            uint64_t v79 = v77;
          }
          sub_1808B3F60((uint64_t)v126, v79);
        }

        uint64_t v80 = v71 - 0x4000;
LABEL_198:
        if (v71 <= 0x500) {
          int v84 = v108 & v19;
        }
        else {
          int v84 = v80;
        }
      }

      sub_1808B4024((uint64_t)v126, v84);
      int v70 = 0;
      goto LABEL_214;
    }

    int v70 = v116 + 1;
LABEL_214:
    uint64_t v15 = v117;
LABEL_215:
    int v116 = v70;
    if ((v11 & 0x20) != 0)
    {
      int v115 = v42;
      unsigned int v90 = (unsigned __int16)v19;
      if ((v19 & 0xC0) != 0 || (unsigned __int16)v19 < 0x101u)
      {
        if (v106 || (unsigned __int16)v19 != 256 || (_DWORD)v125)
        {
          else {
            v91 = (v19 >> 6) | 0xFC;
          }
          if (v14)
          {
            if (v14 < 114)
            {
              int v93 = v14 - 1;
            }

            else
            {
              int v92 = v14 + 112;
              do
              {
                sub_1808B3F60((uint64_t)v124, 140);
                v92 -= 113;
              }

              while (v92 > 0xE1);
              int v93 = v92 - 113;
            }

            unsigned int v94 = v93 + 28;
            int v95 = -4 - v93;
            if (v90 == 256) {
              v96 = v94;
            }
            else {
              v96 = v95;
            }
            sub_1808B3F60((uint64_t)v124, v96);
          }

          sub_1808B3F60((uint64_t)v124, v91);
          int v14 = 0;
        }

        else
        {
          sub_1808B3F60((uint64_t)v124, 1);
        }
      }

      else
      {
        ++v14;
      }

      int v42 = v115;
    }
  }

  while (v42 != 1);
  if ((v11 & 4) != 0)
  {
    int v97 = BYTE4(v130) & 1;
    sub_1808B3FB4(a4, 1);
    (*(void (**)(_DWORD *, _BYTE *, void))(*(void *)a4 + 16LL))(a4, v128, (v130 - 1));
  }

  else
  {
    int v97 = 1;
  }

  if ((v11 & 8) != 0)
  {
    int v97 = (BYTE4(v132) & v97);
    sub_1808B3FB4(a4, 1);
    if ((int)v132 >= 2)
    {
      BOOL v98 = 0LL;
      int v99 = 0;
      int v100 = (v132 - 1);
      do
      {
        uint64_t v101 = *((unsigned __int8 *)v131[0] + v98);
        if (v99)
        {
          sub_1808B3FB4(a4, v99 | (*((_BYTE *)v131[0] + v98) >> 4));
          uint64_t v101 = 0;
        }

        ++v98;
        int v99 = v101;
      }

      while (v100 != v98);
      if (v101) {
        sub_1808B3FB4(a4, v101);
      }
    }
  }

  if ((v11 & 0x10) != 0)
  {
    int v97 = (BYTE4(v127) & v97);
    sub_1808B3FB4(a4, 1);
    (*(void (**)(_DWORD *, void *, void))(*(void *)a4 + 16LL))(a4, v126[0], (v127 - 1));
  }

  if ((v11 & 0x20) != 0)
  {
    int v97 = (BYTE4(v125) & v97);
    sub_1808B3FB4(a4, 1);
    (*(void (**)(_DWORD *, void *, void))(*(void *)a4 + 16LL))(a4, v124[0], (v125 - 1));
  }

  if (v97)
  {
LABEL_246:
    if (*((void *)a4 + 1)) {
      goto LABEL_248;
    }
  }

  *a8 = U_MEMORY_ALLOCATION_ERROR;
LABEL_248:
  if (BYTE4(v124[1])) {
    uprv_free(v124[0]);
  }
  if (BYTE4(v126[1])) {
    uprv_free(v126[0]);
  }
  if (BYTE4(v129[0])) {
    uprv_free(v128);
  }
  if (BYTE4(v131[1])) {
    uprv_free(v131[0]);
  }
}

    abort();
  }

  int v21 = (unsigned __int8 *)*((void *)a1 + 4);
  if (!v21) {
    goto LABEL_55;
  }
  if ((v10 & 0x40) != 0) {
    goto LABEL_48;
  }
LABEL_50:
  if (*v21 == v12)
  {
    if ((v10 & 0x14) != 0)
    {
      if ((v10 & 4) != 0)
      {
LABEL_120:
        *a5 = (*(void *)v65 - (void)a2) >> 1;
        uint64_t v41 = !v16;
        int v42 = NAN;
        uint64_t v43 = 0xFFF8000000000000LL;
        goto LABEL_121;
      }
    }

    else if (*(unsigned __int16 **)v65 != v6)
    {
      return a1[2];
    }

    goto LABEL_120;
  }

  icu::Formattable::~Formattable((icu::Formattable *)v55);
}

uint64_t sub_1807D5860(icu::BytesTrie *this, unsigned __int8 *a2, int a3)
{
  int v4 = *a2;
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = a2 + 1;
  while (1)
  {
    int v9 = *v7++;
    int v8 = v9;
    if (!v9) {
      break;
    }
    char v10 = icu::BytesTrie::next(this, v4);
    int v4 = v8;
    if ((v10 & 1) == 0) {
      return 0xFFFFFFFFLL;
    }
  }

  int v11 = icu::BytesTrie::next(this, v4 | 0x80u);
  int v12 = v11;
  if (!a3)
  {
    if ((v11 & 1) != 0) {
      return 0LL;
    }
    return 0xFFFFFFFFLL;
  }

  if (v11 < 2) {
    return 0xFFFFFFFFLL;
  }
  LODWORD(result) = icu::BytesTrie::readValue( (icu::BytesTrie *)(*((void *)this + 2) + 1LL),  (const unsigned __int8 *)(**((unsigned __int8 **)this + 2) >> 1));
  if (v12 == 2) {
    return result | 0x100;
  }
  else {
    return result;
  }
}

uint64_t sub_1807D5900(uint64_t a1, unint64_t a2, char *a3, char *a4)
{
  if ((sub_1807D5860((icu::BytesTrie *)a1, (unsigned __int8 *)a3, 0) & 0x80000000) != 0
    || (uint64_t result = sub_1807D5860((icu::BytesTrie *)a1, (unsigned __int8 *)a4, 1), (result & 0x80000000) != 0))
  {
    *(_DWORD *)(a1 + 24) = (a2 >> 59) - 2;
    *(void *)(a1 + 16) = *(void *)(a1 + 8) + (a2 & 0x7FFFFFFFFFFFFFFLL);
    int v9 = icu::BytesTrie::next((icu::BytesTrie *)a1, 42);
    LODWORD(result) = strcmp(a3, a4);
    if ((_DWORD)result) {
      LODWORD(result) = icu::BytesTrie::readValue( (icu::BytesTrie *)(*(void *)(a1 + 16) + 1LL),  (const unsigned __int8 *)(**(unsigned __int8 **)(a1 + 16) >> 1));
    }
    if (v9 == 2) {
      return result | 0x100;
    }
    else {
      return result;
    }
  }

  return result;
}

uint64_t sub_1807D59AC(icu::BytesTrie *this, unint64_t a2, char *a3, char *a4, int a5)
{
  int v7 = *a3;
  int v8 = a3 + 1;
  int v9 = a4[1];
  int v10 = *a4;
  if (a3[1] | v9)
  {
    int v12 = a4;
    uint64_t v13 = 0LL;
    char v14 = 0;
    char v15 = *a4;
    int v16 = (a2 >> 59) - 2;
    signed int v25 = a4 + 1;
    uint64_t v26 = a2 & 0x7FFFFFFFFFFFFFFLL;
    int v22 = v16;
    int v23 = a4[1];
    while ((icu::BytesTrie::next(this, (char)v7 | 0x80u) & 1) == 0)
    {
      if ((v14 & 1) == 0)
      {
        uint64_t result = sub_1807D5BD8((uint64_t)this, a2);
        uint64_t v13 = (int)v13 <= (int)result ? result : v13;
      }

      char v14 = 1;
LABEL_27:
      LOBYTE(v7) = *v8;
      if (!*v8) {
        return v13;
      }
      ++v8;
      *((_DWORD *)this + 6) = v16;
      *((void *)this + 2) = *((void *)this + 1) + v26;
      char v15 = *v12;
    }

    if (v9) {
      unint64_t v18 = (*((void *)this + 2) - *((void *)this + 1)) | ((unint64_t)(*((_DWORD *)this + 6) + 2) << 59);
    }
    else {
      unint64_t v18 = 0LL;
    }
    int v19 = (v18 >> 59) - 2;
    uint64_t v20 = v18 & 0x7FFFFFFFFFFFFFFLL;
    for (uint64_t i = v25; ; ++i)
    {
      if ((int)icu::BytesTrie::next(this, v15 | 0x80u) < 2)
      {
        uint64_t result = (v14 & 1) != 0 ? 0LL : sub_1807D5BD8((uint64_t)this, a2);
        char v14 = 1;
      }

      else
      {
        uint64_t result = icu::BytesTrie::readValue( (icu::BytesTrie *)(*((void *)this + 2) + 1LL),  (const unsigned __int8 *)(**((unsigned __int8 **)this + 2) >> 1));
      }

      else {
        uint64_t v13 = v13;
      }
      char v15 = *i;
      if (!*i)
      {
        int v12 = a4;
        int v16 = v22;
        int v9 = v23;
        goto LABEL_27;
      }

      *((_DWORD *)this + 6) = v19;
      *((void *)this + 2) = *((void *)this + 1) + v20;
    }
  }

  else if ((icu::BytesTrie::next(this, v7 | 0x80u) & 1) != 0 && (int)icu::BytesTrie::next(this, v10 | 0x80u) >= 2)
  {
    return icu::BytesTrie::readValue( (icu::BytesTrie *)(*((void *)this + 2) + 1LL),  (const unsigned __int8 *)(**((unsigned __int8 **)this + 2) >> 1));
  }

  else
  {
    return sub_1807D5BD8((uint64_t)this, a2);
  }

  return result;
}

uint64_t sub_1807D5BD8(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(a1 + 24) = (a2 >> 59) - 2;
  *(void *)(a1 + 16) = *(void *)(a1 + 8) + (a2 & 0x7FFFFFFFFFFFFFFLL);
  icu::BytesTrie::next((icu::BytesTrie *)a1, 42);
  return icu::BytesTrie::readValue( (icu::BytesTrie *)(*(void *)(a1 + 16) + 1LL),  (const unsigned __int8 *)(**(unsigned __int8 **)(a1 + 16) >> 1));
}

BOOL sub_1807D5C24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0LL;
  uint64_t v5 = 0LL;
  do
  {
    BOOL v6 = sub_1807E2A18(a2, *(void *)(a1 + 56) + v4);
    BOOL result = v6;
    if (v6) {
      break;
    }
    ++v5;
    v4 += 48LL;
  }

  while (v5 < *(int *)(a1 + 64));
  return result;
}

icu::Locale *sub_1807D5C9C(icu::Locale *a1, const char *a2, uint64_t a3)
{
  *(void *)a1 = 0LL;
  BOOL v6 = (icu::Locale *)((char *)a1 + 8);
  uint64_t Root = icu::Locale::getRoot(a1);
  icu::Locale::Locale(v6, Root);
  if (a2)
  {
    int v8 = strlen(a2);
    int v9 = (char *)uprv_malloc(v8 + 1);
    *(void *)a1 = v9;
    if (v9)
    {
      strcpy(v9, a2);
      icu::Locale::operator=(v6, a3);
    }
  }

  return a1;
}

void **sub_1807D5D18(void **a1)
{
  unsigned int v2 = *a1;
  if (v2)
  {
    uprv_free(v2);
    *a1 = 0LL;
  }

  icu::Locale::~Locale((icu::Locale *)(a1 + 1));
  return a1;
}

uint64_t sub_1807D5D50(uint64_t a1, char *a2, char *a3, char *a4, uint64_t a5)
{
  v18[8] = *(UChar **)MEMORY[0x1895F89C0];
  uint64_t v17 = 0LL;
  TableStringWithFallback = uloc_getTableStringWithFallback( *(const char **)a1,  *(char **)(a1 + 48),  a2,  a3,  a4,  (int *)&v17,  (int32_t *)&v17 + 1);
  uint64_t v8 = v17;
  if (SHIDWORD(v17) > 0 || (int)v17 < 1)
  {
    icu::UnicodeString::UnicodeString(v18, a4, 0xFFFFFFFFLL, 0LL);
    int v10 = icu::UnicodeString::copyFrom((UChar **)a5, v18, 0);
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v18);
  }

  else
  {
    uint64_t v11 = (uint64_t)TableStringWithFallback;
    icu::UnicodeString::unBogus(a5);
    unsigned int v12 = *(unsigned __int16 *)(a5 + 8);
    int v13 = (__int16)v12;
    unsigned int v14 = v12 >> 5;
    if (v13 >= 0) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = *(unsigned int *)(a5 + 12);
    }
    return icu::UnicodeString::doReplace(a5, 0LL, v15, v11, 0, v8);
  }

  return (uint64_t)v10;
}

uint64_t sub_1807D5E5C(uint64_t a1, char *a2, char *a3, char *a4, uint64_t a5)
{
  uint64_t v14 = 0LL;
  TableStringWithFallback = uloc_getTableStringWithFallback( *(const char **)a1,  *(char **)(a1 + 48),  a2,  a3,  a4,  (int *)&v14,  (int32_t *)&v14 + 1);
  if (SHIDWORD(v14) <= 0)
  {
    uint64_t v7 = (uint64_t)TableStringWithFallback;
    uint64_t v8 = v14;
    icu::UnicodeString::unBogus(a5);
    unsigned int v9 = *(unsigned __int16 *)(a5 + 8);
    int v10 = (__int16)v9;
    unsigned int v11 = v9 >> 5;
    if (v10 >= 0) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = *(unsigned int *)(a5 + 12);
    }
    return icu::UnicodeString::doReplace(a5, 0LL, v12, v7, 0, v8);
  }

  else
  {
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a5);
  }

  return a5;
}

uint64_t sub_1807D5F1C(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = off_18970BCD8;
  icu::Locale::Locale((icu::Locale *)(a1 + 8));
  *(_DWORD *)(a1 + 232) = a3;
  sub_1807D5C9C((icu::Locale *)(a1 + 240), "icudt74l-lang", a2);
  sub_1807D5C9C((icu::Locale *)(a1 + 472), "icudt74l-region", a2);
  icu::UnicodeString::UnicodeString(a1 + 712, 0);
  icu::UnicodeString::UnicodeString(a1 + 784, 0);
  icu::UnicodeString::UnicodeString(a1 + 856, 0);
  *(_DWORD *)(a1 + 920) = 256;
  *(void *)(a1 + 928) = 0LL;
  *(void *)(a1 + 936) = off_18971B688;
  *(_WORD *)(a1 + 944) = 2;
  *(void *)(a1 + 1000) = off_18971B688;
  *(_WORD *)(a1 + 1008) = 2;
  *(void *)(a1 + 1064) = off_18971B688;
  *(_WORD *)(a1 + 1072) = 2;
  *(void *)(a1 + 1128) = off_18971B688;
  *(_WORD *)(a1 + 1136) = 2;
  *(void *)(a1 + 1192) = off_18971B688;
  *(_WORD *)(a1 + 1200) = 2;
  *(void *)(a1 + 1256) = 0x30000000200LL;
  sub_1807D6004(a1);
  return a1;
}

void sub_1807D6004(uint64_t a1)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  uint64_t v2 = a1 + 240;
  uint64_t v3 = a1 + 248;
  uint64_t Root = icu::Locale::getRoot((icu::Locale *)a1);
  if (icu::Locale::operator==(v3, Root)) {
    uint64_t v5 = a1 + 480;
  }
  else {
    uint64_t v5 = v3;
  }
  icu::Locale::operator=((icu::Locale *)(a1 + 8), v5);
  __int128 v42 = 0u;
  uint64_t v45 = 0LL;
  __int128 v44 = 0u;
  __int128 v43 = 0u;
  uint64_t v41 = off_18971B688;
  LOWORD(v42) = 2;
  sub_1807D5E5C(v2, "localeDisplayPattern", 0LL, "separator", (uint64_t)&v41);
  if ((v42 & 1) != 0)
  {
    icu::UnicodeString::UnicodeString(&v36, "{0}, {1}", 0xFFFFFFFFLL, 0LL);
    icu::UnicodeString::operator=((icu::UnicodeString *)&v41, (icu::UnicodeString *)&v36);
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v36);
  }

  UErrorCode v27 = U_ZERO_ERROR;
  icu::SimpleFormatter::applyPatternMinMaxArguments( (icu::SimpleFormatter *)(a1 + 704),  (const icu::UnicodeString *)&v41,  2,  2,  0,  &v27);
  __int128 v37 = 0u;
  uint64_t v40 = 0LL;
  __int128 v39 = 0u;
  __int128 v38 = 0u;
  uint64_t v36 = off_18971B688;
  LOWORD(v37) = 2;
  sub_1807D5E5C(v2, "localeDisplayPattern", 0LL, "pattern", (uint64_t)&v36);
  if ((v37 & 1) != 0)
  {
    icu::UnicodeString::UnicodeString(&v31, "{0} ({1})", 0xFFFFFFFFLL, 0LL);
    icu::UnicodeString::operator=((icu::UnicodeString *)&v36, (icu::UnicodeString *)&v31);
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v31);
  }

  icu::SimpleFormatter::applyPatternMinMaxArguments( (icu::SimpleFormatter *)(a1 + 776),  (const icu::UnicodeString *)&v36,  2,  2,  0,  &v27);
  if ((v37 & 0x8000u) == 0LL) {
    int32_t v6 = (unsigned __int16)v37 >> 5;
  }
  else {
    int32_t v6 = DWORD1(v37);
  }
  if ((icu::UnicodeString::doIndexOf((uint64_t)&v36, 0xFF08u, 0, v6) & 0x80000000) != 0)
  {
    LOWORD(v31) = 40;
    icu::UnicodeString::unBogus(a1 + 936);
    else {
      uint64_t v8 = *(unsigned __int16 *)(a1 + 944) >> 5;
    }
    icu::UnicodeString::doReplace(a1 + 936, 0LL, v8, (uint64_t)&v31, 0, 1LL);
    LOWORD(v31) = 91;
    icu::UnicodeString::unBogus(a1 + 1000);
    else {
      uint64_t v16 = *(unsigned __int16 *)(a1 + 1008) >> 5;
    }
    icu::UnicodeString::doReplace(a1 + 1000, 0LL, v16, (uint64_t)&v31, 0, 1LL);
    LOWORD(v31) = 41;
    icu::UnicodeString::unBogus(a1 + 1064);
    else {
      uint64_t v17 = *(unsigned __int16 *)(a1 + 1072) >> 5;
    }
    icu::UnicodeString::doReplace(a1 + 1064, 0LL, v17, (uint64_t)&v31, 0, 1LL);
    LOWORD(v31) = 93;
    icu::UnicodeString::unBogus(a1 + 1128);
    else {
      uint64_t v18 = *(unsigned __int16 *)(a1 + 1136) >> 5;
    }
    icu::UnicodeString::doReplace(a1 + 1128, 0LL, v18, (uint64_t)&v31, 0, 1LL);
    icu::UnicodeString::unBogus(a1 + 1192);
    else {
      uint64_t v12 = *(unsigned __int16 *)(a1 + 1200) >> 5;
    }
    int v13 = &unk_180A479BE;
    uint64_t v14 = a1 + 1192;
    uint64_t v15 = 3LL;
  }

  else
  {
    LOWORD(v31) = -248;
    icu::UnicodeString::unBogus(a1 + 936);
    else {
      uint64_t v7 = *(unsigned __int16 *)(a1 + 944) >> 5;
    }
    icu::UnicodeString::doReplace(a1 + 936, 0LL, v7, (uint64_t)&v31, 0, 1LL);
    LOWORD(v31) = -197;
    icu::UnicodeString::unBogus(a1 + 1000);
    else {
      uint64_t v9 = *(unsigned __int16 *)(a1 + 1008) >> 5;
    }
    icu::UnicodeString::doReplace(a1 + 1000, 0LL, v9, (uint64_t)&v31, 0, 1LL);
    LOWORD(v31) = -247;
    icu::UnicodeString::unBogus(a1 + 1064);
    else {
      uint64_t v10 = *(unsigned __int16 *)(a1 + 1072) >> 5;
    }
    icu::UnicodeString::doReplace(a1 + 1064, 0LL, v10, (uint64_t)&v31, 0, 1LL);
    LOWORD(v31) = -195;
    icu::UnicodeString::unBogus(a1 + 1128);
    else {
      uint64_t v11 = *(unsigned __int16 *)(a1 + 1136) >> 5;
    }
    icu::UnicodeString::doReplace(a1 + 1128, 0LL, v11, (uint64_t)&v31, 0, 1LL);
    icu::UnicodeString::unBogus(a1 + 1192);
    else {
      uint64_t v12 = *(unsigned __int16 *)(a1 + 1200) >> 5;
    }
    int v13 = &unk_180A479B8;
    uint64_t v14 = a1 + 1192;
    uint64_t v15 = 2LL;
  }

  icu::UnicodeString::doReplace(v14, 0LL, v12, (uint64_t)v13, 0, v15);
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  uint64_t v35 = 0LL;
  __int128 v34 = 0u;
  __int128 v31 = off_18971B688;
  LOWORD(v32) = 2;
  sub_1807D5D50(v2, "localeDisplayPattern", 0LL, "keyTypePattern", (uint64_t)&v31);
  if ((v32 & 1) != 0)
  {
    icu::UnicodeString::UnicodeString(&v28, "{0}={1}", 0xFFFFFFFFLL, 0LL);
    icu::UnicodeString::operator=((icu::UnicodeString *)&v31, (icu::UnicodeString *)&v28);
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v28);
  }

  icu::SimpleFormatter::applyPatternMinMaxArguments( (icu::SimpleFormatter *)(a1 + 848),  (const icu::UnicodeString *)&v31,  2,  2,  0,  &v27);
  *(_DWORD *)(a1 + 1264) = 0;
  *(_WORD *)(a1 + 1268) = 0;
  int v21 = *(_DWORD *)(a1 + 920);
  if ((v21 - 259) > 1)
  {
LABEL_53:
    if (v21 != 258) {
      goto LABEL_58;
    }
    goto LABEL_54;
  }

  uint64_t v22 = ures_open(0LL, *(char **)(a1 + 48), (int *)&v27);
  uint64_t v23 = v22;
  if (v27 > U_ZERO_ERROR)
  {
    int v24 = 0;
    int v25 = 1;
    if (!v22) {
      goto LABEL_50;
    }
    goto LABEL_49;
  }

  int v28 = &off_18970BE18;
  uint64_t v29 = 0LL;
  uint64_t v30 = a1;
  ures_getAllItemsWithFallback(v22, "contextTransforms", (uint64_t)&v28, (int *)&v27);
  if (v27 == U_MISSING_RESOURCE_ERROR)
  {
    UErrorCode v27 = U_ZERO_ERROR;
  }

  else if (v27 > U_ZERO_ERROR)
  {
    int v24 = 0;
    int v25 = 1;
    goto LABEL_64;
  }

  int v25 = 0;
  int v24 = v29;
LABEL_64:
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v28);
  if (v23) {
LABEL_49:
  }
    ures_close(v23);
LABEL_50:
  if (v25) {
    goto LABEL_58;
  }
  if (!v24)
  {
    int v21 = *(_DWORD *)(a1 + 920);
    goto LABEL_53;
  }

LABEL_54:
  UErrorCode v27 = U_ZERO_ERROR;
  Sentenceuint64_t Instance = icu::BreakIterator::createSentenceInstance((char **)(a1 + 8), (const icu::Locale *)&v27, v19, v20);
  *(void *)(a1 + 928) = SentenceInstance;
  if (v27 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    if (SentenceInstance) {
      (*(void (**)(char *))(*(void *)SentenceInstance + 8LL))(SentenceInstance);
    }
    *(void *)(a1 + 928) = 0LL;
  }

              if (*v7) {
                int v25 = v7;
              }
              else {
                int v25 = "und";
              }
              if ((v18 & 4) != 0)
              {
                if ((v18 & 2) != 0) {
                  goto LABEL_59;
                }
              }

              else
              {
                int v25 = *v24;
                if ((v18 & 2) != 0)
                {
LABEL_59:
                  if ((v18 & 1) != 0) {
                    goto LABEL_75;
                  }
                  goto LABEL_63;
                }
              }

              a3 = *(const char **)(v22 + 48 * v23 + 8);
              if ((v18 & 1) != 0)
              {
LABEL_75:
                *(void *)a5 = v25;
                *(void *)(a5 + 8) = a3;
                *(void *)(a5 + 16) = a4;
                *(void *)(a5 + 24) = 0LL;
                *(_DWORD *)(a5 + 32) = sub_1807E2910(a4);
                *(_DWORD *)(a5 + 36) = v18;
                *(_DWORD *)(a5 + 40) = 0;
                icu::BytesTrie::~BytesTrie((void **)v32);
                return result;
              }

LABEL_59:
          *a2 = v31;
          return v9;
        }
      }

      else
      {
        uint64_t v23 = *(unsigned __int16 *)(a1 + 144);
        if ((v23 & 0xFC00) == 0xDC00)
        {
          uint64_t v9 = (v23 + ((_DWORD)v9 << 10) - 56613888);
          *(_BYTE *)(a1 + 93) = v22;
          if ((_BYTE)v22) {
            memmove((void *)(a1 + 144), (const void *)(a1 + 146), 2LL * v22);
          }
        }
      }
    }

    uint64_t v18 = 1;
    goto LABEL_54;
  }

  return v9;
}

  uint64_t v22 = v19 & 0x1F | (32 * v20);
LABEL_55:
  *((_WORD *)this + 4) = v22;
  if ((v10 & 4) != 0)
  {
LABEL_56:
    uint64_t v23 = (unsigned int *)v18 - 1;
    do
    {
      int v24 = __ldaxr(v23);
      int v25 = v24 - 1;
    }

    while (__stlxr(v25, v23));
    if (!v25)
    {
      if (a5) {
        *a5 = v23;
      }
      else {
        uprv_free(v23);
      }
    }
  }

  return 1LL;
}

LABEL_55:
      if (v23 > v14)
      {
        uint64_t v12 = v23 & 0xFF8;
        goto LABEL_4;
      }

      UErrorCode v27 = icu::CollationFastLatin::nextPair(v13, v25, v23, a6, 0LL, (int *)&v89, &v90);
      if (v27 == 1) {
        return 4294967294LL;
      }
      else {
        int v28 = 0;
      }
      else {
        uint64_t v12 = v28;
      }
      if (v12) {
        goto LABEL_4;
      }
    }

    uint64_t v12 = v23 & 0xFC00;
LABEL_4:
    if (v11 == v12)
    {
      uint64_t v12 = 0;
      uint64_t v15 = v11 == 2;
      uint64_t v11 = 0;
      if (!v15) {
        continue;
      }
    }

    else
    {
      uint64_t v16 = (unsigned __int16)v11;
      if ((unsigned __int16)v11 != (unsigned __int16)v12)
      {
        __int128 v43 = (unsigned __int16)v12;
        goto LABEL_123;
      }

      if (v11 != 2)
      {
        v11 >>= 16;
        v12 >>= 16;
        continue;
      }
    }

    break;
  }

  if (v88 >= 0x1000)
  {
    __int128 v44 = 0;
    uint64_t v45 = 0;
    unsigned int v89 = 0LL;
    while (v44)
    {
LABEL_128:
      if (v45) {
        goto LABEL_129;
      }
      while (1)
      {
        uint64_t v53 = (int)v89;
        if ((_DWORD)v89 == v90)
        {
          uint64_t v45 = 2;
          goto LABEL_129;
        }

        LODWORD(v89) = v89 + 1;
        int v54 = *(unsigned __int16 *)(a6 + 2 * v53);
        if (v54 <= 0x17F)
        {
          __int128 v55 = *(unsigned __int16 *)(a6 + 2 * v53);
LABEL_161:
          uint64_t v52 = *(unsigned __int16 *)(v13 + 2 * v55);
          goto LABEL_162;
        }

        if ((v54 & 0xFFC0) == 0x2000)
        {
          __int128 v55 = v54 - 7808;
          goto LABEL_161;
        }

        if (v54 == 0xFFFF) {
          uint64_t v52 = 64680LL;
        }
        else {
          uint64_t v52 = 1LL;
        }
        if (v54 == 65534)
        {
          uint64_t v52 = 3LL;
          goto LABEL_163;
        }

    *(_WORD *)uint64_t v7 = v11;
    uint64_t v23 = 1LL;
    goto LABEL_55;
  }

        *((void *)v2 + 16) = 0LL;
      }

                      int v24 = v20;
LABEL_55:
                      __int128 v38 = v20;
                      icu::UnicodeString::doAppend((uint64_t)&v45, (uint64_t)&v38, 0, 1LL);
                      __int128 v38 = v24;
                      icu::UnicodeString::doAppend((uint64_t)&v40, (uint64_t)&v38, 0, 1LL);
LABEL_56:
                      if (u_isUWhiteSpace(v20)
                        || (HIDWORD(v30) = v15 + 1, v34 < 0)
                        || (v20 - 66) <= 0x20
                        && ((1LL << (v20 - 66)) & 0x180000001LL) != 0)
                      {
                        uint64_t v17 = 0;
                        uint64_t v16 = 1;
                      }

                      else
                      {
                        uint64_t v17 = 0;
                        uint64_t v16 = 1;
                        uint64_t v29 = v15 + 1;
                      }

                      goto LABEL_61;
                    }

                    if (v31 != 0x20000000) {
                      goto LABEL_54;
                    }
                    __int128 v34 = v15 + 1;
                    int v24 = 104;
LABEL_53:
                    __int128 v33 = 1;
                    goto LABEL_55;
                  }

                  if ((v20 - 65) >= 0x1A)
                  {
                    if ((v20 - 97) <= 0x19 && v16)
                    {
LABEL_65:
                      uint64_t v17 = v33;
                      if (v33)
                      {
                        int v25 = sub_1809BB4B0( a1,  a4,  v32 > 1,  (uint64_t)&v50,  (uint64_t)&v45,  (uint64_t)&v40,  v30,  SHIDWORD(v30),  v34,  v29,  a7);
                        uint64_t v17 = 0;
                        uint64_t v16 = 0;
                        __int128 v33 = 0;
                        v14 += v25;
                        v15 += v25;
                      }

                      else
                      {
                        uint64_t v16 = 0;
                        __int128 v33 = 0;
                      }

                      goto LABEL_61;
                    }

                    if (v16) {
                      goto LABEL_56;
                    }
                  }

                  else if (v16)
                  {
                    goto LABEL_65;
                  }

                  uint64_t v17 = 0;
                }

            *((_DWORD *)this + 100) = v8 + v22;
            return 0xFFFFFFFFLL;
          }

        *a7 = 7;
        return result;
      }

      int v21 = 0;
      int v54 = v20 - 86400000;
      uint64_t v22 = 1;
    }

    uint64_t v53 = v22;
    goto LABEL_18;
  }

  if (*a7 > 0) {
    return result;
  }
  Rule = (icu::DateTimeRule *)icu::AnnualTimeZoneRule::getRule(this);
LABEL_47:
  __int128 v31 = icu::DateTimeRule::getRuleMillisInDay(Rule);
  __int128 v32 = a8 - (double)(v31 - 86399999);
  if (v31 < 0) {
    __int128 v33 = (double)-v31 + a8;
  }
  else {
    __int128 v33 = v32;
  }
  RawOffset = icu::TimeZoneRule::getRawOffset(this);
  DSTSavings = icu::TimeZoneRule::getDSTSavings(this);
  int v60 = 0u;
  uint64_t v61 = 0u;
  uint64_t v63 = 0LL;
  int v62 = 0u;
  __int128 v59 = (UChar *)off_18971B688;
  LOWORD(v60) = 2;
  icu::TimeZoneRule::getName((UChar **)this, &v59);
  uint64_t v36 = DSTSavings + RawOffset;
  switch(icu::DateTimeRule::getDateRuleType(Rule))
  {
    case 0u:
      __int128 v37 = a6 + a5;
      __int128 v38 = icu::DateTimeRule::getRuleMonth(Rule);
      __int128 v39 = icu::DateTimeRule::getRuleDayOfMonth(Rule);
      icu::VTimeZone::writeZonePropsByDOM( (uint64_t)v15,  a2,  a3,  (uint64_t)&v59,  v37,  v36,  v38,  v39,  v33,  1.83882169e17,  a7);
      break;
    case 1u:
      uint64_t v40 = a6 + a5;
      uint64_t v41 = icu::DateTimeRule::getRuleMonth(Rule);
      __int128 v42 = icu::DateTimeRule::getRuleWeekInMonth(Rule);
      __int128 v43 = icu::DateTimeRule::getRuleDayOfWeek(Rule);
      icu::VTimeZone::writeZonePropsByDOW( (uint64_t)v15,  a2,  a3,  (uint64_t)&v59,  v40,  v36,  v41,  v42,  v33,  1.83882169e17,  v43,  a7);
      break;
    case 2u:
      __int128 v44 = a6 + a5;
      uint64_t v45 = icu::DateTimeRule::getRuleMonth(Rule);
      uint64_t v46 = icu::DateTimeRule::getRuleDayOfMonth(Rule);
      uint64_t v47 = icu::DateTimeRule::getRuleDayOfWeek(Rule);
      icu::VTimeZone::writeZonePropsByDOW_GEQ_DOM( (uint64_t)v15,  a2,  a3,  (uint64_t)&v59,  v44,  v36,  v45,  v46,  v33,  1.83882169e17,  v47,  a7);
      break;
    case 3u:
      uint64_t v48 = a6 + a5;
      uint64_t v49 = icu::DateTimeRule::getRuleMonth(Rule);
      uint64_t v50 = icu::DateTimeRule::getRuleDayOfMonth(Rule);
      uint64_t v51 = icu::DateTimeRule::getRuleDayOfWeek(Rule);
      icu::VTimeZone::writeZonePropsByDOW_LEQ_DOM( (uint64_t)v15,  a2,  a3,  (uint64_t)&v59,  v48,  v36,  v49,  v50,  v33,  1.83882169e17,  v51,  a7);
      break;
    default:
      break;
  }

  uint64_t v52 = v57;
  if (v57)
  {
    if (Rule) {
      (*(void (**)(icu::DateTimeRule *))(*(void *)Rule + 8LL))(Rule);
    }
  }

  return (icu::DateTimeRule *)icu::UnicodeString::~UnicodeString((void *)v52, (icu::UnicodeString *)&v59);
}

LABEL_58:
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v31);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v36);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v41);
}

      uint64_t v7 = *a3;
      goto LABEL_59;
    }

        *(_WORD *)(v15 + 2) = 0;
        goto LABEL_78;
      }

      uint64_t v35 = dword_180A260D0[3 * (unsigned __int16)v16 + 2];
      if ((unint64_t)v3 >= v4)
      {
        __int128 v38 = result[1];
        __int128 v39 = *(char *)(v38 + 91);
        *(_BYTE *)(v38 + 91) = v39 + 1;
        *(_BYTE *)(v38 + v39 + 104) = -17;
        uint64_t v40 = result[1];
        uint64_t v41 = *(char *)(v40 + 91);
        *(_BYTE *)(v40 + 91) = v41 + 1;
        *(_BYTE *)(v40 + v41 + 104) = v35;
        *a2 = 15;
        goto LABEL_78;
      }

      uint64_t v36 = result[2];
      icu::Locale *v3 = -17;
      uint64_t v10 = v3 + 1;
      if (v17)
      {
        __int128 v37 = (((unint64_t)v19 + v20 - v36 + 2) >> 1) - 1;
        *uint64_t v17 = v37;
        if ((unint64_t)v10 < v4)
        {
          *uint64_t v10 = v35;
          v17[1] = v37;
          v17 += 2;
          goto LABEL_77;
        }

        ++v17;
      }

      else
      {
        if ((unint64_t)v10 < v4)
        {
          uint64_t v17 = 0LL;
          *uint64_t v10 = v35;
LABEL_77:
          v3 += 2;
          if (*a2 > 0) {
            goto LABEL_78;
          }
          goto LABEL_101;
        }

        uint64_t v17 = 0LL;
      }

      uint64_t v47 = result[1];
      uint64_t v48 = *(char *)(v47 + 91);
      *(_BYTE *)(v47 + 91) = v48 + 1;
      *(_BYTE *)(v47 + v48 + 104) = v35;
      *a2 = 15;
      goto LABEL_79;
    }

    break;
  }

  if (*(_WORD *)(v15 + 2)) {
    uint64_t v29 = 233;
  }
  else {
    uint64_t v29 = 217;
  }
  *(_WORD *)(v15 + 2) = 0;
  uint64_t v9 = 8205;
LABEL_78:
  uint64_t v10 = v3;
LABEL_79:
  if (*(_WORD *)(v15 + 6) == 256 && v28 == 2673 && v9 - 2384 >= 0xFFFFFFB0 && (byte_180A2642C[v9 - 2304] & 1) != 0)
  {
    *(_WORD *)(v15 + 2) = 0;
    __int128 v43 = v29 | (v29 << 16);
    __int128 v44 = v43 | 0xE800;
    if ((unint64_t)v10 >= v4)
    {
      char v56 = result[1];
      int32_t v6 = (unsigned __int16 *)((char *)v19 + v20 + 2);
      if ((v43 & 0xFF0000) != 0)
      {
        __int128 v57 = *(char *)(v56 + 91);
        *(_BYTE *)(v56 + 91) = v57 + 1;
        *(_BYTE *)(v56 + v57 + 104) = BYTE2(v43);
        char v56 = result[1];
      }

      int v58 = *(char *)(v56 + 91);
      *(_BYTE *)(v56 + 91) = v58 + 1;
      *(_BYTE *)(v56 + v58 + 104) = BYTE1(v44);
      __int128 v59 = result[1];
      int v60 = *(char *)(v59 + 91);
      *(_BYTE *)(v59 + 91) = v60 + 1;
      *(_BYTE *)(v59 + v60 + 104) = v29;
      *a2 = 15;
      goto LABEL_139;
    }

    uint64_t v45 = ((unint64_t)v19 + v20 - result[2] + 2) >> 1;
    uint64_t v46 = v45 - 1;
    if (v44 >= 0x10000)
    {
      *v10++ = BYTE2(v43);
      if (!v17)
      {
        if ((unint64_t)v10 < v4)
        {
          uint64_t v17 = 0LL;
          *uint64_t v10 = BYTE1(v44);
LABEL_108:
          if ((unint64_t)(v10 + 1) >= v4)
          {
            int v65 = result[1];
            int v66 = *(char *)(v65 + 91);
            *(_BYTE *)(v65 + 91) = v66 + 1;
            *(_BYTE *)(v65 + v66 + 104) = v29;
            *a2 = 15;
            int32_t v6 = (unsigned __int16 *)((char *)v19 + v20 + 2);
            ++v10;
            goto LABEL_139;
          }

          v10[1] = v29;
          if (v17) {
            *v17++ = v46;
          }
          uint64_t v3 = v10 + 2;
          goto LABEL_112;
        }

  UErrorCode v27 = 0LL;
  __int128 v38 = 7;
LABEL_80:
  *a8 = v38;
LABEL_47:
  if (v16 != (UChar *)v66 && v16 != src) {
    uprv_free(v16);
  }
  if (v32 != (UChar *)v64) {
    uprv_free(v32);
  }
  uprv_free(0LL);
  if (*a8 >= 1)
  {
    if (v12)
    {
    }

    *a8 = 0;
    UErrorCode v27 = v14;
  }

  return u_terminateUChars((uint64_t)v12, v11, v27, a8);
}

    __int128 v32 = *(unsigned int *)(v29 + 12);
LABEL_59:
    __int128 v33 = icu::UnicodeSet::span(v8, v31, v32, 1);
    if ((int)v32 < 1 || v33 >= (int)v32)
    {
      if ((a4 & 4) != 0)
      {
        if ((a4 & 2) != 0)
        {
          __int128 v37 = (char *)(*(void *)(a1 + 240) + v61);
          __int128 v38 = *(_DWORD *)(a1 + 248) - v61;
          *(void *)UErrorCode pErrorCode = 0LL;
          u_strToUTF8(v37, v38, (int32_t *)pErrorCode, v31, v32, &pErrorCode[1]);
          if (pErrorCode[1] <= U_ZERO_ERROR) {
            __int128 v39 = pErrorCode[0];
          }
          else {
            __int128 v39 = U_ZERO_ERROR;
          }
          *(_DWORD *)(*(void *)(a1 + 224) + 4 * v28) = v39;
          v61 += v39;
        }

        else
        {
          *(_DWORD *)&(*v56)[4 * v28] = 0;
        }
      }

      if (*(_BYTE *)(a1 + 260))
      {
        v26[v28] = -1;
        v60[v28] = -1;
        v24[v28] = -1;
      }

      *(_BYTE *)(*(void *)(a1 + 232) + v28) = -1;
      goto LABEL_114;
    }

    if ((a4 & 8) != 0)
    {
      if ((a4 & 2) == 0)
      {
        LOBYTE(v35) = 0;
        v24[v28] = 0;
        uint64_t v36 = *(char **)(a1 + 232);
        goto LABEL_85;
      }

      if ((a4 & 0x20) != 0)
      {
        if (v33 >= 254) {
          uint64_t v40 = -2;
        }
        else {
          uint64_t v40 = v33;
        }
        *(_BYTE *)(*(void *)(a1 + 232) + v28) = v40;
      }

      if ((a4 & 0x10) != 0)
      {
        uint64_t v35 = v32 - icu::UnicodeSet::spanBack(v8, v31, v32, 1);
        if (v35 >= 254) {
          LOBYTE(v35) = -2;
        }
        uint64_t v36 = v24;
LABEL_85:
        v36[v28] = v35;
      }
    }

    if ((a4 & 4) != 0)
    {
      uint64_t v41 = (char *)(*(void *)(a1 + 240) + v61);
      __int128 v42 = *(_DWORD *)(a1 + 248) - v61;
      *(void *)UErrorCode pErrorCode = 0LL;
      u_strToUTF8(v41, v42, (int32_t *)pErrorCode, v31, v32, &pErrorCode[1]);
      if (pErrorCode[1] <= U_ZERO_ERROR) {
        __int128 v43 = pErrorCode[0];
      }
      else {
        __int128 v43 = 0LL;
      }
      *(_DWORD *)(*(void *)(a1 + 224) + 4 * v28) = v43;
      v61 += v43;
      if ((_DWORD)v43)
      {
        if ((a4 & 2) == 0)
        {
          LOBYTE(v44) = 0;
          uint64_t v26 = v57;
          v57[v28] = 0;
          goto LABEL_94;
        }

        if ((a4 & 0x20) != 0)
        {
          uint64_t v53 = icu::UnicodeSet::spanUTF8(v8, v41, v43, 1);
          if (v53 >= 254) {
            int v54 = -2;
          }
          else {
            int v54 = v53;
          }
          v60[v28] = v54;
        }

        if ((a4 & 0x10) == 0)
        {
          uint64_t v10 = v58;
          int v24 = v59;
          uint64_t v26 = v57;
          if ((a4 & 1) == 0) {
            goto LABEL_114;
          }
          goto LABEL_97;
        }

        __int128 v44 = v43 - icu::UnicodeSet::spanBackUTF8(v8, (uint8_t *)v41, v43, 1);
        if (v44 >= 254) {
          LOBYTE(v44) = -2;
        }
        uint64_t v26 = v57;
        uint64_t v45 = v57;
      }

      else
      {
        LOBYTE(v44) = -1;
        uint64_t v26 = v57;
        v57[v28] = -1;
LABEL_94:
        uint64_t v45 = v60;
      }

      uint64_t v10 = v58;
      int v24 = v59;
      v45[v28] = v44;
    }

    if ((a4 & 1) == 0) {
      goto LABEL_114;
    }
LABEL_97:
    if ((a4 & 0x20) != 0)
    {
      uint64_t v46 = *v31;
      uint64_t v47 = (_DWORD)v32 != 1 && (v46 & 0xFC00) == 55296;
      if (v47)
      {
        uint64_t v48 = v31[1];
        uint64_t v47 = (v48 & 0xFC00) == 56320;
        uint64_t v49 = (v46 << 10) - 56613888 + v48;
        if (v47) {
          uint64_t v46 = v49;
        }
      }

      sub_18086375C(a1, v46);
    }

    if ((a4 & 0x10) != 0)
    {
      uint64_t v50 = v31[(v32 - 1)];
      if (v32 >= 2 && (v50 & 0xFC00) == 0xDC00)
      {
        uint64_t v51 = v31[(v32 - 2)];
        uint64_t v47 = (v51 & 0xFC00) == 55296;
        uint64_t v52 = v50 - 56613888 + (v51 << 10);
        if (v47) {
          uint64_t v50 = v52;
        }
      }

      sub_18086375C(a1, v50);
    }

    __int128 v31 = -1;
    goto LABEL_59;
  }

  uint64_t v17 = *((void *)this + 4);
  uint64_t v18 = *((void *)a2 + 4);
  if ((v93 & 0x800) != 0)
  {
    __int128 v32 = 0;
    __int128 v33 = 0;
    do
    {
      __int128 v34 = v32;
      uint64_t v35 = v17 + 8LL * v32;
      do
      {
        uint64_t v36 = *(_DWORD *)(v35 + 4) - 33554433;
        ++v34;
        v35 += 8LL;
      }

      while (v36 >> 25 != 127);
      __int128 v37 = v33;
      __int128 v38 = v18 + 8LL * v33;
      do
      {
        __int128 v39 = *(_DWORD *)(v38 + 4);
        ++v37;
        v38 += 8LL;
      }

      while ((v39 - 33554433) >> 25 != 127);
      uint64_t v40 = v34 - 1;
      uint64_t v41 = v37 - 1;
      do
      {
        if (v40 <= v32)
        {
          uint64_t v46 = 0;
          __int128 v44 = 1;
        }

        else
        {
          __int128 v42 = v40 - 1LL;
          do
          {
            __int128 v43 = *(void *)(v17 + 8 * v42);
            __int128 v44 = v43 < 0x10000;
            --v40;
            if (WORD1(v43)) {
              uint64_t v45 = 1;
            }
            else {
              uint64_t v45 = v42 <= v32;
            }
            --v42;
          }

          while (!v45);
          uint64_t v46 = WORD1(v43);
        }

        if (v41 <= v33)
        {
          uint64_t v50 = 0;
        }

        else
        {
          uint64_t v47 = v41 - 1LL;
          do
          {
            uint64_t v48 = *(void *)(v18 + 8 * v47);
            --v41;
            if (WORD1(v48)) {
              uint64_t v49 = 1;
            }
            else {
              uint64_t v49 = v47 <= v33;
            }
            --v47;
          }

          while (!v49);
          uint64_t v50 = WORD1(v48);
        }

        if (v44) {
          uint64_t v51 = 28;
        }
        else {
          uint64_t v51 = 0;
        }
        uint64_t v52 = v46 == v50;
        if (v46 < v50) {
          uint64_t v53 = -1;
        }
        else {
          uint64_t v53 = 1;
        }
        if (v52) {
          BOOL result = result;
        }
        else {
          BOOL result = v53;
        }
        if (!v52) {
          uint64_t v51 = 1;
        }
      }

      while (!v51);
      if (v51 == 28)
      {
        if (v39 == 1) {
          goto LABEL_104;
        }
        uint64_t v51 = 0;
        __int128 v32 = v34;
        __int128 v33 = v37;
      }
    }

    while (!v51);
  }

  else
  {
    LODWORD(v19) = 0;
    LODWORD(v20) = 0;
    do
    {
      int v19 = (int)v19;
      do
        int v21 = *(void *)(v17 + 8 * v19++);
      while (v21 < 0x10000);
      uint64_t v20 = (int)v20;
      do
        uint64_t v22 = *(void *)(v18 + 8 * v20++);
      while (v22 < 0x10000);
      uint64_t v23 = WORD1(v21);
      int v24 = v23 == 256;
      int v25 = v23 == WORD1(v22);
      if (v23 < WORD1(v22)) {
        uint64_t v26 = -1;
      }
      else {
        uint64_t v26 = 1;
      }
      if (v25) {
        BOOL result = result;
      }
      else {
        BOOL result = v26;
      }
      if (v25) {
        UErrorCode v27 = 16 * v24;
      }
      else {
        UErrorCode v27 = 1;
      }
    }

    while (!v27);
    if (v27 == 16) {
      goto LABEL_104;
    }
  }

  return result;
}

  uint64_t v73 = v21;
  if (v21 != 48)
  {
    uint64_t v69 = v11;
    int v70 = a4;
    unint64_t v68 = v14;
    int v71 = v15;
    int v72 = a5;
    LOBYTE(v27) = 0;
    goto LABEL_60;
  }

  __int128 v34 = *((unsigned __int16 *)a1 + 20);
  if (sub_1808D7748((char **)v78, v34, 10, &v77))
  {
LABEL_73:
    *a5 = *(_DWORD *)v78 - (_DWORD)a2;
    uint64_t v35 = !v15;
LABEL_74:
    BOOL result = -0.0;
    if (v35) {
      return 0.0;
    }
    return result;
  }

  if ((v10 & 0x81) == 0 || (uint64_t v36 = *(void *)v78, (**(_BYTE **)v78 | 0x20) != 0x78))
  {
    while (**(_BYTE **)v78 == 48)
    {
    }

    uint64_t v69 = v11;
    int v70 = a4;
    unint64_t v68 = v14;
    int v71 = v15;
    int v72 = a5;
    UErrorCode v27 = (v10 >> 1) & 1;
LABEL_60:
    uint64_t v74 = 0;
    int v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    while (1)
    {
      __int128 v31 = *(unsigned __int8 **)v78;
      __int128 v32 = **(_BYTE **)v78;
      if ((v32 - 48) > 9)
      {
        UErrorCode v27 = (v30 != 0) & v27;
        if (v32 != 46)
        {
          __int128 v33 = 0;
          goto LABEL_97;
        }

        if (v27 && (v10 & 4) == 0) {
          return a1[2];
        }
        if ((v27 & 1) == 0)
        {
          UChar v67 = *((unsigned __int16 *)a1 + 20);
          if (sub_1808D7748((char **)v78, v67, 10, &v77))
          {
            __int128 v33 = 0;
            if (v30 || v73 == 48) {
              goto LABEL_186;
            }
            return a1[2];
          }

          if (v30 || **(_BYTE **)v78 != 48)
          {
            __int128 v33 = 0;
            goto LABEL_141;
          }

          __int128 v33 = 0;
          do
          {
            if (sub_1808D7748((char **)v78, v67, 10, &v77))
            {
              *int v72 = *(_DWORD *)v78 - (_DWORD)a2;
              uint64_t v35 = v71 == 0;
              goto LABEL_74;
            }

            --v33;
          }

          while (**(_BYTE **)v78 == 48);
LABEL_141:
          while (1)
          {
            __int128 v31 = *(unsigned __int8 **)v78;
            __int128 v32 = **(_BYTE **)v78;
            if (v30 > 771)
            {
              v74 |= v32 != 48;
            }

            else
            {
              v79[v28++] = v32;
              ++v30;
              --v33;
            }
          }

    uint64_t v29 = (char *)v49;
    if ((v48 & 2) != 0) {
      uint64_t v29 = (char *)&v48 + 2;
    }
    if ((v48 & 0x11) != 0) {
      uint64_t v30 = 0LL;
    }
    else {
      uint64_t v30 = v29;
    }
    if (uprv_isInvariantUString(v30, v26))
    {
      *__int128 v42 = 0;
      icu::UnicodeString::extract((uint64_t)&v47, 0, v26, v42, v44);
      UErrorCode pErrorCode = U_ZERO_ERROR;
      __int128 v31 = u_charFromName(U_EXTENDED_CHAR_NAME, v42, &pErrorCode);
      if (pErrorCode <= U_ZERO_ERROR)
      {
        __int128 v32 = v31;
        if ((v53 & 1) != 0)
        {
          icu::UnicodeString::unBogus((uint64_t)&v52);
        }

        else
        {
          if ((v53 & 0x8000u) == 0LL) {
            __int128 v33 = (unsigned __int16)v53 >> 5;
          }
          else {
            __int128 v33 = DWORD1(v53);
          }
          if (v33)
          {
            LOBYTE(v53) = v53 & 0x1F;
            LOWORD(v53) = v53;
          }
        }

        icu::UnicodeString::append((uint64_t)&v52, v32);
        (*(void (**)(const icu::UnicodeString *, uint64_t, void, void (***)(icu::UnicodeString *__hidden)))(*(void *)a2 + 32LL))( a2,  v10,  (v12 + 1),  &v52);
        __int128 v34 = (unsigned __int16)v53 >> 5;
        if ((v53 & 0x8000u) != 0LL) {
          __int128 v34 = DWORD1(v53);
        }
        uint64_t v35 = ~(_DWORD)v12;
        uint64_t v12 = (v34 + v10);
        v11 += v35 + v12;
      }
    }

    a4 = v41;
    LODWORD(icu::LocaleBuilder::setRegion((uint64_t)this, v9, v10) = -1;
  }

  while ((int)v12 < v11);
LABEL_78:
  else {
    __int128 v37 = v10;
  }
  a3[1] += v11 - a3[3];
  a3[2] = v37;
  a3[3] = v11;
  uprv_free(v42);
  icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)&v47);
  icu::UnicodeString::~UnicodeString(v39, (icu::UnicodeString *)&v52);
  return (char *)icu::UnicodeString::~UnicodeString(v40, (icu::UnicodeString *)v57);
}

  icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v70);
  icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)&v75);
  uprv_free(v10);
  this = *(void *)(v2 + 88);
LABEL_59:
  if (!this) {
    goto LABEL_92;
  }
LABEL_60:
  if (*(void *)(v2 + 96)) {
    goto LABEL_61;
  }
  uint64_t v50 = icu::UMemory::operator new(0LL, (icu::UMemory *)0x28, (unint64_t)a2);
  if (!v50)
  {
    uint64_t v49 = U_MEMORY_ALLOCATION_ERROR;
LABEL_67:
    *a2 = v49;
    goto LABEL_98;
  }

  uint64_t v51 = icu::UVector::UVector((uint64_t)v50, (uint64_t)sub_180962864, 0LL, (int *)a2);
  if (*(int *)a2 >= 1)
  {
    (*(void (**)(uint64_t))(*(void *)v51 + 8LL))(v51);
    goto LABEL_98;
  }

  *(void *)(v2 + 96) = v51;
  this = *(void *)(v2 + 88);
LABEL_61:
  __int128 v39 = (icu::TimeZoneRule *)icu::UVector::elementAt((icu::UVector *)this, 0);
  uint64_t v40 = (icu::TimeZoneRule *)icu::UVector::elementAt(*(icu::UVector **)(v2 + 88), 1u);
  UChar v75 = 0.0;
  int v70 = 0.0;
  uint64_t v41 = icu::TimeZoneRule::getRawOffset(v6);
  __int128 v42 = icu::TimeZoneRule::getDSTSavings(v6);
  LODWORD(v41) = (*(uint64_t (**)(icu::TimeZoneRule *, uint64_t, uint64_t, void, double *, double))(*(void *)v39 + 72LL))( v39,  v41,  v42,  0LL,  &v75,  v7);
  __int128 v43 = icu::TimeZoneRule::getRawOffset(v6);
  __int128 v44 = icu::TimeZoneRule::getDSTSavings(v6);
  uint64_t v45 = (*(uint64_t (**)(icu::TimeZoneRule *, uint64_t, uint64_t, void, double *, double))(*(void *)v40 + 72LL))( v40,  v43,  v44,  0LL,  &v70,  v7);
  if ((_DWORD)v41) {
    uint64_t v48 = v45 == 0;
  }
  else {
    uint64_t v48 = 1;
  }
  if (v48)
  {
    uint64_t v49 = U_INVALID_STATE_ERROR;
    goto LABEL_67;
  }

  uint64_t v52 = icu::UMemory::operator new(v47, (icu::UMemory *)0x18, v46);
  __int128 v55 = v52;
  if (!v52)
  {
    int v54 = *(unsigned int *)a2;
    if ((int)v54 <= 0)
    {
      int v54 = 7LL;
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
  }

  char v56 = icu::UMemory::operator new((uint64_t *)v54, (icu::UMemory *)0x18, v53);
  __int128 v57 = v56;
  int v58 = *a2;
  if (!v56 && v58 <= 0)
  {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_81;
  }

  if (v58 <= 0)
  {
    if (v75 >= v70)
    {
      *(double *)__int128 v55 = v70;
      v55[1] = (uint64_t)v6;
      v55[2] = (uint64_t)v40;
      uint64_t v63 = v70;
      int v64 = icu::TimeZoneRule::getRawOffset(v40);
      int v65 = icu::TimeZoneRule::getDSTSavings(v40);
      (*(void (**)(icu::TimeZoneRule *, uint64_t, uint64_t, void, uint64_t *, double))(*(void *)v39 + 72LL))( v39,  v64,  v65,  0LL,  v57,  v63);
      int v62 = v40;
      uint64_t v40 = v39;
    }

    else
    {
      *(double *)__int128 v55 = v75;
      v55[1] = (uint64_t)v6;
      v55[2] = (uint64_t)v39;
      __int128 v59 = v75;
      int v60 = icu::TimeZoneRule::getRawOffset(v39);
      uint64_t v61 = icu::TimeZoneRule::getDSTSavings(v39);
      (*(void (**)(icu::TimeZoneRule *, uint64_t, uint64_t, void, uint64_t *, double))(*(void *)v40 + 72LL))( v40,  v60,  v61,  0LL,  v57,  v59);
      int v62 = v39;
    }

    v57[1] = (uint64_t)v62;
    v57[2] = (uint64_t)v40;
    icu::UVector::adoptElement(*(icu::UVector **)(v2 + 96), v55, a2);
    this = icu::UVector::adoptElement(*(icu::UVector **)(v2 + 96), v57, a2);
    goto LABEL_92;
  }

  if (v56) {
    icu::UMemory::operator delete(v56);
  }
LABEL_81:
  if (v55) {
    icu::UMemory::operator delete(v55);
  }
LABEL_98:
  this = *(void *)(v2 + 96);
  if (this) {
    this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8LL))(this);
  }
  *(void *)(v2 + 96) = 0LL;
  *(_BYTE *)(v2 + 104) = 0;
  return this;
}

  if (BYTE12(v64[0])) {
    uprv_free(*(void **)&v64[0]);
  }
}

    UErrorCode v27 = 65533;
LABEL_59:
    if (sub_1807E8B6C(*((void *)this + 53), v27) <= 0xFF)
    {
      *((_DWORD *)this + 100) = v32;
      break;
    }

    icu::UnicodeString::append((uint64_t)&v35, v27);
  }

  icu::Normalizer2Impl::decompose( *((UChar **)this + 53),  (const icu::UnicodeString *)&v35,  (icu::FCDUTF8CollationIterator *)((char *)this + 432),  a2);
  uint64_t v23 = *(unsigned int *)a2;
  if ((int)v23 > 0)
  {
    uint64_t v2 = 0LL;
    goto LABEL_68;
  }

  *((_DWORD *)this + 103) = v6;
  *((_DWORD *)this + 104) = *((_DWORD *)this + 100);
  uint64_t v23 = 3LL;
  *((_DWORD *)this + 102) = 3;
  *((_DWORD *)this + 100) = 0;
LABEL_67:
  uint64_t v2 = 1LL;
LABEL_68:
  icu::UnicodeString::~UnicodeString((void *)v23, (icu::UnicodeString *)&v35);
  return v2;
}

uint64_t sub_1807D6638(uint64_t a1, uint64_t a2, unsigned int *a3, int a4)
{
  *(void *)a1 = off_18970BCD8;
  icu::Locale::Locale((icu::Locale *)(a1 + 8));
  *(_DWORD *)(a1 + 232) = 0;
  sub_1807D5C9C((icu::Locale *)(a1 + 240), "icudt74l-lang", a2);
  sub_1807D5C9C((icu::Locale *)(a1 + 472), "icudt74l-region", a2);
  icu::UnicodeString::UnicodeString(a1 + 712, 0);
  icu::UnicodeString::UnicodeString(a1 + 784, 0);
  icu::UnicodeString::UnicodeString(a1 + 856, 0);
  *(_DWORD *)(a1 + 920) = 256;
  *(void *)(a1 + 928) = 0LL;
  *(void *)(a1 + 936) = off_18971B688;
  *(_WORD *)(a1 + 944) = 2;
  *(void *)(a1 + 1000) = off_18971B688;
  *(_WORD *)(a1 + 1008) = 2;
  *(void *)(a1 + 1064) = off_18971B688;
  *(_WORD *)(a1 + 1072) = 2;
  *(void *)(a1 + 1128) = off_18971B688;
  *(_WORD *)(a1 + 1136) = 2;
  *(void *)(a1 + 1192) = off_18971B688;
  *(_WORD *)(a1 + 1200) = 2;
  *(void *)(a1 + 1256) = 0x30000000200LL;
  if (a4 >= 1)
  {
    unsigned int v8 = a4 + 1;
    do
    {
      unsigned int v10 = *a3++;
      int v9 = v10;
      unsigned int v11 = v10 >> 8;
      switch(v10 >> 8)
      {
        case 0u:
          *(_DWORD *)(a1 + 232) = v9;
          break;
        case 1u:
          *(_DWORD *)(a1 + 920) = v9;
          break;
        case 2u:
          goto LABEL_9;
        case 3u:
          *(_DWORD *)(a1 + 1260) = v9;
          break;
        default:
          if (v11 == 32)
          {
            if (v9 == 8193) {
              int v9 = 513;
            }
            else {
              int v9 = 512;
            }
LABEL_9:
            *(_DWORD *)(a1 + 1256) = v9;
          }

          break;
      }

      --v8;
    }

    while (v8 > 1);
  }

  sub_1807D6004(a1);
  return a1;
}

void sub_1807D679C(icu::ResourceSink *a1)
{
}

void sub_1807D67B0(uint64_t a1)
{
  uint64_t v2 = off_18970BCD8;
  *(void *)a1 = off_18970BCD8;
  uint64_t v3 = *(void *)(a1 + 928);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 1192));
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + 1128));
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)(a1 + 1064));
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)(a1 + 1000));
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)(a1 + 936));
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 848));
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 776));
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 704));
  sub_1807D5D18((void **)(a1 + 472));
  sub_1807D5D18((void **)(a1 + 240));
  icu::Locale::~Locale((icu::Locale *)(a1 + 8));
  icu::UObject::~UObject((icu::UObject *)a1);
}

void sub_1807D684C(uint64_t a1)
{
}

uint64_t sub_1807D6860(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_1807D6868(uint64_t a1)
{
  return *(unsigned int *)(a1 + 232);
}

uint64_t sub_1807D6870(unsigned int *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[58];
      break;
    case 1:
      uint64_t result = a1[230];
      break;
    case 2:
      uint64_t result = a1[314];
      break;
    case 3:
      uint64_t result = a1[315];
      break;
    default:
      if (a2 == 32)
      {
        if (a1[314] == 513) {
          uint64_t result = 8193LL;
        }
        else {
          uint64_t result = 0x2000LL;
        }
      }

      else
      {
        uint64_t result = 0LL;
      }

      break;
  }

  return result;
}

icu::UnicodeString *sub_1807D68D8(uint64_t a1, unsigned int a2, icu::UnicodeString *this)
{
  unsigned int v6 = *((unsigned __int16 *)this + 4);
  int v7 = (__int16)v6;
  int v8 = v6 >> 5;
  if (v7 < 0) {
    int v8 = *((_DWORD *)this + 3);
  }
  if (v8 < 1)
  {
LABEL_11:
    if (*(void *)(a1 + 928) && (*(_DWORD *)(a1 + 920) == 258 || *(_BYTE *)(a1 + a2 + 1264)))
    {
      umtx_lock((icu::UMutex *)&unk_18C534D48);
      icu::UnicodeString::toTitle( (const UChar **)this,  *(icu::BreakIterator **)(a1 + 928),  (const icu::Locale *)(a1 + 8),  768LL);
      umtx_unlock((std::mutex **)&unk_18C534D48);
    }
  }

  else
  {
    int v9 = 0;
    while (1)
    {
      UChar32 v10 = icu::UnicodeString::char32At(this, v9);
      if (u_isupper(v10) || u_istitle(v10)) {
        break;
      }
      if (!u_isspace(v10))
      {
        ++v9;
        unsigned int v11 = *((unsigned __int16 *)this + 4);
        int v12 = (__int16)v11;
        int v13 = v11 >> 5;
        if (v12 < 0) {
          int v13 = *((_DWORD *)this + 3);
        }
        if (v9 < v13) {
          continue;
        }
      }

      goto LABEL_11;
    }
  }

  return this;
}

icu::UnicodeString *sub_1807D69D4( uint64_t a1, uint64_t a2, icu::UnicodeString *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = this;
  uint64_t v136 = *MEMORY[0x1895F89C0];
  if (!*(_BYTE *)(a2 + 216))
  {
    uint64_t v135 = 0LL;
    __int128 v133 = 0u;
    __int128 v134 = 0u;
    __int128 v132 = 0u;
    BOOL v131 = (UChar *)off_18971B688;
    if (*(_BYTE *)(a2 + 8)) {
      unsigned int v11 = (char *)(a2 + 8);
    }
    else {
      unsigned int v11 = "root";
    }
    uint64_t v12 = *(void *)(a2 + 208);
    uint64_t v13 = *(int *)(a2 + 32);
    uint64_t v15 = (char *)(a2 + 20);
    int v14 = *(unsigned __int8 *)(a2 + 20);
    uint64_t v17 = (char *)(a2 + 26);
    int v16 = *(unsigned __int8 *)(a2 + 26);
    LOWORD(v132) = 2;
    BOOL v18 = v14 != 0;
    int v19 = v16 != 0;
    __int16 v103 = (char *)(v12 + v13);
    int v104 = *(unsigned __int8 *)(v12 + v13);
    if (!(*(unsigned __int16 *)v11 ^ 0x687A | v11[2])
      || *(_DWORD *)v11 == 6649209
      || !(*(unsigned __int16 *)v11 ^ 0x736B | v11[2])
      || !(*(unsigned __int16 *)v11 ^ 0x6170 | v11[2])
      || !(*(unsigned __int16 *)v11 ^ 0x7275 | v11[2])
      || *(_DWORD *)v11 == 6515043
      || *(_DWORD *)v11 == 7301219
      || *(_DWORD *)v11 == 7827553
      || *(_DWORD *)(a1 + 232) == 1)
    {
      __int128 v129 = 0uLL;
      memset(v130, 0, sizeof(v130));
      memset(v128, 0, sizeof(v128));
      if (v14 && v16)
      {
        sub_1807D74A8((uint64_t)v128, a2, (uint64_t)this, a4, a5, a6, a7, a8, v11, (uint64_t)"_");
        sub_1807D7510(a1, v128, (uint64_t)&v131, 0);
        unsigned int v20 = (unsigned __int16)v132;
        if ((v132 & 1) == 0)
        {
          BOOL v21 = 0;
          int v19 = 0;
          goto LABEL_28;
        }

        goto LABEL_20;
      }

      if (v14)
      {
LABEL_20:
        sub_1807D74A8((uint64_t)v128, a2, (uint64_t)this, a4, a5, a6, a7, a8, v11, (uint64_t)"_");
        sub_1807D7510(a1, v128, (uint64_t)&v131, 0);
        unsigned int v20 = (unsigned __int16)v132;
        BOOL v21 = (v132 & 1) != 0 && v18;
        if ((v132 & 1) == 0 || !v16)
        {
LABEL_28:
          if (v20 >= 0x20 && (v20 & 1) == 0) {
            goto LABEL_33;
          }
          goto LABEL_32;
        }

LABEL_32:
    sub_1807D7510(a1, v11, (uint64_t)&v131, *(_DWORD *)(a1 + 1260) == 768);
    if ((v132 & 1) != 0)
    {
      int v8 = this;
      icu::UnicodeString::setToBogus(this);
LABEL_149:
      icu::UnicodeString::~UnicodeString(v99, (icu::UnicodeString *)&v131);
      return v8;
    }

    uint64_t v22 = *(_DWORD *)(*((void *)this + 4) + 20LL) - 1;
  }

          int v41 = v23;
          icu::UnicodeString::doAppend((uint64_t)this + 8, (uint64_t)&v41, 0, 1LL);
          if (v21 == 65278) {
            BOOL v21 = 0;
          }
          else {
            ++v21;
          }
          goto LABEL_55;
        }
      }

      else
      {
        if (v20 || v23 != 123) {
          goto LABEL_30;
        }
        if (v21 >= 1)
        {
          else {
            int v24 = *((unsigned __int16 *)this + 8) >> 5;
          }
          icu::UnicodeString::setCharAt((icu::SimpleFormatter *)((char *)this + 8), v24 + ~v21, v21 + 256);
          BOOL v21 = 0;
        }

        int v25 = v22 + 2;
        if ((int)v22 + 2 >= v16
          || (int32_t v26 = *(unsigned __int16 *)&v13[2 * (int)v19] - 48, v26 > 9)
          || *(_WORD *)&v13[2 * v25] != 125)
        {
          if ((int)v19 < v16)
          {
            unsigned int v27 = *(unsigned __int16 *)&v13[2 * (int)v19];
            if ((v27 - 49) <= 8)
            {
              int32_t v26 = v27 - 48;
              int v28 = v16 - (uint64_t)(int)v25;
              LODWORD(v19) = v22 + 3;
              unsigned int v29 = &v13[2 * (int)v25];
              while (v28)
              {
                uint64_t v30 = *(unsigned __int16 *)v29;
                if ((v30 - 48) > 9)
                {
                  if (v26 < 0 || v30 != 125) {
                    goto LABEL_65;
                  }
                  goto LABEL_51;
                }

                int32_t v26 = v30 + 10 * v26 - 48;
                --v28;
                v29 += 2;
                LODWORD(v19) = v19 + 1;
                if (v26 > 255) {
                  goto LABEL_65;
                }
              }
            }
          }

          goto LABEL_65;
        }

        LODWORD(v19) = v22 + 3;
LABEL_51:
        unsigned int v31 = v37;
        if (v26 > v37) {
          unsigned int v31 = v26;
        }
        unsigned int v37 = v31;
        unsigned int v39 = v26;
        icu::UnicodeString::doAppend((uint64_t)this + 8, (uint64_t)&v39, 0, 1LL);
      }

      unsigned int v20 = 0;
LABEL_55:
      if ((int)v19 >= v16)
      {
        if (v21 < 1)
        {
          a4 = v34;
          a3 = v35;
          int v32 = v37;
        }

        else
        {
          else {
            int v33 = *((unsigned __int16 *)this + 8) >> 5;
          }
          int v32 = v37;
          icu::UnicodeString::setCharAt(v17, v33 + ~v21, v21 + 256);
          a4 = v34;
          a3 = v35;
        }

        goto LABEL_62;
      }
    }
  }

  int v32 = -1;
LABEL_62:
  if (v32 >= a4 || v32 + 1 < a3)
  {
LABEL_65:
    uint64_t result = 0LL;
    *a6 = U_ILLEGAL_ARGUMENT_ERROR;
  }

  else
  {
    icu::UnicodeString::setCharAt(v17, 0, v32 + 1);
    return 1LL;
  }

  return result;
}

  if ((v13 & 0x200) != 0) {
    return ~a1;
  }
  if ((v7 & 2) == 0 || (v13 & 0x10) == 0)
  {
    if ((v13 & 2) != 0)
    {
      unsigned int v20 = 1;
    }

    else
    {
      if ((v13 & 1) == 0) {
        return ~a1;
      }
      unsigned int v20 = 0;
    }

    int v8 = byte_1809F9E61[~(-1 << v20) & v12];
    if ((v13 & 0x100) != 0) {
      LODWORD(icu::LocaleBuilder::setVariant((uint64_t)this, v7, v8) = (unsigned __int16)v10[2 * v8 + 1] | ((unsigned __int16)v10[2 * v8] << 16);
    }
    else {
      LODWORD(icu::LocaleBuilder::setVariant((uint64_t)this, v7, v8) = (unsigned __int16)v10[v8];
    }
LABEL_12:
    if ((_DWORD)v8 == a1) {
      return ~(_DWORD)v8;
    }
    else {
      return v8;
    }
  }

  uint64_t v17 = byte_1809F9E61[v12 & 0xF];
  if ((v13 & 0x100) != 0) {
    BOOL v18 = (unsigned __int16)v10[2 * v17 + 1] | ((unsigned __int16)v10[2 * v17] << 16);
  }
  else {
    BOOL v18 = (unsigned __int16)v10[v17];
  }
  if ((v13 & 0x400) != 0) {
    BOOL v18 = -v18;
  }
  return v18 + a1;
}

          int32_t v34 = v13;
          int v99 = v4;
          uint64_t result = sub_18083F67C((v11 << 10) - 56613888 + v17, &v106);
          if ((result & 0x80000000) != 0)
          {
            *v7++ = 15;
            if (v9)
            {
              int v16 = v94;
              *v9++ = v94;
              unsigned int v6 = v104;
              uint64_t v4 = v99;
              uint64_t v13 = v34;
            }

            else
            {
              unsigned int v6 = v104;
              uint64_t v4 = v99;
              uint64_t v13 = v34;
              int v16 = v94;
            }

            UChar32 v10 = 0LL;
            --v8;
            int v33 = 4;
            unsigned int v11 = v17 | (v11 << 16);
            goto LABEL_96;
          }

          unsigned int v35 = result;
          int v36 = *(char *)(v5 + 75);
          unsigned int v37 = *(_BYTE *)(v5 + v36 + 76);
          uint64_t v38 = v37;
          else {
            unsigned int v39 = v36 + 1;
          }
          *(_BYTE *)(v5 + 75) = v39;
          int v40 = v106;
          *(_DWORD *)(v5 + 4LL * v37 + 32) = v106;
          uint64_t result = sub_18083F604(v5, v37);
          uint64_t v13 = v40;
          LOBYTE(v105) = v38;
          unsigned int v11 = ((v35 << 8) - 0x20000) | (v38 << 21) | (v18 - v40) | 0xB000080;
          int v33 = 4;
          unsigned int v6 = v104;
          UChar32 v10 = v92;
          uint64_t v4 = v99;
LABEL_37:
          int v16 = v94;
          goto LABEL_96;
        }
      }

  unsigned int v20 = 1;
LABEL_33:
  if (BYTE4(v43[1])) {
    uprv_free(v43[0]);
  }
  if (v20)
  {
    if (v6) {
      goto LABEL_55;
    }
LABEL_37:
    if (v8 != 1 && v40)
    {
      ures_getByKey(v14, "Currencies", v14, (int *)&v42);
      ures_getByKeyWithFallback(v14, __s, v14, &v42);
      StringByint Index = ures_getStringByIndex(v14, v8, a5, (int *)&v42);
      unsigned int v6 = StringByIndex;
      if (v42 <= U_ZERO_ERROR)
      {
        int v25 = *StringByIndex;
        if ((v25 & 0xFC00) == 0xD800 && u_strlen(StringByIndex) != 1)
        {
          int32_t v26 = v6[1];
          if ((v26 & 0xFC00) == 0xDC00) {
            int v25 = v26 + (v25 << 10) - 56613888;
          }
        }

        unsigned int v27 = uscript_getScript(v25, (int *)&v42);
        if (v42 > U_ZERO_ERROR) {
          goto LABEL_53;
        }
        int v28 = v27;
        if (u_isalpha(v25) && v28 != 25 && v28 != LODWORD(v44[0])) {
          goto LABEL_52;
        }
      }

      else if (!StringByIndex)
      {
        goto LABEL_53;
      }

      if (u_strcmp(v6, a1)) {
        goto LABEL_55;
      }
    }

  if (!icu::UnicodeString::allocate(this, v16)
    && (v8 >= v16 || !icu::UnicodeString::allocate(this, v8)))
  {
    if ((v10 & 2) == 0) {
      *((void *)this + 3) = v18;
    }
    *((_WORD *)this + 4) = v10;
    icu::UnicodeString::setToBogus(this);
    return 0LL;
  }

  int v19 = *((_WORD *)this + 4);
  if (!a4)
  {
    uint64_t v22 = *((_WORD *)this + 4) & 0x1F;
    goto LABEL_55;
  }

  if ((v19 & 2) != 0)
  {
    if (v17 >= 27) {
      unsigned int v20 = 27;
    }
    else {
      unsigned int v20 = v17;
    }
    if (!v18) {
      goto LABEL_54;
    }
    BOOL v21 = (char *)this + 10;
  }

  else
  {
    if (*((_DWORD *)this + 4) >= v17) {
      unsigned int v20 = v17;
    }
    else {
      unsigned int v20 = *((_DWORD *)this + 4);
    }
    if (!v18)
    {
LABEL_53:
      if (v20 > 1023)
      {
        *((_WORD *)this + 4) = v19 | 0xFFE0;
        *((_DWORD *)this + 3) = v20;
        if ((v10 & 4) != 0) {
          goto LABEL_56;
        }
        return 1LL;
      }

      goto LABEL_54;
    }

    BOOL v21 = (char *)*((void *)this + 3);
  }

  if (v20 >= 1)
  {
    memmove(v21, v18, 2LL * v20);
    int v19 = *((_WORD *)this + 4);
    goto LABEL_53;
  }

  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v26);
  icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v31);
  return icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)&v36);
}

    int v8 = *(void *)(v8 + 152);
    if (!v8) {
      return 0LL;
    }
  }

  if (v9[9] != a2[9] || v9[10] != a2[10]) {
    goto LABEL_32;
  }
  if (v9[11] != a2[11] || v9[12] != a2[12]) {
    goto LABEL_32;
  }
  if (*(_BYTE *)(v8 + 144)) {
    *a3 = v9;
  }
  return v8 + 80;
}

    if (v5) {
      goto LABEL_33;
    }
    return 0LL;
  }

  if ((v1 & 0x8000) != 0) {
    goto LABEL_32;
  }
LABEL_33:
  int v9 = *(_WORD **)(a1 + 24);
  if ((v1 & 2) != 0) {
    int v9 = (_WORD *)(a1 + 10);
  }
  return (*v9 & 0xFFDF) == 73;
}

  if (*((_DWORD *)this + 11))
  {
    unsigned int v20 = 99;
    icu::UnicodeString::doAppend(a2, (uint64_t)&v20, 0, 1LL);
    return icu::ICU_Utility::appendNumber( (icu::ICU_Utility *)a2,  (icu::UnicodeString *)*((unsigned int *)this + 11),  0xAu,  1);
  }

  return result;
}

  uint64_t v23 = *v18;
  int v24 = *((_DWORD *)*v18 + 20);
  if ((v24 & 0x80000000) != 0
    || (a5 = (UErrorCode *)(a3 - v14), a3 != (_DWORD)v14) && a2[(int)v14] > 0x17Fu)
  {
    unsigned int v27 = v13;
    int v28 = a6;
  }

  else
  {
    int32_t v26 = v6 - v14;
    int v25 = v6 == (_DWORD)v14;
    unsigned int v27 = v13;
    int v28 = a6;
    if (v25 || a4[(int)v14] <= 0x17Fu)
    {
      if (a3 < 0)
      {
        LODWORD(a5) = -1;
        int32_t v26 = -1;
      }

      unsigned int v11 = icu::CollationFastLatin::compareUTF16( *(unsigned __int8 **)(*(void *)(a1 + 8) + 88LL),  (uint64_t)v23 + 84,  v24,  (uint64_t)&a2[(int)v14],  (int)a5,  (uint64_t)&a4[(int)v14],  v26);
      if ((_DWORD)v11 != -2)
      {
LABEL_44:
        if ((_DWORD)v11) {
          return v11;
        }
        goto LABEL_47;
      }

      uint64_t v23 = *v18;
    }
  }

  if ((*((_BYTE *)v23 + 24) & 1) == 0)
  {
    uint64_t v90 = 0u;
    v91 = 0u;
    char v88 = 0u;
    uint64_t v89 = 0u;
    BOOL v86 = 0u;
    BOOL v87 = 0u;
    int v84 = 0u;
    __int16 v85 = 0u;
    char v83 = 0u;
    int v82 = 0u;
    BOOL v81 = 0u;
    uint64_t v80 = 0u;
    int v79 = 0u;
    int v78 = 0u;
    int v77 = 0u;
    unsigned int v76 = 0u;
    uint64_t v75 = 0u;
    memset(&v74[40], 0, 80);
    *(_OWORD *)&v74[24] = 0u;
    unsigned int v29 = *(uint64_t **)(a1 + 8);
    uint64_t v30 = *v29;
    *(void *)&v74[16] = v29;
    *(void *)&v74[32] = &v74[48];
    *(_DWORD *)&v74[40] = 40;
    DWORD2(v90) = 0;
    DWORD2(v91) = -1;
    BYTE12(v91) = v19;
    *(void *)&v74[8] = v30;
    *(void *)unsigned int v74 = off_18972CFB0;
    *(void *)&__int16 v92 = a2;
    *((void *)&v92 + 1) = &a2[(int)v14];
    *(void *)&int v93 = v12;
    unsigned int v58 = 0u;
    uint64_t v59 = 0u;
    unsigned int v56 = 0u;
    int v57 = 0u;
    int v54 = 0u;
    int32_t v55 = 0u;
    unsigned int v52 = 0u;
    int v53 = 0u;
    uint64_t v51 = 0u;
    unsigned int v50 = 0u;
    int v49 = 0u;
    unsigned int v48 = 0u;
    int32_t v47 = 0u;
    uint64_t v46 = 0u;
    uint64_t v45 = 0u;
    uint64_t v44 = 0u;
    __int128 v43 = 0u;
    memset(&v42[8], 0, 80);
    *((void *)&v40 + 1) = v30;
    int v41 = (unint64_t)v29;
    *(void *)__int128 v42 = &v42[16];
    *(_DWORD *)&v42[8] = 40;
    DWORD2(v58) = 0;
    DWORD2(v59) = -1;
    BYTE12(v59) = v19;
    *(void *)&int v40 = off_18972CFB0;
    unsigned int v60 = a4;
    int v61 = &a4[(int)v14];
    int v62 = v27;
    unsigned int v11 = icu::CollationCompare::compareUpToQuaternary( (icu::CollationCompare *)v74,  (icu::CollationIterator *)&v40,  v23,  v28,  a5);
    icu::UTF16CollationIterator::~UTF16CollationIterator((icu::UTF16CollationIterator *)&v40);
    icu::UTF16CollationIterator::~UTF16CollationIterator((icu::UTF16CollationIterator *)v74);
    goto LABEL_44;
  }

  BOOL v98 = 0u;
  int v99 = 0u;
  unsigned int v96 = 0u;
  int v97 = 0u;
  int v94 = 0u;
  unsigned int v95 = 0u;
  __int16 v92 = 0u;
  int v93 = 0u;
  uint64_t v90 = 0u;
  v91 = 0u;
  char v88 = 0u;
  uint64_t v89 = 0u;
  BOOL v86 = 0u;
  BOOL v87 = 0u;
  int v84 = 0u;
  __int16 v85 = 0u;
  int v100 = 0LL;
  char v83 = 0u;
  int v82 = 0u;
  BOOL v81 = 0u;
  uint64_t v80 = 0u;
  int v79 = 0u;
  int v78 = 0u;
  int v77 = 0u;
  unsigned int v76 = 0u;
  uint64_t v75 = 0u;
  memset(&v74[40], 0, 80);
  *(_OWORD *)&v74[24] = 0u;
  unsigned int v31 = *(uint64_t **)(a1 + 8);
  int v32 = *v31;
  *(void *)&v74[16] = v31;
  *(void *)&v74[32] = &v74[48];
  *(_DWORD *)&v74[40] = 40;
  DWORD2(v90) = 0;
  DWORD2(v91) = -1;
  BYTE12(v91) = v19;
  *(void *)&__int16 v92 = a2;
  *((void *)&v92 + 1) = &a2[(int)v14];
  *(void *)&v74[8] = v32;
  *(void *)unsigned int v74 = off_18972D040;
  *(void *)&int v93 = v12;
  *((void *)&v93 + 1) = a2;
  *(void *)&int v94 = *((void *)&v92 + 1);
  *(void *)&unsigned int v95 = v12;
  *((void *)&v95 + 1) = v31[6];
  *(void *)&unsigned int v96 = off_18971B688;
  WORD4(v96) = 2;
  LOBYTE(v100) = 1;
  int32_t v71 = 0u;
  unsigned int v72 = 0u;
  int v69 = 2LL;
  int v70 = 0u;
  int v65 = 0LL;
  unsigned int v58 = 0u;
  uint64_t v59 = 0u;
  unsigned int v56 = 0u;
  int v57 = 0u;
  int v54 = 0u;
  int32_t v55 = 0u;
  unsigned int v52 = 0u;
  int v53 = 0u;
  int v73 = 1LL;
  uint64_t v51 = 0u;
  unsigned int v50 = 0u;
  int v49 = 0u;
  unsigned int v48 = 0u;
  int32_t v47 = 0u;
  uint64_t v46 = 0u;
  uint64_t v45 = 0u;
  uint64_t v44 = 0u;
  __int128 v43 = 0u;
  memset(&v42[8], 0, 80);
  *((void *)&v40 + 1) = v32;
  int v41 = (unint64_t)v31;
  *(void *)__int128 v42 = &v42[16];
  *(_DWORD *)&v42[8] = 40;
  DWORD2(v58) = 0;
  DWORD2(v59) = -1;
  BYTE12(v59) = v19;
  unsigned int v60 = a4;
  int v61 = &a4[(int)v14];
  *(void *)&int v40 = off_18972D040;
  int v62 = v27;
  int32_t v63 = a4;
  unsigned int v64 = v61;
  unsigned int v66 = v27;
  uint64_t v67 = *((void *)&v95 + 1);
  unsigned int v68 = off_18971B688;
  unsigned int v11 = icu::CollationCompare::compareUpToQuaternary( (icu::CollationCompare *)v74,  (icu::CollationIterator *)&v40,  v23,  v28,  a5);
  icu::FCDUTF16CollationIterator::~FCDUTF16CollationIterator((icu::FCDUTF16CollationIterator *)&v40);
  icu::FCDUTF16CollationIterator::~FCDUTF16CollationIterator((icu::FCDUTF16CollationIterator *)v74);
  if ((_DWORD)v11) {
    return v11;
  }
LABEL_47:
  int v33 = *((_DWORD *)*v18 + 6);
  if (v33 >= 61440 && *(int *)v28 <= 0)
  {
    int32_t v34 = *(icu::Normalizer2Impl **)(*(void *)(a1 + 8) + 48LL);
    unsigned int v35 = &a4[(int)v14];
    if ((v33 & 1) != 0)
    {
      memset(v74, 0, 112);
      sub_18097F484((uint64_t)v74, v34, &a2[(int)v14], v12);
      int v41 = 0u;
      memset(v42, 0, 80);
      int v40 = 0u;
      sub_18097F484((uint64_t)&v40, v34, v35, v27);
      unsigned int v11 = sub_18097F3A0((uint64_t)v34, (uint64_t)v74, (uint64_t)&v40);
      *(void *)&int v40 = off_18972ABC0;
      icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)&v42[16]);
      icu::UObject::~UObject((icu::UObject *)&v40);
      *(void *)unsigned int v74 = off_18972ABC0;
      icu::UnicodeString::~UnicodeString(v37, (icu::UnicodeString *)&v74[48]);
    }

    else
    {
      *(void *)&v74[16] = 0LL;
      *(void *)&v74[24] = 0xFFFFFFFFLL;
      *(void *)&v74[8] = 0LL;
      *(void *)unsigned int v74 = &off_18972AB60;
      *(void *)&v74[32] = &a2[(int)v14];
      *(void *)&v74[40] = v12;
      *((void *)&v40 + 1) = 0LL;
      *(void *)&int v41 = 0LL;
      *((void *)&v41 + 1) = 0xFFFFFFFFLL;
      *(void *)&int v40 = &off_18972AB60;
      *(void *)__int128 v42 = v35;
      *(void *)&v42[8] = v27;
      unsigned int v11 = sub_18097F3A0((uint64_t)v34, (uint64_t)v74, (uint64_t)&v40);
      icu::UObject::~UObject((icu::UObject *)&v40);
    }

    icu::UObject::~UObject((icu::UObject *)v74);
  }

  return v11;
}

      ++v5;
      if ((v7 & 0x8000) == 0) {
        goto LABEL_4;
      }
LABEL_6:
      unsigned int v11 = v9;
      if (v5 >= v9) {
        goto LABEL_34;
      }
    }

    int v14 = v5 + 1LL;
    if ((v7 & 0x8000) != 0)
    {
      uint64_t v15 = v9;
      if ((int)v14 >= v9)
      {
LABEL_26:
        uint64_t v2 = !v2;
        goto LABEL_32;
      }
    }

    else
    {
      uint64_t v15 = v7 >> 5;
    }

    if (v15 > v14 && *(_WORD *)(v10 + 2 * v14) == 39)
    {
      ++v5;
      goto LABEL_32;
    }

    goto LABEL_26;
  }

      icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v34);
      if (Size == ++v8) {
        goto LABEL_39;
      }
    }
  }

  int v9 = 0;
LABEL_39:
  if (*a2 <= 0)
  {
    int v24 = uprv_realloc(v26, 4LL * v9);
    if (v24) {
      int v25 = (uint64_t)v24;
    }
    else {
      int v25 = (uint64_t)v26;
    }
    switch(a1)
    {
      case 2:
        qword_18C535A28 = v25;
        dword_18C535A20 = v9;
        break;
      case 1:
        qword_18C535A18 = v25;
        dword_18C535A10 = v9;
        break;
      case 0:
        qword_18C535A08 = v25;
        dword_18C535A00 = v9;
        break;
    }
  }

      if (a4)
      {
        LODWORD(v4) = v37;
        uint64_t v5 = v38;
        goto LABEL_48;
      }

          int v9 = v23 + 1;
          if (!icu::ResourceTable::getKeyAndValue( (icu::ResourceTable *)v33,  v23 + 1,  (const char **)&v32,  a3)) {
            goto LABEL_33;
          }
        }
      }
    }
  }

  return result;
}

LABEL_33:
    __int128 v124 = 0u;
    uint64_t v127 = 0LL;
    __int128 v126 = 0u;
    __int128 v125 = 0u;
    LOWORD(v124) = 2;
    __int128 v119 = 0u;
    uint64_t v122 = 0LL;
    int v123 = (UChar *)off_18971B688;
    __int128 v121 = 0u;
    __int128 v120 = 0u;
    int v118 = (UChar *)off_18971B688;
    LOWORD(v119) = 2;
    UErrorCode v107 = U_ZERO_ERROR;
    if (v21)
    {
      memset(v128, 0, 64);
      sub_1807D76E0(a1, v15, (icu::UnicodeString *)&v118, 1);
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v128, &v118);
      if ((v128[8] & 1) != 0) {
        goto LABEL_140;
      }
      else {
        uint64_t v22 = *(unsigned int *)&v128[12];
      }
      icu::UnicodeString::doAppend((uint64_t)&v123, (const icu::UnicodeString *)v128, 0, v22);
      icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)v128);
    }

    if (v19)
    {
      memset(v128, 0, 64);
      sub_1807D77D8((_DWORD *)a1, v17, (uint64_t)&v118);
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v128, &v118);
      if ((v128[8] & 1) != 0) {
        goto LABEL_140;
      }
      sub_1807D791C(a1, &v123, (UChar **)v128);
      icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)v128);
    }

    if (!v104)
    {
LABEL_45:
      if ((v124 & 0x8000u) == 0LL) {
        int32_t v26 = (unsigned __int16)v124 >> 5;
      }
      else {
        int32_t v26 = DWORD1(v124);
      }
      unsigned int v27 = *(unsigned __int16 *)(a1 + 944);
      int v28 = (__int16)v27;
      unsigned int v29 = v27 >> 5;
      if (v28 >= 0) {
        uint64_t v30 = v29;
      }
      else {
        uint64_t v30 = *(unsigned int *)(a1 + 948);
      }
      unsigned int v31 = *(unsigned __int16 *)(a1 + 1008);
      int v32 = (__int16)v31;
      int v33 = v31 >> 5;
      if (v32 < 0) {
        int v33 = *(_DWORD *)(a1 + 1012);
      }
      uint64_t v105 = (icu::UnicodeString *)(a1 + 936);
      icu::UnicodeString::findAndReplace( (icu::UnicodeString *)&v123,  0,  v26,  (const icu::UnicodeString *)(a1 + 936),  0,  v30,  (const icu::UnicodeString *)(a1 + 1000),  0,  v33);
      if ((v124 & 0x8000u) == 0LL) {
        int32_t v34 = (unsigned __int16)v124 >> 5;
      }
      else {
        int32_t v34 = DWORD1(v124);
      }
      unsigned int v35 = *(unsigned __int16 *)(a1 + 1072);
      int v36 = (__int16)v35;
      unsigned int v37 = v35 >> 5;
      if (v36 >= 0) {
        uint64_t v38 = v37;
      }
      else {
        uint64_t v38 = *(unsigned int *)(a1 + 1076);
      }
      unsigned int v39 = *(unsigned __int16 *)(a1 + 1136);
      int v40 = (__int16)v39;
      int v41 = v39 >> 5;
      if (v40 < 0) {
        int v41 = *(_DWORD *)(a1 + 1140);
      }
      icu::UnicodeString::findAndReplace( (icu::UnicodeString *)&v123,  0,  v34,  (const icu::UnicodeString *)(a1 + 1064),  0,  v38,  (const icu::UnicodeString *)(a1 + 1128),  0,  v41);
      __int128 v42 = icu::Locale::createKeywords((icu::Locale *)a2, &v107);
      __int128 v43 = v42;
      if (v42 && v107 <= U_ZERO_ERROR)
      {
        __int128 v114 = 0u;
        uint64_t v117 = 0LL;
        __int128 v116 = 0u;
        __int128 v115 = 0u;
        __int16 v113 = (UChar *)off_18971B688;
        LOWORD(v114) = 2;
        memset(&v128[1], 0, 99);
        uint64_t v44 = (*(uint64_t (**)(char *, void, UErrorCode *))(*(void *)v42 + 40LL))(v42, 0LL, &v107);
        if (v44)
        {
          uint64_t v46 = (char *)v44;
          do
          {
            v128[0] = 0;
            icu::Locale::getKeywordValue((char **)a2, v46, v128, 100, &v107);
            if (v107 > U_ZERO_ERROR || v107 == U_STRING_NOT_TERMINATED_WARNING)
            {
              icu::UnicodeString::~UnicodeString((void *)v107, (icu::UnicodeString *)&v113);
              int v8 = this;
              goto LABEL_147;
            }

            sub_1807D7A38(a1, v46, (icu::UnicodeString *)&v118, 1);
            if ((v119 & 0x8000u) == 0LL) {
              int32_t v47 = (unsigned __int16)v119 >> 5;
            }
            else {
              int32_t v47 = DWORD1(v119);
            }
            unsigned int v48 = *(unsigned __int16 *)(a1 + 944);
            int v49 = (__int16)v48;
            unsigned int v50 = v48 >> 5;
            if (v49 >= 0) {
              uint64_t v51 = v50;
            }
            else {
              uint64_t v51 = *(unsigned int *)(a1 + 948);
            }
            unsigned int v52 = *(unsigned __int16 *)(a1 + 1008);
            int v53 = (__int16)v52;
            int v54 = v52 >> 5;
            if (v53 < 0) {
              int v54 = *(_DWORD *)(a1 + 1012);
            }
            icu::UnicodeString::findAndReplace( (icu::UnicodeString *)&v118,  0,  v47,  v105,  0,  v51,  (const icu::UnicodeString *)(a1 + 1000),  0,  v54);
            if ((v119 & 0x8000u) == 0LL) {
              int32_t v55 = (unsigned __int16)v119 >> 5;
            }
            else {
              int32_t v55 = DWORD1(v119);
            }
            unsigned int v56 = *(unsigned __int16 *)(a1 + 1072);
            int v57 = (__int16)v56;
            unsigned int v58 = v56 >> 5;
            if (v57 >= 0) {
              uint64_t v59 = v58;
            }
            else {
              uint64_t v59 = *(unsigned int *)(a1 + 1076);
            }
            unsigned int v60 = *(unsigned __int16 *)(a1 + 1136);
            int v61 = (__int16)v60;
            int v62 = v60 >> 5;
            if (v61 < 0) {
              int v62 = *(_DWORD *)(a1 + 1140);
            }
            icu::UnicodeString::findAndReplace( (icu::UnicodeString *)&v118,  0,  v55,  (const icu::UnicodeString *)(a1 + 1064),  0,  v59,  (const icu::UnicodeString *)(a1 + 1128),  0,  v62);
            sub_1807D7AB8((_DWORD *)a1, v46, v128, (uint64_t)&v113, 1);
            if ((v114 & 0x8000u) == 0LL) {
              int32_t v63 = (unsigned __int16)v114 >> 5;
            }
            else {
              int32_t v63 = DWORD1(v114);
            }
            unsigned int v64 = *(unsigned __int16 *)(a1 + 944);
            int v65 = (__int16)v64;
            unsigned int v66 = v64 >> 5;
            if (v65 >= 0) {
              uint64_t v67 = v66;
            }
            else {
              uint64_t v67 = *(unsigned int *)(a1 + 948);
            }
            unsigned int v68 = *(unsigned __int16 *)(a1 + 1008);
            int v69 = (__int16)v68;
            int v70 = v68 >> 5;
            if (v69 < 0) {
              int v70 = *(_DWORD *)(a1 + 1012);
            }
            icu::UnicodeString::findAndReplace( (icu::UnicodeString *)&v113,  0,  v63,  v105,  0,  v67,  (const icu::UnicodeString *)(a1 + 1000),  0,  v70);
            if ((v114 & 0x8000u) == 0LL) {
              int32_t v71 = (unsigned __int16)v114 >> 5;
            }
            else {
              int32_t v71 = DWORD1(v114);
            }
            unsigned int v72 = *(unsigned __int16 *)(a1 + 1072);
            int v73 = (__int16)v72;
            unsigned int v74 = v72 >> 5;
            if (v73 >= 0) {
              uint64_t v75 = v74;
            }
            else {
              uint64_t v75 = *(unsigned int *)(a1 + 1076);
            }
            unsigned int v76 = *(unsigned __int16 *)(a1 + 1136);
            int v77 = (__int16)v76;
            int v78 = v76 >> 5;
            if (v77 < 0) {
              int v78 = *(_DWORD *)(a1 + 1140);
            }
            icu::UnicodeString::findAndReplace( (icu::UnicodeString *)&v113,  0,  v71,  (const icu::UnicodeString *)(a1 + 1064),  0,  v75,  (const icu::UnicodeString *)(a1 + 1128),  0,  v78);
            icu::UnicodeString::UnicodeString(&v108, v128, 0xFFFFFFFFLL, 0LL);
            if ((v114 & 1) != 0)
            {
              char v83 = v109;
              icu::UnicodeString::~UnicodeString((void *)(unsigned __int16)v114, (icu::UnicodeString *)&v108);
              if ((v83 & 1) == 0) {
                goto LABEL_123;
              }
            }

            else
            {
              if ((v114 & 0x8000u) == 0LL) {
                int v79 = (unsigned __int16)v114 >> 5;
              }
              else {
                int v79 = DWORD1(v114);
              }
              if ((v109 & 0x8000u) == 0LL) {
                uint64_t v80 = (void *)((unsigned __int16)v109 >> 5);
              }
              else {
                uint64_t v80 = (void *)DWORD1(v109);
              }
              if ((v109 & 1) != 0 || v79 != (_DWORD)v80)
              {
                icu::UnicodeString::~UnicodeString(v80, (icu::UnicodeString *)&v108);
LABEL_123:
                sub_1807D791C(a1, &v123, &v113);
                goto LABEL_131;
              }

              BOOL v81 = icu::UnicodeString::doEquals((icu::UnicodeString *)&v113, (const icu::UnicodeString *)&v108, v79);
              icu::UnicodeString::~UnicodeString(v82, (icu::UnicodeString *)&v108);
              if (!v81) {
                goto LABEL_123;
              }
            }

            icu::UnicodeString::UnicodeString(&v108, v46, 0xFFFFFFFFLL, 0LL);
            if ((v119 & 1) != 0)
            {
              char v88 = v109;
              icu::UnicodeString::~UnicodeString((void *)(unsigned __int16)v119, (icu::UnicodeString *)&v108);
              if ((v88 & 1) != 0)
              {
LABEL_125:
                sub_1807D791C(a1, &v123, &v118);
                LOWORD(v108) = 61;
                uint64_t v89 = icu::UnicodeString::doAppend((uint64_t)&v123, (uint64_t)&v108, 0, 1LL);
                if ((v114 & 0x8000u) == 0LL) {
                  uint64_t v90 = (unsigned __int16)v114 >> 5;
                }
                else {
                  uint64_t v90 = DWORD1(v114);
                }
                icu::UnicodeString::doAppend(v89, (const icu::UnicodeString *)&v113, 0, v90);
                goto LABEL_131;
              }
            }

            else
            {
              if ((v119 & 0x8000u) == 0LL) {
                int v84 = (unsigned __int16)v119 >> 5;
              }
              else {
                int v84 = DWORD1(v119);
              }
              if ((v109 & 0x8000u) == 0LL) {
                __int16 v85 = (void *)((unsigned __int16)v109 >> 5);
              }
              else {
                __int16 v85 = (void *)DWORD1(v109);
              }
              if ((v109 & 1) != 0 || v84 != (_DWORD)v85)
              {
                icu::UnicodeString::~UnicodeString(v85, (icu::UnicodeString *)&v108);
              }

              else
              {
                BOOL v86 = icu::UnicodeString::doEquals((icu::UnicodeString *)&v118, (const icu::UnicodeString *)&v108, v84);
                icu::UnicodeString::~UnicodeString(v87, (icu::UnicodeString *)&v108);
                if (v86) {
                  goto LABEL_125;
                }
              }
            }

            uint64_t v112 = 0LL;
            __int128 v110 = 0u;
            __int128 v111 = 0u;
            __int128 v109 = 0u;
            unsigned __int16 v108 = (UChar *)off_18971B688;
            LOWORD(v109) = 2;
            icu::SimpleFormatter::format( (icu::SimpleFormatter *)(a1 + 848),  (const icu::UnicodeString *)&v118,  (const icu::UnicodeString *)&v113,  (icu::UnicodeString *)&v108,  &v107);
            sub_1807D791C(a1, &v123, &v108);
            icu::UnicodeString::~UnicodeString(v91, (icu::UnicodeString *)&v108);
LABEL_131:
            uint64_t v46 = (char *)(*(uint64_t (**)(char *, void, UErrorCode *))(*(void *)v43 + 40LL))( v43,  0LL,  &v107);
          }

          while (v46);
        }

        icu::UnicodeString::~UnicodeString(v45, (icu::UnicodeString *)&v113);
      }

      if ((unsigned __int16)v124 < 0x20u)
      {
        int v8 = this;
        icu::UnicodeString::operator=((UChar **)this, &v131);
      }

      else
      {
        int v8 = this;
        if ((*((_WORD *)this + 4) & 1) != 0) {
          __int16 v92 = 2;
        }
        else {
          __int16 v92 = *((_WORD *)this + 4) & 0x1F;
        }
        *((_WORD *)this + 4) = v92;
        icu::SimpleFormatter::format( (icu::SimpleFormatter *)(a1 + 776),  (const icu::UnicodeString *)&v131,  (const icu::UnicodeString *)&v123,  this,  &v107);
        int v93 = sub_1807D7C8C((uint64_t)this, a1 + 1192);
        if ((v93 & 0x80000000) == 0)
        {
          int v94 = v93;
          memset(v128, 0, 64);
          unsigned int v95 = *(unsigned __int16 *)(a1 + 1200);
          if ((v95 & 0x8000) != 0) {
            unsigned int v96 = *(_DWORD *)(a1 + 1204);
          }
          else {
            unsigned int v96 = v95 >> 5;
          }
          icu::UnicodeString::UnicodeString((icu::UnicodeString *)v128, this, v96 + v93);
          sub_1807D7CF0(this, 0LL, v94);
          sub_1807D791C(a1, (UChar **)this, (UChar **)v128);
          icu::UnicodeString::~UnicodeString(v100, (icu::UnicodeString *)v128);
        }
      }

      sub_1807D68D8(a1, 0, v8);
      if (v43) {
LABEL_147:
      }
        (*(void (**)(char *))(*(void *)v43 + 8LL))(v43);
      goto LABEL_148;
    }

    memset(v128, 0, 64);
    sub_1807D79B8(a1, v103, (icu::UnicodeString *)&v118, 1);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v128, &v118);
    if ((v128[8] & 1) == 0)
    {
      sub_1807D791C(a1, &v123, (UChar **)v128);
      icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)v128);
      goto LABEL_45;
    }

  int v33 = *(unsigned __int16 *)(*(void *)(*((void *)this + 4) + 8LL) + 2LL * (int)v22);
  p_dst = *((unsigned __int16 *)this + 9);
  if (p_dst > v33)
  {
    BOOL v21 = (const unsigned __int8 *)a4;
    goto LABEL_35;
  }

  p_dst = *((unsigned __int16 *)this + 15);
  uint64_t v117 = a3;
  __int128 v115 = v18;
  if (p_dst <= v33)
  {
    if (v33 == 65024)
    {
      if (v20 - v19 < 3
        || (int v41 = *((unsigned __int8 *)v20 - 3), (v41 + 31) > 0xCu)
        || (__int128 v42 = *((unsigned __int8 *)v20 - 2) ^ 0x80, v42 > 0x3F)
        || (__int128 v43 = *((unsigned __int8 *)v20 - 1) ^ 0x80, v43 > 0x3F)
        || v41 >= 0xED && v42 > 0x1F)
      {
        uint64_t v44 = -1;
      }

      else
      {
        uint64_t v44 = (v42 << 6) | ((v41 & 0xF) << 12) | v43;
      }

      p_dst = *v21;
      if ((_DWORD)p_dst == 133)
      {
        int v70 = v44 - 4352;
        if (v70 > 0x12) {
          goto LABEL_153;
        }
        if (a6)
        {
          __int16 v113 = a7;
          int32_t v71 = sub_1807EF5D8((unsigned __int8 *)a4, (uint64_t)a5);
          if (v71 < 0)
          {
            if (!icu::Normalizer2Impl::hasCompBoundaryBefore(this, (const unsigned __int8 *)a4, a5))
            {
              a7 = v113;
              goto LABEL_152;
            }

            int v73 = 0;
          }

          else
          {
            int v73 = v71;
            a4 = (icu::ByteSinkUtil *)((char *)a4 + 3);
          }

          BOOL v87 = (uint64_t)v120;
          char v88 = *((unsigned __int8 *)v20 + 2);
          uint64_t v89 = (const unsigned __int8 *)v20 - 3;
          uint64_t v90 = v113;
          if (v19 == (icu::ByteSinkUtil *)v89
            || (appended = icu::ByteSinkUtil::appendUnchanged( v19,  v89,  (const unsigned __int8 *)v120,  (icu::ByteSink *)v118,  v113,  (icu::Edits *)v119,  v72),  BOOL v87 = (uint64_t)v120,  v90 = v113,  appended))
          {
            icu::ByteSinkUtil::appendCodePoint( (icu::ByteSinkUtil *)((_DWORD)a4 - (_DWORD)v89),  v73 + 28 * (v88 + 21 * v70) + 39524,  v87,  v90,  v90);
            a6 = v120;
            unsigned int v11 = (icu::ByteSink *)v118;
            a7 = v113;
            goto LABEL_143;
          }

          goto LABEL_210;
        }
      }

      else
      {
        if ((_DWORD)p_dst) {
          goto LABEL_153;
        }
        if (a6)
        {
          unsigned int v74 = a7;
          uint64_t v75 = sub_1807EF5D8((unsigned __int8 *)v20, (uint64_t)a4);
          int v77 = (uint64_t)v120;
          int v78 = v74;
          p_dst = v75;
          if (v19 == (icu::ByteSinkUtil *)((char *)v20 - 3)
            || (int v79 = v19,
                uint64_t v80 = p_dst,
                v81 = icu::ByteSinkUtil::appendUnchanged( v79,  (const unsigned __int8 *)v20 - 3,  (const unsigned __int8 *)v120,  (icu::ByteSink *)v118,  v74,  (icu::Edits *)v119,  v76),  p_dst = v80,  int v77 = (uint64_t)v120,  v78 = v74,  v81))
          {
            icu::ByteSinkUtil::appendCodePoint( (icu::ByteSinkUtil *)((_DWORD)a4 - ((_DWORD)v20 - 3)),  p_dst + v44,  v77,  v78,  v78);
            a6 = v120;
            unsigned int v11 = (icu::ByteSink *)v118;
            a7 = v74;
            goto LABEL_143;
          }

      UChar32 v10 = v18 + (v10 << 6);
      if (!(v16 + (_DWORD)++v13))
      {
        v2 += v13;
        int v9 = v11;
        break;
      }
    }
  }

  uint64_t v22 = v7 == &unk_189714F08 && v9 > 3;
  if (v9 != v11 || v22)
  {
    *(_BYTE *)(v3 + 64) = v9;
    *a2 = 12;
  }

  else
  {
    uint64_t v23 = v10 - dword_180A25F38[v11];
    if (!HIWORD(v23))
    {
      *v4++ = v23;
      goto LABEL_7;
    }

    *uint64_t v4 = (v23 >> 10) - 10304;
    int v24 = v23 & 0x3FF | 0xDC00;
    if ((unint64_t)(v4 + 1) < v6)
    {
      v4[1] = v24;
      v4 += 2;
      goto LABEL_7;
    }

    *(_WORD *)(v3 + 144) = v24;
    *(_BYTE *)(v3 + 93) = 1;
    *a2 = 15;
    ++v4;
  }

      uint64_t v13 = v20 + (v13 << 6);
      if (!(v18 + (_DWORD)++v15))
      {
        v2 += v15;
        unsigned int v11 = v12;
        break;
      }
    }
  }

  int v24 = v8 == &unk_189714F08 && v11 > 3;
  if (v11 != v12 || v24)
  {
    *(_BYTE *)(v3 + 64) = v11;
    *a2 = 12;
  }

  else
  {
    int v25 = v13 - dword_180A25F38[v12];
    if (HIWORD(v25))
    {
      *uint64_t v4 = (v25 >> 10) - 10304;
      void *v6 = v9;
      int32_t v26 = v25 & 0x3FF | 0xDC00;
      if ((unint64_t)(v4 + 1) >= v7)
      {
        *(_WORD *)(v3 + 144) = v26;
        *(_BYTE *)(v3 + 93) = 1;
        *a2 = 15;
        ++v4;
        ++v6;
      }

      else
      {
        v4[1] = v26;
        v4 += 2;
        v6[1] = v9;
        v6 += 2;
      }
    }

    else
    {
      *v4++ = v25;
      *v6++ = v9;
    }

    v9 += v12;
LABEL_6:
    while ((unint64_t)v2 < v5 && (unint64_t)v4 < v7)
    {
      uint64_t v13 = *v2;
      if (*v2 < 0)
      {
        *(_BYTE *)(v3 + 65) = v13;
        ++v2;
        if (v13 <= 0xEF) {
          int v14 = 2;
        }
        else {
          int v14 = 3;
        }
        if (v13 > 0xDF) {
          ++v14;
        }
        unsigned int v11 = 1;
        else {
          uint64_t v12 = 0;
        }
        goto LABEL_18;
      }

      *v4++ = v13;
      *v6++ = v9++;
      ++v2;
    }
  }

    if (v14 == dest) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }

  int v14 = (UChar *)uprv_malloc(2 * v15);
  if (v14)
  {
    *status = U_ZERO_ERROR;
    int v16 = uidna_IDNToASCII(s1, length1, v14, v16, options, &v27, status);
    goto LABEL_8;
  }

  *status = U_MEMORY_ALLOCATION_ERROR;
  uint64_t v17 = v28;
  int v7 = -1;
LABEL_34:
  uprv_free(v14);
LABEL_35:
  if (v17 != v28) {
    uprv_free(v17);
  }
  return v7;
}

  if ((int)v10 >= 1
    && (*(_WORD *)(v17 + 2LL * (v10 - 1)) & 0xFC00) == 0xD800
    && ((int)v10 < (int)v15 || (v15 & 0x80000000) != 0))
  {
    unsigned int v20 = *(_WORD *)(v17 + 2LL * v10);
    if ((v20 & 0xFC00) == 0xDC00)
    {
      if ((int)v6 < a5)
      {
        *(_WORD *)(a4 + 2LL * (int)v6) = v20;
        unsigned int v6 = (v6 + 1);
      }

      LODWORD(icu::LocaleBuilder::setRegion((uint64_t)this, v9, v10) = v10 + 1;
    }
  }

  else {
    sub_180885830(a1, (int)v10, 1);
  }
  u_terminateUChars(a4, a5, v6, a6);
  return v6;
}

        *a6 |= 0x20u;
LABEL_34:
        result[9] = 0;
        *(_DWORD *)uint64_t result = 1;
        return result;
      }
    }

    else
    {
      int v8 = 1;
      *a5 = 1;
      if (v6 < 0) {
        goto LABEL_33;
      }
    }

    if (v7 < 2)
    {
      int v14 = 0;
    }

    else
    {
      uint64_t v13 = a4 - 1 - v6;
      do
      {
        if (*a3)
        {
          int v8 = 1;
          *a5 = 1;
        }

        ++a3;
        --v13;
      }

      while (v13);
      int v14 = v6 - (a4 - 1);
    }

    uint64_t v15 = v14 + v7;
    int v16 = *a3;
    uint64_t v17 = v15 - 1;
    if (v15 != 1)
    {
      BOOL v18 = (v16 >> v17) * dword_180A3717C[v17];
      if ((v18 >> 17) * dword_180A37120[v17] != v16) {
        int v8 = 1;
      }
      int v19 = (6554 * (v18 >> 17)) >> 16;
      *a5 = v8 + byte_180A37245[(v18 >> 17) + -10 * v19];
      unsigned int v20 = *a2;
      BOOL v21 = *a2 - 1;
      if (*a2 >= 1)
      {
        *(_DWORD *)uint64_t result = v20;
        result[9] = v19;
        if ((int)(v20 - (1 - v15)) >= 1)
        {
          uint64_t v22 = dword_180A3717C[v15];
          uint64_t v23 = dword_180A37120[v15];
          int v24 = result + 10;
          int v25 = (unsigned __int8 *)(a3 + 1);
          int32_t v26 = dword_180A37120[1 - v15];
          do
          {
            unsigned int v27 = *v25++;
            int v28 = ((v27 >> v15) * v22) >> 17;
            *(v24 - 1) = v19 + (v27 - v28 * v23) * v26;
            unsigned int v29 = __OFSUB__(v21--, 1);
            if (v21 < 0 != v29) {
              break;
            }
            *v24++ = v28;
            LOBYTE(v19) = v28;
          }

          while ((int)(v15 + v21) >= 1);
        }

        goto LABEL_43;
      }

      goto LABEL_42;
    }

    if (v16 < 5)
    {
      if (!*a3) {
        goto LABEL_38;
      }
      uint64_t v30 = 3;
    }

    else
    {
      uint64_t v30 = v8 + 5;
      if (v16 != 5) {
        uint64_t v30 = 7;
      }
    }

    *a5 = v30;
LABEL_38:
    unsigned int v31 = *a2;
    if (*a2 >= 1)
    {
      *(_DWORD *)uint64_t result = v31;
      result += 9;
      int v32 = v31 + 1;
      int v33 = a3 + 1;
      do
      {
        int32_t v34 = *v33++;
        *result++ = v34;
        --v32;
      }

      while (v32 > 1);
      goto LABEL_43;
    }

      if (&v11[++v17] == v6) {
        return a1[2];
      }
    }

    for (uint64_t j = 0LL; j != 20; ++j)
    {
    }

      int v16 = 2139095040;
LABEL_34:
      int v14 = *(float *)&v16;
      goto LABEL_44;
    }

  if ((v8 & 0x8000u) == 0) {
    unsigned int v20 = v8 >> 5;
  }
  else {
    unsigned int v20 = v9;
  }
  BOOL v21 = *(unsigned __int16 *)(a2 + 8);
  uint64_t v22 = (__int16)v21;
  uint64_t v23 = v21 >> 5;
  if (v22 < 0) {
    uint64_t v23 = *(_DWORD *)(a2 + 12);
  }
  return v23 - v20;
}

      umtx_unlock((std::mutex **)&unk_18C4498F0);
    }
  }

        int v33 = v21;
        icu::UnicodeString::unBogus((uint64_t)a7);
        int v25 = *((unsigned __int16 *)a7 + 4);
        int32_t v26 = (__int16)v25;
        unsigned int v27 = v25 >> 5;
        if (v26 >= 0) {
          int v28 = v27;
        }
        else {
          int v28 = *((unsigned int *)a7 + 3);
        }
        icu::UnicodeString::doReplace((uint64_t)a7, 0LL, v28, (uint64_t)&v33, 0, 1LL);
        if ((v18 & 0x80000000) == 0)
        {
          unsigned int v29 = 0LL;
          uint64_t v30 = 4LL * (v18 + 1);
          do
          {
            if (!a3 && v29)
            {
              int v33 = v17;
              icu::UnicodeString::doAppend((uint64_t)a7, (uint64_t)&v33, 0, 1LL);
            }

            unsigned int v31 = v34[v29 / 4];
            int v33 = (__int16)v31 / 10 + 48;
            icu::UnicodeString::doAppend((uint64_t)a7, (uint64_t)&v33, 0, 1LL);
            int v33 = v31 % 10 + 48;
            icu::UnicodeString::doAppend((uint64_t)a7, (uint64_t)&v33, 0, 1LL);
            v29 += 4LL;
          }

          while (v30 != v29);
        }
      }

      else
      {
        icu::UnicodeString::setToBogus(a7);
        *a8 = U_ILLEGAL_ARGUMENT_ERROR;
      }
    }
  }

  else
  {
    icu::UnicodeString::setToBogus(a7);
  }

  return a7;
}

  icu::UnicodeString::~UnicodeString((void *)v17, (icu::UnicodeString *)&v21);
  return v2;
}

      UChar32 v10 = v40 + v41 + v12;
      int v8 = *(unsigned __int16 **)(v7 + 88);
      int v9 = v8[v10];
      uint64_t v4 = v37;
      uint64_t v5 = v38;
      if (v9 == 0xFFFF) {
        goto LABEL_39;
      }
    }

LABEL_140:
    int v8 = this;
    icu::UnicodeString::setToBogus(this);
    icu::UnicodeString::~UnicodeString(v97, (icu::UnicodeString *)v128);
LABEL_148:
    icu::UnicodeString::~UnicodeString(v98, (icu::UnicodeString *)&v118);
    icu::UnicodeString::~UnicodeString(v101, (icu::UnicodeString *)&v123);
    goto LABEL_149;
  }

  icu::UnicodeString::setToBogus(this);
  return v8;
}

        uint64_t v13 = 13LL;
      }

      while (v12 < a5);
    }
  }

  return result;
}

        if (v57 >= v58) {
          goto LABEL_168;
        }
        goto LABEL_141;
      }

      break;
    }

    int v61 = 0LL;
    int v62 = (char *)v112[0] + v57 + 1;
    while (v61 != 100)
    {
      unsigned __int16 v108 = v61 + 1;
      __s[v61] = v60;
      if (!(v57 - (uint64_t)v58 + 1 + v61))
      {
        int v61 = (v61 + 1);
        int v57 = v58;
        goto LABEL_137;
      }

      unsigned int v60 = v62[v61++];
      if (v60 == 45)
      {
        uint64_t v59 = v57 + v61;
        int v61 = v61;
        goto LABEL_135;
      }
    }

    unsigned int v52 = 1;
    *a4 = 1;
LABEL_111:
    if (BYTE4(v112[1])) {
      uprv_free(v112[0]);
    }
    if (v52 && v52 != 2)
    {
      if (v52 == 3) {
        break;
      }
      goto LABEL_200;
    }

    int v49 = (char *)uenum_next((uint64_t)v46, 0LL, a4);
    if (v49) {
      continue;
    }
    break;
  }

uint64_t sub_1807D74A8( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, uint64_t a10)
{
  if (result)
  {
    int v14 = &a10;
    uint64_t v10 = 0LL;
    for (uint64_t i = a9; i; uint64_t i = *v13)
    {
      for (; v10 != 156; *(_BYTE *)(result + v10++) = v12)
      {
        char v12 = *i;
        if (!*i) {
          break;
        }
        ++i;
      }

      uint64_t v13 = (char **)v14++;
    }

    *(_BYTE *)(result + icu::LocaleBuilder::setRegion((uint64_t)this, v9, v10) = 0;
  }

  return result;
}

uint64_t sub_1807D7510(uint64_t a1, char *a2, uint64_t a3, int a4)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  int v8 = *(_DWORD *)(a1 + 1256);
  if (v8 == 514)
  {
    uint64_t v9 = a1 + 240;
    uint64_t v10 = "Languages%variant";
LABEL_5:
    sub_1807D5E5C(v9, v10, 0LL, a2, a3);
    if ((*(_WORD *)(a3 + 8) & 1) == 0) {
      return a3;
    }
    goto LABEL_6;
  }

  if (v8 == 513)
  {
    uint64_t v9 = a1 + 240;
    uint64_t v10 = "Languages%short";
    goto LABEL_5;
  }

icu::UnicodeString *sub_1807D76E0(uint64_t a1, char *a2, icu::UnicodeString *a3, int a4)
{
  if (!a4)
  {
    sub_1807D5E5C(a1 + 240, "Scripts%stand-alone", 0LL, a2, (uint64_t)a3);
    if ((*((_WORD *)a3 + 4) & 1) == 0) {
      goto LABEL_11;
    }
  }

  int v8 = *(_DWORD *)(a1 + 1256);
  if (v8 == 514)
  {
    uint64_t v9 = a1 + 240;
    uint64_t v10 = "Scripts%variant";
LABEL_7:
    sub_1807D5E5C(v9, v10, 0LL, a2, (uint64_t)a3);
    if ((*((_WORD *)a3 + 4) & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }

  if (v8 == 513)
  {
    uint64_t v9 = a1 + 240;
    uint64_t v10 = "Scripts%short";
    goto LABEL_7;
  }

uint64_t sub_1807D77D8(_DWORD *a1, char *a2, uint64_t a3)
{
  else {
    int v6 = 0;
  }
  int v7 = a1[314];
  if (v7 == 514)
  {
    sub_1807D5E5C((uint64_t)(a1 + 118), "Countries%variant", 0LL, a2, a3);
    if ((*(_WORD *)(a3 + 8) & 1) == 0) {
      return a3;
    }
    int v7 = a1[314];
  }

  if (((v7 != 522) & ~v6) != 0
    || (sub_1807D5E5C((uint64_t)(a1 + 118), "Countries%prc", 0LL, a2, a3), (*(_WORD *)(a3 + 8) & 1) != 0))
  {
    if (!strcmp(a2, "PS")
      || (sub_1807D5E5C((uint64_t)(a1 + 118), "Countries%short", 0LL, a2, a3), (*(_WORD *)(a3 + 8) & 1) != 0))
    {
      uint64_t v8 = (uint64_t)(a1 + 118);
      if (a1[315] == 768) {
        sub_1807D5D50(v8, "Countries", 0LL, a2, a3);
      }
      else {
        sub_1807D5E5C(v8, "Countries", 0LL, a2, a3);
      }
    }
  }

  return a3;
}

UChar **sub_1807D791C(uint64_t a1, UChar **a2, UChar **a3)
{
  v6[2] = *(icu::UnicodeString **)MEMORY[0x1895F89C0];
  if (*((unsigned __int16 *)a2 + 4) <= 0x1Fu)
  {
    icu::UnicodeString::copyFrom(a2, a3, 0);
  }

  else
  {
    v6[0] = (icu::UnicodeString *)a2;
    v6[1] = (icu::UnicodeString *)a3;
    UErrorCode v5 = U_ZERO_ERROR;
    icu::SimpleFormatter::formatAndReplace((icu::SimpleFormatter *)(a1 + 704), v6, 2u, a2, 0LL, 0, &v5);
  }

  return a2;
}

icu::UnicodeString *sub_1807D79B8(uint64_t a1, char *a2, icu::UnicodeString *a3, int a4)
{
  int v7 = *(_DWORD *)(a1 + 1260);
  uint64_t v8 = a1 + 240;
  if (v7 == 768)
  {
    sub_1807D5D50(v8, "Variants", 0LL, a2, (uint64_t)a3);
    if (!a4) {
      goto LABEL_5;
    }
  }

  else
  {
    sub_1807D5E5C(v8, "Variants", 0LL, a2, (uint64_t)a3);
    if (!a4) {
LABEL_5:
    }
      sub_1807D68D8(a1, 3u, a3);
  }

  return a3;
}

icu::UnicodeString *sub_1807D7A38(uint64_t a1, char *a2, icu::UnicodeString *a3, int a4)
{
  int v7 = *(_DWORD *)(a1 + 1260);
  uint64_t v8 = a1 + 240;
  if (v7 == 768)
  {
    sub_1807D5D50(v8, "Keys", 0LL, a2, (uint64_t)a3);
    if (!a4) {
      goto LABEL_5;
    }
  }

  else
  {
    sub_1807D5E5C(v8, "Keys", 0LL, a2, (uint64_t)a3);
    if (!a4) {
LABEL_5:
    }
      sub_1807D68D8(a1, 4u, a3);
  }

  return a3;
}

uint64_t sub_1807D7AB8(_DWORD *a1, char *__s1, char *a3, uint64_t a4, int a5)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  if (!strcmp(__s1, "currency"))
  {
    int v23 = 0;
    memset(v24, 0, sizeof(v24));
    icu::UnicodeString::UnicodeString(v24, a3, 0xFFFFFFFFLL, 0LL);
    unsigned int v22 = 0;
    TerminatedBuffer = (const UChar *)icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)v24);
    BaseName = (char *)icu::Locale::getBaseName((icu::Locale *)(a1 + 2));
    Name = ucurr_getName(TerminatedBuffer, BaseName, 1u, 0LL, (int *)&v22, &v23);
    if (v23 < 1)
    {
      uint64_t v15 = (uint64_t)Name;
      uint64_t v16 = v22;
      icu::UnicodeString::unBogus(a4);
      unsigned int v17 = *(unsigned __int16 *)(a4 + 8);
      int v18 = (__int16)v17;
      unsigned int v19 = v17 >> 5;
      if (v18 >= 0) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = *(unsigned int *)(a4 + 12);
      }
      icu::UnicodeString::doReplace(a4, 0LL, v20, v15, 0, v16);
      if (!a5) {
        sub_1807D68D8((uint64_t)a1, 5u, (icu::UnicodeString *)a4);
      }
    }

    else
    {
      icu::UnicodeString::operator=((UChar **)a4, (UChar **)v24);
    }

    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v24);
    return a4;
  }

  if (a1[314] == 513)
  {
    sub_1807D5E5C((uint64_t)(a1 + 60), "Types%short", __s1, a3, a4);
    if ((*(_WORD *)(a4 + 8) & 1) == 0) {
      goto LABEL_6;
    }
  }

  uint64_t v10 = (uint64_t)(a1 + 60);
  if (a1[315] == 768)
  {
    sub_1807D5D50(v10, "Types", __s1, a3, a4);
LABEL_6:
    if (!a5) {
      goto LABEL_11;
    }
    return a4;
  }

  sub_1807D5E5C(v10, "Types", __s1, a3, a4);
  if (!a5) {
LABEL_11:
  }
    sub_1807D68D8((uint64_t)a1, 5u, (icu::UnicodeString *)a4);
  return a4;
}

uint64_t sub_1807D7C8C(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a2 + 8);
  if ((v2 & 0x8000u) == 0) {
    int32_t v3 = v2 >> 5;
  }
  else {
    int32_t v3 = *(_DWORD *)(a2 + 12);
  }
  if (*(__int16 *)(a1 + 8) < 0)
  {
    int32_t v4 = *(_DWORD *)(a1 + 12);
    if ((v2 & 1) != 0) {
      return 0xFFFFFFFFLL;
    }
  }

  else
  {
    int32_t v4 = *(unsigned __int16 *)(a1 + 8) >> 5;
    if ((v2 & 1) != 0) {
      return 0xFFFFFFFFLL;
    }
  }

  if (v3 < 1) {
    return 0xFFFFFFFFLL;
  }
  if ((v2 & 2) != 0) {
    uint64_t v5 = a2 + 10;
  }
  else {
    uint64_t v5 = *(void *)(a2 + 24);
  }
  return icu::UnicodeString::indexOf(a1, v5, 0, v3, 0, v4);
}

uint64_t sub_1807D7CF0(icu::UnicodeString *this, uint64_t a2, int a3)
{
  unsigned int v5 = *((unsigned __int16 *)this + 4);
  if (a3 || (v5 & 1) == 0)
  {
    if ((v5 & 0x8000) != 0) {
      unsigned int v6 = *((_DWORD *)this + 3);
    }
    else {
      unsigned int v6 = v5 >> 5;
    }
    if (v6 > a3)
    {
      if (a3 > 1023)
      {
        *((_WORD *)this + 4) = v5 | 0xFFE0;
        *((_DWORD *)this + 3) = a3;
      }

      else
      {
        *((_WORD *)this + 4) = *((_WORD *)this + 4) & 0x1F | (32 * a3);
      }
    }
  }

  else
  {
    icu::UnicodeString::unBogus((uint64_t)this);
  }

  return icu::UnicodeString::doReplace((uint64_t)this, 0LL, a2, 0LL, 0, 0LL);
}

uint64_t sub_1807D7D78(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  icu::Locale::Locale((icu::Locale *)v7, a2, 0LL, 0LL, 0LL);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(void *)a1 + 48LL))(a1, v7, a3);
  icu::Locale::~Locale((icu::Locale *)v7);
  return v5;
}

icu::UnicodeString *sub_1807D7E10(uint64_t a1, char *a2, icu::UnicodeString *a3)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  if (strcmp("root", a2) && !strchr(a2, 95))
  {
    int v7 = *(_DWORD *)(a1 + 1256);
    if (v7 == 514)
    {
      uint64_t v8 = a1 + 240;
      uint64_t v9 = "Languages%variant";
    }

    else
    {
      if (v7 != 513)
      {
LABEL_9:
        sub_1807D5E5C(a1 + 240, "Languages", 0LL, a2, (uint64_t)a3);
        if ((*((_WORD *)a3 + 4) & 1) != 0)
        {
          __int128 v24 = 0u;
          __int128 v25 = 0u;
          __int128 v22 = 0u;
          __int128 v23 = 0u;
          __int128 v20 = 0u;
          __int128 v21 = 0u;
          __int128 v18 = 0u;
          __int128 v19 = 0u;
          __int128 v16 = 0u;
          __int128 v17 = 0u;
          __int128 v14 = 0u;
          __int128 v15 = 0u;
          memset(v13, 0, sizeof(v13));
          icu::Locale::createCanonical((icu::Locale *)a2, (icu::Locale *)v13);
          uint64_t v10 = (char *)*((void *)&v14 + 1);
          if (*(_DWORD *)(a1 + 1256) == 513)
          {
            sub_1807D5E5C(a1 + 240, "Languages%short", 0LL, *((char **)&v14 + 1), (uint64_t)a3);
            if ((*((_WORD *)a3 + 4) & 1) == 0)
            {
              sub_1807D68D8(a1, 0, a3);
              icu::Locale::~Locale((icu::Locale *)v13);
              return a3;
            }
          }

          sub_1807D5E5C(a1 + 240, "Languages", 0LL, v10, (uint64_t)a3);
          icu::Locale::~Locale((icu::Locale *)v13);
          if ((*((_WORD *)a3 + 4) & 1) != 0 && *(_DWORD *)(a1 + 1260) == 768)
          {
            icu::UnicodeString::UnicodeString(v13, a2, 0xFFFFFFFFLL, 0LL);
            icu::UnicodeString::copyFrom((UChar **)a3, (UChar **)v13, 0);
            icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v13);
          }
        }

LABEL_16:
        sub_1807D68D8(a1, 0, a3);
        return a3;
      }

      uint64_t v8 = a1 + 240;
      uint64_t v9 = "Languages%short";
    }

    sub_1807D5E5C(v8, v9, 0LL, a2, (uint64_t)a3);
    if ((*((_WORD *)a3 + 4) & 1) == 0) {
      goto LABEL_16;
    }
    goto LABEL_9;
  }

  icu::UnicodeString::UnicodeString(v13, a2, 0xFFFFFFFFLL, 0LL);
  a3 = icu::UnicodeString::operator=(a3, (icu::UnicodeString *)v13);
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v13);
  return a3;
}

  if (v3 < 2)
  {
    __int128 v14 = 0;
LABEL_27:
    *((_DWORD *)a1 + 5) = v14;
    v5 += 4LL * v14 * (int)v2;
    return v5;
  }

  __int128 v14 = 0;
  while (1)
  {
    __int128 v15 = v3 + v14;
    if (v3 + v14 < 0 != __OFADD__(v3, v14)) {
      ++v15;
    }
    __int128 v16 = v15 >> 1;
    int v7 = (_DWORD *)(v5 + 4LL * v16 * (int)v2);
    if (*v7 <= a2) {
      break;
    }
    int32_t v3 = v16;
LABEL_24:
    if (v14 >= v3 - 1) {
      goto LABEL_27;
    }
  }

  if (v7[1] <= a2)
  {
    __int128 v14 = v16;
    goto LABEL_24;
  }

  *((_DWORD *)a1 + 5) = v16;
  return (uint64_t)v7;
}

      unsigned int v58 = 0LL;
      if (a1 < 0)
      {
        uint64_t result = ucase_toFullFolding(v22, &v58, a2);
      }

      else
      {
        *(_DWORD *)(a4 + 20) = a5;
        *(_DWORD *)(a4 + 24) = v20;
        uint64_t result = ucase_toFullLower(v22, (uint64_t (*)(uint64_t, void))sub_18081A51C, a4, &v58, a1);
      }

      unsigned int v39 = result;
      if ((result & 0x80000000) == 0)
      {
        if (*a9 <= 0)
        {
          int v40 = (const unsigned __int8 *)(a5 - v19);
        }

        int v41 = (icu::ByteSinkUtil *)(v20 - a5);
        if (v39 > 0x1F) {
          uint64_t result = icu::ByteSinkUtil::appendCodePoint(v41, v39, a7, a8, v15);
        }
        else {
          uint64_t result = icu::ByteSinkUtil::appendChange((int)v41, v58, v39, a7, a8, a9);
        }
        __int128 v19 = v20;
      }

      __int128 v17 = *a9;
      if (*a9 <= 0)
      {
        a5 = v20;
      }

      goto LABEL_105;
    }

    __int128 v25 = *(unsigned __int8 *)(a3 + v20) ^ 0x80LL;
    LODWORD(v20) = a5 + 2;
    __int128 v22 = (((_DWORD)v22 << 6) - 12288) | (unint64_t)v25;
    uint64_t v26 = v57[v22];
    if (v57[v22])
    {
      if (v26 == 128)
      {
        if ((v22 & 0x80000000) != 0) {
          goto LABEL_105;
        }
        goto LABEL_16;
      }

      uint64_t v45 = (const unsigned __int8 *)(a5 - v19);
      uint64_t result = icu::ByteSinkUtil::appendTwoBytes((int)v22 + (char)v26, a7);
      if (!a8) {
        goto LABEL_34;
      }
      int v28 = a8;
      unsigned int v29 = 2;
      uint64_t v30 = 2;
      goto LABEL_33;
    }

            __int128 v16 = a1[1];
            __int128 v17 = *(char *)(v16 + 93);
            *(_BYTE *)(v16 + 93) = v17 + 1;
            *(_WORD *)(v16 + 2 * v17 + 144) = result & 0x3FF | 0xDC00;
            uint64_t v8 = v36;
          }

          else
          {
            int v36 = v8 + 1;
            *int v36 = result & 0x3FF | 0xDC00;
LABEL_65:
            v8 += 2;
          }

          goto LABEL_17;
        }

        uint64_t v38 = (_BYTE *)a1[1];
        if (v14 < 0x100)
        {
          unsigned int v39 = 1;
        }

        else
        {
          v38[66] = v14;
          LODWORD(icu::LocaleBuilder::setLanguage((uint64_t)this, v13, v14) = v14 >> 8;
          unsigned int v39 = 2;
        }

        v38[65] = v14;
        v38[64] = v39;
        if ((_DWORD)result == 65534) {
          __int128 v21 = 10;
        }
        else {
          __int128 v21 = 12;
        }
LABEL_27:
        *a2 = v21;
LABEL_28:
        a1[4] = v8;
        a1[2] = v5;
        return result;
    }
  }

  uint64_t v26 = *(_DWORD *)(a1 + 80);
  if (v26)
  {
    if ((_DWORD)v21 == 1 && v26 > 1)
    {
      uint64_t v27 = 15;
      int v28 = 1;
LABEL_27:
      *(_DWORD *)(a1 + 80) = v28;
      LOBYTE(v33[0]) = v27;
      LODWORD(v21) = v21 + 1;
      __int128 v22 = (char *)v33;
      goto LABEL_30;
    }

    if (v21 >= 2 && v26 == 1)
    {
      uint64_t v27 = 14;
      int v28 = 2;
      goto LABEL_27;
    }
  }

            __int128 v19 = 0;
LABEL_18:
            __int128 v20 = 0x1000000;
            if (v3 < v5 && (unint64_t)v4 >= v7)
            {
              __int128 v21 = 15;
              goto LABEL_72;
            }

            goto LABEL_73;
          }

              a5 = v9;
              if ((length & 0x80000000) == 0)
              {
LABEL_11:
                uint64_t v10 = v8 - a5;
                if (v10 >= length)
                {
                  if ((v7 & 2) == 0)
                  {
LABEL_13:
                    uint64_t v11 = *(void *)(a1 + 24);
                    goto LABEL_20;
                  }

              a5 = v9;
              if ((length & 0x80000000) == 0)
              {
LABEL_11:
                uint64_t v10 = v8 - a5;
                if (v10 >= length)
                {
                  if ((v7 & 2) == 0)
                  {
LABEL_13:
                    uint64_t v11 = *(void *)(a1 + 24);
                    goto LABEL_20;
                  }

        unsigned int v6 = v12;
        goto LABEL_17;
      }

  if ((_DWORD)TableItemByKey == -1) {
    goto LABEL_22;
  }
LABEL_17:
  if (v9 >= 2)
  {
    uint64_t v13 = *(const char **)v5;
    Default = (const char *)uloc_getDefault(TableItemByKey);
    if (!strcmp(v13, Default))
    {
      __int128 v15 = -127;
    }

    else if (!strcmp(*(const char **)v5, "root"))
    {
      __int128 v15 = -127;
    }

    else
    {
      __int128 v15 = -128;
    }

    goto LABEL_24;
  }

  return v5;
}

  a3 = v15;
  if ((a4 & 0x8000000000000000LL) == 0)
  {
LABEL_11:
    if (v14 >= a4) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }

  char v12 = 0LL;
LABEL_17:
  int v7 = v12;
LABEL_18:
  __int128 v14 = (v8 - v9);
  if ((int)v8 >= (int)v9 && ((int)v9 >= (int)v7 || (int)v7 >= (int)v8))
  {
    if (a5)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 40LL))(v11, v9, v8, v7);
      else {
        uint64_t v9 = v8;
      }
      if ((_DWORD)v14 == 0x7FFFFFFF && (int)v9 <= 0)
      {
        if ((*(_WORD *)(v11 + 8) & 1) != 0) {
          __int128 v15 = 2;
        }
        else {
          __int128 v15 = *(_WORD *)(v11 + 8) & 0x1F;
        }
        *(_WORD *)(v11 + 8) = v15;
      }

      else
      {
        uint64_t result = icu::UnicodeString::doReplace(v11, v9, v14, 0LL, 0, 0LL);
      }
    }

    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 40LL))(v11, v9, v8, v7);
    }

    __int128 v16 = *(_WORD *)(v11 + 8);
    if ((v16 & 0x11) != 0)
    {
      __int128 v17 = 0LL;
    }

    else if ((v16 & 2) != 0)
    {
      __int128 v17 = v11 + 10;
    }

    else
    {
      __int128 v17 = *(void *)(v11 + 24);
    }

    *(void *)(v10 + 48) = v17;
    if (!a5)
    {
      __int128 v18 = *(int *)(v10 + 44) + (uint64_t)((int)v8 - (int)v9);
      *(_DWORD *)(v10 + 44) = v18;
      *(void *)(v10 + 16) = v18;
      *(_DWORD *)(v10 + 28) = v18;
    }

    __int128 v19 = v7 + v8 - v9;
    *(_DWORD *)(v10 + 40) = v19;
  }

  else
  {
    *a6 = 8;
  }

  return result;
}

    uint64_t v8 = 1;
    goto LABEL_17;
  }

  uint64_t v5 = 0;
  if (!a3)
  {
    int v7 = 0;
    goto LABEL_16;
  }

  unsigned int v6 = 0;
  int32_t v4 = *(void *)(a1 + 112);
LABEL_11:
  uint64_t v8 = 0;
  uint64_t v9 = v4 == v5 && v6;
  int v7 = v5 - v9;
LABEL_17:
  if (v7 <= 0) {
    uint64_t v10 = -(-v7 & 0xF);
  }
  else {
    uint64_t v10 = v7 & 0xF;
  }
  uint64_t v11 = v7 - v10;
  char v12 = *(void *)(a1 + 32);
  if (v12 == v7 - v10) {
    goto LABEL_37;
  }
  char v12 = v11;
  if (*(_DWORD *)(a1 + 120) == v11)
  {
    uint64_t v13 = (uint64_t *)(a1 + 80);
  }

  else
  {
    if (*(_DWORD *)(a1 + 124) != v11)
    {
      __int128 v15 = *(void *)(a1 + 72);
      __int128 v14 = *(void *)(a1 + 80);
      if (v14 == *(void *)(a1 + 48)) {
        __int128 v14 = *(void *)(a1 + 88);
      }
      (*(void (**)(void, void))(*(void *)v15 + 120LL))(*(void *)(a1 + 72), v11);
      __int128 v16 = 0LL;
      __int128 v17 = v7 - v10;
      do
      {
        *(_WORD *)(v14 + 2 * v16) = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 40LL))(v15);
        __int128 v18 = *(void *)(a1 + 112) < v17 + (int)v16 || v16 == 15;
        ++v16;
      }

      while (!v18);
      goto LABEL_34;
    }

    uint64_t v13 = (uint64_t *)(a1 + 88);
  }

  __int128 v14 = *v13;
LABEL_34:
  *(void *)(a1 + 48) = v14;
  __int128 v19 = 16;
  *(_DWORD *)(a1 + 44) = 16;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 16) = (int)v12 + 16;
  __int128 v20 = *(void *)(a1 + 112);
  if (v20 < (int)v12 + 16)
  {
    *(void *)(a1 + 16) = v20;
    __int128 v19 = v20 - v12;
    *(_DWORD *)(a1 + 44) = v20 - v12;
  }

  *(_DWORD *)(a1 + 28) = v19;
LABEL_37:
  __int128 v21 = v5 - v12;
  *(_DWORD *)(a1 + 40) = v5 - v12;
  if ((v8 & 1) != 0) {
    return v21 > 0;
  }
  else {
    return v21 < *(_DWORD *)(a1 + 44);
  }
}

    unsigned int v6 = (_WORD)v8 + 1;
    v7 += 16LL;
  }

  if (v6 != 8256) {
    goto LABEL_7;
  }
  uint64_t v13 = *(_DWORD *)(v5 + 7200);
  __int128 v14 = v13 + 1;
  if (v13 >= -1 && *(_DWORD *)(v5 + 7204) > v13)
  {
LABEL_21:
    *(void *)(*(void *)(v5 + 7216) + 8LL * v13) = 511LL;
    *(_DWORD *)(v5 + 7200) = v14;
  }

  else
  {
    this = icu::UVector64::expandCapacity((icu::UVector64 *)(v5 + 7192), v14, a3);
    if ((_DWORD)this)
    {
      uint64_t v13 = *(_DWORD *)(v5 + 7200);
      __int128 v14 = v13 + 1;
      goto LABEL_21;
    }
  }

  return this;
}

    *(void *)int v65 = v11;
    if ((v10 & 8) == 0 && v11 != a2) {
      return a1[2];
    }
  }

  else
  {
    char v12 = *a2;
    uint64_t v11 = a2;
  }

  if (v12 == 45 || v12 == 43)
  {
    __int128 v16 = v12 == 45;
    if (v11 + 1 == v6) {
      return a1[2];
    }
    __int128 v17 = 1LL;
    while (1)
    {
      char v12 = v11[v17];
      if (v12 >= 0x80) {
        break;
      }
      __int128 v18 = 0LL;
      while (byte_180A378BC[v18] != v12)
      {
        if (++v18 == 6) {
          goto LABEL_35;
        }
      }

  if ((v2 & 0xFFFFFFDF) == 0x48) {
    return 10LL;
  }
  if (v2 != 109) {
    return 24LL;
  }
  return 12LL;
}

  __int128 v15 = *(_DWORD *)(v5 + 3208);
  if (v6 >= v15) {
    goto LABEL_52;
  }
  while (1)
  {
    __int128 v16 = v5 + ((uint64_t)v6 << 6);
    __int128 v17 = *(unsigned __int16 *)(v16 + 16);
    __int128 v18 = v17 >> 5;
    else {
      __int128 v19 = v17 >> 5;
    }
    __int128 v20 = (const icu::UnicodeString *)(v16 + 8);
    __int128 v21 = (__int16)v17;
    if (!v19
      || ((v17 & 2) != 0 ? (__int128 v22 = (_WORD *)((char *)v20 + 10)) : (__int128 v22 = *(_WORD **)(v5 + ((uint64_t)v6 << 6) + 32)),
          *v22 != 39))
    {
      if (v21 >= 0) {
        int v28 = v18;
      }
      else {
        int v28 = *(unsigned int *)(v5 + ((uint64_t)v6 << 6) + 20);
      }
      uint64_t result = icu::UnicodeString::doAppend((uint64_t)this, v20, 0, v28);
      ++v6;
      goto LABEL_45;
    }

    __int128 v23 = v6 + 1LL;
    if (v6 + 1 >= v15) {
      break;
    }
    __int128 v24 = v5 + (v23 << 6);
    uint64_t v26 = *(__int16 *)(v24 + 16);
    __int128 v25 = (unsigned __int16 *)(v24 + 16);
    uint64_t v27 = (unsigned __int16)v26;
    if (v26 < 0)
    {
      if (!*(_DWORD *)(v5 + (v23 << 6) + 20)) {
        break;
      }
    }

    else if (!(v27 >> 5))
    {
      break;
    }

    unsigned int v29 = (v27 & 2) != 0 ? v25 + 1 : *(unsigned __int16 **)(v5 + (v23 << 6) + 32);
    if (*v29 != 39) {
      break;
    }
    if (v21 >= 0) {
      uint64_t v30 = v18;
    }
    else {
      uint64_t v30 = *(unsigned int *)(v5 + 8 + ((uint64_t)v6 << 6) + 12);
    }
    icu::UnicodeString::doAppend((uint64_t)this, v20, 0, v30);
    v6 += 2;
    unsigned int v31 = *v25;
    int v32 = (__int16)v31;
    int v33 = v31 >> 5;
    if (v32 >= 0) {
      int32_t v34 = v33;
    }
    else {
      int32_t v34 = *(unsigned int *)(v5 + 8 + (v23 << 6) + 12);
    }
    uint64_t result = icu::UnicodeString::doAppend((uint64_t)this, (const icu::UnicodeString *)(v25 - 4), 0, v34);
LABEL_45:
    __int128 v15 = *(_DWORD *)(v5 + 3208);
    if (v6 >= v15) {
      goto LABEL_52;
    }
  }

  if (v21 >= 0) {
    unsigned int v35 = v18;
  }
  else {
    unsigned int v35 = *(unsigned int *)(v5 + ((uint64_t)v6 << 6) + 20);
  }
  uint64_t result = icu::UnicodeString::doAppend((uint64_t)this, v20, 0, v35);
LABEL_52:
  *a3 = v6;
  return result;
}

    LOBYTE(icu::LocaleBuilder::setRegion((uint64_t)this, v9, v10) = 0;
    goto LABEL_18;
  }

  __int128 v18 = 48;
  uint64_t result = (icu::ICU_Utility *)icu::UnicodeString::doAppend(a2, (uint64_t)&v18, 0, 1LL);
  char v12 = v5 - 1;
  if (v6 < 0)
  {
LABEL_20:
    __int128 v19 = 46;
    uint64_t result = (icu::ICU_Utility *)icu::UnicodeString::doAppend(a2, (uint64_t)&v19, 0, 1LL);
  }

  PatternForCurrencySpacing = icu::DecimalFormatSymbols::getPatternForCurrencySpacing(a1, a2 != 0, a3 == 1, (int *)a4);
  __int128 v23 = PatternForCurrencySpacing;
  __int128 v24 = *(unsigned __int16 *)(PatternForCurrencySpacing + 8);
  __int128 v25 = (__int16)v24;
  uint64_t v26 = v24 >> 5;
  if (v25 >= 0) {
    uint64_t v27 = v26;
  }
  else {
    uint64_t v27 = *(_DWORD *)(PatternForCurrencySpacing + 12);
  }
  if (icu::UnicodeString::doCompare(PatternForCurrencySpacing, 0, v27, (uint64_t)&unk_180A47C16, 0, -1))
  {
    int v28 = *(unsigned __int16 *)(v23 + 8);
    unsigned int v29 = (__int16)v28;
    uint64_t v30 = v28 >> 5;
    if (v29 >= 0) {
      unsigned int v31 = v30;
    }
    else {
      unsigned int v31 = *(_DWORD *)(v23 + 12);
    }
    if (icu::UnicodeString::doCompare(v23, 0, v31, (uint64_t)L"[[:^S:]&[:^Z:]]", 0, -1))
    {
      icu::UnicodeSet::UnicodeSet(a5, (const icu::UnicodeString *)v23, a4);
      return;
    }

    int v32 = (const icu::UnicodeSet *)qword_18C5356B8;
  }

  else
  {
    int v32 = (const icu::UnicodeSet *)qword_18C5356B0;
  }

  icu::UnicodeSet::UnicodeSet(a5, v32);
}

    *a3 = 65811;
    return result;
  }

  if ((icu::StringSegment::charAt(a1, v6) & 0xFFFE) != 0x2A)
  {
    int v7 = v6;
    if ((int)v6 < (int)icu::StringSegment::length(a1))
    {
      int v7 = v6;
      do
      {
        ++v7;
      }

      while (v7 < (int)icu::StringSegment::length(a1));
    }

    goto LABEL_15;
  }

  icu::number::Precision::minSignificantDigits(v6, (uint64_t)v9);
LABEL_18:
  *(_OWORD *)(a2 + 64) = *(_OWORD *)v9;
  uint64_t result = *(double *)&v9[12];
  *(_OWORD *)(a2 + 76) = *(_OWORD *)&v9[12];
  return result;
}

      char v12 = *(void *)(a2 + 16);
      if (v12)
      {
        sub_18094FEA4(v12, (_DWORD *)(a1 + 24), (uint64_t)&v14);
        sub_18094FF68((uint64_t)&v14, (int *)(a1 + 24), &v16);
        uint64_t v13 = v16;
        __int128 v16 = 0LL;
        *(void *)(a1 + 16) = v13;
        sub_1807DDC3C(&v16);
        if (v15) {
          uprv_free(v14);
        }
      }
    }
  }

  return a1;
}

    char v12 = *(_DWORD *)(v4 + 12);
    uint64_t v11 = 1;
LABEL_17:
    if ((int)i >= v12)
    {
      v3[22] = 30;
    }

    else
    {
      uint64_t v13 = i + 1;
      switch(v3[22])
      {
        case 1:
          while (1)
          {
            __int128 v14 = v13;
            if (*(__int16 *)(v4 + 8) < 0)
            {
              __int128 v15 = *(int *)(v4 + 12);
              if (v13 >= v15) {
                goto LABEL_30;
              }
            }

            else
            {
              __int128 v15 = (unint64_t)*(unsigned __int16 *)(v4 + 8) >> 5;
            }

            if (v15 <= v13)
            {
              __int128 v17 = 0xFFFF;
            }

            else
            {
              __int128 v16 = v4 + 10;
              if ((*(_WORD *)(v4 + 8) & 2) == 0) {
                __int128 v16 = *(void *)(v4 + 24);
              }
              __int128 v17 = *(unsigned __int16 *)(v16 + 2 * v13);
            }

            __int128 v18 = sub_18095607C(v17);
            v3[22] = v18;
            uint64_t v13 = v14 + 1;
            if (v18 != 1)
            {
LABEL_30:
              __int128 v19 = 1;
              goto LABEL_42;
            }
          }

        case 2:
        case 3:
        case 5:
        case 6:
        case 9:
        case 0xD:
        case 0x10:
        case 0x12:
          goto LABEL_19;
        case 7:
          LODWORD(icu::LocaleBuilder::setLanguage((uint64_t)this, v13, v14) = i + 1;
          if (v11)
          {
            __int128 v24 = *(_DWORD *)(v4 + 12);
          }

          else
          {
            __int128 v24 = v7 >> 5;
          }

          uint64_t v26 = v4 + 10;
          if ((v7 & 2) == 0) {
            uint64_t v26 = *(void *)(v4 + 24);
          }
          LODWORD(icu::LocaleBuilder::setLanguage((uint64_t)this, v13, v14) = i + 2;
          if (v11)
          {
            uint64_t v27 = *(_DWORD *)(v4 + 12);
          }

          else
          {
            uint64_t v27 = v7 >> 5;
          }

          if (v27 > v14)
          {
            if ((v7 & 2) == 0) {
              uint64_t v5 = *(void *)(v4 + 24);
            }
            if (*(_WORD *)(v5 + 2LL * (int)v14) == 46)
            {
              v3[22] = 9;
              LODWORD(icu::LocaleBuilder::setLanguage((uint64_t)this, v13, v14) = i + 3;
              goto LABEL_66;
            }
          }

  icu::Locale *v3 = 0LL;
  return result;
}

    unsigned int v29 = *((unsigned __int16 *)a2 + 4);
    uint64_t v30 = (__int16)v29;
    unsigned int v31 = v29 >> 5;
    if (v30 < 0) {
      unsigned int v31 = *((_DWORD *)a2 + 3);
    }
    icu::UnicodeString::doAppend((uint64_t)a5, a2, v11, v31 - v11);
    icu::FieldPosition::~FieldPosition((icu::FieldPosition *)&v34);
  }

  return a5;
}

    *a3 = v7;
LABEL_17:
    if (BYTE4(v17[0])) {
      uprv_free(v16);
    }
  }

  uint64_t v8 = *((unsigned __int8 *)this + 794);
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v18);
  if (!v8)
  {
    uint64_t v9 = (char *)*((void *)this + 100);
    if (v9)
    {
      sub_18098624C(v9);
      *((void *)this + 100) = 0LL;
    }

    icu::UnicodeString::setToBogus((icu::SimpleDateFormat *)((char *)this + 416));
    return;
  }

    __int128 v14 = 0LL;
    *((_DWORD *)a3 + 3) = v9;
    return v14;
  }

  __int128 v14 = 0LL;
  *((_DWORD *)a3 + 2) = v9 + 1;
  return v14;
}

    if (*(int *)a8 < 1)
    {
      if (!a4) {
        return DateTimeInstance;
      }
      uint64_t v27 = a4;
      icu::UnicodeString::UnicodeString(v30, v13 == -1, &v27);
      TimeZone = icu::TimeZone::createTimeZone(v30, v22);
      icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)v30);
      if (TimeZone)
      {
        (*(void (**)(icu::SimpleDateFormat *, void *))(*(void *)DateTimeInstance + 184LL))( DateTimeInstance,  TimeZone);
        return DateTimeInstance;
      }

      *a8 = U_MEMORY_ALLOCATION_ERROR;
    }

    (*(void (**)(icu::SimpleDateFormat *))(*(void *)DateTimeInstance + 8LL))(DateTimeInstance);
    return 0LL;
  }

  return DateTimeInstance;
}

  uint64_t v11 = (unsigned int *)(qword_18C535D68 + 28);
  do
    char v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  return qword_18C535D68;
}

  if ((result & 0xFC00) == 0xD800 && v9 != *((unsigned __int16 **)this + 51))
  {
    uint64_t v10 = *v9;
    if ((v10 & 0xFC00) == 0xDC00)
    {
      *((void *)this + 50) = v9 + 1;
      return (v10 + ((_DWORD)result << 10) - 56613888);
    }
  }

  return result;
}

    StringByKey = 0LL;
    goto LABEL_17;
  }

  char v12 = *((unsigned int *)a2 + 3);
  if ((v12 & 0xFFFFFFFE) != 2) {
    goto LABEL_16;
  }
LABEL_14:
  v20[(int)icu::UnicodeString::extract((uint64_t)a2, 0, v12, v20, 129)] = 0;
  StringByKey = ures_getStringByKey(v8, v20, (int *)&v19, (int *)&v19 + 1);
  uint64_t v9 = HIDWORD(v19);
  if (HIDWORD(v19) == 2)
  {
    uint64_t v9 = 0;
    HIDWORD(v19) = 0;
  }

icu::UnicodeString *sub_1807D802C(uint64_t a1, char *a2, icu::UnicodeString *a3)
{
  return sub_1807D76E0(a1, a2, a3, 0);
}

icu::UnicodeString *sub_1807D8034(uint64_t a1, int32_t value, icu::UnicodeString *a3)
{
  Name = (char *)uscript_getName(value);
  return sub_1807D76E0(a1, Name, a3, 0);
}

icu::UnicodeString *sub_1807D806C(_DWORD *a1, char *a2, icu::UnicodeString *a3, int a4)
{
  else {
    BOOL v8 = 0;
  }
  int v9 = a1[314];
  switch(v9)
  {
    case 522:
      goto LABEL_12;
    case 514:
      uint64_t v10 = (uint64_t)(a1 + 118);
      uint64_t v11 = "Countries%variant";
      goto LABEL_13;
    case 513:
      uint64_t v10 = (uint64_t)(a1 + 118);
      uint64_t v11 = "Countries%short";
      goto LABEL_13;
  }

  if (v8)
  {
LABEL_12:
    uint64_t v10 = (uint64_t)(a1 + 118);
    uint64_t v11 = "Countries%prc";
LABEL_13:
    sub_1807D5E5C(v10, v11, 0LL, a2, (uint64_t)a3);
    if ((*((_WORD *)a3 + 4) & 1) == 0) {
      goto LABEL_16;
    }
  }

  uint64_t v12 = (uint64_t)(a1 + 118);
  if (a1[315] != 768)
  {
    sub_1807D5E5C(v12, "Countries", 0LL, a2, (uint64_t)a3);
    if (a4) {
      return a3;
    }
    goto LABEL_17;
  }

  sub_1807D5D50(v12, "Countries", 0LL, a2, (uint64_t)a3);
LABEL_16:
  if (!a4) {
LABEL_17:
  }
    sub_1807D68D8((uint64_t)a1, 2u, a3);
  return a3;
}

icu::UnicodeString *sub_1807D8190(_DWORD *a1, char *a2, icu::UnicodeString *a3)
{
  return sub_1807D806C(a1, a2, a3, 0);
}

icu::UnicodeString *sub_1807D8198(uint64_t a1, char *a2, icu::UnicodeString *a3)
{
  return sub_1807D79B8(a1, a2, a3, 0);
}

icu::UnicodeString *sub_1807D81A0(uint64_t a1, char *a2, icu::UnicodeString *a3)
{
  return sub_1807D7A38(a1, a2, a3, 0);
}

uint64_t sub_1807D81A8(_DWORD *a1, char *a2, char *a3, uint64_t a4)
{
  return sub_1807D7AB8(a1, a2, a3, a4, 0);
}

uint64_t icu::LocaleDisplayNames::createInstance(uint64_t a1, unint64_t a2)
{
  int v2 = a2;
  uint64_t result = icu::UMemory::operator new((icu::UMemory *)0x4F8, a2);
  if (result) {
    return sub_1807D5F1C(result, a1, v2);
  }
  return result;
}

uint64_t icu::LocaleDisplayNames::createInstance(uint64_t a1, unsigned int *a2, int a3)
{
  uint64_t result = icu::UMemory::operator new((icu::UMemory *)0x4F8, (unint64_t)a2);
  if (result)
  {
    if (a2) {
      int v7 = a3;
    }
    else {
      int v7 = 0;
    }
    return sub_1807D6638(result, a1, a2, v7);
  }

  return result;
}

uint64_t uldn_open(const char *a1, unint64_t a2, int *a3)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*a3 > 0) {
    return 0LL;
  }
  Default = a1;
  if (!a1) {
    Default = (const char *)uloc_getDefault(0LL);
  }
  icu::Locale::Locale((icu::Locale *)v7, Default, 0LL, 0LL, 0LL);
  uint64_t Instance = icu::LocaleDisplayNames::createInstance((uint64_t)v7, a2);
  icu::Locale::~Locale((icu::Locale *)v7);
  return Instance;
}

uint64_t uldn_openForContext(const char *a1, unsigned int *a2, int a3, int *a4)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  if (*a4 > 0) {
    return 0LL;
  }
  Default = a1;
  if (!a1) {
    Default = (const char *)uloc_getDefault(0LL);
  }
  icu::Locale::Locale((icu::Locale *)v9, Default, 0LL, 0LL, 0LL);
  uint64_t Instance = icu::LocaleDisplayNames::createInstance((uint64_t)v9, a2, a3);
  icu::Locale::~Locale((icu::Locale *)v9);
  return Instance;
}

uint64_t uldn_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t uldn_getLocale(uint64_t result)
{
  if (result) {
    return *(void *)((*(uint64_t (**)(uint64_t))(*(void *)result + 24LL))(result) + 40);
  }
  return result;
}

uint64_t uldn_getDialectHandling(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 32LL))(result);
  }
  return result;
}

uint64_t uldn_getContext(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 <= 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40LL))(a1);
  }
  else {
    return 0LL;
  }
}

uint64_t uldn_localeDisplayName(uint64_t a1, uint64_t a2, UChar *a3, uint64_t a4, int *a5)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (*a5 > 0) {
    return 0LL;
  }
  if (!a1
    || !a2
    || ((int v9 = a4, !a3) ? (v11 = (int)a4 <= 0) : (v11 = 1), v11 ? (v12 = 0) : (v12 = 1), (a4 & 0x80000000) != 0 || v12))
  {
    uint64_t v5 = 0LL;
    *a5 = 1;
  }

  else
  {
    memset(v17, 0, sizeof(v17));
    icu::UnicodeString::UnicodeString(v17, a3, 0LL, a4);
    (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(void *)a1 + 56LL))(a1, a2, v17);
    if ((BYTE8(v17[0]) & 1) != 0)
    {
      uint64_t v5 = 0LL;
      uint64_t v13 = 1LL;
      *a5 = 1;
    }

    else
    {
      __int128 v16 = a3;
      uint64_t v5 = icu::UnicodeString::extract((uint64_t)v17, &v16, v9, a5);
      __int128 v15 = v16;
      uint64_t v13 = (uint64_t)&v15;
    }

    icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v17);
  }

  return v5;
}

uint64_t uldn_languageDisplayName(uint64_t a1, uint64_t a2, UChar *a3, uint64_t a4, int *a5)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (*a5 > 0) {
    return 0LL;
  }
  if (!a1
    || !a2
    || ((int v9 = a4, !a3) ? (v11 = (int)a4 <= 0) : (v11 = 1), v11 ? (v12 = 0) : (v12 = 1), (a4 & 0x80000000) != 0 || v12))
  {
    uint64_t v5 = 0LL;
    *a5 = 1;
  }

  else
  {
    memset(v16, 0, sizeof(v16));
    icu::UnicodeString::UnicodeString(v16, a3, 0LL, a4);
    (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(void *)a1 + 64LL))(a1, a2, v16);
    __int128 v15 = a3;
    uint64_t v5 = icu::UnicodeString::extract((uint64_t)v16, &v15, v9, a5);
    __int128 v14 = v15;
    icu::UnicodeString::~UnicodeString(&v14, (icu::UnicodeString *)v16);
  }

  return v5;
}

uint64_t uldn_scriptDisplayName(uint64_t a1, uint64_t a2, UChar *a3, uint64_t a4, int *a5)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (*a5 > 0) {
    return 0LL;
  }
  if (!a1
    || !a2
    || ((int v9 = a4, !a3) ? (v11 = (int)a4 <= 0) : (v11 = 1), v11 ? (v12 = 0) : (v12 = 1), (a4 & 0x80000000) != 0 || v12))
  {
    uint64_t v5 = 0LL;
    *a5 = 1;
  }

  else
  {
    memset(v16, 0, sizeof(v16));
    icu::UnicodeString::UnicodeString(v16, a3, 0LL, a4);
    (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(void *)a1 + 72LL))(a1, a2, v16);
    __int128 v15 = a3;
    uint64_t v5 = icu::UnicodeString::extract((uint64_t)v16, &v15, v9, a5);
    __int128 v14 = v15;
    icu::UnicodeString::~UnicodeString(&v14, (icu::UnicodeString *)v16);
  }

  return v5;
}

uint64_t uldn_scriptCodeDisplayName(uint64_t a1, int32_t value, UChar *a3, uint64_t a4, int *a5)
{
  Name = uscript_getName(value);
  return uldn_scriptDisplayName(a1, (uint64_t)Name, a3, a4, a5);
}

uint64_t uldn_regionDisplayName(uint64_t a1, uint64_t a2, UChar *a3, uint64_t a4, int *a5)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (*a5 > 0) {
    return 0LL;
  }
  if (!a1
    || !a2
    || ((int v9 = a4, !a3) ? (v11 = (int)a4 <= 0) : (v11 = 1), v11 ? (v12 = 0) : (v12 = 1), (a4 & 0x80000000) != 0 || v12))
  {
    uint64_t v5 = 0LL;
    *a5 = 1;
  }

  else
  {
    memset(v16, 0, sizeof(v16));
    icu::UnicodeString::UnicodeString(v16, a3, 0LL, a4);
    (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(void *)a1 + 88LL))(a1, a2, v16);
    __int128 v15 = a3;
    uint64_t v5 = icu::UnicodeString::extract((uint64_t)v16, &v15, v9, a5);
    __int128 v14 = v15;
    icu::UnicodeString::~UnicodeString(&v14, (icu::UnicodeString *)v16);
  }

  return v5;
}

uint64_t uldn_variantDisplayName(uint64_t a1, uint64_t a2, UChar *a3, uint64_t a4, int *a5)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (*a5 > 0) {
    return 0LL;
  }
  if (!a1
    || !a2
    || ((int v9 = a4, !a3) ? (v11 = (int)a4 <= 0) : (v11 = 1), v11 ? (v12 = 0) : (v12 = 1), (a4 & 0x80000000) != 0 || v12))
  {
    uint64_t v5 = 0LL;
    *a5 = 1;
  }

  else
  {
    memset(v16, 0, sizeof(v16));
    icu::UnicodeString::UnicodeString(v16, a3, 0LL, a4);
    (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(void *)a1 + 96LL))(a1, a2, v16);
    __int128 v15 = a3;
    uint64_t v5 = icu::UnicodeString::extract((uint64_t)v16, &v15, v9, a5);
    __int128 v14 = v15;
    icu::UnicodeString::~UnicodeString(&v14, (icu::UnicodeString *)v16);
  }

  return v5;
}

uint64_t uldn_keyDisplayName(uint64_t a1, uint64_t a2, UChar *a3, uint64_t a4, int *a5)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (*a5 > 0) {
    return 0LL;
  }
  if (!a1
    || !a2
    || ((int v9 = a4, !a3) ? (v11 = (int)a4 <= 0) : (v11 = 1), v11 ? (v12 = 0) : (v12 = 1), (a4 & 0x80000000) != 0 || v12))
  {
    uint64_t v5 = 0LL;
    *a5 = 1;
  }

  else
  {
    memset(v16, 0, sizeof(v16));
    icu::UnicodeString::UnicodeString(v16, a3, 0LL, a4);
    (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(void *)a1 + 104LL))(a1, a2, v16);
    __int128 v15 = a3;
    uint64_t v5 = icu::UnicodeString::extract((uint64_t)v16, &v15, v9, a5);
    __int128 v14 = v15;
    icu::UnicodeString::~UnicodeString(&v14, (icu::UnicodeString *)v16);
  }

  return v5;
}

uint64_t uldn_keyValueDisplayName(uint64_t a1, uint64_t a2, uint64_t a3, UChar *a4, uint64_t a5, int *a6)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (*a6 > 0) {
    return 0LL;
  }
  if (a1
    && a2
    && a3
    && ((int v11 = a5, !a4) ? (v13 = (int)a5 <= 0) : (v13 = 1), v13 ? (v14 = 0) : (v14 = 1), (a5 & 0x80000000) == 0 && !v14))
  {
    memset(v18, 0, sizeof(v18));
    icu::UnicodeString::UnicodeString(v18, a4, 0LL, a5);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _OWORD *))(*(void *)a1 + 112LL))(a1, a2, a3, v18);
    uint64_t v17 = a4;
    uint64_t v6 = icu::UnicodeString::extract((uint64_t)v18, &v17, v11, a6);
    __int128 v16 = v17;
    icu::UnicodeString::~UnicodeString(&v16, (icu::UnicodeString *)v18);
  }

  else
  {
    uint64_t v6 = 0LL;
    *a6 = 1;
  }

  return v6;
}

void *sub_1807D8C2C(uint64_t a1, char *a2, icu::ResourceValue *a3, uint64_t a4, int *a5)
{
  uint64_t v15 = 0LL;
  __s1 = a2;
  memset(v14, 0, sizeof(v14));
  uint64_t result = (*(void *(**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(void *)a3 + 88LL))( v14,  a3,  a5);
  if (*a5 <= 0)
  {
    uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v14, 0, (const char **)&__s1, a3);
    if ((_DWORD)result)
    {
      unsigned int v9 = 1;
      while (1)
      {
        uint64_t v10 = __s1;
        if (!strcmp(__s1, "key")) {
          break;
        }
        if (!strcmp(v10, "keyValue"))
        {
          uint64_t v11 = 5LL;
          goto LABEL_17;
        }

        if (!strcmp(v10, "languages"))
        {
          uint64_t v11 = 0LL;
          goto LABEL_17;
        }

        if (!strcmp(v10, "script"))
        {
          uint64_t v11 = 1LL;
          goto LABEL_17;
        }

        if (!strcmp(v10, "territory"))
        {
          uint64_t v11 = 2LL;
          goto LABEL_17;
        }

        if (!strcmp(v10, "variant"))
        {
          uint64_t v11 = 3LL;
LABEL_17:
          int v13 = 0;
          uint64_t result = (void *)(*(uint64_t (**)(icu::ResourceValue *, int *, int *))(*(void *)a3 + 64LL))( a3,  &v13,  a5);
          if (*a5 > 0) {
            return result;
          }
          if (v13 >= 2)
          {
            uint64_t v12 = *(void *)(a1 + 16);
            if (*((_DWORD *)result + (*(_DWORD *)(v12 + 920) != 259)))
            {
              *(_BYTE *)(v12 + v11 + 1264) = 1;
              *(_BYTE *)(a1 + 8) = 1;
            }
          }
        }

        uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v14, v9++, (const char **)&__s1, a3);
        if (!(_DWORD)result) {
          return result;
        }
      }

      uint64_t v11 = 4LL;
      goto LABEL_17;
    }
  }

  return result;
}

uint64_t *sub_1807D8DF8(char *a1, int *a2)
{
  v12[8] = *(char **)MEMORY[0x1895F89C0];
  umtx_lock((icu::UMutex *)&unk_18C4489D8);
  DefaultLocaleID = a1;
  if (!a1) {
    DefaultLocaleID = (char *)uprv_getDefaultLocaleID();
  }
  memset(&v12[1], 0, 56);
  v11[1] = 0LL;
  v12[0] = (char *)&v12[1] + 5;
  LODWORD(v12[1]) = 40;
  v11[0] = 0LL;
  icu::CharStringByteSink::CharStringByteSink(v11, (uint64_t)v12);
  if (a1) {
    ulocimp_getName(DefaultLocaleID);
  }
  else {
    ulocimp_canonicalize(DefaultLocaleID);
  }
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v11);
  if (*a2 >= 1) {
    goto LABEL_7;
  }
  uint64_t v6 = qword_18C4489C8;
  if (!qword_18C4489C8)
  {
    unsigned int v9 = uhash_open((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, 0LL, a2);
    qword_18C4489C8 = (uint64_t)v9;
    if (*a2 >= 1) {
      goto LABEL_7;
    }
    uhash_setValueDeleter((uint64_t)v9, (uint64_t)sub_1807D8FE4);
    sub_180820C94(7u, (uint64_t)sub_1807D8FF8);
    uint64_t v6 = qword_18C4489C8;
  }

  uint64_t v5 = (uint64_t *)uhash_get(v6, (uint64_t)v12[0]);
  if (!v5)
  {
    uint64_t v10 = (uint64_t *)icu::UMemory::operator new((icu::UMemory *)0xE0, v7);
    if (v10)
    {
      uint64_t v5 = v10;
      *uint64_t v10 = (uint64_t)off_18970BE60;
      v10[5] = (uint64_t)(v10 + 6);
      v10[26] = 0LL;
      icu::Locale::setToBogus((icu::Locale *)v10);
      icu::Locale::init((icu::Locale *)v5, v12[0], 0);
      uhash_put(qword_18C4489C8, v5[5], (uint64_t)v5, a2);
      if (*a2 < 1) {
        goto LABEL_10;
      }
    }

    else
    {
      *a2 = 7;
    }

LABEL_7:
    uint64_t v5 = (uint64_t *)qword_18C4489C0;
    goto LABEL_11;
  }

  uint64_t v5 = *(_DWORD *)(result + 48);
  --*(_DWORD *)(result + 44);
  if (v5 >= SHIDWORD(a2)) {
    *(_DWORD *)(result + 48) = v5 - 1;
  }
  return result;
}

    else {
      strcpy(v12, v13);
    }
    goto LABEL_10;
  }

            uint64_t v15 = (_DWORD)v5 - (_DWORD)v3;
            if (v15 >= 1)
            {
              __int128 v16 = v15 + 1;
              uint64_t v17 = v3 + 1;
              while (1)
              {
                int32_t v3 = v17;
                uint64_t v18 = *(v17 - 1);
                if ((v18 - 32) >= 0x5F)
                {
                  *uint64_t v10 = v18;
                  *a2 = 12;
                  uint64_t v19 = 1;
                  goto LABEL_18;
                }

                if (v18 == 38) {
                  break;
                }
                *v4++ = v18;
                if (v6) {
                  *v6++ = v14++;
                }
                --v16;
                uint64_t v17 = v3 + 1;
                if (v16 <= 1) {
                  goto LABEL_16;
                }
              }

              uint64_t v11 = 0;
              LOWORD(icu::LocaleBuilder::setVariant((uint64_t)this, v7, v8) = 0;
              uint64_t v12 = v14 + 1;
              LOBYTE(v9) = -1;
              int v13 = v14 + 1;
              goto LABEL_22;
            }

  uint64_t v10 = *(const char **)(a2 + 24);
  if (strstr(v10, "18030"))
  {
    if (!strstr(v10, "gb18030") && !strstr(v10, "GB18030")) {
      goto LABEL_15;
    }
    uint64_t v11 = 0x8000;
  }

  else if (strstr(v10, "KEIS") || strstr(v10, "keis"))
  {
    uint64_t v11 = 4096;
  }

  else if (strstr(v10, "JEF") || strstr(v10, "jef"))
  {
    uint64_t v11 = 0x2000;
  }

  else
  {
    if (!strstr(v10, "JIPS") && !strstr(v10, "jips")) {
      goto LABEL_15;
    }
    uint64_t v11 = 0x4000;
  }

  *(_DWORD *)(a1 + 56) |= v11;
LABEL_15:
  if (v7 == 12) {
    *(_BYTE *)(a1 + 88) = 3;
  }
  uint64_t v12 = *(void *)(v6 + 288);
  if (v12)
  {
    int v13 = *(_BYTE *)(v12 + 68);
    if (v7 == 12) {
      ++v13;
    }
  }

  if ((a3 & 8) != 0) {
    return 256LL;
  }
  if (v5 == 1) {
    unint64_t v7 = HIWORD(a3);
  }
  else {
    unint64_t v7 = 1280;
  }
  if ((a3 & 3) != 0)
  {
    while (1)
    {
      uint64_t v8 = (a3 >> 28) & 0xFFFFF;
      a3 = *(void *)(*((void *)this + 76) + 8 * v8);
      if ((a3 & 3) == 0) {
        goto LABEL_14;
      }
    }

    HIDWORD(a3) = 0;
    goto LABEL_18;
  }

  switch(a2)
  {
    case -10:
    case -9:
    case -8:
    case -7:
    case -6:
      uint64_t v10 = icu::numparse::impl::AffixTokenMatcherWarehouse::currency( *(const icu::number::impl::CurrencySymbols ****)(a1 + 72),  a4);
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t, const icu::number::impl::CurrencySymbols ***))(*(void *)a1 + 24LL))( a1,  v10);
      goto LABEL_9;
    case -5:
      uint64_t v12 = icu::numparse::impl::AffixTokenMatcherWarehouse::permille(*(icu::numparse::impl::AffixTokenMatcherWarehouse **)(a1 + 72));
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24LL))(a1, v12);
      a2 = -5;
      goto LABEL_9;
    case -4:
      int v13 = icu::numparse::impl::AffixTokenMatcherWarehouse::percent(*(icu::numparse::impl::AffixTokenMatcherWarehouse **)(a1 + 72));
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24LL))(a1, v13);
      a2 = -4;
      goto LABEL_9;
    case -2:
      int v14 = icu::numparse::impl::AffixTokenMatcherWarehouse::plusSign(*(icu::numparse::impl::AffixTokenMatcherWarehouse **)(a1 + 72));
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24LL))(a1, v14);
      a2 = -2;
      goto LABEL_9;
    case -1:
      uint64_t v15 = icu::numparse::impl::AffixTokenMatcherWarehouse::minusSign(*(icu::numparse::impl::AffixTokenMatcherWarehouse **)(a1 + 72));
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24LL))(a1, v15);
      a2 = -1;
      goto LABEL_9;
    case 0:
      uint64_t result = *(uint64_t **)(a1 + 80);
      if (result)
      {
        __int128 v16 = (icu::UnicodeSet *)icu::numparse::impl::SymbolMatcher::getSet((icu::numparse::impl::SymbolMatcher *)result);
        uint64_t result = (uint64_t *)icu::UnicodeSet::contains(v16, a3);
        if ((_DWORD)result) {
          goto LABEL_20;
        }
      }

      uint64_t v17 = *(void *)(a1 + 72);
      uint64_t v18 = a3;
      if (*(int *)a4 <= 0)
      {
        uint64_t result = sub_180942518((const void **)(v17 + 1200), &v18);
        if (result)
        {
          uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 24LL))(a1, result);
LABEL_20:
          a2 = a3;
LABEL_9:
          *(_DWORD *)(a1 + 60) = a2;
        }

        else
        {
          *a4 = U_MEMORY_ALLOCATION_ERROR;
        }
      }

      return result;
    default:
      abort();
  }
  }

    uint64_t v6 = 0LL;
    *a5 = 1;
    return v6;
  }

  if ((a4 & 0x80000000) != 0) {
    goto LABEL_7;
  }
  uint64_t v18 = 0u;
  uint64_t v19 = 0u;
  __int128 v21 = 0LL;
  __int128 v20 = 0u;
  uint64_t v17 = off_18971B688;
  LOWORD(v18) = 2;
  icu::UnicodeString::setTo((icu::UnicodeString *)&v17, a3, 0, a4);
LABEL_9:
  sub_18096E398( a1,  (void (*)(void *, uint64_t, _OWORD *, int *, double))icu::RelativeDateTimeFormatter::formatNumericImpl,  0LL,  (uint64_t)&v17,  a5,  a2,  a6);
  int v13 = (UChar **)*a5;
  if ((int)v13 <= 0)
  {
    __int128 v16 = (UChar *)a3;
    uint64_t v6 = icu::UnicodeString::extract((uint64_t)&v17, &v16, a4, a5);
    uint64_t v15 = v16;
    int v13 = &v15;
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v17);
  return v6;
}

    uint64_t v6 = 0LL;
    *a5 = 1;
    return v6;
  }

  if ((a4 & 0x80000000) != 0) {
    goto LABEL_7;
  }
  uint64_t v18 = 0u;
  uint64_t v19 = 0u;
  __int128 v21 = 0LL;
  __int128 v20 = 0u;
  uint64_t v17 = off_18971B688;
  LOWORD(v18) = 2;
  icu::UnicodeString::setTo((icu::UnicodeString *)&v17, a3, 0, a4);
LABEL_9:
  sub_18096E398( a1,  (void (*)(void *, uint64_t, _OWORD *, int *, double))icu::RelativeDateTimeFormatter::formatRelativeImpl,  0LL,  (uint64_t)&v17,  a5,  a2,  a6);
  int v13 = (UChar **)*a5;
  if ((int)v13 <= 0)
  {
    __int128 v16 = (UChar *)a3;
    uint64_t v6 = icu::UnicodeString::extract((uint64_t)&v17, &v16, a4, a5);
    uint64_t v15 = v16;
    int v13 = &v15;
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v17);
  return v6;
}

  uint64_t v11 = (int *)v19 + (v8 - 1);
  while (1)
  {
    switch((int)v8)
    {
      case 1:
        uint64_t v12 = 0;
        int v13 = 0;
        int v14 = v20;
        break;
      case 2:
        uint64_t v12 = 0;
        int v13 = 0;
        int v14 = HIDWORD(v20) + 10 * v20;
        break;
      case 3:
        int v13 = 0;
        int v14 = v20;
        uint64_t v12 = v21 + 10 * HIDWORD(v20);
        break;
      case 4:
        int v13 = 0;
        int v14 = HIDWORD(v20) + 10 * v20;
        uint64_t v12 = HIDWORD(v21) + 10 * v21;
        break;
      case 5:
        int v14 = v20;
        uint64_t v12 = v21 + 10 * HIDWORD(v20);
        int v13 = v22 + 10 * HIDWORD(v21);
        break;
      case 6:
        int v14 = HIDWORD(v20) + 10 * v20;
        uint64_t v12 = HIDWORD(v21) + 10 * v21;
        int v13 = HIDWORD(v22) + 10 * v22;
        break;
      default:
        int v14 = 0;
        uint64_t v12 = 0;
        int v13 = 0;
        break;
    }

    if (v14 <= 23 && v12 <= 59 && v13 <= 59) {
      break;
    }
    --v11;
    uint64_t v15 = __OFSUB__((_DWORD)v8, 1);
    LODWORD(icu::LocaleBuilder::setVariant((uint64_t)this, v7, v8) = v8 - 1;
  }

  uint64_t result = (3600000 * v14 + 60000 * v12 + 1000 * v13);
  uint64_t v17 = *v11;
LABEL_24:
  *a4 = v17;
  return result;
}

  umtx_unlock((std::mutex **)&unk_18C535BF0);
  return 0LL;
}

    unint64_t v7 = 0LL;
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return v7;
  }

  if ((a3 & 0x80000000) != 0) {
    goto LABEL_7;
  }
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  uint64_t v26 = 0LL;
  __int128 v25 = 0u;
  __int128 v22 = off_18971B688;
  LOWORD(v23) = 2;
  icu::UnicodeString::setTo((icu::UnicodeString *)&v22, a2, 0, a3);
LABEL_9:
  __int128 v20 = off_189723AC8;
  __int128 v21 = 0xFFFFFFFFuLL;
  if (a4) {
    LODWORD(v21) = *(_DWORD *)a4;
  }
  memset(v19, 0, sizeof(v19));
  icu::DateInterval::DateInterval((uint64_t)v19, a6, a7);
  icu::DateIntervalFormat::format( a1,  (const icu::DateInterval *)v19,  (icu::UnicodeString *)&v22,  (icu::FieldPosition *)&v20,  a5);
  if (*(int *)a5 <= 0)
  {
    if (a4) {
      *(void *)(a4 + 4) = *(void *)((char *)&v21 + 4);
    }
    uint64_t v18 = (UChar *)a2;
    unint64_t v7 = icu::UnicodeString::extract((uint64_t)&v22, &v18, a3, (int *)a5);
  }

  else
  {
    unint64_t v7 = 0xFFFFFFFFLL;
  }

  icu::DateInterval::~DateInterval((icu::DateInterval *)v19);
  icu::FieldPosition::~FieldPosition(v15, (icu::FieldPosition *)&v20);
  icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v22);
  return v7;
}

      int v13 = *((unsigned int *)v5 + 4);
      if (v10 == (_DWORD)v13)
      {
        if (v10 == 8) {
          int v14 = 32;
        }
        else {
          int v14 = 2 * v10;
        }
        if (v14 < 1) {
          continue;
        }
        uint64_t result = (uint64_t *)uprv_malloc(8LL * v14);
        if (!result) {
          continue;
        }
        uint64_t v15 = result;
        if (v10 >= 1)
        {
          __int128 v16 = *((_DWORD *)v5 + 4);
          if (v16 >= v10) {
            __int128 v16 = v10;
          }
          if (v16 >= v14) {
            __int128 v16 = v14;
          }
          memcpy(result, (const void *)v5[1], 8LL * v16);
        }

        if (*((_BYTE *)v5 + 20)) {
          uprv_free((void *)v5[1]);
        }
        v5[1] = (uint64_t)v15;
        *((_DWORD *)v5 + 4) = v14;
        int v13 = 1LL;
        *((_BYTE *)v5 + 20) = 1;
      }

      uint64_t result = icu::UMemory::operator new((uint64_t *)v13, (icu::UMemory *)8, a2);
      if (result)
      {
        *(_DWORD *)uint64_t result = v8;
        *((_DWORD *)result + 1) = v9 * a3;
      }

      uint64_t v17 = *(int *)v5;
      *(_DWORD *)uint64_t v5 = v17 + 1;
      *(void *)(v5[1] + 8 * v17) = result;
    }
  }

  return result;
}

  uint64_t v10 = (uint64_t *)*(unsigned int *)a4;
  uint64_t v11 = icu::UMemory::operator new(v10, (icu::UMemory *)0x38, a2);
  if (!v11)
  {
    unsigned int v9 = 7;
    goto LABEL_12;
  }

  uint64_t v12 = (uint64_t)v11;
  sub_1809CFC2C(v11, a1, a2, a4);
  int v14 = (uint64_t *)*(unsigned int *)a4;
  if ((int)v14 >= 1)
  {
LABEL_10:
    uint64_t v15 = (void *)sub_1809CFD38(v12);
    icu::UMemory::operator delete(v15);
    return 0LL;
  }

  uint64_t v17 = icu::UMemory::operator new(v14, (icu::UMemory *)0x30, v13);
  if (!v17)
  {
    *a4 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_10;
  }

  uint64_t v18 = v17;
  sub_1809CE948((uint64_t)v17, v12, a4);
  if (*(int *)a4 >= 1)
  {
    (*(void (**)(uint64_t *))(*v18 + 8))(v18);
    return 0LL;
  }

  if (a3) {
    *a3 = sub_1809CFE50(v12);
  }
  return nullsub_17(v18);
}

uint64_t sub_1807D8FE4(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t sub_1807D8FF8()
{
  if (qword_18C4489D0)
  {
    uint64_t v0 = (void *)(qword_18C4489D0 - 16);
    uint64_t v1 = *(void *)(qword_18C4489D0 - 8);
    if (v1)
    {
      uint64_t v2 = qword_18C4489D0 - 224;
      uint64_t v3 = 224 * v1;
      do
      {
        icu::Locale::~Locale((icu::Locale *)(v2 + v3));
        v3 -= 224LL;
      }

      while (v3);
    }

    icu::UMemory::operator delete[](v0);
  }

  qword_18C4489D0 = 0LL;
  atomic_store(0, &dword_18C448A28);
  if (qword_18C4489C8)
  {
    uhash_close((_BYTE *)qword_18C4489C8);
    qword_18C4489C8 = 0LL;
  }

  qword_18C4489C0 = 0LL;
  return 1LL;
}

icu::Locale *icu::Locale::Locale(icu::Locale *a1)
{
  *(void *)a1 = off_18970BE60;
  *((void *)a1 + 5) = (char *)a1 + 48;
  *((void *)a1 + 26) = 0LL;
  icu::Locale::setToBogus(a1);
  return a1;
}

{
  *(void *)a1 = off_18970BE60;
  *((void *)a1 + 5) = (char *)a1 + 48;
  *((void *)a1 + 26) = 0LL;
  icu::Locale::setToBogus(a1);
  return a1;
}

icu::Locale *icu::Locale::init(icu::Locale *this, char *a2, int a3)
{
  uint64_t v51 = *MEMORY[0x1895F89C0];
  *((_BYTE *)this + 216) = 0;
  uint64_t v6 = (char *)*((void *)this + 26);
  unint64_t v7 = (char *)*((void *)this + 5);
  uint64_t v8 = (char *)this + 48;
  if (v6 != v7 && v6 != v8)
  {
    uprv_free(v6);
    unint64_t v7 = (char *)*((void *)this + 5);
  }

  *((void *)this + 26) = 0LL;
  if (v7 != v8)
  {
    uprv_free(v7);
    *((void *)this + 5) = v8;
  }

  uint64_t v50 = 0LL;
  memset(v49, 0, sizeof(v49));
  size_t __n = 0LL;
  size_t v47 = 0LL;
  int v48 = 0;
  if (!a2)
  {
    uint64_t Default = icu::Locale::getDefault((icu::Locale *)v7);
    icu::Locale::operator=(this, Default);
    return this;
  }

  *((_BYTE *)this + 26) = 0;
  *((_BYTE *)this + 20) = 0;
  *((_BYTE *)this + 8) = 0;
  uint64_t v10 = (char *)this + 8;
  UErrorCode v44 = U_ZERO_ERROR;
  uint64_t v11 = (char *)this + 48;
  if (a3) {
    int Name = uloc_canonicalize(a2, v11, 157, (int *)&v44);
  }
  else {
    int Name = uloc_getName(a2, v11, 157, (int *)&v44);
  }
  int v14 = Name;
  if (v44 == U_BUFFER_OVERFLOW_ERROR || Name >= 157)
  {
    int v15 = Name + 1;
    __int128 v16 = (char *)uprv_malloc(Name + 1);
    *((void *)this + 5) = v16;
    if (!v16)
    {
      *((void *)this + 5) = v8;
      goto LABEL_63;
    }

    UErrorCode v44 = U_ZERO_ERROR;
    if (a3) {
      int v17 = uloc_canonicalize(a2, v16, v15, (int *)&v44);
    }
    else {
      int v17 = uloc_getName(a2, v16, v15, (int *)&v44);
    }
    int v14 = v17;
  }

  if (v44 > U_ZERO_ERROR || v44 == U_STRING_NOT_TERMINATED_WARNING) {
    goto LABEL_63;
  }
  *((_DWORD *)this + 8) = v14;
  uint64_t v18 = (const char *)*((void *)this + 5);
  *(void *)&v49[0] = v18;
  uint64_t v19 = strchr(v18, 64);
  __int128 v20 = strchr(v18, 95);
  if (v20 && (!v19 || v20 < v19))
  {
    int v43 = a3;
    uint64_t v23 = 0LL;
    while (1)
    {
      __int128 v24 = (void *)v49 + v23;
      uint64_t v21 = v23 + 1;
      __int128 v22 = v20 + 1;
      v24[1] = v20 + 1;
      *((_DWORD *)&__n + v23) = (_DWORD)v20 - *v24;
      __int128 v20 = strchr(v20 + 1, 95);
      if (!v20) {
        break;
      }
      ++v23;
      if (v19)
      {
        if (v20 >= v19) {
          break;
        }
      }
    }

    a3 = v43;
    uint64_t v10 = (char *)this + 8;
  }

  else
  {
    uint64_t v21 = 0LL;
    __int128 v22 = v18;
  }

  __int128 v25 = strchr(v22, 64);
  uint64_t v26 = strchr(v22, 46);
  BOOL v27 = v25 <= v26 || v26 == 0LL;
  BOOL v28 = !v27 || v25 == 0LL;
  int v29 = v28 ? (int)v26 : (int)v25;
  int v30 = v29 - (_DWORD)v22;
  int v31 = (unint64_t)v25 | (unint64_t)v26 ? v30 : v14 + (_DWORD)v18 - (_DWORD)v22;
  *((_DWORD *)&__n + v21) = v31;
  uint64_t v32 = __n;
  if ((int)__n >= 1)
  {
    memcpy(v10, v18, __n);
    *((_BYTE *)this + v32 + 8) = 0;
  }

  unsigned int v33 = HIDWORD(__n);
  if (HIDWORD(__n) == 4)
  {
    uint64_t v34 = *((void *)&v49[0] + 1);
    if (!uprv_isASCIILetter(**((_BYTE **)&v49[0] + 1))
      || !uprv_isASCIILetter(*(_BYTE *)(v34 + 1))
      || !uprv_isASCIILetter(*(_BYTE *)(v34 + 2))
      || !uprv_isASCIILetter(*(_BYTE *)(v34 + 3)))
    {
      unsigned int v35 = 1;
      goto LABEL_60;
    }

    *((_DWORD *)this + 5) = *(_DWORD *)v34;
    *((_BYTE *)this + 24) = 0;
    unsigned int v35 = 2;
    unsigned int v33 = v47;
  }

  else
  {
    unsigned int v35 = 1;
  }

  if (v33 - 2 >= 2)
  {
    if (v33) {
      goto LABEL_60;
    }
  }

  else
  {
    memcpy((char *)this + 26, *((const void **)v49 + v35), v33);
    *((_BYTE *)this + v33 + 26) = 0;
  }

  ++v35;
LABEL_60:
  UErrorCode v44 = U_ZERO_ERROR;
  icu::Locale::initBaseName((const char **)this, &v44);
  if (v44 > U_ZERO_ERROR) {
    goto LABEL_63;
  }
  if (a3)
  {
    unsigned int v37 = (const char *)*((void *)this + 5);
    if (strcmp(v37, "c"))
    {
      if (strcmp(v37, "en") && strcmp(v37, "en_US"))
      {
        unsigned int v38 = atomic_load(&dword_18C534DB8);
        if (v38 == 2 || !icu::umtx_initImplPreInit(&dword_18C534DB8))
        {
          if (dword_18C534DBC >= 1)
          {
            UErrorCode v44 = dword_18C534DBC;
            goto LABEL_83;
          }
        }

        else
        {
          sub_180820C94(9u, (uint64_t)sub_1807DDD14);
          unsigned int v39 = uhash_open((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, 0LL, (int *)&v44);
          UErrorCode v40 = v44;
          if (v44 > U_ZERO_ERROR) {
            goto LABEL_76;
          }
          unint64_t v41 = 0LL;
          do
          {
            uhash_puti((uint64_t)v39, (uint64_t)off_18970BE78[v41], 1u, (int *)&v44);
            UErrorCode v40 = v44;
            if (v41 > 0xB0) {
              break;
            }
            ++v41;
          }

          while (v44 < U_ILLEGAL_ARGUMENT_ERROR);
          if (v44 < U_ILLEGAL_ARGUMENT_ERROR)
          {
            qword_18C534DB0 = (uint64_t)v39;
          }

          else
          {
LABEL_76:
            if (v39)
            {
              uhash_close(v39);
              UErrorCode v40 = v44;
            }
          }

          dword_18C534DBC = v40;
          icu::umtx_initImplPostInit(&dword_18C534DB8);
        }

LABEL_83:
        memset(&v45[1], 0, 56);
        v45[0] = (char *)&v45[1] + 5;
        LODWORD(v45[1]) = 40;
        UErrorCode v42 = v44;
        if (BYTE4(v45[1])) {
          uprv_free(v45[0]);
        }
        if (v42 < U_ILLEGAL_ARGUMENT_ERROR) {
          return this;
        }
LABEL_63:
        icu::Locale::setToBogus(this);
      }
    }
  }

  return this;
}

      int v82 = L"forward";
      icu::UnicodeString::UnicodeString(v85, 1LL, &v82);
      int v57 = sub_1807FF934((uint64_t)v88, (uint64_t)v85);
      icu::UnicodeString::~UnicodeString(v58, (icu::UnicodeString *)v85);
      if (v57)
      {
        unsigned int v56 = *(_BYTE **)(a1 + 8);
        uint64_t v59 = v56 + 112;
LABEL_96:
        *((void *)v56 + 18) = v59;
        goto LABEL_97;
      }

      BOOL v81 = L"reverse";
      icu::UnicodeString::UnicodeString(v85, 1LL, &v81);
      unsigned int v60 = sub_1807FF934((uint64_t)v88, (uint64_t)v85);
      icu::UnicodeString::~UnicodeString(v61, (icu::UnicodeString *)v85);
      if (v60)
      {
        unsigned int v56 = *(_BYTE **)(a1 + 8);
        uint64_t v59 = v56 + 120;
        goto LABEL_96;
      }

      uint64_t v80 = L"safe_forward";
      icu::UnicodeString::UnicodeString(v85, 1LL, &v80);
      int v62 = sub_1807FF934((uint64_t)v88, (uint64_t)v85);
      icu::UnicodeString::~UnicodeString(v63, (icu::UnicodeString *)v85);
      if (v62)
      {
        unsigned int v56 = *(_BYTE **)(a1 + 8);
        uint64_t v59 = v56 + 128;
        goto LABEL_96;
      }

      int v79 = "s";
      icu::UnicodeString::UnicodeString(v85, 1LL, &v79);
      unsigned int v66 = sub_1807FF934((uint64_t)v88, (uint64_t)v85);
      icu::UnicodeString::~UnicodeString(v67, (icu::UnicodeString *)v85);
      if (v66)
      {
        unsigned int v56 = *(_BYTE **)(a1 + 8);
        uint64_t v59 = v56 + 136;
        goto LABEL_96;
      }

      int v78 = L"lookAheadHardBreak";
      icu::UnicodeString::UnicodeString(v85, 1LL, &v78);
      unsigned int v68 = sub_1807FF934((uint64_t)v88, (uint64_t)v85);
      icu::UnicodeString::~UnicodeString(v69, (icu::UnicodeString *)v85);
      if (v68)
      {
        unsigned int v56 = *(_BYTE **)(a1 + 8);
        v56[153] = 1;
      }

      else
      {
        int v77 = "q";
        icu::UnicodeString::UnicodeString(v85, 1LL, &v77);
        int v70 = sub_1807FF934((uint64_t)v88, (uint64_t)v85);
        icu::UnicodeString::~UnicodeString(v71, (icu::UnicodeString *)v85);
        if (v70)
        {
          icu::UnicodeSet::clear((icu::UnicodeSet *)(a1 + 1752));
        }

        else
        {
          unsigned int v76 = L"unquoted_literals";
          icu::UnicodeString::UnicodeString(v85, 1LL, &v76);
          unsigned int v72 = sub_1807FF934((uint64_t)v88, (uint64_t)v85);
          icu::UnicodeString::~UnicodeString(v73, (icu::UnicodeString *)v85);
          if (v72)
          {
            icu::UnicodeString::UnicodeString((uint64_t)v85, (uint64_t)L"[^[\\p{Z}\\u0020-\\u007f]-[\\p{L}]-[\\p{N}]]");
            icu::UnicodeSet::applyPattern( (icu::UnicodeSet *)(a1 + 1752),  (const icu::UnicodeString *)v85,  *(UErrorCode **)(*(void *)(a1 + 8) + 16LL));
            icu::UnicodeString::~UnicodeString(v74, (icu::UnicodeString *)v85);
          }

          else
          {
            unsigned int v56 = *(_BYTE **)(a1 + 8);
            uint64_t v75 = (int *)*((void *)v56 + 2);
            if (*v75 <= 0)
            {
              *uint64_t v75 = 66060;
              unsigned int v56 = (_BYTE *)*((void *)v56 + 3);
              if (v56)
              {
                *(void *)unsigned int v56 = *(void *)(a1 + 28);
                *((_WORD *)v56 + 4) = 0;
                *((_WORD *)v56 + 20) = 0;
              }
            }
          }
        }
      }

      BOOL v81 = L"LBCMNoChain";
      icu::UnicodeString::UnicodeString(v84, 1LL, &v81);
      int v57 = sub_1807FF934((uint64_t)v87, (uint64_t)v84);
      icu::UnicodeString::~UnicodeString(v58, (icu::UnicodeString *)v84);
      if (v57)
      {
        unsigned int v56 = *(_BYTE **)(a1 + 8);
        v56[89] = 1;
        goto LABEL_101;
      }

      uint64_t v80 = L"RINoChain";
      icu::UnicodeString::UnicodeString(v84, 1LL, &v80);
      uint64_t v59 = sub_1807FF934((uint64_t)v87, (uint64_t)v84);
      icu::UnicodeString::~UnicodeString(v60, (icu::UnicodeString *)v84);
      if (v59)
      {
        unsigned int v56 = *(_BYTE **)(a1 + 8);
        v56[91] = 1;
        goto LABEL_101;
      }

      int v79 = L"forward";
      icu::UnicodeString::UnicodeString(v84, 1LL, &v79);
      int v61 = sub_1807FF934((uint64_t)v87, (uint64_t)v84);
      icu::UnicodeString::~UnicodeString(v62, (icu::UnicodeString *)v84);
      if (v61)
      {
        unsigned int v56 = *(_BYTE **)(a1 + 8);
        int32_t v63 = v56 + 48;
LABEL_100:
        *((void *)v56 + 10) = v63;
        goto LABEL_101;
      }

      int v78 = L"reverse";
      icu::UnicodeString::UnicodeString(v84, 1LL, &v78);
      unsigned int v66 = sub_1807FF934((uint64_t)v87, (uint64_t)v84);
      icu::UnicodeString::~UnicodeString(v67, (icu::UnicodeString *)v84);
      if (v66)
      {
        unsigned int v56 = *(_BYTE **)(a1 + 8);
        int32_t v63 = v56 + 56;
        goto LABEL_100;
      }

      int v77 = L"safe_forward";
      icu::UnicodeString::UnicodeString(v84, 1LL, &v77);
      unsigned int v68 = sub_1807FF934((uint64_t)v87, (uint64_t)v84);
      icu::UnicodeString::~UnicodeString(v69, (icu::UnicodeString *)v84);
      if (v68)
      {
        unsigned int v56 = *(_BYTE **)(a1 + 8);
        int32_t v63 = v56 + 64;
        goto LABEL_100;
      }

      unsigned int v76 = "s";
      icu::UnicodeString::UnicodeString(v84, 1LL, &v76);
      int v70 = sub_1807FF934((uint64_t)v87, (uint64_t)v84);
      icu::UnicodeString::~UnicodeString(v71, (icu::UnicodeString *)v84);
      if (v70)
      {
        unsigned int v56 = *(_BYTE **)(a1 + 8);
        int32_t v63 = v56 + 72;
        goto LABEL_100;
      }

      uint64_t v75 = L"lookAheadHardBreak";
      icu::UnicodeString::UnicodeString(v84, 1LL, &v75);
      unsigned int v72 = sub_1807FF934((uint64_t)v87, (uint64_t)v84);
      icu::UnicodeString::~UnicodeString(v73, (icu::UnicodeString *)v84);
      unsigned int v56 = *(_BYTE **)(a1 + 8);
      if (v72)
      {
        v56[90] = 1;
      }

      else
      {
        unsigned int v74 = (int *)*((void *)v56 + 2);
        if (*v74 <= 0)
        {
          *unsigned int v74 = 66060;
          unsigned int v56 = (_BYTE *)*((void *)v56 + 3);
          if (v56)
          {
            *(void *)unsigned int v56 = *(void *)(a1 + 28);
            *((_WORD *)v56 + 4) = 0;
            *((_WORD *)v56 + 20) = 0;
          }
        }
      }

        unsigned int v39 = 1;
LABEL_97:
        *a4 = v39;
        BOOL v27 = v104;
        goto LABEL_98;
      }

      uint64_t v19 = 0LL;
    }

    a3 = v94;
LABEL_50:
    ++v20;
    if (!v21) {
      goto LABEL_51;
    }
  }

  a3 = v94;
  if (v94) {
    goto LABEL_83;
  }
  if (!sub_180851260(v19, -1, 1)) {
    goto LABEL_49;
  }
LABEL_51:
  BOOL v27 = v104;
  if (*a4 <= 0 && v104)
  {
    sub_180853A44((uint64_t)v104);
    BOOL v28 = v27;
    do
    {
      (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)a2 + 16LL))(a2, "-", 1LL);
      int v29 = strlen(*v28);
      (*(void (**)(uint64_t, const char *, size_t))(*(void *)a2 + 16LL))(a2, *v28, v29);
      BOOL v28 = (const char **)v28[1];
    }

    while (v28);
  }

    unsigned int v35 = v25 + 1;
    unsigned int v39 = v25;
    unsigned int v37 = v32;
    int v36 = v25;
    unsigned int v38 = v25 + 1;
    goto LABEL_84;
  }

  LODWORD(v30) = v30 - 1;
LABEL_117:
  unsigned int v68 = (int)v30 - (uint64_t)v7;
  *(_BYTE *)(v29 + v25) = v68;
  *(_BYTE *)(v77 + v68) = v25;
  icu::UCharsTrieBuilder *v71 = v7;
  v71[1] = v30;
  v71[2] = 0;
  v71[3] = v25;
  if (v76)
  {
    int v69 = v71[4];
  }

  else
  {
    v71[4] = v25;
    int v69 = v25;
  }

  v71[5] = v7;
  *(void *)(a1 + 48) = v28;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = v25;
  *(void *)(a1 + 32) = v70;
  *(void *)(a1 + 16) = (int)v30;
  *(_DWORD *)(a1 + 28) = v69;
  if (v74 < 0 && (int)v30 > *(_DWORD *)(a1 + 124))
  {
    *(_DWORD *)(a1 + 124) = v30;
    if (!v32)
    {
      *(_DWORD *)(a1 + 120) = v30;
      *(_DWORD *)(a1 + 8) &= ~2u;
    }
  }

  return 1LL;
}

        a2 = 0;
        goto LABEL_33;
      }
    }

    uint64_t v12 = *(void *)(this + 8);
    unsigned int v33 = 0u;
    uint64_t v34 = 0u;
    unsigned int v35 = 0u;
    int v36 = 0LL;
    uint64_t v32 = off_18971B688;
    LOWORD(v33) = 2;
    (*(void (**)(uint64_t, const icu::UnicodeString *, void (***)(icu::UnicodeString *__hidden), UErrorCode *))(*(void *)v12 + 24LL))( v12,  a3,  &v32,  a5);
    int v13 = (uint64_t *)*(unsigned int *)a5;
    if ((int)v13 <= 0)
    {
      CEs = icu::CollationDataBuilder::getCEs( *(icu::CollationDataBuilder **)(v8 + 72),  (const icu::UnicodeString *)&v32,  (uint64_t *)(v8 + 296),  0LL,  v13);
      *(_DWORD *)(v8 + 544) = CEs;
      if (CEs < 32)
      {
        this = (uint64_t)icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v32);
        if (a2 == 15) {
          return this;
        }
        goto LABEL_20;
      }

      *a5 = U_ILLEGAL_ARGUMENT_ERROR;
      int v14 = "reset position maps to too many collation elements (more than 31)";
    }

    else
    {
      int v14 = "normalizing the reset position";
    }

    *a4 = v14;
    return (uint64_t)icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v32);
  }

  return this;
}

uint64_t *sub_1807D9604(char *a1)
{
  int v2 = 0;
  return sub_1807D8DF8(a1, &v2);
}

uint64_t uloc_getDefault_0(icu::Locale *a1)
{
  return icu::Locale::getDefault(a1)[5];
}

uint64_t *icu::Locale::getDefault(icu::Locale *this)
{
  uint64_t v1 = qword_18C4489C0;
  umtx_unlock((std::mutex **)&unk_18C4489D8);
  if (!v1)
  {
    int v3 = 0;
    return sub_1807D8DF8(0LL, &v3);
  }

  return (uint64_t *)v1;
}

void *icu::Locale::getStaticClassID(icu::Locale *this)
{
  return &unk_18C534D98;
}

void *icu::Locale::getDynamicClassID(icu::Locale *this)
{
  return &unk_18C534D98;
}

void icu::Locale::~Locale(icu::Locale *this)
{
  *(void *)this = off_18970BE60;
  int v2 = (char *)*((void *)this + 26);
  int v3 = (char *)*((void *)this + 5);
  int32_t v4 = (char *)this + 48;
  if (v2 != v3 && v2 != v4)
  {
    uprv_free(v2);
    int v3 = (char *)*((void *)this + 5);
  }

  *((void *)this + 26) = 0LL;
  if (v3 != v4)
  {
    uprv_free(v3);
    *((void *)this + 5) = 0LL;
  }

  icu::UObject::~UObject(this);
}

{
  void *v1;
  icu::Locale::~Locale(this);
  icu::UMemory::operator delete(v1);
}

icu::Locale *icu::Locale::Locale(icu::Locale *this)
{
  *(void *)this = off_18970BE60;
  *((void *)this + 5) = (char *)this + 48;
  *((void *)this + 26) = 0LL;
  return icu::Locale::init(this, 0LL, 0);
}

uint64_t icu::Locale::Locale(icu::Locale *this)
{
  *(void *)this = off_18970BE60;
  *((void *)this + 5) = (char *)this + 48;
  *((void *)this + 26) = 0LL;
  return icu::Locale::init(this, 0LL, 0);
}

void icu::Locale::setToBogus(icu::Locale *this)
{
  int v2 = (char *)*((void *)this + 26);
  int v3 = (char *)*((void *)this + 5);
  int32_t v4 = (char *)this + 48;
  if (v2 != v3 && v2 != v4)
  {
    uprv_free(v2);
    int v3 = (char *)*((void *)this + 5);
  }

  *((void *)this + 26) = 0LL;
  if (v3 != v4)
  {
    uprv_free(v3);
    *((void *)this + 5) = v4;
  }

  *((_BYTE *)this + 48) = 0;
  *((_BYTE *)this + 8) = 0;
  *((_BYTE *)this + 20) = 0;
  *((_BYTE *)this + 26) = 0;
  *((_BYTE *)this + 216) = 1;
  *((_DWORD *)this + 8) = 0;
}

icu::Locale *icu::Locale::Locale( icu::Locale *this, const char *__s, const char *a3, const char *a4, const char *a5)
{
  uint64_t v6 = a4;
  char v27[8] = *(char **)MEMORY[0x1895F89C0];
  *(void *)this = off_18970BE60;
  *((void *)this + 5) = (char *)this + 48;
  *((void *)this + 26) = 0LL;
  if (!__s && !a3 && !a4)
  {
    icu::Locale::init(this, 0LL, 0);
    return this;
  }

  UErrorCode v26 = U_ZERO_ERROR;
  if (__s)
  {
    unsigned int v10 = strlen(__s);
    if (v10 > 0x15555555)
    {
      icu::Locale::setToBogus(this);
      return this;
    }
  }

  else
  {
    unsigned int v10 = 0;
  }

  memset(&v27[1], 0, 56);
  v27[0] = (char *)&v27[1] + 5;
  LODWORD(v27[1]) = 40;
  icu::CharString::append((icu::CharString *)v27, __s, v10, &v26);
  if (a3)
  {
    unsigned int v11 = strlen(a3);
    if (v11 > 0x15555555)
    {
LABEL_41:
      icu::Locale::setToBogus(this);
      goto LABEL_42;
    }

    if (!v6) {
      goto LABEL_23;
    }
  }

  else
  {
    unsigned int v11 = 0;
    if (!v6)
    {
LABEL_23:
      uint64_t v12 = 0LL;
      int v15 = 0;
      goto LABEL_24;
    }
  }

  do
  {
    uint64_t v12 = v6;
    int v13 = *(unsigned __int8 *)v6++;
  }

  while (v13 == 95);
  int v14 = strlen(v12);
  if (v14 >= 1) {
    int v15 = 1;
  }
  else {
    int v15 = v14;
  }
  uint64_t v16 = v14 - 2LL;
  while (v14 >= 2)
  {
    int v17 = v6[v16--];
    --v14;
    if (v17 != 95)
    {
      int v15 = v14 + 1;
      break;
    }
  }

icu::Locale *icu::Locale::Locale(icu::Locale *this, uint64_t a2)
{
  *(void *)this = off_18970BE60;
  *((void *)this + 5) = (char *)this + 48;
  *((void *)this + 26) = 0LL;
  return icu::Locale::operator=(this, a2);
}

{
  *(void *)this = off_18970BE60;
  *((void *)this + 5) = (char *)this + 48;
  *((void *)this + 26) = 0LL;
  return icu::Locale::operator=(this, a2);
}

icu::Locale *icu::Locale::operator=(icu::Locale *this, uint64_t a2)
{
  if (this != (icu::Locale *)a2)
  {
    icu::Locale::setToBogus(this);
    int32_t v4 = *(const char **)(a2 + 40);
    if (v4 == (const char *)(a2 + 48))
    {
      strcpy((char *)this + 48, v4);
    }

    else if (v4)
    {
      uint64_t v5 = uprv_strdup(*(const char **)(a2 + 40));
      *((void *)this + 5) = v5;
      if (!v5) {
        return this;
      }
    }

    else
    {
      *((void *)this + 5) = 0LL;
    }

    uint64_t v6 = *(const char **)(a2 + 208);
    if (v6 == *(const char **)(a2 + 40))
    {
      *((void *)this + 26) = *((void *)this + 5);
    }

    else if (v6)
    {
      unint64_t v7 = uprv_strdup(v6);
      *((void *)this + 26) = v7;
      if (!v7) {
        return this;
      }
    }

    strcpy((char *)this + 8, (const char *)(a2 + 8));
    strcpy((char *)this + 20, (const char *)(a2 + 20));
    strcpy((char *)this + 26, (const char *)(a2 + 26));
    *((_DWORD *)this + 8) = *(_DWORD *)(a2 + 32);
    *((_BYTE *)this + 216) = *(_BYTE *)(a2 + 216);
  }

  return this;
}

uint64_t icu::Locale::Locale(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_18970BE60;
  *(void *)(a1 + 40) = a1 + 48;
  *(void *)(a1 + 208) = a1 + 48;
  return icu::Locale::operator=(a1, a2);
}

{
  *(void *)a1 = off_18970BE60;
  *(void *)(a1 + 40) = a1 + 48;
  *(void *)(a1 + 208) = a1 + 48;
  return icu::Locale::operator=(a1, a2);
}

uint64_t icu::Locale::operator=(uint64_t a1, uint64_t a2)
{
  int32_t v4 = *(void **)(a1 + 208);
  uint64_t v5 = *(void **)(a1 + 40);
  uint64_t v6 = (void *)(a1 + 48);
  if (v4 != v5 && v4 != v6)
  {
    uprv_free(v4);
    uint64_t v5 = *(void **)(a1 + 40);
  }

  if (v5 != v6) {
    uprv_free(v5);
  }
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = a2 + 48;
  uint64_t v10 = *(void *)(a2 + 208);
  if (v8 == a2 + 48 || v10 == v9)
  {
    strcpy((char *)(a1 + 48), (const char *)(a2 + 48));
    uint64_t v8 = *(void *)(a2 + 40);
    uint64_t v10 = *(void *)(a2 + 208);
  }

  if (v8 == v9) {
    uint64_t v8 = a1 + 48;
  }
  *(void *)(a1 + 40) = v8;
  if (v10 != *(void *)(a2 + 40)) {
    uint64_t v8 = v10;
  }
  if (v10 == v9) {
    uint64_t v12 = a1 + 48;
  }
  else {
    uint64_t v12 = v8;
  }
  *(void *)(a1 + 208) = v12;
  strcpy((char *)(a1 + 8), (const char *)(a2 + 8));
  strcpy((char *)(a1 + 20), (const char *)(a2 + 20));
  strcpy((char *)(a1 + 26), (const char *)(a2 + 26));
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(void *)(a2 + 40) = v9;
  *(void *)(a2 + 208) = v9;
  return a1;
}

icu::Locale *icu::Locale::clone(icu::Locale *this, unint64_t a2)
{
  uint64_t result = (icu::Locale *)icu::UMemory::operator new((icu::UMemory *)0xE0, a2);
  if (result)
  {
    *(void *)uint64_t result = off_18970BE60;
    *((void *)result + 5) = (char *)result + 48;
    *((void *)result + 26) = 0LL;
    return icu::Locale::operator=(result, (uint64_t)this);
  }

  return result;
}

BOOL icu::Locale::operator==(uint64_t a1, uint64_t a2)
{
  return strcmp(*(const char **)(a2 + 40), *(const char **)(a1 + 40)) == 0;
}

char **ulocimp_getKnownCanonicalizedLocaleForTest(_DWORD *a1)
{
  *a1 = 178;
  return off_18970BE78;
}

uint64_t ulocimp_isCanonicalizedLocaleForTest(char *__s)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  memset(v6, 0, sizeof(v6));
  icu::Locale::Locale((icu::Locale *)v6, __s, 0LL, 0LL, 0LL);
  int v4 = 0;
  memset(&v5[1], 0, 56);
  v5[0] = (char *)&v5[1] + 5;
  LODWORD(v5[1]) = 40;
  int v1 = sub_1807D9E8C((uint64_t)v6, (icu::CharString *)v5, &v4);
  int v2 = v4;
  if (BYTE4(v5[1])) {
    uprv_free(v5[0]);
  }
  icu::Locale::~Locale((icu::Locale *)v6);
  return (v2 < 1) & ~v1;
}

uint64_t sub_1807D9E8C(uint64_t a1, icu::CharString *a2, int *a3)
{
  uint64_t v169 = *MEMORY[0x1895F89C0];
  __int128 v140 = 0u;
  *(_OWORD *)int v138 = 0u;
  memset(v139, 0, sizeof(v139));
  LODWORD(v168[0]) = *a3;
  *(_OWORD *)__s = 0u;
  icu::UVector::UVector((uint64_t)v139, 0LL, (uint64_t)sub_1807DCCD4, (int *)v168);
  *((void *)&v140 + 1) = 0LL;
  if (*a3 >= 1)
  {
    uint64_t v6 = 0LL;
    *((void *)&v140 + 1) = 0LL;
    goto LABEL_182;
  }

  unsigned int v7 = atomic_load(&dword_18C534DA8);
  if (v7 == 2 || !icu::umtx_initImplPreInit(&dword_18C534DA8))
  {
    if (dword_18C534DAC >= 1)
    {
      uint64_t v6 = 0LL;
      *a3 = dword_18C534DAC;
      *((void *)&v140 + 1) = qword_18C534DA0;
      goto LABEL_182;
    }
  }

  else
  {
    sub_180820C94(8u, (uint64_t)sub_1807DD7C0);
    uint64_t v8 = ures_openDirect(0LL, (uint64_t)"metadata", (uint64_t)a3);
    uint64_t v9 = ures_getByKey(v8, "alias", 0LL, a3);
    uint64_t v10 = ures_getByKey(v9, "language", 0LL, a3);
    uint64_t v11 = ures_getByKey(v9, "script", 0LL, a3);
    uint64_t v133 = ures_getByKey(v9, "territory", 0LL, a3);
    BOOL v131 = (char *)ures_getByKey(v9, "variant", 0LL, a3);
    uint64_t v12 = ures_getByKey(v9, "subdivision", 0LL, a3);
    uint64_t v13 = 0LL;
    if (*a3 <= 0)
    {
      uint64_t v156 = 0LL;
      *(void *)v157 = 0LL;
      unsigned int v155 = 0;
      memset(v168, 0, 184);
      uint64_t v14 = v12;
      sub_1807DD844((int32x2_t *)v168, a3);
      __int128 v163 = 0LL;
      v161[0] = 0LL;
      sub_1807DD8EC( v10,  (uint64_t)v168,  (void **)&v163,  v161,  (int *)&v157[1],  (void (*)(uint64_t))nullsub_3,  (void (*)(UChar *))nullsub_4,  a3);
      v158[0] = 0LL;
      *(void *)&v141[0] = 0LL;
      sub_1807DD8EC( v11,  (uint64_t)v168,  (void **)v158,  (void **)v141,  (int *)v157,  (void (*)(uint64_t))nullsub_5,  (void (*)(UChar *))nullsub_6,  a3);
      uint64_t v153 = 0LL;
      int v151 = 0LL;
      sub_1807DD8EC( v133,  (uint64_t)v168,  (void **)&v153,  (void **)&v151,  (int *)&v156 + 1,  (void (*)(uint64_t))nullsub_7,  (void (*)(UChar *))nullsub_8,  a3);
      int v149 = 0LL;
      int v147 = 0LL;
      sub_1807DD8EC( (uint64_t)v131,  (uint64_t)v168,  (void **)&v149,  (void **)&v147,  (int *)&v156,  (void (*)(uint64_t))nullsub_9,  (void (*)(UChar *))nullsub_10,  a3);
      int v145 = 0LL;
      int v143 = 0LL;
      uint64_t v130 = v14;
      sub_1807DD8EC( v14,  (uint64_t)v168,  (void **)&v145,  (void **)&v143,  (int *)&v155,  (void (*)(uint64_t))nullsub_11,  (void (*)(UChar *))nullsub_12,  a3);
      uint64_t v13 = 0LL;
      if (*a3 <= 0)
      {
        uint64_t v122 = v10;
        uint64_t v123 = v8;
        LOBYTE(v168[11]) = 1;
        __int128 v134 = uhash_openSize( (uint64_t)uhash_hashChars,  (uint64_t)uhash_compareChars,  (uint64_t)uhash_compareChars,  490,  a3);
        if (*a3 <= 0)
        {
          unint64_t v15 = v157[1];
          if (v157[1] >= U_ILLEGAL_ARGUMENT_ERROR)
          {
            unint64_t v16 = 0LL;
            int v17 = v163;
            unsigned int v18 = (unsigned int *)v161[0];
            do
            {
              uint64_t v19 = v18[v16];
              else {
                uint64_t v21 = **(void **)&v168[5] + v19;
              }
              uhash_put((uint64_t)v134, *(void *)&v17[8 * v16++], v21, a3);
            }

            while (*a3 <= 0 && v16 < v15);
          }
        }

        uint64_t v121 = v11;
        int v23 = uhash_openSize((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, (uint64_t)uhash_compareChars, 1, a3);
        if (*a3 <= 0)
        {
          unint64_t v24 = v157[0];
          if (v157[0] >= U_ILLEGAL_ARGUMENT_ERROR)
          {
            unint64_t v25 = 0LL;
            UErrorCode v26 = v158[0];
            uint64_t v27 = *(void *)&v141[0];
            do
            {
              uint64_t v28 = *(unsigned int *)(v27 + 4 * v25);
              else {
                uint64_t v30 = **(void **)&v168[5] + v28;
              }
              uhash_put((uint64_t)v23, *(void *)&v26[8 * v25++], v30, a3);
            }

            while (*a3 <= 0 && v25 < v24);
          }
        }

        uint64_t v127 = a1;
        uint64_t v32 = uhash_openSize( (uint64_t)uhash_hashChars,  (uint64_t)uhash_compareChars,  (uint64_t)uhash_compareChars,  650,  a3);
        if (*a3 <= 0)
        {
          unint64_t v33 = HIDWORD(v156);
          if (SHIDWORD(v156) >= 1)
          {
            unint64_t v34 = 0LL;
            unsigned int v35 = v153;
            int v36 = v151;
            do
            {
              uint64_t v37 = *(unsigned int *)&v36[4 * v34];
              else {
                uint64_t v39 = **(void **)&v168[5] + v37;
              }
              uhash_put((uint64_t)v32, *(void *)&v35[8 * v34++], v39, a3);
            }

            while (*a3 <= 0 && v34 < v33);
          }
        }

        __int128 v124 = a2;
        unint64_t v41 = uhash_openSize((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, (uint64_t)uhash_compareChars, 2, a3);
        if (*a3 <= 0)
        {
          unint64_t v42 = v156;
          if ((int)v156 >= 1)
          {
            unint64_t v43 = 0LL;
            UErrorCode v44 = v149;
            uint64_t v45 = v147;
            do
            {
              uint64_t v46 = *(unsigned int *)&v45[4 * v43];
              else {
                uint64_t v48 = **(void **)&v168[5] + v46;
              }
              uhash_put((uint64_t)v41, *(void *)&v44[8 * v43++], v48, a3);
            }

            while (*a3 <= 0 && v43 < v42);
          }
        }

        __int128 v129 = v23;
        uint64_t v51 = uhash_openSize((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, (uint64_t)uhash_compareChars, 2, a3);
        int v52 = *a3;
        if (*a3 <= 0)
        {
          unint64_t v53 = v155;
          if ((int)v155 >= 1)
          {
            unint64_t v54 = 0LL;
            int32_t v55 = v145;
            unsigned int v56 = v143;
            do
            {
              uint64_t v57 = *(unsigned int *)&v56[4 * v54];
              else {
                uint64_t v59 = **(void **)&v168[5] + v57;
              }
              uhash_put((uint64_t)v51, *(void *)&v55[8 * v54++], v59, a3);
              int v52 = *a3;
            }

            while (*a3 <= 0 && v54 < v53);
          }
        }

        uint64_t v8 = v123;
        a2 = v124;
        uint64_t v10 = v122;
        if (v52 < 1)
        {
          int v61 = (void *)icu::UMemory::operator new((icu::UMemory *)0x38, v50);
          uint64_t v13 = (uint64_t)v61;
          if (v61)
          {
            uint64_t v62 = *(void *)&v168[5];
            *(void *)&v168[5] = 0LL;
            v61[1] = v134;
            v61[2] = v129;
            v61[3] = v32;
            v61[4] = v41;
            v61[5] = v51;
            v61[6] = v62;
            uhash_close(0LL);
            uhash_close(0LL);
            uhash_close(0LL);
            uhash_close(0LL);
            uhash_close(0LL);
            __int128 v134 = 0LL;
            __int128 v129 = 0LL;
            uint64_t v32 = 0LL;
            unint64_t v41 = 0LL;
            uint64_t v51 = 0LL;
          }

          else
          {
            *a3 = 7;
          }
        }

        else
        {
          uint64_t v13 = 0LL;
        }

        uhash_close(v51);
        uhash_close(v41);
        uhash_close(v32);
        uhash_close(v129);
        uhash_close(v134);
        a1 = v127;
        uint64_t v11 = v121;
      }

      uprv_free(v143);
      uprv_free(v145);
      uprv_free(v147);
      uprv_free(v149);
      uprv_free(v151);
      uprv_free(v153);
      uprv_free(*(void **)&v141[0]);
      uprv_free(v158[0]);
      uprv_free(v161[0]);
      uprv_free(v163);
      sub_1807DDB4C((uint64_t)v168);
      uint64_t v12 = v130;
    }

    if (v12) {
      ures_close(v12);
    }
    if (v131) {
      ures_close((uint64_t)v131);
    }
    if (v133) {
      ures_close(v133);
    }
    if (v11) {
      ures_close(v11);
    }
    if (v10) {
      ures_close(v10);
    }
    if (v9) {
      ures_close(v9);
    }
    if (v8) {
      ures_close(v8);
    }
    qword_18C534DA0 = v13;
    dword_18C534DAC = *a3;
    icu::umtx_initImplPostInit(&dword_18C534DA8);
  }

  int v63 = *a3;
  *((void *)&v140 + 1) = qword_18C534DA0;
  if (v63 > 0)
  {
    uint64_t v6 = 0LL;
    goto LABEL_182;
  }

  *((_DWORD *)a2 + 14) = 0;
  **(_BYTE **)a2 = 0;
  int v64 = *(unsigned __int8 *)(a1 + 26);
  int v65 = (char *)(a1 + 8);
  if (!*(_BYTE *)(a1 + 8)) {
    int v65 = 0LL;
  }
  unsigned int v66 = (char *)(a1 + 20);
  if (!*(_BYTE *)(a1 + 20)) {
    unsigned int v66 = 0LL;
  }
  __s[0] = v65;
  __s[1] = v66;
  if (v64) {
    uint64_t v67 = (char *)(a1 + 26);
  }
  else {
    uint64_t v67 = 0LL;
  }
  v138[0] = v67;
  unsigned int v68 = (const char *)(*(void *)(a1 + 208) + *(int *)(a1 + 32));
  memset(&v161[1], 0, 48);
  v161[0] = (char *)&v161[1] + 5;
  LODWORD(v161[1]) = 40;
  uint64_t v162 = 0LL;
  icu::CharString::append((icu::CharString *)v161, v68, -1, (UErrorCode *)a3);
  if ((_DWORD)v162)
  {
    if (*a3 > 0) {
      goto LABEL_124;
    }
    int v69 = (char *)v161[0];
    T_CString_toLowerCase((unsigned __int8 *)v161[0]);
    int v70 = strchr(v69, 95);
    if (v70 && *a3 <= 0)
    {
      int32_t v71 = v70;
      do
      {
        char *v71 = 0;
        int v69 = v71 + 1;
        unsigned int v72 = strchr(v71 + 1, 95);
        if (!v72) {
          break;
        }
        int32_t v71 = v72;
      }

      while (*a3 < 1);
    }
  }

  if (*a3 <= 0)
  {
    icu::UVector::sort((uint64_t)v139, (uint64_t)j__strcmp, a3);
    uint64_t v142 = 0LL;
    memset(v141, 0, sizeof(v141));
    icu::UVector::UVector(v141, sub_1807DDC04, 0LL, 10LL, a3);
    if (*a3 > 0) {
      goto LABEL_178;
    }
    int v73 = 0;
    unsigned int v74 = "heploc";
    uint64_t v75 = (char *)&v168[1] + 10;
    while (1)
    {
      if ((sub_1807DCCF0((uint64_t)__s, 1, 1, 1, (icu::UVector *)v141, a3) & 1) != 0
        || (sub_1807DCCF0((uint64_t)__s, 1, 1, 0, (icu::UVector *)v141, a3) & 1) != 0
        || (sub_1807DCCF0((uint64_t)__s, 1, 0, 1, (icu::UVector *)v141, a3) & 1) != 0
        || (sub_1807DCCF0((uint64_t)__s, 1, 0, 0, (icu::UVector *)v141, a3) & 1) != 0
        || (sub_1807DCCF0((uint64_t)__s, 0, 0, 1, (icu::UVector *)v141, a3) & 1) != 0)
      {
        goto LABEL_177;
      }

      int v76 = *a3;
      if (*a3 >= 1) {
        goto LABEL_178;
      }
      if (v138[0])
      {
        int v77 = (const char *)uhash_get(*(void *)(*((void *)&v140 + 1) + 24LL), (uint64_t)v138[0]);
        if (v77)
        {
          int v78 = (char *)v77;
          int v79 = strchr(v77, 32);
          if (!v79)
          {
            unsigned int v74 = "heploc";
LABEL_157:
            v138[0] = v78;
            goto LABEL_177;
          }

          int v80 = (int)v79;
          memset(v168, 0, sizeof(v168));
          icu::LocaleBuilder::LocaleBuilder(&v163);
          if (__s[0]) {
            BOOL v81 = __s[0];
          }
          else {
            BOOL v81 = "und";
          }
          icu::StringPiece::StringPiece((icu::StringPiece *)v158, v81);
          uint64_t v82 = icu::LocaleBuilder::setLanguage((uint64_t)&v163, v158[0], (signed int)v158[1]);
          icu::StringPiece::StringPiece((icu::StringPiece *)&v153, __s[1]);
          char v83 = (icu::LocaleBuilder *)icu::LocaleBuilder::setScript(v82, v153, v154[0]);
          icu::LocaleBuilder::build(v83, (UErrorCode *)a3, (icu::Locale *)v168);
          icu::LocaleBuilder::~LocaleBuilder((icu::LocaleBuilder *)&v163);
          icu::Locale::addLikelySubtags((icu::Locale *)v168, (UErrorCode *)a3);
          __int128 v163 = 0LL;
          size_t v84 = strlen(v75);
          if (v84)
          {
            int v86 = v84;
            uint64_t v128 = a1;
            BOOL v87 = strstr(v78, v75);
            if (v87)
            {
              char v88 = v87;
              __int128 v125 = a2;
              uint64_t v89 = icu::UMemory::operator new((icu::UMemory *)0x40, v85);
              uint64_t v90 = (void **)v89;
              if (v89)
              {
                *(void *)uint64_t v89 = v89 + 13;
                *(_DWORD *)(v89 + 8) = 40;
                *(_WORD *)(v89 + 12) = 0;
                *(_DWORD *)(v89 + 56) = 0;
                icu::CharString::append((icu::CharString *)v89, v88, v86, (UErrorCode *)a3);
              }

              sub_1807DDC7C((void ***)&v163, v90, a3);
              v91 = v163;
              a2 = v125;
            }

            else
            {
              v91 = 0LL;
            }

            a1 = v128;
          }

          else
          {
            v91 = 0LL;
          }

          int v92 = *a3;
          if (!v91 && v92 <= 0)
          {
            uint64_t v93 = icu::UMemory::operator new((icu::UMemory *)0x40, v85);
            int v94 = (void **)v93;
            if (v93)
            {
              *(void *)uint64_t v93 = v93 + 13;
              *(_DWORD *)(v93 + 8) = 40;
              *(_WORD *)(v93 + 12) = 0;
              *(_DWORD *)(v93 + 56) = 0;
              icu::CharString::append((icu::CharString *)v93, v78, v80 - (_DWORD)v78, (UErrorCode *)a3);
            }

            sub_1807DDC7C((void ***)&v163, v94, a3);
            int v92 = *a3;
          }

          if (v92 <= 0)
          {
            unsigned int v96 = v163;
            int v78 = *(char **)v163;
            __int128 v163 = 0LL;
            icu::UVector::adoptElement((icu::UVector *)v141, v96, (UErrorCode *)a3);
            BOOL v95 = *a3 < 1;
          }

          else
          {
            BOOL v95 = 0;
          }

          unsigned int v74 = "heploc";
          sub_1807DDC3C((uint64_t *)&v163);
          icu::Locale::~Locale((icu::Locale *)v168);
          if (v95) {
            goto LABEL_157;
          }
        }

        int v76 = *a3;
        if (*a3 > 0) {
          goto LABEL_178;
        }
      }

      if (__s[1])
      {
        int v97 = (char *)uhash_get(*(void *)(*((void *)&v140 + 1) + 16LL), (uint64_t)__s[1]);
        if (v97)
        {
          __s[1] = v97;
          goto LABEL_177;
        }

        int v76 = *a3;
      }

      uint64_t v135 = v75;
      if (v76 > 0 || SDWORD2(v139[0]) < 1) {
        goto LABEL_183;
      }
      BOOL v98 = v74;
      unsigned int v99 = 0;
      while (1)
      {
        int v100 = (const char *)icu::UVector::elementAt((icu::UVector *)v139, v99);
        uint64_t v101 = (const char *)uhash_get(*(void *)(*((void *)&v140 + 1) + 32LL), (uint64_t)v100);
        if (v101)
        {
          int v102 = (char *)v101;
          if (!v100 || strcmp(v100, v101)) {
            break;
          }
        }

        if ((int)++v99 >= SDWORD2(v139[0]))
        {
          int v76 = *a3;
LABEL_183:
          if (v76 > 0) {
            goto LABEL_178;
          }
          KeywordsStart = locale_getKeywordsStart(*(const char **)(a1 + 40));
          unsigned __int16 v108 = KeywordsStart;
          if (!v73 && SDWORD2(v139[0]) <= 1 && !KeywordsStart) {
            goto LABEL_178;
          }
          v157[1] = *a3;
          icu::StringPiece::StringPiece((icu::StringPiece *)v158, __s[0]);
          icu::CharString::append(a2, v158[0], (int)v158[1], &v157[1]);
          if (__s[1] && *__s[1])
          {
            __int128 v109 = icu::CharString::append(a2, 95, &v157[1]);
            icu::StringPiece::StringPiece((icu::StringPiece *)&v153, __s[1]);
            icu::CharString::append(v109, v153, v154[0], &v157[1]);
          }

          if (v138[0] && *v138[0])
          {
            __int128 v110 = icu::CharString::append(a2, 95, &v157[1]);
            icu::StringPiece::StringPiece((icu::StringPiece *)&v151, v138[0]);
            icu::CharString::append(v110, v151, v152[0], &v157[1]);
          }

          if (SDWORD2(v139[0]) >= 1)
          {
            if ((!__s[1] || !*__s[1]) && (!v138[0] || !*v138[0])) {
              icu::CharString::append(a2, 95, &v157[1]);
            }
            icu::UVector::sort((uint64_t)v139, (uint64_t)j__strcmp_0, (int *)&v157[1]);
            uint64_t v111 = *((int *)a2 + 14);
            if (SDWORD2(v139[0]) >= 1)
            {
              signed int v112 = 0;
              do
              {
                __int16 v113 = icu::CharString::append(a2, 95, &v157[1]);
                __int128 v114 = (const char *)icu::UVector::elementAt((icu::UVector *)v139, v112);
                icu::StringPiece::StringPiece((icu::StringPiece *)&v149, v114);
                icu::CharString::append(v113, v149, v150, &v157[1]);
                ++v112;
              }

              while (v112 < SDWORD2(v139[0]));
            }

            T_CString_toUpperCase((unsigned __int8 *)(*(void *)a2 + v111));
          }

          if (v138[1])
          {
            if (*v138[1])
            {
              uint64_t v167 = 0LL;
              __int128 v166 = 0u;
              __int128 v165 = 0u;
              __int128 v164 = 0u;
              icu::StringPiece::StringPiece((icu::StringPiece *)&v147, "und_");
              __int128 v163 = (char *)&v164 + 5;
              LODWORD(v164) = 40;
              WORD2(v164) = 0;
              LODWORD(v167) = 0;
              icu::CharString::append((icu::CharString *)&v163, v147, v148, &v157[1]);
              icu::StringPiece::StringPiece((icu::StringPiece *)&v145, v138[1]);
              icu::CharString::append((icu::CharString *)&v163, v145, v146, &v157[1]);
              memset(v168, 0, sizeof(v168));
              icu::Locale::Locale((icu::Locale *)v168, v163, 0LL, 0LL, 0LL);
              icu::StringPiece::StringPiece((icu::StringPiece *)&v143, (const char *)(*((void *)&v168[2] + 1) + 1LL));
              icu::CharString::append(a2, v143, v144, &v157[1]);
              icu::Locale::~Locale((icu::Locale *)v168);
              if (BYTE4(v164)) {
                uprv_free(v163);
              }
            }
          }

          if (*a3 > 0) {
            goto LABEL_178;
          }
          if (!v108) {
            goto LABEL_239;
          }
          __int128 v132 = v108;
          __int128 v126 = a2;
          memset((char *)&v168[2] + 8, 0, 184);
          memset((char *)v168 + 8, 0, 32);
          *(void *)&v168[0] = off_18970BE60;
          *((void *)&v168[2] + 1) = &v168[3];
          icu::Locale::operator=((icu::Locale *)v168, a1);
          Keywords = icu::Locale::createKeywords((icu::Locale *)a1, (UErrorCode *)a3);
          __int128 v116 = Keywords;
          if (*a3 > 0) {
            goto LABEL_230;
          }
          if (!Keywords) {
            goto LABEL_230;
          }
          uint64_t v117 = (*(uint64_t (**)(char *, void, int *))(*(void *)Keywords + 40LL))(Keywords, 0LL, a3);
          if (!v117) {
            goto LABEL_230;
          }
          int v118 = (char *)v117;
          int v136 = 0;
          while (2)
          {
            if (strcmp("sd", v118) && strcmp("rg", v118) && strcmp("t", v118)) {
              goto LABEL_227;
            }
            __int128 v165 = 0u;
            __int128 v166 = 0u;
            __int128 v164 = 0u;
            __int128 v163 = (char *)&v164 + 5;
            LODWORD(v164) = 40;
            uint64_t v167 = 0LL;
            uint64_t v153 = 0LL;
            *(void *)int v154 = 0LL;
            icu::CharStringByteSink::CharStringByteSink(&v153, (uint64_t)&v163);
            icu::StringPiece::StringPiece((icu::StringPiece *)&v151, v118);
            icu::Locale::getKeywordValue(a1, v151, v152[0], (uint64_t)&v153, (UErrorCode *)a3);
            if (*a3 >= 1)
            {
              *a3 = 0;
              int v119 = 6;
LABEL_223:
              icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)&v153);
              if (BYTE4(v164)) {
                uprv_free(v163);
              }
              if (v119 != 6 && v119) {
                goto LABEL_232;
              }
LABEL_227:
              int v118 = (char *)(*(uint64_t (**)(char *, void, int *))(*(void *)v116 + 40LL))(v116, 0LL, a3);
              if (!v118)
              {
                if (v136) {
                  __int128 v132 = locale_getKeywordsStart(*((const char **)&v168[2] + 1));
                }
LABEL_230:
                icu::StringPiece::StringPiece((icu::StringPiece *)&v163, v132);
                icu::CharString::append(v126, v163, v164, (UErrorCode *)a3);
                if (v116)
                {
                  int v119 = 0;
LABEL_232:
                  (*(void (**)(char *))(*(void *)v116 + 8LL))(v116);
                  icu::Locale::~Locale((icu::Locale *)v168);
                  uint64_t v6 = 0LL;
                  if (v119 || (a2 = v126, *a3 >= 1))
                  {
LABEL_179:
                    icu::UVector::~UVector((icu::UVector *)v141);
                    goto LABEL_180;
                  }

LABEL_239:
                  __int128 v120 = *(const char **)a2;
                  if (!strcmp(*(const char **)a2, *(const char **)(a1 + 40)))
                  {
                    uint64_t v6 = 0LL;
                    *((_DWORD *)a2 + 14) = 0;
                    *__int128 v120 = 0;
                  }

                  else
                  {
                    uint64_t v6 = 1LL;
                  }

                  goto LABEL_179;
                }

                icu::Locale::~Locale((icu::Locale *)v168);
                a2 = v126;
                if (*a3 <= 0) {
                  goto LABEL_239;
                }
LABEL_178:
                uint64_t v6 = 0LL;
                goto LABEL_179;
              }

              continue;
            }

            break;
          }

          int v160 = 0;
          memset(&v158[1], 0, 48);
          v158[0] = (char *)&v158[1] + 5;
          LODWORD(v158[1]) = 40;
          int v159 = 0;
          if (strlen(v118) == 2)
          {
            if ((sub_1807DD418( (uint64_t)__s,  (uint64_t)v163,  v167,  (icu::CharString *)v158,  (UErrorCode *)a3) & 1) == 0)
            {
LABEL_221:
              int v119 = *a3 > 0;
              if (BYTE4(v158[1])) {
                uprv_free(v158[0]);
              }
              goto LABEL_223;
            }
          }

          else if (!sub_1807DD4CC((uint64_t)&v163, (uint64_t)v158, (UErrorCode *)a3))
          {
            goto LABEL_221;
          }

          ++v136;
          icu::Locale::setKeywordValue((const char **)v168, v118, v158[0], (UErrorCode *)a3);
          goto LABEL_221;
        }
      }

      icu::UVector::setElementAt((uint64_t)v139, v102, v99);
      unsigned int v74 = v98;
      int v103 = strcmp(v100, v98);
      uint64_t v75 = v135;
      if (!v103 && SDWORD2(v139[0]) >= 1)
      {
        int v104 = 0;
        do
        {
          uint64_t v105 = (const char *)icu::UVector::elementAt((icu::UVector *)v139, v104);
          if (!strcmp(v105, "hepburn")) {
            icu::UVector::removeElementAt((uint64_t (**)(void))v139, v104);
          }
          ++v104;
        }

        while (v104 < SDWORD2(v139[0]));
      }

LABEL_177:
      ++v73;
      if (*a3 > 0) {
        goto LABEL_178;
      }
    }
  }

LABEL_124:
  uint64_t v6 = 0LL;
LABEL_180:
  if (BYTE4(v161[1])) {
    uprv_free(v161[0]);
  }
LABEL_182:
  icu::UVector::~UVector((icu::UVector *)v139);
  return v6;
}

        char v20 = v44;
        goto LABEL_125;
      }

      uint64_t v14 = 45;
    }
  }

  if ((_DWORD)v23 != 36)
  {
    if ((_DWORD)v23 == 38)
    {
      UErrorCode v26 = 65538;
      if (v16 != 2 || v14) {
        goto LABEL_124;
      }
      uint64_t v14 = 38;
      goto LABEL_39;
    }

    goto LABEL_59;
  }

  sub_180808BC8((uint64_t)a2, (uint64_t)v46);
  uint64_t v28 = sub_180808860((uint64_t)a2, v12, &v45, (int *)a9);
  uint64_t v30 = v28 == 93 && v45 == 0;
  if (!a3 && !v30)
  {
    sub_180808BE4((uint64_t)a2, (uint64_t)v46);
    int v23 = 36LL;
    goto LABEL_59;
  }

  if (v14) {
    uint64_t v30 = 0;
  }
  if (v30)
  {
    if (v16 == 1)
    {
      icu::UnicodeSet::add(a1, v43, v43);
      icu::UnicodeSet::_appendToPat((icu::UnicodeSet *)&v53, (icu::UnicodeString *)v43, 0);
    }

    icu::UnicodeSet::add(a1, 0xFFFFu);
    size_t v47 = 36;
    uint64_t v13 = 1;
LABEL_132:
    icu::UnicodeString::doAppend((uint64_t)&v53, (uint64_t)&v47, 0, 1LL);
LABEL_133:
    size_t v47 = 93;
    icu::UnicodeString::doAppend((uint64_t)&v53, (uint64_t)&v47, 0, 1LL);
LABEL_103:
    sub_180808C00((BOOL)a2, v12);
    if ((a5 & 6) != 0)
    {
      int v31 = (void *)((char *)a1 + (a7 >> 1));
      if ((a7 & 1) != 0) {
        (*(void (**)(void *))(*v31 + a6))(v31);
      }
      else {
        a6(v31);
      }
    }

    if (v37)
    {
      uint64_t v32 = icu::UnicodeSet::complement(a1);
      icu::UnicodeSet::removeAllStrings(v32);
    }

    if (v13)
    {
      if ((v54 & 0x8000u) == 0LL) {
        unint64_t v33 = (unsigned __int16)v54 >> 5;
      }
      else {
        unint64_t v33 = DWORD1(v54);
      }
      icu::UnicodeString::doAppend((uint64_t)a4, (const icu::UnicodeString *)&v53, 0, v33);
    }

    else
    {
      icu::UnicodeSet::_generatePattern(a1, a4, 0LL);
    }

    if ((*((_BYTE *)a1 + 32) & 1) != 0)
    {
      char v20 = v44;
LABEL_117:
      UErrorCode v26 = 7;
LABEL_125:
      *a9 = v26;
      goto LABEL_136;
    }
  }

  else
  {
LABEL_134:
    *a9 = U_MALFORMED_SET;
  }

                v7 += 2;
              }

              goto LABEL_125;
            case 0x28u:
              if (v12 <= (int)++j)
              {
                LODWORD(v31) = 0;
              }

              else
              {
                uint64_t v11 = *(void *)(v11 + 24);
                int v31 = *(void *)(v11 + 8LL * j);
              }

              if (!v6)
              {
                UErrorCode v40 = (icu::RegexCompile *)icu::UnicodeString::char32At( (uint64_t *)v11,  (icu::UnicodeString *)(v10 + 40),  v13 & 0xFFFFFF);
                int v65 = 0LL;
                int v63 = 0u;
                int v64 = 0u;
                int v61 = 0u;
                uint64_t v62 = 0u;
                uint64_t v59 = 0u;
                unsigned int v60 = 0u;
                uint64_t v57 = 0u;
                unsigned int v58 = 0u;
                int32_t v55 = 0u;
                unsigned int v56 = 0u;
                unint64_t v53 = 0u;
                unint64_t v54 = 0u;
                icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v53);
                icu::RegexCompile::findCaseInsensitiveStarters(v40, (icu::UnicodeSet *)&v53, v41);
                icu::UnicodeSet::addAll( *(icu::UVector ***)(*((void *)this + 2) + 160LL),  (const icu::UnicodeSet *)&v53);
                v7 += 2;
                icu::UnicodeSet::~UnicodeSet(v42, (icu::UnicodeSet *)&v53);
              }

              uint64_t v8 = 0;
              else {
                v6 += v31 & 0xFFFFFF;
              }
              continue;
            case 0x31u:
              if (v6) {
                goto LABEL_125;
              }
              int v65 = 0LL;
              int v63 = 0u;
              int v64 = 0u;
              int v61 = 0u;
              uint64_t v62 = 0u;
              uint64_t v59 = 0u;
              unsigned int v60 = 0u;
              uint64_t v57 = 0u;
              unsigned int v58 = 0u;
              int32_t v55 = 0u;
              unsigned int v56 = 0u;
              unint64_t v53 = 0u;
              unint64_t v54 = 0u;
              icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v53);
              uint64_t v32 = icu::UnicodeSet::addAll( (icu::UVector **)&v53,  (const icu::UnicodeSet *)(qword_18C449BC0 + 200 * (v13 & 0xFFFFFF) + 8));
              goto LABEL_93;
            case 0x32u:
              if (v6) {
                goto LABEL_20;
              }
              unint64_t v33 = (const icu::UnicodeSet *)icu::UVector::elementAt(*(icu::UVector **)(v10 + 104), v13 & 0xFFFFFF);
              icu::UnicodeSet::addAll(*(icu::UVector ***)(*((void *)this + 2) + 160LL), v33);
              goto LABEL_88;
            case 0x34u:
              if (v6) {
                goto LABEL_20;
              }
              icu::UnicodeSet::clear(*(icu::UnicodeSet **)(v10 + 160));
              icu::UnicodeSet::complement(*(icu::UnicodeSet **)(*((void *)this + 2) + 160LL));
LABEL_88:
              uint64_t v8 = 0;
              v7 += 2;
              continue;
            case 0x38u:
              if (v6) {
                goto LABEL_125;
              }
              int v65 = 0LL;
              int v63 = 0u;
              int v64 = 0u;
              int v61 = 0u;
              uint64_t v62 = 0u;
              uint64_t v59 = 0u;
              unsigned int v60 = 0u;
              uint64_t v57 = 0u;
              unsigned int v58 = 0u;
              int32_t v55 = 0u;
              unsigned int v56 = 0u;
              unint64_t v53 = 0u;
              unint64_t v54 = 0u;
              icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v53);
              icu::UnicodeSet::applyIntPropertyValue( (icu::UnicodeSet *)&v53,  0x2000LL,  0x1000u,  *((UErrorCode **)this + 1));
              icu::UnicodeSet::add((icu::UnicodeSet *)&v53, 9u);
              goto LABEL_91;
            case 0x39u:
            case 0x3Au:
              if (v6) {
                goto LABEL_125;
              }
              int v65 = 0LL;
              int v63 = 0u;
              int v64 = 0u;
              int v61 = 0u;
              uint64_t v62 = 0u;
              uint64_t v59 = 0u;
              unsigned int v60 = 0u;
              uint64_t v57 = 0u;
              unsigned int v58 = 0u;
              int32_t v55 = 0u;
              unsigned int v56 = 0u;
              unint64_t v53 = 0u;
              unint64_t v54 = 0u;
              icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v53);
              icu::UnicodeSet::add((icu::UnicodeSet *)&v53, 0xAu, 0xDu);
              icu::UnicodeSet::add((icu::UnicodeSet *)&v53, 0x85u);
              icu::UnicodeSet::add((icu::UnicodeSet *)&v53, 0x2028u, 0x2029u);
LABEL_91:
              if ((v13 & 0xFFFFFF) != 0)
              {
                uint64_t v32 = (icu::UnicodeSet *)&v53;
LABEL_93:
                icu::UnicodeSet::complement(v32);
              }

              icu::UnicodeSet::addAll(*(icu::UVector ***)(*((void *)this + 2) + 160LL), (const icu::UnicodeSet *)&v53);
              v7 += 2;
              icu::UnicodeSet::~UnicodeSet(v34, (icu::UnicodeSet *)&v53);
LABEL_125:
              uint64_t v8 = 0;
              else {
                ++v6;
              }
              break;
            default:
              abort();
          }
        }
      }
    }

    unint64_t v43 = *((void *)this + 2);
    UErrorCode v44 = *(icu::UnicodeSet **)(v43 + 160);
    if (v44)
    {
      uint64_t v45 = 0;
      uint64_t v46 = *(void *)(v43 + 176);
      do
      {
        ++v45;
      }

      while (v45 != 256);
      unint64_t v43 = *((void *)this + 2);
    }

    size_t v47 = *(_DWORD *)(v43 + 144);
    if (v47 == 3) {
      goto LABEL_148;
    }
    if (v7 == 1 && *(int *)(v43 + 124) >= 1)
    {
      uint64_t v48 = icu::UnicodeString::char32At( (uint64_t *)v43,  (icu::UnicodeString *)(v43 + 40),  *(_DWORD *)(v43 + 148));
      int v49 = *((void *)this + 2);
      *(_DWORD *)(v49 + 144) = 5;
LABEL_145:
      *(_DWORD *)(v49 + 168) = v48;
      goto LABEL_148;
    }

    if (v47 == 4)
    {
LABEL_148:
      icu::UVector32::~UVector32((void **)&v66);
      return;
    }

    if (*(_DWORD *)(v43 + 124))
    {
      unint64_t v50 = icu::UnicodeSet::size(*(icu::UnicodeSet **)(v43 + 160));
      uint64_t v51 = *((void *)this + 2);
      if (v50 == 1)
      {
        *(_DWORD *)(v51 + 144) = 1;
        uint64_t v48 = icu::UnicodeSet::charAt(*(icu::UnicodeSet **)(v51 + 160), 0);
        int v49 = *((void *)this + 2);
        goto LABEL_145;
      }

      int v52 = icu::UnicodeSet::contains(*(icu::UnicodeSet **)(v51 + 160), 0, 1114111);
      unint64_t v43 = *((void *)this + 2);
      if (!v52 && *(int *)(v43 + 124) >= 1)
      {
        *(_DWORD *)(v43 + 144) = 2;
        goto LABEL_148;
      }
    }

    *(_DWORD *)(v43 + 144) = 0;
    goto LABEL_148;
  }

const char **icu::Locale::initBaseName(const char **this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    int v3 = this;
    int v4 = this[5];
    uint64_t v5 = strchr(v4, 64);
    this = (const char **)strchr(v4, 61);
    if (v5) {
      BOOL v6 = this == 0LL;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6 || v5 >= (char *)this)
    {
      v3[26] = v4;
    }

    else
    {
      int64_t v8 = v5 - v4;
      this = (const char **)uprv_malloc(((v8 << 32) + 0x100000000LL) >> 32);
      v3[26] = (const char *)this;
      if (this)
      {
        this = (const char **)strncpy((char *)this, v3[5], (int)v8);
        *((_BYTE *)this + (int)icu::LocaleBuilder::setVariant((uint64_t)this, v7, v8) = 0;
      }

      else
      {
        *a2 = U_MEMORY_ALLOCATION_ERROR;
      }
    }
  }

  return this;
}

unsigned __int8 *icu::Locale::hashCode(icu::Locale *this)
{
  int v1 = (char *)*((void *)this + 5);
  int v2 = strlen(v1);
  return ustr_hashCharsN((unsigned __int8 *)v1, v2);
}

uint64_t *icu::Locale::setDefault(uint64_t *this, const icu::Locale *a2, UErrorCode *a3)
{
  return this;
}

void icu::Locale::addLikelySubtags(icu::Locale *this, UErrorCode *a2)
{
  v5[8] = *(char **)MEMORY[0x1895F89C0];
  if (*(int *)a2 <= 0)
  {
    memset(&v5[1], 0, 56);
    v4[1] = 0LL;
    v5[0] = (char *)&v5[1] + 5;
    LODWORD(v5[1]) = 40;
    v4[0] = 0LL;
    icu::CharStringByteSink::CharStringByteSink(v4, (uint64_t)v5);
    ulocimp_addLikelySubtags(*((void *)this + 5), v4, a2);
    icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v4);
    if (*(int *)a2 <= 0)
    {
      icu::Locale::init(this, v5[0], 0);
      if (*((_BYTE *)this + 216)) {
        *a2 = U_ILLEGAL_ARGUMENT_ERROR;
      }
    }

    if (BYTE4(v5[1])) {
      uprv_free(v5[0]);
    }
  }

void icu::Locale::minimizeSubtags(char **this, UErrorCode *a2)
{
  v5[8] = *(char **)MEMORY[0x1895F89C0];
  if (*(int *)a2 <= 0)
  {
    memset(&v5[1], 0, 56);
    v4[1] = 0LL;
    v5[0] = (char *)&v5[1] + 5;
    LODWORD(v5[1]) = 40;
    v4[0] = 0LL;
    icu::CharStringByteSink::CharStringByteSink(v4, (uint64_t)v5);
    ulocimp_minimizeSubtags(this[5], (uint64_t)v4, a2);
    icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v4);
    if (*(int *)a2 <= 0)
    {
      icu::Locale::init((icu::Locale *)this, v5[0], 0);
      if (*((_BYTE *)this + 216)) {
        *a2 = U_ILLEGAL_ARGUMENT_ERROR;
      }
    }

    if (BYTE4(v5[1])) {
      uprv_free(v5[0]);
    }
  }

void icu::Locale::canonicalize(const char **this, UErrorCode *a2)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (*(int *)a2 <= 0)
  {
    if (*((_BYTE *)this + 216))
    {
      *a2 = U_ILLEGAL_ARGUMENT_ERROR;
    }

    else
    {
      uint64_t v7 = 0LL;
      memset(&v6[1], 0, 48);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v4, this[5]);
      v6[0] = (char *)&v6[1] + 5;
      LODWORD(v6[1]) = 40;
      WORD2(v6[1]) = 0;
      LODWORD(v7) = 0;
      icu::CharString::append((icu::CharString *)v6, v4, v5, a2);
      if (*(int *)a2 <= 0)
      {
        icu::Locale::init((icu::Locale *)this, v6[0], 1);
        if (*((_BYTE *)this + 216)) {
          *a2 = U_ILLEGAL_ARGUMENT_ERROR;
        }
      }

      if (BYTE4(v6[1])) {
        uprv_free(v6[0]);
      }
    }
  }

void icu::Locale::forLanguageTag(char *a1@<X0>, int a2@<W1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  v10[8] = *(char **)MEMORY[0x1895F89C0];
  *(_OWORD *)(a4 + 40) = 0u;
  *(void *)(a4 + 216) = 0LL;
  *(_OWORD *)(a4 + 200) = 0u;
  *(_OWORD *)(a4 + 184) = 0u;
  *(_OWORD *)(a4 + 168) = 0u;
  *(_OWORD *)(a4 + 152) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 8) = 0u;
  *(void *)a4 = off_18970BE60;
  *(void *)(a4 + 40) = a4 + 48;
  icu::Locale::setToBogus((icu::Locale *)a4);
  if (*a3 <= 0)
  {
    memset(&v10[1], 0, 56);
    v10[0] = (char *)&v10[1] + 5;
    LODWORD(v10[1]) = 40;
    int v9 = 0;
    v8[0] = 0LL;
    v8[1] = 0LL;
    icu::CharStringByteSink::CharStringByteSink(v8, (uint64_t)v10);
    ulocimp_forLanguageTag(a1, a2, (uint64_t)v8, &v9, a3);
    icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v8);
    if (*a3 <= 0)
    {
      if (v9 != a2 || (icu::Locale::init((icu::Locale *)a4, v10[0], 0), *(_BYTE *)(a4 + 216))) {
        *a3 = 1;
      }
    }

    if (BYTE4(v10[1])) {
      uprv_free(v10[0]);
    }
  }

void icu::Locale::toLanguageTag(char **this, icu::ByteSink *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (*((_BYTE *)this + 216)) {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    else {
      ulocimp_toLanguageTag(this[5], (uint64_t)a2, 0, (int *)a3);
    }
  }

icu::Locale *icu::Locale::createFromName@<X0>(icu::Locale *this@<X0>, uint64_t a2@<X8>)
{
  if (this)
  {
    *(_OWORD *)(a2 + 192) = 0u;
    *(_OWORD *)(a2 + 208) = 0u;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    int v5 = icu::Locale::Locale((icu::Locale *)a2, "", 0LL, 0LL, 0LL);
    return icu::Locale::init(v5, (char *)this, 0);
  }

  else
  {
    uint64_t Default = icu::Locale::getDefault(0LL);
    *(void *)a2 = off_18970BE60;
    *(void *)(a2 + 40) = a2 + 48;
    *(void *)(a2 + 208) = 0LL;
    return icu::Locale::operator=((icu::Locale *)a2, (uint64_t)Default);
  }

icu::Locale *icu::Locale::createCanonical@<X0>(icu::Locale *this@<X0>, icu::Locale *a2@<X8>)
{
  *((_OWORD *)a2 + 12) = 0u;
  *((_OWORD *)a2 + 13) = 0u;
  *((_OWORD *)a2 + 10) = 0u;
  *((_OWORD *)a2 + 11) = 0u;
  *((_OWORD *)a2 + 8) = 0u;
  *((_OWORD *)a2 + 9) = 0u;
  *((_OWORD *)a2 + 6) = 0u;
  *((_OWORD *)a2 + 7) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  *((_OWORD *)a2 + 5) = 0u;
  *((_OWORD *)a2 + 2) = 0u;
  *((_OWORD *)a2 + 3) = 0u;
  *(_OWORD *)a2 = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  int v4 = icu::Locale::Locale(a2, "", 0LL, 0LL, 0LL);
  return icu::Locale::init(v4, (char *)this, 1);
}

char *icu::Locale::getISO3Language(icu::Locale *this)
{
  return uloc_getISO3Language(*((void *)this + 5));
}

char *icu::Locale::getISO3Country(icu::Locale *this)
{
  return uloc_getISO3Country(*((void *)this + 5));
}

uint64_t icu::Locale::getLCID(char **this)
{
  return uloc_getLCID(this[5]);
}

icu::Locale *icu::Locale::setFromPOSIXID(icu::Locale *this, char *a2)
{
  return icu::Locale::init(this, a2, 1);
}

uint64_t icu::Locale::getRoot(icu::Locale *this)
{
  uint64_t LocaleCache = icu::Locale::getLocaleCache(this);
  uint64_t v2 = 4032LL;
  if (!LocaleCache) {
    uint64_t v2 = 0LL;
  }
  return LocaleCache + v2;
}

uint64_t icu::Locale::getLocale(icu::Locale *this)
{
  int v1 = (int)this;
  uint64_t LocaleCache = icu::Locale::getLocaleCache(this);
  uint64_t v3 = v1;
  if (!LocaleCache) {
    uint64_t v3 = 0LL;
  }
  return LocaleCache + 224 * v3;
}

uint64_t icu::Locale::getFrench(icu::Locale *this)
{
  uint64_t LocaleCache = icu::Locale::getLocaleCache(this);
  return LocaleCache + 224LL * (LocaleCache != 0);
}

uint64_t icu::Locale::getGerman(icu::Locale *this)
{
  uint64_t LocaleCache = icu::Locale::getLocaleCache(this);
  uint64_t v2 = 448LL;
  if (!LocaleCache) {
    uint64_t v2 = 0LL;
  }
  return LocaleCache + v2;
}

uint64_t icu::Locale::getItalian(icu::Locale *this)
{
  uint64_t LocaleCache = icu::Locale::getLocaleCache(this);
  uint64_t v2 = 672LL;
  if (!LocaleCache) {
    uint64_t v2 = 0LL;
  }
  return LocaleCache + v2;
}

uint64_t icu::Locale::getJapanese(icu::Locale *this)
{
  uint64_t LocaleCache = icu::Locale::getLocaleCache(this);
  uint64_t v2 = 896LL;
  if (!LocaleCache) {
    uint64_t v2 = 0LL;
  }
  return LocaleCache + v2;
}

uint64_t icu::Locale::getKorean(icu::Locale *this)
{
  uint64_t LocaleCache = icu::Locale::getLocaleCache(this);
  uint64_t v2 = 1120LL;
  if (!LocaleCache) {
    uint64_t v2 = 0LL;
  }
  return LocaleCache + v2;
}

uint64_t icu::Locale::getChinese(icu::Locale *this)
{
  uint64_t LocaleCache = icu::Locale::getLocaleCache(this);
  uint64_t v2 = 1344LL;
  if (!LocaleCache) {
    uint64_t v2 = 0LL;
  }
  return LocaleCache + v2;
}

uint64_t icu::Locale::getSimplifiedChinese(icu::Locale *this)
{
  uint64_t LocaleCache = icu::Locale::getLocaleCache(this);
  uint64_t v2 = 2688LL;
  if (!LocaleCache) {
    uint64_t v2 = 0LL;
  }
  return LocaleCache + v2;
}

uint64_t icu::Locale::getTraditionalChinese(icu::Locale *this)
{
  uint64_t LocaleCache = icu::Locale::getLocaleCache(this);
  uint64_t v2 = 2912LL;
  if (!LocaleCache) {
    uint64_t v2 = 0LL;
  }
  return LocaleCache + v2;
}

uint64_t icu::Locale::getFrance(icu::Locale *this)
{
  uint64_t LocaleCache = icu::Locale::getLocaleCache(this);
  uint64_t v2 = 1568LL;
  if (!LocaleCache) {
    uint64_t v2 = 0LL;
  }
  return LocaleCache + v2;
}

uint64_t icu::Locale::getGermany(icu::Locale *this)
{
  uint64_t LocaleCache = icu::Locale::getLocaleCache(this);
  uint64_t v2 = 1792LL;
  if (!LocaleCache) {
    uint64_t v2 = 0LL;
  }
  return LocaleCache + v2;
}

uint64_t icu::Locale::getItaly(icu::Locale *this)
{
  uint64_t LocaleCache = icu::Locale::getLocaleCache(this);
  uint64_t v2 = 2016LL;
  if (!LocaleCache) {
    uint64_t v2 = 0LL;
  }
  return LocaleCache + v2;
}

uint64_t icu::Locale::getJapan(icu::Locale *this)
{
  uint64_t LocaleCache = icu::Locale::getLocaleCache(this);
  uint64_t v2 = 2240LL;
  if (!LocaleCache) {
    uint64_t v2 = 0LL;
  }
  return LocaleCache + v2;
}

uint64_t icu::Locale::getKorea(icu::Locale *this)
{
  uint64_t LocaleCache = icu::Locale::getLocaleCache(this);
  uint64_t v2 = 2464LL;
  if (!LocaleCache) {
    uint64_t v2 = 0LL;
  }
  return LocaleCache + v2;
}

uint64_t icu::Locale::getChina(icu::Locale *this)
{
  uint64_t LocaleCache = icu::Locale::getLocaleCache(this);
  uint64_t v2 = 2688LL;
  if (!LocaleCache) {
    uint64_t v2 = 0LL;
  }
  return LocaleCache + v2;
}

uint64_t icu::Locale::getPRC(icu::Locale *this)
{
  uint64_t LocaleCache = icu::Locale::getLocaleCache(this);
  uint64_t v2 = 2688LL;
  if (!LocaleCache) {
    uint64_t v2 = 0LL;
  }
  return LocaleCache + v2;
}

uint64_t icu::Locale::getTaiwan(icu::Locale *this)
{
  uint64_t LocaleCache = icu::Locale::getLocaleCache(this);
  uint64_t v2 = 2912LL;
  if (!LocaleCache) {
    uint64_t v2 = 0LL;
  }
  return LocaleCache + v2;
}

uint64_t icu::Locale::getUK(icu::Locale *this)
{
  uint64_t LocaleCache = icu::Locale::getLocaleCache(this);
  uint64_t v2 = 3136LL;
  if (!LocaleCache) {
    uint64_t v2 = 0LL;
  }
  return LocaleCache + v2;
}

uint64_t icu::Locale::getUS(icu::Locale *this)
{
  uint64_t LocaleCache = icu::Locale::getLocaleCache(this);
  uint64_t v2 = 3360LL;
  if (!LocaleCache) {
    uint64_t v2 = 0LL;
  }
  return LocaleCache + v2;
}

uint64_t icu::Locale::getCanada(icu::Locale *this)
{
  uint64_t LocaleCache = icu::Locale::getLocaleCache(this);
  uint64_t v2 = 3584LL;
  if (!LocaleCache) {
    uint64_t v2 = 0LL;
  }
  return LocaleCache + v2;
}

uint64_t icu::Locale::getCanadaFrench(icu::Locale *this)
{
  uint64_t LocaleCache = icu::Locale::getLocaleCache(this);
  uint64_t v2 = 3808LL;
  if (!LocaleCache) {
    uint64_t v2 = 0LL;
  }
  return LocaleCache + v2;
}

uint64_t icu::Locale::getLocaleCache(icu::Locale *this)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  unsigned int v1 = atomic_load(&dword_18C448A28);
  if (v1 != 2 && icu::umtx_initImplPreInit(&dword_18C448A28))
  {
    uint64_t v3 = (_OWORD *)icu::UMemory::operator new[]((icu::UMemory *)0x10B0, v2);
    if (v3)
    {
      _OWORD *v3 = xmmword_1809DE3A0;
      uint64_t v4 = (uint64_t)(v3 + 1);
      int v5 = (icu::Locale *)(v3 + 267);
      BOOL v6 = (icu::Locale *)(v3 + 1);
      do
      {
        *(void *)BOOL v6 = off_18970BE60;
        *((void *)v6 + 5) = (char *)v6 + 48;
        *((void *)v6 + 26) = 0LL;
        BOOL v6 = (icu::Locale *)((char *)icu::Locale::init(v6, 0LL, 0) + 224);
      }

      while (v6 != v5);
      qword_18C4489D0 = v4;
      sub_180820C94(7u, (uint64_t)sub_1807D8FF8);
      icu::Locale::Locale((icu::Locale *)v9, "", 0LL, 0LL, 0LL);
      icu::Locale::operator=(qword_18C4489D0 + 4032, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "en", 0LL, 0LL, 0LL);
      icu::Locale::operator=(qword_18C4489D0, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "fr", 0LL, 0LL, 0LL);
      icu::Locale::operator=(qword_18C4489D0 + 224, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "de", 0LL, 0LL, 0LL);
      icu::Locale::operator=(qword_18C4489D0 + 448, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "it", 0LL, 0LL, 0LL);
      icu::Locale::operator=(qword_18C4489D0 + 672, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "ja", 0LL, 0LL, 0LL);
      icu::Locale::operator=(qword_18C4489D0 + 896, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "ko", 0LL, 0LL, 0LL);
      icu::Locale::operator=(qword_18C4489D0 + 1120, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "zh", 0LL, 0LL, 0LL);
      icu::Locale::operator=(qword_18C4489D0 + 1344, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "fr", "FR", 0LL, 0LL);
      icu::Locale::operator=(qword_18C4489D0 + 1568, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "de", "DE", 0LL, 0LL);
      icu::Locale::operator=(qword_18C4489D0 + 1792, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "it", "IT", 0LL, 0LL);
      icu::Locale::operator=(qword_18C4489D0 + 2016, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "ja", "JP", 0LL, 0LL);
      icu::Locale::operator=(qword_18C4489D0 + 2240, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "ko", "KR", 0LL, 0LL);
      icu::Locale::operator=(qword_18C4489D0 + 2464, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "zh", "CN", 0LL, 0LL);
      icu::Locale::operator=(qword_18C4489D0 + 2688, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "zh", "TW", 0LL, 0LL);
      icu::Locale::operator=(qword_18C4489D0 + 2912, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "en", "GB", 0LL, 0LL);
      icu::Locale::operator=(qword_18C4489D0 + 3136, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "en", "US", 0LL, 0LL);
      icu::Locale::operator=(qword_18C4489D0 + 3360, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "en", "CA", 0LL, 0LL);
      icu::Locale::operator=(qword_18C4489D0 + 3584, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      icu::Locale::Locale((icu::Locale *)v9, "fr", "CA", 0LL, 0LL);
      icu::Locale::operator=(qword_18C4489D0 + 3808, (uint64_t)v9);
      icu::Locale::~Locale((icu::Locale *)v9);
      int v7 = 0;
    }

    else
    {
      qword_18C4489D0 = 0LL;
      int v7 = 7;
    }

    dword_18C448A2C = v7;
    icu::umtx_initImplPostInit(&dword_18C448A28);
  }

  return qword_18C4489D0;
}

void sub_1807DC0E0(void **a1)
{
  *a1 = off_18970C418;
  uprv_free(a1[15]);
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 18));
  icu::StringEnumeration::~StringEnumeration((icu::StringEnumeration *)a1);
}

void sub_1807DC120(void **a1)
{
}

void sub_1807DC138(void **a1)
{
}

char *icu::Locale::createKeywords(icu::Locale *this, UErrorCode *a2)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  int v5 = (const char *)*((void *)this + 5);
  unint64_t v2 = strchr(v5, 64);
  if (v2)
  {
    if (strchr(v5, 61) <= v2)
    {
      unint64_t v2 = 0LL;
      *a2 = U_INVALID_FORMAT_ERROR;
    }

    else
    {
      memset(&v9[1], 0, 48);
      uint64_t v10 = 0LL;
      v8[1] = 0LL;
      v9[0] = (char *)&v9[1] + 5;
      LODWORD(v9[1]) = 40;
      v8[0] = 0LL;
      icu::CharStringByteSink::CharStringByteSink(v8, (uint64_t)v9);
      sub_18084CB30(v2 + 1, 64, (uint64_t)v8, 0, (int *)a2);
      unint64_t v2 = 0LL;
      if (*(int *)a2 <= 0 && (_DWORD)v10)
      {
        uint64_t v7 = icu::UMemory::operator new((icu::UMemory *)0xD0, v6);
        unint64_t v2 = (char *)v7;
        if (v7) {
          sub_1807DDD44(v7, v9[0], v10, 0, (int *)a2);
        }
        else {
          *a2 = U_MEMORY_ALLOCATION_ERROR;
        }
      }

      icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v8);
      if (BYTE4(v9[1])) {
        uprv_free(v9[0]);
      }
    }
  }

  return v2;
}

char *icu::Locale::createUnicodeKeywords(icu::Locale *this, UErrorCode *a2)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  int v5 = (const char *)*((void *)this + 5);
  unint64_t v2 = strchr(v5, 64);
  if (v2)
  {
    if (strchr(v5, 61) <= v2)
    {
      unint64_t v2 = 0LL;
      *a2 = U_INVALID_FORMAT_ERROR;
    }

    else
    {
      memset(&v9[1], 0, 48);
      uint64_t v10 = 0LL;
      v8[1] = 0LL;
      v9[0] = (char *)&v9[1] + 5;
      LODWORD(v9[1]) = 40;
      v8[0] = 0LL;
      icu::CharStringByteSink::CharStringByteSink(v8, (uint64_t)v9);
      sub_18084CB30(v2 + 1, 64, (uint64_t)v8, 0, (int *)a2);
      unint64_t v2 = 0LL;
      if (*(int *)a2 <= 0 && (_DWORD)v10)
      {
        uint64_t v7 = icu::UMemory::operator new((uint64_t *)v10, (icu::UMemory *)0xD0, v6);
        unint64_t v2 = (char *)v7;
        if (v7)
        {
          sub_1807DDD44((uint64_t)v7, v9[0], v10, 0, (int *)a2);
          *(void *)unint64_t v2 = &off_18970C4B0;
        }

        else
        {
          *a2 = U_MEMORY_ALLOCATION_ERROR;
        }
      }

      icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v8);
      if (BYTE4(v9[1])) {
        uprv_free(v9[0]);
      }
    }
  }

  return v2;
}

uint64_t icu::Locale::getKeywordValue(char **this, char *a2, char *a3, int a4, UErrorCode *a5)
{
  return uloc_getKeywordValue(this[5], a2, a3, a4, (int *)a5);
}

void icu::Locale::getKeywordValue(uint64_t a1, const char *a2, int a3, uint64_t a4, UErrorCode *a5)
{
  v8[8] = *(void **)MEMORY[0x1895F89C0];
  if (*(int *)a5 <= 0)
  {
    if (*(_BYTE *)(a1 + 216))
    {
      *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    }

    else
    {
      memset(&v8[1], 0, 56);
      v8[0] = (char *)&v8[1] + 5;
      LODWORD(v8[1]) = 40;
      icu::CharString::append((icu::CharString *)v8, a2, a3, a5);
      if (BYTE4(v8[1])) {
        uprv_free(v8[0]);
      }
    }
  }

void icu::Locale::getUnicodeKeywordValue(uint64_t a1, const char *a2, int a3, uint64_t a4, UErrorCode *a5)
{
  v17[8] = *(void **)MEMORY[0x1895F89C0];
  memset(&v17[1], 0, 56);
  v17[0] = (char *)&v17[1] + 5;
  LODWORD(v17[1]) = 40;
  icu::CharString::append((icu::CharString *)v17, a2, a3, a5);
  if (*(int *)a5 <= 0)
  {
    uint64_t v8 = uloc_toLegacyKey((char *)v17[0]);
    if (v8)
    {
      int v9 = (const char *)v8;
      memset(&v16[1], 0, 56);
      v15[1] = 0LL;
      v16[0] = (char *)&v16[1] + 5;
      LODWORD(v16[1]) = 40;
      v15[0] = 0LL;
      icu::CharStringByteSink::CharStringByteSink(v15, (uint64_t)v16);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v13, v9);
      icu::Locale::getKeywordValue(a1, v13, v14, (uint64_t)v15, a5);
      icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v15);
      if (*(int *)a5 <= 0)
      {
        uint64_t v10 = uloc_toUnicodeLocaleType((uint64_t)v17[0], (char *)v16[0]);
        if (v10)
        {
          uint64_t v11 = v10;
          size_t v12 = strlen(v10);
          (*(void (**)(uint64_t, char *, size_t))(*(void *)a4 + 16LL))(a4, v11, v12);
        }

        else
        {
          *a5 = U_ILLEGAL_ARGUMENT_ERROR;
        }
      }

      if (BYTE4(v16[1])) {
        uprv_free(v16[0]);
      }
    }

    else
    {
      *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }

  if (BYTE4(v17[1])) {
    uprv_free(v17[0]);
  }
}

const char **icu::Locale::setKeywordValue(const char **this, char *a2, char *a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    uint64_t v7 = this;
    if (*a4 == U_STRING_NOT_TERMINATED_WARNING) {
      *a4 = U_ZERO_ERROR;
    }
    int v8 = strlen(this[5]);
    int v9 = uprv_max((v8 + 1), 157);
    this = (const char **)uloc_setKeywordValue(a2, a3, (char *)v7[5], v9, (int *)a4);
    int v10 = *a4;
    if (*a4 == U_BUFFER_OVERFLOW_ERROR)
    {
      int v11 = (_DWORD)this + 1;
      this = (const char **)uprv_malloc((int)this + 1);
      if (!this)
      {
        *a4 = U_MEMORY_ALLOCATION_ERROR;
        return this;
      }

      size_t v12 = (char *)this;
      uint64_t v13 = (char *)v7[5];
      strcpy((char *)this, v13);
      if (v13 != (char *)(v7 + 6))
      {
        if (v7[26] == v13) {
          v7[26] = v12;
        }
        uprv_free(v13);
      }

      v7[5] = v12;
      *a4 = U_ZERO_ERROR;
      this = (const char **)uloc_setKeywordValue(a2, a3, v12, v11, (int *)a4);
      int v10 = *a4;
    }

    if (v10 <= 0 && v7[26] == v7[5]) {
      return icu::Locale::initBaseName(v7, a4);
    }
  }

  return this;
}

void icu::Locale::setKeywordValue( const char **a1, const char *a2, int a3, const char *a4, int a5, UErrorCode *a6)
{
  v11[8] = *(char **)MEMORY[0x1895F89C0];
  memset(&v11[1], 0, 56);
  v11[0] = (char *)&v11[1] + 5;
  LODWORD(v11[1]) = 40;
  icu::CharString::append((icu::CharString *)v11, a2, a3, a6);
  memset(&v10[1], 0, 56);
  v10[0] = (char *)&v10[1] + 5;
  LODWORD(v10[1]) = 40;
  icu::CharString::append((icu::CharString *)v10, a4, a5, a6);
  icu::Locale::setKeywordValue(a1, v11[0], v10[0], a6);
  if (BYTE4(v10[1])) {
    uprv_free(v10[0]);
  }
  if (BYTE4(v11[1])) {
    uprv_free(v11[0]);
  }
}

void icu::Locale::setUnicodeKeywordValue( const char **a1, const char *a2, int a3, const char *a4, int a5, UErrorCode *a6)
{
  v15[8] = *(void **)MEMORY[0x1895F89C0];
  memset(&v15[1], 0, 56);
  v15[0] = (char *)&v15[1] + 5;
  LODWORD(v15[1]) = 40;
  icu::CharString::append((icu::CharString *)v15, a2, a3, a6);
  memset(&v13[1], 0, 48);
  uint64_t v14 = 0LL;
  v13[0] = (char *)&v13[1] + 5;
  LODWORD(v13[1]) = 40;
  icu::CharString::append((icu::CharString *)v13, a4, a5, a6);
  if (*(int *)a6 <= 0)
  {
    uint64_t v10 = uloc_toLegacyKey((char *)v15[0]);
    if (!v10)
    {
LABEL_5:
      *a6 = U_ILLEGAL_ARGUMENT_ERROR;
      goto LABEL_8;
    }

    int v11 = (char *)v10;
    if ((_DWORD)v14)
    {
      size_t v12 = (char *)uloc_toLegacyType((uint64_t)v15[0], (_BYTE *)v13[0]);
      if (!v12) {
        goto LABEL_5;
      }
    }

    else
    {
      size_t v12 = 0LL;
    }

    icu::Locale::setKeywordValue(a1, v11, v12, a6);
  }

uint64_t icu::Locale::getBaseName(icu::Locale *this)
{
  return *((void *)this + 26);
}

void *sub_1807DCA34()
{
  return &unk_1809DE3B0;
}

uint64_t sub_1807DCA40(uint64_t a1, unint64_t a2)
{
  int v4 = 0;
  uint64_t result = icu::UMemory::operator new((icu::UMemory *)0xD0, a2);
  if (result) {
    return sub_1807DDD44( result,  *(const void **)(a1 + 120),  *(_DWORD *)(a1 + 136),  *(_DWORD *)(a1 + 128) - *(void *)(a1 + 120),  &v4);
  }
  return result;
}

uint64_t sub_1807DCA8C(uint64_t a1)
{
  unsigned int v1 = *(const char **)(a1 + 120);
  if (!*v1) {
    return 0LL;
  }
  LODWORD(v2) = 0;
  do
  {
    uint64_t v2 = (v2 + 1);
    uint64_t v3 = &v1[strlen(v1)];
    int v4 = *((unsigned __int8 *)v3 + 1);
    unsigned int v1 = v3 + 1;
  }

  while (v4);
  return v2;
}

_BYTE *sub_1807DCAD8(uint64_t a1, _DWORD *a2, int *a3)
{
  if (*a3 <= 0 && (int v4 = *(_BYTE **)(a1 + 128), *v4))
  {
    int v5 = strlen(*(const char **)(a1 + 128));
    *(void *)(a1 + 128) = &v4[v5 + 1];
    if (a2) {
      goto LABEL_6;
    }
  }

  else
  {
    int v4 = 0LL;
    if (a2)
    {
      int v5 = 0;
LABEL_6:
      *a2 = v5;
    }
  }

  return v4;
}

char *sub_1807DCB48(icu::StringEnumeration *a1, UErrorCode *a2)
{
  int v6 = 0;
  int v4 = (const char *)(*(uint64_t (**)(icu::StringEnumeration *, int *, UErrorCode *))(*(void *)a1 + 40LL))( a1,  &v6,  a2);
  return icu::StringEnumeration::setChars(a1, v4, v6, a2);
}

uint64_t sub_1807DCB9C(uint64_t result)
{
  *(void *)(result + 128) = *(void *)(result + 120);
  return result;
}

uint64_t sub_1807DCBA8(uint64_t a1)
{
  unsigned int v1 = *(const char **)(a1 + 120);
  if (!*v1) {
    return 0LL;
  }
  LODWORD(v2) = 0;
  do
  {
    else {
      uint64_t v2 = v2;
    }
    uint64_t v3 = &v1[strlen(v1)];
    int v4 = *((unsigned __int8 *)v3 + 1);
    unsigned int v1 = v3 + 1;
  }

  while (v4);
  return v2;
}

char *sub_1807DCC00(uint64_t a1, _DWORD *a2, int *a3)
{
  if (*a3 <= 0)
  {
    int v8 = *(_BYTE **)(a1 + 128);
    if (*v8)
    {
      *(void *)(a1 + 128) = &v8[(int)(strlen(*(const char **)(a1 + 128)) + 1)];
      int v4 = uloc_toUnicodeLocaleKey((uint64_t)v8);
      if (v4)
      {
        if (!a2) {
          return v4;
        }
LABEL_9:
        int v5 = strlen(v4);
        goto LABEL_4;
      }

      while (*a3 <= 0)
      {
        uint64_t v10 = *(_BYTE **)(a1 + 128);
        if (!*v10) {
          break;
        }
        *(void *)(a1 + 128) = &v10[(int)(strlen(*(const char **)(a1 + 128)) + 1)];
        int v11 = uloc_toUnicodeLocaleKey((uint64_t)v10);
        if (v11)
        {
          int v4 = v11;
          if (a2) {
            goto LABEL_9;
          }
          return v4;
        }
      }
    }
  }

  int v4 = 0LL;
  if (a2)
  {
    int v5 = 0;
LABEL_4:
    *a2 = v5;
  }

  return v4;
}

BOOL sub_1807DCCD4(const char *a1, const char *a2)
{
  return strcmp(a1, a2) == 0;
}

uint64_t sub_1807DCCF0(uint64_t a1, int a2, int a3, int a4, icu::UVector *a5, int *a6)
{
  uint64_t v85 = *MEMORY[0x1895F89C0];
  if (*a6 > 0) {
    goto LABEL_2;
  }
  int v8 = (UErrorCode *)a6;
  int v9 = a4;
  uint64_t v10 = (char **)a1;
  if (a3)
  {
    if (!*(void *)(a1 + 16)) {
      goto LABEL_2;
    }
  }

  if (!a4)
  {
    int v11 = 1;
    if (a2) {
      goto LABEL_9;
    }
LABEL_12:
    size_t v12 = "und";
    if (!a3) {
      goto LABEL_10;
    }
    goto LABEL_13;
  }

  int v11 = *(_DWORD *)(a1 + 40);
  if (!v11) {
    goto LABEL_2;
  }
  if (!a2) {
    goto LABEL_12;
  }
LABEL_9:
  size_t v12 = *(const char **)a1;
  if (!a3)
  {
LABEL_10:
    uint64_t v13 = 0LL;
    goto LABEL_14;
  }

LABEL_2:
  char v6 = 0;
  return v6 & 1;
}

    if (v11 != 15 && v11 > 0) {
      return __src;
    }
LABEL_18:
    *a11 = 1;
    return __src;
  }

  int v8 = *((_DWORD *)v7 + 2);
  while (1)
  {
    int v9 = __OFSUB__(v8--, 1);
    if (v8 < 0 != v9) {
      break;
    }
    uint64_t v10 = (void *)icu::UVector::elementAt(*((icu::UVector **)this + 87), v8);
  }

  int v23 = 0;
  sub_1807F82A0((int *)&v23);
  uint64_t v13 = (uint64_t *)v23;
  if ((int)v23 <= 0)
  {
    uint64_t v13 = (uint64_t *)qword_18C534DF8;
    uint64_t v15 = *(_DWORD *)(qword_18C534DF8 + 8);
    while (1)
    {
      int v9 = __OFSUB__(v15--, 1);
      if (v15 < 0 != v9) {
        break;
      }
      unint64_t v16 = icu::UVector::elementAt((icu::UVector *)qword_18C534DF8, v15);
      int v17 = (*(uint64_t (**)(uint64_t, unint64_t, const char *))(*(void *)v16 + 16LL))(v16, a3, a2);
      if (v17)
      {
        uint64_t v10 = (void *)v17;
        int v18 = (icu::UVector *)*((void *)this + 87);
        if (*((void *)v18 + 3)) {
          icu::UVector::adoptElement(v18, v10, &v22);
        }
        else {
          icu::UVector::addElement(v18, v10, &v22);
        }
        return v10;
      }
    }
  }

  unsigned int v14 = *((void *)this + 88);
  if (v14) {
    goto LABEL_12;
  }
  uint64_t v19 = icu::UMemory::operator new(v13, (icu::UMemory *)0x10, v12);
  char v20 = v19;
  if (v19)
  {
    sub_1807BE500(v19);
    *((void *)this + 88) = v20;
  }

  else
  {
    *((void *)this + 88) = 0LL;
    if (v22 < U_ILLEGAL_ARGUMENT_ERROR) {
      return 0LL;
    }
  }

  icu::UVector::insertElementAt(*((uint64_t (***)(void *))this + 87), v20, 0, &v22);
  unsigned int v14 = *((void *)this + 88);
  if (v22 < U_ILLEGAL_ARGUMENT_ERROR)
  {
LABEL_12:
    (*(void (**)(uint64_t, unint64_t))(*(void *)v14 + 40LL))(v14, a3);
    return (void *)*((void *)this + 88);
  }

  else
  {
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
    }
    uint64_t v10 = 0LL;
    *((void *)this + 88) = 0LL;
  }

  return v10;
}

  char v6 = *((_DWORD *)v5 + 2);
  while (1)
  {
    uint64_t v7 = __OFSUB__(v6--, 1);
    if (v6 < 0 != v7) {
      break;
    }
    int v8 = (void *)icu::UVector::elementAt(*((icu::UVector **)this + 70), v6);
  }

  uint64_t v10 = atomic_load((unsigned int *)&unk_18C534E30);
  if (v10 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_18C534E30))
  {
    uint64_t v27 = U_ZERO_ERROR;
    size_t v12 = icu::UMemory::operator new(v11, (icu::UMemory *)0x28, a2);
    if (v12)
    {
      qword_18C534E28 = (uint64_t)icu::UStack::UStack((uint64_t)v12, (uint64_t)sub_1807FB4EC, 0LL, (int *)&v27);
      if (v27 <= U_ZERO_ERROR)
      {
        unsigned int v14 = icu::UMemory::operator new((uint64_t *)v27, (icu::UMemory *)0x10, v13);
        uint64_t v15 = v14;
        if (v14) {
          sub_1807BE688(v14);
        }
        if (*(void *)(qword_18C534E28 + 24)) {
          icu::UVector::adoptElement((icu::UVector *)qword_18C534E28, v15, &v27);
        }
        else {
          icu::UVector::addElement((icu::UVector *)qword_18C534E28, v15, &v27);
        }
        unint64_t v16 = (void *)uprv_svc_hook();
        if (v16)
        {
          if (*(void *)(qword_18C534E28 + 24)) {
            icu::UVector::adoptElement((icu::UVector *)qword_18C534E28, v16, &v27);
          }
          else {
            icu::UVector::addElement((icu::UVector *)qword_18C534E28, v16, &v27);
          }
        }
      }
    }

    else
    {
      qword_18C534E28 = 0LL;
    }

    sub_180820C94(4u, (uint64_t)sub_1807FB500);
    icu::umtx_initImplPostInit((unsigned int *)&unk_18C534E30);
  }

  int v17 = (uint64_t *)qword_18C534E28;
  if (qword_18C534E28)
  {
    int v18 = *(_DWORD *)(qword_18C534E28 + 8);
    while (1)
    {
      uint64_t v7 = __OFSUB__(v18--, 1);
      if (v18 < 0 != v7) {
        break;
      }
      uint64_t v19 = icu::UVector::elementAt((icu::UVector *)qword_18C534E28, v18);
      char v20 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v19 + 16LL))(v19, a2, 0LL);
      if (v20)
      {
        int v8 = (void *)v20;
        uint64_t v21 = (icu::UVector *)*((void *)this + 70);
        if (*((void *)v21 + 3)) {
          icu::UVector::adoptElement(v21, v8, &v26);
        }
        else {
          icu::UVector::addElement(v21, v8, &v26);
        }
        return v8;
      }
    }
  }

  __int128 v22 = *((void *)this + 71);
  if (v22) {
    goto LABEL_32;
  }
  int v23 = icu::UMemory::operator new(v17, (icu::UMemory *)0x10, a2);
  unint64_t v24 = v23;
  if (v23)
  {
    sub_1807BE500(v23);
    *((void *)this + 71) = v24;
  }

  else
  {
    *((void *)this + 71) = 0LL;
    if (v26 <= U_ZERO_ERROR) {
      UErrorCode v26 = U_MEMORY_ALLOCATION_ERROR;
    }
  }

  icu::UVector::insertElementAt(*((uint64_t (***)(void *))this + 70), v24, 0, &v26);
  __int128 v22 = *((void *)this + 71);
  if (v26 < U_ILLEGAL_ARGUMENT_ERROR)
  {
LABEL_32:
    (*(void (**)(uint64_t, unint64_t))(*(void *)v22 + 40LL))(v22, a2);
    return (void *)*((void *)this + 71);
  }

  else
  {
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8LL))(v22);
    }
    int v8 = 0LL;
    *((void *)this + 71) = 0LL;
  }

  return v8;
}

  int v11 = *(_BYTE *)(result + 64);
  uint64_t result = (uint64_t)sub_180825DD4((void *)result, (unint64_t *)&v45, v7, 1, a2);
  if (*(_DWORD *)(v9 + 108))
  {
    size_t v12 = *a2;
    goto LABEL_5;
  }

  size_t v12 = *a2;
  if (*(_DWORD *)(v9 + 104))
  {
LABEL_5:
    if (v12 >= 1) {
      goto LABEL_18;
    }
    goto LABEL_6;
  }

  if (v12 > 0) {
    goto LABEL_18;
  }
  if (*(_BYTE *)(v9 + 112))
  {
    *a2 = 18;
    unint64_t v16 = a1[1];
    *(_DWORD *)(v16 + 284) = 2;
    *(_BYTE *)(v16 + 64) = v11 + (_BYTE)v45 - (_BYTE)v5;
LABEL_18:
    a1[4] = v8;
    a1[2] = v45;
    *(_BYTE *)(v9 + 112) = 0;
    return result;
  }

  int v8 = *(void (**)(uint64_t))(a1 + 32);
  if (v8) {
    int v9 = a2 == 0;
  }
  else {
    int v9 = 1;
  }
  if (!v9) {
    v8(a2);
  }
  uint64_t v10 = *(void (**)(uint64_t))(a1 + 40);
  if (v10) {
    int v11 = a3 == 0;
  }
  else {
    int v11 = 1;
  }
  if (!v11) {
    v10(a3);
  }
  return 0LL;
}

  else {
    unsigned int v14 = *(unsigned __int16 *)(a1 + 592) >> 5;
  }
  int v17 = icu::UnicodeString::doIndexOf(a1 + 584, 0x4Au, 0, v14);
  if (v32 || v17 != -1)
  {
    unint64_t v34 = 0u;
    unsigned int v35 = 0u;
    BOOL v37 = 0LL;
    BOOL v36 = 0u;
    unint64_t v33 = off_18971B688;
    LOWORD(v34) = 2;
    icu::DateIntervalFormat::adjustFieldWidth( a3,  v10,  &v38,  (const icu::UnicodeString *)v32,  v17 != -1,  (uint64_t)&v33,  v18);
    char v20 = icu::DateIntervalInfo::getDefaultOrder(*(icu::DateIntervalInfo **)(a1 + 328));
    icu::DateIntervalFormat::setIntervalPattern(a1, a2, (uint64_t)&v33, v20);
    icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)&v33);
    if (a6) {
      goto LABEL_15;
    }
LABEL_28:
    __int128 v22 = 0LL;
    goto LABEL_29;
  }

  uint64_t v19 = icu::DateIntervalInfo::getDefaultOrder(*(icu::DateIntervalInfo **)(a1 + 328));
  icu::DateIntervalFormat::setIntervalPattern(a1, a2, (uint64_t)&v38, v19);
  if (!a6) {
    goto LABEL_28;
  }
LABEL_15:
  uint64_t v15 = *(unsigned __int16 *)(a6 + 8);
  __int128 v22 = 1LL;
LABEL_29:
  icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v38);
  return v22;
}

  if (lpsrc) {
    return (uint64_t *)(*(uint64_t (**)(icu::TimeZoneRule *))(*(void *)lpsrc + 8LL))(lpsrc);
  }
  return this;
}

  ures_close(v6);
}

  int v4 = (void (*)(void *))icu::UVector::setDeleter(a1, (void (*)(void *))sub_18099FCFC);
  icu::UVector::removeAllElements((uint64_t)a1);
  if (*(int *)a2 <= 0)
  {
    icu::UVector::setDeleter(a1, (void (*)(void *))sub_18099FF40);
    while (SDWORD2(v16[0]) >= 1)
    {
      int v5 = (void *)icu::UVector::orphanElementAt((icu::UVector *)v16, 0);
      icu::UVector::adoptElement(a1, v5, a2);
      if (*(int *)a2 >= 1)
      {
        icu::UVector::removeAllElements((uint64_t)a1);
        break;
      }
    }
  }

  icu::UVector::setDeleter(a1, v4);
  icu::UVector::~UVector((icu::UVector *)v16);
}

  v28[0] = (uint64_t (**)(void, void, void *, int *))off_18972BF18;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8LL))(v29);
  }
LABEL_4:
  nullsub_17(v28);
  return v10;
}

  uint64_t v15 = 0;
  int v4 = *(void *)a1;
  *(void *)(v4 + 32) = 0xFFFFFFFFLL;
  if (*(_BYTE *)(v4 + 40)) {
    int v5 = *(unsigned int *)(v4 + 8);
  }
  else {
    int v5 = 0LL;
  }
  ucol_setOffset(*(void *)(a1 + 3144), v5, (UErrorCode *)&v15);
  return 0LL;
}

uint64_t sub_1807DD418(uint64_t a1, uint64_t a2, uint64_t a3, icu::CharString *a4, UErrorCode *a5)
{
  uint64_t result = uhash_get(*(void *)(*(void *)(a1 + 72) + 40LL), a2);
  if (result)
  {
    int v8 = (const char *)result;
    int v9 = strchr((const char *)result, 32);
    if (v9) {
      size_t v10 = v9 - v8;
    }
    else {
      size_t v10 = strlen(v8);
    }
    if (v10 - 2 <= 6)
    {
      icu::CharString::append(a4, v8, v10, a5);
      if (v10 == 2) {
        icu::CharString::append(a4, "zzzz", 4, a5);
      }
    }

    return 1LL;
  }

  return result;
}

BOOL sub_1807DD4CC(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v44 = *MEMORY[0x1895F89C0];
  if (*(int *)a3 <= 0)
  {
    int v6 = *(_DWORD *)(a1 + 56);
    uint64_t v7 = *(char **)a1;
    TKeyStart = ultag_getTKeyStart(*(const char **)a1);
    int v9 = TKeyStart;
    int v10 = (_DWORD)TKeyStart + ~(_DWORD)v7;
    if (!TKeyStart) {
      int v10 = v6;
    }
    if (TKeyStart == v7) {
      int v11 = 0;
    }
    else {
      int v11 = v10;
    }
    v28[0] = 0LL;
    v28[1] = 0LL;
    icu::CharStringByteSink::CharStringByteSink(v28, a2);
    if (v11 >= 1)
    {
      __int128 v42 = 0u;
      __int128 v43 = 0u;
      __int128 v40 = 0u;
      __int128 v41 = 0u;
      __int128 v38 = 0u;
      __int128 v39 = 0u;
      __int128 v36 = 0u;
      __int128 v37 = 0u;
      __int128 v34 = 0u;
      __int128 v35 = 0u;
      __int128 v32 = 0u;
      __int128 v33 = 0u;
      *(_OWORD *)char v30 = 0u;
      __int128 v31 = 0u;
      icu::LocaleBuilder::LocaleBuilder(v29);
      size_t v12 = icu::LocaleBuilder::setLanguageTag(v29, v7, v11);
      icu::LocaleBuilder::build((icu::LocaleBuilder *)v12, a3, (icu::Locale *)v30);
      icu::LocaleBuilder::~LocaleBuilder((icu::LocaleBuilder *)v29);
      icu::Locale::canonicalize((const char **)v30, a3);
      if (*(int *)a3 > 0)
      {
LABEL_13:
        icu::Locale::~Locale((icu::Locale *)v30);
LABEL_25:
        BOOL v3 = 0LL;
LABEL_26:
        icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v28);
        return v3;
      }

      if (BYTE8(v43))
      {
        *a3 = U_ILLEGAL_ARGUMENT_ERROR;
        goto LABEL_13;
      }

      ulocimp_toLanguageTag(*((char **)&v32 + 1), (uint64_t)v28, 0, (int *)a3);
      T_CString_toLowerCase(*(unsigned __int8 **)a2);
      icu::Locale::~Locale((icu::Locale *)v30);
    }

    if (v9)
    {
      *(void *)&__int128 v32 = 0LL;
      *(_OWORD *)char v30 = 0u;
      __int128 v31 = 0u;
      icu::UVector::UVector((icu::UVector *)v30, a3);
      if (*(int *)a3 > 0)
      {
LABEL_24:
        icu::UVector::~UVector((icu::UVector *)v30);
        goto LABEL_25;
      }

      do
      {
        uint64_t v15 = strchr(v9, 45);
        if (!v15) {
          goto LABEL_23;
        }
        uint64_t v13 = ultag_getTKeyStart(v15);
        unsigned int v14 = v13;
        if (v13) {
          *(v13 - 1) = 0;
        }
        icu::UVector::insertElementAt((uint64_t (**)(void *))v30, v9, v30[2], a3);
        int v9 = v14;
      }

      while (v14);
      icu::UVector::sort((uint64_t)v30, (uint64_t)j__strcmp_1, (int *)a3);
      if (v30[2] >= 1)
      {
        unsigned int v17 = 0;
        while (1)
        {
          int v18 = (const char *)icu::UVector::elementAt((icu::UVector *)v30, v17);
          uint64_t v19 = strchr(v18, 45);
          if (!v19) {
            break;
          }
          *uint64_t v19 = 0;
          char v20 = v19 + 1;
          icu::StringPiece::StringPiece((icu::StringPiece *)&v26, v18);
          uint64_t v21 = icu::CharString::append((icu::CharString *)a2, v26, v27, a3);
          icu::CharString::append(v21, 45, a3);
          uint64_t v22 = sub_180850588((uint64_t)v18, v20, 0LL, 0LL);
          if (v22) {
            int v23 = (const char *)v22;
          }
          else {
            int v23 = v20;
          }
          icu::StringPiece::StringPiece((icu::StringPiece *)&v24, v23);
          icu::CharString::append((icu::CharString *)a2, v24, v25, a3);
        }

LABEL_23:
        *a3 = U_ILLEGAL_ARGUMENT_ERROR;
        goto LABEL_24;
      }

  unsigned int v14 = *(unsigned __int16 *)(*(void *)(*((void *)this + 4) + 8LL) + 2LL * (int)v5);
  return 0LL;
}

  int v25 = *(_DWORD *)(a1 + 52);
LABEL_24:
  u_strToUTF8WithSub( (char *)v19 + v19[10],  destCapacity[0],  pDestLength,  v24,  v25,  65533,  0LL,  *(UErrorCode **)(a1 + 16));
  else {
    return v19;
  }
}

    int v6 = a2[1] + 1;
    a2[1] = v6;
    if (v6 >= v4)
    {
      int v6 = *a2 + 1;
      goto LABEL_25;
    }
  }

  if (v7 >= 1)
  {
    size_t v12 = 0LL;
    uint64_t v13 = *(void *)(v10 + 40);
    unsigned int v14 = *(int *)(v13 + 8);
    uint64_t v15 = *(void *)(v11 + 40);
    unint64_t v16 = *(int *)(v15 + 8);
    while (1)
    {
      unsigned int v17 = 0;
      int v18 = 0;
      if (v17 != v18 && (v17 != *a2 && v17 != a2[1] || v18 != *a2 && v18 != a2[1])) {
        break;
      }
      if (v8 == ++v12) {
        return 1LL;
      }
    }

    goto LABEL_23;
  }

  return 1LL;
}

      int v18 = u_charType(v15);
      uint64_t v19 = 1;
      if (((1LL << v18) & 0x1C0) == 0)
      {
        unsigned int v14 = v13;
        goto LABEL_26;
      }
    }

    if (v14 >= 1)
    {
      uint64_t v13 = v14;
      goto LABEL_23;
    }

    uint64_t v19 = 0;
LABEL_26:
    char v20 = v14;
    do
      *a3++ = v8[v20++];
    while (v20 < v12);
    size_t v12 = v14;
  }

  while ((v19 & 1) != 0);
  return v7;
}

    *a6 = 15;
    return v7;
  }

  if (v9 == 2)
  {
    if (a4 >= (int)a2)
    {
      __int128 v36 = 0;
      __int128 v37 = 0;
      do
      {
        __int128 v38 = v36 + 1LL;
        __int128 v39 = v8[v36];
        if ((v39 & 0xFC00) != 0xD800 || (_DWORD)v38 == (_DWORD)v7)
        {
          ++v36;
        }

        else
        {
          __int128 v41 = v8[v38];
          __int128 v42 = (v41 & 0xFC00) == 56320;
          __int128 v43 = (v39 << 10) - 56613888 + v41;
          if (v42) {
            v36 += 2;
          }
          else {
            ++v36;
          }
          if (v42) {
            __int128 v39 = v43;
          }
        }

        uint64_t v44 = u_charMirror(v39);
        if (HIWORD(v44))
        {
          BOOL v46 = v37 + 1;
          a3[v37] = (v44 >> 10) - 10304;
          BOOL v45 = 2;
          LOWORD(v44) = v44 & 0x3FF | 0xDC00;
        }

        else
        {
          BOOL v45 = 1;
          BOOL v46 = v37;
        }

        v37 += v45;
        a3[v46] = v44;
      }

      while (v36 < (int)v7);
      return v7;
    }

    goto LABEL_23;
  }

  if (v9 != 8)
  {
    uint64_t v21 = 0LL;
    unint64_t v24 = a4;
    while (1)
    {
      int v25 = *v8;
      if ((v25 & 0xFC00) != 0xD800 || (_DWORD)v7 == 1)
      {
        int v27 = 1;
      }

      else
      {
        uint64_t v28 = v8[1];
        int v29 = (v28 & 0xFC00) == 56320;
        char v30 = (v25 << 10) - 56613888 + v28;
        if ((v28 & 0xFC00) == 0xDC00) {
          int v27 = 2;
        }
        else {
          int v27 = 1;
        }
        if (v29) {
          int v25 = v30;
        }
      }

      v8 += v27;
      LODWORD(v7) = v7 - v27;
      if (v25 >> 2 != 2051 && v25 - 8234 >= 5 && v25 - 8294 >= 4)
      {
        v24 -= v27;
        if (v24 < 0)
        {
          *a6 = 15;
          if ((int)v7 >= 1)
          {
            unint64_t v54 = v7 + 1;
            do
            {
              unsigned int v56 = *v8++;
              int32_t v55 = v56;
              uint64_t v57 = v56 - 8239;
              unsigned int v58 = (v56 & 0xFFFC) == 0x200C || v57 >= 0xFFFFFFFB;
              uint64_t v59 = v55 - 8298;
              int v61 = !v58 && v59 < 0xFFFFFFFC;
              v24 -= v61;
              --v54;
            }

            while (v54 > 1);
          }

          return (a4 - v24);
        }

        __int128 v33 = u_charMirror(v25);
        if (HIWORD(v33))
        {
          __int128 v35 = v21 + 1;
          a3[(int)v21] = (v33 >> 10) - 10304;
          __int128 v34 = 2;
          LOWORD(v33) = v33 & 0x3FF | 0xDC00;
        }

        else
        {
          __int128 v34 = 1;
          __int128 v35 = v21;
        }

        uint64_t v21 = (v21 + v34);
        a3[v35] = v33;
      }
    }
  }

  int v10 = a2 + 1;
  int v11 = a4;
  size_t v12 = a1;
  while (1)
  {
    unsigned int v14 = *v12++;
    uint64_t v13 = v14;
    uint64_t v15 = v14 - 8234;
    unint64_t v16 = v14 - 8294;
    unsigned int v17 = (v14 & 0xFFFC) != 0x200C && v15 >= 5;
    if (v17 && v16 >= 4) {
      break;
    }
    uint64_t v19 = v11;
LABEL_15:
    --v10;
    int v8 = v12;
    char v20 = __OFSUB__((_DWORD)v7, 1);
    LODWORD(v7) = v7 - 1;
  }

  uint64_t v19 = v11 - 1;
  if (v11 > 0)
  {
    *a3++ = v13;
    --v11;
    goto LABEL_15;
  }

  *a6 = 15;
  if ((int)v7 >= 2)
  {
    uint64_t v48 = 1LL;
    do
    {
      int v49 = v8[v48];
      unint64_t v50 = (v49 & 0xFFFC) == 0x200C || (v49 - 8239) >= 0xFFFFFFFB;
      size_t v51 = v49 - 8298;
      unint64_t v53 = !v50 && v51 < 0xFFFFFFFC;
      v19 -= v53;
      ++v48;
      --v10;
    }

    while (v10 > 2);
  }

  return (a4 - v19);
}

    *((void *)v6 + 3) = "UTF-8";
    return &unk_189714D50;
  }

    if (a5 != 12644
      && (a5 & 0xFFFFFFF0) != 0x2060
      && (a5 & 0xFFFFF000) != 0xE0000
      && (a5 - 119155) >= 8
      && (a5 & 0xFFFFFFFC) != 0x1BCA0
      && (a5 - 65520) >= 9
      && a5 != 65440
      && a5 != 65279
      && (a5 & 0xFFFFFFF0) != 0xFE00)
    {
      goto LABEL_3;
    }

            *a2 = 11;
            a1[2] = v3;
            return 0xFFFFLL;
          }

          BOOL v3 = a1[3];
          if (v20 > v3) {
            goto LABEL_23;
          }
          uint64_t result = sub_18083932C(v18, v20 - 1, 1);
          break;
      }
    }
  }

  return result;
}

    v16[0] = a2;
    v16[1] = a3 + 1;
    uint64_t v16[2] = 1114112;
    icu::UnicodeSet::add(this, v16, 2, 0);
    return this;
  }

  if (a2 == a3) {
    icu::UnicodeSet::add(this, a2);
  }
  return this;
}

        uint64_t v21 = *(_DWORD *)(v18 + 12);
        goto LABEL_24;
      }

      goto LABEL_99;
    }

    unsigned int v66 = v10;
    if ((int)v14 >= 1)
    {
      __int128 v37 = 0LL;
      __int128 v38 = 0;
      __int128 v39 = 0LL;
      while (1)
      {
        __int128 v40 = *(unsigned __int8 *)(*(void *)(a1 + 232) + v37);
        __int128 v41 = icu::UVector::elementAt(*(icu::UVector **)(a1 + 216), v37);
        __int128 v42 = *(unsigned __int16 *)(v41 + 8);
        if ((v42 & 0x11) != 0)
        {
          __int128 v43 = 0LL;
          if ((v42 & 0x8000) == 0) {
            goto LABEL_63;
          }
        }

        else if ((v42 & 2) != 0)
        {
          __int128 v43 = (unsigned __int16 *)(v41 + 10);
          if ((v42 & 0x8000) == 0)
          {
LABEL_63:
            uint64_t v44 = v42 >> 5;
            if (v42 >> 5) {
              goto LABEL_67;
            }
            goto LABEL_91;
          }
        }

        else
        {
          __int128 v43 = *(unsigned __int16 **)(v41 + 24);
          if ((v42 & 0x8000) == 0) {
            goto LABEL_63;
          }
        }

        uint64_t v44 = *(_DWORD *)(v41 + 12);
        if (v44)
        {
LABEL_67:
          if (v40 <= 0xFD) {
            LODWORD(v45) = v40;
          }
          else {
            LODWORD(v45) = v44;
          }
          BOOL v46 = v44 - v45;
          if ((int)v46 <= v9 && (int)v45 >= v38)
          {
            uint64_t v48 = (int)v44;
            int v49 = (int)v44 - 1LL;
            BOOL v45 = (int)v45;
            unint64_t v50 = v67 - (int)v44;
            size_t v51 = v44 + 1;
            do
            {
              if (v45 > v38 || (int)v46 > (int)v39)
              {
                int v52 = (int)v66 - v45;
                unint64_t v53 = &s[v52];
                unint64_t v54 = v51;
                int32_t v55 = v53;
                unsigned int v56 = v43;
                while (*v55 == *v56)
                {
                  ++v56;
                  ++v55;
                  if ((int)--v54 <= 1)
                  {
                    if ((v52 < 1 || (*(v53 - 1) & 0xFC00) != 0xD800 || (*v53 & 0xFC00) != 0xDC00)
                      && (v52 >= v50 || (v53[v49] & 0xFC00) != 0xD800 || (v53[v48] & 0xFC00) != 0xDC00))
                    {
                      __int128 v38 = v45;
                      goto LABEL_92;
                    }

                    break;
                  }
                }
              }

              BOOL v46 = (v46 + 1);
              uint64_t v22 = v45-- <= v38;
            }

            while (!v22);
          }
        }

      unsigned int v17 = *(_DWORD *)(v14 + 12);
LABEL_24:
      int v18 = v8 - v17;
      if ((int)v8 >= v17)
      {
        uint64_t v19 = &s[v18];
        char v20 = v17 + 1;
        uint64_t v21 = v19;
        while (*v21 == *v16)
        {
          ++v16;
          ++v21;
          if (--v20 <= 1)
          {
            if ((v18 < 1 || (*(v19 - 1) & 0xFC00) != 0xD800 || (*v19 & 0xFC00) != 0xDC00)
              && (a3 - v18 <= v17 || (v19[v17 - 1] & 0xFC00) != 0xD800 || (v19[v17] & 0xFC00) != 0xDC00))
            {
              return v8;
            }

            goto LABEL_34;
          }
        }
      }

      goto LABEL_34;
    }

      int v25 = (*(uint64_t (**)(char *))(*(void *)WordInstance + 104LL))(WordInstance);
      char v20 = v25;
      int v18 = (uint64_t *)a3[3];
    }

    unint64_t v24 = *((_DWORD *)v9 + 2);
LABEL_22:
    *(_DWORD *)(*((void *)v9 + 3) + 4LL * v24) = v20;
    ++*((_DWORD *)v9 + 2);
    goto LABEL_23;
  }

          while ((int)v11 - (int)v15 >= 2 && *a3 <= U_ZERO_ERROR)
          {
            unsigned int v17 = v15 - v11;
            int v4 = (v11 + (v17 >> 1));
            icu::Calendar::setTimeInMillis((uint64_t)a1, v10, a3);
            (*(void (**)(icu::Calendar *, uint64_t, uint64_t, UErrorCode *))(*(void *)a1 + 56LL))( a1,  a2,  v4,  a3);
            int v18 = icu::Calendar::getTimeInMillis(a1, a3);
            if (v18 >= a4) {
              int v11 = v4;
            }
            else {
              int v11 = v11;
            }
            if (v18 < a4) {
              LODWORD(v15) = v4;
            }
            if (v18 == a4) {
              return v4;
            }
          }

          goto LABEL_38;
        }
      }
    }

    else
    {
      if (*(int *)a3 > 0)
      {
        int v11 = 0LL;
        LODWORD(icu::LocaleBuilder::setScript((uint64_t)this, v11, v12) = 1;
        goto LABEL_8;
      }

      int v11 = 0LL;
      size_t v12 = 1LL;
      while (1)
      {
        int v4 = v12;
        icu::Calendar::setTimeInMillis((uint64_t)a1, v10, a3);
        (*(void (**)(icu::Calendar *, uint64_t, uint64_t, UErrorCode *))(*(void *)a1 + 56LL))( a1,  a2,  v12,  a3);
        char v20 = icu::Calendar::getTimeInMillis(a1, a3);
        if (v20 == a4) {
          break;
        }
        if (v20 > a4) {
          goto LABEL_8;
        }
        if ((_DWORD)v12 == 0x7FFFFFFF)
        {
          *a3 = U_ILLEGAL_ARGUMENT_ERROR;
          LODWORD(icu::LocaleBuilder::setScript((uint64_t)this, v11, v12) = 0x7FFFFFFF;
          goto LABEL_8;
        }

        else {
          size_t v12 = (2 * v12);
        }
        int v11 = v4;
        if (*(int *)a3 >= 1)
        {
LABEL_8:
          while ((int)v12 - (int)v11 >= 2 && *a3 <= U_ZERO_ERROR)
          {
            int v4 = v11 + ((v12 - v11) >> 1);
            icu::Calendar::setTimeInMillis((uint64_t)a1, v10, a3);
            (*(void (**)(icu::Calendar *, uint64_t, uint64_t, UErrorCode *))(*(void *)a1 + 56LL))( a1,  a2,  v4,  a3);
            unsigned int v14 = icu::Calendar::getTimeInMillis(a1, a3);
            if (v14 <= a4) {
              int v11 = v4;
            }
            else {
              int v11 = v11;
            }
            if (v14 > a4) {
              LODWORD(icu::LocaleBuilder::setScript((uint64_t)this, v11, v12) = v4;
            }
            if (v14 == a4) {
              return v4;
            }
          }

          goto LABEL_38;
        }
      }
    }
  }

  else
  {
    int v4 = 0LL;
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
  }

  return v4;
}

  if ((unsigned __int16)v37 < 0x20u
    || (char v20 = icu::UnicodeString::char32At((uint64_t *)(unsigned __int16)v37, (icu::UnicodeString *)&v36, 0),
        uint64_t v22 = icu::UnicodeString::char32At(v21, (icu::UnicodeString *)&v31, 0),
        (*(unsigned int (**)(void, uint64_t *))(**((void **)this + 1) + 120LL))( *((void *)this + 1),  v20))
    && (*(unsigned int (**)(void, uint64_t *))(**((void **)this + 1) + 120LL))(*((void *)this + 1), v22))
  {
    (*(void (**)(void, uint64_t, UChar **, UChar **, void (***)(icu::UnicodeString *__hidden), char *, UErrorCode *))(**((void **)this + 7) + 32LL))( *((void *)this + 7),  a2,  &v36,  &v31,  &v26,  (char *)this + 48,  a4);
    int v8 = (void *)*(unsigned int *)a4;
    *((_DWORD *)this + 18) = v9;
  }

  else
  {
    int v8 = (void *)*(unsigned int *)a4;
    if ((int)v8 <= 0)
    {
      *a4 = U_INVALID_FORMAT_ERROR;
      *((void *)this + 6) = "in 'prefix|str', prefix and str must each start with an NFC boundary";
      int v8 = (void *)*((void *)this + 5);
      if (v8) {
        icu::CollationRuleParser::setErrorContext((char *)this);
      }
    }
  }

    *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  }

  return a1;
}

  uint64_t v13 = v18;
  if (v18) {
    goto LABEL_24;
  }
  return a1;
}

    uint64_t v15 = (unsigned __int16)v39;
  }

    uint64_t v15 = icu::number::impl::DecimalQuantity::toLong((icu::number::impl::DecimalQuantity *)v23, 0);
    if (v15 == 5) {
      unint64_t v16 = 7;
    }
    else {
      unint64_t v16 = 5;
    }
    if (v15 == 1) {
      unint64_t v16 = 6;
    }
    else {
      LOWORD(v17) = 0;
    }
    if (v15) {
      int v18 = v16;
    }
    else {
      int v18 = 10;
    }
    *(_DWORD *)a2 = v18;
    uint64_t v19 = 65810LL;
    if (v15) {
      uint64_t v19 = v15;
    }
    *(void *)(a2 + 8) = v19;
    *(_WORD *)(a2 + 16) = v10;
    if (v15) {
      LOWORD(v19) = v17;
    }
    *(_WORD *)(a2 + 18) = v19;
    *(_DWORD *)(a2 + 20) = 0;
    *(_DWORD *)(a2 + 24) = 0;
  }

  icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v23);
LABEL_9:
  if (BYTE4(v28[1])) {
    uprv_free(v28[0]);
  }
}

    icu::RegexCompile::error(this, 66308);
    int v4 = 0LL;
    goto LABEL_24;
  }

  int v8 = DWORD1(v13);
  if (DWORD1(v13) > 0x63) {
    goto LABEL_23;
  }
LABEL_25:
  icu::UnicodeString::extract((uint64_t)&v12, 0, v8, (char *)v10, 100);
  int v4 = u_charFromName(U_UNICODE_CHAR_NAME, (const char *)v10, *((UErrorCode **)this + 1));
  icu::RegexCompile::nextChar((uint64_t)this, v2);
LABEL_24:
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)&v12);
  return v4;
}

            v24[v23] = v28;
            if (v26 < v81)
            {
              __int128 v31 = v80 + v23++;
              if (v31 < v25) {
                continue;
              }
            }

            unsigned int v14 = v75;
            uint64_t v13 = v76 + v26;
            size_t v12 = v73;
            a3 = v74;
            int v9 = v72;
            break;
          }
        }

        int v11 = this[15];
        if (v14 == v11)
        {
          int v64 = v13 + 1;
          LODWORD(icu::LocaleBuilder::setScript((uint64_t)this, v11, v12) = v13;
          if (v13 + 1 < v70)
          {
            int v65 = a3[v64];
            if (v65)
            {
              unsigned int v66 = utext_nativeLength(a3[v64]);
              utext_replace(v65, 0LL, v66, &word_180A3C8B4, 0, a5);
            }

            else
            {
              a3[v64] = utext_openUChars(0LL, 0LL, 0LL, a5);
            }

            LODWORD(icu::LocaleBuilder::setScript((uint64_t)this, v11, v12) = v13 + 1;
          }

          return (v12 + 1);
        }
      }

      if (!v9->chunkNativeStart && (unsigned int v56 = this[6], v56 == v9->chunkNativeLimit) && v56 == v9->nativeIndexingLimit)
      {
        uint64_t v57 = a3[v13];
        if (v57)
        {
          unsigned int v58 = utext_nativeLength(a3[v13]);
          utext_replace(v57, 0LL, v58, &v9->chunkContents[v14], *((_DWORD *)this + 30) - v14, a5);
        }

        else
        {
          memset(&ut, 0, sizeof(ut));
          unsigned int v68 = &v9->chunkContents[v14];
          int v69 = this[15] - v14;
          ut.magic = 878368812;
          ut.int sizeOfStruct = 144;
          utext_openUChars(&ut, v68, v69, a5);
          a3[v13] = utext_clone(0LL, &ut, 1, 0, a5);
          utext_close(&ut);
        }
      }

      else
      {
        status = U_ZERO_ERROR;
        uint64_t v59 = utext_extract(v9, v14, this[15], 0LL, 0, &status);
        unsigned int v60 = (UChar *)uprv_malloc(2LL * (v59 + 1));
        if (v60)
        {
          int v61 = v60;
          utext_extract(v9, v14, this[15], v60, v59 + 1, a5);
          uint64_t v62 = a3[v13];
          if (v62)
          {
            int v63 = utext_nativeLength(a3[v13]);
            utext_replace(v62, 0LL, v63, v61, v59, a5);
          }

          else
          {
            memset(&ut, 0, sizeof(ut));
            ut.magic = 878368812;
            ut.int sizeOfStruct = 144;
            utext_openUChars(&ut, v61, v59, a5);
            a3[v13] = utext_clone(0LL, &ut, 1, 0, a5);
            utext_close(&ut);
          }

          uprv_free(v61);
        }

        else
        {
LABEL_82:
          *a5 = U_MEMORY_ALLOCATION_ERROR;
        }
      }

          if (*(_BYTE *)(v1 + 795)) {
            this = icu::UnicodeString::setCharAt((icu::UnicodeString *)(v1 + 352), v4, 32);
          }
          goto LABEL_26;
        }

        if (v10 == 8239) {
          goto LABEL_23;
        }
      }

      size_t v12 = 0LL;
      *(_DWORD *)a2 = v9;
      return v12;
    }
  }

  if (a3)
  {
    uint64_t v15 = sub_18099EFA4((uint64_t)v8, 0LL);
    unint64_t v16 = sub_18099EFA4(v14, 0LL);
    size_t v12 = (UChar **)v16;
    if (v15 && v16)
    {
      int32_t v55 = 40;
      int v18 = icu::UnicodeString::doAppend((uint64_t)(v16 + 1), (uint64_t)&v55, 0, 1LL);
      uint64_t v19 = (icu::UnicodeString *)(v15 + 1);
      char v20 = *((unsigned __int16 *)v15 + 8);
      uint64_t v21 = (__int16)v20;
      uint64_t v22 = v20 >> 5;
      if (v21 >= 0) {
        int v23 = v22;
      }
      else {
        int v23 = *((unsigned int *)v15 + 5);
      }
      unint64_t v24 = icu::UnicodeString::doAppend(v18, (const icu::UnicodeString *)(v15 + 1), 0, v23);
      unsigned int v56 = 41;
      icu::UnicodeString::doAppend(v24, (uint64_t)&v56, 0, 1LL);
      if (v14)
      {
        UErrorCode v26 = (UChar **)(v14 + 200);
LABEL_37:
        icu::UnicodeString::operator=(v12 + 17, v26);
        goto LABEL_38;
      }

      goto LABEL_38;
    }

  uint64_t v19 = *(_DWORD *)(a1 + 12);
  if ((v19 & 0x20) != 0)
  {
    uint64_t v44 = 0u;
    BOOL v47 = 0LL;
    BOOL v46 = 0u;
    BOOL v45 = 0u;
    __int128 v43 = off_18971B688;
    LOWORD(v44) = 2;
    (*(void (**)(uint64_t, uint64_t, void (***)(icu::UnicodeString *__hidden), UErrorCode *))(*(void *)qword_18C535D40 + 24LL))( qword_18C535D40,  a2,  &v43,  a4);
    if ((v44 & 0x8000u) == 0LL) {
      char v20 = (unsigned __int16)v44 >> 5;
    }
    else {
      char v20 = DWORD1(v44);
    }
    __int128 v42 = 0LL;
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    char v30 = 0u;
    __int128 v31 = 0u;
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v30);
    if (v20 >= 1)
    {
      uint64_t v22 = 0;
      int v23 = 0;
      while (2)
      {
        unint64_t v24 = 1;
        while (1)
        {
          int v25 = icu::UnicodeString::char32At(v21, (icu::UnicodeString *)&v43, v23);
          UErrorCode v26 = v25;
          int v27 = v25 < 0x10000 ? 1 : 2;
          v23 += v27;
          if (!v22) {
            goto LABEL_43;
          }
          if ((v24 & 1) != 0) {
            icu::UnicodeSet::add((icu::UnicodeSet *)&v30, v22);
          }
          if (icu::UnicodeSet::contains((icu::UnicodeSet *)&v30, v26))
          {
            v9 |= 0x20u;
            goto LABEL_46;
          }

          icu::UnicodeSet::add((icu::UnicodeSet *)&v30, v26);
          unint64_t v24 = 0;
          if (v23 >= v20) {
            goto LABEL_46;
          }
        }

        if ((v24 & 1) == 0) {
          icu::UnicodeSet::clear((icu::UnicodeSet *)&v30);
        }
        UErrorCode v26 = 0;
LABEL_43:
        uint64_t v22 = v26;
        if (v23 < v20) {
          continue;
        }
        break;
      }
    }

        uint64_t v15 = *((_DWORD *)this + 103);
        *((_DWORD *)this + 100) = v15;
        *((_DWORD *)this + 104) = v15;
LABEL_24:
        unint64_t v16 = 1;
        goto LABEL_25;
      }

      if (v5) {
        goto LABEL_23;
      }
      unsigned int v17 = *((_DWORD *)this + 100);
      *((_DWORD *)this + 104) = v17;
      if (v17 == *((_DWORD *)this + 103)) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = 2;
      }
LABEL_25:
      *((_DWORD *)this + 102) = v16;
    }
  }

  uint64_t v13 = *((int *)this + 100);
  if ((_DWORD)v13 == *((_DWORD *)this + 103)) {
    goto LABEL_24;
  }
  int v18 = (const uint8_t *)*((void *)this + 49);
  uint64_t v19 = v13 - 1;
  *((_DWORD *)this + 100) = v19;
  char v20 = (char)v18[v19];
  CharSafeBody = v20;
  if (v20 < 0) {
    return utf8_prevCharSafeBody(v18, 0, v4, v20, -3);
  }
  return CharSafeBody;
}

LABEL_37:
      icu::UVector::~UVector((icu::UVector *)v30);
    }

    BOOL v3 = *a3 < U_ILLEGAL_ARGUMENT_ERROR;
    goto LABEL_26;
  }

  return 0LL;
}

    uint64_t v21 = v16[1];
    if (v21)
    {
      uint64_t v22 = *(void *)(a1 + 488);
      int v23 = *(unsigned int *)(v22 + 40);
      else {
        LODWORD(v24) = (*(uint64_t (**)(void))(*(void *)(v22 + 56) + 64LL))();
      }
      sub_1807FAF7C(v42, v21, v24);
    }

    if (!v15) {
      break;
    }
    if (v13)
    {
      int v27 = *(UText **)(a1 + 488);
      uint64_t v28 = v27->chunkOffset;
      if ((int)v28 >= v27->chunkLength || (uint64_t v7 = v27->chunkContents[v28], v7 >> 11 > 0x1A))
      {
        uint64_t v7 = utext_next32(v27);
        int v10 = 1;
      }

      else
      {
        v27->chunkOffset = v28 + 1;
        int v10 = 1;
      }

      goto LABEL_11;
    }

    if (v10 <= 1) {
      int v10 = 1;
    }
  }

  int v8 = v39;
  int v29 = *(UText **)(a1 + 488);
  if ((_DWORD)v39 == v35)
  {
    char v30 = v35 - v29->chunkNativeStart;
    if (v30 < 0 || v30 >= v29->nativeIndexingLimit || v29->chunkContents[v30] >> 10 > 0x36u)
    {
      utext_setNativeIndex(v29, v35);
      int v29 = *(UText **)(a1 + 488);
      LODWORD(v30) = v29->chunkOffset;
    }

    else
    {
      v29->chunkOffset = v30;
    }

    if ((int)v30 >= v29->chunkLength || v29->chunkContents[(int)v30] >> 11 > 0x1Au)
    {
      utext_next32(v29);
      int v29 = *(UText **)(a1 + 488);
      __int128 v31 = v29->chunkOffset;
    }

    else
    {
      __int128 v31 = v30 + 1;
      v29->chunkOffset = v31;
    }

    if (v31 <= v29->nativeIndexingLimit)
    {
      int v8 = v29->chunkNativeStart + v31;
    }

    else
    {
      int v8 = ((uint64_t (*)(void))v29->pFuncs->mapOffsetToNative)();
      int v29 = *(UText **)(a1 + 488);
    }
  }

  __int128 v32 = (int)v8;
  __int128 v33 = (int)v8 - v29->chunkNativeStart;
  if (v33 >= 0 && v33 < v29->nativeIndexingLimit && v29->chunkContents[v33] >> 10 <= 0x36u) {
    goto LABEL_74;
  }
LABEL_79:
  utext_setNativeIndex(v29, v32);
  return v8;
}

      int v18 = v20 + 2;
    }

    if (v9 != 8205)
    {
      if (v9 - 2304 > 0x47F)
      {
        int v29 = 0xFFFF;
        goto LABEL_58;
      }

      if (v9 - 2406 > 0xFFFFFFFD)
      {
        __int128 v32 = 0;
      }

      else
      {
        else {
          char v30 = v9 - 2177;
        }
        unint64_t v16 = v30 >> 7;
        __int128 v31 = v30 & 0xFF80;
        if ((v30 & 0xFF80) == *(unsigned __int16 *)(v15 + 6) && !*(_BYTE *)(v15 + 24))
        {
          __int128 v32 = 0;
        }

        else
        {
          *(_WORD *)(v15 + 6) = v31;
          *(_DWORD *)(v15 + 12) = dword_180A260D0[3 * (unsigned __int16)(v30 >> 7) + 1];
          *(_BYTE *)(v15 + 24) = 0;
          __int128 v32 = 1;
        }

        if ((v30 & 0xFF80) == 0x100)
        {
          if (v9 == 2672)
          {
            int v9 = 2562;
          }

          else if (v9 == 2673)
          {
            int v9 = 2673;
            *(_WORD *)(v15 + 2) = 2673;
          }
        }

        v9 -= v31;
      }

      __int128 v33 = word_180A2647C[v9];
      if ((*(_DWORD *)(v15 + 12) & byte_180A263AC[v9]) == 0
        && (*(_WORD *)(v15 + 6) != 768 || v9 != 2353))
      {
        __int128 v33 = -1;
      }

      int v29 = v33;
      if (!v32)
      {
LABEL_101:
        if (v9 == 2417 && *(_WORD *)(v15 + 6) == 256)
        {
LABEL_113:
          int v6 = (unsigned __int16 *)((char *)v19 + v20 + 2);
          goto LABEL_137;
        }

        int v11 = v19;
        if ((v10 & 0x80000000) == 0)
        {
LABEL_33:
          char v20 = (v18 - v11);
          if ((int)v20 >= (int)v10)
          {
LABEL_40:
            if ((int)v9 > (int)((v13 - v10) ^ 0x7FFFFFFF))
            {
              icu::UnicodeString::setToBogus((icu::UnicodeString *)v6);
              return v6;
            }

            uint64_t v21 = v12 & 2;
            if ((v12 & 2) != 0) {
              uint64_t v22 = (const UChar *)(v6 + 10);
            }
            else {
              uint64_t v22 = *(const UChar **)(v6 + 24);
            }
            if ((v12 & 0x19) == 0)
            {
              if ((v12 & 4) != 0)
              {
                int v25 = atomic_load((unsigned int *)(*(void *)(v6 + 24) - 4LL));
                int v23 = v25 == 1;
              }

              else
              {
                int v23 = 1;
              }

              if (v23 && v22 < &v16[(int)v9] && v16 < &v22[v13])
              {
                memset(&dest[8], 0, 48);
                __int128 v37 = 0LL;
                *(void *)dest = off_18971B688;
                *(_WORD *)&dest[8] = 2;
                icu::UnicodeString::doAppend((uint64_t)dest, (uint64_t)v16, 0, v9);
                if ((dest[8] & 1) != 0)
                {
                  icu::UnicodeString::setToBogus((icu::UnicodeString *)v6);
                }

                else
                {
                  if ((dest[8] & 2) != 0) {
                    UErrorCode v26 = &dest[10];
                  }
                  else {
                    UErrorCode v26 = *(_BYTE **)&dest[24];
                  }
                  int v6 = icu::UnicodeString::doReplace(v6, v11, v10, v26, 0LL, v9);
                }

                icu::UnicodeString::~UnicodeString((icu::UnicodeString *)dest);
                return v6;
              }

              uint64_t v21 = *(_WORD *)(v6 + 8) & 2;
            }

            int v27 = v13 - v10 + v9;
            memset(dest, 0, 54);
            if (v21 && v27 >= 28)
            {
              u_memcpy((UChar *)dest, v22, v13);
              uint64_t v22 = (const UChar *)dest;
            }

            __int128 v35 = 0LL;
            uint64_t v28 = (v27 >> 2) + 128;
            if (v28 <= 2147483637 - v27) {
              int v29 = v28 + v27;
            }
            else {
              int v29 = 2147483637;
            }
            if (!icu::UnicodeString::cloneArrayIfNeeded( (icu::UnicodeString *)v6,  v27,  v29,  0,  (unsigned int **)&v35,  0)) {
              return v6;
            }
            if ((*(_WORD *)(v6 + 8) & 2) != 0) {
              char v30 = (UChar *)(v6 + 10);
            }
            else {
              char v30 = *(UChar **)(v6 + 24);
            }
            if (v30 == v22)
            {
              if ((_DWORD)v10 == (_DWORD)v9) {
                goto LABEL_85;
              }
              __int128 v31 = v10 + v11;
              __int128 v32 = v13 - (v10 + v11);
              if (v32 < 1) {
                goto LABEL_85;
              }
              __int128 v33 = v22;
            }

            else
            {
              __int128 v31 = v10 + v11;
              __int128 v32 = v13 - (v10 + v11);
              __int128 v33 = v30;
            }

            memmove((void *)&v33[(int)v11 + (int)v9], &v22[v31], 2LL * v32);
LABEL_85:
            if (v27 > 1023)
            {
              __int128 v34 = *(_WORD *)(v6 + 8) | 0xFFE0;
              *(_DWORD *)(v6 + 12) = v27;
            }

            else
            {
              __int128 v34 = *(_WORD *)(v6 + 8) & 0x1F | (32 * v27);
            }

            *(_WORD *)(v6 + 8) = v34;
            if (v35) {
              uprv_free(v35);
            }
            return v6;
          }

    ++v26;
  }

  while (v26 < &v15[(int)v17]);
  uint64_t v62 = v16;
  uint64_t v28 = *v15;
  if ((v28 & 0xFC00) == 0xD800)
  {
    uint64_t v28 = v15[1] + (v28 << 10) - 56613888;
    int v29 = 2LL;
  }

  else
  {
    int v29 = 1LL;
  }

  char v30 = u_charType(v28);
  if (((1 << v30) & 0x1C0) != 0)
  {
    *(_DWORD *)(a6 + 4) |= 0x40u;
    LOWORD(v64) = -3;
    char v30 = icu::UnicodeString::doReplace((uint64_t)v19, v18, v29, (uint64_t)&v64, 0, 1LL);
    __int128 v31 = *((_WORD *)v19 + 4);
    if ((v31 & 0x11) != 0)
    {
      __int128 v32 = 0LL;
      this = (void (***)(icu::UnicodeString *__hidden))v63;
    }

    else
    {
      this = (void (***)(icu::UnicodeString *__hidden))v63;
      if ((v31 & 2) != 0) {
        __int128 v32 = (void (**)(icu::UnicodeString *__hidden))((char *)v19 + 10);
      }
      else {
        __int128 v32 = v19[3];
      }
    }

    uint64_t v15 = (unsigned __int16 *)v32 + (int)v18;
    __int128 v33 = v17 - v29;
    unsigned int v17 = (v17 - v29 + 1);
    if (v19 == this) {
      uint64_t v7 = (v33 + 1);
    }
    else {
      uint64_t v7 = v7;
    }
  }

  else
  {
    this = (void (***)(icu::UnicodeString *__hidden))v63;
  }

  __int128 v34 = *(_DWORD *)(a6 + 4);
  if ((v34 & 0x7C0) == 0)
  {
    __int128 v37 = *(_DWORD *)(v12 + 16);
    if ((v37 & 4) != 0)
    {
      __int128 v38 = v62;
      if (!*(_BYTE *)(a6 + 9) || *(_BYTE *)(a6 + 10))
      {
        char v30 = sub_18088E728(v30, v15, v17, a6);
        this = (void (***)(icu::UnicodeString *__hidden))v63;
        __int128 v37 = *(_DWORD *)(v12 + 16);
      }
    }

    else
    {
      __int128 v38 = v62;
    }

    if ((v37 & 8) != 0 && (v24 & 0x200C) == 0x200C)
    {
      char v30 = sub_18088E8D8(v12, (uint64_t)v15, v17);
      this = (void (***)(icu::UnicodeString *__hidden))v63;
      if (!(_DWORD)v30) {
        *(_DWORD *)(a6 + 4) |= 0x1000u;
      }
    }

    if ((*(_BYTE *)(v12 + 16) & 0x40) != 0 && v24 >= 0xB7)
    {
      sub_18088EAC8(v30, (uint64_t)v15, v17, a6);
      this = (void (***)(icu::UnicodeString *__hidden))v63;
    }

    __int128 v36 = a5;
    if (!a5) {
      goto LABEL_90;
    }
    if (!v38)
    {
      if ((int)v7 >= 64)
      {
        __int128 v36 = *(_DWORD *)(a6 + 4) | 2u;
        *(_DWORD *)(a6 + 4) = v36;
      }

      goto LABEL_122;
    }

    if (v24 < 0x80)
    {
      goto LABEL_90;
    }

    int v65 = 0u;
    unsigned int v68 = 0LL;
    uint64_t v67 = 0u;
    unsigned int v66 = 0u;
    int v64 = off_18971B688;
    LOWORD(v65) = 2;
    __int128 v39 = (void *)icu::UnicodeString::getBuffer((icu::UnicodeString *)&v64, 63);
    if (v39)
    {
      *__int128 v39 = 0x2D002D006E0078LL;
      if ((v65 & 2) != 0) {
        __int128 v40 = 23;
      }
      else {
        __int128 v40 = DWORD2(v65) - 4;
      }
      __int128 v41 = u_strToPunycode(v15, v17, (uint64_t)(v39 + 1), v40, 0LL, a7);
      if (*a7 != 15)
      {
LABEL_82:
        icu::UnicodeString::releaseBuffer((uint64_t)&v64, v41 + 4);
        uint64_t v44 = *a7;
        if ((int)v44 <= 0)
        {
          if (v41 >= 60) {
            *(_DWORD *)(a6 + 4) |= 2u;
          }
          uint64_t v7 = sub_18088E6A4(v63, v59, v7, (uint64_t)&v64, (v41 + 4), a7);
        }

        goto LABEL_92;
      }

      *a7 = 0;
      icu::UnicodeString::releaseBuffer((uint64_t)&v64, 4);
      __int128 v42 = icu::UnicodeString::getBuffer((icu::UnicodeString *)&v64, v41 + 4);
      if (v42)
      {
        if ((v65 & 2) != 0) {
          __int128 v43 = 23;
        }
        else {
          __int128 v43 = DWORD2(v65) - 4;
        }
        __int128 v41 = u_strToPunycode(v15, v17, v42 + 8, v43, 0LL, a7);
        goto LABEL_82;
      }
    }

    uint64_t v44 = 7LL;
    *a7 = 7;
LABEL_92:
    icu::UnicodeString::~UnicodeString((void *)v44, (icu::UnicodeString *)&v64);
    goto LABEL_122;
  }

  if (v62)
  {
LABEL_90:
    BOOL v45 = (icu::UnicodeString *)this;
    BOOL v46 = v59;
    BOOL v47 = v7;
    uint64_t v48 = (uint64_t)v19;
    int v49 = v17;
LABEL_120:
    __int128 v35 = sub_18088E6A4(v45, v46, v47, v48, v49, a7);
    goto LABEL_121;
  }

  *(_DWORD *)(a6 + 4) = v34 | 0x400;
  a1 = v12;
  char v20 = v59;
  uint64_t v22 = a5;
  uint64_t v21 = v7;
LABEL_56:
  __int128 v35 = sub_18088E544(a1, (uint64_t)this, v20, v21, v22, a6, a7);
LABEL_121:
  uint64_t v7 = v35;
LABEL_122:
  icu::UnicodeString::~UnicodeString((void *)v36, (icu::UnicodeString *)&v69);
  return v7;
}

      icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v51);
      uint64_t v2 = (icu::Transliterator *)(v33 + 1);
      if ((_DWORD)v2 == v32) {
        goto LABEL_38;
      }
    }

    int v9 = v7;
    int v10 = 0LL;
    while (1)
    {
      unint64_t v50 = 0LL;
      uint64_t v48 = 0u;
      int v49 = 0u;
      BOOL v47 = 0u;
      BOOL v46 = (UChar *)off_18971B688;
      LOWORD(v47) = 2;
      icu::Transliterator::_getAvailableTarget(v10, (uint64_t)&v51, (const icu::UnicodeString *)&v46, v8);
      if (!uhash_geti(v38[1], (uint64_t)&v46))
      {
        __int128 v39 = 0;
        uint64_t v13 = v38[1];
        unsigned int v14 = (icu::UnicodeString *)icu::UMemory::operator new(v12, (icu::UMemory *)0x40, v11);
        uint64_t v15 = (uint64_t)v14;
        if (v14) {
          icu::UnicodeString::UnicodeString(v14, &v46);
        }
        uhash_puti(v13, v15, 1u, &v39);
        LODWORD(v40[0]) = 0;
        if ((v47 & 0x8000u) == 0LL) {
          unint64_t v16 = (unsigned __int16)v47 >> 5;
        }
        else {
          unint64_t v16 = DWORD1(v47);
        }
        unsigned int v17 = (char *)v48;
        if ((v47 & 2) != 0) {
          unsigned int v17 = (char *)&v47 + 2;
        }
        int v18 = (v47 & 0x11) != 0 ? 0LL : v17;
        if (uprv_isInvariantUString(v18, v16))
        {
          uint64_t v59 = 0u;
          unsigned int v60 = 0u;
          uint64_t v57 = 0u;
          unsigned int v58 = 0u;
          memset(__s1, 0, sizeof(__s1));
          LODWORD(v41) = 0;
          icu::UnicodeString::extract((uint64_t)&v46, 0, v16, __s1, 128);
          HIBYTE(v60) = 0;
          if (uscript_getCode(__s1, (int32_t *)&v41, 1, (int *)v40) == 1)
          {
            size_t v12 = (uint64_t *)LODWORD(v40[0]);
            if (SLODWORD(v40[0]) < 1)
            {
              char v20 = (int)v41;
              if ((_DWORD)v41 != -1)
              {
                uint64_t v21 = icu::Transliterator::_countAvailableVariants( (icu::Transliterator *)&v51,  (const icu::UnicodeString *)&v46,  v19);
                if (v21 >= 1) {
                  break;
                }
              }
            }
          }
        }
      }

  if (*(int *)a5 <= 0)
  {
    if ((*(_BYTE *)(*((void *)this + 2) + 24LL) & 2) != 0) {
      int v18 = 17;
    }
    else {
      int v18 = 16;
    }
  }

  else
  {
    int v18 = -1;
  }

  sub_180981074((icu::CharString *)v35, 68, v18, a5);
  uint64_t v13 = *((_DWORD *)this + 66);
  if ((v13 & 8) != 0) {
    goto LABEL_43;
  }
LABEL_22:
  if ((v13 & 1) != 0)
  {
LABEL_49:
    if (*(int *)a5 <= 0)
    {
      if ((*(_BYTE *)(*((void *)this + 2) + 25LL) & 8) != 0) {
        char v20 = 17;
      }
      else {
        char v20 = 16;
      }
    }

    else
    {
      char v20 = -1;
    }

    sub_180981074((icu::CharString *)v35, 70, v20, a5);
  }

          uint64_t result = ucol_getOffset(v11);
          uint64_t v19 = (v13 + 1);
          if ((_DWORD)v19 == v14)
          {
            unsigned int v14 = v21 + v14 - result;
            uint64_t result = (uint64_t)uprv_malloc((4 * v14));
            if (!result)
            {
              *a2 = U_MEMORY_ALLOCATION_ERROR;
              return result;
            }

            int v18 = (_DWORD *)result;
            memcpy((void *)result, v15, 4LL * v13);
            v18[v13] = v16;
          }

          else
          {
            char v20 = *a2;
            v15[v13] = v16;
            int v18 = v15;
            if (v20 > U_ZERO_ERROR) {
              return result;
            }
          }

          if (v15 != v18 && v15 != (_DWORD *)(v3 + 32)) {
            uprv_free(v15);
          }
LABEL_45:
          uint64_t result = ucol_next(v11, a2);
          uint64_t v13 = v19;
          uint64_t v15 = v18;
          if ((_DWORD)result == -1) {
            goto LABEL_49;
          }
        }
      }

      LODWORD(v19) = 0;
      int v18 = (_DWORD *)(v3 + 32);
LABEL_49:
      v18[v19] = 0;
      *(void *)(v3 + 24) = v18;
      *(_DWORD *)(v3 + 20) = v19;
    }
  }

  return result;
}

  ures_close(v3);
  uint64_t v22 = v25;
  icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v35);
  if (v22 >= U_ILLEGAL_ARGUMENT_ERROR && v5)
  {
    (*(void (**)(icu::UVector *))(*(void *)v5 + 8LL))(v5);
    return 0LL;
  }

  return v5;
}

uint64_t sub_1807DD7C0()
{
  uint64_t v0 = (_BYTE **)qword_18C534DA0;
  if (qword_18C534DA0)
  {
    uint64_t v1 = *(void *)(qword_18C534DA0 + 48);
    if (v1)
    {
      if (*(_BYTE *)(v1 + 12)) {
        uprv_free(*(void **)v1);
      }
      icu::UMemory::operator delete((void *)v1);
    }

    uhash_close(v0[5]);
    uhash_close(v0[4]);
    uhash_close(v0[3]);
    uhash_close(v0[2]);
    uhash_close(v0[1]);
    icu::UMemory::operator delete(v0);
  }

  return 1LL;
}

int32x2_t *sub_1807DD844(int32x2_t *a1, int *a2)
{
  a1[10] = 0LL;
  a1[11].i32[0] = 0;
  a1[12] = (int32x2_t)&a1[14];
  a1[13].i32[0] = 8;
  a1[13].i8[4] = 0;
  a1[22].i8[0] = 0;
  uhash_init(a1, (uint64_t)uhash_hashUChars, (uint64_t)uhash_compareUChars, (uint64_t)uhash_compareLong, a2);
  if (*a2 <= 0)
  {
    uint64_t v5 = icu::UMemory::operator new((icu::UMemory *)0x40, v4);
    if (v5)
    {
      *(void *)uint64_t v5 = v5 + 13;
      *(_DWORD *)(v5 + 8) = 40;
      *(_WORD *)(v5 + 12) = 0;
      *(_DWORD *)(v5 + 56) = 0;
      a1[10] = (int32x2_t)v5;
    }

    else
    {
      a1[10] = 0LL;
      *a2 = 7;
    }
  }

  return a1;
}

void sub_1807DD8EC( uint64_t a1, uint64_t a2, void **a3, void **a4, int *a5, void (*a6)(uint64_t), void (*a7)(UChar *), int *a8)
{
  if (*a8 <= 0)
  {
    int Size = ures_getSize(a1);
    *a5 = Size;
    if (Size >= 1
      && (unsigned int v17 = (uint64_t *)uprv_malloc(8LL * Size)) != 0LL
      && (int v18 = v17, uprv_free(*a3), *a3 = v18, v19 = *a5, (int)v19 >= 1)
      && (char v20 = uprv_malloc(4 * v19)) != 0LL)
    {
      uint64_t v21 = v20;
      uprv_free(*a4);
      *a4 = v21;
      int v22 = *a8;
      while (v22 <= 0 && ures_hasNext(a1))
      {
        NextResource = ures_getNextResource(a1, 0LL, a8);
        uint64_t Key = ures_getKey((uint64_t)NextResource);
        StringByuint64_t Key = ures_getStringByKey((uint64_t)NextResource, "replacement", 0LL, a8);
        if (*a8 > 0)
        {
          if (NextResource) {
            ures_close((uint64_t)NextResource);
          }
          return;
        }

        UErrorCode v26 = (UChar *)StringByKey;
        a6(Key);
        a7(v26);
        *int v18 = Key;
        *uint64_t v21 = sub_1807DDA70(a2, v26, (UErrorCode *)a8);
        if (NextResource) {
          ures_close((uint64_t)NextResource);
        }
        int v22 = *a8;
        ++v21;
        ++v18;
      }
    }

    else
    {
      *a8 = 7;
    }
  }

uint64_t sub_1807DDA70(uint64_t a1, UChar *a2, UErrorCode *a3)
{
  if (*(_BYTE *)(a1 + 176))
  {
    *a3 = U_NO_WRITE_PERMISSION;
    return 0xFFFFFFFFLL;
  }

  uint64_t v5 = uhash_geti(a1, (uint64_t)a2);
  if (!(_DWORD)v5)
  {
    icu::CharString::append(*(icu::CharString **)(a1 + 80), 0, a3);
    uint64_t v8 = *(void *)(a1 + 80);
    uint64_t v5 = *(unsigned int *)(v8 + 56);
    int32_t v9 = u_strlen(a2);
    icu::CharString::appendInvariantChars((int *)v8, a2, v9, a3);
    uhash_puti(a1, (uint64_t)a2, v5, (int *)a3);
  }

  return v5;
}

uint64_t sub_1807DDB4C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 12)) {
      uprv_free(*(void **)v2);
    }
    icu::UMemory::operator delete((void *)v2);
  }

  sub_1807DDB98(a1 + 88);
  return a1;
}

uint64_t sub_1807DDB98(uint64_t a1)
{
  int v2 = *(_DWORD *)a1;
  if (*(int *)a1 >= 1)
  {
    uint64_t v3 = 0LL;
    do
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8 * v3);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
        int v2 = *(_DWORD *)a1;
      }

      ++v3;
    }

    while (v3 < v2);
  }

  if (*(_BYTE *)(a1 + 20)) {
    uprv_free(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1807DDC04(void **a1)
{
  if (a1)
  {
    if (*((_BYTE *)a1 + 12)) {
      uprv_free(*a1);
    }
    icu::UMemory::operator delete(a1);
  }

uint64_t *sub_1807DDC3C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if (*(_BYTE *)(v2 + 12)) {
      uprv_free(*(void **)v2);
    }
    icu::UMemory::operator delete((void *)v2);
  }

  return a1;
}

void sub_1807DDC7C(void ***a1, void **a2, int *a3)
{
  if (*a3 <= 0)
  {
    int v6 = *a1;
    if (*a1)
    {
      if (*((_BYTE *)v6 + 12)) {
        uprv_free(*v6);
      }
      icu::UMemory::operator delete(v6);
    }

    *a1 = a2;
    if (!a2) {
      *a3 = 7;
    }
  }

  else if (a2)
  {
    if (*((_BYTE *)a2 + 12)) {
      uprv_free(*a2);
    }
    icu::UMemory::operator delete(a2);
  }

uint64_t sub_1807DDD14()
{
  if (qword_18C534DB0) {
    uhash_close((_BYTE *)qword_18C534DB0);
  }
  return 1LL;
}

uint64_t sub_1807DDD44(uint64_t a1, const void *a2, unsigned int a3, int a4, int *a5)
{
  uint64_t v10 = icu::StringEnumeration::StringEnumeration(a1);
  *(void *)uint64_t v10 = off_18970C418;
  *(void *)(v10 + 120) = &unk_1809DE3B0;
  *(void *)(v10 + 128) = &unk_1809DE3B0;
  *(_DWORD *)(v10 + 136) = 0;
  *(void *)(v10 + 144) = off_18971B688;
  *(_WORD *)(v10 + 152) = 2;
  if (a3 && *a5 <= 0)
  {
    if (!a2 || (a3 & 0x80000000) != 0)
    {
      int v13 = 1;
    }

    else
    {
      int v11 = uprv_malloc(a3 + 1);
      *(void *)(a1 + 120) = v11;
      if (v11)
      {
        size_t v12 = v11;
        memcpy(v11, a2, a3);
        v12[a3] = 0;
        *(void *)(a1 + 128) = &v12[a4];
        *(_DWORD *)(a1 + 136) = a3;
        return a1;
      }

      int v13 = 7;
    }

    *a5 = v13;
  }

  return a1;
}

uint64_t uloc_addLikelySubtags(char *a1, char *a2, int a3, UErrorCode *a4)
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  icu::CheckedArrayByteSink::CheckedArrayByteSink((uint64_t)&v10, a2, a3);
  sub_1807DDED8(a1, (uint64_t)&v10, a4);
  uint64_t v4 = DWORD2(v11);
  if (*(int *)a4 < 1)
  {
    if (BYTE12(v11)) {
      *a4 = U_BUFFER_OVERFLOW_ERROR;
    }
    else {
      u_terminateChars((uint64_t)a2, a3, DWORD2(v11), (int *)a4);
    }
  }

  else if (BYTE12(v11))
  {
    uint64_t v4 = DWORD2(v11);
  }

  else
  {
    uint64_t v4 = 0xFFFFFFFFLL;
  }

  icu::CheckedArrayByteSink::~CheckedArrayByteSink((icu::CheckedArrayByteSink *)&v10);
  return v4;
}

uint64_t sub_1807DDED8(char *a1, uint64_t a2, UErrorCode *a3)
{
  __s1[8] = *(char **)MEMORY[0x1895F89C0];
  memset(&__s1[1], 0, 56);
  uint64_t v27 = 0LL;
  __s1[0] = (char *)&__s1[1] + 5;
  LODWORD(__s1[1]) = 40;
  uint64_t v26 = 0LL;
  icu::CharStringByteSink::CharStringByteSink(&v26, (uint64_t)__s1);
  ulocimp_canonicalize(a1);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)&v26);
  uint64_t v6 = 0LL;
  if (*(int *)a3 <= 0)
  {
    uint64_t v7 = __s1[0];
    unsigned int v25 = 12;
    int v22 = 6;
    int v20 = 4;
    if (!__s1[0])
    {
LABEL_6:
      uint64_t v6 = 0LL;
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
      goto LABEL_24;
    }

    if (!strcmp(__s1[0], "root"))
    {
      size_t v9 = strlen(v7);
      (*(void (**)(uint64_t, const char *, size_t))(*(void *)a2 + 16LL))(a2, v7, v9);
    }

    else
    {
      LODWORD(v27) = 0;
      uint64_t v26 = 0LL;
      int v23 = 0;
      __int16 v24 = 0;
      int v21 = 0;
      int v8 = sub_1807DEF2C((uint64_t)v7, (char *)&v26, (int *)&v25, (char *)&v23, &v22, (char *)&v21, &v20, a3);
      if (*(int *)a3 > 0)
      {
        if (*a3 == U_BUFFER_OVERFLOW_ERROR) {
          goto LABEL_6;
        }
        goto LABEL_23;
      }

      for (uint64_t i = v8; ; ++i)
      {
        int v11 = v7[i];
        if (v11 != 95 && v11 != 45) {
          break;
        }
      }

      signed int v12 = strlen(&v7[i]);
      if (v12 >= 1)
      {
        int v13 = 0;
        uint64_t v14 = v12;
        uint64_t v15 = v7;
        do
        {
          int v16 = 0;
          int v17 = v15[i];
          if (v17 != 45 && v17 != 95)
          {
            if (v17 == 64) {
              break;
            }
            if (v13 > 8) {
              goto LABEL_6;
            }
            int v16 = v13 + 1;
          }

          ++v15;
          int v13 = v16;
          --v14;
        }

        while (v14);
      }

      if (!sub_1807DF184(&v26, v25, &v23, v22, &v21, v20, &v7[i], v12, a2, (int *)a3))
      {
        size_t v18 = strlen(v7);
        (*(void (**)(uint64_t, const char *, size_t))(*(void *)a2 + 16LL))(a2, v7, v18);
LABEL_23:
        uint64_t v6 = 0LL;
        goto LABEL_24;
      }
    }

    uint64_t v6 = 1LL;
  }

uint64_t uloc_minimizeSubtags(char *a1, char *a2, int a3, UErrorCode *a4)
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  icu::CheckedArrayByteSink::CheckedArrayByteSink((uint64_t)&v10, a2, a3);
  ulocimp_minimizeSubtags(a1, (uint64_t)&v10, a4);
  uint64_t v4 = DWORD2(v11);
  if (*(int *)a4 < 1)
  {
    if (BYTE12(v11)) {
      *a4 = U_BUFFER_OVERFLOW_ERROR;
    }
    else {
      u_terminateChars((uint64_t)a2, a3, DWORD2(v11), (int *)a4);
    }
  }

  else if (BYTE12(v11))
  {
    uint64_t v4 = DWORD2(v11);
  }

  else
  {
    uint64_t v4 = 0xFFFFFFFFLL;
  }

  icu::CheckedArrayByteSink::~CheckedArrayByteSink((icu::CheckedArrayByteSink *)&v10);
  return v4;
}

void ulocimp_minimizeSubtags(char *a1, uint64_t a2, UErrorCode *a3)
{
  v41[8] = *(void **)MEMORY[0x1895F89C0];
  memset(&__n[3], 0, 48);
  uint64_t v33 = 0LL;
  *(void *)&__n[1] = (char *)&__n[4] + 1;
  __n[3] = 40;
  v41[0] = 0LL;
  v41[1] = 0LL;
  icu::CharStringByteSink::CharStringByteSink(v41, (uint64_t)&__n[1]);
  ulocimp_canonicalize(a1);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v41);
  uint64_t v6 = *(const char **)&__n[1];
  memset(&v41[1], 0, 56);
  v41[0] = (char *)&v41[1] + 5;
  LODWORD(v41[1]) = 40;
  int v40 = 0;
  uint64_t __src = 0LL;
  __n[0] = 12;
  __int16 v31 = 0;
  int v29 = 6;
  int v30 = 0;
  int v27 = 4;
  int v28 = 0;
  UErrorCode v7 = *a3;
  if (!*(void *)&__n[1] || v7 > U_ZERO_ERROR)
  {
LABEL_59:
    if (v7 > U_ZERO_ERROR) {
      goto LABEL_61;
    }
    goto LABEL_60;
  }

  int v8 = sub_1807DEF2C((uint64_t)v6, (char *)&__src, __n, (char *)&v30, &v29, (char *)&v28, &v27, a3);
  if (*(int *)a3 > 0)
  {
    if (*a3 != U_BUFFER_OVERFLOW_ERROR) {
      goto LABEL_61;
    }
LABEL_60:
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    goto LABEL_61;
  }

  for (uint64_t i = v8; ; ++i)
  {
    int v10 = v6[i];
    if (v10 != 95 && v10 != 45) {
      break;
    }
  }

  __int128 v11 = (char *)&v6[i];
  size_t v12 = strlen(&v6[i]);
  uint64_t v13 = v12;
  if ((int)v12 >= 1)
  {
    int v14 = 0;
    uint64_t v15 = v12;
    int v16 = v6;
    do
    {
      int v17 = 0;
      int v18 = v16[i];
      if (v18 != 45 && v18 != 95)
      {
        if (v18 == 64) {
          break;
        }
        if (v14 > 8) {
          goto LABEL_58;
        }
        int v17 = v14 + 1;
      }

      ++v16;
      int v14 = v17;
      --v15;
    }

    while (v15);
  }

  __int128 v35 = 0u;
  uint64_t v38 = 0LL;
  __int128 v37 = 0u;
  __int128 v36 = 0u;
  __int128 v34 = (char *)&v35 + 5;
  LODWORD(v35) = 40;
  uint64_t v25 = 0LL;
  uint64_t v26 = 0LL;
  icu::CharStringByteSink::CharStringByteSink(&v25, (uint64_t)&v34);
  sub_1807DF8D4(&__src, __n[0], &v30, v29, &v28, v27, 0LL, 0LL, 0LL, (uint64_t)&v25, (int *)a3);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)&v25);
  uint64_t v25 = 0LL;
  uint64_t v26 = 0LL;
  icu::CharStringByteSink::CharStringByteSink(&v25, (uint64_t)v41);
  int v19 = sub_1807DDED8(v34, (uint64_t)&v25, a3);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)&v25);
  if (BYTE4(v35)) {
    uprv_free(v34);
  }
  if (*(int *)a3 <= 0)
  {
    if (v19)
    {
      __n[0] = 12;
      int v29 = 6;
      int v27 = 4;
      sub_1807DEF2C((uint64_t)v41[0], (char *)&__src, __n, (char *)&v30, &v29, (char *)&v28, &v27, a3);
      __int128 v35 = 0u;
      uint64_t v38 = 0LL;
      __int128 v37 = 0u;
      __int128 v36 = 0u;
      __int128 v34 = (char *)&v35 + 5;
      LODWORD(v35) = 40;
      uint64_t v25 = 0LL;
      uint64_t v26 = 0LL;
      icu::CharStringByteSink::CharStringByteSink(&v25, (uint64_t)&v34);
      sub_1807DF184(&__src, __n[0], 0LL, 0, 0LL, 0, 0LL, 0, (uint64_t)&v25, (int *)a3);
      icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)&v25);
      if (*(int *)a3 <= 0)
      {
        if (uprv_strnicmp((_BYTE *)v41[0], v34, v38))
        {
          int v20 = 0;
        }

        else
        {
          sub_1807DF8D4(&__src, __n[0], 0LL, 0, 0LL, 0, v11, v13, 0LL, a2, (int *)a3);
          int v20 = 1;
        }
      }

      else
      {
        int v20 = 2;
      }

      if (BYTE4(v35)) {
        uprv_free(v34);
      }
      if (v20 != 2)
      {
        if (v20) {
          goto LABEL_61;
        }
        if (v27 < 1)
        {
LABEL_45:
          int v23 = v29;
          if (v29 < 1)
          {
LABEL_57:
            sub_1807DF8D4(&__src, __n[0], &v30, v23, &v28, v27, v11, v13, 0LL, a2, (int *)a3);
            goto LABEL_61;
          }

          __int128 v35 = 0u;
          uint64_t v38 = 0LL;
          __int128 v37 = 0u;
          __int128 v36 = 0u;
          __int128 v34 = (char *)&v35 + 5;
          LODWORD(v35) = 40;
          uint64_t v25 = 0LL;
          uint64_t v26 = 0LL;
          icu::CharStringByteSink::CharStringByteSink(&v25, (uint64_t)&v34);
          sub_1807DF184(&__src, __n[0], &v30, v29, 0LL, 0, 0LL, 0, (uint64_t)&v25, (int *)a3);
          icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)&v25);
          if (*(int *)a3 <= 0)
          {
            if ((_DWORD)v38 && !uprv_strnicmp((_BYTE *)v41[0], v34, v38))
            {
              sub_1807DF8D4(&__src, __n[0], &v30, v29, 0LL, 0, v11, v13, 0LL, a2, (int *)a3);
              int v24 = 1;
            }

            else
            {
              int v24 = 0;
            }
          }

          else
          {
            int v24 = 2;
          }

          if (BYTE4(v35)) {
            uprv_free(v34);
          }
          if (v24 != 2)
          {
            if (v24) {
              goto LABEL_61;
            }
            int v23 = v29;
            goto LABEL_57;
          }

          goto LABEL_58;
        }

        __int128 v35 = 0u;
        uint64_t v38 = 0LL;
        __int128 v37 = 0u;
        __int128 v36 = 0u;
        __int128 v34 = (char *)&v35 + 5;
        LODWORD(v35) = 40;
        uint64_t v25 = 0LL;
        uint64_t v26 = 0LL;
        icu::CharStringByteSink::CharStringByteSink(&v25, (uint64_t)&v34);
        sub_1807DF184(&__src, __n[0], 0LL, 0, &v28, v27, 0LL, 0, (uint64_t)&v25, (int *)a3);
        icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)&v25);
        if (*(int *)a3 <= 0)
        {
          if ((_DWORD)v38 && !uprv_strnicmp((_BYTE *)v41[0], v34, v38))
          {
            sub_1807DF8D4(&__src, __n[0], 0LL, 0, &v28, v27, v11, v13, 0LL, a2, (int *)a3);
            int v22 = 1;
          }

          else
          {
            int v22 = 0;
          }
        }

        else
        {
          int v22 = 2;
        }

        if (BYTE4(v35)) {
          uprv_free(v34);
        }
        if (v22 != 2)
        {
          if (v22) {
            goto LABEL_61;
          }
          goto LABEL_45;
        }
      }

LABEL_26:
    size_t v21 = strlen(v6);
    (*(void (**)(uint64_t, const char *, size_t))(*(void *)a2 + 16LL))(a2, v6, v21);
  }

      ++*(_DWORD *)(v2 + 536);
      LOWORD(icu::LocaleBuilder::setLanguage((uint64_t)this, v13, v14) = v14 & 0xBFFF;
      goto LABEL_27;
    }

    LOWORD(icu::LocaleBuilder::setLanguage((uint64_t)this, v13, v14) = *(_WORD *)(*(void *)(v17 + 64)
                           + 2LL * (v48 + 4 * *(unsigned __int16 *)(*(void *)(v17 + 64) + 2 * v47)));
    if ((v14 & 0x4000) != 0) {
      goto LABEL_26;
    }
LABEL_27:
    int v18 = 1;
    uint64_t v15 = 1;
LABEL_31:
    int v19 = *(unsigned __int16 *)(v12 + v13 + 2LL * (unsigned __int16)v14 + 8);
    uint64_t v13 = (*(_DWORD *)(a2 + 4) * v19);
    int v20 = (unsigned __int16 *)(v12 + v13);
    size_t v21 = *(unsigned __int16 *)(v12 + v13);
    if (v21 == 0xFFFF)
    {
      int v22 = *(void *)(v2 + 488);
      int v23 = *(unsigned int *)(v22 + 40);
      if ((int)v23 <= *(_DWORD *)(v22 + 28))
      {
        int v49 = *(void *)(v22 + 32) + v23;
        size_t v21 = 0xFFFF;
      }

      else
      {
        int v49 = (*(uint64_t (**)(void))(*(void *)(v22 + 56) + 64LL))();
        size_t v21 = *v20;
      }
    }

    if ((__int16)v21 >= 1 && SLODWORD(v52[0]) >= 1)
    {
      int v24 = 0LL;
      while (*((unsigned __int16 *)&v53 + v24 + 2) != v21)
      {
        if (LODWORD(v52[0]) == ++v24) {
          goto LABEL_42;
        }
      }

      int v8 = *((unsigned int *)v52 + v24 + 1);
      if ((v8 & 0x80000000) == 0)
      {
        __int128 v36 = *(UText **)(v50 + 488);
        __int128 v39 = v8 - v36->chunkNativeStart;
        if (v39 < 0 || v39 >= v36->nativeIndexingLimit || v36->chunkContents[v39] >> 10 > 0x36u)
        {
          int v40 = *((unsigned int *)v52 + v24 + 1);
          goto LABEL_97;
        }

        ++v34;
        v36 += 15;
        UErrorCode v7 = v95;
        __int16 v31 = v96;
        if (v34 == v98) {
          goto LABEL_53;
        }
      }
    }

    __int128 v35 = 0LL;
LABEL_53:
    LODWORD(a4) = v84;
    if (v35) {
      break;
    }
    int v30 = v89 + 1;
  }

  while (v89 + 1 < v82);
  if (v35)
  {
    int v49 = v87;
    if (v32 > 0)
    {
      unsigned int v99 = 0;
      if (uloc_getCountry((uint64_t)v35[2], 0LL, 0, &v99))
      {
        if (strcmp(v35[3], "zh"))
        {
          unint64_t v50 = 0LL;
          size_t v51 = v81;
          while (1)
          {
            int v52 = &v88[120 * v50];
            sub_18080D500((char **)v52, *(char **)(v51 + 8 * v50), v100, v7);
LABEL_68:
            ++v50;
            LODWORD(a4) = v84;
            if (v50 == v82)
            {
              int v49 = v87;
              size_t v9 = v93;
              goto LABEL_73;
            }
          }

          unint64_t v54 = &v88[120 * v50];
          int32_t v55 = (const char *)*((void *)v54 + 1);
          unsigned int v56 = (const char **)(v54 + 16);
          uint64_t v57 = v98;
          unsigned int v58 = v96;
          while (strcmp(v55, v58[1]) && strcmp(*v56, v58[2]))
          {
            v58 += 15;
            if (!--v57) {
              goto LABEL_68;
            }
          }

          __int128 v35 = (char **)v58;
          int v49 = v87;
          size_t v9 = v93;
          LODWORD(a4) = v84;
        }
      }
    }
  }

  else
  {
    int v49 = v87;
  }

      if (!v13)
      {
        int v20 = (unsigned __int16)*v14++;
        uint64_t v13 = v20;
      }

      uint64_t v5 = icu::UCharsTrie::Iterator::branchNext((uint64_t *)this, v14, v13 + 1, a2);
      if (!v5) {
        return 1LL;
      }
    }
  }

  if (*((_BYTE *)this + 32))
  {
    uint64_t v15 = v5 + 3;
    if (v13 >> 6 <= 0x1FE) {
      uint64_t v15 = v5 + 2;
    }
    if (v13 >> 6 >= 0x101) {
      int v14 = (__int16 *)v15;
    }
    v13 &= 0x3Fu;
    *((_BYTE *)this + 32) = 0;
    goto LABEL_18;
  }

  if ((v13 & 0x8000) != 0)
  {
    uint64_t v25 = v13 & 0x7FFF;
    if (v25 >= 0x4000)
    {
      if (v25 == 0x7FFF)
      {
        uint64_t v26 = v5[1] << 16;
        int v14 = (__int16 *)(v5 + 2);
      }

      else
      {
        uint64_t v26 = (v25 << 16) - 0x40000000;
      }

      uint64_t v25 = v26 | (unsigned __int16)*v14;
    }

    *((_DWORD *)this + 27) = v25;
    goto LABEL_70;
  }

  size_t v21 = v13 >> 6;
  if (v21 > 0x100)
  {
    if (v21 > 0x1FE) {
      int v22 = v5[2] | (v5[1] << 16);
    }
    else {
      int v22 = ((unsigned __int16)*v14 | ((v21 & 0x1FF) << 16)) - 16842752;
    }
  }

  else
  {
    int v22 = v21 - 1;
  }

  *((_DWORD *)this + 27) = v22;
  int v30 = *((_DWORD *)this + 26);
  if (v30 >= 1)
  {
    __int16 v31 = *((__int16 *)this + 24) < 0 ? *((_DWORD *)this + 13) : *((unsigned __int16 *)this + 24) >> 5;
    if (v31 == v30)
    {
LABEL_70:
      *((void *)this + 1) = 0LL;
      return 1LL;
    }
  }

  *((void *)this + 1) = v5;
  uint64_t result = 1LL;
  *((_BYTE *)this + 32) = 1;
  return result;
}

        int v14 = v20 | (v14 << v11);
        size_t v21 = *offset + 1;
        *offset = v21;
        int v17 = ++v18;
        if (v21 >= v16 || v12 <= v18) {
          goto LABEL_36;
        }
      }
    }

    int v17 = v13;
LABEL_36:
    int v23 = v5;
    LODWORD(v5) = v36;
    if (v35 > v17) {
      goto LABEL_41;
    }
    if ((v34 & 1) == 0)
    {
      if (v10 != 125)
      {
LABEL_41:
        *offset = (int)v5;
        return -1;
      }

      ++*offset;
    }

    if (HIWORD(v14) > 0x10u) {
      goto LABEL_41;
    }
    uint64_t v25 = *offset;
    if ((int)v25 < v16 && (v14 & 0xFFFFFC00) == 0xD800)
    {
      offseta = v25 + 1;
      uint64_t v26 = ((uint64_t (*)(uint64_t, void *))v23)(v25, v37);
      if (v26 != 92)
      {
LABEL_51:
        if (v26 >> 10 == 55)
        {
          *offset = offseta;
          return v26 + (v14 << 10) - 56613888;
        }

        return v14;
      }

      if ((int)v25 + 1 < v16)
      {
        else {
          int v27 = v25 + 12;
        }
        uint64_t v26 = u_unescapeAt(v23, &offseta, v27, v37);
        goto LABEL_51;
      }
    }

    return v14;
  }

  if (v9 == 120)
  {
    if (*offset < length && ((unsigned int (*)(void))charAt)() == 123)
    {
      __int128 v36 = (int)v5;
      uint64_t v5 = charAt;
      __int128 v37 = context;
      uint64_t v13 = 0;
      int v14 = 0;
      ++*offset;
      __int128 v34 = 0;
      __int128 v35 = 1;
      size_t v12 = 8;
      goto LABEL_16;
    }

    size_t v12 = 2;
    __int128 v11 = 1;
    goto LABEL_15;
  }

  if (v9 >= 0x30 && (v9 & 0xFFF8) == 0x30)
  {
    __int128 v36 = (int)v5;
    uint64_t v5 = charAt;
    __int128 v37 = context;
    int v14 = v9 - 48;
    uint64_t v15 = 1;
    __int128 v34 = 1;
    LOBYTE(v11) = 3;
    uint64_t v13 = 1;
    size_t v12 = 3;
    goto LABEL_13;
  }

  int v28 = 0LL;
  do
  {
    int v29 = word_180A2C896[v28];
    if (v9 == v29) {
      return word_180A2C896[v28 + 1];
    }
    int v30 = v9 < v29 || v28 >= 0xE;
    v28 += 2LL;
  }

  while (!v30);
  if (v9 == 99)
  {
    if (*offset >= length)
    {
      return 99;
    }

    else
    {
      ++*offset;
      __int16 v31 = ((uint64_t (*)(void))charAt)();
      if ((v31 & 0xFC00) == 0xD800 && *offset < length)
      {
        __int128 v32 = ((uint64_t (*)(void))charAt)();
        if ((v32 & 0xFC00) == 0xDC00)
        {
          ++*offset;
          LOBYTE(v31) = v32;
        }
      }

      return v31 & 0x1F;
    }
  }

  else if ((v9 & 0xFC00) == 0xD800 && *offset < length)
  {
    uint64_t v33 = ((uint64_t (*)(void))charAt)();
    if ((v33 & 0xFC00) == 0xDC00)
    {
      ++*offset;
      return v33 + (v10 << 10) - 56613888;
    }
  }

  return v10;
}

    if ((int)a2 < (int)(a3 & 0xFFFFFFE0))
    {
      if (v9 == a4) {
        LODWORD(v27) = 0;
      }
      else {
        LODWORD(v27) = -1;
      }
      a2 = a2;
      int v28 = vdupq_n_s32(a4);
      int v29 = vdup_n_s32(v9);
      do
      {
        int v30 = a2 >> 5;
        __int16 v31 = *(unsigned int *)(a1 + 4 * (a2 >> 5));
        if ((int)v31 < 1)
        {
          __int128 v35 = (int)v31;
          __int128 v36 = v8[-(int)v31];
          if (a5) {
            __int128 v37 = 1;
          }
          else {
            __int128 v37 = (_DWORD)v31 == 0;
          }
          uint64_t v38 = v37;
          if (v36 != a4 && v38 != 0)
          {
            if ((v27 & 0x80000000) != 0)
            {
              int v27 = *(unsigned int *)(a1 + 139412);
              *(_DWORD *)(a1 + 139412) = v27 + 32;
              if ((v27 & 0x80000000) != 0) {
                return 0LL;
              }
              int v40 = 0LL;
              *(_DWORD *)(a1 + 4 * v30) = v27;
              __int128 v41 = &v8[-v35];
              __int128 v42 = &v8[v27];
              __int128 v43 = *(_OWORD *)v41;
              uint64_t v44 = *((_OWORD *)v41 + 1);
              BOOL v45 = *((_OWORD *)v41 + 3);
              *((_OWORD *)v42 + 2) = *((_OWORD *)v41 + 2);
              *((_OWORD *)v42 + 3) = v45;
              *(_OWORD *)__int128 v42 = v43;
              *((_OWORD *)v42 + 1) = v44;
              BOOL v46 = *((_OWORD *)v41 + 4);
              BOOL v47 = *((_OWORD *)v41 + 5);
              uint64_t v48 = *((_OWORD *)v41 + 7);
              *((_OWORD *)v42 + 6) = *((_OWORD *)v41 + 6);
              *((_OWORD *)v42 + 7) = v48;
              *((_OWORD *)v42 + 4) = v46;
              *((_OWORD *)v42 + 5) = v47;
              *(_DWORD *)(a1 + 4 * v30) = -(int)v27;
              int v8 = *v6;
              int v49 = (uint64_t)&(*v6)[v27];
              do
              {
                *(int32x4_t *)(v49 + v40) = v28;
                v40 += 16LL;
              }

              while (v40 != 128);
            }

            else
            {
              *(_DWORD *)(a1 + 4 * v30) = -(int)v27;
            }
          }
        }

        else
        {
          __int128 v32 = &v8[v31];
          uint64_t v33 = 0LL;
          if (a5)
          {
            do
            {
              *(int32x4_t *)&v32[v33] = v28;
              v33 += 4LL;
            }

            while (v33 != 32);
          }

          else
          {
            do
            {
              __int128 v34 = vceq_s32(*(int32x2_t *)&v32[v33], v29);
              if ((v34.i8[0] & 1) != 0) {
                v32[v33] = a4;
              }
              if ((v34.i8[4] & 1) != 0) {
                v32[v33 + 1] = a4;
              }
              v33 += 2LL;
            }

            while (v33 != 32);
          }
        }

        a2 += 32LL;
      }

      while ((int)(a3 & 0x1FFFE0) > (int)a2);
    }

    if ((a3 & 0x1F) == 0) {
      return 1LL;
    }
    unint64_t v50 = a2 >> 5;
    size_t v51 = *(unsigned int *)(a1 + 4LL * v50);
    unint64_t v54 = *(unsigned int *)(a1 + 139412);
    if ((int)v54 + 32 <= *(_DWORD *)(a1 + 139408))
    {
      *(_DWORD *)(a1 + 139412) = v54 + 32;
      if ((v54 & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 4 * v50) = v54;
        int32_t v55 = &v8[v54];
        unsigned int v56 = &v8[-(int)v51];
        uint64_t v57 = *(_OWORD *)v56;
        unsigned int v58 = *((_OWORD *)v56 + 1);
        uint64_t v59 = *((_OWORD *)v56 + 3);
        *((_OWORD *)v55 + 2) = *((_OWORD *)v56 + 2);
        *((_OWORD *)v55 + 3) = v59;
        *(_OWORD *)int32_t v55 = v57;
        *((_OWORD *)v55 + 1) = v58;
        unsigned int v60 = *((_OWORD *)v56 + 4);
        int v61 = *((_OWORD *)v56 + 5);
        uint64_t v62 = *((_OWORD *)v56 + 7);
        *((_OWORD *)v55 + 6) = *((_OWORD *)v56 + 6);
        *((_OWORD *)v55 + 7) = v62;
        *((_OWORD *)v55 + 4) = v60;
        *((_OWORD *)v55 + 5) = v61;
        int v8 = *v6;
        size_t v51 = v54;
LABEL_60:
        int v52 = &v8[v51];
        unint64_t v53 = &v52[a3 & 0x1F];
        if (a5)
        {
          uint64_t v5 = 1LL;
          do
            *v52++ = a4;
          while (v52 < v53);
        }

        else
        {
          do
          {
            if (*v52 == v9) {
              *int v52 = a4;
            }
            ++v52;
            uint64_t v5 = 1LL;
          }

          while (v52 < v53);
        }

        return v5;
      }
    }

    return 0LL;
  }

  uint64_t v15 = a3 & 0x1F;
  int v16 = v14 + 4LL * (a3 & 0x1F);
  int v17 = (unsigned int *)(v14 + 4LL * v10);
  if (a5)
  {
    uint64_t v5 = 1LL;
    do
      *v17++ = a4;
    while ((unint64_t)v17 < v16);
  }

  else
  {
    do
    {
      if (*v17 == v9) {
        *int v17 = a4;
      }
      ++v17;
      uint64_t v5 = 1LL;
    }

    while ((unint64_t)v17 < v16);
  }

  return v5;
}

  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v23);
  icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)&v28);
  return v15;
}

        if (v17 >= 0x1000)
        {
          __int128 v11 = v17 & 0xFC00;
          goto LABEL_3;
        }

  uint64_t v13 = *((unsigned __int16 *)a3 + 4);
  if (v13 >= 0x20)
  {
    int v14 = (__int16)v13;
    uint64_t v15 = v13 >> 5;
    if (v14 < 0) {
      uint64_t v15 = *((_DWORD *)a3 + 3);
    }
    if (icu::UnicodeString::doEqualsSubstring((uint64_t)a3, v15 - 1, 1, (uint64_t)" ", 0, 1))
    {
      int v16 = *((unsigned __int16 *)a3 + 4);
      else {
        int v17 = v16 >> 5;
      }
      int v18 = v17 - 1;
      if ((v16 & 1) != 0 && v17 == 1)
      {
        icu::UnicodeString::unBogus((uint64_t)a3);
      }

      else if (v17 > v18)
      {
        if (v18 > 1023)
        {
          *((_WORD *)a3 + 4) = v16 | 0xFFE0;
          *((_DWORD *)a3 + 3) = v18;
        }

        else
        {
          *((_WORD *)a3 + 4) = *((_WORD *)a3 + 4) & 0x1F | (32 * v18);
        }
      }
    }
  }

  return v6;
}

      uint64_t result = icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v26, ++v9, (const char **)&__s1, a3);
    }

    while ((_DWORD)result);
  }

  return result;
}

    icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)&v24);
    uint64_t v6 = v18 + 1;
    int v18 = v6;
    uint64_t v4 = (int *)*((void *)this + 29);
    if (v6 >= v4[802]) {
      goto LABEL_32;
    }
  }

  uint64_t v13 = sub_1808EBD0C(*((void *)this + 29), (uint64_t)&v24);
  if (v5 && v13) {
    goto LABEL_24;
  }
  if (!(_DWORD)v8)
  {
    int v10 = 0xFFFFLL;
    if (v5) {
      goto LABEL_31;
    }
LABEL_29:
    int v10 = (unsigned __int16)(((unsigned __int16)(v10 - 86) >> 2) | (((_WORD)v10 - 86) << 14));
    if (v10 <= 9)
    {
      int v10 = (1 << v10);
      if ((v10 & 0x303) != 0) {
        goto LABEL_31;
      }
    }

    goto LABEL_26;
  }

  int v14 = (unsigned __int16 *)*((void *)&v25 + 1);
  if ((v7 & 2) != 0) {
    int v14 = (unsigned __int16 *)&v24 + 5;
  }
  int v10 = *v14;
  if ((_DWORD)v10 == 109)
  {
LABEL_24:
    icu::UnicodeString::doAppend((uint64_t)&v28, (const icu::UnicodeString *)&v24, 0, v8);
LABEL_25:
    uint64_t v5 = 1;
    goto LABEL_26;
  }

  if ((_DWORD)v10 != 115)
  {
    if (v5) {
      goto LABEL_31;
    }
    goto LABEL_29;
  }

  if (v5)
  {
    icu::UnicodeString::doAppend((uint64_t)&v28, (const icu::UnicodeString *)&v24, 0, v8);
    int v10 = *((unsigned int *)this + 1198);
    else {
      *a3 = v10;
    }
  }

  uint64_t v13 = result[2];
  *((_OWORD *)v13 + 30) = 0u;
  *((_OWORD *)v13 + 31) = 0u;
  *((_OWORD *)v13 + 28) = 0u;
  *((_OWORD *)v13 + 29) = 0u;
  *((_OWORD *)v13 + 26) = 0u;
  *((_OWORD *)v13 + 27) = 0u;
  *((_OWORD *)v13 + 24) = 0u;
  *((_OWORD *)v13 + 25) = 0u;
  *((_OWORD *)v13 + 22) = 0u;
  *((_OWORD *)v13 + 23) = 0u;
  *((_OWORD *)v13 + 20) = 0u;
  *((_OWORD *)v13 + 21) = 0u;
  *((_OWORD *)v13 + 18) = 0u;
  *((_OWORD *)v13 + 19) = 0u;
  *((_OWORD *)v13 + 16) = 0u;
  *((_OWORD *)v13 + 17) = 0u;
  *((_OWORD *)v13 + 14) = 0u;
  *((_OWORD *)v13 + 15) = 0u;
  *((_OWORD *)v13 + 12) = 0u;
  *((_OWORD *)v13 + 13) = 0u;
  *((_OWORD *)v13 + 10) = 0u;
  *((_OWORD *)v13 + 11) = 0u;
  *((_OWORD *)v13 + 8) = 0u;
  *((_OWORD *)v13 + 9) = 0u;
  *((_OWORD *)v13 + 6) = 0u;
  *((_OWORD *)v13 + 7) = 0u;
  *((_OWORD *)v13 + 4) = 0u;
  *((_OWORD *)v13 + 5) = 0u;
  *((_OWORD *)v13 + 2) = 0u;
  *((_OWORD *)v13 + 3) = 0u;
  *(_OWORD *)uint64_t v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  int v14 = *((unsigned int *)result + 2);
  uint64_t v15 = result[2];
  if ((int)v14 >= 1)
  {
    int v16 = *result;
    do
    {
      int v17 = *v16++;
      ++*(_WORD *)&v15[2 * v17];
      --v14;
    }

    while (v14);
  }

  *((_BYTE *)result + 25) = 1;
  for (uint64_t i = 1LL; i != 256; ++i)
  {
    if (*(_WORD *)&v15[2 * i])
    {
      int v19 = i >= 0x20 || (i - 11) >= 0xFFFFFFFE;
      int v20 = v19 || i == 13;
      size_t v21 = !v20;
      if (i > 0x7E || v21)
      {
        *((_BYTE *)result + 25) = 0;
        if ((i & 0x7FFFFFE0) == 0x80) {
          *((_BYTE *)result + 24) = 1;
        }
      }
    }
  }

  return result;
}

    uint64_t v15 = U_ZERO_ERROR;
    uint64_t v33 = v35;
    __int128 v35 = 0LL;
LABEL_19:
    *(void *)a5 = off_1897252A8;
    *(void *)(a5 + 8) = v33;
    *(_DWORD *)(a5 + 16) = v15;
    uint64_t result = v35;
    if (!v35) {
      return result;
    }
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }

  int v10 = (a4 - 1);
  if (a4 != 1)
  {
    if (!a4)
    {
      uint64_t result = icu::UMemory::operator new((uint64_t *)a5, (icu::UMemory *)0x130, (unint64_t)a2);
      if (result)
      {
        uint64_t result = (uint64_t *)icu::FormattedValueStringBuilderImpl::FormattedValueStringBuilderImpl((uint64_t)result, 0);
        *uint64_t result = (uint64_t)&off_189725378;
        size_t v12 = *a3;
        *(void *)a5 = off_1897252A8;
        if (v12 > U_ZERO_ERROR)
        {
          *(void *)(a5 + 8) = 0LL;
          *(_DWORD *)(a5 + 16) = v12;
          return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
        }

        goto LABEL_21;
      }

      __int128 v34 = *a3;
      if (*(int *)a3 <= 0)
      {
        __int128 v34 = U_MEMORY_ALLOCATION_ERROR;
        *a3 = U_MEMORY_ALLOCATION_ERROR;
      }

      *(void *)a5 = off_1897252A8;
      *(void *)(a5 + 8) = 0LL;
      *(_DWORD *)(a5 + 16) = v34;
      return result;
    }

    __int128 v35 = 0LL;
    int v22 = icu::ListFormatter::needsBidiIsolates(this, a2);
    sub_1808FF50C((uint64_t *)&v35, (unint64_t)a2, v22, a3, v23);
    uint64_t v15 = *a3;
    int v24 = *((void *)this + 2) + 8LL;
    uint64_t v25 = icu::ListFormatter::needsBidiIsolates(this, (const icu::UnicodeString *)((char *)a2 + 64));
    sub_1808FF5EC((uint64_t *)&v35, v24, (uint64_t)a2 + 64, 1, v25, a3);
    if (a4 >= 4)
    {
      uint64_t v26 = (const icu::UnicodeString *)((char *)a2 + 128);
      int v27 = 2LL;
      do
      {
        int v28 = *((void *)this + 2) + 80LL;
        int v29 = icu::ListFormatter::needsBidiIsolates(this, v26);
        sub_1808FF5EC((uint64_t *)&v35, v28, (uint64_t)v26, v27++, v29, a3);
        uint64_t v26 = (const icu::UnicodeString *)((char *)v26 + 64);
      }

      while (v10 != v27);
    }

    int v30 = (const icu::UnicodeString *)((char *)a2 + 64 * (uint64_t)(int)v10);
    __int16 v31 = (*(uint64_t (**)(void, const icu::UnicodeString *))(**(void **)(*((void *)this + 2) + 152LL)
                                                                        + 40LL))( *(void *)(*((void *)this + 2) + 152LL),  v30);
    __int128 v32 = icu::ListFormatter::needsBidiIsolates(this, v30);
    sub_1808FF5EC((uint64_t *)&v35, v31, (uint64_t)v30, v10, v32, a3);
    icu::FormattedStringBuilder::writeTerminator((icu::FormattedStringBuilder *)(v35 + 1), a3);
    uint64_t v15 = *a3;
    goto LABEL_26;
  }

  __int128 v35 = 0LL;
  int v19 = icu::ListFormatter::needsBidiIsolates(this, a2);
  sub_1808FF50C((uint64_t *)&v35, (unint64_t)a2, v19, a3, v20);
  icu::FormattedStringBuilder::writeTerminator((icu::FormattedStringBuilder *)(v35 + 1), a3);
  size_t v21 = *a3;
  uint64_t result = v35;
  *(void *)a5 = off_1897252A8;
  if (v21 <= U_ZERO_ERROR)
  {
LABEL_21:
    *(void *)(a5 + 8) = result;
    *(_DWORD *)(a5 + 16) = 0;
    return result;
  }

  *(void *)(a5 + 8) = 0LL;
  *(_DWORD *)(a5 + 16) = v21;
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  return result;
}

  icu::UnicodeString::~UnicodeString((void *)v3, (icu::UnicodeString *)&v14);
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v18);
  return v6;
}

  Collator = (icu::RuleBasedCollator *)icu::RuleBasedNumberFormat::getCollator( *(icu::RuleBasedNumberFormat **)(a1 + 96),  v12,  v14);
  int v24 = Collator;
  if (Collator)
  {
    CollationElementIterator = icu::RuleBasedCollator::createCollationElementIterator(Collator, (UChar **)a2);
    uint64_t v26 = icu::RuleBasedCollator::createCollationElementIterator(v24, (UChar **)a3);
    int v27 = v26;
    if (CollationElementIterator && v26)
    {
      __int128 v37 = U_ZERO_ERROR;
      int v28 = icu::CollationElementIterator::next(CollationElementIterator, &v37);
      int v29 = icu::CollationElementIterator::next(v27, &v37);
      if (v29 != -1)
      {
        for (uint64_t i = v29; i != -1; uint64_t i = icu::CollationElementIterator::next(v27, &v37))
        {
          if (!HIWORD(v28))
          {
            do
              __int16 v31 = icu::CollationElementIterator::next(CollationElementIterator, &v37);
            while (v31 < 0x10000);
            int v28 = v31;
          }

          if (!HIWORD(i))
          {
            do
              __int128 v32 = icu::CollationElementIterator::next(v27, &v37);
            while (v32 < 0x10000);
            uint64_t i = v32;
          }

          if (i == -1) {
            break;
          }
          int v24 = 0LL;
          if (v28 == -1 || (i ^ v28) >> 16) {
            goto LABEL_57;
          }
          int v28 = icu::CollationElementIterator::next(CollationElementIterator, &v37);
        }
      }
    }

    else
    {
      int v24 = 0LL;
      *a4 = 7;
    }

  if ((_DWORD)v23 || !v29)
  {
    __int16 v31 = DefaultFractionDigitsForUsage & ~(DefaultFractionDigitsForUsage >> 31);
    else {
      __int128 v37 = v29;
    }
    if (v29 < 0) {
      uint64_t v38 = -1;
    }
    else {
      uint64_t v38 = v37;
    }
    int v86 = v38;
    else {
      int v23 = v23;
    }
    LODWORD(v35) = v80;
    if ((v21 & 0x80000000) != 0)
    {
      size_t v21 = 0xFFFFFFFFLL;
      __int128 v36 = v81;
    }

    else
    {
      __int128 v36 = v81;
      if ((int)v21 >= (int)v23)
      {
        else {
          size_t v21 = v21;
        }
      }

      else
      {
        size_t v21 = v23;
      }
    }
  }

  else
  {
    int v23 = 0LL;
    else {
      int v30 = 1;
    }
    if (v30) {
      __int16 v31 = 1LL;
    }
    else {
      __int16 v31 = DefaultFractionDigitsForUsage;
    }
    else {
      __int128 v32 = v29;
    }
    if (v29 < 0) {
      uint64_t v33 = -1;
    }
    else {
      uint64_t v33 = v32;
    }
    int v86 = v33;
    else {
      __int128 v34 = v21;
    }
    else {
      size_t v21 = v34;
    }
    LODWORD(v35) = v80;
    __int128 v36 = v81;
  }

  memset(v93, 0, sizeof(v93));
  if (!*(_BYTE *)(a1 + 56))
  {
    icu::number::Precision::constructCurrency(v18, (uint64_t)v92);
    icu::number::CurrencyPrecision::withCurrency( (icu::number::CurrencyPrecision *)v92,  (const UChar *)&v94,  (uint64_t)v89);
LABEL_91:
    LOBYTE(v27) = v84;
    uint64_t v82 = 0;
    v93[0] = v89[0];
    *(_OWORD *)((char *)v93 + 12) = *(_OWORD *)((char *)v89 + 12);
    goto LABEL_124;
  }

  if (v24 != 0.0)
  {
    v91 = v24;
    __int128 v41 = v24;
    if (!v27)
    {
      if ((icu::number::impl::PatternStringUtils::ignoreRoundingIncrement( (icu::number::impl::PatternStringUtils *)&v91,  (double *)v86) & 1) != 0)
      {
        icu::number::Precision::constructFraction(v31, v86, (uint64_t)v89);
        uint64_t v82 = 0;
        goto LABEL_115;
      }

      __int128 v41 = v91;
      int v27 = v84;
    }

    BOOL v45 = v24 / v41 + -1.0;
    BOOL v46 = v45 <= 0.001;
    if (v45 < -0.001) {
      BOOL v46 = 0;
    }
    uint64_t v82 = v46;
    if (!v46)
    {
      v91 = v24;
      __int128 v41 = v24;
    }

    if (v27)
    {
      BOOL v47 = v85;
      if (v85 >= 999) {
        BOOL v47 = 999;
      }
      if (v47 <= 1) {
        uint64_t v48 = 1LL;
      }
      else {
        uint64_t v48 = v47;
      }
      else {
        int v49 = v35;
      }
      else {
        LODWORD(v35) = 999;
      }
      uint64_t v85 = v48;
      icu::number::Precision::constructIncrementSignificant(v48, v41, v35, (uint64_t)v89);
      v93[0] = v89[0];
      *(_OWORD *)((char *)v93 + 12) = *(_OWORD *)((char *)v89 + 12);
      goto LABEL_116;
    }

    icu::number::Precision::increment(v41, (uint64_t)v92);
    icu::number::IncrementPrecision::withMinFraction((uint64_t)v92, v31, (uint64_t)v89);
LABEL_115:
    v93[0] = v89[0];
    *(_OWORD *)((char *)v93 + 12) = *(_OWORD *)((char *)v89 + 12);
    LODWORD(v35) = -1;
    uint64_t v85 = -1;
LABEL_116:
    LOBYTE(v27) = v84;
    goto LABEL_124;
  }

  if (v27)
  {
    __int128 v42 = v85;
    if (v85 >= 999) {
      __int128 v42 = 999;
    }
    if (v42 <= 1) {
      __int128 v43 = 1LL;
    }
    else {
      __int128 v43 = v42;
    }
    else {
      uint64_t v44 = v35;
    }
    else {
      LODWORD(v35) = 999;
    }
    uint64_t v85 = v43;
    icu::number::Precision::constructSignificant(v43, v35, (uint64_t)v89);
    goto LABEL_91;
  }

  if (v26)
  {
    icu::number::Precision::constructFraction(v31, v86, (uint64_t)v89);
  }

  else
  {
    if (!v17)
    {
      uint64_t v82 = 0;
      goto LABEL_123;
    }

    icu::number::Precision::constructCurrency(v18, (uint64_t)v89);
  }

  LOBYTE(v27) = v84;
  uint64_t v82 = 0;
  v93[0] = v89[0];
  *(_OWORD *)((char *)v93 + 12) = *(_OWORD *)((char *)v89 + 12);
LABEL_123:
  LODWORD(v35) = -1;
  uint64_t v85 = -1;
LABEL_124:
  unint64_t v50 = v93[0];
  if (LODWORD(v93[0]))
  {
    *(_DWORD *)(a6 + 96) = v88;
    *__int128 v36 = v93[0];
    *(_OWORD *)((char *)v36 + 12) = *(_OWORD *)((char *)v93 + 12);
  }

  size_t v51 = (*(_BYTE *)(a1 + 757) == 0) & ~v27;
  if (v86 <= 15) {
    size_t v51 = 0;
  }
  *(_BYTE *)(a6 + 244) = v51;
  icu::number::IntegerWidth::IntegerWidth((uint64_t)v89, v23, v21, *(_BYTE *)(a1 + 68));
  *(void *)uint64_t v13 = *(void *)&v89[0];
  *(_BYTE *)(v13 + 8) = BYTE8(v89[0]);
  unint64_t v53 = (icu::number::Notation *)icu::number::impl::Grouper::forProperties((icu::number::impl::Grouper *)a1, v52);
  *(void *)(a6 + 100) = v53;
  *(_DWORD *)(a6 + 108) = (_DWORD)v54;
  if (*(int *)(a1 + 72) >= 1)
  {
    unint64_t v53 = (icu::number::Notation *)icu::number::impl::Padder::forProperties((icu::number::impl::Padder *)a1, v54);
    *(void *)(a6 + 112) = v53;
    *(_DWORD *)(a6 + 120) = (_DWORD)v54;
  }

  *(_DWORD *)(a6 + 164) = *(unsigned __int8 *)(a1 + 65);
  *(_DWORD *)(a6 + 156) = *(unsigned __int8 *)(a1 + 756);
  if (*(_DWORD *)(a1 + 100) != -1)
  {
    if ((int)v21 < 9)
    {
      if ((int)v23 >= 2 && (int)v21 > (int)v23)
      {
        LODWORD(v23) = 1;
        *(void *)&v89[0] = icu::number::IntegerWidth::zeroFillTo((icu::number::IntegerWidth *)1);
        DWORD2(v89[0]) = v57;
        *(void *)(a6 + 124) = icu::number::IntegerWidth::truncateAt((icu::number::IntegerWidth *)v89, v21);
        *(_BYTE *)(a6 + 132) = v58;
      }
    }

    else
    {
      *(void *)&v89[0] = icu::number::IntegerWidth::zeroFillTo((icu::number::IntegerWidth *)v23);
      DWORD2(v89[0]) = v55;
      *(void *)(a6 + 124) = icu::number::IntegerWidth::truncateAt((icu::number::IntegerWidth *)v89, v23);
      *(_BYTE *)(a6 + 132) = v56;
      LODWORD(v21) = v23;
    }

    else {
      uint64_t v59 = v21;
    }
    unint64_t v53 = (icu::number::Notation *)icu::number::ScientificNotation::ScientificNotation( (uint64_t)v89,  v59,  v59 == v23,  *(_WORD *)(a1 + 100),  *(unsigned __int8 *)(a1 + 66));
    *(void *)int v79 = *(void *)&v89[0];
    *(_DWORD *)(v79 + 8) = DWORD2(v89[0]);
    if (*(_DWORD *)v36 == 2)
    {
      unsigned int v60 = *(_DWORD *)(a1 + 112);
      int v61 = *(_DWORD *)(a1 + 88);
      if (v60 | v61)
      {
        uint64_t v62 = *(_DWORD *)(a1 + 104);
        if (v60 | v62)
        {
          int v63 = v61 + v60;
          if (v60 > 1 && *(_DWORD *)(a1 + 92) > v60) {
            unsigned int v60 = 1;
          }
          int v64 = (v60 + v62);
        }

        else
        {
          int v63 = v61 + 1;
          int v64 = 1LL;
        }

        unint64_t v53 = (icu::number::Notation *)icu::number::Precision::constructSignificant(v64, v63, (uint64_t)v89);
      }

      else
      {
        icu::number::Precision::unlimited((uint64_t)v89);
      }

      *__int128 v36 = v89[0];
      *(_OWORD *)((char *)v36 + 12) = *(_OWORD *)((char *)v89 + 12);
      *(_DWORD *)(a6 + 96) = v88;
    }
  }

  if (!*(_BYTE *)a1)
  {
    if (*(_DWORD *)(a1 + 4) == 1) {
      unsigned int v66 = icu::number::Notation::compactLong(v53);
    }
    else {
      unsigned int v66 = icu::number::Notation::compactShort(v53);
    }
    *(void *)(a6 + 4) = v66;
    *(_DWORD *)(a6 + 12) = (_DWORD)v54;
  }

  uint64_t v67 = *(_DWORD *)(a1 + 84);
  unsigned int v68 = *(_DWORD *)(a1 + 120);
  int v69 = *(_DWORD *)(a1 + 124);
  int v70 = (v69 + v67);
  if (!(v69 + v67) || v68 == 1)
  {
    int32_t v71 = a4;
    if ((_DWORD)v70)
    {
      icu::number::Scale::powerOfTen(v70, (uint64_t)v89);
    }

    else if (v68 == 1)
    {
      icu::number::Scale::none((uint64_t)v89);
    }

    else
    {
      icu::number::Scale::byDouble((double)v68, (unint64_t)v54, (uint64_t)v89);
    }
  }

  else
  {
    icu::number::Scale::byDoubleAndPowerOfTen( (icu::number::Scale *)v70,  (double)v68,  (unint64_t)v54,  (uint64_t)v89);
    int32_t v71 = a4;
  }

  icu::number::Scale::operator=(a6 + 168, (uint64_t)v89);
  icu::number::Scale::~Scale((icu::number::Scale *)v89);
  if (v71)
  {
    icu::CurrencyUnit::operator=(v71 + 16, (unint64_t)&v94);
    *(_BYTE *)(v71 + 8) = 0;
    *(_DWORD *)(v71 + 748) = v88;
    *(_BYTE *)(v71 + 744) = 0;
    *(_DWORD *)(v71 + 112) = v23;
    if ((_DWORD)v21 == -1) {
      unsigned int v72 = 0x7FFFFFFF;
    }
    else {
      unsigned int v72 = v21;
    }
    *(_DWORD *)(v71 + 92) = v72;
    if (v50 == 8)
    {
      icu::number::Precision::withCurrency( (icu::number::Precision *)v93,  (const UChar *)&v94,  (UErrorCode *)v78,  (uint64_t)v89);
      unint64_t v50 = v89[0];
      int v73 = *((int64_t *)&v89[0] + 1);
      char v74 = v89[1];
      uint64_t v75 = WORD1(v89[1]);
    }

    else
    {
      int v73 = *((int64_t *)&v93[0] + 1);
      char v74 = v93[1];
      uint64_t v75 = WORD1(v93[1]);
    }

    if (v50 == 2)
    {
      LODWORD(v31) = (__int16)v73;
      int v76 = (int)v73 >> 16;
      int v24 = 0.0;
    }

    else
    {
      if ((v50 - 5) > 2)
      {
        if (v50 == 9)
        {
          if (!v82) {
            int v24 = *(double *)&v73;
          }
          int v77 = v74;
          LODWORD(v35) = v75;
        }

        else
        {
          int v24 = 0.0;
          if (v50 == 3)
          {
            int v77 = (int)((unint64_t)v73 >> 16) >> 16;
            __int128 v35 = v73 >> 48;
          }

          else
          {
            int v77 = v85;
          }
        }

        int v76 = v86;
        goto LABEL_185;
      }

      LODWORD(v31) = v75;
      uint64_t v90 = 0LL;
      memset(v89, 0, sizeof(v89));
      icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v89);
      icu::number::impl::DecimalQuantity::setToLong((void **)v89, v73);
      icu::number::impl::DecimalQuantity::adjustMagnitude((icu::number::impl::DecimalQuantity *)v89, v74);
      int v24 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v89);
      icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v89);
      int v76 = v31;
    }

    int v77 = v85;
LABEL_185:
    *(_DWORD *)(v71 + 104) = v31;
    *(_DWORD *)(v71 + 88) = v76;
    *(_DWORD *)(v71 + 116) = v77;
    *(_DWORD *)(v71 + 96) = v35;
    *(double *)(v71 + 736) = v24;
  }

  icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)&v94);
  icu::Locale::~Locale((icu::Locale *)v96);
}

      size_t v12 = (icu::Region *)(*(uint64_t (**)(uint64_t *, void, icu::Region *))(*v9 + 40))(v9, 0LL, a3);
      uint64_t v15 = (uint64_t *)*(unsigned int *)a3;
      if (v12) {
        int v23 = (int)v15 < 1;
      }
      else {
        int v23 = 0;
      }
      if (!v23) {
        goto LABEL_30;
      }
    }
  }

  __int128 v11 = 0LL;
  *(_DWORD *)a3 = 7;
LABEL_36:
  icu::UVector::~UVector((icu::UVector *)v26);
  return v11;
}

      ++v4;
    }

    while (v6 != v4);
  }

  return this;
}

        if (v11 == ++v12) {
          goto LABEL_29;
        }
      }

      NextResource = ures_getNextResource(v14, (uint64_t)NextResource, (int *)this);
      memset(v90, 0, 64);
      icu::UnicodeString::UnicodeString(v90, v17, 0xFFFFFFFFLL, 0LL);
      int v18 = (char *)ures_getKey((uint64_t)NextResource);
      char v88 = 0LL;
      int v19 = *v18;
      switch((_DWORD)v19)
      {
        case 'a':
          String = ures_getString((uint64_t)NextResource, (int *)&v88 + 1, (int *)this);
          int v22 = qword_18C535A60;
          int v86 = String;
          icu::UnicodeString::UnicodeString(v89, 1LL, &v86);
          sub_18099CFF0(v22, (unint64_t)v90, (uint64_t)v89, 1, 1, v23);
          icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)v89);
          int v79 = v86;
          int v19 = (unint64_t)&v79;
          break;
        case 'i':
          int v20 = 0;
          goto LABEL_21;
        case 'f':
          int v20 = 1;
LABEL_21:
          StringByuint64_t Key = ures_getStringByKey((uint64_t)NextResource, "resource", (int *)&v88 + 1, (int *)this);
          uint64_t v26 = ures_getStringByKey((uint64_t)NextResource, "direction", (int *)&v88, (int *)this);
          char v74 = v20;
          int v27 = (int)v88 < 1 || *v26 == 70;
          int v28 = !v27;
          int v29 = qword_18C535A60;
          BOOL v87 = StringByKey;
          icu::UnicodeString::UnicodeString(v89, 1LL, &v87);
          sub_18099CEEC(v29, (unint64_t)v90, (uint64_t)v89, v28, 1, v74, this, v30);
          icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)v89);
          int v78 = v87;
          int v19 = (unint64_t)&v78;
          break;
      }

      icu::UnicodeString::~UnicodeString((void *)v19, (icu::UnicodeString *)v90);
      goto LABEL_26;
    }

    int v14 = 0LL;
    NextResource = 0LL;
LABEL_29:
    ures_close((uint64_t)NextResource);
    ures_close(v14);
    UErrorCode v7 = v73;
  }

  ures_close(v9);
  ures_close(v7);
  __int128 v34 = icu::UMemory::operator new(v33, (icu::UMemory *)0x58, v32);
  __int128 v37 = (unint64_t)v34;
  if (v34) {
    sub_18091B298(v34);
  }
  uint64_t v38 = icu::UMemory::operator new(v36, (icu::UMemory *)0x60, v35);
  __int128 v41 = (unint64_t)v38;
  if (v38) {
    sub_180998814(v38);
  }
  __int128 v42 = icu::UMemory::operator new(v40, (icu::UMemory *)0x60, v39);
  BOOL v45 = (unint64_t)v42;
  if (v42) {
    sub_18099892C(v42);
  }
  BOOL v46 = icu::UMemory::operator new(v44, (icu::UMemory *)0x60, v43);
  int v49 = (unint64_t)v46;
  if (v46) {
    sub_18099642C(v46);
  }
  unint64_t v50 = icu::UMemory::operator new(v48, (icu::UMemory *)0x58, v47);
  unint64_t v53 = (unint64_t)v50;
  if (v50) {
    sub_1809BEAF0(v50, 0LL);
  }
  unint64_t v54 = icu::UMemory::operator new(v52, (icu::UMemory *)0x120, v51);
  uint64_t v57 = (unint64_t)v54;
  if (v54) {
    sub_180913410(v54, 0LL);
  }
  unsigned int v58 = icu::UMemory::operator new(v56, (icu::UMemory *)0xA8, v55);
  uint64_t v59 = (unint64_t)v58;
  if (v58 && (sub_180898624(v58, 0LL), v57) && v37 && v41 && v45 && v49 && v53)
  {
    uint64_t v2 = 1LL;
    sub_18099CC58(qword_18C535A60, v37, 1, this, v60);
    sub_18099CC58(qword_18C535A60, v41, 1, this, v61);
    sub_18099CC58(qword_18C535A60, v45, 1, this, v62);
    sub_18099CC58(qword_18C535A60, v49, 1, this, v63);
    sub_18099CC58(qword_18C535A60, v53, 1, this, v64);
    sub_18099CC58(qword_18C535A60, v57, 1, this, v65);
    sub_18099CC58(qword_18C535A60, v59, 0, this, v66);
    sub_18097B400();
    sub_1808F0EE8();
    sub_1809BE140();
    sub_18091AAE8();
    sub_180894ADC();
    uint64_t v85 = L"Null";
    icu::UnicodeString::UnicodeString(v90, 1LL, &v85);
    int v84 = L"Null";
    icu::UnicodeString::UnicodeString(v89, 1LL, &v84);
    HIDWORD(v88) = 0;
    sub_1809A03B8((uint64_t)v90, (uint64_t)v89, 0, (int *)&v88 + 1);
    icu::UnicodeString::~UnicodeString(v67, (icu::UnicodeString *)v89);
    int v77 = v84;
    unsigned int v68 = icu::UnicodeString::~UnicodeString(&v77, (icu::UnicodeString *)v90);
    v76[1] = v85;
    int v83 = "U";
    icu::UnicodeString::UnicodeString(v68, 1LL, &v83);
    uint64_t v82 = "L";
    icu::UnicodeString::UnicodeString(v89, 1LL, &v82);
    HIDWORD(v88) = 0;
    sub_1809A03B8((uint64_t)v90, (uint64_t)v89, 1, (int *)&v88 + 1);
    icu::UnicodeString::~UnicodeString(v69, (icu::UnicodeString *)v89);
    v76[0] = v82;
    int v70 = icu::UnicodeString::~UnicodeString(v76, (icu::UnicodeString *)v90);
    v75[1] = v83;
    UErrorCode v81 = "T";
    icu::UnicodeString::UnicodeString(v70, 1LL, &v81);
    int v80 = "L";
    icu::UnicodeString::UnicodeString(v89, 1LL, &v80);
    HIDWORD(v88) = 0;
    sub_1809A03B8((uint64_t)v90, (uint64_t)v89, 0, (int *)&v88 + 1);
    icu::UnicodeString::~UnicodeString(v71, (icu::UnicodeString *)v89);
    v75[0] = v80;
    icu::UnicodeString::~UnicodeString(v75, (icu::UnicodeString *)v90);
    sub_1809B36C0(5u, (uint64_t)sub_18099B798);
  }

  else
  {
    if (v37) {
      (*(void (**)(unint64_t))(*(void *)v37 + 8LL))(v37);
    }
    if (v41) {
      (*(void (**)(unint64_t))(*(void *)v41 + 8LL))(v41);
    }
    if (v45) {
      (*(void (**)(unint64_t))(*(void *)v45 + 8LL))(v45);
    }
    if (v49) {
      (*(void (**)(unint64_t))(*(void *)v49 + 8LL))(v49);
    }
    if (v53) {
      (*(void (**)(unint64_t))(*(void *)v53 + 8LL))(v53);
    }
    if (v57) {
      (*(void (**)(unint64_t))(*(void *)v57 + 8LL))(v57);
    }
    if (v59) {
      (*(void (**)(unint64_t))(*(void *)v59 + 8LL))(v59);
    }
    if (qword_18C535A60)
    {
      unsigned int v72 = (void *)sub_18099C4C8();
      icu::UMemory::operator delete(v72);
    }

    uint64_t v2 = 0LL;
    qword_18C535A60 = 0LL;
    *this = U_MEMORY_ALLOCATION_ERROR;
  }

  return v2;
}

      int v10 = 0;
      UErrorCode v7 = 3;
      *a2 = 3;
    }

    else
    {
      int v8 = 0;
      size_t v9 = 0;
      int v10 = 0;
    }

LABEL_61:
  if (BYTE4(v41[1])) {
    uprv_free(v41[0]);
  }
  if (LOBYTE(__n[4])) {
    uprv_free(*(void **)&__n[1]);
  }
}

              int v17 = 0;
              goto LABEL_64;
          }

          goto LABEL_57;
        }

        switch(v14)
        {
          case 'S':
            LOWORD(v36[0]) = 92;
            uint64_t v26 = uprv_itou((__int16 *)v36 + 1, 47, v8, 0x10u, 0LL);
            int v17 = v26 + 2;
            *((_WORD *)v36 + v26 + 1) = 32;
            goto LABEL_64;
          case 'U':
            LODWORD(v36[0]) = 5570683;
            WORD2(v36[0]) = 43;
            if ((_DWORD)v9 != 2) {
              int v8 = *a3;
            }
            int v27 = uprv_itou((__int16 *)v36 + 3, 45, v8, 0x10u, 4LL);
            int v17 = v27 + 4;
            size_t v21 = (char *)v36 + 2 * v27;
            int v22 = 125;
            break;
          case 'X':
            LODWORD(v36[0]) = 2293798;
            WORD2(v36[0]) = 120;
            if ((_DWORD)v9 != 2) {
              int v8 = *a3;
            }
            int v20 = uprv_itou((__int16 *)v36 + 3, 45, v8, 0x10u, 0LL);
            int v17 = v20 + 4;
            size_t v21 = (char *)v36 + 2 * v20;
            int v22 = 59;
            break;
          default:
LABEL_57:
            int v28 = 0;
            size_t v9 = v9;
            do
            {
              *(_DWORD *)((char *)v36 + 2 * v28) = 5570597;
              int v29 = *a3++;
              v28 += uprv_itou((__int16 *)v36 + v28 + 2, 46 - v28, v29, 0x10u, 4LL) + 2;
              int v17 = v28;
              --v9;
            }

            while (v9);
            goto LABEL_64;
        }

        *((_WORD *)v21 + 3) = v22;
        goto LABEL_64;
      }

        uint64_t v6 = 0LL;
        *(_DWORD *)(a1 + 24) = 0;
        *(_DWORD *)(a1 + 12) = 0;
        *(_DWORD *)(a1 + 16) = 0;
        return v6;
      }

      UErrorCode v7 = 0xFFFFFFFFLL;
      size_t v9 = *(unsigned int *)(a1 + 20);
      *(_DWORD *)(a1 + 12) = v9;
      *(_DWORD *)(a1 + 16) = -1;
      *(_DWORD *)(a1 + 24) = 0;
      if ((a2 & 0x80000000) == 0) {
        return 4294967294LL;
      }
LABEL_56:
      int v23 = *(_DWORD *)(a1 + 20);
      int v24 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 12) = v23;
      *(_DWORD *)(a1 + 16) = v24;
      *(_DWORD *)(a1 + 24) = 0;
      if (v24 < 0) {
        return 4294967294LL;
      }
      else {
        return v24;
      }
    default:
      return 0xFFFFFFFFLL;
  }

      if (src >= v11 - 3) {
        goto LABEL_65;
      }
    }
  }

  size_t v12 = 0;
  if (dest) {
    uint64_t v13 = &dest[destCapacity];
  }
  else {
    uint64_t v13 = 0LL;
  }
  int v14 = *(unsigned __int8 *)src;
  if (!*src || v13 <= dest)
  {
    uint64_t v15 = dest;
    goto LABEL_94;
  }

  uint64_t v15 = dest;
  while (1)
  {
    if (v14 <= 0xBF)
    {
      *v15++ = v14;
      ++src;
      goto LABEL_45;
    }

    if (v14 <= 0xDF)
    {
      if (!src[1]) {
        goto LABEL_78;
      }
      *v15++ = *((unsigned __int8 *)src + 1) + ((_WORD)v14 << 6) - 12416;
      src += 2;
      goto LABEL_45;
    }

    int v16 = *((unsigned __int8 *)src + 1);
    if (v14 > 0xEF) {
      break;
    }
    if (!src[1] || !src[2]) {
      goto LABEL_78;
    }
    *v15++ = ((_WORD)v16 << 6) + ((_WORD)v14 << 12) + *((unsigned __int8 *)src + 2) - 8320;
    src += 3;
LABEL_45:
    int v14 = *(unsigned __int8 *)src;
    if (*src) {
      int v20 = v15 >= v13;
    }
    else {
      int v20 = 1;
    }
    if (v20)
    {
      size_t v12 = 0;
      goto LABEL_94;
    }
  }

  if (!src[1] || (int v17 = *((unsigned __int8 *)src + 2), !src[2]) || (v18 = *((unsigned __int8 *)src + 3), !src[3]))
  {
LABEL_78:
    size_t v12 = 0;
    *v15++ = -3;
    goto LABEL_97;
  }

  src += 4;
  int v19 = (v14 << 18) - 63447168 + (v16 << 12) + (v17 << 6) + v18;
  *uint64_t v15 = (v19 >> 10) - 10304;
  if (v15 + 1 < v13)
  {
    v15[1] = v19 & 0x3FF | 0xDC00;
    v15 += 2;
    goto LABEL_45;
  }

  int v14 = *(unsigned __int8 *)src;
  size_t v12 = 1;
  ++v15;
LABEL_94:
  while (v14)
  {
    if (v14 > 0xBF)
    {
      if (v14 > 0xDF)
      {
        if (v14 > 0xEF)
        {
          if (!src[1] || !src[2] || !src[3])
          {
LABEL_96:
            ++v12;
            break;
          }

          __int128 v34 = 2;
          __int128 v35 = 4LL;
        }

        else
        {
          if (!src[1] || !src[2]) {
            goto LABEL_96;
          }
          __int128 v34 = 1;
          __int128 v35 = 3LL;
        }
      }

      else
      {
        if (!src[1]) {
          goto LABEL_96;
        }
        __int128 v34 = 1;
        __int128 v35 = 2LL;
      }
    }

    else
    {
      __int128 v34 = 1;
      __int128 v35 = 1LL;
    }

    v12 += v34;
    src += v35;
    int v14 = *(unsigned __int8 *)src;
  }

        sub_180887FB8(v35, a1, &v63, a2, a3);
      }

      else
      {
        switch(v18)
        {
          case 'b':
            int v19 = v64++;
            int v20 = *(int *)v19;
            for (uint64_t i = 4LL; i != -4; i -= 4LL)
              sub_180887FB8(a0123456789abcd_0[(v20 >> i) & 0xF], a1, &v63, a2, 0);
            goto LABEL_2;
          case 'c':
            __int128 v36 = v64++;
            __int128 v35 = *(char *)v36;
            goto LABEL_61;
          case 'd':
            __int128 v37 = v64++;
            uint64_t v38 = *(int *)v37;
            for (uint64_t j = 28LL; j != -4; j -= 4LL)
              sub_180887FB8(a0123456789abcd_0[(v38 >> j) & 0xF], a1, &v63, a2, 0);
            goto LABEL_2;
          case 'e':
          case 'f':
          case 'g':
          case 'i':
          case 'j':
          case 'k':
          case 'm':
          case 'n':
          case 'o':
            goto LABEL_48;
          case 'h':
            int v40 = v64++;
            __int128 v41 = *(int *)v40;
            for (k = 12LL; k != -4; k -= 4LL)
              sub_180887FB8(a0123456789abcd_0[(v41 >> k) & 0xF], a1, &v63, a2, 0);
            goto LABEL_2;
          case 'l':
            __int128 v43 = v64++;
            size_t v9 = *v43;
            for (m = 60LL; m != -4; m -= 4LL)
              sub_180887FB8(a0123456789abcd_0[(v9 >> m) & 0xF], a1, &v63, a2, 0);
            goto LABEL_2;
          case 'p':
            BOOL v45 = v64++;
            sub_1808881EC(*v45, a1, &v63, a2);
            goto LABEL_2;
          default:
            if (v18 == 115)
            {
              BOOL v46 = (const char **)v64++;
              BOOL v47 = *v46;
              if (v47) {
                uint64_t v48 = v47;
              }
              else {
                uint64_t v48 = "*NULL*";
              }
              do
              {
                int v49 = *v48++;
                sub_180887FB8(v49, a1, &v63, a2, a3);
              }

              while (v49);
            }

            else
            {
              if (v18 != 118) {
                goto LABEL_48;
              }
              int v24 = *(char *)(a4 + v10);
              if (*(_BYTE *)(a4 + v10)) {
                int v10 = v12;
              }
              uint64_t v25 = v64++;
              uint64_t v26 = (uint64_t *)*v25;
              int v64 = v25 + 2;
              int v27 = *((_DWORD *)v25 + 2);
              if (v26)
              {
                if (v27 == -1 || v27 >= 1)
                {
                  int v29 = 0;
                  unsigned int v60 = v24;
                  int v61 = 0;
                  unsigned int v56 = v26;
                  uint64_t v57 = v26;
                  int32_t v55 = v26;
                  unsigned int v58 = v26;
                  uint64_t v59 = v26;
                  while (2)
                  {
                    switch(v24)
                    {
                      case 'b':
                        size_t v9 = *(char *)v58;
                        unsigned int v58 = (uint64_t *)((char *)v58 + 1);
                        int v30 = 2;
                        goto LABEL_39;
                      case 'c':
                        sub_180887FB8(*(char *)v58, a1, &v63, a2, a3);
                        int v61 = 0;
                        size_t v9 = *(char *)v58;
                        unsigned int v58 = (uint64_t *)((char *)v58 + 1);
                        goto LABEL_43;
                      case 'd':
                        size_t v9 = *(int *)v56;
                        unsigned int v56 = (uint64_t *)((char *)v56 + 4);
                        int v30 = 8;
                        goto LABEL_39;
                      case 'e':
                      case 'f':
                      case 'g':
                      case 'i':
                      case 'j':
                      case 'k':
                      case 'm':
                      case 'n':
                      case 'o':
                        goto LABEL_33;
                      case 'h':
                        size_t v9 = *(__int16 *)v55;
                        int32_t v55 = (uint64_t *)((char *)v55 + 2);
                        int v30 = 4;
                        goto LABEL_39;
                      case 'l':
                        size_t v9 = *v57++;
                        int v30 = 16;
                        goto LABEL_39;
                      case 'p':
                        __int128 v34 = v59;
                        sub_1808881EC(*v59, a1, &v63, a2);
                        goto LABEL_42;
                      default:
                        if (v24 == 83)
                        {
                          __int128 v34 = v59;
                          sub_180888060(*v59, -1, a1, &v63, a2, a3);
                          sub_180887FB8(10LL, a1, &v63, a2, a3);
LABEL_42:
                          int v61 = 0;
                          uint64_t v59 = v34 + 1;
                          size_t v9 = *v34 != 0;
                        }

                        else if (v24 == 115)
                        {
                          if (*v59) {
                            __int16 v31 = (const char *)*v59;
                          }
                          else {
                            __int16 v31 = "*NULL*";
                          }
                          do
                          {
                            __int128 v32 = *v31++;
                            sub_180887FB8(v32, a1, &v63, a2, a3);
                          }

                          while (v32);
                          sub_180887FB8(10LL, a1, &v63, a2, a3);
                          int v61 = 0;
                          uint64_t v33 = *v59++;
                          size_t v9 = v33 != 0;
                        }

                        else
                        {
LABEL_33:
                          int v30 = v61;
                          if (v61 >= 1)
                          {
LABEL_39:
                            int v61 = v30;
                            sub_180888174(v9, v30, a1, &v63, a2);
                            sub_180887FB8(32LL, a1, &v63, a2, a3);
                          }
                        }

    icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v36);
    uint64_t v38 = 0u;
    __int128 v39 = 0u;
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    icu::CanonicalIterator::next((icu::CanonicalIterator *)&v40, (icu::UnicodeString *)&v36);
    int v20 = (void *)WORD4(v36);
    if ((BYTE8(v36) & 1) != 0) {
      goto LABEL_62;
    }
  }

  if ((BYTE8(v36) & 1) != 0)
  {
    int v23 = *((_WORD *)a2 + 4) & 1;
  }

  else
  {
    int v23 = 0;
    if ((SWORD4(v36) & 0x8000u) == 0) {
      int v24 = WORD4(v36) >> 5;
    }
    else {
      int v24 = HIDWORD(v36);
    }
    uint64_t v25 = *((unsigned __int16 *)a2 + 4);
    if ((v25 & 0x8000u) == 0) {
      uint64_t v26 = v25 >> 5;
    }
    else {
      uint64_t v26 = *((_DWORD *)a2 + 3);
    }
    if ((v25 & 1) == 0 && v24 == v26) {
      int v23 = icu::UnicodeString::doEquals((icu::UnicodeString *)&v36, a2, v24);
    }
  }

  while (1)
  {
    memset(v33, 0, sizeof(v33));
    icu::CanonicalIterator::next((icu::CanonicalIterator *)v34, (icu::UnicodeString *)v33);
    if ((BYTE8(v33[0]) & 1) != 0)
    {
      icu::UnicodeString::~UnicodeString((void *)WORD4(v33[0]), (icu::UnicodeString *)v33);
      icu::CanonicalIterator::reset((uint64_t)v34);
      goto LABEL_61;
    }

    if (icu::CollationBuilder::ignoreString((icu::CollationBuilder *)this, (const icu::UnicodeString *)v33, a7)) {
      goto LABEL_58;
    }
    if (v23)
    {
      if ((BYTE8(v33[0]) & 1) != 0)
      {
        int v27 = *((unsigned __int16 *)a3 + 4);
        if ((v27 & 1) != 0) {
          goto LABEL_58;
        }
      }

      else
      {
        if ((SWORD4(v33[0]) & 0x8000u) == 0) {
          int v28 = WORD4(v33[0]) >> 5;
        }
        else {
          int v28 = HIDWORD(v33[0]);
        }
        int v29 = *((unsigned __int16 *)a3 + 4);
        if ((v29 & 0x8000u) == 0) {
          int v30 = v29 >> 5;
        }
        else {
          int v30 = *((_DWORD *)a3 + 3);
        }
        if ((v29 & 1) == 0 && v28 == v30 && icu::UnicodeString::doEquals((icu::UnicodeString *)v33, a3, v28)) {
          goto LABEL_58;
        }
      }
    }

    if (v21 >= 6561) {
      break;
    }
    a6 = icu::CollationBuilder::addIfDifferent( this,  (const icu::UnicodeString *)&v36,  (const icu::UnicodeString *)v33,  a4,  a5,  a6,  a7);
    int v27 = *(unsigned int *)a7;
    ++v21;
LABEL_58:
    icu::UnicodeString::~UnicodeString((void *)v27, (icu::UnicodeString *)v33);
  }

  int v27 = 31LL;
  *a7 = U_STANDARD_ERROR_LIMIT;
LABEL_67:
  icu::UnicodeString::~UnicodeString((void *)v27, (icu::UnicodeString *)v33);
  icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)&v36);
LABEL_63:
  icu::CanonicalIterator::~CanonicalIterator((icu::CanonicalIterator *)v34);
LABEL_64:
  icu::CanonicalIterator::~CanonicalIterator((icu::CanonicalIterator *)&v40);
  return a6;
}

  if (v16 >= 3)
  {
    uint64_t v44 = 1LL;
    do
    {
      if (*((_BYTE *)v55 + v44))
      {
        ++v44;
      }

      else
      {
        BOOL v45 = *(unsigned __int16 *)(v14 + 2 * v44);
        if (v30 && v15 < v45) {
          LOWORD(v15) = *(_WORD *)(v14 + 2 * v44);
        }
        *((_BYTE *)v55 + v44++) = BYTE1(v15);
        this = *(unsigned __int16 *)(v14 + 2 * v44);
      }
    }

    while (v44 != v17);
  }

  if (v15 <= v18)
  {
    BOOL v47 = 0LL;
    LODWORD(v48) = 1;
    while (1)
    {
      int v49 = v47;
      unint64_t v50 = v16 - 1;
      if ((int)v48 >= v50)
      {
LABEL_81:
        BOOL v47 = v49;
        if (!(_DWORD)v49) {
          goto LABEL_82;
        }
      }

      else
      {
        uint64_t v48 = (int)v48;
        while (1)
        {
          size_t v51 = *((unsigned __int8 *)v55 + v48);
          if (v51 != 255)
          {
            BOOL v47 = v51 - *(unsigned __int8 *)(*(void *)(v11 + 112) + 2 * v48 + 1);
            if ((_DWORD)v47 != (_DWORD)v49) {
              break;
            }
          }

          if (v50 == ++v48)
          {
            LODWORD(v48) = v50;
            goto LABEL_81;
          }
        }

        if (!(_DWORD)v49)
        {
LABEL_82:
        }
      }

      int v52 = *(_WORD *)(*(void *)(v11 + 112) + 2LL * (int)v48);
      unint64_t v53 = *((_DWORD *)a5 + 2);
      if (v53 >= -1 && *((_DWORD *)a5 + 3) > v53) {
        goto LABEL_90;
      }
      this = icu::UVector32::expandCapacity(a5, v53 + 1, a6);
      if ((_DWORD)this)
      {
        unint64_t v53 = *((_DWORD *)a5 + 2);
LABEL_90:
        *(_DWORD *)(*((void *)a5 + 3) + 4LL * v53) = (unsigned __int16)v49 | (v52 << 16);
        ++*((_DWORD *)a5 + 2);
      }

  __int128 v41 = (v6 - a3[3] + a3[1]);
  a3[2] = v5;
  a3[3] = v6;
  a3[1] = v41;
  return icu::UnicodeString::~UnicodeString((void *)v41, (icu::UnicodeString *)v44);
}

                __int128 v37 = *(void *)(v8 + 96);
                icu::UnicodeString::tempSubString(v9, v20 + 1, v17 + ~v20, (icu::UnicodeString *)v42);
                *(void *)(v8 + 104) = icu::RuleBasedNumberFormat::createPluralFormat(v37, v28, (uint64_t)v42, a5);
                icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)v42);
                return (uint64_t)icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)v47);
              }
            }

            uint64_t v33 = v32;
            goto LABEL_54;
          }
        }

        uint64_t v25 = v24;
        goto LABEL_36;
      }
    }
  }

  return result;
}

  if (v7 < &a3[2 * a2]) {
    *(_WORD *)UErrorCode v7 = 0;
  }
  return (unint64_t)(v7 - a3) >> 1;
}

        icu::RegexMatcher::MatchChunkAt(this, v5, 0, a2);
        if (*((_BYTE *)this + 130)) {
          return 1;
        }
LABEL_63:
        int v29 = (unsigned int (*)(void, void))*((void *)this + 37);
        uint64_t v5 = v24;
        if (v29)
        {
          uint64_t v5 = v24;
        }

        continue;
      }

    case 3:
      if (*((void *)this + 14) >= v5)
      {
        icu::RegexMatcher::MatchChunkAt(this, v5, 0, a2);
        int v8 = 0;
      }

      else
      {
        int v8 = 0;
        *((_BYTE *)this + 130) = 0;
      }

      return v8;
    case 4:
      if (*((void *)this + 10) != v5) {
        goto LABEL_75;
      }
      icu::RegexMatcher::MatchChunkAt(this, v5, 0, a2);
      int v8 = 0;
      if (*((_BYTE *)this + 130)) {
        return 1;
      }
      if (v5 >= v10) {
        goto LABEL_10;
      }
      __int128 v36 = v5 + 1LL;
      if ((*(_WORD *)(v6 + 2LL * v5) & 0xFC00) == 0xD800 && *((void *)this + 15) != v36)
      {
        if ((*(_WORD *)(v6 + 2 * v36) & 0xFC00) == 0xDC00) {
          v5 += 2;
        }
        else {
          ++v5;
        }
      }

      else
      {
        ++v5;
      }

                if ((int)++v15 >= v14)
                {
                  uint64_t v13 = (void *)v33;
                  if (v33) {
                    sub_1809BB4B0( a1,  a4,  v32 > 1,  (uint64_t)&v50,  (uint64_t)&v45,  (uint64_t)&v40,  v30,  SHIDWORD(v30),  v34,  v29,  a7);
                  }
                  break;
                }
              }
            }

            icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v39);
            icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)&v40);
            icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v45);
          }

          __int128 v36 = a5;
          UErrorCode v7 = icu::UnicodeString::extract((uint64_t)&v50, &v36, a6, a7);
          v35[0] = v36;
          icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)&v50);
          return v7;
        }
      }

      else if (!a6)
      {
        goto LABEL_6;
      }
    }

    UErrorCode v7 = 0LL;
    *a7 = 1;
    return v7;
  }

  return 0LL;
}

uint64_t uloc_isRightToLeft(char *a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  int v14 = 0;
  *(void *)alias = 0LL;
  int Script = uloc_getScript((uint64_t)a1, alias, 8, &v14);
  if (v14 > 0 || (v14 != -124 ? (BOOL v3 = Script == 0) : (BOOL v3 = 1), v3))
  {
    int v14 = 0;
    *(void *)__little = 0LL;
    int Language = uloc_getLanguage((uint64_t)a1, __little, 8, &v14);
    uint64_t result = 0LL;
    if (v14 > 0 || v14 == -124) {
      return result;
    }
    if (Language >= 1)
    {
      UErrorCode v7 = strstr("root-en-es-pt-zh-ja-ko-de-fr-it-ar+he+fa+ru-nl-pl-th-tr-", __little);
      if (v7)
      {
        int v8 = v7[Language];
        if (v8 == 45) {
          return 0LL;
        }
        if (v8 == 43) {
          return 1LL;
        }
      }
    }

    int v14 = 0;
    memset(&v15[1], 0, 56);
    v15[0] = (char *)&v15[1] + 5;
    LODWORD(v15[1]) = 40;
    v13[0] = 0LL;
    v13[1] = 0LL;
    icu::CharStringByteSink::CharStringByteSink(v13, (uint64_t)v15);
    sub_1807DDED8(a1, (uint64_t)v13, (UErrorCode *)&v14);
    icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v13);
    BOOL v9 = 1;
    if (v14 <= 0 && v14 != -124)
    {
      int v10 = uloc_getScript((uint64_t)v15[0], alias, 8, &v14);
      BOOL v9 = v14 > 0 || v14 == -124 || v10 == 0;
    }

    if (BYTE4(v15[1])) {
      uprv_free(v15[0]);
    }
    if (!v9) {
      goto LABEL_6;
    }
    return 0LL;
  }

uint64_t icu::Locale::isRightToLeft(icu::Locale *this)
{
  Baseint Name = (char *)icu::Locale::getBaseName(this);
  return uloc_isRightToLeft(BaseName);
}

uint64_t ulocimp_getRegionForSupplementalData(char *a1, int a2, char *a3, int a4, int *a5)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (*a5 > 0) {
    return 0LL;
  }
  *(void *)uint64_t __src = 0LL;
  int v19 = 0;
  memset(&v21[1], 0, 48);
  uint64_t v22 = 0LL;
  v21[0] = (char *)&v21[1] + 5;
  LODWORD(v21[1]) = 40;
  v20[0] = 0LL;
  v20[1] = 0LL;
  icu::CharStringByteSink::CharStringByteSink(v20, (uint64_t)v21);
  ulocimp_getKeywordValue(a1, "rg", (uint64_t)v20, &v19);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v20);
  if (v19 > 0 || (int)v22 < 3 || (int)v22 > 7)
  {
    uint64_t Country = uloc_getCountry((uint64_t)a1, __src, 8, a5);
    if (*a5 <= 0)
    {
      uint64_t v12 = Country;
      if (a2 && !(_DWORD)Country)
      {
        int v19 = 0;
        memset(&v20[1], 0, 56);
        v20[0] = (char *)&v20[1] + 5;
        LODWORD(v20[1]) = 40;
        v18[0] = 0LL;
        v18[1] = 0LL;
        icu::CharStringByteSink::CharStringByteSink(v18, (uint64_t)v20);
        sub_1807DDED8(a1, (uint64_t)v18, (UErrorCode *)&v19);
        icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v18);
        if (v19 <= 0)
        {
          unsigned int v14 = uloc_getCountry((uint64_t)v20[0], __src, 8, a5);
          if (*a5 <= 0) {
            uint64_t v12 = v14;
          }
          else {
            uint64_t v12 = 0LL;
          }
        }

        if (BYTE4(v20[1])) {
          uprv_free(v20[0]);
        }
      }
    }

    else
    {
      uint64_t v12 = 0LL;
    }
  }

  else
  {
    __int128 v11 = (char *)v21[0];
    if (uprv_isASCIILetter(*(_BYTE *)v21[0]))
    {
      __src[0] = uprv_toupper(*v11);
      __src[1] = uprv_toupper(v11[1]);
      uint64_t v12 = 2LL;
    }

    else
    {
      __int16 v15 = *(_WORD *)v11;
      __src[2] = v11[2];
      *(_WORD *)uint64_t __src = v15;
      uint64_t v12 = 3LL;
    }
  }

  __src[(int)v12] = 0;
  int v16 = strncpy(a3, __src, a4);
  uint64_t v5 = u_terminateChars((uint64_t)v16, a4, v12, a5);
  if (BYTE4(v21[1])) {
    uprv_free(v21[0]);
  }
  return v5;
}

uint64_t ulocimp_setRegionToSupplementalRegion(char *a1, char *a2, int a3)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  UErrorCode v25 = U_ZERO_ERROR;
  memset(v40, 0, sizeof(v40));
  icu::Locale::Locale((icu::Locale *)v40, a1, 0LL, 0LL, 0LL);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v22, "rg");
  memset(&v24, 0, sizeof(v24));
  *(void *)&v26[0] = &off_18970C570;
  *((void *)&v26[0] + 1) = &v24;
  icu::Locale::getKeywordValue((uint64_t)v40, v22, v23, (uint64_t)v26, &v25);
  icu::ByteSink::~ByteSink((icu::ByteSink *)v26);
  uint64_t v5 = 0LL;
  if (v25 <= U_ZERO_ERROR)
  {
    std::string::size_type size = v24.__r_.__value_.__s.__size_;
    if ((v24.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type size = v24.__r_.__value_.__l.__size_;
    }
    if (size < 2)
    {
      uint64_t v5 = 0LL;
    }

    else
    {
      memset(v39, 0, sizeof(v39));
      icu::LocaleBuilder::LocaleBuilder(v39);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v20, (const char *)v40 + 8);
      icu::LocaleBuilder::setLanguage((uint64_t)v39, v20, v21);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v18, (const char *)&v40[1] + 4);
      icu::LocaleBuilder::setScript((uint64_t)v39, v18, v19);
      std::string::resize(&v24, 2uLL, 0);
      if ((v24.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        UErrorCode v7 = &v24;
      }
      else {
        UErrorCode v7 = (std::string *)v24.__r_.__value_.__r.__words[0];
      }
      std::string::value_type v8 = uprv_toupper(v7->__r_.__value_.__s.__data_[0]);
      if ((v24.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        BOOL v9 = &v24;
      }
      else {
        BOOL v9 = (std::string *)v24.__r_.__value_.__r.__words[0];
      }
      v9->__r_.__value_.__s.__data_[0] = v8;
      if ((v24.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v10 = &v24;
      }
      else {
        int v10 = (std::string *)v24.__r_.__value_.__r.__words[0];
      }
      std::string::value_type v11 = uprv_toupper(v10->__r_.__value_.__s.__data_[1]);
      if ((v24.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v12 = &v24;
      }
      else {
        uint64_t v12 = (std::string *)v24.__r_.__value_.__r.__words[0];
      }
      v12->__r_.__value_.__s.__data_[1] = v11;
      int v13 = v24.__r_.__value_.__s.__size_;
      if ((v24.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unsigned int v14 = &v24;
      }
      else {
        unsigned int v14 = (std::string *)v24.__r_.__value_.__r.__words[0];
      }
      if ((v24.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        int v13 = v24.__r_.__value_.__r.__words[1];
      }
      icu::LocaleBuilder::setRegion((uint64_t)v39, v14, v13);
      UErrorCode v25 = U_ZERO_ERROR;
      __int128 v37 = 0u;
      __int128 v38 = 0u;
      __int128 v35 = 0u;
      __int128 v36 = 0u;
      __int128 v33 = 0u;
      __int128 v34 = 0u;
      __int128 v31 = 0u;
      __int128 v32 = 0u;
      __int128 v29 = 0u;
      __int128 v30 = 0u;
      *(_OWORD *)__s = 0u;
      __int128 v28 = 0u;
      memset(v26, 0, sizeof(v26));
      icu::LocaleBuilder::build((icu::LocaleBuilder *)v39, &v25, (icu::Locale *)v26);
      uint64_t v5 = 0LL;
      if (v25 <= U_ZERO_ERROR)
      {
        size_t v15 = strlen(__s[1]);
        int v16 = strncpy(a2, __s[1], a3);
        uint64_t v5 = u_terminateChars((uint64_t)v16, a3, v15, (int *)&v25);
      }

      icu::Locale::~Locale((icu::Locale *)v26);
      icu::LocaleBuilder::~LocaleBuilder((icu::LocaleBuilder *)v39);
    }
  }

  icu::Locale::~Locale((icu::Locale *)v40);
  return v5;
}

uint64_t sub_1807DEF2C(uint64_t a1, char *a2, int *a3, char *a4, int *a5, char *a6, int *a7, UErrorCode *a8)
{
  int v9 = a1;
  uint64_t v28 = *MEMORY[0x1895F89C0];
  UErrorCode v25 = (icu::CharString *)a1;
  UErrorCode v10 = *a8;
  if (a7 && a6 && a5 && a4 && a3 && a2 && a1 && v10 <= U_ZERO_ERROR)
  {
    sub_18084DA08(a1, &v25, a8, (uint64_t)&v26);
    int v17 = icu::CharString::extract(&v26, a2, *a3, a8);
    if (v27) {
      uprv_free(v26);
    }
    if (*(int *)a8 <= 0)
    {
      *a3 = v17;
      uint64_t v18 = v25;
      int v19 = *(unsigned __int8 *)v25;
      if (v19 == 95 || v19 == 45)
      {
        uint64_t v18 = (icu::CharString *)((char *)v25 + 1);
        UErrorCode v25 = (icu::CharString *)((char *)v25 + 1);
      }

      sub_18084DB88(v18, &v25, a8, (uint64_t)&v26);
      int v20 = icu::CharString::extract(&v26, a4, *a5, a8);
      if (v27) {
        uprv_free(v26);
      }
      if (*(int *)a8 <= 0)
      {
        *a5 = v20;
        if (v20 <= 0)
        {
          uint64_t v21 = (uint64_t)v25;
        }

        else
        {
          uint64_t v21 = (uint64_t)v25;
          int v22 = *(unsigned __int8 *)v25;
          if (v22 == 95 || v22 == 45)
          {
            uint64_t v21 = (uint64_t)v25 + 1;
            UErrorCode v25 = (icu::CharString *)((char *)v25 + 1);
          }
        }

        sub_18084DC94(v21, (uint64_t *)&v25, a8, (uint64_t)&v26);
        int v24 = icu::CharString::extract(&v26, a6, *a7, a8);
        if (v27) {
          uprv_free(v26);
        }
        if (*(int *)a8 <= 0)
        {
          *a7 = v24;
          if (v24 < 1)
          {
          }

          else if (!uprv_strnicmp(a6, "ZZ", v24))
          {
            *a7 = 0;
          }
        }
      }
    }
  }

  else if (v10 <= U_ZERO_ERROR)
  {
    *a8 = U_ILLEGAL_ARGUMENT_ERROR;
  }

  return ((_DWORD)v25 - v9);
}

BOOL sub_1807DF184( uint64_t *a1, uint64_t a2, const void *a3, int a4, const void *a5, int a6, _BYTE *a7, unsigned int a8, uint64_t a9, int *a10)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  if (*a10 > 0) {
    return 0LL;
  }
  memset(v30, 0, 157);
  if (a4 < 1 || a6 < 1)
  {
    if (a4 < 1) {
      goto LABEL_22;
    }
  }

  else
  {
    *(_OWORD *)((char *)__dst + 8) = 0uLL;
    *(_OWORD *)((char *)&__dst[2] + 8) = 0uLL;
    *(_OWORD *)((char *)&__dst[1] + 8) = 0uLL;
    *(void *)&__dst[0] = (char *)__dst + 13;
    DWORD2(__dst[0]) = 40;
    *((void *)&__dst[3] + 1) = 0LL;
    v29[0] = 0LL;
    v29[1] = 0LL;
    icu::CharStringByteSink::CharStringByteSink(v29, (uint64_t)__dst);
    sub_1807DF8D4(a1, a2, a3, a4, a5, a6, 0LL, 0LL, 0LL, (uint64_t)v29, a10);
    icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v29);
    if (*a10 <= 0 && (uint64_t v18 = sub_1807DF6EC(*(const char **)&__dst[0], (char *)v30, (UErrorCode *)a10), *a10 <= 0))
    {
      if (v18)
      {
        sub_1807DF8D4(0LL, 0LL, 0LL, 0, 0LL, 0, a7, a8, (uint64_t)v18, a9, a10);
        int v19 = 1;
      }

      else
      {
        int v19 = 0;
      }
    }

    else
    {
      int v19 = 2;
    }

    if (BYTE12(__dst[0])) {
      uprv_free(*(void **)&__dst[0]);
    }
    if (v19)
    {
      if (v19 != 2) {
        return 1LL;
      }
      goto LABEL_55;
    }
  }

  memset((char *)__dst + 8, 0, 56);
  *(void *)&__dst[0] = (char *)__dst + 13;
  DWORD2(__dst[0]) = 40;
  v29[0] = 0LL;
  v29[1] = 0LL;
  icu::CharStringByteSink::CharStringByteSink(v29, (uint64_t)__dst);
  sub_1807DF8D4(a1, a2, a3, a4, 0LL, 0, 0LL, 0LL, 0LL, (uint64_t)v29, a10);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v29);
  if (*a10 <= 0 && (int v20 = sub_1807DF6EC(*(const char **)&__dst[0], (char *)v30, (UErrorCode *)a10), *a10 <= 0))
  {
    if (v20)
    {
      sub_1807DF8D4(0LL, 0LL, 0LL, 0, a5, a6, a7, a8, (uint64_t)v20, a9, a10);
      int v21 = 1;
    }

    else
    {
      int v21 = 0;
    }
  }

  else
  {
    int v21 = 2;
  }

  if (BYTE12(__dst[0])) {
    uprv_free(*(void **)&__dst[0]);
  }
  if (v21 == 2) {
    goto LABEL_55;
  }
  if (v21) {
    return 1LL;
  }
LABEL_22:
  if (a6 >= 1)
  {
    memset((char *)__dst + 8, 0, 56);
    *(void *)&__dst[0] = (char *)__dst + 13;
    DWORD2(__dst[0]) = 40;
    v29[0] = 0LL;
    v29[1] = 0LL;
    icu::CharStringByteSink::CharStringByteSink(v29, (uint64_t)__dst);
    sub_1807DF8D4(a1, a2, 0LL, 0, a5, a6, 0LL, 0LL, 0LL, (uint64_t)v29, a10);
    icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v29);
    if (*a10 <= 0 && (int v22 = sub_1807DF6EC(*(const char **)&__dst[0], (char *)v30, (UErrorCode *)a10), *a10 <= 0))
    {
      if (v22)
      {
        sub_1807DF8D4(0LL, 0LL, a3, a4, 0LL, 0, a7, a8, (uint64_t)v22, a9, a10);
        int v23 = 1;
      }

      else
      {
        int v23 = 0;
      }
    }

    else
    {
      int v23 = 2;
    }

    if (BYTE12(__dst[0])) {
      uprv_free(*(void **)&__dst[0]);
    }
    if (v23 == 2) {
      goto LABEL_55;
    }
    if (v23) {
      return 1LL;
    }
  }

  memset(&v29[1], 0, 56);
  v28[1] = 0LL;
  v29[0] = (char *)&v29[1] + 5;
  LODWORD(v29[1]) = 40;
  v28[0] = 0LL;
  icu::CharStringByteSink::CharStringByteSink(v28, (uint64_t)v29);
  if (*a10 <= 0)
  {
    uint64_t v24 = a8;
    if ((int)a2 <= 11)
    {
      memset(__dst, 0, 157);
      else {
        memcpy(__dst, a1, a2);
      }
      (*(void (**)(void *, _OWORD *, uint64_t))(v28[0] + 16LL))(v28, __dst, a2);
      goto LABEL_47;
    }
  }

  else
  {
    uint64_t v24 = a8;
    if (*a10 != 15) {
      goto LABEL_47;
    }
  }

  *a10 = 1;
LABEL_47:
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v28);
  if (*a10 <= 0 && (UErrorCode v25 = sub_1807DF6EC((const char *)v29[0], (char *)v30, (UErrorCode *)a10), *a10 <= 0))
  {
    if (v25)
    {
      sub_1807DF8D4(0LL, 0LL, a3, a4, a5, a6, a7, v24, (uint64_t)v25, a9, a10);
      int v26 = 1;
    }

    else
    {
      int v26 = 0;
    }
  }

  else
  {
    int v26 = 2;
  }

  if (BYTE4(v29[1])) {
    uprv_free(v29[0]);
  }
  if (v26 != 2) {
    return v26 != 0;
  }
LABEL_55:
  if (*a10 <= 0)
  {
    BOOL result = 0LL;
    *a10 = 1;
    return result;
  }

  return 0LL;
}

char *sub_1807DF6EC(const char *a1, char *a2, UErrorCode *a3)
{
  v17[8] = *(void **)MEMORY[0x1895F89C0];
  uint64_t v16 = 0LL;
  uint64_t v6 = ures_openDirect(0LL, (uint64_t)"likelySubtags", (uint64_t)&v16);
  if ((int)v16 > 0)
  {
    a2 = 0LL;
    *a3 = v16;
    goto LABEL_23;
  }

  memset(&v17[1], 0, 56);
  v17[0] = (char *)&v17[1] + 5;
  LODWORD(v17[1]) = 40;
  if (a1)
  {
    if (*a1)
    {
      if (*a1 == 95)
      {
        icu::StringPiece::StringPiece((icu::StringPiece *)&v14, "und");
        icu::CharString::append((icu::CharString *)v17, v14, v15, a3);
        icu::StringPiece::StringPiece((icu::StringPiece *)&v12, a1);
        icu::CharString::append((icu::CharString *)v17, v12, v13, a3);
        if (*(int *)a3 > 0)
        {
          a2 = 0LL;
          char v7 = 0;
          goto LABEL_20;
        }

        a1 = (const char *)v17[0];
      }
    }

    else
    {
      a1 = "und";
    }
  }

  StringByuint64_t Key = ures_getStringByKey(v6, a1, (int *)&v16 + 1, (int *)&v16);
  int v9 = v16;
  if ((int)v16 < 1)
  {
    if (SHIDWORD(v16) < 157)
    {
      u_UCharsToChars(StringByKey, a2, HIDWORD(v16) + 1);
      goto LABEL_19;
    }

    a2 = 0LL;
    int v9 = 5;
    goto LABEL_17;
  }

  if ((_DWORD)v16 != 2)
  {
    a2 = 0LL;
LABEL_17:
    *a3 = v9;
    goto LABEL_19;
  }

  a2 = 0LL;
LABEL_19:
  char v7 = 1;
LABEL_20:
  if (BYTE4(v17[1])) {
    uprv_free(v17[0]);
  }
  if ((v7 & 1) != 0)
  {
LABEL_23:
    int v10 = 1;
    if (!v6) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }

  int v10 = 0;
  if (v6) {
LABEL_24:
  }
    ures_close(v6);
LABEL_25:
  if (!v10) {
    return 0LL;
  }
  return a2;
}

uint64_t *sub_1807DF8D4( uint64_t *__src, uint64_t __n, const void *a3, int a4, const void *a5, int a6, _BYTE *a7, uint64_t a8, uint64_t a9, uint64_t a10, int *a11)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  int v11 = *a11;
  if (*a11 > 0) {
    goto LABEL_2;
  }
  uint64_t v13 = __n;
  memset(__dst, 0, 157);
  if ((int)__n >= 1)
  {
    int v20 = __src;
    size_t v21 = v13;
LABEL_12:
    memcpy(__dst, v20, v21);
    goto LABEL_13;
  }

  if (!a9)
  {
    uint64_t v13 = 0LL;
    if (a4 >= 1) {
      goto LABEL_14;
    }
    goto LABEL_15;
  }

  int v29 = 0;
  uint64_t v28 = 0LL;
  uint64_t __src = (uint64_t *)uloc_getLanguage(a9, (char *)&v28, 12, a11);
  int v11 = *a11;
  uint64_t v13 = (uint64_t)__src;
  if ((_DWORD)__src)
  {
    size_t v21 = (int)__src;
    int v20 = &v28;
    goto LABEL_12;
  }

void sub_1807DFC08(icu::ByteSink *a1)
{
}

std::string *sub_1807DFC1C(uint64_t a1, const std::string::value_type *a2, int a3)
{
  return std::string::append(*(std::string **)(a1 + 8), a2, a3);
}

uint64_t sub_1807DFC28(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 - 8);
    if (v3)
    {
      uint64_t v4 = 48 * v3;
      do
      {
        if (*(void *)(v2 + v4 - 24)) {
          sub_1807E29A8(v2 + v4 - 48);
        }
        v4 -= 48LL;
      }

      while (v4);
    }

    icu::UMemory::operator delete[]((void *)(v2 - 16));
  }

  return a1;
}

uint64_t sub_1807DFC98(int *a1)
{
  uint64_t v9 = 0LL;
  __int128 v7 = 0u;
  memset(v8, 0, sizeof(v8));
  __int128 v6 = 0u;
  memset(v5, 0, sizeof(v5));
  sub_1807DD844((int32x2_t *)v5 + 1, a1);
  uint64_t v9 = 0LL;
  memset((char *)v8 + 8, 0, 36);
  __int128 v6 = 0u;
  __int128 v7 = 0u;
  LODWORD(v8[0]) = 0;
  sub_1807DFD7C((uint64_t)v5, (UErrorCode *)a1);
  if (*a1 <= 0)
  {
    uint64_t v3 = icu::UMemory::operator new((icu::UMemory *)0x160, v2);
    if (v3)
    {
      qword_18C448A30 = sub_1807E070C(v3, (uint64_t *)v5);
      sub_180820C94(0xBu, (uint64_t)sub_1807E063C);
    }

    else
    {
      qword_18C448A30 = 0LL;
      *a1 = 7;
    }
  }

  return sub_1807E1604((uint64_t)v5);
}

void sub_1807DFD7C(uint64_t a1, UErrorCode *a2)
{
  uint64_t v88 = *MEMORY[0x1895F89C0];
  *(void *)a1 = ures_openDirect(0LL, (uint64_t)"langInfo", (uint64_t)a2);
  if (*(int *)a2 <= 0)
  {
    uint64_t v87 = 0LL;
    memset(v86, 0, sizeof(v86));
    icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v86);
    v85[2] = 0LL;
    v85[0] = &unk_18971C0E8;
    v85[1] = 0LL;
    v85[3] = 0xFFFFFFFFLL;
    ures_getValueWithFallback(*(void *)a1, "likely", (uint64_t)v86, (uint64_t)v85, a2);
    uint64_t v84 = 0LL;
    memset(v83, 0, sizeof(v83));
    sub_1808743D8((uint64_t)v85, (int *)a2, (uint64_t)v83);
    if (*(int *)a2 > 0)
    {
LABEL_12:
      icu::ResourceValue::~ResourceValue((icu::ResourceValue *)v85);
      icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v86);
      return;
    }

    UErrorCode v81 = 0LL;
    uint64_t v82 = 0LL;
    uint64_t v79 = 0LL;
    int v80 = 0LL;
    int v78 = 0;
    if (!sub_1807E14C0( a1,  (icu::ResourceTable *)v83,  "languageAliases",  (icu::ResourceValue *)v85,  (void **)&v82,  (int *)&v79 + 1,  a2)
      || !sub_1807E14C0( a1,  (icu::ResourceTable *)v83,  "regionAliases",  (icu::ResourceValue *)v85,  (void **)&v81,  (int *)&v79,  a2)
      || !sub_1807E14C0( a1,  (icu::ResourceTable *)v83,  "lsrs",  (icu::ResourceValue *)v85,  (void **)&v80,  &v78,  a2))
    {
LABEL_11:
      uprv_free(v80);
      uprv_free(v81);
      uprv_free(v82);
      goto LABEL_12;
    }

    if ((v79 & 0x100000000LL) != 0 || (v79 & 1) != 0 || (-1431655765 * v78 + 715827882) >= 0x55555555)
    {
      int v4 = 3;
LABEL_10:
      *a2 = v4;
      goto LABEL_11;
    }

    if (!v78
      || !icu::ResourceTable::findValue((icu::ResourceTable *)v83, "trie", (icu::ResourceValue *)v85))
    {
      int v4 = 2;
      goto LABEL_10;
    }

    int v77 = 0;
    *(void *)(a1 + 208) = sub_1808742F0((uint64_t)v85, &v77, (int *)a2);
    int v76 = 0;
    ures_getValueWithFallback(*(void *)a1, "match", (uint64_t)v86, (uint64_t)v85, (UErrorCode *)&v76);
    char v74 = 0LL;
    uint64_t v75 = 0LL;
    uint64_t v73 = 0LL;
    int v5 = v76;
    if (v76 <= 0)
    {
      uint64_t v71 = 0LL;
      __int128 v69 = 0u;
      __int128 v70 = 0u;
      sub_1808743D8((uint64_t)v85, (int *)a2, (uint64_t)&v69);
      if (icu::ResourceTable::findValue((icu::ResourceTable *)&v69, "trie", (icu::ResourceValue *)v85))
      {
        *(void *)(a1 + 232) = sub_1808742F0((uint64_t)v85, &v77, (int *)a2);
      }

      if (!icu::ResourceTable::findValue( (icu::ResourceTable *)&v69,  "regionToPartitions",  (icu::ResourceValue *)v85)) {
        goto LABEL_134;
      }
      *(void *)(a1 + 240) = sub_1808742F0((uint64_t)v85, &v77, (int *)a2);
      if (v77 >= 1677)
      {
LABEL_134:
        if (!sub_1807E14C0( a1,  (icu::ResourceTable *)&v69,  "partitions",  (icu::ResourceValue *)v85,  (void **)&v75,  (int *)&v73 + 1,  a2)
          || !sub_1807E14C0( a1,  (icu::ResourceTable *)&v69,  "paradigms",  (icu::ResourceValue *)v85,  (void **)&v74,  (int *)&v73,  a2))
        {
          goto LABEL_131;
        }

        if ((-1431655765 * v73 + 715827882) <= 0x55555554)
        {
          if (!icu::ResourceTable::findValue( (icu::ResourceTable *)&v69,  "distances",  (icu::ResourceValue *)v85)) {
            goto LABEL_19;
          }
          *(void *)(a1 + 272) = sub_18087428C((uint64_t)v85, &v77, (int *)a2);
          if (v77 >= 4)
          {
LABEL_19:
            *(_BYTE *)(a1 + 184) = 1;
            *(void *)(a1 + 192) = uhash_openSize( (uint64_t)uhash_hashChars,  (uint64_t)uhash_compareChars,  (uint64_t)uhash_compareChars,  SHIDWORD(v79) / 2,  (int *)a2);
            uhash_close(0LL);
            if (SHIDWORD(v79) >= 1)
            {
              uint64_t v6 = 0LL;
              do
              {
                uint64_t v7 = v82[v6];
                else {
                  uint64_t v9 = **(void **)(a1 + 88) + v7;
                }
                uint64_t v10 = v82[v6 + 1];
                if (*(_BYTE *)(a1 + 184)) {
                  BOOL v11 = (int)v10 < 1;
                }
                else {
                  BOOL v11 = 1;
                }
                if (v11) {
                  uint64_t v12 = 0LL;
                }
                else {
                  uint64_t v12 = **(void **)(a1 + 88) + v10;
                }
                uhash_put(*(void *)(a1 + 192), v9, v12, (int *)a2);
                v6 += 2LL;
              }

              while (SHIDWORD(v79) > (int)v6);
            }

            *(void *)(a1 + 200) = uhash_openSize( (uint64_t)uhash_hashChars,  (uint64_t)uhash_compareChars,  (uint64_t)uhash_compareChars,  (int)v79 / 2,  (int *)a2);
            uhash_close(0LL);
            if ((int)v79 >= 1)
            {
              uint64_t v14 = 0LL;
              do
              {
                uint64_t v15 = v81[v14];
                else {
                  uint64_t v17 = **(void **)(a1 + 88) + v15;
                }
                uint64_t v18 = v81[v14 + 1];
                if (*(_BYTE *)(a1 + 184)) {
                  BOOL v19 = (int)v18 < 1;
                }
                else {
                  BOOL v19 = 1;
                }
                if (v19) {
                  uint64_t v20 = 0LL;
                }
                else {
                  uint64_t v20 = **(void **)(a1 + 88) + v18;
                }
                uhash_put(*(void *)(a1 + 200), v17, v20, (int *)a2);
                v14 += 2LL;
              }

              while ((int)v79 > (int)v14);
            }

            int v21 = v78;
            int v22 = v78 / 3;
            *(_DWORD *)(a1 + 224) = v78 / 3;
            unint64_t v23 = v22;
            uint64_t v24 = 48LL * v22;
            BOOL v25 = !is_mul_ok(v23, 0x30uLL);
            BOOL v26 = __CFADD__(v24, 16LL);
            uint64_t v27 = v24 + 16;
            if (v26) {
              BOOL v25 = 1;
            }
            if (v25) {
              uint64_t v28 = -1LL;
            }
            else {
              uint64_t v28 = v27;
            }
            int v29 = (void *)icu::UMemory::operator new[]((icu::UMemory *)v28, v13);
            if (v29)
            {
              *int v29 = 48LL;
              v29[1] = v23;
              uint64_t v31 = v29 + 2;
              if ((v21 + 2) >= 5)
              {
                uint64_t v32 = v29 + 2;
                do
                {
                  *uint64_t v32 = "und";
                  v32[1] = "";
                  v32[3] = 0LL;
                  v32[4] = 0LL;
                  v32[2] = "";
                  *((_DWORD *)v32 + 10) = 0;
                  v32 += 6;
                }

                while (v32 != &v31[6 * (int)v23]);
              }

              *(void *)(a1 + 216) = v31;
              if (v78 >= 1)
              {
                uint64_t v33 = 0LL;
                uint64_t v34 = 0LL;
                do
                {
                  uint64_t v35 = v80[v34];
                  else {
                    uint64_t v37 = **(void **)(a1 + 88) + v35;
                  }
                  __int128 v38 = &v80[v34];
                  uint64_t v39 = v38[1];
                  if (*(_BYTE *)(a1 + 184)) {
                    BOOL v40 = (int)v39 < 1;
                  }
                  else {
                    BOOL v40 = 1;
                  }
                  if (v40) {
                    uint64_t v41 = 0LL;
                  }
                  else {
                    uint64_t v41 = **(void **)(a1 + 88) + v39;
                  }
                  __int128 v42 = 0LL;
                  if (*(_BYTE *)(a1 + 184))
                  {
                    uint64_t v43 = v38[2];
                  }

                  *(void *)&__int128 v69 = v37;
                  *((void *)&v69 + 1) = v41;
                  __int128 v70 = (unint64_t)v42;
                  unsigned int v44 = sub_1807E2910(v42);
                  int v72 = 0;
                  uint64_t v71 = v44;
                  sub_1807E29B0(*(void *)(a1 + 216) + v33, (uint64_t)&v69);
                  if (*((void *)&v70 + 1)) {
                    sub_1807E29A8((uint64_t)&v69);
                  }
                  v34 += 3LL;
                  v33 += 48LL;
                }

                while (v78 > (int)v34);
              }

              if (v73 <= 0)
              {
LABEL_91:
                unsigned int v52 = v73;
                if ((int)v73 >= 1)
                {
                  unint64_t v53 = v73 / 3uLL;
                  *(_DWORD *)(a1 + 264) = v53;
                  unint64_t v54 = (void *)icu::UMemory::operator new[]((icu::UMemory *)(48LL * v53 + 16), v30);
                  if (v54)
                  {
                    *unint64_t v54 = 48LL;
                    v54[1] = v53;
                    int32_t v55 = v54 + 2;
                    if (v52 >= 3)
                    {
                      unsigned int v56 = v54 + 2;
                      do
                      {
                        *unsigned int v56 = "und";
                        v56[1] = "";
                        v56[3] = 0LL;
                        v56[4] = 0LL;
                        v56[2] = "";
                        *((_DWORD *)v56 + 10) = 0;
                        v56 += 6;
                      }

                      while (v56 != &v55[6 * v53]);
                    }

                    if ((int)v73 >= 1)
                    {
                      uint64_t v57 = 0LL;
                      uint64_t v58 = (uint64_t)(v54 + 2);
                      do
                      {
                        uint64_t v59 = v74[v57];
                        else {
                          uint64_t v61 = **(void **)(a1 + 88) + v59;
                        }
                        uint64_t v62 = &v74[v57];
                        uint64_t v63 = v62[1];
                        if (*(_BYTE *)(a1 + 184)) {
                          BOOL v64 = (int)v63 < 1;
                        }
                        else {
                          BOOL v64 = 1;
                        }
                        if (v64) {
                          uint64_t v65 = 0LL;
                        }
                        else {
                          uint64_t v65 = **(void **)(a1 + 88) + v63;
                        }
                        unsigned int v66 = 0LL;
                        if (*(_BYTE *)(a1 + 184))
                        {
                          uint64_t v67 = v62[2];
                        }

                        *(void *)&__int128 v69 = v61;
                        *((void *)&v69 + 1) = v65;
                        __int128 v70 = (unint64_t)v66;
                        unsigned int v68 = sub_1807E2910(v66);
                        int v72 = 0;
                        uint64_t v71 = v68;
                        sub_1807E29B0(v58, (uint64_t)&v69);
                        if (*((void *)&v70 + 1)) {
                          sub_1807E29A8((uint64_t)&v69);
                        }
                        v57 += 3LL;
                        v58 += 48LL;
                      }

                      while ((int)v73 > (int)v57);
                    }

                    *(void *)(a1 + 256) = v55;
                    goto LABEL_131;
                  }

                  goto LABEL_129;
                }

LABEL_131:
                uprv_free(v74);
                uprv_free(v75);
                goto LABEL_11;
              }

              BOOL v45 = uprv_malloc(8LL * HIDWORD(v73));
              *(void *)(a1 + 248) = v45;
              if (v45)
              {
                uint64_t v46 = HIDWORD(v73);
                if (SHIDWORD(v73) >= 1)
                {
                  uint64_t v47 = 0LL;
                  int v48 = *(unsigned __int8 *)(a1 + 184);
                  do
                  {
                    uint64_t v49 = v75[v47];
                    else {
                      uint64_t v51 = **(void **)(a1 + 88) + v49;
                    }
                    *(void *)(*(void *)(a1 + 248) + 8 * v47++) = v51;
                  }

                  while (v46 != v47);
                }

                goto LABEL_91;
              }
            }

            else
            {
              *(void *)(a1 + 216) = 0LL;
            }

  if (*(_BYTE *)(result + 2)) {
    uint64_t v51 = (unint64_t)v4 >= v6;
  }
  else {
    uint64_t v51 = 0;
  }
  if (v51)
  {
    if (v13)
    {
      if (!(_BYTE)v10) {
        goto LABEL_149;
      }
      if ((unint64_t)v11 >= v7)
      {
        else {
          unint64_t v54 = aAbcdefghijklmn[v9];
        }
        int32_t v55 = *(char *)(v3 + 91);
        *(_BYTE *)(v3 + 91) = v55 + 1;
        *(_BYTE *)(v3 + v55 + 104) = v54;
        *a2 = 15;
LABEL_149:
        if ((unint64_t)v11 < v7)
        {
          *v11++ = 45;
          if (v12) {
            *v12++ = v2 - 1;
          }
          goto LABEL_158;
        }

        goto LABEL_157;
      }

      else {
        unint64_t v53 = aAbcdefghijklmn[v9];
      }
      *BOOL v11 = v53;
      if (v12)
      {
        *v12++ = v2 - 1;
        ++v11;
        goto LABEL_149;
      }

      if ((unint64_t)(v11 + 1) >= v7)
      {
        uint64_t v12 = 0LL;
        ++v11;
LABEL_157:
        unsigned int v56 = *(char *)(v3 + 91);
        *(_BYTE *)(v3 + 91) = v56 + 1;
        *(_BYTE *)(v3 + v56 + 104) = 45;
        *a2 = 15;
        goto LABEL_158;
      }

      uint64_t v12 = 0LL;
      v11[1] = 45;
      v11 += 2;
    }

LABEL_129:
            int v5 = 7;
            goto LABEL_130;
          }
        }
      }

      int v5 = 3;
    }

    else if (v76 == 2)
    {
      goto LABEL_19;
    }

LABEL_130:
    *a2 = v5;
    goto LABEL_131;
  }

                unint64_t v54 = -1;
              }
            }

            BOOL result = u_charType(v54);
            int v48 = v63;
            if (((1 << result) & 0x1C0) != 0) {
              goto LABEL_132;
            }
          }

          if (*a8 <= 0 && (_DWORD)v48)
          {
            uint64_t v61 = v48;
            BOOL result = (uint64_t)icu::ByteSinkUtil::appendNonEmptyUnchanged( (_DWORD *)(a4 + v28),  (const unsigned __int8 *)v48,  a6,  a2,  a7,  v16);
            LODWORD(v48) = v61;
          }

          uint64_t v62 = v48 + v28;
          if (v50)
          {
            BOOL result = icu::ByteSinkUtil::appendCodePoint((icu::ByteSinkUtil *)1, 0x4Au, a6, a7, v15);
            ++v62;
          }

          if (v64 && *a8 <= 0) {
            BOOL result = (uint64_t)icu::ByteSinkUtil::appendNonEmptyUnchanged( (_DWORD *)(a4 + v62),  (const unsigned __int8 *)v64,  a6,  a2,  a7,  v16);
          }
          goto LABEL_133;
        }

        if (v47 != 204)
        {
          uint64_t v49 = 0;
          int v48 = 0LL;
          goto LABEL_96;
        }

        if ((int)v46 < v12 && *(unsigned __int8 *)(a4 + v46) == 129 && v28 + 2 != v12)
        {
          LODWORD(v46) = v28 + 3;
          uint64_t v47 = *(unsigned __int8 *)(a4 + v28 + 2LL);
          int v48 = 2LL;
          goto LABEL_94;
        }

        char v74 = 0;
LABEL_131:
        LOBYTE(v75) = 0;
        goto LABEL_132;
      }

      if (v94 == 5)
      {
        int v97 = v74 + (unsigned __int16)v84;
        unsigned int v96 = *(unsigned __int16 *)(v80 + 2LL * v97);
        if (v96 >> 11 <= 0x1A)
        {
LABEL_99:
          *uint64_t v82 = v96;
          BOOL v98 = (unint64_t)(v82 + 1);
          goto LABEL_110;
        }

        int v102 = v97 + 1;
        if (v96 >> 13 <= 6)
        {
          *uint64_t v82 = v96 & 0xDBFF;
          int v103 = v82 + 1;
          int v160 = v82 + 1;
          int v104 = v159;
          if (v159)
          {
            *int v159 = v81;
            int v159 = v104 + 1;
            if ((unint64_t)v103 < v72)
            {
              char v74 = 0;
              LOBYTE(v75) = 0;
              uint64_t v105 = *(_WORD *)(v80 + 2LL * v102);
              int v160 = v82 + 2;
              v82[1] = v105;
              int v159 = v104 + 2;
              v104[1] = v81;
              goto LABEL_132;
            }
          }

          else if ((unint64_t)v103 < v72)
          {
            char v74 = 0;
            LOBYTE(v75) = 0;
            int v118 = *(_WORD *)(v80 + 2LL * v102);
            int v160 = v82 + 2;
            v82[1] = v118;
            goto LABEL_132;
          }

          char v74 = 0;
          LOBYTE(v75) = 0;
          *(_WORD *)(v4 + 144) = *(_WORD *)(v80 + 2LL * v102);
LABEL_209:
          *(_BYTE *)(v4 + 93) = 1;
LABEL_210:
          *unint64_t v2 = 15;
          goto LABEL_211;
        }

        if ((v96 & 0xFFFE) == 0xE000)
        {
          LOWORD(v96) = *(_WORD *)(v80 + 2LL * v102);
          goto LABEL_99;
        }

        BOOL result = v76;
        if (v96 == 0xFFFF)
        {
LABEL_124:
          *unint64_t v2 = 12;
          int v76 = result;
        }

    ;
  }

  while (v17 != -1);
  uint64_t v47 = v64;
  if ((v64 & 1) != 0)
  {
LABEL_132:
    uint64_t v47 = *a8;
LABEL_133:
    uint64_t v47 = 3LL;
LABEL_136:
    *a8 = v47;
    goto LABEL_137;
  }

uint64_t sub_1807E063C()
{
  if (qword_18C448A30)
  {
    uint64_t v0 = (void *)sub_1807E0860(qword_18C448A30);
    icu::UMemory::operator delete(v0);
  }

  qword_18C448A30 = 0LL;
  atomic_store(0, &dword_18C448A38);
  return 1LL;
}

uint64_t sub_1807E067C(int *a1)
{
  if (*a1 > 0) {
    return 0LL;
  }
  unsigned int v3 = atomic_load(&dword_18C448A38);
  if (v3 == 2 || !icu::umtx_initImplPreInit(&dword_18C448A38))
  {
    if (dword_18C448A3C >= 1) {
      *a1 = dword_18C448A3C;
    }
  }

  else
  {
    sub_1807DFC98(a1);
    dword_18C448A3C = *a1;
    icu::umtx_initImplPostInit(&dword_18C448A38);
  }

  return qword_18C448A30;
}

uint64_t sub_1807E070C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[11];
  a2[11] = 0LL;
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = a2[24];
  a2[24] = 0LL;
  uint64_t v5 = a2[26];
  *(void *)(a1 + 24) = a2[25];
  a2[25] = 0LL;
  *(void *)(a1 + 32) = 0LL;
  uint64_t v6 = (icu::BytesTrie *)(a1 + 32);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v5;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)(a1 + 296) = a2[27];
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 29);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 31);
  *(_DWORD *)(a1 + 336) = *((_DWORD *)a2 + 66);
  *(void *)(a1 + 344) = a2[34];
  a2[31] = 0LL;
  a2[32] = 0LL;
  *a2 = 0LL;
  a2[27] = 0LL;
  icu::BytesTrie::next((icu::BytesTrie *)(a1 + 32), 42);
  *(void *)(a1 + 64) = (*(void *)(a1 + 48) - *(void *)(a1 + 40)) | ((unint64_t)(*(_DWORD *)(a1 + 56) + 2) << 59);
  icu::BytesTrie::next(v6, 42);
  *(void *)(a1 + 72) = (*(void *)(a1 + 48) - *(void *)(a1 + 40)) | ((unint64_t)(*(_DWORD *)(a1 + 56) + 2) << 59);
  icu::BytesTrie::next(v6, 42);
  *(_DWORD *)(a1 + 80) = icu::BytesTrie::readValue( (icu::BytesTrie *)(*(void *)(a1 + 48) + 1LL),  (const unsigned __int8 *)(**(unsigned __int8 **)(a1 + 48) >> 1));
  *(void *)(a1 + 48) = *(void *)(a1 + 40);
  *(_DWORD *)(a1 + 56) = -1;
  for (uint64_t i = 11LL; i != 37; ++i)
  {
    int v8 = icu::BytesTrie::next(v6, (int)i + 86);
    uint64_t v9 = *(void *)(a1 + 40);
    if (v8 == 1) {
      *(void *)(a1 + 8 * i) = (*(void *)(a1 + 48) - v9) | ((unint64_t)(*(_DWORD *)(a1 + 56) + 2) << 59);
    }
    *(void *)(a1 + 48) = v9;
    *(_DWORD *)(a1 + 56) = -1;
  }

  return a1;
}

uint64_t sub_1807E0860(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 12)) {
      uprv_free(*(void **)v2);
    }
    icu::UMemory::operator delete((void *)v2);
  }

  uint64_t v3 = *(void *)(a1 + 296);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 - 8);
    if (v4)
    {
      uint64_t v5 = 48 * v4;
      do
      {
        if (*(void *)(v3 + v5 - 24)) {
          sub_1807E29A8(v3 + v5 - 48);
        }
        v5 -= 48LL;
      }

      while (v5);
    }

    icu::UMemory::operator delete[]((void *)(v3 - 16));
  }

  sub_1807DFC28(a1 + 304);
  icu::BytesTrie::~BytesTrie((void **)(a1 + 32));
  uhash_close(*(_BYTE **)(a1 + 24));
  uhash_close(*(_BYTE **)(a1 + 16));
  return a1;
}

void sub_1807E0910(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(_BYTE **)(a2 + 40);
  if (*v5 == 64 && v5[1] == 120 && v5[2] == 61)
  {
    *(void *)a4 = v5;
    *(void *)(a4 + 8) = "";
    *(void *)(a4 + 16) = "";
    *(void *)(a4 + 24) = 0LL;
    *(_DWORD *)(a4 + 32) = sub_1807E2910("");
    *(void *)(a4 + 36) = 7LL;
  }

  else
  {
    sub_1807E09A8( (char *)(*(void *)(a2 + 208) + *(int *)(a2 + 32)),  a1,  a2 + 8,  (const char *)(a2 + 20),  (char *)(a2 + 26),  a3,  a4);
  }

void sub_1807E09A8( char *__s1@<X4>, uint64_t a2@<X0>, uint64_t a3@<X1>, const char *a4@<X2>, char *a5@<X3>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v14 = *a5;
  if (v14 == 88)
  {
    int v15 = a5[1];
    if (a5[1])
    {
      if (!a5[2])
      {
        switch(v15)
        {
          case 'C':
            uint64_t v21 = a7;
            uint64_t v22 = 44LL;
            break;
          case 'B':
            uint64_t v21 = a7;
            uint64_t v22 = 43LL;
            break;
          case 'A':
            uint64_t v21 = a7;
            uint64_t v22 = 39LL;
            break;
          default:
            goto LABEL_4;
        }

        uint64_t v24 = a3;
        BOOL v25 = a4;
        unint64_t v23 = a5;
        uint64_t v26 = 7LL;
        goto LABEL_39;
      }
    }
  }

LABEL_4:
  if (*__s1 == 80 && __s1[1] == 83)
  {
    if (*a5) {
      uint64_t v16 = 7LL;
    }
    else {
      uint64_t v16 = 6LL;
    }
    if (!strcmp(__s1, "PSACCENT"))
    {
      if (v14) {
        unint64_t v23 = a5;
      }
      else {
        unint64_t v23 = "XA";
      }
      uint64_t v21 = a7;
      uint64_t v22 = 39LL;
    }

    else if (!strcmp(__s1, "PSBIDI"))
    {
      if (v14) {
        unint64_t v23 = a5;
      }
      else {
        unint64_t v23 = "XB";
      }
      uint64_t v21 = a7;
      uint64_t v22 = 43LL;
    }

    else
    {
      if (strcmp(__s1, "PSCRACK")) {
        goto LABEL_12;
      }
      if (v14) {
        unint64_t v23 = a5;
      }
      else {
        unint64_t v23 = "XC";
      }
      uint64_t v21 = a7;
      uint64_t v22 = 44LL;
    }

    uint64_t v24 = a3;
    BOOL v25 = a4;
    uint64_t v26 = v16;
LABEL_39:
    sub_1807E29A4(v21, v22, v24, v25, v23, v26, a6);
    return;
  }

      uint64_t v7 = -1;
      LODWORD(v5) = a3;
    }

      if (v11 != v12) {
        break;
      }
      uint64_t v12 = 0;
      uint64_t v19 = v11 == 2;
      BOOL v11 = 0;
      if (v19) {
        goto LABEL_72;
      }
    }

    uint64_t v31 = (unsigned __int16)v11;
    if ((unsigned __int16)v11 != (unsigned __int16)v12)
    {
      unint64_t v50 = (unsigned __int16)v12;
      goto LABEL_119;
    }

    if (v11 == 2) {
      break;
    }
    v11 >>= 16;
    v12 >>= 16;
  }

  *a6 = a5;
  return a4;
}

        uint64_t v7 = v13;
        if (!v13) {
          return a1;
        }
        goto LABEL_11;
      }
    }
  }

  uint64_t v7 = 128;
LABEL_11:
  sub_1808C7B8C(a1, v7, (uint64_t)a4);
  return a1;
}

  if (v11 <= 0) {
    return v3;
  }
  else {
    return 0LL;
  }
}

  int v15 = *(icu::TimeZoneRule **)(v13 + 8);
  uint64_t v16 = *(icu::TimeZoneRule **)(v13 + 16);
LABEL_5:
  uint64_t v17 = icu::TimeZoneRule::getRawOffset(v15);
  if (v17 == icu::TimeZoneRule::getRawOffset(v16))
  {
    uint64_t v18 = icu::TimeZoneRule::getDSTSavings(v15);
  }

  *a4 = v14;
  *a5 = v15;
  BOOL result = 1LL;
  *a6 = v16;
  return result;
}

  uint64_t v10 = (unsigned __int16)v90 >> 5;
  if ((v90 & 0x8000u) != 0LL) {
    uint64_t v10 = DWORD1(v90);
  }
  if (v10)
  {
    BOOL v11 = (unsigned __int16)v80 >> 5;
    if ((v80 & 0x8000u) != 0LL) {
      BOOL v11 = DWORD1(v80);
    }
    if (v11) {
      uint64_t v12 = &v84;
    }
    else {
      uint64_t v12 = &v79;
    }
    icu::UnicodeString::operator=(v12, &v89);
  }

  unint64_t v13 = (unsigned __int16)v85 >> 5;
  if ((v85 & 0x8000u) != 0LL) {
    unint64_t v13 = DWORD1(v85);
  }
  if (v13)
  {
    int v14 = 1;
  }

  else
  {
    uint64_t v39 = (unsigned __int16)v80 >> 5;
    if ((v80 & 0x8000u) != 0LL) {
      uint64_t v39 = DWORD1(v80);
    }
    if (!v39)
    {
      BOOL v45 = 0LL;
      unsigned int v44 = v51;
      *(_DWORD *)a2 = v51;
      goto LABEL_81;
    }

    icu::UnicodeString::unBogus((uint64_t)&v84);
    if ((v85 & 0x8000u) == 0LL) {
      BOOL v40 = (unsigned __int16)v85 >> 5;
    }
    else {
      BOOL v40 = DWORD1(v85);
    }
    icu::UnicodeString::doReplace((uint64_t)&v84, 0LL, v40, (uint64_t)L"Any", 0, 3LL);
    int v14 = 0;
  }

  LODWORD(v41) = (unsigned __int16)v80 >> 5;
  if ((v80 & 0x8000u) == 0LL) {
    uint64_t v41 = v41;
  }
  else {
    uint64_t v41 = DWORD1(v80);
  }
  if (!(_DWORD)v41)
  {
    icu::UnicodeString::unBogus((uint64_t)&v79);
    if ((v80 & 0x8000u) == 0LL) {
      __int128 v42 = (unsigned __int16)v80 >> 5;
    }
    else {
      __int128 v42 = DWORD1(v80);
    }
    icu::UnicodeString::doReplace((uint64_t)&v79, 0LL, v42, (uint64_t)L"Any", 0, 3LL);
  }

  uint64_t v43 = icu::UMemory::operator new((uint64_t *)v41, (icu::UMemory *)0x110, v6);
  BOOL v45 = v43;
  if (v43) {
    sub_18099E4F8((uint64_t)v43, &v84, &v79, &v74, v14, &v69);
  }
LABEL_81:
  icu::UnicodeString::~UnicodeString((void *)v44, (icu::UnicodeString *)&v69);
  icu::UnicodeString::~UnicodeString(v46, (icu::UnicodeString *)&v74);
  icu::UnicodeString::~UnicodeString(v47, (icu::UnicodeString *)&v79);
  icu::UnicodeString::~UnicodeString(v48, (icu::UnicodeString *)&v84);
  icu::UnicodeString::~UnicodeString(v49, (icu::UnicodeString *)&v89);
  return v45;
}

  uint64_t v12 = 0LL;
  memset(v28, 0, sizeof(v28));
  do
  {
    unint64_t v13 = &v28[v12];
    *(void *)unint64_t v13 = off_18971B688;
    *((_WORD *)v13 + 4) = 2;
    v12 += 4LL;
  }

  while (v12 != 16);
  uint64_t v22 = 0LL;
  int v14 = sub_1809BCE0C(a2, a3, a4, (char *)v28, &v22, a7);
  if (*a7 <= 0)
  {
    uint64_t v17 = (const icu::UnicodeString *)v14;
    uint64_t v24 = 0u;
    uint64_t v27 = 0LL;
    uint64_t v26 = 0u;
    BOOL v25 = 0u;
    unint64_t v23 = off_18971B688;
    LOWORD(v24) = 2;
    if (a5) {
      icu::UnicodeString::setTo((icu::UnicodeString *)&v23, a5, 0, a6);
    }
    icu::ListFormatter::format(a1, v17, a4, (icu::UnicodeString *)&v23, (UErrorCode *)a7);
    uint64_t v21 = (UChar *)a5;
    int v15 = icu::UnicodeString::extract((uint64_t)&v23, &v21, a6, a7);
    uint64_t v20 = v21;
    icu::UnicodeString::~UnicodeString(&v20, (icu::UnicodeString *)&v23);
  }

  else
  {
    int v15 = 0xFFFFFFFFLL;
  }

  sub_1807CCEEC((uint64_t *)&v22);
  for (uint64_t i = 12LL; i != -4; i -= 4LL)
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v28[i]);
  return v15;
}

double sub_1807E0B78@<D0>( char *__s1@<X1>, uint64_t a2@<X0>, const char *a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = __s1;
  if (!strcmp(__s1, "und") || !strcmp(v7, "root")) {
    uint64_t v7 = "";
  }
  if (!strcmp(a3, "Zzzz")) {
    a3 = "";
  }
  if (!strcmp(a4, "ZZ")) {
    a4 = "";
  }
  int v10 = *(unsigned __int8 *)v7;
  if (*a3)
  {
    if (*a4) {
      BOOL v11 = v10 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11)
    {
      *(void *)a5 = v7;
      *(void *)(a5 + 8) = a3;
LABEL_24:
      *(void *)(a5 + 16) = a4;
      *(void *)(a5 + 24) = 0LL;
      uint64_t v12 = a4;
      goto LABEL_87;
    }

    if (strcmp(a3, "Aran")) {
      goto LABEL_27;
    }
    goto LABEL_25;
  }

  if (!strcmp(a3, "Aran"))
  {
LABEL_25:
    if (!v10)
    {
      if (*a4)
      {
        uint64_t v21 = "IN";
        if (!strcmp(a4, "IN"))
        {
          uint64_t v31 = "ks";
        }

        else
        {
          uint64_t v21 = "PK";
          if (strcmp(a4, "PK"))
          {
            LOBYTE(icu::LocaleBuilder::setRegion((uint64_t)this, v9, v10) = 0;
            goto LABEL_27;
          }

          uint64_t v31 = "ur";
        }

        *(void *)a5 = v31;
        *(void *)(a5 + 8) = "Aran";
        *(void *)(a5 + 16) = v21;
        *(void *)(a5 + 24) = 0LL;
        uint64_t v12 = (char *)v21;
        goto LABEL_87;
      }

      *(void *)a5 = "ur";
      *(void *)(a5 + 8) = "Aran";
      goto LABEL_77;
    }

    if (*a4) {
      goto LABEL_27;
    }
    if (strcmp(v7, "ks"))
    {
      if (!strcmp(v7, "ur") || !strcmp(v7, "pa"))
      {
        *(void *)a5 = v7;
        *(void *)(a5 + 8) = "Aran";
LABEL_77:
        uint64_t v12 = "PK";
LABEL_84:
        *(void *)(a5 + 16) = v12;
        *(void *)(a5 + 24) = 0LL;
        goto LABEL_87;
      }

LABEL_52:
            v18 |= 1u;
            uint64_t v22 = *(void *)(a2 + 296);
            uint64_t v23 = v17;
            uint64_t v24 = (const char **)(v22 + 48LL * v17);
            goto LABEL_54;
          }

          goto LABEL_50;
        }
      }

      int v17 = sub_1807E10FC((icu::BytesTrie *)v32, (uint64_t)a3, 0);
      if (v17 < 0)
      {
        v18 |= 2u;
        if (!v19)
        {
          unint64_t v30 = *(void *)(a2 + 72);
          DWORD2(v32[1]) = (v30 >> 59) - 2;
          *(void *)&v32[1] = *((void *)&v32[0] + 1) + (v30 & 0x7FFFFFFFFFFFFFFLL);
          int v17 = sub_1807E10FC((icu::BytesTrie *)v32, (uint64_t)a4, 0);
          if ((v17 & 0x80000000) == 0) {
            goto LABEL_51;
          }
LABEL_79:
          int v17 = *(_DWORD *)(a2 + 80);
          goto LABEL_52;
        }

        DWORD2(v32[1]) = (v19 >> 59) - 2;
        *(void *)&v32[1] = *((void *)&v32[0] + 1) + (v19 & 0x7FFFFFFFFFFFFFFLL);
        int v17 = sub_1807E10FC((icu::BytesTrie *)v32, (uint64_t)"", 0);
      }

      else if (*a3)
      {
        v18 |= 2u;
      }

      if (v17 >= 1) {
        goto LABEL_51;
      }
      unint64_t v19 = (*(void *)&v32[1] - *((void *)&v32[0] + 1)) | ((unint64_t)(DWORD2(v32[1]) + 2) << 59);
LABEL_50:
      int v17 = sub_1807E10FC((icu::BytesTrie *)v32, (uint64_t)a4, 0);
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_51;
      }
      if (v19)
      {
        DWORD2(v32[1]) = (v19 >> 59) - 2;
        *(void *)&v32[1] = *((void *)&v32[0] + 1) + (v19 & 0x7FFFFFFFFFFFFFFLL);
        int v17 = sub_1807E10FC((icu::BytesTrie *)v32, (uint64_t)"", 0);
        goto LABEL_52;
      }

      goto LABEL_79;
    }

    *(void *)a5 = "ks";
    *(void *)(a5 + 8) = "Aran";
LABEL_83:
    uint64_t v12 = "IN";
    goto LABEL_84;
  }

  if (!v10 && !strcmp(a4, "PK"))
  {
    *(void *)a5 = "ur";
    *(void *)(a5 + 8) = "Aran";
    *(void *)(a5 + 16) = "PK";
    *(void *)(a5 + 24) = 0LL;
    uint64_t v12 = "PK";
    goto LABEL_87;
  }

  if (!strcmp(v7, "ur"))
  {
    int v26 = *a4;
    *(void *)a5 = "ur";
    *(void *)(a5 + 8) = "Aran";
    if (v26) {
      goto LABEL_24;
    }
    goto LABEL_77;
  }

  if (!strcmp(v7, "ks"))
  {
    int v27 = *a4;
    *(void *)a5 = "ks";
    *(void *)(a5 + 8) = "Aran";
    if (v27) {
      goto LABEL_24;
    }
    goto LABEL_83;
  }

  if (strcmp(v7, "pa") || strcmp(a4, "PK")) {
    goto LABEL_27;
  }
  *(void *)a5 = "pa";
  *(void *)(a5 + 8) = "Aran";
  *(void *)(a5 + 16) = "PK";
  *(void *)(a5 + 24) = 0LL;
  uint64_t v12 = "PK";
LABEL_87:
  *(_DWORD *)(a5 + 32) = sub_1807E2910(v12);
  *(void *)&double result = 7LL;
  *(void *)(a5 + 36) = 7LL;
  return result;
}

  v5[2] = v21;
  v5[4] = v7;
  v5[6] = v32;
  return result;
}

  v5[2] = v21;
  v5[4] = v7;
  v5[6] = v36;
  return result;
}

    if (v42 < U_ILLEGAL_ARGUMENT_ERROR)
    {
LABEL_54:
      ures_getByKey(v13, "Currencies", v13, (int *)&v42);
      ures_getByKeyWithFallback(v13, __s, v13, &v42);
      uint64_t v6 = ures_getStringByIndex(v13, v8, a5, (int *)&v42);
LABEL_55:
      int v29 = v42;
      if (v42 <= U_ZERO_ERROR && (v42 == U_USING_DEFAULT_WARNING || v42 == U_USING_FALLBACK_WARNING && *a6 != -127)) {
        *a6 = v42;
      }
      if (a4) {
        *a4 = 0;
      }
      if (v29 >= U_ILLEGAL_ARGUMENT_ERROR)
      {
        *a5 = u_strlen(a1);
        *a6 = -127;
        uint64_t v6 = a1;
      }

      goto LABEL_64;
    }

        if (BYTE4(v28[1])) {
          uprv_free(v28[0]);
        }
      }
    }
  }

    HIDWORD(v62) = v25;
    LODWORD(v63) = v26;
    unsigned int v60 = 0LL;
    uint64_t v37 = a1;
    __int128 v38 = ucase_toFullTitle(v23, (uint64_t (*)(uint64_t, void))sub_18087C080, (uint64_t)v61, &v60, a1);
    uint64_t v39 = sub_18087C17C(a4, v10, a5, v38, v60, (int)v26 - v25, v11, a8);
    if ((v39 & 0x80000000) != 0)
    {
LABEL_139:
      int v10 = 0LL;
      uint64_t v12 = 8;
      goto LABEL_140;
    }

    BOOL v40 = v39;
    if (a1 != 5 || (uint64_t v41 = v25 + 1LL, (int)v41 >= (int)v16) || (v42 = v38 ^ (v38 >> 31), v42 != 205) && v42 != 73)
    {
      int v10 = v39;
      goto LABEL_109;
    }

    int v26 = v25 + 2LL;
    uint64_t v43 = *(unsigned __int16 *)(a6 + 2 * v41);
    if (v42 == 73)
    {
      if (v43 == 769)
      {
        if ((_DWORD)v26 == (_DWORD)v16)
        {
          int v10 = v39;
          int v26 = v25 + 1LL;
          goto LABEL_109;
        }

        uint64_t v43 = *(unsigned __int16 *)(a6 + 2 * v26);
        BOOL v45 = 1;
        int v26 = (v25 + 3);
        unsigned int v44 = 1;
      }

      else
      {
        BOOL v45 = 0;
        unsigned int v44 = 0;
      }
    }

    else
    {
      unsigned int v44 = 0;
      BOOL v45 = 1;
    }

    if (v43 != 106)
    {
      if (v43 == 74)
      {
        ++v44;
        goto LABEL_69;
      }

      goto LABEL_82;
    }

          uint64_t v6 = 0LL;
          unint64_t v20 = *v21;
          if (!*v21) {
            return v6;
          }
        }
      }

      return u_strchr(s, v11);
    }

    return (UChar *)s;
  }

  if (subLength < 0)
  {
    subint Length = -1;
    int v8 = substring;
    do
    {
      uint64_t v9 = *v8++;
      ++subLength;
    }

    while (v9);
  }

  if (!subLength) {
    return (UChar *)s;
  }
  int v10 = *substring;
  if (subLength == 1 && (v10 & 0xF800) != 0xD800)
  {
    LOWORD(v11) = *substring;
    if ((length & 0x80000000) == 0) {
      return u_memchr(s, v11, length);
    }
    return u_strchr(s, v11);
  }

  __int128 v13 = subLength - 1;
  if ((length & 0x80000000) == 0)
  {
    if (subLength <= length)
    {
      unsigned int v14 = &s[length];
      unint64_t v15 = &v14[-v13];
      if (v15 != s)
      {
        int v16 = s;
        while (1)
        {
          uint64_t v6 = (UChar *)v16;
          int v17 = *v16++;
          if (v17 == v10)
          {
            int v18 = v16;
            if (subLength == 1)
            {
LABEL_30:
              if ((v6 == s || (v10 & 0xFC00) != 0xDC00 || (*(v6 - 1) & 0xFC00) != 0xD800)
                && (v18 == v14 || (*(v18 - 1) & 0xFC00) != 0xD800 || (*v18 & 0xFC00) != 0xDC00))
              {
                return v6;
              }
            }

            else
            {
              unint64_t v19 = 1LL;
              while (v6[v19] == substring[v19])
              {
                if (-2 * v13 + ++v19 * 2 == 2)
                {
                  int v18 = &v6[v19];
                  goto LABEL_30;
                }
              }
            }
          }

          uint64_t v6 = 0LL;
          if (v16 == v15) {
            return v6;
          }
        }
      }
    }

    return 0LL;
  }

  BOOL v25 = *s;
  if (!*s) {
    return 0LL;
  }
  int v26 = s;
  while (1)
  {
    uint64_t v6 = (UChar *)v26++;
    if (v10 == v25) {
      break;
    }
LABEL_64:
    uint64_t v6 = 0LL;
    BOOL v25 = *v26;
    if (!*v26) {
      return v6;
    }
  }

  int v27 = (UChar *)v26;
  if (!(_DWORD)v13)
  {
LABEL_63:
    if (sub_18087ECD0(s, v6, v27, 0LL)) {
      return v6;
    }
    goto LABEL_64;
  }

  uint64_t v28 = 1LL;
  while (v6[v28])
  {
    if (v6[v28] != substring[v28]) {
      goto LABEL_64;
    }
    if (-2 * v13 + ++v28 * 2 == 2)
    {
      int v27 = &v6[v28];
      goto LABEL_63;
    }
  }

  return 0LL;
}

        uint64_t v41 = v49(v9, v35 & 0xFFFFFC00, (i + 32));
        __int128 v42 = (unsigned __int16)((v35 >> 10) - 10304);
        if (*(_BYTE *)(v9 + 139419))
        {
          uint64_t v43 = 0;
        }

        else
        {
          unsigned int v44 = *(_DWORD *)(v9 + 4LL * (v42 >> 5));
          if (v44 < 0) {
            unsigned int v44 = -v44;
          }
          uint64_t v43 = *(_DWORD *)(*(void *)(v9 + 139392) + 4LL * (v44 + ((v35 >> 10) & 0x1F)));
        }

        if (v41 != v43)
        {
          if (!utrie_set32(v9, v42, v41))
          {
            BOOL v45 = 7;
            goto LABEL_73;
          }

          if ((_DWORD)i == v36)
          {
            memmove((void *)(v9 + 4LL * v36), (const void *)(v9 + 4LL * v37), 0x80uLL);
            v36 += 32;
          }
        }

        uint64_t v35 = (v35 & 0xFFFFFC00) + 1024;
      }

      else
      {
        v35 += 32;
      }
    }

    while (v35 < 1114112);
    if (v36 < 34816)
    {
      memmove((void *)(v9 + 8320), (const void *)(v9 + 0x2000), 4 * v36 - 0x2000);
      *(_OWORD *)(v9 + 8256) = v54;
      *(_OWORD *)(v9 + 8272) = v55;
      *(_OWORD *)(v9 + 8288) = v56;
      *(_OWORD *)(v9 + 8304) = v57;
      *(_OWORD *)(v9 + 0x2000) = v50;
      *(_OWORD *)(v9 + 8208) = v51;
      *(_OWORD *)(v9 + 8224) = v52;
      *(_OWORD *)(v9 + 8240) = v53;
      int v48 = v36 + 32;
      __int128 v13 = v9 + 139392;
      *(_DWORD *)(v9 + 139404) = v48;
      goto LABEL_74;
    }

    BOOL v45 = 8;
LABEL_73:
    *a6 = v45;
    __int128 v13 = v9 + 139392;
LABEL_74:
    sub_180888FC0(v9, 1, a6);
    *(_BYTE *)(v13 + 27) = 1;
    if (*a6 > 0) {
      return 0LL;
    }
  }

  unsigned int v14 = *(_DWORD *)(v13 + 20);
  unint64_t v15 = v14;
  if (a5) {
    unint64_t v15 = *(_DWORD *)(v13 + 12) + v14;
  }
  if (v15 >= 0x40000) {
    *a6 = 8;
  }
  int v16 = *(_DWORD *)(v13 + 12);
  if (a5) {
    int v17 = 1;
  }
  else {
    int v17 = 2;
  }
  uint64_t v7 = ((v14 << v17) + 2 * v16 + 16);
  if ((int)v7 <= a3)
  {
    int v18 = a2 + 4;
    if (a5) {
      unint64_t v19 = 37;
    }
    else {
      unint64_t v19 = 293;
    }
    *a2 = 1416784229;
    a2[1] = v19;
    if (*(_BYTE *)(v13 + 26)) {
      a2[1] = v19 | 0x200;
    }
    a2[2] = v16;
    a2[3] = v14;
    if (a5)
    {
      if (v16 >= 1)
      {
        unint64_t v20 = v16 + 1;
        do
        {
          uint64_t v21 = *(_DWORD *)v9;
          v9 += 4LL;
          *v18++ = (v21 + v16) >> 2;
          --v20;
        }

        while (v20 > 1);
      }

      if (v14 >= 1)
      {
        uint64_t v22 = *(int **)v13;
        uint64_t v23 = v14 + 1;
        do
        {
          uint64_t v24 = *v22++;
          *v18++ = v24;
          --v23;
        }

        while (v23 > 1);
      }
    }

    else
    {
      if (v16 >= 1)
      {
        uint64_t v46 = v16 + 1;
        do
        {
          uint64_t v47 = *(_DWORD *)v9;
          v9 += 4LL;
          *v18++ = v47 >> 2;
          --v46;
        }

        while (v46 > 1);
      }

      memcpy(v18, *(const void **)v13, 4LL * v14);
    }
  }

  return v7;
}

        LODWORD(a3) = a3 + 1;
        continue;
      }

      *(_BYTE *)(a8 + 8) = 1;
      if (!v34) {
        goto LABEL_52;
      }
      int v29 = sub_18088E254(a1, (icu::UnicodeString *)a7, v24, a3, a9);
      if (*a9 > 0) {
        return a7;
      }
      uint64_t v23 = v29;
      unint64_t v30 = *(_WORD *)(a7 + 8);
      if ((v30 & 0x11) != 0)
      {
        uint64_t v34 = 0;
        unint64_t v20 = 0LL;
      }

      else
      {
        uint64_t v34 = 0;
        if ((v30 & 2) != 0) {
          unint64_t v20 = a7 + 10;
        }
        else {
          unint64_t v20 = *(void *)(a7 + 24);
        }
      }
    }

    else
    {
      a3 = (a3 - v24);
      int v26 = sub_18088DAEC(a1, (void (***)(icu::UnicodeString *__hidden))a7, v24, a3, a6, a8, a9);
      *(_DWORD *)a8 |= *(_DWORD *)(a8 + 4);
      *(_DWORD *)(a8 + 4) = 0;
      if (*a9 > 0) {
        return a7;
      }
      int v27 = *(_WORD *)(a7 + 8);
      uint64_t v28 = *(void *)(a7 + 24);
      if ((v27 & 2) != 0) {
        uint64_t v28 = a7 + 10;
      }
      if ((v27 & 0x11) != 0) {
        unint64_t v20 = 0LL;
      }
      else {
        unint64_t v20 = v28;
      }
      uint64_t v23 = v23 - a3 + v26;
      uint64_t v24 = (v24 + v26 + 1);
      LODWORD(a3) = v24;
    }
  }

  while ((int)a3 < v23);
  if (!(_DWORD)v24)
  {
LABEL_58:
    sub_18088DAEC( a1,  (void (***)(icu::UnicodeString *__hidden))a7,  v24,  (a3 - v24),  a6,  a8,  a9);
    *(_DWORD *)a8 |= *(_DWORD *)(a8 + 4);
    return a7;
  }

    uint64_t v39 = 0;
    *(void *)(a1 + 8 * v35 + 24) = v38;
    __int128 v36 = 1;
    goto LABEL_53;
  }

  if (v4 != 5) {
    return v2;
  }
  uint64_t v5 = (const int *)(*(void *)(*(void *)a1 + 64LL) + 4LL * (a2 >> 13));
  uint64_t v6 = (a2 >> 8) & 0x1F;
  if (!(_DWORD)v6) {
    return icu::CollationDataBuilder::encodeExpansion32( *(icu::CollationDataBuilder **)(a1 + 8),  v5,  v6,  (UErrorCode *)(a1 + 272));
  }
  uint64_t v7 = 0LL;
  int v8 = 0;
  do
  {
    uint64_t v9 = v5[v7];
    if ((~v9 & 0xC0) != 0
      && (int v10 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 24LL))( *(void *)(a1 + 16),  v5[v7]),  v10 != 0x101000100LL))
    {
      if (!v8 && v7)
      {
        for (uint64_t j = 0LL; j != v7; ++j)
        {
          __int128 v13 = v5[j];
          unsigned int v14 = v13;
          unint64_t v15 = v13 & 0xFFFFFF00;
          if ((v13 & 0xF) == 1) {
            unint64_t v15 = ((unint64_t)(v13 & 0xFFFFFF00) << 32) | 0x5000500;
          }
          int v16 = (v13 << 16) & 0xFF000000 | ((unint64_t)((v13 & 0xFFFF0000) >> 16) << 48) | ((unint64_t)v13 << 8);
          if (v14 > 0xBF) {
            int v16 = v15;
          }
          *(void *)(a1 + 24 + 8 * j) = v16;
        }
      }
    }

    else
    {
      if (!v8)
      {
        BOOL v11 = 1;
        goto LABEL_26;
      }

      if (v9 > 0xBFu)
      {
        if ((v9 & 0xF) == 1) {
          int v10 = ((unint64_t)(v9 & 0xFFFFFF00) << 32) | 0x5000500;
        }
        else {
          int v10 = v9 & 0xFFFFFF00;
        }
      }

      else
      {
        int v10 = (v9 << 16) & 0xFF000000 | ((unint64_t)((v9 & 0xFFFF0000) >> 16) << 48) | ((unint64_t)v9 << 8);
      }
    }

    BOOL v11 = 0;
    *(void *)(a1 + 8 * v7 + 24) = v10;
    int v8 = 1;
LABEL_26:
    ++v7;
  }

  while (v7 != v6);
  if ((v11 & 1) != 0) {
    return icu::CollationDataBuilder::encodeExpansion32( *(icu::CollationDataBuilder **)(a1 + 8),  v5,  v6,  (UErrorCode *)(a1 + 272));
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 32LL))( *(void *)(a1 + 8),  a1 + 24,  v6,  a1 + 272);
}

      uint64_t v32 = 0;
      *((_DWORD *)this + 40) = 0;
      uint64_t v31 = (int *)((char *)this + 160);
    }

    if (v7 <= 3)
    {
      __int128 v38 = (char *)this + 44;
      uint64_t v39 = v7 - 4LL;
      BOOL v40 = (int *)&v42[v7 + 1];
      uint64_t v41 = (int *)&v44[v7 + 1];
      do
      {
        if (v40[3] >= 1)
        {
          *(_OWORD *)&v38[16 * v32] = *(_OWORD *)v40;
          uint64_t v32 = *v31 + 1;
          *uint64_t v31 = v32;
        }

        if (v41[3] >= 1)
        {
          *(_OWORD *)&v38[16 * v32] = *(_OWORD *)v41;
          uint64_t v32 = *v31 + 1;
          *uint64_t v31 = v32;
        }

        v40 += 4;
        v41 += 4;
        unint64_t v19 = __CFADD__(v39++, 1LL);
      }

      while (!v19);
    }

    return v32 > 0;
  }

  return result;
}

uint64_t sub_1807E10FC(icu::BytesTrie *this, uint64_t a2, int a3)
{
  int v5 = *(unsigned __int8 *)(a2 + a3);
  if (v5)
  {
    uint64_t v6 = (unsigned __int8 *)(a3 + a2 + 1);
    while (1)
    {
      int v8 = *v6++;
      int v7 = v8;
      if (!v8) {
        break;
      }
      char v9 = icu::BytesTrie::next(this, v5);
      int v5 = v7;
      if ((v9 & 1) == 0) {
        return 0xFFFFFFFFLL;
      }
    }

    int v11 = v5 | 0x80;
  }

  else
  {
    int v11 = 42;
  }

  int v12 = icu::BytesTrie::next(this, v11);
  switch(v12)
  {
    case 3:
      return 1LL;
    case 2:
      return icu::BytesTrie::readValue( (icu::BytesTrie *)(*((void *)this + 2) + 1LL),  (const unsigned __int8 *)(**((unsigned __int8 **)this + 2) >> 1));
    case 1:
      return 0LL;
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_1807E11AC(uint64_t a1, uint64_t a2, const char **a3, unsigned int a4)
{
  int v8 = *(char **)a2;
  int v10 = *(const char **)(a2 + 8);
  if (!strcmp(v10, a3[1]))
  {
    int v10 = *(const char **)(a2 + 16);
    if (!strcmp(v10, a3[2])) {
      return a4 & 0xFFFFFFFE;
    }
    if ((a4 & 0x80000002) == 2)
    {
      int v13 = a4 >> 2;
      int v12 = a4 & 0xFFFFFFFE;
    }

    else
    {
      int v13 = sub_1807E12D8(a1, v8, v10);
      int v12 = (4 * v13) | 2;
      int v10 = *(const char **)(a2 + 16);
    }

    unsigned int v14 = *(const char **)(*(void *)(a1 + 296) + 48LL * v13 + 16);
  }

  else
  {
    if ((a4 & 0x80000002) != 0)
    {
      int v11 = sub_1807E12D8(a1, v8, "");
      int v12 = 4 * v11;
      int v10 = *(const char **)(a2 + 8);
    }

    else
    {
      int v11 = a4 >> 2;
      int v12 = a4 & 0xFFFFFFFE;
    }

    unsigned int v14 = *(const char **)(*(void *)(a1 + 296) + 48LL * v11 + 8);
  }

  return v12 | (strcmp(v10, v14) == 0);
}

uint64_t sub_1807E12D8(uint64_t a1, char *__s1, const char *a3)
{
  uint64_t v4 = __s1;
  if (!strcmp(__s1, "und")) {
    uint64_t v4 = "";
  }
  if (!strcmp(a3, "Zzzz")) {
    a3 = "";
  }
  memset(v19, 0, sizeof(v19));
  __int128 v6 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)((char *)v19 + 8) = v6;
  DWORD2(v19[1]) = *(_DWORD *)(a1 + 56);
  unsigned int v7 = *v4 - 97;
  if (v7 <= 0x19 && v4[1] && (unint64_t v8 = *(void *)(a1 + 8LL * v7 + 88)) != 0)
  {
    DWORD2(v19[1]) = (v8 >> 59) - 2;
    *(void *)&v19[1] = v6 + (v8 & 0x7FFFFFFFFFFFFFFLL);
    int v9 = 1;
  }

  else
  {
    int v9 = 0;
  }

  uint64_t v10 = sub_1807E10FC((icu::BytesTrie *)v19, (uint64_t)v4, v9);
  if ((v10 & 0x80000000) != 0)
  {
    unint64_t v16 = *(void *)(a1 + 64);
    DWORD2(v19[1]) = (v16 >> 59) - 2;
    *(void *)&v19[1] = *((void *)&v19[0] + 1) + (v16 & 0x7FFFFFFFFFFFFFFLL);
    uint64_t v11 = sub_1807E10FC((icu::BytesTrie *)v19, (uint64_t)a3, 0);
    if ((v11 & 0x80000000) != 0)
    {
LABEL_19:
      unint64_t v17 = *(void *)(a1 + 72);
      DWORD2(v19[1]) = (v17 >> 59) - 2;
      *(void *)&v19[1] = *((void *)&v19[0] + 1) + (v17 & 0x7FFFFFFFFFFFFFFLL);
      goto LABEL_20;
    }
  }

  else
  {
    uint64_t v11 = v10;
    if ((_DWORD)v10 == 1)
    {
LABEL_20:
      uint64_t v11 = sub_1807E10FC((icu::BytesTrie *)v19, (uint64_t)"", 0);
      goto LABEL_21;
    }

    if ((_DWORD)v10) {
      goto LABEL_21;
    }
    int v12 = DWORD2(v19[1]);
    uint64_t v14 = *((void *)&v19[0] + 1);
    uint64_t v13 = *(void *)&v19[1];
    uint64_t v11 = sub_1807E10FC((icu::BytesTrie *)v19, (uint64_t)a3, 0);
    if ((v11 & 0x80000000) != 0)
    {
      unint64_t v15 = (v13 - v14) | ((unint64_t)(v12 + 2) << 59);
      if (v15)
      {
        DWORD2(v19[1]) = (v15 >> 59) - 2;
        *(void *)&v19[1] = *((void *)&v19[0] + 1) + ((v13 - v14) & 0x7FFFFFFFFFFFFFFLL);
        uint64_t v11 = sub_1807E10FC((icu::BytesTrie *)v19, (uint64_t)"", 0);
        goto LABEL_17;
      }

      goto LABEL_19;
    }
  }

uint64_t sub_1807E14C0( uint64_t a1, icu::ResourceTable *this, char *__s1, icu::ResourceValue *a4, void **a5, int *a6, UErrorCode *a7)
{
  if (icu::ResourceTable::findValue(this, __s1, a4))
  {
    v20[0] = 0LL;
    v20[1] = 0LL;
    uint64_t v21 = 0LL;
    (*(void (**)(void *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a4 + 80LL))( v20,  a4,  a7);
    uint64_t v13 = v21;
    *a6 = v21;
    if ((_DWORD)v13)
    {
      if ((int)v13 < 1 || (uint64_t v14 = uprv_malloc(4 * v13)) == 0LL)
      {
        uint64_t result = 0LL;
        *a7 = U_MEMORY_ALLOCATION_ERROR;
        return result;
      }

      unint64_t v15 = v14;
      uprv_free(*a5);
      *a5 = v15;
      if (*a6 >= 1)
      {
        uint64_t v16 = 0LL;
        uint64_t v17 = a1 + 8;
        while (1)
        {
          if (icu::ResourceArray::getValue((icu::ResourceArray *)v20, v16, a4))
          {
            int v19 = 0;
            int v18 = (UChar *)(*(uint64_t (**)(icu::ResourceValue *, int *, UErrorCode *))(*(void *)a4 + 32LL))( a4,  &v19,  a7);
            *((_DWORD *)v15 + v16) = sub_1807DDA70(v17, v18, a7);
          }

          if (++v16 >= *a6) {
            return 1LL;
          }
        }

        return 0LL;
      }
    }
  }

  return 1LL;
}

uint64_t sub_1807E1604(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 216);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 - 8);
    if (v3)
    {
      uint64_t v4 = 48 * v3;
      do
      {
        if (*(void *)(v2 + v4 - 24)) {
          sub_1807E29A8(v2 + v4 - 48);
        }
        v4 -= 48LL;
      }

      while (v4);
    }

    icu::UMemory::operator delete[]((void *)(v2 - 16));
  }

  sub_1807DFC28(a1 + 232);
  uhash_close(*(_BYTE **)(a1 + 200));
  uhash_close(*(_BYTE **)(a1 + 192));
  sub_1807DDB4C(a1 + 8);
  return a1;
}

uint64_t uprv_convertToPosix(int a1, void *a2, int a3, int *a4)
{
  uint64_t v7 = 0LL;
  while (1)
  {
    unint64_t v8 = *(int **)&dword_18970C5B0[v7 + 2];
    if ((a1 & 0x3FF) == *v8) {
      break;
    }
    v7 += 4LL;
    if (v7 == 564) {
      goto LABEL_17;
    }
  }

  uint64_t v9 = dword_18970C5B0[v7];
  if ((_DWORD)v9)
  {
    uint64_t v10 = 0LL;
    uint64_t v11 = v8;
    while (1)
    {
      int v12 = *v11;
      v11 += 4;
      if (v12 == a1) {
        break;
      }
      if (v9 == ++v10) {
        goto LABEL_9;
      }
    }
  }

  else
  {
LABEL_9:
    uint64_t v10 = 0LL;
  }

  uint64_t v13 = &v8[4 * v10];
  uint64_t v14 = (const void *)*((void *)v13 + 1);
  if (!v14)
  {
LABEL_17:
    uint64_t v16 = 0xFFFFFFFFLL;
    int v18 = 1;
    goto LABEL_21;
  }

  size_t v15 = strlen(*((const char **)v13 + 1));
  uint64_t v16 = v15;
  else {
    int v17 = v15;
  }
  memcpy(a2, v14, v17);
  if ((int)v16 >= a3)
  {
    if ((_DWORD)v16 == a3) {
      int v18 = -124;
    }
    else {
      int v18 = 15;
    }
  }

  else
  {
    int v18 = 0;
    *((_BYTE *)a2 + (int)v16) = 0;
    if (*a4 != -124) {
      return v16;
    }
  }

LABEL_21:
  *a4 = v18;
  return v16;
}

          uint64_t v7 = -1;
          goto LABEL_22;
        }

        if (v7 > 0xEF)
        {
          if (v7 > 0xF4) {
            goto LABEL_21;
          }
          unint64_t v8 = *(unsigned __int8 *)(a1 + v5);
          int v5 = a2 + 2LL;
          if (a2 + 2 == a3) {
            goto LABEL_4;
          }
          uint64_t v9 = *(unsigned __int8 *)(a1 + v5) ^ 0x80;
          if (v9 > 0x3F)
          {
            uint64_t v7 = -1;
            goto LABEL_22;
          }

          LODWORD(icu::LocaleBuilder::setVariant((uint64_t)this, v7, v8) = v8 & 0x3F | ((v7 - 240) << 6);
        }

        else
        {
          unint64_t v8 = v6 & 0xF;
          uint64_t v9 = *(_BYTE *)(a1 + v5) & 0x3F;
        }

        LODWORD(v5) = v5 + 1;
        if ((_DWORD)v5 != a3)
        {
          uint64_t v10 = v9 | ((_DWORD)v8 << 6);
          goto LABEL_13;
        }
      }

    uint64_t v9 = *a2++;
    unint64_t v8 = v9;
    if (!v9)
    {
      int v12 = 0;
      goto LABEL_41;
    }

    uint64_t v10 = v3;
    while (2)
    {
      if ((v8 & 0x80) != 0 || (uint64_t v11 = byte_180A24FE0[v8]) == 0)
      {
        unint64_t v8 = *a2;
LABEL_31:
        uint64_t v10 = 0;
        int v12 = 0;
        uint64_t v3 = 0;
        ++a2;
        if (!v8) {
          goto LABEL_41;
        }
        continue;
      }

      break;
    }

    if (v11 == 1)
    {
      if (v10)
      {
        uint64_t v3 = 1;
        goto LABEL_40;
      }

      if (*a2 < 0 || byte_180A24FE0[*a2] - 1 > 1)
      {
        uint64_t v3 = 0;
LABEL_40:
        int v12 = v8;
        goto LABEL_41;
      }

      unint64_t v8 = *a2;
      goto LABEL_31;
    }

    if (v11 == 2) {
      int v12 = v8;
    }
    else {
      int v12 = byte_180A24FE0[v8];
    }
    uint64_t v3 = v11 == 2;
LABEL_41:
    if (v12 | v7)
    {
      uint64_t v13 = (v7 - v12);
      if ((_DWORD)v13) {
        return v13;
      }
      continue;
    }

    return 0LL;
  }

      v4[2] += 2LL;
      int v12 = (_BYTE *)v4[4];
      if ((unint64_t)v12 >= v4[5])
      {
        uint64_t v13 = (char *)&v36;
LABEL_29:
        if ((int)result >= 1)
        {
          uint64_t v16 = v4[1];
          int v17 = (_BYTE *)(v16 + 104);
          *a2 = 15;
          *(_BYTE *)(v16 + 91) = result;
          do
          {
            int v18 = *v13++;
            *v17++ = v18;
            uint64_t result = (result - 1);
          }

          while ((_DWORD)result);
        }
      }

      else
      {
        uint64_t v13 = (char *)&v36;
        while ((_DWORD)result)
        {
          uint64_t v14 = *v13++;
          v4[4] = v12 + 1;
          *int v12 = v14;
          size_t v15 = (_DWORD *)v4[6];
          if (v15)
          {
            *size_t v15 = v5;
            v4[6] = v15 + 1;
          }

          int v12 = (_BYTE *)v4[4];
          uint64_t result = (result - 1);
        }
      }

      ++v5;
      *(_BYTE *)(v6 + 161) = v8;
      uint64_t v2 = (unsigned __int16 *)v4[2];
    }

    if ((unsigned __int16)(v9 - 32) <= 0x5Fu)
    {
      LOBYTE(v36) = v9;
LABEL_20:
      uint64_t result = 1LL;
      goto LABEL_21;
    }

    goto LABEL_15;
  }

  return result;
}

        int v17 = 65533;
        size_t v15 = v5;
        goto LABEL_42;
      }

      int v17 = 65533;
LABEL_42:
      if (v14 == icu::UnicodeSet::contains(this, v17))
      {
        uint64_t v9 = v15;
      }

      return v9;
    }

    if (v17 >= 0xC2)
    {
      unint64_t v20 = v17 & 0x1F;
      goto LABEL_30;
    }

    __int128 v6 = 1;
    goto LABEL_22;
  }

  if (v4 > 0xF4) {
    goto LABEL_21;
  }
  uint64_t v13 = v4 - 240;
  uint64_t v14 = a2[1];
  if (a3 == 2) {
    goto LABEL_22;
  }
  unint64_t v8 = a2[2] ^ 0x80;
  if (v8 > 0x3F)
  {
    __int128 v6 = 2;
    goto LABEL_22;
  }

  uint64_t v7 = v14 & 0x3F | (v13 << 6);
  uint64_t v9 = 3;
LABEL_10:
  if (v9 != a3)
  {
    uint64_t v10 = v8 | (v7 << 6);
    goto LABEL_14;
  }

  if ((_DWORD)v11 != v13)
  {
    if (a4)
    {
      uint64_t v16 = (const UChar *)(a4 + 2LL * a5);
      if ((a6 & 0x80000000) != 0)
      {
        uint64_t v9 = u_strlen((const UChar *)(a4 + 2LL * a5));
        int v12 = *(_WORD *)(v6 + 8);
      }
    }

    else
    {
      uint64_t v16 = 0LL;
      uint64_t v9 = 0LL;
    }

    if ((v12 & 0x8000) != 0)
    {
      int v18 = *(unsigned int *)(v6 + 12);
      if ((v11 & 0x80000000) == 0)
      {
LABEL_31:
        int v19 = v18;
        if ((int)v11 <= (int)v18)
        {
          if ((v10 & 0x80000000) == 0) {
            goto LABEL_33;
          }
          goto LABEL_38;
        }

      *(void *)(v9 + 32) = 0LL;
      *(_DWORD *)(v9 + 104) = 0;
      goto LABEL_22;
    }

    uint64_t v21 = (char *)uprv_malloc(0x88uLL);
    uint64_t v9 = (uint64_t)v21;
    if (v21)
    {
      *(void *)(v21 + 116) = 0x12BB38B012C9B17LL;
      goto LABEL_21;
    }

    uint64_t v16 = 7;
  }

  else
  {
    uint64_t v9 = 0LL;
    uint64_t v16 = 1;
  }

      a7 = v17;
LABEL_39:
      int v17 = a7;
    }

    a7 = v17;
LABEL_43:
    if ((int)v16 < a8)
    {
      size_t v15 = (v16 + 1);
      uint64_t v24 = (unsigned __int16)v18;
      if ((v18 & 0xFC00) == 0xD800 && (int)v15 < a8)
      {
        BOOL v25 = *(unsigned __int16 *)(a5 + 2LL * (int)v15);
        int v26 = a1;
        if ((v25 & 0xFC00) == 0xDC00)
        {
          uint64_t v24 = v25 + ((unsigned __int16)v18 << 10) - 56613888;
          size_t v15 = (v16 + 2);
        }
      }

      else
      {
        int v26 = a1;
      }

      *(void *)uint64_t v41 = 0LL;
      if (v26 < 0)
      {
        int v27 = ucase_toFullFolding(v24, v41, a2);
      }

      else
      {
        *(_DWORD *)(a6 + 20) = v16;
        *(_DWORD *)(a6 + 24) = v15;
        int v27 = ucase_toFullLower(v24, (uint64_t (*)(uint64_t, void))sub_18087C080, a6, v41, v26);
      }

      uint64_t v28 = v27;
      if ((v27 & 0x80000000) == 0)
      {
        int v29 = v16 - a7;
        if (a9) {
          icu::Edits::addUnchanged(a9, v16 - a7);
        }
        if ((a2 & 0x4000) != 0)
        {
LABEL_60:
          unint64_t v30 = v14;
          goto LABEL_61;
        }

        unint64_t v30 = v29 + v14;
LABEL_61:
        if ((v30 & 0x80000000) != 0) {
          goto LABEL_73;
        }
        uint64_t v14 = sub_18087C17C(a3, v30, a4, v28, *(__int16 **)v41, (int)v15 - (int)v16, a2, a9);
        a7 = v15;
        if ((v14 & 0x80000000) != 0) {
          goto LABEL_73;
        }
      }

      continue;
    }

    break;
  }

  uint64_t v31 = v16 - a7;
  if (a9) {
    icu::Edits::addUnchanged(a9, v16 - a7);
  }
  if ((a2 & 0x4000) != 0)
  {
LABEL_71:
    uint64_t v32 = v14;
  }

  else
  {
    uint64_t v32 = v31 + v14;
  }

  if ((v32 & 0x80000000) != 0)
  {
LABEL_73:
    uint64_t v32 = 0LL;
    *a10 = 8;
  }

  return v32;
}

      if (v13 <= 19)
      {
        uint64_t v22 = *a5;
        if (*a5)
        {
          uint64_t v23 = 0LL;
          uint64_t v24 = *(void *)(a2 + 40);
          BOOL v25 = v24 + SHIDWORD(v40);
          int v26 = *(int *)(a2 + 48);
          int v27 = v24 + v26;
          uint64_t v28 = a5;
          do
          {
            if (SHIDWORD(v40) < (int)v26)
            {
              int v29 = 0LL;
              unint64_t v30 = 0;
              while (*(unsigned __int8 *)(v25 + v29) == v22)
              {
                uint64_t v31 = &v28[v29++];
                uint64_t v22 = v31[1];
                v30 += 5;
                if (v22) {
                  uint64_t v32 = v29 + v25 >= v27;
                }
                else {
                  uint64_t v32 = 1;
                }
                if (v32)
                {
                  if (v22) {
                    uint64_t v33 = 0;
                  }
                  else {
                    uint64_t v33 = v30;
                  }
                  goto LABEL_36;
                }
              }
            }

            uint64_t v33 = 0;
LABEL_36:
            v12 += v33;
            ++v23;
            uint64_t v22 = a5[16 * v23];
            v28 += 16;
          }

          while (v22);
        }
      }

      ++v13;
    }

    ++v11;
    if (v10 >= 2 && 5 * v10 >= v13) {
      return 0LL;
    }
  }

  if (!v10 && v13 <= 10)
  {
    if (v13 || v11 >= 0xA)
    {
      else {
        uint64_t v34 = v12 + 20;
      }
      uint64_t v35 = v34 + 10;
      if (v12 <= 90) {
        return v35;
      }
      else {
        return 100LL;
      }
    }

    return 0LL;
  }

  if (v13 < 20 * v10) {
    return 0LL;
  }
  if (a3)
  {
    uint64_t v37 = 90.0 / log((double)v13 * 0.25);
    __int128 v38 = v12 + (int)(log((double)v39 + 1.0) * v37 + 10.0);
  }

  else
  {
    __int128 v38 = v12 - 20 * v10 + v13 + 30;
  }

  if (v38 >= 100) {
    __int128 v38 = 100;
  }
  return v38 & ~(v38 >> 31);
}

    LODWORD(v6) = v6 + 1;
  }

  while ((int)v6 < (int)v4);
  if (v7) {
    int v12 = 0;
  }
  else {
    int v12 = v5;
  }
  if (v12)
  {
LABEL_26:
    uint64_t v13 = 100;
    goto LABEL_29;
  }

  if (!v5 || v8 <= 10 * v7)
  {
    if (v8 >= 4 && !v7) {
      goto LABEL_26;
    }
    if (v8 < 1 || v7)
    {
      uint64_t v14 = (v8 | v7) == 0 || v8 > 10 * v7;
      if (v8 <= 10 * v7) {
        uint64_t v13 = 0;
      }
      else {
        uint64_t v13 = 25;
      }
      if (v8 | v7) {
        goto LABEL_41;
      }
LABEL_40:
      uint64_t v13 = 15;
      goto LABEL_41;
    }
  }

  uint64_t v13 = 80;
LABEL_29:
  uint64_t v14 = 1;
LABEL_41:
  sub_1808BDD5C(a3, a2, a1, v13, 0LL, 0LL);
  return v14;
}

      ++v5;
      if ((v12 & 0x8000) == 0) {
        goto LABEL_4;
      }
LABEL_6:
      uint64_t result = (void *)*(unsigned int *)(a3 + 12);
    }

    while ((uint64_t)v5 < *(int *)(a3 + 12));
  }

  if (v6)
  {
LABEL_24:
    uint64_t v43 = U_ZERO_ERROR;
    memset(v49, 0, sizeof(v49));
    icu::UnicodeString::UnicodeString((uint64_t)&v45, v6);
    icu::DateFormat::getBestPattern( (icu::DateIntervalFormat *)((char *)this + 360),  (UErrorCode *)&v45,  &v43,  (uint64_t)v49);
    icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v45);
    if (v43 <= U_ZERO_ERROR)
    {
      if ((SWORD4(v49[0]) & 0x8000u) == 0) {
        uint64_t v22 = WORD4(v49[0]) >> 5;
      }
      else {
        uint64_t v22 = HIDWORD(v49[0]);
      }
      uint64_t v23 = icu::UnicodeString::doIndexOf((uint64_t)v49, 0x27u, 0, v22);
      if ((_DWORD)v23 != -1)
      {
        uint64_t v24 = v23;
        do
        {
          if ((int)v24 >= -1)
          {
            int v27 = v24 + 1;
            if ((WORD4(v49[0]) & 0x8000) != 0)
            {
              int v26 = HIDWORD(v49[0]);
              if (SHIDWORD(v49[0]) >= v27) {
                BOOL v25 = v24 + 1;
              }
              else {
                BOOL v25 = HIDWORD(v49[0]);
              }
            }

            else
            {
              int v26 = WORD4(v49[0]) >> 5;
              if (v26 >= v27) {
                BOOL v25 = v24 + 1;
              }
              else {
                BOOL v25 = WORD4(v49[0]) >> 5;
              }
            }
          }

          else
          {
            BOOL v25 = 0;
            if ((WORD4(v49[0]) & 0x8000) != 0) {
              int v26 = HIDWORD(v49[0]);
            }
            else {
              int v26 = WORD4(v49[0]) >> 5;
            }
          }

          uint64_t v28 = icu::UnicodeString::doIndexOf((uint64_t)v49, 0x27u, v25, v26 - v25);
          if (v28 == -1) {
            int v29 = 1LL;
          }
          else {
            int v29 = (v28 - v24 + 1);
          }
          *(void *)&BOOL v45 = off_18971B688;
          WORD4(v45) = 2;
          icu::UnicodeString::doReplace((icu::UnicodeString *)v49, v24, v29, (const icu::UnicodeString *)&v45, 0, 0LL);
          icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)&v45);
          if ((SWORD4(v49[0]) & 0x8000u) == 0) {
            uint64_t v31 = WORD4(v49[0]) >> 5;
          }
          else {
            uint64_t v31 = HIDWORD(v49[0]);
          }
          uint64_t v24 = icu::UnicodeString::doIndexOf((uint64_t)v49, 0x27u, 0, v31);
        }

        while ((_DWORD)v24 != -1);
      }

      if ((SWORD4(v49[0]) & 0x8000u) == 0) {
        uint64_t v32 = WORD4(v49[0]) >> 5;
      }
      else {
        uint64_t v32 = HIDWORD(v49[0]);
      }
      uint64_t v33 = 104;
      if (icu::UnicodeString::doIndexOf((uint64_t)v49, 0x68u, 0, v32) == -1)
      {
        uint64_t v34 = (SWORD4(v49[0]) & 0x8000u) == 0 ? WORD4(v49[0]) >> 5 : HIDWORD(v49[0]);
        uint64_t v33 = 75;
        if (icu::UnicodeString::doIndexOf((uint64_t)v49, 0x4Bu, 0, v34) == -1)
        {
          if ((SWORD4(v49[0]) & 0x8000u) == 0) {
            uint64_t v35 = WORD4(v49[0]) >> 5;
          }
          else {
            uint64_t v35 = HIDWORD(v49[0]);
          }
          else {
            uint64_t v33 = 107;
          }
        }
      }

      if ((SWORD4(v49[0]) & 0x8000u) == 0) {
        __int128 v36 = WORD4(v49[0]) >> 5;
      }
      else {
        __int128 v36 = HIDWORD(v49[0]);
      }
      uint64_t v37 = 98;
      if (icu::UnicodeString::doIndexOf((uint64_t)v49, 0x62u, 0, v36) == -1)
      {
        __int128 v38 = (SWORD4(v49[0]) & 0x8000u) == 0 ? WORD4(v49[0]) >> 5 : HIDWORD(v49[0]);
        uint64_t v37 = 66;
        if (icu::UnicodeString::doIndexOf((uint64_t)v49, 0x42u, 0, v38) == -1)
        {
          if (v7) {
            uint64_t v37 = v7;
          }
          else {
            uint64_t v37 = 97;
          }
        }
      }

      uint64_t v47 = 0u;
      int v48 = 0u;
      BOOL v45 = 0u;
      uint64_t v46 = 0u;
      icu::UnicodeString::UnicodeString((uint64_t)&v45, v33);
      if (v33 != 72 && v33 != 107)
      {
        else {
          BOOL v40 = 3;
        }
        else {
          __int128 v42 = 5;
        }
        do
        {
          unsigned int v44 = v37;
          icu::UnicodeString::doAppend((uint64_t)&v45, (uint64_t)&v44, 0, 1LL);
          --v42;
        }

        while (v42);
      }
    }

    else
    {
      uint64_t v47 = 0u;
      int v48 = 0u;
      BOOL v45 = 0u;
      uint64_t v46 = 0u;
      icu::UnicodeString::UnicodeString((uint64_t)&v45, 72);
    }

    if ((SWORD4(v45) & 0x8000u) == 0) {
      int v18 = WORD4(v45) >> 5;
    }
    else {
      int v18 = HIDWORD(v45);
    }
    icu::UnicodeString::doReplace((icu::UnicodeString *)a3, v8, v9, (const icu::UnicodeString *)&v45, 0, v18);
    if ((int)v10 > (int)v8)
    {
      int v19 = WORD4(v45) >> 5;
      if (SWORD4(v45) < 0) {
        int v19 = HIDWORD(v45);
      }
      uint64_t v10 = (v10 - v9 + v19);
    }

    if ((_DWORD)v11 == 0x7FFFFFFF && (int)v10 <= 0)
    {
      if ((*(_WORD *)(a3 + 8) & 1) != 0) {
        unint64_t v20 = 2LL;
      }
      else {
        unint64_t v20 = *(_WORD *)(a3 + 8) & 0x1F;
      }
      *(_WORD *)(a3 + 8) = v20;
    }

    else
    {
      icu::UnicodeString::doReplace(a3, v10, v11, 0LL, 0, 0LL);
    }

    icu::UnicodeString::~UnicodeString((void *)v20, (icu::UnicodeString *)&v45);
    return icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v49);
  }

  return result;
}

          if ((v10 & 0x80000000) == 0) {
            break;
          }
          v10 += 13;
          --v9;
          v13 -= 12;
        }
      }

      else
      {
        uint64_t v11 = 12 * v8 + 17;
        if (v7 >= 5) {
          goto LABEL_12;
        }
        while (1)
        {
          if (v10 >= 5)
          {
            if (v11 % 19 >= 0) {
              int v12 = 12;
            }
            else {
              int v12 = -7;
            }
            if (v11 % 19 < v12) {
              ++v10;
            }
          }

    icu::Formattable::~Formattable((icu::Formattable *)v32);
    unint64_t v20 = WORD4(v33) >> 5;
    if (SWORD4(v33) < 0) {
      unint64_t v20 = HIDWORD(v33);
    }
  }

  while (v20 >= 1 && (_DWORD)v31 != 0);
  if (v14) {
    (*(void (**)(icu::DecimalFormat *))(*(void *)v14 + 8LL))(v14);
  }
LABEL_38:
  icu::number::impl::DecimalQuantity::adjustMagnitude((icu::number::impl::DecimalQuantity *)v28, -v15);
  uint64_t v24 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v28);
  BOOL v25 = (*(double (**)(uint64_t, double, double))(*(void *)a1 + 88LL))(a1, v24, a7);
  icu::Formattable::setDouble(a6, v25);
  icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v28);
  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v30);
  icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)&v33);
  return 1LL;
}

  uint64_t v21 = 69;
  icu::UnicodeString::doAppend(a2, (uint64_t)&v21, 0, 1LL);
  quot = *((_DWORD *)this + 3) + v5 + *((_DWORD *)this + 11);
  if (quot == 0x80000000)
  {
    icu::UnicodeString::UnicodeString((uint64_t)&v21, (uint64_t)L"-2147483648", 0xFFFFFFFFLL);
    if ((v22 & 0x8000u) == 0) {
      uint64_t v13 = v22 >> 5;
    }
    else {
      uint64_t v13 = v23;
    }
    icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v21, 0, v13);
    return icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v21);
  }

  if (quot < 0)
  {
    quot = -quot;
    size_t v15 = 45;
  }

  else
  {
    uint64_t v21 = 43;
    uint64_t result = (void *)icu::UnicodeString::doAppend(a2, (uint64_t)&v21, 0, 1LL);
    if (quot) {
      goto LABEL_31;
    }
    size_t v15 = 48;
  }

  uint64_t v21 = v15;
  uint64_t result = (void *)icu::UnicodeString::doAppend(a2, (uint64_t)&v21, 0, 1LL);
LABEL_31:
  uint64_t v16 = *(unsigned __int16 *)(a2 + 8);
  int v17 = (__int16)v16;
  int v18 = v16 >> 5;
  if (v17 >= 0) {
    int v19 = v18;
  }
  else {
    int v19 = *(unsigned int *)(a2 + 12);
  }
  if (quot)
  {
    do
    {
      unint64_t v20 = div(quot, 10);
      quot = v20.quot;
      uint64_t result = (void *)icu::UnicodeString::replace((icu::UnicodeString *)a2, v19, 0LL, v20.rem + 48);
    }

    while (quot > 0);
  }

  return result;
}

  if (v12 >= v6)
  {
    uint64_t v13 = 4 * v12;
    while (1)
    {
      uint64_t v14 = *((_DWORD *)this + 3);
      LODWORD(v15) = v12 - v14;
      if (!*((_BYTE *)this + 64)) {
        break;
      }
      LOBYTE(v15) = *(_BYTE *)(*((void *)this + 6) + v15);
LABEL_30:
      uint64_t result = (icu::ICU_Utility *)icu::UnicodeString::append(a2, (char)v15 + 48);
      v13 -= 4;
      if (v12-- <= v6) {
        goto LABEL_32;
      }
    }

    if (v15 <= 0xF)
    {
      size_t v15 = (*((void *)this + 6) >> (v13 - 4 * v14)) & 0xFLL;
      goto LABEL_30;
    }

  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v23);
  return v14;
}

  length[0] = 0;
  unsigned int v44 = 0u;
  BOOL v45 = 0u;
  __int128 v42 = 0u;
  uint64_t v43 = 0u;
  BOOL v40 = 0u;
  uint64_t v41 = 0u;
  __int128 v38 = 0u;
  uint64_t v39 = 0u;
  __int128 v36 = 0u;
  uint64_t v37 = 0u;
  uint64_t v34 = 0u;
  uint64_t v35 = 0u;
  memset(v33, 0, sizeof(v33));
  icu::Locale::Locale((icu::Locale *)v33, (uint64_t)this);
  *(void *)__s = 0LL;
  if ((int)ulocimp_getRegionForSupplementalData(*((char **)this + 5), 0, __s, 8, (int *)a2) >= 1)
  {
    uint64_t v28 = U_ZERO_ERROR;
    memset(v31, 0, sizeof(v31));
    icu::LocaleBuilder::LocaleBuilder(v31);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v26, (const char *)this + 8);
    icu::LocaleBuilder::setLanguage((uint64_t)v31, v26, v27);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v24, (const char *)this + 20);
    icu::LocaleBuilder::setScript((uint64_t)v31, v24, v25);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v22, __s);
    icu::LocaleBuilder::setRegion((uint64_t)v31, v22, v23);
    memset(v30, 0, sizeof(v30));
    icu::LocaleBuilder::build((icu::LocaleBuilder *)v31, &v28, (icu::Locale *)v30);
    if (v28 <= U_ZERO_ERROR) {
      icu::Locale::operator=((icu::Locale *)v33, (uint64_t)v30);
    }
    icu::Locale::~Locale((icu::Locale *)v30);
    icu::LocaleBuilder::~LocaleBuilder((icu::LocaleBuilder *)v31);
  }

  uint64_t v10 = ures_open(0LL, *((char **)&v34 + 1), length);
  uint64_t v11 = ures_getByKey(v10, "NumberElements", 0LL, length);
  int v12 = v11;
  if (length[0] == 7)
  {
    uint64_t v13 = 0;
    goto LABEL_49;
  }

  *(void *)length = 0LL;
  StringByKeyWithFallback = ures_getStringByKeyWithFallback(v11, v46, &length[1], (UErrorCode *)length);
  if (length[0] == 7)
  {
LABEL_48:
    uint64_t v13 = 0;
LABEL_49:
    *a2 = U_MEMORY_ALLOCATION_ERROR;
    uint64_t v21 = 1;
    if (!v12) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }

  while ((length[1] - 1) > 0x5E)
  {
    if (*(_DWORD *)v46 == 1769234798 && *(_DWORD *)&v46[3] == 6649449 || *(void *)v46 == 0x65636E616E6966LL)
    {
      strcpy(v46, "default");
    }

    else
    {
      if (*(void *)v46 != 0x6F69746964617274LL || *(unsigned int *)&v46[8] != 7102830LL)
      {
        uint64_t v21 = 0;
        goto LABEL_61;
      }

      strcpy(v46, "native");
    }

    *(void *)length = 0LL;
    StringByKeyWithFallback = ures_getStringByKeyWithFallback(v12, v46, &length[1], (UErrorCode *)length);
    if (length[0] == 7) {
      goto LABEL_48;
    }
  }

  u_UCharsToChars(StringByKeyWithFallback, v46, length[1]);
  v46[length[1]] = 0;
  uint64_t v21 = 1;
LABEL_61:
  uint64_t v13 = 1;
  if (v12) {
LABEL_50:
  }
    ures_close(v12);
LABEL_51:
  if (v10) {
    ures_close(v10);
  }
  icu::Locale::~Locale((icu::Locale *)v33);
  if (!v13) {
    return 0LL;
  }
  if ((v21 & 1) != 0) {
    return icu::NumberingSystem::createInstanceByName((icu::NumberingSystem *)v46, (char *)a2, v6);
  }
  *a2 = U_USING_FALLBACK_WARNING;
  uint64_t result = (icu::NumberingSystem *)icu::UMemory::operator new((uint64_t *)0xFFFFFF80LL, (icu::UMemory *)0x58, v19);
  if (result) {
    return icu::NumberingSystem::NumberingSystem(result);
  }
  *a2 = U_MEMORY_ALLOCATION_ERROR;
  return result;
}

  ures_getByKey(a3, "transPost32", (uint64_t)v43, a5);
  *(void *)(a1 + 96) = ures_getIntVector((uint64_t)v43, (int *)&v36, a5);
  int v17 = v36;
  *(_WORD *)(a1 + 76) = v36 >> 1;
  if (*a5 == 2)
  {
    int v18 = 0;
    *(void *)(a1 + 96) = 0LL;
    *(_WORD *)(a1 + 76) = 0;
LABEL_26:
    *a5 = v18;
    goto LABEL_27;
  }

  if (*a5 <= 0 && (v17 & 0xFFFF8001) != 0)
  {
    int v18 = 3;
    goto LABEL_26;
  }

    int v19 = v160;
  }

  uint64_t v11 = a7;
  if (a7)
  {
    int v26 = *(void *)(a1 + 104);
    v139 = 65563;
    goto LABEL_243;
  }

  icu::UTF16CollationIterator::~UTF16CollationIterator((icu::UTF16CollationIterator *)&v25);
}

  if ((*((_WORD *)this + 212) & 1) != 0 && *((_BYTE *)this + 794))
  {
    umtx_lock((icu::UMutex *)&unk_18C449838);
    if (!*((void *)this + 100))
    {
      uint64_t v10 = uprv_malloc(0x130uLL);
      if (v10)
      {
        v10[17] = 0u;
        v10[18] = 0u;
        v10[15] = 0u;
        v10[16] = 0u;
        _BYTE v10[13] = 0u;
        v10[14] = 0u;
        v10[11] = 0u;
        v10[12] = 0u;
        v10[9] = 0u;
        v10[10] = 0u;
        v10[7] = 0u;
        v10[8] = 0u;
        v10[5] = 0u;
        void v10[6] = 0u;
        v10[3] = 0u;
        v10[4] = 0u;
        v10[1] = 0u;
        v10[2] = 0u;
        *uint64_t v10 = 0u;
      }

      *((void *)this + 100) = v10;
    }

    umtx_unlock((std::mutex **)&unk_18C449838);
    if (*((void *)this + 100))
    {
      uint64_t v11 = (uint64_t *)*((void *)this + 94);
      int v12 = (char *)v11 + *((int *)this + 144);
      memset(v18, 0, sizeof(v18));
      icu::Locale::Locale( v11,  (icu::Locale *)v18,  (const char *)this + 552,  (const char *)this + 570,  v12,  "numbers=jpanyear");
      int v17 = 0;
      uint64_t v14 = (icu::SharedObject *)sub_18098A2E4((char **)v18, (UErrorCode *)&v17, v13);
      if (v17 <= 0)
      {
        size_t v15 = v14;
        PatternCharint Index = icu::DateFormatSymbols::getPatternCharIndex(0x79u);
        sub_18085C214(v15, (icu::SharedObject **)(*((void *)this + 100) + 8LL * PatternCharIndex));
        icu::SharedObject::deleteIfZeroRefCount((uint64_t)v15);
        sub_180941A00((uint64_t)this + 416, (uint64_t)"y", 0xFFFFFFFFLL);
      }

      icu::Locale::~Locale((icu::Locale *)v18);
    }
  }

  int v18 = *((_DWORD *)this + 9);
LABEL_22:
  this[19] = usearch_openFromCollator(v14, v15, v17, v18, a4, (uint64_t)a5, (int *)a6);
  uprv_free(this[1]);
  this[1] = 0LL;
  return this;
}

  int v18 = *((_DWORD *)this + 9);
LABEL_22:
  this[19] = usearch_openFromCollator(v14, v15, v17, v18, a4, (uint64_t)a5, (int *)a6);
  uprv_free(this[1]);
  this[1] = 0LL;
  return this;
}

    uint64_t v11 = 65533;
LABEL_22:
    int v17 = sub_1807E8B6C(*((void *)this + 53), v11);
    if (v17 <= 0xFF && v7 != v6)
    {
LABEL_40:
      *((_DWORD *)this + 104) = v7;
      *((_DWORD *)this + 100) = v6;
      uint64_t v23 = 2LL;
      *((_DWORD *)this + 102) = 2;
      goto LABEL_67;
    }

    int v19 = v17;
    icu::UnicodeString::append((uint64_t)&v35, v11);
    if (v19 >= 0x100)
    {
      unint64_t v20 = v19 >> 8 < v5 || v19 == 33156;
      if (v20 || v19 == 33154) {
        break;
      }
    }

    int v5 = v19;
    uint64_t v7 = *((_DWORD *)this + 100);
    if ((_BYTE)v19) {
      uint64_t v22 = v7 == *((_DWORD *)this + 101);
    }
    else {
      uint64_t v22 = 1;
    }
    if (v22) {
      goto LABEL_40;
    }
  }

  while (1)
  {
    uint64_t v32 = *((_DWORD *)this + 100);
    uint64_t v33 = *((_DWORD *)this + 101);
    if (v32 == v33) {
      break;
    }
    uint64_t v24 = *((void *)this + 49);
    BOOL v25 = v32 + 1LL;
    *((_DWORD *)this + 100) = v25;
    int v26 = *(char *)(v24 + v32);
    int v27 = *(unsigned __int8 *)(v24 + v32);
    if ((v26 & 0x80000000) == 0) {
      goto LABEL_59;
    }
    if ((_DWORD)v25 == v33) {
      goto LABEL_58;
    }
    if (v27 < 0xE0)
    {
      if (v27 < 0xC2) {
        goto LABEL_58;
      }
      unint64_t v30 = v27 & 0x1F;
    }

    else
    {
      if (v27 > 0xEF)
      {
        if (v27 > 0xF4) {
          goto LABEL_58;
        }
        uint64_t v28 = *(unsigned __int8 *)(v24 + v25);
        BOOL v25 = v32 + 2LL;
        *((_DWORD *)this + 100) = v32 + 2;
        if (v32 + 2 == v33) {
          goto LABEL_58;
        }
        int v29 = *(unsigned __int8 *)(v24 + v25) ^ 0x80;
        if (v29 > 0x3F) {
          goto LABEL_58;
        }
        LODWORD(v28) = v28 & 0x3F | ((v27 - 240) << 6);
      }

      else
      {
        uint64_t v28 = v26 & 0xF;
        int v29 = *(_BYTE *)(v24 + v25) & 0x3F;
      }

      LODWORD(v25) = v25 + 1;
      *((_DWORD *)this + 100) = v25;
      if ((_DWORD)v25 == v33) {
        goto LABEL_58;
      }
      unint64_t v30 = v29 | ((_DWORD)v28 << 6);
    }

    uint64_t v31 = *(unsigned __int8 *)(v24 + (int)v25) ^ 0x80;
    if (v31 <= 0x3F)
    {
      int v27 = v31 | (v30 << 6);
      *((_DWORD *)this + 100) = v25 + 1;
      goto LABEL_59;
    }

uint64_t uprv_convertToLCIDPlatform()
{
  return 0LL;
}

uint64_t uprv_convertToLCID(const char *a1, char *a2, int *a3)
{
  uint64_t v3 = 0LL;
  if (a1 && a2)
  {
    if (strlen(a1) >= 2 && strlen(a2) >= 2)
    {
      LODWORD(icu::LocaleBuilder::setVariant((uint64_t)this, v7, v8) = 0;
      unsigned int v9 = 0;
      uint64_t v10 = 141LL;
      do
      {
        int v11 = v8;
        uint64_t v8 = (v10 + v9) >> 1;
        if ((_DWORD)v8 == v11) {
          break;
        }
        int v12 = strcmp(a1, *(const char **)(*(void *)&dword_18970C5B0[4 * v8 + 2] + 8LL));
        uint64_t v13 = (v10 + v9) >> 1;
        if ((v12 & 0x80000000) == 0)
        {
          unsigned int v9 = (v10 + v9) >> 1;
          uint64_t v13 = v10;
          if (!v12) {
            return sub_1807E1900((unsigned int *)&dword_18970C5B0[4 * v8], a2, a3);
          }
        }

        uint64_t v10 = v13;
      }

      while (v13 > v9);
      uint64_t v14 = 0LL;
      uint64_t v3 = 0xFFFFFFFFLL;
      do
      {
        int v17 = 0;
        uint64_t v15 = sub_1807E1900((unsigned int *)&dword_18970C5B0[v14], a2, &v17);
        if (v17 == -128)
        {
          uint64_t v3 = v15;
        }

        else if (!v17)
        {
          return v15;
        }

        v14 += 4LL;
      }

      while (v14 != 564);
      if ((_DWORD)v3 == -1)
      {
        uint64_t v3 = 0LL;
        int v16 = 1;
      }

      else
      {
        int v16 = -128;
      }

      *a3 = v16;
    }

    else
    {
      return 0LL;
    }
  }

  return v3;
}

uint64_t sub_1807E1900(unsigned int *a1, char *__s, _DWORD *a3)
{
  int v6 = strlen(__s);
  uint64_t v7 = *a1;
  if (!(_DWORD)v7)
  {
    int v10 = 0;
    uint64_t v9 = 0LL;
LABEL_17:
    int v17 = __s[v9];
    if (v17 == 64 || v17 == 95)
    {
      int v18 = (unsigned int *)*((void *)a1 + 1);
      if (!*(_BYTE *)(*(void *)&v18[4 * v10 + 2] + v9))
      {
        *a3 = -128;
        v18 += 4 * v10;
        return *v18;
      }
    }

    else
    {
      int v18 = (unsigned int *)*((void *)a1 + 1);
    }

    *a3 = 1;
    return *v18;
  }

  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  int v10 = 0;
  uint64_t v11 = *((void *)a1 + 1);
  while (1)
  {
    uint64_t v12 = 0LL;
    uint64_t v13 = *(_BYTE **)(v11 + 16 * v8 + 8);
    if (*__s && *__s == *v13)
    {
      uint64_t v12 = 0LL;
      do
      {
        int v14 = __s[v12 + 1];
        int v15 = v13[++v12];
        if (v14) {
          BOOL v16 = v14 == v15;
        }
        else {
          BOOL v16 = 0;
        }
      }

      while (v16);
      uint64_t v12 = v12;
    }

    if ((int)v12 > (int)v9 && !v13[v12])
    {
      int v10 = v8;
      uint64_t v9 = v12;
      if (v12 == v6) {
        break;
      }
    }

    if (++v8 == v7) {
      goto LABEL_17;
    }
  }

  int v18 = (unsigned int *)(v11 + 16 * v8);
  return *v18;
}

const UChar *uloc_getTableStringWithFallback( const char *a1, char *a2, char *a3, char *a4, char *a5, int *a6, int32_t *a7)
{
  uint64_t v12 = a2;
  uint64_t v36 = *MEMORY[0x1895F89C0];
  memset(__s1, 0, 157);
  length[1] = 0;
  uint64_t v14 = ures_open(a1, a2, &length[1]);
  if (length[1] < 1)
  {
    if (length[1] == -127 || length[1] == -128 && *a7 != -127) {
      *a7 = length[1];
    }
    StringByKeyWithFallback = 0LL;
    while (1)
    {
      uint64_t v34 = 0LL;
      memset(v33, 0, sizeof(v33));
      icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v33);
      uint64_t v32 = 0LL;
      memset(v31, 0, sizeof(v31));
      icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v31);
      ures_getByKeyWithFallback(v14, a3, (uint64_t)v33, (UErrorCode *)&length[1]);
      if (a4) {
        ures_getByKeyWithFallback((uint64_t)v33, a4, (uint64_t)v33, (UErrorCode *)&length[1]);
      }
      int32_t v17 = length[1];
      if (length[1] > 0) {
        goto LABEL_14;
      }
      StringByKeyWithFallback = ures_getStringByKeyWithFallback((uint64_t)v33, a5, a6, (UErrorCode *)&length[1]);
      if (length[1] < 1) {
        goto LABEL_16;
      }
      *a7 = length[1];
      length[1] = 0;
      if (!strcmp(a3, "Countries"))
      {
        unint64_t v20 = sub_18084D904(a5);
      }

      else
      {
        if (strcmp(a3, "Languages")) {
          goto LABEL_16;
        }
        unint64_t v20 = sub_18084D9C4(a5);
      }

      if (!v20 || v20 == a5) {
        break;
      }
      StringByKeyWithFallback = ures_getStringByKeyWithFallback((uint64_t)v33, v20, a6, (UErrorCode *)&length[1]);
      int32_t v17 = length[1];
      if (length[1] > 0) {
        goto LABEL_14;
      }
LABEL_15:
      *a7 = v17;
LABEL_16:
      int v19 = 2;
LABEL_17:
      icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v31);
      icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v33);
      if (v19) {
        goto LABEL_3;
      }
    }

    int32_t v17 = length[1];
    if (length[1] < 1) {
      goto LABEL_16;
    }
LABEL_14:
    *(void *)length = 0LL;
    *a7 = v17;
    int v18 = ures_getStringByKeyWithFallback((uint64_t)v33, "Fallback", length, (UErrorCode *)&length[1]);
    int32_t v17 = length[1];
    if (length[1] <= 0)
    {
      u_UCharsToChars(v18, (char *)__s1, length[0]);
      if (!strcmp((const char *)__s1, v12))
      {
        int32_t v17 = 5;
      }

      else
      {
        uint64_t v21 = v14;
        uint64_t v22 = a4;
        uint64_t v23 = a5;
        uint64_t v24 = StringByKeyWithFallback;
        BOOL v25 = a6;
        int v26 = v12;
        uint64_t v27 = ures_open(a1, (char *)__s1, &length[1]);
        if (v21) {
          ures_close(v21);
        }
        int32_t v17 = length[1];
        if (length[1] < 1)
        {
          int v19 = 0;
          uint64_t v29 = v27;
          uint64_t v12 = v26;
          a6 = v25;
          StringByKeyWithFallback = v24;
          a5 = v23;
          a4 = v22;
          uint64_t v14 = v29;
          goto LABEL_17;
        }

        uint64_t v28 = v27;
        uint64_t v12 = v26;
        a6 = v25;
        StringByKeyWithFallback = v24;
        a5 = v23;
        a4 = v22;
        uint64_t v14 = v28;
      }
    }

    goto LABEL_15;
  }

  StringByKeyWithFallback = 0LL;
  *a7 = length[1];
LABEL_3:
  if (v14) {
    ures_close(v14);
  }
  return StringByKeyWithFallback;
}

uint64_t uloc_getCharacterOrientation(char *a1, int32_t *a2)
{
  return sub_1807E1D58(a1, "characters", a2);
}

uint64_t sub_1807E1D58(char *a1, char *a2, int32_t *a3)
{
  v12[8] = *(void **)MEMORY[0x1895F89C0];
  if (*a3 > 0) {
    return 4LL;
  }
  memset(&v12[1], 0, 56);
  v11[1] = 0LL;
  v12[0] = (char *)&v12[1] + 5;
  LODWORD(v12[1]) = 40;
  v11[0] = 0LL;
  icu::CharStringByteSink::CharStringByteSink(v11, (uint64_t)v12);
  ulocimp_canonicalize(a1);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v11);
  if (*a3 <= 0)
  {
    LODWORD(v11[0]) = 0;
    TableStringWithFallback = uloc_getTableStringWithFallback(0LL, (char *)v12[0], "layout", 0LL, a2, (int *)v11, a3);
    uint64_t v3 = 4LL;
    if (*a3 <= 0 && LODWORD(v11[0]))
    {
      HIDWORD(icu::LocaleBuilder::setRegion((uint64_t)this, v9, v10) = *TableStringWithFallback;
      LODWORD(icu::LocaleBuilder::setRegion((uint64_t)this, v9, v10) = HIDWORD(v10) - 98;
      unsigned int v9 = v10 >> 1;
      if (v9 < 0xA && ((0x321u >> v9) & 1) != 0) {
        uint64_t v3 = dword_1809DE4A8[v9];
      }
      else {
        *a3 = 5;
      }
    }
  }

  else
  {
    uint64_t v3 = 4LL;
  }

  if (BYTE4(v12[1])) {
    uprv_free(v12[0]);
  }
  return v3;
}

uint64_t uloc_getLineOrientation(char *a1, int32_t *a2)
{
  return sub_1807E1D58(a1, "lines", a2);
}

UChar **icu::LocaleUtility::canonicalLocaleString(UChar **this, UChar **a2, icu::UnicodeString *a3)
{
  if (this)
  {
    icu::UnicodeString::operator=(a2, this);
    unsigned int v4 = *((unsigned __int16 *)a2 + 4);
    int v5 = (__int16)v4;
    int32_t v6 = v4 >> 5;
    if (v5 >= 0) {
      int32_t v7 = v6;
    }
    else {
      int32_t v7 = *((_DWORD *)a2 + 3);
    }
    int v8 = icu::UnicodeString::doIndexOf((uint64_t)a2, 0x40u, 0, v7);
    unsigned int v9 = *((unsigned __int16 *)a2 + 4);
    int v10 = (__int16)v9;
    int32_t v11 = v9 >> 5;
    if (v10 >= 0) {
      int32_t v12 = v11;
    }
    else {
      int32_t v12 = *((_DWORD *)a2 + 3);
    }
    int v13 = icu::UnicodeString::doIndexOf((uint64_t)a2, 0x2Eu, 0, v12);
    if (v13 >= v8 || v13 <= -1) {
      int v15 = v8;
    }
    else {
      int v15 = v13;
    }
    unsigned int v16 = *((unsigned __int16 *)a2 + 4);
    if (v15 < 0)
    {
      if ((v16 & 0x8000) != 0) {
        int v15 = *((_DWORD *)a2 + 3);
      }
      else {
        int v15 = v16 >> 5;
      }
      int32_t v17 = v15;
    }

    else if ((v16 & 0x8000) != 0)
    {
      int32_t v17 = *((_DWORD *)a2 + 3);
    }

    else
    {
      int32_t v17 = v16 >> 5;
    }

    int v18 = icu::UnicodeString::doIndexOf((uint64_t)a2, 0x5Fu, 0, v17);
    if (v18 >= 0) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = v15;
    }
    if ((int)v19 < 1)
    {
      LODWORD(v19) = 0;
    }

    else
    {
      for (unint64_t i = 0LL; i != v19; ++i)
      {
        unsigned int v21 = *((unsigned __int16 *)a2 + 4);
        if ((v21 & 0x8000u) == 0) {
          unint64_t v22 = v21 >> 5;
        }
        else {
          unint64_t v22 = *((unsigned int *)a2 + 3);
        }
        if (i < v22)
        {
          uint64_t v23 = (v21 & 2) != 0 ? (const icu::UnicodeString *)((char *)a2 + 10) : (const icu::UnicodeString *)a2[3];
          int v24 = *((unsigned __int16 *)v23 + i);
        }
      }
    }

    if ((int)v19 < v15)
    {
      unint64_t v25 = v19;
      do
      {
        unsigned int v26 = *((unsigned __int16 *)a2 + 4);
        if ((v26 & 0x8000u) == 0) {
          unint64_t v27 = v26 >> 5;
        }
        else {
          unint64_t v27 = *((unsigned int *)a2 + 3);
        }
        if (v25 < v27)
        {
          if ((v26 & 2) != 0) {
            uint64_t v28 = (UChar *)a2 + 5;
          }
          else {
            uint64_t v28 = a2[3];
          }
          int v29 = v28[v25];
        }

        ++v25;
      }

      while (v15 != v25);
    }
  }

  else
  {
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a2);
  }

  return a2;
}

const icu::UnicodeString *icu::LocaleUtility::initLocaleFromName( icu::LocaleUtility *this, const icu::UnicodeString *a2, icu::Locale *a3)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  unsigned int v4 = *((unsigned __int16 *)this + 4);
  if ((v4 & 1) != 0 || ((v4 & 0x8000u) == 0 ? (int v6 = v4 >> 5) : (int v6 = *((_DWORD *)this + 3)), v6 >= 128))
  {
    icu::Locale::setToBogus(a2);
  }

  else
  {
    unsigned int v7 = 0;
    memset(v14, 0, sizeof(v14));
    if ((v4 & 0x8000) != 0) {
      goto LABEL_11;
    }
LABEL_8:
    unsigned int v8 = v4 >> 5;
    if (v8 >= v7) {
      int v9 = v7;
    }
    else {
      int v9 = v8;
    }
    while (1)
    {
      unsigned int v10 = icu::UnicodeString::doIndexOf((uint64_t)this, 0x40u, v9, v8 - v9);
      if ((v10 & 0x80000000) != 0) {
        break;
      }
      unsigned int v11 = v10;
      icu::UnicodeString::extract((uint64_t)this, v7, v10 - v7, (char *)v14 + v7, 128 - v7);
      *((_BYTE *)v14 + v11) = 64;
      unsigned int v7 = v11 + 1;
      unsigned int v4 = *((unsigned __int16 *)this + 4);
      if ((v4 & 0x8000) == 0) {
        goto LABEL_8;
      }
LABEL_11:
      unsigned int v8 = *((_DWORD *)this + 3);
      else {
        int v9 = *((_DWORD *)this + 3);
      }
    }

    icu::UnicodeString::extract((uint64_t)this, v7, 0x7FFFFFFFLL, (char *)v14 + v7, 128 - v7);
    icu::Locale::createFromName((icu::Locale *)v14, (uint64_t)v13);
    icu::Locale::operator=((uint64_t)a2, (uint64_t)v13);
    icu::Locale::~Locale((icu::Locale *)v13);
  }

  return a2;
}

const icu::Locale *icu::LocaleUtility::initNameFromLocale( icu::LocaleUtility *this, const icu::Locale *a2, icu::UnicodeString *a3)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  if (*((_BYTE *)this + 216))
  {
    icu::UnicodeString::setToBogus(a2);
  }

  else
  {
    icu::UnicodeString::UnicodeString(v7, *((void *)this + 5), 0xFFFFFFFFLL, 0LL);
    if ((v8 & 0x8000u) == 0) {
      uint64_t v4 = v8 >> 5;
    }
    else {
      uint64_t v4 = v9;
    }
    icu::UnicodeString::doAppend((uint64_t)a2, (const icu::UnicodeString *)v7, 0, v4);
    icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v7);
  }

  return a2;
}

uint64_t *icu::LocaleUtility::getAvailableLocaleNames(icu::LocaleUtility *this, const icu::UnicodeString *a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  UErrorCode v26 = U_ZERO_ERROR;
  unsigned int v3 = atomic_load(&dword_18C534DC8);
  if (v3 != 2 && icu::umtx_initImplPreInit(&dword_18C534DC8))
  {
    sub_180820C94(5u, (uint64_t)sub_1807E2760);
    uint64_t v5 = icu::UMemory::operator new((icu::UMemory *)0x58, v4);
    if (v5)
    {
      int v6 = (int32x2_t *)v5;
      unsigned int v7 = 0LL;
      int32x2_t *v6 = 0LL;
      if (v26 > U_ZERO_ERROR)
      {
LABEL_7:
        qword_18C534DC0 = (uint64_t)v6;
LABEL_8:
        if (v7) {
          uhash_close(v7);
        }
        icu::UMemory::operator delete(v6);
        qword_18C534DC0 = 0LL;
        goto LABEL_15;
      }

      uhash_init(v6 + 1, (uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0LL, (int *)&v26);
      if (v26 >= U_ILLEGAL_ARGUMENT_ERROR)
      {
        unsigned int v7 = (_BYTE *)*v6;
        goto LABEL_7;
      }

      int32x2_t *v6 = (int32x2_t)&v6[1];
      uhash_setKeyDeleter((uint64_t)&v6[1], (uint64_t)uprv_deleteUObject);
      qword_18C534DC0 = (uint64_t)v6;
      unsigned int v7 = (_BYTE *)*v6;
      if (v26 >= U_ILLEGAL_ARGUMENT_ERROR) {
        goto LABEL_8;
      }
      uhash_setValueDeleter((uint64_t)v7, (uint64_t)uhash_deleteHashtable);
    }

    else
    {
      qword_18C534DC0 = 0LL;
      UErrorCode v26 = U_MEMORY_ALLOCATION_ERROR;
    }

BOOL icu::LocaleUtility::isFallbackOf( icu::LocaleUtility *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3)
{
  BOOL result = 0LL;
  unsigned int v5 = *((unsigned __int16 *)this + 4);
  if ((v5 & 0x8000u) == 0) {
    int32_t v6 = v5 >> 5;
  }
  else {
    int32_t v6 = *((_DWORD *)this + 3);
  }
  if ((v5 & 1) == 0 && v6 >= 1)
  {
    unsigned int v8 = *((unsigned __int16 *)a2 + 4);
    int v9 = (__int16)v8;
    unsigned int v10 = v8 >> 5;
    int32_t v11 = v9 >= 0 ? v10 : *((_DWORD *)a2 + 3);
    int32_t v12 = (v5 & 2) != 0 ? (icu::LocaleUtility *)((char *)this + 10) : (icu::LocaleUtility *)*((void *)this + 3);
    int v13 = icu::UnicodeString::indexOf((uint64_t)a2, (uint64_t)v12, 0, v6, 0, v11);
    BOOL result = 0LL;
    if (!v13)
    {
      unsigned int v14 = *((unsigned __int16 *)a2 + 4);
      if ((v14 & 0x8000u) == 0) {
        unsigned int v15 = v14 >> 5;
      }
      else {
        unsigned int v15 = *((_DWORD *)a2 + 3);
      }
      if (*((__int16 *)this + 4) < 0)
      {
        unsigned int v17 = *((_DWORD *)this + 3);
        if (v15 != v17)
        {
LABEL_21:
          if (v15 <= v17) {
            return 0LL;
          }
          if ((v14 & 2) != 0) {
            unint64_t v18 = (char *)a2 + 10;
          }
          else {
            unint64_t v18 = (char *)*((void *)a2 + 3);
          }
          return *(unsigned __int16 *)&v18[2 * v17] == 95;
        }
      }

      else
      {
        unsigned int v16 = *((unsigned __int16 *)this + 4);
        if (v15 != v16 >> 5)
        {
          unsigned int v17 = v16 >> 5;
          goto LABEL_21;
        }
      }

      return 1LL;
    }
  }

  return result;
}

uint64_t sub_1807E2760()
{
  uint64_t v0 = (void *)qword_18C534DC0;
  if (qword_18C534DC0)
  {
    if (*(void *)qword_18C534DC0) {
      uhash_close(*(_BYTE **)qword_18C534DC0);
    }
    icu::UMemory::operator delete(v0);
    qword_18C534DC0 = 0LL;
  }

  return 1LL;
}

uint64_t sub_1807E27A0(uint64_t a1, char a2, const char *a3, const char *a4, char *a5, int a6, UErrorCode *a7)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = a5;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 32) = sub_1807E2910(a5);
  *(_DWORD *)(a1 + 36) = a6;
  *(_DWORD *)(a1 + 40) = 0;
  if (*(int *)a7 <= 0)
  {
    memset(&v23[1], 0, 48);
    uint64_t v24 = 0LL;
    v23[0] = (char *)&v23[1] + 5;
    LODWORD(v23[1]) = 40;
    int v13 = icu::CharString::append((icu::CharString *)v23, a2, a7);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v21, a3);
    unsigned int v14 = icu::CharString::append(v13, v21, v22, a7);
    icu::CharString::append(v14, 0, a7);
    uint64_t v15 = (int)v24;
    unsigned int v16 = icu::CharString::append((icu::CharString *)v23, a2, a7);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v19, a4);
    icu::CharString::append(v16, v19, v20, a7);
    unsigned int v17 = (char *)icu::CharString::cloneData(v23, a7);
    *(void *)(a1 + 24) = v17;
    if (*(int *)a7 <= 0)
    {
      *(void *)a1 = v17;
      *(void *)(a1 + 8) = &v17[v15];
    }

    if (BYTE4(v23[1])) {
      uprv_free((void *)v23[0]);
    }
  }

  return a1;
}

uint64_t sub_1807E2910(char *a1)
{
  int v1 = *a1;
  if ((v1 - 48) <= 9)
  {
    return 0LL;
  }

  unsigned int v3 = v1 - 65;
  if (v3 > 0x19) {
    return 0LL;
  }
  unsigned int v4 = a1[1] - 65;
  if (v4 > 0x19 || a1[2]) {
    return 0LL;
  }
  return v4 + 26 * v3 + 1001;
}

void sub_1807E29A8(uint64_t a1)
{
}

uint64_t sub_1807E29B0(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(void **)(a1 + 24);
  if (v4) {
    uprv_free(v4);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  if (v5)
  {
    *(void *)a2 = "";
    *(void *)(a2 + 8) = "";
    *(void *)(a2 + 24) = 0LL;
    *(_DWORD *)(a2 + 40) = 0;
  }

  return a1;
}

BOOL sub_1807E2A18(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 32);
  if (v4 != *(_DWORD *)(a2 + 32)) {
    return 0LL;
  }
  if (v4 <= 0) {
    return strcmp(*(const char **)(a1 + 16), *(const char **)(a2 + 16)) == 0;
  }
  return 1LL;
}

BOOL sub_1807E2A94(uint64_t a1, uint64_t a2)
{
  if (!strcmp(*(const char **)a1, *(const char **)a2)
    && !strcmp(*(const char **)(a1 + 8), *(const char **)(a2 + 8))
    && (int v4 = *(_DWORD *)(a1 + 32), v4 == *(_DWORD *)(a2 + 32))
    && (v4 > 0 || !strcmp(*(const char **)(a1 + 16), *(const char **)(a2 + 16))))
  {
    return *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36);
  }

  else
  {
    return 0LL;
  }

uint64_t sub_1807E2B14(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 40))
  {
    uint64_t v2 = *(char **)a1;
    int v3 = strlen(*(const char **)a1);
    LODWORD(v2) = ustr_hashCharsN((unsigned __int8 *)v2, v3);
    int v4 = strlen(*(const char **)(a1 + 8));
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 36)
                         + 37
                         * (*(_DWORD *)(a1 + 32)
                          + 37 * (ustr_hashCharsN(*(unsigned __int8 **)(a1 + 8), v4) + 37 * (_DWORD)v2));
  }

  return a1;
}

uint64_t sub_1807E2BA0(uint64_t a1)
{
  *(void *)a1 = off_18970ED00;
  uprv_free(*(void **)(a1 + 8));
  return a1;
}

void sub_1807E2BD4(void **a1)
{
  *a1 = off_18970ED00;
  uprv_free(a1[1]);
  operator delete(a1);
}

uint64_t sub_1807E2C08(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  *(void *)a1 = 0LL;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = &off_18970EDE8;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 48) = &off_18970EDE8;
  *(void *)(a1 + 56) = 0LL;
  *(void *)(a1 + 64) = 0LL;
  *(void *)(a1 + 72) = &off_18970EDE8;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 96) = &off_18970EDA0;
  *(void *)(a1 + 104) = 0LL;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = &off_18970EDE8;
  *(void *)(a1 + 128) = 0LL;
  *(void *)(a1 + 136) = 0LL;
  *(void *)(a1 + 144) = &off_18970EDE8;
  *(void *)(a1 + 152) = 0LL;
  *(void *)(a1 + 160) = 0LL;
  *(void *)(a1 + 168) = &off_18970EDA0;
  *(void *)(a1 + 176) = 0LL;
  *(_DWORD *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = &off_18970EDE8;
  *(void *)(a1 + 200) = 0LL;
  *(void *)(a1 + 208) = 0LL;
  *(void *)(a1 + 216) = &off_18970EDA0;
  *(void *)(a1 + 224) = 0LL;
  *(_DWORD *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = a2;
  if (*a3 > 0) {
    return a1;
  }
  uint64_t v6 = ures_getByKey(a2, "embeddings", 0LL, a3);
  int Int = ures_getInt(v6, a3);
  uint64_t v8 = ures_getByKey(a2, "hunits", 0LL, a3);
  uint64_t v9 = v8;
  if (*a3 <= 0)
  {
    int v10 = ures_getInt(v8, a3);
    StringByuint64_t Key = ures_getStringByKey(a2, "type", 0LL, a3);
    if (*a3 <= 0)
    {
      int32_t v12 = StringByKey;
      if (u_strCompare(StringByKey, -1, word_180A479C6, -1, 0))
      {
        if (u_strCompare(v12, -1, (const UChar *)L"graphclust", -1, 0))
        {
LABEL_9:
          *(void *)(a1 + 16) = ures_getStringByKey(a2, "model", 0LL, a3);
          uint64_t v14 = ures_getByKey(a2, "data", 0LL, a3);
          uint64_t v15 = v14;
          if (*a3 <= 0)
          {
            int v34 = 0;
            IntVector = ures_getIntVector(v14, &v34, a3);
            *(void *)a1 = uhash_open((uint64_t)uhash_hashUChars, (uint64_t)uhash_compareUChars, 0LL, a3);
            uint64_t v36 = 0LL;
            memset(v35, 0, sizeof(v35));
            icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v35);
            v33[2] = 0LL;
            v33[0] = &unk_18971C0E8;
            v33[1] = 0LL;
            v33[3] = 0xFFFFFFFFLL;
            ures_getValueWithFallback(a2, "dict", (uint64_t)v35, (uint64_t)v33, (UErrorCode *)a3);
            v31[0] = 0LL;
            v31[1] = 0LL;
            uint64_t v32 = 0LL;
            sub_180874354((uint64_t)v33, a3, (uint64_t)v31);
            if (*a3 <= 0)
            {
              int v17 = v32;
              int v30 = 0;
              if ((int)v32 < 1)
              {
LABEL_15:
                int v20 = 4 * Int * v10;
                int v21 = 4 * v10 * v10;
                *(void *)(a1 + 32) = IntVector;
                *(_DWORD *)(a1 + 40) = v17 + 1;
                *(_DWORD *)(a1 + 44) = Int;
                int v22 = &IntVector[(v17 + 1) * Int];
                *(void *)(a1 + 56) = v22;
                *(_DWORD *)(a1 + 64) = Int;
                *(_DWORD *)(a1 + 68) = 4 * v10;
                uint64_t v23 = &v22[v20];
                *(void *)(a1 + 80) = v23;
                *(_DWORD *)(a1 + 88) = v10;
                *(_DWORD *)(a1 + 92) = 4 * v10;
                uint64_t v24 = &v23[v21];
                *(void *)(a1 + 104) = v24;
                *(_DWORD *)(a1 + 112) = 4 * v10;
                uint64_t v25 = &v24[4 * v10];
                *(void *)(a1 + 128) = v25;
                *(_DWORD *)(a1 + 136) = Int;
                *(_DWORD *)(a1 + 140) = 4 * v10;
                UErrorCode v26 = &v25[v20];
                *(void *)(a1 + 152) = v26;
                *(_DWORD *)(a1 + 160) = v10;
                *(_DWORD *)(a1 + 164) = 4 * v10;
                unint64_t v27 = &v26[v21];
                *(void *)(a1 + 176) = v27;
                *(_DWORD *)(a1 + 184) = 4 * v10;
                uint64_t v28 = &v27[4 * v10];
                *(void *)(a1 + 200) = v28;
                *(_DWORD *)(a1 + 208) = 2 * v10;
                *(_DWORD *)(a1 + 212) = 4;
                *(void *)(a1 + 224) = &v28[8 * v10];
                *(_DWORD *)(a1 + 232) = 4;
              }

              else
              {
                unsigned int v18 = 0;
                while (1)
                {
                  icu::ResourceArray::getValue((icu::ResourceArray *)v31, v18, (icu::ResourceValue *)v33);
                  uint64_t v19 = sub_180874170((uint64_t)v33, &v30, a3);
                  uhash_putiAllowZero(*(void *)a1, (uint64_t)v19, v18, a3);
                  if (*a3 >= 1) {
                    break;
                  }
                  if (v17 == ++v18) {
                    goto LABEL_15;
                  }
                }
              }
            }

            icu::ResourceValue::~ResourceValue((icu::ResourceValue *)v33);
            icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v35);
          }

          if (v15) {
            ures_close(v15);
          }
          goto LABEL_19;
        }

        int v13 = 2;
      }

      else
      {
        int v13 = 1;
      }

      *(_DWORD *)(a1 + 8) = v13;
      goto LABEL_9;
    }
  }

void sub_1807E2FE4( uint64_t a1, UText *ut, int a3, int a4, icu::UVector32 *this, icu::UVector32 *a6, UErrorCode *a7)
{
  int v14 = a4 - a3;
  if (a4 - a3 < 0)
  {
LABEL_8:
    goto LABEL_10;
  }

  if (*((_DWORD *)a6 + 3) < v14) {
    goto LABEL_8;
  }
LABEL_10:
  utext_setNativeIndex(ut, a3);
  int v21 = 0;
  if (*(int *)a7 <= 0)
  {
    do
    {
      int NativeIndex = utext_getNativeIndex(ut);
      if (NativeIndex >= a4) {
        return;
      }
      LOWORD(v21) = utext_next32(ut);
      int v15 = *((_DWORD *)this + 2);
      if (v15 < -1 || *((_DWORD *)this + 3) <= v15)
      {
        int v15 = *((_DWORD *)this + 2);
      }

      *(_DWORD *)(*((void *)this + 3) + 4LL * v15) = NativeIndex;
      ++*((_DWORD *)this + 2);
LABEL_20:
      BOOL v22 = 0;
      int v17 = uhash_getiAndFound(*(void *)(a1 + 8), (uint64_t)&v21, &v22);
      if (v22) {
        int v18 = v17;
      }
      else {
        int v18 = *(_DWORD *)(*(void *)(a1 + 8) + 48LL);
      }
      int v19 = *((_DWORD *)a6 + 2);
      if (v19 >= -1 && *((_DWORD *)a6 + 3) > v19) {
        goto LABEL_27;
      }
      if (icu::UVector32::expandCapacity(a6, v19 + 1, a7))
      {
        int v19 = *((_DWORD *)a6 + 2);
LABEL_27:
        *(_DWORD *)(*((void *)a6 + 3) + 4LL * v19) = v18;
        ++*((_DWORD *)a6 + 2);
      }
    }

    while (*(int *)a7 < 1);
  }

uint64_t sub_1807E31A8(uint64_t a1, uint64_t a2)
{
  BOOL v4 = 0;
  uint64_t result = uhash_getiAndFound(*(void *)(a1 + 8), a2, &v4);
  if (!v4) {
    return *(unsigned int *)(*(void *)(a1 + 8) + 48LL);
  }
  return result;
}

void sub_1807E31F4( uint64_t a1, UText *a2, uint64_t a3, int a4, icu::UVector32 *this, icu::UVector32 *a6, UErrorCode *a7)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  if (*(int *)a7 <= 0)
  {
    int v14 = a4 - a3;
    if (a4 - (int)a3 < 0)
    {
    }

    else
    {
      if (*((_DWORD *)a6 + 3) >= v14)
      {
LABEL_12:
        icu::Locale::Locale((icu::Locale *)dest);
        Characteruint64_t Instance = icu::BreakIterator::createCharacterInstance( (char **)dest,  (const icu::Locale *)a7,  v15,  v16);
        icu::Locale::~Locale((icu::Locale *)dest);
        if (*(int *)a7 > 0)
        {
          if (!CharacterInstance) {
            return;
          }
LABEL_16:
          (*(void (**)(char *))(*(void *)CharacterInstance + 8LL))(CharacterInstance);
          return;
        }

        (*(void (**)(char *, UText *, UErrorCode *))(*(void *)CharacterInstance + 64LL))( CharacterInstance,  a2,  a7);
        if ((_DWORD)a3) {
          (*(void (**)(char *, uint64_t))(*(void *)CharacterInstance + 128LL))(CharacterInstance, a3);
        }
        *(void *)dest = 0LL;
        uint64_t v30 = 0LL;
        int v31 = 0;
        int v18 = (*(uint64_t (**)(char *))(*(void *)CharacterInstance + 104LL))(CharacterInstance);
        if (v18 == -1 || v18 >= a4)
        {
          int v20 = a3;
LABEL_47:
          if (v20 < a4 && *(int *)a7 <= 0)
          {
            utext_extract(a2, v20, a4, dest, 10, a7);
            if (*(int *)a7 <= 0)
            {
              sub_1807C9210(this, v20, a7);
              int v27 = sub_1807E31A8(a1, (uint64_t)dest);
              sub_1807C9210(a6, v27, a7);
            }
          }

          goto LABEL_16;
        }

        int v19 = a3;
        while (1)
        {
          int v20 = v18;
LABEL_41:
          int v18 = (*(uint64_t (**)(char *))(*(void *)CharacterInstance + 104LL))(CharacterInstance);
          BOOL v26 = v18 != -1 && v18 < a4;
          int v19 = v20;
          if (!v26) {
            goto LABEL_47;
          }
        }

        utext_extract(a2, v19, v18, dest, 10, a7);
        int v21 = *((_DWORD *)this + 2);
        if (v21 < -1 || *((_DWORD *)this + 3) <= v21)
        {
          int v21 = *((_DWORD *)this + 2);
        }

        *(_DWORD *)(*((void *)this + 3) + 4LL * v21) = v19;
        ++*((_DWORD *)this + 2);
LABEL_32:
        BOOL v28 = 0;
        int v23 = uhash_getiAndFound(*(void *)(a1 + 8), (uint64_t)dest, &v28);
        if (v28) {
          int v24 = v23;
        }
        else {
          int v24 = *(_DWORD *)(*(void *)(a1 + 8) + 48LL);
        }
        int v25 = *((_DWORD *)a6 + 2);
        if (v25 < -1 || *((_DWORD *)a6 + 3) <= v25)
        {
          int v25 = *((_DWORD *)a6 + 2);
        }

        *(_DWORD *)(*((void *)a6 + 3) + 4LL * v25) = v24;
        ++*((_DWORD *)a6 + 2);
LABEL_40:
        goto LABEL_41;
      }
    }

    goto LABEL_12;
  }

void sub_1807E3534( int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  if ((*(int (**)(void *))(*a8 + 16LL))(a8) >= 1)
  {
    uint64_t v16 = 0LL;
    do
    {
      *(float *)(a8[2] + 4 * v16) = (*(float (**)(uint64_t, uint64_t))(*(void *)a4 + 24LL))(a4, v16);
      ++v16;
    }

    while (v16 < (*(int (**)(void *))(*a8 + 16LL))(a8));
  }

  if ((*(int (**)(void *))(*a8 + 16LL))(a8) >= 1)
  {
    uint64_t v17 = 0LL;
    do
    {
      if ((*(int (**)(uint64_t))(*(void *)a5 + 16LL))(a5) >= 1)
      {
        uint64_t v18 = 0LL;
        do
        {
          float v19 = (*(float (**)(uint64_t, uint64_t))(*(void *)a5 + 24LL))(a5, v18);
          *(float *)(a8[2] + 4 * v17) = *(float *)(a8[2] + 4 * v17)
                                      + (float)(v19
                                              * (*(float (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32LL))( a2,  v18,  v17));
          uint64_t v18 = (v18 + 1);
        }

        while ((int)v18 < (*(int (**)(uint64_t))(*(void *)a5 + 16LL))(a5));
      }

      ++v17;
    }

    while (v17 < (*(int (**)(void *))(*a8 + 16LL))(a8));
  }

  if ((*(int (**)(void *))(*a8 + 16LL))(a8) >= 1)
  {
    uint64_t v20 = 0LL;
    do
    {
      if ((*(int (**)(uint64_t))(*(void *)a6 + 16LL))(a6) >= 1)
      {
        uint64_t v21 = 0LL;
        do
        {
          float v22 = (*(float (**)(uint64_t, uint64_t))(*(void *)a6 + 24LL))(a6, v21);
          *(float *)(a8[2] + 4 * v20) = *(float *)(a8[2] + 4 * v20)
                                      + (float)(v22
                                              * (*(float (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32LL))( a3,  v21,  v20));
          uint64_t v21 = (v21 + 1);
        }

        while ((int)v21 < (*(int (**)(uint64_t))(*(void *)a6 + 16LL))(a6));
      }

      ++v20;
    }

    while (v20 < (*(int (**)(void *))(*a8 + 16LL))(a8));
  }

  uint64_t v23 = a1;
  if (a1 <= 0)
  {
    uprv_free(0LL);
    uint64_t v26 = a1;
  }

  else
  {
    int v24 = (float *)a8[2];
    uint64_t v25 = a1;
    do
    {
      float *v24 = 1.0 / (float)(expf(-*v24) + 1.0);
      ++v24;
      --v25;
    }

    while (v25);
    uprv_free(0LL);
    uint64_t v26 = a1;
    int v27 = (float *)(a8[2] + 4LL * a1);
    uint64_t v28 = a1;
    do
    {
      *int v27 = 1.0 / (float)(expf(-*v27) + 1.0);
      ++v27;
      --v28;
    }

    while (v28);
  }

  uprv_free(0LL);
  uint64_t v29 = a8[2];
  unint64_t v53 = off_18970ED00;
  unint64_t v54 = 0LL;
  uint64_t v55 = v29 + 8LL * a1;
  int v56 = a1;
  if (a1 < 1)
  {
    uint64_t v32 = 0LL;
  }

  else
  {
    uint64_t v30 = 0LL;
    do
    {
      float v31 = ((float (*)(uint64_t (***)(), uint64_t))v53[3])(&v53, v30);
      *(float *)(v55 + 4 * v30++) = tanhf(v31);
    }

    while (v30 < v56);
    uint64_t v32 = v54;
  }

  unint64_t v53 = off_18970ED00;
  uprv_free(v32);
  if (a1 >= 1)
  {
    uint64_t v33 = (float *)(a8[2] + 12LL * a1);
    do
    {
      *uint64_t v33 = 1.0 / (float)(expf(-*v33) + 1.0);
      ++v33;
      --v23;
    }

    while (v23);
  }

  uprv_free(0LL);
  uint64_t v34 = a8[2] + 4 * v26;
  unint64_t v53 = off_18970ED00;
  unint64_t v54 = 0LL;
  uint64_t v55 = v34;
  int v56 = a1;
  if ((*(int (**)(void *))(*a7 + 16LL))(a7) >= 1)
  {
    uint64_t v35 = 0LL;
    do
    {
      ++v35;
    }

    while (v35 < (*(int (**)(void *))(*a7 + 16LL))(a7));
  }

  uint64_t v36 = a8[2];
  uint64_t v49 = off_18970ED00;
  unint64_t v50 = 0LL;
  uint64_t v51 = v36;
  int v52 = a1;
  BOOL v45 = off_18970ED00;
  uint64_t v46 = 0LL;
  uint64_t v47 = v36 + 8LL * a1;
  int v48 = a1;
  if ((*(int (**)(void *))(*a7 + 16LL))(a7) < 1)
  {
    uint64_t v39 = 0LL;
  }

  else
  {
    uint64_t v37 = 0LL;
    do
    {
      float v38 = ((float (*)(uint64_t (***)(), uint64_t))v49[3])(&v49, v37);
      *(float *)(a7[2] + 4 * v37) = *(float *)(a7[2] + 4 * v37)
                                  + (float)(v38
                                          * ((float (*)(uint64_t (***)(), uint64_t))v45[3])( &v45,  v37));
      ++v37;
    }

    while (v37 < (*(int (**)(void *))(*a7 + 16LL))(a7));
    uint64_t v39 = v46;
  }

  BOOL v45 = off_18970ED00;
  uprv_free(v39);
  uint64_t v49 = off_18970ED00;
  uprv_free(v50);
  unint64_t v53 = off_18970ED00;
  uprv_free(v54);
  if (*(int *)(a6 + 24) >= 1)
  {
    uint64_t v40 = 0LL;
    do
    {
      float v41 = (*(float (**)(void *, uint64_t))(*a7 + 24LL))(a7, v40);
      *(float *)(*(void *)(a6 + 16) + 4 * v40++) = tanhf(v41);
    }

    while (v40 < *(int *)(a6 + 24));
  }

  uint64_t v42 = a8[2] + 12LL * a1;
  unint64_t v53 = off_18970ED00;
  unint64_t v54 = 0LL;
  uint64_t v55 = v42;
  int v56 = a1;
  if ((*(int (**)(uint64_t))(*(void *)a6 + 16LL))(a6) < 1)
  {
    unsigned int v44 = 0LL;
  }

  else
  {
    uint64_t v43 = 0LL;
    do
    {
      *(float *)(*(void *)(a6 + 16) + 4 * v43) = ((float (*)(uint64_t (***)(), uint64_t))v53[3])( &v53,  v43)
                                                 * *(float *)(*(void *)(a6 + 16) + 4 * v43);
      ++v43;
    }

    while (v43 < (*(int (**)(uint64_t))(*(void *)a6 + 16LL))(a6));
    unsigned int v44 = v54;
  }

  unint64_t v53 = off_18970ED00;
  uprv_free(v44);
}

uint64_t sub_1807E3A8C(uint64_t a1, UText *ut, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, UErrorCode *a7)
{
  int v13 = *(_DWORD *)(a5 + 8);
  int64_t v14 = (int)a3;
  utext_setNativeIndex(ut, (int)a3);
  utext_moveIndex32(ut, 4);
  utext_setNativeIndex(ut, v14);
  __int128 v97 = 0u;
  __int128 v98 = 0u;
  icu::UVector32::UVector32((icu::UVector32 *)&v97, a7);
  __int128 v95 = 0u;
  __int128 v96 = 0u;
  icu::UVector32::UVector32((icu::UVector32 *)&v95, a7);
  if (*(int *)a7 > 0
    || ((*(void (**)(void, UText *, uint64_t, uint64_t, __int128 *, __int128 *, UErrorCode *))(**(void **)(a1 + 216) + 16LL))( *(void *)(a1 + 216),  ut,  a3,  a4,  &v97,  &v95,  a7),  *(int *)a7 > 0))
  {
    uint64_t v15 = 0LL;
    goto LABEL_6;
  }

  uint64_t v64 = *((void *)&v98 + 1);
  uint64_t v66 = *((void *)&v96 + 1);
  uint64_t v17 = DWORD2(v95);
  int v18 = *(_DWORD *)(*(void *)(a1 + 208) + 88LL);
  v91 = off_18970ED00;
  float v19 = uprv_malloc(16LL * v18);
  int v92 = v19;
  uint64_t v93 = v19;
  uint64_t v94 = (4 * v18);
  if (*(int *)a7 <= 0)
  {
    if (v19) {
      bzero(v19, 16LL * v18);
    }
    else {
      *a7 = U_MEMORY_ALLOCATION_ERROR;
    }
  }

  uint64_t v87 = off_18970ED00;
  uint64_t v20 = uprv_malloc(4LL * v18);
  uint64_t v88 = v20;
  uint64_t v89 = v20;
  uint64_t v90 = v18;
  if (*(int *)a7 <= 0)
  {
    if (v20) {
      bzero(v20, 4LL * v18);
    }
    else {
      *a7 = U_MEMORY_ALLOCATION_ERROR;
    }
  }

  uint64_t v86 = 4LL;
  int v83 = off_18970ED00;
  uint64_t v21 = uprv_malloc(0x10uLL);
  uint64_t v84 = v21;
  uint64_t v85 = (float *)v21;
  if (*(int *)a7 <= 0)
  {
    if (v21)
    {
      *uint64_t v21 = 0LL;
      v21[1] = 0LL;
    }

    else
    {
      *a7 = U_MEMORY_ALLOCATION_ERROR;
    }
  }

  float v22 = (char *)uprv_malloc(4LL * v18 * (int)v17);
  uint64_t v23 = v22;
  if (*(int *)a7 <= 0)
  {
    if (v22) {
      bzero(v22, 4LL * v18 * (int)v17);
    }
    else {
      *a7 = U_MEMORY_ALLOCATION_ERROR;
    }
  }

  uint64_t v65 = v17;
  uint64_t v79 = off_18970ED00;
  int v24 = (char *)uprv_malloc(8LL * v18);
  uint64_t v25 = v24;
  int v80 = v24;
  UErrorCode v81 = v24;
  uint64_t v82 = (2 * v18);
  if (*(int *)a7 > 0)
  {
    uint64_t v15 = 0LL;
    goto LABEL_82;
  }

  if (!v24)
  {
    uint64_t v15 = 0LL;
    *a7 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_82;
  }

  int v63 = v13;
  bzero(v24, 8LL * v18);
  if ((int)v17 >= 1)
  {
    do
    {
      uint64_t v75 = off_18970ED00;
      int v76 = 0LL;
      int v77 = &v23[4 * (v17 - 1) * v18];
      uint64_t v78 = v18;
      if (v17 - 1 != (_DWORD)v65 - 1)
      {
        uint64_t v71 = off_18970ED00;
        int v72 = 0LL;
        uint64_t v73 = &v23[4 * v17 * v18];
        LODWORD(v74) = v18;
        if (v18 < 1)
        {
          uint64_t v28 = 0LL;
        }

        else
        {
          uint64_t v26 = 0LL;
          do
          {
            float v27 = ((float (*)(uint64_t (***)(), uint64_t))v71[3])(&v71, v26);
            *(float *)&v77[4 * v26++] = v27;
          }

          while (v26 < ((int (*)(uint64_t (***)()))v75[2])(&v75));
          uint64_t v28 = v72;
        }

        uint64_t v71 = off_18970ED00;
        uprv_free(v28);
      }

      uint64_t v29 = *(void *)(a1 + 208);
      uint64_t v30 = v29 + 120;
      uint64_t v31 = v29 + 144;
      uint64_t v32 = v29 + 168;
      uint64_t v33 = *(void *)(v29 + 32);
      LODWORD(v29) = *(_DWORD *)(v29 + 44);
      uint64_t v34 = (void *)(v33 + 4LL * (int)v29 * *(_DWORD *)(v66 + 4 * (v17 - 1)));
      uint64_t v71 = &off_18970EDA0;
      int v72 = v34;
      LODWORD(v73) = v29;
      sub_1807E3534(v18, v30, v31, v32, (uint64_t)&v71, (uint64_t)&v75, &v87, &v91);
      uint64_t v75 = off_18970ED00;
      uprv_free(v76);
      BOOL v62 = v17-- <= 1;
    }

    while (!v62);
    uint64_t v25 = v81;
    LODWORD(v17) = v65;
  }

  uint64_t v75 = off_18970ED00;
  int v76 = 0LL;
  int v77 = v25;
  uint64_t v78 = v18;
  uint64_t v71 = off_18970ED00;
  int v72 = 0LL;
  uint64_t v73 = &v25[4 * v18];
  uint64_t v74 = v18;
  bzero(v89, 4LL * (int)v90);
  if ((int)v17 < 1)
  {
LABEL_78:
    uint64_t v15 = (*(_DWORD *)(a5 + 8) - v63);
    goto LABEL_81;
  }

  uint64_t v35 = 0LL;
  while (1)
  {
    uint64_t v36 = *(void *)(a1 + 208);
    uint64_t v37 = v36 + 48;
    uint64_t v38 = v36 + 72;
    uint64_t v39 = v36 + 96;
    uint64_t v40 = *(void *)(v36 + 32);
    LODWORD(v36) = *(_DWORD *)(v36 + 44);
    float v41 = (void *)(v40 + 4LL * (int)v36 * *(_DWORD *)(v66 + 4 * v35));
    uint64_t v67 = &off_18970EDA0;
    unsigned int v68 = v41;
    LODWORD(v69) = v36;
    sub_1807E3534(v18, v37, v38, v39, (uint64_t)&v67, (uint64_t)&v75, &v87, &v91);
    uint64_t v67 = off_18970ED00;
    unsigned int v68 = 0LL;
    __int128 v69 = &v23[4 * v35 * v18];
    int v70 = v18;
    if (((int (*)(uint64_t (***)()))v71[2])(&v71) >= 1)
    {
      uint64_t v42 = 0LL;
      do
      {
        float v43 = ((float (*)(uint64_t (***)(), uint64_t))v67[3])(&v67, v42);
        *(float *)&v73[4 * v42++] = v43;
      }

      while (v42 < ((int (*)(uint64_t (***)()))v71[2])(&v71));
    }

    uint64_t v67 = off_18970ED00;
    uprv_free(v68);
    uint64_t v44 = *(void *)(a1 + 208);
    if (((int (*)(uint64_t))v83[2])((uint64_t)&v83) >= 1)
    {
      uint64_t v45 = 0LL;
      uint64_t v46 = v44 + 216;
      do
      {
        float v47 = (*(float (**)(uint64_t, uint64_t))(*(void *)v46 + 24LL))(v46, v45);
        v85[v45++] = v47;
      }

      while (v45 < ((int (*)(uint64_t))v83[2])((uint64_t)&v83));
    }

    uint64_t v48 = *(void *)(a1 + 208);
    if (((int (*)(uint64_t))v83[2])((uint64_t)&v83) >= 1)
    {
      uint64_t v49 = 0LL;
      uint64_t v50 = v48 + 192;
      do
      {
        if (((int (*)(uint64_t))v79[2])((uint64_t)&v79) >= 1)
        {
          uint64_t v51 = 0LL;
          do
          {
            float v52 = ((float (*)(uint64_t, int))v79[3])((uint64_t)&v79, v51);
            float v53 = (*(float (**)(uint64_t, uint64_t, uint64_t))(*(void *)v50 + 32LL))(v50, v51, v49);
            v85[v49] = v85[v49] + (float)(v52 * v53);
            uint64_t v51 = (v51 + 1);
          }

          while ((int)v51 < ((int (*)(uint64_t))v79[2])((uint64_t)&v79));
        }

        ++v49;
      }

      while (v49 < ((int (*)(uint64_t))v83[2])((uint64_t)&v83));
    }

    if ((int)v86 <= 1)
    {
      int v54 = 0;
      uint64_t v57 = v65;
    }

    else
    {
      int v54 = 0;
      float v55 = *v85;
      uint64_t v56 = 1LL;
      uint64_t v57 = v65;
      do
      {
        if (v85[v56] > v55)
        {
          int v54 = v56;
          float v55 = v85[v56];
        }

        ++v56;
      }

      while (v86 != v56);
    }

    if (v54) {
      BOOL v58 = v54 == 3;
    }
    else {
      BOOL v58 = 1;
    }
    int v59 = v58;
    if (!v35 || !v59) {
      goto LABEL_77;
    }
    int v60 = *(_DWORD *)(v64 + 4 * v35);
    int v61 = *(_DWORD *)(a5 + 8);
    BOOL v62 = v61 < -1 || *(_DWORD *)(a5 + 12) <= v61;
    if (v62)
    {
      int v61 = *(_DWORD *)(a5 + 8);
    }

    *(_DWORD *)(*(void *)(a5 + 24) + 4LL * v61) = v60;
    ++*(_DWORD *)(a5 + 8);
LABEL_76:
LABEL_77:
    if (++v35 == v57) {
      goto LABEL_78;
    }
  }

  uint64_t v15 = 0LL;
LABEL_81:
  uint64_t v71 = off_18970ED00;
  uprv_free(v72);
  uint64_t v75 = off_18970ED00;
  uprv_free(v76);
  uint64_t v25 = v80;
LABEL_82:
  uint64_t v79 = off_18970ED00;
  uprv_free(v25);
  uprv_free(v23);
  int v83 = off_18970ED00;
  uprv_free(v84);
  uint64_t v87 = off_18970ED00;
  uprv_free(v88);
  v91 = off_18970ED00;
  uprv_free(v92);
LABEL_6:
  icu::UVector32::~UVector32((void **)&v95);
  icu::UVector32::~UVector32((void **)&v97);
  return v15;
}

uint64_t sub_1807E41C0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t (***sub_1807E41C8(uint64_t a1, int *a2))()
{
  if (*a2 > 0) {
    return 0LL;
  }
  int v4 = *(_DWORD *)(a1 + 8);
  if (v4 == 2)
  {
    uint64_t result = (uint64_t (***)())icu::UMemory::operator new((icu::UMemory *)0x10, (unint64_t)a2);
    if (!result) {
      return result;
    }
    uint64_t v5 = *(uint64_t (***)())a1;
    uint64_t v6 = &off_18970EEA8;
    goto LABEL_9;
  }

  if (v4 != 1) {
    abort();
  }
  uint64_t result = (uint64_t (***)())icu::UMemory::operator new((icu::UMemory *)0x10, (unint64_t)a2);
  if (result)
  {
    uint64_t v5 = *(uint64_t (***)())a1;
    uint64_t v6 = &off_18970EE68;
LABEL_9:
    *uint64_t result = v6;
    result[1] = v5;
  }

  return result;
}

void *sub_1807E4248(void *a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v8 = sub_1807C5A24(a1);
  *uint64_t v8 = off_18970ED30;
  v8[26] = a2;
  a1[27] = sub_1807E41C8(a2, a4);
  if (*a4 < 1) {
    (*(void (**)(void *, uint64_t))(*a1 + 40LL))(a1, a3);
  }
  else {
    a1[26] = 0LL;
  }
  return a1;
}

void sub_1807E42C8(void *a1)
{
  *a1 = off_18970ED30;
  uint64_t v2 = (void *)a1[26];
  if (v2)
  {
    uhash_close((_BYTE *)*v2);
    ures_close(v2[30]);
    icu::UMemory::operator delete(v2);
  }

  uint64_t v3 = a1[27];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  sub_1807C5A58((uint64_t)a1);
}

void sub_1807E432C(void *a1)
{
}

uint64_t sub_1807E4340(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 208) + 16LL);
}

void sub_1807E434C(int32_t a1@<W0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = ures_open("icudt74l-brkitr", "", a2);
  uint64_t v7 = ures_getByKeyWithFallback(v6, "lstm", v6, (UErrorCode *)a2);
  Shortint Name = uscript_getShortName(a1);
  *(_OWORD *)(a3 + 8) = 0u;
  *(void *)(a3 + 56) = 0LL;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(void *)a3 = off_18971B688;
  *(_WORD *)(a3 + 8) = 2;
  int v11 = 0;
  StringByuint64_t Key = ures_getStringByKey(v7, ShortName, &v11, a2);
  if (*a2 <= 0)
  {
    int v10 = StringByKey;
    icu::UnicodeString::setTo((icu::UnicodeString *)a3, 1, &v10, v11);
  }

  else
  {
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
  }

  ures_close(v7);
}

uint64_t CreateLSTMDataForScript(unsigned int a1, int *a2)
{
  uint64_t LSTMData = 0LL;
  uint64_t v10 = *MEMORY[0x1895F89C0];
  if (a1 <= 0x26 && ((1LL << a1) & 0x4011800000LL) != 0)
  {
    memset(v9, 0, sizeof(v9));
    sub_1807E434C(a1, a2, (uint64_t)v9);
    if (*a2 <= 0)
    {
      memset(&v8[1], 0, 56);
      v8[0] = (char *)&v8[1] + 5;
      LODWORD(v8[1]) = 40;
      appended = icu::CharString::appendInvariantChars( (icu::CharString *)v8,  (const icu::UnicodeString *)v9,  (UErrorCode *)a2);
      int IndexOf = icu::CharString::lastIndexOf((icu::CharString *)v8, 0x2Eu);
      icu::CharString::truncate((uint64_t)appended, IndexOf);
      uint64_t v6 = ures_openDirect((uint64_t)"icudt74l-brkitr", (uint64_t)v8[0], (uint64_t)a2);
      if (*a2 <= 0)
      {
        uint64_t LSTMData = CreateLSTMData(v6, a2);
      }

      else
      {
        if (v6) {
          ures_close(v6);
        }
        uint64_t LSTMData = 0LL;
      }

      if (BYTE4(v8[1])) {
        uprv_free(v8[0]);
      }
    }

    else
    {
      uint64_t LSTMData = 0LL;
    }

    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v9);
  }

  return LSTMData;
}

uint64_t CreateLSTMData(uint64_t a1, int *a2)
{
  uint64_t result = icu::UMemory::operator new((icu::UMemory *)0xF8, (unint64_t)a2);
  if (result) {
    return sub_1807E2C08(result, a1, a2);
  }
  return result;
}

void *CreateLSTMBreakEngine(int a1, void *a2, UErrorCode *a3)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  __int128 v13 = 0u;
  uint64_t v16 = 0LL;
  __int128 v15 = 0u;
  __int128 v14 = 0u;
  int32_t v12 = off_18971B688;
  LOWORD(v13) = 2;
  if (a1 == 28)
  {
    uint64_t v5 = L"[[:Mymr:]&[:LineBreak=SA:]]";
    goto LABEL_5;
  }

  if (a1 == 38)
  {
    uint64_t v5 = L"[[:Thai:]&[:LineBreak=SA:]]";
LABEL_5:
    icu::UnicodeString::UnicodeString((uint64_t)v10, (uint64_t)v5);
    icu::UnicodeString::operator=((icu::UnicodeString *)&v12, (icu::UnicodeString *)v10);
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v10);
    uint64_t v11 = 0LL;
    memset(v10, 0, sizeof(v10));
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v10);
    icu::UnicodeSet::applyPattern((icu::UnicodeSet *)v10, (const icu::UnicodeString *)&v12, a3);
    uint64_t v7 = (void *)icu::UMemory::operator new((icu::UMemory *)0xE0, v6);
    uint64_t v8 = v7;
    if (v7)
    {
      sub_1807E4248(v7, (uint64_t)a2, (uint64_t)v10, (int *)a3);
      if (*(int *)a3 >= 1)
      {
        (*(void (**)(void *))(*v8 + 8LL))(v8);
        uint64_t v8 = 0LL;
      }
    }

    else
    {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    }

    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v10);
    goto LABEL_13;
  }

  if (a2)
  {
    uhash_close((_BYTE *)*a2);
    ures_close(a2[30]);
    icu::UMemory::operator delete(a2);
  }

  uint64_t v8 = 0LL;
LABEL_13:
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v12);
  return v8;
}

void DeleteLSTMData(void *a1)
{
  if (a1)
  {
    uhash_close((_BYTE *)*a1);
    ures_close(a1[30]);
    icu::UMemory::operator delete(a1);
  }

uint64_t LSTMDataName(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1807E479C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

float sub_1807E47A4(uint64_t a1, int a2)
{
  return *(float *)(*(void *)(a1 + 8) + 4LL * a2);
}

uint64_t sub_1807E47B0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

float sub_1807E47B8(uint64_t a1, int a2, int a3)
{
  return *(float *)(*(void *)(a1 + 8) + 4LL * (a3 + *(_DWORD *)(a1 + 20) * a2));
}

uint64_t sub_1807E47CC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

float sub_1807E47D4(uint64_t a1, int a2)
{
  return *(float *)(*(void *)(a1 + 16) + 4LL * a2);
}

icu::MessagePattern *icu::MessagePattern::MessagePattern(icu::MessagePattern *this, UErrorCode *a2)
{
  *(void *)this = off_18970EF00;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 2) = off_18971B688;
  *((_WORD *)this + 12) = 2;
  *((void *)this + 10) = 0LL;
  *((void *)this + 11) = 0LL;
  *((_DWORD *)this + 24) = 0;
  *((void *)this + 13) = 0LL;
  *((void *)this + 14) = 0LL;
  *(void *)((char *)this + 119) = 0LL;
  icu::MessagePattern::init(this, a2);
  return this;
}

{
  *(void *)this = off_18970EF00;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 2) = off_18971B688;
  *((_WORD *)this + 12) = 2;
  *((void *)this + 10) = 0LL;
  *((void *)this + 11) = 0LL;
  *((_DWORD *)this + 24) = 0;
  *((void *)this + 13) = 0LL;
  *((void *)this + 14) = 0LL;
  *(void *)((char *)this + 119) = 0LL;
  icu::MessagePattern::init(this, a2);
  return this;
}

uint64_t icu::MessagePattern::init(icu::MessagePattern *this, UErrorCode *a2)
{
  uint64_t result = icu::UMemory::operator new((icu::UMemory *)0x210, (unint64_t)a2);
  if (result)
  {
    uint64_t v5 = result;
    bzero((void *)(result + 8), 0x208uLL);
    *(void *)uint64_t v5 = v5 + 16;
    *(_DWORD *)(v5 + 8) = 32;
    *((void *)this + 10) = v5;
    *((void *)this + 11) = v5 + 16;
    return 1LL;
  }

  else
  {
    *((void *)this + 10) = 0LL;
    *a2 = U_MEMORY_ALLOCATION_ERROR;
  }

  return result;
}

uint64_t icu::MessagePattern::MessagePattern(uint64_t a1, int a2, UErrorCode *a3)
{
  *(void *)a1 = off_18970EF00;
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = off_18971B688;
  *(_WORD *)(a1 + 24) = 2;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 88) = 0LL;
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 112) = 0LL;
  *(void *)(a1 + 119) = 0LL;
  icu::MessagePattern::init((icu::MessagePattern *)a1, a3);
  return a1;
}

{
  *(void *)a1 = off_18970EF00;
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = off_18971B688;
  *(_WORD *)(a1 + 24) = 2;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 88) = 0LL;
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 112) = 0LL;
  *(void *)(a1 + 119) = 0LL;
  icu::MessagePattern::init((icu::MessagePattern *)a1, a3);
  return a1;
}

icu::MessagePattern *icu::MessagePattern::MessagePattern( icu::MessagePattern *this, UChar **a2, UParseError *a3, UErrorCode *a4)
{
  *(void *)this = off_18970EF00;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 2) = off_18971B688;
  *((_WORD *)this + 12) = 2;
  *((void *)this + 10) = 0LL;
  *((void *)this + 11) = 0LL;
  *((_DWORD *)this + 24) = 0;
  *((void *)this + 13) = 0LL;
  *((void *)this + 14) = 0LL;
  *(void *)((char *)this + 119) = 0LL;
  return this;
}

icu::MessagePattern *icu::MessagePattern::parse( icu::MessagePattern *this, UChar **a2, UParseError *a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    if (a3)
    {
      *(void *)&a3->line = 0LL;
      a3->preContext[0] = 0;
      a3->postContext[0] = 0;
    }

    icu::UnicodeString::operator=((UChar **)this + 2, a2);
    *((_DWORD *)this + 24) = 0;
    *((_DWORD *)this + 30) = 0;
    *(_DWORD *)((char *)this + 123) = 0;
  }

  icu::MessagePattern::parseMessage((uint64_t)this, 0, 0, 0, 0, a3, (int *)a4);
  uint64_t v7 = (void *)*((void *)this + 10);
  if (v7) {
    *((void *)this + 11) = *v7;
  }
  uint64_t v8 = (void *)*((void *)this + 13);
  if (v8) {
    *((void *)this + 14) = *v8;
  }
  return this;
}

icu::MessagePattern *icu::MessagePattern::MessagePattern( icu::MessagePattern *this, const icu::MessagePattern *a2)
{
  *(void *)this = off_18970EF00;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  icu::UnicodeString::UnicodeString((icu::MessagePattern *)((char *)this + 16), (UChar **)a2 + 2);
  *((void *)this + 10) = 0LL;
  *((void *)this + 11) = 0LL;
  *((_DWORD *)this + 24) = 0;
  *((void *)this + 13) = 0LL;
  *((void *)this + 14) = 0LL;
  *((_DWORD *)this + 30) = 0;
  *((_BYTE *)this + 124) = *((_BYTE *)a2 + 124);
  *((_BYTE *)this + 125) = *((_BYTE *)a2 + 125);
  *((_BYTE *)this + 126) = *((_BYTE *)a2 + 126);
  UErrorCode v6 = U_ZERO_ERROR;
  if (!icu::MessagePattern::copyStorage(this, a2, &v6))
  {
    if ((*((_WORD *)this + 12) & 1) != 0) {
      __int16 v4 = 2;
    }
    else {
      __int16 v4 = *((_WORD *)this + 12) & 0x1F;
    }
    *((_WORD *)this + 12) = v4;
    *((_DWORD *)this + 24) = 0;
    *((_DWORD *)this + 30) = 0;
    *(_DWORD *)((char *)this + 123) = 0;
  }

  return this;
}

uint64_t icu::MessagePattern::copyStorage( icu::MessagePattern *this, const icu::MessagePattern *a2, UErrorCode *a3)
{
  *((void *)this + 11) = 0LL;
  *((_DWORD *)this + 24) = 0;
  *((void *)this + 14) = 0LL;
  *((_DWORD *)this + 30) = 0;
  uint64_t v7 = (_DWORD *)*((void *)this + 10);
  if (!v7)
  {
    uint64_t result = icu::UMemory::operator new((icu::UMemory *)0x210, (unint64_t)a2);
    if (!result)
    {
      *((void *)this + 10) = 0LL;
      goto LABEL_18;
    }

    uint64_t v7 = (_DWORD *)result;
    bzero((void *)(result + 8), 0x208uLL);
    *(void *)uint64_t v7 = v7 + 4;
    v7[2] = 32;
    *((void *)this + 10) = v7;
    *((void *)this + 11) = v7 + 4;
  }

  int v8 = *((_DWORD *)a2 + 24);
  if (v8 >= 1)
  {
    sub_1807E4DD4(v7, *((const void ***)a2 + 10), v8, (int *)a3);
    *((void *)this + 11) = **((void **)this + 10);
    *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  }

  int v9 = *((_DWORD *)a2 + 30);
  if (v9 < 1) {
    return 1LL;
  }
  uint64_t result = *((void *)this + 13);
  if (result)
  {
LABEL_13:
    sub_1807E4E94((_DWORD *)result, *((const void ***)a2 + 13), v9, (int *)a3);
    if (*(int *)a3 <= 0)
    {
      *((void *)this + 14) = **((void **)this + 13);
      *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
      return 1LL;
    }

    return 0LL;
  }

  uint64_t result = icu::UMemory::operator new((icu::UMemory *)0x50, (unint64_t)a2);
  if (result)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(void *)(result + 72) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = result + 16;
    *(_DWORD *)(result + 8) = 8;
    *((void *)this + 13) = result;
    *((void *)this + 14) = result + 16;
    int v9 = *((_DWORD *)a2 + 30);
    goto LABEL_13;
  }

  *((void *)this + 13) = 0LL;
LABEL_18:
  *a3 = U_MEMORY_ALLOCATION_ERROR;
  return result;
}

uint64_t icu::MessagePattern::clear(uint64_t this)
{
  if ((*(_WORD *)(this + 24) & 1) != 0) {
    __int16 v1 = 2;
  }
  else {
    __int16 v1 = *(_WORD *)(this + 24) & 0x1F;
  }
  *(_WORD *)(this + 24) = v1;
  *(_DWORD *)(this + 96) = 0;
  *(_DWORD *)(this + 120) = 0;
  *(_DWORD *)(this + 123) = 0;
  return this;
}

uint64_t icu::MessagePattern::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    icu::UnicodeString::operator=((UChar **)(a1 + 16), (UChar **)(a2 + 16));
    *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
    *(_WORD *)(a1 + 125) = *(_WORD *)(a2 + 125);
    UErrorCode v6 = U_ZERO_ERROR;
    if (!icu::MessagePattern::copyStorage( (icu::MessagePattern *)a1,  (const icu::MessagePattern *)a2,  &v6))
    {
      if ((*(_WORD *)(a1 + 24) & 1) != 0) {
        __int16 v4 = 2;
      }
      else {
        __int16 v4 = *(_WORD *)(a1 + 24) & 0x1F;
      }
      *(_WORD *)(a1 + 24) = v4;
      *(_DWORD *)(a1 + 96) = 0;
      *(_DWORD *)(a1 + 120) = 0;
      *(_DWORD *)(a1 + 123) = 0;
    }
  }

  return a1;
}

_DWORD *sub_1807E4DD4(_DWORD *result, const void **a2, int a3, int *a4)
{
  if (a3 >= 1 && *a4 <= 0)
  {
    uint64_t v7 = result;
    if (result[2] >= a3)
    {
      int v9 = *(void **)result;
      size_t v8 = 16LL * a3;
      return memcpy(v9, *a2, v8);
    }

    size_t v8 = 16LL * a3;
    uint64_t result = uprv_malloc(v8);
    if (result)
    {
      int v9 = result;
      if (*((_BYTE *)v7 + 12)) {
        uprv_free(*(void **)v7);
      }
      *(void *)uint64_t v7 = v9;
      v7[2] = a3;
      *((_BYTE *)v7 + 12) = 1;
      return memcpy(v9, *a2, v8);
    }

    *a4 = 7;
  }

  return result;
}

_DWORD *sub_1807E4E94(_DWORD *result, const void **a2, int a3, int *a4)
{
  if (a3 >= 1 && *a4 <= 0)
  {
    uint64_t v7 = result;
    if (result[2] >= a3)
    {
      int v9 = *(void **)result;
      size_t v8 = 8LL * a3;
      return memcpy(v9, *a2, v8);
    }

    size_t v8 = 8LL * a3;
    uint64_t result = uprv_malloc(v8);
    if (result)
    {
      int v9 = result;
      if (*((_BYTE *)v7 + 12)) {
        uprv_free(*(void **)v7);
      }
      *(void *)uint64_t v7 = v9;
      v7[2] = a3;
      *((_BYTE *)v7 + 12) = 1;
      return memcpy(v9, *a2, v8);
    }

    *a4 = 7;
  }

  return result;
}

void icu::MessagePattern::~MessagePattern(icu::MessagePattern *this)
{
  uint64_t v2 = off_18970EF00;
  *(void *)this = off_18970EF00;
  uint64_t v3 = *((void *)this + 10);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 12)) {
      uprv_free(*(void **)v3);
    }
    icu::UMemory::operator delete((void *)v3);
  }

  uint64_t v4 = *((void *)this + 13);
  if (v4)
  {
    if (*(_BYTE *)(v4 + 12)) {
      uprv_free(*(void **)v4);
    }
    icu::UMemory::operator delete((void *)v4);
  }

  icu::UnicodeString::~UnicodeString(v2, (icu::MessagePattern *)((char *)this + 16));
  icu::UObject::~UObject(this);
}

{
  void *v1;
  icu::MessagePattern::~MessagePattern(this);
  icu::UMemory::operator delete(v1);
}

icu::UnicodeString *icu::MessagePattern::preParse( icu::UnicodeString *this, UChar **a2, UParseError *a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    uint64_t v4 = this;
    if (a3)
    {
      *(void *)&a3->line = 0LL;
      a3->preContext[0] = 0;
      a3->postContext[0] = 0;
    }

    this = icu::UnicodeString::operator=((UChar **)this + 2, a2);
    *((_DWORD *)v4 + 24) = 0;
    *((_DWORD *)v4 + 30) = 0;
    *(_DWORD *)((char *)v4 + 123) = 0;
  }

  return this;
}

uint64_t icu::MessagePattern::parseMessage( uint64_t a1, int a2, int a3, int a4, int a5, UParseError *a6, int *a7)
{
  if (*a7 > 0) {
    return 0LL;
  }
  if (a4 >= 0x8000)
  {
    uint64_t v7 = 0LL;
    int v10 = 8;
LABEL_5:
    *a7 = v10;
    return v7;
  }

  uint64_t v16 = *(int *)(a1 + 96);
  icu::MessagePattern::addPart(a1, 0, a2, a3, a4, a7);
  uint64_t v7 = 0LL;
  if (*a7 > 0) {
    return v7;
  }
  uint64_t v45 = v16;
  uint64_t v7 = (a3 + a2);
  BOOL v19 = a5 == 3 || a5 == 5;
  while (1)
  {
    unsigned int v20 = *(unsigned __int16 *)(a1 + 24);
    int v21 = v20 >> 5;
LABEL_18:
    uint64_t v22 = (int)v7 + 1LL;
    if (v21 > v7)
    {
      uint64_t v23 = a1 + 26;
      if ((v20 & 2) == 0) {
        uint64_t v23 = *(void *)(a1 + 40);
      }
      int v24 = *(unsigned __int16 *)(v23 + 2LL * (int)v7);
      if (v24 == 39)
      {
        if ((v20 & 0x8000) != 0)
        {
          unsigned int v25 = *(_DWORD *)(a1 + 28);
          if ((_DWORD)v22 == v25) {
            goto LABEL_86;
          }
        }

        else
        {
          if ((_DWORD)v22 == v20 >> 5) {
            goto LABEL_86;
          }
          unsigned int v25 = v20 >> 5;
        }

        if (v25 <= v22)
        {
          int v28 = 0xFFFF;
LABEL_51:
          if (*(_DWORD *)(a1 + 8) == 1
            || v28 == 123
            || v28 == 125
            || (v28 == 35 ? (v40 = v19) : (v40 = 0), v28 == 124 ? (BOOL v41 = a5 == 2) : (BOOL v41 = 0), v41 || v40))
          {
            while (1)
            {
              icu::MessagePattern::addPart(a1, 2, v7, 1, 0, a7);
              unsigned int v32 = *(unsigned __int16 *)(a1 + 24);
              if ((int)v22 >= -1)
              {
                unsigned int v35 = v22 + 1;
                if ((v32 & 0x8000) != 0)
                {
                  unsigned int v34 = *(_DWORD *)(a1 + 28);
                  int v33 = (int)v34 >= (int)v35 ? v22 + 1 : *(_DWORD *)(a1 + 28);
                }

                else
                {
                  unsigned int v34 = v32 >> 5;
                  int v33 = v34 >= v35 ? v22 + 1 : v34;
                }
              }

              else
              {
                int v33 = 0;
                unsigned int v34 = (v32 & 0x8000) != 0 ? *(_DWORD *)(a1 + 28) : v32 >> 5;
              }

              int v36 = icu::UnicodeString::doIndexOf(a1 + 16, 0x27u, v33, v34 - v33);
              if (v36 < 0) {
                break;
              }
              unsigned int v37 = *(unsigned __int16 *)(a1 + 24);
              else {
                unsigned int v38 = v37 >> 5;
              }
              uint64_t v7 = (v36 + 1);
              if (v38 > v7)
              {
                uint64_t v39 = a1 + 26;
                if ((v37 & 2) == 0) {
                  uint64_t v39 = *(void *)(a1 + 40);
                }
                LODWORD(v22) = v36 + 1;
              }

              icu::MessagePattern::addPart(a1, 2, v36, 1, 0, a7);
              uint64_t v22 = v7;
              goto LABEL_87;
            }

            else {
              uint64_t v22 = *(unsigned __int16 *)(a1 + 24) >> 5;
            }
          }

LABEL_86:
          icu::MessagePattern::addPart(a1, 3, v22, 0, 39, a7);
          *(_BYTE *)(a1 + 126) = 1;
          goto LABEL_87;
        }

        uint64_t v27 = a1 + 26;
        if ((v20 & 2) == 0) {
          uint64_t v27 = *(void *)(a1 + 40);
        }
        int v28 = *(unsigned __int16 *)(v27 + 2 * v22);
        if (v28 != 39) {
          goto LABEL_51;
        }
        icu::MessagePattern::addPart(a1, 2, v7 + 1, 1, 0, a7);
        uint64_t v22 = (v7 + 2);
      }

      else
      {
        char v26 = !v19;
        if (v24 != 35) {
          char v26 = 1;
        }
        if ((v26 & 1) != 0)
        {
          if (v24 == 123)
          {
            uint64_t v22 = icu::MessagePattern::parseArg((icu::MessagePattern *)a1, v7, 1, a4, a6, (UErrorCode *)a7);
          }

          else
          {
            BOOL v30 = a5 == 2 && v24 == 124;
            BOOL v31 = v24 != 125 || a4 <= 0;
            if (!v31 || v30)
            {
              if (a5 == 2) {
                uint64_t v43 = v7;
              }
              else {
                uint64_t v43 = v22;
              }
              *(_DWORD *)(**(void **)(a1 + 80) + 16 * v45 + 12) = *(_DWORD *)(a1 + 96);
              __int16 v44 = v24 != 125 || a5 != 2;
              icu::MessagePattern::addPart(a1, 1, v7, v44, a4, a7);
              return v43;
            }
          }
        }

        else
        {
          icu::MessagePattern::addPart(a1, 4, v7, 1, 0, a7);
        }
      }
    }

      ++v32;
      v33 += 12LL;
      if (v54 == v32) {
        return u_terminateUChars(a2, a3, (a3 - v19), a5);
      }
    }

    uint64_t v39 = 8206;
LABEL_72:
    BOOL v40 = __OFSUB__(v19--, 1);
    if (v19 < 0 == v40) {
      *v34++ = v39;
    }
    goto LABEL_74;
  }

  return u_terminateUChars(a2, a3, (a3 - v19), a5);
}

    uint64_t v16 = v20;
    if ((int)v5 >= *((_DWORD *)a1 + 6))
    {
      uint64_t v45 = *((int *)a1 + 5) - 2LL;
      uint64_t v46 = a1[1];
      if (v10 == 2)
      {
        float v47 = *(unsigned __int8 *)(v46 + v45);
      }

      else if (v10 == 1)
      {
        float v47 = *(_DWORD *)(v46 + 4LL * (int)v45);
      }

      else if (v10)
      {
        float v47 = -1;
      }

      else
      {
        float v47 = *(unsigned __int16 *)(v46 + 2 * v45);
      }

      float v52 = *((_DWORD *)a1 + 11);
      if (v47 == v52) {
        float v53 = v11;
      }
      else {
        float v53 = v47;
      }
      if (a3 && v47 != v52)
      {
        int v54 = v18;
        float v53 = ((uint64_t (*)(uint64_t))a3)(v7);
        LODWORD(v18) = v54;
      }

      if (v53 == (_DWORD)v18) {
        return 1114111LL;
      }
      else {
        return (v5 - 1);
      }
    }
  }

  uint64_t v56 = v16;
  LODWORD(v20) = 0;
  int v21 = (int)v5 >> 6;
  uint64_t v22 = 64;
  if (*((_BYTE *)a1 + 30)) {
    uint64_t v23 = 64LL;
  }
  else {
    uint64_t v23 = 1024LL;
  }
LABEL_24:
  int v24 = v20 & 0x7FFF;
  unsigned int v25 = v22 - 1;
  uint64_t v64 = -v22;
  char v26 = v21;
  uint64_t v27 = v20;
  BOOL v62 = v23;
  int v63 = v22;
  int v61 = v24;
  int v60 = v20;
  while (1)
  {
    int v28 = v27 >> 15
    uint64_t v5 = (v5 + v22);
LABEL_81:
    if (++v26 >= v23)
    {
      unsigned int v20 = v56;
      goto LABEL_86;
    }
  }

  if (v28 == *((_DWORD *)a1 + 10))
  {
    if ((v14 & 1) != 0)
    {
      if ((_DWORD)v11 != (_DWORD)v18) {
        return (v5 - 1);
      }
    }

    else
    {
      __int128 v13 = *((unsigned int *)a1 + 11);
      if (v6) {
        int32x2_t *v6 = v11;
      }
    }

    uint64_t v5 = ((_DWORD)v5 + v22) & v64;
    __int128 v14 = 1;
    uint64_t v17 = v28;
    int v18 = v11;
    goto LABEL_81;
  }

  BOOL v30 = (v5 & v25) + (unint64_t)v28;
  BOOL v31 = a1[1];
  if (v10 != 2)
  {
    if (v10 == 1)
    {
      unsigned int v32 = *(unsigned int *)(v31 + 4LL * v30);
      if ((v14 & 1) != 0) {
        goto LABEL_57;
      }
    }

    else if (v10)
    {
      unsigned int v32 = 0xFFFFFFFFLL;
      if ((v14 & 1) != 0) {
        goto LABEL_57;
      }
    }

    else
    {
      unsigned int v32 = *(unsigned __int16 *)(v31 + 2LL * v30);
      if ((v14 & 1) != 0) {
        goto LABEL_57;
      }
    }

            if (*a5 > 0)
            {
              __int128 v14 = 0LL;
              goto LABEL_16;
            }

            BOOL v19 = v43;
            if (!v43) {
              goto LABEL_16;
            }
LABEL_15:
            *a5 = v19;
LABEL_16:
            umtx_unlock((std::mutex **)&unk_18C449360);
            goto LABEL_17;
          }
        }

        else
        {
          unsigned int v35 = 1;
        }

LABEL_87:
    uint64_t v7 = v22;
    if (*a7 >= 1) {
      return 0LL;
    }
  }

  int v21 = *(_DWORD *)(a1 + 28);
LABEL_89:
  if (a4 <= 0)
  {
    uint64_t v42 = **(_DWORD ***)(a1 + 80);
  }

  else if (a4 != 1 || a5 != 2 || (uint64_t v42 = **(_DWORD ***)(a1 + 80), !*v42))
  {
    icu::MessagePattern::setParseError((char *)a1, a6, 0);
    uint64_t v7 = 0LL;
    int v10 = 65801;
    goto LABEL_5;
  }

  v42[4 * v45 + 3] = *(_DWORD *)(a1 + 96);
  icu::MessagePattern::addPart(a1, 1, v7, 0, a4, a7);
  return v7;
}

    BOOL v19 = *a8;
    uint64_t v49 = *a8 <= 0 && (int)v21 < a5;
    unsigned int v20 = v21;
    if (!v49) {
      goto LABEL_97;
    }
  }

  int v36 = (v22 < 0xEA || (v22 + 21) <= 1u) && v20 + 3 <= a5;
  if (v36 && *(char *)(a4 + v21) <= -65 && *(char *)(v20 + a4 + 2) < -64)
  {
    LODWORD(v21) = v20 + 3;
    goto LABEL_87;
  }

        size_t v8 = *(void *)(v8 + 40);
        if (!v8) {
          goto LABEL_92;
        }
        int v63 = " ";
        icu::UnicodeString::UnicodeString(&v75, 1LL, &v63);
        if ((v76 & 0x8000u) == 0) {
          float v52 = v76 >> 5;
        }
        else {
          float v52 = v77;
        }
        icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v52);
        uint64_t result = icu::UnicodeString::~UnicodeString(v53, (icu::UnicodeString *)&v75);
        v60[2] = v63;
      }

      if (*(_DWORD *)(v8 + 16) == -1) {
        goto LABEL_87;
      }
      sub_180955B74(*(_DWORD *)(v8 + 36), (uint64_t)&v75);
      if ((v76 & 0x8000u) == 0) {
        int v21 = v76 >> 5;
      }
      else {
        int v21 = v77;
      }
      icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v21);
      uint64_t v23 = icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v75);
      uint64_t v74 = L" is ";
      icu::UnicodeString::UnicodeString(v23, 1LL, &v74);
      if ((v76 & 0x8000u) == 0) {
        int v24 = v76 >> 5;
      }
      else {
        int v24 = v77;
      }
      icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v24);
      char v26 = icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)&v75);
      v60[4] = v74;
      if (*(_BYTE *)(v8 + 32))
      {
        uint64_t v73 = "n";
        icu::UnicodeString::UnicodeString(v26, 1LL, &v73);
        if ((v76 & 0x8000u) == 0) {
          uint64_t v27 = v76 >> 5;
        }
        else {
          uint64_t v27 = v77;
        }
        icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v27);
        icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v75);
        v60[3] = v73;
      }

      goto LABEL_57;
    }
  }

void *icu::MessagePattern::postParse(void *this)
{
  __int16 v1 = (void *)this[10];
  if (v1) {
    this[11] = *v1;
  }
  uint64_t v2 = (void *)this[13];
  if (v2) {
    this[14] = *v2;
  }
  return this;
}

icu::MessagePattern *icu::MessagePattern::parseChoiceStyle( icu::MessagePattern *this, UChar **a2, UParseError *a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    if (a3)
    {
      *(void *)&a3->line = 0LL;
      a3->preContext[0] = 0;
      a3->postContext[0] = 0;
    }

    icu::UnicodeString::operator=((UChar **)this + 2, a2);
    *((_DWORD *)this + 24) = 0;
    *((_DWORD *)this + 30) = 0;
    *(_DWORD *)((char *)this + 123) = 0;
  }

  icu::MessagePattern::parseChoiceStyle(this, 0, 0, a3, a4);
  uint64_t v7 = (void *)*((void *)this + 10);
  if (v7) {
    *((void *)this + 11) = *v7;
  }
  size_t v8 = (void *)*((void *)this + 13);
  if (v8) {
    *((void *)this + 14) = *v8;
  }
  return this;
}

uint64_t icu::MessagePattern::parseChoiceStyle( icu::MessagePattern *this, int a2, int a3, UParseError *a4, UErrorCode *a5)
{
  unint64_t v11 = icu::MessagePattern::skipWhiteSpace(this, a2);
  unint64_t v12 = v11;
  unsigned int v13 = *((unsigned __int16 *)this + 12);
  if ((v13 & 0x8000) != 0)
  {
    unsigned int v14 = *((_DWORD *)this + 7);
    if ((_DWORD)v11 != v14) {
      goto LABEL_7;
    }
LABEL_12:
    uint64_t v16 = (char *)this;
    uint64_t v17 = a4;
    int32_t v18 = 0;
    goto LABEL_15;
  }

  if ((_DWORD)v11 == v13 >> 5) {
    goto LABEL_12;
  }
  unsigned int v14 = v13 >> 5;
LABEL_7:
  if (v14 > v11)
  {
    __int128 v15 = (v13 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((void *)this + 5);
  }

  int v19 = icu::MessagePattern::skipDouble(this, v11);
  if (v19 == (_DWORD)v12) {
    goto LABEL_14;
  }
  int v21 = v19;
  while (1)
  {
    if (v21 - (int)v12 >= 0x10000)
    {
      icu::MessagePattern::setParseError((char *)this, a4, v12);
      UErrorCode v20 = U_INDEX_OUTOFBOUNDS_ERROR;
      goto LABEL_16;
    }

    icu::MessagePattern::parseDouble((char *)this, v12, v21, 1, a4, a5);
    int v22 = icu::MessagePattern::skipWhiteSpace(this, v21);
    int v23 = v22;
    unsigned int v24 = *((unsigned __int16 *)this + 12);
    if ((v24 & 0x8000) != 0)
    {
      unsigned int v25 = *((_DWORD *)this + 7);
      if (v22 == v25) {
        goto LABEL_14;
      }
    }

    else
    {
      if (v22 == v24 >> 5) {
        goto LABEL_14;
      }
      unsigned int v25 = v24 >> 5;
    }

    if (v25 <= v22) {
      goto LABEL_14;
    }
    char v26 = (char *)this + 26;
    if ((v24 & 2) == 0) {
      char v26 = (char *)*((void *)this + 5);
    }
    int v27 = *(unsigned __int16 *)&v26[2 * v22];
    if (v27 != 35 && v27 != 60 && v27 != 8804) {
      goto LABEL_14;
    }
    icu::MessagePattern::addPart((uint64_t)this, 11, v22, 1, 0, (int *)a5);
    uint64_t result = icu::MessagePattern::parseMessage(this, (v23 + 1), 0LL, (a3 + 1), 2LL, a4, a5);
    unsigned int v28 = *((unsigned __int16 *)this + 12);
    if (*((__int16 *)this + 12) < 0)
    {
      unsigned int v29 = *((_DWORD *)this + 7);
      if ((_DWORD)result == v29) {
        return result;
      }
    }

    else
    {
      if ((_DWORD)result == v28 >> 5) {
        return result;
      }
      unsigned int v29 = v28 >> 5;
    }

    if (v29 > result)
    {
      BOOL v30 = (char *)this + 26;
      if ((v28 & 2) == 0) {
        BOOL v30 = (char *)*((void *)this + 5);
      }
    }

    unint64_t v12 = icu::MessagePattern::skipWhiteSpace(this, (int)result + 1);
    int v21 = icu::MessagePattern::skipDouble(this, v12);
    if (v21 == (_DWORD)v12) {
      goto LABEL_14;
    }
  }

  if (a3 <= 0 && ***((_DWORD ***)this + 10))
  {
LABEL_14:
    uint64_t v16 = (char *)this;
    uint64_t v17 = a4;
    int32_t v18 = a2;
LABEL_15:
    icu::MessagePattern::setParseError(v16, v17, v18);
    UErrorCode v20 = U_PATTERN_SYNTAX_ERROR;
LABEL_16:
    uint64_t result = 0LL;
    *a5 = v20;
  }

  return result;
}

icu::MessagePattern *icu::MessagePattern::parsePluralStyle( icu::MessagePattern *this, UChar **a2, UParseError *a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    if (a3)
    {
      *(void *)&a3->line = 0LL;
      a3->preContext[0] = 0;
      a3->postContext[0] = 0;
    }

    icu::UnicodeString::operator=((UChar **)this + 2, a2);
    *((_DWORD *)this + 24) = 0;
    *((_DWORD *)this + 30) = 0;
    *(_DWORD *)((char *)this + 123) = 0;
  }

  icu::MessagePattern::parsePluralOrSelectStyle(this, 3LL, 0, 0, a3, (int *)a4);
  uint64_t v7 = (void *)*((void *)this + 10);
  if (v7) {
    *((void *)this + 11) = *v7;
  }
  size_t v8 = (void *)*((void *)this + 13);
  if (v8) {
    *((void *)this + 14) = *v8;
  }
  return this;
}

unint64_t icu::MessagePattern::parsePluralOrSelectStyle( icu::MessagePattern *this, uint64_t a2, int32_t a3, int a4, UParseError *a5, int *a6)
{
  if (*a6 > 0) {
    return 0LL;
  }
  char v11 = 0;
  unint64_t v12 = (char *)this + 16;
  uint64_t v43 = (char *)this + 26;
  BOOL v14 = (_DWORD)a2 == 3 || (_DWORD)a2 == 5;
  unsigned int v40 = a4 + 1;
  int v41 = 0;
  int32_t v42 = a3;
  int v15 = a3;
  while (1)
  {
    unint64_t v16 = icu::MessagePattern::skipWhiteSpace(this, v15);
    unint64_t v6 = v16;
    unsigned int v17 = *((unsigned __int16 *)this + 12);
    unsigned int v18 = v17 >> 5;
    if ((v17 & 0x8000) != 0)
    {
      unsigned int v19 = *((_DWORD *)this + 7);
      if ((_DWORD)v16 == v19)
      {
LABEL_59:
        int v36 = 1;
        goto LABEL_62;
      }
    }

    else
    {
      unsigned int v19 = v17 >> 5;
      if ((_DWORD)v16 == v17 >> 5) {
        goto LABEL_59;
      }
    }

    if (v19 > v16)
    {
      UErrorCode v20 = v43;
      if ((v17 & 2) == 0) {
        UErrorCode v20 = (char *)*((void *)this + 5);
      }
    }

    if ((_DWORD)a2 != 5 && (_DWORD)a2 != 3) {
      goto LABEL_26;
    }
    if ((v17 & 0x8000) != 0) {
      unsigned int v18 = *((_DWORD *)this + 7);
    }
    int v21 = v43;
    if ((v17 & 2) == 0) {
      int v21 = (char *)*((void *)this + 5);
    }
    if (*(_WORD *)&v21[2 * (int)v16] == 61)
    {
      int v34 = icu::MessagePattern::skipDouble(this, (v16 + 1));
      int v35 = v34 - v6;
      if (v34 - (_DWORD)v6 == 1) {
        goto LABEL_69;
      }
      if (v35 >= 0x10000)
      {
LABEL_60:
        int v37 = 8;
        icu::MessagePattern::setParseError((char *)this, a5, v6);
        goto LABEL_71;
      }

      int v24 = v34;
      icu::MessagePattern::addPart((uint64_t)this, 11, v6, v35, 0, a6);
      icu::MessagePattern::parseDouble((char *)this, (v6 + 1), v24, 0, a5, (UErrorCode *)a6);
LABEL_45:
      if (*a6 > 0) {
        return 0LL;
      }
      unint64_t v30 = icu::MessagePattern::skipWhiteSpace(this, v24);
      unsigned int v31 = *((unsigned __int16 *)this + 12);
      if ((v31 & 0x8000) != 0)
      {
        unsigned int v32 = *((_DWORD *)this + 7);
        if ((_DWORD)v30 == v32) {
          goto LABEL_68;
        }
      }

      else
      {
        if ((_DWORD)v30 == v31 >> 5) {
          goto LABEL_68;
        }
        unsigned int v32 = v31 >> 5;
      }

      int v33 = v43;
      if ((v31 & 2) == 0) {
        int v33 = (char *)*((void *)this + 5);
      }
      if (*(_WORD *)&v33[2 * (int)v30] != 123)
      {
LABEL_68:
        int32_t v42 = v6;
LABEL_69:
        int v37 = 65799;
LABEL_70:
        icu::MessagePattern::setParseError((char *)this, a5, v42);
        goto LABEL_71;
      }

      char v11 = 1;
      int v15 = icu::MessagePattern::parseMessage(this, v30, 1LL, v40, a2, a5, a6);
      unint64_t v6 = 0LL;
      if (*a6 >= 1) {
        return v6;
      }
    }

    else
    {
LABEL_26:
      int v22 = icu::MessagePattern::skipIdentifier(this, v16);
      int v23 = v22 - v6;
      if (v22 == (_DWORD)v6) {
        goto LABEL_69;
      }
      int v24 = v22;
      if (v23 != 6 || !v14)
      {
        if (v23 >= 0x10000) {
          goto LABEL_60;
        }
LABEL_42:
        icu::MessagePattern::addPart((uint64_t)this, 11, v6, v23, 0, a6);
        int v28 = icu::UnicodeString::doCompare((uint64_t)v12, v6, v23, (uint64_t)&aOffsetOther[7], 0, 5);
        int v29 = v41;
        if (!v28) {
          int v29 = 1;
        }
        int v41 = v29;
        goto LABEL_45;
      }

      else {
        int v26 = *((unsigned __int16 *)this + 12) >> 5;
      }
      if ((v11 & 1) != 0) {
        goto LABEL_69;
      }
      unint64_t v6 = icu::MessagePattern::skipWhiteSpace(this, v24 + 1);
      int v27 = icu::MessagePattern::skipDouble(this, v6);
      if (v27 == (_DWORD)v6) {
        goto LABEL_69;
      }
      int v15 = v27;
      icu::MessagePattern::parseDouble((char *)this, v6, v27, 0, a5, (UErrorCode *)a6);
      char v11 = 1;
      if (*a6 >= 1) {
        return 0LL;
      }
    }
  }

  int v36 = 0;
LABEL_62:
  int v37 = 65799;
  if (a4 < 1)
  {
    if (v36 == (***((_DWORD ***)this + 10) == 0)) {
      goto LABEL_70;
    }
  }

  else if ((v36 & 1) != 0)
  {
    goto LABEL_70;
  }

  if ((_BYTE)v41) {
    return v6;
  }
  int v37 = 65807;
  icu::MessagePattern::setParseError((char *)this, a5, 0);
LABEL_71:
  unint64_t v6 = 0LL;
  *a6 = v37;
  return v6;
}

icu::MessagePattern *icu::MessagePattern::parseSelectStyle( icu::MessagePattern *this, UChar **a2, UParseError *a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    if (a3)
    {
      *(void *)&a3->line = 0LL;
      a3->preContext[0] = 0;
      a3->postContext[0] = 0;
    }

    icu::UnicodeString::operator=((UChar **)this + 2, a2);
    *((_DWORD *)this + 24) = 0;
    *((_DWORD *)this + 30) = 0;
    *(_DWORD *)((char *)this + 123) = 0;
  }

  icu::MessagePattern::parsePluralOrSelectStyle(this, 4LL, 0, 0, a3, (int *)a4);
  uint64_t v7 = (void *)*((void *)this + 10);
  if (v7) {
    *((void *)this + 11) = *v7;
  }
  size_t v8 = (void *)*((void *)this + 13);
  if (v8) {
    *((void *)this + 14) = *v8;
  }
  return this;
}

BOOL icu::MessagePattern::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)) {
    return 0LL;
  }
  unsigned int v4 = *(unsigned __int16 *)(a1 + 24);
  if ((v4 & 1) != 0)
  {
    if ((*(_WORD *)(a2 + 24) & 1) == 0) {
      return 0LL;
    }
  }

  else
  {
    if ((v4 & 0x8000) != 0) {
      int v5 = *(_DWORD *)(a1 + 28);
    }
    else {
      int v5 = v4 >> 5;
    }
    BOOL result = 0LL;
    unsigned int v7 = *(unsigned __int16 *)(a2 + 24);
    if ((v7 & 0x8000u) == 0) {
      unsigned int v8 = v7 >> 5;
    }
    else {
      unsigned int v8 = *(_DWORD *)(a2 + 28);
    }
    if ((v7 & 1) != 0) {
      return result;
    }
    if (v5 != v8) {
      return result;
    }
    BOOL result = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 16), (const icu::UnicodeString *)(a2 + 16), v5);
    if (!result) {
      return result;
    }
  }

  unint64_t v9 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v9 != *(_DWORD *)(a2 + 96)) {
    return 0LL;
  }
  uint64_t v10 = **(void **)(a1 + 80);
  uint64_t v11 = **(void **)(a2 + 80);
  BOOL result = icu::MessagePattern::Part::operator==(v10, v11);
  if (result)
  {
    uint64_t v12 = v10 + 16;
    uint64_t v13 = v11 + 16;
    uint64_t v14 = 1LL;
    do
    {
      unint64_t v15 = v14;
      if (v9 == v14) {
        break;
      }
      BOOL v16 = icu::MessagePattern::Part::operator==(v12, v13);
      uint64_t v14 = v15 + 1;
      v12 += 16LL;
      v13 += 16LL;
    }

    while (v16);
    return v15 >= v9;
  }

  return result;
}

uint64_t icu::MessagePattern::hashCode(icu::MessagePattern *this)
{
  int v2 = *((_DWORD *)this + 2);
  int v3 = icu::UnicodeString::doHashCode((icu::MessagePattern *)((char *)this + 16));
  uint64_t v4 = *((unsigned int *)this + 24);
  uint64_t result = (v4 + 37 * (v3 + 37 * v2));
  if ((int)v4 >= 1)
  {
    unint64_t v6 = (unsigned __int16 *)(*((void *)this + 11) + 8LL);
    do
    {
      uint64_t result = (__int16)v6[1]
             + 37 * (result + *v6 + 37 * (*((_DWORD *)v6 - 1) + 37 * *((_DWORD *)v6 - 2)));
      v6 += 8;
      --v4;
    }

    while (v4);
  }

  return result;
}

uint64_t icu::MessagePattern::validateArgumentName(icu::MessagePattern *this, const icu::UnicodeString *a2)
{
  unsigned int v3 = *((unsigned __int16 *)this + 4);
  if ((v3 & 0x11) != 0)
  {
    uint64_t v4 = 0LL;
  }

  else if ((v3 & 2) != 0)
  {
    uint64_t v4 = (unsigned __int16 *)((char *)this + 10);
  }

  else
  {
    uint64_t v4 = (unsigned __int16 *)*((void *)this + 3);
  }

  int v5 = (__int16)v3;
  int v6 = v3 >> 5;
  if (v5 >= 0) {
    int v7 = v6;
  }
  else {
    int v7 = *((_DWORD *)this + 3);
  }
  unsigned int v8 = *((unsigned __int16 *)this + 4);
  int v9 = (__int16)v8;
  int v10 = v8 >> 5;
  if (v9 >= 0) {
    int v11 = v10;
  }
  else {
    int v11 = *((_DWORD *)this + 3);
  }
  return icu::MessagePattern::parseArgNumber((uint64_t)this, 0, v11);
}

uint64_t icu::MessagePattern::parseArgNumber(uint64_t a1, unsigned int a2, int a3)
{
  unsigned int v3 = *(unsigned __int16 *)(a1 + 8);
  if ((v3 & 0x8000u) == 0) {
    unsigned int v4 = v3 >> 5;
  }
  else {
    unsigned int v4 = *(_DWORD *)(a1 + 12);
  }
  if (v4 <= a2) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v5 = a2 + 1;
  uint64_t v6 = a1 + 10;
  if ((v3 & 2) == 0) {
    uint64_t v6 = *(void *)(a1 + 24);
  }
  int v7 = *(unsigned __int16 *)(v6 + 2LL * (int)a2);
  uint64_t result = (v7 - 48);
  if (v7 == 48)
  {
    if (v5 == a3) {
      return result;
    }
    char v9 = 1;
    goto LABEL_15;
  }

  char v9 = 0;
LABEL_15:
  if ((int)v5 < a3)
  {
    int v10 = (unsigned __int16 *)(v6 + 2LL * (int)v5);
    while (v4 > v5)
    {
      int v11 = *v10;
      LODWORD(result) = v11 + 10 * result - 48;
      ++v5;
      ++v10;
      if (a3 == v5) {
        goto LABEL_22;
      }
    }

    return 0xFFFFFFFFLL;
  }

LABEL_22:
  if (v9) {
    return 4294967294LL;
  }
  else {
    return result;
  }
}

    unsigned int v25 = (void *)sub_1807FD518(v11);
    icu::UMemory::operator delete(v25);
    return;
  }

        if (((_WORD)a4[1] & 1) != 0) {
          unsigned int v18 = 2;
        }
        else {
          unsigned int v18 = (_WORD)a4[1] & 0x1F;
        }
        *((_WORD *)a4 + 4) = v18;
        goto LABEL_26;
      }
    }

    else
    {
      unint64_t v15 = v13 >> 5;
      if (v13 >> 5) {
        goto LABEL_17;
      }
    }

    int v24 = 0u;
    unsigned int v25 = 0u;
    int v27 = 0LL;
    int v26 = 0u;
    int v23 = (UChar *)off_18971B688;
    LOWORD(v24) = 2;
    goto LABEL_22;
  }

  return a4;
}

    TypeOrIgnorable = ucase_getTypeOrIgnorable(v7);
    a2 = v5;
    if ((TypeOrIgnorable & 4) == 0) {
      return TypeOrIgnorable != 0;
    }
  }

  return 0LL;
}

    *a7 = 0;
    return result;
  }

    *((_BYTE *)v9 + 161) = v18;
  }

  else
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }

    if (v8 < 1) {
      goto LABEL_31;
    }
    unsigned int v17 = 0LL;
    unsigned int v18 = 1LL;
    unsigned int v19 = v5;
    while (1)
    {
      uint64_t v12 = v19 + 1;
      char v9 = v5[v17];
      if (v9 > 0x20) {
        break;
      }
      if (v9 != 32) {
        int v10 = 64;
      }
      v6[v17] = v9;
      if ((unint64_t)v12 >= v7)
      {
        unsigned int v5 = v19 + 1;
        v6 += v17 + 1;
        goto LABEL_56;
      }

      ++v17;
      --v18;
      ++v19;
      if (v8 + (int)v18 < 2)
      {
        v6 += v17;
        unsigned int v5 = v12;
        goto LABEL_31;
      }
    }

    v6 += v17;
    uint64_t v13 = v8 - v17;
    if ((v9 & 0xFC00) == 0xD800) {
      goto LABEL_33;
    }
    unsigned int v5 = v19 + 1;
  }

  if ((result + 10513) <= 0x5221)
  {
    unsigned int v8 = v13 - 2;
    if (v13 >= 2)
    {
      if ((result & 0x80000000) != 0)
      {
        int v27 = (-64 - (int)result) / 0xF3u;
        unint64_t v30 = (-64 - (int)result) % 0xF3u;
        int v26 = 243 - v30;
        if (v30) {
          LOBYTE(v27) = ~(_BYTE)v27;
        }
        else {
          int v27 = -v27;
        }
        LOBYTE(v27) = v27 + 80;
        if (!v30)
        {
          int v26 = 0u;
          unsigned __int16 *v6 = v27;
          goto LABEL_74;
        }
      }

      else
      {
        int v26 = (__int16)(result - 64) % 243;
        LOWORD(v27) = (__int16)(result - 64) / 243 + 208;
      }

      unsigned __int16 *v6 = v27;
      if (v26 >= 20)
      {
        unsigned int v31 = v26 + 13;
LABEL_75:
        v6[1] = v31;
        v6 += 2;
        goto LABEL_22;
      }

      if (!*(void *)a1) {
        return 0LL;
      }
    }

    *(void *)(a1 + 8) = *(void *)a1;
LABEL_10:
    unsigned int v8 = strlen(v6);
    if (!(_DWORD)v8) {
      goto LABEL_22;
    }
    goto LABEL_11;
  }

  return 0LL;
}

  uint64_t v12 = 65533;
LABEL_23:
  else {
    return -v6;
  }
}

                  NextResource = (const char **)ures_getNextResource((uint64_t)v29, (uint64_t)v27, &v25);
                }

                while (NextResource && v25 < 1);
              }
            }
          }
        }

        sub_18086E18C(v13, 1);
        int v11 = (char *)uenum_next((uint64_t)v9, (uint64_t)&v26, v3);
      }

      while (v11);
    }

    else
    {
      int v24 = 0;
    }

    v33[v24 - 2] = 0;
    sub_18086E18C((uint64_t)v29, 1);
    sub_18086E18C((uint64_t)v27, 1);
    uenum_close(v9);
    return uloc_openKeywordList(&v32, v24 + 1, v3);
  }

  else
  {
    sub_18086E18C((uint64_t)v29, 1);
    sub_18086E18C((uint64_t)v27, 1);
    return 0LL;
  }

  if ((a3 & 0x1001B) == 0x10 && (int)a2 >= 1)
  {
    uint64_t v13 = a2;
    do
    {
      uint64_t v14 = *a1++;
      else {
        unsigned int v4 = (v4 + 1);
      }
      --v13;
    }

    while (v13);
  }

  return v4;
}

    uint64_t result = 0LL;
    uint64_t v12 = 3;
    goto LABEL_23;
  }

  result[2] = v18;
  *((_DWORD *)result + 9) = *(_DWORD *)(v18 + 4 * v16);
  unsigned int v19 = *(_DWORD *)(v18 + 512);
LABEL_27:
  *((_DWORD *)result + 10) = v19;
  if (a4) {
    *a4 = v14;
  }
  return result;
}

  if (*(char *)(a2 + 28) < 0)
  {
    int v23 = *(unsigned int **)(a2 + 32);
    if (v23)
    {
      int v24 = (uint64_t *)v23[2];
      if ((_DWORD)v24)
      {
        int v27 = U_ZERO_ERROR;
        unsigned int v25 = *(icu::UVector32 **)(a1 + 32);
        if (!v25)
        {
          int v26 = (icu::UVector32 *)icu::UMemory::operator new(v24, (icu::UMemory *)0x20, (unint64_t)v23);
          if (!v26)
          {
            *(void *)(a1 + 32) = 0LL;
            return a1;
          }

          unsigned int v25 = icu::UVector32::UVector32(v26, *(_DWORD *)(*(void *)(a2 + 32) + 8LL), &v27);
          *(void *)(a1 + 32) = v25;
          int v23 = *(unsigned int **)(a2 + 32);
        }

        icu::UVector32::assign(v25, (const icu::UVector32 *)v23, &v27);
      }
    }
  }

  return a1;
}

  uint64_t v14 = *(unsigned __int16 *)(a1 + 2LL * (int)v8) >> 9;
  if (v14 == 1) {
    return 1LL;
  }
  unint64_t v15 = a1 + 2LL * (int)v8;
  a3 = *(unsigned __int16 *)(v15 + 2);
  if (v14 != 2) {
    return a3 | (*(unsigned __int16 *)(v15 + 4) << 16);
  }
  return a3;
}

  uint64_t v14 = v14;
  sub_1808B29C4((uint64_t)v24, a6);
  unsigned int v32 = 2LL;
  while (1)
  {
    if (HIBYTE(v23) <= v14 || (int v33 = icu::UCharsTrie::nextForCodePoint(a3, v16), v33 < 2))
    {
      icu::UnicodeString::append(*((void *)this + 47) + 72LL, v16);
      unsigned int v38 = *((void *)this + 47);
      uint64_t v39 = *((void *)a3 + 1);
      if (v39) {
        unsigned int v40 = v39 == *(void *)(v38 + 144);
      }
      else {
        unsigned int v40 = 0;
      }
      if (v40)
      {
        *((void *)a3 + 2) = *(void *)(v38 + 152);
        *((_DWORD *)a3 + 6) = *(_DWORD *)(v38 + 160);
      }

      uint64_t v14 = v23;
      goto LABEL_48;
    }

    int v34 = (unsigned __int16 *)*((void *)a3 + 2);
    int v35 = v34 + 1;
    int v36 = *v34;
    if ((__int16)*v34 < 0)
    {
      int v7 = v36 & 0x7FFF;
      if (v7 >= 0x4000)
      {
        if ((_DWORD)v7 == 0x7FFF)
        {
          int v41 = v34[1] << 16;
          int v35 = v34 + 2;
        }

        else
        {
          int v41 = ((_DWORD)v7 << 16) - 0x40000000;
        }

        int v7 = v41 | *v35;
      }
    }

    else
    {
      int v37 = v36 >> 6;
      if (v37 > 0x100) {
        int v7 = v37 > 0x1FE ? v34[2] | (v34[1] << 16) : (*v35 | ((unsigned __int16)(v37 & 0x1FF) << 16)) - 16842752;
      }
      else {
        int v7 = v37 - 1;
      }
    }

    int32_t v42 = *((void *)this + 47);
    uint64_t v43 = *(__int16 *)(v42 + 80) < 0 ? *(_DWORD *)(v42 + 84) : *(unsigned __int16 *)(v42 + 80) >> 5;
    *(_DWORD *)(v42 + 140) = v43;
    unsigned int v32 = 0LL;
    if ((v33 & 1) == 0) {
      break;
    }
    *(void *)(v42 + 144) = *((void *)a3 + 1);
    *(void *)(v42 + 152) = v34;
    *(_DWORD *)(v42 + 160) = *((_DWORD *)a3 + 6);
LABEL_48:
    __int16 v44 = icu::CollationIterator::nextSkippedCodePoint(this, a7);
    if ((v44 & 0x80000000) == 0)
    {
      BOOL v16 = v44;
      unsigned int v32 = (v32 + 1);
      uint64_t v45 = sub_1807E8B6C(*((void *)v12 + 6), v44);
      int v23 = v45;
      if (v45 > 0xFF) {
        continue;
      }
    }

    break;
  }

  icu::CollationIterator::backwardNumSkipped(this, v32, a7);
  uint64_t v46 = *((void *)this + 47);
  float v47 = *(unsigned __int16 *)(v46 + 16);
  icu::UnicodeString::doReplace( (icu::UnicodeString *)(v46 + 8),  0LL,  *(unsigned int *)(v46 + 136),  (const icu::UnicodeString *)(v46 + 72),  0,  *(unsigned int *)(v46 + 140));
  *(_DWORD *)(v46 + 136) = 0;
  if (v47 <= 0x1F && *(unsigned __int16 *)(*((void *)this + 47) + 16LL) >= 0x20u)
  {
    LODWORD(v48) = -1;
    while (1)
    {
      icu::CollationIterator::appendCEsFromCE32(this, v12, (int)v48, v7, 1, a7);
      uint64_t v49 = *((void *)this + 47);
      uint64_t v50 = *(_DWORD *)(v49 + 136);
      uint64_t v51 = (uint64_t *)*(unsigned __int16 *)(v49 + 16);
      float v52 = *(__int16 *)(v49 + 16) < 0 ? *(_DWORD *)(v49 + 20) : v51 >> 5;
      if (v50 >= v52) {
        break;
      }
      uint64_t v48 = icu::UnicodeString::char32At(v51, (icu::UnicodeString *)(v49 + 8), v50);
      else {
        float v53 = 2;
      }
      *(_DWORD *)(v49 + 136) += v53;
      LODWORD(v7) = (*(uint64_t (**)(icu::CollationIterator *, uint64_t *))(*(void *)this + 112LL))( this,  v48);
      uint64_t v12 = (const icu::CollationData *)*((void *)this + 2);
      if ((_DWORD)v7 == 192)
      {
        uint64_t v12 = (const icu::CollationData *)*((void *)v12 + 4);
        LODWORD(v7) = sub_1808A22C4((uint64_t *)v12, v48);
      }
    }

    else {
      int v54 = *(_WORD *)(v49 + 16) & 0x1F;
    }
    *(_WORD *)(v49 + 16) = v54;
    *(_DWORD *)(v49 + 136) = 0;
    return 1LL;
  }

  return v7;
}

  sub_1808BDD5C(a3, a2, a1, v17, 0LL, 0LL);
  return v18 & 1;
}

          icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v30);
          if (v29 >= 1)
          {
LABEL_23:
            if (v4 >= 1)
            {
              for (unint64_t i = 0LL; i != v4; ++i)
              {
                int v26 = v5[i];
                if (v26)
                {
                  int v27 = *(void **)(v26 - 8);
                  if (v27)
                  {
                    int v28 = (void)v27 << 6;
                    do
                    {
                      icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)(v26 - 64 + v28));
                      v28 -= 64LL;
                    }

                    while (v28);
                  }

                  icu::UMemory::operator delete[]((void *)(v26 - 16));
                }
              }
            }

            uprv_free(v5);
            unsigned int v5 = 0LL;
          }

          (*(void (**)(void *))(*Instance + 8LL))(Instance);
        }

        else
        {
          int v29 = 7;
        }
      }

      this = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
      *(void *)(v1 + 528) = v5;
      *(_DWORD *)(v1 + 536) = v4;
      *(_DWORD *)(v1 + 540) = 5;
    }
  }

  return this;
}

    icu::UnicodeString::UnicodeString(a6, (icu::UnicodeString *)&v45);
    goto LABEL_23;
  }

    if (v14 >= v8)
    {
      for (unint64_t i = 4 * v14; ; i -= 4)
      {
        BOOL v16 = *((_DWORD *)this + 3) + *((_DWORD *)this + 11);
        LODWORD(v17) = v14 - v16;
        if (!*((_BYTE *)this + 64)) {
          break;
        }
        LOBYTE(v17) = *(_BYTE *)(*((void *)this + 6) + v17);
LABEL_31:
        uint64_t result = icu::UnicodeString::append(a2, (char)v17 + 48);
        if (v14-- <= v8) {
          return result;
        }
      }

      if (v17 <= 0xF)
      {
        unsigned int v17 = (*((void *)this + 6) >> (i - 4 * v16)) & 0xFLL;
        goto LABEL_31;
      }

  uint64_t v45 = 0LL;
  memset(v44, 0, sizeof(v44));
  icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v44);
  icu::number::impl::DecimalQuantity::setToDecNumber((uint64_t)v44, (const char *)v46[0], v47, a3);
  if (*(int *)a3 < 1)
  {
    int v35 = *((unsigned __int16 *)a2 + 4);
    int v36 = (__int16)v35;
    int v37 = v35 >> 5;
    if (v36 >= 0) {
      unsigned int v38 = v37;
    }
    else {
      unsigned int v38 = *((_DWORD *)a2 + 3);
    }
    uint64_t v39 = icu::UnicodeString::doIndexOf((uint64_t)a2, 0x2Eu, 0, v38);
    int v29 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v44);
    unsigned int v40 = v29;
    if (v39 == -1)
    {
      unint64_t v30 = this;
      unsigned int v31 = 0;
      FractionalDigits = 0LL;
    }

    else
    {
      if (v10 < 0)
      {
        else {
          int v41 = *((unsigned __int16 *)a2 + 4) >> 5;
        }
      }

      else
      {
        int v41 = v47;
      }

      int32_t v42 = v41 + ~v39;
      FractionalDigits = icu::FixedDecimal::getFractionalDigits((icu::FixedDecimal *)v42, v29);
      unint64_t v30 = this;
      int v29 = v40;
      unsigned int v31 = v42;
    }

    int v33 = v22;
    int v34 = v22;
  }

  else
  {
    int v29 = 0.0;
    unint64_t v30 = this;
    unsigned int v31 = 0;
    FractionalDigits = 0LL;
    int v33 = 0;
    int v34 = 0;
  }

  icu::FixedDecimal::init(v30, v29, v31, FractionalDigits, v33, v34);
  icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v44);
  if (BYTE4(v46[1])) {
    uprv_free(v46[0]);
  }
  return this;
}

  *(_DWORD *)(a1 + 728) = 6;
  unsigned int v19 = (char *)uprv_malloc(0x60uLL);
  *(void *)(a1 + 736) = v19;
  v24[1] = v19;
  unsigned int v25 = 0LL;
  UErrorCode v20 = *(unsigned int *)(a1 + 728);
  v24[0] = &off_18972A5F0;
  LODWORD(v25) = v20;
  if ((int)v20 >= 1)
  {
    int v21 = v19 + 8;
    do
    {
      *int v21 = 0LL;
      *(v21 - 1) = 0xFFFFFFFF00000000LL;
      v21 += 2;
      --v20;
    }

    while (v20);
  }

  ures_getAllItemsWithFallback(v5, "fields/day/relative", (uint64_t)v24, a2);
  ures_close(v5);
  if (*a2 >= 1) {
    *(_DWORD *)(a1 + 728) = 0;
  }
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v24);
  if (v7) {
    ures_close(v7);
  }
}

    if (v24 < v39) {
      goto LABEL_33;
    }
    if ((_DWORD)v12)
    {
      int v27 = 0LL;
      int v28 = v38;
      int v29 = (v28 - v16);
      unint64_t v30 = 1;
      while (v29 != v27)
      {
        unsigned int v31 = v27;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 72LL))(a2, v16 + v27);
        if ((_DWORD)result == *(unsigned __int16 *)(*(void *)(v7 + 88) + 2LL * (int)(v40 + v41) + 2 * v31))
        {
          int v27 = v31 + 1;
          unint64_t v30 = v31 + 1 < v12;
          if (v12 != v31 + 1) {
            continue;
          }
        }

        if (v30) {
          goto LABEL_33;
        }
        BOOL v16 = (v16 + v31 + 1);
        goto LABEL_35;
      }

      goto LABEL_32;
    }

icu::UnicodeString *icu::MessagePattern::autoQuoteApostropheDeep@<X0>( UChar **this@<X0>, icu::UnicodeString *a2@<X8>)
{
  if (!*((_BYTE *)this + 126)) {
    return icu::UnicodeString::UnicodeString(a2, this + 2);
  }
  *((_OWORD *)a2 + 2) = 0u;
  *((_OWORD *)a2 + 3) = 0u;
  *(_OWORD *)a2 = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  uint64_t result = icu::UnicodeString::UnicodeString(a2, this + 2);
  uint64_t v5 = *((unsigned int *)this + 24);
  if ((int)v5 >= 1)
  {
    unint64_t v6 = v5 + 1;
    do
    {
      int v7 = this[11];
      if (*(_DWORD *)&v7[8 * (v6 - 2)] == 3)
      {
        unsigned int v8 = &v7[8 * (v6 - 2)];
        uint64_t v9 = *((unsigned int *)v8 + 1);
        UChar v10 = v8[5];
        uint64_t result = (icu::UnicodeString *)icu::UnicodeString::doReplace((uint64_t)a2, v9, 0LL, (uint64_t)&v10, 0, 1LL);
      }

      --v6;
    }

    while (v6 > 1);
  }

  return result;
}

double icu::MessagePattern::getNumericValue(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a2 == 13) {
    return *(double *)(*(void *)(a1 + 112) + 8LL * *(__int16 *)(a2 + 10));
  }
  if (*(_DWORD *)a2 == 12) {
    return (double)*(__int16 *)(a2 + 10);
  }
  return -123456789.0;
}

double icu::MessagePattern::getPluralOffset(icu::MessagePattern *this, int a2)
{
  uint64_t v2 = *((void *)this + 11);
  int v3 = *(_DWORD *)(v2 + 16LL * a2);
  double result = 0.0;
  if ((v3 & 0xFFFFFFFE) == 0xC)
  {
    if (v3 == 13)
    {
      return *(double *)(*((void *)this + 14) + 8LL * *(__int16 *)(v2 + 16LL * a2 + 10));
    }

    else if (v3 == 12)
    {
      return (double)*(__int16 *)(v2 + 16LL * a2 + 10);
    }

    else
    {
      return -123456789.0;
    }
  }

  return result;
}

BOOL icu::MessagePattern::Part::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
    && *(unsigned __int16 *)(a1 + 8) == *(unsigned __int16 *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 10) == *(unsigned __int16 *)(a2 + 10))
  {
    return *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12);
  }

  return 0LL;
}

uint64_t icu::MessagePattern::addPart(uint64_t a1, int a2, int a3, __int16 a4, __int16 a5, int *a6)
{
  uint64_t result = sub_1807E7648(*(void *)(a1 + 80), *(_DWORD *)(a1 + 96), a6);
  if ((_DWORD)result)
  {
    uint64_t v12 = *(void **)(a1 + 80);
    uint64_t v13 = *(int *)(a1 + 96);
    *(_DWORD *)(a1 + 96) = v13 + 1;
    uint64_t v14 = *v12 + 16 * v13;
    *(_DWORD *)uint64_t v14 = a2;
    *(_DWORD *)(v14 + 4) = a3;
    *(_WORD *)(v14 + 8) = a4;
    *(_WORD *)(v14 + 10) = a5;
    *(_DWORD *)(v14 + 12) = 0;
  }

  return result;
}

uint64_t icu::MessagePattern::parseArg( icu::MessagePattern *this, int a2, int a3, int a4, UParseError *a5, UErrorCode *a6)
{
  uint64_t v12 = *((int *)this + 24);
  icu::MessagePattern::addPart((uint64_t)this, 5, a2, a3, 0, (int *)a6);
  uint64_t result = 0LL;
  if (*(int *)a6 <= 0)
  {
    int v14 = icu::MessagePattern::skipWhiteSpace(this, a3 + a2);
    unsigned int v15 = v14;
    unsigned int v16 = *((unsigned __int16 *)this + 12);
    if ((v16 & 0x8000) != 0) {
      unsigned int v17 = *((_DWORD *)this + 7);
    }
    else {
      unsigned int v17 = v16 >> 5;
    }
    if (v14 == v17) {
      goto LABEL_6;
    }
    int v19 = icu::MessagePattern::skipIdentifier(this, v14);
    unsigned int v20 = icu::MessagePattern::parseArgNumber((uint64_t)this + 16, v15, v19);
    __int16 v21 = v20;
    if ((v20 & 0x80000000) != 0)
    {
      if (v20 != -1) {
        goto LABEL_69;
      }
      __int16 v22 = v19 - v15;
      *((_BYTE *)this + 124) = 1;
      int v23 = this;
      int v24 = 8;
      int v25 = v15;
      __int16 v21 = 0;
    }

    else
    {
      __int16 v22 = v19 - v15;
      *((_BYTE *)this + 125) = 1;
      int v23 = this;
      int v24 = 7;
      int v25 = v15;
    }

    icu::MessagePattern::addPart((uint64_t)v23, v24, v25, v22, v21, (int *)a6);
    unsigned int v26 = icu::MessagePattern::skipWhiteSpace(this, v19);
    int v27 = v26;
    unsigned int v28 = *((unsigned __int16 *)this + 12);
    if ((v28 & 0x8000) != 0)
    {
      unsigned int v29 = *((_DWORD *)this + 7);
      if (v26 != v29)
      {
LABEL_18:
        if (v29 <= v26) {
          goto LABEL_69;
        }
        if ((v28 & 2) != 0) {
          unint64_t v30 = (char *)this + 26;
        }
        else {
          unint64_t v30 = (char *)*((void *)this + 5);
        }
        int v31 = *(unsigned __int16 *)&v30[2 * v26];
        if (v31 != 44)
        {
          if (v31 == 125)
          {
            __int16 v32 = 0;
LABEL_25:
            *(_DWORD *)(**((void **)this + 10) + 16 * v12 + 12) = *((_DWORD *)this + 24);
            icu::MessagePattern::addPart((uint64_t)this, 6, v27, 1, v32, (int *)a6);
            return (v27 + 1);
          }

          goto LABEL_69;
        }

        signed int v33 = icu::MessagePattern::skipWhiteSpace(this, v26 + 1);
        int v34 = 0;
        unint64_t v35 = *((unsigned __int16 *)this + 12);
        int v36 = (char *)this + 26;
        unsigned int v37 = v33;
        uint64_t v38 = v33;
        do
        {
          int v39 = v34;
          if ((v35 & 0x8000) != 0)
          {
            int64_t v40 = *((int *)this + 7);
            if (v38 >= v40) {
              break;
            }
          }

          else
          {
            int64_t v40 = v35 >> 5;
          }

          int v41 = (char *)this + 26;
          if ((v35 & 2) == 0) {
            int v41 = (char *)*((void *)this + 5);
          }
          unsigned int v42 = (*(_WORD *)&v41[2 * v38++] & 0xFFDF) - 91;
          int v34 = v39 + 1;
        }

        while (v42 > 0xFFFFFFE5);
        unsigned int v43 = icu::MessagePattern::skipWhiteSpace(this, v33 + v39);
        int v27 = v43;
        unsigned int v44 = *((unsigned __int16 *)this + 12);
        if ((v44 & 0x8000) != 0) {
          unsigned int v45 = *((_DWORD *)this + 7);
        }
        else {
          unsigned int v45 = v44 >> 5;
        }
        if (v43 == v45) {
          goto LABEL_6;
        }
        if (!v39) {
          goto LABEL_69;
        }
        unsigned int v46 = (v44 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v44 >> 5;
        if (v46 <= v43) {
          goto LABEL_69;
        }
        if ((v44 & 2) == 0) {
          int v36 = (char *)*((void *)this + 5);
        }
        int v47 = *(unsigned __int16 *)&v36[2 * v43];
        if (v47 != 44 && v47 != 125) {
          goto LABEL_69;
        }
        if (v39 >= 0x10000)
        {
LABEL_49:
          icu::MessagePattern::setParseError((char *)this, a5, v15);
          uint64_t result = 0LL;
          UErrorCode v18 = U_INDEX_OUTOFBOUNDS_ERROR;
          goto LABEL_70;
        }

        if (v39 == 13)
        {
          if (icu::MessagePattern::isSelect(this, v37))
          {
            BOOL isOrdinal = icu::MessagePattern::isOrdinal(this, v37 + 6);
            BOOL v49 = !isOrdinal;
            __int16 v50 = 5;
            uint64_t v51 = 5LL;
LABEL_57:
            if (v49) {
              __int16 v50 = 1;
            }
            *(_WORD *)(**((void **)this + 10) + 16 * v12 + 10) = v50;
            if (isOrdinal)
            {
LABEL_68:
              if (v47 != 125)
              {
                __int16 v32 = v51;
                int v27 = icu::MessagePattern::parsePluralOrSelectStyle(this, v51, v27 + 1, a4, a5, (int *)a6);
                goto LABEL_25;
              }

              goto LABEL_69;
            }

LABEL_69:
            icu::MessagePattern::setParseError((char *)this, a5, v15);
            uint64_t result = 0LL;
            UErrorCode v18 = U_PATTERN_SYNTAX_ERROR;
            goto LABEL_70;
          }

          if (icu::MessagePattern::isPlural(this, v37))
          {
            uint64_t v51 = 3LL;
            *(_WORD *)(**((void **)this + 10) + 16 * v12 + 10) = 3;
            goto LABEL_68;
          }

          BOOL isOrdinal = icu::MessagePattern::isSelect(this, v37);
          BOOL v49 = !isOrdinal;
          __int16 v50 = 4;
          uint64_t v51 = 4LL;
          goto LABEL_57;
        }

        *(_WORD *)(**((void **)this + 10) + 16 * v12 + 10) = 1;
        goto LABEL_63;
      }
    }

    else if (v26 != v28 >> 5)
    {
      unsigned int v29 = v28 >> 5;
      goto LABEL_18;
    }

          __int16 v21 = 12;
          goto LABEL_72;
        }

        int v24 = byte_180A25CB0[v23];
      }

      switch((char)v9)
      {
        case -1:
        case 0:
          LOBYTE(v9) = 1;
          ++v11;
          LOWORD(icu::LocaleBuilder::setVariant((uint64_t)this, v7, v8) = v24;
          break;
        case 1:
        case 3:
        case 4:
        case 6:
          LOWORD(icu::LocaleBuilder::setVariant((uint64_t)this, v7, v8) = v24 | ((_WORD)v8 << 6);
          LOBYTE(v9) = v9 + 1;
          goto LABEL_33;
        case 2:
          *v4++ = (v24 >> 2) | (16 * v8);
          if (v6)
          {
            *v6++ = v12;
            uint64_t v12 = v13;
          }

          *UChar v10 = v23;
          LOWORD(icu::LocaleBuilder::setVariant((uint64_t)this, v7, v8) = v24 & 3;
          LOBYTE(v9) = 3;
          goto LABEL_43;
        case 5:
          *v4++ = (v24 >> 4) | (4 * v8);
          if (v6)
          {
            *v6++ = v12;
            uint64_t v12 = v13;
          }

          *UChar v10 = v23;
          LOWORD(icu::LocaleBuilder::setVariant((uint64_t)this, v7, v8) = v24 & 0xF;
          LOBYTE(v9) = 6;
LABEL_43:
          int v11 = 1;
          break;
        case 7:
          *v4++ = v24 | ((_WORD)v8 << 6);
          int v11 = 0;
          LOWORD(icu::LocaleBuilder::setVariant((uint64_t)this, v7, v8) = 0;
          LOBYTE(v9) = 0;
          if (v6)
          {
            *v6++ = v12;
            uint64_t v12 = v13 + 1;
          }

          break;
        default:
LABEL_33:
          ++v11;
          break;
      }

      ++v13;
      ++v3;
      if (!--v22)
      {
        int v3 = v5;
        goto LABEL_51;
      }
    }

        int v27 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_70:
        *a4 = v27;
        goto LABEL_71;
      }

      unsigned int v46 = 0u;
      int v47 = 0u;
      unsigned int v44 = 0u;
      unsigned int v45 = 0u;
      unsigned int v42 = 0u;
      unsigned int v43 = 0u;
      *(_OWORD *)versionString = 0u;
      int v41 = 0u;
      __int16 v32 = u_charFromName(U_EXTENDED_CHAR_NAME, versionString, a4);
      signed int v33 = v32;
      icu::UnicodeSet::clear(this);
      icu::UnicodeSet::add(this, v33);
    }
  }

  if (*a9 <= 0)
  {
    if (!v93[0])
    {
      *a9 = 2;
      goto LABEL_95;
    }

    if (v11 && (unsigned int v44 = strlen(__s), v44 <= strlen(v93)))
    {
      icu::StringPiece::StringPiece((icu::StringPiece *)&v60, v99);
      unsigned int v45 = v74;
      if ((_DWORD)v74 == (_DWORD)v61)
      {
        unsigned int v46 = __s1[0];
        if (!(_DWORD)v61 || !memcmp(__s1[0], v60, (int)v61))
        {
          LODWORD(v74) = 0;
          *unsigned int v46 = 0;
        }

        goto LABEL_95;
      }
    }

    else
    {
LABEL_95:
      unsigned int v45 = v74;
    }

    strcpy(__dst, v93);
    if (v45)
    {
      *(_WORD *)&__dst[strlen(__dst)] = 64;
      strcat(__dst, v26);
      *(_WORD *)&__dst[strlen(__dst)] = 61;
      float v53 = (const char *)__s1[0];
      goto LABEL_98;
    }

    if (!v11)
    {
      *(_WORD *)&__dst[strlen(__dst)] = 64;
      strcat(__dst, v26);
      *(_WORD *)&__dst[strlen(__dst)] = 61;
      float v53 = v99;
LABEL_98:
      strcat(__dst, v53);
    }
  }

    if (v25 == v28) {
      int v25 = 0LL;
    }
    a8 = v28;
    goto LABEL_72;
  }

    if (v45)
    {
      unsigned int v46 = v43 == 106;
      unsigned int v26 = (v26 + 1);
      if (v43 != 106) {
        ++v44;
      }
    }

    else
    {
      unsigned int v46 = 0;
    }

    if ((int)v26 < (int)v16)
    {
      int v47 = *(unsigned __int16 *)(a6 + 2LL * (int)v26);
      if ((v47 & 0xFC00) == 0xD800)
      {
        uint64_t v48 = (int)v26 + 1LL;
        if ((_DWORD)v48 != (_DWORD)v16)
        {
          BOOL v49 = *(unsigned __int16 *)(a6 + 2 * v48);
          if ((v49 & 0xFC00) == 0xDC00) {
            int v47 = (v47 << 10) - 56613888 + v49;
          }
        }
      }

      if (((1 << u_charType(v47)) & 0x1C0) != 0)
      {
LABEL_82:
        UChar v10 = v40;
        unsigned int v26 = v41;
        unsigned int v37 = a1;
        goto LABEL_109;
      }
    }

    if (v44)
    {
      if (a8) {
        icu::Edits::addUnchanged(a8, v44);
      }
      if ((v11 & 0x4000) == 0)
      {
        if ((v40 ^ 0x7FFFFFFF) >= v44)
        {
          int64_t v40 = v44 + v40;
        }

        else
        {
          int64_t v40 = 0xFFFFFFFFLL;
        }
      }
    }

    __int16 v50 = v44 + v41;
    if (v43 == 106)
    {
      unsigned int v37 = a1;
      if ((int)v40 < a5)
      {
        *(_WORD *)(a4 + 2LL * (int)v40) = 74;
        goto LABEL_99;
      }

      if ((_DWORD)v40 == 0x7FFFFFFF) {
        int64_t v40 = 0xFFFFFFFFLL;
      }
      else {
LABEL_99:
      }
        int64_t v40 = (v40 + 1);
      if (a8) {
        icu::Edits::addReplace(a8, 1, 1);
      }
      ++v50;
      if (v46) {
        goto LABEL_103;
      }
LABEL_108:
      UChar v10 = v40;
      goto LABEL_109;
    }

    unsigned int v37 = a1;
    if (!v46) {
      goto LABEL_108;
    }
LABEL_103:
    if (a8) {
      icu::Edits::addUnchanged(a8, v46);
    }
    if ((v11 & 0x4000) != 0) {
      goto LABEL_108;
    }
    if ((v40 ^ 0x7FFFFFFF) >= v46)
    {
      UChar v10 = v40 + v46;
    }

    else
    {
      UChar v10 = 0xFFFFFFFFLL;
    }

        ++v20;
        if (--v36 <= 1) {
          goto LABEL_41;
        }
      }
    }
  }

  LODWORD(v44) = pi;
  if (pi >= v10 || v20 >= v19)
  {
    unsigned int v46 = 0;
    uint64_t v48 = v71;
    goto LABEL_112;
  }

  uint64_t v48 = v71;
  while (1)
  {
    while (1)
    {
      BOOL v49 = (int)v44;
      __int16 v50 = (int)v44 + 1LL;
      punint64_t i = v44 + 1;
      uint64_t v51 = v11[(int)v44];
      float v52 = v51;
      if ((v51 & 0x80000000) == 0)
      {
        *v20++ = v51;
        goto LABEL_106;
      }

      int v60 = v11[v50] ^ 0x80;
      if (v60 > 0x3F) {
        goto LABEL_100;
      }
      uint64_t v57 = ((v52 & 0x1F) << 6) | v60;
      BOOL v58 = 2;
LABEL_97:
      *v20++ = v57;
      LODWORD(v44) = v49 + v58;
      punint64_t i = v49 + v58;
    }

    float v53 = v49 + 2;
    if (v52 <= 0xEF && (int)v53 < v10)
    {
      float v55 = v11[v50] ^ 0x80;
      if (v55 <= 0x3F)
      {
        uint64_t v56 = v11[v53] ^ 0x80;
        if (v56 <= 0x3F)
        {
          uint64_t v57 = ((_WORD)v55 << 6) | ((_WORD)v52 << 12) | v56;
          BOOL v58 = 3;
          goto LABEL_97;
        }
      }
    }

        if (v101) {
          (*(void (**)(void *))(*(void *)v101 + 8LL))(v101);
        }
        uint64_t v101 = v28;
        if (!v28) {
          *a2 = U_MEMORY_ALLOCATION_ERROR;
        }
LABEL_73:
        int v41 = v101;
        uint64_t v101 = 0LL;
        icu::UVector::adoptElement((icu::UVector *)v9, v41, a2);
        __int16 v22 = *(unsigned int *)a2;
        unsigned int v42 = *(unsigned __int16 *)(v20 + 8);
        if (*(__int16 *)(v20 + 8) < 0)
        {
          if (*(_DWORD *)(v20 + 12) != 1) {
            goto LABEL_85;
          }
        }

        else if ((v42 & 0xFFE0) != 0x20)
        {
          goto LABEL_84;
        }

        if ((v42 & 2) != 0) {
          unsigned int v43 = (unsigned __int16 *)(v20 + 10);
        }
        else {
          unsigned int v43 = *(unsigned __int16 **)(v20 + 24);
        }
        unsigned int v44 = *v43;
        if ((v44 - 65) <= 0x19)
        {
          *((void *)v113 + (v44 - 65)) = icu::UVector::elementAt((icu::UVector *)v9, v9[2] - 1);
          goto LABEL_99;
        }

        if ((v42 & 0x8000) == 0)
        {
LABEL_84:
          unsigned int v45 = v42 >> 5;
          goto LABEL_86;
        }

  icu::UnicodeString::~UnicodeString((void *)v30, (icu::UnicodeString *)v66);
LABEL_70:
  if (v16 == 192)
  {
    int v36 = *(uint64_t **)(v7 + 16);
    unsigned int v37 = sub_1808A22C4(v36, v12);
    FinalCE32 = icu::CollationData::getFinalCE32((icu::CollationData *)v36, v37);
    int v39 = (FinalCE32 & 0xCE) == 0xC8 || v13;
    if (v39 != 1) {
      goto LABEL_82;
    }
    unsigned int v16 = icu::CollationDataBuilder::copyFromBaseCE32((icu::CollationDataBuilder *)v7, v12, FinalCE32, 1u, a5);
    this = utrie2_set32(*(void *)(v7 + 32), v12, v16, (int *)a5);
  }

  int64_t v40 = v16 & 0xCF;
  if (!v13)
  {
    if (v40 == 199)
    {
      this = icu::UVector::elementAt((icu::UVector *)(v7 + 104), v16 >> 13);
      *(_DWORD *)(this + 80) = 1;
      *(_DWORD *)(this + 72) = a4;
LABEL_115:
      *(_BYTE *)(v7 + 616) = 1;
      return this;
    }

  if (v13) {
    ures_close(v13);
  }
  if (v12) {
    ures_close(v12);
  }
}

      int v34 = v13 + v5;
    }

    *a5 = v34;
  }

  return v10;
}

      abort();
    }
  }

  UErrorCode v18 = (uint64_t *)(a3 - 5);
  if (v18 > 1)
  {
    if (a3 == 1 || a3 == 7)
    {
      __int16 v22 = a2 == 0;
      int v23 = 32;
      int v24 = 16;
    }

    else
    {
      if (a3 != 2) {
        goto LABEL_69;
      }
      __int16 v22 = a2 == 0;
      int v23 = 4;
      int v24 = 2;
    }

    if (v22) {
      int v27 = v24;
    }
    else {
      int v27 = v23;
    }
    uint64_t Instance = (UChar **)icu::TimeZoneNames::createInstance((icu::TimeZoneNames *)a4, (const icu::Locale *)&v39, v10);
    if (v39 > U_ZERO_ERROR) {
      goto LABEL_4;
    }
    memset(v40, 0, sizeof(v40));
    CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID(a1, v28);
    icu::UnicodeString::UnicodeString((uint64_t)v40, (uint64_t)CanonicalCLDRID);
    (*((void (**)(UChar **, _OWORD *, uint64_t, uint64_t, double))*Instance + 12))(Instance, v40, v27, a5, v12);
    unint64_t v30 = (uint64_t *)*(unsigned __int16 *)(a5 + 8);
    if (v30 <= 0x1F)
    {
      int v31 = (UChar **)icu::TimeZoneFormat::createInstance(a4, &v39, v30);
      if (a2 && (*(unsigned int (**)(icu::Calendar *))(*(void *)a1 + 72LL))(a1))
      {
        __int16 v32 = (*(uint64_t (**)(icu::Calendar *))(*(void *)a1 + 64LL))(a1);
        signed int v33 = (*(uint64_t (**)(icu::Calendar *))(*(void *)a1 + 104LL))(a1) + v32;
      }

      else
      {
        signed int v33 = (*(uint64_t (**)(icu::Calendar *))(*(void *)a1 + 64LL))(a1);
      }

      if (a3 == 2) {
        icu::TimeZoneFormat::formatOffsetLocalizedGMT(v31, v33, (UChar **)a5, &v39);
      }
      else {
        icu::TimeZoneFormat::formatOffsetShortLocalizedGMT(v31, v33, (UChar **)a5, &v39);
      }
      if (v31) {
        (*((void (**)(UChar **))*v31 + 1))(v31);
      }
    }

    icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)v40);
    goto LABEL_62;
  }

  int v19 = icu::TimeZoneFormat::createInstance(a4, &v39, v18);
  unsigned int v20 = v39;
  if (v39 < U_ILLEGAL_ARGUMENT_ERROR)
  {
    if (a2 && (*(unsigned int (**)(icu::Calendar *))(*(void *)a1 + 72LL))(a1))
    {
      int v34 = (*(uint64_t (**)(icu::Calendar *))(*(void *)a1 + 64LL))(a1);
      unint64_t v35 = (*(uint64_t (**)(icu::Calendar *))(*(void *)a1 + 104LL))(a1) + v34;
    }

    else
    {
      unint64_t v35 = (*(uint64_t (**)(icu::Calendar *))(*(void *)a1 + 64LL))(a1);
    }

    if (a3 == 5)
    {
      icu::TimeZoneFormat::formatOffsetISO8601Basic(v19, v35, 0, 0, 0, (icu::UnicodeString *)a5, &v39);
    }

    else
    {
      if (a3 != 6) {
        goto LABEL_69;
      }
      icu::TimeZoneFormat::formatOffsetLocalizedGMT((UChar **)v19, v35, (UChar **)a5, &v39);
    }
  }

  else
  {
    if ((*(_WORD *)(a5 + 8) & 1) != 0) {
      __int16 v21 = 2;
    }
    else {
      __int16 v21 = *(_WORD *)(a5 + 8) & 0x1F;
    }
    *(_WORD *)(a5 + 8) = v21;
  }

  if (v19) {
    (*(void (**)(icu::TimeZoneFormat *))(*(void *)v19 + 8LL))(v19);
  }
  if (v20 <= U_ZERO_ERROR) {
    goto LABEL_63;
  }
  return a5;
}

uint64_t icu::MessagePattern::addLimitPart( uint64_t a1, int a2, int a3, int a4, __int16 a5, __int16 a6, int *a7)
{
  *(_DWORD *)(**(void **)(a1 + 80) + 16LL * a2 + 12) = *(_DWORD *)(a1 + 96);
  return icu::MessagePattern::addPart(a1, a3, a4, a5, a6, a7);
}

BOOL icu::MessagePattern::inTopLevelChoiceMessage(uint64_t a1, int a2, int a3)
{
  BOOL result = 0LL;
  if (a2 == 1 && a3 == 2) {
    return ***(_DWORD ***)(a1 + 80) != 0;
  }
  return result;
}

char *icu::MessagePattern::setParseError(char *this, UParseError *a2, int32_t a3)
{
  if (a2)
  {
    uint64_t v5 = this;
    a2->offset = a3;
    int v6 = a3;
    if (a3 >= 16)
    {
      unsigned int v7 = a3 - 15;
      unsigned int v8 = *((unsigned __int16 *)this + 12);
      else {
        unsigned int v9 = v8 >> 5;
      }
      if (v9 <= v7)
      {
        int v6 = 15;
      }

      else
      {
        if ((v8 & 2) != 0) {
          UChar v10 = this + 26;
        }
        else {
          UChar v10 = (char *)*((void *)this + 5);
        }
        if ((*(_WORD *)&v10[2 * v7] & 0xFC00) == 0xDC00) {
          int v6 = 14;
        }
        else {
          int v6 = 15;
        }
      }
    }

    icu::UnicodeString::doExtract(this + 16, a3 - v6, v6, (uint64_t)a2->preContext, 0);
    a2->preContext[v6] = 0;
    unsigned int v11 = *((unsigned __int16 *)v5 + 12);
    if (*((__int16 *)v5 + 12) < 0)
    {
      unsigned int v12 = *((_DWORD *)v5 + 7);
      int v13 = v12 - a3;
      if ((int)(v12 - a3) <= 15)
      {
LABEL_26:
        postContext = a2->postContext;
        this = icu::UnicodeString::doExtract(v5 + 16, a3, v13, (uint64_t)postContext, 0);
        postContext[v13] = 0;
        return this;
      }
    }

    else
    {
      unsigned int v12 = v11 >> 5;
      int v13 = (v11 >> 5) - a3;
      if (v13 < 16) {
        goto LABEL_26;
      }
    }

    if (v12 <= a3 + 14)
    {
      int v13 = 15;
    }

    else
    {
      if ((v11 & 2) != 0) {
        int v14 = v5 + 26;
      }
      else {
        int v14 = (char *)*((void *)v5 + 5);
      }
      if ((*(_WORD *)&v14[2 * a3 + 28] & 0xFC00) == 0xD800) {
        int v13 = 14;
      }
      else {
        int v13 = 15;
      }
    }

    goto LABEL_26;
  }

  return this;
}

unint64_t icu::MessagePattern::skipWhiteSpace(icu::MessagePattern *this, int a2)
{
  unsigned int v2 = *((unsigned __int16 *)this + 12);
  if ((v2 & 0x11) == 0)
  {
    if ((v2 & 2) != 0)
    {
      int v3 = (char *)this + 26;
      if ((v2 & 0x8000) == 0) {
        goto LABEL_6;
      }
    }

    else
    {
      int v3 = (char *)*((void *)this + 5);
      if ((v2 & 0x8000) == 0) {
        goto LABEL_6;
      }
    }

unint64_t icu::MessagePattern::skipIdentifier(icu::MessagePattern *this, int a2)
{
  unsigned int v2 = *((unsigned __int16 *)this + 12);
  if ((v2 & 0x11) == 0)
  {
    if ((v2 & 2) != 0)
    {
      int v3 = (char *)this + 26;
      if ((v2 & 0x8000) == 0) {
        goto LABEL_6;
      }
    }

    else
    {
      int v3 = (char *)*((void *)this + 5);
      if ((v2 & 0x8000) == 0) {
        goto LABEL_6;
      }
    }

BOOL icu::MessagePattern::isArgTypeChar(icu::MessagePattern *this)
{
  return (this & 0xFFFFFFDF) - 65 < 0x1A;
}

BOOL icu::MessagePattern::isChoice(icu::MessagePattern *this, unsigned int a2)
{
  unsigned int v2 = *((unsigned __int16 *)this + 12);
  else {
    unsigned int v3 = v2 >> 5;
  }
  if (v3 <= a2) {
    return 0LL;
  }
  unsigned int v4 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((void *)this + 5);
  uint64_t v5 = (int)a2 + 1LL;
  unsigned int v6 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  unsigned int v7 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((void *)this + 5);
  if ((*((_WORD *)v7 + v5) & 0xFFDF) != 0x48) {
    return 0LL;
  }
  uint64_t v8 = (int)a2 + 2LL;
  unsigned int v9 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  UChar v10 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((void *)this + 5);
  if ((*((_WORD *)v10 + v8) & 0xFFDF) != 0x4F) {
    return 0LL;
  }
  uint64_t v11 = (int)a2 + 3LL;
  unsigned int v12 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  int v13 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((void *)this + 5);
  if ((*((_WORD *)v13 + v11) & 0xFFDF) != 0x49) {
    return 0LL;
  }
  uint64_t v14 = (int)a2 + 4LL;
  unsigned int v15 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  unsigned int v16 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((void *)this + 5);
  if ((*((_WORD *)v16 + v14) & 0xFFDF) != 0x43) {
    return 0LL;
  }
  uint64_t v17 = (int)a2 + 5LL;
  unsigned int v18 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  if ((v2 & 2) != 0) {
    int v19 = (char *)this + 26;
  }
  else {
    int v19 = (char *)*((void *)this + 5);
  }
  return (*(_WORD *)&v19[2 * v17] & 0xFFDF) == 69;
}

BOOL icu::MessagePattern::isPlural(icu::MessagePattern *this, unsigned int a2)
{
  unsigned int v2 = *((unsigned __int16 *)this + 12);
  else {
    unsigned int v3 = v2 >> 5;
  }
  if (v3 <= a2) {
    return 0LL;
  }
  unsigned int v4 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((void *)this + 5);
  uint64_t v5 = (int)a2 + 1LL;
  unsigned int v6 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  unsigned int v7 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((void *)this + 5);
  if ((*((_WORD *)v7 + v5) & 0xFFDF) != 0x4C) {
    return 0LL;
  }
  uint64_t v8 = (int)a2 + 2LL;
  unsigned int v9 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  UChar v10 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((void *)this + 5);
  if ((*((_WORD *)v10 + v8) & 0xFFDF) != 0x55) {
    return 0LL;
  }
  uint64_t v11 = (int)a2 + 3LL;
  unsigned int v12 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  int v13 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((void *)this + 5);
  if ((*((_WORD *)v13 + v11) & 0xFFDF) != 0x52) {
    return 0LL;
  }
  uint64_t v14 = (int)a2 + 4LL;
  unsigned int v15 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  unsigned int v16 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((void *)this + 5);
  if ((*((_WORD *)v16 + v14) & 0xFFDF) != 0x41) {
    return 0LL;
  }
  uint64_t v17 = (int)a2 + 5LL;
  unsigned int v18 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  if ((v2 & 2) != 0) {
    int v19 = (char *)this + 26;
  }
  else {
    int v19 = (char *)*((void *)this + 5);
  }
  return (*(_WORD *)&v19[2 * v17] & 0xFFDF) == 76;
}

BOOL icu::MessagePattern::isSelect(icu::MessagePattern *this, unsigned int a2)
{
  unsigned int v2 = *((unsigned __int16 *)this + 12);
  else {
    unsigned int v3 = v2 >> 5;
  }
  if (v3 <= a2) {
    return 0LL;
  }
  unsigned int v4 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((void *)this + 5);
  uint64_t v5 = (int)a2 + 1LL;
  unsigned int v6 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  unsigned int v7 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((void *)this + 5);
  if ((*((_WORD *)v7 + v5) & 0xFFDF) != 0x45) {
    return 0LL;
  }
  uint64_t v8 = (int)a2 + 2LL;
  unsigned int v9 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  UChar v10 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((void *)this + 5);
  if ((*((_WORD *)v10 + v8) & 0xFFDF) != 0x4C) {
    return 0LL;
  }
  uint64_t v11 = (int)a2 + 3LL;
  unsigned int v12 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  int v13 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((void *)this + 5);
  if ((*((_WORD *)v13 + v11) & 0xFFDF) != 0x45) {
    return 0LL;
  }
  uint64_t v14 = (int)a2 + 4LL;
  unsigned int v15 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  unsigned int v16 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((void *)this + 5);
  if ((*((_WORD *)v16 + v14) & 0xFFDF) != 0x43) {
    return 0LL;
  }
  uint64_t v17 = (int)a2 + 5LL;
  unsigned int v18 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  if ((v2 & 2) != 0) {
    int v19 = (char *)this + 26;
  }
  else {
    int v19 = (char *)*((void *)this + 5);
  }
  return (*(_WORD *)&v19[2 * v17] & 0xFFDF) == 84;
}

BOOL icu::MessagePattern::isOrdinal(icu::MessagePattern *this, unsigned int a2)
{
  unsigned int v2 = *((unsigned __int16 *)this + 12);
  else {
    unsigned int v3 = v2 >> 5;
  }
  if (v3 <= a2) {
    return 0LL;
  }
  unsigned int v4 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((void *)this + 5);
  uint64_t v5 = (int)a2 + 1LL;
  unsigned int v6 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  unsigned int v7 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((void *)this + 5);
  if ((*((_WORD *)v7 + v5) & 0xFFDF) != 0x52) {
    return 0LL;
  }
  uint64_t v8 = (int)a2 + 2LL;
  unsigned int v9 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  UChar v10 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((void *)this + 5);
  if ((*((_WORD *)v10 + v8) & 0xFFDF) != 0x44) {
    return 0LL;
  }
  uint64_t v11 = (int)a2 + 3LL;
  unsigned int v12 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  int v13 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((void *)this + 5);
  if ((*((_WORD *)v13 + v11) & 0xFFDF) != 0x49) {
    return 0LL;
  }
  uint64_t v14 = (int)a2 + 4LL;
  unsigned int v15 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  unsigned int v16 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((void *)this + 5);
  if ((*((_WORD *)v16 + v14) & 0xFFDF) != 0x4E) {
    return 0LL;
  }
  uint64_t v17 = (int)a2 + 5LL;
  unsigned int v18 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  int v19 = (v2 & 2) != 0 ? (icu::MessagePattern *)((char *)this + 26) : (icu::MessagePattern *)*((void *)this + 5);
  if ((*((_WORD *)v19 + v17) & 0xFFDF) != 0x41) {
    return 0LL;
  }
  uint64_t v20 = (int)a2 + 6LL;
  unsigned int v21 = (v2 & 0x8000) != 0 ? *((_DWORD *)this + 7) : v2 >> 5;
  if ((v2 & 2) != 0) {
    __int16 v22 = (char *)this + 26;
  }
  else {
    __int16 v22 = (char *)*((void *)this + 5);
  }
  return (*(_WORD *)&v22[2 * v20] & 0xFFDF) == 76;
}

uint64_t icu::MessagePattern::parseSimpleStyle( icu::MessagePattern *this, uint64_t a2, UParseError *a3, UErrorCode *a4)
{
  int32_t v7 = a2;
  int v9 = 0;
  UChar v10 = (char *)this + 16;
  uint64_t v11 = (char *)this + 26;
  uint64_t v12 = a2;
  do
  {
    while (1)
    {
      while (1)
      {
        do
        {
          uint64_t v4 = v12;
          unsigned int v13 = *((unsigned __int16 *)this + 12);
          if (*((__int16 *)this + 12) < 0)
          {
            int v14 = *((_DWORD *)this + 7);
            if ((int)v12 >= v14)
            {
LABEL_31:
              icu::MessagePattern::setParseError((char *)this, a3, 0);
              uint64_t v4 = 0LL;
              UErrorCode v21 = U_UNMATCHED_BRACES;
LABEL_32:
              *a4 = v21;
              return v4;
            }
          }

          else
          {
            int v14 = v13 >> 5;
          }

          uint64_t v12 = (v12 + 1);
        }

        while (v14 <= v4);
        unsigned int v15 = v11;
        if ((v13 & 2) == 0) {
          unsigned int v15 = (char *)*((void *)this + 5);
        }
        int v16 = *(unsigned __int16 *)&v15[2 * (int)v4];
        if (v16 != 39) {
          break;
        }
        if ((int)v4 >= -1)
        {
          if ((v13 & 0x8000) != 0)
          {
            int v19 = *((_DWORD *)this + 7);
            else {
              int v18 = *((_DWORD *)this + 7);
            }
          }

          else
          {
            int v19 = v13 >> 5;
            else {
              int v18 = v19;
            }
          }
        }

        else
        {
          int v18 = 0;
          if ((v13 & 0x8000) != 0) {
            int v19 = *((_DWORD *)this + 7);
          }
          else {
            int v19 = v13 >> 5;
          }
        }

        int v20 = icu::UnicodeString::doIndexOf((uint64_t)v10, 0x27u, v18, v19 - v18);
        if (v20 < 0)
        {
          icu::MessagePattern::setParseError((char *)this, a3, v7);
          uint64_t v4 = 0LL;
          UErrorCode v21 = U_PATTERN_SYNTAX_ERROR;
          goto LABEL_32;
        }

        uint64_t v12 = (v20 + 1);
      }

      if (v16 != 123) {
        break;
      }
      int v17 = 1;
LABEL_30:
      v9 += v17;
    }
  }

  while (v16 != 125);
  if (v9 > 0)
  {
    int v17 = -1;
    goto LABEL_30;
  }

  if ((int)v4 - v7 >= 0x10000)
  {
    icu::MessagePattern::setParseError((char *)this, a3, v7);
    uint64_t v4 = 0LL;
    UErrorCode v21 = U_INDEX_OUTOFBOUNDS_ERROR;
    goto LABEL_32;
  }

  icu::MessagePattern::addPart((uint64_t)this, 10, v7, v4 - v7, 0, (int *)a4);
  return v4;
}

uint64_t icu::MessagePattern::skipDouble(icu::MessagePattern *this, uint64_t a2)
{
  unsigned int v2 = *((unsigned __int16 *)this + 12);
  else {
    uint64_t v3 = v2 >> 5;
  }
  if ((int)v3 > (int)a2)
  {
    uint64_t v4 = 2LL * (int)a2;
    a2 = (int)a2;
    while (1)
    {
      unsigned int v5 = v2 >> 5;
      if ((v2 & 0x8000) != 0) {
        unsigned int v5 = *((_DWORD *)this + 7);
      }
      unsigned int v6 = (char *)this + 26;
      if ((v2 & 2) == 0) {
        unsigned int v6 = (char *)*((void *)this + 5);
      }
      unsigned __int16 v7 = *(_WORD *)&v6[v4];
      unsigned int v8 = v7;
      if (v7 > 0x2Fu)
      {
        if (v7 >= 0x3Au)
        {
          BOOL v11 = v7 == 69 || v7 == 8734;
          if (!v11 && v7 != 101) {
            return a2;
          }
        }
      }

      else
      {
        uint64_t v9 = (1LL << v7) & 0x680000000000LL;
        if (v8 > 0x2E || v9 == 0) {
          return a2;
        }
      }

      ++a2;
      v4 += 2LL;
      if ((_DWORD)v3 == (_DWORD)a2) {
        return v3;
      }
    }
  }

  return a2;
}

char *icu::MessagePattern::parseDouble( char *this, unint64_t a2, int a3, int a4, UParseError *a5, UErrorCode *a6)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  __int16 v8 = a3;
  UChar v10 = this;
  unsigned int v11 = *((unsigned __int16 *)this + 12);
  else {
    unsigned int v12 = v11 >> 5;
  }
  uint64_t v13 = (int)a2 + 1LL;
  if ((v11 & 2) != 0) {
    int v14 = this + 26;
  }
  else {
    int v14 = (char *)*((void *)this + 5);
  }
  int v15 = *(unsigned __int16 *)&v14[2 * (int)a2];
  if (v15 == 43)
  {
    if ((_DWORD)v13 != a3)
    {
      if ((v11 & 0x8000) != 0) {
        unsigned int v17 = *((_DWORD *)this + 7);
      }
      else {
        unsigned int v17 = v11 >> 5;
      }
      int v18 = 0;
      if ((v11 & 2) != 0) {
        int v20 = this + 26;
      }
      else {
        int v20 = (char *)*((void *)this + 5);
      }
      int v19 = 0x7FFF;
      goto LABEL_30;
    }

LABEL_47:
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    uint64_t v26 = a3 - (uint64_t)(int)a2;
    *(_OWORD *)__s = 0u;
    __int128 v31 = 0u;
    if ((int)v26 <= 127)
    {
      icu::UnicodeString::extract((uint64_t)(this + 16), a2, a3 - (uint64_t)(int)a2, __s, 128);
      if ((int)v26 <= (int)strlen(__s))
      {
        unsigned int v29 = 0LL;
        double v27 = strtod(__s, &v29);
        if (v29 == &__s[v26]) {
          return (char *)icu::MessagePattern::addArgDoublePart((uint64_t)v10, v27, a2, v26, a6);
        }
      }
    }

    goto LABEL_50;
  }

  if (!a4 || (_DWORD)v13 != a3) {
    goto LABEL_50;
  }
  double Infinity = uprv_getInfinity();
  if (v18) {
    double Infinity = -Infinity;
  }
  return (char *)icu::MessagePattern::addArgDoublePart((uint64_t)v10, Infinity, a2, v8 - (unsigned __int16)a2, a6);
}

  if (v23 == 17) {
    __int128 v36 = a4 + 1;
  }
  else {
    __int128 v36 = 0;
  }
  uint64_t v90 = -1;
  int v92 = 0;
  sub_180813A00((void *)a1, v89, a4, v7, a2);
  unsigned __int16 v7 = a2;
  __int128 v35 = a2;
LABEL_51:
  int v80 = a3;
  __int128 v37 = 0;
  if ((int)v7 <= (int)a3)
  {
    int v83 = a3 - 1;
    int v54 = (int)a3;
    float v55 = a3 + 1;
    uint64_t v56 = v7;
    uint64_t v57 = v17;
    uint64_t v79 = -1;
    BOOL v58 = 1LL;
    int v59 = v7;
    uint64_t v38 = (uint64_t)v88;
    int v39 = v86;
    uint64_t v82 = v54;
    UErrorCode v81 = v55;
    while (1)
    {
      if (v57 < v54)
      {
        int v60 = *(unsigned __int8 *)(v39 + v57);
        if (v60 == 7) {
          *(_DWORD *)(v38 + 340) = -1;
        }
        if (v84)
        {
          if (v60 == 13)
          {
            int v60 = 1u;
          }

          else if (v60 == 2)
          {
            if (v57 < v79)
            {
LABEL_101:
              else {
                int v60 = 2;
              }
            }

            else
            {
              int v61 = 0LL;
              while (v57 + v61 + 1 < v54)
              {
                BOOL v58 = *(unsigned __int8 *)(v39 + v57 + v61++ + 1);
                if (v58 <= 0xD && ((1 << v58) & 0x2003) != 0)
                {
                  uint64_t v79 = v56 + v61;
                  goto LABEL_101;
                }
              }

              int v60 = 2u;
              BOOL v58 = 1LL;
              uint64_t v79 = v80;
            }
          }
        }

        uint64_t v65 = *((unsigned __int8 *)&unk_1809F2FFE + v60);
        goto LABEL_122;
      }

      LODWORD(v63) = v83;
LABEL_116:
      if ((_DWORD)v63 == (_DWORD)v7) {
        __int128 v37 = *(_BYTE *)(v39 + v17);
      }
      uint64_t v65 = a5;
      if ((v37 & 0xFE) == 0x14) {
        goto LABEL_53;
      }
LABEL_122:
      uint64_t v66 = byte_1809F3017[16 * v36 + v65];
      uint64_t v67 = v66 >> 5;
      if (v66 < 0x20 && v57 == v54) {
        uint64_t v67 = 1;
      }
      if (v67)
      {
        __int128 v69 = byte_1809F3017[16 * v36 + 15];
        int v70 = v57;
        switch(v67)
        {
          case 1:
            uint64_t v71 = (void *)v38;
            int v72 = v58;
            uint64_t v73 = v35;
            goto LABEL_132;
          case 2:
            goto LABEL_134;
          case 3:
            int v72 = v58;
            sub_180813A00((void *)v38, v89, v69, v35, v59);
            uint64_t v71 = v88;
            __int128 v69 = 4;
            uint64_t v73 = v59;
LABEL_132:
            sub_180813A00(v71, v89, v69, v73, v57);
            BOOL v58 = v72;
            float v55 = v81;
            int v54 = v82;
            int v39 = v86;
            LODWORD(v7) = a2;
            uint64_t v38 = (uint64_t)v88;
            __int128 v35 = v57;
            break;
          case 4:
            uint64_t v74 = v58;
            sub_180813A00((void *)v38, v89, v69, v35, v59);
            BOOL v58 = v74;
            float v55 = v81;
            int v54 = v82;
            int v39 = v86;
            LODWORD(v7) = a2;
            uint64_t v38 = (uint64_t)v88;
            __int128 v35 = v59;
            int v70 = v57;
            goto LABEL_134;
          default:
            abort();
        }
      }

      int v70 = v59;
LABEL_134:
      __int128 v36 = v66 & 0x1F;
      ++v57;
      ++v56;
      int v59 = v70;
      if (v55 == (_DWORD)v57) {
        goto LABEL_53;
      }
    }

    int v63 = v83;
    while (1)
    {
      __int128 v37 = *(_BYTE *)(v39 + v63);
      if (((0x5D800uLL >> v37) & 1) == 0) {
        goto LABEL_116;
      }
      if (v9)
      {
        uint64_t v64 = *(unsigned __int16 *)(v9 + 2 * v63);
        if (*(_WORD *)(v9 + 2 * v63))
        {
          while (1)
          {
            __int128 v37 = byte_1809F2DB6[v64 & 0xF];
            if (((0x5D800uLL >> v37) & 1) == 0) {
              goto LABEL_114;
            }
            float v53 = v64 > 0xF;
            v64 >>= 4;
            if (!v53)
            {
              uint64_t v64 = 0;
              goto LABEL_114;
            }
          }
        }
      }

      else
      {
        uint64_t v64 = 0;
      }

      __int128 v37 = 10;
LABEL_114:
      --v63;
      if (v64 || v63 <= v17) {
        goto LABEL_116;
      }
    }
  }

  uint64_t v38 = (uint64_t)v88;
  int v39 = v86;
  if (*(_DWORD *)(v38 + 20) != (_DWORD)v80) {
    goto LABEL_72;
  }
  int64_t v40 = *(_DWORD *)(v38 + 184);
  if (v40 < 1) {
    goto LABEL_72;
  }
LABEL_53:
  int v41 = 0;
  unsigned int v42 = *(void *)(v38 + 176);
  unsigned int v43 = v35;
  while (2)
  {
    if (v41 < v40)
    {
      unsigned int v44 = v41 + 1LL;
      unsigned int v45 = *(unsigned __int16 *)(v42 + 2LL * v41);
      if ((v45 & 0xFC00) != 0xD800 || (_DWORD)v44 == v40)
      {
        ++v41;
      }

      else
      {
        int v47 = *(unsigned __int16 *)(v42 + 2 * v44);
        uint64_t v48 = (v47 & 0xFC00) == 56320;
        BOOL v49 = ((_DWORD)v45 << 10) - 56613888 + v47;
        if (v48) {
          v41 += 2;
        }
        else {
          ++v41;
        }
        if (v48) {
          unsigned int v45 = v49;
        }
        else {
          unsigned int v45 = v45;
        }
      }

      BOOL result = ubidi_getCustomizedClass(v38, v45);
      LODWORD(v7) = a2;
      uint64_t v38 = (uint64_t)v88;
      int v39 = v86;
      LODWORD(v35) = v43;
      switch((char)result)
      {
        case 0:
        case 2:
          break;
        case 1:
          goto LABEL_71;
        case 3:
        case 4:
          continue;
        case 5:
          BOOL result = 3LL;
          goto LABEL_73;
        default:
          LODWORD(v7) = a2;
          uint64_t v38 = (uint64_t)v88;
          int v39 = v86;
          LODWORD(v35) = v43;
LABEL_71:
          BOOL result = 1LL;
          break;
      }
    }

    else
    {
LABEL_72:
      BOOL result = a5;
    }

    break;
  }

  uint64_t v9 = v12;
  __int128 v31 = v12;
  __int128 v32 = v17;
  __int128 v33 = sub_180849284(v19, v21, v13, v10, v31, v17, (uint64_t)v40, (int *)status);
  unsigned int v16 = *status;
  if (*status != U_BUFFER_OVERFLOW_ERROR)
  {
    unsigned int v17 = v32;
    unsigned int v12 = v9;
    LODWORD(v9) = v39;
    goto LABEL_52;
  }

  *status = U_ZERO_ERROR;
  int v18 = (v33 + v18);
  if ((v30 & 1) != 0)
  {
    unsigned int v16 = U_ZERO_ERROR;
    __int128 v34 = v33 & (v33 >> 31);
    UChar v10 = -v33 & (v33 >> 31);
    int v19 = v22;
    unsigned int v17 = v32;
    unsigned int v12 = v9;
    LODWORD(v9) = v39;
    goto LABEL_61;
  }

  __int128 v35 = v38;
  __int128 v36 = (uint64_t)v37;
  unsigned int v17 = v32;
LABEL_69:
  usprep_close(v17);
  return u_terminateUChars(v36, v35, v18, (int *)status);
}

            DefaultConverter = (UConverter *)u_getDefaultConverter(&v30);
            UChar v10 = icu::UnicodeString::doExtract(this, v8, v7, cs, v17, DefaultConverter, &v30);
            u_releaseDefaultConverter(DefaultConverter);
            return v10;
          }

      __int16 v8 = (unsigned __int16)a1[(int)v12];
      uint64_t v9 = v12;
    }
  }

  LODWORD(icu::LocaleBuilder::setScript((uint64_t)this, v11, v12) = 0;
  return ~(_DWORD)v12;
}

    v32 |= (unint64_t)(v15 & 3) << 14;
    v15 >>= 2;
    goto LABEL_49;
  }

    *((void *)this + 6) = v30;
    uint64_t v9 = (void *)*((void *)this + 5);
    if (v9) {
LABEL_48:
    }
      icu::CollationRuleParser::setErrorContext((char *)this);
  }

    *(void *)a1 = 1LL;
    *(_BYTE *)(a1 + 9) = 0;
    *(_BYTE *)(a1 + 8) = v12;
    return v9;
  }

  unsigned int v17 = *(_DWORD *)(a2 + 4);
  int v18 = *(_DWORD *)a3;
  int v19 = *(_DWORD *)(a3 + 4);
  int v20 = v16 + v17 - (v19 + *(_DWORD *)a3);
  __int128 v126 = a5;
  if (a5 != 128 && v20 < 0)
  {
    if ((a5 & 0x20) != 0) {
      goto LABEL_47;
    }
    if (v17 <= v19 && ((a5 & 0x40) != 0 || v20 != -1))
    {
      *(_BYTE *)(a1 + 8) = v10;
      *(_DWORD *)(a1 + 4) = v17;
      int v25 = a4;
      unsigned int v24 = (char *)v15;
      goto LABEL_18;
    }
  }

  UErrorCode v21 = v13 + 1LL;
  if (v13 >= 49)
  {
    int v22 = v21;
  }

  else
  {
    int v22 = byte_180A37148[v21];
    if ((v13 - 47) > 1)
    {
      uint64_t v23 = 0LL;
      uint64_t v128 = byte_180A37148[v21];
      BOOL v131 = v139;
      goto LABEL_36;
    }
  }

  uint64_t v23 = uprv_malloc(v22);
  if (!v23)
  {
    uint64_t v48 = *a6 | 0x10;
    goto LABEL_164;
  }

  uint64_t v128 = v22;
  BOOL v131 = v23;
  int v18 = *(_DWORD *)a3;
  unsigned int v16 = *(_DWORD *)a2;
LABEL_36:
  int v28 = v18 + v13;
  unsigned int v29 = v18 + v13 - 1;
  if (v16 >= v28) {
    unint64_t v30 = v16;
  }
  else {
    unint64_t v30 = v29;
  }
  if (v30 <= 49) {
    unint64_t v30 = byte_180A37148[v30];
  }
  __int128 v125 = v13;
  uint64_t v121 = a6;
  uint64_t v122 = (int *)a3;
  __int128 v120 = v23;
  __int128 v116 = v12;
  uint64_t v117 = (uint64_t)a4;
  __int128 v31 = (v30 + 3);
  if (v126 < 0) {
    __int128 v32 = (v30 + 2);
  }
  else {
    __int128 v32 = v31;
  }
  if (v32 < 0x49)
  {
    int v118 = 0LL;
    int v119 = v9;
    __int128 v34 = (char *)v138;
LABEL_49:
    __int128 v35 = &v34[v32 - 1];
    if (v16 <= 49) {
      unsigned int v16 = byte_180A37148[v16];
    }
    __int128 v36 = (unint64_t)&v34[v32 - 1];
    if (v15 + v16 - 1 >= v15)
    {
      __int128 v37 = a2 + v16;
      uint64_t v38 = v37 + 7;
      int v39 = &v34[v38 + v32 - v37];
      memcpy(v39 - 8, (const void *)(v38 + 1), v37 - v38 + 8);
      __int128 v36 = (unint64_t)(v39 - 9);
    }

    if (v36 >= (unint64_t)v34)
    {
      int64_t v40 = (char *)(v36 - 1);
      bzero(v40 + 1, v36 - (void)v40);
    }

    int v41 = *v122;
    if ((int)v41 >= 50)
    {
      LODWORD(v43) = v14[v41 - 1];
      uint64_t v135 = &v14[v41 - 1];
      unsigned int v44 = 10 * v43;
      unsigned int v42 = *v122;
    }

    else
    {
      unsigned int v42 = byte_180A37148[(int)v41];
      unsigned int v43 = v14[v42 - 1];
      uint64_t v135 = &v14[v42 - 1];
      unsigned int v44 = 10 * v43;
      unsigned int v45 = *v135;
      unsigned int v46 = v45;
      int v136 = byte_180A37148[(int)v41];
      int v47 = v41 >= 2;
      LODWORD(v41) = v136;
      if (!v47)
      {
LABEL_69:
        __int16 v50 = *v35;
        if (v50 >= 0xA)
        {
          uint64_t v51 = &dword_180A37128;
          do
          {
            --v20;
            float v52 = *v51++;
          }

          while (v52 <= v50);
        }

        if (v45 >= 0xA)
        {
          float v53 = &dword_180A37128;
          do
          {
            ++v20;
            int v54 = *v53++;
          }

          while (v54 <= v45);
        }

        __int128 v134 = v44;
        if (v126 < 0)
        {
          __int128 v124 = *(_DWORD *)(a2 + 4) - v122[1];
          if (v50 < v46) {
            LODWORD(v31) = v30 + 1;
          }
          else {
            LODWORD(v31) = v30 + 2;
          }
          __int128 v115 = 0;
          if (v50 < v46) {
            --v20;
          }
        }

        else
        {
          float v55 = v43;
          uint64_t v56 = *(_DWORD *)a2;
          if (v20 < 0) {
            uint64_t v57 = -v20;
          }
          else {
            uint64_t v57 = 1LL;
          }
          sub_1808CD06C(v34, v31, v57);
          v20 += v57;
          __int128 v115 = v31 - v57 - v56;
          __int128 v124 = 0;
          unsigned int v43 = v55;
        }

        int v59 = v131;
        __int128 v132 = v20;
        uint64_t v127 = 0;
        int v60 = 0;
        __int128 v129 = (unsigned __int8 *)v59 + v128 - 1;
        for (unint64_t i = (int)v31; ; --i)
        {
          BOOL v62 = 0;
          while (1)
          {
            int v63 = *v35;
            if (v35 > v34 && !*v35)
            {
              uint64_t v64 = (unsigned __int8 *)(v35 - 1);
              do
              {
                __int128 v32 = (v32 - 1);
                uint64_t v65 = v64 > (unsigned __int8 *)v34;
                uint64_t v66 = *v64--;
                int v63 = v66;
              }

              while (v65 && !v63);
              __int128 v35 = (char *)(v64 + 1);
            }

            uint64_t v67 = v43;
            if ((_DWORD)v32 == (_DWORD)i)
            {
              unsigned int v68 = v35;
              for (uint64_t j = v135; ; --j)
              {
                int v70 = j >= v14 ? *j : 0;
                uint64_t v71 = *v68;
                if (v71 != v70 || v68 == v34) {
                  break;
                }
                --v68;
              }

              if (v71 < v70) {
                break;
              }
              uint64_t v67 = v134;
              if (v71 == v70)
              {
                ++v62;
                *__int128 v34 = 0;
                __int128 v32 = 1LL;
                break;
              }
            }

            uint64_t v73 = (*(v35 - 1) + 10 * v63) / v67;
            if (v73 <= 1) {
              uint64_t v73 = 1;
            }
            v62 += v73;
            uint64_t v74 = v43;
            sub_1808CE154(&v34[i - v136], v32 - (i - v136), v14, v136, 0, &v34[i - v136], -v73);
            unsigned int v43 = v74;
          }

          uint64_t v75 = v129;
          if (v127 || v62)
          {
            *__int128 v129 = v62;
            if (v127)
            {
              ++v60;
              int v77 = v132;
            }

            else
            {
              uint64_t v78 = v62;
              uint64_t v79 = &dword_180A37124;
              int v77 = v132;
              do
              {
                ++v60;
                int v80 = *v79++;
              }

              while (v80 <= v78);
            }

            int v76 = v127 + 1;
            uint64_t v75 = v129 - 1;
            if (v60 > v125) {
              goto LABEL_144;
            }
          }

          else
          {
            int v76 = 0;
            int v77 = v132;
          }

          if (*v34 || (_DWORD)v32 != 1) {
            break;
          }
          uint64_t v82 = v126 >= 0;
          int v83 = v77 > v124 || v126 >= 0;
          if (v77) {
            uint64_t v82 = 0;
          }
          if ((v126 & 0x50) != 0 || !v83 || v82) {
            goto LABEL_144;
          }
LABEL_143:
          uint64_t v127 = v76;
          __int128 v129 = v75;
          __int128 v132 = v77 - 1;
        }

        if (v126 < 0 || v77) {
          goto LABEL_143;
        }
LABEL_144:
        uint64_t v9 = v119;
        if (v76)
        {
          ++v75;
        }

        else
        {
          *uint64_t v75 = 0;
          int v60 = 1;
        }

        v137 = 0;
        if (v126 < 0)
        {
          uint64_t v86 = (char *)v75;
        }

        else
        {
          if (v60 + v77 > v125)
          {
LABEL_149:
            uint64_t v84 = v121;
            uint64_t v85 = *v121 | 4;
LABEL_150:
            *uint64_t v84 = v85;
LABEL_160:
            uint64_t v89 = v120;
            uint64_t v90 = v118;
            goto LABEL_172;
          }

          if ((v126 & 0x50) != 0)
          {
            uint64_t v87 = *(_BYTE *)(a2 + 8);
            if (!*v34 && (_DWORD)v32 == 1)
            {
              uint64_t v88 = *(_DWORD *)(a2 + 4);
              if (v122[1] < v88) {
                uint64_t v88 = v122[1];
              }
              *(_BYTE *)(v119 + 9) = 0;
              *(_DWORD *)int v119 = 1;
              *(_DWORD *)(v119 + 4) = v88;
              *(_BYTE *)(v119 + 8) = v87 & 0x80;
              sub_1808C7A24((unsigned int *)v119, v117, &v137, v121);
              goto LABEL_160;
            }

            __int128 v95 = *v75;
            if (v115 >= v77 + v115 - *(_DWORD *)(a2 + 4) + v122[1]) {
              __int128 v96 = v77 + v115 - *(_DWORD *)(a2 + 4) + v122[1];
            }
            else {
              __int128 v96 = v115;
            }
            __int128 v97 = sub_1808CD06C(v34, v32, v96);
            __int128 v98 = v97;
            if (v97 < 1) {
              goto LABEL_188;
            }
            unsigned int v99 = &v34[v97 - 1];
            do
            {
              if (*v99) {
                int v100 = 1;
              }
              else {
                int v100 = v98 == 1;
              }
              if (v100) {
                break;
              }
              --v98;
              --v99;
            }

            while (v99 >= v34);
            uint64_t v101 = v98;
            if (v98 <= 49) {
LABEL_188:
            }
              uint64_t v101 = byte_180A37148[v98];
            int v102 = *(_DWORD *)(a2 + 4);
            if (v122[1] < v102) {
              int v102 = v122[1];
            }
            uint64_t v133 = v102;
            if ((v126 & 0x10) == 0)
            {
              uint64_t v86 = v34;
              int v60 = v98;
              uint64_t v89 = v120;
              int v92 = v121;
              uint64_t v93 = (int *)v117;
              uint64_t v90 = v118;
              int v77 = v102;
              goto LABEL_171;
            }

            uint64_t v130 = v75;
            int v103 = sub_1808CE154(v34, v101, (unsigned __int8 *)v34, v101, 0, v34, 1);
            int v104 = *v122;
            if (*v122 <= 49) {
              int v104 = byte_180A37148[v104];
            }
            int v77 = v133;
            uint64_t v105 = sub_1808CE348(v34, v103, v14, v104, v122[1] - v133);
            if (v105 == 0x80000000)
            {
              uint64_t v84 = v121;
              uint64_t v85 = *v121 | 0x10;
              goto LABEL_150;
            }

            if (v103 >= 1)
            {
              int v106 = v34;
              do
              {
                UErrorCode v107 = *v106;
                icu::UVector32 *v106 = *v106 >> 1;
                if ((v107 & 1) != 0) {
                  *(v106 - 1) += 5;
                }
                ++v106;
              }

              while (v106 < &v34[v103]);
            }

            if (v105 > 0 || (v95 & (v105 == 0)) != 0)
            {
              unsigned __int16 v108 = v130;
              if (v60 == v125)
              {
                if (v125 < 2)
                {
                  __int128 v109 = v130;
LABEL_212:
                  if (dword_180A37120[v125] - 1 == *v109) {
                    goto LABEL_149;
                  }
                }

                else
                {
                  __int128 v109 = &v130[v125 - 2 + 1];
                  __int128 v110 = v125 + 1;
                  while (*v108 == 9)
                  {
                    ++v108;
                    if (--v110 <= 2)
                    {
                      __int128 v125 = 1;
                      goto LABEL_212;
                    }
                  }
                }
              }

              uint64_t v111 = *v122;
              if (*v122 <= 49) {
                uint64_t v111 = byte_180A37148[v111];
              }
              signed int v112 = sub_1808CE154(v34, v101, v14, v111, v122[1] - v133, v34, -1);
              int v60 = -v112;
              if (v112 < 0)
              {
                __int16 v113 = &v34[~v112];
                do
                {
                  if (*v113) {
                    __int128 v114 = 1;
                  }
                  else {
                    __int128 v114 = v60 == 1;
                  }
                  if (v114) {
                    break;
                  }
                  --v60;
                  --v113;
                }

                while (v113 >= v34);
              }

              v87 ^= 0x80u;
              uint64_t v86 = v34;
            }

            else
            {
              uint64_t v86 = v34;
              int v60 = v98;
            }

            int v92 = v121;
            uint64_t v93 = (int *)v117;
LABEL_170:
            uint64_t v89 = v120;
            uint64_t v90 = v118;
LABEL_171:
            *(_DWORD *)(v119 + 4) = v77;
            *(_BYTE *)(v119 + 8) = v87 & 0x80;
            sub_1808C77A4((_BYTE *)v119, v93, v86, v60, &v137, v92);
            sub_1808C7A24((unsigned int *)v119, (uint64_t)v93, &v137, v92);
LABEL_172:
            if (v90) {
              uprv_free(v90);
            }
            goto LABEL_174;
          }

          uint64_t v86 = (char *)v75;
        }

        int v92 = v121;
        uint64_t v93 = (int *)v117;
        uint64_t v87 = v116;
        goto LABEL_170;
      }
    }

    unsigned int v46 = v43;
    unsigned int v45 = v43;
    unsigned int v43 = (v43 + 1);
    BOOL v49 = v44 + v14[v42 - 2];
    if ((_DWORD)v41 == 2) {
      unsigned int v44 = v49;
    }
    else {
      unsigned int v44 = v49 + 1;
    }
    int v136 = v41;
    goto LABEL_69;
  }

  __int128 v33 = (char *)uprv_malloc((v32 + 1));
  if (v33)
  {
    __int128 v34 = v33;
    int v118 = v33;
    int v119 = v9;
    unsigned int v16 = *(_DWORD *)a2;
    goto LABEL_49;
  }

  uint64_t v89 = v120;
  *a6 |= 0x10u;
LABEL_174:
  if (v89) {
    uprv_free(v89);
  }
  return v9;
}

          unsigned int v6 = *(_DWORD *)v4;
          if (*(_DWORD *)v4 >= *(_DWORD *)(v4 + 16)) {
            return result;
          }
        }

        if (v8 != 128) {
          goto LABEL_49;
        }
        switch((_DWORD)result)
        {
          case 0x82:
            if (*(_BYTE *)(v4 + 56)) {
              goto LABEL_49;
            }
            uint64_t v9 = 1;
            break;
          case 0x81:
            uint64_t v9 = 0;
            if (*(_BYTE *)(v4 + 56)) {
              UChar v10 = -1;
            }
            else {
              UChar v10 = 1;
            }
LABEL_23:
            BOOL result = sub_18090E404((int *)v4, a2);
            goto LABEL_24;
          case 0x80:
            uint64_t v9 = 0;
            *(_BYTE *)(v4 + 56) = 1;
            UChar v10 = -1;
            goto LABEL_23;
          default:
            uint64_t v9 = 0;
            break;
        }

        UChar v10 = 1;
        goto LABEL_23;
      }
    }
  }

  return result;
}

    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v58);
LABEL_48:
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v60);
  }

  return this;
}

BOOL icu::MessagePattern::inMessageFormatPattern(icu::MessagePattern *this, int a2)
{
  return a2 > 0 || ***((_DWORD ***)this + 10) == 0;
}

uint64_t icu::MessagePattern::addArgDoublePart( uint64_t this, double a2, unint64_t a3, __int16 a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    int v7 = a3;
    uint64_t v9 = this;
    int v10 = *(_DWORD *)(this + 120);
    uint64_t v11 = *(void *)(this + 104);
    if (v11)
    {
      this = sub_1807E7714(v11, v10, (int *)a5);
      if (!(_DWORD)this) {
        return this;
      }
      if (v10 >= 0x8000)
      {
        UErrorCode v12 = U_INDEX_OUTOFBOUNDS_ERROR;
LABEL_12:
        *a5 = v12;
        return this;
      }

      uint64_t v13 = **(void **)(v9 + 104);
    }

    else
    {
      this = icu::UMemory::operator new((icu::UMemory *)0x50, a3);
      if (!this)
      {
        *(void *)(v9 + 104) = 0LL;
        UErrorCode v12 = U_MEMORY_ALLOCATION_ERROR;
        goto LABEL_12;
      }

      *(_OWORD *)(this + 8) = 0u;
      *(void *)(this + 72) = 0LL;
      *(_OWORD *)(this + 56) = 0u;
      *(_OWORD *)(this + 40) = 0u;
      *(_OWORD *)(this + 24) = 0u;
      uint64_t v13 = this + 16;
      *(void *)this = this + 16;
      *(_DWORD *)(this + 8) = 8;
      *(void *)(v9 + 104) = this;
    }

    uint64_t v14 = *(int *)(v9 + 120);
    *(_DWORD *)(v9 + 120) = v14 + 1;
    *(double *)(v13 + 8 * icu::LocaleBuilder::setLanguage((uint64_t)this, v13, v14) = a2;
    return icu::MessagePattern::addPart(v9, 13, v7, a4, v10, (int *)a5);
  }

  return this;
}

uint64_t sub_1807E7648(uint64_t a1, int a2, int *a3)
{
  if (*a3 > 0) {
    return 0LL;
  }
  if (*(_DWORD *)(a1 + 8) > a2) {
    return 1LL;
  }
  if (a2 >= 1 && (v7 = 2 * a2, (__int16 v8 = uprv_malloc(16LL * (2 * a2))) != 0LL))
  {
    uint64_t v9 = v8;
    int v10 = *(_DWORD *)(a1 + 8);
    if (v10 >= a2) {
      int v10 = a2;
    }
    if (v10 >= v7) {
      int v10 = v7;
    }
    uint64_t v11 = *(void **)a1;
    memcpy(v8, *(const void **)a1, 16LL * v10);
    if (*(_BYTE *)(a1 + 12)) {
      uprv_free(v11);
    }
    *(void *)a1 = v9;
    *(_DWORD *)(a1 + 8) = v7;
    uint64_t result = 1LL;
    *(_BYTE *)(a1 + 12) = 1;
  }

  else
  {
    uint64_t result = 0LL;
    *a3 = 7;
  }

  return result;
}

uint64_t sub_1807E7714(uint64_t a1, int a2, int *a3)
{
  if (*a3 > 0) {
    return 0LL;
  }
  if (*(_DWORD *)(a1 + 8) > a2) {
    return 1LL;
  }
  if (a2 >= 1 && (v7 = 2 * a2, (__int16 v8 = uprv_malloc(8LL * (2 * a2))) != 0LL))
  {
    uint64_t v9 = v8;
    int v10 = *(_DWORD *)(a1 + 8);
    if (v10 >= a2) {
      int v10 = a2;
    }
    if (v10 >= v7) {
      int v10 = v7;
    }
    uint64_t v11 = *(void **)a1;
    memcpy(v8, *(const void **)a1, 8LL * v10);
    if (*(_BYTE *)(a1 + 12)) {
      uprv_free(v11);
    }
    *(void *)a1 = v9;
    *(_DWORD *)(a1 + 8) = v7;
    uint64_t result = 1LL;
    *(_BYTE *)(a1 + 12) = 1;
  }

  else
  {
    uint64_t result = 0LL;
    *a3 = 7;
  }

  return result;
}

uint64_t icu::MessageImpl::appendReducedApostrophes( icu::MessageImpl *this, const icu::UnicodeString *a2, int a3, uint64_t a4, icu::UnicodeString *a5)
{
  int v7 = (int)a2;
  int v9 = -1;
  while (1)
  {
    unsigned int v10 = *((unsigned __int16 *)this + 4);
    if (v7 < 0)
    {
      int v12 = 0;
      unsigned int v11 = (v10 & 0x8000) != 0 ? *((_DWORD *)this + 3) : v10 >> 5;
    }

    else if ((v10 & 0x8000) != 0)
    {
      unsigned int v11 = *((_DWORD *)this + 3);
      int v12 = (int)v11 >= v7 ? v7 : *((_DWORD *)this + 3);
    }

    else
    {
      unsigned int v11 = v10 >> 5;
      int v12 = v11 >= v7 ? v7 : v11;
    }

    int v13 = icu::UnicodeString::doIndexOf((uint64_t)this, 0x27u, v12, v11 - v12);
    if (v13 < 0) {
      break;
    }
    int v14 = v13;
    if (v13 >= a3) {
      break;
    }
    if (v13 == v9)
    {
      __int16 v16 = 39;
      icu::UnicodeString::doAppend(a4, (uint64_t)&v16, 0, 1LL);
      ++v7;
      int v9 = -1;
    }

    else
    {
      icu::UnicodeString::doAppend(a4, this, v7, (v13 - v7));
      int v7 = v14 + 1;
      int v9 = v14 + 1;
    }
  }

  return icu::UnicodeString::doAppend(a4, this, v7, (a3 - v7));
}

uint64_t icu::MessageImpl::appendSubMessageWithoutSkipSyntax( icu::MessageImpl *this, const icu::MessagePattern *a2, icu::UnicodeString *a3, icu::UnicodeString *a4)
{
  unsigned int v6 = (icu::MessageImpl *)((char *)this + 16);
  uint64_t v7 = *((void *)this + 11);
  int v8 = *(_DWORD *)(v7 + 16LL * (int)a2 + 4) + *(unsigned __int16 *)(v7 + 16LL * (int)a2 + 8);
  while (1)
  {
    uint64_t v9 = (int)a2 + 1LL;
    unsigned int v10 = (int *)(v7 + 16 * v9);
    int v11 = *v10;
    int v12 = (const icu::UnicodeString *)v10[1];
    if (*v10 == 2)
    {
      icu::UnicodeString::doAppend((uint64_t)a3, v6, v8, ((_DWORD)v12 - v8));
      int v8 = v10[1] + *((unsigned __int16 *)v10 + 4);
      goto LABEL_10;
    }

    if (v11 != 5) {
      break;
    }
    icu::UnicodeString::doAppend((uint64_t)a3, v6, v8, ((_DWORD)v12 - v8));
    uint64_t v14 = *((void *)this + 11);
    int v8 = *(_DWORD *)(v14 + 16LL * (int)v9 + 4) + *(unsigned __int16 *)(v14 + 16LL * (int)v9 + 8);
    icu::MessageImpl::appendReducedApostrophes(v6, v12, v8, (uint64_t)a3, v13);
LABEL_10:
    uint64_t v7 = *((void *)this + 11);
    LODWORD(a2) = v9;
  }

  if (v11 != 1) {
    goto LABEL_10;
  }
  return icu::UnicodeString::doAppend((uint64_t)a3, v6, v8, ((_DWORD)v12 - v8));
}

void *icu::Normalizer2::normalizeUTF8( void *result, uint64_t a2, const char *a3, int32_t a4, icu::ByteSink *a5, uint64_t a6, int *a7)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (*a7 <= 0)
  {
    if (a6)
    {
      *a7 = 16;
    }

    else
    {
      uint64_t v9 = result;
      memset(v17, 0, sizeof(v17));
      icu::UnicodeString::fromUTF8(a3, a4, (uint64_t)v17);
      __int128 v13 = 0u;
      uint64_t v16 = 0LL;
      __int128 v15 = 0u;
      __int128 v14 = 0u;
      int v12 = off_18971B688;
      LOWORD(v13) = 2;
      (*(void (**)(void *, _OWORD *, void (***)(icu::UnicodeString *__hidden), int *))(*(void *)v9 + 24LL))( v9,  v17,  &v12,  a7);
      icu::UnicodeString::toUTF8((icu::UnicodeString *)&v12, a5);
      icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v12);
      return icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v17);
    }
  }

  return result;
}

uint64_t icu::Normalizer2::getRawDecomposition()
{
  return 0LL;
}

uint64_t icu::Normalizer2::composePair(icu::Normalizer2 *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t icu::Normalizer2::getCombiningClass(icu::Normalizer2 *this)
{
  return 0LL;
}

BOOL icu::Normalizer2::isNormalizedUTF8(uint64_t a1, const char *a2, int32_t a3, int *a4)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  if (*a4 > 0) {
    return 0LL;
  }
  icu::UnicodeString::fromUTF8(a2, a3, (uint64_t)v9);
  BOOL v4 = (*(unsigned int (**)(uint64_t, _BYTE *, int *))(*(void *)a1 + 88LL))(a1, v9, a4) != 0;
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v9);
  return v4;
}

void sub_1807E7BCC(icu::UObject *a1)
{
}

void sub_1807E7BE4(icu::UObject *a1)
{
}

void sub_1807E7BFC(icu::UObject *a1)
{
}

void sub_1807E7C14(icu::UObject *a1)
{
}

uint64_t icu::Normalizer2Factory::getNoopInstance(icu::Normalizer2Factory *this, UErrorCode *a2)
{
  unsigned int v4 = atomic_load(&dword_18C534DD8);
  if (v4 == 2 || !icu::umtx_initImplPreInit(&dword_18C534DD8))
  {
    if (dword_18C534DDC >= 1) {
      *(_DWORD *)this = dword_18C534DDC;
    }
  }

  else
  {
    int v6 = *(_DWORD *)this;
    if (*(int *)this <= 0)
    {
      uint64_t v7 = (void *)icu::UMemory::operator new((icu::UMemory *)8, v5);
      if (v7)
      {
        *uint64_t v7 = &off_18970F2C8;
        qword_18C534DD0 = (uint64_t)v7;
        sub_180820C94(0x10u, (uint64_t)sub_1807E9840);
        int v6 = *(_DWORD *)this;
      }

      else
      {
        qword_18C534DD0 = 0LL;
        int v6 = 7;
        *(_DWORD *)this = 7;
      }
    }

    dword_18C534DDC = v6;
    icu::umtx_initImplPostInit(&dword_18C534DD8);
  }

  return qword_18C534DD0;
}

uint64_t icu::Normalizer2Factory::getImpl(icu::Normalizer2Factory *this, const icu::Normalizer2 *a2)
{
  return *((void *)this + 1);
}

uint64_t *sub_1807E7D08(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::UObject::~UObject((icu::UObject *)(a1 + 8));
  icu::UObject::~UObject((icu::UObject *)(a1 + 6));
  icu::UObject::~UObject((icu::UObject *)(a1 + 4));
  icu::UObject::~UObject((icu::UObject *)(a1 + 1));
  return a1;
}

uint64_t sub_1807E7D60(uint64_t a1, int *a2)
{
  if (*a2 >= 1)
  {
    if (!a1) {
      return 0LL;
    }
LABEL_3:
    (*(void (**)(uint64_t))(*(void *)a1 + 8LL))(a1);
    return 0LL;
  }

  uint64_t result = icu::UMemory::operator new((icu::UMemory *)0x58, (unint64_t)a2);
  if (!result)
  {
    *a2 = 7;
    if (!a1) {
      return 0LL;
    }
    goto LABEL_3;
  }

  *(void *)uint64_t result = a1;
  *(void *)(result + 8) = &off_18970F118;
  *(void *)(result + 16) = a1;
  *(_BYTE *)(result + 24) = 0;
  *(void *)(result + 32) = &off_18970F040;
  *(void *)(result + 40) = a1;
  *(void *)(result + 48) = &off_18970F1F0;
  *(void *)(result + 56) = a1;
  *(void *)(result + 64) = &off_18970F118;
  *(void *)(result + 72) = a1;
  *(_BYTE *)(result + 80) = 1;
  return result;
}

uint64_t sub_1807E7DFC(int *a1, unint64_t a2)
{
  if (*a1 > 0) {
    return 0LL;
  }
  unsigned int v4 = (void *)icu::UMemory::operator new((icu::UMemory *)0x50, a2);
  if (!v4)
  {
    *a1 = 7;
    return 0LL;
  }

  uint64_t v5 = (uint64_t)v4;
  *unsigned int v4 = off_18970F380;
  v4[4] = 0LL;
  v4[8] = 0LL;
  v4[9] = 0LL;
  icu::Normalizer2Impl::init( (uint64_t)v4,  "P",  (uint64_t)&off_18970EF30,  (uint64_t)&unk_1809DE628,  (uint64_t)&unk_1809E2290);
  return sub_1807E7D60(v5, a1);
}

uint64_t sub_1807E7E94(int *a1)
{
  if (*a1 > 0) {
    return 0LL;
  }
  unsigned int v3 = atomic_load(&dword_18C448A48);
  if (v3 == 2 || !icu::umtx_initImplPreInit(&dword_18C448A48))
  {
    if (dword_18C448A4C >= 1) {
      *a1 = dword_18C448A4C;
    }
  }

  else
  {
    qword_18C448A40 = sub_1807E7DFC(a1, v4);
    sub_180820C94(0x10u, (uint64_t)sub_1807E9840);
    dword_18C448A4C = *a1;
    icu::umtx_initImplPostInit(&dword_18C448A48);
  }

  return qword_18C448A40;
}

uint64_t icu::Normalizer2::getNFCInstance(icu::Normalizer2 *this, UErrorCode *a2)
{
  uint64_t v2 = sub_1807E7E94((int *)this);
  if (v2) {
    return v2 + 8;
  }
  else {
    return 0LL;
  }
}

uint64_t icu::Normalizer2::getNFDInstance(icu::Normalizer2 *this, UErrorCode *a2)
{
  uint64_t v2 = sub_1807E7E94((int *)this);
  if (v2) {
    return v2 + 32;
  }
  else {
    return 0LL;
  }
}

uint64_t icu::Normalizer2Factory::getFCDInstance(icu::Normalizer2Factory *this, UErrorCode *a2)
{
  uint64_t v2 = sub_1807E7E94((int *)this);
  if (v2) {
    return v2 + 48;
  }
  else {
    return 0LL;
  }
}

uint64_t icu::Normalizer2Factory::getFCCInstance(icu::Normalizer2Factory *this, UErrorCode *a2)
{
  uint64_t v2 = sub_1807E7E94((int *)this);
  if (v2) {
    return v2 + 64;
  }
  else {
    return 0LL;
  }
}

uint64_t icu::Normalizer2Factory::getNFCImpl(icu::Normalizer2Factory *this, UErrorCode *a2)
{
  uint64_t result = sub_1807E7E94((int *)this);
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t unorm2_getNFCInstance(int *a1)
{
  uint64_t v1 = sub_1807E7E94(a1);
  if (v1) {
    return v1 + 8;
  }
  else {
    return 0LL;
  }
}

uint64_t unorm2_getNFDInstance(int *a1)
{
  uint64_t v1 = sub_1807E7E94(a1);
  if (v1) {
    return v1 + 32;
  }
  else {
    return 0LL;
  }
}

uint64_t unorm2_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t unorm2_normalize(const void *a1, UChar *a2, int a3, UChar *a4, uint64_t a5, UErrorCode *a6)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  int v8 = a5;
  if (a2)
  {
    if (a3 < -1) {
      goto LABEL_13;
    }
  }

  else if (a3)
  {
    goto LABEL_13;
  }

  if (!a4)
  {
    if (!(_DWORD)a5) {
      goto LABEL_11;
    }
LABEL_13:
    uint64_t v6 = 0LL;
    *a6 = U_ILLEGAL_ARGUMENT_ERROR;
    return v6;
  }

  if ((a5 & 0x80000000) != 0) {
    goto LABEL_13;
  }
LABEL_11:
  if (a2 && a2 == a4) {
    goto LABEL_13;
  }
  memset(v25, 0, sizeof(v25));
  icu::UnicodeString::UnicodeString(v25, a4, 0LL, a5);
  if (a3)
  {
    if (a1
    {
      __int128 v15 = v14;
      __int128 v24 = 0uLL;
      v21[0] = v14[1];
      v21[1] = (icu::UnicodeString *)v25;
      __int128 v23 = 0uLL;
      __int128 v22 = 0uLL;
      *(void *)((char *)&v23 + 5) = 0LL;
      if (icu::ReorderingBuffer::init((icu::ReorderingBuffer *)v21, a3, a6))
      {
        if (a3 < 0) {
          uint64_t v16 = 0LL;
        }
        else {
          uint64_t v16 = &a2[a3];
        }
        (*((void (**)(icu::UnicodeString **, UChar *, UChar *, icu::UnicodeString **, UErrorCode *))*v15 + 18))( v15,  a2,  v16,  v21,  a6);
      }

      if ((void)v22) {
        icu::UnicodeString::releaseBuffer((uint64_t)v21[1], ((void)v23 - (void)v22) >> 1);
      }
    }

    else
    {
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      *(_OWORD *)UErrorCode v21 = 0u;
      __int128 v22 = 0u;
      int v20 = a2;
      icu::UnicodeString::UnicodeString(v21, a3 >> 31, &v20);
      v18[1] = v20;
      (*(void (**)(const void *, icu::UnicodeString **, _OWORD *, UErrorCode *))(*(void *)a1 + 24LL))( a1,  v21,  v25,  a6);
      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v21);
    }
  }

  int v19 = a4;
  uint64_t v6 = icu::UnicodeString::extract((uint64_t)v25, &v19, v8, (int *)a6);
  v18[0] = v19;
  icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v25);
  return v6;
}

uint64_t unorm2_normalizeSecondAndAppend( void *a1, UChar *a2, uint64_t a3, uint64_t a4, UChar *a5, int a6, UErrorCode *a7)
{
  return sub_1807E825C(a1, a2, a3, a4, a5, a6, 1LL, a7);
}

uint64_t sub_1807E825C( void *a1, UChar *a2, uint64_t a3, uint64_t a4, UChar *a5, int a6, uint64_t a7, UErrorCode *a8)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  if (*(int *)a8 <= 0)
  {
    int v13 = a4;
    if (a5)
    {
      if (a6 < -1) {
        goto LABEL_28;
      }
    }

    else if (a6)
    {
      goto LABEL_28;
    }

    if (a2)
    {
LABEL_11:
      memset(v38, 0, 64);
      icu::UnicodeString::UnicodeString(v38, a2, a3, a4);
      if (SLOWORD(v38[2]) >= 0) {
        int v16 = LOWORD(v38[2]) >> 5;
      }
      else {
        int v16 = v38[3];
      }
      if (!a6) {
        goto LABEL_33;
      }
      if (!a1
      {
        memset(v37, 0, sizeof(v37));
        unsigned int v29 = a5;
        icu::UnicodeString::UnicodeString(v37, a6 >> 31, &v29);
        v26[1] = v29;
        uint64_t v21 = 40LL;
        if (!(_DWORD)a7) {
          uint64_t v21 = 48LL;
        }
        (*(void (**)(void *, _DWORD *, _OWORD *, UErrorCode *))(*a1 + v21))(a1, v38, v37, a8);
        goto LABEL_32;
      }

      uint64_t v18 = v17;
      memset((char *)v37 + 8, 0, 56);
      uint64_t v36 = 0LL;
      *(void *)&v37[0] = off_18971B688;
      WORD4(v37[0]) = 2;
      uint64_t v35 = 0LL;
      uint64_t v30 = v17[1];
      __int128 v31 = (icu::UnicodeString *)v38;
      uint64_t v33 = 0LL;
      __int128 v34 = 0uLL;
      uint64_t v32 = 0LL;
      *(void *)((char *)&v34 + 5) = 0LL;
      if (icu::ReorderingBuffer::init((icu::ReorderingBuffer *)&v30, a6 + v16 + 1, a8))
      {
        if (a6 < 0) {
          int v19 = 0LL;
        }
        else {
          int v19 = &a5[a6];
        }
        (*(void (**)(void *, UChar *, UChar *, uint64_t, _OWORD *, uint64_t *, UErrorCode *))(*v18 + 152LL))( v18,  a5,  v19,  a7,  v37,  &v30,  a8);
      }

      if (v32) {
        icu::UnicodeString::releaseBuffer((uint64_t)v31, (unint64_t)(v34 - v32) >> 1);
      }
      unint64_t v20 = *(unsigned int *)a8;
      if ((int)v20 <= 0)
      {
        LODWORD(v20) = LOWORD(v38[2]) >> 5;
        if (SLOWORD(v38[2]) >= 0) {
          unint64_t v20 = v20;
        }
        else {
          unint64_t v20 = v38[3];
        }
      }

      else if (!a2)
      {
LABEL_32:
        icu::UnicodeString::~UnicodeString((void *)v20, (icu::UnicodeString *)v37);
LABEL_33:
        int v28 = a2;
        uint64_t v8 = icu::UnicodeString::extract((uint64_t)v38, &v28, v13, (int *)a8);
        v26[0] = v28;
        icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v38);
        return v8;
      }

      __int128 v23 = &a2[v16];
      int v24 = WORD4(v37[0]) >> 5;
      if (SWORD4(v37[0]) < 0) {
        int v24 = HIDWORD(v37[0]);
      }
      uint64_t v25 = (uint64_t)&v23[-v24];
      icu::UnicodeString::doExtract((char *)v37, 0, 0x7FFFFFFF, v25, 0);
      uint64_t v27 = v25;
      unint64_t v20 = (unint64_t)&v27;
      if (v16 < v13) {
        *__int128 v23 = 0;
      }
      goto LABEL_32;
    }

LABEL_28:
    uint64_t v8 = 0LL;
    *a8 = U_ILLEGAL_ARGUMENT_ERROR;
    return v8;
  }

  return 0LL;
}

      __int128 v14 = v9;
LABEL_29:
      uint64_t v5 = (int *)v13;
      if (v14 == v10)
      {
        if (v10 == v9) {
          return v9;
        }
        uint64_t v26 = 2LL;
        uint64_t v10 = &v14[v26];
        if (v37)
        {
LABEL_40:
          if (!icu::Normalizer2Impl::decompose( (icu::Normalizer2Impl *)a1,  v15,  (unsigned __int16)v11,  (UChar **)v37,  v13)) {
            return v10;
          }
          continue;
        }

        int v12 = &v14[v26];
        uint64_t v10 = v35;
        uint64_t v27 = v36;
        goto LABEL_47;
      }

      break;
    }

    if (!v37)
    {
      if (v14 == v9) {
        return v9;
      }
      uint64_t v27 = 0;
      int v28 = 2LL;
      int v12 = &v14[v28];
      uint64_t v10 = v14;
LABEL_47:
      if (*(unsigned __int16 *)(a1 + 14) <= (unsigned __int16)v11
        && *(unsigned __int16 *)(a1 + 30) > (unsigned __int16)v11)
      {
        return v10;
      }

      unsigned int v29 = (unsigned __int16)v11 >> 1;
      uint64_t v30 = (v29 & 0xFE) != 0 ? v10 : v12;
      uint64_t v35 = v30;
      uint64_t v36 = v29;
      if ((_BYTE)v29)
      {
      }

      continue;
    }

    break;
  }

  appended = icu::ReorderingBuffer::appendZeroCC((UChar **)v37, v10, v14, v13);
  if (v14 != v9 && appended)
  {
    uint64_t v25 = 2LL;
    uint64_t v10 = &v14[v25];
    goto LABEL_40;
  }

  return v14;
}

  if (v20 < (int)v8)
  {
    uint64_t v21 = 0;
    __int128 v22 = (int)v8;
    __int128 v23 = 128;
    int v24 = 72;
    uint64_t v25 = 1000000000;
    uint64_t v26 = v15;
    while (2)
    {
      uint64_t v27 = v24 + 26;
      int v28 = v20++;
      unsigned int v29 = -v24;
      uint64_t v30 = 1;
      __int128 v31 = 36;
      uint64_t v32 = v21;
      while (1)
      {
        uint64_t v33 = s[v28];
        if (v33 > 0x5A)
        {
          if (v33 > 0x7A) {
            goto LABEL_104;
          }
          __int128 v34 = v33 - 97;
          if (v34 < 0) {
            goto LABEL_104;
          }
        }

        else if (v33 > 0x39)
        {
          __int128 v34 = v33 - 65;
          if (v34 < 0) {
            goto LABEL_104;
          }
        }

        else
        {
          if (v33 < 0x30) {
            goto LABEL_104;
          }
          __int128 v34 = v33 - 22;
        }

        if (v34 > (v32 ^ 0x7FFFFFFF) / v30) {
          goto LABEL_105;
        }
        v32 += v34 * v30;
        uint64_t v35 = v31 >= v27 ? 26 : v29 + v31;
        uint64_t v36 = v29 + v31 < 1 ? 1 : v35;
        if (v34 < v36) {
          break;
        }
        if (v30 <= 0x7FFFFFFF / (36 - v36))
        {
          ++v28;
          v30 *= 36 - v36;
          v31 += 36;
          ++v20;
          if (v28 < v22) {
            continue;
          }
        }

        goto LABEL_105;
      }

      ++v26;
      __int128 v37 = v32 - v21;
      if (v21) {
        uint64_t v38 = 2;
      }
      else {
        uint64_t v38 = 700;
      }
      uint64_t v39 = v37 / v38 / v26 + v37 / v38;
      if (v39 < 456)
      {
        int64_t v40 = 0;
      }

      else
      {
        int64_t v40 = 0;
        int v41 = v37 / v38 / v26 + v37 / v38;
        do
        {
          uint64_t v39 = v41 / 0x23;
          v40 += 36;
          unsigned int v42 = v41 >> 3;
          v41 /= 0x23u;
        }

        while (v42 > 0x7CA);
      }

      if (v32 / v26 > (int)(v23 ^ 0x7FFFFFFF)
        || (v23 += v32 / v26, (int)v23 >= 1114112)
        || (v23 & 0xFFFFF800) == 0xD800)
      {
LABEL_105:
        int v12 = 12;
        goto LABEL_8;
      }

      unsigned int v43 = v32 % v26;
      unsigned int v44 = HIWORD(v23);
      if (HIWORD(v23)) {
        unsigned int v45 = 2LL;
      }
      else {
        unsigned int v45 = 1LL;
      }
      unsigned int v46 = (v45 + v15);
      int v47 = v43 - v25;
      if (v43 <= v25)
      {
        if (v44) {
          uint64_t v25 = v32 % v26;
        }
        else {
          ++v25;
        }
        BOOL v49 = v32 % v26;
      }

      else if (v47 < 1)
      {
        BOOL v49 = v25;
      }

      else
      {
        uint64_t v48 = v47 + 1;
        BOOL v49 = v25;
        do
        {
          if (v49 >= (int)v15)
          {
            if ((v15 & 0x80000000) == 0) {
              break;
            }
            __int16 v50 = *(_WORD *)(a3 + 2LL * v49);
            if (!v50) {
              break;
            }
          }

          else
          {
            __int16 v50 = *(_WORD *)(a3 + 2LL * v49);
          }

          uint64_t v51 = v49 + 1LL;
          if ((v50 & 0xFC00) != 0xD800 || (_DWORD)v51 == (_DWORD)v15)
          {
            ++v49;
          }

          else
          {
            v49 += 2;
            if ((*(_WORD *)(a3 + 2 * v51) & 0xFC00) != 0xDC00) {
              BOOL v49 = v51;
            }
          }

          --v48;
        }

        while (v48 > 1);
      }

      float v53 = __OFSUB__((_DWORD)v15, v49);
      int v54 = v15 - v49;
      if ((v54 < 0) ^ v53 | (v54 == 0))
      {
        if (!v44)
        {
          *(_WORD *)(a3 + 2LL * v49) = v23;
          if (!a5) {
            goto LABEL_100;
          }
          goto LABEL_94;
        }
      }

      else
      {
        int v59 = HIWORD(v23);
        int v60 = v43;
        int v61 = v46;
        BOOL v62 = v26;
        int v63 = v25;
        uint64_t v64 = v23;
        uint64_t v65 = v22;
        uint64_t v66 = v49;
        uint64_t v57 = v45;
        BOOL v58 = v54;
        uint64_t v56 = (_WORD *)(a3 + 2LL * v49);
        memmove(&v56[v45], v56, 2 * v54);
        if (a5)
        {
          memmove((void *)(a5 + v66 + v57), (const void *)(a5 + v66), v58);
          __int128 v22 = v65;
          BOOL v49 = v66;
          uint64_t v25 = v63;
          __int128 v23 = v64;
          unsigned int v46 = v61;
          uint64_t v26 = v62;
          unsigned int v43 = v60;
          if (!v59)
          {
            *uint64_t v56 = v64;
LABEL_94:
            *(_BYTE *)(a5 + v49) = s[v28] - 65 < 0x1A;
            goto LABEL_100;
          }
        }

        else
        {
          __int128 v22 = v65;
          BOOL v49 = v66;
          uint64_t v25 = v63;
          __int128 v23 = v64;
          unsigned int v46 = v61;
          uint64_t v26 = v62;
          unsigned int v43 = v60;
          if (!v59)
          {
            *uint64_t v56 = v64;
            goto LABEL_100;
          }
        }
      }

      *(_WORD *)(a3 + 2LL * v49) = (v23 >> 10) - 10304;
      float v55 = v49 + 1LL;
      *(_WORD *)(a3 + 2 * v55) = v23 & 0x3FF | 0xDC00;
      if (a5)
      {
        *(_BYTE *)(a5 + v49) = s[v28] - 65 < 0x1A;
        if (v23 >= 0x10000) {
          *(_BYTE *)(a5 + v55) = 0;
        }
      }

  uint64_t v35 = 0;
  uint64_t v18 = ures_openDirect(0LL, (uint64_t)__big, (uint64_t)&v35);
  if (v35 < 1)
  {
    int v19 = v18;
    LocaleByType = (const char *)ures_getLocaleByType(v18, 0, &v35);
    ures_close(v19);
    if (v35 <= 0)
    {
      if (strcmp(__big, LocaleByType))
      {
        unint64_t v4 = strlen(LocaleByType);
        if ((int)v4 < a3)
        {
LABEL_61:
          strcpy(a2, LocaleByType);
          return v4;
        }

        goto LABEL_66;
      }
    }
  }

  uint64_t v35 = 0;
  uint64_t v21 = ures_openDirect(0LL, (uint64_t)"supplementalData", (uint64_t)&v35);
  __int128 v22 = ures_getByKey(v21, "parentLocales", v21, &v35);
  if (v35 > 0) {
    goto LABEL_31;
  }
  int v24 = v22;
  uint64_t v25 = 0LL;
  __int128 v34 = 0;
  while (1)
  {
    uint64_t v35 = 0;
    NextResource = ures_getNextResource(v24, v25, &v35);
    uint64_t v25 = (uint64_t)NextResource;
    if (v35 > 0) {
      break;
    }
    v36[0] = 0LL;
    v36[1] = 0LL;
    __int128 v37 = 0;
    if (ures_getType((uint64_t)NextResource))
    {
      int Size = ures_getSize(v25);
      int v28 = v34;
      if (Size >= 1 && !v34)
      {
        unsigned int v29 = Size;
        uint64_t v30 = 1;
        do
        {
          __int128 v34 = 16;
          uint64_t v35 = 0;
          UTF8StringByint Index = ures_getUTF8StringByIndex(v25, v30 - 1, (char *)v36, &v34, 0, &v35);
          if (v35 <= 0 && !strncmp(__big, UTF8StringByIndex, 0x10uLL))
          {
            int v28 = v34;
          }

          else
          {
            int v28 = 0;
            __int128 v34 = 0;
          }

          if (v30 >= v29) {
            break;
          }
          ++v30;
        }

        while (!v28);
      }

      goto LABEL_51;
    }

    __int128 v34 = 16;
    UTF8String = ures_getUTF8String(v25, (char *)v36, &v34, 0, &v35);
    if (v35 <= 0 && !strncmp(__big, UTF8String, 0x10uLL))
    {
      if (v34) {
        break;
      }
    }

    else
    {
      int v28 = 0;
      __int128 v34 = 0;
LABEL_51:
      if (v28) {
        break;
      }
    }
  }

  ures_close(v24);
  if (v34 >= 1)
  {
    uint64_t Key = (const char *)ures_getKey(v25);
    unint64_t v4 = strlen(Key);
    else {
      strcpy(a2, Key);
    }
    ures_close(v25);
    return v4;
  }

  ures_close(v25);
LABEL_31:
  Parent = uloc_getParent(__big, a2, a3, (int *)a4);
  unint64_t v4 = Parent;
  if (*(int *)a4 <= 0 && !(_DWORD)Parent)
  {
    if (a3 < 5) {
      *a4 = U_BUFFER_OVERFLOW_ERROR;
    }
    else {
      strcpy(a2, "root");
    }
    return 4LL;
  }

  return v4;
}

    if ((a1[1] & 0xDF) != 0x4C) {
      return 1LL;
    }
    uint64_t v2 = a1[2];
    if ((v2 & 0xFFFFFFDF) == 0x44) {
      uint64_t v2 = a1[3];
    }
    uint64_t result = 5LL;
    if (v2) {
      goto LABEL_44;
    }
  }

  return result;
}

  uint64_t v5 = 2 * v15 + 16 + v20;
  if ((a3 & 0x80000000) != 0) {
    return v5;
  }
  (*(void (**)(uint64_t, unsigned __int16 *, uint64_t, unsigned __int16 *, int *))(a1 + 56))( a1,  a2,  4LL,  a4,  a5);
  (*(void (**)(uint64_t, unsigned __int16 *, uint64_t, unsigned __int16 *, int *))(a1 + 48))( a1,  a2 + 2,  12LL,  a4 + 2,  a5);
  (*(void (**)(uint64_t, unsigned __int16 *, void, unsigned __int16 *, int *))(a1 + 48))( a1,  a2 + 8,  2 * v15,  a4 + 8,  a5);
  uint64_t v21 = &a2[v15 + 8];
  __int128 v22 = (uint64_t)&a4[v15 + 8];
  if (v18 == 2)
  {
    if (a2 != a4) {
      memmove(&a4[v15 + 8], v21, v19);
    }
  }

  else if (v18 == 1)
  {
    (*(void (**)(uint64_t, unsigned __int16 *, void, uint64_t, int *))(a1 + 56))( a1,  v21,  (4 * v19),  v22,  a5);
  }

  else
  {
    (*(void (**)(uint64_t, unsigned __int16 *, void, uint64_t, int *))(a1 + 48))( a1,  v21,  (2 * v19),  v22,  a5);
  }

  return v5;
}

  icu::UCharsTrie::Iterator::~Iterator((icu::UCharsTrie::Iterator *)v27);
  return v6;
}

    uint64_t result = 0LL;
    *a7 = U_PARSE_ERROR;
    return result;
  }

  unint64_t v20 = *a2;
  if ((unint64_t)*a2 + 4 < 3)
  {
    uint64_t result = icu::UMemory::operator new(v20, (icu::UMemory *)0x28, (unint64_t)a2);
    if (result) {
      return (uint64_t *)sub_1809199D4((uint64_t)result, a1, a4, a6, a7);
    }
    return result;
  }

  if (v20 != (uint64_t *)-1LL)
  {
    if (!*(_BYTE *)(a4 + 160))
    {
      uint64_t result = icu::UMemory::operator new( (uint64_t *)*(unsigned __int8 *)(a4 + 160),  (icu::UMemory *)0x30,  (unint64_t)a2);
      if (result) {
        return (uint64_t *)sub_1809195E4((uint64_t)result, a1, (uint64_t)a2, a3, a4, (UChar **)a6, a7);
      }
      return result;
    }

    goto LABEL_28;
  }

  uint64_t result = icu::UMemory::operator new((uint64_t *)0xFFFFFFFFFFFFFFFFLL, (icu::UMemory *)0x20, (unint64_t)a2);
  if (result)
  {
    uint64_t result = (uint64_t *)sub_180918AA0((uint64_t)result, a1, a4, (UChar **)a6, a7);
    int v19 = off_189727128;
    goto LABEL_26;
  }

  return result;
}

      (*(void (**)(uint64_t, uint64_t, uint64_t, void (***)(icu::UnicodeString *__hidden)))(*(void *)a2 + 32LL))( a2,  v4,  v11,  &v22);
      unsigned int v17 = (unsigned __int16)v23 >> 5;
      if ((v23 & 0x8000u) != 0LL) {
        unsigned int v17 = DWORD1(v23);
      }
      uint64_t v18 = v4 + v5 - v11;
      int v11 = (v17 + v4);
      uint64_t v5 = v18 + v17;
      goto LABEL_31;
    }

    if ((v23 & 1) == 0) {
      goto LABEL_28;
    }
LABEL_31:
    unint64_t v4 = v11;
  }

  LODWORD(v11) = v4;
LABEL_34:
  int v19 = (v5 - a3[3] + a3[1]);
  a3[1] = v19;
  a3[2] = v11;
  a3[3] = v5;
  icu::UnicodeString::~UnicodeString((void *)v19, (icu::UnicodeString *)&v22);
  return icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v27);
}

    int v12 = *((unsigned __int16 *)this + 4);
    int v13 = (__int16)v12;
    LODWORD(v9) = v12 >> 5;
    if (v13 >= 0) {
      uint64_t v9 = v9;
    }
    else {
      uint64_t v9 = *((unsigned int *)this + 3);
    }
  }

    LOBYTE(v15) = 0;
    goto LABEL_30;
  }

  uint64_t v127 = 0LL;
  __int128 v125 = 0u;
  __int128 v126 = 0u;
  uint64_t v123 = 0u;
  __int128 v124 = 0u;
  icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)&v123);
  icu::number::impl::DecimalQuantity::setToDouble((void **)&v123, v26);
  icu::number::impl::DecimalQuantity::roundToInfinity((icu::number::impl::DecimalQuantity *)&v123);
  LowerDisplayMagnitude = icu::number::impl::DecimalQuantity::getLowerDisplayMagnitude((icu::number::impl::DecimalQuantity *)&v123);
  icu::number::impl::DecimalQuantity::adjustMagnitude( (icu::number::impl::DecimalQuantity *)&v123,  -LowerDisplayMagnitude);
  icu::number::impl::DecimalQuantity::setMinInteger((uint64_t)&v123, v9 - LowerDisplayMagnitude);
  uint64_t v121 = 0u;
  uint64_t v122 = 0u;
  int v119 = 0u;
  __int128 v120 = 0u;
  icu::number::impl::DecimalQuantity::toPlainString((icu::number::impl::DecimalQuantity *)&v123, (uint64_t)&v119);
  if ((SWORD4(v119) & 0x8000u) == 0) {
    uint64_t v33 = WORD4(v119) >> 5;
  }
  else {
    uint64_t v33 = HIDWORD(v119);
  }
  if ((_DWORD)v33
    && ((BYTE8(v119) & 2) != 0
      ? (__int128 v34 = (_WORD *)((unint64_t)&v119 | 0xA))
      : (__int128 v34 = (_WORD *)*((void *)&v120 + 1)),
        *v34 == 45))
  {
    uint64_t v33 = (v33 - 1);
    uint64_t v35 = 1;
  }

  else
  {
    uint64_t v35 = 0;
  }

  icu::UnicodeString::doAppend((uint64_t)&v128, (const icu::UnicodeString *)&v119, v35, v33);
  icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)&v119);
  icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)&v123);
LABEL_50:
  uint64_t v39 = v129;
  int64_t v40 = (unsigned __int16)v129 >> 5;
  int v41 = DWORD1(v129);
  if ((v129 & 0x8000u) != 0LL) {
    int64_t v40 = DWORD1(v129);
  }
  if (v40 + LowerDisplayMagnitude < v9)
  {
    do
    {
      LOWORD(v123) = 48;
      icu::UnicodeString::doReplace((uint64_t)&v128, 0LL, 0LL, (uint64_t)&v123, 0, 1LL);
      uint64_t v39 = v129;
      unsigned int v42 = (unsigned __int16)v129 >> 5;
      int v41 = DWORD1(v129);
      if ((v129 & 0x8000u) != 0LL) {
        unsigned int v42 = DWORD1(v129);
      }
    }

    while (v42 + LowerDisplayMagnitude < v9);
  }

  unsigned int v43 = LowerDisplayMagnitude;
  if (v11 > -LowerDisplayMagnitude)
  {
    unsigned int v44 = -LowerDisplayMagnitude;
    do
    {
      LOWORD(v123) = 48;
      icu::UnicodeString::doAppend((uint64_t)&v128, (uint64_t)&v123, 0, 1LL);
      ++v44;
    }

    while (v11 > v44);
    unsigned int v43 = -v11;
    uint64_t v39 = v129;
    int v41 = DWORD1(v129);
  }

  unsigned int v45 = (__int16)v39;
  unsigned int v46 = v39 >> 5;
  if (v45 < 0) {
    unsigned int v46 = v41;
  }
  int v47 = uprv_max(v105, v46 + v43);
  if (v107 != 100) {
    int v47 = uprv_max(v107, v47);
  }
  unsigned __int16 v108 = v24;
  uint64_t v48 = v43;
  if (v110 != 100) {
    uint64_t v48 = uprv_min(-v110, v43);
  }
  if (v47 > v48)
  {
    if (v102) {
      BOOL v49 = 1;
    }
    else {
      BOOL v49 = v48 < 0;
    }
    __int16 v50 = v49;
    if (v11 >= -LowerDisplayMagnitude) {
      uint64_t v51 = -LowerDisplayMagnitude;
    }
    else {
      uint64_t v51 = v11;
    }
    float v52 = LowerDisplayMagnitude + v51 - v11 - v47;
    float v53 = v47 - 1;
    int v54 = v50 ^ 1;
    do
    {
      if ((__int16)v129 < 0)
      {
        uint64_t v56 = DWORD1(v129);
        uint64_t v57 = v52 + DWORD1(v129);
      }

      else
      {
        float v55 = __CFADD__(v52, (unsigned __int16)v129 >> 5);
        if (((v52 + ((unsigned __int16)v129 >> 5)) & 0x80000000) == 0 && v55)
        {
          uint64_t v56 = (unsigned __int16)v129 >> 5;
          uint64_t v57 = v43 - v47 + v56;
LABEL_86:
          if (v56 <= v57)
          {
            int v59 = -1;
          }

          else
          {
            BOOL v58 = (char *)&v129 + 2;
            if ((v129 & 2) == 0) {
              BOOL v58 = (char *)v130;
            }
            int v59 = *(_WORD *)&v58[2 * v57];
          }

          goto LABEL_92;
        }
      }

      int v59 = 35;
LABEL_92:
      LOWORD(v123) = v59;
      icu::UnicodeString::doAppend(a3, (uint64_t)&v123, 0, 1LL);
      if (v53) {
        int v60 = 1;
      }
      else {
        int v60 = v54;
      }
      if ((v60 & 1) == 0)
      {
        if (*((_BYTE *)this + 67)) {
          int v61 = 164;
        }
        else {
          int v61 = 46;
        }
        LOWORD(v123) = v61;
        icu::UnicodeString::doAppend(a3, (uint64_t)&v123, 0, 1LL);
      }

      if (v114)
      {
        if (v53 + 1 >= 2 && v53 == v112)
        {
          LOWORD(v123) = 44;
          icu::UnicodeString::doAppend(a3, (uint64_t)&v123, 0, 1LL);
        }

        if (v53 > v112 && v113 >= 1 && !((v53 - v112) % v113))
        {
          LOWORD(v123) = 44;
          icu::UnicodeString::doAppend(a3, (uint64_t)&v123, 0, 1LL);
        }
      }

      ++v52;
      --v47;
      BOOL v49 = v53-- <= v48;
    }

    while (!v49);
  }

  BOOL v62 = v108;
  if (v14 != uprv_min(100LL, -1))
  {
    LOWORD(v123) = 69;
    icu::UnicodeString::doAppend(a3, (uint64_t)&v123, 0, 1LL);
    if (v103)
    {
      LOWORD(v123) = 43;
      icu::UnicodeString::doAppend(a3, (uint64_t)&v123, 0, 1LL);
    }

    if (v14 >= 1)
    {
      do
      {
        LOWORD(v123) = 48;
        icu::UnicodeString::doAppend(a3, (uint64_t)&v123, 0, 1LL);
        --v14;
      }

      while (v14);
    }
  }

  int v63 = *(unsigned __int16 *)(a3 + 8);
  uint64_t v64 = (__int16)v63;
  uint64_t v65 = v63 >> 5;
  if (v64 >= 0) {
    uint64_t v66 = v65;
  }
  else {
    uint64_t v66 = *(unsigned int *)(a3 + 12);
  }
  uint64_t v67 = 34LL;
  if (v143)
  {
    uint64_t v67 = 0LL;
    unsigned int v68 = v133;
  }

  else
  {
    unsigned int v68 = v142;
  }

  (*(void (**)(__int128 *__return_ptr, void *, void))(v133[v67] + 32LL))(&v123, v68, 0LL);
  if ((SWORD4(v123) & 0x8000u) == 0) {
    __int128 v69 = WORD4(v123) >> 5;
  }
  else {
    __int128 v69 = HIDWORD(v123);
  }
  icu::UnicodeString::doAppend(a3, (const icu::UnicodeString *)&v123, 0, v69);
  icu::UnicodeString::~UnicodeString(v70, (icu::UnicodeString *)&v123);
  if (v106 < 1 || (_BYTE)v104) {
    goto LABEL_142;
  }
  uint64_t v71 = *(unsigned __int16 *)(a3 + 8);
  int v72 = (__int16)v71;
  uint64_t v73 = v71 >> 5;
  if (v72 < 0) {
    uint64_t v73 = *(_DWORD *)(a3 + 12);
  }
  if (v106 > v73)
  {
    do
    {
      LOWORD(v123) = 35;
      icu::UnicodeString::doReplace(a3, v108, 0LL, (uint64_t)&v123, 0, 1LL);
      uint64_t v66 = (v66 + 1);
      uint64_t v74 = *(unsigned __int16 *)(a3 + 8);
      uint64_t v75 = (__int16)v74;
      int v76 = v74 >> 5;
      if (v75 < 0) {
        int v76 = *(_DWORD *)(a3 + 12);
      }
    }

    while (v106 > v76);
  }

  switch(HIDWORD(v104))
  {
    case 0:
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v118, (UChar **)v144);
      int v77 = icu::number::impl::PatternStringUtils::escapePaddingString((uint64_t)v118, a3, 0LL);
      icu::UnicodeString::~UnicodeString(v78, (icu::UnicodeString *)v118);
      LOWORD(v123) = 42;
      uint64_t v79 = a3;
      int v80 = 0LL;
      goto LABEL_135;
    case 1:
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v117, (UChar **)v144);
      int v77 = icu::number::impl::PatternStringUtils::escapePaddingString((uint64_t)v117, a3, v108);
      icu::UnicodeString::~UnicodeString(v81, (icu::UnicodeString *)v117);
      LOWORD(v123) = 42;
      uint64_t v79 = a3;
      int v80 = v108;
LABEL_135:
      icu::UnicodeString::doReplace(v79, v80, 0LL, (uint64_t)&v123, 0, 1LL);
      BOOL v62 = v77 + 1 + v108;
      LODWORD(v66) = v77 + 1 + v66;
      break;
    case 2:
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v116, (UChar **)v144);
      icu::number::impl::PatternStringUtils::escapePaddingString((uint64_t)v116, a3, v66);
      icu::UnicodeString::~UnicodeString(v82, (icu::UnicodeString *)v116);
      LOWORD(v123) = 42;
      icu::UnicodeString::doReplace(a3, v66, 0LL, (uint64_t)&v123, 0, 1LL);
      break;
    case 3:
      LOWORD(v123) = 42;
      icu::UnicodeString::doAppend(a3, (uint64_t)&v123, 0, 1LL);
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v115, (UChar **)v144);
      int v83 = *(unsigned __int16 *)(a3 + 8);
      uint64_t v84 = (__int16)v83;
      uint64_t v85 = v83 >> 5;
      if (v84 >= 0) {
        uint64_t v86 = v85;
      }
      else {
        uint64_t v86 = *(unsigned int *)(a3 + 12);
      }
      icu::number::impl::PatternStringUtils::escapePaddingString((uint64_t)v115, a3, v86);
      icu::UnicodeString::~UnicodeString(v87, (icu::UnicodeString *)v115);
      break;
    default:
      break;
  }

  uint64_t v88 = (void *)*(unsigned int *)a2;
  if ((int)v88 <= 0)
  {
LABEL_142:
    uint64_t v89 = 34LL;
    if (v143)
    {
      uint64_t v89 = 0LL;
      uint64_t v90 = v133;
    }

    else
    {
      uint64_t v90 = v142;
    }

    if ((*(unsigned int (**)(void *))(v133[v89] + 56LL))(v90))
    {
      LOWORD(v123) = 59;
      icu::UnicodeString::doAppend(a3, (uint64_t)&v123, 0, 1LL);
      if (v143) {
        v91 = 0LL;
      }
      else {
        v91 = 34LL;
      }
      if (v143) {
        int v92 = v133;
      }
      else {
        int v92 = v142;
      }
      (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(v133[v91] + 32LL))(&v123, v92, 768LL);
      if ((SWORD4(v123) & 0x8000u) == 0) {
        uint64_t v93 = WORD4(v123) >> 5;
      }
      else {
        uint64_t v93 = HIDWORD(v123);
      }
      icu::UnicodeString::doAppend(a3, (const icu::UnicodeString *)&v123, 0, v93);
      icu::UnicodeString::~UnicodeString(v94, (icu::UnicodeString *)&v123);
      __int128 v125 = 0u;
      __int128 v126 = 0u;
      uint64_t v123 = 0u;
      __int128 v124 = 0u;
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v123, (UChar **)a3);
      icu::UnicodeString::doAppend(a3, (const icu::UnicodeString *)&v123, v62, (v66 - v62));
      if (v143) {
        __int128 v95 = 0LL;
      }
      else {
        __int128 v95 = 34LL;
      }
      if (v143) {
        __int128 v96 = v133;
      }
      else {
        __int128 v96 = v142;
      }
      (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(v133[v95] + 32LL))(&v119, v96, 512LL);
      if ((SWORD4(v119) & 0x8000u) == 0) {
        __int128 v97 = WORD4(v119) >> 5;
      }
      else {
        __int128 v97 = HIDWORD(v119);
      }
      icu::UnicodeString::doAppend(a3, (const icu::UnicodeString *)&v119, 0, v97);
      icu::UnicodeString::~UnicodeString(v98, (icu::UnicodeString *)&v119);
      icu::UnicodeString::~UnicodeString(v99, (icu::UnicodeString *)&v123);
    }
  }

  icu::UnicodeString::~UnicodeString(v88, (icu::UnicodeString *)&v128);
  sub_1808D3EFC(v133);
  return icu::UnicodeString::~UnicodeString(v100, (icu::UnicodeString *)v144);
}

  if (v14)
  {
    icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)(v14 + 200));
    icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)(v14 + 136));
    icu::UnicodeString::~UnicodeString(v37, (icu::UnicodeString *)(v14 + 72));
    icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)(v14 + 8));
    icu::UMemory::operator delete((void *)v14);
  }

  return v12;
}

  unint64_t v20 = 0;
LABEL_31:
  *a5 = v20;
  return v13;
}

            ++v21;
            __int128 v22 = v14;
          }
        }

        uint64_t v38 = 0LL;
        __int128 v14 = 0LL;
LABEL_46:
        (*((void (**)(icu::UVector **))*v18 + 1))(v18);
        __int128 v31 = (void *)*(unsigned int *)a7;
        if ((int)v31 > 0)
        {
          __int128 v14 = 0LL;
LABEL_60:
          icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)&v39);
LABEL_61:
          icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v44);
          return v14;
        }

        uint64_t v32 = *(unsigned __int16 *)(a2 + 8);
        uint64_t v33 = (__int16)v32;
        __int128 v34 = v32 >> 5;
        if (v33 < 0) {
          __int128 v34 = *(_DWORD *)(a2 + 12);
        }
        if ((_DWORD)v14 == v34 - (_DWORD)a3 && (_DWORD)v38 == 0)
        {
          icu::UnicodeString::copyFrom(v37, &v44, 0);
          __int128 v31 = (void *)HIDWORD(v38);
          *a6 = HIDWORD(v38);
          goto LABEL_60;
        }

        icu::UnicodeString::~UnicodeString((void *)v38, (icu::UnicodeString *)&v39);
        uint64_t v9 = v37;
        LODWORD(v18) = HIDWORD(v38);
      }

      else
      {
        __int128 v14 = 0LL;
      }
    }

    else
    {
      __int128 v14 = 0LL;
      LODWORD(v18) = 0;
      unsigned int v45 = 0u;
      uint64_t v48 = 0LL;
      int v47 = 0u;
      unsigned int v46 = 0u;
      unsigned int v44 = (UChar *)off_18971B688;
      LOWORD(v45) = 2;
    }

    int v19 = sub_1809A8234(a1, a2, a3, a4, a7);
    unint64_t v20 = (void *)*(unsigned int *)a7;
    if ((int)v20 <= 0)
    {
      uint64_t v25 = (icu::UVector **)v19;
      if (v19)
      {
        uint64_t v26 = (icu::UVector *)*v19;
        if (*v25)
        {
          uint64_t v27 = 0;
          while (v27 < *((_DWORD *)v26 + 2))
          {
            int v28 = icu::UVector::elementAt(v26, v27);
            if (v28) {
              unsigned int v29 = *(_DWORD *)(v28 + 8);
            }
            else {
              unsigned int v29 = -1;
            }
            if (v29 >= (int)v14)
            {
              uint64_t v30 = icu::UVector::elementAt(*v25, v27);
              if (v30) {
                __int128 v14 = *(unsigned int *)(v30 + 8);
              }
              else {
                __int128 v14 = 0xFFFFFFFFLL;
              }
              sub_1809A6304(v25, v27, (icu::UnicodeString *)&v44);
              LODWORD(v18) = 0;
            }

            ++v27;
            uint64_t v26 = *v25;
            if (!*v25) {
              goto LABEL_56;
            }
          }

          (*(void (**)(icu::UVector *))(*(void *)v26 + 8LL))(v26);
        }

  icu::Normalizer2Impl::decompose( *((UChar **)this + 52),  (const icu::UnicodeString *)&v21,  (icu::FCDUIterCollationIterator *)((char *)this + 424),  a2);
  unsigned int v17 = *(unsigned int *)a2;
  if ((int)v17 <= 0)
  {
    uint64_t v18 = *((_DWORD *)this + 102);
    *((_DWORD *)this + 101) = v18;
    int v19 = (unsigned __int16)v22 >> 5;
    if ((v22 & 0x8000u) != 0LL) {
      int v19 = DWORD1(v22);
    }
    *((_DWORD *)this + 103) = v19 + v18;
    unsigned int v17 = 3LL;
    *((_DWORD *)this + 100) = 3;
    *((_DWORD *)this + 102) = 0;
    uint64_t v2 = 1LL;
  }

  else
  {
    uint64_t v2 = 0LL;
  }

uint64_t unorm2_append(void *a1, UChar *a2, uint64_t a3, uint64_t a4, UChar *a5, int a6, UErrorCode *a7)
{
  return sub_1807E825C(a1, a2, a3, a4, a5, a6, 0LL, a7);
}

uint64_t unorm2_getDecomposition(uint64_t a1, uint64_t a2, UChar *a3, uint64_t a4, int *a5)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (*a5 > 0) {
    return 0LL;
  }
  int v7 = a4;
  if (!a3)
  {
    if (!(_DWORD)a4) {
      goto LABEL_5;
    }
LABEL_8:
    uint64_t v5 = 0LL;
    *a5 = 1;
    return v5;
  }

  if ((a4 & 0x80000000) != 0) {
    goto LABEL_8;
  }
LABEL_5:
  memset(v15, 0, sizeof(v15));
  icu::UnicodeString::UnicodeString(v15, a3, 0LL, a4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _OWORD *))(*(void *)a1 + 56LL))(a1, a2, v15))
  {
    __int128 v14 = a3;
    uint64_t v5 = icu::UnicodeString::extract((uint64_t)v15, &v14, v7, a5);
    int v13 = v14;
    int v11 = &v13;
  }

  else
  {
    uint64_t v5 = 0xFFFFFFFFLL;
  }

  icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v15);
  return v5;
}

uint64_t unorm2_getRawDecomposition(uint64_t a1, uint64_t a2, UChar *a3, uint64_t a4, int *a5)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (*a5 > 0) {
    return 0LL;
  }
  int v7 = a4;
  if (!a3)
  {
    if (!(_DWORD)a4) {
      goto LABEL_5;
    }
LABEL_8:
    uint64_t v5 = 0LL;
    *a5 = 1;
    return v5;
  }

  if ((a4 & 0x80000000) != 0) {
    goto LABEL_8;
  }
LABEL_5:
  memset(v15, 0, sizeof(v15));
  icu::UnicodeString::UnicodeString(v15, a3, 0LL, a4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _OWORD *))(*(void *)a1 + 64LL))(a1, a2, v15))
  {
    __int128 v14 = a3;
    uint64_t v5 = icu::UnicodeString::extract((uint64_t)v15, &v14, v7, a5);
    int v13 = v14;
    int v11 = &v13;
  }

  else
  {
    uint64_t v5 = 0xFFFFFFFFLL;
  }

  icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v15);
  return v5;
}

uint64_t unorm2_composePair(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72LL))(a1);
}

uint64_t unorm2_getCombiningClass(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80LL))(a1);
}

uint64_t unorm2_isNormalized(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  if (*a4 > 0) {
    return 0LL;
  }
  if (a2) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = a3 == 0;
  }
  int v7 = !v6;
  if (a3 < -1 || v7)
  {
    uint64_t v5 = 0LL;
    *a4 = 1;
  }

  else
  {
    memset(v11, 0, sizeof(v11));
    uint64_t v10 = a2;
    icu::UnicodeString::UnicodeString(v11, a3 >> 31, &v10);
    uint64_t v5 = (*(uint64_t (**)(uint64_t, _OWORD *, int *))(*(void *)a1 + 88LL))(a1, v11, a4);
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v11);
  }

  return v5;
}

uint64_t unorm2_quickCheck(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  if (*a4 > 0) {
    return 0LL;
  }
  if (a2) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = a3 == 0;
  }
  int v7 = !v6;
  if (a3 < -1 || v7)
  {
    uint64_t v5 = 0LL;
    *a4 = 1;
  }

  else
  {
    memset(v11, 0, sizeof(v11));
    uint64_t v10 = a2;
    icu::UnicodeString::UnicodeString(v11, a3 >> 31, &v10);
    uint64_t v5 = (*(uint64_t (**)(uint64_t, _OWORD *, int *))(*(void *)a1 + 104LL))(a1, v11, a4);
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v11);
  }

  return v5;
}

uint64_t unorm2_spanQuickCheckYes(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  if (*a4 > 0) {
    return 0LL;
  }
  if (a2) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = a3 == 0;
  }
  int v7 = !v6;
  if (a3 < -1 || v7)
  {
    uint64_t v5 = 0LL;
    *a4 = 1;
  }

  else
  {
    memset(v11, 0, sizeof(v11));
    uint64_t v10 = a2;
    icu::UnicodeString::UnicodeString(v11, a3 >> 31, &v10);
    uint64_t v5 = (*(uint64_t (**)(uint64_t, _OWORD *, int *))(*(void *)a1 + 112LL))(a1, v11, a4);
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v11);
  }

  return v5;
}

uint64_t unorm2_hasBoundaryBefore(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
}

uint64_t unorm2_hasBoundaryAfter(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128LL))(a1);
}

uint64_t unorm2_isInert(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136LL))(a1);
}

uint8_t u_getCombiningClass(UChar32 c)
{
  uint64_t v1 = *(void *)&c;
  int v5 = 0;
  uint64_t v2 = sub_1807E7E94(&v5);
  if (v5 > 0) {
    return 0;
  }
  if (v2) {
    uint64_t v4 = v2 + 32;
  }
  else {
    uint64_t v4 = 0LL;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 80LL))(v4, v1);
}

uint64_t sub_1807E8B10(signed int a1)
{
  int v4 = 0;
  uint64_t v2 = (void *)sub_1807E7E94(&v4);
  if (v2) {
    uint64_t v2 = (void *)*v2;
  }
  if (v4 <= 0) {
    return sub_1807E8B6C((uint64_t)v2, a1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1807E8B6C(uint64_t a1, signed int a2)
{
  if (a2 < 0x10000
    && (*(_BYTE *)(*(void *)(a1 + 56) + (a2 >> 8))
      ? (BOOL v2 = ((1 << (a2 >> 5)) & *(unsigned __int8 *)(*(void *)(a1 + 56) + (a2 >> 8))) == 0)
      : (BOOL v2 = 1),
        v2))
  {
    return 0LL;
  }

  else
  {
    return icu::Normalizer2Impl::getFCD16FromNormData((icu::Normalizer2Impl *)a1, a2);
  }

icu::UnicodeString *sub_1807E8BB4(void *a1, uint64_t a2, icu::UnicodeString *this, UErrorCode *a4)
{
  __int16 v7 = *(_WORD *)(a2 + 8);
  if ((v7 & 0x11) != 0
    || ((v7 & 2) != 0 ? (uint64_t v9 = a2 + 10) : (uint64_t v9 = *(void *)(a2 + 24)), this == (icu::UnicodeString *)a2 || !v9))
  {
    *a4 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_4:
    icu::UnicodeString::setToBogus(this);
    return this;
  }

  if ((*((_WORD *)this + 4) & 1) != 0) {
    __int16 v11 = 2;
  }
  else {
    __int16 v11 = *((_WORD *)this + 4) & 0x1F;
  }
  *((_WORD *)this + 4) = v11;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  uint64_t v19 = a1[1];
  unint64_t v20 = this;
  __int128 v21 = 0u;
  *(void *)((char *)&v22 + 5) = 0LL;
  unsigned int v12 = *(unsigned __int16 *)(a2 + 8);
  int v13 = (__int16)v12;
  int v14 = v12 >> 5;
  if (v13 >= 0) {
    int v15 = v14;
  }
  else {
    int v15 = *(_DWORD *)(a2 + 12);
  }
  if (icu::ReorderingBuffer::init((icu::ReorderingBuffer *)&v19, v15, a4))
  {
    unsigned int v16 = *(unsigned __int16 *)(a2 + 8);
    int v17 = (__int16)v16;
    unsigned int v18 = v16 >> 5;
    if (v17 < 0) {
      unsigned int v18 = *(_DWORD *)(a2 + 12);
    }
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t *, UErrorCode *))(*a1 + 144LL))( a1,  v9,  v9 + 2LL * (int)v18,  &v19,  a4);
  }

  if ((void)v21) {
    icu::UnicodeString::releaseBuffer((uint64_t)v20, ((void)v22 - (void)v21) >> 1);
  }
  return this;
}

uint64_t sub_1807E8CF0(void *a1, uint64_t a2, uint64_t a3, UErrorCode *a4)
{
  return sub_1807E98A8(a1, a2, a3, 1LL, a4);
}

uint64_t sub_1807E8CFC(void *a1, uint64_t a2, uint64_t a3, UErrorCode *a4)
{
  return sub_1807E98A8(a1, a2, a3, 0LL, a4);
}

const UChar *sub_1807E8D08(uint64_t a1, signed int a2, uint64_t a3)
{
  v12[1] = *MEMORY[0x1895F89C0];
  v12[0] = 0LL;
  unsigned int v11 = 0;
  uint64_t result = icu::Normalizer2Impl::getDecomposition(*(void *)(a1 + 8), a2, v12, (int *)&v11);
  if (result)
  {
    if (result == (const UChar *)v12)
    {
      uint64_t v5 = v11;
      icu::UnicodeString::unBogus(a3);
      unsigned int v6 = *(unsigned __int16 *)(a3 + 8);
      int v7 = (__int16)v6;
      unsigned int v8 = v6 >> 5;
      if (v7 >= 0) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = *(unsigned int *)(a3 + 12);
      }
      icu::UnicodeString::doReplace(a3, 0LL, v9, (uint64_t)v12, 0, v5);
    }

    else
    {
      uint64_t v10 = result;
      icu::UnicodeString::setTo((icu::UnicodeString *)a3, 0, &v10, v11);
    }

    return (const UChar *)1;
  }

  return result;
}

unsigned __int16 *sub_1807E8DE8(uint64_t a1, signed int a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  memset(v12, 0, 60);
  unsigned int v11 = 0;
  uint64_t result = icu::Normalizer2Impl::getRawDecomposition(*(void *)(a1 + 8), a2, v12, (int *)&v11);
  if (result)
  {
    if (result == (unsigned __int16 *)v12)
    {
      uint64_t v5 = v11;
      icu::UnicodeString::unBogus(a3);
      unsigned int v6 = *(unsigned __int16 *)(a3 + 8);
      int v7 = (__int16)v6;
      unsigned int v8 = v6 >> 5;
      if (v7 >= 0) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = *(unsigned int *)(a3 + 12);
      }
      icu::UnicodeString::doReplace(a3, 0LL, v9, (uint64_t)v12, 0, v5);
    }

    else
    {
      uint64_t v10 = result;
      icu::UnicodeString::setTo((icu::UnicodeString *)a3, 0, &v10, v11);
    }

    return (unsigned __int16 *)1;
  }

  return result;
}

uint64_t sub_1807E8ED4(uint64_t a1, unsigned int a2, const unsigned __int16 *a3)
{
  return icu::Normalizer2Impl::composePair(*(icu::Normalizer2Impl **)(a1 + 8), a2, a3);
}

uint64_t sub_1807E8EDC(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned int v3 = sub_1807E9A8C(v2, a2);
  if (v3 >> 10 >= 0x3F) {
    return (v3 >> 1);
  }
  if (*(unsigned __int16 *)(v2 + 18) <= v3 && *(unsigned __int16 *)(v2 + 26) > v3)
  {
    uint64_t v5 = (_WORD *)(*(void *)(v2 + 48) + ((unsigned __int16)v3 & 0xFFFE));
    if ((*v5 & 0x80) != 0) {
      return *((unsigned __int8 *)v5 - 2);
    }
  }

  return 0LL;
}

BOOL sub_1807E8F4C(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 > 0) {
    return 0LL;
  }
  unsigned int v4 = *(unsigned __int16 *)(a2 + 8);
  if ((v4 & 0x11) != 0) {
    goto LABEL_4;
  }
  if ((v4 & 2) != 0)
  {
    uint64_t v5 = a2 + 10;
  }

  else
  {
    uint64_t v5 = *(void *)(a2 + 24);
    if (!v5)
    {
LABEL_4:
      BOOL result = 0LL;
      *a3 = 1;
      return result;
    }
  }

  int v6 = (__int16)v4;
  unsigned int v7 = v4 >> 5;
  if (v6 < 0) {
    unsigned int v7 = *(_DWORD *)(a2 + 12);
  }
  return v5 + 2LL * (int)v7 == (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 160LL))( a1,  v5,  v5 + 2LL * (int)v7,  a3);
}

BOOL sub_1807E8FE4(uint64_t a1, uint64_t a2, int *a3)
{
  return sub_1807E8F4C(a1, a2, a3);
}

unint64_t sub_1807E9000(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 > 0) {
    return 0LL;
  }
  unsigned int v4 = *(unsigned __int16 *)(a2 + 8);
  if ((v4 & 0x11) != 0) {
    goto LABEL_4;
  }
  if ((v4 & 2) != 0)
  {
    uint64_t v5 = a2 + 10;
  }

  else
  {
    uint64_t v5 = *(void *)(a2 + 24);
    if (!v5)
    {
LABEL_4:
      unint64_t result = 0LL;
      *a3 = 1;
      return result;
    }
  }

  int v6 = (__int16)v4;
  unsigned int v7 = v4 >> 5;
  if (v6 < 0) {
    unsigned int v7 = *(_DWORD *)(a2 + 12);
  }
  return (unint64_t)((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 160LL))( a1,  v5,  v5 + 2LL * (int)v7,  a3)
                          - v5) >> 1;
}

uint64_t sub_1807E9094()
{
  return 1LL;
}

uint64_t sub_1807E909C( uint64_t result, icu::ByteSink *a2, icu::ByteSinkUtil *a3, int a4, icu::ByteSink *a5, icu::Edits *a6, UErrorCode *a7)
{
  if (*(int *)a7 <= 0)
  {
    uint64_t v13 = result;
    if (((unsigned __int16)a2 & 0x2000) == 0)
    {
      if (a6) {
        icu::Edits::reset((uint64_t)a6);
      }
    }

    icu::Normalizer2Impl::decomposeUTF8( *(icu::Normalizer2Impl **)(v13 + 8),  (unint64_t)a2,  a3,  (unsigned __int8 *)a3 + a4,  a5,  a6,  a7);
    return (*(uint64_t (**)(icu::ByteSink *))(*(void *)a5 + 32LL))(a5);
  }

  return result;
}

BOOL sub_1807E9148(uint64_t a1, icu::ByteSinkUtil *a2, int a3, UErrorCode *a4)
{
  return *(int *)a4 <= 0
      && (unsigned __int8 *)((char *)a2 + a3) == icu::Normalizer2Impl::decomposeUTF8( *(icu::Normalizer2Impl **)(a1 + 8),  0LL,  a2,  (unsigned __int8 *)a2 + a3,  0LL,  0LL,  a4);
}

BOOL sub_1807E91A4(uint64_t a1, signed int a2)
{
  return icu::Normalizer2Impl::hasDecompBoundaryBefore(*(icu::Normalizer2Impl **)(a1 + 8), a2);
}

BOOL sub_1807E91AC(uint64_t a1, signed int a2)
{
  return icu::Normalizer2Impl::hasDecompBoundaryAfter(*(icu::Normalizer2Impl **)(a1 + 8), a2);
}

BOOL sub_1807E91B4(uint64_t a1, unsigned int a2)
{
  return sub_1807E9B14(*(void *)(a1 + 8), a2);
}

UChar *sub_1807E91BC(uint64_t a1, UChar *a2, UChar *a3, UChar **a4, UErrorCode *a5)
{
  return icu::Normalizer2Impl::decompose(*(void *)(a1 + 8), a2, a3, a4, a5);
}

UChar *sub_1807E91C4( uint64_t a1, UChar *a2, UChar *a3, int a4, icu::UnicodeString *a5, UChar **a6, UErrorCode *a7)
{
  return icu::Normalizer2Impl::decomposeAndAppend(*(void *)(a1 + 8), a2, a3, a4, a5, a6, a7);
}

UChar *sub_1807E91CC(uint64_t a1, UChar *a2, UChar *a3, UErrorCode *a4)
{
  return icu::Normalizer2Impl::decompose(*(void *)(a1 + 8), a2, a3, 0LL, a4);
}

BOOL sub_1807E91DC(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned int v3 = sub_1807E9A8C(v2, a2);
  return *(unsigned __int16 *)(v2 + 14) > v3 || *(unsigned __int16 *)(v2 + 30) <= v3;
}

uint64_t sub_1807E9220( uint64_t result, icu::ByteSink *a2, icu::ByteSinkUtil *a3, int a4, icu::ByteSink *a5, icu::Edits *a6, UErrorCode *a7)
{
  if (*(int *)a7 <= 0)
  {
    uint64_t v13 = result;
    if (((unsigned __int16)a2 & 0x2000) == 0)
    {
      if (a6) {
        icu::Edits::reset((uint64_t)a6);
      }
    }

    icu::Normalizer2Impl::composeUTF8( *(icu::Normalizer2Impl **)(v13 + 8),  a2,  *(char *)(v13 + 16),  a3,  (unsigned __int8 *)a3 + a4,  a5,  a6,  a7);
    return (*(uint64_t (**)(icu::ByteSink *))(*(void *)a5 + 32LL))(a5);
  }

  return result;
}

uint64_t sub_1807E92D0(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  __int16 v6 = *(_WORD *)(a2 + 8);
  if ((v6 & 0x11) != 0)
  {
LABEL_4:
    uint64_t v3 = 0LL;
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    return v3;
  }

  if ((v6 & 2) != 0)
  {
    unsigned int v8 = (UChar *)(a2 + 10);
  }

  else
  {
    unsigned int v8 = *(UChar **)(a2 + 24);
    if (!v8) {
      goto LABEL_4;
    }
  }

  __int128 v20 = 0u;
  __int128 v21 = 0u;
  uint64_t v23 = 0LL;
  __int128 v22 = 0u;
  uint64_t v19 = off_18971B688;
  LOWORD(v20) = 2;
  __int128 v18 = 0u;
  int v14 = *(UChar **)(a1 + 8);
  int v15 = (icu::UnicodeString *)&v19;
  __int128 v17 = 0u;
  __int128 v16 = 0u;
  *(void *)((char *)&v17 + 5) = 0LL;
  if (icu::ReorderingBuffer::init((icu::ReorderingBuffer *)&v14, 5, a3))
  {
    unsigned int v9 = *(unsigned __int16 *)(a2 + 8);
    int v10 = (__int16)v9;
    unsigned int v11 = v9 >> 5;
    if (v10 < 0) {
      unsigned int v11 = *(_DWORD *)(a2 + 12);
    }
    uint64_t v3 = icu::Normalizer2Impl::compose(*(void *)(a1 + 8), v8, &v8[v11], *(char *)(a1 + 16), 0, &v14, a3);
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  unsigned int v12 = (void *)v16;
  if ((void)v16) {
    icu::UnicodeString::releaseBuffer((uint64_t)v15, ((void)v17 - (void)v16) >> 1);
  }
  icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v19);
  return v3;
}

uint64_t sub_1807E943C(uint64_t a1, icu::ByteSinkUtil *a2, int a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0) {
    return icu::Normalizer2Impl::composeUTF8( *(icu::Normalizer2Impl **)(a1 + 8),  0LL,  *(char *)(a1 + 16),  a2,  (unsigned __int8 *)a2 + a3,  0LL,  0LL,  a4);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1807E947C(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 > 0) {
    return 2LL;
  }
  unsigned int v3 = *(unsigned __int16 *)(a2 + 8);
  if ((v3 & 0x11) != 0)
  {
LABEL_3:
    *a3 = 1;
    return 2LL;
  }

  if ((v3 & 2) != 0)
  {
    uint64_t v5 = (UChar *)(a2 + 10);
  }

  else
  {
    uint64_t v5 = *(UChar **)(a2 + 24);
    if (!v5) {
      goto LABEL_3;
    }
  }

  int v6 = (__int16)v3;
  unsigned int v8 = 1;
  unsigned int v7 = v3 >> 5;
  if (v6 < 0) {
    unsigned int v7 = *(_DWORD *)(a2 + 12);
  }
  icu::Normalizer2Impl::composeQuickCheck(*(void *)(a1 + 8), v5, &v5[v7], *(char *)(a1 + 16), &v8);
  return v8;
}

BOOL sub_1807E9510(uint64_t a1, signed int a2)
{
  return sub_1807E9B68(*(unsigned __int16 **)(a1 + 8), a2);
}

BOOL sub_1807E9518(uint64_t a1, unsigned int a2)
{
  return sub_1807E9BC8(*(void *)(a1 + 8), a2, *(char *)(a1 + 16));
}

BOOL sub_1807E9528(uint64_t a1, unsigned int a2)
{
  return sub_1807E9C38(*(void *)(a1 + 8), a2, *(char *)(a1 + 16));
}

uint64_t sub_1807E9538(uint64_t a1, UChar *a2, unsigned __int16 *a3, UChar **this, UErrorCode *a5)
{
  return icu::Normalizer2Impl::compose(*(void *)(a1 + 8), a2, a3, *(char *)(a1 + 16), 1, this, a5);
}

void *sub_1807E9554( uint64_t a1, UChar *a2, unsigned __int16 *a3, int a4, UChar **a5, icu::ReorderingBuffer *this, UErrorCode *a7)
{
  return icu::Normalizer2Impl::composeAndAppend(*(void *)(a1 + 8), a2, a3, a4, *(char *)(a1 + 16), a5, this, a7);
}

UChar *sub_1807E9570(uint64_t a1, UChar *a2, UChar *a3)
{
  return icu::Normalizer2Impl::composeQuickCheck(*(void *)(a1 + 8), a2, a3, *(char *)(a1 + 16), 0LL);
}

uint64_t sub_1807E9584(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned int v3 = sub_1807E9A8C(v2, a2);
  else {
    return 2 * (*(unsigned __int16 *)(v2 + 30) <= v3);
  }
}

BOOL sub_1807E95D4(uint64_t a1, signed int a2)
{
  return icu::Normalizer2Impl::hasDecompBoundaryBefore(*(icu::Normalizer2Impl **)(a1 + 8), a2);
}

BOOL sub_1807E95DC(uint64_t a1, signed int a2)
{
  return icu::Normalizer2Impl::hasDecompBoundaryAfter(*(icu::Normalizer2Impl **)(a1 + 8), a2);
}

BOOL sub_1807E95E4(uint64_t a1, signed int a2)
{
  return sub_1807E8B6C(*(void *)(a1 + 8), a2) < 2;
}

unsigned __int16 *sub_1807E9604(uint64_t a1, UChar *a2, UChar *a3, UChar **a4, UErrorCode *a5)
{
  return icu::Normalizer2Impl::makeFCD(*(icu::Normalizer2Impl **)(a1 + 8), a2, a3, a4, a5);
}

unsigned __int16 *sub_1807E960C( uint64_t a1, UChar *a2, unsigned __int16 *a3, int a4, UChar **a5, icu::ReorderingBuffer *a6, UErrorCode *a7)
{
  return icu::Normalizer2Impl::makeFCDAndAppend(*(icu::Normalizer2Impl **)(a1 + 8), a2, a3, a4, a5, a6, a7);
}

unsigned __int16 *sub_1807E9614(uint64_t a1, UChar *a2, UChar *a3, UErrorCode *a4)
{
  return icu::Normalizer2Impl::makeFCD(*(icu::Normalizer2Impl **)(a1 + 8), a2, a3, 0LL, a4);
}

UChar **sub_1807E9624(uint64_t a1, UChar **a2, UChar **a3, int *a4)
{
  if (*a4 <= 0)
  {
    if (a3 == a2) {
      *a4 = 1;
    }
    else {
      icu::UnicodeString::operator=(a3, a2);
    }
  }

  return a3;
}

uint64_t sub_1807E966C(int a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, icu::Edits *this, int *a7)
{
  if (*a7 <= 0)
  {
    if (this)
    {
      if ((a2 & 0x2000) == 0) {
        icu::Edits::reset((uint64_t)this);
      }
      icu::Edits::addUnchanged(this, a4);
    }

    if ((a2 & 0x4000) == 0) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a5 + 16LL))(a5, a3, a4);
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)a5 + 32LL))(a5);
  }

  return result;
}

icu::UnicodeString *sub_1807E970C(int a1, icu::UnicodeString *this, icu::UnicodeString *a3, int *a4)
{
  if (*a4 <= 0)
  {
    if (this == a3)
    {
      *a4 = 1;
    }

    else
    {
      unsigned int v5 = *((unsigned __int16 *)a3 + 4);
      int v6 = (__int16)v5;
      unsigned int v7 = v5 >> 5;
      if (v6 >= 0) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = *((unsigned int *)a3 + 3);
      }
      icu::UnicodeString::doAppend((uint64_t)this, a3, 0, v8);
    }
  }

  return this;
}

icu::UnicodeString *sub_1807E9774(int a1, icu::UnicodeString *this, icu::UnicodeString *a3, int *a4)
{
  if (*a4 <= 0)
  {
    if (this == a3)
    {
      *a4 = 1;
    }

    else
    {
      unsigned int v5 = *((unsigned __int16 *)a3 + 4);
      int v6 = (__int16)v5;
      unsigned int v7 = v5 >> 5;
      if (v6 >= 0) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = *((unsigned int *)a3 + 3);
      }
      icu::UnicodeString::doAppend((uint64_t)this, a3, 0, v8);
    }
  }

  return this;
}

uint64_t sub_1807E97DC()
{
  return 0LL;
}

BOOL sub_1807E97E4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  return *a3 < 1;
}

BOOL sub_1807E97F4(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  return *a4 < 1;
}

uint64_t sub_1807E9804()
{
  return 1LL;
}

uint64_t sub_1807E980C(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a2 + 8);
  int v3 = (__int16)v2;
  unsigned int v4 = v2 >> 5;
  if (v3 >= 0) {
    return v4;
  }
  else {
    return *(unsigned int *)(a2 + 12);
  }
}

uint64_t sub_1807E9828()
{
  return 1LL;
}

uint64_t sub_1807E9830()
{
  return 1LL;
}

uint64_t sub_1807E9838()
{
  return 1LL;
}

uint64_t sub_1807E9840()
{
  if (qword_18C534DD0) {
    (*(void (**)(uint64_t))(*(void *)qword_18C534DD0 + 8LL))(qword_18C534DD0);
  }
  qword_18C534DD0 = 0LL;
  atomic_store(0, &dword_18C534DD8);
  if (qword_18C448A40)
  {
    uint64_t v0 = sub_1807E7D08((uint64_t *)qword_18C448A40);
    icu::UMemory::operator delete(v0);
  }

  qword_18C448A40 = 0LL;
  atomic_store(0, &dword_18C448A48);
  return 1LL;
}

uint64_t sub_1807E98A8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  if (*(int *)a5 <= 0)
  {
    unsigned int v7 = *(unsigned __int16 *)(a2 + 8);
    if ((v7 & 1) != 0
      || (unsigned int v9 = *(unsigned __int16 *)(a3 + 8), (v9 & 0x11) != 0)
      || ((v9 & 2) != 0 ? (uint64_t v11 = a3 + 10) : (uint64_t v11 = *(void *)(a3 + 24)), a2 == a3 || !v11))
    {
      *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    }

    else
    {
      unsigned int v14 = *(_DWORD *)(a2 + 12);
      int v15 = (__int16)v9;
      __int128 v31 = 0u;
      __int128 v32 = 0u;
      int v16 = (__int16)v7;
      unsigned int v17 = v7 >> 5;
      if (v16 >= 0) {
        unsigned int v18 = v17;
      }
      else {
        unsigned int v18 = v14;
      }
      uint64_t v34 = 0LL;
      __int128 v33 = 0uLL;
      uint64_t v30 = off_18971B688;
      LOWORD(v31) = 2;
      __int128 v29 = 0uLL;
      uint64_t v25 = a1[1];
      uint64_t v26 = (icu::UnicodeString *)a2;
      __int128 v28 = 0uLL;
      __int128 v27 = 0uLL;
      unsigned int v19 = v9 >> 5;
      if (v15 < 0) {
        unsigned int v19 = *(_DWORD *)(a3 + 12);
      }
      *(void *)((char *)&v28 + 5) = 0LL;
      if (icu::ReorderingBuffer::init((icu::ReorderingBuffer *)&v25, v19 + v18, a5))
      {
        unsigned int v20 = *(unsigned __int16 *)(a3 + 8);
        int v21 = (__int16)v20;
        unsigned int v22 = v20 >> 5;
        if (v21 < 0) {
          unsigned int v22 = *(_DWORD *)(a3 + 12);
        }
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t, void (***)(icu::UnicodeString *__hidden), uint64_t *, UErrorCode *))(*a1 + 152LL))( a1,  v11,  v11 + 2LL * (int)v22,  a4,  &v30,  &v25,  a5);
      }

      if ((void)v27) {
        icu::UnicodeString::releaseBuffer((uint64_t)v26, ((void)v28 - (void)v27) >> 1);
      }
      uint64_t v23 = (void *)*(unsigned int *)a5;
      if ((int)v23 >= 1)
      {
        if ((v31 & 0x8000u) == 0LL) {
          uint64_t v24 = (unsigned __int16)v31 >> 5;
        }
        else {
          uint64_t v24 = DWORD1(v31);
        }
        icu::UnicodeString::doReplace( (icu::UnicodeString *)a2,  v18 - v24,  0x7FFFFFFFLL,  (const icu::UnicodeString *)&v30,  0,  v24);
      }

      icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v30);
    }
  }

  return a2;
}

uint64_t sub_1807E9A8C(uint64_t a1, unsigned int a2)
{
  if (a2 >> 10 == 54) {
    return 1LL;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(v3 + 8);
  if (HIWORD(a2))
  {
    if (HIWORD(a2) > 0x10u)
    {
      int v5 = *(_DWORD *)(v3 + 20) - 1;
    }

    else if (*(_DWORD *)(v3 + 24) <= (signed int)a2)
    {
      int v5 = *(_DWORD *)(v3 + 20) - 2;
    }

    else
    {
      int v5 = ucptrie_internalSmallIndex((uint64_t *)v3, a2);
    }
  }

  else
  {
    int v5 = (a2 & 0x3F) + *(unsigned __int16 *)(*(void *)v3 + 2LL * (a2 >> 6));
  }

  return *(unsigned __int16 *)(v4 + 2LL * v5);
}

BOOL sub_1807E9B14(uint64_t a1, unsigned int a2)
{
  unsigned int v3 = sub_1807E9A8C(a1, a2);
  BOOL result = 1LL;
  return result;
}

BOOL sub_1807E9B68(unsigned __int16 *a1, signed int a2)
{
  if (a1[5] > a2) {
    return 1LL;
  }
  unsigned int v3 = sub_1807E9A8C((uint64_t)a1, a2);
  if (a1[11] > v3) {
    return 1LL;
  }
  if (a1[13] <= v3) {
    return a1[15] > v3;
  }
  return 0LL;
}

BOOL sub_1807E9BC8(uint64_t a1, unsigned int a2, int a3)
{
  unsigned int v5 = sub_1807E9A8C(a1, a2);
  if ((v5 & 1) == 0) {
    return 0LL;
  }
  unsigned int v7 = v5;
  BOOL result = 1LL;
  if (a3 && v7 != 1)
  {
    else {
      BOOL v8 = *(unsigned __int16 *)(*(void *)(a1 + 48) + ((unsigned __int16)v7 & 0xFFFE)) >= 0x200u;
    }
    return !v8;
  }

  return result;
}

BOOL sub_1807E9C38(uint64_t a1, unsigned int a2, int a3)
{
  unsigned int v5 = sub_1807E9A8C(a1, a2);
  uint64_t v7 = 1LL;
  if (a3 && v5 != 1) {
    return *(unsigned __int16 *)(*(void *)(a1 + 48) + ((unsigned __int16)v5 & 0xFFFE)) < 0x200u;
  }
  return v7;
}

icu::ReorderingBuffer *icu::ReorderingBuffer::ReorderingBuffer( icu::ReorderingBuffer *this, const icu::Normalizer2Impl *a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  *(void *)this = a2;
  *((void *)this + 1) = a3;
  uint64_t Buffer = icu::UnicodeString::getBuffer(a3, 8);
  *((void *)this + 2) = Buffer;
  *((void *)this + 3) = Buffer;
  *((void *)this + 4) = Buffer;
  uint64_t v7 = *((void *)this + 1);
  if ((*(_BYTE *)(v7 + 8) & 2) != 0) {
    int v8 = 27;
  }
  else {
    int v8 = *(_DWORD *)(v7 + 16);
  }
  *((_DWORD *)this + 10) = v8;
  *((_BYTE *)this + 44) = 0;
  return this;
}

uint64_t icu::ReorderingBuffer::init(icu::ReorderingBuffer *this, int a2, UErrorCode *a3)
{
  uint64_t v5 = *((void *)this + 1);
  else {
    int v6 = *(unsigned __int16 *)(v5 + 8) >> 5;
  }
  uint64_t result = icu::UnicodeString::getBuffer((icu::UnicodeString *)v5, a2);
  *((void *)this + 2) = result;
  if (result)
  {
    uint64_t v8 = result + 2LL * v6;
    *((void *)this + 4) = v8;
    uint64_t v9 = *((void *)this + 1);
    if ((*(_WORD *)(v9 + 8) & 2) != 0) {
      int v10 = 27;
    }
    else {
      int v10 = *(_DWORD *)(v9 + 16);
    }
    *((_DWORD *)this + 10) = v10 - v6;
    *((void *)this + 3) = result;
    if (v6)
    {
      *((void *)this + 6) = v8;
      unsigned int v11 = icu::ReorderingBuffer::previousCC(this);
      *((_BYTE *)this + 44) = v11;
      if (v11 >= 2)
      {
      }

      *((void *)this + 3) = *((void *)this + 7);
    }

    else
    {
      *((_BYTE *)this + 44) = 0;
    }

    return 1LL;
  }

  else
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }

  return result;
}

uint64_t icu::ReorderingBuffer::previousCC(icu::ReorderingBuffer *this)
{
  unint64_t v1 = *((void *)this + 6);
  *((void *)this + 7) = v1;
  if (*((void *)this + 3) >= v1) {
    goto LABEL_7;
  }
  unsigned int v2 = *(unsigned __int16 *)(v1 - 2);
  *((void *)this + 6) = v1 - 2;
  if ((v2 & 0xFC00) == 0xDC00 && *((void *)this + 2) < v1 - 2)
  {
    int v5 = *(unsigned __int16 *)(v1 - 4);
    unint64_t v3 = v1 - 4;
    int v4 = v5;
    if ((v5 & 0xFC00) == 0xD800)
    {
      *((void *)this + 6) = v3;
      unsigned int v2 = v2 + (v4 << 10) - 56613888;
    }
  }

  uint64_t v6 = *(void *)this;
  if (v2 >= *(unsigned __int16 *)(v6 + 10))
  {
    unsigned int v8 = sub_1807E9A8C(v6, v2);
    unsigned int v7 = v8 >> 1;
    if (v8 >> 10 <= 0x3E) {
      LOBYTE(v7) = 0;
    }
  }

  else
  {
LABEL_7:
    LOBYTE(v7) = 0;
  }

  return v7;
}

BOOL icu::ReorderingBuffer::equals(uint64_t a1, const UChar *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *(const UChar **)(a1 + 16);
  unint64_t v6 = (unint64_t)(v4 - (void)v5) >> 1;
  return (_DWORD)v6 == ((unint64_t)(a3 - (void)a2) >> 1) && u_memcmp(v5, a2, v6) == 0;
}

BOOL icu::ReorderingBuffer::equals( icu::ReorderingBuffer *this, const unsigned __int8 *a2, const unsigned __int8 *a3)
{
  uint64_t v3 = *((void *)this + 2);
  unint64_t v4 = (unint64_t)(*((void *)this + 4) - v3) >> 1;
  int v5 = (_DWORD)a3 - (_DWORD)a2;
  int v7 = 0;
  int v8 = 0;
  while (v7 < (int)v4)
  {
    if (v8 < v5)
    {
      uint64_t v9 = v7 + 1LL;
      int v10 = *(unsigned __int16 *)(v3 + 2LL * v7);
      if ((v10 & 0xFC00) == 0xD800)
      {
        v7 += 2;
        int v10 = *(unsigned __int16 *)(v3 + 2 * v9) + (v10 << 10) - 56613888;
      }

      else
      {
        ++v7;
      }

      uint64_t v11 = v8 + 1LL;
      unsigned int v12 = a2[v8];
      if ((char)a2[v8] < 0)
      {
        if (v12 > 0xDF)
        {
          if (v12 > 0xEF)
          {
            unsigned int v12 = ((v12 & 7) << 18) | ((a2[v11] & 0x3F) << 12) | ((a2[v8 + 2] & 0x3F) << 6) | a2[v8 + 3] & 0x3F;
            v8 += 4;
          }

          else
          {
            unsigned int v12 = ((v12 & 0xF) << 12) | ((a2[v11] & 0x3F) << 6) | a2[v8 + 2] & 0x3F;
            v8 += 3;
          }
        }

        else
        {
          v8 += 2;
          unsigned int v12 = a2[v11] & 0x3F | ((v12 & 0x1F) << 6);
        }
      }

      else
      {
        ++v8;
      }

      if (v10 == v12) {
        continue;
      }
    }

    return 0LL;
  }

  return v8 >= v5;
}

uint64_t icu::ReorderingBuffer::appendSupplementary( icu::ReorderingBuffer *this, unsigned int a2, unsigned int a3, UErrorCode *a4)
{
  if (*((int *)this + 10) > 1 || (uint64_t result = icu::ReorderingBuffer::resize(this, 2, a4), (_DWORD)result))
  {
    if (a3 && *((unsigned __int8 *)this + 44) > a3)
    {
      icu::ReorderingBuffer::insert(this, a2, a3);
    }

    else
    {
      int v8 = (_WORD *)*((void *)this + 4);
      *int v8 = (a2 >> 10) - 10304;
      v8[1] = a2 & 0x3FF | 0xDC00;
      *((void *)this + 4) = v8 + 2;
      *((_BYTE *)this + 44) = a3;
      if (a3 <= 1) {
        *((void *)this + 3) = v8 + 2;
      }
    }

    *((_DWORD *)this + 10) -= 2;
    return 1LL;
  }

  return result;
}

uint64_t icu::ReorderingBuffer::resize(icu::ReorderingBuffer *this, int a2, UErrorCode *a3)
{
  uint64_t v6 = *((void *)this + 3);
  uint64_t v7 = *((void *)this + 2);
  unint64_t v8 = (unint64_t)(*((void *)this + 4) - v7) >> 1;
  icu::UnicodeString::releaseBuffer(*((void *)this + 1), v8);
  int v9 = v8 + a2;
  uint64_t v10 = *((void *)this + 1);
  if ((*(_WORD *)(v10 + 8) & 2) != 0) {
    int v11 = 54;
  }
  else {
    int v11 = 2 * *(_DWORD *)(v10 + 16);
  }
  if (v9 <= v11) {
    int v9 = v11;
  }
  if (v9 <= 256) {
    int v12 = 256;
  }
  else {
    int v12 = v9;
  }
  uint64_t result = icu::UnicodeString::getBuffer((icu::UnicodeString *)v10, v12);
  *((void *)this + 2) = result;
  if (result)
  {
    *((void *)this + 3) = result + 2LL * (int)((unint64_t)(v6 - v7) >> 1);
    *((void *)this + 4) = result + 2LL * (int)v8;
    uint64_t v14 = *((void *)this + 1);
    if ((*(_WORD *)(v14 + 8) & 2) != 0) {
      int v15 = 27;
    }
    else {
      int v15 = *(_DWORD *)(v14 + 16);
    }
    *((_DWORD *)this + 10) = v15 - v8;
    return 1LL;
  }

  else
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }

  return result;
}

uint64_t icu::ReorderingBuffer::insert(icu::ReorderingBuffer *this, int a2, unsigned int a3)
{
  uint64_t v6 = *((void *)this + 4);
  __int16 v7 = *(_WORD *)(v6 - 2);
  *((void *)this + 6) = v6 - 2;
  *((void *)this + 7) = v6;
  if ((v7 & 0xFC00) == 0xDC00 && *((void *)this + 2) < (unint64_t)(v6 - 2))
  {
    __int16 v9 = *(_WORD *)(v6 - 4);
    uint64_t v8 = v6 - 4;
    if ((v9 & 0xFC00) == 0xD800) {
      *((void *)this + 6) = v8;
    }
  }

  do
    uint64_t result = icu::ReorderingBuffer::previousCC(this);
  while (result > a3);
  int v11 = (_WORD *)*((void *)this + 4);
  uint64_t v12 = 1LL;
  *((void *)this + 4) = &v11[v12];
  uint64_t v13 = (_WORD *)*((void *)this + 7);
  do
  {
    uint64_t v14 = &v11[v12];
    __int16 v15 = *--v11;
    *(v14 - 1) = v15;
  }

  while (v11 != v13);
  if (a2 >= 0x10000)
  {
    __int16 v16 = a2 & 0x3FF | 0xDC00;
    a2 = (a2 >> 10) - 10304;
    v11[1] = v16;
  }

  *uint64_t v13 = a2;
  if (a3 <= 1) {
    *((void *)this + 3) = &v11[v12];
  }
  return result;
}

uint64_t icu::ReorderingBuffer::append( icu::ReorderingBuffer *this, unsigned __int16 *a2, int a3, int a4, unsigned int a5, unsigned int a6, UErrorCode *a7)
{
  if (!a3) {
    return 1LL;
  }
  int v14 = *((_DWORD *)this + 10);
  if (v14 < a3)
  {
    uint64_t result = icu::ReorderingBuffer::resize(this, a3, a7);
    if (!(_DWORD)result) {
      return result;
    }
    int v14 = *((_DWORD *)this + 10);
  }

  *((_DWORD *)this + 10) = v14 - a3;
  if (a5 && *((unsigned __int8 *)this + 44) > a5)
  {
    int v16 = *a2;
    int v17 = 1;
    if (a3 != 1 && (v16 & 0xFC00) == 0xD800)
    {
      int v18 = a2[1];
      BOOL v19 = (v18 & 0xFC00) == 56320;
      int v20 = v18 + (v16 << 10) - 56613888;
      int v17 = v19 ? 2 : 1;
      if (v19) {
        int v16 = v20;
      }
    }

    icu::ReorderingBuffer::insert(this, v16, a5);
    if (v17 < a3)
    {
      while (1)
      {
        uint64_t v21 = v17 + 1LL;
        unsigned int v22 = a2[v17];
        if ((v22 & 0xFC00) != 0xD800 || (_DWORD)v21 == a3)
        {
          ++v17;
        }

        else
        {
          int v24 = a2[v21];
          BOOL v25 = (v24 & 0xFC00) == 56320;
          unsigned int v26 = (v22 << 10) - 56613888 + v24;
          if (v25) {
            v17 += 2;
          }
          else {
            ++v17;
          }
          if (v25) {
            unsigned int v22 = v26;
          }
        }

        if (v17 >= a3) {
          break;
        }
        uint64_t v27 = *(void *)this;
        if (a4)
        {
          unsigned int v28 = sub_1807EA4C4(*(void *)this, v22);
          LODWORD(v29) = v28 >> 1;
          if (v28 >> 10 <= 0x3E) {
            LOBYTE(v29) = 0;
          }
        }

        else
        {
          unsigned int v30 = sub_1807E9A8C(*(void *)this, v22);
          if (v30 >> 10 < 0x3F)
          {
            if (*(unsigned __int16 *)(v27 + 18) <= v30
              && *(unsigned __int16 *)(v27 + 26) > v30
              && (__int128 v29 = (_WORD *)(*(void *)(v27 + 48) + ((unsigned __int16)v30 & 0xFFFE)), (*v29 & 0x80) != 0))
            {
              LOBYTE(v29) = *((_BYTE *)v29 - 2);
            }

            else
            {
              LOBYTE(v29) = 0;
            }
          }

          else
          {
            LODWORD(v29) = v30 >> 1;
          }
        }

        sub_1807EA538(this, v22, v29, a7);
      }

      sub_1807EA538(this, v22, a6, a7);
    }

    return 1LL;
  }

  if (a6 > 1)
  {
    __int128 v31 = (_WORD *)*((void *)this + 4);
    if (a5 > 1) {
      goto LABEL_47;
    }
    __int128 v32 = v31 + 1;
  }

  else
  {
    __int128 v31 = (_WORD *)*((void *)this + 4);
    __int128 v32 = &v31[a3];
  }

  *((void *)this + 3) = v32;
LABEL_47:
  uint64_t v33 = 2LL * a3;
  do
  {
    __int16 v34 = *a2++;
    *v31++ = v34;
    v33 -= 2LL;
  }

  while (v33);
  *((void *)this + 4) = v31;
  *((_BYTE *)this + 44) = a6;
  return 1LL;
}

uint64_t sub_1807EA4C4(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 8);
  if (HIWORD(a2))
  {
    if (HIWORD(a2) > 0x10u)
    {
      int v4 = *(_DWORD *)(v2 + 20) - 1;
    }

    else if (*(_DWORD *)(v2 + 24) <= (signed int)a2)
    {
      int v4 = *(_DWORD *)(v2 + 20) - 2;
    }

    else
    {
      int v4 = ucptrie_internalSmallIndex((uint64_t *)v2, a2);
    }
  }

  else
  {
    int v4 = (a2 & 0x3F) + *(unsigned __int16 *)(*(void *)v2 + 2LL * (a2 >> 6));
  }

  return *(unsigned __int16 *)(v3 + 2LL * v4);
}

uint64_t sub_1807EA538(icu::ReorderingBuffer *a1, signed int a2, unsigned int a3, UErrorCode *a4)
{
  if (a2 >= 0x10000) {
    return icu::ReorderingBuffer::appendSupplementary(a1, a2, a3, a4);
  }
  else {
    return sub_1807EDA64(a1, (unsigned __int16)a2, a3, a4);
  }
}

uint64_t icu::ReorderingBuffer::appendZeroCC(icu::ReorderingBuffer *this, unsigned int a2, UErrorCode *a3)
{
  if (a2 < 0x10000) {
    int v5 = 1;
  }
  else {
    int v5 = 2;
  }
  int v6 = *((_DWORD *)this + 10);
  if (v6 < v5)
  {
    uint64_t result = icu::ReorderingBuffer::resize(this, v5, a3);
    if (!(_DWORD)result) {
      return result;
    }
    int v6 = *((_DWORD *)this + 10);
  }

  *((_DWORD *)this + 10) = v6 - v5;
  if (HIWORD(a2))
  {
    uint64_t v10 = (_WORD *)*((void *)this + 4);
    *uint64_t v10 = (a2 >> 10) - 10304;
    v10[1] = a2 & 0x3FF | 0xDC00;
    __int16 v9 = v10 + 2;
  }

  else
  {
    uint64_t v8 = (_WORD *)*((void *)this + 4);
    *uint64_t v8 = a2;
    __int16 v9 = v8 + 1;
  }

  *((void *)this + 3) = v9;
  *((void *)this + 4) = v9;
  *((_BYTE *)this + 44) = 0;
  return 1LL;
}

uint64_t icu::ReorderingBuffer::appendZeroCC(UChar **this, UChar *src, UChar *a3, UErrorCode *a4)
{
  if (src == a3) {
    return 1LL;
  }
  unint64_t v6 = (unint64_t)((char *)a3 - (char *)src) >> 1;
  if (*((_DWORD *)this + 10) >= (int)v6
    || (uint64_t result = icu::ReorderingBuffer::resize( (icu::ReorderingBuffer *)this,  (unint64_t)((char *)a3 - (char *)src) >> 1,  a4),  (_DWORD)result))
  {
    u_memcpy(this[4], src, v6);
    uint64_t v8 = (uint64_t)&this[4][(int)v6];
    *((_DWORD *)this + 10) -= v6;
    *((_BYTE *)this + 44) = 0;
    this[3] = (UChar *)v8;
    this[4] = (UChar *)v8;
    return 1LL;
  }

  return result;
}

uint64_t icu::ReorderingBuffer::remove(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 8);
  uint64_t v2 = *(void *)(this + 16);
  *(void *)(this + 24) = v2;
  *(void *)(this + 32) = v2;
  if ((*(_BYTE *)(v1 + 8) & 2) != 0) {
    int v3 = 27;
  }
  else {
    int v3 = *(_DWORD *)(v1 + 16);
  }
  *(_DWORD *)(this + 40) = v3;
  *(_BYTE *)(this + 44) = 0;
  return this;
}

uint64_t icu::ReorderingBuffer::removeSuffix(uint64_t this, int a2)
{
  uint64_t v2 = *(void *)(this + 32);
  uint64_t v3 = *(void *)(this + 16);
  if (a2 >= (v2 - v3) >> 1)
  {
    *(void *)(this + 32) = v3;
    uint64_t v5 = *(void *)(this + 8);
    if ((*(_WORD *)(v5 + 8) & 2) != 0) {
      int v4 = 27;
    }
    else {
      int v4 = *(_DWORD *)(v5 + 16);
    }
  }

  else
  {
    uint64_t v3 = v2 - 2LL * a2;
    *(void *)(this + 32) = v3;
    int v4 = *(_DWORD *)(this + 40) + a2;
  }

  *(_DWORD *)(this + 40) = v4;
  *(_BYTE *)(this + 44) = 0;
  *(void *)(this + 24) = v3;
  return this;
}

void *icu::ReorderingBuffer::skipPrevious(void *this)
{
  uint64_t v1 = this[6];
  __int16 v2 = *(_WORD *)(v1 - 2);
  this[6] = v1 - 2;
  this[7] = v1;
  if ((v2 & 0xFC00) == 0xDC00 && this[2] < (unint64_t)(v1 - 2))
  {
    __int16 v4 = *(_WORD *)(v1 - 4);
    uint64_t v3 = v1 - 4;
    if ((v4 & 0xFC00) == 0xD800) {
      this[6] = v3;
    }
  }

  return this;
}

void icu::Normalizer2Impl::~Normalizer2Impl(icu::Normalizer2Impl *this)
{
  *(void *)this = off_18970F380;
  uint64_t v2 = *((void *)this + 9);
  if (v2)
  {
    uint64_t v3 = (void *)sub_1807EFF34(v2);
    icu::UMemory::operator delete(v3);
  }

  icu::UObject::~UObject(this);
}

{
  void *v1;
  icu::Normalizer2Impl::~Normalizer2Impl(this);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::Normalizer2Impl::init(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5 = a2[9];
  *(_WORD *)(result + 8) = a2[8];
  *(_WORD *)(result + 10) = v5;
  *(_WORD *)(result + 12) = a2[18];
  int v6 = a2[11];
  *(_WORD *)(result + 14) = a2[10];
  int v7 = a2[15];
  *(_WORD *)(result + 16) = a2[14];
  *(_WORD *)(result + 18) = v6;
  *(_WORD *)(result + 20) = v7;
  int v8 = a2[17];
  *(_WORD *)(result + 22) = a2[16];
  *(_WORD *)(result + 24) = v8;
  int v9 = a2[13];
  *(_WORD *)(result + 26) = a2[12];
  *(_WORD *)(result + 28) = ((unsigned __int16)v9 >> 3) - 65;
  *(_WORD *)(result + 30) = v9;
  *(void *)(result + 32) = a3;
  *(void *)(result + 40) = a4;
  *(void *)(result + 48) = a4 + 2LL * ((64512 - (unsigned __int16)v9) >> 1);
  *(void *)(result + 56) = a5;
  return result;
}

uint64_t icu::Normalizer2Impl::addLcccChars(icu::Normalizer2Impl *this, icu::UnicodeSet *a2)
{
  unsigned int v8 = 0;
  uint64_t result = ucptrie_getRange(*((void *)this + 4), 0LL, 1, 1, 0LL, 0LL, (int *)&v8);
  if ((result & 0x80000000) == 0)
  {
    unsigned int v5 = result;
    unsigned int v6 = 0;
    do
    {
      BOOL v7 = v8 < 0xFC01 || v8 == 65024;
      if (!v7
        || v8 >= *((unsigned __int16 *)this + 11)
        && v8 < *((unsigned __int16 *)this + 13)
        && sub_1807E8B6C((uint64_t)this, v6) >= 0x100)
      {
        icu::UnicodeSet::add(a2, v6, v5);
      }

      unsigned int v6 = v5 + 1;
      uint64_t result = ucptrie_getRange(*((void *)this + 4), v5 + 1, 1, 1, 0LL, 0LL, (int *)&v8);
      unsigned int v5 = result;
    }

    while ((result & 0x80000000) == 0);
  }

  return result;
}

uint64_t icu::Normalizer2Impl::addPropertyStarts(uint64_t a1, void *a2)
{
  int v15 = 0;
  int Range = ucptrie_getRange(*(void *)(a1 + 32), 0LL, 1, 1, 0LL, 0LL, &v15);
  if ((Range & 0x80000000) == 0)
  {
    int v5 = Range;
    uint64_t v6 = 0LL;
    do
    {
      ((void (*)(void, uint64_t))a2[1])(*a2, v6);
      if ((_DWORD)v6 != v5
        && *(unsigned __int16 *)(a1 + 26) <= (unsigned __int16)v15
        && (v15 & 6u) >= 3
        && *(unsigned __int16 *)(a1 + 30) > (unsigned __int16)v15)
      {
        unsigned __int16 v8 = sub_1807E8B6C(a1, v6);
        if ((int)v6 < v5)
        {
          unsigned __int16 v9 = v8;
          do
          {
            uint64_t v6 = (v6 + 1);
            int v10 = sub_1807E8B6C(a1, v6);
            if (v10 != v9)
            {
              unsigned __int16 v11 = v10;
              ((void (*)(void, uint64_t))a2[1])(*a2, v6);
              unsigned __int16 v9 = v11;
            }
          }

          while (v5 != (_DWORD)v6);
        }
      }

      uint64_t v6 = (v5 + 1);
      int v5 = ucptrie_getRange(*(void *)(a1 + 32), v6, 1, 1, 0LL, 0LL, &v15);
    }

    while ((v5 & 0x80000000) == 0);
  }

  uint64_t v12 = 44032LL;
  do
  {
    ((void (*)(void, uint64_t))a2[1])(*a2, v12);
    ((void (*)(void, void))a2[1])(*a2, (v12 + 1));
    BOOL v13 = v12 >= 0xD788;
    uint64_t v12 = (v12 + 28);
  }

  while (!v13);
  return ((uint64_t (*)(void, uint64_t))a2[1])(*a2, 55204LL);
}

uint64_t icu::Normalizer2Impl::addCanonIterPropertyStarts( icu::Normalizer2Impl *a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t result = icu::Normalizer2Impl::ensureCanonIterData(a1, a3);
  if ((_DWORD)result)
  {
    int v8 = 0;
    uint64_t result = ucptrie_getRange(*(void *)(*((void *)a1 + 9) + 8LL), 0LL, 0, 0, (uint64_t)sub_1807EAB8C, 0LL, &v8);
    if ((result & 0x80000000) == 0)
    {
      int v6 = result;
      uint64_t v7 = 0LL;
      do
      {
        (*(void (**)(void, uint64_t))(a2 + 8))(*(void *)a2, v7);
        uint64_t v7 = (v6 + 1);
        uint64_t result = ucptrie_getRange(*(void *)(*((void *)a1 + 9) + 8LL), v7, 0, 0, (uint64_t)sub_1807EAB8C, 0LL, &v8);
        int v6 = result;
      }

      while ((result & 0x80000000) == 0);
    }
  }

  return result;
}

BOOL icu::Normalizer2Impl::ensureCanonIterData(icu::Normalizer2Impl *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    __int16 v4 = (unsigned int *)((char *)this + 64);
    unsigned int v5 = atomic_load((unsigned int *)this + 16);
    if (v5 == 2 || !icu::umtx_initImplPreInit((unsigned int *)this + 16))
    {
      UErrorCode v6 = *((_DWORD *)this + 17);
      if (v6 >= U_ILLEGAL_ARGUMENT_ERROR) {
        *a2 = v6;
      }
    }

    else
    {
      sub_1807F00D0((uint64_t)this, (int *)a2);
      *((UErrorCode *)this + 17) = *a2;
      icu::umtx_initImplPostInit(v4);
    }
  }

  return *a2 < U_ILLEGAL_ARGUMENT_ERROR;
}

uint64_t sub_1807EAB8C(uint64_t a1, int a2)
{
  return a2 & 0x80000000;
}

uint64_t icu::Normalizer2Impl::copyLowPrefixFromNulTerminated( int a1, UChar *a2, int a3, UChar **this, UErrorCode *a5)
{
  uint64_t v5 = 0LL;
  do
  {
    int v6 = a2[v5++];
    if (v6) {
      BOOL v7 = v6 < a3;
    }
    else {
      BOOL v7 = 0;
    }
  }

  while (v7);
  uint64_t v8 = (uint64_t)&a2[v5 - 1];
  if (this && v5 != 1) {
    icu::ReorderingBuffer::appendZeroCC(this, a2, &a2[v5 - 1], a5);
  }
  return v8;
}

icu::UnicodeString *icu::Normalizer2Impl::decompose( UChar *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  unint64_t v5 = *((unsigned __int16 *)a2 + 4);
  if ((v5 & 0x11) != 0) {
    goto LABEL_3;
  }
  BOOL v7 = (UChar *)((char *)a2 + 10);
  if ((v5 & 2) == 0) {
    BOOL v7 = (UChar *)*((void *)a2 + 3);
  }
  if (a3 == a2 || !v7)
  {
LABEL_3:
    *a4 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_4:
    icu::UnicodeString::setToBogus(a3);
    return a3;
  }

  int v8 = (__int16)v5;
  unint64_t v9 = v5 >> 5;
  BOOL v10 = v8 < 0;
  if (v8 >= 0) {
    unint64_t v11 = v9;
  }
  else {
    unint64_t v11 = *((int *)a2 + 3);
  }
  if (v10) {
    int v12 = *((_DWORD *)a2 + 3);
  }
  else {
    int v12 = v9;
  }
  icu::Normalizer2Impl::decompose(this, v7, &v7[v11], a3, v12, a4);
  return a3;
}

UChar *icu::Normalizer2Impl::decompose( UChar *a1, UChar *a2, UChar *a3, icu::UnicodeString *a4, int a5, UErrorCode *a6)
{
  if (a5 >= 0 || a3 == 0LL) {
    int v11 = a5;
  }
  else {
    int v11 = (unint64_t)((char *)a3 - (char *)a2) >> 1;
  }
  __int16 v12 = *((_WORD *)a4 + 4) & 0x1F;
  if ((*((_WORD *)a4 + 4) & 1) != 0) {
    __int16 v12 = 2;
  }
  *((_WORD *)a4 + 4) = v12;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  int v14 = a1;
  int v15 = a4;
  __int128 v16 = 0u;
  *(void *)((char *)&v17 + 5) = 0LL;
  uint64_t result = (UChar *)icu::ReorderingBuffer::init((icu::ReorderingBuffer *)&v14, v11, a6);
  if ((_DWORD)result) {
    uint64_t result = icu::Normalizer2Impl::decompose((uint64_t)a1, a2, a3, &v14, a6);
  }
  if ((void)v16) {
    return (UChar *)icu::UnicodeString::releaseBuffer((uint64_t)v15, ((void)v17 - (void)v16) >> 1);
  }
  return result;
}

UChar *icu::Normalizer2Impl::decompose(uint64_t a1, UChar *src, UChar *a3, UChar **this, UErrorCode *a5)
{
  unint64_t v5 = (int *)a5;
  unsigned int v8 = *(unsigned __int16 *)(a1 + 8);
  if (a3)
  {
    unint64_t v9 = a3;
    BOOL v10 = src;
  }

  else
  {
    uint64_t v31 = 0LL;
    do
    {
      unsigned int v32 = src[v31++];
      if (v32) {
        BOOL v33 = v32 >= v8;
      }
      else {
        BOOL v33 = 1;
      }
    }

    while (!v33);
    BOOL v10 = &src[v31 - 1];
    if (this && v31 != 1) {
      icu::ReorderingBuffer::appendZeroCC(this, src, &src[v31 - 1], a5);
    }
    if (*v5 > 0) {
      return v10;
    }
    unint64_t v9 = u_strchr(v10, 0);
  }

  LOWORD(v11) = 0;
  unsigned __int8 v36 = 0;
  __int16 v12 = v10;
  uint64_t v35 = v10;
  __int128 v37 = (icu::ReorderingBuffer *)this;
  while (2)
  {
    BOOL v10 = v12;
    while (2)
    {
      if (v10 == v9) {
        return v9;
      }
      BOOL v13 = (UErrorCode *)v5;
      int v14 = v10;
      while (1)
      {
        unint64_t v15 = *v14;
        if (v15 >= v8)
        {
          uint64_t v16 = *(void *)(a1 + 32);
          uint64_t v17 = *(void *)(v16 + 8);
          unsigned int v11 = *(unsigned __int16 *)(v17
                                    + 2 * ((v15 & 0x3F) + *(unsigned __int16 *)(*(void *)v16 + ((v15 >> 5) & 0x7FE))));
          unsigned int v18 = *(unsigned __int16 *)(a1 + 14);
          if ((v11 & 0xFFFFFDFF) != 0xFC00 && v18 <= v11) {
            break;
          }
        }

        int v20 = v14 + 1;
LABEL_14:
        int v14 = v20;
        if (v20 == v9) {
          goto LABEL_28;
        }
      }

      if ((v15 & 0xFC00) != 0xD800) {
        goto LABEL_29;
      }
      int v20 = v14 + 1;
      if (v14 + 1 != v9)
      {
        int v21 = *v20;
        if ((v21 & 0xFC00) == 0xDC00)
        {
          LODWORD(v15) = v21 + ((_DWORD)v15 << 10) - 56613888;
          if ((int)v15 >= *(_DWORD *)(v16 + 24))
          {
            int v22 = *(_DWORD *)(v16 + 20) - 2;
          }

          else
          {
            int v22 = ucptrie_internalSmallIndex((uint64_t *)v16, v15);
            unsigned int v18 = *(unsigned __int16 *)(a1 + 14);
          }

          unsigned int v11 = *(unsigned __int16 *)(v17 + 2LL * v22);
          if ((v11 & 0xFFFFFDFF) != 0xFC00 && v18 <= v11) {
            goto LABEL_29;
          }
          int v20 = v14 + 2;
        }

        goto LABEL_14;
      }

uint64_t icu::Normalizer2Impl::decompose( icu::Normalizer2Impl *this, signed int a2, unsigned int a3, UChar **a4, UErrorCode *a5)
{
  unsigned int v7 = a2;
  if (*((unsigned __int16 *)this + 13) <= a3)
  {
    if (*((unsigned __int16 *)this + 15) <= a3)
    {
      unsigned int v14 = a3 >> 1;
      if (a3 >> 10 <= 0x3E) {
        LOBYTE(icu::LocaleBuilder::setLanguage((uint64_t)this, v13, v14) = 0;
      }
      unsigned int v11 = v14;
      BOOL v10 = (icu::ReorderingBuffer *)a4;
      return sub_1807EA538(v10, a2, v11, a5);
    }

    unsigned int v7 = a2 + (a3 >> 3) - *((unsigned __int16 *)this + 14);
    a3 = sub_1807EA4C4((uint64_t)this, v7);
  }

  unsigned int v9 = *((unsigned __int16 *)this + 7);
  if (a3 < v9)
  {
    BOOL v10 = (icu::ReorderingBuffer *)a4;
    a2 = v7;
    unsigned int v11 = 0;
    return sub_1807EA538(v10, a2, v11, a5);
  }

  if (v9 == a3 || (*((unsigned __int16 *)this + 8) | 1) == a3)
  {
    __int16 v20 = 0;
    int v12 = (int)(v7 - 44032) % 28;
    src[0] = (__int16)(v7 + 21504) / 588 + 4352;
    src[1] = (int)(v7 - 44032) / 28 % 21 + 4449;
    if (v12)
    {
      __int16 v20 = v12 + 4519;
      uint64_t v13 = 3LL;
    }

    else
    {
      uint64_t v13 = 2LL;
    }

    return icu::ReorderingBuffer::appendZeroCC(a4, src, &src[v13], a5);
  }

  else
  {
    uint64_t v16 = (unsigned __int16 *)(*((void *)this + 6) + ((unsigned __int16)a3 & 0xFFFE));
    unsigned int v17 = *v16;
    if ((v17 & 0x80) != 0) {
      unsigned __int8 v18 = *((_BYTE *)v16 - 1);
    }
    else {
      unsigned __int8 v18 = 0;
    }
    return icu::ReorderingBuffer::append((icu::ReorderingBuffer *)a4, v16 + 1, v17 & 0x1F, 1, v18, v17 >> 8, a5);
  }

unsigned __int16 *icu::Normalizer2Impl::decomposeShort( uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, int a4, int a5, UChar **a6, UErrorCode *a7)
{
  unsigned int v7 = a2;
  if (a2 < a3)
  {
    do
    {
      unint64_t v14 = *v7;
      if (a4)
      {
      }

      unint64_t v15 = v7 + 1;
      if ((v14 & 0xF800) == 0xD800)
      {
        if ((v14 & 0x400) != 0 || v15 == a3 || (int v16 = *v15, (v16 & 0xFC00) != 0xDC00))
        {
          uint64_t v17 = *(void *)(a1 + 32);
          int v18 = *(_DWORD *)(v17 + 20) - 1;
        }

        else
        {
          unint64_t v15 = v7 + 2;
          LODWORD(icu::LocaleBuilder::setLanguage((uint64_t)this, v13, v14) = v16 + ((_DWORD)v14 << 10) - 56613888;
          uint64_t v17 = *(void *)(a1 + 32);
          if ((int)v14 >= *(_DWORD *)(v17 + 24))
          {
            int v18 = *(_DWORD *)(v17 + 20) - 2;
          }

          else
          {
            int v18 = ucptrie_internalSmallIndex((uint64_t *)v17, v14);
            uint64_t v17 = *(void *)(a1 + 32);
          }
        }
      }

      else
      {
        uint64_t v17 = *(void *)(a1 + 32);
        int v18 = (v14 & 0x3F) + *(unsigned __int16 *)(*(void *)v17 + ((v14 >> 5) & 0x7FE));
      }

      uint64_t v19 = *(void *)(v17 + 8);
      unsigned int v20 = *(unsigned __int16 *)(v19 + 2LL * v18);
      if (a4)
      {
        if (*(unsigned __int16 *)(a1 + 22) > v20
          || *(unsigned __int16 *)(a1 + 26) <= v20 && *(unsigned __int16 *)(a1 + 30) > v20)
        {
          return v7;
        }

        if ((v20 & 1) != 0)
        {
          if (!a5 || v20 == 1) {
            return v15;
          }
          if (!(*(unsigned __int16 *)(a1 + 26) <= v20 {
               ? (v20 & 6) >= 3
          }
        }
      }

      else if (!icu::Normalizer2Impl::decompose( (icu::Normalizer2Impl *)a1,  v14,  *(unsigned __int16 *)(v19 + 2LL * v18),  a6,  a7))
      {
        return 0LL;
      }

      unsigned int v7 = v15;
    }

    while (v15 < a3);
  }

  return v7;
}

unsigned __int8 *icu::Normalizer2Impl::decomposeUTF8( icu::Normalizer2Impl *this, unint64_t a2, icu::ByteSinkUtil *a3, unsigned __int8 *a4, icu::ByteSink *a5, icu::Edits *a6, UErrorCode *a7)
{
  unsigned int v8 = a3;
  uint64_t v77 = *MEMORY[0x1895F89C0];
  __int128 v73 = 0u;
  uint64_t v76 = 0LL;
  __int128 v75 = 0u;
  __int128 v74 = 0u;
  int v72 = off_18971B688;
  LOWORD(v73) = 2;
  uint64_t v10 = *((unsigned __int16 *)this + 4);
  else {
    char v11 = -32;
  }
  else {
    unsigned __int8 v12 = v11;
  }
  if (a3 == (icu::ByteSinkUtil *)a4)
  {
    uint64_t v19 = (unsigned __int8 *)a3;
    if (a5)
    {
LABEL_100:
      if (v8 != (icu::ByteSinkUtil *)a4) {
        icu::ByteSinkUtil::appendUnchanged( v8,  a4,  (const unsigned __int8 *)a5,  (icu::ByteSink *)a2,  a6,  (icu::Edits *)a7,  a7);
      }
    }

    goto LABEL_102;
  }

  unsigned int v14 = 0;
  uint64_t v10 = (uint64_t)&v66;
  unint64_t v15 = v68;
  int v16 = " 000000000000\x1000";
  uint64_t v17 = a3;
  while (2)
  {
    int v18 = (const unsigned __int8 *)v17;
    uint64_t v19 = (unsigned __int8 *)v17;
    while (1)
    {
      unsigned int v21 = *v19++;
      unsigned int v20 = v21;
      if (v21 >= v12) {
        break;
      }
LABEL_38:
      int v18 = v19;
      if (v19 == a4) {
        goto LABEL_97;
      }
    }

    if ((v20 & 0x80) == 0) {
      goto LABEL_33;
    }
    int v22 = a4;
    if (v19 == a4) {
      goto LABEL_32;
    }
    if (v20 < 0xE0)
    {
      if (v20 >= 0xC2)
      {
        unsigned int v25 = *v19 ^ 0x80;
        if (v25 <= 0x3F)
        {
          unsigned int v20 = *(unsigned __int16 *)(**((void **)this + 4) + 2LL * (v20 & 0x1F)) + v25;
          goto LABEL_22;
        }
      }
    }

    else if (v20 > 0xEF)
    {
      if (v20 <= 0xF4)
      {
        unint64_t v26 = *v19;
        int v22 = v19;
        unsigned __int8 v27 = v18 + 2;
        int v22 = a4;
        if (v18 + 2 == a4) {
          goto LABEL_32;
        }
        int v22 = (unsigned __int8 *)(v18 + 2);
        if ((*v27 ^ 0x80u) > 0x3F) {
          goto LABEL_32;
        }
        uint64_t v19 = (unsigned __int8 *)(v18 + 3);
        int v22 = a4;
        if (v18 + 3 == a4) {
          goto LABEL_32;
        }
        if ((*v19 ^ 0x80u) <= 0x3F)
        {
          unsigned int v28 = v26 & 0x3F | ((v20 - 240) << 6);
          uint64_t v29 = *((void *)this + 4);
          if (v28 >= *(unsigned __int16 *)(v29 + 28))
          {
            unsigned int v20 = *(_DWORD *)(v29 + 20) - 2;
          }

          else
          {
            unsigned int v30 = a6;
            unsigned int v61 = a2;
            uint64_t v31 = a5;
            int v63 = (icu::ByteSink *)v15;
            unsigned int v32 = a7;
            unsigned int v57 = v14;
            unsigned int v20 = ucptrie_internalSmallU8Index(v29, v28, *v27 ^ 0x80u, *v19 ^ 0x80u);
            unsigned int v14 = v57;
            int v16 = " 000000000000\x1000";
            a7 = v32;
            unint64_t v15 = (uint64_t *)v63;
            a5 = v31;
            a2 = v61;
            a6 = v30;
          }

          goto LABEL_22;
        }
      }
    }

    else
    {
      unsigned __int8 v23 = *v19;
      int v22 = v19;
      uint64_t v19 = (unsigned __int8 *)(v18 + 2);
      int v22 = a4;
      if (v18 + 2 == a4) {
        goto LABEL_32;
      }
      unsigned int v24 = *v19 ^ 0x80;
      if (v24 <= 0x3F)
      {
LABEL_22:
        ++v19;
        goto LABEL_33;
      }
    }

    int v22 = v19;
LABEL_32:
    unsigned int v20 = *(_DWORD *)(*((void *)this + 4) + 20LL) - 1;
    uint64_t v19 = v22;
LABEL_33:
    unsigned int v33 = *(unsigned __int16 *)(*(void *)(*((void *)this + 4) + 8LL) + 2LL * (int)v20);
    uint64_t v10 = *((unsigned __int16 *)this + 7);
    unsigned int v62 = a2;
    else {
      uint64_t v35 = (icu::ByteSinkUtil *)v18;
    }
    if (v18 != (const unsigned __int8 *)v17)
    {
      unsigned int v14 = 0;
      if (a5)
      {
        unsigned __int8 v36 = v15;
        __int128 v37 = v8;
        uint64_t v38 = a5;
        uint64_t v39 = a6;
        int64_t v40 = a7;
        if (!icu::ByteSinkUtil::appendUnchanged( v37,  v18,  (const unsigned __int8 *)a5,  (icu::ByteSink *)v62,  a6,  (icu::Edits *)a7,  a7)) {
          break;
        }
        unsigned int v14 = 0;
        uint64_t v35 = (icu::ByteSinkUtil *)v18;
        a6 = v39;
        a5 = v38;
        a7 = v40;
        unint64_t v15 = v36;
        int v16 = " 000000000000\x1000";
      }
    }

    uint64_t v10 = *((unsigned __int16 *)this + 15);
    if (v10 <= v33)
    {
      uint64_t v10 = v33 >> 1;
      unsigned int v41 = v33 >> 10 <= 0x3E ? 0 : v33 >> 1;
      if (!(_BYTE)v41 || v14 <= v41)
      {
        if ((v41 & 0xFE) != 0) {
          unsigned int v14 = v33 >> 1;
        }
        else {
          unsigned int v14 = v41;
        }
        if ((v41 & 0xFE) != 0) {
          unsigned int v8 = v35;
        }
        else {
          unsigned int v8 = (icu::ByteSinkUtil *)v19;
        }
        if (v41 > 1u || a5 == 0LL)
        {
          a2 = v62;
        }

        else
        {
          uint64_t v65 = a5;
          uint64_t v51 = a7;
          float v52 = a6;
          float v53 = v16;
          int appended = icu::ByteSinkUtil::appendUnchanged( v35,  v19,  (const unsigned __int8 *)a5,  (icu::ByteSink *)v62,  a6,  (icu::Edits *)a7,  a7);
          int v16 = v53;
          a5 = v65;
          a6 = v52;
          unsigned int v14 = v41;
          a2 = v62;
          a7 = v51;
          unsigned int v8 = (icu::ByteSinkUtil *)v19;
          if (!appended) {
            break;
          }
        }

        goto LABEL_73;
      }
    }

    if (!a5)
    {
      uint64_t v19 = (unsigned __int8 *)v35;
      break;
    }

    unsigned int v58 = v14;
    uint64_t v64 = a5;
    int v59 = a7;
    int v60 = a6;
    unsigned int v8 = (icu::ByteSinkUtil *)v18;
    a2 = v62;
    if (v35 == (icu::ByteSinkUtil *)v18
      || (unsigned int v8 = v35, !icu::Normalizer2Impl::norm16HasDecompBoundaryBefore(this, v33))
      || (v43 = icu::ByteSinkUtil::appendUnchanged( v8,  v18,  (const unsigned __int8 *)v64,  (icu::ByteSink *)v62,  v60,  (icu::Edits *)v59,  v42),  unsigned int v8 = (icu::ByteSinkUtil *)v18,  v43))
    {
      *((_OWORD *)v15 + 1) = 0u;
      *((_OWORD *)v15 + 2) = 0u;
      *(_OWORD *)unint64_t v15 = 0u;
      uint64_t v66 = this;
      uint64_t v67 = (icu::UnicodeString *)&v72;
      uint64_t Buffer = icu::UnicodeString::getBuffer((icu::UnicodeString *)&v72, 8);
      v68[0] = Buffer;
      v68[1] = Buffer;
      uint64_t v69 = Buffer;
      if ((*((_BYTE *)v67 + 8) & 2) != 0) {
        int v45 = 27;
      }
      else {
        int v45 = *((_DWORD *)v67 + 4);
      }
      a7 = v59;
      a6 = v60;
      int v16 = " 000000000000\x1000";
      unsigned int v14 = v58;
      int v70 = v45;
      unsigned __int8 v71 = 0;
      UErrorCode v46 = *v59;
      a5 = v64;
      if (!Buffer && v46 <= U_ZERO_ERROR)
      {
        int v47 = 0;
        UErrorCode v48 = U_MEMORY_ALLOCATION_ERROR;
        goto LABEL_64;
      }

      if (v46 > U_ZERO_ERROR) {
        goto LABEL_69;
      }
      icu::Normalizer2Impl::decomposeShort((uint64_t)this, v8, v19, 0, 0, (icu::ReorderingBuffer *)&v66, v59);
      if (v71 >= 2u) {
        uint64_t v19 = icu::Normalizer2Impl::decomposeShort((uint64_t)this, v19, a4, 1, 0, (icu::ReorderingBuffer *)&v66, v59);
      }
      a6 = v60;
      a5 = v64;
      a7 = v59;
      int v16 = " 000000000000\x1000";
      unsigned int v14 = v58;
      if (*(int *)v59 > 0)
      {
LABEL_69:
        int v47 = 0;
        goto LABEL_70;
      }

      if (v19 - v18 >= 0x80000000LL)
      {
        int v47 = 0;
        UErrorCode v48 = U_INDEX_OUTOFBOUNDS_ERROR;
LABEL_64:
        *a7 = v48;
LABEL_70:
        uint64_t v10 = v68[0];
        if (v68[0])
        {
          unsigned int v49 = v14;
          icu::UnicodeString::releaseBuffer((uint64_t)v67, (unint64_t)(v69 - v68[0]) >> 1);
          unsigned int v14 = v49;
          int v16 = " 000000000000\x1000";
          a7 = v59;
          a6 = v60;
          a5 = v64;
        }

        if (!v47) {
          break;
        }
LABEL_73:
        uint64_t v17 = (icu::ByteSinkUtil *)v19;
        if (v19 != a4) {
          continue;
        }
LABEL_97:
        uint64_t v19 = a4;
        if (a5) {
          goto LABEL_100;
        }
        break;
      }

      if (*((unsigned __int16 *)this + 15) <= v33
        && (BOOL v55 = icu::ReorderingBuffer::equals((icu::ReorderingBuffer *)&v66, (const unsigned __int8 *)v8, v19),
            a7 = v59,
            a6 = v60,
            a5 = v64,
            v55))
      {
        if (!icu::ByteSinkUtil::appendUnchanged( v8,  v19,  (const unsigned __int8 *)v64,  (icu::ByteSink *)v62,  v60,  (icu::Edits *)v59,  v59))
        {
LABEL_94:
          int v47 = 0;
          a7 = v59;
          a6 = v60;
          a5 = v64;
          int v16 = " 000000000000\x1000";
          unsigned int v14 = v58;
          goto LABEL_70;
        }
      }

      else if (!icu::ByteSinkUtil::appendChange( (uint64_t)v8,  (uint64_t)v19,  v68[0],  (unint64_t)(v69 - v68[0]) >> 1,  (uint64_t)a5,  a6,  (int *)a7))
      {
        goto LABEL_94;
      }

      unsigned int v14 = 0;
      int v47 = 1;
      unsigned int v8 = (icu::ByteSinkUtil *)v19;
      a7 = v59;
      a6 = v60;
      a5 = v64;
      int v16 = " 000000000000\x1000";
      goto LABEL_70;
    }

    break;
  }

LABEL_102:
  icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)&v72);
  return v19;
}

          UErrorCode v48 = v67;
          goto LABEL_103;
        }

        v31 |= v40;
        v30 += (v40 >> 13) & 1;
        LODWORD(v9) = v32;
      }
    }

    if ((v16 & 0x80000000) != 0)
    {
      unsigned int v44 = v67;
      if (*a6 > 0) {
        return result;
      }
      unsigned int v49 = (const unsigned __int8 *)(v9 - v66);
      goto LABEL_142;
    }

    unsigned int v68 = 0LL;
    unsigned int v41 = ucase_toFullUpper(v16, 0LL, 0LL, &v68, 4);
    int v43 = v41;
    if ((v41 & 0x80000000) == 0) {
      break;
    }
    uint64_t result = (uint64_t)a5;
    if (a5) {
      uint64_t result = (uint64_t)icu::Edits::addUnchanged(a5, (int)v9 - (int)v66);
    }
    unsigned int v44 = v67;
    if ((v61 & 0x4000) == 0) {
      uint64_t result = icu::ByteSinkUtil::appendCodePoint((icu::ByteSinkUtil *)(v9 - v66), ~v43, a4, 0LL, v42);
    }
LABEL_142:
    uint64_t v10 = v44;
  }

  if (v41 >= 0x20)
  {
    uint64_t result = icu::ByteSinkUtil::appendCodePoint((icu::ByteSinkUtil *)(v9 - v66), v41, a4, a5, v42);
    unsigned int v44 = v67;
    goto LABEL_142;
  }

  uint64_t result = icu::ByteSinkUtil::appendChange((int)v9 - (int)v66, v68, v41, a4, a5, a6);
  unsigned int v44 = v67;
  if ((_DWORD)result) {
    goto LABEL_142;
  }
  return result;
}

BOOL icu::Normalizer2Impl::norm16HasDecompBoundaryBefore(icu::Normalizer2Impl *this, unsigned int a2)
{
  uint64_t v3 = (_WORD *)(*((void *)this + 6) + ((unsigned __int16)a2 & 0xFFFE));
  if ((*v3 & 0x80) == 0) {
    return 1LL;
  }
  return (unsigned __int16)*(v3 - 1) < 0x100u;
}

_BYTE *icu::Normalizer2Impl::decomposeShort( uint64_t a1, _BYTE *a2, _BYTE *a3, int a4, int a5, icu::ReorderingBuffer *this, UErrorCode *a7)
{
  if (*(int *)a7 <= 0)
  {
    unsigned int v7 = a2;
    if (a2 >= a3) {
      return v7;
    }
    BOOL v38 = a4 != 1;
    while (1)
    {
      unsigned int v14 = v7 + 1;
      unsigned int v15 = *v7;
      if ((char)*v7 < 0)
      {
        int v16 = a3;
        if (v14 == a3) {
          goto LABEL_26;
        }
        if (v15 < 0xE0)
        {
          if (v15 < 0xC2 || (unsigned int v20 = *v14 ^ 0x80, v20 > 0x3F))
          {
LABEL_25:
            int v16 = v14;
LABEL_26:
            unsigned int v15 = *(_DWORD *)(*(void *)(a1 + 32) + 20LL) - 1;
            unsigned int v14 = v16;
            goto LABEL_27;
          }

          unsigned int v15 = *(unsigned __int16 *)(**(void **)(a1 + 32) + 2LL * (*v7 & 0x1F)) + v20;
        }

        else if (v15 > 0xEF)
        {
          if (v15 > 0xF4) {
            goto LABEL_25;
          }
          unint64_t v21 = *v14;
          int v16 = v7 + 1;
          int v22 = v7 + 2;
          int v16 = a3;
          if (v7 + 2 == a3) {
            goto LABEL_26;
          }
          int v16 = v7 + 2;
          if ((*v22 ^ 0x80u) > 0x3F) {
            goto LABEL_26;
          }
          unsigned int v14 = v7 + 3;
          int v16 = a3;
          if (v7 + 3 == a3) {
            goto LABEL_26;
          }
          if ((*v14 ^ 0x80u) > 0x3F) {
            goto LABEL_25;
          }
          unsigned int v23 = v21 & 0x3F | ((v15 - 240) << 6);
          uint64_t v24 = *(void *)(a1 + 32);
          else {
            unsigned int v15 = ucptrie_internalSmallU8Index(v24, v23, *v22 ^ 0x80u, *v14 ^ 0x80u);
          }
        }

        else
        {
          uint64_t v17 = *v7 & 0xF;
          char v18 = *v14;
          int v16 = v7 + 1;
          unsigned int v14 = v7 + 2;
          int v16 = a3;
          if (v7 + 2 == a3) {
            goto LABEL_26;
          }
          unsigned int v19 = *v14 ^ 0x80;
          if (v19 > 0x3F) {
            goto LABEL_25;
          }
          unsigned int v15 = *(unsigned __int16 *)(**(void **)(a1 + 32) + 2LL * (v18 & 0x3Fu | ((_DWORD)v17 << 6))) + v19;
        }

        ++v14;
      }

uint64_t sub_1807EBFB4(unint64_t a1, uint64_t a2)
{
  uint64_t v2 = ~a1 + a2;
  uint64_t result = *(unsigned __int8 *)a1;
  switch(v2)
  {
    case 0LL:
      return result;
    case 1LL:
      return *(_BYTE *)(a1 + 1) & 0x3F | ((result & 0x1F) << 6);
    case 2LL:
      unsigned __int8 v5 = *(_BYTE *)(a1 + 1);
      unsigned __int8 v6 = *(_BYTE *)(a1 + 2);
      int v7 = ((result & 0xF) << 12) | ((v5 & 0x3F) << 6);
      return v7 & 0xFFFFFFC0 | v6 & 0x3F;
    case 3LL:
      int v7 = ((result & 7) << 18) | ((*(_BYTE *)(a1 + 1) & 0x3F) << 12) | ((*(_BYTE *)(a1 + 2) & 0x3F) << 6);
      unsigned __int8 v6 = *(_BYTE *)(a1 + 3);
      return v7 & 0xFFFFFFC0 | v6 & 0x3F;
    default:
      abort();
  }

_WORD *icu::Normalizer2Impl::getDecomposition(uint64_t a1, signed int a2, _WORD *a3, int *a4)
{
  unsigned int v6 = a2;
  unsigned int v8 = sub_1807E9A8C(a1, a2);
  if (*(unsigned __int16 *)(a1 + 26) <= v8)
  {
    unsigned int v6 = v6 + (v8 >> 3) - *(unsigned __int16 *)(a1 + 28);
    if (HIWORD(v6))
    {
      int v12 = (v6 >> 10) - 10304;
      a3[1] = v6 & 0x3FF | 0xDC00;
      int v11 = 2;
    }

    else
    {
      int v11 = 1;
      LOWORD(icu::LocaleBuilder::setScript((uint64_t)this, v11, v12) = v6;
    }

    *a4 = v11;
    *a3 = v12;
    unsigned int v8 = sub_1807EA4C4(a1, v6);
    unsigned int v9 = a3;
  }

  else
  {
    unsigned int v9 = 0LL;
  }

  unsigned int v13 = *(unsigned __int16 *)(a1 + 14);
  if (v8 >= v13)
  {
    if (v13 == v8 || (*(unsigned __int16 *)(a1 + 16) | 1) == v8)
    {
      int v14 = (int)(v6 - 44032) % 28;
      *a3 = (__int16)(v6 + 21504) / 588 + 4352;
      a3[1] = (int)(v6 - 44032) / 28 % 21 + 4449;
      if (v14)
      {
        a3[2] = v14 + 4519;
        int v15 = 3;
      }

      else
      {
        int v15 = 2;
      }

      *a4 = v15;
      return a3;
    }

    else
    {
      int v16 = (__int16 *)(*(void *)(a1 + 48) + ((unsigned __int16)v8 & 0xFFFE));
      __int16 v17 = *v16;
      unsigned int v9 = v16 + 1;
      *a4 = v17 & 0x1F;
    }
  }

  return v9;
}

unsigned __int16 *icu::Normalizer2Impl::getRawDecomposition(uint64_t a1, signed int a2, _WORD *a3, int *a4)
{
  unsigned int v8 = sub_1807E9A8C(a1, a2);
  unsigned int v9 = *(unsigned __int16 *)(a1 + 14);
  if (v9 == v8 || (*(unsigned __int16 *)(a1 + 16) | 1) == v8)
  {
    int v10 = (a2 - 44032) % 28;
    __int16 v11 = a2 - v10;
    int v12 = (a2 - 44032) / 588 + 4352;
    int v13 = (a2 - 44032) / 28 % 21;
    BOOL v14 = v10 == 0;
    if (v10)
    {
      LOWORD(v13) = (a2 - 44032) % 28;
      __int16 v15 = 4519;
    }

    else
    {
      __int16 v15 = 4449;
    }

    if (!v14) {
      LOWORD(icu::LocaleBuilder::setScript((uint64_t)this, v11, v12) = v11;
    }
    *a3 = v12;
    a3[1] = v15 + v13;
    int v16 = 2;
LABEL_12:
    *a4 = v16;
    return a3;
  }

  if (*(unsigned __int16 *)(a1 + 26) > v8)
  {
    char v18 = (unsigned __int16 *)(*(void *)(a1 + 48) + ((unsigned __int16)v8 & 0xFFFE));
    unint64_t v19 = *v18;
    int v20 = v19 & 0x1F;
    if ((v19 & 0x40) == 0)
    {
      *a4 = v20;
      return v18 + 1;
    }

    int v22 = &v18[-((v19 >> 7) & 1)];
    unsigned int v25 = *(v22 - 1);
    uint64_t v24 = v22 - 1;
    uint64_t v23 = v25;
    if (v25 <= 0x1FuLL)
    {
      *a4 = v23;
      return &v24[-v23];
    }

    *a3 = v23;
    u_memcpy(a3 + 1, v18 + 3, v20 - 2);
    int v16 = v20 - 1;
    goto LABEL_12;
  }

  unsigned int v21 = a2 + (v8 >> 3) - *(unsigned __int16 *)(a1 + 28);
  if (HIWORD(v21))
  {
    *a3 = (v21 >> 10) - 10304;
    *a4 = 2;
    a3[1] = v21 & 0x3FF | 0xDC00;
  }

  else
  {
    *a4 = 1;
    *a3 = v21;
  }

  return a3;
}

UChar *icu::Normalizer2Impl::decomposeAndAppend( uint64_t a1, UChar *a2, UChar *a3, int a4, icu::UnicodeString *this, UChar **a6, UErrorCode *a7)
{
  if (a4) {
    return icu::Normalizer2Impl::decompose(a1, a2, a3, a6, a7);
  }
  if (a2 != a3)
  {
    unsigned __int8 v14 = 0;
    unsigned __int8 v15 = 0;
    char v16 = 1;
    __int16 v17 = a2;
    char v18 = a2;
    while (1)
    {
      unsigned int v20 = *v18++;
      unint64_t v19 = v20;
      if ((v20 & 0xF800) == 0xD800)
      {
        if ((v19 & 0x400) != 0 || v18 == a3)
        {
          uint64_t v22 = *(void *)(a1 + 32);
        }

        else
        {
          int v21 = *v18;
          uint64_t v22 = *(void *)(a1 + 32);
          if ((v21 & 0xFC00) == 0xDC00)
          {
            char v18 = v17 + 2;
            signed int v23 = v21 + ((_DWORD)v19 << 10) - 56613888;
            if (v23 >= *(_DWORD *)(v22 + 24))
            {
              int v24 = *(_DWORD *)(v22 + 20) - 2;
            }

            else
            {
              int v24 = ucptrie_internalSmallIndex((uint64_t *)v22, v23);
              uint64_t v22 = *(void *)(a1 + 32);
            }

            goto LABEL_14;
          }
        }

        int v24 = *(_DWORD *)(v22 + 20) - 1;
      }

      else
      {
        uint64_t v22 = *(void *)(a1 + 32);
        int v24 = (v19 & 0x3F) + *(unsigned __int16 *)(*(void *)v22 + ((v19 >> 5) & 0x7FE));
      }

uint64_t sub_1807EC5FC(uint64_t a1, icu::UnicodeString *this)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = (unint64_t)(*(void *)(a1 + 32) - v3) >> 1;
  icu::UnicodeString::unBogus((uint64_t)this);
  unsigned int v5 = *((unsigned __int16 *)this + 4);
  int v6 = (__int16)v5;
  unsigned int v7 = v5 >> 5;
  if (v6 >= 0) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = *((unsigned int *)this + 3);
  }
  return icu::UnicodeString::doReplace((uint64_t)this, 0LL, v8, v3, 0, v4);
}

BOOL icu::Normalizer2Impl::hasDecompBoundaryBefore(icu::Normalizer2Impl *this, signed int a2)
{
  if (a2 >= 0x10000
    || ((int v4 = *(unsigned __int8 *)(*((void *)this + 7) + (a2 >> 8)),
         BOOL result = 1LL,
         *(_BYTE *)(*((void *)this + 7) + (a2 >> 8)))
      ? (BOOL v5 = ((1 << (a2 >> 5)) & v4) == 0)
      : (BOOL v5 = 1),
        !v5))
  {
    unsigned int v6 = sub_1807E9A8C((uint64_t)this, a2);
    return icu::Normalizer2Impl::norm16HasDecompBoundaryBefore(this, v6);
  }

  return result;
}

BOOL icu::Normalizer2Impl::hasDecompBoundaryAfter(icu::Normalizer2Impl *this, signed int a2)
{
  if (a2 < 0x10000
    && (!*(_BYTE *)(*((void *)this + 7) + (a2 >> 8))
     || ((1 << (a2 >> 5)) & *(unsigned __int8 *)(*((void *)this + 7) + (a2 >> 8))) == 0))
  {
    return 1LL;
  }

  unsigned int v5 = sub_1807E9A8C((uint64_t)this, a2);
  return icu::Normalizer2Impl::norm16HasDecompBoundaryAfter(this, v5);
}

BOOL icu::Normalizer2Impl::norm16HasDecompBoundaryAfter(icu::Normalizer2Impl *this, unsigned int a2)
{
  if (*((unsigned __int16 *)this + 13) <= a2)
  {
    BOOL v6 = a2 < 0xFC01 || a2 == 65024;
    else {
      return (a2 & 6) < 3;
    }
  }

  else
  {
    uint64_t v3 = (unsigned __int16 *)(*((void *)this + 6) + ((unsigned __int16)a2 & 0xFFFE));
    unsigned int v4 = *v3;
    if (v4 <= 0x1FF)
    {
      if (v4 < 0x100 || (v4 & 0x80) == 0) {
        return 1LL;
      }
      return *(v3 - 1) < 0x100u;
    }

    else
    {
      return 0LL;
    }
  }

uint64_t icu::Normalizer2Impl::combine(icu::Normalizer2Impl *this, const unsigned __int16 *a2)
{
  if ((int)a2 <= 13311)
  {
    unsigned int v2 = 2 * ((unsigned __int16)a2 & 0x7FFF);
    while (1)
    {
      unsigned int v3 = *(unsigned __int16 *)this;
      if (v2 <= v3) {
        break;
      }
      this = (icu::Normalizer2Impl *)((char *)this + 2 * (v3 & 1 | 2));
    }

    if (v2 == (v3 & 0x7FFE))
    {
      uint64_t v9 = *((unsigned __int16 *)this + 1);
      if ((v3 & 1) != 0)
      {
        int v10 = (_DWORD)v9 << 16;
        return v10 | *((unsigned __int16 *)this + 2);
      }

      return v9;
    }

    return 0xFFFFFFFFLL;
  }

  unsigned int v4 = ((unsigned __int16)(a2 >> 9) + 13312) & 0xFFFE;
  unsigned int v5 = ((unsigned __int16)a2 & 0x3FF) << 6;
  while (1)
  {
    unsigned int v6 = *(unsigned __int16 *)this;
    if (v4 > v6)
    {
      uint64_t v7 = v6 & 1 | 2LL;
      goto LABEL_12;
    }

    if (v4 != (v6 & 0x7FFE)) {
      return 0xFFFFFFFFLL;
    }
    unsigned int v8 = *((unsigned __int16 *)this + 1);
    if (v5 <= v8) {
      break;
    }
    if ((v6 & 0x8000) != 0) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v7 = 3LL;
LABEL_12:
    this = (icu::Normalizer2Impl *)((char *)this + 2 * v7);
  }

  if (v5 != (v8 & 0xFFC0)) {
    return 0xFFFFFFFFLL;
  }
  int v10 = (v8 & 0x3F) << 16;
  return v10 | *((unsigned __int16 *)this + 2);
}

icu::UnicodeSet *icu::Normalizer2Impl::addComposites( icu::Normalizer2Impl *this, const unsigned __int16 *a2, icu::UnicodeSet *a3)
{
  do
  {
    __int16 v6 = *a2;
    unsigned int v7 = a2[1];
    if ((*a2 & 1) != 0)
    {
      uint64_t v8 = 3LL;
      unsigned int v7 = a2[2] | ((v7 & 0x3F) << 16);
    }

    else
    {
      uint64_t v8 = 2LL;
    }

    unsigned int v9 = v7 >> 1;
    if ((v7 & 1) != 0)
    {
      unsigned __int16 v10 = sub_1807EA4C4((uint64_t)this, v7 >> 1);
      icu::Normalizer2Impl::addComposites( this,  (const unsigned __int16 *)(*((void *)this + 6)
                                 + (v10 & 0xFFFE)
                                 + 2LL * (*(_WORD *)(*((void *)this + 6) + (v10 & 0xFFFE)) & 0x1F)
                                 + 2),
        a3);
    }

    a2 += v8;
    BOOL result = icu::UnicodeSet::add(a3, v9);
  }

  while ((v6 & 0x8000) == 0);
  return result;
}

uint64_t icu::Normalizer2Impl::recompose(uint64_t this, icu::ReorderingBuffer *a2, int a3, int a4)
{
  unsigned int v4 = (unsigned __int16 *)(*((void *)a2 + 2) + 2LL * a3);
  unint64_t v5 = *((void *)a2 + 4);
  uint64_t v6 = this;
  __int16 v40 = 0LL;
  uint64_t v7 = 0LL;
  unsigned __int8 v8 = 0;
  BOOL v39 = 0;
  int v42 = a4;
LABEL_3:
  while (2)
  {
    unint64_t v43 = v5;
LABEL_4:
    unsigned int v9 = (icu::Normalizer2Impl *)v7;
    while (1)
    {
      unsigned __int16 v10 = v4 + 1;
      unint64_t v11 = *v4;
      if ((v11 & 0xF800) == 0xD800)
      {
        if ((v11 & 0x400) != 0 || v10 == (unsigned __int16 *)v5)
        {
          this = *(void *)(v6 + 32);
        }

        else
        {
          int v12 = *v10;
          this = *(void *)(v6 + 32);
          if ((v12 & 0xFC00) == 0xDC00)
          {
            v4 += 2;
            unint64_t v11 = (v12 + ((_DWORD)v11 << 10) - 56613888);
            if ((int)v11 >= *(_DWORD *)(this + 24))
            {
              int v14 = *(_DWORD *)(this + 20) - 2;
            }

            else
            {
              int v13 = ucptrie_internalSmallIndex((uint64_t *)this, v11);
              unint64_t v5 = v43;
              a4 = v42;
              int v14 = v13;
              this = *(void *)(v6 + 32);
            }

            goto LABEL_15;
          }
        }

        int v14 = *(_DWORD *)(this + 20) - 1;
      }

      else
      {
        this = *(void *)(v6 + 32);
        int v14 = (v11 & 0x3F) + *(unsigned __int16 *)(*(void *)this + ((v11 >> 5) & 0x7FE));
      }

      ++v4;
LABEL_15:
      uint64_t v15 = *(unsigned __int16 *)(*(void *)(this + 8) + 2LL * v14);
      else {
        unsigned __int8 v16 = v15 >> 1;
      }
      uint64_t v17 = *(unsigned __int16 *)(v6 + 30);
      BOOL v19 = v15 > 0xFE00 || v17 > v15 || v9 == 0LL;
      if ((_DWORD)v15 == 65024) {
        break;
      }
      this = icu::Normalizer2Impl::combine(v9, (const unsigned __int16 *)v11);
      unint64_t v5 = v43;
      a4 = v42;
      if ((this & 0x80000000) == 0)
      {
        char v26 = this;
        unsigned int v27 = this >> 1;
        uint64_t v28 = -2LL;
        unint64_t v22 = (unint64_t)&v4[v28];
        unsigned int v29 = (v27 - 0x10000) >> 20;
        if (v39)
        {
          if (!v29)
          {
            *__int16 v40 = (this >> 11) - 10304;
            v40[1] = (this >> 1) & 0x3FF | 0xDC00;
            goto LABEL_65;
          }

          *__int16 v40 = v27;
          if ((unint64_t)(v40 + 2) < v22)
          {
            unint64_t v33 = (unint64_t)&v4[v28];
            this = (uint64_t)memmove(v40 + 1, v40 + 2, ((v33 - (void)v40 - 5) & 0xFFFFFFFFFFFFFFFELL) + 2);
            unint64_t v5 = v43;
            a4 = v42;
          }

          BOOL v39 = 0;
          v22 -= 2LL;
        }

        else if (v29)
        {
          BOOL v39 = 0;
          *__int16 v40 = v27;
        }

        else
        {
          if ((unint64_t)(v40 + 1) < v22)
          {
            unsigned __int8 v30 = &v4[v28];
            unint64_t v31 = (unint64_t)v30;
            do
            {
              unsigned __int16 v32 = *(_WORD *)(v31 - 2);
              v31 -= 2LL;
              *unsigned __int8 v30 = v32;
              unsigned __int8 v30 = (unsigned __int16 *)v31;
            }

            while ((unint64_t)(v40 + 1) < v31);
          }

          v22 += 2LL;
          v40[1] = (this >> 1) & 0x3FF | 0xDC00;
          *__int16 v40 = (this >> 11) - 10304;
LABEL_65:
          BOOL v39 = 1;
        }

        if (v22 < (unint64_t)v4)
        {
          unsigned int v34 = (_WORD *)v22;
          do
          {
            __int16 v35 = *v4++;
            *v34++ = v35;
          }

          while ((unint64_t)v4 < v5);
          unsigned int v4 = (unsigned __int16 *)v22;
          unint64_t v5 = (unint64_t)v34;
        }

        if (v4 == (unsigned __int16 *)v5)
        {
          unint64_t v22 = (unint64_t)v4;
          goto LABEL_81;
        }

        uint64_t v7 = 0LL;
        if ((v26 & 1) != 0)
        {
          unsigned int v36 = v27;
          unint64_t v37 = v5;
          unsigned __int16 v38 = sub_1807EA4C4(v6, v36);
          unint64_t v5 = v37;
          a4 = v42;
          uint64_t v7 = *(void *)(v6 + 48)
             + (v38 & 0xFFFE)
             + 2LL * (*(_WORD *)(*(void *)(v6 + 48) + (v38 & 0xFFFE)) & 0x1F)
             + 2;
        }

        goto LABEL_3;
      }

LABEL_29:
      if (v4 == (unsigned __int16 *)v5)
      {
        unint64_t v22 = v5;
        goto LABEL_81;
      }

      unsigned __int8 v8 = v16;
      if (v16)
      {
        if (a4) {
          unsigned int v9 = 0LL;
        }
      }

      else
      {
        unsigned int v9 = 0LL;
        if ((unsigned __int16)(v15 + 1024) >= 0x402u)
        {
          uint64_t v7 = v17 <= v15
             ? *(void *)(v6 + 40) + 2 * v15 - 2 * v17
             : *(void *)(v6 + 48) + 2LL * (v15 >> 1);
          unsigned int v9 = 0LL;
          if (v7)
          {
            BOOL v39 = (v11 & 0xFFFF0000) != 0;
            unsigned int v20 = v4 - 1;
            __int16 v40 = v20;
            goto LABEL_4;
          }
        }
      }
    }

    if (v11 > 0x11A6 || (unsigned int v21 = *v40 - 4352, v21 > 0x12))
    {
      unint64_t v22 = (unint64_t)v4;
LABEL_58:
      uint64_t v7 = 0LL;
      unsigned int v4 = (unsigned __int16 *)v22;
      if (v22 != v5) {
        continue;
      }
    }

    else
    {
      unint64_t v22 = (unint64_t)(v4 - 1);
      unsigned __int16 v23 = 28 * (v11 + 21 * v21) - 15004;
      if (v4 == (unsigned __int16 *)v5)
      {
        *__int16 v40 = v23;
      }

      else
      {
        unsigned int v24 = *v4 - 4519;
        BOOL v25 = v24 < 0x1C;
        if (v24 >= 0x1C) {
          LOWORD(v24) = 0;
        }
        *__int16 v40 = v23 + v24;
        if ((unint64_t)&v4[v25] < v5)
        {
          do
          {
            *(v4 - 1) = v4[v25];
            ++v4;
          }

          while ((unint64_t)&v4[v25] < v5);
          unint64_t v5 = (unint64_t)(v4 - 1);
          goto LABEL_58;
        }
      }
    }

    break;
  }

    TypeOrIgnorable = ucase_getTypeOrIgnorable(v16);
    unsigned int v24 = v10 & 1;
    BOOL v25 = TypeOrIgnorable != 0;
    if ((TypeOrIgnorable & 4) != 0) {
      BOOL v25 = v10 & 1;
    }
    uint64_t v67 = v25;
    BOOL result = sub_18087C6C8(v16);
    if ((_DWORD)result)
    {
      unsigned int v27 = result;
      uint64_t v28 = result & 0x3FF;
      int v63 = v13;
      if ((result & 0x1000) != 0 && (v10 & 6) != 0 && (v28 == 933 || v28 == 921))
      {
        if ((v10 & 4) != 0) {
          unsigned int v29 = 0x8000;
        }
        else {
          unsigned int v29 = 0x10000;
        }
        unsigned int v27 = result | v29;
      }

      unsigned __int8 v30 = (v27 >> 13) & 1;
      uint64_t v65 = v14;
      if ((int)v9 >= a3)
      {
        LODWORD(v32) = v9;
        unint64_t v31 = v27;
        goto LABEL_73;
      }

      unint64_t v31 = v27;
      while (1)
      {
        unsigned __int16 v32 = (int)v9 + 1LL;
        unint64_t v33 = *(char *)(a2 + (int)v9);
        unsigned int v34 = *(unsigned __int8 *)(a2 + (int)v9);
        if ((v33 & 0x80000000) == 0) {
          goto LABEL_62;
        }
        if ((_DWORD)v32 == a3)
        {
LABEL_44:
          unsigned int v34 = -1;
          LODWORD(v32) = a3;
          goto LABEL_62;
        }

        if (v34 < 0xE0)
        {
          if (v34 < 0xC2) {
            goto LABEL_61;
          }
          unint64_t v37 = v34 & 0x1F;
        }

        else
        {
          if (v34 > 0xEF)
          {
            if (v34 > 0xF4
              || (__int16 v35 = *(unsigned __int8 *)(a2 + v32), ((byte_180A01C78[v35 >> 4] >> (v34 + 16)) & 1) == 0))
            {
LABEL_61:
              unsigned int v34 = -1;
              goto LABEL_62;
            }

            unsigned __int16 v32 = (int)v9 + 2LL;
            if ((_DWORD)v9 + 2 == a3) {
              goto LABEL_44;
            }
            unsigned int v36 = *(unsigned __int8 *)(a2 + v32) ^ 0x80;
            if (v36 > 0x3F)
            {
              unsigned int v34 = -1;
              goto LABEL_62;
            }

            LODWORD(v35) = v35 & 0x3F | ((v34 - 240) << 6);
          }

          else
          {
            __int16 v35 = v33 & 0xF;
            unsigned int v36 = *(_BYTE *)(a2 + v32) & 0x3F;
          }

          LODWORD(v32) = v32 + 1;
          if ((_DWORD)v32 == a3) {
            goto LABEL_44;
          }
          unint64_t v37 = v36 | ((_DWORD)v35 << 6);
        }

        unsigned __int16 v38 = *(unsigned __int8 *)(a2 + (int)v32) ^ 0x80;
        BOOL v39 = v38 | (v37 << 6);
        if (v38 > 0x3F)
        {
          unsigned int v34 = -1;
        }

        else
        {
          LODWORD(v32) = v32 + 1;
          unsigned int v34 = v39;
        }

  unsigned int v27 = v46;
  goto LABEL_121;
}

    int v42 = U_ZERO_ERROR;
    goto LABEL_30;
  }

    DefaultConverter = (UConverter *)u_getDefaultConverter(&v16);
    goto LABEL_30;
  }

  if (*a4)
  {
    DefaultConverter = (UConverter *)ucnv_open((unsigned __int8 *)a4, &v16);
LABEL_30:
    uint64_t v15 = DefaultConverter;
    if (v16 >= U_ILLEGAL_ARGUMENT_ERROR) {
      goto LABEL_31;
    }
    icu::UnicodeString::doCodepageCreate((icu::UnicodeString *)this, __s, v7, DefaultConverter, &v16);
    if (v16 >= U_ILLEGAL_ARGUMENT_ERROR) {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)this);
    }
    if (a4) {
      ucnv_close(v15);
    }
    else {
      u_releaseDefaultConverter(v15);
    }
    return;
  }

  if (!icu::UnicodeString::cloneArrayIfNeeded((icu::UnicodeString *)this, v7, v7, 0, 0LL, 0))
  {
LABEL_31:
    icu::UnicodeString::setToBogus((icu::UnicodeString *)this);
    return;
  }

  if (((_WORD)this[1] & 2) != 0) {
    int v13 = (UChar *)this + 5;
  }
  else {
    int v13 = this[3];
  }
  u_charsToUChars(__s, v13, v7);
  if (v7 > 1023)
  {
    *((_WORD *)this + 4) |= 0xFFE0u;
    *((_DWORD *)this + 3) = v7;
  }

  else
  {
    *((_WORD *)this + 4) = (_WORD)this[1] & 0x1F | (32 * v7);
  }

        *(_BYTE *)(a1 + 59) = 1;
        return;
      }
    }
  }

          LODWORD(v18) = pi;
          if (pi >= srcLength || v20 >= v17)
          {
            unsigned int v21 = 0;
            break;
          }
        }
      }

      if ((int)v18 >= srcLength)
      {
LABEL_137:
        unsigned int v61 = v69;
        goto LABEL_159;
      }

      while (1)
      {
        uint64_t v56 = (int)v18;
        unsigned int v57 = src[(int)v18];
        char v18 = (int)v18 + 1LL;
        punint64_t i = v18;
        if ((v57 & 0x80) != 0)
        {
          if ((v57 & 0xF0) == 0xE0)
          {
            if ((int)v56 + 2 >= srcLength
              || ((a00000000000000[v57 & 0xF] >> (src[v18] >> 5)) & 1) == 0
              || src[v56 + 2] > -65)
            {
              goto LABEL_129;
            }

            ++v21;
            LODWORD(v18) = v56 + 3;
          }

          else
          {
            unsigned int v58 = (v57 + 32) < 0xE2u || (_DWORD)v18 == srcLength;
            if (v58 || src[v18] > -65)
            {
LABEL_129:
              int v59 = utf8_nextCharSafeBody((const uint8_t *)src, &pi, srcLength, v57, -1);
              if ((v59 & 0x80000000) != 0)
              {
                ++v69;
                int v59 = subchar;
              }

              if (v59 < 0x10000) {
                int v60 = 1;
              }
              else {
                int v60 = 2;
              }
              v21 += v60;
              LODWORD(v18) = pi;
              goto LABEL_136;
            }

            ++v21;
            LODWORD(v18) = v56 + 2;
          }

          punint64_t i = v18;
        }

        else
        {
          ++v21;
        }

  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v71);
  icu::BytesTrieBuilder::~BytesTrieBuilder((icu::BytesTrieBuilder *)v72);
  if (!v4)
  {
LABEL_3:
    if (!v2) {
      return;
    }
    goto LABEL_4;
  }

      LOBYTE(v17) = 0;
      goto LABEL_31;
    }
  }

  else
  {
    unsigned int v20 = 48;
    return icu::UnicodeString::doAppend(a2, (uint64_t)&v20, 0, 1LL);
  }

  return result;
}

    uint64_t v15 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *))(*(void *)v20 + 16LL))( v20,  a2,  v15,  v15,  a5)
        + v15;
LABEL_30:
    if (v18 < 0x10000) {
      unsigned __int16 v23 = 1;
    }
    else {
      unsigned __int16 v23 = 2;
    }
    v12 += v23;
  }

  unsigned int v24 = (unsigned __int16)v46 >> 5;
  if ((v46 & 0x8000u) != 0LL) {
    unsigned int v24 = DWORD1(v46);
  }
  if (v24 >= 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, void (***)(icu::UnicodeString *__hidden)))(*(void *)a2 + 32LL))( a2,  v15,  v15,  &v45);
    BOOL v25 = (unsigned __int16)v46 >> 5;
    if ((v46 & 0x8000u) != 0LL) {
      BOOL v25 = DWORD1(v46);
    }
    uint64_t v15 = (v25 + v15);
  }

  unsigned __int16 v10 = (v15 - v14);
  if (v12 == *(_DWORD *)(a1 + 80)) {
    int v13 = v15 - v14;
  }
  LODWORD(v5) = v42;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 40LL))(a2, v14, v15, v42);
  *(void *)&v44[0] = off_18971B688;
  WORD4(v44[0]) = 2;
  (*(void (**)(uint64_t, void, void, _OWORD *))(*(void *)a2 + 32LL))( a2,  (v10 + v40),  (v10 + v15),  v44);
  icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v44);
  *(void *)&v44[0] = off_18971B688;
  WORD4(v44[0]) = 2;
  (*(void (**)(uint64_t, void, void, _OWORD *))(*(void *)a2 + 32LL))( a2,  v10 + v42,  (v10 + v41),  v44);
  icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)v44);
  icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v45);
LABEL_45:
  if (*(_BYTE *)(a1 + 84))
  {
    unsigned int v29 = *(_DWORD *)(a1 + 80);
    if (v29 < 0)
    {
      if ((int)v5 >= 1)
      {
        unsigned __int16 v32 = -v29;
        do
        {
          else {
            unint64_t v33 = -1;
          }
          LODWORD(v5) = v33 + v5;
          --v32;
        }

        while (v32 && (int)v5 > 0);
        unsigned int v29 = -v32;
      }

      unsigned int v34 = v29 + v5;
    }

    else if (*(__int16 *)(a1 + 24) < 0)
    {
      unint64_t v31 = *(_DWORD *)(a1 + 28);
      if (v29 <= v31) {
        goto LABEL_69;
      }
LABEL_60:
      __int16 v35 = (v10 + v5);
      unsigned int v36 = v29 - v31;
      if (v29 - v31 >= 1)
      {
        while ((int)v35 < (*(int (**)(uint64_t))(*(void *)a2 + 64LL))(a2))
        {
          else {
            unint64_t v37 = 2;
          }
          __int16 v35 = (v37 + v35);
          unsigned __int16 v38 = __OFSUB__(v36--, 1);
          if ((v36 < 0) ^ v38 | (v36 == 0))
          {
            unsigned int v36 = 0;
            break;
          }
        }
      }

      unsigned int v34 = v36 + v35;
    }

    else
    {
      unsigned __int8 v30 = *(unsigned __int16 *)(a1 + 24);
      if (v29 > v30 >> 5)
      {
        unint64_t v31 = v30 >> 5;
        goto LABEL_60;
      }

  if (v10) {
    (*(void (**)(icu::TimeZoneRule *))(*(void *)v10 + 8LL))(v10);
  }
  if (v8) {
    (*(void (**)(icu::TimeZoneRule *))(*(void *)v8 + 8LL))(v8);
  }
  if (v9) {
    (*(void (**)(icu::InitialTimeZoneRule *))(*(void *)v9 + 8LL))(v9);
  }
  icu::UnicodeString::~UnicodeString((void *)v11, (icu::UnicodeString *)&v32);
  icu::UVector::~UVector((icu::UVector *)v28);
}

LABEL_81:
  *((_DWORD *)a2 + 10) += (*((void *)a2 + 4) - v22) >> 1;
  *((void *)a2 + 3) = v22;
  *((void *)a2 + 4) = v22;
  *((_BYTE *)a2 + 44) = 0;
  return this;
}

          int v60 = 0LL;
          unsigned int v61 = (v38 - 1);
          unsigned int v62 = (v61 + 2) & 0x1FFFFFFFELL;
          int v63 = (uint64x2_t)vdupq_n_s64(v61);
          uint64_t v64 = (_DWORD *)(v35 + 4 * v40);
          uint64_t v65 = v36 - v56;
          do
          {
            uint64_t v66 = vmovn_s64((int64x2_t)vcgeq_u64( v63,  (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v60), (int8x16_t)xmmword_180A2CBE0)));
            if ((v66.i8[0] & 1) != 0) {
              *(v64 - 1) = v65;
            }
            if ((v66.i8[4] & 1) != 0) {
              *uint64_t v64 = v65 + 32;
            }
            v60 += 2LL;
            v64 += 2;
            v65 += 64;
          }

          while (v62 != v60);
          v39 += v56;
          uint64_t v67 = v37 - v56;
          if (v67 >= 1)
          {
            unsigned int v68 = &v41[4 * v39];
            uint64_t v69 = v67 + 1;
            int v70 = &v41[4 * v36];
            do
            {
              unsigned __int8 v71 = *(_DWORD *)v68;
              v68 += 4;
              *(_DWORD *)int v70 = v71;
              v70 += 4;
              ++v39;
              ++v36;
              --v69;
            }

            while (v69 > 1);
          }

    if ((v37 & 1) == 0)
    {
      UErrorCode v48 = 0;
      for (uint64_t j = (int)i; ; ++j)
      {
        __int16 v50 = *((__int16 *)a3 + 4);
        if (v50 < 0)
        {
          uint64_t v51 = a3[3];
          if (j >= v51) {
            goto LABEL_114;
          }
        }

        else
        {
          uint64_t v51 = (unint64_t)*((unsigned __int16 *)a3 + 4) >> 5;
        }

        if (v51 <= i)
        {
          int v54 = 0xFFFFLL;
        }

        else
        {
          float v52 = (v50 & 2) == 0;
          float v53 = (char *)a3 + 10;
          if (v52) {
            float v53 = (char *)*((void *)a3 + 3);
          }
          int v54 = *(unsigned __int16 *)&v53[2 * j];
        }

        if (u_isUWhiteSpace(v54) || icu::PatternProps::isWhiteSpace((icu::PatternProps *)v54))
        {
          UErrorCode v48 = 1;
        }

        else if ((v54 - 8206) >= 2 && (_DWORD)v54 != 1564)
        {
LABEL_114:
          BOOL v55 = v90;
          if (!v90 && !v48) {
            goto LABEL_211;
          }
          uint64_t v56 = (unsigned __int16)v93 >> 5;
          if ((v93 & 0x8000u) != 0LL) {
            uint64_t v56 = DWORD1(v93);
          }
          LODWORD(v41) = *((unsigned __int16 *)a3 + 4);
          unint64_t v43 = a3[3];
          LODWORD(v42) = v41 >> 5;
          goto LABEL_120;
        }

        LODWORD(i) = i + 1;
      }
    }

    unsigned int v41 = *((unsigned __int16 *)a3 + 4);
    int v42 = v41 >> 5;
    unint64_t v43 = a3[3];
    unsigned int v44 = (char *)*((void *)a3 + 3);
    if ((v41 & 2) != 0) {
      unsigned int v44 = (char *)a3 + 10;
    }
    if ((v41 & 0x8000u) == 0LL) {
      int v45 = v41 >> 5;
    }
    else {
      int v45 = a3[3];
    }
    unint64_t i = (int)i;
    if ((v41 & 0x8000) == 0)
    {
LABEL_88:
      UErrorCode v46 = v41 >> 5;
      if (i >= v42) {
        goto LABEL_120;
      }
      goto LABEL_91;
    }

    while (1)
    {
      LODWORD(v46) = a3[3];
LABEL_91:
      if (v46 <= i || *(_WORD *)&v44[2 * i] != 8206)
      {
        int v47 = *(unsigned __int16 *)&v44[2 * i];
        if (v47 != 8207 && v47 != 1564) {
          break;
        }
      }

      ++i;
      if ((v41 & 0x8000) == 0) {
        goto LABEL_88;
      }
    }

uint64_t icu::Normalizer2Impl::composePair( icu::Normalizer2Impl *this, unsigned int a2, const unsigned __int16 *a3)
{
  unsigned int v6 = sub_1807E9A8C((uint64_t)this, a2);
  if (v6 == 1) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v8 = v6;
  if (v6 < *((unsigned __int16 *)this + 8))
  {
    if (v6 == 2)
    {
      return 0xFFFFFFFFLL;
    }

    unsigned int v13 = *((unsigned __int16 *)this + 7);
    if (v13 == v6)
    {
      else {
        return 0xFFFFFFFFLL;
      }
    }

    int v12 = (icu::Normalizer2Impl *)(*((void *)this + 6) + ((unsigned __int16)v6 & 0xFFFE));
    if (v8 > v13) {
      int v12 = (icu::Normalizer2Impl *)((char *)v12 + 2 * (*(_WORD *)v12 & 0x1F) + 2);
    }
LABEL_18:
    return 0xFFFFFFFFLL;
  }

  uint64_t result = 0xFFFFFFFFLL;
  if (v8 >> 10 <= 0x3E)
  {
    unsigned int v9 = *((unsigned __int16 *)this + 15);
    BOOL v10 = v8 >= v9;
    int v11 = v8 - v9;
    if (v10)
    {
      int v12 = (icu::Normalizer2Impl *)(*((void *)this + 5) + 2LL * (v11 >> 1));
      goto LABEL_18;
    }
  }

  return result;
}

uint64_t icu::Normalizer2Impl::compose( uint64_t a1, UChar *src, unsigned __int16 *a3, int a4, int a5, UChar **this, UErrorCode *a7)
{
  int v11 = src;
  unsigned int v13 = *(unsigned __int16 *)(a1 + 10);
  if (a3)
  {
    int v14 = a3;
  }

  else
  {
    uint64_t v63 = 0LL;
    do
    {
      unsigned int v64 = src[v63++];
      if (v64) {
        BOOL v65 = v64 >= v13;
      }
      else {
        BOOL v65 = 1;
      }
    }

    while (!v65);
    uint64_t v66 = &src[v63 - 1];
    if (a5 && v63 != 1) {
      icu::ReorderingBuffer::appendZeroCC(this, src, &src[v63 - 1], a7);
    }
    int v14 = u_strchr(&v11[v63 - 1], 0);
    if (v63 != 1)
    {
      uint64_t v67 = &v11[v63];
      unsigned int v68 = *(v67 - 2);
      int v11 = v67 - 2;
      if (sub_1807E9BC8(a1, v68, a4)) {
        int v11 = v66;
      }
      else {
        icu::ReorderingBuffer::removeSuffix((uint64_t)this, 1);
      }
    }
  }

  if (v11 == v14) {
    return 1LL;
  }
  int v73 = a5;
  int v72 = (icu::ReorderingBuffer *)this;
  uint64_t v15 = v11;
  int v71 = a4;
  do
  {
    while (1)
    {
      unint64_t v16 = *v11;
      if (v16 < v13
        || (uint64_t v17 = *(void *)(a1 + 32),
            uint64_t v18 = *(void *)(v17 + 8),
            unsigned int v19 = *(unsigned __int16 *)(v18
                                      + 2
                                      * ((v16 & 0x3F) + *(unsigned __int16 *)(*(void *)v17 + ((v16 >> 5) & 0x7FE)))),
            unsigned int v20 = *(unsigned __int16 *)(a1 + 18),
            v20 > v19))
      {
        unsigned int v21 = v11 + 1;
        goto LABEL_8;
      }

      unsigned int v21 = v11 + 1;
      if ((v16 & 0xFC00) != 0xD800) {
        break;
      }
      if (v21 == v14)
      {
LABEL_139:
        unsigned int v21 = v15;
        goto LABEL_140;
      }

      int v22 = *v21;
      if ((v22 & 0xFC00) == 0xDC00)
      {
        LODWORD(v16) = ((_DWORD)v16 << 10) - 56613888 + v22;
        if ((int)v16 >= *(_DWORD *)(v17 + 24))
        {
          int v23 = *(_DWORD *)(v17 + 20) - 2;
        }

        else
        {
          int v23 = ucptrie_internalSmallIndex((uint64_t *)v17, v16);
          unsigned int v20 = *(unsigned __int16 *)(a1 + 18);
        }

        unsigned int v21 = v11 + 2;
        unsigned int v19 = *(unsigned __int16 *)(v18 + 2LL * v23);
        if (v20 <= v19) {
          break;
        }
      }

LABEL_90:
        int v11 = v21;
        if (appended) {
          goto LABEL_115;
        }
        return 1LL;
      }

      return 0LL;
    }

    if (v19 == 65024 && v15 != v11)
    {
      __int16 v35 = v11 - 1;
      int v36 = *(v11 - 1);
      if (v16 > 0x11A6)
      {
        if ((v36 - 44032) >> 2 > 0xAE8
          || (unsigned __int16)(v36 + 21504) != 28
                                              * ((153391690 * (unint64_t)(unsigned __int16)(v36 + 21504)) >> 32))
        {
          goto LABEL_92;
        }

        if (!v73) {
          return 0LL;
        }
        int v43 = (unsigned __int16)(v16 + v36 - 4519);
        unsigned int v44 = v72;
      }

      else
      {
        unsigned int v37 = v36 - 4352;
        if (v37 > 0x12) {
          goto LABEL_92;
        }
        if (!v73) {
          return 0LL;
        }
        if (v21 == v14 || (int v38 = *v21, (v38 - 4520) > 0x1A))
        {
          if (!icu::Normalizer2Impl::hasCompBoundaryBefore(a1, v21, v14)) {
            goto LABEL_92;
          }
          __int16 v39 = 0;
          __int16 v35 = v11 - 1;
        }

        else
        {
          __int16 v39 = v38 - 4519;
          ++v21;
        }

        int v43 = (unsigned __int16)(v39 + 28 * (v16 + 21 * v37) - 15004);
        unsigned int v44 = v72;
      }

      int appended = sub_1807EDA64(v44, v43, 0, a7);
      goto LABEL_90;
    }

    if (v19 < 0xFE01) {
      goto LABEL_92;
    }
    unsigned int v25 = v19 >> 1;
    if (v71
      && icu::Normalizer2Impl::getPreviousTrailCC(a1, (uint64_t)v15, (uint64_t)v11) > v25)
    {
      if (!v73) {
        return 0LL;
      }
LABEL_92:
      __int16 v50 = v15;
      if (v15 == v11) {
        goto LABEL_95;
      }
      if (*(unsigned __int16 *)(a1 + 22) > v19
        || *(unsigned __int16 *)(a1 + 26) <= v19 && *(unsigned __int16 *)(a1 + 30) > v19)
      {
        goto LABEL_94;
      }

      __int16 v50 = v11 - 1;
      unint64_t v57 = *(v11 - 1);
      if ((v57 & 0xF800) != 0xD800)
      {
        uint64_t v59 = *(void *)(a1 + 32);
        int v61 = (v57 & 0x3F) + *(unsigned __int16 *)(*(void *)v59 + ((v57 >> 5) & 0x7FE));
        goto LABEL_131;
      }

      if (v50 == v15 || (v57 & 0x400) == 0)
      {
        uint64_t v59 = *(void *)(a1 + 32);
      }

      else
      {
        int v58 = *(v11 - 2);
        uint64_t v59 = *(void *)(a1 + 32);
        if ((v58 & 0xFC00) == 0xD800)
        {
          signed int v60 = v57 - 56613888 + (v58 << 10);
          if (v60 >= *(_DWORD *)(v59 + 24))
          {
            int v61 = *(_DWORD *)(v59 + 20) - 2;
          }

          else
          {
            int v61 = ucptrie_internalSmallIndex((uint64_t *)v59, v60);
            uint64_t v59 = *(void *)(a1 + 32);
          }

          __int16 v50 = v11 - 2;
LABEL_131:
          unsigned __int16 v62 = *(_WORD *)(*(void *)(v59 + 8) + 2LL * v61);
          if ((v62 & 1) != 0)
          {
            if (v71 && v62 != 1)
            {
              if (*(unsigned __int16 *)(a1 + 26) <= v62)
              {
                if ((v62 & 6u) >= 3) {
                  goto LABEL_95;
                }
              }

              else if (*(unsigned __int16 *)(*(void *)(a1 + 48) + (v62 & 0xFFFE)) > 0x1FFu)
              {
                goto LABEL_95;
              }
            }

              int v36 = 5;
              uint64_t Key = v64;
              unsigned int v3 = v61;
              goto LABEL_91;
            }
          }

          int v70 = U_MEMORY_ALLOCATION_ERROR;
          goto LABEL_90;
        }

        v27 |= 4u;
      }

      int v36 = 4;
    }

    while (v36 != 5);
    if (v26) {
      ures_close(v26);
    }
    if (v70 > U_ZERO_ERROR)
    {
      unsigned int v25 = 3;
      unsigned int v4 = v62;
      goto LABEL_127;
    }

    uint64_t v55 = sub_180850C18((const void **)qword_18C4491E8, v28);
    unint64_t v5 = v63;
    if (v55)
    {
      int v56 = (uint64_t)v55;
      *(void *)uint64_t v55 = Key;
      *((void *)v55 + 1) = v65;
      *((_DWORD *)v55 + 6) = v27;
      unint64_t v57 = (_BYTE *)*((void *)v55 + 2);
      if (v57) {
        uhash_close(v57);
      }
      *(void *)(v56 + 16) = v66;
      uhash_put(qword_18C4491D0, (uint64_t)Key, v56, (int *)&v70);
      unsigned int v4 = v62;
      if (v70 <= U_ZERO_ERROR) {
        unsigned int v25 = 0;
      }
      else {
        unsigned int v25 = 3;
      }
LABEL_127:
      unint64_t v5 = v63;
    }

    else
    {
      int v70 = U_MEMORY_ALLOCATION_ERROR;
      unsigned int v25 = 3;
      unsigned int v4 = v62;
    }

      int v32 = 176;
LABEL_91:
      int v12 = (char *)v36;
      goto LABEL_92;
    }

    if (v152)
    {
      int v43 = v149;
      if (!v150 || !v149)
      {
        uint64_t v55 = v152;
        goto LABEL_144;
      }

      *int v149 = 0;
      unsigned int v44 = v152;
      v152[1] = T_CString_toLowerCase(v150);
    }

    else
    {
      int v43 = (unsigned __int8 *)v12;
    }

    uint64_t v54 = uprv_malloc(0x18uLL);
    if (!v54) {
      goto LABEL_37;
    }
    *int v36 = 0;
    int v150 = 0LL;
    uint64_t v152 = v54;
    *uint64_t v54 = T_CString_toLowerCase(v33);
    v152[1] = 0LL;
    int v12 = (char *)v43;
    int v32 = 64;
    int v149 = 0LL;
LABEL_92:
    unsigned int v33 = v37;
    if (!v37) {
      goto LABEL_134;
    }
  }

  if ((v32 & 0x40) != 0 && sub_180851260((char *)v33, i, 2))
  {
    int v47 = v150;
    if (!v150) {
      int v47 = v33;
    }
    int v149 = &v33[i];
    int v150 = v47;
    int v32 = 224;
    goto LABEL_92;
  }

  if ((v32 & 0x80) != 0 && (UErrorCode v48 = uprv_asciitolower((char)*v33), (_DWORD)i == 1) && v48 == 120)
  {
    unsigned int v44 = v152;
    if (v152)
    {
      __int16 v49 = (char *)v149;
      if (!v150
        || !v149
        || (*int v149 = 0,
            v152[1] = T_CString_toLowerCase(v150),
            !sub_1808540C8((const char ***)(*(void *)v166 + 64LL), (uint64_t)v152, 0)))
      {
LABEL_132:
        uint64_t v55 = v44;
LABEL_144:
        uprv_free(v55);
        goto LABEL_145;
      }
    }

    else
    {
      __int16 v49 = v12;
    }

    if (v35)
    {
      __int16 v50 = (char *)(v36 + 1);
      while (1)
      {
        int v12 = v49;
        if (!v50) {
          break;
        }
        for (uint64_t j = 0LL; v50[j] && v50[j] != 45; ++j)
          ;
        __int16 v49 = &v50[j];
        if (v50[j]) {
          uint64_t v52 = v49 + 1;
        }
        else {
          uint64_t v52 = 0LL;
        }
        if (!strncmp(v50, "lvariant", 8uLL))
        {
          uint64_t v152 = 0LL;
          v50[j] = 0;
          __int128 v140 = 1;
          goto LABEL_128;
        }

        float v53 = sub_180851260(v50, j, 1);
        __int16 v50 = v52;
        if (!v53) {
          goto LABEL_125;
        }
      }

      uint64_t v52 = 0LL;
LABEL_125:
      if (v32 == 16)
      {
        uint64_t v152 = 0LL;
LABEL_128:
        int v32 = 16;
        unsigned int v37 = (unsigned __int8 *)v52;
        goto LABEL_92;
      }

      if (v12 - (char *)v37 >= 1)
      {
        *int v12 = 0;
        *(void *)(*(void *)v166 + 72LL) = T_CString_toLowerCase(v37);
      }
    }

    else
    {
      LODWORD(icu::LocaleBuilder::setScript((uint64_t)this, v11, v12) = (_DWORD)v49;
    }

          unsigned int v33 = *(_DWORD *)(v6 + 144152);
          goto LABEL_72;
        }

        int v42 = 0;
        int v43 = 0LL;
LABEL_57:
        unsigned int v44 = &v41[4 * v43];
        int v45 = v37 + 1;
        UErrorCode v46 = &v41[4 * v39];
        do
        {
          if (*(_DWORD *)v44 != *(_DWORD *)v46)
          {
            v43 += 4LL;
            v42 += 4;
            goto LABEL_74;
          }

          v44 += 4;
          v46 += 4;
          --v45;
        }

        while (v45 > 1);
        if ((v43 & 0x80000000) != 0) {
          goto LABEL_74;
        }
        int v47 = 0LL;
        UErrorCode v48 = (v38 - 1);
        __int16 v49 = (v48 + 2) & 0x1FFFFFFFELL;
        __int16 v50 = (uint64x2_t)vdupq_n_s64(v48);
        uint64_t v51 = v34 + 4 * v40;
        uint64_t v52 = v35 + 4 * v40;
        do
        {
          float v53 = vmovn_s64((int64x2_t)vcgeq_u64( v50,  (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v47), (int8x16_t)xmmword_180A2CBE0)));
          if ((v53.i8[0] & 1) != 0) {
            *(_DWORD *)(v51 + 4 * v47) = v42;
          }
          if ((v53.i8[4] & 1) != 0) {
            *(_DWORD *)(v52 + 4 * v47) = v42 + 32;
          }
          v47 += 2LL;
          v42 += 64;
        }

        while (v49 != v47);
        unsigned int v33 = *(_DWORD *)(v6 + 144152);
      }

      v39 += v37;
LABEL_72:
      if (v39 >= v33) {
        goto LABEL_111;
      }
    }
  }

  int v36 = 192;
LABEL_111:
  if (*(int *)(v6 + 144144) >= 1)
  {
    int v80 = 0;
    do
    {
      if (v80 == 2080) {
        int v80 = 2656;
      }
      *(_DWORD *)(v6 + 4LL * v80 + 2176) = *(_DWORD *)(v6 + 4LL * (*(int *)(v6 + 4LL * v80 + 2176) >> 5) + 144176);
      ++v80;
    }

    while (v80 < *(_DWORD *)(v6 + 144144));
  }

  *(_DWORD *)(v6 + 144164) = *(_DWORD *)(v6 + 4LL * (*(int *)(v6 + 144164) >> 5) + 144176);
  if ((v36 & 3) != 0)
  {
    UErrorCode v81 = (char *)*v7 + 4 * v36;
    do
    {
      *v81++ = *(_DWORD *)(v6 + 144136);
      ++v36;
    }

    while ((v36 & 3) != 0);
  }

  *(_DWORD *)(v6 + 144152) = v36;
  if (v29 > 0x10000)
  {
    uint64_t v82 = 0LL;
    int v83 = (_DWORD *)(v6 + 144176);
    do
    {
      *v83++ = v82;
      v82 += 64LL;
    }

    while (v82 != 2112);
    uint64_t v84 = ((*(_DWORD *)(v6 + 144168) - 0x10000) >> 11) + 2112;
    if (*(int *)(v6 + 144144) >= 2657)
    {
      uint64_t v85 = v6 + 2176;
      uint64_t v86 = 2656;
      while (1)
      {
        uint64_t v87 = 0;
        uint64_t v88 = v86;
        uint64_t v89 = v86;
        uint64_t v90 = v86;
LABEL_125:
        if (v84 >= 64) {
          break;
        }
        LODWORD(v90) = v86;
LABEL_136:
        __int128 v95 = 64;
        __int128 v96 = 63LL;
        while (2)
        {
          __int128 v97 = (_DWORD *)(v85 + 4 * (v84 - v96));
          __int128 v98 = v95;
          unsigned int v99 = (_DWORD *)(v85 + 4LL * v88);
          while (*v97 == *v99)
          {
            ++v97;
            ++v99;
            if (--v98 <= 1)
            {
              *(_DWORD *)(v6 + 4LL * ((int)v90 >> 6) + 144176) = v84 - v96;
              if ((int)v96 > 63)
              {
                uint64_t v86 = v90 + v96;
                goto LABEL_149;
              }

              goto LABEL_145;
            }
          }

          --v95;
          if (v96-- > 1) {
            continue;
          }
          break;
        }

        uint64_t v101 = (int *)(v6 + 4LL * ((int)v90 >> 6) + 144176);
        if (v84 >= (int)v90)
        {
          *uint64_t v101 = v90;
          uint64_t v86 = v90 + 64;
          uint64_t v84 = v90 + 64;
          goto LABEL_149;
        }

        LODWORD(v96) = 0;
        *uint64_t v101 = v84;
LABEL_145:
        int v102 = (int *)(v85 + 4LL * ((int)v96 + v89));
        int v103 = (_DWORD *)(v85 + 4LL * v84);
        int v104 = 65 - v96;
        uint64_t v84 = v84 - v96 + 64;
        v86 += (v87 << 6) + 64;
        do
        {
          uint64_t v105 = *v102++;
          *v103++ = v105;
          --v104;
        }

        while (v104 > 1);
LABEL_149:
        if (v86 >= *(_DWORD *)(v6 + 144144)) {
          goto LABEL_152;
        }
      }

      v91 = 0LL;
LABEL_127:
      int v92 = (_DWORD *)(v85 + 4 * v91);
      uint64_t v93 = 65;
      uint64_t v94 = (_DWORD *)(v85 + 4 * v90);
      do
      {
        if (*v92 != *v94)
        {
          if (++v91 != v84 - 63) {
            goto LABEL_127;
          }
          uint64_t v88 = v90;
          goto LABEL_136;
        }

        ++v92;
        ++v94;
        --v93;
      }

      while (v93 > 1);
      *(_DWORD *)(v6 + 4LL * ((int)v90 >> 6) + 144176) = v91;
      v90 += 64LL;
      v89 += 64;
      ++v87;
    }

      if (PatternCharIndex > 0x25)
      {
LABEL_268:
        int v141 = v191[0];
        if (a6)
        {
          int v32 = *a3;
          uint64_t v142 = *(unsigned __int16 *)(a2 + 8);
          int v143 = (__int16)v142;
          int v144 = v142 >> 5;
          if (v143 < 0) {
            int v144 = *(_DWORD *)(a2 + 12);
          }
          int v145 = a10;
          int v146 = (icu::SimpleDateFormat *)(*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 24LL))(a2, 0LL);
          icu::SimpleDateFormat::parseInt( v146,  (const icu::UnicodeString *)&v195,  (icu::Formattable *)v200,  -1,  (icu::ParsePosition *)&v190,  a7,  lpsrc);
          int v147 = (*((uint64_t (**)(icu::NumberFormat **))*a1 + 12))(a1);
          int v32 = v191[0];
          if (!v147 && (int)v191[0] < *a3 + v185)
          {
            unsigned int v28 = -*a3;
            goto LABEL_28;
          }
        }

        else
        {
          icu::SimpleDateFormat::parseInt( (icu::SimpleDateFormat *)isWhiteSpace,  (const icu::UnicodeString *)a2,  (icu::Formattable *)v200,  -1,  (icu::ParsePosition *)&v190,  a7,  lpsrc);
          LODWORD(v32) = v191[0];
          int v145 = a10;
        }

        if ((_DWORD)v32 == v141)
        {
LABEL_277:
          int v32 = *a3;
LABEL_278:
          unsigned int v28 = -(int)v32;
          goto LABEL_28;
        }

        int v148 = DWORD2(v200[0]);
        if ((*((unsigned int (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 1LL, &v192))
        {
          if (((0x60000CCuLL >> PatternCharIndex) & 1) != 0)
          {
            int v149 = dword_180A3D204[PatternCharIndex];
            if ((int)v14 > (int)((*(uint64_t (**)(_BYTE *, void))(*(void *)v145 + 128LL))(v145, v186)
                                + v149))
              goto LABEL_277;
          }
        }

        else if (((0x60000CCuLL >> PatternCharIndex) & 1) != 0)
        {
          int v150 = dword_180A3D174[PatternCharIndex];
          if ((int)((*(uint64_t (**)(_BYTE *, void))(*(void *)v145 + 128LL))(v145, v186) + v150) < (int)v148
            || (int)((*(uint64_t (**)(_BYTE *, void))(*(void *)v145 + 112LL))(v145, v186) + v150) > (int)v148)
          {
            goto LABEL_277;
          }
        }

        switch(PatternCharIndex)
        {
          case 0x19u:
            goto LABEL_326;
          case 0x1Au:
            int v71 = v148 - 1;
            goto LABEL_330;
          case 0x1Bu:
          case 0x1Cu:
            int v71 = 3 * v148 - 3;
LABEL_330:
            int v72 = v145;
            goto LABEL_201;
          case 0x1Du:
          case 0x1Eu:
          case 0x1Fu:
          case 0x20u:
          case 0x21u:
            goto LABEL_327;
          case 0x22u:
            (*(void (**)(_BYTE *, uint64_t))(*(void *)v145 + 432LL))(v145, v148);
            goto LABEL_325;
          default:
            if (PatternCharIndex == 19)
            {
LABEL_326:
              int v72 = v145;
              int v73 = 18;
            }

            else
            {
              if (PatternCharIndex == 2)
              {
                int v151 = (const char *)(*(uint64_t (**)(_BYTE *))(*(void *)v145 + 184LL))(v145);
                if (strcmp(v151, "hebrew"))
                {
                  int v71 = v148 - 1;
                  goto LABEL_163;
                }

                if (!icu::Calendar::isSet((uint64_t)a10, 1u))
                {
                  int v32 = (uint64_t)a9;
                  *a9 = v148;
                  goto LABEL_325;
                }

                v193[0] = U_ZERO_ERROR;
                uint64_t v179 = (icu::HebrewCalendar *)icu::Calendar::get(a10, 1u, v193);
                __int128 v181 = icu::HebrewCalendar::isLeapYear(v179) || (int)v148 < 6;
                int v71 = v148 - v181;
                int v72 = a10;
                goto LABEL_201;
              }

LABEL_94:
            __int16 v50 = v11;
          }

    *(_DWORD *)unsigned int v13 = v7;
    *(_DWORD *)(v13 + 4) = v7;
    *(void *)(v13 + 8) = 0LL;
    *(_DWORD *)(v13 + 16) = 0;
    *(_DWORD *)(v13 + 20) = v7;
    *(_BYTE *)(v13 + 96) = 0;
    *(_BYTE *)(v13 + 132) = 0;
    unsigned int v13 = *(void *)(a1 + 88);
    int v14 = *(_DWORD *)v13;
    goto LABEL_95;
  }

  int v12 = *(void *)(a1 + 16);
  if (v12 == v7)
  {
    if (v7 == v5)
    {
LABEL_30:
      uint64_t result = 0LL;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 44);
      return result;
    }

    unsigned int v13 = *(void *)(a1 + 88);
    int v14 = *(_DWORD *)v13;
    if (v7 >= *(_DWORD *)v13)
    {
      uint64_t v15 = *(_DWORD *)(v13 + 4);
      if (v7 < v15) {
        goto LABEL_40;
      }
    }
  }

  else
  {
    unsigned int v13 = *(void *)(a1 + 88);
    int v14 = *(_DWORD *)v13;
  }

  if (v7 >= v14)
  {
    uint64_t v15 = *(_DWORD *)(v13 + 4);
    if (v7 < v15)
    {
LABEL_40:
      unsigned int v19 = *(_DWORD *)(v13 + 12);
      unsigned int v20 = *(int *)(v13 + 8);
      *(void *)(a1 + 48) = v13 + 2 * v20 + 24;
      unsigned int v21 = *(void *)(a1 + 80);
      *(void *)(a1 + 80) = v13;
      *(void *)(a1 + 88) = v21;
      *(_DWORD *)(a1 + 44) = v19 - v20;
      *(void *)(a1 + 32) = v14;
      *(void *)(a1 + 16) = v15;
      int v22 = *(int *)(v13 + 20);
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(v13 + 16);
      int v23 = *(unsigned __int8 *)(v13 - v22 + v7 + 132) - (_DWORD)v20;
LABEL_44:
      *(_DWORD *)(a1 + 40) = v23;
      return 1LL;
    }
  }

  if (v7 == v5)
  {
    if (v12 == v7) {
      goto LABEL_30;
    }
    if (v5 == *(_DWORD *)(v13 + 4)) {
      goto LABEL_95;
    }
    goto LABEL_94;
  }

  if (v12 > v7 && *(void *)(a1 + 32) <= v7)
  {
    goto LABEL_44;
  }

  if ((char)v4[v7] <= -65)
  {
    unsigned int v24 = utf8_back1SafeBody(v4, 0, v7);
    unsigned int v4 = v78;
    unsigned int v13 = *(void *)(a1 + 88);
    unint64_t v5 = *(_DWORD *)(a1 + 120);
    int v11 = v24;
    uint64_t v7 = v24;
  }

  unsigned int v25 = 0;
  uint64_t v76 = 0;
  char v26 = *(void *)(a1 + 80);
  __int128 v74 = v5;
  else {
    unint64_t v27 = v5;
  }
  unsigned int v28 = v13 + 24;
  *(void *)(a1 + 80) = v13;
  *(void *)(a1 + 88) = v26;
  int v29 = v13 + 96;
  uint64_t v77 = v13 + 132;
  int v70 = v11;
  int v71 = (int32_t *)v13;
  int v72 = v13 - v11 + 132;
  LODWORD(v30) = v7;
  int v73 = v27;
  while (1)
  {
    signed int v31 = (int)v30;
    int v32 = v4[(int)v30];
    *(_WORD *)(v28 + 2LL * v25) = v32;
    unsigned int v33 = (int)v30 - (uint64_t)v7;
    *(_BYTE *)(v29 + v25) = v33;
    *(_BYTE *)(v77 + v33) = v25;
    LODWORD(v30) = v30 + 1;
    ++v25;
LABEL_90:
  }

  if (!v76)
  {
    v71[4] = v25;
    int v32 = v4[(int)v30];
    uint64_t v76 = 1;
  }

  unsigned int v34 = v30 + 1;
  if ((v32 & 0x80) != 0)
  {
    if (v34 == v27)
    {
LABEL_65:
      int v32 = 65533;
      LODWORD(v30) = v27;
      goto LABEL_83;
    }

    if (v32 < 0xE0)
    {
      if (v32 >= 0xC2)
      {
        int v42 = v32 & 0x1F;
        LODWORD(v30) = v30 + 1;
LABEL_74:
        int v43 = v4[(int)v30] ^ 0x80;
        if (v43 <= 0x3F)
        {
          int v32 = v43 | (v42 << 6);
          LODWORD(v30) = v30 + 1;
          goto LABEL_60;
        }

        goto LABEL_82;
      }
    }

    else if (v32 > 0xEF)
    {
      if (v32 <= 0xF4)
      {
        unsigned int v44 = v4[v34];
        if (((byte_180A2C94C[v44 >> 4] >> (v32 + 16)) & 1) != 0)
        {
          uint64_t v30 = (int)v30 + 2LL;
          if ((_DWORD)v31 + 2 == v27) {
            goto LABEL_65;
          }
          BOOL v41 = v4[v30] ^ 0x80;
          if (v41 > 0x3F)
          {
LABEL_82:
            int v32 = 65533;
            goto LABEL_83;
          }

          BOOL v40 = v44 & 0x3F | ((v32 - 240) << 6);
          goto LABEL_70;
        }
      }
    }

    else
    {
      BOOL v40 = v32 & 0xF;
      if (((a00000000000000[v32 & 0xF] >> (v4[v34] >> 5)) & 1) != 0)
      {
        BOOL v41 = v4[v34] & 0x3F;
        LODWORD(v30) = v30 + 1;
LABEL_70:
        LODWORD(v30) = v30 + 1;
        if ((_DWORD)v30 == v27) {
          goto LABEL_65;
        }
        int v42 = v41 | (v40 << 6);
        goto LABEL_74;
      }
    }

    int v32 = 65533;
    LODWORD(v30) = v30 + 1;
    goto LABEL_83;
  }

  LODWORD(v30) = v30 + 1;
LABEL_60:
  if ((v74 & 0x80000000) == 0 || v32)
  {
    if (HIWORD(v32))
    {
      __int16 v35 = v25 + 1;
      int v36 = v25;
      *(_WORD *)(v28 + 2LL * v25) = (v32 >> 10) - 10304;
      unsigned int v37 = v32 & 0x3FF | 0xDC00;
      int v38 = v25 + 2;
      __int16 v39 = v25 + 1;
LABEL_84:
      *(_WORD *)(v28 + 2 * v39) = v37;
      if (v38 > v35) {
        __int16 v35 = v38;
      }
      memset((void *)(v29 + v36), v31 - v7, (v35 + ~v25) + 1LL);
      else {
        int v45 = v30;
      }
      memset((void *)(v72 + v31), v25, (v45 + ~(_DWORD)v31) + 1LL);
      unsigned int v25 = v38;
      unsigned int v4 = v78;
      unint64_t v27 = v73;
      goto LABEL_90;
    }

            icu::UnicodeString::~UnicodeString((void *)v54, (icu::UnicodeString *)v135);
            icu::UnicodeString::~UnicodeString(v56, (icu::UnicodeString *)v130);
            __int16 v50 = 0uLL;
            goto LABEL_95;
          }

          if (*(_DWORD *)&v135[12] != 1) {
            goto LABEL_90;
          }
LABEL_83:
          float v53 = (unsigned __int16 *)&v135[10];
          if ((v135[8] & 2) == 0) {
            float v53 = *(unsigned __int16 **)&v135[24];
          }
          uint64_t v54 = *v53;
          if ((_DWORD)v54 == 49)
          {
            uint64_t v54 = (*((_DWORD *)this + 2) - 1);
            uint64_t v55 = (UChar **)v141;
          }

          else
          {
            if ((_DWORD)v54 != 48) {
              goto LABEL_94;
            }
            uint64_t v55 = (UChar **)v141;
            uint64_t v54 = (unint64_t)v104;
            if (v104) {
              goto LABEL_94;
            }
          }

LABEL_95:
          if (!v73 || v15 == v50 || icu::ReorderingBuffer::appendZeroCC((UChar **)v72, v15, v50, a7))
          {
            *(void *)int v70 = *((void *)v72 + 4);
            uint64_t v51 = *((void *)v72 + 2);
            icu::Normalizer2Impl::decomposeShort(a1, v50, v21, 0, v71, (UChar **)v72, a7);
            uint64_t v52 = 1LL;
            float v53 = icu::Normalizer2Impl::decomposeShort(a1, v21, v14, 1, v71, (UChar **)v72, a7);
            unsigned int v21 = v53;
            if ((char *)v53 - (char *)v50 >= 0xFFFFFFFFLL)
            {
              *a7 = U_INDEX_OUTOFBOUNDS_ERROR;
              return v52;
            }

            icu::Normalizer2Impl::recompose(a1, v72, (unint64_t)(*(void *)v70 - v51) >> 1, v71);
            if (!v73)
            {
              if (icu::ReorderingBuffer::equals((uint64_t)v72, v50, (uint64_t)v21))
              {
                uint64_t v54 = *((void *)v72 + 1);
                uint64_t v55 = *((void *)v72 + 2);
                *((void *)v72 + 3) = v55;
                *((void *)v72 + 4) = v55;
                if ((*(_BYTE *)(v54 + 8) & 2) != 0) {
                  int v56 = 27;
                }
                else {
                  int v56 = *(_DWORD *)(v54 + 16);
                }
                *((_DWORD *)v72 + 10) = v56;
                *((_BYTE *)v72 + 44) = 0;
                int v11 = v21;
                goto LABEL_115;
              }

              return 0LL;
            }

            goto LABEL_101;
          }

          return 1LL;
        }
      }

      int v61 = *(_DWORD *)(v59 + 20) - 1;
      goto LABEL_131;
    }

    do
    {
      if (v21 == v14)
      {
        if (v73) {
          icu::ReorderingBuffer::appendZeroCC((UChar **)v72, v15, v14, a7);
        }
        return 1LL;
      }

      char v26 = v21;
      unsigned int v28 = *v21++;
      unint64_t v27 = v28;
      if ((v28 & 0xF800) != 0xD800)
      {
        uint64_t v30 = *(void *)(a1 + 32);
        int v32 = (v27 & 0x3F) + *(unsigned __int16 *)(*(void *)v30 + ((v27 >> 5) & 0x7FE));
        goto LABEL_44;
      }

      if ((v27 & 0x400) != 0 || v21 == v14)
      {
        uint64_t v30 = *(void *)(a1 + 32);
LABEL_43:
        int v32 = *(_DWORD *)(v30 + 20) - 1;
        goto LABEL_44;
      }

      int v29 = *v21;
      uint64_t v30 = *(void *)(a1 + 32);
      if ((v29 & 0xFC00) != 0xDC00) {
        goto LABEL_43;
      }
      unsigned int v21 = v26 + 2;
      signed int v31 = ((_DWORD)v27 << 10) - 56613888 + v29;
      if (v31 >= *(_DWORD *)(v30 + 24))
      {
        int v32 = *(_DWORD *)(v30 + 20) - 2;
      }

      else
      {
        int v32 = ucptrie_internalSmallIndex((uint64_t *)v30, v31);
        uint64_t v30 = *(void *)(a1 + 32);
      }

    uint64_t v17 = *a9;
    UErrorCode v48 = *a9 <= 0 && (int)v20 < a6;
    a5 = v20;
    if (!v48) {
      goto LABEL_105;
    }
  }

  int v32 = (v21 < 0xEA || (v21 + 21) <= 1u) && a5 + 3 <= a6;
  if (v32 && *(char *)(a3 + v20) <= -65 && *(char *)(a5 + a3 + 2) < -64)
  {
    LODWORD(v20) = a5 + 3;
    goto LABEL_95;
  }

          if (v6 - (void)v3 == ++v30)
          {
            unsigned int v8 = 0;
            unsigned int v3 = (unsigned __int16 *)v6;
            unsigned int v9 = v31;
            goto LABEL_97;
          }
        }

        if ((v32 + 32) >= 0x13u)
        {
          *(_BYTE *)(v2 + 65) = v32;
          signed int v31 = 2;
          unsigned int v33 = 1;
LABEL_94:
          *(_BYTE *)(v2 + 64) = v33;
          unsigned int v13 = v32;
          goto LABEL_95;
        }

        if (v32 < 0xE8)
        {
          unsigned int v3 = (unsigned __int16 *)((char *)v3 + v30 + 1);
          unsigned int v8 = 1;
          int v12 = v13;
          BOOL v10 = v14;
          int v11 = (v32 + 32);
          continue;
        }

        if (v32 <= 0xEF)
        {
          int v11 = (v32 + 24);
          unsigned int v9 = 6;
LABEL_71:
          *(_BYTE *)(v2 + 65) = v32;
          unsigned int v8 = 1;
          *(_BYTE *)(v2 + 64) = 1;
          unsigned int v3 = (unsigned __int16 *)((char *)v3 + v30 + 1);
          goto LABEL_20;
        }

        if ((_DWORD)v32 == 240)
        {
          *(_BYTE *)(v2 + 65) = -16;
          unsigned int v33 = 1;
          signed int v31 = 1;
          int v32 = v13;
          goto LABEL_94;
        }

        if ((_DWORD)v32 == 241)
        {
          unsigned int v9 = 4;
          goto LABEL_71;
        }

        unsigned int v8 = 0;
        unsigned int v9 = 0;
        *a2 = 12;
        *(_BYTE *)(v2 + 65) = v32;
        *(_BYTE *)(v2 + 64) = 1;
        unsigned int v3 = (unsigned __int16 *)((char *)v3 + v30 + 1);
LABEL_97:
        LOBYTE(icu::LocaleBuilder::setScript((uint64_t)this, v11, v12) = v13;
LABEL_99:
        LOBYTE(icu::LocaleBuilder::setRegion((uint64_t)this, v9, v10) = v14;
LABEL_100:
        if (*a2 < 1 || *a2 == 15)
        {
          if (!v9) {
            *(_BYTE *)(v2 + 64) = 0;
          }
        }

        else
        {
          LOBYTE(v9) = 0;
        }

        v4[64] = v8;
        v4[65] = v9;
        v4[66] = v10;
        v4[67] = v11;
        v4[68] = v12;
        result[2] = v3;
        result[4] = v5;
        return result;
      case 1:
        goto LABEL_38;
      case 2:
        *v5++ = v21 | ((_WORD)v12 << 8);
        goto LABEL_51;
      case 3:
        unsigned int v3 = (unsigned __int16 *)((char *)v3 + v19 + 1);
        if ((v21 & 0x80) == 0)
        {
          char v26 = dword_180A268BC[(char)v10] + v21;
LABEL_57:
          *v5++ = v26;
          continue;
        }

        char v26 = *(_DWORD *)&v4[4 * (char)v10] + (v21 & 0x7F);
        if (!HIWORD(v26)) {
          goto LABEL_57;
        }
        int *v5 = (v26 >> 10) - 10304;
        unsigned int v28 = v26 & 0x3FF | 0xDC00;
        if ((unint64_t)(v5 + 1) >= v7)
        {
          *(_WORD *)(v2 + 144) = v28;
          *(_BYTE *)(v2 + 93) = 1;
          *a2 = 15;
          unsigned int v9 = 3;
          ++v5;
          goto LABEL_100;
        }

        v5[1] = v28;
        v5 += 2;
        continue;
      case 4:
        int v11 = v21 >> 5;
        unsigned int v25 = v21 & 0x1F;
        unsigned int v20 = 5;
        unsigned int v24 = (_BYTE *)(v2 + 66);
LABEL_38:
        unsigned __int16 *v24 = v21;
        *(_BYTE *)(v2 + 64) = v23;
        int v12 = v25;
        goto LABEL_39;
      case 5:
        *(_DWORD *)&v4[4 * (char)v11] = ((v21 << 7) & 0xFF807FFF | (v12 << 15)) + 0x10000;
        goto LABEL_51;
      case 6:
        unsigned int v3 = (unsigned __int16 *)((char *)v3 + v19 + 1);
        if (v21)
        {
          if (v21 <= 0x67)
          {
            unint64_t v27 = v21 << 7;
LABEL_60:
            *(_DWORD *)&v4[4 * (char)v11] = v27;
            continue;
          }

          if ((v21 - 104) <= 0x3Fu)
          {
            unint64_t v27 = (v21 << 7) + 44032;
            goto LABEL_60;
          }

          if (v21 >= 0xF9)
          {
            unint64_t v27 = dword_180A268DC[v21 - 249];
            goto LABEL_60;
          }

          *(_BYTE *)(v2 + 66) = v21;
        }

        else
        {
          *(_BYTE *)(v2 + 66) = 0;
        }

        *(_BYTE *)(v2 + 64) = 2;
        unsigned int v9 = 6;
        goto LABEL_100;
      default:
LABEL_39:
        if (v6 - (void)v3 != ++v19) {
          goto LABEL_23;
        }
        unsigned int v3 = (unsigned __int16 *)v6;
        unsigned int v9 = v20;
        goto LABEL_100;
    }
  }

          int v45 = v39;
LABEL_96:
          ++v38;
          __int16 v39 = v45;
          if (v38 == v14) {
            goto LABEL_100;
          }
        }
      }

      uint64_t v66 = 0;
      LODWORD(v45) = 0;
LABEL_100:
      unsigned int v9 = 0;
      unsigned int v13 = 0LL;
      unsigned int v8 = (v8 - v66);
      if (!(_DWORD)v8) {
        goto LABEL_131;
      }
    }

    if ((int)v14 >= 1)
    {
      uint64_t v17 = 0LL;
      while (1)
      {
        uint64_t v18 = *(unsigned __int8 *)(v16 + v17);
        if (v18 != 255) {
          break;
        }
LABEL_39:
        if (++v17 == v14) {
          goto LABEL_103;
        }
      }

      unsigned int v19 = icu::UVector::elementAt(*(icu::UVector **)(v67 + 216), v17);
      unsigned int v20 = *(unsigned __int16 *)(v19 + 8);
      if ((v20 & 0x11) != 0)
      {
        unsigned int v21 = 0LL;
        if ((v20 & 0x8000) != 0) {
          goto LABEL_27;
        }
LABEL_25:
        int v22 = v20 >> 5;
        goto LABEL_28;
      }

      if ((v20 & 2) != 0)
      {
        unsigned int v21 = (unsigned __int16 *)(v19 + 10);
        if ((v20 & 0x8000) == 0) {
          goto LABEL_25;
        }
      }

      else
      {
        unsigned int v21 = *(unsigned __int16 **)(v19 + 24);
        if ((v20 & 0x8000) == 0) {
          goto LABEL_25;
        }
      }

        unint64_t v57 = 0LL;
        int v58 = 0LL;
        while (1)
        {
          if ((*(_WORD *)(a5 + v57 + 8) & 1) == 0)
          {
            uint64_t v59 = v58;
            goto LABEL_100;
          }

          __int16 v49 = (void *)*(unsigned __int16 *)((char *)&v137 + v57);
LABEL_179:
          ++v58;
          v57 += 64LL;
          if (v57 == 512)
          {
            BOOL v41 = 0;
            goto LABEL_185;
          }
        }

        sub_18092CBC0(a5, v58, a6, (uint64_t)v130);
        icu::UnicodeString::operator=((icu::UnicodeString *)(a5 + v57), (icu::UnicodeString *)v130);
        icu::UnicodeString::~UnicodeString(v60, (icu::UnicodeString *)v130);
        __int16 v50 = 0uLL;
        __int16 v49 = (void *)*(unsigned int *)a6;
        uint64_t v59 = v58;
LABEL_100:
        uint64_t v111 = (unsigned __int16 *)(a5 + v57);
        if (*(_BYTE *)v106)
        {
          int v61 = sub_18092D5F8(v106, (char *)a6, v48);
          __int16 v50 = 0uLL;
          uint64_t v59 = v61;
        }

        *(void *)&v135[56] = 0LL;
        *(_OWORD *)&v135[24] = v50;
        *(_OWORD *)&v135[40] = v50;
        *(_OWORD *)&v135[8] = v50;
        *(void *)uint64_t v135 = off_18971B688;
        *(_WORD *)&v135[8] = 2;
        __int16 v113 = v59;
        sub_18092CBC0((uint64_t)&v136, v59, a6, (uint64_t)v130);
        if ((SWORD4(v130[0]) & 0x8000u) == 0) {
          unsigned __int16 v62 = WORD4(v130[0]) >> 5;
        }
        else {
          unsigned __int16 v62 = HIDWORD(v130[0]);
        }
        uint64_t v63 = icu::UnicodeString::doEqualsSubstring((uint64_t)v130, 0, 3, (uint64_t)L"{0}", 0, 3);
        if ((SWORD4(v130[0]) & 0x8000u) == 0) {
          unsigned int v64 = WORD4(v130[0]) >> 5;
        }
        else {
          unsigned int v64 = HIDWORD(v130[0]);
        }
        if (v63)
        {
          if (v64 < 4)
          {
            uint64_t v66 = 0xFFFF;
          }

          else
          {
            BOOL v65 = (unsigned __int16 *)&v130[1];
            if ((BYTE8(v130[0]) & 2) == 0) {
              BOOL v65 = (unsigned __int16 *)(*((void *)&v130[1] + 1) + 6LL);
            }
            uint64_t v66 = *v65;
          }

          if (u_isJavaSpaceChar(v66))
          {
            if ((SWORD4(v130[0]) & 0x8000u) == 0) {
              int v71 = WORD4(v130[0]) >> 5;
            }
            else {
              int v71 = HIDWORD(v130[0]);
            }
            if (v71 < 4)
            {
              int v73 = 0xFFFF;
            }

            else
            {
              int v72 = (unsigned __int16 *)&v130[1];
              if ((BYTE8(v130[0]) & 2) == 0) {
                int v72 = (unsigned __int16 *)(*((void *)&v130[1] + 1) + 6LL);
              }
              int v73 = *v72;
            }

            icu::UnicodeString::unBogus((uint64_t)v135);
            else {
              uint64_t v77 = *(unsigned int *)&v135[12];
            }
            icu::UnicodeString::doReplace( (icu::UnicodeString *)v135,  0LL,  v77,  (const icu::UnicodeString *)v130,  4,  (v62 - 4));
            uint64_t v76 = 2;
          }

          else
          {
            icu::UnicodeString::unBogus((uint64_t)v135);
            else {
              __int128 v74 = *(unsigned int *)&v135[12];
            }
            icu::UnicodeString::doReplace( (icu::UnicodeString *)v135,  0LL,  v74,  (const icu::UnicodeString *)v130,  3,  (v62 - 3));
            int v73 = 0;
            uint64_t v76 = 2;
          }

      UErrorCode v48 = a3->chunkOffset;
      else {
        a3->chunkOffset = v48 + 1;
      }
    }
  }

  return this;
}

BOOL icu::Normalizer2Impl::hasCompBoundaryBefore(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  if (a2 == a3) {
    return 1LL;
  }
  unint64_t v4 = *a2;
  if ((v4 & 0xF800) == 0xD800)
  {
    if ((v4 & 0x400) != 0 || a2 + 1 == a3 || (int v5 = a2[1], (v5 & 0xFC00) != 0xDC00))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v8 = *(_DWORD *)(v7 + 20) - 1;
    }

    else
    {
      signed int v6 = v5 + ((_DWORD)v4 << 10) - 56613888;
      uint64_t v7 = *(void *)(a1 + 32);
      if (v6 >= *(_DWORD *)(v7 + 24))
      {
        int v8 = *(_DWORD *)(v7 + 20) - 2;
      }

      else
      {
        int v8 = ucptrie_internalSmallIndex((uint64_t *)v7, v6);
        uint64_t v7 = *(void *)(a1 + 32);
      }
    }
  }

  else
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = (v4 & 0x3F) + *(unsigned __int16 *)(*(void *)v7 + ((v4 >> 5) & 0x7FE));
  }

  unsigned int v10 = *(unsigned __int16 *)(*(void *)(v7 + 8) + 2LL * v8);
  return 0LL;
}

BOOL icu::Normalizer2Impl::hasCompBoundaryAfter(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a2 == a3) {
    return 1LL;
  }
  unint64_t v6 = *(unsigned __int16 *)(a3 - 2);
  if ((v6 & 0xF800) == 0xD800)
  {
    if (a3 - 2 != a2 && (v6 & 0x400) != 0 && (int v7 = *(unsigned __int16 *)(a3 - 4), (v7 & 0xFC00) == 0xD800))
    {
      signed int v8 = v6 + (v7 << 10) - 56613888;
      uint64_t v9 = *(void *)(a1 + 32);
      if (v8 >= *(_DWORD *)(v9 + 24))
      {
        int v10 = *(_DWORD *)(v9 + 20) - 2;
      }

      else
      {
        int v10 = ucptrie_internalSmallIndex((uint64_t *)v9, v8);
        uint64_t v9 = *(void *)(a1 + 32);
      }
    }

    else
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = *(_DWORD *)(v9 + 20) - 1;
    }
  }

  else
  {
    uint64_t v9 = *(void *)(a1 + 32);
    int v10 = (v6 & 0x3F) + *(unsigned __int16 *)(*(void *)v9 + ((v6 >> 5) & 0x7FE));
  }

  unsigned int v12 = *(unsigned __int16 *)(*(void *)(v9 + 8) + 2LL * v10);
  if ((v12 & 1) == 0) {
    return 0LL;
  }
  BOOL result = 1LL;
  if (a4 && v12 != 1)
  {
    else {
      BOOL v13 = *(unsigned __int16 *)(*(void *)(a1 + 48) + ((unsigned __int16)v12 & 0xFFFE)) >= 0x200u;
    }
    return !v13;
  }

  return result;
}

uint64_t sub_1807EDA64(icu::ReorderingBuffer *this, int a2, unsigned int a3, UErrorCode *a4)
{
  if (*((_DWORD *)this + 10) || (uint64_t result = icu::ReorderingBuffer::resize(this, 1, a4), (_DWORD)result))
  {
    if (a3 && *((unsigned __int8 *)this + 44) > a3)
    {
      icu::ReorderingBuffer::insert(this, a2, a3);
    }

    else
    {
      signed int v8 = (_WORD *)*((void *)this + 4);
      *signed int v8 = a2;
      uint64_t v9 = v8 + 1;
      *((void *)this + 4) = v9;
      *((_BYTE *)this + 44) = a3;
      if (a3 <= 1) {
        *((void *)this + 3) = v9;
      }
    }

    --*((_DWORD *)this + 10);
    return 1LL;
  }

  return result;
}

uint64_t icu::Normalizer2Impl::getPreviousTrailCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == a3)
  {
    LOBYTE(result) = 0;
  }

  else
  {
    unint64_t v4 = (unint64_t)(a3 - a2) >> 1;
    signed int v5 = *(unsigned __int16 *)(a2 + 2 * ((((a3 - a2) << 31) - 0x100000000LL) >> 32));
    if ((v5 & 0xFC00) == 0xDC00 && (int)v4 >= 2)
    {
      int v7 = *(unsigned __int16 *)(a2 + 2LL * (v4 - 2));
      BOOL v8 = (v7 & 0xFC00) == 55296;
      int v9 = v5 + (v7 << 10) - 56613888;
      if (v8) {
        signed int v5 = v9;
      }
    }

    LOBYTE(result) = sub_1807E8B6C(a1, v5);
  }

  return result;
}

UChar *icu::Normalizer2Impl::composeQuickCheck(uint64_t a1, UChar *a2, UChar *a3, int a4, _DWORD *a5)
{
  signed int v5 = a2;
  unsigned int v7 = *(unsigned __int16 *)(a1 + 10);
  int v47 = a5;
  if (a3)
  {
    BOOL v8 = a3;
  }

  else
  {
    uint64_t v9 = 0LL;
    do
    {
      unsigned int v10 = a2[v9++];
      if (v10) {
        BOOL v11 = v10 >= v7;
      }
      else {
        BOOL v11 = 1;
      }
    }

    while (!v11);
    unsigned int v12 = &a2[v9];
    BOOL v8 = u_strchr(&a2[v9 - 1], 0);
    if (v9 != 1)
    {
      unsigned int v14 = *(v12 - 2);
      BOOL v13 = v12 - 2;
      if (sub_1807E9BC8(a1, v14, a4)) {
        signed int v5 = &v5[v9 - 1];
      }
      else {
        signed int v5 = v13;
      }
    }

    a5 = v47;
  }

  uint64_t v15 = v5;
LABEL_15:
  if (v5 == v8) {
    return v8;
  }
  unint64_t v16 = v5;
  while (1)
  {
    unint64_t v17 = *v16;
    if (v17 < v7
      || (uint64_t v18 = *(void *)(a1 + 32),
          uint64_t v19 = *(void *)(v18 + 8),
          unsigned int v20 = *(unsigned __int16 *)(v19
                                    + 2 * ((v17 & 0x3F) + *(unsigned __int16 *)(*(void *)v18 + ((v17 >> 5) & 0x7FE)))),
          unsigned int v21 = *(unsigned __int16 *)(a1 + 18),
          v21 > v20))
    {
      signed int v5 = v16 + 1;
      goto LABEL_20;
    }

    signed int v5 = v16 + 1;
    if ((v17 & 0xFC00) != 0xD800) {
      break;
    }
    if (v5 == v8) {
      return v8;
    }
    int v22 = *v5;
    if ((v22 & 0xFC00) == 0xDC00)
    {
      signed int v23 = ((_DWORD)v17 << 10) - 56613888 + v22;
      if (v23 >= *(_DWORD *)(v18 + 24))
      {
        int v24 = *(_DWORD *)(v18 + 20) - 2;
      }

      else
      {
        int v24 = ucptrie_internalSmallIndex((uint64_t *)v18, v23);
        a5 = v47;
        unsigned int v21 = *(unsigned __int16 *)(a1 + 18);
      }

      signed int v5 = v16 + 2;
      unsigned int v20 = *(unsigned __int16 *)(v19 + 2LL * v24);
      if (v21 <= v20) {
        break;
      }
    }

LABEL_71:
        unsigned int v20 = *(unsigned __int16 *)(*(void *)(v38 + 8) + 2LL * v35);
        if (v20 >= (unsigned __int16)v33)
        {
          unsigned int v41 = v34;
          unsigned __int8 v34 = v20 >> 10 <= 0x3E ? 0 : v20 >> 1;
          if (v41 <= v34 || v34 == 0) {
            continue;
          }
        }

        goto LABEL_92;
      }

      uint64_t v38 = *(void *)(a1 + 32);
LABEL_70:
      int v35 = *(_DWORD *)(v38 + 20) - 1;
      goto LABEL_71;
    }
  }

    if (v32 != 0xFFFF) {
      return v32;
    }
LABEL_24:
    unsigned int v20 = (int *)((char *)v20 + *((unsigned __int16 *)v20 + 5));
    --v19;
  }

  while (v19);
  unint64_t v17 = qword_18C535058;
  unint64_t v4 = v4;
LABEL_73:
  signed int v60 = v64;
  LODWORD(v61) = 0xFFFF;
  sub_1808595F0(v17, 0LL, 1114112, 0LL, (uint64_t)&v60, v4);
  int v32 = v61;
  if ((_DWORD)v61 == 0xFFFF) {
    goto LABEL_74;
  }
  return v32;
}

    uint64_t v84 = (v84 + 1);
    int v83 = v30;
    if ((_DWORD)v84 == v106) {
      return v30 + v22;
    }
  }

  udata_printError( a1,  (uint64_t)"uchar_swapNames(): unknown type %u of algorithmic range %u\n",  v87,  v88,  v89,  v90,  v91,  v92,  *(unsigned __int8 *)(v85 + 8));
  uint64_t v63 = 16;
LABEL_48:
  *a5 = v63;
  return 0LL;
}

  if (BYTE4(alias[1])) {
    uprv_free(alias[0]);
  }
  if (BYTE4(v49[1])) {
    uprv_free(v49[0]);
  }
  return this;
}

    BOOL v8 = (v14 >> 8) & 0xFFFFF;
    if (!v15) {
      goto LABEL_77;
    }
  }

  if ((v14 & 8) == 0)
  {
    unsigned int v12 = 0;
    uint64_t v9 = 0;
    unsigned int v7 = HIWORD(v14);
    goto LABEL_71;
  }

  if (v9) {
    goto LABEL_75;
  }
  int v28 = 0;
  if (v15)
  {
    uint64_t v29 = (v14 >> 8) & 0xFFFFF;
    do
    {
      signed int v30 = *(void *)(v4 + 8 * v29);
      if ((v30 & 3) == 2)
      {
        if ((v30 & 8) == 0) {
          break;
        }
        ++v28;
      }

      uint64_t v29 = ((unint64_t)v30 >> 8) & 0xFFFFF;
    }

    while (v29);
  }

  uint64_t v38 = v11;
  if ((_DWORD)v7)
  {
    if (v11 | v10)
    {
      if ((_DWORD)v7 == 256)
      {
        TertiaryAfter = 1280;
        LODWORD(v7) = 256;
      }

      else
      {
        TertiaryAfter = *(_DWORD *)(*(void *)v41 + 16LL) << 8;
      }
    }

    else
    {
      TertiaryAfter = icu::CollationRootElements::getTertiaryAfter((int **)v41, v40, v13, v7);
    }
  }

  else
  {
    LODWORD(v7) = (*(_DWORD *)(*(void *)v41 + 16LL) << 8) - 256;
    TertiaryAfter = *(_DWORD *)(*(void *)v41 + 4LL * **(unsigned int **)v41) & 0x3F3F;
  }

  icu::CollationWeights::initForTertiary((icu::CollationWeights *)v42);
  unsigned int v33 = icu::CollationWeights::allocWeights((icu::CollationWeights *)v42, v7, TertiaryAfter, v28 + 1);
  this = v37;
  BOOL v11 = v38;
  if (v33)
  {
LABEL_75:
    LODWORD(v7) = icu::CollationWeights::nextWeight((icu::CollationWeights *)v42);
    unsigned int v12 = 0;
    uint64_t v9 = 1;
    if ((v14 & 8) == 0) {
      goto LABEL_71;
    }
    goto LABEL_70;
  }

  int v35 = "tertiary tailoring gap too small";
LABEL_83:
  unsigned __int8 v34 = a2;
LABEL_84:
  *unsigned __int8 v34 = U_BUFFER_OVERFLOW_ERROR;
  *((void *)this + 36) = v35;
}

    icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)&v72);
    icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)&v76);
    return v7;
  }

  __int128 v74 = 0uLL;
  __int128 v75 = 0uLL;
  int v72 = 0uLL;
  int v73 = 0uLL;
  unsigned int v68 = L"{0} o {1}";
  icu::UnicodeString::UnicodeString(&v72, 1LL, &v68);
  v63[1] = (uint64_t)v68;
  int v42 = *(unsigned __int16 *)(a2 + 8);
  if ((v42 & 1) != 0)
  {
    unsigned int v43 = BYTE8(v72) & 1;
  }

  else
  {
    unsigned int v43 = 0;
    BOOL v44 = (__int16)v42;
    int v45 = v42 >> 5;
    if (v44 >= 0) {
      UErrorCode v46 = v45;
    }
    else {
      UErrorCode v46 = *(_DWORD *)(a2 + 12);
    }
    if ((SWORD4(v72) & 0x8000u) == 0) {
      int v47 = WORD4(v72) >> 5;
    }
    else {
      int v47 = HIDWORD(v72);
    }
    if ((BYTE8(v72) & 1) == 0 && v46 == v47) {
      unsigned int v43 = icu::UnicodeString::doEquals((icu::UnicodeString *)a2, (const icu::UnicodeString *)&v72, v46);
    }
  }

  UErrorCode v48 = *(unsigned __int16 *)(a3 + 8);
  if ((v48 & 1) != 0)
  {
    float v53 = (void *)WORD4(v72);
    __int16 v49 = BYTE8(v72) & 1;
  }

  else
  {
    __int16 v49 = 0;
    __int16 v50 = (__int16)v48;
    uint64_t v51 = v48 >> 5;
    if (v50 >= 0) {
      uint64_t v52 = v51;
    }
    else {
      uint64_t v52 = *(_DWORD *)(a3 + 12);
    }
    if ((SWORD4(v72) & 0x8000u) == 0) {
      float v53 = (void *)(WORD4(v72) >> 5);
    }
    else {
      float v53 = (void *)HIDWORD(v72);
    }
    if ((BYTE8(v72) & 1) == 0 && v52 == (_DWORD)v53) {
      __int16 v49 = icu::UnicodeString::doEquals((icu::UnicodeString *)a3, (const icu::UnicodeString *)&v72, v52);
    }
  }

  if ((v43 | v49) == 1)
  {
    memset(v71, 0, sizeof(v71));
    uint64_t v67 = L"{0} u {1}";
    icu::UnicodeString::UnicodeString(v71, 1LL, &v67);
    v63[0] = (uint64_t)v67;
    uint64_t v55 = icu::UMemory::operator new(v63, (icu::UMemory *)0x130, v54);
    unsigned int v7 = v55;
    if (v55)
    {
      if (v43) {
        unint64_t v57 = (const icu::UnicodeString *)v71;
      }
      else {
        unint64_t v57 = (const icu::UnicodeString *)a2;
      }
      if (v49) {
        int v58 = (const icu::UnicodeString *)v71;
      }
      else {
        int v58 = (const icu::UnicodeString *)a3;
      }
      sub_180900304( (uint64_t)v55,  (uint64_t)sub_1809003BC,  v57,  (const icu::UnicodeString *)a2,  v58,  (const icu::UnicodeString *)a3,  a4);
    }

    icu::UnicodeString::~UnicodeString(v56, (icu::UnicodeString *)v71);
  }

  icu::UnicodeString::~UnicodeString(v53, (icu::UnicodeString *)&v72);
  icu::UnicodeString::~UnicodeString(v59, (icu::UnicodeString *)&v76);
  if (((v43 | v49) & 1) == 0)
  {
LABEL_105:
    signed int v60 = icu::UMemory::operator new(v9, (icu::UMemory *)0x98, v8);
    unsigned int v7 = v60;
    if (v60) {
      sub_180900B44((uint64_t)v60, (const icu::UnicodeString *)a2, (const icu::UnicodeString *)a3, a4);
    }
  }

  return v7;
}

                icu::FormattedStringBuilder::toTempUnicodeString((icu::FormattedStringBuilder *)v50, (uint64_t)&v42);
                if ((v43 & 0x8000u) == 0) {
                  int v37 = (unsigned __int16)v43 >> 5;
                }
                else {
                  int v37 = v44;
                }
                icu::UnicodeString::doAppend((uint64_t)a4, (const icu::UnicodeString *)&v42, 0, v37);
                icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)&v42);
                icu::FormattedStringBuilder::~FormattedStringBuilder((icu::FormattedStringBuilder *)v50);
                (*(void (**)(icu::Format *))(*(void *)v40 + 8LL))(v40);
              }

              else
              {
                *a5 = U_INTERNAL_PROGRAM_ERROR;
              }
            }

            icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)v52);
            goto LABEL_76;
          }
        }

        goto LABEL_69;
      }

      icu::UnicodeString::operator=(&v55, (UChar **)(*(void *)(*((void *)this + 41) + 72LL) + 72LL));
    }

    BOOL v11 = uprv_trunc(v11);
    goto LABEL_10;
  }

  return a4;
}

LABEL_92:
  if (a5) {
    *a5 = 0;
  }
  return v16;
}

      icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)v57);
    }

    icu::UnicodeSetIterator::~UnicodeSetIterator((icu::UnicodeSetIterator *)v54);
    icu::UnicodeString::~UnicodeString(v51, (icu::UnicodeString *)v58);
    v6 += 2;
    unsigned int v7 = 0uLL;
    break;
  }

  if (v53 < 1)
  {
    qword_18C535038 = (uint64_t)v4;
  }

  else
  {
LABEL_100:
    if (*v4) {
      uhash_close((_BYTE *)*v4);
    }
    icu::UMemory::operator delete(v4);
  }

void *icu::Normalizer2Impl::composeAndAppend( uint64_t a1, UChar *src, unsigned __int16 *a3, int a4, int a5, UChar **a6, icu::ReorderingBuffer *this, UErrorCode *a8)
{
  unsigned int v12 = a3;
  BOOL v13 = src;
  uint64_t v30 = *MEMORY[0x1895F89C0];
  if (*((void *)this + 2) == *((void *)this + 4)
    || (NextCompBoundary = icu::Normalizer2Impl::findNextCompBoundary(a1, src, a3, a5),
        unint64_t v17 = (char *)NextCompBoundary - (char *)v13,
        NextCompBoundary == v13))
  {
LABEL_12:
    if (a4) {
      return (void *)icu::Normalizer2Impl::compose(a1, v13, v12, a5, 1, (UChar **)this, a8);
    }
    if (!v12) {
      unsigned int v12 = u_strchr(v13, 0);
    }
    return (void *)icu::ReorderingBuffer::appendZeroCC((UChar **)this, v13, v12, a8);
  }

  unsigned __int16 v25 = NextCompBoundary;
  uint64_t PreviousCompBoundary = icu::Normalizer2Impl::findPreviousCompBoundary( a1,  *((void *)this + 2),  *((void *)this + 4),  a5);
  uint64_t v19 = (unint64_t)(*((void *)this + 4) - PreviousCompBoundary) >> 1;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  icu::UnicodeString::UnicodeString((uint64_t)&v26, PreviousCompBoundary, v19);
  icu::ReorderingBuffer::removeSuffix((uint64_t)this, v19);
  icu::UnicodeString::operator=(a6, (UChar **)&v26);
  icu::UnicodeString::doAppend((uint64_t)&v26, (uint64_t)v13, 0, v17 >> 1);
  if ((BYTE8(v26) & 0x11) != 0)
  {
    unsigned int v20 = 0LL;
  }

  else if ((BYTE8(v26) & 2) != 0)
  {
    unsigned int v20 = (UChar *)((unint64_t)&v26 | 0xA);
  }

  else
  {
    unsigned int v20 = (UChar *)*((void *)&v27 + 1);
  }

  int v21 = WORD4(v26) >> 5;
  if (SWORD4(v26) < 0) {
    int v21 = HIDWORD(v26);
  }
  icu::Normalizer2Impl::compose(a1, v20, &v20[v21], a5, 1, (UChar **)this, a8);
  UErrorCode v22 = *a8;
  uint64_t result = icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v26);
  if (v22 <= U_ZERO_ERROR)
  {
    BOOL v13 = v25;
    goto LABEL_12;
  }

  return result;
}

unsigned __int16 *icu::Normalizer2Impl::findNextCompBoundary( uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, int a4)
{
  unint64_t v4 = a2;
  if (a2 != a3)
  {
    while (1)
    {
      uint64_t v9 = v4 + 1;
      unint64_t v8 = *v4;
      if ((v8 & 0xF800) == 0xD800)
      {
        if ((v8 & 0x400) != 0 || v9 == a3)
        {
          uint64_t v11 = *(void *)(a1 + 32);
        }

        else
        {
          int v10 = *v9;
          uint64_t v11 = *(void *)(a1 + 32);
          if ((v10 & 0xFC00) == 0xDC00)
          {
            uint64_t v9 = v4 + 2;
            LODWORD(icu::LocaleBuilder::setVariant((uint64_t)this, v7, v8) = v10 + ((_DWORD)v8 << 10) - 56613888;
            if ((int)v8 >= *(_DWORD *)(v11 + 24))
            {
              int v12 = *(_DWORD *)(v11 + 20) - 2;
            }

            else
            {
              int v12 = ucptrie_internalSmallIndex((uint64_t *)v11, v8);
              uint64_t v11 = *(void *)(a1 + 32);
            }

            goto LABEL_11;
          }
        }

        int v12 = *(_DWORD *)(v11 + 20) - 1;
      }

      else
      {
        uint64_t v11 = *(void *)(a1 + 32);
        int v12 = (v8 & 0x3F) + *(unsigned __int16 *)(*(void *)v11 + ((v8 >> 5) & 0x7FE));
      }

LABEL_11:
      unsigned int v13 = *(unsigned __int16 *)(*(void *)(v11 + 8) + 2LL * v12);
      unsigned int v14 = *(unsigned __int16 *)(a1 + 26);
      if ((v13 & 1) != 0)
      {
        if (!a4 || v13 == 1) {
          return v9;
        }
        if (!(v14 <= v13 {
             ? (v13 & 6) >= 3
        }
        unint64_t v4 = v9;
        if (v9 == a3) {
          return v4;
        }
      }

      else
      {
        unint64_t v4 = v9;
        if (v9 == a3) {
          return a3;
        }
      }
    }
  }

  return v4;
}

    if (v6 >= *(unsigned __int16 *)(a1 + 12))
    {
      uint64_t v11 = *(unsigned __int16 *)(*(void *)(v9 + 8) + 2LL * v10);
      if (!icu::Normalizer2Impl::norm16HasDecompBoundaryBefore((icu::Normalizer2Impl *)a1, v11))
      {
        a2 = v7;
        if (!icu::Normalizer2Impl::norm16HasDecompBoundaryAfter((icu::Normalizer2Impl *)a1, v11)) {
          continue;
        }
      }
    }

    return a2;
  }

  return a2;
}

  uint64_t v15 = strlen(v12);
  unint64_t v16 = v5;
  do
  {
    unint64_t v17 = v16;
    unint64_t v16 = (void *)v16[84];
  }

  while (v16);
  uint64_t v18 = (_BYTE *)(v17[82] + v15);
  v17[82] = v18 + 1;
  *uint64_t v18 = 0;
  uint64_t v19 = (char *)sub_18080D874(v5);
  v6[3] = v19;
  int Language = uloc_getLanguage((uint64_t)v6[2], v19, 58, (int *)a4);
  do
  {
    int v21 = v5;
    signed int v5 = (void *)v5[84];
  }

  while (v5);
  UErrorCode v22 = 0LL;
  signed int v23 = (_BYTE *)(v21[82] + Language);
  v21[82] = v23 + 1;
  *signed int v23 = 0;
  int v24 = v6[3];
  void v6[4] = (char *)v24;
  while (1)
  {
    uint64_t result = (char **)strcmp(v24, off_189710CB0[v22]);
    if (!(_DWORD)result) {
      break;
    }
    unsigned __int16 v25 = v22 >= 0xA;
    v22 += 2LL;
    if (v25) {
      return result;
    }
  }

  void v6[4] = off_189710CB0[v22 + 1];
  return result;
}

      HIDWORD(v57) = v20;
      LODWORD(v58) = v21;
      uint64_t v59 = 0LL;
      uint64_t result = ucase_toFullUpper(v23, (uint64_t (*)(uint64_t, void))sub_18081A51C, (uint64_t)v56, &v59, v53);
      if ((result & 0x80000000) == 0)
      {
        unsigned __int16 v25 = result;
        if (*a8 <= 0)
        {
          __int128 v26 = (const unsigned __int8 *)(v20 - v18);
        }

        __int128 v27 = (icu::ByteSinkUtil *)(v21 - v20);
        if (v25 > 0x1F) {
          uint64_t result = icu::ByteSinkUtil::appendCodePoint(v27, v25, a6, a7, v16);
        }
        else {
          uint64_t result = icu::ByteSinkUtil::appendChange((int)v27, v59, v25, a6, a7, a8);
        }
        uint64_t v18 = v21;
      }

      uint64_t v19 = *a8;
      if (*a8 <= 0)
      {
        unsigned int v20 = v21;
      }

      goto LABEL_97;
    }

    __int128 v29 = *(unsigned __int8 *)(a4 + v21) ^ 0x80LL;
    LODWORD(v21) = v20 + 2;
    signed int v23 = (((_DWORD)v23 << 6) - 12288) | (unint64_t)v29;
    uint64_t v30 = *((unsigned __int8 *)v55 + v23);
    if (*((_BYTE *)v55 + v23))
    {
      if (v30 == 128)
      {
        if ((v23 & 0x80000000) != 0) {
          goto LABEL_97;
        }
        goto LABEL_11;
      }

      UErrorCode v48 = (const unsigned __int8 *)(v20 - v18);
      uint64_t result = icu::ByteSinkUtil::appendTwoBytes((int)v23 + (char)v30, a6);
      if (!a7) {
        goto LABEL_33;
      }
      int v32 = a7;
      unsigned int v33 = 2;
      unsigned __int8 v34 = 2;
      goto LABEL_32;
    }

  if ((_DWORD)v17)
  {
LABEL_12:
    int v21 = a8;
    UErrorCode v22 = v9;
    signed int v23 = (v9 + 1);
    int v24 = v16 + 4 * v21 + 4;
    unsigned __int16 v25 = v15 + 2 * v21 + 2;
    do
    {
      *(_WORD *)(a6 + 2 * v22) = *(_WORD *)(v14 + v25);
      __int128 v26 = *(_DWORD *)(v14 + v24);
      if (v26)
      {
        if (HIBYTE(v26))
        {
          if ((_DWORD)a3)
          {
            if ((v26 & 0x20000000) == 0) {
              goto LABEL_20;
            }
          }

          else if ((v26 & 0xA0000000) == 0x80000000)
          {
LABEL_20:
          }
        }

        else
        {
          uint64_t result = sub_18082C2D8(v14, a2, a3, a4, a5, a6, v23);
        }
      }

      v25 += 2LL;
      v24 += 4LL;
      --v17;
    }

    while (v17);
  }

  return result;
}

  a2 = v8;
  if ((a3 & 0x80000000) == 0)
  {
LABEL_6:
    uint64_t v9 = v7 - a2;
    if (v9 >= a3) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }

  a2 = v10;
  if ((a3 & 0x80000000) == 0)
  {
LABEL_6:
    uint64_t v11 = v9 - a2;
    if (v11 >= a3) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }

  if (a2)
  {
    int v10 = a2 - 1;
    uint64_t v11 = sub_18087865C(a1[a2 - 1]);
    int v12 = 0;
    unsigned int v13 = 0;
    unsigned int v14 = 0;
    UErrorCode v81 = 0;
    uint64_t v15 = 0;
    uint64_t v85 = 0LL;
    unint64_t v16 = -2;
    unint64_t v17 = v10;
    while (1)
    {
      if (v11 <= 0xFF && (sub_18087865C(a1[v17]) & 4) == 0)
      {
        uint64_t v18 = v17;
        goto LABEL_67;
      }

      if (v16 < 0)
      {
        uint64_t v19 = v17 - 1;
        while (v19 != -1)
        {
          unsigned int v20 = sub_18087865C(a1[v19]);
          if ((v20 & 4) == 0) {
            unint64_t v16 = v19;
          }
          v19 -= (v20 & 4) >> 2;
          if ((v16 & 0x80000000) == 0)
          {
            int v12 = v20;
            goto LABEL_23;
          }
        }

        int v12 = 0;
        unint64_t v16 = 3000;
        if ((v11 & 0x20) == 0)
        {
LABEL_29:
          uint64_t v18 = v17;
          goto LABEL_32;
        }
      }

      else
      {
LABEL_23:
        if ((v11 & 0x20) == 0) {
          goto LABEL_29;
        }
      }

      if ((v13 & 0x10) == 0) {
        goto LABEL_29;
      }
      int v21 = a1[v17] - 1570;
      if (v21 <= 5 && ((0x2Bu >> v21) & 1) != 0)
      {
        UErrorCode v22 = word_180A2C4C6[(__int16)v21];
        a1[v17] = -1;
        a1[v10] = v22;
        unint64_t v17 = v10;
      }

      else
      {
        UErrorCode v22 = 0;
      }

      uint64_t v11 = sub_18087865C(v22);
      LODWORD(v85) = 1;
      uint64_t v18 = v17;
      unsigned int v13 = v14;
LABEL_32:
      if (v18 < 1)
      {
        if (!v18)
        {
          signed int v23 = *a1;
          goto LABEL_37;
        }
      }

      else if (a1[v18 - 1] == 32)
      {
        signed int v23 = a1[v18];
LABEL_37:
        int v24 = v23 - 1591;
        if (v23 == 1574) {
          unsigned __int16 v25 = 1;
        }
        else {
          unsigned __int16 v25 = v15;
        }
        __int128 v26 = (v24 != -5) & __CFADD__(v24, 5);
        __int128 v27 = HIDWORD(v85);
        if (v26) {
          __int128 v27 = 1;
        }
        HIDWORD(v85) = v27;
        if (!v26) {
          uint64_t v15 = v25;
        }
      }

      __int128 v28 = byte_180A2C45A[16 * (v12 & 3) + 4 * (v13 & 3) + (v11 & 3)];
      if ((v11 & 3) == 1)
      {
        v28 &= 1u;
        __int128 v29 = v18;
        uint64_t v30 = a1[v18];
      }

      else
      {
        __int128 v29 = v18;
        int v31 = &a1[v18];
        uint64_t v30 = *v31;
        if (v30 - 1619 >= 0xFFFFFFF8)
        {
          if ((v13 & 2) != 0 && a5 == 1 && (v12 & 1) != 0)
          {
            if ((v30 & 0xFFFE) == 0x64C)
            {
              __int128 v28 = 0;
            }

            else
            {
              __int128 v28 = (v12 & 0x20) == 0;
              if ((v13 & 0x10) == 0) {
                __int128 v28 = 1;
              }
            }
          }

          else
          {
            __int128 v28 = 0;
            if (a5 == 2 && v30 == 1617)
            {
              LOWORD(v28) = 1;
LABEL_64:
              int v32 = byte_180A2C49A[v30 - 1611];
              LOWORD(v28) = v28 - 400;
LABEL_66:
              *int v31 = v28 + v32;
              goto LABEL_67;
            }
          }
        }
      }

      if ((v30 ^ 0x600) <= 0xFF)
      {
        int v31 = &a1[v29];
        if (v30 - 1619 < 0xFFFFFFF8)
        {
          if ((v11 & 8) != 0)
          {
            v28 += v11 >> 8;
            int v32 = -1200;
          }

          else
          {
            if (v11 < 0x100 || (v11 & 4) != 0) {
              goto LABEL_67;
            }
            v28 += v11 >> 8;
            int v32 = -400;
          }

          goto LABEL_66;
        }

        if (a5 != 2 || v30 == 1617) {
          goto LABEL_64;
        }
        *int v31 = -2;
        UErrorCode v81 = 1;
      }

    a2 += v4;
  }

  while ((int)a2 < v3);
  return 0LL;
}

    int v12 = 1;
LABEL_102:
    *a3 = v12;
    return;
  }

  unsigned int v13 = utrie2_get32((uint64_t *)a1, 0x10FFFFu);
  unsigned int v14 = v13;
  uint64_t v15 = *(_DWORD *)(v6 + 144136);
  unint64_t v16 = *(_DWORD *)(v6 + 144164);
  if (v15 == v13) {
    unint64_t v17 = *(_DWORD *)(v6 + 144160);
  }
  else {
    unint64_t v17 = -1;
  }
  if (v15 == v13) {
    uint64_t v18 = v16;
  }
  else {
    uint64_t v18 = 0xFFFFFFFFLL;
  }
  uint64_t v19 = 1114112;
  LODWORD(v20) = 544;
  while (1)
  {
    unsigned int v20 = (int)v20 - 1LL;
    while (1)
    {
      int v21 = *(_DWORD *)(v6 + 4 * v20);
      if (v21 != v17) {
        break;
      }
      --v20;
      UErrorCode v22 = __OFSUB__(v19, 2048);
      v19 -= 2048;
      if ((v19 < 0) ^ v22 | (v19 == 0))
      {
LABEL_40:
        __int128 v29 = 0;
        *(_DWORD *)(v6 + 144168) = 0;
        *(_DWORD *)(a1 + 44) = 0;
        goto LABEL_41;
      }
    }

    if (v21 == *(_DWORD *)(v6 + 144160)) {
      break;
    }
    LODWORD(v23) = 64;
    do
    {
      int v24 = v18;
      unsigned __int16 v25 = (int)v23;
      while (1)
      {
        signed int v23 = v25 - 1;
        uint64_t v18 = *(unsigned int *)(v6 + 2172 + 4LL * v21 + 4 * v25);
        if ((_DWORD)v18 != (_DWORD)v24) {
          break;
        }
        v19 -= 32;
        --v25;
        if (v23 + 1 <= 1)
        {
          uint64_t v18 = v24;
          goto LABEL_39;
        }
      }

      if ((_DWORD)v18 != v16)
      {
        __int128 v26 = 31LL;
        __int128 v27 = v19;
        while (*((_DWORD *)*v7 + (int)v18 + v26) == v14)
        {
          --v27;
          __int128 v28 = v26-- + 1;
          if (v28 <= 1) {
            goto LABEL_38;
          }
        }

        goto LABEL_184;
      }

      if (v15 != v14) {
        goto LABEL_183;
      }
LABEL_38:
      v19 -= 32;
    }

    while ((int)v25 >= 2);
LABEL_39:
    unint64_t v17 = *(_DWORD *)(v6 + 4 * v20);
    if (v19 <= 0) {
      goto LABEL_40;
    }
  }

  if (v15 == v14)
  {
    v19 -= 2048;
    goto LABEL_39;
  }

        uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v15, ++v9, (const char **)&__s1, a3);
        if ((_DWORD)result) {
          continue;
        }
        break;
      }
    }
  }

  return result;
}

    abort();
  }

  if (*((_WORD *)this + 2380))
  {
    if (v3 != 72) {
      goto LABEL_11;
    }
  }

  else
  {
    *a2 = U_UNSUPPORTED_ERROR;
  }

  return 2LL;
}

  *((_DWORD *)this + 10) = 2;
  *((void *)this + 1) = 0LL;
  uint64_t v9 = *((void *)this + 3);
  if (v9)
  {
    if (*(_BYTE *)(v9 + 12)) {
      uprv_free(*(void **)v9);
    }
    icu::UMemory::operator delete((void *)v9);
  }

  *((void *)this + 3) = 0LL;
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  *((void *)this + 4) = 0LL;
  return result;
}

  uint64_t result = 0LL;
  unsigned int v7 = U_INVALID_FORMAT_ERROR;
LABEL_18:
  *a2 = v7;
  return result;
}

    icu::UnicodeString::doReplace(this, a4, 0LL, v12, 0, v14);
    unsigned int v20 = 0;
    goto LABEL_43;
  }

  unsigned int v14 = *(unsigned __int16 *)(a1 + 24) >> 5;
  if (!v13) {
    goto LABEL_11;
  }
  uint64_t v15 = 0;
LABEL_6:
  unint64_t v16 = icu::UnicodeString::indexOf(a1 + 16, (uint64_t)L"$(", 0, -1, v15, (int)v14 - v15);
  LODWORD(icu::LocaleBuilder::setLanguage((uint64_t)this, v13, v14) = v16;
  unint64_t v17 = *(unsigned __int16 *)(a1 + 24);
  if (v16 < 0)
  {
    uint64_t v19 = 0;
    if ((v17 & 0x8000) != 0) {
      uint64_t v18 = *(_DWORD *)(a1 + 28);
    }
    else {
      uint64_t v18 = v17 >> 5;
    }
  }

  else if ((v17 & 0x8000) != 0)
  {
    uint64_t v18 = *(_DWORD *)(a1 + 28);
    if (v18 >= v16) {
      uint64_t v19 = v16;
    }
    else {
      uint64_t v19 = *(_DWORD *)(a1 + 28);
    }
  }

  else
  {
    uint64_t v18 = v17 >> 5;
    else {
      uint64_t v19 = v18;
    }
  }

  int v21 = icu::UnicodeString::indexOf((uint64_t)v12, (uint64_t)")", 0, -1, v19, v18 - v19);
  UErrorCode v22 = *((unsigned __int16 *)this + 4);
  signed int v23 = (__int16)v22;
  int v24 = v22 >> 5;
  if (v23 >= 0) {
    unsigned __int16 v25 = v24;
  }
  else {
    unsigned __int16 v25 = *((_DWORD *)this + 3);
  }
  __int128 v26 = *(unsigned __int16 *)(a1 + 24);
  if ((v26 & 0x8000) != 0) {
    __int128 v27 = *(_DWORD *)(a1 + 28);
  }
  else {
    __int128 v27 = v26 >> 5;
  }
  if (v21 < (int)(v27 - 1))
  {
    icu::UnicodeString::tempSubString(v12, v21 + 2, 0x7FFFFFFF, (icu::UnicodeString *)v44);
    if ((v45 & 0x8000u) == 0) {
      __int128 v28 = v45 >> 5;
    }
    else {
      __int128 v28 = v46;
    }
    icu::UnicodeString::doReplace(this, a4, 0LL, (const icu::UnicodeString *)v44, 0, v28);
    icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v44);
  }

  uint64_t v30 = *(icu::PluralFormat **)(a1 + 104);
  int v31 = sub_180914FB8(*(unsigned int *)(a1 + 8), *(unsigned __int16 *)(a1 + 12));
  icu::PluralFormat::format(v30, a6, a2 / v31, (icu::UnicodeString *)v44);
  if ((v45 & 0x8000u) == 0) {
    int v32 = v45 >> 5;
  }
  else {
    int v32 = v46;
  }
  icu::UnicodeString::doReplace(this, a4, 0LL, (const icu::UnicodeString *)v44, 0, v32);
  icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)v44);
  if ((int)v14 >= 1)
  {
    icu::UnicodeString::tempSubString(v12, 0, v14, (icu::UnicodeString *)v44);
    if ((v45 & 0x8000u) == 0) {
      unsigned __int8 v34 = v45 >> 5;
    }
    else {
      unsigned __int8 v34 = v46;
    }
    icu::UnicodeString::doReplace(this, a4, 0LL, (const icu::UnicodeString *)v44, 0, v34);
    icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)v44);
  }

  else {
    unint64_t v36 = *(unsigned __int16 *)(a1 + 24) >> 5;
  }
  int v37 = *((unsigned __int16 *)this + 4);
  uint64_t v38 = (__int16)v37;
  signed int v39 = v37 >> 5;
  if (v38 < 0) {
    signed int v39 = *((_DWORD *)this + 3);
  }
  unsigned int v20 = v36 + v25 - v39;
LABEL_43:
  int v40 = *(_DWORD **)(a1 + 88);
  if (v40)
  {
    else {
      unsigned int v41 = v20;
    }
    (*(void (**)(_DWORD *, unint64_t, icu::UnicodeString *, void, uint64_t, UErrorCode *))(*(void *)v40 + 48LL))( v40,  a2,  this,  a4 - v41,  a5,  a6);
  }

  uint64_t result = *(_DWORD **)(a1 + 80);
  if (result)
  {
    else {
      unsigned int v43 = v20;
    }
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, unint64_t, icu::UnicodeString *, void, uint64_t, UErrorCode *))(*(void *)result + 48LL))( result,  a2,  this,  a4 - v43,  a5,  a6);
  }

  return result;
}

    icu::UnicodeString::doReplace(this, a3, 0LL, v12, 0, v14);
    unsigned int v20 = 0;
    goto LABEL_47;
  }

  unsigned int v14 = *(unsigned __int16 *)(a1 + 24) >> 5;
  if (!v13) {
    goto LABEL_11;
  }
  uint64_t v15 = 0;
LABEL_6:
  unint64_t v16 = icu::UnicodeString::indexOf(a1 + 16, (uint64_t)L"$(", 0, -1, v15, (int)v14 - v15);
  LODWORD(icu::LocaleBuilder::setLanguage((uint64_t)this, v13, v14) = v16;
  unint64_t v17 = *(unsigned __int16 *)(a1 + 24);
  if (v16 < 0)
  {
    uint64_t v19 = 0;
    if ((v17 & 0x8000) != 0) {
      uint64_t v18 = *(_DWORD *)(a1 + 28);
    }
    else {
      uint64_t v18 = v17 >> 5;
    }
  }

  else if ((v17 & 0x8000) != 0)
  {
    uint64_t v18 = *(_DWORD *)(a1 + 28);
    if (v18 >= v16) {
      uint64_t v19 = v16;
    }
    else {
      uint64_t v19 = *(_DWORD *)(a1 + 28);
    }
  }

  else
  {
    uint64_t v18 = v17 >> 5;
    else {
      uint64_t v19 = v18;
    }
  }

  int v21 = icu::UnicodeString::indexOf((uint64_t)v12, (uint64_t)")", 0, -1, v19, v18 - v19);
  UErrorCode v22 = *((unsigned __int16 *)this + 4);
  signed int v23 = (__int16)v22;
  int v24 = v22 >> 5;
  if (v23 >= 0) {
    unsigned __int16 v25 = v24;
  }
  else {
    unsigned __int16 v25 = *((_DWORD *)this + 3);
  }
  __int128 v26 = *(unsigned __int16 *)(a1 + 24);
  if ((v26 & 0x8000) != 0) {
    __int128 v27 = *(_DWORD *)(a1 + 28);
  }
  else {
    __int128 v27 = v26 >> 5;
  }
  if (v21 < (int)(v27 - 1))
  {
    icu::UnicodeString::tempSubString(v12, v21 + 2, 0x7FFFFFFF, (icu::UnicodeString *)v44);
    if ((v45 & 0x8000u) == 0) {
      __int128 v28 = v45 >> 5;
    }
    else {
      __int128 v28 = v46;
    }
    icu::UnicodeString::doReplace(this, a3, 0LL, (const icu::UnicodeString *)v44, 0, v28);
    icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v44);
  }

  uint64_t v30 = (double)(unint64_t)sub_180914FB8(*(unsigned int *)(a1 + 8), *(unsigned __int16 *)(a1 + 12));
  if (a6 < 0.0 || a6 >= 1.0) {
    int v31 = a6 / v30;
  }
  else {
    int v31 = uprv_round(v30 * a6);
  }
  icu::PluralFormat::format(*(icu::PluralFormat **)(a1 + 104), a5, (int)v31, (icu::UnicodeString *)v44);
  if ((v45 & 0x8000u) == 0) {
    int v32 = v45 >> 5;
  }
  else {
    int v32 = v46;
  }
  icu::UnicodeString::doReplace(this, a3, 0LL, (const icu::UnicodeString *)v44, 0, v32);
  icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)v44);
  if ((int)v14 >= 1)
  {
    icu::UnicodeString::tempSubString(v12, 0, v14, (icu::UnicodeString *)v44);
    if ((v45 & 0x8000u) == 0) {
      unsigned __int8 v34 = v45 >> 5;
    }
    else {
      unsigned __int8 v34 = v46;
    }
    icu::UnicodeString::doReplace(this, a3, 0LL, (const icu::UnicodeString *)v44, 0, v34);
    icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)v44);
  }

  else {
    unint64_t v36 = *(unsigned __int16 *)(a1 + 24) >> 5;
  }
  int v37 = *((unsigned __int16 *)this + 4);
  uint64_t v38 = (__int16)v37;
  signed int v39 = v37 >> 5;
  if (v38 < 0) {
    signed int v39 = *((_DWORD *)this + 3);
  }
  unsigned int v20 = v36 + v25 - v39;
LABEL_47:
  int v40 = *(_DWORD **)(a1 + 88);
  if (v40)
  {
    else {
      unsigned int v41 = v20;
    }
    (*(void (**)(_DWORD *, icu::UnicodeString *, void, uint64_t, UErrorCode *, double))(*(void *)v40 + 56LL))( v40,  this,  a3 - v41,  a4,  a5,  a6);
  }

  uint64_t result = *(_DWORD **)(a1 + 80);
  if (result)
  {
    else {
      unsigned int v43 = v20;
    }
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, icu::UnicodeString *, void, uint64_t, UErrorCode *, double))(*(void *)result + 56LL))( result,  this,  a3 - v43,  a4,  a5,  a6);
  }

  return result;
}

    ++v5;
  }

  while (v5 != v6);
  return result;
}

  icu::UnicodeString::UnicodeString(a6, (icu::UnicodeString *)&v17);
  return icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)&v17);
}

  if (icu::UnicodeString::doCompare(a1, 0, 1, (uint64_t)L"'", 0, -1))
  {
    int v10 = *(unsigned __int16 *)(a1 + 8);
    uint64_t v11 = (__int16)v10;
    int v12 = v10 >> 5;
    if (v11 >= 0) {
      unsigned int v13 = v12;
    }
    else {
      unsigned int v13 = *(unsigned int *)(a1 + 12);
    }
    icu::UnicodeString::doReplace((icu::UnicodeString *)a2, a3, 0LL, (const icu::UnicodeString *)a1, 0, v13);
  }

  else
  {
    icu::UnicodeString::doReplace(a2, a3, 0LL, (uint64_t)"'", 0, 0xFFFFFFFFLL);
  }

    if (icu::UCharsTrie::current(a2) - 4 > 0xFFFFFFFD)
    {
      unsigned int v13 = (unsigned __int16 *)*((void *)a2 + 2);
      unsigned int v14 = v13 + 1;
      uint64_t v15 = *v13;
      if ((__int16)*v13 < 0)
      {
        unint64_t v17 = (icu::number::Notation *)(v15 & 0x7FFF);
        if (v17 >= 0x4000)
        {
          if ((_DWORD)v17 == 0x7FFF)
          {
            uint64_t v18 = v13[1] << 16;
            unsigned int v14 = v13 + 2;
          }

          else
          {
            uint64_t v18 = ((_DWORD)v17 << 16) - 0x40000000;
          }

          unint64_t v17 = (icu::number::Notation *)(v18 | *v14);
        }
      }

      else
      {
        unint64_t v16 = v15 >> 6;
        if (v16 > 0x100)
        {
          if (v16 > 0x1FE) {
            unint64_t v17 = (icu::number::Notation *)(v13[2] | (v13[1] << 16));
          }
          else {
            unint64_t v17 = (icu::number::Notation *)((*v14 | ((unsigned __int16)(v16 & 0x1FF) << 16)) - 16842752);
          }
        }

        else
        {
          unint64_t v17 = (icu::number::Notation *)(v16 - 1);
        }
      }

      switch((int)v17)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
          if (*a3) {
            goto LABEL_18;
          }
          *a3 = 1;
          *(void *)(a4 + 4) = sub_18093951C(v17);
          *(_DWORD *)(a4 + 12) = v22;
          return (v17 & 0xFFFFFFFE) == 2;
        case 5:
        case 6:
        case 7:
          if (a3[1]) {
            goto LABEL_18;
          }
          a3[1] = 1;
          sub_18093957C((int)v17, (uint64_t)v31);
          goto LABEL_52;
        case 8:
          if (a3[13]) {
            goto LABEL_18;
          }
          a3[13] = 1;
          if (a3[1]) {
            goto LABEL_18;
          }
          a3[1] = 1;
          icu::number::Scale::powerOfTen(2LL, (uint64_t)v31);
          icu::number::Scale::operator=(a4 + 168, (uint64_t)v31);
          icu::number::Scale::~Scale((icu::number::Scale *)v31);
          icu::MeasureUnit::getPercent((uint64_t)v31);
LABEL_52:
          icu::MeasureUnit::operator=(a4 + 16, (uint64_t)v31);
          icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v31);
          return 0LL;
        case 9:
        case 10:
        case 11:
        case 12:
          if (a3[4]) {
            goto LABEL_18;
          }
          a3[4] = 1;
          sub_1809395B0((int)v17, (uint64_t)v31);
          *(_OWORD *)(a4 + 64) = *(_OWORD *)v31;
          *(_OWORD *)(a4 + 76) = *(_OWORD *)&v31[12];
          if ((_DWORD)v17 == 9) {
            return 2LL;
          }
          else {
            return 3LL;
          }
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
          if (a3[5]) {
            goto LABEL_18;
          }
          a3[5] = 1;
          uint64_t v19 = sub_1809395F8((int)v17);
          uint64_t result = 0LL;
          *(_DWORD *)(a4 + 96) = v19;
          return result;
        case 24:
          if (a3[8]) {
            goto LABEL_18;
          }
          a3[8] = 1;
          *(void *)int v31 = icu::number::IntegerWidth::zeroFillTo(0LL);
          *(_DWORD *)&_OWORD v31[8] = v27;
          __int128 v28 = icu::number::IntegerWidth::truncateAt((icu::number::IntegerWidth *)v31, 0LL);
          uint64_t result = 0LL;
          *(void *)(a4 + 124) = v28;
          *(_BYTE *)(a4 + 132) = v29;
          return result;
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
          if (a3[6]) {
            goto LABEL_18;
          }
          a3[6] = 1;
          else {
            signed int v23 = (_DWORD)v17 - 25;
          }
          int v24 = icu::number::impl::Grouper::forStrategy(v23);
          uint64_t result = 0LL;
          *(void *)(a4 + 100) = v24;
          *(_DWORD *)(a4 + 108) = v25;
          return result;
        case 30:
          if (a3[9]) {
            goto LABEL_18;
          }
          a3[9] = 1;
          InstanceByint Name = icu::NumberingSystem::createInstanceByName((icu::NumberingSystem *)"latn", a5, v12);
          icu::number::impl::SymbolsWrapper::setTo((void *)(a4 + 136), (uint64_t)InstanceByName);
          return 0LL;
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
          if (a3[10]) {
            goto LABEL_18;
          }
          uint64_t result = 0LL;
          a3[10] = 1;
          int v21 = (_DWORD)v17 - 31;
          *(_DWORD *)(a4 + 152) = v21;
          return result;
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
          if (a3[11]) {
            goto LABEL_18;
          }
          uint64_t result = 0LL;
          a3[11] = 1;
          unsigned int v20 = (_DWORD)v17 - 38;
          *(_DWORD *)(a4 + 156) = v20;
          return result;
        case 47:
        case 48:
          if (a3[12]) {
            goto LABEL_18;
          }
          uint64_t result = 0LL;
          a3[12] = 1;
          if ((_DWORD)v17 == 48) {
            __int128 v26 = 1;
          }
          else {
            __int128 v26 = 2;
          }
          if ((_DWORD)v17 == 47) {
            __int128 v26 = 0;
          }
          *(_DWORD *)(a4 + 164) = v26;
          return result;
        case 49:
          if (a3[4]) {
            goto LABEL_18;
          }
          a3[4] = 1;
          return 4LL;
        case 50:
          if (a3[1]) {
            goto LABEL_18;
          }
          a3[1] = 1;
          return 5LL;
        case 51:
          if (a3[2]) {
            goto LABEL_18;
          }
          a3[2] = 1;
          return 6LL;
        case 52:
          if (a3[1]) {
            goto LABEL_18;
          }
          a3[1] = 1;
          if (a3[2]) {
            goto LABEL_18;
          }
          a3[2] = 1;
          return 7LL;
        case 53:
          if (a3[3]) {
            goto LABEL_18;
          }
          a3[3] = 1;
          return 8LL;
        case 54:
          if (a3[1]) {
            goto LABEL_18;
          }
          a3[1] = 1;
          if (a3[2]) {
            goto LABEL_18;
          }
          a3[2] = 1;
          return 9LL;
        case 55:
          if (a3[8]) {
            goto LABEL_18;
          }
          a3[8] = 1;
          return 10LL;
        case 56:
          if (a3[9]) {
            goto LABEL_18;
          }
          a3[9] = 1;
          return 11LL;
        case 57:
          if (a3[13]) {
            goto LABEL_18;
          }
          a3[13] = 1;
          return 12LL;
        default:
          abort();
      }
    }

    goto LABEL_18;
  }

  if (a3[4])
  {
LABEL_18:
    uint64_t result = 0LL;
    *(_DWORD *)a5 = 65811;
    return result;
  }

  a3[4] = 1;
  sub_18093BE5C(a1, a4, a5);
  return 3LL;
}

    abort();
  }

  return a3 | (a2 << 24);
}

  if (v10) {
    (*(void (**)(icu::Calendar *))(*(void *)v10 + 8LL))(v10);
  }
  return Instance;
}

      if (v12)
      {
        unsigned int v13 = *v12;
        if (!a2)
        {
          (*(void (**)(void))(v13 + 240))();
          goto LABEL_18;
        }

        unsigned int v14 = *(void (**)(void))(v13 + 248);
      }

      else
      {
        if (a2) {
          goto LABEL_16;
        }
        if (!v16) {
          goto LABEL_16;
        }
        unsigned int v14 = *(void (**)(void))(*(void *)v16 + 232LL);
      }

      v14();
LABEL_18:
      uint64_t v18 = (UChar *)a3;
      int v10 = icu::UnicodeString::extract((uint64_t)&v19, &v18, a4, a5);
      unint64_t v17 = v18;
      uint64_t v15 = (uint64_t)&v17;
      goto LABEL_19;
    }

    *a5 = 1;
  }

  return 0xFFFFFFFFLL;
}

uint64_t icu::Normalizer2Impl::findPreviousCompBoundary(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = a3;
  if (a3 != a2)
  {
    while (1)
    {
      uint64_t v8 = v4 - 2;
      unint64_t v9 = *(unsigned __int16 *)(v4 - 2);
      if ((v9 & 0xF800) != 0xD800)
      {
        uint64_t v11 = *(void *)(a1 + 32);
        int v12 = (v9 & 0x3F) + *(unsigned __int16 *)(*(void *)v11 + ((v9 >> 5) & 0x7FE));
        goto LABEL_13;
      }

      if (v8 == a2 || (v9 & 0x400) == 0) {
        break;
      }
      int v10 = *(unsigned __int16 *)(v4 - 4);
      uint64_t v11 = *(void *)(a1 + 32);
      if ((v10 & 0xFC00) != 0xD800) {
        goto LABEL_10;
      }
      LODWORD(v9) = v9 + (v10 << 10) - 56613888;
      if ((int)v9 >= *(_DWORD *)(v11 + 24))
      {
        int v12 = *(_DWORD *)(v11 + 20) - 2;
      }

      else
      {
        int v12 = ucptrie_internalSmallIndex((uint64_t *)v11, v9);
        uint64_t v11 = *(void *)(a1 + 32);
      }

      uint64_t v8 = v4 - 4;
LABEL_13:
      unsigned int v13 = *(unsigned __int16 *)(*(void *)(v11 + 8) + 2LL * v12);
      if ((v13 & 1) != 0)
      {
        if (!a4 || v13 == 1) {
          return v4;
        }
        if (*(unsigned __int16 *)(a1 + 26) <= v13)
        {
          if ((v13 & 6) < 3) {
            return v4;
          }
        }

        else if (*(unsigned __int16 *)(*(void *)(a1 + 48) + ((unsigned __int16)v13 & 0xFFFE)) < 0x200u)
        {
          return v4;
        }
      }

      if (*(unsigned __int16 *)(a1 + 26) <= v13)
      {
        BOOL v14 = *(unsigned __int16 *)(a1 + 30) > v13 || v8 == a2;
        uint64_t v4 = v8;
        if (v14) {
          return v4;
        }
      }

      else
      {
        uint64_t v4 = v8;
        if (v8 == a2) {
          return a2;
        }
      }
    }

    uint64_t v11 = *(void *)(a1 + 32);
LABEL_10:
    int v12 = *(_DWORD *)(v11 + 20) - 1;
    goto LABEL_13;
  }

  return v4;
}

uint64_t icu::Normalizer2Impl::composeUTF8( icu::Normalizer2Impl *this, icu::ByteSink *a2, unsigned int a3, icu::ByteSinkUtil *a4, unsigned __int8 *a5, icu::ByteSink *a6, icu::Edits *a7, UErrorCode *a8)
{
  uint64_t v11 = a2;
  uint64_t v132 = *MEMORY[0x1895F89C0];
  __int128 v12 = 0uLL;
  __int128 v128 = 0u;
  uint64_t v131 = 0LL;
  __int128 v130 = 0u;
  __int128 v129 = 0u;
  uint64_t v127 = off_18971B688;
  LOWORD(v128) = 2;
  uint64_t p_dst = *((unsigned __int16 *)this + 5);
  else {
    char v14 = -32;
  }
  else {
    unsigned __int8 v15 = v14;
  }
  if (a4 == (icu::ByteSinkUtil *)a5)
  {
    uint64_t v19 = a4;
    goto LABEL_203;
  }

  uint64_t p_dst = (uint64_t)&__dst;
  uint64_t v18 = v123;
  uint64_t v19 = a4;
  int v119 = a8;
  __int128 v120 = a6;
  unsigned int v118 = a2;
LABEL_9:
  unsigned int v20 = a4;
  int v21 = (const unsigned __int8 *)a4;
  while (1)
  {
    unsigned int v23 = *v21++;
    unsigned int v22 = v23;
    if (v23 >= v15) {
      break;
    }
LABEL_35:
    unsigned int v20 = (icu::ByteSinkUtil *)v21;
    if (v21 == a5) {
      goto LABEL_203;
    }
  }

  a4 = (icu::ByteSinkUtil *)v21;
  if ((v22 & 0x80) != 0)
  {
    a4 = (icu::ByteSinkUtil *)a5;
    if (v21 != a5)
    {
      if (v22 < 0xE0)
      {
        a4 = (icu::ByteSinkUtil *)v21;
        if (v22 >= 0xC2)
        {
          unsigned int v26 = *v21 ^ 0x80;
          a4 = (icu::ByteSinkUtil *)v21;
          if (v26 <= 0x3F)
          {
            unsigned int v22 = *(unsigned __int16 *)(**((void **)this + 4) + 2LL * (v22 & 0x1F)) + v26;
            int v24 = v21;
            goto LABEL_22;
          }
        }

        goto LABEL_32;
      }

      if (v22 > 0xEF)
      {
        a4 = (icu::ByteSinkUtil *)v21;
        if (v22 > 0xF4) {
          goto LABEL_32;
        }
        unint64_t v27 = *v21;
        a4 = (icu::ByteSinkUtil *)v21;
        __int128 v28 = (char *)v20 + 2;
        a4 = (icu::ByteSinkUtil *)a5;
        a4 = (icu::ByteSinkUtil *)((char *)v20 + 2);
        if ((*v28 ^ 0x80u) > 0x3F) {
          goto LABEL_32;
        }
        int v24 = (const unsigned __int8 *)v20 + 3;
        a4 = (icu::ByteSinkUtil *)a5;
        if ((*v24 ^ 0x80u) <= 0x3F)
        {
          unsigned int v29 = v27 & 0x3F | ((v22 - 240) << 6);
          uint64_t v30 = *((void *)this + 4);
          if (v29 >= *(unsigned __int16 *)(v30 + 28))
          {
            unsigned int v22 = *(_DWORD *)(v30 + 20) - 2;
          }

          else
          {
            *(_DWORD *)__int128 v116 = a3;
            int v31 = a7;
            int v32 = v18;
            unsigned int v22 = ucptrie_internalSmallU8Index(v30, v29, *v28 ^ 0x80u, *v24 ^ 0x80u);
            uint64_t v18 = v32;
            a8 = v119;
            a6 = v120;
            __int128 v12 = 0uLL;
            a3 = *(_DWORD *)v116;
            uint64_t v11 = (icu::ByteSink *)v118;
            a7 = v31;
          }

          goto LABEL_22;
        }
      }

      else
      {
        a4 = (icu::ByteSinkUtil *)v21;
        int v24 = (const unsigned __int8 *)v20 + 2;
        a4 = (icu::ByteSinkUtil *)a5;
        unsigned int v25 = *v24 ^ 0x80;
        if (v25 <= 0x3F)
        {
          unsigned int v22 = *(unsigned __int16 *)(**((void **)this + 4) + 2LL
LABEL_22:
          a4 = (icu::ByteSinkUtil *)(v24 + 1);
          goto LABEL_33;
        }
      }

      a4 = (icu::ByteSinkUtil *)v24;
    }

LABEL_210:
          char v8 = 1;
          goto LABEL_206;
        }
      }

LABEL_211:
      char v8 = 0;
      goto LABEL_206;
    }

    if (v33 < 0xFE01) {
      goto LABEL_153;
    }
    unsigned int v45 = v33 >> 1;
    uint64_t p_dst = a3;
    if (a3)
    {
      UErrorCode v46 = a7;
      unsigned int PreviousTrailCC = icu::Normalizer2Impl::getPreviousTrailCC(this, (uint8_t *)v19, (uint8_t *)v20);
      uint64_t v18 = v115;
      a8 = v119;
      a6 = v120;
      __int128 v12 = 0uLL;
      uint64_t v11 = (icu::ByteSink *)v118;
      a7 = v46;
      if (PreviousTrailCC > v45)
      {
        if (v120) {
          goto LABEL_153;
        }
        goto LABEL_211;
      }
    }

    while (1)
    {
      if (a4 == (icu::ByteSinkUtil *)a5)
      {
        if (a6) {
          icu::ByteSinkUtil::appendUnchanged( v19,  a5,  (const unsigned __int8 *)a6,  v11,  a7,  (icu::Edits *)a8,  (UErrorCode *)a7);
        }
        goto LABEL_210;
      }

      UErrorCode v48 = (const unsigned __int8 *)a4;
      int v50 = *(char *)a4;
      a4 = (icu::ByteSinkUtil *)((char *)a4 + 1);
      char v49 = v50;
      unsigned int v51 = v50;
      if ((v50 & 0x80000000) == 0) {
        goto LABEL_87;
      }
      uint64_t v52 = (icu::ByteSinkUtil *)a5;
      if (a4 == (icu::ByteSinkUtil *)a5) {
        goto LABEL_86;
      }
      if (v51 < 0xE0)
      {
        if (v51 < 0xC2 || (unsigned int v56 = *(unsigned __int8 *)a4 ^ 0x80, v56 > 0x3F))
        {
LABEL_85:
          uint64_t v52 = a4;
LABEL_86:
          unsigned int v51 = *(_DWORD *)(*((void *)this + 4) + 20LL) - 1;
          a4 = v52;
          goto LABEL_87;
        }

        unsigned int v51 = *(unsigned __int16 *)(**((void **)this + 4) + 2LL * (v49 & 0x1F)) + v56;
      }

      else if (v51 > 0xEF)
      {
        if (v51 > 0xF4) {
          goto LABEL_85;
        }
        unint64_t v57 = *(unsigned __int8 *)a4;
        uint64_t v52 = a4;
        int v58 = v48 + 2;
        uint64_t v52 = (icu::ByteSinkUtil *)a5;
        if (v48 + 2 == a5) {
          goto LABEL_86;
        }
        uint64_t v52 = (icu::ByteSinkUtil *)(v48 + 2);
        if ((*v58 ^ 0x80u) > 0x3F) {
          goto LABEL_86;
        }
        a4 = (icu::ByteSinkUtil *)(v48 + 3);
        uint64_t v52 = (icu::ByteSinkUtil *)a5;
        if (v48 + 3 == a5) {
          goto LABEL_86;
        }
        if ((*(_BYTE *)a4 ^ 0x80u) > 0x3F) {
          goto LABEL_85;
        }
        unsigned int v59 = v57 & 0x3F | ((v51 - 240) << 6);
        uint64_t v60 = *((void *)this + 4);
        if (v59 >= *(unsigned __int16 *)(v60 + 28))
        {
          unsigned int v51 = *(_DWORD *)(v60 + 20) - 2;
        }

        else
        {
          signed int v112 = a7;
          unsigned int v51 = ucptrie_internalSmallU8Index(v60, v59, *v58 ^ 0x80u, *(_BYTE *)a4 ^ 0x80u);
          a7 = v112;
          uint64_t v18 = v115;
          a8 = v119;
          a6 = v120;
          __int128 v12 = 0uLL;
          uint64_t v11 = (icu::ByteSink *)v118;
        }
      }

      else
      {
        uint64_t v53 = v49 & 0xF;
        unsigned __int8 v54 = *(_BYTE *)a4;
        uint64_t v52 = a4;
        a4 = (icu::ByteSinkUtil *)(v48 + 2);
        uint64_t v52 = (icu::ByteSinkUtil *)a5;
        if (v48 + 2 == a5) {
          goto LABEL_86;
        }
        unsigned int v55 = *(unsigned __int8 *)a4 ^ 0x80;
        if (v55 > 0x3F) {
          goto LABEL_85;
        }
        unsigned int v51 = *(unsigned __int16 *)(**((void **)this + 4) + 2LL * (v54 & 0x3Fu | ((_DWORD)v53 << 6))) + v55;
      }

      a4 = (icu::ByteSinkUtil *)((char *)a4 + 1);
LABEL_87:
      uint64_t p_dst = *(unsigned __int16 *)(*(void *)(*((void *)this + 4) + 8LL) + 2LL * (int)v51);
      unsigned int v61 = v45;
      unsigned int v45 = p_dst >> 1;
      if (v61 > (p_dst >> 1))
      {
        if (!a6) {
          goto LABEL_211;
        }
LABEL_132:
        if (*((unsigned __int16 *)this + 11) <= p_dst
          && (*((unsigned __int16 *)this + 13) > p_dst
           || *((unsigned __int16 *)this + 15) <= p_dst))
        {
          a4 = (icu::ByteSinkUtil *)v48;
          goto LABEL_153;
        }

LABEL_199:
        a3 = v117;
        __int128 v12 = 0uLL;
        uint64_t v18 = v115;
        if (a4 == (icu::ByteSinkUtil *)a5)
        {
LABEL_203:
          char v8 = 1;
          if (a6 && v19 != (icu::ByteSinkUtil *)a5) {
            icu::ByteSinkUtil::appendUnchanged( v19,  a5,  (const unsigned __int8 *)a6,  v11,  a7,  (icu::Edits *)a8,  (UErrorCode *)a7);
          }
          goto LABEL_206;
        }

        goto LABEL_9;
      }
    }
  }

  if (!a6) {
    goto LABEL_211;
  }
  if (*((unsigned __int16 *)this + 13) <= v33)
  {
    if ((v33 & 1) == 0 || (v33 != 1 ? (BOOL v62 = (v33 & 6) >= 3) : (BOOL v62 = 0), v62 ? (v63 = a3 == 0) : (v63 = 1), !v63))
    {
      unsigned int v64 = a7;
      BOOL hasCompBoundaryBefore = icu::Normalizer2Impl::hasCompBoundaryBefore(this, (const unsigned __int8 *)a4, a5);
      a8 = v119;
      a6 = v120;
      a7 = v64;
      if (!hasCompBoundaryBefore) {
        goto LABEL_152;
      }
    }

    if (v19 != v20)
    {
      uint64_t v66 = a7;
      int v67 = icu::ByteSinkUtil::appendUnchanged( v19,  (const unsigned __int8 *)v20,  (const unsigned __int8 *)a6,  (icu::ByteSink *)v118,  a7,  (icu::Edits *)a8,  (UErrorCode *)a7);
      a6 = v120;
      a7 = v66;
      if (!v67) {
        goto LABEL_210;
      }
    }

    int v68 = (v33 >> 3) - *((unsigned __int16 *)this + 14);
    LODWORD(__dst) = 0;
    if ((_DWORD)a4 - (_DWORD)v20 == 1)
    {
      LOBYTE(__dst) = *(_BYTE *)v20 + v68;
      uint64_t v69 = 1LL;
    }

    else
    {
      __int128 v114 = a7;
      int v84 = v68 + *((unsigned __int8 *)a4 - 1);
      if ((v84 & 0xFFFFFFC0) == 0x80)
      {
        else {
          uint64_t v85 = (char *)a4 - 1;
        }
        memcpy(&__dst, v20, v85 - (char *)v20);
        uint64_t v69 = ((_DWORD)v85 + ~(_DWORD)v20 + 2);
        *((_BYTE *)&__dst + ((_DWORD)v85 - (_DWORD)v20)) = v84;
      }

      else
      {
        unsigned int v86 = sub_1807EBFB4((unint64_t)v20, (uint64_t)a4) + v68;
        if (v86 > 0x7F)
        {
          if (v86 > 0x7FF)
          {
            if (HIWORD(v86))
            {
              unsigned int v93 = (v86 >> 18) | 0xFFFFFFF0;
              BYTE1(__dst) = (v86 >> 12) & 0x3F | 0x80;
              unsigned int v94 = 2;
            }

            else
            {
              unsigned int v93 = (v86 >> 12) | 0xFFFFFFE0;
              unsigned int v94 = 1;
            }

            a7 = v114;
            a6 = v120;
            LOBYTE(__dst) = v93;
            unsigned int v92 = v94 + 1;
            *(_BYTE *)((unint64_t)&__dst | v94) = (v86 >> 6) & 0x3F | 0x80;
          }

          else
          {
            LOBYTE(__dst) = (v86 >> 6) | 0xC0;
            unsigned int v92 = 1;
            a7 = v114;
            a6 = v120;
          }

          uint64_t v69 = v92 + 1;
          *((_BYTE *)&__dst + v92) = v86 & 0x3F | 0x80;
          goto LABEL_196;
        }

        LOBYTE(__dst) = v86;
        uint64_t v69 = 1LL;
      }

      a7 = v114;
      a6 = v120;
    }

LABEL_196:
    __int128 v110 = a7;
    if (a7)
    {
      icu::Edits::addReplace(a7, (_DWORD)a4 - (_DWORD)v20, v69);
      a6 = v120;
    }

    (*(void (**)(icu::ByteSink *, icu::Normalizer2Impl **, uint64_t))(*(void *)a6 + 16LL))(a6, &__dst, v69);
    a8 = v119;
    a6 = v120;
    uint64_t v19 = a4;
    a7 = v110;
    uint64_t v11 = (icu::ByteSink *)v118;
    goto LABEL_199;
  }

  if (v33 >= *((unsigned __int16 *)this + 10))
  {
    uint64_t v82 = a7;
    if (!icu::Normalizer2Impl::hasCompBoundaryBefore(this, (const unsigned __int8 *)a4, a5)
      && !icu::Normalizer2Impl::hasCompBoundaryAfter( this,  (const unsigned __int8 *)v19,  (const unsigned __int8 *)v20,  v117))
    {
      a7 = v82;
      goto LABEL_152;
    }

    a8 = v119;
    a6 = v120;
    a7 = v82;
    uint64_t v11 = (icu::ByteSink *)v118;
    if (v19 == v20
      || (v83 = icu::ByteSinkUtil::appendUnchanged( v19,  (const unsigned __int8 *)v20,  (const unsigned __int8 *)v120,  (icu::ByteSink *)v118,  v82,  (icu::Edits *)v119,  (UErrorCode *)v82),  a8 = v119,  a6 = v120,  uint64_t v11 = (icu::ByteSink *)v118,  a7 = v82,  v83))
    {
      if (!a7)
      {
LABEL_144:
        uint64_t v19 = a4;
        goto LABEL_199;
      }

      icu::Edits::addReplace(a7, (_DWORD)a4 - (_DWORD)v20, 0);
      a6 = v120;
      uint64_t v11 = (icu::ByteSink *)v118;
      a7 = v82;
LABEL_143:
      a8 = v119;
      goto LABEL_144;
    }

    goto LABEL_210;
  }

  if ((v33 & 1) != 0
    && (!a3 || v33 == 1 || *(unsigned __int16 *)(*((void *)this + 6) + ((unsigned __int16)v33 & 0xFFFE)) < 0x200u)
    || (unsigned __int8 v34 = a7,
        BOOL v35 = icu::Normalizer2Impl::hasCompBoundaryBefore(this, (const unsigned __int8 *)a4, a5),
        a8 = v119,
        a6 = v120,
        a7 = v34,
        v35))
  {
    if (v19 == v20
      || (unint64_t v36 = a7,
          int v37 = icu::ByteSinkUtil::appendUnchanged( v19,  (const unsigned __int8 *)v20,  (const unsigned __int8 *)a6,  (icu::ByteSink *)v118,  a7,  (icu::Edits *)a8,  (UErrorCode *)a7),  a8 = v119,  a6 = v120,  a7 = v36,  v37))
    {
      uint64_t v38 = (_WORD *)(*((void *)this + 6) + ((unsigned __int16)v33 & 0xFFFE));
      signed int v39 = a7;
      int v40 = icu::ByteSinkUtil::appendChange( (uint64_t)v20,  (uint64_t)a4,  (uint64_t)(v38 + 1),  *v38 & 0x1F,  (uint64_t)a6,  a7,  (int *)a8);
      a8 = v119;
      a6 = v120;
      uint64_t v11 = (icu::ByteSink *)v118;
      a7 = v39;
      uint64_t v19 = a4;
      if (v40) {
        goto LABEL_199;
      }
    }

    goto LABEL_210;
  }

LABEL_152:
  __int128 v12 = 0uLL;
  uint64_t v18 = v115;
LABEL_153:
  __int128 v95 = a7;
  __int128 v96 = v19;
  if (v19 != v20)
  {
    if (*((unsigned __int16 *)this + 11) > v33
      || *((unsigned __int16 *)this + 13) <= v33 && *((unsigned __int16 *)this + 15) > v33)
    {
      goto LABEL_166;
    }

    __int128 v96 = (icu::ByteSinkUtil *)((char *)v20 - 1);
    UChar32 v97 = *((unsigned __int8 *)v20 - 1);
    uint64_t v98 = *((void *)this + 4);
    if (*((char *)v20 - 1) < 0)
    {
      unsigned int v99 = v18;
      int Index = ucptrie_internalU8PrevIndex(v98, v97, (const uint8_t *)v19, (uint64_t)v20 - 1);
      uint64_t v18 = v99;
      __int128 v12 = 0uLL;
      __int128 v96 = (icu::ByteSinkUtil *)((char *)v96 - (Index & 7));
      UChar32 v97 = Index >> 3;
      uint64_t v98 = *((void *)this + 4);
    }

    unsigned __int16 v101 = *(_WORD *)(*(void *)(v98 + 8) + 2LL * v97);
    if ((v101 & 1) != 0)
    {
      if (v117 && *(_WORD *)(*(void *)(v98 + 8) + 2LL * v97) != 1)
      {
        if (*((unsigned __int16 *)this + 13) <= v101)
        {
          if ((v101 & 6u) >= 3) {
            goto LABEL_167;
          }
        }

        else if (*(unsigned __int16 *)(*((void *)this + 6) + (v101 & 0xFFFE)) > 0x1FFu)
        {
          goto LABEL_167;
        }
      }

    for (unint64_t i = 0LL; i != 2176; i += 4LL)
      *(_DWORD *)(v6 + i) = *(_DWORD *)(v6 + 4LL * (*(int *)(v6 + i) >> 6) + 144176);
    *(_DWORD *)(v6 + 144160) = *(_DWORD *)(v6 + 4LL * (*(int *)(v6 + 144160) >> 6) + 144176);
    if ((v84 & 3) != 0)
    {
      memset_pattern16((void *)(v6 + 4LL * v84 + 2176), &unk_180A2CC10, (~(4 * v84) & 0xCu) + 4);
      int v84 = (v84 | 3) + 1;
    }

    *(_DWORD *)(v6 + 144144) = v84;
    unint64_t v36 = *(_DWORD *)(v6 + 144152);
  }

  UErrorCode v107 = *v7;
  *(_DWORD *)(v6 + 144152) = v36 + 1;
  v107[v36] = v14;
  while (1)
  {
    int v108 = *(_DWORD *)(v6 + 144152);
    if ((v108 & 3) == 0) {
      break;
    }
    int v109 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(v6 + 144152) = v108 + 1;
    v107[v108] = v109;
  }

  *(_BYTE *)(v6 + 144172) = 1;
  if (*a3 <= 0) {
    goto LABEL_6;
  }
}

LABEL_166:
      __int128 v96 = v20;
    }
  }

  if (pNumSubstitutions) {
    *pNumSubstitutions = v23;
  }
  UErrorCode v48 = v29 + (_DWORD)v24 - (_DWORD)dest;
  if (pDestLength) {
    *pDestint Length = v48;
  }
  u_terminateChars((uint64_t)dest, destCapacity, v48, (int *)pErrorCode);
  return dest;
}

                  char v8 = 0LL;
LABEL_170:
                  icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)&v153);
                  return v8;
                }

  icu::UnicodeString::~UnicodeString((void *)v41, (icu::UnicodeString *)&v100);
  icu::UnicodeString::~UnicodeString(v91, (icu::UnicodeString *)&v105);
}

LABEL_167:
  *((_OWORD *)v18 + 1) = v12;
  *((_OWORD *)v18 + 2) = v12;
  *(_OWORD *)uint64_t v18 = v12;
  __dst = this;
  uint64_t v122 = (icu::UnicodeString *)&v127;
  uint64_t Buffer = icu::UnicodeString::getBuffer((icu::UnicodeString *)&v127, 8);
  v123[0] = Buffer;
  v123[1] = Buffer;
  uint64_t v124 = Buffer;
  if ((*((_BYTE *)v122 + 8) & 2) != 0) {
    int v103 = 27;
  }
  else {
    int v103 = *((_DWORD *)v122 + 4);
  }
  a8 = v119;
  a6 = v120;
  a7 = v95;
  int v125 = v103;
  char v126 = 0;
  UErrorCode v104 = *v119;
  uint64_t v11 = (icu::ByteSink *)v118;
  if (!Buffer && v104 <= U_ZERO_ERROR)
  {
    *int v119 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_174;
  }

  if (v104 > U_ZERO_ERROR)
  {
LABEL_174:
    int v105 = 2;
    goto LABEL_175;
  }

  icu::Normalizer2Impl::decomposeShort((uint64_t)this, v96, a4, 0, v117, (icu::ReorderingBuffer *)&__dst, v119);
  int v105 = 2;
  int v106 = (icu::ByteSinkUtil *)icu::Normalizer2Impl::decomposeShort( (uint64_t)this,  a4,  a5,  2,  v117,  (icu::ReorderingBuffer *)&__dst,  v119);
  a8 = v119;
  a4 = v106;
  if (*(int *)v119 > 0)
  {
LABEL_182:
    a7 = v95;
    uint64_t v11 = (icu::ByteSink *)v118;
    goto LABEL_183;
  }

  if (v106 - v96 >= 0x80000000LL)
  {
    *int v119 = U_INDEX_OUTOFBOUNDS_ERROR;
    int v105 = 1;
    char v8 = 1;
    goto LABEL_182;
  }

  icu::Normalizer2Impl::recompose((uint64_t)this, (icu::ReorderingBuffer *)&__dst, 0, v117);
  if (icu::ReorderingBuffer::equals( (icu::ReorderingBuffer *)&__dst,  (const unsigned __int8 *)v96,  (const unsigned __int8 *)a4))
  {
    UErrorCode v107 = v19;
    a7 = v95;
    uint64_t v11 = (icu::ByteSink *)v118;
    goto LABEL_186;
  }

  a7 = v95;
  uint64_t v11 = (icu::ByteSink *)v118;
  a6 = v120;
  if (v120)
  {
    a8 = v119;
    if (v19 == v96
      || (v108 = icu::ByteSinkUtil::appendUnchanged( v19,  (const unsigned __int8 *)v96,  (const unsigned __int8 *)v120,  (icu::ByteSink *)v118,  v95,  (icu::Edits *)v119,  (UErrorCode *)v95),  a8 = v119,  a6 = v120,  uint64_t v11 = (icu::ByteSink *)v118,  a7 = v95,  v108))
    {
      int v109 = icu::ByteSinkUtil::appendChange( (uint64_t)v96,  (uint64_t)a4,  v123[0],  (unint64_t)(v124 - v123[0]) >> 1,  (uint64_t)a6,  a7,  (int *)a8);
      uint64_t v11 = (icu::ByteSink *)v118;
      a7 = v95;
      UErrorCode v107 = a4;
      if (v109)
      {
LABEL_186:
        int v105 = 0;
        uint64_t v19 = v107;
      }

      a8 = v119;
LABEL_183:
      a6 = v120;
    }
  }

  else
  {
    char v8 = 0;
    int v105 = 1;
    a8 = v119;
  }

                char v8 = 0LL;
                goto LABEL_168;
              }

              icu::number::Precision::maxFraction(6LL, (uint64_t)v155);
            }

            else
            {
              icu::number::Precision::currency(0LL, (uint64_t)v155);
            }

            v149[0] = *(_OWORD *)v155;
            unsigned int v64 = *(_OWORD *)&v155[12];
          }

          *(_OWORD *)((char *)v149 + 12) = v64;
          goto LABEL_96;
        }

        unsigned int v61 = icu::UMemory::operator new((uint64_t *)v137, (icu::UMemory *)0x30, v56);
        BOOL v62 = (uint64_t)v61;
        if (v61) {
          icu::number::impl::UnitConversionHandler::UnitConversionHandler(v61, v10, a1 + 8, a4);
        }
        unsigned int v59 = (uint64_t *)(a1 + 512);
        sub_1807C9194(a1 + 512, v62, (int *)a4);
      }

      else
      {
        if ((v140 & 1) == 0)
        {
          char v8 = 0LL;
          BOOL v65 = 1;
LABEL_169:
          *a4 = v65;
          goto LABEL_170;
        }

        int v58 = icu::UMemory::operator new((uint64_t *)v140, (icu::UMemory *)0xC0, v56);
        if (v58)
        {
          icu::StringPiece::StringPiece((icu::StringPiece *)v150, *(const char **)(a2 + 192));
          icu::number::impl::UsagePrefsHandler::UsagePrefsHandler( v58,  a2 + 248,  (icu::MeasureUnitImpl **)v10,  v150[0],  (uint64_t)v150[1],  a1 + 8,  (int *)a4);
        }

        uint64_t v133 = v36;
        unsigned int v59 = (uint64_t *)(a1 + 504);
        sub_1807C9194(a1 + 504, (uint64_t)v58, (int *)a4);
      }

      unint64_t v57 = *v59;
      uint64_t v60 = v138;
      goto LABEL_81;
    }

LABEL_175:
  uint64_t p_dst = v123[0];
  if (v123[0])
  {
    icu::UnicodeString::releaseBuffer((uint64_t)v122, (unint64_t)(v124 - v123[0]) >> 1);
    a8 = v119;
    a6 = v120;
    uint64_t v11 = (icu::ByteSink *)v118;
    a7 = v95;
  }

  if (!v105) {
    goto LABEL_199;
  }
  if (v105 == 2) {
    goto LABEL_210;
  }
LABEL_206:
  icu::UnicodeString::~UnicodeString((void *)p_dst, (icu::UnicodeString *)&v127);
  return v8;
}

        int v83 = ((unint64_t)v5 - *(void *)(v98 + 16)) >> 1;
        else {
          int v84 = -1;
        }
        __int128 v116 = v104;
        uint64_t v85 = v3;
        uint64_t result = sub_180829514(v4, (char *)v119, v81, &v116, v101, &v115, (int)v83 + v84, a2);
        unsigned int v3 = v85;
        unsigned int v7 = v116;
        if (*a2 < 1) {
          goto LABEL_6;
        }
LABEL_187:
        *(void *)(v98 + 16) = v5;
        *(void *)(v98 + 32) = v7;
        return result;
      default:
        unsigned int v43 = *(void *)(v114 + 8 * v36);
        int v44 = *(unsigned __int16 *)(*(void *)(v43 + 232)
                                  + 2
                                  * (v30 & 0xFFF0000F | (16
                                                       * (unsigned __int16)*(_DWORD *)(*(void *)(v43 + 88) + 4LL * (v29 + *(unsigned __int16 *)(*(void *)(v43 + 88) + 2 * v28))))));
        if (v44 >= 0x100) {
          uint64_t result = 4294967294LL;
        }
        else {
          uint64_t result = 0xFFFFFFFFLL;
        }
        if ((*(_DWORD *)(*(void *)(v43 + 88) + 4LL * (v29 + *(unsigned __int16 *)(*(void *)(v43 + 88) + 2 * v28))) & v31) != 0)
        {
          LODWORD(v116) = *(unsigned __int16 *)(*(void *)(v43 + 232)
                                              + 2
                                              * (v30 & 0xFFF0000F | (16
                                                                   * (unsigned __int16)*(_DWORD *)(*(void *)(v43 + 88) + 4LL * (v29 + *(unsigned __int16 *)(*(void *)(v43 + 88) + 2 * v28))))));
          if (v44 < 0x100) {
            goto LABEL_128;
          }
LABEL_84:
          uint64_t v60 = 2;
          goto LABEL_99;
        }

        if (((_BYTE)v27 || v105 >> 8 < 0x19 || !(v102 >> 17))
          && *(_WORD *)(*(void *)(v43 + 232)
                      + 2
                      * (v30 & 0xFFF0000F | (16
                                           * (unsigned __int16)*(_DWORD *)(*(void *)(v43 + 88)
                                                                                       + 4LL
                                                                                       * (v29
                                                                                        + *(unsigned __int16 *)(*(void *)(v43 + 88) + 2 * v28)))))))
        {
          LODWORD(v116) = *(unsigned __int16 *)(*(void *)(v43 + 232)
                                              + 2
                                              * (v30 & 0xFFF0000F | (16
                                                                   * (unsigned __int16)*(_DWORD *)(*(void *)(v43 + 88) + 4LL * (v29 + *(unsigned __int16 *)(*(void *)(v43 + 88) + 2 * v28))))));
        }

        else
        {
LABEL_82:
          uint64_t result = *(void *)(v43 + 288);
          if (!result) {
            goto LABEL_128;
          }
          uint64_t v111 = *((unsigned __int8 *)&v117 + v23);
          __int16 v113 = v27;
          uint64_t v53 = v10;
          unsigned __int8 v54 = v3;
          unsigned int v55 = v24;
          unsigned int v56 = v25;
          unint64_t v57 = v30;
          int v58 = v33;
          unsigned int v59 = v34;
          uint64_t result = sub_18082BD0C(result, v53, (int *)&v116, (char)v27);
          unsigned __int8 v34 = v59;
          BOOL v35 = v111;
          unint64_t v27 = v113;
          unsigned int v33 = v58;
          int v31 = v108;
          uint64_t v30 = v57;
          int v10 = v106;
          int v32 = v107;
          unsigned int v25 = v56;
          int v24 = v55;
          unsigned int v2 = v109;
          unsigned int v3 = v54;
          if ((_DWORD)result == 2) {
            goto LABEL_84;
          }
        }

        if ((_DWORD)result != -2 || v26 != 0) {
          goto LABEL_128;
        }
        uint64_t v60 = -2;
LABEL_99:
        BOOL v63 = v116;
        if ((_DWORD)v35 != 7
          || (((_WORD)v116 + 24159) & 0xFFFEu) <= 0x5D5D
          && (((_BYTE)v116 + 95) & 0xFEu) <= 0x5D
          && (BOOL v63 = ((_DWORD)v116 - 32896), (_DWORD)v116 != 32896))
        {
          unint64_t v27 = 0;
          int v24 = 0LL;
          unsigned int v26 = v60;
          unsigned int v3 = v63;
          goto LABEL_127;
        }

        goto LABEL_128;
    }
  }

          if (v152 && *(int *)a4 >= 1)
          {
            *a4 = U_USING_FALLBACK_WARNING;
            sub_1808DF9B8((icu::UnicodeString *)v179, v197, (const UChar *)L"BC", 2u, 3, (int *)a4);
            sub_1808DF9B8((icu::UnicodeString *)v186, (unsigned int *)v185, (const UChar *)L"BC", 2u, 3, (int *)a4);
            sub_1808DF9B8((icu::UnicodeString *)v188, (unsigned int *)v187, (const UChar *)L"BC", 2u, 3, (int *)a4);
            sub_1808DF9B8((icu::UnicodeString *)v199, v198, (const UChar *)L"01", 0xDu, 3, (int *)a4);
            sub_1808DF9B8((icu::UnicodeString *)v204, v205, (const UChar *)L"01", 0xDu, 3, (int *)a4);
            sub_1808DF9B8((icu::UnicodeString *)v189, (unsigned int *)v206, (const UChar *)L"01", 0xDu, 3, (int *)a4);
            sub_1808DF9B8((icu::UnicodeString *)v191, (unsigned int *)v190, (const UChar *)L"01", 0xDu, 3, (int *)a4);
            sub_1808DF9B8((icu::UnicodeString *)v193, (unsigned int *)v192, (const UChar *)L"01", 0xDu, 3, (int *)a4);
            sub_1808DF9B8((icu::UnicodeString *)v195, v194, (const UChar *)L"01", 0xDu, 3, (int *)a4);
            sub_1808DF9B8((icu::UnicodeString *)v201, v200, (const UChar *)"0", 8u, 2, (int *)a4);
            sub_1808DF9B8((icu::UnicodeString *)v207, v151, (const UChar *)"0", 8u, 2, (int *)a4);
            sub_1808DF9B8((icu::UnicodeString *)v196, (unsigned int *)v203, (const UChar *)"0", 8u, 2, (int *)a4);
            sub_1808DF9B8(v150, (unsigned int *)v169, (const UChar *)"0", 8u, 2, (int *)a4);
            sub_1808DF9B8((icu::UnicodeString *)v173, (unsigned int *)v170, (const UChar *)"0", 8u, 2, (int *)a4);
            sub_1808DF9B8((icu::UnicodeString *)v171, (unsigned int *)v174, (const UChar *)"0", 8u, 2, (int *)a4);
            sub_1808DF9B8((icu::UnicodeString *)v176, (unsigned int *)v175, (const UChar *)"0", 8u, 2, (int *)a4);
            sub_1808DF9B8(v144, (unsigned int *)v145, (const UChar *)"0", 8u, 2, (int *)a4);
            sub_1808DF9B8(v129, v157, word_180A37C5A, 2u, 3, (int *)a4);
            sub_1808DF9B8((icu::UnicodeString *)v119, (unsigned int *)v120, word_180A37C5A, 2u, 3, (int *)a4);
            sub_1808DF9B8((icu::UnicodeString *)v168, v167, word_180A37C66, 4u, 2, (int *)a4);
            sub_1808DF9B8((icu::UnicodeString *)v182, (unsigned int *)v178, word_180A37C66, 4u, 2, (int *)a4);
            sub_1808DF9B8((icu::UnicodeString *)v161, (unsigned int *)v160, word_180A37C66, 4u, 2, (int *)a4);
            sub_1808DF9B8((icu::UnicodeString *)v165, (unsigned int *)v164, word_180A37C66, 4u, 2, (int *)a4);
            sub_1808DF9B8((icu::UnicodeString *)v163, (unsigned int *)v162, word_180A37C66, 4u, 2, (int *)a4);
            sub_1808DF9B8((icu::UnicodeString *)v159, v158, word_180A37C66, 4u, 2, (int *)a4);
            v211 = (const UChar *)L"GyMdkHmsSEDFwWahKzYeugAZvcLQqVUOXxrbB";
            icu::UnicodeString::setTo(v209, 1, &v211, 37);
          }

          ures_close(v21);
          ures_close(v156);
          unsigned int v26 = (void *)BYTE4(v228);
          if (BYTE4(v228)) {
            uprv_free(v227);
          }
          goto LABEL_180;
        }

        icu::DateFormatSymbols::assignArray( (icu::UnicodeString *)v189,  v206,  (int *)*v204,  (const icu::UnicodeString *)*v205);
        uint64_t v123 = (int *)*v204;
        unsigned int v118 = v179;
        uint64_t v127 = (icu::UnicodeString **)v205;
      }

      else
      {
        uint64_t v123 = (int *)*v189;
        uint64_t v127 = v206;
      }

      uint64_t v124 = *(unsigned int *)v127;
      int v125 = (icu::UnicodeString *)v195;
      char v126 = (icu::UnicodeString **)v194;
    }

    else
    {
      uint64_t v123 = (int *)*v195;
      uint64_t v124 = *v194;
      int v125 = (icu::UnicodeString *)v189;
      char v126 = v206;
    }

    icu::DateFormatSymbols::assignArray(v125, v126, v123, (const icu::UnicodeString *)v124);
    goto LABEL_143;
  }

  if (*a5 < 1)
  {
    unsigned int v41 = 0;
    unsigned int v42 = *(_BYTE *)(a1 + 20);
    switch(a3)
    {
      case 0u:
        unsigned int v41 = v42 & 1;
        goto LABEL_201;
      case 1u:
        goto LABEL_194;
      case 2u:
        goto LABEL_199;
      case 3u:
        goto LABEL_201;
      case 4u:
        if (v29 == 3) {
          goto LABEL_200;
        }
        unsigned int v41 = v39;
        goto LABEL_190;
      case 5u:
        unsigned int v43 = v29 - 1;
        if (v43 >= 3) {
          goto LABEL_198;
        }
        unsigned int v41 = (3u >> (v43 & 7)) & 1;
        goto LABEL_201;
      case 6u:
        int v44 = v29 - 1;
        if (v44 >= 3) {
          goto LABEL_198;
        }
        unsigned int v45 = (v44 & 7) == 0;
        goto LABEL_195;
      case 8u:
        if (v29 == 1) {
          goto LABEL_199;
        }
        if (v29 == 3) {
          goto LABEL_200;
        }
        unsigned int v41 = v39 ^ 1;
        goto LABEL_201;
      case 9u:
        if (v29 == 3) {
          goto LABEL_200;
        }
        unsigned int v41 = v42 & 1;
LABEL_190:
        if (v29 != 2) {
LABEL_199:
        }
          unsigned int v41 = 1;
        goto LABEL_201;
      case 0xAu:
        if (v29 == 1) {
          goto LABEL_199;
        }
        if (v29 == 3)
        {
LABEL_200:
          unsigned int v41 = 0;
        }

        else
        {
LABEL_194:
          unsigned int v45 = (v42 & 1) == 0;
LABEL_195:
          unsigned int v41 = v45;
        }

BOOL icu::Normalizer2Impl::hasCompBoundaryBefore( icu::Normalizer2Impl *this, const unsigned __int8 *a2, const unsigned __int8 *a3)
{
  if (a2 == a3) {
    return 1LL;
  }
  uint64_t v4 = a2 + 1;
  unsigned int v5 = *a2;
  if (*(char *)a2 < 0)
  {
    if (v4 != a3)
    {
      if (v5 < 0xE0)
      {
        if (v5 >= 0xC2)
        {
          unsigned int v10 = *v4 ^ 0x80;
          if (v10 <= 0x3F)
          {
            unsigned int v5 = *(unsigned __int16 *)(**((void **)this + 4) + 2LL * (*a2 & 0x1F)) + v10;
            goto LABEL_23;
          }
        }
      }

      else if (v5 > 0xEF)
      {
        if (v5 <= 0xF4)
        {
          unint64_t v11 = *v4;
          if (((byte_1809E7084[v11 >> 4] >> (v5 + 16)) & 1) != 0
            && a2 + 2 != a3
            && (a2[2] ^ 0x80u) <= 0x3F
            && a2 + 3 != a3
            && (a2[3] ^ 0x80u) <= 0x3F)
          {
            unsigned int v12 = v11 & 0x3F | ((v5 - 240) << 6);
            uint64_t v13 = *((void *)this + 4);
            else {
              unsigned int v5 = ucptrie_internalSmallU8Index(v13, v12, a2[2] ^ 0x80u, a2[3] ^ 0x80u);
            }
            goto LABEL_23;
          }
        }
      }

      else
      {
        uint64_t v6 = *a2 & 0xF;
        unsigned int v7 = *v4;
        if (((a00000000000000[v6] >> (v7 >> 5)) & 1) != 0 && a2 + 2 != a3)
        {
          unsigned int v8 = a2[2] ^ 0x80;
          if (v8 <= 0x3F)
          {
            unsigned int v5 = *(unsigned __int16 *)(**((void **)this + 4) + 2LL * (v7 & 0x3F | ((_DWORD)v6 << 6))) + v8;
            goto LABEL_23;
          }
        }
      }
    }

    unsigned int v5 = *(_DWORD *)(*((void *)this + 4) + 20LL) - 1;
  }

BOOL icu::Normalizer2Impl::hasCompBoundaryAfter( icu::Normalizer2Impl *this, const unsigned __int8 *a2, const unsigned __int8 *a3, int a4)
{
  if (a2 == a3) {
    return 1LL;
  }
  int v9 = *((char *)a3 - 1);
  unsigned int v8 = a3 - 1;
  UChar32 v10 = v9;
  if (v9 < 0) {
    UChar32 v10 = (int)ucptrie_internalU8PrevIndex(*((void *)this + 4), v10, a2, (uint64_t)v8) >> 3;
  }
  unsigned int v11 = *(unsigned __int16 *)(*(void *)(*((void *)this + 4) + 8LL) + 2LL * v10);
  if ((v11 & 1) == 0) {
    return 0LL;
  }
  BOOL result = 1LL;
  if (a4 && v11 != 1)
  {
    else {
      BOOL v13 = *(unsigned __int16 *)(*((void *)this + 6) + ((unsigned __int16)v11 & 0xFFFE)) >= 0x200u;
    }
    return !v13;
  }

  return result;
}

uint64_t sub_1807EF5D8(unsigned __int8 *a1, uint64_t a2)
{
  int v2 = a1[1];
  if (v2 != 135)
  {
    if (v2 == 134)
    {
      int v3 = a1[2];
    }

    return 0xFFFFFFFFLL;
  }

  return a1[2] - 103;
}

uint64_t icu::Normalizer2Impl::getPreviousTrailCC(icu::Normalizer2Impl *this, uint8_t *s, uint8_t *a3)
{
  if (s == a3)
  {
    LOBYTE(result) = 0;
  }

  else
  {
    uint64_t v9 = v3;
    uint64_t v10 = v4;
    punint64_t i = (_DWORD)a3 - (_DWORD)s - 1;
    UChar32 v6 = s[(int)a3 - (int)s - 1];
    if ((v6 & 0x80) != 0) {
      UChar32 v6 = utf8_prevCharSafeBody(s, 0, &pi, v6, -1);
    }
    LOBYTE(result) = sub_1807E8B6C((uint64_t)this, v6);
  }

  return result;
}

uint64_t icu::Normalizer2Impl::getFCD16FromNormData(icu::Normalizer2Impl *this, unsigned int a2)
{
  unsigned int v4 = sub_1807E9A8C((uint64_t)this, a2);
  if (v4 >= *((unsigned __int16 *)this + 13))
  {
    if (v4 >> 10 >= 0x3F) {
      return (unsigned __int16)((v4 >> 1) | (v4 >> 1 << 8));
    }
    if (v4 >= *((unsigned __int16 *)this + 15))
    {
LABEL_11:
      LOWORD(v7) = 0;
      return (unsigned __int16)v7;
    }

    if ((v4 & 6) < 3) {
      return (v4 & 6) >> 1;
    }
    unsigned int v4 = sub_1807EA4C4((uint64_t)this, a2 + (v4 >> 3) - *((unsigned __int16 *)this + 14));
  }

  unsigned int v5 = (unsigned __int16 *)(*((void *)this + 6) + ((unsigned __int16)v4 & 0xFFFE));
  unsigned int v6 = *v5;
  unsigned int v7 = v6 >> 8;
  if ((v6 & 0x80) != 0) {
    LOWORD(v7) = v7 | (*((unsigned __int8 *)v5 - 1) << 8);
  }
  return (unsigned __int16)v7;
}

unsigned __int16 *icu::Normalizer2Impl::makeFCD( icu::Normalizer2Impl *this, UChar *src, UChar *a3, UChar **a4, UErrorCode *a5)
{
  unsigned int v7 = src;
  if (a3)
  {
    uint64_t v9 = a3;
    unsigned int v10 = 0;
    NextFCDBoundary = src;
  }

  else
  {
    uint64_t v29 = 0LL;
    do
    {
      unsigned int v30 = src[v29++];
      if (v30) {
        BOOL v31 = v30 >= *((unsigned __int16 *)this + 6);
      }
      else {
        BOOL v31 = 1;
      }
    }

    while (!v31);
    NextFCDBoundary = &src[v29 - 1];
    if (a4 && v29 != 1) {
      icu::ReorderingBuffer::appendZeroCC(a4, src, &src[v29 - 1], a5);
    }
    if (NextFCDBoundary <= v7)
    {
      unsigned int v10 = 0;
    }

    else
    {
      unsigned int v33 = &v7[v29];
      signed int v35 = *(v33 - 2);
      unsigned __int8 v34 = v33 - 2;
      unsigned int v10 = sub_1807E8B6C((uint64_t)this, v35);
      if (v10 <= 1) {
        unsigned int v7 = NextFCDBoundary;
      }
      else {
        unsigned int v7 = v34;
      }
    }

    uint64_t v9 = u_strchr(NextFCDBoundary, 0);
  }

  BOOL v12 = NextFCDBoundary == v9;
  if (NextFCDBoundary == v9) {
    return v9;
  }
  unint64_t v36 = a5;
  int v37 = (icu::ReorderingBuffer *)a4;
  while (2)
  {
    unsigned int v13 = v10;
    unsigned int v14 = NextFCDBoundary;
    while (1)
    {
      unint64_t v15 = *v14;
      unsigned int v13 = ~(_DWORD)v15;
LABEL_14:
      uint64_t v17 = 1LL;
LABEL_27:
      v14 += v17;
      if (v14 == v9)
      {
        if (v37 != 0LL && !v12) {
          icu::ReorderingBuffer::appendZeroCC((UChar **)v37, NextFCDBoundary, v9, v36);
        }
        return v9;
      }
    }

    if (*(_BYTE *)(*((void *)this + 7) + (v15 >> 8))) {
      BOOL v16 = ((1 << (v15 >> 5)) & *(unsigned __int8 *)(*((void *)this + 7) + (v15 >> 8))) == 0;
    }
    else {
      BOOL v16 = 1;
    }
    if (v16)
    {
      unsigned int v13 = 0;
      goto LABEL_14;
    }

    uint64_t v18 = v14 + 1;
    if ((v15 & 0xFC00) == 0xD800 && v18 != v9)
    {
      int v20 = *v18;
      BOOL v16 = (v20 & 0xFC00) == 56320;
      int v21 = ((_DWORD)v15 << 10) - 56613888 + v20;
      if (v16) {
        LODWORD(v15) = v21;
      }
    }

    unsigned int FCD16FromNormData = icu::Normalizer2Impl::getFCD16FromNormData(this, v15);
    unsigned int v10 = FCD16FromNormData;
    if (FCD16FromNormData <= 0xFF)
    {
      else {
        uint64_t v17 = 2LL;
      }
      unsigned int v13 = FCD16FromNormData;
      goto LABEL_27;
    }

    if (v14 == NextFCDBoundary)
    {
      unsigned int v14 = NextFCDBoundary;
    }

    else
    {
      if ((v13 & 0x80000000) != 0)
      {
        if (~v13 >= *((unsigned __int16 *)this + 4))
        {
          unsigned int v26 = icu::Normalizer2Impl::getFCD16FromNormData(this, ~v13);
          LOBYTE(v13) = v26;
          if (v26 <= 1) {
            uint64_t v27 = 0LL;
          }
          else {
            uint64_t v27 = -1LL;
          }
          unsigned int v7 = &v14[v27];
        }

        else
        {
          LOBYTE(v13) = 0;
          unsigned int v7 = v14;
        }
      }

      else
      {
        unsigned int v23 = v14 - 1;
        int v24 = *(v14 - 1);
        if ((v24 & 0xFC00) == 0xDC00 && NextFCDBoundary < v23)
        {
          int v25 = *(v14 - 2);
          if ((v25 & 0xFC00) == 0xD800)
          {
            unsigned int v13 = icu::Normalizer2Impl::getFCD16FromNormData(this, v24 - 56613888 + (v25 << 10));
            unsigned int v23 = v14 - 2;
          }
        }

        if (v13 <= 1) {
          unsigned int v7 = v14;
        }
        else {
          unsigned int v7 = v23;
        }
      }
    }

    uint64_t v28 = 2LL;
    NextFCDBoundary = &v14[v28];
    if (v13 <= v10 >> 8)
    {
      if ((v10 & 0xFE) == 0) {
        unsigned int v7 = &v14[v28];
      }
    }

    else
    {
      if (!v37) {
        return v7;
      }
      icu::ReorderingBuffer::removeSuffix((uint64_t)v37, (unint64_t)((char *)v14 - (char *)v7) >> 1);
      NextFCDBoundary = icu::Normalizer2Impl::findNextFCDBoundary((uint64_t)this, NextFCDBoundary, v9);
      icu::Normalizer2Impl::decomposeShort((uint64_t)this, v7, NextFCDBoundary, 0, 0, (UChar **)v37, v36);
      unsigned int v10 = 0;
      unsigned int v7 = NextFCDBoundary;
LABEL_57:
      BOOL v12 = NextFCDBoundary == v9;
      if (NextFCDBoundary != v9) {
        continue;
      }
      return v9;
    }

    return NextFCDBoundary;
  }

unsigned __int16 *icu::Normalizer2Impl::findNextFCDBoundary( uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  while (a2 < a3)
  {
    unsigned int v7 = a2 + 1;
    unint64_t v6 = *a2;
    if ((v6 & 0xF800) == 0xD800)
    {
      if ((v6 & 0x400) != 0 || v7 == a3)
      {
        uint64_t v9 = *(void *)(a1 + 32);
      }

      else
      {
        int v8 = *v7;
        uint64_t v9 = *(void *)(a1 + 32);
        if ((v8 & 0xFC00) == 0xDC00)
        {
          unsigned int v7 = a2 + 2;
          LODWORD(v6) = v8 + ((_DWORD)v6 << 10) - 56613888;
          if ((int)v6 >= *(_DWORD *)(v9 + 24))
          {
            int v10 = *(_DWORD *)(v9 + 20) - 2;
          }

          else
          {
            int v10 = ucptrie_internalSmallIndex((uint64_t *)v9, v6);
            uint64_t v9 = *(void *)(a1 + 32);
          }

          goto LABEL_11;
        }
      }

      int v10 = *(_DWORD *)(v9 + 20) - 1;
    }

    else
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = (v6 & 0x3F) + *(unsigned __int16 *)(*(void *)v9 + ((v6 >> 5) & 0x7FE));
    }

unsigned __int16 *icu::Normalizer2Impl::makeFCDAndAppend( icu::Normalizer2Impl *this, UChar *src, unsigned __int16 *a3, int a4, UChar **a5, icu::ReorderingBuffer *a6, UErrorCode *a7)
{
  int v10 = a3;
  unsigned int v11 = src;
  uint64_t v28 = *MEMORY[0x1895F89C0];
  if (*((void *)a6 + 2) == *((void *)a6 + 4)
    || (NextFCDBoundary = icu::Normalizer2Impl::findNextFCDBoundary((uint64_t)this, src, a3),
        unint64_t v15 = (char *)NextFCDBoundary - (char *)v11,
        NextFCDBoundary == v11))
  {
LABEL_12:
    if (a4) {
      return icu::Normalizer2Impl::makeFCD(this, v11, v10, (UChar **)a6, a7);
    }
    if (!v10) {
      int v10 = u_strchr(v11, 0);
    }
    return (unsigned __int16 *)icu::ReorderingBuffer::appendZeroCC((UChar **)a6, v11, v10, a7);
  }

  BOOL v16 = NextFCDBoundary;
  unint64_t PreviousFCDBoundary = icu::Normalizer2Impl::findPreviousFCDBoundary(this, *((void *)a6 + 2), *((void *)a6 + 4));
  uint64_t v18 = (*((void *)a6 + 4) - PreviousFCDBoundary) >> 1;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  icu::UnicodeString::UnicodeString((uint64_t)&v24, PreviousFCDBoundary, v18);
  icu::ReorderingBuffer::removeSuffix((uint64_t)a6, v18);
  icu::UnicodeString::operator=(a5, (UChar **)&v24);
  icu::UnicodeString::doAppend((uint64_t)&v24, (uint64_t)v11, 0, v15 >> 1);
  if ((BYTE8(v24) & 0x11) != 0)
  {
    uint64_t v19 = 0LL;
  }

  else if ((BYTE8(v24) & 2) != 0)
  {
    uint64_t v19 = (UChar *)((unint64_t)&v24 | 0xA);
  }

  else
  {
    uint64_t v19 = (UChar *)*((void *)&v25 + 1);
  }

  int v20 = WORD4(v24) >> 5;
  if (SWORD4(v24) < 0) {
    int v20 = HIDWORD(v24);
  }
  icu::Normalizer2Impl::makeFCD(this, v19, &v19[v20], (UChar **)a6, a7);
  UErrorCode v21 = *a7;
  uint64_t result = (unsigned __int16 *)icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v24);
  if (v21 <= U_ZERO_ERROR)
  {
    unsigned int v11 = v16;
    goto LABEL_12;
  }

  return result;
}

unint64_t icu::Normalizer2Impl::findPreviousFCDBoundary( icu::Normalizer2Impl *this, unint64_t a2, unint64_t a3)
{
  while (a3 > a2)
  {
    unint64_t v7 = a3 - 2;
    unint64_t v6 = *(unsigned __int16 *)(a3 - 2);
    if ((v6 & 0xF800) == 0xD800)
    {
      if (v7 == a2 || (v6 & 0x400) == 0)
      {
        uint64_t v9 = *((void *)this + 4);
      }

      else
      {
        int v8 = *(unsigned __int16 *)(a3 - 4);
        uint64_t v9 = *((void *)this + 4);
        if ((v8 & 0xFC00) == 0xD800)
        {
          LODWORD(v6) = v6 + (v8 << 10) - 56613888;
          if ((int)v6 >= *(_DWORD *)(v9 + 24))
          {
            int v10 = *(_DWORD *)(v9 + 20) - 2;
          }

          else
          {
            int v10 = ucptrie_internalSmallIndex((uint64_t *)v9, v6);
            uint64_t v9 = *((void *)this + 4);
          }

          unint64_t v7 = a3 - 4;
          goto LABEL_13;
        }
      }

      int v10 = *(_DWORD *)(v9 + 20) - 1;
    }

    else
    {
      uint64_t v9 = *((void *)this + 4);
      int v10 = (v6 & 0x3F) + *(unsigned __int16 *)(*(void *)v9 + ((v6 >> 5) & 0x7FE));
    }

uint64_t sub_1807EFF34(uint64_t a1)
{
  return a1;
}

void sub_1807EFF6C(uint64_t a1, unsigned int a2, unsigned int a3, int *a4)
{
  int v9 = umutablecptrie_get(*(void *)a1, a3);
  if (a2 && (v9 & 0x3FFFFF) == 0)
  {
    umutablecptrie_set(*(void *)a1, a3, v9 | a2, a4);
    return;
  }

  if ((v9 & 0x200000) != 0)
  {
    unsigned int v11 = (icu::UnicodeSet *)icu::UVector::elementAt((icu::UVector *)(a1 + 16), v9 & 0x1FFFFF);
LABEL_9:
    icu::UnicodeSet::add(v11, a2);
    return;
  }

  int v10 = (icu::UnicodeSet *)icu::UMemory::operator new((icu::UMemory *)0xC8, v8);
  if (!v10)
  {
    if (*a4 <= 0) {
      *a4 = 7;
    }
    return;
  }

  unsigned int v11 = v10;
  icu::UnicodeSet::UnicodeSet(v10);
  if (*a4 > 0)
  {
    icu::UnicodeSet::~UnicodeSet(v11);
    icu::UMemory::operator delete(v12);
    return;
  }

  umutablecptrie_set(*(void *)a1, a3, v9 & 0xFFC00000 | *(_DWORD *)(a1 + 24) | 0x200000, a4);
  icu::UVector::adoptElement((icu::UVector *)(a1 + 16), v11, (UErrorCode *)a4);
  if (*a4 <= 0)
  {
    if ((v9 & 0x1FFFFF) != 0) {
      icu::UnicodeSet::add(v11, v9 & 0x1FFFFF);
    }
    goto LABEL_9;
  }

void sub_1807F00D0(uint64_t a1, int *a2)
{
  unsigned int v4 = (void ***)icu::UMemory::operator new((icu::UMemory *)0x38, (unint64_t)a2);
  if (!v4)
  {
    unint64_t v6 = (uint64_t *)(a1 + 72);
    *a2 = 7;
    goto LABEL_11;
  }

  uint64_t v5 = (uint64_t)v4;
  *unsigned int v4 = umutablecptrie_open(0, 0LL, a2);
  *(void *)(v5 + 8) = 0LL;
  icu::UVector::UVector(v5 + 16, (uint64_t)uprv_deleteUObject, 0LL, a2);
  *(void *)(a1 + 72) = v5;
  unint64_t v6 = (uint64_t *)(a1 + 72);
  if (*a2 > 0) {
    goto LABEL_9;
  }
  int v13 = 0;
  signed int Range = ucptrie_getRange(*(void *)(a1 + 32), 0LL, 1, 1, 0LL, 0LL, &v13);
  if ((Range & 0x80000000) == 0)
  {
    signed int v8 = Range;
    signed int v9 = 0;
    do
    {
      if (v13 != 1) {
        icu::Normalizer2Impl::makeCanonIterDataFromNorm16(a1, v9, v8, (unsigned __int16)v13, *(uint64_t **)(a1 + 72), a2);
      }
      signed int v9 = v8 + 1;
      signed int v8 = ucptrie_getRange(*(void *)(a1 + 32), (v8 + 1), 1, 1, 0LL, 0LL, &v13);
    }

    while ((v8 & 0x80000000) == 0);
  }

  int v10 = umutablecptrie_buildImmutable();
  unsigned int v11 = (void ***)*v6;
  v11[1] = (void **)v10;
  umutablecptrie_close(*v11);
  uint64_t v5 = *v6;
  *(void *)uint64_t *v6 = 0LL;
  if (*a2 >= 1)
  {
LABEL_9:
    BOOL v12 = (void *)sub_1807EFF34(v5);
    icu::UMemory::operator delete(v12);
LABEL_11:
    uint64_t *v6 = 0LL;
  }

void icu::Normalizer2Impl::makeCanonIterDataFromNorm16( uint64_t a1, signed int a2, signed int a3, unsigned int a4, uint64_t *a5, int *a6)
{
  if (a4 != 1)
  {
    unsigned int v8 = a2;
    if (*(unsigned __int16 *)(a1 + 14) <= a4)
    {
    }

    else if (a2 <= a3)
    {
LABEL_10:
      if (a4 >> 10 >= 0x3F) {
        unsigned int v11 = 0x80000000;
      }
      else {
        unsigned int v11 = -1073741824;
      }
      unsigned int v12 = a4 >> 3;
      if (a3 <= a2) {
        signed int v13 = a2;
      }
      else {
        signed int v13 = a3;
      }
      unsigned int v31 = v11;
      signed int v32 = v13;
      unsigned int v30 = a4 >> 3;
      while (1)
      {
        int v14 = umutablecptrie_get(*a5, v8);
        int v15 = v14;
        unsigned int v16 = *(unsigned __int16 *)(a1 + 14);
        if (v16 > a4)
        {
          int v17 = v14 | 0x40000000;
          goto LABEL_21;
        }

        unsigned int v18 = v8;
        unsigned int v19 = a4;
        if (*(unsigned __int16 *)(a1 + 26) <= a4)
        {
          unsigned int v18 = v8 + v12 - *(unsigned __int16 *)(a1 + 28);
          unsigned int v19 = sub_1807EA4C4(a1, v18);
          unsigned int v16 = *(unsigned __int16 *)(a1 + 14);
        }

        if (v19 > v16)
        {
          int v20 = (_WORD *)(*(void *)(a1 + 48) + ((unsigned __int16)v19 & 0xFFFE));
          __int16 v21 = *v20;
          if (v8 == v18)
          {
            int v17 = v15;
            if ((v21 & 0x80) != 0)
            {
              if (*((_BYTE *)v20 - 2)) {
                int v17 = v15 | 0x80000000;
              }
              else {
                int v17 = v15;
              }
            }
          }

          else
          {
            int v17 = v15;
          }

          int v23 = v21 & 0x1F;
          if ((v21 & 0x1F) != 0)
          {
            __int128 v25 = v20 + 1;
            unsigned int v24 = (unsigned __int16)v20[1];
            if ((v24 & 0xFC00) == 0xD800)
            {
              unsigned int v24 = (v24 << 10) - 56613888 + (unsigned __int16)v20[2];
              int v26 = 2;
            }

            else
            {
              int v26 = 1;
            }

            sub_1807EFF6C((uint64_t)a5, v8, v24, a6);
            if (v19 >= *(unsigned __int16 *)(a1 + 18) && v26 < v23)
            {
              do
              {
                uint64_t v27 = v26 + 1LL;
                unsigned int v28 = (unsigned __int16)v25[v26];
                if ((v28 & 0xFC00) == 0xD800)
                {
                  v26 += 2;
                  unsigned int v28 = (v28 << 10) - 56613888 + (unsigned __int16)v25[v27];
                }

                else
                {
                  ++v26;
                }

                int v29 = umutablecptrie_get(*a5, v28);
                if ((v29 & 0x80000000) == 0) {
                  umutablecptrie_set(*a5, v28, v29 | 0x80000000, a6);
                }
              }

              while (v26 < v23);
            }

            unsigned int v12 = v30;
            unsigned int v11 = v31;
          }

          signed int v13 = v32;
          goto LABEL_21;
        }

        sub_1807EFF6C((uint64_t)a5, v8, v18, a6);
LABEL_32:
        if (v8++ == v13) {
          return;
        }
      }

      int v17 = v14 | v11;
LABEL_21:
      if (v17 != v15) {
        umutablecptrie_set(*a5, v8, v17, a6);
      }
      goto LABEL_32;
    }
  }

uint64_t icu::Normalizer2Impl::getCanonValue(icu::Normalizer2Impl *this, unsigned int a2)
{
  return ucptrie_get(*(void *)(*((void *)this + 9) + 8LL), a2);
}

uint64_t icu::Normalizer2Impl::getCanonStartSet(icu::Normalizer2Impl *this, unsigned int a2)
{
  return icu::UVector::elementAt((icu::UVector *)(*((void *)this + 9) + 16LL), a2);
}

BOOL icu::Normalizer2Impl::isCanonSegmentStarter(icu::Normalizer2Impl *this, unsigned int a2)
{
  return (int)ucptrie_get(*(void *)(*((void *)this + 9) + 8LL), a2) >= 0;
}

uint64_t icu::Normalizer2Impl::getCanonStartSet( icu::Normalizer2Impl *this, unsigned int a2, icu::UnicodeSet *a3)
{
  int v6 = ucptrie_get(*(void *)(*((void *)this + 9) + 8LL), a2);
  if ((v6 & 0x7FFFFFFF) == 0) {
    return 0LL;
  }
  int v7 = v6;
  icu::UnicodeSet::clear(a3);
  unsigned int v8 = v7 & 0x1FFFFF;
  if ((v7 & 0x200000) == 0)
  {
    if (v8) {
      icu::UnicodeSet::add(a3, v8);
    }
    if ((v7 & 0x40000000) == 0) {
      return 1LL;
    }
    goto LABEL_9;
  }

  int v10 = (const icu::UnicodeSet *)icu::UVector::elementAt((icu::UVector *)(*((void *)this + 9) + 16LL), v8);
  icu::UnicodeSet::addAll((icu::UVector **)a3, v10);
  if ((v7 & 0x40000000) != 0)
  {
LABEL_9:
    unsigned int v11 = sub_1807EA4C4((uint64_t)this, a2);
    if (v11 == 2)
    {
      icu::UnicodeSet::add(a3, 588 * a2 - 2514944, 588 * a2 - 2514357);
    }

    else
    {
      unsigned int v12 = (const unsigned __int16 *)sub_1807F05C8((uint64_t)this, v11);
      icu::Normalizer2Impl::addComposites(this, v12, a3);
    }
  }

  return 1LL;
}

uint64_t sub_1807F05C8(uint64_t a1, unsigned int a2)
{
  if (*(unsigned __int16 *)(a1 + 14) <= a2 && *(unsigned __int16 *)(a1 + 30) > a2) {
    return *(void *)(a1 + 48)
  }
         + ((unsigned __int16)a2 & 0xFFFE)
  uint64_t v3 = *(unsigned __int16 *)(a1 + 30);
  else {
    return *(void *)(a1 + 48) + ((unsigned __int16)a2 & 0xFFFE);
  }
}

uint64_t unorm2_swap( uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = a3;
  uint64_t v41 = *MEMORY[0x1895F89C0];
  int v13 = udata_swapDataHeader(a1, (unsigned __int16 *)a2, a3, a4, a5, a6, a7, a8);
  if (!a5 || *a5 > 0) {
    return 0LL;
  }
  unsigned int v21 = *(unsigned __int8 *)(a2 + 16);
  uint64_t v22 = *(unsigned __int8 *)(a2 + 12);
  if (__PAIR64__(*(unsigned __int8 *)(a2 + 13), v22) != 0x720000004ELL
    || *(_BYTE *)(a2 + 14) != 109
    || *(_BYTE *)(a2 + 15) != 50
    || !*(_BYTE *)(a2 + 16)
    || v21 >= 5)
  {
    udata_printError( a1,  (uint64_t)"unorm2_swap(): data format %02x.%02x.%02x.%02x (format version %02x) is not recognized as Normalizer2 data\n",  v14,  v15,  v16,  v17,  v18,  v19,  v22);
    uint64_t result = 0LL;
    int v27 = 16;
LABEL_22:
    *a5 = v27;
    return result;
  }

  int v23 = v13;
  if (a4) {
    unsigned int v24 = (char *)a4 + v13;
  }
  else {
    unsigned int v24 = 0LL;
  }
  if ((v10 & 0x80000000) == 0)
  {
    int v25 = v21 == 2 ? 60 : 76;
    int v26 = v21 == 1 ? 56 : v25;
    uint64_t v10 = (v10 - v13);
    if ((int)v10 < v26)
    {
      udata_printError( a1,  (uint64_t)"unorm2_swap(): too few bytes (%d after header) for Normalizer2 data\n",  v14,  v15,  v16,  v17,  v18,  v19,  v10);
LABEL_28:
      uint64_t result = 0LL;
      int v27 = 8;
      goto LABEL_22;
    }
  }

  uint64_t v28 = 0LL;
  int v29 = (char *)(a2 + v13);
  __int128 v39 = 0u;
  *(_OWORD *)size_t __n = 0u;
  do
  {
    *(_DWORD *)((char *)&__n[-2] + v28) = udata_readInt32(a1, *(unsigned int *)&v29[v28]);
    v28 += 4LL;
  }

  while (v28 != 32);
  int v36 = HIDWORD(__n[1]);
  if ((v10 & 0x80000000) == 0)
  {
    if ((int)v10 < SHIDWORD(__n[1]))
    {
      udata_printError( a1,  (uint64_t)"unorm2_swap(): too few bytes (%d after header) for all of Normalizer2 data\n",  v30,  v31,  v32,  v33,  v34,  v35,  v10);
      goto LABEL_28;
    }

    if (v29 != v24) {
      memcpy(v24, v29, SHIDWORD(__n[1]));
    }
    uint64_t v37 = (int)v39;
    (*(void (**)(uint64_t, char *, void, char *, int *))(a1 + 56))(a1, v29, (int)v39, v24, a5);
    uint64_t v38 = SDWORD1(v39);
    utrie_swapAnyVersion(a1, (unsigned int *)&v29[v37], DWORD1(v39) - v37, (unsigned __int16 *)&v24[v37], a5);
    (*(void (**)(uint64_t, char *, void, char *, int *))(a1 + 48))( a1,  &v29[v38],  (DWORD2(v39) - v38),  &v24[v38],  a5);
  }

  return (v36 + v23);
}

void *icu::Normalizer::getStaticClassID(icu::Normalizer *this)
{
  return &unk_18C534DE0;
}

void *icu::Normalizer::getDynamicClassID(icu::Normalizer *this)
{
  return &unk_18C534DE0;
}

uint64_t icu::Normalizer::Normalizer(uint64_t a1, const icu::UnicodeString *a2, int a3)
{
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_18970F3C0;
  *(_DWORD *)(a1 + 24) = a3;
  *(_DWORD *)(a1 + 28) = 0;
  uint64_t v5 = (icu::StringCharacterIterator *)icu::UMemory::operator new((icu::UMemory *)0x60, (unint64_t)a2);
  if (v5) {
    uint64_t v5 = (icu::StringCharacterIterator *)icu::StringCharacterIterator::StringCharacterIterator(v5, a2);
  }
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 48) = off_18971B688;
  *(_WORD *)(a1 + 56) = 2;
  *(_DWORD *)(a1 + 112) = 0;
  icu::Normalizer::init((icu::Normalizer *)a1);
  return a1;
}

void *icu::Normalizer::init(icu::Normalizer *this)
{
  int v7 = 0;
  uint64_t result = (void *)icu::Normalizer2Factory::getInstance(*((_DWORD *)this + 6), (icu::Normalizer2Factory *)&v7);
  *((void *)this + 2) = result;
  if ((*((_BYTE *)this + 28) & 0x20) != 0)
  {
    uint64_t v4 = *((void *)this + 1);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
    uint64_t result = (void *)icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)v3);
    uint64_t v5 = result;
    if (result)
    {
      uint64_t v6 = *((void *)this + 2);
      uint64_t result = (void *)sub_180861384((UErrorCode *)&v7);
      void *v5 = off_18970BA28;
      v5[1] = v6;
      v5[2] = result;
    }

    *((void *)this + 1) = v5;
    *((void *)this + 2) = v5;
  }

  if (v7 >= 1)
  {
    int v7 = 0;
    uint64_t result = (void *)icu::Normalizer2Factory::getNoopInstance((icu::Normalizer2Factory *)&v7, v3);
    *((void *)this + 2) = result;
  }

  return result;
}

uint64_t icu::Normalizer::Normalizer(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_18970F3C0;
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = 0;
  uint64_t v7 = icu::UMemory::operator new((icu::UMemory *)0x20, (unint64_t)a2);
  if (v7)
  {
    uint64_t v9 = *a2;
    uint64_t v7 = icu::UCharCharacterIterator::UCharCharacterIterator(v7, &v9, a3);
  }

  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 48) = off_18971B688;
  *(_WORD *)(a1 + 56) = 2;
  *(_DWORD *)(a1 + 112) = 0;
  icu::Normalizer::init((icu::Normalizer *)a1);
  return a1;
}

uint64_t icu::Normalizer::Normalizer(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_18970F3C0;
  *(_DWORD *)(a1 + 24) = a3;
  *(_DWORD *)(a1 + 28) = 0;
  *(void *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64LL))(a2);
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 48) = off_18971B688;
  *(_WORD *)(a1 + 56) = 2;
  *(_DWORD *)(a1 + 112) = 0;
  icu::Normalizer::init((icu::Normalizer *)a1);
  return a1;
}

{
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = off_18970F3C0;
  *(_DWORD *)(a1 + 24) = a3;
  *(_DWORD *)(a1 + 28) = 0;
  *(void *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64LL))(a2);
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 48) = off_18971B688;
  *(_WORD *)(a1 + 56) = 2;
  *(_DWORD *)(a1 + 112) = 0;
  icu::Normalizer::init((icu::Normalizer *)a1);
  return a1;
}

icu::Normalizer *icu::Normalizer::Normalizer(icu::Normalizer *this, const icu::Normalizer *a2)
{
  *((void *)this + 1) = 0LL;
  *((void *)this + 2) = 0LL;
  *(void *)this = off_18970F3C0;
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)this + 4) = (*(uint64_t (**)(void))(**((void **)a2 + 4) + 64LL))(*((void *)a2 + 4));
  *((void *)this + 5) = *((void *)a2 + 5);
  icu::UnicodeString::UnicodeString((icu::Normalizer *)((char *)this + 48), (UChar **)a2 + 6);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  icu::Normalizer::init(this);
  return this;
}

void icu::Normalizer::~Normalizer(icu::Normalizer *this)
{
  *(void *)this = off_18970F3C0;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  icu::UnicodeString::~UnicodeString((icu::Normalizer *)((char *)this + 48));
  icu::UObject::~UObject(this);
}

{
  void *v1;
  icu::Normalizer::~Normalizer(this);
  icu::UMemory::operator delete(v1);
}

icu::Normalizer *icu::Normalizer::clone(icu::Normalizer *this, unint64_t a2)
{
  uint64_t result = (icu::Normalizer *)icu::UMemory::operator new((icu::UMemory *)0x78, a2);
  if (result) {
    return icu::Normalizer::Normalizer(result, this);
  }
  return result;
}

uint64_t icu::Normalizer::hashCode(icu::Normalizer *this)
{
  int v2 = (*(uint64_t (**)(void))(**((void **)this + 4) + 32LL))(*((void *)this + 4));
  int v3 = *((_DWORD *)this + 6) + *((_DWORD *)this + 7);
  return v3
       + icu::UnicodeString::doHashCode((icu::Normalizer *)((char *)this + 48))
       + *((_DWORD *)this + 28)
       + *((_DWORD *)this + 10)
       + *((_DWORD *)this + 11)
       + v2;
}

uint64_t icu::Normalizer::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  if (*(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24) || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)) {
    return 0LL;
  }
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 32) + 24LL))( *(void *)(a1 + 32),  *(void *)(a2 + 32));
  if (!(_DWORD)result) {
    return result;
  }
  unsigned int v5 = *(unsigned __int16 *)(a1 + 56);
  if ((v5 & 1) != 0)
  {
    if ((*(_WORD *)(a2 + 56) & 1) != 0) {
      goto LABEL_18;
    }
    return 0LL;
  }

  if ((v5 & 0x8000) != 0) {
    int v6 = *(_DWORD *)(a1 + 60);
  }
  else {
    int v6 = v5 >> 5;
  }
  uint64_t result = 0LL;
  unsigned int v7 = *(unsigned __int16 *)(a2 + 56);
  if ((v7 & 0x8000u) == 0) {
    unsigned int v8 = v7 >> 5;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a2 + 60);
  }
  if ((v7 & 1) == 0 && v6 == v8)
  {
    uint64_t result = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 48), (const icu::UnicodeString *)(a2 + 48), v6);
    if ((_DWORD)result)
    {
LABEL_18:
      if (*(_DWORD *)(a1 + 112) == *(_DWORD *)(a2 + 112)) {
        return *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44);
      }
      return 0LL;
    }
  }

  return result;
}

void icu::Normalizer::normalize( const icu::UnicodeString *a1, int a2, char a3, icu::UnicodeString *this, icu::Normalizer2Factory *a5)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if ((*((_WORD *)a1 + 4) & 1) != 0 || *(int *)a5 >= 1)
  {
    icu::UnicodeString::setToBogus(this);
  }

  else
  {
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    uint64_t v17 = 0LL;
    __int128 v16 = 0u;
    int v13 = (UChar *)off_18971B688;
    LOWORD(icu::LocaleBuilder::setLanguage((uint64_t)this, v13, v14) = 2;
    if (a1 == this) {
      uint64_t v9 = (icu::UnicodeString *)&v13;
    }
    else {
      uint64_t v9 = this;
    }
    uint64_t Instance = icu::Normalizer2Factory::getInstance(a2, a5);
    unsigned int v11 = (void *)*(unsigned int *)a5;
    if ((int)v11 <= 0)
    {
      if ((a3 & 0x20) != 0)
      {
        v12[0] = off_18970BA28;
        v12[1] = Instance;
        void v12[2] = sub_180861384((UErrorCode *)a5);
        icu::FilteredNormalizer2::normalize((icu::FilteredNormalizer2 *)v12, a1, v9, (UErrorCode *)a5);
        icu::FilteredNormalizer2::~FilteredNormalizer2((icu::FilteredNormalizer2 *)v12);
      }

      else
      {
        (*(void (**)(uint64_t, const icu::UnicodeString *, icu::UnicodeString *, icu::Normalizer2Factory *))(*(void *)Instance + 24LL))( Instance,  a1,  v9,  a5);
      }
    }

    if (v9 == (icu::UnicodeString *)&v13)
    {
      unsigned int v11 = (void *)*(unsigned int *)a5;
    }

    icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)&v13);
  }

void icu::Normalizer::compose( icu::Normalizer *this, const icu::UnicodeString *a2, char a3, icu::UnicodeString *a4, icu::UnicodeString *a5, UErrorCode *a6)
{
  if ((_DWORD)a2) {
    int v6 = 5;
  }
  else {
    int v6 = 4;
  }
  icu::Normalizer::normalize(this, v6, a3, a4, a5);
}

void icu::Normalizer::decompose( icu::Normalizer *this, const icu::UnicodeString *a2, char a3, icu::UnicodeString *a4, icu::UnicodeString *a5, UErrorCode *a6)
{
  if ((_DWORD)a2) {
    int v6 = 3;
  }
  else {
    int v6 = 2;
  }
  icu::Normalizer::normalize(this, v6, a3, a4, a5);
}

uint64_t icu::Normalizer::quickCheck( const icu::UnicodeString *a1, int a2, char a3, icu::Normalizer2Factory *this)
{
  uint64_t Instance = (icu::UnicodeSet *)icu::Normalizer2Factory::getInstance(a2, this);
  if ((a3 & 0x20) == 0) {
    return (*(uint64_t (**)(icu::UnicodeSet *, const icu::UnicodeString *, icu::Normalizer2Factory *))(*(void *)Instance + 104LL))( Instance,  a1,  this);
  }
  v10[0] = (icu::UnicodeSet *)off_18970BA28;
  v10[1] = Instance;
  v10[2] = (icu::UnicodeSet *)sub_180861384((UErrorCode *)this);
  uint64_t v8 = icu::FilteredNormalizer2::quickCheck(v10, a1, (UErrorCode *)this);
  icu::FilteredNormalizer2::~FilteredNormalizer2((icu::FilteredNormalizer2 *)v10);
  return v8;
}

uint64_t icu::Normalizer::isNormalized( const icu::UnicodeString *a1, int a2, char a3, icu::Normalizer2Factory *this)
{
  uint64_t Instance = (icu::UnicodeSet *)icu::Normalizer2Factory::getInstance(a2, this);
  if ((a3 & 0x20) == 0) {
    return (*(uint64_t (**)(icu::UnicodeSet *, const icu::UnicodeString *, icu::Normalizer2Factory *))(*(void *)Instance + 88LL))( Instance,  a1,  this);
  }
  v10[0] = (icu::UnicodeSet *)off_18970BA28;
  v10[1] = Instance;
  v10[2] = (icu::UnicodeSet *)sub_180861384((UErrorCode *)this);
  uint64_t isNormalized = icu::FilteredNormalizer2::isNormalized(v10, a1, (UErrorCode *)this);
  icu::FilteredNormalizer2::~FilteredNormalizer2((icu::FilteredNormalizer2 *)v10);
  return isNormalized;
}

icu::UnicodeString *icu::Normalizer::concatenate( uint64_t a1, const icu::UnicodeString *a2, icu::UnicodeString *this, int a4, char a5, icu::Normalizer2Factory *a6)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if ((*(_WORD *)(a1 + 8) & 1) != 0 || (*((_WORD *)a2 + 4) & 1) != 0 || *(int *)a6 >= 1)
  {
    icu::UnicodeString::setToBogus(this);
  }

  else
  {
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    uint64_t v20 = 0LL;
    __int128 v19 = 0u;
    __int128 v16 = (UChar *)off_18971B688;
    LOWORD(v17) = 2;
    if (a2 == this) {
      unsigned int v11 = &v16;
    }
    else {
      unsigned int v11 = (UChar **)this;
    }
    icu::UnicodeString::operator=(v11, (UChar **)a1);
    uint64_t Instance = icu::Normalizer2Factory::getInstance(a4, a6);
    int v13 = (void *)*(unsigned int *)a6;
    if ((int)v13 <= 0)
    {
      if ((a5 & 0x20) != 0)
      {
        v15[0] = off_18970BA28;
        v15[1] = Instance;
        void v15[2] = sub_180861384((UErrorCode *)a6);
        icu::FilteredNormalizer2::append( (icu::FilteredNormalizer2 *)v15,  (icu::UnicodeString *)v11,  a2,  (UErrorCode *)a6);
        icu::FilteredNormalizer2::~FilteredNormalizer2((icu::FilteredNormalizer2 *)v15);
      }

      else
      {
        (*(void (**)(uint64_t, UChar **, const icu::UnicodeString *, icu::Normalizer2Factory *))(*(void *)Instance + 48LL))( Instance,  v11,  a2,  a6);
      }
    }

    if (v11 == &v16)
    {
      int v13 = (void *)*(unsigned int *)a6;
    }

    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v16);
  }

  return this;
}

uint64_t icu::Normalizer::current(icu::Normalizer *this)
{
  int v2 = *((_DWORD *)this + 28);
  else {
    int v3 = *((unsigned __int16 *)this + 28) >> 5;
  }
  if (v2 < v3) {
    return icu::UnicodeString::char32At((icu::Normalizer *)((char *)this + 48), v2);
  }
  if (icu::Normalizer::nextNormalize(this))
  {
    int v2 = *((_DWORD *)this + 28);
    return icu::UnicodeString::char32At((icu::Normalizer *)((char *)this + 48), v2);
  }

  return 0xFFFFLL;
}

BOOL icu::Normalizer::nextNormalize(icu::Normalizer *this)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  if ((*((_WORD *)this + 28) & 1) != 0) {
    __int16 v2 = 2;
  }
  else {
    __int16 v2 = *((_WORD *)this + 28) & 0x1F;
  }
  *((_WORD *)this + 28) = v2;
  *((_DWORD *)this + 28) = 0;
  *((_DWORD *)this + 10) = *((_DWORD *)this + 11);
  (*(void (**)(void))(**((void **)this + 4) + 120LL))(*((void *)this + 4));
  memset(v10, 0, sizeof(v10));
  unsigned int v3 = (*(uint64_t (**)(void))(**((void **)this + 4) + 48LL))(*((void *)this + 4));
  icu::UnicodeString::UnicodeString((uint64_t)v10, v3);
  while ((*(unsigned int (**)(void))(**((void **)this + 4) + 56LL))(*((void *)this + 4)))
  {
    uint64_t v4 = *((void *)this + 2);
    uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 4) + 48LL))(*((void *)this + 4));
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v4 + 120LL))(v4, v5))
    {
      (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 4) + 200LL))( *((void *)this + 4),  0xFFFFFFFFLL,  1LL);
      break;
    }

    icu::UnicodeString::append((uint64_t)v10, v5);
  }

  *((_DWORD *)this + 11) = *(_DWORD *)(*((void *)this + 4) + 12LL);
  int v9 = 0;
  (*(void (**)(void, _OWORD *, char *, int *))(**((void **)this + 2) + 24LL))( *((void *)this + 2),  v10,  (char *)this + 48,  &v9);
  BOOL v6 = 0LL;
  unint64_t v7 = v9;
  if (v9 <= 0)
  {
    unint64_t v7 = *((unsigned __int16 *)this + 28);
    BOOL v6 = v7 > 0x1F;
  }

  icu::UnicodeString::~UnicodeString((void *)v7, (icu::UnicodeString *)v10);
  return v6;
}

uint64_t icu::Normalizer::next(icu::Normalizer *this)
{
  int v2 = *((_DWORD *)this + 28);
  else {
    int v3 = *((unsigned __int16 *)this + 28) >> 5;
  }
  if (v2 >= v3)
  {
    if (!icu::Normalizer::nextNormalize(this)) {
      return 0xFFFFLL;
    }
    int v2 = *((_DWORD *)this + 28);
  }

  uint64_t result = icu::UnicodeString::char32At((icu::Normalizer *)((char *)this + 48), v2);
  else {
    int v5 = 2;
  }
  *((_DWORD *)this + 28) += v5;
  return result;
}

uint64_t icu::Normalizer::previous(icu::Normalizer *this)
{
  int v2 = *((_DWORD *)this + 28);
  if (v2 <= 0)
  {
    if (!icu::Normalizer::previousNormalize(this)) {
      return 0xFFFFLL;
    }
    int v2 = *((_DWORD *)this + 28);
  }

  uint64_t result = icu::UnicodeString::char32At((icu::Normalizer *)((char *)this + 48), v2 - 1);
  else {
    int v4 = -1;
  }
  *((_DWORD *)this + 28) += v4;
  return result;
}

BOOL icu::Normalizer::previousNormalize(icu::Normalizer *this)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if ((*((_WORD *)this + 28) & 1) != 0) {
    __int16 v2 = 2;
  }
  else {
    __int16 v2 = *((_WORD *)this + 28) & 0x1F;
  }
  *((_WORD *)this + 28) = v2;
  *((_DWORD *)this + 28) = 0;
  *((_DWORD *)this + 11) = *((_DWORD *)this + 10);
  (*(void (**)(void))(**((void **)this + 4) + 120LL))(*((void *)this + 4));
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  uint64_t v14 = 0LL;
  __int128 v13 = 0u;
  uint64_t v10 = off_18971B688;
  LOWORD(v11) = 2;
  do
  {
    uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 4) + 176LL))(*((void *)this + 4));
    icu::UnicodeString::replace((icu::UnicodeString *)&v10, 0LL, 0LL, v3);
  }

  while (!(*(unsigned int (**)(void, uint64_t))(**((void **)this + 2) + 120LL))( *((void *)this + 2),  v3));
  *((_DWORD *)this + 10) = *(_DWORD *)(*((void *)this + 4) + 12LL);
  int v9 = 0;
  (*(void (**)(void, void (***)(icu::UnicodeString *__hidden), char *, int *))(**((void **)this + 2) + 24LL))( *((void *)this + 2),  &v10,  (char *)this + 48,  &v9);
  int v4 = (void *)*((unsigned __int16 *)this + 28);
  else {
    unsigned int v5 = v4 >> 5;
  }
  *((_DWORD *)this + 28) = v5;
  BOOL v6 = v4 > 0x1F && v9 < 1;
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)&v10);
  return v6;
}

uint64_t icu::Normalizer::reset(icu::Normalizer *this)
{
  uint64_t result = (*(uint64_t (**)(void, void, void))(**((void **)this + 4) + 192LL))( *((void *)this + 4),  0LL,  0LL);
  *((_DWORD *)this + 10) = result;
  *((_DWORD *)this + 11) = result;
  if ((*((_WORD *)this + 28) & 1) != 0) {
    __int16 v3 = 2;
  }
  else {
    __int16 v3 = *((_WORD *)this + 28) & 0x1F;
  }
  *((_WORD *)this + 28) = v3;
  *((_DWORD *)this + 28) = 0;
  return result;
}

uint64_t icu::Normalizer::clearBuffer(uint64_t this)
{
  if ((*(_WORD *)(this + 56) & 1) != 0) {
    __int16 v1 = 2;
  }
  else {
    __int16 v1 = *(_WORD *)(this + 56) & 0x1F;
  }
  *(_WORD *)(this + 56) = v1;
  *(_DWORD *)(this + 112) = 0;
  return this;
}

uint64_t icu::Normalizer::setIndexOnly(icu::Normalizer *this)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 4) + 120LL))(*((void *)this + 4));
  int v3 = *(_DWORD *)(*((void *)this + 4) + 12LL);
  *((_DWORD *)this + 10) = v3;
  *((_DWORD *)this + 11) = v3;
  if ((*((_WORD *)this + 28) & 1) != 0) {
    __int16 v4 = 2;
  }
  else {
    __int16 v4 = *((_WORD *)this + 28) & 0x1F;
  }
  *((_WORD *)this + 28) = v4;
  *((_DWORD *)this + 28) = 0;
  return result;
}

uint64_t icu::Normalizer::first(icu::Normalizer *this)
{
  int v2 = (*(uint64_t (**)(void, void, void))(**((void **)this + 4) + 192LL))( *((void *)this + 4),  0LL,  0LL);
  *((_DWORD *)this + 10) = v2;
  *((_DWORD *)this + 11) = v2;
  if ((*((_WORD *)this + 28) & 1) != 0) {
    __int16 v3 = 2;
  }
  else {
    __int16 v3 = *((_WORD *)this + 28) & 0x1F;
  }
  *((_WORD *)this + 28) = v3;
  *((_DWORD *)this + 28) = 0;
  return icu::Normalizer::next(this);
}

uint64_t icu::Normalizer::last(icu::Normalizer *this)
{
  int v2 = (*(uint64_t (**)(void, void, uint64_t))(**((void **)this + 4) + 192LL))( *((void *)this + 4),  0LL,  2LL);
  *((_DWORD *)this + 10) = v2;
  *((_DWORD *)this + 11) = v2;
  if ((*((_WORD *)this + 28) & 1) != 0) {
    __int16 v3 = 2;
  }
  else {
    __int16 v3 = *((_WORD *)this + 28) & 0x1F;
  }
  *((_WORD *)this + 28) = v3;
  *((_DWORD *)this + 28) = 0;
  return icu::Normalizer::previous(this);
}

uint64_t icu::Normalizer::getIndex(icu::Normalizer *this)
{
  else {
    int v1 = *((unsigned __int16 *)this + 28) >> 5;
  }
  uint64_t v2 = 44LL;
  if (*((_DWORD *)this + 28) < v1) {
    uint64_t v2 = 40LL;
  }
  return *(unsigned int *)((char *)this + v2);
}

uint64_t icu::Normalizer::startIndex(icu::Normalizer *this)
{
  return *(unsigned int *)(*((void *)this + 4) + 16LL);
}

uint64_t icu::Normalizer::endIndex(icu::Normalizer *this)
{
  return *(unsigned int *)(*((void *)this + 4) + 20LL);
}

void *icu::Normalizer::setMode(icu::Normalizer *this, int a2)
{
  *((_DWORD *)this + 6) = a2;
  return icu::Normalizer::init(this);
}

uint64_t icu::Normalizer::getUMode(icu::Normalizer *this)
{
  return *((unsigned int *)this + 6);
}

void *icu::Normalizer::setOption(icu::Normalizer *this, int a2, int a3)
{
  if (a3) {
    int v3 = *((_DWORD *)this + 7) | a2;
  }
  else {
    int v3 = *((_DWORD *)this + 7) & ~a2;
  }
  *((_DWORD *)this + 7) = v3;
  return icu::Normalizer::init(this);
}

BOOL icu::Normalizer::getOption(icu::Normalizer *this, int a2)
{
  return (*((_DWORD *)this + 7) & a2) != 0;
}

icu::StringCharacterIterator *icu::Normalizer::setText( icu::StringCharacterIterator *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    unsigned int v5 = this;
    this = (icu::StringCharacterIterator *)icu::UMemory::operator new((icu::UMemory *)0x60, (unint64_t)a2);
    if (this)
    {
      BOOL v6 = this;
      icu::StringCharacterIterator::StringCharacterIterator(this, a2);
      uint64_t v7 = *((void *)v5 + 4);
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
      }
      *((void *)v5 + 4) = v6;
      this = (icu::StringCharacterIterator *)(*(uint64_t (**)(icu::StringCharacterIterator *, void, void))(*(void *)v6 + 192LL))( v6,  0LL,  0LL);
      *((_DWORD *)v5 + 10) = (_DWORD)this;
      *((_DWORD *)v5 + 11) = (_DWORD)this;
      if ((*((_WORD *)v5 + 28) & 1) != 0) {
        __int16 v8 = 2;
      }
      else {
        __int16 v8 = *((_WORD *)v5 + 28) & 0x1F;
      }
      *((_WORD *)v5 + 28) = v8;
      *((_DWORD *)v5 + 28) = 0;
    }

    else
    {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    }
  }

  return this;
}

uint64_t icu::Normalizer::setText(uint64_t this, const icu::CharacterIterator *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v4 = this;
    this = (*(uint64_t (**)(const icu::CharacterIterator *))(*(void *)a2 + 64LL))(a2);
    if (this)
    {
      uint64_t v5 = this;
      uint64_t v6 = *(void *)(v4 + 32);
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
      }
      *(void *)(v4 + 32) = v5;
      this = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v5 + 192LL))(v5, 0LL, 0LL);
      *(_DWORD *)(v4 + 40) = this;
      *(_DWORD *)(v4 + 44) = this;
      if ((*(_WORD *)(v4 + 56) & 1) != 0) {
        __int16 v7 = 2;
      }
      else {
        __int16 v7 = *(_WORD *)(v4 + 56) & 0x1F;
      }
      *(_WORD *)(v4 + 56) = v7;
      *(_DWORD *)(v4 + 112) = 0;
    }

    else
    {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    }
  }

  return this;
}

uint64_t icu::Normalizer::setText(uint64_t result, uint64_t *a2, uint64_t a3, int *a4)
{
  if (*a4 <= 0)
  {
    uint64_t v7 = result;
    uint64_t result = icu::UMemory::operator new((icu::UMemory *)0x20, (unint64_t)a2);
    if (result)
    {
      uint64_t v8 = result;
      uint64_t v11 = *a2;
      icu::UCharCharacterIterator::UCharCharacterIterator(result, &v11, a3);
      uint64_t v9 = *(void *)(v7 + 32);
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
      }
      *(void *)(v7 + 32) = v8;
      uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v8 + 192LL))(v8, 0LL, 0LL);
      *(_DWORD *)(v7 + 40) = result;
      *(_DWORD *)(v7 + 44) = result;
      if ((*(_WORD *)(v7 + 56) & 1) != 0) {
        __int16 v10 = 2;
      }
      else {
        __int16 v10 = *(_WORD *)(v7 + 56) & 0x1F;
      }
      *(_WORD *)(v7 + 56) = v10;
      *(_DWORD *)(v7 + 112) = 0;
    }

    else
    {
      *a4 = 7;
    }
  }

  return result;
}

uint64_t icu::Normalizer::getText(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 208LL))(*(void *)(a1 + 32));
}

void *icu::ParsePosition::getStaticClassID(icu::ParsePosition *this)
{
  return &unk_18C534DE1;
}

void *icu::ParsePosition::getDynamicClassID(icu::ParsePosition *this)
{
  return &unk_18C534DE1;
}

void icu::ParsePosition::~ParsePosition(icu::ParsePosition *this)
{
}

double icu::ParsePosition::clone(icu::ParsePosition *this, unint64_t a2)
{
  uint64_t v3 = icu::UMemory::operator new((icu::UMemory *)0x10, a2);
  if (v3)
  {
    *(void *)uint64_t v3 = off_18970F400;
    double result = *((double *)this + 1);
    *(double *)(v3 + 8) = result;
  }

  return result;
}

BOOL icu::PatternProps::isSyntax(icu::PatternProps *this)
{
  return 0LL;
}

BOOL icu::PatternProps::isSyntaxOrWhiteSpace(icu::PatternProps *this)
{
  if (this <= 0xFF)
  {
    LOBYTE(v1) = byte_1809E71AC[this];
    return v1 & 1;
  }

  if (this <= 0x3030)
  {
    int v1 = dword_1809E7184[byte_1809E7100[(unint64_t)((_DWORD)this - 0x2000) >> 5]] >> (char)this;
    return v1 & 1;
  }

  return ((_DWORD)this - 64830) <= 0x108 && ((_DWORD)this - 65093) < 0xFFFFFEFB;
}

BOOL icu::PatternProps::isWhiteSpace(icu::PatternProps *this)
{
  return 0LL;
}

unsigned __int16 *icu::PatternProps::skipWhiteSpace(unsigned __int16 *result, int a2)
{
  if (a2 >= 1)
  {
    uint64_t v2 = (uint64_t)&result[a2 - 1 + 1];
    int v3 = a2 + 1;
    do
    {
      unsigned int v4 = *result;
      if (v4 > 0xFF)
      {
        if (v4 - 8206 > 0x1B || v4 - 8232 >= 0xFFFFFFE8) {
          return result;
        }
      }

      else if (((byte_1809E71AC[*result] >> 2) & 1) == 0)
      {
        return result;
      }

      ++result;
      --v3;
    }

    while (v3 > 1);
    return (unsigned __int16 *)v2;
  }

  return result;
}

uint64_t icu::PatternProps::skipWhiteSpace(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 8);
  if ((v2 & 0x8000u) == 0) {
    uint64_t v3 = v2 >> 5;
  }
  else {
    uint64_t v3 = *(unsigned int *)(a1 + 12);
  }
  if ((int)v3 > (int)a2)
  {
    uint64_t v4 = a1 + 10;
    if ((v2 & 2) == 0) {
      uint64_t v4 = *(void *)(a1 + 24);
    }
    else {
      uint64_t v5 = v3;
    }
    uint64_t v6 = (unsigned __int16 *)(v4 + 2LL * (int)a2);
    a2 = (int)a2;
    while (v3 > a2)
    {
      unsigned int v7 = *v6;
      if (v7 > 0xFF)
      {
        if (v7 - 8206 > 0x1B || v7 - 8232 >= 0xFFFFFFE8) {
          return a2;
        }
      }

      else if (((byte_1809E71AC[*v6] >> 2) & 1) == 0)
      {
        return a2;
      }

      ++a2;
      ++v6;
      if ((_DWORD)v3 == (_DWORD)a2) {
        return v3;
      }
    }

    return v5;
  }

  return a2;
}

unsigned __int16 *icu::PatternProps::trimWhiteSpace(unsigned __int16 *result, unsigned int *a2)
{
  uint64_t v2 = *a2;
  unsigned int v3 = *result;
  if (v3 > 0xFF)
  {
    if (v3 - 8206 > 0x1B || v3 - 8232 >= 0xFFFFFFE8)
    {
LABEL_7:
      unsigned int v4 = result[(v2 - 1)];
      if (v4 > 0xFF)
      {
        if (v4 - 8206 > 0x1B || v4 - 8232 >= 0xFFFFFFE8) {
          return result;
        }
      }

      else if (((byte_1809E71AC[result[(v2 - 1)]] >> 2) & 1) == 0)
      {
        return result;
      }
    }
  }

  else if (((byte_1809E71AC[*result] >> 2) & 1) == 0)
  {
    goto LABEL_7;
  }

  uint64_t v5 = 0LL;
  while (1)
  {
    unsigned int v6 = result[v5];
    if (v6 > 0xFF) {
      break;
    }
    if (((byte_1809E71AC[result[v5]] >> 2) & 1) == 0) {
      goto LABEL_20;
    }
LABEL_18:
    if (v2 == ++v5)
    {
      int v7 = *a2;
      goto LABEL_27;
    }
  }

  if (v6 - 8206 <= 0x1B && v6 - 8232 < 0xFFFFFFE8) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v8 = &result[(int)v2 - 1];
  do
  {
    int v7 = v2;
    unsigned int v10 = *v8--;
    unsigned int v9 = v10;
    if (v10 > 0xFF)
    {
      if (v9 - 8206 > 0x1B) {
        break;
      }
      int v11 = v9 - 8232 < 0xFFFFFFE8;
    }

    else
    {
      int v11 = (byte_1809E71AC[v9] >> 2) & 1;
    }

    LODWORD(v2) = v7 - 1;
  }

  while (v11);
  LODWORD(v2) = v5;
LABEL_27:
  *a2 = v7 - v2;
  result += v2;
  return result;
}

uint64_t icu::PatternProps::isIdentifier(unsigned __int16 *a1, int a2)
{
  if (a2 < 1) {
    return 0LL;
  }
  uint64_t v2 = a1;
  unint64_t v3 = (unint64_t)&a1[a2];
  while (!icu::PatternProps::isSyntaxOrWhiteSpace((icu::PatternProps *)*v2))
  {
  }

  return 0LL;
}

unsigned __int16 *icu::PatternProps::skipIdentifier(unsigned __int16 *a1, int a2)
{
  uint64_t v2 = a1;
  if (a2 >= 1)
  {
    uint64_t v3 = (uint64_t)&a1[a2 - 1 + 1];
    int v4 = a2 + 1;
    while (!icu::PatternProps::isSyntaxOrWhiteSpace((icu::PatternProps *)*v2))
    {
      ++v2;
      if (--v4 <= 1) {
        return (unsigned __int16 *)v3;
      }
    }
  }

  return v2;
}

uint64_t icu::PluralMapBase::toCategory(icu::PluralMapBase *this, const char *a2)
{
  uint64_t v3 = 0LL;
  while (strcmp((const char *)this, off_18970F430[v3]))
  {
    if (++v3 == 6) {
      return 0xFFFFFFFFLL;
    }
  }

  return v3;
}

uint64_t icu::PluralMapBase::toCategory(icu::PluralMapBase *this, const icu::UnicodeString *a2)
{
  __s1[8] = *(char **)MEMORY[0x1895F89C0];
  memset(&__s1[1], 0, 56);
  __s1[0] = (char *)&__s1[1] + 5;
  LODWORD(__s1[1]) = 40;
  UErrorCode v5 = U_ZERO_ERROR;
  icu::CharString::appendInvariantChars((icu::CharString *)__s1, this, &v5);
  if (v5 > U_ZERO_ERROR)
  {
LABEL_5:
    uint64_t v2 = 0xFFFFFFFFLL;
  }

  else
  {
    uint64_t v2 = 0LL;
    uint64_t v3 = __s1[0];
    while (strcmp(v3, off_18970F430[v2]))
    {
      if (++v2 == 6) {
        goto LABEL_5;
      }
    }
  }

  if (BYTE4(__s1[1])) {
    uprv_free(__s1[0]);
  }
  return v2;
}

char *icu::PluralMapBase::getCategoryName(icu::PluralMapBase *this, Category a2)
{
  else {
    return 0LL;
  }
}

uint64_t uprv_compareASCIIPropertyNames(unsigned __int8 *a1, unsigned __int8 *a2)
{
  while (1)
  {
    int v4 = 256;
    UErrorCode v5 = a1;
    while (1)
    {
      int v7 = *v5++;
      int v6 = v7;
      unint64_t v8 = (1LL << (v7 - 32)) & 0x8000000000002001LL;
      BOOL v9 = (v7 - 32) > 0x3F || v8 == 0;
      v4 += 256;
    }

    if (v6) {
      v4 += uprv_asciitolower((char)v6);
    }
    int v10 = 256;
    int v11 = a2;
    while (1)
    {
      int v13 = *v11++;
      int v12 = v13;
      unint64_t v14 = (1LL << (v13 - 32)) & 0x8000000000002001LL;
      BOOL v15 = (v13 - 32) > 0x3F || v14 == 0;
      v10 += 256;
    }

    if (v12) {
      v10 += uprv_asciitolower((char)v12);
    }
    if (v4 != v10)
    {
      uint64_t result = v4 - v10;
    }

    a1 += v4 >> 8;
    a2 += v10 >> 8;
  }

  return 0LL;
}

uint64_t uprv_compareEBCDICPropertyNames(unsigned __int8 *a1, unsigned __int8 *a2)
{
  while (2)
  {
    int v4 = 256;
    UErrorCode v5 = a1;
    while (1)
    {
      unsigned int v7 = *v5++;
      uint64_t v6 = v7;
      if (v7 <= 0x25)
      {
        if (((1LL << v6) & 0x2000203820LL) != 0) {
          goto LABEL_9;
        }
        if (!v6) {
          goto LABEL_11;
        }
      }

LABEL_9:
      v4 += 256;
    }

    v4 += uprv_ebcdictolower(v6);
LABEL_11:
    int v9 = 256;
    int v10 = a2;
    while (2)
    {
      unsigned int v12 = *v10++;
      uint64_t v11 = v12;
      if (v12 <= 0x25)
      {
        if (((1LL << v11) & 0x2000203820LL) == 0)
        {
          if (!v11) {
            goto LABEL_21;
          }
          break;
        }

  uint64_t v6 = word_1809FB5A8[v5];
  if ((v6 & 8) == 0)
  {
    if ((v6 & 2) != 0) {
      return (result + ((__int16)v6 >> 7));
    }
    return result;
  }

  unsigned int v7 = (__int16 *)((char *)&unk_1809FA5C4 + ((v6 >> 3) & 0x1FFE));
  int v10 = *v7;
  unint64_t v8 = v7 + 1;
  int v9 = v10;
  if (v10 < 0)
  {
    if ((a2 & 7) != 0)
    {
      if ((_DWORD)result == 73) {
        return 305LL;
      }
      if ((_DWORD)result != 304) {
        goto LABEL_13;
      }
    }

    else if ((_DWORD)result != 73)
    {
      if ((_DWORD)result == 304) {
        return result;
      }
      goto LABEL_13;
    }

    return 105LL;
  }

  unsigned int v7 = word_1809FB5A8[v6];
  if ((v7 & 8) == 0)
  {
    LODWORD(icu::LocaleBuilder::setVariant((uint64_t)this, v7, v8) = a1;
    if ((v7 & 2) != 0) {
      LODWORD(icu::LocaleBuilder::setVariant((uint64_t)this, v7, v8) = a1 + ((__int16)v7 >> 7);
    }
    goto LABEL_12;
  }

  int v9 = (__int16 *)((char *)&unk_1809FA5C4 + ((v7 >> 3) & 0x1FFE));
  uint64_t v11 = *v9;
  int v10 = v9 + 1;
  unsigned int v12 = (unsigned __int16)v11;
  int v13 = v11;
  if (v11 < 0)
  {
    if ((a3 & 7) != 0)
    {
      if (a1 == 73) {
        return 305LL;
      }
      if (a1 != 304) {
        goto LABEL_32;
      }
    }

    else if (a1 != 73)
    {
      if (a1 == 304)
      {
        *a2 = &unk_1809F9F62;
        return 2LL;
      }

      goto LABEL_32;
    }

    return 105LL;
  }

  if ((v13 & 0x80) != 0)
  {
    unint64_t v14 = byte_1809F9E61[v12 & 0x7F];
    BOOL v15 = &v10[v14];
    __int128 v16 = (uint64_t)&v10[2 * v14 + 1];
    if ((v13 & 0x100) != 0) {
      BOOL v15 = (__int16 *)v16;
    }
    unint64_t v8 = *v15 >> 4;
    if (*v15 >> 4)
    {
      *a2 = &v15[(*v15 & 0xF) + 1];
      return v8;
    }
  }

  int v9 = *(_DWORD *)(a1 + 16);
  if (v2 >= v9) {
    return 0xFFFFFFFFLL;
  }
  int v10 = *(const uint8_t **)a1;
  uint64_t v11 = v2;
  unsigned int v12 = v2 + 1LL;
  *(_DWORD *)(a1 + 12) = v12;
  int v13 = (char)v10[v2];
  unsigned int v7 = v13;
  if (v13 < 0)
  {
    if ((_DWORD)v12 != v9)
    {
      if (v13 < 0xE0u)
      {
        __int128 v16 = v13 & 0x1F;
      }

      else
      {
        if (v13 > 0xEFu)
        {
          unint64_t v14 = v10[v12];
          unsigned int v12 = v11 + 2;
          *(_DWORD *)(a1 + 12) = v11 + 2;
          if ((_DWORD)v11 + 2 == v9) {
            return 0xFFFFFFFFLL;
          }
          BOOL v15 = v10[v12] ^ 0x80;
          if (v15 > 0x3F) {
            return 0xFFFFFFFFLL;
          }
          LODWORD(icu::LocaleBuilder::setLanguage((uint64_t)this, v13, v14) = v14 & 0x3F | (((_DWORD)v7 - 240) << 6);
        }

        else
        {
          unint64_t v14 = v13 & 0xF;
          BOOL v15 = v10[v12] & 0x3F;
        }

        LODWORD(icu::LocaleBuilder::setScript((uint64_t)this, v11, v12) = v12 + 1;
        *(_DWORD *)(a1 + 12) = v12;
        if ((_DWORD)v12 == v9) {
          return 0xFFFFFFFFLL;
        }
        __int128 v16 = v15 | ((_DWORD)v14 << 6);
      }

      __int128 v17 = v10[(int)v12] ^ 0x80;
      if (v17 <= 0x3F)
      {
        unsigned int v7 = v17 | (v16 << 6);
        *(_DWORD *)(a1 + 12) = v12 + 1;
        return v7;
      }
    }

    return 0xFFFFFFFFLL;
  }

  return v7;
}

        ulist_deleteList(EmptyList);
        uprv_free((void *)KeywordValuesForLocale);
        KeywordValuesForLocale = 0LL;
LABEL_10:
        ures_close((uint64_t)v30);
        ures_close((uint64_t)v32);
        ures_close((uint64_t)v34);
        ures_close((uint64_t)v36);
        ures_close(v12);
        ulist_deleteList(v8);
        return KeywordValuesForLocale;
      }

      ures_getNextResource(v12, (uint64_t)v36, a4);
      if (*a4 > 0) {
        goto LABEL_9;
      }
      uint64_t Key = (const char *)ures_getKey((uint64_t)v36);
      BOOL v15 = strcmp(Key, __s2);
      __int128 v16 = v15;
      if (!a3 || !v15) {
        break;
      }
LABEL_18:
      if (*a4 > 0) {
        goto LABEL_9;
      }
    }

    ures_getByKey(v12, Key, (uint64_t)v34, a4);
    while (1)
    {
      while (1)
      {
        do
        {
          if (*a4 > 0) {
            goto LABEL_9;
          }
          if (!ures_hasNext((BOOL)v34)) {
            goto LABEL_18;
          }
          ures_getNextResource((uint64_t)v34, (uint64_t)v32, a4);
        }

        while (ures_getType((uint64_t)v32) != 2);
        __int128 v17 = (char *)uprv_malloc(0x60uLL);
        uint64_t v28 = 96;
        if (!v17)
        {
          *a4 = 7;
          goto LABEL_18;
        }

        __int128 v18 = v17;
        ures_getUTF8StringByKey((uint64_t)v32, "id", v17, &v28, 1, a4);
        if (*a4 > 0) {
          goto LABEL_18;
        }
        ures_getByKey((uint64_t)v32, "to", (uint64_t)v30, a4);
        if (*a4 < 1) {
          break;
        }
        *a4 = 0;
        if (v16) {
          break;
        }
        __int128 v19 = strlen(v18);
        uint64_t v21 = (uint64_t)EmptyList;
LABEL_33:
        ulist_addItemEndList(v21, v18, 1, a4);
      }

      uint64_t v20 = strlen(v18);
      if (!(ulist_containsString((uint64_t)v8, v18, v20) | a3))
      {
        uint64_t v21 = (uint64_t)v8;
        goto LABEL_33;
      }

      uprv_free(v18);
    }
  }

  if (v9) {
    uprv_free(v9);
  }
  else {
    *a4 = 7;
  }
  ulist_deleteList(EmptyList);
  ulist_deleteList(v8);
  return 0LL;
}

  a2 = v9;
  if ((a3 & 0x80000000) == 0)
  {
LABEL_5:
    int v10 = v8 - a2;
    if (v10 >= a3) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }

  a2 = v8;
  if (srcLength < 0) {
    goto LABEL_10;
  }
LABEL_5:
  int v9 = v7 - a2;
  if (v9 < srcLength) {
LABEL_11:
  }
    srcint Length = v9;
  pDestint Length = 0;
  UErrorCode pErrorCode = U_ZERO_ERROR;
  if ((v6 & 0x11) != 0)
  {
    int v10 = 0LL;
  }

  else if ((v6 & 2) != 0)
  {
    int v10 = (char *)this + 10;
  }

  else
  {
    int v10 = (char *)*((void *)this + 3);
  }

  u_strToUTF8WithSub(dest, destCapacity, &pDestLength, (const UChar *)&v10[2 * a2], srcLength, 65533, 0LL, &pErrorCode);
  return pDestLength;
}

    unint64_t v8 = *((_DWORD *)this + 3);
    goto LABEL_10;
  }

  return v4;
}

  int v9 = ut->chunkOffset - 1LL;
  ut->chunkOffset = v9;
  uint64_t result = ut->chunkContents[v9];
  if ((result & 0xF800) == 0xD800)
  {
    utext_setNativeIndex(ut, nativeIndex);
    return utext_previous32(ut);
  }

  return result;
}

  if (!*(_BYTE *)(v5 + 144172)) {
    return utrie2_clone(a1, a2);
  }
LABEL_10:
  int v10 = utrie2_open(*(_DWORD *)(a1 + 36), *(_DWORD *)(a1 + 40), a2);
  if (*a2 > 0) {
    return 0LL;
  }
  uint64_t v11 = *a2;
  utrie2_enum(a1, 0LL, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t))sub_18088ADD0, (uint64_t)&v10);
  uint64_t v6 = 0;
  *a2 = v11;
  do
  {
    unsigned int v7 = *(void *)(a1 + 16);
    unint64_t v8 = (v6 & 0x1F) + 4 * *(unsigned __int16 *)(*(void *)a1 + 2LL * ((v6 + 55296) >> 5));
    if (v7) {
      int v9 = *(_DWORD *)(v7 + 4 * v8);
    }
    else {
      int v9 = *(unsigned __int16 *)(*(void *)a1 + 2 * v8);
    }
    if (v9 != *(_DWORD *)(a1 + 36) && *a2 <= 0)
    {
      if ((((_WORD)v6 - 10240) & 0xFC00) == 0xD800) {
        sub_18088BA30(*((void *)v10 + 9), v6 + 55296, 0, v9, a2);
      }
      else {
        *a2 = 1;
      }
    }

    ++v6;
  }

  while (v6 != 1024);
  uint64_t result = v10;
  if (*a2 >= 1)
  {
    utrie2_close((uint64_t)v10);
    return 0LL;
  }

  return result;
}

      int v4 = ++v3 >= v2;
    }

    while (v3 != v2);
  }

  return v4;
}

    uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v12, v8++, (const char **)&__s1, a3);
    if (!(_DWORD)result) {
      return result;
    }
  }

  __int128 v16 = 0;
  BOOL v15 = (*(uint64_t (**)(icu::ResourceValue *, int *, int *))(*(void *)a3 + 40LL))(a3, &v16, a5);
  icu::UnicodeString::UnicodeString(v17, 1LL, &v15);
  int v9 = *a5;
  if ((int)v9 <= 0)
  {
    int v10 = (*(_WORD *)(v7 + 24) & 1) != 0 ? 2 : *(_WORD *)(v7 + 24) & 0x1F;
    *(_WORD *)(v7 + 24) = v10;
    sub_1808E7B88((uint64_t)v17, v7 + 16, a5);
    int v9 = *a5;
  }

  return icu::UnicodeString::~UnicodeString((void *)v9, (icu::UnicodeString *)v17);
}

  if ((v7 & 2) != 0) {
    int v9 = (unsigned __int16 *)(a3 + 10);
  }
  else {
    int v9 = *(unsigned __int16 **)(a3 + 24);
  }
  return icu::FormattedStringBuilder::insertCodePoint(a1, a2, *v9, a4, a6);
}

    unsigned int v7 = (char *)&unk_180A38AE8;
LABEL_10:
    UErrorCode v5 = &v7[a2];
    return *v5;
  }

  UErrorCode v5 = (char *)&unk_180A38AF4 + a2;
  if ((a3 & 3) == 0 && v3 > a3) {
    goto LABEL_9;
  }
  return *v5;
}

  uint64_t v6 = *(_DWORD *)(a1 + 100);
LABEL_10:
  unsigned int v7 = *(unsigned __int16 *)(a1 + 32);
  if ((v7 & 0x11) != 0)
  {
    unint64_t v8 = 0LL;
    if ((v7 & 0x8000) != 0) {
      goto LABEL_17;
    }
LABEL_15:
    int v9 = v7 >> 5;
    goto LABEL_18;
  }

  if ((v7 & 2) != 0)
  {
    unint64_t v8 = (const UChar *)(a1 + 34);
    if ((v7 & 0x8000) == 0) {
      goto LABEL_15;
    }
  }

  else
  {
    unint64_t v8 = *(const UChar **)(a1 + 48);
    if ((v7 & 0x8000) == 0) {
      goto LABEL_15;
    }
  }

    unsigned int v7 = *(_DWORD *)(v4 + 36);
    return usearch_setText(*(void *)(v4 + 152), v6, v7, a3);
  }

  return this;
}

    unsigned int v7 = *(_DWORD *)(v4 + 100);
    return usearch_setPattern(*(void *)(v4 + 152), v6, v7, a3);
  }

  return this;
}

        *(_DWORD *)uint64_t result = 5;
        result[10] = sub_18095F4C0((uint64_t)a3);
        uint64_t result = icu::UMemory::operator new(v15, (icu::UMemory *)0x28, v14);
        if (result) {
          uint64_t result = (uint64_t *)icu::UVector::UVector((icu::UVector *)result, a5);
        }
        v10[11] = (uint64_t)result;
        if ((v10[2] & 1) != 0) {
          __int128 v16 = 2;
        }
        else {
          __int128 v16 = v10[2] & 0x1F;
        }
        *((_WORD *)v10 + 8) = v16;
        if (a3[4] <= a3[14]) {
          __int128 v17 = a3[14];
        }
        else {
          __int128 v17 = a3[4];
        }
        if (v17 >= 1)
        {
          for (unint64_t i = 0; i != v17; ++i)
          {
            if (i < a3[14])
            {
              uint64_t result = (uint64_t *)icu::UVector::elementAt((icu::UVector *)(a3 + 12), i);
              __int128 v19 = *((unsigned __int16 *)result + 4);
              if (v19 >= 0x20)
              {
                uint64_t v20 = (__int16)v19;
                uint64_t v21 = v19 >> 5;
                if (v20 >= 0) {
                  uint64_t v22 = v21;
                }
                else {
                  uint64_t v22 = *((unsigned int *)result + 3);
                }
                uint64_t result = (uint64_t *)icu::UnicodeString::doAppend( (uint64_t)(v10 + 1),  (const icu::UnicodeString *)result,  0,  v22);
              }
            }

            if (a3[4])
            {
              int v23 = (void *)icu::UVector::orphanElementAt((icu::UVector *)(a3 + 2), 0);
              icu::UVector::addElement((icu::UVector *)v10[11], v23, a5);
              if (v23)
              {
                if (*(int *)a5 >= 1)
                {
                  unsigned int v24 = (void *)sub_18095CE80(v23);
                  icu::UMemory::operator delete(v24);
                }
              }

              v29[0] = -1;
              uint64_t result = (uint64_t *)icu::UnicodeString::doAppend((uint64_t)(v10 + 1), (uint64_t)v29, 0, 1LL);
            }
          }
        }

        return sub_18099C618((uint64_t)result, a2, (unsigned int *)v10, v27, a5);
      }

      uint64_t result = (uint64_t *)icu::UVector::orphanElementAt((icu::UVector *)(a3 + 2), 0);
      v10[11] = (uint64_t)result;
      int v26 = 4;
    }

    *(_DWORD *)int v10 = v26;
    return sub_18099C618((uint64_t)result, a2, (unsigned int *)v10, v27, a5);
  }

  return result;
}

  if (*((_DWORD *)v3 + 62))
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)&v11, "_");
    icu::CharString::append(v4, v11, v12, a2);
    uint64_t result = icu::CharString::append(v4, *((const char **)v3 + 24), *((_DWORD *)v3 + 62), a2);
  }

  if (*((_DWORD *)v3 + 78))
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)&v9, "@collation=");
    icu::CharString::append(v4, v9, v10, a2);
    uint64_t result = icu::CharString::append(v4, *((const char **)v3 + 32), *((_DWORD *)v3 + 78), a2);
  }

  if (*((_DWORD *)v3 + 94))
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)&v7, "@sp=");
    icu::CharString::append(v4, v7, v8, a2);
    return icu::CharString::append(v4, *((const char **)v3 + 40), *((_DWORD *)v3 + 94), a2);
  }

  return result;
}

      uint64_t v6 = 0LL;
      BOOL v15 = 7;
LABEL_12:
      *a6 = v15;
      return v6;
    case 1u:
    case 2u:
    case 3u:
    case 4u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0x10u:
      icu::Locale::Locale((uint64_t *)a1, (icu::Locale *)v53, a4, 0LL, 0LL, 0LL);
      unsigned int v12 = a1;
      goto LABEL_6;
    case 5u:
      int v25 = icu::UMemory::operator new((uint64_t *)a1, (icu::UMemory *)0x2F0, a2);
      if (!v25) {
        goto LABEL_9;
      }
      uint64_t v6 = (icu::RuleBasedNumberFormat *)v25;
      icu::Locale::Locale(v26, (icu::Locale *)v53, a4, 0LL, 0LL, 0LL);
      int v27 = v6;
      uint64_t v28 = 0LL;
      goto LABEL_25;
    case 6u:
      int v29 = icu::UMemory::operator new((uint64_t *)a1, (icu::UMemory *)0x2F0, a2);
      if (!v29) {
        goto LABEL_9;
      }
      uint64_t v6 = (icu::RuleBasedNumberFormat *)v29;
      icu::Locale::Locale(v30, (icu::Locale *)v53, a4, 0LL, 0LL, 0LL);
      int v27 = v6;
      uint64_t v28 = 1LL;
      goto LABEL_25;
    case 7u:
      uint64_t v31 = icu::UMemory::operator new((uint64_t *)a1, (icu::UMemory *)0x2F0, a2);
      if (!v31) {
        goto LABEL_9;
      }
      uint64_t v6 = (icu::RuleBasedNumberFormat *)v31;
      icu::Locale::Locale(v32, (icu::Locale *)v53, a4, 0LL, 0LL, 0LL);
      int v27 = v6;
      uint64_t v28 = 2LL;
LABEL_25:
      icu::RuleBasedNumberFormat::RuleBasedNumberFormat(v27, v28, v53, a6);
      icu::Locale::~Locale(v33, (icu::Locale *)v53);
      goto LABEL_33;
    case 8u:
      LODWORD(v44) = 0;
      memset(v53, 0, sizeof(v53));
      icu::Locale::Locale((uint64_t *)a1, (icu::Locale *)v53, a4, 0LL, 0LL, 0LL);
      if ((int)icu::Locale::getKeywordValue((char **)v53, "numbers", 0LL, 0, (UErrorCode *)&v44) < 1)
      {
        unsigned int v42 = icu::UMemory::operator new(v35, (icu::UMemory *)0x2F0, v34);
        uint64_t v6 = (icu::RuleBasedNumberFormat *)v42;
        if (v42) {
          icu::RuleBasedNumberFormat::RuleBasedNumberFormat(v42, 3LL, v53, a6);
        }
      }

      else
      {
        unsigned int v12 = 1;
LABEL_6:
        uint64_t Instance = icu::NumberFormat::createInstance((char **)v53, v12, a6);
LABEL_7:
        uint64_t v6 = Instance;
      }

      icu::Locale::~Locale(v14, (icu::Locale *)v53);
      if (!v6) {
        goto LABEL_9;
      }
      goto LABEL_33;
    case 9u:
      UErrorCode v48 = 0LL;
      UErrorCode v46 = 0u;
      int v47 = 0u;
      int v44 = 0u;
      unsigned int v45 = 0u;
      unsigned int v51 = 0u;
      uint64_t v52 = 0u;
      char v49 = 0u;
      int v50 = 0u;
      icu::UnicodeString::UnicodeString((uint64_t)&v49, a2, a3);
      uint64_t v6 = (icu::RuleBasedNumberFormat *)icu::UMemory::operator new(v37, (icu::UMemory *)0x2F0, v36);
      if (v6)
      {
        if (!a5) {
          a5 = (UParseError *)&v44;
        }
        icu::Locale::Locale((uint64_t *)&v44, (icu::Locale *)v53, a4, 0LL, 0LL, 0LL);
        icu::RuleBasedNumberFormat::RuleBasedNumberFormat( v6,  (const icu::UnicodeString *)&v49,  (const icu::Locale *)v53,  a5,  a6);
        icu::Locale::~Locale(v39, (icu::Locale *)v53);
      }

      goto LABEL_32;
    case 0xEu:
      icu::Locale::Locale((uint64_t *)a1, (icu::Locale *)v53, a4, 0LL, 0LL, 0LL);
      uint64_t v41 = 0LL;
      goto LABEL_37;
    case 0xFu:
      icu::Locale::Locale((uint64_t *)a1, (icu::Locale *)v53, a4, 0LL, 0LL, 0LL);
      uint64_t v41 = 1LL;
LABEL_37:
      uint64_t Instance = icu::CompactDecimalFormat::createInstance((const icu::Locale *)v53, v41, a6, v40);
      goto LABEL_7;
    default:
      uint64_t v6 = 0LL;
      BOOL v15 = 16;
      goto LABEL_12;
  }

uint64_t sub_1807F235C(int a1)
{
  int v1 = 1;
  int v2 = 7;
  while (1)
  {
    uint64_t v3 = (int *)((char *)&unk_1809E72AC + 4 * v1);
    int v4 = *v3;
    int v5 = a1 - *v3;
    if (a1 < *v3) {
      return 0LL;
    }
    int v6 = v3[1];
    int v7 = v1 + 2;
    if (v6 > a1) {
      break;
    }
    int v1 = v7 + 2 * (v6 - v4);
  }

  return (v7 + 2 * v5);
}

uint64_t sub_1807F23B0(uint64_t result, signed int a2)
{
  if ((_DWORD)result)
  {
    LODWORD(v2) = result + 2;
    int v3 = dword_1809E72AC[(int)result + 1];
    if (v3 > 15)
    {
      unsigned int v9 = result + v3 - 14;
      uint64_t v2 = (int)v2;
      uint64_t v10 = (int)v9;
      do
      {
        signed int v11 = dword_1809E72AC[v2];
        if (v11 > a2) {
          break;
        }
        if (v11 == a2) {
          return dword_1809E72AC[v9];
        }
        ++v2;
        ++v9;
      }

      while (v2 < v10);
    }

    else if (v3 >= 1)
    {
      for (int i = v3 + 1; i > 1; --i)
      {
        int v5 = &dword_1809E72AC[(int)v2];
        unsigned int v6 = *v5;
        signed int v7 = v5[1];
        int v8 = v2 + 2;
        if (v7 > a2)
        {
          unsigned int v9 = v8 + a2 - v6;
          return dword_1809E72AC[v9];
        }

        LODWORD(v2) = v8 - v6 + v7;
      }
    }

    return 0LL;
  }

  return result;
}

const char *sub_1807F245C(char *a1, int a2)
{
  if (a2 < 0) {
    return 0LL;
  }
  if (*a1 <= a2) {
    return 0LL;
  }
  uint64_t v2 = a1 + 1;
  if (a2)
  {
    unsigned int v3 = a2 + 1;
    do
    {
      v2 += strlen(v2) + 1;
      --v3;
    }

    while (v3 > 1);
  }

  if (*v2) {
    return v2;
  }
  else {
    return 0LL;
  }
}

BOOL sub_1807F24C8(icu::BytesTrie *a1, char *a2)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v2 = a2;
  char v3 = *a2;
  if (*a2)
  {
    int v5 = 1;
    while (1)
    {
      ++v2;
      while (1)
      {
        int v6 = uprv_asciitolower(v3);
        BOOL v7 = v6 - 32 > 0x3F
          || ((1LL << (v6 - 32)) & 0x8000000000002001LL) == 0;
        int v8 = *v2++;
        char v3 = v8;
        if (!v8) {
          return v5 > 1;
        }
      }

      if ((v5 & 1) == 0) {
        break;
      }
      int v5 = icu::BytesTrie::next(a1, v6);
      char v3 = *v2;
      if (!*v2) {
        return v5 > 1;
      }
    }

    return 0LL;
  }

  else
  {
    int v5 = 1;
    return v5 > 1;
  }

const char *__cdecl u_getPropertyName_0(UProperty property, UPropertyNameChoice nameChoice)
{
  int v3 = sub_1807F235C(property);
  if (v3) {
    return sub_1807F245C(&byte_1809EC5C3[dword_1809E72AC[v3]], nameChoice);
  }
  else {
    return 0LL;
  }
}

const char *__cdecl u_getPropertyValueName_0(UProperty property, int32_t value, UPropertyNameChoice nameChoice)
{
  int v5 = sub_1807F235C(property);
  if (v5 && (int v6 = sub_1807F23B0(dword_1809E72AC[v5 + 1], value)) != 0) {
    return sub_1807F245C(&byte_1809EC5C3[v6], nameChoice);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1807F2644(int a1, char *a2)
{
  int v4 = 0LL;
  int v5 = (char *)&unk_1809E891C + a1;
  int v6 = (unsigned __int8 *)v5;
  uint64_t Value = 0xFFFFFFFFLL;
  uint64_t v7 = 0xFFFFFFFFLL;
  if (sub_1807F24C8((icu::BytesTrie *)&v4, a2)) {
    uint64_t Value = icu::BytesTrie::readValue((icu::BytesTrie *)(v6 + 1), (const unsigned __int8 *)(*v6 >> 1));
  }
  icu::BytesTrie::~BytesTrie(&v4);
  return Value;
}

int32_t u_getPropertyValueEnum_0(UProperty property, const char *alias)
{
  int v3 = sub_1807F235C(property);
  else {
    return -1;
  }
}

UProperty u_getPropertyEnum(const char *alias)
{
  return sub_1807F2644(0, (char *)alias);
}

const char *uscript_getName(int32_t value)
{
  return u_getPropertyValueName_0(UCHAR_SCRIPT, value, U_LONG_PROPERTY_NAME);
}

const char *uscript_getShortName(int32_t value)
{
  return u_getPropertyValueName_0(UCHAR_SCRIPT, value, U_SHORT_PROPERTY_NAME);
}

void *upvec_open(int a1, int *a2)
{
  if (*a2 <= 0)
  {
    if (a1 <= 0)
    {
      uint64_t v2 = 0LL;
      int v9 = 1;
    }

    else
    {
      unsigned int v4 = a1 + 2;
      uint64_t v2 = uprv_malloc(0x20uLL);
      int v5 = uprv_malloc((int)(v4 << 14));
      int v6 = v5;
      if (v2 && v5)
      {
        v2[2] = 0LL;
        v2[3] = 0LL;
        *uint64_t v2 = v5;
        *((_DWORD *)v2 + 2) = v4;
        *(void *)((char *)v2 + 12) = 0x300001000LL;
        bzero(v5, (int)(12 * v4));
        void *v6 = 0x11000000000000LL;
        uint64_t v7 = (void *)((char *)v6 + 4 * v4);
        *uint64_t v7 = 0x11000100110000LL;
        int v8 = (_DWORD *)v7 + v4;
        *int v8 = 1114113;
        v8[1] = 1114114;
        return v2;
      }

      uprv_free(v2);
      uprv_free(v6);
      uint64_t v2 = 0LL;
      int v9 = 7;
    }

    *a2 = v9;
    return v2;
  }

  return 0LL;
}

void upvec_close(void **a1)
{
  if (a1)
  {
    uprv_free(*a1);
    uprv_free(a1);
  }

void upvec_setValue(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int *a7)
{
  if (*a7 <= 0)
  {
    int v9 = 1;
    if (!a1) {
      goto LABEL_11;
    }
    if (a2 < 0) {
      goto LABEL_11;
    }
    if (a2 > a3) {
      goto LABEL_11;
    }
    int v12 = 1114114;
    if (a3 > 1114113 || a4 < 0) {
      goto LABEL_11;
    }
    uint64_t v13 = *(int *)(a1 + 8);
    if ((int)v13 - 2 <= a4)
    {
      int v9 = 1;
      goto LABEL_11;
    }

    if (*(_BYTE *)(a1 + 24))
    {
      int v9 = 30;
LABEL_11:
      *a7 = v9;
      return;
    }

    int v41 = a3 + 1;
    unsigned int v15 = a4 + 2;
    int v16 = a6 & a5;
    __int128 v17 = (char *)sub_1807F2B78((uint64_t *)a1, a2);
    uint64_t v18 = sub_1807F2B78((uint64_t *)a1, a3);
    __int128 v19 = (char *)v18;
    BOOL v20 = *(_DWORD *)v17 != a2 && v16 != (*(_DWORD *)&v17[4 * v15] & a6);
    BOOL v21 = v41 != *(_DWORD *)(v18 + 4) && v16 != (*(_DWORD *)(v18 + 4LL * v15) & a6);
    if (v20 || v21)
    {
      int v22 = *(_DWORD *)(a1 + 12);
      int v23 = *(_DWORD *)(a1 + 16);
      int v24 = v21 + v20 + v23;
      if (v24 <= v22)
      {
        unsigned int v40 = v15;
        uint64_t v26 = *(void *)a1;
      }

      else
      {
        if (v22 >= 0x10000)
        {
          if (v22 >= 0x110002)
          {
            int v9 = 5;
            goto LABEL_11;
          }
        }

        else
        {
          int v12 = 0x10000;
        }

        int v37 = *(_DWORD *)(a1 + 16);
        int v38 = v21 + v20 + v23;
        unsigned int v40 = v15;
        BOOL v35 = v20;
        BOOL v36 = v21;
        int v27 = uprv_malloc(4 * (int)v13 * v12);
        if (!v27)
        {
          int v9 = 7;
          goto LABEL_11;
        }

        uint64_t v26 = (uint64_t)v27;
        uint64_t v28 = *(_BYTE **)a1;
        memcpy(v27, *(const void **)a1, 4 * (int)v13 * (uint64_t)v37);
        __int128 v17 = (char *)(v26 + v17 - v28);
        __int128 v19 = (char *)(v26 + v19 - v28);
        uprv_free(v28);
        int v23 = v37;
        *(void *)a1 = v26;
        *(_DWORD *)(a1 + 12) = v12;
        BOOL v20 = v35;
        BOOL v21 = v36;
        int v24 = v38;
      }

      int v25 = &v19[4 * v13];
      unint64_t v29 = (v26 + 4 * (unint64_t)(v23 * v13) - (unint64_t)v25) >> 2;
      if ((int)v29 >= 1)
      {
        int v39 = v24;
        if (v20) {
          int v30 = 2;
        }
        else {
          int v30 = 1;
        }
        BOOL v31 = v21;
        BOOL v32 = v20;
        memmove(&v19[4 * (v30 + v21) * (int)v13], &v19[4 * v13], 4 * (int)v29);
        int v24 = v39;
        BOOL v20 = v32;
        BOOL v21 = v31;
      }

      *(_DWORD *)(a1 + 16) = v24;
      unsigned int v15 = v40;
      if (v20)
      {
        BOOL v33 = v21;
        memmove(&v17[4 * v13], v17, 4LL * (int)(v13 + ((unint64_t)(v19 - v17) >> 2)));
        BOOL v21 = v33;
        *(_DWORD *)&v17[4 * v13] = a2;
        *((_DWORD *)v17 + 1) = a2;
        v17 += 4 * v13;
      }

      else
      {
        int v25 = v19;
      }

      if (v21)
      {
        memcpy(&v25[4 * v13], v25, 4 * v13);
        *(_DWORD *)&v25[4 * v13] = v41;
        *((_DWORD *)v25 + 1) = v41;
      }
    }

    else
    {
      int v25 = (char *)v18;
    }

    *(_DWORD *)(a1 + 20) = ((uint64_t)&v25[-*(void *)a1] >> 2) / v13;
    uint64_t v34 = (int *)&v17[4 * v15];
    *uint64_t v34 = *v34 & ~a6 | v16;
    if (v17 != v25)
    {
      do
      {
        v34 += v13;
        *uint64_t v34 = *v34 & ~a6 | v16;
      }

      while (v34 != (int *)&v25[4 * v15]);
    }
  }

uint64_t sub_1807F2B78(uint64_t *a1, int a2)
{
  uint64_t v2 = *((int *)a1 + 2);
  int v3 = *((_DWORD *)a1 + 4);
  int v4 = *((_DWORD *)a1 + 5);
  uint64_t v5 = *a1;
  int v6 = (_DWORD *)(*a1 + 4LL * v4 * (int)v2);
  if (*v6 <= a2)
  {
    if (v6[1] > a2) {
      return *a1 + 4LL * v4 * (int)v2;
    }
    uint64_t v7 = &v6[v2];
    if (v7[1] <= a2)
    {
      v7 += v2;
      int v9 = v7[1];
      BOOL v10 = __OFSUB__(a2, v9);
      int v11 = a2 - v9;
      if (v11 < 0 == v10)
      {
        if (v11 <= 9)
        {
          int v12 = v4 + 2;
          do
          {
            ++v12;
            int v13 = v6[3 * (int)v2 + 1];
            v6 += v2;
          }

          while (v13 <= a2);
          *((_DWORD *)a1 + 5) = v12;
          return (uint64_t)&v6[2 * v2];
        }

        goto LABEL_16;
      }

      int v8 = v4 + 2;
    }

    else
    {
      int v8 = v4 + 1;
    }

    *((_DWORD *)a1 + 5) = v8;
    return (uint64_t)v7;
  }

  if (*(_DWORD *)(v5 + 4) > a2)
  {
    *((_DWORD *)a1 + 5) = 0;
    return v5;
  }

uint64_t upvec_getValue(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t result = 0LL;
  if ((a3 & 0x80000000) == 0 && a2 <= 0x110001 && !*(_BYTE *)(a1 + 24))
  {
    if (*(_DWORD *)(a1 + 8) - 2 <= a3) {
      return 0LL;
    }
    else {
      return *(unsigned int *)(sub_1807F2B78((uint64_t *)a1, a2) + 4LL * (a3 + 2));
    }
  }

  return result;
}

_DWORD *upvec_getRow(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result = 0LL;
  if ((a2 & 0x80000000) == 0 && !*(_BYTE *)(a1 + 24))
  {
    if (*(_DWORD *)(a1 + 16) <= a2)
    {
      return 0LL;
    }

    else
    {
      int v6 = (_DWORD *)(*(void *)a1 + 4LL * *(_DWORD *)(a1 + 8) * a2);
      if (a3) {
        *a3 = *v6;
      }
      if (a4) {
        *a4 = v6[1] - 1;
      }
      return v6 + 2;
    }
  }

  return result;
}

void upvec_compact( uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t, int *), uint64_t a3, int *a4)
{
  if (*a4 <= 0)
  {
    if (a2)
    {
      if (!*(_BYTE *)(a1 + 24))
      {
        *(_BYTE *)(a1 + 24) = 1;
        uint64_t v23 = *(int *)(a1 + 8);
        int v24 = *(_DWORD *)(a1 + 16);
        uprv_sortArray(*(void *)a1, v24, 4 * v23, sub_1807F2FD4, a1, 0, a4);
        if (*a4 <= 0)
        {
          uint64_t v8 = v23 - 2;
          int v9 = *(unsigned int **)a1;
          uint64_t v10 = (2 - v23);
          int v11 = v24;
          uint64_t v12 = v23 - 2;
          unsigned int v27 = 2 - v23;
          if (v24 < 1)
          {
LABEL_14:
            a2(a3, 0x200000LL, 0x200000LL, (v10 + v8), &v9[-v8], v12, a4);
            if (*a4 <= 0)
            {
              int v15 = v23 - 2;
              int v16 = v24;
              if (v24 < 1)
              {
LABEL_23:
                *(_DWORD *)(a1 + 16) = (int)v27 / v15 + 1;
              }

              else
              {
                __int128 v17 = (_DWORD *)(*(void *)a1 + 8LL);
                while (1)
                {
                  uint64_t v19 = *(v17 - 2);
                  int v18 = *(v17 - 1);
                  uint64_t v20 = *(void *)a1;
                  unsigned int v21 = v27;
                  if ((v27 & 0x80000000) != 0
                    || (v22 = memcmp(v17, (const void *)(v20 + 4LL * v27), 4 * (int)v12), v21 = v27, int v15 = v23 - 2, v22))
                  {
                    unsigned int v27 = v21 + v15;
                    memmove((void *)(v20 + 4LL * (int)(v21 + v15)), v17, 4 * v12);
                    int v15 = v23 - 2;
                  }

                  if ((int)v19 < 1114112)
                  {
                    a2(a3, v19, (v18 - 1), v27, (unsigned int *)(*(void *)a1 + 4LL * (int)v27), v12, a4);
                    int v15 = v23 - 2;
                    if (*a4 > 0) {
                      break;
                    }
                  }

                  v17 += v23;
                  if (!--v16) {
                    goto LABEL_23;
                  }
                }
              }
            }
          }

          else
          {
            size_t __len = -1 * v8;
            size_t v26 = 4 * (int)v8;
            while (1)
            {
              uint64_t v13 = *v9;
              if ((v10 & 0x80000000) != 0 || (v14 = memcmp(v9 + 2, &v9[__len], v26), uint64_t v8 = v23 - 2, v14)) {
                uint64_t v10 = (v10 + v8);
              }
              if ((int)v13 >= 1114112)
              {
                a2(a3, v13, v13, v10, v9 + 2, v12, a4);
                uint64_t v8 = v23 - 2;
                if (*a4 > 0) {
                  break;
                }
              }

              v9 += v23;
              if (!--v11) {
                goto LABEL_14;
              }
            }
          }
        }
      }
    }

    else
    {
      *a4 = 1;
    }
  }

uint64_t sub_1807F2FD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 8);
  int v4 = v3 + 1;
  int v5 = 2;
  while (1)
  {
    unsigned int v6 = *(_DWORD *)(a2 + 4LL * v5);
    unsigned int v7 = *(_DWORD *)(a3 + 4LL * v5);
    if (v6 != v7) {
      break;
    }
    if (v5 + 1 == v3) {
      int v5 = 0;
    }
    else {
      ++v5;
    }
    if (--v4 <= 1) {
      return 0LL;
    }
  }

  if (v6 < v7) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 1LL;
  }
}

uint64_t upvec_getArray(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (!*(_BYTE *)(a1 + 24)) {
    return 0LL;
  }
  if (a2) {
    *a2 = *(_DWORD *)(a1 + 16);
  }
  if (a3) {
    *a3 = *(_DWORD *)(a1 + 8) - 2;
  }
  return *(void *)a1;
}

void *upvec_cloneArray(uint64_t a1, _DWORD *a2, _DWORD *a3, int *a4)
{
  if (*a4 > 0) {
    return 0LL;
  }
  if (!*(_BYTE *)(a1 + 24))
  {
    int v4 = 0LL;
    int v11 = 1;
LABEL_11:
    *a4 = v11;
    return v4;
  }

  size_t v9 = 4 * *(_DWORD *)(a1 + 16) * (*(_DWORD *)(a1 + 8) - 2);
  uint64_t v10 = uprv_malloc(v9);
  int v4 = v10;
  if (!v10)
  {
    int v11 = 7;
    goto LABEL_11;
  }

  memcpy(v10, *(const void **)a1, v9);
  if (a2) {
    *a2 = *(_DWORD *)(a1 + 16);
  }
  if (a3) {
    *a3 = *(_DWORD *)(a1 + 8) - 2;
  }
  return v4;
}

uint64_t upvec_compactToUTrie2WithRowIndexes(uint64_t a1, int *a2)
{
  uint64_t result = v4[0];
  if (*a2 >= 1)
  {
    utrie2_close(v4[0]);
    return 0LL;
  }

  return result;
}

_OWORD *upvec_compactToUTrie2Handler( _OWORD *result, signed int a2, unsigned int a3, signed int a4, uint64_t a5, uint64_t a6, int *a7)
{
  unsigned int v7 = result;
  if (a2 < 1114112) {
    return (_OWORD *)utrie2_setRange32(*(void *)result, a2, a3, a4, 1, a7);
  }
  switch(a2)
  {
    case 0x200000:
      *((_DWORD *)result + 4) = a4;
      if (a4 < 0x10000)
      {
        uint64_t result = utrie2_open(*((_DWORD *)result + 2), *((_DWORD *)result + 3), a7);
        *unsigned int v7 = result;
      }

      else
      {
        *a7 = 8;
      }

      break;
    case 0x110001:
      *((_DWORD *)result + 3) = a4;
      break;
    case 0x110000:
      *((_DWORD *)result + 2) = a4;
      break;
  }

  return result;
}

uint64_t u_strToPunycode(_WORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int *a6)
{
  uint64_t v64 = *MEMORY[0x1895F89C0];
  if (!a6 || *a6 > 0) {
    return 0LL;
  }
  if (!a1 || (uint64_t v8 = a2, (int)a2 < -1) || !a3 && a4)
  {
    int v12 = 1;
LABEL_8:
    *a6 = v12;
    return 0LL;
  }

  if ((int)a2 >= 1001)
  {
LABEL_11:
    int v12 = 31;
    goto LABEL_8;
  }

  bzero(v63, 0xFA0uLL);
  if ((_DWORD)v8 == -1)
  {
    LOWORD(v24) = *a1;
    if (*a1)
    {
      uint64_t v14 = 0LL;
      uint64_t v25 = 0LL;
      int v26 = 0;
      uint64_t v16 = 0LL;
      while (v26 < 1000)
      {
        int v24 = (unsigned __int16)v24;
        if ((unsigned __int16)v24 > 0x7Fu)
        {
          if (a5) {
            int v32 = (*(_BYTE *)(a5 + v25) != 0) << 31;
          }
          else {
            int v32 = 0;
          }
          if ((v24 & 0xF800) == 0xD800)
          {
            if ((v24 & 0xFC00) != 0xD800 || (++v26, int v33 = (unsigned __int16)a1[v26], (v33 & 0xFC00) != 0xDC00))
            {
LABEL_130:
              int v12 = 10;
              goto LABEL_8;
            }

            int v24 = ((unsigned __int16)v24 << 10) - 56613888 + v33;
          }

          v63[v14] = v24 | v32;
        }

        else
        {
          v63[v14] = 0;
          if ((int)v16 < a4)
          {
            if (a5)
            {
              int v27 = *(unsigned __int8 *)(a5 + v25);
              BOOL v28 = v27 == 0;
              if (v27) {
                char v29 = -97;
              }
              else {
                char v29 = -65;
              }
              if (v28) {
                char v30 = 32;
              }
              else {
                char v30 = -32;
              }
              else {
                char v31 = v30;
              }
              LOBYTE(v24) = v31 + v24;
            }

            *(_WORD *)(a3 + 2LL * (int)v16) = (char)v24;
          }

          uint64_t v16 = (v16 + 1);
        }

        ++v14;
        uint64_t v25 = ++v26;
        LOWORD(v24) = a1[v26];
        if (!(_WORD)v24)
        {
LABEL_71:
          uint64_t v8 = v16;
          if ((int)v16 >= 1)
          {
            uint64_t v8 = (v16 + 1);
          }

          int v34 = 0;
          int v35 = 128;
          int v36 = 72;
          int v37 = v16;
          while (1)
          {
            int v38 = 0x7FFFFFFF;
            if ((_DWORD)v14)
            {
              int v39 = v63;
              uint64_t v40 = v14;
              do
              {
                int v41 = *v39++;
                int v42 = v41 & 0x7FFFFFFF;
                if ((v41 & 0x7FFFFFFF) < v38 && v35 <= v42) {
                  int v38 = v42;
                }
                --v40;
              }

              while (v40);
            }

            int v44 = v38 - v35;
            if (v44 > ((v34 + v37) ^ 0x7FFFFFFF) / (v37 + 1)) {
              break;
            }
            int v45 = v34 + v44 * (v37 + 1);
            if ((_DWORD)v14)
            {
              uint64_t v46 = 0LL;
              do
              {
                int v47 = v63[v46];
                if ((v47 & 0x7FFFFFFF) >= v38)
                {
                  if ((v47 & 0x7FFFFFFF) == v38)
                  {
                    int v48 = 36 - v36;
                    if (v36 <= 10) {
                      int v48 = 26;
                    }
                    if (v36 > 35) {
                      int v49 = 1;
                    }
                    else {
                      int v49 = v48;
                    }
                    if (v45 >= v49)
                    {
                      uint64_t v8 = (int)v8;
                      int v51 = 46;
                      int v50 = v45;
                      do
                      {
                        int v52 = v50 - v49;
                        int v50 = (v50 - v49) / (36 - v49);
                        if (v8 < a4)
                        {
                          int v53 = v52 - v50 * (36 - v49) + v49;
                          if (v53 >= 26) {
                            char v54 = 22;
                          }
                          else {
                            char v54 = 97;
                          }
                          *(_WORD *)(a3 + 2 * icu::LocaleBuilder::setVariant((uint64_t)this, v7, v8) = (char)(v54 + v53);
                        }

                        ++v8;
                        if (v51 >= v36) {
                          int v55 = 26;
                        }
                        else {
                          int v55 = v51 - v36 + 26;
                        }
                        if (v51 - v36 + 26 < 1) {
                          int v49 = 1;
                        }
                        else {
                          int v49 = v55;
                        }
                        v51 += 36;
                      }

                      while (v50 >= v49);
                    }

                    else
                    {
                      int v50 = v45;
                    }

                    if ((int)v8 < a4)
                    {
                      if (v50 > 25)
                      {
                        char v56 = v50 + 22;
                      }

                      else if (v47 < 0)
                      {
                        char v56 = v50 + 65;
                      }

                      else
                      {
                        char v56 = v50 + 97;
                      }

                      *(_WORD *)(a3 + 2LL * (int)icu::LocaleBuilder::setVariant((uint64_t)this, v7, v8) = v56;
                    }

                    int v57 = v37 + 1;
                    if (v37 == (_DWORD)v16) {
                      int v58 = 700;
                    }
                    else {
                      int v58 = 2;
                    }
                    signed int v59 = v45 / v58 / v57 + v45 / v58;
                    if (v59 < 456)
                    {
                      int v60 = 0;
                    }

                    else
                    {
                      int v60 = 0;
                      unsigned int v61 = v59;
                      do
                      {
                        signed int v59 = v61 / 0x23;
                        v60 += 36;
                        unsigned int v62 = v61 >> 3;
                        v61 /= 0x23u;
                      }

                      while (v62 > 0x7CA);
                    }

                    int v45 = 0;
                    uint64_t v8 = (v8 + 1);
                    int v36 = 36 * v59 / (v59 + 38) + v60;
                    int v37 = v57;
                  }
                }

                else
                {
                  ++v45;
                }

                ++v46;
              }

              while (v46 != v14);
            }

            int v34 = v45 + 1;
            int v35 = v38 + 1;
          }

          int v12 = 5;
          goto LABEL_8;
        }
      }

      goto LABEL_11;
    }

    uint64_t v8 = 0LL;
  }

  else if ((_DWORD)v8)
  {
    uint64_t v14 = 0LL;
    LODWORD(v15) = 0;
    uint64_t v16 = 0LL;
    while (1)
    {
      unsigned int v17 = (unsigned __int16)a1[(int)v15];
      if (v17 > 0x7F)
      {
        if (a5) {
          int v21 = (*(_BYTE *)(a5 + (int)v15) != 0) << 31;
        }
        else {
          int v21 = 0;
        }
        if ((v17 & 0xF800) == 0xD800)
        {
          uint64_t v15 = (int)v15 + 1LL;
          int v23 = (unsigned __int16)a1[v15];
          if ((v23 & 0xFC00) != 0xDC00) {
            goto LABEL_130;
          }
          unsigned int v17 = (v17 << 10) - 56613888 + v23;
        }

        v63[v14] = v17 | v21;
      }

      else
      {
        v63[v14] = 0;
        if ((int)v16 < a4)
        {
          if (a5)
          {
            else {
              char v18 = -65;
            }
            else {
              char v19 = 32;
            }
            else {
              char v20 = v19;
            }
            LOBYTE(v17) = v20 + v17;
          }

          *(_WORD *)(a3 + 2LL * (int)v16) = (char)v17;
        }

        uint64_t v16 = (v16 + 1);
      }

      ++v14;
      LODWORD(v15) = v15 + 1;
    }
  }

  return u_terminateUChars(a3, a4, v8, a6);
}

uint64_t u_strFromPunycode(UChar *s, unint64_t a2, uint64_t a3, int a4, uint64_t a5, int *a6)
{
  if (!a6 || *a6 > 0) {
    return 0LL;
  }
  if (!s || (unint64_t v8 = a2, (int)a2 < -1) || !a3 && a4)
  {
    int v12 = 1;
LABEL_8:
    *a6 = v12;
    return 0LL;
  }

  if ((_DWORD)a2 == -1) {
    unint64_t v8 = u_strlen(s);
  }
  if ((int)v8 >= 2001)
  {
    int v12 = 31;
    goto LABEL_8;
  }

  if ((int)v8 < 1)
  {
    int v20 = 0;
    unint64_t v15 = v8;
  }

  else
  {
    unint64_t v14 = v8;
    do
    {
      unint64_t v15 = v14 - 1;
      if (v14 < 2) {
        break;
      }
      int v16 = s[--v14];
    }

    while (v16 != 45);
    if ((int)v15 >= 1)
    {
      uint64_t v17 = v15;
      while (1)
      {
        uint64_t v18 = v17 - 1;
        unsigned int v19 = s[(v17 - 1)];
        if (v19 >= 0x80) {
          break;
        }
        if (v17 <= a4)
        {
          *(_WORD *)(a3 + 2LL * (v17 - 1)) = v19;
          if (a5) {
            *(_BYTE *)(a5 + (v17 - 1)) = v19 - 65 < 0x1A;
          }
        }

        --v17;
        if ((unint64_t)(v18 + 1) <= 1)
        {
          int v20 = v15 + 1;
          goto LABEL_28;
        }
      }

LABEL_104:
      int v12 = 10;
      goto LABEL_8;
    }

    int v20 = 0;
  }

  uint64_t v17 = *a9;
  LODWORD(v20) = a6;
LABEL_105:
  __int16 v50 = (const unsigned __int8 *)(v20 - v19);
  if (v17 <= 0 && (int)v50 >= 1) {
    return (uint64_t)icu::ByteSinkUtil::appendNonEmptyUnchanged( (_DWORD *)(a3 + v19),  v50,  a7,  (icu::ByteSink *)a2,  a8,  v16);
  }
  return result;
}

        unsigned int v23 = 0;
        int v24 = 0;
        else {
          int v29 = 3;
        }
        goto LABEL_127;
    }

    while (1)
    {
      --v34;
      if (*(_BYTE *)(a1 + 64)) {
        break;
      }
      if (v34 > 0xF) {
        goto LABEL_110;
      }
      int v36 = (*(void *)(a1 + 48) >> v35) & 0xFLL;
LABEL_121:
      if ((_DWORD)v36 != 9) {
        goto LABEL_110;
      }
      unsigned int v23 = 0;
      v35 -= 4;
      int v29 = 3;
      int v24 = 1;
    }

    if ((v34 & 0x80000000) == 0 && *(_DWORD *)(a1 + 16) > (signed int)v34)
    {
      LODWORD(v36) = *(unsigned __int8 *)(*(void *)(a1 + 48) + v34);
      goto LABEL_121;
    }

    unsigned int v7 = 0LL;
    int v16 = 27LL;
    *a6 = 27;
    goto LABEL_105;
  }

  uint64_t v45 = icu::UMemory::operator new(v44, (icu::UMemory *)0x28, v38);
  if (!v45) {
    goto LABEL_104;
  }
  uint64_t v46 = (icu::DateTimeRule *)v45;
  icu::DateTimeRule::DateTimeRule((uint64_t)v45, v39, v43, v58, 0);
LABEL_102:
  uint64_t v51 = (icu::AnnualTimeZoneRule *)icu::UMemory::operator new(v48, (icu::UMemory *)0x60, v47);
  unsigned int v7 = v51;
  if (v51) {
    icu::AnnualTimeZoneRule::AnnualTimeZoneRule(v51, a1, a2, a3, v46, v60[1], v57);
  }
LABEL_105:
  icu::UnicodeString::~UnicodeString((void *)v16, (icu::UnicodeString *)v73);
  return v7;
}

LABEL_100:
      int v24 = 36 * v39 / (v39 + 38) + v40;
      int v21 = v43 + 1;
      LODWORD(v15) = v46;
      return u_terminateUChars(a3, a4, v46, a6);
    }
  }

  uint64_t v46 = v15;
  return u_terminateUChars(a3, a4, v46, a6);
}

  sub_18086E18C((uint64_t)&v84, 1);
  sub_18086E18C((uint64_t)&v75, 1);
  int v54 = strlen(__dst);
  if (*a9 <= 0)
  {
    uint64_t v55 = v54;
    uint64_t v57 = uprv_min(v54, v23);
    char v56 = (uint64_t)v59;
    if (v57 >= 1) {
      strncpy(v59, __dst, v57);
    }
    if (!(_DWORD)v55) {
      *a9 = 2;
    }
  }

  else
  {
    uint64_t v55 = 0LL;
    char v56 = (uint64_t)v59;
    *unsigned int v59 = 0;
  }

  int v25 = u_terminateChars(v56, v23, v55, a9);
LABEL_107:
  if (BYTE4(__s1[1])) {
    uprv_free(__s1[0]);
  }
  if (BYTE4(v97[1])) {
    uprv_free(v97[0]);
  }
  return v25;
}

    if (subchar < 0)
    {
LABEL_142:
      unint64_t v8 = 0LL;
      int v21 = U_INVALID_CHAR_FOUND;
      goto LABEL_26;
    }

    utf8_nextCharSafeBody((const uint8_t *)v11, &pi, v10, v52, -1);
    ++v26;
    *v20++ = subchar;
LABEL_106:
    LODWORD(v44) = pi;
    if (pi >= v10 || v20 >= v19)
    {
LABEL_111:
      uint64_t v46 = 0;
      goto LABEL_112;
    }
  }

  *int v20 = (subchar >> 10) - 10304;
  if (v20 + 1 < v19)
  {
    v20[1] = subchar & 0x3FF | 0xDC00;
    v20 += 2;
    goto LABEL_106;
  }

  LODWORD(v44) = pi;
  ++v20;
  uint64_t v46 = 1;
LABEL_112:
  while ((int)v44 < v10)
  {
    int v62 = v44;
    while (1)
    {
      int v63 = v62;
      unsigned int v44 = v62 + 1LL;
      pint i = v62 + 1;
      unsigned int v64 = v11[v62];
      if ((v64 & 0x80000000) == 0) {
        break;
      }
      uint64_t v65 = v64;
      if (v64 < 0xE0u)
      {
        uint64_t v69 = v64 >= 0xC0u && (int)v44 < v10;
        if (!v69 || v11[v44] >= -64)
        {
LABEL_133:
          utf8_nextCharSafeBody((const uint8_t *)v11, &pi, v10, v65, -1);
          ++v26;
          LODWORD(v44) = pi;
          break;
        }

        int v68 = 2;
      }

      else
      {
        int v66 = v63 + 2;
        int v67 = v65 <= 0xEF && (int)v66 < v10;
        if (!v67 || v11[v44] > -65 || v11[v66] > -65) {
          goto LABEL_133;
        }
        int v68 = 3;
      }

      int v62 = v63 + v68;
      ++v46;
      pint i = v63 + v68;
    }

    ++v46;
  }

        if (!icu::ResourceTable::getKeyAndValue( (icu::ResourceTable *)v69,  ++v25,  (const char **)&__s1,  a3)) {
          goto LABEL_60;
        }
      }

      uint64_t v75 = v32;
      uint64_t v79 = 0LL;
      uint64_t v77 = 0u;
      uint64_t v78 = 0u;
      (*(void (**)(__int128 *__return_ptr, icu::ResourceValue *, int *))(*(void *)a3 + 88LL))(&v77, a3, v5);
      if (*v5 > 0
        || !icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)&v77, 0, (const char **)&v75, a3))
      {
        goto LABEL_100;
      }

      int v48 = 1;
      while (1)
      {
        if (!(*(unsigned int (**)(icu::ResourceValue *))(*(void *)a3 + 24LL))(a3))
        {
          __int16 v50 = v75;
          if (!strcmp(v75, "-2"))
          {
            uint64_t v51 = 0LL;
            goto LABEL_117;
          }

          if (!strcmp(v50, "-1"))
          {
            uint64_t v51 = 1LL;
            goto LABEL_117;
          }

          if (!strcmp(v50, "0"))
          {
            uint64_t v51 = 2LL;
            goto LABEL_117;
          }

          if (!strcmp(v50, "1"))
          {
            uint64_t v51 = 3LL;
LABEL_117:
            int v52 = *(_DWORD *)(a1 + 16);
            if (sub_180970494(v52) == 7 && !strcmp(v50, "0"))
            {
              BOOL v53 = *(void *)(a1 + 24);
              int v54 = *(_DWORD *)(a1 + 12);
              if (*(unsigned __int16 *)(v53 + 5760LL * v54 + 4576) <= 0x1Fu)
              {
                uint64_t v55 = (UChar **)(v53 + 5760LL * v54 + 4568);
                LODWORD(v74) = 0;
                v72[0] = (*(uint64_t (**)(icu::ResourceValue *, icu::StandardPlural **, int *))(*(void *)a3 + 32LL))( a3,  &v74,  v5);
                icu::UnicodeString::UnicodeString(v80, 1LL, v72);
                v65[3] = v72[0];
                icu::UnicodeString::fastCopyFrom(v55, v80);
                icu::UnicodeString::~UnicodeString(v56, (icu::UnicodeString *)v80);
                int v52 = *(_DWORD *)(a1 + 16);
              }
            }

            uint64_t v57 = sub_180970470(v52);
            if ((v57 & 0x80000000) == 0)
            {
              int v58 = *(void *)(a1 + 24);
              unsigned int v59 = *(_DWORD *)(a1 + 12);
              if (*(unsigned __int16 *)(v58 + 5760LL * v59 + 384LL * v57 + (v51 << 6) + 32) <= 0x1Fu)
              {
                int v60 = (UChar **)(v58 + 5760LL * v59 + 384LL * v57 + (v51 << 6) + 24);
                LODWORD(v74) = 0;
                v72[0] = (*(uint64_t (**)(icu::ResourceValue *, icu::StandardPlural **, int *))(*(void *)a3 + 32LL))( a3,  &v74,  v5);
                icu::UnicodeString::UnicodeString(v80, 1LL, v72);
                v65[2] = v72[0];
                icu::UnicodeString::fastCopyFrom(v60, v80);
                icu::UnicodeString::~UnicodeString(v61, (icu::UnicodeString *)v80);
              }
            }

            goto LABEL_105;
          }

          if (!strcmp(v50, "2"))
          {
            uint64_t v51 = 4LL;
            goto LABEL_117;
          }
        }

double uprv_getUTCtime()
{
  v1.tv_sec = 0LL;
  *(void *)&v1.tv_usec = 0LL;
  gettimeofday(&v1, 0LL);
  return (double)(1000 * v1.tv_sec + v1.tv_usec / 1000);
}

double uprv_getRawUTCtime()
{
  v1.tv_sec = 0LL;
  *(void *)&v1.tv_usec = 0LL;
  gettimeofday(&v1, 0LL);
  return (double)(1000 * v1.tv_sec + v1.tv_usec / 1000);
}

BOOL uprv_isNaN(double a1)
{
  return (*(void *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000LL;
}

BOOL uprv_isInfinite(double a1)
{
  return (*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000LL;
}

BOOL uprv_isPositiveInfinity(double a1)
{
  return a1 > 0.0 && (*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000LL;
}

BOOL uprv_isNegativeInfinity(double a1)
{
  return a1 < 0.0 && (*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000LL;
}

double uprv_getNaN()
{
  return NAN;
}

double uprv_getInfinity()
{
  return INFINITY;
}

double uprv_floor(double a1)
{
  return floor(a1);
}

double uprv_ceil(double a1)
{
  return ceil(a1);
}

double uprv_round(double a1)
{
  return floor(a1 + 0.5);
}

double uprv_fabs(double a1)
{
  return fabs(a1);
}

double uprv_pow10(int a1)
{
  return __exp10((double)a1);
}

double uprv_fmax(double a1, double a2)
{
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001LL
    || (*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001LL)
  {
    return NAN;
  }

  if (((*(void *)&a1 & 0x8000000000000000LL) == 0 || a1 != 0.0 || a2 != 0.0) && a1 > a2) {
    return a1;
  }
  return a2;
}

double uprv_fmin(double a1, double a2)
{
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001LL
    || (*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001LL)
  {
    return NAN;
  }

  if ((a1 != 0.0 || a2 != 0.0 || (*(void *)&a2 & 0x8000000000000000LL) == 0) && a1 <= a2) {
    return a1;
  }
  return a2;
}

BOOL uprv_add32_overflow(int a1, int a2, _DWORD *a3)
{
  int v3 = a1 + a2;
  BOOL result = __OFADD__(a1, a2);
  *a3 = v3;
  return result;
}

BOOL uprv_mul32_overflow(int a1, int a2, _DWORD *a3)
{
  uint64_t v3 = a2 * (uint64_t)a1;
  *a3 = v3;
  return v3 != (int)v3;
}

double uprv_trunc(double a1)
{
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000LL) {
    return NAN;
  }
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000LL) {
    return INFINITY;
  }
  if ((*(void *)&a1 & 0x8000000000000000LL) != 0) {
    return ceil(a1);
  }
  return floor(a1);
}

double uprv_maxMantissa()
{
  return 1.80143985e16;
}

uint64_t uprv_maximumPtr(unint64_t a1)
{
  if (a1 >= 0xFFFFFFFF80000001LL) {
    return -1LL;
  }
  else {
    return a1 + 0x7FFFFFFF;
  }
}

uint64_t uprv_timezone()
{
  return *MEMORY[0x1895FD410];
}

void uprv_tzname_clear_cache()
{
  qword_18C448A50 = 0LL;
}

const char *uprv_tzname(int a1)
{
  uint64_t v2 = getenv("TZ");
  unsigned int v23 = v2;
  if (v2)
  {
    uint64_t v3 = v2;
    if (sub_1807F4228(v2))
    {
      if (*v3 == 58) {
        unsigned int v23 = v3 + 1;
      }
      sub_1807F4304((const char **)&v23);
      return v23;
    }
  }

  uint64_t v4 = qword_18C448A50;
  if (qword_18C448A50) {
    return (const char *)v4;
  }
  if (!realpath("/var/db/timezone/localtime", (char *)&qword_18C448A58)
    || (qword_18C448A58 == 0x2F62642F7261762FLL ? (BOOL v5 = unk_18C448A60 == 0x656E6F7A656D6974LL) : (BOOL v5 = 0),
        v5 ? (BOOL v6 = qword_18C448A68 == 0x69746C61636F6C2FLL) : (BOOL v6 = 0),
        v6 ? (BOOL v7 = *(uint64_t *)((char *)&qword_18C448A68 + 3) == 0x656D69746C6163LL) : (BOOL v7 = 0),
        v7))
  {
    int v11 = uprv_malloc(0x20uLL);
    if (v11)
    {
      int v12 = v11;
      v11[7] = 0;
      *((void *)v11 + 1) = 0LL;
      *((void *)v11 + 2) = 0LL;
      *(void *)int v11 = 0LL;
      *((_BYTE *)v11 + 24) = 0;
      qword_18C448A50 = sub_1807F435C("/var/db/timezone/zoneinfo/", (uint64_t)v11);
      if (*(void *)v12) {
        uprv_free(*(void **)v12);
      }
      uint64_t v13 = (FILE *)*((void *)v12 + 2);
      if (v13) {
        fclose(v13);
      }
      uprv_free(v12);
    }

    uint64_t v4 = qword_18C448A50;
  }

  else
  {
    unint64_t v8 = strstr((const char *)&qword_18C448A58, "/zoneinfo/");
    size_t v9 = v8;
    if (v8 && strcmp(v8 + 10, "posixrules")) {
      goto LABEL_47;
    }
    ssize_t v10 = readlink("/var/db/timezone/localtime", (char *)&qword_18C448A58, 0x3FFuLL);
    if (v10 >= 1)
    {
      *((_BYTE *)&qword_18C448A58 + icu::LocaleBuilder::setRegion((uint64_t)this, v9, v10) = 0;
      size_t v9 = strstr((const char *)&qword_18C448A58, "/zoneinfo/");
    }

    if (v9)
    {
LABEL_47:
      *(void *)&v22.tm_sec = v9 + 10;
      sub_1807F4304((const char **)&v22);
      uint64_t v4 = *(void *)&v22.tm_sec;
      if (sub_1807F4228(*(char **)&v22.tm_sec))
      {
        qword_18C448A50 = v4;
        return (const char *)v4;
      }
    }
  }

  memset(&v22, 0, sizeof(v22));
  memset(&v21, 0, sizeof(v21));
  localtime_r(&qword_1809F2100, &v22);
  localtime_r(&qword_1809F2108, &v21);
  uint64_t v14 = 0LL;
  if (v21.tm_isdst <= 0) {
    int v15 = v22.tm_isdst > 0;
  }
  else {
    int v15 = 2;
  }
  uint64_t v16 = MEMORY[0x1895FD438];
  uint64_t v17 = (const char *)*MEMORY[0x1895FD438];
  uint64_t v18 = *(const char **)(MEMORY[0x1895FD438] + 8LL);
  int v19 = *MEMORY[0x1895FD410];
  while (dword_18970F460[v14] != v19
       || dword_18970F460[v14 + 1] != v15
       || strcmp(*(const char **)&dword_18970F460[v14 + 2], v17)
       || strcmp(*(const char **)&dword_18970F460[v14 + 4], v18))
  {
    v14 += 8LL;
    if (v14 == 472) {
      return *(const char **)(v16 + 8LL * a1);
    }
  }

  return *(const char **)&dword_18970F460[v14 + 6];
}

BOOL sub_1807F4228(char *__s1)
{
  int v2 = *__s1;
  if (*__s1)
  {
    unint64_t v3 = 0LL;
    while (v2 != 44 && (v2 - 48) >= 0xA)
    {
      int v4 = v3 + 1;
      int v2 = __s1[++v3];
      if (!v2)
      {
        LODWORD(v3) = v4;
        break;
      }
    }
  }

  else
  {
    LODWORD(v3) = 0;
  }

  unint64_t v5 = (v3 + 2);
  unint64_t v3 = v3;
  do
    int v6 = __s1[v3];
  while ((v6 - 48) <= 9 && v3++ < v5);
  return !v6
      || !strcmp(__s1, "PST8PDT")
      || !strcmp(__s1, "MST7MDT")
      || !strcmp(__s1, "CST6CDT")
      || strcmp(__s1, "EST5EDT") == 0;
}

uint64_t sub_1807F4304(const char **a1)
{
  int v2 = *a1;
  uint64_t result = strncmp(*a1, "posix/", 6uLL);
  if (!(_DWORD)result || (uint64_t result = strncmp(v2, "right/", 6uLL), !(_DWORD)result)) {
    *a1 = v2 + 6;
  }
  return result;
}

uint64_t sub_1807F435C(const char *a1, uint64_t a2)
{
  __ptr[65] = *(const char **)MEMORY[0x1895F89C0];
  UErrorCode v29 = U_ZERO_ERROR;
  memset(&v33[1], 0, 48);
  *(void *)int v34 = 0LL;
  v33[0] = (char *)&v33[1] + 5;
  LODWORD(v33[1]) = 40;
  icu::CharString::append((icu::CharString *)v33, a1, -1, &v29);
  uint64_t v4 = 0LL;
  if (v29 <= U_ZERO_ERROR)
  {
    unint64_t v5 = opendir(a1);
    if (!v5)
    {
      uint64_t v4 = 0LL;
      goto LABEL_49;
    }

    BOOL v7 = v5;
    if (!qword_18C534DE8)
    {
      unint64_t v8 = icu::UMemory::operator new(0LL, (icu::UMemory *)0x40, v6);
      if (!v8)
      {
        uint64_t v4 = 0LL;
        qword_18C534DE8 = 0LL;
LABEL_48:
        closedir(v7);
        goto LABEL_49;
      }

      *unint64_t v8 = (uint64_t)v8 + 13;
      *((_DWORD *)v8 + 2) = 40;
      *((_WORD *)v8 + 6) = 0;
      *((_DWORD *)v8 + 14) = 0;
      qword_18C534DE8 = (uint64_t)v8;
      sub_180820C94(0x19u, (uint64_t)sub_1807F4864);
    }

    size_t v9 = readdir(v7);
    uint64_t v4 = 0LL;
    if (v9)
    {
      ssize_t v10 = (char *)&__filename[1] + 5;
      while (1)
      {
        d_name = v9->d_name;
        if (!strcmp(v9->d_name, ".")
          || !strcmp(d_name, "..")
          || !strcmp("posixrules", d_name)
          || !strcmp("localtime", d_name))
        {
          goto LABEL_17;
        }

        int v32 = 0;
        memset(&__filename[1], 0, 48);
        __filename[0] = v10;
        LODWORD(__filename[1]) = 40;
        int v31 = 0;
        icu::CharString::append((icu::CharString *)__filename, v33[0], v34[0], &v29);
        icu::CharString::append((icu::CharString *)__filename, d_name, -1, &v29);
        if (v29 > U_ZERO_ERROR)
        {
LABEL_13:
          int v12 = 0;
          goto LABEL_14;
        }

        uint64_t v13 = opendir(__filename[0]);
        if (v13) {
          break;
        }
        uint64_t v14 = __filename[0];
        if (!*(void *)(a2 + 16)) {
          *(void *)(a2 + 16) = fopen("/var/db/timezone/localtime", "r");
        }
        int v15 = fopen(v14, "r");
        *(_DWORD *)(a2 + 28) = 0;
        __stream = v15;
        if (!v15) {
          goto LABEL_45;
        }
        int v27 = v10;
        uint64_t v16 = *(FILE **)(a2 + 16);
        if (!v16) {
          goto LABEL_44;
        }
        if (!*(void *)(a2 + 8))
        {
          fseek(v16, 0LL, 2);
          *(void *)(a2 + 8) = MEMORY[0x186E029C0](*(void *)(a2 + 16));
        }

        fseek(__stream, 0LL, 2);
        uint64_t v17 = MEMORY[0x186E029C0](__stream);
        if (v17 != *(void *)(a2 + 8)) {
          goto LABEL_44;
        }
        uint64_t v18 = v17;
        if (!*(void *)a2)
        {
          rewind(*(FILE **)(a2 + 16));
          int v19 = uprv_malloc(*(void *)(a2 + 8));
          *(void *)a2 = v19;
          fread(v19, 1uLL, *(void *)(a2 + 8), *(FILE **)(a2 + 16));
        }

        rewind(__stream);
        if (v18 >= 1)
        {
          while (1)
          {
            memset(&__ptr[4], 0, 480);
            size_t v20 = v18 >= 512 ? 512LL : v18;
            memset(__ptr, 0, 32);
            int v21 = fread(__ptr, 1uLL, v20, __stream);
            uint64_t v22 = *(int *)(a2 + 28);
            *(_DWORD *)(a2 + 28) = v22 + v21;
            BOOL v23 = v18 <= v21;
            v18 -= v21;
            if (v23) {
              goto LABEL_39;
            }
          }

LABEL_39:
        fclose(__stream);
        int v24 = v31;
        if (v31 >= 26) {
          int v24 = 26;
        }
        __ptr[0] = &__filename[0][v24];
        sub_1807F4304(__ptr);
        int v25 = (icu::CharString *)qword_18C534DE8;
        *(_DWORD *)(qword_18C534DE8 + 56) = 0;
        **(_BYTE **)int v25 = 0;
        icu::CharString::append(v25, __ptr[0], -1, &v29);
        if (v29 <= U_ZERO_ERROR) {
          uint64_t v4 = *(void *)qword_18C534DE8;
        }
        int v12 = 0;
        ssize_t v10 = v27;
LABEL_14:
        if (BYTE4(__filename[1])) {
          uprv_free(__filename[0]);
        }
        if (!v12) {
          goto LABEL_48;
        }
LABEL_17:
        size_t v9 = readdir(v7);
        if (!v9) {
          goto LABEL_48;
        }
      }

      closedir(v13);
      icu::CharString::append((icu::CharString *)__filename, 47, &v29);
      if (v29 > U_ZERO_ERROR) {
        goto LABEL_13;
      }
      uint64_t v4 = sub_1807F435C(__filename[0], a2);
      if (v4) {
        goto LABEL_13;
      }
      goto LABEL_45;
    }

    goto LABEL_48;
  }

  *((_DWORD *)a2 + 4) = v11;
LABEL_67:
  if (v15 || v16 < v11)
  {
    char v56 = *((unsigned __int8 *)a2 + 36) + v15;
    if (v16 >= *((_DWORD *)a2 + 8))
    {
      if (v16 < a5) {
        return memset((void *)(v7 + v16), v56, (~v16 + a5) + 1LL);
      }
    }

    else
    {
      return sub_180813E84(v14, v16, a5, v56);
    }
  }

  return result;
}

  *a2 = 12;
  uint64_t v14 = v11;
LABEL_40:
  *(_BYTE *)(v7 + 64) = v14;
LABEL_41:
  a1[2] = v4;
  return 0xFFFFLL;
}

    LOBYTE(v13) = 0;
    else {
      LOBYTE(v15) = 3;
    }
    BOOL v23 = 1;
LABEL_46:
    if (v23 < (char)v15)
    {
      uint64_t result = 1LL;
      LOBYTE(v35) = v23;
      int v24 = (unint64_t)v7;
      while (v24 < a2[3])
      {
        int v36 = *(unsigned __int8 *)v24;
        if ((char)v15 < 3 || v35 >= 2u)
        {
        }

        else
        {
          if (v15 == 3)
          {
            int v37 = a00000000000000[v14 & 0xF];
            int v38 = v36 >> 5;
          }

          else
          {
            int v37 = byte_180A266EE[v36 >> 4];
            LOBYTE(v38) = v14 & 7;
          }

          if ((v37 & (1 << v38)) == 0)
          {
LABEL_62:
            BOOL v23 = v35;
            BOOL v7 = (_BYTE *)v24;
            goto LABEL_63;
          }
        }

        int v35 = (char)(v35 + 1);
        ++v24;
        LODWORD(icu::LocaleBuilder::setLanguage((uint64_t)this, v13, v14) = v36 + ((_DWORD)v14 << 6);
      }

      signed int v39 = (char)v13;
      if ((char)v13 >= (char)v35)
      {
        unsigned int v41 = (_BYTE *)(v24 + (char)v13 - (uint64_t)(char)v35);
      }

      else
      {
        do
        {
          int v40 = v39 + 1;
          *(_BYTE *)(v8 + 65 + v39) = v7[v39 - v23];
          signed int v39 = v40;
        }

        while (v40 < (char)v35);
        unsigned int v41 = &v7[v40 - v23];
      }

      *(_BYTE *)(v8 + 64) = v35;
      *(_DWORD *)(v8 + 72) = v14;
      *(_DWORD *)(v8 + 76) = (char)v15;
      a2[2] = v41;
      goto LABEL_114;
    }

      if (strchr(__s, 95))
      {
        memset(&v30[1], 0, 56);
        v30[0] = (char *)&v30[1] + 5;
        LODWORD(v30[1]) = 40;
        v27[0] = 0LL;
        v27[1] = 0LL;
        icu::CharStringByteSink::CharStringByteSink(v27, (uint64_t)v30);
        ulocimp_getParent(a1, (uint64_t)v27, a4);
        icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v27);
        *a4 = -128;
        uint64_t v4 = ucurr_forLocale(v30[0], a2, a3, a4);
        if (BYTE4(v30[1])) {
          uprv_free(v30[0]);
        }
        goto LABEL_50;
      }

  if (v28 <= 1)
  {
    int v27 = sub_180846CE4(v10, (uint64_t)v89[0], v9, (uint64_t)a2, (uint64_t)a3, a4, a5, &v81, (int *)a6);
    if (v27) {
      goto LABEL_81;
    }
    if (*(int *)a6 <= 0)
    {
      int v27 = 0LL;
      uint64_t v28 = dword_18C534948;
      goto LABEL_43;
    }

          ssize_t v10 = v20;
          goto LABEL_40;
        }

  uint64_t v17 = uhash_get(qword_18C4493B8, (uint64_t)v7);
  if (v17)
  {
    uint64_t v18 = (char *)v17;
    sub_1808737E4(v7);
    BOOL v7 = v18;
    goto LABEL_10;
  }

  int v19 = U_ZERO_ERROR;
  uhash_put(qword_18C4493B8, (uint64_t)v7, (uint64_t)v7, (int *)&v19);
  if (v19 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    *a3 = v19;
    sub_1808737E4(v7);
    return 0LL;
  }

  do
  {
LABEL_10:
    uint64_t result = v7;
    BOOL v7 = (char *)*((void *)v7 + 3);
  }

  while (v7);
  unint64_t v8 = *((_DWORD *)result + 28);
  ++*((_DWORD *)result + 27);
  return result;
}

      if (v16 < 0x10000) {
        int v25 = 1;
      }
      else {
        int v25 = 2;
      }
      uint64_t v14 = (v12 + v25);
LABEL_43:
      if ((int)v14 >= v11)
      {
        LODWORD(icu::LocaleBuilder::setScript((uint64_t)this, v11, v12) = v14;
        a4 = v41;
        goto LABEL_78;
      }
    }

    if (icu::PatternProps::isWhiteSpace(v15))
    {
      if ((__int16)v48 < 0)
      {
        int v19 = DWORD1(v48);
      }

      else
      {
        int v19 = (unsigned __int16)v48 >> 5;
      }

      uint64_t v22 = v19 - 1;
      BOOL v23 = (char *)&v48 + 2;
      if ((v48 & 2) == 0) {
        BOOL v23 = (char *)v49;
      }
      if (*(_WORD *)&v23[2 * v22] == 32)
      {
LABEL_31:
        uint64_t v13 = 1;
        goto LABEL_39;
      }

      LOWORD(pErrorCode) = 32;
      icu::UnicodeString::doAppend((uint64_t)&v47, (uint64_t)&pErrorCode, 0, 1LL);
      int v24 = (unsigned __int16)v48 >> 5;
      if ((v48 & 0x8000u) != 0LL) {
        int v24 = DWORD1(v48);
      }
      int v21 = v24 <= v44;
      goto LABEL_35;
    }

    if (v16 != 125)
    {
      if (!icu::UnicodeSet::contains(v43, v16))
      {
        uint64_t v13 = 0;
        LODWORD(icu::LocaleBuilder::setScript((uint64_t)this, v11, v12) = v14 - 1;
        goto LABEL_39;
      }

      icu::UnicodeString::append((uint64_t)&v47, v16);
      size_t v20 = (unsigned __int16)v48 >> 5;
      if ((v48 & 0x8000u) != 0LL) {
        size_t v20 = DWORD1(v48);
      }
      int v21 = v20 <= v9;
LABEL_35:
      uint64_t v13 = v21;
      goto LABEL_39;
    }

    if ((__int16)v48 < 0)
    {
      int v26 = DWORD1(v48);
      if (SDWORD1(v48) > 0) {
        goto LABEL_53;
      }
    }

    else
    {
      if ((unsigned __int16)v48 < 0x20u)
      {
        int v26 = 0LL;
        goto LABEL_58;
      }

      LODWORD(v26) = (unsigned __int16)v48 >> 5;
LABEL_53:
      int v27 = v26 - 1;
      uint64_t v28 = (char *)v49;
      if ((v48 & 2) != 0) {
        uint64_t v28 = (char *)&v48 + 2;
      }
      if (*(_WORD *)&v28[2 * v27] == 32) {
        int v26 = v27;
      }
      else {
        int v26 = v26;
      }
    }

    icu::TimeZoneTransition::setTime((uint64_t)a4, v19);
    int v25 = (icu::TimeZoneRule *)(*((uint64_t (**)(UChar **))*v18 + 3))(v18);
    icu::TimeZoneTransition::adoptFrom(a4, v25);
    int v26 = (icu::TimeZoneRule *)(*((uint64_t (**)(UChar **))*v17 + 3))(v17);
    icu::TimeZoneTransition::adoptTo(a4, v26);
    unint64_t v8 = 1LL;
    goto LABEL_40;
  }

  return (*(uint64_t (**)(icu::TimeZoneTransition *, uint64_t, icu::TimeZoneTransition *, double))(*(void *)this[26] + 120LL))( this[26],  a3,  a4,  a2);
}

  if (BYTE4(v58[1])) {
    uprv_free(v58[0]);
  }
  if (v29) {
    ures_close(v29);
  }
  icu::Locale::~Locale((icu::Locale *)v52);
  if (!v30) {
    goto LABEL_19;
  }
  int v35 = icu::UMemory::operator new(v22, (icu::UMemory *)0x48, v34);
  int v36 = (uint64_t)v35;
  if (v35)
  {
    v35[1] = (uint64_t)off_18971B688;
    *((_WORD *)v35 + 8) = 2;
    icu::SimpleFormatter::applyPatternMinMaxArguments( (icu::SimpleFormatter *)v35,  (const icu::UnicodeString *)&v53,  2,  2,  1,  (UErrorCode *)a3);
  }

  sub_18096D61C(v37, v36);
  uint64_t v22 = (uint64_t *)*a3;
  icu::SharedObject::addRef(v37);
  int v11 = 0LL;
LABEL_20:
  icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v53);
  if (v11) {
    goto LABEL_13;
  }
LABEL_14:
  if (v7) {
    ures_close(v7);
  }
  return v8;
}

LABEL_40:
  if ((_DWORD)v13 == v7) {
    goto LABEL_77;
  }
  int v25 = (char)a4[v13];
  int v26 = a4[v13];
  if ((v25 & 0x80000000) == 0) {
    goto LABEL_76;
  }
  int v27 = v13 + 1LL;
  if ((_DWORD)v27 == v7) {
    goto LABEL_75;
  }
  if (v26 >= 0xE0)
  {
    if (v26 > 0xEF)
    {
      if (v26 > 0xF4) {
        goto LABEL_75;
      }
      int v40 = a4[v27];
      int v27 = v13 + 2LL;
      if ((_DWORD)v13 + 2 == v7) {
        goto LABEL_75;
      }
      UErrorCode v29 = a4[v27] ^ 0x80;
      if (v29 > 0x3F) {
        goto LABEL_75;
      }
      LODWORD(v28) = v40 & 0x3F | ((v26 - 240) << 6);
    }

    else
    {
      uint64_t v28 = v25 & 0xF;
      UErrorCode v29 = a4[v27] & 0x3F;
    }

    LODWORD(v27) = v27 + 1;
    if ((_DWORD)v27 != v7)
    {
      int v30 = v29 | ((_DWORD)v28 << 6);
      goto LABEL_62;
    }

    int v19 = v37 + 1;
  }

  BOOL v23 = *((_DWORD *)this + 91);
LABEL_83:
  int v52 = v108[0];
  BOOL v53 = *((unsigned __int16 *)v7 + 4);
  if ((v53 & 0x8000u) == 0) {
    int v54 = v53 >> 5;
  }
  else {
    int v54 = *((_DWORD *)v7 + 3);
  }
  if (v54 <= LODWORD(v108[0]))
  {
    unint64_t v6 = v95;
  }

  else
  {
    if ((v53 & 2) != 0) {
      uint64_t v55 = (char *)v7 + 10;
    }
    else {
      uint64_t v55 = (char *)*((void *)v7 + 3);
    }
    unint64_t v6 = v95;
    if (*(_WORD *)&v55[2 * SLODWORD(v108[0])] == 46
      && (*(unsigned int (**)(icu::SimpleDateFormat *, void, char *))(*(void *)this + 224LL))( this,  0LL,  (char *)v108 + 4))
    {
      char v56 = *((__int16 *)this + 180) < 0
      if (icu::SimpleDateFormat::isAfterNonNumericField(v20, v56)) {
        LODWORD(v108[0]) = ++v52;
      }
    }
  }

  uint64_t v57 = v107;
  if ((v107 & 0x80000000) == 0)
  {
    int v58 = sub_1808C32FC((icu::SimpleDateFormat *)((char *)this + 544), (int *)v108 + 1);
    if (icu::Calendar::isSet((uint64_t)v6, 0xAu) || icu::Calendar::isSet((uint64_t)v6, 0xBu))
    {
      if (icu::Calendar::isSet((uint64_t)v6, 0xBu))
      {
        unsigned int v59 = icu::Calendar::get(v6, 0xBu, (UErrorCode *)v108 + 1);
        if (!v59)
        {
LABEL_115:
          int v66 = v6;
          int v67 = 11;
          int v68 = v59;
          goto LABEL_116;
        }
      }

      else
      {
        int v60 = icu::Calendar::get(v6, 0xAu, (UErrorCode *)v108 + 1);
        if (v60) {
          unsigned int v59 = v60;
        }
        else {
          unsigned int v59 = 12;
        }
      }

      unsigned int v61 = icu::Calendar::get(v6, 0xCu, (UErrorCode *)v108 + 1);
      int v62 = sub_1808C351C(v58, v57, (int *)v108 + 1);
      if (SHIDWORD(v108[0]) <= 0)
      {
        if (v59 == 12) {
          int v63 = 0;
        }
        else {
          int v63 = v59;
        }
        unsigned int v64 = (double)v61 / 60.0 + (double)v63 - v62;
        uint64_t v65 = v64 >= -6.0 && v64 < 6.0;
        int v66 = v6;
        int v67 = 9;
        int v68 = !v65;
        goto LABEL_116;
      }
    }

    else
    {
      int v81 = sub_1808C351C(v58, v57, (int *)v108 + 1);
      if (SHIDWORD(v108[0]) <= 0)
      {
        else {
          uint64_t v82 = 30;
        }
        icu::Calendar::set(v6, 0xBu, (int)v81);
        int v66 = v6;
        int v67 = 12;
        int v68 = v82;
LABEL_116:
        icu::Calendar::set(v66, v67, v68);
      }
    }
  }

  *((_DWORD *)v96 + 2) = v52;
  uint64_t v4 = v96;
  uint64_t v69 = v104;
  if (v106 || v104)
  {
    if (!v106) {
      goto LABEL_125;
    }
    unsigned int v70 = (icu::Calendar *)(*(uint64_t (**)(icu::Calendar *))(*(void *)v6 + 24LL))(v6);
    if (!v70) {
      goto LABEL_135;
    }
    int v71 = v70;
    v72.n128_f64[0] = icu::Calendar::getTimeInMillis(v70, (UErrorCode *)v108 + 1);
    (*(void (**)(icu::Calendar *, __n128))(*(void *)v71 + 8LL))(v71, v72);
    uint64_t v69 = v104;
LABEL_125:
    if (v69)
    {
      int v73 = (*(uint64_t (**)(icu::Calendar *))(*(void *)v6 + 24LL))(v6);
      if (v73)
      {
        __int128 v74 = (icu::Calendar *)v73;
        uint64_t v75 = (const void *)icu::Calendar::getTimeZone(v6);
        {
          uint64_t v76 = v75;
        }

        else
        {
          uint64_t v76 = 0LL;
        }

        icu::Calendar::set(v74, 0xFu, 0);
        icu::Calendar::set(v74, 0x10u, 0);
        uint64_t v77 = icu::Calendar::getTimeInMillis(v74, (UErrorCode *)v108 + 1);
        uint64_t v78 = v77;
        int v103 = 0LL;
        if (v76)
        {
          if (v104 == 1)
          {
            uint64_t v79 = 5LL;
            uint64_t v80 = 13LL;
          }

          else
          {
            uint64_t v79 = 7LL;
            uint64_t v80 = 15LL;
          }

          (*(void (**)(const void *, uint64_t, uint64_t, char *, uint64_t *, char *))(*(void *)v76 + 160LL))( v76,  v79,  v80,  (char *)&v103 + 4,  &v103,  (char *)v108 + 4);
        }

        else
        {
          (*(void (**)(const void *, uint64_t, char *, uint64_t *, char *, double))(*(void *)v75 + 48LL))( v75,  1LL,  (char *)&v103 + 4,  &v103,  (char *)v108 + 4,  v77);
        }

        if (v104 == 1)
        {
          int v83 = 0;
        }

        else
        {
          int v83 = v103;
          if (!(_DWORD)v103)
          {
            if (v76)
            {
              int v84 = v78 + (double)SHIDWORD(v103);
              memset(v102, 0, sizeof(v102));
              icu::TimeZoneTransition::TimeZoneTransition(v102);
              if (v84 < v84 + 9.4608e11)
              {
                v85.n128_f64[0] = v84;
                do
                {
                  if (!(*(unsigned int (**)(const void *, void, _OWORD *, __n128))(*(void *)v76 + 112LL))( v76,  0LL,  v102,  v85)) {
                    break;
                  }
                  unsigned int v86 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v102);
                  DSTSavings = icu::TimeZoneRule::getDSTSavings(v86);
                  if (DSTSavings) {
                    goto LABEL_162;
                  }
                  v85.n128_f64[0] = icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v102);
                }

                while (v85.n128_f64[0] < v84 + 9.4608e11);
              }

              for (uint64_t j = v84 + -9.4608e11;
                    v84 > j;
                    int v84 = icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v102) + -1.0)
              {
                if (!(*(unsigned int (**)(const void *, uint64_t, _OWORD *, double))(*(void *)v76 + 120LL))( v76,  1LL,  v102,  v84)) {
                  break;
                }
                uint64_t v89 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v102);
                DSTSavings = icu::TimeZoneRule::getDSTSavings(v89);
                if (DSTSavings) {
                  goto LABEL_162;
                }
              }

              DSTSavings = (*(uint64_t (**)(const void *))(*(void *)v76 + 104LL))(v76);
LABEL_162:
              uint64_t v90 = DSTSavings;
              icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)v102);
            }

            else
            {
              uint64_t v90 = (*(uint64_t (**)(const void *))(*(void *)v75 + 104LL))(v75);
            }

            if (v90) {
              int v83 = v90;
            }
            else {
              int v83 = 3600000;
            }
          }
        }

        icu::Calendar::set(v6, 0xFu, SHIDWORD(v103));
        icu::Calendar::set(v6, 0x10u, v83);
        (*(void (**)(icu::Calendar *))(*(void *)v74 + 8LL))(v74);
        goto LABEL_168;
      }

      int v19 = (UChar **)(*(uint64_t (**)(uint64_t *, icu::ZoneMeta *))(*v16 + 56))(v16, a5);
      if (v19) {
        UErrorCode v29 = *(_DWORD *)a5 <= 0;
      }
      else {
        UErrorCode v29 = 0;
      }
      if (!v29) {
        goto LABEL_45;
      }
    }

    int v32 = v20[2];
    if (v32) {
      int v31 = *((_DWORD *)v20 + 6);
    }
    else {
      int v31 = 0;
    }
    if (v24 && v23)
    {
      int v30 = u_strcmp(v24, v23) == 0;
      MetaZoneID = icu::ZoneMeta::findMetaZoneID(v19, v25);
    }

    else
    {
      MetaZoneID = icu::ZoneMeta::findMetaZoneID(v19, v21);
      int v30 = 0;
      if (!v24) {
        goto LABEL_35;
      }
    }

    int v27 = uprv_malloc(0x20uLL);
    if (!v27) {
      goto LABEL_44;
    }
    *(void *)int v27 = MetaZoneID;
    _OWORD v27[2] = 16;
    *((_BYTE *)v27 + 12) = v30;
    *((void *)v27 + 2) = v32;
    v27[6] = v31;
    icu::TextTrieMap::put(v24, (UErrorCode *)a5, qword_18C535C98, v27, qword_18C535000);
LABEL_35:
    if (*(int *)a5 <= 0 && v23)
    {
      uint64_t v28 = uprv_malloc(0x20uLL);
      if (!v28)
      {
LABEL_44:
        *(_DWORD *)a5 = 7;
        goto LABEL_45;
      }

      *(void *)uint64_t v28 = MetaZoneID;
      void v28[2] = 32;
      *((_BYTE *)v28 + 12) = v30;
      *((void *)v28 + 2) = v32;
      v28[6] = v31;
      icu::TextTrieMap::put(v23, (UErrorCode *)a5, qword_18C535C98, v28, qword_18C535000);
    }

    goto LABEL_39;
  }

  if (dword_18C535CFC >= 1)
  {
    uint64_t result = 0LL;
    *(_DWORD *)a5 = dword_18C535CFC;
    return result;
  }

  icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v21);
  return v2;
}

void u_setDataDirectory(const char *directory)
{
  if (directory && *directory)
  {
    int v2 = strlen(directory);
    unint64_t v3 = (char *)uprv_malloc(v2 + 2);
    if (!v3) {
      return;
    }
    uint64_t v4 = v3;
    strcpy(v3, directory);
  }

  else
  {
    uint64_t v4 = "";
  }

  if (qword_18C448E58)
  {
    if (*(_BYTE *)qword_18C448E58) {
      uprv_free((void *)qword_18C448E58);
    }
  }

  qword_18C448E58 = (uint64_t)v4;
  sub_180820C94(0x19u, (uint64_t)sub_1807F4864);
}

uint64_t sub_1807F4864()
{
  if (qword_18C448E58 && *(_BYTE *)qword_18C448E58) {
    uprv_free((void *)qword_18C448E58);
  }
  qword_18C448E58 = 0LL;
  atomic_store(0, (unsigned int *)&unk_18C448E78);
  uint64_t v0 = (void *)qword_18C448E60;
  if (qword_18C448E60)
  {
    if (*(_BYTE *)(qword_18C448E60 + 12)) {
      uprv_free(*(void **)qword_18C448E60);
    }
    icu::UMemory::operator delete(v0);
  }

  qword_18C448E60 = 0LL;
  atomic_store(0, &dword_18C449BB0);
  timeval v1 = (void *)qword_18C534DE8;
  if (qword_18C534DE8)
  {
    if (*(_BYTE *)(qword_18C534DE8 + 12)) {
      uprv_free(*(void **)qword_18C534DE8);
    }
    icu::UMemory::operator delete(v1);
  }

  qword_18C534DE8 = 0LL;
  if (qword_18C448E68 && byte_18C448E70 == 1)
  {
    uprv_free((void *)qword_18C448E68);
    qword_18C448E68 = 0LL;
    byte_18C448E70 = 0;
  }

  return 1LL;
}

unsigned __int8 *uprv_pathIsAbsolute(unsigned __int8 *result)
{
  if (result) {
    return (unsigned __int8 *)(*result == 47);
  }
  return result;
}

const char *u_getDataDirectory(void)
{
  unsigned int v0 = atomic_load((unsigned int *)&unk_18C448E78);
  if (v0 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_18C448E78))
  {
    if (!qword_18C448E58)
    {
      timeval v1 = getenv("ICU_DATA");
      if (!v1 || !*v1) {
        timeval v1 = "/usr/share/icu/";
      }
      u_setDataDirectory(v1);
    }

    icu::umtx_initImplPostInit((unsigned int *)&unk_18C448E78);
  }

  return (const char *)qword_18C448E58;
}

const char *__cdecl u_getTimeZoneFilesDirectory(UErrorCode *status)
{
  unsigned int v2 = atomic_load(&dword_18C449BB0);
  if (v2 == 2 || !icu::umtx_initImplPreInit(&dword_18C449BB0))
  {
    if (dword_18C449BB4 >= 1)
    {
      *status = dword_18C449BB4;
      return "";
    }
  }

  else
  {
    sub_1807F4A64(status);
    dword_18C449BB4 = *status;
    icu::umtx_initImplPostInit(&dword_18C449BB0);
  }

  return *(const char **)qword_18C448E60;
}

icu::CharString *sub_1807F4A64(UErrorCode *a1)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  sub_180820C94(0x19u, (uint64_t)sub_1807F4864);
  uint64_t result = (icu::CharString *)icu::UMemory::operator new((icu::UMemory *)0x40, v2);
  if (result)
  {
    *(void *)uint64_t result = (char *)result + 13;
    *((_DWORD *)result + 2) = 40;
    *((_WORD *)result + 6) = 0;
    *((_DWORD *)result + 14) = 0;
    qword_18C448E60 = (uint64_t)result;
    uint64_t v4 = getenv("ICU_TIMEZONE_FILES_DIR");
    unint64_t v5 = v4;
    memset(&v10.st_birthtimespec, 0, 64);
    if (v4) {
      unint64_t v6 = v4;
    }
    else {
      unint64_t v6 = "/var/db/timezone/icutz";
    }
    memset(&v10, 0, 80);
    int v7 = stat(v6, &v10);
    if (v7) {
      unint64_t v8 = 0LL;
    }
    else {
      unint64_t v8 = (icu::CharString *)v6;
    }
    if (!v5 && !v7)
    {
      uint64_t v13 = 0LL;
      uint64_t v12 = 0LL;
      uint64_t v14 = 0LL;
      strcpy(__s, "/var/db/timezone/icutz");
      *(_WORD *)&__s[strlen(__s)] = 47;
      strcat(__s, "icutz44l");
      strcat(__s, ".dat");
      if (stat(__s, &v10)) {
        unint64_t v8 = 0LL;
      }
      else {
        unint64_t v8 = (icu::CharString *)v6;
      }
    }

    if (v8) {
      size_t v9 = v8;
    }
    else {
      size_t v9 = (icu::CharString *)"";
    }
    return sub_1807F4C98(v9, a1);
  }

  else
  {
    qword_18C448E60 = 0LL;
    *a1 = U_MEMORY_ALLOCATION_ERROR;
  }

  return result;
}

void u_setTimeZoneFilesDirectory(const char *path, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    unsigned int v4 = atomic_load(&dword_18C449BB0);
    if (v4 == 2 || !icu::umtx_initImplPreInit(&dword_18C449BB0))
    {
      if (dword_18C449BB4 >= 1) {
        *status = dword_18C449BB4;
      }
    }

    else
    {
      sub_1807F4A64(status);
      dword_18C449BB4 = *status;
      icu::umtx_initImplPostInit(&dword_18C449BB0);
    }
  }

  sub_1807F4C98((icu::CharString *)path, status);
}

icu::CharString *sub_1807F4C98(icu::CharString *__s, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    unint64_t v3 = (icu::CharString *)qword_18C448E60;
    *(_DWORD *)(qword_18C448E60 + 56) = 0;
    **(_BYTE **)unint64_t v3 = 0;
    icu::StringPiece::StringPiece((icu::StringPiece *)&v4, (const char *)__s);
    return icu::CharString::append(v3, v4, v5, a2);
  }

  return __s;
}

uint64_t uprv_getDefaultLocaleID()
{
  unsigned int v0 = (char *)qword_18C448E80;
  if (!qword_18C448E80)
  {
    timeval v1 = setlocale(6, 0LL);
    if ((!v1 || (unsigned int v0 = v1, !strcmp("C", v1)) || !strcmp("POSIX", v0))
      && (unsigned int v0 = getenv("LC_ALL")) == 0LL
      && (unsigned int v0 = getenv("LC_MESSAGES")) == 0LL
      && (unsigned int v0 = getenv("LANG")) == 0LL
      || !strcmp("C", v0)
      || !strcmp("POSIX", v0))
    {
      unsigned int v0 = "en_US_POSIX";
    }

    qword_18C448E80 = (uint64_t)v0;
  }

  uint64_t v2 = qword_18C448E68;
  if (!qword_18C448E68)
  {
    size_t v4 = strlen(v0);
    int v5 = (char *)uprv_malloc(v4 + 11);
    if (v5)
    {
      unint64_t v6 = v5;
      int v7 = strcpy(v5, v0);
      unint64_t v8 = strchr(v7, 46);
      if (v8) {
        *unint64_t v8 = 0;
      }
      size_t v9 = strchr(v6, 64);
      if (v9) {
        *size_t v9 = 0;
      }
      if (!strcmp("C", v6) || !strcmp("POSIX", v6)) {
        strcpy(v6, "en_US_POSIX");
      }
      stat v10 = strrchr(v0, 64);
      if (v10)
      {
        int v11 = v10;
        if (!strcmp(v10 + 1, "nynorsk")) {
          uint64_t v12 = "NY";
        }
        else {
          uint64_t v12 = v11 + 1;
        }
        uint64_t v13 = strchr(v6, 95);
        uint64_t v14 = &v6[strlen(v6)];
        if (v13) {
          *(_WORD *)uint64_t v14 = 95;
        }
        else {
          strcpy(v14, "__");
        }
        uint64_t v15 = strchr(v12, 46);
        if (v15)
        {
          uint64_t v16 = v15;
          int v17 = strlen(v6);
          size_t v18 = v16 - v12;
          LODWORD(v16) = v17 + (_DWORD)v16 - (_DWORD)v12;
          strncat(v6, v12, v18);
          v6[(int)v16] = 0;
        }

        else
        {
          strcat(v6, v12);
        }
      }

      uint64_t v2 = qword_18C448E68;
      if (qword_18C448E68)
      {
        uprv_free(v6);
      }

      else
      {
        qword_18C448E68 = (uint64_t)v6;
        byte_18C448E70 = 1;
        sub_180820C94(0x19u, (uint64_t)sub_1807F4864);
        return qword_18C448E68;
      }
    }

    else
    {
      return 0LL;
    }
  }

  return v2;
}

void u_versionFromString(UVersionInfo versionArray, const char *versionString)
{
  if (versionArray)
  {
    if (!versionString
      || (__endptr = 0LL, *versionArray = strtoul(versionString, &__endptr, 10),
                          size_t v4 = __endptr,
                          __endptr == versionString))
    {
      int v8 = 0;
LABEL_11:
      bzero(&versionArray[v8], (4 - v8));
    }

    else
    {
      uint64_t v5 = 1LL;
      while (v5 != 4)
      {
        uint64_t v6 = v5;
        if (*v4 == 46)
        {
          int v7 = v4 + 1;
          versionArray[v5] = strtoul(v4 + 1, &__endptr, 10);
          size_t v4 = __endptr;
          uint64_t v5 = v6 + 1;
          if (__endptr != v7) {
            continue;
          }
        }

        int v8 = (unsigned __int16)v6;
        return;
      }
    }
  }

void u_versionFromUString(UVersionInfo versionArray, const UChar *versionString)
{
  v7[2] = *MEMORY[0x1895F89C0];
  if (versionArray && versionString)
  {
    uint64_t v6 = 0LL;
    v7[0] = 0LL;
    *(void *)((char *)v7 + 5) = 0LL;
    int32_t v4 = u_strlen(versionString);
    if (v4 >= 20) {
      int32_t v5 = 20;
    }
    else {
      int32_t v5 = v4;
    }
    u_UCharsToChars(versionString, (char *)&v6, v5);
    *((_BYTE *)&v7[-1] + v5) = 0;
    u_versionFromString(versionArray, (const char *)&v6);
  }

void u_versionToString(const UVersionInfo versionArray, char *versionString)
{
  if (versionString)
  {
    if (versionArray)
    {
      unsigned __int16 v2 = 4;
      while (!versionArray[v2 - 1])
      {
        if (!--v2)
        {
          unsigned __int16 v2 = 0;
          break;
        }
      }

      if (v2 <= 2u) {
        uint64_t v3 = 2LL;
      }
      else {
        uint64_t v3 = v2;
      }
      unsigned int v4 = *versionArray;
      if (v4 >= 0x64)
      {
        char v5 = *versionArray / 0x64u;
        *versionString++ = v5 | 0x30;
        LOBYTE(v4) = v4 - 100 * v5;
      }

      if (v4 >= 0xAu)
      {
        *versionString++ = (v4 / 0xAu) | 0x30;
        LOBYTE(v4) = v4 % 0xAu;
      }

      *versionString = v4 | 0x30;
      const uint8_t *__attribute__((__org_typedef(UVersionInfo))) v6 = versionArray + 1;
      uint64_t v7 = v3 - 1;
      do
      {
        versionString[1] = 46;
        unsigned int v9 = *v6++;
        unsigned int v8 = v9;
        if (v9 < 0x64)
        {
          versionString += 2;
        }

        else
        {
          unsigned int v10 = (41 * v8) >> 12;
          versionString[2] = v10 | 0x30;
          versionString += 3;
          LOBYTE(icu::LocaleBuilder::setVariant((uint64_t)this, v7, v8) = v8 - 100 * v10;
        }

        if (v8 >= 0xAu)
        {
          *versionString++ = (v8 / 0xAu) | 0x30;
          LOBYTE(icu::LocaleBuilder::setVariant((uint64_t)this, v7, v8) = v8 % 0xAu;
        }

        *versionString = v8 | 0x30;
        --v7;
      }

      while (v7);
      ++versionString;
    }

    *versionString = 0;
  }

void u_getVersion(UVersionInfo versionArray)
{
}

void *uprv_dl_open(const char *a1, int *a2)
{
  if (*a2 > 0) {
    return 0LL;
  }
  uint64_t result = dlopen(a1, 10);
  if (!result) {
    *a2 = 2;
  }
  return result;
}

void *uprv_dl_close(void *__handle, int *a2)
{
  if (*a2 <= 0) {
    return (void *)dlclose(__handle);
  }
  return __handle;
}

void *uprv_dlsym_func(void *a1, const char *a2, int *a3)
{
  if (*a3 > 0) {
    return 0LL;
  }
  uint64_t result = dlsym(a1, a2);
  if (!result) {
    *a3 = 2;
  }
  return result;
}

uint64_t uaprv_onCalciumDevice()
{
  return 0LL;
}

void *icu::RuleBasedBreakIterator::getStaticClassID(icu::RuleBasedBreakIterator *this)
{
  return &unk_18C534DF0;
}

void *icu::RuleBasedBreakIterator::getDynamicClassID(icu::RuleBasedBreakIterator *this)
{
  return &unk_18C534DF0;
}

icu::RuleBasedBreakIterator *icu::RuleBasedBreakIterator::RuleBasedBreakIterator( icu::RuleBasedBreakIterator *a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v7 = icu::UMemory::operator new((icu::UMemory *)0x90, v6);
  if (v7)
  {
    uint64_t v8 = sub_1807FC924(v7, a2, (int *)a3);
    *((void *)a1 + 79) = v8;
    if (*(int *)a3 < 1)
    {
      uint64_t v9 = *(unsigned int *)(*(void *)(v8 + 8) + 12LL);
      if ((_DWORD)v9)
      {
        unsigned int v10 = uprv_malloc(4 * v9);
        *((void *)a1 + 96) = v10;
        if (!v10) {
          goto LABEL_7;
        }
      }
    }
  }

  else
  {
    *((void *)a1 + 79) = 0LL;
    if (*(int *)a3 < 1) {
LABEL_7:
    }
      *a3 = U_MEMORY_ALLOCATION_ERROR;
  }

  return a1;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  icu::RuleBasedBreakIterator::RuleBasedBreakIterator(a1, a3);
  uint64_t v7 = icu::UMemory::operator new((icu::UMemory *)0x90, v6);
  if (v7)
  {
    uint64_t v8 = sub_1807FC924(v7, a2, (int *)a3);
    *((void *)a1 + 79) = v8;
    if (*(int *)a3 < 1)
    {
      uint64_t v9 = *(unsigned int *)(*(void *)(v8 + 8) + 12LL);
      if ((_DWORD)v9)
      {
        unsigned int v10 = uprv_malloc(4 * v9);
        *((void *)a1 + 96) = v10;
        if (!v10) {
          goto LABEL_7;
        }
      }
    }
  }

  else
  {
    *((void *)a1 + 79) = 0LL;
    if (*(int *)a3 < 1) {
LABEL_7:
    }
      *a3 = U_MEMORY_ALLOCATION_ERROR;
  }

  return a1;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  icu::RuleBasedBreakIterator::RuleBasedBreakIterator(a1, a3);
  uint64_t v7 = icu::UMemory::operator new((icu::UMemory *)0x90, v6);
  if (v7)
  {
    uint64_t v8 = sub_1807FCAC4(v7, a2, a3);
    *((void *)a1 + 79) = v8;
    if (*(int *)a3 < 1)
    {
      uint64_t v9 = *(unsigned int *)(*(void *)(v8 + 8) + 12LL);
      if ((_DWORD)v9)
      {
        unsigned int v10 = uprv_malloc(4 * v9);
        *((void *)a1 + 96) = v10;
        if (!v10) {
          goto LABEL_7;
        }
      }
    }
  }

  else
  {
    *((void *)a1 + 79) = 0LL;
    if (*(int *)a3 < 1) {
LABEL_7:
    }
      *a3 = U_MEMORY_ALLOCATION_ERROR;
  }

  return a1;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  icu::RuleBasedBreakIterator::RuleBasedBreakIterator(a1, a3);
  uint64_t v7 = icu::UMemory::operator new((icu::UMemory *)0x90, v6);
  if (v7)
  {
    uint64_t v8 = sub_1807FCAC4(v7, a2, a3);
    *((void *)a1 + 79) = v8;
    if (*(int *)a3 < 1)
    {
      uint64_t v9 = *(unsigned int *)(*(void *)(v8 + 8) + 12LL);
      if ((_DWORD)v9)
      {
        unsigned int v10 = uprv_malloc(4 * v9);
        *((void *)a1 + 96) = v10;
        if (!v10) {
          goto LABEL_7;
        }
      }
    }
  }

  else
  {
    *((void *)a1 + 79) = 0LL;
    if (*(int *)a3 < 1) {
LABEL_7:
    }
      *a3 = U_MEMORY_ALLOCATION_ERROR;
  }

  return a1;
}

icu::RuleBasedBreakIterator *icu::RuleBasedBreakIterator::RuleBasedBreakIterator( icu::RuleBasedBreakIterator *this, UErrorCode *a2)
{
  unsigned int v4 = (void *)icu::BreakIterator::BreakIterator((uint64_t)this);
  *unsigned int v4 = off_18970FBD0;
  char v5 = v4 + 61;
  *(void *)((char *)v4 + 668) = 0LL;
  unint64_t v6 = v4 + 85;
  v4 += 91;
  *(_OWORD *)char v5 = xmmword_1809F2130;
  *((_OWORD *)v5 + 1) = 0u;
  *((_OWORD *)v5 + 2) = 0u;
  *((_OWORD *)v5 + 3) = 0u;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  *((_OWORD *)v5 + 6) = 0u;
  *((_OWORD *)v5 + 7) = 0u;
  *((_OWORD *)v5 + 8) = 0u;
  *(_OWORD *)((char *)v5 + 140) = 0u;
  _OWORD *v6 = 0u;
  v6[1] = 0u;
  *((_DWORD *)this + 178) = 0;
  *((void *)this + 90) = v4;
  size_t v18 = &unk_180A479F2;
  icu::UCharCharacterIterator::UCharCharacterIterator(v4, &v18, 0LL);
  *((_BYTE *)this + 760) = 0;
  *((void *)this + 96) = 0LL;
  *((_BYTE *)this + 776) = 0;
  int v17 = 0;
  if (a2) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = (UErrorCode *)&v17;
  }
  utext_openUChars((UText *)v5, 0LL, 0LL, v7);
  uint64_t v9 = (icu::RuleBasedBreakIterator::DictionaryCache *)icu::UMemory::operator new((icu::UMemory *)0x40, v8);
  int v11 = (void **)v9;
  if (v9)
  {
    icu::RuleBasedBreakIterator::DictionaryCache::DictionaryCache(v9, this, v7);
  }

  else if (*(int *)v7 <= 0)
  {
    *uint64_t v7 = U_MEMORY_ALLOCATION_ERROR;
  }

  uint64_t v12 = (icu::RuleBasedBreakIterator::BreakCache *)icu::UMemory::operator new((icu::UMemory *)0x340, v10);
  if (v12)
  {
    uint64_t v13 = icu::RuleBasedBreakIterator::BreakCache::BreakCache(v12, this, v7);
    if (*(int *)v7 <= 0)
    {
      *((void *)this + 86) = v11;
      *((void *)this + 85) = v13;
      *((_DWORD *)this + 166) = 0;
      *(_OWORD *)((char *)this + 648) = 0u;
      return this;
    }

    *((UErrorCode *)this + 160) = *v7;
    (*(void (**)(icu::RuleBasedBreakIterator::BreakCache *))(*(void *)v13 + 8LL))(v13);
    if (!v11) {
      return this;
    }
    goto LABEL_15;
  }

  UErrorCode v14 = *v7;
  if (*(int *)v7 <= 0)
  {
    UErrorCode v14 = U_MEMORY_ALLOCATION_ERROR;
    *uint64_t v7 = U_MEMORY_ALLOCATION_ERROR;
  }

  *((_DWORD *)this + 160) = v14;
  if (v11)
  {
LABEL_15:
    icu::RuleBasedBreakIterator::DictionaryCache::~DictionaryCache(v11);
    icu::UMemory::operator delete(v15);
  }

  return this;
}

icu::RuleBasedBreakIterator *icu::RuleBasedBreakIterator::RuleBasedBreakIterator( icu::RuleBasedBreakIterator *a1, uint64_t a2, char a3, UErrorCode *a4)
{
  uint64_t result = icu::RuleBasedBreakIterator::RuleBasedBreakIterator(a1, a2, a4);
  *((_BYTE *)result + 776) = a3;
  return result;
}

{
  icu::RuleBasedBreakIterator *result;
  uint64_t result = icu::RuleBasedBreakIterator::RuleBasedBreakIterator(a1, a2, a4);
  *((_BYTE *)result + 776) = a3;
  return result;
}

icu::RuleBasedBreakIterator *icu::RuleBasedBreakIterator::RuleBasedBreakIterator( icu::RuleBasedBreakIterator *this, const unsigned __int8 *a2, unsigned int a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    UErrorCode v9 = U_ILLEGAL_ARGUMENT_ERROR;
    if (!a2 || a3 < 0x50) {
      goto LABEL_6;
    }
    if (*((_DWORD *)a2 + 2) > a3)
    {
      UErrorCode v9 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_6:
      *a4 = v9;
      return this;
    }

    uint64_t v11 = icu::UMemory::operator new((icu::UMemory *)0x90, v8);
    if (!v11)
    {
      *((void *)this + 79) = 0LL;
      goto LABEL_14;
    }

    uint64_t v12 = sub_1807FC980(v11, (uint64_t)a2, 0LL, (int *)a4);
    *((void *)this + 79) = v12;
    if (*(int *)a4 < 1)
    {
      uint64_t v13 = *(unsigned int *)(*(void *)(v12 + 8) + 12LL);
      if ((_DWORD)v13)
      {
        UErrorCode v14 = uprv_malloc(4 * v13);
        *((void *)this + 96) = v14;
        if (!v14)
        {
LABEL_14:
          UErrorCode v9 = U_MEMORY_ALLOCATION_ERROR;
          goto LABEL_6;
        }
      }
    }
  }

  return this;
}

{
  unint64_t v8;
  UErrorCode v9;
  uint64_t *v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  icu::RuleBasedBreakIterator::RuleBasedBreakIterator(this, a4);
  if (*(int *)a4 <= 0)
  {
    UErrorCode v9 = U_ILLEGAL_ARGUMENT_ERROR;
    if (!a2 || a3 < 0x50) {
      goto LABEL_6;
    }
    unint64_t v10 = (uint64_t *)*((unsigned int *)a2 + 2);
    if (v10 > a3)
    {
      UErrorCode v9 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_6:
      *a4 = v9;
      return this;
    }

    uint64_t v12 = icu::UMemory::operator new(v10, (icu::UMemory *)0x90, v8);
    if (!v12)
    {
      *((void *)this + 79) = 0LL;
      goto LABEL_14;
    }

    uint64_t v13 = sub_1807FC980((uint64_t)v12, (uint64_t)a2, 0LL, (int *)a4);
    *((void *)this + 79) = v13;
    if (*(int *)a4 < 1)
    {
      UErrorCode v14 = *(unsigned int *)(*(void *)(v13 + 8) + 12LL);
      if ((_DWORD)v14)
      {
        uint64_t v15 = uprv_malloc(4 * v14);
        *((void *)this + 96) = v15;
        if (!v15)
        {
LABEL_14:
          UErrorCode v9 = U_MEMORY_ALLOCATION_ERROR;
          goto LABEL_6;
        }
      }
    }
  }

  return this;
}

icu::RuleBasedBreakIterator *icu::RuleBasedBreakIterator::RuleBasedBreakIterator( icu::RuleBasedBreakIterator *this, UChar **a2, UParseError *a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    unint64_t v8 = sub_1807FDC38(a2, (uint64_t)a3, a4);
    if (*(int *)a4 <= 0)
    {
      UErrorCode v9 = v8;
      icu::RuleBasedBreakIterator::operator=((uint64_t)this, (uint64_t)v8);
      (*(void (**)(icu::RuleBasedBreakIterator *))(*(void *)v9 + 8LL))(v9);
    }
  }

  return this;
}

{
  icu::RuleBasedBreakIterator *v8;
  icu::RuleBasedBreakIterator *v9;
  icu::RuleBasedBreakIterator::RuleBasedBreakIterator(this, a4);
  if (*(int *)a4 <= 0)
  {
    unint64_t v8 = sub_1807FDC38(a2, (uint64_t)a3, a4);
    if (*(int *)a4 <= 0)
    {
      UErrorCode v9 = v8;
      icu::RuleBasedBreakIterator::operator=((uint64_t)this, (uint64_t)v8);
      (*(void (**)(icu::RuleBasedBreakIterator *))(*(void *)v9 + 8LL))(v9);
    }
  }

  return this;
}

uint64_t icu::RuleBasedBreakIterator::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    icu::BreakIterator::operator=((char *)a1, (const char *)a2);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    uint64_t v4 = *(void *)(a1 + 696);
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
      *(void *)(a1 + 696) = 0LL;
    }

    UErrorCode status = U_ZERO_ERROR;
    utext_clone((UText *)(a1 + 488), (const UText *)(a2 + 488), 0, 1, &status);
    uint64_t v5 = *(void *)(a1 + 720);
    uint64_t v6 = a1 + 728;
    if (v5 != a1 + 728 && v5 != 0) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
    *(void *)(a1 + 720) = v6;
    uint64_t v8 = *(void *)(a2 + 720);
    if (v8 && v8 != a2 + 728) {
      *(void *)(a1 + 720) = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 64LL))(v8);
    }
    icu::UCharCharacterIterator::operator=(a1 + 728, a2 + 728);
    if (!*(void *)(a1 + 720)) {
      *(void *)(a1 + 720) = v6;
    }
    uint64_t v9 = *(void *)(a1 + 632);
    if (v9)
    {
      sub_1807FCB74(v9);
      *(void *)(a1 + 632) = 0LL;
    }

    uint64_t v10 = *(void *)(a2 + 632);
    if (v10) {
      *(void *)(a1 + 632) = sub_1807FCBB0(v10);
    }
    uprv_free(*(void **)(a1 + 768));
    *(void *)(a1 + 768) = 0LL;
    uint64_t v11 = *(void *)(a1 + 632);
    if (v11)
    {
      uint64_t v12 = *(unsigned int *)(*(void *)(v11 + 8) + 12LL);
      if ((_DWORD)v12) {
        *(void *)(a1 + 768) = uprv_malloc(4 * v12);
      }
    }

    uint64_t v13 = *(void **)(a1 + 648);
    if (v13) {
      operator delete[](v13);
    }
    *(void *)(a1 + 648) = 0LL;
    UErrorCode v14 = *(void **)(a1 + 656);
    if (v14) {
      operator delete[](v14);
    }
    *(void *)(a1 + 656) = 0LL;
    uint64_t v15 = *(int *)(a2 + 664);
    *(_DWORD *)(a1 + 664) = v15;
    if ((_DWORD)v15)
    {
      else {
        size_t v16 = 8 * v15;
      }
      *(void *)(a1 + 656) = operator new[](v16);
      if ((int)v15 >= 1)
      {
        uint64_t v17 = 0LL;
        do
        {
          *(void *)(*(void *)(a1 + 656) + 8 * v17) = *(void *)(*(void *)(a2 + 656) + 8 * v17);
          ++v17;
        }

        while (v17 < *(int *)(a1 + 664));
      }
    }

    int v18 = *(_DWORD *)(a2 + 668);
    *(_DWORD *)(a1 + 668) = v18;
    int v19 = *(_DWORD *)(a2 + 672);
    *(_DWORD *)(a1 + 672) = v19;
    *(_BYTE *)(a1 + 760) = *(_BYTE *)(a2 + 760);
    icu::RuleBasedBreakIterator::BreakCache::reset(*(void *)(a1 + 680), v18, v19);
    icu::RuleBasedBreakIterator::DictionaryCache::reset(*(icu::RuleBasedBreakIterator::DictionaryCache **)(a1 + 688));
  }

  return a1;
}

icu::RuleBasedBreakIterator *icu::RuleBasedBreakIterator::RuleBasedBreakIterator( icu::RuleBasedBreakIterator *this)
{
  return icu::RuleBasedBreakIterator::RuleBasedBreakIterator(this, 0LL);
}

{
  return icu::RuleBasedBreakIterator::RuleBasedBreakIterator(this, 0LL);
}

uint64_t icu::RuleBasedBreakIterator::RuleBasedBreakIterator( icu::RuleBasedBreakIterator *this, const icu::RuleBasedBreakIterator *a2)
{
  uint64_t v3 = icu::RuleBasedBreakIterator::RuleBasedBreakIterator(this, 0LL);
  return icu::RuleBasedBreakIterator::operator=((uint64_t)v3, (uint64_t)a2);
}

{
  icu::RuleBasedBreakIterator *v3;
  uint64_t v3 = icu::RuleBasedBreakIterator::RuleBasedBreakIterator(this, 0LL);
  return icu::RuleBasedBreakIterator::operator=((uint64_t)v3, (uint64_t)a2);
}

void icu::RuleBasedBreakIterator::~RuleBasedBreakIterator(icu::RuleBasedBreakIterator *this)
{
  *(void *)this = off_18970FBD0;
  unsigned __int16 v2 = (icu::RuleBasedBreakIterator *)*((void *)this + 90);
  *((void *)this + 90) = 0LL;
  utext_close((UText *)((char *)this + 488));
  uint64_t v4 = *((void *)this + 79);
  if (v4)
  {
    sub_1807FCB74(v4);
    *((void *)this + 79) = 0LL;
  }

  uint64_t v5 = *((void *)this + 85);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *((void *)this + 85) = 0LL;
  uint64_t v6 = (void **)*((void *)this + 86);
  if (v6)
  {
    icu::RuleBasedBreakIterator::DictionaryCache::~DictionaryCache(v6);
    icu::UMemory::operator delete(v7);
  }

  *((void *)this + 86) = 0LL;
  uint64_t v8 = *((void *)this + 87);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  *((void *)this + 87) = 0LL;
  uint64_t v9 = *((void *)this + 88);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  *((void *)this + 88) = 0LL;
  uprv_free(*((void **)this + 96));
  *((void *)this + 96) = 0LL;
  uint64_t v10 = (void *)*((void *)this + 81);
  if (v10) {
    operator delete[](v10);
  }
  *((void *)this + 81) = 0LL;
  uint64_t v11 = (void *)*((void *)this + 82);
  if (v11) {
    operator delete[](v11);
  }
  *((void *)this + 82) = 0LL;
  *((_DWORD *)this + 166) = 0;
  icu::UCharCharacterIterator::~UCharCharacterIterator((icu::RuleBasedBreakIterator *)((char *)this + 728));
  icu::BreakIterator::~BreakIterator(this);
}

{
  void *v1;
  icu::RuleBasedBreakIterator::~RuleBasedBreakIterator(this);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::RuleBasedBreakIterator::initLatin1Cat(icu::RuleBasedBreakIterator *this)
{
  uint64_t v2 = 0LL;
  *((void *)this + 81) = operator new[](0x200uLL);
  do
  {
    uint64_t result = ucptrie_get(*(void *)(*((void *)this + 79) + 48LL), v2);
    *(_WORD *)(*((void *)this + 81) + 2 * v2++) = result;
  }

  while (v2 != 256);
  return result;
}

void icu::RuleBasedBreakIterator::setCategoryOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void **)(a1 + 656);
  if (v4) {
    operator delete[](v4);
  }
  *(void *)(a1 + 656) = 0LL;
  *(_DWORD *)(a1 + 664) = 0;
  if (strcmp((const char *)(a2 + 8), "da"))
  {
    int v26 = 0;
    uint64_t v5 = ulocdata_open(*(char **)(a2 + 40), &v26);
    if (v26 <= 0)
    {
      uint64_t v6 = v5;
      uint64_t v7 = 0LL;
      int v8 = 0;
      char v9 = 1;
      memset(v27, 0, sizeof(v27));
      do
      {
        char v10 = v9;
        __int16 v25 = 0;
        int v24 = 0;
        int v26 = 0;
        uint64_t v11 = &dword_1809F2140[2 * v7];
        else {
          UChar32 v13 = 0;
        }
        int v26 = 0;
        int Delimiter = ulocdata_getDelimiter((uint64_t)v6, v11[1], (UChar *)&v24, 3, &v26);
        UChar32 v15 = 0;
        if (v26 <= 0 && Delimiter == 1)
        {
          int v17 = (unsigned __int16)v24;
          if (v17 == 8216) {
            UChar32 v15 = 0;
          }
          else {
            UChar32 v15 = v17;
          }
        }

        if (v13 != v15)
        {
          if (u_getIntPropertyValue(v13, UCHAR_LINE_BREAK) == 23 && v13 != 8217)
          {
            int v19 = (char *)v27 + 8 * v8;
            *(_DWORD *)int v19 = v13;
            ++v8;
            *((_WORD *)v19 + 2) = ucptrie_get(*(void *)(*(void *)(a1 + 632) + 48LL), 0x7Bu);
          }

          int32_t IntPropertyValue = u_getIntPropertyValue(v15, UCHAR_LINE_BREAK);
          if (v15 != 8217 && IntPropertyValue == 23)
          {
            int v21 = (char *)v27 + 8 * v8;
            *(_DWORD *)int v21 = v15;
            ++v8;
            *((_WORD *)v21 + 2) = ucptrie_get(*(void *)(*(void *)(a1 + 632) + 48LL), 0x7Du);
          }
        }

        char v9 = 0;
        uint64_t v7 = 1LL;
      }

      while ((v10 & 1) != 0);
      ulocdata_close(v6);
      if (v8 > 0)
      {
        *(_DWORD *)(a1 + 664) = v8;
        uint64_t v22 = operator new[](8LL * v8);
        uint64_t v23 = 0LL;
        *(void *)(a1 + 656) = v22;
        do
        {
          *(void *)(*(void *)(a1 + 656) + v23) = *(void *)((char *)v27 + v23);
          v23 += 8LL;
        }

        while (8LL * v8 != v23);
      }
    }
  }

icu::RuleBasedBreakIterator *icu::RuleBasedBreakIterator::clone@<X0>( icu::RuleBasedBreakIterator *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::RuleBasedBreakIterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x310, a2);
  if (result)
  {
    uint64_t v5 = icu::RuleBasedBreakIterator::RuleBasedBreakIterator(result, 0LL);
    return (icu::RuleBasedBreakIterator *)icu::RuleBasedBreakIterator::operator=((uint64_t)v5, (uint64_t)this);
  }

  return result;
}

uint64_t icu::RuleBasedBreakIterator::operator==(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_1807F874C(*(void *)(*(void *)a1 - 8LL), *(void *)(*(void *)a2 - 8LL));
  if ((_DWORD)result)
  {
    if (a1 == a2) {
      return 1LL;
    }
    if (*(_DWORD *)(a2 + 8) == *(_DWORD *)(a1 + 8))
    {
      uint64_t result = utext_equals((const UText *)(a1 + 488), (const UText *)(a2 + 488));
      if (!(_DWORD)result) {
        return result;
      }
      if (*(_DWORD *)(a1 + 668) == *(_DWORD *)(a2 + 668)
        && *(_DWORD *)(a1 + 672) == *(_DWORD *)(a2 + 672)
        && *(unsigned __int8 *)(a1 + 760) == *(unsigned __int8 *)(a2 + 760))
      {
        uint64_t v5 = *(unsigned int ***)(a2 + 632);
        uint64_t v6 = *(unsigned int ***)(a1 + 632);
        if (v5 == v6 || v5 && v6 && sub_1807FCB1C(v5, v6)) {
          return 1LL;
        }
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t icu::RuleBasedBreakIterator::hashCode(icu::RuleBasedBreakIterator *this)
{
  uint64_t result = *((void *)this + 79);
  if (result) {
    return sub_1807FCB68(result);
  }
  return result;
}

uint64_t icu::RuleBasedBreakIterator::setText(uint64_t this, UText *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v5 = this;
    icu::RuleBasedBreakIterator::BreakCache::reset(*(void *)(this + 680), 0, 0);
    icu::RuleBasedBreakIterator::DictionaryCache::reset(*(icu::RuleBasedBreakIterator::DictionaryCache **)(v5 + 688));
    utext_clone((UText *)(v5 + 488), a2, 0, 1, a3);
    int v8 = &unk_180A479F2;
    icu::UCharCharacterIterator::setText(v5 + 728, (uint64_t *)&v8, 0);
    uint64_t v6 = *(void *)(v5 + 720);
    if (v6 != v5 + 728 && v6 != 0) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
    *(void *)(v5 + 720) = v5 + 728;
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 80LL))(v5);
  }

  return this;
}

UText *icu::RuleBasedBreakIterator::getUText( icu::RuleBasedBreakIterator *this, UText *dest, UErrorCode *status)
{
  return utext_clone(dest, (const UText *)((char *)this + 488), 0, 1, status);
}

uint64_t icu::RuleBasedBreakIterator::getText(icu::RuleBasedBreakIterator *this)
{
  return *((void *)this + 90);
}

uint64_t icu::RuleBasedBreakIterator::adoptText( icu::RuleBasedBreakIterator *this, icu::CharacterIterator *a2)
{
  uint64_t v4 = (icu::RuleBasedBreakIterator *)*((void *)this + 90);
  *((void *)this + 90) = a2;
  UErrorCode status = U_ZERO_ERROR;
  icu::RuleBasedBreakIterator::BreakCache::reset(*((void *)this + 85), 0, 0);
  icu::RuleBasedBreakIterator::DictionaryCache::reset(*((icu::RuleBasedBreakIterator::DictionaryCache **)this + 86));
  if (a2 && !*((_DWORD *)a2 + 4)) {
    v6.n128_f64[0] = utext_openCharacterIterator((UText *)((char *)this + 488), (int *)a2, &status);
  }
  else {
    utext_openUChars((UText *)((char *)this + 488), 0LL, 0LL, &status);
  }
  return (*(uint64_t (**)(icu::RuleBasedBreakIterator *, __n128))(*(void *)this + 80LL))(this, v6);
}

uint64_t icu::RuleBasedBreakIterator::setText( icu::RuleBasedBreakIterator *this, const icu::UnicodeString *a2)
{
  UErrorCode status = U_ZERO_ERROR;
  icu::RuleBasedBreakIterator::BreakCache::reset(*((void *)this + 85), 0, 0);
  icu::RuleBasedBreakIterator::DictionaryCache::reset(*((icu::RuleBasedBreakIterator::DictionaryCache **)this + 86));
  utext_openConstUnicodeString((UText *)((char *)this + 488), (uint64_t)a2, &status);
  uint64_t v4 = (char *)this + 728;
  unsigned int v5 = *((unsigned __int16 *)a2 + 4);
  if ((v5 & 0x11) != 0)
  {
    __n128 v6 = 0LL;
  }

  else if ((v5 & 2) != 0)
  {
    __n128 v6 = (char *)a2 + 10;
  }

  else
  {
    __n128 v6 = (char *)*((void *)a2 + 3);
  }

  int v7 = (__int16)v5;
  uint64_t v12 = v6;
  int v8 = v5 >> 5;
  if (v7 >= 0) {
    int v9 = v8;
  }
  else {
    int v9 = *((_DWORD *)a2 + 3);
  }
  icu::UCharCharacterIterator::setText((uint64_t)this + 728, (uint64_t *)&v12, v9);
  char v10 = (char *)*((void *)this + 90);
  if (v10 != v4 && v10) {
    (*(void (**)(char *))(*(void *)v10 + 8LL))(v10);
  }
  *((void *)this + 90) = v4;
  return (*(uint64_t (**)(icu::RuleBasedBreakIterator *))(*(void *)this + 80LL))(this);
}

icu::RuleBasedBreakIterator *icu::RuleBasedBreakIterator::refreshInputText( icu::RuleBasedBreakIterator *this, UText *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (!a2
      || (int64_t NativeIndex = utext_getNativeIndex((const UText *)((char *)this + 488)),
          utext_clone((UText *)((char *)this + 488), a2, 0, 1, a3),
          *(int *)a3 <= 0)
      && (utext_setNativeIndex((UText *)((char *)this + 488), NativeIndex),
          utext_getNativeIndex((const UText *)((char *)this + 488)) != NativeIndex))
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }

  return this;
}

uint64_t icu::RuleBasedBreakIterator::first(icu::RuleBasedBreakIterator ***this)
{
  UErrorCode v3 = U_ZERO_ERROR;
  if (!icu::RuleBasedBreakIterator::BreakCache::seek( (icu::RuleBasedBreakIterator::BreakCache *)this[85],  0)) {
    icu::RuleBasedBreakIterator::BreakCache::populateNear(this[85], 0, &v3);
  }
  icu::RuleBasedBreakIterator::BreakCache::current((icu::RuleBasedBreakIterator::BreakCache *)this[85]);
  return 0LL;
}

int64_t icu::RuleBasedBreakIterator::last(icu::RuleBasedBreakIterator *this)
{
  int64_t v2 = utext_nativeLength((UText *)((char *)this + 488));
  (*(void (**)(icu::RuleBasedBreakIterator *, int64_t))(*(void *)this + 136LL))(this, v2);
  return v2;
}

uint64_t icu::RuleBasedBreakIterator::next(icu::RuleBasedBreakIterator *this, int a2)
{
  unsigned int v2 = a2;
  if (a2 < 1)
  {
    if (a2 < 0)
    {
      int v5 = a2 + 1;
      do
      {
        uint64_t result = (*(uint64_t (**)(icu::RuleBasedBreakIterator *))(*(void *)this + 96LL))(this);
        if (!v5) {
          break;
        }
        ++v5;
      }

      while ((_DWORD)result != -1);
    }

    else
    {
      return (*(uint64_t (**)(icu::RuleBasedBreakIterator *))(*(void *)this + 112LL))(this);
    }
  }

  else
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(icu::RuleBasedBreakIterator *))(*(void *)this + 104LL))(this);
      if (v2 < 2) {
        break;
      }
      --v2;
    }

    while ((_DWORD)result != -1);
  }

  return result;
}

uint64_t icu::RuleBasedBreakIterator::next(icu::RuleBasedBreakIterator *this)
{
  if (*((_BYTE *)this + 760)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *((unsigned int *)this + 167);
  }
}

uint64_t sub_1807F6540(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 28);
  if (v1 == *(_DWORD *)(result + 20)) {
    return icu::RuleBasedBreakIterator::BreakCache::nextOL((icu::RuleBasedBreakIterator::BreakCache *)result);
  }
  unsigned int v2 = ((_BYTE)v1 + 1) & 0x7F;
  int v3 = *(_DWORD *)(result + 4LL * v2 + 32);
  uint64_t v4 = *(void *)(result + 8);
  *(_DWORD *)(v4 + 668) = v3;
  *(_DWORD *)(result + 24) = v3;
  *(_DWORD *)(result + 28) = v2;
  *(_DWORD *)(v4 + 672) = *(unsigned __int16 *)(result + 2LL * v2 + 544);
  return result;
}

uint64_t icu::RuleBasedBreakIterator::previous(icu::RuleBasedBreakIterator *this)
{
  UErrorCode v3 = U_ZERO_ERROR;
  icu::RuleBasedBreakIterator::BreakCache::previous(*((_DWORD **)this + 85), &v3);
  if (*((_BYTE *)this + 760)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *((unsigned int *)this + 167);
  }
}

uint64_t icu::RuleBasedBreakIterator::following( icu::RuleBasedBreakIterator::BreakCache **this, int64_t nativeIndex)
{
  if ((nativeIndex & 0x80000000) != 0) {
    return (*((uint64_t (**)(icu::RuleBasedBreakIterator::BreakCache **))*this + 10))(this);
  }
  utext_setNativeIndex((UText *)(this + 61), nativeIndex);
  int v3 = utext_getNativeIndex((const UText *)(this + 61));
  UErrorCode v5 = U_ZERO_ERROR;
  icu::RuleBasedBreakIterator::BreakCache::following(this[85], v3, &v5);
  if (*((_BYTE *)this + 760)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *((unsigned int *)this + 167);
  }
}

uint64_t icu::RuleBasedBreakIterator::preceding(icu::RuleBasedBreakIterator::BreakCache **this, int a2)
{
  uint64_t v4 = (UText *)(this + 61);
  if (utext_nativeLength((UText *)(this + 61)) < a2) {
    return (*((uint64_t (**)(icu::RuleBasedBreakIterator::BreakCache **))*this + 11))(this);
  }
  utext_setNativeIndex(v4, a2);
  int NativeIndex = utext_getNativeIndex(v4);
  UErrorCode v7 = U_ZERO_ERROR;
  icu::RuleBasedBreakIterator::BreakCache::preceding(this[85], NativeIndex, &v7);
  if (*((_BYTE *)this + 760)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *((unsigned int *)this + 167);
  }
}

uint64_t icu::RuleBasedBreakIterator::isBoundary(icu::RuleBasedBreakIterator *this, int64_t nativeIndex)
{
  if ((nativeIndex & 0x80000000) != 0)
  {
    (*(void (**)(icu::RuleBasedBreakIterator *))(*(void *)this + 80LL))(this);
  }

  else
  {
    int v3 = nativeIndex;
    int64_t v4 = nativeIndex;
    utext_setNativeIndex((UText *)((char *)this + 488), nativeIndex);
    int v5 = utext_getNativeIndex((const UText *)((char *)this + 488));
    UErrorCode v9 = U_ZERO_ERROR;
    if (icu::RuleBasedBreakIterator::BreakCache::seek( *((icu::RuleBasedBreakIterator::BreakCache **)this + 85),  v5)
      || icu::RuleBasedBreakIterator::BreakCache::populateNear( *((icu::RuleBasedBreakIterator ***)this + 85),  v5,  &v9))
    {
      int v6 = icu::RuleBasedBreakIterator::BreakCache::current(*((icu::RuleBasedBreakIterator::BreakCache **)this + 85));
      int v7 = v6;
      if (v7 == v3) {
        return 1LL;
      }
    }

    (*(void (**)(icu::RuleBasedBreakIterator *))(*(void *)this + 104LL))(this);
  }

  return 0LL;
}

uint64_t icu::RuleBasedBreakIterator::current(icu::RuleBasedBreakIterator *this)
{
  return *((unsigned int *)this + 167);
}

int64_t icu::RuleBasedBreakIterator::handleNext(icu::RuleBasedBreakIterator *this)
{
  uint64_t v2 = *((void *)this + 79);
  uint64_t v3 = *(void *)(v2 + 8);
  int ValueWidth = ucptrie_getValueWidth(*(void *)(v2 + 48));
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if (ValueWidth == 2)
    {
      int64_t v9 = sub_1807F6B44((uint64_t)this);
      do
      {
        int64_t v6 = v9;
        if (!*((_DWORD *)this + 2)) {
          break;
        }
        UChar32 v10 = utext_char32At((UText *)((char *)this + 488), (int)v9 - 1);
        UChar32 v11 = utext_char32At((UText *)((char *)this + 488), (int)v6);
        if (v11 == -1 || v10 == -1) {
          break;
        }
        if (*((_DWORD *)this + 2) == 1)
        {
          int v19 = 0;
        }

        else if (!u_isalpha(v11) || !u_isalpha(v10))
        {
          return v6;
        }

        int64_t v9 = sub_1807F6B44((uint64_t)this);
      }

      while ((int)v9 > (int)v6);
    }

    else
    {
      int64_t v15 = sub_1807F6EC4((uint64_t)this);
      do
      {
        int64_t v6 = v15;
        if (!*((_DWORD *)this + 2)) {
          break;
        }
        UChar32 v16 = utext_char32At((UText *)((char *)this + 488), (int)v15 - 1);
        UChar32 v17 = utext_char32At((UText *)((char *)this + 488), (int)v6);
        if (v17 == -1 || v16 == -1) {
          break;
        }
        if (*((_DWORD *)this + 2) == 1)
        {
          int v19 = 0;
        }

        else if (!u_isalpha(v17) || !u_isalpha(v16))
        {
          return v6;
        }

        int64_t v15 = sub_1807F6EC4((uint64_t)this);
      }

      while ((int)v15 > (int)v6);
    }
  }

  else if (ValueWidth == 2)
  {
    int64_t v5 = sub_1807F7244((uint64_t)this);
    do
    {
      int64_t v6 = v5;
      if (!*((_DWORD *)this + 2)) {
        break;
      }
      UChar32 v7 = utext_char32At((UText *)((char *)this + 488), (int)v5 - 1);
      UChar32 v8 = utext_char32At((UText *)((char *)this + 488), (int)v6);
      if (v8 == -1 || v7 == -1) {
        break;
      }
      if (*((_DWORD *)this + 2) == 1)
      {
        int v19 = 0;
      }

      else if (!u_isalpha(v8) || !u_isalpha(v7))
      {
        return v6;
      }

      int64_t v5 = sub_1807F7244((uint64_t)this);
    }

    while ((int)v5 > (int)v6);
  }

  else
  {
    int64_t v12 = sub_1807F75C4((uint64_t)this);
    do
    {
      int64_t v6 = v12;
      if (!*((_DWORD *)this + 2)) {
        break;
      }
      UChar32 v13 = utext_char32At((UText *)((char *)this + 488), (int)v12 - 1);
      UChar32 v14 = utext_char32At((UText *)((char *)this + 488), (int)v6);
      if (v14 == -1 || v13 == -1) {
        break;
      }
      if (*((_DWORD *)this + 2) == 1)
      {
        int v19 = 0;
      }

      else if (!u_isalpha(v14) || !u_isalpha(v13))
      {
        return v6;
      }

      int64_t v12 = sub_1807F75C4((uint64_t)this);
    }

    while ((int)v12 > (int)v6);
  }

  return v6;
}

int64_t icu::RuleBasedBreakIterator::handleNextInternal(icu::RuleBasedBreakIterator *this)
{
  uint64_t v2 = *((void *)this + 79);
  uint64_t v3 = *(void *)(v2 + 8);
  int ValueWidth = ucptrie_getValueWidth(*(void *)(v2 + 48));
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if (ValueWidth == 2) {
      return sub_1807F6B44((uint64_t)this);
    }
    else {
      return sub_1807F6EC4((uint64_t)this);
    }
  }

  else if (ValueWidth == 2)
  {
    return sub_1807F7244((uint64_t)this);
  }

  else
  {
    return sub_1807F75C4((uint64_t)this);
  }

int64_t sub_1807F6B44(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(*(void *)(a1 + 632) + 8LL);
  uint64_t v3 = v2[1];
  unsigned int v34 = v2[2];
  *(_DWORD *)(a1 + 672) = 0;
  *(_DWORD *)(a1 + 712) = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 668);
  ut = (UText *)(a1 + 488);
  uint64_t v5 = (int)v4 - *(void *)(a1 + 520);
  if (v5 < 0 || v5 >= *(int *)(a1 + 516) || *(unsigned __int16 *)(*(void *)(a1 + 536) + 2 * v5) >> 10 > 0x36u)
  {
    utext_setNativeIndex(ut, (int)v4);
    LODWORD(v5) = *(_DWORD *)(a1 + 528);
  }

  else
  {
    *(_DWORD *)(a1 + 528) = v5;
  }

  if ((int)v5 >= *(_DWORD *)(a1 + 532)
    || (unsigned int v6 = *(unsigned __int16 *)(*(void *)(a1 + 536) + 2LL * (int)v5), v6 >> 11 > 0x1A))
  {
    unsigned int v6 = utext_next32(ut);
    if (v6 == -1)
    {
      *(_BYTE *)(a1 + 760) = 1;
      return 0xFFFFFFFFLL;
    }
  }

  else
  {
    *(_DWORD *)(a1 + 528) = v5 + 1;
  }

  int v30 = v4;
  int64_t v31 = (int)v4;
  UChar32 v7 = v2 + 5;
  uint64_t v8 = v2[4] & 2;
  unsigned int v9 = ((v2[4] & 2) >> 1) ^ 1;
  uint64_t v10 = v3;
  uint64_t v35 = v4;
LABEL_11:
  uint64_t v33 = v6 >> 6;
  int v32 = v6 & 0x3F;
  uint64_t v11 = (int)v6;
  while (1)
  {
    if ((_DWORD)v11 == -1)
    {
      if (v9 == 2) {
        break;
      }
      int v13 = 0;
      unsigned int v9 = 2;
      uint64_t v8 = 1LL;
    }

    else if (v9 == 1)
    {
      if ((int)v11 <= 255 && (uint64_t v12 = *(void *)(a1 + 648)) != 0)
      {
        uint64_t v8 = *(unsigned __int16 *)(v12 + 2 * v11);
      }

      else
      {
        uint64_t v14 = *(unsigned int *)(a1 + 664);
        if ((int)v14 < 1)
        {
LABEL_24:
          uint64_t v16 = *(void *)(*(void *)(a1 + 632) + 48LL);
          uint64_t v17 = *(void *)(v16 + 8);
          if (WORD1(v11))
          {
            if (WORD1(v11) > 0x10u)
            {
              int v18 = *(_DWORD *)(v16 + 20) - 1;
            }

            else if (*(_DWORD *)(v16 + 24) <= (int)v11)
            {
              int v18 = *(_DWORD *)(v16 + 20) - 2;
            }

            else
            {
              int v18 = ucptrie_internalSmallIndex((uint64_t *)v16, v11);
            }
          }

          else
          {
            int v18 = v32 + *(unsigned __int16 *)(*(void *)v16 + 2 * v33);
          }

          uint64_t v8 = *(unsigned __int8 *)(v17 + v18);
          int v19 = *(_DWORD *)(a1 + 712);
          *(_DWORD *)(a1 + 712) = v19;
        }

        else
        {
          int64_t v15 = (unsigned __int16 *)(*(void *)(a1 + 656) + 4LL);
          while ((_DWORD)v11 != *((_DWORD *)v15 - 1))
          {
            v15 += 4;
            if (!--v14) {
              goto LABEL_24;
            }
          }

          uint64_t v8 = *v15;
        }
      }

      int v13 = 1;
      unsigned int v9 = 1;
    }

    else
    {
      int v13 = 0;
    }

    int v20 = *((unsigned __int8 *)v7 + v10 + v8 + 3);
    uint64_t v10 = (v3 * v20);
    int v21 = (char *)v7 + v10;
    uint64_t v22 = *((unsigned __int8 *)v7 + v10);
    if (*((_BYTE *)v7 + v10))
    {
      if ((_DWORD)v22 == 1)
      {
        if (v9)
        {
          uint64_t v23 = *(unsigned int *)(a1 + 528);
          else {
            uint64_t v35 = (*(uint64_t (**)(UText *))(*(void *)(a1 + 544) + 64LL))(ut);
          }
        }

        *(_DWORD *)(a1 + 672) = v21[2];
      }

      else
      {
        uint64_t v24 = *(unsigned int *)(*(void *)(a1 + 768) + 4 * v22);
        if ((v24 & 0x80000000) == 0)
        {
          *(_DWORD *)(a1 + 672) = v21[2];
          *(_DWORD *)(a1 + 668) = v24;
          return v24;
        }
      }
    }

    unint64_t v25 = v21[1];
    if (v25 >= 2)
    {
      uint64_t v26 = *(unsigned int *)(a1 + 528);
      else {
        LODWORD(v27) = (*(uint64_t (**)(UText *))(*(void *)(a1 + 544) + 64LL))(ut);
      }
      *(_DWORD *)(*(void *)(a1 + 768) + 4 * v25) = v27;
    }

    if (!v20) {
      break;
    }
    if (v13)
    {
      uint64_t v28 = *(int *)(a1 + 528);
      if ((int)v28 >= *(_DWORD *)(a1 + 532)
        || (unsigned int v6 = *(unsigned __int16 *)(*(void *)(a1 + 536) + 2 * v28), v6 >> 11 > 0x1A))
      {
        unsigned int v6 = utext_next32(ut);
        unsigned int v9 = 1;
      }

      else
      {
        *(_DWORD *)(a1 + 528) = v28 + 1;
        unsigned int v9 = 1;
      }

      goto LABEL_11;
    }

    if (v9 <= 1) {
      unsigned int v9 = 1;
    }
  }

  int64_t result = v35;
  if ((_DWORD)v35 == v30)
  {
    utext_setNativeIndex(ut, v31);
    utext_next32(ut);
    int64_t result = utext_getNativeIndex(ut);
    *(_DWORD *)(a1 + 672) = 0;
  }

  *(_DWORD *)(a1 + 668) = result;
  return result;
}

int64_t sub_1807F6EC4(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(*(void *)(a1 + 632) + 8LL);
  uint64_t v3 = v2[1];
  unsigned int v34 = v2[2];
  *(_DWORD *)(a1 + 672) = 0;
  *(_DWORD *)(a1 + 712) = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 668);
  ut = (UText *)(a1 + 488);
  uint64_t v5 = (int)v4 - *(void *)(a1 + 520);
  if (v5 < 0 || v5 >= *(int *)(a1 + 516) || *(unsigned __int16 *)(*(void *)(a1 + 536) + 2 * v5) >> 10 > 0x36u)
  {
    utext_setNativeIndex(ut, (int)v4);
    LODWORD(v5) = *(_DWORD *)(a1 + 528);
  }

  else
  {
    *(_DWORD *)(a1 + 528) = v5;
  }

  if ((int)v5 >= *(_DWORD *)(a1 + 532)
    || (unsigned int v6 = *(unsigned __int16 *)(*(void *)(a1 + 536) + 2LL * (int)v5), v6 >> 11 > 0x1A))
  {
    unsigned int v6 = utext_next32(ut);
    if (v6 == -1)
    {
      *(_BYTE *)(a1 + 760) = 1;
      return 0xFFFFFFFFLL;
    }
  }

  else
  {
    *(_DWORD *)(a1 + 528) = v5 + 1;
  }

  int v30 = v4;
  int64_t v31 = (int)v4;
  UChar32 v7 = v2 + 5;
  uint64_t v8 = v2[4] & 2;
  unsigned int v9 = ((v2[4] & 2) >> 1) ^ 1;
  uint64_t v10 = v3;
  uint64_t v35 = v4;
LABEL_11:
  uint64_t v33 = v6 >> 6;
  int v32 = v6 & 0x3F;
  uint64_t v11 = (int)v6;
  while (1)
  {
    if ((_DWORD)v11 == -1)
    {
      if (v9 == 2) {
        break;
      }
      int v13 = 0;
      unsigned int v9 = 2;
      uint64_t v8 = 1LL;
    }

    else if (v9 == 1)
    {
      if ((int)v11 <= 255 && (uint64_t v12 = *(void *)(a1 + 648)) != 0)
      {
        uint64_t v8 = *(unsigned __int16 *)(v12 + 2 * v11);
      }

      else
      {
        uint64_t v14 = *(unsigned int *)(a1 + 664);
        if ((int)v14 < 1)
        {
LABEL_24:
          uint64_t v16 = *(void *)(*(void *)(a1 + 632) + 48LL);
          uint64_t v17 = *(void *)(v16 + 8);
          if (WORD1(v11))
          {
            if (WORD1(v11) > 0x10u)
            {
              int v18 = *(_DWORD *)(v16 + 20) - 1;
            }

            else if (*(_DWORD *)(v16 + 24) <= (int)v11)
            {
              int v18 = *(_DWORD *)(v16 + 20) - 2;
            }

            else
            {
              int v18 = ucptrie_internalSmallIndex((uint64_t *)v16, v11);
            }
          }

          else
          {
            int v18 = v32 + *(unsigned __int16 *)(*(void *)v16 + 2 * v33);
          }

          uint64_t v8 = *(unsigned __int16 *)(v17 + 2LL * v18);
          int v19 = *(_DWORD *)(a1 + 712);
          *(_DWORD *)(a1 + 712) = v19;
        }

        else
        {
          int64_t v15 = (unsigned __int16 *)(*(void *)(a1 + 656) + 4LL);
          while ((_DWORD)v11 != *((_DWORD *)v15 - 1))
          {
            v15 += 4;
            if (!--v14) {
              goto LABEL_24;
            }
          }

          uint64_t v8 = *v15;
        }
      }

      int v13 = 1;
      unsigned int v9 = 1;
    }

    else
    {
      int v13 = 0;
    }

    int v20 = *((unsigned __int8 *)v7 + v10 + v8 + 3);
    uint64_t v10 = (v3 * v20);
    int v21 = (char *)v7 + v10;
    uint64_t v22 = *((unsigned __int8 *)v7 + v10);
    if (*((_BYTE *)v7 + v10))
    {
      if ((_DWORD)v22 == 1)
      {
        if (v9)
        {
          uint64_t v23 = *(unsigned int *)(a1 + 528);
          else {
            uint64_t v35 = (*(uint64_t (**)(UText *))(*(void *)(a1 + 544) + 64LL))(ut);
          }
        }

        *(_DWORD *)(a1 + 672) = v21[2];
      }

      else
      {
        uint64_t v24 = *(unsigned int *)(*(void *)(a1 + 768) + 4 * v22);
        if ((v24 & 0x80000000) == 0)
        {
          *(_DWORD *)(a1 + 672) = v21[2];
          *(_DWORD *)(a1 + 668) = v24;
          return v24;
        }
      }
    }

    unint64_t v25 = v21[1];
    if (v25 >= 2)
    {
      uint64_t v26 = *(unsigned int *)(a1 + 528);
      else {
        LODWORD(v27) = (*(uint64_t (**)(UText *))(*(void *)(a1 + 544) + 64LL))(ut);
      }
      *(_DWORD *)(*(void *)(a1 + 768) + 4 * v25) = v27;
    }

    if (!v20) {
      break;
    }
    if (v13)
    {
      uint64_t v28 = *(int *)(a1 + 528);
      if ((int)v28 >= *(_DWORD *)(a1 + 532)
        || (unsigned int v6 = *(unsigned __int16 *)(*(void *)(a1 + 536) + 2 * v28), v6 >> 11 > 0x1A))
      {
        unsigned int v6 = utext_next32(ut);
        unsigned int v9 = 1;
      }

      else
      {
        *(_DWORD *)(a1 + 528) = v28 + 1;
        unsigned int v9 = 1;
      }

      goto LABEL_11;
    }

    if (v9 <= 1) {
      unsigned int v9 = 1;
    }
  }

  int64_t result = v35;
  if ((_DWORD)v35 == v30)
  {
    utext_setNativeIndex(ut, v31);
    utext_next32(ut);
    int64_t result = utext_getNativeIndex(ut);
    *(_DWORD *)(a1 + 672) = 0;
  }

  *(_DWORD *)(a1 + 668) = result;
  return result;
}

int64_t sub_1807F7244(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(*(void *)(a1 + 632) + 8LL);
  uint64_t v3 = v2[1];
  unsigned int v34 = v2[2];
  *(_DWORD *)(a1 + 672) = 0;
  *(_DWORD *)(a1 + 712) = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 668);
  ut = (UText *)(a1 + 488);
  uint64_t v5 = (int)v4 - *(void *)(a1 + 520);
  if (v5 < 0 || v5 >= *(int *)(a1 + 516) || *(unsigned __int16 *)(*(void *)(a1 + 536) + 2 * v5) >> 10 > 0x36u)
  {
    utext_setNativeIndex(ut, (int)v4);
    LODWORD(v5) = *(_DWORD *)(a1 + 528);
  }

  else
  {
    *(_DWORD *)(a1 + 528) = v5;
  }

  if ((int)v5 >= *(_DWORD *)(a1 + 532)
    || (unsigned int v6 = *(unsigned __int16 *)(*(void *)(a1 + 536) + 2LL * (int)v5), v6 >> 11 > 0x1A))
  {
    unsigned int v6 = utext_next32(ut);
    if (v6 == -1)
    {
      *(_BYTE *)(a1 + 760) = 1;
      return 0xFFFFFFFFLL;
    }
  }

  else
  {
    *(_DWORD *)(a1 + 528) = v5 + 1;
  }

  int v30 = v4;
  int64_t v31 = (int)v4;
  UChar32 v7 = v2 + 5;
  uint64_t v8 = v2[4] & 2;
  unsigned int v9 = ((v2[4] & 2) >> 1) ^ 1;
  uint64_t v10 = v3;
  uint64_t v35 = v4;
LABEL_11:
  uint64_t v33 = v6 >> 6;
  int v32 = v6 & 0x3F;
  uint64_t v11 = (int)v6;
  while (1)
  {
    if ((_DWORD)v11 == -1)
    {
      if (v9 == 2) {
        break;
      }
      int v13 = 0;
      unsigned int v9 = 2;
      uint64_t v8 = 1LL;
    }

    else if (v9 == 1)
    {
      if ((int)v11 <= 255 && (uint64_t v12 = *(void *)(a1 + 648)) != 0)
      {
        uint64_t v8 = *(unsigned __int16 *)(v12 + 2 * v11);
      }

      else
      {
        uint64_t v14 = *(unsigned int *)(a1 + 664);
        if ((int)v14 < 1)
        {
LABEL_24:
          uint64_t v16 = *(void *)(*(void *)(a1 + 632) + 48LL);
          uint64_t v17 = *(void *)(v16 + 8);
          if (WORD1(v11))
          {
            if (WORD1(v11) > 0x10u)
            {
              int v18 = *(_DWORD *)(v16 + 20) - 1;
            }

            else if (*(_DWORD *)(v16 + 24) <= (int)v11)
            {
              int v18 = *(_DWORD *)(v16 + 20) - 2;
            }

            else
            {
              int v18 = ucptrie_internalSmallIndex((uint64_t *)v16, v11);
            }
          }

          else
          {
            int v18 = v32 + *(unsigned __int16 *)(*(void *)v16 + 2 * v33);
          }

          uint64_t v8 = *(unsigned __int8 *)(v17 + v18);
          int v19 = *(_DWORD *)(a1 + 712);
          *(_DWORD *)(a1 + 712) = v19;
        }

        else
        {
          int64_t v15 = (unsigned __int16 *)(*(void *)(a1 + 656) + 4LL);
          while ((_DWORD)v11 != *((_DWORD *)v15 - 1))
          {
            v15 += 4;
            if (!--v14) {
              goto LABEL_24;
            }
          }

          uint64_t v8 = *v15;
        }
      }

      int v13 = 1;
      unsigned int v9 = 1;
    }

    else
    {
      int v13 = 0;
    }

    int v20 = *(unsigned __int16 *)((char *)v7 + 2 * v8 + v10 + 6);
    uint64_t v10 = (v3 * v20);
    int v21 = (char *)v7 + v10;
    uint64_t v22 = *(unsigned __int16 *)((char *)v7 + v10);
    if (*(_WORD *)((char *)v7 + v10))
    {
      if ((_DWORD)v22 == 1)
      {
        if (v9)
        {
          uint64_t v23 = *(unsigned int *)(a1 + 528);
          else {
            uint64_t v35 = (*(uint64_t (**)(UText *))(*(void *)(a1 + 544) + 64LL))(ut);
          }
        }

        *(_DWORD *)(a1 + 672) = *((unsigned __int16 *)v21 + 2);
      }

      else
      {
        uint64_t v24 = *(unsigned int *)(*(void *)(a1 + 768) + 4 * v22);
        if ((v24 & 0x80000000) == 0)
        {
          *(_DWORD *)(a1 + 672) = *((unsigned __int16 *)v21 + 2);
          *(_DWORD *)(a1 + 668) = v24;
          return v24;
        }
      }
    }

    unint64_t v25 = *((unsigned __int16 *)v21 + 1);
    if (v25 >= 2)
    {
      uint64_t v26 = *(unsigned int *)(a1 + 528);
      else {
        LODWORD(v27) = (*(uint64_t (**)(UText *))(*(void *)(a1 + 544) + 64LL))(ut);
      }
      *(_DWORD *)(*(void *)(a1 + 768) + 4 * v25) = v27;
    }

    if (!v20) {
      break;
    }
    if (v13)
    {
      uint64_t v28 = *(int *)(a1 + 528);
      if ((int)v28 >= *(_DWORD *)(a1 + 532)
        || (unsigned int v6 = *(unsigned __int16 *)(*(void *)(a1 + 536) + 2 * v28), v6 >> 11 > 0x1A))
      {
        unsigned int v6 = utext_next32(ut);
        unsigned int v9 = 1;
      }

      else
      {
        *(_DWORD *)(a1 + 528) = v28 + 1;
        unsigned int v9 = 1;
      }

      goto LABEL_11;
    }

    if (v9 <= 1) {
      unsigned int v9 = 1;
    }
  }

  int64_t result = v35;
  if ((_DWORD)v35 == v30)
  {
    utext_setNativeIndex(ut, v31);
    utext_next32(ut);
    int64_t result = utext_getNativeIndex(ut);
    *(_DWORD *)(a1 + 672) = 0;
  }

  *(_DWORD *)(a1 + 668) = result;
  return result;
}

int64_t sub_1807F75C4(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(*(void *)(a1 + 632) + 8LL);
  uint64_t v3 = v2[1];
  unsigned int v34 = v2[2];
  *(_DWORD *)(a1 + 672) = 0;
  *(_DWORD *)(a1 + 712) = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 668);
  ut = (UText *)(a1 + 488);
  uint64_t v5 = (int)v4 - *(void *)(a1 + 520);
  if (v5 < 0 || v5 >= *(int *)(a1 + 516) || *(unsigned __int16 *)(*(void *)(a1 + 536) + 2 * v5) >> 10 > 0x36u)
  {
    utext_setNativeIndex(ut, (int)v4);
    LODWORD(v5) = *(_DWORD *)(a1 + 528);
  }

  else
  {
    *(_DWORD *)(a1 + 528) = v5;
  }

  if ((int)v5 >= *(_DWORD *)(a1 + 532)
    || (unsigned int v6 = *(unsigned __int16 *)(*(void *)(a1 + 536) + 2LL * (int)v5), v6 >> 11 > 0x1A))
  {
    unsigned int v6 = utext_next32(ut);
    if (v6 == -1)
    {
      *(_BYTE *)(a1 + 760) = 1;
      return 0xFFFFFFFFLL;
    }
  }

  else
  {
    *(_DWORD *)(a1 + 528) = v5 + 1;
  }

  int v30 = v4;
  int64_t v31 = (int)v4;
  UChar32 v7 = v2 + 5;
  uint64_t v8 = v2[4] & 2;
  unsigned int v9 = ((v2[4] & 2) >> 1) ^ 1;
  uint64_t v10 = v3;
  uint64_t v35 = v4;
LABEL_11:
  uint64_t v33 = v6 >> 6;
  int v32 = v6 & 0x3F;
  uint64_t v11 = (int)v6;
  while (1)
  {
    if ((_DWORD)v11 == -1)
    {
      if (v9 == 2) {
        break;
      }
      int v13 = 0;
      unsigned int v9 = 2;
      uint64_t v8 = 1LL;
    }

    else if (v9 == 1)
    {
      if ((int)v11 <= 255 && (uint64_t v12 = *(void *)(a1 + 648)) != 0)
      {
        uint64_t v8 = *(unsigned __int16 *)(v12 + 2 * v11);
      }

      else
      {
        uint64_t v14 = *(unsigned int *)(a1 + 664);
        if ((int)v14 < 1)
        {
LABEL_24:
          uint64_t v16 = *(void *)(*(void *)(a1 + 632) + 48LL);
          uint64_t v17 = *(void *)(v16 + 8);
          if (WORD1(v11))
          {
            if (WORD1(v11) > 0x10u)
            {
              int v18 = *(_DWORD *)(v16 + 20) - 1;
            }

            else if (*(_DWORD *)(v16 + 24) <= (int)v11)
            {
              int v18 = *(_DWORD *)(v16 + 20) - 2;
            }

            else
            {
              int v18 = ucptrie_internalSmallIndex((uint64_t *)v16, v11);
            }
          }

          else
          {
            int v18 = v32 + *(unsigned __int16 *)(*(void *)v16 + 2 * v33);
          }

          uint64_t v8 = *(unsigned __int16 *)(v17 + 2LL * v18);
          int v19 = *(_DWORD *)(a1 + 712);
          *(_DWORD *)(a1 + 712) = v19;
        }

        else
        {
          int64_t v15 = (unsigned __int16 *)(*(void *)(a1 + 656) + 4LL);
          while ((_DWORD)v11 != *((_DWORD *)v15 - 1))
          {
            v15 += 4;
            if (!--v14) {
              goto LABEL_24;
            }
          }

          uint64_t v8 = *v15;
        }
      }

      int v13 = 1;
      unsigned int v9 = 1;
    }

    else
    {
      int v13 = 0;
    }

    int v20 = *(unsigned __int16 *)((char *)v7 + 2 * v8 + v10 + 6);
    uint64_t v10 = (v3 * v20);
    int v21 = (char *)v7 + v10;
    uint64_t v22 = *(unsigned __int16 *)((char *)v7 + v10);
    if (*(_WORD *)((char *)v7 + v10))
    {
      if ((_DWORD)v22 == 1)
      {
        if (v9)
        {
          uint64_t v23 = *(unsigned int *)(a1 + 528);
          else {
            uint64_t v35 = (*(uint64_t (**)(UText *))(*(void *)(a1 + 544) + 64LL))(ut);
          }
        }

        *(_DWORD *)(a1 + 672) = *((unsigned __int16 *)v21 + 2);
      }

      else
      {
        uint64_t v24 = *(unsigned int *)(*(void *)(a1 + 768) + 4 * v22);
        if ((v24 & 0x80000000) == 0)
        {
          *(_DWORD *)(a1 + 672) = *((unsigned __int16 *)v21 + 2);
          *(_DWORD *)(a1 + 668) = v24;
          return v24;
        }
      }
    }

    unint64_t v25 = *((unsigned __int16 *)v21 + 1);
    if (v25 >= 2)
    {
      uint64_t v26 = *(unsigned int *)(a1 + 528);
      else {
        LODWORD(v27) = (*(uint64_t (**)(UText *))(*(void *)(a1 + 544) + 64LL))(ut);
      }
      *(_DWORD *)(*(void *)(a1 + 768) + 4 * v25) = v27;
    }

    if (!v20) {
      break;
    }
    if (v13)
    {
      uint64_t v28 = *(int *)(a1 + 528);
      if ((int)v28 >= *(_DWORD *)(a1 + 532)
        || (unsigned int v6 = *(unsigned __int16 *)(*(void *)(a1 + 536) + 2 * v28), v6 >> 11 > 0x1A))
      {
        unsigned int v6 = utext_next32(ut);
        unsigned int v9 = 1;
      }

      else
      {
        *(_DWORD *)(a1 + 528) = v28 + 1;
        unsigned int v9 = 1;
      }

      goto LABEL_11;
    }

    if (v9 <= 1) {
      unsigned int v9 = 1;
    }
  }

  int64_t result = v35;
  if ((_DWORD)v35 == v30)
  {
    utext_setNativeIndex(ut, v31);
    utext_next32(ut);
    int64_t result = utext_getNativeIndex(ut);
    *(_DWORD *)(a1 + 672) = 0;
  }

  *(_DWORD *)(a1 + 668) = result;
  return result;
}

uint64_t icu::RuleBasedBreakIterator::handleSafePrevious(icu::RuleBasedBreakIterator *this, int a2)
{
  uint64_t v4 = *((void *)this + 79);
  uint64_t v5 = *(void *)(v4 + 16);
  int ValueWidth = ucptrie_getValueWidth(*(void *)(v4 + 48));
  uint64_t v7 = *(void *)(*((void *)this + 79) + 16LL);
  uint64_t v8 = a2 - *((void *)this + 65);
  if ((*(_BYTE *)(v5 + 16) & 4) != 0)
  {
    if (ValueWidth != 2)
    {
      if (v8 < 0
        || (uint64_t v12 = *((int *)this + 129), v8 >= v12)
        || *(unsigned __int16 *)(*((void *)this + 67) + 2 * v8) >> 10 > 0x36u)
      {
        utext_setNativeIndex((UText *)((char *)this + 488), a2);
        if (!*((void *)this + 79)) {
          return 0xFFFFFFFFLL;
        }
        LODWORD(icu::LocaleBuilder::setVariant((uint64_t)this, v7, v8) = *((_DWORD *)this + 132);
        LODWORD(icu::LocaleBuilder::setScript((uint64_t)this, v11, v12) = *((_DWORD *)this + 129);
      }

      else
      {
        *((_DWORD *)this + 132) = v8;
      }

      if ((int)v8 <= (int)v12)
      {
      }

      else if (!(*(uint64_t (**)(char *))(*((void *)this + 68) + 64LL))((char *)this + 488))
      {
        return 0xFFFFFFFFLL;
      }

      int v21 = *((_DWORD *)this + 132);
      BOOL v14 = __OFSUB__(v21, 1);
      int v22 = v21 - 1;
      if (v22 < 0 != v14
        || (uint64_t v16 = *(unsigned __int16 *)(*((void *)this + 67) + 2LL * v22), v16 >> 11 > 0x1A))
      {
        uint64_t v16 = utext_previous32((UText *)((char *)this + 488));
        if ((_DWORD)v16 == -1) {
          goto LABEL_120;
        }
      }

      else
      {
        *((_DWORD *)this + 132) = v22;
      }

      unsigned int v51 = *(_DWORD *)(v7 + 4);
      do
      {
        uint64_t v52 = *(void *)(*((void *)this + 79) + 48LL);
        uint64_t v53 = *(void *)(v52 + 8);
        if (WORD1(v16))
        {
          if (WORD1(v16) > 0x10u)
          {
            int v54 = *(_DWORD *)(v52 + 20) - 1;
          }

          else if (*(_DWORD *)(v52 + 24) <= (int)v16)
          {
            int v54 = *(_DWORD *)(v52 + 20) - 2;
          }

          else
          {
            int v54 = ucptrie_internalSmallIndex((uint64_t *)v52, v16);
          }
        }

        else
        {
          int v54 = (v16 & 0x3F) + *(unsigned __int16 *)(*(void *)v52 + 2LL * (v16 >> 6));
        }

        uint64_t v55 = v7 + 20 + v51 + *(unsigned __int16 *)(v53 + 2LL * v54);
        int v56 = *(unsigned __int8 *)(v55 + 3);
        if (!*(_BYTE *)(v55 + 3)) {
          break;
        }
        int v57 = *(_DWORD *)(v7 + 4);
        int v58 = *((_DWORD *)this + 132);
        BOOL v14 = __OFSUB__(v58, 1);
        int v59 = v58 - 1;
        if (v59 < 0 != v14
          || (uint64_t v16 = *(unsigned __int16 *)(*((void *)this + 67) + 2LL * v59),
              v16 >> 11 > 0x1A))
        {
          uint64_t v16 = utext_previous32((UText *)((char *)this + 488));
        }

        else
        {
          *((_DWORD *)this + 132) = v59;
        }

        unsigned int v51 = v57 * v56;
      }

      while ((_DWORD)v16 != -1);
      goto LABEL_120;
    }

    if (v8 < 0
      || (uint64_t v10 = *((int *)this + 129), v8 >= v10)
      || *(unsigned __int16 *)(*((void *)this + 67) + 2 * v8) >> 10 > 0x36u)
    {
      utext_setNativeIndex((UText *)((char *)this + 488), a2);
      if (!*((void *)this + 79)) {
        return 0xFFFFFFFFLL;
      }
      LODWORD(icu::LocaleBuilder::setVariant((uint64_t)this, v7, v8) = *((_DWORD *)this + 132);
      LODWORD(icu::LocaleBuilder::setRegion((uint64_t)this, v9, v10) = *((_DWORD *)this + 129);
    }

    else
    {
      *((_DWORD *)this + 132) = v8;
    }

    if ((int)v8 <= (int)v10)
    {
    }

    else if (!(*(uint64_t (**)(char *))(*((void *)this + 68) + 64LL))((char *)this + 488))
    {
      return 0xFFFFFFFFLL;
    }

    int v17 = *((_DWORD *)this + 132);
    BOOL v14 = __OFSUB__(v17, 1);
    int v18 = v17 - 1;
    if (v18 < 0 != v14
      || (uint64_t v16 = *(unsigned __int16 *)(*((void *)this + 67) + 2LL * v18), v16 >> 11 > 0x1A))
    {
      uint64_t v16 = utext_previous32((UText *)((char *)this + 488));
      if ((_DWORD)v16 == -1) {
        goto LABEL_120;
      }
    }

    else
    {
      *((_DWORD *)this + 132) = v18;
    }

    unsigned int v33 = *(_DWORD *)(v7 + 4);
    do
    {
      uint64_t v34 = *(void *)(*((void *)this + 79) + 48LL);
      uint64_t v35 = *(void *)(v34 + 8);
      if (WORD1(v16))
      {
        if (WORD1(v16) > 0x10u)
        {
          int v36 = *(_DWORD *)(v34 + 20) - 1;
        }

        else if (*(_DWORD *)(v34 + 24) <= (int)v16)
        {
          int v36 = *(_DWORD *)(v34 + 20) - 2;
        }

        else
        {
          int v36 = ucptrie_internalSmallIndex((uint64_t *)v34, v16);
        }
      }

      else
      {
        int v36 = (v16 & 0x3F) + *(unsigned __int16 *)(*(void *)v34 + 2LL * (v16 >> 6));
      }

      uint64_t v37 = v7 + 20 + v33 + *(unsigned __int8 *)(v35 + v36);
      int v38 = *(unsigned __int8 *)(v37 + 3);
      if (!*(_BYTE *)(v37 + 3)) {
        break;
      }
      int v39 = *(_DWORD *)(v7 + 4);
      int v40 = *((_DWORD *)this + 132);
      BOOL v14 = __OFSUB__(v40, 1);
      int v41 = v40 - 1;
      if (v41 < 0 != v14
        || (uint64_t v16 = *(unsigned __int16 *)(*((void *)this + 67) + 2LL * v41), v16 >> 11 > 0x1A))
      {
        uint64_t v16 = utext_previous32((UText *)((char *)this + 488));
      }

      else
      {
        *((_DWORD *)this + 132) = v41;
      }

      unsigned int v33 = v39 * v38;
    }

    while ((_DWORD)v16 != -1);
    goto LABEL_120;
  }

  if (ValueWidth != 2)
  {
    if (v8 < 0
      || (uint64_t v11 = *((int *)this + 129), v8 >= v11)
      || *(unsigned __int16 *)(*((void *)this + 67) + 2 * v8) >> 10 > 0x36u)
    {
      utext_setNativeIndex((UText *)((char *)this + 488), a2);
      if (!*((void *)this + 79)) {
        return 0xFFFFFFFFLL;
      }
      LODWORD(icu::LocaleBuilder::setVariant((uint64_t)this, v7, v8) = *((_DWORD *)this + 132);
      LODWORD(v11) = *((_DWORD *)this + 129);
    }

    else
    {
      *((_DWORD *)this + 132) = v8;
    }

    if ((int)v8 <= (int)v11)
    {
    }

    else if (!(*(uint64_t (**)(char *))(*((void *)this + 68) + 64LL))((char *)this + 488))
    {
      return 0xFFFFFFFFLL;
    }

    int v19 = *((_DWORD *)this + 132);
    BOOL v14 = __OFSUB__(v19, 1);
    int v20 = v19 - 1;
    if (v20 < 0 != v14
      || (uint64_t v16 = *(unsigned __int16 *)(*((void *)this + 67) + 2LL * v20), v16 >> 11 > 0x1A))
    {
      uint64_t v16 = utext_previous32((UText *)((char *)this + 488));
      if ((_DWORD)v16 == -1) {
        goto LABEL_120;
      }
    }

    else
    {
      *((_DWORD *)this + 132) = v20;
    }

    unsigned int v42 = *(_DWORD *)(v7 + 4);
    do
    {
      uint64_t v43 = *(void *)(*((void *)this + 79) + 48LL);
      uint64_t v44 = *(void *)(v43 + 8);
      if (WORD1(v16))
      {
        if (WORD1(v16) > 0x10u)
        {
          int v45 = *(_DWORD *)(v43 + 20) - 1;
        }

        else if (*(_DWORD *)(v43 + 24) <= (int)v16)
        {
          int v45 = *(_DWORD *)(v43 + 20) - 2;
        }

        else
        {
          int v45 = ucptrie_internalSmallIndex((uint64_t *)v43, v16);
        }
      }

      else
      {
        int v45 = (v16 & 0x3F) + *(unsigned __int16 *)(*(void *)v43 + 2LL * (v16 >> 6));
      }

      uint64_t v46 = v7 + 20 + v42 + 2LL * *(unsigned __int16 *)(v44 + 2LL * v45);
      int v47 = *(unsigned __int16 *)(v46 + 6);
      if (!*(_WORD *)(v46 + 6)) {
        break;
      }
      int v48 = *(_DWORD *)(v7 + 4);
      int v49 = *((_DWORD *)this + 132);
      BOOL v14 = __OFSUB__(v49, 1);
      int v50 = v49 - 1;
      if (v50 < 0 != v14
        || (uint64_t v16 = *(unsigned __int16 *)(*((void *)this + 67) + 2LL * v50), v16 >> 11 > 0x1A))
      {
        uint64_t v16 = utext_previous32((UText *)((char *)this + 488));
      }

      else
      {
        *((_DWORD *)this + 132) = v50;
      }

      unsigned int v42 = v48 * v47;
    }

    while ((_DWORD)v16 != -1);
    goto LABEL_120;
  }

  if (v8 < 0
    || (uint64_t v9 = *((int *)this + 129), v8 >= v9)
    || *(unsigned __int16 *)(*((void *)this + 67) + 2 * v8) >> 10 > 0x36u)
  {
    utext_setNativeIndex((UText *)((char *)this + 488), a2);
    if (!*((void *)this + 79)) {
      return 0xFFFFFFFFLL;
    }
    LODWORD(icu::LocaleBuilder::setVariant((uint64_t)this, v7, v8) = *((_DWORD *)this + 132);
    LODWORD(v9) = *((_DWORD *)this + 129);
  }

  else
  {
    *((_DWORD *)this + 132) = v8;
  }

  if ((int)v8 > (int)v9)
  {
    goto LABEL_41;
  }

LABEL_41:
  int v13 = *((_DWORD *)this + 132);
  BOOL v14 = __OFSUB__(v13, 1);
  int v15 = v13 - 1;
  if (v15 < 0 == v14)
  {
    uint64_t v16 = *(unsigned __int16 *)(*((void *)this + 67) + 2LL * v15);
    if (v16 >> 11 <= 0x1A)
    {
      *((_DWORD *)this + 132) = v15;
      goto LABEL_58;
    }
  }

  uint64_t v16 = utext_previous32((UText *)((char *)this + 488));
  if ((_DWORD)v16 != -1)
  {
LABEL_58:
    unsigned int v24 = *(_DWORD *)(v7 + 4);
    do
    {
      uint64_t v25 = *(void *)(*((void *)this + 79) + 48LL);
      uint64_t v26 = *(void *)(v25 + 8);
      if (WORD1(v16))
      {
        if (WORD1(v16) > 0x10u)
        {
          int v27 = *(_DWORD *)(v25 + 20) - 1;
        }

        else if (*(_DWORD *)(v25 + 24) <= (int)v16)
        {
          int v27 = *(_DWORD *)(v25 + 20) - 2;
        }

        else
        {
          int v27 = ucptrie_internalSmallIndex((uint64_t *)v25, v16);
        }
      }

      else
      {
        int v27 = (v16 & 0x3F) + *(unsigned __int16 *)(*(void *)v25 + 2LL * (v16 >> 6));
      }

      uint64_t v28 = v7 + 20 + v24 + 2LL * *(unsigned __int8 *)(v26 + v27);
      int v29 = *(unsigned __int16 *)(v28 + 6);
      if (!*(_WORD *)(v28 + 6)) {
        break;
      }
      int v30 = *(_DWORD *)(v7 + 4);
      int v31 = *((_DWORD *)this + 132);
      BOOL v14 = __OFSUB__(v31, 1);
      int v32 = v31 - 1;
      if (v32 < 0 != v14
        || (uint64_t v16 = *(unsigned __int16 *)(*((void *)this + 67) + 2LL * v32), v16 >> 11 > 0x1A))
      {
        uint64_t v16 = utext_previous32((UText *)((char *)this + 488));
      }

      else
      {
        *((_DWORD *)this + 132) = v32;
      }

      unsigned int v24 = v30 * v29;
    }

    while ((_DWORD)v16 != -1);
  }

  if ((_DWORD)v21 == a5) {
    goto LABEL_96;
  }
  if (v23 < 0xE0)
  {
    int v39 = v23 & 0x1F;
LABEL_50:
    int v40 = *(unsigned __int8 *)(a4 + (int)v21) ^ 0x80;
    if (v40 > 0x3F) {
      goto LABEL_87;
    }
    LODWORD(v23) = v40 | (v39 << 6);
    int v41 = *(void *)v52;
    if (((v39 >> 5) & 0x1FFFFF) <= 0x1A)
    {
      unsigned int v42 = v23 >> 5;
LABEL_71:
      uint64_t v44 = (v40 & 0x1F) + 4 * *(unsigned __int16 *)(v41 + 2LL * v42);
      goto LABEL_72;
    }

    if (!WORD1(v23))
    {
      else {
        uint64_t v43 = 320;
      }
      unsigned int v42 = v43 + (v23 >> 5);
      goto LABEL_71;
    }

    if (v23 < 0x110000)
    {
      if ((int)v23 < *(_DWORD *)(v52 + 44))
      {
        unsigned int v42 = ((v23 >> 5) & 0x3F) + *(unsigned __int16 *)(v41 + 2LL * ((v39 >> 5) + 2080));
        goto LABEL_71;
      }

      uint64_t v44 = *(_DWORD *)(v52 + 48);
    }

    else
    {
      uint64_t v44 = *(_DWORD *)(v52 + 24) + 128;
    }

  if (v6 && v32 != v5)
  {
    uint64_t v44 = v5 - v32;
    do
    {
      *(_DWORD *)unsigned int v6 = v9;
      v6 += 4LL;
      ++v9;
      int v45 = __CFADD__(v44++, 1LL);
    }

    while (!v45);
  }

  int v45 = *a2 > 0 || (unint64_t)v2 >= v4;
  *(void *)(result + 16) = v2;
  *(void *)(result + 32) = v32;
  *(void *)(result + 48) = v6;
  return result;
}

    unsigned int v24 = v18 >> 4;
    if (v18 >> 4 < v13)
    {
      uint64_t v25 = v13 - v24;
      uint64_t v26 = (_DWORD *)(*(void *)v0 + 4LL * v24);
      int v27 = (char *)&v0[8] + v24;
      do
      {
        *v27++ = 0;
        *v26++ = *v16;
        --v25;
      }

      while (v25);
    }

    uint64_t v23 = v12;
    goto LABEL_45;
  }

  return 0LL;
}

    int v17 = 65533;
    goto LABEL_42;
  }

  return sub_180864A30(v11, __s, v5, a4);
}

      int v21 = v22 + v20;
      goto LABEL_42;
    }

  *(_DWORD *)(a1 + 40) = v5;
  if (a3 && v5 < *(void *)(a1 + 16)) {
    return 1LL;
  }
  if (a3) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = v5 <= 0;
  }
  return !v9;
}

    ++v10;
  }

  if ((uint64_t)v10 < *(int *)(a4 + 12))
  {
    int v15 = *(unsigned int *)(a4 + 12);
    goto LABEL_7;
  }

  return v30;
}

    int v39 = sub_1808CC550(v35, v36, -v34);
    int v40 = a1[1] + v34;
    *a1 = v39;
    a1[1] = v40;
    goto LABEL_42;
  }

  int v18 = *(unsigned __int8 *)(a3 + 9);
  if (!*(_BYTE *)(a3 + 9) && (v12 & 0x70) == 0 && *(_DWORD *)a3 == 1)
  {
    int v38 = *(_DWORD *)(a3 + 4);
    uint64_t v69 = 0;
    *((_BYTE *)a1 + 8) = v11;
    a1[1] = a2[1];
    sub_1808C77A4(a1, a4, (char *)a2 + 9, *a2, &v69, a6);
    uint64_t v34 = v38 - a1[1];
    if (v34 >= 0) {
      goto LABEL_42;
    }
    int v36 = *a1;
    if ((int)v36 - v34 > *a4)
    {
      uint64_t v34 = v36 - *a4;
      *a6 |= 0x800u;
      int v36 = *a1;
    }

    uint64_t v35 = (char *)a1 + 9;
    goto LABEL_41;
  }

  int v19 = *(_DWORD *)(a3 + 4);
  int v20 = a2[1];
  int v21 = v19 - v20;
  if (v19 != v20)
  {
    if (v21 >= 0)
    {
      int v22 = v21;
    }

    else
    {
      uint64_t v11 = v13;
      int v22 = (v20 - v19);
    }

    if (v21 < 0) {
      uint64_t v23 = a2;
    }
    else {
      uint64_t v23 = (int *)a3;
    }
    if (v21 < 0) {
      uint64_t v9 = (int *)a3;
    }
    unsigned int v24 = *v23;
    uint64_t v25 = *v9;
    if (*v23 + (int)v22 > v16 + *v9 + 1)
    {
      uint64_t v26 = v16 - v24;
      if (v14 < 0) {
        int v27 = -1;
      }
      else {
        int v27 = 1;
      }
      uint64_t v69 = v27;
      *((_BYTE *)a1 + 8) = *((_BYTE *)v23 + 8);
      a1[1] = v23[1];
      sub_1808C77A4(a1, a4, (char *)v23 + 9, v24, &v69, a6);
      if (v26 >= 1)
      {
        uint64_t v28 = sub_1808CC550((_BYTE *)a1 + 9, *a1, v26);
        int v29 = a1[1] - v26;
        *a1 = v28;
        a1[1] = v29;
      }

      if (v21 < 0) {
        goto LABEL_42;
      }
      int v30 = *((_BYTE *)a1 + 8) ^ a5;
LABEL_23:
      *((_BYTE *)a1 + 8) = v30;
LABEL_42:
      sub_1808C7A24((unsigned int *)a1, (uint64_t)a4, &v69, a6);
      return a1;
    }

    uint64_t v44 = v22 + 1;
    unsigned int v42 = v44 - 1;
    uint64_t v43 = dword_180A37120[(int)v22 - ((int)v44 - 1)];
    uint64_t v8 = v23;
LABEL_52:
    if (v14 < 0) {
      int v45 = -v43;
    }
    else {
      int v45 = v43;
    }
    uint64_t v46 = v24 + v22;
    if (v25 > v46) {
      uint64_t v46 = v25;
    }
    int v47 = (char *)a1 + 9;
    int v67 = v14;
    if (v46 >= v16 || v42 >= 1 && v8 == a1)
    {
      if (v46 <= 49) {
        uint64_t v46 = byte_180A37148[v46];
      }
      if (v46 < 0x5C)
      {
        int v68 = 0LL;
        int v49 = (char *)v70;
      }

      else
      {
        int v66 = v45;
        int v48 = (char *)uprv_malloc((v46 + 1));
        if (!v48)
        {
          uint64_t v37 = *a6 | 0x10;
          goto LABEL_111;
        }

        int v49 = v48;
        uint64_t v25 = *v9;
        int v68 = v48;
        int v45 = v66;
      }
    }

    else
    {
      int v68 = 0LL;
      int v49 = (char *)a1 + 9;
    }

    *((_BYTE *)a1 + 8) = v11 & 0x80;
    a1[1] = v9[1];
    if (v25 <= 49) {
      uint64_t v25 = byte_180A37148[v25];
    }
    uint64_t v52 = *v8;
    unsigned int v51 = (unsigned __int8 *)v8 + 9;
    int v50 = v52;
    if (v52 <= 49) {
      int v50 = byte_180A37148[v50];
    }
    uint64_t v53 = sub_1808CE154((char *)v9 + 9, v25, v51, v50, v42, v49, v45);
    int v54 = v53;
    *a1 = v53;
    if (v53 < 0)
    {
      int v54 = -v53;
      *a1 = -v53;
      *((_BYTE *)a1 + 8) ^= 0x80u;
    }

    uint64_t v69 = 0;
    if (v49 == v47)
    {
LABEL_86:
      if (v54 <= 49)
      {
        if (!v54)
        {
LABEL_95:
          *a1 = v54;
          sub_1808C7A24((unsigned int *)a1, (uint64_t)a4, &v69, a6);
          if (!*((_BYTE *)a1 + 9) && *a1 == 1 && v67 < 0 && (a1[2] & 0x70) == 0 && (*(_BYTE *)a6 & 0x20) == 0) {
            *((_BYTE *)a1 + 8) = a1[2] & 0x7F | ((a4[3] == 6) << 7);
          }
          if (v68) {
            uprv_free(v68);
          }
          return a1;
        }

        int v54 = byte_180A37148[v54];
      }

      int v57 = &v47[v54 - 1];
      do
      {
        if (*v57) {
          int v58 = 1;
        }
        else {
          int v58 = v54 == 1;
        }
        if (v58) {
          break;
        }
        --v54;
        --v57;
      }

      while (v57 >= v47);
      goto LABEL_95;
    }

    if (v54 <= v16)
    {
LABEL_85:
      sub_1808C77A4(a1, a4, v49, v54, &v69, a6);
      int v54 = *a1;
      goto LABEL_86;
    }

    if (v54 <= 0x31)
    {
      if (!v54)
      {
LABEL_84:
        *a1 = v54;
        goto LABEL_85;
      }

      int v54 = byte_180A37148[v54];
    }

    uint64_t v55 = &v49[v54 - 1];
    do
    {
      if (*v55) {
        int v56 = 1;
      }
      else {
        int v56 = v54 == 1;
      }
      if (v56) {
        break;
      }
      --v54;
      --v55;
    }

    while (v55 >= v49);
    goto LABEL_84;
  }

  unsigned int v24 = *(_DWORD *)a3;
  if (*(int *)a3 > 1 || v19 < a4[2] || v19 > a4[1] - v16 + 1 || v24 > v16 || (int v41 = *a2, (int)v41 > v16))
  {
LABEL_48:
    unsigned int v42 = 0;
    LODWORD(v22) = 0;
    uint64_t v25 = *a2;
    uint64_t v43 = 1;
    goto LABEL_52;
  }

  if (v14 < 0)
  {
    unsigned int v61 = v17 - v18;
    if (v17 - v18 < 1) {
      goto LABEL_48;
    }
    if (a1 != a2) {
      uprv_decNumberCopy((uint64_t)a1, (unsigned int *)a2);
    }
    *((_BYTE *)a1 + 9) = v61;
    int v62 = (char *)a1 + 9;
    int v63 = *a1;
    if (*a1 <= 49)
    {
      if (!v63)
      {
LABEL_133:
        *a1 = v63;
        return a1;
      }

      int v63 = byte_180A37148[v63];
    }

    unsigned int v64 = &v62[v63 - 1];
    do
    {
      if (*v64) {
        uint64_t v65 = 1;
      }
      else {
        uint64_t v65 = v63 == 1;
      }
      if (v65) {
        break;
      }
      --v63;
      --v64;
    }

    while (v64 >= v62);
    goto LABEL_133;
  }

  uint64_t v60 = v18 + v17;
  if (a1 != a2) {
    uprv_decNumberCopy((uint64_t)a1, (unsigned int *)a2);
  }
  *((_BYTE *)a1 + 9) = v60;
  return a1;
}

    int v41 = v32 + v25;
    if (v30 == 1)
    {
      *((_DWORD *)a4 + 2) = v41;
      uint64_t v79 = 0LL;
      unsigned int v6 = v74;
      goto LABEL_120;
    }

    if ((v30 & 0xFFFFFFFE) == 2)
    {
      unsigned int v24 = v29[1] + *(unsigned __int16 *)(v23 + 16 * v28 + 8);
      uint64_t v10 = v28;
      uint64_t v25 = v41;
      unsigned int v42 = v75;
      goto LABEL_110;
    }

    unsigned int v42 = v75;
    uint64_t v43 = *((void *)v75 + 80);
    else {
      uint64_t v10 = *(_DWORD *)(v43 + 16 * v28 + 12);
    }
    else {
      uint64_t v44 = *(__int16 *)(v23 + 16 * v28 + 10);
    }
    int v45 = *(__int16 *)(v43 + 16 * v27 + 42);
    unsigned int v94 = 0LL;
    unsigned int v92 = 0u;
    unsigned int v93 = 0u;
    v91 = 0u;
    uint64_t v90 = off_18971B688;
    LOWORD(v91) = 2;
    uint64_t v46 = (icu::Formattable *)(v74 + 112LL * v45);
    if (*((void *)v75 + 92))
    {
      CachedFormatter = icu::MessageFormat::getCachedFormatter(v75, v28);
      if (CachedFormatter)
      {
        LODWORD(v78) = v41;
        (*(void (**)(const void *, const icu::UnicodeString *, icu::Formattable *, void (***)(icu::ParsePosition *__hidden)))(*(void *)CachedFormatter + 56LL))( CachedFormatter,  a3,  v46,  &v77);
        uint64_t v25 = v78;
        if ((_DWORD)v78 == v41) {
          goto LABEL_113;
        }
LABEL_69:
        int v54 = v73;
LABEL_107:
        if (*v54 <= v45) {
          *int v54 = v45 + 1;
        }
        goto LABEL_109;
      }
    }

    if (v44)
    {
      int v48 = *((void *)v75 + 92);
      if (!v48 || !uhash_iget(v48, v28)) {
        break;
      }
    }

    int v88 = 0u;
    uint64_t v89 = 0u;
    unsigned int v86 = 0u;
    uint64_t v87 = 0u;
    icu::MessageFormat::getLiteralStringUntilNextArgument(v75, v10, (uint64_t)&v86);
    if (WORD4(v86) < 0x20u)
    {
      uint64_t v55 = a3;
      if ((*((__int16 *)a3 + 4) & 0x80000000) == 0)
      {
        uint64_t v25 = *((unsigned __int16 *)a3 + 4) >> 5;
        goto LABEL_92;
      }

      uint64_t v25 = *((_DWORD *)a3 + 3);
    }

    else
    {
      int v49 = *((unsigned __int16 *)a3 + 4);
      if (v41 < 0)
      {
        if ((SWORD4(v86) & 0x8000u) == 0) {
          unsigned int v51 = WORD4(v86) >> 5;
        }
        else {
          unsigned int v51 = HIDWORD(v86);
        }
        uint64_t v52 = 0;
        if ((v49 & 0x8000) != 0) {
          int v50 = *((_DWORD *)a3 + 3);
        }
        else {
          int v50 = v49 >> 5;
        }
      }

      else if ((v49 & 0x8000) != 0)
      {
        int v50 = *((_DWORD *)a3 + 3);
        if ((SWORD4(v86) & 0x8000u) == 0) {
          unsigned int v51 = WORD4(v86) >> 5;
        }
        else {
          unsigned int v51 = HIDWORD(v86);
        }
        if (v50 >= v41) {
          uint64_t v52 = v41;
        }
        else {
          uint64_t v52 = *((_DWORD *)a3 + 3);
        }
      }

      else
      {
        int v50 = v49 >> 5;
        if ((SWORD4(v86) & 0x8000u) == 0) {
          unsigned int v51 = WORD4(v86) >> 5;
        }
        else {
          unsigned int v51 = HIDWORD(v86);
        }
        if (v41 >= v49 >> 5) {
          uint64_t v52 = v49 >> 5;
        }
        else {
          uint64_t v52 = v41;
        }
      }

      if ((BYTE8(v86) & 1) != 0 || v51 < 1)
      {
LABEL_114:
        *((_DWORD *)a4 + 3) = v41;
        icu::UnicodeString::~UnicodeString(a4, (icu::UnicodeString *)&v86);
        goto LABEL_119;
      }

      if ((BYTE8(v86) & 2) != 0) {
        int v56 = (char *)&v86 + 10;
      }
      else {
        int v56 = (char *)*((void *)&v87 + 1);
      }
      int v57 = icu::UnicodeString::indexOf((uint64_t)a3, (uint64_t)v56, 0, v51, v52, v50 - v52);
      uint64_t v55 = a3;
      uint64_t v25 = v57;
    }

    if (v25 < 0) {
      goto LABEL_114;
    }
LABEL_92:
    memset(v85, 0, sizeof(v85));
    icu::UnicodeString::tempSubString(v55, v41, v25 - v41, (icu::UnicodeString *)v85);
    int v84 = 0LL;
    uint64_t v82 = 0u;
    int v83 = 0u;
    int v81 = 0u;
    uint64_t v80 = off_18971B688;
    LOWORD(v81) = 2;
    LOWORD(v95[0]) = 123;
    icu::UnicodeString::doAppend((uint64_t)&v80, (uint64_t)v95, 0, 1LL);
    memset(v95, 0, sizeof(v95));
    uprv_itou((__int16 *)v95, 16, v45, 0xAu, 0LL);
    icu::UnicodeString::doAppend((uint64_t)&v80, (uint64_t)v95, 0, 0xFFFFFFFFLL);
    LOWORD(v95[0]) = 125;
    icu::UnicodeString::doAppend((uint64_t)&v80, (uint64_t)v95, 0, 1LL);
    int v58 = (unsigned __int16)v81;
    if ((v81 & 1) != 0)
    {
      if ((BYTE8(v85[0]) & 1) == 0) {
        goto LABEL_103;
      }
    }

    else
    {
      if ((SWORD4(v85[0]) & 0x8000u) == 0) {
        int v59 = WORD4(v85[0]) >> 5;
      }
      else {
        int v59 = HIDWORD(v85[0]);
      }
      if ((v81 & 0x8000u) == 0LL) {
        uint64_t v60 = (unsigned __int16)v81 >> 5;
      }
      else {
        uint64_t v60 = DWORD1(v81);
      }
      if ((v81 & 2) != 0) {
        unsigned int v61 = (char *)&v81 + 2;
      }
      else {
        unsigned int v61 = (char *)v82;
      }
      if (icu::UnicodeString::doCompare( (uint64_t)v85,  0,  v59,  (uint64_t)v61,  v60 & (v60 >> 31),  v60 & ~(v60 >> 31)))
      {
LABEL_103:
        icu::Formattable::setString(v46, (UChar **)v85);
        int v62 = 1;
        goto LABEL_106;
      }
    }

    int v62 = 0;
LABEL_106:
    int v54 = v73;
    icu::UnicodeString::~UnicodeString((void *)v58, (icu::UnicodeString *)&v80);
    icu::UnicodeString::~UnicodeString(v63, (icu::UnicodeString *)v85);
    icu::UnicodeString::~UnicodeString(v64, (icu::UnicodeString *)&v86);
    if (v62) {
      goto LABEL_107;
    }
LABEL_109:
    uint64_t v65 = *((void *)v75 + 80) + 16LL * v10;
    int v66 = *(_DWORD *)(v65 + 4);
    int v67 = (void *)*(unsigned __int16 *)(v65 + 8);
    unsigned int v24 = v66 + (_DWORD)v67;
    icu::UnicodeString::~UnicodeString(v67, (icu::UnicodeString *)&v90);
    uint64_t v26 = a3;
LABEL_110:
    uint64_t v23 = *((void *)v42 + 80);
  }

  if (v44 == 2)
  {
    LODWORD(v78) = v41;
    uint64_t v53 = icu::ChoiceFormat::parseArgument( v70,  (const icu::MessagePattern *)(v27 + 3),  (uint64_t)a3,  (const icu::UnicodeString *)&v77,  v19);
    if ((_DWORD)v78 == v41)
    {
LABEL_113:
      int v68 = (uint64_t)a4;
      *((_DWORD *)a4 + 3) = v41;
      goto LABEL_119;
    }

    icu::Formattable::setDouble(v46, v53);
    uint64_t v25 = v78;
    goto LABEL_69;
  }

  else {
    int v68 = 16LL;
  }
  *a6 = v68;
LABEL_119:
  icu::UnicodeString::~UnicodeString((void *)v68, (icu::UnicodeString *)&v90);
  unsigned int v6 = 0LL;
LABEL_120:
  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v77);
  sub_1809132C4(&v79);
  return v6;
}

        (*(void (**)(icu::DecimalFormat *))(*(void *)v21 + 8LL))(v21);
        int v15 = *a3 < 24 && *a4 < 60 && *a5 < 60;
        goto LABEL_18;
      }

      if ((v28 - 5) < 2)
      {
        *a5 = v25 % 100;
        *a4 = *a3 / 100 % 100;
        uint64_t v37 = 1759218605LL * *a3;
        uint64_t v35 = (unint64_t)v37 >> 63;
        int v36 = v37 >> 44;
      }

      else
      {
        *a4 = v25 % 100;
        uint64_t v34 = 1374389535LL * *a3;
        uint64_t v35 = (unint64_t)v34 >> 63;
        int v36 = v34 >> 37;
      }

      *a3 = v36 + v35;
      goto LABEL_41;
    }
  }

  int v15 = 0LL;
LABEL_22:
  icu::UnicodeString::~UnicodeString((void *)v12, (icu::UnicodeString *)v50);
  return v15;
}

  icu::UVector::removeAllElements((uint64_t)this);
  icu::UVector::setDeleter(this, v10);
  if (*a5)
  {
    icu::UnicodeSet::~UnicodeSet(*a5);
    icu::UMemory::operator delete(v31);
  }

  int64_t result = 0LL;
  *a5 = 0LL;
  return result;
}

  icu::UnicodeString::~UnicodeString((void *)v19, (icu::UnicodeString *)&v30);
  return v2;
}

LABEL_120:
  uint64_t v60 = *((unsigned int *)this + 132);
  else {
    return (*(uint64_t (**)(char *, uint64_t))(*((void *)this + 68) + 64LL))((char *)this + 488, v16);
  }
}

    uprv_free(v22);
    *(_DWORD *)(a1 + 148) = 3;
    return;
  }

  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 20) = v12;
  *(_DWORD *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 16) = v12;
  *(_BYTE *)(a1 + 157) = a4;
  *(_DWORD *)(a1 + 200) = a4 & 1;
  *(_DWORD *)(a1 + 216) = 1;
  *(void *)(a1 + 320) = 0LL;
  *(void *)(a1 + 436) = 0LL;
  *(void *)(a1 + 128) = 0LL;
  *(void *)(a1 + 136) = 0LL;
  *(void *)(a1 + 120) = 0LL;
  *(_BYTE *)(a1 + 158) = a4 > 0xFD;
  if (!(_DWORD)v12)
  {
    *(_DWORD *)(a1 + 204) = dword_1809F2D7C[a4 & 1];
    *(_DWORD *)(a1 + 312) = 0;
    *(_DWORD *)(a1 + 216) = 0;
    goto LABEL_115;
  }

  int v81 = *(void *)(a1 + 88);
  *(_DWORD *)(a1 + 312) = -1;
  v229 = (_OWORD *)(a1 + 232);
  if (!v81) {
    int v81 = a1 + 232;
  }
  v225 = (void **)(a1 + 88);
  *(void *)(a1 + 224) = v81;
  if ((_DWORD)v21)
  {
    if (sub_18080FDAC((void **)(a1 + 56), (_DWORD *)(a1 + 28), *(char *)(a1 + 112), 2 * (int)v12))
    {
      uint64_t v82 = *(void **)(a1 + 56);
      *(void *)(a1 + 120) = v82;
      int v83 = *(unsigned int *)(a1 + 20);
      int v84 = 0LL;
      v232 = a10;
      v234 = v82;
      v223 = a5;
      v236 = v21;
      while (1)
      {
        uint64_t v85 = *(unsigned int *)(a6 + 4 * v84);
        unsigned int v86 = a8 ? *(_DWORD *)(a8 + 4 * v84) : v84;
        uint64_t v87 = *(_WORD **)(a9 + 8LL * v86);
        if (!v87) {
          goto LABEL_117;
        }
        int v88 = (unsigned __int16)*v87;
        if (*v87) {
          break;
        }
        LOWORD(v91) = 0;
LABEL_104:
        v234[v85] = v91;
        ++v84;
        uint64_t v10 = a10;
        a5 = v223;
        if (v84 == v236) {
          goto LABEL_105;
        }
      }

      uint64_t v89 = 0;
      uint64_t v90 = 0LL;
      v91 = 0;
      unsigned int v92 = v87 + 1;
      while ((v88 & 0xF800) != 0xD800)
      {
        CustomizedClass = ubidi_getCustomizedClass(a1, v88);
        v91 |= word_1809F2D84[CustomizedClass] << v89;
        int v88 = (unsigned __int16)v92[v90++];
        v89 += 4;
        if (!(_DWORD)v88) {
          goto LABEL_104;
        }
      }

    if ((v41 & 0x8000u) == 0LL) {
      int v57 = v42;
    }
    else {
      int v57 = v43;
    }
    if ((int)i < (int)v57)
    {
      int v58 = (v93 & 0x8000u) == 0LL ? (unsigned __int16)v93 >> 5 : DWORD1(v93);
      if (v58 <= v31)
      {
        uint64_t v60 = 0xFFFF;
      }

      else
      {
        int v59 = (v93 & 2) != 0 ? (__int128 *)((char *)&v93 + 2) : (__int128 *)v94;
        uint64_t v60 = *(unsigned __int16 *)((char *)v59 + (v36 >> 31));
      }

      if (v57 <= i)
      {
        int v62 = 0xFFFF;
      }

      else
      {
        unsigned int v61 = (char *)*((void *)a3 + 3);
        if ((v41 & 2) != 0) {
          unsigned int v61 = (char *)a3 + 10;
        }
        int v62 = *(unsigned __int16 *)&v61[2 * (int)i];
      }

      if (v60 == v62)
      {
        int v31 = (v31 + 1);
        goto LABEL_156;
      }
    }

    if (!v90) {
      goto LABEL_161;
    }
    int v63 = (char *)*((void *)a3 + 3);
    if ((v41 & 2) != 0) {
      int v63 = (char *)a3 + 10;
    }
LABEL_156:
    LODWORD(i) = i + 1;
    int v29 = (unsigned __int16)v93;
    if ((v93 & 0x8000u) == 0LL) {
      int v66 = (unsigned __int16)v93 >> 5;
    }
    else {
      int v66 = DWORD1(v93);
    }
  }

  LODWORD(v41) = *((unsigned __int16 *)a3 + 4);
  uint64_t v43 = a3[3];
  LODWORD(v42) = v41 >> 5;
LABEL_148:
  if ((v41 & 0x8000u) == 0LL) {
    uint64_t v43 = v42;
  }
  if (v43 <= i)
  {
    uint64_t v65 = 0xFFFFLL;
  }

  else
  {
    uint64_t v52 = (v41 & 2) == 0;
    unsigned int v64 = (char *)a3 + 10;
    if (v52) {
      unsigned int v64 = (char *)*((void *)a3 + 3);
    }
    uint64_t v65 = *(unsigned __int16 *)&v64[2 * (int)i];
  }

  if (icu::PatternProps::isWhiteSpace((icu::PatternProps *)v65)) {
    goto LABEL_156;
  }
LABEL_161:
  uint64_t v55 = a6;
  if (!a6) {
    goto LABEL_211;
  }
  if (!a7)
  {
    uint64_t v55 = (unint64_t)v86;
    if (!v86) {
      goto LABEL_211;
    }
    __int128 v74 = (v93 & 0x8000u) == 0LL ? (unsigned __int16)v93 >> 5 : DWORD1(v93);
    if (v74 <= v31)
    {
      uint64_t v76 = 0xFFFF;
    }

    else
    {
      uint64_t v75 = (v93 & 2) != 0 ? (__int128 *)((char *)&v93 + 2) : (__int128 *)v94;
      uint64_t v76 = *(unsigned __int16 *)((char *)v75 + (v36 >> 31));
    }

    uint64_t v77 = *((unsigned __int16 *)a3 + 4);
    uint64_t v78 = (v77 & 0x8000u) == 0 ? v77 >> 5 : a3[3];
    if (v78 <= i)
    {
      uint64_t v80 = 0xFFFF;
    }

    else
    {
      uint64_t v52 = (v77 & 2) == 0;
      uint64_t v79 = (char *)a3 + 10;
      if (v52) {
        uint64_t v79 = (char *)*((void *)a3 + 3);
      }
      uint64_t v80 = *(unsigned __int16 *)&v79[2 * (int)i];
    }

    if (!icu::UnicodeSet::contains(v86, v80))
    {
      int v81 = *((unsigned __int16 *)a3 + 4);
      uint64_t v82 = (v81 & 0x8000u) == 0 ? v81 >> 5 : a3[3];
      if (v82 <= i)
      {
        int v84 = 0xFFFF;
      }

      else
      {
        uint64_t v52 = (v81 & 2) == 0;
        int v83 = (char *)a3 + 10;
        if (v52) {
          int v83 = (char *)*((void *)a3 + 3);
        }
        int v84 = *(unsigned __int16 *)&v83[2 * (int)i];
      }

      if (!u_isalpha(v84))
      {
LABEL_211:
        int v68 = 0LL;
        goto LABEL_165;
      }
    }
  }

uint64_t icu::RuleBasedBreakIterator::getRuleStatus(icu::RuleBasedBreakIterator *this)
{
  return *(unsigned int *)(*(void *)(*((void *)this + 79) + 32LL)
                         + 4LL
}

uint64_t icu::RuleBasedBreakIterator::getRuleStatusVec( icu::RuleBasedBreakIterator *this, int *a2, int a3, UErrorCode *a4)
{
  uint64_t v6 = *(void *)(*((void *)this + 79) + 32LL);
  uint64_t result = *(unsigned int *)(v6 + 4LL * *((int *)this + 168));
  int v7 = result;
  if ((int)result > a3)
  {
    *a4 = U_BUFFER_OVERFLOW_ERROR;
    int v7 = a3;
  }

  if (v7 >= 1)
  {
    for (uint64_t i = 0LL; i != v7; ++i)
      a2[i] = *(_DWORD *)(v6 + 4LL * ((int)i + *((_DWORD *)this + 168) + 1));
  }

  return result;
}

unint64_t icu::RuleBasedBreakIterator::tokenize(uint64_t a1, int a2, char *a3, void *a4)
{
  if (*(_BYTE *)(a1 + 760)) {
    return 0LL;
  }
  uint64_t v6 = a3;
  if (a2 < 1) {
    return (unint64_t)(v6 - a3) >> 4;
  }
  uint64_t v9 = &a3[16 * a2];
  int v10 = *(_DWORD *)(a1 + 668);
  uint64_t v11 = a3;
  while (1)
  {
    int v12 = v10;
    *(void *)int v22 = 0LL;
    if (icu::RuleBasedBreakIterator::DictionaryCache::following( *(icu::RuleBasedBreakIterator::DictionaryCache **)(a1 + 688),  v10,  &v22[1],  v22)) {
      goto LABEL_6;
    }
    int64_t Internal = icu::RuleBasedBreakIterator::handleNextInternal((icu::RuleBasedBreakIterator *)a1);
    v22[1] = Internal;
    if ((_DWORD)Internal == -1) {
      break;
    }
    int v10 = Internal;
    *(_DWORD *)(a1 + 668) = Internal;
    int v13 = *(_DWORD *)(a1 + 672);
    if (!*(_DWORD *)(a1 + 712)) {
      goto LABEL_7;
    }
    icu::RuleBasedBreakIterator::DictionaryCache::populateDictionary( *(void *)(a1 + 688),  v12,  Internal,  v13,  *(_DWORD *)(a1 + 672));
    if (!icu::RuleBasedBreakIterator::DictionaryCache::following( *(icu::RuleBasedBreakIterator::DictionaryCache **)(a1 + 688),  v12,  &v22[1],  v22))
    {
      int v13 = *(_DWORD *)(a1 + 672);
      int v10 = *(_DWORD *)(a1 + 668);
      goto LABEL_7;
    }

uint64_t icu::RuleBasedBreakIterator::getBinaryRules(icu::RuleBasedBreakIterator *this, unsigned int *a2)
{
  *a2 = 0;
  uint64_t v2 = *((void *)this + 79);
  if (!v2) {
    return 0LL;
  }
  uint64_t result = *(void *)v2;
  *a2 = *(_DWORD *)(*(void *)v2 + 8LL);
  return result;
}

uint64_t icu::RuleBasedBreakIterator::createBufferClone( icu::RuleBasedBreakIterator *this, void *a2, int *a3, UErrorCode *a4)
{
  if (*a3)
  {
    uint64_t result = (*(uint64_t (**)(icu::RuleBasedBreakIterator *, void *))(*(void *)this + 32LL))(this, a2);
    if (result) {
      UErrorCode v6 = U_SAFECLONE_ALLOCATED_WARNING;
    }
    else {
      UErrorCode v6 = U_MEMORY_ALLOCATION_ERROR;
    }
    *a4 = v6;
  }

  else
  {
    uint64_t result = 0LL;
    *a3 = 1;
  }

  return result;
}

uint64_t sub_1807F8234()
{
  if (qword_18C534DF8) {
    (*(void (**)(uint64_t))(*(void *)qword_18C534DF8 + 8LL))(qword_18C534DF8);
  }
  qword_18C534DF8 = 0LL;
  if (qword_18C534E00) {
    (*(void (**)(uint64_t))(*(void *)qword_18C534E00 + 8LL))(qword_18C534E00);
  }
  qword_18C534E00 = 0LL;
  atomic_store(0, &dword_18C534E10);
  atomic_store(0, (unsigned int *)&unk_18C534E18);
  return 1LL;
}

void sub_1807F82A0(int *a1)
{
  if (*a1 <= 0)
  {
    unsigned int v2 = atomic_load(&dword_18C534E10);
    if (v2 == 2 || !icu::umtx_initImplPreInit(&dword_18C534E10))
    {
      if (dword_18C534E14 >= 1) {
        *a1 = dword_18C534E14;
      }
    }

    else
    {
      uint64_t v5 = icu::UMemory::operator new(v4, (icu::UMemory *)0x28, v3);
      if (v5)
      {
        qword_18C534DF8 = (uint64_t)icu::UStack::UStack((uint64_t)v5, (uint64_t)sub_1807F8798, 0LL, a1);
        int v7 = (uint64_t *)*a1;
        if ((int)v7 <= 0)
        {
          uint64_t v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0x10, v6);
          if (v8)
          {
            uint64_t v9 = v8;
            sub_1807BE688(v8);
            if (*a1 <= 0)
            {
              qword_18C534E08 = (uint64_t)v9;
              if (*(void *)(qword_18C534DF8 + 24)) {
                icu::UVector::adoptElement((icu::UVector *)qword_18C534DF8, v9, (UErrorCode *)a1);
              }
              else {
                icu::UVector::addElement((icu::UVector *)qword_18C534DF8, v9, (UErrorCode *)a1);
              }
              int v10 = (void *)uprv_svc_hook();
              if (v10)
              {
                if (*(void *)(qword_18C534DF8 + 24)) {
                  icu::UVector::adoptElement((icu::UVector *)qword_18C534DF8, v10, (UErrorCode *)a1);
                }
                else {
                  icu::UVector::addElement((icu::UVector *)qword_18C534DF8, v10, (UErrorCode *)a1);
                }
              }
            }

            else
            {
              (*(void (**)(uint64_t *))(*v9 + 8))(v9);
            }
          }

          else if (*a1 <= 0)
          {
            *a1 = 7;
          }
        }
      }

      else
      {
        qword_18C534DF8 = 0LL;
      }

      sub_180820C94(3u, (uint64_t)sub_1807F8234);
      dword_18C534E14 = *a1;
      icu::umtx_initImplPostInit(&dword_18C534E10);
    }
  }

void *icu::RuleBasedBreakIterator::getLanguageBreakEngine@<X0>( icu::RuleBasedBreakIterator *this@<X0>, const char *a2@<X2>, unint64_t a3@<X1>, uint64_t *a4@<X8>)
{
  UErrorCode v22 = U_ZERO_ERROR;
  int v7 = (icu::UVector *)*((void *)this + 87);
  if (!v7)
  {
    uint64_t v11 = (icu::UStack *)icu::UMemory::operator new(a4, (icu::UMemory *)0x28, a3);
    if (v11)
    {
      int v7 = icu::UStack::UStack(v11, &v22);
      *((void *)this + 87) = v7;
      if (v22 < U_ILLEGAL_ARGUMENT_ERROR) {
        goto LABEL_2;
      }
      (*(void (**)(icu::UVector *))(*(void *)v7 + 8LL))(v7);
    }

    int v10 = 0LL;
    *((void *)this + 87) = 0LL;
    return v10;
  }

void icu::RuleBasedBreakIterator::registerExternalBreakEngine(uint64_t a1, int *a2)
{
  int v4 = *a2;
  if (a1 || v4 > 0)
  {
    if (v4 <= 0 && (sub_1807F82A0(a2), *a2 <= 0))
    {
      (*(void (**)(uint64_t, uint64_t, int *))(*(void *)qword_18C534E08 + 24LL))(qword_18C534E08, a1, a2);
    }

    else if (a1)
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 8LL))(a1);
    }
  }

  else
  {
    *a2 = 7;
  }

uint64_t icu::RuleBasedBreakIterator::dumpCache(icu::RuleBasedBreakIterator::BreakCache **this)
{
  return icu::RuleBasedBreakIterator::BreakCache::dumpCache(this[85]);
}

uint64_t icu::RuleBasedBreakIterator::dumpTables(icu::RuleBasedBreakIterator *this)
{
  return nullsub_17(*((void *)this + 79));
}

uint64_t icu::RuleBasedBreakIterator::getRules(icu::RuleBasedBreakIterator *this)
{
  uint64_t v1 = *((void *)this + 79);
  if (v1) {
    return sub_1807FCBC8(v1);
  }
  unsigned int v3 = atomic_load((unsigned int *)&unk_18C534E18);
  if (v3 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_18C534E18))
  {
    unint64_t v6 = icu::UMemory::operator new(v5, (icu::UMemory *)0x40, v4);
    if (v6)
    {
      uint64_t *v6 = (uint64_t)off_18971B688;
      *((_WORD *)v6 + 4) = 2;
    }

    qword_18C534E00 = (uint64_t)v6;
    sub_180820C94(3u, (uint64_t)sub_1807F8234);
    icu::umtx_initImplPostInit((unsigned int *)&unk_18C534E18);
  }

  return qword_18C534E00;
}

BOOL sub_1807F874C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1LL;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0LL;
}

uint64_t sub_1807F8798(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void *icu::RuleBasedBreakIterator57::getStaticClassID(icu::RuleBasedBreakIterator57 *this)
{
  return &unk_18C534E20;
}

void *icu::RuleBasedBreakIterator57::getDynamicClassID(icu::RuleBasedBreakIterator57 *this)
{
  return &unk_18C534E20;
}

uint64_t icu::RuleBasedBreakIterator57::RuleBasedBreakIterator57(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)icu::BreakIterator::BreakIterator(a1) = off_18970FCD0;
  UErrorCode status = U_ZERO_ERROR;
  *(void *)(a1 + 488) = utext_openUChars(0LL, 0LL, 0LL, &status);
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_DWORD *)(a1 + 528) = 0;
  *(_BYTE *)(a1 + 532) = 1;
  *(_DWORD *)(a1 + 536) = 0;
  *(_DWORD *)(a1 + 576) = 1;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  int v7 = icu::UMemory::operator new((uint64_t *)1, (icu::UMemory *)0xC0, v6);
  if (!v7)
  {
    *(void *)(a1 + 520) = 0LL;
    if (*a3 < 1)
    {
      *a3 = 7;
      return a1;
    }

    BOOL v9 = (void *)(a1 + 520);
    goto LABEL_6;
  }

  uint64_t v8 = sub_1807FD13C((uint64_t)v7, a2, a3);
  *(void *)(a1 + 520) = v8;
  if (*a3 >= 1)
  {
    BOOL v9 = (void *)(a1 + 520);
    int v10 = (void *)sub_1807FD254(v8);
    icu::UMemory::operator delete(v10);
LABEL_6:
    *BOOL v9 = 0LL;
  }

  return a1;
}