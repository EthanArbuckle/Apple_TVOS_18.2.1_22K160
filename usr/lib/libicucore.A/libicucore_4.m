BOOL icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::copyErrorTo( uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 1LL;
  }
  sub_18092486C(a1, a2);
  return *a2 > 0;
}

uint64_t icu::number::NumberFormatter::with@<X0>(_OWORD *a1@<X8>)
{
  a1[28] = 0u;
  a1[29] = 0u;
  a1[26] = 0u;
  a1[27] = 0u;
  a1[24] = 0u;
  a1[25] = 0u;
  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return sub_1808D3E38((uint64_t)a1);
}

void icu::number::NumberFormatter::withLocale(icu::number::NumberFormatter *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  __int128 v7 = 0u;
  memset(v8, 0, sizeof(v8));
  __int128 v5 = 0u;
  memset(v6, 0, sizeof(v6));
  sub_1808D3E38((uint64_t)&v5);
  icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(a2, (uint64_t)&v5, (uint64_t)this);
  icu::Locale::~Locale((icu::Locale *)((char *)&v8[2] + 8));
  icu::number::impl::StringProp::~StringProp((void **)v8);
  icu::number::impl::StringProp::~StringProp((void **)&v7);
  icu::number::Scale::~Scale((icu::number::Scale *)((char *)&v6[9] + 8));
  icu::number::impl::SymbolsWrapper::~SymbolsWrapper((icu::number::impl::SymbolsWrapper *)((char *)&v6[7] + 8));
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)((char *)&v6[1] + 8));
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v6);
}

uint64_t icu::number::UnlocalizedNumberFormatter::locale@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(a3, a1, a2);
}

{
  return icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(a3, a1, a2);
}

uint64_t icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 4) = v4;
  icu::MeasureUnit::MeasureUnit(a1 + 16, a2 + 16);
  icu::MeasureUnit::MeasureUnit(a1 + 40, a2 + 40);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 125) = *(void *)(a2 + 125);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  icu::number::impl::SymbolsWrapper::SymbolsWrapper( (icu::number::impl::SymbolsWrapper *)(a1 + 136),  (const icu::number::impl::SymbolsWrapper *)(a2 + 136));
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::Scale((icu::number::Scale *)(a1 + 168), (const icu::number::Scale *)(a2 + 168));
  icu::number::impl::StringProp::StringProp(a1 + 192, a2 + 192);
  icu::number::impl::StringProp::StringProp(a1 + 208, a2 + 208);
  __int128 v8 = *(_OWORD *)(a2 + 224);
  *(void *)(a1 + 238) = *(void *)(a2 + 238);
  *(_OWORD *)(a1 + 224) = v8;
  icu::Locale::Locale((icu::Locale *)(a1 + 248), a2 + 248);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v4 = *(void *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 4) = v4;
  icu::MeasureUnit::MeasureUnit(a1 + 16, a2 + 16);
  icu::MeasureUnit::MeasureUnit(a1 + 40, a2 + 40);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 125) = *(void *)(a2 + 125);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  icu::number::impl::SymbolsWrapper::SymbolsWrapper(a1 + 136, (int *)(a2 + 136));
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::Scale(a1 + 168, a2 + 168);
  icu::number::impl::StringProp::StringProp(a1 + 192, a2 + 192);
  icu::number::impl::StringProp::StringProp(a1 + 208, a2 + 208);
  __int128 v8 = *(_OWORD *)(a2 + 224);
  *(void *)(a1 + 238) = *(void *)(a2 + 238);
  *(_OWORD *)(a1 + 224) = v8;
  icu::Locale::Locale(a1 + 248, a2 + 248);
  return a1;
}

uint64_t icu::number::UnlocalizedNumberFormatter::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 4) = v4;
  icu::MeasureUnit::operator=(a1 + 16, a2 + 16);
  icu::MeasureUnit::operator=(a1 + 40, a2 + 40);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v5 = *(_OWORD *)(a2 + 112);
  __int128 v7 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 125) = *(void *)(a2 + 125);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 80) = v7;
  icu::number::impl::SymbolsWrapper::operator=( (icu::number::impl::SymbolsWrapper *)(a1 + 136),  (icu::number::impl::SymbolsWrapper *)(a2 + 136));
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::operator=(a1 + 168, a2 + 168);
  icu::number::impl::StringProp::operator=(a1 + 192, a2 + 192);
  icu::number::impl::StringProp::operator=(a1 + 208, a2 + 208);
  uint64_t v8 = *(void *)(a2 + 238);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(void *)(a1 + 238) = v8;
  icu::Locale::operator=((icu::Locale *)(a1 + 248), a2 + 248);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v4 = *(void *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 4) = v4;
  icu::MeasureUnit::operator=(a1 + 16, a2 + 16);
  icu::MeasureUnit::operator=(a1 + 40, a2 + 40);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v5 = *(_OWORD *)(a2 + 112);
  __int128 v7 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 125) = *(void *)(a2 + 125);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 80) = v7;
  icu::number::impl::SymbolsWrapper::operator=(a1 + 136, (int *)(a2 + 136));
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::operator=(a1 + 168, a2 + 168);
  icu::number::impl::StringProp::operator=(a1 + 192, a2 + 192);
  icu::number::impl::StringProp::operator=(a1 + 208, a2 + 208);
  uint64_t v8 = *(void *)(a2 + 238);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(void *)(a1 + 238) = v8;
  icu::Locale::operator=(a1 + 248, a2 + 248);
  return a1;
}

uint64_t icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 4) = v4;
  icu::MeasureUnit::MeasureUnit(a1 + 16, a2 + 16);
  icu::MeasureUnit::MeasureUnit(a1 + 40, a2 + 40);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 125) = *(void *)(a2 + 125);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  icu::number::impl::SymbolsWrapper::SymbolsWrapper( (icu::number::impl::SymbolsWrapper *)(a1 + 136),  (const icu::number::impl::SymbolsWrapper *)(a2 + 136));
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::Scale((icu::number::Scale *)(a1 + 168), (const icu::number::Scale *)(a2 + 168));
  icu::number::impl::StringProp::StringProp(a1 + 192, a2 + 192);
  icu::number::impl::StringProp::StringProp(a1 + 208, a2 + 208);
  __int128 v8 = *(_OWORD *)(a2 + 224);
  *(void *)(a1 + 238) = *(void *)(a2 + 238);
  *(_OWORD *)(a1 + 224) = v8;
  icu::Locale::Locale((icu::Locale *)(a1 + 248), a2 + 248);
  *(void *)(a1 + 472) = 0LL;
  *(void *)(a1 + 480) = 0LL;
  *(void *)(a1 + 488) = 0LL;
  UErrorCode v11 = U_ZERO_ERROR;
  icu::number::LocalizedNumberFormatter::lnfCopyHelper((icu::number::LocalizedNumberFormatter *)a1, v9, &v11);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v4 = *(void *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 4) = v4;
  icu::MeasureUnit::MeasureUnit(a1 + 16, a2 + 16);
  icu::MeasureUnit::MeasureUnit(a1 + 40, a2 + 40);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 125) = *(void *)(a2 + 125);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  icu::number::impl::SymbolsWrapper::SymbolsWrapper(a1 + 136, (int *)(a2 + 136));
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::Scale(a1 + 168, a2 + 168);
  icu::number::impl::StringProp::StringProp(a1 + 192, a2 + 192);
  icu::number::impl::StringProp::StringProp(a1 + 208, a2 + 208);
  __int128 v8 = *(_OWORD *)(a2 + 224);
  *(void *)(a1 + 238) = *(void *)(a2 + 238);
  *(_OWORD *)(a1 + 224) = v8;
  icu::Locale::Locale(a1 + 248, a2 + 248);
  *(void *)(a1 + 472) = 0LL;
  *(void *)(a1 + 480) = 0LL;
  *(void *)(a1 + 488) = 0LL;
  icu::number::LocalizedNumberFormatter::lnfMoveHelper(a1, a2);
  return a1;
}

void icu::number::LocalizedNumberFormatter::lnfCopyHelper( icu::number::LocalizedNumberFormatter *this, const icu::number::LocalizedNumberFormatter *a2, UErrorCode *a3)
{
  uint64_t v5 = *((void *)this + 59);
  if (v5)
  {
    __int128 v6 = (void *)sub_180927784(v5);
    icu::UMemory::operator delete(v6);
  }

  atomic_store(0, (unsigned int *)this + 120);
  *((void *)this + 59) = 0LL;
  __int128 v7 = (void *)*((void *)this + 61);
  if (v7)
  {
    uint64_t v8 = v7[309];
    if (v8) {
      (*(void (**)(uint64_t, const icu::number::LocalizedNumberFormatter *))(*(void *)v8 + 8LL))(v8, a2);
    }
    sub_1808D3EFC(v7 + 1);
    icu::UMemory::operator delete(v7);
  }

  uint64_t v9 = (uint64_t *)*((void *)this + 28);
  if (v9 || (uint64_t v9 = (uint64_t *)*((void *)this + 29)) != 0LL)
  {
    v10 = icu::UMemory::operator new(v9, (icu::UMemory *)0x9B0, (unint64_t)a2);
    if (v10)
    {
      UErrorCode v11 = v10;
      bzero(v10, 0x9B0uLL);
      v11[1] = (uint64_t)off_189727980;
      v11[2] = (uint64_t)off_18971B688;
      *((_WORD *)v11 + 12) = 2;
      v11[10] = (uint64_t)off_18971B688;
      *((_WORD *)v11 + 44) = 2;
      v11[18] = (uint64_t)off_18971B688;
      *((_WORD *)v11 + 76) = 2;
      v11[26] = (uint64_t)off_18971B688;
      *((_WORD *)v11 + 108) = 2;
      *((_BYTE *)v11 + 274) = 1;
      v11[35] = (uint64_t)off_189727A28;
      v12 = v11 + 308;
      uint64_t v13 = 36LL;
      do
      {
        v14 = &v11[v13];
        uint64_t *v14 = (uint64_t)off_189727980;
        v14[1] = (uint64_t)off_18971B688;
        *((_WORD *)v14 + 8) = 2;
        v14[9] = (uint64_t)off_18971B688;
        *((_WORD *)v14 + 40) = 2;
        v14[17] = (uint64_t)off_18971B688;
        *((_WORD *)v14 + 72) = 2;
        v14[25] = (uint64_t)off_18971B688;
        *((_WORD *)v14 + 104) = 2;
        v13 += 34LL;
        *((_BYTE *)v14 + 266) = 1;
      }

      while (v14 + 34 != v12);
      v15 = 0LL;
      *((_BYTE *)v11 + 2464) = 1;
      v11[309] = 0LL;
      v21 = v11;
      if (*(int *)a3 <= 0)
      {
        v16 = (void *)*((void *)this + 28);
        if (v16)
        {
          sub_180926DAC(v11 + 1, v16, a3);
          if (*(_BYTE *)v12) {
            v17 = v11 + 1;
          }
          else {
            v17 = v11 + 35;
          }
          *((void *)this + 28) = v17;
        }

        v18 = (uint64_t *)*((void *)this + 29);
        if (v18)
        {
          v19 = icu::UMemory::operator new(v18, (icu::UMemory *)0x20, (unint64_t)v16);
          uint64_t v20 = (uint64_t)v19;
          if (v19) {
            icu::PluralRules::PluralRules((uint64_t)v19, *((void *)this + 29));
          }
          sub_1807C9194((uint64_t)(v11 + 309), v20, (int *)a3);
          *((void *)this + 29) = v11[309];
        }

        v21 = 0LL;
        v15 = v11;
      }
    }

    else
    {
      v15 = 0LL;
      v21 = 0LL;
      if (*(int *)a3 <= 0)
      {
        v15 = 0LL;
        *a3 = U_MEMORY_ALLOCATION_ERROR;
      }
    }

    *((void *)this + 61) = v15;
    sub_180927C34(&v21);
  }

  else
  {
    *((void *)this + 61) = 0LL;
  }

void icu::number::LocalizedNumberFormatter::lnfMoveHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 472);
  if (v4)
  {
    uint64_t v5 = (void *)sub_180927784(v4);
    icu::UMemory::operator delete(v5);
  }

  if (*(void *)(a2 + 472))
  {
    __int128 v6 = (void *)(a2 + 472);
    atomic_store(0x80000000, (unsigned int *)(a1 + 480));
    *(void *)(a1 + 472) = *(void *)(a2 + 472);
    __int128 v7 = (unsigned int *)(a2 + 480);
  }

  else
  {
    __int128 v6 = (void *)(a1 + 472);
    __int128 v7 = (unsigned int *)(a1 + 480);
  }

  atomic_store(0, v7);
  *__int128 v6 = 0LL;
  uint64_t v8 = *(void **)(a1 + 488);
  if (v8)
  {
    uint64_t v9 = v8[309];
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
    }
    sub_1808D3EFC(v8 + 1);
    icu::UMemory::operator delete(v8);
  }

  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(void *)(a2 + 488) = 0LL;
}

uint64_t icu::number::LocalizedNumberFormatter::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a2 + 4);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    *(void *)(a1 + 4) = v4;
    icu::MeasureUnit::operator=(a1 + 16, a2 + 16);
    icu::MeasureUnit::operator=(a1 + 40, a2 + 40);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    __int128 v6 = *(_OWORD *)(a2 + 96);
    __int128 v5 = *(_OWORD *)(a2 + 112);
    __int128 v7 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 125) = *(void *)(a2 + 125);
    *(_OWORD *)(a1 + 96) = v6;
    *(_OWORD *)(a1 + 112) = v5;
    *(_OWORD *)(a1 + 80) = v7;
    icu::number::impl::SymbolsWrapper::operator=( (icu::number::impl::SymbolsWrapper *)(a1 + 136),  (icu::number::impl::SymbolsWrapper *)(a2 + 136));
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    icu::number::Scale::operator=(a1 + 168, a2 + 168);
    icu::number::impl::StringProp::operator=(a1 + 192, a2 + 192);
    icu::number::impl::StringProp::operator=(a1 + 208, a2 + 208);
    uint64_t v8 = *(void *)(a2 + 238);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(void *)(a1 + 238) = v8;
    icu::Locale::operator=((icu::Locale *)(a1 + 248), a2 + 248);
    UErrorCode v11 = U_ZERO_ERROR;
    icu::number::LocalizedNumberFormatter::lnfCopyHelper((icu::number::LocalizedNumberFormatter *)a1, v9, &v11);
  }

  return a1;
}

{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v4 = *(void *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 4) = v4;
  icu::MeasureUnit::operator=(a1 + 16, a2 + 16);
  icu::MeasureUnit::operator=(a1 + 40, a2 + 40);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v5 = *(_OWORD *)(a2 + 112);
  __int128 v7 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 125) = *(void *)(a2 + 125);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 80) = v7;
  icu::number::impl::SymbolsWrapper::operator=(a1 + 136, (int *)(a2 + 136));
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::operator=(a1 + 168, a2 + 168);
  icu::number::impl::StringProp::operator=(a1 + 192, a2 + 192);
  icu::number::impl::StringProp::operator=(a1 + 208, a2 + 208);
  uint64_t v8 = *(void *)(a2 + 238);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(void *)(a1 + 238) = v8;
  icu::Locale::operator=(a1 + 248, a2 + 248);
  icu::number::LocalizedNumberFormatter::lnfMoveHelper(a1, a2);
  return a1;
}

uint64_t icu::number::LocalizedNumberFormatter::resetCompiled(uint64_t this)
{
  *(void *)(this + 472) = 0LL;
  return this;
}

void *sub_180926DAC(void *result, void *lpsrc, _DWORD *a3)
{
  if (!lpsrc) {
    goto LABEL_8;
  }
  uint64_t v5 = (uint64_t)result;
  if (v6)
  {
    __int128 v7 = v6;
    icu::UnicodeString::operator=((UChar **)(v5 + 8), v6 + 1);
    icu::UnicodeString::operator=((UChar **)(v5 + 72), v7 + 9);
    icu::UnicodeString::operator=((UChar **)(v5 + 136), v7 + 17);
    result = icu::UnicodeString::operator=((UChar **)(v5 + 200), v7 + 25);
    char v8 = *((_BYTE *)v7 + 266);
    *(_WORD *)(v5 + 264) = *((_WORD *)v7 + 132);
    *(_BYTE *)(v5 + 266) = v8;
    return result;
  }

  if (result)
  {
    uint64_t v9 = (uint64_t)result;
    uint64_t v10 = -2176LL;
    do
    {
      uint64_t v11 = v5 + v10;
      icu::UnicodeString::operator=((UChar **)(v5 + v10 + 2464), (UChar **)(v9 + v10 + 2192));
      icu::UnicodeString::operator=((UChar **)(v5 + v10 + 2528), (UChar **)(v9 + v10 + 2256));
      icu::UnicodeString::operator=((UChar **)(v5 + v10 + 2592), (UChar **)(v9 + v10 + 2320));
      result = icu::UnicodeString::operator=((UChar **)(v5 + v10 + 2656), (UChar **)(v9 + v10 + 2384));
      char v12 = *(_BYTE *)(v9 + v10 + 2450);
      *(_WORD *)(v11 + 2720) = *(_WORD *)(v9 + v10 + 2448);
      *(_BYTE *)(v11 + 2722) = v12;
      v10 += 272LL;
    }

    while (v10);
    *(_BYTE *)(v5 + 2456) = *(_BYTE *)(v9 + 2184);
  }

  else
  {
LABEL_8:
    *a3 = 5;
  }

  return result;
}

void icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter( icu::number::LocalizedNumberFormatter *this)
{
  uint64_t v2 = *((void *)this + 59);
  if (v2)
  {
    v3 = (void *)sub_180927784(v2);
    icu::UMemory::operator delete(v3);
  }

  uint64_t v4 = (void *)*((void *)this + 61);
  if (v4)
  {
    uint64_t v5 = v4[309];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
    sub_1808D3EFC(v4 + 1);
    icu::UMemory::operator delete(v4);
  }

  icu::Locale::~Locale((icu::number::LocalizedNumberFormatter *)((char *)this + 248));
  icu::number::impl::StringProp::~StringProp((void **)this + 26);
  icu::number::impl::StringProp::~StringProp((void **)this + 24);
  icu::number::Scale::~Scale((icu::number::LocalizedNumberFormatter *)((char *)this + 168));
  icu::number::impl::SymbolsWrapper::~SymbolsWrapper((icu::number::LocalizedNumberFormatter *)((char *)this + 136));
  icu::MeasureUnit::~MeasureUnit((icu::number::LocalizedNumberFormatter *)((char *)this + 40));
  icu::MeasureUnit::~MeasureUnit((icu::number::LocalizedNumberFormatter *)((char *)this + 16));
}

uint64_t icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1808D3E38(a1);
  *(void *)(v6 + 472) = 0LL;
  *(void *)(v6 + 480) = 0LL;
  *(void *)(v6 + 488) = 0LL;
  uint64_t v7 = *(void *)(a2 + 4);
  *(_DWORD *)(v6 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(v6 + 4) = v7;
  icu::MeasureUnit::operator=(v6 + 16, a2 + 16);
  icu::MeasureUnit::operator=(a1 + 40, a2 + 40);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  __int128 v9 = *(_OWORD *)(a2 + 96);
  __int128 v8 = *(_OWORD *)(a2 + 112);
  __int128 v10 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 125) = *(void *)(a2 + 125);
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 80) = v10;
  icu::number::impl::SymbolsWrapper::operator=( (icu::number::impl::SymbolsWrapper *)(a1 + 136),  (icu::number::impl::SymbolsWrapper *)(a2 + 136));
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::operator=(a1 + 168, a2 + 168);
  icu::number::impl::StringProp::operator=(a1 + 192, a2 + 192);
  icu::number::impl::StringProp::operator=(a1 + 208, a2 + 208);
  uint64_t v11 = *(void *)(a2 + 238);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(void *)(a1 + 238) = v11;
  icu::Locale::operator=((icu::Locale *)(a1 + 248), a2 + 248);
  icu::Locale::operator=((icu::Locale *)(a1 + 248), a3);
  return a1;
}

{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v6 = sub_1808D3E38(a1);
  *(void *)(v6 + 472) = 0LL;
  *(void *)(v6 + 480) = 0LL;
  *(void *)(v6 + 488) = 0LL;
  uint64_t v7 = *(void *)(a2 + 4);
  *(_DWORD *)(v6 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(v6 + 4) = v7;
  icu::MeasureUnit::operator=(v6 + 16, a2 + 16);
  icu::MeasureUnit::operator=(a1 + 40, a2 + 40);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  __int128 v9 = *(_OWORD *)(a2 + 96);
  __int128 v8 = *(_OWORD *)(a2 + 112);
  __int128 v10 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 125) = *(void *)(a2 + 125);
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 80) = v10;
  icu::number::impl::SymbolsWrapper::operator=(a1 + 136, (int *)(a2 + 136));
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::operator=(a1 + 168, a2 + 168);
  icu::number::impl::StringProp::operator=(a1 + 192, a2 + 192);
  icu::number::impl::StringProp::operator=(a1 + 208, a2 + 208);
  uint64_t v11 = *(void *)(a2 + 238);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(void *)(a1 + 238) = v11;
  icu::Locale::operator=(a1 + 248, a2 + 248);
  icu::Locale::operator=((icu::Locale *)(a1 + 248), a3);
  return a1;
}

uint64_t *icu::number::LocalizedNumberFormatter::formatInt@<X0>( uint64_t *this@<X0>, UErrorCode *a2@<X2>, unint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v5 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v5 <= 0)
  {
    __int128 v10 = (icu::number::LocalizedNumberFormatter *)this;
    this = icu::UMemory::operator new(v5, (icu::UMemory *)0x198, a3);
    uint64_t v6 = (void **)this;
    if (this)
    {
      sub_1808D4228((uint64_t)this);
      icu::number::impl::DecimalQuantity::setToLong(v6 + 38, a3);
      this = (uint64_t *)icu::number::LocalizedNumberFormatter::formatImpl( v10,  (icu::number::impl::UFormattedNumberData *)v6,  a2);
      if (*(int *)a2 < 1)
      {
        UErrorCode v7 = U_ZERO_ERROR;
      }

      else
      {
        this = (uint64_t *)(*((uint64_t (**)(void **))*v6 + 1))(v6);
        uint64_t v6 = 0LL;
        UErrorCode v7 = *a2;
      }
    }

    else
    {
      UErrorCode v7 = U_MEMORY_ALLOCATION_ERROR;
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
  }

  else
  {
    uint64_t v6 = 0LL;
    UErrorCode v7 = U_ILLEGAL_ARGUMENT_ERROR;
  }

  *(void *)a4 = off_189727E50;
  *(void *)(a4 + 8) = v6;
  *(_DWORD *)(a4 + 16) = v7;
  return this;
}

uint64_t icu::number::LocalizedNumberFormatter::formatImpl( icu::number::LocalizedNumberFormatter *this, icu::number::impl::UFormattedNumberData *a2, UErrorCode *a3)
{
  if (*((_BYTE *)this + 244))
  {
    int v8 = 0;
    int Magnitude = icu::number::impl::DecimalQuantity::getMagnitude((icu::number::impl::UFormattedNumberData *)((char *)a2 + 304));
    icu::number::impl::DecimalQuantity::roundToMagnitude((uint64_t)a2 + 304, Magnitude - 14, 4u, &v8);
  }

  else {
    uint64_t result = sub_180927CE4((uint64_t)this, a2, a3);
  }
  return result;
}

uint64_t *icu::number::LocalizedNumberFormatter::formatDouble@<X0>( uint64_t *this@<X0>, double a2@<D0>, UErrorCode *a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v5 = (uint64_t *)*(unsigned int *)a3;
  if ((int)v5 <= 0)
  {
    __int128 v10 = (icu::number::LocalizedNumberFormatter *)this;
    this = icu::UMemory::operator new(v5, (icu::UMemory *)0x198, (unint64_t)a3);
    uint64_t v6 = (void **)this;
    if (this)
    {
      sub_1808D4228((uint64_t)this);
      icu::number::impl::DecimalQuantity::setToDouble(v6 + 38, a2);
      this = (uint64_t *)icu::number::LocalizedNumberFormatter::formatImpl( v10,  (icu::number::impl::UFormattedNumberData *)v6,  a3);
      if (*(int *)a3 < 1)
      {
        UErrorCode v7 = U_ZERO_ERROR;
      }

      else
      {
        this = (uint64_t *)(*((uint64_t (**)(void **))*v6 + 1))(v6);
        uint64_t v6 = 0LL;
        UErrorCode v7 = *a3;
      }
    }

    else
    {
      UErrorCode v7 = U_MEMORY_ALLOCATION_ERROR;
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    }
  }

  else
  {
    uint64_t v6 = 0LL;
    UErrorCode v7 = U_ILLEGAL_ARGUMENT_ERROR;
  }

  *(void *)a4 = off_189727E50;
  *(void *)(a4 + 8) = v6;
  *(_DWORD *)(a4 + 16) = v7;
  return this;
}

uint64_t *icu::number::LocalizedNumberFormatter::formatDecimal@<X0>( uint64_t *result@<X0>, const char *a2@<X1>, int a3@<W2>, UErrorCode *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = (uint64_t *)*(unsigned int *)a4;
  if ((int)v6 <= 0)
  {
    char v12 = (icu::number::LocalizedNumberFormatter *)result;
    uint64_t result = icu::UMemory::operator new(v6, (icu::UMemory *)0x198, (unint64_t)a2);
    UErrorCode v7 = (icu::number::impl::UFormattedNumberData *)result;
    if (result)
    {
      sub_1808D4228((uint64_t)result);
      icu::number::impl::DecimalQuantity::setToDecNumber((uint64_t)v7 + 304, a2, a3, a4);
      uint64_t result = (uint64_t *)icu::number::LocalizedNumberFormatter::formatImpl(v12, v7, a4);
      if (*(int *)a4 < 1)
      {
        UErrorCode v8 = U_ZERO_ERROR;
      }

      else
      {
        uint64_t result = (uint64_t *)(*(uint64_t (**)(icu::number::impl::UFormattedNumberData *))(*(void *)v7 + 8LL))(v7);
        UErrorCode v7 = 0LL;
        UErrorCode v8 = *a4;
      }
    }

    else
    {
      UErrorCode v8 = U_MEMORY_ALLOCATION_ERROR;
      *a4 = U_MEMORY_ALLOCATION_ERROR;
    }
  }

  else
  {
    UErrorCode v7 = 0LL;
    UErrorCode v8 = U_ILLEGAL_ARGUMENT_ERROR;
  }

  *(void *)a5 = off_189727E50;
  *(void *)(a5 + 8) = v7;
  *(_DWORD *)(a5 + 16) = v8;
  return result;
}

uint64_t *icu::number::LocalizedNumberFormatter::formatDecimalQuantity@<X0>( uint64_t *this@<X0>, const icu::number::impl::DecimalQuantity *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = (uint64_t *)*(unsigned int *)a3;
  if ((int)v5 <= 0)
  {
    __int128 v10 = (icu::number::LocalizedNumberFormatter *)this;
    this = icu::UMemory::operator new(v5, (icu::UMemory *)0x198, (unint64_t)a2);
    uint64_t v6 = this;
    if (this)
    {
      sub_1808D4228((uint64_t)this);
      icu::number::impl::DecimalQuantity::operator=((icu::number::impl::DecimalQuantity *)(v6 + 38), (uint64_t)a2);
      this = (uint64_t *)icu::number::LocalizedNumberFormatter::formatImpl( v10,  (icu::number::impl::UFormattedNumberData *)v6,  a3);
      if (*(int *)a3 < 1)
      {
        UErrorCode v7 = U_ZERO_ERROR;
      }

      else
      {
        this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v6 + 8))(v6);
        uint64_t v6 = 0LL;
        UErrorCode v7 = *a3;
      }
    }

    else
    {
      UErrorCode v7 = U_MEMORY_ALLOCATION_ERROR;
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    }
  }

  else
  {
    uint64_t v6 = 0LL;
    UErrorCode v7 = U_ILLEGAL_ARGUMENT_ERROR;
  }

  *(void *)a4 = off_189727E50;
  *(void *)(a4 + 8) = v6;
  *(_DWORD *)(a4 + 16) = v7;
  return this;
}

uint64_t icu::number::LocalizedNumberFormatter::computeCompiled( icu::number::LocalizedNumberFormatter *this, UErrorCode *a2)
{
  uint64_t v4 = (unsigned int *)((char *)this + 480);
  uint64_t v5 = (uint64_t *)atomic_load((unsigned int *)this + 120);
  if ((v5 & 0x80000000) == 0)
  {
    int v6 = *((_DWORD *)this + 60);
    if ((int)v5 <= v6 && v6 >= 1)
    {
      do
      {
        unsigned int v8 = __ldaxr(v4);
        uint64_t v5 = (uint64_t *)(v8 + 1);
      }

      while (__stlxr(v5, v4));
    }
  }

  int v9 = *((_DWORD *)this + 60);
  if ((_DWORD)v5 != v9 || v9 < 1) {
    return v5 >> 31;
  }
  uint64_t result = (uint64_t)icu::UMemory::operator new(v5, (icu::UMemory *)0x258, (unint64_t)a2);
  if (result)
  {
    *((void *)this + 59) = sub_180927C80(result, (uint64_t)this, a2);
    atomic_store(0x80000000, (unsigned int *)this + 120);
    return 1LL;
  }

  else
  {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
  }

  return result;
}

void icu::number::LocalizedNumberFormatter::getAffixImpl( icu::number::LocalizedNumberFormatter *this, int a2, int a3, icu::UnicodeString *a4, UErrorCode *a5)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  uint64_t v24 = 0LL;
  memset(v23, 0, sizeof(v23));
  icu::FormattedStringBuilder::FormattedStringBuilder((icu::FormattedStringBuilder *)v23);
  if (a3) {
    unsigned int v10 = 0;
  }
  else {
    unsigned int v10 = 3;
  }
  else {
    int32_t v11 = sub_18092816C((uint64_t)this, v10, 5, (uint64_t)v23, a5);
  }
  int32_t v12 = v11;
  if ((*((_WORD *)a4 + 4) & 1) != 0) {
    __int16 v13 = 2;
  }
  else {
    __int16 v13 = *((_WORD *)a4 + 4) & 0x1F;
  }
  *((_WORD *)a4 + 4) = v13;
  icu::FormattedStringBuilder::toTempUnicodeString((icu::FormattedStringBuilder *)v23, (uint64_t)v19);
  if (a2)
  {
    int v14 = 0;
    int32_t v15 = v12;
  }

  else
  {
    int32_t v15 = icu::FormattedStringBuilder::length((icu::FormattedStringBuilder *)v23) - v12;
    int v14 = v12;
  }

  icu::UnicodeString::tempSubString((icu::UnicodeString *)v19, v14, v15, (icu::UnicodeString *)v20);
  if ((v21 & 0x8000u) == 0) {
    uint64_t v16 = v21 >> 5;
  }
  else {
    uint64_t v16 = v22;
  }
  icu::UnicodeString::doAppend((uint64_t)a4, (const icu::UnicodeString *)v20, 0, v16);
  icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v20);
  icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v19);
  icu::FormattedStringBuilder::~FormattedStringBuilder((icu::FormattedStringBuilder *)v23);
}

uint64_t icu::number::LocalizedNumberFormatter::getCompiled(icu::number::LocalizedNumberFormatter *this)
{
  return *((void *)this + 59);
}

uint64_t icu::number::LocalizedNumberFormatter::getCallCount(icu::number::LocalizedNumberFormatter *this)
{
  return atomic_load((unsigned int *)this + 120);
}

uint64_t icu::number::LocalizedNumberFormatter::getDecimalFormatSymbols( icu::number::LocalizedNumberFormatter *this)
{
  return icu::number::impl::SymbolsWrapper::getDecimalFormatSymbols((icu::number::LocalizedNumberFormatter *)((char *)this + 136));
}

uint64_t sub_180927784(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 592);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 584);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 576);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 568);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 560);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 552);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 544);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 536);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  uint64_t v10 = *(void *)(a1 + 528);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  uint64_t v11 = *(void *)(a1 + 520);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
  }
  uint64_t v12 = *(void *)(a1 + 512);
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
  }
  uint64_t v13 = *(void *)(a1 + 504);
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
  }
  *(void *)(a1 + 8) = off_189727648;
  if (*(_BYTE *)(a1 + 460)) {
    uprv_free(*(void **)(a1 + 448));
  }
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)(a1 + 424));
  *(void *)(a1 + 320) = off_189727B38;
  icu::UnicodeString::~UnicodeString(off_189727B38, (icu::UnicodeString *)(a1 + 328));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)(a1 + 320));
  *(void *)(a1 + 280) = off_189727DF0;
  icu::number::Scale::~Scale((icu::number::Scale *)(a1 + 288));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)(a1 + 264));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)(a1 + 248));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)(a1 + 224));
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)(a1 + 40));
  return a1;
}

uint64_t sub_180927920(uint64_t a1)
{
  *(void *)a1 = off_189727648;
  if (*(_BYTE *)(a1 + 452)) {
    uprv_free(*(void **)(a1 + 440));
  }
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)(a1 + 416));
  *(void *)(a1 + 312) = off_189727B38;
  icu::UnicodeString::~UnicodeString(off_189727B38, (icu::UnicodeString *)(a1 + 320));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)(a1 + 312));
  *(void *)(a1 + 272) = off_189727DF0;
  icu::number::Scale::~Scale((icu::number::Scale *)(a1 + 280));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)(a1 + 256));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)(a1 + 240));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)(a1 + 216));
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 32));
  return a1;
}

void sub_1809279CC(void **a1)
{
  *a1 = off_189727648;
  if (*((_BYTE *)a1 + 452)) {
    uprv_free(a1[55]);
  }
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)(a1 + 52));
  a1[39] = off_189727B38;
  icu::UnicodeString::~UnicodeString(off_189727B38, (icu::UnicodeString *)(a1 + 40));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)(a1 + 39));
  a1[34] = off_189727DF0;
  icu::number::Scale::~Scale((icu::number::Scale *)(a1 + 35));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)(a1 + 32));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)(a1 + 30));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)(a1 + 27));
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 4));
  operator delete(a1);
}

uint64_t sub_180927A78(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a3) {
    return sub_180927A98(a3, result);
  }
  *(_BYTE *)(result + 488) = 1;
  return result;
}

uint64_t sub_180927A98(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_OWORD *)(a1 + 12) = v4;
  icu::UnicodeString::operator=((UChar **)(a1 + 32), (UChar **)(a2 + 32));
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  __int128 v5 = *(_OWORD *)(a2 + 152);
  __int128 v6 = *(_OWORD *)(a2 + 168);
  __int128 v7 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = v7;
  *(_OWORD *)(a1 + 168) = v6;
  *(_OWORD *)(a1 + 152) = v5;
  __int128 v8 = *(_OWORD *)(a2 + 120);
  __int128 v9 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 104) = v9;
  *(_OWORD *)(a1 + 120) = v8;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  icu::number::Scale::operator=(a1 + 280, a2 + 280);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  icu::UnicodeString::operator=((UChar **)(a1 + 320), (UChar **)(a2 + 320));
  __int128 v10 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = v10;
  icu::MeasureUnit::operator=(a1 + 416, a2 + 416);
  if (a1 != a2) {
    sub_180927B8C((void *)(a1 + 440), a2 + 440, (int *)(a1 + 472));
  }
  uint64_t v11 = *(void *)(a2 + 480);
  *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
  *(void *)(a1 + 480) = v11;
  return a1;
}

void *sub_180927B8C(void *result, uint64_t a2, int *a3)
{
  if (*a3 <= 0)
  {
    uint64_t v5 = *(unsigned int *)(a2 + 8);
    if ((int)v5 >= 1 && (__int128 v6 = (void **)result, (result = uprv_malloc(8 * v5)) != 0LL))
    {
      __int128 v7 = result;
      if (*((_BYTE *)v6 + 12)) {
        uprv_free(*v6);
      }
      *__int128 v6 = v7;
      *((_DWORD *)v6 + 2) = v5;
      *((_BYTE *)v6 + 12) = 1;
      return memcpy(v7, *(const void **)a2, 8 * v5);
    }

    else
    {
      *a3 = 7;
    }
  }

  return result;
}

void **sub_180927C34(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = v2[309];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
    sub_1808D3EFC(v2 + 1);
    icu::UMemory::operator delete(v2);
  }

  return a1;
}

uint64_t sub_180927C80(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  *(void *)a1 = 0LL;
  sub_180929650(a1 + 8);
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(void *)a1 = sub_1809285A0(a1, a2, 1, a3);
  return a1;
}

uint64_t sub_180927CE4(uint64_t a1, void *a2, UErrorCode *a3)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  __int128 v6 = (icu::number::impl::DecimalQuantity *)(a2 + 38);
  bzero(&v12, 0x258uLL);
  sub_180929650((uint64_t)v13);
  memset(&v13[496], 0, 96);
  uint64_t v12 = sub_1809285A0((uint64_t)&v12, a1, 0, a3);
  __int128 v7 = sub_180927E20((uint64_t *)&v12, v6, a3);
  uint64_t v8 = 0LL;
  if (*(int *)a3 <= 0)
  {
    uint64_t v9 = (uint64_t)v7;
    int v10 = sub_180927EA0((uint64_t)(v7 + 1), v6, (icu::FormattedStringBuilder *)(a2 + 1), 0, a3);
    uint64_t v8 = sub_1809280A4(v9, (icu::FormattedStringBuilder *)(a2 + 1), 0LL, v10, a3) + v10;
    icu::MeasureUnit::operator=((uint64_t)(a2 + 47), v9 + 416);
    a2[50] = *(void *)(v9 + 184);
  }

  sub_180927784((uint64_t)&v12);
  return v8;
}

uint64_t *sub_180927E20(uint64_t *a1, icu::number::impl::DecimalQuantity *a2, UErrorCode *a3)
{
  if (*(int *)a3 < 1)
  {
    uint64_t v6 = *a1;
    if (*a1)
    {
      __int128 v4 = a1 + 1;
      (*(void (**)(uint64_t, icu::number::impl::DecimalQuantity *, uint64_t *, UErrorCode *))(*(void *)v6 + 16LL))( v6,  a2,  a1 + 1,  a3);
      icu::number::IntegerWidth::apply((icu::number::IntegerWidth *)((char *)a1 + 164), a2, a3);
      return v4;
    }

    *a3 = U_INTERNAL_PROGRAM_ERROR;
  }

  return a1 + 1;
}

uint64_t sub_180927EA0( uint64_t a1, icu::number::impl::DecimalQuantity *a2, icu::FormattedStringBuilder *a3, int a4, UErrorCode *a5)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if ((*(unsigned int (**)(icu::number::impl::DecimalQuantity *))(*(void *)a2 + 32LL))(a2))
  {
    int v10 = (UChar **)(*(void *)(a1 + 88) + 904LL);
LABEL_5:
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v21, v10);
    uint64_t v11 = icu::FormattedStringBuilder::insert(a3, a4, (uint64_t)v21, 32, 0, a5);
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v21);
    return v11;
  }

  if ((*(unsigned int (**)(icu::number::impl::DecimalQuantity *))(*(void *)a2 + 24LL))(a2))
  {
    int v10 = (UChar **)(*(void *)(a1 + 88) + 968LL);
    goto LABEL_5;
  }

  int v14 = sub_1809293F0(a1, a2, a3, a4, a5);
  if ((icu::number::impl::DecimalQuantity::getLowerDisplayMagnitude(a2) & 0x80000000) != 0 || *(_DWORD *)(a1 + 20) == 1)
  {
    if ((*(_WORD *)(a1 + 32) & 1) != 0)
    {
      if (*(_BYTE *)(a1 + 16)) {
        int32_t v15 = (UChar **)(*(void *)(a1 + 88) + 648LL);
      }
      else {
        int32_t v15 = (UChar **)(*(void *)(a1 + 88) + 8LL);
      }
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v21, v15);
      v14 += icu::FormattedStringBuilder::insert(a3, v14 + a4, (uint64_t)v21, 34, 0, a5);
      icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v21);
    }

    else
    {
      v14 += icu::FormattedStringBuilder::insert(a3, v14 + a4, a1 + 24, 39, 0, a5);
    }
  }

  int v17 = sub_180929568(a1, a2, a3, v14 + a4, a5);
  uint64_t v11 = (v17 + v14);
  if (!(v17 + v14))
  {
    uint64_t v18 = *(void *)(a1 + 88);
    unsigned int v19 = *(_DWORD *)(v18 + 1928);
    if (v19 == -1) {
      return icu::FormattedStringBuilder::insert(a3, a4, v18 + 264, 32, 0, a5);
    }
    else {
      return icu::FormattedStringBuilder::insertCodePoint(a3, a4, v19, 32, a5);
    }
  }

  return v11;
}

uint64_t sub_1809280A4(uint64_t a1, icu::FormattedStringBuilder *a2, uint64_t a3, int a4, UErrorCode *a5)
{
  int v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 208) + 16LL))(*(void *)(a1 + 208));
  uint64_t v11 = *(const icu::number::impl::Modifier **)(a1 + 200);
  if (*(int *)(a1 + 144) < 1)
  {
    v10 += (*(uint64_t (**)(void, icu::FormattedStringBuilder *, uint64_t, void, UErrorCode *))(*(void *)v11 + 16LL))( *(void *)(a1 + 200),  a2,  a3,  (v10 + a4),  a5);
    int v12 = (*(uint64_t (**)(void, icu::FormattedStringBuilder *, uint64_t, void, UErrorCode *))(**(void **)(a1 + 192) + 16LL))( *(void *)(a1 + 192),  a2,  a3,  (v10 + a4),  a5);
  }

  else
  {
    int v12 = icu::number::impl::Padder::padAndApply( (icu::number::impl::Padder *)(a1 + 144),  v11,  *(const icu::number::impl::Modifier **)(a1 + 192),  a2,  a3,  (v10 + a4),  a5);
  }

  return (v12 + v10);
}

uint64_t sub_18092816C(uint64_t a1, int a2, int a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  bzero(&v12, 0x258uLL);
  sub_180929650((uint64_t)v13);
  memset(&v13[496], 0, 96);
  int v12 = sub_1809285A0((uint64_t)&v12, a1, 0, a5);
  uint64_t v10 = sub_180928254((uint64_t)&v12, a2, a3, a4, (int *)a5);
  sub_180927784((uint64_t)&v12);
  return v10;
}

uint64_t sub_180928254(uint64_t a1, int a2, int a3, uint64_t a4, int *a5)
{
  if (*a5 <= 0
    && (icu::number::impl::MutablePatternModifier::setNumberProperties(*(void *)(a1 + 552), a2, a3),
        (*(void (**)(void, uint64_t, void, void, int *))(**(void **)(a1 + 552) + 24LL))( *(void *)(a1 + 552),  a4,  0LL,  0LL,  a5),  *a5 <= 0))
  {
    return (*(uint64_t (**)(void))(**(void **)(a1 + 552) + 32LL))(*(void *)(a1 + 552));
  }

  else
  {
    return 0LL;
  }

uint64_t sub_1809282E0(uint64_t *a1, void *a2, UErrorCode *a3)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  uint64_t v6 = (icu::number::impl::DecimalQuantity *)(a2 + 38);
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v20 = 0u;
  __int128 v18 = 0u;
  memset(v19, 0, sizeof(v19));
  __int128 v16 = 0u;
  memset(v17, 0, sizeof(v17));
  memset(v15, 0, sizeof(v15));
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  sub_180929650((uint64_t)v11);
  sub_1809284A0(a1, v6, (uint64_t)v11, a3);
  if (*(int *)a3 <= 0)
  {
    int v8 = sub_180927EA0((uint64_t)v11 + 8, v6, (icu::FormattedStringBuilder *)(a2 + 1), 0, a3);
    uint64_t v7 = sub_1809280A4((uint64_t)v11, (icu::FormattedStringBuilder *)(a2 + 1), 0LL, v8, a3) + v8;
    icu::MeasureUnit::operator=((uint64_t)(a2 + 47), (uint64_t)&v20);
    a2[50] = *((void *)&v13 + 1);
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  *(void *)&v11[0] = off_189727648;
  if (BYTE4(v22)) {
    uprv_free(*((void **)&v21 + 1));
  }
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v20);
  *((void *)&v18 + 1) = off_189727B38;
  icu::UnicodeString::~UnicodeString(off_189727B38, (icu::UnicodeString *)v19);
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)((char *)&v18 + 8));
  *(void *)&v17[1] = off_189727DF0;
  icu::number::Scale::~Scale((icu::number::Scale *)((char *)&v17[1] + 8));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)v17);
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)&v16);
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)((char *)v15 + 8));
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v12);
  return v7;
}

void sub_1809284A0(uint64_t *a1, icu::number::impl::DecimalQuantity *a2, uint64_t a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    uint64_t v5 = *a1;
    if (v5)
    {
      (*(void (**)(uint64_t, icu::number::impl::DecimalQuantity *, uint64_t, UErrorCode *))(*(void *)v5 + 16LL))( v5,  a2,  a3,  a4);
      icu::number::IntegerWidth::apply((icu::number::IntegerWidth *)(a3 + 156), a2, a4);
    }

    else
    {
      *a4 = U_INTERNAL_PROGRAM_ERROR;
    }
  }

uint64_t sub_180928518(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int *a5)
{
  if (*a5 <= 0
    && (uint64_t Modifier = icu::number::impl::ImmutablePatternModifier::getModifier(*(void *)(a1 + 560), a2),
        (*(void (**)(uint64_t, uint64_t, void, void, int *))(*(void *)Modifier + 16LL))( Modifier,  a4,  0LL,  0LL,  a5),  *a5 <= 0))
  {
    return (*(uint64_t (**)(uint64_t))(*(void *)Modifier + 24LL))(Modifier);
  }

  else
  {
    return 0LL;
  }

icu::number::impl::MutablePatternModifier *sub_1809285A0(uint64_t a1, uint64_t a2, int a3, UErrorCode *a4)
{
  uint64_t v156 = *MEMORY[0x1895F89C0];
  if (*(int *)a4 <= 0 && (sub_18092486C(a2, (int *)a4) & 1) == 0)
  {
    uint64_t v10 = (icu::MeasureUnitImpl *)(a2 + 16);
    Type = icu::MeasureUnit::getType((icu::MeasureUnit *)(a2 + 16));
    int v12 = strcmp("currency", Type);
    BOOL v13 = v12 == 0;
    icu::MeasureUnit::MeasureUnit((uint64_t)v155);
    char v14 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)(a2 + 16) + 32LL))(a2 + 16, v155);
    icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v155);
    Subtype = icu::MeasureUnit::getSubtype((icu::MeasureUnit *)(a2 + 16));
    int v144 = strcmp("percent", Subtype);
    __int128 v16 = icu::MeasureUnit::getSubtype((icu::MeasureUnit *)(a2 + 16));
    int v142 = strcmp("permille", v16);
    int v17 = *(_DWORD *)(a2 + 4);
    int v18 = *(_DWORD *)(a2 + 156) - 3;
    else {
      int v19 = dword_180A3A734[v18];
    }
    int v139 = v19;
    __int128 v153 = 0u;
    __int128 v154 = 0u;
    v152 = &unk_180A479F2;
    icu::CurrencyUnit::CurrencyUnit(&v153, &v152, a4);
    v146 = v152;
    int v138 = v17;
    if (v12)
    {
      int v20 = *(_DWORD *)(a2 + 152);
      if (v20 == 7) {
        int v20 = 1;
      }
      int v151 = v20;
      if ((v14 & 1) == 0
        && (v144 ? (BOOL v21 = v142 == 0) : (BOOL v21 = 1), !v21 ? (v22 = 0) : (v22 = 1), v20 == 2 || !v22 || v17 == 1))
      {
        if (*icu::MeasureUnit::getType((icu::MeasureUnit *)(a2 + 16))) {
          BOOL v137 = 0;
        }
        else {
          BOOL v137 = icu::MeasureUnit::getComplexity((icu::MeasureUnit *)(a2 + 16), a4, v25, v26) == 2;
        }
        int v23 = 1;
      }

      else
      {
        int v23 = 0;
        BOOL v137 = 0;
      }
    }

    else
    {
      icu::CurrencyUnit::CurrencyUnit( (uint64_t *)&v146,  (icu::CurrencyUnit *)v155,  (const icu::MeasureUnit *)(a2 + 16),  a4);
      icu::CurrencyUnit::operator=((uint64_t)&v153, (unint64_t)v155);
      icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)v155);
      int v23 = 0;
      BOOL v137 = 0;
      int v24 = *(_DWORD *)(a2 + 152);
      if (v24 == 7) {
        int v24 = 1;
      }
      int v151 = v24;
    }

    if (icu::number::impl::SymbolsWrapper::isNumberingSystem((icu::number::impl::SymbolsWrapper *)(a2 + 136)))
    {
      int v27 = v12;
      NumberingSystem = (icu::NumberingSystem *)icu::number::impl::SymbolsWrapper::getNumberingSystem((icu::number::impl::SymbolsWrapper *)(a2 + 136));
      if (NumberingSystem)
      {
        v29 = NumberingSystem;
        BOOL v132 = v13;
        v134 = (icu::MeasureUnitImpl *)(a2 + 16);
        int v30 = v23;
        int v31 = a3;
        uint64_t Name = icu::NumberingSystem::getName(NumberingSystem);
        uint64_t v33 = a1;
        *(void *)(a1 + 192) = "";
        if (icu::number::impl::SymbolsWrapper::isDecimalFormatSymbols((icu::number::impl::SymbolsWrapper *)(a2 + 136)))
        {
          int v12 = v27;
          v36 = (const char *)Name;
          a3 = v31;
          int v23 = v30;
          uint64_t v10 = (icu::MeasureUnitImpl *)(a2 + 16);
          BOOL v13 = v132;
          goto LABEL_35;
        }

        v41 = (icu::DecimalFormatSymbols *)icu::UMemory::operator new(v35, (icu::UMemory *)0xB48, v34);
        if (!v41) {
          goto LABEL_165;
        }
        v40 = (char **)v41;
        icu::DecimalFormatSymbols::DecimalFormatSymbols( v41,  (const icu::Locale *)(a2 + 248),  v29,  *(_BYTE *)(a2 + 245),  a4);
        int v12 = v27;
        v36 = (const char *)Name;
LABEL_43:
        if (*(int *)a4 > 0
          || !v12 && (icu::DecimalFormatSymbols::setCurrency(v40, (const UChar *)&v154 + 2, (int *)a4), *(int *)a4 > 0))
        {
          (*((void (**)(char **))*v40 + 1))(v40);
          goto LABEL_166;
        }

        *(void *)(v33 + 104) = v40;
        a1 = v33;
        uint64_t v42 = *(void *)(v33 + 520);
        if (v42) {
          (*(void (**)(uint64_t))(*(void *)v42 + 8LL))(v42);
        }
        *(void *)(v33 + 520) = v40;
        a3 = v31;
        int v23 = v30;
        uint64_t v10 = v134;
        BOOL v13 = v132;
        if (v36) {
          goto LABEL_49;
        }
        goto LABEL_36;
      }

      *(void *)(a1 + 192) = "";
      if (!icu::number::impl::SymbolsWrapper::isDecimalFormatSymbols((icu::number::impl::SymbolsWrapper *)(a2 + 136)))
      {
LABEL_39:
        BOOL v132 = v12 == 0;
        uint64_t v33 = a1;
        v134 = (icu::MeasureUnitImpl *)(a2 + 16);
        int v30 = v23;
        int v31 = a3;
        v39 = (icu::DecimalFormatSymbols *)icu::UMemory::operator new(v38, (icu::UMemory *)0xB48, v37);
        if (!v39) {
          goto LABEL_165;
        }
        v40 = (char **)v39;
        icu::DecimalFormatSymbols::DecimalFormatSymbols(v39, (const icu::Locale *)(a2 + 248), a4);
        v36 = 0LL;
        goto LABEL_43;
      }
    }

    else
    {
      *(void *)(a1 + 192) = "";
      if (!icu::number::impl::SymbolsWrapper::isDecimalFormatSymbols((icu::number::impl::SymbolsWrapper *)(a2 + 136))) {
        goto LABEL_39;
      }
    }

    v36 = 0LL;
LABEL_35:
    *(void *)(a1 + 104) = icu::number::impl::SymbolsWrapper::getDecimalFormatSymbols((icu::number::impl::SymbolsWrapper *)(a2 + 136));
    if (v36) {
      goto LABEL_49;
    }
LABEL_36:
    v36 = (const char *)(*(void *)(a1 + 104) + 2874LL);
LABEL_49:
    if (*v36)
    {
LABEL_51:
      strncpy((char *)(a1 + 180), v36, 8uLL);
      *(_BYTE *)(a1 + 188) = 0;
      if (v12 || (v47 = *(uint64_t **)(a1 + 104), (uint64_t v48 = v47[310]) == 0))
      {
        if ((v23 & 1) != 0)
        {
          int v44 = 0;
        }

        else
        {
          int v44 = 3;
          if (v144 && v142)
          {
            if (v151 != 2 && v12 == 0) {
              int v44 = v139;
            }
            else {
              int v44 = 0;
            }
          }
        }

        v46 = sub_18093F458(a2 + 248, v36, v44, (int *)a4);
        v47 = (uint64_t *)*(unsigned int *)a4;
        uint64_t v48 = (uint64_t)v46;
      }

      int v145 = v12;
      v49 = icu::UMemory::operator new(v47, (icu::UMemory *)0x1B8, v43);
      if (!v49) {
        goto LABEL_167;
      }
      v50 = (const icu::UnicodeString *)v49;
      unsigned int v140 = v23;
      sub_18091E880((uint64_t)v49);
      v51 = (const icu::number::impl::ParsedPatternInfo **)(a1 + 536);
      uint64_t v52 = *(void *)(a1 + 536);
      if (v52) {
        (*(void (**)(uint64_t))(*(void *)v52 + 8LL))(v52);
      }
      *v51 = v50;
      v53 = (UChar **)icu::UnicodeString::UnicodeString((uint64_t)v155, v48);
      icu::number::impl::PatternParser::parseToPatternInfo(v53, v50, a4, v54);
      icu::UnicodeString::~UnicodeString(v55, (icu::UnicodeString *)v155);
      uint64_t v57 = a1 + 8;
      if (*(__int16 *)(a2 + 200) < 1)
      {
        v133 = v36;
        int v60 = v138;
        if (!v137)
        {
LABEL_81:
          if (*(_DWORD *)(a2 + 168) || *(void *)(a2 + 176))
          {
            icu::number::impl::MultiplierFormatHandler::setAndChain(a1 + 280, a2 + 168, v57);
            uint64_t v57 = a1 + 280;
          }

          int v63 = *(_DWORD *)(a2 + 64);
          memset(v149, 0, sizeof(v149));
          if (v63)
          {
            v149[0] = *(_OWORD *)(a2 + 64);
            __int128 v64 = *(_OWORD *)(a2 + 76);
          }

          else
          {
            if (v60 == 1)
            {
              icu::number::Precision::integer((uint64_t)v148);
              icu::number::FractionPrecision::withMinDigits((uint64_t)v148, 2, (uint64_t)v155);
            }

            else if (v145)
            {
              if (*(__int16 *)(a2 + 200) >= 1)
              {
                LODWORD(v149[0]) = 0;
                DWORD2(v149[1]) = 0;
LABEL_96:
                sub_1809382A4( (uint64_t)v155,  (icu::number::Precision *)v149,  *(_DWORD *)(a2 + 96),  (const UChar *)&v153,  a4);
                __int128 v66 = *(_OWORD *)&v155[16];
                *(_OWORD *)(a1 + 112) = *(_OWORD *)v155;
                *(_OWORD *)(a1 + 128) = v66;
                *(void *)(a1 + 141) = *(void *)&v155[29];
                uint64_t v135 = v57;
                if (*(__int16 *)(a2 + 100) == -3)
                {
                  if (v138 == 1) {
                    signed int v67 = 1;
                  }
                  else {
                    signed int v67 = 2;
                  }
                  *(void *)(a1 + 20) = icu::number::impl::Grouper::forStrategy(v67);
                  *(_DWORD *)(a1 + 28) = v69;
                }

                else
                {
                  uint64_t v68 = *(void *)(a2 + 100);
                  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 108);
                  *(void *)(a1 + 20) = v68;
                }

                v70 = (icu::number::impl::Padder *)icu::number::impl::Grouper::setLocaleData( (icu::number::impl::Grouper *)(a1 + 20),  *v51,  (const icu::Locale *)(a2 + 248));
                if (*(_DWORD *)(a2 + 112) == -2)
                {
                  *(void *)(a1 + 152) = icu::number::impl::Padder::none(v70);
                  *(_DWORD *)(a1 + 160) = v71;
                }

                else
                {
                  uint64_t v72 = *(void *)(a2 + 112);
                  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 120);
                  *(void *)(a1 + 152) = v72;
                }

                if (*(_BYTE *)(a2 + 132) || *(unsigned __int16 *)(a2 + 124) != 0xFFFF)
                {
                  uint64_t v73 = *(void *)(a2 + 124);
                  *(_BYTE *)(a1 + 172) = *(_BYTE *)(a2 + 132);
                  *(void *)(a1 + 164) = v73;
                }

                else
                {
                  *(void *)(a1 + 164) = icu::number::IntegerWidth::zeroFillTo((icu::number::IntegerWidth *)1);
                  *(_BYTE *)(a1 + 172) = v71;
                }

                int v74 = *(_DWORD *)(a2 + 156);
                if (v74 == 9) {
                  int v74 = 0;
                }
                *(_DWORD *)(a1 + 176) = v74;
                int v75 = *(_DWORD *)(a2 + 164);
                if (v75 == 2) {
                  int v75 = 0;
                }
                *(_DWORD *)(a1 + 36) = v75;
                *(_BYTE *)(a1 + 32) = v13;
                v76 = (uint64_t *)*(unsigned int *)(a2 + 4);
                if ((_DWORD)v76)
                {
                  uint64_t v77 = a1;
                  int v78 = v142;
                  v79 = (uint64_t *)(v77 + 264);
                  uint64_t v80 = v77;
                  *(void *)(v77 + 216) = v77 + 264;
                  goto LABEL_120;
                }

                v81 = icu::UMemory::operator new(v76, (icu::UMemory *)0x28, v71);
                if (v81)
                {
                  uint64_t v57 = (uint64_t)v81;
                  sub_180938AD4(v81, a2 + 4, *(void *)(a1 + 104), v135);
                  uint64_t v80 = a1;
                  uint64_t v82 = *(void *)(a1 + 544);
                  if (v82) {
                    (*(void (**)(uint64_t))(*(void *)v82 + 8LL))(v82);
                  }
                  int v78 = v142;
                  *(void *)(v80 + 544) = v57;
LABEL_120:
                  v83 = (icu::number::impl::MutablePatternModifier *)icu::UMemory::operator new( v79,  (icu::UMemory *)0x188,  v71);
                  int v8 = v83;
                  if (!v83)
                  {
LABEL_168:
                    int v65 = 7;
                    goto LABEL_169;
                  }

                  uint64_t v136 = v57;
                  v143 = (icu::PluralRules *)(a2 + 248);
                  icu::number::impl::MutablePatternModifier::MutablePatternModifier(v83, 0);
                  uint64_t v84 = *(void *)(v80 + 552);
                  if (v84) {
                    (*(void (**)(uint64_t))(*(void *)v84 + 8LL))(v84);
                  }
                  *(void *)(v80 + 552) = v8;
                  v86 = (uint64_t *)(a2 + 224);
                  uint64_t v85 = *(void *)(a2 + 224);
                  if (!v85
                    || v138 == 1
                    && (v145 == 0) != (*(unsigned int (**)(uint64_t))(*(void *)v85 + 40LL))(v85))
                  {
                    v86 = (uint64_t *)v51;
                  }

                  char v87 = v78 == 0;
                  uint64_t v88 = *v86;
                  icu::number::impl::MutablePatternModifier::setPatternInfo((uint64_t)v8, v88, 0);
                  v89 = (void *)v80;
                  icu::number::impl::MutablePatternModifier::setPatternAttributes( (uint64_t)v8,  *(_DWORD *)(v80 + 176),  v87,  *(_BYTE *)(a2 + 160));
                  int v90 = icu::number::impl::MutablePatternModifier::needsPlurals(v8);
                  v91 = 0LL;
                  uint64_t v92 = *(void *)(v80 + 104);
                  int v93 = v151;
                  if (v90) {
                    v91 = sub_180929398(v80, *(uint64_t **)(a2 + 232), v143, (const icu::Locale *)a4);
                  }
                  icu::number::impl::MutablePatternModifier::setSymbols( (uint64_t)v8,  v92,  (const UChar *)&v153,  v93,  (uint64_t)v91,  a4);
                  if (a3)
                  {
                    Immutable = icu::number::impl::MutablePatternModifier::createImmutable(v8, a4, v94);
                    sub_1807C9194(v80 + 560, (uint64_t)Immutable, (int *)a4);
                  }

                  if ((*(unsigned int (**)(uint64_t))(*(void *)v88 + 88LL))(v88))
                  {
                    icu::number::impl::MutablePatternModifier::getCurrencySymbolForUnitWidth( (uint64_t)v8,  a4,  (icu::UnicodeString *)v155);
                    icu::UnicodeString::operator=((icu::UnicodeString *)(v80 + 40), (icu::UnicodeString *)v155);
                    icu::UnicodeString::~UnicodeString(v97, (icu::UnicodeString *)v155);
                  }

                  if (v140)
                  {
                    else {
                      v98 = *(UErrorCode **)(a2 + 208);
                    }
                    if (*(__int16 *)(a2 + 200) >= 1)
                    {
                      OutputUnits = (unsigned int *)icu::units::UnitsRouter::getOutputUnits((icu::units::UnitsRouter *)(*(void *)(v80 + 504) + 8LL));
                      v100 = sub_180929398(v80, *(uint64_t **)(a2 + 232), v143, (const icu::Locale *)a4);
                      v102 = sub_18092E684((const char **)v143, OutputUnits, &v151, v98, (uint64_t)v100, v136, a4, v101);
                      sub_1807C9194(v80 + 584, (uint64_t)v102, (int *)a4);
                      uint64_t v103 = *(void *)(v80 + 584);
LABEL_148:
                      int v104 = v138;
                      goto LABEL_149;
                    }

                    if (v137)
                    {
                      v107 = icu::UMemory::operator new((uint64_t *)v137, (icu::UMemory *)0x228, v96);
                      uint64_t v108 = (uint64_t)v107;
                      if (v107)
                      {
                        uint64_t *v107 = (uint64_t)off_1897277B8;
                        v107[1] = (uint64_t)&unk_1897277E8;
                        v107[2] = 0LL;
                        v107[3] = 0LL;
                        *((_DWORD *)v107 + 8) = 1;
                        v107[5] = 0LL;
                        sub_1808D3E38((uint64_t)(v107 + 6));
                        *(_OWORD *)(v108 + 520) = 0u;
                        *(_OWORD *)(v108 + 536) = 0u;
                      }

                      sub_1807C9194(v80 + 576, v108, (int *)a4);
                      v109 = sub_180929398(v80, *(uint64_t **)(a2 + 232), v143, (const icu::Locale *)a4);
                      sub_18092DDD8( (const char **)v143,  v10,  &v151,  v98,  (uint64_t)v109,  v136,  *(void *)(v80 + 576),  (icu::MeasureUnitImpl *)a4);
                      uint64_t v103 = *(void *)(v80 + 576);
                      goto LABEL_148;
                    }

                    int v141 = a3;
                    memset(v155, 0, 24);
                    icu::MeasureUnit::MeasureUnit((uint64_t)v155, (unint64_t)v10);
                    if ((sub_180929348(a2 + 40) & 1) == 0)
                    {
                      icu::MeasureUnit::reciprocal((icu::MeasureUnitImpl **)(a2 + 40), a4, (uint64_t)v147);
                      icu::MeasureUnit::product( (icu::MeasureUnitImpl **)v155,  (const icu::MeasureUnit *)v147,  a4,  (uint64_t)v148);
                      icu::MeasureUnit::operator=((uint64_t)v155, (uint64_t)v148);
                      icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v148);
                      icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v147);
                      v123 = icu::MeasureUnit::getType((icu::MeasureUnit *)v155);
                      v122 = (uint64_t *)*(unsigned __int8 *)v123;
                      if (!*v123)
                      {
                        if (!*icu::MeasureUnit::getType(v10)
                          || (v131 = icu::MeasureUnit::getType((icu::MeasureUnit *)(a2 + 40)),
                              v122 = (uint64_t *)*(unsigned __int8 *)v131,
                              !*v131))
                        {
                          *a4 = U_UNSUPPORTED_ERROR;
                          icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v155);
                          goto LABEL_166;
                        }
                      }
                    }

                    uint64_t v124 = v80;
                    uint64_t v125 = v80 + 568;
                    v126 = icu::UMemory::operator new(v122, (icu::UMemory *)0x368, v121);
                    uint64_t v127 = (uint64_t)v126;
                    if (v126)
                    {
                      uint64_t *v126 = (uint64_t)off_189727718;
                      v126[1] = (uint64_t)&unk_189727748;
                      v128 = v126 + 106;
                      for (uint64_t i = 16LL; i != 848; i += 104LL)
                        icu::number::impl::SimpleModifier::SimpleModifier((icu::number::impl::SimpleModifier *)(v127 + i));
                      void *v128 = 0LL;
                      *(void *)(v127 + 856) = 0LL;
                      *(void *)(v127 + 864) = "";
                    }

                    sub_1807C9194(v125, v127, (int *)a4);
                    v89 = (void *)v124;
                    v130 = sub_180929398(v124, *(uint64_t **)(a2 + 232), v143, (const icu::Locale *)a4);
                    sub_180929B7C( v143,  (icu::MeasureUnit *)v155,  &v151,  (const char *)v98,  (uint64_t)v130,  v136,  *(void **)(v124 + 568),  (int *)a4);
                    uint64_t v103 = *(void *)(v124 + 568);
                    icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v155);
                    int v104 = v138;
                    a3 = v141;
                  }

                  else
                  {
                    int v104 = v138;
                    uint64_t v103 = v136;
                    if (v145 || v151 != 2)
                    {
                      v89[25] = v89 + 31;
                    }

                    else
                    {
                      v105 = sub_180929398((uint64_t)v89, *(uint64_t **)(a2 + 232), v143, (const icu::Locale *)a4);
                      v106 = sub_18092D9BC((uint64_t)v143, (unint64_t)&v153, (uint64_t)v105, v136, (int *)a4);
                      sub_1807C9194((uint64_t)(v89 + 71), (uint64_t)v106, (int *)a4);
                      uint64_t v103 = v89[71];
                    }
                  }

LABEL_149:
                  v110 = (uint64_t *)*(unsigned int *)a4;
                  if ((int)v110 <= 0)
                  {
                    if (v104 != 1)
                    {
                      uint64_t v111 = v103;
                      goto LABEL_152;
                    }

                    uint64_t v112 = v103;
                    int v113 = v151;
                    v114 = icu::UMemory::operator new(v110, (icu::UMemory *)0x818, v96);
                    if (v114)
                    {
                      uint64_t v111 = (uint64_t)v114;
                      if (v145) {
                        BOOL v115 = 1;
                      }
                      else {
                        BOOL v115 = v113 == 2;
                      }
                      int v116 = !v115;
                      int v117 = *(_DWORD *)(a2 + 8);
                      v118 = sub_180929398((uint64_t)v89, *(uint64_t **)(a2 + 232), v143, (const icu::Locale *)a4);
                      sub_18091E594(v111, v117, (uint64_t)v143, v133, v116, (uint64_t)v118, v8, a3, v112, (int *)a4);
                      if (*(int *)a4 < 1)
                      {
                        uint64_t v119 = v89[74];
                        if (!v119)
                        {
                          v89[74] = v111;
                          goto LABEL_152;
                        }

                        (*(void (**)(uint64_t))(*(void *)v119 + 8LL))(v119);
                        UErrorCode v120 = *a4;
                        v89[74] = v111;
                        if (v120 <= U_ZERO_ERROR)
                        {
LABEL_152:
                          if (a3)
                          {
                            icu::number::impl::ImmutablePatternModifier::addToChain(v89[70], v111);
                            int v8 = (icu::number::impl::MutablePatternModifier *)v89[70];
                          }

                          else
                          {
                            icu::number::impl::MutablePatternModifier::addToChain((uint64_t)v8, v111);
                          }

                          goto LABEL_170;
                        }
                      }

                      goto LABEL_166;
                    }

  if (v15 >= (int)v18)
  {
    if (*(int *)status <= 0)
    {
      if (v15 == *destCapacity) {
        int v69 = U_STRING_NOT_TERMINATED_WARNING;
      }
      else {
        int v69 = U_BUFFER_OVERFLOW_ERROR;
      }
      *status = v69;
    }
  }

  else
  {
    v17[v15] = 0;
  }

  if (v15 >= 1)
  {
    v70 = *destCapacity;
    if (*destCapacity >= 1)
    {
      unint64_t v71 = *destBuf;
      if (v15 >= (int)v18)
      {
        uint64_t v72 = 0;
        *destBuf = &v71[v18];
      }

      else
      {
        *destBuf = &v71[v15];
        uint64_t v72 = v70 - v15;
      }

      *destCapacity = v72;
    }
  }

  if ((v75 & 1) == 0 && *(int *)status <= 0)
  {
    v26 = U_BUFFER_OVERFLOW_ERROR;
    goto LABEL_35;
  }

  return v15;
}

LABEL_165:
                    goto LABEL_167;
                  }

    v41 = 7LL;
    *a4 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_166;
  }

  int v22 = 0LL;
  v94 = 1;
  unint64_t v96 = 0;
  uint64_t v92 = -1;
  while (1)
  {
    int v23 = *(unsigned __int16 *)(a2 + 8);
    if ((v23 & 0x8000u) == 0) {
      int v24 = v23 >> 5;
    }
    else {
      int v24 = *(_DWORD *)(a2 + 12);
    }
    if (v24 <= v22)
    {
      int v27 = 0xFFFFLL;
    }

    else
    {
      uint64_t v25 = (v23 & 2) == 0;
      v26 = a2 + 10;
      if (v25) {
        v26 = *(void *)(a2 + 24);
      }
      int v27 = *(unsigned __int16 *)(v26 + 2LL * (int)v22);
    }

    v28 = v22 + 1;
    if (icu::PatternProps::isWhiteSpace((icu::PatternProps *)v27) || (_DWORD)v27 == 59)
    {
      int v22 = (v22 + 1);
      goto LABEL_29;
    }

    if ((_DWORD)v27 == 35) {
      break;
    }
    ++v96;
    if ((int)v22 + 3 > (int)v21 || icu::UnicodeString::doCompare(a2, v22, 2, (uint64_t)":", 0, 2))
    {
      if (v94)
      {
        v32 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)v94, (icu::UMemory *)0x40, v17);
        if (!v32) {
          goto LABEL_165;
        }
        uint64_t v33 = v32;
        icu::UnicodeString::UnicodeString(v32, &v100);
        if (*(_DWORD *)(a1 + 104)) {
          icu::UVector::insertElementAt(v93, v33, 0, a4);
        }
        else {
          icu::UVector::adoptElement((icu::UVector *)v93, v33, a4);
        }
        v41 = *(unsigned int *)a4;
        if ((v101 & 1) != 0) {
          uint64_t v42 = 2LL;
        }
        else {
          uint64_t v42 = v101 & 0x1F;
        }
        LOWORD(v101) = v42;
        unint64_t v43 = icu::UMemory::operator new((uint64_t *)v42, (icu::UMemory *)0x490, v34);
        if (!v43)
        {
          *(void *)(a1 + 96) = 0LL;
          goto LABEL_165;
        }

        int v44 = sub_18095CBCC(v43, a4);
        *(void *)(a1 + 96) = v44;
        *(void *)(*(void *)(a1 + 184) + 8LL) = v44;
        *(_WORD *)(v44 + 1162) = -4096;
        if (!*(_DWORD *)(a1 + 16)) {
          *(_DWORD *)(a1 + 424) = -117379072;
        }
      }

      if (sub_18095F5D4((icu::ICU_Utility *)a2, (const icu::UnicodeString *)v22, (int *)v21))
      {
        v45 = sub_18095F68C(a1, (icu::ICU_Utility *)a2, v22, (int *)v21, a4);
        if ((v45 & 0x80000000) != 0)
        {
          sub_18095F4F8(a1, 65562, a2, v22, a4);
          v94 = 0;
          int v22 = 0xFFFFFFFFLL;
        }

        else
        {
          v94 = 0;
          int v22 = v45;
        }
      }

      else
      {
        int v22 = sub_18095F8A4(a1, a2, v22, v21, a4);
        v94 = 0;
      }

      goto LABEL_29;
    }

    v35 = (v22 + 2);
    v36 = *(unsigned __int16 *)(a2 + 8);
    if ((v36 & 0x8000u) == 0) {
      unint64_t v37 = v36 >> 5;
    }
    else {
      unint64_t v37 = *(_DWORD *)(a2 + 12);
    }
    if (v37 <= v35)
    {
      v39 = 0xFFFFLL;
    }

    else
    {
      uint64_t v25 = (v36 & 2) == 0;
      v38 = a2 + 10;
      if (v25) {
        v38 = *(void *)(a2 + 24);
      }
      v39 = *(unsigned __int16 *)(v38 + 2LL * (int)v35);
    }

    if (icu::PatternProps::isWhiteSpace((icu::PatternProps *)v39) && (int)v35 < (int)v21)
    {
      v46 = (int)v35 + 1LL;
      do
      {
        v47 = *(unsigned __int16 *)(a2 + 8);
        if ((v47 & 0x8000u) == 0) {
          uint64_t v48 = v47 >> 5;
        }
        else {
          uint64_t v48 = *(_DWORD *)(a2 + 12);
        }
        v35 = (v35 + 1);
        if (v48 <= v35)
        {
          v50 = 0xFFFFLL;
        }

        else
        {
          uint64_t v25 = (v47 & 2) == 0;
          v49 = a2 + 10;
          if (v25) {
            v49 = *(void *)(a2 + 24);
          }
          v50 = *(unsigned __int16 *)(v49 + 2 * v46);
        }

        if (!icu::PatternProps::isWhiteSpace((icu::PatternProps *)v50)) {
          break;
        }
      }

      while (v46++ < v21);
    }

    v99 = v35;
    if (!v94)
    {
      uint64_t v52 = *(void **)(a1 + 96);
      if (v52)
      {
        if (*(_DWORD *)(a1 + 104)) {
          icu::UVector::insertElementAt((uint64_t (**)(void *))v9, v52, 0, a4);
        }
        else {
          icu::UVector::addElement(v9, v52, a4);
        }
        if (*(int *)a4 >= 1 && *(void *)(a1 + 96))
        {
          v53 = (void *)sub_18095CE80();
          icu::UMemory::operator delete(v53);
        }

        *(void *)(a1 + 96) = 0LL;
      }
    }

    v54 = sub_18099E6EC(a2, (const icu::UnicodeString *)&v99, *(_DWORD *)(a1 + 104), (int *)a4);
    if (v99 != (_DWORD)v35 && icu::ICU_Utility::parseChar(a2, (const icu::UnicodeString *)&v99, 59))
    {
      if (*(_DWORD *)(a1 + 104))
      {
        LOWORD(v98) = 59;
        icu::UnicodeString::doReplace((uint64_t)&v100, 0LL, 0LL, (uint64_t)&v98, 0, 1LL);
        sub_18095F4D0((icu::UnicodeString *)&v100, 0LL, (icu::UnicodeString *)(v54 + 1));
        if (!v54) {
          goto LABEL_116;
        }
      }

      else
      {
        v59 = *((unsigned __int16 *)v54 + 8);
        int v60 = (__int16)v59;
        v61 = v59 >> 5;
        if (v60 >= 0) {
          uint64_t v62 = v61;
        }
        else {
          uint64_t v62 = *((unsigned int *)v54 + 5);
        }
        int v63 = icu::UnicodeString::doAppend((uint64_t)&v100, (const icu::UnicodeString *)(v54 + 1), 0, v62);
        LOWORD(v98) = 59;
        icu::UnicodeString::doAppend(v63, (uint64_t)&v98, 0, 1LL);
      }

      goto LABEL_115;
    }

    v98 = -1;
    unint64_t v56 = sub_18099F6C4((icu::ICU_Utility *)a2, (icu::UnicodeString *)&v99, *(_DWORD *)(a1 + 104), &v98, 0LL);
    if (!v56)
    {
      sub_18095F4F8(a1, 65569, a2, v35, a4);
      if (!v54) {
        goto LABEL_116;
      }
      goto LABEL_115;
    }

    uint64_t v57 = v56;
    if (!icu::ICU_Utility::parseChar(a2, (const icu::UnicodeString *)&v99, 59)
      || (*(_DWORD *)(a1 + 104) != 0) == (v98 == 0))
    {
      goto LABEL_106;
    }

    if (*(void *)(a1 + 88))
    {
      sub_18095F4F8(a1, 65559, a2, v35, a4);
LABEL_106:
      icu::UnicodeSet::~UnicodeSet(v57);
      icu::UMemory::operator delete(v58);
      if (!v54) {
        goto LABEL_116;
      }
LABEL_115:
      icu::UnicodeString::~UnicodeString((void *)v55, (icu::UnicodeString *)(v54 + 17));
      icu::UnicodeString::~UnicodeString(v64, (icu::UnicodeString *)(v54 + 9));
      icu::UnicodeString::~UnicodeString(v65, (icu::UnicodeString *)(v54 + 1));
      icu::UMemory::operator delete(v54);
      goto LABEL_116;
    }

    *(void *)(a1 + 88) = v57;
    v55 = v96;
    uint64_t v92 = v96;
    if (v54) {
      goto LABEL_115;
    }
LABEL_116:
    int v22 = v99;
    v94 = 1;
LABEL_29:
  }

  v29 = *(unsigned __int16 *)(a2 + 8);
  if ((int)v22 >= -1)
  {
    if ((v29 & 0x8000) != 0)
    {
      int v31 = *(_DWORD *)(a2 + 12);
      if (v31 >= v28) {
        int v30 = v22 + 1;
      }
      else {
        int v30 = *(_DWORD *)(a2 + 12);
      }
    }

    else
    {
      int v31 = v29 >> 5;
      else {
        int v30 = v31;
      }
    }
  }

  else
  {
    int v30 = 0;
    if ((v29 & 0x8000) != 0) {
      int v31 = *(_DWORD *)(a2 + 12);
    }
    else {
      int v31 = v29 >> 5;
    }
  }

  v40 = icu::UnicodeString::doIndexOf(a2, 0xAu, v30, v31 - v30);
  int v22 = (v40 + 1);
  if (v40 != -1) {
    goto LABEL_29;
  }
LABEL_118:
  if (v94) {
    goto LABEL_119;
  }
  int v69 = *(void **)(a1 + 96);
  if (v69)
  {
    if (*(_DWORD *)(a1 + 104)) {
      icu::UVector::insertElementAt((uint64_t (**)(void *))v9, v69, 0, a4);
    }
    else {
      icu::UVector::addElement(v9, v69, a4);
    }
    if (*(int *)a4 >= 1)
    {
      if (*(void *)(a1 + 96))
      {
        v70 = (void *)sub_18095CE80();
        icu::UMemory::operator delete(v70);
      }

      *(void *)(a1 + 96) = 0LL;
      goto LABEL_135;
    }

                    if (v24 > (int)v12)
                    {
                      int v78 = WORD4(v114[0]) >> 5;
                      if (SWORD4(v114[0]) < 0) {
                        int v78 = HIDWORD(v114[0]);
                      }
                      if (v78 < 1) {
                        TimeZoneForOffset = icu::TimeZoneFormat::createTimeZoneForOffset( TZDBTimeZoneNames,  (icu::ZoneMeta *)v61,  v48,  v49,  v50,  v51);
                      }
                      else {
                        TimeZoneForOffset = (icu::SimpleTimeZone *)icu::TimeZone::createTimeZone((UChar **)v114, v47);
                      }
                      v101 = TimeZoneForOffset;
                      if (v6) {
                        *uint64_t v6 = v60;
                      }
                      v8[2] = v24;
                      goto LABEL_175;
                    }

                    goto LABEL_170;
                  }

                  int v93 = v6;
                  TZDBTimeZoneNames = (icu::TimeZoneFormat *)(*(uint64_t (**)(icu::TimeZoneFormat *, icu::UnicodeString *, uint64_t, uint64_t, UErrorCode *))(*(void *)TZDBTimeZoneNames + 120LL))( TZDBTimeZoneNames,  a3,  v12,  118LL,  &v110);
                  int v75 = (icu::UVector **)TZDBTimeZoneNames;
                  v76 = v110;
                  if (v110 >= U_ILLEGAL_ARGUMENT_ERROR)
                  {
                    uint64_t v77 = 0LL;
                    v8[3] = v12;
                    int v24 = v64;
                    goto LABEL_218;
                  }

                  v97 = v8;
                  v100 = v45;
                  if (TZDBTimeZoneNames)
                  {
                    TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::TimeZoneNames::MatchInfoCollection::size(TZDBTimeZoneNames);
                    uint64_t v77 = v101;
                    if ((int)TZDBTimeZoneNames < 1)
                    {
                      v83 = -1;
                      int v24 = -1;
                    }

                    else
                    {
                      uint64_t v82 = 0;
                      int v24 = -1;
                      v83 = -1;
                      do
                      {
                        if ((int)(icu::TimeZoneNames::MatchInfoCollection::getMatchLengthAt(v75, v82) + v12) > v24)
                        {
                          int v24 = icu::TimeZoneNames::MatchInfoCollection::getMatchLengthAt(v75, v82) + v12;
                          v83 = v82;
                        }

                        ++v82;
                        TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::TimeZoneNames::MatchInfoCollection::size((icu::TimeZoneNames::MatchInfoCollection *)v75);
                      }

                      while (v82 < (int)TZDBTimeZoneNames);
                    }
                  }

                  else
                  {
                    v83 = -1;
                    int v24 = -1;
                    uint64_t v77 = v101;
                  }

                  if (v64 >= v24)
                  {
                    int v24 = v64;
                    int v8 = v97;
                    v45 = v100;
                    goto LABEL_218;
                  }

                  icu::TimeZoneFormat::getTimeZoneID(v55, v75, v83, (icu::UnicodeString *)v114);
                  TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::TimeZoneNames::MatchInfoCollection::getNameTypeAt( v75,  v83);
                  v53 = 0x7FFFFFFFLL;
                  v106 = 1;
                  v107 = 0x7FFFFFFF;
                  int v8 = v97;
                  if ((int)TZDBTimeZoneNames > 15)
                  {
                    v45 = v100;
                    if ((_DWORD)TZDBTimeZoneNames == 16) {
                      goto LABEL_218;
                    }
                    if ((_DWORD)TZDBTimeZoneNames != 32) {
                      goto LABEL_212;
                    }
                  }

                  else
                  {
                    v45 = v100;
                    if ((_DWORD)TZDBTimeZoneNames == 2) {
                      goto LABEL_218;
                    }
                    if ((_DWORD)TZDBTimeZoneNames != 4)
                    {
LABEL_212:
                      v106 = 0;
LABEL_217:
                      v107 = 0x7FFFFFFF;
LABEL_218:
                      v101 = v77;
                      if (v75) {
                        TZDBTimeZoneNames = (icu::TimeZoneFormat *)(*((uint64_t (**)(icu::UVector **))*v75 + 1))(v75);
                      }
                      int v69 = v76 <= U_ZERO_ERROR;
                      uint64_t v6 = v93;
                      int v30 = v108;
                      if (!v69) {
                        goto LABEL_175;
                      }
                      goto LABEL_145;
                    }
                  }

                  v106 = 2;
                  v53 = 0x7FFFFFFFLL;
                  goto LABEL_217;
                }
              }

              v106 = 2;
              v53 = 0x7FFFFFFFLL;
              goto LABEL_135;
            }

            v58 = v6;
            uint64_t v112 = v12;
            int v113 = -1;
            v109[0] = 0;
            v59 = v55;
            TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::TimeZoneFormat::parseOffsetLocalizedGMT( v55,  a3,  (icu::ParsePosition *)&v111,  1,  v109);
            v53 = v113;
            if (v113 != -1)
            {
LABEL_87:
              uint64_t v6 = v58;
              v55 = v59;
              goto LABEL_88;
            }

            int v65 = TZDBTimeZoneNames;
            __int128 v66 = v112;
            if (v112 != v30)
            {
              v53 = v109[0];
              if (!v109[0])
              {
                if (v24 < v112)
                {
                  icu::UnicodeString::setToBogus((icu::UnicodeString *)v114);
                  v107 = v65;
                  int v24 = v66;
                }

                goto LABEL_87;
              }
            }

uint64_t sub_180929348(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)a1 + 32LL))(a1, v4);
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v4);
  return v2;
}

uint64_t *sub_180929398(uint64_t a1, uint64_t *a2, icu::PluralRules *a3, const icu::Locale *a4)
{
  __int128 v4 = a2;
  if (!a2)
  {
    __int128 v4 = *(uint64_t **)(a1 + 528);
    if (!v4)
    {
      __int128 v4 = icu::PluralRules::forLocale(a3, a4, (UErrorCode *)a3);
      uint64_t v6 = *(void *)(a1 + 528);
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
      }
      *(void *)(a1 + 528) = v4;
    }
  }

  return v4;
}

uint64_t sub_1809293F0( uint64_t a1, icu::number::impl::DecimalQuantity *this, icu::FormattedStringBuilder *a3, int a4, UErrorCode *a5)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  UpperDisplayint Magnitude = icu::number::impl::DecimalQuantity::getUpperDisplayMagnitude(this);
  uint64_t v11 = 0LL;
  if ((UpperDisplayMagnitude & 0x80000000) == 0)
  {
    int v12 = 0;
    int v13 = UpperDisplayMagnitude + 1;
    do
    {
      if (icu::number::impl::Grouper::groupAtPosition((icu::number::impl::Grouper *)(a1 + 4), v12, this))
      {
        uint64_t v14 = *(void *)(a1 + 88);
        int32_t v15 = (UChar **)(v14 + 72);
        __int128 v16 = (UChar **)(v14 + 1096);
        if (*(_BYTE *)(a1 + 16)) {
          int v17 = v16;
        }
        else {
          int v17 = v15;
        }
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)v28, v17);
        LODWORD(v11) = icu::FormattedStringBuilder::insert(a3, a4, (uint64_t)v28, 38, 0, a5) + v11;
        icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v28);
      }

      int Digit = icu::number::impl::DecimalQuantity::getDigit(this, v12);
      uint64_t v20 = *(void *)(a1 + 88);
      int v21 = *(_DWORD *)(v20 + 1928);
      if (v21 == -1)
      {
        uint64_t v23 = v20 + ((unint64_t)(Digit + 17) << 6);
        uint64_t v24 = v20 + 264;
        uint64_t v25 = v23 + 8;
        else {
          uint64_t v26 = v24;
        }
        int inserted = icu::FormattedStringBuilder::insert(a3, a4, v26, 32, 0, a5);
      }

      else
      {
        int inserted = icu::FormattedStringBuilder::insertCodePoint(a3, a4, v21 + Digit, 32, a5);
      }

      uint64_t v11 = (inserted + v11);
      ++v12;
    }

    while (v13 != v12);
  }

  return v11;
}

uint64_t sub_180929568( uint64_t a1, icu::number::impl::DecimalQuantity *this, icu::FormattedStringBuilder *a3, int a4, UErrorCode *a5)
{
  LowerDisplayint Magnitude = icu::number::impl::DecimalQuantity::getLowerDisplayMagnitude(this);
  if ((LowerDisplayMagnitude & 0x80000000) == 0) {
    return 0LL;
  }
  int v12 = 0;
  LODWORD(v11) = 0;
  if (-LowerDisplayMagnitude <= 1) {
    int v13 = -1;
  }
  else {
    int v13 = LowerDisplayMagnitude;
  }
  do
  {
    int Digit = icu::number::impl::DecimalQuantity::getDigit(this, --v12);
    int v15 = v11 + a4;
    uint64_t v16 = *(void *)(a1 + 88);
    int v17 = *(_DWORD *)(v16 + 1928);
    if (v17 == -1)
    {
      uint64_t v19 = v16 + ((unint64_t)(Digit + 17) << 6);
      uint64_t v20 = v16 + 264;
      uint64_t v21 = v19 + 8;
      else {
        uint64_t v22 = v20;
      }
      int inserted = icu::FormattedStringBuilder::insert(a3, v15, v22, 33, 0, a5);
    }

    else
    {
      int inserted = icu::FormattedStringBuilder::insertCodePoint(a3, v15, v17 + Digit, 33, a5);
    }

    uint64_t v11 = (inserted + v11);
  }

  while (v13 != v12);
  return v11;
}

uint64_t sub_180929650(uint64_t a1)
{
  *(void *)a1 = off_189727648;
  *(_WORD *)(a1 + 12) = -3;
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 32) = off_18971B688;
  *(_WORD *)(a1 + 40) = 2;
  icu::UnicodeString::setToBogus((icu::UnicodeString *)(a1 + 32));
  *(void *)(a1 + 96) = 0LL;
  *(_DWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 140) = 1;
  *(_DWORD *)(a1 + 144) = -2;
  *(_BYTE *)(a1 + 164) = 0;
  *(_WORD *)(a1 + 156) = -1;
  *(void *)(a1 + 200) = 0LL;
  icu::number::impl::ScientificModifier::ScientificModifier(a1 + 216);
  *(void *)(a1 + 240) = &unk_189727688;
  *(_BYTE *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = &unk_189727688;
  *(_BYTE *)(a1 + 264) = 1;
  *(void *)(a1 + 272) = off_189727DF0;
  *(_DWORD *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0LL;
  *(_DWORD *)(a1 + 296) = 0;
  icu::number::impl::SimpleModifier::SimpleModifier((icu::number::impl::SimpleModifier *)(a1 + 312));
  icu::MeasureUnit::MeasureUnit(a1 + 416);
  *(void *)(a1 + 440) = a1 + 456;
  *(_DWORD *)(a1 + 448) = 2;
  *(_BYTE *)(a1 + 452) = 0;
  *(_DWORD *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0xFFFFFFFFLL;
  *(_BYTE *)(a1 + 488) = 0;
  return a1;
}

void sub_180929764(icu::number::impl::Modifier *a1)
{
}

uint64_t sub_180929778()
{
  return 0LL;
}

uint64_t sub_180929780()
{
  return 0LL;
}

uint64_t sub_180929788()
{
  return 0LL;
}

uint64_t sub_180929790(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_180929798()
{
  return 0LL;
}

void sub_1809297A0(uint64_t a1, void *a2)
{
  *a2 = 0LL;
}

BOOL sub_1809297A8(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a2 + 32LL))(a2) == 0;
}

uint64_t icu::number::impl::Grouper::forStrategy(signed int a1)
{
  return qword_180A3A750[a1] | (qword_180A3A778[a1] << 16) | qword_180A3A778[a1];
}

unint64_t icu::number::impl::Grouper::forProperties( icu::number::impl::Grouper *this, const icu::number::impl::DecimalFormatProperties *a2)
{
  if (!*((_BYTE *)this + 80)) {
    return 0xFFFEFFFFFFFFLL;
  }
  int v2 = *((_DWORD *)this + 19);
  int v3 = *((_DWORD *)this + 188);
  if (v3 << 16 <= 0) {
    int v3 = *((_DWORD *)this + 19);
  }
  if (v2 << 16 <= 0) {
    LOWORD(v2) = v3;
  }
  int v4 = *((_DWORD *)this + 27) << 16;
  if (v4 != -196608 && v4 <= 0) {
    unint64_t v6 = 0xFFFE00000000LL;
  }
  else {
    unint64_t v6 = (unint64_t)(unsigned __int16)*((_DWORD *)this + 27) << 32;
  }
  return v6 & 0xFFFFFFFF00000000LL | ((unint64_t)(unsigned __int16)v3 << 16) | (unsigned __int16)v2;
}

uint64_t icu::number::impl::Grouper::setLocaleData( icu::number::impl::Grouper *this, const icu::number::impl::ParsedPatternInfo *a2, const icu::Locale *a3)
{
  uint64_t result = *((unsigned __int16 *)this + 2);
  if ((_DWORD)result == 65533)
  {
    int v7 = sub_18093F7A4((uint64_t)a3);
    uint64_t result = uprv_max(2LL, v7);
    goto LABEL_5;
  }

  if ((_DWORD)result == 65534)
  {
    uint64_t result = sub_18093F7A4((uint64_t)a3);
LABEL_5:
    *((_WORD *)this + 2) = result;
  }

  int v8 = *(unsigned __int16 *)this;
  if (v8 == 65534 || *((__int16 *)this + 1) == -4)
  {
    uint64_t v9 = *((void *)a2 + 9);
    if (v8 == 65532) {
      __int16 v10 = 3;
    }
    else {
      __int16 v10 = -1;
    }
    if (WORD1(v9) != 0xFFFF) {
      __int16 v10 = *((void *)a2 + 9);
    }
    if ((~v9 & 0xFFFF00000000LL) != 0) {
      __int16 v11 = WORD1(*((void *)a2 + 9));
    }
    else {
      __int16 v11 = v10;
    }
    *(_WORD *)this = v10;
    *((_WORD *)this + 1) = v11;
  }

  else if ((unsigned __int16)result == 65534)
  {
    uint64_t result = sub_18093F7A4((uint64_t)a3);
    *((_WORD *)this + 2) = result;
  }

  return result;
}

BOOL icu::number::impl::Grouper::groupAtPosition( icu::number::impl::Grouper *this, int a2, const icu::number::impl::DecimalQuantity *a3)
{
  int v3 = *(unsigned __int16 *)this;
  if (*(_WORD *)this) {
    BOOL v4 = v3 == 0xFFFF;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return 0LL;
  }
  int v6 = a2 - (__int16)v3;
  return v6 >= 0
}

uint64_t icu::number::impl::Grouper::getPrimary(icu::number::impl::Grouper *this)
{
  return *(__int16 *)this;
}

uint64_t icu::number::impl::Grouper::getSecondary(icu::number::impl::Grouper *this)
{
  return *((__int16 *)this + 1);
}

uint64_t icu::number::IntegerWidth::IntegerWidth(uint64_t this, __int16 a2, __int16 a3, char a4)
{
  *(_BYTE *)(this + 8) = 0;
  *(_WORD *)this = a2;
  *(_WORD *)(this + 2) = a3;
  *(_BYTE *)(this + 4) = a4;
  return this;
}

{
  *(_BYTE *)(this + 8) = 0;
  *(_WORD *)this = a2;
  *(_WORD *)(this + 2) = a3;
  *(_BYTE *)(this + 4) = a4;
  return this;
}

uint64_t icu::number::IntegerWidth::zeroFillTo(icu::number::IntegerWidth *this)
{
  else {
    return 65810LL;
  }
}

unint64_t icu::number::IntegerWidth::truncateAt(icu::number::IntegerWidth *this, uint64_t a2)
{
  if (*((_BYTE *)this + 8))
  {
    uint64_t v2 = *(void *)this;
    a2 = *(void *)this >> 16;
    unint64_t v3 = *(void *)this & 0xFFFFFF0000000000LL;
    uint64_t v4 = *(void *)this & 0xFF00000000LL;
  }

  else
  {
    LOWORD(v2) = *(_WORD *)this;
    if (a2 > 0x3E7 || *(__int16 *)this > (int)a2)
    {
      BOOL v5 = (_DWORD)a2 == -1;
      if ((_DWORD)a2 == -1) {
        LOWORD(a2) = -1;
      }
      else {
        LOWORD(a2) = 1;
      }
      if (!v5) {
        LOWORD(v2) = 274;
      }
      unint64_t v3 = 0LL;
      uint64_t v4 = 0LL;
    }

    else
    {
      unint64_t v3 = 0LL;
      uint64_t v4 = 0LL;
    }
  }

  return v4 | v3 | (unsigned __int16)v2 | ((unsigned __int16)a2 << 16);
}

void icu::number::IntegerWidth::apply( icu::number::IntegerWidth *this, icu::number::impl::DecimalQuantity *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (*((_BYTE *)this + 8))
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }

    else
    {
      int v6 = *((__int16 *)this + 1);
      if (v6 == -1)
      {
        icu::number::impl::DecimalQuantity::setMinInteger((uint64_t)a2, *(__int16 *)this);
      }

      else
      {
        if (*((_BYTE *)this + 4))
        {
        }

        icu::number::impl::DecimalQuantity::setMinInteger((uint64_t)a2, *(__int16 *)this);
        icu::number::impl::DecimalQuantity::applyMaxInteger(a2, *((__int16 *)this + 1));
      }
    }
  }

BOOL icu::number::IntegerWidth::operator==(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void *sub_180929B7C( void *a1, icu::MeasureUnit *this, _DWORD *a3, const char *a4, uint64_t a5, uint64_t a6, void *a7, int *a8)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  if (*icu::MeasureUnit::getType(this))
  {
    bzero(v23, 0x2C0uLL);
    for (uint64_t i = 0LL; i != 704; i += 64LL)
    {
      int v17 = &v23[i];
      *(void *)int v17 = off_18971B688;
      *((_WORD *)v17 + 4) = 2;
    }

    sub_180929D20((uint64_t)a1, this, a3, a4, (uint64_t)v23, a8);
    sub_18092A454(a1, this, (uint64_t)v23, a8);
    unint64_t v18 = *a8;
    if ((int)v18 <= 0)
    {
      a7[106] = a5;
      a7[107] = a6;
      sub_18092A8D8((uint64_t)a7, (uint64_t)v23, 43, (UErrorCode *)a8);
      unint64_t v18 = v25;
      if ((v25 & 1) == 0)
      {
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)v22, &v24);
        a7[108] = sub_18092AA88((icu::UnicodeString *)v22, (UErrorCode)*a8);
        icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v22);
      }
    }

    for (uint64_t j = 640LL; j != -64; j -= 64LL)
      uint64_t result = icu::UnicodeString::~UnicodeString((void *)v18, (icu::UnicodeString *)&v23[j]);
  }

  else
  {
    uint64_t result = (void *)sub_18092ABD0((uint64_t)a1, (icu::MeasureUnitImpl **)this, a3, a4, (uint64_t)a7, (UErrorCode *)a8);
    a7[106] = a5;
    a7[107] = a6;
  }

  return result;
}

void sub_180929D20(uint64_t a1, icu::MeasureUnit *a2, _DWORD *a3, const char *a4, uint64_t a5, int *a6)
{
  uint64_t v12 = 0LL;
  uint64_t v81 = *MEMORY[0x1895F89C0];
  v56[0] = &off_1897278B8;
  v56[1] = a5;
  do
  {
    icu::UnicodeString::setToBogus((icu::UnicodeString *)(a5 + v12));
    v12 += 64LL;
  }

  while (v12 != 704);
  uint64_t v13 = ures_open("icudt74l-unit", *(char **)(a1 + 40), a6);
  if (*a6 > 0) {
    goto LABEL_41;
  }
  memset(&v79[1], 0, 48);
  uint64_t v80 = 0LL;
  v79[0] = (char *)&v79[1] + 5;
  LODWORD(v79[1]) = 40;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v54, "/");
  icu::CharString::append((icu::CharString *)v79, v54, v55, (UErrorCode *)a6);
  Type = icu::MeasureUnit::getType(a2);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v52, Type);
  icu::CharString::append((icu::CharString *)v79, v52, v53, (UErrorCode *)a6);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v50, "/");
  icu::CharString::append((icu::CharString *)v79, v50, v51, (UErrorCode *)a6);
  uint64_t v15 = ures_open("ICUDATA", "metadata", a6);
  UErrorCode v49 = *a6;
  uint64_t v78 = 0LL;
  memset(v77, 0, sizeof(v77));
  icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v77);
  memset(&v76[1], 0, 56);
  v76[0] = (char *)&v76[1] + 5;
  LODWORD(v76[1]) = 40;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v47, "alias/unit/");
  icu::CharString::append((icu::CharString *)v76, v47, v48, &v49);
  Subtype = icu::MeasureUnit::getSubtype(a2);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v45, Subtype);
  icu::CharString::append((icu::CharString *)v76, v45, v46, &v49);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v43, "/replacement");
  icu::CharString::append((icu::CharString *)v76, v43, v44, &v49);
  ures_getByKeyWithFallback(v15, (char *)v76[0], (uint64_t)v77, &v49);
  memset(&__s[1], 0, 56);
  __s[0] = (char *)&__s[1] + 5;
  LODWORD(__s[1]) = 40;
  if (v49 <= U_ZERO_ERROR)
  {
    memset(&v64[1], 0, 56);
    v64[0] = (char *)off_18971B688;
    LOWORD(v64[1]) = 2;
    LODWORD(v59) = 0;
    String = ures_getString((uint64_t)v77, (int *)&v59, a6);
    if (*a6 <= 0)
    {
      v70 = (UChar *)String;
      icu::UnicodeString::setTo((icu::UnicodeString *)v64, 1, (const UChar **)&v70, (int)v59);
    }

    else
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)v64);
    }

    icu::CharString::appendInvariantChars((icu::CharString *)__s, (const icu::UnicodeString *)v64, (UErrorCode *)a6);
    icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v64);
  }

  else
  {
    int v17 = icu::MeasureUnit::getSubtype(a2);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v41, v17);
    icu::CharString::append((icu::CharString *)__s, v41, v42, (UErrorCode *)a6);
  }

  uint64_t v20 = __s[0];
  int v21 = strlen(__s[0]);
  int v22 = v21;
  if (v21 >= 8 && !strcmp(&__s[0][v21 - 7], "-person")) {
    v22 -= 7;
  }
  icu::CharString::append((icu::CharString *)v79, v20, v22, (UErrorCode *)a6);
  if (*a3 != 2)
  {
    UErrorCode v40 = *a6;
    __int128 v71 = 0u;
    __int128 v73 = 0u;
    __int128 v72 = 0u;
    v70 = (UChar *)((char *)&v71 + 5);
    LODWORD(v71) = 40;
    uint64_t v74 = 0LL;
    icu::StringPiece::StringPiece((icu::StringPiece *)&v38, "units");
    icu::CharString::append((icu::CharString *)&v70, v38, v39, &v40);
    icu::CharString::append((icu::CharString *)&v70, (const char *)v79[0], v80, &v40);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v36, "/gender");
    icu::CharString::append((icu::CharString *)&v70, v36, v37, &v40);
    uint64_t v69 = 0LL;
    __int128 v67 = 0u;
    __int128 v68 = 0u;
    __int128 v65 = 0u;
    __int128 v66 = 0u;
    memset(v64, 0, sizeof(v64));
    icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v64);
    ures_getByKeyWithFallback(v13, (char *)v70, (uint64_t)v64, &v40);
    __int128 v60 = 0u;
    __int128 v61 = 0u;
    __int128 v62 = 0u;
    uint64_t v63 = 0LL;
    v59 = off_18971B688;
    LOWORD(v60) = 2;
    int v58 = 0;
    uint64_t v23 = ures_getString((uint64_t)v64, &v58, (int *)&v40);
    if (v40 <= U_ZERO_ERROR)
    {
      uint64_t v57 = v23;
      icu::UnicodeString::setTo((icu::UnicodeString *)&v59, 1, &v57, v58);
    }

    else
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)&v59);
    }

    icu::UnicodeString::operator=((icu::UnicodeString *)(a5 + 640), (icu::UnicodeString *)&v59);
    icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)&v59);
    icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v64);
    if (BYTE4(v71)) {
      uprv_free(v70);
    }
  }

  memset(&v64[1], 0, 56);
  v64[0] = (char *)&v64[1] + 5;
  LODWORD(v64[1]) = 40;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v34, "units");
  icu::CharString::append((icu::CharString *)v64, v34, v35, (UErrorCode *)a6);
  if (*a3 == 1)
  {
    unsigned __int16 v25 = "Short";
    uint64_t v26 = v32;
    int v27 = (icu::StringPiece *)v32;
  }

  else
  {
    if (*a3) {
      goto LABEL_24;
    }
    unsigned __int16 v25 = "Narrow";
    uint64_t v26 = v33;
    int v27 = (icu::StringPiece *)v33;
  }

  icu::StringPiece::StringPiece(v27, v25);
  icu::CharString::append((icu::CharString *)v64, *(const char **)v26, *((_DWORD *)v26 + 2), (UErrorCode *)a6);
LABEL_24:
  icu::CharString::append((icu::CharString *)v64, (const char *)v79[0], v80, (UErrorCode *)a6);
  if (*a3 == 2)
  {
    if (*a4)
    {
      __int128 v71 = 0u;
      __int128 v73 = 0u;
      __int128 v72 = 0u;
      v70 = (UChar *)((char *)&v71 + 5);
      LODWORD(v71) = 40;
      uint64_t v74 = 0LL;
      icu::CharString::append((icu::CharString *)&v70, v64[0], (int)v64[7], (UErrorCode *)a6);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v30, "/case/");
      icu::CharString::append((icu::CharString *)&v70, v30, v31, (UErrorCode *)a6);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v28, a4);
      icu::CharString::append((icu::CharString *)&v70, v28, v29, (UErrorCode *)a6);
      LODWORD(v59) = 0;
      ures_getAllChildrenWithFallback(v13, (char *)v70, (uint64_t)v56, (int *)&v59);
      if (BYTE4(v71)) {
        uprv_free(v70);
      }
    }
  }

  LODWORD(v70) = 0;
  ures_getAllChildrenWithFallback(v13, v64[0], (uint64_t)v56, (int *)&v70);
  if (BYTE4(v64[1])) {
    uprv_free(v64[0]);
  }
  if (BYTE4(__s[1])) {
    uprv_free(__s[0]);
  }
  if (BYTE4(v76[1])) {
    uprv_free(v76[0]);
  }
  icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v77);
  if (v15) {
    ures_close(v15);
  }
  if (BYTE4(v79[1])) {
    uprv_free(v79[0]);
  }
LABEL_41:
  if (v13) {
    ures_close(v13);
  }
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v56);
}

void *sub_18092A454(void *result, icu::MeasureUnitImpl *a2, uint64_t a3, int *a4)
{
  v45[17] = *(void **)MEMORY[0x1895F89C0];
  if ((*(_WORD *)(a3 + 648) & 1) != 0)
  {
    uint64_t v7 = (uint64_t)result;
    memset(v35, 0, sizeof(v35));
    icu::MeasureUnit::getMeter((uint64_t)v42);
    sub_18092D168(v7, (icu::MeasureUnit *)v42, a4, (uint64_t)v35);
    icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v42);
    uint64_t v9 = (void *)WORD4(v35[0]);
    if (WORD4(v35[0]) < 0x20u) {
      return icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v35);
    }
    __int16 v10 = (icu::UnicodeString *)(a3 + 640);
    memset(&v45[8], 0, 64);
    __int128 v44 = 0u;
    memset(v45, 0, 64);
    __int128 v43 = 0u;
    *(void *)&__int128 v44 = v45;
    DWORD2(v44) = 8;
    v45[8] = (char *)&v45[9] + 5;
    LODWORD(v45[9]) = 40;
    __int16 v11 = icu::MeasureUnitImpl::forMeasureUnit(a2, (const icu::MeasureUnit *)&v43, (icu::MeasureUnitImpl *)a4, v8);
    if (*(_DWORD *)v11 == 2)
    {
      *a4 = 5;
      *(void *)&__int128 v31 = off_18971B688;
      WORD4(v31) = 2;
      goto LABEL_53;
    }

    uint64_t v12 = v11;
    if (*(_DWORD *)v11 != 1)
    {
      int v15 = 0;
LABEL_13:
      uint64_t v16 = *(icu::SingleUnitImpl **)(*((void *)v12 + 2) + 8LL * v15);
      int v17 = *((_DWORD *)v16 + 2);
      if (v17 < 0) {
        int v17 = -v17;
      }
      if (v17 != 1)
      {
        __int128 v33 = 0u;
        __int128 v34 = 0u;
        __int128 v31 = 0u;
        __int128 v32 = 0u;
        icu::Locale::Locale((icu::Locale *)v37, v7);
        sub_18092D3CC((uint64_t)v37, "power", a4, (icu::UnicodeString *)&v31);
        icu::Locale::~Locale((icu::Locale *)v37);
        LODWORD(v19) = WORD4(v31) >> 5;
        if ((SWORD4(v31) & 0x8000u) == 0) {
          unint64_t v19 = v19;
        }
        else {
          unint64_t v19 = HIDWORD(v31);
        }
        if ((_DWORD)v19 != 1) {
          goto LABEL_53;
        }
        icu::UnicodeString::~UnicodeString((void *)v19, (icu::UnicodeString *)&v31);
        int v20 = *((_DWORD *)v16 + 2);
        if (v20 < 0) {
          int v20 = -v20;
        }
        if (v20 != 1)
        {
          __int128 v33 = 0u;
          __int128 v34 = 0u;
          __int128 v31 = 0u;
          __int128 v32 = 0u;
          icu::Locale::Locale((icu::Locale *)v36, v7);
          sub_18092D3CC((uint64_t)v36, "prefix", a4, (icu::UnicodeString *)&v31);
          icu::Locale::~Locale((icu::Locale *)v36);
          LODWORD(v21) = WORD4(v31) >> 5;
          if ((SWORD4(v31) & 0x8000u) == 0) {
            unint64_t v21 = v21;
          }
          else {
            unint64_t v21 = HIDWORD(v31);
          }
          if ((_DWORD)v21 != 1) {
            goto LABEL_53;
          }
          icu::UnicodeString::~UnicodeString((void *)v21, (icu::UnicodeString *)&v31);
        }
      }

      SimpleUnitID = (const char *)icu::SingleUnitImpl::getSimpleUnitID(v16);
      icu::StringPiece::StringPiece((icu::StringPiece *)v29, SimpleUnitID);
      icu::MeasureUnit::forIdentifier(v29[0], v29[1], a4, (uint64_t)v30);
      sub_18092D168(v7, (icu::MeasureUnit *)v30, a4, (uint64_t)&v31);
      icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v30);
LABEL_53:
      if (BYTE4(v45[9])) {
        uprv_free(v45[8]);
      }
      sub_180850D68((uint64_t)&v43 + 8);
      icu::UnicodeString::operator=(v10, (icu::UnicodeString *)&v31);
      icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v31);
      return icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v35);
    }

    int v13 = *((_DWORD *)v11 + 2);
    int v14 = v13 - 1;
    if ((*(_DWORD *)(*(void *)(*((void *)v11 + 2) + 8LL * (v13 - 1)) + 8LL) & 0x80000000) == 0)
    {
      int v15 = 0;
      goto LABEL_7;
    }

    __int128 v40 = 0u;
    __int128 v41 = 0u;
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    icu::Locale::Locale((icu::Locale *)v42, v7);
    sub_18092D3CC((uint64_t)v42, "per", a4, (icu::UnicodeString *)&v38);
    icu::Locale::~Locale((icu::Locale *)v42);
    if (SWORD4(v38) < 0)
    {
      if (HIDWORD(v38) == 1) {
        goto LABEL_31;
      }
    }

    else if ((WORD4(v38) & 0xFFE0) == 0x20)
    {
LABEL_31:
      if ((BYTE8(v38) & 2) != 0) {
        int v22 = (_WORD *)((unint64_t)&v38 | 0xA);
      }
      else {
        int v22 = (_WORD *)*((void *)&v39 + 1);
      }
      if (*v22 == 49)
      {
        uint64_t v23 = (uint64_t *)*((void *)v12 + 2);
        int v15 = -1;
        do
        {
          uint64_t v24 = *v23++;
          ++v15;
        }

        while ((*(_DWORD *)(v24 + 8) & 0x80000000) == 0);
LABEL_59:
        icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v38);
LABEL_7:
        if (v14 > v15)
        {
          __int128 v33 = 0u;
          __int128 v34 = 0u;
          __int128 v31 = 0u;
          __int128 v32 = 0u;
          icu::Locale::Locale((icu::Locale *)&v38, v7);
          sub_18092D3CC((uint64_t)&v38, "times", a4, (icu::UnicodeString *)&v31);
          icu::Locale::~Locale((icu::Locale *)&v38);
          if (SWORD4(v31) < 0)
          {
            if (HIDWORD(v31) != 1) {
              goto LABEL_53;
            }
          }

          else if ((WORD4(v31) & 0xFFE0) != 0x20)
          {
            goto LABEL_53;
          }

          if ((BYTE8(v31) & 2) != 0) {
            uint64_t v26 = (unsigned __int16 *)((unint64_t)&v31 | 0xA);
          }
          else {
            uint64_t v26 = (unsigned __int16 *)*((void *)&v32 + 1);
          }
          int v27 = (void *)*v26;
          if ((_DWORD)v27 != 48) {
            int v15 = v14;
          }
          icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v31);
        }

        goto LABEL_13;
      }

      if (v13 >= 1)
      {
        uint64_t v23 = (uint64_t *)*((void *)v12 + 2);
        while ((*(_DWORD *)(v23[--v13] + 8) & 0x80000000) != 0)
        {
          if (v13 <= 0) {
            goto LABEL_51;
          }
        }

        int v15 = 0;
        int v14 = v13;
        goto LABEL_59;
      }

void *sub_18092A8D8(uint64_t a1, uint64_t a2, char a3, UErrorCode *a4)
{
  uint64_t v6 = 0LL;
  uint64_t v25 = *MEMORY[0x1895F89C0];
  uint64_t v15 = a1 + 8;
  int v8 = (_OWORD *)(a1 + 88);
  for (__int128 i = 0uLL; ; __int128 i = 0uLL)
  {
    v24[2] = i;
    v24[3] = i;
    v24[0] = i;
    v24[1] = i;
    sub_18092CBC0(a2, v6, a4, (uint64_t)v24);
    unint64_t v10 = *(unsigned int *)a4;
    v19[0] = 0LL;
    uint64_t v23 = 0LL;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    __int128 v20 = 0u;
    v19[1] = off_18971B688;
    LOWORD(v20) = 2;
    icu::SimpleFormatter::applyPatternMinMaxArguments( (icu::SimpleFormatter *)v19,  (const icu::UnicodeString *)v24,  0,  1,  0,  a4);
    if (*(int *)a4 > 0)
    {
      icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v19);
      return icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)v24);
    }

    icu::number::impl::Modifier::Parameters::Parameters((uint64_t)v16, v15, 2, v6);
    icu::number::impl::SimpleModifier::SimpleModifier((uint64_t)&v17, (uint64_t)v19, a3, 0, v16[0], v16[1]);
    icu::UnicodeString::operator=((icu::UnicodeString *)(v8 - 4), (icu::UnicodeString *)v18);
    __int128 v11 = v18[5];
    *int v8 = v18[4];
    v8[1] = v11;
    int v17 = off_189727B38;
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v18);
    icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)&v17);
    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v19);
    uint64_t result = icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v24);
    ++v6;
    int v8 = (_OWORD *)((char *)v8 + 104);
    if (v6 == 8) {
      return result;
    }
  }

  return icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)v24);
}

const char *sub_18092AA88(icu::UnicodeString *a1, UErrorCode a2)
{
  __s1[8] = *(char **)MEMORY[0x1895F89C0];
  UErrorCode v12 = a2;
  unsigned int v2 = *((unsigned __int16 *)a1 + 4);
  if ((v2 & 0x8000) != 0)
  {
    if (*((_DWORD *)a1 + 3)) {
      goto LABEL_3;
    }
    return "";
  }

  if (!(v2 >> 5)) {
    return "";
  }
LABEL_3:
  memset(&__s1[1], 0, 56);
  __s1[0] = (char *)&__s1[1] + 5;
  LODWORD(__s1[1]) = 40;
  icu::CharString::appendInvariantChars((icu::CharString *)__s1, a1, &v12);
  if (v12 <= U_ZERO_ERROR)
  {
    int v4 = 0;
    int v5 = 7;
    uint64_t v6 = __s1[0];
    unint64_t v3 = "";
    while (v4 < v5)
    {
      int v7 = v5 + v4;
      if (v5 + v4 < 0 != __OFADD__(v5, v4)) {
        ++v7;
      }
      int v8 = v7 >> 1;
      uint64_t v9 = off_1897278F0[v7 >> 1];
      int v10 = strcmp(v6, v9);
      if (v10 <= 0) {
        int v5 = v8;
      }
      else {
        int v4 = v8 + 1;
      }
      if (!v10)
      {
        unint64_t v3 = v9;
        break;
      }
    }
  }

  else
  {
    unint64_t v3 = "";
  }

  if (BYTE4(__s1[1])) {
    uprv_free(__s1[0]);
  }
  return v3;
}

uint64_t sub_18092ABD0( uint64_t result, icu::MeasureUnitImpl **this, _DWORD *a3, const char *a4, uint64_t a5, UErrorCode *a6)
{
  uint64_t v99 = *MEMORY[0x1895F89C0];
  if (!a5)
  {
    *a6 = U_INTERNAL_PROGRAM_ERROR;
    return result;
  }

  uint64_t v10 = result;
  __int128 v96 = 0u;
  memset(&v97[8], 0, 48);
  __int128 v98 = 0u;
  memset(v97, 0, 64);
  __int128 v95 = 0u;
  *(void *)&__int128 v96 = v97;
  DWORD2(v96) = 8;
  v97[8] = (char *)&v97[9] + 5;
  LODWORD(v97[9]) = 40;
  DWORD2(v98) = 0;
  __int128 v92 = 0u;
  memset(&v93[8], 0, 48);
  __int128 v94 = 0u;
  memset(v93, 0, 64);
  __int128 v91 = 0u;
  *(void *)&__int128 v92 = v93;
  DWORD2(v92) = 8;
  v93[8] = (char *)&v93[9] + 5;
  LODWORD(v93[9]) = 40;
  DWORD2(v94) = 0;
  __int128 v81 = 0u;
  __int128 v80 = 0u;
  __int128 v79 = 0u;
  __int128 v78 = 0u;
  __int128 v77 = 0u;
  __int128 v76 = 0u;
  __int128 v75 = 0u;
  __int128 v74 = 0u;
  __int128 v73 = 0u;
  __int128 v72 = 0u;
  icu::MeasureUnitImpl::forMeasureUnitMaybeCopy(this, a6, (uint64_t)&v72);
  if (*(int *)a6 <= 0)
  {
    if (SDWORD2(v72) >= 1)
    {
      uint64_t v11 = 0LL;
      do
      {
        UErrorCode v12 = *(const icu::SingleUnitImpl **)(v73 + 8 * v11);
        int v13 = *((_DWORD *)v12 + 2);
        if (v13 <= 0)
        {
          *((_DWORD *)v12 + 2) = -v13;
          int v14 = (icu::MeasureUnitImpl *)&v91;
        }

        else
        {
          int v14 = (icu::MeasureUnitImpl *)&v95;
        }

        icu::MeasureUnitImpl::appendSingleUnit(v14, v12, a6);
        ++v11;
      }

      while (v11 < SDWORD2(v72));
    }

    if (BYTE12(v78)) {
      uprv_free((void *)v78);
    }
    sub_180850D68((uint64_t)&v72 + 8);
    uint64_t v90 = 0LL;
    __int128 v89 = 0u;
    __int128 v88 = 0u;
    __int128 v87 = 0u;
    __int128 v86 = 0u;
    __int128 v85 = 0u;
    __int128 v84 = 0u;
    __int128 v83 = 0u;
    __int128 v82 = 0u;
    sub_18092B28C((unsigned int *)&v82, v10, "case", "per");
    bzero(&v72, 0x2C0uLL);
    for (uint64_t i = 0LL; i != 704; i += 64LL)
    {
      uint64_t v16 = (char *)&v72 + i;
      *(void *)uint64_t v16 = off_18971B688;
      *((_WORD *)v16 + 4) = 2;
    }

    icu::Locale::Locale((icu::Locale *)v71, v10);
    if (BYTE4(v82)) {
      int v17 = a4;
    }
    else {
      int v17 = (const char *)*((void *)&v82 + 1);
    }
    sub_18092B6E0((icu::MeasureUnitImpl *)&v95, v71, a3, v17, (uint64_t)&v72, a6);
    icu::Locale::~Locale((icu::Locale *)v71);
    bzero(v68, 0x2C0uLL);
    for (uint64_t j = 0LL; j != 704; j += 64LL)
    {
      unint64_t v19 = &v68[j];
      *(void *)unint64_t v19 = off_18971B688;
      *((_WORD *)v19 + 4) = 2;
    }

    icu::Locale::Locale((icu::Locale *)v67, v10);
    if (BYTE5(v82)) {
      __int128 v20 = a4;
    }
    else {
      __int128 v20 = (const char *)*((void *)&v86 + 1);
    }
    sub_18092B6E0((icu::MeasureUnitImpl *)&v91, v67, a3, v20, (uint64_t)v68, a6);
    icu::Locale::~Locale((icu::Locale *)v67);
    __int128 v63 = 0u;
    uint64_t v66 = 0LL;
    __int128 v65 = 0u;
    __int128 v64 = 0u;
    __int128 v62 = (UChar *)off_18971B688;
    LOWORD(v63) = 2;
    if ((v70 & 1) != 0)
    {
      memset(v61, 0, sizeof(v61));
      icu::StringPiece::StringPiece((icu::StringPiece *)&v39, "per");
      sub_18092C94C(v39, v40, v10, a3, (int *)a6, (uint64_t)v61);
      v56[0] = 0LL;
      __int128 v57 = 0u;
      uint64_t v60 = 0LL;
      __int128 v58 = 0u;
      __int128 v59 = 0u;
      v56[1] = off_18971B688;
      LOWORD(v57) = 2;
      icu::SimpleFormatter::applyPatternMinMaxArguments( (icu::SimpleFormatter *)v56,  (const icu::UnicodeString *)v61,  2,  2,  0,  a6);
      if (*(int *)a6 <= 0)
      {
        memset(v55, 0, sizeof(v55));
        BOOL v21 = 1;
        sub_18092CBC0((uint64_t)v68, 1u, a6, (uint64_t)v55);
        v50[0] = 0LL;
        __int128 v51 = 0u;
        uint64_t v54 = 0LL;
        __int128 v52 = 0u;
        __int128 v53 = 0u;
        v50[1] = off_18971B688;
        LOWORD(v51) = 2;
        icu::SimpleFormatter::applyPatternMinMaxArguments( (icu::SimpleFormatter *)v50,  (const icu::UnicodeString *)v55,  0,  1,  0,  a6);
        if (*(int *)a6 <= 0)
        {
          __int128 v48 = 0u;
          __int128 v49 = 0u;
          __int128 v46 = 0u;
          __int128 v47 = 0u;
          sub_18092CC2C((uint64_t)v50, (uint64_t)&v46);
          if ((SWORD4(v46) & 0x8000u) == 0) {
            int v22 = WORD4(v46) >> 5;
          }
          else {
            int v22 = HIDWORD(v46);
          }
          int v38 = v22;
          if ((BYTE8(v46) & 0x11) != 0)
          {
            uint64_t v23 = 0LL;
          }

          else if ((BYTE8(v46) & 2) != 0)
          {
            uint64_t v23 = (unsigned __int16 *)((unint64_t)&v46 | 0xA);
          }

          else
          {
            uint64_t v23 = (unsigned __int16 *)*((void *)&v47 + 1);
          }

          uint64_t v24 = sub_18092CC78(v23, &v38);
          memset(v45, 0, sizeof(v45));
          int v37 = v24;
          icu::UnicodeString::UnicodeString(v45, 0LL, &v37);
          icu::UnicodeString::UnicodeString((uint64_t)v44, (uint64_t)L"{0}");
          icu::SimpleFormatter::format( (icu::SimpleFormatter *)v56,  (const icu::UnicodeString *)v44,  (const icu::UnicodeString *)v45,  (icu::UnicodeString *)&v62,  a6);
          icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)v44);
          uint64_t v26 = (void *)*(unsigned int *)a6;
          BOOL v21 = (int)v26 > 0;
          icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v45);
          icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v46);
        }

        icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v50);
        icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v55);
      }

      else
      {
        BOOL v21 = 1;
      }

      icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v56);
      icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v61);
      if (v21) {
        goto LABEL_48;
      }
    }

    else
    {
      icu::UnicodeString::operator=(&v62, &v69);
    }

    int v31 = (unsigned __int16)v63 >> 5;
    if ((v63 & 0x8000u) != 0LL) {
      int v31 = DWORD1(v63);
    }
    if (v31)
    {
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v43, &v62);
      sub_18092CD44(a5, (uint64_t)&v72, (icu::UnicodeString *)v43, 43, a6);
      icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)v43);
    }

    else
    {
      sub_18092A8D8(a5, (uint64_t)&v72, 43, a6);
    }

    icu::Locale::Locale((icu::Locale *)v41, v10);
    sub_18092CFE4((icu::Locale *)v41, "per", (uint64_t)&v72, (uint64_t)v68, (int *)a6, (icu::UnicodeString *)v42);
    *(void *)(a5 + 864) = sub_18092AA88((icu::UnicodeString *)v42, *a6);
    icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)v42);
    icu::Locale::~Locale((icu::Locale *)v41);
LABEL_48:
    icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)&v62);
    for (uint64_t k = 640LL; k != -64; k -= 64LL)
      icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)&v68[k]);
    for (uint64_t m = 640LL; m != -64; m -= 64LL)
      icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)((char *)&v72 + m));
    if (BYTE4(v87)) {
      uprv_free(*((void **)&v86 + 1));
    }
    if (BYTE4(v83)) {
      uprv_free(*((void **)&v82 + 1));
    }
    goto LABEL_56;
  }

  if (BYTE12(v78)) {
    uprv_free((void *)v78);
  }
  sub_180850D68((uint64_t)&v72 + 8);
LABEL_56:
  if (BYTE4(v93[9])) {
    uprv_free(v93[8]);
  }
  sub_180850D68((uint64_t)&v91 + 8);
  if (BYTE4(v97[9])) {
    uprv_free(v97[8]);
  }
  return sub_180850D68((uint64_t)&v95 + 8);
}

unsigned int *sub_18092B28C(unsigned int *a1, uint64_t a2, const char *a3, const char *a4)
{
  uint64_t v46 = *MEMORY[0x1895F89C0];
  *a1 = 0;
  *((_WORD *)a1 + 2) = 0;
  *((void *)a1 + 1) = (char *)a1 + 21;
  int v8 = (icu::CharString *)(a1 + 2);
  a1[4] = 40;
  *((_WORD *)a1 + 10) = 0;
  a1[16] = 0;
  *((void *)a1 + 9) = (char *)a1 + 85;
  uint64_t v9 = (icu::CharString *)(a1 + 18);
  a1[20] = 40;
  *((_WORD *)a1 + 42) = 0;
  a1[32] = 0;
  uint64_t v45 = 0LL;
  memset(v44, 0, sizeof(v44));
  icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v44);
  uint64_t v43 = 0LL;
  memset(v42, 0, sizeof(v42));
  icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v42);
  ures_openDirectFillIn((uint64_t)v44, 0LL, "grammaticalFeatures", (int *)a1);
  ures_getByKey((uint64_t)v44, "grammaticalData", (uint64_t)v44, (int *)a1);
  ures_getByKey((uint64_t)v44, "derivations", (uint64_t)v44, (int *)a1);
  if ((int)*a1 <= 0)
  {
    unsigned int v25 = 0;
    ures_getByKey((uint64_t)v44, (const char *)(a2 + 8), (uint64_t)v42, (int *)&v25);
    if (v25 == 2) {
      ures_getByKey((uint64_t)v44, "root", (uint64_t)v42, (int *)a1);
    }
    else {
      *a1 = v25;
    }
    ures_getByKey((uint64_t)v42, "component", (uint64_t)v42, (int *)a1);
    ures_getByKey((uint64_t)v42, a3, (uint64_t)v42, (int *)a1);
    ures_getByKey((uint64_t)v42, a4, (uint64_t)v42, (int *)a1);
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    uint64_t v41 = 0LL;
    int v37 = off_18971B688;
    LOWORD(v38) = 2;
    LODWORD(v27) = 0;
    StringByIndex = ures_getStringByIndex((uint64_t)v42, 0, (int *)&v27, (int *)a1);
    if ((int)*a1 <= 0)
    {
      __int128 v32 = StringByIndex;
      icu::UnicodeString::setTo((icu::UnicodeString *)&v37, 1, &v32, (int)v27);
    }

    else
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)&v37);
    }

    __int128 v33 = 0u;
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    uint64_t v36 = 0LL;
    __int128 v32 = (const UChar *)off_18971B688;
    LOWORD(v33) = 2;
    int v26 = 0;
    uint64_t v11 = ures_getStringByIndex((uint64_t)v42, 1, &v26, (int *)a1);
    if ((int)*a1 <= 0)
    {
      int v27 = v11;
      icu::UnicodeString::setTo((icu::UnicodeString *)&v32, 1, &v27, v26);
    }

    else
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)&v32);
    }

    uint64_t v12 = *a1;
    if ((int)v12 <= 0)
    {
      icu::UnicodeString::UnicodeString((uint64_t)&v27, (uint64_t)"c");
      unint64_t v13 = v28;
      if ((v28 & 1) != 0)
      {
        int v17 = (v38 & 1) == 0;
      }

      else
      {
        if ((v38 & 0x8000u) == 0LL) {
          int32_t v14 = (unsigned __int16)v38 >> 5;
        }
        else {
          int32_t v14 = DWORD1(v38);
        }
        if ((v28 & 0x8000u) == 0) {
          int v15 = v28 >> 5;
        }
        else {
          int v15 = v30;
        }
        if ((v28 & 2) != 0) {
          uint64_t v16 = v29;
        }
        else {
          uint64_t v16 = v31;
        }
        int v17 = icu::UnicodeString::doCompare( (uint64_t)&v37,  0,  v14,  (uint64_t)v16,  v15 & (v15 >> 31),  v15 & ~(v15 >> 31));
      }

      icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)&v27);
      if (v17)
      {
        *((_BYTE *)a1 + 4) = 0;
        icu::CharString::appendInvariantChars(v8, (const icu::UnicodeString *)&v37, (UErrorCode *)a1);
      }

      else
      {
        *((_BYTE *)a1 + 4) = 1;
      }

      icu::UnicodeString::UnicodeString((uint64_t)&v27, (uint64_t)"c");
      unint64_t v18 = v28;
      if ((v28 & 1) != 0)
      {
        int v22 = (v33 & 1) == 0;
      }

      else
      {
        if ((v33 & 0x8000u) == 0LL) {
          int32_t v19 = (unsigned __int16)v33 >> 5;
        }
        else {
          int32_t v19 = DWORD1(v33);
        }
        if ((v28 & 0x8000u) == 0) {
          int v20 = v28 >> 5;
        }
        else {
          int v20 = v30;
        }
        if ((v28 & 2) != 0) {
          BOOL v21 = v29;
        }
        else {
          BOOL v21 = v31;
        }
        int v22 = icu::UnicodeString::doCompare( (uint64_t)&v32,  0,  v19,  (uint64_t)v21,  v20 & (v20 >> 31),  v20 & ~(v20 >> 31));
      }

      icu::UnicodeString::~UnicodeString((void *)v18, (icu::UnicodeString *)&v27);
      if (v22)
      {
        *((_BYTE *)a1 + 5) = 0;
        icu::CharString::appendInvariantChars(v9, (const icu::UnicodeString *)&v32, (UErrorCode *)a1);
      }

      else
      {
        uint64_t v12 = 1LL;
        *((_BYTE *)a1 + 5) = 1;
      }
    }

    icu::UnicodeString::~UnicodeString((void *)v12, (icu::UnicodeString *)&v32);
    icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v37);
  }

  icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v42);
  icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v44);
  return a1;
}

void sub_18092B6E0( icu::MeasureUnitImpl *this, char **a2, _DWORD *a3, const char *a4, uint64_t a5, UErrorCode *a6)
{
  uint64_t v174 = *MEMORY[0x1895F89C0];
  UErrorCode v6 = *a6;
  if (*(int *)a6 <= 0)
  {
    if (*(_DWORD *)this == 2)
    {
      *a6 = U_UNSUPPORTED_ERROR;
      return;
    }

    int v13 = *((_DWORD *)this + 38);
    if (!v13)
    {
      icu::MeasureUnitImpl::serialize(this, a6);
      UErrorCode v6 = *a6;
      int v13 = *((_DWORD *)this + 38);
    }

    if (v6 <= U_ZERO_ERROR && v13 != 0)
    {
      memset(v121, 0, sizeof(v121));
      icu::MeasureUnit::MeasureUnit((uint64_t)v121);
      if (icu::MeasureUnit::findBySubType( *((const char **)this + 12),  *((_DWORD *)this + 38),  (icu::MeasureUnit *)v121))
      {
        icu::MeasureUnit::MeasureUnit((uint64_t)&v147);
        char v15 = (*(uint64_t (**)(void *, UChar **))(v121[0] + 32LL))(v121, &v147);
        icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v147);
        if ((v15 & 1) == 0)
        {
          sub_180929D20((uint64_t)a2, (icu::MeasureUnit *)v121, a3, a4, a5, (int *)a6);
          sub_18092A454(a2, (icu::MeasureUnitImpl *)v121, a5, (int *)a6);
        }

        goto LABEL_213;
      }

      memset(v173, 0, sizeof(v173));
      icu::StringPiece::StringPiece((icu::StringPiece *)&v119, "times");
      sub_18092C94C(v119, v120, (uint64_t)a2, a3, (int *)a6, (uint64_t)v173);
      v168[0] = 0LL;
      __int128 v169 = 0u;
      uint64_t v172 = 0LL;
      __int128 v170 = 0u;
      __int128 v171 = 0u;
      v168[1] = off_18971B688;
      LOWORD(v169) = 2;
      icu::SimpleFormatter::applyPatternMinMaxArguments( (icu::SimpleFormatter *)v168,  (const icu::UnicodeString *)v173,  2,  2,  0,  a6);
      if (*(int *)a6 > 0)
      {
LABEL_212:
        icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v168);
        icu::UnicodeString::~UnicodeString(v101, (icu::UnicodeString *)v173);
LABEL_213:
        icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v121);
        return;
      }

      v107 = a3;
      uint64_t v103 = a4;
      uint64_t v16 = 0LL;
      int v17 = (icu::UnicodeString *)a5;
      memset(v167, 0, 44);
      do
      {
        if (v16 == 20)
        {
          if ((*(_WORD *)(a5 + 328) & 1) != 0) {
            __int16 v18 = 2;
          }
          else {
            __int16 v18 = *(_WORD *)(a5 + 328) & 0x1F;
          }
          *(_WORD *)(a5 + 328) = v18;
        }

        else
        {
          icu::UnicodeString::setToBogus(v17);
        }

        *(_DWORD *)((char *)v167 + v16) = 0;
        v16 += 4LL;
        int v17 = (icu::UnicodeString *)((char *)v17 + 64);
      }

      while (v16 != 44);
      uint64_t v166 = 0LL;
      __int128 v165 = 0u;
      __int128 v164 = 0u;
      __int128 v163 = 0u;
      __int128 v162 = 0u;
      memset(v161, 0, sizeof(v161));
      sub_18092B28C((unsigned int *)v161, (uint64_t)a2, "plural", "times");
      uint64_t v160 = 0LL;
      __int128 v159 = 0u;
      __int128 v158 = 0u;
      __int128 v157 = 0u;
      __int128 v156 = 0u;
      memset(v155, 0, sizeof(v155));
      sub_18092B28C((unsigned int *)v155, (uint64_t)a2, "case", "times");
      uint64_t v154 = 0LL;
      memset(v153, 0, sizeof(v153));
      sub_18092B28C((unsigned int *)v153, (uint64_t)a2, "case", "power");
      LODWORD(v19) = *((_DWORD *)this + 2);
      if ((int)v19 < 1)
      {
        int v105 = 0;
        __int128 v93 = 0uLL;
        goto LABEL_195;
      }

      uint64_t v20 = 0LL;
      int v105 = 0;
      v102 = "";
      uint64_t v108 = a2;
      while (1)
      {
        if (v20 >= (int)v19 - 1)
        {
          unsigned int v25 = (icu::StandardPlural *)v102;
          if (!BYTE5(v161[0])) {
            unsigned int v25 = (icu::StandardPlural *)*((void *)&v162 + 1);
          }
          v106 = v25;
          if (BYTE5(v155[0])) {
            uint64_t v24 = v103;
          }
          else {
            uint64_t v24 = (const char *)*((void *)&v156 + 1);
          }
        }

        else
        {
          BOOL v21 = (icu::StandardPlural *)*((void *)&v161[0] + 1);
          uint64_t v23 = v102;
          int v22 = v103;
          if (BYTE4(v161[0])) {
            BOOL v21 = (icu::StandardPlural *)v102;
          }
          v106 = v21;
          if (BYTE4(v155[0])) {
            uint64_t v24 = v103;
          }
          else {
            uint64_t v24 = (const char *)*((void *)&v155[0] + 1);
          }
          if (!BYTE5(v161[0])) {
            uint64_t v23 = (const char *)*((void *)&v162 + 1);
          }
          if (!BYTE5(v155[0])) {
            int v22 = (const char *)*((void *)&v156 + 1);
          }
          v102 = v23;
          uint64_t v103 = v22;
        }

        int v104 = (char *)v20;
        int v26 = *(icu::SingleUnitImpl **)(*((void *)this + 2) + 8 * v20);
        memset(v118, 0, sizeof(v118));
        icu::MeasureUnit::MeasureUnit((uint64_t)v118);
        SimpleUnitID = (const char *)icu::SingleUnitImpl::getSimpleUnitID(v26);
        icu::StringPiece::StringPiece((icu::StringPiece *)&v116, SimpleUnitID);
        if (!icu::MeasureUnit::findBySubType(v116, v117, (icu::MeasureUnit *)v118))
        {
          *a6 = U_UNSUPPORTED_ERROR;
          icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v118);
LABEL_211:
          sub_18092D128((uint64_t)v153);
          sub_18092D128((uint64_t)v155);
          sub_18092D128((uint64_t)v161);
          goto LABEL_212;
        }

        sub_18092D168((uint64_t)a2, (icu::MeasureUnit *)v118, (int *)a6, (uint64_t)v152);
        unsigned __int16 v28 = sub_18092AA88((icu::UnicodeString *)v152, *a6);
        icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v152);
        int v30 = *((_DWORD *)v26 + 2);
        bzero(&v147, 0x2C0uLL);
        for (uint64_t i = 0LL; i != 88; i += 8LL)
        {
          __int128 v32 = &(&v147)[i];
          *__int128 v32 = (UChar *)off_18971B688;
          *((_WORD *)v32 + 4) = 2;
        }

        __int128 v33 = 0uLL;
        int v110 = v30;
        if (v30 != 1) {
          break;
        }
LABEL_70:
        int v42 = *((_DWORD *)v26 + 1);
        uint64_t v146 = 0LL;
        __int128 v144 = v33;
        __int128 v145 = v33;
        __int128 v143 = v33;
        int v142 = off_18971B688;
        LOWORD(v143) = 2;
        int v109 = v42;
        if (v42 != 30)
        {
          __int128 v138 = v33;
          __int128 v139 = v33;
          __int128 v137 = v33;
          uint64_t v136 = (char *)&v137 + 5;
          LODWORD(v137) = 40;
          uint64_t v140 = 0LL;
          int PrefixBase = umeas_getPrefixBase(v42);
          icu::CharString::appendNumber((icu::CharString *)&v136, PrefixBase, a6);
          icu::CharString::append((icu::CharString *)&v136, 112, a6);
          int PrefixPower = umeas_getPrefixPower(v109);
          icu::CharString::appendNumber((icu::CharString *)&v136, PrefixPower, a6);
          sub_18092C94C(v136, v140, (uint64_t)a2, v107, (int *)a6, (uint64_t)v130);
          icu::UnicodeString::operator=((icu::UnicodeString *)&v142, (icu::UnicodeString *)v130);
          icu::UnicodeString::~UnicodeString(v45, (icu::UnicodeString *)v130);
          *((_DWORD *)v26 + 1) = 30;
          if (BYTE4(v137)) {
            uprv_free(v136);
          }
        }

        bzero(&v136, 0x2C0uLL);
        for (uint64_t j = 0LL; j != 88; j += 8LL)
        {
          __int128 v47 = &(&v136)[j];
          char *v47 = (char *)off_18971B688;
          *((_WORD *)v47 + 4) = 2;
        }

        icu::SingleUnitImpl::build(v26, a6, (uint64_t)v130);
        sub_180929D20((uint64_t)a2, (icu::MeasureUnit *)v130, v107, v24, (uint64_t)&v136, (int *)a6);
        icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v130);
        __int128 v49 = (void *)*(unsigned int *)a6;
        __int128 v50 = 0uLL;
        if ((v141[8] & 1) == 0)
        {
          memset((char *)v130 + 8, 0, 56);
          *(void *)&v130[0] = off_18971B688;
          WORD4(v130[0]) = 2;
          if (v109 != 30)
          {
            icu::Locale::Locale((icu::Locale *)v134, (uint64_t)a2);
            sub_18092CFE4((icu::Locale *)v134, "prefix", (uint64_t)&v136, 0LL, (int *)a6, (icu::UnicodeString *)v135);
            icu::UnicodeString::operator=((icu::UnicodeString *)v141, (icu::UnicodeString *)v135);
            icu::UnicodeString::~UnicodeString(v51, (icu::UnicodeString *)v135);
            icu::Locale::~Locale((icu::Locale *)v134);
            __int128 v50 = 0uLL;
          }

          if (v110 != 1)
          {
            icu::Locale::Locale((icu::Locale *)v133, (uint64_t)a2);
            sub_18092CFE4((icu::Locale *)v133, "power", (uint64_t)&v136, 0LL, (int *)a6, (icu::UnicodeString *)v135);
            icu::UnicodeString::operator=((icu::UnicodeString *)v141, (icu::UnicodeString *)v135);
            icu::UnicodeString::~UnicodeString(v52, (icu::UnicodeString *)v135);
            icu::Locale::~Locale((icu::Locale *)v133);
            __int128 v50 = 0uLL;
          }

          *(_OWORD *)&v135[48] = v50;
          *(_OWORD *)&v135[32] = v50;
          *(_OWORD *)&v135[16] = v50;
          *(_OWORD *)uint64_t v135 = v50;
          icu::Locale::Locale((icu::Locale *)v132, (uint64_t)a2);
          sub_18092D3CC((uint64_t)v132, "times", (int *)a6, (icu::UnicodeString *)v135);
          icu::Locale::~Locale((icu::Locale *)v132);
          if ((*(__int16 *)&v135[8] & 0x80000000) == 0)
          {
            if ((*(_WORD *)&v135[8] & 0xFFE0) == 0x20) {
              goto LABEL_83;
            }
LABEL_90:
            unint64_t v54 = *(unsigned __int16 *)(a5 + 648);
            if ((v54 & 1) != 0)
            {
              int v55 = (UChar **)v135;
              goto LABEL_93;
            }

void sub_18092C94C( const char *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, _DWORD *a4@<X3>, int *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  uint64_t v11 = ures_open("icudt74l-unit", *(char **)(a3 + 40), a5);
  if (*a5 >= 1)
  {
    *(void *)a6 = off_18971B688;
    *(_WORD *)(a6 + 8) = 2;
    goto LABEL_17;
  }

  memset(&v28[1], 0, 48);
  uint64_t v29 = 0LL;
  v28[0] = (char *)&v28[1] + 5;
  LODWORD(v28[1]) = 40;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v26, "units");
  icu::CharString::append((icu::CharString *)v28, v26, v27, (UErrorCode *)a5);
  if (*a4 == 1)
  {
    uint64_t v12 = "Short";
    int v13 = v24;
    int32_t v14 = (icu::StringPiece *)v24;
  }

  else
  {
    if (*a4) {
      goto LABEL_8;
    }
    uint64_t v12 = "Narrow";
    int v13 = v25;
    int32_t v14 = (icu::StringPiece *)v25;
  }

  icu::StringPiece::StringPiece(v14, v12);
  icu::CharString::append((icu::CharString *)v28, *(const char **)v13, *((_DWORD *)v13 + 2), (UErrorCode *)a5);
LABEL_8:
  icu::StringPiece::StringPiece((icu::StringPiece *)&v22, "/compound/");
  icu::CharString::append((icu::CharString *)v28, v22, v23, (UErrorCode *)a5);
  icu::CharString::append((icu::CharString *)v28, a1, a2, (UErrorCode *)a5);
  int v15 = *a5;
  unsigned int v20 = 0;
  int v21 = v15;
  StringByKeyWithFallbacuint64_t k = ures_getStringByKeyWithFallback(v11, (char *)v28[0], (int *)&v20, (UErrorCode *)&v21);
  int v17 = v21;
  if (v21 < 1 || *a4 == 1)
  {
    *a5 = v21;
  }

  else
  {
    LODWORD(v29) = 0;
    *(_BYTE *)v28[0] = 0;
    icu::StringPiece::StringPiece((icu::StringPiece *)&v18, "unitsShort/compound/");
    icu::CharString::append((icu::CharString *)v28, v18, v19, (UErrorCode *)a5);
    icu::CharString::append((icu::CharString *)v28, a1, a2, (UErrorCode *)a5);
    StringByKeyWithFallbacuint64_t k = ures_getStringByKeyWithFallback(v11, (char *)v28[0], (int *)&v20, (UErrorCode *)a5);
    int v17 = *a5;
  }

  if (v17 < 1)
  {
    icu::UnicodeString::UnicodeString(a6, (uint64_t)StringByKeyWithFallback, v20);
  }

  else
  {
    *(void *)a6 = off_18971B688;
    *(_WORD *)(a6 + 8) = 2;
  }

  if (BYTE4(v28[1])) {
    uprv_free(v28[0]);
  }
LABEL_17:
  if (v11) {
    ures_close(v11);
  }
}

icu::UnicodeString *sub_18092CBC0@<X0>( uint64_t a1@<X0>, unsigned int a2@<W1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  uint64_t result = icu::UnicodeString::UnicodeString((icu::UnicodeString *)a4, (UChar **)(a1 + ((unint64_t)a2 << 6)));
  if ((*(_WORD *)(a4 + 8) & 1) != 0)
  {
    uint64_t result = icu::UnicodeString::operator=((UChar **)a4, (UChar **)(a1 + 320));
    if ((*(_WORD *)(a4 + 8) & 1) != 0) {
      *a3 = 5;
    }
  }

  return result;
}

uint64_t sub_18092CC2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 16);
  if ((v2 & 0x11) == 0)
  {
    if ((v2 & 2) != 0)
    {
      unint64_t v3 = (unsigned __int16 *)(a1 + 18);
      if ((v2 & 0x8000) == 0) {
        goto LABEL_6;
      }
    }

    else
    {
      unint64_t v3 = *(unsigned __int16 **)(a1 + 32);
      if ((v2 & 0x8000) == 0) {
        goto LABEL_6;
      }
    }

unsigned __int16 *sub_18092CC78(unsigned __int16 *a1, int *a2)
{
  unsigned int v2 = a1;
  if (*a2 >= 1 && (u_isJavaSpaceChar(*a1) || u_isJavaSpaceChar(v2[*a2 - 1])))
  {
    uint64_t v4 = *a2;
    if ((int)v4 <= 0)
    {
      int v6 = *a2;
      LODWORD(v4) = 0;
    }

    else
    {
      uint64_t v5 = 0LL;
      while (u_isJavaSpaceChar(v2[v5]))
      {
        if (v4 == ++v5)
        {
          int v6 = v4;
          goto LABEL_13;
        }
      }

      int v6 = v4 + 1;
      int v7 = &v2[(int)v4 - 1];
      do
      {
        UChar32 v8 = *v7--;
        --v6;
      }

      while (u_isJavaSpaceChar(v8));
      LODWORD(v4) = v5;
    }

void sub_18092CD44(uint64_t a1, uint64_t a2, icu::UnicodeString *a3, char a4, UErrorCode *a5)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  v35[0] = 0LL;
  __int128 v36 = 0u;
  uint64_t v39 = 0LL;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  v35[1] = off_18971B688;
  LOWORD(v36) = 2;
  icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v35, a3, 1, 1, 0, a5);
  if (*(int *)a5 <= 0)
  {
    uint64_t v10 = 0LL;
    char v19 = a4;
    uint64_t v20 = a1 + 8;
    uint64_t v11 = (_OWORD *)(a1 + 88);
    while (1)
    {
      memset(v34, 0, sizeof(v34));
      sub_18092CBC0(a2, v10, a5, (uint64_t)v34);
      uint64_t v12 = (void *)*(unsigned int *)a5;
      if ((int)v12 >= 1)
      {
        icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v34);
        goto LABEL_18;
      }

      uint64_t v33 = 0LL;
      __int128 v31 = 0u;
      __int128 v32 = 0u;
      __int128 v30 = 0u;
      uint64_t v29 = (UChar *)off_18971B688;
      LOWORD(v30) = 2;
      int v13 = LOWORD(v34[2]) >> 5;
      if (SLOWORD(v34[2]) < 0) {
        int v13 = v34[3];
      }
      if (!v13) {
        break;
      }
      icu::SimpleFormatter::format( (icu::SimpleFormatter *)v35,  (const icu::UnicodeString *)v34,  (icu::UnicodeString *)&v29,  a5);
      int32_t v14 = (void *)*(unsigned int *)a5;
      int v15 = 1;
LABEL_13:
      icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v29);
      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v34);
      if (!v15)
      {
        uint64_t v11 = (_OWORD *)((char *)v11 + 104);
        if (v10++ != 7) {
          continue;
        }
      }

      goto LABEL_18;
    }

    icu::UnicodeString::operator=(&v29, (UChar **)a3);
LABEL_10:
    v24[0] = 0LL;
    uint64_t v28 = 0LL;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    __int128 v25 = 0u;
    v24[1] = off_18971B688;
    LOWORD(v25) = 2;
    int v15 = 1;
    icu::SimpleFormatter::applyPatternMinMaxArguments( (icu::SimpleFormatter *)v24,  (const icu::UnicodeString *)&v29,  0,  1,  0,  a5);
    if (*(int *)a5 <= 0)
    {
      icu::number::impl::Modifier::Parameters::Parameters((uint64_t)v21, v20, 2, v10);
      icu::number::impl::SimpleModifier::SimpleModifier((uint64_t)&v22, (uint64_t)v24, v19, 0, v21[0], v21[1]);
      icu::UnicodeString::operator=((icu::UnicodeString *)(v11 - 4), (icu::UnicodeString *)v23);
      __int128 v16 = v23[5];
      *uint64_t v11 = v23[4];
      v11[1] = v16;
      int v22 = off_189727B38;
      icu::UnicodeString::~UnicodeString(off_189727B38, (icu::UnicodeString *)v23);
      icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)&v22);
      int v15 = 0;
    }

    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v24);
    goto LABEL_13;
  }

void *sub_18092CFE4@<X0>( icu::Locale *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int *a5@<X4>, icu::UnicodeString *a6@<X8>)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  icu::Locale::Locale((icu::Locale *)v16, (uint64_t)a1);
  sub_18092D3CC((uint64_t)v16, a2, a5, (icu::UnicodeString *)&v17);
  icu::Locale::~Locale((icu::Locale *)v16);
  if (SWORD4(v17) < 0)
  {
    if (HIDWORD(v17) != 1) {
      goto LABEL_11;
    }
  }

  else if ((WORD4(v17) & 0xFFE0) != 0x20)
  {
    goto LABEL_11;
  }

  if ((BYTE8(v17) & 2) != 0) {
    uint64_t v11 = (unsigned __int16 *)((unint64_t)&v17 | 0xA);
  }
  else {
    uint64_t v11 = (unsigned __int16 *)*((void *)&v18 + 1);
  }
  int v12 = *v11;
  if (v12 == 49)
  {
    if (!a4)
    {
      *(void *)a6 = off_18971B688;
      uint64_t v14 = 2LL;
      *((_WORD *)a6 + 4) = 2;
      return icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)&v17);
    }

    int v13 = (UChar **)(a4 + 640);
    goto LABEL_14;
  }

  if (v12 == 48)
  {
    int v13 = (UChar **)(a3 + 640);
LABEL_14:
    icu::UnicodeString::UnicodeString(a6, v13);
    return icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)&v17);
  }

uint64_t sub_18092D128(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 84)) {
    uprv_free(*(void **)(a1 + 72));
  }
  if (*(_BYTE *)(a1 + 20)) {
    uprv_free(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_18092D168(uint64_t a1@<X0>, icu::MeasureUnit *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  v28[8] = *(void **)MEMORY[0x1895F89C0];
  uint64_t v7 = ures_open("icudt74l-unit", *(char **)(a1 + 40), a3);
  if (*a3 < 1)
  {
    Subtype = icu::MeasureUnit::getSubtype(a2);
    int v9 = strlen(Subtype);
    if (v9 >= 8 && (uint64_t v10 = icu::MeasureUnit::getSubtype(a2), !strcmp(&v10[v9 - 7], "-person")))
    {
      int v12 = icu::MeasureUnit::getSubtype(a2);
      int v13 = v9 - 7;
    }

    else
    {
      uint64_t v11 = icu::MeasureUnit::getSubtype(a2);
      icu::StringPiece::StringPiece((icu::StringPiece *)v28, v11);
      int v12 = (const char *)v28[0];
      int v13 = (int)v28[1];
    }

    memset(&v28[1], 0, 56);
    v28[0] = (char *)&v28[1] + 5;
    LODWORD(v28[1]) = 40;
    icu::StringPiece::StringPiece((icu::StringPiece *)&v26, "units/");
    icu::CharString::append((icu::CharString *)v28, v26, v27, (UErrorCode *)a3);
    Type = icu::MeasureUnit::getType(a2);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v24, Type);
    icu::CharString::append((icu::CharString *)v28, v24, v25, (UErrorCode *)a3);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v22, "/");
    icu::CharString::append((icu::CharString *)v28, v22, v23, (UErrorCode *)a3);
    icu::CharString::append((icu::CharString *)v28, v12, v13, (UErrorCode *)a3);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v20, "/gender");
    icu::CharString::append((icu::CharString *)v28, v20, v21, (UErrorCode *)a3);
    int v15 = *a3;
    int v18 = 0;
    int v19 = v15;
    StringByKeyWithFallbacuint64_t k = ures_getStringByKeyWithFallback(v7, (char *)v28[0], &v18, (UErrorCode *)&v19);
    if (v19 <= 0)
    {
      *a3 = v19;
      __int128 v17 = StringByKeyWithFallback;
      icu::UnicodeString::UnicodeString(a4, 1LL, &v17);
    }

    else
    {
      *(void *)a4 = off_18971B688;
      *(_WORD *)(a4 + 8) = 2;
    }

    if (BYTE4(v28[1])) {
      uprv_free(v28[0]);
    }
  }

  else
  {
    *(void *)a4 = off_18971B688;
    *(_WORD *)(a4 + 8) = 2;
  }

  if (v7) {
    ures_close(v7);
  }
}

void sub_18092D3CC(uint64_t a1@<X0>, const char *a2@<X1>, int *a3@<X2>, icu::UnicodeString *a4@<X8>)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  uint64_t v20 = 0LL;
  memset(v19, 0, sizeof(v19));
  icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v19);
  uint64_t v18 = 0LL;
  memset(v17, 0, sizeof(v17));
  icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v17);
  ures_openDirectFillIn((uint64_t)v19, 0LL, "grammaticalFeatures", a3);
  ures_getByKey((uint64_t)v19, "grammaticalData", (uint64_t)v19, a3);
  ures_getByKey((uint64_t)v19, "derivations", (uint64_t)v19, a3);
  ures_getByKey((uint64_t)v19, (const char *)(a1 + 8), (uint64_t)v17, a3);
  if (*a3 == 2)
  {
    *a3 = 0;
    ures_getByKey((uint64_t)v19, "root", (uint64_t)v17, a3);
  }

  ures_getByKey((uint64_t)v17, "compound", (uint64_t)v17, a3);
  ures_getByKey((uint64_t)v17, "gender", (uint64_t)v17, a3);
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  uint64_t v16 = 0LL;
  int v12 = off_18971B688;
  LOWORD(v13) = 2;
  int v11 = 0;
  StringByKey = ures_getStringByKey((uint64_t)v17, a2, &v11, a3);
  if (*a3 <= 0)
  {
    uint64_t v10 = StringByKey;
    icu::UnicodeString::setTo((icu::UnicodeString *)&v12, 1, &v10, v11);
  }

  else
  {
    icu::UnicodeString::setToBogus((icu::UnicodeString *)&v12);
  }

  if (*a3 < 1)
  {
    icu::UnicodeString::UnicodeString(a4, (icu::UnicodeString *)&v12);
  }

  else
  {
    *(void *)a4 = off_18971B688;
    uint64_t v9 = 2LL;
    *((_WORD *)a4 + 4) = 2;
  }

  icu::UnicodeString::~UnicodeString((void *)v9, (icu::UnicodeString *)&v12);
  icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v17);
  icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v19);
}

uint64_t sub_18092D5F8(icu::StandardPlural *this, char *a2, UErrorCode *a3)
{
  int v5 = *(char *)this;
  if (v5 == 112)
  {
    return icu::StandardPlural::indexFromString(this, a2, a3);
  }

  if (v5 != 103)
  {
    return icu::StandardPlural::indexFromString(this, a2, a3);
  }

  return 10LL;
}

void sub_18092D698(uint64_t a1@<X0>, icu::MeasureUnit *a2@<X1>, int a3@<W2>, int *a4@<X3>, uint64_t a5@<X8>)
{
  v15[24] = *(UChar **)MEMORY[0x1895F89C0];
  int v13 = a3;
  if (*a4 < 1)
  {
    bzero(v14, 0x2C0uLL);
    for (uint64_t i = 0LL; i != 704; i += 64LL)
    {
      uint64_t v10 = &v14[i];
      *(void *)uint64_t v10 = off_18971B688;
      *((_WORD *)v10 + 4) = 2;
    }

    sub_180929D20(a1, a2, &v13, "", (uint64_t)v14, a4);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)a5, v15);
    for (uint64_t j = 640LL; j != -64; j -= 64LL)
      icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)&v14[j]);
  }

  else
  {
    *(_OWORD *)(a5 + 8) = 0u;
    *(void *)(a5 + 56) = 0LL;
    *(_OWORD *)(a5 + 40) = 0u;
    *(_OWORD *)(a5 + 24) = 0u;
    *(void *)a5 = off_18971B688;
    *(_WORD *)(a5 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a5);
  }

void sub_18092D7F8( uint64_t a1@<X0>, icu::MeasureUnit *a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, int *a5@<X4>, uint64_t a6@<X8>)
{
  v18[48] = *MEMORY[0x1895F89C0];
  int v16 = a3;
  if (*a5 < 1)
  {
    bzero(v17, 0x2C0uLL);
    for (uint64_t i = 0LL; i != 704; i += 64LL)
    {
      int v12 = &v17[i];
      *(void *)int v12 = off_18971B688;
      *((_WORD *)v12 + 4) = 2;
    }

    sub_180929D20(a1, a2, &v16, "", (uint64_t)v17, a5);
    if (*a5 < 1)
    {
      else {
        __int128 v14 = (UChar **)&v17[64 * (unint64_t)a4];
      }
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)a6, v14);
    }

    else
    {
      *(_OWORD *)(a6 + 8) = 0u;
      *(void *)(a6 + 56) = 0LL;
      *(_OWORD *)(a6 + 40) = 0u;
      *(_OWORD *)(a6 + 24) = 0u;
      *(void *)a6 = off_18971B688;
      *(_WORD *)(a6 + 8) = 2;
      icu::UnicodeString::setToBogus((icu::UnicodeString *)a6);
    }

    for (uint64_t j = 640LL; j != -64; j -= 64LL)
      icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v17[j]);
  }

  else
  {
    *(_OWORD *)(a6 + 8) = 0u;
    *(void *)(a6 + 56) = 0LL;
    *(_OWORD *)(a6 + 40) = 0u;
    *(_OWORD *)(a6 + 24) = 0u;
    *(void *)a6 = off_18971B688;
    *(_WORD *)(a6 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a6);
  }

uint64_t *sub_18092D9BC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  int v41 = (uint64_t *)*MEMORY[0x1895F89C0];
  uint64_t v10 = icu::UMemory::operator new(v41, (icu::UMemory *)0x368, a2);
  int v11 = v10;
  if (v10)
  {
    uint64_t *v10 = (uint64_t)off_189727718;
    v10[1] = (uint64_t)&unk_189727748;
    for (uint64_t i = 2LL; i != 106; i += 13LL)
      icu::number::impl::SimpleModifier::SimpleModifier((icu::number::impl::SimpleModifier *)&v11[i]);
    v11[106] = a3;
    v11[107] = a4;
    v11[108] = (uint64_t)"";
    bzero(v34, 0x2C0uLL);
    for (uint64_t j = 0LL; j != 704; j += 64LL)
    {
      __int128 v14 = &v34[j];
      *(void *)__int128 v14 = off_18971B688;
      *((_WORD *)v14 + 4) = 2;
    }

    uint64_t v15 = 0LL;
    v33[0] = &off_1897278B8;
    v33[1] = v34;
    do
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)&v34[v15]);
      v15 += 64LL;
    }

    while (v15 != 704);
    uint64_t v16 = ures_open("icudt74l-curr", *(char **)(a1 + 40), a5);
    uint64_t v17 = v16;
    if (*a5 <= 0)
    {
      ures_getAllChildrenWithFallback(v16, "CurrencyUnitPatterns", (uint64_t)v33, a5);
      if (*a5 <= 0)
      {
        uint64_t v18 = 0LL;
        int v19 = (const UChar *)(a2 + 20);
        uint64_t v20 = v34;
        do
        {
          if ((*((_WORD *)v20 + 4) & 1) == 0)
          {
            unsigned int v32 = 0;
            uint64_t v21 = *(char **)(a1 + 40);
            Keyword = icu::StandardPlural::getKeyword(v18);
            Pluraluint64_t Name = ucurr_getPluralName(v19, v21, 0LL, Keyword, (int *)&v32, a5);
            icu::UnicodeString::UnicodeString((uint64_t)v38, (uint64_t)"{");
            icu::UnicodeString::UnicodeString((uint64_t)v35, (uint64_t)PluralName, v32);
            else {
              int32_t v24 = *((unsigned __int16 *)v20 + 4) >> 5;
            }
            if ((v39 & 0x8000u) == 0) {
              uint64_t v25 = v39 >> 5;
            }
            else {
              uint64_t v25 = v40;
            }
            int v26 = v36 >> 5;
            if ((v36 & 0x8000u) != 0) {
              int v26 = v37;
            }
            icu::UnicodeString::findAndReplace( (icu::UnicodeString *)v20,  0,  v24,  (const icu::UnicodeString *)v38,  0,  v25,  (const icu::UnicodeString *)v35,  0,  v26);
            icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)v35);
            icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v38);
          }

          ++v18;
          v20 += 64;
        }

        while (v18 != 8);
      }
    }

    if (v17) {
      ures_close(v17);
    }
    icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v33);
    unint64_t v29 = *a5;
    else {
      int v11 = 0LL;
    }
    for (uint64_t k = 640LL; k != -64; k -= 64LL)
      icu::UnicodeString::~UnicodeString((void *)v29, (icu::UnicodeString *)&v34[k]);
  }

  else
  {
    *a5 = 7;
  }

  return v11;
}

void sub_18092DC8C(void *a1, icu::number::impl::DecimalQuantity *a2, uint64_t a3, int *a4)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  uint64_t v8 = a1[107];
  if (v8) {
    (*(void (**)(uint64_t, icu::number::impl::DecimalQuantity *, uint64_t, int *))(*(void *)v8 + 16LL))( v8,  a2,  a3,  a4);
  }
  uint64_t v9 = (icu::PluralRules *)a1[106];
  uint64_t v14 = 0LL;
  memset(v13, 0, sizeof(v13));
  icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v13, (uint64_t)a2);
  sub_180938418(a3 + 104, (icu::number::impl::DecimalQuantity *)v13, a4);
  unsigned int v10 = 5;
  if (v9 && *a4 <= 0)
  {
    memset(v15, 0, sizeof(v15));
    icu::PluralRules::select(v9, (const icu::IFixedDecimal *)v13, (icu::UnicodeString *)v15);
    int v12 = icu::StandardPlural::indexOrNegativeFromString((icu::StandardPlural *)v15, v11);
    if (v12 < 0) {
      unsigned int v10 = 5;
    }
    else {
      unsigned int v10 = v12;
    }
    icu::UnicodeString::~UnicodeString((void *)5, (icu::UnicodeString *)v15);
  }

  icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v13);
  *(void *)(a3 + 192) = &a1[13 * v10 + 2];
  *(void *)(a3 + 184) = a1[108];
}

uint64_t sub_18092DDB8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return a1 + 104LL * a3 + 16;
}

uint64_t sub_18092DDC8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return a1 + 104LL * a3 + 8;
}

const char **sub_18092DDD8( const char **result, icu::MeasureUnitImpl *this, _DWORD *a3, UErrorCode *a4, uint64_t a5, uint64_t a6, uint64_t a7, icu::MeasureUnitImpl *a8)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  if (*(int *)a8 <= 0)
  {
    uint64_t v14 = result;
    __int128 v33 = 0u;
    memset(&v32[4], 0, 48);
    memset(v32, 0, 64);
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    *(void *)&__int128 v31 = v32;
    DWORD2(v31) = 8;
    *(void *)&v32[4] = (char *)&v32[4] + 13;
    DWORD2(v32[4]) = 40;
    DWORD2(v33) = 0;
    uint64_t v15 = icu::MeasureUnitImpl::forMeasureUnit(this, (const icu::MeasureUnit *)&v30, a8, a4);
    if (*(_DWORD *)v15 == 2)
    {
      uint64_t v17 = v15;
      uint64_t v28 = a6;
      int v18 = *((_DWORD *)v15 + 2);
      *(_DWORD *)(a7 + 32) = v18;
      if (v18 < 0) {
        uint64_t v19 = -1LL;
      }
      else {
        uint64_t v19 = (704LL * v18) | 0x10;
      }
      uint64_t v20 = (void *)icu::UMemory::operator new[]((icu::UMemory *)v19, v16);
      if (v20)
      {
        *uint64_t v20 = 64LL;
        v20[1] = 11LL * v18;
        uint64_t v21 = (char *)(v20 + 2);
        if (v18)
        {
          int v22 = (char *)(v20 + 2);
          do
          {
            *(void *)int v22 = off_18971B688;
            *((_WORD *)v22 + 4) = 2;
            v22 += 64;
          }

          while (v22 != &v21[704 * v18]);
        }
      }

      else
      {
        uint64_t v21 = 0LL;
      }

      sub_18092E048((void **)(a7 + 40), v21);
      if (*(int *)(a7 + 32) >= 1)
      {
        unsigned int v23 = 0;
        uint64_t v24 = 0LL;
        do
        {
          uint64_t v25 = *(void *)(a7 + 40) + ((unint64_t)v23 << 6);
          icu::SingleUnitImpl::build( *(icu::SingleUnitImpl **)(*((void *)v17 + 2) + 8 * v24),  (UErrorCode *)a8,  (uint64_t)v29);
          sub_180929D20((uint64_t)v14, (icu::MeasureUnit *)v29, a3, (const char *)a4, v25, (int *)a8);
          icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v29);
          ++v24;
          v23 += 11;
        }

        while (v24 < *(int *)(a7 + 32));
      }

      if (*a3) {
        unsigned int v26 = *a3 != 2;
      }
      else {
        unsigned int v26 = 2;
      }
      Instance = icu::ListFormatter::createInstance(v14, 2, v26, (UErrorCode *)a8);
      sub_1807C9194(a7 + 544, (uint64_t)Instance, (int *)a8);
      *(void *)(a7 + 16) = a5;
      *(void *)(a7 + 24) = v28;
      icu::number::NumberFormatter::withLocale((icu::number::NumberFormatter *)v14, (uint64_t)v29);
      icu::number::LocalizedNumberFormatter::operator=(a7 + 48, (uint64_t)v29);
      icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)v29);
    }

    else
    {
      *(_DWORD *)a8 = 16;
    }

    if (BYTE12(v32[4])) {
      uprv_free(*(void **)&v32[4]);
    }
    return (const char **)sub_180850D68((uint64_t)&v30 + 8);
  }

  return result;
}

void sub_18092E048(void **a1, void *a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = (char *)(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    if (v6)
    {
      uint64_t v7 = v6 << 6;
      uint64_t v8 = (char *)(v4 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)&v8[v7]);
        v7 -= 64LL;
      }

      while (v7);
    }

    icu::UMemory::operator delete[](v5);
  }

  *a1 = a2;
}

uint64_t sub_18092E0B0(uint64_t a1, icu::number::impl::DecimalQuantity *a2, uint64_t a3, int *a4)
{
  uint64_t v8 = *(void *)(a1 + 24);
  if (v8) {
    (*(void (**)(uint64_t, icu::number::impl::DecimalQuantity *, uint64_t, int *))(*(void *)v8 + 16LL))( v8,  a2,  a3,  a4);
  }
  uint64_t result = sub_18092E118(a1, a2, a3, a4);
  *(void *)(a3 + 192) = result;
  return result;
}

uint64_t sub_18092E118(uint64_t a1, icu::number::impl::DecimalQuantity *a2, uint64_t a3, int *a4)
{
  uint64_t v58 = *MEMORY[0x1895F89C0];
  if (*(_DWORD *)(a3 + 484))
  {
    uint64_t v8 = *(int *)(a1 + 32);
    else {
      uint64_t v9 = (v8 << 6) | 0x10;
    }
    unsigned int v10 = (void *)icu::UMemory::operator new[]((icu::UMemory *)v9, (unint64_t)a2);
    if (v10)
    {
      void *v10 = 64LL;
      v10[1] = v8;
      if ((_DWORD)v8)
      {
        int v11 = v10 + 2;
        do
        {
          *int v11 = off_18971B688;
          *((_WORD *)v11 + 4) = 2;
          v11 += 8;
        }

        while (v11 != &v10[8 * v8 + 2]);
      }

      unsigned __int16 v39 = v10 + 2;
      if (*a4 <= 0)
      {
        int v35 = (icu::UnicodeString *)(v10 + 2);
        if (*(int *)(a3 + 484) >= 1)
        {
          unsigned int v12 = 0;
          uint64_t v13 = 0LL;
          __int128 v14 = 0uLL;
          uint64_t v15 = (icu::UnicodeString *)(v10 + 2);
          do
          {
            uint64_t v56 = 0LL;
            __int128 v54 = v14;
            __int128 v55 = v14;
            __int128 v52 = v14;
            __int128 v53 = v14;
            unint64_t v16 = (void **)icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)&v52);
            uint64_t v17 = *(unint64_t **)(a3 + 440);
            if (v13)
            {
              uint64_t v18 = v17[v13];
              if (v18 >= 0) {
                unint64_t v19 = v18;
              }
              else {
                unint64_t v19 = -v18;
              }
            }

            else
            {
              unint64_t v19 = *v17;
            }

            uint64_t v20 = *(unsigned int *)(a3 + 480);
            if (v13 == v20)
            {
              uint64_t v21 = *(icu::PluralRules **)(a1 + 16);
              uint64_t v44 = 0LL;
              __int128 v42 = 0u;
              __int128 v43 = 0u;
              __int128 v40 = 0u;
              __int128 v41 = 0u;
              icu::number::impl::DecimalQuantity::DecimalQuantity( (icu::number::impl::DecimalQuantity *)&v40,  (uint64_t)a2);
              sub_180938418(a3 + 104, (icu::number::impl::DecimalQuantity *)&v40, a4);
              unsigned int v22 = 5;
              if (v21 && *a4 <= 0)
              {
                memset(v57, 0, sizeof(v57));
                icu::PluralRules::select(v21, (const icu::IFixedDecimal *)&v40, (icu::UnicodeString *)v57);
                int v24 = icu::StandardPlural::indexOrNegativeFromString((icu::StandardPlural *)v57, v23);
                if (v24 < 0) {
                  unsigned int v22 = 5;
                }
                else {
                  unsigned int v22 = v24;
                }
                icu::UnicodeString::~UnicodeString((void *)5, (icu::UnicodeString *)v57);
              }

              icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)&v40);
              memset(v57, 0, sizeof(v57));
              sub_18092CBC0(*(void *)(a1 + 40) + ((unint64_t)v12 << 6), v22, a4, (uint64_t)v57);
              *(void *)&__int128 v40 = 0LL;
              __int128 v41 = 0u;
              uint64_t v44 = 0LL;
              __int128 v42 = 0u;
              __int128 v43 = 0u;
              *((void *)&v40 + 1) = off_18971B688;
              LOWORD(v41) = 2;
              icu::SimpleFormatter::applyPatternMinMaxArguments( (icu::SimpleFormatter *)&v40,  (const icu::UnicodeString *)v57,  0,  1,  0,  (UErrorCode *)a4);
              icu::UnicodeString::UnicodeString((uint64_t)&v47, (uint64_t)L"{0}");
              icu::SimpleFormatter::format( (icu::SimpleFormatter *)&v40,  (const icu::UnicodeString *)&v47,  v15,  (UErrorCode *)a4);
            }

            else
            {
              icu::number::impl::DecimalQuantity::setToLong(v16, v19);
              unsigned int v26 = *(icu::PluralRules **)(a1 + 16);
              if (v26)
              {
                __int128 v42 = 0u;
                __int128 v43 = 0u;
                __int128 v40 = 0u;
                __int128 v41 = 0u;
                icu::PluralRules::select(v26, (const icu::IFixedDecimal *)&v52, (icu::UnicodeString *)&v40);
                int v28 = icu::StandardPlural::indexOrNegativeFromString((icu::StandardPlural *)&v40, v27);
                if (v28 < 0) {
                  unsigned int v29 = 5;
                }
                else {
                  unsigned int v29 = v28;
                }
                icu::UnicodeString::~UnicodeString((void *)5, (icu::UnicodeString *)&v40);
              }

              else
              {
                unsigned int v29 = 5;
              }

              memset(v57, 0, sizeof(v57));
              sub_18092CBC0(*(void *)(a1 + 40) + ((unint64_t)v12 << 6), v29, a4, (uint64_t)v57);
              *(void *)&__int128 v40 = 0LL;
              __int128 v41 = 0u;
              uint64_t v44 = 0LL;
              __int128 v42 = 0u;
              __int128 v43 = 0u;
              *((void *)&v40 + 1) = off_18971B688;
              LOWORD(v41) = 2;
              icu::SimpleFormatter::applyPatternMinMaxArguments( (icu::SimpleFormatter *)&v40,  (const icu::UnicodeString *)v57,  0,  1,  0,  (UErrorCode *)a4);
              uint64_t v51 = 0LL;
              __int128 v49 = 0u;
              __int128 v50 = 0u;
              __int128 v48 = 0u;
              __int128 v47 = off_18971B688;
              LOWORD(v48) = 2;
              v38[0] = &unk_18971B6F0;
              v38[1] = &v47;
              icu::number::LocalizedNumberFormatter::formatDecimalQuantity( (uint64_t *)(a1 + 48),  (const icu::number::impl::DecimalQuantity *)&v52,  (UErrorCode *)a4,  (uint64_t)v37);
              icu::number::FormattedNumber::appendTo( (icu::number::FormattedNumber *)v37,  (icu::Appendable *)v38,  (UErrorCode *)a4);
              icu::number::FormattedNumber::~FormattedNumber((icu::number::FormattedNumber *)v37);
              icu::SimpleFormatter::format( (icu::SimpleFormatter *)&v40,  (const icu::UnicodeString *)&v47,  v15,  (UErrorCode *)a4);
              icu::UnicodeStringAppendable::~UnicodeStringAppendable((icu::UnicodeStringAppendable *)v38);
            }

            icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)&v47);
            icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)&v40);
            icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)v57);
            icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)&v52);
            ++v13;
            v12 += 11;
            uint64_t v15 = (icu::UnicodeString *)((char *)v15 + 64);
            __int128 v14 = 0uLL;
          }

          while (v13 < *(int *)(a3 + 484));
        }

        memset((char *)v57 + 8, 0, 56);
        *(void *)&v57[0] = off_18971B688;
        WORD4(v57[0]) = 2;
        icu::ListFormatter::format( *(icu::ListFormatter **)(a1 + 544),  v35,  *(_DWORD *)(a1 + 32),  (icu::UnicodeString *)v57,  (UErrorCode *)a4);
        *(void *)&__int128 v52 = 0LL;
        __int128 v53 = 0u;
        uint64_t v56 = 0LL;
        __int128 v54 = 0u;
        __int128 v55 = 0u;
        *((void *)&v52 + 1) = off_18971B688;
        LOWORD(v53) = 2;
        icu::SimpleFormatter::applyPatternMinMaxArguments( (icu::SimpleFormatter *)&v52,  (const icu::UnicodeString *)v57,  0,  1,  0,  (UErrorCode *)a4);
        if (*a4 < 1)
        {
          icu::number::impl::Modifier::Parameters::Parameters((uint64_t)v36, a1 + 8, 2, 5);
          icu::number::impl::SimpleModifier::SimpleModifier((uint64_t)&v40, (uint64_t)&v52, 0, 0, v36[0], v36[1]);
          uint64_t v31 = a3 + 312;
          icu::UnicodeString::operator=((icu::UnicodeString *)(a3 + 320), (icu::UnicodeString *)((char *)&v40 + 8));
          __int128 v32 = v46;
          *(_OWORD *)(a3 + 384) = v45;
          *(_OWORD *)(a3 + 400) = v32;
          *(void *)&__int128 v40 = off_189727B38;
          icu::UnicodeString::~UnicodeString(off_189727B38, (icu::UnicodeString *)((char *)&v40 + 8));
          icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)&v40);
        }

        else
        {
          uint64_t v31 = a3 + 240;
        }

        icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)&v52);
        icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)v57);
        goto LABEL_44;
      }
    }

    else
    {
      unsigned __int16 v39 = 0LL;
      if (*a4 <= 0) {
        *a4 = 7;
      }
    }

    uint64_t v31 = a3 + 240;
LABEL_44:
    sub_1807CCEEC((uint64_t *)&v39);
    return v31;
  }

  *a4 = 16;
  return a3 + 240;
}

void sub_18092E66C()
{
}

void sub_18092E678()
{
}

uint64_t *sub_18092E684@<X0>( const char **a1@<X0>, unsigned int *a2@<X1>, _DWORD *a3@<X2>, UErrorCode *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, UErrorCode *a7@<X6>, uint64_t *a8@<X8>)
{
  unsigned int v12 = icu::UMemory::operator new(a8, (icu::UMemory *)0x118, (unint64_t)a2);
  if (!v12)
  {
    uint64_t v13 = 0LL;
    *a7 = U_MEMORY_ALLOCATION_ERROR;
    return v13;
  }

  uint64_t v13 = v12;
  uint64_t *v12 = (uint64_t)off_189727858;
  *((_DWORD *)v12 + 2) = 0;
  __int128 v14 = (unsigned int *)(v12 + 1);
  v12[2] = (uint64_t)(v12 + 4);
  *((_DWORD *)v12 + 6) = 8;
  *((_BYTE *)v12 + 28) = 0;
  *((_DWORD *)v12 + 24) = 0;
  uint64_t v15 = (unsigned int *)(v12 + 12);
  v12[13] = (uint64_t)(v12 + 15);
  *((_DWORD *)v12 + 28) = 8;
  *((_BYTE *)v12 + 116) = 0;
  v12[23] = (uint64_t)(v12 + 25);
  *((_DWORD *)v12 + 48) = 8;
  *((_BYTE *)v12 + 196) = 0;
  v12[33] = 0LL;
  v12[34] = a6;
  if (*(int *)a7 > 0)
  {
LABEL_20:
    (*(void (**)(uint64_t *))(*v13 + 8))(v13);
    return 0LL;
  }

  uint64_t v16 = *a2;
  if ((int)v16 < 1 || (uint64_t v17 = uprv_malloc(8 * v16)) == 0LL)
  {
    *a7 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_20;
  }

  uint64_t v19 = (uint64_t)v17;
  if (*((_BYTE *)v13 + 196)) {
    uprv_free((void *)v13[23]);
  }
  unsigned __int16 v39 = v13 + 33;
  v13[23] = v19;
  *((_DWORD *)v13 + 48) = v16;
  *((_BYTE *)v13 + 196) = 1;
  unint64_t v20 = (int)*a2;
  BOOL v21 = !is_mul_ok(v20, 0x18uLL);
  if (24 * v20 >= 0xFFFFFFFFFFFFFFF0LL) {
    BOOL v21 = 1;
  }
  if (v21) {
    uint64_t v22 = -1LL;
  }
  else {
    uint64_t v22 = 24 * v20 + 16;
  }
  unsigned int v23 = (void *)icu::UMemory::operator new[]((icu::UMemory *)v22, v18);
  if (v23)
  {
    *unsigned int v23 = 24LL;
    v23[1] = v20;
    uint64_t v24 = (uint64_t)(v23 + 2);
    if ((_DWORD)v20)
    {
      uint64_t v25 = 24 * v20;
      uint64_t v26 = (uint64_t)(v23 + 2);
      do
      {
        uint64_t v26 = icu::MeasureUnit::MeasureUnit(v26) + 24;
        v25 -= 24LL;
      }

      while (v25);
    }
  }

  else
  {
    uint64_t v24 = 0LL;
  }

  sub_18092E958(v39, v24);
  uint64_t v28 = *a2;
  if ((int)v28 >= 1)
  {
    uint64_t v29 = 0LL;
    while (1)
    {
      __int128 v30 = *(icu::MeasureUnit **)(*((void *)a2 + 1) + 8 * v29);
      icu::MeasureUnit::operator=(*v39 + 24 * v29, (unint64_t)v30);
      int Complexity = icu::MeasureUnit::getComplexity(v30, a7, v31, v32);
      UErrorCode v35 = *a7;
      if (Complexity == 2)
      {
        if (v35 <= U_ZERO_ERROR)
        {
          int v37 = sub_18092F264(v15, v34);
          unsigned __int16 v36 = v37;
        }

        else
        {
          unsigned __int16 v36 = 0LL;
        }

        sub_18092DDD8(a1, v30, a3, a4, a5, 0LL, (uint64_t)v36, (icu::MeasureUnitImpl *)a7);
      }

      else
      {
        if (v35 <= U_ZERO_ERROR)
        {
          __int128 v38 = sub_18092F370(v14, v34);
          unsigned __int16 v36 = v38;
        }

        else
        {
          unsigned __int16 v36 = 0LL;
        }

        sub_180929B7C(a1, v30, a3, (const char *)a4, a5, 0LL, v36, (int *)a7);
      }

      *(void *)(v13[23] + 8 * v29) = v36;
      if (++v29 == v28) {
        return v13;
      }
    }

    goto LABEL_20;
  }

  return v13;
}

void sub_18092E958(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = (void *)(v4 - 16);
    uint64_t v6 = *(void *)(v4 - 8);
    if (v6)
    {
      uint64_t v7 = 24 * v6;
      uint64_t v8 = v4 - 24;
      do
      {
        icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)(v8 + v7));
        v7 -= 24LL;
      }

      while (v7);
    }

    icu::UMemory::operator delete[](v5);
  }

  *a1 = a2;
}

uint64_t sub_18092E9C4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 272) + 16LL))(*(void *)(a1 + 272));
  if (*(int *)(a1 + 192) < 1)
  {
LABEL_5:
    if (*a4 <= 0) {
      *a4 = 5;
    }
  }

  else
  {
    uint64_t v9 = 0LL;
    uint64_t v10 = 0LL;
    while (1)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 264) + v9) + 32LL))( *(void *)(a1 + 264) + v9,  a3 + 416);
      if ((_DWORD)result) {
        break;
      }
      ++v10;
      v9 += 24LL;
    }

    uint64_t v11 = *(void *)(*(void *)(a1 + 184) + 8 * v10);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)v11 + 16LL))(v11, a2, a3, a4);
  }

  return result;
}

void *sub_18092EAA4(void *a1)
{
  *a1 = off_189727718;
  a1[1] = &unk_189727748;
  unsigned int v2 = (icu::number::impl::ModifierStore *)(a1 + 1);
  uint64_t v3 = 104LL;
  do
  {
    a1[v3 - 11] = off_189727B38;
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&a1[v3 - 10]);
    icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)&a1[v3 - 11]);
    v3 -= 13LL;
  }

  while (v3 * 8);
  icu::number::impl::ModifierStore::~ModifierStore(v2);
  return a1;
}

void sub_18092EB24(void *a1)
{
  *a1 = off_189727718;
  a1[1] = &unk_189727748;
  unsigned int v2 = (icu::number::impl::ModifierStore *)(a1 + 1);
  uint64_t v3 = 104LL;
  do
  {
    a1[v3 - 11] = off_189727B38;
    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)&a1[v3 - 10]);
    icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)&a1[v3 - 11]);
    v3 -= 13LL;
  }

  while (v3 * 8);
  icu::number::impl::ModifierStore::~ModifierStore(v2);
  icu::UMemory::operator delete(a1);
}

void sub_18092EBA4(icu::number::impl::ModifierStore *a1)
{
  *((void *)a1 - 1) = off_189727718;
  *(void *)a1 = &unk_189727748;
  uint64_t v2 = 832LL;
  do
  {
    *(void *)((char *)a1 + v2 - 96) = off_189727B38;
    icu::UnicodeString::~UnicodeString((icu::number::impl::ModifierStore *)((char *)a1 + v2 - 88));
    icu::number::impl::Modifier::~Modifier((icu::number::impl::ModifierStore *)((char *)a1 + v2 - 96));
    v2 -= 104LL;
  }

  while (v2);
  icu::number::impl::ModifierStore::~ModifierStore(a1);
}

void sub_18092EC10(icu::number::impl::ModifierStore *a1)
{
  *((void *)a1 - 1) = off_189727718;
  uint64_t v2 = (char *)a1 - 8;
  *(void *)a1 = &unk_189727748;
  uint64_t v3 = 832LL;
  do
  {
    *(void *)((char *)a1 + v3 - 96) = off_189727B38;
    icu::UnicodeString::~UnicodeString(v4, (icu::number::impl::ModifierStore *)((char *)a1 + v3 - 88));
    icu::number::impl::Modifier::~Modifier((icu::number::impl::ModifierStore *)((char *)a1 + v3 - 96));
    v3 -= 104LL;
  }

  while (v3);
  icu::number::impl::ModifierStore::~ModifierStore(a1);
  icu::UMemory::operator delete(v2);
}

uint64_t *sub_18092EC90(uint64_t *a1)
{
  *a1 = (uint64_t)off_1897277B8;
  a1[1] = (uint64_t)&unk_1897277E8;
  uint64_t v2 = (icu::number::impl::ModifierStore *)(a1 + 1);
  uint64_t v3 = a1[68];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)(a1 + 6));
  sub_1807CCEEC(a1 + 5);
  icu::number::impl::ModifierStore::~ModifierStore(v2);
  return a1;
}

void sub_18092ECF4(uint64_t *a1)
{
  *a1 = (uint64_t)off_1897277B8;
  a1[1] = (uint64_t)&unk_1897277E8;
  uint64_t v2 = (icu::number::impl::ModifierStore *)(a1 + 1);
  uint64_t v3 = a1[68];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)(a1 + 6));
  sub_1807CCEEC(a1 + 5);
  icu::number::impl::ModifierStore::~ModifierStore(v2);
  icu::UMemory::operator delete(a1);
}

void sub_18092ED58(uint64_t *a1)
{
  *(a1 - 1) = (uint64_t)off_1897277B8;
  *a1 = (uint64_t)&unk_1897277E8;
  uint64_t v2 = a1[67];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)(a1 + 5));
  sub_1807CCEEC(a1 + 4);
  icu::number::impl::ModifierStore::~ModifierStore((icu::number::impl::ModifierStore *)a1);
}

void sub_18092EDB0(uint64_t *a1)
{
  *(a1 - 1) = (uint64_t)off_1897277B8;
  uint64_t v2 = a1 - 1;
  *a1 = (uint64_t)&unk_1897277E8;
  uint64_t v3 = a1[67];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)(a1 + 5));
  sub_1807CCEEC(a1 + 4);
  icu::number::impl::ModifierStore::~ModifierStore((icu::number::impl::ModifierStore *)a1);
  icu::UMemory::operator delete(v2);
}

uint64_t sub_18092EE14(uint64_t a1)
{
  *(void *)a1 = off_189727858;
  sub_18090BD34((uint64_t *)(a1 + 264));
  if (*(_BYTE *)(a1 + 196)) {
    uprv_free(*(void **)(a1 + 184));
  }
  sub_1807DDB98(a1 + 96);
  sub_1807DDB98(a1 + 8);
  return a1;
}

void sub_18092EE68(void *a1)
{
  *(void *)a1 = off_189727858;
  sub_18090BD34((uint64_t *)a1 + 33);
  if (*((_BYTE *)a1 + 196)) {
    uprv_free(*((void **)a1 + 23));
  }
  sub_1807DDB98((uint64_t)a1 + 96);
  sub_1807DDB98((uint64_t)a1 + 8);
  icu::UMemory::operator delete(a1);
}

void sub_18092EEC0(icu::ResourceSink *a1)
{
}

uint64_t sub_18092EED4(uint64_t a1, char *__s1, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  uint64_t result = strcmp(__s1, "case");
  if ((_DWORD)result)
  {
    uint64_t result = sub_18092D5F8((icu::StandardPlural *)__s1, a5, v10);
    if (*(int *)a5 <= 0)
    {
      uint64_t v11 = (int)result;
      if ((*(_WORD *)(*(void *)(a1 + 8) + ((uint64_t)(int)result << 6) + 8) & 1) != 0)
      {
        int v14 = 0;
        uint64_t v13 = (*(uint64_t (**)(uint64_t, int *, char *))(*(void *)a3 + 32LL))(a3, &v14, a5);
        icu::UnicodeString::UnicodeString(v15, 1LL, &v13);
        icu::UnicodeString::operator=( (icu::UnicodeString *)(*(void *)(a1 + 8) + (v11 << 6)),  (icu::UnicodeString *)v15);
        return (uint64_t)icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v15);
      }
    }
  }

  return result;
}

void sub_18092EFD4(icu::ResourceSink *a1)
{
}

void *sub_18092EFE8(uint64_t a1, icu::StandardPlural *this, UErrorCode *a3, int a4, char *a5)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t result = (void *)sub_18092D5F8(this, a5, a3);
  if (*(int *)a5 <= 0)
  {
    uint64_t v9 = (int)result;
    if ((*(_WORD *)(*(void *)(a1 + 24) + ((uint64_t)(int)result << 6) + 8) & 1) != 0)
    {
      if ((uint64_t v15 = 0LL,
            memset(v14, 0, sizeof(v14)),
            (*(void (**)(_OWORD *__return_ptr, UErrorCode *, char *))(*(void *)a3 + 88LL))(v14, a3, a5),
            uint64_t v13 = 0LL,
            memset(v12, 0, sizeof(v12)),
            uint64_t v10 = *(char **)(a1 + 8),
            *v10)
        && ((sub_18092F180(a1, (icu::ResourceTable *)v14, v10, (uint64_t)v12, (icu::ResourceValue *)a3, (uint64_t)a5) & 1) != 0
         || strcmp(*(const char **)(a1 + 8), "neuter")
         && (sub_18092F180(a1, (icu::ResourceTable *)v14, "neuter", (uint64_t)v12, (icu::ResourceValue *)a3, (uint64_t)a5) & 1) != 0)
        || (uint64_t result = (void *)sub_18092F180( a1,  (icu::ResourceTable *)v14,  "_",  (uint64_t)v12,  (icu::ResourceValue *)a3,  (uint64_t)a5),  (_DWORD)result))
      {
        int v17 = 0;
        uint64_t v16 = (*(uint64_t (**)(UErrorCode *, int *, char *))(*(void *)a3 + 32LL))(a3, &v17, a5);
        icu::UnicodeString::UnicodeString(v18, 1LL, &v16);
        icu::UnicodeString::operator=( (icu::UnicodeString *)(*(void *)(a1 + 24) + (v9 << 6)),  (icu::UnicodeString *)v18);
        return icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v18);
      }
    }
  }

  return result;
}

uint64_t sub_18092F180( uint64_t a1, icu::ResourceTable *this, char *__s1, uint64_t a4, icu::ResourceValue *a5, uint64_t a6)
{
  uint64_t result = icu::ResourceTable::findValue(this, __s1, a5);
  if ((_DWORD)result)
  {
    (*(void (**)(__int128 *__return_ptr, icu::ResourceValue *, uint64_t))(*(void *)a5 + 88LL))(&v13, a5, a6);
    __int128 v11 = *(_OWORD *)v14;
    *(_OWORD *)a4 = v13;
    *(_OWORD *)(a4 + 16) = v11;
    *(void *)(a4 + 29) = *(void *)&v14[13];
    unsigned int v12 = *(char **)(a1 + 16);
    return *v12
        && (icu::ResourceTable::findValue((icu::ResourceTable *)a4, v12, a5)
         || strcmp(*(const char **)(a1 + 16), "nominative")
  }

  return result;
}

uint64_t *sub_18092F264(unsigned int *a1, unint64_t a2)
{
  int v3 = a1[4];
  uint64_t v4 = *a1;
  if ((_DWORD)v4 != v3)
  {
LABEL_16:
    uint64_t v9 = icu::UMemory::operator new((uint64_t *)v4, (icu::UMemory *)0x228, a2);
    uint64_t v7 = v9;
    if (v9)
    {
      *uint64_t v9 = (uint64_t)off_1897277B8;
      v9[1] = (uint64_t)&unk_1897277E8;
      v9[2] = 0LL;
      v9[3] = 0LL;
      *((_DWORD *)v9 + 8) = 1;
      v9[5] = 0LL;
      sub_1808D3E38((uint64_t)(v9 + 6));
      *(_OWORD *)(v7 + 65) = 0u;
      *(_OWORD *)(v7 + 67) = 0u;
    }

    uint64_t v10 = (int)*a1;
    *a1 = v10 + 1;
    *(void *)(*((void *)a1 + 1) + 8 * v10) = v7;
    return v7;
  }

  if (v3 == 8) {
    int v5 = 32;
  }
  else {
    int v5 = 2 * v3;
  }
  if (v5 < 1) {
    return 0LL;
  }
  uint64_t v6 = (uint64_t *)uprv_malloc(8LL * v5);
  uint64_t v7 = v6;
  if (v6)
  {
    if (v3 >= 1)
    {
      int v8 = a1[4];
      if (v8 >= v3) {
        int v8 = v3;
      }
      if (v8 >= v5) {
        int v8 = v5;
      }
      memcpy(v6, *((const void **)a1 + 1), 8LL * v8);
    }

    if (*((_BYTE *)a1 + 20)) {
      uprv_free(*((void **)a1 + 1));
    }
    *((void *)a1 + 1) = v7;
    a1[4] = v5;
    uint64_t v4 = 1LL;
    *((_BYTE *)a1 + 20) = 1;
    goto LABEL_16;
  }

  return v7;
}

uint64_t *sub_18092F370(unsigned int *a1, unint64_t a2)
{
  int v3 = a1[4];
  uint64_t v4 = *a1;
  if ((_DWORD)v4 != v3)
  {
LABEL_16:
    uint64_t v9 = icu::UMemory::operator new((uint64_t *)v4, (icu::UMemory *)0x368, a2);
    uint64_t v7 = v9;
    if (v9)
    {
      *uint64_t v9 = (uint64_t)off_189727718;
      v9[1] = (uint64_t)&unk_189727748;
      uint64_t v10 = v9 + 106;
      for (uint64_t i = 2LL; i != 106; i += 13LL)
        icu::number::impl::SimpleModifier::SimpleModifier((icu::number::impl::SimpleModifier *)&v7[i]);
      void *v10 = 0LL;
      v7[107] = 0LL;
      v7[108] = (uint64_t)"";
    }

    uint64_t v12 = (int)*a1;
    *a1 = v12 + 1;
    *(void *)(*((void *)a1 + 1) + 8 * v12) = v7;
    return v7;
  }

  if (v3 == 8) {
    int v5 = 32;
  }
  else {
    int v5 = 2 * v3;
  }
  if (v5 < 1) {
    return 0LL;
  }
  uint64_t v6 = (uint64_t *)uprv_malloc(8LL * v5);
  uint64_t v7 = v6;
  if (v6)
  {
    if (v3 >= 1)
    {
      int v8 = a1[4];
      if (v8 >= v3) {
        int v8 = v3;
      }
      if (v8 >= v5) {
        int v8 = v5;
      }
      memcpy(v6, *((const void **)a1 + 1), 8LL * v8);
    }

    if (*((_BYTE *)a1 + 20)) {
      uprv_free(*((void **)a1 + 1));
    }
    *((void *)a1 + 1) = v7;
    a1[4] = v5;
    uint64_t v4 = 1LL;
    *((_BYTE *)a1 + 20) = 1;
    goto LABEL_16;
  }

  return v7;
}

void sub_18092F484( uint64_t a1@<X0>, const icu::DecimalFormatSymbols *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const icu::UnicodeString *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v97 = *MEMORY[0x1895F89C0];
  *(void *)(a6 + 464) = 0LL;
  *(_OWORD *)(a6 + 432) = 0u;
  *(_OWORD *)(a6 + 448) = 0u;
  *(_OWORD *)(a6 + 400) = 0u;
  *(_OWORD *)(a6 + 416) = 0u;
  *(_OWORD *)(a6 + 368) = 0u;
  *(_OWORD *)(a6 + 384) = 0u;
  *(_OWORD *)(a6 + 336) = 0u;
  *(_OWORD *)(a6 + 352) = 0u;
  *(_OWORD *)(a6 + 304) = 0u;
  *(_OWORD *)(a6 + 320) = 0u;
  *(_OWORD *)(a6 + 272) = 0u;
  *(_OWORD *)(a6 + 288) = 0u;
  *(_OWORD *)(a6 + 240) = 0u;
  *(_OWORD *)(a6 + 256) = 0u;
  *(_OWORD *)(a6 + 208) = 0u;
  *(_OWORD *)(a6 + 224) = 0u;
  *(_OWORD *)(a6 + 176) = 0u;
  *(_OWORD *)(a6 + 192) = 0u;
  *(_OWORD *)(a6 + 144) = 0u;
  *(_OWORD *)(a6 + 160) = 0u;
  *(_OWORD *)(a6 + 112) = 0u;
  *(_OWORD *)(a6 + 128) = 0u;
  *(_OWORD *)(a6 + 80) = 0u;
  *(_OWORD *)(a6 + 96) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 64) = 0u;
  __int128 v11 = (_DWORD *)(a6 + 64);
  *(_OWORD *)(a6 + 16) = 0u;
  uint64_t v12 = a6 + 16;
  *(_DWORD *)(a6 + 4) = 2;
  uint64_t v79 = a6 + 4;
  icu::MeasureUnit::MeasureUnit(a6 + 16);
  icu::MeasureUnit::MeasureUnit(a6 + 40);
  unsigned int v81 = v11;
  *__int128 v11 = 0;
  *(_DWORD *)(a6 + 136) = 0;
  *(_DWORD *)(a6 + 88) = 0;
  *(_DWORD *)(a6 + 96) = 4;
  *(_WORD *)(a6 + 100) = -3;
  *(_DWORD *)(a6 + 112) = -2;
  *(_WORD *)(a6 + 124) = -1;
  uint64_t v13 = a6 + 124;
  *(_BYTE *)(a6 + 132) = 0;
  *(void *)(a6 + 144) = 0LL;
  *(void *)(a6 + 152) = 0x900000007LL;
  *(_BYTE *)(a6 + 160) = 0;
  *(void *)(a6 + 164) = 2LL;
  *(void *)(a6 + 176) = 0LL;
  *(_DWORD *)(a6 + 184) = 0;
  *(void *)(a6 + 192) = 0LL;
  *(_WORD *)(a6 + 200) = 0;
  *(_DWORD *)(a6 + 204) = 0;
  *(void *)(a6 + 208) = 0LL;
  *(_WORD *)(a6 + 216) = 0;
  *(void *)(a6 + 228) = 0LL;
  *(void *)(a6 + 220) = 0LL;
  *(void *)(a6 + 236) = 0x300000000LL;
  *(_WORD *)(a6 + 244) = 0;
  icu::Locale::Locale((icu::Locale *)(a6 + 248));
  memset(v96, 0, sizeof(v96));
  icu::Locale::Locale((icu::Locale *)v96, (uint64_t)a2 + 1936);
  icu::number::impl::SymbolsWrapper::setTo((icu::number::impl::SymbolsWrapper *)(a6 + 136), a2);
  int v14 = *(icu::CurrencyPluralInfo **)(a1 + 48);
  if (!v14)
  {
    uint64_t v16 = a3 + 8;
    goto LABEL_7;
  }

  *(void *)(a6 + 232) = icu::CurrencyPluralInfo::getPluralRules(v14);
  uint64_t v15 = *(icu::CurrencyPluralInfo **)(a1 + 48);
  uint64_t v16 = a3 + 8;
  if (!v15)
  {
LABEL_7:
    sub_18092FF9C(v16, a1, a5);
    *(_BYTE *)(a3 + 2464) = 1;
    goto LABEL_8;
  }

  *(_BYTE *)(a3 + 274) = 1;
  sub_180930678(a3 + 280, v15, (uint64_t *)a1, a5);
  if (!*(_BYTE *)(a3 + 2464)) {
    uint64_t v16 = a3 + 280;
  }
LABEL_8:
  *(void *)(a6 + 224) = v16;
  if (*(_BYTE *)(a1 + 8))
  {
    int v17 = 1;
    if (!*(void *)(a1 + 48) && *(_BYTE *)(a1 + 56)) {
      int v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 40LL))(v16);
    }
  }

  else
  {
    int v17 = 1;
  }

  __int128 v94 = 0u;
  __int128 v95 = 0u;
  int32_t v78 = (int *)a5;
  sub_18091ED14(a1, (uint64_t)v96, (uint64_t)a5, (icu::CurrencyUnit *)&v94);
  if (*(_BYTE *)(a1 + 56)) {
    uint64_t v18 = 0LL;
  }
  else {
    uint64_t v18 = *(unsigned int *)(a1 + 60);
  }
  if (v17)
  {
    uint64_t v19 = v18;
    icu::MeasureUnit::operator=(v12, (unint64_t)&v94);
    uint64_t v18 = v19;
    uint64_t v13 = a6 + 124;
  }

  int v20 = *(_DWORD *)(a1 + 88);
  LODWORD(v21) = *(_DWORD *)(a1 + 92);
  int v22 = *(_DWORD *)(a1 + 104);
  LODWORD(v23) = *(_DWORD *)(a1 + 112);
  double v24 = *(double *)(a1 + 736);
  if (*(_BYTE *)(a1 + 744)) {
    int v25 = 4;
  }
  else {
    int v25 = *(_DWORD *)(a1 + 748);
  }
  int v88 = v25;
  BOOL v26 = (v22 & v20) != -1;
  int v80 = *(_DWORD *)(a1 + 96);
  BOOL v27 = (*(_DWORD *)(a1 + 116) & v80) != -1;
  BOOL v84 = v27;
  int v85 = *(_DWORD *)(a1 + 116);
  if (!v17 || v22 != -1 && v20 != -1)
  {
    int DefaultFractionDigitsForUsage = *(_DWORD *)(a1 + 104);
LABEL_25:
    int v29 = v20;
    goto LABEL_26;
  }

  int v87 = v17;
  uint64_t v39 = v13;
  uint64_t v40 = v18;
  int DefaultFractionDigitsForUsage = ucurr_getDefaultFractionDigitsForUsage((const UChar *)&v95 + 2, v18, v78);
  BOOL v26 = (v22 & v20) != -1;
  uint64_t v18 = v40;
  uint64_t v13 = v39;
  int v17 = v87;
  BOOL v27 = v84;
  if (v22 != -1 || (int v29 = DefaultFractionDigitsForUsage, v20 != -1))
  {
    if (v22 != -1)
    {
      if (v22 <= DefaultFractionDigitsForUsage) {
        int v29 = DefaultFractionDigitsForUsage;
      }
      else {
        int v29 = v22;
      }
      int DefaultFractionDigitsForUsage = v22;
      goto LABEL_26;
    }

    if (DefaultFractionDigitsForUsage >= v20) {
      int DefaultFractionDigitsForUsage = v20;
    }
    goto LABEL_25;
  }

void sub_18092FE6C( uint64_t a1@<X0>, const icu::DecimalFormatSymbols *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const icu::UnicodeString *a5@<X4>, uint64_t a6@<X8>)
{
  v27[29] = *MEMORY[0x1895F89C0];
  icu::number::NumberFormatter::with(&v20);
  sub_18092F484(a1, a2, a3, a4, a5, (uint64_t)v12);
  icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::macros((uint64_t)&v20, (uint64_t)v12, a6);
  icu::Locale::~Locale((icu::Locale *)&v19);
  icu::number::impl::StringProp::~StringProp(&v18);
  icu::number::impl::StringProp::~StringProp(&v17);
  icu::number::Scale::~Scale((icu::number::Scale *)&v16);
  icu::number::impl::SymbolsWrapper::~SymbolsWrapper((icu::number::impl::SymbolsWrapper *)&v15);
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v14);
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v13);
  icu::Locale::~Locale((icu::Locale *)v27);
  icu::number::impl::StringProp::~StringProp(&v26);
  icu::number::impl::StringProp::~StringProp(&v25);
  icu::number::Scale::~Scale((icu::number::Scale *)&v24);
  icu::number::impl::SymbolsWrapper::~SymbolsWrapper((icu::number::impl::SymbolsWrapper *)&v23);
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v22);
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v21);
}

void *sub_18092FF9C(uint64_t a1, uint64_t a2, const icu::UnicodeString *a3)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  *(_BYTE *)(a1 + 266) = 0;
  memset(v35, 0, sizeof(v35));
  icu::number::impl::AffixUtils::escape(a2 + 480, (uint64_t)v35);
  memset(v34, 0, sizeof(v34));
  icu::number::impl::AffixUtils::escape(a2 + 608, (uint64_t)v34);
  memset(v33, 0, sizeof(v33));
  icu::number::impl::AffixUtils::escape(a2 + 128, (uint64_t)v33);
  memset(v32, 0, sizeof(v32));
  icu::number::impl::AffixUtils::escape(a2 + 256, (uint64_t)v32);
  if ((*(_WORD *)(a2 + 488) & 1) == 0)
  {
    uint64_t v6 = (UChar **)(a1 + 8);
    uint64_t v7 = (UChar **)v35;
LABEL_5:
    icu::UnicodeString::operator=(v6, v7);
    goto LABEL_7;
  }

  if ((*(_WORD *)(a2 + 552) & 1) == 0)
  {
    uint64_t v6 = (UChar **)(a1 + 8);
    uint64_t v7 = (UChar **)(a2 + 544);
    goto LABEL_5;
  }

  icu::UnicodeString::UnicodeString((uint64_t)v31, (uint64_t)&unk_180A479F2);
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 8), (icu::UnicodeString *)v31);
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v31);
LABEL_7:
  if ((*(_WORD *)(a2 + 616) & 1) == 0)
  {
    uint64_t v9 = (UChar **)(a1 + 72);
    uint64_t v10 = (UChar **)v34;
LABEL_11:
    icu::UnicodeString::operator=(v9, v10);
    goto LABEL_13;
  }

  if ((*(_WORD *)(a2 + 680) & 1) == 0)
  {
    uint64_t v9 = (UChar **)(a1 + 72);
    uint64_t v10 = (UChar **)(a2 + 672);
    goto LABEL_11;
  }

  icu::UnicodeString::UnicodeString((uint64_t)v31, (uint64_t)&unk_180A479F2);
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 72), (icu::UnicodeString *)v31);
  icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v31);
LABEL_13:
  if ((*(_WORD *)(a2 + 136) & 1) == 0)
  {
    uint64_t v12 = (UChar **)(a1 + 136);
    uint64_t v13 = (UChar **)v33;
LABEL_17:
    icu::UnicodeString::operator=(v12, v13);
    goto LABEL_18;
  }

  if ((*(_WORD *)(a2 + 200) & 1) == 0)
  {
    uint64_t v12 = (UChar **)(a1 + 136);
    uint64_t v13 = (UChar **)(a2 + 192);
    goto LABEL_17;
  }

  __int16 v17 = *(_WORD *)(a2 + 552);
  if ((v17 & 1) != 0)
  {
    icu::UnicodeString::UnicodeString((uint64_t)v31, (uint64_t)L"-");
  }

  else
  {
    icu::UnicodeString::UnicodeString((uint64_t)v30, (uint64_t)L"-");
    icu::operator+((uint64_t)v30, a2 + 544, (uint64_t)v31);
  }

  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 136), (icu::UnicodeString *)v31);
  icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v31);
  if ((v17 & 1) == 0) {
    icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v30);
  }
LABEL_18:
  if ((*(_WORD *)(a2 + 264) & 1) != 0)
  {
    if ((*(_WORD *)(a2 + 328) & 1) != 0)
    {
      if ((*(_WORD *)(a2 + 680) & 1) != 0) {
        icu::UnicodeString::UnicodeString((uint64_t)v31, (uint64_t)&unk_180A479F2);
      }
      else {
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)v31, (UChar **)(a2 + 672));
      }
      icu::UnicodeString::operator=((UChar **)(a1 + 200), v31);
      icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v31);
      goto LABEL_32;
    }

    uint64_t v14 = (UChar **)(a1 + 200);
    uint64_t v15 = (UChar **)(a2 + 320);
  }

  else
  {
    uint64_t v14 = (UChar **)(a1 + 200);
    uint64_t v15 = (UChar **)v32;
  }

  icu::UnicodeString::operator=(v14, v15);
LABEL_32:
  BOOL v24 = (icu::number::impl::AffixUtils::hasCurrencySymbols((icu::number::impl::AffixUtils *)(a2 + 544), a3, v16) & 1) != 0
     || (icu::number::impl::AffixUtils::hasCurrencySymbols((icu::number::impl::AffixUtils *)(a2 + 672), a3, v21) & 1) != 0
     || (icu::number::impl::AffixUtils::hasCurrencySymbols((icu::number::impl::AffixUtils *)(a2 + 192), a3, v22) & 1) != 0
     || (icu::number::impl::AffixUtils::hasCurrencySymbols((icu::number::impl::AffixUtils *)(a2 + 320), a3, v23) & 1) != 0
     || *(_BYTE *)(a2 + 67) != 0;
  *(_BYTE *)(a1 + 264) = v24;
  int v25 = (void *)*(unsigned __int8 *)(a2 + 67);
  *(_BYTE *)(a1 + 265) = (_BYTE)v25;
  icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)v32);
  icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v33);
  icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)v34);
  return icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v35);
}

uint64_t sub_180930298(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v3 = a1 + 72;
  if ((a2 & 0x200) != 0) {
    uint64_t v3 = a1 + 200;
  }
  if ((a2 & 0x100) != 0) {
    uint64_t v3 = a1 + 8;
  }
  if ((~a2 & 0x300) != 0) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = a1 + 136;
  }
  unsigned int v5 = *(unsigned __int16 *)(v4 + 8);
  else {
    unsigned int v6 = v5 >> 5;
  }
  if (v6 <= a3) {
    return 0xFFFFLL;
  }
  if ((v5 & 2) != 0) {
    uint64_t v7 = v4 + 10;
  }
  else {
    uint64_t v7 = *(void *)(v4 + 24);
  }
  return *(unsigned __int16 *)(v7 + 2LL * (int)a3);
}

uint64_t sub_180930304(uint64_t a1, int a2)
{
  uint64_t v2 = a1 + 72;
  if ((a2 & 0x200) != 0) {
    uint64_t v2 = a1 + 200;
  }
  if ((a2 & 0x100) != 0) {
    uint64_t v2 = a1 + 8;
  }
  if ((~a2 & 0x300) != 0) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = a1 + 136;
  }
  else {
    return *(unsigned __int16 *)(v3 + 8) >> 5;
  }
}

icu::UnicodeString *sub_18093034C@<X0>(UChar **a1@<X0>, int a2@<W1>, icu::UnicodeString *a3@<X8>)
{
  uint64_t v3 = a1 + 9;
  if ((a2 & 0x200) != 0) {
    uint64_t v3 = a1 + 25;
  }
  if ((a2 & 0x100) != 0) {
    uint64_t v3 = a1 + 1;
  }
  if ((~a2 & 0x300) != 0) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = a1 + 17;
  }
  return icu::UnicodeString::UnicodeString(a3, v4);
}

uint64_t sub_180930380(uint64_t a1)
{
  uint64_t v4 = qword_18970B7E0;
  uint64_t v5 = 0LL;
  else {
    uint64_t v2 = icu::number::impl::AffixUtils::containsType(a1 + 72, -2, (int *)&v5);
  }
  icu::ErrorCode::~ErrorCode((icu::ErrorCode *)&v4);
  return v2;
}

uint64_t sub_1809303F8(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  unsigned int v2 = *(unsigned __int16 *)(a1 + 208);
  if ((v2 & 1) != 0)
  {
    if ((*(_WORD *)(a1 + 80) & 1) != 0) {
      goto LABEL_13;
    }
    return 1LL;
  }

  else
  {
    if ((v2 & 0x8000) != 0) {
      int v3 = *(_DWORD *)(a1 + 212);
    }
    else {
      int v3 = v2 >> 5;
    }
    unsigned int v5 = *(unsigned __int16 *)(a1 + 80);
    if ((v5 & 0x8000u) == 0) {
      unsigned int v6 = v5 >> 5;
    }
    else {
      unsigned int v6 = *(_DWORD *)(a1 + 84);
    }
    BOOL v4 = 1LL;
    if ((v5 & 1) == 0
      && v3 == v6
      && icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 200), (const icu::UnicodeString *)(a1 + 72), v3))
    {
LABEL_13:
      icu::UnicodeString::tempSubString((icu::UnicodeString *)(a1 + 136), 1, 0x7FFFFFFF, (icu::UnicodeString *)v12);
      if ((v13 & 1) != 0)
      {
        uint64_t v9 = (void *)*(unsigned __int16 *)(a1 + 16);
      }

      else
      {
        if ((v13 & 0x8000u) == 0) {
          int v7 = v13 >> 5;
        }
        else {
          int v7 = v14;
        }
        unsigned int v8 = *(unsigned __int16 *)(a1 + 16);
        if ((v8 & 0x8000u) == 0) {
          uint64_t v9 = (void *)(v8 >> 5);
        }
        else {
          uint64_t v9 = (void *)*(unsigned int *)(a1 + 20);
        }
        BOOL v4 = 1LL;
        if ((v8 & 1) != 0
          || v7 != (_DWORD)v9
          || !icu::UnicodeString::doEquals((icu::UnicodeString *)v12, (const icu::UnicodeString *)(a1 + 8), v7))
        {
          goto LABEL_33;
        }
      }

      uint64_t v9 = (void *)*(unsigned __int16 *)(a1 + 144);
      if (*(__int16 *)(a1 + 144) < 0)
      {
        if (*(_DWORD *)(a1 + 148)) {
          goto LABEL_27;
        }
      }

      else if (v9 >> 5)
      {
LABEL_27:
        else {
          uint64_t v10 = *(unsigned __int16 **)(a1 + 160);
        }
        uint64_t v9 = (void *)*v10;
        BOOL v4 = (_DWORD)v9 != 45;
        goto LABEL_33;
      }

uint64_t sub_180930568(uint64_t a1)
{
  BOOL v4 = qword_18970B7E0;
  uint64_t v5 = 0LL;
  else {
    uint64_t v2 = icu::number::impl::AffixUtils::containsType(a1 + 200, -1, (int *)&v5);
  }
  icu::ErrorCode::~ErrorCode((icu::ErrorCode *)&v4);
  return v2;
}

uint64_t sub_1809305E0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 264);
}

uint64_t sub_1809305E8(uint64_t a1, int a2, int *a3)
{
  if ((icu::number::impl::AffixUtils::containsType(a1 + 8, a2, a3) & 1) != 0
    || (icu::number::impl::AffixUtils::containsType(a1 + 72, a2, a3) & 1) != 0
    || (icu::number::impl::AffixUtils::containsType(a1 + 136, a2, a3) & 1) != 0)
  {
    return 1LL;
  }

  else
  {
    return icu::number::impl::AffixUtils::containsType(a1 + 200, a2, a3);
  }

uint64_t sub_180930668()
{
  return 1LL;
}

uint64_t sub_180930670(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 265);
}

void *sub_180930678(uint64_t a1, icu::CurrencyPluralInfo *a2, uint64_t *a3, const icu::UnicodeString *a4)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  *(_BYTE *)(a1 + 2184) = 0;
  bzero(v22, 0x2F0uLL);
  uint64_t v21 = *a3;
  v22[0] = *((_BYTE *)a3 + 8);
  icu::CurrencyUnit::CurrencyUnit((icu::CurrencyUnit *)&v23, (const UChar *)a3 + 8);
  sub_1808D427C(&v24, (uint64_t **)a3 + 6);
  __int128 v26 = *(_OWORD *)(a3 + 9);
  __int128 v27 = *(_OWORD *)(a3 + 11);
  __int128 v28 = *(_OWORD *)(a3 + 13);
  uint64_t v29 = a3[15];
  __int128 v25 = *(_OWORD *)(a3 + 7);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v30, (UChar **)a3 + 16);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v31, (UChar **)a3 + 24);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v32, (UChar **)a3 + 32);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v33, (UChar **)a3 + 40);
  v33[8] = a3[48];
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v34, (UChar **)a3 + 49);
  _OWORD v34[4] = *(_OWORD *)(a3 + 57);
  int v35 = *((_DWORD *)a3 + 118);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v36, (UChar **)a3 + 60);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v37, (UChar **)a3 + 68);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v38, (UChar **)a3 + 76);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v39, (UChar **)a3 + 84);
  uint64_t v8 = 0LL;
  *(void *)&v40[14] = *(uint64_t *)((char *)a3 + 750);
  *(_OWORD *)uint64_t v40 = *((_OWORD *)a3 + 46);
  uint64_t v9 = a1 + 8;
  do
  {
    Keyword = icu::StandardPlural::getKeyword(v8);
    uint64_t v20 = 0LL;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v17 = 0u;
    uint64_t v16 = (UChar *)off_18971B688;
    LOWORD(v17) = 2;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v15, Keyword);
    CurrencyPluralPattern = icu::CurrencyPluralInfo::getCurrencyPluralPattern(a2, (const icu::UnicodeString *)v15, &v16);
    icu::UnicodeString::operator=(&v16, CurrencyPluralPattern);
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v15);
    icu::number::impl::PatternParser::parseToExistingProperties(&v16, &v21);
    sub_18092FF9C(v9, (uint64_t)&v21, a4);
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v16);
    ++v8;
    v9 += 272LL;
  }

  while (v8 != 8);
  return sub_1808D42E8(&v21);
}

uint64_t sub_1809308A8(uint64_t a1, unsigned __int8 a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 272LL * a2 + 8) + 16LL))(a1 + 272LL * a2 + 8);
}

uint64_t sub_1809308C0(uint64_t a1, unsigned __int8 a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 272LL * a2 + 8) + 24LL))(a1 + 272LL * a2 + 8);
}

uint64_t sub_1809308D8(uint64_t a1, unsigned __int8 a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 272LL * a2 + 8) + 32LL))(a1 + 272LL * a2 + 8);
}

uint64_t sub_1809308F0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 1368) + 48LL))(a1 + 1368);
}

uint64_t sub_180930904(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 1368) + 56LL))(a1 + 1368);
}

uint64_t sub_180930918(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 1368) + 64LL))(a1 + 1368);
}

uint64_t sub_18093092C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 1368) + 40LL))(a1 + 1368);
}

uint64_t sub_180930940(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 1368) + 72LL))(a1 + 1368);
}

uint64_t sub_180930954(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 1368) + 80LL))(a1 + 1368);
}

uint64_t sub_180930968(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 1368) + 88LL))(a1 + 1368);
}

void sub_18093097C(uint64_t a1)
{
  *(void *)a1 = off_189727980;
  uint64_t v2 = (icu::UnicodeString *)(a1 + 8);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 200));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 136));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 72));
  icu::UnicodeString::~UnicodeString(v2);
  icu::number::impl::AffixPatternProvider::~AffixPatternProvider((icu::number::impl::AffixPatternProvider *)a1);
}

void sub_1809309CC(uint64_t a1)
{
  *(void *)a1 = off_189727980;
  uint64_t v2 = (icu::UnicodeString *)(a1 + 8);
  icu::UnicodeString::~UnicodeString(off_189727980, (icu::UnicodeString *)(a1 + 200));
  icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)(a1 + 136));
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + 72));
  icu::UnicodeString::~UnicodeString(v5, v2);
  icu::number::impl::AffixPatternProvider::~AffixPatternProvider((icu::number::impl::AffixPatternProvider *)a1);
  icu::UMemory::operator delete(v6);
}

void sub_180930A20(icu::number::impl::AffixPatternProvider *a1)
{
  *(void *)a1 = off_189727A28;
  uint64_t v2 = 2176LL;
  do
  {
    *(void *)((char *)a1 + v2 - 264) = off_189727980;
    icu::UnicodeString::~UnicodeString((icu::number::impl::AffixPatternProvider *)((char *)a1 + v2 - 64));
    icu::UnicodeString::~UnicodeString((icu::number::impl::AffixPatternProvider *)((char *)a1 + v2 - 128));
    icu::UnicodeString::~UnicodeString((icu::number::impl::AffixPatternProvider *)((char *)a1 + v2 - 192));
    icu::UnicodeString::~UnicodeString((icu::number::impl::AffixPatternProvider *)((char *)a1 + v2 - 256));
    icu::number::impl::AffixPatternProvider::~AffixPatternProvider((icu::number::impl::AffixPatternProvider *)((char *)a1 + v2 - 264));
    v2 -= 272LL;
  }

  while (v2);
  icu::number::impl::AffixPatternProvider::~AffixPatternProvider(a1);
}

void sub_180930AA4(icu::number::impl::AffixPatternProvider *a1)
{
  uint64_t v2 = off_189727A28;
  *(void *)a1 = off_189727A28;
  uint64_t v3 = 2176LL;
  do
  {
    *(void *)((char *)a1 + v3 - 264) = off_189727980;
    icu::UnicodeString::~UnicodeString(v2, (icu::number::impl::AffixPatternProvider *)((char *)a1 + v3 - 64));
    icu::UnicodeString::~UnicodeString(v4, (icu::number::impl::AffixPatternProvider *)((char *)a1 + v3 - 128));
    icu::UnicodeString::~UnicodeString(v5, (icu::number::impl::AffixPatternProvider *)((char *)a1 + v3 - 192));
    icu::UnicodeString::~UnicodeString(v6, (icu::number::impl::AffixPatternProvider *)((char *)a1 + v3 - 256));
    icu::number::impl::AffixPatternProvider::~AffixPatternProvider((icu::number::impl::AffixPatternProvider *)((char *)a1 + v3 - 264));
    v3 -= 272LL;
  }

  while (v3);
  icu::number::impl::AffixPatternProvider::~AffixPatternProvider(a1);
  icu::UMemory::operator delete(v7);
}

void *icu::number::impl::Modifier::Parameters::Parameters(void *this)
{
  *this = 0LL;
  return this;
}

{
  *this = 0LL;
  return this;
}

uint64_t icu::number::impl::Modifier::Parameters::Parameters(uint64_t result, uint64_t a2, int a3, int a4)
{
  *(void *)uint64_t result = a2;
  *(_DWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 12) = a4;
  return result;
}

{
  *(void *)uint64_t result = a2;
  *(_DWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 12) = a4;
  return result;
}

void icu::number::impl::AdoptingSignumModifierStore::~AdoptingSignumModifierStore( icu::number::impl::AdoptingSignumModifierStore *this)
{
  *(void *)this = off_189727AD0;
  for (uint64_t i = 8LL; i != 40; i += 8LL)
  {
    uint64_t v3 = *(void *)((char *)this + i);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
  }

{
  uint64_t i;
  uint64_t v3;
  *(void *)this = off_189727AD0;
  for (uint64_t i = 8LL; i != 40; i += 8LL)
  {
    uint64_t v3 = *(void *)((char *)this + i);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
  }

{
  uint64_t i;
  uint64_t v3;
  *(void *)this = off_189727AD0;
  for (uint64_t i = 8LL; i != 40; i += 8LL)
  {
    uint64_t v3 = *(void *)((char *)this + i);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
  }

  icu::UMemory::operator delete(this);
}

uint64_t icu::number::impl::AdoptingSignumModifierStore::operator=(uint64_t result, uint64_t a2)
{
  for (uint64_t i = 8LL; i != 40; i += 8LL)
  {
    *(void *)(result + i) = *(void *)(a2 + i);
    *(void *)(a2 + i) = 0LL;
  }

  return result;
}

uint64_t icu::number::impl::ConstantAffixModifier::apply( icu::number::impl::ConstantAffixModifier *this, icu::FormattedStringBuilder *a2, int a3, int a4, UErrorCode *a5)
{
  int v9 = icu::FormattedStringBuilder::insert(a2, a4, (uint64_t)this + 80, *((_BYTE *)this + 144), 0, a5);
}

uint64_t icu::number::impl::ConstantAffixModifier::getPrefixLength( icu::number::impl::ConstantAffixModifier *this)
{
  else {
    return *((unsigned __int16 *)this + 12) >> 5;
  }
}

uint64_t icu::number::impl::ConstantAffixModifier::getCodePointCount( icu::number::impl::ConstantAffixModifier *this)
{
  int v2 = icu::UnicodeString::countChar32((icu::number::impl::ConstantAffixModifier *)((char *)this + 16), 0, 0x7FFFFFFF);
  return icu::UnicodeString::countChar32( (icu::number::impl::ConstantAffixModifier *)((char *)this + 80),  0,  0x7FFFFFFF)
       + v2;
}

uint64_t icu::number::impl::ConstantAffixModifier::isStrong(icu::number::impl::ConstantAffixModifier *this)
{
  return *((unsigned __int8 *)this + 145);
}

void icu::number::impl::ConstantAffixModifier::containsField()
{
}

void icu::number::impl::ConstantAffixModifier::getParameters( icu::number::impl::ConstantAffixModifier *this, icu::number::impl::Modifier::Parameters *a2)
{
}

uint64_t icu::number::impl::ConstantAffixModifier::semanticallyEquivalent( icu::number::impl::ConstantAffixModifier *this, const icu::number::impl::Modifier *lpsrc)
{
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  unsigned int v5 = *((unsigned __int16 *)this + 12);
  if ((v5 & 1) != 0)
  {
    if ((*(_WORD *)(result + 24) & 1) == 0) {
      return 0LL;
    }
  }

  else
  {
    if ((v5 & 0x8000) != 0) {
      int v6 = *((_DWORD *)this + 7);
    }
    else {
      int v6 = v5 >> 5;
    }
    uint64_t result = 0LL;
    unsigned int v7 = *(unsigned __int16 *)(v4 + 24);
    if ((v7 & 0x8000u) == 0) {
      unsigned int v8 = v7 >> 5;
    }
    else {
      unsigned int v8 = *(_DWORD *)(v4 + 28);
    }
    if ((v7 & 1) != 0) {
      return result;
    }
    if (v6 != v8) {
      return result;
    }
    uint64_t result = icu::UnicodeString::doEquals( (icu::number::impl::ConstantAffixModifier *)((char *)this + 16),  (const icu::UnicodeString *)(v4 + 16),  v6);
    if (!(_DWORD)result) {
      return result;
    }
  }

  unsigned int v9 = *((unsigned __int16 *)this + 44);
  if ((v9 & 1) != 0)
  {
    if ((*(_WORD *)(v4 + 88) & 1) != 0) {
      goto LABEL_26;
    }
    return 0LL;
  }

  if ((v9 & 0x8000) != 0) {
    int v10 = *((_DWORD *)this + 23);
  }
  else {
    int v10 = v9 >> 5;
  }
  uint64_t result = 0LL;
  unsigned int v11 = *(unsigned __int16 *)(v4 + 88);
  if ((v11 & 0x8000u) == 0) {
    unsigned int v12 = v11 >> 5;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v4 + 92);
  }
  if ((v11 & 1) == 0 && v10 == v12)
  {
    uint64_t result = icu::UnicodeString::doEquals( (icu::number::impl::ConstantAffixModifier *)((char *)this + 80),  (const icu::UnicodeString *)(v4 + 80),  v10);
    if ((_DWORD)result)
    {
LABEL_26:
      return 0LL;
    }
  }

  return result;
}

uint64_t icu::number::impl::SimpleModifier::SimpleModifier( uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  return icu::number::impl::SimpleModifier::SimpleModifier(a1, a2, a3, a4, 0LL, a6);
}

{
  unsigned int v11;
  _WORD *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  *(void *)a1 = off_189727B38;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 8), (UChar **)(a2 + 8));
  *(_BYTE *)(a1 + 72) = a3;
  *(_BYTE *)(a1 + 73) = a4;
  *(void *)(a1 + 88) = a5;
  *(void *)(a1 + 96) = a6;
  unsigned int v11 = *(unsigned __int16 *)(a1 + 16);
  if ((v11 & 0x11) != 0)
  {
    unsigned int v12 = 0LL;
  }

  else if ((v11 & 2) != 0)
  {
    unsigned int v12 = (_WORD *)(a1 + 18);
  }

  else
  {
    unsigned int v12 = *(_WORD **)(a1 + 32);
  }

  unsigned __int16 v13 = v11 >> 5;
  if ((v11 & 0x8000) != 0)
  {
    if (!*(_DWORD *)(a1 + 20)) {
      goto LABEL_13;
    }
  }

  else if (!v13)
  {
    goto LABEL_13;
  }

  if (*v12)
  {
    if ((v11 & 0x8000) != 0) {
      int v14 = *(_DWORD *)(a1 + 20);
    }
    else {
      int v14 = v11 >> 5;
    }
    if (v14 < 2 || ((v11 & 2) != 0 ? (__int128 v18 = a1 + 18) : (__int128 v18 = *(void *)(a1 + 32)), *(_WORD *)(v18 + 2)))
    {
      if ((v11 & 0x8000) != 0) {
        __int128 v19 = *(_DWORD *)(a1 + 20);
      }
      else {
        __int128 v19 = v11 >> 5;
      }
      if (v19 < 2)
      {
        uint64_t v21 = 0xFFFF;
      }

      else
      {
        if ((v11 & 2) != 0) {
          uint64_t v20 = a1 + 18;
        }
        else {
          uint64_t v20 = *(void *)(a1 + 32);
        }
        uint64_t v21 = *(unsigned __int16 *)(v20 + 2);
      }

      *(_DWORD *)(a1 + 76) = v21 - 256;
      uint64_t v22 = v21 - 253;
      uint64_t v23 = v21 - 253;
    }

    else
    {
      *(_DWORD *)(a1 + 76) = 0;
      uint64_t v23 = 2;
      uint64_t v22 = 3;
    }

    *(_DWORD *)(a1 + 80) = v23;
    if ((v11 & 0x8000) != 0)
    {
      unsigned __int16 v13 = *(_DWORD *)(a1 + 20);
      if (v22 < (int)v13)
      {
LABEL_40:
        if (v13 <= v23)
        {
          __int128 v17 = 65279;
        }

        else
        {
          if ((v11 & 2) != 0) {
            BOOL v24 = a1 + 18;
          }
          else {
            BOOL v24 = *(void *)(a1 + 32);
          }
          __int128 v17 = *(unsigned __int16 *)(v24 + 2LL * v23) - 256;
        }

        goto LABEL_49;
      }
    }

    else if (v22 < (int)(v11 >> 5))
    {
      goto LABEL_40;
    }

    __int128 v17 = 0;
    goto LABEL_49;
  }

{
  return icu::number::impl::SimpleModifier::SimpleModifier(a1, a2, a3, a4, 0LL, a6);
}

{
  return icu::number::impl::SimpleModifier::SimpleModifier(a1, a2, a3, a4, a5, a6);
}

double icu::number::impl::SimpleModifier::SimpleModifier(icu::number::impl::SimpleModifier *this)
{
  *(void *)this = off_189727B38;
  *((void *)this + 1) = off_18971B688;
  *((_WORD *)this + 8) = 2;
  *((_WORD *)this + 36) = 0;
  double result = NAN;
  *(void *)((char *)this + 76) = 0xFFFFFFFF00000000LL;
  *((_DWORD *)this + 21) = 0;
  *((void *)this + 11) = 0LL;
  return result;
}

{
  double result;
  *(void *)this = off_189727B38;
  *((void *)this + 1) = off_18971B688;
  *((_WORD *)this + 8) = 2;
  *((_WORD *)this + 36) = 0;
  double result = NAN;
  *(void *)((char *)this + 76) = 0xFFFFFFFF00000000LL;
  *((_DWORD *)this + 21) = 0;
  *((void *)this + 11) = 0LL;
  return result;
}

uint64_t icu::number::impl::SimpleModifier::formatAsPrefixSuffix( icu::number::impl::SimpleModifier *this, icu::FormattedStringBuilder *a2, int a3, int a4, UErrorCode *a5)
{
  int v9 = *((_DWORD *)this + 19);
  if (*((_DWORD *)this + 20) == -1 && *((_DWORD *)this + 21) + v9 >= 1) {
    return icu::FormattedStringBuilder::splice(a2, a3, a4, (uint64_t)this + 8, 2u, v9 + 2, *((_BYTE *)this + 72), a5);
  }
  if (v9 >= 1)
  {
    icu::FormattedStringBuilder::insert(a2, a3, (uint64_t)this + 8, 2u, v9 + 2, *((_BYTE *)this + 72), 0, a5);
    int v9 = *((_DWORD *)this + 19);
  }

  int v10 = *((_DWORD *)this + 21);
  if (v10 >= 1)
  {
    icu::FormattedStringBuilder::insert( a2,  v9 + a4,  (uint64_t)this + 8,  *((_DWORD *)this + 20) + 1,  *((_DWORD *)this + 20) + 1 + v10,  *((_BYTE *)this + 72),  0,  a5);
    int v9 = *((_DWORD *)this + 19);
    int v10 = *((_DWORD *)this + 21);
  }

  return (v10 + v9);
}

uint64_t icu::number::impl::SimpleModifier::getPrefixLength(icu::number::impl::SimpleModifier *this)
{
  return *((unsigned int *)this + 19);
}

uint64_t icu::number::impl::SimpleModifier::getCodePointCount(icu::number::impl::SimpleModifier *this)
{
  int32_t v2 = *((_DWORD *)this + 19);
  if (v2 < 1) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = icu::UnicodeString::countChar32((icu::number::impl::SimpleModifier *)((char *)this + 8), 2, v2);
  }
  int32_t v4 = *((_DWORD *)this + 21);
  if (v4 >= 1) {
    return icu::UnicodeString::countChar32( (icu::number::impl::SimpleModifier *)((char *)this + 8),  *((_DWORD *)this + 20) + 1,  v4)
  }
         + v3;
  return v3;
}

uint64_t icu::number::impl::SimpleModifier::isStrong(icu::number::impl::SimpleModifier *this)
{
  return *((unsigned __int8 *)this + 73);
}

void icu::number::impl::SimpleModifier::containsField()
{
}

__n128 icu::number::impl::SimpleModifier::getParameters(icu::number::impl::SimpleModifier *this, __n128 *a2)
{
  __n128 result = *(__n128 *)((char *)this + 88);
  *a2 = result;
  return result;
}

uint64_t icu::number::impl::SimpleModifier::semanticallyEquivalent( icu::number::impl::SimpleModifier *this, const icu::number::impl::Modifier *lpsrc)
{
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *((void *)this + 11);
    if (v5) {
      return v5 == *(void *)(result + 88);
    }
    unsigned int v7 = *((unsigned __int16 *)this + 8);
    if ((v7 & 1) != 0)
    {
      if ((*(_WORD *)(result + 16) & 1) == 0) {
        return 0LL;
      }
      goto LABEL_19;
    }

    if ((v7 & 0x8000) != 0) {
      int v8 = *((_DWORD *)this + 5);
    }
    else {
      int v8 = v7 >> 5;
    }
    uint64_t result = 0LL;
    unsigned int v9 = *(unsigned __int16 *)(v4 + 16);
    if ((v9 & 0x8000u) == 0) {
      unsigned int v10 = v9 >> 5;
    }
    else {
      unsigned int v10 = *(_DWORD *)(v4 + 20);
    }
    if ((v9 & 1) == 0 && v8 == v10)
    {
      uint64_t result = icu::UnicodeString::doEquals( (icu::number::impl::SimpleModifier *)((char *)this + 8),  (const icu::UnicodeString *)(v4 + 8),  v8);
      if ((_DWORD)result)
      {
LABEL_19:
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t icu::number::impl::SimpleModifier::formatTwoArgPattern( uint64_t a1, icu::FormattedStringBuilder *a2, int a3, _DWORD *a4, int *a5, char a6, UErrorCode *a7)
{
  unsigned int v14 = *(unsigned __int16 *)(a1 + 16);
  if ((v14 & 0x11) != 0)
  {
    uint64_t v15 = 0LL;
  }

  else if ((v14 & 2) != 0)
  {
    uint64_t v15 = (_WORD *)(a1 + 18);
  }

  else
  {
    uint64_t v15 = *(_WORD **)(a1 + 32);
  }

  unsigned int v16 = v14 >> 5;
  unsigned int v17 = *(_DWORD *)(a1 + 20);
  if ((v14 & 0x8000u) == 0) {
    unsigned int v18 = v14 >> 5;
  }
  else {
    unsigned int v18 = *(_DWORD *)(a1 + 20);
  }
  if (v18 && *v15 == 2)
  {
    uint64_t v33 = a1 + 8;
    if (v18 < 2)
    {
      unsigned int v20 = 0xFFFF;
    }

    else
    {
      uint64_t v19 = a1 + 18;
      if ((v14 & 2) == 0) {
        uint64_t v19 = *(void *)(a1 + 32);
      }
      unsigned int v20 = *(unsigned __int16 *)(v19 + 2);
      if (v20 < 0x100)
      {
        uint64_t v21 = 0LL;
        unsigned int v22 = 2;
        goto LABEL_19;
      }
    }

    uint64_t v21 = v20 - 256;
    icu::FormattedStringBuilder::insert(a2, a3, a1 + 8, 2u, v20 - 254, a6, 0, a7);
    unsigned int v22 = v20 - 253;
    unsigned int v14 = *(unsigned __int16 *)(a1 + 16);
    unsigned int v17 = *(_DWORD *)(a1 + 20);
    unsigned int v16 = v14 >> 5;
LABEL_19:
    if ((v14 & 0x8000u) == 0) {
      unsigned int v17 = v16;
    }
    if (v17 <= v22)
    {
      unsigned int v26 = v22 + 1;
      unsigned int v25 = 0xFFFF;
    }

    else
    {
      uint64_t v24 = a1 + 18;
      if ((v14 & 2) == 0) {
        uint64_t v24 = *(void *)(a1 + 32);
      }
      unsigned int v25 = *(unsigned __int16 *)(v24 + 2LL * v22);
      unsigned int v26 = v22 + 1;
      uint64_t v23 = v21;
      if (v25 < 0x100)
      {
        if ((v14 & 0x8000) == 0) {
          goto LABEL_26;
        }
        goto LABEL_30;
      }
    }

    unsigned int v28 = v25 - 256;
    int v29 = v25 - 256 + v26;
    icu::FormattedStringBuilder::insert(a2, v21 + a3, v33, v26, v29, a6, 0, a7);
    uint64_t v23 = v28 + v21;
    unsigned int v26 = v29 + 1;
    unsigned int v14 = *(unsigned __int16 *)(a1 + 16);
    if ((v14 & 0x8000) == 0)
    {
LABEL_26:
      if (v26 != v14 >> 5)
      {
        unsigned int v27 = v14 >> 5;
LABEL_32:
        if (v27 <= v26)
        {
          int v30 = 65279;
        }

        else
        {
          if ((v14 & 2) != 0) {
            uint64_t v31 = a1 + 18;
          }
          else {
            uint64_t v31 = *(void *)(a1 + 32);
          }
          int v30 = *(unsigned __int16 *)(v31 + 2LL * v26) - 256;
        }

        icu::FormattedStringBuilder::insert(a2, v23 + a3, v33, v26 + 1, v30 + v26 + 1, a6, 0, a7);
        uint64_t v23 = (v30 + v23);
        goto LABEL_39;
      }

uint64_t icu::number::impl::ConstantMultiFieldModifier::apply( icu::number::impl::ConstantMultiFieldModifier *this, icu::FormattedStringBuilder *a2, int a3, int a4, UErrorCode *a5)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  int v10 = icu::FormattedStringBuilder::insert( a2,  a3,  (icu::number::impl::ConstantMultiFieldModifier *)((char *)this + 8),  a5);
  int v11 = v10;
  if (*((_BYTE *)this + 280))
  {
    unsigned int v14 = off_18971B688;
    __int16 v15 = 2;
    int v11 = icu::FormattedStringBuilder::splice(a2, v10 + a3, v10 + a4, (uint64_t)&v14, 0, 0, 0, a5) + v10;
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v14);
  }

  return icu::FormattedStringBuilder::insert( a2,  v11 + a4,  (icu::number::impl::ConstantMultiFieldModifier *)((char *)this + 144),  a5)
       + v11;
}

uint64_t icu::number::impl::ConstantMultiFieldModifier::getPrefixLength( icu::number::impl::ConstantMultiFieldModifier *this)
{
  return icu::FormattedStringBuilder::length((icu::number::impl::ConstantMultiFieldModifier *)((char *)this + 8));
}

uint64_t icu::number::impl::ConstantMultiFieldModifier::getCodePointCount( icu::number::impl::ConstantMultiFieldModifier *this)
{
  int v2 = icu::FormattedStringBuilder::codePointCount((icu::number::impl::ConstantMultiFieldModifier *)((char *)this + 8));
}

uint64_t icu::number::impl::ConstantMultiFieldModifier::isStrong( icu::number::impl::ConstantMultiFieldModifier *this)
{
  return *((unsigned __int8 *)this + 281);
}

BOOL icu::number::impl::ConstantMultiFieldModifier::containsField(uint64_t a1, unsigned __int8 a2)
{
  return icu::FormattedStringBuilder::containsField(a1 + 8, a2)
      || icu::FormattedStringBuilder::containsField(a1 + 144, a2);
}

__n128 icu::number::impl::ConstantMultiFieldModifier::getParameters(__n128 *this, __n128 *a2)
{
  __n128 result = this[18];
  *a2 = result;
  return result;
}

uint64_t icu::number::impl::ConstantMultiFieldModifier::semanticallyEquivalent( icu::number::impl::ConstantMultiFieldModifier *this, const icu::number::impl::Modifier *lpsrc)
{
  if (result)
  {
    uint64_t v4 = (unsigned __int8 *)result;
    uint64_t v5 = *((void *)this + 36);
    if (v5) {
      return v5 == *(void *)(result + 288);
    }
    uint64_t result = icu::FormattedStringBuilder::contentEquals( (icu::number::impl::ConstantMultiFieldModifier *)((char *)this + 8),  (const icu::FormattedStringBuilder *)(result + 8));
    if ((_DWORD)result)
    {
      uint64_t result = icu::FormattedStringBuilder::contentEquals( (icu::number::impl::ConstantMultiFieldModifier *)((char *)this + 144),  (const icu::FormattedStringBuilder *)(v4 + 144));
      if ((_DWORD)result)
      {
        return *((unsigned __int8 *)this + 281) == v4[281];
      }
    }
  }

  return result;
}

icu::number::impl::CurrencySpacingEnabledModifier *icu::number::impl::CurrencySpacingEnabledModifier::CurrencySpacingEnabledModifier( icu::number::impl::CurrencySpacingEnabledModifier *this, const icu::FormattedStringBuilder *a2, const icu::FormattedStringBuilder *a3, char a4, char a5, const icu::DecimalFormatSymbols *a6, UErrorCode *a7)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  *(void *)this = off_189727D30;
  icu::FormattedStringBuilder::FormattedStringBuilder((uint64_t)this + 8, (uint64_t)a2);
  icu::FormattedStringBuilder::FormattedStringBuilder((uint64_t)this + 144, (uint64_t)a3);
  *((_BYTE *)this + 280) = a4;
  *((_BYTE *)this + 281) = a5;
  *((void *)this + 36) = 0LL;
  *(void *)this = off_189727C00;
  icu::UnicodeSet::UnicodeSet((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 304));
  *((void *)this + 63) = off_18971B688;
  *((_WORD *)this + 256) = 2;
  icu::UnicodeSet::UnicodeSet((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 568));
  unsigned int v28 = (icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 768);
  *((void *)this + 96) = off_18971B688;
  *((_WORD *)this + 388) = 2;
  int v14 = icu::FormattedStringBuilder::length(a2);
  __int16 v15 = (char *)a2 + 88;
  if (*(_BYTE *)a2) {
    __int16 v15 = (char *)*((void *)a2 + 11);
  }
  if (v15[*((int *)a2 + 32) - 1 + (uint64_t)v14] == 39)
  {
    int LastCodePoint = icu::FormattedStringBuilder::getLastCodePoint(a2);
    uint64_t v41 = 0LL;
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    icu::number::impl::CurrencySpacingEnabledModifier::getUnicodeSet((uint64_t)a6, 0, 0, a7, (icu::UnicodeSet *)&v29);
    if (icu::UnicodeSet::contains((icu::UnicodeSet *)&v29, LastCodePoint))
    {
      icu::number::impl::CurrencySpacingEnabledModifier::getUnicodeSet((uint64_t)a6, 1, 0, a7, (icu::UnicodeSet *)v42);
      icu::UnicodeSet::operator=( (icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 304),  (const icu::UnicodeSet *)v42);
      icu::UnicodeSet::~UnicodeSet(v17, (icu::UnicodeSet *)v42);
      icu::UnicodeSet::freeze((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 304));
      PatternForCurrencySpacing = (UChar **)icu::DecimalFormatSymbols::getPatternForCurrencySpacing( (uint64_t)a6,  2,  0,  (int *)a7);
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v42, PatternForCurrencySpacing);
      icu::UnicodeString::operator=( (icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 504),  (icu::UnicodeString *)v42);
      icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v42);
    }

    else
    {
      icu::UnicodeSet::setToBogus((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 304));
      icu::UnicodeString::setToBogus((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 504));
    }

    icu::UnicodeSet::~UnicodeSet(v20, (icu::UnicodeSet *)&v29);
  }

  else
  {
LABEL_7:
    icu::UnicodeSet::setToBogus((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 304));
    icu::UnicodeString::setToBogus((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 504));
  }

  if ((int)icu::FormattedStringBuilder::length(a3) >= 1
    && (*(_BYTE *)a3 ? (uint64_t v21 = (char *)*((void *)a3 + 11)) : (uint64_t v21 = (char *)a3 + 88), v21[*((int *)a3 + 32)] == 39))
  {
    int FirstCodePoint = icu::FormattedStringBuilder::getFirstCodePoint(a3);
    uint64_t v41 = 0LL;
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    icu::number::impl::CurrencySpacingEnabledModifier::getUnicodeSet((uint64_t)a6, 0, 1, a7, (icu::UnicodeSet *)&v29);
    if (icu::UnicodeSet::contains((icu::UnicodeSet *)&v29, FirstCodePoint))
    {
      icu::number::impl::CurrencySpacingEnabledModifier::getUnicodeSet((uint64_t)a6, 1, 1, a7, (icu::UnicodeSet *)v42);
      icu::UnicodeSet::operator=( (icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 568),  (const icu::UnicodeSet *)v42);
      icu::UnicodeSet::~UnicodeSet(v23, (icu::UnicodeSet *)v42);
      icu::UnicodeSet::freeze((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 568));
      uint64_t v24 = (UChar **)icu::DecimalFormatSymbols::getPatternForCurrencySpacing((uint64_t)a6, 2, 1, (int *)a7);
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v42, v24);
      icu::UnicodeString::operator=(v28, (icu::UnicodeString *)v42);
      icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)v42);
    }

    else
    {
      icu::UnicodeSet::setToBogus((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 568));
      icu::UnicodeString::setToBogus(v28);
    }

    icu::UnicodeSet::~UnicodeSet(v26, (icu::UnicodeSet *)&v29);
  }

  else
  {
    icu::UnicodeSet::setToBogus((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 568));
    icu::UnicodeString::setToBogus(v28);
  }

  return this;
}

void icu::number::impl::CurrencySpacingEnabledModifier::getUnicodeSet( uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, UErrorCode *a4@<X3>, icu::UnicodeSet *a5@<X8>)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  unsigned int v10 = atomic_load(&dword_18C5356C0);
  if (v10 != 2 && icu::umtx_initImplPreInit(&dword_18C5356C0))
  {
    sub_1809B36C0(2u, (uint64_t)sub_1809324A8);
    unsigned __int16 v13 = icu::UMemory::operator new(v12, (icu::UMemory *)0xC8, v11);
    if (v13)
    {
      uint64_t v16 = (icu::UnicodeSet *)v13;
      icu::UnicodeString::UnicodeString((uint64_t)v33, (uint64_t)&unk_180A47C16);
      icu::UnicodeSet::UnicodeSet(v16, (const icu::UnicodeString *)v33, a4);
      qword_18C5356B0 = (uint64_t)v16;
      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v33);
    }

    else
    {
      qword_18C5356B0 = 0LL;
    }

    unsigned int v18 = icu::UMemory::operator new(v15, (icu::UMemory *)0xC8, v14);
    if (v18)
    {
      uint64_t v19 = (icu::UnicodeSet *)v18;
      icu::UnicodeString::UnicodeString((uint64_t)v33, (uint64_t)L"[[:^S:]&[:^Z:]]");
      icu::UnicodeSet::UnicodeSet(v19, (const icu::UnicodeString *)v33, a4);
      qword_18C5356B8 = (uint64_t)v19;
      icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v33);
      if (qword_18C5356B0 && qword_18C5356B8)
      {
        icu::UnicodeSet::freeze((icu::UnicodeSet *)qword_18C5356B0);
        icu::UnicodeSet::freeze((icu::UnicodeSet *)qword_18C5356B8);
        UErrorCode v21 = *a4;
LABEL_15:
        dword_18C5356C4 = v21;
        icu::umtx_initImplPostInit(&dword_18C5356C0);
        goto LABEL_16;
      }
    }

    else
    {
      qword_18C5356B8 = 0LL;
    }

    UErrorCode v21 = U_MEMORY_ALLOCATION_ERROR;
    *a4 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_15;
  }

  if (dword_18C5356C4 >= 1)
  {
    *a4 = dword_18C5356C4;
LABEL_17:
    icu::UnicodeSet::UnicodeSet(a5);
    return;
  }

icu::UnicodeString *icu::number::impl::CurrencySpacingEnabledModifier::getInsertString@<X0>( uint64_t a1@<X0>, int a2@<W1>, int *a3@<X2>, icu::UnicodeString *a4@<X8>)
{
  uint64_t PatternForCurrencySpacing = (UChar **)icu::DecimalFormatSymbols::getPatternForCurrencySpacing(a1, 2, a2 == 1, a3);
  return icu::UnicodeString::UnicodeString(a4, PatternForCurrencySpacing);
}

uint64_t icu::number::impl::CurrencySpacingEnabledModifier::apply( icu::number::impl::CurrencySpacingEnabledModifier *this, icu::FormattedStringBuilder *a2, int a3, int a4, UErrorCode *a5)
{
  if (a4 <= a3)
  {
    int v11 = 0;
  }

  else
  {
    if ((*((_BYTE *)this + 336) & 1) != 0
      || (int v10 = icu::FormattedStringBuilder::codePointAt(a2, a3),
          !icu::UnicodeSet::contains( (icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 304),  v10)))
    {
      int v11 = 0;
    }

    else
    {
      int v11 = icu::FormattedStringBuilder::insert(a2, a3, (uint64_t)this + 504, 0, 0, a5);
    }

    if ((*((_BYTE *)this + 600) & 1) == 0)
    {
      int v12 = icu::FormattedStringBuilder::codePointBefore(a2, a4);
      if (icu::UnicodeSet::contains( (icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 568),  v12)) {
        v11 += icu::FormattedStringBuilder::insert(a2, v11 + a4, (uint64_t)this + 768, 0, 0, a5);
      }
    }
  }

  return icu::number::impl::ConstantMultiFieldModifier::apply(this, a2, a3, v11 + a4, a5) + v11;
}

uint64_t icu::number::impl::CurrencySpacingEnabledModifier::applyCurrencySpacing( icu::number::impl::CurrencySpacingEnabledModifier *this, icu::FormattedStringBuilder *a2, int a3, int a4, int a5, uint64_t a6, UErrorCode *a7, UErrorCode *a8)
{
  uint64_t v13 = 0LL;
  int v14 = a3 + (_DWORD)a2;
  int v15 = a4 - v14;
  if (a3 >= 1 && v15 >= 1) {
    uint64_t v13 = icu::number::impl::CurrencySpacingEnabledModifier::applyCurrencySpacingAffix(this, v14, 0, a6, a7);
  }
  if (a5 >= 1 && v15 >= 1) {
    return icu::number::impl::CurrencySpacingEnabledModifier::applyCurrencySpacingAffix( this,  (int)v13 + a4,  1,  a6,  a7)
  }
         + v13;
  return v13;
}

uint64_t icu::number::impl::CurrencySpacingEnabledModifier::applyCurrencySpacingAffix( icu::FormattedStringBuilder *this, int a2, int a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  if (!a3)
  {
    int v12 = (char *)this + 88;
    if (*(_BYTE *)this) {
      int v12 = (char *)*((void *)this + 11);
    }
    if (v12[*((int *)this + 32) - 1 + (uint64_t)a2] == 39)
    {
      int v11 = icu::FormattedStringBuilder::codePointBefore(this, a2);
      goto LABEL_11;
    }

    return 0LL;
  }

  if (*(_BYTE *)this) {
    int v10 = (char *)*((void *)this + 11);
  }
  else {
    int v10 = (char *)this + 88;
  }
  int v11 = icu::FormattedStringBuilder::codePointAt(this, a2);
LABEL_11:
  int v13 = v11;
  uint64_t v25 = 0LL;
  memset(v24, 0, sizeof(v24));
  icu::number::impl::CurrencySpacingEnabledModifier::getUnicodeSet(a4, 0, a3, a5, (icu::UnicodeSet *)v24);
  if (icu::UnicodeSet::contains((icu::UnicodeSet *)v24, v13))
  {
    if (a3) {
      int v15 = icu::FormattedStringBuilder::codePointBefore(this, a2);
    }
    else {
      int v15 = icu::FormattedStringBuilder::codePointAt(this, a2);
    }
    int v17 = v15;
    uint64_t v23 = 0LL;
    memset(v22, 0, sizeof(v22));
    icu::number::impl::CurrencySpacingEnabledModifier::getUnicodeSet(a4, 1, a3, a5, (icu::UnicodeSet *)v22);
    if (icu::UnicodeSet::contains((icu::UnicodeSet *)v22, v17))
    {
      memset(v26, 0, sizeof(v26));
      uint64_t PatternForCurrencySpacing = (UChar **)icu::DecimalFormatSymbols::getPatternForCurrencySpacing( a4,  2,  a3 == 1,  (int *)a5);
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v26, PatternForCurrencySpacing);
      uint64_t v16 = icu::FormattedStringBuilder::insert(this, a2, (uint64_t)v26, 0, 0, a5);
      icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v26);
    }

    else
    {
      uint64_t v16 = 0LL;
    }

    icu::UnicodeSet::~UnicodeSet(v18, (icu::UnicodeSet *)v22);
  }

  else
  {
    uint64_t v16 = 0LL;
  }

  icu::UnicodeSet::~UnicodeSet(v14, (icu::UnicodeSet *)v24);
  return v16;
}

void *sub_180932184(void *a1)
{
  *a1 = off_189727CB0;
  int v2 = (icu::UnicodeString *)(a1 + 2);
  a1[1] = &unk_189727D08;
  uint64_t v3 = (icu::UObject *)(a1 + 1);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 10));
  icu::UnicodeString::~UnicodeString(v2);
  icu::UObject::~UObject(v3);
  return a1;
}

void sub_1809321E0(void *a1)
{
  *a1 = off_189727CB0;
  int v2 = (icu::UnicodeString *)(a1 + 2);
  a1[1] = &unk_189727D08;
  uint64_t v3 = (icu::UObject *)(a1 + 1);
  icu::UnicodeString::~UnicodeString(&unk_189727D08, (icu::UnicodeString *)(a1 + 10));
  icu::UnicodeString::~UnicodeString(v4, v2);
  icu::UObject::~UObject(v3);
  icu::UMemory::operator delete(a1);
}

void sub_18093223C(uint64_t a1)
{
  *(void *)(a1 - 8) = off_189727CB0;
  *(void *)a1 = &unk_189727D08;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 72));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 8));
  icu::UObject::~UObject((icu::UObject *)a1);
}

void sub_18093227C(uint64_t a1)
{
  *(void *)(a1 - 8) = off_189727CB0;
  int v2 = (void *)(a1 - 8);
  *(void *)a1 = &unk_189727D08;
  uint64_t v3 = (icu::UnicodeString *)(a1 + 8);
  icu::UnicodeString::~UnicodeString(&unk_189727D08, (icu::UnicodeString *)(a1 + 72));
  icu::UnicodeString::~UnicodeString(v4, v3);
  icu::UObject::~UObject((icu::UObject *)a1);
  icu::UMemory::operator delete(v2);
}

void *sub_1809322D8(void *a1)
{
  *a1 = off_189727D30;
  int v2 = (icu::FormattedStringBuilder *)(a1 + 1);
  icu::FormattedStringBuilder::~FormattedStringBuilder((icu::FormattedStringBuilder *)(a1 + 18));
  icu::FormattedStringBuilder::~FormattedStringBuilder(v2);
  return a1;
}

void sub_180932318(void *a1)
{
  *a1 = off_189727D30;
  int v2 = (icu::FormattedStringBuilder *)(a1 + 1);
  icu::FormattedStringBuilder::~FormattedStringBuilder((icu::FormattedStringBuilder *)(a1 + 18));
  icu::FormattedStringBuilder::~FormattedStringBuilder(v2);
  icu::UMemory::operator delete(a1);
}

void *sub_180932358(void *a1)
{
  *a1 = off_189727B38;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 1));
  return a1;
}

void sub_180932388(void *a1)
{
  *a1 = off_189727B38;
  icu::UnicodeString::~UnicodeString(off_189727B38, (icu::UnicodeString *)(a1 + 1));
  icu::UMemory::operator delete(a1);
}

void *sub_1809323B8(void *a1)
{
  *a1 = off_189727C00;
  int v2 = (icu::FormattedStringBuilder *)(a1 + 18);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 96));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 71));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 63));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 38));
  *a1 = off_189727D30;
  icu::FormattedStringBuilder::~FormattedStringBuilder(v2);
  icu::FormattedStringBuilder::~FormattedStringBuilder((icu::FormattedStringBuilder *)(a1 + 1));
  return a1;
}

void sub_180932430(void *a1)
{
  *a1 = off_189727C00;
  int v2 = (icu::FormattedStringBuilder *)(a1 + 18);
  icu::UnicodeString::~UnicodeString(off_189727C00, (icu::UnicodeString *)(a1 + 96));
  icu::UnicodeSet::~UnicodeSet(v3, (icu::UnicodeSet *)(a1 + 71));
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + 63));
  icu::UnicodeSet::~UnicodeSet(v5, (icu::UnicodeSet *)(a1 + 38));
  *a1 = off_189727D30;
  icu::FormattedStringBuilder::~FormattedStringBuilder(v2);
  icu::FormattedStringBuilder::~FormattedStringBuilder((icu::FormattedStringBuilder *)(a1 + 1));
  icu::UMemory::operator delete(a1);
}

uint64_t sub_1809324A8@<X0>(void *a1@<X8>)
{
  if (qword_18C5356B0)
  {
    v1 = icu::UnicodeSet::~UnicodeSet(a1, (icu::UnicodeSet *)qword_18C5356B0);
    icu::UMemory::operator delete(v1);
  }

  qword_18C5356B0 = 0LL;
  if (qword_18C5356B8)
  {
    int v2 = icu::UnicodeSet::~UnicodeSet(a1, (icu::UnicodeSet *)qword_18C5356B8);
    icu::UMemory::operator delete(v2);
  }

  qword_18C5356B8 = 0LL;
  atomic_store(0, &dword_18C5356C0);
  return 1LL;
}

icu::number::Scale *icu::number::Scale::Scale( icu::number::Scale *this, int a2, icu::number::impl::DecNum *a3)
{
  *(_DWORD *)this = a2;
  *((void *)this + 1) = a3;
  *((_DWORD *)this + 4) = 0;
  if (a3)
  {
    icu::number::impl::DecNum::normalize(a3);
    uint64_t v4 = (icu::number::impl::DecNum *)*((void *)this + 1);
    if (**(_DWORD **)v4 == 1
      && *(_BYTE *)(*(void *)v4 + 9LL) == 1
      && (icu::number::impl::DecNum::isNegative(v4) & 1) == 0)
    {
      uint64_t v5 = (_BYTE *)*((void *)this + 1);
      int v6 = *(void **)v5;
      *(_DWORD *)this += *(_DWORD *)(*(void *)v5 + 4LL);
      if (v5[12]) {
        uprv_free(v6);
      }
      icu::UMemory::operator delete(v5);
      *((void *)this + 1) = 0LL;
    }
  }

  return this;
}

icu::number::Scale *icu::number::Scale::Scale(icu::number::Scale *this, const icu::number::Scale *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  *((void *)this + 1) = 0LL;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  if (*((void *)a2 + 1))
  {
    UErrorCode v6 = U_ZERO_ERROR;
    uint64_t v4 = (icu::number::impl::DecNum *)icu::UMemory::operator new((icu::UMemory *)0x60, (unint64_t)a2);
    if (v4) {
      uint64_t v4 = (icu::number::impl::DecNum *)icu::number::impl::DecNum::DecNum( v4,  *((const icu::number::impl::DecNum **)a2 + 1),  &v6);
    }
    *((void *)this + 1) = v4;
  }

  return this;
}

uint64_t icu::number::Scale::operator=(uint64_t a1, unint64_t a2)
{
  if (a1 != a2)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    if (*(void *)(a2 + 8))
    {
      UErrorCode v6 = U_ZERO_ERROR;
      uint64_t v4 = (icu::number::impl::DecNum *)icu::UMemory::operator new((icu::UMemory *)0x60, a2);
      if (v4) {
        uint64_t v4 = (icu::number::impl::DecNum *)icu::number::impl::DecNum::DecNum( v4,  *(const icu::number::impl::DecNum **)(a2 + 8),  &v6);
      }
      *(void *)(a1 + 8) = v4;
    }

    else
    {
      *(void *)(a1 + 8) = 0LL;
    }

    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  }

  return a1;
}

uint64_t icu::number::Scale::Scale(uint64_t result, uint64_t a2)
{
  *(_DWORD *)uint64_t result = *(_DWORD *)a2;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a2 + 8) = 0LL;
  return result;
}

{
  *(_DWORD *)uint64_t result = *(_DWORD *)a2;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a2 + 8) = 0LL;
  return result;
}

uint64_t icu::number::Scale::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    if (*(_BYTE *)(v4 + 12)) {
      uprv_free(*(void **)v4);
    }
    icu::UMemory::operator delete((void *)v4);
  }

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a2 + 8) = 0LL;
  return a1;
}

void icu::number::Scale::~Scale(icu::number::Scale *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1)
  {
    if (*(_BYTE *)(v1 + 12)) {
      uprv_free(*(void **)v1);
    }
    icu::UMemory::operator delete((void *)v1);
  }

void icu::number::Scale::none(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = 0LL;
  *(_DWORD *)(a1 + 16) = 0;
}

uint64_t icu::number::Scale::powerOfTen@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = this;
  *(void *)(a2 + 8) = 0LL;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

uint64_t *icu::number::Scale::byDecimal@<X0>(const char *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = a2;
  int v11 = 0;
  UErrorCode v6 = (icu::number::impl::DecNum *)icu::UMemory::operator new((uint64_t *)a3, (icu::UMemory *)0x60, a2);
  if (!v6)
  {
    int v10 = 0LL;
    int v8 = 7;
    int v11 = 7;
    goto LABEL_5;
  }

  unsigned int v7 = v6;
  int v10 = icu::number::impl::DecNum::DecNum(v6);
  icu::number::impl::DecNum::setTo(v10, a1, v3, (UErrorCode *)&v11);
  int v8 = v11;
  if (v11 >= 1)
  {
LABEL_5:
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = 0LL;
    *(_DWORD *)(a3 + 16) = v8;
    return sub_1807DDC3C((uint64_t *)&v10);
  }

  int v10 = 0LL;
  icu::number::Scale::Scale((icu::number::Scale *)a3, 0, v7);
  return sub_1807DDC3C((uint64_t *)&v10);
}

uint64_t *icu::number::Scale::byDouble@<X0>(double a1@<D0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  UErrorCode v11 = U_ZERO_ERROR;
  UErrorCode v6 = (icu::number::impl::DecNum *)icu::UMemory::operator new((uint64_t *)a3, (icu::UMemory *)0x60, a2);
  if (!v6)
  {
    int v10 = 0LL;
    UErrorCode v8 = U_MEMORY_ALLOCATION_ERROR;
    UErrorCode v11 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_5;
  }

  unsigned int v7 = v6;
  int v10 = icu::number::impl::DecNum::DecNum(v6);
  icu::number::impl::DecNum::setTo(v10, a1, &v11);
  UErrorCode v8 = v11;
  if (v11 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
LABEL_5:
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = 0LL;
    *(_DWORD *)(a3 + 16) = v8;
    return sub_1807DDC3C((uint64_t *)&v10);
  }

  int v10 = 0LL;
  icu::number::Scale::Scale((icu::number::Scale *)a3, 0, v7);
  return sub_1807DDC3C((uint64_t *)&v10);
}

uint64_t *icu::number::Scale::byDoubleAndPowerOfTen@<X0>( icu::number::Scale *this@<X0>, double a2@<D0>, unint64_t a3@<X1>, uint64_t a4@<X8>)
{
  int v4 = (int)this;
  UErrorCode v12 = U_ZERO_ERROR;
  unsigned int v7 = (icu::number::impl::DecNum *)icu::UMemory::operator new((uint64_t *)a4, (icu::UMemory *)0x60, a3);
  if (!v7)
  {
    UErrorCode v11 = 0LL;
    UErrorCode v9 = U_MEMORY_ALLOCATION_ERROR;
    UErrorCode v12 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_5;
  }

  UErrorCode v8 = v7;
  UErrorCode v11 = icu::number::impl::DecNum::DecNum(v7);
  icu::number::impl::DecNum::setTo(v11, a2, &v12);
  UErrorCode v9 = v12;
  if (v12 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
LABEL_5:
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0LL;
    *(_DWORD *)(a4 + 16) = v9;
    return sub_1807DDC3C((uint64_t *)&v11);
  }

  UErrorCode v11 = 0LL;
  icu::number::Scale::Scale((icu::number::Scale *)a4, v4, v8);
  return sub_1807DDC3C((uint64_t *)&v11);
}

void icu::number::Scale::applyTo(icu::number::Scale *this, icu::number::impl::DecimalQuantity *a2)
{
  int v4 = (const icu::number::impl::DecNum *)*((void *)this + 1);
  if (v4)
  {
    UErrorCode v5 = U_ZERO_ERROR;
    icu::number::impl::DecimalQuantity::multiplyBy(a2, v4, &v5);
  }

void icu::number::Scale::applyReciprocalTo(icu::number::Scale *this, icu::number::impl::DecimalQuantity *a2)
{
  int v4 = (const icu::number::impl::DecNum *)*((void *)this + 1);
  if (v4)
  {
    UErrorCode v5 = U_ZERO_ERROR;
    icu::number::impl::DecimalQuantity::divideBy(a2, v4, &v5);
  }

uint64_t icu::number::impl::MultiplierFormatHandler::setAndChain(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result = icu::number::Scale::operator=(a1 + 8, a2);
  *(void *)(a1 + 32) = a3;
  return result;
}

void icu::number::impl::MultiplierFormatHandler::processQuantity( uint64_t a1, icu::number::impl::DecimalQuantity *a2)
{
}

void *sub_180932A68(void *a1)
{
  *a1 = off_189727DF0;
  icu::number::Scale::~Scale((icu::number::Scale *)(a1 + 1));
  return a1;
}

void sub_180932A98(void *a1)
{
  *a1 = off_189727DF0;
  icu::number::Scale::~Scale((icu::number::Scale *)(a1 + 1));
  icu::UMemory::operator delete(a1);
}

uint64_t icu::number::Notation::scientific(icu::number::Notation *this)
{
  HIDWORD(v2) = 65537;
  return v2;
}

uint64_t icu::number::Notation::engineering(icu::number::Notation *this)
{
  HIDWORD(v2) = 65539;
  return v2;
}

uint64_t icu::number::ScientificNotation::ScientificNotation( uint64_t result, unsigned __int8 a2, int a3, unsigned __int16 a4, uint64_t a5)
{
  uint64_t v5 = 256LL;
  if (!a3) {
    uint64_t v5 = 0LL;
  }
  *(_DWORD *)uint64_t result = 0;
  *(void *)(result + 4) = ((unint64_t)a4 << 16) | (a5 << 32) | v5 & 0xFFFFFFFFFFFFFF00LL | a2;
  return result;
}

{
  uint64_t v5;
  uint64_t v5 = 256LL;
  if (!a3) {
    uint64_t v5 = 0LL;
  }
  *(_DWORD *)uint64_t result = 0;
  *(void *)(result + 4) = ((unint64_t)a4 << 16) | (a5 << 32) | v5 & 0xFFFFFFFFFFFFFF00LL | a2;
  return result;
}

uint64_t icu::number::Notation::compactShort(icu::number::Notation *this)
{
  return v2;
}

uint64_t icu::number::Notation::compactLong(icu::number::Notation *this)
{
  HIDWORD(v2) = 1;
  return v2;
}

uint64_t icu::number::Notation::simple(icu::number::Notation *this)
{
  return v2;
}

uint64_t icu::number::ScientificNotation::withMinExponentDigits( icu::number::ScientificNotation *this, int a2)
{
  if ((a2 - 1) > 0x3E6)
  {
    HIDWORD(v4) = 65810;
    int v2 = 3;
  }

  else
  {
    int v2 = 0;
    HIDWORD(v4) = (a2 << 16) | *((unsigned __int16 *)this + 2);
  }

  LODWORD(v4) = v2;
  return v4;
}

uint64_t icu::number::ScientificNotation::withExponentSignDisplay(uint64_t a1)
{
  HIDWORD(v2) = *(_DWORD *)(a1 + 4);
  return v2;
}

uint64_t icu::number::FormattedNumber::FormattedNumber(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)uint64_t result = off_189727E50;
  *(void *)(result + 8) = v2;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a2 + 8) = 0LL;
  *(_DWORD *)(a2 + 16) = 27;
  return result;
}

{
  uint64_t v2;
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)uint64_t result = off_189727E50;
  *(void *)(result + 8) = v2;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a2 + 8) = 0LL;
  *(_DWORD *)(a2 + 16) = 27;
  return result;
}

void icu::number::FormattedNumber::~FormattedNumber(icu::number::FormattedNumber *this)
{
  *(void *)this = off_189727E50;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *((void *)this + 1) = 0LL;
  icu::FormattedValue::~FormattedValue(this);
}

{
  uint64_t v2;
  *(void *)this = off_189727E50;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *((void *)this + 1) = 0LL;
  icu::FormattedValue::~FormattedValue(this);
}

{
  uint64_t v2;
  void *v3;
  *(void *)this = off_189727E50;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *((void *)this + 1) = 0LL;
  icu::FormattedValue::~FormattedValue(this);
  icu::UMemory::operator delete(v3);
}

uint64_t icu::number::FormattedNumber::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0LL;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 27;
  return a1;
}

void icu::number::FormattedNumber::toString( icu::number::FormattedNumber *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(int *)a2 >= 1)
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(void *)(a3 + 56) = 0LL;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
LABEL_3:
    *(void *)a3 = off_18971B688;
    *(_WORD *)(a3 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
    return;
  }

  uint64_t v3 = *((void *)this + 1);
  if (!v3)
  {
    *a2 = *((UErrorCode *)this + 4);
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(void *)(a3 + 56) = 0LL;
    goto LABEL_3;
  }

  (*(void (**)(void))(*(void *)v3 + 16LL))(*((void *)this + 1));
}

void icu::number::FormattedNumber::toTempString( icu::number::FormattedNumber *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(int *)a2 >= 1)
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(void *)(a3 + 56) = 0LL;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
LABEL_3:
    *(void *)a3 = off_18971B688;
    *(_WORD *)(a3 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
    return;
  }

  uint64_t v3 = *((void *)this + 1);
  if (!v3)
  {
    *a2 = *((UErrorCode *)this + 4);
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(void *)(a3 + 56) = 0LL;
    goto LABEL_3;
  }

  (*(void (**)(void))(*(void *)v3 + 24LL))(*((void *)this + 1));
}

icu::Appendable *icu::number::FormattedNumber::appendTo( icu::number::FormattedNumber *this, icu::Appendable *a2, UErrorCode *a3)
{
  uint64_t v4 = *((void *)this + 1);
  if (!v4)
  {
    *a3 = *((UErrorCode *)this + 4);
    return a2;
  }

  return (icu::Appendable *)(*(uint64_t (**)(void, icu::Appendable *))(*(void *)v4 + 32LL))( *((void *)this + 1),  a2);
}

uint64_t icu::number::FormattedNumber::nextPosition( icu::number::FormattedNumber *this, icu::ConstrainedFieldPosition *a2, UErrorCode *a3)
{
  uint64_t v4 = *((void *)this + 1);
  if (!v4)
  {
    *a3 = *((UErrorCode *)this + 4);
    return 0LL;
  }

  return (*(uint64_t (**)(void, icu::ConstrainedFieldPosition *))(*(void *)v4 + 40LL))( *((void *)this + 1),  a2);
}

void icu::number::FormattedNumber::toDecimalNumber( icu::number::FormattedNumber *this, icu::ByteSink *a2, UErrorCode *a3)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  if (*(int *)a3 <= 0)
  {
    if (*((void *)this + 1))
    {
      memset(v6, 0, sizeof(v6));
      icu::number::impl::DecNum::DecNum((icu::number::impl::DecNum *)v6);
      icu::number::impl::DecimalQuantity::toDecNum( (icu::number::impl::DecimalQuantity *)(*((void *)this + 1) + 304LL),  (icu::number::impl::DecNum *)v6,  a3);
      icu::number::impl::DecNum::toString((icu::number::impl::DecNum *)v6, a2, a3);
      if (BYTE12(v6[0])) {
        uprv_free(*(void **)&v6[0]);
      }
    }

    else
    {
      *a3 = *((UErrorCode *)this + 4);
    }
  }

void icu::number::FormattedNumber::getAllFieldPositionsImpl( icu::FormattedValueStringBuilderImpl **this, icu::FieldPositionIteratorHandler *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (this[1]) {
      icu::FormattedValueStringBuilderImpl::getAllFieldPositions(this[1], a2, a3);
    }
    else {
      *a3 = *((UErrorCode *)this + 4);
    }
  }

uint64_t icu::number::FormattedNumber::getOutputUnit@<X0>( icu::number::FormattedNumber *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *((void *)this + 1);
  if (!v6)
  {
    *a2 = *((UErrorCode *)this + 4);
    return icu::MeasureUnit::MeasureUnit(a3);
  }

  return icu::MeasureUnit::MeasureUnit(a3, v6 + 376);
}

uint64_t icu::number::FormattedNumber::getNounClass(icu::number::FormattedNumber *this, UErrorCode *a2)
{
  uint64_t v3 = *((void *)this + 1);
  if (!v3)
  {
    *a2 = *((UErrorCode *)this + 4);
    return 0LL;
  }

  return udispopt_fromNounClassIdentifier(*(char **)(v3 + 400));
}

icu::number::impl::DecimalQuantity *icu::number::FormattedNumber::getDecimalQuantity( icu::number::impl::DecimalQuantity *this, icu::number::impl::DecimalQuantity *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v3 = *((void *)this + 1);
    if (v3) {
      return icu::number::impl::DecimalQuantity::operator=(a2, v3 + 304);
    }
    else {
      *a3 = *((UErrorCode *)this + 4);
    }
  }

  return this;
}

void icu::number::impl::UFormattedNumberData::~UFormattedNumberData(void **this)
{
  *this = off_189727E90;
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)(this + 47));
  icu::number::impl::DecimalQuantity::~DecimalQuantity(this + 38);
  icu::FormattedValueStringBuilderImpl::~FormattedValueStringBuilderImpl(this);
}

{
  void *v1;
  icu::number::impl::UFormattedNumberData::~UFormattedNumberData(this);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::number::FormattedNumberRange::FormattedNumberRange(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)uint64_t result = off_189727ED0;
  *(void *)(result + 8) = v2;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a2 + 8) = 0LL;
  *(_DWORD *)(a2 + 16) = 27;
  return result;
}

{
  uint64_t v2;
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)uint64_t result = off_189727ED0;
  *(void *)(result + 8) = v2;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a2 + 8) = 0LL;
  *(_DWORD *)(a2 + 16) = 27;
  return result;
}

void icu::number::FormattedNumberRange::~FormattedNumberRange(icu::number::FormattedNumberRange *this)
{
  *(void *)this = off_189727ED0;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *((void *)this + 1) = 0LL;
  icu::FormattedValue::~FormattedValue(this);
}

{
  uint64_t v2;
  *(void *)this = off_189727ED0;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *((void *)this + 1) = 0LL;
  icu::FormattedValue::~FormattedValue(this);
}

{
  uint64_t v2;
  void *v3;
  *(void *)this = off_189727ED0;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *((void *)this + 1) = 0LL;
  icu::FormattedValue::~FormattedValue(this);
  icu::UMemory::operator delete(v3);
}

uint64_t icu::number::FormattedNumberRange::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0LL;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 27;
  return a1;
}

void icu::number::FormattedNumberRange::toString( icu::number::FormattedNumberRange *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(int *)a2 >= 1)
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(void *)(a3 + 56) = 0LL;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
LABEL_3:
    *(void *)a3 = off_18971B688;
    *(_WORD *)(a3 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
    return;
  }

  uint64_t v3 = *((void *)this + 1);
  if (!v3)
  {
    *a2 = *((UErrorCode *)this + 4);
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(void *)(a3 + 56) = 0LL;
    goto LABEL_3;
  }

  (*(void (**)(void))(*(void *)v3 + 16LL))(*((void *)this + 1));
}

void icu::number::FormattedNumberRange::toTempString( icu::number::FormattedNumberRange *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(int *)a2 >= 1)
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(void *)(a3 + 56) = 0LL;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
LABEL_3:
    *(void *)a3 = off_18971B688;
    *(_WORD *)(a3 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
    return;
  }

  uint64_t v3 = *((void *)this + 1);
  if (!v3)
  {
    *a2 = *((UErrorCode *)this + 4);
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(void *)(a3 + 56) = 0LL;
    goto LABEL_3;
  }

  (*(void (**)(void))(*(void *)v3 + 24LL))(*((void *)this + 1));
}

icu::Appendable *icu::number::FormattedNumberRange::appendTo( icu::number::FormattedNumberRange *this, icu::Appendable *a2, UErrorCode *a3)
{
  uint64_t v4 = *((void *)this + 1);
  if (!v4)
  {
    *a3 = *((UErrorCode *)this + 4);
    return a2;
  }

  return (icu::Appendable *)(*(uint64_t (**)(void, icu::Appendable *))(*(void *)v4 + 32LL))( *((void *)this + 1),  a2);
}

uint64_t icu::number::FormattedNumberRange::nextPosition( icu::number::FormattedNumberRange *this, icu::ConstrainedFieldPosition *a2, UErrorCode *a3)
{
  uint64_t v4 = *((void *)this + 1);
  if (!v4)
  {
    *a3 = *((UErrorCode *)this + 4);
    return 0LL;
  }

  return (*(uint64_t (**)(void, icu::ConstrainedFieldPosition *))(*(void *)v4 + 40LL))( *((void *)this + 1),  a2);
}

void icu::number::FormattedNumberRange::getDecimalNumbers( icu::number::FormattedNumberRange *this, icu::ByteSink *a2, icu::ByteSink *a3, UErrorCode *a4)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  if (*(int *)a4 <= 0)
  {
    if (*((void *)this + 1))
    {
      memset(v11, 0, sizeof(v11));
      icu::number::impl::DecNum::DecNum((icu::number::impl::DecNum *)v11);
      memset(v10, 0, sizeof(v10));
      icu::number::impl::DecNum::DecNum((icu::number::impl::DecNum *)v10);
      UErrorCode v8 = icu::number::impl::DecimalQuantity::toDecNum( (icu::number::impl::DecimalQuantity *)(*((void *)this + 1) + 304LL),  (icu::number::impl::DecNum *)v11,  a4);
      icu::number::impl::DecNum::toString(v8, a2, a4);
      UErrorCode v9 = icu::number::impl::DecimalQuantity::toDecNum( (icu::number::impl::DecimalQuantity *)(*((void *)this + 1) + 376LL),  (icu::number::impl::DecNum *)v10,  a4);
      icu::number::impl::DecNum::toString(v9, a3, a4);
      if (BYTE12(v10[0])) {
        uprv_free(*(void **)&v10[0]);
      }
      if (BYTE12(v11[0])) {
        uprv_free(*(void **)&v11[0]);
      }
    }

    else
    {
      *a4 = *((UErrorCode *)this + 4);
    }
  }

uint64_t icu::number::FormattedNumberRange::getIdentityResult( icu::number::FormattedNumberRange *this, UErrorCode *a2)
{
  uint64_t v3 = *((void *)this + 1);
  if (!v3)
  {
    *a2 = *((UErrorCode *)this + 4);
    return 2LL;
  }

  return *(unsigned int *)(v3 + 448);
}

uint64_t icu::number::FormattedNumberRange::getData(icu::number::FormattedNumberRange *this, UErrorCode *a2)
{
  uint64_t result = *((void *)this + 1);
  if (!result) {
    *a2 = *((UErrorCode *)this + 4);
  }
  return result;
}

void sub_18093353C(void **a1)
{
  *a1 = off_189727F10;
  icu::number::impl::DecimalQuantity::~DecimalQuantity(a1 + 47);
  icu::number::impl::DecimalQuantity::~DecimalQuantity(a1 + 38);
  icu::FormattedValueStringBuilderImpl::~FormattedValueStringBuilderImpl(a1);
}

void sub_18093357C(void **a1)
{
}

_DWORD *icu::number::impl::Padder::Padder(_DWORD *result, int a2, int a3, int a4)
{
  *uint64_t result = a3;
  result[1] = a2;
  result[2] = a4;
  return result;
}

{
  *uint64_t result = a3;
  result[1] = a2;
  result[2] = a4;
  return result;
}

_DWORD *icu::number::impl::Padder::Padder(_DWORD *this, int a2)
{
  *this = a2;
  return this;
}

{
  *this = a2;
  return this;
}

uint64_t icu::number::impl::Padder::none(icu::number::impl::Padder *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t icu::number::impl::Padder::codePoints(unsigned int a1, int a2)
{
  if (a2 < 0) {
    uint64_t v2 = 65810LL;
  }
  else {
    uint64_t v2 = a1;
  }
  if (a2 < 0) {
    uint64_t v3 = 4294967293LL;
  }
  else {
    uint64_t v3 = a2;
  }
  return v3 | (v2 << 32);
}

uint64_t icu::number::impl::Padder::forProperties( icu::number::impl::Padder *this, const icu::number::impl::DecimalFormatProperties *a2)
{
  unsigned int v3 = *((unsigned __int16 *)this + 200);
  int v4 = (__int16)v3;
  LODWORD(v5) = v3 >> 5;
  if (v4 >= 0) {
    unint64_t v5 = v5;
  }
  else {
    unint64_t v5 = *((unsigned int *)this + 101);
  }
  else {
    uint64_t v6 = (void)icu::UnicodeString::char32At((uint64_t *)v5, (icu::number::impl::Padder *)((char *)this + 392), 0) << 32;
  }
  return v6 | *((unsigned int *)this + 18);
}

uint64_t icu::number::impl::Padder::padAndApply( icu::number::impl::Padder *this, const icu::number::impl::Modifier *a2, const icu::number::impl::Modifier *a3, icu::FormattedStringBuilder *a4, uint64_t a5, uint64_t a6, UErrorCode *a7)
{
  int v14 = (*(uint64_t (**)(const icu::number::impl::Modifier *))(*(void *)a2 + 32LL))(a2);
  int v15 = (*(uint64_t (**)(const icu::number::impl::Modifier *))(*(void *)a3 + 32LL))(a3);
  int v16 = *(_DWORD *)this;
  int v17 = v15 + v14 + icu::FormattedStringBuilder::codePointCount(a4);
  int v18 = v16 - v17;
  if (v16 - v17 <= 0)
  {
    int v23 = (*(uint64_t (**)(const icu::number::impl::Modifier *, icu::FormattedStringBuilder *, uint64_t, uint64_t, UErrorCode *))(*(void *)a2 + 16LL))( a2,  a4,  a5,  a6,  a7);
    return (*(unsigned int (**)(const icu::number::impl::Modifier *, icu::FormattedStringBuilder *, uint64_t, void, UErrorCode *))(*(void *)a3 + 16LL))( a3,  a4,  a5,  (v23 + a6),  a7)
         + v23;
  }

  int v32 = v17;
  int v33 = v16;
  UErrorCode v21 = (char *)this + 4;
  unsigned int v19 = *((_DWORD *)this + 1);
  int v20 = *((_DWORD *)v21 + 1);
  if (v20 == 1)
  {
    int v25 = v18;
    do
    {
      icu::FormattedStringBuilder::insertCodePoint(a4, a5, v19, 0, a7);
      --v25;
    }

    while (v25);
  }

  else
  {
    if (v20 != 2)
    {
      int v26 = 0;
      goto LABEL_12;
    }

    int v22 = v18;
    do
    {
      icu::FormattedStringBuilder::insertCodePoint(a4, a6, v19, 0, a7);
      --v22;
    }

    while (v22);
  }

  int v26 = v18 << ((v19 & 0xFFFF0000) != 0);
LABEL_12:
  int v27 = (*(uint64_t (**)(const icu::number::impl::Modifier *, icu::FormattedStringBuilder *, uint64_t, void, UErrorCode *))(*(void *)a2 + 16LL))( a2,  a4,  a5,  (v26 + a6),  a7)
      + v26;
  uint64_t v24 = (*(unsigned int (**)(const icu::number::impl::Modifier *, icu::FormattedStringBuilder *, uint64_t, void, UErrorCode *))(*(void *)a3 + 16LL))( a3,  a4,  a5,  (v27 + a6),  a7)
      + v27;
  if (v20 == 3)
  {
    int v29 = v24 + a6;
    int v30 = v18;
    do
    {
      icu::FormattedStringBuilder::insertCodePoint(a4, v29, v19, 0, a7);
      --v30;
    }

    while (v30);
    return (v24 + (v18 << ((v19 & 0xFFFF0000) != 0)));
  }

  if (!v20)
  {
    int v28 = v33 - v32;
    do
    {
      icu::FormattedStringBuilder::insertCodePoint(a4, a5, v19, 0, a7);
      --v28;
    }

    while (v28);
    return (v24 + (v18 << ((v19 & 0xFFFF0000) != 0)));
  }

  return v24;
}

icu::number::impl::MutablePatternModifier *icu::number::impl::MutablePatternModifier::MutablePatternModifier( icu::number::impl::MutablePatternModifier *this, char a2)
{
  *(void *)this = off_189727FF0;
  *((void *)this + 1) = &unk_189728058;
  *((void *)this + 2) = &unk_1897280B0;
  *((_BYTE *)this + 24) = a2;
  icu::CurrencyUnit::CurrencyUnit((icu::number::impl::MutablePatternModifier *)((char *)this + 80));
  *((void *)this + 14) = (char *)this + 125;
  *((_DWORD *)this + 30) = 40;
  *((_WORD *)this + 62) = 0;
  *((_DWORD *)this + 42) = 0;
  *((void *)this + 22) = off_18971B688;
  *((_WORD *)this + 92) = 2;
  *((void *)this + 30) = off_18971B688;
  *((_WORD *)this + 124) = 2;
  *((void *)this + 41) = off_18971B688;
  *((_WORD *)this + 168) = 2;
  return this;
}

uint64_t icu::number::impl::MutablePatternModifier::setPatternInfo(uint64_t result, uint64_t a2, char a3)
{
  *(void *)(result + 32) = a2;
  *(_BYTE *)(result + 40) = a3;
  return result;
}

uint64_t icu::number::impl::MutablePatternModifier::setPatternAttributes( uint64_t result, int a2, char a3, char a4)
{
  *(_DWORD *)(result + 44) = a2;
  *(_BYTE *)(result + 48) = a3;
  *(_BYTE *)(result + 49) = a4;
  return result;
}

void icu::number::impl::MutablePatternModifier::setSymbols( uint64_t a1, uint64_t a2, const UChar *a3, int a4, uint64_t a5, UErrorCode *a6)
{
  char v20[8] = *MEMORY[0x1895F89C0];
  *(void *)(a1 + 56) = a2;
  icu::CurrencyUnit::CurrencyUnit((icu::CurrencyUnit *)v13, a3);
  icu::Locale::Locale((icu::Locale *)v14, a2 + 1936);
  icu::number::impl::CurrencySymbols::CurrencySymbols((uint64_t)v15, v13, (uint64_t)v14, a2, a6);
  icu::CurrencyUnit::operator=(a1 + 80, (unint64_t)v16);
  icu::CharString::operator=(a1 + 112, (uint64_t)&v17);
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 176), (icu::UnicodeString *)v19);
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 240), (icu::UnicodeString *)v20);
  icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v20);
  icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v19);
  if (v18) {
    uprv_free(v17);
  }
  icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)v16);
  icu::Locale::~Locale((icu::Locale *)v14);
  icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)v13);
  *(_DWORD *)(a1 + 64) = a4;
  *(void *)(a1 + 304) = a5;
}

uint64_t icu::number::impl::MutablePatternModifier::setNumberProperties(uint64_t result, int a2, int a3)
{
  *(_DWORD *)(result + 312) = a2;
  *(_DWORD *)(result + 316) = a3;
  return result;
}

uint64_t icu::number::impl::MutablePatternModifier::needsPlurals( icu::number::impl::MutablePatternModifier *this)
{
  int v2 = 0;
  return (*(uint64_t (**)(void, uint64_t, int *))(**((void **)this + 4) + 72LL))( *((void *)this + 4),  4294967288LL,  &v2);
}

uint64_t *icu::number::impl::MutablePatternModifier::createImmutableForPlural@<X0>( icu::number::impl::MutablePatternModifier *a1@<X0>, int a2@<W1>, UErrorCode *a3@<X2>, void *a4@<X8>)
{
  *a4 = off_189727AD0;
  *((_DWORD *)a1 + 78) = 3;
  *((_DWORD *)a1 + 79) = a2;
  a4[4] = icu::number::impl::MutablePatternModifier::createConstantModifier(a1, a3);
  *((_DWORD *)a1 + 78) = 1;
  *((_DWORD *)a1 + 79) = a2;
  a4[2] = icu::number::impl::MutablePatternModifier::createConstantModifier(a1, a3);
  *((_DWORD *)a1 + 78) = 2;
  *((_DWORD *)a1 + 79) = a2;
  a4[3] = icu::number::impl::MutablePatternModifier::createConstantModifier(a1, a3);
  *((_DWORD *)a1 + 78) = 0;
  *((_DWORD *)a1 + 79) = a2;
  uint64_t result = icu::number::impl::MutablePatternModifier::createConstantModifier(a1, a3);
  a4[1] = result;
  return result;
}

uint64_t *icu::number::impl::MutablePatternModifier::createConstantModifier( icu::number::impl::MutablePatternModifier *this, UErrorCode *a2)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  uint64_t v13 = 0LL;
  memset(v12, 0, sizeof(v12));
  icu::FormattedStringBuilder::FormattedStringBuilder((icu::FormattedStringBuilder *)v12);
  uint64_t v11 = 0LL;
  memset(v10, 0, sizeof(v10));
  icu::FormattedStringBuilder::FormattedStringBuilder((icu::FormattedStringBuilder *)v10);
  icu::number::impl::MutablePatternModifier::prepareAffix(this, 1);
  icu::number::impl::AffixUtils::unescape( (icu::number::impl::MutablePatternModifier *)((char *)this + 328),  (icu::FormattedStringBuilder *)v12,  0,  (uint64_t)this + 16,  *((_BYTE *)this + 40),  a2);
  icu::number::impl::MutablePatternModifier::prepareAffix(this, 0);
  icu::number::impl::AffixUtils::unescape( (icu::number::impl::MutablePatternModifier *)((char *)this + 328),  (icu::FormattedStringBuilder *)v10,  0,  (uint64_t)this + 16,  *((_BYTE *)this + 40),  a2);
  if ((*(unsigned int (**)(void))(**((void **)this + 4) + 40LL))(*((void *)this + 4)))
  {
    uint64_t v6 = icu::UMemory::operator new(v5, (icu::UMemory *)0x340, v4);
    if (v6)
    {
      char v7 = (*(uint64_t (**)(void))(**((void **)this + 4) + 80LL))(*((void *)this + 4));
      icu::number::impl::CurrencySpacingEnabledModifier::CurrencySpacingEnabledModifier( (icu::number::impl::CurrencySpacingEnabledModifier *)v6,  (const icu::FormattedStringBuilder *)v12,  (const icu::FormattedStringBuilder *)v10,  v7 != 1,  *((_BYTE *)this + 24),  *((const icu::DecimalFormatSymbols **)this + 7),  a2);
    }
  }

  else
  {
    uint64_t v6 = icu::UMemory::operator new(v5, (icu::UMemory *)0x130, v4);
    if (v6)
    {
      char v8 = (*(uint64_t (**)(void))(**((void **)this + 4) + 80LL))(*((void *)this + 4));
      sub_1809348D4((uint64_t)v6, (uint64_t)v12, (uint64_t)v10, v8 ^ 1, *((_BYTE *)this + 24));
    }
  }

  icu::FormattedStringBuilder::~FormattedStringBuilder((icu::FormattedStringBuilder *)v10);
  icu::FormattedStringBuilder::~FormattedStringBuilder((icu::FormattedStringBuilder *)v12);
  return v6;
}

uint64_t *icu::number::impl::MutablePatternModifier::createImmutable@<X0>( icu::number::impl::MutablePatternModifier *this@<X0>, UErrorCode *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0x148, (unint64_t)a2);
  if (!result)
  {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
    return result;
  }

  uint64_t v6 = (uint64_t)result;
  *(_OWORD *)(result + 31) = 0u;
  *(_OWORD *)(result + 29) = 0u;
  *(_OWORD *)(result + 27) = 0u;
  *(_OWORD *)(result + 25) = 0u;
  *(_OWORD *)(result + 23) = 0u;
  *(_OWORD *)(result + 21) = 0u;
  *(_OWORD *)(result + 19) = 0u;
  *(_OWORD *)(result + 17) = 0u;
  *(_OWORD *)(result + 15) = 0u;
  *(_OWORD *)(result + 13) = 0u;
  *(_OWORD *)(result + 11) = 0u;
  *(_OWORD *)(result + 9) = 0u;
  *(_OWORD *)(result + 7) = 0u;
  *(_OWORD *)(result + 5) = 0u;
  *(_OWORD *)(result + 1) = 0u;
  *(_OWORD *)(result + 37) = 0u;
  *(_OWORD *)(result + 39) = 0u;
  *(_OWORD *)(result + 33) = 0u;
  *(_OWORD *)(result + 35) = 0u;
  *uint64_t result = (uint64_t)&unk_189728210;
  uint64_t v7 = 1LL;
  *(_OWORD *)(result + 3) = 0u;
  do
  {
    char v8 = &result[v7];
    *char v8 = (uint64_t)off_189727AD0;
    *(_OWORD *)(v8 + 1) = 0uLL;
    *(_OWORD *)(v8 + 3) = 0uLL;
    v7 += 5LL;
  }

  while (v8 + 5 != result + 41);
  int v18 = 0;
  if ((*(unsigned int (**)(void, uint64_t, int *))(**((void **)this + 4) + 72LL))( *((void *)this + 4),  4294967288LL,  &v18))
  {
    for (uint64_t i = 0LL; i != 6; ++i)
    {
      unsigned int v10 = dword_180A3AAD8[i];
      icu::number::impl::MutablePatternModifier::createImmutableForPlural(this, v10, a2, v17);
      icu::number::impl::AdoptingSignumModifierStore::operator=(v6 + 40LL * v10 + 8, (uint64_t)v17);
      icu::number::impl::AdoptingSignumModifierStore::~AdoptingSignumModifierStore((icu::number::impl::AdoptingSignumModifierStore *)v17);
    }

    uint64_t v12 = (uint64_t *)*(unsigned int *)a2;
    if ((int)v12 < 1)
    {
      uint64_t result = icu::UMemory::operator new(v12, (icu::UMemory *)0x20, v11);
      if (result)
      {
        uint64_t v13 = *((void *)this + 38);
        *uint64_t result = (uint64_t)&off_1897280D8;
        result[1] = v6;
        result[2] = v13;
        result[3] = 0LL;
      }

      return result;
    }

void *icu::number::impl::ImmutablePatternModifier::ImmutablePatternModifier( void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = &off_1897280D8;
  result[1] = a2;
  result[2] = a3;
  result[3] = 0LL;
  return result;
}

{
  *uint64_t result = &off_1897280D8;
  result[1] = a2;
  result[2] = a3;
  result[3] = 0LL;
  return result;
}

uint64_t icu::number::impl::MutablePatternModifier::insertPrefix( icu::number::impl::MutablePatternModifier *this, icu::FormattedStringBuilder *a2, int a3, UErrorCode *a4)
{
  return icu::number::impl::AffixUtils::unescape( (icu::number::impl::MutablePatternModifier *)((char *)this + 328),  a2,  a3,  (uint64_t)this + 16,  *((_BYTE *)this + 40),  a4);
}

uint64_t icu::number::impl::MutablePatternModifier::insertSuffix( icu::number::impl::MutablePatternModifier *this, icu::FormattedStringBuilder *a2, int a3, UErrorCode *a4)
{
  return icu::number::impl::AffixUtils::unescape( (icu::number::impl::MutablePatternModifier *)((char *)this + 328),  a2,  a3,  (uint64_t)this + 16,  *((_BYTE *)this + 40),  a4);
}

void icu::number::impl::ImmutablePatternModifier::processQuantity( uint64_t a1, icu::number::impl::DecimalQuantity *a2, uint64_t a3, int *a4)
{
  if (!*(void *)(a3 + 200)) {
    icu::number::impl::ImmutablePatternModifier::applyToMicros(a1, a3, a2, a4);
  }
}

uint64_t icu::number::impl::ImmutablePatternModifier::applyToMicros( uint64_t a1, uint64_t a2, icu::number::impl::DecimalQuantity *a3, int *a4)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  uint64_t v7 = *(icu::PluralRules **)(a1 + 16);
  if (v7)
  {
    uint64_t v19 = 0LL;
    memset(v18, 0, sizeof(v18));
    icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v18, (uint64_t)a3);
    sub_180938418(a2 + 104, (icu::number::impl::DecimalQuantity *)v18, a4);
    int v9 = *a4;
    uint64_t v10 = 5LL;
    if (v9 <= 0)
    {
      memset(v20, 0, sizeof(v20));
      icu::PluralRules::select(v7, (const icu::IFixedDecimal *)v18, (icu::UnicodeString *)v20);
      int v12 = icu::StandardPlural::indexOrNegativeFromString((icu::StandardPlural *)v20, v11);
      if (v12 < 0) {
        uint64_t v10 = 5LL;
      }
      else {
        uint64_t v10 = v12;
      }
      icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v20);
    }

    icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v18);
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v15 = icu::number::impl::DecimalQuantity::signum(a3);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 16LL))(v14, v15, v10);
  }

  else
  {
    uint64_t v17 = *(void *)(a1 + 8);
    uint64_t result = *(void *)(v17 + 8LL * icu::number::impl::DecimalQuantity::signum(a3) + 216);
  }

  *(void *)(a2 + 20icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = result;
  return result;
}

uint64_t icu::number::impl::ImmutablePatternModifier::getModifier(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = a1 + 8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(void *)(v3 + 8)) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 16LL))(v2);
  }
  else {
    return *(void *)(v2 + 8LL * a2 + 216);
  }
}

uint64_t icu::number::impl::ImmutablePatternModifier::addToChain(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t icu::number::impl::MutablePatternModifier::addToChain(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = a2;
  return result;
}

void icu::number::impl::MutablePatternModifier::processQuantity( uint64_t a1, icu::number::impl::DecimalQuantity *a2, uint64_t a3, int *a4)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  (*(void (**)(void))(**(void **)(a1 + 320) + 16LL))(*(void *)(a1 + 320));
  sub_180938418(a3 + 104, a2, a4);
  if (!*(void *)(a3 + 200))
  {
    LODWORD(v12[0]) = 0;
    if ((*(unsigned int (**)(void, uint64_t, _OWORD *))(**(void **)(a1 + 32) + 72LL))( *(void *)(a1 + 32),  4294967288LL,  v12))
    {
      char v8 = *(icu::PluralRules **)(a1 + 304);
      uint64_t v13 = 0LL;
      memset(v12, 0, sizeof(v12));
      icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v12, (uint64_t)a2);
      sub_180938418(a3 + 104, (icu::number::impl::DecimalQuantity *)v12, a4);
      int v9 = 5;
      if (v8 && *a4 <= 0)
      {
        memset(v14, 0, sizeof(v14));
        icu::PluralRules::select(v8, (const icu::IFixedDecimal *)v12, (icu::UnicodeString *)v14);
        int v11 = icu::StandardPlural::indexOrNegativeFromString((icu::StandardPlural *)v14, v10);
        if (v11 < 0) {
          int v9 = 5;
        }
        else {
          int v9 = v11;
        }
        icu::UnicodeString::~UnicodeString((void *)5, (icu::UnicodeString *)v14);
      }

      icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v12);
    }

    else
    {
      int v9 = 8;
    }

    *(_DWORD *)(a1 + 312) = icu::number::impl::DecimalQuantity::signum(a2);
    *(_DWORD *)(a1 + 316) = v9;
    *(void *)(a3 + 20icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = a1 + 8;
  }

uint64_t icu::number::impl::MutablePatternModifier::apply( icu::number::impl::MutablePatternModifier *this, icu::FormattedStringBuilder *a2, icu::FormattedStringBuilder *a3, int a4, UErrorCode *a5)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  icu::number::impl::MutablePatternModifier::prepareAffix(this, 1);
  int v10 = icu::number::impl::AffixUtils::unescape( (icu::number::impl::MutablePatternModifier *)((char *)this + 328),  a2,  (int)a3,  (uint64_t)this + 16,  *((_BYTE *)this + 40),  a5);
  int v11 = v10 + a4;
  icu::number::impl::MutablePatternModifier::prepareAffix(this, 0);
  int v12 = icu::number::impl::AffixUtils::unescape( (icu::number::impl::MutablePatternModifier *)((char *)this + 328),  a2,  v11,  (uint64_t)this + 16,  *((_BYTE *)this + 40),  a5);
  int v14 = 0;
  if (((*(uint64_t (**)(void))(**((void **)this + 4) + 80LL))(*((void *)this + 4)) & 1) == 0)
  {
    uint64_t v17 = off_18971B688;
    __int16 v18 = 2;
    int v14 = icu::FormattedStringBuilder::splice(a2, v10 + (int)a3, v11, (uint64_t)&v17, 0, 0, 0, a5);
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v17);
  }

  icu::number::impl::CurrencySpacingEnabledModifier::applyCurrencySpacing( a2,  a3,  v10,  v11 + v14,  v12,  *((void *)this + 7),  a5,  v13);
  return (v12 + v10 + v14);
}

uint64_t non-virtual thunk to'icu::number::impl::MutablePatternModifier::apply( icu::number::impl::MutablePatternModifier *this, icu::FormattedStringBuilder *a2, icu::FormattedStringBuilder *a3, int a4, UErrorCode *a5)
{
  return icu::number::impl::MutablePatternModifier::apply( (icu::number::impl::MutablePatternModifier *)((char *)this - 8),  a2,  a3,  a4,  a5);
}

uint64_t icu::number::impl::MutablePatternModifier::getPrefixLength( icu::number::impl::MutablePatternModifier *this)
{
  int v4 = 0;
  icu::number::impl::MutablePatternModifier::prepareAffix(this, 1);
  return icu::number::impl::AffixUtils::unescapedCodePointCount( (icu::number::impl::MutablePatternModifier *)((char *)this + 328),  (icu::number::impl::MutablePatternModifier *)((char *)this + 16),  (const icu::number::impl::SymbolProvider *)&v4,  v2);
}

uint64_t icu::number::impl::MutablePatternModifier::prepareAffix( icu::number::impl::MutablePatternModifier *this, int a2)
{
  uint64_t v4 = *((void *)this + 4);
  int v5 = icu::number::impl::PatternStringUtils::resolveSignDisplay(*((_DWORD *)this + 11), *((_DWORD *)this + 78));
  return icu::number::impl::PatternStringUtils::patternInfoToStringBuilder( v4,  a2,  v5,  *((unsigned __int8 *)this + 49),  *((_DWORD *)this + 79),  *((_BYTE *)this + 48),  0,  (uint64_t)this + 328);
}

uint64_t non-virtual thunk to'icu::number::impl::MutablePatternModifier::getPrefixLength( icu::number::impl::MutablePatternModifier *this)
{
  int v4 = 0;
  icu::number::impl::MutablePatternModifier::prepareAffix( (icu::number::impl::MutablePatternModifier *)((char *)this - 8),  1);
  return icu::number::impl::AffixUtils::unescapedCodePointCount( (icu::number::impl::MutablePatternModifier *)((char *)this + 320),  (icu::number::impl::MutablePatternModifier *)((char *)this + 8),  (const icu::number::impl::SymbolProvider *)&v4,  v2);
}

uint64_t icu::number::impl::MutablePatternModifier::getCodePointCount( icu::number::impl::MutablePatternModifier *this)
{
  int v6 = 0;
  icu::number::impl::MutablePatternModifier::prepareAffix(this, 1);
  int v3 = icu::number::impl::AffixUtils::unescapedCodePointCount( (icu::number::impl::MutablePatternModifier *)((char *)this + 328),  (icu::number::impl::MutablePatternModifier *)((char *)this + 16),  (const icu::number::impl::SymbolProvider *)&v6,  v2);
  icu::number::impl::MutablePatternModifier::prepareAffix(this, 0);
  return icu::number::impl::AffixUtils::unescapedCodePointCount( (icu::number::impl::MutablePatternModifier *)((char *)this + 328),  (icu::number::impl::MutablePatternModifier *)((char *)this + 16),  (const icu::number::impl::SymbolProvider *)&v6,  v4)
       + v3;
}

uint64_t non-virtual thunk to'icu::number::impl::MutablePatternModifier::getCodePointCount( icu::number::impl::MutablePatternModifier *this)
{
  return icu::number::impl::MutablePatternModifier::getCodePointCount((icu::number::impl::MutablePatternModifier *)((char *)this - 8));
}

uint64_t icu::number::impl::MutablePatternModifier::isStrong(icu::number::impl::MutablePatternModifier *this)
{
  return *((unsigned __int8 *)this + 24);
}

uint64_t non-virtual thunk to'icu::number::impl::MutablePatternModifier::isStrong( icu::number::impl::MutablePatternModifier *this)
{
  return *((unsigned __int8 *)this + 16);
}

void icu::number::impl::MutablePatternModifier::containsField()
{
}

void non-virtual thunk to'icu::number::impl::MutablePatternModifier::containsField()
{
}

void icu::number::impl::MutablePatternModifier::getParameters( icu::number::impl::MutablePatternModifier *this, icu::number::impl::Modifier::Parameters *a2)
{
}

void non-virtual thunk to'icu::number::impl::MutablePatternModifier::getParameters( icu::number::impl::MutablePatternModifier *this, icu::number::impl::Modifier::Parameters *a2)
{
}

void icu::number::impl::MutablePatternModifier::semanticallyEquivalent( icu::number::impl::MutablePatternModifier *this, const icu::number::impl::Modifier *a2)
{
}

void non-virtual thunk to'icu::number::impl::MutablePatternModifier::semanticallyEquivalent( icu::number::impl::MutablePatternModifier *this, const icu::number::impl::Modifier *a2)
{
}

icu::UnicodeString *icu::number::impl::MutablePatternModifier::getSymbol@<X0>( uint64_t a1@<X0>, int a2@<W1>, icu::UnicodeString *a3@<X8>)
{
  UErrorCode v5 = U_ZERO_ERROR;
  switch(a2)
  {
    case -10:
    case -9:
      return (icu::UnicodeString *)icu::UnicodeString::UnicodeString((uint64_t)a3, (uint64_t)&unk_180A486D4);
    case -8:
      return (icu::UnicodeString *)icu::number::impl::CurrencySymbols::getPluralName( a1 + 72,  *(_DWORD *)(a1 + 316),  (int *)&v5,  (uint64_t)a3);
    case -7:
      return icu::number::impl::CurrencySymbols::getIntlCurrencySymbol((UChar **)(a1 + 72), a3);
    case -6:
      return (icu::UnicodeString *)icu::number::impl::MutablePatternModifier::getCurrencySymbolForUnitWidth(a1, &v5, a3);
    case -5:
      int v4 = (UChar **)(*(void *)(a1 + 56) + 776LL);
      return icu::UnicodeString::UnicodeString(a3, v4);
    case -4:
      int v4 = (UChar **)(*(void *)(a1 + 56) + 200LL);
      return icu::UnicodeString::UnicodeString(a3, v4);
    case -3:
      int v4 = (UChar **)(*(void *)(a1 + 56) + 1800LL);
      return icu::UnicodeString::UnicodeString(a3, v4);
    case -2:
      int v4 = (UChar **)(*(void *)(a1 + 56) + 456LL);
      return icu::UnicodeString::UnicodeString(a3, v4);
    case -1:
      int v4 = (UChar **)(*(void *)(a1 + 56) + 392LL);
      return icu::UnicodeString::UnicodeString(a3, v4);
    default:
      abort();
  }

uint64_t icu::number::impl::MutablePatternModifier::getCurrencySymbolForUnitWidth@<X0>( uint64_t this@<X0>, UErrorCode *a2@<X1>, icu::UnicodeString *a3@<X8>)
{
  switch(*(_DWORD *)(this + 64))
  {
    case 0:
      this = icu::number::impl::CurrencySymbols::getNarrowCurrencySymbol( (icu::number::impl::CurrencySymbols *)(this + 72),  a2,  (uint64_t)a3);
      break;
    case 3:
      this = (uint64_t)icu::number::impl::CurrencySymbols::getIntlCurrencySymbol((UChar **)(this + 72), a3);
      break;
    case 4:
      this = icu::number::impl::CurrencySymbols::getFormalCurrencySymbol( (icu::number::impl::CurrencySymbols *)(this + 72),  a2,  (uint64_t)a3);
      break;
    case 5:
      this = icu::number::impl::CurrencySymbols::getVariantCurrencySymbol( (icu::number::impl::CurrencySymbols *)(this + 72),  a2,  (uint64_t)a3);
      break;
    case 6:
      *(void *)a3 = off_18971B688;
      *((_WORD *)a3 + 4) = 2;
      break;
    default:
      this = (uint64_t)icu::number::impl::CurrencySymbols::getCurrencySymbol((UChar **)(this + 72), a2, a3);
      break;
  }

  return this;
}

icu::UnicodeString *non-virtual thunk to'icu::number::impl::MutablePatternModifier::getSymbol@<X0>( uint64_t a1@<X0>, int a2@<W1>, icu::UnicodeString *a3@<X8>)
{
  return icu::number::impl::MutablePatternModifier::getSymbol(a1 - 16, a2, a3);
}

void icu::number::impl::MutablePatternModifier::toUnicodeString( icu::number::impl::MutablePatternModifier *this)
{
}

void sub_18093473C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_18093493C(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_180934750(uint64_t a1)
{
  return sub_18093493C(a1 - 8);
}

void sub_180934758(uint64_t a1)
{
  uint64_t v1 = (void *)sub_18093493C(a1 - 8);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_180934770(uint64_t a1)
{
  return sub_18093493C(a1 - 16);
}

void sub_180934778(uint64_t a1)
{
  uint64_t v1 = (void *)sub_18093493C(a1 - 16);
  icu::UMemory::operator delete(v1);
}

void *sub_180934790(void *a1)
{
  *a1 = &off_1897280D8;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

void sub_1809347D0(void *a1)
{
  *a1 = &off_1897280D8;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::UMemory::operator delete(a1);
}

void sub_180934810(icu::number::impl::ModifierStore *a1)
{
  *(void *)a1 = &unk_189728210;
  for (uint64_t i = 288LL; i != -32; i -= 40LL)
    icu::number::impl::AdoptingSignumModifierStore::~AdoptingSignumModifierStore((icu::number::impl::ModifierStore *)((char *)a1 + i));
  icu::number::impl::ModifierStore::~ModifierStore(a1);
}

void sub_180934858(icu::number::impl::ModifierStore *a1)
{
  *(void *)a1 = &unk_189728210;
  for (uint64_t i = 288LL; i != -32; i -= 40LL)
    icu::number::impl::AdoptingSignumModifierStore::~AdoptingSignumModifierStore((icu::number::impl::ModifierStore *)((char *)a1 + i));
  icu::number::impl::ModifierStore::~ModifierStore(a1);
  icu::UMemory::operator delete(v3);
}

uint64_t sub_1809348A4(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result = *(void *)(a1 + 40LL * a3 + 8LL * a2 + 16);
  if (a3 != 5 && !result) {
    return *(void *)(a1 + 8LL * a2 + 216);
  }
  return result;
}

uint64_t sub_1809348D4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  *(void *)a1 = off_189727D30;
  icu::FormattedStringBuilder::FormattedStringBuilder(a1 + 8, a2);
  icu::FormattedStringBuilder::FormattedStringBuilder(a1 + 144, a3);
  *(_BYTE *)(a1 + 28icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = a4;
  *(_BYTE *)(a1 + 28icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = a5;
  icu::number::impl::Modifier::Parameters::Parameters((void *)(a1 + 288));
  return a1;
}

uint64_t sub_18093493C(uint64_t a1)
{
  *(void *)(a1 + 8) = &unk_189728058;
  uint64_t v2 = (icu::number::impl::Modifier *)(a1 + 8);
  *(void *)a1 = off_189727FF0;
  *(void *)(a1 + 16) = &unk_1897280B0;
  int v3 = (icu::number::impl::SymbolProvider *)(a1 + 16);
  icu::UnicodeString::~UnicodeString(&unk_1897280B0, (icu::UnicodeString *)(a1 + 328));
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + 240));
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)(a1 + 176));
  if (*(_BYTE *)(a1 + 124)) {
    uprv_free(*(void **)(a1 + 112));
  }
  icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)(a1 + 80));
  icu::number::impl::SymbolProvider::~SymbolProvider(v3);
  icu::number::impl::Modifier::~Modifier(v2);
  return a1;
}

uint64_t *icu::number::impl::PatternParser::parseToPatternInfo( UChar **this, const icu::UnicodeString *a2, UErrorCode *a3, UErrorCode *a4)
{
  return icu::number::impl::ParsedPatternInfo::consumePattern((uint64_t *)a2, this, a3);
}

uint64_t *icu::number::impl::ParsedPatternInfo::consumePattern(uint64_t *this, UChar **a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v4 = (uint64_t)this;
    icu::UnicodeString::operator=((UChar **)this + 1, a2);
    *(void *)(v4 + 424) = v4 + 72;
    this = icu::number::impl::ParsedPatternInfo::consumeSubpattern((icu::number::impl::ParsedPatternInfo *)v4, a3);
    if (*(int *)a3 <= 0)
    {
      if (icu::number::impl::ParsedPatternInfo::ParserState::peek((icu::number::impl::ParsedPatternInfo::ParserState *)(v4 + 408)) != 59
        || (icu::number::impl::ParsedPatternInfo::ParserState::peek((icu::number::impl::ParsedPatternInfo::ParserState *)(v4 + 408)) < 0x10000
          ? (int v5 = 1)
          : (int v5 = 2),
            (*(_DWORD *)(v4 + 416) += v5,
             icu::number::impl::ParsedPatternInfo::ParserState::peek((icu::number::impl::ParsedPatternInfo::ParserState *)(v4 + 408)) == -1)
         || (*(_BYTE *)(v4 + 432) = 1,
             *(void *)(v4 + 424) = v4 + 240,
             this = icu::number::impl::ParsedPatternInfo::consumeSubpattern( (icu::number::impl::ParsedPatternInfo *)v4,  a3),  *(int *)a3 <= 0)))
      {
        this = icu::number::impl::ParsedPatternInfo::ParserState::peek((icu::number::impl::ParsedPatternInfo::ParserState *)(v4 + 408));
        if ((_DWORD)this != -1) {
          *a3 = U_UNQUOTED_SPECIAL;
        }
      }
    }
  }

  return this;
}

void icu::number::impl::PatternParser::parseToProperties( uint64_t a1@<X0>, int a2@<W1>, UErrorCode *a3@<X2>, void *a4@<X8>)
{
}

void icu::number::impl::PatternParser::parseToExistingPropertiesImpl( uint64_t a1, icu::number::impl::DecimalFormatProperties *this, int a3, UErrorCode *a4)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  unsigned int v5 = *(unsigned __int16 *)(a1 + 8);
  int v6 = (__int16)v5;
  unsigned int v7 = v5 >> 5;
  if (v6 < 0) {
    unsigned int v7 = *(_DWORD *)(a1 + 12);
  }
  if (v7)
  {
    uint64_t v19 = 0LL;
    memset(v18, 0, sizeof(v18));
    sub_18091E880((uint64_t)v18);
    unsigned int v11 = *(unsigned __int16 *)(a1 + 8);
    int v12 = (__int16)v11;
    int32_t v13 = v11 >> 5;
    if (v12 >= 0) {
      int32_t v14 = v13;
    }
    else {
      int32_t v14 = *(_DWORD *)(a1 + 12);
    }
    if (icu::UnicodeString::doCompare(a1, 0, v14, (uint64_t)L"#.##E+00;-#.##E+00", 0, 18))
    {
      icu::number::impl::ParsedPatternInfo::consumePattern((uint64_t *)v18, (UChar **)a1, a4);
    }

    else
    {
      memset(v17, 0, sizeof(v17));
      int v16 = "0";
      icu::UnicodeString::UnicodeString(v17, 1LL, &v16);
      icu::number::impl::ParsedPatternInfo::consumePattern((uint64_t *)v18, (UChar **)v17, a4);
      icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v17);
    }

    if (*(int *)a4 <= 0) {
      icu::number::impl::PatternParser::patternInfoToProperties( (uint64_t)this,  (uint64_t)v18,  a3,  (const icu::UnicodeString *)a4);
    }
    sub_18091E95C((void **)v18);
  }

  else
  {
    icu::number::impl::DecimalFormatProperties::clear(this);
  }

void icu::number::impl::PatternParser::parseToProperties( icu::number::impl::PatternParser *this@<X0>, UErrorCode *a2@<X1>, void *a3@<X8>)
{
}

uint64_t icu::number::impl::ParsedPatternInfo::charAt( icu::number::impl::ParsedPatternInfo *this, int a2, int a3)
{
  int v3 = (char *)this + 224;
  if ((a2 & 0x200) != 0) {
    int v3 = (char *)this + 392;
  }
  if ((a2 & 0x100) != 0) {
    int v3 = (char *)this + 216;
  }
  if ((~a2 & 0x300) != 0) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = (char *)this + 384;
  }
  if ((a2 & 0x400) != 0) {
    uint64_t v4 = (char *)this + 232;
  }
  if ((~a2 & 0x600) != 0) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = (_DWORD *)((char *)this + 400);
  }
  if (a3 < 0 || (unsigned int v7 = v5, v6 = *v5, v7[1] - v6 <= a3)) {
    abort();
  }
  unsigned int v8 = v6 + a3;
  unsigned int v9 = *((unsigned __int16 *)this + 8);
  else {
    unsigned int v10 = v9 >> 5;
  }
  if (v10 <= v8) {
    return 0xFFFFLL;
  }
  if ((v9 & 2) != 0) {
    unsigned int v11 = (char *)this + 18;
  }
  else {
    unsigned int v11 = (char *)*((void *)this + 4);
  }
  return *(unsigned __int16 *)&v11[2 * v8];
}

char *icu::number::impl::ParsedPatternInfo::getEndpoints(icu::number::impl::ParsedPatternInfo *this, int a2)
{
  uint64_t v2 = (char *)this + 224;
  if ((a2 & 0x200) != 0) {
    uint64_t v2 = (char *)this + 392;
  }
  if ((a2 & 0x100) != 0) {
    uint64_t v2 = (char *)this + 216;
  }
  if ((~a2 & 0x300) != 0) {
    int v3 = v2;
  }
  else {
    int v3 = (char *)this + 384;
  }
  if ((a2 & 0x400) != 0) {
    int v3 = (char *)this + 232;
  }
  if ((~a2 & 0x600) != 0) {
    return v3;
  }
  else {
    return (char *)this + 400;
  }
}

uint64_t icu::number::impl::ParsedPatternInfo::length(icu::number::impl::ParsedPatternInfo *this, int a2)
{
  uint64_t v2 = (char *)this + 224;
  if ((a2 & 0x200) != 0) {
    uint64_t v2 = (char *)this + 392;
  }
  if ((a2 & 0x100) != 0) {
    uint64_t v2 = (char *)this + 216;
  }
  if ((~a2 & 0x300) != 0) {
    int v3 = v2;
  }
  else {
    int v3 = (char *)this + 384;
  }
  if ((a2 & 0x400) != 0) {
    int v3 = (char *)this + 232;
  }
  if ((~a2 & 0x600) != 0) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = (_DWORD *)((char *)this + 400);
  }
  return (v4[1] - *v4);
}

uint64_t icu::number::impl::ParsedPatternInfo::getLengthFromEndpoints(_DWORD *a1)
{
  return (a1[1] - *a1);
}

icu::UnicodeString *icu::number::impl::ParsedPatternInfo::getString@<X0>( icu::UnicodeString *this@<X0>, int a2@<W1>, icu::UnicodeString *a3@<X8>)
{
  int v3 = (int *)((char *)this + 224);
  if ((a2 & 0x200) != 0) {
    int v3 = (int *)((char *)this + 392);
  }
  if ((a2 & 0x100) != 0) {
    int v3 = (int *)((char *)this + 216);
  }
  if ((~a2 & 0x300) != 0) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = (int *)((char *)this + 384);
  }
  if ((a2 & 0x400) != 0) {
    uint64_t v4 = (int *)((char *)this + 232);
  }
  if ((~a2 & 0x600) != 0) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = (int *)((char *)this + 400);
  }
  int v6 = *v5;
  int v7 = v5[1];
  if (v7 != v6) {
    return icu::UnicodeString::UnicodeString(a3, (icu::UnicodeString *)((char *)this + 8), v6, (v7 - v6));
  }
  *(void *)a3 = off_18971B688;
  *((_WORD *)a3 + 4) = 2;
  return this;
}

uint64_t icu::number::impl::ParsedPatternInfo::positiveHasPlusSign( icu::number::impl::ParsedPatternInfo *this)
{
  return *((unsigned __int8 *)this + 213);
}

uint64_t icu::number::impl::ParsedPatternInfo::hasNegativeSubpattern( icu::number::impl::ParsedPatternInfo *this)
{
  return *((unsigned __int8 *)this + 432);
}

uint64_t icu::number::impl::ParsedPatternInfo::negativeHasMinusSign( icu::number::impl::ParsedPatternInfo *this)
{
  return *((unsigned __int8 *)this + 380);
}

BOOL icu::number::impl::ParsedPatternInfo::hasCurrencySign(icu::number::impl::ParsedPatternInfo *this)
{
  if (*((_BYTE *)this + 210)) {
    return 1LL;
  }
  if (*((_BYTE *)this + 432)) {
    return *((_BYTE *)this + 378) != 0;
  }
  return 0LL;
}

uint64_t icu::number::impl::ParsedPatternInfo::containsSymbolType(uint64_t a1, int a2, int *a3)
{
  return icu::number::impl::AffixUtils::containsType(a1 + 8, a2, a3);
}

BOOL icu::number::impl::ParsedPatternInfo::hasBody(icu::number::impl::ParsedPatternInfo *this)
{
  return *((_DWORD *)this + 24) > 0;
}

uint64_t icu::number::impl::ParsedPatternInfo::currencyAsDecimal(icu::number::impl::ParsedPatternInfo *this)
{
  return *((unsigned __int8 *)this + 211);
}

uint64_t *icu::number::impl::ParsedPatternInfo::ParserState::peek( icu::number::impl::ParsedPatternInfo::ParserState *this)
{
  int v1 = *((_DWORD *)this + 2);
  uint64_t v2 = *(void *)this;
  else {
    int v3 = (uint64_t *)(*(unsigned __int16 *)(v2 + 8) >> 5);
  }
  if (v1 == (_DWORD)v3) {
    return (uint64_t *)0xFFFFFFFFLL;
  }
  else {
    return icu::UnicodeString::char32At(v3, (icu::UnicodeString *)v2, v1);
  }
}

uint64_t icu::number::impl::ParsedPatternInfo::ParserState::peek2( icu::number::impl::ParsedPatternInfo::ParserState *this)
{
  int v2 = *((_DWORD *)this + 2);
  uint64_t v3 = *(void *)this;
  else {
    uint64_t v4 = (uint64_t *)(*(unsigned __int16 *)(v3 + 8) >> 5);
  }
  if (v2 == (_DWORD)v4) {
    return 0xFFFFFFFFLL;
  }
  int v5 = icu::UnicodeString::char32At(v4, (icu::UnicodeString *)v3, v2) < 0x10000 ? 1 : 2;
  int v6 = v5 + *((_DWORD *)this + 2);
  int v7 = *(unsigned int **)this;
  unsigned int v8 = *(unsigned __int16 *)(*(void *)this + 8LL);
  unsigned int v9 = (v8 & 0x8000) != 0 ? (uint64_t *)v7[3] : (uint64_t *)(v8 >> 5);
  if (v6 == (_DWORD)v9) {
    return 0xFFFFFFFFLL;
  }
  else {
    return (uint64_t)icu::UnicodeString::char32At(v9, (icu::UnicodeString *)v7, v6);
  }
}

uint64_t *icu::number::impl::ParsedPatternInfo::ParserState::next( icu::number::impl::ParsedPatternInfo::ParserState *this)
{
  uint64_t result = icu::number::impl::ParsedPatternInfo::ParserState::peek(this);
  else {
    int v3 = 2;
  }
  *((_DWORD *)this + 2) += v3;
  return result;
}

uint64_t *icu::number::impl::ParsedPatternInfo::consumeSubpattern( icu::number::impl::ParsedPatternInfo *this, UErrorCode *a2)
{
  uint64_t result = icu::number::impl::ParsedPatternInfo::consumePadding((uint64_t)this, 0, a2);
  if (*(int *)a2 <= 0)
  {
    uint64_t result = icu::number::impl::ParsedPatternInfo::consumeAffix( (uint64_t)this,  (_DWORD *)(*((void *)this + 53) + 144LL),  a2);
    if (*(int *)a2 <= 0)
    {
      uint64_t result = icu::number::impl::ParsedPatternInfo::consumePadding((uint64_t)this, 1, a2);
      if (*(int *)a2 <= 0)
      {
        uint64_t result = icu::number::impl::ParsedPatternInfo::consumeFormat(this, a2);
        if (*(int *)a2 <= 0)
        {
          uint64_t result = icu::number::impl::ParsedPatternInfo::consumeExponent(this, a2);
          if (*(int *)a2 <= 0)
          {
            uint64_t result = icu::number::impl::ParsedPatternInfo::consumePadding((uint64_t)this, 2, a2);
            if (*(int *)a2 <= 0)
            {
              uint64_t result = icu::number::impl::ParsedPatternInfo::consumeAffix( (uint64_t)this,  (_DWORD *)(*((void *)this + 53) + 152LL),  a2);
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t *icu::number::impl::ParsedPatternInfo::consumePadding(uint64_t a1, int a2, UErrorCode *a3)
{
  int v6 = (icu::number::impl::ParsedPatternInfo::ParserState *)(a1 + 408);
  uint64_t result = icu::number::impl::ParsedPatternInfo::ParserState::peek((icu::number::impl::ParsedPatternInfo::ParserState *)(a1 + 408));
  if ((_DWORD)result == 42)
  {
    uint64_t v8 = *(void *)(a1 + 424);
    if (*(_BYTE *)(v8 + 48))
    {
      *a3 = U_MULTIPLE_PAD_SPECIFIERS;
    }

    else
    {
      *(_DWORD *)(v8 + 52) = a2;
      *(_BYTE *)(v8 + 48) = 1;
      else {
        int v9 = 2;
      }
      int v10 = v9 + *(_DWORD *)(a1 + 416);
      *(_DWORD *)(a1 + 416) = v10;
      *(_DWORD *)(*(void *)(a1 + 424) + 160LL) = v10;
      uint64_t result = icu::number::impl::ParsedPatternInfo::consumeLiteral((icu::number::impl::ParsedPatternInfo *)a1, a3);
      *(_DWORD *)(*(void *)(a1 + 424) + 164LL) = *(_DWORD *)(a1 + 416);
    }
  }

  return result;
}

uint64_t *icu::number::impl::ParsedPatternInfo::consumeAffix(uint64_t a1, _DWORD *a2, UErrorCode *a3)
{
  int v6 = (icu::number::impl::ParsedPatternInfo::ParserState *)(a1 + 408);
  *a2 = *(_DWORD *)(a1 + 416);
  while (1)
  {
    uint64_t result = icu::number::impl::ParsedPatternInfo::ParserState::peek(v6);
    if ((_DWORD)result == 164)
    {
      *(_BYTE *)(*(void *)(a1 + 424) + 138LL) = 1;
    }

    else if ((_DWORD)result == 8240)
    {
      *(_BYTE *)(*(void *)(a1 + 424) + 137LL) = 1;
    }

uint64_t *icu::number::impl::ParsedPatternInfo::consumeFormat( icu::number::impl::ParsedPatternInfo *this, UErrorCode *a2)
{
  uint64_t result = icu::number::impl::ParsedPatternInfo::consumeIntegerFormat(this, a2);
  if (*(int *)a2 <= 0)
  {
    unsigned int v5 = icu::number::impl::ParsedPatternInfo::ParserState::peek((icu::number::impl::ParsedPatternInfo *)((char *)this + 408));
    uint64_t result = icu::number::impl::ParsedPatternInfo::ParserState::peek((icu::number::impl::ParsedPatternInfo *)((char *)this + 408));
    if (v5 == 46)
    {
      else {
        int v6 = 2;
      }
      *((_DWORD *)this + 104) += v6;
      uint64_t v7 = *((void *)this + 53);
      *(_BYTE *)(v7 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 1;
      ++*(_DWORD *)(v7 + 44);
    }

    else
    {
      if ((_DWORD)result != 164) {
        return result;
      }
      uint64_t result = (uint64_t *)icu::number::impl::ParsedPatternInfo::ParserState::peek2((icu::number::impl::ParsedPatternInfo *)((char *)this + 408));
      uint64_t v8 = *((void *)this + 53);
      *(_WORD *)(v8 + 138) = 257;
      *(_BYTE *)(v8 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 1;
      ++*(_DWORD *)(v8 + 44);
      else {
        int v9 = 2;
      }
      *((_DWORD *)this + 104) += v9;
    }

    return icu::number::impl::ParsedPatternInfo::consumeFractionFormat(this, a2);
  }

  return result;
}

uint64_t *icu::number::impl::ParsedPatternInfo::consumeExponent( icu::number::impl::ParsedPatternInfo *this, UErrorCode *a2)
{
  uint64_t v4 = *((void *)this + 53);
  unsigned int v5 = (icu::number::impl::ParsedPatternInfo *)((char *)this + 408);
  uint64_t result = icu::number::impl::ParsedPatternInfo::ParserState::peek((icu::number::impl::ParsedPatternInfo *)((char *)this + 408));
  if ((_DWORD)result == 69)
  {
    if ((~*(_DWORD *)v4 & 0xFFFF0000) != 0)
    {
      *a2 = U_MALFORMED_EXPONENTIAL_PATTERN;
    }

    else
    {
      else {
        int v7 = 2;
      }
      *((_DWORD *)this + 104) += v7;
      ++*(_DWORD *)(v4 + 44);
      else {
        int v8 = 2;
      }
      *((_DWORD *)this + 104) += v8;
      *(_BYTE *)(v4 + 128) = 1;
      while (1)
      {
        ++*(_DWORD *)(v4 + 44);
LABEL_17:
        uint64_t result = icu::number::impl::ParsedPatternInfo::ParserState::peek(v5);
        if ((_DWORD)result != 48) {
          break;
        }
        else {
          int v9 = 2;
        }
        *((_DWORD *)this + 104) += v9;
        ++*(_DWORD *)(v4 + 132);
      }
    }
  }

  return result;
}

uint64_t *icu::number::impl::ParsedPatternInfo::consumeLiteral( icu::number::impl::ParsedPatternInfo *this, UErrorCode *a2)
{
  uint64_t v4 = (icu::number::impl::ParsedPatternInfo *)((char *)this + 408);
  uint64_t result = icu::number::impl::ParsedPatternInfo::ParserState::peek((icu::number::impl::ParsedPatternInfo *)((char *)this + 408));
  if ((_DWORD)result == -1)
  {
LABEL_16:
    *a2 = U_PATTERN_SYNTAX_ERROR;
    return result;
  }

  unsigned int v6 = icu::number::impl::ParsedPatternInfo::ParserState::peek(v4);
  uint64_t result = icu::number::impl::ParsedPatternInfo::ParserState::peek(v4);
  else {
    int v7 = 2;
  }
  *((_DWORD *)this + 104) += v7;
  if (v6 == 39)
  {
    for (; icu::number::impl::ParsedPatternInfo::ParserState::peek(v4) != 39; *((_DWORD *)this + 104) += v8)
    {
      uint64_t result = icu::number::impl::ParsedPatternInfo::ParserState::peek(v4);
      if ((_DWORD)result == -1) {
        goto LABEL_16;
      }
      else {
        int v8 = 2;
      }
    }

    uint64_t result = icu::number::impl::ParsedPatternInfo::ParserState::peek(v4);
    else {
      int v9 = 2;
    }
    *((_DWORD *)this + 104) += v9;
  }

  return result;
}

uint64_t *icu::number::impl::ParsedPatternInfo::consumeIntegerFormat( icu::number::impl::ParsedPatternInfo *this, UErrorCode *a2)
{
  uint64_t v4 = (uint64_t *)*((void *)this + 53);
  unsigned int v5 = (icu::number::impl::ParsedPatternInfo *)((char *)this + 408);
  while (1)
  {
    uint64_t result = icu::number::impl::ParsedPatternInfo::ParserState::peek(v5);
    if (((_DWORD)result - 48) < 0xA)
    {
      ++*((_DWORD *)v4 + 11);
      ++*v4;
      ++*((_DWORD *)v4 + 4);
      ++*((_DWORD *)v4 + 6);
      if (!icu::number::impl::DecimalQuantity::isZeroish((icu::number::impl::DecimalQuantity *)(v4 + 7))
        || icu::number::impl::ParsedPatternInfo::ParserState::peek(v5) != 48)
      {
        unsigned __int8 v7 = icu::number::impl::ParsedPatternInfo::ParserState::peek(v5);
        icu::number::impl::DecimalQuantity::appendDigit( (icu::number::impl::DecimalQuantity *)(v4 + 7),  (char)(v7 - 48),  0,  1);
      }

      goto LABEL_7;
    }

    if ((_DWORD)result == 35)
    {
      ++*((_DWORD *)v4 + 11);
      ++*v4;
      else {
        ++*((_DWORD *)v4 + 3);
      }
      ++*((_DWORD *)v4 + 6);
      goto LABEL_7;
    }

    if ((_DWORD)result != 64) {
      break;
    }
    if (*((int *)v4 + 4) > 0 || *((int *)v4 + 3) > 0)
    {
LABEL_23:
      UErrorCode v9 = U_UNEXPECTED_TOKEN;
LABEL_24:
      *a2 = v9;
      return result;
    }

    ++*((_DWORD *)v4 + 11);
    ++*v4;
    *(uint64_t *)((char *)v4 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = (uint64_t)vadd_s32(*(int32x2_t *)((char *)v4 + 20), (int32x2_t)0x100000001LL);
LABEL_7:
    else {
      int v8 = 2;
    }
    *((_DWORD *)this + 104) += v8;
  }

  if ((_DWORD)result == 44)
  {
    ++*((_DWORD *)v4 + 11);
    *v4 <<= 16;
    goto LABEL_7;
  }

  UErrorCode v9 = U_UNEXPECTED_TOKEN;
  uint64_t v10 = *v4;
  if (!WORD1(v10) && (v10 & 0xFFFF00000000LL) != 0xFFFF00000000LL)
  {
    UErrorCode v9 = U_PATTERN_SYNTAX_ERROR;
    goto LABEL_24;
  }

  return result;
}

uint64_t *icu::number::impl::ParsedPatternInfo::consumeFractionFormat( icu::number::impl::ParsedPatternInfo *this, UErrorCode *a2)
{
  int v4 = 0;
  unsigned int v5 = (int32x2_t *)*((void *)this + 53);
  unsigned int v6 = (icu::number::impl::ParsedPatternInfo *)((char *)this + 408);
  while (1)
  {
    uint64_t result = icu::number::impl::ParsedPatternInfo::ParserState::peek(v6);
    if (((_DWORD)result - 48) >= 0xA)
    {
      if ((_DWORD)result != 35) {
        return result;
      }
      ++v5[5].i32[1];
      v5[4] = vadd_s32(v5[4], (int32x2_t)0x100000001LL);
LABEL_5:
      ++v4;
      goto LABEL_7;
    }

    if (v5[4].i32[0] >= 1) {
      break;
    }
    ++v5[5].i32[1];
    ++v5[3].i32[1];
    ++v5[4].i32[1];
    unsigned __int8 v8 = icu::number::impl::ParsedPatternInfo::ParserState::peek(v6);
    icu::number::impl::DecimalQuantity::appendDigit( (icu::number::impl::DecimalQuantity *)&v5[7],  (char)(v8 - 48),  v4,  0);
    int v4 = 0;
LABEL_7:
    else {
      int v9 = 2;
    }
    *((_DWORD *)this + 104) += v9;
  }

  *a2 = U_UNEXPECTED_TOKEN;
  return result;
}

void *icu::number::impl::PatternParser::patternInfoToProperties( uint64_t a1, uint64_t a2, int a3, const icu::UnicodeString *a4)
{
  uint64_t v50 = *MEMORY[0x1895F89C0];
  if (a3) {
    BOOL v7 = a3 != 1 || *(_BYTE *)(a2 + 210) != 0;
  }
  else {
    BOOL v7 = 0;
  }
  uint64_t v8 = *(void *)(a2 + 72);
  int v9 = (__int16)v8;
  *(_DWORD *)(a1 + 76) = v9;
  *(_BYTE *)(a1 + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = (int)v8 >> 16 != -1;
  if ((~v8 & 0xFFFF00000000LL) != 0) {
    int v10 = (int)v8 >> 16;
  }
  else {
    int v10 = -1;
  }
  *(_DWORD *)(a1 + 752) = v10;
  if (*(_DWORD *)(a2 + 96)) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = *(_DWORD *)(a2 + 108) < 1;
  }
  if (v11)
  {
    int v12 = *(_DWORD *)(a2 + 88);
    int v13 = *(_DWORD *)(a2 + 100);
    if (v12 | v13) {
      int v15 = *(_DWORD *)(a2 + 88);
    }
    else {
      int v15 = 1;
    }
    if (v12 | v13) {
      int v14 = *(_DWORD *)(a2 + 100);
    }
    else {
      int v14 = 0;
    }
  }

  else
  {
    int v14 = uprv_max(1LL, *(_DWORD *)(a2 + 100));
    int v15 = 0;
  }

  int v16 = *(_DWORD *)(a2 + 92);
  if (v16 < 1)
  {
    if (icu::number::impl::DecimalQuantity::isZeroish((icu::number::impl::DecimalQuantity *)(a2 + 128)))
    {
      int v18 = *(_DWORD *)(a2 + 108);
      if (v7) {
        int v19 = -1;
      }
      else {
        int v19 = v14;
      }
      if (v7) {
        int v18 = -1;
      }
      *(_DWORD *)(a1 + 104) = v19;
      *(_DWORD *)(a1 + 88) = v18;
      *(void *)(a1 + 736) = 0LL;
    }

    else
    {
      if (v7)
      {
        *(_DWORD *)(a1 + 104) = -1;
        *(_DWORD *)(a1 + 88) = -1;
        double v20 = 0.0;
      }

      else
      {
        *(_DWORD *)(a1 + 104) = v14;
        *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 108);
        double v20 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)(a2 + 128));
      }

      *(double *)(a1 + 736) = v20;
    }

    int v17 = -1;
    *(_DWORD *)(a1 + 116) = -1;
  }

  else
  {
    *(_DWORD *)(a1 + 104) = -1;
    *(_DWORD *)(a1 + 88) = -1;
    *(void *)(a1 + 736) = 0LL;
    *(_DWORD *)(a1 + 116) = v16;
    int v17 = *(_DWORD *)(a2 + 84) + v16;
  }

  *(_DWORD *)(a1 + 96) = v17;
  if (*(_BYTE *)(a2 + 112)) {
    BOOL v21 = *(_DWORD *)(a2 + 108) == 0;
  }
  else {
    BOOL v21 = 0;
  }
  char v22 = v21;
  *(_BYTE *)(a1 + 65) = v22;
  *(_BYTE *)(a1 + 67) = *(_BYTE *)(a2 + 211);
  int v23 = *(_DWORD *)(a2 + 204);
  if (v23 < 1)
  {
    *(_BYTE *)(a1 + 66) = 0;
    int v24 = -1;
    *(_DWORD *)(a1 + 10icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = -1;
    *(_DWORD *)(a1 + 112) = v15;
  }

  else
  {
    *(_BYTE *)(a1 + 66) = *(_BYTE *)(a2 + 200);
    *(_DWORD *)(a1 + 10icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v23;
    if (*(_DWORD *)(a2 + 92))
    {
      *(_DWORD *)(a1 + 112) = 1;
      int v24 = -1;
    }

    else
    {
      *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 88);
      int v24 = *(_DWORD *)(a2 + 96);
    }
  }

  *(_DWORD *)(a1 + 92) = v24;
  memset(v49, 0, sizeof(v49));
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 32LL))(v49, a2, 256LL);
  memset(v48, 0, sizeof(v48));
  (*(void (**)(_OWORD *__return_ptr, uint64_t, void))(*(void *)a2 + 32LL))(v48, a2, 0LL);
  if (!*(_BYTE *)(a2 + 120))
  {
    *(_DWORD *)(a1 + 72) = -1;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)(a1 + 392));
    *(_BYTE *)(a1 + 384) = 1;
    goto LABEL_68;
  }

  int v26 = *(_DWORD *)(a2 + 116);
  int v27 = icu::number::impl::AffixUtils::estimateLength((icu::number::impl::AffixUtils *)v49, a4, v25);
  *(_DWORD *)(a1 + 72) = v27
                       + icu::number::impl::AffixUtils::estimateLength((icu::number::impl::AffixUtils *)v48, a4, v28)
                       + v26;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 32LL))(&v44, a2, 1024LL);
  if (SWORD4(v44) < 0)
  {
    int v29 = HIDWORD(v44);
    if (HIDWORD(v44) == 1) {
      goto LABEL_63;
    }
    if (HIDWORD(v44) != 2) {
      goto LABEL_64;
    }
LABEL_55:
    if ((BYTE8(v44) & 2) != 0) {
      int v30 = (_WORD *)((unint64_t)&v44 | 0xA);
    }
    else {
      int v30 = (_WORD *)*((void *)&v45 + 1);
    }
    if (*v30 == 39)
    {
      icu::UnicodeString::unBogus(a1 + 392);
      unsigned int v31 = *(unsigned __int16 *)(a1 + 400);
      int v32 = (__int16)v31;
      unsigned int v33 = v31 >> 5;
      if (v32 >= 0) {
        uint64_t v34 = v33;
      }
      else {
        uint64_t v34 = *(unsigned int *)(a1 + 404);
      }
      icu::UnicodeString::doReplace(a1 + 392, 0LL, v34, (uint64_t)L"'", 0, 0xFFFFFFFFLL);
      goto LABEL_67;
    }

    __int128 v35 = (UChar **)(a1 + 392);
    goto LABEL_66;
  }

  if ((WORD4(v44) & 0xFFE0) == 0x40) {
    goto LABEL_55;
  }
  if ((WORD4(v44) & 0xFFE0) == 0x20)
  {
LABEL_63:
    __int128 v35 = (UChar **)(a1 + 392);
LABEL_66:
    icu::UnicodeString::operator=(v35, (UChar **)&v44);
    goto LABEL_67;
  }

  int v29 = WORD4(v44) >> 5;
LABEL_64:
  icu::UnicodeString::UnicodeString( (icu::UnicodeString *)v43,  (const icu::UnicodeString *)&v44,  1,  (v29 - 2));
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 392), (icu::UnicodeString *)v43);
  icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)v43);
LABEL_67:
  __int128 v37 = (void *)*(unsigned int *)(a2 + 124);
  *(_DWORD *)(a1 + 388) = (_DWORD)v37;
  *(_BYTE *)(a1 + 384) = 0;
  icu::UnicodeString::~UnicodeString(v37, (icu::UnicodeString *)&v44);
LABEL_68:
  icu::UnicodeString::operator=((UChar **)(a1 + 544), (UChar **)v49);
  icu::UnicodeString::operator=((UChar **)(a1 + 672), (UChar **)v48);
  if (*(_BYTE *)(a2 + 432))
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 32LL))(&v44, a2, 768LL);
    icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 192), (icu::UnicodeString *)&v44);
    icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)&v44);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 32LL))(&v44, a2, 512LL);
    icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 320), (icu::UnicodeString *)&v44);
    icu::UnicodeString::~UnicodeString(v39, (icu::UnicodeString *)&v44);
  }

  else
  {
    icu::UnicodeString::setToBogus((icu::UnicodeString *)(a1 + 192));
    icu::UnicodeString::setToBogus((icu::UnicodeString *)(a1 + 320));
  }

  if (*(_BYTE *)(a2 + 208))
  {
    uint64_t v40 = 2LL;
  }

  else
  {
    uint64_t v40 = *(unsigned __int8 *)(a2 + 209);
    if (!*(_BYTE *)(a2 + 209))
    {
      *(_DWORD *)(a1 + 84) = 0;
      goto LABEL_76;
    }

    uint64_t v40 = 3LL;
  }

  *(_DWORD *)(a1 + 84) = v40;
LABEL_76:
  icu::UnicodeString::~UnicodeString((void *)v40, (icu::UnicodeString *)v48);
  return icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)v49);
}

uint64_t icu::number::impl::PatternStringUtils::ignoreRoundingIncrement( icu::number::impl::PatternStringUtils *this, double *a2)
{
  double v2 = *(double *)this + *(double *)this;
  double v3 = 20.0;
  if (v2 > 1.0) {
    goto LABEL_7;
  }
  int v4 = 0;
  do
  {
    int v5 = v4;
    double v2 = v2 * 10.0;
    double v3 = v3 * 10.0;
    ++v4;
  }

  while (v2 <= 1.0);
LABEL_7:
  uint64_t v6 = 0LL;
  *(double *)this = (double)(int)(v2 * 10.0) / v3;
  return v6;
}

void *icu::number::impl::PatternStringUtils::propertiesToPatternString@<X0>( icu::number::impl::PatternStringUtils *this@<X0>, const icu::number::impl::DecimalFormatProperties *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v145 = *MEMORY[0x1895F89C0];
  *(_OWORD *)(a3 + 8) = 0u;
  *(void *)(a3 + 56) = 0LL;
  *(_OWORD *)(a3 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(void *)a3 = off_18971B688;
  *(_WORD *)(a3 + 8) = 2;
  int v6 = uprv_min(*((unsigned int *)this + 19), 100);
  int v111 = uprv_max(0LL, v6);
  int v7 = uprv_min(*((unsigned int *)this + 188), 100);
  int v113 = uprv_max(0LL, v7);
  int v114 = *((unsigned __int8 *)this + 80);
  int v106 = uprv_min(*((unsigned int *)this + 18), 100);
  uint64_t v104 = *((void *)this + 48);
  memset(v144, 0, sizeof(v144));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v144, (UChar **)this + 49);
  int v8 = uprv_min(*((unsigned int *)this + 28), 100);
  int v9 = uprv_max(0LL, v8);
  unsigned int v107 = uprv_min(*((unsigned int *)this + 23), 100);
  int v10 = uprv_min(*((unsigned int *)this + 26), 100);
  int v11 = uprv_max(0LL, v10);
  int v110 = uprv_min(*((unsigned int *)this + 22), 100);
  int v12 = uprv_min(*((unsigned int *)this + 29), 100);
  int v13 = uprv_min(*((unsigned int *)this + 24), 100);
  int v102 = *((unsigned __int8 *)this + 65);
  int v14 = uprv_min(*((unsigned int *)this + 25), 100);
  int v103 = *((unsigned __int8 *)this + 66);
  bzero(v134, 0x990uLL);
  v133[0] = off_189727980;
  v133[1] = off_18971B688;
  v134[0] = 2;
  uint64_t v135 = off_18971B688;
  __int16 v136 = 2;
  __int128 v137 = off_18971B688;
  __int16 v138 = 2;
  __int128 v139 = off_18971B688;
  __int16 v140 = 2;
  char v141 = 1;
  v142[0] = off_189727A28;
  uint64_t v15 = 35LL;
  do
  {
    int v16 = &v133[v15];
    void *v16 = off_189727980;
    v16[1] = off_18971B688;
    *((_WORD *)v16 + 8) = 2;
    v16[9] = off_18971B688;
    *((_WORD *)v16 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
    v16[17] = off_18971B688;
    *((_WORD *)v16 + 72) = 2;
    v16[25] = off_18971B688;
    *((_WORD *)v16 + 104) = 2;
    v15 += 34LL;
    *((_BYTE *)v16 + 266) = 1;
  }

  while (v16 + 34 != (void *)&v143);
  char v143 = 1;
  int v17 = (icu::CurrencyPluralInfo *)*((void *)this + 6);
  if (v17)
  {
    char v141 = 1;
    sub_180930678((uint64_t)v142, v17, (uint64_t *)this, a2);
    if (v143) {
      int v18 = v133;
    }
    else {
      int v18 = v142;
    }
  }

  else
  {
    int v18 = v133;
    sub_18092FF9C((uint64_t)v133, (uint64_t)this, a2);
    char v143 = 1;
  }

  (*(void (**)(__int128 *__return_ptr, void *, uint64_t))(*v18 + 32LL))(&v123, v18, 256LL);
  if ((SWORD4(v123) & 0x8000u) == 0) {
    uint64_t v19 = WORD4(v123) >> 5;
  }
  else {
    uint64_t v19 = HIDWORD(v123);
  }
  icu::UnicodeString::doAppend(a3, (const icu::UnicodeString *)&v123, 0, v19);
  icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v123);
  unsigned int v21 = *(unsigned __int16 *)(a3 + 8);
  int v22 = (__int16)v21;
  unsigned int v23 = v21 >> 5;
  if (v22 >= 0) {
    unsigned int v24 = v23;
  }
  else {
    unsigned int v24 = *(_DWORD *)(a3 + 12);
  }
  int v25 = v111;
  double v26 = *((double *)this + 92);
  if (v111 == v113) {
    int v25 = 0;
  }
  __int128 v129 = 0u;
  int v112 = v25;
  uint64_t v132 = 0LL;
  if (v114) {
    int v27 = v113 + v25 + 1;
  }
  else {
    int v27 = 1;
  }
  unsigned int v105 = v27;
  __int128 v131 = 0uLL;
  __int128 v130 = 0uLL;
  __int128 v128 = off_18971B688;
  LOWORD(v129) = 2;
  if (v13 != uprv_min(100LL, -1))
  {
    int v36 = (unsigned __int16)v129 >> 5;
    if ((v129 & 0x8000u) != 0LL) {
      int v36 = DWORD1(v129);
    }
    while (v36 < v12)
    {
      LOWORD(v123) = 64;
      icu::UnicodeString::doAppend((uint64_t)&v128, (uint64_t)&v123, 0, 1LL);
      int v36 = (unsigned __int16)v129 >> 5;
      if ((v129 & 0x8000u) != 0LL) {
        int v36 = DWORD1(v129);
      }
    }

    if (v36 < v13)
    {
      do
      {
        LOWORD(v123) = 35;
        icu::UnicodeString::doAppend((uint64_t)&v128, (uint64_t)&v123, 0, 1LL);
        int v37 = (unsigned __int16)v129 >> 5;
        if ((v129 & 0x8000u) != 0LL) {
          int v37 = DWORD1(v129);
        }
      }

      while (v37 < v13);
    }

    goto LABEL_47;
  }

  if (v26 == 0.0)
  {
LABEL_47:
    LowerDisplayint Magnitude = 0;
    goto LABEL_50;
  }

  if ((v110 & 0x80000000) == 0)
  {
    double v28 = v26 + v26;
    double v29 = 20.0;
    if (v26 + v26 > 1.0) {
      goto LABEL_27;
    }
    int v30 = 0;
    do
    {
      int v31 = v30;
      double v28 = v28 * 10.0;
      double v29 = v29 * 10.0;
      if (v30 >= v110) {
        break;
      }
      ++v30;
    }

    while (v28 <= 1.0);
    if (v31 < v110)
    {
LABEL_27:
      double v26 = (double)(int)(v28 * 10.0) / v29;
      goto LABEL_28;
    }

    goto LABEL_47;
  }

uint64_t icu::number::impl::PatternStringUtils::escapePaddingString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = *(unsigned __int16 *)(a1 + 8);
  if (*(__int16 *)(a1 + 8) < 0)
  {
    if (*(_DWORD *)(a1 + 12)) {
      goto LABEL_9;
    }
  }

  else if (v6 >> 5)
  {
    goto LABEL_9;
  }

  icu::UnicodeString::unBogus(a1);
  else {
    uint64_t v7 = *(unsigned __int16 *)(a1 + 8) >> 5;
  }
  icu::UnicodeString::doReplace(a1, 0LL, v7, (uint64_t)&unk_180A3ABF6, 0, 0xFFFFFFFFLL);
  LOWORD(v6) = *(_WORD *)(a1 + 8);
LABEL_9:
  unsigned int v8 = *(unsigned __int16 *)(a2 + 8);
  unsigned int v9 = *(_DWORD *)(a2 + 12);
  if ((v6 & 0x8000) == 0)
  {
    if ((v6 & 0xFFE0) == 0x20) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }

  if (*(_DWORD *)(a1 + 12) != 1)
  {
LABEL_17:
    unsigned int v25 = *(_DWORD *)(a2 + 12);
    __int16 v26 = 39;
    int v14 = 1;
    icu::UnicodeString::doReplace(a2, a3, 0LL, (uint64_t)&v26, 0, 1LL);
    for (unint64_t i = 0LL; ; ++i)
    {
      if (*(__int16 *)(a1 + 8) < 0)
      {
        if ((uint64_t)i >= *(int *)(a1 + 12))
        {
LABEL_31:
          __int16 v26 = 39;
          icu::UnicodeString::doReplace(a2, (v14 + a3), 0LL, (uint64_t)&v26, 0, 1LL);
          unsigned int v9 = v25;
          goto LABEL_33;
        }

        unint64_t v16 = *(unsigned int *)(a1 + 12);
      }

      else
      {
        unint64_t v16 = (unint64_t)*(unsigned __int16 *)(a1 + 8) >> 5;
      }

      if (v16 <= i)
      {
        LOWORD(v18) = -1;
      }

      else
      {
        uint64_t v17 = a1 + 10;
        if ((*(_WORD *)(a1 + 8) & 2) == 0) {
          uint64_t v17 = *(void *)(a1 + 24);
        }
        int v18 = *(unsigned __int16 *)(v17 + 2 * i);
        if (v18 == 39)
        {
          icu::UnicodeString::doReplace(a2, (v14 + a3), 0LL, (uint64_t)"'", 0, 0xFFFFFFFFLL);
          int v19 = 2;
          goto LABEL_30;
        }
      }

      __int16 v26 = v18;
      int v19 = 1;
      icu::UnicodeString::doReplace(a2, (v14 + a3), 0LL, (uint64_t)&v26, 0, 1LL);
LABEL_30:
      v14 += v19;
    }
  }

void *icu::number::impl::PatternStringUtils::convertLocalized@<X0>( icu::number::impl::PatternStringUtils *this@<X0>, UChar **a2@<X1>, const icu::DecimalFormatSymbols *a3@<X2>, _DWORD *a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int v6 = a3;
  uint64_t v81 = *MEMORY[0x1895F89C0];
  bzero(v80, 0xA80uLL);
  for (uint64_t i = 0LL; i != 2688; i += 64LL)
  {
    int v11 = &v80[i];
    *(void *)int v11 = off_18971B688;
    *((_WORD *)v11 + 4) = 2;
  }

  uint64_t v12 = v6 ^ 1;
  icu::UnicodeString::UnicodeString((uint64_t)&v76, (uint64_t)L"%");
  uint64_t v13 = (icu::UnicodeString *)&v80[64 * v12];
  icu::UnicodeString::operator=(v13, (icu::UnicodeString *)&v76);
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v76);
  uint64_t v15 = v6;
  unint64_t v16 = (UChar **)&v80[64 * (unint64_t)v6];
  icu::UnicodeString::operator=(v16, a2 + 25);
  icu::UnicodeString::UnicodeString((uint64_t)&v76, (uint64_t)"0 ");
  icu::UnicodeString::operator=((icu::UnicodeString *)&v80[64 * v12 + 128], (icu::UnicodeString *)&v76);
  icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v76);
  icu::UnicodeString::operator=((UChar **)&v80[64 * v15 + 128], a2 + 97);
  icu::UnicodeString::UnicodeString((uint64_t)&v76, (uint64_t)".");
  icu::UnicodeString::operator=((icu::UnicodeString *)&v80[64 * v12 + 256], (icu::UnicodeString *)&v76);
  icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v76);
  icu::UnicodeString::operator=((UChar **)&v80[64 * v15 + 256], a2 + 1);
  icu::UnicodeString::UnicodeString((uint64_t)&v76, (uint64_t)",");
  icu::UnicodeString::operator=((icu::UnicodeString *)&v80[64 * v12 + 384], (icu::UnicodeString *)&v76);
  icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v76);
  icu::UnicodeString::operator=((UChar **)&v80[64 * v15 + 384], a2 + 9);
  icu::UnicodeString::UnicodeString((uint64_t)&v76, (uint64_t)L"-");
  icu::UnicodeString::operator=((icu::UnicodeString *)&v80[64 * v12 + 512], (icu::UnicodeString *)&v76);
  icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v76);
  icu::UnicodeString::operator=((UChar **)&v80[64 * v15 + 512], a2 + 49);
  icu::UnicodeString::UnicodeString((uint64_t)&v76, (uint64_t)"+");
  icu::UnicodeString::operator=((icu::UnicodeString *)&v80[64 * v12 + 640], (icu::UnicodeString *)&v76);
  icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)&v76);
  icu::UnicodeString::operator=((UChar **)&v80[64 * v15 + 640], a2 + 57);
  icu::UnicodeString::UnicodeString((uint64_t)&v76, (uint64_t)";");
  icu::UnicodeString::operator=((icu::UnicodeString *)&v80[64 * v12 + 768], (icu::UnicodeString *)&v76);
  icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v76);
  icu::UnicodeString::operator=((UChar **)&v80[64 * v15 + 768], a2 + 17);
  icu::UnicodeString::UnicodeString((uint64_t)&v76, (uint64_t)"@");
  icu::UnicodeString::operator=((icu::UnicodeString *)&v80[64 * v12 + 896], (icu::UnicodeString *)&v76);
  icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v76);
  icu::UnicodeString::operator=((UChar **)&v80[64 * v15 + 896], a2 + 129);
  icu::UnicodeString::UnicodeString((uint64_t)&v76, (uint64_t)"E");
  icu::UnicodeString::operator=((icu::UnicodeString *)&v80[64 * v12 + 1024], (icu::UnicodeString *)&v76);
  icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)&v76);
  icu::UnicodeString::operator=((UChar **)&v80[64 * v15 + 1024], a2 + 89);
  icu::UnicodeString::UnicodeString((uint64_t)&v76, (uint64_t)"*");
  icu::UnicodeString::operator=((icu::UnicodeString *)&v80[64 * v12 + 1152], (icu::UnicodeString *)&v76);
  icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)&v76);
  icu::UnicodeString::operator=((UChar **)&v80[64 * v15 + 1152], a2 + 105);
  icu::UnicodeString::UnicodeString((uint64_t)&v76, (uint64_t)"#");
  icu::UnicodeString::operator=((icu::UnicodeString *)&v80[64 * v12 + 1280], (icu::UnicodeString *)&v76);
  icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)&v76);
  icu::UnicodeString::operator=((UChar **)&v80[64 * v15 + 1280], a2 + 41);
  unint64_t v27 = 0LL;
  double v28 = a2 + 33;
  double v29 = v16 + 176;
  int v30 = a2 + 137;
  unsigned int v31 = 48;
  do
  {
    int v32 = (char *)v13 + v27;
    else {
      uint64_t v33 = *(unsigned __int16 *)((char *)v13 + v27 + 1416) >> 5;
    }
    icu::UnicodeString::replace((icu::UnicodeString *)(v32 + 1408), 0LL, v33, v31);
    if (v27) {
      uint64_t v34 = v30;
    }
    else {
      uint64_t v34 = v28;
    }
    icu::UnicodeString::operator=(&v29[v27 / 8], v34);
    ++v31;
    v27 += 128LL;
    v30 += 8;
  }

  while (v27 != 1280);
  for (uint64_t j = 0LL; j != 2688; j += 128LL)
  {
    int v36 = &v80[64 * v15];
    icu::UnicodeString::UnicodeString((uint64_t)&v76, 39);
    icu::UnicodeString::UnicodeString((uint64_t)&v73, 8217);
    else {
      int32_t v37 = *(unsigned __int16 *)&v36[j + 8] >> 5;
    }
    if ((SWORD4(v76) & 0x8000u) == 0) {
      uint64_t v38 = WORD4(v76) >> 5;
    }
    else {
      uint64_t v38 = HIDWORD(v76);
    }
    int v39 = v74 >> 5;
    if ((v74 & 0x8000u) != 0) {
      int v39 = v75;
    }
    icu::UnicodeString::findAndReplace( (icu::UnicodeString *)&v36[j],  0,  v37,  (const icu::UnicodeString *)&v76,  0,  v38,  (const icu::UnicodeString *)&v73,  0,  v39);
    icu::UnicodeString::~UnicodeString(v40, (icu::UnicodeString *)&v73);
    icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)&v76);
  }

  unsigned int v42 = 0;
  int v43 = 0;
  *(_OWORD *)(a5 + 8) = 0u;
  *(void *)(a5 + 56) = 0LL;
  *(_OWORD *)(a5 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *(_OWORD *)(a5 + 24) = 0u;
  *(void *)a5 = off_18971B688;
  *(_WORD *)(a5 + 8) = 2;
  while (1)
  {
    unsigned int v44 = *((unsigned __int16 *)this + 4);
    int v45 = v44 >> 5;
LABEL_26:
    if (v45 <= v43)
    {
      LOWORD(v47) = -1;
    }

    else
    {
      if ((v44 & 2) != 0) {
        int v46 = (char *)this + 10;
      }
      else {
        int v46 = (char *)*((void *)this + 3);
      }
      int v47 = *(unsigned __int16 *)&v46[2 * v43];
      if (v47 == 39)
      {
        unsigned int v48 = v42;
        unsigned int v42 = 3;
        switch(v48)
        {
          case 0u:
            LOWORD(v76) = 39;
            unsigned int v42 = 1;
            goto LABEL_73;
          case 1u:
            LOWORD(v76) = 39;
            icu::UnicodeString::doAppend(a5, (uint64_t)&v76, 0, 1LL);
            unsigned int v42 = 0;
            break;
          case 2u:
            goto LABEL_88;
          case 3u:
            LOWORD(v76) = 39;
            unsigned int v42 = 1;
            icu::UnicodeString::doAppend(a5, (uint64_t)&v76, 0, 1LL);
            LOWORD(v76) = 39;
            goto LABEL_73;
          case 4u:
            unsigned int v42 = 5;
            break;
          default:
            LOWORD(v76) = 39;
            icu::UnicodeString::doAppend(a5, (uint64_t)&v76, 0, 1LL);
            LOWORD(v76) = 39;
            icu::UnicodeString::doAppend(a5, (uint64_t)&v76, 0, 1LL);
            unsigned int v42 = 4;
            break;
        }

        goto LABEL_88;
      }
    }

    if (v42 <= 4 && ((1 << v42) & 0x19) != 0)
    {
      for (uint64_t k = 0LL; k != 2688; k += 128LL)
      {
        char v50 = &v80[k];
        __int128 v78 = 0u;
        __int128 v79 = 0u;
        __int128 v76 = 0u;
        __int128 v77 = 0u;
        unsigned int v51 = *(unsigned __int16 *)&v80[k + 8];
        if ((v51 & 0x8000) != 0) {
          int32_t v52 = *((_DWORD *)v50 + 3);
        }
        else {
          int32_t v52 = v51 >> 5;
        }
        icu::UnicodeString::tempSubString(this, v43, v52, (icu::UnicodeString *)&v76);
        if ((BYTE8(v76) & 1) != 0)
        {
          BOOL v55 = (void *)*((unsigned __int16 *)v50 + 4);
        }

        else
        {
          if ((SWORD4(v76) & 0x8000u) == 0) {
            int v53 = WORD4(v76) >> 5;
          }
          else {
            int v53 = HIDWORD(v76);
          }
          unsigned int v54 = *((unsigned __int16 *)v50 + 4);
          if ((v54 & 0x8000u) == 0) {
            BOOL v55 = (void *)(v54 >> 5);
          }
          else {
            BOOL v55 = (void *)*(unsigned int *)&v80[k + 12];
          }
          if ((v54 & 1) == 0
            && v53 == (_DWORD)v55
            && icu::UnicodeString::doEquals((icu::UnicodeString *)&v76, (const icu::UnicodeString *)&v80[k], v53))
          {
            LODWORD(v55) = *(unsigned __int16 *)&v80[k + 8];
LABEL_78:
            else {
              unsigned int v64 = v55 >> 5;
            }
            if (v42 - 3 <= 1)
            {
              __int16 v73 = 39;
              icu::UnicodeString::doAppend(a5, (uint64_t)&v73, 0, 1LL);
              unsigned int v42 = 0;
            }

            int v43 = v43 + v64 - 1;
            unsigned int v65 = *(unsigned __int16 *)&v80[k + 72];
            int v66 = (__int16)v65;
            unsigned int v67 = v65 >> 5;
            if (v66 >= 0) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = *(unsigned int *)&v80[k + 76];
            }
            icu::UnicodeString::doAppend(a5, (const icu::UnicodeString *)&v80[k + 64], 0, v68);
LABEL_87:
            icu::UnicodeString::~UnicodeString(v63, (icu::UnicodeString *)&v76);
            goto LABEL_88;
          }
        }

        icu::UnicodeString::~UnicodeString(v55, (icu::UnicodeString *)&v76);
      }

      for (uint64_t m = 0LL; m != 2688; m += 128LL)
      {
        __int128 v78 = 0u;
        __int128 v79 = 0u;
        __int128 v76 = 0u;
        __int128 v77 = 0u;
        unsigned int v57 = &v80[m];
        unsigned int v58 = *(unsigned __int16 *)&v80[m + 72];
        if ((v58 & 0x8000) != 0) {
          int32_t v59 = *((_DWORD *)v57 + 19);
        }
        else {
          int32_t v59 = v58 >> 5;
        }
        icu::UnicodeString::tempSubString(this, v43, v59, (icu::UnicodeString *)&v76);
        if ((BYTE8(v76) & 1) != 0)
        {
          int v62 = (void *)*((unsigned __int16 *)v57 + 36);
        }

        else
        {
          if ((SWORD4(v76) & 0x8000u) == 0) {
            int v60 = WORD4(v76) >> 5;
          }
          else {
            int v60 = HIDWORD(v76);
          }
          unsigned int v61 = *((unsigned __int16 *)v57 + 36);
          if ((v61 & 0x8000u) == 0) {
            int v62 = (void *)(v61 >> 5);
          }
          else {
            int v62 = (void *)*(unsigned int *)&v80[m + 76];
          }
          if ((v61 & 1) == 0
            && v60 == (_DWORD)v62
            && icu::UnicodeString::doEquals((icu::UnicodeString *)&v76, (const icu::UnicodeString *)(v57 + 64), v60))
          {
LABEL_75:
            if (!v42)
            {
              __int16 v73 = 39;
              icu::UnicodeString::doAppend(a5, (uint64_t)&v73, 0, 1LL);
              unsigned int v42 = 4;
            }

            __int16 v73 = v47;
            icu::UnicodeString::doAppend(a5, (uint64_t)&v73, 0, 1LL);
            goto LABEL_87;
          }
        }

        icu::UnicodeString::~UnicodeString(v62, (icu::UnicodeString *)&v76);
      }

      if (v42 - 3 <= 1)
      {
        LOWORD(v76) = 39;
        icu::UnicodeString::doAppend(a5, (uint64_t)&v76, 0, 1LL);
        unsigned int v42 = 0;
      }

      LOWORD(v76) = v47;
LABEL_73:
      icu::UnicodeString::doAppend(a5, (uint64_t)&v76, 0, 1LL);
    }

    else
    {
      LOWORD(v76) = v47;
      icu::UnicodeString::doAppend(a5, (uint64_t)&v76, 0, 1LL);
      unsigned int v42 = 2;
    }

uint64_t icu::number::impl::PatternStringUtils::patternInfoToStringBuilder( uint64_t a1, int a2, int a3, int a4, int a5, unsigned __int8 a6, int a7, uint64_t a8)
{
  if (a3 == 1) {
    int v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48LL))(a1) ^ 1;
  }
  else {
    int v16 = 0;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56LL))(a1)
    && (a3 == 2 || ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 64LL))(a1) & (v16 | a4)) == 1))
  {
    int v17 = 512;
    char v18 = 1;
  }

  else
  {
    char v18 = 0;
    int v17 = 0;
  }

  if (a2) {
    v17 |= 0x100u;
  }
  if (a5 == 8) {
    int v19 = 0;
  }
  else {
    int v19 = a5;
  }
  int v20 = v17 | v19;
  int v21 = v16 | a4;
  if (a3 == 2) {
    int v21 = 1;
  }
  if (!a2) {
    int v21 = 0;
  }
  if ((v18 & 1) != 0) {
    int v22 = 0;
  }
  else {
    int v22 = v21;
  }
  unsigned int v23 = L"-";
  if (v16) {
    unsigned int v23 = (const __int16 *)"+";
  }
  unsigned int v24 = L"~+";
  unsigned int v25 = "~";
  if (a3 == 2) {
    unsigned int v25 = "~";
  }
  if ((v16 & 1) == 0) {
    unsigned int v24 = (const __int16 *)v25;
  }
  if (a4) {
    __int16 v26 = v24;
  }
  else {
    __int16 v26 = v23;
  }
  unsigned int v34 = v20;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
  int v28 = result + v22;
  if ((*(_WORD *)(a8 + 8) & 1) != 0) {
    __int16 v29 = 2;
  }
  else {
    __int16 v29 = *(_WORD *)(a8 + 8) & 0x1F;
  }
  *(_WORD *)(a8 + 8) = v29;
  if (v28 >= 1)
  {
    for (int i = 0; i != v28; ++i)
    {
      if (i) {
        char v31 = 0;
      }
      else {
        char v31 = v22;
      }
      if ((v31 & 1) != 0
        || (uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a1 + 16LL))( a1,  v34,  ((v22 << 31 >> 31) + i)),  (_DWORD)result == 45))
      {
        int32_t v32 = u_strlen((const UChar *)v26);
        uint64_t result = *(unsigned __int16 *)v26;
        if (v32 != 1)
        {
          UChar v35 = *v26;
          icu::UnicodeString::doAppend(a8, (uint64_t)&v35, 0, 1LL);
          uint64_t result = *((unsigned __int16 *)v26 + 1);
        }
      }

      if ((a6 & ((_DWORD)result == 37)) != 0) {
        int v33 = 8240;
      }
      else {
        int v33 = result;
      }
      if (!a7 || v33 != 164)
      {
        __int16 v36 = v33;
        uint64_t result = icu::UnicodeString::doAppend(a8, (uint64_t)&v36, 0, 1LL);
      }
    }
  }

  return result;
}

uint64_t icu::number::impl::PatternStringUtils::resolveSignDisplay(int a1, unsigned int a2)
{
  uint64_t result = 0LL;
  switch(a1)
  {
    case 0:
    case 3:
      if (a2 >= 4) {
        goto LABEL_11;
      }
      int v4 = (unsigned int *)&unk_180A3AC20;
      break;
    case 1:
    case 4:
      if (a2 >= 4) {
        goto LABEL_11;
      }
      int v4 = (unsigned int *)&unk_180A3AC30;
      break;
    case 2:
      return result;
    case 5:
    case 6:
      if (a2 >= 4) {
        goto LABEL_11;
      }
      int v4 = (unsigned int *)&unk_180A3AC40;
      break;
    case 7:
    case 8:
      if (a2 >= 4) {
        goto LABEL_11;
      }
      int v4 = (unsigned int *)&unk_180A3AC50;
      break;
    default:
LABEL_11:
      abort();
  }

  return v4[a2];
}

void sub_180937854(void **a1)
{
}

void sub_180937868(icu::StringSegment *a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  memset(&v28[1], 0, 48);
  uint64_t v29 = 0LL;
  v28[0] = (char *)&v28[1] + 5;
  LODWORD(v28[1]) = 40;
  UErrorCode v22 = U_ZERO_ERROR;
  icu::StringSegment::toTempUnicodeString(a1, (uint64_t)&v25);
  unsigned int v6 = 0LL;
  if ((v26 & 0x11) == 0)
  {
    if ((v26 & 2) != 0) {
      unsigned int v6 = v27;
    }
    else {
      unsigned int v6 = *(_BYTE **)&v27[14];
    }
  }

  int v21 = v6;
  icu::StringSegment::length(a1);
  icu::UnicodeString::UnicodeString(v23, 0LL, &v21);
  icu::CharString::appendInvariantChars((icu::CharString *)v28, (const icu::UnicodeString *)v23, &v22);
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v23);
  int v20 = v21;
  icu::UnicodeString::~UnicodeString(&v20, (icu::UnicodeString *)&v25);
  UErrorCode v8 = v22;
  if (v22 == U_INVARIANT_CONVERSION_ERROR)
  {
    UErrorCode v8 = U_NUMBER_SKELETON_SYNTAX_ERROR;
LABEL_8:
    *a3 = v8;
    goto LABEL_9;
  }

  if (v22 > U_ZERO_ERROR) {
    goto LABEL_8;
  }
  uint64_t v24 = 0LL;
  memset(v23, 0, sizeof(v23));
  icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v23);
  int v25 = 0;
  icu::number::impl::DecimalQuantity::setToDecNumber((uint64_t)v23, (const char *)v28[0], v29, (UErrorCode *)&v25);
  if (v25 > 0
    || (icu::number::impl::DecimalQuantity::isNaN((icu::number::impl::DecimalQuantity *)v23) & 1) != 0
    || icu::number::impl::DecimalQuantity::isInfinite((icu::number::impl::DecimalQuantity *)v23))
  {
    *a3 = U_NUMBER_SKELETON_SYNTAX_ERROR;
  }

  else
  {
    int v9 = icu::number::impl::DecimalQuantity::adjustToZeroScale((icu::number::impl::DecimalQuantity *)v23);
    int v10 = v9;
    uint64_t v11 = v29;
    if ((int)v29 >= 1)
    {
      uint64_t v12 = (unsigned __int8 *)v28[0];
      while (1)
      {
        int v13 = *v12++;
        if (v13 == 46) {
          break;
        }
        if (!--v11) {
          goto LABEL_23;
        }
      }

      int v14 = 1 - v11;
      icu::number::impl::DecimalQuantity::adjustMagnitude((icu::number::impl::DecimalQuantity *)v23, v9 + v11 - 1);
      int v10 = v14;
    }

uint64_t icu::number::Precision::incrementExact@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (this)
  {
    if (this == 5) {
      int v3 = 7;
    }
    else {
      int v3 = 5;
    }
    if (this == 1) {
      int v3 = 6;
    }
    *(void *)(a3 + 8) = this;
    *(_WORD *)(a3 + 16) = a2;
    if (a2 <= 0) {
      int v4 = -a2;
    }
    else {
      LOWORD(v4) = 0;
    }
    *(_WORD *)(a3 + 18) = v4;
    *(_DWORD *)(a3 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  }

  else
  {
    *(_DWORD *)(a3 + 8) = 65810;
    int v3 = 10;
  }

  *(_DWORD *)a3 = v3;
  *(_DWORD *)(a3 + 24) = 0;
  return this;
}

void icu::number::Precision::unlimited(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 1;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 13) = 0LL;
  *(_DWORD *)(a1 + 24) = 0;
}

double icu::number::Precision::integer@<D0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 2;
  double result = NAN;
  *(void *)(a1 + 8) = 0xFFFFFFFF00000000LL;
  *(void *)(a1 + 16) = 0LL;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t icu::number::Precision::constructFraction@<X0>(uint64_t this@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = 2;
  *(_WORD *)(a3 + 8) = this;
  *(_WORD *)(a3 + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = a2;
  *(_DWORD *)(a3 + 12) = -1;
  *(void *)(a3 + 16) = 0LL;
  *(_DWORD *)(a3 + 24) = 0;
  return this;
}

uint64_t icu::number::Precision::fixedFraction@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  if (this > 0x3E7)
  {
    *(_DWORD *)(a2 + 8) = 65810;
    int v2 = 10;
  }

  else
  {
    *(_WORD *)(a2 + 8) = this;
    *(_WORD *)(a2 + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = this;
    *(_DWORD *)(a2 + 12) = -1;
    *(void *)(a2 + 16) = 0LL;
    int v2 = 2;
  }

  *(_DWORD *)a2 = v2;
  *(_DWORD *)(a2 + 24) = 0;
  return this;
}

uint64_t icu::number::Precision::minFraction@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  if (this > 0x3E7)
  {
    *(_DWORD *)(a2 + 8) = 65810;
    int v2 = 10;
  }

  else
  {
    *(_WORD *)(a2 + 8) = this;
    *(_DWORD *)(a2 + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = -1;
    *(_WORD *)(a2 + 14) = -1;
    *(void *)(a2 + 16) = 0LL;
    int v2 = 2;
  }

  *(_DWORD *)a2 = v2;
  *(_DWORD *)(a2 + 24) = 0;
  return this;
}

uint64_t icu::number::Precision::maxFraction@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  if (this > 0x3E7)
  {
    *(_DWORD *)(a2 + 8) = 65810;
    int v2 = 10;
  }

  else
  {
    *(_WORD *)(a2 + 8) = 0;
    *(_WORD *)(a2 + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = this;
    *(_DWORD *)(a2 + 12) = -1;
    *(void *)(a2 + 16) = 0LL;
    int v2 = 2;
  }

  *(_DWORD *)a2 = v2;
  *(_DWORD *)(a2 + 24) = 0;
  return this;
}

uint64_t icu::number::Precision::minMaxFraction@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if ((int)this > a2 || (this & 0x80000000) != 0 || a2 > 999)
  {
    *(_DWORD *)(a3 + 8) = 65810;
    int v3 = 10;
  }

  else
  {
    *(_WORD *)(a3 + 8) = this;
    *(_WORD *)(a3 + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = a2;
    *(_DWORD *)(a3 + 12) = -1;
    *(void *)(a3 + 16) = 0LL;
    int v3 = 2;
  }

  *(_DWORD *)a3 = v3;
  *(_DWORD *)(a3 + 24) = 0;
  return this;
}

uint64_t icu::number::Precision::fixedSignificantDigits@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  if ((this - 1) > 0x3E6)
  {
    *(_DWORD *)(a2 + 8) = 65810;
    int v2 = 10;
  }

  else
  {
    *(_DWORD *)(a2 + 8) = -1;
    *(_WORD *)(a2 + 12) = this;
    *(_WORD *)(a2 + 14) = this;
    *(void *)(a2 + 16) = 0LL;
    int v2 = 3;
  }

  *(_DWORD *)a2 = v2;
  *(_DWORD *)(a2 + 24) = 0;
  return this;
}

uint64_t icu::number::Precision::constructSignificant@<X0>( uint64_t this@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = 3;
  *(_DWORD *)(a3 + 8) = -1;
  *(_WORD *)(a3 + 12) = this;
  *(_WORD *)(a3 + 14) = a2;
  *(void *)(a3 + 16) = 0LL;
  *(_DWORD *)(a3 + 24) = 0;
  return this;
}

uint64_t icu::number::Precision::minSignificantDigits@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  if ((this - 1) > 0x3E6)
  {
    *(_DWORD *)(a2 + 8) = 65810;
    int v2 = 10;
  }

  else
  {
    *(_DWORD *)(a2 + 8) = -1;
    *(_WORD *)(a2 + 12) = this;
    *(_WORD *)(a2 + 14) = -1;
    *(void *)(a2 + 16) = 0LL;
    int v2 = 3;
  }

  *(_DWORD *)a2 = v2;
  *(_DWORD *)(a2 + 24) = 0;
  return this;
}

uint64_t icu::number::Precision::maxSignificantDigits@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  if ((this - 1) > 0x3E6)
  {
    *(_DWORD *)(a2 + 8) = 65810;
    int v2 = 10;
  }

  else
  {
    *(_DWORD *)(a2 + 8) = -1;
    *(_WORD *)(a2 + 12) = 1;
    *(_WORD *)(a2 + 14) = this;
    *(void *)(a2 + 16) = 0LL;
    int v2 = 3;
  }

  *(_DWORD *)a2 = v2;
  *(_DWORD *)(a2 + 24) = 0;
  return this;
}

uint64_t icu::number::Precision::minMaxSignificantDigits@<X0>( uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if ((int)this > a2 || (int)this < 1 || a2 > 999)
  {
    *(_DWORD *)(a3 + 8) = 65810;
    int v3 = 10;
  }

  else
  {
    *(_DWORD *)(a3 + 8) = -1;
    *(_WORD *)(a3 + 12) = this;
    *(_WORD *)(a3 + 14) = a2;
    *(void *)(a3 + 16) = 0LL;
    int v3 = 3;
  }

  *(_DWORD *)a3 = v3;
  *(_DWORD *)(a3 + 24) = 0;
  return this;
}

__n128 icu::number::Precision::trailingZeroDisplay@<Q0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(__n128 *)(a3 + 16) = result;
  *(_DWORD *)(a3 + 24) = a2;
  return result;
}

void icu::number::Precision::increment(double a1@<D0>, uint64_t a2@<X8>)
{
  if (a1 <= 0.0)
  {
    *(_DWORD *)(a2 + 8) = 65810;
    int v8 = 10;
  }

  else
  {
    uint64_t v11 = 0LL;
    memset(v10, 0, sizeof(v10));
    icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v10);
    icu::number::impl::DecimalQuantity::setToDouble((void **)v10, a1);
    icu::number::impl::DecimalQuantity::roundToInfinity((icu::number::impl::DecimalQuantity *)v10);
    int v5 = icu::number::impl::DecimalQuantity::adjustToZeroScale((icu::number::impl::DecimalQuantity *)v10);
    uint64_t v6 = icu::number::impl::DecimalQuantity::toLong((icu::number::impl::DecimalQuantity *)v10, 0);
    if (v6 == 5) {
      int v7 = 7;
    }
    else {
      int v7 = 5;
    }
    if (v6 == 1) {
      int v8 = 6;
    }
    else {
      int v8 = v7;
    }
    *(void *)(a2 + 8) = v6;
    *(_WORD *)(a2 + 16) = v5;
    else {
      LOWORD(v9) = 0;
    }
    *(_WORD *)(a2 + 18) = v9;
    *(_DWORD *)(a2 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
    icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v10);
  }

  *(_DWORD *)a2 = v8;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t icu::number::Precision::constructIncrement@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (this == 5) {
    int v3 = 7;
  }
  else {
    int v3 = 5;
  }
  if (this == 5) {
    uint64_t v4 = 5LL;
  }
  else {
    uint64_t v4 = this;
  }
  if (this == 1) {
    int v5 = 6;
  }
  else {
    int v5 = v3;
  }
  if (this == 1) {
    uint64_t v6 = 1LL;
  }
  else {
    uint64_t v6 = v4;
  }
  *(_DWORD *)a3 = v5;
  *(void *)(a3 + 8) = v6;
  *(_WORD *)(a3 + 16) = a2;
  if (a2 <= 0) {
    int v7 = -a2;
  }
  else {
    LOWORD(v7) = 0;
  }
  *(_WORD *)(a3 + 18) = v7;
  *(_DWORD *)(a3 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  return this;
}

uint64_t icu::number::Precision::currency@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
  *(void *)(a2 + 12) = 0LL;
  *(_DWORD *)a2 = 8;
  *(_DWORD *)(a2 + 8) = result;
  return result;
}

uint64_t icu::number::Precision::constructCurrency@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
  *(void *)(a2 + 12) = 0LL;
  *(_DWORD *)a2 = 8;
  *(_DWORD *)(a2 + 8) = result;
  return result;
}

uint64_t icu::number::FractionPrecision::withSignificantDigits@<X0>( uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (*(_DWORD *)result == 10)
  {
    __int128 v5 = *(_OWORD *)(result + 16);
    *(_OWORD *)a5 = *(_OWORD *)result;
    *(_OWORD *)(a5 + 16) = v5;
  }

  else if (a2 < 1 || a3 < a2 || a3 > 999)
  {
    *(_DWORD *)a5 = 10;
    *(_DWORD *)(a5 + 24) = 0;
    *(_DWORD *)(a5 + 8) = 65810;
  }

  else
  {
    int v6 = *(_DWORD *)(result + 8);
    *(_WORD *)(a5 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = *(_WORD *)(result + 21);
    *(_BYTE *)(a5 + 23) = *(_BYTE *)(result + 23);
    *(_DWORD *)a5 = 4;
    *(_DWORD *)(a5 + 8) = v6;
    *(_WORD *)(a5 + 12) = a2;
    *(_WORD *)(a5 + 14) = a3;
    *(_DWORD *)(a5 + 16) = a4;
    *(_BYTE *)(a5 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
    *(_DWORD *)(a5 + 24) = 0;
  }

  return result;
}

uint64_t icu::number::Precision::constructFractionSignificant@<X0>( uint64_t result@<X0>, __int16 a2@<W1>, __int16 a3@<W2>, int a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  int v6 = *(_DWORD *)(result + 8);
  *(_WORD *)(a6 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = *(_WORD *)(result + 21);
  *(_BYTE *)(a6 + 23) = *(_BYTE *)(result + 23);
  *(_DWORD *)a6 = 4;
  *(_DWORD *)(a6 + 8) = v6;
  *(_WORD *)(a6 + 12) = a2;
  *(_WORD *)(a6 + 14) = a3;
  *(_DWORD *)(a6 + 16) = a4;
  *(_BYTE *)(a6 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = a5;
  *(_DWORD *)(a6 + 24) = 0;
  return result;
}

uint64_t icu::number::FractionPrecision::withMinDigits@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)this == 10)
  {
    __int128 v3 = *(_OWORD *)(this + 16);
    *(_OWORD *)a3 = *(_OWORD *)this;
    *(_OWORD *)(a3 + 16) = v3;
  }

  else if ((a2 - 1) > 0x3E6)
  {
    *(_DWORD *)a3 = 10;
    *(_DWORD *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 8) = 65810;
  }

  else
  {
    int v4 = *(_DWORD *)(this + 8);
    *(_WORD *)(a3 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = *(_WORD *)(this + 21);
    *(_BYTE *)(a3 + 23) = *(_BYTE *)(this + 23);
    *(_DWORD *)a3 = 4;
    *(_DWORD *)(a3 + 8) = v4;
    *(_WORD *)(a3 + 12) = 1;
    *(_WORD *)(a3 + 14) = a2;
    *(_DWORD *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 1;
    *(_DWORD *)(a3 + 24) = 0;
  }

  return this;
}

uint64_t icu::number::FractionPrecision::withMaxDigits@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)this == 10)
  {
    __int128 v3 = *(_OWORD *)(this + 16);
    *(_OWORD *)a3 = *(_OWORD *)this;
    *(_OWORD *)(a3 + 16) = v3;
  }

  else if ((a2 - 1) > 0x3E6)
  {
    *(_DWORD *)a3 = 10;
    *(_DWORD *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 8) = 65810;
  }

  else
  {
    int v4 = *(_DWORD *)(this + 8);
    *(_WORD *)(a3 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = *(_WORD *)(this + 21);
    *(_BYTE *)(a3 + 23) = *(_BYTE *)(this + 23);
    *(_DWORD *)a3 = 4;
    *(_DWORD *)(a3 + 8) = v4;
    *(_WORD *)(a3 + 12) = 1;
    *(_WORD *)(a3 + 14) = a2;
    *(_DWORD *)(a3 + 16) = 1;
    *(_BYTE *)(a3 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 1;
    *(_DWORD *)(a3 + 24) = 0;
  }

  return this;
}

void icu::number::Precision::withCurrency( icu::number::Precision *this@<X0>, const UChar *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  if (*(_DWORD *)this == 10)
  {
    __int128 v6 = *((_OWORD *)this + 1);
    *(_OWORD *)a4 = *(_OWORD *)this;
    *(_OWORD *)(a4 + 16) = v6;
  }

  else
  {
    int v8 = a2 + 10;
    ucurr_getRoundingIncrementForUsage(a2 + 10, *((_DWORD *)this + 2), (int *)a3);
    double v10 = v9;
    unsigned int DefaultFractionDigitsForUsage = ucurr_getDefaultFractionDigitsForUsage(v8, *((_DWORD *)this + 2), (int *)a3);
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    if (v10 == 0.0)
    {
      BOOL v12 = DefaultFractionDigitsForUsage >= 0x3E8;
      if (DefaultFractionDigitsForUsage >= 0x3E8) {
        int v13 = 10;
      }
      else {
        int v13 = 2;
      }
      *(_DWORD *)a4 = v13;
      int v14 = (unsigned __int16)DefaultFractionDigitsForUsage | ((unsigned __int16)DefaultFractionDigitsForUsage << 16);
      if (v12) {
        int v15 = 65810;
      }
      else {
        int v15 = v14;
      }
      *(_DWORD *)(a4 + 8) = v15;
      *(_DWORD *)(a4 + 12) = -1;
      *(void *)(a4 + 16) = 0LL;
    }

    else
    {
      icu::number::Precision::increment(v10, a4);
    }

    *(_DWORD *)(a4 + 24) = *((_DWORD *)this + 6);
  }

double icu::number::CurrencyPrecision::withCurrency@<D0>( icu::number::CurrencyPrecision *this@<X0>, const UChar *a2@<X1>, uint64_t a3@<X8>)
{
  UErrorCode v9 = U_ZERO_ERROR;
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  icu::number::Precision::withCurrency(this, a2, &v9, (uint64_t)&v7);
  UErrorCode v5 = v9;
  if (v9 < U_ILLEGAL_ARGUMENT_ERROR)
  {
    double result = *(double *)&v7;
    __int128 v6 = v8;
    *(_OWORD *)a3 = v7;
    *(_OWORD *)(a3 + 16) = v6;
  }

  else
  {
    *(_DWORD *)a3 = 10;
    *(_DWORD *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 8) = v5;
  }

  return result;
}

uint64_t icu::number::IncrementPrecision::withMinFraction@<X0>( uint64_t this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)this == 10)
  {
    __int128 v3 = *(_OWORD *)(this + 16);
    *(_OWORD *)a3 = *(_OWORD *)this;
    *(_OWORD *)(a3 + 16) = v3;
  }

  else if (a2 > 0x3E7)
  {
    *(_DWORD *)a3 = 10;
    *(_DWORD *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 8) = 65810;
  }

  else
  {
    *(_OWORD *)a3 = *(_OWORD *)this;
    *(_WORD *)(a3 + 16) = *(_WORD *)(this + 16);
    *(void *)(a3 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = *(void *)(this + 20);
    *(_DWORD *)(a3 + 28) = *(_DWORD *)(this + 28);
    *(_WORD *)(a3 + 18) = a2;
  }

  return this;
}

uint64_t icu::number::Precision::constructIncrementSignificant@<X0>( uint64_t this@<X0>, double a2@<D0>, __int16 a3@<W1>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = 9;
  *(double *)(a4 + 8) = a2;
  *(_WORD *)(a4 + 16) = this;
  *(_WORD *)(a4 + 18) = a3;
  *(_DWORD *)(a4 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  *(_DWORD *)(a4 + 24) = 0;
  return this;
}

uint64_t sub_1809382A4(uint64_t a1, icu::number::Precision *this, int a3, const UChar *a4, UErrorCode *a5)
{
  __int128 v6 = *((_OWORD *)this + 1);
  *(_OWORD *)a1 = *(_OWORD *)this;
  *(_OWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 36) = 0;
  if (*(_DWORD *)this == 8)
  {
    icu::number::Precision::withCurrency(this, a4, a5, (uint64_t)v8);
    *(_OWORD *)a1 = v8[0];
    *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)v8 + 12);
  }

  return a1;
}

double sub_18093830C@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0LL;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 36) = 1;
  return result;
}

BOOL sub_180938324(_DWORD *a1)
{
  return *a1 == 3;
}

uint64_t sub_180938334(uint64_t a1, icu::number::impl::DecimalQuantity *this, uint64_t a3, int *a4)
{
  uint64_t Magnitude = icu::number::impl::DecimalQuantity::getMagnitude(this);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 16LL))(a3, Magnitude);
  icu::number::impl::DecimalQuantity::adjustMagnitude(this, v9);
  sub_180938418(a1, this, a4);
  if (!icu::number::impl::DecimalQuantity::isZeroish(this)
    && *a4 <= 0
    && icu::number::impl::DecimalQuantity::getMagnitude(this) != (_DWORD)v9 + (_DWORD)Magnitude)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 16LL))(a3, (Magnitude + 1));
    if ((_DWORD)v10 != (_DWORD)v9)
    {
      uint64_t v11 = v10;
      icu::number::impl::DecimalQuantity::adjustMagnitude(this, v10 - v9);
      sub_180938418(a1, this, a4);
      return v11;
    }
  }

  return v9;
}

void sub_180938418(uint64_t a1, icu::number::impl::DecimalQuantity *this, int *a3)
{
  if (*a3 <= 0 && !*(_BYTE *)(a1 + 36))
  {
    switch(*(_DWORD *)a1)
    {
      case 0:
      case 0xA:
        int v6 = 0;
        *a3 = 5;
        break;
      case 1:
        icu::number::impl::DecimalQuantity::roundToInfinity(this);
        goto LABEL_27;
      case 2:
        int v7 = *(__int16 *)(a1 + 10);
        if (v7 == -1) {
          int v8 = 0x80000000;
        }
        else {
          int v8 = -v7;
        }
        icu::number::impl::DecimalQuantity::roundToMagnitude((uint64_t)this, v8, *(_DWORD *)(a1 + 32), a3);
        if (*(_WORD *)(a1 + 8)) {
          int v9 = *(__int16 *)(a1 + 8);
        }
        else {
          int v9 = -2147483647;
        }
        goto LABEL_51;
      case 3:
        int v10 = sub_180938794(this, *(__int16 *)(a1 + 14));
        icu::number::impl::DecimalQuantity::roundToMagnitude((uint64_t)this, v10, *(_DWORD *)(a1 + 32), a3);
        int v11 = sub_1809387E4(this, *(__int16 *)(a1 + 12));
        int v6 = uprv_max(0LL, -v11);
        break;
      case 4:
        int v12 = *(__int16 *)(a1 + 10);
        if (v12 == -1) {
          uint64_t v13 = 0x80000000LL;
        }
        else {
          uint64_t v13 = -v12;
        }
        int v14 = sub_180938794(this, *(__int16 *)(a1 + 14));
        if (*(_DWORD *)(a1 + 16)) {
          int v15 = uprv_max(v13, v14);
        }
        else {
          int v15 = uprv_min(v13, v14);
        }
        int v21 = v15;
        if (!icu::number::impl::DecimalQuantity::isZeroish(this))
        {
          int Magnitude = icu::number::impl::DecimalQuantity::getMagnitude(this);
          icu::number::impl::DecimalQuantity::roundToMagnitude((uint64_t)this, v21, *(_DWORD *)(a1 + 32), a3);
          if (!icu::number::impl::DecimalQuantity::isZeroish(this)
            && icu::number::impl::DecimalQuantity::getMagnitude(this) != Magnitude
            && (_DWORD)v13 == v14)
          {
            ++v14;
          }
        }

        if (*(_WORD *)(a1 + 8)) {
          uint64_t v24 = -*(__int16 *)(a1 + 8);
        }
        else {
          uint64_t v24 = 0x7FFFFFFFLL;
        }
        int v25 = sub_1809387E4(this, *(__int16 *)(a1 + 12));
        if (*(_BYTE *)(a1 + 20))
        {
          int v26 = uprv_min(v24, v25);
        }

        else
        {
          else {
            int v27 = v25;
          }
          else {
            int v28 = v24;
          }
          if (*(_DWORD *)(a1 + 16)) {
            int v26 = v27;
          }
          else {
            int v26 = v28;
          }
        }

        int v9 = -v26;
LABEL_51:
        int v6 = uprv_max(0LL, v9);
        break;
      case 5:
        icu::number::impl::DecimalQuantity::roundToIncrement( this,  *(void *)(a1 + 8),  *(__int16 *)(a1 + 16),  *(_DWORD *)(a1 + 32),  (UErrorCode *)a3);
        goto LABEL_23;
      case 6:
        icu::number::impl::DecimalQuantity::roundToMagnitude( (uint64_t)this,  *(__int16 *)(a1 + 16),  *(_DWORD *)(a1 + 32),  a3);
        goto LABEL_23;
      case 7:
        icu::number::impl::DecimalQuantity::roundToNickel( (uint64_t)this,  *(__int16 *)(a1 + 16),  *(_DWORD *)(a1 + 32),  a3);
LABEL_23:
        int v6 = *(__int16 *)(a1 + 18);
        break;
      case 9:
        uint64_t v30 = 0LL;
        memset(v29, 0, sizeof(v29));
        icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v29);
        icu::number::impl::DecimalQuantity::setToDouble((void **)v29, *(double *)(a1 + 8));
        icu::number::impl::DecimalQuantity::roundToInfinity((icu::number::impl::DecimalQuantity *)v29);
        __int16 v16 = icu::number::impl::DecimalQuantity::adjustToZeroScale((icu::number::impl::DecimalQuantity *)v29);
        unint64_t v17 = icu::number::impl::DecimalQuantity::toLong((icu::number::impl::DecimalQuantity *)v29, 0);
        icu::number::impl::DecimalQuantity::roundToIncrement(this, v17, v16, *(_DWORD *)(a1 + 32), (UErrorCode *)a3);
        icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v29);
        int v18 = sub_180938794(this, *(__int16 *)(a1 + 18));
        icu::number::impl::DecimalQuantity::roundToMagnitude((uint64_t)this, v18, *(_DWORD *)(a1 + 32), a3);
        int v19 = sub_1809387E4(this, *(__int16 *)(a1 + 16));
        int v20 = uprv_max(0LL, -v19);
        icu::number::impl::DecimalQuantity::setMinFraction((uint64_t)this, v20);
        int v6 = 0;
        if (icu::number::impl::DecimalQuantity::isZeroish(this))
        {
LABEL_27:
          int v6 = 0;
        }

        break;
      default:
        abort();
    }

    if (!*(_DWORD *)(a1 + 24)
      || (*(double (**)(icu::number::impl::DecimalQuantity *, uint64_t))(*(void *)this + 16LL))(this, 3LL) != 0.0)
    {
      icu::number::impl::DecimalQuantity::setMinFraction((uint64_t)this, v6);
    }
  }

uint64_t sub_180938794(icu::number::impl::DecimalQuantity *a1, int a2)
{
  if (a2 == -1) {
    return 0x80000000LL;
  }
  if (icu::number::impl::DecimalQuantity::isZeroish(a1)) {
    int Magnitude = 0;
  }
  else {
    int Magnitude = icu::number::impl::DecimalQuantity::getMagnitude(a1);
  }
  return (Magnitude - a2 + 1);
}

uint64_t sub_1809387E4(icu::number::impl::DecimalQuantity *a1, int a2)
{
  if (icu::number::impl::DecimalQuantity::isZeroish(a1)) {
    int Magnitude = 0;
  }
  else {
    int Magnitude = icu::number::impl::DecimalQuantity::getMagnitude(a1);
  }
  return (Magnitude - a2 + 1);
}

uint64_t sub_180938824(uint64_t a1, icu::number::impl::DecimalQuantity *this, int a3)
{
  return icu::number::impl::DecimalQuantity::setMinFraction((uint64_t)this, *(__int16 *)(a1 + 12) - a3);
}

uint64_t icu::number::impl::ScientificModifier::ScientificModifier(uint64_t this)
{
  *(void *)this = &off_189728328;
  *(_DWORD *)(this + 8) = 0;
  *(void *)(this + 16) = 0LL;
  return this;
}

{
  *(void *)this = &off_189728328;
  *(_DWORD *)(this + 8) = 0;
  *(void *)(this + 16) = 0LL;
  return this;
}

uint64_t icu::number::impl::ScientificModifier::set(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  return result;
}

uint64_t icu::number::impl::ScientificModifier::apply( icu::number::impl::ScientificModifier *this, icu::FormattedStringBuilder *a2, int a3, int a4, UErrorCode *a5)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  icu::UnicodeString::UnicodeString( (icu::UnicodeString *)v32,  (UChar **)(*(void *)(*((void *)this + 2) + 24LL) + 712LL));
  int v9 = icu::FormattedStringBuilder::insert(a2, a4, (uint64_t)v32, 35, 0, a5) + a4;
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v32);
  uint64_t v11 = *((void *)this + 2);
  int v12 = *(_DWORD *)(v11 + 20);
  if ((*((_DWORD *)this + 2) & 0x80000000) != 0)
  {
    if (v12 == 2) {
      goto LABEL_7;
    }
    uint64_t v13 = (UChar **)(*(void *)(v11 + 24) + 392LL);
  }

  else
  {
    if (v12 != 1) {
      goto LABEL_7;
    }
    uint64_t v13 = (UChar **)(*(void *)(v11 + 24) + 456LL);
  }

  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v32, v13);
  v9 += icu::FormattedStringBuilder::insert(a2, v9, (uint64_t)v32, 36, 0, a5);
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v32);
LABEL_7:
  int v15 = *((_DWORD *)this + 2);
  uint64_t v16 = *((void *)this + 2);
  if (*(__int16 *)(v16 + 18) > 0 || v15 != 0)
  {
    int v18 = 0;
    if (v15 >= 0) {
      unsigned int v19 = *((_DWORD *)this + 2);
    }
    else {
      unsigned int v19 = -v15;
    }
    int v20 = 1;
    do
    {
      unsigned int v21 = v19 % 0xA;
      int v22 = v9 + v18;
      uint64_t v23 = *(void *)(v16 + 24);
      int v24 = *(_DWORD *)(v23 + 1928);
      if (v24 == -1)
      {
        uint64_t v26 = v23 + ((unint64_t)(v21 + 17) << 6);
        uint64_t v27 = v23 + 264;
        uint64_t v28 = v26 + 8;
        if (v21) {
          uint64_t v29 = v28;
        }
        else {
          uint64_t v29 = v27;
        }
        int inserted = icu::FormattedStringBuilder::insert(a2, v22, v29, 37, 0, a5);
      }

      else
      {
        int inserted = icu::FormattedStringBuilder::insertCodePoint(a2, v22, v24 + v21, 37, a5);
      }

      v9 += inserted;
      uint64_t v16 = *((void *)this + 2);
      --v18;
      BOOL v30 = v20++ < *(__int16 *)(v16 + 18);
      BOOL v30 = v30 || v19 > 9;
      v19 /= 0xAu;
    }

    while (v30);
  }

  return (v9 - a4);
}

uint64_t icu::number::impl::ScientificModifier::getPrefixLength(icu::number::impl::ScientificModifier *this)
{
  return 0LL;
}

uint64_t icu::number::impl::ScientificModifier::getCodePointCount( icu::number::impl::ScientificModifier *this)
{
  return 999LL;
}

uint64_t icu::number::impl::ScientificModifier::isStrong(icu::number::impl::ScientificModifier *this)
{
  return 1LL;
}

void icu::number::impl::ScientificModifier::containsField()
{
}

void icu::number::impl::ScientificModifier::getParameters( icu::number::impl::ScientificModifier *this, icu::number::impl::Modifier::Parameters *a2)
{
  *(void *)a2 = 0LL;
}

_DWORD *icu::number::impl::ScientificModifier::semanticallyEquivalent( icu::number::impl::ScientificModifier *this, const icu::number::impl::Modifier *lpsrc)
{
  if (result) {
    return (_DWORD *)(*((_DWORD *)this + 2) == result[2]);
  }
  return result;
}

void *sub_180938AD4(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *double result = off_1897283B8;
  result[1] = &unk_1897283E8;
  result[2] = *(void *)(a2 + 4);
  result[3] = a3;
  result[4] = a4;
  return result;
}

double sub_180938AF4(uint64_t a1, icu::number::impl::DecimalQuantity *a2, uint64_t a3, int *a4)
{
  if (*a4 <= 0)
  {
    if (((*(uint64_t (**)(icu::number::impl::DecimalQuantity *))(*(void *)a2 + 32LL))(a2) & 1) != 0
      || (*(unsigned int (**)(icu::number::impl::DecimalQuantity *))(*(void *)a2 + 24LL))(a2))
    {
      *(void *)(a3 + 208) = a3 + 256;
    }

    else
    {
      if (icu::number::impl::DecimalQuantity::isZeroish(a2))
      {
        if (*(_BYTE *)(a1 + 17) && sub_180938324((_DWORD *)(a3 + 104))) {
          sub_180938824(a3 + 104, a2, *(char *)(a1 + 16));
        }
        else {
          sub_180938418(a3 + 104, a2, a4);
        }
        int v9 = 0;
      }

      else
      {
        int v9 = -(int)sub_180938334(a3 + 104, a2, a1 + 8, a4);
      }

      *(_DWORD *)(a3 + 224) = v9;
      *(void *)(a3 + 232) = a1;
      *(void *)(a3 + 208) = a3 + 216;
      icu::number::impl::DecimalQuantity::adjustExponent((uint64_t)a2, v9);
      sub_18093830C((uint64_t)&v11);
      double result = *(double *)&v11;
      __int128 v10 = *(_OWORD *)v12;
      *(_OWORD *)(a3 + 104) = v11;
      *(_OWORD *)(a3 + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v10;
      *(void *)(a3 + 133) = *(void *)&v12[13];
    }
  }

  return result;
}

uint64_t sub_180938C28(uint64_t a1, int a2)
{
  int v2 = *(char *)(a1 + 16);
  if (!*(_BYTE *)(a1 + 17))
  {
    if (v2 >= 2) {
      int v2 = (__int16)(a2 % *(char *)(a1 + 16) + *(char *)(a1 + 16)) % (int)*(unsigned __int8 *)(a1 + 16) + 1;
    }
    else {
      int v2 = 1;
    }
  }

  return (v2 + ~a2);
}

uint64_t sub_180938C70(uint64_t a1, int a2)
{
  int v2 = *(char *)(a1 + 8);
  if (!*(_BYTE *)(a1 + 9))
  {
    if (v2 >= 2) {
      int v2 = (__int16)(a2 % *(char *)(a1 + 8) + *(char *)(a1 + 8)) % (int)*(unsigned __int8 *)(a1 + 8) + 1;
    }
    else {
      int v2 = 1;
    }
  }

  return (v2 + ~a2);
}

void sub_180938CBC(icu::number::impl::Modifier *a1)
{
}

uint64_t sub_180938CD0(uint64_t a1)
{
  return a1;
}

void sub_180938CF8(char *a1)
{
}

void sub_180938D24(uint64_t a1)
{
  int v1 = (void *)(a1 - 8);
  nullsub_17(a1);
  icu::UMemory::operator delete(v1);
}

void **icu::number::SimpleNumber::forInt64@<X0>(void **this@<X0>, int *a2@<X1>, void ***a3@<X8>)
{
  UErrorCode v5 = (uint64_t *)*a2;
  unint64_t v8 = (unint64_t)this;
  this = (void **)icu::UMemory::operator new(v5, (icu::UMemory *)0x198, (unint64_t)a2);
  if (!this)
  {
    *a2 = 7;
LABEL_2:
    *a3 = 0LL;
    a3[1] = 0LL;
    goto LABEL_3;
  }

  int v9 = this;
  __int128 v10 = (void **)(sub_1808D4228((uint64_t)this) + 304);
  this = icu::number::impl::DecimalQuantity::setToLong(v10, v8);
  *a3 = v9;
  *((_DWORD *)a3 + 2) = 1;
  if (*a2 <= 0)
  {
    this = (void **)icu::number::impl::DecimalQuantity::isNegative((icu::number::impl::DecimalQuantity *)v10);
    if ((_DWORD)this)
    {
      int v6 = 2;
      goto LABEL_4;
    }

uint64_t icu::number::SimpleNumber::SimpleNumber(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 1;
  if (*a3 <= 0)
  {
    if (a2)
    {
      else {
        int v4 = 1;
      }
      *(_DWORD *)(a1 + 8) = v4;
    }

    else
    {
      *a3 = 1;
    }
  }

  return a1;
}

{
  int v4;
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 1;
  if (*a3 <= 0)
  {
    if (a2)
    {
      else {
        int v4 = 1;
      }
      *(_DWORD *)(a1 + 8) = v4;
    }

    else
    {
      *a3 = 1;
    }
  }

  return a1;
}

uint64_t icu::number::SimpleNumber::cleanup(icu::number::SimpleNumber *this)
{
  uint64_t result = *(void *)this;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  *(void *)this = 0LL;
  return result;
}

BOOL icu::number::SimpleNumber::multiplyByPowerOfTen(BOOL this, int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (*(void *)this) {
      return icu::number::impl::DecimalQuantity::adjustMagnitude( (icu::number::impl::DecimalQuantity *)(*(void *)this + 304LL),  a2);
    }
    else {
      *a3 = U_INVALID_STATE_ERROR;
    }
  }

  return this;
}

void icu::number::SimpleNumber::roundTo(void *a1, int a2, unsigned int a3, int *a4)
{
  if (*a4 <= 0)
  {
    if (*a1) {
      icu::number::impl::DecimalQuantity::roundToMagnitude(*a1 + 304LL, a2, a3, a4);
    }
    else {
      *a4 = 27;
    }
  }

void *icu::number::SimpleNumber::setMinimumIntegerDigits(void *this, int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (*this) {
      return (void *)icu::number::impl::DecimalQuantity::setMinInteger(*this + 304LL, a2);
    }
    else {
      *a3 = U_INVALID_STATE_ERROR;
    }
  }

  return this;
}

void *icu::number::SimpleNumber::setMinimumFractionDigits(void *this, int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (*this) {
      return (void *)icu::number::impl::DecimalQuantity::setMinFraction(*this + 304LL, a2);
    }
    else {
      *a3 = U_INVALID_STATE_ERROR;
    }
  }

  return this;
}

void icu::number::SimpleNumber::truncateStart(icu::number::SimpleNumber *this, int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (*(void *)this) {
      icu::number::impl::DecimalQuantity::applyMaxInteger( (icu::number::impl::DecimalQuantity *)(*(void *)this + 304LL),  a2);
    }
    else {
      *a3 = U_INVALID_STATE_ERROR;
    }
  }

uint64_t icu::number::SimpleNumber::setSign(uint64_t result, int a2, int *a3)
{
  if (*a3 <= 0)
  {
    if (*(void *)result) {
      *(_DWORD *)(result + 8) = a2;
    }
    else {
      *a3 = 27;
    }
  }

  return result;
}

uint64_t icu::number::SimpleNumberFormatter::cleanup@<X0>( icu::number::SimpleNumberFormatter *this@<X0>, void *a2@<X8>)
{
  int v4 = (void *)((char *)this + 8);
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  uint64_t v5 = *((void *)this + 2);
  if (v5)
  {
    icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(v5 + 24));
    icu::UMemory::operator delete((void *)v5);
  }

  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  *int v4 = 0LL;
  v4[1] = 0LL;
  v4[2] = 0LL;
  return result;
}

void icu::number::SimpleNumberFormatter::forLocale( icu::number::SimpleNumberFormatter *this@<X0>, UErrorCode *a2@<X1>, void *a3@<X8>)
{
}

void icu::number::SimpleNumberFormatter::forLocaleAndGroupingStrategy( const icu::Locale *a1@<X0>, unint64_t a2@<X1>, UErrorCode *a3@<X2>, void *a4@<X8>)
{
  signed int v5 = a2;
  *a4 = 0LL;
  a4[1] = 0LL;
  unint64_t v8 = a4 + 1;
  *(_DWORD *)a4 = 2;
  a4[2] = 0LL;
  a4[3] = 0LL;
  int v9 = (icu::DecimalFormatSymbols *)icu::UMemory::operator new((uint64_t *)2, (icu::UMemory *)0xB48, a2);
  if (v9)
  {
    uint64_t v10 = (uint64_t)v9;
    *unint64_t v8 = icu::DecimalFormatSymbols::DecimalFormatSymbols(v9, a1, a3);
  }

  else
  {
    *unint64_t v8 = 0LL;
  }

void icu::number::SimpleNumberFormatter::initialize( uint64_t a1, const icu::Locale *a2, uint64_t a3, signed int a4, int *a5)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  signed int v5 = (uint64_t *)*a5;
  if ((int)v5 <= 0)
  {
    __int128 v11 = icu::UMemory::operator new(v5, (icu::UMemory *)0x60, (unint64_t)a2);
    if (v11)
    {
      int v12 = v11;
      *(_OWORD *)__int128 v11 = 0u;
      *((_OWORD *)v11 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0u;
      *((_OWORD *)v11 + 4) = 0u;
      *((_OWORD *)v11 + 5) = 0u;
      *((_WORD *)v11 + 2) = -3;
      *((_DWORD *)v11 + 5) = 0;
      *((_OWORD *)v11 + 2) = 0u;
      *((_OWORD *)v11 + 3) = 0u;
      v11[10] = 0LL;
      v11[3] = (uint64_t)off_18971B688;
      *((_WORD *)v11 + 16) = 2;
      icu::UnicodeString::setToBogus((icu::UnicodeString *)(v11 + 3));
      *(void *)(a1 + 16) = v12;
      v12[11] = a3;
      uint64_t v13 = sub_18093F458((uint64_t)a2, (const char *)(a3 + 2874), 0, a5);
      if (*a5 <= 0)
      {
        uint64_t v14 = (uint64_t)v13;
        uint64_t v30 = 0LL;
        memset(v29, 0, sizeof(v29));
        sub_18091E880((uint64_t)v29);
        icu::UnicodeString::UnicodeString((uint64_t)v27, v14);
        icu::number::impl::PatternParser::parseToPatternInfo( (UChar **)v27,  (const icu::UnicodeString *)v29,  (UErrorCode *)a5,  v15);
        icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v27);
        if (*a5 <= 0)
        {
          uint64_t v25 = icu::number::impl::Grouper::forStrategy(a4);
          int v26 = v17;
          icu::number::impl::Grouper::setLocaleData( (icu::number::impl::Grouper *)&v25,  (const icu::number::impl::ParsedPatternInfo *)v29,  a2);
          uint64_t v18 = *(void *)(a1 + 16);
          int v19 = v26;
          *(void *)(v18 + 4) = v25;
          *(_DWORD *)(v18 + 12) = v19;
          uint64_t v28 = 0LL;
          memset(v27, 0, sizeof(v27));
          icu::number::impl::MutablePatternModifier::MutablePatternModifier( (icu::number::impl::MutablePatternModifier *)v27,  0);
          icu::number::impl::MutablePatternModifier::setPatternInfo((uint64_t)v27, (uint64_t)v29, 0);
          icu::number::impl::MutablePatternModifier::setPatternAttributes((uint64_t)v27, 5, 0, 0);
          uint64_t v20 = *(void *)(*(void *)(a1 + 16) + 88LL);
          icu::CurrencyUnit::CurrencyUnit((icu::CurrencyUnit *)v24);
          icu::number::impl::MutablePatternModifier::setSymbols((uint64_t)v27, v20, v24, 1, 0LL, (UErrorCode *)a5);
          icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)v24);
          uint64_t v23 = icu::UMemory::operator new(v22, (icu::UMemory *)0x28, v21);
          if (v23) {
            icu::number::impl::MutablePatternModifier::createImmutableForPlural( (icu::number::impl::MutablePatternModifier *)v27,  8,  (UErrorCode *)a5,  v23);
          }
          *(void *)(a1 + 24) = v23;
          *(_DWORD *)a1 = a4;
          sub_18093493C((uint64_t)v27);
        }

        sub_18091E95C((void **)v29);
      }
    }

    else
    {
      *(void *)(a1 + 16) = 0LL;
      *a5 = 7;
    }
  }

void icu::number::SimpleNumberFormatter::forLocaleAndSymbolsAndGroupingStrategy( const icu::Locale *a1@<X0>, uint64_t a2@<X1>, signed int a3@<W2>, int *a4@<X3>, void *a5@<X8>)
{
  *a5 = 0LL;
  a5[1] = 0LL;
  *(_DWORD *)a5 = 2;
  a5[2] = 0LL;
  a5[3] = 0LL;
  icu::number::SimpleNumberFormatter::initialize((uint64_t)a5, a1, a2, a3, a4);
}

uint64_t icu::number::SimpleNumberFormatter::format@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = icu::number::SimpleNumberFormatter::formatImpl(a1, *(void *)a2, *(_DWORD *)(a2 + 8), a3);
  UErrorCode v8 = *a3;
  if (*(int *)a3 <= 0)
  {
    UErrorCode v8 = U_ZERO_ERROR;
    uint64_t v9 = *(void *)a2;
    *(void *)a2 = 0LL;
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  *(void *)a4 = off_189727E50;
  *(void *)(a4 + 8) = v9;
  *(_DWORD *)(a4 + 16) = v8;
  return result;
}

uint64_t icu::number::SimpleNumberFormatter::formatImpl(uint64_t result, uint64_t a2, int a3, UErrorCode *a4)
{
  if (!a2)
  {
    int v10 = 1;
LABEL_12:
    *a4 = v10;
    return result;
  }

  uint64_t v5 = *(void *)(result + 24);
  if (!v5 || (uint64_t result = *(void *)(result + 16)) == 0)
  {
    int v10 = 27;
    goto LABEL_12;
  }

  uint64_t v6 = 2LL;
  if (!a3) {
    uint64_t v6 = 3LL;
  }
  if (a3 == 2) {
    uint64_t v6 = 0LL;
  }
  uint64_t v7 = *(void *)(v5 + 8 * v6 + 8);
  UErrorCode v8 = (icu::FormattedStringBuilder *)(a2 + 8);
  uint64_t v9 = sub_180927EA0( result,  (icu::number::impl::DecimalQuantity *)(a2 + 304),  (icu::FormattedStringBuilder *)(a2 + 8),  0,  a4);
  (*(void (**)(uint64_t, icu::FormattedStringBuilder *, void, uint64_t, UErrorCode *))(*(void *)v7 + 16LL))( v7,  v8,  0LL,  v9,  a4);
  return icu::FormattedStringBuilder::writeTerminator(v8, a4);
}

uint64_t sub_18093951C(icu::number::Notation *a1)
{
  switch((int)a1)
  {
    case 0:
      uint64_t result = icu::number::Notation::compactShort(a1);
      break;
    case 1:
      uint64_t result = icu::number::Notation::compactLong(a1);
      break;
    case 2:
      uint64_t result = icu::number::Notation::scientific(a1);
      break;
    case 3:
      uint64_t result = icu::number::Notation::engineering(a1);
      break;
    case 4:
      uint64_t result = icu::number::Notation::simple(a1);
      break;
    default:
      abort();
  }

  return result;
}

void sub_18093957C(int a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 7:
      icu::MeasureUnit::getPermille(a2);
      break;
    case 6:
      icu::MeasureUnit::getPercent(a2);
      break;
    case 5:
      icu::MeasureUnit::MeasureUnit(a2);
      break;
    default:
      abort();
  }

void sub_1809395B0(int a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 9:
      icu::number::Precision::integer(a2);
      return;
    case 10:
      icu::number::Precision::unlimited(a2);
      return;
    case 11:
      uint64_t v2 = 0LL;
      goto LABEL_4;
    case 12:
      uint64_t v2 = 1LL;
LABEL_4:
      icu::number::Precision::currency(v2, a2);
      return;
    default:
      abort();
  }

uint64_t sub_1809395F8(int a1)
{
  return dword_180A3AD30[a1 - 13];
}

uint64_t sub_180939624(int a1, uint64_t a2)
{
  switch(a1)
  {
    case 0:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"rounding-mode-ceiling", 0, 0xFFFFFFFFLL);
      break;
    case 1:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"rounding-mode-floor", 0, 0xFFFFFFFFLL);
      break;
    case 2:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"rounding-mode-down", 0, 0xFFFFFFFFLL);
      break;
    case 3:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)"r", 0, 0xFFFFFFFFLL);
      break;
    case 4:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"rounding-mode-half-even", 0, 0xFFFFFFFFLL);
      break;
    case 5:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)"r", 0, 0xFFFFFFFFLL);
      break;
    case 6:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)"r", 0, 0xFFFFFFFFLL);
      break;
    case 7:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)"r", 0, 0xFFFFFFFFLL);
      break;
    case 8:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"rounding-mode-half-odd", 0, 0xFFFFFFFFLL);
      break;
    case 9:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)"r", 0, 0xFFFFFFFFLL);
      break;
    case 10:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"rounding-mode-half-floor", 0, 0xFFFFFFFFLL);
      break;
    default:
      abort();
  }

  return result;
}

uint64_t sub_18093984C(int a1, uint64_t a2)
{
  switch(a1)
  {
    case 0:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)"g", 0, 0xFFFFFFFFLL);
      break;
    case 1:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)"g", 0, 0xFFFFFFFFLL);
      break;
    case 2:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"group-auto", 0, 0xFFFFFFFFLL);
      break;
    case 3:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)"g", 0, 0xFFFFFFFFLL);
      break;
    case 4:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"group-thousands", 0, 0xFFFFFFFFLL);
      break;
    default:
      abort();
  }

  return result;
}

uint64_t sub_18093996C(int a1, uint64_t a2)
{
  switch(a1)
  {
    case 0:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"unit-width-narrow", 0, 0xFFFFFFFFLL);
      break;
    case 1:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"unit-width-short", 0, 0xFFFFFFFFLL);
      break;
    case 2:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)"u", 0, 0xFFFFFFFFLL);
      break;
    case 3:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"unit-width-iso-code", 0, 0xFFFFFFFFLL);
      break;
    case 4:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"unit-width-formal", 0, 0xFFFFFFFFLL);
      break;
    case 5:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"unit-width-variant", 0, 0xFFFFFFFFLL);
      break;
    case 6:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)"u", 0, 0xFFFFFFFFLL);
      break;
    default:
      abort();
  }

  return result;
}

uint64_t sub_180939AE4(int a1, uint64_t a2)
{
  switch(a1)
  {
    case 0:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)"s", 0, 0xFFFFFFFFLL);
      break;
    case 1:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)"s", 0, 0xFFFFFFFFLL);
      break;
    case 2:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)"s", 0, 0xFFFFFFFFLL);
      break;
    case 3:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"sign-accounting", 0, 0xFFFFFFFFLL);
      break;
    case 4:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"sign-accounting-always", 0, 0xFFFFFFFFLL);
      break;
    case 5:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)"s", 0, 0xFFFFFFFFLL);
      break;
    case 6:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"sign-accounting-except-zero", 0, 0xFFFFFFFFLL);
      break;
    case 7:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"sign-negative", 0, 0xFFFFFFFFLL);
      break;
    case 8:
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)L"sign-accounting-negative", 0, 0xFFFFFFFFLL);
      break;
    default:
      abort();
  }

  return result;
}

uint64_t sub_180939CB4(int a1, uint64_t a2)
{
  if (a1 == 1) {
    return icu::UnicodeString::doAppend(a2, (uint64_t)L"decimal-always", 0, 0xFFFFFFFFLL);
  }
  if (a1) {
    abort();
  }
  return icu::UnicodeString::doAppend(a2, (uint64_t)"d", 0, 0xFFFFFFFFLL);
}

void icu::number::NumberFormatter::forSkeleton( UChar **this@<X0>, const icu::UnicodeString *a2@<X1>, UErrorCode *a3@<X2>, _OWORD *a4@<X8>)
{
  v30[33] = *(void **)MEMORY[0x1895F89C0];
  if (a2)
  {
    *(void *)a2 = 0xFFFFFFFF00000000LL;
    *((_WORD *)a2 + 4) = 0;
    *((_WORD *)a2 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  }

  unsigned int v9 = atomic_load(&dword_18C5356D0);
  if (v9 == 2 || !icu::umtx_initImplPreInit(&dword_18C5356D0))
  {
    if (dword_18C5356D4 >= 1)
    {
      *a3 = dword_18C5356D4;
LABEL_10:
      a4[28] = 0u;
      a4[29] = 0u;
      a4[26] = 0u;
      a4[27] = 0u;
      a4[24] = 0u;
      a4[25] = 0u;
      a4[22] = 0u;
      a4[23] = 0u;
      a4[20] = 0u;
      a4[21] = 0u;
      a4[18] = 0u;
      a4[19] = 0u;
      a4[16] = 0u;
      a4[17] = 0u;
      a4[14] = 0u;
      a4[15] = 0u;
      a4[12] = 0u;
      a4[13] = 0u;
      a4[10] = 0u;
      a4[11] = 0u;
      a4[8] = 0u;
      a4[9] = 0u;
      a4[6] = 0u;
      a4[7] = 0u;
      a4[4] = 0u;
      a4[5] = 0u;
      a4[2] = 0u;
      a4[3] = 0u;
      *a4 = 0u;
      a4[1] = 0u;
      sub_1808D3E38((uint64_t)a4);
      return;
    }
  }

  else
  {
    sub_18093A0D4(a3);
    dword_18C5356D4 = *a3;
    icu::umtx_initImplPostInit(&dword_18C5356D0);
  }

  int v18 = 0;
  memset(v30, 0, 264);
  __int128 v29 = 0u;
  memset(v28, 0, sizeof(v28));
  __int128 v27 = 0u;
  sub_18093AEA0(this, &v18, a3, (uint64_t)&v27);
  if (*(int *)a3 <= 0)
  {
    icu::number::NumberFormatter::with(&v19);
    icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::macros( (uint64_t)&v19,  (uint64_t)&v27,  (uint64_t)a4);
    icu::Locale::~Locale((icu::Locale *)&v26);
    icu::number::impl::StringProp::~StringProp(&v25);
    icu::number::impl::StringProp::~StringProp(&v24);
    icu::number::Scale::~Scale((icu::number::Scale *)&v23);
    icu::number::impl::SymbolsWrapper::~SymbolsWrapper((icu::number::impl::SymbolsWrapper *)&v22);
    icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v21);
    icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v20);
  }

  else
  {
    if (a2)
    {
      int v10 = v18;
      *((_DWORD *)a2 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v18;
      int v11 = uprv_max(0LL, v10 - 15);
      unsigned int v12 = *((unsigned __int16 *)this + 4);
      int v13 = (__int16)v12;
      unsigned int v14 = v12 >> 5;
      if (v13 >= 0) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = *((unsigned int *)this + 3);
      }
      int v16 = uprv_min(v15, v10 + 15);
      icu::UnicodeString::doExtract((char *)this, v11, v10 - v11, (uint64_t)a2 + 8, 0);
      *((_WORD *)a2 + v10 - v11 + 4) = 0;
      int v17 = (char *)a2 + 40;
      icu::UnicodeString::doExtract((char *)this, v10, v16 - v10, (uint64_t)v17, 0);
      *(_WORD *)&v17[2 * (v16 - v10)] = 0;
      *a4 = 0u;
      a4[1] = 0u;
      a4[2] = 0u;
      a4[3] = 0u;
      a4[4] = 0u;
      a4[5] = 0u;
      a4[6] = 0u;
      a4[7] = 0u;
      a4[8] = 0u;
      a4[9] = 0u;
      a4[10] = 0u;
      a4[11] = 0u;
      a4[12] = 0u;
      a4[13] = 0u;
      a4[14] = 0u;
      a4[15] = 0u;
      a4[16] = 0u;
      a4[17] = 0u;
      a4[18] = 0u;
      a4[19] = 0u;
      a4[20] = 0u;
      a4[21] = 0u;
      a4[22] = 0u;
      a4[23] = 0u;
      a4[24] = 0u;
      a4[25] = 0u;
      a4[26] = 0u;
      a4[27] = 0u;
      a4[28] = 0u;
      a4[29] = 0u;
    }

    else
    {
      a4[28] = 0u;
      a4[29] = 0u;
      a4[26] = 0u;
      a4[27] = 0u;
      a4[24] = 0u;
      a4[25] = 0u;
      a4[22] = 0u;
      a4[23] = 0u;
      a4[20] = 0u;
      a4[21] = 0u;
      a4[18] = 0u;
      a4[19] = 0u;
      a4[16] = 0u;
      a4[17] = 0u;
      a4[14] = 0u;
      a4[15] = 0u;
      a4[12] = 0u;
      a4[13] = 0u;
      a4[10] = 0u;
      a4[11] = 0u;
      a4[8] = 0u;
      a4[9] = 0u;
      a4[6] = 0u;
      a4[7] = 0u;
      a4[4] = 0u;
      a4[5] = 0u;
      a4[2] = 0u;
      a4[3] = 0u;
      *a4 = 0u;
      a4[1] = 0u;
    }

    sub_1808D3E38((uint64_t)a4);
  }

  icu::Locale::~Locale((icu::Locale *)&v30[5]);
  icu::number::impl::StringProp::~StringProp(v30);
  icu::number::impl::StringProp::~StringProp((void **)&v29);
  icu::number::Scale::~Scale((icu::number::Scale *)((char *)&v28[9] + 8));
  icu::number::impl::SymbolsWrapper::~SymbolsWrapper((icu::number::impl::SymbolsWrapper *)((char *)&v28[7] + 8));
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)((char *)&v28[1] + 8));
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v28);
}

void sub_18093A0D4(UErrorCode *a1)
{
  uint64_t v85 = *MEMORY[0x1895F89C0];
  sub_1809B36C0(1u, (uint64_t)sub_18093E464);
  memset(v84, 0, sizeof(v84));
  icu::UCharsTrieBuilder::UCharsTrieBuilder((icu::UCharsTrieBuilder *)v84, a1);
  if (*(int *)a1 <= 0)
  {
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"compact-short");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0, a1);
    icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"c");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 1u, a1);
    icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"scientific");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 2u, a1);
    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"engineering");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 3u, a1);
    icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"n");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 4u, a1);
    icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"b");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 5u, a1);
    icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"p");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 6u, a1);
    icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"p");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 7u, a1);
    icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"p");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 9u, a1);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"p");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0xAu, a1);
    icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"precision-currency-standard");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0xBu, a1);
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"precision-currency-cash");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0xCu, a1);
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"rounding-mode-ceiling");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0xDu, a1);
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"rounding-mode-floor");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0xEu, a1);
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"rounding-mode-down");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0xFu, a1);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"r");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x10u, a1);
    icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"rounding-mode-half-even");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x11u, a1);
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"rounding-mode-half-odd");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x12u, a1);
    icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"r");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x13u, a1);
    icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"rounding-mode-half-floor");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x14u, a1);
    icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"r");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x15u, a1);
    icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"r");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x16u, a1);
    icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"r");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x17u, a1);
    icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"i");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x18u, a1);
    icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"g");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x19u, a1);
    icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"g");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x1Au, a1);
    icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"group-auto");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x1Bu, a1);
    icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"g");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x1Cu, a1);
    icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"group-thousands");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x1Du, a1);
    icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"latin");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x1Eu, a1);
    icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"unit-width-narrow");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x1Fu, a1);
    icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"unit-width-short");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x20u, a1);
    icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"u");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x21u, a1);
    icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"unit-width-iso-code");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x22u, a1);
    icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"unit-width-formal");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x23u, a1);
    icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"unit-width-variant");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x24u, a1);
    icu::UnicodeString::~UnicodeString(v37, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"u");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x25u, a1);
    icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"s");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x26u, a1);
    icu::UnicodeString::~UnicodeString(v39, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"s");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x27u, a1);
    icu::UnicodeString::~UnicodeString(v40, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"s");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x28u, a1);
    icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"sign-accounting");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x29u, a1);
    icu::UnicodeString::~UnicodeString(v42, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"sign-accounting-always");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x2Au, a1);
    icu::UnicodeString::~UnicodeString(v43, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"s");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x2Bu, a1);
    icu::UnicodeString::~UnicodeString(v44, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"sign-accounting-except-zero");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x2Cu, a1);
    icu::UnicodeString::~UnicodeString(v45, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"sign-negative");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x2Du, a1);
    icu::UnicodeString::~UnicodeString(v46, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"sign-accounting-negative");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x2Eu, a1);
    icu::UnicodeString::~UnicodeString(v47, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"d");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x2Fu, a1);
    icu::UnicodeString::~UnicodeString(v48, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"decimal-always");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x30u, a1);
    icu::UnicodeString::~UnicodeString(v49, (icu::UnicodeString *)&v79);
    if (*(int *)a1 <= 0)
    {
      icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"p");
      icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x31u, a1);
      icu::UnicodeString::~UnicodeString(v50, (icu::UnicodeString *)&v79);
      icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"m");
      icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x32u, a1);
      icu::UnicodeString::~UnicodeString(v51, (icu::UnicodeString *)&v79);
      icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"per-measure-unit");
      icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x33u, a1);
      icu::UnicodeString::~UnicodeString(v52, (icu::UnicodeString *)&v79);
      icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"u");
      icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x34u, a1);
      icu::UnicodeString::~UnicodeString(v53, (icu::UnicodeString *)&v79);
      icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"usage");
      icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x35u, a1);
      icu::UnicodeString::~UnicodeString(v54, (icu::UnicodeString *)&v79);
      icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"currency");
      icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x36u, a1);
      icu::UnicodeString::~UnicodeString(v55, (icu::UnicodeString *)&v79);
      icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"integer-width");
      icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x37u, a1);
      icu::UnicodeString::~UnicodeString(v56, (icu::UnicodeString *)&v79);
      icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"numbering-system");
      icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x38u, a1);
      icu::UnicodeString::~UnicodeString(v57, (icu::UnicodeString *)&v79);
      icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"s");
      icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x39u, a1);
      icu::UnicodeString::~UnicodeString(v58, (icu::UnicodeString *)&v79);
      if (*(int *)a1 <= 0)
      {
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"K");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0, a1);
        icu::UnicodeString::~UnicodeString(v59, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"K");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 1u, a1);
        icu::UnicodeString::~UnicodeString(v60, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"%");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 6u, a1);
        icu::UnicodeString::~UnicodeString(v61, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"%x100");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 8u, a1);
        icu::UnicodeString::~UnicodeString(v62, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L",_");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x19u, a1);
        icu::UnicodeString::~UnicodeString(v63, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)",");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x1Au, a1);
        icu::UnicodeString::~UnicodeString(v64, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L",!");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x1Cu, a1);
        icu::UnicodeString::~UnicodeString(v65, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"+");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x27u, a1);
        icu::UnicodeString::~UnicodeString(v66, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"+_");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x28u, a1);
        icu::UnicodeString::~UnicodeString(v67, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"(");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x29u, a1);
        icu::UnicodeString::~UnicodeString(v68, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"()!");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x2Au, a1);
        icu::UnicodeString::~UnicodeString(v69, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"+?");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x2Bu, a1);
        icu::UnicodeString::~UnicodeString(v70, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"(");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x2Cu, a1);
        icu::UnicodeString::~UnicodeString(v71, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"+");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x2Du, a1);
        icu::UnicodeString::~UnicodeString(v72, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"()-");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x2Eu, a1);
        icu::UnicodeString::~UnicodeString(v73, (icu::UnicodeString *)&v79);
        if (*(int *)a1 <= 0)
        {
          __int128 v80 = 0u;
          uint64_t v83 = 0LL;
          __int128 v82 = 0u;
          __int128 v81 = 0u;
          __int128 v79 = off_18971B688;
          LOWORD(v8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
          icu::UCharsTrieBuilder::buildUnicodeString((uint64_t)v84, 0LL, (icu::UnicodeString *)&v79, a1);
          unsigned __int16 v74 = (void *)*(unsigned int *)a1;
          if ((int)v74 <= 0)
          {
            int v75 = (unsigned __int16)v80 >> 5;
            if ((v80 & 0x8000u) != 0LL) {
              int v75 = DWORD1(v80);
            }
            size_t v76 = 2LL * v75;
            __int128 v77 = uprv_malloc(v76);
            qword_18C5356C8 = (uint64_t)v77;
            if ((v80 & 0x11) != 0)
            {
              __int128 v78 = 0LL;
            }

            else if ((v80 & 2) != 0)
            {
              __int128 v78 = (char *)&v80 + 2;
            }

            else
            {
              __int128 v78 = (char *)v81;
            }

            memcpy(v77, v78, v76);
          }

          icu::UnicodeString::~UnicodeString(v74, (icu::UnicodeString *)&v79);
        }
      }
    }
  }

  icu::UCharsTrieBuilder::~UCharsTrieBuilder((icu::UCharsTrieBuilder *)v84);
}

void *sub_18093AEA0@<X0>(UChar **a1@<X0>, _DWORD *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  memset(v25, 0, sizeof(v25));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v25, a1);
  LOWORD(v19) = 32;
  icu::UnicodeString::doAppend((uint64_t)v25, (uint64_t)&v19, 0, 1LL);
  *(void *)((char *)v24 + 6) = 0LL;
  v24[0] = 0LL;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 16icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *(_OWORD *)(a4 + 176) = 0u;
  *(_OWORD *)(a4 + 192) = 0u;
  *(_OWORD *)(a4 + 208) = 0u;
  *(_OWORD *)(a4 + 224) = 0u;
  *(_OWORD *)(a4 + 24icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *(_OWORD *)(a4 + 256) = 0u;
  *(_OWORD *)(a4 + 272) = 0u;
  *(_OWORD *)(a4 + 288) = 0u;
  *(_OWORD *)(a4 + 304) = 0u;
  *(_OWORD *)(a4 + 32icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *(_OWORD *)(a4 + 336) = 0u;
  *(_OWORD *)(a4 + 352) = 0u;
  *(_OWORD *)(a4 + 368) = 0u;
  *(_OWORD *)(a4 + 384) = 0u;
  *(_OWORD *)(a4 + 40icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *(_OWORD *)(a4 + 416) = 0u;
  *(_OWORD *)(a4 + 432) = 0u;
  *(_OWORD *)(a4 + 448) = 0u;
  *(void *)(a4 + 464) = 0LL;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 4) = 2;
  icu::MeasureUnit::MeasureUnit(a4 + 16);
  icu::MeasureUnit::MeasureUnit(a4 + 40);
  *(_DWORD *)(a4 + 64) = 0;
  *(_DWORD *)(a4 + 88) = 0;
  *(_DWORD *)(a4 + 96) = 4;
  *(_WORD *)(a4 + 10icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = -3;
  *(_DWORD *)(a4 + 112) = -2;
  *(_BYTE *)(a4 + 132) = 0;
  *(_WORD *)(a4 + 124) = -1;
  *(_DWORD *)(a4 + 136) = 0;
  *(void *)(a4 + 144) = 0LL;
  *(void *)(a4 + 152) = 0x900000007LL;
  *(_BYTE *)(a4 + 16icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  *(void *)(a4 + 164) = 2LL;
  *(void *)(a4 + 176) = 0LL;
  *(_DWORD *)(a4 + 184) = 0;
  *(void *)(a4 + 192) = 0LL;
  *(_WORD *)(a4 + 20icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  *(_DWORD *)(a4 + 204) = 0;
  *(void *)(a4 + 208) = 0LL;
  *(_WORD *)(a4 + 216) = 0;
  *(void *)(a4 + 228) = 0LL;
  *(void *)(a4 + 22icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
  *(void *)(a4 + 236) = 0x300000000LL;
  *(_WORD *)(a4 + 244) = 0;
  icu::Locale::Locale((icu::Locale *)(a4 + 248));
  memset(v23, 0, sizeof(v23));
  icu::StringSegment::StringSegment((uint64_t)v23, (const icu::UnicodeString *)v25, 0);
  __int128 v19 = 0LL;
  uint64_t v20 = qword_18C5356C8;
  uint64_t v21 = qword_18C5356C8;
  uint64_t v22 = 0xFFFFFFFFLL;
  uint64_t v18 = qword_18C5356C8;
  int v7 = 0;
  int v8 = 0;
  while (1)
  {
    unsigned int v9 = icu::StringSegment::codePointAt(v23, v7);
    unsigned int v10 = v9;
    BOOL isWhiteSpace = icu::PatternProps::isWhiteSpace((icu::PatternProps *)v9);
    if (v10 != 47 && !isWhiteSpace)
    {
      if (v10 < 0x10000) {
        uint64_t v14 = 1LL;
      }
      else {
        uint64_t v14 = 2LL;
      }
      v7 += v14;
      if (!v8) {
        icu::UCharsTrie::nextForCodePoint((icu::UCharsTrie *)&v19, v10);
      }
      goto LABEL_30;
    }

    BOOL v13 = isWhiteSpace;
    if (v7)
    {
      icu::StringSegment::setLength((uint64_t)v23, v7);
      if (v8)
      {
        int v8 = sub_18093BB28(v8, (icu::StringSegment *)v23, a4, a3);
      }

      else
      {
        int v8 = sub_18093B610((icu::StringSegment *)v23, (icu::UCharsTrie *)&v19, v24, a4, (char *)a3);
        uint64_t v21 = v20;
        LODWORD(v22) = -1;
      }

      icu::StringSegment::resetLength(v23);
      icu::StringSegment::adjustOffset((uint64_t)v23, v7);
    }

    else if (v8)
    {
      break;
    }

    if (v10 == 47 && !v8) {
      break;
    }
    if (v13 && v8)
    {
      int v8 = 0;
    }

    if (v10 < 0x10000) {
      int v15 = 1;
    }
    else {
      int v15 = 2;
    }
    icu::StringSegment::adjustOffset((uint64_t)v23, v15);
    int v7 = 0;
LABEL_30:
  }

  *a3 = U_NUMBER_SKELETON_SYNTAX_ERROR;
LABEL_33:
  *a2 = icu::StringSegment::getOffset((icu::StringSegment *)v23);
LABEL_34:
  icu::UCharsTrie::~UCharsTrie(&v19);
  return icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v25);
}

uint64_t sub_18093B1C8@<X0>(uint64_t a1@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(int *)a2 <= 0)
  {
    unsigned int v6 = atomic_load(&dword_18C5356D0);
    if (v6 == 2 || !icu::umtx_initImplPreInit(&dword_18C5356D0))
    {
      if (dword_18C5356D4 >= 1) {
        *a2 = dword_18C5356D4;
      }
    }

    else
    {
      sub_18093A0D4(a2);
      dword_18C5356D4 = *a2;
      icu::umtx_initImplPostInit(&dword_18C5356D0);
    }
  }

  *(_OWORD *)(a3 + 8) = 0u;
  *(void *)(a3 + 56) = 0LL;
  *(_OWORD *)(a3 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(void *)a3 = off_18971B688;
  *(_WORD *)(a3 + 8) = 2;
  return sub_18093B290(a1, a3, (int *)a2);
}

uint64_t sub_18093B290(uint64_t result, uint64_t a2, int *a3)
{
  if (*a3 <= 0)
  {
    uint64_t v5 = result;
    uint64_t result = sub_18093D408(result, a2, a3);
    if ((_DWORD)result)
    {
      __int16 v12 = 32;
      uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1LL);
    }

    if (*a3 <= 0)
    {
      uint64_t result = sub_18093D59C(v5, a2, (UErrorCode *)a3);
      if ((_DWORD)result)
      {
        __int16 v12 = 32;
        uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1LL);
      }

      if (*a3 <= 0)
      {
        uint64_t result = sub_18093D8A0(v5, a2);
        if ((_DWORD)result)
        {
          __int16 v12 = 32;
          uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1LL);
        }

        if (*a3 <= 0)
        {
          uint64_t result = sub_18093D978(v5, (icu::UnicodeString *)a2);
          if ((_DWORD)result)
          {
            __int16 v12 = 32;
            uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1LL);
          }

          if (*a3 <= 0)
          {
            int v6 = *(_DWORD *)(v5 + 96);
            if (v6 == 4
              || (sub_180939624(v6, a2),
                  __int16 v12 = 32,
                  uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1LL),
                  *a3 <= 0))
            {
              uint64_t result = sub_18093DBAC(v5, a2, a3);
              if ((_DWORD)result)
              {
                __int16 v12 = 32;
                uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1LL);
              }

              if (*a3 <= 0)
              {
                uint64_t result = sub_18093DBFC(v5, (icu::UnicodeString *)a2);
                if ((_DWORD)result)
                {
                  __int16 v12 = 32;
                  uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1LL);
                }

                if (*a3 <= 0)
                {
                  uint64_t result = sub_18093DCE0(v5, a2, a3);
                  if ((_DWORD)result)
                  {
                    __int16 v12 = 32;
                    uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1LL);
                  }

                  if (*a3 <= 0)
                  {
                    int v7 = *(_DWORD *)(v5 + 152);
                    if (v7 == 1
                      || v7 == 7
                      || (sub_18093996C(v7, a2),
                          __int16 v12 = 32,
                          uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1LL),
                          *a3 <= 0))
                    {
                      int v8 = *(_DWORD *)(v5 + 156);
                      if (!v8
                        || v8 == 9
                        || (sub_180939AE4(v8, a2),
                            __int16 v12 = 32,
                            uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1LL),
                            *a3 <= 0))
                      {
                        int v9 = *(_DWORD *)(v5 + 164);
                        if ((v9 | 2) == 2
                          || (sub_180939CB4(v9, a2),
                              __int16 v12 = 32,
                              uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1LL),
                              *a3 <= 0))
                        {
                          uint64_t result = sub_18093DDB8(v5, a2, (UErrorCode *)a3);
                          if ((_DWORD)result)
                          {
                            __int16 v12 = 32;
                            uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1LL);
                          }

                          if (*a3 <= 0)
                          {
                            if (*(_DWORD *)(v5 + 112) != -2
                              || *(__int16 *)(v5 + 216) >= 1
                              || *(void *)(v5 + 224)
                              || *(void *)(v5 + 232))
                            {
                              *a3 = 16;
                              return result;
                            }

                            if (*(__int16 *)(a2 + 8) < 0)
                            {
                              int v11 = *(_DWORD *)(a2 + 12);
                              if (v11 > 0) {
                                return sub_1808623BC(a2, v11 - 1);
                              }
                            }

                            else
                            {
                              unsigned int v10 = *(unsigned __int16 *)(a2 + 8);
                              if (v10 >= 0x20)
                              {
                                int v11 = v10 >> 5;
                                return sub_1808623BC(a2, v11 - 1);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_18093B610(icu::StringSegment *a1, icu::UCharsTrie *a2, _BYTE *a3, uint64_t a4, char *a5)
{
  int v10 = icu::StringSegment::charAt(a1, 0);
  if (v10 <= 63)
  {
    if (v10 == 46)
    {
      if (!a3[4])
      {
        a3[4] = 1;
        sub_18093BCD0(a1, a4, a5);
        return 2LL;
      }

      goto LABEL_18;
    }

    if (v10 == 48)
    {
      if (!a3[8])
      {
        a3[8] = 1;
        sub_18093C13C(a1, a4, a5);
        return 0LL;
      }

      goto LABEL_18;
    }

    goto LABEL_11;
  }

  if (v10 != 64)
  {
    if (v10 == 69)
    {
      if (!*a3)
      {
        *a3 = 1;
        sub_18093BFA8(a1, a4, a5);
        return 0LL;
      }

      goto LABEL_18;
    }

uint64_t sub_18093BB28(int a1, icu::StringSegment *a2, uint64_t a3, UErrorCode *a4)
{
  switch(a1)
  {
    case 1:
      if ((sub_18093CF04(a2, a3) & 1) == 0)
      {
        if ((sub_18093CFC4(a2, a3) & 1) == 0)
        {
          goto LABEL_8;
        }
      }

      return 1LL;
    case 2:
      if ((sub_18093D168(a2, a3, a4) & 1) != 0) {
        return 3LL;
      }
      goto LABEL_6;
    case 3:
LABEL_6:
      BOOL v8 = sub_18093D364(a2, a3);
      uint64_t result = 0LL;
      return result;
    case 4:
      sub_180937868(a2, a3 + 64, a4);
      return 3LL;
    case 5:
      sub_18093C304(a2, a3, a4);
      goto LABEL_20;
    case 6:
      sub_18093C670(a2, a3, a4);
      goto LABEL_20;
    case 7:
      sub_18093C6F8(a2, a3, a4);
      goto LABEL_20;
    case 8:
      sub_18093C8A0(a2, a3, a4);
      goto LABEL_20;
    case 9:
      sub_18093C1EC(a2, a3, a4);
      goto LABEL_20;
    case 10:
      sub_18093C9F4(a2, a3, a4);
      goto LABEL_20;
    case 11:
      sub_18093CB88(a2, a3, (char *)a4);
      goto LABEL_20;
    case 12:
      sub_18093CD0C(a2, a3, a4);
LABEL_20:
      uint64_t result = 0LL;
      break;
    default:
LABEL_8:
      uint64_t result = 0LL;
      *a4 = U_NUMBER_SKELETON_SYNTAX_ERROR;
      break;
  }

  return result;
}

double sub_18093BCD0(icu::StringSegment *a1, uint64_t a2, _DWORD *a3)
{
  if ((int)icu::StringSegment::length(a1) < 2)
  {
    uint64_t v7 = 0LL;
    int v10 = 1;
  }

  else
  {
    uint64_t v6 = 0LL;
    while (1)
    {
      uint64_t v7 = (v6 + 1);
      int v8 = icu::StringSegment::length(a1);
      int v9 = v6 + 2;
      uint64_t v6 = (v6 + 1);
      if (v9 >= v8)
      {
        int v10 = v7 + 1;
        goto LABEL_8;
      }
    }

    int v10 = v6 + 1;
    uint64_t v7 = v6;
  }

double sub_18093BE5C(icu::StringSegment *a1, uint64_t a2, _DWORD *a3)
{
  if ((int)icu::StringSegment::length(a1) < 1)
  {
    uint64_t v6 = 0LL;
  }

  else
  {
    uint64_t v6 = 0LL;
    do
    {
      uint64_t v6 = (v6 + 1);
    }

    while ((int)v6 < (int)icu::StringSegment::length(a1));
  }

  int v7 = v6;
  if ((int)v6 >= (int)icu::StringSegment::length(a1))
  {
LABEL_15:
    if (v7 >= (int)icu::StringSegment::length(a1))
    {
      icu::number::Precision::minMaxSignificantDigits(v6, v7, (uint64_t)v9);
      goto LABEL_18;
    }

uint64_t sub_18093BFA8(icu::StringSegment *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result = icu::StringSegment::length(a1);
  if ((_DWORD)result == 1) {
    goto LABEL_2;
  }
  int v7 = 1;
  int v8 = icu::StringSegment::charAt(a1, 1);
  if (v8 == 69)
  {
    uint64_t result = icu::StringSegment::length(a1);
    if ((_DWORD)result == 2)
    {
LABEL_2:
      *a3 = 65811;
      return result;
    }

    int v7 = 2;
  }

  if (icu::StringSegment::charAt(a1, v7) == 43)
  {
    uint64_t result = icu::StringSegment::length(a1);
    if ((_DWORD)result == v7 + 1) {
      goto LABEL_2;
    }
    if (icu::StringSegment::charAt(a1, v7 + 1) != 33)
    {
      uint64_t result = icu::StringSegment::charAt(a1, v7 + 1);
      if ((_DWORD)result != 63) {
        goto LABEL_2;
      }
    }

    v7 += 2;
    uint64_t result = icu::StringSegment::length(a1);
    if ((_DWORD)result == v7) {
      goto LABEL_2;
    }
  }

  int v9 = (icu::number::Notation *)icu::StringSegment::length(a1);
  if (v7 < (int)v9)
  {
    int v10 = 0;
    while (1)
    {
      uint64_t result = icu::StringSegment::charAt(a1, v7 + v10);
      if ((_DWORD)result != 48) {
        goto LABEL_2;
      }
      ++v10;
      int v9 = (icu::number::Notation *)icu::StringSegment::length(a1);
    }
  }

  int v10 = 0;
LABEL_16:
  if (v8 == 69) {
    uint64_t v11 = icu::number::Notation::engineering(v9);
  }
  else {
    uint64_t v11 = icu::number::Notation::scientific(v9);
  }
  uint64_t v15 = v11;
  int v16 = v12;
  uint64_t v17 = icu::number::ScientificNotation::withExponentSignDisplay((uint64_t)&v15);
  int v18 = v13;
  uint64_t result = icu::number::ScientificNotation::withMinExponentDigits((icu::number::ScientificNotation *)&v17, v10);
  *(void *)(a2 + 4) = result;
  *(_DWORD *)(a2 + 12) = v14;
  return result;
}

uint64_t sub_18093C13C(icu::StringSegment *a1, uint64_t a2, _DWORD *a3)
{
  if ((int)icu::StringSegment::length(a1) < 2)
  {
    uint64_t v6 = 1LL;
  }

  else
  {
    uint64_t v6 = 0LL;
    while (1)
    {
      int v7 = v6 + 1;
      int v8 = icu::StringSegment::length(a1);
      int v9 = v6 + 2;
      uint64_t v6 = (v6 + 1);
      if (v9 >= v8)
      {
        uint64_t v6 = (v7 + 1);
        break;
      }
    }
  }

  uint64_t result = icu::StringSegment::length(a1);
  if ((int)v6 >= (int)result)
  {
    uint64_t result = icu::number::IntegerWidth::zeroFillTo((icu::number::IntegerWidth *)v6);
    *(void *)(a2 + 124) = result;
    *(_BYTE *)(a2 + 132) = v11;
  }

  else
  {
    *a3 = 65811;
  }

  return result;
}

void sub_18093C1EC(icu::StringSegment *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  if (icu::StringSegment::length(a1) == 3)
  {
    icu::StringSegment::toTempUnicodeString(a1, (uint64_t)&v10);
    uint64_t v6 = (__int128 *)WORD4(v10);
    if ((BYTE8(v10) & 0x11) != 0)
    {
      int v7 = 0LL;
    }

    else if ((BYTE8(v10) & 2) != 0)
    {
      uint64_t v6 = &v10;
      int v7 = (char *)&v10 + 10;
    }

    else
    {
      int v7 = (char *)*((void *)&v11 + 1);
    }

    icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v10);
    int v9 = 0;
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    int v8 = v7;
    icu::CurrencyUnit::CurrencyUnit(&v10, &v8, &v9);
    if (v9 < 1) {
      icu::MeasureUnit::operator=(a2 + 16, (unint64_t)&v10);
    }
    else {
      *a3 = 65811;
    }
    icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)&v10);
  }

  else
  {
    *a3 = 65811;
  }

void *sub_18093C304(icu::StringSegment *a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  icu::StringSegment::toTempUnicodeString(a1, (uint64_t)&v34);
  unint64_t v5 = 0LL;
  uint64_t v6 = (void *)WORD4(v34);
  unint64_t v7 = (unint64_t)WORD4(v34) >> 5;
  unint64_t v8 = *((void *)&v35 + 1);
  if ((BYTE8(v34) & 2) != 0) {
    unint64_t v9 = (unint64_t)&v34 | 0xA;
  }
  else {
    unint64_t v9 = *((void *)&v35 + 1);
  }
  if ((WORD4(v34) & 0x8000) != 0) {
    goto LABEL_7;
  }
LABEL_5:
  unint64_t v10 = (unint64_t)WORD4(v34) >> 5;
  if (v5 < v7)
  {
    while (v10 <= v5 || *(_WORD *)(v9 + 2 * v5) != 45)
    {
      ++v5;
      if ((WORD4(v34) & 0x8000) == 0) {
        goto LABEL_5;
      }
LABEL_7:
      unint64_t v10 = HIDWORD(v34);
    }

    if ((WORD4(v34) & 0x8000) == 0) {
      goto LABEL_14;
    }
LABEL_13:
    LODWORD(v7) = HIDWORD(v34);
  }

void sub_18093C670(icu::StringSegment *a1, uint64_t a2, UErrorCode *a3)
{
  unint64_t v6 = a2 + 16;
  icu::MeasureUnit::MeasureUnit((uint64_t)v7, a2 + 16);
  sub_18093C304(a1, a2, a3);
  if (*(int *)a3 <= 0)
  {
    icu::MeasureUnit::operator=(a2 + 40, v6);
    icu::MeasureUnit::operator=(v6, (unint64_t)v7);
  }

  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v7);
}

void sub_18093C6F8(icu::StringSegment *a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  memset(&v15[1], 0, 48);
  uint64_t v16 = 0LL;
  v15[0] = (char *)&v15[1] + 5;
  LODWORD(v15[1]) = 40;
  UErrorCode v11 = U_ZERO_ERROR;
  icu::StringSegment::toTempUnicodeString(a1, (uint64_t)&v12);
  unint64_t v6 = 0LL;
  if ((v13[0] & 0x11) == 0)
  {
    if ((v13[0] & 2) != 0) {
      unint64_t v6 = (char *)v13 + 2;
    }
    else {
      unint64_t v6 = (char *)v13[2];
    }
  }

  unint64_t v10 = v6;
  icu::StringSegment::length(a1);
  icu::UnicodeString::UnicodeString(v14, 0LL, &v10);
  icu::CharString::appendInvariantChars((icu::CharString *)v15, (const icu::UnicodeString *)v14, &v11);
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v14);
  unint64_t v9 = v10;
  icu::UnicodeString::~UnicodeString(&v9, (icu::UnicodeString *)&v12);
  UErrorCode v8 = v11;
  if (v11 == U_INVARIANT_CONVERSION_ERROR)
  {
    UErrorCode v8 = U_NUMBER_SKELETON_SYNTAX_ERROR;
LABEL_8:
    *a3 = v8;
    goto LABEL_9;
  }

  if (v11 > U_ZERO_ERROR) {
    goto LABEL_8;
  }
  uint64_t v12 = qword_18970B7E0;
  v13[0] = 0LL;
  icu::MeasureUnit::forIdentifier((uint64_t)v15[0], v16, (int *)v13, (uint64_t)v14);
  icu::MeasureUnit::operator=(a2 + 16, (uint64_t)v14);
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v14);
  if (SLODWORD(v13[0]) >= 1) {
    *a3 = U_NUMBER_SKELETON_SYNTAX_ERROR;
  }
  icu::ErrorCode::~ErrorCode((icu::ErrorCode *)&v12);
LABEL_9:
  if (BYTE4(v15[1])) {
    uprv_free(v15[0]);
  }
}

void sub_18093C8A0(icu::StringSegment *a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  memset(&v16[1], 0, 48);
  uint64_t v17 = 0LL;
  v16[0] = (char *)&v16[1] + 5;
  LODWORD(v16[1]) = 40;
  UErrorCode v11 = U_ZERO_ERROR;
  icu::StringSegment::toTempUnicodeString(a1, (uint64_t)v12);
  unint64_t v6 = 0LL;
  if ((v13 & 0x11) == 0)
  {
    if ((v13 & 2) != 0) {
      unint64_t v6 = v14;
    }
    else {
      unint64_t v6 = *(_BYTE **)&v14[14];
    }
  }

  unint64_t v10 = v6;
  icu::StringSegment::length(a1);
  icu::UnicodeString::UnicodeString(v15, 0LL, &v10);
  icu::CharString::appendInvariantChars((icu::CharString *)v16, (const icu::UnicodeString *)v15, &v11);
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v15);
  unint64_t v9 = v10;
  icu::UnicodeString::~UnicodeString(&v9, (icu::UnicodeString *)v12);
  UErrorCode v8 = v11;
  if (v11 == U_INVARIANT_CONVERSION_ERROR)
  {
    UErrorCode v8 = U_NUMBER_SKELETON_SYNTAX_ERROR;
LABEL_8:
    *a3 = v8;
    goto LABEL_9;
  }

  if (v11 > U_ZERO_ERROR) {
    goto LABEL_8;
  }
  icu::number::impl::StringProp::set(a2 + 192, (const char *)v16[0], v17);
LABEL_9:
  if (BYTE4(v16[1])) {
    uprv_free(v16[0]);
  }
}

uint64_t sub_18093C9F4(icu::StringSegment *a1, uint64_t a2, _DWORD *a3)
{
  int v6 = icu::StringSegment::charAt(a1, 0) & 0xFFFE;
  BOOL v7 = v6 != 42;
  int v8 = v6 == 42;
  if (v6 == 42) {
    int v9 = -1;
  }
  else {
    int v9 = 0;
  }
  if ((int)icu::StringSegment::length(a1) > v8 && v6 != 42 && icu::StringSegment::charAt(a1, v8) == 35)
  {
    int v10 = v9 + 1;
    int v11 = v8 + 1;
    do
    {
      int v9 = v10;
      int v8 = v11;
      int v12 = icu::StringSegment::charAt(a1, v8);
      int v10 = v9 + 1;
      int v11 = v8 + 1;
    }

    while (v12 == 35);
    BOOL v7 = 1;
  }

  if (v8 >= (int)icu::StringSegment::length(a1) || v8 >= (int)icu::StringSegment::length(a1))
  {
    __int16 v13 = 0LL;
  }

  else
  {
    __int16 v13 = 0LL;
    while (icu::StringSegment::charAt(a1, v8 + (int)v13) == 48)
    {
      __int16 v13 = (icu::number::IntegerWidth *)((_DWORD)v13 + 1);
      if (v8 + (int)v13 >= (int)icu::StringSegment::length(a1))
      {
        v8 += (int)v13;
        goto LABEL_18;
      }
    }

    v8 += (int)v13;
  }

void sub_18093CB88(icu::StringSegment *a1, uint64_t a2, char *a3)
{
  v18[8] = *(void **)MEMORY[0x1895F89C0];
  memset(&v18[1], 0, 56);
  v18[0] = (char *)&v18[1] + 5;
  LODWORD(v18[1]) = 40;
  UErrorCode v13 = U_ZERO_ERROR;
  icu::StringSegment::toTempUnicodeString(a1, (uint64_t)v14);
  int v6 = 0LL;
  if ((v15 & 0x11) == 0)
  {
    if ((v15 & 2) != 0) {
      int v6 = v16;
    }
    else {
      int v6 = *(_BYTE **)&v16[14];
    }
  }

  int v12 = v6;
  icu::StringSegment::length(a1);
  icu::UnicodeString::UnicodeString(v17, 0LL, &v12);
  icu::CharString::appendInvariantChars((icu::CharString *)v18, (const icu::UnicodeString *)v17, &v13);
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v17);
  int v11 = v12;
  icu::UnicodeString::~UnicodeString(&v11, (icu::UnicodeString *)v14);
  UErrorCode v9 = v13;
  if (v13 == U_INVARIANT_CONVERSION_ERROR)
  {
    UErrorCode v9 = U_NUMBER_SKELETON_SYNTAX_ERROR;
LABEL_8:
    *(_DWORD *)a3 = v9;
    goto LABEL_9;
  }

  if (v13 > U_ZERO_ERROR) {
    goto LABEL_8;
  }
  InstanceByuint64_t Name = icu::NumberingSystem::createInstanceByName((icu::NumberingSystem *)v18[0], a3, v8);
  else {
    *(_DWORD *)a3 = 65811;
  }
LABEL_9:
  if (BYTE4(v18[1])) {
    uprv_free(v18[0]);
  }
}

void sub_18093CD0C(icu::StringSegment *a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  memset(&v19[1], 0, 48);
  uint64_t v20 = 0LL;
  v19[0] = (char *)&v19[1] + 5;
  LODWORD(v19[1]) = 40;
  UErrorCode v14 = U_ZERO_ERROR;
  icu::StringSegment::toTempUnicodeString(a1, (uint64_t)&v15);
  int v6 = 0LL;
  if ((v16 & 0x11) == 0)
  {
    if ((v16 & 2) != 0) {
      int v6 = v17;
    }
    else {
      int v6 = *(_BYTE **)&v17[14];
    }
  }

  UErrorCode v13 = v6;
  icu::StringSegment::length(a1);
  icu::UnicodeString::UnicodeString(v18, 0LL, &v13);
  icu::CharString::appendInvariantChars((icu::CharString *)v19, (const icu::UnicodeString *)v18, &v14);
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v18);
  int v12 = v13;
  icu::UnicodeString::~UnicodeString(&v12, (icu::UnicodeString *)&v15);
  UErrorCode v9 = v14;
  if (v14 == U_INVARIANT_CONVERSION_ERROR)
  {
    UErrorCode v9 = U_NUMBER_SKELETON_SYNTAX_ERROR;
LABEL_8:
    *a3 = v9;
    goto LABEL_9;
  }

  if (v14 > U_ZERO_ERROR) {
    goto LABEL_8;
  }
  int v10 = (icu::number::impl::DecNum *)icu::UMemory::operator new((uint64_t *)v14, (icu::UMemory *)0x60, v8);
  if (v10)
  {
    int v11 = v10;
    __int16 v15 = icu::number::impl::DecNum::DecNum(v10);
    if (*(int *)a3 <= 0)
    {
      icu::number::impl::DecNum::setTo(v11, (const char *)v19[0], v20, a3);
      if (*(int *)a3 > 0 || icu::number::impl::DecNum::isSpecial(v11))
      {
        *a3 = U_NUMBER_SKELETON_SYNTAX_ERROR;
      }

      else
      {
        __int16 v15 = 0LL;
        icu::number::Scale::Scale((icu::number::Scale *)v18, 0, v11);
        icu::number::Scale::operator=(a2 + 168, (uint64_t)v18);
        icu::number::Scale::~Scale((icu::number::Scale *)v18);
      }
    }
  }

  else
  {
    __int16 v15 = 0LL;
  }

  sub_1807DDC3C((uint64_t *)&v15);
LABEL_9:
  if (BYTE4(v19[1])) {
    uprv_free(v19[0]);
  }
}

uint64_t sub_18093CF04(icu::StringSegment *a1, uint64_t a2)
{
  __int16 v4 = icu::StringSegment::charAt(a1, 0);
  uint64_t result = 0LL;
  if ((v4 & 0xFFFE) == 0x2A)
  {
    if ((int)icu::StringSegment::length(a1) < 2)
    {
      int v7 = 0;
      int v6 = 1;
    }

    else
    {
      int v6 = 1;
      do
      {
        ++v6;
      }

      while (v6 < (int)icu::StringSegment::length(a1));
      int v7 = v6 - 1;
    }

    if (v6 >= (int)icu::StringSegment::length(a1))
    {
      *(void *)(a2 + 4) = icu::number::ScientificNotation::withMinExponentDigits( (icu::number::ScientificNotation *)(a2 + 4),  v7);
      *(_DWORD *)(a2 + 12) = v8;
      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_18093CFC4(icu::StringSegment *a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  v17[0] = 0LL;
  v17[1] = (void *)qword_18C5356C8;
  uint64_t v18 = (unsigned __int16 *)qword_18C5356C8;
  uint64_t v19 = 0xFFFFFFFFLL;
  v15[1] = qword_18C5356C8;
  icu::StringSegment::toTempUnicodeString(a1, (uint64_t)v20);
  __int16 v4 = 0LL;
  if ((v21 & 0x11) == 0)
  {
    if ((v21 & 2) != 0) {
      __int16 v4 = v22;
    }
    else {
      __int16 v4 = *(_WORD **)&v22[14];
    }
  }

  __int16 v16 = v4;
  int v5 = icu::StringSegment::length(a1);
  int v6 = icu::UCharsTrie::next((uint64_t)v17, &v16, v5);
  v15[0] = v16;
  icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v20);
  int v7 = v18 + 1;
  unsigned int v8 = *v18;
  if ((__int16)*v18 < 0)
  {
    unsigned int v10 = v8 & 0x7FFF;
    if (v10 >= 0x4000)
    {
      if (v10 == 0x7FFF)
      {
        int v11 = v18[1] << 16;
        int v7 = v18 + 2;
      }

      else
      {
        int v11 = (v10 << 16) - 0x40000000;
      }

      unsigned int v10 = v11 | *v7;
    }
  }

  else
  {
    unsigned int v9 = v8 >> 6;
    if (v9 > 0x100) {
      unsigned int v10 = v9 > 0x1FE ? v18[2] | (v18[1] << 16) : (*v7 | ((v9 & 0x1FF) << 16)) - 16842752;
    }
    else {
      unsigned int v10 = v9 - 1;
    }
  }

  if (v10 - 38 > 8)
  {
LABEL_19:
    uint64_t v13 = 0LL;
  }

  else
  {
    *(void *)(a2 + 4) = icu::number::ScientificNotation::withExponentSignDisplay(a2 + 4);
    *(_DWORD *)(a2 + 12) = v12;
    uint64_t v13 = 1LL;
  }

  icu::UCharsTrie::~UCharsTrie(v17);
  return v13;
}

uint64_t sub_18093D168(icu::StringSegment *a1, uint64_t a2, _DWORD *a3)
{
  int v6 = icu::StringSegment::charAt(a1, 0);
  uint64_t result = 0LL;
  if (v6 == 64)
  {
    if ((int)icu::StringSegment::length(a1) < 1)
    {
      int v8 = 0;
    }

    else
    {
      int v8 = 0;
      do
      {
        ++v8;
      }

      while (v8 < (int)icu::StringSegment::length(a1));
    }

    int v9 = v8;
    if (v8 < (int)icu::StringSegment::length(a1))
    {
      if ((icu::StringSegment::charAt(a1, v8) & 0xFFFE) == 0x2A)
      {
        if (v8 + 1 >= (int)icu::StringSegment::length(a1))
        {
          icu::number::FractionPrecision::withMinDigits(a2 + 64, v8, (uint64_t)v12);
          *(_OWORD *)(a2 + 64) = *(_OWORD *)v12;
          *(_OWORD *)(a2 + 76) = *(_OWORD *)&v12[12];
          return 1LL;
        }

BOOL sub_18093D364(icu::StringSegment *a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  icu::UnicodeString::UnicodeString((uint64_t)v7, (uint64_t)"w");
  BOOL v4 = icu::StringSegment::operator==(a1, (uint64_t)v7);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v7);
  if (v4)
  {
    icu::number::Precision::trailingZeroDisplay(a2 + 64, 1, (uint64_t)v7);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)v7;
    *(_OWORD *)(a2 + 76) = *(_OWORD *)&v7[12];
  }

  return v4;
}

uint64_t sub_18093D408(uint64_t a1, uint64_t a2, int *a3)
{
  int v6 = *(_DWORD *)(a1 + 4);
  if (v6)
  {
    if (v6 == 1)
    {
      int v7 = *(_DWORD *)(a1 + 8);
      if (v7)
      {
        if (v7 != 1)
        {
          uint64_t v8 = 0LL;
          *a3 = 16;
          return v8;
        }

        icu::UnicodeString::doAppend(a2, (uint64_t)"c", 0, 0xFFFFFFFFLL);
      }

      else
      {
        icu::UnicodeString::doAppend(a2, (uint64_t)L"compact-short", 0, 0xFFFFFFFFLL);
      }

      return 1LL;
    }

    return 0LL;
  }

  else
  {
    if (*(_BYTE *)(a1 + 8) == 3) {
      icu::UnicodeString::doAppend(a2, (uint64_t)L"engineering", 0, 0xFFFFFFFFLL);
    }
    else {
      icu::UnicodeString::doAppend(a2, (uint64_t)L"scientific", 0, 0xFFFFFFFFLL);
    }
    if (*(__int16 *)(a1 + 10) < 2
      || (__int16 v10 = 47,
          icu::UnicodeString::doAppend(a2, (uint64_t)&v10, 0, 1LL),
          sub_18093DE48(*(__int16 *)(a1 + 10), a2),
          uint64_t v8 = 0LL,
          *a3 <= 0))
    {
      if (!*(_DWORD *)(a1 + 12)) {
        return 1LL;
      }
      __int16 v10 = 47;
      uint64_t v8 = 1LL;
      icu::UnicodeString::doAppend(a2, (uint64_t)&v10, 0, 1LL);
      sub_180939AE4(*(_DWORD *)(a1 + 12), a2);
    }
  }

  return v8;
}

BOOL sub_18093D59C(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  memset(v23, 0, sizeof(v23));
  int v6 = (icu::MeasureUnit *)(a1 + 16);
  icu::MeasureUnit::MeasureUnit((uint64_t)v23, a1 + 16);
  icu::MeasureUnit::MeasureUnit((uint64_t)&v24);
  uint64_t v8 = *(void *)(a1 + 40);
  int v7 = (icu::MeasureUnit *)(a1 + 40);
  char v9 = (*(uint64_t (**)(icu::MeasureUnit *, __int128 *))(v8 + 32))(v7, &v24);
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v24);
  if ((v9 & 1) == 0)
  {
    Type = icu::MeasureUnit::getType(v6);
    if (!strcmp("currency", Type) || (int v11 = icu::MeasureUnit::getType(v7), !strcmp("currency", v11)))
    {
      BOOL v14 = 0LL;
      *a3 = U_UNSUPPORTED_ERROR;
      goto LABEL_21;
    }

    icu::MeasureUnit::reciprocal((icu::MeasureUnitImpl **)v7, a3, (uint64_t)v22);
    icu::MeasureUnit::product(v23, (const icu::MeasureUnit *)v22, a3, (uint64_t)&v24);
    icu::MeasureUnit::operator=((uint64_t)v23, (uint64_t)&v24);
    icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v24);
    icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v22);
  }

  int v12 = icu::MeasureUnit::getType((icu::MeasureUnit *)v23);
  if (!strcmp("currency", v12))
  {
    icu::UnicodeString::doAppend(a2, (uint64_t)"c", 0, 0xFFFFFFFFLL);
    v21[0] = (uint64_t)"c";
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    icu::CurrencyUnit::CurrencyUnit(v21, (icu::CurrencyUnit *)&v24, (const icu::MeasureUnit *)v23, a3);
    BOOL v14 = *a3 < U_ILLEGAL_ARGUMENT_ERROR;
    icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)&v24);
  }

  else
  {
    icu::MeasureUnit::MeasureUnit((uint64_t)&v24);
    char v13 = (*((uint64_t (**)(icu::MeasureUnitImpl **, __int128 *))v23[0] + 4))(v23, &v24);
    icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v24);
    if ((v13 & 1) != 0)
    {
      BOOL v14 = 0LL;
    }

    else
    {
      Subtype = icu::MeasureUnit::getSubtype((icu::MeasureUnit *)v23);
      if (!strcmp("percent", Subtype))
      {
        icu::UnicodeString::doAppend(a2, (uint64_t)"p", 0, 0xFFFFFFFFLL);
        v21[1] = (uint64_t)"p";
      }

      else
      {
        __int16 v16 = icu::MeasureUnit::getSubtype((icu::MeasureUnit *)v23);
        if (!strcmp("permille", v16))
        {
          icu::UnicodeString::doAppend(a2, (uint64_t)"p", 0, 0xFFFFFFFFLL);
          uint64_t v21[2] = (uint64_t)"p";
        }

        else
        {
          icu::UnicodeString::doAppend(a2, (uint64_t)L"unit/", 0, 0xFFFFFFFFLL);
          v21[3] = (uint64_t)L"unit/";
          Identifier = icu::MeasureUnit::getIdentifier((icu::MeasureUnit *)v23);
          icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v24, Identifier);
          if ((SWORD4(v24) & 0x8000u) == 0) {
            uint64_t v18 = WORD4(v24) >> 5;
          }
          else {
            uint64_t v18 = HIDWORD(v24);
          }
          icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v24, 0, v18);
          icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v24);
        }
      }

      BOOL v14 = 1LL;
    }
  }

BOOL sub_18093D8A0(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  int v2 = *(__int16 *)(a1 + 200);
  if (v2 >= 1)
  {
    icu::UnicodeString::doAppend(a2, (uint64_t)L"usage/", 0, 0xFFFFFFFFLL);
    icu::UnicodeString::UnicodeString(v8, *(void *)(a1 + 192), 0xFFFFFFFFLL, 0LL);
    if ((v9 & 0x8000u) == 0) {
      uint64_t v5 = v9 >> 5;
    }
    else {
      uint64_t v5 = v10;
    }
    icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)v8, 0, v5);
    icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v8);
  }

  return v2 > 0;
}

uint64_t sub_18093D978(uint64_t a1, icu::UnicodeString *this)
{
  switch(*(_DWORD *)(a1 + 64))
  {
    case 1:
      icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)"p", 0, 0xFFFFFFFFLL);
      goto LABEL_14;
    case 2:
      sub_18093DEA8(*(__int16 *)(a1 + 72), *(__int16 *)(a1 + 74), (uint64_t)this);
      goto LABEL_14;
    case 3:
      uint64_t v5 = *(__int16 *)(a1 + 76);
      int v6 = *(__int16 *)(a1 + 78);
      goto LABEL_13;
    case 4:
      sub_18093DEA8(*(__int16 *)(a1 + 72), *(__int16 *)(a1 + 74), (uint64_t)this);
      __int16 v8 = 47;
      icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v8, 0, 1LL);
      int v6 = *(__int16 *)(a1 + 78);
      if (*(_BYTE *)(a1 + 84))
      {
        if (*(_DWORD *)(a1 + 80))
        {
          uint64_t v5 = 1LL;
        }

        else
        {
          uint64_t v5 = *(__int16 *)(a1 + 78);
          int v6 = -1;
        }

uint64_t sub_18093DBAC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v3 = *(_DWORD *)(a1 + 108);
  if (v3 == 2) {
    return 0LL;
  }
  if (v3 == 5)
  {
    uint64_t result = 0LL;
    *a3 = 16;
  }

  else
  {
    sub_18093984C(v3, a2);
    return 1LL;
  }

  return result;
}

uint64_t sub_18093DBFC(uint64_t a1, icu::UnicodeString *a2)
{
  int v2 = (unsigned __int16 *)(a1 + 124);
  if (*(_BYTE *)(a1 + 132)) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = *(unsigned __int16 *)(a1 + 124) == 0xFFFF;
  }
  if (v3) {
    return 0LL;
  }
  uint64_t v8 = icu::number::IntegerWidth::zeroFillTo((icu::number::IntegerWidth *)1);
  int v9 = v6;
  if (*(unsigned __int16 *)(a1 + 124) | *(unsigned __int16 *)(a1 + 126))
  {
    icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)"i", 0, 0xFFFFFFFFLL);
    sub_18093E110(*(__int16 *)(a1 + 124), *(__int16 *)(a1 + 126), a2);
  }

  else
  {
    icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)"i", 0, 0xFFFFFFFFLL);
  }

  return 1LL;
}

BOOL sub_18093DCE0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = (icu::number::impl::SymbolsWrapper *)(a1 + 136);
  isNumberingSysteuint64_t m = icu::number::impl::SymbolsWrapper::isNumberingSystem((icu::number::impl::SymbolsWrapper *)(a1 + 136));
  if (isNumberingSystem)
  {
    NumberingSysteuint64_t m = (icu::NumberingSystem *)icu::number::impl::SymbolsWrapper::getNumberingSystem(v5);
    uint64_t Name = (const char *)icu::NumberingSystem::getName(NumberingSystem);
    if (!strcmp(Name, "latn"))
    {
      icu::UnicodeString::doAppend(a2, (uint64_t)L"latin", 0, 0xFFFFFFFFLL);
    }

    else
    {
      icu::UnicodeString::doAppend(a2, (uint64_t)L"numbering-system/", 0, 0xFFFFFFFFLL);
      sub_18093E1A4(NumberingSystem, a2);
    }
  }

  else if (icu::number::impl::SymbolsWrapper::isDecimalFormatSymbols(v5))
  {
    *a3 = 16;
  }

  return isNumberingSystem;
}

uint64_t sub_18093DDB8(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  if (*(_DWORD *)(a1 + 168)) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = *(void *)(a1 + 176) == 0LL;
  }
  uint64_t v4 = !v3;
  if (!v3)
  {
    icu::UnicodeString::doAppend(a2, (uint64_t)L"scale/", 0, 0xFFFFFFFFLL);
    sub_18093E23C(*(_DWORD *)(a1 + 168), *(const icu::number::impl::DecNum **)(a1 + 176), a2, a3);
  }

  return v4;
}

uint64_t sub_18093DE48(int a1, uint64_t a2)
{
  __int16 v5 = 42;
  uint64_t result = icu::UnicodeString::doAppend(a2, (uint64_t)&v5, 0, 1LL);
  if (a1 >= 1)
  {
    do
    {
      uint64_t result = icu::UnicodeString::append(a2, 0x65u);
      --a1;
    }

    while (a1);
  }

  return result;
}

uint64_t sub_18093DEA8(int a1, int a2, uint64_t a3)
{
  if (!(a2 | a1)) {
    return icu::UnicodeString::doAppend(a3, (uint64_t)"p", 0, 0xFFFFFFFFLL);
  }
  __int16 v9 = 46;
  uint64_t result = icu::UnicodeString::doAppend(a3, (uint64_t)&v9, 0, 1LL);
  if (a1 >= 1)
  {
    int v7 = a1;
    do
    {
      uint64_t result = icu::UnicodeString::append(a3, 0x30u);
      --v7;
    }

    while (v7);
  }

  if (a2 == -1)
  {
    __int16 v10 = 42;
    return icu::UnicodeString::doAppend(a3, (uint64_t)&v10, 0, 1LL);
  }

  else
  {
    int v8 = a2 - a1;
    if (v8 >= 1)
    {
      do
      {
        uint64_t result = icu::UnicodeString::append(a3, 0x23u);
        --v8;
      }

      while (v8);
    }
  }

  return result;
}

uint64_t sub_18093DF90(uint64_t result, int a2, icu::UnicodeString *this)
{
  int v5 = result;
  if ((int)result >= 1)
  {
    int v6 = result;
    do
    {
      uint64_t result = icu::UnicodeString::append((uint64_t)this, 0x40u);
      --v6;
    }

    while (v6);
  }

  if (a2 == -1)
  {
    __int16 v8 = 42;
    return icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v8, 0, 1LL);
  }

  else
  {
    int v7 = a2 - v5;
    if (v7 >= 1)
    {
      do
      {
        uint64_t result = icu::UnicodeString::append((uint64_t)this, 0x23u);
        --v7;
      }

      while (v7);
    }
  }

  return result;
}

void sub_18093E02C(unsigned int a1, int a2, int a3, uint64_t a4)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  uint64_t v11 = 0LL;
  memset(v10, 0, sizeof(v10));
  icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v10);
  icu::number::impl::DecimalQuantity::setToLong((void **)v10, a1);
  icu::number::impl::DecimalQuantity::adjustMagnitude((icu::number::impl::DecimalQuantity *)v10, a2);
  icu::number::impl::DecimalQuantity::setMinFraction((uint64_t)v10, a3);
  icu::number::impl::DecimalQuantity::toPlainString((icu::number::impl::DecimalQuantity *)v10, (uint64_t)v12);
  if ((v13 & 0x8000u) == 0) {
    uint64_t v8 = v13 >> 5;
  }
  else {
    uint64_t v8 = v14;
  }
  icu::UnicodeString::doAppend(a4, (const icu::UnicodeString *)v12, 0, v8);
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v12);
  icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v10);
}

uint64_t sub_18093E110(uint64_t result, int a2, icu::UnicodeString *this)
{
  int v4 = result;
  if (a2 == -1)
  {
    __int16 v6 = 42;
    uint64_t result = icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v6, 0, 1LL);
  }

  else
  {
    int v5 = a2 - result;
    if (a2 - (int)result >= 1)
    {
      do
      {
        uint64_t result = icu::UnicodeString::append((uint64_t)this, 0x23u);
        --v5;
      }

      while (v5);
    }
  }

  if (v4 >= 1)
  {
    do
    {
      uint64_t result = icu::UnicodeString::append((uint64_t)this, 0x30u);
      --v4;
    }

    while (v4);
  }

  return result;
}

void *sub_18093E1A4(icu::NumberingSystem *a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  uint64_t Name = icu::NumberingSystem::getName(a1);
  icu::UnicodeString::UnicodeString(v7, Name, 0xFFFFFFFFLL, 0LL);
  if ((v8 & 0x8000u) == 0) {
    uint64_t v4 = v8 >> 5;
  }
  else {
    uint64_t v4 = v9;
  }
  icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)v7, 0, v4);
  return icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v7);
}

void sub_18093E23C(int a1, const icu::number::impl::DecNum *a2, uint64_t a3, UErrorCode *a4)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  uint64_t v11 = 0LL;
  memset(v10, 0, sizeof(v10));
  icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v10);
  if (a2)
  {
    icu::number::impl::DecimalQuantity::setToDecNum((void **)v10, a2, a4);
  }

  else
  {
    icu::number::impl::DecimalQuantity::setToInt((void **)v10, 1);
  }

  icu::number::impl::DecimalQuantity::adjustMagnitude((icu::number::impl::DecimalQuantity *)v10, a1);
  icu::number::impl::DecimalQuantity::roundToInfinity((icu::number::impl::DecimalQuantity *)v10);
  icu::number::impl::DecimalQuantity::toPlainString((icu::number::impl::DecimalQuantity *)v10, (uint64_t)v12);
  if ((v13 & 0x8000u) == 0) {
    uint64_t v8 = v13 >> 5;
  }
  else {
    uint64_t v8 = v14;
  }
  icu::UnicodeString::doAppend(a3, (const icu::UnicodeString *)v12, 0, v8);
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v12);
LABEL_9:
  icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v10);
}

void icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::toSkeleton( uint64_t a1@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(int *)a2 >= 1 || sub_18092486C(a1, (int *)a2))
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(void *)(a3 + 56) = 0LL;
    *(_OWORD *)(a3 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(void *)a3 = off_18971B688;
    *(_WORD *)(a3 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
  }

  else
  {
    sub_18093B1C8(a1, a2, a3);
  }

void icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::toSkeleton( uint64_t a1@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(int *)a2 >= 1 || sub_18092486C(a1, (int *)a2))
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(void *)(a3 + 56) = 0LL;
    *(_OWORD *)(a3 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(void *)a3 = off_18971B688;
    *(_WORD *)(a3 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
  }

  else
  {
    sub_18093B1C8(a1, a2, a3);
  }

void icu::number::NumberFormatter::forSkeleton(UChar **this@<X0>, UErrorCode *a2@<X1>, _OWORD *a3@<X8>)
{
}

uint64_t sub_18093E464()
{
  qword_18C5356C8 = 0LL;
  atomic_store(0, &dword_18C5356D0);
  return 1LL;
}

icu::number::impl::SymbolsWrapper *icu::number::impl::SymbolsWrapper::SymbolsWrapper( icu::number::impl::SymbolsWrapper *this, const icu::number::impl::SymbolsWrapper *a2)
{
  return this;
}

{
  icu::number::impl::SymbolsWrapper::doCopyFrom(this, a2);
  return this;
}

icu::NumberingSystem *icu::number::impl::SymbolsWrapper::doCopyFrom( icu::NumberingSystem *this, const icu::number::impl::SymbolsWrapper *a2)
{
  BOOL v3 = this;
  int v4 = *(_DWORD *)a2;
  *(_DWORD *)this = *(_DWORD *)a2;
  if (v4 == 2)
  {
    __int16 v6 = (uint64_t *)*((void *)a2 + 1);
    if (v6)
    {
      this = (icu::NumberingSystem *)icu::UMemory::operator new(v6, (icu::UMemory *)0x58, (unint64_t)a2);
      if (this) {
        this = icu::NumberingSystem::NumberingSystem(this, *((const icu::NumberingSystem **)a2 + 1));
      }
      goto LABEL_10;
    }
  }

  else
  {
    if (v4 != 1) {
      return this;
    }
    int v5 = (uint64_t *)*((void *)a2 + 1);
    if (v5)
    {
      this = (icu::NumberingSystem *)icu::UMemory::operator new(v5, (icu::UMemory *)0xB48, (unint64_t)a2);
      if (this) {
        this = (icu::NumberingSystem *)icu::DecimalFormatSymbols::DecimalFormatSymbols( this,  *((const icu::DecimalFormatSymbols **)a2 + 1));
      }
      goto LABEL_10;
    }
  }

  this = 0LL;
LABEL_10:
  *((void *)v3 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = this;
  return this;
}

uint64_t icu::number::impl::SymbolsWrapper::SymbolsWrapper(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_DWORD *)uint64_t result = *a2;
  if ((v2 - 1) <= 1)
  {
    *(void *)(result + 8) = *((void *)a2 + 1);
    *((void *)a2 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0LL;
  }

  return result;
}

{
  int v2;
  int v2 = *a2;
  *(_DWORD *)uint64_t result = *a2;
  if ((v2 - 1) <= 1)
  {
    *(void *)(result + 8) = *((void *)a2 + 1);
    *((void *)a2 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0LL;
  }

  return result;
}

uint64_t icu::number::impl::SymbolsWrapper::doMoveFrom(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_DWORD *)uint64_t result = *a2;
  if ((v2 - 1) <= 1)
  {
    *(void *)(result + 8) = *((void *)a2 + 1);
    *((void *)a2 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0LL;
  }

  return result;
}

icu::number::impl::SymbolsWrapper *icu::number::impl::SymbolsWrapper::operator=( icu::number::impl::SymbolsWrapper *this, icu::number::impl::SymbolsWrapper *a2)
{
  if (this != a2)
  {
    if (*(_DWORD *)this == 2 || *(_DWORD *)this == 1)
    {
      uint64_t v4 = *((void *)this + 1);
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
      }
    }

    icu::number::impl::SymbolsWrapper::doCopyFrom(this, a2);
  }

  return this;
}

void *icu::number::impl::SymbolsWrapper::doCleanup(void *this)
{
  if (*(_DWORD *)this == 2 || *(_DWORD *)this == 1)
  {
    this = (void *)this[1];
    if (this) {
      return (void *)(*(uint64_t (**)(void *))(*this + 8LL))(this);
    }
  }

  return this;
}

uint64_t icu::number::impl::SymbolsWrapper::operator=(uint64_t a1, int *a2)
{
  if ((int *)a1 != a2)
  {
    if (*(_DWORD *)a1 == 2 || *(_DWORD *)a1 == 1)
    {
      uint64_t v4 = *(void *)(a1 + 8);
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
      }
    }

    int v5 = *a2;
    *(_DWORD *)a1 = *a2;
    if ((v5 - 1) <= 1)
    {
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      *((void *)a2 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0LL;
    }
  }

  return a1;
}

void icu::number::impl::SymbolsWrapper::~SymbolsWrapper(icu::number::impl::SymbolsWrapper *this)
{
  if (*(_DWORD *)this == 2 || *(_DWORD *)this == 1)
  {
    uint64_t v1 = *((void *)this + 1);
    if (v1) {
      (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
    }
  }

{
  uint64_t v1;
  if (*(_DWORD *)this == 2 || *(_DWORD *)this == 1)
  {
    uint64_t v1 = *((void *)this + 1);
    if (v1) {
      (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
    }
  }

icu::DecimalFormatSymbols *icu::number::impl::SymbolsWrapper::setTo( icu::number::impl::SymbolsWrapper *this, const icu::DecimalFormatSymbols *a2)
{
  if (*(_DWORD *)this == 2 || *(_DWORD *)this == 1)
  {
    uint64_t v4 = *((void *)this + 1);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
  }

  *(_DWORD *)this = 1;
  uint64_t result = (icu::DecimalFormatSymbols *)icu::UMemory::operator new((icu::UMemory *)0xB48, (unint64_t)a2);
  if (result) {
    uint64_t result = (icu::DecimalFormatSymbols *)icu::DecimalFormatSymbols::DecimalFormatSymbols(result, a2);
  }
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = result;
  return result;
}

void *icu::number::impl::SymbolsWrapper::setTo(void *result, uint64_t a2)
{
  BOOL v3 = result;
  if (*(_DWORD *)result == 2 || *(_DWORD *)result == 1)
  {
    uint64_t result = (void *)result[1];
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8LL))(result);
    }
  }

  *(_DWORD *)BOOL v3 = 2;
  v3[1] = a2;
  return result;
}

BOOL icu::number::impl::SymbolsWrapper::isDecimalFormatSymbols(icu::number::impl::SymbolsWrapper *this)
{
  return *(_DWORD *)this == 1;
}

BOOL icu::number::impl::SymbolsWrapper::isNumberingSystem(icu::number::impl::SymbolsWrapper *this)
{
  return *(_DWORD *)this == 2;
}

uint64_t icu::number::impl::SymbolsWrapper::getDecimalFormatSymbols(icu::number::impl::SymbolsWrapper *this)
{
  return *((void *)this + 1);
}

uint64_t icu::number::impl::SymbolsWrapper::getNumberingSystem(icu::number::impl::SymbolsWrapper *this)
{
  return *((void *)this + 1);
}

uint64_t icu::number::impl::StringProp::StringProp(uint64_t this, uint64_t a2)
{
  *(void *)this = 0LL;
  *(_WORD *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = 0;
  return icu::number::impl::StringProp::operator=(this, a2);
}

uint64_t icu::number::impl::StringProp::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_WORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    uint64_t v4 = *(void **)a1;
    if (*(void *)a1)
    {
      uprv_free(v4);
      *(void *)a1 = 0LL;
    }

    if (*(void *)a2) {
      BOOL v5 = *(_DWORD *)(a2 + 12) <= 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      __int16 v6 = (char *)uprv_malloc(*(__int16 *)(a2 + 8) + 1LL);
      *(void *)a1 = v6;
      if (v6)
      {
        uint64_t v7 = *(__int16 *)(a2 + 8);
        *(_WORD *)(a1 + 8) = v7;
        strncpy(v6, *(const char **)a2, v7 + 1);
      }

      else
      {
        *(_DWORD *)(a1 + 12) = 7;
      }
    }
  }

  return a1;
}

{
  void *v4;
  if (a1 != a2)
  {
    uint64_t v4 = *(void **)a1;
    if (*(void *)a1) {
      uprv_free(v4);
    }
    *(void *)a1 = *(void *)a2;
    *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    *(void *)a2 = 0LL;
  }

  return a1;
}

uint64_t icu::number::impl::StringProp::StringProp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0LL;
  *(_WORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  return icu::number::impl::StringProp::operator=(a1, a2);
}

uint64_t icu::number::impl::StringProp::StringProp(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = *(void *)a2;
  *(_WORD *)(result + 8) = *(_WORD *)(a2 + 8);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(void *)a2 = 0LL;
  return result;
}

{
  *(void *)uint64_t result = *(void *)a2;
  *(_WORD *)(result + 8) = *(_WORD *)(a2 + 8);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(void *)a2 = 0LL;
  return result;
}

void icu::number::impl::StringProp::~StringProp(void **this)
{
  int v2 = *this;
  if (v2)
  {
    uprv_free(v2);
    *this = 0LL;
  }

{
  void *v2;
  int v2 = *this;
  if (v2)
  {
    uprv_free(v2);
    *this = 0LL;
  }

char *icu::number::impl::StringProp::set(uint64_t a1, const char *a2, __int16 a3)
{
  __int16 v6 = *(void **)a1;
  if (v6)
  {
    uprv_free(v6);
    *(void *)a1 = 0LL;
  }

  *(_WORD *)(a1 + 8) = a3;
  uint64_t result = (char *)uprv_malloc(a3 + 1);
  *(void *)a1 = result;
  if (result)
  {
    int v8 = *(__int16 *)(a1 + 8);
    size_t v9 = *(unsigned __int16 *)(a1 + 8);
    if (v8 >= 1) {
      uint64_t result = strncpy(result, a2, v9);
    }
    result[(__int16)v9] = 0;
  }

  else
  {
    *(_WORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 12) = 7;
  }

  return result;
}

void sub_18093EA7C(unsigned int *a1, void **a2, uint64_t a3, int a4)
{
  uint64_t v8 = *a1;
  *(_DWORD *)(a3 + 484) = v8;
  if (*(_DWORD *)(a3 + 448) < (int)v8)
  {
    size_t v9 = uprv_malloc(8 * v8);
    if (!v9) {
      return;
    }
    uint64_t v10 = v9;
    if (*(_BYTE *)(a3 + 452)) {
      uprv_free(*(void **)(a3 + 440));
    }
    *(void *)(a3 + 44icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v10;
    *(_DWORD *)(a3 + 448) = v8;
    *(_BYTE *)(a3 + 452) = 1;
    LODWORD(v8) = *(_DWORD *)(a3 + 484);
  }

  if ((int)v8 >= 1)
  {
    uint64_t v11 = 0LL;
    do
    {
      int Type = icu::Formattable::getType((icu::Formattable *)(*(void *)(*((void *)a1 + 1) + 8 * v11) + 8LL));
      if (Type == 1)
      {
        icu::number::impl::DecimalQuantity::setToDouble( a2,  *(double *)(*(void *)(*((void *)a1 + 1) + 8 * v11) + 16LL));
        *(_DWORD *)(a3 + 48icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v11;
      }

      else
      {
        if (Type != 5) {
          abort();
        }
        *(void *)(*(void *)(a3 + 440) + 8 * v1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = *(void *)(*(void *)(*((void *)a1 + 1) + 8 * v11) + 16LL);
      }

      if (a4 >= 1) {
        break;
      }
      ++v11;
    }

    while (v11 < *(int *)(a3 + 484));
  }

void *icu::number::impl::UsagePrefsHandler::UsagePrefsHandler( void *a1, uint64_t a2, icu::MeasureUnitImpl **a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, int *a7)
{
  *a1 = off_189728458;
  icu::units::UnitsRouter::UnitsRouter((uint64_t)(a1 + 1), a3, a2, a4, a5, a7);
  a1[23] = a6;
  return a1;
}

{
  *a1 = off_189728458;
  icu::units::UnitsRouter::UnitsRouter((uint64_t)(a1 + 1), a3, a2, a4, a5, a7);
  a1[23] = a6;
  return a1;
}

uint64_t icu::number::impl::UsagePrefsHandler::processQuantity( uint64_t a1, icu::number::impl::DecimalQuantity *a2, uint64_t a3, UErrorCode *a4)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 184) + 16LL))(*(void *)(a1 + 184));
  if (*(int *)a4 <= 0)
  {
    icu::number::impl::DecimalQuantity::roundToInfinity(a2);
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    memset(v15, 0, sizeof(v15));
    memset(v14, 0, sizeof(v14));
    double v9 = icu::number::impl::DecimalQuantity::toDouble(a2);
    icu::units::UnitsRouter::route(a1 + 8, (_OWORD *)(a3 + 104), a4, (uint64_t)v14, v9);
    if (*(int *)a4 <= 0)
    {
      icu::MeasureUnitImpl::copy((icu::MeasureUnitImpl *)v15, a4, (uint64_t)v11);
      icu::MeasureUnitImpl::build((icu::MeasureUnitImpl *)v11, a4, (uint64_t)v10);
      icu::MeasureUnit::operator=(a3 + 416, (uint64_t)v10);
      icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v10);
      if (v13) {
        uprv_free(v12[11]);
      }
      sub_180850D68((uint64_t)v12);
    }

    if (BYTE12(v16)) {
      uprv_free((void *)v16);
    }
    sub_180850D68((uint64_t)&v15[8]);
    return sub_1807DDB98((uint64_t)&v14[2]);
  }

  return result;
}

uint64_t icu::number::impl::UnitConversionHandler::UnitConversionHandler( uint64_t a1, icu::MeasureUnitImpl *a2, uint64_t a3, int *a4)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  *(void *)a1 = off_189728480;
  icu::MeasureUnit::MeasureUnit(a1 + 8, (unint64_t)a2);
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = a3;
  __int128 v28 = 0u;
  memset(&v27[4], 0, 48);
  memset(v27, 0, 64);
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  *(void *)&__int128 v26 = v27;
  DWORD2(v26) = 8;
  *(void *)&v27[4] = (char *)&v27[4] + 13;
  DWORD2(v27[4]) = 40;
  DWORD2(v28) = 0;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v22 = 0u;
  memset(v19, 0, sizeof(v19));
  __int128 v16 = 0u;
  __int128 v17 = v19;
  uint64_t v18 = 8LL;
  uint64_t v20 = (char *)&v21 + 5;
  uint64_t v21 = 40LL;
  DWORD2(v24) = 0;
  v15[0] = 0LL;
  memset(&v15[2], 0, 72);
  v15[1] = &v15[3];
  LODWORD(v15[2]) = 8;
  icu::units::getAllConversionRates((uint64_t)v15, a4);
  if (*a4 <= 0)
  {
    double v9 = icu::MeasureUnitImpl::forMeasureUnit(a2, (const icu::MeasureUnit *)&v16, (icu::MeasureUnitImpl *)a4, v8);
    int v12 = icu::UMemory::operator new(v11, (icu::UMemory *)0xB8, v10);
    char v13 = v12;
    if (v12) {
      icu::units::ComplexUnitsConverter::ComplexUnitsConverter(v12, v9, v15, a4);
    }
    sub_18093EF4C((void **)(a1 + 32), v13, a4);
  }

  sub_18093F1A0((uint64_t)v15);
  if (BYTE4(v21)) {
    uprv_free(v20);
  }
  sub_180850D68((uint64_t)&v16 + 8);
  if (BYTE12(v27[4])) {
    uprv_free(*(void **)&v27[4]);
  }
  sub_180850D68((uint64_t)&v25 + 8);
  return a1;
}

void sub_18093EF4C(void **a1, void *a2, int *a3)
{
  if (*a3 <= 0)
  {
    __int16 v6 = *a1;
    if (*a1)
    {
      sub_18093F2F8((uint64_t)v6 + 96);
      sub_18093F37C((uint64_t)v6 + 8);
      icu::UMemory::operator delete(v6);
    }

    *a1 = a2;
    if (!a2) {
      *a3 = 7;
    }
  }

  else if (a2)
  {
    sub_18093F2F8((uint64_t)a2 + 96);
    sub_18093F37C((uint64_t)a2 + 8);
    icu::UMemory::operator delete(a2);
  }

uint64_t icu::number::impl::UnitConversionHandler::processQuantity( uint64_t a1, icu::number::impl::DecimalQuantity *a2, uint64_t a3, int *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16LL))(*(void *)(a1 + 40));
  if (*a4 <= 0)
  {
    icu::number::impl::DecimalQuantity::roundToInfinity(a2);
    uint64_t v12 = 0LL;
    memset(v11, 0, sizeof(v11));
    uint64_t v9 = *(void *)(a1 + 32);
    double v10 = icu::number::impl::DecimalQuantity::toDouble(a2);
    icu::units::ComplexUnitsConverter::convert(v9, a3 + 104, a4, (uint64_t)v11, v10);
    icu::MeasureUnit::operator=(a3 + 416, a1 + 8);
    if (*a4 <= 0) {
      sub_18093EA7C((unsigned int *)v11, (void **)a2, a3, *a4);
    }
    return sub_1807DDB98((uint64_t)v11);
  }

  return result;
}

void *sub_18093F0A8(void *a1)
{
  *a1 = off_189728458;
  sub_18093F25C((uint64_t)(a1 + 12));
  sub_1807DDB98((uint64_t)(a1 + 1));
  return a1;
}

void sub_18093F0E4(void *a1)
{
  *a1 = off_189728458;
  sub_18093F25C((uint64_t)(a1 + 12));
  sub_1807DDB98((uint64_t)(a1 + 1));
  icu::UMemory::operator delete(a1);
}

uint64_t sub_18093F120(uint64_t a1)
{
  *(void *)a1 = off_189728480;
  int v2 = (icu::MeasureUnit *)(a1 + 8);
  sub_18093F418((void **)(a1 + 32));
  icu::MeasureUnit::~MeasureUnit(v2);
  return a1;
}

void sub_18093F160(void **a1)
{
  *a1 = off_189728480;
  int v2 = (icu::MeasureUnit *)(a1 + 1);
  sub_18093F418(a1 + 4);
  icu::MeasureUnit::~MeasureUnit(v2);
  icu::UMemory::operator delete(a1);
}

uint64_t sub_18093F1A0(uint64_t a1)
{
  int v2 = *(_DWORD *)a1;
  if (*(int *)a1 >= 1)
  {
    uint64_t v3 = 0LL;
    do
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8 * v3);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 276)) {
          uprv_free(*(void **)(v4 + 264));
        }
        if (*(_BYTE *)(v4 + 212)) {
          uprv_free(*(void **)(v4 + 200));
        }
        if (*(_BYTE *)(v4 + 148)) {
          uprv_free(*(void **)(v4 + 136));
        }
        if (*(_BYTE *)(v4 + 84)) {
          uprv_free(*(void **)(v4 + 72));
        }
        if (*(_BYTE *)(v4 + 20)) {
          uprv_free(*(void **)(v4 + 8));
        }
        icu::UMemory::operator delete((void *)v4);
        int v2 = *(_DWORD *)a1;
      }

      ++v3;
    }

    while (v3 < v2);
  }

  if (*(_BYTE *)(a1 + 20)) {
    uprv_free(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_18093F25C(uint64_t a1)
{
  int v2 = *(_DWORD *)a1;
  if (*(int *)a1 >= 1)
  {
    uint64_t v3 = 0LL;
    do
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8 * v3);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 372)) {
          uprv_free(*(void **)(v4 + 360));
        }
        sub_180850D68(v4 + 272);
        icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)(v4 + 200));
        sub_18093F2F8(v4 + 104);
        sub_18093F37C(v4 + 16);
        icu::UMemory::operator delete((void *)v4);
        int v2 = *(_DWORD *)a1;
      }

      ++v3;
    }

    while (v3 < v2);
  }

  if (*(_BYTE *)(a1 + 20)) {
    uprv_free(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_18093F2F8(uint64_t a1)
{
  int v2 = *(_DWORD *)a1;
  if (*(int *)a1 >= 1)
  {
    uint64_t v3 = 0LL;
    do
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8 * v3);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 116)) {
          uprv_free(*(void **)(v4 + 104));
        }
        sub_180850D68(v4 + 16);
        icu::UMemory::operator delete((void *)v4);
        int v2 = *(_DWORD *)a1;
      }

      ++v3;
    }

    while (v3 < v2);
  }

  if (*(_BYTE *)(a1 + 20)) {
    uprv_free(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_18093F37C(uint64_t a1)
{
  int v2 = *(_DWORD *)a1;
  if (*(int *)a1 >= 1)
  {
    uint64_t v3 = 0LL;
    do
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8 * v3);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 284)) {
          uprv_free(*(void **)(v4 + 272));
        }
        sub_180850D68(v4 + 184);
        if (*(_BYTE *)(v4 + 124)) {
          uprv_free(*(void **)(v4 + 112));
        }
        sub_180850D68(v4 + 24);
        icu::UMemory::operator delete((void *)v4);
        int v2 = *(_DWORD *)a1;
      }

      ++v3;
    }

    while (v3 < v2);
  }

  if (*(_BYTE *)(a1 + 20)) {
    uprv_free(*(void **)(a1 + 8));
  }
  return a1;
}

void **sub_18093F418(void **a1)
{
  int v2 = *a1;
  if (*a1)
  {
    sub_18093F2F8((uint64_t)v2 + 96);
    sub_18093F37C((uint64_t)v2 + 8);
    icu::UMemory::operator delete(v2);
  }

  return a1;
}

const UChar *sub_18093F458(uint64_t a1, const char *a2, int a3, int *a4)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  uint64_t v7 = "currencyFormat";
  uint64_t v8 = "decimalFormat";
  switch(a3)
  {
    case 0:
      goto LABEL_9;
    case 1:
      goto LABEL_4;
    case 2:
      uint64_t v7 = "accountingFormat";
      goto LABEL_4;
    case 3:
      uint64_t v7 = "percentFormat";
LABEL_4:
      memset(v23, 0, sizeof(v23));
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      *(_OWORD *)__dst = 0u;
      __int128 v16 = 0u;
      uint64_t v10 = ures_open(0LL, __dst, a4);
      break;
    case 4:
      uint64_t v8 = "scientificFormat";
LABEL_9:
      uint64_t v10 = ures_openWithCountryFallback(0LL, *(char **)(a1 + 40), 0LL, a4);
      uint64_t v7 = v8;
      break;
    default:
      abort();
  }

  if (*a4 > 0) {
    goto LABEL_12;
  }
  *(_DWORD *)__dst = 0;
  uint64_t v11 = sub_18093F640(v10, a2, v7, (UErrorCode *)a4, (UErrorCode *)__dst);
  if (*a4 > 0) {
    goto LABEL_12;
  }
  uint64_t v12 = v11;
  if (*(int *)__dst >= 1 && strcmp("latn", a2))
  {
    *(_DWORD *)__dst = 0;
    unsigned int v14 = sub_18093F640(v10, "latn", v7, (UErrorCode *)a4, (UErrorCode *)__dst);
    if (*a4 > 0)
    {
LABEL_12:
      uint64_t v12 = (const UChar *)&unk_180A479F2;
      goto LABEL_13;
    }

    uint64_t v12 = v14;
  }

const UChar *sub_18093F640(uint64_t a1, const char *a2, const char *a3, UErrorCode *a4, UErrorCode *a5)
{
  _BYTE v20[8] = *(void **)MEMORY[0x1895F89C0];
  memset(&v20[1], 0, 56);
  v20[0] = (char *)&v20[1] + 5;
  LODWORD(v20[1]) = 40;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v18, "NumberElements/");
  icu::CharString::append((icu::CharString *)v20, v18, v19, a4);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v16, a2);
  icu::CharString::append((icu::CharString *)v20, v16, v17, a4);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v14, "/patterns/");
  icu::CharString::append((icu::CharString *)v20, v14, v15, a4);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v12, a3);
  icu::CharString::append((icu::CharString *)v20, v12, v13, a4);
  else {
    StringByKeyWithFallbacuint64_t k = (const UChar *)&unk_180A479F2;
  }
  if (BYTE4(v20[1])) {
    uprv_free(v20[0]);
  }
  return StringByKeyWithFallback;
}

uint64_t sub_18093F7A4(uint64_t a1)
{
  int v7 = 0;
  uint64_t v1 = ures_open(0LL, *(char **)(a1 + 40), &v7);
  int v6 = 0;
  StringByKeyWithFallbacuint64_t k = ures_getStringByKeyWithFallback( v1,  "NumberElements/minimumGroupingDigits",  &v6,  (UErrorCode *)&v7);
  if (v7 > 0 || v6 != 1)
  {
    __int16 v4 = 1;
    if (!v1) {
      return v4;
    }
    goto LABEL_8;
  }

  __int16 v4 = *StringByKeyWithFallback - 48;
  if (v1) {
LABEL_8:
  }
    ures_close(v1);
  return v4;
}

icu::number::impl::DecNum *icu::number::impl::DecNum::DecNum(icu::number::impl::DecNum *this)
{
  *(void *)this = (char *)this + 16;
  *((_DWORD *)this + 2) = 34;
  *((_BYTE *)this + 12) = 0;
  int v2 = (char *)this + 64;
  uprv_decContextDefault((uint64_t)this + 64, 0);
  uprv_decContextSetRounding((uint64_t)v2, 3);
  *((_DWORD *)this + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  return this;
}

{
  char *v2;
  *(void *)this = (char *)this + 16;
  *((_DWORD *)this + 2) = 34;
  *((_BYTE *)this + 12) = 0;
  int v2 = (char *)this + 64;
  uprv_decContextDefault((uint64_t)this + 64, 0);
  uprv_decContextSetRounding((uint64_t)v2, 3);
  *((_DWORD *)this + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  return this;
}

icu::number::impl::DecNum *icu::number::impl::DecNum::DecNum( icu::number::impl::DecNum *this, uint64_t **a2, UErrorCode *a3)
{
  BOOL v5 = (char *)this + 16;
  *(void *)this = (char *)this + 16;
  *((_DWORD *)this + 2) = 34;
  *((_BYTE *)this + 12) = 0;
  __int128 v6 = *(_OWORD *)((char *)a2 + 76);
  *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
  *(_OWORD *)((char *)this + 76) = v6;
  uint64_t v7 = *((unsigned int *)this + 16);
  if ((int)v7 >= 35)
  {
    uint64_t v9 = (char *)uprv_malloc(v7 + 12);
    if (!v9)
    {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
      return this;
    }

    BOOL v5 = v9;
    uint64_t v10 = *(void **)this;
    int v11 = *(_DWORD *)(*(void *)this + 8LL);
    *(void *)BOOL v5 = **(void **)this;
    *((_DWORD *)v5 + 2) = v11;
    if (*((_BYTE *)this + 12)) {
      uprv_free(v10);
    }
    *(void *)this = v5;
    *((_DWORD *)this + 2) = v7;
    *((_BYTE *)this + 12) = 1;
  }

  uint64_t v12 = **a2;
  *((_DWORD *)v5 + 2) = *((_DWORD *)*a2 + 2);
  *(void *)BOOL v5 = v12;
  memcpy(v5 + 12, (char *)*a2 + 12, *((int *)a2 + 2));
  return this;
}

void icu::number::impl::DecNum::setTo(icu::number::impl::DecNum *a1, const char *a2, int a3, UErrorCode *a4)
{
  _BYTE v7[8] = *(char **)MEMORY[0x1895F89C0];
  memset(&v7[1], 0, 56);
  v7[0] = (char *)&v7[1] + 5;
  LODWORD(v7[1]) = 40;
  icu::CharString::append((icu::CharString *)v7, a2, a3, a4);
  if (BYTE4(v7[1])) {
    uprv_free(v7[0]);
  }
}

uint64_t icu::number::impl::DecNum::_setTo(icu::number::impl::DecNum *this, char *a2, int a3, UErrorCode *a4)
{
  if (a3 < 35)
  {
    int v7 = 34;
  }

  else
  {
    int v7 = a3;
    uint64_t v8 = uprv_malloc(a3 + 12LL);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void **)this;
      int v11 = *(_DWORD *)(*(void *)this + 8LL);
      *(void *)uint64_t v9 = **(void **)this;
      v9[2] = v11;
      if (*((_BYTE *)this + 12)) {
        uprv_free(v10);
      }
      *(void *)this = v9;
      *((_DWORD *)this + 2) = v7;
      *((_BYTE *)this + 12) = 1;
    }
  }

  *((_DWORD *)this + 16) = v7;
  uint64_t result = uprv_decNumberFromString(*(void *)this, (unsigned __int8 *)a2, (uint64_t)this + 64);
  int v13 = *((_DWORD *)this + 21);
  if ((v13 & 1) != 0)
  {
    UErrorCode v14 = U_DECIMAL_NUMBER_SYNTAX_ERROR;
  }

  else
  {
    if (!v13) {
      return result;
    }
    UErrorCode v14 = U_UNSUPPORTED_ERROR;
  }

  *a4 = v14;
  return result;
}

uint64_t icu::number::impl::DecNum::setTo(icu::number::impl::DecNum *this, char *__s, UErrorCode *a3)
{
  int v6 = strlen(__s);
  return icu::number::impl::DecNum::_setTo(this, __s, v6, a3);
}

icu::number::impl::DecNum *icu::number::impl::DecNum::setTo( icu::number::impl::DecNum *this, double a2, UErrorCode *a3)
{
  char v4 = HIBYTE(a2);
  _OWORD v11[2] = *MEMORY[0x1895F89C0];
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000LL)
  {
    BOOL v5 = this;
    *(void *)uint64_t v10 = 0LL;
    v11[0] = 0LL;
    *(void *)((char *)v11 + 7) = 0LL;
    BOOL v9 = 0;
    int v7 = 0;
    int v8 = 0;
    icu::double_conversion::DoubleToStringConverter::DoubleToAscii(0LL, 0, v10, 0x17u, &v9, &v8, &v7, a2);
    this = (icu::number::impl::DecNum *)icu::number::impl::DecNum::_setTo(v5, v10, v8, a3);
    uint64_t v6 = *(void *)v5;
    *(_DWORD *)(v6 + 4) = v7 - v8 + *(_DWORD *)(*(void *)v5 + 4LL);
    *(_BYTE *)(v6 + 8) |= v4 & 0x80;
  }

  else
  {
    *a3 = U_UNSUPPORTED_ERROR;
  }

  return this;
}

void icu::number::impl::DecNum::setTo( icu::number::impl::DecNum *this, char *a2, signed int a3, int a4, int a5, UErrorCode *a6)
{
  if (a3 < 35)
  {
    int v13 = 34;
  }

  else
  {
    uint64_t v12 = uprv_malloc(a3 + 12LL);
    int v13 = a3;
    if (v12)
    {
      UErrorCode v14 = v12;
      int v15 = *(void **)this;
      int v16 = *(_DWORD *)(*(void *)this + 8LL);
      *(void *)UErrorCode v14 = **(void **)this;
      _OWORD v14[2] = v16;
      if (*((_BYTE *)this + 12)) {
        uprv_free(v15);
      }
      *(void *)this = v14;
      *((_DWORD *)this + 2) = a3;
      *((_BYTE *)this + 12) = 1;
      int v13 = a3;
    }
  }

  *((_DWORD *)this + 16) = v13;
  if ((a3 - 1000000000) < 0xC4653601)
  {
    UErrorCode v17 = U_UNSUPPORTED_ERROR;
LABEL_16:
    *a6 = v17;
    return;
  }

  UErrorCode v17 = U_UNSUPPORTED_ERROR;
  if (1000000000 - a3 < a4 || -999999998 - a3 > a4) {
    goto LABEL_16;
  }
  uint64_t v18 = *(void *)this;
  *(_DWORD *)uint64_t v18 = a3;
  *(_DWORD *)(v18 + 4) = a4;
  if (a5) {
    char v19 = 0x80;
  }
  else {
    char v19 = 0;
  }
  *(_BYTE *)(v18 + 8) = v19;
  uprv_decNumberSetBCD((unsigned int *)v18, a2, a3);
  if (*((_DWORD *)this + 21))
  {
    UErrorCode v17 = U_INTERNAL_PROGRAM_ERROR;
    goto LABEL_16;
  }

uint64_t icu::number::impl::DecNum::normalize(icu::number::impl::DecNum *this)
{
  return uprv_decNumberReduce(*(void *)this, *(void *)this, (int *)this + 16);
}

uint64_t icu::number::impl::DecNum::multiplyBy( icu::number::impl::DecNum *this, const icu::number::impl::DecNum *a2, UErrorCode *a3)
{
  uint64_t result = uprv_decNumberMultiply(*(void *)this, *(void *)this, *(void *)a2, (int *)this + 16);
  if (*((_DWORD *)this + 21)) {
    *a3 = U_INTERNAL_PROGRAM_ERROR;
  }
  return result;
}

uint64_t icu::number::impl::DecNum::divideBy( icu::number::impl::DecNum *this, const icu::number::impl::DecNum *a2, UErrorCode *a3)
{
  uint64_t result = uprv_decNumberDivide(*(void *)this, *(void *)this, *(void *)a2, (int *)this + 16);
  if (*((_DWORD *)this + 21)) {
    BOOL v6 = (*((_DWORD *)this + 21) & 0x20) == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6) {
    *a3 = U_INTERNAL_PROGRAM_ERROR;
  }
  return result;
}

uint64_t icu::number::impl::DecNum::isNegative(icu::number::impl::DecNum *this)
{
  return *(unsigned __int8 *)(*(void *)this + 8LL) >> 7;
}

BOOL icu::number::impl::DecNum::isZero(icu::number::impl::DecNum *this)
{
  uint64_t v1 = *(void *)this;
  return !*(_BYTE *)(*(void *)this + 9LL) && *(_DWORD *)v1 == 1 && (*(_BYTE *)(v1 + 8) & 0x70) == 0;
}

BOOL icu::number::impl::DecNum::isSpecial(icu::number::impl::DecNum *this)
{
  return (*(_BYTE *)(*(void *)this + 8LL) & 0x70) != 0;
}

uint64_t icu::number::impl::DecNum::isInfinity(icu::number::impl::DecNum *this)
{
  return (*(unsigned __int8 *)(*(void *)this + 8LL) >> 6) & 1;
}

BOOL icu::number::impl::DecNum::isNaN(icu::number::impl::DecNum *this)
{
  return (*(_BYTE *)(*(void *)this + 8LL) & 0x30) != 0;
}

void icu::number::impl::DecNum::toString(icu::number::impl::DecNum *this, icu::ByteSink *a2, UErrorCode *a3)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  int v4 = *a3;
  if (v4 <= 0)
  {
    int v7 = **(_DWORD **)this + 14;
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    *(_OWORD *)__s = 0u;
    sub_1809228C4((uint64_t)__s, v7, v4);
    if (*(int *)a3 <= 0)
    {
      uprv_decNumberToString(*(void *)this, __s[0]);
      size_t v8 = strlen(__s[0]);
      (*(void (**)(icu::ByteSink *, char *, size_t))(*(void *)a2 + 16LL))(a2, __s[0], v8);
    }

    if (BYTE4(__s[1])) {
      uprv_free(__s[0]);
    }
  }

void *icu::NumberFormat::getStaticClassID(icu::NumberFormat *this)
{
  return &unk_18C5356D8;
}

double icu::NumberFormat::NumberFormat(icu::NumberFormat *this)
{
  uint64_t v1 = icu::Format::Format((uint64_t)this);
  *(void *)uint64_t v1 = off_189728518;
  *(_BYTE *)(v1 + 322) = 1;
  *(void *)&double result = 0x177359400LL;
  *(_OWORD *)(v1 + 324) = xmmword_180A3ADC0;
  *(_DWORD *)(v1 + 34icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  *(_DWORD *)(v1 + 352) = 256;
  return result;
}

void icu::SharedNumberFormat::~SharedNumberFormat(icu::SharedNumberFormat *this)
{
  *(void *)this = off_189728658;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::SharedObject::~SharedObject(this);
}

{
  uint64_t v2;
  *(void *)this = off_189728658;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::SharedObject::~SharedObject(this);
}

{
  uint64_t v2;
  void *v3;
  *(void *)this = off_189728658;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::SharedObject::~SharedObject(this);
  icu::UMemory::operator delete(v3);
}

uint64_t icu::NumberFormat::NumberFormat(icu::NumberFormat *this, const icu::NumberFormat *a2)
{
  uint64_t v3 = (void *)icu::Format::Format((uint64_t)this, (uint64_t)a2);
  void *v3 = off_189728518;
  return icu::NumberFormat::operator=((uint64_t)v3, (uint64_t)a2);
}

uint64_t icu::NumberFormat::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    icu::Format::operator=(a1, a2);
    *(_BYTE *)(a1 + 322) = *(_BYTE *)(a2 + 322);
    *(_OWORD *)(a1 + 324) = *(_OWORD *)(a2 + 324);
    *(_BYTE *)(a1 + 34icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = *(_BYTE *)(a2 + 340);
    u_strncpy((UChar *)(a1 + 342), (const UChar *)(a2 + 342), 3);
    *(_WORD *)(a1 + 348) = 0;
    *(_BYTE *)(a1 + 34icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = *(_BYTE *)(a2 + 341);
    *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 352);
  }

  return a1;
}

BOOL icu::NumberFormat::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  BOOL result = icu::Format::operator==((void *)a1, (void *)a2);
  if (result) {
    return *(_DWORD *)(a1 + 324) == *(_DWORD *)(a2 + 324)
  }
        && *(_DWORD *)(a1 + 328) == *(_DWORD *)(a2 + 328)
        && *(_DWORD *)(a1 + 332) == *(_DWORD *)(a2 + 332)
        && *(_DWORD *)(a1 + 336) == *(_DWORD *)(a2 + 336)
        && *(unsigned __int8 *)(a1 + 322) == *(unsigned __int8 *)(a2 + 322)
        && *(unsigned __int8 *)(a1 + 340) == *(unsigned __int8 *)(a2 + 340)
        && !u_strcmp((const UChar *)(a1 + 342), (const UChar *)(a2 + 342))
  return result;
}

icu::UnicodeString *icu::NumberFormat::format( icu::NumberFormat *this, double a2, icu::UnicodeString *a3, icu::FieldPositionIterator *a4, UErrorCode *a5)
{
  BOOL result = a3;
  return result;
}

icu::UnicodeString *icu::NumberFormat::format( icu::NumberFormat *this, int a2, icu::UnicodeString *a3, icu::FieldPositionIterator *a4, UErrorCode *a5)
{
  BOOL result = a3;
  return result;
}

icu::UnicodeString *icu::NumberFormat::format( icu::NumberFormat *this, uint64_t a2, icu::UnicodeString *a3, icu::FieldPositionIterator *a4, UErrorCode *a5)
{
  BOOL result = a3;
  return result;
}

icu::UnicodeString *icu::NumberFormat::format( icu::NumberFormat *this, double a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0) {
    return (icu::UnicodeString *)(*(uint64_t (**)(icu::NumberFormat *, icu::UnicodeString *, icu::FieldPosition *, double))(*(void *)this + 64LL))( this,  a3,  a4,  a2);
  }
  else {
    return a3;
  }
}

icu::UnicodeString *icu::NumberFormat::format( icu::NumberFormat *this, uint64_t a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0) {
    return (icu::UnicodeString *)(*(uint64_t (**)(icu::NumberFormat *, uint64_t, icu::UnicodeString *, icu::FieldPosition *))(*(void *)this + 88LL))( this,  a2,  a3,  a4);
  }
  else {
    return a3;
  }
}

{
  if (*(int *)a5 <= 0) {
    return (icu::UnicodeString *)(*(uint64_t (**)(icu::NumberFormat *, uint64_t, icu::UnicodeString *, icu::FieldPosition *))(*(void *)this + 112LL))( this,  a2,  a3,  a4);
  }
  else {
    return a3;
  }
}

uint64_t icu::NumberFormat::format( uint64_t a1, const char *a2, int a3, uint64_t a4, uint64_t a5, UErrorCode *a6)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  memset(v13, 0, sizeof(v13));
  icu::Formattable::Formattable((icu::Formattable *)v13);
  icu::Formattable::setDecimalNumber((icu::Formattable *)v13, a2, a3, a6);
  (*(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t, UErrorCode *))(*(void *)a1 + 48LL))( a1,  v13,  a4,  a5,  a6);
  icu::Formattable::~Formattable((icu::Formattable *)v13);
  return a4;
}

uint64_t sub_1809403B0(uint64_t a1, int a2, icu::Formattable *this)
{
  *(void *)a1 = this;
  *(_BYTE *)(a1 + 16) = 0;
  Object = (const void *)icu::Formattable::getObject(this);
  if (Object
  {
    BOOL v6 = v5;
    uint64_t Currency = icu::CurrencyAmount::getCurrency(v5);
    u_strcpy((UChar *)(a1 + 8), (const UChar *)(Currency + 20));
    *(void *)a1 = (char *)v6 + 8;
    *(_BYTE *)(a1 + 16) = 1;
  }

  else
  {
    *(_WORD *)(a1 + 8) = 0;
  }

  return a1;
}

icu::UnicodeString *icu::NumberFormat::format( icu::NumberFormat *this, const icu::number::impl::DecimalQuantity *a2, icu::UnicodeString *a3, icu::FieldPositionIterator *a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    double v9 = icu::number::impl::DecimalQuantity::toDouble(a2);
    (*(void (**)(icu::NumberFormat *, icu::UnicodeString *, icu::FieldPositionIterator *, UErrorCode *, double))(*(void *)this + 80LL))( this,  a3,  a4,  a5,  v9);
  }

  return a3;
}

icu::UnicodeString *icu::NumberFormat::format( icu::NumberFormat *this, const icu::number::impl::DecimalQuantity *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    double v9 = icu::number::impl::DecimalQuantity::toDouble(a2);
    (*(void (**)(icu::NumberFormat *, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *, double))(*(void *)this + 72LL))( this,  a3,  a4,  a5,  v9);
  }

  return a3;
}

icu::UnicodeString *icu::NumberFormat::format( const UChar *this, const icu::Formattable *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    sub_1809403B0((uint64_t)&v14, (int)a2, a2);
    __int128 v10 = v14;
    if ((_BYTE)v16 && u_strcmp((const UChar *)&v15, this + 171))
    {
      uint64_t v11 = (*(uint64_t (**)(const UChar *))(*(void *)this + 32LL))(this);
      (*(void (**)(uint64_t, uint64_t *, UErrorCode *))(*(void *)v11 + 248LL))(v11, &v15, a5);
      a3 = (icu::UnicodeString *)(*(uint64_t (**)(uint64_t, icu::Formattable *, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *))(*(void *)v11 + 40LL))( v11,  v10,  a3,  a4,  a5);
      (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
    }

    else if (icu::Formattable::isNumeric(v10) && (uint64_t v12 = *((void *)v10 + 4)) != 0)
    {
      (*(void (**)(const UChar *, uint64_t, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *))(*(void *)this + 152LL))( this,  v12,  a3,  a4,  a5);
    }

    else
    {
      int Type = icu::Formattable::getType(v10);
      switch(Type)
      {
        case 5:
          (*(void (**)(const UChar *, void, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *))(*(void *)this + 120LL))( this,  *((void *)v10 + 1),  a3,  a4,  a5);
          break;
        case 2:
          (*(void (**)(const UChar *, void, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *))(*(void *)this + 96LL))( this,  *((unsigned int *)v10 + 2),  a3,  a4,  a5);
          break;
        case 1:
          (*(void (**)(const UChar *, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *, double))(*(void *)this + 72LL))( this,  a3,  a4,  a5,  *((double *)v10 + 1));
          break;
        default:
          *a5 = U_INVALID_FORMAT_ERROR;
          break;
      }
    }
  }

  return a3;
}

uint64_t icu::NumberFormat::getCurrency(icu::NumberFormat *this)
{
  return (uint64_t)this + 342;
}

icu::UnicodeString *icu::NumberFormat::format( const UChar *this, const icu::Formattable *a2, icu::UnicodeString *a3, icu::FieldPositionIterator *a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    sub_1809403B0((uint64_t)&v14, (int)a2, a2);
    __int128 v10 = v14;
    if ((_BYTE)v16 && u_strcmp((const UChar *)&v15, this + 171))
    {
      uint64_t v11 = (*(uint64_t (**)(const UChar *))(*(void *)this + 32LL))(this);
      (*(void (**)(uint64_t, uint64_t *, UErrorCode *))(*(void *)v11 + 248LL))(v11, &v15, a5);
      a3 = (icu::UnicodeString *)(*(uint64_t (**)(uint64_t, icu::Formattable *, icu::UnicodeString *, icu::FieldPositionIterator *, UErrorCode *))(*(void *)v11 + 48LL))( v11,  v10,  a3,  a4,  a5);
      (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
    }

    else if (icu::Formattable::isNumeric(v10) && (uint64_t v12 = *((void *)v10 + 4)) != 0)
    {
      (*(void (**)(const UChar *, uint64_t, icu::UnicodeString *, icu::FieldPositionIterator *, UErrorCode *))(*(void *)this + 144LL))( this,  v12,  a3,  a4,  a5);
    }

    else
    {
      int Type = icu::Formattable::getType(v10);
      switch(Type)
      {
        case 5:
          (*(void (**)(const UChar *, void, icu::UnicodeString *, icu::FieldPositionIterator *, UErrorCode *))(*(void *)this + 128LL))( this,  *((void *)v10 + 1),  a3,  a4,  a5);
          break;
        case 2:
          (*(void (**)(const UChar *, void, icu::UnicodeString *, icu::FieldPositionIterator *, UErrorCode *))(*(void *)this + 104LL))( this,  *((unsigned int *)v10 + 2),  a3,  a4,  a5);
          break;
        case 1:
          (*(void (**)(const UChar *, icu::UnicodeString *, icu::FieldPositionIterator *, UErrorCode *, double))(*(void *)this + 80LL))( this,  a3,  a4,  a5,  *((double *)v10 + 1));
          break;
        default:
          *a5 = U_INVALID_FORMAT_ERROR;
          break;
      }
    }
  }

  return a3;
}

uint64_t icu::NumberFormat::format( icu::NumberFormat *this, uint64_t a2, icu::UnicodeString *a3, icu::FieldPosition *a4)
{
  return (*(uint64_t (**)(icu::NumberFormat *, uint64_t, icu::UnicodeString *, icu::FieldPosition *))(*(void *)this + 88LL))( this,  a2,  a3,  a4);
}

uint64_t icu::NumberFormat::parseObject( icu::NumberFormat *this, const icu::UnicodeString *a2, icu::Formattable *a3, icu::ParsePosition *a4)
{
  return (*(uint64_t (**)(icu::NumberFormat *, const icu::UnicodeString *, icu::Formattable *, icu::ParsePosition *))(*(void *)this + 160LL))( this,  a2,  a3,  a4);
}

uint64_t icu::NumberFormat::format(icu::NumberFormat *this, double a2, icu::UnicodeString *a3)
{
  v5[2] = 0LL;
  v5[0] = off_189723AC8;
  v5[1] = 0xFFFFFFFFLL;
  uint64_t v3 = (*(uint64_t (**)(icu::NumberFormat *, icu::UnicodeString *, void *, double))(*(void *)this + 64LL))( this,  a3,  v5,  a2);
  icu::FieldPosition::~FieldPosition((icu::FieldPosition *)v5);
  return v3;
}

uint64_t icu::NumberFormat::format(icu::NumberFormat *this, uint64_t a2, icu::UnicodeString *a3)
{
  v5[2] = 0LL;
  v5[0] = off_189723AC8;
  v5[1] = 0xFFFFFFFFLL;
  uint64_t v3 = (*(uint64_t (**)(icu::NumberFormat *, uint64_t, icu::UnicodeString *, void *))(*(void *)this + 88LL))( this,  a2,  a3,  v5);
  icu::FieldPosition::~FieldPosition((icu::FieldPosition *)v5);
  return v3;
}

{
  uint64_t v3;
  void v5[3];
  v5[2] = 0LL;
  v5[0] = off_189723AC8;
  v5[1] = 0xFFFFFFFFLL;
  uint64_t v3 = (*(uint64_t (**)(icu::NumberFormat *, uint64_t, icu::UnicodeString *, void *))(*(void *)this + 112LL))( this,  a2,  a3,  v5);
  icu::FieldPosition::~FieldPosition((icu::FieldPosition *)v5);
  return v3;
}

void icu::NumberFormat::parse( icu::NumberFormat *this, const icu::UnicodeString *a2, icu::Formattable *a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    BOOL v5 = off_18970F400;
    unint64_t v6 = 0xFFFFFFFF00000000LL;
    (*(void (**)(icu::NumberFormat *, const icu::UnicodeString *, icu::Formattable *, void (***)(icu::ParsePosition *__hidden)))(*(void *)this + 160LL))( this,  a2,  a3,  &v5);
    if (!(_DWORD)v6) {
      *a4 = U_INVALID_FORMAT_ERROR;
    }
    icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v5);
  }

uint64_t *icu::NumberFormat::parseCurrency( icu::NumberFormat *this, const icu::UnicodeString *a2, icu::ParsePosition *a3)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  memset(v14, 0, sizeof(v14));
  icu::Formattable::Formattable((icu::Formattable *)v14);
  int v6 = *((_DWORD *)a3 + 2);
  (*(void (**)(icu::NumberFormat *, const icu::UnicodeString *, _OWORD *, icu::ParsePosition *))(*(void *)this + 160LL))( this,  a2,  v14,  a3);
  if (*((_DWORD *)a3 + 2) != v6)
  {
    uint64_t v13 = 0LL;
    int v12 = 0;
    (*(void (**)(icu::NumberFormat *, uint64_t *, int *))(*(void *)this + 296LL))(this, &v13, &v12);
    if (v12 <= 0)
    {
      __int128 v10 = icu::UMemory::operator new((uint64_t *)v12, (icu::UMemory *)0x80, v7);
      if (v10)
      {
        size_t v8 = v10;
        uint64_t v11 = &v13;
        icu::CurrencyAmount::CurrencyAmount(v10, v14, &v11, &v12);
        if (v12 < 1) {
          goto LABEL_4;
        }
        *((_DWORD *)a3 + 2) = v6;
        (*(void (**)(uint64_t *))(*v8 + 8))(v8);
      }

      else
      {
        *((_DWORD *)a3 + 2) = v6;
      }
    }
  }

  size_t v8 = 0LL;
LABEL_4:
  icu::Formattable::~Formattable((icu::Formattable *)v14);
  return v8;
}

uint64_t icu::NumberFormat::setParseIntegerOnly(uint64_t this, char a2)
{
  *(_BYTE *)(this + 34icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = a2;
  return this;
}

uint64_t icu::NumberFormat::setLenient(uint64_t this, char a2)
{
  *(_BYTE *)(this + 34icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = a2;
  return this;
}

icu::DecimalFormat *icu::NumberFormat::createInstance(icu::NumberFormat *this, UErrorCode *a2)
{
  Default = icu::Locale::getDefault(this);
  return icu::NumberFormat::createInstance((char **)Default, 1u, (UErrorCode *)this);
}

icu::DecimalFormat *icu::NumberFormat::createInstance(char **a1, unsigned int a2, UErrorCode *this)
{
  if (a2 != 1) {
    return icu::NumberFormat::internalCreateInstance(a1, a2, this);
  }
  uint64_t v7 = 0LL;
  sub_180941164((uint64_t)a1, (UErrorCode *)&v7, this);
  uint64_t v4 = 0LL;
  if (*(int *)this <= 0)
  {
    int v6 = (void *)v7;
    uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(v7 + 24) + 32LL))(*(void *)(v7 + 24));
    icu::SharedObject::removeRef(v6);
    if (!v4) {
      *this = U_MEMORY_ALLOCATION_ERROR;
    }
  }

  return (icu::DecimalFormat *)v4;
}

icu::DecimalFormat *icu::NumberFormat::createInstance(char **this, UErrorCode *a2, UErrorCode *a3)
{
  return icu::NumberFormat::createInstance(this, 1u, a2);
}

icu::DecimalFormat *icu::NumberFormat::createCurrencyInstance(icu::NumberFormat *this, UErrorCode *a2)
{
  Default = icu::Locale::getDefault(this);
  return icu::NumberFormat::internalCreateInstance((char **)Default, 2u, (UErrorCode *)this);
}

icu::DecimalFormat *icu::NumberFormat::createCurrencyInstance(char **this, UErrorCode *a2, UErrorCode *a3)
{
  return icu::NumberFormat::internalCreateInstance(this, 2u, a2);
}

icu::DecimalFormat *icu::NumberFormat::createPercentInstance(icu::NumberFormat *this, UErrorCode *a2)
{
  Default = icu::Locale::getDefault(this);
  return icu::NumberFormat::makeInstance((char **)Default, 3u, 0LL, (UErrorCode *)this);
}

icu::DecimalFormat *icu::NumberFormat::createPercentInstance(char **this, UErrorCode *a2, UErrorCode *a3)
{
  return icu::NumberFormat::makeInstance(this, 3u, 0LL, a2);
}

icu::DecimalFormat *icu::NumberFormat::createScientificInstance(icu::NumberFormat *this, UErrorCode *a2)
{
  Default = icu::Locale::getDefault(this);
  return icu::NumberFormat::makeInstance((char **)Default, 4u, 0LL, (UErrorCode *)this);
}

icu::DecimalFormat *icu::NumberFormat::createScientificInstance(char **this, UErrorCode *a2, UErrorCode *a3)
{
  return icu::NumberFormat::makeInstance(this, 4u, 0LL, a2);
}

icu::DecimalFormat *icu::NumberFormat::internalCreateInstance(char **this, unsigned int a2, UErrorCode *a3)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  if (a2 == 2)
  {
    *(_OWORD *)double v9 = 0u;
    __int128 v10 = 0u;
    UErrorCode v8 = U_ZERO_ERROR;
    int KeywordValue = icu::Locale::getKeywordValue(this, "cf", v9, 32, &v8);
    a2 = 2;
    if (v8 <= U_ZERO_ERROR && KeywordValue >= 1)
    {
      if (*(void *)v9 == 0x746E756F636361LL) {
        a2 = 12;
      }
      else {
        a2 = 2;
      }
    }
  }

  return icu::NumberFormat::makeInstance(this, a2, 0LL, a3);
}

icu::DecimalFormat *icu::NumberFormat::makeInstance(char **a1, unsigned int a2, UErrorCode *a3)
{
  return icu::NumberFormat::makeInstance(a1, a2, 0LL, a3);
}

uint64_t icu::NumberFormat::createSharedInstance(uint64_t a1, int a2, UErrorCode *a3)
{
  if (a2 == 1)
  {
    uint64_t v4 = 0LL;
    sub_180941164(a1, (UErrorCode *)&v4, a3);
    return v4;
  }

  else
  {
    uint64_t result = 0LL;
    *a3 = U_UNSUPPORTED_ERROR;
  }

  return result;
}

uint64_t icu::NumberFormat::isGroupingUsed(icu::NumberFormat *this)
{
  return *((char *)this + 322);
}

uint64_t icu::NumberFormat::setGroupingUsed(uint64_t this, char a2)
{
  *(_BYTE *)(this + 322) = a2;
  return this;
}

uint64_t icu::NumberFormat::getMaximumIntegerDigits(icu::NumberFormat *this)
{
  return *((unsigned int *)this + 81);
}

uint64_t icu::NumberFormat::setMaximumIntegerDigits(icu::NumberFormat *this, uint64_t a2)
{
  int v3 = uprv_min(a2, 2000000000);
  uint64_t result = uprv_max(0LL, v3);
  *((_DWORD *)this + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = result;
  return result;
}

uint64_t icu::NumberFormat::getMinimumIntegerDigits(icu::NumberFormat *this)
{
  return *((unsigned int *)this + 82);
}

uint64_t icu::NumberFormat::setMinimumIntegerDigits(icu::NumberFormat *this, uint64_t a2)
{
  int v3 = uprv_min(a2, 127);
  uint64_t result = uprv_max(0LL, v3);
  *((_DWORD *)this + 82) = result;
  return result;
}

uint64_t icu::NumberFormat::getMaximumFractionDigits(icu::NumberFormat *this)
{
  return *((unsigned int *)this + 83);
}

uint64_t icu::NumberFormat::setMaximumFractionDigits(icu::NumberFormat *this, uint64_t a2)
{
  int v3 = uprv_min(a2, 2000000000);
  uint64_t result = uprv_max(0LL, v3);
  *((_DWORD *)this + 83) = result;
  return result;
}

uint64_t icu::NumberFormat::getMinimumFractionDigits(icu::NumberFormat *this)
{
  return *((unsigned int *)this + 84);
}

uint64_t icu::NumberFormat::setMinimumFractionDigits(icu::NumberFormat *this, uint64_t a2)
{
  int v3 = uprv_min(a2, 127);
  uint64_t result = uprv_max(0LL, v3);
  *((_DWORD *)this + 84) = result;
  return result;
}

uint64_t icu::NumberFormat::setDateSettings(uint64_t this)
{
  *(_BYTE *)(this + 322) = 0;
  *(_BYTE *)(this + 34icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 1;
  *(_DWORD *)(this + 336) = 0;
  if ((*(_DWORD *)(this + 332) & 0x80000000) != 0) {
    *(_DWORD *)(this + 332) = 0;
  }
  return this;
}

UChar *icu::NumberFormat::setCurrency(UChar *result, const UChar *a2, int *a3)
{
  if (*a3 <= 0)
  {
    int v3 = result;
    result += 171;
    if (a2)
    {
      u_strncpy(result, a2, 3);
      uint64_t result = v3 + 174;
    }

    *uint64_t result = 0;
  }

  return result;
}

UChar *icu::NumberFormat::getEffectiveCurrency(uint64_t a1, UChar *dst, int *a3)
{
  if (*(_WORD *)(a1 + 342))
  {
    uint64_t result = u_strncpy(dst, (const UChar *)(a1 + 342), 3);
    dst[3] = 0;
  }

  else
  {
    LocaleID = (char *)icu::Format::getLocaleID(a1, 1, a3);
    if (!LocaleID) {
      LocaleID = (char *)uloc_getDefault(0LL);
    }
    return (UChar *)ucurr_forLocale(LocaleID, dst, 4LL, a3);
  }

  return result;
}

uint64_t icu::NumberFormat::setContext(uint64_t result, int a2, int *a3)
{
  if (*a3 <= 0)
  {
    if ((a2 & 0xFFFFFF00) == 0x100) {
      *(_DWORD *)(result + 352) = a2;
    }
    else {
      *a3 = 1;
    }
  }

  return result;
}

uint64_t icu::NumberFormat::getContext(uint64_t a1, int a2, int *a3)
{
  if (*a3 > 0) {
    return 0LL;
  }
  if (a2 == 1) {
    return *(unsigned int *)(a1 + 352);
  }
  uint64_t result = 0LL;
  *a3 = 1;
  return result;
}

uint64_t *icu::LocaleCacheKey<icu::SharedNumberFormat>::createObject(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v11 = (uint64_t *)*MEMORY[0x1895F89C0];
  icu::Locale::Locale(v11, (icu::Locale *)v10, *(const char **)(a1 + 56), 0LL, 0LL, 0LL);
  Instance = icu::NumberFormat::makeInstance(v10, 1u, 0LL, a3);
  icu::Locale::~Locale((icu::Locale *)v10);
  int v6 = 0LL;
  uint64_t v7 = (uint64_t *)*(unsigned int *)a3;
  if ((int)v7 <= 0)
  {
    UErrorCode v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0x20, v5);
    if (v8)
    {
      int v6 = v8;
      *UErrorCode v8 = (uint64_t)off_189728658;
      v8[1] = 0LL;
      _OWORD v8[2] = 0LL;
      v8[3] = (uint64_t)Instance;
      icu::SharedObject::addRef((uint64_t)v8);
    }

    else
    {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
      if (Instance) {
        (*(void (**)(icu::DecimalFormat *))(*(void *)Instance + 8LL))(Instance);
      }
      return 0LL;
    }
  }

  return v6;
}

void sub_180941164(uint64_t a1, UErrorCode *a2, UErrorCode *this)
{
  v11[28] = *MEMORY[0x1895F89C0];
  uint64_t Instance = icu::UnifiedCache::getInstance(this, a2);
  if (*(int *)this <= 0)
  {
    uint64_t v7 = (icu::SharedObject **)Instance;
    int v9 = 0;
    char v10 = 0;
    UErrorCode v8 = off_1897286B0;
    icu::Locale::Locale((icu::Locale *)v11, a1);
    sub_18089E200(v7, (const icu::CacheKeyBase *)&v8, 0LL, (icu::SharedObject **)a2, this);
    UErrorCode v8 = off_1897286B0;
    icu::Locale::~Locale((icu::Locale *)v11);
    icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)&v8);
  }

unint64_t icu::NumberFormat::isStyleSupported(char a1)
{
  return (0x13D1EuLL >> a1) & 1;
}

icu::DecimalFormat *icu::NumberFormat::makeInstance( char **this, unsigned int a2, UErrorCode *a3, UErrorCode *a4)
{
  uint64_t v81 = *MEMORY[0x1895F89C0];
  if (a2 >= 0x11)
  {
    uint64_t v4 = 0LL;
    int v6 = 1;
LABEL_10:
    *a4 = v6;
    return v4;
  }

  if (a2 == 8) {
    uint64_t v7 = 1LL;
  }
  else {
    uint64_t v7 = a2;
  }
  if (((0x13D1EuLL >> v7) & 1) == 0)
  {
    uint64_t v4 = 0LL;
    int v6 = 16;
    goto LABEL_10;
  }

  int v9 = (int)a3;
  unsigned int v11 = atomic_load((unsigned int *)&unk_18C4497D8);
  if (v11 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_18C4497D8))
  {
    sub_1809B36C0(0x16u, (uint64_t)sub_180941B74);
    v60[0] = 0;
    int v12 = uhash_open((uint64_t)uhash_hashLong, (uint64_t)uhash_compareLong, 0LL, v60);
    qword_18C449780 = (uint64_t)v12;
    if (v60[0] < 1) {
      uhash_setValueDeleter((uint64_t)v12, (uint64_t)sub_180941BB0);
    }
    else {
      qword_18C449780 = 0LL;
    }
    icu::umtx_initImplPostInit((unsigned int *)&unk_18C4497D8);
  }

  if (qword_18C449780)
  {
    unsigned int v13 = icu::Locale::hashCode((icu::Locale *)this);
    umtx_lock((icu::UMutex *)&unk_18C449788);
    uint64_t Instance = (const icu::NumberingSystem *)uhash_iget(qword_18C449780, v13);
    if (!Instance)
    {
      uint64_t Instance = icu::NumberingSystem::createInstance((icu::NumberingSystem *)this, a4, v14);
      uhash_iput(qword_18C449780, v13, (uint64_t)Instance, (int *)a4);
    }

    umtx_unlock((std::mutex **)&unk_18C449788);
    uint64_t v16 = 0LL;
  }

  else
  {
    uint64_t v16 = icu::NumberingSystem::createInstance((icu::NumberingSystem *)this, a4, a3);
    uint64_t Instance = v16;
  }

  if (*(int *)a4 > 0)
  {
    uint64_t v4 = 0LL;
    goto LABEL_25;
  }

  if (!v9 || !icu::NumberingSystem::isAlgorithmic(Instance))
  {
    unsigned int v57 = 0LL;
    __int128 v77 = 0u;
    uint64_t v80 = 0LL;
    __int128 v79 = 0u;
    __int128 v78 = 0u;
    size_t v76 = off_18971B688;
    LOWORD(v77) = 2;
    uint64_t v18 = ures_open(0LL, this[5], (int *)a4);
    uint64_t v4 = 0LL;
    uint64_t v19 = *(unsigned int *)a4;
    if ((int)v19 <= 0)
    {
      __int128 v20 = (icu::DecimalFormatSymbols *)icu::UMemory::operator new((uint64_t *)v19, (icu::UMemory *)0xB48, v17);
      uint64_t v21 = (uint64_t)v20;
      if (Instance)
      {
        if (v20) {
          icu::DecimalFormatSymbols::DecimalFormatSymbols(v20, (const icu::Locale *)this, Instance, a4);
        }
      }

      else if (v20)
      {
        icu::DecimalFormatSymbols::DecimalFormatSymbols(v20, (const icu::Locale *)this, a4);
      }

      sub_1807C9194((uint64_t)&v57, v21, (int *)a4);
      uint64_t v19 = *(unsigned int *)a4;
      uint64_t Name = (const char *)icu::NumberingSystem::getName(Instance);
      unsigned int v56 = sub_18093F458((uint64_t)this, Name, dword_180A3ADD8[v7], (int *)a4);
      icu::UnicodeString::UnicodeString(v60, 1LL, &v56);
      icu::UnicodeString::operator=((icu::UnicodeString *)&v76, (icu::UnicodeString *)v60);
      icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)v60);
      v52[2] = v56;
      uint64_t v19 = *(unsigned int *)a4;
      if (((1 << v7) & 0x13404) != 0)
      {
        uint64_t v24 = (uint64_t)v57[310];
        if (v24)
        {
          uint64_t v25 = u_strlen(v57[310]);
          sub_180941A00((uint64_t)&v76, v24, v25);
        }
      }

      if (icu::NumberingSystem::isAlgorithmic(Instance))
      {
        __int128 v72 = 0u;
        uint64_t v75 = 0LL;
        __int128 v74 = 0u;
        __int128 v73 = 0u;
        unsigned int v71 = (UChar *)off_18971B688;
        LOWORD(v72) = 2;
        __int128 v67 = 0u;
        uint64_t v70 = 0LL;
        __int128 v69 = 0u;
        __int128 v68 = 0u;
        int v66 = off_18971B688;
        LOWORD(v67) = 2;
        __int128 v62 = 0u;
        uint64_t v65 = 0LL;
        __int128 v64 = 0u;
        __int128 v63 = 0u;
        unsigned int v61 = (UChar *)off_18971B688;
        LOWORD(v62) = 2;
        memset(v60, 0, 224);
        icu::Locale::Locale((icu::Locale *)v60);
        (*(void (**)(_OWORD *__return_ptr, const icu::NumberingSystem *))(*(void *)Instance + 24LL))( v58,  Instance);
        icu::UnicodeString::copyFrom(&v71, (UChar **)v58, 0);
        icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v58);
        if ((v72 & 0x8000u) == 0LL) {
          int32_t v29 = (unsigned __int16)v72 >> 5;
        }
        else {
          int32_t v29 = DWORD1(v72);
        }
        int32_t v30 = icu::UnicodeString::doIndexOf((uint64_t)&v71, 0x2Fu, 0, v29);
        if ((v72 & 0x8000u) == 0LL) {
          int32_t v31 = (unsigned __int16)v72 >> 5;
        }
        else {
          int32_t v31 = DWORD1(v72);
        }
        int32_t IndexOf = icu::UnicodeString::doLastIndexOf((uint64_t)&v71, 0x2Fu, 0, v31);
        if (IndexOf <= v30)
        {
          icu::Locale::operator=((icu::Locale *)v60, (uint64_t)this);
          icu::UnicodeString::copyFrom(&v61, &v71, 0);
          uint64_t v35 = 3LL;
        }

        else
        {
          int32_t v33 = IndexOf;
          memset(&v59[1], 0, 56);
          v59[0] = (icu::Locale *)((char *)&v59[1] + 5);
          LODWORD(v59[1]) = 40;
          icu::UnicodeString::tempSubString((icu::UnicodeString *)&v71, 0, v30, (icu::UnicodeString *)v58);
          icu::CharString::appendInvariantChars((icu::CharString *)v59, (const icu::UnicodeString *)v58, a4);
          icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)v58);
          sub_1808E0E9C((uint64_t)&v66, (const icu::UnicodeString *)&v71, v30 + 1, (v33 + ~v30));
          sub_180941A5C((uint64_t)&v61, (uint64_t)&v71, v33 + 1);
          icu::Locale::createFromName(v59[0], (uint64_t)v58);
          icu::Locale::operator=((uint64_t)v60, (uint64_t)v58);
          icu::Locale::~Locale((icu::Locale *)v58);
          memset(v58, 0, 64);
          BOOL v55 = L"SpelloutRules";
          icu::UnicodeString::UnicodeString(v58, 1LL, &v55);
          v52[1] = v55;
          else {
            uint64_t v35 = 0LL;
          }
          icu::UnicodeString::~UnicodeString((void *)3, (icu::UnicodeString *)v58);
          __int128 v37 = (uint64_t *)BYTE4(v59[1]);
          if (BYTE4(v59[1])) {
            uprv_free(v59[0]);
          }
        }

        int v41 = icu::UMemory::operator new(v37, (icu::UMemory *)0x2F0, v36);
        uint64_t v4 = (icu::DecimalFormat *)v41;
        if (!v41)
        {
          *a4 = U_MEMORY_ALLOCATION_ERROR;
          icu::Locale::~Locale((icu::Locale *)v60);
          icu::UnicodeString::~UnicodeString(v48, (icu::UnicodeString *)&v61);
          icu::UnicodeString::~UnicodeString(v49, (icu::UnicodeString *)&v66);
          icu::UnicodeString::~UnicodeString(v50, (icu::UnicodeString *)&v71);
          goto LABEL_67;
        }

        uint64_t v42 = icu::RuleBasedNumberFormat::RuleBasedNumberFormat(v41, v35, v60, a4);
        (*(void (**)(uint64_t, UChar **, UErrorCode *))(*(void *)v4 + 384LL))(v42, &v61, a4);
        icu::Locale::~Locale((icu::Locale *)v60);
        icu::UnicodeString::~UnicodeString(v43, (icu::UnicodeString *)&v61);
        icu::UnicodeString::~UnicodeString(v44, (icu::UnicodeString *)&v66);
        icu::UnicodeString::~UnicodeString(v45, (icu::UnicodeString *)&v71);
      }

      else
      {
        if ((_DWORD)v7 == 10)
        {
          unsigned int v54 = &unk_180A3AE1C;
          icu::UnicodeString::UnicodeString(v60, 1LL, &v54);
          int v53 = &unk_180A3AE20;
          icu::UnicodeString::UnicodeString(v58, 1LL, &v53);
          sub_1808C1364((uint64_t)&v76, (icu::UnicodeString *)v60, (icu::UnicodeString *)v58);
          icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)v58);
          v52[0] = v53;
          icu::UnicodeString::~UnicodeString(v52, (icu::UnicodeString *)v60);
          unsigned int v51 = v54;
          UErrorCode v27 = (uint64_t *)&v51;
        }

        int v39 = (icu::DecimalFormatSymbols *)v57;
        int v40 = (icu::DecimalFormat *)icu::UMemory::operator new(v27, (icu::UMemory *)0x170, v26);
        uint64_t v4 = v40;
        if (!v40)
        {
          uint64_t v19 = 7LL;
          *a4 = U_MEMORY_ALLOCATION_ERROR;
          goto LABEL_67;
        }

        icu::DecimalFormat::DecimalFormat(v40, (const icu::UnicodeString *)&v76, v39, v7, a4);
        unsigned int v57 = 0LL;
        if ((_DWORD)v7 == 13)
        {
          icu::DecimalFormat::setCurrencyUsage(v4, 1, a4);
        }
      }

      LocaleByint Type = (const char *)ures_getLocaleByType(v18, 1, (int *)a4);
      int v47 = (const char *)ures_getLocaleByType(v18, 0, (int *)a4);
      icu::Format::setLocaleIDs(v4, LocaleByType, v47);
      uint64_t v19 = *(unsigned int *)a4;
      if ((int)v19 >= 1)
      {
LABEL_65:
        (*(void (**)(icu::DecimalFormat *))(*(void *)v4 + 8LL))(v4);
LABEL_66:
        uint64_t v4 = 0LL;
      }
    }

uint64_t sub_180941A00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  else {
    uint64_t v6 = *(unsigned __int16 *)(a1 + 8) >> 5;
  }
  return icu::UnicodeString::doReplace(a1, 0LL, v6, a2, 0, a3);
}

uint64_t sub_180941A5C(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 < 0)
  {
    int v6 = 0;
    goto LABEL_7;
  }

  if (*(__int16 *)(a2 + 8) < 0)
  {
    int v6 = *(_DWORD *)(a2 + 12);
    if (v6 >= a3) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  int v6 = *(unsigned __int16 *)(a2 + 8) >> 5;
  if (v6 < a3) {
LABEL_7:
  }
    a3 = v6;
LABEL_8:
  else {
    uint64_t v7 = *(unsigned __int16 *)(a1 + 8) >> 5;
  }
  unsigned int v8 = *(unsigned __int16 *)(a2 + 8);
  int v9 = (__int16)v8;
  unsigned int v10 = v8 >> 5;
  if (v9 < 0) {
    unsigned int v10 = *(_DWORD *)(a2 + 12);
  }
  return icu::UnicodeString::doReplace((icu::UnicodeString *)a1, 0LL, v7, (const icu::UnicodeString *)a2, a3, v10 - a3);
}

uint64_t sub_180941B08(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 8);
  else {
    int32_t v3 = v2 >> 5;
  }
  unsigned int v4 = *(unsigned __int16 *)(a2 + 8);
  if ((v4 & 1) != 0) {
    return (v2 & 1) == 0;
  }
  if ((v4 & 0x8000u) == 0) {
    int v5 = v4 >> 5;
  }
  else {
    int v5 = *(_DWORD *)(a2 + 12);
  }
  if ((v4 & 2) != 0) {
    uint64_t v6 = a2 + 10;
  }
  else {
    uint64_t v6 = *(void *)(a2 + 24);
  }
  return icu::UnicodeString::doCompare(a1, 0, v3, v6, v5 & (v5 >> 31), v5 & ~(v5 >> 31));
}

uint64_t icu::NumberFormat::getRoundingMode(icu::NumberFormat *this)
{
  return 7LL;
}

uint64_t sub_180941B74()
{
  if (qword_18C449780)
  {
    uhash_close((_BYTE *)qword_18C449780);
    qword_18C449780 = 0LL;
  }

  return 1LL;
}

uint64_t sub_180941BB0(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_180941BC4(uint64_t a1)
{
  *(void *)a1 = off_1897286B0;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));
  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);
}

void sub_180941BF4(uint64_t a1)
{
  *(void *)a1 = off_1897286B0;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));
  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);
  icu::UMemory::operator delete(v2);
}

uint64_t sub_180941C28(uint64_t a1)
{
  int v2 = strlen((const char *)((unint64_t)"N3icu18SharedNumberFormatE" & 0x7FFFFFFFFFFFFFFFLL));
  unsigned int v3 = ustr_hashCharsN( (unsigned __int8 *)((unint64_t)"N3icu18SharedNumberFormatE" & 0x7FFFFFFFFFFFFFFFLL),  v2);
  return icu::Locale::hashCode((icu::Locale *)(a1 + 16)) + 37 * v3;
}

uint64_t *sub_180941C80@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0xF0, a2);
  int v5 = v4;
  if (v4)
  {
    *((_DWORD *)v4 + 2) = *(_DWORD *)(a1 + 8);
    *((_BYTE *)v4 + 12) = 0;
    *unsigned int v4 = (uint64_t)off_1897286B0;
    icu::Locale::Locale((icu::Locale *)(v4 + 2), a1 + 16);
  }

  return v5;
}

char *sub_180941CD4(uint64_t a1, char *__dst, int a3)
{
  uint64_t result = strncpy(__dst, *(const char **)(a1 + 56), a3);
  __dst[a3 - 1] = 0;
  return result;
}

BOOL sub_180941D0C(void *a1, void *a2)
{
  BOOL result = sub_18089E3E8(a1, a2);
  if (result) {
    return icu::Locale::operator==((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  }
  return result;
}

uint64_t *sub_180941D48(uint64_t a1, int a2, int a3, UErrorCode *a4)
{
  uint64_t v8 = *(void *)(a1 + 80);
  if ((*(_DWORD *)(a1 + 60) & 0x80000000) != 0) {
    goto LABEL_6;
  }
  Set = (icu::UnicodeSet *)icu::numparse::impl::SymbolMatcher::getSet(*(icu::numparse::impl::SymbolMatcher **)(a1 + 80));
  if (!icu::UnicodeSet::contains(Set, *(_DWORD *)(a1 + 60)))
  {
    uint64_t v8 = *(void *)(a1 + 80);
LABEL_6:
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 24LL))(a1, v8);
  }

uint64_t icu::numparse::impl::AffixTokenMatcherWarehouse::minusSign( icu::numparse::impl::AffixTokenMatcherWarehouse *this)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  icu::numparse::impl::MinusSignMatcher::MinusSignMatcher( (icu::numparse::impl::MinusSignMatcher *)&v3,  *(UChar ***)(*(void *)this + 8LL),  1);
  icu::UnicodeString::operator=( (icu::numparse::impl::AffixTokenMatcherWarehouse *)((char *)this + 16),  (icu::UnicodeString *)v4);
  *((void *)this + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v4[8];
  *((_BYTE *)this + 88) = v5;
  unsigned int v3 = off_189728C88;
  icu::UnicodeString::~UnicodeString(off_189728C88, (icu::UnicodeString *)v4);
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)&v3);
  return (uint64_t)this + 8;
}

uint64_t icu::numparse::impl::AffixTokenMatcherWarehouse::plusSign( icu::numparse::impl::AffixTokenMatcherWarehouse *this)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  icu::numparse::impl::PlusSignMatcher::PlusSignMatcher( (icu::numparse::impl::PlusSignMatcher *)&v3,  *(UChar ***)(*(void *)this + 8LL),  1);
  icu::UnicodeString::operator=( (icu::numparse::impl::AffixTokenMatcherWarehouse *)((char *)this + 104),  (icu::UnicodeString *)v4);
  *((void *)this + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v4[8];
  *((_BYTE *)this + 176) = v5;
  unsigned int v3 = off_189728C88;
  icu::UnicodeString::~UnicodeString(off_189728C88, (icu::UnicodeString *)v4);
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)&v3);
  return (uint64_t)this + 96;
}

uint64_t icu::numparse::impl::AffixTokenMatcherWarehouse::percent( icu::numparse::impl::AffixTokenMatcherWarehouse *this)
{
  void v4[9] = *MEMORY[0x1895F89C0];
  icu::numparse::impl::PercentMatcher::PercentMatcher( (icu::numparse::impl::PercentMatcher *)&v3,  *(UChar ***)(*(void *)this + 8LL));
  icu::UnicodeString::operator=( (icu::numparse::impl::AffixTokenMatcherWarehouse *)((char *)this + 192),  (icu::UnicodeString *)v4);
  *((void *)this + 32) = v4[8];
  unsigned int v3 = off_189728C88;
  icu::UnicodeString::~UnicodeString(off_189728C88, (icu::UnicodeString *)v4);
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)&v3);
  return (uint64_t)this + 184;
}

uint64_t icu::numparse::impl::AffixTokenMatcherWarehouse::permille( icu::numparse::impl::AffixTokenMatcherWarehouse *this)
{
  void v4[9] = *MEMORY[0x1895F89C0];
  icu::numparse::impl::PermilleMatcher::PermilleMatcher( (icu::numparse::impl::PermilleMatcher *)&v3,  *(UChar ***)(*(void *)this + 8LL));
  icu::UnicodeString::operator=( (icu::numparse::impl::AffixTokenMatcherWarehouse *)((char *)this + 272),  (icu::UnicodeString *)v4);
  *((void *)this + 42) = v4[8];
  unsigned int v3 = off_189728C88;
  icu::UnicodeString::~UnicodeString(off_189728C88, (icu::UnicodeString *)v4);
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)&v3);
  return (uint64_t)this + 264;
}

const icu::number::impl::CurrencySymbols ***icu::numparse::impl::AffixTokenMatcherWarehouse::currency( const icu::number::impl::CurrencySymbols ***this, UErrorCode *a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  icu::numparse::impl::CombinedCurrencyMatcher::CombinedCurrencyMatcher( (icu::numparse::impl::CombinedCurrencyMatcher *)v10,  **this,  (*this)[1],  *((_DWORD *)*this + 8),  a2);
  this[44] = (const icu::number::impl::CurrencySymbols **)v10[1];
  icu::UnicodeString::operator=((icu::UnicodeString *)(this + 45), (icu::UnicodeString *)v11);
  icu::UnicodeString::operator=((icu::UnicodeString *)(this + 53), (icu::UnicodeString *)v12);
  uint64_t v3 = 0LL;
  *((_BYTE *)this + 488) = v12[64];
  do
  {
    icu::UnicodeString::operator=((icu::UnicodeString *)&this[v3 + 62], (icu::UnicodeString *)&v12[v3 * 8 + 72]);
    v3 += 8LL;
  }

  while (v3 != 64);
  icu::UnicodeString::operator=((icu::UnicodeString *)(this + 126), (icu::UnicodeString *)v13);
  icu::UnicodeString::operator=((icu::UnicodeString *)(this + 134), (icu::UnicodeString *)v14);
  icu::CharString::operator=((uint64_t)(this + 142), (uint64_t)&v15);
  v10[0] = off_189728A50;
  unint64_t v4 = v16;
  if (v16) {
    uprv_free(v15);
  }
  icu::UnicodeString::~UnicodeString((void *)v4, (icu::UnicodeString *)v14);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v13);
  for (uint64_t i = 75LL; i != 11; i -= 8LL)
    icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v10[i]);
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v12);
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v11);
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)v10);
  return this + 43;
}

uint64_t *icu::numparse::impl::AffixTokenMatcherWarehouse::nextCodePointMatcher( const void **this, int a2, UErrorCode *a3)
{
  int v5 = a2;
  BOOL result = sub_180942518(this + 150, &v5);
  if (!result) {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
  return result;
}

void sub_18094235C(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 56);
  if (v4 >= *(_DWORD *)(a1 + 24) && v4 >= 1)
  {
    int v6 = 2 * v4;
    uint64_t v7 = uprv_malloc(8LL * (2 * v4));
    if (v7)
    {
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(a1 + 24);
      if (v9 >= v4) {
        int v9 = v4;
      }
      if (v9 >= v6) {
        int v9 = 2 * v4;
      }
      unsigned int v10 = *(void **)(a1 + 16);
      memcpy(v7, v10, 8LL * v9);
      if (*(_BYTE *)(a1 + 28)) {
        uprv_free(v10);
      }
      *(void *)(a1 + 16) = v8;
      *(_DWORD *)(a1 + 24) = v6;
      *(_BYTE *)(a1 + 28) = 1;
    }
  }

  uint64_t v11 = *(int *)(a1 + 56);
  *(_DWORD *)(a1 + 56) = v11 + 1;
  *(void *)(*(void *)(a1 + 16) + 8 * v1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = a2;
}

void sub_18094240C(uint64_t a1, uint64_t a2)
{
}

uint64_t icu::numparse::impl::AffixPatternMatcher::AffixPatternMatcher( uint64_t a1, uint64_t a2, int a3, uint64_t a4, int *a5)
{
  uint64_t v8 = icu::numparse::impl::ArraySeriesMatcher::ArraySeriesMatcher(a1, a2, a3);
  *(void *)uint64_t v8 = &unk_1897287D0;
  sub_180943D84((void **)(v8 + 56), a4, a5);
  return a1;
}

{
  uint64_t v8;
  uint64_t v8 = icu::numparse::impl::ArraySeriesMatcher::ArraySeriesMatcher(a1, a2, a3);
  *(void *)uint64_t v8 = &unk_1897287D0;
  sub_180943D84((void **)(v8 + 56), a4, a5);
  return a1;
}

uint64_t icu::numparse::impl::AffixTokenMatcherWarehouse::AffixTokenMatcherWarehouse(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = off_18971B688;
  *(_WORD *)(a1 + 24) = 2;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = off_189728D90;
  *(_WORD *)(a1 + 112) = 2;
  *(void *)(a1 + 96) = off_189728F48;
  *(void *)(a1 + 104) = off_18971B688;
  *(_WORD *)(a1 + 20icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
  *(void *)(a1 + 184) = off_189728E98;
  *(void *)(a1 + 192) = off_18971B688;
  *(_WORD *)(a1 + 28icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
  *(void *)(a1 + 264) = off_189728EF0;
  *(void *)(a1 + 272) = off_18971B688;
  sub_180943CF8(a1 + 344);
  *(_DWORD *)(a1 + 120icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  *(void *)(a1 + 1208) = a1 + 1224;
  *(_DWORD *)(a1 + 1216) = 8;
  *(_BYTE *)(a1 + 122icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  return a1;
}

uint64_t icu::numparse::impl::AffixTokenMatcherWarehouse::ignorables( icu::numparse::impl::AffixTokenMatcherWarehouse *this)
{
  return *(void *)(*(void *)this + 16LL);
}

uint64_t *sub_180942518(const void **a1, int *a2)
{
  int v4 = *((_DWORD *)a1 + 4);
  uint64_t v5 = *(unsigned int *)a1;
  if ((_DWORD)v5 == v4)
  {
    if (v4 == 8) {
      int v6 = 32;
    }
    else {
      int v6 = 2 * v4;
    }
    if (v6 < 1) {
      return 0LL;
    }
    BOOL result = (uint64_t *)uprv_malloc(8LL * v6);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    if (v4 >= 1)
    {
      int v9 = *((_DWORD *)a1 + 4);
      if (v9 >= v4) {
        int v9 = v4;
      }
      if (v9 >= v6) {
        int v9 = v6;
      }
      memcpy(result, a1[1], 8LL * v9);
    }

    if (*((_BYTE *)a1 + 20)) {
      uprv_free((void *)a1[1]);
    }
    a1[1] = v8;
    *((_DWORD *)a1 + 4) = v6;
    uint64_t v5 = 1LL;
    *((_BYTE *)a1 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 1;
  }

  BOOL result = icu::UMemory::operator new((uint64_t *)v5, (icu::UMemory *)0x10, (unint64_t)a2);
  if (result)
  {
    int v10 = *a2;
    *BOOL result = (uint64_t)&off_189728788;
    *((_DWORD *)result + 2) = v10;
  }

  uint64_t v11 = *(int *)a1;
  *(_DWORD *)a1 = v11 + 1;
  *((void *)a1[1] + v1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = result;
  return result;
}

BOOL icu::numparse::impl::AffixTokenMatcherWarehouse::hasEmptyCurrencySymbol( icu::number::impl::CurrencySymbols ***this)
{
  return icu::number::impl::CurrencySymbols::hasEmptyCurrencySymbol(**this);
}

uint64_t icu::numparse::impl::CodePointMatcher::CodePointMatcher(uint64_t this, int a2)
{
  *(void *)this = &off_189728788;
  *(_DWORD *)(this + 8) = a2;
  return this;
}

{
  *(void *)this = &off_189728788;
  *(_DWORD *)(this + 8) = a2;
  return this;
}

uint64_t icu::numparse::impl::CodePointMatcher::match( icu::numparse::impl::CodePointMatcher *this, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3, UErrorCode *a4)
{
  if (icu::StringSegment::startsWith(a2, *((_DWORD *)this + 2)))
  {
    icu::StringSegment::adjustOffsetByCodePoint(a2);
    icu::numparse::impl::ParsedNumber::setCharsConsumed(a3, a2);
  }

  return 0LL;
}

BOOL icu::numparse::impl::CodePointMatcher::smokeTest( icu::numparse::impl::CodePointMatcher *this, const icu::StringSegment *a2)
{
  return icu::StringSegment::startsWith(a2, *((_DWORD *)this + 2));
}

uint64_t icu::numparse::impl::CodePointMatcher::toString@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)L"<CodePoint>");
}

uint64_t icu::numparse::impl::AffixPatternMatcher::fromAffixPattern@<X0>( icu::numparse::impl::AffixPatternMatcher *this@<X0>, const icu::UnicodeString *a2@<X1>, icu::numparse::impl::AffixTokenMatcherWarehouse *a3@<X2>, BOOL *a4@<X4>, _BYTE *a5@<X3>, uint64_t a6@<X8>)
{
  if (*((unsigned __int16 *)this + 4) <= 0x1Fu)
  {
    *a5 = 0;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)(a6 + 64) = 0u;
    uint64_t result = icu::numparse::impl::ArraySeriesMatcher::ArraySeriesMatcher(a6);
    *(void *)a6 = &unk_1897287D0;
    *(_WORD *)(a6 + 7icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
    *(void *)(a6 + 56) = a6 + 70;
    *(_DWORD *)(a6 + 64) = 4;
    *(_BYTE *)(a6 + 68) = 0;
  }

  else
  {
    *a5 = 1;
    else {
      uint64_t v9 = *(void *)(*(void *)a2 + 16LL);
    }
    memset(&v14[1], 0, 32);
    uint64_t v12 = off_189728730;
    uint64_t v13 = &unk_189728760;
    v14[0] = &v14[2];
    LODWORD(v14[1]) = 3;
    uint64_t v15 = 0LL;
    unsigned __int8 v16 = this;
    uint64_t v17 = a2;
    uint64_t v18 = v9;
    icu::number::impl::AffixUtils::iterateWithConsumer((unint64_t)this, (uint64_t)&v12, (int *)a4);
    uint64_t v11 = (uint64_t)v16;
    icu::numparse::impl::ArraySeriesMatcher::ArraySeriesMatcher(a6, (uint64_t)v14, v15);
    *(void *)a6 = &unk_1897287D0;
    sub_180943D84((void **)(a6 + 56), v11, (int *)a4);
    uint64_t v12 = off_189728730;
    uint64_t v13 = &unk_189728760;
    if (BYTE4(v14[1])) {
      uprv_free(v14[0]);
    }
    return nullsub_17(&v12);
  }

  return result;
}

uint64_t sub_1809427E0(uint64_t a1)
{
  *(void *)a1 = off_189728730;
  *(void *)(a1 + 8) = &unk_189728760;
  if (*(_BYTE *)(a1 + 28)) {
    uprv_free(*(void **)(a1 + 16));
  }
  return nullsub_17(a1);
}

uint64_t icu::numparse::impl::AffixPatternMatcher::getPattern@<X0>( icu::numparse::impl::AffixPatternMatcher *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)this + 7);
  return icu::UnicodeString::UnicodeString(a2, 1LL, &v3);
}

uint64_t icu::numparse::impl::AffixPatternMatcher::operator==(uint64_t a1, uint64_t a2)
{
  return sub_1809428BC((uint64_t *)(a1 + 56), (uint64_t *)(a2 + 56));
}

uint64_t sub_1809428BC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  uint64_t v9 = *a1;
  icu::UnicodeString::UnicodeString(v12, 1LL, &v9);
  uint64_t v8 = *a2;
  icu::UnicodeString::UnicodeString(&v9, 1LL, &v8);
  if ((v13 & 1) != 0)
  {
    unint64_t v5 = v10;
    uint64_t v3 = v10 & 1;
  }

  else
  {
    uint64_t v3 = 0LL;
    if ((v13 & 0x8000u) == 0) {
      int v4 = v13 >> 5;
    }
    else {
      int v4 = v14;
    }
    if ((v10 & 0x8000u) == 0) {
      unint64_t v5 = v10 >> 5;
    }
    else {
      unint64_t v5 = v11;
    }
    if ((v10 & 1) == 0 && v4 == (_DWORD)v5) {
      uint64_t v3 = icu::UnicodeString::doEquals((icu::UnicodeString *)v12, (const icu::UnicodeString *)&v9, v4);
    }
  }

  icu::UnicodeString::~UnicodeString((void *)v5, (icu::UnicodeString *)&v9);
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v12);
  return v3;
}

uint64_t sub_1809429D4(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = 0LL; i != 576; i += 32LL)
    *(void *)(a1 + i) = &off_189728830;
  uint64_t v5 = a1 + 576;
  do
  {
    uint64_t v6 = icu::numparse::impl::ArraySeriesMatcher::ArraySeriesMatcher(v5);
    *(_WORD *)(v6 + 7icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
    *(void *)uint64_t v6 = &unk_1897287D0;
    *(void *)(v6 + 56) = v6 + 70;
    *(_DWORD *)(v6 + 64) = 4;
    *(_BYTE *)(v6 + 68) = 0;
    uint64_t v5 = v6 + 80;
  }

  while (v5 != a1 + 1536);
  *(void *)(a1 + 1536) = a2;
  return a1;
}

BOOL sub_180942A6C(uint64_t a1, icu::numparse::impl::SymbolMatcher *a2, __int16 a3, int *a4)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  memset(v36, 0, sizeof(v36));
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32LL))(v36, a1, 256LL);
  memset(v35, 0, sizeof(v35));
  (*(void (**)(_OWORD *__return_ptr, uint64_t, void))(*(void *)a1 + 32LL))(v35, a1, 0LL);
  __int128 v31 = 0u;
  uint64_t v34 = 0LL;
  __int128 v33 = 0u;
  __int128 v32 = 0u;
  uint64_t v29 = 0LL;
  int32_t v30 = off_18971B688;
  LOWORD(v3icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 2;
  __int128 v26 = 0u;
  __int128 v28 = 0u;
  __int128 v27 = 0u;
  uint64_t v25 = off_18971B688;
  LOWORD(v26) = 2;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56LL))(a1))
  {
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32LL))(v24, a1, 768LL);
    icu::UnicodeString::operator=((icu::UnicodeString *)&v30, (icu::UnicodeString *)v24);
    icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v24);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32LL))(v24, a1, 512LL);
    icu::UnicodeString::operator=((icu::UnicodeString *)&v25, (icu::UnicodeString *)v24);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v24);
  }

  BOOL v19 = 1;
  if ((a3 & 0x100) == 0)
  {
    Set = (const icu::UnicodeString *)icu::numparse::impl::SymbolMatcher::getSet(a2);
    if (icu::number::impl::AffixUtils::containsOnlySymbolsAndIgnorables( (icu::number::impl::AffixUtils *)v36,  Set,  (const icu::UnicodeSet *)a4,  v12))
    {
      unsigned __int16 v13 = (const icu::UnicodeString *)icu::numparse::impl::SymbolMatcher::getSet(a2);
      if (icu::number::impl::AffixUtils::containsOnlySymbolsAndIgnorables( (icu::number::impl::AffixUtils *)v35,  v13,  (const icu::UnicodeSet *)a4,  v14))
      {
        uint64_t v15 = (const icu::UnicodeString *)icu::numparse::impl::SymbolMatcher::getSet(a2);
        if (icu::number::impl::AffixUtils::containsOnlySymbolsAndIgnorables( (icu::number::impl::AffixUtils *)&v30,  v15,  (const icu::UnicodeSet *)a4,  v16))
        {
          uint64_t v17 = (const icu::UnicodeString *)icu::numparse::impl::SymbolMatcher::getSet(a2);
          if (icu::number::impl::AffixUtils::containsOnlySymbolsAndIgnorables( (icu::number::impl::AffixUtils *)&v25,  v17,  (const icu::UnicodeSet *)a4,  v18))
          {
            if ((icu::number::impl::AffixUtils::containsType((uint64_t)v35, -2, a4) & 1) == 0
              && (icu::number::impl::AffixUtils::containsType((uint64_t)v35, -1, a4) & 1) == 0
              && (icu::number::impl::AffixUtils::containsType((uint64_t)&v25, -2, a4) & 1) == 0
              && !icu::number::impl::AffixUtils::containsType((uint64_t)&v25, -1, a4))
            {
              BOOL v19 = 0;
            }
          }
        }
      }
    }
  }

  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v25);
  icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v30);
  icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v35);
  icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)v36);
  return v19;
}

void *sub_180942CC0( uint64_t a1, uint64_t a2, uint64_t a3, icu::numparse::impl::SymbolMatcher *a4, icu::numparse::impl::AffixTokenMatcherWarehouse *a5, int *a6)
{
  uint64_t v6 = (BOOL *)a6;
  uint64_t v7 = a5;
  uint64_t v9 = a2;
  uint64_t v87 = *MEMORY[0x1895F89C0];
  uint64_t result = (void *)sub_180942A6C(a2, a4, (__int16)a5, a6);
  if (!(_DWORD)result) {
    return result;
  }
  uint64_t v62 = a3;
  unsigned int v12 = 0;
  __int128 v64 = 0LL;
  uint64_t v65 = 0LL;
  int v13 = 0;
  uint64_t v14 = 0LL;
  __int128 v83 = 0u;
  uint64_t v86 = 0LL;
  __int128 v85 = 0u;
  __int128 v84 = 0u;
  __int128 v82 = off_18971B688;
  LOWORD(v83) = 2;
  __int128 v63 = v6;
  uint64_t v15 = (uint64_t)off_189728948;
  unsigned __int8 v16 = &off_189728830;
  unsigned int v69 = v7;
  uint64_t v67 = v9;
  do
  {
    if (((v12 & 1) == 0
       || (*(unsigned int (**)(uint64_t))(*(void *)v9 + 40LL))(v9)
       && icu::number::impl::CurrencySymbols::hasEmptyCurrencySymbol(***(icu::number::impl::CurrencySymbols ****)(a1 + 1536)))
      && (((unsigned __int16)v7 & 0x400) == 0 || v12 >= 2))
    {
      uint64_t v15 = v12 & 0x7E;
      if (((unsigned __int16)v7 & 0x400) != 0 || (_DWORD)v15 != 2)
      {
        int v66 = v12 & 0x7E;
        uint64_t v68 = v14;
        unsigned __int8 v81 = 0;
        icu::number::impl::PatternStringUtils::patternInfoToStringBuilder( v9,  1,  v12 >> 1,  0,  5,  0,  v12 & 1,  (uint64_t)&v82);
        icu::numparse::impl::AffixPatternMatcher::fromAffixPattern( (icu::numparse::impl::AffixPatternMatcher *)&v82,  *(const icu::UnicodeString **)(a1 + 1536),  v7,  v6,  &v81,  (uint64_t)&v73);
        uint64_t v17 = a1 + 80LL * v13;
        uint64_t v18 = v17 + 576;
        if (*(_BYTE *)(v17 + 596)) {
          uprv_free(*(void **)(v17 + 584));
        }
        uint64_t v19 = SDWORD2(v74);
        *(_DWORD *)(v18 + 16) = DWORD2(v74);
        *(_BYTE *)(v18 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = BYTE12(v74);
        if ((void *)v74 == v75)
        {
          *(void *)(v18 + 8) = v18 + 24;
          memcpy((void *)(v18 + 24), v75, 8 * v19);
        }

        else
        {
          *(void *)(v18 + 8) = v74;
          *(void *)&__int128 v74 = v75;
          DWORD2(v74) = 3;
          BYTE12(v74) = 0;
        }

        *(_DWORD *)(v18 + 48) = v76;
        uint64_t v20 = a1 + 80LL * v13;
        uint64_t v21 = (void **)(v20 + 632);
        if (*(_BYTE *)(v20 + 644)) {
          uprv_free(*v21);
        }
        __int128 v22 = (unsigned __int8 *)(v20 + 644);
        uint64_t v23 = v78;
        *(_DWORD *)(a1 + 80LL * v13 + 64icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v78;
        int v24 = v79;
        *__int128 v22 = v79;
        if (v77 == v80)
        {
          uint64_t v25 = (void *)(a1 + 80LL * v13 + 646);
          void *v21 = v25;
          memcpy(v25, v80, 2 * v23);
          __int128 v73 = (uint64_t (**)(icu::numparse::impl::NumberParseMatcher *))&unk_1897287D0;
          if (v24) {
            uprv_free(v80);
          }
        }

        else
        {
          void *v21 = v77;
          __int128 v77 = v80;
          int v78 = 4;
          unsigned __int8 v79 = 0;
        }

        __int128 v73 = off_189728948;
        if (BYTE12(v74)) {
          uprv_free((void *)v74);
        }
        icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)&v73);
        int v26 = v81;
        int v27 = v13 + v81;
        if (v81) {
          __int128 v28 = (icu::numparse::impl::AffixTokenMatcherWarehouse *)v18;
        }
        else {
          __int128 v28 = 0LL;
        }
        uint64_t v70 = v28;
        unsigned __int8 v72 = 0;
        icu::number::impl::PatternStringUtils::patternInfoToStringBuilder( v67,  0,  v12 >> 1,  0,  5,  0,  v12 & 1,  (uint64_t)&v82);
        icu::numparse::impl::AffixPatternMatcher::fromAffixPattern( (icu::numparse::impl::AffixPatternMatcher *)&v82,  *(const icu::UnicodeString **)(a1 + 1536),  (icu::numparse::impl::AffixTokenMatcherWarehouse *)v69,  v6,  &v72,  (uint64_t)&v73);
        uint64_t v29 = a1 + 80LL * v27;
        uint64_t v30 = v29 + 576;
        if (*(_BYTE *)(v29 + 596)) {
          uprv_free(*(void **)(v29 + 584));
        }
        uint64_t v31 = SDWORD2(v74);
        *(_DWORD *)(v30 + 16) = DWORD2(v74);
        *(_BYTE *)(v30 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = BYTE12(v74);
        if ((void *)v74 == v75)
        {
          *(void *)(v30 + 8) = v30 + 24;
          memcpy((void *)(v30 + 24), v75, 8 * v31);
        }

        else
        {
          *(void *)(v30 + 8) = v74;
          *(void *)&__int128 v74 = v75;
          DWORD2(v74) = 3;
          BYTE12(v74) = 0;
        }

        uint64_t v32 = v27;
        *(_DWORD *)(v30 + 48) = v76;
        uint64_t v33 = a1 + 80LL * v27;
        uint64_t v34 = (void **)(v33 + 632);
        uint64_t v71 = v32;
        if (*(_BYTE *)(v33 + 644))
        {
          uprv_free(*v34);
          LODWORD(v32) = v71;
        }

        uint64_t v35 = (unsigned __int8 *)(v33 + 644);
        uint64_t v36 = v78;
        *(_DWORD *)(a1 + 80LL * (int)v32 + 64icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v78;
        int v37 = v79;
        unsigned __int8 *v35 = v79;
        if (v77 == v80)
        {
          uint64_t v38 = (void *)(a1 + 80LL * (int)v32 + 646);
          *uint64_t v34 = v38;
          memcpy(v38, v80, 2 * v36);
          __int128 v73 = (uint64_t (**)(icu::numparse::impl::NumberParseMatcher *))&unk_1897287D0;
          if (v37) {
            uprv_free(v80);
          }
        }

        else
        {
          *uint64_t v34 = v77;
          __int128 v77 = v80;
          int v78 = 4;
          unsigned __int8 v79 = 0;
        }

        __int128 v73 = off_189728948;
        if (BYTE12(v74)) {
          uprv_free((void *)v74);
        }
        icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)&v73);
        int v39 = v72;
        if (v72) {
          uint64_t v40 = v30;
        }
        else {
          uint64_t v40 = 0LL;
        }
        int v41 = v70;
        uint64_t v42 = v70;
        uint64_t v43 = v40;
        if (v12 >= 2)
        {
          if ((uint64_t v42 = (icu::numparse::impl::AffixTokenMatcherWarehouse *)v64, v43 = v65, !v64) && !v26
            || v64 && v26 && (int v44 = sub_1809428BC((uint64_t *)v70 + 7, v64 + 7), v41 = v70, v44))
          {
            if (!v65 && !v39)
            {
              uint64_t v43 = 0LL;
LABEL_51:
              uint64_t v14 = v68;
LABEL_70:
              uint64_t v7 = (icu::numparse::impl::AffixTokenMatcherWarehouse *)v69;
              uint64_t v15 = v71;
              goto LABEL_71;
            }

            if (v65)
            {
              if (v39)
              {
                char v45 = sub_1809428BC((uint64_t *)(v40 + 56), (uint64_t *)(v65 + 56));
                int v41 = v70;
                if ((v45 & 1) != 0)
                {
                  uint64_t v42 = (icu::numparse::impl::AffixTokenMatcherWarehouse *)v64;
                  uint64_t v43 = v65;
                  goto LABEL_51;
                }
              }
            }
          }
        }

        int v46 = v16;
        __int128 v73 = (uint64_t (**)(icu::numparse::impl::NumberParseMatcher *))v16;
        *(void *)&__int128 v74 = v41;
        *((void *)&v74 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v40;
        LODWORD(v75[0]) = v66 == 4;
        uint64_t v47 = (int)v68 + 1LL;
        uint64_t v48 = a1 + 32LL * (int)v68;
        *(_OWORD *)(v48 + 8) = v74;
        *(_DWORD *)(v48 + 24) = v75[0];
        icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)&v73);
        if (!v26) {
          goto LABEL_65;
        }
        uint64_t v7 = (icu::numparse::impl::AffixTokenMatcherWarehouse *)v69;
        uint64_t v15 = v71;
        if ((v69 & 0x80) == 0 || !v39)
        {
          uint64_t v14 = (int)v68 + 1LL;
          unsigned __int8 v16 = v46;
          uint64_t v6 = v63;
LABEL_71:
          int v13 = v15 + v39;
          __int128 v64 = (uint64_t *)v42;
          uint64_t v65 = v43;
          uint64_t v9 = v67;
          goto LABEL_72;
        }

        __int128 v73 = (uint64_t (**)(icu::numparse::impl::NumberParseMatcher *))v46;
        __int128 v74 = (unint64_t)v70;
        LODWORD(v75[0]) = v66 == 4;
        int v49 = v68 + 2;
        uint64_t v50 = a1 + 32 * v47;
        *(_OWORD *)(v50 + 8) = (unint64_t)v70;
        *(_DWORD *)(v50 + 24) = v75[0];
        icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)&v73);
        uint64_t v47 = (v68 + 2);
        if (v12 >= 2)
        {
LABEL_63:
          if (v43)
          {
            int v49 = v47;
            if ((sub_1809428BC((uint64_t *)(v40 + 56), (uint64_t *)(v43 + 56)) & 1) != 0)
            {
LABEL_65:
              uint64_t v14 = v47;
              unsigned __int8 v16 = v46;
LABEL_69:
              uint64_t v6 = v63;
              goto LABEL_70;
            }
          }

          else
          {
            int v49 = v47;
          }
        }

        unsigned __int8 v16 = v46;
        __int128 v73 = (uint64_t (**)(icu::numparse::impl::NumberParseMatcher *))v46;
        *(void *)&__int128 v74 = 0LL;
        *((void *)&v74 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v40;
        LODWORD(v75[0]) = v66 == 4;
        uint64_t v14 = (v49 + 1);
        uint64_t v51 = a1 + 32LL * v49;
        *(_OWORD *)(v51 + 8) = v74;
        *(_DWORD *)(v51 + 24) = v75[0];
        icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)&v73);
        goto LABEL_69;
      }
    }

void sub_1809433DC(void **this)
{
  *this = &unk_1897287D0;
  if (*((_BYTE *)this + 68)) {
    uprv_free(this[7]);
  }
  *this = off_189728948;
  if (*((_BYTE *)this + 20)) {
    uprv_free(this[1]);
  }
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)this);
}

uint64_t sub_180943440(uint64_t a1, uint64_t a2)
{
  int v4 = (uint64_t *)(a1 + 8);
  int v5 = sub_180943910(*(void *)(a1 + 8));
  uint64_t v6 = (uint64_t *)(a2 + 8);
  if (v5 == sub_180943910(*(void *)(a2 + 8)))
  {
    uint64_t v8 = *(void *)(a1 + 16);
    uint64_t v7 = (uint64_t *)(a1 + 16);
    int v9 = sub_180943910(v8);
    uint64_t v11 = *(void *)(a2 + 16);
    unsigned __int16 v10 = (uint64_t *)(a2 + 16);
    int v4 = v7;
    uint64_t v6 = v10;
  }

  int v13 = sub_180943910(*v4);
  else {
    return 1;
  }
}

uint64_t sub_1809434E4( uint64_t a1, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *this, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if ((icu::numparse::impl::ParsedNumber::seenNumber(this) & 1) != 0)
  {
    if ((*((_WORD *)this + 76) & 1) != 0
      && *(void *)(a1 + 16)
      && sub_180943688(*(void *)(a1 + 8), (uint64_t)this + 80))
    {
      int Offset = icu::StringSegment::getOffset(a2);
      uint64_t v9 = (*(uint64_t (**)(void, icu::StringSegment *, icu::numparse::impl::ParsedNumber *, uint64_t))(**(void **)(a1 + 16) + 24LL))( *(void *)(a1 + 16),  a2,  this,  a4);
      if (Offset != icu::StringSegment::getOffset(a2))
      {
        unsigned __int16 v10 = (icu::numparse::impl::ParsedNumber *)((char *)this + 144);
        uint64_t v14 = *(void *)(*(void *)(a1 + 16) + 56LL);
        icu::UnicodeString::UnicodeString(v15, 1LL, &v14);
LABEL_11:
        icu::UnicodeString::operator=(v10, (icu::UnicodeString *)v15);
        icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v15);
        return v9;
      }

      return v9;
    }

    return 0LL;
  }

  if ((*((_WORD *)this + 44) & 1) == 0 || !*(void *)(a1 + 8)) {
    return 0LL;
  }
  int v11 = icu::StringSegment::getOffset(a2);
  uint64_t v9 = (*(uint64_t (**)(void, icu::StringSegment *, icu::numparse::impl::ParsedNumber *, uint64_t))(**(void **)(a1 + 8) + 24LL))( *(void *)(a1 + 8),  a2,  this,  a4);
  if (v11 != icu::StringSegment::getOffset(a2))
  {
    unsigned __int16 v10 = (icu::numparse::impl::ParsedNumber *)((char *)this + 80);
    uint64_t v14 = *(void *)(*(void *)(a1 + 8) + 56LL);
    icu::UnicodeString::UnicodeString(v15, 1LL, &v14);
    goto LABEL_11;
  }

  return v9;
}

BOOL sub_180943688(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  if (!a1) {
    return *(_WORD *)(a2 + 8) & 1;
  }
  uint64_t v8 = *(void *)(a1 + 56);
  icu::UnicodeString::UnicodeString(v9, 1LL, &v8);
  if ((v10 & 1) != 0)
  {
    uint64_t v6 = (void *)*(unsigned __int16 *)(a2 + 8);
    BOOL v3 = v6 & 1;
  }

  else
  {
    BOOL v3 = 0LL;
    if ((v10 & 0x8000u) == 0) {
      int v4 = v10 >> 5;
    }
    else {
      int v4 = v11;
    }
    unsigned int v5 = *(unsigned __int16 *)(a2 + 8);
    if ((v5 & 0x8000u) == 0) {
      uint64_t v6 = (void *)(v5 >> 5);
    }
    else {
      uint64_t v6 = (void *)*(unsigned int *)(a2 + 12);
    }
    if ((v5 & 1) == 0 && v4 == (_DWORD)v6) {
      BOOL v3 = icu::UnicodeString::doEquals((icu::UnicodeString *)v9, (const icu::UnicodeString *)a2, v4);
    }
  }

  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v9);
  return v3;
}

uint64_t sub_180943780(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 32LL))(result, a2);
  }
  return result;
}

uint64_t sub_1809437E4(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  uint64_t v4 = (icu::UnicodeString *)(a2 + 80);
  uint64_t result = sub_180943688(*(void *)(a1 + 8), a2 + 80);
  if ((_DWORD)result)
  {
    uint64_t result = sub_180943688(*(void *)(a1 + 16), a2 + 144);
    if ((_DWORD)result)
    {
      if ((*(_WORD *)(a2 + 88) & 1) != 0)
      {
        uint64_t v9 = off_18971B688;
        __int16 v10 = 2;
        icu::UnicodeString::operator=(v4, (icu::UnicodeString *)&v9);
        icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v9);
      }

      if ((*(_WORD *)(a2 + 152) & 1) != 0)
      {
        uint64_t v9 = off_18971B688;
        __int16 v10 = 2;
        icu::UnicodeString::operator=((icu::UnicodeString *)(a2 + 144), (icu::UnicodeString *)&v9);
        icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)&v9);
      }

      *(_DWORD *)(a2 + 76) |= *(_DWORD *)(a1 + 24);
      uint64_t v8 = *(void *)(a1 + 8);
      if (v8) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 40LL))(v8, a2);
      }
      uint64_t result = *(void *)(a1 + 16);
      if (result) {
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40LL))(result, a2);
      }
    }
  }

  return result;
}

uint64_t sub_180943910(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  if (!a1) {
    return 0LL;
  }
  uint64_t v3 = *(void *)(a1 + 56);
  icu::UnicodeString::UnicodeString(v4, 1LL, &v3);
  if ((v5 & 0x8000u) == 0) {
    uint64_t v1 = v5 >> 5;
  }
  else {
    uint64_t v1 = v6;
  }
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v4);
  return v1;
}

void *sub_1809439B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v28[8] = *MEMORY[0x1895F89C0];
  int v4 = *(_DWORD *)(a1 + 24);
  icu::UnicodeString::UnicodeString((uint64_t)v24, (uint64_t)L"<Affix");
  if ((v4 & 1) != 0) {
    unsigned __int16 v5 = ":";
  }
  else {
    unsigned __int16 v5 = " ";
  }
  icu::UnicodeString::UnicodeString((uint64_t)v23, (uint64_t)v5);
  icu::operator+((uint64_t)v24, (uint64_t)v23, (uint64_t)v25);
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    v28[0] = *(void *)(v6 + 56);
    icu::UnicodeString::UnicodeString(v22, 1LL, v28);
  }

  else
  {
    icu::UnicodeString::UnicodeString((uint64_t)v22, (uint64_t)L"null");
  }

  icu::operator+((uint64_t)v25, (uint64_t)v22, (uint64_t)v26);
  icu::UnicodeString::UnicodeString((uint64_t)v21, (uint64_t)"#");
  icu::operator+((uint64_t)v26, (uint64_t)v21, (uint64_t)v27);
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    v28[0] = *(void *)(v7 + 56);
    icu::UnicodeString::UnicodeString(v20, 1LL, v28);
  }

  else
  {
    icu::UnicodeString::UnicodeString((uint64_t)v20, (uint64_t)L"null");
  }

  icu::operator+((uint64_t)v27, (uint64_t)v20, (uint64_t)v28);
  icu::UnicodeString::UnicodeString((uint64_t)v19, (uint64_t)">");
  icu::operator+((uint64_t)v28, (uint64_t)v19, a2);
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v19);
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v28);
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v20);
  icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v27);
  icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v21);
  icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v26);
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v22);
  icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v25);
  icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v23);
  return icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v24);
}

void sub_180943B8C(uint64_t a1)
{
  *(void *)a1 = off_189728730;
  *(void *)(a1 + 8) = &unk_189728760;
  if (*(_BYTE *)(a1 + 28)) {
    uprv_free(*(void **)(a1 + 16));
  }
  int v2 = (void *)nullsub_17(a1);
  operator delete(v2);
}

uint64_t sub_180943BD0(uint64_t a1)
{
  *(void *)(a1 - 8) = off_189728730;
  uint64_t v1 = a1 - 8;
  *(void *)a1 = &unk_189728760;
  if (*(_BYTE *)(a1 + 20)) {
    uprv_free(*(void **)(a1 + 8));
  }
  return nullsub_17(v1);
}

void sub_180943C14(uint64_t a1)
{
  *(void *)(a1 - 8) = off_189728730;
  uint64_t v1 = a1 - 8;
  *(void *)a1 = &unk_189728760;
  if (*(_BYTE *)(a1 + 20)) {
    uprv_free(*(void **)(a1 + 8));
  }
  int v2 = (void *)nullsub_17(v1);
  operator delete(v2);
}

void sub_180943C60(icu::numparse::impl::NumberParseMatcher *a1)
{
}

uint64_t sub_180943C74()
{
  return 0LL;
}

void sub_180943C80(icu::numparse::impl::NumberParseMatcher *a1)
{
}

void sub_180943C94(void **this)
{
  *this = &unk_1897287D0;
  if (*((_BYTE *)this + 68)) {
    uprv_free(this[7]);
  }
  *this = off_189728948;
  if (*((_BYTE *)this + 20)) {
    uprv_free(this[1]);
  }
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)this);
  operator delete(v2);
}

uint64_t sub_180943CF8(uint64_t result)
{
  *(void *)uint64_t result = off_189728A50;
  *(void *)(result + 16) = off_18971B688;
  *(_WORD *)(result + 24) = 2;
  *(void *)(result + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = off_18971B688;
  *(_WORD *)(result + 88) = 2;
  uint64_t v1 = 152LL;
  do
  {
    uint64_t v2 = result + v1;
    *(void *)uint64_t v2 = off_18971B688;
    *(_WORD *)(v2 + 8) = 2;
    v1 += 64LL;
  }

  while (v2 + 64 != result + 664);
  *(void *)(result + 664) = off_18971B688;
  *(_WORD *)(result + 672) = 2;
  *(void *)(result + 728) = off_18971B688;
  *(_WORD *)(result + 736) = 2;
  *(void *)(result + 792) = result + 805;
  *(_DWORD *)(result + 80icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 40;
  *(_WORD *)(result + 804) = 0;
  *(_DWORD *)(result + 848) = 0;
  return result;
}

void **sub_180943D84(void **a1, uint64_t a2, int *a3)
{
  unsigned int v6 = *(unsigned __int16 *)(a2 + 8);
  int v7 = (__int16)v6;
  unsigned int v8 = v6 >> 5;
  if (v7 < 0) {
    unsigned int v8 = *(_DWORD *)(a2 + 12);
  }
  sub_180943E4C((uint64_t)a1, v8 + 1, *a3);
  if (*a3 <= 0)
  {
    unsigned int v9 = *(unsigned __int16 *)(a2 + 8);
    if ((v9 & 0x11) != 0)
    {
      __int16 v10 = 0LL;
    }

    else if ((v9 & 2) != 0)
    {
      __int16 v10 = (const void *)(a2 + 10);
    }

    else
    {
      __int16 v10 = *(const void **)(a2 + 24);
    }

    int v11 = (__int16)v9;
    unsigned int v12 = v9 >> 5;
    if (v11 < 0) {
      unsigned int v12 = *(_DWORD *)(a2 + 12);
    }
    memcpy(*a1, v10, 2LL * (int)v12);
    unsigned int v13 = *(unsigned __int16 *)(a2 + 8);
    int v14 = (__int16)v13;
    unsigned int v15 = v13 >> 5;
    if (v14 < 0) {
      unsigned int v15 = *(_DWORD *)(a2 + 12);
    }
    *((_WORD *)*a1 + (int)v15) = 0;
  }

  return a1;
}

uint64_t sub_180943E4C(uint64_t a1, int a2, int a3)
{
  *(void *)a1 = a1 + 14;
  *(_DWORD *)(a1 + 8) = 4;
  *(_BYTE *)(a1 + 12) = 0;
  if (a2 >= 5 && a3 <= 0)
  {
    unsigned __int16 v5 = uprv_malloc(2LL * a2);
    if (v5)
    {
      unsigned int v6 = v5;
      if (*(_BYTE *)(a1 + 12)) {
        uprv_free(*(void **)a1);
      }
      *(void *)a1 = v6;
      *(_DWORD *)(a1 + 8) = a2;
      *(_BYTE *)(a1 + 12) = 1;
    }
  }

  return a1;
}

BOOL icu::numparse::impl::SeriesMatcher::match( icu::numparse::impl::SeriesMatcher *this, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3, UErrorCode *a4)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  uint64_t v26 = 0LL;
  memset(v25, 0, sizeof(v25));
  memset(v24, 0, sizeof(v24));
  memset(v23, 0, sizeof(v23));
  sub_180944408(v23, (uint64_t)a3);
  int Offset = icu::StringSegment::getOffset(a2);
  unsigned int v9 = (uint64_t *)(*(uint64_t (**)(icu::numparse::impl::SeriesMatcher *))(*(void *)this + 56LL))(this);
  if ((unint64_t)v9 >= (*(uint64_t (**)(icu::numparse::impl::SeriesMatcher *))(*(void *)this + 64LL))(this))
  {
    BOOL v19 = 1LL;
    goto LABEL_20;
  }

  int v22 = Offset;
  while (1)
  {
    uint64_t v11 = *v9;
    int v12 = icu::StringSegment::getOffset(a2);
    if (icu::StringSegment::length(v13, a2)) {
      int v14 = (*(uint64_t (**)(uint64_t, icu::StringSegment *, icu::numparse::impl::ParsedNumber *, UErrorCode *))(*(void *)v11 + 24LL))( v11,  a2,  a3,  a4);
    }
    else {
      int v14 = 1;
    }
    int v15 = icu::StringSegment::getOffset(a2);
    int v16 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16LL))(v11);
    if (v15 != v12 && (v16 & 1) != 0) {
      goto LABEL_15;
    }
    if (v15 != v12)
    {
      if ((unint64_t)++v9 < (*(uint64_t (**)(icu::numparse::impl::SeriesMatcher *))(*(void *)this + 64LL))(this))
      {
        int v17 = icu::StringSegment::getOffset(a2);
        int v18 = *((_DWORD *)a3 + 18);
        if (v17 != v18 && v18 > v12) {
          icu::StringSegment::setOffset((uint64_t)a2, v18);
        }
      }

      goto LABEL_15;
    }

    if (!v16) {
      break;
    }
    ++v9;
LABEL_15:
  }

  icu::StringSegment::setOffset((uint64_t)a2, v22);
  sub_1809440D8((uint64_t)a3, (uint64_t)v23);
LABEL_19:
  BOOL v19 = v14 != 0;
LABEL_20:
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v25);
  icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v24);
  icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v23);
  return v19;
}

uint64_t sub_1809440D8(uint64_t a1, uint64_t a2)
{
  icu::number::impl::DecimalQuantity::operator=((icu::number::impl::DecimalQuantity *)a1, a2);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  icu::UnicodeString::operator=((UChar **)(a1 + 80), (UChar **)(a2 + 80));
  icu::UnicodeString::operator=((UChar **)(a1 + 144), (UChar **)(a2 + 144));
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  return a1;
}

uint64_t icu::numparse::impl::SeriesMatcher::smokeTest(uint64_t a1, uint64_t a2)
{
  int v4 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56LL))(a1);
  else {
    return (*(uint64_t (**)(void, uint64_t))(*(void *)*v4 + 32LL))(*v4, a2);
  }
}

uint64_t icu::numparse::impl::SeriesMatcher::postProcess(uint64_t a1, uint64_t a2)
{
  int v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56LL))(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64LL))(a1);
  if (v4 != (uint64_t *)result)
  {
    unsigned int v6 = (uint64_t *)result;
    do
    {
      uint64_t v7 = *v4++;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 40LL))(v7, a2);
    }

    while (v4 != v6);
  }

  return result;
}

uint64_t icu::numparse::impl::ArraySeriesMatcher::ArraySeriesMatcher(uint64_t this)
{
  *(void *)this = off_189728948;
  *(void *)(this + 8) = this + 24;
  *(_DWORD *)(this + 16) = 3;
  *(_BYTE *)(this + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(void *)this = off_189728948;
  *(void *)(this + 8) = this + 24;
  *(_DWORD *)(this + 16) = 3;
  *(_BYTE *)(this + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t icu::numparse::impl::ArraySeriesMatcher::ArraySeriesMatcher(uint64_t a1, uint64_t a2, int a3)
{
  unsigned __int16 v5 = *(const void **)a2;
  *(void *)a1 = off_189728948;
  *(void *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = *(_BYTE *)(a2 + 12);
  unsigned int v6 = *(const void **)a2;
  if (*(void *)a2 == a2 + 16)
  {
    *(void *)(a1 + 8) = a1 + 24;
    memcpy((void *)(a1 + 24), v6, 8LL * *(int *)(a2 + 8));
  }

  else
  {
    *(void *)a2 = a2 + 16;
    *(_DWORD *)(a2 + 8) = 3;
    *(_BYTE *)(a2 + 12) = 0;
  }

  *(_DWORD *)(a1 + 48) = a3;
  return a1;
}

{
  const void *v5;
  const void *v6;
  unsigned __int16 v5 = *(const void **)a2;
  *(void *)a1 = off_189728948;
  *(void *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = *(_BYTE *)(a2 + 12);
  unsigned int v6 = *(const void **)a2;
  if (*(void *)a2 == a2 + 16)
  {
    *(void *)(a1 + 8) = a1 + 24;
    memcpy((void *)(a1 + 24), v6, 8LL * *(int *)(a2 + 8));
  }

  else
  {
    *(void *)a2 = a2 + 16;
    *(_DWORD *)(a2 + 8) = 3;
    *(_BYTE *)(a2 + 12) = 0;
  }

  *(_DWORD *)(a1 + 48) = a3;
  return a1;
}

uint64_t icu::numparse::impl::ArraySeriesMatcher::length(icu::numparse::impl::ArraySeriesMatcher *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t icu::numparse::impl::ArraySeriesMatcher::begin(icu::numparse::impl::ArraySeriesMatcher *this)
{
  return *((void *)this + 1);
}

uint64_t icu::numparse::impl::ArraySeriesMatcher::end(icu::numparse::impl::ArraySeriesMatcher *this)
{
  return *((void *)this + 1) + 8LL * *((int *)this + 12);
}

uint64_t icu::numparse::impl::ArraySeriesMatcher::toString@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)"<");
}

void sub_18094438C(void **this)
{
  *this = off_189728948;
  if (*((_BYTE *)this + 20)) {
    uprv_free(this[1]);
  }
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)this);
}

void sub_1809443C8(void **this)
{
  *this = off_189728948;
  if (*((_BYTE *)this + 20)) {
    uprv_free(this[1]);
  }
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)this);
  operator delete(v2);
}

void *sub_180944408(void *a1, uint64_t a2)
{
  int v4 = icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)a1, a2);
  *((void *)v4 + 9) = *(void *)(a2 + 72);
  icu::UnicodeString::UnicodeString((icu::number::impl::DecimalQuantity *)((char *)v4 + 80), (UChar **)(a2 + 80));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 18), (UChar **)(a2 + 144));
  a1[26] = *(void *)(a2 + 208);
  return a1;
}

icu::numparse::impl::CombinedCurrencyMatcher *icu::numparse::impl::CombinedCurrencyMatcher::CombinedCurrencyMatcher( icu::numparse::impl::CombinedCurrencyMatcher *this, UChar **a2, const icu::DecimalFormatSymbols *a3, __int16 a4, UErrorCode *a5)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  *(void *)this = off_189728A50;
  icu::number::impl::CurrencySymbols::getCurrencySymbol( a2,  a5,  (icu::numparse::impl::CombinedCurrencyMatcher *)((char *)this + 16));
  icu::number::impl::CurrencySymbols::getIntlCurrencySymbol( a2,  (icu::numparse::impl::CombinedCurrencyMatcher *)((char *)this + 80));
  *((_BYTE *)this + 144) = (a4 & 0x2000) == 0;
  uint64_t v10 = 152LL;
  do
  {
    uint64_t v11 = (char *)this + v10;
    *(void *)uint64_t v11 = off_18971B688;
    *((_WORD *)v11 + 4) = 2;
    v10 += 64LL;
  }

  while (v11 + 64 != (char *)this + 664);
  uint64_t PatternForCurrencySpacing = (UChar **)icu::DecimalFormatSymbols::getPatternForCurrencySpacing( (uint64_t)a3,  2,  0,  (int *)a5);
  icu::UnicodeString::UnicodeString( (icu::numparse::impl::CombinedCurrencyMatcher *)((char *)this + 664),  PatternForCurrencySpacing);
  unsigned int v13 = (UChar **)icu::DecimalFormatSymbols::getPatternForCurrencySpacing((uint64_t)a3, 2, 1, (int *)a5);
  icu::UnicodeString::UnicodeString((icu::numparse::impl::CombinedCurrencyMatcher *)((char *)this + 728), v13);
  icu::Locale::Locale((icu::Locale *)v21, (uint64_t)a3 + 1936);
  int v14 = v22;
  *((void *)this + 99) = (char *)this + 805;
  *((_DWORD *)this + 20icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 40;
  *((_WORD *)this + 402) = 0;
  *((_DWORD *)this + 212) = 0;
  icu::CharString::append((icu::numparse::impl::CombinedCurrencyMatcher *)((char *)this + 792), v14, -1, a5);
  icu::Locale::~Locale((icu::Locale *)v21);
  uint64_t IsoCode = icu::number::impl::CurrencySymbols::getIsoCode((icu::number::impl::CurrencySymbols *)a2);
  __int16 v16 = *(_WORD *)(IsoCode + 4);
  *((_DWORD *)this + 2) = *(_DWORD *)IsoCode;
  *((_WORD *)this + 6) = v16;
  *((_WORD *)this + 7) = 0;
  if (!*((_BYTE *)this + 144))
  {
    uint64_t v17 = 0LL;
    int v18 = (icu::numparse::impl::CombinedCurrencyMatcher *)((char *)this + 152);
    do
    {
      icu::number::impl::CurrencySymbols::getPluralName((uint64_t)a2, v17, (int *)a5, (uint64_t)v21);
      icu::UnicodeString::operator=(v18, (icu::UnicodeString *)v21);
      icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v21);
      ++v17;
      int v18 = (icu::UnicodeString *)((char *)v18 + 64);
    }

    while (v17 != 8);
  }

  return this;
}

BOOL icu::numparse::impl::CombinedCurrencyMatcher::match( icu::numparse::impl::CombinedCurrencyMatcher *this, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3, UErrorCode *a4)
{
  if (*((_WORD *)a3 + 104)) {
    return 0LL;
  }
  int Offset = icu::StringSegment::getOffset(a2);
  int CommonPrefixLength = icu::StringSegment::getCommonPrefixLength( a2,  (icu::numparse::impl::CombinedCurrencyMatcher *)((char *)this + 728));
  int v12 = CommonPrefixLength;
  unsigned int v13 = *((unsigned __int16 *)this + 368);
  if ((v13 & 0x8000) != 0) {
    int v14 = (uint64_t *)*((unsigned int *)this + 185);
  }
  else {
    int v14 = (uint64_t *)(v13 >> 5);
  }
  if (CommonPrefixLength == (_DWORD)v14) {
    icu::StringSegment::adjustOffset((uint64_t)a2, CommonPrefixLength);
  }
  else {
LABEL_13:
  }
    uint64_t matched = icu::numparse::impl::CombinedCurrencyMatcher::matchCurrency(this, a2, a3, a4);
  if (*((_WORD *)a3 + 104))
  {
    if ((icu::numparse::impl::ParsedNumber::seenNumber(a3) & 1) == 0 && *((unsigned __int16 *)this + 336) >= 0x20u)
    {
      int v15 = icu::StringSegment::getCommonPrefixLength( a2,  (icu::numparse::impl::CombinedCurrencyMatcher *)((char *)this + 664));
      int v16 = v15;
      unsigned int v17 = *((unsigned __int16 *)this + 336);
      if ((v17 & 0x8000) != 0) {
        int v18 = (uint64_t *)*((unsigned int *)this + 169);
      }
      else {
        int v18 = (uint64_t *)(v17 >> 5);
      }
      if (v15 == (_DWORD)v18) {
        icu::StringSegment::adjustOffset((uint64_t)a2, v15);
      }
      return (matched & 1) != 0 || v16 == icu::StringSegment::length(v18, a2);
    }
  }

  else
  {
    icu::StringSegment::setOffset((uint64_t)a2, Offset);
  }

  return matched;
}

uint64_t icu::numparse::impl::CombinedCurrencyMatcher::matchCurrency( icu::numparse::impl::CombinedCurrencyMatcher *this, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3, UErrorCode *a4)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  unsigned int v8 = (uint64_t *)*((unsigned __int16 *)this + 12);
  else {
    int CaseSensitivePrefixLength = icu::StringSegment::getCaseSensitivePrefixLength( a2,  (icu::numparse::impl::CombinedCurrencyMatcher *)((char *)this + 16));
  }
  unsigned int v10 = icu::StringSegment::length(v8, a2);
  char v11 = CaseSensitivePrefixLength == v10;
  unsigned int v12 = *((unsigned __int16 *)this + 12);
  if ((v12 & 0x8000) != 0) {
    unsigned int v13 = *((_DWORD *)this + 7);
  }
  else {
    unsigned int v13 = v12 >> 5;
  }
  if (CaseSensitivePrefixLength == v13)
  {
    int v14 = *((_DWORD *)this + 2);
    *((_WORD *)a3 + 106) = *((_WORD *)this + 6);
    *((_DWORD *)a3 + 52) = v14;
    *((_WORD *)a3 + 107) = 0;
    int v15 = a2;
    int v16 = CaseSensitivePrefixLength;
LABEL_20:
    icu::StringSegment::adjustOffset((uint64_t)v15, v16);
    icu::numparse::impl::ParsedNumber::setCharsConsumed(a3, a2);
    return v11 & 1;
  }

  unsigned int v17 = (uint64_t *)*((unsigned __int16 *)this + 44);
  else {
    int CommonPrefixLength = icu::StringSegment::getCommonPrefixLength( a2,  (icu::numparse::impl::CombinedCurrencyMatcher *)((char *)this + 80));
  }
  char v11 = CaseSensitivePrefixLength == v10 || CommonPrefixLength == icu::StringSegment::length(v17, a2);
  else {
    int v19 = *((unsigned __int16 *)this + 44) >> 5;
  }
  if (CommonPrefixLength == v19)
  {
    int v20 = *((_DWORD *)this + 2);
    *((_WORD *)a3 + 106) = *((_WORD *)this + 6);
    *((_DWORD *)a3 + 52) = v20;
    *((_WORD *)a3 + 107) = 0;
    int v15 = a2;
    int v16 = CommonPrefixLength;
    goto LABEL_20;
  }

  if (*((_BYTE *)this + 144))
  {
    memset(v36, 0, sizeof(v36));
    icu::StringSegment::toTempUnicodeString(a2, (uint64_t)v36);
    uint64_t v34 = off_18970F400;
    *(void *)uint64_t v35 = 0xFFFFFFFF00000000LL;
    int v33 = 0;
    uprv_parseCurrency(*((char **)this + 99), (uint64_t)v36, (uint64_t)&v34, 0, &v33, (UChar *)a3 + 104, (int *)a4);
    if ((v11 & 1) != 0)
    {
      char v11 = 1;
    }

    else
    {
      int v31 = v33;
      char v11 = v31 == icu::StringSegment::length(v22, a2);
    }

    if (*(int *)a4 <= 0 && v35[0])
    {
      icu::StringSegment::adjustOffset((uint64_t)a2, v35[0]);
      icu::numparse::impl::ParsedNumber::setCharsConsumed(a3, a2);
    }

    icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v34);
    icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)v36);
  }

  else
  {
    uint64_t v23 = 0LL;
    int v24 = 0;
    do
    {
      int v25 = icu::StringSegment::getCommonPrefixLength( a2,  (icu::numparse::impl::CombinedCurrencyMatcher *)((char *)this + v23 + 152));
      unsigned int v26 = *(unsigned __int16 *)((char *)this + v23 + 160);
      if ((v26 & 0x8000) != 0) {
        BOOL v28 = v25 == *(_DWORD *)((char *)this + v23 + 164) && v25 > v24;
      }
      else {
        BOOL v28 = v25 == v26 >> 5 && v24 < v25;
      }
      if (v28) {
        int v24 = v25;
      }
      v11 |= v25 > 0;
      v23 += 64LL;
    }

    while (v23 != 512);
    if (v24 >= 1)
    {
      int v30 = *((_DWORD *)this + 2);
      *((_WORD *)a3 + 106) = *((_WORD *)this + 6);
      *((_DWORD *)a3 + 52) = v30;
      *((_WORD *)a3 + 107) = 0;
      int v15 = a2;
      int v16 = v24;
      goto LABEL_20;
    }
  }

  return v11 & 1;
}

uint64_t icu::numparse::impl::CombinedCurrencyMatcher::smokeTest()
{
  return 1LL;
}

uint64_t icu::numparse::impl::CombinedCurrencyMatcher::toString@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)"<");
}

void sub_180944A58(uint64_t a1)
{
  *(void *)a1 = off_189728A50;
  uint64_t v2 = (void *)*(unsigned __int8 *)(a1 + 804);
  if (*(_BYTE *)(a1 + 804)) {
    uprv_free(*(void **)(a1 + 792));
  }
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 728));
  icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)(a1 + 664));
  for (uint64_t i = 600LL; i != 88; i -= 64LL)
    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + i));
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + 80));
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)(a1 + 16));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_180944ACC(uint64_t a1)
{
  *(void *)a1 = off_189728A50;
  uint64_t v2 = (void *)*(unsigned __int8 *)(a1 + 804);
  if (*(_BYTE *)(a1 + 804)) {
    uprv_free(*(void **)(a1 + 792));
  }
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 728));
  icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)(a1 + 664));
  for (uint64_t i = 600LL; i != 88; i -= 64LL)
    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + i));
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + 80));
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)(a1 + 16));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
  icu::UMemory::operator delete(v7);
}

uint64_t sub_180944B44(uint64_t a1, uint64_t a2, icu::number::impl::Grouper *a3, char a4)
{
  v41[8] = *(UChar **)MEMORY[0x1895F89C0];
  *(void *)a1 = off_189728AD0;
  *(void *)(a1 + 16) = off_18971B688;
  unsigned int v8 = (UChar **)(a1 + 16);
  *(_WORD *)(a1 + 24) = 2;
  *(void *)(a1 + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = off_18971B688;
  *(_WORD *)(a1 + 88) = 2;
  *(void *)(a1 + 176) = 0LL;
  *(void *)(a1 + 184) = 0LL;
  *(void *)(a1 + 192) = 0LL;
  if ((a4 & 2) != 0)
  {
    icu::UnicodeString::operator=(v8, (UChar **)(a2 + 1096));
    unsigned int v9 = (UChar **)(a2 + 648);
  }

  else
  {
    unsigned int v9 = (UChar **)(a2 + 8);
    icu::UnicodeString::operator=(v8, (UChar **)(a2 + 72));
  }

  icu::UnicodeString::operator=((UChar **)(a1 + 80), v9);
  if ((a4 & 4) != 0) {
    int v10 = 10;
  }
  else {
    int v10 = 9;
  }
  if ((a4 & 4) != 0) {
    uint64_t v11 = 5LL;
  }
  else {
    uint64_t v11 = 3LL;
  }
  if ((a4 & 4) != 0) {
    unsigned int v12 = 6;
  }
  else {
    unsigned int v12 = 4;
  }
  *(void *)(a1 + 144) = icu::unisets::get(v10);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v41, (UChar **)(a1 + 80));
  int v13 = icu::unisets::chooseFrom(v41, v11, v12);
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v41);
  if (v13 < 0)
  {
    uint64_t v21 = (uint64_t *)*(unsigned __int16 *)(a1 + 88);
    if (v21 < 0x20)
    {
      *(void *)(a1 + 152) = icu::unisets::get(0);
    }

    else
    {
      int v22 = (icu::UnicodeSet *)icu::UMemory::operator new(v21, (icu::UMemory *)0xC8, v15);
      int v24 = v22;
      if (v22) {
        icu::UnicodeSet::UnicodeSet(v22);
      }
      unsigned int v25 = icu::UnicodeString::char32At(v23, (icu::UnicodeString *)(a1 + 80), 0);
      icu::UnicodeSet::add(v24, v25);
      icu::UnicodeSet::freeze(v24);
      *(void *)(a1 + 152) = v24;
      sub_180944E48((icu::UnicodeSet **)(a1 + 176), v24, v26);
    }

    uint64_t v29 = (icu::UnicodeSet *)icu::UMemory::operator new(v28, (icu::UMemory *)0xC8, v27);
    int v30 = (icu::UVector **)v29;
    if (v29) {
      icu::UnicodeSet::UnicodeSet(v29);
    }
    icu::UnicodeSet::addAll(v30, *(const icu::UnicodeSet **)(a1 + 144));
    icu::UnicodeSet::addAll(v30, *(const icu::UnicodeSet **)(a1 + 152));
    icu::UnicodeSet::freeze((icu::UnicodeSet *)v30);
    *(void *)(a1 + 16icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v30;
    sub_180944E48((icu::UnicodeSet **)(a1 + 184), (icu::UnicodeSet *)v30, v31);
    int v19 = 0LL;
  }

  else
  {
    int v16 = icu::unisets::get(v13);
    uint64_t v17 = *(void *)(a1 + 144);
    *(void *)(a1 + 152) = v16;
    *(void *)(a1 + 16icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v17;
    if ((a4 & 4) != 0) {
      int v18 = 22;
    }
    else {
      int v18 = 23;
    }
    int v19 = icu::unisets::get(v18);
  }

  *(void *)(a1 + 168) = v19;
  UChar32 v32 = *(_DWORD *)(a2 + 1928);
  if (v32 == -1 || !u_isdigit(*(_DWORD *)(a2 + 1928)) || u_digit(v32, 10))
  {
    int v33 = (_OWORD *)icu::UMemory::operator new[]((icu::UMemory *)0x290, v20);
    if (v33)
    {
      *int v33 = xmmword_180A37A30;
      uint64_t v34 = (char *)(v33 + 1);
      uint64_t v35 = v33 + 1;
      do
      {
        *(void *)uint64_t v35 = off_18971B688;
        *((_WORD *)v35 + 4) = 2;
        v35 += 4;
      }

      while (v35 != v33 + 41);
    }

    else
    {
      uint64_t v34 = 0LL;
    }

    sub_18092E048((void **)(a1 + 192), v34);
    uint64_t v36 = 0LL;
    uint64_t v37 = (UChar **)(a2 + 264);
    uint64_t v38 = a2 + 1096;
    do
    {
      if (v36) {
        int v39 = (UChar **)(v38 + v36);
      }
      else {
        int v39 = v37;
      }
      icu::UnicodeString::operator=((UChar **)&v34[v36], v39);
      v36 += 64LL;
    }

    while (v36 != 640);
  }

  *(_BYTE *)(a1 + 8) = (a4 & 8) != 0;
  *(_BYTE *)(a1 + 9) = (a4 & 0x20) != 0;
  *(_BYTE *)(a1 + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = (a4 & 0x10) != 0;
  *(_WORD *)(a1 + 12) = icu::number::impl::Grouper::getPrimary(a3);
  *(_WORD *)(a1 + 14) = icu::number::impl::Grouper::getSecondary(a3);
  return a1;
}

void sub_180944E48(icu::UnicodeSet **a1@<X0>, icu::UnicodeSet *a2@<X1>, void *a3@<X8>)
{
  unsigned __int16 v5 = *a1;
  if (v5)
  {
    unsigned int v6 = icu::UnicodeSet::~UnicodeSet(a3, v5);
    icu::UMemory::operator delete(v6);
  }

  *a1 = a2;
}

uint64_t sub_180944E80(uint64_t a1, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3)
{
  return sub_180944E88(a1, a2, a3, 0);
}

uint64_t sub_180944E88(uint64_t a1, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *this, int a4)
{
  unsigned __int16 v5 = this;
  uint64_t v93 = *MEMORY[0x1895F89C0];
  char v8 = icu::numparse::impl::ParsedNumber::seenNumber(this);
  if (a4 || (v8 & 1) == 0)
  {
    int Offset = icu::StringSegment::getOffset(a2);
    uint64_t v81 = 0LL;
    memset(v80, 0, sizeof(v80));
    icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v80);
    BYTE8(v80[0]) = 1;
    __int128 v89 = 0u;
    uint64_t v92 = 0LL;
    __int128 v91 = 0u;
    __int128 v90 = 0u;
    int v88 = (UChar *)off_18971B688;
    LOWORD(v89) = 2;
    __int128 v84 = 0u;
    uint64_t v87 = 0LL;
    __int128 v86 = 0u;
    __int128 v85 = 0u;
    __int128 v83 = (UChar *)off_18971B688;
    LOWORD(v84) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)&v88);
    icu::UnicodeString::setToBogus((icu::UnicodeString *)&v83);
    if ((int)icu::StringSegment::length(v11, a2) < 1)
    {
      unsigned int v75 = 0;
      unsigned int v79 = 0;
      unsigned int v56 = 0;
      int v44 = 0;
      int v12 = 0;
      int v57 = -1;
      int v45 = -1;
      int v46 = -1;
      goto LABEL_152;
    }

    int v69 = Offset;
    int v70 = a4;
    int v12 = 0;
    uint64_t v13 = 0LL;
    __int128 v73 = (UChar **)(a1 + 80);
    uint64_t v71 = v5;
    unsigned __int8 v72 = (icu::UnicodeString *)(a1 + 16);
    int v77 = 0;
    int v78 = -1;
    unsigned int v75 = 0;
    int v76 = -1;
    int v74 = -1;
LABEL_6:
    uint64_t v14 = v13;
    int v15 = v12;
    unsigned int CodePoint = icu::StringSegment::getCodePoint(a2);
    if (u_isdigit(CodePoint))
    {
      int v17 = CodePoint < 0x10000 ? 1 : 2;
      icu::StringSegment::adjustOffset((uint64_t)a2, v17);
      char v18 = u_digit(CodePoint, 10);
      if (v18 != -1)
      {
        BOOL v19 = 0;
        if ((v18 & 0x80) == 0)
        {
          LOBYTE(v2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v18;
          goto LABEL_43;
        }

        unsigned int v79 = v14;
LABEL_38:
        if ((v84 & 1) != 0
          && *(unsigned __int16 *)(a1 + 88) >= 0x20u
          && ((int CommonPrefixLength = icu::StringSegment::getCommonPrefixLength(a2, (const icu::UnicodeString *)v73), v19)
            ? (BOOL v19 = 1)
            : (BOOL v19 = CommonPrefixLength == icu::StringSegment::length(v28, a2)),
              *(__int16 *)(a1 + 88) < 0 ? (int v31 = *(_DWORD *)(a1 + 92)) : (int v31 = *(unsigned __int16 *)(a1 + 88) >> 5),
              CommonPrefixLength == v31))
        {
          icu::UnicodeString::operator=(&v83, v73);
          int v32 = 1;
        }

        else
        {
          int v32 = 0;
        }

        char v33 = v89;
        if ((v89 & 1) != 0)
        {
          BOOL v36 = 0;
        }

        else
        {
          int v35 = icu::StringSegment::getCommonPrefixLength(a2, (const icu::UnicodeString *)&v88);
          BOOL v19 = v19 || v35 == icu::StringSegment::length(v34, a2);
          char v33 = v89;
          if ((v89 & 0x8000u) == 0LL) {
            int v37 = (unsigned __int16)v89 >> 5;
          }
          else {
            int v37 = DWORD1(v89);
          }
          BOOL v36 = v35 == v37;
        }

        if (!*(_BYTE *)(a1 + 9) && (v33 & 1) != 0 && (v84 & 1) != 0 && *(unsigned __int16 *)(a1 + 24) >= 0x20u)
        {
          int v39 = icu::StringSegment::getCommonPrefixLength(a2, v72);
          BOOL v19 = v19 || v39 == icu::StringSegment::length(v38, a2);
          int v40 = *(__int16 *)(a1 + 24) < 0 ? *(_DWORD *)(a1 + 28) : *(unsigned __int16 *)(a1 + 24) >> 5;
          if (v39 == v40)
          {
            icu::UnicodeString::operator=(&v88, (UChar **)v72);
            goto LABEL_78;
          }
        }

        if (v36)
        {
LABEL_78:
          int v41 = 1;
        }

        else if ((v84 & 1) != 0 && icu::UnicodeSet::contains(*(icu::UnicodeSet **)(a1 + 152), CodePoint))
        {
          icu::UnicodeString::UnicodeString((uint64_t)v82, CodePoint);
          icu::UnicodeString::operator=((icu::UnicodeString *)&v83, (icu::UnicodeString *)v82);
          icu::UnicodeString::~UnicodeString(v42, (icu::UnicodeString *)v82);
          int v41 = 0;
          int v32 = 1;
        }

        else
        {
          int v41 = 0;
        }

        if (!*(_BYTE *)(a1 + 9)
          && (v89 & 1) != 0
          && (v84 & 1) != 0
          && icu::UnicodeSet::contains(*(icu::UnicodeSet **)(a1 + 144), CodePoint))
        {
          icu::UnicodeString::UnicodeString((uint64_t)v82, CodePoint);
          icu::UnicodeString::operator=((icu::UnicodeString *)&v88, (icu::UnicodeString *)v82);
          icu::UnicodeString::~UnicodeString(v43, (icu::UnicodeString *)v82);
          int v41 = 1;
          int v45 = v76;
          int v44 = v77;
          goto LABEL_89;
        }

        int v45 = v76;
        int v44 = v77;
        if ((v41 | v32) == 1)
        {
LABEL_89:
          int v46 = v78;
          if (!v32 || !*(_BYTE *)(a1 + 10))
          {
            if (v44 == 2) {
              char v47 = v41;
            }
            else {
              char v47 = 0;
            }
            if ((v47 & 1) != 0)
            {
              int v44 = 2;
            }

            else
            {
              if (*(_BYTE *)(a1 + 8))
              {
                uint64_t v48 = v79;
                if (v45 == 1)
                {
                  BOOL v49 = v78 == *(__int16 *)(a1 + 14);
                }

                else if (v45)
                {
                  BOOL v49 = 1;
                }

                else
                {
                  BOOL v49 = v78 <= *(__int16 *)(a1 + 14);
                }

                BOOL v52 = v44 != 1 || v15 == *(__int16 *)(a1 + 12);
              }

              else
              {
                BOOL v49 = v45 != 1 || v78 != 1;
                BOOL v52 = v44 != 1 || v15 != 1;
                uint64_t v48 = v79;
              }

              if (v49 && ((v32 ^ 1 | v52) & 1) != 0)
              {
                if (!*(_BYTE *)(a1 + 8) || v15 || v44 != 1)
                {
                  if (v32) {
                    int v53 = -1;
                  }
                  else {
                    int v53 = v44;
                  }
                  int v76 = v53;
                  uint64_t v13 = v48;
                  if (v15) {
                    uint64_t v13 = icu::StringSegment::getOffset(a2);
                  }
                  if (v41)
                  {
                    if ((v89 & 0x8000u) == 0LL) {
                      int v54 = (unsigned __int16)v89 >> 5;
                    }
                    else {
                      int v54 = DWORD1(v89);
                    }
                    icu::StringSegment::adjustOffset((uint64_t)a2, v54);
                    int v12 = 0;
                    uint64_t v30 = 1LL;
                  }

                  else
                  {
                    if ((v84 & 0x8000u) == 0LL) {
                      int v55 = (unsigned __int16)v84 >> 5;
                    }
                    else {
                      int v55 = DWORD1(v84);
                    }
                    icu::StringSegment::adjustOffset((uint64_t)a2, v55);
                    int v12 = 0;
                    uint64_t v30 = 2LL;
                  }

                  int v77 = v30;
                  int v78 = v15;
                  int v74 = v48;
                  goto LABEL_137;
                }

                unsigned int v79 = v48;
                int v15 = 0;
              }

              else
              {
                BOOL v58 = v15 == 0;
                char v59 = v41 & v58;
                if ((v41 & v58) != 0) {
                  int v60 = 0;
                }
                else {
                  int v60 = v15;
                }
                unsigned int v79 = v48;
                if ((v59 & 1) != 0 || !*(_BYTE *)(a1 + 8))
                {
                  int v15 = v60;
                }

                else
                {
                  icu::number::impl::DecimalQuantity::clear((void **)v80);
                  int v46 = v78;
                  BYTE8(v80[0]) = 1;
                }
              }
            }
          }
        }

        else
        {
          int v46 = v78;
        }

        unsigned int v56 = v19;
        int v12 = v15;
        unsigned __int16 v5 = v71;
        int Offset = v69;
        a4 = v70;
LABEL_151:
        int v57 = v74;
LABEL_152:
        if (v44 != 2 && !v12)
        {
          int v12 = v46;
          icu::StringSegment::setOffset((uint64_t)a2, v79);
          unsigned int v56 = 1;
          unsigned int v79 = v57;
          int v44 = v45;
          int v57 = -1;
          int v46 = 1;
          int v45 = 0;
        }

        if (*(_BYTE *)(a1 + 8))
        {
          if (v45 == 1)
          {
            uint64_t v61 = v46 == *(__int16 *)(a1 + 14);
          }

          else if (v45)
          {
            uint64_t v61 = 1LL;
          }

          else
          {
            uint64_t v61 = v46 <= *(__int16 *)(a1 + 14);
          }

          if (v44 == 1)
          {
            BOOL v63 = v12 != *(__int16 *)(a1 + 12);
            if (!(_DWORD)v61)
            {
LABEL_180:
              uint64_t v9 = 1LL;
              BYTE8(v80[0]) = 1;
              if ((v56 & 1) == 0) {
LABEL_181:
              }
                uint64_t v9 = icu::StringSegment::length((uint64_t *)v61, a2) == 0;
LABEL_182:
              icu::StringSegment::setOffset((uint64_t)a2, Offset);
LABEL_191:
              icu::UnicodeString::~UnicodeString(v64, (icu::UnicodeString *)&v83);
              icu::UnicodeString::~UnicodeString(v66, (icu::UnicodeString *)&v88);
              icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v80);
              return v9;
            }

            goto LABEL_176;
          }

LABEL_174:
          if (v44 == 2) {
            goto LABEL_177;
          }
          BOOL v63 = 0;
          if (!(_DWORD)v61) {
            goto LABEL_180;
          }
LABEL_176:
          if (v63) {
            goto LABEL_180;
          }
LABEL_177:
          uint64_t v61 = BYTE8(v80[0]);
          if (!BYTE8(v80[0]))
          {
            icu::number::impl::DecimalQuantity::adjustMagnitude((icu::number::impl::DecimalQuantity *)v80, -v75);
            if (a4 && icu::StringSegment::getOffset(a2) != Offset)
            {
              if (!icu::number::impl::DecimalQuantity::fitsInLong((icu::number::impl::DecimalQuantity *)v80, 0)
                || (uint64_t v68 = icu::number::impl::DecimalQuantity::toLong((icu::number::impl::DecimalQuantity *)v80, 0),
                    v68 > 0x7FFFFFFF)
                || icu::number::impl::DecimalQuantity::adjustMagnitude(v5, v68 * a4))
              {
                if (a4 == -1)
                {
                  icu::number::impl::DecimalQuantity::clear((void **)v5);
                }

                else
                {
                  *((_BYTE *)v5 + 8) = 1;
                  *((_DWORD *)v5 + 19) |= 0x80u;
                }
              }
            }

            else
            {
              icu::number::impl::DecimalQuantity::operator=(v5, (uint64_t)v80);
            }

            if ((v84 & 1) == 0) {
              *((_DWORD *)v5 + 19) |= 0x20u;
            }
            icu::numparse::impl::ParsedNumber::setCharsConsumed(v5, a2);
            else {
              uint64_t v9 = 1LL;
            }
            goto LABEL_191;
          }

          if ((v56 & 1) == 0) {
            goto LABEL_181;
          }
          uint64_t v9 = 1LL;
          goto LABEL_182;
        }

        if (v45 == 1 && v46 == 1)
        {
          icu::StringSegment::setOffset((uint64_t)a2, v57);
          if (v12 == -1)
          {
LABEL_173:
            uint64_t v61 = 1LL;
            goto LABEL_174;
          }

          int v62 = ~v12;
        }

        else
        {
          uint64_t v61 = 1LL;
          if (v44 != 1 || v12 != 1 || !(v46 | v45)) {
            goto LABEL_174;
          }
          icu::StringSegment::setOffset((uint64_t)a2, v79);
          unsigned int v56 = 1;
          int v62 = -1;
        }

        icu::number::impl::DecimalQuantity::adjustMagnitude((icu::number::impl::DecimalQuantity *)v80, v62);
        icu::number::impl::DecimalQuantity::truncate((icu::number::impl::DecimalQuantity *)v80);
        goto LABEL_173;
      }
    }

    unsigned int v79 = v14;
    if (!*(void *)(a1 + 192))
    {
      BOOL v19 = 0;
      goto LABEL_38;
    }

    uint64_t v21 = 0LL;
    uint64_t v20 = 0LL;
    BOOL v19 = 0;
    while (1)
    {
      uint64_t v22 = *(void *)(a1 + 192);
      if (!icu::StringSegment::startsWith(a2, 38646)) {
        break;
      }
      uint64_t v23 = *(void *)(a1 + 192);
      unsigned int v24 = *(unsigned __int16 *)(v23 + 8);
      if (*(__int16 *)(v23 + 8) < 0)
      {
        if (!*(_DWORD *)(v23 + 12)) {
          break;
        }
      }

      else if (!(v24 >> 5))
      {
        break;
      }

      unsigned int v25 = (v24 & 2) != 0 ? (_WORD *)(v23 + 10) : *(_WORD **)(v23 + 24);
      if (*v25 != 12295) {
        break;
      }
      int v26 = 1;
LABEL_27:
      else {
        unint64_t v27 = (uint64_t *)(*(unsigned __int16 *)(v22 + v21 + 8) >> 5);
      }
      if (v26 == (_DWORD)v27)
      {
        icu::StringSegment::adjustOffset((uint64_t)a2, v26);
        uint64_t v14 = v79;
LABEL_43:
        if (BYTE8(v80[0]))
        {
          BYTE8(v80[0]) = 0;
          icu::number::impl::DecimalQuantity::clear((void **)v80);
        }

        icu::number::impl::DecimalQuantity::appendDigit((icu::number::impl::DecimalQuantity *)v80, (char)v20, 0, 1);
        int v12 = v15 + 1;
        if ((v84 & 1) != 0) {
          uint64_t v30 = v75;
        }
        else {
          uint64_t v30 = v75 + 1;
        }
        unsigned int v75 = v30;
        uint64_t v13 = v14;
LABEL_137:
        if ((int)icu::StringSegment::length((uint64_t *)v30, a2) <= 0)
        {
          unsigned int v56 = v19;
          unsigned int v79 = v13;
          unsigned __int16 v5 = v71;
          int Offset = v69;
          a4 = v70;
          int v45 = v76;
          int v44 = v77;
          int v46 = v78;
          goto LABEL_151;
        }

        goto LABEL_6;
      }

      BOOL v19 = v19 || v26 == icu::StringSegment::length(v27, a2);
LABEL_34:
      ++v20;
      v21 += 64LL;
      if (v20 == 10) {
        goto LABEL_38;
      }
    }

    int v26 = icu::StringSegment::getCommonPrefixLength(a2, (const icu::UnicodeString *)(v22 + v21));
    goto LABEL_27;
  }

  return 0LL;
}

BOOL sub_1809457A4(const icu::UnicodeSet **a1, icu::StringSegment *this)
{
  if (!a1[24])
  {
    unsigned int v6 = a1[21];
    if (v6) {
      return icu::StringSegment::startsWith(this, v6);
    }
  }

  if (icu::StringSegment::startsWith(this, a1[20])) {
    return 1LL;
  }
  UChar32 CodePoint = icu::StringSegment::getCodePoint(this);
  if (!a1[24]) {
    return 0LL;
  }
  if (icu::StringSegment::startsWith(this, 38646))
  {
    uint64_t v7 = a1[24];
    __int16 v8 = *((_WORD *)v7 + 4);
    if ((v8 & 0x80000000) == 0)
    {
      if ((v8 & 0xFFE0) != 0x20) {
        goto LABEL_18;
      }
LABEL_14:
      if ((v8 & 2) != 0) {
        uint64_t v9 = (_WORD *)((char *)v7 + 10);
      }
      else {
        uint64_t v9 = (_WORD *)*((void *)v7 + 3);
      }
      if (*v9 == 12295) {
        return 1LL;
      }
      goto LABEL_18;
    }

    if (*((_DWORD *)v7 + 3) == 1) {
      goto LABEL_14;
    }
  }

uint64_t sub_1809458CC@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)"<");
}

void sub_1809458DC(uint64_t a1)
{
  *(void *)a1 = off_189728AD0;
  uint64_t v2 = (icu::UnicodeString *)(a1 + 16);
  sub_1807CCEEC((uint64_t *)(a1 + 192));
  sub_180945990((icu::UnicodeSet **)(a1 + 184), v3);
  sub_180945990((icu::UnicodeSet **)(a1 + 176), v4);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)(a1 + 80));
  icu::UnicodeString::~UnicodeString(v6, v2);
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_180945934(uint64_t a1)
{
  *(void *)a1 = off_189728AD0;
  uint64_t v2 = (icu::UnicodeString *)(a1 + 16);
  sub_1807CCEEC((uint64_t *)(a1 + 192));
  sub_180945990((icu::UnicodeSet **)(a1 + 184), v3);
  sub_180945990((icu::UnicodeSet **)(a1 + 176), v4);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)(a1 + 80));
  icu::UnicodeString::~UnicodeString(v6, v2);
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
  icu::UMemory::operator delete(v7);
}

icu::UnicodeSet **sub_180945990@<X0>(icu::UnicodeSet **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (v3)
  {
    int v4 = icu::UnicodeSet::~UnicodeSet(a2, v3);
    icu::UMemory::operator delete(v4);
  }

  return a1;
}

uint64_t icu::numparse::impl::NumberParserImpl::createSimpleParser( icu::numparse::impl::NumberParserImpl *this, const icu::Locale *a2, const icu::UnicodeString *a3, int a4, UErrorCode *a5)
{
  uint64_t v5 = MEMORY[0x1895F8858](this);
  BOOL v52 = v6;
  unsigned int v8 = v7;
  unint64_t v10 = (UChar **)v9;
  uint64_t v11 = (const icu::Locale *)v5;
  uint64_t v97 = (uint64_t *)*MEMORY[0x1895F89C0];
  unint64_t v12 = (icu::numparse::impl::NumberParserImpl *)icu::UMemory::operator new(v97, (icu::UMemory *)0x1460, v9);
  uint64_t v13 = (uint64_t)v12;
  if (v12) {
    icu::numparse::impl::NumberParserImpl::NumberParserImpl(v12, v8);
  }
  bzero(v96, 0xB48uLL);
  icu::DecimalFormatSymbols::DecimalFormatSymbols((icu::DecimalFormatSymbols *)v96, v11, v52);
  icu::numparse::impl::IgnorablesMatcher::IgnorablesMatcher((icu::numparse::impl::IgnorablesMatcher *)&v90, v8);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 128), (icu::UnicodeString *)v91);
  *(void *)(v13 + 192) = v91[8];
  __int128 v90 = off_189728C88;
  icu::UnicodeString::~UnicodeString(off_189728C88, (icu::UnicodeString *)v91);
  bzero(&v90, 0xB48uLL);
  icu::DecimalFormatSymbols::DecimalFormatSymbols((icu::DecimalFormatSymbols *)&v90, v11, v52);
  icu::UnicodeString::UnicodeString((uint64_t)&v59, (uint64_t)"I");
  char v94 = 1;
  icu::UnicodeString::operator=(&v92, &v59);
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v59);
  icu::UnicodeString::UnicodeString((uint64_t)&v59, (uint64_t)"I");
  char v95 = 1;
  icu::UnicodeString::operator=(&v93, &v59);
  icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v59);
  uint64_t v89 = 0LL;
  memset(v88, 0, sizeof(v88));
  __int128 v87 = 0u;
  __int128 v86 = 0u;
  __int128 v85 = 0u;
  __int128 v84 = 0u;
  memset(v83, 0, sizeof(v83));
  unsigned int v56 = "I";
  icu::CurrencyUnit::CurrencyUnit(v57, &v56, v52);
  icu::number::impl::CurrencySymbols::CurrencySymbols((uint64_t)v83, v57, (uint64_t)v11, (uint64_t)&v90, v52);
  icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)v57);
  uint64_t v82 = 0LL;
  memset(v81, 0, sizeof(v81));
  sub_18091E880((uint64_t)v81);
  icu::number::impl::PatternParser::parseToPatternInfo(v10, (const icu::UnicodeString *)v81, v52, v16);
  v55[3] = v11;
  v55[0] = v83;
  v55[1] = v96;
  v55[2] = v13 + 120;
  v55[4] = v8;
  icu::numparse::impl::AffixTokenMatcherWarehouse::AffixTokenMatcherWarehouse(&v59, v55);
  sub_180946360(v13 + 3856, (uint64_t)&v59);
  sub_180947B54((uint64_t)&v59);
  sub_180942A68(&v59, v13 + 3856);
  sub_180946460(v13 + 2312, (uint64_t)&v59);
  unint64_t v17 = 960LL;
  do
  {
    char v18 = &(&v59)[v17 / 8];
    *(void *)&v76[v17 + 80] = &unk_1897287D0;
    if (v76[v17 + 148]) {
      uprv_free(v18[69]);
    }
    v18[62] = (UChar *)off_189728948;
    if (*((_BYTE *)v18 + 516)) {
      uprv_free(*(void **)&v76[v17 + 88]);
    }
    v17 -= 80LL;
  }

  while (v17);
  sub_180942CC0( v13 + 2312,  (uint64_t)v81,  v13,  (icu::numparse::impl::SymbolMatcher *)(v13 + 120),  (icu::numparse::impl::AffixTokenMatcherWarehouse *)v8,  (int *)v52);
  uint64_t v53 = icu::number::impl::Grouper::forStrategy(2);
  int v54 = v19;
  icu::number::impl::Grouper::setLocaleData( (icu::number::impl::Grouper *)&v53,  (const icu::number::impl::ParsedPatternInfo *)v81,  v11);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16LL))(v13, v13 + 120);
  sub_180944E7C(&v59, v96, &v53, v8);
  *(void *)(v13 + 784) = v60;
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 792), (icu::UnicodeString *)v61);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 856), (icu::UnicodeString *)&v63);
  __int128 v20 = v65[1];
  *(_OWORD *)(v13 + 92icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v65[0];
  *(_OWORD *)(v13 + 936) = v20;
  sub_180947C10((icu::UnicodeSet **)(v13 + 952), &v66, v21);
  sub_180947C10((icu::UnicodeSet **)(v13 + 960), &v67, v22);
  sub_180947C50((void **)(v13 + 968), v68);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16LL))(v13, v13 + 776);
  char v59 = (UChar *)off_189728AD0;
  sub_1807CCEEC((uint64_t *)v68);
  if (v67)
  {
    unsigned int v24 = icu::UnicodeSet::~UnicodeSet(v23, v67);
    icu::UMemory::operator delete(v24);
  }

  if (v66)
  {
    unsigned int v25 = icu::UnicodeSet::~UnicodeSet(v23, v66);
    icu::UMemory::operator delete(v25);
  }

  icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v63);
  icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v61);
  icu::numparse::impl::MinusSignMatcher::MinusSignMatcher((icu::numparse::impl::MinusSignMatcher *)&v59, v96, 0);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 288), (icu::UnicodeString *)&v60);
  *(void *)(v13 + 352) = v62;
  *(_BYTE *)(v13 + 36icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v63;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16LL))(v13, v13 + 280);
  char v59 = (UChar *)off_189728C88;
  icu::numparse::impl::PlusSignMatcher::PlusSignMatcher((icu::numparse::impl::PlusSignMatcher *)&v59, v96, 0);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 696), (icu::UnicodeString *)&v60);
  *(void *)(v13 + 76icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v62;
  *(_BYTE *)(v13 + 768) = v63;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16LL))(v13, v13 + 688);
  char v59 = (UChar *)off_189728C88;
  icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v60);
  icu::numparse::impl::PercentMatcher::PercentMatcher((icu::numparse::impl::PercentMatcher *)&v59, v96);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 536), (icu::UnicodeString *)&v60);
  *(void *)(v13 + 60icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v62;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16LL))(v13, v13 + 528);
  char v59 = (UChar *)off_189728C88;
  icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v60);
  icu::numparse::impl::PermilleMatcher::PermilleMatcher((icu::numparse::impl::PermilleMatcher *)&v59, v96);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 616), (icu::UnicodeString *)&v60);
  *(void *)(v13 + 68icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v62;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16LL))(v13, v13 + 608);
  char v59 = (UChar *)off_189728C88;
  icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)&v60);
  sub_180948AE0((uint64_t)&v59, (uint64_t)v96);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 376), (icu::UnicodeString *)&v60);
  *(void *)(v13 + 44icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v62;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16LL))(v13, v13 + 368);
  char v59 = (UChar *)off_189728C88;
  icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)&v60);
  sub_1809489FC((uint64_t)&v59, (uint64_t)v96);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 208), (icu::UnicodeString *)&v60);
  *(void *)(v13 + 272) = v62;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16LL))(v13, v13 + 200);
  char v59 = (UChar *)off_189728C88;
  icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)&v60);
  icu::UnicodeString::UnicodeString((uint64_t)v58, (uint64_t)"@");
  sub_180948B24((uint64_t)&v59, v58);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 456), (icu::UnicodeString *)&v60);
  *(void *)(v13 + 52icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v62;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16LL))(v13, v13 + 448);
  char v59 = (UChar *)off_189728C88;
  icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)&v60);
  icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)v58);
  sub_180948378(&v59, v96, &v53);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 984), (icu::UnicodeString *)&v60);
  *(void *)(v13 + 1056) = v63;
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 1064), (icu::UnicodeString *)v64);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 1128), (icu::UnicodeString *)((char *)v65 + 8));
  *(_OWORD *)(v13 + 1192) = v69;
  *(_OWORD *)(v13 + 1208) = v70;
  sub_180947C10((icu::UnicodeSet **)(v13 + 1224), &v71, v34);
  sub_180947C10((icu::UnicodeSet **)(v13 + 1232), &v72, v35);
  sub_180947C50((void **)(v13 + 1240), v73);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 1256), (icu::UnicodeString *)v74);
  *(void *)(v13 + 132icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v74[8];
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 1328), (icu::UnicodeString *)v75);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 1392), (icu::UnicodeString *)v76);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16LL))(v13, v13 + 976);
  char v59 = (UChar *)off_189728C08;
  icu::UnicodeString::~UnicodeString(off_189728C08, (icu::UnicodeString *)v76);
  icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)v75);
  v73[1] = off_189728C88;
  icu::UnicodeString::~UnicodeString(v37, (icu::UnicodeString *)v74);
  int v62 = off_189728AD0;
  sub_1807CCEEC((uint64_t *)v73);
  if (v72)
  {
    int v39 = icu::UnicodeSet::~UnicodeSet(v38, v72);
    icu::UMemory::operator delete(v39);
  }

  if (v71)
  {
    int v40 = icu::UnicodeSet::~UnicodeSet(v38, v71);
    icu::UMemory::operator delete(v40);
  }

  icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)((char *)v65 + 8));
  icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)v64);
  icu::UnicodeString::~UnicodeString(v42, (icu::UnicodeString *)&v60);
  icu::numparse::impl::CombinedCurrencyMatcher::CombinedCurrencyMatcher( (icu::numparse::impl::CombinedCurrencyMatcher *)&v59,  (const icu::number::impl::CurrencySymbols *)v83,  (const icu::DecimalFormatSymbols *)v96,  v8,  v52);
  *(void *)(v13 + 1464) = v60;
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 1472), (icu::UnicodeString *)v61);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 1536), (icu::UnicodeString *)&v63);
  *(_BYTE *)(v13 + 160icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v65[0];
  for (uint64_t i = 201LL; i != 265; i += 8LL)
    icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + i * 8), (icu::UnicodeString *)&(&v59)[i - 91]);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 2120), (icu::UnicodeString *)v77);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 2184), (icu::UnicodeString *)v78);
  icu::CharString::operator=(v13 + 2248, (uint64_t)&v79);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16LL))(v13, v13 + 1456);
  char v59 = (UChar *)off_189728A50;
  unint64_t v44 = v80;
  if (v80) {
    uprv_free(v79);
  }
  icu::UnicodeString::~UnicodeString((void *)v44, (icu::UnicodeString *)v78);
  icu::UnicodeString::~UnicodeString(v45, (icu::UnicodeString *)v77);
  for (uint64_t j = 75LL; j != 11; j -= 8LL)
    icu::UnicodeString::~UnicodeString(v46, (icu::UnicodeString *)&(&v59)[j]);
  icu::UnicodeString::~UnicodeString(v46, (icu::UnicodeString *)&v63);
  icu::UnicodeString::~UnicodeString(v48, (icu::UnicodeString *)v61);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16LL))(v13, v13 + 5176);
  *(_BYTE *)(v13 + 112) = 1;
  sub_18091E95C((void **)v81);
  icu::UnicodeString::~UnicodeString(v49, (icu::UnicodeString *)((char *)&v88[4] + 8));
  icu::UnicodeString::~UnicodeString(v50, (icu::UnicodeString *)((char *)v88 + 8));
  if (BYTE4(v85)) {
    uprv_free(*((void **)&v84 + 1));
  }
  icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)((char *)v83 + 8));
  icu::DecimalFormatSymbols::~DecimalFormatSymbols((icu::DecimalFormatSymbols *)&v90);
  icu::DecimalFormatSymbols::~DecimalFormatSymbols((icu::DecimalFormatSymbols *)v96);
  return v13;
}

uint64_t sub_180946360(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 16), (icu::UnicodeString *)(a2 + 16));
  *(void *)(a1 + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 104), (icu::UnicodeString *)(a2 + 104));
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 192), (icu::UnicodeString *)(a2 + 192));
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 272), (icu::UnicodeString *)(a2 + 272));
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 360), (icu::UnicodeString *)(a2 + 360));
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 424), (icu::UnicodeString *)(a2 + 424));
  *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
  for (uint64_t i = 496LL; i != 1008; i += 64LL)
    icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + i), (icu::UnicodeString *)(a2 + i));
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 1008), (icu::UnicodeString *)(a2 + 1008));
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 1072), (icu::UnicodeString *)(a2 + 1072));
  icu::CharString::operator=(a1 + 1136, a2 + 1136);
  sub_18090E4BC((int *)(a1 + 1200), (int *)(a2 + 1200));
  return a1;
}

uint64_t sub_180946460(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = 8LL; i != 584; i += 32LL)
  {
    uint64_t v5 = a1 + i;
    __int128 v6 = *(_OWORD *)(a2 + i);
    *(_DWORD *)(v5 + 16) = *(_DWORD *)(a2 + i + 16);
    *(_OWORD *)uint64_t v5 = v6;
  }

  for (uint64_t j = 0LL; j != 960; j += 80LL)
  {
    uint64_t v8 = a1 + j;
    if (*(_BYTE *)(a1 + j + 596)) {
      uprv_free(*(void **)(v8 + 584));
    }
    uint64_t v9 = a2 + j;
    *(_DWORD *)(v8 + 592) = *(_DWORD *)(a2 + j + 592);
    *(_BYTE *)(v8 + 596) = *(_BYTE *)(a2 + j + 596);
    unint64_t v10 = *(const void **)(a2 + j + 584);
    uint64_t v11 = a2 + j + 600;
    if ((const void *)v11 == v10)
    {
      unint64_t v12 = (void *)(a1 + j + 600);
      *(void *)(v8 + 584) = v12;
      memcpy(v12, v10, 8LL * *(int *)(v9 + 592));
    }

    else
    {
      *(void *)(v8 + 584) = v10;
      *(void *)(v9 + 584) = v11;
      *(_DWORD *)(v9 + 592) = 3;
      *(_BYTE *)(v9 + 596) = 0;
    }

    uint64_t v13 = a2 + j;
    uint64_t v14 = a1 + j;
    *(_DWORD *)(a1 + j + 624) = *(_DWORD *)(a2 + j + 624);
    if (*(_BYTE *)(a1 + j + 644)) {
      uprv_free(*(void **)(v14 + 632));
    }
    *(_DWORD *)(v14 + 64icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = *(_DWORD *)(v13 + 640);
    *(_BYTE *)(v14 + 644) = *(_BYTE *)(v13 + 644);
    int v15 = *(const void **)(v13 + 632);
    if ((const void *)(v13 + 646) == v15)
    {
      int v16 = (void *)(a1 + j + 646);
      *(void *)(v14 + 632) = v16;
      memcpy(v16, v15, 2LL * *(int *)(v13 + 640));
    }

    else
    {
      *(void *)(v14 + 632) = v15;
      *(void *)(v13 + 632) = v13 + 646;
      *(_DWORD *)(v13 + 64icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 4;
      *(_BYTE *)(v13 + 644) = 0;
    }
  }

  *(void *)(a1 + 1536) = *(void *)(a2 + 1536);
  return a1;
}

uint64_t icu::numparse::impl::NumberParserImpl::freeze(uint64_t this)
{
  *(_BYTE *)(this + 112) = 1;
  return this;
}

uint64_t icu::numparse::impl::NumberParserImpl::createParserFromProperties( icu::numparse::impl::NumberParserImpl *this, const icu::number::impl::DecimalFormatProperties *a2, const icu::DecimalFormatSymbols *a3, BOOL a4, UErrorCode *a5)
{
  uint64_t v5 = MEMORY[0x1895F8858](this);
  unsigned int v7 = v6;
  int v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = v5;
  uint64_t v124 = *MEMORY[0x1895F89C0];
  memset(v123, 0, 224);
  icu::Locale::Locale((icu::Locale *)v123, (uint64_t)v10 + 1936);
  bzero(v113, 0x990uLL);
  v112[0] = off_189727980;
  v112[1] = off_18971B688;
  v113[0] = 2;
  int v114 = off_18971B688;
  __int16 v115 = 2;
  int v116 = off_18971B688;
  __int16 v117 = 2;
  v118 = off_18971B688;
  __int16 v119 = 2;
  char v120 = 1;
  v121[0] = off_189727A28;
  uint64_t v13 = 35LL;
  do
  {
    uint64_t v14 = &v112[v13];
    void *v14 = off_189727980;
    v14[1] = off_18971B688;
    *((_WORD *)v14 + 8) = 2;
    v14[9] = off_18971B688;
    *((_WORD *)v14 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
    v14[17] = off_18971B688;
    *((_WORD *)v14 + 72) = 2;
    v14[25] = off_18971B688;
    *((_WORD *)v14 + 104) = 2;
    v13 += 34LL;
    *((_BYTE *)v14 + 266) = 1;
  }

  while (v14 + 34 != (void *)&v122);
  char v122 = 1;
  int v15 = *(icu::CurrencyPluralInfo **)(v12 + 48);
  if (v15)
  {
    char v120 = 1;
    sub_180930678((uint64_t)v121, v15, (uint64_t *)v12, v7);
  }

  else
  {
    sub_18092FF9C((uint64_t)v112, v12, v7);
    char v122 = 1;
  }

  if (*(int *)v7 <= 0)
  {
    memset(v81, 0, sizeof(v81));
    sub_18091ED14(v12, (uint64_t)v123, (uint64_t)v7, (icu::CurrencyUnit *)v81);
    uint64_t v111 = 0LL;
    memset(v110, 0, sizeof(v110));
    __int128 v108 = 0u;
    __int128 v109 = 0u;
    __int128 v106 = 0u;
    __int128 v107 = 0u;
    memset(v105, 0, sizeof(v105));
    icu::CurrencyUnit::CurrencyUnit((icu::CurrencyUnit *)v80, v81);
    icu::number::impl::CurrencySymbols::CurrencySymbols( (uint64_t)v105,  v80,  (uint64_t)v123,  (uint64_t)v11,  (UErrorCode *)v7);
    icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)v80);
    if (*(_BYTE *)(v12 + 460)) {
      BOOL v18 = 1;
    }
    else {
      BOOL v18 = *(_DWORD *)(v12 + 464) == 1;
    }
    int v19 = v18;
    uint64_t v16 = 0LL;
    unint64_t v78 = icu::number::impl::Grouper::forProperties((icu::number::impl::Grouper *)v12, v17);
    int v79 = v20;
    uint64_t v21 = (void *)*(unsigned int *)v7;
    if ((int)v21 <= 0)
    {
      int v22 = *(_BYTE *)(v12 + 456) == 0;
      if (*(_BYTE *)(v12 + 457)) {
        v22 |= 0x10u;
      }
      if (*(_BYTE *)(v12 + 756)) {
        v22 |= 0x400u;
      }
      if (v19) {
        int v23 = 33548;
      }
      else {
        int v23 = 128;
      }
      int v24 = v22 | v23;
      if ((v9 & 1) != 0
        || ((v26 = 34LL, !v122) ? (unint64_t v27 = v121) : (v26 = 0LL, unint64_t v27 = v112),
            (*(unsigned int (**)(void *))(v112[v26] + 40LL))(v27)))
      {
        v24 |= 2u;
      }

      if (v9) {
        unsigned int v28 = v24;
      }
      else {
        unsigned int v28 = v24 | 0x2000;
      }
      uint64_t v29 = (icu::numparse::impl::NumberParserImpl *)icu::UMemory::operator new( (uint64_t *)(v24 | 0x2000u),  (icu::UMemory *)0x1460,  v25);
      uint64_t v16 = (uint64_t)v29;
      if (v29) {
        icu::numparse::impl::NumberParserImpl::NumberParserImpl(v29, v28);
      }
      int v71 = v19;
      icu::numparse::impl::IgnorablesMatcher::IgnorablesMatcher((icu::numparse::impl::IgnorablesMatcher *)&v83, v28);
      icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 128), (icu::UnicodeString *)&v84);
      *(void *)(v16 + 192) = v86;
      __int128 v83 = (uint64_t (**)())off_189728C88;
      icu::UnicodeString::~UnicodeString(off_189728C88, (icu::UnicodeString *)&v84);
      v77[0] = v105;
      v77[1] = v11;
      unsigned __int8 v72 = (icu::numparse::impl::SymbolMatcher *)(v16 + 120);
      v77[2] = v16 + 120;
      v77[3] = v123;
      unsigned int v70 = v28;
      v77[4] = v28;
      icu::numparse::impl::AffixTokenMatcherWarehouse::AffixTokenMatcherWarehouse(&v83, v77);
      sub_180946360(v16 + 3856, (uint64_t)&v83);
      sub_180947B54((uint64_t)&v83);
      sub_180942A68(&v83, v16 + 3856);
      sub_180946460(v16 + 2312, (uint64_t)&v83);
      uint64_t v30 = 960LL;
      do
      {
        int v31 = (void **)&(&v83)[(unint64_t)v30 / 8];
        *(void *)&v100[v30 + 80] = &unk_1897287D0;
        if (v100[v30 + 148]) {
          uprv_free(v31[69]);
        }
        v31[62] = off_189728948;
        if (*((_BYTE *)v31 + 516)) {
          uprv_free(*(void **)&v100[v30 + 88]);
        }
        v30 -= 80LL;
      }

      while (v30);
      if (v122) {
        int v32 = v112;
      }
      else {
        int v32 = v121;
      }
      sub_180942CC0( v16 + 2312,  (uint64_t)v32,  v16,  v72,  (icu::numparse::impl::AffixTokenMatcherWarehouse *)v28,  (int *)v7);
      int v33 = v9;
      if ((v9 & 1) != 0
        || ((uint64_t v34 = 34LL, !v122) ? (v35 = v121) : (uint64_t v34 = 0LL, v35 = v112),
            (*(unsigned int (**)(void *))(v112[v34] + 40LL))(v35)))
      {
        icu::numparse::impl::CombinedCurrencyMatcher::CombinedCurrencyMatcher( (icu::numparse::impl::CombinedCurrencyMatcher *)&v83,  (const icu::number::impl::CurrencySymbols *)v105,  v11,  v28,  (UErrorCode *)v7);
        *(void *)(v16 + 1464) = v84;
        icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 1472), (icu::UnicodeString *)v85);
        icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 1536), (icu::UnicodeString *)&v87);
        *(_BYTE *)(v16 + 160icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v89[0];
        for (uint64_t i = 201LL; i != 265; i += 8LL)
          icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + i * 8), (icu::UnicodeString *)&(&v83)[i - 182]);
        icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 2120), (icu::UnicodeString *)v101);
        icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 2184), (icu::UnicodeString *)v102);
        icu::CharString::operator=(v16 + 2248, (uint64_t)&v103);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16LL))(v16, v16 + 1456);
        __int128 v83 = off_189728A50;
        unint64_t v37 = v104;
        if (v104) {
          uprv_free(v103);
        }
        icu::UnicodeString::~UnicodeString((void *)v37, (icu::UnicodeString *)v102);
        icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)v101);
        for (uint64_t j = 75LL; j != 11; j -= 8LL)
          icu::UnicodeString::~UnicodeString(v39, (icu::UnicodeString *)&(&v83)[j]);
        icu::UnicodeString::~UnicodeString(v39, (icu::UnicodeString *)&v87);
        icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)v85);
        int v33 = v9;
      }

      if ((v71 & 1) == 0)
      {
        uint64_t v42 = 34LL;
        if (v122)
        {
          uint64_t v42 = 0LL;
          uint64_t v43 = v112;
        }

        else
        {
          uint64_t v43 = v121;
        }

        if ((*(unsigned int (**)(void *, uint64_t, const icu::UnicodeString *))(v112[v42] + 72LL))( v43,  4294967292LL,  v7))
        {
          icu::numparse::impl::PercentMatcher::PercentMatcher( (icu::numparse::impl::PercentMatcher *)&v83,  (UChar **)v11);
          icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 536), (icu::UnicodeString *)&v84);
          *(void *)(v16 + 60icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v86;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16LL))(v16, v16 + 528);
          __int128 v83 = (uint64_t (**)())off_189728C88;
          icu::UnicodeString::~UnicodeString(off_189728C88, (icu::UnicodeString *)&v84);
        }

        uint64_t v44 = 34LL;
        if (v122)
        {
          uint64_t v44 = 0LL;
          int v45 = v112;
        }

        else
        {
          int v45 = v121;
        }

        if ((*(unsigned int (**)(void *, uint64_t, const icu::UnicodeString *))(v112[v44] + 72LL))( v45,  4294967291LL,  v7))
        {
          icu::numparse::impl::PermilleMatcher::PermilleMatcher( (icu::numparse::impl::PermilleMatcher *)&v83,  (UChar **)v11);
          icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 616), (icu::UnicodeString *)&v84);
          *(void *)(v16 + 68icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v86;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16LL))(v16, v16 + 608);
          __int128 v83 = (uint64_t (**)())off_189728C88;
          icu::UnicodeString::~UnicodeString(off_189728C88, (icu::UnicodeString *)&v84);
        }

        icu::numparse::impl::PlusSignMatcher::PlusSignMatcher( (icu::numparse::impl::PlusSignMatcher *)&v83,  (UChar **)v11,  0);
        icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 696), (icu::UnicodeString *)&v84);
        *(void *)(v16 + 76icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v86;
        *(_BYTE *)(v16 + 768) = v87;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16LL))(v16, v16 + 688);
        __int128 v83 = (uint64_t (**)())off_189728C88;
        icu::numparse::impl::MinusSignMatcher::MinusSignMatcher( (icu::numparse::impl::MinusSignMatcher *)&v83,  (UChar **)v11,  0);
        icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 288), (icu::UnicodeString *)&v84);
        *(void *)(v16 + 352) = v86;
        *(_BYTE *)(v16 + 36icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v87;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16LL))(v16, v16 + 280);
        __int128 v83 = (uint64_t (**)())off_189728C88;
        icu::UnicodeString::~UnicodeString(v46, (icu::UnicodeString *)&v84);
      }

      sub_180948AE0((uint64_t)&v83, (uint64_t)v11);
      icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 376), (icu::UnicodeString *)&v84);
      *(void *)(v16 + 44icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v86;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16LL))(v16, v16 + 368);
      __int128 v83 = (uint64_t (**)())off_189728C88;
      sub_1809489FC((uint64_t)&v83, (uint64_t)v11);
      icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 208), (icu::UnicodeString *)&v84);
      *(void *)(v16 + 272) = v86;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16LL))(v16, v16 + 200);
      __int128 v83 = (uint64_t (**)())off_189728C88;
      icu::UnicodeString::~UnicodeString(v47, (icu::UnicodeString *)&v84);
      memset(v82, 0, 64);
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v82, (UChar **)(v12 + 392));
      if (((uint64_t)v82[1] & 1) == 0)
      {
        Set = (icu::UVector **)icu::numparse::impl::SymbolMatcher::getSet(v72);
        if (!icu::UnicodeSet::contains(Set, (const icu::UnicodeString *)v82))
        {
          sub_180948B24((uint64_t)&v83, v82);
          icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 456), (icu::UnicodeString *)&v84);
          *(void *)(v16 + 52icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v86;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16LL))(v16, v16 + 448);
          __int128 v83 = (uint64_t (**)())off_189728C88;
          icu::UnicodeString::~UnicodeString(off_189728C88, (icu::UnicodeString *)&v84);
        }
      }

      (*(void (**)(uint64_t, icu::numparse::impl::SymbolMatcher *))(*(void *)v16 + 16LL))(v16, v72);
      sub_180944E7C(&v83, v11, &v78, v70);
      *(void *)(v16 + 784) = v84;
      icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 792), (icu::UnicodeString *)v85);
      icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 856), (icu::UnicodeString *)&v87);
      __int128 v49 = v89[1];
      *(_OWORD *)(v16 + 92icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v89[0];
      *(_OWORD *)(v16 + 936) = v49;
      sub_180947C10((icu::UnicodeSet **)(v16 + 952), &v90, (char *)&v81[4] + 1);
      sub_180947C10((icu::UnicodeSet **)(v16 + 960), &v91, v50);
      sub_180947C50((void **)(v16 + 968), v92);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16LL))(v16, v16 + 776);
      __int128 v83 = off_189728AD0;
      sub_1807CCEEC((uint64_t *)v92);
      if (v91)
      {
        BOOL v52 = icu::UnicodeSet::~UnicodeSet(v51, v91);
        icu::UMemory::operator delete(v52);
      }

      if (v90)
      {
        uint64_t v53 = icu::UnicodeSet::~UnicodeSet(v51, v90);
        icu::UMemory::operator delete(v53);
      }

      icu::UnicodeString::~UnicodeString(v51, (icu::UnicodeString *)&v87);
      icu::UnicodeString::~UnicodeString(v54, (icu::UnicodeString *)v85);
      if (!*(_BYTE *)(v12 + 468) || *(int *)(v12 + 100) >= 1)
      {
        sub_180948378(&v83, v11, &v78);
        icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 984), (icu::UnicodeString *)&v84);
        *(void *)(v16 + 1056) = v87;
        icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 1064), (icu::UnicodeString *)v88);
        icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 1128), (icu::UnicodeString *)((char *)v89 + 8));
        *(_OWORD *)(v16 + 1192) = v93;
        *(_OWORD *)(v16 + 1208) = v94;
        sub_180947C10((icu::UnicodeSet **)(v16 + 1224), &v95, &v83);
        sub_180947C10((icu::UnicodeSet **)(v16 + 1232), &v96, v55);
        sub_180947C50((void **)(v16 + 1240), v97);
        icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 1256), (icu::UnicodeString *)v98);
        *(void *)(v16 + 132icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v98[8];
        icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 1328), (icu::UnicodeString *)v99);
        icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 1392), (icu::UnicodeString *)v100);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16LL))(v16, v16 + 976);
        __int128 v83 = off_189728C08;
        icu::UnicodeString::~UnicodeString(off_189728C08, (icu::UnicodeString *)v100);
        icu::UnicodeString::~UnicodeString(v56, (icu::UnicodeString *)v99);
        v97[1] = off_189728C88;
        icu::UnicodeString::~UnicodeString(off_189728C88, (icu::UnicodeString *)v98);
        __int128 v86 = off_189728AD0;
        sub_1807CCEEC((uint64_t *)v97);
        if (v96)
        {
          BOOL v58 = icu::UnicodeSet::~UnicodeSet(v57, v96);
          icu::UMemory::operator delete(v58);
        }

        if (v95)
        {
          char v59 = icu::UnicodeSet::~UnicodeSet(v57, v95);
          icu::UMemory::operator delete(v59);
        }

        icu::UnicodeString::~UnicodeString(v57, (icu::UnicodeString *)((char *)v89 + 8));
        icu::UnicodeString::~UnicodeString(v60, (icu::UnicodeString *)v88);
        icu::UnicodeString::~UnicodeString(v61, (icu::UnicodeString *)&v84);
        int v33 = v9;
      }

      (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16LL))(v16, v16 + 5176);
      if (v71) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16LL))(v16, v16 + 5144);
      }
      if (v33) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16LL))(v16, v16 + 5152);
      }
      if (*(_BYTE *)(v12 + 64))
      {
        sub_180949048((uint64_t)&v83, (*(unsigned __int8 *)(v12 + 65) | *(_DWORD *)(v12 + 88)) != 0);
        *(_BYTE *)(v16 + 5168) = v84;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16LL))(v16, v16 + 5160);
      }

      uint64_t v74 = 0LL;
      uint64_t v75 = 0LL;
      uint64_t v76 = 0LL;
      int v63 = *(_DWORD *)(v12 + 84);
      int v64 = *(_DWORD *)(v12 + 120);
      int v65 = *(_DWORD *)(v12 + 124);
      uint64_t v66 = (v65 + v63);
      if (!(v65 + v63) || v64 == 1)
      {
        if ((_DWORD)v66)
        {
          icu::number::Scale::powerOfTen(v66, (uint64_t)&v74);
        }

        else if (v64 == 1)
        {
          icu::number::Scale::none((uint64_t)&v74);
        }

        else
        {
          icu::number::Scale::byDouble((double)v64, v62, (uint64_t)&v74);
        }
      }

      else
      {
        icu::number::Scale::byDoubleAndPowerOfTen((icu::number::Scale *)v66, (double)v64, v62, (uint64_t)&v74);
      }

      if ((_DWORD)v74 || v75)
      {
        icu::number::Scale::Scale((icu::number::Scale *)v73, (const icu::number::Scale *)&v74);
        sub_1809490D0(&v83, (uint64_t)v73);
        icu::number::Scale::operator=(v16 + 5192, (uint64_t)&v84);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16LL))(v16, v16 + 5184);
        __int128 v83 = off_1897290E0;
        icu::number::Scale::~Scale((icu::number::Scale *)&v84);
        icu::number::Scale::~Scale((icu::number::Scale *)v73);
      }

      *(_BYTE *)(v16 + 112) = 1;
      icu::number::Scale::~Scale((icu::number::Scale *)&v74);
      icu::UnicodeString::~UnicodeString(v67, (icu::UnicodeString *)v82);
    }

    icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)&v110[72]);
    icu::UnicodeString::~UnicodeString(v68, (icu::UnicodeString *)&v110[8]);
    if (BYTE4(v107)) {
      uprv_free(*((void **)&v106 + 1));
    }
    icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)&v105[8]);
    icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)v81);
  }

  else
  {
    uint64_t v16 = 0LL;
  }

  sub_1808D3EFC(v112);
  icu::Locale::~Locale((icu::Locale *)v123);
  return v16;
}

icu::numparse::impl::NumberParserImpl *icu::numparse::impl::NumberParserImpl::NumberParserImpl( icu::numparse::impl::NumberParserImpl *this, int a2)
{
  *(void *)this = off_189728B50;
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = 0;
  *((void *)this + 2) = (char *)this + 32;
  *((_DWORD *)this + 6) = 10;
  *((_BYTE *)this + 28) = 0;
  *((_BYTE *)this + 112) = 0;
  *((_WORD *)this + 68) = 2;
  *((void *)this + 15) = off_189728CE0;
  *((void *)this + 16) = off_18971B688;
  *((_WORD *)this + 108) = 2;
  *((void *)this + 25) = off_189728D38;
  *((void *)this + 26) = off_18971B688;
  *((_WORD *)this + 148) = 2;
  *((void *)this + 35) = off_189728D90;
  *((void *)this + 36) = off_18971B688;
  *((_WORD *)this + 192) = 2;
  *((void *)this + 46) = off_189728DE8;
  *((void *)this + 47) = off_18971B688;
  *((_WORD *)this + 232) = 2;
  *((void *)this + 56) = off_189728E40;
  *((void *)this + 57) = off_18971B688;
  *((void *)this + 67) = off_18971B688;
  *((_WORD *)this + 272) = 2;
  *((void *)this + 66) = off_189728E98;
  *((void *)this + 77) = off_18971B688;
  *((_WORD *)this + 312) = 2;
  *((void *)this + 76) = off_189728EF0;
  *((void *)this + 87) = off_18971B688;
  *((_WORD *)this + 352) = 2;
  *((void *)this + 86) = off_189728F48;
  *((void *)this + 97) = off_189728AD0;
  *((void *)this + 99) = off_18971B688;
  *((_WORD *)this + 40icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
  *((void *)this + 107) = off_18971B688;
  *((_WORD *)this + 432) = 2;
  *((void *)this + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0LL;
  *((void *)this + 119) = 0LL;
  *((void *)this + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
  *((void *)this + 122) = off_189728C08;
  *((void *)this + 123) = off_18971B688;
  *((_WORD *)this + 496) = 2;
  *((void *)this + 13icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = off_189728AD0;
  *((void *)this + 133) = off_18971B688;
  *((_WORD *)this + 536) = 2;
  *((void *)this + 14icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = off_18971B688;
  *((_WORD *)this + 568) = 2;
  *((void *)this + 155) = 0LL;
  *((void *)this + 153) = 0LL;
  *((void *)this + 154) = 0LL;
  *((void *)this + 157) = off_18971B688;
  *((_WORD *)this + 632) = 2;
  *((void *)this + 156) = off_189728CE0;
  *((void *)this + 166) = off_18971B688;
  *((_WORD *)this + 668) = 2;
  *((void *)this + 174) = off_18971B688;
  *((_WORD *)this + 70icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
  sub_180943CF8((uint64_t)this + 1456);
  sub_180947CC4((uint64_t)this + 2312);
  sub_180947D4C((uint64_t)this + 3856);
  *((void *)this + 643) = &unk_189729128;
  *((void *)this + 644) = &unk_1897291C0;
  *((void *)this + 645) = &off_189729098;
  *((void *)this + 647) = &unk_189729278;
  *((void *)this + 648) = off_1897290E0;
  *((_DWORD *)this + 1298) = 0;
  *((void *)this + 65icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
  *((_DWORD *)this + 1302) = 0;
  return this;
}

void icu::numparse::impl::NumberParserImpl::~NumberParserImpl(icu::numparse::impl::NumberParserImpl *this)
{
  *(void *)this = off_189728B50;
  *((_DWORD *)this + 3) = 0;
  *((void *)this + 648) = off_1897290E0;
  icu::number::Scale::~Scale((icu::numparse::impl::NumberParserImpl *)((char *)this + 5192));
  sub_180947DEC((uint64_t)this + 120);
  if (*((_BYTE *)this + 28)) {
    uprv_free(*((void **)this + 2));
  }
}

{
  void *v1;
  icu::numparse::impl::NumberParserImpl::~NumberParserImpl(this);
  icu::UMemory::operator delete(v1);
}

void icu::numparse::impl::NumberParserImpl::addMatcher( icu::numparse::impl::NumberParserImpl *this, icu::numparse::impl::NumberParseMatcher *a2)
{
  int v4 = *((_DWORD *)this + 3);
  if (v4 >= *((_DWORD *)this + 6) && v4 >= 1)
  {
    int v6 = 2 * v4;
    unsigned int v7 = uprv_malloc(8LL * (2 * v4));
    if (v7)
    {
      int v8 = v7;
      int v9 = *((_DWORD *)this + 6);
      if (v9 >= v4) {
        int v9 = v4;
      }
      if (v9 >= v6) {
        int v9 = 2 * v4;
      }
      unint64_t v10 = (void *)*((void *)this + 2);
      memcpy(v7, v10, 8LL * v9);
      if (*((_BYTE *)this + 28)) {
        uprv_free(v10);
      }
      *((void *)this + 2) = v8;
      *((_DWORD *)this + 6) = v6;
      *((_BYTE *)this + 28) = 1;
    }
  }

  uint64_t v11 = *((int *)this + 3);
  *(void *)(*((void *)this + 2) + 8 * v1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = a2;
  *((_DWORD *)this + 3) = v11 + 1;
}

uint64_t icu::numparse::impl::NumberParserImpl::getParseFlags(icu::numparse::impl::NumberParserImpl *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t icu::numparse::impl::NumberParserImpl::parse( icu::numparse::impl::NumberParserImpl *this, const icu::UnicodeString *a2, int a3, icu::numparse::impl::ParsedNumber *a4, UErrorCode *a5)
{
  return icu::numparse::impl::NumberParserImpl::parse((uint64_t)this, a2, 0, a3, a4, a5);
}

uint64_t icu::numparse::impl::NumberParserImpl::parse( uint64_t this, const icu::UnicodeString *a2, int a3, int a4, icu::numparse::impl::ParsedNumber *a5, UErrorCode *a6)
{
  if (*(int *)a6 <= 0)
  {
    uint64_t v10 = this;
    memset(v14, 0, sizeof(v14));
    icu::StringSegment::StringSegment((uint64_t)v14, a2, *(_DWORD *)(this + 8) & 1);
    icu::StringSegment::adjustOffset((uint64_t)v14, a3);
    if (a4)
    {
      icu::numparse::impl::NumberParserImpl::parseGreedy(v10, (icu::StringSegment *)v14, a5, a6);
    }

    else
    {
      if ((*(_BYTE *)(v10 + 9) & 0x40) != 0) {
        int v11 = 1;
      }
      else {
        int v11 = -100;
      }
      icu::numparse::impl::NumberParserImpl::parseLongestRecursive( (icu::numparse::impl::NumberParserImpl *)v10,  (icu::StringSegment *)v14,  a5,  v11,  a6);
    }

    if (*(int *)(v10 + 12) >= 1)
    {
      uint64_t v12 = 0LL;
      do
      {
        uint64_t v13 = *(void *)(*(void *)(v10 + 16) + 8 * v12);
        (*(void (**)(uint64_t, icu::numparse::impl::ParsedNumber *))(*(void *)v13 + 40LL))(v13, a5);
        ++v12;
      }

      while (v12 < *(int *)(v10 + 12));
    }

    return icu::numparse::impl::ParsedNumber::postProcess((uint64_t)a5);
  }

  return this;
}

uint64_t icu::numparse::impl::NumberParserImpl::parseGreedy( uint64_t this, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3, UErrorCode *a4)
{
  if (*(int *)(this + 12) >= 1)
  {
    uint64_t v7 = this;
    int v8 = 0;
    do
    {
      this = icu::StringSegment::length(a2);
      if (!(_DWORD)this) {
        break;
      }
      uint64_t v9 = *(void *)(*(void *)(v7 + 16) + 8LL * v8);
      this = (*(uint64_t (**)(uint64_t, icu::StringSegment *))(*(void *)v9 + 32LL))(v9, a2);
      if ((this & 1) != 0)
      {
        int Offset = icu::StringSegment::getOffset(a2);
        this = (*(uint64_t (**)(uint64_t, icu::StringSegment *, icu::numparse::impl::ParsedNumber *, UErrorCode *))(*(void *)v9 + 24LL))( v9,  a2,  a3,  a4);
        this = icu::StringSegment::getOffset(a2);
        if ((_DWORD)this == Offset) {
          ++v8;
        }
        else {
          int v8 = 0;
        }
      }

      else
      {
        ++v8;
      }
    }

    while (v8 < *(_DWORD *)(v7 + 12));
  }

  return this;
}

void icu::numparse::impl::NumberParserImpl::parseLongestRecursive( icu::numparse::impl::NumberParserImpl *this, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3, int a4, UErrorCode *a5)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  int v10 = icu::StringSegment::length(a2);
  if (a4 && v10)
  {
    uint64_t v30 = 0LL;
    memset(v29, 0, sizeof(v29));
    memset(v28, 0, sizeof(v28));
    memset(v27, 0, sizeof(v27));
    sub_180944408(v27, (uint64_t)a3);
    uint64_t v26 = 0LL;
    memset(v25, 0, sizeof(v25));
    memset(v24, 0, sizeof(v24));
    memset(v23, 0, sizeof(v23));
    icu::numparse::impl::ParsedNumber::ParsedNumber((icu::numparse::impl::ParsedNumber *)v23);
    int Offset = icu::StringSegment::getOffset(a2);
    uint64_t v12 = *((unsigned int *)this + 3);
    if ((int)v12 >= 1)
    {
      int v13 = Offset;
      uint64_t v14 = 0LL;
      int v15 = a4 + 1;
      do
      {
        uint64_t v16 = *(void *)(*((void *)this + 2) + 8 * v14);
        if ((*(unsigned int (**)(uint64_t, icu::StringSegment *))(*(void *)v16 + 32LL))(v16, a2))
        {
          int v17 = 0;
          do
          {
            else {
              int v18 = 2;
            }
            v17 += v18;
            sub_1809440D8((uint64_t)v23, (uint64_t)v27);
            icu::StringSegment::setLength((uint64_t)a2, v17);
            char v19 = (*(uint64_t (**)(uint64_t, icu::StringSegment *, _OWORD *, UErrorCode *))(*(void *)v16 + 24LL))( v16,  a2,  v23,  a5);
            icu::StringSegment::resetLength(a2);
            uint64_t v12 = *(unsigned int *)a5;
            if (icu::StringSegment::getOffset(a2) - v13 == v17)
            {
              icu::numparse::impl::NumberParserImpl::parseLongestRecursive( this,  a2,  (icu::numparse::impl::ParsedNumber *)v23,  v15,  a5);
              uint64_t v12 = *(unsigned int *)a5;
              if (icu::numparse::impl::ParsedNumber::isBetterThan((icu::numparse::impl::ParsedNumber *)v23, a3)) {
                sub_1809440D8((uint64_t)a3, (uint64_t)v23);
              }
            }

            icu::StringSegment::setOffset((uint64_t)a2, v13);
          }

          while ((v19 & 1) != 0);
        }

        ++v14;
        uint64_t v12 = *((int *)this + 3);
      }

      while (v14 < v12);
    }

uint64_t icu::numparse::impl::NumberParserImpl::toString@<X0>( icu::numparse::impl::NumberParserImpl *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  icu::UnicodeString::UnicodeString((uint64_t)a2, (uint64_t)"<");
  if (*((int *)this + 3) >= 1)
  {
    uint64_t v4 = 0LL;
    do
    {
      LOWORD(v8) = 32;
      icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)&v8, 0, 1LL);
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(*((void *)this + 2) + 8 * v4) + 48LL))(&v8);
      if ((v9 & 0x8000u) == 0) {
        uint64_t v5 = v9 >> 5;
      }
      else {
        uint64_t v5 = v10;
      }
      icu::UnicodeString::doAppend((uint64_t)a2, (const icu::UnicodeString *)&v8, 0, v5);
      icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v8);
      ++v4;
    }

    while (v4 < *((int *)this + 3));
  }

  return icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)L" ]>", 0, 0xFFFFFFFFLL);
}

uint64_t sub_180947B54(uint64_t a1)
{
  *(void *)(a1 + 344) = off_189728A50;
  uint64_t v2 = (void *)*(unsigned __int8 *)(a1 + 1148);
  if (*(_BYTE *)(a1 + 1148)) {
    uprv_free(*(void **)(a1 + 1136));
  }
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 1072));
  icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)(a1 + 1008));
  for (uint64_t i = 944LL; i != 432; i -= 64LL)
    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + i));
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + 424));
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)(a1 + 360));
  *(void *)(a1 + 264) = off_189728C88;
  *(void *)(a1 + 184) = off_189728C88;
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)(a1 + 192));
  *(void *)(a1 + 96) = off_189728C88;
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)(a1 + 104));
  *(void *)(a1 + 8) = off_189728C88;
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)(a1 + 16));
  return a1;
}

icu::UnicodeSet **sub_180947C10@<X0>(icu::UnicodeSet **a1@<X0>, icu::UnicodeSet **a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  if (v5)
  {
    int v6 = icu::UnicodeSet::~UnicodeSet(a3, v5);
    icu::UMemory::operator delete(v6);
  }

  *a1 = *a2;
  *a2 = 0LL;
  return a1;
}

void **sub_180947C50(void **a1, void **a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = (char *)(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    if (v6)
    {
      uint64_t v7 = v6 << 6;
      uint64_t v8 = (char *)(v4 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)&v8[v7]);
        v7 -= 64LL;
      }

      while (v7);
    }

    icu::UMemory::operator delete[](v5);
  }

  *a1 = *a2;
  *a2 = 0LL;
  return a1;
}

uint64_t sub_180947CC4(uint64_t a1)
{
  for (uint64_t i = 0LL; i != 576; i += 32LL)
    *(void *)(a1 + i) = &off_189728830;
  uint64_t v3 = a1 + 576;
  do
  {
    uint64_t v4 = icu::numparse::impl::ArraySeriesMatcher::ArraySeriesMatcher(v3);
    *(_WORD *)(v4 + 7icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
    *(void *)uint64_t v4 = &unk_1897287D0;
    *(void *)(v4 + 56) = v4 + 70;
    *(_DWORD *)(v4 + 64) = 4;
    *(_BYTE *)(v4 + 68) = 0;
    uint64_t v3 = v4 + 80;
  }

  while (v3 != a1 + 1536);
  return a1;
}

uint64_t sub_180947D4C(uint64_t a1)
{
  *(_WORD *)(a1 + 24) = 2;
  *(void *)(a1 + 8) = off_189728D90;
  *(void *)(a1 + 16) = off_18971B688;
  *(_WORD *)(a1 + 112) = 2;
  *(void *)(a1 + 96) = off_189728F48;
  *(void *)(a1 + 104) = off_18971B688;
  *(_WORD *)(a1 + 20icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
  *(void *)(a1 + 184) = off_189728E98;
  *(void *)(a1 + 192) = off_18971B688;
  *(_WORD *)(a1 + 28icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
  *(void *)(a1 + 264) = off_189728EF0;
  *(void *)(a1 + 272) = off_18971B688;
  sub_180943CF8(a1 + 344);
  *(_DWORD *)(a1 + 120icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  *(void *)(a1 + 1208) = a1 + 1224;
  *(_DWORD *)(a1 + 1216) = 8;
  *(_BYTE *)(a1 + 122icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  return a1;
}

uint64_t sub_180947DEC(uint64_t a1)
{
  for (uint64_t i = 0LL; i != -960; i -= 80LL)
  {
    uint64_t v3 = a1 + i;
    *(void *)(a1 + i + 3648) = &unk_1897287D0;
    if (*(_BYTE *)(a1 + i + 3716)) {
      uprv_free(*(void **)(v3 + 3704));
    }
    *(void *)(v3 + 3648) = off_189728948;
    if (*(_BYTE *)(v3 + 3668)) {
      uprv_free(*(void **)(a1 + i + 3656));
    }
  }

  *(void *)(a1 + 1336) = off_189728A50;
  uint64_t v4 = (void *)*(unsigned __int8 *)(a1 + 2140);
  if (*(_BYTE *)(a1 + 2140)) {
    uprv_free(*(void **)(a1 + 2128));
  }
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + 2064));
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)(a1 + 2000));
  for (uint64_t j = 1936LL; j != 1424; j -= 64LL)
    icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)(a1 + j));
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)(a1 + 1416));
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)(a1 + 1352));
  *(void *)(a1 + 856) = off_189728C08;
  icu::UnicodeString::~UnicodeString(off_189728C08, (icu::UnicodeString *)(a1 + 1272));
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)(a1 + 1208));
  *(void *)(a1 + 1128) = off_189728C88;
  *(void *)(a1 + 928) = off_189728AD0;
  sub_1807CCEEC((uint64_t *)(a1 + 1120));
  sub_180945990((icu::UnicodeSet **)(a1 + 1112), v10);
  sub_180945990((icu::UnicodeSet **)(a1 + 1104), v11);
  icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)(a1 + 1008));
  icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)(a1 + 944));
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)(a1 + 864));
  *(void *)(a1 + 656) = off_189728AD0;
  sub_1807CCEEC((uint64_t *)(a1 + 848));
  sub_180945990((icu::UnicodeSet **)(a1 + 840), v15);
  sub_180945990((icu::UnicodeSet **)(a1 + 832), v16);
  icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)(a1 + 736));
  icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)(a1 + 672));
  *(void *)(a1 + 568) = off_189728C88;
  icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)(a1 + 576));
  *(void *)(a1 + 488) = off_189728C88;
  icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)(a1 + 496));
  *(void *)(a1 + 408) = off_189728C88;
  icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)(a1 + 416));
  *(void *)(a1 + 328) = off_189728C88;
  icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)(a1 + 336));
  *(void *)(a1 + 248) = off_189728C88;
  icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)(a1 + 256));
  *(void *)(a1 + 16icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = off_189728C88;
  icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)(a1 + 168));
  *(void *)(a1 + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = off_189728C88;
  icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)(a1 + 88));
  *(void *)a1 = off_189728C88;
  icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)(a1 + 8));
  return a1;
}

icu::numparse::impl::ParsedNumber *icu::numparse::impl::ParsedNumber::ParsedNumber( icu::numparse::impl::ParsedNumber *this)
{
  uint64_t v2 = icu::number::impl::DecimalQuantity::DecimalQuantity(this);
  *((void *)v2 + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = off_18971B688;
  *((void *)this + 18) = off_18971B688;
  *((_WORD *)this + 44) = 2;
  *((_WORD *)this + 76) = 2;
  *((_BYTE *)this + 8) = 1;
  *((void *)this + 9) = 0LL;
  icu::UnicodeString::setToBogus((icu::number::impl::DecimalQuantity *)((char *)v2 + 80));
  icu::UnicodeString::setToBogus((icu::numparse::impl::ParsedNumber *)((char *)this + 144));
  *((_WORD *)this + 104) = 0;
  return this;
}

void icu::numparse::impl::ParsedNumber::clear(icu::numparse::impl::ParsedNumber *this)
{
  *((_BYTE *)this + 8) = 1;
  *((void *)this + 9) = 0LL;
  icu::UnicodeString::setToBogus((icu::numparse::impl::ParsedNumber *)((char *)this + 80));
  icu::UnicodeString::setToBogus((icu::numparse::impl::ParsedNumber *)((char *)this + 144));
  *((_WORD *)this + 104) = 0;
}

uint64_t icu::numparse::impl::ParsedNumber::setCharsConsumed( icu::numparse::impl::ParsedNumber *this, const icu::StringSegment *a2)
{
  uint64_t result = icu::StringSegment::getOffset(a2);
  *((_DWORD *)this + 18) = result;
  return result;
}

uint64_t icu::numparse::impl::ParsedNumber::postProcess(uint64_t this)
{
  if (!*(_BYTE *)(this + 8) && (*(_BYTE *)(this + 76) & 1) != 0) {
    return icu::number::impl::DecimalQuantity::negate(this);
  }
  return this;
}

BOOL icu::numparse::impl::ParsedNumber::success(icu::numparse::impl::ParsedNumber *this)
{
  return *((int *)this + 18) >= 1 && (*((_BYTE *)this + 77) & 1) == 0;
}

uint64_t icu::numparse::impl::ParsedNumber::seenNumber(icu::numparse::impl::ParsedNumber *this)
{
  if (!*((_BYTE *)this + 8)) {
    return 1LL;
  }
  unsigned int v1 = *((_DWORD *)this + 19);
  if ((v1 & 0x40) != 0) {
    return 1LL;
  }
  else {
    return (v1 >> 7) & 1;
  }
}

double icu::numparse::impl::ParsedNumber::getDouble(icu::numparse::impl::ParsedNumber *this, UErrorCode *a2)
{
  int v2 = *((_DWORD *)this + 19);
  if ((v2 & 0x40) != 0) {
    return uprv_getNaN();
  }
  if ((v2 & 0x80) != 0)
  {
    double result = -INFINITY;
    if ((v2 & 1) == 0) {
      return INFINITY;
    }
  }

  else if (*((_BYTE *)this + 8))
  {
    *a2 = U_INVALID_STATE_ERROR;
    return 0.0;
  }

  else if (icu::number::impl::DecimalQuantity::isZeroish(this) {
         && (icu::number::impl::DecimalQuantity::isNegative(this) & 1) != 0)
  }
  {
    return -0.0;
  }

  else if (icu::number::impl::DecimalQuantity::fitsInLong(this, 0))
  {
    return (double)icu::number::impl::DecimalQuantity::toLong(this, 0);
  }

  else
  {
    return icu::number::impl::DecimalQuantity::toDouble(this);
  }

  return result;
}

void icu::numparse::impl::ParsedNumber::populateFormattable( icu::numparse::impl::ParsedNumber *this, icu::Formattable *a2, char a3)
{
  int v4 = *((_DWORD *)this + 19);
  if ((v4 & 0x40) != 0)
  {
    double NaN = uprv_getNaN();
LABEL_15:
    icu::Formattable::setDouble(a2, NaN);
    return;
  }

  if ((v4 & 0x80) != 0)
  {
    if ((v4 & 1) != 0) {
      unint64_t v10 = 0xFFF0000000000000LL;
    }
    else {
      unint64_t v10 = 0x7FF0000000000000LL;
    }
    goto LABEL_14;
  }

  if (icu::number::impl::DecimalQuantity::isZeroish(this))
  {
    int isNegative = icu::number::impl::DecimalQuantity::isNegative(this);
    if ((a3 & 0x10) == 0)
    {
      if (isNegative)
      {
        unint64_t v10 = 0x8000000000000000LL;
LABEL_14:
        double NaN = *(double *)&v10;
        goto LABEL_15;
      }
    }
  }

  uint64_t v12 = (icu::number::impl::DecimalQuantity *)icu::UMemory::operator new(v8, (icu::UMemory *)0x48, v7);
  int v13 = v12;
  if (v12) {
    icu::number::impl::DecimalQuantity::DecimalQuantity(v12, (uint64_t)this);
  }
  icu::Formattable::adoptDecimalQuantity(a2, v13);
}

BOOL icu::numparse::impl::ParsedNumber::isBetterThan( icu::numparse::impl::ParsedNumber *this, const icu::numparse::impl::ParsedNumber *a2)
{
  return *((_DWORD *)this + 18) > *((_DWORD *)a2 + 18);
}

uint64_t sub_180948284(uint64_t a1, UChar **a2, uint64_t a3)
{
  *(void *)a1 = off_189728C08;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 8), a2 + 89);
  sub_180944E7C(a1 + 72, a2, a3, 48LL);
  icu::numparse::impl::IgnorablesMatcher::IgnorablesMatcher( (icu::numparse::impl::IgnorablesMatcher *)(a1 + 272),  0x8000);
  *(void *)(a1 + 352) = off_18971B688;
  *(_WORD *)(a1 + 36icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
  *(void *)(a1 + 416) = off_18971B688;
  *(_WORD *)(a1 + 424) = 2;
  uint64_t v6 = (icu::UVector **)icu::unisets::get(11);
  else {
    icu::UnicodeString::operator=((UChar **)(a1 + 352), a2 + 49);
  }
  unint64_t v7 = a2 + 57;
  uint64_t v8 = (icu::UVector **)icu::unisets::get(12);
  else {
    icu::UnicodeString::operator=((UChar **)(a1 + 416), v7);
  }
  return a1;
}

BOOL sub_18094837C( uint64_t a1, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *this, UErrorCode *a4)
{
  int Offset = icu::StringSegment::getOffset(a2);
  int CommonPrefixLength = icu::StringSegment::getCommonPrefixLength(a2, (const icu::UnicodeString *)(a1 + 8));
  unint64_t v10 = (uint64_t *)*(unsigned __int16 *)(a1 + 16);
  else {
    unsigned int v11 = v10 >> 5;
  }
  unsigned int v14 = icu::StringSegment::length(v10, a2);
  if (CommonPrefixLength != v11) {
    return CommonPrefixLength == v14;
  }
  if (v14 == CommonPrefixLength) {
    return 1LL;
  }
  icu::StringSegment::adjustOffset((uint64_t)a2, CommonPrefixLength);
  icu::numparse::impl::SymbolMatcher::match((icu::UnicodeSet **)(a1 + 272), a2, this, a4);
  if (!icu::StringSegment::length(v15, a2))
  {
LABEL_35:
    icu::StringSegment::setOffset((uint64_t)a2, Offset);
    return 1LL;
  }

  uint64_t v16 = (const icu::UnicodeSet *)icu::unisets::get(11);
  if (!icu::StringSegment::startsWith(a2, v16))
  {
    char v19 = (const icu::UnicodeSet *)icu::unisets::get(12);
    if (icu::StringSegment::startsWith(a2, v19))
    {
      icu::StringSegment::adjustOffsetByCodePoint(a2);
    }

    else
    {
      if (icu::StringSegment::startsWith(a2, (const icu::UnicodeString *)(a1 + 352)))
      {
        int v23 = icu::StringSegment::getCommonPrefixLength(a2, (const icu::UnicodeString *)(a1 + 352));
        unsigned int v24 = *(unsigned __int16 *)(a1 + 360);
        if ((v24 & 0x8000) != 0) {
          unsigned int v25 = *(_DWORD *)(a1 + 364);
        }
        else {
          unsigned int v25 = v24 >> 5;
        }
        if (v23 != v25) {
          goto LABEL_35;
        }
        icu::StringSegment::adjustOffset((uint64_t)a2, v23);
        goto LABEL_13;
      }

      if (icu::StringSegment::startsWith(a2, (const icu::UnicodeString *)(a1 + 416)))
      {
        int v26 = icu::StringSegment::getCommonPrefixLength(a2, (const icu::UnicodeString *)(a1 + 416));
        unsigned int v27 = *(unsigned __int16 *)(a1 + 424);
        if ((v27 & 0x8000) != 0) {
          unsigned int v28 = *(_DWORD *)(a1 + 428);
        }
        else {
          unsigned int v28 = v27 >> 5;
        }
        if (v26 != v28) {
          goto LABEL_35;
        }
        icu::StringSegment::adjustOffset((uint64_t)a2, v26);
      }
    }

    char v18 = 1;
    goto LABEL_18;
  }

  icu::StringSegment::adjustOffsetByCodePoint(a2);
LABEL_13:
  char v18 = -1;
LABEL_18:
  icu::numparse::impl::SymbolMatcher::match((icu::UnicodeSet **)(a1 + 272), a2, this, a4);
  char v21 = *((_BYTE *)this + 8);
  *((_BYTE *)this + 8) = 0;
  int v22 = icu::StringSegment::getOffset(a2);
  uint64_t v12 = sub_180944E88(a1 + 72, a2, this, v18);
  *((_BYTE *)this + 8) = v21;
  else {
    *((_DWORD *)this + 19) |= 8u;
  }
  return v12;
}

BOOL sub_1809485E4(uint64_t a1, icu::StringSegment *this)
{
  return icu::StringSegment::startsWith(this, (const icu::UnicodeString *)(a1 + 8));
}

uint64_t sub_1809485F4@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)L"<Scientific>");
}

void sub_180948604(uint64_t a1)
{
  *(void *)a1 = off_189728C08;
  icu::UnicodeString::~UnicodeString(off_189728C08, (icu::UnicodeString *)(a1 + 416));
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 352));
  *(void *)(a1 + 272) = off_189728C88;
  icu::UnicodeString::~UnicodeString(off_189728C88, (icu::UnicodeString *)(a1 + 280));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)(a1 + 272));
  *(void *)(a1 + 72) = off_189728AD0;
  sub_1807CCEEC((uint64_t *)(a1 + 264));
  sub_180945990((icu::UnicodeSet **)(a1 + 256), v3);
  sub_180945990((icu::UnicodeSet **)(a1 + 248), v4);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)(a1 + 152));
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)(a1 + 88));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)(a1 + 72));
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_1809486B0(uint64_t a1)
{
  *(void *)a1 = off_189728C08;
  icu::UnicodeString::~UnicodeString(off_189728C08, (icu::UnicodeString *)(a1 + 416));
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 352));
  *(void *)(a1 + 272) = off_189728C88;
  icu::UnicodeString::~UnicodeString(off_189728C88, (icu::UnicodeString *)(a1 + 280));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)(a1 + 272));
  *(void *)(a1 + 72) = off_189728AD0;
  sub_1807CCEEC((uint64_t *)(a1 + 264));
  sub_180945990((icu::UnicodeSet **)(a1 + 256), v3);
  sub_180945990((icu::UnicodeSet **)(a1 + 248), v4);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)(a1 + 152));
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)(a1 + 88));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)(a1 + 72));
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
  icu::UMemory::operator delete(v8);
}

uint64_t icu::numparse::impl::SymbolMatcher::SymbolMatcher(uint64_t a1, UChar **a2, int a3)
{
  *(void *)a1 = off_189728C88;
  *(void *)(a1 + 8) = off_18971B688;
  uint64_t v5 = (icu::UnicodeString *)(a1 + 8);
  *(_WORD *)(a1 + 16) = 2;
  uint64_t v6 = (icu::UVector **)icu::unisets::get(a3);
  *(void *)(a1 + 72) = v6;
  else {
    icu::UnicodeString::operator=((UChar **)v5, a2);
  }
  return a1;
}

uint64_t icu::numparse::impl::SymbolMatcher::getSet(icu::numparse::impl::SymbolMatcher *this)
{
  return *((void *)this + 9);
}

BOOL icu::numparse::impl::SymbolMatcher::match( icu::UnicodeSet **this, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3, UErrorCode *a4)
{
  if (*((unsigned __int16 *)this + 8) < 0x20u)
  {
    int v8 = 0;
    goto LABEL_7;
  }

  int CommonPrefixLength = icu::StringSegment::getCommonPrefixLength(a2, (const icu::UnicodeString *)(this + 1));
  int v8 = CommonPrefixLength;
  unsigned int v9 = *((unsigned __int16 *)this + 8);
  if ((v9 & 0x8000) == 0)
  {
    if (CommonPrefixLength == v9 >> 5) {
      goto LABEL_15;
    }
LABEL_7:
    int CodePoint = icu::StringSegment::getCodePoint(a2);
    unsigned int v12 = CodePoint;
    if (v12 < 0x10000) {
      int v13 = 1;
    }
    else {
      int v13 = 2;
    }
    unsigned int v14 = a2;
    goto LABEL_16;
  }

  if (CommonPrefixLength != *((_DWORD *)this + 5)) {
    goto LABEL_7;
  }
LABEL_15:
  unsigned int v14 = a2;
  int v13 = v8;
LABEL_16:
  icu::StringSegment::adjustOffset((uint64_t)v14, v13);
  (*((void (**)(icu::UnicodeSet **, icu::StringSegment *, icu::numparse::impl::ParsedNumber *))*this + 8))( this,  a2,  a3);
  return 0LL;
}

BOOL icu::numparse::impl::SymbolMatcher::smokeTest( const icu::UnicodeSet **this, const icu::StringSegment *a2)
{
  return icu::StringSegment::startsWith(a2, this[9])
      || icu::StringSegment::startsWith(a2, (const icu::UnicodeString *)(this + 1));
}

uint64_t icu::numparse::impl::SymbolMatcher::toString@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)"<");
}

icu::numparse::impl::IgnorablesMatcher *icu::numparse::impl::IgnorablesMatcher::IgnorablesMatcher( icu::numparse::impl::IgnorablesMatcher *this, __int16 a2)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  uint64_t v6 = (UChar *)off_18971B688;
  __int16 v7 = 2;
  if (a2 < 0) {
    int v3 = 2;
  }
  else {
    int v3 = 1;
  }
  icu::numparse::impl::SymbolMatcher::SymbolMatcher((uint64_t)this, &v6, v3);
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)&v6);
  *(void *)this = off_189728CE0;
  return this;
}

uint64_t icu::numparse::impl::IgnorablesMatcher::isFlexible(icu::numparse::impl::IgnorablesMatcher *this)
{
  return 1LL;
}

uint64_t icu::numparse::impl::IgnorablesMatcher::toString@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)L"<Ignorables>");
}

uint64_t icu::numparse::impl::IgnorablesMatcher::isDisabled( icu::numparse::impl::IgnorablesMatcher *this, const icu::numparse::impl::ParsedNumber *a2)
{
  return 0LL;
}

void *sub_1809489FC(uint64_t a1, uint64_t a2)
{
  double result = (void *)icu::numparse::impl::SymbolMatcher::SymbolMatcher(a1, (UChar **)(a2 + 904), 15);
  *double result = off_189728D38;
  return result;
}

uint64_t sub_180948A24(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 76) >> 7;
}

uint64_t sub_180948A30(int a1, const icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *this)
{
  *((_DWORD *)this + 19) |= 0x80u;
  return icu::numparse::impl::ParsedNumber::setCharsConsumed(this, a2);
}

uint64_t icu::numparse::impl::MinusSignMatcher::MinusSignMatcher( icu::numparse::impl::MinusSignMatcher *this, UChar **a2, char a3)
{
  uint64_t result = icu::numparse::impl::SymbolMatcher::SymbolMatcher((uint64_t)this, a2 + 49, 11);
  *(void *)uint64_t result = off_189728D90;
  *(_BYTE *)(result + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = a3;
  return result;
}

{
  uint64_t result;
  uint64_t result = icu::numparse::impl::SymbolMatcher::SymbolMatcher((uint64_t)this, a2 + 49, 11);
  *(void *)uint64_t result = off_189728D90;
  *(_BYTE *)(result + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = a3;
  return result;
}

uint64_t icu::numparse::impl::MinusSignMatcher::isDisabled( icu::numparse::impl::MinusSignMatcher *this, const icu::numparse::impl::ParsedNumber *a2)
{
  if (*((_BYTE *)this + 80)) {
    return 0LL;
  }
  else {
    return icu::numparse::impl::ParsedNumber::seenNumber(a2);
  }
}

uint64_t icu::numparse::impl::MinusSignMatcher::accept( icu::numparse::impl::MinusSignMatcher *this, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3)
{
  *((_DWORD *)a3 + 19) |= 1u;
  return icu::numparse::impl::ParsedNumber::setCharsConsumed(a3, a2);
}

void *sub_180948AE0(uint64_t a1, uint64_t a2)
{
  uint64_t result = (void *)icu::numparse::impl::SymbolMatcher::SymbolMatcher(a1, (UChar **)(a2 + 968), 0);
  *uint64_t result = off_189728DE8;
  return result;
}

uint64_t sub_180948B08(int a1, icu::numparse::impl::ParsedNumber *this)
{
  return icu::numparse::impl::ParsedNumber::seenNumber(this);
}

uint64_t sub_180948B10(int a1, const icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *this)
{
  *((_DWORD *)this + 19) |= 0x40u;
  return icu::numparse::impl::ParsedNumber::setCharsConsumed(this, a2);
}

void *sub_180948B24(uint64_t a1, UChar **a2)
{
  uint64_t result = (void *)icu::numparse::impl::SymbolMatcher::SymbolMatcher(a1, a2, 0);
  *uint64_t result = off_189728E40;
  return result;
}

uint64_t sub_180948B48()
{
  return 1LL;
}

uint64_t sub_180948B50()
{
  return 0LL;
}

void *icu::numparse::impl::PercentMatcher::PercentMatcher( icu::numparse::impl::PercentMatcher *this, UChar **a2)
{
  uint64_t result = (void *)icu::numparse::impl::SymbolMatcher::SymbolMatcher((uint64_t)this, a2 + 25, 13);
  *uint64_t result = off_189728E98;
  return result;
}

{
  void *result;
  uint64_t result = (void *)icu::numparse::impl::SymbolMatcher::SymbolMatcher((uint64_t)this, a2 + 25, 13);
  *uint64_t result = off_189728E98;
  return result;
}

uint64_t icu::numparse::impl::PercentMatcher::isDisabled( icu::numparse::impl::PercentMatcher *this, const icu::numparse::impl::ParsedNumber *a2)
{
  return (*((unsigned __int8 *)a2 + 76) >> 1) & 1;
}

uint64_t icu::numparse::impl::PercentMatcher::accept( icu::numparse::impl::PercentMatcher *this, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3)
{
  *((_DWORD *)a3 + 19) |= 2u;
  return icu::numparse::impl::ParsedNumber::setCharsConsumed(a3, a2);
}

void *icu::numparse::impl::PermilleMatcher::PermilleMatcher( icu::numparse::impl::PermilleMatcher *this, UChar **a2)
{
  uint64_t result = (void *)icu::numparse::impl::SymbolMatcher::SymbolMatcher((uint64_t)this, a2 + 97, 14);
  *uint64_t result = off_189728EF0;
  return result;
}

{
  void *result;
  uint64_t result = (void *)icu::numparse::impl::SymbolMatcher::SymbolMatcher((uint64_t)this, a2 + 97, 14);
  *uint64_t result = off_189728EF0;
  return result;
}

uint64_t icu::numparse::impl::PermilleMatcher::isDisabled( icu::numparse::impl::PermilleMatcher *this, const icu::numparse::impl::ParsedNumber *a2)
{
  return (*((unsigned __int8 *)a2 + 76) >> 2) & 1;
}

uint64_t icu::numparse::impl::PermilleMatcher::accept( icu::numparse::impl::PermilleMatcher *this, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3)
{
  *((_DWORD *)a3 + 19) |= 4u;
  return icu::numparse::impl::ParsedNumber::setCharsConsumed(a3, a2);
}

uint64_t icu::numparse::impl::PlusSignMatcher::PlusSignMatcher( icu::numparse::impl::PlusSignMatcher *this, UChar **a2, char a3)
{
  uint64_t result = icu::numparse::impl::SymbolMatcher::SymbolMatcher((uint64_t)this, a2 + 57, 12);
  *(void *)uint64_t result = off_189728F48;
  *(_BYTE *)(result + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = a3;
  return result;
}

{
  uint64_t result;
  uint64_t result = icu::numparse::impl::SymbolMatcher::SymbolMatcher((uint64_t)this, a2 + 57, 12);
  *(void *)uint64_t result = off_189728F48;
  *(_BYTE *)(result + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = a3;
  return result;
}

uint64_t icu::numparse::impl::PlusSignMatcher::isDisabled( icu::numparse::impl::PlusSignMatcher *this, const icu::numparse::impl::ParsedNumber *a2)
{
  if (*((_BYTE *)this + 80)) {
    return 0LL;
  }
  else {
    return icu::numparse::impl::ParsedNumber::seenNumber(a2);
  }
}

uint64_t icu::numparse::impl::PlusSignMatcher::accept( icu::numparse::impl::PlusSignMatcher *this, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3)
{
  return icu::numparse::impl::ParsedNumber::setCharsConsumed(a3, a2);
}

void sub_180948CCC(uint64_t a1)
{
  *(void *)a1 = off_189728C88;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_180948CFC(uint64_t a1)
{
  *(void *)a1 = off_189728C88;
  icu::UnicodeString::~UnicodeString(off_189728C88, (icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
  icu::UMemory::operator delete(v2);
}

void sub_180948D30(uint64_t a1)
{
  *(void *)a1 = off_189728C88;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_180948D60(uint64_t a1)
{
  *(void *)a1 = off_189728C88;
  icu::UnicodeString::~UnicodeString(off_189728C88, (icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
  icu::UMemory::operator delete(v2);
}

void sub_180948D94(uint64_t a1)
{
  *(void *)a1 = off_189728C88;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_180948DC4(uint64_t a1)
{
  *(void *)a1 = off_189728C88;
  icu::UnicodeString::~UnicodeString(off_189728C88, (icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
  icu::UMemory::operator delete(v2);
}

void sub_180948DF8(uint64_t a1)
{
  *(void *)a1 = off_189728C88;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_180948E28(uint64_t a1)
{
  *(void *)a1 = off_189728C88;
  icu::UnicodeString::~UnicodeString(off_189728C88, (icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
  icu::UMemory::operator delete(v2);
}

void sub_180948E5C(uint64_t a1)
{
  *(void *)a1 = off_189728C88;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_180948E8C(uint64_t a1)
{
  *(void *)a1 = off_189728C88;
  icu::UnicodeString::~UnicodeString(off_189728C88, (icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
  icu::UMemory::operator delete(v2);
}

void sub_180948EC0(uint64_t a1)
{
  *(void *)a1 = off_189728C88;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_180948EF0(uint64_t a1)
{
  *(void *)a1 = off_189728C88;
  icu::UnicodeString::~UnicodeString(off_189728C88, (icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
  icu::UMemory::operator delete(v2);
}

void sub_180948F24(uint64_t a1)
{
  *(void *)a1 = off_189728C88;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_180948F54(uint64_t a1)
{
  *(void *)a1 = off_189728C88;
  icu::UnicodeString::~UnicodeString(off_189728C88, (icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
  icu::UMemory::operator delete(v2);
}

void sub_180948F88(uint64_t a1)
{
  *(void *)a1 = off_189728C88;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_180948FB8(uint64_t a1)
{
  *(void *)a1 = off_189728C88;
  icu::UnicodeString::~UnicodeString(off_189728C88, (icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
  icu::UMemory::operator delete(v2);
}

void sub_180948FEC(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(a2 + 88) & 1) != 0 || (*(_WORD *)(a2 + 152) & 1) != 0) {
    *(_DWORD *)(a2 + 76) |= 0x100u;
  }
}

uint64_t sub_18094900C@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)"<");
}

void sub_18094901C(uint64_t a1, uint64_t a2)
{
  if (!*(_WORD *)(a2 + 208)) {
    *(_DWORD *)(a2 + 76) |= 0x100u;
  }
}

uint64_t sub_180949038@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)L"<ReqCurrency>");
}

uint64_t sub_180949048(uint64_t result, char a2)
{
  *(void *)uint64_t result = &off_189729098;
  *(_BYTE *)(result + 8) = a2;
  return result;
}

uint64_t sub_18094905C(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 76);
  if (((v2 >> 5) & 1) != *(_BYTE *)(result + 8)) {
    *(_DWORD *)(a2 + 76) = v2 | 0x100;
  }
  return result;
}

uint64_t sub_18094907C@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)L"<ReqDecimal>");
}

uint64_t sub_18094908C(int a1, icu::numparse::impl::ParsedNumber *this)
{
  uint64_t result = icu::numparse::impl::ParsedNumber::seenNumber(this);
  if ((result & 1) == 0) {
    *((_DWORD *)this + 19) |= 0x100u;
  }
  return result;
}

uint64_t sub_1809490C0@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)"<");
}

void *sub_1809490D0(void *a1, uint64_t a2)
{
  *a1 = off_1897290E0;
  icu::number::Scale::Scale((uint64_t)(a1 + 1), a2);
  return a1;
}

void sub_180949100(uint64_t a1, icu::number::impl::DecimalQuantity *a2)
{
  if (!*((_BYTE *)a2 + 8)) {
    icu::number::Scale::applyReciprocalTo((icu::number::Scale *)(a1 + 8), a2);
  }
}

uint64_t sub_180949114@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)"<");
}

void sub_180949128(icu::numparse::impl::NumberParseMatcher *a1)
{
}

uint64_t sub_18094913C()
{
  return 0LL;
}

uint64_t sub_180949144()
{
  return 0LL;
}

void sub_180949150(icu::numparse::impl::NumberParseMatcher *a1)
{
}

void sub_180949168(icu::numparse::impl::NumberParseMatcher *a1)
{
}

void sub_180949180(icu::numparse::impl::NumberParseMatcher *a1)
{
}

void sub_180949194(uint64_t a1)
{
  *(void *)a1 = off_1897290E0;
  icu::number::Scale::~Scale((icu::number::Scale *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_1809491C4(uint64_t a1)
{
  *(void *)a1 = off_1897290E0;
  icu::number::Scale::~Scale((icu::number::Scale *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
  icu::UMemory::operator delete(v2);
}

uint64_t *unumrf_openResult(_DWORD *a1, unint64_t a2)
{
  unsigned int v2 = (uint64_t *)*a1;
  uint64_t v5 = icu::UMemory::operator new(v2, (icu::UMemory *)0x1F8, a2);
  int v3 = v5;
  if (v5)
  {
    *(_DWORD *)uint64_t v5 = 1430672896;
    v5[1] = 0LL;
    *((_DWORD *)v5 + 4) = 1178881536;
    void v5[3] = (uint64_t)off_189727ED0;
    v5[4] = (uint64_t)(v5 + 6);
    *((_DWORD *)v5 + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
    sub_180949B18((uint64_t)(v5 + 6));
    v3[1] = (uint64_t)(v3 + 3);
  }

  else
  {
    *a1 = 7;
  }

  return v3;
}

uint64_t unumrf_resultAsValue(uint64_t result, int *a2)
{
  int v2 = *a2;
  if (*a2 > 0)
  {
    uint64_t result = 0LL;
    goto LABEL_8;
  }

  if (result)
  {
    if (*(_DWORD *)(result + 16) == 1178881536) {
      goto LABEL_8;
    }
    int v2 = 3;
  }

  else
  {
    int v2 = 1;
  }

  uint64_t result = 0LL;
  *a2 = v2;
LABEL_8:
  if (v2 >= 1) {
    return 0LL;
  }
  return result;
}

void unumrf_closeResult(_DWORD *a1)
{
  if (a1)
  {
    if (a1[4] == 1178881536)
    {
      *((void *)a1 + 4) = 0LL;
      sub_180933578((void **)a1 + 6);
      icu::number::FormattedNumberRange::~FormattedNumberRange((icu::number::FormattedNumberRange *)(a1 + 6));
      a1[4] = 0;
      *a1 = 0;
      icu::UMemory::operator delete(a1);
    }
  }

uint64_t sub_18094933C(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 > 0)
  {
    a1 = 0LL;
    goto LABEL_8;
  }

  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1178881536) {
      goto LABEL_8;
    }
    int v2 = 3;
  }

  else
  {
    int v2 = 1;
  }

  a1 = 0LL;
  *a2 = v2;
LABEL_8:
  if (v2 >= 1) {
    return 0LL;
  }
  else {
    return a1 + 48;
  }
}

uint64_t *unumrf_openForSkeletonWithCollapseAndIdentityFallback(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1895F8858](a1);
  int v3 = v2;
  uint64_t v5 = v4;
  __int16 v7 = v6;
  int v9 = v8;
  int v11 = v10;
  int v13 = v12;
  uint64_t v14 = v1;
  int v39 = (uint64_t *)*MEMORY[0x1895F89C0];
  int v15 = icu::UMemory::operator new(v39, (icu::UMemory *)0x4C8, v12);
  uint64_t v16 = v15;
  if (v15)
  {
    bzero(v15, 0x4C8uLL);
    *(_DWORD *)uint64_t v16 = 1314014720;
    sub_180949B68((uint64_t)(v16 + 1));
    v16[152] = 0LL;
    memset(v38, 0, 64);
    uint64_t v24 = v14;
    icu::UnicodeString::UnicodeString(v38, v13 == -1, &v24);
    uint64_t v21 = v24;
    uint64_t v23 = 0LL;
    memset(v22, 0, sizeof(v22));
    icu::Locale::Locale(&v21, (icu::Locale *)v33, v7, 0LL, 0LL, 0LL);
    icu::number::NumberRangeFormatter::withLocale((icu::number::NumberRangeFormatter *)v33, (uint64_t)v34);
    if (v5) {
      char v18 = v5;
    }
    else {
      char v18 = (const icu::UnicodeString *)v22;
    }
    icu::number::NumberFormatter::forSkeleton(v25, (icu::number::NumberFormatter *)v38, v18, v3, v17);
    icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::numberFormatterBoth( v35,  (uint64_t)v34,  (uint64_t)v25);
    icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::collapse( v36,  (uint64_t)v35,  v11);
    icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::identityFallback( v37,  (uint64_t)v36,  v9);
    icu::number::LocalizedNumberRangeFormatter::operator=((uint64_t)(v16 + 1), (uint64_t)v37);
    icu::number::LocalizedNumberRangeFormatter::~LocalizedNumberRangeFormatter((icu::number::LocalizedNumberRangeFormatter *)v37);
    icu::number::LocalizedNumberRangeFormatter::~LocalizedNumberRangeFormatter((icu::number::LocalizedNumberRangeFormatter *)v36);
    icu::number::LocalizedNumberRangeFormatter::~LocalizedNumberRangeFormatter((icu::number::LocalizedNumberRangeFormatter *)v35);
    icu::Locale::~Locale((icu::Locale *)&v32);
    icu::number::impl::StringProp::~StringProp(&v31);
    icu::number::impl::StringProp::~StringProp(&v30);
    icu::number::Scale::~Scale((icu::number::Scale *)&v29);
    icu::number::impl::SymbolsWrapper::~SymbolsWrapper((icu::number::impl::SymbolsWrapper *)&v28);
    icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v27);
    icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v26);
    icu::number::LocalizedNumberRangeFormatter::~LocalizedNumberRangeFormatter((icu::number::LocalizedNumberRangeFormatter *)v34);
    icu::Locale::~Locale((icu::Locale *)v33);
    icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v38);
  }

  else
  {
    v3->line = 7;
  }

  return v16;
}

_DWORD *unumrf_formatDoubleRange(_DWORD *result, uint64_t a2, UErrorCode *a3, double a4, double a5)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v6 = result;
    if (result)
    {
      if (*result != 1314014720)
      {
LABEL_8:
        int v13 = 3;
        goto LABEL_9;
      }

      if (a2)
      {
        if (*(_DWORD *)(a2 + 16) == 1178881536)
        {
          int v10 = (_DWORD *)(a2 + 48);
          icu::FormattedValueStringBuilderImpl::resetString((icu::FormattedValueStringBuilderImpl *)(a2 + 48));
          int v11 = (void **)(a2 + 352);
          icu::number::impl::DecimalQuantity::clear((void **)(a2 + 352));
          unint64_t v12 = (void **)(a2 + 424);
          icu::number::impl::DecimalQuantity::clear(v12);
          icu::number::impl::DecimalQuantity::setToDouble(v11, a4);
          icu::number::impl::DecimalQuantity::setToDouble(v12, a5);
          return icu::number::LocalizedNumberRangeFormatter::formatImpl( (icu::number::LocalizedNumberRangeFormatter *)(v6 + 2),  v10,  a4 == a5,  a3);
        }

        goto LABEL_8;
      }
    }

    int v13 = 1;
LABEL_9:
    *a3 = v13;
  }

  return result;
}

_DWORD *unumrf_formatDecimalRange( _DWORD *result, const char *a2, int a3, const char *a4, int a5, uint64_t a6, UErrorCode *a7)
{
  if (*(int *)a7 <= 0)
  {
    int v8 = result;
    if (result)
    {
      if (*result != 1314014720)
      {
LABEL_8:
        int v17 = 3;
        goto LABEL_9;
      }

      if (a6)
      {
        if (*(_DWORD *)(a6 + 16) == 1178881536)
        {
          uint64_t v14 = (_DWORD *)(a6 + 48);
          icu::FormattedValueStringBuilderImpl::resetString((icu::FormattedValueStringBuilderImpl *)(a6 + 48));
          uint64_t v15 = a6 + 352;
          icu::number::impl::DecimalQuantity::clear((void **)(a6 + 352));
          uint64_t v16 = (void **)(a6 + 424);
          icu::number::impl::DecimalQuantity::clear(v16);
          icu::number::impl::DecimalQuantity::setToDecNumber(v15, a2, a3, a7);
          icu::number::impl::DecimalQuantity::setToDecNumber((uint64_t)v16, a4, a5, a7);
          return icu::number::LocalizedNumberRangeFormatter::formatImpl( (icu::number::LocalizedNumberRangeFormatter *)(v8 + 2),  v14,  a2 == a4,  a7);
        }

        goto LABEL_8;
      }
    }

    int v17 = 1;
LABEL_9:
    *a7 = v17;
  }

  return result;
}

uint64_t unumrf_resultGetIdentityResult(uint64_t a1, int *a2)
{
  if (*a2 <= 0)
  {
    if (a1)
    {
      if (*(_DWORD *)(a1 + 16) == 1178881536) {
        return *(unsigned int *)(a1 + 496);
      }
      int v3 = 3;
    }

    else
    {
      int v3 = 1;
    }

    *a2 = v3;
  }

  return 3LL;
}

uint64_t unumrf_resultGetFirstDecimalNumber(uint64_t a1, char *a2, int a3, UErrorCode *a4)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    int v10 = 1;
LABEL_11:
    uint64_t v4 = 0LL;
    *a4 = v10;
    return v4;
  }

  if (*(_DWORD *)(a1 + 16) != 1178881536)
  {
    int v10 = 3;
    goto LABEL_11;
  }

  memset(v14, 0, sizeof(v14));
  icu::number::impl::DecNum::DecNum((icu::number::impl::DecNum *)v14);
  int v9 = icu::number::impl::DecimalQuantity::toDecNum( (icu::number::impl::DecimalQuantity *)(a1 + 352),  (icu::number::impl::DecNum *)v14,  a4);
  memset(&v13[1], 0, 56);
  v12[1] = 0LL;
  v13[0] = (char *)&v13[1] + 5;
  LODWORD(v13[1]) = 40;
  v12[0] = 0LL;
  icu::CharStringByteSink::CharStringByteSink(v12, (uint64_t)v13);
  icu::number::impl::DecNum::toString(v9, (icu::ByteSink *)v12, a4);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v12);
  uint64_t v4 = icu::CharString::extract(v13, a2, a3, a4);
  if (BYTE4(v13[1])) {
    uprv_free(v13[0]);
  }
  if (BYTE12(v14[0])) {
    uprv_free(*(void **)&v14[0]);
  }
  return v4;
}

uint64_t unumrf_resultGetSecondDecimalNumber(uint64_t a1, char *a2, int a3, UErrorCode *a4)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    int v10 = 1;
LABEL_11:
    uint64_t v4 = 0LL;
    *a4 = v10;
    return v4;
  }

  if (*(_DWORD *)(a1 + 16) != 1178881536)
  {
    int v10 = 3;
    goto LABEL_11;
  }

  memset(v14, 0, sizeof(v14));
  icu::number::impl::DecNum::DecNum((icu::number::impl::DecNum *)v14);
  int v9 = icu::number::impl::DecimalQuantity::toDecNum( (icu::number::impl::DecimalQuantity *)(a1 + 424),  (icu::number::impl::DecNum *)v14,  a4);
  memset(&v13[1], 0, 56);
  v12[1] = 0LL;
  v13[0] = (char *)&v13[1] + 5;
  LODWORD(v13[1]) = 40;
  v12[0] = 0LL;
  icu::CharStringByteSink::CharStringByteSink(v12, (uint64_t)v13);
  icu::number::impl::DecNum::toString(v9, (icu::ByteSink *)v12, a4);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v12);
  uint64_t v4 = icu::CharString::extract(v13, a2, a3, a4);
  if (BYTE4(v13[1])) {
    uprv_free(v13[0]);
  }
  if (BYTE12(v14[0])) {
    uprv_free(*(void **)&v14[0]);
  }
  return v4;
}

void unumrf_close(_DWORD *a1)
{
  if (a1)
  {
    if (*a1 == 1314014720)
    {
      icu::number::LocalizedNumberRangeFormatter::~LocalizedNumberRangeFormatter((icu::number::LocalizedNumberRangeFormatter *)(a1 + 2));
      *a1 = 0;
      icu::UMemory::operator delete(a1);
    }
  }

uint64_t sub_180949B18(uint64_t a1)
{
  int v2 = (void *)icu::FormattedValueStringBuilderImpl::FormattedValueStringBuilderImpl(a1, 0);
  *int v2 = off_189727F10;
  icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)(v2 + 38));
  icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)(a1 + 376));
  *(_DWORD *)(a1 + 448) = 3;
  return a1;
}

uint64_t sub_180949B68(uint64_t a1)
{
  *(_BYTE *)(a1 + 968) = 1;
  *(void *)(a1 + 972) = 0x200000000LL;
  icu::Locale::Locale((icu::Locale *)(a1 + 984));
  return a1;
}

icu::Locale *icu::number::NumberRangeFormatterSettings<icu::number::UnlocalizedNumberRangeFormatter>::numberFormatterBoth@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 1;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 1;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 1;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 1;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

icu::Locale *icu::number::NumberRangeFormatterSettings<icu::number::UnlocalizedNumberRangeFormatter>::numberFormatterFirst@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

icu::Locale *icu::number::NumberRangeFormatterSettings<icu::number::UnlocalizedNumberRangeFormatter>::numberFormatterSecond@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 488), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 488), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 488), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 488), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

uint64_t icu::number::NumberRangeFormatterSettings<icu::number::UnlocalizedNumberRangeFormatter>::collapse@<X0>( uint64_t a1@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  uint64_t result = icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  a3[243] = a2;
  return result;
}

{
  uint64_t result;
  bzero(a3, 0x4C0uLL);
  uint64_t result = icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  a3[243] = a2;
  return result;
}

uint64_t icu::number::NumberRangeFormatterSettings<icu::number::UnlocalizedNumberRangeFormatter>::identityFallback@<X0>( uint64_t a1@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  uint64_t result = icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  a3[244] = a2;
  return result;
}

{
  uint64_t result;
  bzero(a3, 0x4C0uLL);
  uint64_t result = icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  a3[244] = a2;
  return result;
}

uint64_t *icu::number::NumberRangeFormatterSettings<icu::number::UnlocalizedNumberRangeFormatter>::clone@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0x4C0, a2);
  if (result) {
    uint64_t result = (uint64_t *)icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter( (uint64_t)result,  a1);
  }
  *a3 = (uint64_t)result;
  return result;
}

{
  uint64_t *result;
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0x4C0, a2);
  if (result) {
    uint64_t result = (uint64_t *)icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter( (uint64_t)result,  a1);
  }
  *a3 = (uint64_t)result;
  return result;
}

BOOL icu::number::NumberRangeFormatterSettings<icu::number::UnlocalizedNumberRangeFormatter>::copyErrorTo( uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 1LL;
  }
  sub_18094A2AC(a1, a2);
  return *a2 > 0;
}

BOOL sub_18094A2AC(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 1LL;
  }
  sub_18092486C(a1 + 8, a2);
  if (*a2 > 0) {
    return 1LL;
  }
  sub_18092486C(a1 + 488, a2);
  return *a2 > 0;
}

icu::Locale *icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::numberFormatterBoth@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 1;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 1;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 1;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 1;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

icu::Locale *icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::numberFormatterFirst@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

icu::Locale *icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::numberFormatterSecond@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 488), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 488), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 488), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 488), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

uint64_t icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::collapse@<X0>( uint64_t a1@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  uint64_t result = icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  a3[243] = a2;
  return result;
}

{
  uint64_t result;
  bzero(a3, 0x4C0uLL);
  uint64_t result = icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  a3[243] = a2;
  return result;
}

uint64_t icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::identityFallback@<X0>( uint64_t a1@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  uint64_t result = icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  a3[244] = a2;
  return result;
}

{
  uint64_t result;
  bzero(a3, 0x4C0uLL);
  uint64_t result = icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  a3[244] = a2;
  return result;
}

uint64_t *icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::clone@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0x4C0, a2);
  if (result) {
    uint64_t result = (uint64_t *)icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)result, a1);
  }
  *a3 = (uint64_t)result;
  return result;
}

{
  uint64_t *result;
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0x4C0, a2);
  if (result) {
    uint64_t result = (uint64_t *)icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)result, a1);
  }
  *a3 = (uint64_t)result;
  return result;
}

BOOL icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::copyErrorTo( uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 1LL;
  }
  sub_18094A2AC(a1, a2);
  return *a2 > 0;
}

uint64_t icu::number::NumberRangeFormatter::with@<X0>(void *a1@<X8>)
{
  return sub_180949B68((uint64_t)a1);
}

void **icu::number::NumberRangeFormatter::withLocale@<X0>( icu::number::NumberRangeFormatter *this@<X0>, uint64_t a2@<X8>)
{
  v6[152] = *(void **)MEMORY[0x1895F89C0];
  bzero(v6, 0x4C0uLL);
  sub_180949B68((uint64_t)v6);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter(a2, (uint64_t)v6, (uint64_t)this);
  return sub_18094B35C(v6);
}

uint64_t icu::number::UnlocalizedNumberRangeFormatter::locale@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter(a3, a1, a2);
}

{
  return icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter(a3, a1, a2);
}

uint64_t icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 968);
  *(_DWORD *)(a1 + 976) = *(_DWORD *)(a2 + 976);
  *(void *)(a1 + 968) = v4;
  icu::Locale::Locale((icu::Locale *)(a1 + 984), a2 + 984);
  return a1;
}

{
  uint64_t v4;
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(a1 + 8, a2 + 8);
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(a1 + 488, a2 + 488);
  uint64_t v4 = *(void *)(a2 + 968);
  *(_DWORD *)(a1 + 976) = *(_DWORD *)(a2 + 976);
  *(void *)(a1 + 968) = v4;
  icu::Locale::Locale(a1 + 984, a2 + 984);
  return a1;
}

uint64_t icu::number::UnlocalizedNumberRangeFormatter::operator=(uint64_t a1, uint64_t a2)
{
  icu::number::UnlocalizedNumberFormatter::operator=(a1 + 8, a2 + 8);
  icu::number::UnlocalizedNumberFormatter::operator=(a1 + 488, a2 + 488);
  int v4 = *(_DWORD *)(a2 + 976);
  *(void *)(a1 + 968) = *(void *)(a2 + 968);
  *(_DWORD *)(a1 + 976) = v4;
  icu::Locale::operator=((icu::Locale *)(a1 + 984), a2 + 984);
  return a1;
}

{
  int v4;
  icu::number::UnlocalizedNumberFormatter::operator=(a1 + 8, a2 + 8);
  icu::number::UnlocalizedNumberFormatter::operator=(a1 + 488, a2 + 488);
  int v4 = *(_DWORD *)(a2 + 976);
  *(void *)(a1 + 968) = *(void *)(a2 + 968);
  *(_DWORD *)(a1 + 976) = v4;
  icu::Locale::operator=(a1 + 984, a2 + 984);
  return a1;
}

uint64_t icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 968);
  *(_DWORD *)(a1 + 976) = *(_DWORD *)(a2 + 976);
  *(void *)(a1 + 968) = v4;
  icu::Locale::Locale((icu::Locale *)(a1 + 984), a2 + 984);
  *(void *)(a1 + 1208) = 0LL;
  return a1;
}

{
  uint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(a1 + 8, a2 + 8);
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(a1 + 488, a2 + 488);
  uint64_t v4 = *(void *)(a2 + 968);
  *(_DWORD *)(a1 + 976) = *(_DWORD *)(a2 + 976);
  *(void *)(a1 + 968) = v4;
  icu::Locale::Locale(a1 + 984, a2 + 984);
  uint64_t v5 = (unint64_t *)(a1 + 1208);
  *(void *)(a1 + 1208) = 0LL;
  uint64_t v6 = (unint64_t *)(a2 + 1208);
  do
    __int16 v7 = __ldaxr(v6);
  while (__stlxr(0LL, v6));
  do
    int v8 = __ldaxr(v5);
  while (__stlxr(v7, v5));
  if (v8)
  {
    if (*(_BYTE *)(v8 + 1908)) {
      uprv_free(*(void **)(v8 + 1896));
    }
    sub_180927784(v8 + 1296);
    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(v8 + 1224));
    sub_180927784(v8 + 608);
    sub_180927784(v8 + 8);
    icu::UMemory::operator delete((void *)v8);
  }

  return a1;
}

uint64_t sub_18094AD60(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 1908)) {
    uprv_free(*(void **)(a1 + 1896));
  }
  sub_180927784(a1 + 1296);
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 1224));
  sub_180927784(a1 + 608);
  sub_180927784(a1 + 8);
  return a1;
}

uint64_t icu::number::LocalizedNumberRangeFormatter::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    icu::number::UnlocalizedNumberFormatter::operator=(a1 + 8, a2 + 8);
    icu::number::UnlocalizedNumberFormatter::operator=(a1 + 488, a2 + 488);
    int v4 = *(_DWORD *)(a2 + 976);
    *(void *)(a1 + 968) = *(void *)(a2 + 968);
    *(_DWORD *)(a1 + 976) = v4;
    icu::Locale::operator=((icu::Locale *)(a1 + 984), a2 + 984);
    uint64_t v5 = (unint64_t *)(a1 + 1208);
    do
      unint64_t v6 = __ldaxr(v5);
    while (__stlxr(0LL, v5));
    if (v6)
    {
      if (*(_BYTE *)(v6 + 1908)) {
        uprv_free(*(void **)(v6 + 1896));
      }
      sub_180927784(v6 + 1296);
      icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(v6 + 1224));
      sub_180927784(v6 + 608);
      sub_180927784(v6 + 8);
      icu::UMemory::operator delete((void *)v6);
    }
  }

  return a1;
}

{
  int v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  icu::number::UnlocalizedNumberFormatter::operator=(a1 + 8, a2 + 8);
  icu::number::UnlocalizedNumberFormatter::operator=(a1 + 488, a2 + 488);
  int v4 = *(_DWORD *)(a2 + 976);
  *(void *)(a1 + 968) = *(void *)(a2 + 968);
  *(_DWORD *)(a1 + 976) = v4;
  icu::Locale::operator=(a1 + 984, a2 + 984);
  uint64_t v5 = (unint64_t *)(a2 + 1208);
  do
    unint64_t v6 = __ldaxr(v5);
  while (__stlxr(0LL, v5));
  __int16 v7 = (unint64_t *)(a1 + 1208);
  do
    int v8 = __ldaxr(v7);
  while (__stlxr(v6, v7));
  if (v8)
  {
    if (*(_BYTE *)(v8 + 1908)) {
      uprv_free(*(void **)(v8 + 1896));
    }
    sub_180927784(v8 + 1296);
    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(v8 + 1224));
    sub_180927784(v8 + 608);
    sub_180927784(v8 + 8);
    icu::UMemory::operator delete((void *)v8);
  }

  return a1;
}

void icu::number::LocalizedNumberRangeFormatter::~LocalizedNumberRangeFormatter(void **this)
{
  int v2 = (unint64_t *)(this + 151);
  do
    unint64_t v3 = __ldaxr(v2);
  while (__stlxr(0LL, v2));
  if (v3)
  {
    if (*(_BYTE *)(v3 + 1908)) {
      uprv_free(*(void **)(v3 + 1896));
    }
    sub_180927784(v3 + 1296);
    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(v3 + 1224));
    sub_180927784(v3 + 608);
    sub_180927784(v3 + 8);
    icu::UMemory::operator delete((void *)v3);
  }

  sub_18094B35C(this);
}

uint64_t icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_180949B68(a1);
  *(void *)(v6 + 1208) = 0LL;
  icu::number::UnlocalizedNumberFormatter::operator=(v6 + 8, a2 + 8);
  icu::number::UnlocalizedNumberFormatter::operator=(a1 + 488, a2 + 488);
  int v7 = *(_DWORD *)(a2 + 976);
  *(void *)(a1 + 968) = *(void *)(a2 + 968);
  *(_DWORD *)(a1 + 976) = v7;
  icu::Locale::operator=((icu::Locale *)(a1 + 984), a2 + 984);
  icu::Locale::operator=((icu::Locale *)(a1 + 984), a3);
  icu::Locale::operator=((icu::Locale *)(a1 + 256), a1 + 984);
  icu::Locale::operator=((icu::Locale *)(a1 + 736), a1 + 984);
  return a1;
}

{
  uint64_t v6;
  int v7;
  uint64_t v6 = sub_180949B68(a1);
  *(void *)(v6 + 1208) = 0LL;
  icu::number::UnlocalizedNumberFormatter::operator=(v6 + 8, a2 + 8);
  icu::number::UnlocalizedNumberFormatter::operator=(a1 + 488, a2 + 488);
  int v7 = *(_DWORD *)(a2 + 976);
  *(void *)(a1 + 968) = *(void *)(a2 + 968);
  *(_DWORD *)(a1 + 976) = v7;
  icu::Locale::operator=(a1 + 984, a2 + 984);
  icu::Locale::operator=((icu::Locale *)(a1 + 984), a3);
  icu::Locale::operator=((icu::Locale *)(a1 + 256), a1 + 984);
  icu::Locale::operator=((icu::Locale *)(a1 + 736), a1 + 984);
  return a1;
}

void icu::number::LocalizedNumberRangeFormatter::formatFormattableRange( icu::number::LocalizedNumberRangeFormatter *this@<X0>, const icu::Formattable *a2@<X1>, const icu::Formattable *a3@<X2>, UErrorCode *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = (uint64_t *)*(unsigned int *)a4;
  if ((int)v6 <= 0)
  {
    int v13 = icu::UMemory::operator new(v6, (icu::UMemory *)0x1C8, (unint64_t)a2);
    int v7 = v13;
    if (v13)
    {
      sub_180949B18((uint64_t)v13);
      icu::Formattable::populateDecimalQuantity(a2, (icu::number::impl::DecimalQuantity *)(v7 + 38), a4);
      UErrorCode v8 = *a4;
      if (*(int *)a4 <= 0
        && (icu::Formattable::populateDecimalQuantity(a3, (icu::number::impl::DecimalQuantity *)(v7 + 47), a4),
            UErrorCode v8 = *a4,
            *(int *)a4 <= 0))
      {
        int v14 = icu::Formattable::operator==((uint64_t)a2, (uint64_t)a3);
        icu::number::LocalizedNumberRangeFormatter::formatImpl(this, v7, v14, a4);
        if (*(int *)a4 < 1)
        {
          UErrorCode v8 = U_ZERO_ERROR;
        }

        else
        {
          (*(void (**)(uint64_t *))(*v7 + 8))(v7);
          int v7 = 0LL;
          UErrorCode v8 = *a4;
        }
      }

      else
      {
        int v7 = 0LL;
      }
    }

    else
    {
      UErrorCode v8 = U_MEMORY_ALLOCATION_ERROR;
      *a4 = U_MEMORY_ALLOCATION_ERROR;
    }
  }

  else
  {
    int v7 = 0LL;
    UErrorCode v8 = U_ILLEGAL_ARGUMENT_ERROR;
  }

  *(void *)a5 = off_189727ED0;
  *(void *)(a5 + 8) = v7;
  *(_DWORD *)(a5 + 16) = v8;
}

void *icu::number::LocalizedNumberRangeFormatter::formatImpl( icu::number::LocalizedNumberRangeFormatter *a1, _DWORD *a2, int a3, UErrorCode *a4)
{
  uint64_t result = (void *)icu::number::LocalizedNumberRangeFormatter::getFormatter(a1, a4);
  if (*(int *)a4 <= 0)
  {
    if (result)
    {
      uint64_t result = sub_18094B90C(result, a2, a3, a4);
    }

    else
    {
      *a4 = U_INTERNAL_PROGRAM_ERROR;
    }
  }

  return result;
}

unint64_t icu::number::LocalizedNumberRangeFormatter::getFormatter( icu::number::LocalizedNumberRangeFormatter *this, UErrorCode *a2)
{
  int v2 = (uint64_t *)*(unsigned int *)a2;
  uint64_t v5 = (unint64_t *)((char *)this + 1208);
  unint64_t v3 = atomic_load((unint64_t *)this + 151);
  if (v3) {
    return v3;
  }
  UErrorCode v8 = icu::UMemory::operator new(v2, (icu::UMemory *)0x7A8, (unint64_t)a2);
  if (!v8)
  {
    if (*(int *)a2 < 1)
    {
      unint64_t v3 = 0LL;
      *a2 = U_MEMORY_ALLOCATION_ERROR;
      return v3;
    }

    return 0LL;
  }

  unint64_t v3 = (unint64_t)v8;
  sub_18094B908(v8, this, a2);
  if (*(int *)a2 >= 1)
  {
    if (*(_BYTE *)(v3 + 1908)) {
      uprv_free(*(void **)(v3 + 1896));
    }
    sub_180927784(v3 + 1296);
    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(v3 + 1224));
    sub_180927784(v3 + 608);
    sub_180927784(v3 + 8);
    icu::UMemory::operator delete((void *)v3);
    return 0LL;
  }

  do
  {
    unint64_t v9 = __ldaxr(v5);
    if (v9)
    {
      char v10 = 0;
      __clrex();
      goto LABEL_16;
    }
  }

  while (__stlxr(v3, v5));
  char v10 = 1;
LABEL_16:
  if ((v10 & 1) == 0)
  {
    int v11 = (void *)sub_18094AD60(v3);
    icu::UMemory::operator delete(v11);
    return v9;
  }

  return v3;
}

void **sub_18094B35C(void **a1)
{
  return a1;
}

uint64_t sub_18094B3F4(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  sub_180927C80(a1 + 8, a2 + 8, a3);
  sub_180927C80(a1 + 608, a2 + 488, a3);
  *(_BYTE *)(a1 + 1208) = *(_BYTE *)(a2 + 968);
  *(void *)(a1 + 1212) = *(void *)(a2 + 972);
  icu::UnicodeString::UnicodeString(a1 + 1232, 0);
  *(void *)(a1 + 1296) = 0LL;
  sub_180929650(a1 + 1304);
  __int128 v6 = 0uLL;
  *(_OWORD *)(a1 + 1864) = 0u;
  *(_OWORD *)(a1 + 188icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(_OWORD *)(a1 + 1848) = 0u;
  *(_OWORD *)(a1 + 180icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(void *)(a1 + 1896) = a1 + 1912;
  *(_DWORD *)(a1 + 1904) = 3;
  *(_BYTE *)(a1 + 1908) = 0;
  *(_DWORD *)(a1 + 1952) = 0;
  if (*(_BYTE *)(a1 + 1208) || (v8 = strcmp((const char *)(a1 + 188), (const char *)(a1 + 788)), __int128 v6 = 0uLL, !v8))
  {
    uint64_t v31 = 0LL;
    UErrorCode v30[2] = v6;
    v30[3] = v6;
    v30[0] = v6;
    v30[1] = v6;
    icu::UnicodeString::UnicodeString((uint64_t)v30 + 8, 0);
    if (*(int *)a3 <= 0)
    {
      uint64_t v7 = ures_open(0LL, *(char **)(a2 + 1024), (int *)a3);
      if (*(int *)a3 <= 0)
      {
        int v17 = &off_189729330;
        char v18 = v30;
        memset(&v32[1], 0, 56);
        v32[0] = (char *)&v32[1] + 5;
        LODWORD(v32[1]) = 40;
        icu::CharString::append((icu::CharString *)v32, "NumberElements/", -1, a3);
        icu::CharString::append((icu::CharString *)v32, (const char *)(a1 + 188), -1, a3);
        icu::CharString::append((icu::CharString *)v32, "/miscPatterns", -1, a3);
        if (*(int *)a3 <= 0)
        {
          UErrorCode v16 = U_ZERO_ERROR;
          ures_getAllItemsWithFallback(v7, (char *)v32[0], (uint64_t)&v17, (int *)&v16);
          if (v16 < U_ILLEGAL_ARGUMENT_ERROR || v16 == U_MISSING_RESOURCE_ERROR)
          {
            if (!sub_18094C830((uint64_t)&v17))
            {
              icu::UnicodeString::UnicodeString((uint64_t)v33, (uint64_t)"{");
              __src[1] = off_18971B688;
              LOWORD(v2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
              icu::SimpleFormatter::applyPatternMinMaxArguments( (icu::SimpleFormatter *)__src,  (const icu::UnicodeString *)v33,  0,  0x7FFFFFFF,  0,  a3);
              icu::SimpleFormatter::operator=((uint64_t)v18, (uint64_t)__src);
              icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)__src);
              icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v33);
            }
          }

          else
          {
            *a3 = v16;
          }
        }

        if (BYTE4(v32[1])) {
          uprv_free(v32[0]);
        }
        icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v17);
      }

      if (v7) {
        ures_close(v7);
      }
      if (*(int *)a3 <= 0)
      {
        icu::SimpleFormatter::operator=(a1 + 1224, (uint64_t)v30);
        if (*(_BYTE *)(a1 + 1208) && (*(_DWORD *)(a1 + 1216) - 1) <= 1)
        {
          uint64_t v29 = 0LL;
          memset(v28, 0, sizeof(v28));
          __int128 v27 = 0u;
          memset(v26, 0, sizeof(v26));
          __int128 v24 = 0u;
          __int128 v25 = 0u;
          __int128 v22 = 0u;
          __int128 v23 = 0u;
          *(_OWORD *)__src = 0u;
          __int128 v20 = 0u;
          *(void **)((char *)__src + 4) = *(void **)(a2 + 12);
          HIDWORD(__src[1]) = *(_DWORD *)(a2 + 20);
          __int128 v21 = 0u;
          icu::MeasureUnit::MeasureUnit((uint64_t)&v20, a2 + 24);
          icu::MeasureUnit::MeasureUnit((uint64_t)&v21 + 8, a2 + 48);
          __int128 v10 = *(_OWORD *)(a2 + 104);
          __int128 v24 = *(_OWORD *)(a2 + 88);
          __int128 v25 = v10;
          v26[0] = *(_OWORD *)(a2 + 120);
          *(void *)((char *)v26 + 13) = *(void *)(a2 + 133);
          __int128 v23 = *(_OWORD *)(a2 + 72);
          icu::number::impl::SymbolsWrapper::SymbolsWrapper( (icu::number::impl::SymbolsWrapper *)((char *)&v26[1] + 8),  (const icu::number::impl::SymbolsWrapper *)(a2 + 144));
          *(_OWORD *)((char *)&v26[2] + 8) = *(_OWORD *)(a2 + 160);
          icu::number::Scale::Scale((icu::number::Scale *)((char *)&v26[3] + 8), (const icu::number::Scale *)(a2 + 176));
          icu::number::impl::StringProp::StringProp((uint64_t)&v27, a2 + 200);
          icu::number::impl::StringProp::StringProp((uint64_t)v28, a2 + 216);
          v28[1] = *(_OWORD *)(a2 + 232);
          *(void *)((char *)&v28[1] + 14) = *(void *)(a2 + 246);
          icu::Locale::Locale((icu::Locale *)((char *)&v28[2] + 8), a2 + 256);
          LOBYTE(v26[3]) = 1;
          uint64_t v11 = sub_180927784(a1 + 1296);
          sub_180927C80(v11, (uint64_t)__src, a3);
          icu::Locale::~Locale((icu::Locale *)((char *)&v28[2] + 8));
          icu::number::impl::StringProp::~StringProp((void **)v28);
          icu::number::impl::StringProp::~StringProp((void **)&v27);
          icu::number::Scale::~Scale((icu::number::Scale *)((char *)&v26[3] + 8));
          icu::number::impl::SymbolsWrapper::~SymbolsWrapper((icu::number::impl::SymbolsWrapper *)((char *)&v26[1] + 8));
          icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)((char *)&v21 + 8));
          icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v20);
        }

        sub_18094FCEC(a2 + 984, a3, (uint64_t)__src);
        if (*(_BYTE *)(a1 + 1908)) {
          uprv_free(*(void **)(a1 + 1896));
        }
        uint64_t v12 = SLODWORD(__src[1]);
        *(_DWORD *)(a1 + 1904) = __src[1];
        int v13 = BYTE4(__src[1]);
        *(_BYTE *)(a1 + 1908) = BYTE4(__src[1]);
        int v14 = __src[0];
        if (__src[0] == &v20)
        {
          *(void *)(a1 + 1896) = a1 + 1912;
          memcpy((void *)(a1 + 1912), v14, 12 * v12);
          *(_DWORD *)(a1 + 1952) = DWORD2(v22);
          if (v13) {
            uprv_free(v14);
          }
        }

        else
        {
          *(void **)(a1 + 1896) = __src[0];
          __src[0] = &v20;
          LODWORD(__src[1]) = 3;
          BYTE4(__src[1]) = 0;
          *(_DWORD *)(a1 + 1952) = DWORD2(v22);
        }
      }
    }

    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v30);
  }

  else
  {
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
  }

  return a1;
}

void *sub_18094B90C(void *result, _DWORD *a2, int a3, UErrorCode *a4)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  uint64_t v7 = (uint64_t)result;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v35 = 0u;
  __int128 v33 = 0u;
  memset(v34, 0, sizeof(v34));
  __int128 v31 = 0u;
  memset(v32, 0, sizeof(v32));
  memset(v30, 0, sizeof(v30));
  __int128 v29 = 0u;
  memset(v28, 0, sizeof(v28));
  memset(v27, 0, sizeof(v27));
  sub_180929650((uint64_t)v27);
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v22 = 0u;
  __int128 v20 = 0u;
  memset(v21, 0, sizeof(v21));
  __int128 v18 = 0u;
  memset(v19, 0, sizeof(v19));
  memset(v17, 0, sizeof(v17));
  __int128 v16 = 0u;
  memset(v15, 0, sizeof(v15));
  memset(v14, 0, sizeof(v14));
  sub_180929650((uint64_t)v14);
  sub_1809284A0((uint64_t *)(v7 + 8), (icu::number::impl::DecimalQuantity *)(a2 + 76), (uint64_t)v27, a4);
  if (*(_BYTE *)(v7 + 1208)) {
    int v8 = (uint64_t *)(v7 + 8);
  }
  else {
    int v8 = (uint64_t *)(v7 + 608);
  }
  sub_1809284A0(v8, (icu::number::impl::DecimalQuantity *)(a2 + 94), (uint64_t)v14, a4);
  if (*(int *)a4 <= 0)
  {
    if ((*(unsigned int (**)(void, void))(**(void **)&v30[0] + 64LL))( *(void *)&v30[0],  *(void *)&v17[0])
      && (*(unsigned int (**)(void, void))(**((void **)&v29 + 1) + 64LL))( *((void *)&v29 + 1),  *((void *)&v16 + 1))
      && ((*(uint64_t (**)(void, void))(*(void *)v29 + 64LL))(v29, v16) & 1) != 0)
    {
      if (a3)
      {
        int v9 = 0;
        a2[112] = 0;
      }

      else if (icu::number::impl::DecimalQuantity::operator==( (icu::number::impl::DecimalQuantity *)(a2 + 76),  (uint64_t)(a2 + 94)))
      {
        a2[112] = 1;
        int v9 = 0x10000000;
      }

      else
      {
        a2[112] = 2;
        int v9 = 0x20000000;
      }

      unsigned int v13 = (v9 | (*(_DWORD *)(v7 + 1216) << 24)) >> 24;
      if (v13 > 0x23) {
        goto LABEL_28;
      }
      if (((1LL << v13) & 0xF00080008LL) != 0)
      {
        sub_18094BCBC(v7, (uint64_t)a2, (void **)v27, (uint64_t *)v14, a4);
        goto LABEL_12;
      }

      if (((1LL << v13) & 0x10003) != 0)
      {
        sub_18094C53C(v7, (uint64_t)a2, (void **)v27, (uint64_t *)v14, a4);
        goto LABEL_12;
      }

      if (((1LL << v13) & 0x60004) == 0) {
LABEL_28:
      }
        abort();
      sub_18094C30C(v7, (uint64_t)a2, (void **)v27, (uint64_t *)v14, a4);
    }

    else
    {
      sub_18094BCBC(v7, (uint64_t)a2, (void **)v27, (uint64_t *)v14, a4);
      a2[112] = 2;
    }
  }

void sub_18094BCBC(uint64_t a1, uint64_t a2, void **a3, uint64_t *a4, UErrorCode *a5)
{
  uint64_t v61 = *MEMORY[0x1895F89C0];
  unsigned int v10 = *(_DWORD *)(a1 + 1212);
  BOOL v11 = v10 > 3 || v10 == 1;
  if (v11 || !(*(unsigned int (**)(void *, uint64_t))(*a3[24] + 64LL))(a3[24], a4[24]))
  {
    int v14 = 0;
    int v15 = 0;
    int v16 = 0;
    goto LABEL_21;
  }

  uint64_t v12 = a3[25];
  int v13 = *(_DWORD *)(a1 + 1212);
  if (v13)
  {
    if (v13 != 2)
    {
LABEL_16:
      if (v13 == 3) {
        int v14 = (*(uint64_t (**)(void *, uint64_t))(*a3[26] + 64LL))(a3[26], a4[26]);
      }
      else {
        int v14 = 0;
      }
      int v15 = 1;
      goto LABEL_20;
    }

    if (((*(uint64_t (**)(void *, uint64_t))(*v12 + 48LL))(a3[25], 39LL) & 1) == 0
      && ((*(uint64_t (**)(void *, uint64_t))(*v12 + 48LL))(v12, 40LL) & 1) == 0)
    {
      goto LABEL_12;
    }

void sub_18094C30C(uint64_t a1, uint64_t a2, void **a3, uint64_t *a4, UErrorCode *a5)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  if (*(int *)a5 <= 0)
  {
    if (*(_BYTE *)(a1 + 1208))
    {
      __int128 v25 = 0u;
      __int128 v26 = 0u;
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      __int128 v22 = 0u;
      __int128 v20 = 0u;
      memset(v21, 0, sizeof(v21));
      __int128 v18 = 0u;
      memset(v19, 0, sizeof(v19));
      memset(v17, 0, sizeof(v17));
      __int128 v16 = 0u;
      memset(v15, 0, sizeof(v15));
      memset(v14, 0, sizeof(v14));
      sub_180929650((uint64_t)v14);
      int v8 = (icu::number::impl::DecimalQuantity *)(a2 + 304);
      icu::number::impl::DecimalQuantity::resetExponent((icu::number::impl::DecimalQuantity *)(a2 + 304));
      sub_1809284A0((uint64_t *)(a1 + 1296), (icu::number::impl::DecimalQuantity *)(a2 + 304), (uint64_t)v14, a5);
      int v9 = (icu::FormattedStringBuilder *)(a2 + 8);
      uint64_t v10 = sub_180927EA0((uint64_t)v14 + 8, v8, v9, 0, a5);
      uint64_t v11 = (*(unsigned int (**)(void, icu::FormattedStringBuilder *, void, uint64_t, UErrorCode *))(**(void **)&v17[0] + 16LL))( *(void *)&v17[0],  v9,  0LL,  v10,  a5)
          + v10;
      int v12 = (*(uint64_t (**)(void, icu::FormattedStringBuilder *, void, uint64_t, UErrorCode *))(**((void **)&v16 + 1) + 16LL))( *((void *)&v16 + 1),  v9,  0LL,  v11,  a5);
      (*(void (**)(void, icu::FormattedStringBuilder *, void, void, UErrorCode *))(*(void *)v16 + 16LL))( v16,  v9,  0LL,  (v12 + v11),  a5);
      *(void *)&v14[0] = off_189727648;
      if (BYTE4(v24)) {
        uprv_free(*((void **)&v23 + 1));
      }
      icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v22);
      *((void *)&v20 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = off_189727B38;
      icu::UnicodeString::~UnicodeString(off_189727B38, (icu::UnicodeString *)v21);
      icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)((char *)&v20 + 8));
      *(void *)&v19[1] = off_189727DF0;
      icu::number::Scale::~Scale((icu::number::Scale *)((char *)&v19[1] + 8));
      icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)v19);
      icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)&v18);
      icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)((char *)v17 + 8));
      icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v15);
    }

    else
    {
      sub_18094BCBC(a1, a2, a3, a4, a5);
    }
  }

void sub_18094C53C(uint64_t a1, uint64_t a2, void **a3, uint64_t *a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    if (*(_BYTE *)(a1 + 1208))
    {
      uint64_t v7 = (icu::FormattedStringBuilder *)(a2 + 8);
      int v8 = sub_180927EA0( (uint64_t)(a3 + 1),  (icu::number::impl::DecimalQuantity *)(a2 + 304),  (icu::FormattedStringBuilder *)(a2 + 8),  0,  a5);
      sub_1809280A4((uint64_t)a3, v7, 0LL, v8, a5);
    }

    else
    {
      sub_18094BCBC(a1, a2, a3, a4, a5);
    }
  }

uint64_t sub_18094C5D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  icu::number::impl::Modifier::Parameters::Parameters(&v9);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 56LL))(a2, &v9);
  if (v9)
  {
    int v6 = HIDWORD(v10);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a3 + 56LL))(a3, &v9);
    if (v9)
    {
      uint64_t v7 = sub_1809500AC((unsigned int *)(a1 + 1896), v6, SHIDWORD(v10));
      return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v9 + 16LL))(v9, v10, v7);
    }
  }

  return a2;
}

void sub_18094C684(icu::ResourceSink *a1)
{
}

void *sub_18094C698(uint64_t a1, char *a2, icu::ResourceValue *a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  __s1 = a2;
  uint64_t v12 = 0LL;
  memset(v11, 0, sizeof(v11));
  uint64_t result = (*(void *(**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 88LL))( v11,  a3,  a5);
  if (*(int *)a5 <= 0)
  {
    uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v11, 0, (const char **)&__s1, a3);
    if ((_DWORD)result)
    {
      unsigned int v9 = 1;
      do
      {
        if (!strcmp(__s1, "range") && !sub_18094C830(a1))
        {
          int v14 = 0;
          v16[0] = (*(uint64_t (**)(icu::ResourceValue *, int *, UErrorCode *))(*(void *)a3 + 32LL))( a3,  &v14,  a5);
          icu::UnicodeString::UnicodeString(v15, 1LL, v16);
          v16[1] = off_18971B688;
          __int16 v17 = 2;
          icu::SimpleFormatter::applyPatternMinMaxArguments( (icu::SimpleFormatter *)v16,  (const icu::UnicodeString *)v15,  0,  0x7FFFFFFF,  0,  a5);
          icu::SimpleFormatter::operator=(*(void *)(a1 + 8), (uint64_t)v16);
          icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v16);
          icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v15);
        }

        uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v11, v9++, (const char **)&__s1, a3);
      }

      while ((_DWORD)result);
    }
  }

  return result;
}

BOOL sub_18094C830(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  unsigned int v2 = *(unsigned __int16 *)(v1 + 16);
  if ((v2 & 0x11) != 0)
  {
    unint64_t v3 = 0LL;
    if ((v2 & 0x8000) != 0)
    {
LABEL_9:
      if (!*(_DWORD *)(v1 + 20)) {
        return 0LL;
      }
      return *v3 != 0;
    }
  }

  else if ((v2 & 2) != 0)
  {
    unint64_t v3 = (_WORD *)(v1 + 18);
    if ((v2 & 0x8000) != 0) {
      goto LABEL_9;
    }
  }

  else
  {
    unint64_t v3 = *(_WORD **)(v1 + 32);
    if ((v2 & 0x8000) != 0) {
      goto LABEL_9;
    }
  }

  if (v2 >> 5) {
    return *v3 != 0;
  }
  return 0LL;
}

void *icu::NumberingSystem::getStaticClassID(icu::NumberingSystem *this)
{
  return &unk_18C5356E0;
}

void *icu::NumberingSystem::getDynamicClassID(icu::NumberingSystem *this)
{
  return &unk_18C5356E0;
}

void *sub_18094C8A4()
{
  return &unk_18C5356E1;
}

icu::NumberingSystem *icu::NumberingSystem::NumberingSystem(icu::NumberingSystem *this)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  *(void *)this = off_189729378;
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = off_18971B688;
  unsigned int v2 = (UChar **)((char *)this + 8);
  *((_WORD *)this + 8) = 2;
  *((_DWORD *)this + 18) = 10;
  *((_BYTE *)this + 76) = 0;
  memset(v5, 0, sizeof(v5));
  int v4 = "0";
  icu::UnicodeString::UnicodeString(v5, 1LL, &v4);
  icu::UnicodeString::copyFrom(v2, (UChar **)v5, 0);
  strcpy((char *)this + 77, "latn");
  icu::UnicodeString::~UnicodeString((void *)0x6E74616C, (icu::UnicodeString *)v5);
  return this;
}

icu::NumberingSystem *icu::NumberingSystem::NumberingSystem( icu::NumberingSystem *this, const icu::NumberingSystem *a2)
{
  *(void *)this = off_189729378;
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = off_18971B688;
  *((_WORD *)this + 8) = 2;
  icu::UnicodeString::operator=((UChar **)this + 1, (UChar **)a2 + 1);
  uint64_t v4 = *(void *)((char *)a2 + 78);
  *((void *)this + 9) = *((void *)a2 + 9);
  *(void *)((char *)this + 78) = v4;
  return this;
}

{
  uint64_t v4;
  *(void *)this = off_189729378;
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = off_18971B688;
  *((_WORD *)this + 8) = 2;
  icu::UnicodeString::operator=((UChar **)this + 1, (UChar **)a2 + 1);
  uint64_t v4 = *(void *)((char *)a2 + 78);
  *((void *)this + 9) = *((void *)a2 + 9);
  *(void *)((char *)this + 78) = v4;
  return this;
}

icu::NumberingSystem *icu::NumberingSystem::createInstance( icu::NumberingSystem *this, unint64_t a2, icu::UnicodeString *a3, const icu::UnicodeString *a4, UErrorCode *a5)
{
  uint64_t v5 = (uint64_t *)*(unsigned int *)a4;
  int v8 = (int)this;
  if ((int)this <= 1
    || (char v12 = a2, !(_DWORD)a2) && icu::UnicodeString::countChar32(a3, 0, 0x7FFFFFFF) != (_DWORD)this)
  {
    uint64_t v6 = 0LL;
    int v9 = 1;
LABEL_5:
    *(_DWORD *)a4 = v9;
    return v6;
  }

  int v13 = (icu::NumberingSystem *)icu::UMemory::operator new(v5, (icu::UMemory *)0x58, a2);
  if (v13)
  {
    uint64_t v6 = v13;
    icu::NumberingSystem::NumberingSystem(v13);
    if (*(int *)a4 <= 0)
    {
      *((_DWORD *)v6 + 18) = v8;
      icu::UnicodeString::copyFrom((UChar **)v6 + 1, (UChar **)a3, 0);
      *((_BYTE *)v6 + 76) = v12;
      *((_BYTE *)v6 + 77) = 0;
      return v6;
    }

    (*(void (**)(icu::NumberingSystem *))(*(void *)v6 + 8LL))(v6);
    return 0LL;
  }

  if (*(int *)a4 <= 0)
  {
    uint64_t v6 = 0LL;
    int v9 = 7;
    goto LABEL_5;
  }

  return 0LL;
}

uint64_t icu::NumberingSystem::setRadix(uint64_t this, int a2)
{
  *(_DWORD *)(this + 72) = a2;
  return this;
}

icu::UnicodeString *icu::NumberingSystem::setDesc(UChar **this, UChar **a2)
{
  return icu::UnicodeString::copyFrom(this + 1, a2, 0);
}

uint64_t icu::NumberingSystem::setAlgorithmic(uint64_t this, char a2)
{
  *(_BYTE *)(this + 76) = a2;
  return this;
}

char *icu::NumberingSystem::setName(icu::NumberingSystem *this, const char *a2)
{
  uint64_t result = (char *)this + 77;
  if (a2)
  {
    strncpy(result, a2, 8uLL);
    uint64_t result = (char *)this + 85;
  }

  *uint64_t result = 0;
  return result;
}

icu::NumberingSystem *icu::NumberingSystem::createInstance( icu::NumberingSystem *this, UErrorCode *a2, UErrorCode *a3)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  *(_OWORD *)uint64_t v46 = 0u;
  __int128 v47 = 0u;
  int KeywordValue = icu::Locale::getKeywordValue((char **)this, "numbers", v46, 96, a2);
  length[1] = KeywordValue;
  if (*(int *)a2 > 0 || *a2 == U_STRING_NOT_TERMINATED_WARNING)
  {
    length[1] = 0;
    *a2 = U_ZERO_ERROR;
    goto LABEL_20;
  }

  if (KeywordValue < 1)
  {
LABEL_20:
    strcpy(v46, "default");
    goto LABEL_21;
  }

  v46[KeywordValue] = 0;
  if (*(void *)v46 != 0x746C7561666564LL && (*(_DWORD *)v46 != 1769234798 || *(_DWORD *)&v46[3] != 6649449))
  {
    BOOL v8 = *(void *)v46 == 0x6F69746964617274LL && *(_DWORD *)&v46[8] == 7102830;
    BOOL v9 = !v8;
    if (*(void *)v46 != 0x65636E616E6966LL && v9) {
      return icu::NumberingSystem::createInstanceByName((icu::NumberingSystem *)v46, (char *)a2, v6);
    }
  }

icu::NumberingSystem *icu::NumberingSystem::createInstanceByName( icu::NumberingSystem *this, char *a2, UErrorCode *a3)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  uint64_t v5 = ures_openDirect(0LL, (uint64_t)"numberingSystems", (uint64_t)a2);
  uint64_t v6 = ures_getByKey(v5, "numberingSystems", 0LL, (int *)a2);
  uint64_t v7 = ures_getByKey(v6, (const char *)this, 0LL, (int *)a2);
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  uint64_t v23 = 0LL;
  unint64_t v19 = off_18971B688;
  LOWORD(v2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
  int v18 = 0;
  StringByKey = ures_getStringByKey(v7, "desc", &v18, (int *)a2);
  if (*(int *)a2 <= 0)
  {
    __int16 v17 = StringByKey;
    icu::UnicodeString::setTo((icu::UnicodeString *)&v19, 1, &v17, v18);
  }

  else
  {
    icu::UnicodeString::setToBogus((icu::UnicodeString *)&v19);
  }

  ures_getByKey(v7, "radix", v6, (int *)a2);
  Int = (icu::NumberingSystem *)ures_getInt(v6, (int *)a2);
  ures_getByKey(v7, "algorithmic", v6, (int *)a2);
  int v10 = ures_getInt(v6, (int *)a2);
  uint64_t v12 = *(unsigned int *)a2;
  if ((int)v12 >= 1)
  {
    if ((_DWORD)v12 == 7)
    {
LABEL_6:
      int v13 = 0LL;
      goto LABEL_12;
    }

    int v13 = 0LL;
    uint64_t v12 = 16LL;
    goto LABEL_11;
  }

  uint64_t Instance = icu::NumberingSystem::createInstance( Int,  v10 == 1,  (icu::UnicodeString *)&v19,  (const icu::UnicodeString *)a2,  v11);
  int v13 = Instance;
  uint64_t v12 = *(unsigned int *)a2;
  if (!Instance && (int)v12 <= 0)
  {
    int v13 = 0LL;
    uint64_t v12 = 7LL;
LABEL_11:
    *(_DWORD *)a2 = v12;
    goto LABEL_12;
  }

  if ((int)v12 <= 0)
  {
    __int128 v16 = (char *)Instance + 77;
    if (this)
    {
      strncpy(v16, (const char *)this, 8uLL);
      __int128 v16 = (char *)v13 + 85;
    }

    char *v16 = 0;
  }

  else if (Instance)
  {
    (*(void (**)(icu::NumberingSystem *))(*(void *)Instance + 8LL))(Instance);
    goto LABEL_6;
  }

icu::NumberingSystem *icu::NumberingSystem::createInstance(icu::NumberingSystem *this, UErrorCode *a2)
{
  Default = icu::Locale::getDefault(this);
  return icu::NumberingSystem::createInstance((icu::NumberingSystem *)Default, (UErrorCode *)this, v4);
}

void icu::NumberingSystem::~NumberingSystem(icu::NumberingSystem *this)
{
  *(void *)this = off_189729378;
  icu::UnicodeString::~UnicodeString((icu::NumberingSystem *)((char *)this + 8));
  icu::UObject::~UObject(this);
}

{
  *(void *)this = off_189729378;
  icu::UnicodeString::~UnicodeString((icu::NumberingSystem *)((char *)this + 8));
  icu::UObject::~UObject(this);
}

{
  void *v2;
  *(void *)this = off_189729378;
  icu::UnicodeString::~UnicodeString(off_189729378, (icu::NumberingSystem *)((char *)this + 8));
  icu::UObject::~UObject(this);
  icu::UMemory::operator delete(v2);
}

uint64_t icu::NumberingSystem::getRadix(icu::NumberingSystem *this)
{
  return *((unsigned int *)this + 18);
}

icu::UnicodeString *icu::NumberingSystem::getDescription@<X0>( UChar **this@<X0>, icu::UnicodeString *a2@<X8>)
{
  return icu::UnicodeString::UnicodeString(a2, this + 1);
}

uint64_t icu::NumberingSystem::getName(icu::NumberingSystem *this)
{
  return (uint64_t)this + 77;
}

uint64_t icu::NumberingSystem::isAlgorithmic(icu::NumberingSystem *this)
{
  return *((char *)this + 76);
}

uint64_t sub_18094D2EC()
{
  if (qword_18C5356E8) {
    (*(void (**)(uint64_t))(*(void *)qword_18C5356E8 + 8LL))(qword_18C5356E8);
  }
  qword_18C5356E8 = 0LL;
  atomic_store(0, &dword_18C5356F0);
  return 1LL;
}

void sub_18094D330(int *a1)
{
  uint64_t v4 = icu::UMemory::operator new(v3, (icu::UMemory *)0x28, v2);
  if (!v4)
  {
    if (*a1 <= 0) {
      *a1 = 7;
    }
    return;
  }

  uint64_t v5 = (icu::UVector *)v4;
  icu::UVector::UVector((uint64_t)v4, (uint64_t)uprv_deleteUObject, 0LL, a1);
  if (*a1 > 0) {
    goto LABEL_23;
  }
  int v18 = 0;
  uint64_t v6 = ures_openDirect(0LL, (uint64_t)"numberingSystems", (uint64_t)&v18);
  uint64_t v7 = ures_getByKey(v6, "numberingSystems", v6, &v18);
  uint64_t v8 = v7;
  if (v18 > 0)
  {
    if (v18 == 7) {
      int v9 = 7;
    }
    else {
      int v9 = 2;
    }
    *a1 = v9;
    ures_close(v7);
LABEL_23:
    (*(void (**)(icu::UVector *))(*(void *)v5 + 8LL))(v5);
    return;
  }

  while (ures_hasNext(v8) && *a1 <= 0)
  {
    NextResource = ures_getNextResource(v8, 0LL, &v18);
    uint64_t v11 = (uint64_t)NextResource;
    int v12 = v18;
    if (v18 == 7)
    {
      *a1 = 7;
      if (!NextResource) {
        goto LABEL_21;
      }
    }

    else
    {
      uint64_t Key = ures_getKey((uint64_t)NextResource);
      __int128 v16 = icu::UMemory::operator new(v15, (icu::UMemory *)0x40, v14);
      __int16 v17 = v16;
      if (v16)
      {
        icu::UnicodeString::UnicodeString(v16, Key, 0xFFFFFFFFLL, 0LL);
      }

      else if (*a1 <= 0)
      {
        *a1 = 7;
      }

      icu::UVector::adoptElement(v5, v17, (UErrorCode *)a1);
      if (!v11) {
        goto LABEL_21;
      }
    }

    ures_close(v11);
LABEL_21:
    if (v12 == 7) {
      break;
    }
  }

  ures_close(v8);
  if (*a1 > 0) {
    goto LABEL_23;
  }
  qword_18C5356E8 = (uint64_t)v5;
}

uint64_t *icu::NumberingSystem::getAvailableNames(icu::NumberingSystem *this, UErrorCode *a2)
{
  unint64_t v3 = *(unsigned int *)this;
  if ((int)v3 <= 0)
  {
    unsigned int v4 = atomic_load(&dword_18C5356F0);
    if (v4 == 2 || !icu::umtx_initImplPreInit(&dword_18C5356F0))
    {
      unint64_t v3 = dword_18C5356F4;
      if (dword_18C5356F4 >= 1) {
        *(_DWORD *)this = dword_18C5356F4;
      }
    }

    else
    {
      sub_18094D330((int *)this);
      dword_18C5356F4 = *(_DWORD *)this;
      icu::umtx_initImplPostInit(&dword_18C5356F0);
    }
  }

  uint64_t result = icu::UMemory::operator new((uint64_t *)v3, (icu::UMemory *)0x78, (unint64_t)a2);
  if (result)
  {
    uint64_t result = (uint64_t *)icu::StringEnumeration::StringEnumeration((uint64_t)result);
    *uint64_t result = (uint64_t)&off_1897293A8;
    *((_DWORD *)result + 29) = 0;
  }

  else if (*(int *)this <= 0)
  {
    *(_DWORD *)this = 7;
  }

  return result;
}

uint64_t sub_18094D5B4(uint64_t a1, int *a2)
{
  unint64_t v2 = (icu::UVector *)qword_18C5356E8;
  if (*a2 > 0 || qword_18C5356E8 == 0) {
    return 0LL;
  }
  signed int v4 = *(_DWORD *)(a1 + 116);
  if (v4 >= *(_DWORD *)(qword_18C5356E8 + 8)) {
    return 0LL;
  }
  *(_DWORD *)(a1 + 116) = v4 + 1;
  return icu::UVector::elementAt(v2, v4);
}

uint64_t sub_18094D5F4(uint64_t result)
{
  *(_DWORD *)(result + 116) = 0;
  return result;
}

uint64_t sub_18094D5FC()
{
  if (qword_18C5356E8) {
    return *(unsigned int *)(qword_18C5356E8 + 8);
  }
  else {
    return 0LL;
  }
}

void sub_18094D61C(icu::StringEnumeration *a1)
{
}

void *icu::OlsonTimeZone::getStaticClassID(icu::OlsonTimeZone *this)
{
  return &unk_18C5356F8;
}

void *icu::OlsonTimeZone::getDynamicClassID(icu::OlsonTimeZone *this)
{
  return &unk_18C5356F8;
}

uint64_t icu::OlsonTimeZone::constructEmpty(uint64_t this)
{
  *(void *)(this + 152) = 0LL;
  *(_WORD *)(this + 76) = 0;
  *(_DWORD *)(this + 72) = 0;
  *(void *)(this + 88) = 0LL;
  *(void *)(this + 96) = 0LL;
  *(void *)(this + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
  *(_WORD *)(this + 104) = 1;
  *(void *)(this + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
  *(void *)(this + 128) = 0LL;
  *(void *)(this + 112) = &unk_180A3B3C8;
  return this;
}

uint64_t icu::OlsonTimeZone::OlsonTimeZone(uint64_t a1, uint64_t a2, uint64_t a3, UChar **a4, int *a5)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  int v10 = icu::BasicTimeZone::BasicTimeZone((icu::BasicTimeZone *)a1, a4);
  *(void *)int v10 = off_189729440;
  *((void *)v10 + 16) = 0LL;
  *((void *)v10 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
  *((void *)v10 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0LL;
  *((_WORD *)v10 + 88) = 0;
  *((void *)v10 + 23) = 0LL;
  *((void *)v10 + 24) = 0LL;
  *((_WORD *)v10 + 10icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  *((void *)v10 + 26) = 0LL;
  *((void *)v10 + 27) = 0LL;
  atomic_store(0, (unsigned int *)v10 + 54);
  if (a3) {
    BOOL v11 = a2 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  int v12 = *a5;
  if (v11 && v12 <= 0)
  {
    *a5 = 1;
LABEL_50:
    *(void *)(a1 + 152) = 0LL;
    *(_WORD *)(a1 + 76) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    *(void *)(a1 + 88) = 0LL;
    *(void *)(a1 + 96) = 0LL;
    *(void *)(a1 + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
    *(_WORD *)(a1 + 104) = 1;
    *(void *)(a1 + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
    *(void *)(a1 + 128) = 0LL;
    *(void *)(a1 + 112) = &unk_180A3B3C8;
    return a1;
  }

  if (v12 > 0) {
    goto LABEL_50;
  }
  unsigned int v36 = 0;
  uint64_t v44 = 0LL;
  memset(v43, 0, sizeof(v43));
  icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v43);
  ures_getByKey(a3, "transPre32", (uint64_t)v43, a5);
  *(void *)(a1 + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = ures_getIntVector((uint64_t)v43, (int *)&v36, a5);
  unsigned int v13 = v36;
  *(_WORD *)(a1 + 72) = v36 >> 1;
  if (*a5 == 2)
  {
    int v14 = 0;
    *(void *)(a1 + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
    *(_WORD *)(a1 + 72) = 0;
LABEL_14:
    *a5 = v14;
    goto LABEL_15;
  }

  if (*a5 <= 0 && (v13 & 0xFFFF8001) != 0)
  {
    int v14 = 3;
    goto LABEL_14;
  }

void icu::OlsonTimeZone::clearTransitionRules(icu::OlsonTimeZone *this)
{
  *((void *)this + 26) = 0LL;
  *((void *)this + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
  *((void *)this + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0LL;
  *((_WORD *)this + 88) = 0;
  *((void *)this + 23) = 0LL;
  *((void *)this + 24) = 0LL;
  *((_WORD *)this + 10icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  atomic_store(0, (unsigned int *)this + 54);
}

uint64_t icu::OlsonTimeZone::OlsonTimeZone(icu::OlsonTimeZone *this, UChar **a2)
{
  unint64_t v3 = icu::BasicTimeZone::BasicTimeZone(this, a2);
  *(void *)unint64_t v3 = off_189729440;
  *((void *)v3 + 16) = 0LL;
  *((void *)v3 + 27) = 0LL;
  return icu::OlsonTimeZone::operator=((uint64_t)v3, (uint64_t)a2);
}

{
  icu::TimeZone *v3;
  unint64_t v3 = icu::BasicTimeZone::BasicTimeZone(this, a2);
  *(void *)unint64_t v3 = off_189729440;
  *((void *)v3 + 16) = 0LL;
  *((void *)v3 + 27) = 0LL;
  return icu::OlsonTimeZone::operator=((uint64_t)v3, (uint64_t)a2);
}

uint64_t icu::OlsonTimeZone::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(_OWORD *)(a1 + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
    *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
    *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    uint64_t v4 = *(void *)(a1 + 128);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
    uint64_t v5 = *(void *)(a2 + 128);
    if (v5) {
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 96LL))(v5);
    }
    *(void *)(a1 + 128) = v5;
    *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 208) = 0LL;
    *(_WORD *)(a1 + 176) = 0;
    *(void *)(a1 + 16icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
    *(void *)(a1 + 168) = 0LL;
    *(_WORD *)(a1 + 20icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
    *(void *)(a1 + 184) = 0LL;
    *(void *)(a1 + 192) = 0LL;
    atomic_store(0, (unsigned int *)(a1 + 216));
  }

  return a1;
}

void icu::OlsonTimeZone::~OlsonTimeZone(icu::OlsonTimeZone *this)
{
  *(void *)this = off_189729440;
  icu::OlsonTimeZone::deleteTransitionRules(this);
  uint64_t v2 = *((void *)this + 16);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::BasicTimeZone::~BasicTimeZone(this);
}

{
  void *v1;
  icu::OlsonTimeZone::~OlsonTimeZone(this);
  icu::UMemory::operator delete(v1);
}

void icu::OlsonTimeZone::deleteTransitionRules(icu::OlsonTimeZone *this)
{
  unint64_t v3 = (char *)this + 160;
  uint64_t v2 = *((void *)this + 20);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v4 = *((void *)this + 21);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = *((void *)this + 23);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = *((void *)this + 26);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 24);
  if (v7)
  {
    int v8 = *((__int16 *)this + 100);
    if (v8 >= 1)
    {
      uint64_t v9 = 0LL;
      do
      {
        uint64_t v10 = *(void *)(*((void *)this + 24) + 8 * v9);
        if (v10)
        {
          (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
          LOWORD(v8) = *((_WORD *)this + 100);
        }

        ++v9;
      }

      while (v9 < (__int16)v8);
      uint64_t v7 = (void *)*((void *)this + 24);
    }

    uprv_free(v7);
  }

  *((void *)this + 26) = 0LL;
  *(void *)unint64_t v3 = 0LL;
  *((void *)v3 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0LL;
  *((_WORD *)v3 + 8) = 0;
  *((void *)this + 23) = 0LL;
  *((void *)this + 24) = 0LL;
  *((_WORD *)this + 10icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  atomic_store(0, (unsigned int *)this + 54);
}

uint64_t icu::OlsonTimeZone::operator==(uint64_t a1, void *a2)
{
  if ((void *)a1 == a2) {
    return 1LL;
  }
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_1807F874C(*(void *)(*(void *)a1 - 8LL), *(void *)(*a2 - 8LL));
  if ((_DWORD)result)
  {
    uint64_t result = icu::TimeZone::operator==(a1, (uint64_t)a2);
    if ((_DWORD)result) {
      return (*(unsigned int (**)(uint64_t, void *))(*(void *)a1 + 88LL))(a1, a2) != 0;
    }
  }

  return result;
}

icu::BasicTimeZone *icu::OlsonTimeZone::clone@<X0>( UChar **this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::BasicTimeZone *)icu::UMemory::operator new(a3, (icu::UMemory *)0xE0, a2);
  if (result)
  {
    uint64_t v5 = icu::BasicTimeZone::BasicTimeZone(result, this);
    *(void *)uint64_t v5 = off_189729440;
    *((void *)v5 + 16) = 0LL;
    *((void *)v5 + 27) = 0LL;
    return (icu::BasicTimeZone *)icu::OlsonTimeZone::operator=((uint64_t)v5, (uint64_t)this);
  }

  return result;
}

uint64_t icu::OlsonTimeZone::getOffset( icu::OlsonTimeZone *this, unsigned __int8 a2, int a3, unsigned int a4, int a5, unsigned __int8 a6, int a7, UErrorCode *a8)
{
  if (a4 < 0xC) {
    return (*(uint64_t (**)(icu::OlsonTimeZone *))(*(void *)this + 40LL))(this);
  }
  return 0LL;
}

uint64_t icu::OlsonTimeZone::getOffset( icu::OlsonTimeZone *this, unsigned int a2, int a3, unsigned int a4, int a5, char a6, int a7, int a8, UErrorCode *a9)
{
  if (a2 > 1
    || a4 > 0xB
    || a5 < 1
    || (a8 - 32) < 0xFFFFFFFC
    || a7 > 0x5265BFF
    || (a6 - 8) < 0xF9u
    || a5 > a8)
  {
    uint64_t result = 0LL;
    *a9 = U_ILLEGAL_ARGUMENT_ERROR;
  }

  else
  {
    if (!a2) {
      a3 = -a3;
    }
    uint64_t v12 = *((void *)this + 16);
    if (v12 && a3 >= *((_DWORD *)this + 36))
    {
      return (*(uint64_t (**)(uint64_t))(*(void *)v12 + 40LL))(v12);
    }

    else
    {
      double v13 = sub_1808FA338(a3, a4, a5);
      *(void *)int v14 = 0LL;
      icu::OlsonTimeZone::getHistoricalOffset(this, (double)a7 + v13 * 86400000.0, 1, 3, 1, &v14[1], v14);
      return (v14[0] + v14[1]);
    }
  }

  return result;
}

void icu::OlsonTimeZone::getHistoricalOffset( icu::OlsonTimeZone *this, double a2, int a3, char a4, char a5, int *a6, int *a7)
{
  int v10 = (__int16)(*((_WORD *)this + 37) + *((_WORD *)this + 36) + *((_WORD *)this + 38));
  if (v10 >= 1
    && ((double v14 = uprv_floor(a2 / 1000.0), a3)
     || v14 >= (double)(uint64_t)icu::OlsonTimeZone::transitionTimeInSeconds(this, 0)))
  {
    int v18 = a4 & 3;
    int v19 = a5 & 3;
    int v41 = a5 & 0xC;
    int v42 = a4 & 0xC;
    unsigned __int16 v20 = v10;
    while ((__int16)v20 >= 1)
    {
      unsigned __int16 v21 = v20 - 1;
      int64_t v22 = icu::OlsonTimeZone::transitionTimeInSeconds(this, (__int16)(v20 - 1));
      if (a3 && v14 >= (double)(v22 - 86400))
      {
        uint64_t v23 = (_DWORD *)*((void *)this + 14);
        uint64_t v24 = *((void *)this + 15);
        if (v20 <= 1u)
        {
          int v25 = v23[1];
          int v26 = v25 + *v23;
        }

        else
        {
          int v25 = v23[(2 * *(unsigned __int8 *)(v24 + (unsigned __int16)(v20 - 2))) | 1];
          int v26 = v25 + v23[2 * *(unsigned __int8 *)(v24 + (unsigned __int16)(v20 - 2))];
        }

        int v27 = *(unsigned __int8 *)(v24 + (unsigned __int16)(v20 - 1));
        int v28 = v23[(2 * v27) | 1];
        if (v28) {
          BOOL v29 = 0;
        }
        else {
          BOOL v29 = v25 != 0;
        }
        int v30 = v28 + v23[2 * v27];
        if (v25) {
          BOOL v31 = 0;
        }
        else {
          BOOL v31 = v28 != 0;
        }
        if (v30 >= v26)
        {
          BOOL v35 = v18 == 1 && v29;
          BOOL v36 = v18 == 3 && v31;
          if (v35 || v36)
          {
            int v30 = v26;
          }

          else
          {
            if (v18 != 1) {
              BOOL v31 = 0;
            }
            if (v18 != 3) {
              BOOL v29 = 0;
            }
            int v37 = v31 || v29;
            if (v42 != 12) {
              int v26 = v30;
            }
            if (!v37) {
              int v30 = v26;
            }
          }
        }

        else
        {
          BOOL v32 = v19 == 1 && v29;
          BOOL v33 = v19 == 3 && v31;
          if (!v32 && !v33)
          {
            if (v19 != 1) {
              BOOL v31 = 0;
            }
            if (v19 != 3) {
              BOOL v29 = 0;
            }
            int v34 = v31 || v29;
            if (v41 == 4) {
              int v34 = 1;
            }
            if (v34) {
              int v30 = v26;
            }
          }
        }

        v22 += v30;
      }

      --v20;
      if (v14 >= (double)v22)
      {
        __int128 v38 = (_DWORD *)*((void *)this + 14);
        uint64_t v39 = *((void *)this + 15);
        *a6 = 1000 * v38[2 * *(unsigned __int8 *)(v39 + v21)];
        uint64_t v40 = (2LL * *(unsigned __int8 *)(v39 + v21)) | 1;
        goto LABEL_57;
      }
    }

    __int128 v38 = (_DWORD *)*((void *)this + 14);
    *a6 = 1000 * *v38;
    uint64_t v40 = 1LL;
LABEL_57:
    int v16 = &v38[v40];
  }

  else
  {
    unsigned int v15 = (int *)*((void *)this + 14);
    int v17 = *v15;
    int v16 = v15 + 1;
    *a6 = 1000 * v17;
  }

  *a7 = 1000 * *v16;
}

void icu::OlsonTimeZone::getOffset( icu::OlsonTimeZone *this, double a2, uint64_t a3, int *a4, int *a5, UErrorCode *a6)
{
  if (*(int *)a6 <= 0)
  {
    uint64_t v6 = *((void *)this + 16);
    else {
      icu::OlsonTimeZone::getHistoricalOffset(this, a2, a3, 4, 12, a4, a5);
    }
  }

void icu::OlsonTimeZone::getOffsetFromLocal( uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int *a5, int *a6, double a7)
{
  if (*a6 <= 0)
  {
    uint64_t v7 = *(void *)(a1 + 128);
    if (v7 && *(double *)(a1 + 136) <= a7) {
      (*(void (**)(void, uint64_t, uint64_t, int *, int *))(*(void *)v7 + 160LL))( *(void *)(a1 + 128),  a2,  a3,  a4,  a5);
    }
    else {
      icu::OlsonTimeZone::getHistoricalOffset((icu::OlsonTimeZone *)a1, a7, 1, a2, a3, a4, a5);
    }
  }

uint64_t icu::OlsonTimeZone::getRawOffset(icu::OlsonTimeZone *this)
{
  uint64_t v5 = 0LL;
  int v4 = 0;
  double UTCtime = uprv_getUTCtime();
  (*(void (**)(icu::OlsonTimeZone *, void, uint64_t *, int *, char *, double))(*(void *)this + 48LL))( this,  0LL,  &v5,  &v4,  (char *)&v5 + 4,  UTCtime);
  return v5;
}

unint64_t icu::OlsonTimeZone::transitionTimeInSeconds(icu::OlsonTimeZone *this, int a2)
{
  int v2 = *((__int16 *)this + 36);
  BOOL v3 = __OFSUB__(a2, v2);
  int v4 = a2 - v2;
  if (v4 < 0 != v3) {
    return *(unsigned int *)(*((void *)this + 10) + 8LL * a2 + 4) | ((unint64_t)*(unsigned int *)(*((void *)this + 10) + 8LL * a2) << 32);
  }
  int v6 = (__int16)v4;
  int v7 = *((__int16 *)this + 37);
  BOOL v3 = __OFSUB__(v6, v7);
  int v8 = v6 - v7;
  if (v8 < 0 != v3) {
    return *(int *)(*((void *)this + 11) + 4LL * v6);
  }
  else {
    return *(unsigned int *)(*((void *)this + 12) + 8LL * (__int16)v8 + 4) | ((unint64_t)*(unsigned int *)(*((void *)this + 12) + 8LL * (__int16)v8) << 32);
  }
}

uint64_t icu::OlsonTimeZone::useDaylightTime(icu::OlsonTimeZone *this)
{
  double UTCtime = uprv_getUTCtime();
  uint64_t v3 = *((void *)this + 16);
  uint64_t v14 = 0LL;
  uint64_t v15 = 0LL;
  uint64_t v13 = 0LL;
  sub_1808FA670((int *)&v15 + 1, &v15, (_DWORD *)&v14 + 1, (int *)&v14, (int *)&v13 + 1, &v13, UTCtime);
  double v4 = sub_1808FA338(SHIDWORD(v15), 0, 1);
  double v5 = sub_1808FA338(HIDWORD(v15) + 1, 0, 1);
  if ((__int16)(*((_WORD *)this + 37) + *((_WORD *)this + 36) + *((_WORD *)this + 38)) >= 1)
  {
    uint64_t v6 = 0LL;
    double v7 = v4 * 86400.0;
    double v8 = v5 * 86400.0;
    uint64_t v9 = (unsigned __int16)(*((_WORD *)this + 37) + *((_WORD *)this + 36) + *((_WORD *)this + 38));
    do
    {
      double v10 = (double)(uint64_t)icu::OlsonTimeZone::transitionTimeInSeconds(this, (__int16)v6);
      if (v8 <= v10) {
        break;
      }
      if (v7 <= v10
        && *(_DWORD *)(*((void *)this + 14) + 8LL * *(unsigned __int8 *)(*((void *)this + 15) + v6) + 4))
      {
        return 1LL;
      }

      if (v7 < v10)
      {
        uint64_t v11 = v6 ? (2LL * *(unsigned __int8 *)(*((void *)this + 15) + (unsigned __int16)(v6 - 1))) | 1 : 1LL;
        if (*(_DWORD *)(*((void *)this + 14) + 4 * v11)) {
          return 1LL;
        }
      }

      ++v6;
    }

    while (v9 != v6);
  }

  return 0LL;
}

uint64_t icu::OlsonTimeZone::getDSTSavings(icu::OlsonTimeZone *this)
{
  uint64_t v2 = *((void *)this + 16);
  if (v2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 104LL))(v2);
  }
  else {
    return icu::TimeZone::getDSTSavings(this);
  }
}

BOOL icu::OlsonTimeZone::inDaylightTime(icu::OlsonTimeZone *this, double a2, UErrorCode *a3)
{
  int v5 = 0;
  int v4 = 0;
  (*(void (**)(icu::OlsonTimeZone *, void, int *, int *, UErrorCode *, double))(*(void *)this + 48LL))( this,  0LL,  &v5,  &v4,  a3,  a2);
  return v4 != 0;
}

uint64_t icu::OlsonTimeZone::hasSameRules(icu::OlsonTimeZone *this, const icu::TimeZone *lpsrc)
{
  if (this == lpsrc) {
    return 1LL;
  }
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  if (*((void *)this + 15) == *(void *)(result + 120)) {
    return 1LL;
  }
  uint64_t v5 = *((void *)this + 16);
  uint64_t v6 = *(void *)(v4 + 128);
  if (v5)
  {
    if (!v6) {
      return 0LL;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24LL))(v5);
    if (!(_DWORD)result) {
      return result;
    }
    if (*((void *)this + 16)
      && (*((_DWORD *)this + 36) != *(_DWORD *)(v4 + 144) || *((double *)this + 17) != *(double *)(v4 + 136)))
    {
      return 0LL;
    }
  }

  else if (v6)
  {
    return 0LL;
  }

  int v7 = *((unsigned __int16 *)this + 52);
  int v8 = *((unsigned __int16 *)this + 36);
  int v9 = *((unsigned __int16 *)this + 37);
  int v10 = *((unsigned __int16 *)this + 38);
  __int16 v11 = *((_WORD *)this + 36);
  uint64_t result = sub_18094E894(*((void *)this + 10), *(void *)(v4 + 80), 8 * (__int16)v8);
  if ((_DWORD)result)
  {
    uint64_t result = sub_18094E894(*((void *)this + 11), *(void *)(v4 + 88), 4 * (__int16)v9);
    if ((_DWORD)result)
    {
      uint64_t result = sub_18094E894(*((void *)this + 12), *(void *)(v4 + 96), 8 * (__int16)v10);
      if ((_DWORD)result)
      {
        uint64_t result = sub_18094E894(*((void *)this + 14), *(void *)(v4 + 112), 8 * (__int16)v7);
        if ((_DWORD)result) {
          return sub_18094E894(*((void *)this + 15), *(void *)(v4 + 120), (__int16)(v9 + v11 + v10));
        }
      }
    }
  }

  return result;
}

BOOL sub_18094E894(unint64_t __s1, unint64_t a2, int a3)
{
  if (!(__s1 | a2)) {
    return 1LL;
  }
  BOOL result = 0LL;
  BOOL v5 = __s1 == 0;
  if (a2)
  {
    BOOL v6 = 1;
  }

  else
  {
    BOOL v5 = 0;
    BOOL v6 = __s1 == 0;
  }

  if (v6 && !v5)
  {
    if (__s1 == a2) {
      return 1LL;
    }
    return memcmp((const void *)__s1, (const void *)a2, a3) == 0;
  }

  return result;
}

void icu::OlsonTimeZone::checkTransitionRules(icu::OlsonTimeZone *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    uint64_t v4 = (unsigned int *)((char *)this + 216);
    unsigned int v5 = atomic_load((unsigned int *)this + 54);
    if (v5 == 2 || !icu::umtx_initImplPreInit((unsigned int *)this + 54))
    {
      UErrorCode v6 = *((_DWORD *)this + 55);
      if (v6 >= U_ILLEGAL_ARGUMENT_ERROR) {
        *a2 = v6;
      }
    }

    else
    {
      icu::OlsonTimeZone::initTransitionRules(this, a2);
      *((UErrorCode *)this + 55) = *a2;
      icu::umtx_initImplPostInit(v4);
    }
  }

icu::OlsonTimeZone *icu::OlsonTimeZone::initTransitionRules(icu::OlsonTimeZone *this, UErrorCode *a2)
{
  uint64_t v70 = *MEMORY[0x1895F89C0];
  uint64_t v3 = this;
  icu::OlsonTimeZone::deleteTransitionRules(this);
  uint64_t v69 = 0LL;
  __int128 v68 = 0u;
  __int128 v66 = 0u;
  __int128 v67 = 0u;
  int v65 = (UChar *)off_18971B688;
  LOWORD(v66) = 2;
  icu::UnicodeString::operator=(&v65, (UChar **)v3 + 1);
  memset(v64, 0, 64);
  uint64_t v61 = L"(STD)";
  icu::UnicodeString::UnicodeString(v63, 1LL, &v61);
  icu::operator+((uint64_t)&v65, (uint64_t)v63, (uint64_t)v64);
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v63);
  memset(v63, 0, sizeof(v63));
  uint64_t v60 = L"(DST)";
  icu::UnicodeString::UnicodeString(v62, 1LL, &v60);
  icu::operator+((uint64_t)&v65, (uint64_t)v62, (uint64_t)v63);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v62);
  UErrorCode v6 = (uint64_t *)*((void *)v3 + 14);
  int v7 = *(_DWORD *)v6;
  int v8 = *((_DWORD *)v6 + 1);
  int v10 = (icu::InitialTimeZoneRule *)icu::UMemory::operator new(v6, (icu::UMemory *)0x50, v9);
  if (!v10)
  {
    *((void *)v3 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
    goto LABEL_12;
  }

  if (v8) {
    __int16 v11 = (UChar **)v63;
  }
  else {
    __int16 v11 = (UChar **)v64;
  }
  *((void *)v3 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = icu::InitialTimeZoneRule::InitialTimeZoneRule(v10, v11, 1000 * v7, 1000 * v8);
  int v12 = *((unsigned __int16 *)v3 + 38);
  uint64_t v13 = (char *)(*((unsigned __int16 *)v3 + 37) + *((unsigned __int16 *)v3 + 36) + v12);
  int v14 = (__int16)(*((_WORD *)v3 + 37) + *((_WORD *)v3 + 36) + v12);
  if (v14 < 1) {
    goto LABEL_40;
  }
  uint64_t v13 = 0LL;
  *((_WORD *)v3 + 88) = 0;
  uint64_t v15 = *((void *)v3 + 15);
  while (!v13[v15])
  {
    *((_WORD *)v3 + 88) = (_WORD)++v13;
  }

  if ((unsigned __int16)v14 == (unsigned __int16)v13)
  {
LABEL_40:
    uint64_t v39 = *((void *)v3 + 16);
    if (!v39) {
      goto LABEL_54;
    }
    double v40 = *((double *)v3 + 17);
    double Time = v40;
    int v41 = (*(uint64_t (**)(uint64_t))(*(void *)v39 + 72LL))(v39);
    uint64_t v42 = (*(uint64_t (**)(void))(**((void **)v3 + 16) + 96LL))(*((void *)v3 + 16));
    *((void *)v3 + 26) = v42;
    if (v41)
    {
      if (!v42) {
        goto LABEL_12;
      }
      icu::SimpleTimeZone::setStartYear(v42, *((_DWORD *)v3 + 36));
      memset(v62, 0, 32);
      icu::TimeZoneTransition::TimeZoneTransition(v62);
      (*(void (**)(void, void, _OWORD *, double))(**((void **)v3 + 26) + 112LL))( *((void *)v3 + 26),  0LL,  v62,  v40);
      uint64_t v43 = icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v62);
      uint64_t v44 = (*(uint64_t (**)(uint64_t))(*(void *)v43 + 24LL))(v43);
      if (!v44)
      {
        *a2 = U_MEMORY_ALLOCATION_ERROR;
        icu::OlsonTimeZone::deleteTransitionRules(v3);
        icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)v62);
        goto LABEL_54;
      }

      uint64_t v45 = (icu::TimeZoneRule *)v44;
      double Time = icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v62);
      icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)v62);
    }

    else
    {
      if (!v42) {
        goto LABEL_12;
      }
      icu::UnicodeString::operator=(&v65, (UChar **)(*((void *)v3 + 16) + 8LL));
      __int128 v49 = icu::UMemory::operator new(v48, (icu::UMemory *)0x160, v47);
      if (!v49) {
        goto LABEL_12;
      }
      uint64_t v45 = (icu::TimeZoneRule *)v49;
      int v50 = (*(uint64_t (**)(void))(**((void **)v3 + 16) + 64LL))(*((void *)v3 + 16));
      icu::TimeArrayTimeZoneRule::TimeArrayTimeZoneRule((uint64_t)v45, &v65, v50, 0, &Time, 1LL, 2);
    }

    unint64_t v51 = (v14 - 1);
    if (v14 < 1
      || (unint64_t v51 = *(unsigned __int8 *)(*((void *)v3 + 15) + v51),
          (uint64_t v52 = *(void *)(*((void *)v3 + 24) + 8 * v51)) == 0))
    {
      uint64_t v52 = *((void *)v3 + 20);
    }

    int v53 = icu::UMemory::operator new((uint64_t *)v51, (icu::UMemory *)0x20, v46);
    if (v53)
    {
      int v54 = icu::TimeZoneTransition::TimeZoneTransition(v53);
      *((void *)v3 + 23) = v54;
      icu::TimeZoneTransition::setTime((uint64_t)v54, Time);
      int v55 = (icu::TimeZoneTransition *)*((void *)v3 + 23);
      int v56 = (icu::TimeZoneRule *)(*(uint64_t (**)(uint64_t))(*(void *)v52 + 24LL))(v52);
      icu::TimeZoneTransition::adoptFrom(v55, v56);
      icu::TimeZoneTransition::adoptTo(*((icu::TimeZoneTransition **)v3 + 23), v45);
      goto LABEL_54;
    }

    *((void *)v3 + 23) = 0LL;
LABEL_12:
    *a2 = U_MEMORY_ALLOCATION_ERROR;
    icu::OlsonTimeZone::deleteTransitionRules(v3);
    goto LABEL_54;
  }

  int v16 = uprv_malloc(8LL * v14);
  if (!v16) {
    goto LABEL_12;
  }
  int v18 = v16;
  int v19 = *((__int16 *)v3 + 52);
  if (v19 < 1)
  {
LABEL_38:
    uprv_free(v18);
    BOOL v33 = (uint64_t *)*((void *)v3 + 15);
    uint64_t v34 = *((unsigned __int8 *)v33 + *((__int16 *)v3 + 88));
    BOOL v36 = icu::UMemory::operator new(v33, (icu::UMemory *)0x20, v35);
    if (!v36)
    {
      *((void *)v3 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0LL;
      goto LABEL_12;
    }

    int v37 = (icu::TimeZoneTransition *)v36;
    int64_t v38 = icu::OlsonTimeZone::transitionTimeInSeconds(v3, *((__int16 *)v3 + 88));
    icu::TimeZoneTransition::TimeZoneTransition( v37,  (double)v38 * 1000.0,  *((const icu::TimeZoneRule **)v3 + 20),  *(const icu::TimeZoneRule **)(*((void *)v3 + 24) + 8 * v34));
    *((void *)v3 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v37;
    goto LABEL_40;
  }

  uint64_t v20 = 0LL;
  while (1)
  {
    uint64_t v21 = 0LL;
    uint64_t v22 = *((__int16 *)v3 + 88);
    uint64_t v23 = *((void *)v3 + 15);
    do
    {
      if (v20 == *(unsigned __int8 *)(v23 + v22))
      {
        double v24 = (double)(uint64_t)icu::OlsonTimeZone::transitionTimeInSeconds(v3, (__int16)v22) * 1000.0;
        if (!*((void *)v3 + 16) || v24 <= *((double *)v3 + 17))
        {
          *((double *)v18 + (int)v2icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v24;
          uint64_t v21 = (v21 + 1);
        }
      }

      ++v22;
    }

    while (v22 < v14);
    int v25 = (int *)(*((void *)v3 + 14) + 8 * v20);
    int v27 = *v25;
    int v26 = v25[1];
    int v28 = (uint64_t *)*((void *)v3 + 24);
    if (!v28) {
      break;
    }
LABEL_30:
    BOOL v31 = icu::UMemory::operator new(v28, (icu::UMemory *)0x160, v17);
    if (v31)
    {
      if (v26) {
        BOOL v32 = (UChar **)v63;
      }
      else {
        BOOL v32 = (UChar **)v64;
      }
      BOOL v31 = (uint64_t *)icu::TimeArrayTimeZoneRule::TimeArrayTimeZoneRule( (uint64_t)v31,  v32,  1000 * v27,  1000 * v26,  (const double *)v18,  v21,  2);
    }

    *(void *)(*((void *)v3 + 24) + 8 * v2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v31;
    if (!*(void *)(*((void *)v3 + 24) + 8 * v20)) {
      goto LABEL_12;
    }
    LOWORD(v19) = *((_WORD *)v3 + 52);
LABEL_37:
  }

  *((_WORD *)v3 + 10icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v19;
  BOOL v29 = uprv_malloc(8LL * (__int16)v19);
  *((void *)v3 + 24) = v29;
  if (v29)
  {
    if (*((__int16 *)v3 + 100) >= 1)
    {
      int v28 = 0LL;
      uint64_t v30 = 8LL * *((unsigned __int16 *)v3 + 100);
      do
        *(uint64_t *)((char *)v28++ + *((void *)v3 + 24)) = 0LL;
      while ((uint64_t *)v30 != v28);
    }

    goto LABEL_30;
  }

  *a2 = U_MEMORY_ALLOCATION_ERROR;
  icu::OlsonTimeZone::deleteTransitionRules(v3);
  uprv_free(v18);
LABEL_54:
  icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v63);
  icu::UnicodeString::~UnicodeString(v57, (icu::UnicodeString *)v64);
  return (icu::OlsonTimeZone *)icu::UnicodeString::~UnicodeString(v58, (icu::UnicodeString *)&v65);
}

uint64_t icu::OlsonTimeZone::getNextTransition( icu::TimeZoneTransition **this, double a2, uint64_t a3, icu::TimeZoneTransition *a4)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  UErrorCode v30 = U_ZERO_ERROR;
  icu::OlsonTimeZone::checkTransitionRules((icu::OlsonTimeZone *)this, &v30);
  uint64_t v8 = 0LL;
  if (v30 > U_ZERO_ERROR) {
    return v8;
  }
  if (this[16])
  {
    if ((_DWORD)a3 && icu::TimeZoneTransition::getTime(this[23]) == a2)
    {
      unint64_t v9 = this[23];
LABEL_23:
      icu::TimeZoneTransition::operator=(a4, v9);
      return 1LL;
    }

    if (icu::TimeZoneTransition::getTime(this[23]) <= a2)
    {
      if ((*(unsigned int (**)(icu::TimeZoneTransition *))(*(void *)this[16] + 72LL))(this[16])) {
        return (*(uint64_t (**)(icu::TimeZoneTransition *, uint64_t, icu::TimeZoneTransition *, double))(*(void *)this[26] + 112LL))( this[26],  a3,  a4,  a2);
      }
      return 0LL;
    }
  }

  uint64_t v8 = (uint64_t)this[24];
  if (v8)
  {
    __int16 v10 = *((_WORD *)this + 38);
    int v11 = (__int16)(*((_WORD *)this + 37) + *((_WORD *)this + 36) + v10) - 1;
    int v12 = *((__int16 *)this + 88);
    if (v12 > (__int16)(*((_WORD *)this + 37) + *((_WORD *)this + 36) + v10 - 1))
    {
      int v13 = (__int16)v11;
LABEL_19:
      if (v11 != v13)
      {
        unint64_t v9 = this[21];
        goto LABEL_23;
      }

      goto LABEL_22;
    }

    LOWORD(v13) = *((_WORD *)this + 37) + *((_WORD *)this + 36) + v10 - 1;
    while (1)
    {
      BOOL v16 = v15 == a2 && (_DWORD)a3 == 0;
      if (v15 < a2 || v16) {
        break;
      }
      int v13 = (__int16)(v13 - 1);
      if (v13 < v12) {
        goto LABEL_19;
      }
    }

    if (v11 == (__int16)v13)
    {
LABEL_22:
      unint64_t v9 = this[23];
      if (v9) {
        goto LABEL_23;
      }
      return 0LL;
    }

    unint64_t v17 = this[15];
    uint64_t v18 = (__int16)v13 + 1LL;
    int v19 = *(UChar ***)(v8 + 8LL * *((unsigned __int8 *)v17 + v18));
    uint64_t v20 = *(UChar ***)(v8 + 8LL * *((unsigned __int8 *)v17 + (__int16)v13));
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    uint64_t v40 = 0LL;
    __int128 v39 = 0u;
    uint64_t v35 = 0LL;
    BOOL v36 = (UChar *)off_18971B688;
    LOWORD(v37) = 2;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    BOOL v31 = (UChar *)off_18971B688;
    LOWORD(v32) = 2;
    icu::TimeZoneRule::getName(v20, &v36);
    icu::TimeZoneRule::getName(v19, &v31);
    if ((v37 & 1) != 0)
    {
      if ((v32 & 1) == 0) {
        goto LABEL_40;
      }
    }

    else
    {
      if ((v37 & 0x8000u) == 0LL) {
        int v22 = (unsigned __int16)v37 >> 5;
      }
      else {
        int v22 = DWORD1(v37);
      }
      if ((v32 & 0x8000u) == 0LL) {
        int v23 = (unsigned __int16)v32 >> 5;
      }
      else {
        int v23 = DWORD1(v32);
      }
      if ((v32 & 1) != 0
        || v22 != v23
        || !icu::UnicodeString::doEquals((icu::UnicodeString *)&v36, (const icu::UnicodeString *)&v31, v22))
      {
        goto LABEL_40;
      }
    }

    Rawint Offset = icu::TimeZoneRule::getRawOffset((icu::TimeZoneRule *)v20);
    if (RawOffset == icu::TimeZoneRule::getRawOffset((icu::TimeZoneRule *)v19))
    {
      int DSTSavings = icu::TimeZoneRule::getDSTSavings((icu::TimeZoneRule *)v20);
      if (DSTSavings == icu::TimeZoneRule::getDSTSavings((icu::TimeZoneRule *)v19))
      {
        uint64_t v8 = (*((uint64_t (**)(icu::TimeZoneTransition **, void, icu::TimeZoneTransition *, double))*this
              + 14))( this,  0LL,  a4,  v21);
LABEL_41:
        icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)&v31);
        icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)&v36);
        return v8;
      }
    }

uint64_t icu::OlsonTimeZone::getPreviousTransition( icu::TimeZoneTransition **this, double a2, uint64_t a3, icu::TimeZoneTransition *a4)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  UErrorCode v28 = U_ZERO_ERROR;
  icu::OlsonTimeZone::checkTransitionRules((icu::OlsonTimeZone *)this, &v28);
  uint64_t v8 = 0LL;
  if (v28 > U_ZERO_ERROR) {
    return v8;
  }
  if (!this[16]) {
    goto LABEL_9;
  }
  if ((_DWORD)a3 && icu::TimeZoneTransition::getTime(this[23]) == a2)
  {
LABEL_21:
    double v15 = this[23];
LABEL_22:
    icu::TimeZoneTransition::operator=(a4, v15);
    return 1LL;
  }

  if (icu::TimeZoneTransition::getTime(this[23]) >= a2)
  {
LABEL_9:
    uint64_t v8 = (uint64_t)this[24];
    if (!v8) {
      return v8;
    }
    LOWORD(v1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = *((_WORD *)this + 37) + *((_WORD *)this + 36) + *((_WORD *)this + 38);
    int v11 = *((__int16 *)this + 88);
    do
    {
      int v10 = (__int16)(v10 - 1);
      if (v10 < v11) {
        return 0LL;
      }
      double v12 = (double)(uint64_t)icu::OlsonTimeZone::transitionTimeInSeconds((icu::OlsonTimeZone *)this, v10) * 1000.0;
      BOOL v13 = v12 == a2 && a3 != 0;
    }

    while (v12 >= a2 && !v13);
    if (v10 == v11)
    {
      double v15 = this[21];
      goto LABEL_22;
    }

    BOOL v16 = (unsigned __int8 *)this[15] + v10;
    unint64_t v17 = *(UChar ***)(v8 + 8LL * *v16);
    uint64_t v18 = *(UChar ***)(v8 + 8LL * *(v16 - 1));
    double v19 = (double)(uint64_t)icu::OlsonTimeZone::transitionTimeInSeconds((icu::OlsonTimeZone *)this, v10) * 1000.0;
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    uint64_t v38 = 0LL;
    __int128 v37 = 0u;
    uint64_t v33 = 0LL;
    __int128 v34 = (UChar *)off_18971B688;
    LOWORD(v35) = 2;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    BOOL v29 = (UChar *)off_18971B688;
    LOWORD(v3icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
    icu::TimeZoneRule::getName(v18, &v34);
    icu::TimeZoneRule::getName(v17, &v29);
    if ((v35 & 1) != 0)
    {
      if ((v30 & 1) == 0) {
        goto LABEL_39;
      }
    }

    else
    {
      if ((v35 & 0x8000u) == 0LL) {
        int v20 = (unsigned __int16)v35 >> 5;
      }
      else {
        int v20 = DWORD1(v35);
      }
      if ((v30 & 0x8000u) == 0LL) {
        int v21 = (unsigned __int16)v30 >> 5;
      }
      else {
        int v21 = DWORD1(v30);
      }
      if ((v30 & 1) != 0
        || v20 != v21
        || !icu::UnicodeString::doEquals((icu::UnicodeString *)&v34, (const icu::UnicodeString *)&v29, v20))
      {
        goto LABEL_39;
      }
    }

    Rawint Offset = icu::TimeZoneRule::getRawOffset((icu::TimeZoneRule *)v18);
    if (RawOffset == icu::TimeZoneRule::getRawOffset((icu::TimeZoneRule *)v17))
    {
      int DSTSavings = icu::TimeZoneRule::getDSTSavings((icu::TimeZoneRule *)v18);
      if (DSTSavings == icu::TimeZoneRule::getDSTSavings((icu::TimeZoneRule *)v17))
      {
        uint64_t v8 = (*((uint64_t (**)(icu::TimeZoneTransition **, void, icu::TimeZoneTransition *, double))*this
              + 15))( this,  0LL,  a4,  v19);
LABEL_40:
        icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)&v29);
        icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v34);
        return v8;
      }
    }

uint64_t icu::OlsonTimeZone::countTransitionRules(icu::OlsonTimeZone *this, UErrorCode *a2)
{
  UErrorCode v6 = (void *)*((void *)this + 24);
  if (v6 && *((__int16 *)this + 100) >= 1)
  {
    LODWORD(v4) = 0;
    uint64_t v7 = *((unsigned __int16 *)this + 100);
    do
    {
      if (*v6++) {
        uint64_t v4 = (v4 + 1);
      }
      else {
        uint64_t v4 = v4;
      }
      --v7;
    }

    while (v7);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  uint64_t v9 = *((void *)this + 16);
  if (v9)
  {
    else {
      return (v4 + 1);
    }
  }

  return v4;
}

void icu::OlsonTimeZone::getTimeZoneRules( icu::OlsonTimeZone *this, const icu::InitialTimeZoneRule **a2, const icu::TimeZoneRule **a3, int *a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    icu::OlsonTimeZone::checkTransitionRules(this, a5);
    if (*(int *)a5 <= 0)
    {
      int v10 = 0;
      *a2 = (const icu::InitialTimeZoneRule *)*((void *)this + 20);
      int v11 = *a4;
      if (*((void *)this + 24) && v11 >= 1)
      {
        if (*((__int16 *)this + 100) < 1)
        {
          int v10 = 0;
        }

        else
        {
          uint64_t v12 = 0LL;
          int v10 = 0;
          uint64_t v13 = 8LL * *((unsigned __int16 *)this + 100);
          do
          {
            int v14 = *(const icu::TimeZoneRule **)(*((void *)this + 24) + v12);
            if (v14)
            {
              a3[v10++] = v14;
              if (v10 >= v11) {
                break;
              }
            }

            v12 += 8LL;
          }

          while (v13 != v12);
          int v11 = *a4;
        }
      }

      uint64_t v15 = *((void *)this + 26);
      if (v15) {
        BOOL v16 = v11 <= v10;
      }
      else {
        BOOL v16 = 1;
      }
      if (!v16)
      {
        int v18 = 0;
        uint64_t v17 = (v11 - v10);
        (*(void (**)(uint64_t, char *, const icu::TimeZoneRule **, uint64_t *, UErrorCode *))(*(void *)v15 + 144LL))( v15,  (char *)&v17 + 4,  &a3[v10],  &v17,  a5);
        v10 += v17;
      }

      *a4 = v10;
    }
  }

const char *sub_18094F778()
{
  return "persian";
}

uint64_t *sub_18094F784@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  BOOL result = icu::UMemory::operator new(a3, (icu::UMemory *)0x270, a2);
  if (result)
  {
    BOOL result = (uint64_t *)icu::Calendar::Calendar((uint64_t)result, a1);
    *BOOL result = (uint64_t)&off_189729510;
  }

  return result;
}

icu::Calendar *sub_18094F7C0(icu::Calendar *a1, char **a2, UErrorCode *a3)
{
  UErrorCode v6 = (icu::TimeZone *)icu::TimeZone::forLocaleOrDefault(a2, (const icu::Locale *)a2);
  uint64_t v7 = icu::Calendar::Calendar(a1, v6, (const icu::Locale *)a2, a3);
  *(void *)a1 = &off_189729510;
  icu::Calendar::getNow(v7);
  icu::Calendar::setTimeInMillis((uint64_t)a1, v8, a3);
  return a1;
}

void sub_18094F830(icu::Calendar *a1)
{
}

uint64_t sub_18094F844(uint64_t a1, int a2, int a3)
{
  return dword_180A3B3E8[4 * a2 + a3];
}

uint64_t sub_18094F858(uint64_t a1, int a2, int a3)
{
  int v3 = a2;
  int v6 = a3;
  int v7 = 0;
  sub_1808FA26C(33, &v7, (double)(25 * v3 + 11));
  if (v7 <= 7) {
    uint64_t v4 = (char *)&unk_180A3B568;
  }
  else {
    uint64_t v4 = (char *)&unk_180A3B574;
  }
  return v4[v6];
}

uint64_t sub_18094F8E0(uint64_t a1, int a2)
{
  int v3 = 0;
  sub_1808FA26C(33, &v3, (double)(25 * a2 + 11));
  if (v3 > 7) {
    return 365LL;
  }
  else {
    return 366LL;
  }
}

uint64_t sub_18094F928(uint64_t a1, int a2, int a3)
{
  int v3 = a2;
  int v5 = a3;
  uint64_t result = sub_1808FA234(8 * v3 + 21, 33) + 365 * v3 + 1947954;
  if (v5) {
    return (result + word_180A3B580[v5]);
  }
  return result;
}

uint64_t sub_18094F9A4(uint64_t a1)
{
  if (icu::Calendar::newerField(a1, 0x13u, 1u) == 19)
  {
    if (*(int *)(a1 + 208) >= 1)
    {
      uint64_t v2 = (unsigned int *)(a1 + 88);
      return *v2;
    }
  }

  else if (*(int *)(a1 + 136) >= 1)
  {
    uint64_t v2 = (unsigned int *)(a1 + 16);
    return *v2;
  }

  return 1LL;
}

double sub_18094FA04(uint64_t a1, int a2)
{
  int v3 = a2 - 1948320;
  int v4 = sub_1808FA250(33LL * (a2 - 1948320) + 3, 12053LL);
  int v5 = v4 + 1;
  int v6 = v3 - sub_1808FA234(8 * (v4 + 1) + 21, 33) - 365 * v4;
  unsigned int v7 = (v6 - 6) / 0x1Eu;
  if (v6 <= 215) {
    unsigned int v7 = v6 / 31;
  }
  int v8 = word_180A3B580[v7];
  *(_BYTE *)(a1 + 108) = 1;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = v5;
  *(void *)&double result = 0x100000001LL;
  *(void *)(a1 + 132) = 0x100000001LL;
  *(_WORD *)(a1 + 109) = 257;
  *(_DWORD *)(a1 + 88) = v5;
  *(_DWORD *)(a1 + 208) = 1;
  *(_BYTE *)(a1 + 127) = 1;
  *(_DWORD *)(a1 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v7;
  *(_DWORD *)(a1 + 14icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 1;
  int v10 = v6 + 1;
  *(_DWORD *)(a1 + 104) = v7;
  *(_DWORD *)(a1 + 224) = 1;
  *(_BYTE *)(a1 + 13icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 1;
  *(_WORD *)(a1 + 113) = 257;
  *(_DWORD *)(a1 + 32) = v10 - v8;
  *(_DWORD *)(a1 + 36) = v10;
  *(void *)(a1 + 152) = 0x100000001LL;
  return result;
}

uint64_t sub_18094FAFC(_BYTE *a1, UErrorCode *a2)
{
  unsigned int v3 = icu::Calendar::get(a1, 0x13u, a2) + 622;
  else {
    return 0LL;
  }
}

_BYTE *sub_18094FB34(_BYTE *a1, int a2)
{
  return icu::Calendar::set(a1, 0x13u, a2 - 622);
}

uint64_t sub_18094FB40()
{
  return 1LL;
}

double sub_18094FB48()
{
  unsigned int v0 = atomic_load((unsigned int *)&unk_18C4497E0);
  if (v0 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_18C4497E0))
  {
    sub_18094FB94();
    icu::umtx_initImplPostInit((unsigned int *)&unk_18C4497E0);
  }

  return *(double *)&qword_18C448418;
}

void sub_18094FB94()
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  UErrorCode v3 = U_ZERO_ERROR;
  bzero(v5, 0x270uLL);
  icu::Locale::Locale(v0, (icu::Locale *)v4, "@calendar=persian", 0LL, 0LL, 0LL);
  sub_18094F7C0((icu::Calendar *)v5, v4, &v3);
  icu::Locale::~Locale((icu::Locale *)v4);
  if (v3 <= U_ZERO_ERROR)
  {
    icu::Calendar::getNow(v1);
    icu::Calendar::setTimeInMillis((uint64_t)v5, v2, &v3);
    icu::Calendar::add(v5, 1u, -80, &v3);
    qword_18C448418 = icu::Calendar::getTimeInMillis((icu::Calendar *)v5, &v3);
    dword_18C448420 = icu::Calendar::get(v5, 1u, &v3);
  }

  icu::Calendar::~Calendar((icu::Calendar *)v5);
}

uint64_t sub_18094FC88()
{
  unsigned int v0 = atomic_load((unsigned int *)&unk_18C4497E0);
  if (v0 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_18C4497E0))
  {
    sub_18094FB94();
    icu::umtx_initImplPostInit((unsigned int *)&unk_18C4497E0);
  }

  return dword_18C448420;
}

void *icu::PersianCalendar::getStaticClassID(icu::PersianCalendar *this)
{
  return &unk_18C5356FC;
}

void *sub_18094FCE0()
{
  return &unk_18C5356FC;
}

void sub_18094FCEC(uint64_t a1@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  *(_OWORD *)(a3 + 8) = 0u;
  *(void *)(a3 + 56) = 0LL;
  *(_OWORD *)(a3 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(void *)a3 = a3 + 16;
  *(_DWORD *)(a3 + 8) = 3;
  *(_DWORD *)(a3 + 56) = 0;
  uint64_t v6 = ures_openDirect(0LL, (uint64_t)"pluralRanges", (uint64_t)a2);
  if (*(int *)a2 <= 0)
  {
    memset(&v11[1], 0, 48);
    uint64_t v12 = 0LL;
    v11[0] = (char *)&v11[1] + 5;
    LODWORD(v11[1]) = 40;
    icu::CharString::append((icu::CharString *)v11, "locales/", -1, a2);
    icu::CharString::append((icu::CharString *)v11, (const char *)(a1 + 8), -1, a2);
    if (*(int *)a2 <= 0)
    {
      uint64_t v10 = 0LL;
      StringByKeyWithFallbacuint64_t k = ures_getStringByKeyWithFallback(v6, (char *)v11[0], (int *)&v10 + 1, (UErrorCode *)&v10);
      if ((int)v10 <= 0)
      {
        int v8 = (UChar *)StringByKeyWithFallback;
        LODWORD(v12) = 0;
        *(_BYTE *)v11[0] = 0;
        icu::CharString::append((icu::CharString *)v11, "rules/", -1, a2);
        icu::CharString::appendInvariantChars((int *)v11, v8, SHIDWORD(v10), a2);
        if (*(int *)a2 <= 0)
        {
          v9[0] = &off_1897296F0;
          v9[1] = a3;
          ures_getAllItemsWithFallback(v6, (char *)v11[0], (uint64_t)v9, (int *)a2);
          icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v9);
        }
      }
    }

    if (BYTE4(v11[1])) {
      uprv_free(v11[0]);
    }
  }

  if (v6) {
    ures_close(v6);
  }
}

void *sub_18094FEA4@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 8) = 0u;
  *(void *)(a3 + 56) = 0LL;
  *(_OWORD *)(a3 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  int v5 = (void *)(a3 + 16);
  *(void *)a3 = a3 + 16;
  *(_DWORD *)(a3 + 8) = 3;
  *(_DWORD *)(a3 + 56) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 56);
  if ((int)v6 < 4)
  {
LABEL_6:
    double result = memcpy(v5, *(const void **)a1, 12LL * (int)v6);
    *(_DWORD *)(a3 + 56) = v6;
    return result;
  }

  double result = uprv_malloc(12 * v6);
  if (result)
  {
    int v5 = result;
    if (*(_BYTE *)(a3 + 12)) {
      uprv_free(*(void **)a3);
    }
    *(void *)a3 = v5;
    *(_DWORD *)(a3 + 8) = v6;
    *(_BYTE *)(a3 + 12) = 1;
    LODWORD(v6) = *(_DWORD *)(a1 + 56);
    goto LABEL_6;
  }

  *a2 = 7;
  return result;
}

uint64_t *sub_18094FF68@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t *a3@<X8>)
{
  double result = icu::UMemory::operator new(a3, (icu::UMemory *)0x40, (unint64_t)a2);
  if (result)
  {
    unsigned int v7 = result;
    *double result = *(void *)a1;
    *((_DWORD *)result + 2) = *(_DWORD *)(a1 + 8);
    *((_BYTE *)result + 12) = *(_BYTE *)(a1 + 12);
    int v8 = *(const void **)a1;
    if (*(void *)a1 == a1 + 16)
    {
      *double result = (uint64_t)(result + 2);
      double result = (uint64_t *)memcpy(result + 2, v8, 12LL * *(int *)(a1 + 8));
    }

    else
    {
      *(void *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 3;
      *(_BYTE *)(a1 + 12) = 0;
    }

    *((_DWORD *)v7 + 14) = *(_DWORD *)(a1 + 56);
    *a3 = (uint64_t)v7;
  }

  else
  {
    *a3 = 0LL;
    if (*a2 <= 0) {
      *a2 = 7;
    }
  }

  return result;
}

void sub_180950020(uint64_t a1, int a2, int *a3)
{
  if (*a3 <= 0 && *(_DWORD *)(a1 + 8) < a2)
  {
    if (a2 >= 1 && (uint64_t v6 = uprv_malloc(12LL * a2)) != 0LL)
    {
      unsigned int v7 = v6;
      if (*(_BYTE *)(a1 + 12)) {
        uprv_free(*(void **)a1);
      }
      *(void *)a1 = v7;
      *(_DWORD *)(a1 + 8) = a2;
      *(_BYTE *)(a1 + 12) = 1;
    }

    else
    {
      *a3 = 7;
    }
  }

uint64_t sub_1809500AC(unsigned int *a1, int a2, int a3)
{
  uint64_t v3 = a1[14];
  for (uint64_t i = (unsigned int *)(*(void *)a1 + 8LL); *(i - 2) != a2 || *(i - 1) != a3; i += 3)
  {
    if (!--v3) {
      return 5LL;
    }
  }

  return *i;
}

void sub_1809500F0(icu::ResourceSink *a1)
{
}

void sub_180950104(uint64_t a1, uint64_t a2, icu::ResourceValue *a3, uint64_t a4, int *a5)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  v24[0] = 0LL;
  v24[1] = 0LL;
  uint64_t v25 = 0LL;
  (*(void (**)(void *__return_ptr, icu::ResourceValue *, int *))(*(void *)a3 + 80LL))(v24, a3, a5);
  if (*a5 <= 0)
  {
    sub_180950020(*(void *)(a1 + 8), v25, a5);
    if (*a5 <= 0)
    {
      if (icu::ResourceArray::getValue((icu::ResourceArray *)v24, 0, a3))
      {
        unsigned int v8 = 1;
        while (1)
        {
          v22[0] = 0LL;
          v22[1] = 0LL;
          uint64_t v23 = 0LL;
          (*(void (**)(void *__return_ptr, icu::ResourceValue *, int *))(*(void *)a3 + 80LL))( v22,  a3,  a5);
          if (*a5 > 0) {
            break;
          }
          if ((_DWORD)v23 != 3)
          {
            *a5 = 17;
            return;
          }

          icu::ResourceArray::getValue((icu::ResourceArray *)v22, 0, a3);
          int v27 = 0;
          uint64_t v26 = (*(uint64_t (**)(icu::ResourceValue *, int *, int *))(*(void *)a3 + 32LL))(a3, &v27, a5);
          icu::UnicodeString::UnicodeString(v28, 1LL, &v26);
          int v10 = icu::StandardPlural::indexFromString((icu::StandardPlural *)v28, (const icu::UnicodeString *)a5, v9);
          icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v28);
          if (*a5 <= 0)
          {
            icu::ResourceArray::getValue((icu::ResourceArray *)v22, 1u, a3);
            int v27 = 0;
            uint64_t v26 = (*(uint64_t (**)(icu::ResourceValue *, int *, int *))(*(void *)a3 + 32LL))(a3, &v27, a5);
            icu::UnicodeString::UnicodeString(v28, 1LL, &v26);
            int v13 = icu::StandardPlural::indexFromString((icu::StandardPlural *)v28, (const icu::UnicodeString *)a5, v12);
            icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v28);
            if (*a5 <= 0)
            {
              icu::ResourceArray::getValue((icu::ResourceArray *)v22, 2u, a3);
              int v27 = 0;
              uint64_t v26 = (*(uint64_t (**)(icu::ResourceValue *, int *, int *))(*(void *)a3 + 32LL))(a3, &v27, a5);
              icu::UnicodeString::UnicodeString(v28, 1LL, &v26);
              int v16 = icu::StandardPlural::indexFromString( (icu::StandardPlural *)v28,  (const icu::UnicodeString *)a5,  v15);
              icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v28);
              if (*a5 < 1)
              {
                uint64_t v18 = *(void *)(a1 + 8);
                int v19 = *(_DWORD *)(v18 + 56);
                int v20 = (_DWORD *)(*(void *)v18 + 12LL * v19);
                *int v20 = v10;
                v20[1] = v13;
                v20[2] = v16;
                *(_DWORD *)(v18 + 56) = v19 + 1;
              }
            }
          }

          return;
        }
      }
    }
  }

void *icu::PluralFormat::getStaticClassID(icu::PluralFormat *this)
{
  return &unk_18C535700;
}

void *icu::PluralFormat::getDynamicClassID(icu::PluralFormat *this)
{
  return &unk_18C535700;
}

icu::PluralFormat *icu::PluralFormat::PluralFormat(icu::PluralFormat *this, UErrorCode *a2)
{
  int v4 = (icu::Locale *)icu::Format::Format((uint64_t)this);
  *(void *)int v4 = off_189729738;
  int v5 = (icu::Locale *)((char *)v4 + 328);
  Default = icu::Locale::getDefault(v4);
  icu::Locale::Locale(v5, (uint64_t)Default);
  icu::MessagePattern::MessagePattern((icu::PluralFormat *)((char *)this + 552), a2);
  *(_OWORD *)((char *)this + 68icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *((void *)this + 87) = off_189729790;
  *((void *)this + 88) = 0LL;
  icu::PluralFormat::init(this, 0LL, 0LL, (icu::UnifiedCache *)a2);
  return this;
}

void *icu::PluralFormat::init( void *result, icu::PluralRules *this, unint64_t a3, icu::UnifiedCache *a4)
{
  int v4 = (uint64_t *)*(unsigned int *)a4;
  if ((int)v4 <= 0)
  {
    uint64_t v6 = (uint64_t)result;
    if (this)
    {
      double result = icu::PluralRules::clone(this, v4);
      *(void *)(v6 + 704) = result;
      if (!result)
      {
        *(_DWORD *)a4 = 7;
        return result;
      }
    }

    else
    {
      result[88] = icu::PluralRules::forLocale((icu::Locale *)(result + 41), a3, a4);
    }

    double result = icu::NumberFormat::createInstance((char **)(v6 + 328), (UErrorCode *)a4, v7);
    *(void *)(v6 + 68icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = result;
  }

  return result;
}

icu::PluralFormat *icu::PluralFormat::PluralFormat( icu::PluralFormat *this, const icu::Locale *a2, UErrorCode *a3)
{
  uint64_t v6 = (void *)icu::Format::Format((uint64_t)this);
  *uint64_t v6 = off_189729738;
  icu::Locale::Locale((icu::Locale *)(v6 + 41), (uint64_t)a2);
  icu::MessagePattern::MessagePattern((icu::PluralFormat *)((char *)this + 552), a3);
  *(_OWORD *)((char *)this + 68icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *((void *)this + 87) = off_189729790;
  *((void *)this + 88) = 0LL;
  icu::PluralFormat::init(this, 0LL, 0LL, (icu::UnifiedCache *)a3);
  return this;
}

icu::PluralFormat *icu::PluralFormat::PluralFormat( icu::PluralFormat *this, const icu::PluralRules *a2, UErrorCode *a3)
{
  uint64_t v6 = (icu::Locale *)icu::Format::Format((uint64_t)this);
  *(void *)uint64_t v6 = off_189729738;
  unsigned int v7 = (icu::Locale *)((char *)v6 + 328);
  Default = icu::Locale::getDefault(v6);
  icu::Locale::Locale(v7, (uint64_t)Default);
  icu::MessagePattern::MessagePattern((icu::PluralFormat *)((char *)this + 552), a3);
  *(_OWORD *)((char *)this + 68icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *((void *)this + 87) = off_189729790;
  *((void *)this + 88) = 0LL;
  icu::PluralFormat::init(this, a2, 2uLL, (icu::UnifiedCache *)a3);
  return this;
}

icu::PluralFormat *icu::PluralFormat::PluralFormat( icu::PluralFormat *this, const icu::Locale *a2, const icu::PluralRules *a3, UErrorCode *a4)
{
  unsigned int v8 = (void *)icu::Format::Format((uint64_t)this);
  *unsigned int v8 = off_189729738;
  icu::Locale::Locale((icu::Locale *)(v8 + 41), (uint64_t)a2);
  icu::MessagePattern::MessagePattern((icu::PluralFormat *)((char *)this + 552), a4);
  *(_OWORD *)((char *)this + 68icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *((void *)this + 87) = off_189729790;
  *((void *)this + 88) = 0LL;
  icu::PluralFormat::init(this, a3, 2uLL, (icu::UnifiedCache *)a4);
  return this;
}

uint64_t icu::PluralFormat::PluralFormat(uint64_t a1, uint64_t a2, unint64_t a3, UErrorCode *a4)
{
  unsigned int v8 = (void *)icu::Format::Format(a1);
  *unsigned int v8 = off_189729738;
  icu::Locale::Locale((icu::Locale *)(v8 + 41), a2);
  icu::MessagePattern::MessagePattern((icu::MessagePattern *)(a1 + 552), a4);
  *(_OWORD *)(a1 + 68icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *(void *)(a1 + 696) = off_189729790;
  *(void *)(a1 + 704) = 0LL;
  icu::PluralFormat::init((void *)a1, 0LL, a3, (icu::UnifiedCache *)a4);
  return a1;
}

icu::PluralFormat *icu::PluralFormat::PluralFormat(icu::PluralFormat *this, UChar **a2, UErrorCode *a3)
{
  uint64_t v6 = (icu::Locale *)icu::Format::Format((uint64_t)this);
  *(void *)uint64_t v6 = off_189729738;
  unsigned int v7 = (icu::Locale *)((char *)v6 + 328);
  Default = icu::Locale::getDefault(v6);
  icu::Locale::Locale(v7, (uint64_t)Default);
  icu::MessagePattern::MessagePattern((icu::PluralFormat *)((char *)this + 552), a3);
  *(_OWORD *)((char *)this + 68icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *((void *)this + 87) = off_189729790;
  *((void *)this + 88) = 0LL;
  icu::PluralFormat::init(this, 0LL, 0LL, (icu::UnifiedCache *)a3);
  icu::PluralFormat::applyPattern(this, a2, a3);
  return this;
}

void icu::PluralFormat::applyPattern(icu::PluralFormat *this, UChar **a2, UErrorCode *a3)
{
  int v5 = (icu::PluralFormat *)((char *)this + 552);
  icu::MessagePattern::parsePluralStyle((icu::PluralFormat *)((char *)this + 552), a2, 0LL, a3);
  if (*(int *)a3 < 1)
  {
    Pluralint Offset = icu::MessagePattern::getPluralOffset(v5, 0);
  }

  else
  {
    icu::MessagePattern::clear((uint64_t)v5);
    Pluralint Offset = 0.0;
  }

  *((double *)this + 86) = PluralOffset;
}

icu::PluralFormat *icu::PluralFormat::PluralFormat( icu::PluralFormat *this, const icu::Locale *a2, UChar **a3, UErrorCode *a4)
{
  unsigned int v8 = (void *)icu::Format::Format((uint64_t)this);
  *unsigned int v8 = off_189729738;
  icu::Locale::Locale((icu::Locale *)(v8 + 41), (uint64_t)a2);
  icu::MessagePattern::MessagePattern((icu::PluralFormat *)((char *)this + 552), a4);
  *(_OWORD *)((char *)this + 68icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *((void *)this + 87) = off_189729790;
  *((void *)this + 88) = 0LL;
  icu::PluralFormat::init(this, 0LL, 0LL, (icu::UnifiedCache *)a4);
  icu::PluralFormat::applyPattern(this, a3, a4);
  return this;
}

icu::PluralFormat *icu::PluralFormat::PluralFormat( icu::PluralFormat *this, const icu::PluralRules *a2, UChar **a3, UErrorCode *a4)
{
  unsigned int v8 = (icu::Locale *)icu::Format::Format((uint64_t)this);
  *(void *)unsigned int v8 = off_189729738;
  uint64_t v9 = (icu::Locale *)((char *)v8 + 328);
  Default = icu::Locale::getDefault(v8);
  icu::Locale::Locale(v9, (uint64_t)Default);
  icu::MessagePattern::MessagePattern((icu::PluralFormat *)((char *)this + 552), a4);
  *(_OWORD *)((char *)this + 68icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *((void *)this + 87) = off_189729790;
  *((void *)this + 88) = 0LL;
  icu::PluralFormat::init(this, a2, 2uLL, (icu::UnifiedCache *)a4);
  icu::PluralFormat::applyPattern(this, a3, a4);
  return this;
}

icu::PluralFormat *icu::PluralFormat::PluralFormat( icu::PluralFormat *this, const icu::Locale *a2, const icu::PluralRules *a3, UChar **a4, UErrorCode *a5)
{
  int v10 = (void *)icu::Format::Format((uint64_t)this);
  void *v10 = off_189729738;
  icu::Locale::Locale((icu::Locale *)(v10 + 41), (uint64_t)a2);
  icu::MessagePattern::MessagePattern((icu::PluralFormat *)((char *)this + 552), a5);
  *(_OWORD *)((char *)this + 68icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *((void *)this + 87) = off_189729790;
  *((void *)this + 88) = 0LL;
  icu::PluralFormat::init(this, a3, 2uLL, (icu::UnifiedCache *)a5);
  icu::PluralFormat::applyPattern(this, a4, a5);
  return this;
}

uint64_t icu::PluralFormat::PluralFormat( uint64_t a1, uint64_t a2, unint64_t a3, UChar **a4, UErrorCode *a5)
{
  int v10 = (void *)icu::Format::Format(a1);
  void *v10 = off_189729738;
  icu::Locale::Locale((icu::Locale *)(v10 + 41), a2);
  icu::MessagePattern::MessagePattern((icu::MessagePattern *)(a1 + 552), a5);
  *(_OWORD *)(a1 + 68icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *(void *)(a1 + 696) = off_189729790;
  *(void *)(a1 + 704) = 0LL;
  icu::PluralFormat::init((void *)a1, 0LL, a3, (icu::UnifiedCache *)a5);
  icu::PluralFormat::applyPattern((icu::PluralFormat *)a1, a4, a5);
  return a1;
}

icu::PluralFormat *icu::PluralFormat::PluralFormat(icu::PluralFormat *this, const icu::PluralFormat *a2)
{
  int v4 = (void *)icu::Format::Format((uint64_t)this, (uint64_t)a2);
  *int v4 = off_189729738;
  icu::Locale::Locale((icu::Locale *)(v4 + 41), (uint64_t)a2 + 328);
  icu::MessagePattern::MessagePattern( (icu::PluralFormat *)((char *)this + 552),  (const icu::PluralFormat *)((char *)a2 + 552));
  *((void *)this + 85) = 0LL;
  *((void *)this + 86) = *((void *)a2 + 86);
  *((void *)this + 87) = off_189729790;
  *((void *)this + 88) = 0LL;
  icu::PluralFormat::copyObjects(this, a2, v5);
  return this;
}

void *icu::PluralFormat::copyObjects(icu::PluralFormat *this, const icu::PluralFormat *a2, UErrorCode *a3)
{
  int v13 = 0;
  uint64_t v5 = *((void *)this + 85);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = *((void *)this + 88);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  uint64_t v7 = *((void *)a2 + 85);
  if (v7) {
    uint64_t Instance = (icu::DecimalFormat *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 32LL))(v7);
  }
  else {
    uint64_t Instance = icu::NumberFormat::createInstance((char **)this + 41, (UErrorCode *)&v13, a3);
  }
  *((void *)this + 85) = Instance;
  int v11 = (icu::PluralRules *)*((void *)a2 + 88);
  if (v11) {
    double result = icu::PluralRules::clone(v11, v10);
  }
  else {
    double result = icu::PluralRules::forLocale((icu::PluralFormat *)((char *)this + 328), (const icu::Locale *)&v13, v9);
  }
  *((void *)this + 88) = result;
  return result;
}

void icu::PluralFormat::~PluralFormat(icu::PluralFormat *this)
{
  *(void *)this = off_189729738;
  uint64_t v2 = *((void *)this + 85);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *((void *)this + 87) = off_189729790;
  uint64_t v3 = *((void *)this + 88);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  icu::MessagePattern::~MessagePattern((icu::PluralFormat *)((char *)this + 552));
  icu::Locale::~Locale((icu::PluralFormat *)((char *)this + 328));
  icu::Format::~Format(this);
}

{
  void *v1;
  icu::PluralFormat::~PluralFormat(this);
  icu::UMemory::operator delete(v1);
}

void icu::PluralFormat::PluralSelectorAdapter::~PluralSelectorAdapter( icu::PluralFormat::PluralSelectorAdapter *this)
{
  *(void *)this = off_189729790;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
}

{
  uint64_t v1;
  *(void *)this = off_189729790;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
}

{
  uint64_t v2;
  *(void *)this = off_189729790;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::UMemory::operator delete(this);
}

icu::UnicodeString *icu::PluralFormat::format( icu::PluralFormat *this, const icu::Formattable *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  if (!icu::Formattable::isNumeric(a2))
  {
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return a3;
  }

  return icu::PluralFormat::format(this, a2, *((double *)a2 + 1), a3, a4, a5);
}

icu::UnicodeString *icu::PluralFormat::format( icu::PluralFormat *this, const icu::Formattable *a2, double a3, icu::UnicodeString *a4, icu::FieldPosition *a5, UErrorCode *a6)
{
  uint64_t v6 = a4;
  uint64_t v42 = *MEMORY[0x1895F89C0];
  if (!*((_DWORD *)this + 162)) {
    return (icu::UnicodeString *)(*(uint64_t (**)(void, const icu::Formattable *, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *, double))(**((void **)this + 85) + 40LL))( *((void *)this + 85),  a2,  a4,  a5,  a6,  a3);
  }
  double v11 = a3 - *((double *)this + 86);
  uint64_t v41 = 0LL;
  memset(v40, 0, sizeof(v40));
  memset(v39, 0, sizeof(v39));
  sub_1808D4228((uint64_t)v39);
  else {
    icu::number::impl::DecimalQuantity::setToDouble((void **)v40, v11);
  }
  __int128 v35 = 0u;
  uint64_t v38 = 0LL;
  __int128 v37 = 0u;
  __int128 v36 = 0u;
  __int128 v34 = off_18971B688;
  LOWORD(v35) = 2;
  int v13 = (icu::Format *)*((void *)this + 85);
  if (!v13
  {
    if (*((double *)this + 86) == 0.0)
    {
      icu::Format::format(v13, a2, (icu::UnicodeString *)&v34, a6);
    }

    else
    {
      icu::Formattable::Formattable((icu::Formattable *)v33, v11);
      icu::Format::format(v13, (const icu::Formattable *)v33, (icu::UnicodeString *)&v34, a6);
      icu::Formattable::~Formattable((icu::Formattable *)v33);
    }

void icu::PluralFormat::format( icu::PluralFormat *this@<X0>, UErrorCode *a2@<X2>, int a3@<W1>, icu::UnicodeString *a4@<X8>)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  void v10[2] = 0LL;
  v10[0] = off_189723AC8;
  v10[1] = 0xFFFFFFFFLL;
  __int128 v13 = 0u;
  uint64_t v16 = 0LL;
  __int128 v15 = 0u;
  __int128 v14 = 0u;
  uint64_t v12 = off_18971B688;
  LOWORD(v13) = 2;
  icu::Formattable::Formattable((icu::Formattable *)v11, a3);
  unsigned int v8 = (UChar **)icu::PluralFormat::format( this,  (const icu::Formattable *)v11,  (double)a3,  (icu::UnicodeString *)&v12,  (icu::FieldPosition *)v10,  a2);
  icu::UnicodeString::UnicodeString(a4, v8);
  icu::Formattable::~Formattable((icu::Formattable *)v11);
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)&v12);
  icu::FieldPosition::~FieldPosition((icu::FieldPosition *)v10);
}

void icu::PluralFormat::format( icu::PluralFormat *this@<X0>, double a2@<D0>, UErrorCode *a3@<X1>, icu::UnicodeString *a4@<X8>)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  void v10[2] = 0LL;
  v10[0] = off_189723AC8;
  v10[1] = 0xFFFFFFFFLL;
  __int128 v13 = 0u;
  uint64_t v16 = 0LL;
  __int128 v15 = 0u;
  __int128 v14 = 0u;
  uint64_t v12 = off_18971B688;
  LOWORD(v13) = 2;
  icu::Formattable::Formattable((icu::Formattable *)v11, a2);
  unsigned int v8 = (UChar **)icu::PluralFormat::format( this,  (const icu::Formattable *)v11,  a2,  (icu::UnicodeString *)&v12,  (icu::FieldPosition *)v10,  a3);
  icu::UnicodeString::UnicodeString(a4, v8);
  icu::Formattable::~Formattable((icu::Formattable *)v11);
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)&v12);
  icu::FieldPosition::~FieldPosition((icu::FieldPosition *)v10);
}

icu::UnicodeString *icu::PluralFormat::format( icu::PluralFormat *this, int a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  icu::Formattable::Formattable((icu::Formattable *)v12, a2);
  int v10 = icu::PluralFormat::format(this, (const icu::Formattable *)v12, (double)a2, a3, a4, a5);
  icu::Formattable::~Formattable((icu::Formattable *)v12);
  return v10;
}

icu::UnicodeString *icu::PluralFormat::format( icu::PluralFormat *this, double a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  icu::Formattable::Formattable((icu::Formattable *)v12, a2);
  int v10 = icu::PluralFormat::format(this, (const icu::Formattable *)v12, a2, a3, a4, a5);
  icu::Formattable::~Formattable((icu::Formattable *)v12);
  return v10;
}

uint64_t icu::PluralFormat::findSubMessage( icu::PluralFormat *this, const icu::MessagePattern *a2, uint64_t a3, const icu::PluralFormat::PluralSelector *a4, int *a5, double a6, UErrorCode *a7)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  if (*a5 <= 0)
  {
    int v12 = (int)a2;
    int v14 = *((_DWORD *)this + 24);
    __int128 v15 = (_DWORD *)(*((void *)this + 11) + 16LL * (int)a2);
    double NumericValue = 0.0;
    if ((*v15 & 0xFFFFFFFE) == 0xC)
    {
      double NumericValue = icu::MessagePattern::getNumericValue((uint64_t)this, (uint64_t)v15);
      ++v12;
    }

    __int128 v44 = 0u;
    __int128 v46 = 0u;
    __int128 v45 = 0u;
    uint64_t v47 = 0LL;
    uint64_t v43 = off_18971B688;
    LOWORD(v44) = 2;
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    __int128 v37 = &unk_180A3B5E2;
    icu::UnicodeString::UnicodeString(&v39, 0LL, &v37);
    BOOL v17 = 0;
    uint64_t v7 = 0LL;
    double v18 = a6 - NumericValue;
    int v19 = (char *)*((void *)this + 11);
    while (1)
    {
      uint64_t v20 = &v19[16 * v12];
      if (*(_DWORD *)v20 == 6)
      {
LABEL_51:
        icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v39);
        icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)&v43);
        return v7;
      }

      uint64_t v21 = v12 + 1LL;
      int v22 = &v19[16 * v21];
      if ((*(_DWORD *)v22 & 0xFFFFFFFE) == 0xC)
      {
        uint64_t v23 = (v12 + 2);
        if (icu::MessagePattern::getNumericValue((uint64_t)this, (uint64_t)v22) == a6)
        {
          uint64_t v7 = v23;
          goto LABEL_51;
        }

        uint64_t v21 = (int)v23;
      }

      else
      {
        LODWORD(v23) = v12 + 1;
        if (v17) {
          goto LABEL_11;
        }
        if (sub_18090FD7C((uint64_t)this, (uint64_t)v20, (uint64_t)&v39))
        {
          if ((_DWORD)v7)
          {
            BOOL v17 = 0;
          }

          else
          {
            if ((BYTE8(v39) & 1) != 0)
            {
              int v33 = (v44 & 1) == 0;
            }

            else
            {
              if ((v44 & 0x8000u) == 0LL) {
                int32_t v30 = (unsigned __int16)v44 >> 5;
              }
              else {
                int32_t v30 = DWORD1(v44);
              }
              if ((SWORD4(v39) & 0x8000u) == 0) {
                int v31 = WORD4(v39) >> 5;
              }
              else {
                int v31 = HIDWORD(v39);
              }
              if ((BYTE8(v39) & 2) != 0) {
                unint64_t v32 = (unint64_t)&v39 | 0xA;
              }
              else {
                unint64_t v32 = *((void *)&v40 + 1);
              }
              int v33 = icu::UnicodeString::doCompare( (uint64_t)&v43,  0,  v30,  v32,  v31 & (v31 >> 31),  v31 & ~(v31 >> 31));
            }

            BOOL v17 = v33 == 0;
            uint64_t v7 = v21;
          }

          goto LABEL_12;
        }

        if ((unsigned __int16)v44 <= 0x1Fu
          && ((*(void (**)(void *__return_ptr, uint64_t, const icu::PluralFormat::PluralSelector *, int *, double))(*(void *)a3 + 16LL))( v38,  a3,  a4,  a5,  v18),  icu::UnicodeString::operator=((icu::UnicodeString *)&v43, (icu::UnicodeString *)v38),  icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)v38),  (_DWORD)v7)
          && ((BYTE8(v39) & 1) != 0
            ? (int v29 = (v44 & 1) == 0)
            : ((v44 & 0x8000u) == 0LL ? (int32_t v26 = (unsigned __int16)v44 >> 5) : (int32_t v26 = DWORD1(v44)),
               (SWORD4(v39) & 0x8000u) == 0 ? (int v27 = WORD4(v39) >> 5) : (int v27 = HIDWORD(v39)),
               (BYTE8(v39) & 2) != 0 ? (unint64_t v28 = (unint64_t)&v39 | 0xA) : (unint64_t v28 = *((void *)&v40 + 1)),
               int v29 = icu::UnicodeString::doCompare( (uint64_t)&v43,  0,  v26,  v28,  v27 & (v27 >> 31),  v27 & ~(v27 >> 31))),  !v29))
        {
LABEL_11:
          BOOL v17 = 1;
        }

        else
        {
          BOOL v34 = sub_18090FD7C((uint64_t)this, (uint64_t)v20, (uint64_t)&v43);
          BOOL v17 = v34;
          if (v34) {
            uint64_t v7 = v21;
          }
          else {
            uint64_t v7 = v7;
          }
        }
      }

icu::UnicodeString *icu::PluralFormat::toPattern(icu::PluralFormat *this, icu::UnicodeString *a2)
{
  if (*((_DWORD *)this + 162))
  {
    unsigned int v3 = *((unsigned __int16 *)this + 288);
    int v4 = (__int16)v3;
    unsigned int v5 = v3 >> 5;
    if (v4 >= 0) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = *((unsigned int *)this + 145);
    }
    icu::UnicodeString::doAppend((uint64_t)a2, (icu::PluralFormat *)((char *)this + 568), 0, v6);
  }

  else
  {
    icu::UnicodeString::setToBogus(a2);
  }

  return a2;
}

void *icu::PluralFormat::setLocale(void *this, const icu::Locale *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    int v4 = this;
    icu::Locale::operator=((icu::Locale *)(this + 41), (uint64_t)a2);
    icu::MessagePattern::clear((uint64_t)(v4 + 69));
    uint64_t v5 = v4[85];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    }
    v4[85] = 0LL;
    v4[86] = 0LL;
    uint64_t v6 = v4[88];
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
    v4[88] = 0LL;
    return icu::PluralFormat::init(v4, 0LL, 0LL, (icu::UnifiedCache *)a3);
  }

  return this;
}

uint64_t icu::PluralFormat::PluralSelectorAdapter::reset(icu::PluralFormat::PluralSelectorAdapter *this)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0LL;
  return result;
}

uint64_t icu::PluralFormat::setNumberFormat(uint64_t this, const icu::NumberFormat *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v4 = this;
    this = (*(uint64_t (**)(const icu::NumberFormat *))(*(void *)a2 + 32LL))(a2);
    if (this)
    {
      uint64_t v5 = this;
      this = *(void *)(v4 + 680);
      if (this) {
        this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8LL))(this);
      }
      *(void *)(v4 + 68icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v5;
    }

    else
    {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    }
  }

  return this;
}

icu::PluralFormat *icu::PluralFormat::clone@<X0>( icu::PluralFormat *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::PluralFormat *)icu::UMemory::operator new(a3, (icu::UMemory *)0x2C8, a2);
  if (result) {
    return icu::PluralFormat::PluralFormat(result, this);
  }
  return result;
}

const icu::PluralFormat *icu::PluralFormat::operator=( const icu::PluralFormat *a1, const icu::PluralFormat *a2)
{
  if (a1 != a2)
  {
    icu::Locale::operator=((const icu::PluralFormat *)((char *)a1 + 328), (uint64_t)a2 + 328);
    icu::MessagePattern::operator=((uint64_t)a1 + 552, (uint64_t)a2 + 552);
    *((void *)a1 + 86) = *((void *)a2 + 86);
    icu::PluralFormat::copyObjects(a1, a2, v4);
  }

  return a1;
}

uint64_t icu::PluralFormat::operator==(void *a1, void *a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  uint64_t result = icu::Format::operator==(a1, a2);
  if ((_DWORD)result)
  {
    uint64_t result = icu::Locale::operator==((uint64_t)(a1 + 41), (uint64_t)(a2 + 41));
    if ((_DWORD)result)
    {
      uint64_t result = icu::MessagePattern::operator==((uint64_t)(a1 + 69), (uint64_t)(a2 + 69));
      if ((_DWORD)result)
      {
        uint64_t v5 = a1[85];
        if ((v5 == 0) == (a2[85] != 0LL))
        {
          return 0LL;
        }

        else if (!v5 || (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24LL))(v5), (_DWORD)result))
        {
          uint64_t v6 = a1[88];
          uint64_t v7 = a2[88];
          uint64_t result = (v6 == 0) == (v7 == 0);
          if (v6)
          {
            if (v7) {
              return (*(uint64_t (**)(void))(*(void *)v6 + 24LL))(a1[88]);
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t icu::PluralFormat::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24LL))(a1) ^ 1;
}

void icu::PluralFormat::parseObject( icu::PluralFormat *this, const icu::UnicodeString *a2, icu::Formattable *a3, icu::ParsePosition *a4)
{
  *((_DWORD *)a4 + 3) = *((_DWORD *)a4 + 2);
}

double icu::PluralFormat::parseType(uint64_t a1, uint64_t a2, uint64_t a3, icu::Formattable *a4, uint64_t a5)
{
  uint64_t v59 = *MEMORY[0x1895F89C0];
  int v6 = *(_DWORD *)(a1 + 648);
  if (!v6)
  {
    double result = NAN;
    *(void *)(a5 + 12) = -1LL;
    return result;
  }

  uint64_t v7 = (_DWORD *)*(unsigned int *)(a5 + 12);
  __int128 v55 = 0u;
  uint64_t v58 = 0LL;
  __int128 v57 = 0u;
  __int128 v56 = 0u;
  int v54 = (UChar *)off_18971B688;
  LOWORD(v55) = 2;
  __int128 v50 = 0u;
  uint64_t v53 = 0LL;
  __int128 v52 = 0u;
  __int128 v51 = 0u;
  __int128 v49 = (UChar *)off_18971B688;
  LOWORD(v5icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
  if (v6 < 1)
  {
LABEL_70:
    *(void *)(a5 + 12) = -1LL;
    goto LABEL_71;
  }

  int v10 = 0;
  uint64_t v11 = v7 & ~((int)v7 >> 31);
  __int128 v42 = (icu::UnicodeString *)(a1 + 568);
  int v41 = -1;
  do
  {
    uint64_t v12 = v10 + 1LL;
    uint64_t v7 = *(_DWORD **)(a1 + 640);
    if (v7[4 * v10] != 11)
    {
      ++v10;
      continue;
    }

    uint64_t v13 = v10 + 2LL;
    if (v7[4 * v12])
    {
      v10 += 2;
      continue;
    }

    v10 += 3;
    if (v7[4 * v13] == 1)
    {
      __int128 v47 = 0u;
      __int128 v48 = 0u;
      __int128 v45 = 0u;
      __int128 v46 = 0u;
      int v14 = (char *)&v7[4 * v12];
      int v16 = *((_DWORD *)v14 + 1);
      __int128 v15 = v14 + 4;
      int v17 = v16 + *((unsigned __int16 *)v15 + 2);
      double v18 = (char *)&v7[4 * v13];
      int v20 = *((_DWORD *)v18 + 1);
      int v19 = v18 + 4;
      icu::UnicodeString::tempSubString(v42, v17, v20 - v17, (icu::UnicodeString *)&v45);
      unsigned int v21 = *(unsigned __int16 *)(a2 + 8);
      if (a3)
      {
        if ((v21 & 0x8000) != 0)
        {
          int v22 = *(_DWORD *)(a2 + 12);
          char v23 = BYTE8(v45);
          if ((SWORD4(v45) & 0x8000u) == 0) {
            int32_t v24 = WORD4(v45) >> 5;
          }
          else {
            int32_t v24 = HIDWORD(v45);
          }
          else {
            int v25 = *(_DWORD *)(a2 + 12);
          }
          if ((BYTE8(v45) & 1) != 0) {
            goto LABEL_42;
          }
        }

        else
        {
          int v22 = v21 >> 5;
          char v23 = BYTE8(v45);
          if ((SWORD4(v45) & 0x8000u) == 0) {
            int32_t v24 = WORD4(v45) >> 5;
          }
          else {
            int32_t v24 = HIDWORD(v45);
          }
          else {
            int v25 = v11;
          }
          if ((BYTE8(v45) & 1) != 0)
          {
LABEL_42:
            v44[0] = -1;
            int v32 = sub_18091830C(a3, a2, (uint64_t)&v45, v11, v44);
LABEL_55:
            int v31 = v32;
            goto LABEL_56;
          }
        }

        if (v24 >= 1)
        {
          int32_t v30 = (v23 & 2) != 0 ? (__int128 *)((char *)&v45 + 10) : (__int128 *)*((void *)&v46 + 1);
          int v31 = icu::UnicodeString::indexOf(a2, (uint64_t)v30, 0, v24, v25, v22 - v25);
          if ((v31 & 0x80000000) == 0)
          {
LABEL_56:
            if ((v31 & 0x80000000) == 0)
            {
              unint64_t v26 = v41;
              if (v31 >= v41)
              {
                LODWORD(v26) = WORD4(v45) >> 5;
                if ((SWORD4(v45) & 0x8000u) == 0) {
                  unint64_t v26 = v26;
                }
                else {
                  unint64_t v26 = HIDWORD(v45);
                }
                int v34 = (unsigned __int16)v50 >> 5;
                if ((v50 & 0x8000u) != 0LL) {
                  int v34 = DWORD1(v50);
                }
                if ((int)v26 > v34)
                {
                  icu::UnicodeString::operator=(&v49, (UChar **)&v45);
                  int v35 = *(_DWORD *)v15 + *((unsigned __int16 *)v15 + 2);
                  icu::UnicodeString::tempSubString(v42, v35, *v19 - v35, (icu::UnicodeString *)v44);
                  icu::UnicodeString::operator=((icu::UnicodeString *)&v54, (icu::UnicodeString *)v44);
                  icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)v44);
                  int v41 = v31;
                }
              }
            }

            goto LABEL_65;
          }
        }

        goto LABEL_42;
      }

      if ((v21 & 0x8000) != 0)
      {
        unint64_t v26 = *(unsigned int *)(a2 + 12);
        char v27 = BYTE8(v45);
        if ((SWORD4(v45) & 0x8000u) == 0) {
          int32_t v28 = WORD4(v45) >> 5;
        }
        else {
          int32_t v28 = HIDWORD(v45);
        }
        else {
          int v29 = *(_DWORD *)(a2 + 12);
        }
        if ((BYTE8(v45) & 1) != 0) {
          goto LABEL_65;
        }
      }

      else
      {
        unint64_t v26 = v21 >> 5;
        char v27 = BYTE8(v45);
        if ((SWORD4(v45) & 0x8000u) == 0) {
          int32_t v28 = WORD4(v45) >> 5;
        }
        else {
          int32_t v28 = HIDWORD(v45);
        }
        else {
          int v29 = v11;
        }
        if ((BYTE8(v45) & 1) != 0) {
          goto LABEL_65;
        }
      }

      if (v28 >= 1)
      {
        if ((v27 & 2) != 0) {
          int v33 = (char *)&v45 + 10;
        }
        else {
          int v33 = (char *)*((void *)&v46 + 1);
        }
        int v32 = icu::UnicodeString::indexOf(a2, (uint64_t)v33, 0, v28, v29, (int)v26 - v29);
        goto LABEL_55;
      }

icu::UnicodeString *icu::PluralFormat::PluralSelectorAdapter::select@<X0>( icu::PluralRules **this@<X0>, const icu::IFixedDecimal *a2@<X1>, icu::UnicodeString *a3@<X8>)
{
  return icu::PluralRules::select(this[1], a2, a3);
}

void *icu::PluralRules::getStaticClassID(icu::PluralRules *this)
{
  return &unk_18C535701;
}

void *icu::PluralRules::getDynamicClassID(icu::PluralRules *this)
{
  return &unk_18C535701;
}

void *sub_180951F20()
{
  return &unk_18C535702;
}

uint64_t icu::PluralRules::PluralRules(uint64_t this, UErrorCode *a2)
{
  *(void *)(this + 8) = 0LL;
  *(void *)(this + 16) = 0LL;
  *(void *)this = off_189729828;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)(this + 8) = 0LL;
  *(void *)(this + 16) = 0LL;
  *(void *)this = off_189729828;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t icu::PluralRules::PluralRules(uint64_t this, unint64_t a2)
{
  *(void *)(this + 8) = 0LL;
  *(void *)(this + 16) = 0LL;
  *(void *)this = off_189729828;
  *(_DWORD *)(this + 24) = 0;
  return icu::PluralRules::operator=(this, a2);
}

{
  *(void *)(this + 8) = 0LL;
  *(void *)(this + 16) = 0LL;
  *(void *)this = off_189729828;
  *(_DWORD *)(this + 24) = 0;
  return icu::PluralRules::operator=(this, a2);
}

uint64_t icu::PluralRules::operator=(uint64_t a1, unint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
    *(void *)(a1 + 8) = 0LL;
    uint64_t v5 = *(void *)(a1 + 16);
    if (v5)
    {
      if (*(_BYTE *)(v5 + 12)) {
        uprv_free(*(void **)v5);
      }
      icu::UMemory::operator delete((void *)v5);
    }

    int v6 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 24) = v6;
    *(void *)(a1 + 16) = 0LL;
    if (v6 <= 0)
    {
      unsigned int v8 = *(uint64_t **)(a2 + 8);
      if (v8)
      {
        uint64_t v9 = icu::UMemory::operator new(v8, (icu::UMemory *)0xE0, a2);
        if (v9)
        {
          uint64_t v10 = sub_1809559FC((uint64_t)v9, *(void *)(a2 + 8));
          *(void *)(a1 + 8) = v10;
          int v11 = *(_DWORD *)(v10 + 220);
          if (v11 < 1) {
            goto LABEL_16;
          }
        }

        else
        {
          *(void *)(a1 + 8) = 0LL;
          int v11 = 7;
        }

        *(_DWORD *)(a1 + 24) = v11;
      }

void icu::PluralRules::~PluralRules(icu::PluralRules *this)
{
  *(void *)this = off_189729828;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *((void *)this + 2);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 12)) {
      uprv_free(*(void **)v3);
    }
    icu::UMemory::operator delete((void *)v3);
  }

  icu::UObject::~UObject(this);
}

{
  void *v1;
  icu::PluralRules::~PluralRules(this);
  icu::UMemory::operator delete(v1);
}

void icu::SharedPluralRules::~SharedPluralRules(icu::SharedPluralRules *this)
{
  *(void *)this = off_189729858;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::SharedObject::~SharedObject(this);
}

{
  uint64_t v2;
  *(void *)this = off_189729858;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::SharedObject::~SharedObject(this);
}

{
  uint64_t v2;
  void *v3;
  *(void *)this = off_189729858;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::SharedObject::~SharedObject(this);
  icu::UMemory::operator delete(v3);
}

_DWORD *icu::PluralRules::clone@<X0>(icu::PluralRules *this@<X0>, uint64_t *a2@<X8>)
{
  UErrorCode v3 = U_ZERO_ERROR;
  return icu::PluralRules::clone(this, &v3, a2);
}

_DWORD *icu::PluralRules::clone@<X0>(icu::PluralRules *this@<X0>, UErrorCode *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = icu::UMemory::operator new(a3, (icu::UMemory *)0x20, (unint64_t)a2);
  if (v5)
  {
    v5[1] = 0LL;
    v5[2] = 0LL;
    *uint64_t v5 = (uint64_t)off_189729828;
    *((_DWORD *)v5 + 6) = 0;
    double result = (_DWORD *)icu::PluralRules::operator=((uint64_t)v5, (unint64_t)this);
    if (*(int *)a2 <= 0)
    {
      UErrorCode v7 = result[6];
      if (v7 >= U_ILLEGAL_ARGUMENT_ERROR)
      {
        *a2 = v7;
        (*(void (**)(_DWORD *))(*(void *)result + 8LL))(result);
        return 0LL;
      }
    }
  }

  else
  {
    double result = 0LL;
    *a2 = U_MEMORY_ALLOCATION_ERROR;
  }

  return result;
}

icu::PluralAvailableLocalesEnumeration *icu::PluralRules::getAvailableLocales( UErrorCode *this, UErrorCode *a2)
{
  uint64_t v2 = (uint64_t *)*(unsigned int *)this;
  uint64_t v5 = (icu::PluralAvailableLocalesEnumeration *)icu::UMemory::operator new( v2,  (icu::UMemory *)0x88,  (unint64_t)a2);
  if (!v5)
  {
    if (*(int *)this <= 0)
    {
      double result = 0LL;
      *this = U_MEMORY_ALLOCATION_ERROR;
      return result;
    }

    return 0LL;
  }

  double result = icu::PluralAvailableLocalesEnumeration::PluralAvailableLocalesEnumeration(v5, this);
  if (*(int *)this >= 1)
  {
    (*(void (**)(icu::PluralAvailableLocalesEnumeration *))(*(void *)result + 8LL))(result);
    return 0LL;
  }

  return result;
}

uint64_t *icu::PluralRules::createRules(icu::PluralRules *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (*(int *)a2 <= 0)
  {
    v11[1] = 2LL;
    __int128 v14 = 0u;
    __int128 v13 = 0u;
    __int128 v12 = 0u;
    __int128 v10 = 0u;
    uint64_t v9 = off_1897298E0;
    v11[0] = off_18971B688;
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v18 = -1LL;
    int v6 = icu::UMemory::operator new((uint64_t *)2, (icu::UMemory *)0x20, (unint64_t)a2);
    if (v6)
    {
      UErrorCode v3 = v6;
      v6[1] = 0LL;
      v6[2] = 0LL;
      *int v6 = (uint64_t)off_189729828;
      *((_DWORD *)v6 + 6) = 0;
      if (*(int *)a2 <= 0)
      {
        sub_180952470((uint64_t)&v9, (uint64_t)this, (uint64_t)v6, (int *)a2);
        uint64_t v7 = *(unsigned int *)a2;
      }

      (*(void (**)(uint64_t *))(*v3 + 8))(v3);
    }

    else
    {
      uint64_t v7 = *(unsigned int *)a2;
      if ((int)v7 <= 0)
      {
        UErrorCode v3 = 0LL;
        uint64_t v7 = 7LL;
        *(_DWORD *)a2 = 7;
        goto LABEL_9;
      }
    }

    UErrorCode v3 = 0LL;
LABEL_9:
    uint64_t v9 = off_1897298E0;
    icu::UnicodeString::~UnicodeString((void *)v7, (icu::UnicodeString *)v11);
    return v3;
  }

  return 0LL;
}

void sub_180952470(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  if (*a4 > 0) {
    return;
  }
  *(void *)(a1 + 8) = a2;
  int v6 = (UChar **)(a1 + 24);
  uint64_t v7 = (uint64_t **)(a3 + 8);
  while (2)
  {
    uint64_t v8 = *(void *)(a1 + 8);
    else {
      int v9 = *(unsigned __int16 *)(v8 + 8) >> 5;
    }
    if (*(_DWORD *)(a1 + 16) >= v9) {
      return;
    }
    sub_180954608((int *)a1, a4);
    if (*a4 > 0) {
      return;
    }
    sub_180954944(a1, a4);
    uint64_t v11 = *a4;
    int v12 = *(_DWORD *)(a1 + 88);
    switch(v12)
    {
      case 1:
        uint64_t v13 = *(void *)(a1 + 96);
        if (*(_DWORD *)(v13 + 8) == 1 && *(_DWORD *)(v13 + 12) == -1)
        {
          *(_DWORD *)(*(void *)(a1 + 96) + 12LL) = sub_180954BCC((uint64_t)v6);
          goto LABEL_117;
        }

        uint64_t v14 = *(void *)(v13 + 24);
        if (!v14)
        {
          *(_DWORD *)(*(void *)(a1 + 96) + 16LL) = sub_180954BCC((uint64_t)v6);
          goto LABEL_117;
        }

        uint64_t v15 = *(unsigned int *)(a1 + 112);
        if ((v15 & 0x80000000) == 0)
        {
          int v16 = *(_DWORD *)(v14 + 8);
          BOOL v17 = v16 < 1 || v16 <= (int)v15;
          if (!v17 && *(_DWORD *)(*(void *)(v14 + 24) + 4 * v15) == -1)
          {
            int v63 = sub_180954BCC((uint64_t)v6);
            icu::UVector32::setElementAt(v14, v63, *(_DWORD *)(a1 + 112));
            uint64_t v64 = *(void *)(*(void *)(a1 + 96) + 24LL);
            int v65 = sub_180954BCC((uint64_t)v6);
            icu::UVector32::setElementAt(v64, v65, *(_DWORD *)(a1 + 116));
            goto LABEL_117;
          }
        }

        int v18 = sub_180954BCC((uint64_t)v6);
        icu::UVector32::setElementAt(v14, v18, *(_DWORD *)(a1 + 116));
        uint64_t v19 = *(void *)(*(void *)(a1 + 96) + 24LL);
        uint64_t v20 = *(unsigned int *)(a1 + 112);
        if ((v20 & 0x80000000) != 0)
        {
          int v21 = 0;
        }

        else
        {
          int v21 = 0;
          int v22 = *(_DWORD *)(v19 + 8);
        }

        uint64_t v60 = *(unsigned int *)(a1 + 116);
        if ((v60 & 0x80000000) != 0)
        {
          int v61 = 0;
        }

        else
        {
          int v61 = 0;
          int v62 = *(_DWORD *)(v19 + 8);
        }

        if (v21 > v61) {
          goto LABEL_121;
        }
        goto LABEL_117;
      case 2:
        uint64_t v23 = *(void *)(a1 + 96);
        if (v23)
        {
          uint64_t v24 = *(void *)(v23 + 24);
          if (v24)
          {
            int v25 = *(_DWORD *)(v24 + 8);
            *(_DWORD *)(a1 + 112) = v25;
            if (v25 >= -1 && *(_DWORD *)(v24 + 12) > v25) {
              goto LABEL_31;
            }
            if (icu::UVector32::expandCapacity((icu::UVector32 *)v24, v25 + 1, (UErrorCode *)a4))
            {
              int v25 = *(_DWORD *)(v24 + 8);
LABEL_31:
              *(_DWORD *)(*(void *)(v24 + 24) + 4LL * v25) = -1;
              ++*(_DWORD *)(v24 + 8);
            }

            uint64_t v26 = *(void *)(*(void *)(a1 + 96) + 24LL);
            int v27 = *(_DWORD *)(v26 + 8);
            *(_DWORD *)(a1 + 116) = v27;
            if (v27 < -1 || *(_DWORD *)(v26 + 12) <= v27)
            {
              int v27 = *(_DWORD *)(v26 + 8);
            }

            *(_DWORD *)(*(void *)(v26 + 24) + 4LL * v27) = -1;
            ++*(_DWORD *)(v26 + 8);
LABEL_117:
            LODWORD(v1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = *a4;
LABEL_118:
            *(_DWORD *)(a1 + 92) = *(_DWORD *)(a1 + 88);
            continue;
          }
        }

void *sub_180952BE0(void *a1)
{
  *a1 = off_1897298E0;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 3));
  return a1;
}

uint64_t *icu::PluralRules::createDefaultRules(icu::PluralRules *this, UErrorCode *a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  uint64_t v7 = L"other: n";
  icu::UnicodeString::UnicodeString(v8, 1LL, &v7);
  Rules = icu::PluralRules::createRules((icu::PluralRules *)v8, this, v3);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v8);
  return Rules;
}

uint64_t *icu::LocaleCacheKey<icu::SharedPluralRules>::createObject(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v11 = (uint64_t *)*MEMORY[0x1895F89C0];
  icu::Locale::Locale(v11, (icu::Locale *)v10, *(const char **)(a1 + 56), 0LL, 0LL, 0LL);
  uint64_t v4 = icu::PluralRules::internalForLocale((icu::Locale *)v10, 0LL, a3);
  if (!v4 && *a3 <= 0) {
    *a3 = 7;
  }
  icu::Locale::~Locale((icu::Locale *)v10);
  int v6 = (uint64_t *)*a3;
  if ((int)v6 <= 0)
  {
    uint64_t v9 = icu::UMemory::operator new(v6, (icu::UMemory *)0x20, v5);
    if (v9)
    {
      uint64_t v7 = v9;
      *uint64_t v9 = (uint64_t)off_189729858;
      v9[1] = 0LL;
      void v9[2] = 0LL;
      v9[3] = (uint64_t)v4;
      if (*a3 <= 0)
      {
        icu::SharedObject::addRef((uint64_t)v9);
        return v7;
      }

      (*(void (**)(uint64_t *))(*v9 + 8))(v9);
    }

    else if (*a3 <= 0)
    {
      *a3 = 7;
    }
  }

  if (v4) {
    (*(void (**)(uint64_t *))(*v4 + 8))(v4);
  }
  return 0LL;
}

uint64_t *icu::PluralRules::internalForLocale(icu::Locale *a1, unint64_t a2, int *a3)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  UErrorCode v3 = (uint64_t *)*a3;
  int v6 = a2;
  if ((int)a2 >= 2)
  {
    uint64_t v4 = 0LL;
    int v7 = 1;
LABEL_5:
    *a3 = v7;
    return v4;
  }

  unint64_t v10 = icu::UMemory::operator new(v3, (icu::UMemory *)0x20, a2);
  if (!v10)
  {
    if (*a3 <= 0)
    {
      uint64_t v4 = 0LL;
      int v7 = 7;
      goto LABEL_5;
    }

    return 0LL;
  }

  uint64_t v4 = v10;
  v10[1] = 0LL;
  void v10[2] = 0LL;
  uint64_t *v10 = (uint64_t)off_189729828;
  *((_DWORD *)v10 + 6) = 0;
  if (*a3 > 0)
  {
LABEL_9:
    (*(void (**)(uint64_t *))(*v4 + 8))(v4);
    return 0LL;
  }

  memset(v30, 0, sizeof(v30));
  icu::PluralRules::getRuleFromResource(a1, v6, a3, (uint64_t)v30);
  int v11 = WORD4(v30[0]) >> 5;
  if (SWORD4(v30[0]) < 0) {
    int v11 = HIDWORD(v30[0]);
  }
  if (!v11)
  {
    unint64_t v12 = *a3;
    if ((_DWORD)v12 == 7)
    {
      icu::UnicodeString::~UnicodeString((void *)v12, (icu::UnicodeString *)v30);
      goto LABEL_9;
    }

    icu::UnicodeString::UnicodeString((uint64_t)&v20, (uint64_t)L"other: n");
    icu::UnicodeString::operator=((icu::UnicodeString *)v30, (icu::UnicodeString *)&v20);
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v20);
    *a3 = 0;
  }

  v22[1] = 2LL;
  __int128 v23 = 0u;
  __int128 v25 = 0u;
  __int128 v24 = 0u;
  __int128 v21 = 0u;
  uint64_t v20 = off_1897298E0;
  v22[0] = off_18971B688;
  uint64_t v27 = 0LL;
  uint64_t v28 = 0LL;
  uint64_t v26 = 0LL;
  uint64_t v29 = -1LL;
  sub_180952470((uint64_t)&v20, (uint64_t)v30, (uint64_t)v4, a3);
  sub_18094FCEC((uint64_t)a1, (UErrorCode *)a3, (uint64_t)&v17);
  sub_18094FF68((uint64_t)&v17, a3, &v19);
  uint64_t v14 = v19;
  uint64_t v19 = 0LL;
  v4[2] = v14;
  sub_1807DDC3C(&v19);
  unint64_t v15 = v18;
  if (v18) {
    uprv_free(v17);
  }
  uint64_t v20 = off_1897298E0;
  icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)v22);
  icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v30);
  return v4;
}

uint64_t icu::PluralRules::createSharedInstance(uint64_t a1, int a2, UErrorCode *a3)
{
  if (a2)
  {
    uint64_t result = 0LL;
    *a3 = U_UNSUPPORTED_ERROR;
  }

  else
  {
    uint64_t v4 = 0LL;
    sub_180953058(a1, (UErrorCode *)&v4, a3);
    return v4;
  }

  return result;
}

void sub_180953058(uint64_t a1, UErrorCode *a2, UErrorCode *this)
{
  v11[28] = *MEMORY[0x1895F89C0];
  uint64_t Instance = icu::UnifiedCache::getInstance(this, a2);
  if (*(int *)this <= 0)
  {
    int v7 = (icu::SharedObject **)Instance;
    int v9 = 0;
    char v10 = 0;
    uint64_t v8 = off_189729B30;
    icu::Locale::Locale((icu::Locale *)v11, a1);
    sub_18089E200(v7, (const icu::CacheKeyBase *)&v8, 0LL, (icu::SharedObject **)a2, this);
    uint64_t v8 = off_189729B30;
    icu::Locale::~Locale((icu::Locale *)v11);
    icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)&v8);
  }

uint64_t *icu::PluralRules::forLocale(icu::PluralRules *this, const icu::Locale *a2, UErrorCode *a3)
{
  return icu::PluralRules::forLocale(this, 0LL, a2);
}

uint64_t *icu::PluralRules::forLocale(icu::Locale *a1, unint64_t a2, icu::UnifiedCache *this)
{
  if ((_DWORD)a2) {
    return icu::PluralRules::internalForLocale(a1, a2, (int *)this);
  }
  uint64_t v8 = 0LL;
  sub_180953058((uint64_t)a1, (UErrorCode *)&v8, (UErrorCode *)this);
  unint64_t v5 = 0LL;
  int v6 = (uint64_t *)*(unsigned int *)this;
  if ((int)v6 <= 0)
  {
    int v7 = (void *)v8;
    unint64_t v5 = icu::PluralRules::clone(*(icu::PluralRules **)(v8 + 24), (UErrorCode *)this, v6);
    icu::SharedObject::removeRef(v7);
  }

  return (uint64_t *)v5;
}

void *icu::PluralRules::getRuleFromResource@<X0>( icu::Locale *a1@<X1>, int a2@<W2>, int *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v60 = *MEMORY[0x1895F89C0];
  __int128 v56 = 0u;
  uint64_t v59 = 0LL;
  __int128 v58 = 0u;
  __int128 v57 = 0u;
  uint64_t v55 = off_18971B688;
  LOWORD(v56) = 2;
  if (*a3 >= 1)
  {
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)a4, (icu::UnicodeString *)&v55);
    return icu::UnicodeString::~UnicodeString((void *)v5, (icu::UnicodeString *)&v55);
  }

  uint64_t v9 = ures_openDirect(0LL, (uint64_t)"plurals", (uint64_t)a3);
  uint64_t v10 = v9;
  if (*a3 >= 1) {
    goto LABEL_4;
  }
  if (!a2)
  {
    unint64_t v12 = "locales";
LABEL_12:
    uint64_t v13 = ures_getByKey(v9, v12, 0LL, a3);
    if (*a3 >= 1) {
      goto LABEL_13;
    }
    int v34 = 0;
    Baseuint64_t Name = (const char *)icu::Locale::getBaseName(a1);
    StringByuint64_t Key = ures_getStringByKey(v13, BaseName, &v34, a3);
    if (StringByKey) {
      goto LABEL_29;
    }
    v31[0] = U_ZERO_ERROR;
    int v16 = (const char *)icu::Locale::getBaseName(a1);
    memset(&__s[1], 0, 56);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v32, v16);
    __s[0] = (char *)&__s[1] + 5;
    LODWORD(__s[1]) = 40;
    WORD2(__s[1]) = 0;
    LODWORD(__s[7]) = 0;
    icu::CharString::append((icu::CharString *)__s, v32, v33, v31);
    while (1)
    {
      uint64_t v54 = 0LL;
      __int128 v52 = 0u;
      __int128 v53 = 0u;
      __int128 v51 = 0u;
      unsigned int v50 = (void (**)(icu::UnicodeString *__hidden))((char *)&v51 + 5);
      LODWORD(v5icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 40;
      v36[0] = 0uLL;
      icu::CharStringByteSink::CharStringByteSink(v36, (uint64_t)&v50);
      ulocimp_getParent(__s[0], (uint64_t)v36, (int *)v31);
      int v17 = v54;
      if ((_DWORD)v54) {
        icu::CharString::operator=((uint64_t)__s, (uint64_t)&v50);
      }
      icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v36);
      if (BYTE4(v51)) {
        uprv_free(v50);
      }
      if (!v17)
      {
        StringByuint64_t Key = 0LL;
        goto LABEL_26;
      }

      int v34 = 0;
      unsigned __int8 v18 = ures_getStringByKey(v13, __s[0], &v34, (int *)v31);
      if (v18) {
        break;
      }
      v31[0] = U_ZERO_ERROR;
    }

    StringByuint64_t Key = v18;
    *a3 = 0;
LABEL_26:
    if (BYTE4(__s[1])) {
      uprv_free(__s[0]);
    }
    if (StringByKey)
    {
LABEL_29:
      __int128 v48 = 0u;
      __int128 v49 = 0u;
      __int128 v46 = 0u;
      __int128 v47 = 0u;
      __int128 v44 = 0u;
      __int128 v45 = 0u;
      __int128 v42 = 0u;
      __int128 v43 = 0u;
      __int128 v40 = 0u;
      __int128 v41 = 0u;
      __int128 v38 = 0u;
      __int128 v39 = 0u;
      memset(__s, 0, sizeof(__s));
      u_UCharsToChars(StringByKey, (char *)__s, v34 + 1);
      uint64_t v19 = ures_getByKey(v10, "rules", 0LL, a3);
      uint64_t v20 = v19;
      if (*a3 < 1)
      {
        uint64_t v21 = ures_getByKey(v19, (const char *)__s, 0LL, a3);
        uint64_t v22 = v21;
        if (*a3 < 1)
        {
          int Size = ures_getSize(v21);
          __int128 v24 = 0uLL;
          *(_OWORD *)(a4 + 8) = 0u;
          *(_OWORD *)(a4 + 24) = 0u;
          *(_OWORD *)(a4 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
          *(void *)(a4 + 56) = 0LL;
          *(void *)a4 = off_18971B688;
          uint64_t v5 = 2LL;
          *(_WORD *)(a4 + 8) = 2;
          *(void *)uint64_t v31 = 0LL;
          if (Size >= 1)
          {
            int v25 = Size;
            do
            {
              uint64_t v54 = 0LL;
              __int128 v52 = v24;
              __int128 v53 = v24;
              __int128 v51 = v24;
              unsigned int v50 = off_18971B688;
              LOWORD(v5icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 2;
              int v35 = 0;
              NextString = ures_getNextString(v22, &v35, v31, a3);
              if (*a3 <= 0)
              {
                *(void *)&v36[0] = NextString;
                icu::UnicodeString::setTo((icu::UnicodeString *)&v50, 1, (const UChar **)v36, v35);
              }

              else
              {
                icu::UnicodeString::setToBogus((icu::UnicodeString *)&v50);
              }

              memset(v36, 0, sizeof(v36));
              icu::UnicodeString::UnicodeString(v36, *(void *)v31, 0xFFFFFFFFLL, 0LL);
              if ((SWORD4(v36[0]) & 0x8000u) == 0) {
                uint64_t v27 = WORD4(v36[0]) >> 5;
              }
              else {
                uint64_t v27 = HIDWORD(v36[0]);
              }
              icu::UnicodeString::doAppend(a4, (const icu::UnicodeString *)v36, 0, v27);
              LOWORD(v35) = 58;
              icu::UnicodeString::doAppend(a4, (uint64_t)&v35, 0, 1LL);
              if ((v51 & 0x8000u) == 0LL) {
                uint64_t v28 = (unsigned __int16)v51 >> 5;
              }
              else {
                uint64_t v28 = DWORD1(v51);
              }
              icu::UnicodeString::doAppend(a4, (const icu::UnicodeString *)&v50, 0, v28);
              LOWORD(v35) = 59;
              icu::UnicodeString::doAppend(a4, (uint64_t)&v35, 0, 1LL);
              icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v36);
              icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)&v50);
              __int128 v24 = 0uLL;
              --v25;
            }

            while (v25);
          }
        }

        else
        {
          icu::UnicodeString::UnicodeString((icu::UnicodeString *)a4, (icu::UnicodeString *)&v55);
        }

        if (v22) {
          ures_close(v22);
        }
      }

      else
      {
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)a4, (icu::UnicodeString *)&v55);
      }

      if (v20) {
        ures_close(v20);
      }
    }

    else
    {
LABEL_13:
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)a4, (icu::UnicodeString *)&v55);
    }

    if (v13) {
      ures_close(v13);
    }
    goto LABEL_5;
  }

  if (a2 == 1)
  {
    unint64_t v12 = "locales_ordinals";
    goto LABEL_12;
  }

  *a3 = 1;
LABEL_4:
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)a4, (icu::UnicodeString *)&v55);
LABEL_5:
  if (v10) {
    ures_close(v10);
  }
  return icu::UnicodeString::~UnicodeString((void *)v5, (icu::UnicodeString *)&v55);
}

void icu::PluralRules::select(icu::PluralRules *this@<X0>, int a2@<W1>, icu::UnicodeString *a3@<X8>)
{
  uint64_t v5 = off_189729968;
  int v6 = &unk_1897299A8;
  icu::FixedDecimal::init((icu::FixedDecimal *)&v5, (double)a2);
  icu::PluralRules::select(this, (const icu::IFixedDecimal *)&v5, a3);
  icu::UObject::~UObject((icu::UObject *)&v6);
  icu::IFixedDecimal::~IFixedDecimal((icu::IFixedDecimal *)&v5);
}

icu::UnicodeString *icu::PluralRules::select@<X0>( icu::PluralRules *this@<X0>, const icu::IFixedDecimal *a2@<X1>, icu::UnicodeString *a3@<X8>)
{
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    return sub_180953950(v3, (uint64_t)a2, a3);
  }
  uint64_t v5 = L"other: n";
  return (icu::UnicodeString *)icu::UnicodeString::UnicodeString(a3, 1LL, &v5);
}

icu::FixedDecimal *icu::FixedDecimal::FixedDecimal(icu::FixedDecimal *this, double a2)
{
  *(void *)this = off_189729968;
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = &unk_1897299A8;
  icu::FixedDecimal::init(this, a2);
  return this;
}

{
  *(void *)this = off_189729968;
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = &unk_1897299A8;
  icu::FixedDecimal::init(this, a2);
  return this;
}

void icu::FixedDecimal::~FixedDecimal(icu::FixedDecimal *this)
{
}

{
  icu::UObject::~UObject((icu::FixedDecimal *)((char *)this + 8));
  icu::IFixedDecimal::~IFixedDecimal(this);
}

{
  void *v2;
  icu::UObject::~UObject((icu::FixedDecimal *)((char *)this + 8));
  icu::IFixedDecimal::~IFixedDecimal(this);
  icu::UMemory::operator delete(v2);
}

void icu::PluralRules::select(icu::PluralRules *this@<X0>, double a2@<D0>, icu::UnicodeString *a3@<X8>)
{
  uint64_t v5 = off_189729968;
  int v6 = &unk_1897299A8;
  icu::FixedDecimal::init((icu::FixedDecimal *)&v5, a2);
  icu::PluralRules::select(this, (const icu::IFixedDecimal *)&v5, a3);
  icu::UObject::~UObject((icu::UObject *)&v6);
  icu::IFixedDecimal::~IFixedDecimal((icu::IFixedDecimal *)&v5);
}

void icu::PluralRules::select( icu::PluralRules *this@<X0>, const icu::number::FormattedNumber *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v10 = 0LL;
  memset(v9, 0, sizeof(v9));
  icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v9);
  icu::number::FormattedNumber::getDecimalQuantity(a2, (icu::number::impl::DecimalQuantity *)v9, a3);
  if (*(int *)a3 < 1)
  {
    UErrorCode v8 = *((_DWORD *)this + 6);
    if (v8 < U_ILLEGAL_ARGUMENT_ERROR)
    {
      icu::PluralRules::select(this, (const icu::IFixedDecimal *)v9, (icu::UnicodeString *)a4);
      goto LABEL_6;
    }

    *a3 = v8;
    *(_OWORD *)(a4 + 8) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
    *(void *)(a4 + 56) = 0LL;
  }

  else
  {
    *(_OWORD *)(a4 + 8) = 0u;
    *(void *)(a4 + 56) = 0LL;
    *(_OWORD *)(a4 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
  }

  *(void *)a4 = off_18971B688;
  *(_WORD *)(a4 + 8) = 2;
  icu::UnicodeString::setToBogus((icu::UnicodeString *)a4);
LABEL_6:
  icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v9);
}

icu::UnicodeString *sub_180953950@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, icu::UnicodeString *a3@<X8>)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a2 + 24LL))(a2) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 32LL))(a2) & 1) != 0
    || !a1)
  {
LABEL_2:
    int v7 = "o";
    return (icu::UnicodeString *)icu::UnicodeString::UnicodeString(a3, 1LL, &v7);
  }

  else
  {
    while (!sub_180955994(*(void *)(a1 + 80), a2))
    {
      a1 = *(void *)(a1 + 72);
      if (!a1) {
        goto LABEL_2;
      }
    }

    return icu::UnicodeString::UnicodeString(a3, (UChar **)(a1 + 8));
  }

void icu::PluralRules::select( icu::PluralRules *this@<X0>, const icu::number::FormattedNumberRange *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t Data = icu::number::FormattedNumberRange::getData(a2, a3);
  icu::PluralRules::select(this, Data, (const icu::UnicodeString *)a3, a4);
}

void icu::PluralRules::select( icu::PluralRules *this@<X0>, uint64_t a2@<X1>, const icu::UnicodeString *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (*(int *)a3 >= 1)
  {
    *(_OWORD *)(a4 + 8) = 0u;
    *(void *)(a4 + 56) = 0LL;
    *(_OWORD *)(a4 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
LABEL_5:
    *(void *)a4 = off_18971B688;
    *(_WORD *)(a4 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a4);
    return;
  }

  int v7 = *((_DWORD *)this + 6);
  if (v7 >= 1)
  {
LABEL_4:
    *(_DWORD *)a3 = v7;
    *(_OWORD *)(a4 + 8) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
    *(void *)(a4 + 56) = 0LL;
    goto LABEL_5;
  }

  if (!*((void *)this + 2))
  {
    int v7 = 16;
    goto LABEL_4;
  }

  icu::PluralRules::select(this, (const icu::IFixedDecimal *)(a2 + 304), (icu::UnicodeString *)v17);
  int v10 = icu::StandardPlural::indexFromString((icu::StandardPlural *)v17, a3, v9);
  icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v17);
  icu::PluralRules::select(this, (const icu::IFixedDecimal *)(a2 + 376), (icu::UnicodeString *)v17);
  int v13 = icu::StandardPlural::indexFromString((icu::StandardPlural *)v17, a3, v12);
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v17);
  if (*(int *)a3 < 1)
  {
    int v15 = sub_1809500AC(*((unsigned int **)this + 2), v10, v13);
    Keyword = icu::StandardPlural::getKeyword(v15);
    icu::UnicodeString::UnicodeString(a4, Keyword, 0xFFFFFFFFLL, 0LL);
  }

  else
  {
    *(_OWORD *)(a4 + 8) = 0u;
    *(void *)(a4 + 56) = 0LL;
    *(_OWORD *)(a4 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(void *)a4 = off_18971B688;
    *(_WORD *)(a4 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a4);
  }

uint64_t icu::PluralRules::getKeywords(icu::PluralRules *this, UErrorCode *a2)
{
  uint64_t v5 = (uint64_t *)*((unsigned int *)this + 6);
  if ((int)v5 >= 1)
  {
    uint64_t result = 0LL;
LABEL_5:
    *a2 = (int)v5;
    return result;
  }

  int v6 = icu::UMemory::operator new(v5, (icu::UMemory *)0xA0, (unint64_t)a2);
  if (!v6)
  {
    if (*(int *)a2 <= 0)
    {
      uint64_t result = 0LL;
      LODWORD(v5) = 7;
      goto LABEL_5;
    }

    return 0LL;
  }

  uint64_t result = sub_180956170((uint64_t)v6, *((void *)this + 1), a2);
  if (*(int *)a2 >= 1)
  {
    (*(void (**)(uint64_t))(*(void *)result + 8LL))(result);
    return 0LL;
  }

  return result;
}

double icu::PluralRules::getUniqueKeywordValue(icu::PluralRules *this, const icu::UnicodeString *a2)
{
  return -0.00123456777;
}

uint64_t icu::PluralRules::getAllKeywordValues( icu::PluralRules *this, const icu::UnicodeString *a2, double *a3, int a4, UErrorCode *a5)
{
  *a5 = U_UNSUPPORTED_ERROR;
  return 0LL;
}

uint64_t *icu::PluralRules::getSamples( icu::PluralRules *this, const icu::UnicodeString *a2, double *a3, int a4, UErrorCode *a5)
{
  int v7 = (uint64_t *)*((unsigned int *)this + 6);
  if ((int)v7 >= 1)
  {
    uint64_t result = 0LL;
LABEL_12:
    *a5 = (int)v7;
    return result;
  }

  if (a3)
  {
    if ((a4 & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_11:
    uint64_t result = 0LL;
    LODWORD(v7) = 1;
    goto LABEL_12;
  }

  if (a4) {
    goto LABEL_11;
  }
LABEL_7:
  uint64_t result = icu::PluralRules::rulesForKeyword(v7, this, a2);
  if (result)
  {
    int v10 = result;
    uint64_t result = (uint64_t *)sub_180953E18((uint64_t)(result + 19), (uint64_t)a3, 0LL, a4, a5);
    if (!(_DWORD)result) {
      return (uint64_t *)sub_180953E18((uint64_t)(v10 + 11), (uint64_t)a3, 0LL, a4, a5);
    }
  }

  return result;
}

uint64_t icu::PluralRules::rulesForKeyword(icu::PluralRules *this, const icu::UnicodeString *a2)
{
  for (uint64_t i = *((void *)this + 1); i; uint64_t i = *(void *)(i + 72))
  {
    unsigned int v4 = *(unsigned __int16 *)(i + 16);
    if ((v4 & 1) != 0)
    {
      if ((*((_WORD *)a2 + 4) & 1) != 0) {
        return i;
      }
    }

    else
    {
      if ((v4 & 0x8000) != 0) {
        int v5 = *(_DWORD *)(i + 20);
      }
      else {
        int v5 = v4 >> 5;
      }
      unsigned int v6 = *((unsigned __int16 *)a2 + 4);
      if ((v6 & 0x8000u) == 0) {
        unsigned int v7 = v6 >> 5;
      }
      else {
        unsigned int v7 = *((_DWORD *)a2 + 3);
      }
      if ((v6 & 1) == 0 && v5 == v7 && icu::UnicodeString::doEquals((icu::UnicodeString *)(i + 8), a2, v5)) {
        return i;
      }
    }
  }

  return i;
}

uint64_t sub_180953E18(uint64_t a1, uint64_t a2, uint64_t a3, int a4, UErrorCode *a5)
{
  uint64_t v62 = *MEMORY[0x1895F89C0];
  if (a2 | a3)
  {
    int v6 = a4;
    uint64_t v7 = a3;
    if (!a2 || !a3)
    {
      uint64_t v9 = 0LL;
      int v11 = 0;
      while (1)
      {
        unsigned int v12 = *(unsigned __int16 *)(a1 + 8);
        int v13 = (__int16)v12;
        unsigned int v14 = v12 >> 5;
        int v15 = v13 >= 0 ? v14 : *(_DWORD *)(a1 + 12);
        if (v11 >= v15) {
          return v9;
        }
        if (v11 < 0) {
          break;
        }
        if (v13 < 0)
        {
          if (*(_DWORD *)(a1 + 12) >= v11) {
            int v17 = v11;
          }
          else {
            int v17 = *(_DWORD *)(a1 + 12);
          }
LABEL_22:
          int v16 = v17;
          unsigned int v14 = *(_DWORD *)(a1 + 12);
          goto LABEL_23;
        }

        if (v14 >= v11) {
          int v16 = v11;
        }
        else {
          int v16 = v14;
        }
LABEL_23:
        int v18 = icu::UnicodeString::doIndexOf(a1, 0x2Cu, v16, v14 - v16);
        if (v18 == -1)
        {
          else {
            int v18 = *(unsigned __int16 *)(a1 + 8) >> 5;
          }
        }

        icu::UnicodeString::tempSubString((icu::UnicodeString *)a1, v11, v18 - v11, (icu::UnicodeString *)&v59);
        if ((v60 & 0x8000u) == 0) {
          int32_t v19 = v60 >> 5;
        }
        else {
          int32_t v19 = v61;
        }
        int32_t v20 = icu::UnicodeString::doIndexOf((uint64_t)&v59, 0x7Eu, 0, v19);
        if (v20 < 0)
        {
          *(void *)&__int128 v54 = 0LL;
          __int128 v52 = 0u;
          __int128 v53 = 0u;
          __int128 v50 = 0u;
          __int128 v51 = 0u;
          int v25 = icu::UnicodeString::UnicodeString((icu::UnicodeString *)v58, &v59);
          icu::number::impl::DecimalQuantity::fromExponentString((uint64_t)v25, a5, (uint64_t)&v50);
          icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v58);
          if (a2)
          {
            double v27 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)&v50);
            if (v27 != floor(v27)
              || (int)icu::number::impl::DecimalQuantity::fractionCount((icu::number::impl::DecimalQuantity *)&v50) <= 0)
            {
              *(double *)(a2 + 8LL * (int)v9) = v27;
              uint64_t v9 = (v9 + 1);
              int v6 = a4;
            }
          }

          else
          {
            icu::number::impl::DecimalQuantity::operator=( (icu::number::impl::DecimalQuantity *)(v7 + 72LL * (int)v9),  (uint64_t)&v50);
            uint64_t v9 = (v9 + 1);
          }

          icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)&v50);
LABEL_44:
          int v29 = 0;
          int v11 = v18 + 1;
          goto LABEL_45;
        }

        int32_t v21 = v20;
        uint64_t v49 = 0LL;
        memset(v48, 0, sizeof(v48));
        icu::UnicodeString::tempSubString((icu::UnicodeString *)&v59, 0, v20, (icu::UnicodeString *)v57);
        icu::number::impl::DecimalQuantity::fromExponentString((uint64_t)v57, a5, (uint64_t)v48);
        icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)v57);
        uint64_t v47 = 0LL;
        memset(v46, 0, sizeof(v46));
        icu::UnicodeString::tempSubString( (icu::UnicodeString *)&v59,  v21 + 1,  2147483646 - v21,  (icu::UnicodeString *)v56);
        icu::number::impl::DecimalQuantity::fromExponentString((uint64_t)v56, a5, (uint64_t)v46);
        icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)v56);
        if (*(int *)a5 > 0)
        {
          int v24 = 0;
LABEL_39:
          int v29 = 2;
          goto LABEL_40;
        }

        double v28 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v46);
        if (v28 < icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v48))
        {
          int v24 = 0;
          *a5 = U_INVALID_FORMAT_ERROR;
          goto LABEL_39;
        }

        uint64_t v45 = 0LL;
        memset(v44, 0, sizeof(v44));
        icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v44);
        icu::number::impl::DecimalQuantity::setToInt((void **)v44, 1);
        LowerDisplayint Magnitude = icu::number::impl::DecimalQuantity::getLowerDisplayMagnitude((icu::number::impl::DecimalQuantity *)v48);
        int Exponent = icu::number::impl::DecimalQuantity::getExponent((icu::number::impl::DecimalQuantity *)v48);
        icu::number::impl::DecimalQuantity::adjustMagnitude( (icu::number::impl::DecimalQuantity *)v44,  Exponent + LowerDisplayMagnitude);
        double v33 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v44);
        uint64_t v43 = 0LL;
        memset(v42, 0, sizeof(v42));
        icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v42, (uint64_t)v48);
        double v34 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v42);
        double v35 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v46);
        if (v34 <= v35)
        {
          double v36 = v35;
          while (a2)
          {
            if (v34 != floor(v34)
              || (int)icu::number::impl::DecimalQuantity::fractionCount((icu::number::impl::DecimalQuantity *)v42) <= 0)
            {
              *(double *)(a2 + 8LL * (int)v9) = v34;
              uint64_t v9 = (v9 + 1);
LABEL_54:
              int v6 = a4;
            }

            if ((int)v9 < v6)
            {
              __int128 v54 = 0u;
              __int128 v55 = 0u;
              __int128 v52 = 0u;
              __int128 v53 = 0u;
              __int128 v50 = 0u;
              __int128 v51 = 0u;
              icu::number::impl::DecNum::DecNum((icu::number::impl::DecNum *)&v50);
              icu::number::impl::DecNum::setTo((icu::number::impl::DecNum *)&v50, v33 + v34, a5);
              uint64_t v41 = 0LL;
              memset(v40, 0, sizeof(v40));
              icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v40);
              icu::number::impl::DecimalQuantity::setToDecNum((void **)v40, (const icu::number::impl::DecNum *)&v50, a5);
              icu::number::impl::DecimalQuantity::setMinFraction((uint64_t)v40, -LowerDisplayMagnitude);
              icu::number::impl::DecimalQuantity::roundToMagnitude((uint64_t)v40, LowerDisplayMagnitude, 4u, (int *)a5);
              icu::number::impl::DecimalQuantity::adjustMagnitude((icu::number::impl::DecimalQuantity *)v40, -Exponent);
              icu::number::impl::DecimalQuantity::adjustExponent((uint64_t)v40, Exponent);
              double v34 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v40);
              icu::number::impl::DecimalQuantity::operator=((icu::number::impl::DecimalQuantity *)v42, (uint64_t)v40);
              icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v40);
              if (BYTE12(v50)) {
                uprv_free((void *)v50);
              }
              if (v34 <= v36) {
                continue;
              }
            }

            goto LABEL_59;
          }

          icu::number::impl::DecimalQuantity::operator=( (icu::number::impl::DecimalQuantity *)(a3 + 72LL * (int)v9),  (uint64_t)v42);
          uint64_t v9 = (v9 + 1);
          goto LABEL_54;
        }

uint64_t icu::PluralRules::getSamples( icu::PluralRules *this, const icu::UnicodeString *a2, icu::number::impl::DecimalQuantity *a3, int a4, UErrorCode *a5)
{
  UErrorCode v7 = *((_DWORD *)this + 6);
  if (v7 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    uint64_t result = 0LL;
LABEL_12:
    *a5 = v7;
    return result;
  }

  if (a3)
  {
    if ((a4 & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_11:
    uint64_t result = 0LL;
    UErrorCode v7 = U_ILLEGAL_ARGUMENT_ERROR;
    goto LABEL_12;
  }

  if (a4) {
    goto LABEL_11;
  }
LABEL_7:
  uint64_t result = icu::PluralRules::rulesForKeyword(this, a2);
  if (result)
  {
    uint64_t v10 = result;
    uint64_t result = sub_180953E18(result + 152, 0LL, (uint64_t)a3, a4, a5);
    if (!(_DWORD)result) {
      return sub_180953E18(v10 + 88, 0LL, (uint64_t)a3, a4, a5);
    }
  }

  return result;
}

BOOL icu::PluralRules::isKeyword(icu::PluralRules *this, const icu::UnicodeString *a2)
{
  unsigned int v4 = *((unsigned __int16 *)a2 + 4);
  int v5 = (__int16)v4;
  int32_t v6 = v4 >> 5;
  if (v5 >= 0) {
    int32_t v7 = v6;
  }
  else {
    int32_t v7 = *((_DWORD *)a2 + 3);
  }
  uint64_t v9 = "o";
}

uint64_t icu::PluralRules::getKeywordOther@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = "o";
  return icu::UnicodeString::UnicodeString(a1, 1LL, &v3);
}

uint64_t icu::PluralRules::operator==(icu::PluralRules *a1, icu::PluralRules *a2)
{
  UErrorCode v11 = U_ZERO_ERROR;
  if (a1 == a2) {
    return 1LL;
  }
  uint64_t Keywords = icu::PluralRules::getKeywords(a1, &v11);
  uint64_t v5 = icu::PluralRules::getKeywords(a2, &v11);
  if (v11 <= U_ZERO_ERROR)
  {
    int v7 = (*(uint64_t (**)(uint64_t, UErrorCode *))(*(void *)Keywords + 32LL))(Keywords, &v11);
    if (v7 == (*(unsigned int (**)(uint64_t, UErrorCode *))(*(void *)v5 + 32LL))(v5, &v11))
    {
      (*(void (**)(uint64_t, UErrorCode *))(*(void *)Keywords + 64LL))(Keywords, &v11);
      while (1)
      {
        UErrorCode v8 = (const icu::UnicodeString *)(*(uint64_t (**)(uint64_t, UErrorCode *))(*(void *)Keywords + 56LL))( Keywords,  &v11);
        if (!v8) {
          break;
        }
        if (!icu::PluralRules::isKeyword(a2, v8)) {
          goto LABEL_3;
        }
      }

      (*(void (**)(uint64_t, UErrorCode *))(*(void *)v5 + 64LL))(v5, &v11);
      while (1)
      {
        uint64_t v9 = (const icu::UnicodeString *)(*(uint64_t (**)(uint64_t, UErrorCode *))(*(void *)v5 + 56LL))( v5,  &v11);
        if (!v9) {
          break;
        }
        if (!icu::PluralRules::isKeyword(a1, v9)) {
          goto LABEL_15;
        }
      }

      BOOL v6 = v11 < U_ILLEGAL_ARGUMENT_ERROR;
    }

    else
    {
LABEL_15:
      BOOL v6 = 0LL;
    }
  }

  else
  {
LABEL_3:
    BOOL v6 = 0LL;
    if (!v5)
    {
      if (!Keywords) {
        return v6;
      }
      goto LABEL_17;
    }
  }

  (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  if (Keywords) {
LABEL_17:
  }
    (*(void (**)(uint64_t))(*(void *)Keywords + 8LL))(Keywords);
  return v6;
}

int *sub_180954608(int *result, int *a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  if (*a2 <= 0)
  {
    uint64_t v3 = result;
    uint64_t v4 = *((void *)result + 1);
    uint64_t v5 = v4 + 10;
    for (uint64_t i = result[4]; ; v3[4] = i)
    {
      unsigned int v7 = *(unsigned __int16 *)(v4 + 8);
      if (*(__int16 *)(v4 + 8) < 0)
      {
        int v8 = *(_DWORD *)(v4 + 12);
      }

      else
      {
        int v8 = v7 >> 5;
      }

      if (v8 <= i)
      {
        int v10 = 0xFFFF;
      }

      else
      {
        uint64_t v9 = v4 + 10;
        if ((v7 & 2) == 0) {
          uint64_t v9 = *(void *)(v4 + 24);
        }
        int v10 = *(unsigned __int16 *)(v9 + 2 * i);
      }

      uint64_t result = (int *)sub_18095607C(v10);
      v3[22] = (_DWORD)result;
      if ((_DWORD)result != 4) {
        break;
      }
      ++i;
    }

    unsigned int v7 = *(unsigned __int16 *)(v4 + 8);
    if ((*(__int16 *)(v4 + 8) & 0x80000000) == 0)
    {
LABEL_15:
      int v11 = 0;
      int v12 = v7 >> 5;
      goto LABEL_17;
    }

uint64_t sub_180954944(uint64_t result, int *a2)
{
  if (*a2 <= 0)
  {
    uint64_t v3 = result;
    int v4 = *(_DWORD *)(result + 92);
    if (v4) {
      BOOL v5 = v4 == 3;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      uint64_t result = sub_180955C64(result + 24, *(unsigned int *)(result + 88));
      *(_DWORD *)(v3 + 88) = result;
      int v4 = *(_DWORD *)(v3 + 92);
    }

    switch(v4)
    {
      case 0:
      case 3:
        int v9 = *(_DWORD *)(v3 + 88);
        if (v9 != 10 && v9 != 30) {
          goto LABEL_39;
        }
        return result;
      case 1:
        unsigned int v11 = *(_DWORD *)(v3 + 88);
        if (v11 > 0x1E) {
          goto LABEL_39;
        }
        int v7 = 1 << v11;
        int v8 = 1075566924;
        break;
      case 2:
      case 8:
      case 13:
      case 15:
      case 16:
      case 17:
      case 19:
        if (*(_DWORD *)(v3 + 88) != 1) {
          goto LABEL_39;
        }
        return result;
      case 5:
        int v12 = *(_DWORD *)(v3 + 88);
        return result;
      case 6:
        if ((*(_DWORD *)(v3 + 88) & 0xFFFFFFFE) != 0x1C) {
          goto LABEL_39;
        }
        return result;
      case 10:
        if (*(_DWORD *)(v3 + 88) != 5) {
          goto LABEL_39;
        }
        return result;
      case 11:
      case 12:
        return result;
      case 14:
        unsigned int v14 = *(_DWORD *)(v3 + 88);
        if (v14 > 0x13) {
          goto LABEL_39;
        }
        int v7 = 1 << v14;
        int v8 = 557058;
        break;
      case 20:
        int v15 = *(_DWORD *)(v3 + 88);
        if (v15 != 1 && v15 != 14) {
          goto LABEL_39;
        }
        return result;
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
        unsigned int v6 = *(_DWORD *)(v3 + 88);
        if (v6 > 0x14) {
          goto LABEL_39;
        }
        int v7 = 1 << v6;
        int v8 = 1826816;
        break;
      default:
        goto LABEL_39;
    }

    if ((v7 & v8) == 0) {
LABEL_39:
    }
      *a2 = 65792;
  }

  return result;
}

double sub_180954AB4(uint64_t a1, int *a2)
{
  int v3 = *(_DWORD *)(a1 + 48);
  if (v3 >= 1) {
    goto LABEL_2;
  }
  uint64_t v5 = icu::UMemory::operator new((icu::UMemory *)0x38, (unint64_t)a2);
  if (!v5)
  {
    *(void *)(a1 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
    int v3 = 7;
LABEL_2:
    *a2 = v3;
    return result;
  }

  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(void *)(v5 + 48) = 0LL;
  *(void *)uint64_t v5 = off_189729880;
  double result = NAN;
  *(void *)(v5 + 8) = 0xFFFFFFFF00000000LL;
  *(_DWORD *)(v5 + 16) = -1;
  *(_BYTE *)(v5 + 32) = 0;
  *(void *)(v5 + 36) = 0LL;
  *(void *)(v5 + 44) = 0LL;
  *(void *)(a1 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v5;
  return result;
}

double sub_180954B3C(uint64_t a1, int *a2)
{
  int v3 = *(_DWORD *)(a1 + 24);
  if (v3 > 0) {
    goto LABEL_2;
  }
  do
  {
    uint64_t v4 = a1;
    a1 = *(void *)(a1 + 16);
  }

  while (a1);
  uint64_t v5 = icu::UMemory::operator new((icu::UMemory *)0x38, (unint64_t)a2);
  if (!v5)
  {
    *(void *)(v4 + 8) = 0LL;
    int v3 = 7;
LABEL_2:
    *a2 = v3;
    return result;
  }

  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(void *)(v5 + 48) = 0LL;
  *(void *)uint64_t v5 = off_189729880;
  double result = NAN;
  *(void *)(v5 + 8) = 0xFFFFFFFF00000000LL;
  *(_DWORD *)(v5 + 16) = -1;
  *(_BYTE *)(v5 + 32) = 0;
  *(void *)(v5 + 36) = 0LL;
  *(void *)(v5 + 44) = 0LL;
  *(void *)(v4 + 8) = v5;
  return result;
}

uint64_t sub_180954BCC(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  memset(v6, 0, sizeof(v6));
  unsigned int v1 = *(unsigned __int16 *)(a1 + 8);
  int v2 = (__int16)v1;
  unsigned int v3 = v1 >> 5;
  if (v2 >= 0) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = *(unsigned int *)(a1 + 12);
  }
  *((_BYTE *)v6 + (int)icu::UnicodeString::extract(a1, 0, v4, (char *)v6, 12icu::UObject::~UObject((icu::FixedDecimal *)((char *)this + 8)) = 0;
  return atoi((const char *)v6);
}

void *icu::PluralRules::getRules@<X0>(icu::PluralRules *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 8) = 0u;
  *(void *)(a2 + 56) = 0LL;
  *(_OWORD *)(a2 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)a2 = off_18971B688;
  *(_WORD *)(a2 + 8) = 2;
  double result = (void *)*((void *)this + 1);
  if (result) {
    return sub_180954CA8(result, a2);
  }
  return result;
}

void *sub_180954CA8(void *result, uint64_t a2)
{
  uint64_t v79 = *MEMORY[0x1895F89C0];
  memset(v78, 0, sizeof(v78));
  __int128 v58 = result;
  if (result[10])
  {
    unsigned int v3 = *((unsigned __int16 *)result + 8);
    int v4 = (__int16)v3;
    unsigned int v5 = v3 >> 5;
    uint64_t v6 = v4 >= 0 ? v5 : *((unsigned int *)result + 5);
    icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)(result + 1), 0, v6);
    __int16 v75 = 58;
    icu::UnicodeString::doAppend(a2, (uint64_t)&v75, 0, 1LL);
    __int16 v75 = 32;
    double result = (void *)icu::UnicodeString::doAppend(a2, (uint64_t)&v75, 0, 1LL);
    uint64_t v7 = v58[10];
    if (v7)
    {
      while (1)
      {
        uint64_t v59 = v7;
        uint64_t v8 = *(void *)(v7 + 8);
        if (v8) {
          break;
        }
LABEL_92:
        uint64_t v7 = *(void *)(v59 + 16);
        if (!v7) {
          goto LABEL_97;
        }
        uint64_t v62 = " ";
        icu::UnicodeString::UnicodeString(&v75, 1LL, &v62);
        if ((v76 & 0x8000u) == 0) {
          uint64_t v54 = v76 >> 5;
        }
        else {
          uint64_t v54 = v77;
        }
        icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v54);
        double result = icu::UnicodeString::~UnicodeString(v55, (icu::UnicodeString *)&v75);
        v60[1] = v62;
      }

      while (*(_DWORD *)(v8 + 8) || *(void *)(v8 + 24))
      {
        sub_180955B74(*(_DWORD *)(v8 + 36), (uint64_t)&v75);
        if ((v76 & 0x8000u) == 0) {
          uint64_t v9 = v76 >> 5;
        }
        else {
          uint64_t v9 = v77;
        }
        icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v9);
        icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v75);
        __int16 v75 = 32;
        icu::UnicodeString::doAppend(a2, (uint64_t)&v75, 0, 1LL);
        if (*(_DWORD *)(v8 + 8) == 1)
        {
          unsigned __int8 v72 = L"mod ";
          icu::UnicodeString::UnicodeString(&v75, 1LL, &v72);
          if ((v76 & 0x8000u) == 0) {
            uint64_t v11 = v76 >> 5;
          }
          else {
            uint64_t v11 = v77;
          }
          icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v11);
          icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v75);
          v60[13] = v72;
          uprv_itou((__int16 *)v78, 16, *(_DWORD *)(v8 + 12), 0xAu, 0LL);
          icu::UnicodeString::UnicodeString((uint64_t)&v75, (uint64_t)v78);
          if ((v76 & 0x8000u) == 0) {
            uint64_t v13 = v76 >> 5;
          }
          else {
            uint64_t v13 = v77;
          }
          icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v13);
          icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v75);
        }

        if (!*(void *)(v8 + 24))
        {
          if (*(_BYTE *)(v8 + 32))
          {
            int v71 = " ";
            icu::UnicodeString::UnicodeString(&v75, 1LL, &v71);
            if ((v76 & 0x8000u) == 0) {
              uint64_t v17 = v76 >> 5;
            }
            else {
              uint64_t v17 = v77;
            }
            icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v17);
            icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v75);
            v60[6] = v71;
          }

          else
          {
            uint64_t v70 = L" is ";
            icu::UnicodeString::UnicodeString(&v75, 1LL, &v70);
            if ((v76 & 0x8000u) == 0) {
              uint64_t v31 = v76 >> 5;
            }
            else {
              uint64_t v31 = v77;
            }
            icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v31);
            icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)&v75);
            v60[5] = v70;
          }

uint64_t sub_180955580(uint64_t a1, unint64_t a2)
{
  *(void *)a1 = off_189729880;
  *(void *)(a1 + 8) = 0xFFFFFFFF00000000LL;
  *(_DWORD *)(a1 + 16) = -1;
  *(void *)(a1 + 24) = 0LL;
  *(_WORD *)(a1 + 32) = 0;
  *(void *)(a1 + 44) = 0LL;
  *(void *)(a1 + 36) = 0LL;
  int v3 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 48) = v3;
  int v4 = (UErrorCode *)(a1 + 48);
  if (v3 > 0) {
    return a1;
  }
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v7 = *(uint64_t **)(a2 + 24);
  if (!v7) {
    goto LABEL_10;
  }
  uint64_t v8 = (icu::UVector32 *)icu::UMemory::operator new(v7, (icu::UMemory *)0x20, a2);
  if (v8)
  {
    uint64_t v9 = icu::UVector32::UVector32(v8, v4);
    if (*(int *)v4 > 0)
    {
      (*(void (**)(icu::UVector32 *))(*(void *)v9 + 8LL))(v9);
      return a1;
    }

    *(void *)(a1 + 24) = v9;
    icu::UVector32::assign(v9, *(const icu::UVector32 **)(a2 + 24), v4);
LABEL_10:
    *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
    int v10 = *(uint64_t **)(a2 + 40);
    if (v10)
    {
      uint64_t v11 = icu::UMemory::operator new(v10, (icu::UMemory *)0x38, a2);
      if (v11)
      {
        *(void *)(a1 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = sub_180955580(v11, *(void *)(a2 + 40));
      }

      else
      {
        *(void *)(a1 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
        *(_DWORD *)(a1 + 48) = 7;
      }
    }

    return a1;
  }

  return a1;
}

void *sub_1809556A0(void *a1)
{
  *a1 = off_189729880;
  uint64_t v2 = a1[3];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  a1[3] = 0LL;
  uint64_t v3 = a1[5];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  a1[5] = 0LL;
  return a1;
}

void sub_180955700(void *a1)
{
  unsigned int v1 = sub_1809556A0(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_180955714(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 36);
  if (!v3) {
    return 1LL;
  }
  uint64_t v5 = sub_180955838(v3);
  double v6 = (*(double (**)(uint64_t, uint64_t))(*(void *)a2 + 16LL))(a2, v5);
  double v7 = v6;
  if (!*(_BYTE *)(a1 + 33) || v6 == uprv_floor(v6))
  {
    if (*(_DWORD *)(a1 + 8) == 1) {
      double v7 = fmod(v7, (double)*(int *)(a1 + 12));
    }
    uint64_t v8 = *(void *)(a1 + 24);
    if (!v8)
    {
      int v14 = *(_DWORD *)(a1 + 16);
      BOOL v12 = v7 == (double)v14 || v14 == -1;
      return v12 ^ (*(_BYTE *)(a1 + 32) != 0);
    }

    uint64_t v9 = *(unsigned int *)(v8 + 8);
    if ((int)v9 >= 1)
    {
      uint64_t v10 = 0LL;
      while (1)
      {
        if (v7 >= (double)*(int *)(*(void *)(v8 + 24) + 4 * v10))
        {
          int v11 = v10 + 1 >= v9 ? 0 : *(_DWORD *)(*(void *)(v8 + 24) + 4 * v10 + 4);
        }

        v10 += 2LL;
      }

      BOOL v12 = 1;
      return v12 ^ (*(_BYTE *)(a1 + 32) != 0);
    }
  }

uint64_t sub_180955838(int a1)
{
  return dword_180A3B88C[a1 - 21];
}

uint64_t sub_180955864(uint64_t a1, unint64_t a2)
{
  *(void *)a1 = off_1897298A0;
  *(void *)(a1 + 8) = 0LL;
  int v3 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  int v4 = (uint64_t *)(a1 + 16);
  *(_DWORD *)(a1 + 24) = 0;
  int v5 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 24) = v5;
  if (v5 <= 0)
  {
    double v7 = *(uint64_t **)(a2 + 8);
    if (v7)
    {
      uint64_t v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0x38, a2);
      if (!v8) {
        goto LABEL_10;
      }
      uint64_t *v3 = sub_180955580((uint64_t)v8, *(void *)(a2 + 8));
    }

    uint64_t v9 = *(uint64_t **)(a2 + 16);
    if (v9)
    {
      uint64_t v10 = icu::UMemory::operator new(v9, (icu::UMemory *)0x20, a2);
      if (v10)
      {
        uint64_t v11 = sub_180955864(v10, *(void *)(a2 + 16));
        *int v4 = v11;
        int v12 = *(_DWORD *)(v11 + 24);
        if (v12 < 1) {
          return a1;
        }
        goto LABEL_11;
      }

      int v3 = v4;
LABEL_10:
      uint64_t *v3 = 0LL;
      int v12 = 7;
LABEL_11:
      *(_DWORD *)(a1 + 24) = v12;
    }
  }

  return a1;
}

void *sub_180955920(void *a1)
{
  *a1 = off_1897298A0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  a1[1] = 0LL;
  uint64_t v3 = a1[2];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  a1[2] = 0LL;
  return a1;
}

void sub_180955980(void *a1)
{
  unsigned int v1 = sub_180955920(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_180955994(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    while (1)
    {
      uint64_t v4 = *(void *)(v3 + 8);
      if (!v4) {
        break;
      }
      do
      {
        double result = sub_180955714(v4, a2);
        uint64_t v4 = *(void *)(v4 + 40);
        if (v4) {
          BOOL v5 = (_DWORD)result == 0;
        }
        else {
          BOOL v5 = 1;
        }
      }

      while (!v5);
      uint64_t v3 = *(void *)(v3 + 16);
      if (v3) {
        BOOL v6 = (_DWORD)result == 0;
      }
      else {
        BOOL v6 = 0;
      }
      if (!v6) {
        return result;
      }
    }

    return 1LL;
  }

  return result;
}

uint64_t sub_1809559FC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1897298C0;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 8), (UChar **)(a2 + 8));
  *(void *)(a1 + 72) = 0LL;
  uint64_t v4 = (uint64_t *)(a1 + 72);
  *(void *)(a1 + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 88), (UChar **)(a2 + 88));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 152), (UChar **)(a2 + 152));
  *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
  int v6 = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a1 + 22icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v6;
  if (v6 <= 0)
  {
    double v7 = *(uint64_t **)(a2 + 80);
    if (v7)
    {
      uint64_t v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0x20, v5);
      if (v8)
      {
        uint64_t v9 = sub_180955864((uint64_t)v8, *(void *)(a2 + 80));
        *(void *)(a1 + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v9;
        int v10 = *(_DWORD *)(v9 + 24);
        if (v10 > 0)
        {
LABEL_12:
          *(_DWORD *)(a1 + 22icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v10;
          return a1;
        }
      }

      else
      {
        *(void *)(a1 + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
        *(_DWORD *)(a1 + 22icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 7;
      }
    }

    uint64_t v11 = *(uint64_t **)(a2 + 72);
    if (v11)
    {
      int v12 = icu::UMemory::operator new(v11, (icu::UMemory *)0xE0, v5);
      if (v12)
      {
        uint64_t v13 = sub_1809559FC(v12, *(void *)(a2 + 72));
        *uint64_t v4 = v13;
        int v10 = *(_DWORD *)(v13 + 220);
        if (v10 < 1) {
          return a1;
        }
      }

      else
      {
        *uint64_t v4 = 0LL;
        int v10 = 7;
      }

      goto LABEL_12;
    }
  }

  return a1;
}

void *sub_180955AF0(void *a1)
{
  *a1 = off_1897298C0;
  uint64_t v2 = a1[9];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = a1[10];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 19));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 11));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 1));
  return a1;
}

void sub_180955B60(void *a1)
{
  unsigned int v1 = sub_180955AF0(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_180955B74@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 8) = 0u;
  *(void *)(a2 + 56) = 0LL;
  *(_OWORD *)(a2 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)a2 = off_18971B688;
  *(_WORD *)(a2 + 8) = 2;
  switch(a1)
  {
    case 21:
      __int16 v4 = 110;
      break;
    case 22:
      __int16 v4 = 105;
      break;
    case 23:
      __int16 v4 = 102;
      break;
    case 24:
      __int16 v4 = 118;
      break;
    case 25:
      __int16 v4 = 116;
      break;
    case 26:
      __int16 v4 = 101;
      break;
    case 27:
      __int16 v4 = 99;
      break;
    default:
      __int16 v4 = 126;
      break;
  }

  __int16 v6 = v4;
  return icu::UnicodeString::doAppend(a2, (uint64_t)&v6, 0, 1LL);
}

void sub_180955C34(void *a1)
{
  *a1 = off_1897298E0;
  icu::UnicodeString::~UnicodeString(off_1897298E0, (icu::UnicodeString *)(a1 + 3));
  icu::UMemory::operator delete(a1);
}

uint64_t sub_180955C64(uint64_t a1, uint64_t a2)
{
  if ((_DWORD)a2 == 10)
  {
    v42[3] = v2;
    _OWORD v42[4] = v3;
    unsigned int v5 = *(unsigned __int16 *)(a1 + 8);
    int v6 = (__int16)v5;
    int32_t v7 = v5 >> 5;
    if (v6 >= 0) {
      int32_t v8 = v7;
    }
    else {
      int32_t v8 = *(_DWORD *)(a1 + 12);
    }
    if (icu::UnicodeString::doCompare(a1, 0, v8, (uint64_t)"n", 0, 1))
    {
      unsigned int v9 = *(unsigned __int16 *)(a1 + 8);
      int v10 = (__int16)v9;
      int32_t v11 = v9 >> 5;
      if (v10 >= 0) {
        int32_t v12 = v11;
      }
      else {
        int32_t v12 = *(_DWORD *)(a1 + 12);
      }
      if (icu::UnicodeString::doCompare(a1, 0, v12, (uint64_t)"i", 0, 1))
      {
        unsigned int v13 = *(unsigned __int16 *)(a1 + 8);
        int v14 = (__int16)v13;
        int32_t v15 = v13 >> 5;
        if (v14 >= 0) {
          int32_t v16 = v15;
        }
        else {
          int32_t v16 = *(_DWORD *)(a1 + 12);
        }
        if (icu::UnicodeString::doCompare(a1, 0, v16, (uint64_t)"f", 0, 1))
        {
          unsigned int v17 = *(unsigned __int16 *)(a1 + 8);
          int v18 = (__int16)v17;
          int32_t v19 = v17 >> 5;
          if (v18 >= 0) {
            int32_t v20 = v19;
          }
          else {
            int32_t v20 = *(_DWORD *)(a1 + 12);
          }
          if (icu::UnicodeString::doCompare(a1, 0, v20, (uint64_t)"t", 0, 1))
          {
            unsigned int v21 = *(unsigned __int16 *)(a1 + 8);
            int v22 = (__int16)v21;
            int32_t v23 = v21 >> 5;
            if (v22 >= 0) {
              int32_t v24 = v23;
            }
            else {
              int32_t v24 = *(_DWORD *)(a1 + 12);
            }
            if (icu::UnicodeString::doCompare(a1, 0, v24, (uint64_t)"e", 0, 1))
            {
              unsigned int v25 = *(unsigned __int16 *)(a1 + 8);
              int v26 = (__int16)v25;
              int32_t v27 = v25 >> 5;
              if (v26 >= 0) {
                int32_t v28 = v27;
              }
              else {
                int32_t v28 = *(_DWORD *)(a1 + 12);
              }
              if (icu::UnicodeString::doCompare(a1, 0, v28, (uint64_t)"c", 0, 1))
              {
                unsigned int v29 = *(unsigned __int16 *)(a1 + 8);
                int v30 = (__int16)v29;
                int32_t v31 = v29 >> 5;
                if (v30 >= 0) {
                  int32_t v32 = v31;
                }
                else {
                  int32_t v32 = *(_DWORD *)(a1 + 12);
                }
                if (icu::UnicodeString::doCompare(a1, 0, v32, (uint64_t)"v", 0, 1))
                {
                  v42[0] = (uint64_t)"i";
                  if (sub_1807C3C7C(a1, v42, 2))
                  {
                    unsigned int v41 = L"and";
                    if (sub_1807C3C7C(a1, (uint64_t *)&v41, 3))
                    {
                      uint64_t v40 = L"in";
                      if (sub_1807C3C7C(a1, (uint64_t *)&v40, 2))
                      {
                        uint64_t v39 = "w";
                        if (sub_1807C3C7C(a1, (uint64_t *)&v39, 6))
                        {
                          uint64_t v38 = L"not";
                          if (sub_1807C3C7C(a1, (uint64_t *)&v38, 3))
                          {
                            uint64_t v37 = L"mod";
                            if (sub_1807C3C7C(a1, (uint64_t *)&v37, 3))
                            {
                              double v36 = L"or";
                              if (sub_1807C3C7C(a1, (uint64_t *)&v36, 2))
                              {
                                uint64_t v35 = "d";
                                if (sub_1807C3C7C(a1, (uint64_t *)&v35, 7))
                                {
                                  double v34 = "i";
                                  else {
                                    return 29LL;
                                  }
                                }

                                else
                                {
                                  return 28LL;
                                }
                              }

                              else
                              {
                                return 12LL;
                              }
                            }

                            else
                            {
                              return 13LL;
                            }
                          }

                          else
                          {
                            return 14LL;
                          }
                        }

                        else
                        {
                          return 19LL;
                        }
                      }

                      else
                      {
                        return 15LL;
                      }
                    }

                    else
                    {
                      return 11LL;
                    }
                  }

                  else
                  {
                    return 20LL;
                  }
                }

                else
                {
                  return 24LL;
                }
              }

              else
              {
                return 27LL;
              }
            }

            else
            {
              return 26LL;
            }
          }

          else
          {
            return 25LL;
          }
        }

        else
        {
          return 23LL;
        }
      }

      else
      {
        return 22LL;
      }
    }

    else
    {
      return 21LL;
    }
  }

  return a2;
}

uint64_t sub_18095607C(int a1)
{
  if (a1 <= 57)
  {
    if (a1 <= 36)
    {
      if (a1 == 32) {
        return 4LL;
      }
      if (a1 == 33) {
        return 17LL;
      }
    }

    else
    {
      switch(a1)
      {
        case '%':
          return 13LL;
        case ',':
          return 2LL;
        case '.':
          return 7LL;
      }
    }

    return 0LL;
  }

  int v2 = a1 - 58;
  uint64_t result = 5LL;
  switch(v2)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = 3LL;
      break;
    case 3:
      uint64_t result = 16LL;
      break;
    case 6:
      uint64_t result = 6LL;
      break;
    default:
      return 0LL;
  }

  return result;
}

uint64_t sub_180956170(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v6 = icu::StringEnumeration::StringEnumeration(a1);
  *(void *)uint64_t v6 = off_189729900;
  *(_DWORD *)(v6 + 116) = 0;
  int32_t v7 = (icu::UVector *)(v6 + 120);
  icu::UVector::UVector((icu::UVector *)(v6 + 120), a3);
  if (*(int *)a3 <= 0)
  {
    icu::UVector::setDeleter(v7, (void (*)(void *))uprv_deleteUObject);
    if (a2)
    {
      char v10 = 1;
      while (1)
      {
        int32_t v11 = icu::UnicodeString::clone((UChar **)(a2 + 8), v8, v9);
        icu::UVector::adoptElement(v7, v11, a3);
        else {
          int32_t v12 = *(unsigned __int16 *)(a2 + 16) >> 5;
        }
        a2 = *(void *)(a2 + 72);
        if (!a2)
        {
          if (!v10) {
            return a1;
          }
          goto LABEL_15;
        }
      }
    }

    else
    {
LABEL_15:
      unsigned int v13 = icu::UMemory::operator new(v9, (icu::UMemory *)0x40, v8);
      int v14 = v13;
      if (v13)
      {
        icu::UnicodeString::UnicodeString((uint64_t)v13, (uint64_t)"o");
      }

      else if (*(int *)a3 <= 0)
      {
        *a3 = U_MEMORY_ALLOCATION_ERROR;
      }

      icu::UVector::adoptElement(v7, v14, a3);
    }
  }

  return a1;
}

uint64_t sub_1809562E8(_DWORD *a1, int *a2)
{
  if (*a2 > 0) {
    return 0LL;
  }
  signed int v2 = a1[29];
  if (v2 >= a1[32]) {
    return 0LL;
  }
  a1[29] = v2 + 1;
  return icu::UVector::elementAt((icu::UVector *)(a1 + 30), v2);
}

uint64_t sub_180956320(uint64_t result)
{
  *(_DWORD *)(result + 116) = 0;
  return result;
}

uint64_t sub_180956328(uint64_t a1)
{
  return *(unsigned int *)(a1 + 128);
}

void sub_180956330(uint64_t a1)
{
  *(void *)a1 = off_189729900;
  icu::UVector::~UVector((icu::UVector *)(a1 + 120));
  icu::StringEnumeration::~StringEnumeration((icu::StringEnumeration *)a1);
}

void sub_180956360(uint64_t a1)
{
  *(void *)a1 = off_189729900;
  icu::UVector::~UVector((icu::UVector *)(a1 + 120));
  icu::StringEnumeration::~StringEnumeration((icu::StringEnumeration *)a1);
  icu::UMemory::operator delete(v2);
}

icu::FixedDecimal *icu::FixedDecimal::FixedDecimal( icu::FixedDecimal *this, double a2, int a3, uint64_t a4, int a5, int a6)
{
  *(void *)this = off_189729968;
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = &unk_1897299A8;
  icu::FixedDecimal::init(this, a2, a3, a4, a5, a6);
  return this;
}

{
  *(void *)this = off_189729968;
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = &unk_1897299A8;
  icu::FixedDecimal::init(this, a2, a3, a4, a5, a6);
  return this;
}

BOOL icu::FixedDecimal::init(icu::FixedDecimal *this, double a2, int a3, uint64_t a4, int a5, int a6)
{
  *((_BYTE *)this + 6icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = a2 < 0.0;
  double v11 = fabs(a2);
  *((double *)this + 2) = v11;
  *((_BYTE *)this + 62) = uprv_isNaN(v11);
  BOOL result = uprv_isInfinite(*((double *)this + 2));
  *((_BYTE *)this + 63) = result;
  if (a5) {
    int v13 = a5;
  }
  else {
    int v13 = a6;
  }
  *((_DWORD *)this + 14) = v13;
  if (*((_BYTE *)this + 62) | result)
  {
    a4 = 0LL;
    *((void *)this + 6) = 0LL;
    *((_BYTE *)this + 6icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
    *((_DWORD *)this + 6) = 0;
    *((void *)this + 4) = 0LL;
  }

  else
  {
    double v14 = *((double *)this + 2);
    *((void *)this + 6) = (uint64_t)v14;
    *((_BYTE *)this + 6icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v14 == (double)(uint64_t)v14;
    *((_DWORD *)this + 6) = a3;
    *((void *)this + 4) = a4;
    if (a4 && __ROR8__(0xCCCCCCCCCCCCCCCDLL * a4 + 0x1999999999999998LL, 1) <= 0x1999999999999998uLL)
    {
      do
        a4 /= 10LL;
      while (__ROR8__(0x1999999999999998LL - 0x3333333333333333LL * a4, 1) < 0x1999999999999999uLL);
    }
  }

  *((void *)this + 5) = a4;
  return result;
}

icu::FixedDecimal *icu::FixedDecimal::FixedDecimal( icu::FixedDecimal *this, double a2, int a3, uint64_t a4, int a5)
{
  *(void *)this = off_189729968;
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = &unk_1897299A8;
  icu::FixedDecimal::init(this, a2, a3, a4, a5, a5);
  return this;
}

{
  *(void *)this = off_189729968;
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = &unk_1897299A8;
  icu::FixedDecimal::init(this, a2, a3, a4, a5, a5);
  return this;
}

BOOL icu::FixedDecimal::init(icu::FixedDecimal *this, double a2, int a3, uint64_t a4, int a5)
{
  return icu::FixedDecimal::init(this, a2, a3, a4, a5, a5);
}

icu::FixedDecimal *icu::FixedDecimal::FixedDecimal(icu::FixedDecimal *this, double a2, int a3, uint64_t a4)
{
  *(void *)this = off_189729968;
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = &unk_1897299A8;
  icu::FixedDecimal::init(this, a2, a3, a4, 0, 0);
  return this;
}

{
  *(void *)this = off_189729968;
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = &unk_1897299A8;
  icu::FixedDecimal::init(this, a2, a3, a4, 0, 0);
  return this;
}

BOOL icu::FixedDecimal::init(icu::FixedDecimal *this, double a2, int a3, uint64_t a4)
{
  return icu::FixedDecimal::init(this, a2, a3, a4, 0, 0);
}

icu::FixedDecimal *icu::FixedDecimal::FixedDecimal( icu::FixedDecimal *this, double a2, icu::FixedDecimal *a3)
{
  int v3 = (int)a3;
  *(void *)this = off_189729968;
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = &unk_1897299A8;
  unint64_t FractionalDigits = icu::FixedDecimal::getFractionalDigits(a3, a2);
  icu::FixedDecimal::init(this, a2, v3, FractionalDigits, 0, 0);
  return this;
}

{
  int v3;
  unint64_t FractionalDigits;
  int v3 = (int)a3;
  *(void *)this = off_189729968;
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = &unk_1897299A8;
  unint64_t FractionalDigits = icu::FixedDecimal::getFractionalDigits(a3, a2);
  icu::FixedDecimal::init(this, a2, v3, FractionalDigits, 0, 0);
  return this;
}

unint64_t icu::FixedDecimal::getFractionalDigits(icu::FixedDecimal *this, double a2)
{
  int v2 = (int)this;
  unint64_t result = 0LL;
  if (!v2 || floor(a2) == a2) {
    return result;
  }
  if (uprv_isNaN(a2) || uprv_isPositiveInfinity(a2)) {
    return 0LL;
  }
  double v5 = fabs(a2);
  double v6 = v5 - floor(v5);
  switch(v2)
  {
    case 3:
      double v8 = 1000.0;
      return (uint64_t)(v6 * v8 + 0.5);
    case 2:
      double v8 = 100.0;
      return (uint64_t)(v6 * v8 + 0.5);
    case 1:
      return (uint64_t)(v6 * 10.0 + 0.5);
  }

  double v9 = v6 * __exp10((double)v2) + 0.5;
  unint64_t v10 = vcvtmd_s64_f64(v9);
  if (floor(v9) >= 9.22337204e18) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    return v10;
  }
}

BOOL icu::FixedDecimal::init(icu::FixedDecimal *this, double a2)
{
  __int16 v4 = (icu::FixedDecimal *)icu::FixedDecimal::decimals(this, a2);
  int v5 = (int)v4;
  unint64_t FractionalDigits = icu::FixedDecimal::getFractionalDigits(v4, a2);
  return icu::FixedDecimal::init(this, a2, v5, FractionalDigits, 0, 0);
}

icu::FixedDecimal *icu::FixedDecimal::FixedDecimal(icu::FixedDecimal *this)
{
  *(void *)this = off_189729968;
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = &unk_1897299A8;
  icu::FixedDecimal::init(this, 0.0, 0, 0LL, 0, 0);
  return this;
}

{
  *(void *)this = off_189729968;
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = &unk_1897299A8;
  icu::FixedDecimal::init(this, 0.0, 0, 0LL, 0, 0);
  return this;
}

icu::FixedDecimal *icu::FixedDecimal::FixedDecimal( icu::FixedDecimal *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  *(void *)this = off_189729968;
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = &unk_1897299A8;
  memset(&v46[1], 0, 48);
  uint64_t v47 = 0LL;
  v46[0] = (char *)&v46[1] + 5;
  LODWORD(v46[1]) = 40;
  unsigned int v6 = *((unsigned __int16 *)a2 + 4);
  int v7 = (__int16)v6;
  int32_t v8 = v6 >> 5;
  if (v7 >= 0) {
    int32_t v9 = v8;
  }
  else {
    int32_t v9 = *((_DWORD *)a2 + 3);
  }
  int32_t v10 = icu::UnicodeString::doIndexOf((uint64_t)a2, 0x65u, 0, v9);
  if (v10 < 0)
  {
    unsigned int v11 = *((unsigned __int16 *)a2 + 4);
    int v12 = (__int16)v11;
    int32_t v13 = v11 >> 5;
    if (v12 >= 0) {
      int32_t v14 = v13;
    }
    else {
      int32_t v14 = *((_DWORD *)a2 + 3);
    }
    int32_t v10 = icu::UnicodeString::doIndexOf((uint64_t)a2, 0x45u, 0, v14);
  }

  unsigned int v15 = *((unsigned __int16 *)a2 + 4);
  int v16 = (__int16)v15;
  int32_t v17 = v15 >> 5;
  if (v16 >= 0) {
    int32_t v18 = v17;
  }
  else {
    int32_t v18 = *((_DWORD *)a2 + 3);
  }
  int32_t v19 = icu::UnicodeString::doIndexOf((uint64_t)a2, 0x63u, 0, v18);
  if (v19 < 0)
  {
    unsigned int v23 = *((unsigned __int16 *)a2 + 4);
    int v24 = (__int16)v23;
    int32_t v25 = v23 >> 5;
    if (v24 >= 0) {
      int32_t v26 = v25;
    }
    else {
      int32_t v26 = *((_DWORD *)a2 + 3);
    }
    int32_t v19 = icu::UnicodeString::doIndexOf((uint64_t)a2, 0x43u, 0, v26);
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_14;
    }
  }

  else if ((v10 & 0x80000000) == 0)
  {
LABEL_14:
    icu::UnicodeString::tempSubString(a2, 0, v10, (icu::UnicodeString *)v44);
    icu::CharString::appendInvariantChars((icu::CharString *)v46, (const icu::UnicodeString *)v44, a3);
    icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v44);
    LODWORD(v44[0]) = v10 + 1;
    int v22 = icu::ICU_Utility::parseAsciiInteger(a2, (const icu::UnicodeString *)v44, v21);
    goto LABEL_22;
  }

  if (v19 < 0)
  {
    icu::CharString::appendInvariantChars((icu::CharString *)v46, a2, a3);
    int v22 = 0;
  }

  else
  {
    icu::UnicodeString::tempSubString(a2, 0, v19, (icu::UnicodeString *)v44);
    icu::CharString::appendInvariantChars((icu::CharString *)v46, (const icu::UnicodeString *)v44, a3);
    icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)v44);
    LODWORD(v44[0]) = v19 + 1;
    int v22 = icu::ICU_Utility::parseAsciiInteger(a2, (const icu::UnicodeString *)v44, v28);
    int32_t v10 = v19;
  }

__n128 icu::FixedDecimal::FixedDecimal(__n128 *this, __n128 *a2)
{
  this->n128_u64[0] = (unint64_t)off_189729968;
  this->n128_u64[1] = (unint64_t)&unk_1897299A8;
  this[1].n128_u64[0] = a2[1].n128_u64[0];
  this[1].n128_u32[2] = a2[1].n128_u32[2];
  __n128 result = a2[2];
  this[2] = result;
  this[3].n128_u64[0] = a2[3].n128_u64[0];
  this[3].n128_u32[2] = a2[3].n128_u32[2];
  this[3].n128_u32[3] = a2[3].n128_u32[3];
  return result;
}

{
  __n128 result;
  this->n128_u64[0] = (unint64_t)off_189729968;
  this->n128_u64[1] = (unint64_t)&unk_1897299A8;
  this[1].n128_u64[0] = a2[1].n128_u64[0];
  this[1].n128_u32[2] = a2[1].n128_u32[2];
  __n128 result = a2[2];
  this[2] = result;
  this[3].n128_u64[0] = a2[3].n128_u64[0];
  this[3].n128_u32[2] = a2[3].n128_u32[2];
  this[3].n128_u32[3] = a2[3].n128_u32[3];
  return result;
}

void non-virtual thunk to'icu::FixedDecimal::~FixedDecimal(icu::FixedDecimal *this)
{
  unsigned int v1 = (icu::FixedDecimal *)((char *)this - 8);
  icu::UObject::~UObject(this);
  icu::IFixedDecimal::~IFixedDecimal(v1);
}

{
  icu::IFixedDecimal *v1;
  void *v2;
  unsigned int v1 = (icu::FixedDecimal *)((char *)this - 8);
  icu::UObject::~UObject(this);
  icu::IFixedDecimal::~IFixedDecimal(v1);
  icu::UMemory::operator delete(v2);
}

BOOL icu::FixedDecimal::createWithExponent@<W0>( icu::FixedDecimal *this@<X0>, double a2@<D0>, int a3@<W1>, icu::FixedDecimal *a4@<X8>)
{
  int v5 = (int)this;
  unint64_t FractionalDigits = icu::FixedDecimal::getFractionalDigits(this, a2);
  *(void *)a4 = off_189729968;
  *((void *)a4 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = &unk_1897299A8;
  return icu::FixedDecimal::init(a4, a2, v5, FractionalDigits, a3, a3);
}

uint64_t icu::FixedDecimal::decimals(icu::FixedDecimal *this, double a2)
{
  uint64_t result = 0LL;
  void v10[2] = *MEMORY[0x1895F89C0];
  double v3 = fabs(a2);
  while (1)
  {
    double v4 = v3 * (double)dword_180A3B738[result];
    if (v4 == floor(v4)) {
      break;
    }
    if (++result == 4)
    {
      *(void *)__str = 0LL;
      uint64_t v9 = 0LL;
      *(void *)((char *)v10 + 6) = 0LL;
      v10[0] = 0LL;
      snprintf(__str, 0x1EuLL, "%1.15e", v3);
      int v5 = atoi((const char *)v10 + 2);
      if (LOBYTE(v10[0]) == 48)
      {
        uint64_t v6 = 15LL;
        do
          int v7 = __str[v6--];
        while (v7 == 48);
      }

      else
      {
        LODWORD(v6) = 15;
      }

      return (v6 - v5);
    }
  }

  return result;
}

uint64_t icu::FixedDecimal::quickInit(icu::FixedDecimal *this, double a2)
{
  double v3 = fabs(a2);
  if (v3 == floor(v3))
  {
    double v4 = 0LL;
    BOOL v5 = 0;
LABEL_7:
    uint64_t v7 = 1LL;
    if (!v5)
    {
      unint64_t FractionalDigits = icu::FixedDecimal::getFractionalDigits(v4, v3);
      icu::FixedDecimal::init(this, v3, (int)v4, FractionalDigits, 0, 0);
    }
  }

  else
  {
    double v4 = 0LL;
    while (v4 != (icu::FixedDecimal *)3)
    {
      double v6 = v3 * (double)dword_180A3B738[(void)v4 + 1];
      double v4 = (icu::FixedDecimal *)((char *)v4 + 1);
      if (v6 == floor(v6))
      {
        BOOL v5 = (unint64_t)v4 - 1 > 2;
        goto LABEL_7;
      }
    }

    return 0LL;
  }

  return v7;
}

uint64_t icu::FixedDecimal::adjustForMinFractionDigits(uint64_t this, int a2)
{
  int v2 = *(_DWORD *)(this + 24);
  if (a2 - v2 >= 1)
  {
    uint64_t v3 = *(void *)(this + 32);
    do
    {
      if (v3 > 0x16345785D89FFFFLL) {
        break;
      }
      v3 *= 10LL;
      *(void *)(this + 32) = v3;
      ++v2;
    }

    while (a2 != v2);
    *(_DWORD *)(this + 24) = a2;
  }

  return this;
}

double icu::FixedDecimal::getPluralOperand(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      int v3 = *(_DWORD *)(a1 + 56);
      double v4 = *(double *)(a1 + 16);
      if (v3) {
        return v4 * __exp10((double)v3);
      }
      return v4;
    case 1:
      int v5 = *(_DWORD *)(a1 + 56);
      if (v5) {
        return (double)(uint64_t)(__exp10((double)v5) * (double)*(uint64_t *)(a1 + 48));
      }
      else {
        return (double)*(uint64_t *)(a1 + 48);
      }
    case 2:
      return (double)*(uint64_t *)(a1 + 32);
    case 3:
      return (double)*(uint64_t *)(a1 + 40);
    case 4:
      return (double)*(int *)(a1 + 24);
    case 6:
    case 7:
      return (double)*(int *)(a1 + 56);
    default:
      abort();
  }

uint64_t icu::FixedDecimal::longValue(icu::FixedDecimal *this)
{
  int v1 = *((_DWORD *)this + 14);
  if (v1) {
    return (uint64_t)(__exp10((double)v1) * (double)*((uint64_t *)this + 6));
  }
  else {
    return *((void *)this + 6);
  }
}

BOOL icu::FixedDecimal::isNaN(icu::FixedDecimal *this)
{
  return *((_BYTE *)this + 62) != 0;
}

BOOL icu::FixedDecimal::isInfinite(icu::FixedDecimal *this)
{
  return *((_BYTE *)this + 63) != 0;
}

BOOL icu::FixedDecimal::hasIntegerValue(icu::FixedDecimal *this)
{
  return *((_BYTE *)this + 60) != 0;
}

BOOL icu::FixedDecimal::isNanOrInfinity(icu::FixedDecimal *this)
{
  return *((_BYTE *)this + 62) || *((_BYTE *)this + 63) != 0;
}

uint64_t icu::FixedDecimal::getVisibleFractionDigitCount(icu::FixedDecimal *this)
{
  return *((unsigned int *)this + 6);
}

BOOL icu::FixedDecimal::operator==(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 16) == *(double *)(a2 + 16)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(void *)(a1 + 32) == *(void *)(a2 + 32)
      && *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56);
}

uint64_t icu::FixedDecimal::toString@<X0>(icu::FixedDecimal *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  *(void *)__str = 0LL;
  uint64_t v5 = 0LL;
  int v6 = 0;
  if (*((_DWORD *)this + 14)) {
    snprintf(__str, 0x14uLL, "%.*fe%d");
  }
  else {
    snprintf(__str, 0x14uLL, "%.*f");
  }
  return icu::UnicodeString::UnicodeString(a2, __str, 0xFFFFFFFFLL, 0LL);
}

double icu::FixedDecimal::doubleValue(icu::FixedDecimal *this)
{
  if (*((_BYTE *)this + 61)) {
    double v1 = -*((double *)this + 2);
  }
  else {
    double v1 = *((double *)this + 2);
  }
  return v1 * __exp10((double)*((int *)this + 14));
}

icu::PluralAvailableLocalesEnumeration *icu::PluralAvailableLocalesEnumeration::PluralAvailableLocalesEnumeration( icu::PluralAvailableLocalesEnumeration *this, UErrorCode *a2)
{
  uint64_t v4 = icu::StringEnumeration::StringEnumeration((uint64_t)this);
  *(void *)uint64_t v4 = off_1897299D0;
  *(void *)(v4 + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
  uint64_t v5 = (uint64_t *)(v4 + 120);
  *(void *)(v4 + 128) = 0LL;
  *(UErrorCode *)(v4 + 116) = *a2;
  int v6 = (int *)(v4 + 116);
  if (*(int *)a2 <= 0)
  {
    *int v6 = 0;
    uint64_t v7 = ures_openDirect(0LL, (uint64_t)"plurals", (uint64_t)v6);
    *uint64_t v5 = ures_getByKey(v7, "locales", 0LL, v6);
    if (v7) {
      ures_close(v7);
    }
  }

  return this;
}

void icu::PluralAvailableLocalesEnumeration::~PluralAvailableLocalesEnumeration( icu::PluralAvailableLocalesEnumeration *this)
{
  *(void *)this = off_1897299D0;
  ures_close(*((void *)this + 15));
  ures_close(*((void *)this + 16));
  *((void *)this + 15) = 0LL;
  *((void *)this + 16) = 0LL;
  icu::StringEnumeration::~StringEnumeration(this);
}

{
  void *v1;
  icu::PluralAvailableLocalesEnumeration::~PluralAvailableLocalesEnumeration(this);
  icu::UMemory::operator delete(v1);
}

const char *icu::PluralAvailableLocalesEnumeration::next( icu::PluralAvailableLocalesEnumeration *this, int *a2, UErrorCode *a3)
{
  UErrorCode v6 = *((_DWORD *)this + 29);
  if (v6 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    int v3 = 0LL;
    *a3 = v6;
    return v3;
  }

  NextResource = ures_getNextResource(*((void *)this + 15), *((void *)this + 16), (int *)a3);
  *((void *)this + 16) = NextResource;
  int v10 = *a3;
  if (NextResource) {
    BOOL v11 = v10 < 1;
  }
  else {
    BOOL v11 = 0;
  }
  if (!v11)
  {
    if (v10 == 8)
    {
      int v3 = 0LL;
      *a3 = U_ZERO_ERROR;
      return v3;
    }

    return 0LL;
  }

  uint64_t Key = (const char *)ures_getKey((uint64_t)NextResource);
  int v3 = Key;
  if (a2) {
    *a2 = strlen(Key);
  }
  return v3;
}

uint64_t icu::PluralAvailableLocalesEnumeration::reset(uint64_t this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    UErrorCode v2 = *(_DWORD *)(this + 116);
    if (v2 < U_ILLEGAL_ARGUMENT_ERROR) {
      return ures_resetIterator(*(void *)(this + 120));
    }
    else {
      *a2 = v2;
    }
  }

  return this;
}

uint64_t icu::PluralAvailableLocalesEnumeration::count( icu::PluralAvailableLocalesEnumeration *this, UErrorCode *a2)
{
  UErrorCode v2 = *((_DWORD *)this + 29);
  if (v2 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    *a2 = v2;
    return 0LL;
  }

  return ures_getSize(*((void *)this + 15));
}

void sub_180957408(uint64_t a1)
{
  *(void *)a1 = off_189729B30;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));
  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);
}

void sub_180957438(uint64_t a1)
{
  *(void *)a1 = off_189729B30;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));
  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);
  icu::UMemory::operator delete(v2);
}

uint64_t sub_18095746C(uint64_t a1)
{
  int v2 = strlen((const char *)((unint64_t)"N3icu17SharedPluralRulesE" & 0x7FFFFFFFFFFFFFFFLL));
  unsigned int v3 = ustr_hashCharsN( (unsigned __int8 *)((unint64_t)"N3icu17SharedPluralRulesE" & 0x7FFFFFFFFFFFFFFFLL),  v2);
  return icu::Locale::hashCode((icu::Locale *)(a1 + 16)) + 37 * v3;
}

uint64_t *sub_1809574C4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0xF0, a2);
  uint64_t v5 = v4;
  if (v4)
  {
    *((_DWORD *)v4 + 2) = *(_DWORD *)(a1 + 8);
    *((_BYTE *)v4 + 12) = 0;
    *uint64_t v4 = (uint64_t)off_189729B30;
    icu::Locale::Locale((icu::Locale *)(v4 + 2), a1 + 16);
  }

  return v5;
}

char *sub_180957518(uint64_t a1, char *__dst, int a3)
{
  uint64_t result = strncpy(__dst, *(const char **)(a1 + 56), a3);
  __dst[a3 - 1] = 0;
  return result;
}

BOOL sub_180957550(void *a1, void *a2)
{
  BOOL result = sub_18089E3E8(a1, a2);
  if (result) {
    return icu::Locale::operator==((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  }
  return result;
}

void *sub_18095758C()
{
  return &unk_18C535703;
}

uint64_t sub_180957598(uint64_t result, uint64_t a2, int a3, int a4)
{
  *(void *)BOOL result = off_189729BB0;
  *(void *)(result + 8) = &unk_189729C18;
  *(void *)(result + 16) = a2;
  *(_DWORD *)(result + 24) = a3;
  *(_DWORD *)(result + 28) = a4;
  return result;
}

void sub_1809575B4(void *a1)
{
  *a1 = off_189729BB0;
  a1[1] = &unk_189729C18;
  int v2 = (icu::UnicodeMatcher *)(a1 + 1);
  uint64_t v3 = a1[2];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  icu::UnicodeMatcher::~UnicodeMatcher(v2);
  icu::UnicodeFunctor::~UnicodeFunctor((icu::UnicodeFunctor *)a1);
}

void sub_18095760C(uint64_t a1)
{
}

void sub_180957614(void *a1)
{
}

void sub_180957628(uint64_t a1)
{
}

void *sub_180957640(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (void *)icu::UMemory::operator new((icu::UMemory *)0x20, a2);
  uint64_t v4 = v3;
  if (v3)
  {
    void *v3 = off_189729BB0;
    v3[1] = &unk_189729C18;
    v3[2] = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24LL))(*(void *)(a1 + 16));
    v4[3] = *(void *)(a1 + 24);
  }

  return v4;
}

uint64_t sub_18095769C(uint64_t a1)
{
  if (a1) {
    return a1 + 8;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1809576AC(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  unsigned int v10 = 0;
  int v11 = *a3;
  int v12 = *a3;
  while (1)
  {
    int v13 = v12;
    if (v10 >= *(_DWORD *)(a1 + 28))
    {
LABEL_5:
      if (!(_DWORD)a5) {
        goto LABEL_11;
      }
      goto LABEL_6;
    }

    uint64_t v14 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32LL))(*(void *)(a1 + 16));
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t))(*(void *)v14 + 16LL))( v14,  a2,  a3,  a4,  a5);
    if ((_DWORD)result != 2) {
      break;
    }
    ++v10;
    int v12 = *a3;
    if (v13 == *a3) {
      goto LABEL_5;
    }
  }

  if (!(_DWORD)a5 || (_DWORD)result != 1)
  {
    int v13 = *a3;
    if (!(_DWORD)a5)
    {
LABEL_11:
      if (v10 >= *(_DWORD *)(a1 + 24)) {
        return 2LL;
      }
      uint64_t result = 0LL;
      *a3 = v11;
      return result;
    }

uint64_t sub_180957794(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  return sub_1809576AC(a1 - 8, a2, a3, a4, a5);
}

icu::ICU_Utility *sub_18095779C(uint64_t a1, icu::UnicodeString *this, uint64_t a3)
{
  uint64_t v4 = this;
  unsigned int v6 = *((unsigned __int16 *)this + 4);
  if ((v6 & 1) != 0)
  {
    icu::UnicodeString::unBogus((uint64_t)this);
  }

  else
  {
    if ((v6 & 0x8000u) == 0) {
      unsigned int v7 = v6 >> 5;
    }
    else {
      unsigned int v7 = *((_DWORD *)this + 3);
    }
    if (v7) {
      *((_WORD *)this + 4) &= 0x1Fu;
    }
  }

  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32LL))(*(void *)(a1 + 16));
  (*(void (**)(uint64_t, icu::ICU_Utility *, uint64_t))(*(void *)v8 + 24LL))(v8, v4, a3);
  int v9 = *(_DWORD *)(a1 + 24);
  if (v9 == 1)
  {
    if (*(_DWORD *)(a1 + 28) == 0x7FFFFFFF)
    {
      __int16 v16 = 43;
      int v11 = &v16;
      return (icu::ICU_Utility *)icu::UnicodeString::doAppend((uint64_t)v4, (uint64_t)v11, 0, 1LL);
    }
  }

  else if (!v9)
  {
    int v10 = *(_DWORD *)(a1 + 28);
    if (v10 == 0x7FFFFFFF)
    {
      __int16 v15 = 42;
      int v11 = &v15;
      return (icu::ICU_Utility *)icu::UnicodeString::doAppend((uint64_t)v4, (uint64_t)v11, 0, 1LL);
    }

    if (v10 == 1)
    {
      __int16 v14 = 63;
      int v11 = &v14;
      return (icu::ICU_Utility *)icu::UnicodeString::doAppend((uint64_t)v4, (uint64_t)v11, 0, 1LL);
    }
  }

  __int16 v17 = 123;
  icu::UnicodeString::doAppend((uint64_t)v4, (uint64_t)&v17, 0, 1LL);
  icu::ICU_Utility::appendNumber(v4, (icu::UnicodeString *)*(unsigned int *)(a1 + 24), 0xAu, 1);
  __int16 v18 = 44;
  icu::UnicodeString::doAppend((uint64_t)v4, (uint64_t)&v18, 0, 1LL);
  int v12 = (icu::UnicodeString *)*(unsigned int *)(a1 + 28);
  if ((_DWORD)v12 != 0x7FFFFFFF) {
    icu::ICU_Utility::appendNumber(v4, v12, 0xAu, 1);
  }
  __int16 v19 = 125;
  icu::UnicodeString::doAppend((uint64_t)v4, (uint64_t)&v19, 0, 1LL);
  return v4;
}

icu::ICU_Utility *sub_180957930(uint64_t a1, icu::UnicodeString *a2, uint64_t a3)
{
  return sub_18095779C(a1 - 8, a2, a3);
}

BOOL sub_180957938(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)(a1 + 24)) {
    return 1LL;
  }
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32LL))(*(void *)(a1 + 16));
  return (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v3 + 32LL))(v3, a2) != 0;
}

BOOL sub_18095798C(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)(a1 + 16)) {
    return 1LL;
  }
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32LL))(*(void *)(a1 + 8));
  return (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v3 + 32LL))(v3, a2) != 0;
}

uint64_t sub_1809579E0(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 28))
  {
    uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(result + 16) + 32LL))(*(void *)(result + 16));
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 40LL))(v3, a2);
  }

  return result;
}

uint64_t sub_180957A2C(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 20))
  {
    uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(result + 8) + 32LL))(*(void *)(result + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 40LL))(v3, a2);
  }

  return result;
}

uint64_t sub_180957A78(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48LL))(*(void *)(a1 + 16));
}

double icu::QuantityFormatter::QuantityFormatter(icu::QuantityFormatter *this)
{
  double result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0u;
  return result;
}

{
  double result;
  double result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0u;
  return result;
}

icu::QuantityFormatter *icu::QuantityFormatter::QuantityFormatter( icu::QuantityFormatter *this, const icu::QuantityFormatter *a2)
{
  for (uint64_t i = 0LL; i != 64; i += 8LL)
  {
    uint64_t v5 = *(uint64_t **)((char *)a2 + i);
    if (v5)
    {
      unsigned int v6 = icu::UMemory::operator new(v5, (icu::UMemory *)0x48, (unint64_t)a2);
      unsigned int v7 = v6;
      if (v6) {
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v6 + 1), (UChar **)(*(void *)((char *)a2 + i) + 8LL));
      }
    }

    else
    {
      unsigned int v7 = 0LL;
    }

    *(void *)((char *)this + i) = v7;
  }

  return this;
}

uint64_t icu::QuantityFormatter::operator=(uint64_t a1, unint64_t a2)
{
  if (a1 != a2)
  {
    for (uint64_t i = 0LL; i != 64; i += 8LL)
    {
      uint64_t v5 = *(icu::SimpleFormatter **)(a1 + i);
      if (v5)
      {
        icu::SimpleFormatter::~SimpleFormatter(v5);
        icu::UMemory::operator delete(v6);
      }

      unsigned int v7 = *(uint64_t **)(a2 + i);
      if (v7)
      {
        uint64_t v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0x48, a2);
        int v9 = v8;
        if (v8) {
          icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v8 + 1), (UChar **)(*(void *)(a2 + i) + 8LL));
        }
      }

      else
      {
        int v9 = 0LL;
      }

      *(void *)(a1 + i) = v9;
    }
  }

  return a1;
}

void icu::QuantityFormatter::~QuantityFormatter(icu::QuantityFormatter *this)
{
  for (uint64_t i = 0LL; i != 64; i += 8LL)
  {
    uint64_t v3 = *(icu::SimpleFormatter **)((char *)this + i);
    if (v3)
    {
      icu::SimpleFormatter::~SimpleFormatter(v3);
      icu::UMemory::operator delete(v4);
    }
  }

void icu::QuantityFormatter::reset(icu::QuantityFormatter *this)
{
  for (uint64_t i = 0LL; i != 64; i += 8LL)
  {
    uint64_t v3 = *(icu::SimpleFormatter **)((char *)this + i);
    if (v3)
    {
      icu::SimpleFormatter::~SimpleFormatter(v3);
      icu::UMemory::operator delete(v4);
    }

    *(void *)((char *)this + i) = 0LL;
  }

uint64_t icu::QuantityFormatter::addIfAbsent( icu::QuantityFormatter *this, icu::StandardPlural *a2, UErrorCode *a3, UErrorCode *a4)
{
  int v7 = icu::StandardPlural::indexFromString(a2, (char *)a4, a3);
  int v10 = v7;
  if (*((void *)this + v7)) {
    return 1LL;
  }
  uint64_t result = (uint64_t)icu::UMemory::operator new(0LL, (icu::UMemory *)0x48, v8);
  if (result)
  {
    int v11 = (icu::SimpleFormatter *)result;
    *(void *)(result + 8) = off_18971B688;
    *(_WORD *)(result + 16) = 2;
    icu::SimpleFormatter::applyPatternMinMaxArguments( (icu::SimpleFormatter *)result,  (const icu::UnicodeString *)a3,  0,  1,  0,  a4);
    if (*(int *)a4 >= 1)
    {
      icu::SimpleFormatter::~SimpleFormatter(v11);
      icu::UMemory::operator delete(v12);
      return 0LL;
    }

    *((void *)this + v1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v11;
    return 1LL;
  }

  *a4 = U_MEMORY_ALLOCATION_ERROR;
  return result;
}

BOOL icu::QuantityFormatter::isValid(icu::QuantityFormatter *this)
{
  return *((void *)this + 5) != 0LL;
}

uint64_t icu::QuantityFormatter::getByVariant(icu::QuantityFormatter *this, icu::StandardPlural *a2)
{
  int v3 = icu::StandardPlural::indexOrNegativeFromString(a2, (const char *)a2);
  if (v3 < 0) {
    int v4 = 5;
  }
  else {
    int v4 = v3;
  }
  uint64_t result = *((void *)this + v4);
  if (!result) {
    return *((void *)this + 5);
  }
  return result;
}

icu::UnicodeString *icu::QuantityFormatter::format( icu::QuantityFormatter *this, const icu::Formattable *a2, const icu::NumberFormat *a3, const icu::PluralRules *a4, icu::UnicodeString *a5, icu::FieldPosition *a6, UErrorCode *a7)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  uint64_t v20 = 0LL;
  __int128 v19 = 0u;
  __int16 v16 = off_18971B688;
  LOWORD(v17) = 2;
  unsigned int v11 = icu::QuantityFormatter::selectPlural(a2, a3, a4, (const icu::PluralRules *)&v16, a6, a7, a7);
  uint64_t v13 = *(unsigned int *)a7;
  if ((int)v13 <= 0)
  {
    __int16 v14 = (icu::QuantityFormatter *)*((void *)this + v11);
    if (v14 || (__int16 v14 = (icu::QuantityFormatter *)*((void *)this + 5)) != 0LL)
    {
      icu::QuantityFormatter::format(v14, (const icu::SimpleFormatter *)&v16, a5, a6, a7, v12);
    }

    else
    {
      uint64_t v13 = 27LL;
      *a7 = U_INVALID_STATE_ERROR;
    }
  }

  icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)&v16);
  return a5;
}

uint64_t icu::QuantityFormatter::selectPlural( icu::QuantityFormatter *this, const icu::Formattable *lpsrc, const icu::NumberFormat *a3, const icu::PluralRules *a4, icu::UnicodeString *a5, UErrorCode *a6, UErrorCode *a7)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  if (*(int *)a6 <= 0)
  {
    __int128 v27 = 0u;
    uint64_t v30 = 0LL;
    __int128 v29 = 0u;
    __int128 v28 = 0u;
    int32_t v26 = off_18971B688;
    LOWORD(v27) = 2;
    if (v14)
    {
      __int16 v15 = v14;
      uint64_t v25 = 0LL;
      memset(v24, 0, sizeof(v24));
      icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v24);
      icu::DecimalFormat::formatToDecimalQuantity(v15, this, (icu::number::impl::DecimalQuantity *)v24, a6);
      if (*(int *)a6 > 0)
      {
        icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v24);
LABEL_6:
        uint64_t v7 = 5LL;
LABEL_19:
        icu::UnicodeString::~UnicodeString((void *)v16, (icu::UnicodeString *)&v26);
        return v7;
      }

      icu::PluralRules::select(a3, (const icu::IFixedDecimal *)v24, (icu::UnicodeString *)v23);
      icu::UnicodeString::operator=((icu::UnicodeString *)&v26, (icu::UnicodeString *)v23);
      icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v23);
      (*(void (**)(icu::DecimalFormat *, icu::QuantityFormatter *, const icu::PluralRules *, icu::UnicodeString *, UErrorCode *))(*(void *)v15 + 40LL))( v15,  this,  a4,  a5,  a6);
      icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v24);
LABEL_16:
      int v21 = icu::StandardPlural::indexOrNegativeFromString((icu::StandardPlural *)&v26, v19);
      uint64_t v16 = 5LL;
      if (v21 < 0) {
        uint64_t v7 = 5LL;
      }
      else {
        uint64_t v7 = v21;
      }
      goto LABEL_19;
    }

    if (icu::Formattable::getType(this) == 1)
    {
      double v17 = *((double *)this + 1);
    }

    else
    {
      if (icu::Formattable::getType(this) == 2)
      {
        icu::PluralRules::select(a3, *((_DWORD *)this + 2), (icu::UnicodeString *)v24);
LABEL_15:
        icu::UnicodeString::operator=((icu::UnicodeString *)&v26, (icu::UnicodeString *)v24);
        icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v24);
        (*(void (**)(const icu::Formattable *, icu::QuantityFormatter *, const icu::PluralRules *, icu::UnicodeString *, UErrorCode *))(*(void *)lpsrc + 40LL))( lpsrc,  this,  a4,  a5,  a6);
        goto LABEL_16;
      }

      if (icu::Formattable::getType(this) != 5)
      {
        uint64_t v16 = 1LL;
        *a6 = U_ILLEGAL_ARGUMENT_ERROR;
        goto LABEL_6;
      }

      double v17 = (double)*((uint64_t *)this + 1);
    }

    icu::PluralRules::select(a3, v17, (icu::UnicodeString *)v24);
    goto LABEL_15;
  }

  return 5LL;
}

const icu::UnicodeString *icu::QuantityFormatter::format( icu::QuantityFormatter *this, const icu::SimpleFormatter *a2, const icu::UnicodeString *a3, icu::UnicodeString *a4, UErrorCode *a5, UErrorCode *a6)
{
  if (*(int *)a5 <= 0)
  {
    uint64_t v13 = a2;
    int __b = 0;
    icu::SimpleFormatter::formatAndAppend(this, &v13, 1u, a3, &__b, 1, a5);
    int v8 = *((_DWORD *)a4 + 4);
    if (*(void *)((char *)a4 + 12))
    {
      int v9 = __b;
      if (__b < 0)
      {
        int v10 = 0;
        *((_DWORD *)a4 + 3) = 0;
      }

      else
      {
        *((_DWORD *)a4 + 3) += __b;
        int v10 = v8 + v9;
      }

      *((_DWORD *)a4 + 4) = v10;
    }
  }

  return a3;
}

void *icu::QuantityFormatter::formatAndSelect( void *a1, icu::PluralRules *a2, int *a3, _DWORD *a4, UErrorCode *a5, double a6)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  __int128 v32 = 0u;
  uint64_t v35 = 0LL;
  __int128 v34 = 0u;
  __int128 v33 = 0u;
  uint64_t v31 = off_18971B688;
  LOWORD(v32) = 2;
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v30 = 0LL;
    memset(v29, 0, sizeof(v29));
    memset(v28, 0, sizeof(v28));
    sub_1808D4228((uint64_t)v28);
    icu::number::impl::DecimalQuantity::setToDouble((void **)v29, a6);
    __int16 v14 = (icu::number::LocalizedNumberFormatter *)icu::DecimalFormat::toNumberFormatter(v13, a5);
    if (*(int *)a5 > 0
      || (icu::number::LocalizedNumberFormatter::formatImpl(v14, (icu::number::impl::UFormattedNumberData *)v28, a5),
          *(int *)a5 > 0))
    {
      icu::number::impl::UFormattedNumberData::~UFormattedNumberData((icu::number::impl::UFormattedNumberData *)v28);
      return icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v31);
    }

    icu::FormattedStringBuilder::operator=((uint64_t)a3, (uint64_t)v28 + 8);
    icu::PluralRules::select(a2, (const icu::IFixedDecimal *)v29, (icu::UnicodeString *)&v23);
    icu::UnicodeString::operator=((icu::UnicodeString *)&v31, (icu::UnicodeString *)&v23);
    icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v23);
    icu::number::impl::UFormattedNumberData::~UFormattedNumberData((icu::number::impl::UFormattedNumberData *)v28);
  }

  else
  {
    __int128 v24 = 0u;
    uint64_t v27 = 0LL;
    __int128 v26 = 0u;
    __int128 v25 = 0u;
    unsigned int v23 = off_18971B688;
    LOWORD(v24) = 2;
    icu::Formattable::Formattable((icu::Formattable *)v28, a6);
    icu::Format::format((icu::Format *)a1, (const icu::Formattable *)v28, (icu::UnicodeString *)&v23, a5);
    icu::Formattable::~Formattable((icu::Formattable *)v28);
    uint64_t v16 = (void *)*(unsigned int *)a5;
    if ((int)v16 > 0
      || (icu::FormattedStringBuilder::insert((icu::FormattedStringBuilder *)a3, a3[33], (uint64_t)&v23, 1, 0, a5),
          uint64_t v16 = (void *)*(unsigned int *)a5,
          (int)v16 > 0))
    {
      icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v23);
      return icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v31);
    }

    icu::PluralRules::select(a2, a6, (icu::UnicodeString *)v28);
    icu::UnicodeString::operator=((icu::UnicodeString *)&v31, (icu::UnicodeString *)v28);
    icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v28);
    icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v23);
  }

  int v21 = icu::StandardPlural::indexOrNegativeFromString((icu::StandardPlural *)&v31, v18);
  if (v21 < 0) {
    uint64_t v15 = 5LL;
  }
  else {
    uint64_t v15 = v21;
  }
  *a4 = v15;
  return icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v31);
}

void *icu::RuleBasedNumberFormat::getStaticClassID(icu::RuleBasedNumberFormat *this)
{
  return &unk_18C535704;
}

void *icu::RuleBasedNumberFormat::getDynamicClassID(icu::RuleBasedNumberFormat *this)
{
  return &unk_18C535704;
}

uint64_t sub_1809583A0(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a1 != a2)
  {
    int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
    if (v4 >= 1)
    {
      uint64_t v5 = 0LL;
      do
      {
        unsigned int v6 = (const UChar *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32LL))(a1, v5);
        uint64_t v7 = (const UChar *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 32LL))(a2, v5);
        if (v7 != v6)
        {
          BOOL v8 = !v6 || v7 == 0LL;
          if (v8 || u_strcmp(v6, v7)) {
            return 0LL;
          }
        }

        uint64_t v5 = (v5 + 1);
      }

      while (v4 != (_DWORD)v5);
    }

    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40LL))(a1);
    if (v9 >= 1)
    {
      uint64_t v10 = 0LL;
      while (1)
      {
        unsigned int v11 = (const UChar *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 48LL))(a1, v10);
        uint64_t v12 = (*(uint64_t (**)(uint64_t, const UChar *))(*(void *)a2 + 64LL))(a2, v11);
        uint64_t v13 = (const UChar *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 48LL))(a2, v12);
        if (v13 != v11)
        {
          BOOL v14 = !v11 || v13 == 0LL;
          if (v14 || u_strcmp(v11, v13)) {
            return 0LL;
          }
        }

        if (v4 >= 1)
        {
          uint64_t v15 = 0LL;
          do
          {
            uint64_t v16 = (const UChar *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 56LL))( a1,  v10,  v15);
            double v17 = (const UChar *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 56LL))( a2,  v12,  v15);
            if (v17 != v16)
            {
              BOOL v18 = !v16 || v17 == 0LL;
              if (v18 || u_strcmp(v16, v17)) {
                return 0LL;
              }
            }

            uint64_t v15 = (v15 + 1);
          }

          while (v4 != (_DWORD)v15);
        }

        uint64_t v10 = (v10 + 1);
        uint64_t result = 1LL;
        if ((_DWORD)v10 == v9) {
          return result;
        }
      }
    }
  }

  return 1LL;
}

uint64_t sub_1809585B0(uint64_t a1, const UChar *a2)
{
  uint64_t v4 = 0LL;
  while (1)
  {
    uint64_t v5 = (const UChar *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 48LL))(a1, v4);
    if (v5 == a2) {
      break;
    }
    if (a2)
    {
      unsigned int v6 = v5;
      if (v5)
      {
        if (!u_strcmp(a2, v5)) {
          break;
        }
      }
    }

    uint64_t v4 = (v4 + 1);
  }

  return v4;
}

uint64_t sub_180958648(uint64_t a1, const UChar *a2)
{
  uint64_t v4 = 0LL;
  while (1)
  {
    uint64_t v5 = (const UChar *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32LL))(a1, v4);
    if (v5 == a2) {
      break;
    }
    unsigned int v6 = v5;
    if (v5)
    {
      if (!u_strcmp(a2, v5)) {
        break;
      }
    }

    uint64_t v4 = (v4 + 1);
  }

  return v4;
}

uint64_t *sub_1809586E0(uint64_t a1, char *a2, int a3)
{
  int v3 = *(int **)(a1 + 40);
  if (*v3 < 1)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)uint64_t v4 = 0xFFFFFFFF00000000LL;
    *(_WORD *)(v4 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
    *(_WORD *)(v4 + 8) = 0;
    if (!a2)
    {
      int *v3 = 1;
      return 0LL;
    }

    if (a3 > 0)
    {
      *(void *)a1 = a2;
      *(void *)(a1 + 8) = &a2[2 * a3];
      *(void *)(a1 + 16) = a2;
      *(_WORD *)(a1 + 24) = -1;
      return sub_180958764(a1);
    }

    int *v3 = 1;
    goto LABEL_3;
  }

  if (a2) {
LABEL_3:
  }
    uprv_free(a2);
  return 0LL;
}

uint64_t *sub_180958764(uint64_t a1)
{
  unint64_t v3 = *(void *)(a1 + 8);
  int v2 = *(_WORD **)(a1 + 16);
  if ((unint64_t)v2 < v3)
  {
    uint64_t v4 = *(unsigned __int16 *)(a1 + 24);
    do
    {
      if ((_DWORD)v4 == 0xFFFF) {
        uint64_t v4 = (unsigned __int16)*v2;
      }
      BOOL isWhiteSpace = icu::PatternProps::isWhiteSpace((icu::PatternProps *)v4);
      unint64_t v3 = *(void *)(a1 + 8);
      int v2 = *(_WORD **)(a1 + 16);
      if (!isWhiteSpace) {
        break;
      }
      *(void *)(a1 + 16) = ++v2;
      uint64_t v4 = 0xFFFFLL;
      *(_WORD *)(a1 + 24) = -1;
    }

    while ((unint64_t)v2 < v3);
  }

  if ((unint64_t)v2 < v3 && (*(_WORD *)(a1 + 24) == 60 || *v2 == 60))
  {
    *(void *)(a1 + 16) = v2 + 1;
    *(_WORD *)(a1 + 24) = -1;
    uint64_t v28 = 0LL;
    uint64_t v29 = 0LL;
    uint64_t v30 = j__uprv_free_2;
    int v27 = -1;
    while (1)
    {
      uint64_t v6 = sub_180958B10(a1, &v27);
      unint64_t v8 = *(void *)(a1 + 8);
      uint64_t v7 = *(unsigned __int16 **)(a1 + 16);
      if ((unint64_t)v7 < v8)
      {
        uint64_t v9 = *(unsigned __int16 *)(a1 + 24);
        do
        {
          if ((_DWORD)v9 == 0xFFFF) {
            uint64_t v9 = *v7;
          }
          BOOL v10 = icu::PatternProps::isWhiteSpace((icu::PatternProps *)v9);
          unint64_t v8 = *(void *)(a1 + 8);
          uint64_t v7 = *(unsigned __int16 **)(a1 + 16);
          if (!v10) {
            break;
          }
          *(void *)(a1 + 16) = ++v7;
          uint64_t v9 = 0xFFFFLL;
          *(_WORD *)(a1 + 24) = -1;
        }

        while ((unint64_t)v7 < v8);
      }

      if (*(_WORD *)(a1 + 24) == 44)
      {
        BOOL v11 = 1;
        if (!v6) {
          goto LABEL_26;
        }
      }

      else
      {
        BOOL v11 = *v7 == 44;
        if (!v6)
        {
LABEL_26:
          if (!v11) {
            goto LABEL_27;
          }
          goto LABEL_44;
        }
      }

      sub_180958D94((uint64_t)&v28, v6, *(int **)(a1 + 40));
      if (!v11) {
        goto LABEL_27;
      }
      *(void *)(a1 + 16) += 2LL;
      *(_WORD *)(a1 + 24) = -1;
    }

    if (v6) {
      sub_180958D94((uint64_t)&v28, v6, *(int **)(a1 + 40));
    }
LABEL_27:
    uint64_t v12 = *(unsigned __int16 **)(a1 + 8);
    uint64_t v13 = *(unsigned __int16 **)(a1 + 16);
    if (v13 < v12)
    {
      uint64_t v14 = *(unsigned __int16 *)(a1 + 24);
      do
      {
        if ((_DWORD)v14 == 0xFFFF) {
          uint64_t v14 = *v13;
        }
        BOOL v15 = icu::PatternProps::isWhiteSpace((icu::PatternProps *)v14);
        uint64_t v12 = *(unsigned __int16 **)(a1 + 8);
        uint64_t v13 = *(unsigned __int16 **)(a1 + 16);
        if (!v15) {
          break;
        }
        *(void *)(a1 + 16) = ++v13;
        uint64_t v14 = 0xFFFFLL;
        *(_WORD *)(a1 + 24) = -1;
      }

      while (v13 < v12);
    }

    if (v13 >= v12 || *(_WORD *)(a1 + 24) != 62 && *v13 != 62) {
      goto LABEL_44;
    }
    uint64_t v16 = v13 + 1;
    for (*(void *)(a1 + 16) = v16; ; *(void *)(a1 + 16) = v16)
    {
      *(_WORD *)(a1 + 24) = -1;
      if (v16 >= v12) {
        break;
      }
      BOOL v17 = icu::PatternProps::isWhiteSpace((icu::PatternProps *)*v16);
      uint64_t v12 = *(unsigned __int16 **)(a1 + 8);
      uint64_t v16 = *(unsigned __int16 **)(a1 + 16);
      if (!v17) {
        break;
      }
      ++v16;
    }

    if (v16 != v12)
    {
LABEL_44:
      sub_180958A24(a1);
      uint64_t v20 = 0LL;
      goto LABEL_45;
    }

    sub_180958D94((uint64_t)&v28, 0LL, *(int **)(a1 + 40));
    __int128 v19 = (uint64_t *)**(unsigned int **)(a1 + 40);
    if ((int)v19 > 0)
    {
      sub_18095C78C((uint64_t)&v28);
      goto LABEL_43;
    }

    int v22 = HIDWORD(v29);
    uint64_t v23 = v28;
    uint64_t v28 = 0LL;
    uint64_t v29 = 0LL;
    __int128 v24 = icu::UMemory::operator new(v19, (icu::UMemory *)0x28, v18);
    uint64_t v20 = v24;
    if (v24)
    {
      uint64_t v25 = *(void *)a1;
      int v26 = v27 - 2;
      *((_DWORD *)v24 + 2) = 0;
      *__int128 v24 = (uint64_t)off_189729C90;
      void v24[2] = v25;
      v24[3] = v23;
      *((_DWORD *)v24 + 8) = v26;
      *((_DWORD *)v24 + 9) = v22 - 2;
    }

void sub_180958A24(uint64_t a1)
{
  if (*(void *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    else {
      unint64_t v3 = *(const UChar **)a1;
    }
    uint64_t v4 = (const UChar *)(v2 - 2);
    while (v4 >= v3)
    {
      if (!*v4--)
      {
        unint64_t v3 = v4 + 2;
        break;
      }
    }

    else {
      uint64_t v6 = *(void *)(a1 + 8);
    }
    u_strncpy((UChar *)(*(void *)(a1 + 32) + 8LL), v3, (unint64_t)(v2 - (void)v3) >> 1);
    uint64_t v7 = *(void *)(a1 + 32);
    unint64_t v8 = *(const UChar **)(a1 + 16);
    *(_WORD *)(v7 + (char *)v8 - (char *)v3 + 8) = 0;
    u_strncpy((UChar *)(v7 + 40), v8, (unint64_t)(v6 - (void)v8) >> 1);
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 16);
    *(_WORD *)(v9 + v6 - v10 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
    BOOL v11 = *(UChar **)a1;
    *(_DWORD *)(v9 + 4) = (unint64_t)(v10 - *(void *)a1) >> 1;
    uprv_free(v11);
    *(void *)a1 = 0LL;
    *(void *)(a1 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    uint64_t v12 = *(int **)(a1 + 40);
    if (*v12 <= 0) {
      int *v12 = 9;
    }
  }

uint64_t sub_180958B10(uint64_t a1, _DWORD *a2)
{
  unint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(_WORD **)(a1 + 16);
  if ((unint64_t)v4 < v5)
  {
    uint64_t v6 = *(unsigned __int16 *)(a1 + 24);
    do
    {
      if ((_DWORD)v6 == 0xFFFF) {
        uint64_t v6 = (unsigned __int16)*v4;
      }
      BOOL isWhiteSpace = icu::PatternProps::isWhiteSpace((icu::PatternProps *)v6);
      unint64_t v5 = *(void *)(a1 + 8);
      uint64_t v4 = *(_WORD **)(a1 + 16);
      if (!isWhiteSpace) {
        break;
      }
      *(void *)(a1 + 16) = ++v4;
      uint64_t v6 = 0xFFFFLL;
      *(_WORD *)(a1 + 24) = -1;
    }

    while ((unint64_t)v4 < v5);
  }

  if ((unint64_t)v4 >= v5 || *(_WORD *)(a1 + 24) != 60 && *v4 != 60)
  {
    sub_180958A24(a1);
    return 0LL;
  }

  *(void *)(a1 + 16) = v4 + 1;
  *(_WORD *)(a1 + 24) = -1;
  uint64_t v21 = 0LL;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  while (1)
  {
    unint64_t v8 = sub_180958E54(a1);
    unint64_t v10 = *(void *)(a1 + 8);
    uint64_t v9 = *(unsigned __int16 **)(a1 + 16);
    if ((unint64_t)v9 < v10)
    {
      uint64_t v11 = *(unsigned __int16 *)(a1 + 24);
      do
      {
        if ((_DWORD)v11 == 0xFFFF) {
          uint64_t v11 = *v9;
        }
        BOOL v12 = icu::PatternProps::isWhiteSpace((icu::PatternProps *)v11);
        unint64_t v10 = *(void *)(a1 + 8);
        uint64_t v9 = *(unsigned __int16 **)(a1 + 16);
        if (!v12) {
          break;
        }
        *(void *)(a1 + 16) = ++v9;
        uint64_t v11 = 0xFFFFLL;
        *(_WORD *)(a1 + 24) = -1;
      }

      while ((unint64_t)v9 < v10);
    }

    if (*(_WORD *)(a1 + 24) == 44)
    {
      BOOL v13 = 1;
      if (!v8) {
        goto LABEL_30;
      }
    }

    else
    {
      BOOL v13 = *v9 == 44;
      if (!v8)
      {
LABEL_30:
        if (!v13) {
          goto LABEL_31;
        }
        goto LABEL_44;
      }
    }

    sub_180958D94((uint64_t)&v21, (uint64_t)v8, *(int **)(a1 + 40));
    if (!v13) {
      goto LABEL_31;
    }
    *(void *)(a1 + 16) += 2LL;
    *(_WORD *)(a1 + 24) = -1;
  }

  if (v8) {
    sub_180958D94((uint64_t)&v21, (uint64_t)v8, *(int **)(a1 + 40));
  }
LABEL_31:
  unint64_t v17 = *(void *)(a1 + 8);
  uint64_t v16 = *(_WORD **)(a1 + 16);
  if ((unint64_t)v16 < v17)
  {
    uint64_t v18 = *(unsigned __int16 *)(a1 + 24);
    do
    {
      if ((_DWORD)v18 == 0xFFFF) {
        uint64_t v18 = (unsigned __int16)*v16;
      }
      BOOL v19 = icu::PatternProps::isWhiteSpace((icu::PatternProps *)v18);
      unint64_t v17 = *(void *)(a1 + 8);
      uint64_t v16 = *(_WORD **)(a1 + 16);
      if (!v19) {
        break;
      }
      *(void *)(a1 + 16) = ++v16;
      uint64_t v18 = 0xFFFFLL;
      *(_WORD *)(a1 + 24) = -1;
    }

    while ((unint64_t)v16 < v17);
  }

  if ((unint64_t)v16 >= v17
    || *(_WORD *)(a1 + 24) != 62 && *v16 != 62
    || (*(void *)(a1 + 16) = v16 + 1,
        *(_WORD *)(a1 + 24) = -1,
        sub_180958D94((uint64_t)&v21, 0LL, *(int **)(a1 + 40)),
        uint64_t v20 = *(int **)(a1 + 40),
        *v20 > 0))
  {
LABEL_44:
    sub_180958A24(a1);
    uint64_t v14 = 0LL;
    goto LABEL_45;
  }

  if (*a2 == -1)
  {
    *a2 = HIDWORD(v22) + 1;
  }

  else if (HIDWORD(v22) != *a2)
  {
    *uint64_t v20 = 1;
    goto LABEL_44;
  }

  uint64_t v14 = v21;
  uint64_t v21 = 0LL;
  uint64_t v22 = 0LL;
LABEL_45:
  sub_18095C78C((uint64_t)&v21);
  return v14;
}

void sub_180958D94(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 <= 0)
  {
    int v5 = *(_DWORD *)(a1 + 12);
    if (v5 != *(_DWORD *)(a1 + 8))
    {
LABEL_13:
      uint64_t v11 = *(void **)a1;
      *(_DWORD *)(a1 + 12) = v5 + 1;
      v11[v5] = a2;
      return;
    }

    int v7 = v5 + 256;
    if (v5 <= 255) {
      int v7 = 2 * v5;
    }
    if (v5) {
      int v8 = v7;
    }
    else {
      int v8 = 1;
    }
    *(_DWORD *)(a1 + 8) = v8;
    uint64_t v9 = *(void **)a1;
    if (*(void *)a1) {
      unint64_t v10 = (char *)uprv_realloc(v9, 8LL * v8);
    }
    else {
      unint64_t v10 = (char *)uprv_malloc(8LL * v8);
    }
    *(void *)a1 = v10;
    if (v10)
    {
      bzero(&v10[8 * *(int *)(a1 + 12)], 8LL * (*(_DWORD *)(a1 + 8) - *(_DWORD *)(a1 + 12)));
      int v5 = *(_DWORD *)(a1 + 12);
      goto LABEL_13;
    }

    *a3 = 7;
  }

unsigned __int16 *sub_180958E54(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int16 **)(a1 + 8);
  unint64_t v3 = *(unsigned __int16 **)(a1 + 16);
  if (v3 < v2)
  {
    uint64_t v4 = *(unsigned __int16 *)(a1 + 24);
    do
    {
      if ((_DWORD)v4 == 0xFFFF) {
        uint64_t v4 = *v3;
      }
      BOOL isWhiteSpace = icu::PatternProps::isWhiteSpace((icu::PatternProps *)v4);
      uint64_t v2 = *(unsigned __int16 **)(a1 + 8);
      unint64_t v3 = *(unsigned __int16 **)(a1 + 16);
      if (!isWhiteSpace) {
        break;
      }
      *(void *)(a1 + 16) = ++v3;
      uint64_t v4 = 0xFFFFLL;
      *(_WORD *)(a1 + 24) = -1;
    }

    while (v3 < v2);
  }

  if (v3 >= v2) {
    return 0LL;
  }
  int v6 = *v3;
  if (v6 == 39 || v6 == 34)
  {
    *(void *)(a1 + 16) = ++v3;
    *(_WORD *)(a1 + 24) = -1;
    if (v6 == 34) {
      int v7 = "";
    }
    else {
      int v7 = (const char *)L"'";
    }
  }

  else
  {
    int v7 = " ";
  }

  int v8 = v3;
  if (v3 < v2)
  {
    int v9 = *(unsigned __int16 *)v7;
    int v8 = v3;
    while (1)
    {
      int v10 = *v8;
      uint64_t v11 = v7;
      if (v9 == 32)
      {
        BOOL v12 = icu::PatternProps::isWhiteSpace((icu::PatternProps *)*v8);
        uint64_t v11 = v7;
        if (v12) {
          break;
        }
      }

      do
      {
        int v14 = *(unsigned __int16 *)v11;
        v11 += 2;
        int v13 = v14;
        if (v14) {
          BOOL v15 = v13 == v10;
        }
        else {
          BOOL v15 = 1;
        }
      }

      while (!v15);
      int v8 = *(unsigned __int16 **)(a1 + 16);
      if (v13 != v10)
      {
        *(void *)(a1 + 16) = ++v8;
      }

      goto LABEL_27;
    }

    int v8 = *(unsigned __int16 **)(a1 + 16);
LABEL_27:
    uint64_t v2 = *(unsigned __int16 **)(a1 + 8);
  }

  if (v8 == v2) {
    goto LABEL_41;
  }
  unsigned int v16 = *v8;
  if (v8 <= v3)
  {
    uint64_t result = 0LL;
  }

  else
  {
    *(_WORD *)(a1 + 24) = v16;
    *int v8 = 0;
    uint64_t result = v3;
  }

  if (v6 == 39 || v6 == 34)
  {
    if (v16 == v6 && v8 != v3)
    {
      *(void *)(a1 + 16) = v8 + 1;
      *(_WORD *)(a1 + 24) = -1;
      return result;
    }

    goto LABEL_41;
  }

  BOOL v18 = v16 > 0x3C;
  uint64_t v19 = (1LL << v16) & 0x1000008400000000LL;
  if (!v18 && v19 != 0)
  {
LABEL_41:
    sub_180958A24(a1);
    return 0LL;
  }

  return result;
}

uint64_t *sub_18095900C(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 > 0) {
    return 0LL;
  }
  unsigned int v5 = *(unsigned __int16 *)(a1 + 8);
  int v6 = (__int16)v5;
  unsigned int v7 = v5 >> 5;
  int v8 = v6 >= 0 ? v7 : *(_DWORD *)(a1 + 12);
  if (!v8) {
    return 0LL;
  }
  uint64_t result = (uint64_t *)uprv_malloc(2LL * v8);
  if (result)
  {
    uint64_t v11 = (char *)result;
    unsigned int v16 = (UChar *)result;
    icu::UnicodeString::extract(a1, &v16, v8, a3);
    if (*a3 <= 0) {
      *a3 = 0;
    }
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    WORD4(v13) = -1;
    uint64_t v14 = a2;
    BOOL v15 = a3;
    return sub_1809586E0((uint64_t)&v12, v11, v8);
  }

  else
  {
    *a3 = 7;
  }

  return result;
}

void *sub_1809590EC(void *a1)
{
  *a1 = off_189729C90;
  uint64_t v2 = (void **)a1[3];
  unint64_t v3 = *v2;
  if (!*v2) {
    goto LABEL_5;
  }
  uint64_t v4 = v2 + 1;
  do
  {
    uprv_free(v3);
    unsigned int v5 = *v4++;
    unint64_t v3 = v5;
  }

  while (v5);
  uint64_t v2 = (void **)a1[3];
  if (v2) {
LABEL_5:
  }
    uprv_free(v2);
  int v6 = (void *)a1[2];
  if (v6) {
    uprv_free(v6);
  }
  return a1;
}

void sub_180959154(void *a1)
{
  double v1 = sub_1809590EC(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_180959168(void **a1, int a2)
{
  if (a2 < 0) {
    return 0LL;
  }
  return *(void *)(*a1[3] + 8LL * a2);
}

uint64_t sub_1809591BC(void *a1, int a2)
{
  if (a2 < 0) {
    return 0LL;
  }
  return **(void **)(a1[3] + 8LL * (a2 + 1));
}

uint64_t sub_180959214(void *a1, int a2, int a3)
{
  if (a2 < 0) {
    return 0LL;
  }
  int v6 = (*(uint64_t (**)(void *))(*a1 + 40LL))(a1);
  uint64_t result = 0LL;
  if ((a3 & 0x80000000) == 0 && v6 > a2)
  {
    else {
      return *(void *)(*(void *)(a1[3] + 8LL * (a2 + 1)) + 8LL * (a3 + 1));
    }
  }

  return result;
}

icu::RuleBasedNumberFormat *icu::RuleBasedNumberFormat::RuleBasedNumberFormat( icu::RuleBasedNumberFormat *this, UChar **a2, const icu::UnicodeString *a3, const icu::Locale *a4, UParseError *a5, UErrorCode *a6)
{
  *(void *)uint64_t v12 = off_189729CF0;
  *(void *)(v12 + 384) = 0LL;
  *(_OWORD *)(v12 + 36icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *((_DWORD *)this + 94) = 0;
  icu::Locale::Locale((icu::Locale *)(v12 + 392), (uint64_t)a4);
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *((_DWORD *)this + 162) = 7;
  *((_BYTE *)this + 652) = 0;
  *((_OWORD *)this + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0u;
  *((void *)this + 84) = off_18971B688;
  *((_WORD *)this + 34icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
  *((_WORD *)this + 368) = 0;
  *((_BYTE *)this + 738) = 0;
  *((void *)this + 93) = 0LL;
  __int128 v13 = sub_18095900C((uint64_t)a3, (uint64_t)a5, (int *)a6);
  icu::RuleBasedNumberFormat::init(this, a2, v13, (uint64_t)a5, a6);
  return this;
}

icu::RuleBasedNumberFormat *icu::RuleBasedNumberFormat::init( icu::RuleBasedNumberFormat *result, UChar **a2, _DWORD *a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v83 = *MEMORY[0x1895F89C0];
  *(void *)(a4 + 64) = 0LL;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  if (*(int *)a5 <= 0)
  {
    uint64_t v8 = (uint64_t)result;
    icu::RuleBasedNumberFormat::initializeDecimalFormatSymbols(result, a5);
    icu::RuleBasedNumberFormat::initializeDefaultInfinityRule((icu::RuleBasedNumberFormat *)v8, a5);
    uint64_t result = (icu::RuleBasedNumberFormat *)icu::RuleBasedNumberFormat::initializeDefaultNaNRule( (icu::RuleBasedNumberFormat *)v8,  a5);
    if (*(int *)a5 <= 0)
    {
      if (a3) {
        ++a3[2];
      }
      *(void *)(v8 + 664) = a3;
      __int128 v81 = 0u;
      __int128 v82 = 0u;
      __int128 v79 = 0u;
      __int128 v80 = 0u;
      int v9 = icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v79, a2);
      int v10 = WORD4(v79) >> 5;
      if (SWORD4(v79) < 0) {
        int v10 = HIDWORD(v79);
      }
      if (!v10) {
        goto LABEL_128;
      }
      icu::RuleBasedNumberFormat::stripWhitespace(v9, (icu::UnicodeString *)&v79);
      if (SWORD4(v79) < 0)
      {
        int v12 = HIDWORD(v79);
        int v11 = HIDWORD(v79) & (SHIDWORD(v79) >> 31);
      }

      else
      {
        int v11 = 0;
        int v12 = WORD4(v79) >> 5;
      }

      uint64_t v13 = icu::UnicodeString::indexOf((uint64_t)&v79, (uint64_t)"%", 0, -1, v11, v12 - v11);
      if ((_DWORD)v13 == -1) {
        goto LABEL_60;
      }
      uint64_t v14 = v13;
      if ((_DWORD)v13)
      {
        unsigned int v17 = v13 - 1;
        unsigned int v15 = WORD4(v79) >> 5;
        int v18 = HIDWORD(v79);
        if ((SWORD4(v79) & 0x8000u) == 0) {
          unsigned int v19 = WORD4(v79) >> 5;
        }
        else {
          unsigned int v19 = HIDWORD(v79);
        }
        if (v19 <= v17) {
          goto LABEL_60;
        }
        unint64_t v20 = (unint64_t)&v79 | 0xA;
        if ((BYTE8(v79) & 2) == 0) {
          unint64_t v20 = *((void *)&v80 + 1);
        }
        if ((v13 & 0x80000000) != 0)
        {
          int v21 = 0;
          int v16 = 0;
          if ((WORD4(v79) & 0x8000) == 0) {
            goto LABEL_33;
          }
          goto LABEL_32;
        }

        if ((WORD4(v79) & 0x8000) == 0)
        {
LABEL_15:
          else {
            int v16 = v15;
          }
          goto LABEL_33;
        }
      }

      else
      {
        if ((SWORD4(v79) & 0x80000000) == 0)
        {
          unsigned int v15 = WORD4(v79) >> 5;
          goto LABEL_15;
        }

        int v18 = HIDWORD(v79);
      }

      else {
        int v21 = v18;
      }
LABEL_32:
      int v16 = v21;
      unsigned int v15 = v18;
LABEL_33:
      int v22 = icu::UnicodeString::indexOf((uint64_t)&v79, (uint64_t)L";%", 0, 2, v16, v15 - v16);
      if (v22 == -1)
      {
        int v23 = WORD4(v79) >> 5;
        if (SWORD4(v79) < 0) {
          int v23 = HIDWORD(v79);
        }
        int v22 = v23 - 1;
      }

      unsigned int v24 = u_strlen((const UChar *)"%") + v14;
      uint64_t v25 = 2LL * (int)v24;
      do
      {
        if ((SWORD4(v79) & 0x8000u) == 0) {
          unsigned int v26 = WORD4(v79) >> 5;
        }
        else {
          unsigned int v26 = HIDWORD(v79);
        }
        if (v26 <= v24)
        {
          uint64_t v28 = 0xFFFFLL;
        }

        else
        {
          if ((BYTE8(v79) & 2) != 0) {
            unint64_t v27 = (unint64_t)&v79 | 0xA;
          }
          else {
            unint64_t v27 = *((void *)&v80 + 1);
          }
          uint64_t v28 = *(unsigned __int16 *)(v27 + v25);
        }

        v25 += 2LL;
        ++v24;
      }

      while (icu::PatternProps::isWhiteSpace((icu::PatternProps *)v28));
      uint64_t v31 = icu::UMemory::operator new(v30, (icu::UMemory *)0x40, v29);
      if (!v31)
      {
        *(void *)(v8 + 656) = 0LL;
        goto LABEL_128;
      }

      __int128 v32 = v31;
      int v33 = v24 - 1;
      *uint64_t v31 = (uint64_t)off_18971B688;
      *((_WORD *)v31 + 4) = 2;
      *(void *)(v8 + 656) = v31;
      uint64_t v34 = v22 - v24 + 1;
      icu::UnicodeString::unBogus((uint64_t)v31);
      else {
        uint64_t v35 = *((unsigned __int16 *)v32 + 4) >> 5;
      }
      icu::UnicodeString::doReplace((icu::UnicodeString *)v32, 0LL, v35, (const icu::UnicodeString *)&v79, v33, v34);
      if ((int)v14 <= 0 && v22 - (_DWORD)v14 == 2147483646)
      {
        if ((BYTE8(v79) & 1) != 0) {
          unsigned int v36 = 2;
        }
        else {
          unsigned int v36 = BYTE8(v79) & 0x1F;
        }
        WORD4(v79) = v36;
        int32_t v37 = (_DWORD *)(v8 + 376);
        *(_DWORD *)(v8 + 376) = 0;
        goto LABEL_62;
      }

      icu::UnicodeString::doReplace((uint64_t)&v79, v14, (v22 - v14 + 1), 0LL, 0, 0LL);
LABEL_60:
      unsigned int v36 = SWORD4(v79);
      int32_t v37 = (_DWORD *)(v8 + 376);
      *(_DWORD *)(v8 + 376) = 0;
      if ((v36 & 0x80000000) != 0)
      {
        unsigned int v39 = HIDWORD(v79);
        int v38 = HIDWORD(v79) & (SHIDWORD(v79) >> 31);
LABEL_64:
        for (int i = icu::UnicodeString::indexOf((uint64_t)&v79, (uint64_t)L";%", 0, 2, v38, v39 - v38);
              i != -1;
              int i = icu::UnicodeString::indexOf((uint64_t)&v79, (uint64_t)L";%", 0, 2, v41, v42 - v41))
        {
          ++*v37;
          if (i >= -1)
          {
            int v43 = i + 1;
            if ((WORD4(v79) & 0x8000) != 0)
            {
              unsigned int v42 = HIDWORD(v79);
              if (SHIDWORD(v79) >= v43) {
                int v41 = i + 1;
              }
              else {
                int v41 = HIDWORD(v79);
              }
            }

            else
            {
              unsigned int v42 = WORD4(v79) >> 5;
              if (v42 >= v43) {
                int v41 = i + 1;
              }
              else {
                int v41 = WORD4(v79) >> 5;
              }
            }
          }

          else
          {
            int v41 = 0;
            if ((WORD4(v79) & 0x8000) != 0) {
              unsigned int v42 = HIDWORD(v79);
            }
            else {
              unsigned int v42 = WORD4(v79) >> 5;
            }
          }
        }

        int v44 = *(_DWORD *)(v8 + 376);
        *(_DWORD *)(v8 + 376) = v44 + 1;
        uint64_t v45 = uprv_malloc(8LL * (v44 + 2));
        *(void *)(v8 + 36icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v45;
        if (v45)
        {
          uint64_t v47 = *v37;
          uint64_t v48 = (int)v47;
          if ((v47 & 0x80000000) == 0)
          {
            uint64_t v49 = 0LL;
            uint64_t v50 = 8 * v47 + 8;
            do
            {
              *(void *)(*(void *)(v8 + 360) + v49) = 0LL;
              v49 += 8LL;
            }

            while (v50 != v49);
            if (!(_DWORD)v48)
            {
              uint64_t v67 = 1LL;
LABEL_129:
              *a5 = v67;
              return (icu::RuleBasedNumberFormat *)icu::UnicodeString::~UnicodeString( (void *)v67,  (icu::UnicodeString *)&v79);
            }
          }

          else {
            uint64_t v51 = (v48 << 6) | 0x10;
          }
          uint64_t v52 = (void *)icu::UMemory::operator new[]((icu::UMemory *)v51, v46);
          if (v52)
          {
            *uint64_t v52 = 64LL;
            v52[1] = v48;
            __int128 v53 = v52 + 2;
            do
            {
              *__int128 v53 = off_18971B688;
              *((_WORD *)v53 + 4) = 2;
              v53 += 8;
            }

            while (v53 != &v52[8 * v48 + 2]);
            *(void *)(v8 + 368) = v52 + 2;
            int v54 = sub_18095B4CC((uint64_t)&v79, (uint64_t)L";%", 2, 0);
            if (v54 == -1)
            {
              LODWORD(v57) = 0;
              int v58 = 0;
LABEL_112:
              int v68 = WORD4(v79) >> 5;
              if (SWORD4(v79) < 0) {
                int v68 = HIDWORD(v79);
              }
              sub_1808E0E9C( *(void *)(v8 + 368) + ((unint64_t)v57 << 6),  (const icu::UnicodeString *)&v79,  v58,  (v68 - v58));
              int v71 = icu::UMemory::operator new(v70, (icu::UMemory *)0xA8, v69);
              if (v71) {
                int v71 = (uint64_t *)sub_180913D3C((uint64_t)v71, v8, *(void *)(v8 + 368), v57, (int *)a5);
              }
              *(void *)(*(void *)(v8 + 360) + 8LL * v57) = v71;
              if (*(void *)(*(void *)(v8 + 360) + 8LL * v57))
              {
                icu::RuleBasedNumberFormat::initDefaultRuleSet((void *)v8);
                if (*(int *)(v8 + 376) >= 1)
                {
                  uint64_t v72 = 0LL;
                  uint64_t v73 = 0LL;
                  do
                  {
                    sub_180913D40(*(char **)(*(void *)(v8 + 360) + 8 * v73++), *(void *)(v8 + 368) + v72, a5);
                    v72 += 64LL;
                  }

                  while (v73 < *(int *)(v8 + 376));
                }

                if (a3 && (*(int (**)(_DWORD *))(*(void *)a3 + 24LL))(a3) >= 1)
                {
                  uint64_t v74 = 0LL;
                  while (1)
                  {
                    memset(v78, 0, sizeof(v78));
                    uint64_t v77 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a3 + 32LL))(a3, v74);
                    icu::UnicodeString::UnicodeString(v78, 1LL, &v77);
                    uint64_t RuleSet = icu::RuleBasedNumberFormat::findRuleSet( (icu::RuleBasedNumberFormat *)v8,  (const icu::UnicodeString *)v78,  a5);
                    if (!RuleSet) {
                      break;
                    }
                    if (!(_DWORD)v74) {
                      *(void *)(v8 + 384) = RuleSet;
                    }
                    icu::UnicodeString::~UnicodeString(v76, (icu::UnicodeString *)v78);
                    uint64_t v74 = (v74 + 1);
                  }

                  icu::UnicodeString::~UnicodeString(v76, (icu::UnicodeString *)v78);
                }

icu::RuleBasedNumberFormat *icu::RuleBasedNumberFormat::RuleBasedNumberFormat( icu::RuleBasedNumberFormat *this, UChar **a2, const icu::UnicodeString *a3, UParseError *a4, UErrorCode *a5)
{
  *(void *)uint64_t v10 = off_189729CF0;
  *(void *)(v10 + 384) = 0LL;
  int v11 = (icu::Locale *)(v10 + 392);
  *(_OWORD *)(v10 + 36icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *(_DWORD *)(v10 + 376) = 0;
  Default = icu::Locale::getDefault((icu::Locale *)v10);
  icu::Locale::Locale(v11, (uint64_t)Default);
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *((_DWORD *)this + 162) = 7;
  *((_BYTE *)this + 652) = 0;
  *((_OWORD *)this + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0u;
  *((void *)this + 84) = off_18971B688;
  *((_WORD *)this + 34icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
  *((_WORD *)this + 368) = 0;
  *((_BYTE *)this + 738) = 0;
  *((void *)this + 93) = 0LL;
  uint64_t v13 = sub_18095900C((uint64_t)a3, (uint64_t)a4, (int *)a5);
  icu::RuleBasedNumberFormat::init(this, a2, v13, (uint64_t)a4, a5);
  return this;
}

uint64_t icu::RuleBasedNumberFormat::RuleBasedNumberFormat( uint64_t a1, UChar **a2, _DWORD *a3, uint64_t a4, uint64_t a5, UErrorCode *a6)
{
  *(void *)uint64_t v12 = off_189729CF0;
  *(void *)(v12 + 384) = 0LL;
  *(_OWORD *)(v12 + 36icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *(_DWORD *)(a1 + 376) = 0;
  icu::Locale::Locale((icu::Locale *)(v12 + 392), a4);
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_DWORD *)(a1 + 648) = 7;
  *(_BYTE *)(a1 + 652) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(void *)(a1 + 672) = off_18971B688;
  *(_WORD *)(a1 + 68icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
  *(_WORD *)(a1 + 736) = 0;
  *(_BYTE *)(a1 + 738) = 0;
  *(void *)(a1 + 744) = 0LL;
  icu::RuleBasedNumberFormat::init((icu::RuleBasedNumberFormat *)a1, a2, a3, a5, a6);
  return a1;
}

icu::RuleBasedNumberFormat *icu::RuleBasedNumberFormat::RuleBasedNumberFormat( icu::RuleBasedNumberFormat *this, UChar **a2, UParseError *a3, UErrorCode *a4)
{
  *(void *)uint64_t v8 = off_189729CF0;
  *(void *)(v8 + 384) = 0LL;
  int v9 = (icu::Locale *)(v8 + 392);
  *(_OWORD *)(v8 + 36icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *(_DWORD *)(v8 + 376) = 0;
  Default = icu::Locale::getDefault((icu::Locale *)v8);
  icu::Locale::Locale(v9, (uint64_t)Default);
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *((_DWORD *)this + 162) = 7;
  *((_BYTE *)this + 652) = 0;
  *((_OWORD *)this + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0u;
  *((void *)this + 84) = off_18971B688;
  *((_WORD *)this + 34icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
  *((_WORD *)this + 368) = 0;
  *((_BYTE *)this + 738) = 0;
  *((void *)this + 93) = 0LL;
  icu::RuleBasedNumberFormat::init(this, a2, 0LL, (uint64_t)a3, a4);
  return this;
}

icu::RuleBasedNumberFormat *icu::RuleBasedNumberFormat::RuleBasedNumberFormat( icu::RuleBasedNumberFormat *this, UChar **a2, const icu::Locale *a3, UParseError *a4, UErrorCode *a5)
{
  *(void *)uint64_t v10 = off_189729CF0;
  *(void *)(v10 + 384) = 0LL;
  *(_OWORD *)(v10 + 36icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *((_DWORD *)this + 94) = 0;
  icu::Locale::Locale((icu::Locale *)(v10 + 392), (uint64_t)a3);
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *((_DWORD *)this + 162) = 7;
  *((_BYTE *)this + 652) = 0;
  *((_OWORD *)this + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0u;
  *((void *)this + 84) = off_18971B688;
  *((_WORD *)this + 34icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
  *((_WORD *)this + 368) = 0;
  *((_BYTE *)this + 738) = 0;
  *((void *)this + 93) = 0LL;
  icu::RuleBasedNumberFormat::init(this, a2, 0LL, (uint64_t)a4, a5);
  return this;
}

uint64_t icu::RuleBasedNumberFormat::RuleBasedNumberFormat(uint64_t a1, unsigned int a2, uint64_t a3, int *a4)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  icu::NumberFormat::NumberFormat((icu::NumberFormat *)a1);
  *(void *)uint64_t v8 = off_189729CF0;
  *(void *)(v8 + 384) = 0LL;
  *(_OWORD *)(v8 + 36icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *(_DWORD *)(a1 + 376) = 0;
  icu::Locale::Locale((icu::Locale *)(v8 + 392), a3);
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_DWORD *)(a1 + 648) = 7;
  *(_BYTE *)(a1 + 652) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(void *)(a1 + 672) = off_18971B688;
  *(_WORD *)(a1 + 68icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
  *(_WORD *)(a1 + 736) = 0;
  *(_BYTE *)(a1 + 738) = 0;
  *(void *)(a1 + 744) = 0LL;
  if (*a4 <= 0)
  {
    if (a2 >= 4)
    {
      *a4 = 1;
    }

    else
    {
      int v9 = off_189729ED8[a2];
      uint64_t v10 = ures_open("icudt74l-rbnf", *(char **)(a1 + 432), a4);
      uint64_t v11 = v10;
      if (*a4 <= 0)
      {
        LocaleByint Type = (const char *)ures_getLocaleByType(v10, 1, a4);
        uint64_t v13 = (const char *)ures_getLocaleByType(v11, 0, a4);
        icu::Format::setLocaleIDs((icu::Format *)a1, LocaleByType, v13);
        uint64_t v14 = ures_getByKeyWithFallback(v11, "RBNFRules", 0LL, (UErrorCode *)a4);
        if (*a4 >= 1) {
          ures_close(v11);
        }
        uint64_t v15 = ures_getByKeyWithFallback(v14, v9, 0LL, (UErrorCode *)a4);
        if (*a4 < 1)
        {
          uint64_t v16 = v15;
          __int128 v30 = 0u;
          uint64_t v33 = 0LL;
          __int128 v32 = 0u;
          __int128 v31 = 0u;
          unint64_t v29 = (UChar *)off_18971B688;
          LOWORD(v3icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
          while (ures_hasNext(v16))
          {
            uint64_t v28 = 0LL;
            __int128 v26 = 0u;
            __int128 v27 = 0u;
            __int128 v25 = 0u;
            unsigned int v24 = off_18971B688;
            LOWORD(v25) = 2;
            int v23 = 0;
            NextString = ures_getNextString(v16, &v23, 0LL, a4);
            if (*a4 <= 0)
            {
              int v22 = NextString;
              icu::UnicodeString::setTo((icu::UnicodeString *)&v24, 1, &v22, v23);
            }

            else
            {
              icu::UnicodeString::setToBogus((icu::UnicodeString *)&v24);
            }

            if ((v25 & 0x8000u) == 0LL) {
              uint64_t v18 = (unsigned __int16)v25 >> 5;
            }
            else {
              uint64_t v18 = DWORD1(v25);
            }
            icu::UnicodeString::doAppend((uint64_t)&v29, (const icu::UnicodeString *)&v24, 0, v18);
            icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v24);
          }

          icu::RuleBasedNumberFormat::init((icu::RuleBasedNumberFormat *)a1, &v29, 0LL, (uint64_t)&v24, (UErrorCode *)a4);
          ures_close(v16);
          ures_close(v14);
          icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v29);
        }

        else
        {
          ures_close(v14);
        }
      }

      ures_close(v11);
    }
  }

  return a1;
}

uint64_t icu::RuleBasedNumberFormat::RuleBasedNumberFormat( icu::RuleBasedNumberFormat *this, const icu::RuleBasedNumberFormat *a2)
{
  uint64_t v4 = icu::NumberFormat::NumberFormat(this, a2);
  *(void *)uint64_t v4 = off_189729CF0;
  *(void *)(v4 + 384) = 0LL;
  *(_OWORD *)(v4 + 36icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *((_DWORD *)this + 94) = 0;
  icu::Locale::Locale((icu::Locale *)(v4 + 392), (uint64_t)a2 + 392);
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *((_DWORD *)this + 162) = 7;
  *((_BYTE *)this + 652) = 0;
  *((_OWORD *)this + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0u;
  *((void *)this + 84) = off_18971B688;
  *((_WORD *)this + 34icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
  *((_WORD *)this + 368) = 0;
  *((_BYTE *)this + 738) = 0;
  *((void *)this + 93) = 0LL;
  return icu::RuleBasedNumberFormat::operator=((uint64_t)this, (uint64_t)a2);
}

uint64_t icu::RuleBasedNumberFormat::operator=(uint64_t a1, uint64_t a2)
{
  _BYTE v11[8] = *MEMORY[0x1895F89C0];
  if (a1 != a2)
  {
    icu::NumberFormat::operator=(a1, a2);
    int v10 = 0;
    icu::RuleBasedNumberFormat::dispose((icu::RuleBasedNumberFormat *)a1);
    icu::Locale::operator=((icu::Locale *)(a1 + 392), a2 + 392);
    *(_BYTE *)(a1 + 652) = *(_BYTE *)(a2 + 652);
    (*(void (**)(uint64_t, void))(*(void *)a1 + 408LL))(a1, *(void *)(a2 + 624));
    uint64_t v4 = *(_DWORD **)(a2 + 664);
    if (v4) {
      ++v4[2];
    }
    icu::RuleBasedNumberFormat::init( (icu::RuleBasedNumberFormat *)a1,  (UChar **)(a2 + 672),  v4,  (uint64_t)v9,  (UErrorCode *)&v10);
    (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a2 + 392LL))(v11, a2);
    (*(void (**)(uint64_t, void *, int *))(*(void *)a1 + 384LL))(a1, v11, &v10);
    icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v11);
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 272LL))(a2);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 280LL))(a1, v6);
    *(_WORD *)(a1 + 736) = *(_WORD *)(a2 + 736);
    *(_BYTE *)(a1 + 738) = *(_BYTE *)(a2 + 738);
    uint64_t v7 = *(void *)(a2 + 744);
    if (v7) {
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 32LL))(v7);
    }
    *(void *)(a1 + 744) = v7;
  }

  return a1;
}

_DWORD *icu::RuleBasedNumberFormat::dispose(icu::RuleBasedNumberFormat *this)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 45);
  if (v2)
  {
    uint64_t v3 = *v2;
    if (*v2)
    {
      uint64_t v4 = v2 + 1;
      do
      {
        unsigned int v5 = (void *)sub_180914278(v3);
        icu::UMemory::operator delete(v5);
        uint64_t v6 = *v4++;
        uint64_t v3 = v6;
      }

      while (v6);
      uint64_t v2 = (uint64_t *)*((void *)this + 45);
    }

    uprv_free(v2);
    *((void *)this + 45) = 0LL;
  }

  uint64_t v7 = (void *)*((void *)this + 46);
  if (v7)
  {
    uint64_t v8 = (char *)(v7 - 2);
    uint64_t v9 = *(v7 - 1);
    if (v9)
    {
      uint64_t v10 = v9 << 6;
      uint64_t v11 = (char *)(v7 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)&v11[v10]);
        v10 -= 64LL;
      }

      while (v10);
    }

    icu::UMemory::operator delete[](v8);
    *((void *)this + 46) = 0LL;
  }

  uint64_t v12 = (icu::RuleBasedCollator *)*((void *)this + 77);
  if (v12)
  {
    icu::RuleBasedCollator::~RuleBasedCollator(v12);
    icu::UMemory::operator delete(v13);
  }

  *((void *)this + 77) = 0LL;
  uint64_t v14 = *((void *)this + 78);
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
  }
  *((void *)this + 78) = 0LL;
  uint64_t v15 = (void *)*((void *)this + 79);
  if (v15)
  {
    uint64_t v16 = sub_180915860(v15);
    icu::UMemory::operator delete(v16);
  }

  *((void *)this + 79) = 0LL;
  unsigned int v17 = (void *)*((void *)this + 80);
  if (v17)
  {
    uint64_t v18 = sub_180915860(v17);
    icu::UMemory::operator delete(v18);
  }

  *((void *)this + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
  uint64_t v19 = *((void *)this + 82);
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }
  *((void *)this + 82) = 0LL;
  uint64_t v20 = *((void *)this + 93);
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
  }
  *((void *)this + 93) = 0LL;
  uint64_t result = (_DWORD *)*((void *)this + 83);
  if (result)
  {
    int v22 = result[2];
    if (v22)
    {
      int v23 = v22 - 1;
      result[2] = v23;
      if (!v23) {
        uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8LL))(result);
      }
    }

    *((void *)this + 83) = 0LL;
  }

  return result;
}

uint64_t icu::RuleBasedNumberFormat::getDecimalFormatSymbols(icu::RuleBasedNumberFormat *this)
{
  return *((void *)this + 78);
}

void icu::RuleBasedNumberFormat::~RuleBasedNumberFormat(icu::RuleBasedNumberFormat *this)
{
  *(void *)this = off_189729CF0;
  icu::RuleBasedNumberFormat::dispose(this);
  icu::UnicodeString::~UnicodeString(v2, (icu::RuleBasedNumberFormat *)((char *)this + 672));
  icu::Locale::~Locale((icu::RuleBasedNumberFormat *)((char *)this + 392));
  icu::NumberFormat::~NumberFormat(this);
}

{
  void *v1;
  icu::RuleBasedNumberFormat::~RuleBasedNumberFormat(this);
  icu::UMemory::operator delete(v1);
}

icu::RuleBasedNumberFormat *icu::RuleBasedNumberFormat::clone@<X0>( icu::RuleBasedNumberFormat *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::RuleBasedNumberFormat *)icu::UMemory::operator new(a3, (icu::UMemory *)0x2F0, a2);
  if (result) {
    return (icu::RuleBasedNumberFormat *)icu::RuleBasedNumberFormat::RuleBasedNumberFormat(result, this);
  }
  return result;
}

uint64_t icu::RuleBasedNumberFormat::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_1807F874C(*(void *)(*(void *)a1 - 8LL), *(void *)(*(void *)a2 - 8LL));
  if (!(_DWORD)result) {
    return result;
  }
  uint64_t result = icu::Locale::operator==(a1 + 392, a2 + 392);
  if (!(_DWORD)result) {
    return result;
  }
  uint64_t v5 = *(void *)(a1 + 664);
  uint64_t v6 = *(void *)(a2 + 664);
  if (!v5)
  {
    if (!v6) {
      goto LABEL_12;
    }
    return 0LL;
  }

  if (!v6) {
    return 0LL;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16LL))(v5);
  if (!(_DWORD)result) {
    return result;
  }
LABEL_12:
  uint64_t v7 = *(uint64_t **)(a1 + 360);
  uint64_t v8 = *(uint64_t **)(a2 + 360);
  uint64_t result = ((unint64_t)v7 | (unint64_t)v8) == 0;
  if (v7 && v8)
  {
    uint64_t v9 = *v7;
    if (*v7)
    {
      while (*v8)
      {
        if (sub_18091427C(v9, *v8))
        {
          uint64_t v10 = v7[1];
          ++v7;
          uint64_t v9 = v10;
          ++v8;
          if (v10) {
            continue;
          }
        }

        goto LABEL_18;
      }

      return v9 == 0;
    }

uint64_t icu::RuleBasedNumberFormat::getRules@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 8) = 0u;
  *(void *)(a2 + 56) = 0LL;
  *(_OWORD *)(a2 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)a2 = off_18971B688;
  *(_WORD *)(a2 + 8) = 2;
  uint64_t v3 = *(uint64_t **)(this + 360);
  if (v3)
  {
    this = *v3;
    if (*v3)
    {
      uint64_t v4 = v3 + 1;
      do
      {
        sub_180914E28(this, (icu::UnicodeString *)a2);
        uint64_t v5 = *v4++;
        this = v5;
      }

      while (v5);
    }
  }

  return this;
}

icu::UnicodeString *icu::RuleBasedNumberFormat::getRuleSetName@<X0>( icu::RuleBasedNumberFormat *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result = (icu::UnicodeString *)*((void *)this + 83);
  if (result)
  {
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    uint64_t v9 = (*(uint64_t (**)(icu::UnicodeString *))(*(void *)result + 32LL))(result);
    return (icu::UnicodeString *)icu::UnicodeString::UnicodeString(a3, 1LL, &v9);
  }

  uint64_t v6 = (uint64_t *)*((void *)this + 45);
  if (v6)
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(void *)(a3 + 56) = 0LL;
    *(_OWORD *)(a3 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(void *)a3 = off_18971B688;
    *(_WORD *)(a3 + 8) = 2;
    uint64_t v7 = *v6;
    if (*v6)
    {
      ++v6;
      do
      {
        if (*(_BYTE *)(v7 + 161))
        {
          if (!a2) {
            return icu::UnicodeString::copyFrom((UChar **)a3, (UChar **)(v7 + 8), 0);
          }
          --a2;
        }

        uint64_t v8 = *v6++;
        uint64_t v7 = v8;
      }

      while (v8);
    }

    uint64_t result = (icu::UnicodeString *)icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)a3);
  }

  *(_OWORD *)(a3 + 8) = 0u;
  *(void *)(a3 + 56) = 0LL;
  *(_OWORD *)(a3 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(void *)a3 = off_18971B688;
  *(_WORD *)(a3 + 8) = 2;
  return result;
}

uint64_t icu::RuleBasedNumberFormat::getNumberOfRuleSetNames(icu::RuleBasedNumberFormat *this)
{
  uint64_t v2 = *((void *)this + 83);
  if (v2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  }
  uint64_t v4 = (uint64_t *)*((void *)this + 45);
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = *v4;
  if (!*v4) {
    return 0LL;
  }
  LODWORD(result) = 0;
  uint64_t v6 = v4 + 1;
  do
  {
    if (*(_BYTE *)(v5 + 161)) {
      uint64_t result = (result + 1);
    }
    else {
      uint64_t result = result;
    }
    uint64_t v7 = *v6++;
    uint64_t v5 = v7;
  }

  while (v7);
  return result;
}

uint64_t icu::RuleBasedNumberFormat::getNumberOfRuleSetDisplayNameLocales(icu::RuleBasedNumberFormat *this)
{
  uint64_t result = *((void *)this + 83);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40LL))(result);
  }
  return result;
}

uint64_t *icu::RuleBasedNumberFormat::getRuleSetDisplayNameLocale@<X0>( icu::RuleBasedNumberFormat *this@<X0>, UErrorCode *a2@<X2>, uint64_t a3@<X1>, icu::Locale *a4@<X8>)
{
  int v23 = (uint64_t *)*MEMORY[0x1895F89C0];
  if ((a3 & 0x80000000) != 0
    || (uint64_t v9 = *((void *)this + 83)) == 0
    || (*(int (**)(uint64_t))(*(void *)v9 + 40LL))(v9) <= (int)a3)
  {
    *a2 = U_ILLEGAL_ARGUMENT_ERROR;
    *(_OWORD *)a4 = 0u;
    *((_OWORD *)a4 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0u;
    *((_OWORD *)a4 + 2) = 0u;
    *((_OWORD *)a4 + 3) = 0u;
    *((_OWORD *)a4 + 4) = 0u;
    *((_OWORD *)a4 + 5) = 0u;
    *((_OWORD *)a4 + 6) = 0u;
    *((_OWORD *)a4 + 7) = 0u;
    *((_OWORD *)a4 + 8) = 0u;
    *((_OWORD *)a4 + 9) = 0u;
    *((_OWORD *)a4 + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
    *((_OWORD *)a4 + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0u;
    *((_OWORD *)a4 + 12) = 0u;
    *((_OWORD *)a4 + 13) = 0u;
    return (uint64_t *)icu::Locale::Locale(a4);
  }

  memset(v22, 0, sizeof(v22));
  uint64_t v20 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 83) + 48LL))(*((void *)this + 83), a3);
  icu::UnicodeString::UnicodeString(v22, 1LL, &v20);
  memset(v21, 0, sizeof(v21));
  __int16 v10 = WORD4(v22[0]);
  unsigned int v11 = WORD4(v22[0]) >> 5;
  unsigned int v12 = HIDWORD(v22[0]);
  if ((SWORD4(v22[0]) & 0x8000u) == 0) {
    int v13 = WORD4(v22[0]) >> 5;
  }
  else {
    int v13 = HIDWORD(v22[0]);
  }
  int v14 = v13 + 1;
  if (v13 < 64)
  {
    uint64_t v16 = (char *)v21;
    goto LABEL_14;
  }

  uint64_t v15 = (char *)uprv_malloc((v13 + 1));
  if (v15)
  {
    uint64_t v16 = v15;
    __int16 v10 = WORD4(v22[0]);
    unsigned int v12 = HIDWORD(v22[0]);
    unsigned int v11 = WORD4(v22[0]) >> 5;
LABEL_14:
    if (v10 >= 0) {
      uint64_t v17 = v11;
    }
    else {
      uint64_t v17 = v12;
    }
    icu::UnicodeString::extract((uint64_t)v22, 0, v17, v16, v14);
    *(_OWORD *)a4 = 0u;
    *((_OWORD *)a4 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0u;
    *((_OWORD *)a4 + 2) = 0u;
    *((_OWORD *)a4 + 3) = 0u;
    *((_OWORD *)a4 + 4) = 0u;
    *((_OWORD *)a4 + 5) = 0u;
    *((_OWORD *)a4 + 6) = 0u;
    *((_OWORD *)a4 + 7) = 0u;
    *((_OWORD *)a4 + 8) = 0u;
    *((_OWORD *)a4 + 9) = 0u;
    *((_OWORD *)a4 + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
    *((_OWORD *)a4 + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0u;
    *((_OWORD *)a4 + 12) = 0u;
    *((_OWORD *)a4 + 13) = 0u;
    icu::Locale::Locale(v18, a4, v16, 0LL, 0LL, 0LL);
    return (uint64_t *)icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v22);
  }

  *a2 = U_MEMORY_ALLOCATION_ERROR;
  icu::Locale::Locale((uint64_t *)7, a4, "", 0LL, 0LL, 0LL);
  return (uint64_t *)icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v22);
}

void icu::RuleBasedNumberFormat::getRuleSetDisplayName( icu::RuleBasedNumberFormat *this@<X0>, const icu::Locale *a2@<X2>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  if ((a3 & 0x80000000) != 0
    || (uint64_t v6 = *((void *)this + 83)) == 0
    || (*(int (**)(uint64_t))(*(void *)v6 + 24LL))(v6) <= (int)a3)
  {
    *(_OWORD *)(a4 + 8) = 0u;
    *(void *)(a4 + 56) = 0LL;
    *(_OWORD *)(a4 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(void *)a4 = off_18971B688;
    *(_WORD *)(a4 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a4);
  }

  else
  {
    memset(v26, 0, sizeof(v26));
    Baseuint64_t Name = icu::Locale::getBaseName(a2);
    icu::UnicodeString::UnicodeString(v26, BaseName, 0xFFFFFFFFLL, 0LL);
    if ((SWORD4(v26[0]) & 0x8000u) == 0) {
      LODWORD(v1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = WORD4(v26[0]) >> 5;
    }
    else {
      LODWORD(v1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = HIDWORD(v26[0]);
    }
    uint64_t Buffer = icu::UnicodeString::getBuffer((icu::UnicodeString *)v26, (int)v10 + 1);
    if ((v10 & 0x80000000) != 0)
    {
LABEL_22:
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)(a4 + 48) = 0u;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      uint64_t v24 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 83) + 32LL))(*((void *)this + 83), a3);
      icu::UnicodeString::UnicodeString(a4, 1LL, &v24);
      uint64_t v22 = v24;
      int v21 = &v22;
    }

    else
    {
      uint64_t v12 = Buffer;
      uint64_t v13 = Buffer - 2;
      while (1)
      {
        *(_WORD *)(v12 + 2LL * v1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
        uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 83) + 64LL))( *((void *)this + 83),  v12);
        if ((v14 & 0x80000000) == 0) {
          break;
        }
        if ((_DWORD)v10) {
          uint64_t v15 = 0LL;
        }
        else {
          uint64_t v15 = 0xFFFFFFFFLL;
        }
        do
        {
          BOOL v16 = (_DWORD)v10 != 0;
          uint64_t v10 = (v10 - 1);
          if ((_DWORD)v10 == 0 || !v16)
          {
            uint64_t v17 = v15;
            goto LABEL_17;
          }
        }

        while (*(_WORD *)(v12 + 2LL * v10) != 95);
        uint64_t v17 = v10;
        LODWORD(v15) = v10;
LABEL_17:
        LODWORD(v1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v15 & ((int)v15 >> 31);
        uint64_t v18 = (unsigned __int16 *)(v13 + 2 * v17);
        while (1)
        {
          BOOL v19 = __OFSUB__((_DWORD)v17, 1);
          LODWORD(v17) = v17 - 1;
          int v20 = *v18--;
          if (v20 != 95)
          {
            LODWORD(v1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v17 + 1;
            break;
          }
        }

        if ((v10 & 0x80000000) != 0) {
          goto LABEL_22;
        }
      }

      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)(a4 + 48) = 0u;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      uint64_t v25 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 83) + 56LL))( *((void *)this + 83),  v14,  a3);
      icu::UnicodeString::UnicodeString(a4, 1LL, &v25);
      uint64_t v23 = v25;
      int v21 = &v23;
    }

    icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v26);
  }

void icu::RuleBasedNumberFormat::getRuleSetDisplayName( icu::RuleBasedNumberFormat *this@<X0>, UChar **a2@<X1>, const icu::Locale *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  if (*((void *)this + 83))
  {
    memset(v10, 0, sizeof(v10));
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v10, a2);
    uint64_t v6 = *((void *)this + 83);
    Terminateduint64_t Buffer = icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)v10);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 72LL))(v6, TerminatedBuffer);
    (*(void (**)(icu::RuleBasedNumberFormat *, uint64_t, const icu::Locale *))(*(void *)this + 344LL))( this,  v8,  a3);
    icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v10);
  }

  else
  {
    *(_OWORD *)(a4 + 8) = 0u;
    *(void *)(a4 + 56) = 0LL;
    *(_OWORD *)(a4 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(void *)a4 = off_18971B688;
    *(_WORD *)(a4 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a4);
  }

uint64_t icu::RuleBasedNumberFormat::findRuleSet( icu::RuleBasedNumberFormat *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t v5 = (uint64_t *)*((void *)this + 45);
  if (!v5) {
    return 0LL;
  }
  uint64_t v3 = *v5;
  if (*v5)
  {
    uint64_t v8 = v5 + 1;
    while (!sub_18095AE30(v3, (uint64_t)a2))
    {
      uint64_t v9 = *v8++;
      uint64_t v3 = v9;
      if (!v9) {
        goto LABEL_9;
      }
    }
  }

  else
  {
LABEL_9:
    uint64_t v3 = 0LL;
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
  }

  return v3;
}

BOOL sub_18095AE30(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 16);
  if ((v2 & 1) != 0) {
    return *(_WORD *)(a2 + 8) & 1;
  }
  if ((v2 & 0x8000) != 0) {
    int v3 = *(_DWORD *)(a1 + 20);
  }
  else {
    int v3 = v2 >> 5;
  }
  uint64_t v4 = 0LL;
  unsigned int v5 = *(unsigned __int16 *)(a2 + 8);
  if ((v5 & 0x8000u) == 0) {
    unsigned int v6 = v5 >> 5;
  }
  else {
    unsigned int v6 = *(_DWORD *)(a2 + 12);
  }
  if ((v5 & 1) == 0 && v3 == v6) {
    return icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 8), (const icu::UnicodeString *)a2, v3);
  }
  return v4;
}

icu::UnicodeString *icu::RuleBasedNumberFormat::format( char **this, const icu::number::impl::DecimalQuantity *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (*(int *)a5 <= 0)
  {
    uint64_t v20 = 0LL;
    memset(v19, 0, sizeof(v19));
    icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v19, (uint64_t)a2);
    if (icu::number::impl::DecimalQuantity::fitsInLong((icu::number::impl::DecimalQuantity *)v19, 0))
    {
      uint64_t v10 = icu::number::impl::DecimalQuantity::toLong(a2, 0);
      (*((void (**)(char **, uint64_t, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *))*this + 15))( this,  v10,  a3,  a4,  a5);
    }

    else
    {
      icu::number::impl::DecimalQuantity::roundToMagnitude((uint64_t)v19, 0, 4u, (int *)a5);
      if (icu::number::impl::DecimalQuantity::fitsInLong((icu::number::impl::DecimalQuantity *)v19, 0))
      {
        double v11 = icu::number::impl::DecimalQuantity::toDouble(a2);
        (*((void (**)(char **, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *, double))*this + 9))( this,  a3,  a4,  a5,  v11);
      }

      else
      {
        uint64_t Instance = icu::NumberFormat::createInstance(this + 49, 1u, a5);
        uint64_t v13 = Instance;
        if (Instance || *(int *)a5 > 0)
        {
          if (Instance)
          {
            memset(v21, 0, sizeof(v21));
            icu::Formattable::Formattable((icu::Formattable *)v21);
            BOOL v16 = (icu::number::impl::DecimalQuantity *)icu::UMemory::operator new(v15, (icu::UMemory *)0x48, v14);
            if (v16)
            {
              uint64_t v17 = v16;
              icu::number::impl::DecimalQuantity::DecimalQuantity(v16, (uint64_t)a2);
              icu::Formattable::adoptDecimalQuantity((icu::Formattable *)v21, v17);
              (*(void (**)(icu::DecimalFormat *, _OWORD *, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *))(*(void *)v13 + 40LL))( v13,  v21,  a3,  a4,  a5);
            }

            else if (*(int *)a5 <= 0)
            {
              *a5 = U_MEMORY_ALLOCATION_ERROR;
            }

            icu::Formattable::~Formattable((icu::Formattable *)v21);
            (*(void (**)(icu::DecimalFormat *))(*(void *)v13 + 8LL))(v13);
          }
        }

        else
        {
          *a5 = U_MEMORY_ALLOCATION_ERROR;
        }
      }
    }

    icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v19);
  }

  return a3;
}

uint64_t icu::RuleBasedNumberFormat::format( icu::RuleBasedNumberFormat *this, int a2, icu::UnicodeString *a3, icu::FieldPosition *a4)
{
  return (*(uint64_t (**)(icu::RuleBasedNumberFormat *, void, icu::UnicodeString *, icu::FieldPosition *))(*(void *)this + 112LL))( this,  a2,  a3,  a4);
}

icu::UnicodeString *icu::RuleBasedNumberFormat::format( icu::RuleBasedNumberFormat *this, unint64_t a2, icu::UnicodeString *a3, icu::FieldPosition *a4)
{
  unsigned int v5 = (_DWORD *)*((void *)this + 48);
  if (v5)
  {
    int v7 = 0;
    icu::RuleBasedNumberFormat::format((uint64_t)this, a2, v5, (uint64_t)a3, (UErrorCode *)&v7);
  }

  return a3;
}

uint64_t icu::RuleBasedNumberFormat::format( uint64_t a1, unint64_t a2, _DWORD *a3, uint64_t a4, UErrorCode *this)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (*(int *)this <= 0)
  {
    if (a2 == 0x8000000000000000LL)
    {
      uint64_t Instance = icu::NumberFormat::createInstance((char **)(a1 + 392), 1u, this);
      if (Instance)
      {
        uint64_t v9 = Instance;
        memset(v20, 0, sizeof(v20));
        icu::Formattable::Formattable((icu::Formattable *)v20);
        void v19[2] = 0LL;
        v19[0] = off_189723AC8;
        v19[1] = 0xFFFFFFFFLL;
        double v11 = (icu::number::impl::DecimalQuantity *)icu::UMemory::operator new( (uint64_t *)off_189723AC8,  (icu::UMemory *)0x48,  v10);
        if (v11)
        {
          uint64_t v12 = v11;
          uint64_t v13 = (void **)icu::number::impl::DecimalQuantity::DecimalQuantity(v11);
          icu::number::impl::DecimalQuantity::setToLong(v13, 0x8000000000000000LL);
          icu::Formattable::adoptDecimalQuantity((icu::Formattable *)v20, v12);
          (*(void (**)(icu::DecimalFormat *, _OWORD *, uint64_t, void *, UErrorCode *))(*(void *)v9 + 40LL))( v9,  v20,  a4,  v19,  this);
        }

        else
        {
          *this = U_MEMORY_ALLOCATION_ERROR;
        }

        (*(void (**)(icu::DecimalFormat *))(*(void *)v9 + 8LL))(v9);
        icu::FieldPosition::~FieldPosition((icu::FieldPosition *)v19);
        icu::Formattable::~Formattable((icu::Formattable *)v20);
      }
    }

    else
    {
      unsigned int v14 = *(unsigned __int16 *)(a4 + 8);
      int v15 = (__int16)v14;
      unsigned int v16 = v14 >> 5;
      if (v15 >= 0) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = *(unsigned int *)(a4 + 12);
      }
      sub_1809144A8(a3, a2, (icu::UnicodeString *)a4, v17, 0, this);
      icu::RuleBasedNumberFormat::adjustForCapitalizationContext( (icu::BreakIterator **)a1,  v17,  (icu::UnicodeString *)a4,  this);
    }
  }

  return a4;
}

icu::UnicodeString *icu::RuleBasedNumberFormat::format( icu::RuleBasedNumberFormat *this, double a2, icu::UnicodeString *a3, icu::FieldPosition *a4)
{
  int v7 = 0;
  unsigned int v5 = (_DWORD *)*((void *)this + 48);
  if (v5) {
    icu::RuleBasedNumberFormat::format(this, v5, (uint64_t)a3, &v7, a2);
  }
  return a3;
}

icu::UnicodeString *icu::RuleBasedNumberFormat::format( icu::NumberFormat *a1, _DWORD *a2, uint64_t a3, int *a4, double a5)
{
  unsigned int v10 = *(unsigned __int16 *)(a3 + 8);
  int v11 = *(_DWORD *)(a3 + 12);
  if ((*(unsigned int (**)(icu::NumberFormat *))(*(void *)a1 + 272LL))(a1) != 7
    && !uprv_isNaN(a5)
    && !uprv_isInfinite(a5))
  {
    uint64_t v21 = 0LL;
    memset(v20, 0, sizeof(v20));
    icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v20);
    icu::number::impl::DecimalQuantity::setToDouble((void **)v20, a5);
    int v12 = -(int)icu::NumberFormat::getMaximumFractionDigits(a1);
    unsigned int v13 = (*(uint64_t (**)(icu::NumberFormat *))(*(void *)a1 + 272LL))(a1);
    icu::number::impl::DecimalQuantity::roundToMagnitude((uint64_t)v20, v12, v13, a4);
    a5 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v20);
    icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v20);
  }

  if ((v10 & 0x8000u) == 0) {
    int v14 = v10 >> 5;
  }
  else {
    int v14 = v11;
  }
  unsigned int v15 = *(unsigned __int16 *)(a3 + 8);
  int v16 = (__int16)v15;
  unsigned int v17 = v15 >> 5;
  if (v16 >= 0) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = *(unsigned int *)(a3 + 12);
  }
  sub_180914608(a2, (icu::UnicodeString *)a3, v18, 0, (UErrorCode *)a4, a5);
  return icu::RuleBasedNumberFormat::adjustForCapitalizationContext( (icu::BreakIterator **)a1,  v14,  (icu::UnicodeString *)a3,  (UErrorCode *)a4);
}

uint64_t icu::RuleBasedNumberFormat::format( icu::RuleBasedNumberFormat *this, int a2, const icu::UnicodeString *a3, icu::UnicodeString *a4, icu::FieldPosition *a5, UErrorCode *a6)
{
  return (*(uint64_t (**)(icu::RuleBasedNumberFormat *, void, const icu::UnicodeString *, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *))(*(void *)this + 368LL))( this,  a2,  a3,  a4,  a5,  a6);
}

icu::UnicodeString *icu::RuleBasedNumberFormat::format( icu::RuleBasedNumberFormat *this, unint64_t a2, const icu::UnicodeString *a3, icu::UnicodeString *a4, icu::FieldPosition *a5, UErrorCode *a6)
{
  if (*(int *)a6 <= 0)
  {
    if (*((__int16 *)a3 + 4) < 0)
    {
      int v13 = *((_DWORD *)a3 + 3);
      int v12 = v13 & (v13 >> 31);
    }

    else
    {
      int v12 = 0;
      int v13 = *((unsigned __int16 *)a3 + 4) >> 5;
    }

    if (icu::UnicodeString::indexOf((uint64_t)a3, (uint64_t)L"%%", 0, 2, v12, v13 - v12))
    {
      uint64_t RuleSet = (_DWORD *)icu::RuleBasedNumberFormat::findRuleSet(this, a3, a6);
      if (RuleSet) {
        icu::RuleBasedNumberFormat::format((uint64_t)this, a2, RuleSet, (uint64_t)a4, a6);
      }
    }

    else
    {
      *a6 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }

  return a4;
}

uint64_t sub_18095B4CC(uint64_t a1, uint64_t a2, int32_t a3, int a4)
{
  unsigned int v4 = *(unsigned __int16 *)(a1 + 8);
  if ((a4 & 0x80000000) == 0)
  {
    if ((v4 & 0x8000) == 0)
    {
      if (v4 >> 5 >= a4) {
        int v5 = a4;
      }
      else {
        int v5 = v4 >> 5;
      }
      goto LABEL_7;
    }

    if (*(_DWORD *)(a1 + 12) >= a4) {
      int v6 = a4;
    }
    else {
      int v6 = *(_DWORD *)(a1 + 12);
    }
LABEL_11:
    unsigned int v7 = *(_DWORD *)(a1 + 12);
    int v5 = v6;
    return icu::UnicodeString::indexOf(a1, a2, 0, a3, v5, v7 - v5);
  }

  int v5 = 0;
  int v6 = 0;
  if ((v4 & 0x8000) != 0) {
    goto LABEL_11;
  }
LABEL_7:
  unsigned int v7 = v4 >> 5;
  return icu::UnicodeString::indexOf(a1, a2, 0, a3, v5, v7 - v5);
}

icu::UnicodeString *icu::RuleBasedNumberFormat::format( icu::RuleBasedNumberFormat *this, double a2, const icu::UnicodeString *a3, icu::UnicodeString *a4, icu::FieldPosition *a5, UErrorCode *a6)
{
  if (*(int *)a6 <= 0)
  {
    if (*((__int16 *)a3 + 4) < 0)
    {
      int v13 = *((_DWORD *)a3 + 3);
      int v12 = v13 & (v13 >> 31);
    }

    else
    {
      int v12 = 0;
      int v13 = *((unsigned __int16 *)a3 + 4) >> 5;
    }

    if (icu::UnicodeString::indexOf((uint64_t)a3, (uint64_t)L"%%", 0, 2, v12, v13 - v12))
    {
      uint64_t RuleSet = (_DWORD *)icu::RuleBasedNumberFormat::findRuleSet(this, a3, a6);
      if (RuleSet) {
        icu::RuleBasedNumberFormat::format(this, RuleSet, (uint64_t)a4, (int *)a6, a2);
      }
    }

    else
    {
      *a6 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }

  return a4;
}

icu::UnicodeString *icu::RuleBasedNumberFormat::adjustForCapitalizationContext( icu::BreakIterator **this, int a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  int v8 = (*((uint64_t (**)(icu::BreakIterator **, uint64_t, UErrorCode *))*this + 33))(this, 1LL, a4);
  if (!a2)
  {
    int v9 = v8;
    if (v8 != 256)
    {
      unsigned int v10 = *((unsigned __int16 *)a3 + 4);
      int v11 = (__int16)v10;
      LODWORD(v12) = v10 >> 5;
      int v12 = v11 >= 0 ? (uint64_t *)v12 : (uint64_t *)*((unsigned int *)a3 + 3);
      if ((int)v12 >= 1)
      {
        UChar32 v13 = icu::UnicodeString::char32At(v12, a3, 0);
        if (u_islower(v13))
        {
          if (*(int *)a4 <= 0)
          {
            int v14 = this[93];
            if (v14)
            {
              if (v9 != 258)
              {
                if (v9 == 260)
                {
                  if (!*((_BYTE *)this + 738)) {
                    return a3;
                  }
                }

                else if (v9 != 259 || !*((_BYTE *)this + 737))
                {
                  return a3;
                }
              }

              icu::UnicodeString::toTitle((const UChar **)a3, v14, (const icu::Locale *)(this + 49), 768LL);
            }
          }
        }
      }
    }
  }

  return a3;
}

char *icu::RuleBasedNumberFormat::parse( char *this, const icu::UnicodeString *a2, icu::Formattable *a3, icu::ParsePosition *a4)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  if (!*((void *)this + 45))
  {
    *((_DWORD *)a4 + 3) = 0;
    return this;
  }

  int v6 = this;
  memset(v29, 0, sizeof(v29));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v29, a2, *((_DWORD *)a4 + 2));
  v26[0] = off_18970F400;
  v26[1] = 0xFFFFFFFF00000000LL;
  uint64_t v24 = off_18970F400;
  unint64_t v25 = 0xFFFFFFFF00000000LL;
  memset(v28, 0, sizeof(v28));
  icu::Formattable::Formattable((icu::Formattable *)v28);
  unsigned int v7 = (uint64_t *)*((void *)v6 + 45);
  uint64_t v8 = *v7;
  if (!*v7)
  {
    int v15 = *((_DWORD *)a4 + 2);
    int v11 = -1;
    goto LABEL_17;
  }

  int v9 = 0;
  unsigned int v10 = v7 + 1;
  int v11 = -1;
  while (1)
  {
    if (!*(_BYTE *)(v8 + 161) || !*(_BYTE *)(v8 + 162)) {
      goto LABEL_12;
    }
    uint64_t v22 = off_18970F400;
    unint64_t v23 = 0xFFFFFFFF00000000LL;
    memset(v27, 0, sizeof(v27));
    icu::Formattable::Formattable((icu::Formattable *)v27);
    sub_1809149A0(v8, (uint64_t)v29, (uint64_t)&v22, 0LL, (icu::Formattable *)v27, v6[652], 1.7592186e13);
    int v12 = v23;
LABEL_11:
    icu::Formattable::~Formattable((icu::Formattable *)v27);
    icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v22);
LABEL_12:
    uint64_t v14 = *v10++;
    uint64_t v8 = v14;
    if (!v14) {
      goto LABEL_13;
    }
  }

  int v11 = HIDWORD(v23);
  unint64_t v25 = v23;
  icu::Formattable::operator=((uint64_t)v28, (uint64_t)v27);
  int v13 = WORD4(v29[0]) >> 5;
  if (SWORD4(v29[0]) < 0) {
    int v13 = HIDWORD(v29[0]);
  }
  if (v12 != v13)
  {
    int v9 = v12;
    goto LABEL_11;
  }

  icu::Formattable::~Formattable((icu::Formattable *)v27);
  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v22);
  int v9 = v12;
LABEL_13:
  int v15 = *((_DWORD *)a4 + 2);
  *((_DWORD *)a4 + 2) = v9 + v15;
  if (v9 <= 0)
  {
LABEL_17:
    int v16 = (v11 & ~(v11 >> 31)) + v15;
    goto LABEL_18;
  }

  int v16 = -1;
LABEL_18:
  *((_DWORD *)a4 + 3) = v16;
  icu::Formattable::operator=((uint64_t)a3, (uint64_t)v28);
  if (icu::Formattable::getType(a3) == 1)
  {
    double v17 = *((double *)a3 + 1);
    if (!uprv_isNaN(v17))
    {
      double v18 = uprv_trunc(v17);
      if (v17 <= 2147483650.0 && v17 >= -2147483650.0 && v17 == v18) {
        icu::Formattable::setLong(a3, (int)v17);
      }
    }
  }

  icu::Formattable::~Formattable((icu::Formattable *)v28);
  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v24);
  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)v26);
  return (char *)icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v29);
}

void icu::RuleBasedNumberFormat::setLenient(icu::RuleBasedNumberFormat *this, int a2)
{
  *((_BYTE *)this + 652) = a2;
  if (!a2)
  {
    int v3 = (icu::RuleBasedCollator *)*((void *)this + 77);
    if (v3)
    {
      icu::RuleBasedCollator::~RuleBasedCollator(v3);
      icu::UMemory::operator delete(v4);
      *((void *)this + 77) = 0LL;
    }
  }

uint64_t *icu::RuleBasedNumberFormat::setDefaultRuleSet( uint64_t *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if (*(int *)a3 <= 0)
  {
    int v5 = this;
    if (*((unsigned __int16 *)a2 + 4) <= 0x1Fu)
    {
      uint64_t v11 = this[83];
      if (!v11) {
        return icu::RuleBasedNumberFormat::initDefaultRuleSet(v5);
      }
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      uint64_t v18 = (*(uint64_t (**)(uint64_t, void))(*(void *)v11 + 32LL))(v11, 0LL);
      icu::UnicodeString::UnicodeString(&v19, 1LL, &v18);
      uint64_t v16 = v18;
      v5[48] = (uint64_t)icu::RuleBasedNumberFormat::findRuleSet( &v16,  (icu::RuleBasedNumberFormat *)v5,  (const icu::UnicodeString *)&v19,  a3);
      return (uint64_t *)icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v19);
    }

    double v17 = L"%%";
    icu::UnicodeString::UnicodeString(&v19, 1LL, &v17);
    int v6 = (void *)WORD4(v19);
    if ((SWORD4(v19) & 0x8000u) == 0) {
      int32_t v7 = WORD4(v19) >> 5;
    }
    else {
      int32_t v7 = HIDWORD(v19);
    }
    if ((BYTE8(v19) & 1) != 0)
    {
      int v6 = (void *)*((unsigned __int8 *)a2 + 8);
      BOOL v13 = v6 & 1;
LABEL_23:
      this = (uint64_t *)icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v19);
      int v15 = v17;
      if (v13)
      {
        *a3 = U_ILLEGAL_ARGUMENT_ERROR;
      }

      else
      {
        this = icu::RuleBasedNumberFormat::findRuleSet((uint64_t *)&v15, (icu::RuleBasedNumberFormat *)v5, a2, a3);
        if (this) {
          v5[48] = (uint64_t)this;
        }
      }

      return this;
    }

    int v8 = v7 & (v7 >> 31);
    if (v7 < 0)
    {
      int32_t v9 = 0;
    }

    else
    {
      int32_t v9 = v7 - v8;
      int32_t v10 = v7;
      if (v7 - v8 >= v7)
      {
LABEL_17:
        if ((*((_WORD *)a2 + 4) & 1) != 0)
        {
          BOOL v13 = 0;
        }

        else
        {
          if ((BYTE8(v19) & 2) != 0) {
            uint64_t v14 = (char *)&v19 + 10;
          }
          else {
            uint64_t v14 = (char *)*((void *)&v20 + 1);
          }
          BOOL v13 = icu::UnicodeString::doEqualsSubstring((uint64_t)a2, 0, v7, (uint64_t)v14, v8, v10);
        }

        goto LABEL_23;
      }
    }

    int32_t v10 = v9;
    goto LABEL_17;
  }

  return this;
}

void *icu::RuleBasedNumberFormat::initDefaultRuleSet(void *this)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  this[48] = 0LL;
  if (this[45])
  {
    double v1 = this;
    memset(v17, 0, sizeof(v17));
    uint64_t v14 = L"%spellout-numbering";
    icu::UnicodeString::UnicodeString(v17, 1LL, &v14);
    memset(v16, 0, sizeof(v16));
    BOOL v13 = L"%digits-ordinal";
    icu::UnicodeString::UnicodeString(v16, 1LL, &v13);
    memset(v15, 0, sizeof(v15));
    int v12 = L"%duration";
    icu::UnicodeString::UnicodeString(v15, 1LL, &v12);
    unsigned int v2 = (uint64_t *)*((void *)v1 + 45);
    uint64_t v3 = *v2;
    if (*v2)
    {
      while (!sub_18095AE30(v3, (uint64_t)v17) && !sub_18095AE30(*v2, (uint64_t)v16) && !sub_18095AE30(*v2, (uint64_t)v15))
      {
        uint64_t v5 = v2[1];
        ++v2;
        uint64_t v3 = v5;
        if (!v5) {
          goto LABEL_7;
        }
      }

      uint64_t v8 = *v2;
LABEL_13:
      *((void *)v1 + 48) = v8;
    }

    else
    {
LABEL_7:
      uint64_t v7 = *(v2 - 1);
      int v6 = v2 - 1;
      *((void *)v1 + 48) = v7;
      unsigned int v4 = (uint64_t *)*(unsigned __int8 *)(v7 + 161);
      if (!*(_BYTE *)(v7 + 161))
      {
        unsigned int v4 = (uint64_t *)*((void *)v1 + 45);
        while (v6 != v4)
        {
          uint64_t v9 = *--v6;
          uint64_t v8 = v9;
          if (*(_BYTE *)(v9 + 161)) {
            goto LABEL_13;
          }
        }
      }
    }

    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v15);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v16);
    return icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v17);
  }

  return this;
}

void icu::RuleBasedNumberFormat::getDefaultRuleSetName( icu::RuleBasedNumberFormat *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 8) = 0u;
  *(void *)(a2 + 56) = 0LL;
  *(_OWORD *)(a2 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)a2 = off_18971B688;
  *(_WORD *)(a2 + 8) = 2;
  uint64_t v4 = *((void *)this + 48);
  if (v4 && *(_BYTE *)(v4 + 161)) {
    icu::UnicodeString::copyFrom((UChar **)a2, (UChar **)(v4 + 8), 0);
  }
  else {
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a2);
  }
}

uint64_t icu::RuleBasedNumberFormat::initializeDecimalFormatSymbols( icu::RuleBasedNumberFormat *this, UErrorCode *a2)
{
  if (!*((void *)this + 78))
  {
    uint64_t v5 = (icu::DecimalFormatSymbols *)icu::UMemory::operator new((icu::UMemory *)0xB48, (unint64_t)a2);
    if (v5)
    {
      uint64_t v6 = icu::DecimalFormatSymbols::DecimalFormatSymbols(v5, (icu::RuleBasedNumberFormat *)((char *)this + 392), a2);
      else {
        (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
      }
    }

    else if (*(int *)a2 <= 0)
    {
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
  }

  return *((void *)this + 78);
}

uint64_t icu::RuleBasedNumberFormat::initializeDefaultInfinityRule( icu::RuleBasedNumberFormat *this, UErrorCode *a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  uint64_t result = *((void *)this + 79);
  if (!result)
  {
    memset(v17, 0, sizeof(v17));
    BOOL v13 = L"Inf: ";
    icu::UnicodeString::UnicodeString(v17, 1LL, &v13);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v14, (UChar **)(*((void *)this + 78) + 904LL));
    if ((v15 & 0x8000u) == 0) {
      uint64_t v5 = v15 >> 5;
    }
    else {
      uint64_t v5 = v16;
    }
    icu::UnicodeString::doAppend((uint64_t)v17, (const icu::UnicodeString *)v14, 0, v5);
    icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v14);
    uint64_t v9 = icu::UMemory::operator new(v8, (icu::UMemory *)0x70, v7);
    if (v9)
    {
      int32_t v10 = (void *)sub_1809157DC((int)v9, (int)this, (icu::UnicodeString *)v17);
      uint64_t v11 = *(unsigned int *)a2;
      if ((int)v11 <= 0)
      {
        *((void *)this + 79) = v10;
      }

      else
      {
        int v12 = sub_180915860(v10);
        icu::UMemory::operator delete(v12);
      }
    }

    else
    {
      uint64_t v11 = *(unsigned int *)a2;
      if ((int)v11 <= 0)
      {
        uint64_t v11 = 7LL;
        *a2 = U_MEMORY_ALLOCATION_ERROR;
      }
    }

    icu::UnicodeString::~UnicodeString((void *)v11, (icu::UnicodeString *)v17);
    return *((void *)this + 79);
  }

  return result;
}

uint64_t icu::RuleBasedNumberFormat::initializeDefaultNaNRule( icu::RuleBasedNumberFormat *this, UErrorCode *a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  uint64_t result = *((void *)this + 80);
  if (!result)
  {
    memset(v17, 0, sizeof(v17));
    BOOL v13 = L"NaN: ";
    icu::UnicodeString::UnicodeString(v17, 1LL, &v13);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v14, (UChar **)(*((void *)this + 78) + 968LL));
    if ((v15 & 0x8000u) == 0) {
      uint64_t v5 = v15 >> 5;
    }
    else {
      uint64_t v5 = v16;
    }
    icu::UnicodeString::doAppend((uint64_t)v17, (const icu::UnicodeString *)v14, 0, v5);
    icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v14);
    uint64_t v9 = icu::UMemory::operator new(v8, (icu::UMemory *)0x70, v7);
    if (v9)
    {
      int32_t v10 = (void *)sub_1809157DC((int)v9, (int)this, (icu::UnicodeString *)v17);
      uint64_t v11 = *(unsigned int *)a2;
      if ((int)v11 <= 0)
      {
        *((void *)this + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v10;
      }

      else
      {
        int v12 = sub_180915860(v10);
        icu::UMemory::operator delete(v12);
      }
    }

    else
    {
      uint64_t v11 = *(unsigned int *)a2;
      if ((int)v11 <= 0)
      {
        uint64_t v11 = 7LL;
        *a2 = U_MEMORY_ALLOCATION_ERROR;
      }
    }

    icu::UnicodeString::~UnicodeString((void *)v11, (icu::UnicodeString *)v17);
    return *((void *)this + 80);
  }

  return result;
}

void *icu::RuleBasedNumberFormat::stripWhitespace(icu::RuleBasedNumberFormat *this, icu::UnicodeString *a2)
{
  signed int v3 = 0;
  uint64_t v26 = *MEMORY[0x1895F89C0];
  __int128 v22 = 0u;
  uint64_t v25 = 0LL;
  __int128 v24 = 0u;
  __int128 v23 = 0u;
  __int128 v21 = (UChar *)off_18971B688;
  LOWORD(v22) = 2;
  uint64_t v4 = (char *)a2 + 10;
  while (1)
  {
    unsigned int v5 = *((unsigned __int16 *)a2 + 4);
    signed int v6 = (v5 & 0x8000u) == 0 ? v5 >> 5 : *((_DWORD *)a2 + 3);
    if (v3 >= v6) {
      break;
    }
    uint64_t v7 = v3;
    do
    {
      int v8 = v3;
      if ((v5 & 0x8000) != 0)
      {
        uint64_t v9 = *((int *)a2 + 3);
        if (v7 >= v9) {
          break;
        }
      }

      else
      {
        uint64_t v9 = v5 >> 5;
        if (v7 >= v9) {
          break;
        }
      }

      if (v9 <= v3)
      {
        uint64_t v11 = 0xFFFFLL;
      }

      else
      {
        if ((v5 & 2) != 0) {
          int32_t v10 = v4;
        }
        else {
          int32_t v10 = (char *)*((void *)a2 + 3);
        }
        uint64_t v11 = *(unsigned __int16 *)&v10[2 * v7];
      }

      BOOL isWhiteSpace = icu::PatternProps::isWhiteSpace((icu::PatternProps *)v11);
      unsigned int v5 = *((unsigned __int16 *)a2 + 4);
      ++v7;
      ++v3;
    }

    while (isWhiteSpace);
    if (v8 < 0)
    {
      int v14 = 0;
      if ((v5 & 0x8000) != 0) {
        unsigned int v13 = *((_DWORD *)a2 + 3);
      }
      else {
        unsigned int v13 = v5 >> 5;
      }
    }

    else if ((v5 & 0x8000) != 0)
    {
      unsigned int v13 = *((_DWORD *)a2 + 3);
      else {
        int v14 = *((_DWORD *)a2 + 3);
      }
    }

    else
    {
      unsigned int v13 = v5 >> 5;
      if (v13 >= v8) {
        int v14 = v8;
      }
      else {
        int v14 = v13;
      }
    }

    int v15 = icu::UnicodeString::doIndexOf((uint64_t)a2, 0x3Bu, v14, v13 - v14);
    unsigned int v16 = *((unsigned __int16 *)a2 + 4);
    int v17 = (__int16)v16;
    signed int v18 = v16 >> 5;
    if (v17 < 0) {
      signed int v18 = *((_DWORD *)a2 + 3);
    }
    if (v15 == -1)
    {
      icu::UnicodeString::doAppend((uint64_t)&v21, a2, v8, (v18 - v8));
      break;
    }

    if (v15 < v18)
    {
      signed int v3 = v15 + 1;
      icu::UnicodeString::doAppend((uint64_t)&v21, a2, v8, (v15 - v8 + 1));
      if (v3 != -1) {
        continue;
      }
    }

    break;
  }

  icu::UnicodeString::copyFrom((UChar **)a2, &v21, 0);
  return icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v21);
}

void icu::RuleBasedNumberFormat::setContext(uint64_t a1, int a2, int *a3)
{
  if (*a3 <= 0)
  {
    if ((a2 - 259) <= 1 && !*(_BYTE *)(a1 + 736))
    {
      icu::RuleBasedNumberFormat::initCapitalizationContextInfo( (icu::RuleBasedNumberFormat *)a1,  (const icu::Locale *)(a1 + 392));
      *(_BYTE *)(a1 + 736) = 1;
    }

    if (!*(void *)(a1 + 744))
    {
      if (a2 != 258)
      {
        if (a2 == 260)
        {
          if (!*(_BYTE *)(a1 + 738)) {
            return;
          }
        }

        else if (a2 != 259 || !*(_BYTE *)(a1 + 737))
        {
          return;
        }
      }

      *a3 = 0;
      Sentenceuint64_t Instance = icu::BreakIterator::createSentenceInstance( (char **)(a1 + 392),  (const icu::Locale *)a3,  v6,  v7);
      *(void *)(a1 + 744) = SentenceInstance;
      if (*a3 >= 1)
      {
        if (SentenceInstance) {
          (*(void (**)(char *))(*(void *)SentenceInstance + 8LL))(SentenceInstance);
        }
        *(void *)(a1 + 744) = 0LL;
      }
    }
  }

void icu::RuleBasedNumberFormat::initCapitalizationContextInfo( icu::RuleBasedNumberFormat *this, const icu::Locale *a2)
{
  int v12 = (uint64_t *)*MEMORY[0x1895F89C0];
  icu::Locale::Locale(v12, (icu::Locale *)v11, 0LL, 0LL, 0LL, 0LL);
  Baseuint64_t Name = 0LL;
  icu::Locale::~Locale((icu::Locale *)v11);
  v11[0] = 0;
  uint64_t v5 = ures_open(0LL, BaseName, v11);
  uint64_t v6 = ures_getByKeyWithFallback(v5, "contextTransforms", v5, (UErrorCode *)v11);
  uint64_t v7 = ures_getByKeyWithFallback(v6, "number-spellout", v6, (UErrorCode *)v11);
  uint64_t v8 = v7;
  if (v11[0] <= 0)
  {
    if (v7)
    {
      int v10 = 0;
      IntVector = ures_getIntVector(v7, &v10, v11);
      if (v11[0] <= 0 && IntVector && v10 >= 2)
      {
        *((_BYTE *)this + 737) = *IntVector;
        *((_BYTE *)this + 738) = IntVector[1];
      }
    }
  }

  ures_close(v8);
}

uint64_t icu::RuleBasedNumberFormat::getCollator( icu::RuleBasedNumberFormat *this, uint64_t a2, UErrorCode *a3)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  if (*((void *)this + 45))
  {
    uint64_t result = *((void *)this + 77);
    if (result) {
      return result;
    }
    if (*((_BYTE *)this + 652))
    {
      UErrorCode v21 = U_ZERO_ERROR;
      uint64_t Instance = icu::Collator::createInstance( (icu::RuleBasedNumberFormat *)((char *)this + 392),  (const icu::Locale *)&v21,  a3);
      uint64_t v6 = (void (***)(icu::RuleBasedCollator *__hidden))Instance;
      if (v21 > U_ZERO_ERROR)
      {
        if (Instance)
        {
LABEL_6:
          uint64_t v7 = *v6;
LABEL_9:
          v7[1]((icu::RuleBasedCollator *)v6);
        }

        return *((void *)this + 77);
      }

      if (!Instance) {
        return *((void *)this + 77);
      }
      uint64_t v7 = *(void (***)(icu::RuleBasedCollator *__hidden))Instance;
      if (!*((void *)this + 82))
      {
        signed int v18 = Instance;
        uint64_t v6 = 0LL;
        goto LABEL_19;
      }

      memset(v22, 0, sizeof(v22));
      Rules = (UChar **)icu::RuleBasedCollator::getRules(Instance);
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v22, Rules);
      uint64_t v9 = *((void *)this + 82);
      unsigned int v10 = *(unsigned __int16 *)(v9 + 8);
      int v11 = (__int16)v10;
      unsigned int v12 = v10 >> 5;
      if (v11 >= 0) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = *(unsigned int *)(v9 + 12);
      }
      icu::UnicodeString::doAppend((uint64_t)v22, (const icu::UnicodeString *)v9, 0, v13);
      unsigned int v16 = (icu::RuleBasedCollator *)icu::UMemory::operator new(v15, (icu::UMemory *)0x110, v14);
      if (v16)
      {
        signed int v18 = v16;
        icu::RuleBasedCollator::RuleBasedCollator(v16, (const icu::UnicodeString *)v22, &v21);
        icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v22);
        if (v21 > U_ZERO_ERROR)
        {
          icu::RuleBasedCollator::~RuleBasedCollator(v18);
          icu::UMemory::operator delete(v20);
          goto LABEL_6;
        }

uint64_t icu::RuleBasedNumberFormat::getDefaultInfinityRule(icu::RuleBasedNumberFormat *this)
{
  return *((void *)this + 79);
}

uint64_t icu::RuleBasedNumberFormat::getDefaultNaNRule(icu::RuleBasedNumberFormat *this)
{
  return *((void *)this + 80);
}

uint64_t icu::RuleBasedNumberFormat::adoptDecimalFormatSymbols(uint64_t this, icu::DecimalFormatSymbols *a2)
{
  if (a2)
  {
    uint64_t v3 = this;
    uint64_t v4 = *(void *)(this + 624);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
    *(void *)(v3 + 624) = a2;
    UErrorCode v10 = U_ZERO_ERROR;
    uint64_t v5 = *(void **)(v3 + 632);
    if (v5)
    {
      uint64_t v6 = sub_180915860(v5);
      icu::UMemory::operator delete(v6);
    }

    *(void *)(v3 + 632) = 0LL;
    icu::RuleBasedNumberFormat::initializeDefaultInfinityRule((icu::RuleBasedNumberFormat *)v3, &v10);
    uint64_t v7 = *(void **)(v3 + 640);
    if (v7)
    {
      uint64_t v8 = sub_180915860(v7);
      icu::UMemory::operator delete(v8);
    }

    *(void *)(v3 + 64icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
    this = icu::RuleBasedNumberFormat::initializeDefaultNaNRule((icu::RuleBasedNumberFormat *)v3, &v10);
    if (*(void *)(v3 + 360) && *(int *)(v3 + 376) >= 1)
    {
      uint64_t v9 = 0LL;
      do
        this = sub_1809143AC(*(void *)(*(void *)(v3 + 360) + 8 * v9++));
      while (v9 < *(int *)(v3 + 376));
    }
  }

  return this;
}

uint64_t icu::RuleBasedNumberFormat::setDecimalFormatSymbols( icu::RuleBasedNumberFormat *this, const icu::DecimalFormatSymbols *a2)
{
  uint64_t v4 = (icu::DecimalFormatSymbols *)icu::UMemory::operator new((icu::UMemory *)0xB48, (unint64_t)a2);
  uint64_t v5 = v4;
  if (v4) {
    icu::DecimalFormatSymbols::DecimalFormatSymbols(v4, a2);
  }
  return (*(uint64_t (**)(icu::RuleBasedNumberFormat *, icu::DecimalFormatSymbols *))(*(void *)this + 400LL))( this,  v5);
}

uint64_t icu::RuleBasedNumberFormat::createPluralFormat( uint64_t a1, unint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result = icu::UMemory::operator new((icu::UMemory *)0x2C8, a2);
  if (result) {
    return icu::PluralFormat::PluralFormat(result, a1 + 392, a2, a3, a4);
  }
  *a4 = 7;
  return result;
}

uint64_t icu::RuleBasedNumberFormat::getRoundingMode(icu::RuleBasedNumberFormat *this)
{
  return *((unsigned int *)this + 162);
}

uint64_t icu::RuleBasedNumberFormat::setRoundingMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 648) = a2;
  return result;
}

uint64_t sub_18095C774(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_18095C77C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t sub_18095C784(uint64_t a1)
{
  return *(char *)(a1 + 652);
}

uint64_t sub_18095C78C(uint64_t a1)
{
  if (*(void *)(a1 + 16) && *(int *)(a1 + 12) >= 1)
  {
    uint64_t v2 = 0LL;
    do
      (*(void (**)(void))(a1 + 16))(*(void *)(*(void *)a1 + 8 * v2++));
    while (v2 < *(int *)(a1 + 12));
  }

  uprv_free(*(void **)a1);
  return a1;
}

void *icu::RuleBasedTransliterator::getStaticClassID(icu::RuleBasedTransliterator *this)
{
  return &unk_18C535708;
}

void *sub_18095C7F8()
{
  return &unk_18C535708;
}

icu::Transliterator *sub_18095C804(icu::Transliterator *a1, UChar **a2, uint64_t a3, icu::UnicodeFilter *a4)
{
  uint64_t v6 = icu::Transliterator::Transliterator(a1, a2, a4);
  *(void *)uint64_t v6 = &off_189729F08;
  *((void *)v6 + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = a3;
  *((_BYTE *)v6 + 96) = 0;
  int v7 = sub_180961394(a3 + 8);
  icu::Transliterator::setMaximumContextLength((uint64_t)a1, v7);
  return a1;
}

icu::Transliterator *sub_18095C85C(icu::Transliterator *a1, UChar **a2, uint64_t a3, char a4)
{
  int v7 = icu::Transliterator::Transliterator(a1, a2, 0LL);
  *(void *)int v7 = &off_189729F08;
  *((void *)v7 + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = a3;
  *((_BYTE *)v7 + 96) = a4;
  int v8 = sub_180961394(a3 + 8);
  icu::Transliterator::setMaximumContextLength((uint64_t)a1, v8);
  return a1;
}

icu::Transliterator *sub_18095C8C0(icu::Transliterator *a1, uint64_t a2)
{
  uint64_t v4 = icu::Transliterator::Transliterator(a1, (UChar **)a2);
  *(void *)uint64_t v4 = &off_189729F08;
  *((void *)v4 + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = *(void *)(a2 + 88);
  uint64_t v6 = (uint64_t *)*(unsigned __int8 *)(a2 + 96);
  *((_BYTE *)v4 + 96) = (_BYTE)v6;
  if ((_DWORD)v6)
  {
    int v7 = icu::UMemory::operator new(v6, (icu::UMemory *)0x490, v5);
    if (v7) {
      int v7 = (uint64_t *)sub_18095CDF8(v7, *(void *)(a2 + 88));
    }
    *((void *)a1 + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v7;
  }

  return a1;
}

void sub_18095C920(icu::Transliterator *this)
{
  *(void *)this = &off_189729F08;
  if (*((_BYTE *)this + 96))
  {
    uint64_t v2 = *((void *)this + 11);
    if (v2)
    {
      uint64_t v3 = (void *)sub_18095CE80(v2);
      icu::UMemory::operator delete(v3);
    }
  }

  icu::Transliterator::~Transliterator(this);
}

void sub_18095C968(icu::Transliterator *a1)
{
}

icu::Transliterator *sub_18095C97C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x68, a2);
  if (result) {
    return sub_18095C8C0(result, a1);
  }
  return result;
}

void sub_18095C9AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v9 = *(_DWORD *)(a3 + 8);
  int v8 = *(_DWORD *)(a3 + 12);
  umtx_lock(0LL);
  uint64_t v10 = qword_18C535760;
  umtx_unlock(0LL);
  if (v10 != a2)
  {
    umtx_lock((icu::UMutex *)&unk_18C535710);
    umtx_lock(0LL);
    qword_18C535760 = a2;
    umtx_unlock(0LL);
  }

  if (*(void *)(a1 + 88) && *(_DWORD *)(a3 + 8) < *(_DWORD *)(a3 + 12))
  {
    unsigned int v11 = v8 - v9;
    unsigned int v12 = 16 * (v8 - v9);
    unsigned int v13 = 1;
    unsigned int v14 = v11 >> 28;
    do
    {
      BOOL v15 = v14 || v12 >= v13;
      BOOL v16 = !v15;
      if (*(_DWORD *)(a3 + 8) >= *(_DWORD *)(a3 + 12)) {
        break;
      }
      ++v13;
    }

    while (!v16);
  }

  if (v10 != a2)
  {
    umtx_lock(0LL);
    qword_18C535760 = 0LL;
    umtx_unlock(0LL);
    umtx_unlock((std::mutex **)&unk_18C535710);
  }

icu::UnicodeString *sub_18095CAD8(uint64_t a1, icu::UnicodeString *a2, uint64_t a3)
{
  return sub_1809618B0(*(void *)(a1 + 88) + 8LL, a2, a3);
}

icu::UnicodeSet *sub_18095CAE4(uint64_t a1, icu::UnicodeSet *a2)
{
  return sub_180961984(*(void *)(a1 + 88) + 8LL, a2, 0);
}

icu::UnicodeSet *sub_18095CAF4(uint64_t a1, icu::UnicodeSet *a2)
{
  return sub_180961984(*(void *)(a1 + 88) + 8LL, a2, 1);
}

uint64_t sub_18095CB04(uint64_t a1, int *a2)
{
  *(void *)(a1 + 1064) = 0LL;
  if (*a2 <= 0
    && (uhash_init( (int32x2_t *)(a1 + 1072),  (uint64_t)uhash_hashUnicodeString,  (uint64_t)uhash_compareUnicodeString,  0LL,  a2),  *a2 < 1))
  {
    *(void *)(a1 + 1064) = a1 + 1072;
    uhash_setKeyDeleter(a1 + 1072, (uint64_t)uprv_deleteUObject);
    int v5 = *a2;
    *(void *)(a1 + 1152) = 0LL;
    *(_BYTE *)(a1 + 116icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 1;
    if (v5 <= 0)
    {
      uhash_setValueDeleter(*(void *)(a1 + 1064), (uint64_t)uprv_deleteUObject);
      *(void *)(a1 + 1152) = 0LL;
      *(_DWORD *)(a1 + 1164) = 0;
    }
  }

  else
  {
    *(void *)(a1 + 1152) = 0LL;
    *(_BYTE *)(a1 + 116icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 1;
  }

  return a1;
}

uint64_t sub_18095CBD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 8;
  sub_1809612A8(a1 + 8, a2 + 8);
  *(void *)(a1 + 1064) = 0LL;
  int v26 = 0;
  uhash_init((int32x2_t *)(a1 + 1072), (uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0LL, &v26);
  if (v26 <= 0)
  {
    *(void *)(a1 + 1064) = a1 + 1072;
    uhash_setKeyDeleter(a1 + 1072, (uint64_t)uprv_deleteUObject);
  }

  *(_BYTE *)(a1 + 116icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 1;
  *(_WORD *)(a1 + 1162) = *(_WORD *)(a2 + 1162);
  *(_DWORD *)(a1 + 1164) = *(_DWORD *)(a2 + 1164);
  int v25 = 0;
  uhash_setValueDeleter(*(void *)(a1 + 1064), (uint64_t)uprv_deleteUObject);
  int v24 = -1;
  uint64_t v5 = uhash_nextElement(*(uint64_t **)(a2 + 1064), &v24);
  if (!v5)
  {
LABEL_9:
    *(void *)(a1 + 1152) = 0LL;
    if (*(void *)(a2 + 1152))
    {
      int v17 = uprv_malloc(8LL * *(int *)(a1 + 1164));
      *(void *)(a1 + 1152) = v17;
      if (!v17) {
        return a1;
      }
      if (*(int *)(a1 + 1164) >= 1)
      {
        uint64_t v18 = 0LL;
        while (1)
        {
          uint64_t v19 = *(void *)(*(void *)(a2 + 1152) + 8 * v18);
          *(void *)(*(void *)(a1 + 1152) + 8 * v18) = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 24LL))(v19);
          int v17 = *(void **)(a1 + 1152);
          if (!v17[v18]) {
            break;
          }
        }

        int v25 = 7;
LABEL_21:
        if ((int)v18 >= 1)
        {
          uint64_t v20 = v18 - 1LL;
          do
          {
            uint64_t v21 = *(void *)(*(void *)(a1 + 1152) + 8 * v20);
            if (v21) {
              (*(void (**)(uint64_t))(*(void *)v21 + 8LL))(v21);
            }
            unint64_t v22 = v20-- + 1;
          }

          while (v22 > 1);
          int v17 = *(void **)(a1 + 1152);
        }

        uprv_free(v17);
        *(void *)(a1 + 1152) = 0LL;
        return a1;
      }
    }

    else
    {
      int v17 = 0LL;
    }

    LODWORD(v18) = 0;
LABEL_18:
    if (v25 < 1)
    {
      sub_18096133C(v4, a1);
      return a1;
    }

    goto LABEL_21;
  }

  uint64_t v8 = v5;
  while (1)
  {
    int v9 = (icu::UnicodeString *)icu::UMemory::operator new(v7, (icu::UMemory *)0x40, v6);
    if (!v9) {
      return a1;
    }
    uint64_t v10 = (uint64_t)v9;
    icu::UnicodeString::UnicodeString(v9, *(UChar ***)(v8 + 8));
    unsigned int v11 = *(UChar ***)(v8 + 16);
    uint64_t v12 = *(void *)(a1 + 1064);
    BOOL v15 = (icu::UnicodeString *)icu::UMemory::operator new(v14, (icu::UMemory *)0x40, v13);
    uint64_t v16 = (uint64_t)v15;
    if (v15) {
      icu::UnicodeString::UnicodeString(v15, v11);
    }
    uhash_put(v12, v16, v10, &v25);
    uint64_t v8 = uhash_nextElement(*(uint64_t **)(a2 + 1064), &v24);
    if (!v8) {
      goto LABEL_9;
    }
  }

uint64_t sub_18095CDFC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 1160))
  {
    if (*(void *)(a1 + 1152))
    {
      int v2 = *(_DWORD *)(a1 + 1164);
      if (v2 >= 1)
      {
        for (uint64_t i = 0LL; i < v2; ++i)
        {
          uint64_t v4 = *(void *)(*(void *)(a1 + 1152) + 8 * i);
          if (v4)
          {
            (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
            int v2 = *(_DWORD *)(a1 + 1164);
          }
        }
      }
    }
  }

  uprv_free(*(void **)(a1 + 1152));
  uint64_t v5 = *(_BYTE **)(a1 + 1064);
  if (v5) {
    uhash_close(v5);
  }
  sub_1809612AC(a1 + 8);
  return a1;
}

uint64_t sub_18095CE84(uint64_t a1, int a2)
{
  int v2 = a2 - *(unsigned __int16 *)(a1 + 1162);
  if (v2 < 0 || v2 >= *(_DWORD *)(a1 + 1164)) {
    return 0LL;
  }
  else {
    return *(void *)(*(void *)(a1 + 1152) + 8LL * v2);
  }
}

uint64_t sub_18095CEB0(uint64_t a1, int a2)
{
  int v2 = a2 - *(unsigned __int16 *)(a1 + 1162);
  if (v2 >= 0
    && v2 < *(_DWORD *)(a1 + 1164)
    && (uint64_t v3 = *(void *)(*(void *)(a1 + 1152) + 8LL * v2)) != 0)
  {
    return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32LL))(v3);
  }

  else
  {
    return 0LL;
  }

uint64_t sub_18095CEE8(uint64_t a1, int a2)
{
  int v2 = a2 - *(unsigned __int16 *)(a1 + 1162);
  if (v2 >= 0
    && v2 < *(_DWORD *)(a1 + 1164)
    && (uint64_t v3 = *(void *)(*(void *)(a1 + 1152) + 8LL * v2)) != 0)
  {
    return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40LL))(v3);
  }

  else
  {
    return 0LL;
  }

void sub_18095CF24(icu::SymbolTable *a1)
{
}

uint64_t sub_18095CF38(uint64_t a1, uint64_t a2)
{
  return uhash_get(**(void **)(a1 + 24), a2);
}

uint64_t sub_18095CF44(uint64_t a1, int a2)
{
  signed int v2 = a2 - *(unsigned __int16 *)(*(void *)(a1 + 8) + 1162LL);
  if (v2 < 0) {
    return 0LL;
  }
  uint64_t v3 = *(icu::UVector **)(a1 + 16);
  if (v2 >= *((_DWORD *)v3 + 2)) {
    return 0LL;
  }
  else {
    return icu::UVector::elementAt(v3, v2);
  }
}

void sub_18095CF70(uint64_t a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = *(int *)(a2 + 8);
  int v8 = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *(void *)(a4 + 56) = 0LL;
  *(void *)a4 = off_18971B688;
  *(_WORD *)(a4 + 8) = 2;
  uint64_t v9 = a1 + 10;
  else {
    int v10 = v7;
  }
  int v21 = v10;
  uint64_t v11 = v10 - v7;
  int v12 = v7;
  while (1)
  {
    if (v11 == v6)
    {
      int v20 = v21;
      goto LABEL_21;
    }

    uint64_t v13 = v6;
    unsigned int v14 = v8 + v6;
    unsigned int v15 = *(unsigned __int16 *)(a1 + 8);
    unsigned int v16 = (v15 & 0x8000u) == 0 ? v15 >> 5 : *(_DWORD *)(a1 + 12);
    if (v16 > v14) {
      break;
    }
    UChar32 v18 = 0xFFFF;
    if (!v13) {
      goto LABEL_16;
    }
LABEL_17:
    int isIDPart = u_isIDPart(v18);
    ++v12;
    uint64_t v6 = v13 + 1;
    if (!isIDPart)
    {
      int v20 = v8 + v13;
      goto LABEL_21;
    }
  }

  if ((v15 & 2) != 0) {
    uint64_t v17 = v9;
  }
  else {
    uint64_t v17 = *(void *)(a1 + 24);
  }
  UChar32 v18 = *(unsigned __int16 *)(v17 + 2 * v7 + 2 * v13);
  if (v13) {
    goto LABEL_17;
  }
LABEL_16:
  if (u_isIDStart(v18)) {
    goto LABEL_17;
  }
  int v20 = v12;
LABEL_21:
  if (v20 != v8)
  {
    *(_DWORD *)(a2 + 8) = v20;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 24LL))(a1, v7);
  }

uint64_t sub_18095D0E0(uint64_t a1, int a2)
{
  signed int v2 = a2 - *(unsigned __int16 *)(*(void *)(a1 + 8) + 1162LL);
  if (v2 < 0) {
    return 1LL;
  }
  uint64_t v3 = *(icu::UVector **)(a1 + 16);
  if (v2 >= *((_DWORD *)v3 + 2)) {
    return 1LL;
  }
  uint64_t result = icu::UVector::elementAt(v3, v2);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 32LL))(result) != 0;
  }
  return result;
}

uint64_t sub_18095D134(uint64_t a1, int a2)
{
  signed int v2 = a2 - *(unsigned __int16 *)(*(void *)(a1 + 8) + 1162LL);
  if (v2 < 0) {
    return 1LL;
  }
  uint64_t v3 = *(icu::UVector **)(a1 + 16);
  if (v2 >= *((_DWORD *)v3 + 2)) {
    return 1LL;
  }
  uint64_t result = icu::UVector::elementAt(v3, v2);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40LL))(result) != 0;
  }
  return result;
}

uint64_t sub_18095D188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  uint64_t v10 = a1 + 8;
  unsigned int v11 = *(unsigned __int16 *)(a1 + 16);
  if ((v11 & 1) != 0)
  {
    icu::UnicodeString::unBogus(a1 + 8);
  }

  else
  {
    if ((v11 & 0x8000) == 0)
    {
      if (!(v11 >> 5)) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }

    if (*(_DWORD *)(a1 + 20)) {
LABEL_7:
    }
      *(_WORD *)(a1 + 16) &= 0x1Fu;
  }

uint64_t sub_18095D2CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, UErrorCode *a8)
{
  uint64_t v8 = a3;
  uint64_t v168 = *MEMORY[0x1895F89C0];
  int v160 = a3;
  __int128 v158 = off_18970F400;
  unint64_t v159 = 0xFFFFFFFF00000000LL;
  __int128 v164 = 0u;
  uint64_t v167 = 0LL;
  __int128 v166 = 0u;
  __int128 v165 = 0u;
  __int128 v163 = off_18971B688;
  LOWORD(v164) = 2;
  unsigned int v9 = *(unsigned __int16 *)(a5 + 8);
  int v10 = (__int16)v9;
  LODWORD(v1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v9 >> 5;
  if (v10 >= 0) {
    uint64_t v11 = v11;
  }
  else {
    uint64_t v11 = *(unsigned int *)(a5 + 12);
  }
  int v150 = v11;
  uint64_t v18 = a2 + 10;
  uint64_t v151 = a5 + 10;
  LODWORD(v19) = a3;
  unsigned int v148 = -1;
  int v149 = -1;
  uint64_t v20 = 0xFFFFFFFFLL;
  int v153 = -1;
  while (1)
  {
    int v160 = v19 + 1;
    unsigned int v21 = *(unsigned __int16 *)(a2 + 8);
    if ((v21 & 0x8000u) == 0) {
      unsigned int v22 = v21 >> 5;
    }
    else {
      unsigned int v22 = *(_DWORD *)(a2 + 12);
    }
    if (v22 <= v19)
    {
      uint64_t v24 = 0xFFFFLL;
    }

    else
    {
      if ((v21 & 2) != 0) {
        uint64_t v23 = v18;
      }
      else {
        uint64_t v23 = *(void *)(a2 + 24);
      }
      uint64_t v24 = *(unsigned __int16 *)(v23 + 2LL * (int)v19);
    }

    if (icu::PatternProps::isWhiteSpace((icu::PatternProps *)v24)) {
      goto LABEL_21;
    }
    if (u_strchr((const UChar *)"=", v24)) {
      break;
    }
    if (*(_BYTE *)(a1 + 93))
    {
      uint64_t v26 = *(void *)(a1 + 104);
      int v139 = 65542;
      goto LABEL_243;
    }

    if (icu::UnicodeSet::resemblesPattern((icu::UnicodeSet *)a2, (const icu::UnicodeString *)(v160 - 1)))
    {
      LODWORD(v159) = v160 - 1;
      LOWORD(v162[0]) = (unsigned __int16)sub_18095E15C( *(void *)(a1 + 104),  (const icu::UnicodeString *)a2,  (icu::ParsePosition *)&v158,  a8,  (uint64_t *)(v160 - 1));
      icu::UnicodeString::doAppend(a5, (uint64_t)v162, 0, 1LL);
      if (*(int *)a8 >= 1)
      {
        uint64_t v26 = *(void *)(a1 + 104);
        int v139 = 65538;
        goto LABEL_243;
      }

      uint64_t v11 = v159;
      int v160 = v159;
    }

    else if ((_DWORD)v24 == 39)
    {
      unsigned int v27 = *(unsigned __int16 *)(a2 + 8);
      uint64_t v28 = a6;
      if (v160 < 0)
      {
        int v30 = 0;
        if ((v27 & 0x8000) != 0) {
          int v29 = *(_DWORD *)(a2 + 12);
        }
        else {
          int v29 = v27 >> 5;
        }
      }

      else if ((v27 & 0x8000) != 0)
      {
        int v29 = *(_DWORD *)(a2 + 12);
        if (v29 >= v160) {
          int v30 = v160;
        }
        else {
          int v30 = *(_DWORD *)(a2 + 12);
        }
      }

      else
      {
        int v29 = v27 >> 5;
        else {
          int v30 = v29;
        }
      }

      uint64_t v69 = icu::UnicodeString::doIndexOf(a2, 0x27u, v30, v29 - v30);
      if ((_DWORD)v69 == v160)
      {
        strcpy((char *)v162, "'");
        icu::UnicodeString::doAppend(a5, (uint64_t)v162, 0, 1LL);
        uint64_t v11 = ++v160;
      }

      else
      {
        uint64_t v70 = v69;
        unsigned int v71 = *(unsigned __int16 *)(a5 + 8);
        int v72 = (__int16)v71;
        int v73 = v71 >> 5;
        if (v72 < 0) {
          int v73 = *(_DWORD *)(a5 + 12);
        }
        int v153 = v73;
        if ((v69 & 0x80000000) != 0)
        {
LABEL_226:
          uint64_t v26 = *(void *)(a1 + 104);
          int v139 = 65556;
          goto LABEL_243;
        }

        while (1)
        {
          if ((v164 & 1) != 0)
          {
            icu::UnicodeString::unBogus((uint64_t)&v163);
          }

          else
          {
            if ((v164 & 0x8000u) == 0LL) {
              int v74 = (unsigned __int16)v164 >> 5;
            }
            else {
              int v74 = DWORD1(v164);
            }
            if (v74)
            {
              LOBYTE(v164) = v164 & 0x1F;
              LOWORD(v164) = v164;
            }
          }

          (*(void (**)(uint64_t, void, uint64_t, void (***)(icu::UnicodeString *__hidden)))(*(void *)a2 + 24LL))( a2,  v160,  v70,  &v163);
          uint64_t v75 = (v164 & 0x8000u) == 0LL ? (unsigned __int16)v164 >> 5 : DWORD1(v164);
          icu::UnicodeString::doAppend(a5, (const icu::UnicodeString *)&v163, 0, v75);
          unsigned int v76 = v70 + 1;
          int v160 = v70 + 1;
          unsigned int v77 = *(unsigned __int16 *)(a2 + 8);
          int v78 = (__int16)v77;
          unsigned int v79 = v77 >> 5;
          unsigned int v80 = (v77 & 0x8000u) == 0 ? v77 >> 5 : *(_DWORD *)(a2 + 12);
          if (v80 <= v76) {
            break;
          }
          uint64_t v81 = (v77 & 2) != 0 ? v18 : *(void *)(a2 + 24);
          if (*(_WORD *)(v81 + 2LL * v76) != 39) {
            break;
          }
          int v82 = v70 + 2;
          if (*(_DWORD *)(a2 + 12) < v82) {
            int v82 = *(_DWORD *)(a2 + 12);
          }
          if (v78 >= 0) {
            int v83 = v79;
          }
          else {
            int v83 = v82;
          }
          uint64_t v70 = icu::UnicodeString::doIndexOf(a2, 0x27u, v83, v80 - v83);
          if ((v70 & 0x80000000) != 0) {
            goto LABEL_226;
          }
        }

        uint64_t v11 = *(unsigned __int16 *)(a5 + 8);
        if ((v11 & 0x8000u) == 0LL) {
          uint64_t v20 = v11 >> 5;
        }
        else {
          uint64_t v20 = *(unsigned int *)(a5 + 12);
        }
        unsigned int v84 = v153;
        if (v153 < (int)v20)
        {
          uint64_t v26 = *(void *)(a1 + 104);
          uint64_t v85 = *(void *)(a5 + 24);
          if ((v11 & 2) != 0) {
            uint64_t v85 = v151;
          }
          uint64_t v11 = *(unsigned __int16 *)(*(void *)(v26 + 96) + 1162LL);
          __int128 v86 = (unsigned __int16 *)(v85 + 2LL * v153);
          a6 = v28;
          while (1)
          {
            if (v20 > v84)
            {
              unsigned int v87 = *v86;
            }

            ++v84;
            ++v86;
            if ((_DWORD)v20 == v84) {
              goto LABEL_21;
            }
          }

icu::UnicodeSet *sub_18095E15C@<X0>( uint64_t a1@<X0>, const icu::UnicodeString *a2@<X1>, icu::ParsePosition *a3@<X2>, UErrorCode *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result = (icu::UnicodeSet *)icu::UMemory::operator new(a5, (icu::UMemory *)0xC8, (unint64_t)a2);
  if (result)
  {
    int v10 = result;
    uint64_t v11 = icu::UnicodeSet::UnicodeSet(result, a2, a3, 1u, *(const icu::SymbolTable **)(a1 + 184), a4);
    icu::UnicodeSet::compact(v11);
    return (icu::UnicodeSet *)sub_18095E428(a1, v10, a4);
  }

  else
  {
    *a4 = U_MEMORY_ALLOCATION_ERROR;
  }

  return result;
}

uint64_t sub_18095E1E8(uint64_t result, int a2, void *a3, UErrorCode *a4)
{
  uint64_t v7 = result;
  uint64_t v8 = (icu::UVector *)(result + 384);
  if (*(_DWORD *)(result + 392) < a2) {
    uint64_t result = icu::UVector::setSize((uint64_t (**)(void))(result + 384), a2, a4);
  }
  if (*(int *)a4 <= 0)
  {
    int v9 = sub_18095E2E8(v7, a2, a4);
    int v10 = *(unsigned __int16 *)(*(void *)(v7 + 96) + 1162LL);
    unsigned int v11 = a2 - 1;
    uint64_t result = icu::UVector::elementAt(v8, v11);
    if (result || (v12 = v9 - v10, uint64_t v13 = (icu::UVector *)(v7 + 192), (result = icu::UVector::elementAt(v13, v12)) != 0))
    {
    }

    else
    {
      icu::UVector::setElementAt((uint64_t)v8, a3, v11);
      return icu::UVector::setElementAt((uint64_t)v13, a3, v12);
    }
  }

  return result;
}

uint64_t sub_18095E2E8(uint64_t a1, signed int a2, UErrorCode *a3)
{
  unsigned __int16 v6 = *(_WORD *)(*(void *)(a1 + 96) + 1162LL) - 1;
  for (uint64_t i = (icu::UnicodeString *)(a1 + 320); ; icu::UnicodeString::doAppend((uint64_t)i, (uint64_t)&v14, 0, 1LL))
  {
    unsigned int v8 = *(unsigned __int16 *)(a1 + 328);
    unsigned int v9 = *(__int16 *)(a1 + 328) < 0 ? *(_DWORD *)(a1 + 332) : v8 >> 5;
    unsigned __int16 v14 = v6;
  }

  int v10 = a2 - 1;
  if (v9 <= v10)
  {
    uint64_t v12 = 0xFFFFLL;
  }

  else
  {
    if ((v8 & 2) != 0) {
      uint64_t v11 = a1 + 330;
    }
    else {
      uint64_t v11 = *(void *)(a1 + 344);
    }
    uint64_t v12 = *(unsigned __int16 *)(v11 + 2LL * v10);
  }

  if ((_DWORD)v12 == v6)
  {
    uint64_t v12 = *(unsigned __int16 *)(a1 + 424);
    if (v12 >= *(unsigned __int16 *)(a1 + 426))
    {
      uint64_t v12 = 0LL;
      *a3 = U_VARIABLE_RANGE_EXHAUSTED;
    }

    else
    {
      *(_WORD *)(a1 + 424) = v12 + 1;
      icu::UVector::addElement((icu::UVector *)(a1 + 192), 0LL, a3);
      icu::UnicodeString::setCharAt(i, v10, v12);
    }
  }

  return v12;
}

uint64_t sub_18095E3F0(uint64_t a1)
{
  return a1;
}

uint64_t sub_18095E428(uint64_t a1, void *a2, UErrorCode *a3)
{
  unsigned __int16 v6 = (icu::UVector *)(a1 + 192);
  if (*(int *)(a1 + 200) < 1)
  {
LABEL_5:
    if (*(unsigned __int16 *)(a1 + 424) >= *(unsigned __int16 *)(a1 + 426))
    {
      if (a2) {
        (*(void (**)(void *))(*(void *)a2 + 8LL))(a2);
      }
      unsigned __int16 v8 = 0;
      *a3 = U_VARIABLE_RANGE_EXHAUSTED;
    }

    else
    {
      icu::UVector::addElement(v6, a2, a3);
      if (*(int *)a3 < 1)
      {
        unsigned __int16 v8 = *(_WORD *)(a1 + 424);
        *(_WORD *)(a1 + 424) = v8 + 1;
      }

      else
      {
        if (a2) {
          (*(void (**)(void *))(*(void *)a2 + 8LL))(a2);
        }
        return 0;
      }
    }
  }

  else
  {
    unsigned int v7 = 0;
    while ((void *)icu::UVector::elementAt(v6, v7) != a2)
    {
    }

    return (unsigned __int16)(*(_WORD *)(*(void *)(a1 + 96) + 1162LL) + v7);
  }

  return v8;
}

uint64_t sub_18095E524(uint64_t a1, UChar **a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result = uhash_get(*(void *)(a1 + 232), (uint64_t)a2);
  if (!result)
  {
    if (*(__int16 *)(a1 + 440) < 0)
    {
      if (!*(_DWORD *)(a1 + 444)) {
        goto LABEL_10;
      }
    }

    else if (!(*(unsigned __int16 *)(a1 + 440) >> 5))
    {
LABEL_10:
      uint64_t result = (uint64_t)icu::UnicodeString::operator=((UChar **)(a1 + 432), a2);
      unsigned int v13 = *(unsigned __int16 *)(a1 + 426);
      if (*(unsigned __int16 *)(a1 + 424) < v13)
      {
        __int16 v14 = v13 - 1;
        *(_WORD *)(a1 + 426) = v14;
        __int16 v15 = v14;
        return icu::UnicodeString::doAppend(a3, (uint64_t)&v15, 0, 1LL);
      }
    }

    *a4 = 1;
    return result;
  }

  unsigned int v9 = *(unsigned __int16 *)(result + 8);
  int v10 = (__int16)v9;
  unsigned int v11 = v9 >> 5;
  if (v10 >= 0) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = *(unsigned int *)(result + 12);
  }
  return icu::UnicodeString::doAppend(a3, (const icu::UnicodeString *)result, 0, v12);
}

uint64_t sub_18095E608(uint64_t a1, UErrorCode *a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  uint64_t result = *(unsigned __int16 *)(a1 + 496);
  if ((_DWORD)result == 0xFFFF)
  {
    uint64_t result = (uint64_t)icu::UMemory::operator new((uint64_t *)0xFFFF, (icu::UMemory *)0xC8, (unint64_t)a2);
    if (result)
    {
      uint64_t v5 = (icu::UnicodeSet *)result;
      unsigned int v7 = &unk_180A3BA3A;
      icu::UnicodeString::UnicodeString(v8, 1LL, &v7);
      icu::UnicodeSet::UnicodeSet(v5, (const icu::UnicodeString *)v8, a2);
      icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v8);
      uint64_t result = sub_18095E428(a1, v5, a2);
      *(_WORD *)(a1 + 496) = result;
    }

    else
    {
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
  }

  return result;
}

double sub_18095E6E8(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if ((v2 & 0x80000000) == 0)
  {
    if ((_DWORD)v2)
    {
      icu::UnicodeString::doReplace(a1 + 8, v2, 0x7FFFFFFFLL, 0LL, 0, 0LL);
    }

    else
    {
      if ((*(_WORD *)(a1 + 16) & 1) != 0) {
        __int16 v3 = 2;
      }
      else {
        __int16 v3 = *(_WORD *)(a1 + 16) & 0x1F;
      }
      *(_WORD *)(a1 + 16) = v3;
    }
  }

  uint64_t v4 = *(unsigned int *)(a1 + 76);
  if ((v4 & 0x80000000) == 0) {
    icu::UnicodeString::doReplace(a1 + 8, 0LL, v4, 0LL, 0, 0LL);
  }
  double result = NAN;
  *(void *)(a1 + 76) = -1LL;
  *(_WORD *)(a1 + 92) = 0;
  return result;
}

BOOL sub_18095E770(uint64_t a1, uint64_t a2)
{
  int v4 = 0;
  uint64_t v5 = (icu::UnicodeString *)(a1 + 8);
  do
  {
    signed int v6 = v4;
    unint64_t v7 = *(__int16 *)(a1 + 16);
    if ((v7 & 0x80000000) != 0)
    {
      signed int v8 = *(_DWORD *)(a1 + 20);
    }

    else
    {
      unint64_t v7 = *(unsigned __int16 *)(a1 + 16);
      signed int v8 = v7 >> 5;
    }

    if (v4 >= v8) {
      break;
    }
    unsigned int v9 = icu::UnicodeString::char32At((uint64_t *)v7, v5, v4);
    int v10 = v9 < 0x10000 ? 1 : 2;
    v4 += v10;
  }

  while (sub_18095D134(*(void *)(a2 + 184), v9));
  return v6 >= v8;
}

BOOL sub_18095E808(uint64_t a1, uint64_t a2)
{
  int v4 = 0;
  uint64_t v5 = (icu::UnicodeString *)(a1 + 8);
  do
  {
    signed int v6 = v4;
    unint64_t v7 = *(__int16 *)(a1 + 16);
    if ((v7 & 0x80000000) != 0)
    {
      signed int v8 = *(_DWORD *)(a1 + 20);
    }

    else
    {
      unint64_t v7 = *(unsigned __int16 *)(a1 + 16);
      signed int v8 = v7 >> 5;
    }

    if (v4 >= v8) {
      break;
    }
    unsigned int v9 = icu::UnicodeString::char32At((uint64_t *)v7, v5, v4);
    int v10 = v9 < 0x10000 ? 1 : 2;
    v4 += v10;
  }

  while (sub_18095D0E0(*(void *)(a2 + 184), v9));
  return v6 >= v8;
}

uint64_t sub_18095E8A0(uint64_t a1, UErrorCode *a2)
{
  *(void *)(a1 + 232) = 0LL;
  int v5 = 0;
  uhash_init((int32x2_t *)(a1 + 240), (uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0LL, &v5);
  if (v5 <= 0)
  {
    *(void *)(a1 + 232) = a1 + 240;
    uhash_setKeyDeleter(a1 + 240, (uint64_t)uprv_deleteUObject);
  }

  *(void *)(a1 + 32icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = off_18971B688;
  *(_WORD *)(a1 + 328) = 2;
  icu::UVector::UVector((icu::UVector *)(a1 + 384), a2);
  *(void *)(a1 + 432) = off_18971B688;
  *(_WORD *)(a1 + 44icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
  icu::UVector::setDeleter((icu::UVector *)(a1 + 48), (void (*)(void *))uprv_deleteUObject);
  *(void *)(a1 + 184) = 0LL;
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  uhash_setValueDeleter(*(void *)(a1 + 232), (uint64_t)uprv_deleteUObject);
  return a1;
}

uint64_t sub_18095E9A4(uint64_t a1)
{
  uint64_t v2 = (icu::UVector *)(a1 + 8);
  for (uint64_t i = (void *)*(unsigned int *)(a1 + 16); (_DWORD)i; uint64_t i = (void *)*(unsigned int *)(a1 + 16))
  {
    uint64_t v4 = icu::UVector::orphanElementAt(v2, 0);
    if (v4)
    {
      int v5 = (void *)sub_18095CE80(v4);
      icu::UMemory::operator delete(v5);
    }
  }

  signed int v6 = *(icu::UnicodeSet **)(a1 + 88);
  if (v6)
  {
    unint64_t v7 = icu::UnicodeSet::~UnicodeSet(i, v6);
    icu::UMemory::operator delete(v7);
  }

  uint64_t v8 = *(void *)(a1 + 184);
  if (v8) {
LABEL_8:
  }
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  while (1)
  {
    unsigned int v9 = (void *)*(unsigned int *)(a1 + 200);
    if (!(_DWORD)v9) {
      break;
    }
    uint64_t v8 = icu::UVector::orphanElementAt((icu::UVector *)(a1 + 192), 0);
    if (v8) {
      goto LABEL_8;
    }
  }

  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)(a1 + 432));
  icu::UVector::~UVector((icu::UVector *)(a1 + 384));
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)(a1 + 320));
  unsigned int v11 = *(_BYTE **)(a1 + 232);
  if (v11) {
    uhash_close(v11);
  }
  icu::UVector::~UVector((icu::UVector *)(a1 + 192));
  icu::UVector::~UVector((icu::UVector *)(a1 + 48));
  icu::UVector::~UVector(v2);
  return a1;
}

__n128 sub_18095EA88(uint64_t a1, uint64_t a2, int a3, uint64_t a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    sub_18095EAE0(a1, a2, a3, a5);
    *(_OWORD *)a4 = *(_OWORD *)(a1 + 108);
    __n128 result = *(__n128 *)(a1 + 124);
    __int128 v8 = *(_OWORD *)(a1 + 140);
    __int128 v9 = *(_OWORD *)(a1 + 156);
    *(void *)(a4 + 64) = *(void *)(a1 + 172);
    *(_OWORD *)(a4 + 32) = v8;
    *(_OWORD *)(a4 + 48) = v9;
    *(__n128 *)(a4 + 16) = result;
  }

  return result;
}

void sub_18095EAE0(uint64_t a1, uint64_t a2, int a3, UErrorCode *a4)
{
  uint64_t v110 = *MEMORY[0x1895F89C0];
  *(void *)(a1 + 108) = -1LL;
  __int128 v8 = (void *)(a1 + 108);
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)(a1 + 148) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  __int128 v9 = (icu::UVector *)(a1 + 8);
  while (*(_DWORD *)(a1 + 16))
  {
    if (icu::UVector::orphanElementAt(v9, 0))
    {
      int v10 = (void *)sub_18095CE80();
      icu::UMemory::operator delete(v10);
    }
  }

  unsigned int v93 = (uint64_t (**)(void *))(a1 + 48);
  icu::UVector::removeAllElements(a1 + 48);
  *(void *)(a1 + 96) = 0LL;
  *(_DWORD *)(a1 + 104) = a3;
  unsigned int v11 = *(icu::UnicodeSet **)(a1 + 88);
  if (v11)
  {
    icu::UnicodeSet::~UnicodeSet(v11);
    icu::UMemory::operator delete(v12);
  }

  *(void *)(a1 + 88) = 0LL;
  while (*(_DWORD *)(a1 + 200))
  {
    uint64_t v13 = icu::UVector::orphanElementAt((icu::UVector *)(a1 + 192), 0);
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8LL))(v13);
    }
  }

  uhash_removeAll(*(void *)(a1 + 232));
  unsigned int v16 = icu::UMemory::operator new(v15, (icu::UMemory *)0x20, v14);
  if (!v16)
  {
    *(void *)(a1 + 184) = 0LL;
    *a4 = U_MEMORY_ALLOCATION_ERROR;
    return;
  }

  unsigned int v96 = 0;
  uint64_t *v16 = (uint64_t)&off_189729FB8;
  v16[1] = 0LL;
  void v16[2] = a1 + 192;
  v16[3] = a1 + 232;
  *(void *)(a1 + 184) = v16;
  *(_WORD *)(a1 + 496) = -1;
  __int128 v106 = 0u;
  uint64_t v109 = 0LL;
  __int128 v108 = 0u;
  __int128 v107 = 0u;
  uint64_t v104 = 0LL;
  __int16 v105 = off_18971B688;
  LOWORD(v106) = 2;
  __int128 v101 = 0u;
  __int128 v103 = 0u;
  __int128 v102 = 0u;
  uint64_t v100 = (UChar *)off_18971B688;
  LOWORD(v10icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 2;
  unsigned int v18 = *(unsigned __int16 *)(a2 + 8);
  int v19 = (__int16)v18;
  unsigned int v20 = v18 >> 5;
  if (v19 >= 0) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = *(unsigned int *)(a2 + 12);
  }
  *(void *)(a1 + 88) = 0LL;
  int v92 = -1;
  if ((int)v21 < 1 || *(int *)a4 > 0)
  {
LABEL_119:
    LODWORD(v66) = (unsigned __int16)v101 >> 5;
    if ((v101 & 0x8000u) == 0LL) {
      unint64_t v66 = v66;
    }
    else {
      unint64_t v66 = DWORD1(v101);
    }
    uint64_t v67 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)v66, (icu::UMemory *)0x40, v17);
    if (v67)
    {
      int v68 = v67;
      icu::UnicodeString::UnicodeString(v67, &v100);
      if (*(_DWORD *)(a1 + 104)) {
        icu::UVector::insertElementAt(v93, v68, 0, a4);
      }
      else {
        icu::UVector::adoptElement((icu::UVector *)v93, v68, a4);
      }
      goto LABEL_135;
    }

uint64_t sub_18095F4C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0LL;
  return v1;
}

uint64_t sub_18095F4D0(icu::UnicodeString *a1, uint64_t a2, icu::UnicodeString *a3)
{
  unsigned int v3 = *((unsigned __int16 *)a3 + 4);
  int v4 = (__int16)v3;
  unsigned int v5 = v3 >> 5;
  if (v4 >= 0) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = *((unsigned int *)a3 + 3);
  }
  return icu::UnicodeString::doReplace(a1, a2, 0LL, a3, 0, v6);
}

uint64_t sub_18095F4F8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  *(_DWORD *)(a1 + 108) = 0;
  *(_DWORD *)(a1 + 112) = a4;
  int v10 = uprv_max((a4 - 15), 0);
  int v11 = a4 - v10;
  icu::UnicodeString::doExtract((char *)a3, v10, a4 - v10, a1 + 116, 0);
  *(_WORD *)(a1 + 116 + 2LL * v1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0;
  unsigned int v12 = *(unsigned __int16 *)(a3 + 8);
  int v13 = (__int16)v12;
  int v14 = v12 >> 5;
  if (v13 >= 0) {
    int v15 = v14;
  }
  else {
    int v15 = *(_DWORD *)(a3 + 12);
  }
  int v16 = uprv_min((a4 + 15), v15);
  int v17 = v16 - a4;
  uint64_t v18 = a1 + 148;
  icu::UnicodeString::doExtract((char *)a3, a4, v16 - a4, v18, 0);
  *(_WORD *)(v18 + 2LL * v17) = 0;
  *a5 = a2;
  return a4;
}

BOOL sub_18095F5D4(icu::ICU_Utility *a1, const icu::UnicodeString *a2, int *a3)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  __int128 v9 = L"use ";
  icu::UnicodeString::UnicodeString(v10, 1LL, &v9);
  LODWORD(a3) = icu::ICU_Utility::parsePattern(a1, a2, a3, (uint64_t)v10, 0LL, v6);
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v10);
  return (int)a3 >= 0;
}

uint64_t sub_18095F68C(uint64_t a1, icu::ICU_Utility *a2, int a3, int *a4, _DWORD *a5)
{
  v28[1] = *MEMORY[0x1895F89C0];
  v28[0] = 0LL;
  __int128 v9 = (const icu::UnicodeString *)(a3 + 4);
  uint64_t v26 = L"~variable range # #~;";
  icu::UnicodeString::UnicodeString(v27, 1LL, &v26);
  uint64_t v11 = icu::ICU_Utility::parsePattern(a2, v9, a4, (uint64_t)v27, (const icu::UnicodeString *)v28, v10);
  icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v27);
  if ((v11 & 0x80000000) != 0)
  {
    BOOL v25 = L"~maximum backup #~;";
    icu::UnicodeString::UnicodeString(v27, 1LL, &v25);
    uint64_t v11 = icu::ICU_Utility::parsePattern(a2, v9, a4, (uint64_t)v27, (const icu::UnicodeString *)v28, v15);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v27);
    if ((v11 & 0x80000000) != 0)
    {
      unsigned int v24 = L"~nfd rules~;";
      icu::UnicodeString::UnicodeString(v27, 1LL, &v24);
      uint64_t v11 = icu::ICU_Utility::parsePattern(a2, v9, a4, (uint64_t)v27, 0LL, v17);
      icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v27);
      if ((v11 & 0x80000000) != 0)
      {
        unsigned int v23 = "~";
        icu::UnicodeString::UnicodeString(v27, 1LL, &v23);
        int v20 = icu::ICU_Utility::parsePattern(a2, v9, a4, (uint64_t)v27, 0LL, v19);
        icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v27);
        if (v20 < 0) {
          return 0xFFFFFFFFLL;
        }
        else {
          return v20;
        }
      }
    }
  }

  else
  {
    __int16 v13 = WORD2(v28[0]);
    if (SHIDWORD(v28[0]) >= 0x10000
      || (__int16 v14 = v28[0], (v28[0] & 0x80000000) != 0)
      || SLODWORD(v28[0]) > SHIDWORD(v28[0]))
    {
      *a5 = 65562;
    }

    else
    {
      *(_WORD *)(*(void *)(a1 + 96) + 1162LL) = v28[0];
      if (!*(_DWORD *)(a1 + 16))
      {
        *(_WORD *)(a1 + 424) = v14;
        *(_WORD *)(a1 + 426) = v13 + 1;
      }
    }
  }

  return v11;
}

uint64_t sub_18095F8A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v103 = *MEMORY[0x1895F89C0];
  unsigned int v10 = *(unsigned __int16 *)(a1 + 328);
  if ((v10 & 1) != 0)
  {
    icu::UnicodeString::unBogus(a1 + 320);
    goto LABEL_8;
  }

  if ((v10 & 0x8000) != 0)
  {
    if (!*(_DWORD *)(a1 + 332)) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  if (v10 >> 5) {
LABEL_7:
  }
    *(_WORD *)(a1 + 328) &= 0x1Fu;
LABEL_8:
  icu::UVector::removeAllElements(a1 + 384);
  uint64_t v93 = 0LL;
  __int128 v95 = 0u;
  uint64_t v98 = 0LL;
  __int128 v100 = 0u;
  __int128 v96 = 0u;
  __int128 v97 = 0u;
  unsigned int v94 = off_18971B688;
  LOWORD(v95) = 2;
  uint64_t v102 = a1;
  uint64_t v99 = -1LL;
  LODWORD(v10icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = -1;
  *(void *)((char *)&v100 + 4) = 0LL;
  WORD6(v10icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  uint64_t v101 = 1LL;
  uint64_t v83 = 0LL;
  memset(v85, 0, sizeof(v85));
  uint64_t v86 = 0LL;
  unsigned int v84 = (UChar *)off_18971B688;
  LOWORD(v85[0]) = 2;
  uint64_t v92 = a1;
  uint64_t v87 = -1LL;
  int v88 = -1;
  uint64_t v89 = 0LL;
  int v90 = 0;
  uint64_t v91 = 1LL;
  if ((*(_WORD *)(a1 + 440) & 1) != 0) {
    __int16 v11 = 2;
  }
  else {
    __int16 v11 = *(_WORD *)(a1 + 440) & 0x1F;
  }
  *(_WORD *)(a1 + 44icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v11;
  uint64_t v12 = sub_18095D188((uint64_t)&v93, a2, a3, a4, a5);
  __int16 v13 = (void *)*(unsigned int *)a5;
  uint64_t v14 = v12;
  if ((_DWORD)v12 == (_DWORD)a4
    || ((uint64_t v15 = (int)v12 - 1LL, v16 = *(unsigned __int16 *)(a2 + 8), (v16 & 0x8000u) == 0)
      ? (unsigned int v17 = v16 >> 5)
      : (unsigned int v17 = *(_DWORD *)(a2 + 12)),
        v17 <= v15
      ? (int v19 = 0xFFFF)
      : ((v16 & 2) != 0 ? (uint64_t v18 = a2 + 10) : (uint64_t v18 = *(void *)(a2 + 24)), v19 = *(unsigned __int16 *)(v18 + 2 * v15)),
        !u_strchr((const UChar *)asc_180A3BA2C, v19)))
  {
    int v24 = 65547;
    goto LABEL_39;
  }

  if (v19 == 60 && (int)v14 < (int)a4)
  {
    unsigned int v20 = *(unsigned __int16 *)(a2 + 8);
    if ((v20 & 0x8000u) == 0) {
      unsigned int v21 = v20 >> 5;
    }
    else {
      unsigned int v21 = *(_DWORD *)(a2 + 12);
    }
    int v19 = 60;
    if (v21 > v14)
    {
      if ((v20 & 2) != 0) {
        uint64_t v22 = a2 + 10;
      }
      else {
        uint64_t v22 = *(void *)(a2 + 24);
      }
      int v23 = *(unsigned __int16 *)(v22 + 2LL * (int)v14);
      if (v23 == 62) {
        uint64_t v14 = (v14 + 1);
      }
      else {
        uint64_t v14 = v14;
      }
      if (v23 == 62) {
        int v19 = 126;
      }
      else {
        int v19 = 60;
      }
    }
  }

  else
  {
    switch(v19)
    {
      case 8592:
        int v19 = 60;
        break;
      case 8596:
        int v19 = 126;
        break;
      case 8594:
        int v19 = 62;
        break;
    }
  }

  uint64_t v26 = sub_18095D188((uint64_t)&v83, a2, v14, a4, a5);
  __int16 v13 = (void *)*(unsigned int *)a5;
  uint64_t v30 = v26;
  if ((int)v26 < (int)a4)
  {
    unsigned int v31 = v26 - 1;
    unsigned int v32 = *(unsigned __int16 *)(a2 + 8);
    unsigned int v33 = (v32 & 0x8000u) == 0 ? v32 >> 5 : *(_DWORD *)(a2 + 12);
    if (v33 <= v31
      || ((v32 & 2) != 0 ? (uint64_t v34 = a2 + 10) : (uint64_t v34 = *(void *)(a2 + 24)), *(_WORD *)(v34 + 2LL * (int)v31) != 59))
    {
      int v24 = 65555;
      goto LABEL_39;
    }
  }

  unsigned int v35 = *(unsigned __int16 *)(a1 + 440);
  if (v19 == 61)
  {
    if ((v35 & 0x8000) != 0) {
      unsigned int v36 = *(_DWORD *)(a1 + 444);
    }
    else {
      unsigned int v36 = v35 >> 5;
    }
    if (!v36)
    {
      uint64_t v25 = a1;
      int v24 = 0x10000;
      goto LABEL_40;
    }

    if ((__int16)v95 < 0)
    {
      if (DWORD1(v95) != 1)
      {
LABEL_85:
        uint64_t v25 = a1;
        int v24 = 65541;
        goto LABEL_40;
      }
    }

    else if ((v95 & 0xFFE0) != 0x20)
    {
      goto LABEL_85;
    }

    if ((v95 & 2) != 0) {
      uint64_t v39 = (unsigned __int16 *)&v95 + 1;
    }
    else {
      uint64_t v39 = (unsigned __int16 *)v96;
    }
    int v40 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)BYTE1(v90), (icu::UMemory *)0x40, v27);
    if (!v40)
    {
      uint64_t v25 = a1;
      int v24 = 7;
      goto LABEL_40;
    }

    uint64_t v41 = (uint64_t)v40;
    icu::UnicodeString::UnicodeString(v40, &v84);
    sub_1807C33C4((uint64_t *)(a1 + 232), (UChar **)(a1 + 432), v41, (int *)a5);
    __int16 v13 = (void *)((unsigned __int16)(*(_WORD *)(a1 + 426))++ + 1);
LABEL_84:
    a3 = v30;
    goto LABEL_48;
  }

  if ((v35 & 0x8000) != 0) {
    unsigned int v37 = *(_DWORD *)(a1 + 444);
  }
  else {
    unsigned int v37 = v35 >> 5;
  }
  if (v37)
  {
    int v24 = 65554;
    goto LABEL_39;
  }

  else {
    int v38 = *(unsigned __int16 *)(a1 + 328) >> 5;
  }
  if (v38 > *(_DWORD *)(a1 + 392)) {
    sub_18095F4F8(a1, 65553, a2, a3, a5);
  }
  unint64_t v42 = 0LL;
  while ((*(__int16 *)(a1 + 328) & 0x80000000) == 0)
  {
    unint64_t v43 = (unint64_t)*(unsigned __int16 *)(a1 + 328) >> 5;
LABEL_95:
    if (v43 > v42)
    {
      uint64_t v44 = a1 + 330;
      if ((*(_WORD *)(a1 + 328) & 2) == 0) {
        uint64_t v44 = *(void *)(a1 + 344);
      }
      if (!*(_WORD *)(v44 + 2 * v42)) {
        sub_18095F4F8(a1, 65568, a2, a3, a5);
      }
    }

    ++v42;
  }

  if ((uint64_t)v42 < *(int *)(a1 + 332))
  {
    unint64_t v43 = *(unsigned int *)(a1 + 332);
    goto LABEL_95;
  }

unint64_t utrans_stripRules(unsigned __int16 *a1, int a2, char *a3, _DWORD *a4)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  bzero(a3, 2 * a2);
  unint64_t v7 = a3;
  if (a2 >= 1)
  {
    BOOL v8 = 0;
    __int128 v9 = 0uLL;
    unint64_t v7 = a3;
    unint64_t v10 = (unint64_t)&a1[a2];
    while (1)
    {
      unsigned int v11 = *a1;
      if ((v11 & 0xFC00) == 0xD800)
      {
        unsigned int v11 = a1[1] + (v11 << 10) - 56613888;
        a1 += 2;
      }

      else
      {
        ++a1;
        if (v11 == 39)
        {
          BOOL v8 = !v8;
          goto LABEL_54;
        }
      }

      if (v8)
      {
        BOOL v8 = 1;
        goto LABEL_36;
      }

      if (v11 != 92) {
        break;
      }
      if ((unint64_t)a1 >= v10)
      {
        BOOL v8 = 0;
        LOWORD(v1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 92;
        goto LABEL_54;
      }

      unsigned int v12 = *a1;
      LOWORD(v1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 92;
      if (v12 <= 0xC)
      {
        if (v12 != 10) {
          goto LABEL_51;
        }
      }

      else if (v12 != 13)
      {
        if (v12 == 39)
        {
          BOOL v8 = 1;
        }

        else
        {
          if (v12 == 117 && (unint64_t)(a1 + 5) < v10)
          {
            int v27 = 0;
            void v28[2] = v9;
            v28[3] = v9;
            v28[0] = v9;
            v28[1] = v9;
            icu::UnicodeString::UnicodeString((uint64_t)v28, (uint64_t)a1, 5LL);
            __int16 v13 = (icu::PatternProps *)icu::UnicodeString::unescapeAt((icu::UnicodeString *)v28, &v27);
            if ((_DWORD)v13 == -1 || !v27)
            {
              *a4 = 9;
              icu::UnicodeString::~UnicodeString((void *)9, (icu::UnicodeString *)v28);
              return 0LL;
            }

            unsigned int v11 = v13;
            if (icu::PatternProps::isWhiteSpace(v13) || u_iscntrl(v11))
            {
              unsigned int v11 = 92;
            }

            else
            {
              int v24 = u_ispunct(v11);
              if (!v24) {
                a1 += 5;
              }
              uint64_t v14 = 92LL;
              if (v24) {
                unsigned int v11 = 92;
              }
            }

            icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)v28);
            BOOL v8 = 0;
            __int128 v9 = 0uLL;
            goto LABEL_36;
          }

uint64_t sub_1809603CC( uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, int a6, int a7, uint64_t a8, int a9, char a10, char a11, uint64_t a12, int *a13)
{
  *(void *)a1 = off_18972A028;
  *(void *)(a1 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = off_18971B688;
  uint64_t v14 = a1 + 40;
  *(_WORD *)(a1 + 48) = 2;
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 128) = a12;
  if (*a13 <= 0)
  {
    unsigned int v16 = a6;
    if ((a3 & 0x80000000) != 0)
    {
      a3 = 0;
    }

    else
    {
      unsigned int v18 = *(unsigned __int16 *)(a2 + 8);
      int v19 = (__int16)v18;
      signed int v20 = v18 >> 5;
      if (v19 < 0) {
        signed int v20 = *(_DWORD *)(a2 + 12);
      }
    }

    *(_DWORD *)(a1 + 116) = a3;
    if ((a4 & 0x80000000) != 0)
    {
      unsigned int v24 = *(unsigned __int16 *)(a2 + 8);
      int v25 = (__int16)v24;
      unsigned int v26 = v24 >> 5;
      if (v25 >= 0) {
        a4 = v26;
      }
      else {
        a4 = *(_DWORD *)(a2 + 12);
      }
    }

    else
    {
      if (a3 > a4) {
        goto LABEL_21;
      }
      unsigned int v21 = *(unsigned __int16 *)(a2 + 8);
      int v22 = (__int16)v21;
      signed int v23 = v21 >> 5;
      if (v22 < 0) {
        signed int v23 = *(_DWORD *)(a2 + 12);
      }
    }

    *(_DWORD *)(a1 + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = a4 - a3;
    unsigned int v27 = *(unsigned __int16 *)(a5 + 8);
    if (a6 < 0)
    {
      if ((v27 & 0x8000) != 0) {
        unsigned int v16 = *(_DWORD *)(a5 + 12);
      }
      else {
        unsigned int v16 = v27 >> 5;
      }
    }

    else
    {
      int v28 = (__int16)v27;
      signed int v29 = v27 >> 5;
      if (v28 < 0) {
        signed int v29 = *(_DWORD *)(a5 + 12);
      }
      if (v29 < a6)
      {
LABEL_21:
        int v30 = 1;
LABEL_22:
        *a13 = v30;
        return a1;
      }
    }

    *(void *)(a1 + 104) = a8;
    *(_DWORD *)(a1 + 112) = a9;
    icu::UnicodeString::operator=((UChar **)(a1 + 40), (UChar **)a2);
    char v33 = a10 != 0;
    if (a11) {
      v33 |= 2u;
    }
    *(_BYTE *)(a1 + 124) = v33;
    *(void *)(a1 + 8) = 0LL;
    uint64_t v34 = (uint64_t *)*(unsigned int *)(a1 + 116);
    if ((int)v34 >= 1)
    {
      unsigned int v35 = icu::UMemory::operator new(v34, (icu::UMemory *)0x70, v32);
      if (!v35)
      {
        *(void *)(a1 + 8) = 0LL;
        goto LABEL_50;
      }

      *(void *)(a1 + 8) = sub_180990750((uint64_t)v35, v14, 0LL, *(unsigned int *)(a1 + 116), 0, *(void *)(a1 + 128));
    }

    *(void *)(a1 + 16) = 0LL;
    unsigned int v36 = (uint64_t *)*(unsigned int *)(a1 + 120);
    if ((int)v36 >= 1)
    {
      unsigned int v37 = icu::UMemory::operator new(v36, (icu::UMemory *)0x70, v32);
      if (!v37)
      {
        *(void *)(a1 + 16) = 0LL;
        goto LABEL_50;
      }

      *(void *)(a1 + 16) = sub_180990750( (uint64_t)v37,  v14,  *(unsigned int *)(a1 + 116),  (*(_DWORD *)(a1 + 120) + *(_DWORD *)(a1 + 116)),  0,  *(void *)(a1 + 128));
    }

    else {
      int v38 = *(unsigned __int16 *)(a1 + 48) >> 5;
    }
    uint64_t v39 = (uint64_t *)(v38 - *(_DWORD *)(a1 + 120) - *(_DWORD *)(a1 + 116));
    *(void *)(a1 + 24) = 0LL;
    int v40 = icu::UMemory::operator new(v39, (icu::UMemory *)0x70, v32);
    if (v40)
    {
      else {
        uint64_t v41 = *(unsigned __int16 *)(a1 + 48) >> 5;
      }
      *(void *)(a1 + 24) = sub_180990750( (uint64_t)v40,  v14,  (*(_DWORD *)(a1 + 120) + *(_DWORD *)(a1 + 116)),  v41,  0,  *(void *)(a1 + 128));
LABEL_47:
      unint64_t v42 = icu::UMemory::operator new(v39, (icu::UMemory *)0x60, v32);
      if (v42)
      {
        *(void *)(a1 + 32) = sub_180991118((uint64_t)v42, (UChar **)a5, v16 + a7, *(void *)(a1 + 128));
        return a1;
      }

      *(void *)(a1 + 32) = 0LL;
      goto LABEL_50;
    }

    *(void *)(a1 + 24) = 0LL;
LABEL_50:
    int v30 = 7;
    goto LABEL_22;
  }

  return a1;
}

uint64_t sub_180960668( uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, int a6, int a7, uint64_t a8, int a9, char a10, char a11, uint64_t a12, int *a13)
{
  return sub_1809603CC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_18096068C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_18972A028;
  *(void *)(a1 + 8) = 0LL;
  int v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 40), (UChar **)(a2 + 40));
  *(void *)(a1 + 116) = *(void *)(a2 + 116);
  *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 104) = 0LL;
  *(_DWORD *)(a1 + 112) = 0;
  uint64_t v5 = *(unsigned int *)(a2 + 112);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = uprv_malloc(8 * v5);
    *(void *)(a1 + 104) = v6;
    memcpy(v6, *(const void **)(a2 + 104), 8LL * *(int *)(a2 + 112));
  }

  uint64_t v7 = *(void *)(a2 + 8);
  if (v7) {
    *int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24LL))(v7);
  }
  uint64_t v8 = *(void *)(a2 + 16);
  if (v8) {
    *(void *)(a1 + 16) = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 24LL))(v8);
  }
  uint64_t v9 = *(void *)(a2 + 24);
  if (v9) {
    *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24LL))(v9);
  }
  *(void *)(a1 + 32) = (*(uint64_t (**)(void))(**(void **)(a2 + 32) + 24LL))(*(void *)(a2 + 32));
  return a1;
}

uint64_t sub_180960784(uint64_t a1)
{
  *(void *)a1 = off_18972A028;
  uprv_free(*(void **)(a1 + 104));
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 40));
  return a1;
}

void sub_180960814(uint64_t a1)
{
  uint64_t v1 = (void *)sub_180960784(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_180960828(uint64_t a1)
{
  return *(_DWORD *)(a1 + 116) + (*(_BYTE *)(a1 + 124) & 1u);
}

uint64_t sub_18096083C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 116);
  else {
    uint64_t v3 = (uint64_t *)(*(unsigned __int16 *)(a1 + 48) >> 5);
  }
  if (v2 == (_DWORD)v3)
  {
    return -1;
  }

  else
  {
    int v5 = icu::UnicodeString::char32At(v3, (icu::UnicodeString *)(a1 + 40), v2);
    unsigned __int8 v6 = v5;
    uint64_t v7 = sub_18095CEB0(*(void *)(a1 + 128), v5);
    __int16 v4 = v6;
    if (v7) {
      return -1;
    }
  }

  return v4;
}

uint64_t sub_1809608AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 8) + 32LL))(v2 + 8);
  }
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 8) + 32LL))(v2 + 8);
  }
  else {
    return 1LL;
  }
}

uint64_t sub_1809608D4(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int16 *)(a1 + 48);
  int v5 = v4 >> 5;
  else {
    int32_t v6 = v4 >> 5;
  }
  int v7 = *(_DWORD *)(a1 + 116);
  int v8 = *(_DWORD *)(a2 + 116);
  unsigned int v9 = *(unsigned __int16 *)(a2 + 48);
  if ((v9 & 0x8000u) == 0) {
    unsigned int v10 = v9 >> 5;
  }
  else {
    unsigned int v10 = *(_DWORD *)(a2 + 52);
  }
  if ((v4 & 1) != 0)
  {
    int v12 = (v9 & 1) == 0;
  }

  else
  {
    if ((v4 & 0x8000u) != 0) {
      int v5 = *(_DWORD *)(a1 + 52);
    }
    if ((v4 & 2) != 0) {
      uint64_t v11 = a1 + 50;
    }
    else {
      uint64_t v11 = *(void *)(a1 + 64);
    }
    int v12 = icu::UnicodeString::doCompare( a2 + 40,  v8 - v7,  v6,  v11,  v5 & (v5 >> 31),  v5 & ~(v5 >> 31));
  }

  int v13 = v6 - v7;
  int v14 = v10 - v8;
  if (v8 == v7 && v13 == v14 && *(_DWORD *)(a1 + 120) <= *(_DWORD *)(a2 + 120) && !v12)
  {
    int v15 = *(unsigned __int8 *)(a1 + 124);
    unsigned int v16 = *(unsigned __int8 *)(a2 + 124);
    int v17 = (v16 >> 1) & 1;
    if ((v16 & 1) == 0) {
      int v17 = 0;
    }
    if ((v15 & 3) != 0) {
      unsigned int v18 = v17;
    }
    else {
      unsigned int v18 = 1;
    }
    if (v15 == v16) {
      return 1LL;
    }
    else {
      return v18;
    }
  }

  else
  {
    return v8 >= v7 && (v13 < v14 || v13 == v14 && *(_DWORD *)(a1 + 120) <= *(_DWORD *)(a2 + 120)) && v12 == 0;
  }

uint64_t sub_180960A18(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*(void *)(a1 + 104) && *(int *)(a1 + 112) >= 1)
  {
    uint64_t v8 = 0LL;
    do
      sub_180991050(*(void *)(*(void *)(a1 + 104) + 8 * v8++));
    while (v8 < *(int *)(a1 + 112));
  }

  int v9 = *a3;
  uint64_t v10 = (*a3 - 1);
  if (*a3 >= 1)
  {
    else {
      int v11 = -1;
    }
    uint64_t v10 = (v11 + v9);
  }

  int v12 = a3[2];
  uint64_t v13 = (v12 - 1);
  if (v12 >= 1)
  {
    else {
      int v14 = -1;
    }
    uint64_t v13 = (v14 + v12);
  }

  unsigned int v31 = v13;
  uint64_t v15 = *(void *)(a1 + 8);
  if (v15)
  {
    int v16 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *, uint64_t, void))(*(void *)v15 + 56LL))( v15,  a2,  &v31,  v10,  0LL);
    uint64_t result = 0LL;
    if (v16 != 2) {
      return result;
    }
    uint64_t v13 = v31;
  }

  if ((v13 & 0x80000000) != 0)
  {
    int v18 = 1;
  }

  else
  {
    int v18 = 1;
    if ((*(int (**)(uint64_t))(*(void *)a2 + 64LL))(a2) > (int)v13)
    {
      else {
        int v18 = 2;
      }
    }
  }

  if ((*(_BYTE *)(a1 + 124) & 1) != 0 && v31 != (_DWORD)v10) {
    return 0LL;
  }
  uint64_t v19 = a3[2];
  unsigned int v31 = a3[2];
  uint64_t v20 = *(void *)(a1 + 16);
  if (v20)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *, void, uint64_t))(*(void *)v20 + 56LL))( v20,  a2,  &v31,  a3[3],  a4);
    if ((_DWORD)result != 2) {
      return result;
    }
    uint64_t v19 = v31;
  }

  uint64_t v21 = *(void *)(a1 + 24);
  if (v21)
  {
    if ((_DWORD)a4 && (_DWORD)v19 == a3[3]) {
      return 1LL;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *, void, uint64_t))(*(void *)v21 + 56LL))( v21,  a2,  &v31,  a3[1],  a4);
    if ((_DWORD)result != 2) {
      return result;
    }
  }

  if ((*(_BYTE *)(a1 + 124) & 2) == 0) {
    goto LABEL_35;
  }
  if (v31 != a3[1]) {
    return 0LL;
  }
  if (!(_DWORD)a4)
  {
LABEL_35:
    int v30 = 0;
    uint64_t v22 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 40LL))(*(void *)(a1 + 32));
    int v23 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, int *))(*(void *)v22 + 16LL))( v22,  a2,  a3[2],  v19,  &v30);
    int v24 = a3[1];
    int v25 = a3[2] - v19 + v23;
    v31 += v25;
    uint64_t v26 = v31;
    int v27 = a3[3] + v25;
    a3[3] = v27;
    a3[1] = v24 + v25;
    uint64_t v28 = uprv_min(v26, v27);
    int v29 = uprv_min(v28, v30);
    a3[2] = uprv_max((v18 + v13), v29);
    return 2LL;
  }

  return 1LL;
}

icu::ICU_Utility *sub_180960CA8( uint64_t a1, icu::ICU_Utility *this, icu::UnicodeMatcher *a3, uint64_t a4, icu::UnicodeString *a5)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  __int128 v39 = 0u;
  uint64_t v42 = 0LL;
  __int128 v41 = 0u;
  __int128 v40 = 0u;
  int v38 = off_18971B688;
  LOWORD(v39) = 2;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  uint64_t v37 = 0LL;
  __int128 v36 = 0u;
  char v33 = off_18971B688;
  LOWORD(v34) = 2;
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = *(void *)(a1 + 24) != 0LL;
  }
  if ((*(_BYTE *)(a1 + 124) & 1) != 0)
  {
    v32[0] = 94;
    icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)v32, 0, 1LL);
    uint64_t v8 = *(void *)(a1 + 8);
  }

  if (v8) {
    uint64_t v10 = (icu::UnicodeString *)(v8 + 8);
  }
  else {
    uint64_t v10 = 0LL;
  }
  icu::ICU_Utility::appendToRule(this, v10, a3, (icu::UnicodeString *)&v33, a5);
  if (v9)
  {
    icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)0x7B, 1, (int)a3, (icu::UnicodeString *)&v33, v12);
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14) {
      uint64_t v15 = (icu::UnicodeString *)(v14 + 8);
    }
    else {
      uint64_t v15 = 0LL;
    }
    icu::ICU_Utility::appendToRule(this, v15, a3, (icu::UnicodeString *)&v33, v13);
    icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)0x7D, 1, (int)a3, (icu::UnicodeString *)&v33, v16);
  }

  else
  {
    uint64_t v18 = *(void *)(a1 + 16);
    if (v18) {
      uint64_t v19 = (icu::UnicodeString *)(v18 + 8);
    }
    else {
      uint64_t v19 = 0LL;
    }
    icu::ICU_Utility::appendToRule(this, v19, a3, (icu::UnicodeString *)&v33, v11);
  }

  uint64_t v20 = *(void *)(a1 + 24);
  if (v20) {
    uint64_t v21 = (icu::UnicodeString *)(v20 + 8);
  }
  else {
    uint64_t v21 = 0LL;
  }
  icu::ICU_Utility::appendToRule(this, v21, a3, (icu::UnicodeString *)&v33, v17);
  if ((*(_BYTE *)(a1 + 124) & 2) != 0)
  {
    v32[0] = 36;
    icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)v32, 0, 1LL);
  }

  unsigned int v31 = &unk_180A3BA76;
  icu::UnicodeString::UnicodeString(v32, 1LL, &v31);
  icu::ICU_Utility::appendToRule( this,  (icu::UnicodeString *)v32,  (const icu::UnicodeString *)1,  (int)a3,  (icu::UnicodeString *)&v33,  v22);
  icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)v32);
  uint64_t v24 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 40LL))(*(void *)(a1 + 32));
  int v25 = (icu::UnicodeString *)(*(uint64_t (**)(uint64_t, void (***)(icu::UnicodeString *__hidden), icu::UnicodeMatcher *))(*(void *)v24 + 24LL))( v24,  &v38,  a3);
  icu::ICU_Utility::appendToRule(this, v25, (const icu::UnicodeString *)1, (int)a3, (icu::UnicodeString *)&v33, v26);
  icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)0x3B, 1, (int)a3, (icu::UnicodeString *)&v33, v27);
  icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v33);
  icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)&v38);
  return this;
}

uint64_t sub_180960F24(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 128) = a2;
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 48LL))(v4, a2);
  }
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 48LL))(v5, a2);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 48LL))(v6, a2);
  }
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 48LL))(*(void *)(a1 + 32), a2);
}

icu::UnicodeSet *sub_180960FA0(icu::UnicodeSet *result, icu::UnicodeSet *a2)
{
  uint64_t v2 = (uint64_t *)*((unsigned int *)result + 30);
  if ((int)v2 >= 1)
  {
    uint64_t v4 = result;
    int v5 = *((_DWORD *)result + 29);
    int v6 = (_DWORD)v2 + v5;
    int v7 = (icu::UnicodeSet *)((char *)result + 40);
    do
    {
      unsigned int v8 = icu::UnicodeString::char32At(v2, v7, v5);
      if (v8 < 0x10000) {
        int v9 = 1;
      }
      else {
        int v9 = 2;
      }
      uint64_t v10 = sub_18095CEB0(*((void *)v4 + 16), v8);
      if (v10) {
        uint64_t result = (icu::UnicodeSet *)(*(uint64_t (**)(uint64_t, icu::UnicodeSet *))(*(void *)v10 + 40LL))( v10,  a2);
      }
      else {
        uint64_t result = icu::UnicodeSet::add(a2, v8);
      }
      v5 += v9;
    }

    while (v5 < v6);
  }

  return result;
}

uint64_t sub_180961048(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 40LL))(*(void *)(a1 + 32));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 32LL))(v3, a2);
}

void *sub_180961080(void *a1, int *a2)
{
  *a1 = off_18972A078;
  uint64_t v4 = a1 + 1;
  bzero(a1 + 1, 0x418uLL);
  int v7 = icu::UMemory::operator new(v6, (icu::UMemory *)0x28, v5);
  if (v7)
  {
    uint64_t v8 = icu::UVector::UVector((uint64_t)v7, (uint64_t)sub_180961120, 0LL, a2);
    if (*a2 <= 0) {
      *uint64_t v4 = v8;
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
    }
  }

  else if (*a2 <= 0)
  {
    *a2 = 7;
  }

  return a1;
}

uint64_t sub_180961120(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t sub_180961138(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0LL;
  uint64_t v4 = (icu::UVector **)(a1 + 8);
  *(void *)a1 = off_18972A078;
  *(void *)(a1 + 16) = 0LL;
  *(_DWORD *)(a1 + 1052) = *(_DWORD *)(a2 + 1052);
  memcpy((void *)(a1 + 24), (const void *)(a2 + 24), 0x404uLL);
  UErrorCode v19 = U_ZERO_ERROR;
  int v7 = icu::UMemory::operator new(v6, (icu::UMemory *)0x28, v5);
  if (v7)
  {
    uint64_t v8 = icu::UVector::UVector((uint64_t)v7, (uint64_t)sub_180961120, 0LL, (int *)&v19);
    uint64_t v10 = (uint64_t *)v19;
    if (v19 <= U_ZERO_ERROR)
    {
      *uint64_t v4 = (icu::UVector *)v8;
      uint64_t v11 = *(void *)(a2 + 8);
      if (v11)
      {
        int v12 = *(_DWORD *)(v11 + 8);
        if (v12 >= 1)
        {
          signed int v13 = 0;
          do
          {
            uint64_t v14 = icu::UMemory::operator new(v10, (icu::UMemory *)0x88, v9);
            if (v14)
            {
              uint64_t v15 = icu::UVector::elementAt(*(icu::UVector **)(a2 + 8), v13);
              sub_180960780((uint64_t)v14, v15);
            }

            else if (v19 <= U_ZERO_ERROR)
            {
              UErrorCode v19 = U_MEMORY_ALLOCATION_ERROR;
            }

            icu::UVector::adoptElement(*v4, v14, &v19);
            ++v13;
            uint64_t v10 = (uint64_t *)v19;
          }

          while (v13 < v12 && v19 < U_ILLEGAL_ARGUMENT_ERROR);
        }
      }

      if (*(void *)(a2 + 16) && (int)v10 <= 0)
      {
        uint64_t v18 = 0LL;
        memset(v17, 0, sizeof(v17));
        (*(void (**)(uint64_t, _OWORD *, UErrorCode *))(*(void *)a1 + 32LL))(a1, v17, &v19);
      }
    }

    else
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
    }
  }

  return a1;
}

uint64_t sub_1809612AC(uint64_t a1)
{
  *(void *)a1 = off_18972A078;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uprv_free(*(void **)(a1 + 16));
  return a1;
}

void sub_1809612F4(void *a1)
{
  *(void *)a1 = off_18972A078;
  uint64_t v2 = *((void *)a1 + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uprv_free(*((void **)a1 + 2));
  icu::UMemory::operator delete(a1);
}

uint64_t sub_18096133C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 1048);
  if ((int)v2 >= 1)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0LL;
    uint64_t v6 = 8 * v2;
    do
    {
      uint64_t result = sub_180960F24(*(void *)(*(void *)(v4 + 16) + v5), a2);
      v5 += 8LL;
    }

    while (v6 != v5);
  }

  return result;
}

uint64_t sub_180961394(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1052);
}

void sub_18096139C(uint64_t a1, void *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    int v6 = (*(uint64_t (**)(void *))(*(void *)a2 + 16LL))(a2);
    if (v6 > *(_DWORD *)(a1 + 1052)) {
      *(_DWORD *)(a1 + 1052) = v6;
    }
    uprv_free(*(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0LL;
  }

void sub_180961408(uint64_t a1, void *a2, UErrorCode *a3)
{
  uint64_t v42 = *MEMORY[0x1895F89C0];
  uint64_t v6 = *(unsigned int *)(*(void *)(a1 + 8) + 8LL);
  uint64_t v36 = 0LL;
  memset(v35, 0, sizeof(v35));
  icu::UVector::UVector((icu::UVector *)v35, 2 * v6, a3);
  else {
    int v7 = v6;
  }
  uint64_t v8 = uprv_malloc((2 * v7));
  if (!v8) {
    goto LABEL_35;
  }
  unint64_t v9 = v8;
  if ((int)v6 >= 1)
  {
    for (uint64_t i = 0LL; i != v6; ++i)
    {
      uint64_t v11 = icu::UVector::elementAt(*(icu::UVector **)(a1 + 8), i);
      v9[i] = sub_18096083C(v11);
    }
  }

  for (uint64_t j = 0LL; j != 256; ++j)
  {
    *(_DWORD *)(a1 + 4 * j + 24) = DWORD2(v35[0]);
    if ((int)v6 >= 1)
    {
      for (uint64_t k = 0LL; v6 != k; ++k)
      {
        if ((__int16)v9[k] < 0)
        {
          uint64_t v14 = (void *)icu::UVector::elementAt(*(icu::UVector **)(a1 + 8), k);
        }

        else if (j == (unsigned __int16)v9[k])
        {
          uint64_t v14 = (void *)icu::UVector::elementAt(*(icu::UVector **)(a1 + 8), k);
LABEL_16:
          icu::UVector::addElement((icu::UVector *)v35, v14, a3);
        }
      }
    }
  }

  uprv_free(v9);
  *(_DWORD *)(a1 + 1048) = DWORD2(v35[0]);
  uprv_free(*(void **)(a1 + 16));
  if (!DWORD2(v35[0]))
  {
    *(void *)(a1 + 16) = 0LL;
    goto LABEL_36;
  }

  uint64_t v15 = uprv_malloc(8LL * SDWORD2(v35[0]));
  *(void *)(a1 + 16) = v15;
  if (!v15)
  {
LABEL_35:
    *a3 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_36;
  }

  if (SDWORD2(v35[0]) >= 1)
  {
    uint64_t v16 = 0LL;
    do
    {
      *(void *)(*(void *)(a1 + 16) + 8 * v16) = icu::UVector::elementAt((icu::UVector *)v35, v16);
      ++v16;
    }

    while (v16 < SDWORD2(v35[0]));
  }

  uint64_t v17 = 0LL;
  int v18 = *(_DWORD *)(a1 + 24);
  while (1)
  {
    ++v17;
    uint64_t v19 = a1 + 4 * v17;
    int v22 = *(_DWORD *)(v19 + 24);
    uint64_t v21 = (int *)(v19 + 24);
    LODWORD(v2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v22;
    if (v18 < v22 - 1) {
      break;
    }
LABEL_33:
    int v18 = v20;
    if (v17 == 256) {
      goto LABEL_36;
    }
  }

  uint64_t v23 = v18;
  while (1)
  {
    uint64_t v24 = v23++;
LABEL_32:
  }

  uint64_t v25 = *(void *)(*(void *)(a1 + 16) + 8 * v24);
  uint64_t v26 = v23;
  while (1)
  {
    uint64_t v27 = *(void *)(*(void *)(a1 + 16) + 8 * v26);
    ++v26;
    uint64_t v20 = *v21;
    if (v26 >= v20) {
      goto LABEL_32;
    }
  }

  *a3 = U_RULE_MASK_ERROR;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  uint64_t v41 = 0LL;
  __int128 v40 = 0u;
  uint64_t v37 = off_18971B688;
  LOWORD(v38) = 2;
  *a2 = -1LL;
  (*(void (**)(uint64_t, void (***)(icu::UnicodeString *__hidden), void))(*(void *)v25 + 32LL))( v25,  &v37,  0LL);
  if ((v38 & 0x8000u) == 0LL) {
    uint64_t v28 = (unsigned __int16)v38 >> 5;
  }
  else {
    uint64_t v28 = DWORD1(v38);
  }
  int v29 = uprv_min(v28, 15);
  icu::UnicodeString::doExtract((char *)&v37, 0, v29, (uint64_t)(a2 + 1), 0);
  v34[1] = a2 + 1;
  *((_WORD *)a2 + v29 + 4) = 0;
  if ((v38 & 1) != 0)
  {
    icu::UnicodeString::unBogus((uint64_t)&v37);
  }

  else
  {
    if ((v38 & 0x8000u) == 0LL) {
      int v30 = (unsigned __int16)v38 >> 5;
    }
    else {
      int v30 = DWORD1(v38);
    }
    if (v30)
    {
      LOBYTE(v38) = v38 & 0x1F;
      LOWORD(v38) = v38;
    }
  }

  (*(void (**)(uint64_t, void (***)(icu::UnicodeString *__hidden), void))(*(void *)v27 + 32LL))( v27,  &v37,  0LL);
  if ((v38 & 0x8000u) == 0LL) {
    uint64_t v31 = (unsigned __int16)v38 >> 5;
  }
  else {
    uint64_t v31 = DWORD1(v38);
  }
  int v32 = uprv_min(v31, 15);
  uint64_t v33 = (uint64_t)(a2 + 5);
  icu::UnicodeString::doExtract((char *)&v37, 0, v32, v33, 0);
  v34[0] = v33;
  *(_WORD *)(v33 + 2LL * v32) = 0;
  icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)&v37);
LABEL_36:
  icu::UVector::~UVector((icu::UVector *)v35);
}

uint64_t sub_1809617D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v8 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 80LL))(a2, *(unsigned int *)(a3 + 8));
  uint64_t v9 = *(int *)(a1 + 24 + 4LL * v8);
  uint64_t v10 = (int *)(a1 + 24 + 4LL * (v8 + 1));
  if ((int)v9 >= *v10)
  {
LABEL_5:
    BOOL v12 = (*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 80LL))(a2, *(unsigned int *)(a3 + 8)) >= 0x10000;
    uint64_t result = 1LL;
    if (v12) {
      int v14 = 2;
    }
    else {
      int v14 = 1;
    }
    *(_DWORD *)(a3 + 8) += v14;
  }

  else
  {
    while (1)
    {
      int v11 = sub_180960A18(*(void *)(*(void *)(a1 + 16) + 8 * v9), a2, (int *)a3, a4);
      if (v11 == 1) {
        return 0LL;
      }
      if (v11 == 2) {
        return 1LL;
      }
      if (++v9 >= *v10) {
        goto LABEL_5;
      }
    }
  }

  return result;
}

icu::UnicodeString *sub_1809618B0(uint64_t a1, icu::UnicodeString *this, uint64_t a3)
{
  int v6 = *(_DWORD *)(*(void *)(a1 + 8) + 8LL);
  unsigned int v7 = *((unsigned __int16 *)this + 4);
  if ((v7 & 1) != 0)
  {
    icu::UnicodeString::unBogus((uint64_t)this);
  }

  else
  {
    if ((v7 & 0x8000u) == 0) {
      unsigned int v8 = v7 >> 5;
    }
    else {
      unsigned int v8 = *((_DWORD *)this + 3);
    }
    if (v8) {
      *((_WORD *)this + 4) &= 0x1Fu;
    }
  }

  if (v6 >= 1)
  {
    for (unsigned int i = 0; i != v6; ++i)
    {
      if (i)
      {
        __int16 v12 = 10;
        icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v12, 0, 1LL);
      }

      uint64_t v10 = icu::UVector::elementAt(*(icu::UVector **)(a1 + 8), i);
      (*(void (**)(uint64_t, icu::UnicodeString *, uint64_t))(*(void *)v10 + 32LL))(v10, this, a3);
    }
  }

  return this;
}

icu::UnicodeSet *sub_180961984(uint64_t a1, icu::UnicodeSet *this, int a3)
{
  int v6 = *(_DWORD *)(*(void *)(a1 + 8) + 8LL);
  if (v6 >= 1)
  {
    for (unsigned int i = 0; i != v6; ++i)
    {
      unsigned int v8 = (icu::UnicodeSet *)icu::UVector::elementAt(*(icu::UVector **)(a1 + 8), i);
      if (a3) {
        sub_180961048((uint64_t)v8, (uint64_t)this);
      }
      else {
        sub_180960FA0(v8, this);
      }
    }
  }

  return this;
}

void *icu::RuleBasedTimeZone::getStaticClassID(icu::RuleBasedTimeZone *this)
{
  return &unk_18C535768;
}

void *icu::RuleBasedTimeZone::getDynamicClassID(icu::RuleBasedTimeZone *this)
{
  return &unk_18C535768;
}

icu::TimeZone *icu::RuleBasedTimeZone::RuleBasedTimeZone( icu::RuleBasedTimeZone *this, UChar **a2, icu::InitialTimeZoneRule *a3)
{
  uint64_t result = icu::BasicTimeZone::BasicTimeZone(this, a2);
  *(void *)uint64_t result = off_18972A0D0;
  *((void *)result + 9) = a3;
  *((void *)result + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
  *((void *)result + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0LL;
  *((void *)result + 12) = 0LL;
  *((_BYTE *)result + 104) = 0;
  return result;
}

{
  icu::TimeZone *result;
  uint64_t result = icu::BasicTimeZone::BasicTimeZone(this, a2);
  *(void *)uint64_t result = off_18972A0D0;
  *((void *)result + 9) = a3;
  *((void *)result + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
  *((void *)result + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0LL;
  *((void *)result + 12) = 0LL;
  *((_BYTE *)result + 104) = 0;
  return result;
}

icu::RuleBasedTimeZone *icu::RuleBasedTimeZone::RuleBasedTimeZone( icu::RuleBasedTimeZone *this, const icu::RuleBasedTimeZone *a2)
{
  *(void *)icu::BasicTimeZone::BasicTimeZone(this, (UChar **)a2) = off_18972A0D0;
  *((void *)this + 9) = (*(uint64_t (**)(void))(**((void **)a2 + 9) + 24LL))(*((void *)a2 + 9));
  *((void *)this + 12) = 0LL;
  *((_BYTE *)this + 104) = 0;
  *((void *)this + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = icu::RuleBasedTimeZone::copyRules(*((icu::UVector **)a2 + 10), v4);
  *((void *)this + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = icu::RuleBasedTimeZone::copyRules(*((icu::UVector **)a2 + 11), v5);
  if (*((_BYTE *)a2 + 104))
  {
    UErrorCode v7 = U_ZERO_ERROR;
    icu::RuleBasedTimeZone::complete((uint64_t)this, &v7);
  }

  return this;
}

icu::UVector *icu::RuleBasedTimeZone::copyRules@<X0>(icu::UVector *a1@<X1>, uint64_t *a2@<X8>)
{
  if (!a1) {
    return 0LL;
  }
  UErrorCode v12 = U_ZERO_ERROR;
  uint64_t v4 = *((unsigned int *)a1 + 2);
  uint64_t v5 = icu::UMemory::operator new(a2, (icu::UMemory *)0x28, (unint64_t)a1);
  int v6 = (icu::UVector *)v5;
  if (v5)
  {
    icu::UVector::UVector(v5, uprv_deleteUObject, 0LL, v4, &v12);
    if (v12 <= U_ZERO_ERROR)
    {
      unsigned int v8 = 0;
      while (1)
      {
        uint64_t v9 = icu::UVector::elementAt(a1, v8);
        uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 24LL))(v9);
        if (!v10 && v12 <= U_ZERO_ERROR) {
          UErrorCode v12 = U_MEMORY_ALLOCATION_ERROR;
        }
        icu::UVector::adoptElement(v6, v10, &v12);
        if (v12 >= U_ILLEGAL_ARGUMENT_ERROR) {
          break;
        }
        if ((_DWORD)v4 == ++v8) {
          return v6;
        }
      }
    }

    (*(void (**)(icu::UVector *))(*(void *)v6 + 8LL))(v6);
    return 0LL;
  }

  return v6;
}

uint64_t icu::RuleBasedTimeZone::complete(uint64_t this, UErrorCode *a2)
{
  uint64_t v80 = *MEMORY[0x1895F89C0];
  uint64_t v2 = this;
  if (*(_BYTE *)(this + 104)) {
    return this;
  }
  this = *(void *)(this + 88);
  if (this)
  {
    if (*(_DWORD *)(this + 8) != 2)
    {
      *a2 = U_INVALID_STATE_ERROR;
      return this;
    }

    uint64_t v5 = v2 + 80;
    uint64_t v4 = *(void *)(v2 + 80);
    if (!v4)
    {
      int v6 = *(icu::TimeZoneRule **)(v2 + 72);
      double v7 = -1.84303903e17;
      goto LABEL_60;
    }
  }

  else
  {
    uint64_t v5 = v2 + 80;
    uint64_t v4 = *(void *)(v2 + 80);
    if (!v4)
    {
LABEL_92:
      *(_BYTE *)(v2 + 104) = 1;
      return this;
    }
  }

  unint64_t v68 = (icu::UVector **)v5;
  int v6 = *(icu::TimeZoneRule **)(v2 + 72);
  size_t v8 = *(unsigned int *)(v4 + 8);
  if ((int)v8 < 1)
  {
    double v7 = -1.84303903e17;
    goto LABEL_59;
  }

  uint64_t v9 = (unsigned __int8 *)uprv_malloc(*(unsigned int *)(v4 + 8));
  uint64_t v10 = v9;
  if (!v9)
  {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_97;
  }

  bzero(v9, v8);
  double v7 = -1.84303903e17;
  while (2)
  {
    Rawint Offset = icu::TimeZoneRule::getRawOffset(v6);
    uint64_t DSTSavings = icu::TimeZoneRule::getDSTSavings(v6);
    uint64_t v79 = 0LL;
    __int128 v77 = 0u;
    __int128 v78 = 0u;
    __int128 v76 = 0u;
    double v75 = COERCE_DOUBLE(off_18971B688);
    LOWORD(v76) = 2;
    uint64_t v74 = 0LL;
    __int128 v72 = 0u;
    __int128 v73 = 0u;
    __int128 v71 = 0u;
    double v69 = 0.0;
    double v70 = COERCE_DOUBLE(off_18971B688);
    LOWORD(v7icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 2;
    icu::TimeZoneRule::getName((UChar **)v6, (UChar **)&v75);
    uint64_t v14 = 0LL;
    uint64_t v67 = 0LL;
    double v15 = 1.83882169e17;
    uint64_t v16 = v68;
    do
    {
      if (v10[v14]) {
        goto LABEL_13;
      }
      uint64_t v17 = (UChar **)icu::UVector::elementAt(*v16, v14);
      if (!(*((unsigned int (**)(UChar **, uint64_t, uint64_t, void, double *, double))*v17 + 9))( v17,  RawOffset,  DSTSavings,  0LL,  &v69,  v7))
      {
        v10[v14] = 1;
        goto LABEL_13;
      }

      icu::TimeZoneRule::getName(v17, (UChar **)&v70);
      if ((v71 & 1) != 0)
      {
        if ((v76 & 1) != 0) {
          goto LABEL_30;
        }
      }

      else
      {
        if ((v71 & 0x8000u) == 0LL) {
          int v18 = (unsigned __int16)v71 >> 5;
        }
        else {
          int v18 = DWORD1(v71);
        }
        if ((v76 & 0x8000u) == 0LL) {
          int v19 = (unsigned __int16)v76 >> 5;
        }
        else {
          int v19 = DWORD1(v76);
        }
        if ((v76 & 1) == 0
          && v18 == v19
          && icu::UnicodeString::doEquals((icu::UnicodeString *)&v70, (const icu::UnicodeString *)&v75, v18))
        {
LABEL_30:
          int v20 = icu::TimeZoneRule::getRawOffset((icu::TimeZoneRule *)v17);
          BOOL v48 = v20 == icu::TimeZoneRule::getRawOffset(v6);
          uint64_t v16 = v68;
          if (v48)
          {
            int v21 = icu::TimeZoneRule::getDSTSavings((icu::TimeZoneRule *)v17);
            BOOL v48 = v21 == icu::TimeZoneRule::getDSTSavings(v6);
            uint64_t v16 = v68;
            if (v48) {
              goto LABEL_13;
            }
          }
        }
      }

      if (v69 < v15)
      {
        double v15 = v69;
        uint64_t v67 = v17;
      }

void icu::RuleBasedTimeZone::~RuleBasedTimeZone(icu::RuleBasedTimeZone *this)
{
  *(void *)this = off_18972A0D0;
  uint64_t v2 = *((void *)this + 12);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *((void *)this + 12) = 0LL;
  icu::RuleBasedTimeZone::deleteRules(this);
  icu::BasicTimeZone::~BasicTimeZone(this);
}

{
  void *v1;
  icu::RuleBasedTimeZone::~RuleBasedTimeZone(this);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::RuleBasedTimeZone::deleteTransitions(icu::RuleBasedTimeZone *this)
{
  uint64_t result = *((void *)this + 12);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  *((void *)this + 12) = 0LL;
  return result;
}

uint64_t icu::RuleBasedTimeZone::deleteRules(icu::RuleBasedTimeZone *this)
{
  uint64_t v2 = *((void *)this + 9);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *((void *)this + 9) = 0LL;
  uint64_t v3 = *((void *)this + 10);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    *((void *)this + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
  }

  uint64_t result = *((void *)this + 11);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    *((void *)this + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0LL;
  }

  return result;
}

uint64_t icu::RuleBasedTimeZone::operator=(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 168LL))(a1))
  {
    icu::TimeZone::operator=(a1, a2);
    icu::RuleBasedTimeZone::deleteRules((icu::RuleBasedTimeZone *)a1);
    *(void *)(a1 + 72) = (*(uint64_t (**)(void))(**(void **)(a2 + 72) + 24LL))(*(void *)(a2 + 72));
    *(void *)(a1 + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = icu::RuleBasedTimeZone::copyRules(*(icu::UVector **)(a2 + 80), v4);
    *(void *)(a1 + 88) = icu::RuleBasedTimeZone::copyRules(*(icu::UVector **)(a2 + 88), v5);
    uint64_t v6 = *(void *)(a1 + 96);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
    *(void *)(a1 + 96) = 0LL;
    *(_BYTE *)(a1 + 104) = 0;
  }

  return a1;
}

uint64_t icu::RuleBasedTimeZone::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_1807F874C(*(void *)(*(void *)a1 - 8LL), *(void *)(*(void *)a2 - 8LL));
  if ((_DWORD)result)
  {
    uint64_t result = icu::TimeZone::operator==(a1, a2);
    if ((_DWORD)result) {
      return ((*(uint64_t (**)(void, void))(**(void **)(a1 + 72) + 40LL))( *(void *)(a1 + 72),  *(void *)(a2 + 72)) & 1) == 0 && sub_180962564(*(void *)(a1 + 80), *(icu::UVector **)(a2 + 80))
    }
          && sub_180962564(*(void *)(a1 + 88), *(icu::UVector **)(a2 + 88));
  }

  return result;
}

BOOL sub_180962564(unint64_t this, icu::UVector *a2)
{
  BOOL result = 0LL;
  if (this && a2)
  {
    int v5 = *(_DWORD *)(this + 8);
    if (v5 == *((_DWORD *)a2 + 2))
    {
      if (v5 < 1)
      {
        return 1LL;
      }

      else
      {
        uint64_t v6 = icu::UVector::elementAt((icu::UVector *)this, 0);
        uint64_t v7 = icu::UVector::elementAt(a2, 0);
        char v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 40LL))(v6, v7);
        BOOL result = 0LL;
        if ((v8 & 1) == 0)
        {
          unsigned int v9 = 1;
          do
          {
            signed int v10 = v9;
            if (v5 == v9) {
              break;
            }
            uint64_t v11 = icu::UVector::elementAt((icu::UVector *)this, v9);
            uint64_t v12 = icu::UVector::elementAt(a2, v10);
            int v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v11 + 40LL))(v11, v12);
            unsigned int v9 = v10 + 1;
          }

          while (!v13);
          return v10 >= v5;
        }
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t icu::RuleBasedTimeZone::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24LL))(a1) ^ 1;
}

uint64_t *icu::RuleBasedTimeZone::addTransitionRule(uint64_t *this, icu::TimeZoneRule *lpsrc, UErrorCode *a3)
{
  uint64_t v4 = *(unsigned int *)a3;
  if ((int)v4 <= 0)
  {
    uint64_t v6 = this;
    if (lpsrc
    {
      unsigned int v9 = (int *)v6[11];
      if (v9)
      {
        if (v9[2] >= 2)
        {
          UErrorCode v10 = U_INVALID_STATE_ERROR;
LABEL_10:
          *a3 = v10;
          return (uint64_t *)(*(uint64_t (**)(icu::TimeZoneRule *))(*(void *)lpsrc + 8LL))(lpsrc);
        }
      }

      else
      {
        uint64_t v11 = icu::UMemory::operator new((uint64_t *)0x7FFFFFFF, (icu::UMemory *)0x28, (unint64_t)lpsrc);
        if (!v11)
        {
          UErrorCode v10 = U_MEMORY_ALLOCATION_ERROR;
          goto LABEL_10;
        }

        unsigned int v9 = (int *)icu::UVector::UVector((uint64_t)v11, (uint64_t)uprv_deleteUObject, 0LL, (int *)a3);
        if (*(int *)a3 > 0)
        {
          (*(void (**)(int *))(*(void *)v9 + 8LL))(v9);
          return (uint64_t *)(*(uint64_t (**)(icu::TimeZoneRule *))(*(void *)lpsrc + 8LL))(lpsrc);
        }

        _OWORD v6[11] = (uint64_t)v9;
      }
    }

    else
    {
      unsigned int v9 = (int *)v6[10];
      if (!v9)
      {
        this = icu::UMemory::operator new((uint64_t *)v4, (icu::UMemory *)0x28, (unint64_t)lpsrc);
        if (!this)
        {
          goto LABEL_2;
        }

        unsigned int v9 = (int *)icu::UVector::UVector((uint64_t)this, (uint64_t)uprv_deleteUObject, 0LL, (int *)a3);
        if (*(int *)a3 > 0)
        {
          this = (uint64_t *)(*(uint64_t (**)(int *))(*(void *)v9 + 8LL))(v9);
          goto LABEL_2;
        }

        v6[10] = (uint64_t)v9;
      }
    }

    this = (uint64_t *)icu::UVector::adoptElement((icu::UVector *)v9, lpsrc, a3);
    *((_BYTE *)v6 + 104) = 0;
    return this;
  }

void icu::RuleBasedTimeZone::completeConst(icu::RuleBasedTimeZone *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    umtx_lock((icu::UMutex *)&unk_18C535770);
    if (!*((_BYTE *)this + 104)) {
      icu::RuleBasedTimeZone::complete((uint64_t)this, a2);
    }
    umtx_unlock((std::mutex **)&unk_18C535770);
  }

void sub_180962864(void *a1)
{
  if (a1) {
    icu::UMemory::operator delete(a1);
  }
}

icu::RuleBasedTimeZone *icu::RuleBasedTimeZone::clone@<X0>( icu::RuleBasedTimeZone *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  BOOL result = (icu::RuleBasedTimeZone *)icu::UMemory::operator new(a3, (icu::UMemory *)0x70, a2);
  if (result) {
    return icu::RuleBasedTimeZone::RuleBasedTimeZone(result, this);
  }
  return result;
}

uint64_t icu::RuleBasedTimeZone::getOffset( icu::RuleBasedTimeZone *this, unsigned __int8 a2, int a3, unsigned int a4, int a5, unsigned __int8 a6, int a7, UErrorCode *a8)
{
  if (a4 >= 0xC)
  {
    *a8 = U_ILLEGAL_ARGUMENT_ERROR;
    return 0LL;
  }

  return (*(uint64_t (**)(icu::RuleBasedTimeZone *))(*(void *)this + 40LL))(this);
}

uint64_t icu::RuleBasedTimeZone::getOffset( icu::RuleBasedTimeZone *this, int a2, int a3, int a4, int a5, unsigned __int8 a6, int a7, int a8, UErrorCode *a9)
{
  if (a2) {
    int v12 = a3;
  }
  else {
    int v12 = 1 - a3;
  }
  *(void *)uint64_t v14 = 0LL;
  double v13 = sub_1808FA338(v12, a4, a5);
  icu::RuleBasedTimeZone::getOffsetInternal(this, (double)a7 + v13 * 86400000.0, 1, 3, 1, &v14[1], v14, a9);
  else {
    return 0LL;
  }
}

void icu::RuleBasedTimeZone::getOffsetInternal( icu::RuleBasedTimeZone *this, double a2, int a3, int a4, char a5, int *a6, int *a7, UErrorCode *a8)
{
  *a6 = 0;
  *a7 = 0;
  if (*(int *)a8 <= 0)
  {
    if (!*((_BYTE *)this + 104))
    {
      *a8 = U_INVALID_STATE_ERROR;
      return;
    }

    uint64_t v11 = (icu::UVector *)*((void *)this + 12);
    if (v11
      && (uint64_t v16 = icu::UVector::elementAt(v11, 0),
          icu::RuleBasedTimeZone::getTransitionTime((uint64_t)this, v16, a3, a4, a5) <= a2))
    {
      int v18 = (icu::UVector *)*((void *)this + 12);
      int v19 = *((_DWORD *)v18 + 2);
      unsigned int v20 = v19 - 1;
      uint64_t v21 = icu::UVector::elementAt(v18, v19 - 1);
      if (icu::RuleBasedTimeZone::getTransitionTime((uint64_t)this, v21, a3, a4, a5) >= a2)
      {
        if (v19 >= 1)
        {
          while (1)
          {
            uint64_t v23 = icu::UVector::elementAt(*((icu::UVector **)this + 12), --v19);
            if (v19 <= 0)
            {
              unsigned int v20 = -1;
              goto LABEL_17;
            }
          }

          unsigned int v20 = v19;
        }
      }

      else if (*((void *)this + 11))
      {
        RuleInFinal = icu::RuleBasedTimeZone::findRuleInFinal(this, a2, a3, a4, a5);
        if (RuleInFinal) {
          goto LABEL_19;
        }
      }

void icu::RuleBasedTimeZone::getOffset( icu::RuleBasedTimeZone *this, double a2, int a3, int *a4, int *a5, UErrorCode *a6)
{
}

void icu::RuleBasedTimeZone::getOffsetFromLocal( icu::RuleBasedTimeZone *a1, int a2, char a3, int *a4, int *a5, UErrorCode *a6, double a7)
{
}

double icu::RuleBasedTimeZone::getTransitionTime(uint64_t a1, uint64_t a2, int a3, int a4, char a5)
{
  double v5 = *(double *)a2;
  if (a3)
  {
    Rawint Offset = icu::TimeZoneRule::getRawOffset(*(icu::TimeZoneRule **)(a2 + 8));
    int DSTSavings = icu::TimeZoneRule::getDSTSavings(*(icu::TimeZoneRule **)(a2 + 8));
    int v11 = icu::TimeZoneRule::getRawOffset(*(icu::TimeZoneRule **)(a2 + 16));
    int v12 = (icu::RuleBasedTimeZone *)icu::TimeZoneRule::getDSTSavings(*(icu::TimeZoneRule **)(a2 + 16));
    return v5 + (double)(int)icu::RuleBasedTimeZone::getLocalDelta(v12, RawOffset, DSTSavings, v11, (int)v12, a4, a5);
  }

  return v5;
}

icu::UVector *icu::RuleBasedTimeZone::findRuleInFinal( icu::RuleBasedTimeZone *this, double a2, int a3, int a4, char a5)
{
  BOOL result = (icu::UVector *)*((void *)this + 11);
  if (result)
  {
    int v11 = (icu::TimeZoneRule *)icu::UVector::elementAt(result, 0);
    int v12 = (icu::TimeZoneRule *)icu::UVector::elementAt(*((icu::UVector **)this + 11), 1u);
    if (v11) {
      BOOL v13 = v12 == 0LL;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13)
    {
      return 0LL;
    }

    else
    {
      uint64_t v14 = v12;
      double v32 = 0.0;
      double v33 = 0.0;
      double v15 = a2;
      if (a3)
      {
        Rawint Offset = icu::TimeZoneRule::getRawOffset(v12);
        int DSTSavings = icu::TimeZoneRule::getDSTSavings(v14);
        int v18 = icu::TimeZoneRule::getRawOffset(v11);
        int v19 = (icu::RuleBasedTimeZone *)icu::TimeZoneRule::getDSTSavings(v11);
        double v15 = a2 - (double)(int)icu::RuleBasedTimeZone::getLocalDelta(v19, RawOffset, DSTSavings, v18, (int)v19, a4, a5);
      }

      uint64_t v20 = icu::TimeZoneRule::getRawOffset(v14);
      uint64_t v21 = icu::TimeZoneRule::getDSTSavings(v14);
      int v22 = (*(uint64_t (**)(icu::TimeZoneRule *, uint64_t, uint64_t, uint64_t, double *, double))(*(void *)v11 + 80LL))( v11,  v20,  v21,  1LL,  &v33,  v15);
      if (a3)
      {
        int v23 = icu::TimeZoneRule::getRawOffset(v11);
        int v24 = icu::TimeZoneRule::getDSTSavings(v11);
        int v25 = icu::TimeZoneRule::getRawOffset(v14);
        unsigned int v26 = (icu::RuleBasedTimeZone *)icu::TimeZoneRule::getDSTSavings(v14);
        a2 = a2 - (double)(int)icu::RuleBasedTimeZone::getLocalDelta(v26, v23, v24, v25, (int)v26, a4, a5);
      }

      uint64_t v27 = icu::TimeZoneRule::getRawOffset(v11);
      uint64_t v28 = icu::TimeZoneRule::getDSTSavings(v11);
      int v29 = (*(uint64_t (**)(icu::TimeZoneRule *, uint64_t, uint64_t, uint64_t, double *, double))(*(void *)v14 + 80LL))( v14,  v27,  v28,  1LL,  &v32,  a2);
      if (v22) {
        BOOL v30 = v29 == 0;
      }
      else {
        BOOL v30 = 1;
      }
      if (v30)
      {
        if (v29) {
          uint64_t v31 = v14;
        }
        else {
          uint64_t v31 = 0LL;
        }
        if (v22) {
          return v11;
        }
        else {
          return v31;
        }
      }

      else if (v33 <= v32)
      {
        return v14;
      }

      else
      {
        return v11;
      }
    }
  }

  return result;
}

uint64_t icu::RuleBasedTimeZone::getRawOffset(icu::RuleBasedTimeZone *this)
{
  uint64_t v5 = 0LL;
  int v4 = 0;
  double UTCtime = uprv_getUTCtime();
  (*(void (**)(icu::RuleBasedTimeZone *, void, uint64_t *, int *, char *, double))(*(void *)this + 48LL))( this,  0LL,  &v5,  &v4,  (char *)&v5 + 4,  UTCtime);
  return v5;
}

BOOL icu::RuleBasedTimeZone::useDaylightTime(icu::RuleBasedTimeZone *this)
{
  int v9 = 0;
  double UTCtime = uprv_getUTCtime();
  int v7 = 0;
  int v8 = 0;
  (*(void (**)(icu::RuleBasedTimeZone *, void, int *, int *, int *))(*(void *)this + 48LL))( this,  0LL,  &v8,  &v7,  &v9);
  BOOL result = 1;
  if (!v7)
  {
    int v4 = 0LL;
    if (!icu::RuleBasedTimeZone::findNext(this, UTCtime, 0LL, &v6, &v5, &v4)
      || !icu::TimeZoneRule::getDSTSavings(v4))
    {
      return 0;
    }
  }

  return result;
}

uint64_t icu::RuleBasedTimeZone::findNext( icu::RuleBasedTimeZone *this, double a2, uint64_t a3, double *a4, icu::TimeZoneRule **a5, icu::TimeZoneRule **a6)
{
  uint64_t result = *((void *)this + 12);
  if (!result) {
    return result;
  }
  uint64_t v13 = icu::UVector::elementAt((icu::UVector *)result, 0);
  double v14 = *(double *)v13;
  if (*(double *)v13 > a2 || (_DWORD)a3 && v14 == a2)
  {
    double v15 = *(icu::TimeZoneRule **)(v13 + 8);
    uint64_t v16 = *(icu::TimeZoneRule **)(v13 + 16);
  }

  else
  {
    uint64_t v20 = (icu::UVector *)*((void *)this + 12);
    int v21 = *((_DWORD *)v20 + 2);
    uint64_t v22 = icu::UVector::elementAt(v20, v21 - 1);
    double v14 = *(double *)v22;
    if (!(_DWORD)a3 || v14 != a2)
    {
      if (v14 <= a2)
      {
        uint64_t result = *((void *)this + 11);
        if (!result) {
          return result;
        }
        uint64_t v16 = (icu::TimeZoneRule *)icu::UVector::elementAt((icu::UVector *)result, 0);
        uint64_t v28 = (icu::TimeZoneRule *)icu::UVector::elementAt(*((icu::UVector **)this + 11), 1u);
        double v36 = 0.0;
        double v37 = 0.0;
        Rawint Offset = icu::TimeZoneRule::getRawOffset(v28);
        uint64_t DSTSavings = icu::TimeZoneRule::getDSTSavings(v28);
        LODWORD(RawOffset) = (*(uint64_t (**)(icu::TimeZoneRule *, uint64_t, uint64_t, uint64_t, double *, double))(*(void *)v16 + 72LL))( v16,  RawOffset,  DSTSavings,  a3,  &v37,  a2);
        uint64_t v31 = icu::TimeZoneRule::getRawOffset(v16);
        uint64_t v32 = icu::TimeZoneRule::getDSTSavings(v16);
        int v33 = (*(uint64_t (**)(icu::TimeZoneRule *, uint64_t, uint64_t, uint64_t, double *, double))(*(void *)v28 + 72LL))( v28,  v31,  v32,  a3,  &v36,  a2);
        int v17 = 0;
        BOOL v34 = v33 != 0;
        BOOL v35 = v37 >= v36;
        if (v34 && v35) {
          double v14 = v36;
        }
        else {
          double v14 = v37;
        }
        if (v34 && v35) {
          double v15 = v16;
        }
        else {
          double v15 = v28;
        }
        if (v34 && v35) {
          uint64_t v16 = v28;
        }
        goto LABEL_7;
      }

      unsigned int v23 = v21 - 3;
      if (v21 >= 3)
      {
        int v24 = (double *)icu::UVector::elementAt(*((icu::UVector **)this + 12), v21 - 2);
        BOOL v25 = *v24 == a2 && (_DWORD)a3 == 0;
        if (*v24 >= a2 && !v25)
        {
          do
          {
            uint64_t v22 = (uint64_t)v24;
            int v24 = (double *)icu::UVector::elementAt(*((icu::UVector **)this + 12), v23--);
            BOOL v26 = *v24 == a2 && (_DWORD)a3 == 0;
          }

          while (*v24 >= a2 && !v26);
        }

        double v14 = *(double *)v22;
      }
    }

    double v15 = *(icu::TimeZoneRule **)(v22 + 8);
    uint64_t v16 = *(icu::TimeZoneRule **)(v22 + 16);
  }

  int v17 = 1;
LABEL_7:
  int v18 = icu::TimeZoneRule::getRawOffset(v15);
  if (v18 == icu::TimeZoneRule::getRawOffset(v16))
  {
    int v19 = icu::TimeZoneRule::getDSTSavings(v15);
    if (v19 == icu::TimeZoneRule::getDSTSavings(v16))
    {
      if (v17) {
        return icu::RuleBasedTimeZone::findNext(this, v14, 0, a4, a5, a6);
      }
      return 0LL;
    }
  }

  *a4 = v14;
  *a5 = v15;
  uint64_t result = 1LL;
  *a6 = v16;
  return result;
}

BOOL icu::RuleBasedTimeZone::inDaylightTime(icu::RuleBasedTimeZone *this, double a2, UErrorCode *a3)
{
  int v5 = 0;
  int v4 = 0;
  (*(void (**)(icu::RuleBasedTimeZone *, void, int *, int *, UErrorCode *, double))(*(void *)this + 48LL))( this,  0LL,  &v5,  &v4,  a3,  a2);
  return v4 != 0;
}

uint64_t icu::RuleBasedTimeZone::hasSameRules(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_1807F874C(*(void *)(*(void *)a1 - 8LL), *(void *)(*(void *)a2 - 8LL));
  if ((_DWORD)result) {
    return ((*(uint64_t (**)(void, void))(**(void **)(a1 + 72) + 40LL))( *(void *)(a1 + 72),  *(void *)(a2 + 72)) & 1) == 0 && sub_180962564(*(void *)(a1 + 80), *(icu::UVector **)(a2 + 80))
  }
        && sub_180962564(*(void *)(a1 + 88), *(icu::UVector **)(a2 + 88));
  return result;
}

uint64_t icu::RuleBasedTimeZone::getNextTransition( icu::RuleBasedTimeZone *this, double a2, uint64_t a3, icu::TimeZoneTransition *a4)
{
  UErrorCode v12 = U_ZERO_ERROR;
  icu::RuleBasedTimeZone::completeConst(this, &v12);
  uint64_t result = 0LL;
  if (v12 <= U_ZERO_ERROR)
  {
    UErrorCode v10 = 0LL;
    double v11 = 0.0;
    int v9 = 0LL;
    uint64_t result = icu::RuleBasedTimeZone::findNext(this, a2, a3, &v11, &v10, &v9);
    if ((_DWORD)result)
    {
      icu::TimeZoneTransition::setTime((uint64_t)a4, v11);
      icu::TimeZoneTransition::setFrom(a4, v10);
      icu::TimeZoneTransition::setTo(a4, v9);
      return 1LL;
    }
  }

  return result;
}

uint64_t icu::RuleBasedTimeZone::getPreviousTransition( icu::RuleBasedTimeZone *this, double a2, uint64_t a3, icu::TimeZoneTransition *a4)
{
  UErrorCode v12 = U_ZERO_ERROR;
  icu::RuleBasedTimeZone::completeConst(this, &v12);
  uint64_t result = 0LL;
  if (v12 <= U_ZERO_ERROR)
  {
    UErrorCode v10 = 0LL;
    double v11 = 0.0;
    int v9 = 0LL;
    uint64_t result = icu::RuleBasedTimeZone::findPrev(this, a2, a3, &v11, &v10, &v9);
    if ((_DWORD)result)
    {
      icu::TimeZoneTransition::setTime((uint64_t)a4, v11);
      icu::TimeZoneTransition::setFrom(a4, v10);
      icu::TimeZoneTransition::setTo(a4, v9);
      return 1LL;
    }
  }

  return result;
}

uint64_t icu::RuleBasedTimeZone::findPrev( icu::RuleBasedTimeZone *this, double a2, uint64_t a3, double *a4, icu::TimeZoneRule **a5, icu::TimeZoneRule **a6)
{
  uint64_t result = *((void *)this + 12);
  if (!result) {
    return result;
  }
  uint64_t v13 = icu::UVector::elementAt((icu::UVector *)result, 0);
  double v14 = *(double *)v13;
  if ((_DWORD)a3 && v14 == a2) {
    goto LABEL_4;
  }
  if (v14 >= a2) {
    return 0LL;
  }
  int v19 = (icu::UVector *)*((void *)this + 12);
  int v20 = *((_DWORD *)v19 + 2);
  uint64_t v13 = icu::UVector::elementAt(v19, v20 - 1);
  double v14 = *(double *)v13;
  if (!(_DWORD)a3 || v14 != a2)
  {
    if (v14 >= a2)
    {
      BOOL v29 = __OFSUB__(v20, 2);
      signed int v30 = v20 - 2;
      if (v30 < 0 == v29)
      {
        do
        {
          uint64_t v13 = icu::UVector::elementAt(*((icu::UVector **)this + 12), v30);
          double v14 = *(double *)v13;
          BOOL v32 = *(double *)v13 == a2 && (_DWORD)a3 != 0;
          BOOL v29 = __OFSUB__(v30--, 1);
          if (v30 < 0 != v29) {
            break;
          }
        }

        while (v14 >= a2 && !v32);
      }
    }

    else if (*((void *)this + 11))
    {
      uint64_t v16 = (icu::TimeZoneRule *)icu::UVector::elementAt(*((icu::UVector **)this + 11), 0);
      int v21 = (icu::TimeZoneRule *)icu::UVector::elementAt(*((icu::UVector **)this + 11), 1u);
      double v34 = 0.0;
      double v35 = 0.0;
      Rawint Offset = icu::TimeZoneRule::getRawOffset(v21);
      uint64_t DSTSavings = icu::TimeZoneRule::getDSTSavings(v21);
      LODWORD(RawOffset) = (*(uint64_t (**)(icu::TimeZoneRule *, uint64_t, uint64_t, uint64_t, double *, double))(*(void *)v16 + 80LL))( v16,  RawOffset,  DSTSavings,  a3,  &v35,  a2);
      uint64_t v24 = icu::TimeZoneRule::getRawOffset(v16);
      uint64_t v25 = icu::TimeZoneRule::getDSTSavings(v16);
      int v26 = (*(uint64_t (**)(icu::TimeZoneRule *, uint64_t, uint64_t, uint64_t, double *, double))(*(void *)v21 + 80LL))( v21,  v24,  v25,  a3,  &v34,  a2);
      if (RawOffset | v26)
      {
        BOOL v27 = v26 != 0;
        BOOL v28 = v35 <= v34;
        if (v27 && v28) {
          double v14 = v34;
        }
        else {
          double v14 = v35;
        }
        if (v27 && v28) {
          double v15 = v16;
        }
        else {
          double v15 = v21;
        }
        if (v27 && v28) {
          uint64_t v16 = v21;
        }
        goto LABEL_5;
      }

      return 0LL;
    }
  }

uint64_t icu::RuleBasedTimeZone::countTransitionRules(icu::RuleBasedTimeZone *this, UErrorCode *a2)
{
  uint64_t v3 = *((void *)this + 10);
  if (v3) {
    uint64_t result = *(unsigned int *)(v3 + 8);
  }
  else {
    uint64_t result = 0LL;
  }
  uint64_t v5 = *((void *)this + 11);
  if (v5) {
    return (*(_DWORD *)(v5 + 8) + result);
  }
  return result;
}

uint64_t icu::RuleBasedTimeZone::getTimeZoneRules(uint64_t result, void *a2, uint64_t a3, int *a4, int *a5)
{
  if (*a5 <= 0)
  {
    uint64_t v7 = result;
    *a2 = *(void *)(result + 72);
    uint64_t v8 = *(void *)(result + 80);
    LODWORD(v9) = *a4;
    if (v8) {
      BOOL v10 = (int)v9 < 1;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10 || (int v11 = *(_DWORD *)(v8 + 8), v11 < 1))
    {
      LODWORD(v12) = 0;
    }

    else
    {
      uint64_t v12 = 0LL;
      do
      {
        uint64_t v13 = v12++;
        uint64_t result = icu::UVector::elementAt(*(icu::UVector **)(v7 + 80), v13);
        *(void *)(a3 + 8 * v13) = result;
        uint64_t v9 = *a4;
      }

      while (v12 < v9 && v11 > (int)v12);
    }

    uint64_t v15 = *(void *)(v7 + 88);
    if (v15) {
      BOOL v16 = (int)v12 < (int)v9;
    }
    else {
      BOOL v16 = 0;
    }
    if (v16)
    {
      int v17 = *(_DWORD *)(v15 + 8);
      if (v17 >= 1)
      {
        uint64_t v18 = 0LL;
        int v19 = v12;
        uint64_t v20 = a3 + 8LL * v12;
        do
        {
          int v21 = v18 + 1;
          uint64_t result = icu::UVector::elementAt(*(icu::UVector **)(v7 + 88), v18);
          *(void *)(v20 + 8 * v18) = result;
          int v22 = v19 + v18++ + 1;
        }

        while (*a4 > v22 && v21 < v17);
        LODWORD(v12) = v19 + v21;
      }
    }

    *a4 = v12;
  }

  return result;
}

uint64_t icu::RuleBasedTimeZone::getLocalDelta( icu::RuleBasedTimeZone *this, int a2, int a3, int a4, int a5, int a6, char a7)
{
  BOOL v7 = a3 != 0;
  BOOL v8 = a3 == 0;
  if (a5) {
    BOOL v7 = 0;
  }
  else {
    BOOL v8 = 0;
  }
  int v9 = a7 & 3;
  BOOL v10 = v9 == 1 && v7;
  BOOL v11 = v9 == 3 && v8;
  BOOL v12 = v9 == 1 && v8;
  BOOL v13 = v9 == 3 && v7;
  if ((a7 & 0xC) == 4) {
    unsigned int v14 = a3 + a2;
  }
  else {
    unsigned int v14 = a5 + a4;
  }
  if (v13) {
    unsigned int v15 = a3 + a2;
  }
  else {
    unsigned int v15 = v14;
  }
  if (v12) {
    unsigned int v15 = a3 + a2;
  }
  if (v11) {
    unsigned int v15 = a5 + a4;
  }
  if (v10) {
    unsigned int v15 = a5 + a4;
  }
  int v16 = a6 & 3;
  BOOL v17 = v16 == 1 && v7;
  BOOL v18 = v16 == 3 && v8;
  if (v16 != 1) {
    BOOL v8 = 0;
  }
  if (v16 != 3) {
    BOOL v7 = 0;
  }
  if ((~a6 & 0xC) != 0) {
    unsigned int v19 = a5 + a4;
  }
  else {
    unsigned int v19 = a3 + a2;
  }
  if (v7) {
    unsigned int v20 = a5 + a4;
  }
  else {
    unsigned int v20 = v19;
  }
  if (v8) {
    unsigned int v20 = a5 + a4;
  }
  if (v18) {
    unsigned int v20 = a3 + a2;
  }
  if (v17) {
    unsigned int v20 = a3 + a2;
  }
  if (a5 + a4 >= a3 + a2) {
    return v20;
  }
  else {
    return v15;
  }
}

icu::RegexCompile *icu::RegexCompile::RegexCompile( icu::RegexCompile *this, icu::RegexPattern *a2, UErrorCode *a3)
{
  *(void *)this = off_18972A1A8;
  *((void *)this + 37) = off_18971B688;
  *((_WORD *)this + 152) = 2;
  icu::UVector32::UVector32((icu::RegexCompile *)((char *)this + 368), a3);
  icu::UStack::UStack((uint64_t)this + 416, (uint64_t)uprv_deleteUObject, 0LL, (int *)a3);
  icu::UStack::UStack((icu::RegexCompile *)((char *)this + 456), a3);
  sub_18096A114(a3);
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = a3;
  *((void *)this + 2) = a2;
  *((void *)this + 4) = 0LL;
  *((void *)this + 8) = -1LL;
  *((_OWORD *)this + 3) = xmmword_180A3BAE0;
  *((_WORD *)this + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  *((_DWORD *)this + 7icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = *((_DWORD *)a2 + 6) | 0x80000000;
  *((_BYTE *)this + 42) = 1;
  *((void *)this + 5icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = -1LL;
  *((void *)this + 63) = 0LL;
  *((_DWORD *)this + 124) = -1;
  if (*(int *)a3 <= 0)
  {
    UErrorCode v6 = *((_DWORD *)a2 + 30);
    if (v6 >= U_ILLEGAL_ARGUMENT_ERROR) {
      *a3 = v6;
    }
  }

  return this;
}

void icu::RegexCompile::~RegexCompile(icu::RegexCompile *this)
{
  *(void *)this = off_18972A1A8;
  uint64_t v2 = *((void *)this + 63);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::UStack::~UStack((icu::RegexCompile *)((char *)this + 456));
  icu::UStack::~UStack((icu::RegexCompile *)((char *)this + 416));
  icu::UVector32::~UVector32((void **)this + 46);
  icu::UnicodeString::~UnicodeString(v3, (icu::RegexCompile *)((char *)this + 296));
}

{
  void *v1;
  icu::RegexCompile::~RegexCompile(this);
  icu::UMemory::operator delete(v1);
}

UText *icu::RegexCompile::compile@<X0>( icu::RegexCompile *this@<X0>, UChar **a2@<X1>, UParseError *a3@<X2>, UErrorCode *a4@<X3>, uint64_t *a5@<X8>)
{
  int v9 = (icu::UnicodeString *)icu::UMemory::operator new(a5, (icu::UMemory *)0x40, (unint64_t)a2);
  uint64_t v10 = (uint64_t)v9;
  if (v9) {
    icu::UnicodeString::UnicodeString(v9, a2);
  }
  *(void *)(*((void *)this + 2) + 16LL) = v10;
  memset(&v12, 0, sizeof(v12));
  v12.magic = 878368812;
  v12.sizeOfStruct = 144;
  uint64_t result = utext_openConstUnicodeString(&v12, v10, a4);
  if (*(int *)a4 <= 0)
  {
    icu::RegexCompile::compile(this, &v12, a3, a4);
    return utext_close(&v12);
  }

  return result;
}

void icu::RegexCompile::compile(icu::RegexCompile *this, UText *a2, UParseError *a3, UErrorCode *status)
{
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = status;
  *((void *)this + 3) = a3;
  *((_DWORD *)this + 7icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  *((_WORD *)this + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  if (*(int *)status <= 0)
  {
    BOOL v7 = utext_clone(*(UText **)(*((void *)this + 2) + 8LL), a2, 0, 1, status);
    BOOL v8 = (int *)*((void *)this + 1);
    *(void *)(*((void *)this + 2) + 8LL) = v7;
    if (*v8 <= 0)
    {
      *((void *)this + 45) = utext_nativeLength(a2);
      if ((*((_BYTE *)this + 284) & 0x10) != 0) {
        *((_BYTE *)this + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 1;
      }
      int v9 = (int *)((char *)this + 72);
      icu::RegexCompile::nextChar((uint64_t)this, (UChar32 *)this + 18);
      if (**((int **)this + 1) <= 0)
      {
        LOWORD(v1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 1;
        while (1)
        {
          for (unsigned int i = (char *)&unk_180A3BD34 + 8 * (unsigned __int16)v10 + 7; ; i += 8)
          {
            unsigned int v12 = *(i - 3);
            if (v12 <= 0x7E && !*((_BYTE *)this + 76) && *v9 == v12) {
              break;
            }
            if (v12 == 253)
            {
              if (*v9 == -1) {
                break;
              }
            }

            else if (v12 == 254)
            {
              if (*((_BYTE *)this + 76)) {
                break;
              }
            }

            else if (v12 == 255 {
                   || (char)v12 <= -17
            }
                   && !*((_BYTE *)this + 76)
                   && *v9 != -1
                   && icu::UnicodeSet::contains( (icu::UnicodeSet *)(qword_18C449BC0 + 200LL * (v12 - 128) + 3024),  *v9))
            {
              break;
            }
          }

          __int16 v13 = *(i - 1);
          if (*(i - 1))
          {
            int v14 = *((_DWORD *)this + 70);
            int v15 = v14 + 1;
            *((_DWORD *)this + 7icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v14 + 1;
            if (v14 >= 99)
            {
              icu::RegexCompile::error(this, 66304);
              int v15 = *((_DWORD *)this + 70) - 1;
              *((_DWORD *)this + 7icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v15;
            }

            *((_WORD *)this + v15 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v13;
          }

          if (*i) {
            icu::RegexCompile::nextChar((uint64_t)this, (UChar32 *)this + 18);
          }
          int v10 = *(i - 2);
          if (v10 == 255)
          {
            uint64_t v16 = *((int *)this + 70);
            LOWORD(v1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = *((_WORD *)this + v16 + 40);
            *((_DWORD *)this + 7icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v16 - 1;
            if ((int)v16 <= 0)
            {
              *((_DWORD *)this + 7icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v16;
              icu::RegexCompile::error(this, 66310);
            }
          }
        }

        if (**((int **)this + 1) <= 0)
        {
          icu::RegexCompile::allocateStackData(this, 2);
          icu::RegexCompile::stripNOPs(this);
          *(_DWORD *)(*((void *)this + 2) + 124LL) = icu::RegexCompile::minMatchLength( this,  3,  *(_DWORD *)(*(void *)(*((void *)this + 2) + 32LL) + 8LL)
                                                       - 1);
          icu::RegexCompile::matchStartType(this);
          uint64_t v18 = *(int *)(*(void *)(*((void *)this + 2) + 104LL) + 8LL);
          else {
            uint64_t v19 = 32 * v18;
          }
          unsigned int v20 = (void *)icu::UMemory::operator new[]((icu::UMemory *)v19, v17);
          if (v20)
          {
            int v21 = v20;
            if ((_DWORD)v18)
            {
              bzero(v20, 32 * v18);
              *(void *)(*((void *)this + 2) + 112LL) = v21;
              if ((int)v18 >= 1)
              {
                uint64_t v22 = 0LL;
                do
                {
                  uint64_t v23 = icu::UVector::elementAt(*(icu::UVector **)(*((void *)this + 2) + 104LL), v22);
                  if (v23)
                  {
                    uint64_t v24 = (icu::UnicodeSet *)v23;
                    unsigned int v25 = 0;
                    uint64_t v26 = *(void *)(*((void *)this + 2) + 112LL) + 32 * v22;
                    do
                    {
                      ++v25;
                    }

                    while (v25 != 256);
                  }

                  ++v22;
                }

                while (v22 != v18);
              }
            }

            else
            {
              *(void *)(*((void *)this + 2) + 112LL) = v20;
            }
          }

          else
          {
            BOOL v27 = (_DWORD *)*((void *)this + 1);
            *(void *)(*((void *)this + 2) + 112LL) = 0LL;
            *BOOL v27 = 7;
            *status = U_MEMORY_ALLOCATION_ERROR;
          }
        }
      }
    }
  }

void icu::RegexCompile::nextChar(uint64_t a1, UChar32 *a2)
{
  while (1)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 8LL);
    uint64_t v5 = *(int *)(v4 + 40);
    else {
      uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(v4 + 56) + 64LL))();
    }
    *(void *)(a1 + 32) = v6;
    uint64_t CharLL = icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1);
    *a2 = CharLL;
    *((_BYTE *)a2 + 4) = 0;
    if (*(_BYTE *)(a1 + 40))
    {
      *((_BYTE *)a2 + 4) = 1;
      if ((_DWORD)CharLL == 92
        && ((int v8 = *(_DWORD *)(a1 + 68), v8 == -1)
          ? (int v8 = icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1),
             *(_DWORD *)(a1 + 68) = v8,
             LODWORD(CharLL) = *a2)
          : (LODWORD(CharLL) = 92),
            v8 == 69))
      {
        char v17 = 0;
        if ((*(_BYTE *)(a1 + 284) & 0x10) != 0 && (_DWORD)CharLL != -1) {
          goto LABEL_86;
        }
      }

      else
      {
        if ((_DWORD)CharLL != -1) {
          goto LABEL_86;
        }
        char v17 = 0;
      }

      goto LABEL_49;
    }

    if (*(_BYTE *)(a1 + 41))
    {
      *(_BYTE *)(a1 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0;
      goto LABEL_86;
    }

    if ((*(_BYTE *)(a1 + 284) & 4) != 0)
    {
      while (1)
      {
        if ((_DWORD)CharLL == 35)
        {
          if (*(_BYTE *)(a1 + 42))
          {
            do
            {
              uint64_t CharLL = icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1);
              *a2 = CharLL;
              BOOL v10 = (CharLL + 1) <= 0xE && ((1 << (CharLL + 1)) & 0x4801) != 0 || (_DWORD)CharLL == 8232;
            }

            while (!v10 && (_DWORD)CharLL != 133);
          }

          else
          {
            uint64_t CharLL = 35LL;
          }
        }

        else if ((_DWORD)CharLL == -1)
        {
          goto LABEL_86;
        }

        if (!icu::PatternProps::isWhiteSpace((icu::PatternProps *)CharLL)) {
          break;
        }
        uint64_t CharLL = icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1);
        *a2 = CharLL;
      }

      LODWORD(CharLL) = *a2;
    }

    if ((_DWORD)CharLL != 92) {
      goto LABEL_86;
    }
    uint64_t v11 = *(void *)(*(void *)(a1 + 16) + 8LL);
    uint64_t v12 = *(int *)(v11 + 40);
    else {
      int64_t v13 = (*(uint64_t (**)(void))(*(void *)(v11 + 56) + 64LL))();
    }
    uint64_t v14 = qword_18C449BC0;
    int v15 = *(_DWORD *)(a1 + 68);
    if (v15 == -1)
    {
      int v15 = icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1);
      *(_DWORD *)(a1 + 68) = v15;
    }

    if (icu::UnicodeSet::contains((icu::UnicodeSet *)(v14 + 3624), v15))
    {
      icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1);
      *((_BYTE *)a2 + 4) = 1;
      uint64_t v18 = *(UText **)(*(void *)(a1 + 16) + 8LL);
      int64_t chunkNativeStart = v18->chunkNativeStart;
      if (!chunkNativeStart
        && (uint64_t v20 = *(void *)(a1 + 360), v20 == v18->chunkNativeLimit)
        && v20 == v18->nativeIndexingLimit)
      {
        offset[0] = v13;
        *a2 = u_unescapeAt((UNESCAPE_CHAR_AT)sub_18096A3A0, offset, v20, (void *)v18->chunkContents);
        int64_t v21 = offset[0];
        if (v13 == offset[0])
        {
          icu::RegexCompile::error((void *)a1, 66307);
          int64_t v21 = offset[0];
        }

        *(void *)(a1 + 56) += v21 - v13;
        uint64_t v22 = *(UText **)(*(void *)(a1 + 16) + 8LL);
        uint64_t v23 = v21 - v22->chunkNativeStart;
        if (v23 < 0 || v23 >= v22->nativeIndexingLimit || v22->chunkContents[v23] >> 10 > 0x36u) {
          utext_setNativeIndex(v22, v21);
        }
        else {
          v22->chunkint Offset = v23;
        }
      }

      else
      {
        int32_t v35 = 0;
        *(void *)offset = v18;
        uint64_t v34 = 0xFFFFFFFFLL;
        uint64_t v24 = v13 - chunkNativeStart;
        if (v24 < 0 || v24 >= v18->nativeIndexingLimit || v18->chunkContents[v24] >> 10 > 0x36u) {
          utext_setNativeIndex(v18, v13);
        }
        else {
          v18->chunkint Offset = v24;
        }
        *a2 = u_unescapeAt((UNESCAPE_CHAR_AT)sub_18096A248, &v35, 0x7FFFFFFF, offset);
        if (v35)
        {
          if ((_DWORD)v34 == v35)
          {
            unsigned int v25 = *(UText **)(*(void *)(a1 + 16) + 8LL);
            chunkint Offset = v25->chunkOffset;
            BOOL v27 = __OFSUB__(chunkOffset, 1);
            int v28 = chunkOffset - 1;
            if (v28 < 0 != v27 || v25->chunkContents[v28] >> 11 > 0x1Au) {
              utext_previous32(v25);
            }
            else {
              v25->chunkint Offset = v28;
            }
          }

          else if ((_DWORD)v34 != v35 - 1)
          {
            utext_moveIndex32(*(UText **)(*(void *)(a1 + 16) + 8LL), v35 + ~(_DWORD)v34);
          }
        }

        else
        {
          icu::RegexCompile::error((void *)a1, 66307);
        }

        *(void *)(a1 + 56) += v35;
      }

      goto LABEL_86;
    }

    int v16 = *(_DWORD *)(a1 + 68);
    if (v16 == -1)
    {
      int v16 = icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1);
      *(_DWORD *)(a1 + 68) = v16;
    }

    if (v16 != -1) {
      break;
    }
    int v16 = icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1);
    *(_DWORD *)(a1 + 68) = v16;
LABEL_40:
    char v17 = 1;
    if (v16 != 81)
    {
      *(_BYTE *)(a1 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 1;
      goto LABEL_86;
    }

uint64_t icu::RegexCompile::doParseActions(icu::RegexCompile *this, unint64_t a2)
{
  uint64_t v2 = this;
  unsigned int v3 = 1;
  switch((int)a2)
  {
    case 0:
      uint64_t v14 = (icu::UVector **)icu::UVector::elementAt( (icu::RegexCompile *)((char *)this + 416),  *((_DWORD *)this + 106) - 1);
      uint64_t v192 = 0LL;
      __int128 v190 = 0u;
      __int128 v191 = 0u;
      __int128 v188 = 0u;
      __int128 v189 = 0u;
      __int128 v186 = 0u;
      __int128 v187 = 0u;
      __int128 v184 = 0u;
      __int128 v185 = 0u;
      __int128 v182 = 0u;
      __int128 v183 = 0u;
      __int128 v180 = 0u;
      __int128 v181 = 0u;
      icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v180);
      icu::UnicodeSet::applyIntPropertyValue((icu::UnicodeSet *)&v180, 0x2000LL, 0x200u, *((UErrorCode **)v2 + 1));
      goto LABEL_113;
    case 1:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      BOOL v43 = **((_DWORD **)v2 + 1) <= 0;
      int v24 = 939524096;
      goto LABEL_298;
    case 2:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      BOOL v43 = **((_DWORD **)v2 + 1) <= 0;
      int v24 = 939524097;
      goto LABEL_298;
    case 3:
      if ((*((_BYTE *)this + 285) & 2) != 0 && (*((_DWORD *)this + 18) & 0xFFFFFFDF) - 65 <= 0x19) {
        icu::RegexCompile::error(this, 66307);
      }
      goto LABEL_148;
    case 4:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      int Data = icu::RegexCompile::allocateData((int **)v2, 4);
      int v91 = icu::RegexCompile::buildOp((int **)v2, 0x25u, Data);
      icu::RegexCompile::appendOp(v2, v91);
      else {
        int v92 = 0;
      }
      icu::RegexCompile::appendOp(v2, v92);
      else {
        int v93 = 0;
      }
      icu::RegexCompile::appendOp(v2, v93);
      int v30 = (icu::RegexCompile *)((char *)v2 + 368);
      sub_1809676EC((icu::RegexCompile *)((char *)v2 + 368), *((unsigned int *)v2 + 71), *((UErrorCode **)v2 + 1));
      UChar32 v31 = (UErrorCode *)*((void *)v2 + 1);
      int v32 = (icu::RegexCompile *)((char *)v2 + 368);
      uint64_t v33 = 4294967291LL;
      goto LABEL_201;
    case 5:
      uint64_t v69 = *(void *)(*((void *)this + 2) + 192LL);
      if (v69 && (int v70 = uhash_geti(v69, *((void *)v2 + 63))) != 0)
      {
        int v71 = v70;
        icu::RegexCompile::fixLiterals((uint64_t)v2, 0);
        if ((*((_BYTE *)v2 + 284) & 2) != 0) {
          unsigned int v72 = 41;
        }
        else {
          unsigned int v72 = 34;
        }
        int v176 = icu::RegexCompile::buildOp((int **)v2, v72, v71);
        icu::RegexCompile::appendOp(v2, v176);
      }

      else
      {
        icu::RegexCompile::error(v2, 66325);
      }

      uint64_t v177 = *((void *)v2 + 63);
      if (v177) {
        (*(void (**)(uint64_t))(*(void *)v177 + 8LL))(v177);
      }
      *((void *)v2 + 63) = 0LL;
      goto LABEL_324;
    case 6:
      else {
        int v97 = 0;
      }
      icu::RegexCompile::appendOp(this, v97);
      else {
        int v98 = 0;
      }
      icu::RegexCompile::appendOp(v2, v98);
      else {
        int v99 = 0;
      }
      icu::RegexCompile::appendOp(v2, v99);
      icu::RegexCompile::doParseActions(v2, 31);
      goto LABEL_324;
    case 7:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      int v8 = **((_DWORD **)v2 + 1);
      int v9 = 822083585;
      goto LABEL_167;
    case 8:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      BOOL v43 = **((_DWORD **)v2 + 1) <= 0;
      int v24 = 369098753;
      goto LABEL_298;
    case 9:
      unsigned int v116 = icu::RegexCompile::blockTopLoc(this, 1);
      int v117 = icu::RegexCompile::buildOp((int **)v2, 0xDu, *(_DWORD *)(*(void *)(*((void *)v2 + 2) + 32LL) + 8LL));
      icu::UVector64::setElementAt(*(void *)(*((void *)v2 + 2) + 32LL), v117, v116);
      goto LABEL_215;
    case 10:
      goto LABEL_324;
    case 11:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      BOOL v43 = **((_DWORD **)v2 + 1) <= 0;
      int v24 = 318767104;
      goto LABEL_298;
    case 12:
LABEL_148:
      icu::RegexCompile::setEval(v2, 262150);
      __int128 v96 = (icu::UnicodeSet *)icu::UVector::elementAt( (icu::RegexCompile *)((char *)v2 + 416),  *((_DWORD *)v2 + 106) - 1);
      icu::UnicodeSet::add(v96, *((_DWORD *)v2 + 18));
      *((_DWORD *)v2 + 124) = *((_DWORD *)v2 + 18);
      goto LABEL_324;
    case 13:
    case 30:
      uint64_t v6 = *((void *)this + 63);
      unsigned int v7 = *((_DWORD *)v2 + 18);
      goto LABEL_49;
    case 14:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      BOOL v43 = **((_DWORD **)v2 + 1) <= 0;
      int v24 = 285212672;
      goto LABEL_298;
    case 15:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      BOOL v43 = **((_DWORD **)v2 + 1) <= 0;
      int v24 = 956301312;
      goto LABEL_298;
    case 16:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      double v75 = (icu::UnicodeSet *)icu::UMemory::operator new(v74, (icu::UMemory *)0xC8, v73);
      __int128 v76 = v75;
      if (v75)
      {
        icu::UnicodeSet::UnicodeSet(v75);
        __int128 v78 = (UErrorCode **)((char *)v2 + 8);
        __int128 v77 = (UErrorCode *)*((void *)v2 + 1);
      }

      else
      {
        __int128 v78 = (UErrorCode **)((char *)v2 + 8);
        __int128 v77 = (UErrorCode *)*((void *)v2 + 1);
      }

      *(void *)&__int128 v180 = 0LL;
      sub_180968324((icu::RegexCompile *)((char *)v2 + 416), v76, v77);
      icu::UVector::addElement((icu::RegexCompile *)((char *)v2 + 456), 1, *((UErrorCode **)v2 + 1));
      uint64_t v167 = (void *)*((unsigned __int8 *)v2 + 284);
      sub_180945990((icu::UnicodeSet **)&v180, v167);
      goto LABEL_324;
    case 17:
      __int16 v115 = (icu::UnicodeSet *)icu::UVector::elementAt( (icu::RegexCompile *)((char *)this + 416),  *((_DWORD *)this + 106) - 1);
      icu::UnicodeSet::add(v115, 0xAu, 0xDu);
      icu::UnicodeSet::add(v115, 0x85u);
      uint64_t v110 = v115;
      unsigned int v111 = 8232;
      unsigned int v112 = 8233;
      goto LABEL_171;
    case 18:
      unsigned int v65 = icu::RegexCompile::blockTopLoc(this, 1);
      int v11 = icu::RegexCompile::allocateData((int **)v2, 1);
      int v66 = icu::RegexCompile::buildOp((int **)v2, 0x20u, v11);
      icu::UVector64::setElementAt(*(void *)(*((void *)v2 + 2) + 32LL), v66, v65);
      int v67 = icu::RegexCompile::buildOp((int **)v2, 6u, *(_DWORD *)(*(void *)(*((void *)v2 + 2) + 32LL) + 8LL) + 2);
      icu::RegexCompile::appendOp(v2, v67);
      int v68 = icu::RegexCompile::buildOp((int **)v2, 0xDu, v65 + 1);
      icu::RegexCompile::appendOp(v2, v68);
      goto LABEL_98;
    case 19:
    case 35:
      int v4 = 66309;
      goto LABEL_192;
    case 20:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      BOOL v43 = **((_DWORD **)v2 + 1) <= 0;
      int v24 = 402653184;
      goto LABEL_298;
    case 21:
      int v45 = (icu::UnicodeSet *)icu::UVector::elementAt( (icu::RegexCompile *)((char *)this + 416),  *((_DWORD *)this + 106) - 1);
      unsigned int v46 = 38;
      goto LABEL_187;
    case 22:
      int v64 = 262151;
      goto LABEL_236;
    case 23:
      int v4 = 66312;
      goto LABEL_192;
    case 24:
      uint64_t v87 = (icu::RegexCompile *)((char *)this + 456);
      if (icu::UVector::elementAti( (icu::RegexCompile *)((char *)this + 456),  *((_DWORD *)this + 116) - 1) == 131081)
      {
        icu::UStack::popi((icu::RegexCompile *)((char *)v2 + 456));
        icu::UVector::addElement((icu::RegexCompile *)((char *)v2 + 456), 131075, *((UErrorCode **)v2 + 1));
LABEL_237:
        v155 = (UErrorCode *)*((void *)v2 + 1);
        unsigned int v156 = v87;
        int v157 = 131081;
      }

      else
      {
        v155 = (UErrorCode *)*((void *)v2 + 1);
        int v157 = 131075;
        unsigned int v156 = (icu::RegexCompile *)((char *)v2 + 456);
      }

      icu::UVector::addElement(v156, v157, v155);
      goto LABEL_324;
    case 25:
      *((void *)this + 5icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0xFFFFFFFF00000000LL;
      goto LABEL_324;
    case 26:
      int v15 = 196613;
      goto LABEL_144;
    case 27:
      unsigned int v100 = icu::RegexCompile::blockTopLoc(this, 0);
      icu::RegexCompile::compileInterval(v2, 0x19u, 0x1Cu);
      icu::RegexCompile::insertOp(v2, v100);
      uint64_t v101 = 1LL;
      int i = icu::RegexCompile::allocateData((int **)v2, 1);
      int v103 = icu::RegexCompile::buildOp((int **)v2, 0x20u, i);
      icu::UVector64::setElementAt(*(void *)(*((void *)v2 + 2) + 32LL), v103, v100);
      uint64_t v104 = *(void *)(*((void *)v2 + 2) + 32LL);
      int v105 = *(_DWORD *)(v104 + 8);
      BOOL v58 = __OFSUB__(v105, 1);
      int v106 = v105 - 1;
      if (v106 < 0 == v58)
      {
        *(_DWORD *)(v104 + 8) = v106;
        uint64_t v101 = (int)(*(void *)(*(void *)(v104 + 24) + 8LL * v106) + 1);
      }

      sub_180967D40((icu::UVector64 *)v104, v101, *((UErrorCode **)v2 + 1));
      __int128 v107 = (int **)v2;
      unsigned int v108 = 33;
      goto LABEL_258;
    case 28:
    case 37:
    case 81:
      int v4 = 66305;
      goto LABEL_192;
    case 29:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      BOOL v43 = **((_DWORD **)v2 + 1) <= 0;
      int v24 = 822083585;
      goto LABEL_298;
    case 31:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      else {
        int v61 = 0;
      }
      icu::RegexCompile::appendOp(v2, v61);
      else {
        int v62 = 0;
      }
      icu::RegexCompile::appendOp(v2, v62);
      int v30 = (icu::RegexCompile *)((char *)v2 + 368);
      sub_1809676EC((icu::RegexCompile *)((char *)v2 + 368), *((unsigned int *)v2 + 71), *((UErrorCode **)v2 + 1));
      UChar32 v31 = (UErrorCode *)*((void *)v2 + 1);
      int v32 = (icu::RegexCompile *)((char *)v2 + 368);
      uint64_t v33 = 0xFFFFFFFFLL;
      goto LABEL_201;
    case 32:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      goto LABEL_78;
    case 33:
      unsigned int v53 = icu::RegexCompile::scanNamedChar(this);
      icu::RegexCompile::setEval(v2, 262150);
      double v63 = (icu::UnicodeSet *)icu::UVector::elementAt( (icu::RegexCompile *)((char *)v2 + 416),  *((_DWORD *)v2 + 106) - 1);
      icu::UnicodeSet::add(v63, v53);
      goto LABEL_87;
    case 34:
      uint64_t v14 = (icu::UVector **)icu::UVector::elementAt( (icu::RegexCompile *)((char *)this + 416),  *((_DWORD *)this + 106) - 1);
      uint64_t v192 = 0LL;
      __int128 v190 = 0u;
      __int128 v191 = 0u;
      __int128 v188 = 0u;
      __int128 v189 = 0u;
      __int128 v186 = 0u;
      __int128 v187 = 0u;
      __int128 v184 = 0u;
      __int128 v185 = 0u;
      __int128 v182 = 0u;
      __int128 v183 = 0u;
      __int128 v180 = 0u;
      __int128 v181 = 0u;
      icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v180);
      icu::UnicodeSet::add((icu::UnicodeSet *)&v180, 0xAu, 0xDu);
      icu::UnicodeSet::add((icu::UnicodeSet *)&v180, 0x85u);
      icu::UnicodeSet::add((icu::UnicodeSet *)&v180, 0x2028u, 0x2029u);
      goto LABEL_113;
    case 36:
      int v4 = 66307;
      goto LABEL_193;
    case 38:
      unsigned int v34 = icu::RegexCompile::blockTopLoc(this, 1);
      icu::RegexCompile::insertOp(v2, v34);
      unsigned int v35 = icu::RegexCompile::allocateData((int **)v2, 1);
      int v36 = icu::RegexCompile::buildOp((int **)v2, 0x20u, v35);
      icu::UVector64::setElementAt(*(void *)(*((void *)v2 + 2) + 32LL), v36, v34);
      int v37 = icu::RegexCompile::buildOp((int **)v2, 6u, *(_DWORD *)(*(void *)(*((void *)v2 + 2) + 32LL) + 8LL) + 1);
      icu::UVector64::setElementAt(*(void *)(*((void *)v2 + 2) + 32LL), v37, ++v34);
      int v38 = icu::RegexCompile::buildOp((int **)v2, 0xDu, v34);
      icu::RegexCompile::appendOp(v2, v38);
      __int128 v39 = (int **)v2;
      unsigned int v40 = 33;
      goto LABEL_212;
    case 39:
      int v45 = (icu::UnicodeSet *)icu::UVector::elementAt( (icu::RegexCompile *)((char *)this + 416),  *((_DWORD *)this + 106) - 1);
      unsigned int v46 = 45;
LABEL_187:
      icu::UnicodeSet::add(v45, v46);
      goto LABEL_324;
    case 40:
      if ((*((_BYTE *)this + 285) & 2) != 0 && (*((_DWORD *)this + 18) & 0xFFFFFFDF) - 65 <= 0x19) {
        icu::RegexCompile::error(this, 66307);
      }
      goto LABEL_47;
    case 41:
      int v88 = (icu::UVector **)icu::UVector::elementAt( (icu::RegexCompile *)((char *)this + 416),  *((_DWORD *)this + 106) - 1);
      uint64_t v89 = (const icu::UnicodeSet *)(qword_18C449BC0 + 208);
      goto LABEL_185;
    case 42:
      if ((*((_DWORD *)this + 103) & 0x80000000) != 0) {
        *((_DWORD *)this + 103) = 0;
      }
      uint64_t v122 = 10LL * *((int *)this + 103) + u_charDigitValue(*((_DWORD *)this + 18));
      if (v122 >= 0x80000000LL) {
        goto LABEL_191;
      }
      *((_DWORD *)v2 + 103) = v122;
      goto LABEL_324;
    case 43:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      BOOL v43 = **((_DWORD **)v2 + 1) <= 0;
      int v24 = 973078528;
      goto LABEL_298;
    case 44:
      uint64_t v14 = (icu::UVector **)icu::UVector::elementAt( (icu::RegexCompile *)((char *)this + 416),  *((_DWORD *)this + 106) - 1);
      uint64_t v192 = 0LL;
      __int128 v190 = 0u;
      __int128 v191 = 0u;
      __int128 v188 = 0u;
      __int128 v189 = 0u;
      __int128 v186 = 0u;
      __int128 v187 = 0u;
      __int128 v184 = 0u;
      __int128 v185 = 0u;
      __int128 v182 = 0u;
      __int128 v183 = 0u;
      __int128 v180 = 0u;
      __int128 v181 = 0u;
      icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v180);
      uint64_t v22 = (const icu::UnicodeSet *)(qword_18C449BC0 + 808);
      goto LABEL_109;
    case 45:
      int v4 = 66319;
      goto LABEL_192;
    case 46:
      int v139 = icu::RegexCompile::scanProp((int **)this);
      if (!v139) {
        goto LABEL_324;
      }
      goto LABEL_239;
    case 47:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      int v23 = **((_DWORD **)v2 + 1);
      if ((*((_DWORD *)v2 + 71) & 0x100) != 0) {
        int v24 = 889192449;
      }
      else {
        int v24 = 268435457;
      }
      goto LABEL_92;
    case 48:
      icu::RegexCompile::setEval(this, 65538);
      icu::UStack::popi((icu::RegexCompile *)((char *)v2 + 456));
      goto LABEL_324;
    case 49:
      int v109 = *((_DWORD *)this + 124);
      if (v109 == -1 || v109 > *((_DWORD *)this + 18)) {
        icu::RegexCompile::error(this, 66320);
      }
      uint64_t v110 = (icu::UnicodeSet *)icu::UVector::elementAt( (icu::RegexCompile *)((char *)v2 + 416),  *((_DWORD *)v2 + 106) - 1);
      unsigned int v111 = *((_DWORD *)v2 + 124);
      unsigned int v112 = *((_DWORD *)v2 + 18);
LABEL_171:
      icu::UnicodeSet::add(v110, v111, v112);
      goto LABEL_324;
    case 50:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      else {
        int v94 = 0;
      }
      icu::RegexCompile::appendOp(v2, v94);
      else {
        int v95 = 0;
      }
      icu::RegexCompile::appendOp(v2, v95);
      sub_1809676EC((icu::RegexCompile *)((char *)v2 + 368), *((unsigned int *)v2 + 71), *((UErrorCode **)v2 + 1));
      sub_1809676EC((icu::RegexCompile *)((char *)v2 + 368), 4294967290LL, *((UErrorCode **)v2 + 1));
      sub_1809676EC( (icu::RegexCompile *)((char *)v2 + 368),  (*(_DWORD *)(*(void *)(*((void *)v2 + 2) + 32LL) + 8LL) - 2),  *((UErrorCode **)v2 + 1));
      sub_1809676EC( (icu::RegexCompile *)((char *)v2 + 368),  (*(_DWORD *)(*(void *)(*((void *)v2 + 2) + 32LL) + 8LL) - 1),  *((UErrorCode **)v2 + 1));
      goto LABEL_142;
    case 51:
      signed int v130 = icu::RegexCompile::blockTopLoc(this, 0);
      unsigned int v35 = v130;
      uint64_t v131 = *(void *)(*((void *)v2 + 2) + 32LL);
      signed int v132 = *(_DWORD *)(v131 + 8);
      int v133 = v132 - 1;
      if (v132 <= v130 || v130 < 0 || v130 != v133) {
        goto LABEL_210;
      }
      uint64_t v134 = *(void *)(*(void *)(v131 + 24) + 8LL * v130);
      int v135 = BYTE3(v134);
      if (BYTE3(v134) <= 0x14u)
      {
        if (BYTE3(v134) == 11)
        {
          int v170 = icu::RegexCompile::buildOp((int **)v2, 0x32u, v134 & 0xFFFFFF);
LABEL_318:
          icu::RegexCompile::appendOp(v2, v170);
          goto LABEL_321;
        }

        if (BYTE3(v134) != 12) {
          goto LABEL_210;
        }
LABEL_284:
        else {
          int v169 = 0;
        }
        int v170 = v169 & 0xFFFFFFFD | (v135 == 21) | (2 * (*((_DWORD *)v2 + 71) & 1));
        goto LABEL_318;
      }

      if (BYTE3(v134) == 21 || BYTE3(v134) == 27) {
        goto LABEL_284;
      }
LABEL_210:
      if (icu::RegexCompile::minMatchLength(v2, v130, v133))
      {
        __int128 v39 = (int **)v2;
        unsigned int v40 = 15;
LABEL_212:
        int v44 = v35;
      }

      else
      {
        icu::RegexCompile::insertOp(v2, v35);
        Stackint Data = icu::RegexCompile::allocateStackData(v2, 1);
        int v175 = icu::RegexCompile::buildOp((int **)v2, 0x23u, StackData);
        icu::UVector64::setElementAt(*(void *)(*((void *)v2 + 2) + 32LL), v175, v35);
        int v44 = v35 + 1;
        __int128 v39 = (int **)v2;
        unsigned int v40 = 18;
      }

LABEL_322:
      int v114 = icu::RegexCompile::buildOp(v39, v40, v44);
LABEL_323:
      icu::RegexCompile::appendOp(v2, v114);
LABEL_324:
      else {
        return v3;
      }
    case 52:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      BOOL v43 = **((_DWORD **)v2 + 1) <= 0;
      int v24 = 973078529;
      goto LABEL_298;
    case 53:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
LABEL_142:
      *((_DWORD *)v2 + 7icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = *((_DWORD *)v2 + 72);
      goto LABEL_324;
    case 54:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      BOOL v43 = **((_DWORD **)v2 + 1) <= 0;
      int v24 = 335544320;
      goto LABEL_298;
    case 55:
      signed int v52 = icu::RegexCompile::scanNamedChar(this);
      unsigned int v53 = v52;
      if (**((int **)v2 + 1) <= 0)
      {
        signed int v54 = *((_DWORD *)v2 + 124);
        if (v54 == -1 || v54 > v52) {
          icu::RegexCompile::error(v2, 66320);
        }
      }

      int v56 = (icu::UnicodeSet *)icu::UVector::elementAt( (icu::RegexCompile *)((char *)v2 + 416),  *((_DWORD *)v2 + 106) - 1);
      icu::UnicodeSet::add(v56, *((_DWORD *)v2 + 124), v53);
LABEL_87:
      *((_DWORD *)v2 + 124) = v53;
      goto LABEL_324;
    case 56:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      int v25 = icu::RegexCompile::allocateData((int **)v2, 5);
      int v26 = icu::RegexCompile::buildOp((int **)v2, 0x2Cu, v25);
      icu::RegexCompile::appendOp(v2, v26);
      int v27 = icu::RegexCompile::buildOp((int **)v2, 0x2Fu, v25);
      icu::RegexCompile::appendOp(v2, v27);
      icu::RegexCompile::appendOp(v2, 0);
      icu::RegexCompile::appendOp(v2, 0);
      icu::RegexCompile::appendOp(v2, 0);
      else {
        int v28 = 0;
      }
      icu::RegexCompile::appendOp(v2, v28);
      else {
        int v29 = 0;
      }
      icu::RegexCompile::appendOp(v2, v29);
      int v30 = (icu::RegexCompile *)((char *)v2 + 368);
      sub_1809676EC((icu::RegexCompile *)((char *)v2 + 368), *((unsigned int *)v2 + 71), *((UErrorCode **)v2 + 1));
      UChar32 v31 = (UErrorCode *)*((void *)v2 + 1);
      int v32 = (icu::RegexCompile *)((char *)v2 + 368);
      uint64_t v33 = 4294967288LL;
      goto LABEL_201;
    case 57:
      this = v2;
      unsigned int v41 = 25;
      unsigned int v42 = 28;
      goto LABEL_76;
    case 58:
      goto LABEL_21;
    case 59:
      *((_DWORD *)this + 72) = *((_DWORD *)this + 71);
      *((_BYTE *)this + 292) = 1;
      goto LABEL_324;
    case 60:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      BOOL v43 = **((_DWORD **)v2 + 1) <= 0;
      int v24 = 369098752;
      goto LABEL_298;
    case 61:
      icu::RegexCompile::handleCloseParen(this);
      icu::RegexCompile::appendOp(v2, (**((_DWORD **)v2 + 1) < 1) << 25);
LABEL_78:
      unsigned int v3 = 0;
      goto LABEL_324;
    case 62:
      unsigned int v7 = icu::RegexCompile::scanNamedChar(this);
      goto LABEL_48;
    case 63:
      int v44 = icu::RegexCompile::blockTopLoc(this, 0);
      goto LABEL_216;
    case 64:
      int v15 = 196612;
LABEL_144:
      icu::RegexCompile::setPushOp((UErrorCode **)this, v15);
      goto LABEL_324;
    case 65:
      uint64_t v14 = (icu::UVector **)icu::UVector::elementAt( (icu::RegexCompile *)((char *)this + 416),  *((_DWORD *)this + 106) - 1);
      uint64_t v192 = 0LL;
      __int128 v190 = 0u;
      __int128 v191 = 0u;
      __int128 v188 = 0u;
      __int128 v189 = 0u;
      __int128 v186 = 0u;
      __int128 v187 = 0u;
      __int128 v184 = 0u;
      __int128 v185 = 0u;
      __int128 v182 = 0u;
      __int128 v183 = 0u;
      __int128 v180 = 0u;
      __int128 v181 = 0u;
      icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v180);
      icu::UnicodeSet::applyIntPropertyValue((icu::UnicodeSet *)&v180, 0x2000LL, 0x1000u, *((UErrorCode **)v2 + 1));
      icu::UnicodeSet::add((icu::UnicodeSet *)&v180, 9u);
LABEL_113:
      uint64_t v79 = (icu::UnicodeSet *)&v180;
      goto LABEL_114;
    case 66:
      icu::RegexCompile::handleCloseParen(this);
      goto LABEL_324;
    case 67:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      int v140 = *((_DWORD *)v2 + 71);
      if ((v140 & 0x20) != 0)
      {
        BOOL v43 = **((_DWORD **)v2 + 1) <= 0;
        int v24 = 352321536;
      }

      else
      {
        BOOL v43 = **((_DWORD **)v2 + 1) <= 0;
        if ((v140 & 1) != 0) {
          int v24 = 452984832;
        }
        else {
          int v24 = 201326592;
        }
      }

      goto LABEL_298;
    case 68:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      else {
        int v16 = 0;
      }
      icu::RegexCompile::appendOp(v2, v16);
      int v17 = icu::RegexCompile::allocateStackData(v2, 3);
      int v18 = icu::RegexCompile::buildOp((int **)v2, 8u, v17);
      icu::RegexCompile::appendOp(v2, v18);
      else {
        int v19 = 0;
      }
      icu::RegexCompile::appendOp(v2, v19);
      sub_1809676EC((icu::RegexCompile *)((char *)v2 + 368), *((unsigned int *)v2 + 71), *((UErrorCode **)v2 + 1));
      sub_1809676EC((icu::RegexCompile *)((char *)v2 + 368), 4294967294LL, *((UErrorCode **)v2 + 1));
      sub_1809676EC( (icu::RegexCompile *)((char *)v2 + 368),  (*(_DWORD *)(*(void *)(*((void *)v2 + 2) + 32LL) + 8LL) - 3),  *((UErrorCode **)v2 + 1));
      sub_1809676EC( (icu::RegexCompile *)((char *)v2 + 368),  (*(_DWORD *)(*(void *)(*((void *)v2 + 2) + 32LL) + 8LL) - 1),  *((UErrorCode **)v2 + 1));
      sub_1807C9210(*(_DWORD **)(*((void *)v2 + 2) + 136LL), v17, *((UErrorCode **)v2 + 1));
      if (!*((void *)v2 + 63)) {
        goto LABEL_324;
      }
      if ((icu::RegexPattern::initNamedCaptureMap(*((icu::RegexPattern **)v2 + 2)) & 1) != 0)
      {
        int v20 = uhash_puti( *(void *)(*((void *)v2 + 2) + 192LL),  *((void *)v2 + 63),  *(_DWORD *)(*(void *)(*((void *)v2 + 2) + 136LL) + 8LL),  *((int **)v2 + 1));
        *((void *)v2 + 63) = 0LL;
        if (v20 >= 1 && **((int **)v2 + 1) <= 0)
        {
LABEL_21:
          int v4 = 66325;
          goto LABEL_192;
        }

        goto LABEL_324;
      }

      int v4 = *(_DWORD *)(*((void *)v2 + 2) + 120LL);
      goto LABEL_192;
    case 70:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      else {
        int v81 = 0;
      }
      icu::RegexCompile::appendOp(v2, v81);
      int v82 = icu::RegexCompile::allocateData((int **)v2, 1);
      int v83 = icu::RegexCompile::buildOp((int **)v2, 0x20u, v82);
      icu::RegexCompile::appendOp(v2, v83);
      else {
        int v84 = 0;
      }
      icu::RegexCompile::appendOp(v2, v84);
      int v30 = (icu::RegexCompile *)((char *)v2 + 368);
      sub_1809676EC((icu::RegexCompile *)((char *)v2 + 368), *((unsigned int *)v2 + 71), *((UErrorCode **)v2 + 1));
      sub_1809676EC((icu::RegexCompile *)((char *)v2 + 368), 4294967293LL, *((UErrorCode **)v2 + 1));
      uint64_t v85 = (UErrorCode *)*((void *)v2 + 1);
      uint64_t v86 = (*(_DWORD *)(*(void *)(*((void *)v2 + 2) + 32LL) + 8LL) - 3);
      goto LABEL_202;
    case 71:
      int v4 = 66315;
      goto LABEL_192;
    case 72:
      unsigned int v118 = (icu::UVector **)icu::UVector::elementAt( (icu::RegexCompile *)((char *)this + 416),  *((_DWORD *)this + 106) - 1);
      sub_1809682C0(v118, 0x200u, *((UErrorCode **)v2 + 1));
      goto LABEL_324;
    case 73:
      int64_t v21 = (icu::UnicodeSet *)icu::UStack::pop((icu::RegexCompile *)((char *)this + 416));
      goto LABEL_55;
    case 74:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      int64_t v21 = icu::RegexCompile::scanProp((int **)v2);
LABEL_55:
      icu::RegexCompile::compileSet(v2, v21);
      goto LABEL_324;
    case 75:
    case 79:
      uint64_t v5 = icu::UMemory::operator new((uint64_t *)a2, (icu::UMemory *)0x40, a2);
      if (v5)
      {
        *uint64_t v5 = (uint64_t)off_18971B688;
        *((_WORD *)v5 + 4) = 2;
        *((void *)v2 + 63) = v5;
        goto LABEL_324;
      }

      *((void *)v2 + 63) = 0LL;
      this = v2;
      int v4 = 7;
      goto LABEL_193;
    case 76:
      int v162 = *(_DWORD *)(*(void *)(*((void *)this + 2) + 136LL) + 8LL);
      for (int i = u_charDigitValue(*((_DWORD *)this + 18)); i < v162; int i = u_charDigitValue(CharLL) + 10 * i)
      {
        UChar32 CharLL = *((_DWORD *)v2 + 17);
        if (CharLL == -1)
        {
          UChar32 CharLL = icu::RegexCompile::nextCharLL(v2);
          *((_DWORD *)v2 + 17) = CharLL;
        }

        icu::RegexCompile::nextCharLL(v2);
      }

      icu::RegexCompile::fixLiterals((uint64_t)v2, 0);
      __int128 v107 = (int **)v2;
      if ((*((_BYTE *)v2 + 284) & 2) != 0) {
        unsigned int v108 = 41;
      }
      else {
        unsigned int v108 = 34;
      }
LABEL_258:
      int v154 = icu::RegexCompile::buildOp(v107, v108, i);
      int v153 = v2;
      goto LABEL_259;
    case 77:
      unsigned int v119 = icu::RegexCompile::blockTopLoc(this, 1);
      int v120 = icu::RegexCompile::buildOp((int **)v2, 6u, *(_DWORD *)(*(void *)(*((void *)v2 + 2) + 32LL) + 8LL));
      icu::UVector64::setElementAt(*(void *)(*((void *)v2 + 2) + 32LL), v120, v119);
      goto LABEL_324;
    case 78:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      __asm { BR              X10 }

      return result;
    case 80:
      unsigned int v41 = 26;
      unsigned int v42 = 29;
LABEL_76:
      icu::RegexCompile::compileInterval(this, v41, v42);
      goto LABEL_324;
    case 82:
      int v139 = icu::RegexCompile::scanPosixProp((int **)this);
      if (v139)
      {
LABEL_239:
        __int128 v158 = v139;
        unint64_t v159 = (icu::UVector **)icu::UVector::elementAt( (icu::RegexCompile *)((char *)v2 + 416),  *((_DWORD *)v2 + 106) - 1);
        icu::UnicodeSet::addAll(v159, v158);
        __int16 v161 = icu::UnicodeSet::~UnicodeSet(v160, v158);
        icu::UMemory::operator delete(v161);
      }

      goto LABEL_324;
    case 83:
      int v64 = 262152;
      goto LABEL_236;
    case 84:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      if ((*((_DWORD *)v2 + 71) & 0x100) != 0) {
        int v24 = 889192448;
      }
      else {
        int v24 = 0x10000000;
      }
      int v23 = **((_DWORD **)v2 + 1);
LABEL_92:
      BOOL v43 = v23 <= 0;
      goto LABEL_298;
    case 85:
      int v64 = 262150;
LABEL_236:
      icu::RegexCompile::setPushOp((UErrorCode **)this, v64);
      uint64_t v87 = (icu::RegexCompile *)((char *)v2 + 456);
      icu::UVector::addElement((icu::RegexCompile *)((char *)v2 + 456), 1, *((UErrorCode **)v2 + 1));
      if ((*((_BYTE *)v2 + 284) & 2) != 0) {
        goto LABEL_237;
      }
      goto LABEL_324;
    case 86:
      uint64_t v121 = 10LL * *((int *)this + 102) + u_charDigitValue(*((_DWORD *)this + 18));
      if (v121 >= 0x80000000LL)
      {
LABEL_191:
        int v4 = 66311;
LABEL_192:
        this = v2;
LABEL_193:
        icu::RegexCompile::error(this, v4);
      }

      else
      {
        *((_DWORD *)v2 + 102) = v121;
      }

      goto LABEL_324;
    case 87:
      uint64_t v14 = (icu::UVector **)icu::UVector::elementAt( (icu::RegexCompile *)((char *)this + 416),  *((_DWORD *)this + 106) - 1);
      uint64_t v192 = 0LL;
      __int128 v190 = 0u;
      __int128 v191 = 0u;
      __int128 v188 = 0u;
      __int128 v189 = 0u;
      __int128 v186 = 0u;
      __int128 v187 = 0u;
      __int128 v184 = 0u;
      __int128 v185 = 0u;
      __int128 v182 = 0u;
      __int128 v183 = 0u;
      __int128 v180 = 0u;
      __int128 v181 = 0u;
      icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v180);
      icu::UnicodeSet::applyIntPropertyValue((icu::UnicodeSet *)&v180, 0x2000LL, 0x1000u, *((UErrorCode **)v2 + 1));
      icu::UnicodeSet::add((icu::UnicodeSet *)&v180, 9u);
      goto LABEL_115;
    case 88:
      unsigned int v143 = icu::RegexCompile::blockTopLoc(this, 0);
      uint64_t v144 = *(void *)(*((void *)v2 + 2) + 32LL);
      signed int v145 = *(_DWORD *)(v144 + 8);
      uint64_t v146 = *(void *)(*(void *)(v144 + 24) + 8LL * v143);
      int v147 = BYTE3(v146);
      if (BYTE3(v146) > 0x14u)
      {
        if (BYTE3(v146) != 21 && BYTE3(v146) != 27)
        {
LABEL_232:
          unsigned int v148 = icu::RegexCompile::blockTopLoc(v2, 1);
          int v149 = icu::RegexCompile::buildOp((int **)v2, 0xFu, v148 + 1);
          if (!icu::RegexCompile::minMatchLength( v2,  v148,  *(_DWORD *)(*(void *)(*((void *)v2 + 2) + 32LL) + 8LL) - 1))
          {
            icu::RegexCompile::insertOp(v2, v148);
            int v150 = icu::RegexCompile::allocateStackData(v2, 1);
            int v151 = icu::RegexCompile::buildOp((int **)v2, 0x23u, v150);
            icu::UVector64::setElementAt(*(void *)(*((void *)v2 + 2) + 32LL), v151, v148 + 1);
            int v149 = icu::RegexCompile::buildOp((int **)v2, 0x12u, v148 + 2);
          }

          int v152 = icu::RegexCompile::buildOp( (int **)v2,  6u,  *(_DWORD *)(*(void *)(*((void *)v2 + 2) + 32LL) + 8LL) + 1);
          icu::UVector64::setElementAt(*(void *)(*((void *)v2 + 2) + 32LL), v152, v148);
          int v153 = v2;
          int v154 = v149;
LABEL_259:
          icu::RegexCompile::appendOp(v153, v154);
          unsigned int v3 = 1;
          goto LABEL_324;
        }
      }

      else
      {
        if (BYTE3(v146) == 11)
        {
          uint64_t v173 = (int)icu::RegexCompile::buildOp((int **)v2, 0x32u, v146 & 0xFFFFFF);
          uint64_t v144 = *(void *)(*((void *)v2 + 2) + 32LL);
          goto LABEL_320;
        }

        if (BYTE3(v146) != 12) {
          goto LABEL_232;
        }
      }

      else {
        int v172 = 0;
      }
      uint64_t v173 = v172 & 0xFFFFFFFD | (v147 == 21) | (2 * (*((_DWORD *)v2 + 71) & 1));
LABEL_320:
      icu::UVector64::setElementAt(v144, v173, v143);
LABEL_321:
      int v44 = icu::RegexCompile::allocateStackData(v2, 1);
      __int128 v39 = (int **)v2;
      unsigned int v40 = 51;
      goto LABEL_322;
    case 89:
      int v141 = *((_DWORD *)this + 18);
      if (v141 > 108)
      {
        switch(v141)
        {
          case 'm':
            int v142 = 8;
            goto LABEL_313;
          case 's':
            int v142 = 32;
            goto LABEL_313;
          case 'u':
            int v142 = 0;
            goto LABEL_313;
          case 'w':
            int v142 = 256;
            goto LABEL_313;
          case 'x':
            int v142 = 4;
            goto LABEL_313;
          default:
            goto LABEL_327;
        }
      }

      switch(v141)
      {
        case '-':
          int v142 = 0;
          *((_BYTE *)this + 292) = 0;
          break;
        case 'd':
          int v142 = 1;
          break;
        case 'i':
          int v142 = 2;
          break;
        default:
LABEL_327:
          abort();
      }

LABEL_313:
      if (*((_BYTE *)this + 292)) {
        int v178 = *((_DWORD *)this + 72) | v142;
      }
      else {
        int v178 = *((_DWORD *)this + 72) & ~v142;
      }
      *((_DWORD *)this + 72) = v178;
      goto LABEL_324;
    case 90:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      BOOL v43 = **((_DWORD **)v2 + 1) <= 0;
      int v24 = 385875968;
      goto LABEL_298;
    case 91:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      int v47 = icu::RegexCompile::allocateData((int **)v2, 5);
      int v48 = icu::RegexCompile::buildOp((int **)v2, 0x2Cu, v47);
      icu::RegexCompile::appendOp(v2, v48);
      int v49 = icu::RegexCompile::buildOp((int **)v2, 0x2Du, v47);
      icu::RegexCompile::appendOp(v2, v49);
      icu::RegexCompile::appendOp(v2, 0);
      icu::RegexCompile::appendOp(v2, 0);
      else {
        int v50 = 0;
      }
      icu::RegexCompile::appendOp(v2, v50);
      else {
        int v51 = 0;
      }
      icu::RegexCompile::appendOp(v2, v51);
      int v30 = (icu::RegexCompile *)((char *)v2 + 368);
      sub_1809676EC((icu::RegexCompile *)((char *)v2 + 368), *((unsigned int *)v2 + 71), *((UErrorCode **)v2 + 1));
      UChar32 v31 = (UErrorCode *)*((void *)v2 + 1);
      int v32 = (icu::RegexCompile *)((char *)v2 + 368);
      uint64_t v33 = 4294967289LL;
      goto LABEL_201;
    case 92:
      unsigned int v10 = icu::RegexCompile::blockTopLoc(this, 1);
      icu::RegexCompile::insertOp(v2, v10);
      int v11 = icu::RegexCompile::allocateData((int **)v2, 1);
      int v12 = icu::RegexCompile::buildOp((int **)v2, 0x20u, v11);
      icu::UVector64::setElementAt(*(void *)(*((void *)v2 + 2) + 32LL), v12, v10);
      int v13 = icu::RegexCompile::buildOp((int **)v2, 6u, *(_DWORD *)(*(void *)(*((void *)v2 + 2) + 32LL) + 8LL) + 1);
      icu::UVector64::setElementAt(*(void *)(*((void *)v2 + 2) + 32LL), v13, v10 + 1);
LABEL_98:
      __int128 v39 = (int **)v2;
      unsigned int v40 = 33;
      int v44 = v11;
      goto LABEL_322;
    case 93:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      int v30 = (icu::RegexCompile *)((char *)v2 + 368);
      int v57 = *((_DWORD *)v2 + 94);
      BOOL v58 = __OFSUB__(v57, 1);
      int v59 = v57 - 1;
      if (v59 < 0 != v58)
      {
        unsigned int v60 = 0;
      }

      else
      {
        *((_DWORD *)v2 + 94) = v59;
        unsigned int v60 = *(_DWORD *)(*((void *)v2 + 49) + 4LL * v59);
      }

      int v164 = icu::RegexCompile::buildOp((int **)v2, 6u, *(_DWORD *)(*(void *)(*((void *)v2 + 2) + 32LL) + 8LL) + 1);
      icu::UVector64::setElementAt(*(void *)(*((void *)v2 + 2) + 32LL), v164, v60);
      else {
        int v165 = 0;
      }
      icu::RegexCompile::appendOp(v2, v165);
      sub_1809676EC( (icu::RegexCompile *)((char *)v2 + 368),  (*(_DWORD *)(*(void *)(*((void *)v2 + 2) + 32LL) + 8LL) - 1),  *((UErrorCode **)v2 + 1));
      else {
        int v166 = 0;
      }
      icu::RegexCompile::appendOp(v2, v166);
      goto LABEL_203;
    case 94:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      BOOL v43 = **((_DWORD **)v2 + 1) <= 0;
      int v24 = 167772161;
LABEL_298:
      if (v43) {
        int v114 = v24;
      }
      else {
        int v114 = 0;
      }
      goto LABEL_323;
    case 95:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      int v8 = **((_DWORD **)v2 + 1);
      int v9 = 167772161;
LABEL_167:
      int v113 = v9 + 3;
      if (v8 <= 0) {
        int v114 = v113;
      }
      else {
        int v114 = 0;
      }
      goto LABEL_323;
    case 96:
LABEL_47:
      unsigned int v7 = *((_DWORD *)v2 + 18);
LABEL_48:
      uint64_t v6 = (uint64_t)v2 + 296;
LABEL_49:
      icu::UnicodeString::append(v6, v7);
      goto LABEL_324;
    case 97:
      *((_BYTE *)this + 42) = 0;
      goto LABEL_324;
    case 98:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      __asm { BR              X10 }

      return result;
    case 99:
      *((_DWORD *)this + 103) = *((_DWORD *)this + 102);
      goto LABEL_324;
    case 100:
      unsigned int v116 = icu::RegexCompile::blockTopLoc(this, 1);
      int v136 = *(_DWORD *)(*(void *)(*((void *)v2 + 2) + 32LL) + 8LL);
      int v137 = icu::RegexCompile::buildOp((int **)v2, 0xDu, v136 + 1);
      icu::UVector64::setElementAt(*(void *)(*((void *)v2 + 2) + 32LL), v137, v116);
      int v138 = icu::RegexCompile::buildOp((int **)v2, 0xDu, v136 + 2);
      icu::RegexCompile::appendOp(v2, v138);
LABEL_215:
      int v44 = v116 + 1;
LABEL_216:
      __int128 v39 = (int **)v2;
      unsigned int v40 = 6;
      goto LABEL_322;
    case 101:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      int v123 = icu::RegexCompile::allocateData((int **)v2, 4);
      int v124 = icu::RegexCompile::buildOp((int **)v2, 0x25u, v123);
      icu::RegexCompile::appendOp(v2, v124);
      int v125 = icu::RegexCompile::buildOp((int **)v2, 6u, *(_DWORD *)(*(void *)(*((void *)v2 + 2) + 32LL) + 8LL) + 2);
      icu::RegexCompile::appendOp(v2, v125);
      int v126 = icu::RegexCompile::buildOp( (int **)v2,  0xDu,  *(_DWORD *)(*(void *)(*((void *)v2 + 2) + 32LL) + 8LL) + 3);
      icu::RegexCompile::appendOp(v2, v126);
      int v127 = icu::RegexCompile::buildOp((int **)v2, 0x26u, v123);
      icu::RegexCompile::appendOp(v2, v127);
      icu::RegexCompile::appendOp(v2, (**((_DWORD **)v2 + 1) < 1) << 24);
      else {
        int v128 = 0;
      }
      icu::RegexCompile::appendOp(v2, v128);
      else {
        int v129 = 0;
      }
      icu::RegexCompile::appendOp(v2, v129);
      int v30 = (icu::RegexCompile *)((char *)v2 + 368);
      sub_1809676EC((icu::RegexCompile *)((char *)v2 + 368), *((unsigned int *)v2 + 71), *((UErrorCode **)v2 + 1));
      UChar32 v31 = (UErrorCode *)*((void *)v2 + 1);
      int v32 = (icu::RegexCompile *)((char *)v2 + 368);
      uint64_t v33 = 4294967292LL;
LABEL_201:
      sub_1809676EC(v32, v33, v31);
      uint64_t v85 = (UErrorCode *)*((void *)v2 + 1);
      uint64_t v86 = (*(_DWORD *)(*(void *)(*((void *)v2 + 2) + 32LL) + 8LL) - 2);
LABEL_202:
      sub_1809676EC(v30, v86, v85);
LABEL_203:
      sub_1809676EC( v30,  (*(_DWORD *)(*(void *)(*((void *)v2 + 2) + 32LL) + 8LL) - 1),  *((UErrorCode **)v2 + 1));
      goto LABEL_324;
    case 102:
      uint64_t v14 = (icu::UVector **)icu::UVector::elementAt( (icu::RegexCompile *)((char *)this + 416),  *((_DWORD *)this + 106) - 1);
      uint64_t v192 = 0LL;
      __int128 v190 = 0u;
      __int128 v191 = 0u;
      __int128 v188 = 0u;
      __int128 v189 = 0u;
      __int128 v186 = 0u;
      __int128 v187 = 0u;
      __int128 v184 = 0u;
      __int128 v185 = 0u;
      __int128 v182 = 0u;
      __int128 v183 = 0u;
      __int128 v180 = 0u;
      __int128 v181 = 0u;
      icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v180);
      uint64_t v22 = (const icu::UnicodeSet *)(qword_18C449BC0 + 208);
LABEL_109:
      uint64_t v79 = icu::UnicodeSet::addAll((icu::UVector **)&v180, v22);
LABEL_114:
      icu::UnicodeSet::complement(v79);
LABEL_115:
      icu::UnicodeSet::addAll(v14, (const icu::UnicodeSet *)&v180);
      icu::UnicodeSet::~UnicodeSet(v80, (icu::UnicodeSet *)&v180);
      goto LABEL_324;
    case 103:
LABEL_25:
      int v4 = 66310;
      goto LABEL_192;
    case 104:
      int v88 = (icu::UVector **)icu::UVector::elementAt( (icu::RegexCompile *)((char *)this + 416),  *((_DWORD *)this + 106) - 1);
      uint64_t v89 = (const icu::UnicodeSet *)(qword_18C449BC0 + 808);
LABEL_185:
      icu::UnicodeSet::addAll(v88, v89);
      goto LABEL_324;
    default:
      goto LABEL_327;
  }

void *icu::RegexCompile::error(void *this, int a2)
{
  uint64_t v2 = this;
  unsigned int v3 = (int *)this[1];
  if (a2 == 7 || *v3 <= 0)
  {
    int *v3 = a2;
    uint64_t v4 = this[6];
    if (v4 < 0x80000000LL)
    {
      uint64_t v7 = this[7];
      uint64_t v5 = this[3];
      *(_DWORD *)uint64_t v5 = v4;
      if (v7 > 0x7FFFFFFF) {
        int v6 = -1;
      }
      else {
        int v6 = v7;
      }
    }

    else
    {
      uint64_t v5 = this[3];
      *(_DWORD *)uint64_t v5 = 0;
      int v6 = -1;
    }

    *(_DWORD *)(v5 + 4) = v6;
    UErrorCode status = U_ZERO_ERROR;
    *(_OWORD *)(v5 + 8) = 0u;
    *(_OWORD *)(v5 + 24) = 0u;
    uint64_t v8 = this[3];
    *(_OWORD *)(v8 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    utext_extract(*(UText **)(this[2] + 8LL), this[4] - 15LL, this[4], (UChar *)(this[3] + 8LL), 16, &status);
    return (void *)utext_extract(*(UText **)(v2[2] + 8LL), v2[4], v2[4] + 15LL, (UChar *)(v2[3] + 40LL), 16, &status);
  }

  return this;
}

uint64_t icu::RegexCompile::allocateStackData(icu::RegexCompile *this, int a2)
{
  if (**((int **)this + 1) <= 0)
  {
    int v4 = 66304;
    if ((a2 - 257) < 0xFFFFFF00
      || (uint64_t v5 = *((void *)this + 2), v2 = *(unsigned int *)(v5 + 128), (v2 & 0x80000000) != 0))
    {
      uint64_t v2 = 0LL;
    }

    else
    {
      unsigned int v6 = v2 + a2;
      *(_DWORD *)(v5 + 128) = v6;
      if (v6 < 0xFFFFF0) {
        return v2;
      }
      int v4 = 66324;
    }

    icu::RegexCompile::error(this, v4);
    return v2;
  }

  return 0LL;
}

void icu::RegexCompile::stripNOPs(icu::RegexCompile *this)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  uint64_t v1 = (UErrorCode *)*((void *)this + 1);
  uint64_t v3 = *(unsigned int *)(*(void *)(*((void *)this + 2) + 32LL) + 8LL);
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  icu::UVector32::UVector32((icu::UVector32 *)&v26, v3, v1);
  if ((int)v3 <= 0)
  {
    int v11 = 0;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    uint64_t v32 = 0LL;
    __int128 v31 = 0u;
    int v28 = off_18971B688;
    LOWORD(v29) = 2;
    goto LABEL_42;
  }

  uint64_t v4 = 0LL;
  int v5 = 0;
  do
  {
    int v6 = DWORD2(v26);
    if (SDWORD2(v26) < -1 || SHIDWORD(v26) <= SDWORD2(v26))
    {
      if (!icu::UVector32::expandCapacity( (icu::UVector32 *)&v26,  DWORD2(v26) + 1,  *((UErrorCode **)this + 1))) {
        goto LABEL_12;
      }
      int v6 = DWORD2(v26);
    }

    *(_DWORD *)(*((void *)&v27 + 1) + 4LL * v6) = v5;
    ++DWORD2(v26);
LABEL_12:
    uint64_t v8 = *(void *)(*((void *)this + 2) + 32LL);
    else {
      uint64_t v9 = *(void *)(*(void *)(v8 + 24) + 8 * v4);
    }
    if ((v9 & 0xFF000000) == 0x7000000) {
      ++v5;
    }
    ++v4;
  }

  while (v3 != v4);
  uint64_t v10 = 0LL;
  int v11 = 0;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  uint64_t v32 = 0LL;
  __int128 v31 = 0u;
  int v28 = off_18971B688;
  LOWORD(v29) = 2;
  do
  {
    uint64_t v12 = *((void *)this + 2);
    uint64_t v13 = *(void *)(v12 + 32);
    if (v10 >= *(int *)(v13 + 8))
    {
      LODWORD(v14) = 0;
LABEL_26:
      uint64_t v18 = (int)v14;
LABEL_27:
      icu::UVector64::setElementAt(v13, v18, v11++);
    }

    else
    {
      uint64_t v14 = *(void *)(*(void *)(v13 + 24) + 8 * v10);
      unsigned int v15 = BYTE3(v14);
      switch(BYTE3(v14))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xE:
        case 0x10:
        case 0x11:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1E:
        case 0x20:
        case 0x21:
        case 0x23:
        case 0x25:
        case 0x26:
        case 0x27:
        case 0x28:
        case 0x2A:
        case 0x2B:
        case 0x2C:
        case 0x2D:
        case 0x2E:
        case 0x2F:
        case 0x30:
        case 0x31:
        case 0x32:
        case 0x33:
        case 0x34:
        case 0x35:
        case 0x36:
        case 0x37:
        case 0x38:
        case 0x39:
        case 0x3A:
          goto LABEL_26;
        case 6:
        case 0xD:
        case 0xF:
        case 0x12:
        case 0x1C:
        case 0x1D:
        case 0x1F:
        case 0x24:
          int v16 = 0;
          int v17 = v14 & 0xFFFFFF;
          if (SDWORD2(v26) >= 1 && SDWORD2(v26) > v17) {
            int v16 = *(_DWORD *)(*((void *)&v27 + 1) + 4 * (v14 & 0xFFFFFF));
          }
          uint64_t v18 = (int)icu::RegexCompile::buildOp((int **)this, BYTE3(v14), v17 - v16);
          uint64_t v13 = *(void *)(*((void *)this + 2) + 32LL);
          goto LABEL_27;
        case 7:
          break;
        case 0x22:
        case 0x29:
          int v19 = v14 & 0xFFFFFF;
          uint64_t v20 = *(void *)(v12 + 136);
          int v21 = *(_DWORD *)(v20 + 8);
          if (v19 <= v21)
          {
            if (v19) {
              BOOL v22 = v21 < 1;
            }
            else {
              BOOL v22 = 1;
            }
            if (v22) {
              int v23 = 0;
            }
            else {
              int v23 = *(_DWORD *)(*(void *)(v20 + 24) + 4LL * (v19 - 1));
            }
            int v24 = icu::RegexCompile::buildOp((int **)this, v15, v23);
            icu::UVector64::setElementAt(*(void *)(*((void *)this + 2) + 32LL), v24, v11++);
            *(_BYTE *)(*((void *)this + 2) + 184LL) = 1;
          }

          else
          {
            icu::RegexCompile::error(this, 66314);
          }

          break;
        default:
          if (BYTE3(v14) != 255) {
            abort();
          }
          goto LABEL_26;
      }
    }

    ++v10;
  }

  while (v3 != v10);
LABEL_42:
  icu::UVector64::setSize(*(icu::UVector64 **)(*((void *)this + 2) + 32LL), v11);
  icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)&v28);
  icu::UVector32::~UVector32((void **)&v26);
}

uint64_t icu::RegexCompile::minMatchLength(icu::RegexCompile *this, signed int a2, int a3)
{
  uint64_t v4 = (UErrorCode *)*((void *)this + 1);
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  icu::UVector32::UVector32((icu::UVector32 *)&v31, a3 + 2, v4);
  icu::UVector32::setSize((icu::UVector32 *)&v31, a3 + 2);
  int v8 = a3 + 1;
  if (a3 + 1 >= a2)
  {
    signed int v9 = a2;
    do
    {
      icu::UVector32::setElementAt((uint64_t)&v31, 0x7FFFFFFF, v9);
      BOOL v16 = v9++ <= a3;
    }

    while (v16);
  }

  if (a2 > a3)
  {
    int v10 = 0;
    goto LABEL_8;
  }

  int v10 = 0;
  do
  {
    if (a2 < 0)
    {
      v10 &= v10 >> 31;
      goto LABEL_35;
    }

    uint64_t v13 = *(void *)(*((void *)this + 2) + 32LL);
    signed int v14 = *(_DWORD *)(v13 + 8);
    if (v14 <= a2) {
      LODWORD(v15) = 0;
    }
    else {
      uint64_t v15 = *(void *)(*(void *)(v13 + 24) + 8LL * a2);
    }
    BOOL v16 = SDWORD2(v31) < 1 || SDWORD2(v31) <= a2;
    if (v16)
    {
      v10 &= v10 >> 31;
    }

    else if (*(_DWORD *)(*((void *)&v32 + 1) + 4LL * a2) < v10)
    {
      int v10 = *(_DWORD *)(*((void *)&v32 + 1) + 4LL * a2);
    }

    switch(BYTE3(v15))
    {
      case 0u:
      case 2u:
      case 5u:
      case 7u:
      case 8u:
      case 9u:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x14u:
      case 0x17u:
      case 0x18u:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
      case 0x23u:
      case 0x26u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Du:
      case 0x2Eu:
      case 0x2Fu:
      case 0x30u:
      case 0x32u:
      case 0x33u:
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x37u:
        goto LABEL_35;
      case 1u:
        goto LABEL_71;
      case 3u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0x13u:
      case 0x15u:
      case 0x16u:
      case 0x1Bu:
      case 0x27u:
      case 0x31u:
      case 0x38u:
      case 0x39u:
      case 0x3Au:
        goto LABEL_32;
      case 4u:
        if (v14 <= ++a2) {
          LODWORD(v24) = 0;
        }
        else {
          uint64_t v24 = *(void *)(*(void *)(v13 + 24) + 8LL * a2);
        }
        unsigned int v30 = v24 & 0xFFFFFF;
        if ((v10 ^ 0x7FFFFFFFu) <= v30) {
          int v10 = 0x7FFFFFFF;
        }
        else {
          v10 += v30;
        }
        goto LABEL_35;
      case 6u:
        signed int v25 = v15 & 0xFFFFFF;
        if ((v15 & 0xFFFFFF) > a2)
        {
          int v26 = 0;
          if (SDWORD2(v31) >= 1 && SDWORD2(v31) > v25) {
            int v26 = *(_DWORD *)(*((void *)&v32 + 1) + 4 * (v15 & 0xFFFFFF));
          }
          if (v10 < v26) {
            goto LABEL_82;
          }
        }

        goto LABEL_35;
      case 0xDu:
        goto LABEL_70;
      case 0x19u:
      case 0x1Au:
        if (v14 <= a2 + 1) {
          LODWORD(v17) = 0;
        }
        else {
          uint64_t v17 = *(void *)(*(void *)(v13 + 24) + 8LL * (a2 + 1));
        }
        if (v14 <= a2 + 2) {
          int v27 = 0;
        }
        else {
          int v27 = *(_DWORD *)(*(void *)(v13 + 24) + 8LL * (a2 + 2));
        }
        signed int v29 = v17 & 0xFFFFFF;
        if (v27) {
          a2 += 3;
        }
        else {
          a2 = v29;
        }
        goto LABEL_35;
      case 0x24u:
        ++a2;
LABEL_70:
        signed int v25 = v15 & 0xFFFFFF;
        if ((v15 & 0xFFFFFF) >= a2)
        {
          int v28 = 0;
          if (SDWORD2(v31) >= 1 && SDWORD2(v31) > v25) {
            int v28 = *(_DWORD *)(*((void *)&v32 + 1) + 4 * (v15 & 0xFFFFFF));
          }
          if (v28 > v10) {
LABEL_82:
          }
            icu::UVector32::setElementAt((uint64_t)&v31, v10, v25);
        }

        else
        {
LABEL_71:
          int v10 = 0;
          if (SDWORD2(v31) >= 1 && SDWORD2(v31) > a2 + 1) {
            int v10 = *(_DWORD *)(*((void *)&v32 + 1) + 4LL * (a2 + 1));
          }
        }

        goto LABEL_35;
      case 0x25u:
      case 0x2Cu:
        if (BYTE3(v15) == 37) {
          int v18 = 2;
        }
        else {
          int v18 = 1;
        }
        break;
      case 0x28u:
        ++a2;
LABEL_32:
        else {
          ++v10;
        }
        goto LABEL_35;
      default:
        abort();
    }

    while (1)
    {
      signed int v19 = a2 + 1;
      if (a2 <= -2 || *(_DWORD *)(v13 + 8) <= v19) {
        goto LABEL_60;
      }
      uint64_t v20 = *(void *)(*(void *)(v13 + 24) + 8LL * v19);
      int v21 = v18 + 2;
      if (BYTE3(v20) != 37) {
        int v21 = v18;
      }
      int v18 = BYTE3(v20) == 44 ? v21 + 1 : v21;
      if (BYTE3(v20) != 6) {
        break;
      }
      signed int v22 = v20 & 0xFFFFFF;
      if ((v20 & 0xFFFFFF) > v19)
      {
        int v23 = 0;
        if (SDWORD2(v31) >= 1 && SDWORD2(v31) > v22) {
          int v23 = *(_DWORD *)(*((void *)&v32 + 1) + 4 * (v20 & 0xFFFFFF));
        }
        if (v10 < v23)
        {
          icu::UVector32::setElementAt((uint64_t)&v31, v10, v22);
          uint64_t v13 = *(void *)(*((void *)this + 2) + 32LL);
        }
      }

void icu::RegexCompile::matchStartType(icu::RegexCompile *this)
{
  uint64_t v1 = (UErrorCode *)*((void *)this + 1);
  if (*(int *)v1 <= 0)
  {
    int v3 = *(_DWORD *)(*(void *)(*((void *)this + 2) + 32LL) + 8LL);
    __int128 v66 = 0u;
    __int128 v67 = 0u;
    uint64_t v4 = icu::UVector32::UVector32((icu::UVector32 *)&v66, v3 + 1, v1);
    icu::UVector32::setSize(v4, v3 + 1);
    if (v3 < 4)
    {
      int v7 = 0;
    }

    else
    {
      for (unsigned int i = 3; i != v3; ++i)
        icu::UVector32::setElementAt((uint64_t)&v66, 0x7FFFFFFF, i);
      int v6 = 0;
      int v7 = 0;
      int v8 = 1;
      for (unsigned int j = 3; (int)j < v3; ++j)
      {
        if ((j & 0x80000000) != 0)
        {
          v6 &= v6 >> 31;
        }

        else
        {
          uint64_t v10 = *((void *)this + 2);
          uint64_t v11 = *(void *)(v10 + 32);
          signed int v12 = *(_DWORD *)(v11 + 8);
          else {
            uint64_t v13 = *(void *)(*(void *)(v11 + 24) + 8LL * j);
          }
          if (SDWORD2(v66) < 1 || SDWORD2(v66) <= (int)j)
          {
            v6 &= v6 >> 31;
          }

          else if (*(_DWORD *)(*((void *)&v67 + 1) + 4LL * j) < v6)
          {
            int v6 = *(_DWORD *)(*((void *)&v67 + 1) + 4LL * j);
          }

          switch(BYTE3(v13))
          {
            case 0u:
            case 2u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
            case 0xEu:
            case 0x10u:
            case 0x11u:
            case 0x14u:
            case 0x18u:
            case 0x1Fu:
            case 0x20u:
            case 0x21u:
            case 0x22u:
            case 0x23u:
            case 0x29u:
            case 0x2Au:
            case 0x35u:
            case 0x36u:
            case 0x37u:
              continue;
            case 1u:
              goto LABEL_74;
            case 3u:
              if (v6) {
                goto LABEL_125;
              }
              int v23 = *(icu::UnicodeSet **)(v10 + 160);
              unsigned int v24 = v13 & 0xFFFFFF;
              goto LABEL_123;
            case 4u:
              else {
                signed int v25 = *(uint64_t **)(*(void *)(v11 + 24) + 8LL * j);
              }
              unsigned int v37 = v25 & 0xFFFFFF;
              if (!v6)
              {
                unsigned int v38 = icu::UnicodeString::char32At(v25, (icu::UnicodeString *)(v10 + 40), v13 & 0xFFFFFF);
                icu::UnicodeSet::add(*(icu::UnicodeSet **)(*((void *)this + 2) + 160LL), v38);
                ++v7;
                uint64_t v39 = *((void *)this + 2);
                *(_DWORD *)(v39 + 148) = v13 & 0xFFFFFF;
                *(_DWORD *)(v39 + 152) = v37;
              }

              int v8 = 0;
              if ((v6 ^ 0x7FFFFFFFu) <= v37) {
                int v6 = 0x7FFFFFFF;
              }
              else {
                v6 += v37;
              }
              continue;
            case 6u:
              signed int v26 = v13 & 0xFFFFFF;
              int v27 = 0;
              if (SDWORD2(v66) >= 1 && SDWORD2(v66) > v26) {
                int v27 = *(_DWORD *)(*((void *)&v67 + 1) + 4 * (v13 & 0xFFFFFF));
              }
              if (v6 >= v27) {
                goto LABEL_20;
              }
              goto LABEL_108;
            case 0xAu:
              if (v6) {
                goto LABEL_125;
              }
              int v28 = (const icu::UnicodeSet *)(qword_18C449BC0 + 200 * (v13 & 0xFFFFFF) + 8);
              signed int v29 = *(icu::UVector ***)(v10 + 160);
              goto LABEL_66;
            case 0xBu:
              if (v6) {
                goto LABEL_125;
              }
              int v28 = (const icu::UnicodeSet *)icu::UVector::elementAt(*(icu::UVector **)(v10 + 104), v13 & 0xFFFFFF);
              signed int v29 = *(icu::UVector ***)(*((void *)this + 2) + 160LL);
LABEL_66:
              icu::UnicodeSet::addAll(v29, v28);
              goto LABEL_124;
            case 0xCu:
            case 0x13u:
            case 0x15u:
            case 0x1Bu:
              if (v6) {
                goto LABEL_125;
              }
              icu::UnicodeSet::clear(*(icu::UnicodeSet **)(v10 + 160));
              icu::UnicodeSet::complement(*(icu::UnicodeSet **)(*((void *)this + 2) + 160LL));
              goto LABEL_124;
            case 0xDu:
              goto LABEL_73;
            case 0xFu:
            case 0x12u:
            case 0x1Cu:
            case 0x1Du:
            case 0x33u:
              goto LABEL_20;
            case 0x16u:
              if (v6) {
                goto LABEL_125;
              }
              uint64_t v65 = 0LL;
              __int128 v63 = 0u;
              __int128 v64 = 0u;
              __int128 v61 = 0u;
              __int128 v62 = 0u;
              __int128 v59 = 0u;
              __int128 v60 = 0u;
              __int128 v57 = 0u;
              __int128 v58 = 0u;
              __int128 v55 = 0u;
              __int128 v56 = 0u;
              __int128 v53 = 0u;
              __int128 v54 = 0u;
              icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v53);
              icu::UnicodeSet::applyIntPropertyValue( (icu::UnicodeSet *)&v53,  0x2000LL,  0x200u,  *((UErrorCode **)this + 1));
              goto LABEL_91;
            case 0x17u:
              if (!v8) {
                continue;
              }
              int v16 = 3;
              goto LABEL_71;
            case 0x19u:
            case 0x1Au:
              else {
                uint64_t v15 = *(void *)(*(void *)(v11 + 24) + 8LL * (j + 1)) & 0xFFFFFFLL;
              }
              if (v12 <= (int)(j + 2) || !*(void *)(*(void *)(v11 + 24) + 8LL * (j + 2)))
              {
                int v35 = 0;
                if (v35 > v6) {
                  icu::UVector32::setElementAt((uint64_t)&v66, v6, v15);
                }
              }

              int v8 = 0;
              j += 3;
              continue;
            case 0x1Eu:
            case 0x2Bu:
              if (!v8) {
                continue;
              }
              int v16 = 4;
LABEL_71:
              *(_DWORD *)(v10 + 144) = v16;
              int v8 = 1;
              continue;
            case 0x24u:
              ++j;
LABEL_73:
              signed int v26 = v13 & 0xFFFFFF;
              if ((v13 & 0xFFFFFF) >= j)
              {
                int v36 = 0;
                if (SDWORD2(v66) >= 1 && SDWORD2(v66) > v26) {
                  int v36 = *(_DWORD *)(*((void *)&v67 + 1) + 4 * (v13 & 0xFFFFFF));
                }
                if (v36 > v6) {
LABEL_108:
                }
                  icu::UVector32::setElementAt((uint64_t)&v66, v6, v26);
LABEL_20:
                int v8 = 0;
              }

              else
              {
LABEL_74:
                int v8 = 0;
                if (SDWORD2(v66) < 1 || SDWORD2(v66) <= (int)(j + 1))
                {
                  int v6 = 0;
                }

                else
                {
                  int v8 = 0;
                  int v6 = *(_DWORD *)(*((void *)&v67 + 1) + 4LL * (j + 1));
                }
              }

              continue;
            case 0x25u:
            case 0x2Cu:
              if (BYTE3(v13) == 37) {
                int v17 = 2;
              }
              else {
                int v17 = 1;
              }
              do
              {
                while (1)
                {
                  for (int k = j; k <= -2 || *(_DWORD *)(v11 + 8) <= k + 1; ++k)
                    ;
                  unsigned int j = k + 1;
                  uint64_t v19 = *(void *)(*(void *)(v11 + 24) + 8LL * (k + 1));
                  int v20 = v17 + 2;
                  if (BYTE3(v19) != 37) {
                    int v20 = v17;
                  }
                  int v17 = BYTE3(v19) == 44 ? v20 + 1 : v20;
                  if (BYTE3(v19) != 6) {
                    break;
                  }
                  signed int v21 = v19 & 0xFFFFFF;
                  if ((v19 & 0xFFFFFF) > j)
                  {
                    int v22 = 0;
                    if (SDWORD2(v66) >= 1 && SDWORD2(v66) > v21) {
                      int v22 = *(_DWORD *)(*((void *)&v67 + 1) + 4 * (v19 & 0xFFFFFF));
                    }
                    if (v6 < v22)
                    {
                      icu::UVector32::setElementAt((uint64_t)&v66, v6, v21);
                      uint64_t v11 = *(void *)(*((void *)this + 2) + 32LL);
                      unsigned int j = k + 1;
                    }
                  }
                }
              }

              while (BYTE3(v19) != 48 && BYTE3(v19) != 38 || --v17);
              unsigned int j = k + 1;
              continue;
            case 0x27u:
              if (!v6)
              {
                if (u_hasBinaryProperty(v13 & 0xFFFFFF, UCHAR_CASE_SENSITIVE))
                {
                  uint64_t v65 = 0LL;
                  __int128 v63 = 0u;
                  __int128 v64 = 0u;
                  __int128 v61 = 0u;
                  __int128 v62 = 0u;
                  __int128 v59 = 0u;
                  __int128 v60 = 0u;
                  __int128 v57 = 0u;
                  __int128 v58 = 0u;
                  __int128 v55 = 0u;
                  __int128 v56 = 0u;
                  __int128 v53 = 0u;
                  __int128 v54 = 0u;
                  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v53, v13 & 0xFFFFFF, v13 & 0xFFFFFF);
                  icu::UnicodeSet::closeOver((uint64_t)&v53, 2);
                  icu::UnicodeSet::addAll( *(icu::UVector ***)(*((void *)this + 2) + 160LL),  (const icu::UnicodeSet *)&v53);
                  icu::UnicodeSet::~UnicodeSet(v30, (icu::UnicodeSet *)&v53);
                }

                else
                {
                  int v23 = *(icu::UnicodeSet **)(*((void *)this + 2) + 160LL);
                  unsigned int v24 = v13 & 0xFFFFFF;
LABEL_123:
                  icu::UnicodeSet::add(v23, v24);
                }

void *icu::RegexCompile::appendOp(int **this, unsigned int a2, int a3)
{
  int v4 = icu::RegexCompile::buildOp(this, a2, a3);
  return icu::RegexCompile::appendOp(this, v4);
}

void *icu::RegexCompile::handleCloseParen(icu::RegexCompile *this)
{
  uint64_t result = (void *)icu::RegexCompile::fixLiterals((uint64_t)this, 0);
  while (1)
  {
    int v3 = *((_DWORD *)this + 94);
    unsigned int v4 = v3 - 1;
    if (v3 >= 1) {
      break;
    }
    unsigned int v6 = 0;
LABEL_7:
    uint64_t v7 = *(void *)(*((void *)this + 2) + 32LL);
    signed int v8 = *(_DWORD *)(v7 + 8);
    else {
      uint64_t v9 = *(void *)(*(void *)(v7 + 24) + 8LL * v6);
    }
    uint64_t result = (void *)icu::UVector64::setElementAt(v7, (int)(v8 | v9), v6);
    *((_DWORD *)this + 10icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v6;
  }

  *((_DWORD *)this + 94) = v4;
  uint64_t v5 = *((void *)this + 49);
  unsigned int v6 = *(_DWORD *)(v5 + 4LL * v4);
  if ((v6 & 0x80000000) == 0) {
    goto LABEL_7;
  }
  BOOL v10 = v3 >= 2;
  unsigned int v11 = v3 - 2;
  if (v10)
  {
    *((_DWORD *)this + 94) = v11;
    int v12 = *(_DWORD *)(v5 + 4LL * v11);
  }

  else
  {
    int v12 = 0;
  }

  *((_DWORD *)this + 7icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v12;
  switch(v6)
  {
    case 0xFFFFFFF8:
      int v13 = *((_DWORD *)this + 100);
      BOOL v14 = __OFSUB__(v13, 5);
      int v15 = v13 - 5;
      if (v15 < 0 != v14 || (uint64_t v16 = *(void *)(*((void *)this + 2) + 32LL), *(_DWORD *)(v16 + 8) <= v15)) {
        LODWORD(v17) = 0;
      }
      else {
        uint64_t v17 = *(void *)(*(void *)(v16 + 24) + 8LL * v15) & 0xFFFFFFLL;
      }
      int v35 = icu::RegexCompile::buildOp((int **)this, 0x30u, v17);
      icu::RegexCompile::appendOp(this, v35);
      int v36 = *(_DWORD *)(*(void *)(*((void *)this + 2) + 32LL) + 8LL) - 1;
      int matched = icu::RegexCompile::minMatchLength(this, *((_DWORD *)this + 100), v36);
      unsigned int v38 = icu::RegexCompile::maxMatchLength(this, *((_DWORD *)this + 100), v36);
      if (HIBYTE(v38)) {
        goto LABEL_46;
      }
      unsigned int v39 = v38;
      if (matched == 0x7FFFFFFF) {
        int v40 = 0;
      }
      else {
        int v40 = matched;
      }
      icu::UVector64::setElementAt(*(void *)(*((void *)this + 2) + 32LL), v40, *((_DWORD *)this + 100) - 3);
      icu::UVector64::setElementAt(*(void *)(*((void *)this + 2) + 32LL), v39, *((_DWORD *)this + 100) - 2);
      int v41 = icu::RegexCompile::buildOp( (int **)this,  0x1Fu,  *(_DWORD *)(*(void *)(*((void *)this + 2) + 32LL) + 8LL));
      uint64_t v42 = *(void *)(*((void *)this + 2) + 32LL);
      uint64_t v43 = v41;
      unsigned int v44 = *((_DWORD *)this + 100) - 1;
      goto LABEL_56;
    case 0xFFFFFFF9:
      int v18 = *((_DWORD *)this + 100);
      BOOL v14 = __OFSUB__(v18, 4);
      int v19 = v18 - 4;
      if (v19 < 0 != v14 || (uint64_t v20 = *(void *)(*((void *)this + 2) + 32LL), *(_DWORD *)(v20 + 8) <= v19)) {
        LODWORD(v2icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0;
      }
      else {
        uint64_t v21 = *(void *)(*(void *)(v20 + 24) + 8LL * v19) & 0xFFFFFFLL;
      }
      int v45 = icu::RegexCompile::buildOp((int **)this, 0x2Eu, v21);
      icu::RegexCompile::appendOp(this, v45);
      int v46 = icu::RegexCompile::buildOp((int **)this, 0x26u, v21);
      icu::RegexCompile::appendOp(this, v46);
      int v47 = *(_DWORD *)(*(void *)(*((void *)this + 2) + 32LL) + 8LL) - 1;
      int v48 = icu::RegexCompile::minMatchLength(this, *((_DWORD *)this + 100), v47);
      unsigned int v49 = icu::RegexCompile::maxMatchLength(this, *((_DWORD *)this + 100), v47);
      if (HIBYTE(v49))
      {
LABEL_46:
        uint64_t result = icu::RegexCompile::error(this, 66316);
      }

      else
      {
        unsigned int v50 = v49;
        if (v48 == 0x7FFFFFFF) {
          int v51 = 0;
        }
        else {
          int v51 = v48;
        }
        icu::UVector64::setElementAt(*(void *)(*((void *)this + 2) + 32LL), v51, *((_DWORD *)this + 100) - 2);
        uint64_t v52 = *(void *)(*((void *)this + 2) + 32LL);
        uint64_t v43 = v50;
        unsigned int v44 = *((_DWORD *)this + 100) - 1;
LABEL_57:
        uint64_t result = (void *)icu::UVector64::setElementAt(v52, v43, v44);
      }

      break;
    case 0xFFFFFFFA:
    case 0xFFFFFFFF:
      break;
    case 0xFFFFFFFB:
      int v22 = *((_DWORD *)this + 100);
      if (v22 >= 1 && (uint64_t v23 = *(void *)(*((void *)this + 2) + 32LL), *(_DWORD *)(v23 + 8) >= v22)) {
        uint64_t v24 = *(void *)(*(void *)(v23 + 24) + 8LL * (v22 - 1)) & 0xFFFFFFLL;
      }
      else {
        LODWORD(v24) = 0;
      }
      int v56 = icu::RegexCompile::buildOp((int **)this, 0x26u, v24);
      icu::RegexCompile::appendOp(this, v56);
      icu::RegexCompile::appendOp(this, (**((_DWORD **)this + 1) < 1) << 24);
      int v57 = icu::RegexCompile::buildOp((int **)this, 0x26u, v24);
      icu::RegexCompile::appendOp(this, v57);
      int v58 = icu::RegexCompile::buildOp( (int **)this,  6u,  *(_DWORD *)(*(void *)(*((void *)this + 2) + 32LL) + 8LL) - 1);
      uint64_t v42 = *(void *)(*((void *)this + 2) + 32LL);
      uint64_t v43 = v58;
      unsigned int v44 = *((_DWORD *)this + 100);
LABEL_56:
      uint64_t v52 = v42;
      goto LABEL_57;
    case 0xFFFFFFFC:
      int v25 = *((_DWORD *)this + 100);
      BOOL v14 = __OFSUB__(v25, 5);
      int v26 = v25 - 5;
      if (v26 < 0 != v14 || (uint64_t v27 = *(void *)(*((void *)this + 2) + 32LL), *(_DWORD *)(v27 + 8) <= v26)) {
        LODWORD(v28) = 0;
      }
      else {
        uint64_t v28 = *(void *)(*(void *)(v27 + 24) + 8LL * v26) & 0xFFFFFFLL;
      }
      __int128 v53 = (int **)this;
      unsigned int v54 = 38;
      goto LABEL_53;
    case 0xFFFFFFFD:
      int v29 = *((_DWORD *)this + 100);
      if (v29 < -1 || (uint64_t v30 = *(void *)(*((void *)this + 2) + 32LL), v31 = v29 + 1, *(_DWORD *)(v30 + 8) <= v31)) {
        LODWORD(v28) = 0;
      }
      else {
        uint64_t v28 = *(void *)(*(void *)(v30 + 24) + 8LL * v31) & 0xFFFFFFLL;
      }
      __int128 v53 = (int **)this;
      unsigned int v54 = 33;
      goto LABEL_53;
    case 0xFFFFFFFE:
      int v32 = *((_DWORD *)this + 100);
      if (v32 < -1 || (uint64_t v33 = *(void *)(*((void *)this + 2) + 32LL), v34 = v32 + 1, *(_DWORD *)(v33 + 8) <= v34)) {
        LODWORD(v28) = 0;
      }
      else {
        uint64_t v28 = *(void *)(*(void *)(v33 + 24) + 8LL * v34) & 0xFFFFFFLL;
      }
      __int128 v53 = (int **)this;
      unsigned int v54 = 9;
LABEL_53:
      int v55 = icu::RegexCompile::buildOp(v53, v54, v28);
      uint64_t result = icu::RegexCompile::appendOp(this, v55);
      break;
    default:
      abort();
  }

  *((_DWORD *)this + 10icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = *(_DWORD *)(*(void *)(*((void *)this + 2) + 32LL) + 8LL);
  return result;
}

uint64_t icu::RegexCompile::fixLiterals(uint64_t this, unsigned __int8 a2)
{
  uint64_t v2 = this;
  int v3 = a2;
  unsigned int v4 = (icu::UnicodeString *)(this + 296);
  while (1)
  {
    if (*(__int16 *)(v2 + 304) < 0)
    {
      int v6 = *(_DWORD *)(v2 + 308);
      if (!v6) {
        return this;
      }
    }

    else
    {
      unsigned int v5 = *(unsigned __int16 *)(v2 + 304);
      if (v5 < 0x20) {
        return this;
      }
      int v6 = v5 >> 5;
    }

    int v7 = icu::UnicodeString::moveIndex32(v4, v6, -1);
    unsigned int v9 = icu::UnicodeString::char32At(v8, v4, v7);
    if (!v3) {
      break;
    }
    unsigned int v10 = *(unsigned __int16 *)(v2 + 304);
    if (v7 || (v10 & 1) == 0)
    {
      if ((v10 & 0x8000) != 0) {
        unsigned int v11 = *(_DWORD *)(v2 + 308);
      }
      else {
        unsigned int v11 = v10 >> 5;
      }
      if (v11 > v7)
      {
        if (v7 > 1023)
        {
          *(_WORD *)(v2 + 304) = v10 | 0xFFE0;
          *(_DWORD *)(v2 + 308) = v7;
        }

        else
        {
          *(_WORD *)(v2 + 304) = *(_WORD *)(v2 + 304) & 0x1F | (32 * v7);
        }
      }
    }

    else
    {
      icu::UnicodeString::unBogus((uint64_t)v4);
    }

    icu::RegexCompile::fixLiterals((icu::RegexCompile *)v2, 0);
    this = icu::UnicodeString::append((uint64_t)v4, v9);
    int v3 = 0;
  }

  if ((*(_BYTE *)(v2 + 284) & 2) != 0)
  {
    icu::UnicodeString::foldCase((const UChar **)v4, 0LL);
    unsigned int v12 = *(unsigned __int16 *)(v2 + 304);
    if ((v12 & 0x8000) != 0) {
      int v13 = *(_DWORD *)(v2 + 308);
    }
    else {
      int v13 = v12 >> 5;
    }
    int v7 = icu::UnicodeString::moveIndex32(v4, v13, -1);
    unsigned int v9 = icu::UnicodeString::char32At(v14, v4, v7);
  }

  if (v7)
  {
    if (*(__int16 *)(v2 + 304) < 0 && *(int *)(v2 + 308) > 0xFFFFFF
      || (uint64_t v15 = *(void *)(v2 + 16), *(__int16 *)(v15 + 48) < 0) && *(int *)(v15 + 52) >= 0x1000000)
    {
      icu::RegexCompile::error((void *)v2, 66324);
    }

    uint64_t v16 = *(void *)(v2 + 16);
    unsigned int v17 = *(unsigned __int16 *)(v16 + 48);
    if ((*(_BYTE *)(v2 + 284) & 2) != 0)
    {
      if ((v17 & 0x8000) != 0) {
        int v18 = *(_DWORD *)(v16 + 52);
      }
      else {
        int v18 = v17 >> 5;
      }
      int v22 = (int **)v2;
      unsigned int v23 = 40;
    }

    else
    {
      if ((v17 & 0x8000) != 0) {
        int v18 = *(_DWORD *)(v16 + 52);
      }
      else {
        int v18 = v17 >> 5;
      }
      int v22 = (int **)v2;
      unsigned int v23 = 4;
    }

    int v24 = icu::RegexCompile::buildOp(v22, v23, v18);
    icu::RegexCompile::appendOp((void *)v2, v24);
    else {
      int v25 = *(unsigned __int16 *)(v2 + 304) >> 5;
    }
    int v26 = icu::RegexCompile::buildOp((int **)v2, 5u, v25);
    icu::RegexCompile::appendOp((void *)v2, v26);
    unsigned int v27 = *(unsigned __int16 *)(v2 + 304);
    int v28 = (__int16)v27;
    unsigned int v29 = v27 >> 5;
    if (v28 >= 0) {
      uint64_t v30 = v29;
    }
    else {
      uint64_t v30 = *(unsigned int *)(v2 + 308);
    }
    this = icu::UnicodeString::doAppend(*(void *)(v2 + 16) + 40LL, v4, 0, v30);
  }

  else
  {
    if ((*(_BYTE *)(v2 + 284) & 2) != 0 && u_hasBinaryProperty(v9, UCHAR_CASE_SENSITIVE))
    {
      int v19 = (int **)v2;
      unsigned int v20 = 39;
    }

    else
    {
      int v19 = (int **)v2;
      unsigned int v20 = 3;
    }

    int v21 = icu::RegexCompile::buildOp(v19, v20, v9);
    this = (uint64_t)icu::RegexCompile::appendOp((void *)v2, v21);
  }

  if ((*(_WORD *)(v2 + 304) & 1) != 0) {
    __int16 v31 = 2;
  }
  else {
    __int16 v31 = *(_WORD *)(v2 + 304) & 0x1F;
  }
  *(_WORD *)(v2 + 304) = v31;
  return this;
}

uint64_t icu::RegexCompile::buildOp(int **this, unsigned int a2, int a3)
{
  if (*this[1] > 0) {
    return 0LL;
  }
  if (a2 >= 0x100 || a3 >= 0x1000000) {
    goto LABEL_11;
  }
  if (a3 < 0)
  {
    if ((!a2 || a2 == 255) && HIBYTE(a3) == 255)
    {
      a2 = 255;
      return a3 | (a2 << 24);
    }

uint64_t sub_1809676EC(icu::UVector32 *this, uint64_t a2, UErrorCode *a3)
{
  int v5 = *((_DWORD *)this + 2);
  if (v5 >= -1 && *((_DWORD *)this + 3) > v5) {
    goto LABEL_5;
  }
  if (icu::UVector32::expandCapacity(this, v5 + 1, a3))
  {
    int v5 = *((_DWORD *)this + 2);
LABEL_5:
    *(_DWORD *)(*((void *)this + 3) + 4LL * v5) = a2;
    ++*((_DWORD *)this + 2);
  }

  return a2;
}

uint64_t icu::RegexCompile::allocateData(int **this, int a2)
{
  if (*this[1] > 0) {
    return 0LL;
  }
  if ((a2 - 257) < 0xFFFFFF00 || (v3 = this[2], uint64_t v2 = v3[33], (v2 & 0x80000000) != 0))
  {
    uint64_t v2 = 0LL;
  }

  else
  {
    v3[33] = v2 + a2;
  }

  icu::RegexCompile::error(this, 66304);
  return v2;
}

uint64_t icu::RegexCompile::blockTopLoc(icu::RegexCompile *this, int a2)
{
  uint64_t v4 = *(void *)(*((void *)this + 2) + 32LL);
  int v5 = *(_DWORD *)(v4 + 8);
  if (v5 == *((_DWORD *)this + 101)) {
    return *((unsigned int *)this + 100);
  }
  uint64_t v6 = (v5 - 1);
  if (v5 >= 1)
  {
    unsigned int v7 = v5 - 2;
    else {
      uint64_t v6 = v6;
    }
  }

  if (a2)
  {
    signed int v8 = (UErrorCode *)*((void *)this + 1);
    else {
      uint64_t v9 = 0LL;
    }
    icu::UVector64::insertElementAt((_DWORD *)v4, v9, v6, v8);
  }

  return v6;
}

void *icu::RegexCompile::appendOp(void *this, int a2)
{
  uint64_t v2 = (UErrorCode *)this[1];
  uint64_t v4 = (uint64_t)this;
  uint64_t v5 = *(void *)(this[2] + 32LL);
  int v6 = *(_DWORD *)(v5 + 8);
  int v7 = v6 + 1;
  if (v6 < -1 || *(_DWORD *)(v5 + 12) <= v6)
  {
    this = (void *)icu::UVector64::expandCapacity(*(icu::UVector64 **)(this[2] + 32LL), v7, v2);
    if (!(_DWORD)this) {
      goto LABEL_7;
    }
    int v6 = *(_DWORD *)(v5 + 8);
    int v7 = v6 + 1;
  }

  *(void *)(*(void *)(v5 + 24) + 8LL * v6) = a2;
  *(_DWORD *)(v5 + 8) = v7;
LABEL_7:
  return this;
}

uint64_t icu::RegexCompile::insertOp(icu::RegexCompile *this, signed int a2)
{
  uint64_t v4 = (UErrorCode *)*((void *)this + 1);
  uint64_t v5 = *(void *)(*((void *)this + 2) + 32LL);
  else {
    uint64_t v6 = 0LL;
  }
  uint64_t result = (uint64_t)icu::UVector64::insertElementAt(*(_DWORD **)(*((void *)this + 2) + 32LL), v6, a2, v4);
  int v8 = *(_DWORD *)(v5 + 8);
  if (v8 >= 1)
  {
    for (uint64_t i = 0LL; i < v8; ++i)
    {
      uint64_t v10 = *(void *)(*(void *)(v5 + 24) + 8 * i);
      if ((v10 & 0xFFFFFF) > a2)
      {
        int v12 = icu::RegexCompile::buildOp((int **)this, BYTE3(v10), (v10 & 0xFFFFFF) + 1);
        uint64_t result = icu::UVector64::setElementAt(v5, v12, i);
        int v8 = *(_DWORD *)(v5 + 8);
      }
    }
  }

  int v13 = *((_DWORD *)this + 94);
  if (v13 >= 1)
  {
    for (uint64_t j = 0LL; j < v13; ++j)
    {
      signed int v15 = *(_DWORD *)(*((void *)this + 49) + 4 * j);
      if (v15 > a2)
      {
        uint64_t result = icu::UVector32::setElementAt((uint64_t)this + 368, v15 + 1, j);
        int v13 = *((_DWORD *)this + 94);
      }
    }
  }

  signed int v16 = *((_DWORD *)this + 101);
  if (v16 > a2) {
    *((_DWORD *)this + 10icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v16 + 1;
  }
  signed int v17 = *((_DWORD *)this + 100);
  if (v17 > a2) {
    *((_DWORD *)this + 10icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v17 + 1;
  }
  return result;
}

uint64_t icu::RegexCompile::compileInlineInterval(icu::RegexCompile *this)
{
  int v1 = *((_DWORD *)this + 103);
  if (v1 > 10 || v1 < *((_DWORD *)this + 102)) {
    return 0LL;
  }
  signed int v3 = icu::RegexCompile::blockTopLoc(this, 0);
  int v4 = *((_DWORD *)this + 103);
  uint64_t v5 = *(void *)(*((void *)this + 2) + 32LL);
  if (v4)
  {
    signed int v6 = *(_DWORD *)(v5 + 8);
    int v7 = v6 - 1;
    if (v4 != 1 && v3 != v7) {
      return 0LL;
    }
    LODWORD(v9) = 0;
    if ((v3 & 0x80000000) == 0 && v6 > v3) {
      uint64_t v9 = *(void *)(*(void *)(v5 + 24) + 8LL * v3);
    }
    int v10 = icu::RegexCompile::buildOp((int **)this, 6u, v7 + 2 * v4 - *((_DWORD *)this + 102));
    if (!*((_DWORD *)this + 102))
    {
      icu::RegexCompile::insertOp(this, v3);
      icu::UVector64::setElementAt(*(void *)(*((void *)this + 2) + 32LL), v10, v3);
    }

    if (*((int *)this + 103) >= 2)
    {
      int v11 = 1;
      do
      {
        if (v11 >= *((_DWORD *)this + 102)) {
          icu::RegexCompile::appendOp(this, v10);
        }
        icu::RegexCompile::appendOp(this, v9);
        ++v11;
      }

      while (v11 < *((_DWORD *)this + 103));
    }
  }

  else
  {
    icu::UVector64::setSize((icu::UVector64 *)v5, v3);
    if (*((_DWORD *)this + 100) >= v3) {
      *((_DWORD *)this + 10icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = -1;
    }
    if (*((_DWORD *)this + 101) >= v3) {
      *((_DWORD *)this + 10icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = -1;
    }
  }

  return 1LL;
}

void *icu::RegexCompile::compileInterval(icu::RegexCompile *this, unsigned int a2, unsigned int a3)
{
  unsigned int v6 = icu::RegexCompile::blockTopLoc(this, 1);
  icu::RegexCompile::insertOp(this, v6);
  icu::RegexCompile::insertOp(this, v6);
  icu::RegexCompile::insertOp(this, v6);
  else {
    int v7 = 2;
  }
  Stackint Data = icu::RegexCompile::allocateStackData(this, v7);
  int v9 = icu::RegexCompile::buildOp((int **)this, a2, StackData);
  icu::UVector64::setElementAt(*(void *)(*((void *)this + 2) + 32LL), v9, v6);
  int v10 = icu::RegexCompile::buildOp((int **)this, 0x1Fu, *(_DWORD *)(*(void *)(*((void *)this + 2) + 32LL) + 8LL));
  icu::UVector64::setElementAt(*(void *)(*((void *)this + 2) + 32LL), v10, v6 + 1);
  icu::UVector64::setElementAt(*(void *)(*((void *)this + 2) + 32LL), *((int *)this + 102), v6 + 2);
  icu::UVector64::setElementAt(*(void *)(*((void *)this + 2) + 32LL), *((int *)this + 103), v6 + 3);
  int v11 = icu::RegexCompile::buildOp((int **)this, a3, v6);
  uint64_t result = icu::RegexCompile::appendOp(this, v11);
  int v13 = *((_DWORD *)this + 102);
  if (HIBYTE(v13) || (int v14 = *((_DWORD *)this + 103), v14 >= 0x1000000))
  {
    uint64_t result = icu::RegexCompile::error(this, 66311);
    int v13 = *((_DWORD *)this + 102);
    int v14 = *((_DWORD *)this + 103);
  }

  if (v13 > v14 && v14 != -1) {
    return icu::RegexCompile::error(this, 66313);
  }
  return result;
}

uint64_t sub_180967D40(icu::UVector64 *this, uint64_t a2, UErrorCode *a3)
{
  int v5 = *((_DWORD *)this + 2);
  int v6 = v5 + 1;
  if (v5 >= -1 && *((_DWORD *)this + 3) > v5) {
    goto LABEL_5;
  }
  if (icu::UVector64::expandCapacity(this, v6, a3))
  {
    int v5 = *((_DWORD *)this + 2);
    int v6 = v5 + 1;
LABEL_5:
    *(void *)(*((void *)this + 3) + 8LL * v5) = a2;
    *((_DWORD *)this + 2) = v6;
  }

  return a2;
}

uint64_t icu::RegexCompile::literalChar(icu::RegexCompile *this, unsigned int a2)
{
  return icu::UnicodeString::append((uint64_t)this + 296, a2);
}

icu::UnicodeSet *icu::RegexCompile::scanProp(int **this)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  if (*this[1] > 0) {
    return 0LL;
  }
  signed int v3 = (UChar32 *)(this + 9);
  BOOL v4 = *((_DWORD *)this + 18) == 80;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  uint64_t v12 = 0LL;
  __int128 v11 = 0u;
  int v8 = off_18971B688;
  LOWORD(v9) = 2;
  icu::RegexCompile::nextChar((uint64_t)this, (UChar32 *)this + 18);
  if (*v3 == 123)
  {
    while (1)
    {
      icu::RegexCompile::nextChar((uint64_t)this, v3);
      unsigned int v5 = *((_DWORD *)this + 18);
      if (v5 == 125) {
        break;
      }
      if (v5 == -1) {
        goto LABEL_7;
      }
      icu::UnicodeString::append((uint64_t)&v8, v5);
    }

    SetForProperty = icu::RegexCompile::createSetForProperty( (icu::RegexCompile *)this,  (const icu::UnicodeString *)&v8,  v4);
    icu::RegexCompile::nextChar((uint64_t)this, v3);
  }

  else
  {
LABEL_7:
    icu::RegexCompile::error(this, 66308);
    SetForProperty = 0LL;
  }

  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v8);
  return SetForProperty;
}

void icu::RegexCompile::compileSet(icu::RegexCompile *this, icu::UnicodeSet *a2)
{
  if (a2)
  {
    icu::UnicodeSet::removeAllStrings(a2);
    int v4 = icu::UnicodeSet::size(a2);
    if (v4 == 1)
    {
      unsigned int v6 = icu::UnicodeSet::charAt(a2, 0);
      icu::UnicodeString::append((uint64_t)this + 296, v6);
      goto LABEL_8;
    }

    if (!v4)
    {
      icu::RegexCompile::appendOp(this, (**((_DWORD **)this + 1) < 1) << 24);
LABEL_8:
      __int128 v9 = icu::UnicodeSet::~UnicodeSet(v5, a2);
      icu::UMemory::operator delete(v9);
      return;
    }

    icu::UnicodeSet::freeze(a2);
    int v7 = *(icu::UVector **)(*((void *)this + 2) + 104LL);
    int v8 = *((_DWORD *)v7 + 2);
    icu::UVector::addElement(v7, a2, *((UErrorCode **)this + 1));
    unsigned int v5 = (void *)**((unsigned int **)this + 1);
    int v10 = icu::RegexCompile::buildOp((int **)this, 0xBu, v8);
    icu::RegexCompile::appendOp(this, v10);
  }

uint64_t icu::RegexCompile::scanNamedChar(icu::RegexCompile *this)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  uint64_t v2 = (UChar32 *)((char *)this + 72);
  icu::RegexCompile::nextChar((uint64_t)this, (UChar32 *)this + 18);
  if (*((_DWORD *)this + 18) != 123)
  {
    icu::RegexCompile::error(this, 66308);
    return 0LL;
  }

  __int128 v13 = 0u;
  uint64_t v16 = 0LL;
  __int128 v15 = 0u;
  __int128 v14 = 0u;
  uint64_t v12 = off_18971B688;
  LOWORD(v13) = 2;
  while (1)
  {
    icu::RegexCompile::nextChar((uint64_t)this, v2);
    unsigned int v3 = *((_DWORD *)this + 18);
    if (v3 == 125) {
      break;
    }
    if (v3 == -1) {
      goto LABEL_23;
    }
    icu::UnicodeString::append((uint64_t)&v12, v3);
  }

  int v11 = 0;
  memset(v10, 0, sizeof(v10));
  if ((v13 & 0x11) != 0)
  {
    unsigned int v6 = 0LL;
  }

  else if ((v13 & 2) != 0)
  {
    unsigned int v6 = (_WORD *)&v13 + 1;
  }

  else
  {
    unsigned int v6 = (_WORD *)v14;
  }

  if ((v13 & 0x8000u) == 0LL) {
    int v7 = (unsigned __int16)v13 >> 5;
  }
  else {
    int v7 = DWORD1(v13);
  }
  if (((__int16)v13 & 0x80000000) == 0)
  {
    if ((unsigned __int16)v13 < 0xC80u)
    {
      uint64_t v8 = (unsigned __int16)v13 >> 5;
      goto LABEL_25;
    }

uint64_t icu::RegexCompile::peekCharLL(icu::RegexCompile *this)
{
  uint64_t result = *((unsigned int *)this + 17);
  if ((_DWORD)result == -1)
  {
    uint64_t result = icu::RegexCompile::nextCharLL(this);
    *((_DWORD *)this + 17) = result;
  }

  return result;
}

uint64_t icu::RegexCompile::nextCharLL(icu::RegexCompile *this)
{
  uint64_t result = *((unsigned int *)this + 17);
  if ((_DWORD)result != -1)
  {
    *((_DWORD *)this + 17) = -1;
    return result;
  }

  uint64_t v3 = *(void *)(*((void *)this + 2) + 8LL);
  uint64_t v4 = *(int *)(v3 + 40);
  if ((int)v4 >= *(_DWORD *)(v3 + 44)
    || (uint64_t result = *(unsigned __int16 *)(*(void *)(v3 + 48) + 2 * v4), result >> 11 > 0x1A))
  {
    uint64_t result = utext_next32(*(UText **)(*((void *)this + 2) + 8LL));
  }

  else
  {
    *(_DWORD *)(v3 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v4 + 1;
  }

  if ((int)result > 12)
  {
    if ((_DWORD)result != 13 && (_DWORD)result != 133 && (_DWORD)result != 8232)
    {
LABEL_18:
      ++*((void *)this + 7);
      goto LABEL_19;
    }

void *sub_1809682C0(icu::UVector **a1, unsigned int a2, UErrorCode *a3)
{
  unsigned int v6 = icu::UnicodeSet::applyIntPropertyValue((icu::UnicodeSet *)v9, 0x2000LL, a2, a3);
  icu::UnicodeSet::addAll(a1, v6);
  return icu::UnicodeSet::~UnicodeSet(v7, (icu::UnicodeSet *)v9);
}

void *sub_180968324(icu::UVector *a1, void *a2, UErrorCode *a3)
{
  uint64_t v4 = a2;
  if (*((void *)a1 + 3))
  {
    icu::UVector::adoptElement(a1, a2, a3);
  }

  else
  {
    icu::UVector::addElement(a1, a2, a3);
  }

  return v4;
}

uint64_t icu::RegexCompile::setPushOp(UErrorCode **this, int a2)
{
  unsigned int v6 = (icu::UnicodeSet *)icu::UMemory::operator new(v5, (icu::UMemory *)0xC8, v4);
  int v7 = v6;
  if (v6)
  {
    icu::UnicodeSet::UnicodeSet(v6);
    uint64_t v8 = this[1];
  }

  else
  {
    uint64_t v8 = this[1];
  }

  __int128 v9 = (icu::UVector *)(this + 52);
  if (this[55]) {
    return icu::UVector::adoptElement(v9, v7, v8);
  }
  else {
    return icu::UVector::addElement(v9, v7, v8);
  }
}

uint64_t icu::RegexCompile::setEval(icu::RegexCompile *this, int a2)
{
  unint64_t v4 = (icu::RegexCompile *)((char *)this + 456);
  uint64_t result = icu::UVector::elementAti((icu::RegexCompile *)((char *)this + 456), *((_DWORD *)this + 116) - 1);
  if ((result & 0xFFFF0000) >= (a2 & 0xFFFF0000))
  {
    int v6 = result;
    while (1)
    {
      icu::UStack::popi(v4);
      int v7 = (icu::UnicodeSet *)icu::UVector::elementAt( (icu::RegexCompile *)((char *)this + 416),  *((_DWORD *)this + 106) - 1);
      uint64_t v8 = v7;
      if (v6 <= 196612) {
        break;
      }
      if (v6 > 262150)
      {
        if (v6 == 262151) {
          goto LABEL_15;
        }
        if (v6 != 262152) {
LABEL_21:
        }
          abort();
      }

      else if (v6 != 196613)
      {
        if (v6 != 262150) {
          goto LABEL_21;
        }
        icu::UStack::pop((icu::RegexCompile *)((char *)this + 416));
        __int128 v9 = (icu::UVector **)icu::UVector::elementAt( (icu::RegexCompile *)((char *)this + 416),  *((_DWORD *)this + 106) - 1);
        icu::UnicodeSet::addAll(v9, v8);
        goto LABEL_16;
      }

      icu::UStack::pop((icu::RegexCompile *)((char *)this + 416));
      int v11 = (icu::UVector **)icu::UVector::elementAt( (icu::RegexCompile *)((char *)this + 416),  *((_DWORD *)this + 106) - 1);
      icu::UnicodeSet::retainAll(v11, v8);
LABEL_16:
      __int128 v13 = icu::UnicodeSet::~UnicodeSet(v10, v8);
      icu::UMemory::operator delete(v13);
LABEL_17:
      uint64_t result = icu::UVector::elementAti(v4, *((_DWORD *)this + 116) - 1);
      int v6 = result;
    }

    if (v6 == 131075)
    {
      icu::UnicodeSet::complement(v7);
      goto LABEL_17;
    }

    if (v6 == 131081)
    {
      icu::UnicodeSet::closeOver((uint64_t)v7, 2);
      icu::UnicodeSet::removeAllStrings(v8);
      goto LABEL_17;
    }

    if (v6 != 196612) {
      goto LABEL_21;
    }
LABEL_15:
    icu::UStack::pop((icu::RegexCompile *)((char *)this + 416));
    uint64_t v12 = (icu::UVector **)icu::UVector::elementAt( (icu::RegexCompile *)((char *)this + 416),  *((_DWORD *)this + 106) - 1);
    icu::UnicodeSet::removeAll(v12, v8);
    goto LABEL_16;
  }

  return result;
}

icu::UnicodeSet *icu::RegexCompile::scanPosixProp(int **this)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  if (*this[1] > 0) {
    return 0LL;
  }
  int v19 = this[4];
  uint64_t v3 = *((void *)this[2] + 1);
  uint64_t v4 = *(int *)(v3 + 40);
  else {
    int64_t v5 = (*(uint64_t (**)(void))(*(void *)(v3 + 56) + 64LL))();
  }
  char v6 = *((_BYTE *)this + 40);
  char v7 = *((_BYTE *)this + 41);
  char v8 = *((_BYTE *)this + 42);
  __int128 v9 = this[6];
  int v10 = this[7];
  int v11 = (unsigned int *)(this + 9);
  uint64_t v12 = this[9];
  __int128 v13 = this[8];
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  uint64_t v24 = 0LL;
  __int128 v23 = 0u;
  unsigned int v20 = off_18971B688;
  LOWORD(v2icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 2;
  icu::RegexCompile::nextChar((uint64_t)this, (UChar32 *)this + 18);
  unsigned int v14 = *((_DWORD *)this + 18);
  if (v14 == 94)
  {
    icu::RegexCompile::nextChar((uint64_t)this, (UChar32 *)this + 18);
    unsigned int v14 = *((_DWORD *)this + 18);
    BOOL v15 = 1;
  }

  else
  {
    BOOL v15 = 0;
  }

  while (1)
  {
    icu::UnicodeString::append((uint64_t)&v20, v14);
    icu::RegexCompile::nextChar((uint64_t)this, (UChar32 *)this + 18);
    if (*((_BYTE *)this + 76)) {
      break;
    }
    unsigned int v14 = *v11;
    if (*v11 == -1) {
      break;
    }
    if (v14 == 58)
    {
      icu::RegexCompile::nextChar((uint64_t)this, (UChar32 *)this + 18);
      if (*((_DWORD *)this + 18) == 93)
      {
        SetForProperty = icu::RegexCompile::createSetForProperty( (icu::RegexCompile *)this,  (const icu::UnicodeString *)&v20,  v15);
        goto LABEL_19;
      }

      break;
    }
  }

  this[4] = v19;
  *((_BYTE *)this + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v6;
  *((_BYTE *)this + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v7;
  *((_BYTE *)this + 42) = v8;
  this[6] = v9;
  this[7] = v10;
  this[8] = v13;
  this[9] = v12;
  uint64_t v17 = (UText *)*((void *)this[2] + 1);
  uint64_t v16 = v5 - v17->chunkNativeStart;
  if (v16 < 0 || v16 >= v17->nativeIndexingLimit || v17->chunkContents[v16] >> 10 > 0x36u)
  {
    utext_setNativeIndex(v17, v5);
    SetForProperty = 0LL;
  }

  else
  {
    SetForProperty = 0LL;
    v17->chunkint Offset = v16;
  }

uint64_t icu::RegexCompile::maxMatchLength(icu::RegexCompile *this, signed int a2, signed int a3)
{
  uint64_t v4 = (UErrorCode *)*((void *)this + 1);
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  icu::UVector32::UVector32((icu::UVector32 *)&v28, a3 + 1, v4);
  icu::UVector32::setSize((icu::UVector32 *)&v28, a3 + 1);
  if (a2 > a3) {
    goto LABEL_7;
  }
  unsigned int v8 = a2;
  do
    icu::UVector32::setElementAt((uint64_t)&v28, 0, v8++);
  while (a3 + 1 != v8);
  if (a2 > a3)
  {
LABEL_7:
    uint64_t v5 = 0LL;
    goto LABEL_8;
  }

  LODWORD(v1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  while (a2 < 0)
  {
    uint64_t v10 = v10 & ~((int)v10 >> 31);
LABEL_29:
    uint64_t v5 = v10;
    BOOL v14 = a2++ < a3;
    if (!v14) {
      goto LABEL_8;
    }
  }

  uint64_t v11 = *(void *)(*((void *)this + 2) + 32LL);
  signed int v12 = *(_DWORD *)(v11 + 8);
  if (v12 <= a2) {
    LODWORD(v13) = 0;
  }
  else {
    uint64_t v13 = *(void *)(*(void *)(v11 + 24) + 8LL * a2);
  }
  BOOL v14 = SDWORD2(v28) < 1 || SDWORD2(v28) <= a2;
  if (v14)
  {
    uint64_t v10 = v10 & ~((int)v10 >> 31);
  }

  else
  {
    int v15 = *(_DWORD *)(*((void *)&v29 + 1) + 4LL * a2);
    else {
      uint64_t v10 = v15;
    }
  }

  uint64_t v5 = 0x7FFFFFFFLL;
  switch(BYTE3(v13))
  {
    case 0:
    case 2:
    case 5:
    case 7:
    case 8:
    case 9:
    case 0x10:
    case 0x11:
    case 0x14:
    case 0x17:
    case 0x18:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x23:
    case 0x25:
    case 0x26:
    case 0x2A:
    case 0x2B:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x35:
    case 0x36:
    case 0x37:
      goto LABEL_28;
    case 1:
      uint64_t v10 = 0LL;
      if (SDWORD2(v28) < 1 || SDWORD2(v28) <= a2 + 1) {
        goto LABEL_29;
      }
      uint64_t v10 = *(unsigned int *)(*((void *)&v29 + 1) + 4LL * (a2 + 1));
      goto LABEL_28;
    case 3:
      else {
        uint64_t v10 = (v10 + 1);
      }
      uint64_t v10 = (v10 + 1);
      goto LABEL_28;
    case 4:
    case 0x28:
      if (v12 <= ++a2) {
        LODWORD(v18) = 0;
      }
      else {
        uint64_t v18 = *(void *)(*(void *)(v11 + 24) + 8LL * a2);
      }
      unsigned int v24 = v18 & 0xFFFFFF;
      uint64_t v10 = v24 + v10;
      goto LABEL_28;
    case 6:
      signed int v20 = v13 & 0xFFFFFF;
      int v21 = 0;
      if (SDWORD2(v28) >= 1 && SDWORD2(v28) > v20) {
        int v21 = *(_DWORD *)(*((void *)&v29 + 1) + 4 * (v13 & 0xFFFFFF));
      }
      goto LABEL_28;
    case 0xA:
    case 0xB:
    case 0xC:
    case 0x15:
    case 0x16:
    case 0x1B:
    case 0x27:
    case 0x31:
    case 0x38:
    case 0x39:
    case 0x3A:
      uint64_t v10 = (v10 + 2);
      goto LABEL_28;
    case 0xD:
    case 0xF:
    case 0x12:
    case 0x24:
      signed int v16 = v13 & 0xFFFFFF;
      int v17 = 0;
      if (SDWORD2(v28) >= 1 && SDWORD2(v28) > v16) {
        int v17 = *(_DWORD *)(*((void *)&v29 + 1) + 4 * (v13 & 0xFFFFFF));
      }
      uint64_t v10 = 0LL;
      goto LABEL_29;
    case 0x13:
    case 0x22:
    case 0x29:
    case 0x32:
    case 0x33:
    case 0x34:
      goto LABEL_8;
    case 0x19:
    case 0x1A:
      if (v12 <= a2 + 1) {
        LODWORD(v19) = 0;
      }
      else {
        uint64_t v19 = *(void *)(*(void *)(v11 + 24) + 8LL * (a2 + 1));
      }
      signed int v25 = v19 & 0xFFFFFF;
      int v26 = a2 + 4;
      if ((v19 & 0xFFFFFF) == a2 + 4)
      {
        a2 = v19 & 0xFFFFFF;
LABEL_28:
        uint64_t v5 = 0x7FFFFFFFLL;
        if ((_DWORD)v10 == 0x7FFFFFFF) {
          goto LABEL_8;
        }
        goto LABEL_29;
      }

      if (v12 <= a2 + 3)
      {
        LODWORD(v27) = 0;
      }

      else
      {
        uint64_t v27 = *(unsigned int *)(*(void *)(v11 + 24) + 8LL * (a2 + 3));
        if (v27 == 0xFFFFFFFFLL) {
          goto LABEL_77;
        }
      }

      uint64_t v10 = (int)v10 + (int)v27 * (uint64_t)(int)icu::RegexCompile::maxMatchLength(this, v26, v25 - 1);
      a2 = v25;
      if (v10 <= 2147483646) {
        goto LABEL_28;
      }
LABEL_77:
      uint64_t v5 = 0x7FFFFFFFLL;
LABEL_8:
      icu::UVector32::~UVector32((void **)&v28);
      return v5;
    case 0x2C:
      if (a2 >= a3) {
        goto LABEL_74;
      }
      while (1)
      {
        int v22 = a2 + 1;
        if (a2 >= -1 && v12 > v22)
        {
          uint64_t v23 = *(void *)(*(void *)(v11 + 24) + 8LL * v22);
        }

        ++a2;
        if (a3 == v22)
        {
          a2 = a3 + 1;
          goto LABEL_28;
        }
      }

icu::UnicodeSet *icu::RegexCompile::findCaseInsensitiveStarters( icu::RegexCompile *this, icu::UnicodeSet *a2, icu::UnicodeSet *a3)
{
  signed int v4 = (int)this;
  if (!u_hasBinaryProperty((UChar32)this, UCHAR_CASE_SENSITIVE)) {
    return icu::UnicodeSet::set(a2, v4, v4);
  }
  UChar32 v5 = u_foldCase(v4, 0);
  icu::UnicodeSet::set(a2, v5, v5);
  uint64_t v6 = 0LL;
  do
    signed int v7 = dword_180A3C3AC[v6++];
  while (v7 < v4);
  if (v7 == v4 && (_DWORD)v6 != 50LL)
  {
    int v8 = word_180A3C474[v6 - 1];
    if (word_180A492E0[v6 - 1] <= 1) {
      int v9 = 1;
    }
    else {
      int v9 = word_180A492E0[v6 - 1];
    }
    do
    {
      uint64_t v10 = v8 + 1LL;
      unsigned int v11 = word_180A49344[v8];
      if ((v11 & 0xFC00) == 0xD800)
      {
        v8 += 2;
        unsigned int v11 = word_180A49344[v10] + (v11 << 10) - 56613888;
      }

      else
      {
        ++v8;
      }

      icu::UnicodeSet::add(a2, v11);
      --v9;
    }

    while (v9);
  }

  icu::UnicodeSet::closeOver((uint64_t)a2, 2);
  return icu::UnicodeSet::removeAllStrings(a2);
}

icu::UnicodeSet *icu::RegexCompile::createSetForProperty( icu::RegexCompile *this, const icu::UnicodeString *a2, BOOL a3)
{
  uint64_t v99 = *MEMORY[0x1895F89C0];
  int v90 = 0LL;
  UErrorCode pErrorCode = U_ZERO_ERROR;
  __int128 v95 = 0u;
  uint64_t v98 = 0LL;
  __int128 v97 = 0u;
  __int128 v96 = 0u;
  int v94 = off_18971B688;
  LOWORD(v95) = 2;
  icu::UnicodeString::doAppend((uint64_t)&v94, (uint64_t)&unk_180A49416, 0, 0xFFFFFFFFLL);
  v68[3] = (uint64_t)&unk_180A49416;
  unsigned int v7 = *((unsigned __int16 *)a2 + 4);
  int v8 = (__int16)v7;
  unsigned int v9 = v7 >> 5;
  if (v8 >= 0) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = *((unsigned int *)a2 + 3);
  }
  icu::UnicodeString::doAppend((uint64_t)&v94, a2, 0, v10);
  icu::UnicodeString::doAppend((uint64_t)&v94, (uint64_t)L"}]", 0, 0xFFFFFFFFLL);
  v68[2] = (uint64_t)L"}]";
  unsigned int v11 = *((_DWORD *)this + 71) & 2;
  uint64_t v13 = (icu::UnicodeSet *)icu::UMemory::operator new( (uint64_t *)*((unsigned int *)this + 71),  (icu::UMemory *)0xC8,  v12);
  BOOL v14 = v13;
  if (v13) {
    icu::UnicodeSet::UnicodeSet(v13, (const icu::UnicodeString *)&v94, v11, 0LL, &pErrorCode);
  }
  sub_180969828(&v90, v14, &pErrorCode);
  unint64_t v15 = pErrorCode;
  if (pErrorCode < U_ILLEGAL_ARGUMENT_ERROR || pErrorCode == U_MEMORY_ALLOCATION_ERROR) {
    goto LABEL_89;
  }
  UErrorCode pErrorCode = U_ZERO_ERROR;
  unsigned int v16 = *((unsigned __int16 *)a2 + 4);
  int v17 = (__int16)v16;
  int v18 = v16 >> 5;
  if (v17 >= 0) {
    int v19 = v18;
  }
  else {
    int v19 = *((_DWORD *)a2 + 3);
  }
  v68[1] = (uint64_t)"w";
  if (!icu::UnicodeString::doCaseCompare((uint64_t)a2, 0, v19, (uint64_t)"w", 0, -1, 0))
  {
    int v35 = icu::UnicodeSet::cloneAsThawed((icu::UnicodeSet *)(qword_18C449BC0 + 208), v20, (uint64_t *)qword_18C449BC0);
LABEL_32:
    sub_180969828(&v90, v35, &pErrorCode);
    goto LABEL_89;
  }

  unsigned int v21 = *((unsigned __int16 *)a2 + 4);
  int v22 = (__int16)v21;
  int32_t v23 = v21 >> 5;
  if (v22 >= 0) {
    int32_t v24 = v23;
  }
  else {
    int32_t v24 = *((_DWORD *)a2 + 3);
  }
  v68[0] = (uint64_t)L"all";
  if (!icu::UnicodeString::doCompare((uint64_t)a2, 0, v24, (uint64_t)L"all", 0, -1))
  {
    int v36 = (icu::UnicodeSet *)icu::UMemory::operator new(v68, (icu::UMemory *)0xC8, v25);
    unsigned int v37 = v36;
    if (v36) {
      icu::UnicodeSet::UnicodeSet(v36, 0, 0x10FFFFu);
    }
    int v35 = v37;
    goto LABEL_32;
  }

  memset(v93, 0, sizeof(v93));
  int v26 = icu::UnicodeString::UnicodeString((icu::UnicodeString *)v93, (UChar **)a2);
  if (icu::UnicodeString::doEqualsSubstring((uint64_t)v26, 0, 2, (uint64_t)L"In", 0, 2))
  {
    LODWORD(v28) = WORD4(v93[0]) >> 5;
    if ((SWORD4(v93[0]) & 0x8000u) == 0) {
      unint64_t v28 = v28;
    }
    else {
      unint64_t v28 = HIDWORD(v93[0]);
    }
    v67[6] = (uint64_t)L"In";
    if ((int)v28 >= 3)
    {
      UErrorCode pErrorCode = U_ZERO_ERROR;
      __int128 v29 = (icu::UnicodeSet *)icu::UMemory::operator new((uint64_t *)v28, (icu::UMemory *)0xC8, v27);
      uint64_t v30 = v29;
      if (v29) {
        icu::UnicodeSet::UnicodeSet(v29);
      }
      sub_180969828(&v90, v30, &pErrorCode);
      uint64_t v31 = pErrorCode;
      if (pErrorCode <= U_ZERO_ERROR)
      {
        memset(v91, 0, 64);
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)v91, (const icu::UnicodeString *)v93, 2);
        int v32 = v90;
        icu::UnicodeString::UnicodeString((uint64_t)v92, (uint64_t)"B");
        icu::UnicodeSet::applyPropertyAlias( v32,  (const icu::UnicodeString *)v92,  (const icu::UnicodeString *)v91,  &pErrorCode);
        icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)v92);
        icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)v91);
      }

      goto LABEL_88;
    }
  }

  else
  {
    v67[5] = (uint64_t)L"In";
  }

  if (!icu::UnicodeString::doEqualsSubstring((uint64_t)a2, 0, 2, (uint64_t)"I", 0, 2))
  {
    v66[2] = (uint64_t)"I";
    goto LABEL_46;
  }

  unsigned int v38 = *((unsigned __int16 *)a2 + 4);
  int v39 = (__int16)v38;
  int v40 = v38 >> 5;
  if (v39 < 0) {
    int v40 = *((_DWORD *)a2 + 3);
  }
  v67[4] = (uint64_t)"I";
  if (v40 < 3)
  {
LABEL_46:
    v66[1] = (uint64_t)"j";
    int32_t v44 = u_strlen((const UChar *)"j");
    v66[0] = (uint64_t)"j";
    UErrorCode pErrorCode = U_ZERO_ERROR;
    int v46 = (icu::UnicodeSet *)icu::UMemory::operator new(v66, (icu::UMemory *)0xC8, v45);
    int v47 = v46;
    if (v46) {
      icu::UnicodeSet::UnicodeSet(v46);
    }
    sub_180969828(&v90, v47, &pErrorCode);
    uint64_t v31 = pErrorCode;
    if (pErrorCode > U_ZERO_ERROR) {
      goto LABEL_88;
    }
    uint64_t v86 = L"javaDefined";
    if (!sub_1807C3C7C((uint64_t)a2, (uint64_t *)&v86, -1))
    {
      sub_1809682C0((icu::UVector **)v90, 1u, &pErrorCode);
      icu::UnicodeSet::complement(v90);
LABEL_84:
      uint64_t v31 = pErrorCode;
      if (pErrorCode <= U_ZERO_ERROR && !icu::UnicodeSet::isEmpty(v90) && v11) {
        icu::UnicodeSet::closeOver((uint64_t)v90, 2);
      }
      goto LABEL_88;
    }

    uint64_t v85 = L"javaDigit";
    if (sub_1807C3C7C((uint64_t)a2, (uint64_t *)&v85, -1))
    {
      int v84 = L"javaIdentifierIgnorable";
      if (!sub_1807C3C7C((uint64_t)a2, (uint64_t *)&v84, -1))
      {
LABEL_78:
        sub_1809698CC(v90, &pErrorCode);
        goto LABEL_84;
      }

      int v83 = L"javaISOControl";
      if (!sub_1807C3C7C((uint64_t)a2, (uint64_t *)&v83, -1))
      {
        int v51 = icu::UnicodeSet::add(v90, 0, 0x1Fu);
        unsigned int v52 = 127;
        unsigned int v53 = 159;
LABEL_75:
        icu::UnicodeSet::add(v51, v52, v53);
        goto LABEL_84;
      }

      int v82 = "j";
      if (!sub_1807C3C7C((uint64_t)a2, (uint64_t *)&v82, -1))
      {
        sub_1809682C0((icu::UVector **)v90, 0x3Eu, &pErrorCode);
        unsigned int v54 = (icu::UVector **)v90;
        unsigned int v55 = 0x2000000;
LABEL_77:
        sub_1809682C0(v54, v55, &pErrorCode);
        sub_1809682C0((icu::UVector **)v90, 0x400000u, &pErrorCode);
        sub_1809682C0((icu::UVector **)v90, 0x200u, &pErrorCode);
        sub_1809682C0((icu::UVector **)v90, 0x400u, &pErrorCode);
        sub_1809682C0((icu::UVector **)v90, 0x100u, &pErrorCode);
        sub_1809682C0((icu::UVector **)v90, 0x40u, &pErrorCode);
        goto LABEL_78;
      }

      int v81 = L"javaJavaIdentifierStart";
      if (!sub_1807C3C7C((uint64_t)a2, (uint64_t *)&v81, -1))
      {
        sub_1809682C0((icu::UVector **)v90, 0x3Eu, &pErrorCode);
        sub_1809682C0((icu::UVector **)v90, 0x400u, &pErrorCode);
        sub_1809682C0((icu::UVector **)v90, 0x2000000u, &pErrorCode);
        int v56 = (icu::UVector **)v90;
        unsigned int v57 = 0x400000;
        goto LABEL_83;
      }

      uint64_t v80 = L"javaLetter";
      if (!sub_1807C3C7C((uint64_t)a2, (uint64_t *)&v80, -1))
      {
        int v56 = (icu::UVector **)v90;
        unsigned int v57 = 62;
        goto LABEL_83;
      }

      uint64_t v79 = "j";
      if (sub_1807C3C7C((uint64_t)a2, (uint64_t *)&v79, -1))
      {
        __int128 v78 = "j";
        if (!sub_1807C3C7C((uint64_t)a2, (uint64_t *)&v78, -1))
        {
          int v56 = (icu::UVector **)v90;
          unsigned int v57 = 4;
          goto LABEL_83;
        }

        __int128 v77 = "j";
        if (!sub_1807C3C7C((uint64_t)a2, (uint64_t *)&v77, -1))
        {
          icu::UnicodeSet::applyIntPropertyValue(v90, 3LL, 1u, &pErrorCode);
          goto LABEL_84;
        }

        __int128 v76 = L"javaSpaceChar";
        if (!sub_1807C3C7C((uint64_t)a2, (uint64_t *)&v76, -1))
        {
          int v56 = (icu::UVector **)v90;
          unsigned int v57 = 28672;
          goto LABEL_83;
        }

        double v75 = L"javaSupplementaryCodePoint";
        if (!sub_1807C3C7C((uint64_t)a2, (uint64_t *)&v75, -1))
        {
          int v51 = v90;
          unsigned int v52 = 0x10000;
LABEL_101:
          unsigned int v53 = 1114111;
          goto LABEL_75;
        }

        uint64_t v74 = "j";
        if (!sub_1807C3C7C((uint64_t)a2, (uint64_t *)&v74, -1))
        {
          int v56 = (icu::UVector **)v90;
          unsigned int v57 = 8;
          goto LABEL_83;
        }

        unint64_t v73 = "j";
        if (!sub_1807C3C7C((uint64_t)a2, (uint64_t *)&v73, -1))
        {
          sub_1809682C0((icu::UVector **)v90, 0x3Eu, &pErrorCode);
          int v56 = (icu::UVector **)v90;
          unsigned int v57 = 1024;
          goto LABEL_83;
        }

        unsigned int v72 = L"javaUnicodeIdentifierPart";
        if (sub_1807C3C7C((uint64_t)a2, (uint64_t *)&v72, -1))
        {
          int v71 = L"javaUpperCase";
          if (sub_1807C3C7C((uint64_t)a2, (uint64_t *)&v71, -1))
          {
            int v70 = L"javaValidCodePoint";
            if (sub_1807C3C7C((uint64_t)a2, (uint64_t *)&v70, -1))
            {
              uint64_t v69 = "j";
              sub_1809682C0((icu::UVector **)v90, 0x7000u, &pErrorCode);
              __int128 v61 = (icu::UVector **)v90;
              icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v91);
              __int128 v62 = icu::UnicodeSet::add((icu::UnicodeSet *)v91, 0xA0u);
              __int128 v63 = icu::UnicodeSet::add(v62, 0x2007u);
              __int128 v64 = icu::UnicodeSet::add(v63, 0x202Fu);
              icu::UnicodeSet::removeAll(v61, v64);
              icu::UnicodeSet::~UnicodeSet(v65, (icu::UnicodeSet *)v91);
              int v51 = icu::UnicodeSet::add(v90, 9u, 0xDu);
              unsigned int v52 = 28;
              unsigned int v53 = 31;
              goto LABEL_75;
            }

            int v51 = v90;
            unsigned int v52 = 0;
            goto LABEL_101;
          }

          int v56 = (icu::UVector **)v90;
          unsigned int v57 = 2;
LABEL_83:
          sub_1809682C0(v56, v57, &pErrorCode);
          goto LABEL_84;
        }

        unsigned int v54 = (icu::UVector **)v90;
        unsigned int v55 = 62;
        goto LABEL_77;
      }

      sub_1809682C0((icu::UVector **)v90, 0x3Eu, &pErrorCode);
    }

    int v56 = (icu::UVector **)v90;
    unsigned int v57 = 512;
    goto LABEL_83;
  }

  icu::UnicodeString::doReplace((uint64_t)v93, 0LL, 2LL, 0LL, 0, 0LL);
  if ((SWORD4(v93[0]) & 0x8000u) == 0) {
    int32_t v41 = WORD4(v93[0]) >> 5;
  }
  else {
    int32_t v41 = HIDWORD(v93[0]);
  }
  if ((icu::UnicodeString::doIndexOf((uint64_t)v93, 0x3Du, 0, v41) & 0x80000000) != 0)
  {
    int v88 = L"assigned";
    int v42 = sub_18096989C((uint64_t)v93, (uint64_t *)&v88, -1, 0);
    v67[3] = (uint64_t)v88;
    if (v42)
    {
      uint64_t v87 = L"TitleCase";
      int v43 = sub_18096989C((uint64_t)v93, (uint64_t *)&v87, -1, 0);
      v67[2] = (uint64_t)v87;
      if (!v43) {
        sub_180941A00((uint64_t)v93, (uint64_t)L"Titlecase_Letter", 0xFFFFFFFFLL);
      }
    }

    else
    {
      sub_180941A00((uint64_t)v93, (uint64_t)"u", 0xFFFFFFFFLL);
      a3 = !a3;
    }

    icu::UnicodeString::doReplace((uint64_t)v93, 0LL, 0LL, (uint64_t)&unk_180A49416, 0, 0xFFFFFFFFLL);
    v67[1] = (uint64_t)&unk_180A49416;
    icu::UnicodeString::doAppend((uint64_t)v93, (uint64_t)L"}]", 0, 0xFFFFFFFFLL);
    v67[0] = (uint64_t)L"}]";
    unsigned int v49 = (icu::UnicodeSet *)icu::UMemory::operator new(v67, (icu::UMemory *)0xC8, v48);
    unsigned int v50 = v49;
    if (v49) {
      icu::UnicodeSet::UnicodeSet(v49, (const icu::UnicodeString *)v93, *((UErrorCode **)this + 1));
    }
    sub_180969828(&v90, v50, &pErrorCode);
    goto LABEL_84;
  }

void sub_180969828(icu::UnicodeSet **a1, icu::UnicodeSet *this, _DWORD *a3)
{
  unint64_t v4 = *a3;
  if ((int)v4 <= 0)
  {
    int v8 = *a1;
    if (v8)
    {
      unsigned int v9 = icu::UnicodeSet::~UnicodeSet((void *)v4, v8);
      icu::UMemory::operator delete(v9);
    }

    *a1 = this;
    if (!this) {
      *a3 = 7;
    }
  }

  else if (this)
  {
    UChar32 v5 = icu::UnicodeSet::~UnicodeSet((void *)v4, this);
    icu::UMemory::operator delete(v5);
  }

uint64_t sub_18096989C(uint64_t a1, uint64_t *a2, int32_t a3, __int16 a4)
{
  else {
    int v5 = *(unsigned __int16 *)(a1 + 8) >> 5;
  }
  return icu::UnicodeString::doCaseCompare(a1, 0, v5, *a2, 0, a3, a4);
}

void *sub_1809698CC(icu::UnicodeSet *a1, UErrorCode *a2)
{
  unint64_t v4 = icu::UnicodeSet::add(a1, 0, 8u);
  int v5 = icu::UnicodeSet::add(v4, 0xEu, 0x1Bu);
  icu::UnicodeSet::add(v5, 0x7Fu, 0x9Fu);
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v9);
  uint64_t v6 = icu::UnicodeSet::applyIntPropertyValue((icu::UnicodeSet *)v9, 0x2000LL, 0x10000u, a2);
  icu::UnicodeSet::addAll((icu::UVector **)a1, v6);
  return icu::UnicodeSet::~UnicodeSet(v7, (icu::UnicodeSet *)v9);
}

uint64_t sub_180969948(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = 0LL;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_180969954(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    int v4 = *(_DWORD *)(a1 + 20);
  }

  else
  {
    unsigned int v9 = *(UText **)a1;
    uint64_t v10 = *(int *)(*(void *)a1 + 40LL);
    if ((int)v10 >= *(_DWORD *)(*(void *)a1 + 44LL) || (unsigned int v11 = v9->chunkContents[v10], v11 >> 11 > 0x1A))
    {
      uint64_t result = utext_next32(v9);
      unsigned int v11 = result;
      if ((_DWORD)result == -1) {
        return result;
      }
    }

    else
    {
      v9->chunkint Offset = v10 + 1;
    }

    uint64_t result = ucase_toFullFolding(v11, v3, 0);
    *(_DWORD *)(a1 + 16) = result;
    if (result >= 0x1F)
    {
      if ((result & 0x80000000) != 0)
      {
        uint64_t result = ~(_DWORD)result;
        *(_DWORD *)(a1 + 16) = result;
      }

      goto LABEL_16;
    }

    int v4 = 0;
    uint64_t v2 = *v3;
  }

  uint64_t v5 = v4 + 1LL;
  *(_DWORD *)(a1 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v5;
  uint64_t result = *(unsigned __int16 *)(v2 + 2LL * v4);
  int v7 = *(_DWORD *)(a1 + 16);
  if ((result & 0xFC00) != 0xD800) {
    goto LABEL_7;
  }
  if ((_DWORD)v5 != v7)
  {
    int v8 = *(unsigned __int16 *)(v2 + 2 * v5);
    if ((v8 & 0xFC00) == 0xDC00)
    {
      LODWORD(v5) = v4 + 2;
      *(_DWORD *)(a1 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v4 + 2;
      uint64_t result = (v8 + ((_DWORD)result << 10) - 56613888);
    }

uint64_t sub_180969A60(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = a3;
  *(void *)(result + 16) = a4;
  *(void *)(result + 24) = 0LL;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_180969A70(uint64_t *a1)
{
  uint64_t v3 = a1 + 3;
  uint64_t v2 = a1[3];
  if (v2)
  {
    int v4 = *((_DWORD *)a1 + 9);
  }

  else
  {
    uint64_t v9 = a1[1];
    uint64_t v10 = a1[2];
    if (v9 >= v10) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v11 = *a1;
    uint64_t v12 = v9 + 1;
    a1[1] = v9 + 1;
    unsigned int v13 = *(unsigned __int16 *)(v11 + 2 * v9);
    if ((v13 & 0xFC00) == 0xD800 && v12 != v10)
    {
      int v15 = *(unsigned __int16 *)(v11 + 2 * v12);
      if ((v15 & 0xFC00) == 0xDC00)
      {
        a1[1] = v9 + 2;
        unsigned int v13 = v15 + (v13 << 10) - 56613888;
      }
    }

    uint64_t result = ucase_toFullFolding(v13, v3, 0);
    *((_DWORD *)a1 + 8) = result;
    if (result >= 0x1F)
    {
      if ((result & 0x80000000) != 0)
      {
        uint64_t result = ~(_DWORD)result;
        *((_DWORD *)a1 + 8) = result;
      }

      goto LABEL_8;
    }

    int v4 = 0;
    uint64_t v2 = *v3;
  }

  uint64_t v5 = v4 + 1LL;
  *((_DWORD *)a1 + 9) = v5;
  uint64_t result = *(unsigned __int16 *)(v2 + 2LL * v4);
  int v7 = *((_DWORD *)a1 + 8);
  if ((result & 0xFC00) == 0xD800)
  {
    if ((_DWORD)v5 == v7)
    {
LABEL_8:
      uint64_t *v3 = 0LL;
      return result;
    }

    int v8 = *(unsigned __int16 *)(v2 + 2 * v5);
    if ((v8 & 0xFC00) == 0xDC00)
    {
      LODWORD(v5) = v4 + 2;
      *((_DWORD *)a1 + 9) = v4 + 2;
      uint64_t result = (v8 + ((_DWORD)result << 10) - 56613888);
    }
  }

  return result;
}

BOOL sub_180969B98(uint64_t a1)
{
  return *(void *)(a1 + 24) != 0LL;
}

uint64_t sub_180969BA8(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_180969BB0(uint64_t a1, UErrorCode *a2)
{
  uint64_t v56 = *MEMORY[0x1895F89C0];
  int v4 = (_OWORD *)(a1 + 2608);
  for (uint64_t i = 8LL; i != 2608; i += 200LL)
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + i));
  _BYTE v4[24] = 0u;
  v4[25] = 0u;
  v4[22] = 0u;
  v4[23] = 0u;
  v4[20] = 0u;
  v4[21] = 0u;
  v4[18] = 0u;
  v4[19] = 0u;
  v4[16] = 0u;
  v4[17] = 0u;
  v4[14] = 0u;
  v4[15] = 0u;
  v4[12] = 0u;
  v4[13] = 0u;
  void v4[10] = 0u;
  v4[11] = 0u;
  _BYTE v4[8] = 0u;
  void v4[9] = 0u;
  v4[6] = 0u;
  v4[7] = 0u;
  v4[4] = 0u;
  v4[5] = 0u;
  v4[2] = 0u;
  v4[3] = 0u;
  *int v4 = 0u;
  v4[1] = 0u;
  for (uint64_t j = 3024LL; j != 3624; j += 200LL)
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + j));
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 3624));
  *(_OWORD *)(a1 + 3824) = 0u;
  unsigned int v54 = L"acefnrtuUx";
  icu::UnicodeString::UnicodeString(v55, 1LL, &v54);
  int v7 = icu::UnicodeSet::addAll((icu::UnicodeSet *)(a1 + 3624), (const icu::UnicodeString *)v55);
  icu::UnicodeSet::freeze(v7);
  uint64_t v9 = icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v55);
  unsigned int v53 = "[";
  icu::UnicodeString::UnicodeString(v9, 1LL, &v53);
  uint64_t v10 = icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 208), (const icu::UnicodeString *)v55, a2);
  icu::UnicodeSet::freeze(v10);
  uint64_t v12 = icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v55);
  unsigned int v52 = "[";
  icu::UnicodeString::UnicodeString(v12, 1LL, &v52);
  unsigned int v13 = icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 808), (const icu::UnicodeString *)v55, a2);
  icu::UnicodeSet::freeze(v13);
  int v15 = icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v55);
  int v51 = L"[\\p{Grapheme_Extend}]";
  icu::UnicodeString::UnicodeString(v15, 1LL, &v51);
  unsigned int v16 = icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 1208), (const icu::UnicodeString *)v55, a2);
  icu::UnicodeSet::freeze(v16);
  int v18 = icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v55);
  unsigned int v50 = L"[[:Zl:][:Zp:][:Cc:][:Cf:]-[:Grapheme_Extend:]]";
  icu::UnicodeString::UnicodeString(v18, 1LL, &v50);
  int v19 = icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 1408), (const icu::UnicodeString *)v55, a2);
  icu::UnicodeSet::freeze(v19);
  unsigned int v21 = icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v55);
  unsigned int v49 = "[";
  icu::UnicodeString::UnicodeString(v21, 1LL, &v49);
  int v22 = icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 1608), (const icu::UnicodeString *)v55, a2);
  icu::UnicodeSet::freeze(v22);
  int32_t v24 = icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)v55);
  unint64_t v48 = L"[\\p{Hangul_Syllable_Type=V}]";
  icu::UnicodeString::UnicodeString(v24, 1LL, &v48);
  unint64_t v25 = icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 2208), (const icu::UnicodeString *)v55, a2);
  icu::UnicodeSet::freeze(v25);
  unint64_t v27 = icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v55);
  int v47 = "[";
  icu::UnicodeString::UnicodeString(v27, 1LL, &v47);
  unint64_t v28 = icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 2408), (const icu::UnicodeString *)v55, a2);
  icu::UnicodeSet::freeze(v28);
  uint64_t v30 = icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v55);
  int v46 = L"[\\p{Hangul_Syllable_Type=LV}]";
  icu::UnicodeString::UnicodeString(v30, 1LL, &v46);
  uint64_t v31 = icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 1808), (const icu::UnicodeString *)v55, a2);
  icu::UnicodeSet::freeze(v31);
  uint64_t v33 = icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)v55);
  unint64_t v45 = L"[\\p{Hangul_Syllable_Type=LVT}]";
  icu::UnicodeString::UnicodeString(v33, 1LL, &v45);
  int v34 = icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 2008), (const icu::UnicodeString *)v55, a2);
  icu::UnicodeSet::freeze(v34);
  icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)v55);
  icu::UnicodeSet::complement((icu::UnicodeSet *)(a1 + 1008));
  icu::UnicodeSet::remove((icu::UnicodeSet *)(a1 + 1008), 0xAC00u, 0xD7A4u);
  icu::UnicodeSet::removeAll((icu::UVector **)(a1 + 1008), (const icu::UnicodeSet *)(a1 + 1408));
  icu::UnicodeSet::removeAll((icu::UVector **)(a1 + 1008), (const icu::UnicodeSet *)(a1 + 1608));
  icu::UnicodeSet::removeAll((icu::UVector **)(a1 + 1008), (const icu::UnicodeSet *)(a1 + 2208));
  icu::UnicodeSet::removeAll((icu::UVector **)(a1 + 1008), (const icu::UnicodeSet *)(a1 + 2408));
  icu::UnicodeSet::freeze((icu::UnicodeSet *)(a1 + 1008));
  for (uint64_t k = 0LL; k != 13; ++k)
  {
    for (unsigned int m = 0; m != 256; ++m)
    {
    }
  }

  icu::UnicodeString::UnicodeString((uint64_t)v55, (uint64_t)"*");
  unsigned int v38 = icu::UnicodeSet::addAll((icu::UnicodeSet *)(a1 + 3424), (const icu::UnicodeString *)v55);
  int v39 = icu::UnicodeSet::complement(v38);
  icu::UnicodeSet::freeze(v39);
  icu::UnicodeString::~UnicodeString(v40, (icu::UnicodeString *)v55);
  int32_t v41 = icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 3024), 0x30u, 0x39u);
  icu::UnicodeSet::freeze(v41);
  int v42 = icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 3224), 0x41u, 0x5Au);
  int v43 = icu::UnicodeSet::add(v42, 0x61u, 0x7Au);
  icu::UnicodeSet::freeze(v43);
  *(void *)(a1 + 3824) = a1 + 3024;
  *(void *)(a1 + 3832) = utext_openUChars(0LL, 0LL, 0LL, a2);
  return a1;
}

uint64_t sub_18096A0B0(uint64_t a1)
{
  *(void *)(a1 + 3824) = 0LL;
  utext_close(*(UText **)(a1 + 3832));
  icu::UnicodeSet::~UnicodeSet(v2, (icu::UnicodeSet *)(a1 + 3624));
  for (uint64_t i = 3424LL; i != 2824; i -= 200LL)
    icu::UnicodeSet::~UnicodeSet(v3, (icu::UnicodeSet *)(a1 + i));
  for (uint64_t j = 2408LL; j != -192; j -= 200LL)
    icu::UnicodeSet::~UnicodeSet(v3, (icu::UnicodeSet *)(a1 + j));
  return a1;
}

void sub_18096A114(UErrorCode *a1)
{
  if (*(int *)a1 <= 0)
  {
    unsigned int v2 = atomic_load(&dword_18C449BC8);
    if (v2 != 2 && icu::umtx_initImplPreInit(&dword_18C449BC8))
    {
      sub_1809B36C0(6u, (uint64_t)sub_18096A208);
      uint64_t v5 = icu::UMemory::operator new(v4, (icu::UMemory *)0xF00, v3);
      if (v5)
      {
        uint64_t v6 = sub_180969BB0((uint64_t)v5, a1);
        qword_18C449BC0 = v6;
        UErrorCode v7 = *a1;
        int v8 = (void *)sub_18096A0B0(v6);
        icu::UMemory::operator delete(v8);
        UErrorCode v7 = *a1;
        qword_18C449BC0 = 0LL;
        if (v7 > U_ZERO_ERROR) {
          goto LABEL_8;
        }
      }

      else
      {
        qword_18C449BC0 = 0LL;
        UErrorCode v7 = *a1;
      }

      UErrorCode v7 = U_MEMORY_ALLOCATION_ERROR;
      *a1 = U_MEMORY_ALLOCATION_ERROR;
LABEL_8:
      dword_18C449BCC = v7;
      icu::umtx_initImplPostInit(&dword_18C449BC8);
      return;
    }

    if (dword_18C449BCC >= 1) {
      *a1 = dword_18C449BCC;
    }
  }

uint64_t sub_18096A208()
{
  if (qword_18C449BC0)
  {
    unsigned int v0 = (void *)sub_18096A0B0(qword_18C449BC0);
    icu::UMemory::operator delete(v0);
  }

  qword_18C449BC0 = 0LL;
  atomic_store(0, &dword_18C449BC8);
  return 1LL;
}

uint64_t sub_18096A248(int a1, _DWORD *a2)
{
  int v3 = a2[2];
  int v4 = v3 + 1;
  if (v3 + 1 == a1)
  {
    uint64_t v5 = *(UText **)a2;
    uint64_t v6 = *(int *)(*(void *)a2 + 40LL);
    if ((int)v6 >= *(_DWORD *)(*(void *)a2 + 44LL) || (unsigned int v7 = v5->chunkContents[v6], v7 >> 11 > 0x1A))
    {
      unsigned int v7 = utext_next32(v5);
      int v4 = a2[2] + 1;
    }

    else
    {
      v5->chunkint Offset = v6 + 1;
    }

    a2[2] = v4;
  }

  else
  {
    uint64_t v9 = *(UText **)a2;
    if (v3 == a1)
    {
      chunkint Offset = v9->chunkOffset;
      BOOL v11 = __OFSUB__(chunkOffset, 1);
      int v12 = chunkOffset - 1;
      if (v12 < 0 != v11 || (unsigned int v7 = v9->chunkContents[v12], v7 >> 11 > 0x1A))
      {
        unsigned int v7 = utext_previous32(v9);
        uint64_t v9 = *(UText **)a2;
        int v12 = *(_DWORD *)(*(void *)a2 + 40LL);
      }

      else
      {
        v9->chunkint Offset = v12;
      }

      if (v12 >= v9->chunkLength || v9->chunkContents[v12] >> 11 > 0x1Au) {
        utext_next32(v9);
      }
      else {
        v9->chunkint Offset = v12 + 1;
      }
    }

    else
    {
      utext_moveIndex32(v9, ~v3 + a1);
      unsigned int v13 = *(UText **)a2;
      uint64_t v14 = *(int *)(*(void *)a2 + 40LL);
      else {
        v13->chunkint Offset = v14 + 1;
      }
      a2[2] = a1;
    }
  }

  if (v7 >= 0x10000) {
    return 0;
  }
  else {
    return (unsigned __int16)v7;
  }
}

uint64_t sub_18096A3A0(int a1, uint64_t a2)
{
  return *(unsigned __int16 *)(a2 + 2LL * a1);
}

void *sub_18096A3A8()
{
  return &unk_18C5357C0;
}

void icu::Region::loadRegionData(icu::Region *this, UErrorCode *a2)
{
  uint64_t v234 = *MEMORY[0x1895F89C0];
  int v3 = (uint64_t *)uhash_open((uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0LL, (int *)this);
  int v4 = uhash_open((uint64_t)uhash_hashLong, (uint64_t)uhash_compareLong, 0LL, (int *)this);
  uint64_t v5 = uhash_open((uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0LL, (int *)this);
  int v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0x28, v6);
  uint64_t v10 = (icu::UVector *)v8;
  if (v8)
  {
    icu::UVector::UVector((uint64_t)v8, (uint64_t)uprv_deleteUObject, (uint64_t)uhash_compareUnicodeString, (int *)this);
  }

  else
  {
    uint64_t v11 = *(unsigned int *)this;
    if ((int)v11 <= 0)
    {
      uint64_t v11 = 7LL;
      *(_DWORD *)this = 7;
    }
  }

  int v12 = icu::UMemory::operator new((uint64_t *)v11, (icu::UMemory *)0x28, v9);
  uint64_t v14 = (icu::UVector *)v12;
  if (v12)
  {
    icu::UVector::UVector((uint64_t)v12, (uint64_t)uprv_deleteUObject, (uint64_t)uhash_compareUnicodeString, (int *)this);
  }

  else
  {
    uint64_t v15 = *(unsigned int *)this;
    if ((int)v15 <= 0)
    {
      uint64_t v15 = 7LL;
      *(_DWORD *)this = 7;
    }
  }

  unsigned int v16 = icu::UMemory::operator new((uint64_t *)v15, (icu::UMemory *)0x28, v13);
  if (v16)
  {
    unsigned int v16 = (uint64_t *)icu::UVector::UVector( (uint64_t)v16,  (uint64_t)uprv_deleteUObject,  (uint64_t)uhash_compareUnicodeString,  (int *)this);
  }

  else if (*(int *)this <= 0)
  {
    *(_DWORD *)this = 7;
  }

  qword_18C5357C8 = (uint64_t)v16;
  uint64_t v17 = ures_openDirect(0LL, (uint64_t)"metadata", (uint64_t)this);
  uint64_t v209 = ures_getByKey(v17, "alias", 0LL, (int *)this);
  uint64_t v214 = ures_getByKey(v209, "territory", 0LL, (int *)this);
  uint64_t v18 = ures_openDirect(0LL, (uint64_t)"supplementalData", (uint64_t)this);
  uint64_t v213 = ures_getByKey(v18, "codeMappings", 0LL, (int *)this);
  uint64_t v211 = ures_getByKey(v18, "idValidity", 0LL, (int *)this);
  uint64_t v19 = ures_getByKey(v211, "region", 0LL, (int *)this);
  uint64_t v220 = ures_getByKey(v19, "regular", 0LL, (int *)this);
  uint64_t v218 = ures_getByKey(v19, "macroregion", 0LL, (int *)this);
  uint64_t v210 = v19;
  uint64_t v217 = ures_getByKey(v19, "unknown", 0LL, (int *)this);
  uint64_t v212 = v18;
  uint64_t v20 = ures_getByKey(v18, "territoryContainment", 0LL, (int *)this);
  uint64_t v219 = ures_getByKey(v20, "001", 0LL, (int *)this);
  uint64_t v216 = v20;
  uint64_t v215 = ures_getByKey(v20, "grouping", 0LL, (int *)this);
  sub_1809B36C0(0x21u, (uint64_t)sub_18096BF6C);
  uhash_setValueDeleter((uint64_t)v3, (uint64_t)uprv_deleteUObject);
  uhash_setKeyDeleter((uint64_t)v5, (uint64_t)uprv_deleteUObject);
  uint64_t v207 = (uint64_t)v3;
  uint64_t v208 = v17;
  uint64_t v204 = (uint64_t)v5;
  v205 = v14;
  v203 = v10;
  uint64_t v206 = (uint64_t)v4;
  uint64_t v23 = v220;
  while (ures_hasNext(v23))
  {
    memset((char *)v233 + 8, 0, 56);
    *(void *)&v233[0] = off_18971B688;
    WORD4(v233[0]) = 2;
    LODWORD(v231[0]) = 0;
    NextString = ures_getNextString(v23, (int *)v231, 0LL, (int *)this);
    if (*(int *)this <= 0)
    {
      *(void *)&v232[0] = NextString;
      icu::UnicodeString::setTo((icu::UnicodeString *)v233, 1, (const UChar **)v232, v231[0]);
    }

    else
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)v233);
    }

    if ((SWORD4(v233[0]) & 0x8000u) == 0) {
      int32_t v26 = WORD4(v233[0]) >> 5;
    }
    else {
      int32_t v26 = HIDWORD(v233[0]);
    }
    int v27 = icu::UnicodeString::doIndexOf((uint64_t)v233, 0x7Eu, 0, v26);
    DWORD2(v232[0]) = 0;
    *(void *)&v232[0] = 0LL;
    v222 = (UChar *)v232;
    icu::UnicodeString::extract((uint64_t)v233, &v222, 6, (int *)this);
    uint64_t v29 = (v27 - 1);
    if (v27 < 1)
    {
      int v34 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)v222, (icu::UMemory *)0x40, v28);
      int v35 = v34;
      if (v34)
      {
        icu::UnicodeString::UnicodeString(v34, (UChar **)v233);
      }

      else if (*(int *)this <= 0)
      {
        *(_DWORD *)this = 7;
      }

      icu::UVector::adoptElement((icu::UVector *)qword_18C5357C8, v35, (UErrorCode *)this);
    }

    else
    {
      unsigned int v30 = v27 + 1;
      if ((SWORD4(v233[0]) & 0x8000u) == 0) {
        unsigned int v31 = WORD4(v233[0]) >> 5;
      }
      else {
        unsigned int v31 = HIDWORD(v233[0]);
      }
      if (v31 <= v30)
      {
        unsigned int v33 = 0xFFFF;
      }

      else
      {
        int v32 = (char *)v233 + 10;
        if ((BYTE8(v233[0]) & 2) == 0) {
          int v32 = (char *)*((void *)&v233[1] + 1);
        }
        unsigned int v33 = *(unsigned __int16 *)&v32[2 * v30];
      }

      *((_WORD *)v232 + v27) = 0;
      int v36 = (uint64_t *)*(unsigned int *)this;
      if ((int)v36 <= 0)
      {
        int v36 = (uint64_t *)*((unsigned __int16 *)v232 + v29);
        do
        {
          unsigned int v37 = icu::UMemory::operator new(v36, (icu::UMemory *)0x40, v28);
          unsigned int v38 = v37;
          if (v37)
          {
            icu::UnicodeString::UnicodeString((uint64_t)v37, (uint64_t)v232);
          }

          else if (*(int *)this <= 0)
          {
            *(_DWORD *)this = 7;
          }

          icu::UVector::adoptElement((icu::UVector *)qword_18C5357C8, v38, (UErrorCode *)this);
          int v36 = (uint64_t *)((unsigned __int16)(*((_WORD *)v232 + v29))++ + 1);
        }

        while (*(int *)this <= 0);
      }
    }

    icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)v233);
    uint64_t v23 = v220;
  }

  if (*(int *)this > 0)
  {
LABEL_88:
    int v4 = (int32x2_t *)v206;
LABEL_89:
    uint64_t v17 = v208;
LABEL_90:
    uint64_t v21 = v209;
    uint64_t v22 = v214;
    goto LABEL_16;
  }

  while (ures_hasNext(v218))
  {
    memset((char *)v233 + 8, 0, 56);
    *(void *)&v233[0] = off_18971B688;
    WORD4(v233[0]) = 2;
    LODWORD(v231[0]) = 0;
    int v39 = ures_getNextString(v218, (int *)v231, 0LL, (int *)this);
    if (*(int *)this <= 0)
    {
      *(void *)&v232[0] = v39;
      icu::UnicodeString::setTo((icu::UnicodeString *)v233, 1, (const UChar **)v232, v231[0]);
    }

    else
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)v233);
    }

    if ((SWORD4(v233[0]) & 0x8000u) == 0) {
      int32_t v40 = WORD4(v233[0]) >> 5;
    }
    else {
      int32_t v40 = HIDWORD(v233[0]);
    }
    int v41 = icu::UnicodeString::doIndexOf((uint64_t)v233, 0x7Eu, 0, v40);
    DWORD2(v232[0]) = 0;
    *(void *)&v232[0] = 0LL;
    v221 = (UChar *)v232;
    icu::UnicodeString::extract((uint64_t)v233, &v221, 6, (int *)this);
    uint64_t v43 = (v41 - 1);
    if (v41 < 1)
    {
      unint64_t v48 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)v221, (icu::UMemory *)0x40, v42);
      unsigned int v49 = v48;
      if (v48)
      {
        icu::UnicodeString::UnicodeString(v48, (UChar **)v233);
      }

      else if (*(int *)this <= 0)
      {
        *(_DWORD *)this = 7;
      }

      icu::UVector::adoptElement((icu::UVector *)qword_18C5357C8, v49, (UErrorCode *)this);
    }

    else
    {
      unsigned int v44 = v41 + 1;
      if ((SWORD4(v233[0]) & 0x8000u) == 0) {
        unsigned int v45 = WORD4(v233[0]) >> 5;
      }
      else {
        unsigned int v45 = HIDWORD(v233[0]);
      }
      if (v45 <= v44)
      {
        unsigned int v47 = 0xFFFF;
      }

      else
      {
        int v46 = (char *)v233 + 10;
        if ((BYTE8(v233[0]) & 2) == 0) {
          int v46 = (char *)*((void *)&v233[1] + 1);
        }
        unsigned int v47 = *(unsigned __int16 *)&v46[2 * v44];
      }

      *((_WORD *)v232 + v4icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0;
      for (uint64_t i = (uint64_t *)*((unsigned __int16 *)v232 + v43);
            v47 >= (unsigned __int16)i && *(_DWORD *)this <= 0;
            uint64_t i = (uint64_t *)((unsigned __int16)(*((_WORD *)v232 + v43))++ + 1))
      {
        unsigned int v52 = icu::UMemory::operator new(i, (icu::UMemory *)0x40, v42);
        unsigned int v53 = v52;
        if (v52)
        {
          icu::UnicodeString::UnicodeString((uint64_t)v52, (uint64_t)v232);
        }

        else if (*(int *)this <= 0)
        {
          *(_DWORD *)this = 7;
        }

        icu::UVector::adoptElement((icu::UVector *)qword_18C5357C8, v53, (UErrorCode *)this);
      }
    }

    icu::UnicodeString::~UnicodeString(i, (icu::UnicodeString *)v233);
    uint64_t v17 = v208;
    uint64_t v23 = v220;
  }

  if (*(int *)this > 0)
  {
LABEL_129:
    int v4 = (int32x2_t *)v206;
    goto LABEL_90;
  }

  while (ures_hasNext(v217))
  {
    unsigned int v57 = (icu::UnicodeString *)icu::UMemory::operator new(v56, (icu::UMemory *)0x40, v55);
    if (v57)
    {
      memset((char *)v233 + 8, 0, 56);
      *(void *)&v233[0] = off_18971B688;
      WORD4(v233[0]) = 2;
      LODWORD(v231[0]) = 0;
      UErrorCode v58 = ures_getNextString(v217, (int *)v231, 0LL, (int *)this);
      if (*(int *)this <= 0)
      {
        *(void *)&v232[0] = v58;
        icu::UnicodeString::setTo((icu::UnicodeString *)v233, 1, (const UChar **)v232, v231[0]);
      }

      else
      {
        icu::UnicodeString::setToBogus((icu::UnicodeString *)v233);
      }

      icu::UnicodeString::UnicodeString(v57, (const icu::UnicodeString *)v233, *(_DWORD *)this);
      icu::UnicodeString::~UnicodeString(v59, (icu::UnicodeString *)v233);
    }

    icu::UVector::adoptElement((icu::UVector *)qword_18C5357C8, v57, (UErrorCode *)this);
    if (*(int *)this > 0)
    {
      int v4 = (int32x2_t *)v206;
      goto LABEL_138;
    }
  }

  uint64_t v23 = v220;
  if (*(int *)this > 0)
  {
    int v4 = (int32x2_t *)v206;
    goto LABEL_89;
  }

  uint64_t v17 = v208;
  uint64_t v24 = v219;
  while (ures_hasNext(v24))
  {
    __int128 v62 = icu::UMemory::operator new(v61, (icu::UMemory *)0x40, v60);
    __int128 v63 = (icu::UnicodeString *)v62;
    if (v62)
    {
      *(_OWORD *)(v62 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0u;
      v62[7] = 0LL;
      *(_OWORD *)(v62 + 5) = 0u;
      *(_OWORD *)(v62 + 3) = 0u;
      *__int128 v62 = (uint64_t)off_18971B688;
      *((_WORD *)v62 + 4) = 2;
      LODWORD(v232[0]) = 0;
      __int128 v64 = ures_getNextString(v219, (int *)v232, 0LL, (int *)this);
      if (*(int *)this <= 0)
      {
        *(void *)&v233[0] = v64;
        icu::UnicodeString::setTo(v63, 1, (const UChar **)v233, v232[0]);
      }

      else
      {
        icu::UnicodeString::setToBogus(v63);
      }
    }

    icu::UVector::adoptElement(v10, v63, (UErrorCode *)this);
    uint64_t v24 = v219;
    if (*(int *)this > 0)
    {
      int v4 = (int32x2_t *)v206;
      uint64_t v21 = v209;
      uint64_t v22 = v214;
      uint64_t v23 = v220;
      goto LABEL_17;
    }
  }

  if (*(int *)this > 0)
  {
    int v4 = (int32x2_t *)v206;
    goto LABEL_15;
  }

  signed int v65 = 0;
  do
  {
    __int128 v67 = icu::UMemory::operator new(v66, (icu::UMemory *)0x70, v60);
    if (!v67)
    {
      goto LABEL_372;
    }

    *__int128 v67 = (uint64_t)off_18972A1E0;
    v67[2] = (uint64_t)off_18971B688;
    int v68 = (UChar **)(v67 + 2);
    *((_WORD *)v67 + 12) = 2;
    *(uint64_t *)((char *)v67 + 84) = 0LL;
    uint64_t v69 = (_DWORD *)v67 + 21;
    *((_BYTE *)v67 + 8) = 0;
    int v70 = (char *)(v67 + 1);
    *((_DWORD *)v67 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = -1;
    *(uint64_t *)((char *)v67 + 10icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
    *(uint64_t *)((char *)v67 + 92) = 0LL;
    *((_DWORD *)v67 + 27) = 0;
    uint64_t v71 = (uint64_t)v67;
    unsigned int v72 = (UChar **)icu::UVector::elementAt((icu::UVector *)qword_18C5357C8, v65);
    icu::UnicodeString::operator=(v68, v72);
    unsigned int v73 = *(unsigned __int16 *)(v71 + 24);
    if ((v73 & 0x8000) != 0) {
      uint64_t v74 = *(unsigned int *)(v71 + 28);
    }
    else {
      uint64_t v74 = v73 >> 5;
    }
    icu::UnicodeString::extract((uint64_t)v68, 0, v74, v70, 4);
    *uint64_t v69 = 1;
    LODWORD(v233[0]) = 0;
    unsigned int v76 = icu::ICU_Utility::parseAsciiInteger((icu::ICU_Utility *)v68, (const icu::UnicodeString *)v233, v75);
    if (SLODWORD(v233[0]) < 1)
    {
      uint64_t v77 = v71;
      *(_DWORD *)(v71 + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = -1;
    }

    else
    {
      *(_DWORD *)(v71 + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v76;
      uhash_iput(v206, v76, v71, (int *)this);
      uint64_t v77 = v71;
      *(_DWORD *)(v71 + 84) = 4;
    }

    int v3 = (uint64_t *)v207;
    uhash_put(v207, (uint64_t)v68, v77, (int *)this);
    __int128 v66 = (uint64_t *)*(unsigned int *)(qword_18C5357C8 + 8);
    ++v65;
  }

  while (v65 < (int)v66);
  if (*(int *)this <= 0)
  {
LABEL_164:
    NextResource = 0LL;
    do
    {
      if (!ures_hasNext(v215)) {
        break;
      }
      NextResource = ures_getNextResource(v215, (uint64_t)NextResource, (int *)this);
      uint64_t v80 = (uint64_t *)*(unsigned int *)this;
      int v81 = icu::UMemory::operator new(v80, (icu::UMemory *)0x40, v79);
      if (v81)
      {
        uint64_t Key = ures_getKey((uint64_t)NextResource);
        icu::UnicodeString::UnicodeString(v81, Key, 0xFFFFFFFFLL, 0LL);
      }

      else if (*(int *)this <= 0)
      {
        *(_DWORD *)this = 7;
      }

      icu::UVector::adoptElement(v205, v81, (UErrorCode *)this);
      uint64_t v83 = uhash_get((uint64_t)v3, (uint64_t)v81);
      if (!v83) {
        goto LABEL_195;
      }
      uint64_t v84 = v83;
      int Size = ures_getSize((uint64_t)NextResource);
      int v86 = *(_DWORD *)this;
      if (Size >= 1 && v86 <= 0)
      {
        int v87 = 1;
        while (1)
        {
          memset((char *)v233 + 8, 0, 56);
          *(void *)&v233[0] = off_18971B688;
          WORD4(v233[0]) = 2;
          LODWORD(v231[0]) = 0;
          StringByIndex = ures_getStringByIndex((uint64_t)NextResource, v87 - 1, (int *)v231, (int *)this);
          if (*(int *)this <= 0)
          {
            *(void *)&v232[0] = StringByIndex;
            icu::UnicodeString::setTo((icu::UnicodeString *)v233, 1, (const UChar **)v232, v231[0]);
          }

          else
          {
            icu::UnicodeString::setToBogus((icu::UnicodeString *)v233);
          }

          int v90 = (void *)*(unsigned int *)this;
          if ((int)v90 <= 0)
          {
            uint64_t v91 = *(void *)(v84 + 96);
            if (!v91)
            {
              int v92 = icu::UMemory::operator new(0LL, (icu::UMemory *)0x28, v89);
              if (!v92)
              {
                uint64_t v91 = *(unsigned int *)this;
                if ((int)v91 <= 0)
                {
                  uint64_t v91 = 7LL;
                  *(_DWORD *)this = 7;
                }

                *(void *)(v84 + 96) = 0LL;
                int v3 = (uint64_t *)v207;
                uint64_t v5 = (int32x2_t *)v204;
LABEL_194:
                icu::UnicodeString::~UnicodeString((void *)v91, (icu::UnicodeString *)v233);
LABEL_195:
                int v86 = *(_DWORD *)this;
                break;
              }

              uint64_t v93 = icu::UVector::UVector( (uint64_t)v92,  (uint64_t)uprv_deleteUObject,  (uint64_t)uhash_compareUnicodeString,  (int *)this);
              uint64_t v91 = *(unsigned int *)this;
              *(void *)(v84 + 96) = v93;
            }

            int v94 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)v91, (icu::UMemory *)0x40, v89);
            __int128 v95 = v94;
            if (v94)
            {
              icu::UnicodeString::UnicodeString(v94, (UChar **)v233);
            }

            else if (*(int *)this <= 0)
            {
              *(_DWORD *)this = 7;
            }

            icu::UVector::adoptElement(*(icu::UVector **)(v84 + 96), v95, (UErrorCode *)this);
          }

          icu::UnicodeString::~UnicodeString(v90, (icu::UnicodeString *)v233);
          int v96 = ures_getSize((uint64_t)NextResource);
          int v86 = *(_DWORD *)this;
          if (v87 < v96)
          {
            ++v87;
            if (v86 <= 0) {
              continue;
            }
          }

          break;
        }
      }
    }

    while (v86 < 1);
  }

  else
  {
    NextResource = 0LL;
  }

  ures_close((uint64_t)NextResource);
  while (ures_hasNext(v214))
  {
    int v133 = ures_getNextResource(v214, 0LL, (int *)this);
    uint64_t v134 = ures_getKey((uint64_t)v133);
    int v137 = icu::UMemory::operator new(v136, (icu::UMemory *)0x40, v135);
    uint64_t v71 = (uint64_t)v137;
    if (v137)
    {
      icu::UnicodeString::UnicodeString(v137, v134, 0xFFFFFFFFLL, 0LL);
    }

    else if (*(int *)this <= 0)
    {
      *(_DWORD *)this = 7;
    }

    memset((char *)v233 + 8, 0, 56);
    *(void *)&v233[0] = off_18971B688;
    WORD4(v233[0]) = 2;
    LODWORD(v231[0]) = 0;
    StringByuint64_t Key = ures_getStringByKey((uint64_t)v133, "replacement", (int *)v231, (int *)this);
    if (*(int *)this <= 0)
    {
      *(void *)&v232[0] = StringByKey;
      icu::UnicodeString::setTo((icu::UnicodeString *)v233, 1, (const UChar **)v232, v231[0]);
    }

    else
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)v233);
    }

    if (v133) {
      ures_close((uint64_t)v133);
    }
    uint64_t v139 = uhash_get((uint64_t)v3, (uint64_t)v233);
    uint64_t v140 = uhash_get((uint64_t)v3, v71);
    uint64_t v143 = v140;
    if (!v139 || v140)
    {
      if (v140)
      {
        *(_DWORD *)(v140 + 84) = 6;
        goto LABEL_286;
      }

      signed int v145 = icu::UMemory::operator new(v142, (icu::UMemory *)0x70, v141);
      if (v145)
      {
        *signed int v145 = (uint64_t)off_18972A1E0;
        v145[2] = (uint64_t)off_18971B688;
        uint64_t v146 = (icu::ICU_Utility *)(v145 + 2);
        *((_WORD *)v145 + 12) = 2;
        uint64_t v147 = (uint64_t)v145;
        *(uint64_t *)((char *)v145 + 84) = 0LL;
        unsigned int v148 = (_DWORD *)v145 + 21;
        *((_BYTE *)v145 + 8) = 0;
        int v149 = (char *)(v145 + 1);
        *((_DWORD *)v145 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = -1;
        *(uint64_t *)((char *)v145 + 10icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
        *(uint64_t *)((char *)v145 + 92) = 0LL;
        *((_DWORD *)v145 + 27) = 0;
        if (*(int *)this > 0)
        {
          (*(void (**)(uint64_t *))(*v145 + 8))(v145);
        }

        else
        {
          icu::UnicodeString::copyFrom((UChar **)v145 + 2, (UChar **)v71, 0);
          uint64_t v150 = v147;
          unsigned int v151 = *(unsigned __int16 *)(v147 + 24);
          if ((v151 & 0x8000) != 0) {
            uint64_t v152 = *(unsigned int *)(v147 + 28);
          }
          else {
            uint64_t v152 = v151 >> 5;
          }
          icu::UnicodeString::extract((uint64_t)v146, 0, v152, v149, 4);
          uhash_put(v207, (uint64_t)v146, v147, (int *)this);
          LODWORD(v232[0]) = 0;
          unsigned int v154 = icu::ICU_Utility::parseAsciiInteger(v146, (const icu::UnicodeString *)v232, v153);
          if (SLODWORD(v232[0]) < 1)
          {
            *(_DWORD *)(v147 + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = -1;
          }

          else
          {
            *(_DWORD *)(v147 + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v154;
            uhash_iput(v206, v154, v147, (int *)this);
          }

          *unsigned int v148 = 6;
          int v3 = (uint64_t *)v207;
          uint64_t v5 = (int32x2_t *)v204;
          uint64_t v143 = v150;
LABEL_286:
          v155 = icu::UMemory::operator new((uint64_t *)6, (icu::UMemory *)0x28, v141);
          if (v155)
          {
            uint64_t v156 = icu::UVector::UVector( (uint64_t)v155,  (uint64_t)uprv_deleteUObject,  (uint64_t)uhash_compareUnicodeString,  (int *)this);
            uint64_t v157 = *(unsigned int *)this;
            *(void *)(v143 + 104) = v156;
            memset((char *)v232 + 8, 0, 56);
            *(void *)&v232[0] = off_18971B688;
            WORD4(v232[0]) = 2;
            __int128 v158 = (void *)WORD4(v233[0]);
            BOOL v159 = SWORD4(v233[0]) < 0;
            int v160 = WORD4(v233[0]) >> 5;
            unsigned int v161 = HIDWORD(v233[0]);
            if (SWORD4(v233[0]) < 0) {
              int v160 = HIDWORD(v233[0]);
            }
            if (v160 < 1 || *(int *)this > 0)
            {
LABEL_329:
              icu::UnicodeString::~UnicodeString(v158, (icu::UnicodeString *)v232);
              icu::UnicodeString::~UnicodeString(v183, (icu::UnicodeString *)v233);
              if (v71) {
                (*(void (**)(uint64_t))(*(void *)v71 + 8LL))(v71);
              }
              goto LABEL_331;
            }

            uint64_t v162 = v143;
            unint64_t v163 = 0LL;
            while (2)
            {
              unsigned int v164 = v158 >> 5;
              if (v159) {
                unint64_t v165 = v161;
              }
              else {
                unint64_t v165 = v164;
              }
              if (v163 >= v165)
              {
                LOWORD(v167) = -1;
              }

              else
              {
                int v166 = (char *)*((void *)&v233[1] + 1);
                int v167 = *(unsigned __int16 *)&v166[2 * v163];
                if (v167 == 32)
                {
LABEL_303:
                  else {
                    unint64_t v168 = v161;
                  }
                  if (v163 >= v168)
                  {
                    uint64_t v171 = v163 + 1;
                    if (v163 + 1 != v168) {
                      goto LABEL_325;
                    }
                  }

                  else
                  {
                    int v169 = (char *)*((void *)&v233[1] + 1);
                    int v170 = *(unsigned __int16 *)&v169[2 * v163];
                    uint64_t v171 = v163 + 1;
                    if (v170 != 32 && v171 != v168)
                    {
LABEL_325:
                      BOOL v159 = (__int16)v158 < 0;
                      signed int v182 = v158 >> 5;
                      if (v171 >= v182) {
                        goto LABEL_329;
                      }
                      unint64_t v163 = v171;
                      continue;
                    }
                  }

                  uint64_t v173 = uhash_get((uint64_t)v3, (uint64_t)v232);
                  if (v173)
                  {
                    uint64_t v176 = v173;
                    uint64_t v177 = (icu::UnicodeString *)icu::UMemory::operator new(v175, (icu::UMemory *)0x40, v174);
                    int v178 = v177;
                    if (v177)
                    {
                      v179 = (UChar **)(v176 + 16);
                      __int128 v180 = v177;
                      icu::UnicodeString::UnicodeString(v177, v179);
                      int v178 = v180;
                    }

                    else if (*(int *)this <= 0)
                    {
                      *(_DWORD *)this = 7;
                    }

                    icu::UVector::adoptElement(*(icu::UVector **)(v162 + 104), v178, (UErrorCode *)this);
                  }

                  if ((BYTE8(v232[0]) & 1) != 0) {
                    __int16 v181 = 2;
                  }
                  else {
                    __int16 v181 = BYTE8(v232[0]) & 0x1F;
                  }
                  WORD4(v232[0]) = v181;
                  __int128 v158 = (void *)WORD4(v233[0]);
                  unsigned int v161 = HIDWORD(v233[0]);
                  uint64_t v171 = v163 + 1;
                  goto LABEL_325;
                }
              }

              break;
            }

            LOWORD(v231[0]) = v167;
            icu::UnicodeString::doAppend((uint64_t)v232, (uint64_t)v231, 0, 1LL);
            __int128 v158 = (void *)WORD4(v233[0]);
            unsigned int v161 = HIDWORD(v233[0]);
            unsigned int v164 = WORD4(v233[0]) >> 5;
            goto LABEL_303;
          }

          uint64_t v157 = *(unsigned int *)this;
          if ((int)v157 <= 0)
          {
            uint64_t v157 = 7LL;
            *(_DWORD *)this = 7;
          }

          *(void *)(v143 + 104) = 0LL;
        }
      }

      else
      {
        uint64_t v157 = *(unsigned int *)this;
        if ((int)v157 <= 0)
        {
          uint64_t v157 = 7LL;
          *(_DWORD *)this = 7;
        }
      }

LABEL_370:
      icu::UnicodeString::~UnicodeString((void *)v157, (icu::UnicodeString *)v233);
      if (!v71) {
        goto LABEL_372;
      }
LABEL_371:
      (*(void (**)(uint64_t))(*(void *)v71 + 8LL))(v71);
      goto LABEL_372;
    }

    uhash_put((uint64_t)v5, v71, v139, (int *)this);
    icu::UnicodeString::~UnicodeString(v144, (icu::UnicodeString *)v233);
LABEL_331:
  }

  if (*(int *)this <= 0)
  {
    do
    {
      if (!ures_hasNext(v213)) {
        break;
      }
      __int128 v186 = ures_getNextResource(v213, 0LL, (int *)this);
      uint64_t v187 = (uint64_t)v186;
      if (*(int *)this <= 0 && ures_getType((uint64_t)v186) == 8 && ures_getSize(v187) == 3)
      {
        memset((char *)v233 + 8, 0, 56);
        *(void *)&v233[0] = off_18971B688;
        WORD4(v233[0]) = 2;
        LODWORD(v231[0]) = 0;
        uint64_t v188 = v187;
        __int128 v189 = ures_getStringByIndex(v187, 0, (int *)v231, (int *)this);
        if (*(int *)this <= 0)
        {
          *(void *)&v232[0] = v189;
          icu::UnicodeString::setTo((icu::UnicodeString *)v233, 1, (const UChar **)v232, v231[0]);
        }

        else
        {
          icu::UnicodeString::setToBogus((icu::UnicodeString *)v233);
        }

        memset((char *)v232 + 8, 0, 56);
        *(void *)&v232[0] = off_18971B688;
        WORD4(v232[0]) = 2;
        LODWORD(v230[0]) = 0;
        __int128 v190 = ures_getStringByIndex(v187, 1, (int *)v230, (int *)this);
        if (*(int *)this <= 0)
        {
          *(void *)&v231[0] = v190;
          icu::UnicodeString::setTo((icu::UnicodeString *)v232, 1, (const UChar **)v231, v230[0]);
        }

        else
        {
          icu::UnicodeString::setToBogus((icu::UnicodeString *)v232);
        }

        memset((char *)v231 + 8, 0, 56);
        *(void *)&v231[0] = off_18971B688;
        WORD4(v231[0]) = 2;
        LODWORD(v225) = 0;
        __int128 v191 = ures_getStringByIndex(v187, 2, (int *)&v225, (int *)this);
        if (*(int *)this <= 0)
        {
          *(void *)&v230[0] = v191;
          icu::UnicodeString::setTo((icu::UnicodeString *)v231, 1, (const UChar **)v230, (int)v225);
        }

        else
        {
          icu::UnicodeString::setToBogus((icu::UnicodeString *)v231);
        }

        uint64_t v192 = uhash_get(v207, (uint64_t)v233);
        if (v192)
        {
          uint64_t v195 = v192;
          LODWORD(v230[0]) = 0;
          unsigned int v196 = icu::ICU_Utility::parseAsciiInteger((icu::ICU_Utility *)v232, (const icu::UnicodeString *)v230, v193);
          v198 = (uint64_t *)LODWORD(v230[0]);
          if (SLODWORD(v230[0]) >= 1)
          {
            *(_DWORD *)(v195 + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v196;
            uhash_iput(v206, v196, v195, (int *)this);
          }

          v199 = (icu::UnicodeString *)icu::UMemory::operator new(v198, (icu::UMemory *)0x40, v197);
          uint64_t v200 = (uint64_t)v199;
          if (v199)
          {
            icu::UnicodeString::UnicodeString(v199, (UChar **)v231);
          }

          else if (*(int *)this <= 0)
          {
            *(_DWORD *)this = 7;
          }

          uhash_put(v204, v200, v195, (int *)this);
        }

        icu::UnicodeString::~UnicodeString(v194, (icu::UnicodeString *)v231);
        icu::UnicodeString::~UnicodeString(v201, (icu::UnicodeString *)v232);
        icu::UnicodeString::~UnicodeString(v202, (icu::UnicodeString *)v233);
        int v3 = (uint64_t *)v207;
        uint64_t v187 = v188;
      }

      ures_close(v187);
    }

    while (*(int *)this < 1);
  }

LABEL_198:
  memset(v233, 0, sizeof(v233));
  icu::UnicodeString::UnicodeString((uint64_t)v233, (uint64_t)"0");
  uint64_t v97 = uhash_get((uint64_t)v3, (uint64_t)v233);
  if (v97) {
    *(_DWORD *)(v97 + 84) = 2;
  }
  memset(v232, 0, sizeof(v232));
  icu::UnicodeString::UnicodeString((uint64_t)v232, (uint64_t)"Z");
  uint64_t v98 = uhash_get((uint64_t)v3, (uint64_t)v232);
  if (v98) {
    *(_DWORD *)(v98 + 84) = 0;
  }
  if (*((int *)v203 + 2) >= 1)
  {
    signed int v99 = 0;
    do
    {
      uint64_t v100 = icu::UVector::elementAt(v203, v99);
      uint64_t v101 = uhash_get((uint64_t)v3, v100);
      if (v101) {
        *(_DWORD *)(v101 + 84) = 3;
      }
      ++v99;
    }

    while (v99 < *((_DWORD *)v203 + 2));
  }

  if (*((int *)v205 + 2) >= 1)
  {
    signed int v102 = 0;
    do
    {
      uint64_t v103 = icu::UVector::elementAt(v205, v102);
      uint64_t v104 = uhash_get((uint64_t)v3, v103);
      if (v104) {
        *(_DWORD *)(v104 + 84) = 5;
      }
      ++v102;
    }

    while (v102 < *((_DWORD *)v205 + 2));
  }

  memset(v231, 0, sizeof(v231));
  icu::UnicodeString::UnicodeString((uint64_t)v231, (uint64_t)L"QO");
  uint64_t v105 = uhash_get((uint64_t)v3, (uint64_t)v231);
  if (v105) {
    *(_DWORD *)(v105 + 84) = 4;
  }
  uint64_t v106 = v216;
  if (!ures_hasNext(v216)) {
    goto LABEL_251;
  }
  while (2)
  {
    __int128 v107 = ures_getNextResource(v106, 0LL, (int *)this);
    uint64_t v108 = (uint64_t)v107;
    uint64_t v109 = *(unsigned int *)this;
    if ((int)v109 > 0)
    {
      int v110 = 1;
      goto LABEL_246;
    }

    uint64_t v111 = (uint64_t)v107;
    unsigned int v112 = (const char *)ures_getKey((uint64_t)v107);
    if (!strcmp(v112, "containedGroupings") || !strcmp(v112, "deprecated"))
    {
      int v110 = 35;
      uint64_t v108 = v111;
      goto LABEL_246;
    }

    memset(v230, 0, sizeof(v230));
    icu::UnicodeString::UnicodeString(v230, v112, 0xFFFFFFFFLL, 0LL);
    uint64_t v113 = uhash_get((uint64_t)v3, (uint64_t)v230);
    uint64_t v108 = v111;
    if ((int)ures_getSize(v111) < 1)
    {
LABEL_235:
      int v110 = 0;
      goto LABEL_245;
    }

    signed int v115 = 0;
    while (1)
    {
      uint64_t v229 = 0LL;
      __int128 v227 = 0u;
      __int128 v228 = 0u;
      __int128 v226 = 0u;
      v225 = off_18971B688;
      LOWORD(v226) = 2;
      int v224 = 0;
      unsigned int v116 = ures_getStringByIndex(v108, v115, &v224, (int *)this);
      if (*(int *)this <= 0)
      {
        v223 = v116;
        icu::UnicodeString::setTo((icu::UnicodeString *)&v225, 1, &v223, v224);
      }

      else
      {
        icu::UnicodeString::setToBogus((icu::UnicodeString *)&v225);
      }

      uint64_t v117 = uhash_get((uint64_t)v3, (uint64_t)&v225);
      if (!v113 || !v117) {
        goto LABEL_234;
      }
      uint64_t v120 = v117;
      uint64_t v121 = *(void *)(v113 + 96);
      if (!v121)
      {
        uint64_t v122 = icu::UMemory::operator new(0LL, (icu::UMemory *)0x28, v118);
        if (!v122)
        {
          uint64_t v121 = *(unsigned int *)this;
          if ((int)v121 <= 0)
          {
            uint64_t v121 = 7LL;
            *(_DWORD *)this = 7;
          }

          *(void *)(v113 + 96) = 0LL;
          int v3 = (uint64_t *)v207;
          goto LABEL_243;
        }

        uint64_t v123 = icu::UVector::UVector( (uint64_t)v122,  (uint64_t)uprv_deleteUObject,  (uint64_t)uhash_compareUnicodeString,  (int *)this);
        uint64_t v121 = *(unsigned int *)this;
        *(void *)(v113 + 96) = v123;
      }

      int v124 = (UChar **)icu::UMemory::operator new((uint64_t *)v121, (icu::UMemory *)0x40, v118);
      if (!v124) {
        break;
      }
      int v125 = v124;
      *int v124 = (UChar *)off_18971B688;
      *((_WORD *)v124 + 4) = 2;
      if (*(int *)this > 0)
      {
        (*((void (**)(UChar **))*v124 + 1))(v124);
LABEL_243:
        uint64_t v108 = v111;
        goto LABEL_244;
      }

      icu::UnicodeString::fastCopyFrom(v124, (UChar **)(v120 + 16));
      icu::UVector::adoptElement(*(icu::UVector **)(v113 + 96), v125, (UErrorCode *)this);
      uint64_t v121 = *(unsigned int *)this;
      uint64_t v108 = v111;
      unsigned int v119 = (void *)*(unsigned int *)(v113 + 84);
      if ((_DWORD)v119 != 5) {
        *(void *)(v120 + 88) = v113;
      }
LABEL_234:
      icu::UnicodeString::~UnicodeString(v119, (icu::UnicodeString *)&v225);
    }

    uint64_t v121 = *(unsigned int *)this;
    uint64_t v108 = v111;
    if ((int)v121 <= 0)
    {
      uint64_t v121 = 7LL;
      *(_DWORD *)this = 7;
    }

LABEL_338:
  icu::UnicodeString::~UnicodeString((void *)v109, (icu::UnicodeString *)v231);
  icu::UnicodeString::~UnicodeString(v184, (icu::UnicodeString *)v232);
  icu::UnicodeString::~UnicodeString(v185, (icu::UnicodeString *)v233);
LABEL_372:
  int v4 = (int32x2_t *)v206;
  int v3 = (uint64_t *)v207;
  uint64_t v10 = v203;
  uint64_t v5 = (int32x2_t *)v204;
LABEL_138:
  uint64_t v14 = v205;
  uint64_t v17 = v208;
LABEL_15:
  uint64_t v21 = v209;
  uint64_t v22 = v214;
  uint64_t v23 = v220;
LABEL_16:
  uint64_t v24 = v219;
LABEL_17:
  if (v215)
  {
    ures_close(v215);
    uint64_t v24 = v219;
  }

  if (v24) {
    ures_close(v24);
  }
  if (v216) {
    ures_close(v216);
  }
  if (v217) {
    ures_close(v217);
  }
  if (v218) {
    ures_close(v218);
  }
  if (v23) {
    ures_close(v23);
  }
  if (v210) {
    ures_close(v210);
  }
  if (v211) {
    ures_close(v211);
  }
  if (v213) {
    ures_close(v213);
  }
  if (v212) {
    ures_close(v212);
  }
  if (v22) {
    ures_close(v22);
  }
  if (v21) {
    ures_close(v21);
  }
  if (v17) {
    ures_close(v17);
  }
  if (v14) {
    (*(void (**)(icu::UVector *))(*(void *)v14 + 8LL))(v14);
  }
  if (v10) {
    (*(void (**)(icu::UVector *))(*(void *)v10 + 8LL))(v10);
  }
  if (v5) {
    uhash_close(v5);
  }
  if (v4) {
    uhash_close(v4);
  }
  if (v3) {
    uhash_close(v3);
  }
}

uint64_t sub_18096BF6C(icu::Region *a1)
{
  return 1LL;
}

uint64_t icu::Region::Region(uint64_t this)
{
  *(void *)this = off_18972A1E0;
  *(void *)(this + 16) = off_18971B688;
  *(_WORD *)(this + 24) = 2;
  *(_DWORD *)(this + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = -1;
  *(_BYTE *)(this + 8) = 0;
  *(void *)(this + 84) = 0LL;
  *(void *)(this + 10icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
  *(void *)(this + 92) = 0LL;
  *(_DWORD *)(this + 108) = 0;
  return this;
}

{
  *(void *)this = off_18972A1E0;
  *(void *)(this + 16) = off_18971B688;
  *(_WORD *)(this + 24) = 2;
  *(_DWORD *)(this + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = -1;
  *(_BYTE *)(this + 8) = 0;
  *(void *)(this + 84) = 0LL;
  *(void *)(this + 10icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
  *(void *)(this + 92) = 0LL;
  *(_DWORD *)(this + 108) = 0;
  return this;
}

uint64_t icu::Region::cleanupRegionData(icu::Region *this)
{
  for (uint64_t i = 0LL; i != 7; ++i)
  {
    uint64_t v2 = qword_18C5357D0[i];
    if (v2)
    {
      (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
      qword_18C5357D0[i] = 0LL;
    }
  }

  if (qword_18C535818) {
    uhash_close((_BYTE *)qword_18C535818);
  }
  if (qword_18C535808) {
    uhash_close((_BYTE *)qword_18C535808);
  }
  if (qword_18C535810) {
    uhash_close((_BYTE *)qword_18C535810);
  }
  uint64_t result = qword_18C5357C8;
  if (qword_18C5357C8)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)qword_18C5357C8 + 8LL))(qword_18C5357C8);
    qword_18C5357C8 = 0LL;
  }

  qword_18C535810 = 0LL;
  qword_18C535808 = 0LL;
  qword_18C535818 = 0LL;
  atomic_store(0, &dword_18C535820);
  return result;
}

void icu::Region::~Region(icu::Region *this)
{
  *(void *)this = off_18972A1E0;
  uint64_t v2 = *((void *)this + 12);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *((void *)this + 13);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  icu::UnicodeString::~UnicodeString((icu::Region *)((char *)this + 16));
  icu::UObject::~UObject(this);
}

{
  void *v1;
  icu::Region::~Region(this);
  icu::UMemory::operator delete(v1);
}

BOOL icu::Region::operator==(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 24);
  if ((v2 & 1) != 0) {
    return *(_WORD *)(a2 + 24) & 1;
  }
  if ((v2 & 0x8000) != 0) {
    int v3 = *(_DWORD *)(a1 + 28);
  }
  else {
    int v3 = v2 >> 5;
  }
  uint64_t v4 = 0LL;
  unsigned int v5 = *(unsigned __int16 *)(a2 + 24);
  if ((v5 & 0x8000u) == 0) {
    unsigned int v6 = v5 >> 5;
  }
  else {
    unsigned int v6 = *(_DWORD *)(a2 + 28);
  }
  if ((v5 & 1) == 0 && v3 == v6) {
    return icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 16), (const icu::UnicodeString *)(a2 + 16), v3);
  }
  return v4;
}

uint64_t icu::Region::operator!=(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 24);
  if ((v2 & 1) != 0)
  {
    int v4 = *(_WORD *)(a2 + 24) & 1;
  }

  else
  {
    if ((v2 & 0x8000) != 0) {
      int v3 = *(_DWORD *)(a1 + 28);
    }
    else {
      int v3 = v2 >> 5;
    }
    int v4 = 0;
    unsigned int v5 = *(unsigned __int16 *)(a2 + 24);
    if ((v5 & 0x8000u) == 0) {
      unsigned int v6 = v5 >> 5;
    }
    else {
      unsigned int v6 = *(_DWORD *)(a2 + 28);
    }
    if ((v5 & 1) == 0 && v3 == v6) {
      int v4 = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 16), (const icu::UnicodeString *)(a2 + 16), v3);
    }
  }

  return v4 ^ 1u;
}

icu::Region *icu::Region::getInstance(icu::Region *this, icu::Region *a2, UErrorCode *a3)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  int v3 = this;
  unsigned int v5 = atomic_load(&dword_18C535820);
  if (v5 == 2 || !icu::umtx_initImplPreInit(&dword_18C535820))
  {
    int v7 = dword_18C535824;
    if (dword_18C535824 >= 1)
    {
      int v3 = 0LL;
LABEL_8:
      *(_DWORD *)a2 = v7;
      return v3;
    }
  }

  else
  {
    icu::Region::loadRegionData(a2, v6);
    dword_18C535824 = *(_DWORD *)a2;
    icu::umtx_initImplPostInit(&dword_18C535820);
  }

  if (!v3)
  {
    int v7 = 1;
    goto LABEL_8;
  }

  memset(v12, 0, sizeof(v12));
  icu::UnicodeString::UnicodeString(v12, v3, 0xFFFFFFFFLL, 0LL);
  int v3 = (icu::Region *)uhash_get(qword_18C535810, (uint64_t)v12);
  if (v3 || (int v3 = (icu::Region *)uhash_get(qword_18C535818, (uint64_t)v12)) != 0LL)
  {
    uint64_t v8 = *((unsigned int *)v3 + 21);
    if ((_DWORD)v8 == 6)
    {
      uint64_t v8 = *(unsigned int *)(*((void *)v3 + 13) + 8LL);
      if ((_DWORD)v8 == 1)
      {
        PreferredValues = icu::Region::getPreferredValues((unsigned int **)v3, (UErrorCode *)a2);
        (*(void (**)(uint64_t *, icu::Region *))(*PreferredValues + 64))(PreferredValues, a2);
        uint64_t v10 = (*(uint64_t (**)(uint64_t *, icu::Region *))(*PreferredValues + 56))(PreferredValues, a2);
        int v3 = (icu::Region *)uhash_get(qword_18C535810, v10);
        (*(void (**)(uint64_t *))(*PreferredValues + 8))(PreferredValues);
      }
    }
  }

  else
  {
    uint64_t v8 = 1LL;
    *(_DWORD *)a2 = 1;
  }

  icu::UnicodeString::~UnicodeString((void *)v8, (icu::UnicodeString *)v12);
  return v3;
}

uint64_t *icu::Region::getPreferredValues(unsigned int **this, UErrorCode *a2)
{
  unsigned int v5 = atomic_load(&dword_18C535820);
  if (v5 == 2 || !icu::umtx_initImplPreInit(&dword_18C535820))
  {
    if (dword_18C535824 >= 1)
    {
      uint64_t result = 0LL;
      *a2 = dword_18C535824;
      return result;
    }
  }

  else
  {
    icu::Region::loadRegionData((icu::Region *)a2, a2);
    dword_18C535824 = *a2;
    icu::umtx_initImplPostInit(&dword_18C535820);
  }

  unsigned int v6 = (uint64_t *)*((unsigned int *)this + 21);
  if ((_DWORD)v6 != 6) {
    return 0LL;
  }
  uint64_t result = icu::UMemory::operator new(v6, (icu::UMemory *)0x80, (unint64_t)a2);
  if (result) {
    return (uint64_t *)sub_18096CC9C((uint64_t)result, this[13], a2);
  }
  return result;
}

uint64_t icu::Region::getInstance(icu::Region *this, icu::Region *a2, UErrorCode *a3)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  unsigned int v7 = atomic_load(&dword_18C535820);
  if (v7 == 2 || !icu::umtx_initImplPreInit(&dword_18C535820))
  {
    int v9 = dword_18C535824;
    if (dword_18C535824 >= 1)
    {
      uint64_t v3 = 0LL;
LABEL_9:
      *(_DWORD *)a2 = v9;
      return v3;
    }
  }

  else
  {
    icu::Region::loadRegionData(a2, v8);
    dword_18C535824 = *(_DWORD *)a2;
    icu::umtx_initImplPostInit(&dword_18C535820);
  }

  uint64_t v3 = uhash_iget(qword_18C535808, this);
  if (!v3)
  {
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    uint64_t v17 = 0LL;
    __int128 v16 = 0u;
    uint64_t v13 = off_18971B688;
    LOWORD(v14) = 2;
    icu::ICU_Utility::appendNumber((icu::ICU_Utility *)&v13, this, 0xAu, 1);
    uint64_t v3 = uhash_get(qword_18C535818, (uint64_t)&v13);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v13);
  }

  if (!v3)
  {
    int v9 = 1;
    goto LABEL_9;
  }

  if (*(_DWORD *)(v3 + 84) == 6 && *(_DWORD *)(*(void *)(v3 + 104) + 8LL) == 1)
  {
    PreferredValues = icu::Region::getPreferredValues((unsigned int **)v3, (UErrorCode *)a2);
    (*(void (**)(uint64_t *, icu::Region *))(*PreferredValues + 64))(PreferredValues, a2);
    uint64_t v12 = (*(uint64_t (**)(uint64_t *, icu::Region *))(*PreferredValues + 56))(PreferredValues, a2);
    uint64_t v3 = uhash_get(qword_18C535810, v12);
    (*(void (**)(uint64_t *))(*PreferredValues + 8))(PreferredValues);
  }

  return v3;
}

uint64_t *icu::Region::getAvailable(int a1, icu::Region *a2)
{
  unsigned int v5 = atomic_load(&dword_18C535820);
  if (v5 == 2 || !icu::umtx_initImplPreInit(&dword_18C535820))
  {
    if (dword_18C535824 >= 1)
    {
      uint64_t result = 0LL;
      *(_DWORD *)a2 = dword_18C535824;
      return result;
    }
  }

  else
  {
    icu::Region::loadRegionData(a2, (UErrorCode *)a2);
    dword_18C535824 = *(_DWORD *)a2;
    icu::umtx_initImplPostInit(&dword_18C535820);
  }

  unsigned int v6 = (uint64_t *)*(unsigned int *)a2;
  uint64_t result = icu::UMemory::operator new(v6, (icu::UMemory *)0x80, (unint64_t)a2);
  if (result) {
    return (uint64_t *)sub_18096CC9C((uint64_t)result, (unsigned int *)qword_18C5357D0[a1], (UErrorCode *)a2);
  }
  return result;
}

uint64_t icu::Region::getContainingRegion(icu::Region *this)
{
  int v5 = 0;
  unsigned int v2 = atomic_load(&dword_18C535820);
  if (v2 != 2 && icu::umtx_initImplPreInit(&dword_18C535820))
  {
    icu::Region::loadRegionData((icu::Region *)&v5, v3);
    dword_18C535824 = v5;
    icu::umtx_initImplPostInit(&dword_18C535820);
  }

  return *((void *)this + 11);
}

uint64_t icu::Region::getContainingRegion(uint64_t a1, int a2)
{
  int v7 = 0;
  unsigned int v4 = atomic_load(&dword_18C535820);
  if (v4 == 2 || !icu::umtx_initImplPreInit(&dword_18C535820))
  {
    if (dword_18C535824 >= 1) {
      int v7 = dword_18C535824;
    }
  }

  else
  {
    icu::Region::loadRegionData((icu::Region *)&v7, v5);
    dword_18C535824 = v7;
    icu::umtx_initImplPostInit(&dword_18C535820);
  }

  uint64_t result = *(void *)(a1 + 88);
  if (result)
  {
    if (*(_DWORD *)(result + 84) != a2) {
      return icu::Region::getContainingRegion();
    }
  }

  return result;
}

uint64_t *icu::Region::getContainedRegions(unsigned int **this, UErrorCode *a2)
{
  unsigned int v5 = atomic_load(&dword_18C535820);
  if (v5 == 2 || !icu::umtx_initImplPreInit(&dword_18C535820))
  {
    if (dword_18C535824 >= 1)
    {
      uint64_t result = 0LL;
      *a2 = dword_18C535824;
      return result;
    }
  }

  else
  {
    icu::Region::loadRegionData((icu::Region *)a2, a2);
    dword_18C535824 = *a2;
    icu::umtx_initImplPostInit(&dword_18C535820);
  }

  unsigned int v6 = (uint64_t *)*(unsigned int *)a2;
  uint64_t result = icu::UMemory::operator new(v6, (icu::UMemory *)0x80, (unint64_t)a2);
  if (result) {
    return (uint64_t *)sub_18096CC9C((uint64_t)result, this[12], a2);
  }
  return result;
}

uint64_t *icu::Region::getContainedRegions(unsigned int **a1, int a2, icu::Region *a3)
{
  if (*(int *)a3 <= 0)
  {
    unsigned int v6 = atomic_load(&dword_18C535820);
    if (v6 == 2 || !icu::umtx_initImplPreInit(&dword_18C535820))
    {
      if (dword_18C535824 >= 1) {
        *(_DWORD *)a3 = dword_18C535824;
      }
    }

    else
    {
      icu::Region::loadRegionData(a3, v7);
      dword_18C535824 = *(_DWORD *)a3;
      icu::umtx_initImplPostInit(&dword_18C535820);
    }
  }

  uint64_t v27 = 0LL;
  memset(v26, 0, sizeof(v26));
  icu::UVector::UVector((uint64_t)v26, 0LL, (uint64_t)uhash_compareChars, (int *)a3);
  ContainedRegions = icu::Region::getContainedRegions(a1, (UErrorCode *)a3);
  int v9 = ContainedRegions;
  int v10 = *(_DWORD *)a3;
  if (ContainedRegions || v10 >= 1)
  {
    if (v10 > 0)
    {
      uint64_t v11 = 0LL;
      if (!ContainedRegions) {
        goto LABEL_36;
      }
      goto LABEL_35;
    }

    uint64_t v12 = (icu::Region *)(*(uint64_t (**)(uint64_t *, void, icu::Region *))(*ContainedRegions + 40))( ContainedRegions,  0LL,  a3);
    __int128 v15 = (uint64_t *)*(unsigned int *)a3;
    if (v12) {
      BOOL v16 = (int)v15 <= 0;
    }
    else {
      BOOL v16 = 0;
    }
    if (!v16)
    {
LABEL_30:
      uint64_t v24 = icu::UMemory::operator new(v15, (icu::UMemory *)0x80, v13);
      if (v24)
      {
        uint64_t v11 = v24;
        sub_18096CC9C((uint64_t)v24, (unsigned int *)v26, (UErrorCode *)a3);
        if (*(int *)a3 < 1)
        {
LABEL_35:
          (*(void (**)(uint64_t *))(*v9 + 8))(v9);
          goto LABEL_36;
        }

        (*(void (**)(uint64_t *))(*v11 + 8))(v11);
      }

      else if (*(int *)a3 <= 0)
      {
        uint64_t v11 = 0LL;
        *(_DWORD *)a3 = 7;
        goto LABEL_35;
      }

      uint64_t v11 = 0LL;
      goto LABEL_35;
    }

    while (1)
    {
      uint64_t Instance = icu::Region::getInstance(v12, a3, v14);
      if (*((_DWORD *)Instance + 21) == a2)
      {
        icu::UVector::addElement((icu::UVector *)v26, (char *)Instance + 16, (UErrorCode *)a3);
      }

      else
      {
        uint64_t v18 = icu::Region::getContainedRegions();
        uint64_t v19 = v18;
        if (*(int *)a3 <= 0)
        {
          do
          {
            uint64_t v20 = (icu::Region *)(*(uint64_t (**)(uint64_t, void, icu::Region *))(*(void *)v19 + 40LL))( v19,  0LL,  a3);
            if (!v20) {
              break;
            }
            uint64_t v22 = icu::Region::getInstance(v20, a3, v21);
            icu::UVector::addElement((icu::UVector *)v26, (char *)v22 + 16, (UErrorCode *)a3);
          }

          while (*(int *)a3 <= 0);
        }

        else if (!v18)
        {
          goto LABEL_26;
        }

        (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
      }

uint64_t icu::Region::getType(icu::Region *this)
{
  return *((unsigned int *)this + 21);
}

uint64_t icu::Region::contains(icu::Region *this, const icu::Region *a2)
{
  int v11 = 0;
  unsigned int v4 = atomic_load(&dword_18C535820);
  if (v4 == 2 || !icu::umtx_initImplPreInit(&dword_18C535820))
  {
    if (dword_18C535824 >= 1) {
      int v11 = dword_18C535824;
    }
  }

  else
  {
    icu::Region::loadRegionData((icu::Region *)&v11, v5);
    dword_18C535824 = v11;
    icu::umtx_initImplPostInit(&dword_18C535820);
  }

  uint64_t result = *((void *)this + 12);
  if (result)
  {
    int v7 = (icu::UVector *)*((void *)this + 12);
    if (*((int *)v7 + 2) >= 1)
    {
      signed int v8 = 0;
      while (1)
      {
        uint64_t v9 = icu::UVector::elementAt(v7, v8);
        int v10 = (icu::Region *)uhash_get(qword_18C535810, v9);
        if (v10)
        {
        }

        ++v8;
        int v7 = (icu::UVector *)*((void *)this + 12);
        if (v8 >= *((_DWORD *)v7 + 2)) {
          return 0LL;
        }
      }

      return 1LL;
    }

    return 0LL;
  }

  return result;
}

uint64_t icu::Region::getRegionCode(icu::Region *this)
{
  return (uint64_t)this + 8;
}

uint64_t icu::Region::getNumericCode(icu::Region *this)
{
  return *((unsigned int *)this + 20);
}

uint64_t sub_18096CC9C(uint64_t a1, unsigned int *a2, UErrorCode *a3)
{
  uint64_t v6 = icu::StringEnumeration::StringEnumeration(a1);
  *(void *)uint64_t v6 = off_18972A208;
  *(_DWORD *)(v6 + 116) = 0;
  *(void *)(v6 + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
  if (a2)
  {
    signed int v8 = (uint64_t *)*(unsigned int *)a3;
    if ((int)v8 <= 0)
    {
      uint64_t v9 = icu::UMemory::operator new(v8, (icu::UMemory *)0x28, v7);
      if (v9)
      {
        int v10 = (icu::UVector *)v9;
        icu::UVector::UVector(v9, uprv_deleteUObject, uhash_compareUnicodeString, a2[2], a3);
        if (*(int *)a3 > 0)
        {
LABEL_12:
          (*(void (**)(icu::UVector *))(*(void *)v10 + 8LL))(v10);
        }

        else
        {
          signed int v11 = 0;
          while (v11 < (int)a2[2])
          {
            uint64_t v12 = (UChar **)icu::UVector::elementAt((icu::UVector *)a2, v11);
            __int128 v15 = (icu::UnicodeString *)icu::UMemory::operator new(v14, (icu::UMemory *)0x40, v13);
            BOOL v16 = v15;
            if (v15)
            {
              icu::UnicodeString::UnicodeString(v15, v12);
            }

            else if (*(int *)a3 <= 0)
            {
              *a3 = U_MEMORY_ALLOCATION_ERROR;
            }

            icu::UVector::adoptElement(v10, v16, a3);
            ++v11;
          }

          *(void *)(a1 + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v10;
        }
      }

      else if (*(int *)a3 <= 0)
      {
        *a3 = U_MEMORY_ALLOCATION_ERROR;
      }
    }
  }

  return a1;
}

icu::UVector *sub_18096CDE0(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 0LL;
  }
  uint64_t result = *(icu::UVector **)(a1 + 120);
  if (result)
  {
    uint64_t result = (icu::UVector *)icu::UVector::elementAt(result, *(_DWORD *)(a1 + 116));
    if (result) {
      ++*(_DWORD *)(a1 + 116);
    }
  }

  return result;
}

uint64_t sub_18096CE30(uint64_t result)
{
  *(_DWORD *)(result + 116) = 0;
  return result;
}

uint64_t sub_18096CE38(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 120);
  if (v1) {
    return *(unsigned int *)(v1 + 8);
  }
  else {
    return 0LL;
  }
}

void sub_18096CE50(icu::StringEnumeration *this)
{
  *(void *)this = off_18972A208;
  uint64_t v2 = *((void *)this + 15);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::StringEnumeration::~StringEnumeration(this);
}

void sub_18096CE90(icu::StringEnumeration *this)
{
  *(void *)this = off_18972A208;
  uint64_t v2 = *((void *)this + 15);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::StringEnumeration::~StringEnumeration(this);
  icu::UMemory::operator delete(v3);
}

void sub_18096CED4(void *a1)
{
  uint64_t v2 = 0LL;
  *a1 = off_18972A2A0;
  uint64_t v3 = a1;
  do
  {
    uint64_t v4 = 0LL;
    unsigned int v5 = v3;
    do
    {
      uint64_t v6 = 0x1FFFFFFFFFFFFFF8LL;
      do
      {
        unint64_t v7 = (icu::SimpleFormatter *)v5[v6 + 2171];
        if (v7)
        {
          icu::SimpleFormatter::~SimpleFormatter(v7);
          icu::UMemory::operator delete(v8);
        }

        uint64_t v9 = (icu::SimpleFormatter *)v5[v6 + 2179];
        if (v9)
        {
          icu::SimpleFormatter::~SimpleFormatter(v9);
          icu::UMemory::operator delete(v10);
        }

        ++v6;
      }

      while (v6 * 8);
      ++v4;
      v5 += 16;
    }

    while (v4 != 15);
    ++v2;
    v3 += 240;
  }

  while (v2 != 3);
  signed int v11 = (icu::SimpleFormatter *)a1[2893];
  if (v11)
  {
    icu::SimpleFormatter::~SimpleFormatter(v11);
    icu::UMemory::operator delete(v12);
  }

  icu::UnicodeString::~UnicodeString((void *)0x5A18, (icu::UnicodeString *)(a1 + 2883));
  uint64_t v13 = 0LL;
  uint64_t v14 = 17240LL;
  do
  {
    icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)&a1[v13 + 2155]);
    v13 -= 8LL;
  }

  while (v13 != -2160);
  icu::SharedObject::~SharedObject((icu::SharedObject *)a1);
}

void sub_18096CFBC(void *a1)
{
}

uint64_t sub_18096CFD0(uint64_t a1, int a2, unsigned int a3, int a4, int a5)
{
  if (a3 > 6) {
    return 0LL;
  }
LABEL_2:
  int v5 = a5;
  int v6 = a2;
  while (1)
  {
    uint64_t v7 = *(void *)(a1 + 1920LL * v6 + (qword_180A3C6A8[a3] << 7) + ((uint64_t)a4 << 6) + 8LL * a5 + 17304);
    if (v7) {
      return v7;
    }
    int v6 = *(_DWORD *)(a1 + 4LL * v6 + 23128);
    if (v6 == -1)
    {
      uint64_t v7 = 0LL;
      a5 = 5;
      if (v5 != 5) {
        goto LABEL_2;
      }
      return v7;
    }
  }

uint64_t sub_18096D044(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v64 = *MEMORY[0x1895F89C0];
  int v5 = *(char **)(a1 + 56);
  uint64_t v7 = ures_open(0LL, v5, a3);
  uint64_t v8 = 0LL;
  uint64_t v9 = (uint64_t *)*a3;
  int v10 = icu::UMemory::operator new(v9, (icu::UMemory *)0x5A70, v6);
  if (!v10)
  {
    uint64_t v8 = 0LL;
    *a3 = 7;
    goto LABEL_14;
  }

  uint64_t v11 = (uint64_t)v10;
  uint64_t v12 = sub_18096F814((uint64_t)v10);
  unsigned int v53 = &off_18972A3F0;
  __int128 v54 = 0uLL;
  *(void *)&__int128 v55 = v12;
  *(void *)(v12 + 23128) = -1LL;
  *(_DWORD *)(v12 + 23136) = -1;
  ures_getAllItemsWithFallback(v7, "fields", (uint64_t)&v53, a3);
  if (*a3 >= 1)
  {
    icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v53);
    uint64_t v8 = 0LL;
LABEL_13:
    (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
    goto LABEL_14;
  }

  uint64_t v37 = v11;
  memset(v60, 0, sizeof(v60));
  icu::Locale::Locale((uint64_t *)v60, (icu::Locale *)v60, v5, 0LL, 0LL, 0LL);
  bzero(v58, 0x4F8uLL);
  icu::DateFormatSymbols::DateFormatSymbols((icu::DateFormatSymbols *)v58, (icu::UnicodeString **)v60, (UErrorCode *)a3);
  if (*a3 <= 0)
  {
    uint64_t v13 = 0LL;
    uint64_t v14 = (UChar **)(v11 + 344);
    do
    {
      int v15 = dword_180A3C62C[v13];
      LODWORD(__s) = 0;
      uint64_t Weekdays = icu::DateFormatSymbols::getWeekdays(v58, &__s, 1, v15);
      uint64_t v17 = 64LL;
      uint64_t v18 = v14;
      do
      {
        icu::UnicodeString::fastCopyFrom(v18, (UChar **)(Weekdays + v17));
        v18 += 48;
        v17 += 64LL;
      }

      while (v17 != 512);
      ++v13;
      v14 += 720;
    }

    while (v13 != 3);
  }

  icu::DateFormatSymbols::~DateFormatSymbols((icu::DateFormatSymbols *)v58);
  icu::Locale::~Locale((icu::Locale *)v60);
  int v19 = *a3;
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v53);
  if (v19 > 0)
  {
    uint64_t v8 = 0LL;
    uint64_t v11 = v37;
    goto LABEL_13;
  }

  __int128 v54 = 0u;
  uint64_t v57 = 0LL;
  __int128 v56 = 0u;
  __int128 v55 = 0u;
  unsigned int v53 = off_18971B688;
  LOWORD(v54) = 2;
  icu::Locale::Locale((icu::Locale *)v52, a1 + 16);
  uint64_t v8 = v37;
  if (*a3 >= 1)
  {
    icu::Locale::~Locale((icu::Locale *)v52);
LABEL_19:
    uint64_t v11 = v37;
    uint64_t v8 = 0LL;
    goto LABEL_20;
  }

  char v63 = 0;
  __int128 __s = 0u;
  __int128 v62 = 0u;
  icu::Calendar::getCalendarTypeFromLocale( (icu::Calendar *)v52,  (const icu::Locale *)&__s,  (char *)0x20,  (UErrorCode *)a3,  v21);
  char v63 = 0;
  if (*a3 > 0 || !(_BYTE)__s)
  {
    *a3 = 0;
    strcpy((char *)&__s, "gregorian");
  }

  memset(&v58[1], 0, 48);
  uint64_t v59 = 0LL;
  v58[0] = (char *)&v58[1] + 5;
  LODWORD(v58[1]) = 40;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v49, "calendar/");
  BOOL v23 = icu::CharString::append((icu::CharString *)v58, v49, v50, (UErrorCode *)a3);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v47, (const char *)&__s);
  uint64_t v24 = icu::CharString::append(v23, v47, v48, (UErrorCode *)a3);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v45, "/DateTimePatterns%atTime");
  icu::CharString::append(v24, v45, v46, (UErrorCode *)a3);
  uint64_t v25 = ures_getByKeyWithFallback(v7, (char *)v58[0], 0LL, (UErrorCode *)a3);
  uint64_t v26 = v25;
  if (*a3 <= 0 && (int)ures_getSize(v25) > 3)
  {
    if (*a3 >= 1)
    {
      int v30 = 0;
      uint64_t v29 = v26;
      goto LABEL_39;
    }

    signed int v32 = 2;
    uint64_t v29 = v26;
  }

  else
  {
    *a3 = 0;
    LODWORD(v59) = 0;
    *(_BYTE *)v58[0] = 0;
    icu::StringPiece::StringPiece((icu::StringPiece *)&v43, "calendar/");
    uint64_t v27 = icu::CharString::append((icu::CharString *)v58, v43, v44, (UErrorCode *)a3);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v41, (const char *)&__s);
    unint64_t v28 = icu::CharString::append(v27, v41, v42, (UErrorCode *)a3);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v39, "/DateTimePatterns");
    icu::CharString::append(v28, v39, v40, (UErrorCode *)a3);
    uint64_t v29 = ures_getByKeyWithFallback(v7, (char *)v58[0], 0LL, (UErrorCode *)a3);
    if (v26) {
      ures_close(v26);
    }
    if (*a3 >= 1)
    {
      int v30 = 0;
      goto LABEL_39;
    }

    if ((int)ures_getSize(v29) <= 8)
    {
      unsigned int v38 = "{";
      int v30 = 1;
      icu::UnicodeString::UnicodeString(v60, 1LL, &v38);
      icu::UnicodeString::operator=((icu::UnicodeString *)&v53, (icu::UnicodeString *)v60);
      icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)v60);
      goto LABEL_39;
    }

    signed int v32 = 8;
  }

  int v51 = 0;
  StringByIndex = ures_getStringByIndex(v29, v32, &v51, a3);
  int v30 = 0;
  if (*a3 <= 0)
  {
    v60[0] = StringByIndex;
    int v30 = 1;
    icu::UnicodeString::setTo((icu::UnicodeString *)&v53, 1, v60, v51);
  }

void sub_18096D61C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(icu::SimpleFormatter **)(a1 + 23144);
  if (v4)
  {
    icu::SimpleFormatter::~SimpleFormatter(v4);
    icu::UMemory::operator delete(v5);
  }

  *(void *)(a1 + 23144) = a2;
}

void sub_18096D654(void **a1)
{
}

uint64_t icu::FormattedRelativeDateTime::FormattedRelativeDateTime(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)uint64_t result = off_18972A2C8;
  *(void *)(result + 8) = v2;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a2 + 8) = 0LL;
  *(_DWORD *)(a2 + 16) = 27;
  return result;
}

{
  uint64_t v2;
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)uint64_t result = off_18972A2C8;
  *(void *)(result + 8) = v2;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a2 + 8) = 0LL;
  *(_DWORD *)(a2 + 16) = 27;
  return result;
}

void icu::FormattedRelativeDateTime::~FormattedRelativeDateTime(icu::FormattedRelativeDateTime *this)
{
  *(void *)this = off_18972A2C8;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0LL;
  icu::FormattedValue::~FormattedValue(this);
}

{
  uint64_t v2;
  *(void *)this = off_18972A2C8;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0LL;
  icu::FormattedValue::~FormattedValue(this);
}

{
  uint64_t v2;
  void *v3;
  *(void *)this = off_18972A2C8;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0LL;
  icu::FormattedValue::~FormattedValue(this);
  icu::UMemory::operator delete(v3);
}

uint64_t icu::FormattedRelativeDateTime::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0LL;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 27;
  return a1;
}

void icu::FormattedRelativeDateTime::toString( icu::FormattedRelativeDateTime *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(int *)a2 >= 1)
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(void *)(a3 + 56) = 0LL;
    *(_OWORD *)(a3 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
LABEL_3:
    *(void *)a3 = off_18971B688;
    *(_WORD *)(a3 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
    return;
  }

  uint64_t v3 = *((void *)this + 1);
  if (!v3)
  {
    *a2 = *((UErrorCode *)this + 4);
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
    *(void *)(a3 + 56) = 0LL;
    goto LABEL_3;
  }

  (*(void (**)(void))(*(void *)v3 + 16LL))(*((void *)this + 1));
}

void icu::FormattedRelativeDateTime::toTempString( icu::FormattedRelativeDateTime *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(int *)a2 >= 1)
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(void *)(a3 + 56) = 0LL;
    *(_OWORD *)(a3 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
LABEL_3:
    *(void *)a3 = off_18971B688;
    *(_WORD *)(a3 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
    return;
  }

  uint64_t v3 = *((void *)this + 1);
  if (!v3)
  {
    *a2 = *((UErrorCode *)this + 4);
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
    *(void *)(a3 + 56) = 0LL;
    goto LABEL_3;
  }

  (*(void (**)(void))(*(void *)v3 + 24LL))(*((void *)this + 1));
}

icu::Appendable *icu::FormattedRelativeDateTime::appendTo( icu::FormattedRelativeDateTime *this, icu::Appendable *a2, UErrorCode *a3)
{
  uint64_t v4 = *((void *)this + 1);
  if (!v4)
  {
    *a3 = *((UErrorCode *)this + 4);
    return a2;
  }

  return (icu::Appendable *)(*(uint64_t (**)(void, icu::Appendable *))(*(void *)v4 + 32LL))( *((void *)this + 1),  a2);
}

uint64_t icu::FormattedRelativeDateTime::nextPosition( icu::FormattedRelativeDateTime *this, icu::ConstrainedFieldPosition *a2, UErrorCode *a3)
{
  uint64_t v4 = *((void *)this + 1);
  if (!v4)
  {
    *a3 = *((UErrorCode *)this + 4);
    return 0LL;
  }

  return (*(uint64_t (**)(void, icu::ConstrainedFieldPosition *))(*(void *)v4 + 40LL))( *((void *)this + 1),  a2);
}

icu::RelativeDateTimeFormatter *icu::RelativeDateTimeFormatter::RelativeDateTimeFormatter( icu::RelativeDateTimeFormatter *this, UErrorCode *a2)
{
  *(void *)this = off_18972A308;
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0LL;
  *((void *)this + 2) = 0LL;
  *((void *)this + 3) = 0LL;
  *((void *)this + 4) = 0x10000000000LL;
  *((void *)this + 5) = 0LL;
  icu::Locale::Locale((icu::RelativeDateTimeFormatter *)((char *)this + 48));
  icu::RelativeDateTimeFormatter::init(this, 0LL, 0LL, a2);
  return this;
}

{
  *(void *)this = off_18972A308;
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0LL;
  *((void *)this + 2) = 0LL;
  *((void *)this + 3) = 0LL;
  *((void *)this + 4) = 0x10000000000LL;
  *((void *)this + 5) = 0LL;
  icu::Locale::Locale((icu::RelativeDateTimeFormatter *)((char *)this + 48));
  icu::RelativeDateTimeFormatter::init(this, 0LL, 0LL, a2);
  return this;
}

void icu::RelativeDateTimeFormatter::init( icu::RelativeDateTimeFormatter *this, icu::NumberFormat *a2, icu::BreakIterator *a3, UErrorCode *a4)
{
  uint64_t v8 = (char *)this + 48;
  sub_18096EE80((uint64_t)this + 48, (UErrorCode *)this + 2, a4);
  if (*(int *)a4 > 0
    || (Shareduint64_t Instance = (icu::SharedObject *)icu::PluralRules::createSharedInstance((uint64_t)v8, 0, a4), *(int *)a4 > 0))
  {
LABEL_3:
    if (!a3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }

  int v10 = SharedInstance;
  sub_18085C214(SharedInstance, (icu::SharedObject **)this + 3);
  icu::SharedObject::removeRef(v10);
  if (a2)
  {
    uint64_t v13 = icu::UMemory::operator new(v12, (icu::UMemory *)0x20, v11);
    if (!v13)
    {
      *a4 = U_MEMORY_ALLOCATION_ERROR;
      goto LABEL_3;
    }

    *uint64_t v13 = (uint64_t)off_189728658;
    v13[1] = 0LL;
    v13[2] = 0LL;
    v13[3] = (uint64_t)a2;
    sub_18085C214((icu::SharedObject *)v13, (icu::SharedObject **)this + 2);
    if (a3)
    {
LABEL_10:
      BOOL v16 = icu::UMemory::operator new(v15, (icu::UMemory *)0x20, v14);
      if (v16)
      {
        uint64_t v17 = (icu::SharedObject *)icu::SharedBreakIterator::SharedBreakIterator(v16, a3);
        sub_18085C214(v17, (icu::SharedObject **)this + 5);
        return;
      }

      a2 = 0LL;
      *a4 = U_MEMORY_ALLOCATION_ERROR;
LABEL_4:
      (*(void (**)(icu::BreakIterator *))(*(void *)a3 + 8LL))(a3);
LABEL_5:
      if (a2) {
        (*(void (**)(icu::NumberFormat *))(*(void *)a2 + 8LL))(a2);
      }
      return;
    }
  }

  else
  {
    uint64_t v18 = (icu::SharedObject *)icu::NumberFormat::createSharedInstance((uint64_t)v8, 1, a4);
    int v19 = v18;
    sub_18085C214(v18, (icu::SharedObject **)this + 2);
    icu::SharedObject::removeRef(v19);
    if (a3) {
      goto LABEL_10;
    }
  }

  uint64_t v20 = (void *)*((void *)this + 5);
  if (v20)
  {
    icu::SharedObject::removeRef(v20);
    *((void *)this + 5) = 0LL;
  }

icu::RelativeDateTimeFormatter *icu::RelativeDateTimeFormatter::RelativeDateTimeFormatter( icu::RelativeDateTimeFormatter *this, const icu::Locale *a2, UErrorCode *a3)
{
  *(void *)this = off_18972A308;
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0LL;
  *((void *)this + 2) = 0LL;
  *((void *)this + 3) = 0LL;
  *((void *)this + 4) = 0x10000000000LL;
  *((void *)this + 5) = 0LL;
  icu::Locale::Locale((icu::RelativeDateTimeFormatter *)((char *)this + 48), (uint64_t)a2);
  icu::RelativeDateTimeFormatter::init(this, 0LL, 0LL, a3);
  return this;
}

{
  *(void *)this = off_18972A308;
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0LL;
  *((void *)this + 2) = 0LL;
  *((void *)this + 3) = 0LL;
  *((void *)this + 4) = 0x10000000000LL;
  *((void *)this + 5) = 0LL;
  icu::Locale::Locale((icu::RelativeDateTimeFormatter *)((char *)this + 48), (uint64_t)a2);
  icu::RelativeDateTimeFormatter::init(this, 0LL, 0LL, a3);
  return this;
}

icu::RelativeDateTimeFormatter *icu::RelativeDateTimeFormatter::RelativeDateTimeFormatter( icu::RelativeDateTimeFormatter *this, const icu::Locale *a2, icu::NumberFormat *a3, UErrorCode *a4)
{
  *(void *)this = off_18972A308;
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0LL;
  *((void *)this + 2) = 0LL;
  *((void *)this + 3) = 0LL;
  *((void *)this + 4) = 0x10000000000LL;
  *((void *)this + 5) = 0LL;
  icu::Locale::Locale((icu::RelativeDateTimeFormatter *)((char *)this + 48), (uint64_t)a2);
  icu::RelativeDateTimeFormatter::init(this, a3, 0LL, a4);
  return this;
}

{
  *(void *)this = off_18972A308;
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0LL;
  *((void *)this + 2) = 0LL;
  *((void *)this + 3) = 0LL;
  *((void *)this + 4) = 0x10000000000LL;
  *((void *)this + 5) = 0LL;
  icu::Locale::Locale((icu::RelativeDateTimeFormatter *)((char *)this + 48), (uint64_t)a2);
  icu::RelativeDateTimeFormatter::init(this, a3, 0LL, a4);
  return this;
}

uint64_t icu::RelativeDateTimeFormatter::RelativeDateTimeFormatter( uint64_t a1, char **a2, icu::NumberFormat *a3, unsigned int a4, int a5, const icu::Locale *a6)
{
  *(void *)a1 = off_18972A308;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(_DWORD *)(a1 + 32) = a4;
  *(_DWORD *)(a1 + 36) = a5;
  *(void *)(a1 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
  icu::Locale::Locale((icu::Locale *)(a1 + 48), (uint64_t)a2);
  if (*(int *)a6 <= 0)
  {
    if (a4 < 3 && (a5 & 0xFFFFFF00) == 0x100)
    {
      if (a5 != 258)
      {
        BOOL v16 = (icu::RelativeDateTimeFormatter *)a1;
        uint64_t v17 = a3;
        int v15 = 0LL;
        goto LABEL_10;
      }

      Sentenceuint64_t Instance = icu::BreakIterator::createSentenceInstance(a2, a6, v12, v13);
      if (*(int *)a6 <= 0)
      {
        int v15 = (icu::BreakIterator *)SentenceInstance;
        BOOL v16 = (icu::RelativeDateTimeFormatter *)a1;
        uint64_t v17 = a3;
LABEL_10:
        icu::RelativeDateTimeFormatter::init(v16, v17, v15, (UErrorCode *)a6);
      }
    }

    else
    {
      *(_DWORD *)a6 = 1;
    }
  }

  return a1;
}

void *icu::RelativeDateTimeFormatter::RelativeDateTimeFormatter(void *a1, uint64_t a2)
{
  *a1 = off_18972A308;
  *(_OWORD *)(a1 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = *(_OWORD *)(a2 + 8);
  a1[3] = *(void *)(a2 + 24);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = *(void *)(a2 + 40);
  icu::Locale::Locale((icu::Locale *)(a1 + 6), a2 + 48);
  icu::SharedObject::addRef(a1[1]);
  icu::SharedObject::addRef(a1[2]);
  icu::SharedObject::addRef(a1[3]);
  uint64_t v3 = a1[5];
  if (v3) {
    icu::SharedObject::addRef(v3);
  }
  return a1;
}

uint64_t icu::RelativeDateTimeFormatter::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_18085C214(*(icu::SharedObject **)(a2 + 8), (icu::SharedObject **)(a1 + 8));
    sub_18085C214(*(icu::SharedObject **)(a2 + 16), (icu::SharedObject **)(a1 + 16));
    sub_18085C214(*(icu::SharedObject **)(a2 + 24), (icu::SharedObject **)(a1 + 24));
    sub_18085C214(*(icu::SharedObject **)(a2 + 40), (icu::SharedObject **)(a1 + 40));
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    icu::Locale::operator=((icu::Locale *)(a1 + 48), a2 + 48);
  }

  return a1;
}

void icu::RelativeDateTimeFormatter::~RelativeDateTimeFormatter(icu::RelativeDateTimeFormatter *this)
{
  *(void *)this = off_18972A308;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2) {
    icu::SharedObject::removeRef(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3) {
    icu::SharedObject::removeRef(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 3);
  if (v4) {
    icu::SharedObject::removeRef(v4);
  }
  int v5 = (void *)*((void *)this + 5);
  if (v5) {
    icu::SharedObject::removeRef(v5);
  }
  icu::Locale::~Locale((icu::RelativeDateTimeFormatter *)((char *)this + 48));
  icu::UObject::~UObject(this);
}

{
  void *v1;
  icu::RelativeDateTimeFormatter::~RelativeDateTimeFormatter(this);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::RelativeDateTimeFormatter::getNumberFormat(icu::RelativeDateTimeFormatter *this)
{
  return *(void *)(*((void *)this + 2) + 24LL);
}

uint64_t icu::RelativeDateTimeFormatter::getCapitalizationContext(icu::RelativeDateTimeFormatter *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t icu::RelativeDateTimeFormatter::getFormatStyle(icu::RelativeDateTimeFormatter *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t icu::RelativeDateTimeFormatter::format( icu::RelativeDateTimeFormatter *a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, double a6)
{
  return sub_18096DF68( a1,  (void (*)(void *, uint64_t, uint64_t, _OWORD *, int *, double))icu::RelativeDateTimeFormatter::formatImpl,  0LL,  a4,  a5,  a2,  a3,  a6);
}

uint64_t sub_18096DF68( icu::RelativeDateTimeFormatter *a1, void (*a2)(void *, uint64_t, uint64_t, _OWORD *, int *, double), uint64_t a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7, double a8)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  memset(v21, 0, sizeof(v21));
  icu::FormattedValueStringBuilderImpl::FormattedValueStringBuilderImpl((uint64_t)v21, 65);
  *(void *)&v21[0] = &off_18972A380;
  BOOL v16 = (void *)((char *)a1 + (a3 >> 1));
  if ((a3 & 1) != 0) {
    a2 = *(void (**)(void *, uint64_t, uint64_t, _OWORD *, int *, double))(*v16 + a2);
  }
  a2(v16, a6, a7, v21, a5, a8);
  if (*a5 <= 0)
  {
    memset(v20, 0, sizeof(v20));
    icu::FormattedStringBuilder::toUnicodeString((icu::FormattedStringBuilder *)((char *)v21 + 8), (uint64_t)v20);
    icu::RelativeDateTimeFormatter::adjustForContext(a1, (icu::UnicodeString *)v20);
    if ((SWORD4(v20[0]) & 0x8000u) == 0) {
      uint64_t v17 = WORD4(v20[0]) >> 5;
    }
    else {
      uint64_t v17 = HIDWORD(v20[0]);
    }
    a4 = icu::UnicodeString::doAppend(a4, (const icu::UnicodeString *)v20, 0, v17);
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v20);
  }

  icu::FormattedValueStringBuilderImpl::~FormattedValueStringBuilderImpl((void **)v21);
  return a4;
}

void icu::RelativeDateTimeFormatter::formatImpl( uint64_t a1, int a2, unsigned int a3, uint64_t a4, UErrorCode *a5, double a6)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (*(int *)a5 <= 0)
  {
    if ((a2 & 0xFFFFFFFD) == 1)
    {
      int v16 = 0;
      int v10 = (icu::FormattedStringBuilder *)(a4 + 8);
      icu::QuantityFormatter::formatAndSelect( *(void **)(*(void *)(a1 + 16) + 24LL),  *(icu::PluralRules **)(*(void *)(a1 + 24) + 24LL),  (int *)(a4 + 8),  &v16,  a5,  a6);
      uint64_t v11 = sub_18096CFD0(*(void *)(a1 + 8), *(_DWORD *)(a1 + 32), a3, a2 == 3, v16);
      if (v11)
      {
        uint64_t v18 = 0LL;
        memset(v17, 0, sizeof(v17));
        icu::number::impl::SimpleModifier::SimpleModifier((uint64_t)v17, v11, 64, 0, v12, v13);
        int v14 = icu::FormattedStringBuilder::length(v10);
        icu::number::impl::SimpleModifier::formatAsPrefixSuffix( (icu::number::impl::SimpleModifier *)v17,  v10,  0,  v14,  a5);
        *(void *)&v17[0] = off_189727B38;
        icu::UnicodeString::~UnicodeString(off_189727B38, (icu::UnicodeString *)((char *)v17 + 8));
        icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)v17);
        return;
      }

      int v15 = 3;
    }

    else
    {
      int v15 = 1;
    }

    *a5 = v15;
  }

uint64_t *icu::RelativeDateTimeFormatter::formatToValue@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, UErrorCode *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  return sub_18096E240(a1, (unint64_t)icu::RelativeDateTimeFormatter::formatImpl, 0LL, a4, a2, a3, a5, a6);
}

uint64_t *sub_18096E240@<X0>( uint64_t *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, UErrorCode *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>)
{
  if (result[5])
  {
    UErrorCode v10 = U_UNSUPPORTED_ERROR;
    goto LABEL_3;
  }

  int v15 = (void (*)(void *, uint64_t, uint64_t, uint64_t *, UErrorCode *, double))a2;
  int v16 = result;
  uint64_t result = icu::UMemory::operator new(0LL, (icu::UMemory *)0x130, a2);
  if (!result)
  {
    UErrorCode v10 = *a4;
    UErrorCode v10 = U_MEMORY_ALLOCATION_ERROR;
LABEL_3:
    *a4 = v10;
LABEL_4:
    *(void *)a7 = off_18972A2C8;
    *(void *)(a7 + 8) = 0LL;
    *(_DWORD *)(a7 + 16) = v10;
    return result;
  }

  uint64_t v17 = result;
  *(void *)icu::FormattedValueStringBuilderImpl::FormattedValueStringBuilderImpl((uint64_t)result, 65) = &off_18972A380;
  UErrorCode v18 = *a4;
  if (*(int *)a4 <= 0)
  {
    uint64_t v19 = (uint64_t *)((char *)v16 + (a3 >> 1));
    if ((a3 & 1) != 0) {
      int v15 = *(void (**)(void *, uint64_t, uint64_t, uint64_t *, UErrorCode *, double))(*v19 + v15);
    }
    v15(v19, a5, a6, v17, a4, a8);
    uint64_t result = (uint64_t *)icu::FormattedStringBuilder::writeTerminator((icu::FormattedStringBuilder *)(v17 + 1), a4);
    *(void *)a7 = off_18972A2C8;
    *(void *)(a7 + 8) = v17;
    *(_DWORD *)(a7 + 16) = 0;
  }

  else
  {
    *(void *)a7 = off_18972A2C8;
    *(void *)(a7 + 8) = 0LL;
    *(_DWORD *)(a7 + 16) = v18;
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v17 + 8))(v17);
  }

  return result;
}

uint64_t icu::RelativeDateTimeFormatter::formatNumeric( icu::RelativeDateTimeFormatter *a1, uint64_t a2, uint64_t a3, int *a4, double a5)
{
  return sub_18096E398( a1,  (void (*)(void *, uint64_t, _OWORD *, int *, double))icu::RelativeDateTimeFormatter::formatNumericImpl,  0LL,  a3,  a4,  a2,  a5);
}

uint64_t sub_18096E398( icu::RelativeDateTimeFormatter *a1, void (*a2)(void *, uint64_t, _OWORD *, int *, double), uint64_t a3, uint64_t a4, int *a5, uint64_t a6, double a7)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  memset(v19, 0, sizeof(v19));
  icu::FormattedValueStringBuilderImpl::FormattedValueStringBuilderImpl((uint64_t)v19, 65);
  *(void *)&v19[0] = &off_18972A380;
  int v14 = (void *)((char *)a1 + (a3 >> 1));
  if ((a3 & 1) != 0) {
    a2 = *(void (**)(void *, uint64_t, _OWORD *, int *, double))(*v14 + a2);
  }
  a2(v14, a6, v19, a5, a7);
  if (*a5 <= 0)
  {
    memset(v18, 0, sizeof(v18));
    icu::FormattedStringBuilder::toUnicodeString((icu::FormattedStringBuilder *)((char *)v19 + 8), (uint64_t)v18);
    icu::RelativeDateTimeFormatter::adjustForContext(a1, (icu::UnicodeString *)v18);
    if ((SWORD4(v18[0]) & 0x8000u) == 0) {
      uint64_t v15 = WORD4(v18[0]) >> 5;
    }
    else {
      uint64_t v15 = HIDWORD(v18[0]);
    }
    a4 = icu::UnicodeString::doAppend(a4, (const icu::UnicodeString *)v18, 0, v15);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v18);
  }

  icu::FormattedValueStringBuilderImpl::~FormattedValueStringBuilderImpl((void **)v19);
  return a4;
}

void icu::RelativeDateTimeFormatter::formatNumericImpl( uint64_t a1, unsigned int a2, uint64_t a3, UErrorCode *a4, double a5)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (*(int *)a4 <= 0)
  {
    if (a2 >= 0xF)
    {
      int v7 = 1;
LABEL_4:
      *a4 = v7;
      return;
    }

    double v9 = a5;
    if (a5 < 0.0) {
      a5 = -a5;
    }
    int v19 = 0;
    UErrorCode v10 = (icu::FormattedStringBuilder *)(a3 + 8);
    icu::QuantityFormatter::formatAndSelect( *(void **)(*(void *)(a1 + 16) + 24LL),  *(icu::PluralRules **)(*(void *)(a1 + 24) + 24LL),  (int *)(a3 + 8),  &v19,  a4,  a5);
    if (*(int *)a4 <= 0)
    {
      uint64_t v13 = *(void *)(a1 + 8);
      int v14 = v19;
      while (2)
      {
        uint64_t v15 = v14;
        int v16 = *(_DWORD *)(a1 + 32);
        do
        {
          uint64_t v17 = *(void *)(v13
                          + 1920LL * v16
                          + ((unint64_t)a2 << 7)
                          + ((unint64_t)(v9 >= 0.0) << 6)
                          + 8 * v15
                          + 17304);
          if (v17)
          {
            uint64_t v21 = 0LL;
            memset(v20, 0, sizeof(v20));
            icu::number::impl::SimpleModifier::SimpleModifier((uint64_t)v20, v17, 64, 0, v11, v12);
            int v18 = icu::FormattedStringBuilder::length(v10);
            icu::number::impl::SimpleModifier::formatAsPrefixSuffix( (icu::number::impl::SimpleModifier *)v20,  v10,  0,  v18,  a4);
            *(void *)&v20[0] = off_189727B38;
            icu::UnicodeString::~UnicodeString(off_189727B38, (icu::UnicodeString *)((char *)v20 + 8));
            icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)v20);
            return;
          }

          int v16 = *(_DWORD *)(v13 + 4LL * v16 + 23128);
        }

        while (v16 != -1);
        int v14 = 5;
        if ((_DWORD)v15 != 5) {
          continue;
        }
        break;
      }

      int v7 = 3;
      goto LABEL_4;
    }
  }

uint64_t *icu::RelativeDateTimeFormatter::formatNumericToValue@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  return sub_18096E6AC(a1, (unint64_t)icu::RelativeDateTimeFormatter::formatNumericImpl, 0LL, a3, a2, a4, a5);
}

uint64_t *sub_18096E6AC@<X0>( uint64_t *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, UErrorCode *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  if (result[5])
  {
    UErrorCode v9 = U_UNSUPPORTED_ERROR;
    goto LABEL_3;
  }

  uint64_t v13 = (void (*)(void *, uint64_t, uint64_t *, UErrorCode *, double))a2;
  int v14 = result;
  uint64_t result = icu::UMemory::operator new(0LL, (icu::UMemory *)0x130, a2);
  if (!result)
  {
    UErrorCode v9 = *a4;
    UErrorCode v9 = U_MEMORY_ALLOCATION_ERROR;
LABEL_3:
    *a4 = v9;
LABEL_4:
    *(void *)a6 = off_18972A2C8;
    *(void *)(a6 + 8) = 0LL;
    *(_DWORD *)(a6 + 16) = v9;
    return result;
  }

  uint64_t v15 = result;
  *(void *)icu::FormattedValueStringBuilderImpl::FormattedValueStringBuilderImpl((uint64_t)result, 65) = &off_18972A380;
  UErrorCode v16 = *a4;
  if (*(int *)a4 <= 0)
  {
    uint64_t v17 = (uint64_t *)((char *)v14 + (a3 >> 1));
    if ((a3 & 1) != 0) {
      uint64_t v13 = *(void (**)(void *, uint64_t, uint64_t *, UErrorCode *, double))(*v17 + v13);
    }
    v13(v17, a5, v15, a4, a7);
    uint64_t result = (uint64_t *)icu::FormattedStringBuilder::writeTerminator((icu::FormattedStringBuilder *)(v15 + 1), a4);
    *(void *)a6 = off_18972A2C8;
    *(void *)(a6 + 8) = v15;
    *(_DWORD *)(a6 + 16) = 0;
  }

  else
  {
    *(void *)a6 = off_18972A2C8;
    *(void *)(a6 + 8) = 0LL;
    *(_DWORD *)(a6 + 16) = v16;
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v15 + 8))(v15);
  }

  return result;
}

uint64_t icu::RelativeDateTimeFormatter::format( icu::RelativeDateTimeFormatter *a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  return sub_18096E7F8( a1,  (void (*)(void *, uint64_t, uint64_t, _OWORD *, int *))icu::RelativeDateTimeFormatter::formatAbsoluteImpl,  0LL,  a4,  a5,  a2,  a3);
}

uint64_t sub_18096E7F8( icu::RelativeDateTimeFormatter *a1, void (*a2)(void *, uint64_t, uint64_t, _OWORD *, int *), uint64_t a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  memset(v19, 0, sizeof(v19));
  icu::FormattedValueStringBuilderImpl::FormattedValueStringBuilderImpl((uint64_t)v19, 65);
  *(void *)&v19[0] = &off_18972A380;
  int v14 = (void *)((char *)a1 + (a3 >> 1));
  if ((a3 & 1) != 0) {
    a2 = *(void (**)(void *, uint64_t, uint64_t, _OWORD *, int *))(*v14 + a2);
  }
  a2(v14, a6, a7, v19, a5);
  if (*a5 <= 0)
  {
    memset(v18, 0, sizeof(v18));
    icu::FormattedStringBuilder::toUnicodeString((icu::FormattedStringBuilder *)((char *)v19 + 8), (uint64_t)v18);
    icu::RelativeDateTimeFormatter::adjustForContext(a1, (icu::UnicodeString *)v18);
    if ((SWORD4(v18[0]) & 0x8000u) == 0) {
      uint64_t v15 = WORD4(v18[0]) >> 5;
    }
    else {
      uint64_t v15 = HIDWORD(v18[0]);
    }
    a4 = icu::UnicodeString::doAppend(a4, (const icu::UnicodeString *)v18, 0, v15);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v18);
  }

  icu::FormattedValueStringBuilderImpl::~FormattedValueStringBuilderImpl((void **)v19);
  return a4;
}

uint64_t icu::RelativeDateTimeFormatter::formatAbsoluteImpl( uint64_t result, unsigned int a2, unsigned int a3, uint64_t a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    if (a2 <= 5 && a3 <= 0xE && (a2 == 5 || a3 != 11))
    {
      uint64_t v5 = *(void *)(result + 8);
      int v6 = *(_DWORD *)(result + 32);
      while (*(unsigned __int16 *)(v5 + 5760LL * v6 + 384LL * a3 + ((unint64_t)a2 << 6) + 32) <= 0x1Fu)
      {
        int v6 = *(_DWORD *)(v5 + 4LL * v6 + 23128);
        if (v6 == -1)
        {
          uint64_t v7 = v5 + 23064;
          return icu::FormattedStringBuilder::insert( (icu::FormattedStringBuilder *)(a4 + 8),  *(_DWORD *)(a4 + 140),  v7,  64,  0,  a5);
        }
      }

      uint64_t v7 = v5 + 5760LL * v6 + 384LL * a3 + ((unint64_t)a2 << 6) + 24;
      return icu::FormattedStringBuilder::insert( (icu::FormattedStringBuilder *)(a4 + 8),  *(_DWORD *)(a4 + 140),  v7,  64,  0,  a5);
    }

    else
    {
      *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }

  return result;
}

uint64_t *icu::RelativeDateTimeFormatter::formatToValue@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, UErrorCode *a4@<X3>, uint64_t a5@<X8>)
{
  return sub_18096EA30(a1, (unint64_t)icu::RelativeDateTimeFormatter::formatAbsoluteImpl, 0LL, a4, a2, a3, a5);
}

uint64_t *sub_18096EA30@<X0>( uint64_t *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, UErrorCode *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  if (result[5])
  {
    UErrorCode v9 = U_UNSUPPORTED_ERROR;
    goto LABEL_3;
  }

  uint64_t v13 = (void (*)(void *, uint64_t, uint64_t, uint64_t *, UErrorCode *))a2;
  int v14 = result;
  uint64_t result = icu::UMemory::operator new(0LL, (icu::UMemory *)0x130, a2);
  if (!result)
  {
    UErrorCode v9 = *a4;
    UErrorCode v9 = U_MEMORY_ALLOCATION_ERROR;
LABEL_3:
    *a4 = v9;
LABEL_4:
    *(void *)a7 = off_18972A2C8;
    *(void *)(a7 + 8) = 0LL;
    *(_DWORD *)(a7 + 16) = v9;
    return result;
  }

  uint64_t v15 = result;
  *(void *)icu::FormattedValueStringBuilderImpl::FormattedValueStringBuilderImpl((uint64_t)result, 65) = &off_18972A380;
  UErrorCode v16 = *a4;
  if (*(int *)a4 <= 0)
  {
    uint64_t v17 = (uint64_t *)((char *)v14 + (a3 >> 1));
    if ((a3 & 1) != 0) {
      uint64_t v13 = *(void (**)(void *, uint64_t, uint64_t, uint64_t *, UErrorCode *))(*v17 + v13);
    }
    v13(v17, a5, a6, v15, a4);
    uint64_t result = (uint64_t *)icu::FormattedStringBuilder::writeTerminator((icu::FormattedStringBuilder *)(v15 + 1), a4);
    *(void *)a7 = off_18972A2C8;
    *(void *)(a7 + 8) = v15;
    *(_DWORD *)(a7 + 16) = 0;
  }

  else
  {
    *(void *)a7 = off_18972A2C8;
    *(void *)(a7 + 8) = 0LL;
    *(_DWORD *)(a7 + 16) = v16;
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v15 + 8))(v15);
  }

  return result;
}

uint64_t icu::RelativeDateTimeFormatter::format( icu::RelativeDateTimeFormatter *a1, uint64_t a2, uint64_t a3, int *a4, double a5)
{
  return sub_18096E398( a1,  (void (*)(void *, uint64_t, _OWORD *, int *, double))icu::RelativeDateTimeFormatter::formatRelativeImpl,  0LL,  a3,  a4,  a2,  a5);
}

void icu::RelativeDateTimeFormatter::formatRelativeImpl( uint64_t a1, unsigned int a2, uint64_t a3, UErrorCode *a4, double a5)
{
  if (*(int *)a4 <= 0)
  {
    char v10 = 0;
    unsigned int v11 = 6;
    char v12 = 1;
    if (a5 > -2.1 && a5 < 2.1)
    {
      char v10 = 0;
      double v13 = 0.5;
      if (a5 * 100.0 < 0.0) {
        double v13 = -0.5;
      }
      int v14 = (int)(a5 * 100.0 + v13);
      char v12 = 1;
      if (v14 < 0)
      {
        if (v14 == -200)
        {
          char v10 = 0;
          char v12 = 0;
          unsigned int v11 = 0;
        }

        else if (v14 == -100)
        {
          char v10 = 0;
          char v12 = 0;
          unsigned int v11 = 1;
        }
      }

      else if (v14)
      {
        if (v14 == 100)
        {
          char v10 = 0;
          char v12 = 0;
          unsigned int v11 = 3;
        }

        else if (v14 == 200)
        {
          char v10 = 0;
          char v12 = 0;
          unsigned int v11 = 4;
        }
      }

      else
      {
        char v12 = 0;
        unsigned int v11 = 2;
        char v10 = 1;
      }
    }

    unsigned int v15 = 10;
    switch(a2)
    {
      case 0u:
        goto LABEL_44;
      case 1u:
        unsigned int v15 = 12;
        if ((v12 & 1) != 0) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 2u:
        unsigned int v15 = 9;
        if ((v12 & 1) != 0) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 3u:
        unsigned int v15 = 8;
        if ((v12 & 1) != 0) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 4u:
        unsigned int v15 = 7;
        if ((v12 & 1) != 0) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 5u:
        unsigned int v15 = 13;
        if ((v12 & 1) != 0) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 6u:
        unsigned int v15 = 14;
        if ((v12 & 1) != 0) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 7u:
        if ((v10 & 1) == 0) {
          goto LABEL_46;
        }
        unsigned int v11 = 5;
        unsigned int v15 = 11;
LABEL_45:
        icu::RelativeDateTimeFormatter::formatAbsoluteImpl(a1, v11, v15, a3, a4);
        if (!icu::FormattedStringBuilder::length((icu::FormattedStringBuilder *)(a3 + 8))) {
LABEL_46:
        }
          icu::RelativeDateTimeFormatter::formatNumericImpl(a1, a2, a3, a4, a5);
        break;
      case 8u:
        unsigned int v15 = 0;
        if ((v12 & 1) != 0) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 9u:
        unsigned int v15 = 1;
        if ((v12 & 1) != 0) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 0xAu:
        unsigned int v15 = 2;
LABEL_44:
        if ((v12 & 1) == 0) {
          goto LABEL_45;
        }
        goto LABEL_46;
      case 0xBu:
        unsigned int v15 = 3;
        if ((v12 & 1) != 0) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 0xCu:
        unsigned int v15 = 4;
        if ((v12 & 1) != 0) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 0xDu:
        unsigned int v15 = 5;
        if ((v12 & 1) != 0) {
          goto LABEL_46;
        }
        goto LABEL_45;
      case 0xEu:
        unsigned int v15 = 6;
        if ((v12 & 1) != 0) {
          goto LABEL_46;
        }
        goto LABEL_45;
      default:
        goto LABEL_46;
    }
  }

uint64_t *icu::RelativeDateTimeFormatter::formatToValue@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  return sub_18096E6AC(a1, (unint64_t)icu::RelativeDateTimeFormatter::formatRelativeImpl, 0LL, a3, a2, a4, a5);
}

icu::UnicodeString *icu::RelativeDateTimeFormatter::combineDateAndTime( icu::RelativeDateTimeFormatter *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3, icu::UnicodeString *a4, UErrorCode *a5)
{
  return icu::SimpleFormatter::format(*(icu::SimpleFormatter **)(*((void *)this + 1) + 23144LL), a3, a2, a4, a5);
}

icu::UnicodeString *icu::RelativeDateTimeFormatter::adjustForContext( icu::RelativeDateTimeFormatter *this, icu::UnicodeString *a2)
{
  if (*((void *)this + 5))
  {
    unsigned int v3 = *((unsigned __int16 *)a2 + 4);
    int v4 = (__int16)v3;
    LODWORD(v5) = v3 >> 5;
    if (v4 >= 0) {
      unint64_t v5 = v5;
    }
    else {
      unint64_t v5 = *((unsigned int *)a2 + 3);
    }
    if ((_DWORD)v5)
    {
      UChar32 v7 = icu::UnicodeString::char32At((uint64_t *)v5, a2, 0);
      if (u_islower(v7))
      {
        umtx_lock((icu::UMutex *)&unk_18C535828);
        icu::UnicodeString::toTitle( (const UChar **)a2,  *(icu::BreakIterator **)(*((void *)this + 5) + 24LL),  (icu::RelativeDateTimeFormatter *)((char *)this + 48),  768LL);
        umtx_unlock((std::mutex **)&unk_18C535828);
      }
    }
  }

  return a2;
}

uint64_t icu::RelativeDateTimeFormatter::checkNoAdjustForContext( icu::RelativeDateTimeFormatter *this, UErrorCode *a2)
{
  if (!*((void *)this + 5)) {
    return 1LL;
  }
  uint64_t result = 0LL;
  *a2 = U_UNSUPPORTED_ERROR;
  return result;
}

void sub_18096EE80(uint64_t a1, UErrorCode *a2, UErrorCode *this)
{
  v11[28] = *MEMORY[0x1895F89C0];
  uint64_t Instance = icu::UnifiedCache::getInstance(this, a2);
  if (*(int *)this <= 0)
  {
    UChar32 v7 = (icu::SharedObject **)Instance;
    int v9 = 0;
    char v10 = 0;
    uint64_t v8 = off_18972A438;
    icu::Locale::Locale((icu::Locale *)v11, a1);
    sub_18089E200(v7, (const icu::CacheKeyBase *)&v8, 0LL, (icu::SharedObject **)a2, this);
    uint64_t v8 = off_18972A438;
    icu::Locale::~Locale((icu::Locale *)v11);
    icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)&v8);
  }

uint64_t sub_18096EF5C(uint64_t a1)
{
  *(void *)(a1 + 24) = off_18972A2C8;
  uint64_t v2 = (icu::FormattedValue *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  *(void *)(a1 + 32) = 0LL;
  icu::FormattedValue::~FormattedValue(v2);
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)a1 = 0;
  return a1;
}

uint64_t ureldatefmt_openResult(int *a1, unint64_t a2)
{
  if (*a1 > 0) {
    return 0LL;
  }
  uint64_t result = icu::UMemory::operator new((icu::UMemory *)0x30, a2);
  if (result)
  {
    *(_DWORD *)uint64_t result = 1430672896;
    *(_DWORD *)(result + 16) = 1179796564;
    *(void *)(result + 24) = off_18972A2C8;
    *(void *)(result + 32) = 0LL;
    *(_DWORD *)(result + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 27;
    *(void *)(result + 8) = result + 24;
  }

  else
  {
    *a1 = 7;
  }

  return result;
}

uint64_t ureldatefmt_resultAsValue(uint64_t result, int *a2)
{
  int v2 = *a2;
  if (*a2 > 0)
  {
    uint64_t result = 0LL;
    goto LABEL_8;
  }

  if (result)
  {
    if (*(_DWORD *)(result + 16) == 1179796564) {
      goto LABEL_8;
    }
    int v2 = 3;
  }

  else
  {
    int v2 = 1;
  }

  uint64_t result = 0LL;
  *a2 = v2;
LABEL_8:
  if (v2 >= 1) {
    return 0LL;
  }
  return result;
}

void ureldatefmt_closeResult(uint64_t a1)
{
  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1179796564)
    {
      uint64_t v1 = (void *)sub_18096EF5C(a1);
      icu::UMemory::operator delete(v1);
    }
  }

uint64_t ureldatefmt_open( const char *a1, icu::NumberFormat *a2, unsigned int a3, int a4, const icu::Locale *a5)
{
  v15[28] = *(char **)MEMORY[0x1895F89C0];
  unint64_t v5 = (uint64_t *)*(unsigned int *)a5;
  if ((int)v5 <= 0)
  {
    double v13 = icu::UMemory::operator new(v5, (icu::UMemory *)0x110, (unint64_t)a2);
    if (v13)
    {
      uint64_t v6 = (uint64_t)v13;
      icu::Locale::Locale(v14, (icu::Locale *)v15, a1, 0LL, 0LL, 0LL);
      icu::RelativeDateTimeFormatter::RelativeDateTimeFormatter(v6, v15, a2, a3, a4, a5);
      icu::Locale::~Locale((icu::Locale *)v15);
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }

    else if (*(int *)a5 <= 0)
    {
      uint64_t v6 = 0LL;
      *(_DWORD *)a5 = 7;
      return v6;
    }
  }

  return 0LL;
}

uint64_t ureldatefmt_close(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

uint64_t ureldatefmt_formatNumeric( icu::RelativeDateTimeFormatter *a1, uint64_t a2, char *a3, unsigned int a4, int *a5, double a6)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (*a5 > 0) {
    return 0LL;
  }
  if (!a3)
  {
    if (!a4)
    {
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      uint64_t v21 = 0LL;
      __int128 v20 = 0u;
      uint64_t v17 = off_18971B688;
      LOWORD(v18) = 2;
      goto LABEL_9;
    }

void ureldatefmt_formatNumericToResult(uint64_t *a1, uint64_t a2, uint64_t a3, UErrorCode *a4, double a5)
{
  uint64_t v5 = a3;
  if (!a3)
  {
    int v6 = 1;
    goto LABEL_6;
  }

  if (*(_DWORD *)(a3 + 16) != 1179796564)
  {
    int v6 = 3;
LABEL_6:
    uint64_t v5 = 0LL;
    *a4 = v6;
  }

  sub_18096E6AC(a1, (unint64_t)icu::RelativeDateTimeFormatter::formatNumericImpl, 0LL, a4, a2, (uint64_t)&v8, a5);
  uint64_t v7 = *(void *)(v5 + 32);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  *(void *)(v5 + 32) = v9;
  *(_DWORD *)(v5 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v10;
  int v10 = 27;
  uint64_t v8 = off_18972A2C8;
  uint64_t v9 = 0LL;
  icu::FormattedValue::~FormattedValue((icu::FormattedValue *)&v8);
}

uint64_t ureldatefmt_format( icu::RelativeDateTimeFormatter *a1, uint64_t a2, char *a3, unsigned int a4, int *a5, double a6)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (*a5 > 0) {
    return 0LL;
  }
  if (!a3)
  {
    if (!a4)
    {
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      uint64_t v21 = 0LL;
      __int128 v20 = 0u;
      uint64_t v17 = off_18971B688;
      LOWORD(v18) = 2;
      goto LABEL_9;
    }

void ureldatefmt_formatToResult(uint64_t *a1, uint64_t a2, uint64_t a3, UErrorCode *a4, double a5)
{
  uint64_t v5 = a3;
  if (!a3)
  {
    int v6 = 1;
    goto LABEL_6;
  }

  if (*(_DWORD *)(a3 + 16) != 1179796564)
  {
    int v6 = 3;
LABEL_6:
    uint64_t v5 = 0LL;
    *a4 = v6;
  }

  sub_18096E6AC(a1, (unint64_t)icu::RelativeDateTimeFormatter::formatRelativeImpl, 0LL, a4, a2, (uint64_t)&v8, a5);
  uint64_t v7 = *(void *)(v5 + 32);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
  }
  *(void *)(v5 + 32) = v9;
  *(_DWORD *)(v5 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v10;
  int v10 = 27;
  uint64_t v8 = off_18972A2C8;
  uint64_t v9 = 0LL;
  icu::FormattedValue::~FormattedValue((icu::FormattedValue *)&v8);
}

uint64_t ureldatefmt_combineDateAndTime( uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, UChar *a6, uint64_t a7, UErrorCode *a8)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  if (!a6)
  {
    if (!(_DWORD)a7) {
      goto LABEL_13;
    }
    goto LABEL_17;
  }

  if ((a7 & 0x80000000) != 0) {
    goto LABEL_17;
  }
  if (a2)
  {
    if (a3 < -1) {
      goto LABEL_17;
    }
  }

  else if (a3)
  {
    goto LABEL_17;
  }

  if (!a4)
  {
    if (!a5) {
      goto LABEL_13;
    }
LABEL_17:
    uint64_t v8 = 0LL;
    *a8 = U_ILLEGAL_ARGUMENT_ERROR;
    return v8;
  }

  if (a5 <= -2) {
    goto LABEL_17;
  }
LABEL_13:
  memset(v25, 0, sizeof(v25));
  uint64_t v22 = a2;
  icu::UnicodeString::UnicodeString(v25, a3 == -1, &v22);
  void v19[2] = v22;
  memset(v24, 0, sizeof(v24));
  uint64_t v21 = a4;
  icu::UnicodeString::UnicodeString(v24, a5 == -1, &v21);
  v19[1] = v21;
  memset(v23, 0, sizeof(v23));
  icu::UnicodeString::UnicodeString(v23, a6, 0LL, a7);
  icu::SimpleFormatter::format( *(icu::SimpleFormatter **)(*(void *)(a1 + 8) + 23144LL),  (const icu::UnicodeString *)v24,  (const icu::UnicodeString *)v25,  (icu::UnicodeString *)v23,  a8);
  uint64_t v8 = 0LL;
  unsigned int v15 = (void *)*(unsigned int *)a8;
  if ((int)v15 <= 0)
  {
    __int128 v20 = a6;
    uint64_t v8 = icu::UnicodeString::extract((uint64_t)v23, &v20, a7, (int *)a8);
    v19[0] = v20;
    unsigned int v15 = v19;
  }

  icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v23);
  icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v24);
  icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v25);
  return v8;
}

uint64_t sub_18096F814(uint64_t result)
{
  *(void *)(result + 8) = 0LL;
  *(void *)(result + 16) = 0LL;
  *(void *)uint64_t result = off_18972A2A0;
  uint64_t v1 = 24LL;
  do
  {
    uint64_t v2 = result + v1;
    *(void *)uint64_t v2 = off_18971B688;
    *(_WORD *)(v2 + 8) = 2;
    v1 += 64LL;
  }

  while (v2 + 64 != result + 17304);
  uint64_t v3 = 0LL;
  *(void *)(result + 23064) = off_18971B688;
  *(_WORD *)(result + 23072) = 2;
  *(void *)(result + 23144) = 0LL;
  int v4 = (_OWORD *)(result + 17368);
  do
  {
    uint64_t v5 = 0LL;
    int v6 = v4;
    do
    {
      uint64_t v7 = 8LL;
      uint64_t v8 = v6;
      do
      {
        *(v8 - 4) = 0uLL;
        *v8++ = 0uLL;
        v7 -= 2LL;
      }

      while (v7);
      ++v5;
      v6 += 8;
    }

    while (v5 != 15);
    ++v3;
    v4 += 120;
  }

  while (v3 != 3);
  *(void *)(result + 23128) = -1LL;
  *(_DWORD *)(result + 23136) = -1;
  return result;
}

void sub_18096F8E4(icu::ResourceSink *a1)
{
}

void *sub_18096F8F8(uint64_t a1, char *a2, icu::ResourceValue *a3, uint64_t a4, int *a5)
{
  uint64_t v5 = a5;
  v80[9] = *(UChar **)MEMORY[0x1895F89C0];
  uint64_t v67 = 0LL;
  int v68 = a2;
  memset(v66, 0, sizeof(v66));
  uint64_t result = (*(void *(**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(void *)a3 + 88LL))( v66,  a3,  a5);
  if (*v5 <= 0)
  {
    uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v66, 0, (const char **)&v68, a3);
    if ((_DWORD)result)
    {
      int v9 = 0;
      __int128 v62 = (UErrorCode *)v5;
      while (1)
      {
        int v10 = (*(uint64_t (**)(icu::ResourceValue *))(*(void *)a3 + 24LL))(a3);
        unsigned int v11 = v68;
        if (v10 != 3) {
          break;
        }
        unsigned int v12 = sub_1809703F4(v68);
        memset(v80, 0, 64);
        LODWORD(v72[0]) = 0;
        *(void *)&__int128 v77 = (*(uint64_t (**)(icu::ResourceValue *, void *, int *))(*(void *)a3 + 40LL))( a3,  v72,  v5);
        icu::UnicodeString::UnicodeString(v80, 1LL, &v77);
        v65[1] = v77;
        uint64_t v13 = *v5;
        if ((int)v13 <= 0)
        {
          int v14 = icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v77, v80);
          int v15 = WORD4(v77) >> 5;
          if (SWORD4(v77) < 0) {
            int v15 = HIDWORD(v77);
          }
          BOOL v16 = icu::UnicodeString::doEqualsSubstring((uint64_t)v14, v15 - 7, 7, (uint64_t)L"-narrow-short", 0, 7);
          v65[0] = L"-narrow-short";
          uint64_t v17 = (__int16 **)v65;
          if (v16)
          {
            int v18 = 2;
          }

          else
          {
            int v23 = WORD4(v77) >> 5;
            if (SWORD4(v77) < 0) {
              int v23 = HIDWORD(v77);
            }
            int v18 = icu::UnicodeString::doEqualsSubstring((uint64_t)&v77, v23 - 6, 6, (uint64_t)L"-short", 0, 6);
            uint64_t v64 = L"-short";
            uint64_t v17 = &v64;
          }

          icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v77);
          if (v12 != v18
            && ((uint64_t v13 = *(void *)(a1 + 24) + 4LL * v12 + 23128, *(_DWORD *)v13 != -1)
              ? (BOOL v24 = *(_DWORD *)v13 == v18)
              : (BOOL v24 = 1),
                v24))
          {
            *(_DWORD *)uint64_t v13 = v18;
            uint64_t v5 = (int *)v62;
          }

          else
          {
            uint64_t v5 = (int *)v62;
            uint64_t v13 = 3LL;
            *__int128 v62 = U_INVALID_FORMAT_ERROR;
          }
        }

        icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v80);
LABEL_60:
        uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v66, ++v9, (const char **)&v68, a3);
        if (!(_DWORD)result) {
          return result;
        }
      }

      int v19 = sub_1809703F4(v68);
      *(_DWORD *)(a1 + 12) = v19;
      int v20 = strlen(v11);
      if (v19 == 1) {
        int v21 = -6;
      }
      else {
        int v21 = 0;
      }
      if (v19 == 2) {
        int v21 = -7;
      }
      switch(v21 + v20)
      {
        case 3:
          int v22 = 3;
          if (!strncmp(v11, "day", 3uLL)) {
            goto LABEL_59;
          }
          if (!strncmp(v11, "sun", 3uLL))
          {
            int v22 = 8;
          }

          else if (!strncmp(v11, "mon", 3uLL))
          {
            int v22 = 9;
          }

          else if (!strncmp(v11, "tue", 3uLL))
          {
            int v22 = 10;
          }

          else if (!strncmp(v11, "wed", 3uLL))
          {
            int v22 = 11;
          }

          else if (!strncmp(v11, "thu", 3uLL))
          {
            int v22 = 12;
          }

          else if (!strncmp(v11, "fri", 3uLL))
          {
            int v22 = 13;
          }

          else
          {
            if (strncmp(v11, "sat", 3uLL)) {
              goto LABEL_36;
            }
            int v22 = 14;
          }

          goto LABEL_59;
        case 4:
          if (!strncmp(v11, "hour", 4uLL))
          {
            int v22 = 2;
            goto LABEL_59;
          }

          int v22 = 4;
          if (!strncmp(v11, "week", 4uLL)) {
            goto LABEL_59;
          }
          if (!strncmp(v11, "year", 4uLL))
          {
            int v22 = 7;
            goto LABEL_59;
          }

          goto LABEL_36;
        case 5:
          int v22 = 5;
          if (!strncmp(v11, "month", 5uLL)) {
            goto LABEL_59;
          }
          goto LABEL_36;
        case 6:
          if (!strncmp(v11, "minute", 6uLL))
          {
            int v22 = 1;
          }

          else
          {
            if (strncmp(v11, "second", 6uLL))
            {
LABEL_36:
              *(_DWORD *)(a1 + 16) = -1;
              goto LABEL_60;
            }

            int v22 = 0;
          }

uint64_t sub_1809703F4(const char *a1)
{
  int v2 = strlen(a1);
  int v3 = v2;
  if (v2 < 7)
  {
    if (v2 != 6) {
      return 0LL;
    }
  }

  else if (!strcmp(&a1[v2 - 7], "-narrow"))
  {
    return 2LL;
  }

  return !strcmp(&a1[v3 - 6], "-short");
}

uint64_t sub_180970470(int a1)
{
  else {
    return dword_180A3C6E0[a1 - 1];
  }
}

uint64_t sub_180970494(unsigned int a1)
{
  if (a1 > 0xE) {
    return 0xFFFFFFFFLL;
  }
  else {
    return dword_180A3C718[a1];
  }
}

void sub_1809704B4(uint64_t a1)
{
  *(void *)a1 = off_18972A438;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));
  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);
}

void sub_1809704E4(uint64_t a1)
{
  *(void *)a1 = off_18972A438;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));
  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);
  icu::UMemory::operator delete(v2);
}

uint64_t sub_180970518(uint64_t a1)
{
  int v2 = strlen((const char *)((unint64_t)"N3icu25RelativeDateTimeCacheDataE" & 0x7FFFFFFFFFFFFFFFLL));
  unsigned int v3 = ustr_hashCharsN( (unsigned __int8 *)((unint64_t)"N3icu25RelativeDateTimeCacheDataE" & 0x7FFFFFFFFFFFFFFFLL),  v2);
  return icu::Locale::hashCode((icu::Locale *)(a1 + 16)) + 37 * v3;
}

uint64_t *sub_180970570@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0xF0, a2);
  uint64_t v5 = v4;
  if (v4)
  {
    *((_DWORD *)v4 + 2) = *(_DWORD *)(a1 + 8);
    *((_BYTE *)v4 + 12) = 0;
    *int v4 = (uint64_t)off_18972A438;
    icu::Locale::Locale((icu::Locale *)(v4 + 2), a1 + 16);
  }

  return v5;
}

char *sub_1809705C4(uint64_t a1, char *__dst, int a3)
{
  uint64_t result = strncpy(__dst, *(const char **)(a1 + 56), a3);
  __dst[a3 - 1] = 0;
  return result;
}

BOOL sub_1809705FC(void *a1, void *a2)
{
  BOOL result = sub_18089E3E8(a1, a2);
  if (result) {
    return icu::Locale::operator==((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  }
  return result;
}

void *icu::RelativeDateFormat::getStaticClassID(icu::RelativeDateFormat *this)
{
  return &unk_18C535878;
}

void *sub_180970644()
{
  return &unk_18C535878;
}

uint64_t sub_180970650(uint64_t a1, uint64_t a2)
{
  int v4 = icu::DateFormat::DateFormat((icu::DateFormat *)a1, (const icu::DateFormat *)a2);
  *int v4 = off_18972A4B8;
  v4[44] = 0LL;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v4 + 45), (UChar **)(a2 + 360));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 424), (UChar **)(a2 + 424));
  *(void *)(a1 + 488) = 0LL;
  *(_DWORD *)(a1 + 496) = *(_DWORD *)(a2 + 496);
  icu::Locale::Locale((icu::Locale *)(a1 + 504), a2 + 504);
  *(_DWORD *)(a1 + 728) = *(_DWORD *)(a2 + 728);
  *(void *)(a1 + 736) = 0LL;
  *(_DWORD *)(a1 + 744) = *(_DWORD *)(a2 + 744);
  *(void *)(a1 + 752) = 0LL;
  uint64_t v6 = *(void *)(a2 + 352);
  if (v6) {
    *(void *)(a1 + 352) = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 32LL))(v6);
  }
  uint64_t v7 = *(uint64_t **)(a2 + 488);
  if (v7)
  {
    uint64_t v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0x48, v5);
    int v9 = v8;
    if (v8) {
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v8 + 1), (UChar **)(*(void *)(a2 + 488) + 8LL));
    }
    *(void *)(a1 + 488) = v9;
  }

  uint64_t v10 = *(unsigned int *)(a1 + 728);
  if ((int)v10 >= 1)
  {
    unsigned int v11 = uprv_malloc(16 * v10);
    *(void *)(a1 + 736) = v11;
    memcpy(v11, *(const void **)(a2 + 736), 16LL * *(int *)(a1 + 728));
  }

  uint64_t v12 = *(void *)(a2 + 752);
  if (v12) {
    *(void *)(a1 + 752) = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 32LL))(v12);
  }
  return a1;
}

uint64_t sub_18097075C(uint64_t a1, uint64_t a2, int a3, const icu::Locale *a4, UErrorCode *a5)
{
  uint64_t v10 = icu::DateFormat::DateFormat((icu::DateFormat *)a1);
  void *v10 = off_18972A4B8;
  v10[44] = 0LL;
  v10[45] = off_18971B688;
  *((_WORD *)v10 + 184) = 2;
  v10[53] = off_18971B688;
  *((_WORD *)v10 + 216) = 2;
  v10[61] = 0LL;
  *((_DWORD *)v10 + 124) = a3;
  icu::Locale::Locale((icu::Locale *)(v10 + 63), (uint64_t)a4);
  *(_DWORD *)(a1 + 728) = 0;
  *(void *)(a1 + 752) = 0LL;
  *(void *)(a1 + 736) = 0LL;
  *(_DWORD *)(a1 + 744) = 0;
  if ((a3 - 132) <= 0xFFFFFFFB || (a2 - 4) <= 0xFFFFFFFA)
  {
    int v11 = 1;
LABEL_5:
    *a5 = v11;
    return a1;
  }

  Dateuint64_t Instance = icu::DateFormat::createDateInstance(a3 & 0xFFFFFF7F, a4);
  if (!DateInstance)
  {
    *(void *)(a1 + 352) = 0LL;
    goto LABEL_15;
  }

  *(void *)(a1 + 352) = v14;
  if (!v14)
  {
LABEL_15:
    int v11 = 16;
    goto LABEL_5;
  }

  (*(void (**)(void *, uint64_t))(*(void *)v14 + 240LL))(v14, a1 + 360);
  if ((_DWORD)a2 != -1)
  {
    Timeuint64_t Instance = icu::DateFormat::createTimeInstance(a2, a4);
    if (TimeInstance)
    {
      if (v16)
      {
        uint64_t v17 = v16;
        (*(void (**)(void *, uint64_t))(*(void *)v16 + 240LL))(v16, a1 + 424);
        (*(void (**)(void *))(*(void *)v17 + 8LL))(v17);
      }
    }
  }

  sub_1809708E4((icu::TimeZone *)a1, 0LL, a4, a5);
  sub_18097095C(a1, (int *)a5);
  return a1;
}

uint64_t sub_1809708E4(icu::TimeZone *a1, icu::Calendar *this, icu::TimeZone *a3, UErrorCode *a4)
{
  if (!this) {
    this = (icu::Calendar *)icu::TimeZone::createDefault(a1);
  }
  uint64_t result = icu::Calendar::createInstance(this, a3, a4, a4);
  *((void *)a1 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = result;
  if (!result) {
    *a4 = U_MEMORY_ALLOCATION_ERROR;
  }
  return result;
}

void sub_18097095C(uint64_t a1, int *a2)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  Baseuint64_t Name = (char *)icu::Locale::getBaseName((icu::Locale *)(a1 + 504));
  uint64_t v5 = ures_open(0LL, BaseName, a2);
  uint64_t v6 = ures_getByKeyWithFallback(v5, "calendar/gregorian/DateTimePatterns%atTime", 0LL, (UErrorCode *)a2);
  uint64_t v7 = v6;
  if (*a2 < 1)
  {
    ures_getSize(v6);
    unsigned int v23 = 0;
    if ((*(_DWORD *)(a1 + 496) & 0xFFFFFF7F) >= 0x84) {
      unsigned int v10 = 0;
    }
    else {
      unsigned int v10 = *(_DWORD *)(a1 + 496) & 0xFFFFFF7F;
    }
  }

  else
  {
    *a2 = 0;
    uint64_t v8 = ures_getByKeyWithFallback(v5, "calendar/gregorian/DateTimePatterns", 0LL, (UErrorCode *)a2);
    if (v7) {
      ures_close(v7);
    }
    if (*a2 > 0 || (int Size = ures_getSize(v8), Size <= 8))
    {
      uint64_t v7 = v8;
      goto LABEL_22;
    }

    unsigned int v23 = 0;
    unsigned int v10 = 8;
    if (Size >= 0xD)
    {
      unsigned int v11 = *(_DWORD *)(a1 + 496) & 0xFFFFFF7F;
      if (v11 >= 0x84) {
        unsigned int v10 = 8;
      }
      else {
        unsigned int v10 = v11 + 9;
      }
    }

    uint64_t v7 = v8;
  }

  StringByIndex = ures_getStringByIndex(v7, v10, (int *)&v23, a2);
  int v14 = StringByIndex;
  uint64_t v15 = *a2;
  if ((int)v15 <= 0)
  {
    uint64_t v15 = v23;
    if ((int)v23 >= 3 && !u_strncmp(StringByIndex, (const UChar *)a1_3, 3))
    {
      uint64_t v15 = 1LL;
      *(_BYTE *)(a1 + 744) = 1;
    }
  }

  BOOL v16 = icu::UMemory::operator new((uint64_t *)v15, (icu::UMemory *)0x48, v13);
  if (v16)
  {
    uint64_t v17 = v16;
    int v22 = v14;
    icu::UnicodeString::UnicodeString(v24, 1LL, &v22);
    v17[1] = (uint64_t)off_18971B688;
    *((_WORD *)v17 + 8) = 2;
    icu::SimpleFormatter::applyPatternMinMaxArguments( (icu::SimpleFormatter *)v17,  (const icu::UnicodeString *)v24,  2,  2,  0,  (UErrorCode *)a2);
    *(void *)(a1 + 488) = v17;
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v24);
  }

  else
  {
    *(void *)(a1 + 488) = 0LL;
  }

void sub_180970BF8(uint64_t a1)
{
  *(void *)a1 = off_18972A4B8;
  uint64_t v2 = *(void *)(a1 + 352);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  unsigned int v3 = *(icu::SimpleFormatter **)(a1 + 488);
  if (v3)
  {
    icu::SimpleFormatter::~SimpleFormatter(v3);
    icu::UMemory::operator delete(v4);
  }

  uprv_free(*(void **)(a1 + 736));
  uint64_t v5 = *(void *)(a1 + 752);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  icu::Locale::~Locale((icu::Locale *)(a1 + 504));
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)(a1 + 424));
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)(a1 + 360));
  icu::DateFormat::~DateFormat((icu::DateFormat *)a1);
}

void sub_180970C80(uint64_t a1)
{
}

uint64_t *sub_180970C94@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0x2F8, a2);
  if (result) {
    return (uint64_t *)sub_180970650((uint64_t)result, a1);
  }
  return result;
}

BOOL sub_180970CC4(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int16 *)(a1 + 368);
  if ((v4 & 1) != 0)
  {
    if ((*(_WORD *)(a2 + 368) & 1) == 0) {
      return 0LL;
    }
  }

  else
  {
    if ((v4 & 0x8000) != 0) {
      int v5 = *(_DWORD *)(a1 + 372);
    }
    else {
      int v5 = v4 >> 5;
    }
    unsigned int v6 = *(unsigned __int16 *)(a2 + 368);
    if ((v6 & 0x8000u) == 0) {
      unsigned int v7 = v6 >> 5;
    }
    else {
      unsigned int v7 = *(_DWORD *)(a2 + 372);
    }
    if ((v6 & 1) != 0
      || v5 != v7
      || !icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 360), (const icu::UnicodeString *)(a2 + 360), v5))
    {
      return 0LL;
    }
  }

  unsigned int v8 = *(unsigned __int16 *)(a1 + 432);
  if ((v8 & 1) != 0)
  {
    if ((*(_WORD *)(a2 + 432) & 1) != 0) {
      return icu::Locale::operator==(a1 + 504, a2 + 504);
    }
  }

  else
  {
    if ((v8 & 0x8000) != 0) {
      int v9 = *(_DWORD *)(a1 + 436);
    }
    else {
      int v9 = v8 >> 5;
    }
    unsigned int v10 = *(unsigned __int16 *)(a2 + 432);
    if ((v10 & 0x8000u) == 0) {
      unsigned int v11 = v10 >> 5;
    }
    else {
      unsigned int v11 = *(_DWORD *)(a2 + 436);
    }
    if ((v10 & 1) == 0
      && v9 == v11
      && icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 424), (const icu::UnicodeString *)(a2 + 424), v9))
    {
      return icu::Locale::operator==(a1 + 504, a2 + 504);
    }
  }

  return 0LL;
}

uint64_t sub_180970DC4(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v55 = *MEMORY[0x1895F89C0];
  UErrorCode v36 = U_ZERO_ERROR;
  __int128 v51 = 0u;
  uint64_t v54 = 0LL;
  __int128 v53 = 0u;
  __int128 v52 = 0u;
  int v50 = (const UChar *)off_18971B688;
  LOWORD(v5icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 2;
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t, UErrorCode *))(*(void *)a1 + 208LL))(a1, 1LL, &v36);
  int v9 = sub_180971270(a2, &v36);
  if (v36 > U_ZERO_ERROR) {
    goto LABEL_23;
  }
  if (v9 < -2) {
    goto LABEL_23;
  }
  uint64_t v10 = (v9 + 2);
  uint64_t v11 = *(void *)(a1 + 736);
  uint64_t v12 = v11 + 16 * v10;
  uint64_t v13 = *(void *)(v12 + 8);
  if (!v13) {
    goto LABEL_23;
  }
  uint64_t v14 = *(unsigned int *)(v12 + 4);
  icu::UnicodeString::unBogus((uint64_t)&v50);
  if ((v51 & 0x8000u) == 0LL) {
    uint64_t v15 = (unsigned __int16)v51 >> 5;
  }
  else {
    uint64_t v15 = DWORD1(v51);
  }
  icu::UnicodeString::doReplace((uint64_t)&v50, 0LL, v15, v13, 0, v14);
  int v16 = (unsigned __int16)v51 >> 5;
  if ((v51 & 0x8000u) != 0LL) {
    int v16 = DWORD1(v51);
  }
  if (v16 < 1
    || *(unsigned __int16 *)(a1 + 368) < 0x20u
    || (uint64_t v17 = (uint64_t *)*(unsigned __int16 *)(a1 + 432), v17 >= 0x20)
    && (uint64_t v17 = *(uint64_t **)(a1 + 488)) != 0LL
    && (uint64_t v17 = (uint64_t *)*(unsigned __int8 *)(a1 + 744), !*(_BYTE *)(a1 + 744)))
  {
LABEL_23:
    uint64_t v20 = *(void (**)(void))(**(void **)(a1 + 352) + 200LL);
    goto LABEL_24;
  }

  UChar32 v18 = icu::UnicodeString::char32At(v17, (icu::UnicodeString *)&v50, 0);
  if (u_islower(v18))
  {
    int v19 = *(icu::BreakIterator **)(a1 + 752);
    if (v19)
    {
      if (v8 == 258) {
        goto LABEL_50;
      }
      if (v8 != 260)
      {
        if (v8 != 259 || !*(_BYTE *)(a1 + 746)) {
          goto LABEL_51;
        }
        goto LABEL_50;
      }

      if (*(_BYTE *)(a1 + 747)) {
LABEL_50:
      }
        icu::UnicodeString::toTitle(&v50, v19, (const icu::Locale *)(a1 + 504), 768LL);
    }
  }

uint64_t sub_180971270(_BYTE *a1, UErrorCode *a2)
{
  unsigned int v4 = a1;
  int v5 = (icu::Calendar *)(*(uint64_t (**)(_BYTE *))(*(void *)a1 + 24LL))(a1);
  icu::Calendar::getNow(v5);
  icu::Calendar::setTimeInMillis((uint64_t)v5, v6, a2);
  LODWORD(v4) = icu::Calendar::get(v4, 0x14u, a2);
  uint64_t v2 = v4 - icu::Calendar::get(v5, 0x14u, a2);
  if (v5) {
    (*(void (**)(icu::Calendar *))(*(void *)v5 + 8LL))(v5);
  }
  return v2;
}

void *sub_180971310(uint64_t a1, UChar **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v47 = *MEMORY[0x1895F89C0];
  if (*(unsigned __int16 *)(a1 + 368) <= 0x1Fu)
  {
    uint64_t v24 = *(void (**)(void))(**(void **)(a1 + 352) + 256LL);
    goto LABEL_39;
  }

  UErrorCode v8 = *(_DWORD *)(a4 + 8);
  if (*(unsigned __int16 *)(a1 + 432) < 0x20u || !*(void *)(a1 + 488))
  {
    if (*(int *)(a1 + 728) >= 1)
    {
      uint64_t v25 = 0LL;
      uint64_t v26 = 0LL;
      do
      {
        uint64_t v27 = *(void *)(a1 + 736) + v25;
        uint64_t v28 = *(void *)(v27 + 8);
        if (v28)
        {
          unsigned int v29 = (icu::Calendar *)icu::UnicodeString::doCompare( (uint64_t)a2,  v8,  *(_DWORD *)(v27 + 4),  v28,  0,  *(_DWORD *)(v27 + 4));
          if (!(_DWORD)v29)
          {
            v43[0] = U_ZERO_ERROR;
            icu::Calendar::getNow(v29);
            icu::Calendar::setTimeInMillis(a3, v31, v43);
            uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void, UErrorCode *))(*(void *)a3 + 56LL))( a3,  5LL,  *(unsigned int *)(*(void *)(a1 + 736) + v25),  v43);
            if (v43[0] < U_ILLEGAL_ARGUMENT_ERROR) {
              *(_DWORD *)(a4 + 8) = *(_DWORD *)(*(void *)(a1 + 736) + v25 + 4) + v8;
            }
            else {
              *(_DWORD *)(a4 + 12) = v8;
            }
            return result;
          }
        }

        ++v26;
        v25 += 16LL;
      }

      while (v26 < *(int *)(a1 + 728));
    }

    uint64_t v24 = *(void (**)(void))(**(void **)(a1 + 352) + 256LL);
LABEL_39:
    v24();
    return (void *)(*(uint64_t (**)(void, UChar **, uint64_t, uint64_t))(**(void **)(a1 + 352) + 88LL))( *(void *)(a1 + 352),  a2,  a3,  a4);
  }

  __int128 v46 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  *(_OWORD *)__int128 v43 = 0u;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v43, a2);
  v37[2] = 0LL;
  v37[0] = off_189723AC8;
  v37[1] = 0xFFFFFFFFLL;
  UErrorCode v36 = U_ZERO_ERROR;
  int v9 = *(_DWORD *)(a1 + 728);
  if (v9 < 1)
  {
LABEL_21:
    LODWORD(v17) = 0;
    LODWORD(v18) = 0;
    LODWORD(v19) = 0;
    goto LABEL_22;
  }

  uint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  while (1)
  {
    uint64_t v12 = *(void *)(a1 + 736) + v10;
    uint64_t v13 = *(void *)(v12 + 8);
    if (v13) {
      break;
    }
LABEL_20:
    ++v11;
    v10 += 16LL;
    if (v11 >= v9) {
      goto LABEL_21;
    }
  }

  if (v8 < 0)
  {
    UErrorCode v15 = U_ZERO_ERROR;
    if ((v43[2] & 0x8000) != 0) {
      UErrorCode v14 = v43[3];
    }
    else {
      UErrorCode v14 = LOWORD(v43[2]) >> 5;
    }
  }

  else if ((v43[2] & 0x8000) != 0)
  {
    UErrorCode v14 = v43[3];
    if (v43[3] >= v8) {
      UErrorCode v15 = v8;
    }
    else {
      UErrorCode v15 = v43[3];
    }
  }

  else
  {
    UErrorCode v14 = LOWORD(v43[2]) >> 5;
    else {
      UErrorCode v15 = LOWORD(v43[2]) >> 5;
    }
  }

  uint64_t v16 = icu::UnicodeString::indexOf((uint64_t)v43, v13, 0, *(_DWORD *)(v12 + 4), v15, v14 - v15);
  if ((int)v16 < v8)
  {
    int v9 = *(_DWORD *)(a1 + 728);
    goto LABEL_20;
  }

  uint64_t v19 = v16;
  __int128 v39 = 0u;
  uint64_t v42 = 0LL;
  __int128 v41 = 0u;
  __int128 v40 = 0u;
  unsigned __int16 v38 = off_18971B688;
  LOWORD(v39) = 2;
  signed int v32 = (icu::Calendar *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 24LL))(a3);
  icu::Calendar::getNow(v32);
  icu::Calendar::setTimeInMillis((uint64_t)v32, v33, &v36);
  (*(void (**)(icu::Calendar *, uint64_t, void, UErrorCode *))(*(void *)v32 + 56LL))( v32,  5LL,  *(unsigned int *)(*(void *)(a1 + 736) + v10),  &v36);
  if (v36 > U_ZERO_ERROR)
  {
    *(_DWORD *)(a4 + 12) = v8;
    (*(void (**)(icu::Calendar *))(*(void *)v32 + 8LL))(v32);
    goto LABEL_45;
  }

  (*(void (**)(void, uint64_t))(**(void **)(a1 + 352) + 256LL))(*(void *)(a1 + 352), a1 + 360);
  (*(void (**)(void, icu::Calendar *, void (***)(icu::UnicodeString *__hidden), void *))(**(void **)(a1 + 352) + 64LL))( *(void *)(a1 + 352),  v32,  &v38,  v37);
  uint64_t v18 = *(unsigned int *)(*(void *)(a1 + 736) + v10 + 4);
  if ((v39 & 0x8000u) == 0LL) {
    uint64_t v17 = (unsigned __int16)v39 >> 5;
  }
  else {
    uint64_t v17 = DWORD1(v39);
  }
  icu::UnicodeString::doReplace((icu::UnicodeString *)v43, v19, v18, (const icu::UnicodeString *)&v38, 0, v17);
  (*(void (**)(icu::Calendar *))(*(void *)v32 + 8LL))(v32);
  icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)&v38);
LABEL_22:
  __int128 v39 = 0u;
  uint64_t v42 = 0LL;
  __int128 v41 = 0u;
  __int128 v40 = 0u;
  unsigned __int16 v38 = off_18971B688;
  LOWORD(v39) = 2;
  icu::SimpleFormatter::format( *(icu::SimpleFormatter **)(a1 + 488),  (const icu::UnicodeString *)(a1 + 424),  (const icu::UnicodeString *)(a1 + 360),  (icu::UnicodeString *)&v38,  &v36);
  (*(void (**)(void, void (***)(icu::UnicodeString *__hidden)))(**(void **)(a1 + 352) + 256LL))( *(void *)(a1 + 352),  &v38);
  (*(void (**)(void, UErrorCode *, uint64_t, uint64_t))(**(void **)(a1 + 352) + 88LL))( *(void *)(a1 + 352),  v43,  a3,  a4);
  int v20 = *(_DWORD *)(a4 + 8);
  int v21 = *(_DWORD *)(a4 + 12);
  if (v21 >= 0) {
    int v20 = *(_DWORD *)(a4 + 12);
  }
  else {
    unsigned int v22 = v20;
  }
  else {
    unint64_t v23 = v22;
  }
  if (v21 < 0) {
    *(_DWORD *)(a4 + 8) = v23;
  }
  else {
    *(_DWORD *)(a4 + 12) = v23;
  }
LABEL_45:
  icu::UnicodeString::~UnicodeString((void *)v23, (icu::UnicodeString *)&v38);
  icu::FieldPosition::~FieldPosition((icu::FieldPosition *)v37);
  return icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)v43);
}

icu::UnicodeString *sub_1809717A4(uint64_t a1, icu::UnicodeString *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if ((*((_WORD *)a2 + 4) & 1) != 0) {
      __int16 v4 = 2;
    }
    else {
      __int16 v4 = *((_WORD *)a2 + 4) & 0x1F;
    }
    *((_WORD *)a2 + 4) = v4;
    int v5 = (const icu::UnicodeString *)(a1 + 424);
    if (*(unsigned __int16 *)(a1 + 368) <= 0x1Fu)
    {
      int v9 = (UChar **)a2;
    }

    else
    {
      unsigned int v7 = (const icu::UnicodeString *)(a1 + 360);
      if (*(unsigned __int16 *)(a1 + 432) >= 0x20u)
      {
        UErrorCode v8 = *(icu::SimpleFormatter **)(a1 + 488);
        if (v8)
        {
          icu::SimpleFormatter::format(v8, v5, v7, a2, a3);
          return a2;
        }
      }

      int v9 = (UChar **)a2;
      int v5 = v7;
    }

    icu::UnicodeString::copyFrom(v9, (UChar **)v5, 0);
  }

  return a2;
}

icu::UnicodeString *sub_180971838(uint64_t a1, icu::UnicodeString *this, int *a3)
{
  if (*a3 <= 0)
  {
    if ((*((_WORD *)this + 4) & 1) != 0) {
      __int16 v4 = 2;
    }
    else {
      __int16 v4 = *((_WORD *)this + 4) & 0x1F;
    }
    *((_WORD *)this + 4) = v4;
    icu::UnicodeString::copyFrom((UChar **)this, (UChar **)(a1 + 360), 0);
  }

  return this;
}

icu::UnicodeString *sub_18097188C(uint64_t a1, icu::UnicodeString *this, int *a3)
{
  if (*a3 <= 0)
  {
    if ((*((_WORD *)this + 4) & 1) != 0) {
      __int16 v4 = 2;
    }
    else {
      __int16 v4 = *((_WORD *)this + 4) & 0x1F;
    }
    *((_WORD *)this + 4) = v4;
    icu::UnicodeString::copyFrom((UChar **)this, (UChar **)(a1 + 424), 0);
  }

  return this;
}

icu::UnicodeString *sub_1809718E0(icu::UnicodeString *result, UChar **a2, UChar **a3, int *a4)
{
  if (*a4 <= 0)
  {
    int v5 = result;
    icu::UnicodeString::copyFrom((UChar **)result + 45, a2, 0);
    return icu::UnicodeString::copyFrom((UChar **)v5 + 53, a3, 0);
  }

  return result;
}

uint64_t sub_180971930(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 352) + 272LL))(*(void *)(a1 + 352));
}

void sub_180971940(uint64_t a1, int a2, int *a3)
{
  if (*a3 <= 0)
  {
    if ((a2 - 259) <= 1 && !*(_BYTE *)(a1 + 745))
    {
      sub_180971A10(a1, (icu::Locale *)(a1 + 504));
      *(_BYTE *)(a1 + 745) = 1;
    }

    if (!*(void *)(a1 + 752))
    {
      if (a2 != 258)
      {
        if (a2 == 260)
        {
          if (!*(_BYTE *)(a1 + 747)) {
            return;
          }
        }

        else if (a2 != 259 || !*(_BYTE *)(a1 + 746))
        {
          return;
        }
      }

      *a3 = 0;
      Sentenceuint64_t Instance = icu::BreakIterator::createSentenceInstance( (char **)(a1 + 504),  (const icu::Locale *)a3,  v6,  v7);
      *(void *)(a1 + 752) = SentenceInstance;
      if (*a3 >= 1)
      {
        if (SentenceInstance) {
          (*(void (**)(char *))(*(void *)SentenceInstance + 8LL))(SentenceInstance);
        }
        *(void *)(a1 + 752) = 0LL;
      }
    }
  }

void sub_180971A10(uint64_t a1, icu::Locale *a2)
{
  int v9 = (uint64_t *)*MEMORY[0x1895F89C0];
  icu::Locale::Locale(v9, (icu::Locale *)v8, 0LL, 0LL, 0LL, 0LL);
  Baseuint64_t Name = 0LL;
  icu::Locale::~Locale((icu::Locale *)v8);
  v8[0] = 0;
  uint64_t v5 = ures_open(0LL, BaseName, v8);
  ures_getByKeyWithFallback(v5, "contextTransforms/relative", v5, (UErrorCode *)v8);
  if (v8[0] <= 0)
  {
    if (!v5) {
      return;
    }
    int v7 = 0;
    IntVector = ures_getIntVector(v5, &v7, v8);
    if (v8[0] <= 0 && IntVector && v7 >= 2)
    {
      *(_BYTE *)(a1 + 746) = *IntVector;
      *(_BYTE *)(a1 + 747) = IntVector[1];
    }

    goto LABEL_11;
  }

  if (v5) {
LABEL_11:
  }
    ures_close(v5);
}

void sub_180971B3C(icu::ResourceSink *a1)
{
}

uint64_t sub_180971B50(uint64_t a1, char *a2, icu::ResourceValue *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = 0LL;
  uint64_t v18 = a2;
  memset(v16, 0, sizeof(v16));
  (*(void (**)(_OWORD *__return_ptr, icu::ResourceValue *, uint64_t))(*(void *)a3 + 88LL))(v16, a3, a5);
  int v15 = 0;
  uint64_t result = icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v16, 0, (const char **)&v18, a3);
  if ((_DWORD)result)
  {
    unsigned int v9 = 1;
    do
    {
      int v10 = atoi(v18);
      uint64_t v11 = v10 + 2LL;
      if ((int)v11 < *(_DWORD *)(a1 + 16))
      {
        uint64_t v12 = *(void *)(a1 + 8);
        if (!*(void *)(v12 + 16 * v11 + 8))
        {
          *(_DWORD *)(v12 + 16 * v1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v10;
          uint64_t v13 = (*(uint64_t (**)(icu::ResourceValue *, int *, uint64_t))(*(void *)a3 + 32LL))(a3, &v15, a5);
          uint64_t v14 = *(void *)(a1 + 8) + 16 * v11;
          *(void *)(v14 + 8) = v13;
          *(_DWORD *)(v14 + 4) = v15;
        }
      }

      uint64_t result = icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v16, v9++, (const char **)&v18, a3);
    }

    while ((_DWORD)result);
  }

  return result;
}

icu::RegexMatcher *icu::RegexMatcher::RegexMatcher(icu::RegexMatcher *this, const icu::RegexPattern *a2)
{
  *(void *)this = off_18972A638;
  __int16 v4 = (UErrorCode *)((char *)this + 316);
  *((_DWORD *)this + 79) = 0;
  icu::RegexMatcher::init(this, (UErrorCode *)this + 79);
  if (*((int *)this + 79) <= 0)
  {
    if (a2)
    {
      *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = a2;
      icu::RegexMatcher::init2((uint64_t *)this, *(UText **)(qword_18C449BC0 + 3832), v4);
    }

    else
    {
      *__int16 v4 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }

  return this;
}

double icu::RegexMatcher::init(icu::RegexMatcher *this, UErrorCode *a2)
{
  *((_DWORD *)this + 14) = 0;
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0LL;
  *((void *)this + 2) = 0LL;
  double result = 0.0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_BYTE *)this + 128) = 0;
  *(_WORD *)((char *)this + 129) = 1;
  *((void *)this + 17) = 0LL;
  *((void *)this + 18) = 0LL;
  *(_OWORD *)((char *)this + 152) = xmmword_180A3C7A0;
  *((_WORD *)this + 84) = 0;
  *((void *)this + 22) = 0LL;
  *((void *)this + 23) = 0LL;
  *(_OWORD *)((char *)this + 264) = xmmword_180A3C7B0;
  *((_BYTE *)this + 313) = 0;
  *(_OWORD *)((char *)this + 28icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((UErrorCode *)this + 79) = *a2;
  *((void *)this + 24) = (char *)this + 200;
  *((_BYTE *)this + 312) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *((void *)this + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
  *((void *)this + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0LL;
  return result;
}

uint64_t *icu::RegexMatcher::init2(uint64_t *this, UText *a2, UErrorCode *a3)
{
  unsigned int v3 = this;
  UErrorCode v4 = *a3;
  int v7 = (uint64_t *)*(unsigned int *)(this[1] + 132);
  if ((int)v7 >= 9)
  {
    this = (uint64_t *)uprv_malloc(8LL * (void)v7);
    v3[24] = (uint64_t)this;
    if (!this) {
      goto LABEL_9;
    }
  }

  this = icu::UMemory::operator new(v7, (icu::UMemory *)0x20, (unint64_t)a2);
  if (!this)
  {
    v3[22] = 0LL;
LABEL_9:
    *((_DWORD *)v3 + 79) = 7;
    *a3 = U_MEMORY_ALLOCATION_ERROR;
    return this;
  }

  v3[22] = (uint64_t)icu::UVector64::UVector64((icu::UVector64 *)this, a3);
  UErrorCode v8 = (char *)icu::RegexMatcher::reset((icu::RegexMatcher *)v3, a2);
  this = (uint64_t *)icu::RegexMatcher::setStackLimit(v8, 0x7A1200u, a3);
  UErrorCode v4 = *a3;
  if (*(int *)a3 >= 1) {
LABEL_2:
  }
    *((_DWORD *)v3 + 79) = v4;
  return this;
}

icu::RegexMatcher *icu::RegexMatcher::RegexMatcher( icu::RegexMatcher *this, UChar **a2, const icu::UnicodeString *a3, const icu::UnicodeString *a4, UErrorCode *a5)
{
  *(void *)this = off_18972A638;
  icu::RegexMatcher::init(this, a5);
  if (*(int *)a5 <= 0)
  {
    memset(&v14, 0, sizeof(v14));
    uint64_t v11 = icu::RegexPattern::compile(a2, a4, &v14, a5, v10);
    *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v11;
    *((void *)this + 2) = v11;
    memset(&v13, 0, sizeof(v13));
    v13.magic = 878368812;
    v13.sizeOfStruct = 144;
    utext_openConstUnicodeString(&v13, (uint64_t)a3, a5);
    icu::RegexMatcher::init2((uint64_t *)this, &v13, a5);
    utext_close(&v13);
    *((_BYTE *)this + 312) = 1;
  }

  return this;
}

icu::RegexMatcher *icu::RegexMatcher::RegexMatcher( icu::RegexMatcher *this, UText *a2, UText *a3, UText *a4, UErrorCode *a5)
{
  *(void *)this = off_18972A638;
  icu::RegexMatcher::init(this, a5);
  if (*(int *)a5 <= 0)
  {
    memset(&v13, 0, sizeof(v13));
    uint64_t v11 = icu::RegexPattern::compile(a2, a4, &v13, a5, v10);
    *((void *)this + 2) = v11;
    if (*(int *)a5 <= 0)
    {
      *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v11;
      icu::RegexMatcher::init2((uint64_t *)this, a3, a5);
    }
  }

  return this;
}

icu::RegexMatcher *icu::RegexMatcher::RegexMatcher( icu::RegexMatcher *this, UChar **a2, const icu::UnicodeString *a3, UErrorCode *a4)
{
  *(void *)this = off_18972A638;
  icu::RegexMatcher::init(this, a4);
  if (*(int *)a4 <= 0)
  {
    memset(&v11, 0, sizeof(v11));
    unsigned int v9 = icu::RegexPattern::compile(a2, a3, &v11, a4, v8);
    *((void *)this + 2) = v9;
    if (*(int *)a4 <= 0)
    {
      *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v9;
      icu::RegexMatcher::init2((uint64_t *)this, *(UText **)(qword_18C449BC0 + 3832), a4);
    }
  }

  return this;
}

icu::RegexMatcher *icu::RegexMatcher::RegexMatcher( icu::RegexMatcher *this, UText *a2, UText *a3, UErrorCode *a4)
{
  *(void *)this = off_18972A638;
  icu::RegexMatcher::init(this, a4);
  if (*(int *)a4 <= 0)
  {
    memset(&v11, 0, sizeof(v11));
    unsigned int v9 = icu::RegexPattern::compile(a2, a3, &v11, a4, v8);
    *((void *)this + 2) = v9;
    if (*(int *)a4 <= 0)
    {
      *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v9;
      icu::RegexMatcher::init2((uint64_t *)this, *(UText **)(qword_18C449BC0 + 3832), a4);
    }
  }

  return this;
}

void icu::RegexMatcher::~RegexMatcher(icu::RegexMatcher *this)
{
  uint64_t v2 = *((void *)this + 22);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  unsigned int v3 = (char *)*((void *)this + 24);
  if (v3 != (char *)this + 200)
  {
    uprv_free(v3);
    *((void *)this + 24) = 0LL;
  }

  UErrorCode v4 = (icu::RegexPattern *)*((void *)this + 2);
  if (v4)
  {
    icu::RegexPattern::~RegexPattern(v4);
    icu::UMemory::operator delete(v5);
    *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0LL;
    *((void *)this + 2) = 0LL;
  }

  uint64_t v6 = *((void *)this + 3);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  int v7 = (UText *)*((void *)this + 4);
  if (v7) {
    utext_close(v7);
  }
  UErrorCode v8 = (UText *)*((void *)this + 5);
  if (v8) {
    utext_close(v8);
  }
  uint64_t v9 = *((void *)this + 40);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
  }
  uint64_t v10 = *((void *)this + 41);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  icu::UObject::~UObject(this);
}

{
  void *v1;
  icu::RegexMatcher::~RegexMatcher(this);
  icu::UMemory::operator delete(v1);
}

icu::RegexMatcher *icu::RegexMatcher::reset(icu::RegexMatcher *this, UText *a2)
{
  unsigned int v3 = (UText *)*((void *)this + 4);
  if (v3 == a2)
  {
LABEL_11:
    uint64_t v9 = *((void *)this + 6);
    *((void *)this + 8) = 0LL;
    *((void *)this + 9) = v9;
    *((void *)this + 14) = 0LL;
    *((void *)this + 15) = v9;
    *((void *)this + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
    *((void *)this + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v9;
    *((void *)this + 12) = 0LL;
    *((void *)this + 13) = v9;
    *((void *)this + 17) = 0LL;
    *((void *)this + 18) = 0LL;
    *(_OWORD *)((char *)this + 152) = xmmword_180A3C7A0;
    *((_BYTE *)this + 13icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
    *((_WORD *)this + 84) = 0;
    *(void *)((char *)this + 268) = 0x271000000000LL;
    *((_BYTE *)this + 312) = 0;
    return this;
  }

  uint64_t v5 = utext_clone(v3, a2, 0, 1, (UErrorCode *)this + 79);
  *((void *)this + 4) = v5;
  if (*(_BYTE *)(*((void *)this + 1) + 184LL)) {
    *((void *)this + 5) = utext_clone(*((UText **)this + 5), v5, 0, 1, (UErrorCode *)this + 79);
  }
  if (*((int *)this + 79) <= 0)
  {
    *((void *)this + 6) = utext_nativeLength(*((UText **)this + 4));
    uint64_t v6 = *((void *)this + 3);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
    *((void *)this + 3) = 0LL;
    uint64_t v7 = *((void *)this + 40);
    if (v7) {
      (*(void (**)(uint64_t, UText *, char *))(*(void *)v7 + 64LL))(v7, a2, (char *)this + 316);
    }
    uint64_t v8 = *((void *)this + 41);
    if (v8) {
      (*(void (**)(uint64_t, void, char *))(*(void *)v8 + 64LL))( v8,  *((void *)this + 4),  (char *)this + 316);
    }
    goto LABEL_11;
  }

  return this;
}

char *icu::RegexMatcher::setStackLimit(char *this, unsigned int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    unsigned int v3 = this;
    UErrorCode v4 = *((_DWORD *)this + 79);
    if (v4 >= U_ILLEGAL_ARGUMENT_ERROR)
    {
LABEL_3:
      *a3 = v4;
      return this;
    }

    if ((a2 & 0x80000000) != 0)
    {
      UErrorCode v4 = U_ILLEGAL_ARGUMENT_ERROR;
      goto LABEL_3;
    }

    uint64_t v6 = *((void *)this + 6);
    *((void *)this + 8) = 0LL;
    *((void *)this + 9) = v6;
    *((void *)this + 14) = 0LL;
    *((void *)this + 15) = v6;
    *((void *)this + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
    *((void *)this + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v6;
    *((void *)this + 12) = 0LL;
    *((void *)this + 13) = v6;
    *((void *)this + 17) = 0LL;
    *((void *)this + 18) = 0LL;
    *(_OWORD *)(this + 152) = xmmword_180A3C7A0;
    this[130] = 0;
    *((_WORD *)this + 84) = 0;
    *(void *)(this + 268) = 0x271000000000LL;
    if (a2)
    {
      else {
        int v7 = a2 >> 2;
      }
    }

    else
    {
      int v7 = 0;
    }

    this = (char *)icu::UVector64::setMaxCapacity(*((void **)this + 22), v7);
    v3[69] = a2;
  }

  return this;
}

icu::RegexMatcher *icu::RegexMatcher::appendReplacement( icu::RegexMatcher *this, icu::UnicodeString *a2, const icu::UnicodeString *a3, UErrorCode *status)
{
  ut.magic = 878368812;
  ut.sizeOfStruct = 144;
  utext_openConstUnicodeString(&ut, (uint64_t)a3, status);
  if (*(int *)status <= 0)
  {
    memset(&v8, 0, sizeof(v8));
    v8.magic = 878368812;
    v8.sizeOfStruct = 144;
    utext_openUnicodeString(&v8, (uint64_t)a2, status);
    if (*(int *)status <= 0)
    {
      icu::RegexMatcher::appendReplacement(this, &v8, &ut, status);
      utext_close(&v8);
    }

    utext_close(&ut);
  }

  return this;
}

icu::RegexMatcher *icu::RegexMatcher::appendReplacement( icu::RegexMatcher *this, UText *ut, UText *a3, UErrorCode *a4)
{
  uint64_t v56 = *MEMORY[0x1895F89C0];
  if (*(int *)a4 <= 0)
  {
    UErrorCode v6 = *((_DWORD *)this + 79);
    if (v6 > U_ZERO_ERROR)
    {
LABEL_3:
      *a4 = v6;
      return this;
    }

    if (!*((_BYTE *)this + 130))
    {
      UErrorCode v6 = U_REGEX_INVALID_STATE;
      goto LABEL_3;
    }

    int64_t v10 = utext_nativeLength(ut);
    int64_t v11 = *((void *)this + 17);
    int64_t v12 = *((void *)this + 20);
    if (v11 > v12)
    {
      UParseError v13 = (UText *)*((void *)this + 4);
      if (!v13->chunkNativeStart
        && (uint64_t v14 = *((void *)this + 6), v14 == v13->chunkNativeLimit)
        && v14 == v13->nativeIndexingLimit)
      {
        v10 += utext_replace(ut, v10, v10, &v13->chunkContents[v12], v11 - v12, a4);
      }

      else
      {
        if (v13->pFuncs->mapNativeIndexToUTF16)
        {
          status[0] = U_ZERO_ERROR;
          int32_t v15 = utext_extract(v13, v12, v11, 0LL, 0, status);
        }

        else
        {
          int32_t v15 = v11 - v12;
        }

        uint64_t v16 = (UChar *)uprv_malloc(2LL * (v15 + 1));
        if (!v16)
        {
          UErrorCode v6 = U_MEMORY_ALLOCATION_ERROR;
          goto LABEL_3;
        }

        uint64_t v17 = v16;
        utext_extract(*((UText **)this + 4), *((void *)this + 20), *((void *)this + 17), v16, v15 + 1, a4);
        v10 += utext_replace(ut, v10, v10, v17, v15, a4);
        uprv_free(v17);
      }
    }

    *((void *)this + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = *((void *)this + 18);
    int64_t chunkNativeStart = a3->chunkNativeStart;
    if (chunkNativeStart > 0
      || (int64_t v19 = -chunkNativeStart, v19 >= a3->nativeIndexingLimit)
      || a3->chunkContents[v19] >> 10 > 0x36u)
    {
      utext_setNativeIndex(a3, 0LL);
      LODWORD(v19) = a3->chunkOffset;
    }

    else
    {
      a3->chunkint Offset = v19;
    }

    else {
      a3->chunkint Offset = v19 + 1;
    }
    while (*(int *)a4 <= 0 && v20 != -1)
    {
      if (v20 == 36)
      {
        UChar32 v28 = utext_current32(a3);
        if (v28 == 123)
        {
          uint64_t v55 = 0LL;
          __int128 v53 = 0u;
          __int128 v54 = 0u;
          __int128 v52 = 0u;
          *(void *)UErrorCode status = off_18971B688;
          LOWORD(v52) = 2;
          utext_next32(a3);
          unsigned int v29 = (void *)*(unsigned int *)a4;
          if ((int)v29 > 0)
          {
            int v30 = 0;
            goto LABEL_40;
          }

          while (2)
          {
            UChar32 v31 = utext_next32(a3);
            UChar32 v32 = v31;
            if (v31 == -1)
            {
LABEL_45:
              *a4 = U_REGEX_INVALID_CAPTURE_GROUP_NAME;
            }

            else
            {
              if ((v31 - 49) >= 9)
              {
                unsigned int v29 = (void *)((v31 & 0xFFFFFFDF) - 65);
                if (v29 > 0x19)
                {
                  if (v31 == 125)
                  {
                    unsigned int v29 = (void *)*((void *)this + 1);
                    uint64_t v47 = v29[24];
                    if (!v47 || (int v30 = uhash_geti(v47, (uint64_t)status)) == 0)
                    {
                      int v30 = 0;
                      *a4 = U_REGEX_INVALID_CAPTURE_GROUP_NAME;
                    }

uint64_t icu::RegexMatcher::appendGroup(icu::RegexMatcher *this, int a2, UText *ut, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    UErrorCode v7 = *((_DWORD *)this + 79);
    if (v7 >= U_ILLEGAL_ARGUMENT_ERROR)
    {
      uint64_t v4 = 0LL;
LABEL_5:
      *a4 = v7;
      return v4;
    }

    int64_t v10 = utext_nativeLength(ut);
    if (*((_BYTE *)this + 130))
    {
      if ((a2 & 0x80000000) == 0)
      {
        uint64_t v11 = *(void *)(*((void *)this + 1) + 136LL);
        int v12 = *(_DWORD *)(v11 + 8);
        if (v12 >= a2)
        {
          if (a2)
          {
            if (v12 < 1) {
              int v20 = 0;
            }
            else {
              int v20 = *(_DWORD *)(*(void *)(v11 + 24) + 4LL * (a2 - 1));
            }
            uint64_t v23 = *((void *)this + 23) + 8LL * v20;
            uint64_t v21 = (int64_t *)(v23 + 16);
            unsigned int v22 = (int64_t *)(v23 + 24);
          }

          else
          {
            uint64_t v21 = (int64_t *)((char *)this + 136);
            unsigned int v22 = (int64_t *)((char *)this + 144);
          }

          int64_t v24 = *v21;
          if ((*v21 & 0x8000000000000000LL) == 0)
          {
            int64_t v25 = *v22;
            int64_t v26 = (UText *)*((void *)this + 4);
            if (v26->chunkNativeStart
              || (uint64_t v27 = *((void *)this + 6), v27 != v26->chunkNativeLimit)
              || v27 != v26->nativeIndexingLimit)
            {
              if (v26->pFuncs->mapNativeIndexToUTF16)
              {
                UErrorCode status = U_ZERO_ERROR;
                int32_t v28 = utext_extract(v26, v24, v25, 0LL, 0, &status);
              }

              else
              {
                int32_t v28 = v25 - v24;
              }

              unsigned int v29 = (UChar *)uprv_malloc(2LL * (v28 + 1));
              if (v29)
              {
                int v30 = v29;
                utext_extract(*((UText **)this + 4), v24, v25, v29, v28 + 1, a4);
                uint64_t v4 = utext_replace(ut, v10, v10, v30, v28, a4);
                uprv_free(v30);
                return v4;
              }

              uint64_t v4 = 0LL;
              UErrorCode v7 = U_MEMORY_ALLOCATION_ERROR;
              goto LABEL_5;
            }

            uint64_t v17 = &v26->chunkContents[v24];
            int32_t v18 = v25 - v24;
            uint64_t v14 = ut;
            int64_t v15 = v10;
            int64_t v16 = v10;
            return utext_replace(v14, v15, v16, v17, v18, a4);
          }

icu::UnicodeString *icu::RegexMatcher::appendTail(icu::RegexMatcher *this, icu::UnicodeString *a2)
{
  UErrorCode status = U_ZERO_ERROR;
  memset(&v5, 0, sizeof(v5));
  v5.magic = 878368812;
  v5.sizeOfStruct = 144;
  utext_openUnicodeString(&v5, (uint64_t)a2, &status);
  if (status <= U_ZERO_ERROR)
  {
    icu::RegexMatcher::appendTail(this, &v5, &status);
    utext_close(&v5);
  }

  return a2;
}

UText *icu::RegexMatcher::appendTail(icu::RegexMatcher *this, UText *ut, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    UErrorCode v6 = *((_DWORD *)this + 79);
    if (v6 < U_ILLEGAL_ARGUMENT_ERROR)
    {
      int64_t v7 = *((void *)this + 6);
      int64_t v8 = *((void *)this + 20);
      if (v7 > v8)
      {
        uint64_t v9 = (UText *)*((void *)this + 4);
        if (!v9->chunkNativeStart && v7 == v9->chunkNativeLimit && v7 == v9->nativeIndexingLimit)
        {
          int64_t v10 = utext_nativeLength(ut);
          utext_replace( ut,  v10,  v10,  (const UChar *)(*(void *)(*((void *)this + 4) + 48LL) + 2LL * *((void *)this + 20)),  *((_DWORD *)this + 12) - *((void *)this + 20),  status);
        }

        else
        {
          if (v9->pFuncs->mapNativeIndexToUTF16)
          {
            int32_t v11 = utext_extract(v9, v8, v7, 0LL, 0, status);
            *UErrorCode status = U_ZERO_ERROR;
          }

          else
          {
            int32_t v11 = v7 - v8;
          }

          int v12 = (UChar *)uprv_malloc(2LL * v11);
          if (v12)
          {
            UErrorCode v13 = v12;
            utext_extract(*((UText **)this + 4), *((void *)this + 20), *((void *)this + 6), v12, v11, status);
            int64_t v14 = utext_nativeLength(ut);
            utext_replace(ut, v14, v14, v13, v11, status);
            uprv_free(v13);
          }

          else
          {
            *((_DWORD *)this + 79) = 7;
          }
        }
      }
    }

    else
    {
      *UErrorCode status = v6;
    }
  }

  return ut;
}

uint64_t icu::RegexMatcher::end(icu::RegexMatcher *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    if (*((_BYTE *)this + 130))
    {
      if ((*(_DWORD *)(*(void *)(*((void *)this + 1) + 136LL) + 8LL) & 0x80000000) == 0) {
        return *((unsigned int *)this + 36);
      }
      UErrorCode v3 = U_INDEX_OUTOFBOUNDS_ERROR;
    }

    else
    {
      UErrorCode v3 = U_REGEX_INVALID_STATE;
    }

    *a2 = v3;
  }

  return 0xFFFFFFFFLL;
}

uint64_t icu::RegexMatcher::end(icu::RegexMatcher *this, int a2, UErrorCode *a3)
{
  return icu::RegexMatcher::end64(this, a2, a3);
}

uint64_t icu::RegexMatcher::end64(icu::RegexMatcher *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    if (*((_BYTE *)this + 130))
    {
      if ((*(_DWORD *)(*(void *)(*((void *)this + 1) + 136LL) + 8LL) & 0x80000000) == 0) {
        return *((void *)this + 18);
      }
      UErrorCode v3 = U_INDEX_OUTOFBOUNDS_ERROR;
    }

    else
    {
      UErrorCode v3 = U_REGEX_INVALID_STATE;
    }

    *a2 = v3;
  }

  return -1LL;
}

uint64_t icu::RegexMatcher::end64(icu::RegexMatcher *this, int a2, UErrorCode *a3)
{
  if (!*((_BYTE *)this + 130))
  {
    UErrorCode v5 = U_REGEX_INVALID_STATE;
    goto LABEL_7;
  }

  if (a2 < 0 || (v3 = *(void *)(*((void *)this + 1) + 136LL), int v4 = *(_DWORD *)(v3 + 8), v4 < a2))
  {
    UErrorCode v5 = U_INDEX_OUTOFBOUNDS_ERROR;
LABEL_7:
    *a3 = v5;
    return -1LL;
  }

  if (a2)
  {
    if (v4 < 1) {
      uint64_t v7 = 1LL;
    }
    else {
      uint64_t v7 = *(int *)(*(void *)(v3 + 24) + 4LL * (a2 - 1)) + 1LL;
    }
    int64_t v8 = (char *)(*((void *)this + 23) + 8 * v7 + 16);
  }

  else
  {
    int64_t v8 = (char *)this + 144;
  }

  return *(void *)v8;
}

uint64_t icu::RegexMatcher::find(icu::RegexMatcher *this)
{
  UErrorCode v2 = U_ZERO_ERROR;
  return icu::RegexMatcher::find(this, &v2);
}

uint64_t icu::RegexMatcher::find(icu::RegexMatcher *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    UErrorCode v5 = *((_DWORD *)this + 79);
    if (v5 >= U_ILLEGAL_ARGUMENT_ERROR)
    {
      char v2 = 0;
LABEL_5:
      *a2 = v5;
      return v2;
    }

    UErrorCode v6 = (UText *)*((void *)this + 4);
    int64_t chunkNativeStart = v6->chunkNativeStart;
    if (!chunkNativeStart)
    {
      uint64_t v8 = *((void *)this + 6);
      if (v8 == v6->chunkNativeLimit && v8 == v6->nativeIndexingLimit) {
        return icu::RegexMatcher::findUsingChunk(this, a2);
      }
    }

    int64_t v10 = *((void *)this + 18);
    int64_t v11 = v10;
    if (!v10) {
      int64_t v11 = *((void *)this + 14);
    }
    if (*((_BYTE *)this + 130))
    {
      *((void *)this + 19) = v10;
      if (*((void *)this + 17) == v10)
      {
        if (v11 >= *((void *)this + 15))
        {
LABEL_32:
          char v2 = 0;
          *((_BYTE *)this + 13icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
          goto LABEL_33;
        }

        uint64_t v12 = v11 - chunkNativeStart;
        if (v12 < 0 || v12 >= v6->nativeIndexingLimit || v6->chunkContents[v12] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v6, v11);
          UErrorCode v6 = (UText *)*((void *)this + 4);
          LODWORD(v12) = v6->chunkOffset;
        }

        else
        {
          v6->chunkint Offset = v12;
        }

        if ((int)v12 >= v6->chunkLength || v6->chunkContents[(int)v12] >> 11 > 0x1Au)
        {
          utext_next32(v6);
          UErrorCode v6 = (UText *)*((void *)this + 4);
          chunkint Offset = v6->chunkOffset;
        }

        else
        {
          chunkint Offset = v12 + 1;
          v6->chunkint Offset = chunkOffset;
        }

        if (chunkOffset <= v6->nativeIndexingLimit)
        {
          int64_t v11 = v6->chunkNativeStart + chunkOffset;
        }

        else
        {
          int64_t v11 = ((uint64_t (*)(void))v6->pFuncs->mapOffsetToNative)();
          UErrorCode v6 = (UText *)*((void *)this + 4);
        }
      }
    }

    else if ((*((void *)this + 19) & 0x8000000000000000LL) == 0)
    {
LABEL_20:
      char v2 = 0;
LABEL_33:
      *((_BYTE *)this + 168) = 1;
      return v2;
    }

    uint64_t v14 = *((void *)this + 15);
    int64_t v15 = (int *)*((void *)this + 1);
    uint64_t v16 = v15[31];
    if (v6->pFuncs->mapNativeIndexToUTF16)
    {
      int64_t v17 = v14 - ((int)v16 > 0);
      goto LABEL_35;
    }

    int64_t v17 = v14 - v16;
    if (v11 <= v14 - v16)
    {
LABEL_35:
      switch(v15[36])
      {
        case 0:
          icu::RegexMatcher::MatchAt(this, v11, 0, a2);
          char v2 = 0;
          while (2)
          {
            if (*((_BYTE *)this + 130)) {
              return 1;
            }
            if (v11 >= v17) {
              goto LABEL_20;
            }
            int32_t v28 = (UText *)*((void *)this + 4);
            uint64_t v29 = v11 - v28->chunkNativeStart;
            if (v29 < 0 || v29 >= v28->nativeIndexingLimit || v28->chunkContents[v29] >> 10 > 0x36u)
            {
              utext_setNativeIndex(v28, v11);
              int32_t v28 = (UText *)*((void *)this + 4);
              LODWORD(v29) = v28->chunkOffset;
            }

            else
            {
              v28->chunkint Offset = v29;
            }

            if ((int)v29 >= v28->chunkLength || v28->chunkContents[(int)v29] >> 11 > 0x1Au)
            {
              utext_next32(v28);
              int32_t v28 = (UText *)*((void *)this + 4);
              int32_t v30 = v28->chunkOffset;
            }

            else
            {
              int32_t v30 = v29 + 1;
              v28->chunkint Offset = v30;
            }

            if (v30 <= v28->nativeIndexingLimit) {
              int64_t v11 = v28->chunkNativeStart + v30;
            }
            else {
              int64_t v11 = ((uint64_t (*)(void))v28->pFuncs->mapOffsetToNative)();
            }
            UChar32 v31 = (unsigned int (*)(void, int64_t))*((void *)this + 37);
            if (!v31 || v31(*((void *)this + 38), v11))
            {
              icu::RegexMatcher::MatchAt(this, v11, 0, a2);
              char v2 = 0;
              continue;
            }

            goto LABEL_186;
          }

        case 1:
        case 5:
          int v18 = v15[42];
          uint64_t v19 = v11 - v6->chunkNativeStart;
          if (v19 < 0 || v19 >= v6->nativeIndexingLimit || v6->chunkContents[v19] >> 10 > 0x36u) {
            utext_setNativeIndex(v6, v11);
          }
          else {
            v6->chunkint Offset = v19;
          }
          while (1)
          {
            int v20 = (UText *)*((void *)this + 4);
            uint64_t v21 = v20->chunkOffset;
            if ((int)v21 >= v20->chunkLength || (unsigned int v22 = v20->chunkContents[v21], v22 >> 11 > 0x1A))
            {
              unsigned int v22 = utext_next32(v20);
              int v20 = (UText *)*((void *)this + 4);
              int32_t v23 = v20->chunkOffset;
            }

            else
            {
              int32_t v23 = v21 + 1;
              v20->chunkint Offset = v23;
            }

            if (v23 <= v20->nativeIndexingLimit) {
              int64_t v24 = v20->chunkNativeStart + v23;
            }
            else {
              int64_t v24 = ((uint64_t (*)(void))v20->pFuncs->mapOffsetToNative)();
            }
            if (v22 == v18)
            {
              icu::RegexMatcher::MatchAt(this, v11, 0, a2);
              if (*((_BYTE *)this + 130)) {
                return 1;
              }
              int64_t v25 = (UText *)*((void *)this + 4);
              uint64_t v26 = v24 - v25->chunkNativeStart;
              if (v26 < 0 || v26 >= v25->nativeIndexingLimit || v25->chunkContents[v26] >> 10 > 0x36u) {
                utext_setNativeIndex(v25, v24);
              }
              else {
                v25->chunkint Offset = v26;
              }
            }

            if (v24 > v17) {
              goto LABEL_32;
            }
            uint64_t v27 = (unsigned int (*)(void, int64_t))*((void *)this + 37);
            int64_t v11 = v24;
            if (v27)
            {
              int64_t v11 = v24;
              if (!v27(*((void *)this + 38), v24)) {
                goto LABEL_186;
              }
            }
          }

        case 2:
          uint64_t v32 = v11 - v6->chunkNativeStart;
          if (v32 < 0 || v32 >= v6->nativeIndexingLimit || v6->chunkContents[v32] >> 10 > 0x36u) {
            utext_setNativeIndex(v6, v11);
          }
          else {
            v6->chunkint Offset = v32;
          }
          while (1)
          {
            int v33 = (UText *)*((void *)this + 4);
            uint64_t v34 = v33->chunkOffset;
            if ((int)v34 >= v33->chunkLength || (unsigned int v35 = v33->chunkContents[v34], v35 >> 11 > 0x1A))
            {
              unsigned int v35 = utext_next32(v33);
              int v33 = (UText *)*((void *)this + 4);
              int32_t v36 = v33->chunkOffset;
            }

            else
            {
              int32_t v36 = v34 + 1;
              v33->chunkint Offset = v36;
            }

            if (v36 <= v33->nativeIndexingLimit)
            {
              uint64_t v37 = v33->chunkNativeStart + v36;
              if ((v35 & 0x80000000) != 0) {
                goto LABEL_111;
              }
            }

            else
            {
              uint64_t v37 = ((uint64_t (*)(void))v33->pFuncs->mapOffsetToNative)();
              if ((v35 & 0x80000000) != 0) {
                goto LABEL_111;
              }
            }

            uint64_t v38 = *((void *)this + 1);
            if (v35 > 0xFF)
            {
              if (icu::UnicodeSet::contains(*(icu::UnicodeSet **)(v38 + 160), v35))
              {
LABEL_104:
                icu::RegexMatcher::MatchAt(this, v11, 0, a2);
                if (*((_BYTE *)this + 130)) {
                  return 1;
                }
                __int128 v39 = (UText *)*((void *)this + 4);
                uint64_t v40 = v11 - v39->chunkNativeStart;
                if (v40 < 0 || v40 >= v39->nativeIndexingLimit || v39->chunkContents[v40] >> 10 > 0x36u) {
                  utext_setNativeIndex(v39, v11);
                }
                else {
                  v39->chunkint Offset = v40;
                }
              }
            }

            else if (((*(unsigned __int8 *)(*(void *)(v38 + 176) + ((unint64_t)v35 >> 3)) >> (v35 & 7)) & 1) != 0)
            {
              goto LABEL_104;
            }

LABEL_111:
            if (v37 > v17) {
              goto LABEL_32;
            }
            int64_t v41 = (unsigned int (*)(void, uint64_t))*((void *)this + 37);
            int64_t v11 = v37;
            if (v41)
            {
              int64_t v11 = v37;
              if (!v41(*((void *)this + 38), v37)) {
                goto LABEL_186;
              }
            }
          }

        case 3:
          if (v11 <= *((void *)this + 14))
          {
            icu::RegexMatcher::MatchAt(this, v11, 0, a2);
            char v2 = 0;
          }

          else
          {
            char v2 = 0;
            *((_BYTE *)this + 13icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
          }

          return v2;
        case 4:
          if (v11 == *((void *)this + 10))
          {
            icu::RegexMatcher::MatchAt(this, v11, 0, a2);
            char v2 = 0;
            if (*((_BYTE *)this + 130)) {
              return 1;
            }
            signed int v65 = (UText *)*((void *)this + 4);
            uint64_t v66 = v11 - v65->chunkNativeStart;
            if (v66 < 0 || v66 >= v65->nativeIndexingLimit || v65->chunkContents[v66] >> 10 > 0x36u)
            {
              utext_setNativeIndex(v65, v11);
              signed int v65 = (UText *)*((void *)this + 4);
              LODWORD(v66) = v65->chunkOffset;
            }

            else
            {
              v65->chunkint Offset = v66;
            }

            if ((int)v66 >= v65->chunkLength || (unsigned int v45 = v65->chunkContents[(int)v66], v45 >> 11 > 0x1A))
            {
              unsigned int v45 = utext_next32(v65);
              signed int v65 = (UText *)*((void *)this + 4);
              int32_t v67 = v65->chunkOffset;
            }

            else
            {
              int32_t v67 = v66 + 1;
              v65->chunkint Offset = v67;
            }

            if (v67 <= v65->nativeIndexingLimit) {
              int64_t v11 = v65->chunkNativeStart + v67;
            }
            else {
              int64_t v11 = ((uint64_t (*)(void))v65->pFuncs->mapOffsetToNative)();
            }
          }

          else
          {
            uint64_t v42 = v11 - v6->chunkNativeStart;
            if (v42 < 0 || v42 >= v6->nativeIndexingLimit || v6->chunkContents[v42] >> 10 > 0x36u)
            {
              utext_setNativeIndex(v6, v11);
              UErrorCode v6 = (UText *)*((void *)this + 4);
              LODWORD(v42) = v6->chunkOffset;
            }

            else
            {
              v6->chunkint Offset = v42;
            }

            BOOL v43 = __OFSUB__((_DWORD)v42, 1);
            int v44 = v42 - 1;
            if (v44 < 0 != v43 || (unsigned int v45 = v6->chunkContents[v44], v45 >> 11 > 0x1A))
            {
              unsigned int v45 = utext_previous32(v6);
              UErrorCode v6 = (UText *)*((void *)this + 4);
            }

            else
            {
              v6->chunkint Offset = v44;
            }

            uint64_t v46 = v11 - v6->chunkNativeStart;
            if (v46 < 0 || v46 >= v6->nativeIndexingLimit || v6->chunkContents[v46] >> 10 > 0x36u) {
              utext_setNativeIndex(v6, v11);
            }
            else {
              v6->chunkint Offset = v46;
            }
          }

          if ((*(_BYTE *)(*((void *)this + 1) + 24LL) & 1) != 0)
          {
            do
            {
              if (v45 == 10)
              {
                icu::RegexMatcher::MatchAt(this, v11, 0, a2);
                if (*((_BYTE *)this + 130)) {
                  return 1;
                }
                unsigned int v59 = (UText *)*((void *)this + 4);
                uint64_t v60 = v11 - v59->chunkNativeStart;
                if (v60 < 0 || v60 >= v59->nativeIndexingLimit || v59->chunkContents[v60] >> 10 > 0x36u) {
                  utext_setNativeIndex(v59, v11);
                }
                else {
                  v59->chunkint Offset = v60;
                }
              }

              if (v11 >= v17) {
                goto LABEL_32;
              }
              __int128 v61 = (UText *)*((void *)this + 4);
              uint64_t v62 = v61->chunkOffset;
              if ((int)v62 >= v61->chunkLength || (unsigned int v45 = v61->chunkContents[v62], v45 >> 11 > 0x1A))
              {
                unsigned int v45 = utext_next32(v61);
                __int128 v61 = (UText *)*((void *)this + 4);
                int32_t v63 = v61->chunkOffset;
              }

              else
              {
                int32_t v63 = v62 + 1;
                v61->chunkint Offset = v63;
              }

              if (v63 <= v61->nativeIndexingLimit) {
                int64_t v11 = v61->chunkNativeStart + v63;
              }
              else {
                int64_t v11 = ((uint64_t (*)(void))v61->pFuncs->mapOffsetToNative)();
              }
              uint64_t v64 = (unsigned int (*)(void, int64_t))*((void *)this + 37);
            }

            while (!v64 || v64(*((void *)this + 38), v11));
LABEL_186:
            char v2 = 0;
            UErrorCode v5 = U_REGEX_STOPPED_BY_CALLER;
            goto LABEL_5;
          }

          break;
        default:
          char v2 = 0;
          UErrorCode v5 = U_INTERNAL_PROGRAM_ERROR;
          goto LABEL_5;
      }

      while (1)
      {
        if ((v45 & 0xFFFFDF50) == 0)
        {
          if ((int)v45 > 132)
          {
            if (v45 - 8232 < 2 || v45 == 133) {
              goto LABEL_146;
            }
          }

          else
          {
            if (v45 - 10 < 3) {
              goto LABEL_146;
            }
            if (v45 == 13)
            {
              if (v11 < *((void *)this + 15))
              {
                uint64_t v47 = (UText *)*((void *)this + 4);
                uint64_t v48 = v47->chunkOffset;
                if (v49 == 10)
                {
                  int v50 = (UText *)*((void *)this + 4);
                  uint64_t v51 = v50->chunkOffset;
                  if ((int)v51 >= v50->chunkLength || v50->chunkContents[v51] >> 11 > 0x1Au)
                  {
                    utext_next32(v50);
                    int v50 = (UText *)*((void *)this + 4);
                    int32_t v52 = v50->chunkOffset;
                  }

                  else
                  {
                    int32_t v52 = v51 + 1;
                    v50->chunkint Offset = v52;
                  }

                  if (v52 <= v50->nativeIndexingLimit) {
                    int64_t v11 = v50->chunkNativeStart + v52;
                  }
                  else {
                    int64_t v11 = ((uint64_t (*)(void))v50->pFuncs->mapOffsetToNative)();
                  }
                }
              }

LABEL_146:
              icu::RegexMatcher::MatchAt(this, v11, 0, a2);
              if (*((_BYTE *)this + 130)) {
                return 1;
              }
              __int128 v53 = (UText *)*((void *)this + 4);
              uint64_t v54 = v11 - v53->chunkNativeStart;
              if (v54 < 0 || v54 >= v53->nativeIndexingLimit || v53->chunkContents[v54] >> 10 > 0x36u) {
                utext_setNativeIndex(v53, v11);
              }
              else {
                v53->chunkint Offset = v54;
              }
            }
          }
        }

        if (v11 >= v17) {
          goto LABEL_32;
        }
        uint64_t v55 = (UText *)*((void *)this + 4);
        uint64_t v56 = v55->chunkOffset;
        if ((int)v56 >= v55->chunkLength || (unsigned int v45 = v55->chunkContents[v56], v45 >> 11 > 0x1A))
        {
          unsigned int v45 = utext_next32(v55);
          uint64_t v55 = (UText *)*((void *)this + 4);
          int32_t v57 = v55->chunkOffset;
        }

        else
        {
          int32_t v57 = v56 + 1;
          v55->chunkint Offset = v57;
        }

        if (v57 <= v55->nativeIndexingLimit) {
          int64_t v11 = v55->chunkNativeStart + v57;
        }
        else {
          int64_t v11 = ((uint64_t (*)(void))v55->pFuncs->mapOffsetToNative)();
        }
        uint64_t v58 = (unsigned int (*)(void, int64_t))*((void *)this + 37);
        if (v58 && !v58(*((void *)this + 38), v11)) {
          goto LABEL_186;
        }
      }
    }

    goto LABEL_32;
  }

  return 0;
}

uint64_t icu::RegexMatcher::findUsingChunk(icu::RegexMatcher *this, UErrorCode *a2)
{
  uint64_t v4 = *((void *)this + 18);
  int v5 = v4;
  if (!(_DWORD)v4) {
    int v5 = *((_DWORD *)this + 28);
  }
  uint64_t v6 = *(void *)(*((void *)this + 4) + 48LL);
  if (*((_BYTE *)this + 130))
  {
    *((void *)this + 19) = v4;
    if (*((void *)this + 17) == v4)
    {
      if (*((void *)this + 15) <= v5)
      {
LABEL_15:
        char v8 = 0;
        *((_BYTE *)this + 13icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
        goto LABEL_16;
      }

      uint64_t v7 = v5 + 1LL;
      if ((*(_WORD *)(v6 + 2LL * v5) & 0xFC00) == 0xD800 && *((void *)this + 6) != v7)
      {
        if ((*(_WORD *)(v6 + 2 * v7) & 0xFC00) == 0xDC00) {
          v5 += 2;
        }
        else {
          ++v5;
        }
      }

      else
      {
        ++v5;
      }
    }
  }

  else if ((*((void *)this + 19) & 0x8000000000000000LL) == 0)
  {
LABEL_10:
    char v8 = 0;
LABEL_16:
    *((_BYTE *)this + 168) = 1;
    return v8;
  }

  uint64_t v9 = (_DWORD *)*((void *)this + 1);
  int v10 = *((_DWORD *)this + 30) - v9[31];
  if (v5 > v10) {
    goto LABEL_15;
  }
  switch(v9[36])
  {
    case 0:
      icu::RegexMatcher::MatchChunkAt(this, v5, 0, a2);
      char v8 = 0;
      if (*(int *)a2 <= 0)
      {
        do
        {
          if (*((_BYTE *)this + 130)) {
            return 1;
          }
          if (v5 >= v10) {
            goto LABEL_10;
          }
          uint64_t v22 = v5 + 1LL;
          if ((*(_WORD *)(v6 + 2LL * v5) & 0xFC00) == 0xD800 && *((void *)this + 15) != v22)
          {
            if ((*(_WORD *)(v6 + 2 * v22) & 0xFC00) == 0xDC00) {
              v5 += 2;
            }
            else {
              ++v5;
            }
          }

          else
          {
            ++v5;
          }

          int32_t v23 = (unsigned int (*)(void, void))*((void *)this + 37);
          if (v23 && !v23(*((void *)this + 38), v5)) {
            goto LABEL_109;
          }
          icu::RegexMatcher::MatchChunkAt(this, v5, 0, a2);
          char v8 = 0;
        }

        while (*(int *)a2 < 1);
      }

      return v8;
    case 1:
    case 5:
      int v12 = v9[42];
      int v13 = v5;
      while (1)
      {
        uint64_t v14 = v13 + 1LL;
        int v15 = *(unsigned __int16 *)(v6 + 2LL * v13);
        if ((v15 & 0xFC00) == 0xD800 && *((void *)this + 15) != v14)
        {
          int v16 = *(unsigned __int16 *)(v6 + 2 * v14);
          BOOL v17 = (v16 & 0xFC00) == 56320;
          int v18 = (v15 << 10) - 56613888 + v16;
          if (v17) {
            LODWORD(v14) = v13 + 2;
          }
          if (v17) {
            int v15 = v18;
          }
        }

        if (v15 == v12)
        {
          icu::RegexMatcher::MatchChunkAt(this, v13, 0, a2);
          if (*((_BYTE *)this + 130)) {
            return 1;
          }
        }

        uint64_t v19 = (uint64_t (*)(void, void))*((void *)this + 37);
        int v13 = v14;
        if (v19)
        {
          int v20 = v19(*((void *)this + 38), (int)v14);
          int v13 = v14;
          if (!v20) {
            goto LABEL_109;
          }
        }
      }

    case 2:
      while (2)
      {
        uint64_t v24 = v5 + 1LL;
        unint64_t v25 = *(unsigned __int16 *)(v6 + 2LL * v5);
        if ((v25 & 0xFC00) == 0xD800)
        {
          if (*((void *)this + 15) != v24)
          {
            int v26 = *(unsigned __int16 *)(v6 + 2 * v24);
            BOOL v27 = (v26 & 0xFC00) == 56320;
            int v28 = ((_DWORD)v25 << 10) - 56613888 + v26;
            if (v27) {
              LODWORD(v25) = v28;
            }
            if (v27) {
              LODWORD(v24) = v5 + 2;
            }
          }
        }

        else if (v25 <= 0xFF)
        {
          goto LABEL_61;
        }

void icu::RegexMatcher::MatchAt(icu::RegexMatcher *this, int64_t a2, int a3, UErrorCode *a4)
{
  uint64_t v8 = *((void *)this + 1);
  __int16 v9 = *(_WORD *)(v8 + 48);
  if ((v9 & 0x11) != 0)
  {
    uint64_t v10 = 0LL;
  }

  else if ((v9 & 2) != 0)
  {
    uint64_t v10 = v8 + 50;
  }

  else
  {
    uint64_t v10 = *(void *)(v8 + 64);
  }

  uint64_t v11 = *(void *)(*(void *)(v8 + 32) + 24LL);
  int v12 = *(icu::UVector **)(v8 + 104);
  *((_DWORD *)this + 14) = *(_DWORD *)(v8 + 128);
  int v13 = (int64_t *)icu::RegexMatcher::resetStack(this);
  UErrorCode v14 = *((_DWORD *)this + 79);
  if (v14 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    *a4 = v14;
    return;
  }

  int v15 = v13;
  v400 = v12;
  int v399 = a3;
  *int v13 = a2;
  v13[1] = 0LL;
  int64_t v398 = a2;
  uint64_t v16 = *(unsigned int *)(*((void *)this + 1) + 132LL);
  while (2)
  {
    int64_t v17 = v15[1];
    uint64_t v18 = *(void *)(v11 + 8 * v17);
    uint64_t v19 = v17 + 1;
    v15[1] = v17 + 1;
    UErrorCode v20 = U_INTERNAL_PROGRAM_ERROR;
    int v21 = v18 & 0xFFFFFF;
    switch(BYTE3(v18))
    {
      case 1:
        goto LABEL_317;
      case 2:
        if (v399 && *v15 != *((void *)this + 15)) {
          goto LABEL_317;
        }
        *((_BYTE *)this + 13icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 1;
        *((void *)this + 19) = *((void *)this + 18);
        *((void *)this + 17) = v398;
        *((void *)this + 18) = *v15;
        goto LABEL_778;
      case 3:
        int64_t v22 = *v15;
        if (*v15 >= *((void *)this + 15)) {
          goto LABEL_316;
        }
        int32_t v23 = (UText *)*((void *)this + 4);
        uint64_t v24 = v22 - v23->chunkNativeStart;
        if (v24 < 0 || v24 >= v23->nativeIndexingLimit || v23->chunkContents[v24] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v23, v22);
          int32_t v23 = (UText *)*((void *)this + 4);
          LODWORD(v24) = v23->chunkOffset;
        }

        else
        {
          v23->chunkint Offset = v24;
        }

        else {
          v23->chunkint Offset = v24 + 1;
        }
        if (v232 == v21) {
          goto LABEL_614;
        }
        goto LABEL_317;
      case 4:
        uint64_t v25 = *(void *)(v11 + 8 * v19);
        v15[1] = v17 + 2;
        int v26 = (UText *)*((void *)this + 4);
        uint64_t v27 = *v15 - v26->chunkNativeStart;
        if (v27 < 0 || v27 >= v26->nativeIndexingLimit || v26->chunkContents[v27] >> 10 > 0x36u) {
          utext_setNativeIndex(v26, *v15);
        }
        else {
          v26->chunkint Offset = v27;
        }
        int v181 = 0;
        int v182 = v25 & 0xFFFFFF;
        uint64_t v183 = v10 + 2 * (v18 & 0xFFFFFF);
        while (1)
        {
          __int128 v184 = (UText *)*((void *)this + 4);
          chunkint Offset = v184->chunkOffset;
          int nativeIndexingLimit = v184->nativeIndexingLimit;
          if (v181 >= v182) {
            goto LABEL_616;
          }
          else {
            uint64_t v187 = ((uint64_t (*)(void))v184->pFuncs->mapOffsetToNative)();
          }
          if (v187 >= *((void *)this + 15)) {
            goto LABEL_316;
          }
          uint64_t v188 = *((void *)this + 4);
          uint64_t v189 = *(int *)(v188 + 40);
          if ((int)v189 >= *(_DWORD *)(v188 + 44)
            || (unsigned int v190 = *(unsigned __int16 *)(*(void *)(v188 + 48) + 2 * v189), v190 >> 11 > 0x1A))
          {
            unsigned int v190 = utext_next32(*((UText **)this + 4));
          }

          else
          {
            *(_DWORD *)(v188 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v189 + 1;
          }

          uint64_t v191 = v181 + 1LL;
          int v192 = *(unsigned __int16 *)(v183 + 2LL * v181);
          if ((v192 & 0xFC00) == 0xD800 && (_DWORD)v191 != v182)
          {
            int v194 = *(unsigned __int16 *)(v183 + 2 * v191);
            BOOL v195 = (v194 & 0xFC00) == 56320;
            int v196 = (v192 << 10) - 56613888 + v194;
            if (v195) {
              int v192 = v196;
            }
            if (v195) {
              LODWORD(v19icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v181 + 2;
            }
          }

          int v181 = v191;
          if (v192 != v190) {
            goto LABEL_317;
          }
        }

      case 6:
        uint64_t v28 = *((void *)this + 22);
        int v29 = *((_DWORD *)this + 14);
        int v30 = *(_DWORD *)(v28 + 8);
        int v31 = v30 + v29;
        if (v30 + v29 >= 0 && *(_DWORD *)(v28 + 12) >= v31) {
          goto LABEL_29;
        }
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v31, a4))
        {
          int v30 = *(_DWORD *)(v28 + 8);
          int v31 = v30 + v29;
LABEL_29:
          uint64_t v32 = *(void *)(v28 + 24) + 8LL * v30;
          *(_DWORD *)(v28 + 8) = v31;
        }

        else
        {
          uint64_t v32 = 0LL;
        }

        uint64_t v317 = 0LL;
        uint64_t v318 = *((int *)this + 14);
        uint64_t v319 = v32 - 8 * v318;
        uint64_t v320 = -8 * v318;
        do
        {
          *(void *)(v32 + v317) = *(void *)(v319 + v317);
          v317 += 8LL;
        }

        while (v320 + v317);
        int v321 = *((_DWORD *)this + 68);
        BOOL v91 = __OFSUB__(v321--, 1);
        *((_DWORD *)this + 68) = v321;
        if ((v321 < 0) ^ v91 | (v321 == 0)) {
          icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
        }
        *(void *)(v319 + 8) = v18 & 0xFFFFFF;
LABEL_666:
        int v15 = (int64_t *)v32;
        goto LABEL_318;
      case 7:
        goto LABEL_318;
      case 8:
        int64_t v33 = *v15;
        uint64_t v34 = &v15[v21 + 2];
        goto LABEL_133;
      case 9:
        unsigned int v35 = v15 + 2;
        int64_t v36 = *v15;
        v15[(v18 & 0xFFFFFF) + 2] = v15[(v21 + 2) + 2];
        int v37 = v21 + 1;
        goto LABEL_170;
      case 0xA:
        int64_t v38 = *v15;
        if (*v15 >= *((void *)this + 15)) {
          goto LABEL_316;
        }
        __int128 v39 = (UText *)*((void *)this + 4);
        uint64_t v40 = v38 - v39->chunkNativeStart;
        if (v40 < 0 || v40 >= v39->nativeIndexingLimit || v39->chunkContents[v40] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v39, v38);
          __int128 v39 = (UText *)*((void *)this + 4);
          LODWORD(v4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v39->chunkOffset;
        }

        else
        {
          v39->chunkint Offset = v40;
        }

        else {
          v39->chunkint Offset = v40 + 1;
        }
        uint64_t v276 = v18 & 0x7FFFFF;
        if (v233 > 255) {
          BOOL v277 = icu::UnicodeSet::contains( (icu::UnicodeSet *)(qword_18C449BC0 + 200LL * v276 + 8),  v233) == 0;
        }
        else {
          BOOL v277 = ((*(unsigned __int8 *)(qword_18C449BC0 + 32 * v276 + (v233 >> 3) + 2608) >> (v233 & 7)) & 1) == 0;
        }
        if (v277) {
          unsigned int v298 = (v18 & 0x800000) >> 23;
        }
        else {
          unsigned int v298 = (v18 & 0x800000) == 0;
        }
        if (!v298) {
          goto LABEL_317;
        }
        goto LABEL_614;
      case 0xB:
        int64_t v41 = *v15;
        if (*v15 >= *((void *)this + 15)) {
          goto LABEL_316;
        }
        uint64_t v42 = (UText *)*((void *)this + 4);
        uint64_t v43 = v41 - v42->chunkNativeStart;
        if (v43 < 0 || v43 >= v42->nativeIndexingLimit || v42->chunkContents[v43] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v42, v41);
          uint64_t v42 = (UText *)*((void *)this + 4);
          LODWORD(v43) = v42->chunkOffset;
        }

        else
        {
          v42->chunkint Offset = v43;
        }

        else {
          v42->chunkint Offset = v43 + 1;
        }
        if (v234 > 255)
        {
          v299 = (icu::UnicodeSet *)icu::UVector::elementAt(v400, v18 & 0xFFFFFF);
        }

        else if (((*(unsigned __int8 *)(*(void *)(*((void *)this + 1) + 112LL) + 32 * (v18 & 0xFFFFFF) + (v234 >> 3)) >> (v234 & 7)) & 1) != 0)
        {
          goto LABEL_614;
        }

        goto LABEL_317;
      case 0xC:
        int64_t v44 = *v15;
        if (*v15 >= *((void *)this + 15)) {
          goto LABEL_316;
        }
        unsigned int v45 = (UText *)*((void *)this + 4);
        uint64_t v46 = v44 - v45->chunkNativeStart;
        if (v46 < 0 || v46 >= v45->nativeIndexingLimit || v45->chunkContents[v46] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v45, v44);
          unsigned int v45 = (UText *)*((void *)this + 4);
          LODWORD(v46) = v45->chunkOffset;
        }

        else
        {
          v45->chunkint Offset = v46;
        }

        else {
          v45->chunkint Offset = v46 + 1;
        }
        if ((v235 & 0xFFFFDF50) != 0 || v235 - 10 >= 4 && v235 - 8232 >= 2 && v235 != 133) {
          goto LABEL_614;
        }
        goto LABEL_317;
      case 0xD:
        goto LABEL_135;
      case 0xE:
        goto LABEL_777;
      case 0xF:
        uint64_t v47 = *((void *)this + 22);
        int v48 = *((_DWORD *)this + 14);
        int v49 = *(_DWORD *)(v47 + 8);
        int v50 = v49 + v48;
        if (v49 + v48 >= 0 && *(_DWORD *)(v47 + 12) >= v50) {
          goto LABEL_52;
        }
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v50, a4))
        {
          int v49 = *(_DWORD *)(v47 + 8);
          int v50 = v49 + v48;
LABEL_52:
          uint64_t v32 = *(void *)(v47 + 24) + 8LL * v49;
          *(_DWORD *)(v47 + 8) = v50;
        }

        else
        {
          uint64_t v32 = 0LL;
        }

        if (*(int *)a4 < 1)
        {
          uint64_t v351 = 0LL;
          uint64_t v352 = *((int *)this + 14);
          uint64_t v353 = v32 - 8 * v352;
          uint64_t v354 = -8 * v352;
          do
          {
            *(void *)(v32 + v35icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = *(void *)(v353 + v351);
            v351 += 8LL;
          }

          while (v354 + v351);
          int v355 = *((_DWORD *)this + 68);
          BOOL v91 = __OFSUB__(v355--, 1);
          *((_DWORD *)this + 68) = v355;
          if ((v355 < 0) ^ v91 | (v355 == 0)) {
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          }
          *(void *)(v353 + 8) = v19;
        }

        else
        {
          *a4 = U_REGEX_STACK_OVERFLOW;
LABEL_664:
          uint64_t v32 = (uint64_t)v15;
        }

        *(void *)(v32 + 8) = v18 & 0xFFFFFF;
        goto LABEL_666;
      case 0x10:
        int isWordBoundary = icu::RegexMatcher::isWordBoundary(this, *v15);
        goto LABEL_213;
      case 0x11:
        int64_t v52 = *v15;
        if (*((_BYTE *)this + 130)) {
          uint64_t v53 = *((void *)this + 18);
        }
        else {
          uint64_t v53 = *((void *)this + 14);
        }
        goto LABEL_440;
      case 0x12:
        uint64_t v54 = *(void *)(v11 + 8LL * (v21 - 1)) & 0xFFFFFFLL;
        if (v15[v54 + 2] >= *v15) {
          goto LABEL_318;
        }
        uint64_t v55 = *((void *)this + 22);
        int v56 = *((_DWORD *)this + 14);
        int v57 = *(_DWORD *)(v55 + 8);
        int v58 = v57 + v56;
        if (v57 + v56 >= 0 && *(_DWORD *)(v55 + 12) >= v58) {
          goto LABEL_62;
        }
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v58, a4))
        {
          int v57 = *(_DWORD *)(v55 + 8);
          int v58 = v57 + v56;
LABEL_62:
          unsigned int v59 = (int64_t *)(*(void *)(v55 + 24) + 8LL * v57);
          *(_DWORD *)(v55 + 8) = v58;
        }

        else
        {
          unsigned int v59 = 0LL;
        }

        if (*(int *)a4 < 1)
        {
          uint64_t v358 = 0LL;
          uint64_t v359 = *((int *)this + 14);
          v360 = &v59[-v359];
          uint64_t v361 = -8 * v359;
          do
          {
            v59[v358] = v360[v358];
            ++v358;
          }

          while (v361 + v358 * 8);
          int v362 = *((_DWORD *)this + 68);
          BOOL v91 = __OFSUB__(v362--, 1);
          *((_DWORD *)this + 68) = v362;
          if ((v362 < 0) ^ v91 | (v362 == 0)) {
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          }
          v360[1] = v19;
        }

        else
        {
          *a4 = U_REGEX_STACK_OVERFLOW;
LABEL_688:
          unsigned int v59 = v15;
        }

        v59[1] = v18 & 0xFFFFFF;
        int64_t v356 = *v59;
        v357 = &v59[v54];
        goto LABEL_721;
      case 0x13:
        if (*v15 >= *((void *)this + 15)) {
          goto LABEL_316;
        }
        uint64_t v60 = icu::RegexMatcher::followingGCBoundary(this, *v15, a4);
        int64_t *v15 = v60;
        int64_t v61 = *((void *)this + 15);
        if (v60 >= v61)
        {
          *((_BYTE *)this + 168) = 1;
          int64_t *v15 = v61;
        }

        goto LABEL_318;
      case 0x14:
        if (*v15 >= *((void *)this + 11)) {
          goto LABEL_751;
        }
        goto LABEL_317;
      case 0x15:
        int64_t v62 = *v15;
        if (*v15 >= *((void *)this + 15)) {
          goto LABEL_316;
        }
        int32_t v63 = (UText *)*((void *)this + 4);
        uint64_t v64 = v62 - v63->chunkNativeStart;
        if (v64 < 0 || v64 >= v63->nativeIndexingLimit || v63->chunkContents[v64] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v63, v62);
          int32_t v63 = (UText *)*((void *)this + 4);
          LODWORD(v64) = v63->chunkOffset;
        }

        else
        {
          v63->chunkint Offset = v64;
        }

        if ((int)v64 >= v63->chunkLength || (unsigned int v236 = v63->chunkContents[(int)v64], v236 >> 11 > 0x1A))
        {
          unsigned int v236 = utext_next32(v63);
          int32_t v63 = (UText *)*((void *)this + 4);
          int32_t v237 = v63->chunkOffset;
        }

        else
        {
          int32_t v237 = v64 + 1;
          v63->chunkint Offset = v237;
        }

        if (v237 <= v63->nativeIndexingLimit) {
          uint64_t v278 = v63->chunkNativeStart + v237;
        }
        else {
          uint64_t v278 = ((uint64_t (*)(void))v63->pFuncs->mapOffsetToNative)();
        }
        int64_t *v15 = v278;
        if (v236 != 13 || v278 >= *((void *)this + 15)) {
          goto LABEL_318;
        }
        v300 = (UText *)*((void *)this + 4);
        uint64_t v301 = v300->chunkOffset;
        if (v302 != 10) {
          goto LABEL_318;
        }
        __int128 v184 = (UText *)*((void *)this + 4);
        uint64_t v303 = v184->chunkOffset;
        if ((int)v303 >= v184->chunkLength || v184->chunkContents[v303] >> 11 > 0x1Au)
        {
          utext_next32(v184);
          __int128 v184 = (UText *)*((void *)this + 4);
          int32_t v304 = v184->chunkOffset;
        }

        else
        {
          int32_t v304 = v303 + 1;
          v184->chunkint Offset = v304;
        }

        if (v304 > v184->nativeIndexingLimit) {
          goto LABEL_617;
        }
        uint64_t v322 = v184->chunkNativeStart + v304;
        goto LABEL_619;
      case 0x16:
        int64_t v65 = *v15;
        if (*v15 >= *((void *)this + 15)) {
          goto LABEL_316;
        }
        uint64_t v66 = (UText *)*((void *)this + 4);
        uint64_t v67 = v65 - v66->chunkNativeStart;
        if (v67 < 0 || v67 >= v66->nativeIndexingLimit || v66->chunkContents[v67] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v66, v65);
          uint64_t v66 = (UText *)*((void *)this + 4);
          LODWORD(v67) = v66->chunkOffset;
        }

        else
        {
          v66->chunkint Offset = v67;
        }

        else {
          v66->chunkint Offset = v67 + 1;
        }
        BOOL v279 = u_charType(v238) == 9;
        goto LABEL_497;
      case 0x17:
        int64_t v52 = *v15;
        uint64_t v53 = *((void *)this + 10);
LABEL_440:
        if (v52 == v53) {
          goto LABEL_318;
        }
        goto LABEL_317;
      case 0x18:
        int64_t v68 = *v15;
        if (*v15 >= *((void *)this + 11)) {
          goto LABEL_751;
        }
        uint64_t v69 = (UText *)*((void *)this + 4);
        uint64_t v70 = v68 - v69->chunkNativeStart;
        if (v70 < 0 || v70 >= v69->nativeIndexingLimit || v69->chunkContents[v70] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v69, v68);
          uint64_t v69 = (UText *)*((void *)this + 4);
          LODWORD(v7icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v69->chunkOffset;
        }

        else
        {
          v69->chunkint Offset = v70;
        }

        if ((int)v70 >= v69->chunkLength || (unsigned int v239 = v69->chunkContents[(int)v70], v239 >> 11 > 0x1A))
        {
          unsigned int v239 = utext_next32(v69);
          uint64_t v69 = (UText *)*((void *)this + 4);
          int32_t v240 = v69->chunkOffset;
        }

        else
        {
          int32_t v240 = v70 + 1;
          v69->chunkint Offset = v240;
        }

        if (v240 <= v69->nativeIndexingLimit) {
          uint64_t v280 = v69->chunkNativeStart + v240;
        }
        else {
          uint64_t v280 = ((uint64_t (*)(void))v69->pFuncs->mapOffsetToNative)();
        }
        if (v280 >= *((void *)this + 11))
        {
          if (sub_180976A78(v239))
          {
            if (v239 != 10 || *v15 <= *((void *)this + 10)) {
              goto LABEL_751;
            }
            v314 = (UText *)*((void *)this + 4);
            int32_t v315 = v314->chunkOffset;
            BOOL v91 = __OFSUB__(v315, 1);
            int v316 = v315 - 1;
            if (v316 < 0 != v91 || v314->chunkContents[v316] >> 11 > 0x1Au)
            {
              utext_previous32(v314);
              v314 = (UText *)*((void *)this + 4);
              int v316 = v314->chunkOffset;
            }

            else
            {
              v314->chunkint Offset = v316;
            }

            int32_t v387 = v316 - 1;
            if (v316 < 1 || (unsigned int v388 = v314->chunkContents[v387], v388 >> 11 > 0x1A)) {
              unsigned int v388 = utext_previous32(v314);
            }
            else {
              v314->chunkint Offset = v387;
            }
            if (v388 != 13)
            {
LABEL_751:
              *((_WORD *)this + 84) = 257;
              goto LABEL_318;
            }
          }
        }

        else
        {
          v305 = (UText *)*((void *)this + 4);
          uint64_t v306 = v305->chunkOffset;
          else {
            v305->chunkint Offset = v306 + 1;
          }
          if (v239 == 13 && v307 == 10)
          {
            uint64_t v323 = *((void *)this + 4);
            uint64_t v324 = *(int *)(v323 + 40);
            uint64_t v325 = (int)v324 <= *(_DWORD *)(v323 + 28)
                 ? *(void *)(v323 + 32) + v324
                 : (*(uint64_t (**)(void))(*(void *)(v323 + 56) + 64LL))();
            if (v325 >= *((void *)this + 11)) {
              goto LABEL_751;
            }
          }
        }

LABEL_317:
        uint64_t v225 = *((void *)this + 22);
        uint64_t v226 = *((int *)this + 14);
        unsigned int v227 = (*(_DWORD *)(v225 + 8) - v226) & ~((*(_DWORD *)(v225 + 8) - (int)v226) >> 31);
        *(_DWORD *)(v225 + 8) = v227;
        int v15 = (int64_t *)(*(void *)(v225 + 24) + 8LL * v227 - 8 * v226);
        goto LABEL_318;
      case 0x19:
        v15[(v18 & 0xFFFFFF) + 2] = 0LL;
        v15[1] = v17 + 4;
        int v71 = *(_DWORD *)(v11 + (((v19 << 32) + 0x200000000LL) >> 29));
        uint64_t v72 = *(void *)(v11 + 8LL * (int)v19);
        uint64_t v73 = *((void *)this + 22);
        int v74 = *((_DWORD *)this + 14);
        int v75 = *(_DWORD *)(v73 + 8);
        int v76 = v75 + v74;
        if (v75 + v74 >= 0 && *(_DWORD *)(v73 + 12) >= v76) {
          goto LABEL_90;
        }
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v76, a4))
        {
          int v75 = *(_DWORD *)(v73 + 8);
          int v76 = v75 + v74;
LABEL_90:
          unsigned int v59 = (int64_t *)(*(void *)(v73 + 24) + 8LL * v75);
          *(_DWORD *)(v73 + 8) = v76;
        }

        else
        {
          unsigned int v59 = 0LL;
        }

        if (*(int *)a4 < 1)
        {
          uint64_t v371 = 0LL;
          uint64_t v372 = *((int *)this + 14);
          v373 = &v59[-v372];
          uint64_t v374 = -8 * v372;
          do
          {
            v59[v371] = v373[v371];
            ++v371;
          }

          while (v374 + v371 * 8);
          int v375 = *((_DWORD *)this + 68);
          BOOL v91 = __OFSUB__(v375--, 1);
          *((_DWORD *)this + 68) = v375;
          if ((v375 < 0) ^ v91 | (v375 == 0)) {
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          }
          v373[1] = (v72 & 0xFFFFFF) + 1;
          if (!v71) {
            goto LABEL_317;
          }
        }

        else
        {
          *a4 = U_REGEX_STACK_OVERFLOW;
LABEL_718:
          unsigned int v59 = v15;
          if (!v71) {
            goto LABEL_317;
          }
        }

        if (v71 == -1)
        {
          int64_t v356 = *v59;
          v357 = &v59[v21 + 1];
LABEL_721:
          v357[2] = v356;
        }

        goto LABEL_764;
      case 0x1A:
        v15[(v18 & 0xFFFFFF) + 2] = 0LL;
        uint64_t v77 = v17 + 4;
        v15[1] = v17 + 4;
        uint64_t v78 = *(void *)(v11 + 8LL * (int)v19);
        uint64_t v79 = *(unsigned int *)(v11 + (((v19 << 32) + 0x100000000LL) >> 29));
        int v80 = *(_DWORD *)(v11 + (((v19 << 32) + 0x200000000LL) >> 29));
        if (v80 == -1)
        {
          v15[(v21 + 1) + 2] = *v15;
          if (v79) {
            goto LABEL_318;
          }
LABEL_443:
          int v15 = (int64_t *)sub_18097B2D8(this, (uint64_t)v15, v77, a4);
          goto LABEL_444;
        }

        if (*(_DWORD *)(v11 + (((v19 << 32) + 0x100000000LL) >> 29))) {
          goto LABEL_318;
        }
        if (v80) {
          goto LABEL_443;
        }
LABEL_444:
        uint64_t v111 = (v78 & 0xFFFFFF) + 1;
LABEL_654:
        v15[1] = v111;
        goto LABEL_318;
      case 0x1B:
        int64_t v81 = *v15;
        if (*v15 >= *((void *)this + 15)) {
          goto LABEL_316;
        }
        int v82 = (UText *)*((void *)this + 4);
        uint64_t v83 = v81 - v82->chunkNativeStart;
        if (v83 < 0 || v83 >= v82->nativeIndexingLimit || v82->chunkContents[v83] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v82, v81);
          int v82 = (UText *)*((void *)this + 4);
          LODWORD(v83) = v82->chunkOffset;
        }

        else
        {
          v82->chunkint Offset = v83;
        }

        else {
          v82->chunkint Offset = v83 + 1;
        }
        if (v241 != 10) {
          goto LABEL_614;
        }
        goto LABEL_317;
      case 0x1C:
        uint64_t v84 = *(void *)(v11 + 8 * (v18 & 0xFFFFFF)) & 0xFFFFFFLL;
        uint64_t v85 = &v15[v84];
        uint64_t v86 = *(void *)(v11 + 8LL * (v21 + 2));
        uint64_t v87 = *(void *)(v11 + 8LL * (v21 + 3));
        uint64_t v88 = v85[2] + 1;
        v85[2] = v88;
        if (v88 >= (int)v86)
        {
          if ((_DWORD)v87 == -1)
          {
            v291 = &v15[v84];
            int64_t v293 = v291[3];
            v292 = v291 + 3;
            if (*v15 == v293) {
              goto LABEL_318;
            }
            int64_t *v292 = *v15;
          }

          int v15 = (int64_t *)sub_18097B2D8(this, (uint64_t)v15, v19, a4);
        }

        else
        {
          int v90 = *((_DWORD *)this + 68);
          BOOL v91 = __OFSUB__(v90--, 1);
          *((_DWORD *)this + 68) = v90;
          if ((v90 < 0) ^ v91 | (v90 == 0)) {
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          }
        }

        uint64_t v111 = (v21 + 4);
        goto LABEL_654;
      case 0x1D:
        uint64_t v92 = *(void *)(v11 + 8 * (v18 & 0xFFFFFF)) & 0xFFFFFFLL;
        uint64_t v93 = &v15[v92];
        uint64_t v94 = *(void *)(v11 + 8LL * (v21 + 2));
        uint64_t v95 = *(void *)(v11 + 8LL * (v21 + 3));
        uint64_t v96 = v93[2] + 1;
        _OWORD v93[2] = v96;
        if (v96 >= (int)v94)
        {
          if ((_DWORD)v95 == -1)
          {
            v294 = &v15[v92];
            int64_t v296 = v294[3];
            v295 = v294 + 3;
            if (*v15 == v296) {
              goto LABEL_318;
            }
            int64_t *v295 = *v15;
          }

          int v15 = (int64_t *)sub_18097B2D8(this, (uint64_t)v15, (v21 + 4), a4);
        }

        else
        {
          v15[1] = (v21 + 4);
          int v98 = *((_DWORD *)this + 68);
          BOOL v91 = __OFSUB__(v98--, 1);
          *((_DWORD *)this + 68) = v98;
          if ((v98 < 0) ^ v91 | (v98 == 0)) {
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          }
        }

        goto LABEL_318;
      case 0x1E:
        int64_t v99 = *v15;
        if (*v15 <= *((void *)this + 10)) {
          goto LABEL_318;
        }
        uint64_t v100 = (UText *)*((void *)this + 4);
        uint64_t v101 = v99 - v100->chunkNativeStart;
        if (v101 < 0 || v101 >= v100->nativeIndexingLimit || v100->chunkContents[v101] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v100, v99);
          uint64_t v100 = (UText *)*((void *)this + 4);
          LODWORD(v10icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v100->chunkOffset;
        }

        else
        {
          v100->chunkint Offset = v101;
        }

        int32_t v242 = v101 - 1;
        if ((int)v101 < 1 || (unsigned int v243 = v100->chunkContents[v242], v243 >> 11 > 0x1A))
        {
          UChar32 v266 = utext_previous32(v100);
LABEL_512:
          unsigned int v243 = v266;
        }

        else
        {
          v100->chunkint Offset = v242;
        }

LABEL_513:
        if (v243 == 10) {
          goto LABEL_318;
        }
        goto LABEL_317;
      case 0x20:
        *(void *)(*((void *)this + 24) + 8 * (v18 & 0xFFFFFF)) = *(int *)(*((void *)this + 22) + 8LL);
        goto LABEL_318;
      case 0x21:
        uint64_t v102 = *(void *)(*((void *)this + 24) + 8 * (v18 & 0xFFFFFF));
        uint64_t v103 = (icu::UVector64 *)*((void *)this + 22);
        uint64_t v32 = *((void *)v103 + 3) + 8LL * (int)v102 - 8LL * *((int *)this + 14);
        uint64_t v104 = *((unsigned int *)this + 14);
        if ((int)v104 >= 1)
        {
          uint64_t v105 = (int64_t *)(*((void *)v103 + 3) + 8LL * (int)v102 - 8LL * *((int *)this + 14));
          do
          {
            int64_t v106 = *v15++;
            *v105++ = v106;
            --v104;
          }

          while (v104);
        }

        icu::UVector64::setSize(v103, v102);
        goto LABEL_666;
      case 0x22:
        int64_t v107 = v15[(v18 & 0xFFFFFF) + 2];
        if (v107 < 0) {
          goto LABEL_317;
        }
        int64_t v108 = v15[(v21 + 1) + 2];
        uint64_t v109 = (UText *)*((void *)this + 5);
        uint64_t v110 = v107 - v109->chunkNativeStart;
        if (v110 < 0 || v110 >= v109->nativeIndexingLimit || v109->chunkContents[v110] >> 10 > 0x36u) {
          utext_setNativeIndex(v109, v107);
        }
        else {
          v109->chunkint Offset = v110;
        }
        v221 = (UText *)*((void *)this + 4);
        uint64_t v222 = *v15 - v221->chunkNativeStart;
        if (v222 < 0 || v222 >= v221->nativeIndexingLimit || v221->chunkContents[v222] >> 10 > 0x36u) {
          utext_setNativeIndex(v221, *v15);
        }
        else {
          v221->chunkint Offset = v222;
        }
        while (2)
        {
          int64_t NativeIndex = utext_getNativeIndex(*((const UText **)this + 5));
          __int128 v184 = (UText *)*((void *)this + 4);
          if (NativeIndex >= v108)
          {
LABEL_615:
            chunkint Offset = v184->chunkOffset;
            int nativeIndexingLimit = v184->nativeIndexingLimit;
LABEL_616:
            else {
LABEL_617:
            }
              uint64_t v322 = ((uint64_t (*)(void))v184->pFuncs->mapOffsetToNative)();
LABEL_619:
            int64_t *v15 = v322;
            goto LABEL_318;
          }

          if (utext_getNativeIndex(v184) < *((void *)this + 15))
          {
            UChar32 v224 = utext_next32(*((UText **)this + 5));
            if (utext_next32(*((UText **)this + 4)) != v224) {
              goto LABEL_317;
            }
            continue;
          }

          break;
        }

LABEL_605:
          int64_t v270 = ((uint64_t (*)(void))v138->pFuncs->mapOffsetToNative)();
          goto LABEL_638;
        }

        int64_t v270 = *v15 - (int)v136;
        *(void *)(v140 + 8 * v14icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v270;
        if (v270 < 1) {
          goto LABEL_639;
        }
        uint64_t v271 = v270 - v138->chunkNativeStart;
        if (v271 < 0 || (uint64_t v272 = v138->nativeIndexingLimit, v271 >= v272) || v138->chunkContents[v271] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v138, v270);
          int v138 = (UText *)*((void *)this + 4);
          LODWORD(v27icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v138->chunkOffset;
          LODWORD(v272) = v138->nativeIndexingLimit;
        }

        else
        {
          v138->chunkint Offset = v271;
        }

        int64_t v270 = v138->chunkNativeStart + (int)v271;
LABEL_638:
        *(void *)(v140 + 8 * v14icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v270;
LABEL_639:
        if (v270 < 0 || v270 < *v15 - v139) {
          goto LABEL_641;
        }
        int64_t v340 = v15[1];
        uint64_t v341 = *((void *)this + 22);
        int v342 = *((_DWORD *)this + 14);
        int v343 = *(_DWORD *)(v341 + 8);
        int v344 = v343 + v342;
        if (v343 + v342 >= 0 && *(_DWORD *)(v341 + 12) >= v344) {
          goto LABEL_648;
        }
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v344, a4))
        {
          int v343 = *(_DWORD *)(v341 + 8);
          int v344 = v343 + v342;
LABEL_648:
          unsigned int v59 = (int64_t *)(*(void *)(v341 + 24) + 8LL * v343);
          *(_DWORD *)(v341 + 8) = v344;
        }

        else
        {
          unsigned int v59 = 0LL;
        }

        uint64_t v389 = 0LL;
        int64_t v390 = v340 - 3;
        uint64_t v391 = *((int *)this + 14);
        v392 = &v59[-v391];
        uint64_t v393 = -8 * v391;
        do
        {
          v59[v389] = v392[v389];
          ++v389;
        }

        while (v393 + v389 * 8);
        goto LABEL_767;
      case 0x2E:
        if (*v15 != *((void *)this + 15)) {
          goto LABEL_317;
        }
        uint64_t v114 = *((void *)this + 24);
LABEL_322:
        *((void *)this + 14) = *(void *)(v114 + 8LL * (v21 + 2));
        uint64_t v228 = *(void *)(v114 + 8LL * (v21 + 3));
        goto LABEL_642;
      case 0x2F:
        v15[1] = v17 + 2;
        uint64_t v144 = *(void *)(v11 + 8 * v19);
        v15[1] = v17 + 3;
        signed int v145 = (UText *)*((void *)this + 4);
        if (v145->pFuncs->mapNativeIndexToUTF16) {
          uint64_t v146 = 3LL * *(void *)(v11 + 8 * (v17 + 2));
        }
        else {
          uint64_t v146 = *(void *)(v11 + 8 * (v17 + 2));
        }
        v15[1] = v17 + 4;
        uint64_t v147 = *(void *)(v11 + 8 * (v17 + 3));
        uint64_t v140 = *((void *)this + 24);
        uint64_t v141 = (v21 + 4);
        int64_t v148 = *(void *)(v140 + 8LL * v141);
        if ((v148 & 0x8000000000000000LL) == 0)
        {
          if (!v148)
          {
            *(void *)(v140 + 8 * v14icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = -1LL;
LABEL_653:
            uint64_t v111 = v147 & 0xFFFFFF;
            uint64_t v345 = *((void *)this + 24);
            *((void *)this + 14) = *(void *)(v345 + 8LL * (v21 + 2));
            *((void *)this + 15) = *(void *)(v345 + 8LL * (v21 + 3));
            goto LABEL_654;
          }

          uint64_t v149 = v148 - v145->chunkNativeStart;
          if (v149 < 0 || v149 >= v145->nativeIndexingLimit || v145->chunkContents[v149] >> 10 > 0x36u)
          {
            utext_setNativeIndex(v145, v148);
            signed int v145 = (UText *)*((void *)this + 4);
            LODWORD(v149) = v145->chunkOffset;
          }

          else
          {
            v145->chunkint Offset = v149;
          }

          BOOL v91 = __OFSUB__((_DWORD)v149, 1);
          int v290 = v149 - 1;
          if (v290 < 0 != v91 || v145->chunkContents[v290] >> 11 > 0x1Au)
          {
            utext_previous32(v145);
            signed int v145 = (UText *)*((void *)this + 4);
            int v290 = v145->chunkOffset;
          }

          else
          {
            v145->chunkint Offset = v290;
          }

          if (v290 <= v145->nativeIndexingLimit)
          {
            int64_t v273 = v145->chunkNativeStart + v290;
            goto LABEL_650;
          }

LABEL_608:
          int64_t v273 = ((uint64_t (*)(void))v145->pFuncs->mapOffsetToNative)();
          goto LABEL_650;
        }

        int64_t v273 = *v15 - (int)v144;
        *(void *)(v140 + 8 * v14icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v273;
        if (v273 < 1) {
          goto LABEL_651;
        }
        uint64_t v274 = v273 - v145->chunkNativeStart;
        if (v274 < 0 || (uint64_t v275 = v145->nativeIndexingLimit, v274 >= v275) || v145->chunkContents[v274] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v145, v273);
          signed int v145 = (UText *)*((void *)this + 4);
          LODWORD(v274) = v145->chunkOffset;
          LODWORD(v275) = v145->nativeIndexingLimit;
        }

        else
        {
          v145->chunkint Offset = v274;
        }

        int64_t v273 = v145->chunkNativeStart + (int)v274;
LABEL_650:
        *(void *)(v140 + 8 * v14icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v273;
LABEL_651:
        int64_t v346 = v15[1];
        uint64_t v347 = *((void *)this + 22);
        int v348 = *((_DWORD *)this + 14);
        int v349 = *(_DWORD *)(v347 + 8);
        int v350 = v349 + v348;
        if (v349 + v348 >= 0 && *(_DWORD *)(v347 + 12) >= v350) {
          goto LABEL_660;
        }
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v350, a4))
        {
          int v349 = *(_DWORD *)(v347 + 8);
          int v350 = v349 + v348;
LABEL_660:
          unsigned int v59 = (int64_t *)(*(void *)(v347 + 24) + 8LL * v349);
          *(_DWORD *)(v347 + 8) = v350;
        }

        else
        {
          unsigned int v59 = 0LL;
        }

        if (*(int *)a4 < 1)
        {
          uint64_t v394 = 0LL;
          int64_t v390 = v346 - 4;
          uint64_t v395 = *((int *)this + 14);
          v392 = &v59[-v395];
          uint64_t v396 = -8 * v395;
          do
          {
            v59[v394] = v392[v394];
            ++v394;
          }

          while (v396 + v394 * 8);
LABEL_767:
          int v397 = *((_DWORD *)this + 68);
          BOOL v91 = __OFSUB__(v397--, 1);
          *((_DWORD *)this + 68) = v397;
          if ((v397 < 0) ^ v91 | (v397 == 0)) {
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          }
          v392[1] = v390;
        }

        else
        {
LABEL_761:
          *a4 = U_REGEX_STACK_OVERFLOW;
LABEL_762:
          unsigned int v59 = v15;
        }

        int64_t *v59 = *(void *)(v140 + 8 * v141);
        goto LABEL_764;
      case 0x30:
        if (*v15 == *((void *)this + 15))
        {
          uint64_t v150 = *((void *)this + 24);
          *((void *)this + 14) = *(void *)(v150 + 8LL * (v21 + 2));
          *((void *)this + 15) = *(void *)(v150 + 8LL * (v21 + 3));
          icu::UVector64::setSize(*((icu::UVector64 **)this + 22), *(void *)(v150 + 8 * (v18 & 0xFFFFFF)));
        }

        goto LABEL_317;
      case 0x31:
        int64_t v151 = *v15;
        if (*v15 >= *((void *)this + 15)) {
          goto LABEL_316;
        }
        uint64_t v152 = (UText *)*((void *)this + 4);
        uint64_t v153 = v151 - v152->chunkNativeStart;
        if (v153 < 0 || v153 >= v152->nativeIndexingLimit || v152->chunkContents[v153] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v152, v151);
          uint64_t v152 = (UText *)*((void *)this + 4);
          LODWORD(v153) = v152->chunkOffset;
        }

        else
        {
          v152->chunkint Offset = v153;
        }

        else {
          v152->chunkint Offset = v153 + 1;
        }
        uint64_t v281 = v18 & 0xFFFFFF;
        if (v252 > 255)
        {
          if (icu::UnicodeSet::contains( (icu::UnicodeSet *)(qword_18C449BC0 + 200LL * v281 + 8),  v252)) {
            goto LABEL_317;
          }
        }

        else if (((*(unsigned __int8 *)(qword_18C449BC0 + 32 * v281 + (v252 >> 3) + 2608) >> (v252 & 7)) & 1) != 0)
        {
          goto LABEL_317;
        }

        goto LABEL_614;
      case 0x32:
        uint64_t v154 = *(void *)(*((void *)this + 1) + 112LL);
        v155 = (icu::UnicodeSet *)icu::UVector::elementAt(v400, v18 & 0xFFFFFF);
        uint64_t v156 = *v15;
        uint64_t v157 = (UText *)*((void *)this + 4);
        uint64_t v158 = *v15 - v157->chunkNativeStart;
        if (v158 < 0 || v158 >= v157->nativeIndexingLimit || v157->chunkContents[v158] >> 10 > 0x36u) {
          utext_setNativeIndex(v157, *v15);
        }
        else {
          v157->chunkint Offset = v158;
        }
        if (v156 >= *((void *)this + 15)) {
          goto LABEL_298;
        }
        uint64_t v210 = v154 + 32 * (v18 & 0xFFFFFF);
        do
        {
          uint64_t v211 = (UText *)*((void *)this + 4);
          uint64_t v212 = v211->chunkOffset;
          else {
            v211->chunkint Offset = v212 + 1;
          }
          if (v213 > 255)
          {
          }

          else if (((*(unsigned __int8 *)(v210 + (v213 >> 3)) >> (v213 & 7)) & 1) == 0)
          {
            goto LABEL_299;
          }

          uint64_t v214 = *((void *)this + 4);
          uint64_t v215 = *(int *)(v214 + 40);
          else {
            uint64_t v156 = (*(uint64_t (**)(void))(*(void *)(v214 + 56) + 64LL))();
          }
        }

        while (v156 < *((void *)this + 15));
LABEL_298:
        *((_BYTE *)this + 168) = 1;
LABEL_299:
        int64_t v216 = v15[1];
        if (v156 == *v15) {
          goto LABEL_412;
        }
        v15[(*(void *)(v11 + 8 * v216) & 0xFFFFFFLL) + 2] = *v15;
        int64_t *v15 = v156;
        uint64_t v217 = *((void *)this + 22);
        int v218 = *((_DWORD *)this + 14);
        int v219 = *(_DWORD *)(v217 + 8);
        int v220 = v219 + v218;
        if (v219 + v218 >= 0 && *(_DWORD *)(v217 + 12) >= v220) {
          goto LABEL_305;
        }
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v220, a4))
        {
          int v219 = *(_DWORD *)(v217 + 8);
          int v220 = v219 + v218;
LABEL_305:
          unsigned int v59 = (int64_t *)(*(void *)(v217 + 24) + 8LL * v219);
          *(_DWORD *)(v217 + 8) = v220;
        }

        else
        {
          unsigned int v59 = 0LL;
        }

        uint64_t v363 = 0LL;
        uint64_t v364 = *((int *)this + 14);
        v365 = &v59[-v364];
        uint64_t v366 = -8 * v364;
        do
        {
          v59[v363] = v365[v363];
          ++v363;
        }

        while (v366 + v363 * 8);
        goto LABEL_708;
      case 0x33:
        int64_t v159 = v15[(v18 & 0xFFFFFF) + 2];
        int64_t v160 = *v15;
        if (v159 == *v15) {
          goto LABEL_318;
        }
        unsigned int v161 = (UText *)*((void *)this + 4);
        uint64_t v162 = v160 - v161->chunkNativeStart;
        if (v162 < 0 || v162 >= v161->nativeIndexingLimit || v161->chunkContents[v162] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v161, v160);
          unsigned int v161 = (UText *)*((void *)this + 4);
          LODWORD(v162) = v161->chunkOffset;
        }

        else
        {
          v161->chunkint Offset = v162;
        }

        int32_t v253 = v162 - 1;
        if ((int)v162 < 1 || (unsigned int v254 = v161->chunkContents[v253], v254 >> 11 > 0x1A))
        {
          unsigned int v254 = utext_previous32(v161);
          unsigned int v161 = (UText *)*((void *)this + 4);
          int32_t v253 = v161->chunkOffset;
        }

        else
        {
          v161->chunkint Offset = v253;
        }

        if (v253 <= v161->nativeIndexingLimit)
        {
          uint64_t v288 = v161->chunkNativeStart + v253;
        }

        else
        {
          uint64_t v288 = ((uint64_t (*)(void))v161->pFuncs->mapOffsetToNative)();
          unsigned int v161 = (UText *)*((void *)this + 4);
          int32_t v253 = v161->chunkOffset;
        }

        int64_t *v15 = v288;
        BOOL v91 = __OFSUB__(v253, 1);
        int v308 = v253 - 1;
        if (v308 < 0 != v91 || (unsigned int v309 = v161->chunkContents[v308], v309 >> 11 > 0x1A)) {
          unsigned int v309 = utext_previous32(v161);
        }
        else {
          v161->chunkint Offset = v308;
        }
        if (v254 == 10)
        {
          BOOL v310 = *v15 > v159 && v309 == 13;
          if (v310 && (unint64_t)*(unsigned __int8 *)(v11 + 8 * v15[1] - 13) << 24 == 872415232)
          {
            uint64_t v311 = *((void *)this + 4);
            uint64_t v312 = *(int *)(v311 + 40);
            else {
              uint64_t v313 = (*(uint64_t (**)(void))(*(void *)(v311 + 56) + 64LL))();
            }
            int64_t *v15 = v313;
          }
        }

        int64_t v376 = v15[1];
        uint64_t v377 = *((void *)this + 22);
        int v378 = *((_DWORD *)this + 14);
        int v379 = *(_DWORD *)(v377 + 8);
        int v380 = v379 + v378;
        if (v379 + v378 >= 0 && *(_DWORD *)(v377 + 12) >= v380) {
          goto LABEL_736;
        }
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v380, a4))
        {
          int v379 = *(_DWORD *)(v377 + 8);
          int v380 = v379 + v378;
LABEL_736:
          unsigned int v59 = (int64_t *)(*(void *)(v377 + 24) + 8LL * v379);
          *(_DWORD *)(v377 + 8) = v380;
        }

        else
        {
          unsigned int v59 = 0LL;
        }

        if (*(int *)a4 <= 0)
        {
          uint64_t v381 = 0LL;
          int64_t v382 = v376 - 1;
          uint64_t v383 = *((int *)this + 14);
          v384 = &v59[-v383];
          uint64_t v385 = -8 * v383;
          do
          {
            v59[v381] = v384[v381];
            ++v381;
          }

          while (v385 + v381 * 8);
          int v386 = *((_DWORD *)this + 68);
          BOOL v91 = __OFSUB__(v386--, 1);
          *((_DWORD *)this + 68) = v386;
          if ((v386 < 0) ^ v91 | (v386 == 0)) {
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          }
          v384[1] = v382;
LABEL_764:
          int v15 = v59;
LABEL_318:
          continue;
        }

LABEL_775:
        UErrorCode v20 = U_REGEX_STACK_OVERFLOW;
LABEL_776:
        *a4 = v20;
LABEL_777:
        *((_BYTE *)this + 13icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
LABEL_778:
        *((void *)this + 23) = v15;
        return;
      case 0x34:
        if ((v18 & 1) != 0)
        {
          uint64_t v163 = *((void *)this + 15);
LABEL_410:
          *((_BYTE *)this + 168) = 1;
          goto LABEL_411;
        }

        uint64_t v163 = *v15;
        unsigned int v164 = (UText *)*((void *)this + 4);
        uint64_t v165 = *v15 - v164->chunkNativeStart;
        if (v165 < 0 || v165 >= v164->nativeIndexingLimit || v164->chunkContents[v165] >> 10 > 0x36u) {
          utext_setNativeIndex(v164, *v15);
        }
        else {
          v164->chunkint Offset = v165;
        }
        if (v163 >= *((void *)this + 15)) {
          goto LABEL_410;
        }
        while (1)
        {
          uint64_t v255 = *((void *)this + 4);
          uint64_t v256 = *(int *)(v255 + 40);
          if ((int)v256 >= *(_DWORD *)(v255 + 44)
            || (unsigned int v257 = *(unsigned __int16 *)(*(void *)(v255 + 48) + 2 * v256), v257 >> 11 > 0x1A))
          {
            unsigned int v257 = utext_next32(*((UText **)this + 4));
          }

          else
          {
            *(_DWORD *)(v255 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v256 + 1;
          }

          if ((v257 & 0x7E) <= 0x29)
          {
            if (v257 == 10) {
              break;
            }
            if (!(v257 & 0xFFFFDF50 | v18 & 2))
            {
              BOOL v258 = v257 - 11 >= 3 && v257 - 8232 >= 2;
              if (!v258 || v257 == 133) {
                break;
              }
            }
          }

          uint64_t v259 = *((void *)this + 4);
          uint64_t v260 = *(int *)(v259 + 40);
          else {
            uint64_t v163 = (*(uint64_t (**)(void))(*(void *)(v259 + 56) + 64LL))();
          }
          if (v163 >= *((void *)this + 15)) {
            goto LABEL_410;
          }
        }

LABEL_411:
        int64_t v216 = v15[1];
        if (v163 == *v15)
        {
LABEL_412:
          uint64_t v111 = v216 + 1;
          goto LABEL_654;
        }

        v15[(*(void *)(v11 + 8 * v216) & 0xFFFFFFLL) + 2] = *v15;
        int64_t *v15 = v163;
        uint64_t v261 = *((void *)this + 22);
        int v262 = *((_DWORD *)this + 14);
        int v263 = *(_DWORD *)(v261 + 8);
        int v264 = v263 + v262;
        if (v263 + v262 >= 0 && *(_DWORD *)(v261 + 12) >= v264) {
          goto LABEL_418;
        }
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v264, a4))
        {
          int v263 = *(_DWORD *)(v261 + 8);
          int v264 = v263 + v262;
LABEL_418:
          unsigned int v59 = (int64_t *)(*(void *)(v261 + 24) + 8LL * v263);
          *(_DWORD *)(v261 + 8) = v264;
        }

        else
        {
          unsigned int v59 = 0LL;
        }

        if (*(int *)a4 < 1)
        {
          uint64_t v367 = 0LL;
          uint64_t v368 = *((int *)this + 14);
          v365 = &v59[-v368];
          uint64_t v369 = -8 * v368;
          do
          {
            v59[v367] = v365[v367];
            ++v367;
          }

          while (v369 + v367 * 8);
LABEL_708:
          int v370 = *((_DWORD *)this + 68);
          BOOL v91 = __OFSUB__(v370--, 1);
          *((_DWORD *)this + 68) = v370;
          if ((v370 < 0) ^ v91 | (v370 == 0)) {
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          }
          v365[1] = v216;
        }

        else
        {
LABEL_703:
          *a4 = U_REGEX_STACK_OVERFLOW;
LABEL_704:
          unsigned int v59 = v15;
        }

        ++v59[1];
        goto LABEL_764;
      case 0x35:
        int isWordBoundary = icu::RegexMatcher::isUWordBoundary(this, *v15, a4);
LABEL_213:
        if (isWordBoundary != (v21 != 0)) {
          goto LABEL_318;
        }
        goto LABEL_317;
      case 0x36:
        int64_t v166 = *v15;
        if (*v15 >= *((void *)this + 11)) {
          goto LABEL_751;
        }
        int v167 = (UText *)*((void *)this + 4);
        uint64_t v168 = v166 - v167->chunkNativeStart;
        if (v168 < 0 || v168 >= v167->nativeIndexingLimit || v167->chunkContents[v168] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v167, v166);
          int v167 = (UText *)*((void *)this + 4);
          LODWORD(v168) = v167->chunkOffset;
        }

        else
        {
          v167->chunkint Offset = v168;
        }

        else {
          v167->chunkint Offset = v168 + 1;
        }
        if (v265 == 10)
        {
          uint64_t v282 = *((void *)this + 4);
          uint64_t v283 = *(int *)(v282 + 40);
          uint64_t v284 = (int)v283 <= *(_DWORD *)(v282 + 28)
               ? *(void *)(v282 + 32) + v283
               : (*(uint64_t (**)(void))(*(void *)(v282 + 56) + 64LL))();
          if (v284 == *((void *)this + 11)) {
            goto LABEL_751;
          }
        }

        goto LABEL_317;
      case 0x37:
        int64_t v169 = *v15;
        if (*v15 >= *((void *)this + 11)) {
          goto LABEL_751;
        }
        int v170 = (UText *)*((void *)this + 4);
        uint64_t v171 = v169 - v170->chunkNativeStart;
        if (v171 < 0 || v171 >= v170->nativeIndexingLimit || v170->chunkContents[v171] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v170, v169);
          int v170 = (UText *)*((void *)this + 4);
          LODWORD(v17icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v170->chunkOffset;
        }

        else
        {
          v170->chunkint Offset = v171;
        }

        if ((int)v171 < v170->chunkLength)
        {
          unsigned int v243 = v170->chunkContents[(int)v171];
          if (v243 >> 11 <= 0x1A) {
            goto LABEL_513;
          }
        }

        UChar32 v266 = utext_current32(v170);
        goto LABEL_512;
      case 0x38:
        int64_t v172 = *v15;
        if (*v15 >= *((void *)this + 15)) {
          goto LABEL_316;
        }
        uint64_t v173 = (UText *)*((void *)this + 4);
        uint64_t v174 = v172 - v173->chunkNativeStart;
        if (v174 < 0 || v174 >= v173->nativeIndexingLimit || v173->chunkContents[v174] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v173, v172);
          uint64_t v173 = (UText *)*((void *)this + 4);
          LODWORD(v174) = v173->chunkOffset;
        }

        else
        {
          v173->chunkint Offset = v174;
        }

        else {
          v173->chunkint Offset = v174 + 1;
        }
        int v285 = u_charType(v267);
        BOOL v279 = v267 == 9 || v285 == 12;
LABEL_497:
        int v286 = v279;
        int v287 = v21 != 0;
        goto LABEL_613;
      case 0x39:
        int64_t v175 = *v15;
        if (*v15 >= *((void *)this + 15)) {
          goto LABEL_316;
        }
        uint64_t v176 = (UText *)*((void *)this + 4);
        uint64_t v177 = v175 - v176->chunkNativeStart;
        if (v177 < 0 || v177 >= v176->nativeIndexingLimit || v176->chunkContents[v177] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v176, v175);
          uint64_t v176 = (UText *)*((void *)this + 4);
          LODWORD(v177) = v176->chunkOffset;
        }

        else
        {
          v176->chunkint Offset = v177;
        }

        else {
          v176->chunkint Offset = v177 + 1;
        }
        if ((v268 & 0xFFFFDF50) != 0) {
          goto LABEL_317;
        }
        if (v268 <= 132)
        {
          if ((v268 - 10) >= 3)
          {
            if (v268 != 13) {
              goto LABEL_317;
            }
            if (utext_current32(*((UText **)this + 4)) == 10) {
              utext_next32(*((UText **)this + 4));
            }
          }

LABEL_614:
          __int128 v184 = (UText *)*((void *)this + 4);
          goto LABEL_615;
        }

        goto LABEL_317;
      case 0x3A:
        int64_t v178 = *v15;
        if (*v15 >= *((void *)this + 15)) {
          goto LABEL_316;
        }
        v179 = (UText *)*((void *)this + 4);
        uint64_t v180 = v178 - v179->chunkNativeStart;
        if (v180 < 0 || v180 >= v179->nativeIndexingLimit || v179->chunkContents[v180] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v179, v178);
          v179 = (UText *)*((void *)this + 4);
          LODWORD(v18icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v179->chunkOffset;
        }

        else
        {
          v179->chunkint Offset = v180;
        }

        else {
          v179->chunkint Offset = v180 + 1;
        }
        if ((v269 & 0xFFFFDF50) != 0 || (int v287 = 1, v269 - 10 >= 4) && v269 - 8232 >= 2 && v269 != 133) {
          int v287 = 0;
        }
        int v286 = v21 != 0;
LABEL_613:
        if (v287 != v286) {
          goto LABEL_614;
        }
        goto LABEL_317;
      default:
        goto LABEL_776;
    }
  }

uint64_t sub_180976A78(int a1)
{
  BOOL v1 = (a1 - 8232) < 2 || a1 == 133;
  unsigned int v2 = (a1 - 10) < 4 || v1;
  if ((a1 & 0xFFFFDF50) != 0) {
    return 0LL;
  }
  else {
    return v2;
  }
}

uint64_t icu::RegexMatcher::find(icu::RegexMatcher *this, uint64_t a2, UErrorCode *a3)
{
  UErrorCode v3 = *((_DWORD *)this + 79);
  if (v3 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
LABEL_6:
    *a3 = v3;
    return 0LL;
  }

  uint64_t v4 = *((void *)this + 6);
  *((void *)this + 8) = 0LL;
  *((void *)this + 9) = v4;
  *((void *)this + 14) = 0LL;
  *((void *)this + 15) = v4;
  *((void *)this + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
  *((void *)this + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v4;
  *((void *)this + 12) = 0LL;
  *((void *)this + 13) = v4;
  *((void *)this + 17) = 0LL;
  *((void *)this + 18) = 0LL;
  *(_OWORD *)((char *)this + 152) = xmmword_180A3C7A0;
  *((_BYTE *)this + 13icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  *((_WORD *)this + 84) = 0;
  *(void *)((char *)this + 268) = 0x271000000000LL;
  if (a2 < 0 || v4 < a2)
  {
    UErrorCode v3 = U_INDEX_OUTOFBOUNDS_ERROR;
    goto LABEL_6;
  }

  *((void *)this + 18) = a2;
  return icu::RegexMatcher::find(this, a3);
}

double icu::RegexMatcher::reset(icu::RegexMatcher *this)
{
  uint64_t v1 = *((void *)this + 6);
  *((void *)this + 8) = 0LL;
  *((void *)this + 9) = v1;
  *((void *)this + 14) = 0LL;
  *((void *)this + 15) = v1;
  *((void *)this + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
  *((void *)this + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v1;
  *((void *)this + 12) = 0LL;
  *((void *)this + 13) = v1;
  *((void *)this + 17) = 0LL;
  *((void *)this + 18) = 0LL;
  double result = NAN;
  *(_OWORD *)((char *)this + 152) = xmmword_180A3C7A0;
  *((_BYTE *)this + 13icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  *((_WORD *)this + 84) = 0;
  *(void *)((char *)this + 268) = 0x271000000000LL;
  return result;
}

void icu::RegexMatcher::MatchChunkAt(icu::RegexMatcher *this, int a2, int a3, UErrorCode *a4)
{
  uint64_t v8 = *((void *)this + 1);
  __int16 v9 = *(_WORD *)(v8 + 48);
  if ((v9 & 0x11) != 0)
  {
    uint64_t v10 = 0LL;
  }

  else if ((v9 & 2) != 0)
  {
    uint64_t v10 = v8 + 50;
  }

  else
  {
    uint64_t v10 = *(void *)(v8 + 64);
  }

  uint64_t v11 = *(void *)(*(void *)(v8 + 32) + 24LL);
  int v12 = *(icu::UVector **)(v8 + 104);
  uint64_t v13 = *(void *)(*((void *)this + 4) + 48LL);
  *((_DWORD *)this + 14) = *(_DWORD *)(v8 + 128);
  UErrorCode v14 = (void *)icu::RegexMatcher::resetStack(this);
  UErrorCode v15 = *((_DWORD *)this + 79);
  if (v15 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    *a4 = v15;
    return;
  }

  uint64_t v16 = (uint64_t)v14;
  uint64_t v363 = v12;
  uint64_t v364 = v10;
  int v362 = a3;
  void *v14 = a2;
  v14[1] = 0LL;
  uint64_t v361 = a2;
  uint64_t v17 = *(unsigned int *)(*((void *)this + 1) + 132LL);
  while (1)
  {
    uint64_t v18 = *(void *)(v16 + 8);
    uint64_t v19 = *(void *)(v11 + 8 * v18);
    uint64_t v20 = v18 + 1;
    *(void *)(v16 + 8) = v18 + 1;
    UErrorCode v21 = U_INTERNAL_PROGRAM_ERROR;
    int v22 = v19 & 0xFFFFFF;
    switch(BYTE3(v19))
    {
      case 1:
        goto LABEL_337;
      case 2:
        if (v362 && *(void *)v16 != *((void *)this + 15)) {
          goto LABEL_337;
        }
        *((_BYTE *)this + 13icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 1;
        *((void *)this + 19) = *((void *)this + 18);
        *((void *)this + 17) = v361;
        *((void *)this + 18) = *(void *)v16;
        goto LABEL_604;
      case 3:
        uint64_t v23 = *(void *)v16;
        uint64_t v24 = *((void *)this + 15);
        if (*(void *)v16 >= v24) {
          goto LABEL_336;
        }
        uint64_t v25 = v23 + 1;
        *(void *)uint64_t v16 = v23 + 1;
        int v26 = *(unsigned __int16 *)(v13 + 2 * v23);
        if ((v26 & 0xFC00) == 0xD800 && v25 != v24)
        {
          int v28 = *(unsigned __int16 *)(v13 + 2 * v25);
          if ((v28 & 0xFC00) == 0xDC00)
          {
            *(void *)uint64_t v16 = v23 + 2;
            int v26 = (v26 << 10) - 56613888 + v28;
          }
        }

        if (v26 == v22) {
          goto LABEL_602;
        }
        goto LABEL_337;
      case 4:
        uint64_t v29 = *(void *)(v11 + 8 * v20);
        *(void *)(v16 + 8) = v18 + 2;
        uint64_t v30 = v29 & 0xFFFFFF;
        int v31 = (unsigned __int16 *)(v13 + 2LL * *(void *)v16);
        uint64_t v32 = (unsigned __int16 *)(v364 + 2 * (v19 & 0xFFFFFF));
        int64_t v33 = &v31[v30];
        while (v31 < v33)
        {
          int v35 = *v31++;
          int v34 = v35;
          int v36 = *v32++;
          if (v34 != v36) {
            goto LABEL_337;
          }
        }

        uint64_t v137 = *(void *)v16 + v30;
        goto LABEL_395;
      case 6:
        uint64_t v37 = *((void *)this + 22);
        int v38 = *((_DWORD *)this + 14);
        int v39 = *(_DWORD *)(v37 + 8);
        int v40 = v39 + v38;
        if (v39 + v38 >= 0 && *(_DWORD *)(v37 + 12) >= v40) {
          goto LABEL_34;
        }
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v40, a4))
        {
          int v39 = *(_DWORD *)(v37 + 8);
          int v40 = v39 + v38;
LABEL_34:
          uint64_t v41 = *(void *)(v37 + 24) + 8LL * v39;
          *(_DWORD *)(v37 + 8) = v40;
        }

        else
        {
          uint64_t v41 = 0LL;
        }

        uint64_t v293 = 0LL;
        uint64_t v294 = *((int *)this + 14);
        uint64_t v295 = v41 - 8 * v294;
        uint64_t v296 = -8 * v294;
        do
        {
          *(void *)(v41 + v293) = *(void *)(v295 + v293);
          v293 += 8LL;
        }

        while (v296 + v293);
        int v297 = *((_DWORD *)this + 68);
        BOOL v120 = __OFSUB__(v297--, 1);
        *((_DWORD *)this + 68) = v297;
        if ((v297 < 0) ^ v120 | (v297 == 0)) {
          icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
        }
        *(void *)(v295 + 8) = v19 & 0xFFFFFF;
LABEL_441:
        uint64_t v16 = v41;
        goto LABEL_602;
      case 7:
        goto LABEL_602;
      case 8:
        uint64_t v42 = *(void *)v16;
        uint64_t v43 = v16 + 8LL * (v22 + 2);
        goto LABEL_157;
      case 9:
        uint64_t v44 = v16 + 16;
        uint64_t v45 = *(void *)v16;
        *(void *)(v16 + 16 + 8 * (v19 & 0xFFFFFF)) = *(void *)(v16 + 16 + 8LL * (v22 + 2));
        unsigned int v46 = v22 + 1;
        goto LABEL_209;
      case 0xA:
        uint64_t v47 = *(void *)v16;
        uint64_t v48 = *((void *)this + 15);
        if (*(void *)v16 >= v48) {
          goto LABEL_336;
        }
        uint64_t v49 = v19 & 0x7FFFFF;
        uint64_t v50 = v47 + 1;
        *(void *)uint64_t v16 = v47 + 1;
        unint64_t v51 = *(unsigned __int16 *)(v13 + 2 * v47);
        if ((v51 & 0xFC00) == 0xD800)
        {
          if (v50 != v48)
          {
            int v52 = *(unsigned __int16 *)(v13 + 2 * v50);
            if ((v52 & 0xFC00) == 0xDC00)
            {
              *(void *)uint64_t v16 = v47 + 2;
              LODWORD(v5icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = ((_DWORD)v51 << 10) - 56613888 + v52;
            }
          }
        }

        else if (v51 <= 0xFF)
        {
          BOOL v272 = ((*(unsigned __int8 *)(qword_18C449BC0 + 32 * v49 + (v51 >> 3) + 2608) >> (v51 & 7)) & 1) == 0;
          goto LABEL_374;
        }

        BOOL v272 = icu::UnicodeSet::contains( (icu::UnicodeSet *)(qword_18C449BC0 + 200LL * v49 + 8),  v51) == 0;
LABEL_374:
        if (v272) {
          unsigned int v274 = (v19 & 0x800000) >> 23;
        }
        else {
          unsigned int v274 = (v19 & 0x800000) == 0;
        }
        if (!v274) {
          goto LABEL_337;
        }
        goto LABEL_602;
      case 0xB:
        uint64_t v53 = *(void *)v16;
        uint64_t v54 = *((void *)this + 15);
        if (*(void *)v16 >= v54) {
          goto LABEL_336;
        }
        uint64_t v55 = v53 + 1;
        *(void *)uint64_t v16 = v53 + 1;
        unint64_t v56 = *(unsigned __int16 *)(v13 + 2 * v53);
        if ((v56 & 0xFC00) == 0xD800)
        {
          if (v55 != v54)
          {
            int v57 = *(unsigned __int16 *)(v13 + 2 * v55);
            if ((v57 & 0xFC00) == 0xDC00)
            {
              *(void *)uint64_t v16 = v53 + 2;
              LODWORD(v56) = ((_DWORD)v56 << 10) - 56613888 + v57;
            }
          }
        }

        else if (v56 <= 0xFF)
        {
          goto LABEL_337;
        }

        uint64_t v275 = (icu::UnicodeSet *)icu::UVector::elementAt(v363, v19 & 0xFFFFFF);
        int v179 = icu::UnicodeSet::contains(v275, v56);
LABEL_386:
        if (v179) {
          goto LABEL_602;
        }
        goto LABEL_337;
      case 0xC:
        uint64_t v58 = *(void *)v16;
        uint64_t v59 = *((void *)this + 15);
        if (*(void *)v16 >= v59) {
          goto LABEL_336;
        }
        uint64_t v60 = v58 + 1;
        *(void *)uint64_t v16 = v58 + 1;
        int v61 = *(unsigned __int16 *)(v13 + 2 * v58);
        if ((v61 & 0xFC00) == 0xD800 && v60 != v59)
        {
          int v63 = *(unsigned __int16 *)(v13 + 2 * v60);
          if ((v63 & 0xFC00) == 0xDC00)
          {
            *(void *)uint64_t v16 = v58 + 2;
            int v61 = (v61 << 10) - 56613888 + v63;
          }
        }

        if ((v61 & 0xFFFFDF50) != 0) {
          goto LABEL_602;
        }
        BOOL v64 = (v61 - 10) >= 4 && (v61 - 8232) >= 2;
        if (v64 && v61 != 133) {
          goto LABEL_602;
        }
        goto LABEL_337;
      case 0xD:
        goto LABEL_159;
      case 0xE:
        goto LABEL_603;
      case 0xF:
        uint64_t v65 = *((void *)this + 22);
        int v66 = *((_DWORD *)this + 14);
        int v67 = *(_DWORD *)(v65 + 8);
        int v68 = v67 + v66;
        if (v67 + v66 >= 0 && *(_DWORD *)(v65 + 12) >= v68) {
          goto LABEL_67;
        }
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v68, a4))
        {
          int v67 = *(_DWORD *)(v65 + 8);
          int v68 = v67 + v66;
LABEL_67:
          uint64_t v69 = *(void *)(v65 + 24) + 8LL * v67;
          *(_DWORD *)(v65 + 8) = v68;
        }

        else
        {
          uint64_t v69 = 0LL;
        }

        if (*(int *)a4 < 1)
        {
          uint64_t v325 = 0LL;
          uint64_t v326 = *((int *)this + 14);
          uint64_t v327 = v69 - 8 * v326;
          uint64_t v328 = -8 * v326;
          do
          {
            *(void *)(v69 + v325) = *(void *)(v327 + v325);
            v325 += 8LL;
          }

          while (v328 + v325);
          int v329 = *((_DWORD *)this + 68);
          BOOL v120 = __OFSUB__(v329--, 1);
          *((_DWORD *)this + 68) = v329;
          if ((v329 < 0) ^ v120 | (v329 == 0)) {
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          }
          *(void *)(v327 + 8) = v20;
        }

        else
        {
          *a4 = U_REGEX_STACK_OVERFLOW;
LABEL_506:
          uint64_t v69 = v16;
        }

        uint64_t v324 = v19 & 0xFFFFFF;
        goto LABEL_541;
      case 0x10:
        int isChunkWordBoundary = icu::RegexMatcher::isChunkWordBoundary(this, *(_DWORD *)v16);
        goto LABEL_280;
      case 0x11:
        uint64_t v71 = *(void *)v16;
        if (*((_BYTE *)this + 130)) {
          uint64_t v72 = *((void *)this + 18);
        }
        else {
          uint64_t v72 = *((void *)this + 14);
        }
        goto LABEL_365;
      case 0x12:
        uint64_t v73 = *(void *)(v11 + 8LL * (v22 - 1)) & 0xFFFFFFLL;
        uint64_t v74 = *((void *)this + 22);
        int v75 = *((_DWORD *)this + 14);
        int v76 = *(_DWORD *)(v74 + 8);
        int v77 = v76 + v75;
        if (v76 + v75 >= 0 && *(_DWORD *)(v74 + 12) >= v77) {
          goto LABEL_77;
        }
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v77, a4))
        {
          int v76 = *(_DWORD *)(v74 + 8);
          int v77 = v76 + v75;
LABEL_77:
          uint64_t v78 = (void *)(*(void *)(v74 + 24) + 8LL * v76);
          *(_DWORD *)(v74 + 8) = v77;
        }

        else
        {
          uint64_t v78 = 0LL;
        }

        if (*(int *)a4 < 1)
        {
          uint64_t v330 = 0LL;
          uint64_t v331 = *((int *)this + 14);
          uint64_t v332 = &v78[-v331];
          uint64_t v333 = -8 * v331;
          do
          {
            v78[v330] = v332[v330];
            ++v330;
          }

          while (v333 + v330 * 8);
          int v334 = *((_DWORD *)this + 68);
          BOOL v120 = __OFSUB__(v334--, 1);
          *((_DWORD *)this + 68) = v334;
          if ((v334 < 0) ^ v120 | (v334 == 0)) {
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          }
          v332[1] = v20;
        }

        else
        {
          *a4 = U_REGEX_STACK_OVERFLOW;
LABEL_528:
          uint64_t v78 = (void *)v16;
        }

        v78[1] = v19 & 0xFFFFFF;
        v78[v73 + 2] = *v78;
        goto LABEL_553;
      case 0x13:
        if (*(void *)v16 >= *((void *)this + 15))
        {
          *((_BYTE *)this + 168) = 1;
          uint64_t v263 = *((void *)this + 22);
          uint64_t v264 = *((int *)this + 14);
          unsigned int v265 = (*(_DWORD *)(v263 + 8) - v264) & ~((*(_DWORD *)(v263 + 8) - (int)v264) >> 31);
          *(_DWORD *)(v263 + 8) = v265;
          uint64_t v16 = *(void *)(v263 + 24) + 8LL * v265 - 8 * v264;
        }

        else
        {
          uint64_t v79 = icu::RegexMatcher::followingGCBoundary(this, *(void *)v16, a4);
          *(void *)uint64_t v16 = v79;
          uint64_t v80 = *((void *)this + 15);
          if (v79 >= v80)
          {
            *((_BYTE *)this + 168) = 1;
            *(void *)uint64_t v16 = v80;
          }
        }

        goto LABEL_602;
      case 0x14:
        if (*(void *)v16 >= *((void *)this + 11)) {
          goto LABEL_601;
        }
        goto LABEL_337;
      case 0x15:
        uint64_t v81 = *(void *)v16;
        uint64_t v82 = *((void *)this + 15);
        if (*(void *)v16 >= v82) {
          goto LABEL_336;
        }
        uint64_t v83 = v81 + 1;
        *(void *)uint64_t v16 = v81 + 1;
        int v84 = *(unsigned __int16 *)(v13 + 2 * v81);
        if ((v84 & 0xFC00) == 0xD800)
        {
          if (v83 == v82) {
            goto LABEL_602;
          }
          __int16 v85 = *(_WORD *)(v13 + 2 * v83);
          goto LABEL_118;
        }

        BOOL v276 = v84 == 13 && v83 < v82;
        if (!v276 || *(_WORD *)(v13 + 2 * v83) != 10) {
          goto LABEL_602;
        }
        goto LABEL_394;
      case 0x16:
        uint64_t v86 = *(void *)v16;
        uint64_t v87 = *((void *)this + 15);
        if (*(void *)v16 >= v87) {
          goto LABEL_336;
        }
        uint64_t v88 = v86 + 1;
        *(void *)uint64_t v16 = v86 + 1;
        UChar32 v89 = *(unsigned __int16 *)(v13 + 2 * v86);
        if ((v89 & 0xFC00) == 0xD800 && v88 != v87)
        {
          int v91 = *(unsigned __int16 *)(v13 + 2 * v88);
          if ((v91 & 0xFC00) == 0xDC00)
          {
            *(void *)uint64_t v16 = v86 + 2;
            UChar32 v89 = (v89 << 10) - 56613888 + v91;
          }
        }

        BOOL v92 = u_charType(v89) == 9;
        goto LABEL_301;
      case 0x17:
        uint64_t v71 = *(void *)v16;
        uint64_t v72 = *((void *)this + 10);
LABEL_365:
        if (v71 == v72) {
          goto LABEL_602;
        }
        goto LABEL_337;
      case 0x18:
        uint64_t v93 = *(void *)v16;
        uint64_t v94 = *((void *)this + 11);
        if (*(void *)v16 < v94 - 2) {
          goto LABEL_337;
        }
        if (v93 >= v94) {
          goto LABEL_601;
        }
        if (v93 == v94 - 1)
        {
          int v95 = *(unsigned __int16 *)(v13 + 2 * v93);
          if ((v95 & 0xF800) == 0xD800)
          {
            if ((v95 & 0x400) != 0)
            {
              if (v93 <= *((void *)this + 10)) {
                goto LABEL_597;
              }
              int v360 = *(unsigned __int16 *)(v13 + 2 * v93 - 2);
              BOOL v97 = (v360 & 0xFC00) == 55296;
              int v98 = v95 - 56613888 + (v360 << 10);
            }

            else
            {
              if (v93 + 1 == v94) {
                goto LABEL_597;
              }
              int v96 = *(unsigned __int16 *)(v13 + 2 * (v93 + 1));
              BOOL v97 = (v96 & 0xFC00) == 56320;
              int v98 = (v95 << 10) - 56613888 + v96;
            }

            if (v97) {
              int v95 = v98;
            }
          }

LABEL_597:
          if (sub_180976A78(v95)
            && (v95 != 10 || v93 <= *((void *)this + 10) || *(_WORD *)(v13 + 2 * v93 - 2) != 13))
          {
            goto LABEL_601;
          }

          goto LABEL_337;
        }

        if (v93 == v94 - 2 && *(_WORD *)(v13 + 2 * v93) == 13)
        {
          int v231 = *(unsigned __int16 *)(v13 + 2 * v93 + 2);
LABEL_285:
          if (v231 == 10)
          {
LABEL_601:
            *((_WORD *)this + 84) = 257;
            goto LABEL_602;
          }
        }

        goto LABEL_337;
      case 0x19:
        *(void *)(v16 + 8 * (v19 & 0xFFFFFF) + 16) = 0LL;
        *(void *)(v16 + 8) = v18 + 4;
        int v99 = *(_DWORD *)(v11 + (((v20 << 32) + 0x200000000LL) >> 29));
        uint64_t v100 = *(void *)(v11 + 8LL * (int)v20);
        uint64_t v101 = *((void *)this + 22);
        int v102 = *((_DWORD *)this + 14);
        int v103 = *(_DWORD *)(v101 + 8);
        int v104 = v103 + v102;
        if (v103 + v102 >= 0 && *(_DWORD *)(v101 + 12) >= v104) {
          goto LABEL_109;
        }
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v104, a4))
        {
          int v103 = *(_DWORD *)(v101 + 8);
          int v104 = v103 + v102;
LABEL_109:
          uint64_t v105 = (void *)(*(void *)(v101 + 24) + 8LL * v103);
          *(_DWORD *)(v101 + 8) = v104;
        }

        else
        {
          uint64_t v105 = 0LL;
        }

        if (*(int *)a4 < 1)
        {
          uint64_t v345 = 0LL;
          uint64_t v346 = (v100 & 0xFFFFFF) + 1;
          uint64_t v347 = *((int *)this + 14);
          int v348 = &v105[-v347];
          uint64_t v349 = -8 * v347;
          do
          {
            v105[v345] = v348[v345];
            ++v345;
          }

          while (v349 + v345 * 8);
          int v350 = *((_DWORD *)this + 68);
          BOOL v120 = __OFSUB__(v350--, 1);
          *((_DWORD *)this + 68) = v350;
          if ((v350 < 0) ^ v120 | (v350 == 0)) {
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          }
          v348[1] = v346;
          if (v99) {
            goto LABEL_566;
          }
        }

        else
        {
          *a4 = U_REGEX_STACK_OVERFLOW;
LABEL_565:
          uint64_t v105 = (void *)v16;
          if (v99)
          {
LABEL_566:
            if (v99 == -1) {
              v105[(v22 + 1) + 2] = *v105;
            }
            goto LABEL_585;
          }
        }

        goto LABEL_337;
      case 0x1A:
        *(void *)(v16 + 8 * (v19 & 0xFFFFFF) + 16) = 0LL;
        uint64_t v106 = v18 + 4;
        *(void *)(v16 + 8) = v18 + 4;
        uint64_t v107 = *(void *)(v11 + 8LL * (int)v20);
        uint64_t v108 = *(unsigned int *)(v11 + (((v20 << 32) + 0x100000000LL) >> 29));
        int v109 = *(_DWORD *)(v11 + (((v20 << 32) + 0x200000000LL) >> 29));
        if (v109 == -1)
        {
          *(void *)(v16 + 8LL * (v22 + 1) + 16) = *(void *)v16;
          if (v108) {
            goto LABEL_602;
          }
LABEL_368:
          uint64_t v16 = sub_18097B2D8(this, v16, v106, a4);
          goto LABEL_369;
        }

        if (*(_DWORD *)(v11 + (((v20 << 32) + 0x100000000LL) >> 29))) {
          goto LABEL_602;
        }
        if (v109) {
          goto LABEL_368;
        }
LABEL_369:
        uint64_t v143 = (v107 & 0xFFFFFF) + 1;
        goto LABEL_484;
      case 0x1B:
        uint64_t v81 = *(void *)v16;
        uint64_t v110 = *((void *)this + 15);
        if (*(void *)v16 >= v110) {
          goto LABEL_336;
        }
        uint64_t v111 = v81 + 1;
        *(void *)uint64_t v16 = v81 + 1;
        int v112 = *(unsigned __int16 *)(v13 + 2 * v81);
        if ((v112 & 0xFC00) == 0xD800)
        {
          if (v111 != v110)
          {
            __int16 v85 = *(_WORD *)(v13 + 2 * v111);
LABEL_118:
            if ((v85 & 0xFC00) == 0xDC00)
            {
LABEL_394:
              uint64_t v137 = v81 + 2;
              goto LABEL_395;
            }
          }
        }

        else if (v112 == 10)
        {
          goto LABEL_337;
        }

        goto LABEL_602;
      case 0x1C:
        uint64_t v113 = *(void *)(v11 + 8 * (v19 & 0xFFFFFF)) & 0xFFFFFFLL;
        uint64_t v114 = v16 + 8 * v113;
        uint64_t v115 = *(void *)(v11 + 8LL * (v22 + 2));
        uint64_t v116 = *(void *)(v11 + 8LL * (v22 + 3));
        uint64_t v117 = *(void *)(v114 + 16) + 1LL;
        *(void *)(v114 + 16) = v117;
        if (v117 >= (int)v115)
        {
          if ((_DWORD)v116 == -1)
          {
            uint64_t v277 = v16 + 8 * v113;
            uint64_t v279 = *(void *)(v277 + 24);
            uint64_t v278 = (void *)(v277 + 24);
            if (*(void *)v16 == v279) {
              goto LABEL_602;
            }
            *uint64_t v278 = *(void *)v16;
          }

          uint64_t v16 = sub_18097B2D8(this, v16, v18 + 1, a4);
        }

        else
        {
          int v119 = *((_DWORD *)this + 68);
          BOOL v120 = __OFSUB__(v119--, 1);
          *((_DWORD *)this + 68) = v119;
          if ((v119 < 0) ^ v120 | (v119 == 0)) {
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          }
        }

        uint64_t v143 = (v22 + 4);
        goto LABEL_484;
      case 0x1D:
        uint64_t v121 = *(void *)(v11 + 8 * (v19 & 0xFFFFFF)) & 0xFFFFFFLL;
        uint64_t v122 = v16 + 8 * v121;
        uint64_t v123 = *(void *)(v11 + 8LL * (v22 + 2));
        uint64_t v124 = *(void *)(v11 + 8LL * (v22 + 3));
        uint64_t v125 = *(void *)(v122 + 16) + 1LL;
        *(void *)(v122 + 16) = v125;
        if (v125 >= (int)v123)
        {
          if ((_DWORD)v124 == -1)
          {
            uint64_t v280 = v16 + 8 * v121;
            uint64_t v282 = *(void *)(v280 + 24);
            uint64_t v281 = (void *)(v280 + 24);
            if (*(void *)v16 == v282) {
              goto LABEL_602;
            }
            *uint64_t v281 = *(void *)v16;
          }

          uint64_t v16 = sub_18097B2D8(this, v16, (v22 + 4), a4);
        }

        else
        {
          *(void *)(v16 + 8) = (v22 + 4);
          int v127 = *((_DWORD *)this + 68);
          BOOL v120 = __OFSUB__(v127--, 1);
          *((_DWORD *)this + 68) = v127;
          if ((v127 < 0) ^ v120 | (v127 == 0)) {
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          }
        }

        goto LABEL_602;
      case 0x1E:
        if (*(void *)v16 <= *((void *)this + 10)) {
          goto LABEL_602;
        }
        int v128 = *(unsigned __int16 *)(v13 + 2LL * *(void *)v16 - 2);
        goto LABEL_289;
      case 0x20:
        *(void *)(*((void *)this + 24) + 8 * (v19 & 0xFFFFFF)) = *(int *)(*((void *)this + 22) + 8LL);
        goto LABEL_602;
      case 0x21:
        uint64_t v129 = *(void *)(*((void *)this + 24) + 8 * (v19 & 0xFFFFFF));
        int64_t v130 = (icu::UVector64 *)*((void *)this + 22);
        uint64_t v41 = *((void *)v130 + 3) + 8LL * (int)v129 - 8LL * *((int *)this + 14);
        if (v41 == v16) {
          goto LABEL_602;
        }
        uint64_t v131 = *((unsigned int *)this + 14);
        if ((int)v131 >= 1)
        {
          uint64_t v132 = (uint64_t *)(*((void *)v130 + 3) + 8LL * (int)v129 - 8LL * *((int *)this + 14));
          do
          {
            uint64_t v133 = *(void *)v16;
            v16 += 8LL;
            *v132++ = v133;
            --v131;
          }

          while (v131);
        }

        icu::UVector64::setSize(v130, v129);
        goto LABEL_441;
      case 0x22:
        uint64_t v134 = *(void *)(v16 + 16 + 8 * (v19 & 0xFFFFFF));
        if (v134 < 0) {
          goto LABEL_337;
        }
        uint64_t v135 = *(void *)(v16 + 16 + 8LL * (v22 + 1));
        uint64_t v136 = *(void *)v16;
        uint64_t v137 = *(void *)v16;
        uint64_t v138 = v135 - v134;
        if (v135 <= v134) {
          goto LABEL_395;
        }
        uint64_t v139 = *((void *)this + 15);
        uint64_t v137 = v136 + v135 - v134;
        if (v136 > v139) {
          uint64_t v139 = *(void *)v16;
        }
        uint64_t v140 = (unsigned __int16 *)(v13 + 2 * v134);
        uint64_t v141 = v139 - v136;
        int64_t v142 = (unsigned __int16 *)(v13 + 2 * v136);
        do
        {
          if (!v141)
          {
LABEL_336:
            *((_BYTE *)this + 168) = 1;
            goto LABEL_337;
          }

          if (*v140 != *v142) {
            goto LABEL_337;
          }
          ++v140;
          --v141;
          ++v142;
          --v138;
        }

        while (v138);
        if ((*(_WORD *)(v13 + 2 * v135 - 2) & 0xFC00) == 0xD800
          && v137 < *((void *)this + 15)
          && (*(_WORD *)(v13 + 2 * v137) & 0xFC00) == 0xDC00)
        {
          goto LABEL_337;
        }

LABEL_395:
        *(void *)uint64_t v16 = v137;
        goto LABEL_602;
      case 0x23:
        uint64_t v42 = *(void *)v16;
        uint64_t v43 = v16 + 8 * (v19 & 0xFFFFFF);
LABEL_157:
        *(void *)(v43 + 16) = v42;
        goto LABEL_602;
      case 0x24:
        *(void *)(v16 + 8) = v18 + 2;
LABEL_159:
        uint64_t v143 = v19 & 0xFFFFFF;
        goto LABEL_484;
      case 0x25:
        uint64_t v144 = *((void *)this + 24);
        *(void *)(v144 + 8 * (v19 & 0xFFFFFF)) = *(int *)(*((void *)this + 22) + 8LL);
        *(void *)(v144 + 8LL * (v22 + 1)) = *(void *)v16;
        *(void *)(v144 + 8LL * (v22 + 2)) = *((void *)this + 14);
        *(void *)(v144 + 8LL * (v22 + 3)) = *((void *)this + 15);
        *((_OWORD *)this + 7) = *((_OWORD *)this + 6);
        goto LABEL_602;
      case 0x26:
        uint64_t v145 = *((void *)this + 22);
        uint64_t v146 = *((void *)this + 24);
        uint64_t v147 = *(void *)(v146 + 8 * (v19 & 0xFFFFFF));
        if (*(_DWORD *)(v145 + 8) <= (int)v147)
        {
          uint64_t v149 = (uint64_t *)v16;
        }

        else
        {
          uint64_t v148 = *((int *)this + 14);
          uint64_t v149 = (uint64_t *)(*(void *)(v145 + 24) + 8LL * (int)v147 - 8 * v148);
          if ((int)v148 >= 1)
          {
            uint64_t v150 = *((unsigned int *)this + 14);
            int64_t v151 = v149;
            do
            {
              uint64_t v152 = *(void *)v16;
              v16 += 8LL;
              *v151++ = v152;
              --v150;
            }

            while (v150);
          }

          icu::UVector64::setSize((icu::UVector64 *)v145, v147);
          uint64_t v146 = *((void *)this + 24);
          uint64_t v16 = (uint64_t)v149;
        }

        *uint64_t v149 = *(void *)(v146 + 8LL * (v22 + 1));
        *((void *)this + 14) = *(void *)(v146 + 8LL * (v22 + 2));
        *((void *)this + 15) = *(void *)(v146 + 8LL * (v22 + 3));
        goto LABEL_602;
      case 0x27:
        uint64_t v153 = *(void *)v16;
        uint64_t v154 = *((void *)this + 15);
        if (*(void *)v16 >= v154) {
          goto LABEL_336;
        }
        uint64_t v155 = v153 + 1;
        *(void *)uint64_t v16 = v153 + 1;
        UChar32 v156 = *(unsigned __int16 *)(v13 + 2 * v153);
        if ((v156 & 0xFC00) == 0xD800 && v155 != v154)
        {
          int v158 = *(unsigned __int16 *)(v13 + 2 * v155);
          if ((v158 & 0xFC00) == 0xDC00)
          {
            *(void *)uint64_t v16 = v153 + 2;
            UChar32 v156 = (v156 << 10) - 56613888 + v158;
          }
        }

        if (u_foldCase(v156, 0) == v22) {
          goto LABEL_602;
        }
        goto LABEL_337;
      case 0x28:
        uint64_t v159 = v364 + 2 * (v19 & 0xFFFFFF);
        uint64_t v160 = *(void *)(v11 + 8 * v20);
        *(void *)(v16 + 8) = v18 + 2;
        int v161 = v160 & 0xFFFFFF;
        uint64_t v369 = 0LL;
        __int128 v367 = 0u;
        __int128 v368 = 0u;
        sub_180969A60((uint64_t)&v367, v13, *(void *)v16, *((void *)this + 15));
        int v162 = 0;
        while (v162 < v161)
        {
          uint64_t v163 = v162 + 1LL;
          int v164 = *(unsigned __int16 *)(v159 + 2LL * v162);
          if ((v164 & 0xFC00) == 0xD800 && (_DWORD)v163 != v161)
          {
            int v166 = *(unsigned __int16 *)(v159 + 2 * v163);
            BOOL v167 = (v166 & 0xFC00) == 56320;
            int v168 = v162 + 2;
            int v169 = (v164 << 10) - 56613888 + v166;
            if (v167) {
              int v164 = v169;
            }
            if (v167) {
              LODWORD(v163) = v168;
            }
          }

          int v170 = sub_180969A70((uint64_t *)&v367);
          int v162 = v163;
          if (v170 != v164)
          {
            if (v170 == -1) {
              *((_BYTE *)this + 168) = 1;
            }
            sub_180969B98((uint64_t)&v367);
            goto LABEL_339;
          }
        }

        if (sub_180969B98((uint64_t)&v367))
        {
LABEL_339:
          uint64_t v260 = *((void *)this + 22);
          uint64_t v261 = *((int *)this + 14);
          unsigned int v262 = (*(_DWORD *)(v260 + 8) - v261) & ~((*(_DWORD *)(v260 + 8) - (int)v261) >> 31);
          *(_DWORD *)(v260 + 8) = v262;
          uint64_t v16 = *(void *)(v260 + 24) + 8LL * v262 - 8 * v261;
          goto LABEL_455;
        }

        *(void *)uint64_t v16 = sub_180969BA8((uint64_t)&v367);
        goto LABEL_455;
      case 0x29:
        uint64_t v171 = *(void *)(v16 + 8 * (v19 & 0xFFFFFF) + 16);
        if (v171 < 0) {
          goto LABEL_337;
        }
        uint64_t v172 = *(void *)(v16 + 8LL * (v22 + 1) + 16);
        uint64_t v369 = 0LL;
        __int128 v367 = 0u;
        __int128 v368 = 0u;
        sub_180969A60((uint64_t)&v367, v13, v171, v172);
        uint64_t v366 = 0LL;
        memset(v365, 0, sizeof(v365));
        sub_180969A60((uint64_t)v365, v13, *(void *)v16, *((void *)this + 15));
        while (2)
        {
          int v173 = sub_180969A70((uint64_t *)&v367);
          if (v173 == -1)
          {
            if (!sub_180969B98((uint64_t)v365))
            {
              *(void *)uint64_t v16 = sub_180969BA8((uint64_t)v365);
              goto LABEL_448;
            }
          }

          else
          {
            int v174 = v173;
            int v175 = sub_180969A70((uint64_t *)v365);
            if (v175 != -1)
            {
              if (v175 != v174) {
                break;
              }
              continue;
            }

            *((_BYTE *)this + 168) = 1;
          }

          break;
        }

        uint64_t v298 = *((void *)this + 22);
        uint64_t v299 = *((int *)this + 14);
        unsigned int v300 = (*(_DWORD *)(v298 + 8) - v299) & ~((*(_DWORD *)(v298 + 8) - (int)v299) >> 31);
        *(_DWORD *)(v298 + 8) = v300;
        uint64_t v16 = *(void *)(v298 + 24) + 8LL * v300 - 8 * v299;
LABEL_448:
        nullsub_17(v365);
LABEL_455:
        nullsub_17(&v367);
        goto LABEL_602;
      case 0x2A:
        uint64_t v176 = *(void *)v16;
        if (*(void *)v16 >= *((void *)this + 11)) {
          goto LABEL_601;
        }
        int v177 = *(unsigned __int16 *)(v13 + 2 * v176);
        if ((v177 & 0xDF50) != 0) {
          goto LABEL_337;
        }
        if (*(unsigned __int16 *)(v13 + 2 * v176) <= 0x84u)
        {
          if ((v177 - 11) >= 3
            && (v177 != 10 || v176 > *((void *)this + 10) && *(_WORD *)(v13 + 2 * v176 - 2) == 13))
          {
            goto LABEL_337;
          }

          goto LABEL_602;
        }

        goto LABEL_337;
      case 0x2B:
        uint64_t v178 = *(void *)v16;
        if (*(void *)v16 == *((void *)this + 10)) {
          goto LABEL_602;
        }
        if (v178 >= *((void *)this + 11)) {
          goto LABEL_337;
        }
        int v179 = sub_180976A78(*(unsigned __int16 *)(v13 + 2 * v178 - 2));
        goto LABEL_386;
      case 0x2C:
        uint64_t v44 = *((void *)this + 24);
        *(void *)(v44 + 8 * (v19 & 0xFFFFFF)) = *(int *)(*((void *)this + 22) + 8LL);
        *(void *)(v44 + 8LL * (v22 + 1)) = *(void *)v16;
        *(void *)(v44 + 8LL * (v22 + 2)) = *((void *)this + 14);
        *(void *)(v44 + 8LL * (v22 + 3)) = *((void *)this + 15);
        *((void *)this + 14) = *((void *)this + 8);
        *((void *)this + 15) = *(void *)v16;
        unsigned int v46 = v22 + 4;
        uint64_t v45 = -1LL;
LABEL_209:
        *(void *)(v44 + 8LL * v46) = v45;
        goto LABEL_602;
      case 0x2D:
        *(void *)(v16 + 8) = v18 + 2;
        uint64_t v180 = *(void *)(v11 + 8 * v20);
        *(void *)(v16 + 8) = v18 + 3;
        uint64_t v181 = *(void *)(v11 + 8 * (v18 + 2));
        uint64_t v182 = *((void *)this + 24);
        uint64_t v183 = (v22 + 4);
        uint64_t v184 = *(void *)(v182 + 8LL * v183);
        if (v184 < 0)
        {
          uint64_t v185 = *(void *)v16 - (int)v180;
          *(void *)(v182 + 8 * v183) = v185;
          uint64_t v187 = v185 - 1;
          if (v185 < 1)
          {
            if (v185 < 0) {
              goto LABEL_472;
            }
            uint64_t v185 = 0LL;
            goto LABEL_471;
          }

          if (v185 >= *((void *)this + 6) || (*(_WORD *)(v13 + 2 * v185) & 0xFC00) != 0xDC00) {
            goto LABEL_471;
          }
        }

        else
        {
          if (!v184)
          {
            *(void *)(v182 + 8 * v183) = -1LL;
LABEL_472:
            uint64_t v306 = *((void *)this + 22);
            uint64_t v307 = *((int *)this + 14);
            unsigned int v308 = (*(_DWORD *)(v306 + 8) - v307) & ~((*(_DWORD *)(v306 + 8) - (int)v307) >> 31);
            *(_DWORD *)(v306 + 8) = v308;
            uint64_t v16 = *(void *)(v306 + 24) + 8LL * v308 - 8 * v307;
            *((void *)this + 14) = *(void *)(v182 + 8LL * (v22 + 2));
            uint64_t v189 = *(void *)(v182 + 8LL * (v22 + 3));
LABEL_473:
            *((void *)this + 15) = v189;
            goto LABEL_602;
          }

          uint64_t v185 = v184 - 1;
          *(void *)(v182 + 8 * v183) = v184 - 1;
          if (v184 == 1 || (*(_WORD *)(v13 + 2 * (v184 - 1)) & 0xFC00) != 56320)
          {
LABEL_471:
            uint64_t v309 = *(void *)(v16 + 8);
            uint64_t v310 = *((void *)this + 22);
            int v311 = *((_DWORD *)this + 14);
            int v312 = *(_DWORD *)(v310 + 8);
            int v313 = v312 + v311;
            if (v312 + v311 < 0 || *(_DWORD *)(v310 + 12) < v313)
            {
              if (!icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v313, a4))
              {
                uint64_t v105 = 0LL;
                goto LABEL_576;
              }

              int v312 = *(_DWORD *)(v310 + 8);
              int v313 = v312 + v311;
            }

            uint64_t v105 = (void *)(*(void *)(v310 + 24) + 8LL * v312);
            *(_DWORD *)(v310 + 8) = v313;
LABEL_576:
            uint64_t v351 = 0LL;
            uint64_t v352 = v309 - 3;
            uint64_t v353 = *((int *)this + 14);
            uint64_t v354 = &v105[-v353];
            uint64_t v355 = -8 * v353;
            do
            {
              v105[v351] = v354[v351];
              ++v351;
            }

            while (v355 + v351 * 8);
            goto LABEL_588;
          }

          uint64_t v187 = v184 - 2;
        }

        if ((*(_WORD *)(v13 + 2 * v187) & 0xFC00) == 0xD800)
        {
          *(void *)(v182 + 8 * v183) = v187;
          uint64_t v185 = v187;
        }

        goto LABEL_471;
      case 0x2E:
        if (*(void *)v16 != *((void *)this + 15)) {
          goto LABEL_337;
        }
        uint64_t v188 = *((void *)this + 24);
        *((void *)this + 14) = *(void *)(v188 + 8LL * (v22 + 2));
        uint64_t v189 = *(void *)(v188 + 8LL * (v22 + 3));
        goto LABEL_473;
      case 0x2F:
        *(void *)(v16 + 8) = v18 + 2;
        uint64_t v190 = *(void *)(v11 + 8 * v20);
        *(void *)(v16 + 8) = v18 + 3;
        uint64_t v191 = *(void *)(v11 + 8 * (v18 + 2));
        *(void *)(v16 + 8) = v18 + 4;
        uint64_t v192 = *(void *)(v11 + 8 * (v18 + 3));
        uint64_t v182 = *((void *)this + 24);
        uint64_t v183 = (v22 + 4);
        uint64_t v193 = *(void *)(v182 + 8LL * v183);
        if (v193 < 0)
        {
          uint64_t v194 = *(void *)v16 - (int)v190;
          *(void *)(v182 + 8 * v183) = v194;
          uint64_t v196 = v194 - 1;
          if (v194 < 1)
          {
            if (v194 < 0) {
              goto LABEL_483;
            }
            uint64_t v194 = 0LL;
            goto LABEL_482;
          }

          if (v194 >= *((void *)this + 6) || (*(_WORD *)(v13 + 2 * v194) & 0xFC00) != 0xDC00) {
            goto LABEL_482;
          }
        }

        else
        {
          if (!v193)
          {
            *(void *)(v182 + 8 * v183) = -1LL;
LABEL_483:
            uint64_t v143 = v192 & 0xFFFFFF;
            *((void *)this + 14) = *(void *)(v182 + 8LL * (v22 + 2));
            *((void *)this + 15) = *(void *)(v182 + 8LL * (v22 + 3));
            goto LABEL_484;
          }

          uint64_t v194 = v193 - 1;
          *(void *)(v182 + 8 * v183) = v193 - 1;
          if (v193 == 1 || (*(_WORD *)(v13 + 2 * (v193 - 1)) & 0xFC00) != 56320)
          {
LABEL_482:
            uint64_t v314 = *(void *)(v16 + 8);
            uint64_t v315 = *((void *)this + 22);
            int v316 = *((_DWORD *)this + 14);
            int v317 = *(_DWORD *)(v315 + 8);
            int v318 = v317 + v316;
            if (v317 + v316 < 0 || *(_DWORD *)(v315 + 12) < v318)
            {
              if (!icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v318, a4))
              {
                uint64_t v105 = 0LL;
                goto LABEL_581;
              }

              int v317 = *(_DWORD *)(v315 + 8);
              int v318 = v317 + v316;
            }

            uint64_t v105 = (void *)(*(void *)(v315 + 24) + 8LL * v317);
            *(_DWORD *)(v315 + 8) = v318;
LABEL_581:
            if (*(int *)a4 < 1)
            {
              uint64_t v356 = 0LL;
              uint64_t v352 = v314 - 4;
              uint64_t v357 = *((int *)this + 14);
              uint64_t v354 = &v105[-v357];
              uint64_t v358 = -8 * v357;
              do
              {
                v105[v356] = v354[v356];
                ++v356;
              }

              while (v358 + v356 * 8);
LABEL_588:
              int v359 = *((_DWORD *)this + 68);
              BOOL v120 = __OFSUB__(v359--, 1);
              *((_DWORD *)this + 68) = v359;
              if ((v359 < 0) ^ v120 | (v359 == 0)) {
                icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
              }
              v354[1] = v352;
LABEL_584:
              void *v105 = *(void *)(v182 + 8 * v183);
LABEL_585:
              uint64_t v16 = (uint64_t)v105;
              goto LABEL_602;
            }

LABEL_582:
            *a4 = U_REGEX_STACK_OVERFLOW;
LABEL_583:
            uint64_t v105 = (void *)v16;
            goto LABEL_584;
          }

          uint64_t v196 = v193 - 2;
        }

        if ((*(_WORD *)(v13 + 2 * v196) & 0xFC00) == 0xD800)
        {
          *(void *)(v182 + 8 * v183) = v196;
          uint64_t v194 = v196;
        }

        goto LABEL_482;
      case 0x30:
        if (*(void *)v16 == *((void *)this + 15))
        {
          uint64_t v197 = *((void *)this + 24);
          *((void *)this + 14) = *(void *)(v197 + 8LL * (v22 + 2));
          *((void *)this + 15) = *(void *)(v197 + 8LL * (v22 + 3));
          icu::UVector64::setSize(*((icu::UVector64 **)this + 22), *(void *)(v197 + 8 * (v19 & 0xFFFFFF)));
        }

        goto LABEL_337;
      case 0x31:
        uint64_t v198 = *(void *)v16;
        uint64_t v199 = *((void *)this + 15);
        if (*(void *)v16 >= v199) {
          goto LABEL_336;
        }
        uint64_t v200 = v198 + 1;
        *(void *)uint64_t v16 = v198 + 1;
        unint64_t v201 = *(unsigned __int16 *)(v13 + 2 * v198);
        if ((v201 & 0xFC00) == 0xD800)
        {
          if (v200 != v199)
          {
            int v202 = *(unsigned __int16 *)(v13 + 2 * v200);
            if ((v202 & 0xFC00) == 0xDC00)
            {
              *(void *)uint64_t v16 = v198 + 2;
              LODWORD(v20icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = ((_DWORD)v201 << 10) - 56613888 + v202;
            }
          }
        }

        else if (v201 <= 0xFF)
        {
          goto LABEL_602;
        }

        if (icu::UnicodeSet::contains( (icu::UnicodeSet *)(qword_18C449BC0 + 200 * (v19 & 0xFFFFFF) + 8),  v201)) {
          goto LABEL_337;
        }
        goto LABEL_602;
      case 0x32:
        uint64_t v203 = *(void *)(*((void *)this + 1) + 112LL);
        uint64_t v204 = icu::UVector::elementAt(v363, v19 & 0xFFFFFF);
        uint64_t v205 = *(void *)v16;
        uint64_t v206 = *((void *)this + 15);
        if (v206 <= (int)*(void *)v16)
        {
          uint64_t v210 = *(void *)v16;
LABEL_344:
          *((_BYTE *)this + 168) = 1;
          LODWORD(v205) = v210;
          goto LABEL_345;
        }

        int v207 = (icu::UnicodeSet *)v204;
        uint64_t v208 = v203 + 32 * (v19 & 0xFFFFFF);
        uint64_t v209 = (int)v205;
        while (2)
        {
          uint64_t v210 = (int)v205 + 1LL;
          unint64_t v211 = *(unsigned __int16 *)(v13 + 2 * v209);
          if ((v211 & 0xFC00) == 0xD800)
          {
            if (v206 != v210)
            {
              int v212 = *(unsigned __int16 *)(v13 + 2 * v210);
              BOOL v213 = (v212 & 0xFC00) == 56320;
              int v214 = v205 + 2;
              int v215 = ((_DWORD)v211 << 10) - 56613888 + v212;
              if (v213) {
                LODWORD(v21icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v215;
              }
              if (v213) {
                LODWORD(v21icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v214;
              }
            }
          }

          else if (v211 <= 0xFF)
          {
            unsigned int v302 = v205 - 1;
            goto LABEL_345;
          }

          if (icu::UnicodeSet::contains(v207, v211))
          {
            uint64_t v206 = *((void *)this + 15);
LABEL_250:
            LODWORD(v205) = v210;
            uint64_t v209 = (int)v210;
            continue;
          }

          break;
        }

        LODWORD(v205) = v210 - 1;
        if ((*(_WORD *)(v13 + 2LL * ((int)v210 - 1)) & 0xFC00) == 0xDC00 && (int)v210 >= 2)
        {
          unsigned int v302 = v210 - 2;
LABEL_522:
          if ((*(_WORD *)(v13 + 2LL * v302) & 0xFC00) == 0xD800) {
            LODWORD(v205) = v302;
          }
        }

LABEL_345:
        uint64_t v266 = *(void *)(v16 + 8);
        if (*(void *)v16 != (int)v205)
        {
          *(void *)(v16 + 8 * (*(void *)(v11 + 8 * v266) & 0xFFFFFFLL) + 16) = *(void *)v16;
          *(void *)uint64_t v16 = (int)v205;
          uint64_t v268 = *((void *)this + 22);
          int v269 = *((_DWORD *)this + 14);
          int v270 = *(_DWORD *)(v268 + 8);
          int v271 = v270 + v269;
          if (v270 + v269 >= 0 && *(_DWORD *)(v268 + 12) >= v271)
          {
LABEL_353:
            uint64_t v78 = (void *)(*(void *)(v268 + 24) + 8LL * v270);
            *(_DWORD *)(v268 + 8) = v271;
          }

          else
          {
            if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v271, a4))
            {
              int v270 = *(_DWORD *)(v268 + 8);
              int v271 = v270 + v269;
              goto LABEL_353;
            }

            uint64_t v78 = 0LL;
          }

          if (*(int *)a4 < 1)
          {
            uint64_t v340 = 0LL;
            uint64_t v341 = *((int *)this + 14);
            int v342 = &v78[-v341];
            uint64_t v343 = -8 * v341;
            do
            {
              v78[v340] = v342[v340];
              ++v340;
            }

            while (v343 + v340 * 8);
            int v344 = *((_DWORD *)this + 68);
            BOOL v120 = __OFSUB__(v344--, 1);
            *((_DWORD *)this + 68) = v344;
            if ((v344 < 0) ^ v120 | (v344 == 0)) {
              icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
            }
            v342[1] = v266;
          }

          else
          {
            *a4 = U_REGEX_STACK_OVERFLOW;
LABEL_551:
            uint64_t v78 = (void *)v16;
          }

          ++v78[1];
LABEL_553:
          uint64_t v16 = (uint64_t)v78;
          goto LABEL_602;
        }

        uint64_t v143 = v266 + 1;
LABEL_484:
        *(void *)(v16 + 8) = v143;
        goto LABEL_602;
      case 0x33:
        uint64_t v216 = *(int *)(v16 + 8 * (v19 & 0xFFFFFF) + 16);
        uint64_t v217 = *(void *)v16;
        if (v216 == *(void *)v16) {
          goto LABEL_602;
        }
        uint64_t v218 = v217 - 1;
        *(void *)uint64_t v16 = v217 - 1;
        int v219 = *(unsigned __int16 *)(v13 + 2 * (v217 - 1));
        BOOL v276 = v217 < 2;
        uint64_t v220 = v217 - 2;
        if (!v276 && (v219 & 0xFC00) == 0xDC00)
        {
          if ((*(_WORD *)(v13 + 2 * v220) & 0xFC00) != 0xD800) {
            goto LABEL_418;
          }
LABEL_256:
          *(void *)uint64_t v16 = v220;
          goto LABEL_418;
        }

        BOOL v283 = v219 != 10 || v218 <= v216;
        if (!v283
          && *(_WORD *)(v13 + 2 * v220) == 13
          && (unint64_t)*(unsigned __int8 *)(v11 + 8 * v18 - 5) << 24 == 872415232)
        {
          goto LABEL_256;
        }

LABEL_418:
        uint64_t v284 = *((void *)this + 22);
        int v285 = *((_DWORD *)this + 14);
        int v286 = *(_DWORD *)(v284 + 8);
        int v287 = v286 + v285;
        if (v286 + v285 >= 0 && *(_DWORD *)(v284 + 12) >= v287) {
          goto LABEL_423;
        }
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v287, a4))
        {
          int v286 = *(_DWORD *)(v284 + 8);
          int v287 = v286 + v285;
LABEL_423:
          uint64_t v288 = *(void *)(v284 + 24) + 8LL * v286;
          *(_DWORD *)(v284 + 8) = v287;
        }

        else
        {
          uint64_t v288 = 0LL;
        }

        if (*(int *)a4 <= 0)
        {
          uint64_t v319 = 0LL;
          uint64_t v320 = *((int *)this + 14);
          uint64_t v321 = v288 - 8 * v320;
          uint64_t v322 = -8 * v320;
          do
          {
            *(void *)(v288 + v319) = *(void *)(v321 + v319);
            v319 += 8LL;
          }

          while (v322 + v319);
          int v323 = *((_DWORD *)this + 68);
          BOOL v120 = __OFSUB__(v323--, 1);
          *((_DWORD *)this + 68) = v323;
          if ((v323 < 0) ^ v120 | (v323 == 0)) {
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          }
          *(void *)(v321 + 8) = v18;
          uint64_t v16 = v288;
          goto LABEL_602;
        }

LABEL_607:
        UErrorCode v21 = U_REGEX_STACK_OVERFLOW;
LABEL_608:
        *a4 = v21;
LABEL_603:
        *((_BYTE *)this + 13icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
LABEL_604:
        *((void *)this + 23) = v16;
        return;
      case 0x34:
        if ((v19 & 1) != 0)
        {
          int v267 = *((_DWORD *)this + 30);
          *((_BYTE *)this + 168) = 1;
          goto LABEL_425;
        }

        uint64_t v221 = *(void *)v16;
        uint64_t v222 = *((void *)this + 15);
        uint64_t v223 = (int)v221;
        while (1)
        {
          int v224 = v221;
          LODWORD(v22icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v221 + 1;
          int v225 = *(unsigned __int16 *)(v13 + 2 * v223);
          if ((v225 & 0xFC00) == 0xD800 && v222 != (int)v221)
          {
            int v226 = *(unsigned __int16 *)(v13 + 2LL * (int)v221);
            BOOL v227 = (v226 & 0xFC00) == 56320;
            int v228 = (v225 << 10) - 56613888 + v226;
            LODWORD(v22icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = (v226 & 0xFC00) == 0xDC00 ? v224 + 2 : v224 + 1;
            if (v227) {
              int v225 = v228;
            }
          }

          if ((v225 & 0x7Eu) <= 0x29)
          {
            if (v225 == 10) {
              break;
            }
            if (!(v225 & 0xFFFFDF50 | v19 & 2))
            {
              BOOL v229 = (v225 - 10) >= 4 && (v225 - 8232) >= 2;
              if (!v229 || v225 == 133) {
                break;
              }
            }
          }

          uint64_t v223 = (int)v221;
          if (v222 <= (int)v221)
          {
LABEL_424:
            *((_BYTE *)this + 168) = 1;
            int v267 = v221;
            goto LABEL_425;
          }
        }

        int v267 = v221 - 1;
        if ((*(_WORD *)(v13 + 2LL * ((int)v221 - 1)) & 0xFC00) == 0xDC00 && (int)v221 >= 2)
        {
          unsigned int v305 = v221 - 2;
          if ((*(_WORD *)(v13 + 2LL * v305) & 0xFC00) == 0xD800) {
            int v267 = v305;
          }
        }

LABEL_425:
        if (*(void *)v16 == v267)
        {
          uint64_t v143 = v18 + 2;
          goto LABEL_484;
        }

        *(void *)(v16 + 8 * (*(void *)(v11 + 8 * v20) & 0xFFFFFFLL) + 16) = *(void *)v16;
        *(void *)uint64_t v16 = v267;
        uint64_t v289 = *((void *)this + 22);
        int v290 = *((_DWORD *)this + 14);
        int v291 = *(_DWORD *)(v289 + 8);
        int v292 = v291 + v290;
        if (v291 + v290 >= 0 && *(_DWORD *)(v289 + 12) >= v292) {
          goto LABEL_432;
        }
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v292, a4))
        {
          int v291 = *(_DWORD *)(v289 + 8);
          int v292 = v291 + v290;
LABEL_432:
          uint64_t v69 = *(void *)(v289 + 24) + 8LL * v291;
          *(_DWORD *)(v289 + 8) = v292;
        }

        else
        {
          uint64_t v69 = 0LL;
        }

        if (*(int *)a4 < 1)
        {
          uint64_t v335 = 0LL;
          uint64_t v336 = *((int *)this + 14);
          uint64_t v337 = v69 - 8 * v336;
          uint64_t v338 = -8 * v336;
          do
          {
            *(void *)(v69 + v335) = *(void *)(v337 + v335);
            v335 += 8LL;
          }

          while (v338 + v335);
          int v339 = *((_DWORD *)this + 68);
          BOOL v120 = __OFSUB__(v339--, 1);
          *((_DWORD *)this + 68) = v339;
          if ((v339 < 0) ^ v120 | (v339 == 0)) {
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          }
          *(void *)(v337 + 8) = v20;
        }

        else
        {
          *a4 = U_REGEX_STACK_OVERFLOW;
LABEL_539:
          uint64_t v69 = v16;
        }

        uint64_t v324 = *(void *)(v69 + 8) + 1LL;
LABEL_541:
        *(void *)(v69 + 8) = v324;
        uint64_t v16 = v69;
        goto LABEL_602;
      case 0x35:
        int isChunkWordBoundary = icu::RegexMatcher::isUWordBoundary(this, *(void *)v16, a4);
LABEL_280:
        if (isChunkWordBoundary != (v22 != 0)) {
          goto LABEL_602;
        }
        goto LABEL_337;
      case 0x36:
        uint64_t v230 = *((void *)this + 11) - 1LL;
        if (*(void *)v16 < v230) {
          goto LABEL_337;
        }
        if (*(void *)v16 != v230) {
          goto LABEL_601;
        }
        int v231 = *(unsigned __int16 *)(v13 + 2LL * *(void *)v16);
        goto LABEL_285;
      case 0x37:
        if (*(void *)v16 >= *((void *)this + 11)) {
          goto LABEL_601;
        }
        int v128 = *(unsigned __int16 *)(v13 + 2LL * *(void *)v16);
LABEL_289:
        if (v128 == 10) {
          goto LABEL_602;
        }
        goto LABEL_337;
      case 0x38:
        uint64_t v232 = *(void *)v16;
        uint64_t v233 = *((void *)this + 15);
        if (*(void *)v16 >= v233) {
          goto LABEL_336;
        }
        uint64_t v234 = v232 + 1;
        *(void *)uint64_t v16 = v232 + 1;
        UChar32 v235 = *(unsigned __int16 *)(v13 + 2 * v232);
        if ((v235 & 0xFC00) == 0xD800 && v234 != v233)
        {
          int v237 = *(unsigned __int16 *)(v13 + 2 * v234);
          if ((v237 & 0xFC00) == 0xDC00)
          {
            *(void *)uint64_t v16 = v232 + 2;
            UChar32 v235 = (v235 << 10) - 56613888 + v237;
          }
        }

        int v238 = u_charType(v235);
        BOOL v92 = v235 == 9 || v238 == 12;
LABEL_301:
        int v239 = v92;
        if ((((v22 != 0) ^ v239) & 1) != 0) {
          goto LABEL_602;
        }
        goto LABEL_337;
      case 0x39:
        uint64_t v240 = *(void *)v16;
        uint64_t v241 = *((void *)this + 15);
        if (*(void *)v16 >= v241) {
          goto LABEL_336;
        }
        uint64_t v242 = v240 + 1;
        *(void *)uint64_t v16 = v240 + 1;
        int v243 = *(unsigned __int16 *)(v13 + 2 * v240);
        if ((v243 & 0xFC00) == 0xD800 && v242 != v241)
        {
          int v245 = *(unsigned __int16 *)(v13 + 2 * v242);
          if ((v245 & 0xFC00) == 0xDC00)
          {
            uint64_t v242 = v240 + 2;
            *(void *)uint64_t v16 = v240 + 2;
            int v243 = (v243 << 10) - 56613888 + v245;
          }
        }

        if ((v243 & 0xFFFFDF50) != 0) {
          goto LABEL_337;
        }
        if (v243 <= 132)
        {
          if (v243 != 13) {
            goto LABEL_337;
          }
          if (v242 >= v241) {
            goto LABEL_602;
          }
          uint64_t v246 = v242 + 1;
          *(void *)uint64_t v16 = v242 + 1;
          unsigned int v247 = *(unsigned __int16 *)(v13 + 2 * v242);
          if (v247 >> 10 == 54)
          {
            if (v246 != v241)
            {
              unsigned int v248 = *(unsigned __int16 *)(v13 + 2 * v246);
              uint64_t v241 = v242 + 1;
              if (v248 >> 10 == 55)
              {
                uint64_t v246 = v242 + 2;
                *(void *)uint64_t v16 = v242 + 2;
                LOWORD(v247) = v248 + ((_WORD)v247 << 10) + 9216;
                goto LABEL_322;
              }
            }
          }

          else
          {
LABEL_322:
            uint64_t v241 = v246;
          }

          uint64_t v249 = v241 - 1;
          *(void *)uint64_t v16 = v241 - 1;
          BOOL v276 = v241 < 2;
          uint64_t v137 = v241 - 2;
          if (!v276
            && (*(_WORD *)(v13 + 2 * v249) & 0xFC00) == 0xDC00
            && (*(_WORD *)(v13 + 2 * v137) & 0xFC00) == 0xD800)
          {
            goto LABEL_395;
          }

          goto LABEL_602;
        }

LABEL_337:
        uint64_t v257 = *((void *)this + 22);
        uint64_t v258 = *((int *)this + 14);
        unsigned int v259 = (*(_DWORD *)(v257 + 8) - v258) & ~((*(_DWORD *)(v257 + 8) - (int)v258) >> 31);
        *(_DWORD *)(v257 + 8) = v259;
        uint64_t v16 = *(void *)(v257 + 24) + 8LL * v259 - 8 * v258;
LABEL_602:
        break;
      case 0x3A:
        uint64_t v250 = *(void *)v16;
        uint64_t v251 = *((void *)this + 15);
        if (*(void *)v16 >= v251) {
          goto LABEL_336;
        }
        uint64_t v252 = v250 + 1;
        *(void *)uint64_t v16 = v250 + 1;
        int v253 = *(unsigned __int16 *)(v13 + 2 * v250);
        if ((v253 & 0xFC00) == 0xD800 && v252 != v251)
        {
          int v255 = *(unsigned __int16 *)(v13 + 2 * v252);
          if ((v255 & 0xFC00) == 0xDC00)
          {
            *(void *)uint64_t v16 = v250 + 2;
            int v253 = (v253 << 10) - 56613888 + v255;
          }
        }

        if ((v253 & 0xFFFFDF50) != 0
          || ((int v256 = 1, (v253 - 10) >= 4) ? (v303 = (v253 - 8232) >= 2) : (v303 = 0),
              v303 && v253 != 133))
        {
          int v256 = 0;
        }

        if (v256 != (v22 != 0)) {
          goto LABEL_602;
        }
        goto LABEL_337;
      default:
        goto LABEL_608;
    }
  }

uint64_t icu::RegexMatcher::group@<X0>(UText **this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  return icu::RegexMatcher::group(this, a2, 0, a3);
}

uint64_t icu::RegexMatcher::group@<X0>(UText **this@<X0>, UErrorCode *a2@<X2>, int a3@<W1>, uint64_t a4@<X8>)
{
  *(_OWORD *)(a4 + 8) = 0u;
  *(void *)(a4 + 56) = 0LL;
  *(_OWORD *)(a4 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(void *)a4 = off_18971B688;
  *(_WORD *)(a4 + 8) = 2;
  int64_t v8 = icu::RegexMatcher::start64((icu::RegexMatcher *)this, a3, a2);
  uint64_t result = icu::RegexMatcher::end64((icu::RegexMatcher *)this, a3, a2);
  if (*(int *)a2 <= 0 && v8 != -1 && v8 != result)
  {
    int64_t v12 = result;
    uint64_t result = utext_extract(this[4], v8, result, 0LL, 0, a2);
    if (*a2 == U_BUFFER_OVERFLOW_ERROR)
    {
      int32_t v13 = result;
      *a2 = U_ZERO_ERROR;
      uint64_t result = icu::UnicodeString::getBuffer((icu::UnicodeString *)a4, result);
      if (result)
      {
        int32_t v14 = utext_extract(this[4], v8, v12, (UChar *)result, v13, a2);
        return icu::UnicodeString::releaseBuffer(a4, v14);
      }

      else
      {
        *a2 = U_MEMORY_ALLOCATION_ERROR;
      }
    }
  }

  return result;
}

UText *icu::RegexMatcher::group(icu::RegexMatcher *this, UText *dest, uint64_t *a3, UErrorCode *a4)
{
  return icu::RegexMatcher::group(this, 0, dest, a3, a4);
}

UText *icu::RegexMatcher::group(icu::RegexMatcher *this, int a2, UText *dest, uint64_t *a4, UErrorCode *a5)
{
  int v5 = dest;
  *a4 = 0LL;
  UErrorCode v6 = *((_DWORD *)this + 79);
  if (v6 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
LABEL_8:
    *a5 = v6;
    return v5;
  }

  if (!*((_BYTE *)this + 130))
  {
    UErrorCode v6 = U_REGEX_INVALID_STATE;
    goto LABEL_8;
  }

  if (a2 < 0 || (uint64_t v7 = *(void *)(*((void *)this + 1) + 136LL), v8 = *(_DWORD *)(v7 + 8), v8 < a2))
  {
    UErrorCode v6 = U_INDEX_OUTOFBOUNDS_ERROR;
    goto LABEL_8;
  }

  if (a2)
  {
    if (v8 < 1 || v8 < a2) {
      int v13 = 0;
    }
    else {
      int v13 = *(_DWORD *)(*(void *)(v7 + 24) + 4LL * (a2 - 1));
    }
    uint64_t v14 = *((void *)this + 23) + 8LL * v13;
    uint64_t v11 = (int64_t *)(v14 + 16);
    int64_t v12 = (void *)(v14 + 24);
  }

  else
  {
    uint64_t v11 = (int64_t *)((char *)this + 136);
    int64_t v12 = (void *)((char *)this + 144);
  }

  int64_t v15 = *v11;
  if ((*v11 & 0x8000000000000000LL) == 0)
  {
    *a4 = *v12 - v15;
    uint64_t v16 = utext_clone(dest, *((const UText **)this + 4), 0, 1, a5);
    int v5 = v16;
    if (v16)
    {
      uint64_t v17 = v15 - v16->chunkNativeStart;
      if (v17 < 0 || v17 >= v16->nativeIndexingLimit || v16->chunkContents[v17] >> 10 > 0x36u) {
        utext_setNativeIndex(v16, v15);
      }
      else {
        v16->chunkint Offset = v17;
      }
    }

    return v5;
  }

  return utext_clone(dest, *((const UText **)this + 4), 0, 1, a5);
}

uint64_t icu::RegexMatcher::start64(icu::RegexMatcher *this, int a2, UErrorCode *a3)
{
  UErrorCode v3 = *((_DWORD *)this + 79);
  if (v3 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
LABEL_8:
    *a3 = v3;
    return -1LL;
  }

  if (!*((_BYTE *)this + 130))
  {
    UErrorCode v3 = U_REGEX_INVALID_STATE;
    goto LABEL_8;
  }

  if (a2 < 0 || (v4 = *(void *)(*((void *)this + 1) + 136LL), int v5 = *(_DWORD *)(v4 + 8), v5 < a2))
  {
    UErrorCode v3 = U_INDEX_OUTOFBOUNDS_ERROR;
    goto LABEL_8;
  }

  if (a2)
  {
    if (v5 < 1) {
      uint64_t v7 = 0LL;
    }
    else {
      uint64_t v7 = *(int *)(*(void *)(v4 + 24) + 4LL * (a2 - 1));
    }
    int v8 = (char *)(*((void *)this + 23) + 8 * v7 + 16);
  }

  else
  {
    int v8 = (char *)this + 136;
  }

  return *(void *)v8;
}

uint64_t icu::RegexMatcher::groupCount(icu::RegexMatcher *this)
{
  return *(unsigned int *)(*(void *)(*((void *)this + 1) + 136LL) + 8LL);
}

uint64_t icu::RegexMatcher::hasAnchoringBounds(icu::RegexMatcher *this)
{
  return *((char *)this + 129);
}

uint64_t icu::RegexMatcher::hasTransparentBounds(icu::RegexMatcher *this)
{
  return *((char *)this + 128);
}

uint64_t icu::RegexMatcher::hitEnd(icu::RegexMatcher *this)
{
  return *((char *)this + 168);
}

icu::UnicodeString *icu::RegexMatcher::input(icu::RegexMatcher *this, unint64_t a2)
{
  unsigned int v2 = (icu::UnicodeString *)*((void *)this + 3);
  if (!v2)
  {
    UErrorCode status = U_ZERO_ERROR;
    uint64_t v4 = (UText *)*((void *)this + 4);
    mapNativeIndexToUTF16 = (uint64_t *)v4->pFuncs->mapNativeIndexToUTF16;
    uint64_t v6 = *((void *)this + 6);
    if (mapNativeIndexToUTF16)
    {
      LODWORD(v6) = utext_extract(v4, 0LL, *((void *)this + 6), 0LL, 0, &status);
      UErrorCode status = U_ZERO_ERROR;
    }

    uint64_t v7 = (icu::UnicodeString *)icu::UMemory::operator new(mapNativeIndexToUTF16, (icu::UMemory *)0x40, a2);
    unsigned int v2 = v7;
    if (v7) {
      icu::UnicodeString::UnicodeString(v7, v6, 0, 0);
    }
    uint64_t Buffer = (UChar *)icu::UnicodeString::getBuffer(v2, v6);
    utext_extract(*((UText **)this + 4), 0LL, *((void *)this + 6), Buffer, v6, &status);
    icu::UnicodeString::releaseBuffer((uint64_t)v2, v6);
    *((void *)this + 3) = v2;
  }

  return v2;
}

uint64_t icu::RegexMatcher::inputText(icu::RegexMatcher *this)
{
  return *((void *)this + 4);
}

UText *icu::RegexMatcher::getInput(icu::RegexMatcher *this, UText *ut, UErrorCode *status)
{
  UErrorCode v6 = *((_DWORD *)this + 79);
  if (v6 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    *UErrorCode status = v6;
    return ut;
  }

  int v8 = (UText *)*((void *)this + 4);
  if (ut)
  {
    if (!v8->chunkNativeStart
      && (uint64_t v9 = *((void *)this + 6), v9 == v8->chunkNativeLimit)
      && v9 == v8->nativeIndexingLimit)
    {
      int64_t v10 = utext_nativeLength(ut);
      utext_replace(ut, 0LL, v10, *(const UChar **)(*((void *)this + 4) + 48LL), *((_DWORD *)this + 12), status);
    }

    else
    {
      if (v8->pFuncs->mapNativeIndexToUTF16)
      {
        UErrorCode statusa = U_ZERO_ERROR;
        int32_t v11 = utext_extract(v8, 0LL, *((void *)this + 6), 0LL, 0, &statusa);
      }

      else
      {
        int32_t v11 = *((_DWORD *)this + 12);
      }

      int64_t v12 = (UChar *)uprv_malloc(2LL * v11);
      if (v12)
      {
        int v13 = v12;
        *UErrorCode status = U_ZERO_ERROR;
        utext_extract(*((UText **)this + 4), 0LL, *((void *)this + 6), v12, v11, status);
        *UErrorCode status = U_ZERO_ERROR;
        int64_t v14 = utext_nativeLength(ut);
        utext_replace(ut, 0LL, v14, v13, v11, status);
        uprv_free(v13);
      }
    }

    return ut;
  }

  return utext_clone(0LL, v8, 0, 1, status);
}

uint64_t icu::RegexMatcher::lookingAt(icu::RegexMatcher *this, UErrorCode *a2)
{
  UErrorCode v5 = *((_DWORD *)this + 79);
  if (v5 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    char v2 = 0;
    *a2 = v5;
    return v2;
  }

  if (*((_BYTE *)this + 312))
  {
    int64_t v6 = utext_nativeLength(*((UText **)this + 4));
    *((void *)this + 6) = v6;
    *((void *)this + 8) = 0LL;
    *((void *)this + 9) = v6;
    *((void *)this + 14) = 0LL;
    *((void *)this + 15) = v6;
    *((void *)this + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
    *((void *)this + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v6;
    *((void *)this + 12) = 0LL;
    *((void *)this + 13) = v6;
  }

  *((void *)this + 17) = 0LL;
  *((void *)this + 18) = 0LL;
  *(_OWORD *)((char *)this + 152) = xmmword_180A3C7A0;
  *((_BYTE *)this + 13icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  *((_WORD *)this + 84) = 0;
  *(void *)((char *)this + 268) = 0x271000000000LL;
LABEL_9:
  uint64_t v7 = *((void *)this + 4);
  if (!*(void *)(v7 + 32) && (uint64_t v8 = *((void *)this + 6), v8 == *(void *)(v7 + 16)) && v8 == *(_DWORD *)(v7 + 28)) {
    icu::RegexMatcher::MatchChunkAt(this, *((_DWORD *)this + 28), 0, a2);
  }
  else {
    icu::RegexMatcher::MatchAt(this, *((void *)this + 14), 0, a2);
  }
  return (char)*((_BYTE *)this + 130);
}

uint64_t sub_180979240(UText *a1)
{
  if (utext_nativeLength(a1) == a1->nativeIndexingLimit) {
    return 0LL;
  }
  context = (unsigned __int16 *)a1->context;
  unsigned int v4 = context[4];
  else {
    int32_t v5 = v4 >> 5;
  }
  if ((v4 & 0x11) != 0)
  {
    int64_t v6 = 0LL;
  }

  else if ((v4 & 2) != 0)
  {
    int64_t v6 = context + 5;
  }

  else
  {
    int64_t v6 = (const UChar *)*((void *)context + 3);
  }

  a1->chunkContents = v6;
  a1->chunkLength = v5;
  a1->chunkNativeLimit = v5;
  a1->int nativeIndexingLimit = v5;
  return 1LL;
}

double icu::RegexMatcher::resetPreserveRegion(icu::RegexMatcher *this)
{
  *((void *)this + 17) = 0LL;
  *((void *)this + 18) = 0LL;
  double result = NAN;
  *(_OWORD *)((char *)this + 152) = xmmword_180A3C7A0;
  *((_BYTE *)this + 13icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  *((_WORD *)this + 84) = 0;
  *(void *)((char *)this + 268) = 0x271000000000LL;
  return result;
}

uint64_t icu::RegexMatcher::lookingAt(icu::RegexMatcher *this, int64_t a2, UErrorCode *a3)
{
  UErrorCode v6 = *((_DWORD *)this + 79);
  if (v6 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    char v3 = 0;
LABEL_14:
    *a3 = v6;
    return v3;
  }

  *((void *)this + 17) = 0LL;
  uint64_t v8 = *((void *)this + 6);
  *((void *)this + 8) = 0LL;
  *((void *)this + 9) = v8;
  *((void *)this + 14) = 0LL;
  *((void *)this + 15) = v8;
  *((void *)this + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
  *((void *)this + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v8;
  *((void *)this + 12) = 0LL;
  *((void *)this + 13) = v8;
  *((void *)this + 18) = 0LL;
  *(_OWORD *)((char *)this + 152) = xmmword_180A3C7A0;
  *((_BYTE *)this + 13icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  *((_WORD *)this + 84) = 0;
  *(void *)((char *)this + 268) = 0x271000000000LL;
  if (a2 < 0) {
    goto LABEL_13;
  }
  if (*((_BYTE *)this + 312))
  {
    if (sub_180979240(*((UText **)this + 4)))
    {
      int64_t v9 = utext_nativeLength(*((UText **)this + 4));
      int64_t v10 = 0LL;
      *((void *)this + 6) = v9;
      *((void *)this + 8) = 0LL;
      *((void *)this + 9) = v9;
      *((void *)this + 14) = 0LL;
      *((void *)this + 15) = v9;
      *((void *)this + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
      *((void *)this + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v9;
      *((void *)this + 12) = 0LL;
      *((void *)this + 13) = v9;
      *((void *)this + 17) = 0LL;
      *((void *)this + 18) = 0LL;
      *(_OWORD *)((char *)this + 152) = xmmword_180A3C7A0;
      *((_BYTE *)this + 13icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
      *((_WORD *)this + 84) = 0;
      *(void *)((char *)this + 268) = 0x271000000000LL;
    }

    else
    {
      int64_t v10 = *((void *)this + 14);
    }
  }

  else
  {
    int64_t v10 = 0LL;
  }

  if (v10 > a2 || *((void *)this + 15) < a2)
  {
LABEL_13:
    char v3 = 0;
    UErrorCode v6 = U_INDEX_OUTOFBOUNDS_ERROR;
    goto LABEL_14;
  }

  uint64_t v12 = *((void *)this + 4);
  if (!*(void *)(v12 + 32)
    && (uint64_t v13 = *((void *)this + 6), v13 == *(void *)(v12 + 16))
    && v13 == *(_DWORD *)(v12 + 28))
  {
    icu::RegexMatcher::MatchChunkAt(this, a2, 0, a3);
  }

  else
  {
    icu::RegexMatcher::MatchAt(this, a2, 0, a3);
  }

  return (char)*((_BYTE *)this + 130);
}

uint64_t icu::RegexMatcher::matches(icu::RegexMatcher *this, UErrorCode *a2)
{
  UErrorCode v5 = *((_DWORD *)this + 79);
  if (v5 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    char v2 = 0;
    *a2 = v5;
    return v2;
  }

  if (*((_BYTE *)this + 312))
  {
    int64_t v6 = utext_nativeLength(*((UText **)this + 4));
    *((void *)this + 6) = v6;
    *((void *)this + 8) = 0LL;
    *((void *)this + 9) = v6;
    *((void *)this + 14) = 0LL;
    *((void *)this + 15) = v6;
    *((void *)this + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
    *((void *)this + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v6;
    *((void *)this + 12) = 0LL;
    *((void *)this + 13) = v6;
  }

  *((void *)this + 17) = 0LL;
  *((void *)this + 18) = 0LL;
  *(_OWORD *)((char *)this + 152) = xmmword_180A3C7A0;
  *((_BYTE *)this + 13icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  *((_WORD *)this + 84) = 0;
  *(void *)((char *)this + 268) = 0x271000000000LL;
LABEL_9:
  uint64_t v7 = *((void *)this + 4);
  if (!*(void *)(v7 + 32) && (uint64_t v8 = *((void *)this + 6), v8 == *(void *)(v7 + 16)) && v8 == *(_DWORD *)(v7 + 28)) {
    icu::RegexMatcher::MatchChunkAt(this, *((_DWORD *)this + 28), 1, a2);
  }
  else {
    icu::RegexMatcher::MatchAt(this, *((void *)this + 14), 1, a2);
  }
  return (char)*((_BYTE *)this + 130);
}

uint64_t icu::RegexMatcher::matches(icu::RegexMatcher *this, int64_t a2, UErrorCode *a3)
{
  UErrorCode v6 = *((_DWORD *)this + 79);
  if (v6 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    char v3 = 0;
LABEL_14:
    *a3 = v6;
    return v3;
  }

  *((void *)this + 17) = 0LL;
  uint64_t v8 = *((void *)this + 6);
  *((void *)this + 8) = 0LL;
  *((void *)this + 9) = v8;
  *((void *)this + 14) = 0LL;
  *((void *)this + 15) = v8;
  *((void *)this + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
  *((void *)this + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v8;
  *((void *)this + 12) = 0LL;
  *((void *)this + 13) = v8;
  *((void *)this + 18) = 0LL;
  *(_OWORD *)((char *)this + 152) = xmmword_180A3C7A0;
  *((_BYTE *)this + 13icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  *((_WORD *)this + 84) = 0;
  *(void *)((char *)this + 268) = 0x271000000000LL;
  if (a2 < 0) {
    goto LABEL_13;
  }
  if (*((_BYTE *)this + 312))
  {
    if (sub_180979240(*((UText **)this + 4)))
    {
      int64_t v9 = utext_nativeLength(*((UText **)this + 4));
      int64_t v10 = 0LL;
      *((void *)this + 6) = v9;
      *((void *)this + 8) = 0LL;
      *((void *)this + 9) = v9;
      *((void *)this + 14) = 0LL;
      *((void *)this + 15) = v9;
      *((void *)this + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
      *((void *)this + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v9;
      *((void *)this + 12) = 0LL;
      *((void *)this + 13) = v9;
      *((void *)this + 17) = 0LL;
      *((void *)this + 18) = 0LL;
      *(_OWORD *)((char *)this + 152) = xmmword_180A3C7A0;
      *((_BYTE *)this + 13icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
      *((_WORD *)this + 84) = 0;
      *(void *)((char *)this + 268) = 0x271000000000LL;
    }

    else
    {
      int64_t v10 = *((void *)this + 14);
    }
  }

  else
  {
    int64_t v10 = 0LL;
  }

  if (v10 > a2 || *((void *)this + 15) < a2)
  {
LABEL_13:
    char v3 = 0;
    UErrorCode v6 = U_INDEX_OUTOFBOUNDS_ERROR;
    goto LABEL_14;
  }

  uint64_t v12 = *((void *)this + 4);
  if (!*(void *)(v12 + 32)
    && (uint64_t v13 = *((void *)this + 6), v13 == *(void *)(v12 + 16))
    && v13 == *(_DWORD *)(v12 + 28))
  {
    icu::RegexMatcher::MatchChunkAt(this, a2, 1, a3);
  }

  else
  {
    icu::RegexMatcher::MatchAt(this, a2, 1, a3);
  }

  return (char)*((_BYTE *)this + 130);
}

uint64_t icu::RegexMatcher::pattern(icu::RegexMatcher *this)
{
  return *((void *)this + 1);
}

uint64_t icu::RegexMatcher::region(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    if (a2 > a3 || (a3 | a2) < 0) {
      *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    uint64_t v5 = *(void *)(this + 48);
    if (v5 < a2 || v5 < a3) {
      *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    if (a4 == -1)
    {
      *(void *)(this + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
      *(void *)(this + 88) = v5;
      *(void *)(this + 96) = 0LL;
      *(void *)(this + 104) = v5;
      *(void *)(this + 136) = 0LL;
      *(void *)(this + 144) = 0LL;
      *(_OWORD *)(this + 152) = xmmword_180A3C7A0;
      *(_BYTE *)(this + 13icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
      *(_WORD *)(this + 168) = 0;
      *(void *)(this + 268) = 0x271000000000LL;
      *(void *)(this + 64) = a2;
      *(void *)(this + 72) = a3;
      *(void *)(this + 112) = a2;
      *(void *)(this + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = a3;
    }

    else
    {
      *(void *)(this + 136) = 0LL;
      *(_OWORD *)(this + 152) = xmmword_180A3C7A0;
      *(_BYTE *)(this + 13icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
      *(_WORD *)(this + 168) = 0;
      *(void *)(this + 268) = 0x271000000000LL;
      *(void *)(this + 64) = a2;
      *(void *)(this + 72) = a3;
      *(void *)(this + 112) = a2;
      *(void *)(this + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = a3;
      if (a2 > a4 || a4 > a3) {
        *a5 = U_INDEX_OUTOFBOUNDS_ERROR;
      }
      *(void *)(this + 144) = a4;
    }

    if (!*(_BYTE *)(this + 128))
    {
      *(void *)(this + 96) = a2;
      *(void *)(this + 104) = a3;
    }

    if (*(_BYTE *)(this + 129))
    {
      *(void *)(this + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = a2;
      *(void *)(this + 88) = a3;
    }
  }

  return this;
}

uint64_t icu::RegexMatcher::region(icu::RegexMatcher *this, uint64_t a2, uint64_t a3, UErrorCode *a4)
{
  return icu::RegexMatcher::region((uint64_t)this, a2, a3, -1LL, a4);
}

uint64_t icu::RegexMatcher::regionEnd(icu::RegexMatcher *this)
{
  return *((unsigned int *)this + 18);
}

uint64_t icu::RegexMatcher::regionEnd64(icu::RegexMatcher *this)
{
  return *((void *)this + 9);
}

uint64_t icu::RegexMatcher::regionStart(icu::RegexMatcher *this)
{
  return *((unsigned int *)this + 16);
}

uint64_t icu::RegexMatcher::regionStart64(icu::RegexMatcher *this)
{
  return *((void *)this + 8);
}

UText *icu::RegexMatcher::replaceAll@<X0>( UText *this@<X0>, const icu::UnicodeString *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  ut.magic = 878368812;
  ut.sizeOfStruct = 144;
  memset(&v7, 0, sizeof(v7));
  v7.magic = 878368812;
  v7.sizeOfStruct = 144;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *(void *)(a4 + 56) = 0LL;
  *(void *)a4 = off_18971B688;
  *(_WORD *)(a4 + 8) = 2;
  if (*(int *)a3 <= 0)
  {
    UErrorCode v6 = (icu::RegexMatcher *)this;
    utext_openConstUnicodeString(&ut, (uint64_t)a2, a3);
    utext_openUnicodeString(&v7, a4, a3);
    icu::RegexMatcher::replaceAll(v6, &ut, &v7, a3);
    utext_close(&v7);
    return utext_close(&ut);
  }

  return this;
}

UText *icu::RegexMatcher::replaceAll(icu::RegexMatcher *this, UText *a2, UText *ut, UErrorCode *status)
{
  unsigned int v4 = ut;
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (*(int *)status <= 0)
  {
    UErrorCode v7 = *((_DWORD *)this + 79);
    if (v7 < U_ILLEGAL_ARGUMENT_ERROR)
    {
      if (ut) {
        goto LABEL_5;
      }
      __int128 v14 = 0u;
      uint64_t v17 = 0LL;
      __int128 v16 = 0u;
      __int128 v15 = 0u;
      uint64_t v13 = off_18971B688;
      LOWORD(v14) = 2;
      memset(&v12, 0, sizeof(v12));
      v12.magic = 878368812;
      v12.sizeOfStruct = 144;
      utext_openUnicodeString(&v12, (uint64_t)&v13, status);
      unsigned int v4 = utext_clone(0LL, &v12, 1, 0, status);
      utext_close(&v12);
      icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v13);
      if (*(int *)status <= 0)
      {
LABEL_5:
        uint64_t v9 = *((void *)this + 6);
        *((void *)this + 8) = 0LL;
        *((void *)this + 9) = v9;
        *((void *)this + 14) = 0LL;
        *((void *)this + 15) = v9;
        *((void *)this + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
        *((void *)this + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v9;
        *((void *)this + 12) = 0LL;
        *((void *)this + 13) = v9;
        *((void *)this + 17) = 0LL;
        *((void *)this + 18) = 0LL;
        *(_OWORD *)((char *)this + 152) = xmmword_180A3C7A0;
        *((_BYTE *)this + 13icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
        *((_WORD *)this + 84) = 0;
        *(void *)((char *)this + 268) = 0x271000000000LL;
        do
        {
          v12.magic = 0;
          icu::RegexMatcher::appendReplacement(this, v4, a2, status);
        }

        while (*(int *)status < 1);
        icu::RegexMatcher::appendTail(this, v4, status);
      }
    }

    else
    {
      *UErrorCode status = v7;
    }
  }

  return v4;
}

UText *icu::RegexMatcher::replaceFirst@<X0>( icu::RegexMatcher *this@<X0>, const icu::UnicodeString *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  ut.magic = 878368812;
  ut.sizeOfStruct = 144;
  memset(&v8, 0, sizeof(v8));
  v8.magic = 878368812;
  v8.sizeOfStruct = 144;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *(void *)(a4 + 56) = 0LL;
  *(void *)a4 = off_18971B688;
  *(_WORD *)(a4 + 8) = 2;
  utext_openConstUnicodeString(&ut, (uint64_t)a2, a3);
  utext_openUnicodeString(&v8, a4, a3);
  icu::RegexMatcher::replaceFirst(this, &ut, &v8, a3);
  utext_close(&v8);
  return utext_close(&ut);
}

UText *icu::RegexMatcher::replaceFirst(icu::RegexMatcher *this, UText *a2, UText *a3, UErrorCode *a4)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (*(int *)a4 <= 0)
  {
    UErrorCode v7 = *((_DWORD *)this + 79);
    if (v7 < U_ILLEGAL_ARGUMENT_ERROR)
    {
      uint64_t v9 = *((void *)this + 6);
      *((void *)this + 8) = 0LL;
      *((void *)this + 9) = v9;
      *((void *)this + 14) = 0LL;
      *((void *)this + 15) = v9;
      *((void *)this + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
      *((void *)this + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v9;
      *((void *)this + 12) = 0LL;
      *((void *)this + 13) = v9;
      *((void *)this + 17) = 0LL;
      *((void *)this + 18) = 0LL;
      *(_OWORD *)((char *)this + 152) = xmmword_180A3C7A0;
      *((_BYTE *)this + 13icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
      *((_WORD *)this + 84) = 0;
      *(void *)((char *)this + 268) = 0x271000000000LL;
      v13.magic = 0;
      if (icu::RegexMatcher::find(this, (UErrorCode *)&v13))
      {
        if (!a3)
        {
          __int128 v15 = 0u;
          uint64_t v18 = 0LL;
          __int128 v17 = 0u;
          __int128 v16 = 0u;
          __int128 v14 = off_18971B688;
          LOWORD(v15) = 2;
          memset(&v13, 0, sizeof(v13));
          v13.magic = 878368812;
          v13.sizeOfStruct = 144;
          utext_openUnicodeString(&v13, (uint64_t)&v14, a4);
          a3 = utext_clone(0LL, &v13, 1, 0, a4);
          utext_close(&v13);
          icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v14);
        }

        appended = icu::RegexMatcher::appendReplacement(this, a3, a2, a4);
        icu::RegexMatcher::appendTail(appended, a3, a4);
      }

      else
      {
        return icu::RegexMatcher::getInput(this, a3, a4);
      }
    }

    else
    {
      *a4 = v7;
    }
  }

  return a3;
}

uint64_t icu::RegexMatcher::requireEnd(icu::RegexMatcher *this)
{
  return *((char *)this + 169);
}

icu::RegexMatcher *icu::RegexMatcher::reset(icu::RegexMatcher *this, const icu::UnicodeString *a2)
{
  char v3 = (int *)((char *)this + 316);
  unsigned int v4 = utext_openConstUnicodeString(*((UText **)this + 4), (uint64_t)a2, (UErrorCode *)this + 79);
  *((void *)this + 4) = v4;
  if (*(_BYTE *)(*((void *)this + 1) + 184LL)) {
    *((void *)this + 5) = utext_clone(*((UText **)this + 5), v4, 0, 1, (UErrorCode *)this + 79);
  }
  if (*v3 <= 0)
  {
    int64_t v5 = utext_nativeLength(*((UText **)this + 4));
    *((void *)this + 6) = v5;
    *((void *)this + 8) = 0LL;
    *((void *)this + 9) = v5;
    *((void *)this + 14) = 0LL;
    *((void *)this + 15) = v5;
    *((void *)this + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
    *((void *)this + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v5;
    *((void *)this + 12) = 0LL;
    *((void *)this + 13) = v5;
    *((void *)this + 17) = 0LL;
    *((void *)this + 18) = 0LL;
    *(_OWORD *)((char *)this + 152) = xmmword_180A3C7A0;
    *((_BYTE *)this + 13icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
    *((_WORD *)this + 84) = 0;
    *(void *)((char *)this + 268) = 0x271000000000LL;
    uint64_t v6 = *((void *)this + 3);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
    *((void *)this + 3) = 0LL;
    *((_BYTE *)this + 312) = 1;
    uint64_t v7 = *((void *)this + 40);
    if (v7) {
      (*(void (**)(uint64_t, void, char *))(*(void *)v7 + 64LL))( v7,  *((void *)this + 4),  (char *)this + 316);
    }
    uint64_t v8 = *((void *)this + 41);
    if (v8) {
      (*(void (**)(uint64_t, void, char *))(*(void *)v8 + 64LL))( v8,  *((void *)this + 4),  (char *)this + 316);
    }
  }

  return this;
}

uint64_t icu::RegexMatcher::reset(uint64_t this, uint64_t a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v3 = *(void *)(this + 48);
    *(void *)(this + 64) = 0LL;
    *(void *)(this + 72) = v3;
    *(void *)(this + 112) = 0LL;
    *(void *)(this + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v3;
    *(void *)(this + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
    *(void *)(this + 88) = v3;
    *(void *)(this + 96) = 0LL;
    *(void *)(this + 104) = v3;
    *(void *)(this + 136) = 0LL;
    *(void *)(this + 144) = 0LL;
    *(_OWORD *)(this + 152) = xmmword_180A3C7A0;
    *(_BYTE *)(this + 13icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
    *(_WORD *)(this + 168) = 0;
    *(void *)(this + 268) = 0x271000000000LL;
    if (a2 < 0 || v3 < a2) {
      *a3 = U_INDEX_OUTOFBOUNDS_ERROR;
    }
    else {
      *(void *)(this + 144) = a2;
    }
  }

  return this;
}

icu::RegexMatcher *icu::RegexMatcher::refreshInputText(const UText **this, UText *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (a2 && (int64_t v6 = utext_nativeLength((UText *)this[4]), v6 == utext_nativeLength(a2)))
    {
      int64_t NativeIndex = utext_getNativeIndex(this[4]);
      uint64_t v8 = utext_clone((UText *)this[4], a2, 0, 1, a3);
      this[4] = v8;
      if (*(int *)a3 <= 0)
      {
        utext_setNativeIndex(v8, NativeIndex);
        uint64_t v9 = this[5];
        if (v9)
        {
          int64_t v10 = utext_getNativeIndex(v9);
          int32_t v11 = utext_clone((UText *)this[5], a2, 0, 1, a3);
          this[5] = v11;
        }
      }
    }

    else
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }

  return (icu::RegexMatcher *)this;
}

uint64_t icu::RegexMatcher::setTrace(uint64_t this, char a2)
{
  *(_BYTE *)(this + 313) = a2;
  return this;
}

uint64_t icu::RegexMatcher::split( int64_t *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, int a4, UErrorCode *status)
{
  v17.magic = 878368812;
  v17.sizeOfStruct = 144;
  utext_openConstUnicodeString(&v17, (uint64_t)a2, status);
  int64_t v10 = (UText **)uprv_malloc(8LL * a4);
  if (v10)
  {
    int32_t v11 = v10;
    if (a4 <= 0)
    {
      uint64_t v9 = icu::RegexMatcher::split(this, &v17, v10, a4, status);
    }

    else
    {
      uint64_t v12 = 0LL;
      uint64_t v13 = a4;
      do
      {
        v11[v12++] = utext_openUnicodeString(0LL, (uint64_t)a3, status);
        a3 = (icu::UnicodeString *)((char *)a3 + 64);
      }

      while (a4 != v12);
      uint64_t v9 = icu::RegexMatcher::split(this, &v17, v11, a4, status);
      __int128 v14 = v11;
      do
      {
        __int128 v15 = *v14++;
        utext_close(v15);
        --v13;
      }

      while (v13);
    }

    uprv_free(v11);
    utext_close(&v17);
  }

  else
  {
    uint64_t v9 = 0LL;
    *UErrorCode status = U_MEMORY_ALLOCATION_ERROR;
  }

  return v9;
}

uint64_t icu::RegexMatcher::split(int64_t *this, UText *a2, UText **a3, int a4, UErrorCode *a5)
{
  if (a4 <= 0)
  {
    uint64_t result = 0LL;
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
  }

  else
  {
    uint64_t v9 = a2;
    int64_t v11 = *((void *)icu::RegexMatcher::reset((icu::RegexMatcher *)this, a2) + 15);
    if (!v11) {
      return 0LL;
    }
    uint64_t v12 = (a4 - 1);
    if (a4 < 2)
    {
      int64_t v14 = 0LL;
LABEL_65:
      if (v11 > v14)
      {
        if (!v9->chunkNativeStart && (int64_t v48 = this[6], v48 == v9->chunkNativeLimit) && v48 == v9->nativeIndexingLimit)
        {
          uint64_t v49 = a3[v12];
          if (v49)
          {
            int64_t v50 = utext_nativeLength(a3[v12]);
            utext_replace(v49, 0LL, v50, &v9->chunkContents[v14], *((_DWORD *)this + 30) - v14, a5);
          }

          else
          {
            memset(&ut, 0, sizeof(ut));
            int v67 = &v9->chunkContents[v14];
            ut.magic = 878368812;
            ut.sizeOfStruct = 144;
            utext_openUChars(&ut, v67, v11 - v14, a5);
            a3[v12] = utext_clone(0LL, &ut, 1, 0, a5);
            utext_close(&ut);
          }
        }

        else
        {
          UErrorCode status = U_ZERO_ERROR;
          int32_t v51 = utext_extract(v9, v14, v11, 0LL, 0, &status);
          int v52 = (UChar *)uprv_malloc(2LL * (v51 + 1));
          if (v52)
          {
            uint64_t v53 = v52;
            utext_extract(v9, v14, this[15], v52, v51 + 1, a5);
            uint64_t v54 = a3[v12];
            if (v54)
            {
              int64_t v55 = utext_nativeLength(a3[v12]);
              utext_replace(v54, 0LL, v55, v53, v51, a5);
            }

            else
            {
              memset(&ut, 0, sizeof(ut));
              ut.magic = 878368812;
              ut.sizeOfStruct = 144;
              utext_openUChars(&ut, v53, v51, a5);
              a3[v12] = utext_clone(0LL, &ut, 1, 0, a5);
              utext_close(&ut);
            }

            uprv_free(v53);
          }

          else
          {
            *a5 = U_MEMORY_ALLOCATION_ERROR;
          }
        }
      }
    }

    else
    {
      uint64_t v79 = (a4 - 2);
      int v70 = a4;
      int v13 = 0;
      int64_t v14 = 0LL;
      int v81 = *(_DWORD *)(*(void *)(this[1] + 136) + 8LL);
      uint64_t v71 = a3 + 1;
      uint64_t v72 = v9;
      uint64_t v73 = (a4 - 1);
      uint64_t v74 = a3;
      while (*((int *)this + 79) <= 0)
      {
        ut.magic = 0;
        if (!v9->chunkNativeStart && (int64_t v15 = this[6], v15 == v9->chunkNativeLimit) && v15 == v9->nativeIndexingLimit)
        {
          __int128 v16 = a3[v13];
          if (v16)
          {
            int64_t v17 = utext_nativeLength(a3[v13]);
            utext_replace(v16, 0LL, v17, &v9->chunkContents[v14], *((_DWORD *)this + 34) - v14, a5);
          }

          else
          {
            memset(&ut, 0, sizeof(ut));
            unsigned int v46 = &v9->chunkContents[v14];
            int64_t v47 = this[17] - v14;
            ut.magic = 878368812;
            ut.sizeOfStruct = 144;
            utext_openUChars(&ut, v46, v47, a5);
            a3[v13] = utext_clone(0LL, &ut, 1, 0, a5);
            utext_close(&ut);
          }
        }

        else
        {
          UErrorCode status = U_ZERO_ERROR;
          int32_t v18 = utext_extract(v9, v14, this[17], 0LL, 0, &status);
          uint64_t v19 = (UChar *)uprv_malloc(2LL * (v18 + 1));
          if (!v19) {
            goto LABEL_82;
          }
          uint64_t v20 = v19;
          utext_extract(v9, v14, this[17], v19, v18 + 1, a5);
          UErrorCode v21 = a3[v13];
          if (v21)
          {
            int64_t v22 = utext_nativeLength(a3[v13]);
            utext_replace(v21, 0LL, v22, v20, v18, a5);
          }

          else
          {
            memset(&ut, 0, sizeof(ut));
            ut.magic = 878368812;
            ut.sizeOfStruct = 144;
            utext_openUChars(&ut, v20, v18, a5);
            a3[v13] = utext_clone(0LL, &ut, 1, 0, a5);
            utext_close(&ut);
          }

          uprv_free(v20);
        }

        int64_t v14 = this[18];
        if (v81 >= 1 && v13 < (int)v79)
        {
          int64_t v75 = this[18];
          int v76 = v13;
          uint64_t v23 = 0LL;
          uint64_t v80 = v13 + 1LL;
          uint64_t v24 = &v71[v13];
          uint64_t v25 = v79;
          while (1)
          {
            int v26 = v23 + 1;
            uint64_t v27 = (UText *)this[4];
            int v28 = v24[v23];
            int64_t v29 = icu::RegexMatcher::start64((icu::RegexMatcher *)this, (int)v23 + 1, a5);
            int64_t v30 = icu::RegexMatcher::end64((icu::RegexMatcher *)this, (int)v23 + 1, a5);
            if (*(int *)a5 <= 0)
            {
              int64_t v32 = v30;
              if (v29 == v30)
              {
                if (v28)
                {
                  int64_t v33 = utext_nativeLength(v28);
                  utext_replace(v28, 0LL, v33, 0LL, 0, a5);
                }

                else
                {
                  int v28 = utext_openUChars(0LL, 0LL, 0LL, a5);
                }
              }

              else
              {
                int32_t v34 = utext_extract(v27, v29, v30, 0LL, 0, a5);
                if (*a5 == U_BUFFER_OVERFLOW_ERROR || *(int *)a5 <= 0)
                {
                  *a5 = U_ZERO_ERROR;
                  int v35 = (UChar *)&ut.sizeOfStruct + 1;
                  memset(&ut.providerProperties, 0, 88);
                  *(void *)&ut.magic = (char *)&ut.sizeOfStruct + 2;
                  int32_t v36 = v34 + 1;
                  ut.int32_t providerProperties = 40;
                  int32_t replacementLength = v34;
                  if (v34 >= 40)
                  {
                    int32_t v77 = v34 + 1;
                    uint64_t v37 = (UChar *)uprv_malloc(2LL * (v34 + 1));
                    if (v37)
                    {
                      int v35 = v37;
                      if (LOBYTE(ut.sizeOfStruct)) {
                        uprv_free(*(void **)&ut.magic);
                      }
                      *(void *)&ut.magic = v35;
                      int32_t v36 = v77;
                      ut.int32_t providerProperties = v77;
                      LOBYTE(ut.sizeOfStruct) = 1;
                    }

                    else
                    {
                      *a5 = U_MEMORY_ALLOCATION_ERROR;
                      int v35 = *(UChar **)&ut.magic;
                      int32_t v36 = v77;
                    }
                  }

                  int64_t v38 = v29;
                  int32_t v39 = v36;
                  utext_extract(v27, v38, v32, v35, v36, a5);
                  if (v28)
                  {
                    int64_t v40 = utext_nativeLength(v28);
                    utext_replace(v28, 0LL, v40, *(const UChar **)&ut.magic, replacementLength, a5);
                    goto LABEL_40;
                  }

                  uint64_t v25 = v79;
                  if (*(int *)a5 > 0)
                  {
                    int v28 = 0LL;
LABEL_43:
                    if (LOBYTE(ut.sizeOfStruct)) {
                      uprv_free(*(void **)&ut.magic);
                    }
                    goto LABEL_23;
                  }

                  if (LOBYTE(ut.sizeOfStruct))
                  {
                    uint64_t v41 = *(UChar **)&ut.magic;
                    *(void *)&ut.magic = (char *)&ut.sizeOfStruct + 2;
                    ut.int32_t providerProperties = 40;
                    LOBYTE(ut.sizeOfStruct) = 0;
                    if (!v41) {
                      goto LABEL_55;
                    }
LABEL_53:
                    uint64_t v45 = utext_openUChars(0LL, v41, replacementLength, a5);
                    if (*(int *)a5 < 1)
                    {
                      int v28 = v45;
                      v45->providerProperties |= 0x20u;
                    }

                    else
                    {
                      uprv_free(v41);
                      int v28 = 0LL;
                    }
                  }

                  else
                  {
                    if ((replacementLength & 0x80000000) == 0)
                    {
                      int32_t providerProperties = ut.providerProperties;
                      if (ut.providerProperties >= v39) {
                        int32_t providerProperties = v39;
                      }
                      size_t v43 = 2LL * providerProperties;
                      uint64_t v44 = (UChar *)uprv_malloc(v43);
                      if (v44)
                      {
                        uint64_t v41 = v44;
                        memcpy(v44, *(const void **)&ut.magic, v43);
                        *(void *)&ut.magic = (char *)&ut.sizeOfStruct + 2;
                        ut.int32_t providerProperties = 40;
                        LOBYTE(ut.sizeOfStruct) = 0;
                        goto LABEL_53;
                      }
                    }

uint64_t icu::RegexMatcher::start(icu::RegexMatcher *this, UErrorCode *a2)
{
  UErrorCode v2 = *((_DWORD *)this + 79);
  if (v2 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
LABEL_3:
    *a2 = v2;
    return 0xFFFFFFFFLL;
  }

  if (!*((_BYTE *)this + 130))
  {
    UErrorCode v2 = U_REGEX_INVALID_STATE;
    goto LABEL_3;
  }

  if ((*(_DWORD *)(*(void *)(*((void *)this + 1) + 136LL) + 8LL) & 0x80000000) != 0)
  {
    UErrorCode v2 = U_INDEX_OUTOFBOUNDS_ERROR;
    goto LABEL_3;
  }

  return *((unsigned int *)this + 34);
}

uint64_t icu::RegexMatcher::start(icu::RegexMatcher *this, int a2, UErrorCode *a3)
{
  return icu::RegexMatcher::start64(this, a2, a3);
}

uint64_t icu::RegexMatcher::start64(icu::RegexMatcher *this, UErrorCode *a2)
{
  UErrorCode v2 = *((_DWORD *)this + 79);
  if (v2 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
LABEL_3:
    *a2 = v2;
    return -1LL;
  }

  if (!*((_BYTE *)this + 130))
  {
    UErrorCode v2 = U_REGEX_INVALID_STATE;
    goto LABEL_3;
  }

  if ((*(_DWORD *)(*(void *)(*((void *)this + 1) + 136LL) + 8LL) & 0x80000000) != 0)
  {
    UErrorCode v2 = U_INDEX_OUTOFBOUNDS_ERROR;
    goto LABEL_3;
  }

  return *((void *)this + 17);
}

uint64_t icu::RegexMatcher::useAnchoringBounds(uint64_t this, int a2)
{
  *(_BYTE *)(this + 129) = a2;
  if (a2) {
    uint64_t v2 = *(void *)(this + 64);
  }
  else {
    uint64_t v2 = 0LL;
  }
  *(void *)(this + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v2;
  uint64_t v3 = 72LL;
  if (!a2) {
    uint64_t v3 = 48LL;
  }
  *(void *)(this + 88) = *(void *)(this + v3);
  return this;
}

uint64_t icu::RegexMatcher::useTransparentBounds(uint64_t this, int a2)
{
  *(_BYTE *)(this + 128) = a2;
  if (a2) {
    uint64_t v2 = 0LL;
  }
  else {
    uint64_t v2 = *(void *)(this + 64);
  }
  *(void *)(this + 96) = v2;
  uint64_t v3 = 48LL;
  if (!a2) {
    uint64_t v3 = 72LL;
  }
  *(void *)(this + 104) = *(void *)(this + v3);
  return this;
}

uint64_t icu::RegexMatcher::setTimeLimit(uint64_t this, int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    UErrorCode v3 = *(_DWORD *)(this + 316);
    if (v3 >= U_ILLEGAL_ARGUMENT_ERROR)
    {
LABEL_3:
      *a3 = v3;
      return this;
    }

    if (a2 < 0)
    {
      UErrorCode v3 = U_ILLEGAL_ARGUMENT_ERROR;
      goto LABEL_3;
    }

    *(_DWORD *)(this + 264) = a2;
  }

  return this;
}

uint64_t icu::RegexMatcher::getTimeLimit(icu::RegexMatcher *this)
{
  return *((unsigned int *)this + 66);
}

uint64_t icu::RegexMatcher::getStackLimit(icu::RegexMatcher *this)
{
  return *((unsigned int *)this + 69);
}

uint64_t icu::RegexMatcher::setMatchCallback( uint64_t this, signed __int8 (*a2)(const void *, int), const void *a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    *(void *)(this + 28icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = a2;
    *(void *)(this + 288) = a3;
  }

  return this;
}

uint64_t icu::RegexMatcher::getMatchCallback( uint64_t this, signed __int8 (**a2)(const void *, int), const void **a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    *a2 = *(signed __int8 (**)(const void *, int))(this + 280);
    *a3 = *(const void **)(this + 288);
  }

  return this;
}

uint64_t icu::RegexMatcher::setFindProgressCallback( uint64_t this, signed __int8 (*a2)(const void *, uint64_t), const void *a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    *(void *)(this + 296) = a2;
    *(void *)(this + 304) = a3;
  }

  return this;
}

uint64_t icu::RegexMatcher::getFindProgressCallback( uint64_t this, signed __int8 (**a2)(const void *, uint64_t), const void **a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    *a2 = *(signed __int8 (**)(const void *, uint64_t))(this + 296);
    *a3 = *(const void **)(this + 304);
  }

  return this;
}

uint64_t icu::RegexMatcher::resetStack(icu::RegexMatcher *this)
{
  uint64_t v2 = *((void *)this + 22);
  int v3 = *(_DWORD *)(*((void *)this + 1) + 128LL);
  int v4 = *(_DWORD *)(v2 + 8);
  int v5 = v4 + v3;
  if (v4 + v3 >= 0 && *(_DWORD *)(v2 + 12) >= v5) {
    goto LABEL_5;
  }
  if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v5, (UErrorCode *)this + 79))
  {
    int v4 = *(_DWORD *)(v2 + 8);
    int v5 = v4 + v3;
LABEL_5:
    uint64_t v6 = *(void *)(v2 + 24) + 8LL * v4;
    *(_DWORD *)(v2 + 8) = v5;
    goto LABEL_7;
  }

  uint64_t v6 = 0LL;
LABEL_7:
  int v7 = *(_DWORD *)(*((void *)this + 1) + 128LL);
  if (v7 >= 3) {
    memset((void *)(v6 + 16), 255, 8LL * (v7 - 2));
  }
  return v6;
}

uint64_t icu::RegexMatcher::isWordBoundary(icu::RegexMatcher *this, int64_t a2)
{
  if (*((void *)this + 13) <= a2)
  {
    unsigned int v5 = 0;
    *((_BYTE *)this + 168) = 1;
    goto LABEL_7;
  }

  int v3 = (UText *)*((void *)this + 4);
  uint64_t v4 = a2 - v3->chunkNativeStart;
  if (v4 < 0 || v4 >= v3->nativeIndexingLimit || v3->chunkContents[v4] >> 10 > 0x36u)
  {
    utext_setNativeIndex(v3, a2);
    int v3 = (UText *)*((void *)this + 4);
    LODWORD(v4) = v3->chunkOffset;
  }

  else
  {
    v3->chunkint Offset = v4;
  }

  unsigned int v5 = icu::UnicodeSet::contains((icu::UnicodeSet *)(qword_18C449BC0 + 208), v16);
LABEL_7:
  while (1)
  {
    uint64_t v6 = *((void *)this + 4);
    uint64_t v7 = *(int *)(v6 + 40);
    uint64_t v8 = (int)v7 <= *(_DWORD *)(v6 + 28)
       ? *(void *)(v6 + 32) + v7
       : (*(uint64_t (**)(void))(*(void *)(v6 + 56) + 64LL))();
    if (v8 <= *((void *)this + 12)) {
      break;
    }
    uint64_t v9 = (UText *)*((void *)this + 4);
    chunkint Offset = v9->chunkOffset;
    BOOL v11 = __OFSUB__(chunkOffset, 1);
    int v12 = chunkOffset - 1;
    if (v12 < 0 != v11 || (unsigned int v13 = v9->chunkContents[v12], v13 >> 11 > 0x1A)) {
      unsigned int v13 = utext_previous32(v9);
    }
    else {
      v9->chunkint Offset = v12;
    }
    if (!u_hasBinaryProperty(v13, UCHAR_GRAPHEME_EXTEND) && u_charType(v13) != 16)
    {
      int v14 = icu::UnicodeSet::contains((icu::UnicodeSet *)(qword_18C449BC0 + 208), v13);
      return v14 ^ v5;
    }
  }

  int v14 = 0;
  return v14 ^ v5;
}

uint64_t icu::RegexMatcher::isChunkWordBoundary(icu::RegexMatcher *this, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v4 = *(void *)(*((void *)this + 4) + 48LL);
  uint64_t v5 = a2;
  uint64_t v6 = *((void *)this + 13);
  if (v6 <= a2)
  {
    unsigned int v11 = 0;
    *((_BYTE *)this + 168) = 1;
    goto LABEL_7;
  }

  UChar32 v7 = *(unsigned __int16 *)(v4 + 2LL * a2);
  if ((v7 & 0xF800) == 0xD800)
  {
    if ((v7 & 0x400) != 0)
    {
      if (*((void *)this + 12) < a2)
      {
        int v22 = *(unsigned __int16 *)(v4 + 2LL * a2 - 2);
        BOOL v9 = (v22 & 0xFC00) == 55296;
        int v10 = v7 + (v22 << 10);
LABEL_26:
        UChar32 v23 = v10 - 56613888;
        if (v9) {
          UChar32 v7 = v23;
        }
      }
    }

    else if (v6 != a2 + 1LL)
    {
      int v8 = *(unsigned __int16 *)(v4 + 2 * (a2 + 1LL));
      BOOL v9 = (v8 & 0xFC00) == 56320;
      int v10 = v8 + (v7 << 10);
      goto LABEL_26;
    }
  }

  unsigned int v11 = icu::UnicodeSet::contains((icu::UnicodeSet *)(qword_18C449BC0 + 208), v7);
LABEL_7:
  uint64_t v12 = *((void *)this + 12);
  if (v12 >= v5)
  {
LABEL_22:
    int v20 = 0;
  }

  else
  {
    while (1)
    {
      uint64_t v13 = (int)v2;
      uint64_t v2 = (int)v2 - 1LL;
      UChar32 v14 = *(unsigned __int16 *)(v4 + 2 * v2);
      if (v12 < v2 && (v14 & 0xFC00) == 56320)
      {
        int v16 = v13 - 2;
        int v17 = *(unsigned __int16 *)(v4 + 2 * (v13 - 2));
        BOOL v18 = (v17 & 0xFC00) == 55296;
        int v19 = v14 - 56613888 + (v17 << 10);
        if (v18) {
          LODWORD(v2) = v16;
        }
        if (v18) {
          UChar32 v14 = v19;
        }
      }

      uint64_t v12 = *((void *)this + 12);
    }

    int v20 = icu::UnicodeSet::contains((icu::UnicodeSet *)(qword_18C449BC0 + 208), v14);
  }

  return v20 ^ v11;
}

uint64_t icu::RegexMatcher::isUWordBoundary(icu::RegexMatcher *this, uint64_t a2, UErrorCode *a3)
{
  if (!*((void *)this + 40))
  {
    English = (char **)icu::Locale::getEnglish(this);
    Worduint64_t Instance = icu::BreakIterator::createWordInstance(English, (const icu::Locale *)a3, v8, v9);
    *((void *)this + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = WordInstance;
    (*(void (**)(char *, void, UErrorCode *))(*(void *)WordInstance + 64LL))( WordInstance,  *((void *)this + 4),  a3);
  }

  if (*((void *)this + 13) > a2) {
    return (*(uint64_t (**)(void, uint64_t))(**((void **)this + 40) + 136LL))(*((void *)this + 40), a2);
  }
  uint64_t result = 1LL;
  *((_BYTE *)this + 168) = 1;
  return result;
}

uint64_t icu::RegexMatcher::followingGCBoundary(icu::RegexMatcher *this, uint64_t a2, UErrorCode *a3)
{
  uint64_t v5 = *((void *)this + 41);
  if (!v5)
  {
    English = (char **)icu::Locale::getEnglish(0LL);
    Characteruint64_t Instance = icu::BreakIterator::createCharacterInstance(English, (const icu::Locale *)a3, v9, v10);
    *((void *)this + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = CharacterInstance;
    (*(void (**)(char *, void, UErrorCode *))(*(void *)CharacterInstance + 64LL))( CharacterInstance,  *((void *)this + 4),  a3);
    uint64_t v5 = *((void *)this + 41);
  }

  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, UErrorCode *))(*(void *)v5 + 120LL))(v5, a2, a3);
  if (v6 != -1) {
    return v6;
  }
  return a2;
}

uint64_t icu::RegexMatcher::IncrementTime(uint64_t this, UErrorCode *a2)
{
  uint64_t v3 = this;
  UErrorCode v4 = U_REGEX_TIME_OUT;
  *(_DWORD *)(this + 272) = 10000;
  ++*(_DWORD *)(this + 268);
  uint64_t v5 = *(uint64_t (**)(void))(this + 280);
  if (v5)
  {
    this = v5(*(void *)(this + 288));
    if (!(_DWORD)this)
    {
      UErrorCode v4 = U_REGEX_STOPPED_BY_CALLER;
LABEL_7:
      *a2 = v4;
      return this;
    }
  }

  int v6 = *(_DWORD *)(v3 + 264);
  if (v6 >= 1 && *(_DWORD *)(v3 + 268) >= v6) {
    goto LABEL_7;
  }
  return this;
}

uint64_t sub_18097B2D8(icu::RegexMatcher *this, uint64_t a2, uint64_t a3, UErrorCode *a4)
{
  uint64_t v8 = *((void *)this + 22);
  int v9 = *((_DWORD *)this + 14);
  int v10 = *(_DWORD *)(v8 + 8);
  int v11 = v10 + v9;
  if (v10 + v9 >= 0 && *(_DWORD *)(v8 + 12) >= v11) {
    goto LABEL_6;
  }
  if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v11, a4))
  {
    int v10 = *(_DWORD *)(v8 + 8);
    int v11 = v10 + v9;
LABEL_6:
    uint64_t v12 = *(void *)(v8 + 24) + 8LL * v10;
    *(_DWORD *)(v8 + 8) = v11;
    goto LABEL_8;
  }

  uint64_t v12 = 0LL;
LABEL_8:
  if (*(int *)a4 >= 1)
  {
    *a4 = U_REGEX_STACK_OVERFLOW;
    return a2;
  }

  uint64_t v14 = 0LL;
  uint64_t v15 = *((int *)this + 14);
  uint64_t v16 = v12 - 8 * v15;
  uint64_t v17 = -8 * v15;
  do
  {
    *(void *)(v12 + v14) = *(void *)(v16 + v14);
    v14 += 8LL;
  }

  while (v17 + v14);
  int v18 = *((_DWORD *)this + 68);
  BOOL v19 = __OFSUB__(v18--, 1);
  *((_DWORD *)this + 68) = v18;
  if ((v18 < 0) ^ v19 | (v18 == 0)) {
    icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
  }
  *(void *)(v16 + 8) = a3;
  return v12;
}

void *icu::RegexMatcher::getStaticClassID(icu::RegexMatcher *this)
{
  return &unk_18C535879;
}

void *icu::RegexMatcher::getDynamicClassID(icu::RegexMatcher *this)
{
  return &unk_18C535879;
}

void *icu::RemoveTransliterator::getStaticClassID(icu::RemoveTransliterator *this)
{
  return &unk_18C53587A;
}

void *sub_18097B3F4()
{
  return &unk_18C53587A;
}

void *sub_18097B400()
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  uint64_t v8 = L"Any-Remove";
  unint64_t v0 = icu::UnicodeString::UnicodeString(v10, 1LL, &v8);
  icu::Transliterator::_registerFactory(v0, (uint64_t)sub_18097B4FC, 0LL);
  uint64_t v2 = icu::UnicodeString::~UnicodeString(v1, (icu::UnicodeString *)v10);
  v5[1] = v8;
  UChar32 v7 = "R";
  icu::UnicodeString::UnicodeString(v2, 1LL, &v7);
  int v6 = L"Null";
  icu::UnicodeString::UnicodeString(v9, 1LL, &v6);
  icu::Transliterator::_registerSpecialInverse((icu::Transliterator *)v10, (const icu::UnicodeString *)v9, 0LL);
  icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)v9);
  v5[0] = v6;
  return icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v10);
}

icu::Transliterator *sub_18097B4FC@<X0>(unint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result = (icu::Transliterator *)icu::UMemory::operator new(a2, (icu::UMemory *)0x58, a1);
  if (result) {
    return sub_18097B51C(result);
  }
  return result;
}

icu::Transliterator *sub_18097B51C(icu::Transliterator *a1)
{
  v5[8] = *(UChar **)MEMORY[0x1895F89C0];
  UErrorCode v4 = L"Any-Remove";
  icu::UnicodeString::UnicodeString(v5, 1LL, &v4);
  icu::Transliterator::Transliterator(a1, v5, 0LL);
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)v5);
  *(void *)a1 = &off_18972A850;
  return a1;
}

void sub_18097B5C4(icu::Transliterator *a1)
{
}

icu::Transliterator *sub_18097B5D8@<X0>( icu::Transliterator *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  UErrorCode v4 = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x58, a2);
  uint64_t v5 = v4;
  if (v4)
  {
    sub_18097B51C(v4);
    if (icu::Transliterator::getFilter(a1))
    {
      uint64_t Filter = icu::Transliterator::getFilter(a1);
      UChar32 v7 = (icu::UnicodeFilter *)(*(uint64_t (**)(uint64_t))(*(void *)Filter + 24LL))(Filter);
      icu::Transliterator::adoptFilter(v5, v7);
    }
  }

  return v5;
}

void sub_18097B63C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  __int128 v6 = 0u;
  __int128 v7 = 0u;
  uint64_t v9 = 0LL;
  __int128 v8 = 0u;
  uint64_t v5 = off_18971B688;
  LOWORD(v6) = 2;
  (*(void (**)(uint64_t, void, void, void (***)(icu::UnicodeString *__hidden)))(*(void *)a2 + 32LL))( a2,  a3[2],  a3[3],  &v5);
  int v4 = a3[2];
  a3[1] += v4 - a3[3];
  a3[3] = v4;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v5);
}

icu::RegexPattern *icu::RegexPattern::RegexPattern(icu::RegexPattern *this, unint64_t a2)
{
  *(void *)this = off_18972A900;
  *((void *)this + 5) = off_18971B688;
  *((_WORD *)this + 24) = 2;
  icu::RegexPattern::init(this, a2);
  return this;
}

{
  *(void *)this = off_18972A900;
  *((void *)this + 5) = off_18971B688;
  *((_WORD *)this + 24) = 2;
  icu::RegexPattern::init(this, a2);
  return this;
}

uint64_t *icu::RegexPattern::init(icu::RegexPattern *this, unint64_t a2)
{
  *(_OWORD *)((char *)this + 104) = 0u;
  uint64_t v3 = (UErrorCode *)((char *)this + 104);
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 4) = 0LL;
  if ((*((_WORD *)this + 24) & 1) != 0) {
    uint64_t v4 = 2LL;
  }
  else {
    uint64_t v4 = *((_WORD *)this + 24) & 0x1F;
  }
  *((_WORD *)this + 24) = v4;
  *(_OWORD *)((char *)this + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0uLL;
  uint64_t v5 = (_DWORD *)((char *)this + 120);
  *((void *)this + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
  *((_DWORD *)this + 42) = 0;
  *((void *)this + 22) = 0LL;
  *((_BYTE *)this + 184) = 0;
  *((void *)this + 24) = 0LL;
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0LL;
  *((void *)this + 2) = 0LL;
  *(_OWORD *)((char *)this + 136) = 0uLL;
  *((_DWORD *)this + 38) = 0;
  __int128 v6 = (icu::UVector64 *)icu::UMemory::operator new((uint64_t *)v4, (icu::UMemory *)0x20, a2);
  if (v6) {
    __int128 v6 = icu::UVector64::UVector64(v6, v3 + 4);
  }
  *((void *)this + 4) = v6;
  uint64_t v9 = (icu::UVector32 *)icu::UMemory::operator new(v8, (icu::UMemory *)0x20, v7);
  if (v9) {
    uint64_t v9 = icu::UVector32::UVector32(v9, v3 + 4);
  }
  *((void *)this + 17) = v9;
  uint64_t v12 = (icu::UVector *)icu::UMemory::operator new(v11, (icu::UMemory *)0x28, v10);
  if (v12) {
    uint64_t v12 = icu::UVector::UVector(v12, v3 + 4);
  }
  *(void *)uint64_t v3 = v12;
  uint64_t v15 = (icu::UnicodeSet *)icu::UMemory::operator new(v14, (icu::UMemory *)0xC8, v13);
  if (v15) {
    icu::UnicodeSet::UnicodeSet(v15);
  }
  *((void *)this + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v15;
  uint64_t result = icu::UMemory::operator new(v17, (icu::UMemory *)0x20, v16);
  if (result)
  {
    *(_OWORD *)uint64_t result = 0u;
    *((_OWORD *)result + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0u;
  }

  *((void *)this + 22) = result;
  if (*((int *)this + 30) <= 0)
  {
    if (*((void *)this + 4) && *((void *)this + 17) && *(void *)v3 && result && *((void *)this + 20)) {
      return (uint64_t *)icu::UVector::addElement(*(icu::UVector **)v3, 0, v3 + 4);
    }
    else {
      *uint64_t v5 = 7;
    }
  }

  return result;
}

uint64_t icu::RegexPattern::RegexPattern(icu::RegexPattern *this, const icu::RegexPattern *a2)
{
  *(void *)this = off_18972A900;
  *((void *)this + 5) = off_18971B688;
  *((_WORD *)this + 24) = 2;
  icu::RegexPattern::init(this, (unint64_t)a2);
  return icu::RegexPattern::operator=((uint64_t)this, (uint64_t)a2);
}

{
  *(void *)this = off_18972A900;
  *((void *)this + 5) = off_18971B688;
  *((_WORD *)this + 24) = 2;
  icu::RegexPattern::init(this, (unint64_t)a2);
  return icu::RegexPattern::operator=((uint64_t)this, (uint64_t)a2);
}

uint64_t icu::RegexPattern::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return a1;
  }
  icu::RegexPattern::zap((icu::RegexPattern *)a1);
  icu::RegexPattern::init((icu::RegexPattern *)a1, v4);
  int v6 = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v6;
  unint64_t v7 = (int *)(a1 + 120);
  if (v6 > 0) {
    return a1;
  }
  __int128 v8 = *(uint64_t **)(a2 + 16);
  if (v8)
  {
    uint64_t v9 = (icu::UnicodeString *)icu::UMemory::operator new(v8, (icu::UMemory *)0x40, v5);
    if (!v9)
    {
      *(void *)(a1 + 16) = 0LL;
LABEL_21:
      *(_DWORD *)(a1 + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 7;
      return a1;
    }

    uint64_t v10 = (uint64_t)v9;
    *(void *)(a1 + 16) = icu::UnicodeString::UnicodeString(v9, *(UChar ***)(a2 + 16));
    uint64_t v11 = utext_openConstUnicodeString(0LL, v10, (UErrorCode *)(a1 + 120));
  }

  else
  {
    *(void *)(a1 + 16) = 0LL;
    uint64_t v11 = utext_clone(*(UText **)(a1 + 8), *(const UText **)(a2 + 8), 0, 1, (UErrorCode *)(a1 + 120));
  }

  *(void *)(a1 + 8) = v11;
  if (*v7 > 0) {
    return a1;
  }
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  icu::UnicodeString::operator=((UChar **)(a1 + 40), (UChar **)(a2 + 40));
  *(void *)(a1 + 124) = *(void *)(a2 + 124);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  icu::UnicodeSet::operator=(*(icu::UnicodeSet **)(a1 + 160), *(const icu::UnicodeSet **)(a2 + 160));
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  uint64_t v12 = *(_OWORD **)(a2 + 176);
  unint64_t v13 = *(_OWORD **)(a1 + 176);
  __int128 v14 = v12[1];
  *unint64_t v13 = *v12;
  v13[1] = v14;
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  icu::UVector64::assign(*(icu::UVector64 **)(a1 + 32), *(const icu::UVector64 **)(a2 + 32), (UErrorCode *)(a1 + 120));
  icu::UVector32::assign(*(icu::UVector32 **)(a1 + 136), *(const icu::UVector32 **)(a2 + 136), (UErrorCode *)(a1 + 120));
  uint64_t v16 = *(int *)(*(void *)(a2 + 104) + 8LL);
  else {
    uint64_t v17 = 32 * v16;
  }
  int v18 = (void *)icu::UMemory::operator new[]((icu::UMemory *)v17, v15);
  if (!v18)
  {
    *(void *)(a1 + 112) = 0LL;
    goto LABEL_21;
  }

  BOOL v19 = v18;
  if (!(_DWORD)v16)
  {
    *(void *)(a1 + 112) = v18;
    goto LABEL_25;
  }

  bzero(v18, 32 * v16);
  *(void *)(a1 + 112) = v19;
  if ((int)v16 < 2)
  {
LABEL_25:
    if (*(void *)(a2 + 192))
    {
      if (icu::RegexPattern::initNamedCaptureMap((icu::RegexPattern *)a1))
      {
        int v39 = -1;
        uint64_t v32 = uhash_nextElement(*(uint64_t **)(a2 + 192), &v39);
        if (v32)
        {
          uint64_t v34 = v32;
          do
          {
            int v35 = (uint64_t *)*v7;
            int32_t v36 = *(UChar ***)(v34 + 16);
            uint64_t v37 = (icu::UnicodeString *)icu::UMemory::operator new(v35, (icu::UMemory *)0x40, v33);
            if (v37)
            {
              uint64_t v38 = (uint64_t)v37;
              icu::UnicodeString::UnicodeString(v37, v36);
              uhash_puti(*(void *)(a1 + 192), v38, *(_DWORD *)(v34 + 8), (int *)(a1 + 120));
            }

            else
            {
              *unint64_t v7 = 7;
            }

            uint64_t v34 = uhash_nextElement(*(uint64_t **)(a2 + 192), &v39);
          }

          while (v34);
        }
      }
    }

    return a1;
  }

  uint64_t v20 = 32LL * v16;
  unsigned int v21 = 1;
  uint64_t v22 = 32LL;
  while (*v7 <= 0)
  {
    UChar32 v23 = (const icu::UnicodeSet *)icu::UVector::elementAt(*(icu::UVector **)(a2 + 104), v21);
    int v26 = (icu::UnicodeSet *)icu::UMemory::operator new(v25, (icu::UMemory *)0xC8, v24);
    if (!v26)
    {
      *unint64_t v7 = 7;
      goto LABEL_25;
    }

    uint64_t v27 = v26;
    icu::UnicodeSet::UnicodeSet(v26, v23);
    icu::UVector::addElement(*(icu::UVector **)(a1 + 104), v27, (UErrorCode *)(a1 + 120));
    int v28 = (_OWORD *)(*(void *)(a2 + 112) + v22);
    int64_t v29 = (_OWORD *)(*(void *)(a1 + 112) + v22);
    __int128 v30 = v28[1];
    _OWORD *v29 = *v28;
    v29[1] = v30;
    ++v21;
    v22 += 32LL;
    if (v20 == v22) {
      goto LABEL_25;
    }
  }

  return a1;
}

void icu::RegexPattern::zap(icu::RegexPattern *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  *((void *)this + 4) = 0LL;
  uint64_t v3 = (icu::UVector *)*((void *)this + 13);
  if (*((int *)v3 + 2) >= 2)
  {
    signed int v4 = 1;
    do
    {
      unint64_t v5 = (icu::UnicodeSet *)icu::UVector::elementAt(v3, v4);
      if (v5)
      {
        unint64_t v7 = icu::UnicodeSet::~UnicodeSet(v6, v5);
        icu::UMemory::operator delete(v7);
      }

      ++v4;
      uint64_t v3 = (icu::UVector *)*((void *)this + 13);
    }

    while (v4 < *((_DWORD *)v3 + 2));
  }

  (*(void (**)(icu::UVector *))(*(void *)v3 + 8LL))(v3);
  *((void *)this + 13) = 0LL;
  uint64_t v9 = (void *)*((void *)this + 14);
  if (v9) {
    icu::UMemory::operator delete[](v9);
  }
  *((void *)this + 14) = 0LL;
  uint64_t v10 = *((void *)this + 17);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
  }
  *((void *)this + 17) = 0LL;
  uint64_t v11 = (icu::UnicodeSet *)*((void *)this + 20);
  if (v11)
  {
    uint64_t v12 = icu::UnicodeSet::~UnicodeSet(v8, v11);
    icu::UMemory::operator delete(v12);
  }

  *((void *)this + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
  unint64_t v13 = (void *)*((void *)this + 22);
  if (v13) {
    icu::UMemory::operator delete(v13);
  }
  *((void *)this + 22) = 0LL;
  __int128 v14 = (UText *)*((void *)this + 1);
  if (v14)
  {
    utext_close(v14);
    *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0LL;
  }

  uint64_t v15 = *((void *)this + 2);
  if (v15)
  {
    (*(void (**)(uint64_t))(*(void *)v15 + 8LL))(v15);
    *((void *)this + 2) = 0LL;
  }

  uint64_t v16 = (_BYTE *)*((void *)this + 24);
  if (v16)
  {
    uhash_close(v16);
    *((void *)this + 24) = 0LL;
  }

uint64_t icu::RegexPattern::initNamedCaptureMap(icu::RegexPattern *this)
{
  if (*((void *)this + 24)) {
    return 1LL;
  }
  uint64_t v3 = uhash_openSize( (uint64_t)uhash_hashUnicodeString,  (uint64_t)uhash_compareUnicodeString,  (uint64_t)uhash_compareLong,  7,  (int *)this + 30);
  *((void *)this + 24) = v3;
  if (*((int *)this + 30) <= 0)
  {
    uhash_setKeyDeleter((uint64_t)v3, (uint64_t)uprv_deleteUObject);
    return 1LL;
  }

  return 0LL;
}

void icu::RegexPattern::~RegexPattern(icu::RegexPattern *this)
{
}

{
  void *v2;
  icu::RegexPattern::zap(this);
  icu::UnicodeString::~UnicodeString(v2, (icu::RegexPattern *)((char *)this + 40));
  icu::UObject::~UObject(this);
}

{
  void *v2;
  void *v3;
  icu::RegexPattern::zap(this);
  icu::UnicodeString::~UnicodeString(v2, (icu::RegexPattern *)((char *)this + 40));
  icu::UObject::~UObject(this);
  icu::UMemory::operator delete(v3);
}

uint64_t icu::RegexPattern::clone@<X0>( icu::RegexPattern *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  signed int v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0xC8, a2);
  uint64_t v6 = (uint64_t)v4;
  if (v4)
  {
    *signed int v4 = (uint64_t)off_18972A900;
    v4[5] = (uint64_t)off_18971B688;
    *((_WORD *)v4 + 24) = 2;
    icu::RegexPattern::init((icu::RegexPattern *)v4, v5);
    icu::RegexPattern::operator=(v6, (uint64_t)this);
  }

  return v6;
}

uint64_t icu::RegexPattern::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24) || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120)) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4 || (uint64_t v5 = *(void *)(a2 + 16)) == 0)
  {
    __int128 v8 = *(UText **)(a1 + 8);
    uint64_t v9 = *(UText **)(a2 + 8);
    if (v8)
    {
      if (v9)
      {
        uint64_t chunkNativeStart = v8->chunkNativeStart;
        if (chunkNativeStart > 0
          || (uint64_t v11 = -chunkNativeStart, v11 >= v8->nativeIndexingLimit)
          || v8->chunkContents[v11] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v8, 0LL);
          uint64_t v9 = *(UText **)(a2 + 8);
        }

        else
        {
          v8->chunkint Offset = v11;
        }

        uint64_t v14 = v9->chunkNativeStart;
        if (v14 > 0 || (uint64_t v15 = -v14, v15 >= v9->nativeIndexingLimit) || v9->chunkContents[v15] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v9, 0LL);
          uint64_t v9 = *(UText **)(a2 + 8);
        }

        else
        {
          v9->chunkint Offset = v15;
        }

        int v16 = utext_equals(*(const UText **)(a1 + 8), v9);
        return v16 != 0;
      }
    }

    else if (!v9)
    {
      return 1LL;
    }

    return 0LL;
  }

  unsigned int v6 = *(unsigned __int16 *)(v4 + 8);
  if ((v6 & 1) != 0) {
    return *(_WORD *)(v5 + 8) & 1;
  }
  if ((v6 & 0x8000) != 0) {
    int v7 = *(_DWORD *)(v4 + 12);
  }
  else {
    int v7 = v6 >> 5;
  }
  uint64_t v12 = 0LL;
  unsigned int v17 = *(unsigned __int16 *)(v5 + 8);
  if ((v17 & 0x8000u) == 0) {
    unsigned int v18 = v17 >> 5;
  }
  else {
    unsigned int v18 = *(_DWORD *)(v5 + 12);
  }
  if ((v17 & 1) == 0 && v7 == v18)
  {
    int v16 = icu::UnicodeString::doEquals((icu::UnicodeString *)v4, (const icu::UnicodeString *)v5, v7);
    return v16 != 0;
  }

  return v12;
}

uint64_t *icu::RegexPattern::compile( UChar **this, const icu::UnicodeString *a2, UParseError *a3, UErrorCode *a4, UErrorCode *a5)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  int v7 = (int)a2;
  if ((a2 & 0xFFFFFC40) != 0)
  {
    uint64_t v5 = 0LL;
    int32_t v8 = 66315;
LABEL_11:
    *a4 = v8;
    return v5;
  }

  if ((a2 & 0x80) != 0)
  {
    uint64_t v5 = 0LL;
    int32_t v8 = 66309;
    goto LABEL_11;
  }

  uint64_t v11 = icu::UMemory::operator new((uint64_t *)0xFFFFFC40LL, (icu::UMemory *)0xC8, (unint64_t)a2);
  uint64_t v5 = v11;
  if (!v11)
  {
    int32_t v8 = 7;
    goto LABEL_11;
  }

  *uint64_t v11 = (uint64_t)off_18972A900;
  _OWORD v11[5] = (uint64_t)off_18971B688;
  *((_WORD *)v11 + 24) = 2;
  icu::RegexPattern::init((icu::RegexPattern *)v11, v12);
  int32_t v13 = *((_DWORD *)v5 + 30);
  if (v13 >= 1)
  {
    *a4 = v13;
    icu::RegexPattern::zap((icu::RegexPattern *)v5);
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)(v5 + 5));
    icu::UObject::~UObject((icu::UObject *)v5);
    icu::UMemory::operator delete(v15);
    return 0LL;
  }

  *((_DWORD *)v5 + 6) = v7;
  memset(v19, 0, sizeof(v19));
  icu::RegexCompile::RegexCompile((icu::RegexCompile *)v19, (icu::RegexPattern *)v5, a4);
  icu::RegexCompile::compile((icu::RegexCompile *)v19, this, a3, a4, v17);
  if (*(int *)a4 >= 1)
  {
    icu::RegexPattern::~RegexPattern((icu::RegexPattern *)v5);
    icu::UMemory::operator delete(v18);
    uint64_t v5 = 0LL;
  }

  icu::RegexCompile::~RegexCompile((icu::RegexCompile *)v19);
  return v5;
}

uint64_t *icu::RegexPattern::compile(UText *this, UText *a2, UParseError *a3, UErrorCode *a4, UErrorCode *a5)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  int v7 = (int)a2;
  if ((a2 & 0xFFFFFC40) != 0)
  {
    uint64_t v5 = 0LL;
    int32_t v8 = 66315;
LABEL_11:
    *a4 = v8;
    return v5;
  }

  if ((a2 & 0x80) != 0)
  {
    uint64_t v5 = 0LL;
    int32_t v8 = 66309;
    goto LABEL_11;
  }

  uint64_t v11 = icu::UMemory::operator new((uint64_t *)0xFFFFFC40LL, (icu::UMemory *)0xC8, (unint64_t)a2);
  uint64_t v5 = v11;
  if (!v11)
  {
    int32_t v8 = 7;
    goto LABEL_11;
  }

  *uint64_t v11 = (uint64_t)off_18972A900;
  _OWORD v11[5] = (uint64_t)off_18971B688;
  *((_WORD *)v11 + 24) = 2;
  icu::RegexPattern::init((icu::RegexPattern *)v11, v12);
  int32_t v13 = *((_DWORD *)v5 + 30);
  if (v13 >= 1)
  {
    *a4 = v13;
    icu::RegexPattern::zap((icu::RegexPattern *)v5);
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)(v5 + 5));
    icu::UObject::~UObject((icu::UObject *)v5);
    icu::UMemory::operator delete(v15);
    return 0LL;
  }

  *((_DWORD *)v5 + 6) = v7;
  memset(v18, 0, sizeof(v18));
  icu::RegexCompile::RegexCompile((icu::RegexCompile *)v18, (icu::RegexPattern *)v5, a4);
  icu::RegexCompile::compile((icu::RegexCompile *)v18, this, a3, a4);
  if (*(int *)a4 >= 1)
  {
    icu::RegexPattern::~RegexPattern((icu::RegexPattern *)v5);
    icu::UMemory::operator delete(v17);
    uint64_t v5 = 0LL;
  }

  icu::RegexCompile::~RegexCompile((icu::RegexCompile *)v18);
  return v5;
}

uint64_t *icu::RegexPattern::compile( UChar **this, UParseError *a2, UErrorCode *a3, UErrorCode *a4, UErrorCode *a5)
{
  return icu::RegexPattern::compile(this, 0LL, a2, a3, a5);
}

uint64_t *icu::RegexPattern::compile( UText *this, UParseError *a2, UErrorCode *a3, UErrorCode *a4, UErrorCode *a5)
{
  return icu::RegexPattern::compile(this, 0LL, a2, a3, a5);
}

uint64_t *icu::RegexPattern::compile( UChar **this, const icu::UnicodeString *a2, UErrorCode *a3, UErrorCode *a4, UErrorCode *a5)
{
  return icu::RegexPattern::compile(this, a2, &v6, a3, a5);
}

uint64_t *icu::RegexPattern::compile(UText *this, UText *a2, UErrorCode *a3, UErrorCode *a4, UErrorCode *a5)
{
  return icu::RegexPattern::compile(this, a2, &v6, a3, a5);
}

uint64_t icu::RegexPattern::flags(icu::RegexPattern *this)
{
  return *((unsigned int *)this + 6);
}

UErrorCode *icu::RegexPattern::matcher( icu::RegexPattern *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t v5 = (UErrorCode *)icu::RegexPattern::matcher(this, a3);
  UParseError v6 = v5;
  if (v5)
  {
    v5[79] = *a3;
    icu::RegexMatcher::reset((icu::RegexMatcher *)v5, a2);
  }

  return v6;
}

icu::RegexMatcher *icu::RegexPattern::matcher(icu::RegexPattern *this, UErrorCode *a2)
{
  UErrorCode v5 = *((_DWORD *)this + 30);
  if (v5 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    uint64_t result = 0LL;
LABEL_5:
    *a2 = v5;
    return result;
  }

  uint64_t result = (icu::RegexMatcher *)icu::UMemory::operator new((icu::UMemory *)0x150, (unint64_t)a2);
  if (!result)
  {
    UErrorCode v5 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_5;
  }

  return (icu::RegexMatcher *)icu::RegexMatcher::RegexMatcher(result, this);
}

uint64_t icu::RegexPattern::matches( UChar **this, const icu::UnicodeString *a2, UParseError *a3, UErrorCode *a4, UErrorCode *a5)
{
  int32_t v8 = icu::RegexPattern::compile(this, 0LL, a3, a4, a5);
  uint64_t v9 = icu::RegexPattern::matcher((icu::RegexPattern *)v8, a2, a4);
  uint64_t v5 = icu::RegexMatcher::matches((icu::RegexMatcher *)v9, a4);
  if (v9)
  {
    icu::RegexMatcher::~RegexMatcher((icu::RegexMatcher *)v9);
    icu::UMemory::operator delete(v10);
  }

  if (v8)
  {
    icu::RegexPattern::zap((icu::RegexPattern *)v8);
    icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)(v8 + 5));
    icu::UObject::~UObject((icu::UObject *)v8);
    icu::UMemory::operator delete(v12);
  }

  return v5;
}

uint64_t icu::RegexPattern::matches(UText *this, UText *a2, UParseError *a3, UErrorCode *a4, UErrorCode *a5)
{
  int32_t v8 = icu::RegexPattern::compile(this, 0LL, a3, a4, a5);
  uint64_t v9 = icu::RegexPattern::matcher((icu::RegexPattern *)v8, a4);
  uint64_t v10 = v9;
  uint64_t v5 = 0LL;
  if (*(int *)a4 <= 0)
  {
    icu::RegexMatcher::reset(v9, a2);
    uint64_t v5 = icu::RegexMatcher::matches(v10, a4);
  }

  if (v10)
  {
    icu::RegexMatcher::~RegexMatcher(v10);
    icu::UMemory::operator delete(v11);
  }

  if (v8)
  {
    icu::RegexPattern::zap((icu::RegexPattern *)v8);
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)(v8 + 5));
    icu::UObject::~UObject((icu::UObject *)v8);
    icu::UMemory::operator delete(v13);
  }

  return v5;
}

UText *icu::RegexPattern::pattern@<X0>(icu::RegexPattern *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (UChar **)*((void *)this + 2);
  if (v3) {
    return (UText *)icu::UnicodeString::UnicodeString((icu::UnicodeString *)a2, v3);
  }
  uint64_t result = (UText *)*((void *)this + 1);
  if (result)
  {
    UErrorCode status = U_ZERO_ERROR;
    int64_t v6 = utext_nativeLength(result);
    int32_t v7 = utext_extract(*((UText **)this + 1), 0LL, v6, 0LL, 0, &status);
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
    *(void *)(a2 + 56) = 0LL;
    *(void *)a2 = off_18971B688;
    *(_WORD *)(a2 + 8) = 2;
    UErrorCode status = U_ZERO_ERROR;
    uint64_t Buffer = (UChar *)icu::UnicodeString::getBuffer((icu::UnicodeString *)a2, v7);
    utext_extract(*((UText **)this + 1), 0LL, v6, Buffer, v7, &status);
    return (UText *)icu::UnicodeString::releaseBuffer(a2, v7);
  }

  else
  {
    *(void *)a2 = off_18971B688;
    *(_WORD *)(a2 + 8) = 2;
  }

  return result;
}

uint64_t icu::RegexPattern::patternText(icu::RegexPattern *this, UErrorCode *a2)
{
  *a2 = U_ZERO_ERROR;
  uint64_t result = *((void *)this + 1);
  if (!result)
  {
    sub_18096A114(a2);
    return *(void *)(qword_18C449BC0 + 3832);
  }

  return result;
}

uint64_t icu::RegexPattern::groupNumberFromName( icu::RegexPattern *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t v5 = *((void *)this + 24);
  if (!v5 || (uint64_t result = uhash_geti(v5, (uint64_t)a2), !(_DWORD)result))
  {
    uint64_t result = 0LL;
    *a3 = U_REGEX_INVALID_CAPTURE_GROUP_NAME;
  }

  return result;
}

uint64_t icu::RegexPattern::groupNumberFromName( icu::RegexPattern *this, const char *a2, uint64_t a3, UErrorCode *a4)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  memset(v10, 0, sizeof(v10));
  icu::UnicodeString::UnicodeString(v10, a2, a3, 0LL);
  uint64_t v4 = 0LL;
  uint64_t v7 = *(unsigned int *)a4;
  if ((int)v7 <= 0)
  {
    uint64_t v8 = *((void *)this + 24);
    if (!v8 || (uint64_t v4 = uhash_geti(v8, (uint64_t)v10), !(_DWORD)v4))
    {
      uint64_t v4 = 0LL;
      uint64_t v7 = 66325LL;
      *a4 = U_REGEX_INVALID_CAPTURE_GROUP_NAME;
    }
  }

  icu::UnicodeString::~UnicodeString((void *)v7, (icu::UnicodeString *)v10);
  return v4;
}

uint64_t icu::RegexPattern::split( icu::RegexPattern *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, int a4, UErrorCode *a5)
{
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  memset(v11, 0, sizeof(v11));
  icu::RegexMatcher::RegexMatcher((icu::RegexMatcher *)v11, this);
  else {
    uint64_t v5 = 0LL;
  }
  icu::RegexMatcher::~RegexMatcher((icu::RegexMatcher *)v11);
  return v5;
}

uint64_t icu::RegexPattern::split(icu::RegexPattern *this, UText *a2, UText **a3, int a4, UErrorCode *a5)
{
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  memset(v11, 0, sizeof(v11));
  icu::RegexMatcher::RegexMatcher((icu::RegexMatcher *)v11, this);
  else {
    uint64_t v5 = 0LL;
  }
  icu::RegexMatcher::~RegexMatcher((icu::RegexMatcher *)v11);
  return v5;
}

void *icu::RegexPattern::getStaticClassID(icu::RegexPattern *this)
{
  return &unk_18C53587B;
}

void *icu::RegexPattern::getDynamicClassID(icu::RegexPattern *this)
{
  return &unk_18C53587B;
}

void sub_18097CA48(icu::ByteSink *a1)
{
}

void *sub_18097CA5C(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  int v4 = a4;
  int v5 = a3;
  uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 48LL))(a1, a3, a4);
  if ((_DWORD)result) {
    return memcpy((void *)(a1[1] + v4), a2, v5);
  }
  return result;
}

BOOL sub_18097CAC4(uint64_t a1, int a2, int a3)
{
  if (!*(void *)(a1 + 8)) {
    return 0LL;
  }
  int v4 = 2 * *(_DWORD *)(a1 + 16);
  if (v4 <= a3 + 2 * a2) {
    int v4 = a3 + 2 * a2;
  }
  if (v4 <= 200) {
    int v5 = 200;
  }
  else {
    int v5 = v4;
  }
  int64_t v6 = icu::CollationKey::reallocate(*(icu::CollationKey **)(a1 + 32), v5, a3);
  BOOL result = v6 != 0LL;
  if (v6) {
    int v8 = v5;
  }
  else {
    int v8 = 0;
  }
  *(void *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 16) = v8;
  return result;
}

uint64_t icu::RuleBasedCollator::RuleBasedCollator(uint64_t a1, uint64_t a2)
{
  int v4 = icu::Collator::Collator((void *)a1, (const icu::Collator *)a2);
  *int v4 = off_18972A990;
  *(_OWORD *)(v4 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v4 + 3) = *(_OWORD *)(a2 + 24);
  icu::Locale::Locale((icu::Locale *)(v4 + 5), a2 + 40);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  *(_BYTE *)(a1 + 268) = *(_BYTE *)(a2 + 268);
  icu::SharedObject::addRef(*(void *)(a1 + 16));
  icu::SharedObject::addRef(*(void *)(a1 + 32));
  return a1;
}

{
  void *v4;
  uint64_t v5;
  int v4 = icu::Collator::Collator((void *)a1);
  *int v4 = off_18972A990;
  int v5 = *(void *)(a2 + 248);
  *(_OWORD *)(v4 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = *(_OWORD *)(v5 + 24);
  v4[3] = v5;
  v4[4] = a2;
  icu::Locale::Locale((icu::Locale *)(v4 + 5), a2 + 24);
  *(_DWORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 268) = 0;
  icu::SharedObject::addRef(*(void *)(a1 + 16));
  icu::SharedObject::addRef(*(void *)(a1 + 32));
  return a1;
}

icu::RuleBasedCollator *icu::RuleBasedCollator::RuleBasedCollator( icu::RuleBasedCollator *this, const icu::CollationTailoring *a2, const unsigned __int8 *a3, const icu::RuleBasedCollator *a4, UErrorCode *a5)
{
  uint64_t v10 = icu::Collator::Collator(this);
  void *v10 = off_18972A990;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  icu::Locale::Locale((uint64_t *)off_18972A990, (icu::Locale *)(v10 + 5), "", 0LL, 0LL, 0LL);
  *((_DWORD *)this + 66) = 0;
  *((_BYTE *)this + 268) = 0;
  if (*(int *)a5 <= 0)
  {
    if (!a2 || !(_DWORD)a3 || !a4)
    {
      UErrorCode v15 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_9:
      *a5 = v15;
      return this;
    }

    uint64_t Root = icu::CollationRoot::getRoot((icu::CollationRoot *)a5, v11);
    if (*(int *)a5 <= 0)
    {
      uint64_t v14 = (uint64_t *)*((void *)a4 + 3);
      if (v14 == (uint64_t *)Root)
      {
        unsigned int v17 = (icu::CollationTailoring *)icu::UMemory::operator new(v14, (icu::UMemory *)0x190, v13);
        if (v17)
        {
          uint64_t v18 = (uint64_t)v17;
          if (*(void *)(icu::CollationTailoring::CollationTailoring( v17,  *(const icu::CollationSettings **)(*((void *)a4 + 3) + 32LL))
                         + 32))
          {
            icu::CollationDataReader::read(*((void *)a4 + 3), a2, a3, v18, a5, v19);
            if (*(int *)a5 <= 0)
            {
              icu::Locale::setToBogus((icu::Locale *)(v18 + 104));
              icu::RuleBasedCollator::adoptTailoring(this, (icu::CollationTailoring *)v18, a5);
              return this;
            }
          }

          else
          {
            *a5 = U_MEMORY_ALLOCATION_ERROR;
          }

          (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
          return this;
        }

        UErrorCode v15 = U_MEMORY_ALLOCATION_ERROR;
      }

      else
      {
        UErrorCode v15 = U_UNSUPPORTED_ERROR;
      }

      goto LABEL_9;
    }
  }

  return this;
}

icu::Locale *icu::RuleBasedCollator::adoptTailoring( icu::RuleBasedCollator *this, icu::CollationTailoring *a2, UErrorCode *a3)
{
  int v4 = (uint64_t *)*(unsigned int *)a3;
  int v8 = icu::UMemory::operator new(v4, (icu::UMemory *)0x100, (unint64_t)a2);
  if (!v8)
  {
    *((void *)this + 4) = 0LL;
    *a3 = U_MEMORY_ALLOCATION_ERROR;
    return (icu::Locale *)icu::SharedObject::deleteIfZeroRefCount((uint64_t)a2);
  }

  *((void *)this + 4) = sub_1808B4534(v8, (uint64_t)a2 + 104, (uint64_t)a2);
  uint64_t v9 = *((void *)a2 + 4);
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = *((void *)a2 + 3);
  *((void *)this + 2) = v9;
  icu::SharedObject::addRef(v9);
  *((void *)this + 3) = a2;
  icu::SharedObject::addRef(*((void *)this + 4));
  BOOL result = icu::Locale::operator=((icu::RuleBasedCollator *)((char *)this + 40), (uint64_t)a2 + 104);
  *((_BYTE *)this + 268) = 0;
  return result;
}

void icu::RuleBasedCollator::~RuleBasedCollator(icu::RuleBasedCollator *this)
{
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    icu::SharedObject::removeRef(v2);
    *((void *)this + 2) = 0LL;
  }

  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    icu::SharedObject::removeRef(v3);
    *((void *)this + 4) = 0LL;
  }

  icu::Locale::~Locale((icu::RuleBasedCollator *)((char *)this + 40));
  icu::Collator::~Collator(this);
}

{
  void *v1;
  icu::RuleBasedCollator::~RuleBasedCollator(this);
  icu::UMemory::operator delete(v1);
}

uint64_t *icu::RuleBasedCollator::clone@<X0>( icu::RuleBasedCollator *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  BOOL result = icu::UMemory::operator new(a3, (icu::UMemory *)0x110, a2);
  if (result) {
    return (uint64_t *)icu::RuleBasedCollator::RuleBasedCollator((uint64_t)result, (uint64_t)this);
  }
  return result;
}

uint64_t icu::RuleBasedCollator::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_18085C214(*(icu::SharedObject **)(a2 + 16), (icu::SharedObject **)(a1 + 16));
    int v4 = *(icu::SharedObject **)(a2 + 32);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    sub_18085C214(v4, (icu::SharedObject **)(a1 + 32));
    *(void *)(a1 + 8) = *(void *)(*(void *)(a1 + 24) + 24LL);
    icu::Locale::operator=((icu::Locale *)(a1 + 40), a2 + 40);
    *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
    *(_BYTE *)(a1 + 268) = *(_BYTE *)(a2 + 268);
  }

  return a1;
}

void *icu::RuleBasedCollator::getStaticClassID(icu::RuleBasedCollator *this)
{
  return &unk_18C53587C;
}

void *icu::RuleBasedCollator::getDynamicClassID(icu::RuleBasedCollator *this)
{
  return &unk_18C53587C;
}

uint64_t icu::RuleBasedCollator::operator==(icu::RuleBasedCollator *a1, icu::RuleBasedCollator *a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  if (!icu::Collator::operator==(a1, a2)
    || !icu::CollationSettings::operator==(*((void *)a1 + 2), *((void *)a2 + 2)))
  {
    return 0LL;
  }

  uint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *((void *)a2 + 1);
  if (v4 == v5) {
    return 1LL;
  }
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v7 = *(void *)(v5 + 32);
  if ((v6 == 0) != (v7 == 0)) {
    return 0LL;
  }
  if (!v6 || *(unsigned __int16 *)(*((void *)a1 + 3) + 48LL) >= 0x20u)
  {
    uint64_t v9 = *((void *)a2 + 3);
  }

  UErrorCode v15 = U_ZERO_ERROR;
  TailoredSet = icu::RuleBasedCollator::getTailoredSet(a1, &v15);
  __int128 v12 = icu::RuleBasedCollator::getTailoredSet(a2, &v15);
  BOOL v8 = 0LL;
  if (v15 <= U_ZERO_ERROR) {
    BOOL v8 = icu::UnicodeSet::operator==((uint64_t)TailoredSet, (uint64_t)v12);
  }
  if (v12)
  {
    icu::UnicodeSet::~UnicodeSet(v12);
    icu::UMemory::operator delete(v13);
  }

  if (TailoredSet)
  {
    icu::UnicodeSet::~UnicodeSet(TailoredSet);
    icu::UMemory::operator delete(v14);
  }

  return v8;
}

icu::UnicodeSet *icu::RuleBasedCollator::getTailoredSet(icu::RuleBasedCollator *this, UErrorCode *a2)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  uint64_t v2 = (uint64_t *)*(unsigned int *)a2;
  uint64_t v7 = (icu::UnicodeSet *)icu::UMemory::operator new(v2, (icu::UMemory *)0xC8, (unint64_t)a2);
  uint64_t v3 = v7;
  if (!v7)
  {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
    return v3;
  }

  icu::UnicodeSet::UnicodeSet(v7);
  BOOL v8 = (uint64_t *)*((void *)this + 1);
  if (v8[4])
  {
    v11[0] = 0LL;
    v11[1] = 0LL;
    void v11[2] = v3;
    __int128 v12 = off_18971B688;
    __int16 v13 = 2;
    uint64_t v14 = 0LL;
    int v15 = 0;
    sub_1808B8164((uint64_t)v11, v8, a2);
    icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)&v12);
    if (*(int *)a2 >= 1)
    {
      icu::UnicodeSet::~UnicodeSet(v3);
      icu::UMemory::operator delete(v10);
      return 0LL;
    }
  }

  return v3;
}

uint64_t icu::RuleBasedCollator::hashCode(icu::RuleBasedCollator *this)
{
  uint64_t v2 = icu::CollationSettings::hashCode(*((icu::CollationSettings **)this + 2));
  uint64_t v3 = v2;
  if (!*(void *)(*((void *)this + 1) + 32LL)) {
    return v2;
  }
  UErrorCode v11 = U_ZERO_ERROR;
  TailoredSet = icu::RuleBasedCollator::getTailoredSet(this, &v11);
  uint64_t v5 = TailoredSet;
  uint64_t v6 = 0LL;
  unint64_t v7 = v11;
  if (v11 > U_ZERO_ERROR)
  {
    if (!TailoredSet) {
      return v6;
    }
    goto LABEL_11;
  }

  memset(v10, 0, sizeof(v10));
  icu::UnicodeSetIterator::UnicodeSetIterator((icu::UnicodeSetIterator *)v10, TailoredSet);
  while (icu::UnicodeSetIterator::next((icu::UnicodeSetIterator *)v10)
       && (DWORD2(v10[0]) & 0x80000000) == 0)
    uint64_t v3 = sub_1808A22C4(*((uint64_t **)this + 1), DWORD2(v10[0])) ^ v3;
  icu::UnicodeSetIterator::~UnicodeSetIterator((icu::UnicodeSetIterator *)v10);
  uint64_t v6 = v3;
  if (v5)
  {
LABEL_11:
    BOOL v8 = icu::UnicodeSet::~UnicodeSet((void *)v7, v5);
    icu::UMemory::operator delete(v8);
  }

  return v6;
}

icu::Locale *icu::RuleBasedCollator::setLocales( icu::RuleBasedCollator *this, const icu::Locale *a2, const icu::Locale *a3, const icu::Locale *a4)
{
  *((_BYTE *)this + 268) = !icu::Locale::operator==((uint64_t)a4, *((void *)this + 3) + 104LL);
  return icu::Locale::operator=((icu::RuleBasedCollator *)((char *)this + 40), (uint64_t)a3);
}

icu::Locale *icu::RuleBasedCollator::getLocale@<X0>( uint64_t a1@<X0>, int a2@<W1>, int *a3@<X2>, icu::Locale *a4@<X8>)
{
  if (*a3 >= 1) {
    goto LABEL_2;
  }
  if ((a2 - 1) < 2)
  {
LABEL_6:
    uint64_t Root = a1 + 40;
    return icu::Locale::Locale(a4, Root);
  }

  if (!a2)
  {
    if (!*(_BYTE *)(a1 + 268))
    {
      uint64_t Root = *(void *)(a1 + 24) + 104LL;
      return icu::Locale::Locale(a4, Root);
    }

    goto LABEL_6;
  }

  *a3 = 1;
LABEL_2:
  uint64_t Root = icu::Locale::getRoot((icu::Locale *)a1);
  return icu::Locale::Locale(a4, Root);
}

const char *icu::RuleBasedCollator::internalGetLocaleID(uint64_t a1, int a2, int *a3)
{
  if (*a3 > 0) {
    return 0LL;
  }
  if (a2)
  {
    BOOL result = 0LL;
    *a3 = 1;
    return result;
  }

  if (*(_BYTE *)(a1 + 268)) {
LABEL_5:
  }
    uint64_t v3 = a1 + 40;
  else {
    uint64_t v3 = *(void *)(a1 + 24) + 104LL;
  }
  if (*(_BYTE *)(v3 + 216)) {
    return 0LL;
  }
  uint64_t v5 = *(_BYTE **)(v3 + 40);
  if (*v5) {
    return v5;
  }
  else {
    return "root";
  }
}

uint64_t icu::RuleBasedCollator::getRules(icu::RuleBasedCollator *this)
{
  return *((void *)this + 3) + 40LL;
}

icu::UnicodeString *icu::RuleBasedCollator::getRules(uint64_t a1, int a2, uint64_t a3)
{
  if (!a2) {
    return icu::UnicodeString::operator=((UChar **)a3, (UChar **)(*(void *)(a1 + 24) + 40LL));
  }
  if ((*(_WORD *)(a3 + 8) & 1) != 0) {
    __int16 v5 = 2;
  }
  else {
    __int16 v5 = *(_WORD *)(a3 + 8) & 0x1F;
  }
  *(_WORD *)(a3 + 8) = v5;
  sub_1809B4284(a3);
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = (const icu::UnicodeString *)(v6 + 40);
  unsigned int v8 = *(unsigned __int16 *)(v6 + 48);
  int v9 = (__int16)v8;
  unsigned int v10 = v8 >> 5;
  unsigned int v11 = *(_DWORD *)(v6 + 52);
  if (v9 >= 0) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = v11;
  }
  __int16 v13 = (icu::UnicodeString *)icu::UnicodeString::doAppend(a3, v7, 0, v12);
  return (icu::UnicodeString *)icu::UnicodeString::getTerminatedBuffer(v13);
}

uint64_t icu::RuleBasedCollator::getVersion(uint64_t this, unsigned __int8 *a2)
{
  int v2 = *(_DWORD *)(*(void *)(this + 24) + 328LL);
  *(_DWORD *)a2 = v2;
  if ((v2 & 0xFF00) == 0x7800 && BYTE2(v2) <= 0x3Fu) {
    a2[2] = BYTE2(v2) | 0x40;
  }
  *a2 = v2 - 112;
  return this;
}

void *icu::RuleBasedCollator::internalGetContractionsAndExpansions( void *this, icu::UnicodeSet *a2, icu::UnicodeSet *a3, char a4, UErrorCode *a5)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (*(int *)a5 <= 0)
  {
    uint64_t v9 = (uint64_t)this;
    if (a2) {
      icu::UnicodeSet::clear(a2);
    }
    if (a3) {
      icu::UnicodeSet::clear(a3);
    }
    v13[0] = 0LL;
    v13[1] = a2;
    v13[2] = a3;
    v13[3] = 0LL;
    char v14 = a4;
    char v15 = 0;
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v16);
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v17);
    uint64_t v18 = off_18971B688;
    __int16 v19 = 2;
    uint64_t v20 = 0LL;
    int v21 = 0;
    sub_1808B9054((uint64_t)v13, *(uint64_t **)(v9 + 8), (int *)a5);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v18);
    icu::UnicodeSet::~UnicodeSet(v11, (icu::UnicodeSet *)v17);
    return icu::UnicodeSet::~UnicodeSet(v12, (icu::UnicodeSet *)v16);
  }

  return this;
}

void icu::RuleBasedCollator::internalAddContractions( uint64_t **this, uint64_t a2, icu::UnicodeSet *a3, UErrorCode *a4)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (*(int *)a4 <= 0)
  {
    v8[0] = 0LL;
    v8[1] = a3;
    _OWORD v8[2] = 0LL;
    v8[3] = 0LL;
    __int16 v9 = 0;
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v10);
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v11);
    uint64_t v12 = off_18971B688;
    __int16 v13 = 2;
    uint64_t v14 = 0LL;
    int v15 = 0;
    sub_1808B9234((uint64_t)v8, this[1], a2, a4);
    icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)&v12);
    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v11);
    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v10);
  }

uint64_t icu::RuleBasedCollator::getDefaultSettings(icu::RuleBasedCollator *this)
{
  return *(void *)(*((void *)this + 3) + 32LL);
}

uint64_t icu::RuleBasedCollator::getAttribute(uint64_t a1, int a2, int *a3)
{
  if (*a3 > 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = 16LL;
  int v4 = 2048;
  switch(a2)
  {
    case 0:
      goto LABEL_18;
    case 1:
      if ((*(_BYTE *)(*(void *)(a1 + 16) + 24LL) & 0xC) != 0) {
        return 20LL;
      }
      else {
        return 21LL;
      }
    case 2:
      int v5 = *(_DWORD *)(*(void *)(a1 + 16) + 24LL);
      if ((v5 & 0x300) == 0x200) {
        unsigned int v6 = 24;
      }
      else {
        unsigned int v6 = 25;
      }
      if ((v5 & 0x300) != 0) {
        return v6;
      }
      else {
        return 16LL;
      }
    case 3:
      int v4 = 1024;
      goto LABEL_18;
    case 4:
      int v4 = 1;
      goto LABEL_18;
    case 5:
      return (*(int *)(*(void *)(a1 + 16) + 24LL) >> 12);
    case 6:
      return v3;
    case 7:
      int v4 = 2;
LABEL_18:
      if ((*(_DWORD *)(*(void *)(a1 + 16) + 24LL) & v4) != 0) {
        uint64_t v3 = 17LL;
      }
      else {
        uint64_t v3 = 16LL;
      }
      break;
    default:
      *a3 = 1;
      return 0xFFFFFFFFLL;
  }

  return v3;
}

icu::SharedObject **icu::RuleBasedCollator::setAttribute(uint64_t a1, int a2, unsigned int a3, int *a4)
{
  BOOL result = (icu::SharedObject **)icu::RuleBasedCollator::getAttribute(a1, a2, a4);
  if (*a4 <= 0)
  {
    if ((_DWORD)result == a3)
    {
      int v9 = 1 << a2;
LABEL_4:
      int v10 = *(_DWORD *)(a1 + 264) | v9;
LABEL_9:
      *(_DWORD *)(a1 + 264) = v10;
      return result;
    }

    BOOL result = (icu::SharedObject **)(a1 + 16);
    uint64_t v11 = *(void *)(*(void *)(a1 + 24) + 32LL);
    if (a3 == -1 && *(void *)(a1 + 16) == v11)
    {
      int v9 = 1 << a2;
LABEL_8:
      int v10 = *(_DWORD *)(a1 + 264) & ~v9;
      goto LABEL_9;
    }

    BOOL result = (icu::SharedObject **)sub_1808A41AC(result);
    if (result)
    {
      uint64_t v12 = result;
      switch(a2)
      {
        case 0:
          int v13 = *(_DWORD *)(v11 + 24);
          int v14 = 2048;
          goto LABEL_25;
        case 1:
          BOOL result = (icu::SharedObject **)icu::CollationSettings::setAlternateHandling( (uint64_t)result,  a3,  *(_DWORD *)(v11 + 24),  a4);
          goto LABEL_26;
        case 2:
          BOOL result = (icu::SharedObject **)icu::CollationSettings::setCaseFirst( (uint64_t)result,  a3,  *(_DWORD *)(v11 + 24),  a4);
          goto LABEL_26;
        case 3:
          int v13 = *(_DWORD *)(v11 + 24);
          int v14 = 1024;
          goto LABEL_25;
        case 4:
          int v13 = *(_DWORD *)(v11 + 24);
          int v14 = 1;
          goto LABEL_25;
        case 5:
          BOOL result = (icu::SharedObject **)icu::CollationSettings::setStrength( (uint64_t)result,  a3,  *(_DWORD *)(v11 + 24),  (UErrorCode *)a4);
          goto LABEL_26;
        case 6:
          if (a3 + 1 > 0x12 || ((1 << (a3 + 1)) & 0x60001) == 0) {
            goto LABEL_23;
          }
          goto LABEL_26;
        case 7:
          int v13 = *(_DWORD *)(v11 + 24);
          int v14 = 2;
LABEL_25:
          BOOL result = (icu::SharedObject **)icu::CollationSettings::setFlag((uint64_t)result, v14, a3, v13, a4);
LABEL_26:
          if (*a4 > 0) {
            return result;
          }
          BOOL result = (icu::SharedObject **)icu::CollationFastLatin::getOptions( *(icu::CollationFastLatin **)(a1 + 8),  (const icu::CollationData *)v12,  (const icu::CollationSettings *)((char *)v12 + 84),  (unsigned __int16 *)0x180);
          *((_DWORD *)v12 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = (_DWORD)result;
          int v9 = 1 << a2;
          if (a3 == -1) {
            goto LABEL_8;
          }
          goto LABEL_4;
        default:
LABEL_23:
          int v15 = 1;
          goto LABEL_15;
      }
    }

    int v15 = 7;
LABEL_15:
    *a4 = v15;
  }

  return result;
}

uint64_t icu::RuleBasedCollator::setFastLatinOptions( icu::CollationFastLatin **this, icu::CollationSettings *a2)
{
  uint64_t result = icu::CollationFastLatin::getOptions( this[1],  a2,  (icu::CollationSettings *)((char *)a2 + 84),  (unsigned __int16 *)0x180);
  *((_DWORD *)a2 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = result;
  return result;
}

uint64_t icu::RuleBasedCollator::setMaxVariable(uint64_t a1, unsigned int a2, UErrorCode *a3)
{
  if (a2 == -1)
  {
    uint64_t v10 = *(void *)(a1 + 16);
    int v9 = (icu::SharedObject **)(a1 + 16);
    uint64_t v11 = *(void *)(*(void *)(a1 + 24) + 32LL);
    if (v10 == v11)
    {
      int v8 = *(_DWORD *)(a1 + 264);
      goto LABEL_16;
    }

    uint64_t v12 = sub_1808A41AC(v9);
    if (v12)
    {
      int v13 = v12;
      unsigned int v14 = (*(_DWORD *)(v11 + 24) >> 4) & 7 | 0x1000;
      unsigned int v6 = -1;
      goto LABEL_12;
    }

    goto LABEL_18;
  }

  if ((a2 & 0xFFFFFFFC) != 0x1000)
  {
    int v15 = 1;
LABEL_19:
    *a3 = v15;
    return a1;
  }

  unsigned int v6 = a2 - 4096;
  unint64_t v7 = (icu::SharedObject **)(a1 + 16);
  if (a2 - 4096 == ((*(_DWORD *)(*(void *)(a1 + 16) + 24LL) >> 4) & 7))
  {
    int v8 = *(_DWORD *)(a1 + 264);
LABEL_14:
    unsigned int v18 = v8 | 0x100;
LABEL_17:
    *(_DWORD *)(a1 + 264) = v18;
    return a1;
  }

  uint64_t v11 = *(void *)(*(void *)(a1 + 24) + 32LL);
  uint64_t v16 = sub_1808A41AC(v7);
  if (!v16)
  {
LABEL_18:
    int v15 = 7;
    goto LABEL_19;
  }

  int v13 = v16;
  unsigned int v14 = a2;
LABEL_12:
  int LastPrimaryForGroup = icu::CollationData::getLastPrimaryForGroup(*(icu::CollationData **)(a1 + 8), v14);
  icu::CollationSettings::setMaxVariable((uint64_t)v13, v6, *(_DWORD *)(v11 + 24), a3);
  if (*(int *)a3 <= 0)
  {
    *((_DWORD *)v13 + 7) = LastPrimaryForGroup;
    *((_DWORD *)v13 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = icu::CollationFastLatin::getOptions( *(icu::CollationFastLatin **)(a1 + 8),  v13,  (const icu::CollationSettings *)((char *)v13 + 84),  (unsigned __int16 *)0x180);
    int v8 = *(_DWORD *)(a1 + 264);
    if (a2 != -1) {
      goto LABEL_14;
    }
LABEL_16:
    unsigned int v18 = v8 & 0xFFFFFEFF;
    goto LABEL_17;
  }

  return a1;
}

uint64_t icu::RuleBasedCollator::getMaxVariable(icu::RuleBasedCollator *this)
{
  return (*(_DWORD *)(*((void *)this + 2) + 24LL) >> 4) & 7 | 0x1000u;
}

uint64_t icu::RuleBasedCollator::getVariableTop(icu::RuleBasedCollator *this, UErrorCode *a2)
{
  return *(unsigned int *)(*((void *)this + 2) + 28LL);
}

uint64_t icu::RuleBasedCollator::setVariableTop(uint64_t a1, UChar *s, int32_t a3, UErrorCode *a4)
{
  uint64_t v50 = *MEMORY[0x1895F89C0];
  if (!s && a3) {
    goto LABEL_10;
  }
  if (a3 < 0)
  {
    a3 = u_strlen(s);
    if (a3) {
      goto LABEL_7;
    }
LABEL_10:
    uint64_t result = 0LL;
    UErrorCode v12 = U_ILLEGAL_ARGUMENT_ERROR;
    goto LABEL_11;
  }

  if (!a3) {
    goto LABEL_10;
  }
LABEL_7:
  int v8 = *(_DWORD *)(*(void *)(a1 + 16) + 24LL);
  if ((v8 & 1) != 0)
  {
    __int128 v47 = 0u;
    __int128 v48 = 0u;
    __int128 v45 = 0u;
    __int128 v46 = 0u;
    __int128 v43 = 0u;
    __int128 v44 = 0u;
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    uint64_t v49 = 0LL;
    __int128 v32 = 0u;
    __int128 v31 = 0u;
    __int128 v30 = 0u;
    __int128 v29 = 0u;
    __int128 v28 = 0u;
    __int128 v27 = 0u;
    __int128 v26 = 0u;
    __int128 v25 = 0u;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    __int128 v18 = 0u;
    int v13 = *(void **)(a1 + 8);
    uint64_t v14 = *v13;
    unsigned int v17 = v13;
    *((void *)&v18 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = (char *)&v19 + 8;
    LODWORD(v19) = 40;
    DWORD2(v39) = 0;
    DWORD2(v4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = -1;
    BYTE12(v4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = (v8 & 2) != 0;
    *(void *)&__int128 v41 = s;
    *((void *)&v41 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = s;
    int v15 = off_18972D040;
    uint64_t v16 = v14;
    *(void *)&__int128 v42 = &s[a3];
    *((void *)&v42 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = s;
    *(void *)&__int128 v43 = s;
    *(void *)&__int128 v44 = v42;
    *((void *)&v44 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v13[6];
    *(void *)&__int128 v45 = off_18971B688;
    WORD4(v45) = 2;
    LOBYTE(v49) = 1;
    unint64_t v10 = sub_1808A16BC((icu::CollationIterator::CEBuffer *)&v15, a4);
    unint64_t v11 = sub_1808A16BC((icu::CollationIterator::CEBuffer *)&v15, a4);
    icu::FCDUTF16CollationIterator::~FCDUTF16CollationIterator((icu::FCDUTF16CollationIterator *)&v15);
  }

  else
  {
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    __int128 v32 = 0u;
    __int128 v31 = 0u;
    __int128 v30 = 0u;
    __int128 v29 = 0u;
    __int128 v28 = 0u;
    __int128 v27 = 0u;
    __int128 v26 = 0u;
    __int128 v25 = 0u;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    __int128 v18 = 0u;
    uint64_t v9 = **(void **)(a1 + 8);
    unsigned int v17 = *(void **)(a1 + 8);
    *((void *)&v18 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = (char *)&v19 + 8;
    LODWORD(v19) = 40;
    DWORD2(v39) = 0;
    DWORD2(v4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = -1;
    BYTE12(v4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = (v8 & 2) != 0;
    int v15 = off_18972CFB0;
    uint64_t v16 = v9;
    *(void *)&__int128 v41 = s;
    *((void *)&v41 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = s;
    *(void *)&__int128 v42 = &s[a3];
    unint64_t v10 = sub_1808A16BC((icu::CollationIterator::CEBuffer *)&v15, a4);
    unint64_t v11 = sub_1808A16BC((icu::CollationIterator::CEBuffer *)&v15, a4);
    icu::UTF16CollationIterator::~UTF16CollationIterator((icu::UTF16CollationIterator *)&v15);
  }

  if (v10 != 0x101000100LL && v11 == 0x101000100LL)
  {
    icu::RuleBasedCollator::setVariableTop(a1, HIDWORD(v10), a4);
    return *(unsigned int *)(*(void *)(a1 + 16) + 28LL);
  }

  uint64_t result = 0LL;
  UErrorCode v12 = U_CE_NOT_FOUND_ERROR;
LABEL_11:
  *a4 = v12;
  return result;
}

uint64_t icu::RuleBasedCollator::setVariableTop(uint64_t this, unsigned int a2, UErrorCode *a3)
{
  unsigned int v3 = a2;
  uint64_t v4 = this;
  int v5 = (icu::SharedObject **)(this + 16);
  if (*(_DWORD *)(*(void *)(this + 16) + 28LL) == a2) {
    goto LABEL_7;
  }
  this = icu::CollationData::getGroupForPrimary(*(icu::CollationData **)(this + 8), a2);
  if ((this - 4100) <= 0xFFFFFFFB)
  {
    UErrorCode v7 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_5:
    *a3 = v7;
    return this;
  }

  int v8 = this;
  this = icu::CollationData::getLastPrimaryForGroup(*(icu::CollationData **)(v4 + 8), this);
  unsigned int v3 = this;
  if ((_DWORD)this == *(_DWORD *)(*(void *)(v4 + 16) + 28LL)) {
    goto LABEL_7;
  }
  this = (uint64_t)sub_1808A41AC(v5);
  if (!this)
  {
    UErrorCode v7 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_5;
  }

  unint64_t v11 = (_DWORD *)this;
  this = icu::CollationSettings::setMaxVariable( this,  v8 - 4096,  *(_DWORD *)(*(void *)(*(void *)(v4 + 24) + 32LL) + 24LL),  a3);
  if (*(int *)a3 <= 0)
  {
    v11[7] = v3;
    this = icu::CollationFastLatin::getOptions( *(icu::CollationFastLatin **)(v4 + 8),  (const icu::CollationData *)v11,  (const icu::CollationSettings *)(v11 + 21),  (unsigned __int16 *)0x180);
    v11[20] = this;
LABEL_7:
    int v9 = *(_DWORD *)(v4 + 264);
    if (v3 == *(_DWORD *)(*(void *)(*(void *)(v4 + 24) + 32LL) + 28LL)) {
      unsigned int v10 = v9 & 0xFFFFFEFF;
    }
    else {
      unsigned int v10 = v9 | 0x100;
    }
    *(_DWORD *)(v4 + 264) = v10;
  }

  return this;
}

uint64_t icu::RuleBasedCollator::setVariableTop( icu::RuleBasedCollator *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  unsigned int v4 = *((unsigned __int16 *)a2 + 4);
  if ((v4 & 0x11) != 0)
  {
    int v5 = 0LL;
  }

  else if ((v4 & 2) != 0)
  {
    int v5 = (UChar *)((char *)a2 + 10);
  }

  else
  {
    int v5 = (UChar *)*((void *)a2 + 3);
  }

  int v6 = (__int16)v4;
  int32_t v7 = v4 >> 5;
  if (v6 >= 0) {
    int32_t v8 = v7;
  }
  else {
    int32_t v8 = *((_DWORD *)a2 + 3);
  }
  return icu::RuleBasedCollator::setVariableTop((uint64_t)this, v5, v8, a3);
}

uint64_t icu::RuleBasedCollator::getReorderCodes( icu::RuleBasedCollator *this, void *__dst, int a3, UErrorCode *a4)
{
  if (a3 < 0 || !__dst && a3)
  {
    uint64_t v4 = 0LL;
    UErrorCode v5 = U_ILLEGAL_ARGUMENT_ERROR;
  }

  else
  {
    uint64_t v7 = *((void *)this + 2);
    uint64_t v4 = *(unsigned int *)(v7 + 72);
    if (!(_DWORD)v4) {
      return v4;
    }
    if ((int)v4 <= a3)
    {
      memcpy(__dst, *(const void **)(v7 + 64), 4LL * (int)v4);
      return v4;
    }

    UErrorCode v5 = U_BUFFER_OVERFLOW_ERROR;
  }

  *a4 = v5;
  return v4;
}

uint64_t icu::RuleBasedCollator::setReorderCodes(uint64_t this, const int *__s1, int a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    int v5 = a3;
    if (a3 < 0 || (uint64_t v7 = this, !__s1) && a3)
    {
      UErrorCode v8 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_6:
      *a4 = v8;
      return this;
    }

    if (a3 == 1) {
      int v5 = *__s1 != 103;
    }
    uint64_t v9 = *(void *)(this + 16);
    if (v5 != *(_DWORD *)(v9 + 72) || (this = memcmp(__s1, *(const void **)(v9 + 64), 4 * v5), (_DWORD)this))
    {
      if (v5 != 1 || *__s1 != -1)
      {
        this = (uint64_t)sub_1808A41AC((icu::SharedObject **)(v7 + 16));
        if (this)
        {
          unsigned int v10 = (_DWORD *)this;
          icu::CollationSettings::setReordering( (icu::CollationSettings *)this,  *(const icu::CollationData **)(v7 + 8),  __s1,  v5,  a4);
          this = icu::CollationFastLatin::getOptions( *(icu::CollationFastLatin **)(v7 + 8),  (const icu::CollationData *)v10,  (const icu::CollationSettings *)(v10 + 21),  (unsigned __int16 *)0x180);
          v10[20] = this;
          return this;
        }

unint64_t icu::RuleBasedCollator::compare( icu::RuleBasedCollator *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3, UErrorCode *a4)
{
  unsigned int v7 = *((unsigned __int16 *)a2 + 4);
  if ((v7 & 0x11) != 0)
  {
    UErrorCode v8 = 0LL;
  }

  else if ((v7 & 2) != 0)
  {
    UErrorCode v8 = (unsigned __int16 *)((char *)a2 + 10);
  }

  else
  {
    UErrorCode v8 = (unsigned __int16 *)*((void *)a2 + 3);
  }

  int v9 = (__int16)v7;
  int v10 = v7 >> 5;
  int v11 = *((_DWORD *)a2 + 3);
  if (v9 >= 0) {
    int v11 = v10;
  }
  unsigned int v12 = *((unsigned __int16 *)a3 + 4);
  if ((v12 & 0x11) != 0)
  {
    int v13 = 0LL;
  }

  else if ((v12 & 2) != 0)
  {
    int v13 = (unsigned __int16 *)((char *)a3 + 10);
  }

  else
  {
    int v13 = (unsigned __int16 *)*((void *)a3 + 3);
  }

  int v14 = (__int16)v12;
  unsigned int v15 = v12 >> 5;
  if (v14 >= 0) {
    unint64_t v16 = v15;
  }
  else {
    unint64_t v16 = *((unsigned int *)a3 + 3);
  }
  return icu::RuleBasedCollator::doCompare((uint64_t)this, v8, v11, v13, (UErrorCode *)v16, a4);
}

unint64_t icu::RuleBasedCollator::doCompare( uint64_t a1, unsigned __int16 *a2, int a3, unsigned __int16 *a4, UErrorCode *a5, UErrorCode *a6)
{
  int v6 = (int)a5;
  uint64_t v101 = *MEMORY[0x1895F89C0];
  if (a2 == a4 && a3 == (_DWORD)a5) {
    return 0LL;
  }
  if (a3 < 0)
  {
    int v15 = *a2;
    if (v15 == *a4)
    {
      uint64_t v16 = 0LL;
      while (v15)
      {
        LODWORD(v14) = v16 + 1;
        int v15 = a2[v16 + 1];
        int v17 = a4[++v16];
        if (v15 != v17)
        {
          unsigned int v12 = 0LL;
          int v13 = 0LL;
          goto LABEL_20;
        }
      }

      return 0LL;
    }

    int v13 = 0LL;
    unsigned int v12 = 0LL;
    LODWORD(v14) = 0;
    __int128 v18 = (icu::CollationIterator **)(a1 + 16);
    int v19 = (*(unsigned __int8 *)(*(void *)(a1 + 16) + 24LL) >> 1) & 1;
  }

  else
  {
    unsigned int v12 = &a2[a3];
    int v13 = &a4[(int)a5];
    if (a3)
    {
      uint64_t v14 = 0LL;
      while (a5 != v14)
      {
        if (a2[v14] != a4[v14]) {
          goto LABEL_20;
        }
        if (a3 == ++v14) {
          goto LABEL_10;
        }
      }

      LODWORD(v14) = (_DWORD)a5;
    }

    else
    {
LABEL_10:
      LODWORD(v14) = a3;
      if (a3 == (_DWORD)a5) {
        return 0LL;
      }
    }

unint64_t icu::RuleBasedCollator::compare( icu::RuleBasedCollator *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3, int a4, UErrorCode *a5)
{
  if (a4 < 0)
  {
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return 0LL;
  }

  unsigned int v6 = *((unsigned __int16 *)a2 + 4);
  if ((v6 & 0x8000u) == 0) {
    int v7 = v6 >> 5;
  }
  else {
    int v7 = *((_DWORD *)a2 + 3);
  }
  unsigned int v8 = *((unsigned __int16 *)a3 + 4);
  if ((v8 & 0x8000u) == 0) {
    int v9 = v8 >> 5;
  }
  else {
    int v9 = *((_DWORD *)a3 + 3);
  }
  if (v7 >= a4) {
    int v7 = a4;
  }
  if (v9 >= a4) {
    unint64_t v10 = a4;
  }
  else {
    unint64_t v10 = v9;
  }
  if ((v6 & 0x11) != 0)
  {
    unint64_t v11 = 0LL;
  }

  else if ((v6 & 2) != 0)
  {
    unint64_t v11 = (unsigned __int16 *)((char *)a2 + 10);
  }

  else
  {
    unint64_t v11 = (unsigned __int16 *)*((void *)a2 + 3);
  }

  if ((v8 & 0x11) != 0)
  {
    int v13 = 0LL;
  }

  else if ((v8 & 2) != 0)
  {
    int v13 = (unsigned __int16 *)((char *)a3 + 10);
  }

  else
  {
    int v13 = (unsigned __int16 *)*((void *)a3 + 3);
  }

  return icu::RuleBasedCollator::doCompare((uint64_t)this, v11, v7, v13, (UErrorCode *)v10, a5);
}

unint64_t icu::RuleBasedCollator::compare( uint64_t a1, UChar *s, int32_t a3, UChar *a4, UErrorCode *a5, UErrorCode *a6)
{
  int v7 = a5;
  int32_t v9 = a3;
  if (!s && a3 || !a4 && (_DWORD)a5)
  {
    *a6 = U_ILLEGAL_ARGUMENT_ERROR;
    return 0LL;
  }

  if (a3 < 0)
  {
  }

  else if ((a5 & 0x80000000) != 0)
  {
    int v7 = (UErrorCode *)u_strlen(a4);
  }

  return icu::RuleBasedCollator::doCompare(a1, s, v9, a4, v7, a6);
}

unint64_t icu::RuleBasedCollator::compareUTF8( icu::RuleBasedCollator *this, const icu::StringPiece *a2, const unsigned __int8 **a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    unsigned int v6 = *(const unsigned __int8 **)a2;
    int32_t v7 = *((_DWORD *)a2 + 2);
    if (v6) {
      BOOL v8 = 1;
    }
    else {
      BOOL v8 = v7 == 0;
    }
    if (v8)
    {
      int32_t v9 = (UErrorCode *)*((unsigned int *)a3 + 2);
      if (*a3 || (_DWORD)v9 == 0) {
        return icu::RuleBasedCollator::doCompare(this, v6, v7, *a3, v9, a4);
      }
    }

    *a4 = U_ILLEGAL_ARGUMENT_ERROR;
  }

  return 0LL;
}

unint64_t icu::RuleBasedCollator::doCompare( icu::RuleBasedCollator *this, const unsigned __int8 *a2, int32_t a3, const unsigned __int8 *a4, UErrorCode *a5, UErrorCode *a6)
{
  int v7 = (int)a5;
  uint64_t v138 = *MEMORY[0x1895F89C0];
  if (a2 == a4 && a3 == (_DWORD)a5) {
    return 0LL;
  }
  if (a3 < 0)
  {
    int v14 = *a2;
    if (v14 == *a4)
    {
      uint64_t v15 = 0LL;
      while (v14)
      {
        LODWORD(v13) = v15 + 1;
        int v14 = a2[v15 + 1];
        int v16 = a4[++v15];
        if (v14 != v16) {
          goto LABEL_19;
        }
      }

      return 0LL;
    }

    LODWORD(v13) = 0;
LABEL_19:
    puint64_t i = v13;
  }

  else if (a3)
  {
    uint64_t v13 = 0LL;
    while ((int)a5 != v13)
    {
      if (a2[v13] != a4[v13]) {
        goto LABEL_19;
      }
      if (a3 == (_DWORD)++v13) {
        goto LABEL_10;
      }
    }

    puint64_t i = (int)a5;
    LODWORD(v13) = (_DWORD)a5;
  }

  else
  {
LABEL_10:
    puint64_t i = a3;
    LODWORD(v13) = a3;
    if (a3 == (_DWORD)a5) {
      return 0LL;
    }
  }

  if ((int)v13 <= 0)
  {
    unsigned int v20 = (icu::RuleBasedCollator *)((char *)this + 16);
    int v21 = (*(unsigned __int8 *)(*((void *)this + 2) + 24LL) >> 1) & 1;
    goto LABEL_77;
  }

  if ((_DWORD)v13 == a3 || (char)a2[v13] >= -64)
  {
    int32_t v17 = (int)a5;
    if ((_DWORD)v13 == (_DWORD)a5) {
      goto LABEL_32;
    }
    if ((char)a4[v13] >= -64)
    {
      unsigned int v20 = (icu::RuleBasedCollator *)((char *)this + 16);
      int v21 = (*(unsigned __int8 *)(*((void *)this + 2) + 24LL) >> 1) & 1;
      goto LABEL_35;
    }
  }

  int32_t v17 = v13;
  uint64_t v18 = v13 - 1LL;
  while (v17 >= 2)
  {
    int v19 = (char)a2[v18];
    --v17;
    --v18;
    if (v19 >= -64) {
      goto LABEL_31;
    }
  }

  int32_t v17 = 0;
LABEL_31:
  puint64_t i = v17;
LABEL_32:
  unsigned int v20 = (icu::RuleBasedCollator *)((char *)this + 16);
  int v21 = (*(unsigned __int8 *)(*((void *)this + 2) + 24LL) >> 1) & 1;
  LODWORD(v13) = v17;
  if (v17 < 1) {
    goto LABEL_77;
  }
LABEL_35:
  if ((_DWORD)v13 == a3) {
    goto LABEL_40;
  }
  int v22 = (char)a2[v13];
  unsigned int v23 = a2[v13];
  if (v22 < 0)
  {
    uint64_t v24 = v13 + 1LL;
    if ((_DWORD)v24 == a3)
    {
LABEL_38:
      unsigned int v23 = 65533;
      goto LABEL_39;
    }

    if (v23 < 0xE0)
    {
      if (v23 < 0xC2) {
        goto LABEL_38;
      }
      int v33 = v23 & 0x1F;
    }

    else
    {
      if (v23 > 0xEF)
      {
        if (v23 > 0xF4) {
          goto LABEL_38;
        }
        unint64_t v39 = a2[v24];
        uint64_t v24 = v13 + 2LL;
        if ((_DWORD)v13 + 2 == a3) {
          goto LABEL_38;
        }
        unsigned int v32 = a2[v24] ^ 0x80;
        if (v32 > 0x3F) {
          goto LABEL_38;
        }
        LODWORD(v3icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v39 & 0x3F | ((v23 - 240) << 6);
      }

      else
      {
        uint64_t v31 = v22 & 0xF;
        unsigned int v32 = a2[v24] & 0x3F;
      }

      LODWORD(v24) = v24 + 1;
      if ((_DWORD)v24 == a3) {
        goto LABEL_38;
      }
      int v33 = v32 | ((_DWORD)v31 << 6);
    }

    unsigned int v34 = a2[v24] ^ 0x80;
    BOOL v35 = v34 > 0x3F;
    int v36 = v34 | (v33 << 6);
    if (v35) {
      unsigned int v23 = 65533;
    }
    else {
      unsigned int v23 = v36;
    }
  }

unint64_t icu::RuleBasedCollator::internalCompareUTF8( icu::RuleBasedCollator *this, const char *a2, int32_t a3, const char *a4, UErrorCode *a5, UErrorCode *a6)
{
  int v7 = a5;
  int32_t v9 = a3;
  if (!a2 && a3 || !a4 && (_DWORD)a5)
  {
    *a6 = U_ILLEGAL_ARGUMENT_ERROR;
    return 0LL;
  }

  if (a3 < 0)
  {
  }

  else if ((a5 & 0x80000000) != 0)
  {
    int v7 = (UErrorCode *)strlen(a4);
  }

  return icu::RuleBasedCollator::doCompare(this, (const unsigned __int8 *)a2, v9, (const unsigned __int8 *)a4, v7, a6);
}

uint64_t sub_18097F3A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v6 = sub_180981410(a2);
      uint64_t v7 = sub_180981410(a3);
      if ((_DWORD)v6 != (_DWORD)v7) {
        break;
      }
      if ((v6 & 0x80000000) != 0) {
        return 0LL;
      }
    }

    uint64_t v8 = v7;
    if ((v6 & 0x80000000) != 0)
    {
      int v9 = -2;
      if ((v7 & 0x80000000) != 0) {
        goto LABEL_12;
      }
    }

    else if ((_DWORD)v6 == 65534)
    {
      int v9 = -1;
      if ((v7 & 0x80000000) != 0) {
        goto LABEL_12;
      }
    }

    else
    {
      int v9 = sub_18098147C(a2, a1, v6);
      if ((v8 & 0x80000000) != 0)
      {
LABEL_12:
        int v10 = -2;
        goto LABEL_14;
      }
    }

    int v10 = (_DWORD)v8 == 65534 ? -1 : sub_18098147C(a3, a1, v8);
LABEL_14:
    if (v9 < v10) {
      return 0xFFFFFFFFLL;
    }
    if (v9 > v10) {
      return 1LL;
    }
  }

uint64_t sub_18097F484(uint64_t a1, icu::Normalizer2Impl *this, UChar *src, UChar *a4)
{
  *(_DWORD *)(a1 + 24) = -1;
  *(void *)(a1 + 36) = 0LL;
  *(void *)(a1 + 28) = 0LL;
  *(_DWORD *)(a1 + 44) = 0;
  *(void *)a1 = off_18972ABC0;
  *(void *)(a1 + 48) = off_18971B688;
  uint64_t v8 = (icu::UnicodeString *)(a1 + 48);
  *(_WORD *)(a1 + 56) = 2;
  UErrorCode v23 = U_ZERO_ERROR;
  FCD = icu::Normalizer2Impl::makeFCD(this, src, a4, 0LL, &v23);
  if (v23 <= U_ZERO_ERROR)
  {
    int v10 = FCD;
    if (FCD == a4 || !a4 && !*FCD)
    {
      *(void *)(a1 + 32) = src;
LABEL_26:
      *(void *)(a1 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v10;
      return a1;
    }

    icu::UnicodeString::unBogus((uint64_t)v8);
    else {
      uint64_t v11 = *(unsigned __int16 *)(a1 + 56) >> 5;
    }
    icu::UnicodeString::doReplace( (uint64_t)v8,  0LL,  v11,  (uint64_t)src,  0,  (unint64_t)((char *)v10 - (char *)src) >> 1);
    __int128 v22 = 0u;
    uint64_t v18 = (UChar *)this;
    int v19 = v8;
    __int128 v21 = 0u;
    __int128 v20 = 0u;
    *(void *)((char *)&v21 + 5) = 0LL;
    unsigned int v12 = *(unsigned __int16 *)(a1 + 56);
    if ((v12 & 0x8000) != 0) {
      int v13 = *(_DWORD *)(a1 + 60);
    }
    else {
      int v13 = v12 >> 5;
    }
    if ((void)v20) {
      icu::UnicodeString::releaseBuffer((uint64_t)v19, ((void)v21 - (void)v20) >> 1);
    }
    if (v23 <= U_ZERO_ERROR)
    {
      unsigned int v14 = *(unsigned __int16 *)(a1 + 56);
      if ((v14 & 0x11) != 0)
      {
        uint64_t v15 = 0LL;
      }

      else if ((v14 & 2) != 0)
      {
        uint64_t v15 = a1 + 58;
      }

      else
      {
        uint64_t v15 = *(void *)(a1 + 72);
      }

      *(void *)(a1 + 32) = v15;
      if ((v14 & 0x8000) != 0) {
        unsigned int v16 = *(_DWORD *)(a1 + 60);
      }
      else {
        unsigned int v16 = v14 >> 5;
      }
      int v10 = (UChar *)(v15 + 2LL * (int)v16);
      goto LABEL_26;
    }
  }

  return a1;
}

void sub_18097F654(uint64_t a1)
{
  *(void *)a1 = off_18972ABC0;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 48));
  icu::UObject::~UObject((icu::UObject *)a1);
}

void sub_18097F688(uint64_t a1)
{
  *(void *)a1 = off_18972AC50;
  icu::FCDUTF8CollationIterator::~FCDUTF8CollationIterator((icu::FCDUTF8CollationIterator *)(a1 + 32));
  icu::UObject::~UObject((icu::UObject *)a1);
}

unint64_t icu::RuleBasedCollator::compare( icu::RuleBasedCollator *this, UCharIterator *a2, UCharIterator *a3, UErrorCode *a4)
{
  unint64_t v4 = 0LL;
  uint64_t v97 = *MEMORY[0x1895F89C0];
  if (a2 != a3 && *(int *)a4 <= 0)
  {
    unsigned int v9 = *(unsigned __int8 *)(*((void *)this + 2) + 24LL);
    int v10 = ((uint64_t (*)(UCharIterator *))a2->next)(a2);
    int v11 = ((uint64_t (*)(UCharIterator *))a3->next)(a3);
    if (v10 == v11)
    {
      LODWORD(v13) = 0;
      do
      {
        if (v10 < 0) {
          return 0LL;
        }
        uint64_t v13 = (v13 + 1);
        int v10 = ((uint64_t (*)(UCharIterator *))a2->next)(a2);
        int v14 = ((uint64_t (*)(UCharIterator *))a3->next)(a3);
      }

      while (v10 == v14);
      int v15 = v14;
      if ((v10 & 0x80000000) == 0) {
        goto LABEL_10;
      }
    }

    else
    {
      int v15 = v11;
      uint64_t v13 = 0LL;
      if ((v10 & 0x80000000) == 0) {
LABEL_10:
      }
        ((void (*)(UCharIterator *))a2->previous)(a2);
    }

    if ((v15 & 0x80000000) == 0) {
      ((void (*)(UCharIterator *))a3->previous)(a3);
    }
    int v16 = (v9 >> 1) & 1;
    if ((_DWORD)v13)
    {
      if ((v15 & 0x80000000) == 0)
      {
        uint64_t v17 = *((void *)this + 1);
        for (int i = v15; sub_1808B2F00(v17, i, v16); int i = v19)
        {
LABEL_20:
          int v19 = ((uint64_t (*)(UCharIterator *))a2->previous)(a2);
          ((void (*)(UCharIterator *))a3->previous)(a3);
          if ((int)v13 < 2)
          {
            uint64_t v13 = 0LL;
            break;
          }

          uint64_t v13 = (v13 - 1);
          uint64_t v17 = *((void *)this + 1);
        }
      }
    }

    __int128 v20 = (icu::CollationIterator *)*((void *)this + 2);
    if ((*((_BYTE *)v20 + 24) & 1) != 0)
    {
      __int128 v93 = 0u;
      __int128 v94 = 0u;
      __int128 v91 = 0u;
      __int128 v92 = 0u;
      __int128 v89 = 0u;
      __int128 v90 = 0u;
      __int128 v87 = 0u;
      __int128 v88 = 0u;
      __int128 v85 = 0u;
      __int128 v86 = 0u;
      __int128 v83 = 0u;
      __int128 v84 = 0u;
      __int128 v81 = 0u;
      __int128 v82 = 0u;
      __int128 v80 = 0u;
      __int128 v79 = 0u;
      __int128 v78 = 0u;
      __int128 v77 = 0u;
      __int128 v76 = 0u;
      __int128 v75 = 0u;
      __int128 v74 = 0u;
      __int128 v73 = 0u;
      __int128 v72 = 0u;
      __int128 v71 = 0u;
      __int128 v70 = 0u;
      __int128 v69 = 0u;
      __int128 v68 = 0u;
      __int128 v67 = 0u;
      __int128 v66 = 0u;
      UErrorCode v23 = (uint64_t *)*((void *)this + 1);
      uint64_t v24 = *v23;
      *((void *)&v65 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v23;
      *((void *)&v66 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = (char *)&v67 + 8;
      LODWORD(v67) = 40;
      DWORD2(v87) = 0;
      DWORD2(v88) = -1;
      BYTE12(v88) = v16;
      *(void *)&__int128 v89 = a2;
      *(void *)&__int128 v65 = v24;
      UChar32 v64 = off_18972CB90;
      HIDWORD(v89) = v13;
      *((void *)&v90 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v23[6];
      *(void *)&__int128 v91 = off_18971B688;
      WORD4(v9icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 2;
      __int128 v60 = 0u;
      __int128 v61 = 0u;
      uint64_t v58 = 2LL;
      __int128 v59 = 0u;
      DWORD2(v55) = 0;
      *(void *)&__int128 v56 = 0LL;
      __int128 v53 = 0u;
      __int128 v54 = 0u;
      __int128 v51 = 0u;
      __int128 v52 = 0u;
      __int128 v49 = 0u;
      __int128 v50 = 0u;
      __int128 v47 = 0u;
      __int128 v48 = 0u;
      __int128 v46 = 0u;
      __int128 v45 = 0u;
      __int128 v44 = 0u;
      __int128 v43 = 0u;
      __int128 v42 = 0u;
      __int128 v41 = 0u;
      __int128 v40 = 0u;
      __int128 v39 = 0u;
      __int128 v37 = 0u;
      __int128 v38 = 0u;
      __int128 v35 = 0u;
      __int128 v36 = 0u;
      __int128 v33 = 0u;
      __int128 v34 = 0u;
      uint64_t v31 = 0LL;
      *(void *)&__int128 v30 = v24;
      *((void *)&v30 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v23;
      unsigned int v32 = (void (**)(icu::FCDUIterCollationIterator *__hidden))&v33 + 1;
      LODWORD(v33) = 40;
      DWORD2(v53) = 0;
      DWORD2(v54) = -1;
      BYTE12(v54) = v16;
      *(void *)&__int128 v55 = a3;
      unsigned int v29 = off_18972CB90;
      HIDWORD(v55) = v13;
      *((void *)&v56 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = *((void *)&v90 + 1);
      int32_t v57 = off_18971B688;
      unint64_t v4 = icu::CollationCompare::compareUpToQuaternary( (icu::CollationCompare *)&v64,  (icu::CollationIterator *)&v29,  v20,  a4,  v12);
      icu::FCDUIterCollationIterator::~FCDUIterCollationIterator((icu::FCDUIterCollationIterator *)&v29);
      icu::FCDUIterCollationIterator::~FCDUIterCollationIterator((icu::FCDUIterCollationIterator *)&v64);
      if ((_DWORD)v4) {
        return v4;
      }
    }

    else
    {
      __int128 v87 = 0u;
      __int128 v88 = 0u;
      __int128 v85 = 0u;
      __int128 v86 = 0u;
      __int128 v83 = 0u;
      __int128 v84 = 0u;
      __int128 v81 = 0u;
      __int128 v82 = 0u;
      __int128 v80 = 0u;
      __int128 v79 = 0u;
      __int128 v78 = 0u;
      __int128 v77 = 0u;
      __int128 v76 = 0u;
      __int128 v75 = 0u;
      __int128 v74 = 0u;
      __int128 v73 = 0u;
      __int128 v72 = 0u;
      __int128 v71 = 0u;
      __int128 v70 = 0u;
      __int128 v69 = 0u;
      __int128 v68 = 0u;
      __int128 v67 = 0u;
      __int128 v66 = 0u;
      __int128 v21 = (uint64_t *)*((void *)this + 1);
      uint64_t v22 = *v21;
      *((void *)&v65 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v21;
      *((void *)&v66 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = (char *)&v67 + 8;
      LODWORD(v67) = 40;
      DWORD2(v87) = 0;
      DWORD2(v88) = -1;
      BYTE12(v88) = v16;
      *(void *)&__int128 v65 = v22;
      UChar32 v64 = (void (**)(icu::UObject *__hidden))&unk_18972CC20;
      *(void *)&__int128 v89 = a2;
      __int128 v53 = 0u;
      __int128 v54 = 0u;
      __int128 v51 = 0u;
      __int128 v52 = 0u;
      __int128 v49 = 0u;
      __int128 v50 = 0u;
      __int128 v47 = 0u;
      __int128 v48 = 0u;
      __int128 v46 = 0u;
      __int128 v45 = 0u;
      __int128 v44 = 0u;
      __int128 v43 = 0u;
      __int128 v42 = 0u;
      __int128 v41 = 0u;
      __int128 v40 = 0u;
      __int128 v39 = 0u;
      __int128 v37 = 0u;
      __int128 v38 = 0u;
      __int128 v35 = 0u;
      __int128 v36 = 0u;
      __int128 v33 = 0u;
      __int128 v34 = 0u;
      uint64_t v31 = 0LL;
      *(void *)&__int128 v30 = v22;
      *((void *)&v30 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v21;
      unsigned int v32 = (void (**)(icu::FCDUIterCollationIterator *__hidden))&v33 + 1;
      LODWORD(v33) = 40;
      DWORD2(v53) = 0;
      DWORD2(v54) = -1;
      BYTE12(v54) = v16;
      unsigned int v29 = (void (**)(icu::UObject *__hidden))&unk_18972CC20;
      *(void *)&__int128 v55 = a3;
      unint64_t v4 = icu::CollationCompare::compareUpToQuaternary( (icu::CollationCompare *)&v64,  (icu::CollationIterator *)&v29,  v20,  a4,  v12);
      icu::UIterCollationIterator::~UIterCollationIterator((icu::UIterCollationIterator *)&v29);
      icu::UIterCollationIterator::~UIterCollationIterator((icu::UIterCollationIterator *)&v64);
      if ((_DWORD)v4) {
        return v4;
      }
    }

    if (*(int *)(*((void *)this + 2) + 24LL) >= 61440 && *(int *)a4 <= 0)
    {
      ((void (*)(UCharIterator *, uint64_t, uint64_t))a2->move)(a2, v13, 3LL);
      ((void (*)(UCharIterator *, uint64_t, uint64_t))a3->move)(a3, v13, 3LL);
      int v25 = (uint64_t *)*((void *)this + 1);
      uint64_t v26 = v25[6];
      if ((*(_BYTE *)(*((void *)this + 2) + 24LL) & 1) != 0)
      {
        __int128 v95 = 0u;
        __int128 v96 = 0u;
        __int128 v93 = 0u;
        __int128 v94 = 0u;
        __int128 v91 = 0u;
        __int128 v92 = 0u;
        __int128 v89 = 0u;
        __int128 v90 = 0u;
        __int128 v87 = 0u;
        __int128 v88 = 0u;
        __int128 v85 = 0u;
        __int128 v86 = 0u;
        __int128 v83 = 0u;
        __int128 v84 = 0u;
        __int128 v81 = 0u;
        __int128 v82 = 0u;
        __int128 v80 = 0u;
        __int128 v79 = 0u;
        __int128 v78 = 0u;
        __int128 v77 = 0u;
        __int128 v76 = 0u;
        __int128 v75 = 0u;
        __int128 v74 = 0u;
        __int128 v73 = 0u;
        __int128 v72 = 0u;
        __int128 v71 = 0u;
        __int128 v70 = 0u;
        __int128 v69 = 0u;
        __int128 v68 = 0u;
        __int128 v67 = 0u;
        __int128 v66 = 0u;
        __int128 v65 = 0u;
        LODWORD(v66) = -1;
        UChar32 v64 = (void (**)(icu::UObject *__hidden))off_18972ACE0;
        uint64_t v27 = *v25;
        *((void *)&v67 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v25;
        *((void *)&v68 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = (char *)&v69 + 8;
        LODWORD(v69) = 40;
        DWORD2(v89) = 0;
        DWORD2(v9icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = -1;
        *(void *)&__int128 v91 = a2;
        *(void *)&__int128 v67 = v27;
        *((void *)&v66 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = off_18972CB90;
        HIDWORD(v9icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v13;
        *((void *)&v92 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v26;
        *(void *)&__int128 v93 = off_18971B688;
        WORD4(v93) = 2;
        __int128 v62 = 0u;
        __int128 v63 = 0u;
        *((void *)&v60 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 2LL;
        __int128 v61 = 0u;
        LODWORD(v58) = 0;
        *(void *)&__int128 v59 = 0LL;
        __int128 v55 = 0u;
        __int128 v56 = 0u;
        __int128 v53 = 0u;
        __int128 v54 = 0u;
        __int128 v51 = 0u;
        __int128 v52 = 0u;
        __int128 v49 = 0u;
        __int128 v50 = 0u;
        __int128 v47 = 0u;
        __int128 v48 = 0u;
        __int128 v46 = 0u;
        __int128 v45 = 0u;
        __int128 v44 = 0u;
        __int128 v43 = 0u;
        __int128 v42 = 0u;
        __int128 v41 = 0u;
        __int128 v40 = 0u;
        __int128 v39 = 0u;
        __int128 v37 = 0u;
        __int128 v38 = 0u;
        __int128 v35 = 0u;
        __int128 v36 = 0u;
        *(void *)&__int128 v34 = 0LL;
        __int128 v30 = 0u;
        uint64_t v31 = 0xFFFFFFFFLL;
        unsigned int v29 = (void (**)(icu::UObject *__hidden))off_18972ACE0;
        *(void *)&__int128 v33 = v27;
        *((void *)&v33 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v25;
        *((void *)&v34 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = (char *)&v35 + 8;
        LODWORD(v35) = 40;
        DWORD2(v55) = 0;
        DWORD2(v56) = -1;
        int32_t v57 = (void (**)(icu::UnicodeString *__hidden))a3;
        unsigned int v32 = off_18972CB90;
        HIDWORD(v58) = v13;
        *((void *)&v59 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v26;
        *(void *)&__int128 v60 = off_18971B688;
        unint64_t v4 = sub_18097F3A0(v26, (uint64_t)&v64, (uint64_t)&v29);
        unsigned int v29 = (void (**)(icu::UObject *__hidden))off_18972ACE0;
        icu::FCDUIterCollationIterator::~FCDUIterCollationIterator((icu::FCDUIterCollationIterator *)&v32);
        icu::UObject::~UObject((icu::UObject *)&v29);
        UChar32 v64 = (void (**)(icu::UObject *__hidden))off_18972ACE0;
        icu::FCDUIterCollationIterator::~FCDUIterCollationIterator((icu::FCDUIterCollationIterator *)((char *)&v66 + 8));
      }

      else
      {
        *(void *)&__int128 v66 = 0xFFFFFFFFLL;
        __int128 v65 = 0uLL;
        UChar32 v64 = &off_18972AC98;
        *((void *)&v66 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = a2;
        __int128 v30 = 0uLL;
        uint64_t v31 = 0xFFFFFFFFLL;
        unsigned int v29 = &off_18972AC98;
        unsigned int v32 = (void (**)(icu::FCDUIterCollationIterator *__hidden))a3;
        unint64_t v4 = sub_18097F3A0(v26, (uint64_t)&v64, (uint64_t)&v29);
        icu::UObject::~UObject((icu::UObject *)&v29);
      }

      icu::UObject::~UObject((icu::UObject *)&v64);
    }
  }

  return v4;
}

void sub_18097FD64(uint64_t a1)
{
  *(void *)a1 = off_18972ACE0;
  icu::FCDUIterCollationIterator::~FCDUIterCollationIterator((icu::FCDUIterCollationIterator *)(a1 + 32));
  icu::UObject::~UObject((icu::UObject *)a1);
}

icu::CollationKey *icu::RuleBasedCollator::getCollationKey( icu::RuleBasedCollator *this, const icu::UnicodeString *a2, icu::CollationKey *a3, UErrorCode *a4)
{
  unsigned int v6 = *((unsigned __int16 *)a2 + 4);
  if ((v6 & 0x11) != 0)
  {
    uint64_t v7 = 0LL;
  }

  else if ((v6 & 2) != 0)
  {
    uint64_t v7 = (UChar *)((char *)a2 + 10);
  }

  else
  {
    uint64_t v7 = (UChar *)*((void *)a2 + 3);
  }

  int v8 = (__int16)v6;
  int v9 = v6 >> 5;
  if (v8 >= 0) {
    int v10 = v9;
  }
  else {
    int v10 = *((_DWORD *)a2 + 3);
  }
  return icu::RuleBasedCollator::getCollationKey((uint64_t)this, v7, v10, a3, a4);
}

icu::CollationKey *icu::RuleBasedCollator::getCollationKey( uint64_t a1, UChar *a2, int a3, icu::CollationKey *this, UErrorCode *a5)
{
  if (!a2 && a3)
  {
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return (icu::CollationKey *)icu::CollationKey::setToBogus((uint64_t)this);
  }

  icu::CollationKey::reset((uint64_t)this);
  int v11 = *((_DWORD *)this + 2);
  BOOL v12 = v11 < 0;
  if (v11 < 0) {
    uint64_t v13 = (char *)*((void *)this + 2);
  }
  else {
    uint64_t v13 = (char *)this + 16;
  }
  if (v12) {
    int v14 = *((_DWORD *)this + 6);
  }
  else {
    int v14 = 32;
  }
  int v16 = v14;
  int v17 = 0;
  v15[0] = &off_18972AB00;
  v15[1] = v13;
  uint64_t v18 = 0LL;
  int v19 = this;
  icu::RuleBasedCollator::writeSortKey(a1, a2, a3, v15, a5);
  if (*(int *)a5 < 1)
  {
    if (*((_DWORD *)this + 3) == 2) {
      *a5 = U_MEMORY_ALLOCATION_ERROR;
    }
    else {
      icu::CollationKey::setLength((uint64_t)this, v17);
    }
  }

  else
  {
    icu::CollationKey::setToBogus((uint64_t)this);
  }

  icu::ByteSink::~ByteSink((icu::ByteSink *)v15);
  return this;
}

void icu::RuleBasedCollator::writeSortKey(uint64_t a1, UChar *a2, int a3, _DWORD *a4, UErrorCode *a5)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  if (*(int *)a5 <= 0)
  {
    if (a3 < 0) {
      int v9 = 0LL;
    }
    else {
      int v9 = &a2[a3];
    }
    uint64_t v10 = *(void *)(a1 + 16);
    int v11 = *(_DWORD *)(v10 + 24);
    int v16 = &unk_18971FE68;
    if ((v11 & 1) != 0)
    {
      __int128 v49 = 0u;
      __int128 v50 = 0u;
      __int128 v47 = 0u;
      __int128 v48 = 0u;
      __int128 v45 = 0u;
      __int128 v46 = 0u;
      __int128 v43 = 0u;
      __int128 v44 = 0u;
      __int128 v41 = 0u;
      __int128 v42 = 0u;
      __int128 v39 = 0u;
      __int128 v40 = 0u;
      __int128 v37 = 0u;
      __int128 v38 = 0u;
      __int128 v35 = 0u;
      __int128 v36 = 0u;
      uint64_t v51 = 0LL;
      __int128 v34 = 0u;
      __int128 v33 = 0u;
      __int128 v32 = 0u;
      __int128 v31 = 0u;
      __int128 v30 = 0u;
      __int128 v29 = 0u;
      __int128 v28 = 0u;
      __int128 v27 = 0u;
      __int128 v26 = 0u;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      int v14 = *(void **)(a1 + 8);
      uint64_t v15 = *v14;
      int v19 = v14;
      *((void *)&v20 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = (char *)&v21 + 8;
      LODWORD(v2icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 40;
      DWORD2(v4icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0;
      DWORD2(v42) = -1;
      BYTE12(v42) = (v11 & 2) != 0;
      *(void *)&__int128 v43 = a2;
      *((void *)&v43 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = a2;
      int v17 = off_18972D040;
      uint64_t v18 = v15;
      *(void *)&__int128 v44 = v9;
      *((void *)&v44 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = a2;
      *(void *)&__int128 v45 = a2;
      *(void *)&__int128 v46 = v9;
      *((void *)&v46 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v14[6];
      *(void *)&__int128 v47 = off_18971B688;
      WORD4(v47) = 2;
      LOBYTE(v5icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 1;
      icu::CollationKeys::writeSortKeyUpToQuaternary( (icu::CollationIterator::CEBuffer *)&v17,  v14[9],  v10,  a4,  1,  (uint64_t)&v16,  1,  a5);
      icu::FCDUTF16CollationIterator::~FCDUTF16CollationIterator((icu::FCDUTF16CollationIterator *)&v17);
    }

    else
    {
      __int128 v41 = 0u;
      __int128 v42 = 0u;
      __int128 v39 = 0u;
      __int128 v40 = 0u;
      __int128 v37 = 0u;
      __int128 v38 = 0u;
      __int128 v35 = 0u;
      __int128 v36 = 0u;
      __int128 v34 = 0u;
      __int128 v33 = 0u;
      __int128 v32 = 0u;
      __int128 v31 = 0u;
      __int128 v30 = 0u;
      __int128 v29 = 0u;
      __int128 v28 = 0u;
      __int128 v27 = 0u;
      __int128 v26 = 0u;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      BOOL v12 = *(void **)(a1 + 8);
      uint64_t v13 = *v12;
      int v19 = v12;
      *((void *)&v20 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = (char *)&v21 + 8;
      LODWORD(v2icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 40;
      DWORD2(v4icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0;
      DWORD2(v42) = -1;
      BYTE12(v42) = (v11 & 2) != 0;
      int v17 = off_18972CFB0;
      uint64_t v18 = v13;
      *(void *)&__int128 v43 = a2;
      *((void *)&v43 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = a2;
      *(void *)&__int128 v44 = v9;
      icu::CollationKeys::writeSortKeyUpToQuaternary( (icu::CollationIterator::CEBuffer *)&v17,  v12[9],  v10,  a4,  1,  (uint64_t)&v16,  1,  a5);
      icu::UTF16CollationIterator::~UTF16CollationIterator((icu::UTF16CollationIterator *)&v17);
    }

    if ((*(_DWORD *)(*(void *)(a1 + 16) + 24LL) & 0xFFFFF000) == 0xF000) {
      icu::RuleBasedCollator::writeIdenticalLevel(a1, a2, v9, a4, a5);
    }
    (*(void (**)(_DWORD *, void *, uint64_t))(*(void *)a4 + 16LL))(a4, &unk_180A3C941, 1LL);
    icu::CollationKeys::LevelCallback::~LevelCallback((icu::CollationKeys::LevelCallback *)&v16);
  }

uint64_t icu::RuleBasedCollator::getSortKey( icu::RuleBasedCollator *this, const icu::UnicodeString *a2, char *a3, int a4)
{
  unsigned int v6 = *((unsigned __int16 *)a2 + 4);
  if ((v6 & 0x11) != 0)
  {
    uint64_t v7 = 0LL;
  }

  else if ((v6 & 2) != 0)
  {
    uint64_t v7 = (UChar *)((char *)a2 + 10);
  }

  else
  {
    uint64_t v7 = (UChar *)*((void *)a2 + 3);
  }

  int v8 = (__int16)v6;
  int v9 = v6 >> 5;
  if (v8 >= 0) {
    int v10 = v9;
  }
  else {
    int v10 = *((_DWORD *)a2 + 3);
  }
  return icu::RuleBasedCollator::getSortKey((uint64_t)this, v7, v10, a3, a4);
}

uint64_t icu::RuleBasedCollator::getSortKey(uint64_t a1, UChar *a2, int a3, char *a4, int a5)
{
  uint64_t v5 = 0LL;
  if (a3) {
    BOOL v6 = a2 == 0LL;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6 && (a5 & 0x80000000) == 0)
  {
    if (a4 || !a5)
    {
      char v15 = 0;
      uint64_t v7 = &v15;
      if (a4)
      {
        uint64_t v7 = a4;
        int v8 = a5;
      }

      else
      {
        int v8 = 0;
      }

      uint64_t v14 = 0LL;
      int v12 = v8;
      unsigned int v13 = 0;
      v11[0] = &off_18972AD28;
      v11[1] = v7;
      UErrorCode v10 = U_ZERO_ERROR;
      icu::RuleBasedCollator::writeSortKey(a1, a2, a3, v11, &v10);
      if (v10 <= U_ZERO_ERROR) {
        uint64_t v5 = v13;
      }
      else {
        uint64_t v5 = 0LL;
      }
      icu::ByteSink::~ByteSink((icu::ByteSink *)v11);
    }

    else
    {
      return 0LL;
    }
  }

  return v5;
}

UChar *icu::RuleBasedCollator::writeIdenticalLevel( uint64_t a1, UChar *a2, UChar *a3, _DWORD *a4, UErrorCode *a5)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  uint64_t result = icu::Normalizer2Impl::decompose(*(void *)(*(void *)(a1 + 8) + 48LL), a2, a3, 0LL, a5);
  int v11 = result;
  uint64_t result = (UChar *)sub_1808B3FB4(a4, 1);
  if (v11 == a2)
  {
    uint64_t v12 = 0LL;
    if (a3) {
      goto LABEL_4;
    }
LABEL_7:
    if (!*v11) {
      return result;
    }
    LODWORD(v13) = -1;
    goto LABEL_9;
  }

  uint64_t result = (UChar *)sub_18089817C(0LL, (uint64_t)a2, (unint64_t)((char *)v11 - (char *)a2) >> 1, (uint64_t)a4);
  uint64_t v12 = (uint64_t)result;
  if (!a3) {
    goto LABEL_7;
  }
LABEL_4:
  if (v11 == a3) {
    return result;
  }
  unint64_t v13 = (unint64_t)((char *)a3 - (char *)v11) >> 1;
LABEL_9:
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  uint64_t v21 = 0LL;
  __int128 v20 = 0u;
  int v17 = off_18971B688;
  LOWORD(v18) = 2;
  icu::Normalizer2Impl::decompose(*(UChar **)(*(void *)(a1 + 8) + 48LL), v11, a3, (icu::UnicodeString *)&v17, v13, a5);
  uint64_t v14 = 0LL;
  if ((v18 & 0x11) == 0)
  {
    if ((v18 & 2) != 0) {
      uint64_t v14 = (char *)&v18 + 2;
    }
    else {
      uint64_t v14 = (char *)v19;
    }
  }

  if ((v18 & 0x8000u) == 0LL) {
    int v15 = (unsigned __int16)v18 >> 5;
  }
  else {
    int v15 = DWORD1(v18);
  }
  sub_18089817C(v12, (uint64_t)v14, v15, (uint64_t)a4);
  return (UChar *)icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v17);
}

uint64_t icu::RuleBasedCollator::internalNextSortKeyPart( icu::RuleBasedCollator *this, UCharIterator *a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5, UErrorCode *a6)
{
  uint64_t v66 = *MEMORY[0x1895F89C0];
  if (*(int *)a6 <= 0)
  {
    if (!a2 || !a3 || (uint64_t v10 = a5, (a5 & 0x80000000) != 0) || !a4 && (_DWORD)a5)
    {
      uint64_t v6 = 0LL;
      *a6 = U_ILLEGAL_ARGUMENT_ERROR;
      return v6;
    }

    if ((_DWORD)a5)
    {
      uint64_t v34 = 0LL;
      int v32 = a5;
      unsigned int v33 = 0;
      v31[0] = &off_18972AD28;
      v31[1] = a4;
      unsigned int v14 = a3[1];
      LODWORD(v34) = v14;
      ((void (*)(UCharIterator *, void, void))a2->move)(a2, 0LL, 0LL);
      int v15 = *a3;
      if ((int)*a3 > 5)
      {
        uint64_t v6 = 0LL;
      }

      else
      {
        uint64_t v16 = *((void *)this + 2);
        int v17 = *(_DWORD *)(v16 + 24);
        v29[0] = &off_18972AD88;
        v29[1] = v31;
        LODWORD(v3icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 1;
        HIDWORD(v3icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v14 + v10;
        if ((v17 & 1) != 0)
        {
          __int128 v64 = 0u;
          __int128 v65 = 0u;
          __int128 v62 = 0u;
          __int128 v63 = 0u;
          __int128 v60 = 0u;
          __int128 v61 = 0u;
          __int128 v58 = 0u;
          __int128 v59 = 0u;
          __int128 v56 = 0u;
          __int128 v57 = 0u;
          __int128 v54 = 0u;
          __int128 v55 = 0u;
          __int128 v52 = 0u;
          __int128 v53 = 0u;
          __int128 v51 = 0u;
          __int128 v50 = 0u;
          __int128 v49 = 0u;
          __int128 v48 = 0u;
          __int128 v47 = 0u;
          __int128 v46 = 0u;
          __int128 v45 = 0u;
          __int128 v44 = 0u;
          __int128 v43 = 0u;
          __int128 v42 = 0u;
          __int128 v41 = 0u;
          __int128 v40 = 0u;
          __int128 v38 = 0u;
          __int128 v39 = 0u;
          __int128 v37 = 0u;
          __int128 v25 = (uint64_t *)*((void *)this + 1);
          uint64_t v26 = *v25;
          *((void *)&v36 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v25;
          *((void *)&v37 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = (char *)&v38 + 8;
          LODWORD(v38) = 40;
          DWORD2(v58) = 0;
          DWORD2(v59) = -1;
          BYTE12(v59) = (v17 & 2) != 0;
          *(void *)&__int128 v60 = a2;
          __int128 v35 = off_18972CB90;
          *(void *)&__int128 v36 = v26;
          HIDWORD(v6icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
          *((void *)&v61 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v25[6];
          *(void *)&__int128 v62 = off_18971B688;
          WORD4(v62) = 2;
          icu::CollationKeys::writeSortKeyUpToQuaternary( (icu::CollationIterator::CEBuffer *)&v35,  v25[9],  v16,  v31,  v15,  (uint64_t)v29,  0,  a6);
          icu::FCDUIterCollationIterator::~FCDUIterCollationIterator((icu::FCDUIterCollationIterator *)&v35);
        }

        else
        {
          __int128 v58 = 0u;
          __int128 v59 = 0u;
          __int128 v56 = 0u;
          __int128 v57 = 0u;
          __int128 v54 = 0u;
          __int128 v55 = 0u;
          __int128 v52 = 0u;
          __int128 v53 = 0u;
          __int128 v51 = 0u;
          __int128 v50 = 0u;
          __int128 v49 = 0u;
          __int128 v48 = 0u;
          __int128 v47 = 0u;
          __int128 v46 = 0u;
          __int128 v45 = 0u;
          __int128 v44 = 0u;
          __int128 v43 = 0u;
          __int128 v42 = 0u;
          __int128 v41 = 0u;
          __int128 v40 = 0u;
          __int128 v38 = 0u;
          __int128 v39 = 0u;
          __int128 v37 = 0u;
          __int128 v18 = (uint64_t *)*((void *)this + 1);
          uint64_t v19 = *v18;
          *((void *)&v36 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v18;
          *((void *)&v37 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = (char *)&v38 + 8;
          LODWORD(v38) = 40;
          DWORD2(v58) = 0;
          DWORD2(v59) = -1;
          BYTE12(v59) = (v17 & 2) != 0;
          __int128 v35 = (void (**)(icu::UnicodeString *__hidden))&unk_18972CC20;
          *(void *)&__int128 v36 = v19;
          *(void *)&__int128 v60 = a2;
          icu::CollationKeys::writeSortKeyUpToQuaternary( (icu::CollationIterator::CEBuffer *)&v35,  v18[9],  v16,  v31,  v15,  (uint64_t)v29,  0,  a6);
          icu::UIterCollationIterator::~UIterCollationIterator((icu::UIterCollationIterator *)&v35);
        }

        if (*(int *)a6 > 0)
        {
          uint64_t v10 = 0LL;
LABEL_25:
          icu::CollationKeys::LevelCallback::~LevelCallback((icu::CollationKeys::LevelCallback *)v29);
LABEL_40:
          uint64_t v6 = v10;
LABEL_44:
          icu::ByteSink::~ByteSink((icu::ByteSink *)v31);
          return v6;
        }

        if ((int)v33 > (int)v10)
        {
          *(void *)a3 = v30;
          goto LABEL_25;
        }

        if ((*(_DWORD *)(*((void *)this + 2) + 24LL) & 0xFFFFF000) == 0xF000)
        {
          ((void (*)(UCharIterator *, void, void))a2->move)(a2, 0LL, 0LL);
          int v15 = 6;
        }

        icu::CollationKeys::LevelCallback::~LevelCallback((icu::CollationKeys::LevelCallback *)v29);
        uint64_t v6 = v33;
      }

      if (v15 != 6) {
        goto LABEL_42;
      }
      int v20 = v34;
      int v21 = v32;
      __int128 v36 = 0u;
      *(void *)&__int128 v39 = 0LL;
      __int128 v38 = 0u;
      __int128 v37 = 0u;
      __int128 v35 = off_18971B688;
      unsigned int v22 = 2;
      LOWORD(v36) = 2;
      int v23 = ((uint64_t (*)(UCharIterator *))a2->next)(a2);
      if ((v23 & 0x80000000) == 0)
      {
        do
        {
          LOWORD(v29[0]) = v23;
          icu::UnicodeString::doAppend((uint64_t)&v35, (uint64_t)v29, 0, 1LL);
          int v23 = ((uint64_t (*)(UCharIterator *))a2->next)(a2);
        }

        while ((v23 & 0x80000000) == 0);
        unsigned int v22 = (unsigned __int16)v36;
        if ((v36 & 0x11) != 0)
        {
          __int128 v24 = 0LL;
LABEL_32:
          if ((v22 & 0x8000u) == 0) {
            unsigned int v27 = v22 >> 5;
          }
          else {
            unsigned int v27 = DWORD1(v36);
          }
          icu::RuleBasedCollator::writeIdenticalLevel((uint64_t)this, v24, &v24[v27], v31, a6);
          unint64_t v28 = *(unsigned int *)a6;
          if ((int)v28 > 0)
          {
            uint64_t v10 = 0LL;
LABEL_39:
            icu::UnicodeString::~UnicodeString((void *)v28, (icu::UnicodeString *)&v35);
            goto LABEL_40;
          }

          if ((int)v33 > (int)v10)
          {
            unint64_t v28 = (v21 + v20 - v6);
            *a3 = 6;
            a3[1] = v28;
            goto LABEL_39;
          }

          icu::UnicodeString::~UnicodeString((void *)v33, (icu::UnicodeString *)&v35);
          uint64_t v6 = v33;
LABEL_42:
          *(void *)a3 = 7LL;
          goto LABEL_44;
        }

        if ((v36 & 2) == 0)
        {
          __int128 v24 = (UChar *)v37;
          goto LABEL_32;
        }
      }

      __int128 v24 = (UChar *)&v36 + 1;
      goto LABEL_32;
    }
  }

  return 0LL;
}

void icu::RuleBasedCollator::internalGetCEs( icu::RuleBasedCollator *this, const icu::UnicodeString *a2, icu::UVector64 *a3, UErrorCode *a4)
{
  uint64_t v60 = *MEMORY[0x1895F89C0];
  unsigned int v6 = *((unsigned __int16 *)a2 + 4);
  if ((v6 & 0x11) != 0)
  {
    uint64_t v7 = 0LL;
  }

  else if ((v6 & 2) != 0)
  {
    uint64_t v7 = (char *)a2 + 10;
  }

  else
  {
    uint64_t v7 = (char *)*((void *)a2 + 3);
  }

  int v8 = (__int16)v6;
  unsigned int v9 = v6 >> 5;
  if (v8 < 0) {
    unsigned int v9 = *((_DWORD *)a2 + 3);
  }
  uint64_t v10 = &v7[2 * v9];
  int v11 = *(_DWORD *)(*((void *)this + 2) + 24LL);
  if ((v11 & 1) != 0)
  {
    __int128 v57 = 0u;
    __int128 v58 = 0u;
    __int128 v55 = 0u;
    __int128 v56 = 0u;
    __int128 v53 = 0u;
    __int128 v54 = 0u;
    __int128 v51 = 0u;
    __int128 v52 = 0u;
    __int128 v49 = 0u;
    __int128 v50 = 0u;
    __int128 v47 = 0u;
    __int128 v48 = 0u;
    __int128 v45 = 0u;
    __int128 v46 = 0u;
    __int128 v43 = 0u;
    __int128 v44 = 0u;
    uint64_t v59 = 0LL;
    __int128 v42 = 0u;
    __int128 v41 = 0u;
    __int128 v40 = 0u;
    __int128 v39 = 0u;
    __int128 v38 = 0u;
    __int128 v37 = 0u;
    __int128 v36 = 0u;
    __int128 v35 = 0u;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    __int128 v28 = 0u;
    __int128 v18 = (void *)*((void *)this + 1);
    uint64_t v19 = *v18;
    unsigned int v27 = v18;
    *((void *)&v28 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = (char *)&v29 + 8;
    LODWORD(v29) = 40;
    DWORD2(v49) = 0;
    DWORD2(v5icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = -1;
    BYTE12(v5icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = (v11 & 2) != 0;
    *(void *)&__int128 v51 = v7;
    *((void *)&v51 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v7;
    __int128 v25 = off_18972D040;
    uint64_t v26 = v19;
    *(void *)&__int128 v52 = v10;
    *((void *)&v52 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v7;
    *(void *)&__int128 v53 = v7;
    *(void *)&__int128 v54 = v10;
    *((void *)&v54 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v18[6];
    *(void *)&__int128 v55 = off_18971B688;
    WORD4(v55) = 2;
    LOBYTE(v59) = 1;
    unint64_t v20 = sub_1808A16BC((icu::CollationIterator::CEBuffer *)&v25, a4);
    if (v20 == 0x101000100LL)
    {
LABEL_33:
      icu::FCDUTF16CollationIterator::~FCDUTF16CollationIterator((icu::FCDUTF16CollationIterator *)&v25);
      return;
    }

    unint64_t v21 = v20;
    while (1)
    {
      int v22 = *((_DWORD *)a3 + 2);
      int v23 = v22 + 1;
      if (v22 >= -1 && *((_DWORD *)a3 + 3) > v22) {
        goto LABEL_31;
      }
LABEL_32:
      unint64_t v21 = sub_1808A16BC((icu::CollationIterator::CEBuffer *)&v25, a4);
      if (v21 == 0x101000100LL) {
        goto LABEL_33;
      }
    }

    int v22 = *((_DWORD *)a3 + 2);
    int v23 = v22 + 1;
LABEL_31:
    *(void *)(*((void *)a3 + 3) + 8LL * v22) = v21;
    *((_DWORD *)a3 + 2) = v23;
    goto LABEL_32;
  }

  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int128 v47 = 0u;
  __int128 v48 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v42 = 0u;
  __int128 v41 = 0u;
  __int128 v40 = 0u;
  __int128 v39 = 0u;
  __int128 v38 = 0u;
  __int128 v37 = 0u;
  __int128 v36 = 0u;
  __int128 v35 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v28 = 0u;
  uint64_t v12 = **((void **)this + 1);
  unsigned int v27 = (void *)*((void *)this + 1);
  *((void *)&v28 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = (char *)&v29 + 8;
  LODWORD(v29) = 40;
  DWORD2(v49) = 0;
  DWORD2(v5icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = -1;
  BYTE12(v5icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = (v11 & 2) != 0;
  __int128 v25 = off_18972CFB0;
  uint64_t v26 = v12;
  *(void *)&__int128 v51 = v7;
  *((void *)&v51 + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v7;
  *(void *)&__int128 v52 = v10;
  unint64_t v13 = sub_1808A16BC((icu::CollationIterator::CEBuffer *)&v25, a4);
  if (v13 != 0x101000100LL)
  {
    unint64_t v14 = v13;
    while (1)
    {
      int v15 = *((_DWORD *)a3 + 2);
      int v16 = v15 + 1;
      if (v15 >= -1 && *((_DWORD *)a3 + 3) > v15) {
        goto LABEL_19;
      }
LABEL_20:
      unint64_t v14 = sub_1808A16BC((icu::CollationIterator::CEBuffer *)&v25, a4);
      if (v14 == 0x101000100LL) {
        goto LABEL_21;
      }
    }

    int v15 = *((_DWORD *)a3 + 2);
    int v16 = v15 + 1;
LABEL_19:
    *(void *)(*((void *)a3 + 3) + 8LL * v15) = v14;
    *((_DWORD *)a3 + 2) = v16;
    goto LABEL_20;
  }

uint64_t icu::RuleBasedCollator::internalGetShortDefinitionString( icu::RuleBasedCollator *this, const char *a2, char *a3, int a4, UErrorCode *a5)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  uint64_t v10 = a2;
  if (a3)
  {
    if ((a4 & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_10:
    uint64_t v5 = 0LL;
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return v5;
  }

  if (a4) {
    goto LABEL_10;
  }
LABEL_6:
  if (!a2)
  {
    if (*((_BYTE *)this + 256))
    {
      uint64_t v10 = 0LL;
    }

    else if (**((_BYTE **)this + 10))
    {
      uint64_t v10 = (const char *)*((void *)this + 10);
    }

    else
    {
      uint64_t v10 = "root";
    }
  }

  __int128 v43 = 0u;
  memset(v44, 0, sizeof(v44));
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  *(_OWORD *)__int128 __s = 0u;
  int FunctionalEquivalent = ucol_getFunctionalEquivalent( (uint64_t)__s,  157LL,  (uint64_t)"collation",  (uint64_t)v10,  0LL,  (int *)a5);
  if (FunctionalEquivalent) {
    __s[FunctionalEquivalent] = 0;
  }
  else {
    strcpy(__s, "root");
  }
  memset(&v35[1], 0, 56);
  v35[0] = (char *)&v35[1] + 5;
  LODWORD(v35[1]) = 40;
  int v34 = 0;
  memset(v33, 0, sizeof(v33));
  int v13 = *((_DWORD *)this + 66);
  if ((v13 & 2) != 0)
  {
    if ((*(_DWORD *)(*((void *)this + 2) + 24LL) & 0xC) != 0) {
      int v14 = 20;
    }
    else {
      int v14 = 21;
    }
    sub_180981074((icu::CharString *)v35, 65, v14, a5);
    int v13 = *((_DWORD *)this + 66);
    if ((v13 & 4) == 0)
    {
LABEL_20:
      if ((v13 & 0x80) == 0) {
        goto LABEL_21;
      }
      goto LABEL_37;
    }
  }

  else if ((v13 & 4) == 0)
  {
    goto LABEL_20;
  }

  if (*(int *)a5 <= 0)
  {
    int v16 = *(_DWORD *)(*((void *)this + 2) + 24LL);
    if ((v16 & 0x300) == 0x200) {
      int v17 = 24;
    }
    else {
      int v17 = 25;
    }
    if ((v16 & 0x300) != 0) {
      int v15 = v17;
    }
    else {
      int v15 = 16;
    }
  }

  else
  {
    int v15 = -1;
  }

  sub_180981074((icu::CharString *)v35, 67, v15, a5);
  int v13 = *((_DWORD *)this + 66);
  if ((v13 & 0x80) == 0)
  {
LABEL_21:
    if ((v13 & 8) == 0) {
      goto LABEL_22;
    }
LABEL_43:
    if (*(int *)a5 <= 0)
    {
      if ((*(_BYTE *)(*((void *)this + 2) + 25LL) & 4) != 0) {
        int v19 = 17;
      }
      else {
        int v19 = 16;
      }
    }

    else
    {
      int v19 = -1;
    }

    sub_180981074((icu::CharString *)v35, 69, v19, a5);
    if ((*((_DWORD *)this + 66) & 1) == 0) {
      goto LABEL_55;
    }
    goto LABEL_49;
  }

icu::CharString *sub_180981074(icu::CharString *this, char a2, int a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    uint64_t v7 = this;
    if (*((_DWORD *)this + 14)) {
      icu::CharString::append(this, 95, a4);
    }
    icu::CharString::append(v7, a2, a4);
    return icu::CharString::append(v7, a1234IxoSnLu[a3], a4);
  }

  return this;
}

icu::CharString *sub_1809810FC(icu::CharString *this, char a2, char *a3, int a4, UErrorCode *a5)
{
  if (a4 && *(int *)a5 <= 0)
  {
    LODWORD(v6) = a4;
    unsigned int v9 = this;
    if (*((_DWORD *)this + 14)) {
      icu::CharString::append(this, 95, a5);
    }
    this = icu::CharString::append(v9, a2, a5);
    if ((int)v6 >= 1)
    {
      uint64_t v6 = v6;
      do
      {
        int v10 = *a3++;
        char v11 = uprv_toupper(v10);
        this = icu::CharString::append(v9, v11, a5);
        --v6;
      }

      while (v6);
    }
  }

  return this;
}

uint64_t icu::RuleBasedCollator::isUnsafe(icu::RuleBasedCollator *this, int a2)
{
  return sub_1808B2F00(*((void *)this + 1), a2, (*(unsigned __int8 *)(*((void *)this + 2) + 24LL) >> 1) & 1);
}

int32x2_t *icu::RuleBasedCollator::computeMaxExpansions( icu::CollationElementIterator **this, const icu::CollationTailoring *a2, UErrorCode *a3)
{
  uint64_t result = icu::CollationElementIterator::computeMaxExpansions(this[3], a2, a3);
  this[48] = (icu::CollationElementIterator *)result;
  return result;
}

BOOL icu::RuleBasedCollator::initMaxExpansions(icu::RuleBasedCollator *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    uint64_t v3 = *((void *)this + 3);
    unsigned int v4 = atomic_load((unsigned int *)(v3 + 392));
    if (v4 == 2 || !icu::umtx_initImplPreInit((unsigned int *)(v3 + 392)))
    {
      UErrorCode v6 = *(_DWORD *)(v3 + 396);
      if (v6 >= U_ILLEGAL_ARGUMENT_ERROR) {
        *a2 = v6;
      }
    }

    else
    {
      *(void *)(v3 + 384) = icu::CollationElementIterator::computeMaxExpansions( *(icu::CollationElementIterator **)(v3 + 24),  (const icu::CollationData *)a2,  v5);
      *(UErrorCode *)(v3 + 396) = *a2;
      icu::umtx_initImplPostInit((unsigned int *)(v3 + 392));
    }
  }

  return *a2 < U_ILLEGAL_ARGUMENT_ERROR;
}

icu::CollationElementIterator *icu::RuleBasedCollator::createCollationElementIterator( icu::RuleBasedCollator *this, UChar **a2)
{
  UErrorCode v8 = U_ZERO_ERROR;
  if (!icu::RuleBasedCollator::initMaxExpansions(this, &v8)) {
    return 0LL;
  }
  uint64_t result = (icu::CollationElementIterator *)icu::UMemory::operator new(v5, (icu::UMemory *)0x68, v4);
  if (result)
  {
    uint64_t result = (icu::CollationElementIterator *)icu::CollationElementIterator::CollationElementIterator( (uint64_t)result,  a2,  (uint64_t)this,  &v8);
    if (v8 >= U_ILLEGAL_ARGUMENT_ERROR)
    {
      icu::CollationElementIterator::~CollationElementIterator(result);
      icu::UMemory::operator delete(v7);
      return 0LL;
    }
  }

  return result;
}

icu::CollationElementIterator *icu::RuleBasedCollator::createCollationElementIterator( icu::RuleBasedCollator *this, const icu::CharacterIterator *a2)
{
  UErrorCode v8 = U_ZERO_ERROR;
  if (!icu::RuleBasedCollator::initMaxExpansions(this, &v8)) {
    return 0LL;
  }
  uint64_t result = (icu::CollationElementIterator *)icu::UMemory::operator new(v5, (icu::UMemory *)0x68, v4);
  if (result)
  {
    uint64_t result = (icu::CollationElementIterator *)icu::CollationElementIterator::CollationElementIterator( result,  a2,  this,  &v8);
    if (v8 >= U_ILLEGAL_ARGUMENT_ERROR)
    {
      icu::CollationElementIterator::~CollationElementIterator(result);
      icu::UMemory::operator delete(v7);
      return 0LL;
    }
  }

  return result;
}

uint64_t icu::RuleBasedCollator::getMaxExpansion(icu::RuleBasedCollator *this, unsigned int a2)
{
  UErrorCode v5 = U_ZERO_ERROR;
  icu::RuleBasedCollator::initMaxExpansions(this, &v5);
  return icu::CollationElementIterator::getMaxExpansion(*(void *)(*((void *)this + 3) + 384LL), a2);
}

void sub_180981384(icu::UObject *a1)
{
}

uint64_t sub_180981398(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int16 **)(a1 + 32);
  int v2 = *(unsigned __int16 **)(a1 + 40);
  if (v1 == v2) {
    return 0xFFFFFFFFLL;
  }
  UErrorCode v5 = v1 + 1;
  uint64_t result = *v1;
  *(void *)(a1 + 32) = v1 + 1;
  if (v2) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = (_DWORD)result == 0;
  }
  if (v6)
  {
    *(void *)(a1 + 32) = 0LL;
    return 0xFFFFFFFFLL;
  }

  if ((result & 0xFC00) == 0xD800 && v5 != v2)
  {
    int v8 = *v5;
    if ((v8 & 0xFC00) == 0xDC00)
    {
      *(void *)(a1 + 32) = v1 + 2;
      return (v8 + ((_DWORD)result << 10) - 56613888);
    }
  }

  return result;
}

uint64_t sub_180981410(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 24);
  if ((v1 & 0x80000000) != 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
  }
  if ((_DWORD)v1 == *(_DWORD *)(a1 + 28))
  {
    *(_DWORD *)(a1 + 24) = -1;
    return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
  }

  uint64_t v3 = *(void *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1 + 1;
  uint64_t v4 = *(unsigned __int16 *)(v3 + 2 * v1);
  if ((v4 & 0xFC00) == 0xD800)
  {
    *(_DWORD *)(a1 + 24) = v1 + 2;
    return *(unsigned __int16 *)(v3 + 2 * (v1 + 1)) + ((_DWORD)v4 << 10) - 56613888;
  }

  return v4;
}

uint64_t sub_18098147C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if ((*(_DWORD *)(a1 + 24) & 0x80000000) != 0)
  {
    Decompositiouint64_t n = icu::Normalizer2Impl::getDecomposition(a2, a3, (_WORD *)(a1 + 16), (int *)(a1 + 28));
    *(void *)(a1 + 8) = Decomposition;
    if (Decomposition)
    {
      *(_DWORD *)(a1 + 24) = 1;
      uint64_t v3 = (unsigned __int16)*Decomposition;
      if ((v3 & 0xFC00) == 0xD800)
      {
        *(_DWORD *)(a1 + 24) = 2;
        return (unsigned __int16)Decomposition[1] + ((_DWORD)v3 << 10) - 56613888;
      }
    }
  }

  return v3;
}

void sub_180981500(uint64_t a1)
{
  *(void *)a1 = off_18972ABC0;
  icu::UnicodeString::~UnicodeString(off_18972ABC0, (icu::UnicodeString *)(a1 + 48));
  icu::UObject::~UObject((icu::UObject *)a1);
  icu::UMemory::operator delete(v2);
}

void sub_180981534(icu::UObject *a1)
{
}

uint64_t sub_180981548(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 44);
  uint64_t v2 = *(int *)(a1 + 40);
  if ((_DWORD)v2 != v1)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if ((v1 & 0x80000000) == 0 || *(_BYTE *)(v3 + v2))
    {
      uint64_t v6 = v2 + 1;
      *(_DWORD *)(a1 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v2 + 1;
      int v7 = *(char *)(v3 + v2);
      uint64_t v4 = *(unsigned __int8 *)(v3 + v2);
      if ((v7 & 0x80000000) == 0) {
        return v4;
      }
      if ((_DWORD)v6 != v1)
      {
        if (v4 < 0xE0)
        {
          int v10 = v4 & 0x1F;
        }

        else
        {
          if (v4 > 0xEF)
          {
            int v12 = v4 - 240;
            unint64_t v8 = *(unsigned __int8 *)(v3 + v6);
            uint64_t v6 = v2 + 2;
            *(_DWORD *)(a1 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v2 + 2;
            if ((_DWORD)v2 + 2 == v1) {
              return 65533LL;
            }
            unsigned int v9 = *(unsigned __int8 *)(v3 + v6) ^ 0x80;
            if (v9 > 0x3F) {
              return 65533LL;
            }
            LODWORD(v8) = v8 & 0x3F | (v12 << 6);
          }

          else
          {
            unint64_t v8 = v7 & 0xF;
            unsigned int v9 = *(_BYTE *)(v3 + v6) & 0x3F;
          }

          LODWORD(v6) = v6 + 1;
          *(_DWORD *)(a1 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v6;
          if ((_DWORD)v6 == v1) {
            return 65533LL;
          }
          int v10 = v9 | ((_DWORD)v8 << 6);
        }

        unsigned int v11 = *(unsigned __int8 *)(v3 + (int)v6) ^ 0x80;
        if (v11 <= 0x3F)
        {
          uint64_t v4 = v11 | (v10 << 6);
          *(_DWORD *)(a1 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v6 + 1;
          return v4;
        }
      }

      return 65533LL;
    }
  }

  return 0xFFFFFFFFLL;
}

void sub_180981664(uint64_t a1)
{
  *(void *)a1 = off_18972AC50;
  icu::FCDUTF8CollationIterator::~FCDUTF8CollationIterator((icu::FCDUTF8CollationIterator *)(a1 + 32));
  icu::UObject::~UObject((icu::UObject *)a1);
  icu::UMemory::operator delete(v2);
}

uint64_t sub_180981698(uint64_t a1)
{
  UErrorCode v2 = U_ZERO_ERROR;
  return icu::FCDUTF8CollationIterator::nextCodePoint((icu::FCDUTF8CollationIterator *)(a1 + 32), &v2);
}

void sub_1809816C0(icu::UObject *a1)
{
}

uint64_t sub_1809816D4(uint64_t a1)
{
  return uiter_next32(*(UCharIterator **)(a1 + 32));
}

void sub_1809816DC(uint64_t a1)
{
  *(void *)a1 = off_18972ACE0;
  icu::FCDUIterCollationIterator::~FCDUIterCollationIterator((icu::FCDUIterCollationIterator *)(a1 + 32));
  icu::UObject::~UObject((icu::UObject *)a1);
  icu::UMemory::operator delete(v2);
}

uint64_t *sub_180981710(uint64_t a1)
{
  UErrorCode v2 = U_ZERO_ERROR;
  return icu::FCDUIterCollationIterator::nextCodePoint((icu::FCDUIterCollationIterator *)(a1 + 32), &v2);
}

void sub_180981738(icu::ByteSink *a1)
{
}

_DWORD *sub_18098174C(_DWORD *result, const void *a2, uint64_t a3, int a4)
{
  size_t v4 = (result[4] - a4);
  return result;
}

uint64_t sub_18098176C()
{
  return 0LL;
}

void sub_180981774(icu::CollationKeys::LevelCallback *a1)
{
}

uint64_t sub_180981788(uint64_t a1, int a2)
{
  UErrorCode v2 = *(_DWORD **)(a1 + 8);
  int v4 = v2[4];
  int v3 = v2[5];
  BOOL v5 = __OFSUB__(v4, v3);
  int v6 = v4 - v3;
  if (v6 < 0 != v5) {
    return 0LL;
  }
  int v7 = v6 + v2[6];
  *(_DWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v7;
  return 1LL;
}

icu::ScientificNumberFormatter *icu::ScientificNumberFormatter::createSuperscriptInstance@<X0>( icu::ScientificNumberFormatter *this@<X0>, UErrorCode *a2@<X1>, uint64_t *a3@<X8>)
{
  int v6 = (Style *)icu::UMemory::operator new(a3, (icu::UMemory *)8, (unint64_t)a2);
  if (v6) {
    *(void *)int v6 = &off_18972AE58;
  }
  return icu::ScientificNumberFormatter::createInstance(this, v6, a2, v7);
}

icu::ScientificNumberFormatter *icu::ScientificNumberFormatter::createInstance( icu::ScientificNumberFormatter *this, Style *a2, UErrorCode *a3, UErrorCode *a4)
{
  int v6 = (uint64_t *)*(unsigned int *)a3;
  if ((int)v6 > 0)
  {
    if (!a2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  unint64_t v8 = (icu::ScientificNumberFormatter *)icu::UMemory::operator new(v6, (icu::UMemory *)0x58, (unint64_t)a2);
  if (!v8)
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
    if (!a2)
    {
LABEL_4:
      if (!this) {
        return 0LL;
      }
      goto LABEL_8;
    }

icu::ScientificNumberFormatter *icu::ScientificNumberFormatter::createSuperscriptInstance( char **this, UErrorCode *a2, UErrorCode *a3)
{
  Scientificuint64_t Instance = icu::NumberFormat::createScientificInstance(this, a2, a3);
  int v7 = (Style *)icu::UMemory::operator new(v6, (icu::UMemory *)8, v5);
  if (v7) {
    *(void *)int v7 = &off_18972AE58;
  }
  return icu::ScientificNumberFormatter::createInstance(ScientificInstance, v7, a2, v8);
}

icu::ScientificNumberFormatter *icu::ScientificNumberFormatter::createMarkupInstance@<X0>( icu::ScientificNumberFormatter *this@<X0>, UChar **a2@<X1>, UChar **a3@<X2>, UErrorCode *a4@<X3>, uint64_t *a5@<X8>)
{
  int v10 = icu::UMemory::operator new(a5, (icu::UMemory *)0x88, (unint64_t)a2);
  int v12 = (Style *)v10;
  if (v10)
  {
    uint64_t *v10 = (uint64_t)off_18972ADF0;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v10 + 1), a2);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v12 + 72), a3);
  }

  return icu::ScientificNumberFormatter::createInstance(this, v12, a4, v11);
}

icu::ScientificNumberFormatter *icu::ScientificNumberFormatter::createMarkupInstance( char **this, UChar **a2, UErrorCode *a3, UErrorCode *a4, UErrorCode *a5)
{
  Scientificuint64_t Instance = icu::NumberFormat::createScientificInstance(this, a4, a3);
  unsigned int v11 = icu::UMemory::operator new(v10, (icu::UMemory *)0x88, v9);
  int v13 = (Style *)v11;
  if (v11)
  {
    *unsigned int v11 = (uint64_t)off_18972ADF0;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v11 + 1), a2);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v13 + 72), (UChar **)a3);
  }

  return icu::ScientificNumberFormatter::createInstance(ScientificInstance, v13, a4, v12);
}

void *icu::ScientificNumberFormatter::SuperscriptStyle::clone( icu::ScientificNumberFormatter::SuperscriptStyle *this, unint64_t a2)
{
  uint64_t result = (void *)icu::UMemory::operator new((icu::UMemory *)8, a2);
  if (result) {
    *uint64_t result = &off_18972AE58;
  }
  return result;
}

icu::UnicodeString *icu::ScientificNumberFormatter::SuperscriptStyle::format( icu::ScientificNumberFormatter::SuperscriptStyle *this, const icu::UnicodeString *a2, icu::FieldPositionIterator *a3, const icu::UnicodeString *a4, icu::UnicodeString *a5, UErrorCode *a6)
{
  uint64_t v32 = 0LL;
  __int128 v30 = off_189723AC8;
  uint64_t v31 = 0xFFFFFFFFLL;
  if (!icu::FieldPositionIterator::next(a3, (icu::FieldPosition *)&v30))
  {
    LODWORD(v12) = 0;
LABEL_28:
    unsigned int v26 = *((unsigned __int16 *)a2 + 4);
    int v27 = (__int16)v26;
    unsigned int v28 = v26 >> 5;
    if (v27 < 0) {
      unsigned int v28 = *((_DWORD *)a2 + 3);
    }
    icu::UnicodeString::doAppend((uint64_t)a5, a2, v12, v28 - v12);
    goto LABEL_32;
  }

  uint64_t v11 = 0LL;
  while ((_DWORD)v31 != 5)
  {
    if ((_DWORD)v31 == 4)
    {
      int v21 = HIDWORD(v31);
      uint64_t v12 = v32;
      int v22 = icu::UnicodeString::char32At((uint64_t *)4, a2, SHIDWORD(v31));
      int v23 = (icu::UnicodeSet *)icu::unisets::get(11);
      if (icu::UnicodeSet::contains(v23, v22))
      {
        icu::UnicodeString::doAppend((uint64_t)a5, a2, v11, (v21 - v11));
        __int16 v24 = 8315;
      }

      else
      {
        __int128 v25 = (icu::UnicodeSet *)icu::unisets::get(12);
        icu::UnicodeString::doAppend((uint64_t)a5, a2, v11, (v21 - v11));
        __int16 v24 = 8314;
      }

      __int16 v33 = v24;
      icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v33, 0, 1LL);
    }

    else if ((_DWORD)v31 == 3)
    {
      icu::UnicodeString::doAppend((uint64_t)a5, a2, v11, (HIDWORD(v31) - v11));
      uint64_t v12 = v32;
      unsigned int v13 = *((unsigned __int16 *)a4 + 4);
      int v14 = (__int16)v13;
      unsigned int v15 = v13 >> 5;
      if (v14 >= 0) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = *((unsigned int *)a4 + 3);
      }
      icu::UnicodeString::doAppend((uint64_t)a5, a4, 0, v16);
    }

    else
    {
      uint64_t v12 = v11;
    }

uint64_t *icu::ScientificNumberFormatter::MarkupStyle::clone@<X0>( UChar **this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x88, a2);
  unint64_t v5 = v4;
  if (v4)
  {
    *int v4 = (uint64_t)off_18972ADF0;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v4 + 1), this + 1);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v5 + 9), this + 9);
  }

  return v5;
}

icu::UnicodeString *icu::ScientificNumberFormatter::MarkupStyle::format( icu::ScientificNumberFormatter::MarkupStyle *this, const icu::UnicodeString *a2, icu::FieldPositionIterator *a3, const icu::UnicodeString *a4, icu::UnicodeString *a5, UErrorCode *a6)
{
  if (*(int *)a6 <= 0)
  {
    uint64_t v36 = 0LL;
    int v34 = off_189723AC8;
    uint64_t v35 = 0xFFFFFFFFLL;
    int v11 = 0;
    if (icu::FieldPositionIterator::next(a3, (icu::FieldPosition *)&v34))
    {
      __int16 v33 = (icu::ScientificNumberFormatter::MarkupStyle *)((char *)this + 72);
      uint64_t v12 = (char *)this + 80;
      unsigned int v13 = (char *)this + 84;
      int v14 = (icu::ScientificNumberFormatter::MarkupStyle *)((char *)this + 8);
      unsigned int v15 = (char *)this + 16;
      uint64_t v16 = (char *)this + 20;
      while ((_DWORD)v35 != 5)
      {
        if ((_DWORD)v35 == 3)
        {
          icu::UnicodeString::doAppend((uint64_t)a5, a2, v11, (HIDWORD(v35) - v11));
          int v11 = v36;
          unsigned int v17 = *((unsigned __int16 *)a4 + 4);
          int v18 = (__int16)v17;
          unsigned int v19 = v17 >> 5;
          if (v18 >= 0) {
            uint64_t v20 = v19;
          }
          else {
            uint64_t v20 = *((unsigned int *)a4 + 3);
          }
          icu::UnicodeString::doAppend((uint64_t)a5, a4, 0, v20);
          int v21 = (unsigned __int16 *)v15;
          int v22 = (unsigned int *)v16;
          int v23 = v14;
          goto LABEL_11;
        }

icu::ScientificNumberFormatter *icu::ScientificNumberFormatter::ScientificNumberFormatter( icu::ScientificNumberFormatter *this, icu::DecimalFormat *a2, Style *a3, UErrorCode *a4)
{
  *(void *)this = off_18972ADC8;
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = off_18971B688;
  unint64_t v5 = (icu::ScientificNumberFormatter *)((char *)this + 8);
  *((_WORD *)this + 8) = 2;
  *((void *)this + 9) = a2;
  *((void *)this + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = a3;
  if (*(int *)a4 <= 0)
  {
    if (a2
      && a3
      && (int v7 = (icu::ScientificNumberFormatter *)(*(uint64_t (**)(icu::DecimalFormat *))(*(void *)a2 + 320LL))(a2)) != 0LL)
    {
      icu::ScientificNumberFormatter::getPreExponent(v7, v5, v8);
    }

    else
    {
      *a4 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }

  return this;
}

uint64_t icu::ScientificNumberFormatter::getPreExponent( icu::ScientificNumberFormatter *this, const icu::DecimalFormatSymbols *a2, icu::UnicodeString *a3)
{
  unsigned int v5 = *((unsigned __int16 *)this + 872);
  int v6 = (__int16)v5;
  unsigned int v7 = v5 >> 5;
  if (v6 >= 0) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = *((unsigned int *)this + 437);
  }
  icu::UnicodeString::doAppend((uint64_t)a2, (icu::ScientificNumberFormatter *)((char *)this + 1736), 0, v8);
  unsigned int v9 = *((unsigned __int16 *)this + 584);
  int v10 = (__int16)v9;
  unsigned int v11 = v9 >> 5;
  if (v10 >= 0) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = *((unsigned int *)this + 293);
  }
  icu::UnicodeString::doAppend((uint64_t)a2, (icu::ScientificNumberFormatter *)((char *)this + 1160), 0, v12);
  unsigned int v13 = *((unsigned __int16 *)this + 136);
  int v14 = (__int16)v13;
  unsigned int v15 = v13 >> 5;
  if (v14 >= 0) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = *((unsigned int *)this + 69);
  }
  return icu::UnicodeString::doAppend((uint64_t)a2, (icu::ScientificNumberFormatter *)((char *)this + 264), 0, v16);
}

void *icu::ScientificNumberFormatter::ScientificNumberFormatter(void *a1, uint64_t a2)
{
  *a1 = off_18972ADC8;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 1), (UChar **)(a2 + 8));
  a1[9] = 0LL;
  a1[10] = 0LL;
  a1[9] = (*(uint64_t (**)(void))(**(void **)(a2 + 72) + 32LL))(*(void *)(a2 + 72));
  a1[10] = (*(uint64_t (**)(void))(**(void **)(a2 + 80) + 24LL))(*(void *)(a2 + 80));
  return a1;
}

{
  *a1 = off_18972ADC8;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 1), (UChar **)(a2 + 8));
  a1[9] = 0LL;
  a1[10] = 0LL;
  a1[9] = (*(uint64_t (**)(void))(**(void **)(a2 + 72) + 32LL))(*(void *)(a2 + 72));
  a1[10] = (*(uint64_t (**)(void))(**(void **)(a2 + 80) + 24LL))(*(void *)(a2 + 80));
  return a1;
}

void icu::ScientificNumberFormatter::~ScientificNumberFormatter(icu::ScientificNumberFormatter *this)
{
  *(void *)this = off_18972ADC8;
  uint64_t v2 = *((void *)this + 9);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *((void *)this + 10);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  icu::UnicodeString::~UnicodeString((icu::ScientificNumberFormatter *)((char *)this + 8));
  icu::UObject::~UObject(this);
}

{
  void *v1;
  icu::ScientificNumberFormatter::~ScientificNumberFormatter(this);
  icu::UMemory::operator delete(v1);
}

icu::UnicodeString *icu::ScientificNumberFormatter::format( icu::ScientificNumberFormatter *this, const icu::Formattable *a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  if (*(int *)a4 <= 0)
  {
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    uint64_t v15 = 0LL;
    __int128 v14 = 0u;
    unsigned int v11 = off_18971B688;
    LOWORD(v12) = 2;
    memset(v10, 0, sizeof(v10));
    icu::FieldPositionIterator::FieldPositionIterator((uint64_t)v10);
    (*(void (**)(void, const icu::Formattable *, void (***)(icu::UnicodeString *__hidden), void *, UErrorCode *))(**((void **)this + 9) + 48LL))( *((void *)this + 9),  a2,  &v11,  v10,  a4);
    a3 = (icu::UnicodeString *)(*(uint64_t (**)(void, void (***)(icu::UnicodeString *__hidden), void *, char *, icu::UnicodeString *, UErrorCode *))(**((void **)this + 10) + 32LL))( *((void *)this + 10),  &v11,  v10,  (char *)this + 8,  a3,  a4);
    icu::FieldPositionIterator::~FieldPositionIterator((icu::FieldPositionIterator *)v10);
    icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v11);
  }

  return a3;
}

void sub_1809821F0(uint64_t a1)
{
  *(void *)a1 = off_18972ADF0;
  uint64_t v2 = (icu::UnicodeString *)(a1 + 8);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 72));
  icu::UnicodeString::~UnicodeString(v2);
  icu::UObject::~UObject((icu::UObject *)a1);
}

void sub_180982230(uint64_t a1)
{
  *(void *)a1 = off_18972ADF0;
  uint64_t v2 = (icu::UnicodeString *)(a1 + 8);
  icu::UnicodeString::~UnicodeString(off_18972ADF0, (icu::UnicodeString *)(a1 + 72));
  icu::UnicodeString::~UnicodeString(v3, v2);
  icu::UObject::~UObject((icu::UObject *)a1);
  icu::UMemory::operator delete(v4);
}

void sub_180982278(icu::UObject *a1)
{
}

uint64_t icu::ScriptSet::ScriptSet(uint64_t this)
{
  *(void *)this = 0LL;
  *(void *)(this + 8) = 0LL;
  *(_DWORD *)(this + 24) = 0;
  *(void *)(this + 16) = 0LL;
  return this;
}

{
  *(void *)this = 0LL;
  *(void *)(this + 8) = 0LL;
  *(_DWORD *)(this + 24) = 0;
  *(void *)(this + 16) = 0LL;
  return this;
}

__n128 icu::ScriptSet::ScriptSet(icu::ScriptSet *this, const icu::ScriptSet *a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)((char *)this + 12) = *(_OWORD *)((char *)a2 + 12);
  *(__n128 *)this = result;
  return result;
}

{
  __n128 result;
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)((char *)this + 12) = *(_OWORD *)((char *)a2 + 12);
  *(__n128 *)this = result;
  return result;
}

__n128 icu::ScriptSet::operator=(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

BOOL icu::ScriptSet::operator==(_DWORD *a1, _DWORD *a2)
{
  if (*a1 != *a2) {
    return 0LL;
  }
  unint64_t v2 = 0LL;
  do
  {
    unint64_t v3 = v2;
    if (v2 == 6) {
      break;
    }
    int v4 = a1[v2 + 1];
    int v5 = a2[++v2];
  }

  while (v4 == v5);
  return v3 > 5;
}

uint64_t icu::ScriptSet::test(uint64_t a1, unsigned int a2, int *a3)
{
  if (*a3 > 0) {
    return 0LL;
  }
  if (a2 < 0xE0) {
    return (*(_DWORD *)(a1 + 4LL * (a2 >> 5)) >> a2) & 1;
  }
  uint64_t result = 0LL;
  *a3 = 1;
  return result;
}

uint64_t icu::ScriptSet::set(uint64_t result, unsigned int a2, int *a3)
{
  if (*a3 <= 0)
  {
    if (a2 < 0xE0) {
      *(_DWORD *)(result + 4LL * (a2 >> 5)) |= 1 << a2;
    }
    else {
      *a3 = 1;
    }
  }

  return result;
}

uint64_t icu::ScriptSet::reset(uint64_t result, unsigned int a2, int *a3)
{
  if (*a3 <= 0)
  {
    if (a2 < 0xE0) {
      *(_DWORD *)(result + 4LL * (a2 >> 5)) &= ~(1 << a2);
    }
    else {
      *a3 = 1;
    }
  }

  return result;
}

uint64_t icu::ScriptSet::Union(uint64_t this, const icu::ScriptSet *a2)
{
  for (uint64_t i = 0LL; i != 28; i += 4LL)
    *(_DWORD *)(this + i) |= *(_DWORD *)((char *)a2 + i);
  return this;
}

uint64_t icu::ScriptSet::intersect(uint64_t this, const icu::ScriptSet *a2)
{
  for (uint64_t i = 0LL; i != 28; i += 4LL)
    *(_DWORD *)(this + i) &= *(_DWORD *)((char *)a2 + i);
  return this;
}

uint64_t icu::ScriptSet::intersect(uint64_t result, unsigned int a2, int *a3)
{
  int v5 = 0;
  v4[2] = 0LL;
  if (*a3 <= 0)
  {
    if (a2 < 0xE0)
    {
      uint64_t v3 = 0LL;
      *((_DWORD *)v4 + (a2 >> 5)) |= 1 << a2;
      do
      {
        *(_DWORD *)(result + v3) &= *(_DWORD *)((char *)v4 + v3);
        v3 += 4LL;
      }

      while (v3 != 28);
    }

    else
    {
      *a3 = 1;
    }
  }

  return result;
}

BOOL icu::ScriptSet::intersects(icu::ScriptSet *this, const icu::ScriptSet *a2)
{
  if ((*(_DWORD *)a2 & *(_DWORD *)this) != 0) {
    return 1LL;
  }
  unint64_t v3 = 0LL;
  do
  {
    unint64_t v4 = v3;
    if (v3 == 6) {
      break;
    }
    int v5 = *((_DWORD *)this + v3 + 1);
    int v6 = *((_DWORD *)a2 + ++v3);
  }

  while ((v6 & v5) == 0);
  return v4 < 6;
}

BOOL icu::ScriptSet::contains(icu::ScriptSet *this, const icu::ScriptSet *a2)
{
  uint64_t v2 = 0LL;
  *(_OWORD *)&v8[3] = *(_OWORD *)((char *)this + 12);
  do
  {
    v8[v2] &= *(_DWORD *)((char *)a2 + v2 * 4);
    ++v2;
  }

  while (v2 != 7);
  if (v8[0] != *(_DWORD *)a2) {
    return 0LL;
  }
  unint64_t v3 = 0LL;
  do
  {
    unint64_t v4 = v3;
    if (v3 == 6) {
      break;
    }
    int v5 = v8[v3 + 1];
    int v6 = *((_DWORD *)a2 + ++v3);
  }

  while (v5 == v6);
  return v4 > 5;
}

uint64_t icu::ScriptSet::setAll(uint64_t this)
{
  *(void *)(this + 8) = -1LL;
  *(void *)(this + 16) = -1LL;
  *(void *)this = -1LL;
  *(_DWORD *)(this + 24) = -1;
  return this;
}

uint64_t icu::ScriptSet::resetAll(uint64_t this)
{
  *(void *)this = 0LL;
  *(void *)(this + 8) = 0LL;
  *(_DWORD *)(this + 24) = 0;
  *(void *)(this + 16) = 0LL;
  return this;
}

uint64_t icu::ScriptSet::countMembers(icu::ScriptSet *this, int8x8_t a2)
{
  uint64_t v2 = 0LL;
  uint64_t v3 = 0LL;
  do
  {
    if (*(_DWORD *)((char *)this + v2))
    {
      a2.i32[0] = *(_DWORD *)((char *)this + v2);
      a2 = vcnt_s8(a2);
      a2.i16[0] = vaddlv_u8((uint8x8_t)a2);
      uint64_t v3 = (a2.i32[0] + v3);
    }

    v2 += 4LL;
  }

  while (v2 != 28);
  return v3;
}

uint64_t icu::ScriptSet::hashCode(icu::ScriptSet *this)
{
  uint64_t v1 = 0LL;
  LODWORD(v2) = 0;
  do
  {
    uint64_t v2 = *(_DWORD *)((char *)this + v1) ^ v2;
    v1 += 4LL;
  }

  while (v1 != 28);
  return v2;
}

uint64_t icu::ScriptSet::nextSetBit(icu::ScriptSet *this, uint64_t a2)
{
  if (a2 <= 0xDF)
  {
    int v3 = 0;
    do
    {
      if (v3 <= 0)
      {
        if (a2 <= 0xDF)
        {
        }

        else
        {
          int v3 = 1;
        }
      }

      a2 = (a2 + 1);
    }

    while ((_DWORD)a2 != 224);
  }

  return 0xFFFFFFFFLL;
}

BOOL icu::ScriptSet::isEmpty(icu::ScriptSet *this)
{
  if (*(_DWORD *)this) {
    return 0LL;
  }
  unint64_t v2 = 0LL;
  do
  {
    unint64_t v3 = v2;
    if (v2 == 6) {
      break;
    }
  }

  while (!*((_DWORD *)this + ++v2));
  return v3 > 5;
}

icu::UnicodeString *icu::ScriptSet::displayScripts(icu::ScriptSet *this, icu::UnicodeString *a2)
{
  unsigned int v4 = 0;
  uint64_t v13 = *MEMORY[0x1895F89C0];
  do
  {
    if (((*((_DWORD *)this + (v4 >> 5)) >> v4) & 1) != 0)
    {
      while (1)
      {
        Shortuint64_t Name = uscript_getShortName(v4);
        icu::UnicodeString::UnicodeString(&v10, ShortName, 0xFFFFFFFFLL, 0LL);
        if ((v11 & 0x8000u) == 0) {
          uint64_t v7 = v11 >> 5;
        }
        else {
          uint64_t v7 = v12;
        }
        icu::UnicodeString::doAppend((uint64_t)a2, (const icu::UnicodeString *)&v10, 0, v7);
        icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v10);
        if (v4 > 0xDE) {
          return a2;
        }
        int v9 = 0;
        ++v4;
        while (v9 > 0)
        {
LABEL_11:
          if (++v4 == 224) {
            return a2;
          }
        }

        if (v4 > 0xDF) {
          break;
        }
        if (((*((_DWORD *)this + (v4 >> 5)) >> v4) & 1) == 0) {
          goto LABEL_11;
        }
        __int16 v10 = 32;
        icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)&v10, 0, 1LL);
      }

      int v9 = 1;
      goto LABEL_11;
    }

    ++v4;
  }

  while (v4 != 224);
  return a2;
}

icu::ScriptSet *icu::ScriptSet::parseScripts( icu::ScriptSet *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  *(void *)this = 0LL;
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0LL;
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 2) = 0LL;
  if (*(int *)a3 <= 0)
  {
    *(_OWORD *)length = 0u;
    uint64_t v26 = 0LL;
    __int128 v25 = 0u;
    __int128 v24 = 0u;
    int v22 = off_18971B688;
    LOWORD(length[0]) = 2;
    unsigned int v5 = *((unsigned __int16 *)a2 + 4);
    int v6 = (__int16)v5;
    LODWORD(v7) = v5 >> 5;
    if (v6 >= 0) {
      uint64_t v7 = v7;
    }
    else {
      uint64_t v7 = *((unsigned int *)a2 + 3);
    }
    if ((int)v7 >= 1)
    {
      int v9 = 0;
      do
      {
        unsigned int v10 = icu::UnicodeString::char32At((uint64_t *)v7, a2, v9);
        int v9 = icu::UnicodeString::moveIndex32(a2, v9, 1);
        if (!u_isUWhiteSpace(v10))
        {
          icu::UnicodeString::append((uint64_t)&v22, v10);
          unsigned int v11 = *((unsigned __int16 *)a2 + 4);
          int v12 = (__int16)v11;
          int v13 = v11 >> 5;
          if (v12 < 0) {
            int v13 = *((_DWORD *)a2 + 3);
          }
          if (v9 < v13) {
            goto LABEL_23;
          }
        }

        if (SLOWORD(length[0]) < 0)
        {
          uint64_t v14 = length[1];
          if (length[1] <= 0) {
            goto LABEL_23;
          }
          uint64_t v21 = 0LL;
        }

        else
        {
          if (LOWORD(length[0]) < 0x20u) {
            goto LABEL_23;
          }
          uint64_t v21 = 0LL;
          uint64_t v14 = LOWORD(length[0]) >> 5;
        }

        memset(v20, 0, sizeof(v20));
        icu::UnicodeString::extract((uint64_t)&v22, 0, v14, (char *)v20, 39);
        HIBYTE(v2icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0;
        PropertyValueEnuunsigned int m = u_getPropertyValueEnum(UCHAR_SCRIPT, (const char *)v20);
        if (PropertyValueEnum == -1) {
          goto LABEL_28;
        }
        uint64_t v7 = *(unsigned int *)a3;
        if (PropertyValueEnum > 0xDF)
        {
LABEL_28:
          uint64_t v7 = 1LL;
          *a3 = U_ILLEGAL_ARGUMENT_ERROR;
          break;
        }

        *((_DWORD *)this + (PropertyValueEnum >> 5)) |= 1 << PropertyValueEnum;
        if ((length[0] & 1) != 0) {
          __int16 v16 = 2;
        }
        else {
          __int16 v16 = length[0] & 0x1F;
        }
        LOWORD(length[0]) = v16;
LABEL_23:
        unsigned int v17 = *((unsigned __int16 *)a2 + 4);
        int v18 = (__int16)v17;
        LODWORD(v7) = v17 >> 5;
        if (v18 >= 0) {
          uint64_t v7 = v7;
        }
        else {
          uint64_t v7 = *((unsigned int *)a2 + 3);
        }
      }

      while (v9 < (int)v7);
    }

    icu::UnicodeString::~UnicodeString((void *)v7, (icu::UnicodeString *)&v22);
  }

  return this;
}

void icu::ScriptSet::setScriptExtensions(icu::ScriptSet *this, unsigned int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    memset(v17, 0, sizeof(v17));
    uint64_t v18 = 0LL;
    __int16 v16 = (char *)v17 + 8;
    LODWORD(v17[0]) = 20;
    UErrorCode v15 = U_ZERO_ERROR;
    int ScriptExtensions = uscript_getScriptExtensions(a2, (int *)v17 + 2, 20, (int *)&v15);
    UErrorCode v7 = v15;
    if (v15 == U_BUFFER_OVERFLOW_ERROR)
    {
      while (ScriptExtensions >= 1)
      {
        uint64_t v8 = uprv_malloc(4LL * ScriptExtensions);
        if (!v8) {
          break;
        }
        int v9 = v8;
        if (BYTE4(v17[0])) {
          uprv_free(v16);
        }
        __int16 v16 = v9;
        LODWORD(v17[0]) = ScriptExtensions;
        BYTE4(v17[0]) = 1;
        UErrorCode v15 = U_ZERO_ERROR;
        int ScriptExtensions = uscript_getScriptExtensions(a2, (int *)v9, ScriptExtensions, (int *)&v15);
        UErrorCode v7 = v15;
        if (v15 != U_BUFFER_OVERFLOW_ERROR) {
          goto LABEL_8;
        }
      }

      UErrorCode v7 = U_MEMORY_ALLOCATION_ERROR;
    }

    else
    {
LABEL_8:
      if (v7 <= U_ZERO_ERROR)
      {
        if (ScriptExtensions >= 1)
        {
          int v10 = *a3;
          unsigned int v11 = (unsigned int *)v16;
          uint64_t v12 = ScriptExtensions;
          while (v10 <= 0)
          {
            unsigned int v14 = *v11++;
            unint64_t v13 = v14;
            if (v14 >= 0xE0)
            {
              UErrorCode v7 = U_ILLEGAL_ARGUMENT_ERROR;
              goto LABEL_16;
            }

            *(_DWORD *)((char *)this + ((v13 >> 3) & 0x1FFFFFFC)) |= 1 << v13;
            if (!--v12) {
              goto LABEL_17;
            }
          }
        }

        goto LABEL_17;
      }
    }

BOOL uhash_equalsScriptSet(_DWORD *a1, _DWORD *a2)
{
  if (*a1 != *a2) {
    return 0LL;
  }
  unint64_t v2 = 0LL;
  do
  {
    unint64_t v3 = v2;
    if (v2 == 6) {
      break;
    }
    int v4 = a1[v2 + 1];
    int v5 = a2[++v2];
  }

  while (v4 == v5);
  return v3 > 5;
}

uint64_t uhash_compareScriptSet(uint64_t a1, uint64_t a2, int8x8_t a3)
{
  uint64_t v3 = 0LL;
  int v4 = 0;
  do
  {
    if (*(_DWORD *)(a1 + v3))
    {
      a3.i32[0] = *(_DWORD *)(a1 + v3);
      a3 = vcnt_s8(a3);
      a3.i16[0] = vaddlv_u8((uint8x8_t)a3);
      v4 += a3.i32[0];
    }

    v3 += 4LL;
  }

  while (v3 != 28);
  uint64_t v5 = 0LL;
  int v6 = 0;
  do
  {
    if (*(_DWORD *)(a2 + v5))
    {
      a3.i32[0] = *(_DWORD *)(a2 + v5);
      a3 = vcnt_s8(a3);
      a3.i16[0] = vaddlv_u8((uint8x8_t)a3);
      v6 += a3.i32[0];
    }

    v5 += 4LL;
  }

  while (v5 != 28);
  unsigned int v7 = v4 - v6;
  if (!v7)
  {
    int v8 = 0;
    while (((*(_DWORD *)(a1 + 4LL * (v8 >> 5)) >> v8) & 1) == 0)
    {
      if (++v8 == 224)
      {
        int v8 = -1;
        break;
      }
    }

    unsigned int v7 = 0;
    while (((*(_DWORD *)(a2 + 4LL * (v7 >> 5)) >> v7) & 1) == 0)
    {
      if (++v7 == 224)
      {
        unsigned int v7 = -1;
        break;
      }
    }

    if (v8 >= 1 && v8 == v7)
    {
      while (v8 <= 0xDE)
      {
        int v9 = 0;
        unsigned int v7 = v8 + 1;
        int v10 = v8 + 1;
        do
        {
          if (v9 <= 0)
          {
            if (v10 <= 0xDF)
            {
            }

            else
            {
              int v9 = 1;
            }
          }

          ++v10;
        }

        while (v10 != 224);
        int v10 = -1;
LABEL_28:
        int v11 = 0;
        do
        {
          if (v11 <= 0)
          {
            if (v7 <= 0xDF)
            {
              if (((*(_DWORD *)(a2 + 4LL * (v7 >> 5)) >> v7) & 1) != 0) {
                goto LABEL_35;
              }
            }

            else
            {
              int v11 = 1;
            }
          }

          ++v7;
        }

        while (v7 != 224);
        unsigned int v7 = -1;
LABEL_35:
        if (v10 >= 1)
        {
          int v8 = v10;
          if (v10 == v7) {
            continue;
          }
        }

        goto LABEL_40;
      }

      LOBYTE(v1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = -1;
      LOBYTE(v7) = -1;
    }

    else
    {
      LOBYTE(v1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v8;
    }

uint64_t uhash_hashScriptSet(uint64_t a1)
{
  uint64_t v1 = 0LL;
  LODWORD(v2) = 0;
  do
  {
    uint64_t v2 = *(_DWORD *)(a1 + v1) ^ v2;
    v1 += 4LL;
  }

  while (v1 != 28);
  return v2;
}

void uhash_deleteScriptSet(void *a1)
{
  if (a1) {
    icu::UMemory::operator delete(a1);
  }
}

uint64_t icu::SearchIterator::SearchIterator(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = off_18971B688;
  *(void *)a1 = off_18972AEC0;
  *(_WORD *)(a1 + 32) = 2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  icu::UnicodeString::operator=((UChar **)(a1 + 24), (UChar **)(a2 + 24));
  int v4 = uprv_malloc(0x30uLL);
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 8);
  void v4[3] = *(void *)(v5 + 24);
  *((_DWORD *)v4 + 3) = *(_DWORD *)(v5 + 12);
  v4[4] = *(void *)(v5 + 32);
  *int v4 = *(void *)v5;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(v5 + 8);
  return a1;
}

void icu::SearchIterator::~SearchIterator(icu::SearchIterator *this)
{
  uint64_t v2 = off_18972AEC0;
  *(void *)this = off_18972AEC0;
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3) {
    uprv_free(v3);
  }
  icu::UnicodeString::~UnicodeString(v2, (icu::SearchIterator *)((char *)this + 24));
  icu::UObject::~UObject(this);
}

uint64_t icu::SearchIterator::setAttribute(uint64_t result, int a2, int a3, int *a4)
{
  if (*a4 <= 0)
  {
    if (a2 == 2)
    {
      if ((a3 - 3) <= 1)
      {
        *(_WORD *)(*(void *)(result + 8) + 14LL) = a3;
        return result;
      }

      *(_WORD *)(*(void *)(result + 8) + 14LL) = 0;
    }

    else if (a2 == 1)
    {
      *(_BYTE *)(*(void *)(result + 8) + 13LL) = a3 == 1;
    }

    else if (a2)
    {
      *a4 = 1;
    }

    else
    {
      *(_BYTE *)(*(void *)(result + 8) + 12LL) = a3 == 1;
    }
  }

  if (a3 == 5) {
    *a4 = 1;
  }
  return result;
}

uint64_t icu::SearchIterator::getAttribute(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 2:
      __int16 v3 = *(_WORD *)(*(void *)(a1 + 8) + 14LL);
      if (((v3 - 3) & 0xFFFE) != 0) {
        return 2;
      }
      return v3;
    case 1:
      int v2 = *(unsigned __int8 *)(*(void *)(a1 + 8) + 13LL);
      return v2 != 0;
    case 0:
      int v2 = *(unsigned __int8 *)(*(void *)(a1 + 8) + 12LL);
      return v2 != 0;
    default:
      return 0xFFFFFFFFLL;
  }

uint64_t icu::SearchIterator::getMatchedStart(icu::SearchIterator *this)
{
  return *(unsigned int *)(*((void *)this + 1) + 32LL);
}

uint64_t icu::SearchIterator::getMatchedLength(icu::SearchIterator *this)
{
  return *(unsigned int *)(*((void *)this + 1) + 36LL);
}

uint64_t icu::SearchIterator::getMatchedText(uint64_t this, icu::UnicodeString *a2)
{
  uint64_t v3 = *(void *)(this + 8);
  uint64_t v4 = *(unsigned int *)(v3 + 36);
  uint64_t v5 = *(int *)(v3 + 32);
  if ((_DWORD)v5 == -1 || (_DWORD)v4 == 0)
  {
    if ((*((_WORD *)a2 + 4) & 1) != 0) {
      __int16 v7 = 2;
    }
    else {
      __int16 v7 = *((_WORD *)a2 + 4) & 0x1F;
    }
    *((_WORD *)a2 + 4) = v7;
  }

  else
  {
    uint64_t v8 = *(void *)v3 + 2 * v5;
    icu::UnicodeString::unBogus((uint64_t)a2);
    unsigned int v9 = *((unsigned __int16 *)a2 + 4);
    int v10 = (__int16)v9;
    unsigned int v11 = v9 >> 5;
    if (v10 >= 0) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = *((unsigned int *)a2 + 3);
    }
    return icu::UnicodeString::doReplace((uint64_t)a2, 0LL, v12, v8, 0, v4);
  }

  return this;
}

uint64_t icu::SearchIterator::setBreakIterator(uint64_t this, icu::BreakIterator *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    *(void *)(*(void *)(this + 8) + 24LL) = a2;
    *(void *)(this + 16) = a2;
  }

  return this;
}

uint64_t icu::SearchIterator::getBreakIterator(icu::SearchIterator *this)
{
  return *((void *)this + 2);
}

icu::UnicodeString *icu::SearchIterator::setText( icu::UnicodeString *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    unsigned int v3 = *((unsigned __int16 *)a2 + 4);
    int v4 = (__int16)v3;
    unsigned int v5 = v3 >> 5;
    if (v4 < 0) {
      unsigned int v5 = *((_DWORD *)a2 + 3);
    }
    if (v5)
    {
      uint64_t v6 = (uint64_t)this;
      this = icu::UnicodeString::operator=((UChar **)this + 3, (UChar **)a2);
      __int16 v7 = *(_WORD *)(v6 + 32);
      if ((v7 & 0x11) != 0)
      {
        uint64_t v8 = 0LL;
      }

      else if ((v7 & 2) != 0)
      {
        uint64_t v8 = v6 + 34;
      }

      else
      {
        uint64_t v8 = *(void *)(v6 + 48);
      }

      uint64_t v9 = *(void *)(v6 + 8);
      *(void *)uint64_t v9 = v8;
      else {
        int v10 = *(unsigned __int16 *)(v6 + 32) >> 5;
      }
      *(_DWORD *)(v9 + 8) = v10;
    }

    else
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }

  return this;
}

uint64_t icu::SearchIterator::setText(uint64_t this, icu::CharacterIterator *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v4 = this;
    uint64_t v5 = this + 24;
    (*(void (**)(icu::CharacterIterator *, uint64_t))(*(void *)a2 + 208LL))(a2, this + 24);
    return (*(uint64_t (**)(uint64_t, uint64_t, UErrorCode *))(*(void *)v4 + 40LL))(v4, v5, a3);
  }

  return this;
}

uint64_t icu::SearchIterator::getText(icu::SearchIterator *this)
{
  return (uint64_t)this + 24;
}

BOOL icu::SearchIterator::operator==(void *a1, uint64_t a2)
{
  if (a1 == (void *)a2) {
    return 1LL;
  }
  if (a1[2] != *(void *)(a2 + 16)) {
    return 0LL;
  }
  uint64_t v4 = a1[1];
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(_DWORD *)(v4 + 32) != *(_DWORD *)(v5 + 32)) {
    return 0LL;
  }
  if (*(_DWORD *)(v4 + 36) != *(_DWORD *)(v5 + 36)) {
    return 0LL;
  }
  if (*(_DWORD *)(v4 + 8) != *(_DWORD *)(v5 + 8)) {
    return 0LL;
  }
  int v6 = (*(uint64_t (**)(void *))(*a1 + 32LL))(a1);
  uint64_t v7 = a1[1];
  uint64_t v8 = *(int *)(v7 + 8);
  return !(_DWORD)v8 || memcmp(*(const void **)v7, **(const void ***)(a2 + 8), 2 * v8) == 0;
}

uint64_t icu::SearchIterator::first(icu::SearchIterator *this, UErrorCode *a2)
{
  return (*(uint64_t (**)(icu::SearchIterator *, void, UErrorCode *))(*(void *)this + 80LL))( this,  0LL,  a2);
}

uint64_t icu::SearchIterator::following(icu::SearchIterator *this, uint64_t a2, UErrorCode *a3)
{
  return (*(uint64_t (**)(icu::SearchIterator *, uint64_t, UErrorCode *))(*(void *)this + 80LL))( this,  a2,  a3);
}

uint64_t icu::SearchIterator::last(icu::SearchIterator *this, UErrorCode *a2)
{
  return (*(uint64_t (**)(icu::SearchIterator *, void, UErrorCode *))(*(void *)this + 88LL))( this,  *(unsigned int *)(*((void *)this + 1) + 8LL),  a2);
}

uint64_t icu::SearchIterator::preceding(icu::SearchIterator *this, uint64_t a2, UErrorCode *a3)
{
  return (*(uint64_t (**)(icu::SearchIterator *, uint64_t, UErrorCode *))(*(void *)this + 88LL))( this,  a2,  a3);
}

uint64_t icu::SearchIterator::next(icu::SearchIterator *this, UErrorCode *a2)
{
  uint64_t v4 = (*(uint64_t (**)(icu::SearchIterator *))(*(void *)this + 32LL))(this);
  uint64_t v5 = *((void *)this + 1);
  uint64_t result = *(unsigned int *)(v5 + 32);
  int v7 = *(_DWORD *)(v5 + 36);
  *(_BYTE *)(v5 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0;
  if (*(_BYTE *)(v5 + 40))
  {
    int v8 = *(_DWORD *)(v5 + 8);
    BOOL v9 = (_DWORD)v4 == v8 || (_DWORD)result == v8;
    if (v9 || ((_DWORD)result != -1 ? (BOOL v10 = v7 + (int)result < v8) : (BOOL v10 = 1), !v10))
    {
      icu::SearchIterator::setMatchNotFound(this);
      return 0xFFFFFFFFLL;
    }
  }

  else
  {
    *(_BYTE *)(v5 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 1;
    if ((_DWORD)result != -1) {
      return result;
    }
  }

  if (v7 >= 1)
  {
    unsigned int v11 = v7 + v4;
    if (*(_BYTE *)(v5 + 12)) {
      uint64_t v4 = (v4 + 1);
    }
    else {
      uint64_t v4 = v11;
    }
  }

  return (*(uint64_t (**)(icu::SearchIterator *, uint64_t, UErrorCode *))(*(void *)this + 80LL))( this,  v4,  a2);
}

uint64_t icu::SearchIterator::setMatchNotFound(icu::SearchIterator *this)
{
  int v5 = 0;
  uint64_t v2 = *((void *)this + 1);
  if (*(_BYTE *)(v2 + 40)) {
    uint64_t v3 = *(unsigned int *)(v2 + 8);
  }
  else {
    uint64_t v3 = 0LL;
  }
  return (*(uint64_t (**)(icu::SearchIterator *, uint64_t, int *))(*(void *)this + 24LL))(this, v3, &v5);
}

uint64_t icu::SearchIterator::previous(icu::SearchIterator *this, UErrorCode *a2)
{
  uint64_t v6 = *((void *)this + 1);
  if (*(_BYTE *)(v6 + 41))
  {
    uint64_t v7 = *(unsigned int *)(v6 + 8);
    *(_WORD *)(v6 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
    (*(void (**)(icu::SearchIterator *, uint64_t, UErrorCode *))(*(void *)this + 24LL))(this, v7, a2);
  }

  else
  {
    uint64_t v7 = (*(uint64_t (**)(icu::SearchIterator *))(*(void *)this + 32LL))(this);
  }

  uint64_t v8 = *((void *)this + 1);
  uint64_t v2 = *(unsigned int *)(v8 + 32);
  if (*(_BYTE *)(v8 + 40))
  {
    *(_BYTE *)(v8 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
    if ((_DWORD)v2 != -1) {
      return v2;
    }
  }

  else
  {
    if ((_DWORD)v7) {
      BOOL v9 = (_DWORD)v2 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      icu::SearchIterator::setMatchNotFound(this);
      return 0xFFFFFFFFLL;
    }

    if ((_DWORD)v2 != -1)
    {
      if (*(_BYTE *)(v8 + 12)) {
        uint64_t v2 = (v2 + *(_DWORD *)(v8 + 36) - 2);
      }
      BOOL v10 = *(uint64_t (**)(icu::SearchIterator *, uint64_t, UErrorCode *))(*(void *)this + 88LL);
      unsigned int v11 = this;
      return v10(v11, v2, a2);
    }
  }

  BOOL v10 = *(uint64_t (**)(icu::SearchIterator *, uint64_t, UErrorCode *))(*(void *)this + 88LL);
  unsigned int v11 = this;
  uint64_t v2 = v7;
  return v10(v11, v2, a2);
}

uint64_t icu::SearchIterator::reset(icu::SearchIterator *this)
{
  int v4 = 0;
  icu::SearchIterator::setMatchNotFound(this);
  uint64_t result = (*(uint64_t (**)(icu::SearchIterator *, void, int *))(*(void *)this + 24LL))(this, 0LL, &v4);
  uint64_t v3 = *((void *)this + 1);
  *(_DWORD *)(v3 + 12) = 0;
  *(_WORD *)(v3 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 257;
  return result;
}

icu::SearchIterator *icu::SearchIterator::SearchIterator(icu::SearchIterator *this)
{
  *(void *)this = off_18972AEC0;
  *((void *)this + 3) = off_18971B688;
  *((_WORD *)this + 16) = 2;
  uint64_t v2 = uprv_malloc(0x30uLL);
  v2[3] = 0LL;
  *((_WORD *)v2 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 257;
  v2[4] = 0xFFFFFFFFLL;
  *uint64_t v2 = 0LL;
  v2[1] = 0LL;
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v2;
  *((void *)this + 2) = 0LL;
  return this;
}

icu::SearchIterator *icu::SearchIterator::SearchIterator( icu::SearchIterator *this, UChar **a2, icu::BreakIterator *a3)
{
  *(void *)this = off_18972AEC0;
  *((void *)this + 2) = a3;
  icu::UnicodeString::UnicodeString((icu::SearchIterator *)((char *)this + 24), a2);
  int v5 = uprv_malloc(0x30uLL);
  uint64_t v6 = 0LL;
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v5;
  void v5[3] = 0LL;
  *((_DWORD *)v5 + 3) = 0;
  *((_WORD *)v5 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 257;
  _OWORD v5[4] = 0xFFFFFFFFLL;
  __int16 v7 = *((_WORD *)this + 16);
  if ((v7 & 0x11) == 0)
  {
    if ((v7 & 2) != 0) {
      uint64_t v6 = (char *)this + 34;
    }
    else {
      uint64_t v6 = (char *)*((void *)this + 6);
    }
  }

  *int v5 = v6;
  unsigned int v8 = *((unsigned __int16 *)a2 + 4);
  int v9 = (__int16)v8;
  unsigned int v10 = v8 >> 5;
  if (v9 < 0) {
    unsigned int v10 = *((_DWORD *)a2 + 3);
  }
  *((_DWORD *)v5 + 2) = v10;
  return this;
}

icu::SearchIterator *icu::SearchIterator::SearchIterator( icu::SearchIterator *this, icu::CharacterIterator *a2, icu::BreakIterator *a3)
{
  *(void *)this = off_18972AEC0;
  *((void *)this + 2) = a3;
  *((void *)this + 3) = off_18971B688;
  uint64_t v6 = (char *)this + 24;
  *((_WORD *)this + 16) = 2;
  __int16 v7 = uprv_malloc(0x30uLL);
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v7;
  void v7[3] = 0LL;
  *((_DWORD *)v7 + 3) = 0;
  *((_WORD *)v7 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 257;
  v7[4] = 0xFFFFFFFFLL;
  (*(void (**)(icu::CharacterIterator *, char *))(*(void *)a2 + 208LL))(a2, v6);
  unsigned int v8 = 0LL;
  __int16 v9 = *((_WORD *)this + 16);
  if ((v9 & 0x11) == 0)
  {
    if ((v9 & 2) != 0) {
      unsigned int v8 = (char *)this + 34;
    }
    else {
      unsigned int v8 = (char *)*((void *)this + 6);
    }
  }

  uint64_t v10 = *((void *)this + 1);
  *(void *)uint64_t v10 = v8;
  else {
    int v11 = *((unsigned __int16 *)this + 16) >> 5;
  }
  *(_DWORD *)(v10 + 8) = v11;
  *((void *)this + 2) = a3;
  return this;
}

uint64_t icu::SearchIterator::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    icu::UnicodeString::operator=((UChar **)(a1 + 24), (UChar **)(a2 + 24));
    uint64_t v4 = *(void *)(a2 + 8);
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(v5 + 24) = *(void *)(v4 + 24);
    *(_DWORD *)(v5 + 12) = *(_DWORD *)(v4 + 12);
    *(void *)(v5 + 32) = *(void *)(v4 + 32);
    *(void *)uint64_t v5 = *(void *)v4;
    *(_DWORD *)(v5 + 8) = *(_DWORD *)(v4 + 8);
  }

  return a1;
}

uint64_t icu::SearchIterator::setMatchLength(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 8) + 36LL) = a2;
  return this;
}

uint64_t icu::SearchIterator::setMatchStart(uint64_t this, int a2)
{
  *(_DWORD *)(*(void *)(this + 8) + 32LL) = a2;
  return this;
}

void *icu::SelectFormat::getStaticClassID(icu::SelectFormat *this)
{
  return &unk_18C53587D;
}

void *icu::SelectFormat::getDynamicClassID(icu::SelectFormat *this)
{
  return &unk_18C53587D;
}

icu::SelectFormat *icu::SelectFormat::SelectFormat(icu::SelectFormat *this, UChar **a2, UErrorCode *a3)
{
  uint64_t v6 = (void *)icu::Format::Format((uint64_t)this);
  *uint64_t v6 = off_18972AF58;
  icu::MessagePattern::MessagePattern((icu::MessagePattern *)(v6 + 41), a3);
  icu::SelectFormat::applyPattern(this, a2, a3);
  return this;
}

icu::MessagePattern *icu::SelectFormat::applyPattern(icu::MessagePattern *this, UChar **a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v4 = (uint64_t)this + 328;
    this = icu::MessagePattern::parseSelectStyle((icu::MessagePattern *)((char *)this + 328), a2, 0LL, a3);
  }

  return this;
}

icu::SelectFormat *icu::SelectFormat::SelectFormat(icu::SelectFormat *this, const icu::SelectFormat *a2)
{
  uint64_t v4 = (void *)icu::Format::Format((uint64_t)this, (uint64_t)a2);
  *uint64_t v4 = off_18972AF58;
  icu::MessagePattern::MessagePattern((icu::MessagePattern *)(v4 + 41), (const icu::SelectFormat *)((char *)a2 + 328));
  return this;
}

{
  void *v4;
  uint64_t v4 = (void *)icu::Format::Format((uint64_t)this, (uint64_t)a2);
  *uint64_t v4 = off_18972AF58;
  icu::MessagePattern::MessagePattern((icu::MessagePattern *)(v4 + 41), (const icu::SelectFormat *)((char *)a2 + 328));
  return this;
}

void icu::SelectFormat::~SelectFormat(icu::SelectFormat *this)
{
  *(void *)this = off_18972AF58;
  icu::MessagePattern::~MessagePattern((icu::SelectFormat *)((char *)this + 328));
  icu::Format::~Format(this);
}

{
  *(void *)this = off_18972AF58;
  icu::MessagePattern::~MessagePattern((icu::SelectFormat *)((char *)this + 328));
  icu::Format::~Format(this);
}

{
  void *v2;
  *(void *)this = off_18972AF58;
  icu::MessagePattern::~MessagePattern((icu::SelectFormat *)((char *)this + 328));
  icu::Format::~Format(this);
  icu::UMemory::operator delete(v2);
}

icu::UnicodeString *icu::SelectFormat::format( icu::SelectFormat *this, const icu::Formattable *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    if (icu::Formattable::getType(a2) == 3)
    {
      String = (const icu::UnicodeString *)icu::Formattable::getString(a2, a5);
      return icu::SelectFormat::format(this, String, a3, v10, a5);
    }

    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
  }

  return a3;
}

icu::UnicodeString *icu::SelectFormat::format( icu::SelectFormat *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  unsigned int v10 = *((unsigned __int16 *)a2 + 4);
  if ((v10 & 0x11) != 0)
  {
    int v11 = 0LL;
  }

  else if ((v10 & 2) != 0)
  {
    int v11 = (unsigned __int16 *)((char *)a2 + 10);
  }

  else
  {
    int v11 = (unsigned __int16 *)*((void *)a2 + 3);
  }

  int v12 = (__int16)v10;
  int v13 = v10 >> 5;
  if (v12 >= 0) {
    int v14 = v13;
  }
  else {
    int v14 = *((_DWORD *)a2 + 3);
  }
  if (!*((_DWORD *)this + 106))
  {
    *a5 = U_INVALID_STATE_ERROR;
    return a3;
  }

  int SubMessage = (const icu::MessagePattern *)icu::SelectFormat::findSubMessage( (icu::SelectFormat *)((char *)this + 328),  0LL,  (uint64_t)a2,  (const icu::UnicodeString *)a5,  v15);
  if (*((_DWORD *)this + 84) != 1)
  {
    uint64_t v18 = *((void *)this + 52);
    uint64_t v19 = v18 + 16LL * (int)SubMessage;
    int v20 = *(_DWORD *)(v19 + 4) + *(unsigned __int16 *)(v19 + 8);
    int v21 = *(_DWORD *)(v19 + 12);
    icu::UnicodeString::doAppend( (uint64_t)a3,  (icu::SelectFormat *)((char *)this + 344),  v20,  (*(_DWORD *)(v18 + 16LL * v21 + 4) - v20));
    return a3;
  }

  return (icu::UnicodeString *)icu::MessageImpl::appendSubMessageWithoutSkipSyntax( (icu::SelectFormat *)((char *)this + 328),  SubMessage,  a3,  v17);
}

uint64_t icu::SelectFormat::findSubMessage( icu::SelectFormat *this, const icu::MessagePattern *a2, uint64_t a3, const icu::UnicodeString *a4, UErrorCode *a5)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  int v7 = (int)a2;
  memset(v16, 0, sizeof(v16));
  UErrorCode v15 = "o";
  icu::UnicodeString::UnicodeString(v16, 0LL, &v15);
  uint64_t v5 = 0LL;
  int v9 = *((_DWORD *)this + 24);
  unsigned int v10 = (_DWORD *)*((void *)this + 11);
  do
  {
    int v11 = &v10[4 * v7];
    unsigned int v10 = (_DWORD *)*v11;
    if ((_DWORD)v10 == 6) {
      break;
    }
    uint64_t v12 = v7 + 1LL;
    if (sub_18090FD7C((uint64_t)this, (uint64_t)v11, a3))
    {
      uint64_t v5 = v12;
      break;
    }

    if (!(_DWORD)v5)
    {
      else {
        uint64_t v5 = 0LL;
      }
    }

    unsigned int v10 = (_DWORD *)*((void *)this + 11);
    int v13 = v10[4 * v12 + 3];
    int v7 = v13 + 1;
  }

  while (v13 + 1 < v9);
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v16);
  return v5;
}

icu::UnicodeString *icu::SelectFormat::toPattern(icu::SelectFormat *this, icu::UnicodeString *a2)
{
  if (*((_DWORD *)this + 106))
  {
    unsigned int v3 = *((unsigned __int16 *)this + 176);
    int v4 = (__int16)v3;
    unsigned int v5 = v3 >> 5;
    if (v4 >= 0) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = *((unsigned int *)this + 89);
    }
    icu::UnicodeString::doAppend((uint64_t)a2, (icu::SelectFormat *)((char *)this + 344), 0, v6);
  }

  else
  {
    icu::UnicodeString::setToBogus(a2);
  }

  return a2;
}

uint64_t *icu::SelectFormat::clone@<X0>( icu::SelectFormat *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x1C8, a2);
  unsigned int v5 = v4;
  if (v4)
  {
    icu::Format::Format((uint64_t)v4, (uint64_t)this);
    *unsigned int v5 = (uint64_t)off_18972AF58;
    icu::MessagePattern::MessagePattern((icu::MessagePattern *)(v5 + 41), (icu::SelectFormat *)((char *)this + 328));
  }

  return v5;
}

uint64_t icu::SelectFormat::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2) {
    icu::MessagePattern::operator=(a1 + 328, a2 + 328);
  }
  return a1;
}

uint64_t icu::SelectFormat::operator==(void *a1, void *a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  uint64_t result = icu::Format::operator==(a1, a2);
  if ((_DWORD)result) {
    return icu::MessagePattern::operator==((uint64_t)(a1 + 41), (uint64_t)(a2 + 41));
  }
  return result;
}

uint64_t icu::SelectFormat::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24LL))(a1) ^ 1;
}

void icu::SelectFormat::parseObject( icu::SelectFormat *this, const icu::UnicodeString *a2, icu::Formattable *a3, icu::ParsePosition *a4)
{
  *((_DWORD *)a4 + 3) = *((_DWORD *)a4 + 2);
}

void *icu::SharedBreakIterator::SharedBreakIterator(void *this, icu::BreakIterator *a2)
{
  *this = off_18972AFC8;
  this[1] = 0LL;
  this[2] = 0LL;
  this[3] = a2;
  return this;
}

{
  *this = off_18972AFC8;
  this[1] = 0LL;
  this[2] = 0LL;
  this[3] = a2;
  return this;
}

void icu::SharedBreakIterator::~SharedBreakIterator(icu::SharedBreakIterator *this)
{
  *(void *)this = off_18972AFC8;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::SharedObject::~SharedObject(this);
}

{
  uint64_t v2;
  *(void *)this = off_18972AFC8;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::SharedObject::~SharedObject(this);
}

{
  uint64_t v2;
  void *v3;
  *(void *)this = off_18972AFC8;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::SharedObject::~SharedObject(this);
  icu::UMemory::operator delete(v3);
}

void *icu::SimpleTimeZone::getStaticClassID(icu::SimpleTimeZone *this)
{
  return &unk_18C535880;
}

void *icu::SimpleTimeZone::getDynamicClassID(icu::SimpleTimeZone *this)
{
  return &unk_18C535880;
}

double icu::SimpleTimeZone::SimpleTimeZone(icu::SimpleTimeZone *this, int a2, UChar **a3)
{
  int v4 = icu::BasicTimeZone::BasicTimeZone(this, a3);
  *(void *)int v4 = off_18972B008;
  *((_WORD *)v4 + 36) = 0;
  *((_BYTE *)v4 + 74) = 0;
  *((_DWORD *)v4 + 23) = 0;
  *((_DWORD *)v4 + 24) = 0;
  *(void *)((char *)v4 + 76) = 0LL;
  *(void *)((char *)v4 + 83) = 0LL;
  *((_DWORD *)v4 + 25) = a2;
  *((_BYTE *)v4 + 104) = 0;
  *(void *)((char *)v4 + 108) = 0x100000001LL;
  *((_DWORD *)v4 + 29) = 3600000;
  *((_BYTE *)v4 + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  double result = 0.0;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  return result;
}

{
  icu::TimeZone *v4;
  double result;
  int v4 = icu::BasicTimeZone::BasicTimeZone(this, a3);
  *(void *)int v4 = off_18972B008;
  *((_WORD *)v4 + 36) = 0;
  *((_BYTE *)v4 + 74) = 0;
  *((_DWORD *)v4 + 23) = 0;
  *((_DWORD *)v4 + 24) = 0;
  *(void *)((char *)v4 + 76) = 0LL;
  *(void *)((char *)v4 + 83) = 0LL;
  *((_DWORD *)v4 + 25) = a2;
  *((_BYTE *)v4 + 104) = 0;
  *(void *)((char *)v4 + 108) = 0x100000001LL;
  *((_DWORD *)v4 + 29) = 3600000;
  *((_BYTE *)v4 + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  double result = 0.0;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  return result;
}

double icu::SimpleTimeZone::clearTransitionRules(icu::SimpleTimeZone *this)
{
  *((_BYTE *)this + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  double result = 0.0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  return result;
}

icu::SimpleTimeZone *icu::SimpleTimeZone::SimpleTimeZone( icu::SimpleTimeZone *this, int a2, UChar **a3, char a4, char a5, char a6, int a7, char a8, char a9, char a10, int a11, UErrorCode *a12)
{
  uint64_t v18 = icu::BasicTimeZone::BasicTimeZone(this, a3);
  *(void *)uint64_t v18 = off_18972B008;
  *((_BYTE *)v18 + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  *((_OWORD *)v18 + 8) = 0u;
  *((_OWORD *)v18 + 9) = 0u;
  *((_DWORD *)v18 + 24) = 0;
  *((_DWORD *)v18 + 25) = a2;
  *((_BYTE *)v18 + 72) = a4;
  *((_BYTE *)v18 + 73) = a5;
  *((_BYTE *)v18 + 74) = a6;
  *((_BYTE *)v18 + 88) = a8;
  *((_BYTE *)v18 + 89) = a9;
  *((_BYTE *)v18 + 9icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = a10;
  *((void *)v18 + 1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
  *((_DWORD *)v18 + 19) = a7;
  *((_DWORD *)v18 + 29) = 3600000;
  *((_DWORD *)v18 + 23) = a11;
  *(void *)((char *)v18 + 108) = 0x100000001LL;
  icu::SimpleTimeZone::decodeStartRule((uint64_t)v18, a12);
  icu::SimpleTimeZone::decodeEndRule((uint64_t)this, a12);
  return this;
}

{
  return icu::SimpleTimeZone::SimpleTimeZone(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t icu::SimpleTimeZone::construct( uint64_t a1, int a2, char a3, char a4, char a5, int a6, int a7, char a8, char a9, char a10, int a11, int a12, int a13, UErrorCode *a14)
{
  *(_DWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 10icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = a2;
  *(_BYTE *)(a1 + 72) = a3;
  *(_BYTE *)(a1 + 73) = a4;
  *(_BYTE *)(a1 + 74) = a5;
  *(_DWORD *)(a1 + 76) = a6;
  *(_DWORD *)(a1 + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = a7;
  *(_BYTE *)(a1 + 88) = a8;
  *(_BYTE *)(a1 + 89) = a9;
  *(_BYTE *)(a1 + 9icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = a10;
  *(_DWORD *)(a1 + 84) = a12;
  *(_DWORD *)(a1 + 116) = a13;
  *(_DWORD *)(a1 + 92) = a11;
  *(void *)(a1 + 108) = 0x100000001LL;
  icu::SimpleTimeZone::decodeStartRule(a1, a14);
  uint64_t result = icu::SimpleTimeZone::decodeEndRule(a1, a14);
  if (!a13) {
    *a14 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return result;
}

icu::SimpleTimeZone *icu::SimpleTimeZone::SimpleTimeZone( icu::SimpleTimeZone *this, int a2, UChar **a3, char a4, char a5, char a6, int a7, char a8, char a9, char a10, int a11, int a12, UErrorCode *a13)
{
  uint64_t v18 = icu::BasicTimeZone::BasicTimeZone(this, a3);
  *(void *)uint64_t v18 = off_18972B008;
  *((_BYTE *)v18 + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  *((_OWORD *)v18 + 8) = 0u;
  *((_OWORD *)v18 + 9) = 0u;
  icu::SimpleTimeZone::construct((uint64_t)v18, a2, a4, a5, a6, a7, 0, a8, a9, a10, a11, 0, a12, a13);
  return this;
}

{
  icu::TimeZone *v18;
  uint64_t v18 = icu::BasicTimeZone::BasicTimeZone(this, a3);
  *(void *)uint64_t v18 = off_18972B008;
  *((_BYTE *)v18 + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  *((_OWORD *)v18 + 8) = 0u;
  *((_OWORD *)v18 + 9) = 0u;
  icu::SimpleTimeZone::construct((uint64_t)v18, a2, a4, a5, a6, a7, 0, a8, a9, a10, a11, 0, a12, a13);
  return this;
}

icu::BasicTimeZone *icu::SimpleTimeZone::SimpleTimeZone( icu::BasicTimeZone *a1, int a2, UChar **a3, char a4, char a5, char a6, int a7, int a8, char a9, char a10, char a11, int a12, int a13, int a14, UErrorCode *a15)
{
  uint64_t v19 = icu::BasicTimeZone::BasicTimeZone(a1, a3);
  *(void *)uint64_t v19 = off_18972B008;
  *((_BYTE *)v19 + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  *((_OWORD *)v19 + 8) = 0u;
  *((_OWORD *)v19 + 9) = 0u;
  icu::SimpleTimeZone::construct((uint64_t)v19, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
  return a1;
}

{
  icu::TimeZone *v19;
  uint64_t v19 = icu::BasicTimeZone::BasicTimeZone(a1, a3);
  *(void *)uint64_t v19 = off_18972B008;
  *((_BYTE *)v19 + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  *((_OWORD *)v19 + 8) = 0u;
  *((_OWORD *)v19 + 9) = 0u;
  icu::SimpleTimeZone::construct((uint64_t)v19, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
  return a1;
}

uint64_t icu::SimpleTimeZone::decodeRules(icu::SimpleTimeZone *this, UErrorCode *a2)
{
  return icu::SimpleTimeZone::decodeEndRule((uint64_t)this, a2);
}

void icu::SimpleTimeZone::~SimpleTimeZone(icu::SimpleTimeZone *this)
{
  *(void *)this = off_18972B008;
  icu::SimpleTimeZone::deleteTransitionRules(this);
  icu::BasicTimeZone::~BasicTimeZone(this);
}

{
  *(void *)this = off_18972B008;
  icu::SimpleTimeZone::deleteTransitionRules(this);
  icu::BasicTimeZone::~BasicTimeZone(this);
}

{
  void *v2;
  *(void *)this = off_18972B008;
  icu::SimpleTimeZone::deleteTransitionRules(this);
  icu::BasicTimeZone::~BasicTimeZone(this);
  icu::UMemory::operator delete(v2);
}

double icu::SimpleTimeZone::deleteTransitionRules(icu::SimpleTimeZone *this)
{
  unsigned int v3 = (_OWORD *)((char *)this + 128);
  uint64_t v2 = *((void *)this + 16);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v4 = *((void *)this + 17);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = *((void *)this + 18);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  uint64_t v6 = *((void *)this + 19);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  *((_BYTE *)this + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  double result = 0.0;
  _OWORD *v3 = 0u;
  v3[1] = 0u;
  return result;
}

uint64_t icu::SimpleTimeZone::SimpleTimeZone(icu::SimpleTimeZone *this, UChar **a2)
{
  unsigned int v3 = icu::BasicTimeZone::BasicTimeZone(this, a2);
  *(void *)unsigned int v3 = off_18972B008;
  return icu::SimpleTimeZone::operator=((uint64_t)v3, (uint64_t)a2);
}

{
  icu::TimeZone *v3;
  unsigned int v3 = icu::BasicTimeZone::BasicTimeZone(this, a2);
  *(void *)unsigned int v3 = off_18972B008;
  return icu::SimpleTimeZone::operator=((uint64_t)v3, (uint64_t)a2);
}

uint64_t icu::SimpleTimeZone::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    icu::TimeZone::operator=(a1, a2);
    *(_DWORD *)(a1 + 10icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = *(_DWORD *)(a2 + 100);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 73);
    *(void *)(a1 + 76) = *(void *)(a2 + 76);
    *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
    *(_BYTE *)(a1 + 9icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = *(_BYTE *)(a2 + 90);
    *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
    *(void *)(a1 + 108) = *(void *)(a2 + 108);
    *(void *)(a1 + 92) = *(void *)(a2 + 92);
    *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    *(_BYTE *)(a1 + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
  }

  return a1;
}

uint64_t icu::SimpleTimeZone::operator==(uint64_t a1, void *a2)
{
  if ((void *)a1 == a2) {
    return 1LL;
  }
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t result = sub_1807F874C(*(void *)(*(void *)a1 - 8LL), *(void *)(*a2 - 8LL));
  if ((_DWORD)result)
  {
    uint64_t result = icu::TimeZone::operator==(a1, (uint64_t)a2);
    if ((_DWORD)result) {
      return (*(unsigned int (**)(uint64_t, void *))(*(void *)a1 + 88LL))(a1, a2) != 0;
    }
  }

  return result;
}

icu::BasicTimeZone *icu::SimpleTimeZone::clone@<X0>( UChar **this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::BasicTimeZone *)icu::UMemory::operator new(a3, (icu::UMemory *)0xA0, a2);
  if (result)
  {
    uint64_t v5 = icu::BasicTimeZone::BasicTimeZone(result, this);
    *(void *)uint64_t v5 = off_18972B008;
    return (icu::BasicTimeZone *)icu::SimpleTimeZone::operator=((uint64_t)v5, (uint64_t)this);
  }

  return result;
}

uint64_t icu::SimpleTimeZone::setStartYear(uint64_t this, int a2)
{
  *(_DWORD *)(this + 96) = a2;
  *(_BYTE *)(this + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  return this;
}

uint64_t icu::SimpleTimeZone::setStartRule( uint64_t a1, char a2, char a3, char a4, int a5, int a6, UErrorCode *a7)
{
  *(_BYTE *)(a1 + 72) = a2;
  *(_BYTE *)(a1 + 73) = a3;
  *(_BYTE *)(a1 + 74) = a4;
  *(_DWORD *)(a1 + 76) = a5;
  *(_DWORD *)(a1 + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = a6;
  uint64_t result = icu::SimpleTimeZone::decodeStartRule(a1, a7);
  *(_BYTE *)(a1 + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  return result;
}

uint64_t icu::SimpleTimeZone::decodeStartRule(uint64_t this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    int v2 = *(char *)(this + 73);
    if (!*(_BYTE *)(this + 73))
    {
      *(_BYTE *)(this + 104) = 0;
      return this;
    }

    int v3 = *(unsigned __int8 *)(this + 89);
    *(_BYTE *)(this + 104) = *(_BYTE *)(this + 89) != 0;
    if (v3 && !*(_DWORD *)(this + 116)) {
      *(_DWORD *)(this + 116) = 3600000;
    }
    unint64_t v4 = *(unsigned __int8 *)(this + 72);
    if (v4 >= 0xC || *(_DWORD *)(this + 76) > 0x5265C00u || *(_DWORD *)(this + 80) >= 3u) {
      goto LABEL_24;
    }
    int v5 = *(char *)(this + 74);
    if (*(_BYTE *)(this + 74))
    {
      if (v5 <= 0)
      {
        int v7 = -v5;
        *(_BYTE *)(this + 74) = -(char)v5;
        if (v2 <= 0)
        {
          int v2 = -v2;
          *(_BYTE *)(this + 73) = v2;
          int v6 = 4;
        }

        else
        {
          int v6 = 3;
        }
      }

      else
      {
        int v6 = 2;
        LOBYTE(v7) = *(_BYTE *)(this + 74);
      }

      *(_DWORD *)(this + 108) = v6;
      if (v5 >= 1)
      {
        goto LABEL_24;
      }
    }

    else
    {
      *(_DWORD *)(this + 108) = 1;
    }

uint64_t icu::SimpleTimeZone::setStartRule(uint64_t a1, char a2, char a3, int a4, int a5, UErrorCode *a6)
{
  *(_BYTE *)(a1 + 72) = a2;
  *(_BYTE *)(a1 + 73) = a3;
  *(_BYTE *)(a1 + 74) = 0;
  *(_DWORD *)(a1 + 76) = a4;
  *(_DWORD *)(a1 + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = a5;
  uint64_t result = icu::SimpleTimeZone::decodeStartRule(a1, a6);
  *(_BYTE *)(a1 + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  return result;
}

uint64_t icu::SimpleTimeZone::setStartRule( uint64_t a1, char a2, int a3, char a4, int a5, int a6, int a7, UErrorCode *a8)
{
  *(_BYTE *)(a1 + 72) = a2;
  if (a7) {
    LOBYTE(v9) = a3;
  }
  else {
    int v9 = -a3;
  }
  *(_BYTE *)(a1 + 73) = v9;
  *(_BYTE *)(a1 + 74) = -a4;
  *(_DWORD *)(a1 + 76) = a5;
  *(_DWORD *)(a1 + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = a6;
  uint64_t result = icu::SimpleTimeZone::decodeStartRule(a1, a8);
  *(_BYTE *)(a1 + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  return result;
}

uint64_t icu::SimpleTimeZone::setEndRule( uint64_t a1, char a2, char a3, char a4, int a5, int a6, UErrorCode *a7)
{
  *(_BYTE *)(a1 + 88) = a2;
  *(_BYTE *)(a1 + 89) = a3;
  *(_BYTE *)(a1 + 9icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = a4;
  *(_DWORD *)(a1 + 92) = a5;
  *(_DWORD *)(a1 + 84) = a6;
  uint64_t result = icu::SimpleTimeZone::decodeEndRule(a1, a7);
  *(_BYTE *)(a1 + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  return result;
}

uint64_t icu::SimpleTimeZone::decodeEndRule(uint64_t this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    if (*(_BYTE *)(this + 73))
    {
      int v2 = *(unsigned __int8 *)(this + 89);
      *(_BYTE *)(this + 104) = *(_BYTE *)(this + 89) != 0;
      if (!v2) {
        return this;
      }
      if (!*(_DWORD *)(this + 116)) {
        *(_DWORD *)(this + 116) = 3600000;
      }
    }

    else
    {
      *(_BYTE *)(this + 104) = 0;
      LOBYTE(v2) = *(_BYTE *)(this + 89);
      if (!(_BYTE)v2) {
        return this;
      }
    }

    unint64_t v3 = *(unsigned __int8 *)(this + 88);
    if (v3 > 0xB || *(_DWORD *)(this + 92) > 0x5265C00u || *(_DWORD *)(this + 84) > 2u) {
      goto LABEL_24;
    }
    int v4 = *(char *)(this + 90);
    if (*(_BYTE *)(this + 90))
    {
      if (v4 <= 0)
      {
        int v6 = -v4;
        *(_BYTE *)(this + 9icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = -(char)v4;
        if ((char)v2 <= 0)
        {
          *(_BYTE *)(this + 89) = -(char)v2;
          int v5 = 4;
        }

        else
        {
          int v5 = 3;
        }
      }

      else
      {
        int v5 = 2;
        LOBYTE(v6) = *(_BYTE *)(this + 90);
      }

      *(_DWORD *)(this + 112) = v5;
      if (v4 >= 1)
      {
        goto LABEL_24;
      }
    }

    else
    {
      *(_DWORD *)(this + 112) = 1;
    }

    int v7 = *(char *)(this + 89);
    if (v7 >= 1 && v7 <= icu::SimpleTimeZone::STATICMONTHLENGTH[v3]) {
      return this;
    }
LABEL_24:
    *a2 = U_ILLEGAL_ARGUMENT_ERROR;
  }

  return this;
}

uint64_t icu::SimpleTimeZone::setEndRule(uint64_t a1, char a2, char a3, int a4, int a5, UErrorCode *a6)
{
  *(_BYTE *)(a1 + 88) = a2;
  *(_BYTE *)(a1 + 89) = a3;
  *(_BYTE *)(a1 + 9icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  *(_DWORD *)(a1 + 92) = a4;
  *(_DWORD *)(a1 + 84) = a5;
  uint64_t result = icu::SimpleTimeZone::decodeEndRule(a1, a6);
  *(_BYTE *)(a1 + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  return result;
}

uint64_t icu::SimpleTimeZone::setEndRule( uint64_t a1, char a2, int a3, char a4, int a5, int a6, int a7, UErrorCode *a8)
{
  *(_BYTE *)(a1 + 88) = a2;
  if (a7) {
    LOBYTE(v9) = a3;
  }
  else {
    int v9 = -a3;
  }
  *(_BYTE *)(a1 + 89) = v9;
  *(_BYTE *)(a1 + 9icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = -a4;
  *(_DWORD *)(a1 + 92) = a5;
  *(_DWORD *)(a1 + 84) = a6;
  uint64_t result = icu::SimpleTimeZone::decodeEndRule(a1, a8);
  *(_BYTE *)(a1 + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  return result;
}

uint64_t icu::SimpleTimeZone::getOffset( icu::SimpleTimeZone *this, unsigned __int8 a2, int a3, unsigned int a4, int a5, unsigned __int8 a6, int a7, UErrorCode *a8)
{
  if (a4 < 0xC) {
    return (*(uint64_t (**)(icu::SimpleTimeZone *))(*(void *)this + 40LL))(this);
  }
  *a8 = U_ILLEGAL_ARGUMENT_ERROR;
  return 0LL;
}

uint64_t icu::SimpleTimeZone::getOffset( icu::SimpleTimeZone *this, unsigned __int8 a2, int a3, unsigned int a4, int a5, unsigned __int8 a6, int a7, int a8, UErrorCode *a9)
{
  if (a4 < 0xC) {
    return (*(uint64_t (**)(icu::SimpleTimeZone *))(*(void *)this + 168LL))(this);
  }
  *a9 = U_ILLEGAL_ARGUMENT_ERROR;
  return 0xFFFFFFFFLL;
}

uint64_t icu::SimpleTimeZone::getOffset( icu::SimpleTimeZone *this, unsigned int a2, int a3, unsigned int a4, int a5, char a6, unsigned int a7, int a8, int a9, UErrorCode *a10)
{
  if (a2 > 1
    || a4 > 0xB
    || a5 < 1
    || ((a9 - 32) >= 0xFFFFFFFC ? (BOOL v12 = (a8 - 32) >= 0xFFFFFFFC) : (BOOL v12 = 0),
        v12 ? (BOOL v13 = a7 > 0x5265BFF) : (BOOL v13 = 1),
        v13 || (a6 - 8) < 0xF9u || a5 > a8))
  {
    *a10 = U_ILLEGAL_ARGUMENT_ERROR;
    return 0xFFFFFFFFLL;
  }

  else
  {
    uint64_t v10 = *((unsigned int *)this + 25);
    if (*((_BYTE *)this + 104) && a2 == 1 && *((_DWORD *)this + 24) <= a3)
    {
      int v15 = *((char *)this + 72);
      int v16 = *((char *)this + 88);
      if (*((_DWORD *)this + 20) == 2) {
        int v17 = -(int)v10;
      }
      else {
        int v17 = 0;
      }
      char v18 = a5;
      unsigned int v19 = a6;
      char v30 = a4;
      int v29 = (char)a8;
      int v20 = icu::SimpleTimeZone::compareToRule( a4,  (char)a8,  a9,  a5,  a6,  a7,  v17,  *((_DWORD *)this + 27),  v15,  *((_BYTE *)this + 74),  *((_BYTE *)this + 73),  *((_DWORD *)this + 19));
      unsigned int v21 = 0;
      if (v15 > v16 != v20 >= 0)
      {
        int v22 = *((_DWORD *)this + 21);
        if (v22 == 2)
        {
          int v23 = -(int)v10;
        }

        else if (v22)
        {
          int v23 = 0;
        }

        else
        {
          int v23 = *((_DWORD *)this + 29);
        }

        unsigned int v21 = icu::SimpleTimeZone::compareToRule( v30,  v29,  a9,  v18,  v19,  a7,  v23,  *((_DWORD *)this + 28),  v16,  *((_BYTE *)this + 90),  *((_BYTE *)this + 89),  *((_DWORD *)this + 23)) >> 31;
      }

      BOOL v25 = v20 >= 0;
      if (v20 >= 0) {
        int v26 = 1;
      }
      else {
        int v26 = v21;
      }
      if (v15 > v16) {
        BOOL v25 = 0;
      }
      char v27 = v25 & v21;
      if (v15 > v16) {
        int v28 = v26;
      }
      else {
        int v28 = 0;
      }
      if ((v27 & 1) != 0 || v28) {
        return (*((_DWORD *)this + 29) + v10);
      }
    }
  }

  return v10;
}

uint64_t icu::SimpleTimeZone::compareToRule( char a1, int a2, char a3, char a4, unsigned int a5, int a6, int a7, int a8, char a9, char a10, char a11, signed int a12)
{
  signed int v12 = a7 + a6;
  if (a7 + a6 <= 86399999)
  {
    if (v12 < 0)
    {
      do
      {
        v12 += 86400000;
        a5 = (char)a5 + 5 - 7 * (((18725 * ((char)a5 + 5)) >> 17) + ((18725 * ((char)a5 + 5)) >> 31)) + 1;
        char v14 = (char)(a4 - 1) < 1;
        else {
          a4 = a3;
        }
        a1 -= v14;
      }

      while (v12 >= 0x5265C00);
    }
  }

  else
  {
    do
    {
      v12 -= 86400000;
      int v13 = (char)(a4 + 1);
      a5 = a5
         - 7
         * (((char)((unsigned __int16)(147 * (char)a5) >> 8) >> 2)
      if (v13 <= a2) {
        ++a4;
      }
      else {
        a4 = 1;
      }
      if (v13 > a2) {
        ++a1;
      }
    }

    while ((v12 + 86400000) > 0xA4CB7FF);
  }

  if (a9 > a1) {
    return 0xFFFFFFFFLL;
  }
  if (a9 < a1) {
    return 1LL;
  }
  LOBYTE(v16) = a11;
  if (a11 >= a2) {
    LOBYTE(v16) = a2;
  }
  switch(a8)
  {
    case 1:
      int v16 = (char)v16;
      break;
    case 2:
      int v17 = (char)v16;
      int v18 = 7 * (char)v16;
      if (v17 < 1)
      {
        __int16 v21 = a2 + 7 + (char)a5 - (a10 + a4);
        int v16 = a2 + 7 + v18 + (__int16)(7 * (v21 / 7) - v21);
      }

      else
      {
        int v16 = v18 + (__int16)(a10 + (char)~(_BYTE)a5 + a4 + 7) % 7 - 6;
      }

      break;
    case 3:
      int v19 = (__int16)(a10 - ((char)v16 + (char)a5) + a4 + 49) % 7;
      goto LABEL_26;
    case 4:
      int v20 = (char)v16 - a10 + (char)a5 - a4 + 49;
      int v19 = 7 * (v20 / 7) - v20;
LABEL_26:
      int v16 = v19 + (char)v16;
      break;
    default:
      int v16 = 0;
      break;
  }

  if (v16 > a4) {
    return 0xFFFFFFFFLL;
  }
  if (v16 < a4) {
    return 1LL;
  }
  if (v12 >= a12) {
    return v12 > a12;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t icu::SimpleTimeZone::getOffsetFromLocal( uint64_t result, int a2, char a3, _DWORD *a4, int *a5, int *a6, double a7)
{
  if (*a6 <= 0)
  {
    uint64_t v13 = result;
    *a4 = (*(uint64_t (**)(uint64_t))(*(void *)result + 64LL))(result);
    int v20 = 0;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    int v14 = sub_1808FA26C(86400000, &v18, a7);
    int v21 = 0;
    sub_1808FA420(&v20, (_DWORD *)&v19 + 1, &v19, (int *)&v18 + 1, &v21, (double)v14);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 40LL))(v13, 1LL);
    int v15 = result - *a4;
    *a5 = v15;
    if (*a6 <= 0)
    {
      if (v15 >= 1)
      {
        if ((a2 & 3) != 1 && ((a2 & 3) == 3 || (~a2 & 0xC) == 0)) {
          return result;
        }
LABEL_11:
        int v16 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 104LL))(v13);
        int v17 = sub_1808FA26C(86400000, &v18, a7 - (double)v16);
        int v21 = 0;
        sub_1808FA420(&v20, (_DWORD *)&v19 + 1, &v19, (int *)&v18 + 1, &v21, (double)v17);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 40LL))(v13, 1LL);
        *a5 = result - *a4;
        return result;
      }

      if ((a3 & 3) != 1 && ((a3 & 3) == 3 || (a3 & 0xC) == 4)) {
        goto LABEL_11;
      }
    }
  }

  return result;
}

uint64_t icu::SimpleTimeZone::getRawOffset(icu::SimpleTimeZone *this)
{
  return *((unsigned int *)this + 25);
}

uint64_t icu::SimpleTimeZone::setRawOffset(uint64_t this, int a2)
{
  *(_DWORD *)(this + 10icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = a2;
  *(_BYTE *)(this + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  return this;
}

uint64_t icu::SimpleTimeZone::setDSTSavings(uint64_t this, int a2, UErrorCode *a3)
{
  if (a2) {
    *(_DWORD *)(this + 116) = a2;
  }
  else {
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  *(_BYTE *)(this + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  return this;
}

uint64_t icu::SimpleTimeZone::getDSTSavings(icu::SimpleTimeZone *this)
{
  return *((unsigned int *)this + 29);
}

uint64_t icu::SimpleTimeZone::useDaylightTime(icu::SimpleTimeZone *this)
{
  return *((char *)this + 104);
}

uint64_t icu::SimpleTimeZone::inDaylightTime(icu::SimpleTimeZone *this, double a2, UErrorCode *a3)
{
  unint64_t v3 = (uint64_t *)*(unsigned int *)a3;
  unsigned int v8 = (icu::GregorianCalendar *)icu::UMemory::operator new(v3, (icu::UMemory *)0x290, (unint64_t)a3);
  if (!v8)
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
    return 0LL;
  }

  int v9 = v8;
  uint64_t v10 = icu::GregorianCalendar::GregorianCalendar(v8, this, a3);
  icu::Calendar::setTimeInMillis(v10, a2, a3);
  uint64_t v11 = (*(uint64_t (**)(icu::GregorianCalendar *, UErrorCode *))(*(void *)v9 + 96LL))(v9, a3);
  (*(void (**)(icu::GregorianCalendar *))(*(void *)v9 + 8LL))(v9);
  return v11;
}

BOOL icu::SimpleTimeZone::hasSameRules(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  if (!a1) {
    __cxa_bad_typeid();
  }
  BOOL result = sub_1807F874C(*(void *)(*(void *)a1 - 8LL), *(void *)(*(void *)a2 - 8LL));
  if (result)
  {
    if (*(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100)
      || *(unsigned __int8 *)(a1 + 104) != *(unsigned __int8 *)(a2 + 104))
    {
      return 0LL;
    }

    if (*(_BYTE *)(a1 + 104))
    {
      if (*(_DWORD *)(a1 + 116) == *(_DWORD *)(a2 + 116)
        && *(_DWORD *)(a1 + 108) == *(_DWORD *)(a2 + 108)
        && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72)
        && *(unsigned __int8 *)(a1 + 73) == *(unsigned __int8 *)(a2 + 73)
        && *(unsigned __int8 *)(a1 + 74) == *(unsigned __int8 *)(a2 + 74)
        && *(_DWORD *)(a1 + 76) == *(_DWORD *)(a2 + 76)
        && *(_DWORD *)(a1 + 80) == *(_DWORD *)(a2 + 80)
        && *(_DWORD *)(a1 + 112) == *(_DWORD *)(a2 + 112)
        && *(unsigned __int8 *)(a1 + 88) == *(unsigned __int8 *)(a2 + 88)
        && *(unsigned __int8 *)(a1 + 89) == *(unsigned __int8 *)(a2 + 89)
        && *(unsigned __int8 *)(a1 + 90) == *(unsigned __int8 *)(a2 + 90)
        && *(_DWORD *)(a1 + 92) == *(_DWORD *)(a2 + 92)
        && *(_DWORD *)(a1 + 84) == *(_DWORD *)(a2 + 84))
      {
        return *(_DWORD *)(a1 + 96) == *(_DWORD *)(a2 + 96);
      }

      return 0LL;
    }

    return 1LL;
  }

  return result;
}

uint64_t icu::SimpleTimeZone::getNextTransition( icu::TimeZoneTransition **this, double a2, uint64_t a3, icu::TimeZoneTransition *a4)
{
  if (*((_BYTE *)this + 104))
  {
    UErrorCode v22 = U_ZERO_ERROR;
    icu::SimpleTimeZone::checkTransitionRules((icu::SimpleTimeZone *)this, &v22);
    uint64_t result = 0LL;
    if (v22 > U_ZERO_ERROR) {
      return result;
    }
    double Time = icu::TimeZoneTransition::getTime(this[17]);
    if (Time > a2 || (_DWORD)a3 && Time == a2) {
      icu::TimeZoneTransition::operator=(a4, this[17]);
    }
    double v20 = 0.0;
    double v21 = 0.0;
    uint64_t v11 = this[19];
    uint64_t v10 = this + 19;
    uint64_t v12 = (uint64_t)*(v10 - 1);
    Rawint Offset = icu::TimeZoneRule::getRawOffset(v11);
    uint64_t DSTSavings = icu::TimeZoneRule::getDSTSavings(*v10);
    LODWORD(v12) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double *, double))(*(void *)v12 + 72LL))( v12,  RawOffset,  DSTSavings,  a3,  &v21,  a2);
    int v15 = *v10;
    uint64_t v16 = icu::TimeZoneRule::getRawOffset(*(v10 - 1));
    uint64_t v17 = icu::TimeZoneRule::getDSTSavings(*(v10 - 1));
    uint64_t result = (*(uint64_t (**)(icu::TimeZoneRule *, uint64_t, uint64_t, uint64_t, double *, double))(*(void *)v15 + 72LL))( v15,  v16,  v17,  a3,  &v20,  a2);
    if (!(_DWORD)v12)
    {
      if (!(_DWORD)result) {
        return result;
      }
      double v18 = v20;
      uint64_t v19 = v10 - 1;
      goto LABEL_14;
    }

    if (!(_DWORD)result || (double v18 = v20, v21 < v20))
    {
      double v18 = v21;
      uint64_t v19 = v10--;
LABEL_14:
      icu::TimeZoneTransition::setTime((uint64_t)a4, v18);
      icu::TimeZoneTransition::setFrom(a4, *v19);
      icu::TimeZoneTransition::setTo(a4, *v10);
      return 1LL;
    }

    uint64_t v19 = v10 - 1;
    if (v20 < v21) {
      goto LABEL_14;
    }
  }

  return 0LL;
}

void icu::SimpleTimeZone::checkTransitionRules(icu::SimpleTimeZone *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    umtx_lock((icu::UMutex *)&unk_18C4497E8);
    if (!*((_BYTE *)this + 120)) {
      icu::SimpleTimeZone::initTransitionRules(this, a2);
    }
    umtx_unlock((std::mutex **)&unk_18C4497E8);
  }

uint64_t icu::SimpleTimeZone::getPreviousTransition( icu::SimpleTimeZone *this, double a2, uint64_t a3, icu::TimeZoneTransition *a4)
{
  if (!*((_BYTE *)this + 104)) {
    return 0LL;
  }
  UErrorCode v22 = U_ZERO_ERROR;
  icu::SimpleTimeZone::checkTransitionRules(this, &v22);
  uint64_t result = 0LL;
  if (v22 > U_ZERO_ERROR) {
    return result;
  }
  double Time = icu::TimeZoneTransition::getTime(*((icu::TimeZoneTransition **)this + 17));
  if (Time > a2 || !(_DWORD)a3 && Time == a2) {
    return 0LL;
  }
  double v20 = 0.0;
  double v21 = 0.0;
  uint64_t v11 = (icu::TimeZoneRule *)*((void *)this + 19);
  uint64_t v10 = (icu::TimeZoneRule **)((char *)this + 152);
  uint64_t v12 = (uint64_t)*(v10 - 1);
  Rawint Offset = icu::TimeZoneRule::getRawOffset(v11);
  uint64_t DSTSavings = icu::TimeZoneRule::getDSTSavings(*v10);
  LODWORD(v12) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double *, double))(*(void *)v12 + 80LL))( v12,  RawOffset,  DSTSavings,  a3,  &v21,  a2);
  int v15 = *v10;
  uint64_t v16 = icu::TimeZoneRule::getRawOffset(*(v10 - 1));
  uint64_t v17 = icu::TimeZoneRule::getDSTSavings(*(v10 - 1));
  uint64_t result = (*(uint64_t (**)(icu::TimeZoneRule *, uint64_t, uint64_t, uint64_t, double *, double))(*(void *)v15 + 80LL))( v15,  v16,  v17,  a3,  &v20,  a2);
  if ((_DWORD)v12)
  {
    if ((_DWORD)result && (double v18 = v20, v21 <= v20))
    {
      uint64_t v19 = v10 - 1;
      if (v20 <= v21) {
        return 0LL;
      }
    }

    else
    {
      double v18 = v21;
      uint64_t v19 = v10--;
    }

icu::SimpleTimeZone *icu::SimpleTimeZone::initTransitionRules(icu::SimpleTimeZone *this, UErrorCode *a2)
{
  uint64_t v81 = *MEMORY[0x1895F89C0];
  if (*(int *)a2 <= 0)
  {
    int v2 = this;
    if (!*((_BYTE *)this + 120))
    {
      icu::SimpleTimeZone::deleteTransitionRules(this);
      __int128 v77 = 0u;
      uint64_t v80 = 0LL;
      __int128 v79 = 0u;
      __int128 v78 = 0u;
      __int128 v76 = (UChar *)off_18971B688;
      LOWORD(v77) = 2;
      icu::UnicodeString::operator=(&v76, (UChar **)v2 + 1);
      if (*((_BYTE *)v2 + 104))
      {
        double v72 = 0.0;
        double v73 = 0.0;
        int v5 = *((_DWORD *)v2 + 20);
        if (v5 == 1) {
          int v6 = 1;
        }
        else {
          int v6 = 2 * (v5 == 2);
        }
        int v7 = (uint64_t *)(*((_DWORD *)v2 + 27) - 1);
        switch(*((_DWORD *)v2 + 27))
        {
          case 1:
            unsigned int v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0x28, v4);
            if (!v8) {
              goto LABEL_28;
            }
            int v9 = (icu::DateTimeRule *)v8;
            icu::DateTimeRule::DateTimeRule( (uint64_t)v8,  *((char *)v2 + 72),  *((char *)v2 + 73),  *((_DWORD *)v2 + 19),  v6);
            goto LABEL_20;
          case 2:
            uint64_t v16 = icu::UMemory::operator new(v7, (icu::UMemory *)0x28, v4);
            if (!v16) {
              goto LABEL_28;
            }
            int v9 = (icu::DateTimeRule *)v16;
            icu::DateTimeRule::DateTimeRule( (uint64_t)v16,  *((char *)v2 + 72),  *((char *)v2 + 73),  *((char *)v2 + 74),  *((_DWORD *)v2 + 19),  v6);
            goto LABEL_20;
          case 3:
            uint64_t v17 = icu::UMemory::operator new(v7, (icu::UMemory *)0x28, v4);
            if (!v17) {
              goto LABEL_28;
            }
            int v9 = (icu::DateTimeRule *)v17;
            int v18 = *((char *)v2 + 72);
            int v19 = *((char *)v2 + 73);
            int v20 = *((char *)v2 + 74);
            int v21 = *((_DWORD *)v2 + 19);
            int v22 = 1;
            goto LABEL_19;
          case 4:
            uint64_t v17 = icu::UMemory::operator new(v7, (icu::UMemory *)0x28, v4);
            if (!v17)
            {
LABEL_28:
              uint64_t v15 = 7LL;
LABEL_30:
              *a2 = v15;
              return (icu::SimpleTimeZone *)icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v76);
            }

            int v9 = (icu::DateTimeRule *)v17;
            int v18 = *((char *)v2 + 72);
            int v19 = *((char *)v2 + 73);
            int v20 = *((char *)v2 + 74);
            int v21 = *((_DWORD *)v2 + 19);
            int v22 = 0;
LABEL_19:
            icu::DateTimeRule::DateTimeRule((uint64_t)v17, v18, v19, v20, v22, v21, v6);
LABEL_20:
            int v23 = icu::UMemory::operator new(v11, (icu::UMemory *)0x60, v10);
            if (!v23)
            {
              *((void *)v2 + 19) = 0LL;
              break;
            }

            __int128 v24 = (icu::AnnualTimeZoneRule *)v23;
            icu::UnicodeString::UnicodeString((uint64_t)v74, (uint64_t)L"(DST)");
            icu::operator+((uint64_t)&v76, (uint64_t)v74, (uint64_t)v75);
            int v25 = (*(uint64_t (**)(icu::SimpleTimeZone *))(*(void *)v2 + 64LL))(v2);
            int v26 = (*(uint64_t (**)(icu::SimpleTimeZone *))(*(void *)v2 + 104LL))(v2);
            icu::AnnualTimeZoneRule::AnnualTimeZoneRule(v24, v75, v25, v26, v9, *((_DWORD *)v2 + 24), 0x7FFFFFFF);
            *((void *)v2 + 19) = v24;
            icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)v75);
            icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v74);
            uint64_t v29 = *((void *)v2 + 19);
            if (!v29) {
              break;
            }
            uint64_t v30 = (*(uint64_t (**)(icu::SimpleTimeZone *))(*(void *)v2 + 64LL))(v2);
            (*(void (**)(uint64_t, uint64_t, void, double *))(*(void *)v29 + 56LL))(v29, v30, 0LL, &v72);
            int v32 = *((_DWORD *)v2 + 21);
            if (v32 == 1) {
              int v33 = 1;
            }
            else {
              int v33 = 2 * (v32 == 2);
            }
            int v34 = (uint64_t *)(*((_DWORD *)v2 + 28) - 1);
            switch(*((_DWORD *)v2 + 28))
            {
              case 1:
                uint64_t v35 = icu::UMemory::operator new(v34, (icu::UMemory *)0x28, v31);
                if (!v35) {
                  goto LABEL_55;
                }
                int v9 = (icu::DateTimeRule *)v35;
                icu::DateTimeRule::DateTimeRule( (uint64_t)v35,  *((char *)v2 + 88),  *((char *)v2 + 89),  *((_DWORD *)v2 + 23),  v33);
                break;
              case 2:
                uint64_t v36 = icu::UMemory::operator new(v34, (icu::UMemory *)0x28, v31);
                if (!v36) {
                  goto LABEL_55;
                }
                int v9 = (icu::DateTimeRule *)v36;
                icu::DateTimeRule::DateTimeRule( (uint64_t)v36,  *((char *)v2 + 88),  *((char *)v2 + 89),  *((char *)v2 + 90),  *((_DWORD *)v2 + 23),  v33);
                break;
              case 3:
                __int128 v37 = icu::UMemory::operator new(v34, (icu::UMemory *)0x28, v31);
                if (!v37) {
                  goto LABEL_55;
                }
                int v9 = (icu::DateTimeRule *)v37;
                int v38 = *((char *)v2 + 88);
                int v39 = *((char *)v2 + 89);
                int v40 = *((char *)v2 + 90);
                int v41 = *((_DWORD *)v2 + 23);
                int v42 = 1;
                goto LABEL_38;
              case 4:
                __int128 v37 = icu::UMemory::operator new(v34, (icu::UMemory *)0x28, v31);
                if (!v37) {
                  goto LABEL_55;
                }
                int v9 = (icu::DateTimeRule *)v37;
                int v38 = *((char *)v2 + 88);
                int v39 = *((char *)v2 + 89);
                int v40 = *((char *)v2 + 90);
                int v41 = *((_DWORD *)v2 + 23);
                int v42 = 0;
LABEL_38:
                icu::DateTimeRule::DateTimeRule((uint64_t)v37, v38, v39, v40, v42, v41, v33);
                break;
              default:
                break;
            }

            __int128 v43 = icu::UMemory::operator new(v34, (icu::UMemory *)0x60, v31);
            if (!v43)
            {
              *((void *)v2 + 18) = 0LL;
              break;
            }

            __int128 v44 = (icu::AnnualTimeZoneRule *)v43;
            icu::UnicodeString::UnicodeString((uint64_t)v74, (uint64_t)L"(STD)");
            icu::operator+((uint64_t)&v76, (uint64_t)v74, (uint64_t)v75);
            int v45 = (*(uint64_t (**)(icu::SimpleTimeZone *))(*(void *)v2 + 64LL))(v2);
            icu::AnnualTimeZoneRule::AnnualTimeZoneRule(v44, v75, v45, 0, v9, *((_DWORD *)v2 + 24), 0x7FFFFFFF);
            *((void *)v2 + 18) = v44;
            icu::UnicodeString::~UnicodeString(v46, (icu::UnicodeString *)v75);
            icu::UnicodeString::~UnicodeString(v47, (icu::UnicodeString *)v74);
            uint64_t v48 = *((void *)v2 + 18);
            if (!v48) {
              break;
            }
            uint64_t v49 = (*(uint64_t (**)(icu::SimpleTimeZone *))(*(void *)v2 + 64LL))(v2);
            uint64_t DSTSavings = icu::TimeZoneRule::getDSTSavings(*((icu::TimeZoneRule **)v2 + 19));
            (*(void (**)(uint64_t, uint64_t, uint64_t, double *))(*(void *)v48 + 56LL))( v48,  v49,  DSTSavings,  &v73);
            double v52 = v72;
            double v51 = v73;
            __int128 v55 = icu::UMemory::operator new(v54, (icu::UMemory *)0x50, v53);
            __int128 v56 = (icu::InitialTimeZoneRule *)v55;
            if (v51 >= v52)
            {
              if (!v55) {
                goto LABEL_54;
              }
              icu::UnicodeString::UnicodeString((uint64_t)v74, (uint64_t)L"(STD)");
              icu::operator+((uint64_t)&v76, (uint64_t)v74, (uint64_t)v75);
              int v67 = (*(uint64_t (**)(icu::SimpleTimeZone *))(*(void *)v2 + 64LL))(v2);
              icu::InitialTimeZoneRule::InitialTimeZoneRule(v56, v75, v67, 0);
              *((void *)v2 + 16) = v56;
              icu::UnicodeString::~UnicodeString(v68, (icu::UnicodeString *)v75);
              icu::UnicodeString::~UnicodeString(v69, (icu::UnicodeString *)v74);
              __int128 v71 = (uint64_t *)*((void *)v2 + 16);
              if (!v71) {
                break;
              }
              __int128 v63 = icu::UMemory::operator new(v71, (icu::UMemory *)0x20, v70);
              if (v63)
              {
                double v64 = v72;
                __int128 v65 = (const icu::TimeZoneRule *)*((void *)v2 + 16);
                uint64_t v66 = (const icu::TimeZoneRule *)*((void *)v2 + 19);
                goto LABEL_51;
              }
            }

            else
            {
              if (!v55) {
                goto LABEL_54;
              }
              icu::UnicodeString::UnicodeString((uint64_t)v74, (uint64_t)L"(DST)");
              icu::operator+((uint64_t)&v76, (uint64_t)v74, (uint64_t)v75);
              int v57 = (*(uint64_t (**)(icu::SimpleTimeZone *))(*(void *)v2 + 64LL))(v2);
              int v58 = icu::TimeZoneRule::getDSTSavings(*((icu::TimeZoneRule **)v2 + 19));
              icu::InitialTimeZoneRule::InitialTimeZoneRule(v56, v75, v57, v58);
              *((void *)v2 + 16) = v56;
              icu::UnicodeString::~UnicodeString(v59, (icu::UnicodeString *)v75);
              icu::UnicodeString::~UnicodeString(v60, (icu::UnicodeString *)v74);
              __int128 v62 = (uint64_t *)*((void *)v2 + 16);
              if (!v62) {
                break;
              }
              __int128 v63 = icu::UMemory::operator new(v62, (icu::UMemory *)0x20, v61);
              if (v63)
              {
                double v64 = v73;
                __int128 v65 = (const icu::TimeZoneRule *)*((void *)v2 + 16);
                uint64_t v66 = (const icu::TimeZoneRule *)*((void *)v2 + 18);
LABEL_51:
                __int128 v63 = (uint64_t *)icu::TimeZoneTransition::TimeZoneTransition( (icu::TimeZoneTransition *)v63,  v64,  v65,  v66);
              }
            }

            *((void *)v2 + 17) = v63;
            if (v63) {
              goto LABEL_12;
            }
            break;
          default:
            uint64_t v15 = 27LL;
            goto LABEL_30;
        }
      }

      else
      {
        uint64_t v12 = icu::UMemory::operator new((uint64_t *)*((unsigned __int8 *)v2 + 104), (icu::UMemory *)0x50, v4);
        if (v12)
        {
          uint64_t v13 = (icu::InitialTimeZoneRule *)v12;
          int v14 = (*(uint64_t (**)(icu::SimpleTimeZone *))(*(void *)v2 + 64LL))(v2);
          icu::InitialTimeZoneRule::InitialTimeZoneRule(v13, &v76, v14, 0);
          *((void *)v2 + 16) = v13;
LABEL_12:
          uint64_t v15 = 1LL;
          *((_BYTE *)v2 + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 1;
          return (icu::SimpleTimeZone *)icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v76);
        }

uint64_t icu::SimpleTimeZone::countTransitionRules(icu::SimpleTimeZone *this, UErrorCode *a2)
{
  return 2 * (*((_BYTE *)this + 104) != 0);
}

void icu::SimpleTimeZone::getTimeZoneRules( icu::SimpleTimeZone *this, const icu::InitialTimeZoneRule **a2, const icu::TimeZoneRule **a3, int *a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    icu::SimpleTimeZone::checkTransitionRules(this, a5);
    if (*(int *)a5 <= 0)
    {
      *a2 = (const icu::InitialTimeZoneRule *)*((void *)this + 16);
      unint64_t v10 = (const icu::TimeZoneRule *)*((void *)this + 18);
      if (v10)
      {
        int v11 = *a4;
        if (*a4 < 1)
        {
          LODWORD(v1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
        }

        else
        {
          *a3 = v10;
          LODWORD(v1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 1;
        }

        if ((int)v10 < v11)
        {
          a3[v10] = (const icu::TimeZoneRule *)*((void *)this + 19);
          LODWORD(v1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = (_DWORD)v10 + 1;
        }
      }

      *a4 = (int)v10;
    }
  }

void *icu::SimpleDateFormat::getStaticClassID(icu::SimpleDateFormat *this)
{
  return &unk_18C535888;
}

void *icu::SimpleDateFormat::getDynamicClassID(icu::SimpleDateFormat *this)
{
  return &unk_18C535888;
}

void icu::SimpleDateFormat::NSOverride::~NSOverride(icu::SimpleDateFormat::NSOverride *this)
{
  uint64_t v1 = *(void **)this;
  if (v1) {
    icu::SharedObject::removeRef(v1);
  }
}

{
  void *v1;
  uint64_t v1 = *(void **)this;
  if (v1) {
    icu::SharedObject::removeRef(v1);
  }
}

void icu::SimpleDateFormat::NSOverride::free(icu::SimpleDateFormat::NSOverride *this)
{
  if (this)
  {
    uint64_t v1 = this;
    do
    {
      int v2 = (icu::SimpleDateFormat::NSOverride *)*((void *)v1 + 2);
      if (*(void *)v1) {
        icu::SharedObject::removeRef(*(void **)v1);
      }
      icu::UMemory::operator delete(v1);
      uint64_t v1 = v2;
    }

    while (v2);
  }

uint64_t icu::SimpleDateFormat::getNumberFormatByIndex(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 800);
  if (v2 && (uint64_t v3 = *(void *)(v2 + 8LL * a2)) != 0) {
    uint64_t v4 = v3 + 24;
  }
  else {
    uint64_t v4 = a1 + 336;
  }
  return *(void *)v4;
}

void icu::SimpleDateFormat::~SimpleDateFormat(icu::SimpleDateFormat *this)
{
  uint64_t v2 = off_18972B0E0;
  *(void *)this = off_18972B0E0;
  uint64_t v3 = (icu::DateFormatSymbols *)*((void *)this + 96);
  if (v3)
  {
    icu::DateFormatSymbols::~DateFormatSymbols(v3);
    icu::UMemory::operator delete(v4);
  }

  int v5 = (char *)*((void *)this + 100);
  if (v5) {
    sub_18098624C(v5);
  }
  uint64_t v6 = *((void *)this + 97);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  int v7 = (void *)*((void *)this + 101);
  if (v7)
  {
    icu::number::SimpleNumberFormatter::cleanup(*((icu::number::SimpleNumberFormatter **)this + 101), v2);
    icu::UMemory::operator delete(v7);
  }

  uint64_t v8 = *((void *)this + 103);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }
  icu::Locale::~Locale((icu::SimpleDateFormat *)((char *)this + 544));
  icu::UnicodeString::~UnicodeString(v9, (icu::SimpleDateFormat *)((char *)this + 480));
  icu::UnicodeString::~UnicodeString(v10, (icu::SimpleDateFormat *)((char *)this + 416));
  icu::UnicodeString::~UnicodeString(v11, (icu::SimpleDateFormat *)((char *)this + 352));
  icu::DateFormat::~DateFormat(this);
}

{
  void *v1;
  icu::SimpleDateFormat::~SimpleDateFormat(this);
  icu::UMemory::operator delete(v1);
}

void sub_18098624C(char *a1)
{
  for (uint64_t i = 0LL; i != 304; i += 8LL)
  {
    uint64_t v3 = *(void **)&a1[i];
    if (v3)
    {
      icu::SharedObject::removeRef(v3);
      *(void *)&a1[i] = 0LL;
    }
  }

  uprv_free(a1);
}

icu::SimpleDateFormat *icu::SimpleDateFormat::SimpleDateFormat(icu::SimpleDateFormat *this, UErrorCode *a2)
{
  uint64_t v4 = icu::DateFormat::DateFormat(this);
  *uint64_t v4 = off_18972B0E0;
  v4[44] = off_18971B688;
  *((_WORD *)v4 + 18icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
  v4[52] = off_18971B688;
  *((_WORD *)v4 + 212) = 2;
  v4[60] = off_18971B688;
  *((_WORD *)v4 + 244) = 2;
  int v5 = (icu::Locale *)(v4 + 68);
  Default = icu::Locale::getDefault((icu::Locale *)v4);
  icu::Locale::Locale(v5, (uint64_t)Default);
  *((void *)this + 103) = 0LL;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 5icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  icu::SimpleDateFormat::initializeBooleanAttributes(this);
  icu::SimpleDateFormat::construct((UChar **)this, 3u, 7, (uint64_t)v5, a2);
  icu::SimpleDateFormat::initializeDefaultCentury(this);
  return this;
}

uint64_t icu::SimpleDateFormat::initializeBooleanAttributes(icu::SimpleDateFormat *this)
{
  int v3 = 0;
  (*(void (**)(icu::SimpleDateFormat *, void, uint64_t, int *))(*(void *)this + 216LL))( this,  0LL,  1LL,  &v3);
  (*(void (**)(icu::SimpleDateFormat *, uint64_t, uint64_t, int *))(*(void *)this + 216LL))( this,  1LL,  1LL,  &v3);
  (*(void (**)(icu::SimpleDateFormat *, uint64_t, uint64_t, int *))(*(void *)this + 216LL))( this,  2LL,  1LL,  &v3);
  return (*(uint64_t (**)(icu::SimpleDateFormat *, uint64_t, uint64_t, int *))(*(void *)this + 216LL))( this,  3LL,  1LL,  &v3);
}

void icu::SimpleDateFormat::construct( UChar **a1, unsigned int a2, signed int a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v80 = *MEMORY[0x1895F89C0];
  icu::SimpleDateFormat::initializeCalendar((icu::SimpleDateFormat *)a1, 0LL, (char **)a4, a5);
  int v65 = 0;
  __int128 v78 = 0u;
  memset(v79, 0, sizeof(v79));
  __int128 v76 = 0u;
  __int128 v77 = 0u;
  __int128 v74 = 0u;
  __int128 v75 = 0u;
  __int128 v72 = 0u;
  __int128 v73 = 0u;
  *(_OWORD *)__dst = 0u;
  unint64_t v10 = a1[41];
  if (v10) {
    int v11 = (const char *)(*(uint64_t (**)(UChar *))(*(void *)v10 + 184LL))(v10);
  }
  else {
    int v11 = 0LL;
  }
  BOOL v64 = 0;
  uint64_t v12 = ures_open(0LL, __dst, (int *)a5);
  uint64_t v13 = ures_openWithCountryFallback(0LL, *(char **)(a4 + 40), &v64, (int *)a5);
  if (*(int *)a5 <= 0)
  {
    if (v64)
    {
      LODWORD(v67[0]) = -1;
      StringByKeyWithFallbacuint64_t k = ures_getStringByKeyWithFallback(v12, "NumberElements/default", (int *)v67, a5);
      uint64_t v15 = ures_getStringByKeyWithFallback(v13, "NumberElements/default", (int *)v67, a5);
    }

    if (!v11 || !strcmp(v11, "gregorian"))
    {
      *a5 = U_ZERO_ERROR;
      uint64_t v20 = ures_getByKeyWithFallback(v12, "calendar/gregorian/DateTimePatterns", 0LL, a5);
      uint64_t v21 = ures_getByKeyWithFallback(v13, "calendar/gregorian/DateTimePatterns", 0LL, a5);
      char v23 = 0;
      int v22 = 1;
    }

    else
    {
      memset(v67, 0, 64);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v62, "calendar/");
      *(void *)&v67[0] = (unint64_t)v67 | 0xD;
      DWORD2(v67[0]) = 40;
      WORD6(v67[0]) = 0;
      DWORD2(v67[3]) = 0;
      icu::CharString::append((icu::CharString *)v67, v62, v63, a5);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v60, v11);
      uint64_t v16 = icu::CharString::append((icu::CharString *)v67, v60, v61, a5);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v58, "/DateTimePatterns");
      icu::CharString::append(v16, v58, v59, a5);
      uint64_t v17 = ures_getByKeyWithFallback(v12, *(char **)&v67[0], 0LL, a5);
      uint64_t v18 = ures_getByKeyWithFallback(v13, *(char **)&v67[0], 0LL, a5);
      if (BYTE12(v67[0])) {
        uprv_free(*(void **)&v67[0]);
      }
      UErrorCode v19 = *a5;
      if (*a5 != U_MISSING_RESOURCE_ERROR)
      {
        int v22 = 0;
        char v23 = 1;
LABEL_25:
        if (v19 > U_ZERO_ERROR)
        {
LABEL_65:
          if (v18) {
            ures_close(v18);
          }
          if (v17) {
            ures_close(v17);
          }
          goto LABEL_69;
        }

        int v45 = v22;
        char v46 = v23;
        if ((int)ures_getSize(v17) <= 8)
        {
          int v25 = 3;
LABEL_28:
          *a5 = v25;
          goto LABEL_65;
        }

        uint64_t v48 = v17;
        LocaleByint Type = ures_getLocaleByType(v17, 1, (int *)a5);
        char v27 = (const char *)ures_getLocaleByType(v48, 0, (int *)a5);
        int v28 = (const char *)LocaleByType;
        uint64_t v17 = v48;
        icu::Format::setLocaleIDs((icu::Format *)a1, v28, v27);
        uint64_t v30 = icu::DateFormatSymbols::createForLocale((icu::DateFormatSymbols *)a4, a5, v29);
        a1[96] = (UChar *)v30;
        if (!v30)
        {
          int v25 = 7;
          goto LABEL_28;
        }

        int v57 = 0;
        __int128 v44 = a1 + 52;
        icu::UnicodeString::setToBogus((icu::UnicodeString *)(a1 + 52));
        icu::UnicodeString::setToBogus((icu::UnicodeString *)(a1 + 60));
        if (a2 != -1 && a3 != -1)
        {
          memset((char *)v70 + 8, 0, 56);
          *(void *)&v70[0] = off_18971B688;
          WORD4(v70[0]) = 2;
          memset(v69, 0, sizeof(v69));
          icu::SimpleDateFormat::getPatternForTimeStyle( (uint64_t)a1,  a2,  (char **)a4,  v48,  (icu::UnicodeString *)v70,  (int *)a5,  (uint64_t)v69);
          if (WORD4(v70[0]) >= 0x20u) {
            icu::UnicodeString::operator=(a1 + 60, (UChar **)v70);
          }
          memset(v68, 0, sizeof(v68));
          icu::SimpleDateFormat::getPatternForDateStyle(a3, v48, v18, &v64, (UChar **)v70, (int *)a5, (uint64_t)v68);
          if (WORD4(v70[0]) >= 0x20u) {
            icu::UnicodeString::operator=(v44, (UChar **)v70);
          }
          if ((v46 & 1) != 0)
          {
            memset((char *)v67 + 8, 0, 56);
            icu::StringPiece::StringPiece((icu::StringPiece *)&v55, "calendar/");
            *(void *)&v67[0] = (char *)v67 + 13;
            DWORD2(v67[0]) = 40;
            WORD6(v67[0]) = 0;
            DWORD2(v67[3]) = 0;
            icu::CharString::append((icu::CharString *)v67, v55, v56, a5);
            icu::StringPiece::StringPiece((icu::StringPiece *)&v53, v11);
            unint64_t v31 = icu::CharString::append((icu::CharString *)v67, v53, v54, a5);
            icu::StringPiece::StringPiece((icu::StringPiece *)&v51, "/DateTimePatterns%atTime");
            icu::CharString::append(v31, v51, v52, a5);
            uint64_t v32 = ures_getByKeyWithFallback(v12, *(char **)&v67[0], 0LL, a5);
            if (BYTE12(v67[0])) {
              uprv_free(*(void **)&v67[0]);
            }
            UErrorCode v33 = *a5;
            int v34 = v45;
            if (*a5 == U_MISSING_RESOURCE_ERROR) {
              int v34 = 1;
            }
            if (v34 != 1) {
              goto LABEL_53;
            }
            *a5 = U_ZERO_ERROR;
            uint64_t v35 = ures_getByKeyWithFallback(v12, "calendar/gregorian/DateTimePatterns%atTime", 0LL, a5);
            if (v32) {
              ures_close(v32);
            }
          }

          else
          {
            *a5 = U_ZERO_ERROR;
            uint64_t v35 = ures_getByKeyWithFallback(v12, "calendar/gregorian/DateTimePatterns%atTime", 0LL, a5);
          }

          UErrorCode v33 = *a5;
          uint64_t v32 = v35;
LABEL_53:
          uint64_t v17 = v48;
          if (v33 > U_ZERO_ERROR || (int)ures_getSize(v32) < 4)
          {
            *a5 = U_ZERO_ERROR;
            else {
              signed int v39 = a3 + 5;
            }
            uint64_t v40 = v48;
          }

          else
          {
            signed int v39 = a3 - 4;
            uint64_t v40 = v32;
          }

          StringByIndex = ures_getStringByIndex(v40, v39, &v57, (int *)a5);
          icu::UnicodeString::UnicodeString(v66, 1LL, &StringByIndex);
          *((void *)&v67[0] + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = off_18971B688;
          LOWORD(v67[1]) = 2;
          icu::SimpleFormatter::applyPatternMinMaxArguments( (icu::SimpleFormatter *)v67,  (const icu::UnicodeString *)v66,  2,  2,  0,  a5);
          icu::SimpleFormatter::format( (icu::SimpleFormatter *)v67,  (const icu::UnicodeString *)v69,  (const icu::UnicodeString *)v68,  (icu::UnicodeString *)(a1 + 44),  a5);
          icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v67);
          icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)v66);
          uint64_t v49 = StringByIndex;
          int v42 = &v49;
          if (v32) {
            ures_close(v32);
          }
          icu::UnicodeString::~UnicodeString(v42, (icu::UnicodeString *)v68);
          icu::UnicodeString::~UnicodeString(v43, (icu::UnicodeString *)v69);
          int v38 = (icu::UnicodeString *)v70;
          goto LABEL_63;
        }

        if (a2 == -1)
        {
          if (a3 == -1)
          {
            *a5 = U_INVALID_FORMAT_ERROR;
            uint64_t v17 = v48;
            goto LABEL_64;
          }

          memset((char *)v67 + 8, 0, 56);
          *(void *)&v67[0] = off_18971B688;
          WORD4(v67[0]) = 2;
          memset(v70, 0, sizeof(v70));
          uint64_t v17 = v48;
          icu::SimpleDateFormat::getPatternForDateStyle(a3, v48, v18, &v64, (UChar **)v67, (int *)a5, (uint64_t)v70);
          if (WORD4(v67[0]) < 0x20u) {
            goto LABEL_50;
          }
        }

        else
        {
          memset((char *)v67 + 8, 0, 56);
          *(void *)&v67[0] = off_18971B688;
          WORD4(v67[0]) = 2;
          memset(v70, 0, sizeof(v70));
          uint64_t v17 = v48;
          icu::SimpleDateFormat::getPatternForTimeStyle( (uint64_t)a1,  a2,  (char **)a4,  v48,  (icu::UnicodeString *)v67,  (int *)a5,  (uint64_t)v70);
          if (WORD4(v67[0]) < 0x20u)
          {
LABEL_50:
            icu::UnicodeString::operator=(a1 + 44, (UChar **)v70);
            icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)v70);
            int v38 = (icu::UnicodeString *)v67;
LABEL_63:
            icu::UnicodeString::~UnicodeString(v37, v38);
LABEL_64:
            icu::SimpleDateFormat::initialize((icu::SimpleDateFormat *)a1, (const icu::Locale *)a4, a5);
            goto LABEL_65;
          }
        }

        icu::UnicodeString::operator=(v44, (UChar **)v67);
        goto LABEL_50;
      }

      uint64_t v47 = v18;
      *a5 = U_ZERO_ERROR;
      uint64_t v20 = ures_getByKeyWithFallback(v12, "calendar/gregorian/DateTimePatterns", 0LL, a5);
      if (v17) {
        ures_close(v17);
      }
      uint64_t v21 = ures_getByKeyWithFallback(v13, "calendar/gregorian/DateTimePatterns", 0LL, a5);
      if (v47) {
        ures_close(v47);
      }
      int v22 = 0;
      char v23 = 1;
    }

    UErrorCode v19 = *a5;
    uint64_t v24 = v20;
    uint64_t v18 = v21;
    uint64_t v17 = v24;
    goto LABEL_25;
  }

uint64_t icu::SimpleDateFormat::initializeDefaultCentury(icu::SimpleDateFormat *this)
{
  uint64_t result = *((void *)this + 41);
  if (result)
  {
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)result + 400LL))(result);
    *((_BYTE *)this + 816) = v3;
    if (v3)
    {
      *((double *)this + 98) = (*(double (**)(void))(**((void **)this + 41) + 408LL))(*((void *)this + 41));
      uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 41) + 416LL))(*((void *)this + 41));
    }

    else
    {
      *((void *)this + 98) = 0x10000000000000LL;
      uint64_t result = 0xFFFFFFFFLL;
    }

    *((_DWORD *)this + 199) = result;
  }

  return result;
}

icu::SimpleDateFormat *icu::SimpleDateFormat::SimpleDateFormat( icu::SimpleDateFormat *this, UChar **a2, UErrorCode *a3)
{
  uint64_t v6 = icu::DateFormat::DateFormat(this);
  *uint64_t v6 = off_18972B0E0;
  int v7 = icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v6 + 44), a2);
  *((void *)this + 52) = off_18971B688;
  *((_WORD *)this + 212) = 2;
  *((void *)this + 6icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = off_18971B688;
  *((_WORD *)this + 244) = 2;
  Default = icu::Locale::getDefault(v7);
  icu::Locale::Locale((icu::SimpleDateFormat *)((char *)this + 544), (uint64_t)Default);
  *((void *)this + 103) = 0LL;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 5icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  icu::UnicodeString::setToBogus((icu::SimpleDateFormat *)((char *)this + 416));
  icu::UnicodeString::setToBogus((icu::SimpleDateFormat *)((char *)this + 480));
  icu::SimpleDateFormat::initializeBooleanAttributes(this);
  icu::SimpleDateFormat::initializeCalendar(this, 0LL, (char **)this + 68, a3);
  *((void *)this + 96) = icu::DateFormatSymbols::createForLocale( (icu::SimpleDateFormat *)((char *)this + 544),  a3,  v9);
  icu::SimpleDateFormat::initialize(this, (icu::SimpleDateFormat *)((char *)this + 544), a3);
  icu::SimpleDateFormat::initializeDefaultCentury(this);
  return this;
}

uint64_t icu::SimpleDateFormat::initializeCalendar( icu::SimpleDateFormat *this, icu::TimeZone *a2, char **a3, UErrorCode *a4)
{
  if (!a2) {
    a2 = (icu::TimeZone *)icu::TimeZone::forLocaleOrDefault(a3, 0LL);
  }
  uint64_t result = icu::Calendar::createInstance(a2, (icu::TimeZone *)a3, a4, a4);
  *((void *)this + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = result;
  return result;
}

void icu::SimpleDateFormat::initialize(icu::SimpleDateFormat *this, const icu::Locale *a2, UErrorCode *a3)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  if (*(int *)a3 <= 0)
  {
    *((_BYTE *)this + 795) = 0;
    uint64_t v6 = getprogname();
    if (v6)
    {
      int v7 = v6;
      if (!strncmp(v6, "Wells_Fargo_Mobile_Banking", 0x1AuLL) || !strncmp(v7, "FioSB2", 6uLL))
      {
        *((_BYTE *)this + 795) = 1;
        if (os_log_type_enabled(MEMORY[0x1895F8DA0], OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( &dword_1807BC000,  MEMORY[0x1895F8DA0],  OS_LOG_TYPE_DEFAULT,  "ICU using compatibility space for date formatting",  buf,  2u);
        }
      }
    }

    icu::SimpleDateFormat::parsePattern(this);
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    UErrorCode v15 = U_ZERO_ERROR;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    *(_OWORD *)buf = 0u;
    __int128 v17 = 0u;
    icu::Locale::Locale((icu::Locale *)buf, (uint64_t)a2);
    int KeywordValue = icu::Locale::getKeywordValue((char **)buf, "numbers", (char *)&v30, 96, &v15);
    if (v15 <= U_ZERO_ERROR && KeywordValue >= 1 && !((unint64_t)v30 ^ 0x73796164696E6168LL | BYTE8(v30)))
    {
      icu::Locale::setKeywordValue((const char **)buf, "numbers", 0LL, &v15);
      icu::UnicodeString::unBogus((uint64_t)this + 416);
      else {
        uint64_t v10 = *((unsigned __int16 *)this + 212) >> 5;
      }
      icu::UnicodeString::doReplace((uint64_t)this + 416, 0LL, v10, (uint64_t)&unk_180A3CCE6, 0, 0xFFFFFFFFLL);
    }

    if ((*((_WORD *)this + 212) & 1) != 0)
    {
      if (*((_BYTE *)this + 794))
      {
        uint64_t v11 = *((void *)this + 41);
        if (v11)
        {
          uint64_t v12 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 184LL))(v11);
        }
      }
    }

    uint64_t Instance = icu::NumberFormat::createInstance((char **)buf, a3, v9);
    *((void *)this + 42) = Instance;
    UErrorCode v14 = *a3;
    if (Instance && v14 <= U_ZERO_ERROR)
    {
      (*(void (**)(icu::DecimalFormat *))(*(void *)Instance + 288LL))(Instance);
      icu::SimpleDateFormat::initNumberFormatters(this, a2, a3);
      icu::SimpleDateFormat::initSimpleNumberFormatter(this, a3);
    }

    else if (v14 <= U_ZERO_ERROR)
    {
      *a3 = U_MISSING_RESOURCE_ERROR;
    }

    icu::Locale::~Locale((icu::Locale *)buf);
  }

UChar **icu::SimpleDateFormat::SimpleDateFormat(UChar **this, UChar **a2, UChar **a3, UErrorCode *a4)
{
  uint64_t v8 = icu::DateFormat::DateFormat((icu::DateFormat *)this);
  *uint64_t v8 = off_18972B0E0;
  int v9 = icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v8 + 44), a2);
  this[52] = (UChar *)off_18971B688;
  *((_WORD *)this + 212) = 2;
  this[60] = (UChar *)off_18971B688;
  *((_WORD *)this + 244) = 2;
  Default = icu::Locale::getDefault(v9);
  icu::Locale::Locale((icu::Locale *)(this + 68), (uint64_t)Default);
  this[103] = 0LL;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 5icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  icu::UnicodeString::copyFrom(this + 52, a3, 0);
  icu::UnicodeString::setToBogus((icu::UnicodeString *)(this + 60));
  icu::SimpleDateFormat::initializeBooleanAttributes((icu::SimpleDateFormat *)this);
  icu::SimpleDateFormat::initializeCalendar((icu::SimpleDateFormat *)this, 0LL, (char **)this + 68, a4);
  this[96] = (UChar *)icu::DateFormatSymbols::createForLocale((icu::DateFormatSymbols *)(this + 68), a4, v11);
  icu::SimpleDateFormat::initialize((icu::SimpleDateFormat *)this, (const icu::Locale *)(this + 68), a4);
  icu::SimpleDateFormat::initializeDefaultCentury((icu::SimpleDateFormat *)this);
  icu::SimpleDateFormat::processOverrideString( this,  (const icu::Locale *)(this + 68),  (const icu::UnicodeString *)a3,  2u,  a4);
  return this;
}

void *icu::SimpleDateFormat::processOverrideString( void *this, const icu::Locale *a2, const icu::UnicodeString *a3, unsigned int a4, UErrorCode *a5)
{
  uint64_t v69 = *MEMORY[0x1895F89C0];
  uint64_t v6 = (uint64_t)this;
  int v7 = 0LL;
  int v8 = 0;
  __int128 v65 = 0u;
  uint64_t v68 = 0LL;
  __int128 v67 = 0u;
  __int128 v66 = 0u;
  uint64_t v63 = 0LL;
  BOOL v64 = (UChar *)off_18971B688;
  LOWORD(v65) = 2;
  __int128 v60 = 0u;
  uint64_t v47 = (char *)a2 + 8;
  __int128 v62 = 0u;
  __int128 v61 = 0u;
  int v59 = off_18971B688;
  LOWORD(v6icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
  char v46 = (char *)a2 + 26;
  do
  {
    unsigned int v9 = *((unsigned __int16 *)a3 + 4);
    if (v8 < 0)
    {
      int v11 = 0;
      if ((v9 & 0x8000) != 0) {
        unsigned int v10 = *((_DWORD *)a3 + 3);
      }
      else {
        unsigned int v10 = v9 >> 5;
      }
    }

    else if ((v9 & 0x8000) != 0)
    {
      unsigned int v10 = *((_DWORD *)a3 + 3);
      else {
        int v11 = *((_DWORD *)a3 + 3);
      }
    }

    else
    {
      unsigned int v10 = v9 >> 5;
      if (v10 >= v8) {
        int v11 = v8;
      }
      else {
        int v11 = v10;
      }
    }

    int v12 = icu::UnicodeString::doIndexOf((uint64_t)a3, 0x3Bu, v11, v10 - v11);
    int v13 = v12;
    if (v12 == -1)
    {
      else {
        int v13 = *((unsigned __int16 *)a3 + 4) >> 5;
      }
    }

    uint64_t v14 = (v13 - v8);
    memset(v58, 0, 64);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v58, a3, v8, v14);
    if (SLOWORD(v58[1]) < 0)
    {
      int v16 = HIDWORD(v58[1]);
      int v15 = HIDWORD(v58[1]) & (SHIDWORD(v58[1]) >> 31);
    }

    else
    {
      int v15 = 0;
      int v16 = LOWORD(v58[1]) >> 5;
    }

    int v17 = icu::UnicodeString::doIndexOf((uint64_t)v58, 0x3Du, v15, v16 - v15);
    if (v17 == -1)
    {
      icu::UnicodeString::copyFrom(&v64, v58, 0);
      icu::UnicodeString::setToBogus((icu::UnicodeString *)&v59);
      goto LABEL_38;
    }

    int v18 = v17;
    icu::UnicodeString::unBogus((uint64_t)&v64);
    int v19 = LOWORD(v58[1]) >> 5;
    if (v18 < -1)
    {
      unsigned int v20 = 0;
LABEL_28:
      int v21 = v20;
      goto LABEL_29;
    }

    int v21 = v18 + 1;
    if (((uint64_t)v58[1] & 0x8000) != 0)
    {
      unsigned int v20 = HIDWORD(v58[1]);
      if (SHIDWORD(v58[1]) > v18) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }

    unsigned int v20 = LOWORD(v58[1]) >> 5;
    if (v18 >= v20) {
      goto LABEL_28;
    }
LABEL_29:
    if ((v65 & 0x8000u) == 0LL) {
      uint64_t v22 = (unsigned __int16)v65 >> 5;
    }
    else {
      uint64_t v22 = DWORD1(v65);
    }
    if (SLOWORD(v58[1]) < 0) {
      int v19 = HIDWORD(v58[1]);
    }
    icu::UnicodeString::doReplace( (icu::UnicodeString *)&v64,  0LL,  v22,  (const icu::UnicodeString *)v58,  v21,  (v19 - v21));
    icu::UnicodeString::unBogus((uint64_t)&v59);
    if ((v60 & 0x8000u) == 0LL) {
      uint64_t v23 = (unsigned __int16)v60 >> 5;
    }
    else {
      uint64_t v23 = DWORD1(v60);
    }
    icu::UnicodeString::doReplace((icu::UnicodeString *)&v59, 0LL, v23, (const icu::UnicodeString *)v58, 0, 1LL);
LABEL_38:
    int v24 = icu::UnicodeString::doHashCode((icu::UnicodeString *)&v64);
    int v27 = v24;
    if (v7)
    {
      __int128 v26 = v7;
      while (*((_DWORD *)v26 + 2) != v24)
      {
        __int128 v26 = (icu::SimpleDateFormat::NSOverride *)*((void *)v26 + 2);
        if (!v26) {
          goto LABEL_42;
        }
      }

      __int128 v35 = *(icu::SharedObject **)v26;
    }

    else
    {
LABEL_42:
      double v51 = 0LL;
      __int128 v28 = icu::UMemory::operator new((uint64_t *)v26, (icu::UMemory *)0x18, v25);
      if (!v28)
      {
        double v51 = 0LL;
        *a5 = U_MEMORY_ALLOCATION_ERROR;
        if (v7) {
          icu::SimpleDateFormat::NSOverride::free(v7);
        }
        sub_18098F374((void ***)&v51);
        goto LABEL_81;
      }

      uint64_t *v28 = 0LL;
      *((_DWORD *)v28 + 2) = 0;
      void v28[2] = 0LL;
      double v51 = v28;
      __int128 v56 = 0u;
      memset(v57, 0, sizeof(v57));
      __int128 v54 = 0u;
      __int128 v55 = 0u;
      *(_OWORD *)&v53[9] = 0u;
      strcpy(v53, "numbers=");
      icu::UnicodeString::extract((uint64_t)&v64, 0, v14, &v53[8], 92);
      __int128 v29 = (uint64_t *)*((void *)a2 + 26);
      __int128 v30 = (char *)v29 + *((int *)a2 + 8);
      memset(v52, 0, sizeof(v52));
      icu::Locale::Locale(v29, (icu::Locale *)v52, v47, v46, v30, v53);
      __int128 v31 = v51;
      *((_DWORD *)v51 + 2) = v27;
      void v31[2] = (uint64_t)v7;
      __int128 v33 = (icu::SharedObject *)sub_18098A2E4((char **)v52, a5, v32);
      sub_18085C214(v33, (icu::SharedObject **)v51);
      UErrorCode v34 = *a5;
      if (*(int *)a5 < 1)
      {
        int v7 = (icu::SimpleDateFormat::NSOverride *)v51;
        __int128 v35 = (icu::SharedObject *)*v51;
        double v51 = 0LL;
      }

      else
      {
        if (v7) {
          icu::SimpleDateFormat::NSOverride::free(v7);
        }
        __int128 v35 = 0LL;
      }

      icu::Locale::~Locale((icu::Locale *)v52);
      sub_18098F374((void ***)&v51);
      if (v34 > U_ZERO_ERROR) {
        goto LABEL_81;
      }
    }

    if ((v60 & 1) != 0)
    {
      if (a4 != 2)
      {
        if (a4 == 1) {
          goto LABEL_64;
        }
        unint64_t v40 = a4;
        if (a4) {
          goto LABEL_70;
        }
      }

      for (uint64_t i = 0LL; i != 16; ++i)
        sub_18085C214(v35, (icu::SharedObject **)(*(void *)(v6 + 800) + 8LL * dword_180A3D10C[i]));
      unint64_t v40 = a4;
      if (a4)
      {
LABEL_64:
        for (uint64_t j = 0LL; j != 10; ++j)
          sub_18085C214(v35, (icu::SharedObject **)(*(void *)(v6 + 800) + 8LL * dword_180A3D14C[j]));
      }
    }

    else
    {
      if ((v60 & 0x8000u) == 0LL) {
        int v37 = (unsigned __int16)v60 >> 5;
      }
      else {
        int v37 = DWORD1(v60);
      }
      if (v37)
      {
        int v38 = (UChar *)&v60 + 1;
        if ((v60 & 2) == 0) {
          int v38 = (UChar *)v61;
        }
        UChar v39 = *v38;
      }

      else
      {
        UChar v39 = -1;
      }

      unsigned int PatternCharIndex = icu::DateFormatSymbols::getPatternCharIndex(v39);
      if (PatternCharIndex == 38)
      {
        uint64_t v36 = 3LL;
        *a5 = U_INVALID_FORMAT_ERROR;
        if (v7) {
          icu::SimpleDateFormat::NSOverride::free(v7);
        }
LABEL_81:
        icu::UnicodeString::~UnicodeString((void *)v36, (icu::UnicodeString *)v58);
        goto LABEL_82;
      }

      sub_18085C214(v35, (icu::SharedObject **)(*(void *)(v6 + 800) + 8LL * PatternCharIndex));
    }

icu::SimpleDateFormat *icu::SimpleDateFormat::SimpleDateFormat( icu::SimpleDateFormat *this, UChar **a2, const icu::Locale *a3, UErrorCode *a4)
{
  int v8 = icu::DateFormat::DateFormat(this);
  *int v8 = off_18972B0E0;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v8 + 44), a2);
  *((void *)this + 52) = off_18971B688;
  *((_WORD *)this + 212) = 2;
  *((void *)this + 6icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = off_18971B688;
  *((_WORD *)this + 244) = 2;
  icu::Locale::Locale((icu::SimpleDateFormat *)((char *)this + 544), (uint64_t)a3);
  *((void *)this + 103) = 0LL;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 5icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  icu::UnicodeString::setToBogus((icu::SimpleDateFormat *)((char *)this + 416));
  icu::UnicodeString::setToBogus((icu::SimpleDateFormat *)((char *)this + 480));
  icu::SimpleDateFormat::initializeBooleanAttributes(this);
  icu::SimpleDateFormat::initializeCalendar(this, 0LL, (char **)this + 68, a4);
  *((void *)this + 96) = icu::DateFormatSymbols::createForLocale( (icu::SimpleDateFormat *)((char *)this + 544),  a4,  v9);
  icu::SimpleDateFormat::initialize(this, (icu::SimpleDateFormat *)((char *)this + 544), a4);
  icu::SimpleDateFormat::initializeDefaultCentury(this);
  return this;
}

UChar **icu::SimpleDateFormat::SimpleDateFormat( UChar **this, UChar **a2, UChar **a3, const icu::Locale *a4, UErrorCode *a5)
{
  unsigned int v10 = icu::DateFormat::DateFormat((icu::DateFormat *)this);
  void *v10 = off_18972B0E0;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v10 + 44), a2);
  this[52] = (UChar *)off_18971B688;
  *((_WORD *)this + 212) = 2;
  this[60] = (UChar *)off_18971B688;
  *((_WORD *)this + 244) = 2;
  icu::Locale::Locale((icu::Locale *)(this + 68), (uint64_t)a4);
  this[103] = 0LL;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 5icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  icu::UnicodeString::copyFrom(this + 52, a3, 0);
  icu::UnicodeString::setToBogus((icu::UnicodeString *)(this + 60));
  icu::SimpleDateFormat::initializeBooleanAttributes((icu::SimpleDateFormat *)this);
  icu::SimpleDateFormat::initializeCalendar((icu::SimpleDateFormat *)this, 0LL, (char **)this + 68, a5);
  this[96] = (UChar *)icu::DateFormatSymbols::createForLocale((icu::DateFormatSymbols *)(this + 68), a5, v11);
  icu::SimpleDateFormat::initialize((icu::SimpleDateFormat *)this, (const icu::Locale *)(this + 68), a5);
  icu::SimpleDateFormat::initializeDefaultCentury((icu::SimpleDateFormat *)this);
  icu::SimpleDateFormat::processOverrideString(this, a4, (const icu::UnicodeString *)a3, 2u, a5);
  return this;
}

icu::SimpleDateFormat *icu::SimpleDateFormat::SimpleDateFormat( icu::SimpleDateFormat *this, UChar **a2, icu::DateFormatSymbols *a3, UErrorCode *a4)
{
  int v8 = icu::DateFormat::DateFormat(this);
  *int v8 = off_18972B0E0;
  unsigned int v9 = icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v8 + 44), a2);
  *((void *)this + 52) = off_18971B688;
  *((_WORD *)this + 212) = 2;
  *((void *)this + 6icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = off_18971B688;
  *((_WORD *)this + 244) = 2;
  Default = icu::Locale::getDefault(v9);
  icu::Locale::Locale((icu::SimpleDateFormat *)((char *)this + 544), (uint64_t)Default);
  *((void *)this + 96) = a3;
  *((void *)this + 97) = 0LL;
  *((void *)this + 103) = 0LL;
  *((_OWORD *)this + 5icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  icu::UnicodeString::setToBogus((icu::SimpleDateFormat *)((char *)this + 416));
  icu::UnicodeString::setToBogus((icu::SimpleDateFormat *)((char *)this + 480));
  icu::SimpleDateFormat::initializeBooleanAttributes(this);
  icu::SimpleDateFormat::initializeCalendar(this, 0LL, (char **)this + 68, a4);
  icu::SimpleDateFormat::initialize(this, (icu::SimpleDateFormat *)((char *)this + 544), a4);
  icu::SimpleDateFormat::initializeDefaultCentury(this);
  return this;
}

icu::SimpleDateFormat *icu::SimpleDateFormat::SimpleDateFormat( icu::SimpleDateFormat *this, UChar **a2, const icu::DateFormatSymbols *a3, UErrorCode *a4)
{
  int v8 = icu::DateFormat::DateFormat(this);
  *int v8 = off_18972B0E0;
  unsigned int v9 = icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v8 + 44), a2);
  *((void *)this + 52) = off_18971B688;
  *((_WORD *)this + 212) = 2;
  *((void *)this + 6icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = off_18971B688;
  *((_WORD *)this + 244) = 2;
  Default = icu::Locale::getDefault(v9);
  icu::Locale::Locale((icu::SimpleDateFormat *)((char *)this + 544), (uint64_t)Default);
  int v13 = (icu::DateFormatSymbols *)icu::UMemory::operator new(v12, (icu::UMemory *)0x4F8, v11);
  if (v13) {
    int v13 = icu::DateFormatSymbols::DateFormatSymbols(v13, a3);
  }
  *((void *)this + 96) = v13;
  *((void *)this + 97) = 0LL;
  *((void *)this + 103) = 0LL;
  *((_OWORD *)this + 5icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  icu::UnicodeString::setToBogus((icu::SimpleDateFormat *)((char *)this + 416));
  icu::UnicodeString::setToBogus((icu::SimpleDateFormat *)((char *)this + 480));
  icu::SimpleDateFormat::initializeBooleanAttributes(this);
  icu::SimpleDateFormat::initializeCalendar(this, 0LL, (char **)this + 68, a4);
  icu::SimpleDateFormat::initialize(this, (icu::SimpleDateFormat *)((char *)this + 544), a4);
  icu::SimpleDateFormat::initializeDefaultCentury(this);
  return this;
}

uint64_t icu::SimpleDateFormat::SimpleDateFormat( uint64_t a1, unsigned int a2, signed int a3, uint64_t a4, UErrorCode *a5)
{
  unsigned int v10 = icu::DateFormat::DateFormat((icu::DateFormat *)a1);
  void *v10 = off_18972B0E0;
  v10[44] = off_18971B688;
  *((_WORD *)v10 + 18icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
  v10[52] = off_18971B688;
  *((_WORD *)v10 + 212) = 2;
  v10[60] = off_18971B688;
  *((_WORD *)v10 + 244) = 2;
  uint64_t v11 = (uint64_t)(v10 + 68);
  icu::Locale::Locale((icu::Locale *)(v10 + 68), a4);
  *(void *)(a1 + 824) = 0LL;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 80icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  icu::SimpleDateFormat::initializeBooleanAttributes((icu::SimpleDateFormat *)a1);
  icu::SimpleDateFormat::construct((UChar **)a1, a2, a3, v11, a5);
  return a1;
}

icu::SimpleDateFormat *icu::SimpleDateFormat::SimpleDateFormat( icu::SimpleDateFormat *this, const icu::Locale *a2, UErrorCode *a3)
{
  uint64_t v6 = icu::DateFormat::DateFormat(this);
  *uint64_t v6 = off_18972B0E0;
  icu::UnicodeString::UnicodeString((uint64_t)(v6 + 44), (uint64_t)&unk_180A3CCCA);
  *((void *)this + 52) = off_18971B688;
  *((_WORD *)this + 212) = 2;
  *((void *)this + 6icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = off_18971B688;
  *((_WORD *)this + 244) = 2;
  icu::Locale::Locale((icu::SimpleDateFormat *)((char *)this + 544), (uint64_t)a2);
  *((void *)this + 103) = 0LL;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 5icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  if (*(int *)a3 <= 0)
  {
    icu::SimpleDateFormat::initializeBooleanAttributes(this);
    icu::SimpleDateFormat::initializeCalendar(this, 0LL, (char **)this + 68, a3);
    int v8 = icu::DateFormatSymbols::createForLocale((icu::SimpleDateFormat *)((char *)this + 544), a3, v7);
    *((void *)this + 96) = v8;
    unsigned int v10 = (uint64_t *)*(unsigned int *)a3;
    if ((int)v10 >= 1)
    {
      *a3 = U_ZERO_ERROR;
      if (v8)
      {
        icu::DateFormatSymbols::~DateFormatSymbols((icu::DateFormatSymbols *)v8);
        icu::UMemory::operator delete(v11);
      }

      int v12 = (void *)((char *)this + 768);
      int v13 = (icu::DateFormatSymbols *)icu::UMemory::operator new(v10, (icu::UMemory *)0x4F8, v9);
      if (!v13)
      {
        void *v12 = 0LL;
        *a3 = U_MEMORY_ALLOCATION_ERROR;
        return this;
      }

      void *v12 = icu::DateFormatSymbols::DateFormatSymbols(v13, a3);
    }

    icu::UnicodeString::setToBogus((icu::SimpleDateFormat *)((char *)this + 416));
    icu::UnicodeString::setToBogus((icu::SimpleDateFormat *)((char *)this + 480));
    icu::SimpleDateFormat::initialize(this, (icu::SimpleDateFormat *)((char *)this + 544), a3);
  }

  return this;
}

uint64_t icu::SimpleDateFormat::SimpleDateFormat( icu::SimpleDateFormat *this, const icu::SimpleDateFormat *a2)
{
  uint64_t v4 = icu::DateFormat::DateFormat(this, a2);
  *uint64_t v4 = off_18972B0E0;
  v4[44] = off_18971B688;
  *((_WORD *)v4 + 18icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
  v4[52] = off_18971B688;
  *((_WORD *)v4 + 212) = 2;
  v4[60] = off_18971B688;
  *((_WORD *)v4 + 244) = 2;
  icu::Locale::Locale((icu::Locale *)(v4 + 68), (uint64_t)a2 + 544);
  *((void *)this + 103) = 0LL;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 5icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  icu::SimpleDateFormat::initializeBooleanAttributes(this);
  return icu::SimpleDateFormat::operator=((uint64_t)this, (uint64_t)a2, v5);
}

uint64_t icu::SimpleDateFormat::operator=@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (a1 != a2)
  {
    int v5 = *(void **)(a1 + 808);
    if (v5)
    {
      icu::number::SimpleNumberFormatter::cleanup(*(icu::number::SimpleNumberFormatter **)(a1 + 808), a3);
      icu::UMemory::operator delete(v5);
    }

    *(void *)(a1 + 808) = 0LL;
    icu::DateFormat::operator=((void *)a1, (void *)a2);
    icu::UnicodeString::operator=((UChar **)(a1 + 416), (UChar **)(a2 + 416));
    icu::UnicodeString::operator=((UChar **)(a1 + 480), (UChar **)(a2 + 480));
    int v7 = *(icu::DateFormatSymbols **)(a1 + 768);
    if (v7)
    {
      icu::DateFormatSymbols::~DateFormatSymbols(v7);
      icu::UMemory::operator delete(v8);
    }

    *(void *)(a1 + 768) = 0LL;
    unint64_t v9 = *(uint64_t **)(a2 + 768);
    if (v9)
    {
      unsigned int v10 = (icu::DateFormatSymbols *)icu::UMemory::operator new(v9, (icu::UMemory *)0x4F8, v6);
      if (v10) {
        unsigned int v10 = icu::DateFormatSymbols::DateFormatSymbols(v10, *(const icu::DateFormatSymbols **)(a2 + 768));
      }
      *(void *)(a1 + 768) = v10;
    }

    *(void *)(a1 + 784) = *(void *)(a2 + 784);
    *(_DWORD *)(a1 + 796) = *(_DWORD *)(a2 + 796);
    *(_BYTE *)(a1 + 816) = *(_BYTE *)(a2 + 816);
    icu::UnicodeString::operator=((UChar **)(a1 + 352), (UChar **)(a2 + 352));
    *(_WORD *)(a1 + 792) = *(_WORD *)(a2 + 792);
    *(_BYTE *)(a1 + 795) = *(_BYTE *)(a2 + 795);
    icu::Locale::operator=((icu::Locale *)(a1 + 544), a2 + 544);
    uint64_t v11 = *(void *)(a1 + 776);
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
    }
    *(void *)(a1 + 776) = 0LL;
    umtx_lock((icu::UMutex *)&unk_18C449838);
    int v12 = *(const icu::TimeZoneFormat **)(a2 + 776);
    umtx_unlock((std::mutex **)&unk_18C449838);
    if (v12)
    {
      int v15 = (icu::TimeZoneFormat *)icu::UMemory::operator new(v14, (icu::UMemory *)0x530, v13);
      if (v15) {
        int v15 = (icu::TimeZoneFormat *)icu::TimeZoneFormat::TimeZoneFormat(v15, v12);
      }
      *(void *)(a1 + 776) = v15;
    }

    uint64_t v16 = *(void *)(a2 + 824);
    if (v16) {
      *(void *)(a1 + 824) = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 32LL))(v16);
    }
    int v17 = *(char **)(a1 + 800);
    if (v17)
    {
      sub_18098624C(v17);
      *(void *)(a1 + 80icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
    }

    if (*(void *)(a2 + 800))
    {
      int v18 = uprv_malloc(0x130uLL);
      if (v18)
      {
        uint64_t v19 = 0LL;
        v18[17] = 0u;
        v18[18] = 0u;
        v18[15] = 0u;
        v18[16] = 0u;
        v18[13] = 0u;
        v18[14] = 0u;
        v18[11] = 0u;
        v18[12] = 0u;
        v18[9] = 0u;
        v18[10] = 0u;
        v18[7] = 0u;
        v18[8] = 0u;
        v18[5] = 0u;
        _OWORD v18[6] = 0u;
        v18[3] = 0u;
        _OWORD v18[4] = 0u;
        v18[1] = 0u;
        v18[2] = 0u;
        _OWORD *v18 = 0u;
        *(void *)(a1 + 80icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v18;
        do
        {
          sub_18085C214( *(icu::SharedObject **)(*(void *)(a2 + 800) + v19),  (icu::SharedObject **)(*(void *)(a1 + 800) + v19));
          v19 += 8LL;
        }

        while (v19 != 304);
      }

      else
      {
        *(void *)(a1 + 80icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
      }
    }

    UErrorCode v21 = U_ZERO_ERROR;
    icu::SimpleDateFormat::initSimpleNumberFormatter((icu::SimpleDateFormat *)a1, &v21);
  }

  return a1;
}

void icu::SimpleDateFormat::initSimpleNumberFormatter(icu::SimpleDateFormat *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    int v3 = (const void *)*((void *)this + 42);
    if (v3)
    {
      if (v5)
      {
        uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)v5 + 320LL))(v5);
        if (v6)
        {
          uint64_t v9 = v6;
          unsigned int v10 = icu::UMemory::operator new(v8, (icu::UMemory *)0x20, v7);
          if (v10)
          {
            uint64_t v11 = v10;
            icu::number::SimpleNumberFormatter::forLocaleAndSymbolsAndGroupingStrategy( (icu::SimpleDateFormat *)((char *)this + 544),  v9,  0,  (int *)a2,  v10);
            *((void *)this + 10icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v11;
          }

          else
          {
            *((void *)this + 10icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0LL;
            *a2 = U_MEMORY_ALLOCATION_ERROR;
          }
        }
      }
    }
  }

icu::SimpleDateFormat *icu::SimpleDateFormat::clone@<X0>( icu::SimpleDateFormat *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::SimpleDateFormat *)icu::UMemory::operator new(a3, (icu::UMemory *)0x340, a2);
  if (result) {
    return (icu::SimpleDateFormat *)icu::SimpleDateFormat::SimpleDateFormat(result, this);
  }
  return result;
}

uint64_t icu::SimpleDateFormat::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result = icu::DateFormat::operator==(a1, a2);
  if (!(_DWORD)result) {
    return result;
  }
  unsigned int v5 = *(unsigned __int16 *)(a1 + 360);
  if ((v5 & 1) != 0)
  {
    if ((*(_WORD *)(a2 + 360) & 1) == 0) {
      return 0LL;
    }
    goto LABEL_14;
  }

  if ((v5 & 0x8000) != 0) {
    int v6 = *(_DWORD *)(a1 + 364);
  }
  else {
    int v6 = v5 >> 5;
  }
  uint64_t result = 0LL;
  unsigned int v7 = *(unsigned __int16 *)(a2 + 360);
  if ((v7 & 0x8000u) == 0) {
    unsigned int v8 = v7 >> 5;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a2 + 364);
  }
  if ((v7 & 1) == 0 && v6 == v8)
  {
    uint64_t result = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 352), (const icu::UnicodeString *)(a2 + 352), v6);
    if ((_DWORD)result)
    {
LABEL_14:
      uint64_t result = *(void *)(a1 + 768);
      if (!result) {
        return result;
      }
      uint64_t v9 = *(void *)(a2 + 768);
      if (v9)
      {
        uint64_t result = icu::DateFormatSymbols::operator==(result, v9);
        if (!(_DWORD)result) {
          return result;
        }
        if (*(unsigned __int8 *)(a1 + 816) == *(unsigned __int8 *)(a2 + 816)
          && *(double *)(a1 + 784) == *(double *)(a2 + 784))
        {
          uint64_t v10 = *(void *)(a1 + 776);
          uint64_t v11 = *(void *)(a2 + 776);
          if (v10)
          {
            if (v11)
            {
              uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 24LL))(v10);
              if (!(_DWORD)result) {
                return result;
              }
              goto LABEL_26;
            }
          }

          else if (!v11)
          {
LABEL_26:
            uint64_t result = sub_1807FF934(a1 + 416, a2 + 416);
            if ((_DWORD)result)
            {
              uint64_t result = sub_1807FF934(a1 + 480, a2 + 480);
              if ((_DWORD)result) {
                return (*(_BYTE *)(a1 + 795) != 0) ^ (*(_BYTE *)(a2 + 795) == 0);
              }
            }

            return result;
          }
        }
      }

      return 0LL;
    }
  }

  return result;
}

uint64_t icu::SimpleDateFormat::getPatternForTimeStyle@<X0>( uint64_t a1@<X0>, unsigned int a2@<W1>, char **a3@<X2>, uint64_t a4@<X3>, icu::UnicodeString *a5@<X4>, int *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  *(_OWORD *)(a7 + 8) = 0u;
  *(void *)(a7 + 56) = 0LL;
  *(_OWORD *)(a7 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *(_OWORD *)(a7 + 24) = 0u;
  *(void *)a7 = off_18971B688;
  *(_WORD *)(a7 + 8) = 2;
  if (a2 <= 3)
  {
    memset(v29, 0, 157);
    Baseuint64_t Name = v29;
    int v15 = ulocimp_setRegionToSupplementalRegion(a3[5], v29, 157);
    if (*a6 > 0 || v15 <= 0) {
      Baseuint64_t Name = (char *)icu::Locale::getBaseName((icu::Locale *)a3);
    }
    UErrorCode v24 = U_ZERO_ERROR;
    uint64_t result = icu::Locale::getKeywordValue(a3, "hours", 0LL, 0, &v24);
    if (BaseName)
    {
      if (*BaseName)
      {
        int v17 = result;
        uint64_t result = strcmp(BaseName, "und");
        if ((_DWORD)result)
        {
          UErrorCode v23 = U_ZERO_ERROR;
          uint64_t result = icu::Format::getLocaleID(a1, 1, (int *)&v23);
          if (v17 > 0 || v23 <= U_ZERO_ERROR && (uint64_t result = strcmp((const char *)result, BaseName), (_DWORD)result))
          {
            *(void *)__s2 = 0LL;
            memset(v28, 0, 14);
            uloc_minimizeSubtags(BaseName, __s2, 22, &v23);
            BYTE5(v28[1]) = 0;
            uint64_t result = icu::Format::getLocaleID(a1, 0, (int *)&v23);
            if (v23 <= U_ZERO_ERROR)
            {
              uint64_t result = strcmp((const char *)result, __s2);
              if (!(_DWORD)result && v17 <= 0) {
                goto LABEL_20;
              }
            }

            else if (v17 < 1)
            {
              goto LABEL_20;
            }

            uint64_t result = (uint64_t)icu::DateTimePatternGenerator::createInstance((const char **)a3, &v23, (UErrorCode *)1);
            int v18 = (icu::DateTimePatternGenerator *)result;
            if (v23 <= U_ZERO_ERROR)
            {
              memset(v26, 0, sizeof(v26));
              uint64_t v22 = off_18972B220[a2];
              icu::UnicodeString::UnicodeString(v26, 1LL, &v22);
              icu::DateTimePatternGenerator::getBestPattern( v18,  (const icu::UnicodeString *)v26,  &v23,  (icu::UnicodeString *)v25);
              icu::UnicodeString::operator=((icu::UnicodeString *)a7, (icu::UnicodeString *)v25);
              icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v25);
              uint64_t result = (uint64_t)icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v26);
            }

            if (v18) {
              uint64_t result = (*(uint64_t (**)(icu::DateTimePatternGenerator *))(*(void *)v18 + 8LL))(v18);
            }
          }
        }
      }
    }

void *icu::SimpleDateFormat::getPatternForDateStyle@<X0>( signed int a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _BYTE *a4@<X4>, UChar **a5@<X5>, int *a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v47 = *MEMORY[0x1895F89C0];
  uint64_t v46 = 0LL;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v43 = 0u;
  int v42 = (UChar *)off_18971B688;
  LOWORD(v43) = 2;
  memset(v41, 0, sizeof(v41));
  icu::SimpleDateFormat::getPatternString(a1, a2, (icu::UnicodeString *)&v42, a6, (uint64_t)v41);
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)a7 = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)a7, (UChar **)v41);
  icu::UnicodeString::operator=(a5, &v42);
  unint64_t v14 = *a4;
  if (*a4)
  {
    *a4 = 0;
    unint64_t v14 = a1 & 0xFFFFFFFE;
    if ((_DWORD)v14 == 6)
    {
      __int128 v37 = 0u;
      uint64_t v40 = 0LL;
      __int128 v39 = 0u;
      __int128 v38 = 0u;
      uint64_t v36 = (UChar *)off_18971B688;
      LOWORD(v37) = 2;
      memset(v35, 0, sizeof(v35));
      icu::SimpleDateFormat::getPatternString(a1, a3, (icu::UnicodeString *)&v36, a6, (uint64_t)v35);
      LocaleByint Type = (char *)ures_getLocaleByType(a3, 0, a6);
      if (uloc_isRightToLeft(LocaleByType))
      {
        uint64_t v16 = (char *)ures_getLocaleByType(a2, 0, a6);
        BOOL v17 = uloc_isRightToLeft(v16) == 0;
      }

      else
      {
        BOOL v17 = 0;
      }

      uint64_t v18 = *a6;
      if (sub_1808EF794((icu::UnicodeString *)v35))
      {
        icu::UnicodeString::operator=(a5, &v36);
        icu::UnicodeString::operator=((UChar **)a7, (UChar **)v35);
        uint64_t v18 = 1LL;
        *a4 = 1;
        if (!v17)
        {
LABEL_7:
          icu::UnicodeString::~UnicodeString((void *)v18, (icu::UnicodeString *)v35);
          icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v36);
          goto LABEL_8;
        }

        icu::UnicodeString::UnicodeString((uint64_t)v32, 8207);
        uint64_t v30 = off_18971B688;
        __int16 v31 = 2;
        unsigned int v22 = *(unsigned __int16 *)(a7 + 8);
        int v23 = (__int16)v22;
        int32_t v24 = v22 >> 5;
        if (v23 >= 0) {
          int32_t v25 = v24;
        }
        else {
          int32_t v25 = *(_DWORD *)(a7 + 12);
        }
        if ((v33 & 0x8000u) == 0) {
          uint64_t v26 = v33 >> 5;
        }
        else {
          uint64_t v26 = v34;
        }
        icu::UnicodeString::findAndReplace( (icu::UnicodeString *)a7,  0,  v25,  (const icu::UnicodeString *)v32,  0,  v26,  (const icu::UnicodeString *)&v30,  0,  0);
      }

      else
      {
        if (a1 != 6) {
          goto LABEL_7;
        }
        if (!sub_1808EF794((icu::UnicodeString *)v41)) {
          goto LABEL_7;
        }
        icu::SimpleDateFormat::getPatternString(7, a3, (icu::UnicodeString *)&v36, a6, (uint64_t)v32);
        icu::UnicodeString::operator=((icu::UnicodeString *)v35, (icu::UnicodeString *)v32);
        icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v32);
        if (!sub_1808EF794((icu::UnicodeString *)v35)) {
          goto LABEL_7;
        }
        icu::UnicodeString::operator=(a5, &v36);
        icu::UnicodeString::operator=((UChar **)a7, (UChar **)v35);
        uint64_t v18 = 1LL;
        *a4 = 1;
        if (!v17) {
          goto LABEL_7;
        }
        icu::UnicodeString::UnicodeString((uint64_t)v32, 8207);
        uint64_t v30 = off_18971B688;
        __int16 v31 = 2;
        sub_1808C1364(a7, (icu::UnicodeString *)v32, (icu::UnicodeString *)&v30);
      }

      icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v30);
      icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v32);
      goto LABEL_7;
    }
  }

void icu::SimpleDateFormat::getPatternString( signed int a1@<W1>, uint64_t a2@<X2>, icu::UnicodeString *a3@<X3>, int *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  *(_OWORD *)(a5 + 8) = 0u;
  *(void *)(a5 + 56) = 0LL;
  *(_OWORD *)(a5 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *(_OWORD *)(a5 + 24) = 0u;
  *(void *)a5 = off_18971B688;
  *(_WORD *)(a5 + 8) = 2;
  unsigned int v8 = ures_getByIndex(a2, a1, 0LL, a4);
  uint64_t v9 = (uint64_t)v8;
  if ((*((_WORD *)a3 + 4) & 1) != 0) {
    __int16 v10 = 2;
  }
  else {
    __int16 v10 = *((_WORD *)a3 + 4) & 0x1F;
  }
  *((_WORD *)a3 + 4) = v10;
  if (*a4 >= 1)
  {
LABEL_5:
    *a4 = 3;
    if (!v9) {
      return;
    }
    goto LABEL_6;
  }

  int Type = ures_getType((uint64_t)v8);
  if (Type == 8)
  {
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    uint64_t v24 = 0LL;
    unsigned int v20 = off_18971B688;
    LOWORD(v2icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 2;
    int v19 = 0;
    StringByIndex = ures_getStringByIndex(v9, 0, &v19, a4);
    if (*a4 <= 0)
    {
      uint64_t v18 = StringByIndex;
      icu::UnicodeString::setTo((icu::UnicodeString *)&v20, 1, &v18, v19);
    }

    else
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)&v20);
    }

    icu::UnicodeString::operator=((icu::UnicodeString *)a5, (icu::UnicodeString *)&v20);
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v20);
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    uint64_t v24 = 0LL;
    unsigned int v20 = off_18971B688;
    LOWORD(v2icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 2;
    int v19 = 0;
    uint64_t v16 = ures_getStringByIndex(v9, 1, &v19, a4);
    if (*a4 <= 0)
    {
      uint64_t v18 = v16;
      icu::UnicodeString::setTo((icu::UnicodeString *)&v20, 1, &v18, v19);
    }

    else
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)&v20);
    }

    unint64_t v14 = a3;
  }

  else
  {
    if (Type) {
      goto LABEL_5;
    }
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    uint64_t v24 = 0LL;
    unsigned int v20 = off_18971B688;
    LOWORD(v2icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 2;
    int v19 = 0;
    String = ures_getString(v9, &v19, a4);
    if (*a4 <= 0)
    {
      uint64_t v18 = String;
      icu::UnicodeString::setTo((icu::UnicodeString *)&v20, 1, &v18, v19);
    }

    else
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)&v20);
    }

    unint64_t v14 = (icu::UnicodeString *)a5;
  }

  icu::UnicodeString::operator=(v14, (icu::UnicodeString *)&v20);
  icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v20);
  if (!v9) {
    return;
  }
LABEL_6:
  ures_close(v9);
}

icu::UnicodeString *icu::SimpleDateFormat::parsePattern(icu::UnicodeString *this)
{
  uint64_t v1 = (uint64_t)this;
  *((_WORD *)this + 396) = 0;
  *((_BYTE *)this + 794) = 0;
  unsigned int v2 = *((unsigned __int16 *)this + 180);
  if ((v2 & 0x8000) != 0) {
    int v3 = *((_DWORD *)this + 91);
  }
  else {
    int v3 = v2 >> 5;
  }
  if (v3 >= 1)
  {
    unint64_t v4 = 0LL;
    BOOL v5 = 0;
    uint64_t v6 = v3;
    do
    {
      unsigned int v7 = *(unsigned __int16 *)(v1 + 360);
      else {
        unsigned int v8 = v7 >> 5;
      }
      if (v4 >= v8) {
        goto LABEL_26;
      }
      uint64_t v9 = v1 + 362;
      if ((v7 & 2) == 0) {
        uint64_t v9 = *(void *)(v1 + 376);
      }
      __int16 v10 = *(_WORD *)(v9 + 2 * v4);
      if (v10 == 39) {
        BOOL v5 = !v5;
      }
      if (v10 == 24180)
      {
        *(_BYTE *)(v1 + 794) = 1;
      }

      else
      {
        if (!v5)
        {
          if (v10 != 8239)
          {
            if (v10 == 115)
            {
              BOOL v5 = 0;
              *(_BYTE *)(v1 + 793) = 1;
            }

            else
            {
              BOOL v5 = 0;
              if (v10 == 109) {
                *(_BYTE *)(v1 + 792) = 1;
              }
            }

            goto LABEL_26;
          }

void icu::SimpleDateFormat::initNumberFormatters( icu::SimpleDateFormat *this, const icu::Locale *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0 && ((*((_WORD *)this + 212) & 1) == 0 || (*((_WORD *)this + 244) & 1) == 0))
  {
    umtx_lock((icu::UMutex *)&unk_18C449838);
    if (!*((void *)this + 100))
    {
      uint64_t v6 = uprv_malloc(0x130uLL);
      if (v6)
      {
        v6[17] = 0u;
        v6[18] = 0u;
        v6[15] = 0u;
        v6[16] = 0u;
        v6[13] = 0u;
        v6[14] = 0u;
        _OWORD v6[11] = 0u;
        v6[12] = 0u;
        v6[9] = 0u;
        v6[10] = 0u;
        v6[7] = 0u;
        _OWORD v6[8] = 0u;
        v6[5] = 0u;
        _OWORD v6[6] = 0u;
        v6[3] = 0u;
        v6[4] = 0u;
        v6[1] = 0u;
        v6[2] = 0u;
        *uint64_t v6 = 0u;
        *((void *)this + 10icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v6;
      }

      else
      {
        *((void *)this + 10icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
        *a3 = U_MEMORY_ALLOCATION_ERROR;
      }
    }

    umtx_unlock((std::mutex **)&unk_18C449838);
    if (*(int *)a3 <= 0)
    {
      icu::SimpleDateFormat::processOverrideString(this, a2, (icu::SimpleDateFormat *)((char *)this + 416), 0, a3);
      icu::SimpleDateFormat::processOverrideString(this, a2, (icu::SimpleDateFormat *)((char *)this + 480), 1u, a3);
    }
  }

uint64_t icu::SimpleDateFormat::parseAmbiguousDatesAsAfter(uint64_t this, double a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v4 = this;
    this = *(void *)(this + 328);
    if (this)
    {
      this = icu::Calendar::setTimeInMillis(this, a2, a3);
      if (*(int *)a3 <= 0)
      {
        *(_BYTE *)(v4 + 816) = 1;
        *(double *)(v4 + 784) = a2;
        this = icu::Calendar::get(*(_BYTE **)(v4 + 328), 1u, a3);
        *(_DWORD *)(v4 + 796) = this;
      }
    }

    else
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }

  return this;
}

icu::UnicodeString *icu::SimpleDateFormat::format( icu::SimpleDateFormat *this, icu::Calendar *a2, icu::UnicodeString *a3, icu::FieldPosition *a4)
{
  UErrorCode v9 = U_ZERO_ERROR;
  memset(v8, 0, sizeof(v8));
  sub_1808F70B8((uint64_t)v8, (uint64_t)a4);
  icu::SimpleDateFormat::_format(this, a2, a3, (icu::FieldPositionHandler *)v8, &v9);
  nullsub_32(v8);
  return a3;
}

icu::UnicodeString *icu::SimpleDateFormat::_format( icu::SimpleDateFormat *this, icu::Calendar *a2, icu::UnicodeString *a3, icu::FieldPositionHandler *a4, UErrorCode *a5)
{
  if (*((icu::Calendar **)this + 41) == a2
    || (__int16 v10 = (const char *)(*(uint64_t (**)(icu::Calendar *))(*(void *)a2 + 184LL))(a2),
        uint64_t v11 = (const char *)(*(uint64_t (**)(void))(**((void **)this + 41) + 184LL))(*((void *)this + 41)),
        !strcmp(v10, v11)))
  {
    unsigned __int16 v33 = a2;
    unsigned int v34 = a4;
    uint64_t v32 = 0LL;
  }

  else
  {
    uint64_t v12 = (*(uint64_t (**)(void))(**((void **)this + 41) + 24LL))(*((void *)this + 41));
    if (!v12)
    {
      *a5 = U_MEMORY_ALLOCATION_ERROR;
      return a3;
    }

    uint64_t v13 = v12;
    unsigned int v34 = a4;
    double TimeInMillis = icu::Calendar::getTimeInMillis(a2, a5);
    icu::Calendar::setTimeInMillis(v13, TimeInMillis, a5);
    uint64_t TimeZone = icu::Calendar::getTimeZone(a2);
    icu::Calendar::setTimeZone(v13, TimeZone);
    uint64_t v32 = v13;
    unsigned __int16 v33 = (icu::Calendar *)v13;
  }

  unsigned int v35 = (*(uint64_t (**)(icu::SimpleDateFormat *, uint64_t, UErrorCode *))(*(void *)this + 208LL))( this,  1LL,  a5);
  BOOL v16 = 0;
  UChar v17 = 0;
  uint64_t v18 = 0LL;
  uint64_t v19 = 0LL;
  for (int i = 0; ; ++i)
  {
    unsigned int v21 = *((unsigned __int16 *)this + 180);
    unsigned int v23 = v21 >> 5;
LABEL_20:
    if (v23 <= i)
    {
      unsigned int v26 = 0xFFFF;
    }

    else
    {
      uint64_t v25 = (char *)this + 362;
      if ((v21 & 2) == 0) {
        uint64_t v25 = (char *)*((void *)this + 47);
      }
      unsigned int v26 = *(unsigned __int16 *)&v25[2 * i];
    }

    if (v26 != v17 && (int)v18 >= 1)
    {
      icu::SimpleDateFormat::subFormat((uint64_t)this, (uint64_t)a3, v17, v18, v35, v19, v17, (uint64_t)v34, v33, a5);
      uint64_t v18 = 0LL;
      uint64_t v19 = (v19 + 1);
    }

    if (v26 == 39)
    {
      uint64_t v27 = i + 1LL;
      unsigned int v28 = *((unsigned __int16 *)this + 180);
      if (*((__int16 *)this + 180) < 0)
      {
        int v29 = *((_DWORD *)this + 91);
        if ((int)v27 < v29)
        {
LABEL_38:
          if (v29 > v27)
          {
            uint64_t v30 = (char *)this + 362;
            if ((v28 & 2) == 0) {
              uint64_t v30 = (char *)*((void *)this + 47);
            }
            if (*(_WORD *)&v30[2 * v27] == 39)
            {
              __int16 v36 = 39;
              icu::UnicodeString::doAppend((uint64_t)a3, (uint64_t)&v36, 0, 1LL);
              ++i;
              continue;
            }
          }
        }
      }

      else if ((int)v27 < (int)(v28 >> 5))
      {
        int v29 = v28 >> 5;
        goto LABEL_38;
      }

      BOOL v16 = !v16;
      continue;
    }

    if (v16 || v26 > 0x7F || !byte_180A3CF5C[v26])
    {
      __int16 v37 = v26;
      icu::UnicodeString::doAppend((uint64_t)a3, (uint64_t)&v37, 0, 1LL);
    }

    else
    {
      BOOL v16 = 0;
      uint64_t v18 = (v18 + 1);
      UChar v17 = v26;
    }
  }

  unsigned int v23 = *((_DWORD *)this + 91);
LABEL_45:
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8LL))(v32);
  }
  return a3;
}

icu::UnicodeString *icu::SimpleDateFormat::format( icu::SimpleDateFormat *this, icu::Calendar *a2, icu::UnicodeString *a3, icu::FieldPositionIterator *a4, UErrorCode *a5)
{
  uint64_t v11 = 0LL;
  memset(v10, 0, sizeof(v10));
  icu::FieldPositionIteratorHandler::FieldPositionIteratorHandler((icu::FieldPositionIteratorHandler *)v10, a4, a5);
  icu::SimpleDateFormat::_format(this, a2, a3, (icu::FieldPositionHandler *)v10, a5);
  icu::FieldPositionIteratorHandler::~FieldPositionIteratorHandler((icu::FieldPositionIteratorHandler *)v10);
  return a3;
}

uint64_t icu::SimpleDateFormat::subFormat( uint64_t result, uint64_t a2, int a3, uint64_t a4, unsigned int a5, uint64_t a6, UChar a7, uint64_t a8, icu::Calendar *a9, UErrorCode *a10)
{
  uint64_t v174 = *MEMORY[0x1895F89C0];
  uint64_t v14 = result;
  unsigned int PatternCharIndex = icu::DateFormatSymbols::getPatternCharIndex(a3);
  unsigned int v16 = *(unsigned __int16 *)(a2 + 8);
  int v17 = (__int16)v16;
  unsigned int v18 = v16 >> 5;
  if (v17 < 0) {
    unsigned int v18 = *(_DWORD *)(a2 + 12);
  }
  unsigned int v168 = v18;
  uint64_t v19 = (const char *)(*(uint64_t (**)(icu::Calendar *))(*(void *)a9 + 184LL))(a9);
  int v20 = strcmp(v19, "hebrew");
  unsigned int v21 = (const char *)(*(uint64_t (**)(icu::Calendar *))(*(void *)a9 + 184LL))(a9);
  uint64_t result = strcmp(v21, "chinese");
  if ((_DWORD)result)
  {
    __int128 v22 = (const char *)(*(uint64_t (**)(icu::Calendar *))(*(void *)a9 + 184LL))(a9);
    uint64_t result = strcmp(v22, "dangi");
    BOOL v23 = result == 0;
  }

  else
  {
    BOOL v23 = 1;
  }

  if (PatternCharIndex == 38)
  {
    if (a3 == 108) {
      return result;
    }
    int v24 = 3;
LABEL_28:
    *a10 = v24;
    return result;
  }

  if (PatternCharIndex > 0x22)
  {
    uint64_t result = 0LL;
  }

  else if (PatternCharIndex == 34)
  {
    uint64_t result = (*(uint64_t (**)(icu::Calendar *, UErrorCode *))(*(void *)a9 + 424LL))(a9, a10);
  }

  else
  {
    uint64_t result = icu::Calendar::get(a9, icu::SimpleDateFormat::fgPatternIndexToCalendarField[PatternCharIndex], a10);
  }

  if (*(int *)a10 <= 0)
  {
    uint64_t v25 = *(void *)(v14 + 800);
    if (v25 && (uint64_t v26 = *(void *)(v25 + 8LL * PatternCharIndex)) != 0) {
      uint64_t v27 = (icu::NumberFormat **)(v26 + 24);
    }
    else {
      uint64_t v27 = (icu::NumberFormat **)(v14 + 336);
    }
    unsigned int v28 = *v27;
    if (!v28)
    {
      int v24 = 5;
      goto LABEL_28;
    }

    lpsrc = v28;
    signed int v166 = result;
    memset(v173, 0, sizeof(v173));
    icu::UnicodeString::UnicodeString(v173, "hebr", 4LL, 0LL);
    switch(PatternCharIndex)
    {
      case 0u:
        if (v23)
        {
          unsigned int v35 = (icu::SimpleDateFormat *)v14;
          __int16 v36 = lpsrc;
          __int16 v37 = (icu::UnicodeString *)a2;
          uint64_t v38 = v166;
          uint64_t v39 = 1LL;
          uint64_t v40 = 9LL;
          goto LABEL_70;
        }

        uint64_t v46 = v168;
        if ((_DWORD)a4 == 4)
        {
          sub_18098A560( a2,  v166,  *(void *)(*(void *)(v14 + 768) + 24LL),  *(_DWORD *)(*(void *)(v14 + 768) + 32LL));
          unsigned int v32 = 7;
        }

        else if ((_DWORD)a4 == 5)
        {
          sub_18098A560( a2,  v166,  *(void *)(*(void *)(v14 + 768) + 40LL),  *(_DWORD *)(*(void *)(v14 + 768) + 48LL));
          unsigned int v32 = 9;
        }

        else
        {
          sub_18098A560(a2, v166, *(void *)(*(void *)(v14 + 768) + 8LL), *(_DWORD *)(*(void *)(v14 + 768) + 16LL));
          unsigned int v32 = 8;
        }

        goto LABEL_191;
      case 1u:
      case 0x12u:
        goto LABEL_56;
      case 2u:
      case 0x1Au:
        if (v20)
        {
          unsigned int v34 = v166;
        }

        else
        {
          unint64_t v70 = (icu::HebrewCalendar *)icu::Calendar::get(a9, 1u, a10);
          BOOL isLeapYear = icu::HebrewCalendar::isLeapYear(v70);
          else {
            int v74 = 13;
          }
          __int128 v75 = (icu::HebrewCalendar *)icu::Calendar::get(a9, 1u, a10);
          BOOL v78 = !icu::HebrewCalendar::isLeapYear(v75) && v74 > 5 && (int)a4 < 3;
          unsigned int v34 = v74 - v78;
        }

        uint64_t v79 = *(void *)(v14 + 768);
        if (*(void *)(v79 + 472) && *(int *)(v79 + 480) >= 7)
        {
          unsigned int v80 = v34;
          int v81 = icu::Calendar::get(a9, 0x16u, a10);
          unsigned int v34 = v80;
          int v82 = v81;
        }

        else
        {
          int v82 = 0;
        }

        switch((_DWORD)a4)
        {
          case 3:
            uint64_t v102 = *(void *)(v14 + 768);
            if (PatternCharIndex == 2)
            {
              uint64_t v103 = *(void *)(v102 + 72);
              int v104 = *(_DWORD *)(v102 + 80);
              uint64_t v46 = v168;
              if (v82)
              {
                uint64_t v105 = (icu::UnicodeString *)(*(void *)(v102 + 472) + 64LL);
LABEL_177:
                sub_18098A598((icu::UnicodeString *)a2, v34, v103, v104, v105, a10);
                unsigned int v32 = 1;
                goto LABEL_191;
              }

LABEL_190:
            unsigned int v32 = 0;
            goto LABEL_191;
          }

          int v45 = 10;
          uint64_t v46 = v168;
        }

        uint64_t v108 = (v43 / v45);
        __int128 v109 = (icu::SimpleDateFormat *)v14;
        __int128 v110 = (icu::UnicodeString *)a2;
        goto LABEL_161;
      case 9u:
        goto LABEL_122;
      case 0xEu:
        uint64_t v47 = *(void *)(v14 + 768);
        if ((int)a4 > 4)
        {
          uint64_t v48 = *(void *)(v47 + 296);
          int v49 = *(_DWORD *)(v47 + 304);
        }

        else
        {
          uint64_t v48 = *(void *)(v47 + 280);
          int v49 = *(_DWORD *)(v47 + 288);
        }

        uint64_t v87 = a2;
        unsigned int v50 = v166;
        goto LABEL_164;
      case 0xFu:
        uint64_t v38 = v166;
        if (v166) {
          goto LABEL_67;
        }
        int v41 = (*(uint64_t (**)(icu::Calendar *, uint64_t))(*(void *)a9 + 160LL))(a9, 10LL);
LABEL_45:
        uint64_t v38 = (v41 + 1);
        goto LABEL_67;
      case 0x11u:
      case 0x17u:
      case 0x18u:
      case 0x1Du:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
        memset(v172, 0, sizeof(v172));
        memset(v171, 0, sizeof(v171));
        icu::UnicodeString::UnicodeString(v171, v172, 0LL, 128LL);
        uint64_t TimeZone = icu::Calendar::getTimeZone(a9);
        double TimeInMillis = icu::Calendar::getTimeInMillis(a9, a10);
        __int16 v31 = icu::SimpleDateFormat::tzFormat((icu::SimpleDateFormat *)v14, a10);
        unsigned int v32 = 0;
        if (*(int *)a10 <= 0)
        {
          switch(PatternCharIndex)
          {
            case 0x11u:
              unsigned __int16 v33 = *(void (**)(double))(*(void *)v31 + 64LL);
              goto LABEL_195;
            case 0x17u:
              goto LABEL_219;
            case 0x18u:
              if ((_DWORD)a4 == 4)
              {
                unsigned __int16 v33 = *(void (**)(double))(*(void *)v31 + 64LL);
LABEL_195:
                v33(TimeInMillis);
                unsigned int v32 = 12;
              }

              else if ((_DWORD)a4 == 1)
              {
                unsigned __int16 v33 = *(void (**)(double))(*(void *)v31 + 64LL);
LABEL_149:
                v33(TimeInMillis);
                unsigned int v32 = 13;
              }

              else
              {
LABEL_220:
                unsigned int v32 = 0;
              }

              break;
            case 0x1Du:
              switch((int)a4)
              {
                case 1:
                case 2:
                case 3:
                  goto LABEL_219;
                case 4:
                  (*(void (**)(icu::TimeZoneFormat *, void, uint64_t, _OWORD *, void, double))(*(void *)v31 + 64LL))( v31,  0LL,  TimeZone,  v171,  0LL,  TimeInMillis);
                  unsigned int v32 = 10;
                  break;
                default:
                  goto LABEL_220;
              }

              break;
            case 0x1Fu:
              if ((_DWORD)a4 == 4 || (_DWORD)a4 == 1) {
LABEL_219:
              }
                (*(void (**)(double))(*(void *)v31 + 64LL))(TimeInMillis);
              goto LABEL_220;
            case 0x20u:
              switch((int)a4)
              {
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                  goto LABEL_219;
                default:
                  goto LABEL_220;
              }

              goto LABEL_220;
            case 0x21u:
              switch((int)a4)
              {
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                  goto LABEL_219;
                default:
                  goto LABEL_220;
              }

              goto LABEL_220;
            default:
              abort();
          }
        }

        if ((SWORD4(v171[0]) & 0x8000u) == 0) {
          uint64_t v132 = WORD4(v171[0]) >> 5;
        }
        else {
          uint64_t v132 = HIDWORD(v171[0]);
        }
        icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)v171, 0, v132);
        icu::UnicodeString::~UnicodeString(v133, (icu::UnicodeString *)v171);
        goto LABEL_225;
      case 0x13u:
        signed int v88 = icu::Calendar::get(a9, 7u, a10);
        __int128 v89 = (void *)*(unsigned int *)a10;
        signed int v166 = v88;
LABEL_122:
        if ((_DWORD)a4 == 4)
        {
          sub_18098A560( a2,  v166,  *(void *)(*(void *)(v14 + 768) + 152LL),  *(_DWORD *)(*(void *)(v14 + 768) + 160LL));
          unsigned int v32 = 4;
          goto LABEL_225;
        }

        uint64_t v46 = v168;
        unsigned int v90 = v166;
        if ((_DWORD)a4 == 6)
        {
          uint64_t v111 = *(void *)(v14 + 768);
          uint64_t v112 = *(void *)(v111 + 184);
          int v113 = *(_DWORD *)(v111 + 192);
        }

        else
        {
          if ((_DWORD)a4 == 5)
          {
            uint64_t v91 = *(void *)(v14 + 768);
            uint64_t v92 = *(void *)(v91 + 200);
            int v93 = *(_DWORD *)(v91 + 208);
            goto LABEL_126;
          }

          uint64_t v114 = *(void *)(v14 + 768);
          uint64_t v112 = *(void *)(v114 + 168);
          int v113 = *(_DWORD *)(v114 + 176);
        }

        sub_18098A560(a2, v166, v112, v113);
        unsigned int v32 = 4;
        goto LABEL_191;
      case 0x19u:
        if ((int)a4 <= 2)
        {
          unsigned int v35 = (icu::SimpleDateFormat *)v14;
          __int16 v36 = lpsrc;
          __int16 v37 = (icu::UnicodeString *)a2;
          uint64_t v38 = v166;
          uint64_t v39 = 1LL;
          goto LABEL_69;
        }

        unsigned int v94 = icu::Calendar::get(a9, 7u, a10);
        __int128 v89 = (void *)*(unsigned int *)a10;
        unsigned int v90 = v94;
        if ((_DWORD)a4 == 4)
        {
          sub_18098A560( a2,  v94,  *(void *)(*(void *)(v14 + 768) + 216LL),  *(_DWORD *)(*(void *)(v14 + 768) + 224LL));
          unsigned int v32 = 5;
          goto LABEL_225;
        }

        uint64_t v46 = v168;
        if ((_DWORD)a4 == 6)
        {
          uint64_t v151 = *(void *)(v14 + 768);
          uint64_t v152 = *(void *)(v151 + 248);
          int v153 = *(_DWORD *)(v151 + 256);
        }

        else
        {
          if ((_DWORD)a4 == 5)
          {
            uint64_t v95 = *(void *)(v14 + 768);
            uint64_t v92 = *(void *)(v95 + 264);
            int v93 = *(_DWORD *)(v95 + 272);
LABEL_126:
            sub_18098A560(a2, v90, v92, v93);
            unsigned int v32 = 6;
LABEL_191:
            UChar v121 = a7;
            if ((_DWORD)a6) {
              goto LABEL_244;
            }
LABEL_226:
            if (*(void *)(v14 + 824))
            {
              unsigned int v134 = *(unsigned __int16 *)(a2 + 8);
              int v135 = (__int16)v134;
              LODWORD(v136) = v134 >> 5;
              __int128 v136 = v135 >= 0 ? (uint64_t *)v136 : (uint64_t *)*(unsigned int *)(a2 + 12);
              if ((int)v136 > (int)v46)
              {
                UChar32 v137 = icu::UnicodeString::char32At(v136, (icu::UnicodeString *)a2, v46);
                int v138 = u_islower(v137);
                UChar v121 = a7;
                if (v138)
                {
                  switch(a5)
                  {
                    case 0x102u:
                      goto LABEL_238;
                    case 0x104u:
                      uint64_t v139 = (_BYTE *)(*(void *)(v14 + 768) + 2LL * v32 + 833);
                      break;
                    case 0x103u:
                      uint64_t v139 = (_BYTE *)(*(void *)(v14 + 768) + 2LL * v32 + 832);
                      break;
                    default:
                      goto LABEL_244;
                  }

                  if (*v139)
                  {
LABEL_238:
                    uint64_t v140 = (icu::BreakIterator *)(*(uint64_t (**)(void))(**(void **)(v14 + 824) + 32LL))(*(void *)(v14 + 824));
                    memset(v172, 0, 64);
                    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v172, (const icu::UnicodeString *)a2, v46);
                    icu::UnicodeString::toTitle((const UChar **)v172, v140, (const icu::Locale *)(v14 + 544), 768LL);
                    unsigned int v141 = *(unsigned __int16 *)(a2 + 8);
                    int v142 = (__int16)v141;
                    int v143 = v141 >> 5;
                    if (v142 >= 0) {
                      int v144 = v143;
                    }
                    else {
                      int v144 = *(_DWORD *)(a2 + 12);
                    }
                    sub_18098A724((icu::UnicodeString *)a2, v46, v144, (uint64_t)v172);
                    if (v140) {
                      (*(void (**)(icu::BreakIterator *))(*(void *)v140 + 8LL))(v140);
                    }
                    icu::UnicodeString::~UnicodeString(v145, (icu::UnicodeString *)v172);
                    UChar v121 = a7;
                  }
                }
              }
            }

LABEL_189:
        sub_18098A560(a2, v97, v99, v100);
        goto LABEL_190;
      case 0x1Eu:
        uint64_t v53 = *(void *)(v14 + 768);
        uint64_t v48 = *(void *)(v53 + 488);
        if (v48 && (int v49 = *(_DWORD *)(v53 + 496), v166 <= v49))
        {
          unsigned int v50 = v166 - 1;
LABEL_163:
          uint64_t v87 = a2;
LABEL_164:
          sub_18098A560(v87, v50, v48, v49);
        }

        else
        {
LABEL_56:
          int v54 = sub_180941B08(v14 + 416, (uint64_t)v173);
          if (v166 < 6000 && v166 > 5000 && v54 == 0) {
            uint64_t v38 = (v166 - 5000);
          }
          else {
            uint64_t v38 = v166;
          }
          if ((_DWORD)a4 == 2)
          {
            unsigned int v35 = (icu::SimpleDateFormat *)v14;
            __int16 v36 = lpsrc;
            __int16 v37 = (icu::UnicodeString *)a2;
            uint64_t v39 = 2LL;
            uint64_t v40 = 2LL;
          }

          else
          {
LABEL_67:
            unsigned int v35 = (icu::SimpleDateFormat *)v14;
            __int16 v36 = lpsrc;
            __int16 v37 = (icu::UnicodeString *)a2;
LABEL_68:
            uint64_t v39 = a4;
LABEL_69:
            uint64_t v40 = 10LL;
          }

LABEL_265:
            uint64_t v125 = a5;
            if (v129 > 1)
            {
              uint64_t v155 = 0LL;
              goto LABEL_274;
            }

            goto LABEL_266;
          }
        }

        else if (*v61)
        {
          goto LABEL_266;
        }

        unsigned int v129 = *((_DWORD *)v128 + 1);
        if (v129 <= 0xB && ((1 << v129) & 0xC01) != 0) {
          goto LABEL_265;
        }
        goto LABEL_216;
      case 0x25u:
        memset((char *)v172 + 8, 0, 56);
        *(void *)&v172[0] = off_18971B688;
        WORD4(v172[0]) = 2;
        TimeSeparatorString = icu::DateFormatSymbols::getTimeSeparatorString(*(UChar ***)(v14 + 768), (UChar **)v172);
        unsigned int v65 = *((unsigned __int16 *)TimeSeparatorString + 4);
        int v66 = (__int16)v65;
        unsigned int v67 = v65 >> 5;
        if (v66 >= 0) {
          uint64_t v68 = v67;
        }
        else {
          uint64_t v68 = *((unsigned int *)TimeSeparatorString + 3);
        }
        icu::UnicodeString::doAppend(a2, TimeSeparatorString, 0, v68);
        icu::UnicodeString::~UnicodeString(v69, (icu::UnicodeString *)v172);
        goto LABEL_165;
      default:
LABEL_47:
        unsigned int v35 = (icu::SimpleDateFormat *)v14;
        __int16 v36 = lpsrc;
        __int16 v37 = (icu::UnicodeString *)a2;
        uint64_t v38 = v166;
        goto LABEL_68;
    }
  }

  return result;
}

uint64_t icu::SimpleDateFormat::isSyntaxChar(unsigned int a1)
{
  if (a1 > 0x7F) {
    return 0;
  }
  else {
    return (char)byte_180A3CF5C[a1];
  }
}

uint64_t icu::SimpleDateFormat::getLevelFromChar(unsigned int a1)
{
  if (a1 > 0x7F) {
    return 0xFFFFFFFFLL;
  }
  else {
    return dword_180A3CD5C[a1];
  }
}

void *sub_18098A2E4(char **a1, UErrorCode *a2, UErrorCode *a3)
{
  uint64_t Instance = icu::NumberFormat::createInstance(a1, a2, a3);
  uint64_t result = sub_18098A958((uint64_t)Instance);
  if (!result) {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
  }
  return result;
}

void icu::SimpleDateFormat::zeroPaddingNumber( icu::SimpleDateFormat *this, const icu::NumberFormat *lpsrc, icu::UnicodeString *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  if (*((const icu::NumberFormat **)this + 42) == lpsrc && *((void *)this + 101))
  {
    UErrorCode v22 = U_ZERO_ERROR;
    int v20 = 0LL;
    uint64_t v21 = 0LL;
    icu::number::SimpleNumber::forInt64((void **)(int)a4, (int *)&v22, &v20);
    icu::number::SimpleNumber::setMinimumIntegerDigits(&v20, a5, &v22);
    icu::number::SimpleNumber::truncateStart((icu::number::SimpleNumber *)&v20, a6, &v22);
    memset(v19, 0, sizeof(v19));
    uint64_t v13 = *((void *)this + 101);
    int v17 = v20;
    int v18 = v21;
    int v20 = 0LL;
    icu::number::SimpleNumberFormatter::format(v13, (uint64_t)&v17, &v22, (uint64_t)v19);
    icu::number::SimpleNumber::cleanup((icu::number::SimpleNumber *)&v17);
    if (v22 <= U_ZERO_ERROR)
    {
      icu::number::FormattedNumber::toTempString((icu::number::FormattedNumber *)v19, &v22, (uint64_t)&v23);
      if ((v24 & 0x8000u) == 0LL) {
        uint64_t v14 = (unsigned __int16)v24 >> 5;
      }
      else {
        uint64_t v14 = HIDWORD(v24);
      }
      icu::UnicodeString::doAppend((uint64_t)a3, (const icu::UnicodeString *)&v23, 0, v14);
      icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v23);
    }

    icu::number::FormattedNumber::~FormattedNumber((icu::number::FormattedNumber *)v19);
    icu::number::SimpleNumber::cleanup((icu::number::SimpleNumber *)&v20);
  }

  else if (lpsrc)
  {
    uint64_t v25 = 0LL;
    BOOL v23 = off_189723AC8;
    uint64_t v24 = 0xFFFFFFFFLL;
    if (v11)
    {
      (*(void (**)(void *, uint64_t, icu::UnicodeString *, void (***)(icu::FieldPosition *__hidden)))(*(void *)v11 + 88LL))( v11,  a4,  a3,  &v23);
    }

    else
    {
      uint64_t v16 = (*(uint64_t (**)(const icu::NumberFormat *))(*(void *)lpsrc + 32LL))(lpsrc);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 224LL))(v16, a5);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 216LL))(v16, a6);
      (*(void (**)(uint64_t, uint64_t, icu::UnicodeString *, void (***)(icu::FieldPosition *__hidden)))(*(void *)v16 + 88LL))( v16,  a4,  a3,  &v23);
      (*(void (**)(uint64_t))(*(void *)v16 + 8LL))(v16);
    }

    icu::FieldPosition::~FieldPosition((icu::FieldPosition *)&v23);
  }

uint64_t sub_18098A560(uint64_t result, unsigned int a2, uint64_t a3, int a4)
{
  if ((a2 & 0x80000000) == 0 && (int)a2 < a4)
  {
    uint64_t v4 = a3 + ((unint64_t)a2 << 6);
    unsigned int v5 = *(unsigned __int16 *)(v4 + 8);
    int v6 = (__int16)v5;
    unsigned int v7 = v5 >> 5;
    if (v6 >= 0) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = *(unsigned int *)(v4 + 12);
    }
    return icu::UnicodeString::doAppend(result, (const icu::UnicodeString *)v4, 0, v8);
  }

  return result;
}

void sub_18098A598( icu::UnicodeString *this, unsigned int a2, uint64_t a3, int a4, icu::UnicodeString *a5, UErrorCode *a6)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if ((a2 & 0x80000000) == 0 && (int)a2 < a4)
  {
    if (a5)
    {
      v15[1] = off_18971B688;
      __int16 v16 = 2;
      icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v15, a5, 1, 1, 0, a6);
      icu::SimpleFormatter::format( (icu::SimpleFormatter *)v15,  (const icu::UnicodeString *)(a3 + ((unint64_t)a2 << 6)),  this,  a6);
      icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v15);
    }

    else
    {
      uint64_t v10 = a3 + ((unint64_t)a2 << 6);
      unsigned int v11 = *(unsigned __int16 *)(v10 + 8);
      int v12 = (__int16)v11;
      unsigned int v13 = v11 >> 5;
      if (v12 >= 0) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = *(unsigned int *)(v10 + 12);
      }
      icu::UnicodeString::doAppend((uint64_t)this, (const icu::UnicodeString *)v10, 0, v14);
    }
  }

icu::TimeZoneFormat *icu::SimpleDateFormat::tzFormat(icu::SimpleDateFormat *this, UErrorCode *a2)
{
  uint64_t Instance = (icu::TimeZoneFormat *)*((void *)this + 97);
  unsigned int v5 = (uint64_t *)*(unsigned int *)a2;
  if (Instance) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = (int)v5 <= 0;
  }
  if (v6)
  {
    uint64_t Instance = icu::TimeZoneFormat::createInstance((char **)this + 68, a2, v5);
    *((void *)this + 97) = Instance;
  }

  umtx_unlock((std::mutex **)&unk_18C449838);
  return Instance;
}

uint64_t icu::SimpleDateFormat::getSmpFmtLocale(icu::SimpleDateFormat *this)
{
  return (uint64_t)this + 544;
}

uint64_t sub_18098A724(icu::UnicodeString *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4 = (a3 - a2);
  unsigned int v5 = *(unsigned __int16 *)(a4 + 8);
  int v6 = (__int16)v5;
  unsigned int v7 = v5 >> 5;
  if (v6 >= 0) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = *(unsigned int *)(a4 + 12);
  }
  return icu::UnicodeString::doReplace(a1, a2, v4, (const icu::UnicodeString *)a4, 0, v8);
}

void icu::SimpleDateFormat::adoptNumberFormat( icu::SimpleDateFormat *this@<X0>, icu::NumberFormat *a2@<X1>, void *a3@<X8>)
{
  unsigned int v5 = (void *)*((void *)this + 101);
  if (v5)
  {
    icu::number::SimpleNumberFormatter::cleanup(*((icu::number::SimpleNumberFormatter **)this + 101), a3);
    icu::UMemory::operator delete(v5);
  }

  *((void *)this + 10icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0LL;
  (*(void (**)(icu::NumberFormat *))(*(void *)a2 + 288LL))(a2);
  uint64_t v6 = *((void *)this + 42);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
  }
  *((void *)this + 42) = a2;
  unsigned int v7 = (char *)*((void *)this + 100);
  if (v7)
  {
    sub_18098624C(v7);
    *((void *)this + 10icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
  }

  UErrorCode v8 = U_ZERO_ERROR;
  icu::SimpleDateFormat::initSimpleNumberFormatter(this, &v8);
}

icu::SharedObject *icu::SimpleDateFormat::adoptNumberFormat( icu::SimpleDateFormat *this, const icu::UnicodeString *a2, icu::NumberFormat *a3, UErrorCode *a4)
{
  if (!*((void *)this + 100))
  {
    UErrorCode v9 = uprv_malloc(0x130uLL);
    if (!v9)
    {
      *((void *)this + 10icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
      *a4 = U_MEMORY_ALLOCATION_ERROR;
      return (icu::SharedObject *)(*(uint64_t (**)(icu::NumberFormat *))(*(void *)a3 + 8LL))(a3);
    }

    v9[17] = 0u;
    v9[18] = 0u;
    v9[15] = 0u;
    char v9[16] = 0u;
    v9[13] = 0u;
    v9[14] = 0u;
    v9[11] = 0u;
    v9[12] = 0u;
    v9[9] = 0u;
    v9[10] = 0u;
    v9[7] = 0u;
    _BYTE v9[8] = 0u;
    v9[5] = 0u;
    v9[6] = 0u;
    v9[3] = 0u;
    _OWORD v9[4] = 0u;
    v9[1] = 0u;
    void v9[2] = 0u;
    *UErrorCode v9 = 0u;
    *((void *)this + 10icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v9;
  }

  uint64_t result = (icu::SharedObject *)sub_18098A958((uint64_t)a3);
  if (result)
  {
    uint64_t v10 = result;
    for (unint64_t i = 0LL; ; ++i)
    {
      int v12 = *((__int16 *)a2 + 4);
      if (v12 < 0)
      {
        unint64_t v13 = *((unsigned int *)a2 + 3);
      }

      else
      {
        unint64_t v13 = (unint64_t)*((unsigned __int16 *)a2 + 4) >> 5;
      }

      if (v13 <= i)
      {
        UChar v15 = -1;
      }

      else
      {
        uint64_t v14 = (v12 & 2) != 0
        UChar v15 = *((_WORD *)v14 + i);
      }

      unsigned int PatternCharIndex = icu::DateFormatSymbols::getPatternCharIndex(v15);
      if (PatternCharIndex == 38) {
        break;
      }
      sub_18085C214(v10, (icu::SharedObject **)(*((void *)this + 100) + 8LL * PatternCharIndex));
    }

    *a4 = U_INVALID_FORMAT_ERROR;
    return (icu::SharedObject *)icu::SharedObject::deleteIfZeroRefCount((uint64_t)v10);
  }

  else
  {
    *a4 = U_MEMORY_ALLOCATION_ERROR;
  }

  return result;
}

void *sub_18098A958(uint64_t a1)
{
  int v3 = (void *)icu::UMemory::operator new((icu::UMemory *)0x20, v2);
  uint64_t v4 = v3;
  if (v3)
  {
    void *v3 = off_189728658;
    v3[1] = 0LL;
    v3[2] = 0LL;
    v3[3] = a1;
  }

  else
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 8LL))(a1);
  }

  return v4;
}

uint64_t icu::SimpleDateFormat::getNumberFormatForField(uint64_t a1, UChar c)
{
  unsigned int PatternCharIndex = icu::DateFormatSymbols::getPatternCharIndex(c);
  if (PatternCharIndex == 38) {
    return 0LL;
  }
  uint64_t v5 = *(void *)(a1 + 800);
  if (v5 && (uint64_t v6 = *(void *)(v5 + 8LL * PatternCharIndex)) != 0) {
    uint64_t v7 = v6 + 24;
  }
  else {
    uint64_t v7 = a1 + 336;
  }
  return *(void *)v7;
}

uint64_t icu::SimpleDateFormat::isAtNumericField(icu::SimpleDateFormat *this, const icu::UnicodeString *a2)
{
  int v2 = (int)a2;
  unsigned int v4 = *((unsigned __int16 *)this + 4);
  else {
    int v5 = v4 >> 5;
  }
  if (v5 <= a2)
  {
    int v7 = 0xFFFF;
  }

  else
  {
    uint64_t v6 = (v4 & 2) != 0 ? (icu::SimpleDateFormat *)((char *)this + 10) : (icu::SimpleDateFormat *)*((void *)this + 3);
    int v7 = *((unsigned __int16 *)v6 + (int)a2);
  }

  int PatternCharIndex = icu::DateFormatSymbols::getPatternCharIndex(v7);
  if (PatternCharIndex == 38) {
    return 0LL;
  }
  uint64_t v10 = 0LL;
  unsigned int v11 = *((unsigned __int16 *)this + 4);
  if ((v11 & 0x8000u) == 0) {
    unsigned int v12 = v11 >> 5;
  }
  else {
    unsigned int v12 = *((_DWORD *)this + 3);
  }
  if ((v11 & 2) != 0) {
    unint64_t v13 = (char *)this + 10;
  }
  else {
    unint64_t v13 = (char *)*((void *)this + 3);
  }
  uint64_t v14 = (uint64_t)&v13[2 * v2 + 2];
  do
  {
    else {
      int v15 = *(unsigned __int16 *)(v14 + 2 * v10);
    }
    ++v10;
  }

  while (v15 == v7);
  return icu::DateFormatSymbols::isNumericField(PatternCharIndex, v10);
}

BOOL icu::SimpleDateFormat::isAfterNonNumericField( icu::SimpleDateFormat *this, const icu::UnicodeString *a2)
{
  unsigned int v2 = (_DWORD)a2 - 1;
  int v3 = (int)a2;
  unsigned int v5 = *((unsigned __int16 *)this + 4);
  unsigned int v6 = (v5 & 0x8000u) == 0 ? v5 >> 5 : *((_DWORD *)this + 3);
  if (v6 <= v2)
  {
    int v8 = 0xFFFF;
  }

  else
  {
    int v7 = (v5 & 2) != 0 ? (icu::SimpleDateFormat *)((char *)this + 10) : (icu::SimpleDateFormat *)*((void *)this + 3);
    int v8 = *((unsigned __int16 *)v7 + v2);
  }

  int PatternCharIndex = icu::DateFormatSymbols::getPatternCharIndex(v8);
  if (PatternCharIndex == 38) {
    return 0LL;
  }
  uint64_t v11 = 0LL;
  unsigned int v12 = *((unsigned __int16 *)this + 4);
  if ((v12 & 0x8000u) == 0) {
    unsigned int v13 = v12 >> 5;
  }
  else {
    unsigned int v13 = *((_DWORD *)this + 3);
  }
  if ((v12 & 2) != 0) {
    uint64_t v14 = (char *)this + 10;
  }
  else {
    uint64_t v14 = (char *)*((void *)this + 3);
  }
  uint64_t v15 = (uint64_t)&v14[2 * v2 - 2];
  do
  {
    else {
      int v16 = *(unsigned __int16 *)(v15 + 2 * v11);
    }
    --v11;
  }

  while (v16 == v8);
  return icu::DateFormatSymbols::isNumericField(PatternCharIndex, -(int)v11) == 0;
}

void icu::SimpleDateFormat::parse( icu::SimpleDateFormat *this, const icu::UnicodeString *a2, icu::Calendar *a3, icu::ParsePosition *a4)
{
  unsigned int v4 = a4;
  unsigned int v5 = *((_DWORD *)a4 + 2);
  v108[0] = v5;
  if ((v5 & 0x80000000) != 0)
  {
    *((_DWORD *)a4 + 3) = 0;
    return;
  }

  unsigned int v6 = a3;
  int v7 = a2;
  unsigned int v97 = v5;
  unsigned int v107 = -1;
  BOOL v106 = 0;
  int v104 = 0;
  int v105 = -1;
  if (*((icu::Calendar **)this + 41) == a3
    || (UErrorCode v9 = (const char *)(*(uint64_t (**)(icu::Calendar *))(*(void *)a3 + 184LL))(a3),
        uint64_t v10 = (const char *)(*(uint64_t (**)(void))(**((void **)this + 41) + 184LL))(*((void *)this + 41)),
        !strcmp(v9, v10)))
  {
    uint64_t v12 = 0LL;
    uint64_t v101 = v6;
  }

  else
  {
    uint64_t v11 = (*(uint64_t (**)(void))(**((void **)this + 41) + 24LL))(*((void *)this + 41));
    if (!v11) {
      goto LABEL_176;
    }
    uint64_t v12 = v11;
    double TimeInMillis = icu::Calendar::getTimeInMillis(v6, (UErrorCode *)v108 + 1);
    icu::Calendar::setTimeInMillis(v12, TimeInMillis, (UErrorCode *)v108 + 1);
    if (SHIDWORD(v108[0]) > 0) {
      goto LABEL_174;
    }
    uint64_t TimeZone = icu::Calendar::getTimeZone(v6);
    icu::Calendar::setTimeZone(v12, TimeZone);
    uint64_t v101 = (icu::Calendar *)v12;
  }

  uint64_t v15 = *((void *)this + 96);
  if (*(void *)(v15 + 472) && (int v16 = (uint64_t *)*(unsigned int *)(v15 + 480), (int)v16 >= 7))
  {
    uint64_t v17 = (icu::MessageFormat *)icu::UMemory::operator new(v16, (icu::UMemory *)0x330, (unint64_t)a2);
    uint64_t v18 = (uint64_t)v17;
    if (!v17) {
      goto LABEL_135;
    }
    icu::MessageFormat::MessageFormat( v17,  (const icu::UnicodeString *)(*(void *)(*((void *)this + 96) + 472LL) + 384LL),  (icu::SimpleDateFormat *)((char *)this + 544),  (UErrorCode *)v108 + 1);
    if (SHIDWORD(v108[0]) > 0) {
      goto LABEL_168;
    }
  }

  else
  {
    uint64_t v18 = 0LL;
  }

  uint64_t v95 = v6;
  signed int v96 = v4;
  signed int v19 = 0;
  int v94 = 0;
  int v100 = 0;
  int v20 = (icu::SimpleDateFormat *)((char *)this + 352);
  int v21 = -1;
  uint64_t v98 = (uint64_t)v7;
  uint64_t v99 = v18;
  while (1)
  {
    LODWORD(v102[0]) = v19;
    unint64_t v22 = *((unsigned __int16 *)this + 180);
    if ((v22 & 0x8000) != 0) {
      break;
    }
    unsigned int v23 = v22 >> 5;
    if (v23 <= v19) {
      goto LABEL_37;
    }
LABEL_20:
    uint64_t v24 = (char *)this + 362;
    if ((v22 & 2) == 0) {
      uint64_t v24 = (char *)*((void *)this + 47);
    }
    unint64_t v25 = *(unsigned __int16 *)&v24[2 * v19];
    if (v25 <= 0x7F && byte_180A3CF5C[v25])
    {
      uint64_t v26 = 0LL;
      uint64_t v27 = (uint64_t)v19 << 32;
      int v28 = v19 + 2;
      for (signed int i = v19; ; ++i)
      {
        uint64_t v30 = v19 + 1LL + v26;
        if ((v22 & 0x8000) != 0)
        {
          int64_t v31 = *((int *)this + 91);
          if (v30 >= v31) {
            break;
          }
        }

        else
        {
          int64_t v31 = v22 >> 5;
        }

        if (v31 <= v19 + (int)v26 + 1)
        {
          int v33 = 0xFFFF;
        }

        else
        {
          unsigned int v32 = (char *)this + 362;
          if ((v22 & 2) == 0) {
            unsigned int v32 = (char *)*((void *)this + 47);
          }
          int v33 = *(unsigned __int16 *)&v32[2 * v19 + 2 + 2 * v26];
        }

        if (v33 != (_DWORD)v25) {
          break;
        }
        ++v26;
        v27 += 0x100000000LL;
        ++v28;
      }

      uint64_t v37 = v26 + v19;
      LODWORD(v102[0]) = v26 + v19;
      int v38 = v26 + 1;
      if (!icu::DateFormatSymbols::isNumericPatternChar(v25, v26 + 1))
      {
        int v21 = -1;
        goto LABEL_46;
      }

      if (v21 < 0)
      {
        if (!icu::SimpleDateFormat::isAtNumericField( (icu::SimpleDateFormat *)((char *)this + 352),  (const icu::UnicodeString *)(v37 + 1))) {
          goto LABEL_46;
        }
        int v94 = v108[0];
        if (v19 < 0)
        {
          int v100 = 0;
          int v21 = v19;
LABEL_46:
          if ((_DWORD)v25 == 108)
          {
            int v7 = (const icu::UnicodeString *)v98;
            uint64_t v18 = v99;
            int v20 = (icu::SimpleDateFormat *)((char *)this + 352);
            goto LABEL_39;
          }

          int v7 = (const icu::UnicodeString *)v98;
          uint64_t v18 = v99;
          int v40 = icu::SimpleDateFormat::subParse( (icu::NumberFormat **)this,  v98,  (int *)v108,  v25,  v38,  0,  1,  &v106,  &v105,  v101,  v37,  v99,  (uint64_t)&v104);
          int v41 = v108[0];
          if (v40 == ~LODWORD(v108[0]))
          {
            int v42 = v37 + 1;
            unsigned int v43 = *((unsigned __int16 *)this + 180);
            if (*((__int16 *)this + 180) < 0)
            {
              unsigned int v44 = *((_DWORD *)this + 91);
LABEL_64:
              if (v44 <= v42)
              {
                uint64_t v46 = 0xFFFFLL;
              }

              else
              {
                int v45 = (char *)this + 362;
                if ((v43 & 2) == 0) {
                  int v45 = (char *)*((void *)this + 47);
                }
                uint64_t v46 = *(unsigned __int16 *)&v45[2 * v42];
              }

              if (!icu::PatternProps::isWhiteSpace((icu::PatternProps *)v46))
              {
                uint64_t v18 = v99;
                goto LABEL_60;
              }

              uint64_t v47 = i + 2LL;
              int v20 = (icu::SimpleDateFormat *)((char *)this + 352);
              do
              {
                int v48 = v47;
                if (*((__int16 *)this + 180) < 0)
                {
                  int64_t v49 = *((int *)this + 91);
                  if (v47 >= v49) {
                    break;
                  }
                }

                else
                {
                  int64_t v49 = (unint64_t)*((unsigned __int16 *)this + 180) >> 5;
                }

                if (v49 <= v47)
                {
                  uint64_t v51 = 0xFFFFLL;
                }

                else
                {
                  unsigned int v50 = (char *)this + 362;
                  if ((*((_WORD *)this + 180) & 2) == 0) {
                    unsigned int v50 = (char *)*((void *)this + 47);
                  }
                  uint64_t v51 = *(unsigned __int16 *)&v50[2 * v47];
                }

                ++v47;
              }

              while (icu::PatternProps::isWhiteSpace((icu::PatternProps *)v51));
              LODWORD(v37) = v48 - 1;
              LODWORD(v102[0]) = v48 - 1;
              uint64_t v18 = v99;
            }

            else
            {
              if (v42 < (int)(v43 >> 5))
              {
                unsigned int v44 = v43 >> 5;
                goto LABEL_64;
              }

LABEL_168:
  if (v101 != v6 && SHIDWORD(v108[0]) <= 0)
  {
    uint64_t v91 = icu::Calendar::getTimeZone(v101);
    icu::Calendar::setTimeZone((uint64_t)v6, v91);
    double v92 = icu::Calendar::getTimeInMillis(v101, (UErrorCode *)v108 + 1);
    icu::Calendar::setTimeInMillis((uint64_t)v6, v92, (UErrorCode *)v108 + 1);
  }

  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
  }
  if (v12) {
LABEL_174:
  }
    (*(void (**)(uint64_t))(*(void *)v12 + 8LL))(v12);
  if (SHIDWORD(v108[0]) >= 1)
  {
LABEL_176:
    int v93 = v108[0];
    *((_DWORD *)v4 + 2) = v97;
    *((_DWORD *)v4 + 3) = v93;
  }

uint64_t icu::SimpleDateFormat::subParse( icu::NumberFormat **a1, uint64_t a2, int *a3, UChar a4, int a5, int a6, int a7, BOOL *a8, int *a9, _BYTE *a10, int a11, uint64_t a12, uint64_t a13)
{
  LODWORD(v14) = a5;
  uint64_t v201 = *MEMORY[0x1895F89C0];
  memset(v200, 0, sizeof(v200));
  icu::Formattable::Formattable((icu::Formattable *)v200);
  UErrorCode v192 = U_ZERO_ERROR;
  uint64_t v190 = off_18970F400;
  *(void *)uint64_t v191 = 0xFFFFFFFF00000000LL;
  unsigned int PatternCharIndex = icu::DateFormatSymbols::getPatternCharIndex(a4);
  lpsrc = 0LL;
  __int128 v196 = 0u;
  uint64_t v199 = 0LL;
  __int128 v198 = 0u;
  __int128 v197 = 0u;
  BOOL v195 = off_18971B688;
  LOWORD(v196) = 2;
  BOOL v20 = (*((unsigned int (**)(icu::NumberFormat **))*a1 + 12))(a1) != 0;
  if (PatternCharIndex != 38)
  {
    int v21 = a1[100];
    if (v21 && (uint64_t v22 = *((void *)v21 + PatternCharIndex)) != 0) {
      unsigned int v23 = (icu::NumberFormat **)(v22 + 24);
    }
    else {
      unsigned int v23 = a1 + 42;
    }
    lpsrc = *v23;
    if (lpsrc)
    {
      unsigned int v186 = icu::SimpleDateFormat::fgPatternIndexToCalendarField[PatternCharIndex];
      memset(v194, 0, sizeof(v194));
      icu::UnicodeString::UnicodeString(v194, "hebr", 4LL, 0LL);
      if (a12) {
        (*(void (**)(uint64_t, icu::NumberFormat **, uint64_t))(*(void *)a12 + 120LL))(a12, &lpsrc, 1LL);
      }
      uint64_t v24 = (const char *)(*(uint64_t (**)(_BYTE *))(*(void *)a10 + 184LL))(a10);
      if (!strcmp(v24, "chinese"))
      {
        BOOL v26 = 1;
      }

      else
      {
        unint64_t v25 = (const char *)(*(uint64_t (**)(_BYTE *))(*(void *)a10 + 184LL))(a10);
        BOOL v26 = strcmp(v25, "dangi") == 0;
      }

      int v29 = *a3;
      unsigned int v30 = *(unsigned __int16 *)(a2 + 8);
      int v31 = (__int16)v30;
      LODWORD(v32) = v30 >> 5;
      if (v31 >= 0) {
        uint64_t v32 = v32;
      }
      else {
        uint64_t v32 = *(unsigned int *)(a2 + 12);
      }
      if (v29 >= (int)v32)
      {
LABEL_27:
        uint64_t v28 = -v29;
        goto LABEL_28;
      }

      BOOL v184 = v26;
      int v185 = v14;
      uint64_t v32 = a13;
      while (1)
      {
        int v33 = (icu::PatternProps *)icu::UnicodeString::char32At((uint64_t *)v32, (icu::UnicodeString *)a2, v29);
        if (!u_isUWhiteSpace((UChar32)v33))
        {
          uint64_t isWhiteSpace = icu::PatternProps::isWhiteSpace(v33);
          if (!(_DWORD)isWhiteSpace) {
            break;
          }
        }

        else {
          int v35 = 2;
        }
        int v29 = *a3 + v35;
        *a3 = v29;
        unsigned int v36 = *(unsigned __int16 *)(a2 + 8);
        int v37 = (__int16)v36;
        LODWORD(v32) = v36 >> 5;
        if (v37 >= 0) {
          uint64_t v32 = v32;
        }
        else {
          uint64_t v32 = *(unsigned int *)(a2 + 12);
        }
      }

      int v183 = *a3;
      v191[0] = *a3;
      if (PatternCharIndex > 0x10 || ((1 << PatternCharIndex) & 0x18030) == 0)
      {
        BOOL v52 = PatternCharIndex == 19 || PatternCharIndex == 25;
        BOOL v53 = v52 || PatternCharIndex == 2;
        BOOL v54 = v53 || (PatternCharIndex & 0xFFFFFFFE) == 26;
        BOOL v55 = v54 || PatternCharIndex == 28;
        BOOL v56 = v55;
        if (((int)v14 > 2 || !v56) && ((1 << PatternCharIndex) & 0x40040002) == 0)
        {
LABEL_76:
          BOOL v57 = v184;
          if (PatternCharIndex) {
            BOOL v57 = 0;
          }
          if (PatternCharIndex != 8 && !v57)
          {
            unint64_t v14 = 0LL;
            int v51 = 1;
            goto LABEL_90;
          }
        }
      }

      if (a12 && (PatternCharIndex == 26 || PatternCharIndex == 2))
      {
        v193[0] = U_ZERO_ERROR;
        int v39 = (icu::Formattable *)(*(uint64_t (**)(uint64_t, uint64_t, void (***)(icu::ParsePosition *__hidden), UErrorCode *))(*(void *)a12 + 184LL))( a12,  a2,  &v190,  v193);
        if (v39) {
          BOOL v40 = v193[0] == U_ILLEGAL_ARGUMENT_ERROR;
        }
        else {
          BOOL v40 = 0;
        }
        if (v40 && (signed int)v191[0] > v183)
        {
          int v42 = v39;
          if (icu::Formattable::isNumeric(v39))
          {
            icu::Formattable::setLong((icu::Formattable *)v200, *((_DWORD *)v42 + 2));
            icu::Calendar::set(a10, 0x16u, 1);
            uint64_t v182 = (char *)v42 - 16;
            uint64_t v43 = *((void *)v42 - 1);
            if (v43)
            {
              uint64_t v44 = 112 * v43;
              int v45 = (char *)v42 - 112;
              do
              {
                icu::Formattable::~Formattable((icu::Formattable *)&v45[v44]);
                v44 -= 112LL;
              }

              while (v44);
            }

            icu::UMemory::operator delete[](v182);
            goto LABEL_54;
          }
        }

        v191[0] = v183;
        uint64_t isWhiteSpace = (uint64_t)icu::Calendar::set(a10, 0x16u, 0);
      }

      uint64_t v46 = (const icu::UnicodeString *)a2;
      if (a6)
      {
        uint64_t v32 = *a3;
        unsigned int v47 = *(unsigned __int16 *)(a2 + 8);
        int v48 = (__int16)v47;
        int v49 = v47 >> 5;
        if (v48 < 0) {
          int v49 = *(_DWORD *)(a2 + 12);
        }
        uint64_t v46 = (const icu::UnicodeString *)&v195;
        uint64_t isWhiteSpace = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 24LL))(a2, 0LL);
      }

      uint64_t isWhiteSpace = (uint64_t)icu::SimpleDateFormat::parseInt( (icu::SimpleDateFormat *)isWhiteSpace,  v46,  (icu::Formattable *)v200,  -1,  (icu::ParsePosition *)&v190,  a7,  lpsrc);
LABEL_54:
      if ((int)v191[0] <= v183)
      {
        unint64_t v14 = 0LL;
        int v51 = 1;
        int v183 = v191[0];
      }

      else
      {
        unint64_t v14 = DWORD2(v200[0]);
        uint64_t v50 = (a11 + 1);
        if ((DWORD2(v200[0]) & 0x80000000) != 0)
        {
          int v183 = icu::SimpleDateFormat::checkIntSuffix( (icu::SimpleDateFormat *)a1,  (const icu::UnicodeString *)a2,  v191[0],  v50,  1);
          if (v183 == v191[0]) {
            unint64_t v14 = v14;
          }
          else {
            unint64_t v14 = -(int)v14;
          }
        }

        else
        {
          int v183 = icu::SimpleDateFormat::checkIntSuffix( (icu::SimpleDateFormat *)a1,  (const icu::UnicodeString *)a2,  v191[0],  v50,  0);
        }

        uint64_t isWhiteSpace = (*((uint64_t (**)(icu::NumberFormat **, void, UErrorCode *))*a1 + 28))( a1,  0LL,  &v192);
        if ((_DWORD)isWhiteSpace)
        {
          if (((0x60000CCuLL >> PatternCharIndex) & 1) != 0)
          {
            int v58 = dword_180A3D204[PatternCharIndex];
            uint64_t isWhiteSpace = (*(uint64_t (**)(_BYTE *, void))(*(void *)a10 + 128LL))(a10, v186);
          }
        }

        else if (((0x60000CCuLL >> PatternCharIndex) & 1) != 0)
        {
          int v59 = dword_180A3D174[PatternCharIndex];
          uint64_t isWhiteSpace = (*(uint64_t (**)(_BYTE *, void))(*(void *)a10 + 112LL))(a10, v186);
        }

        int v51 = 0;
        v191[0] = v183;
      }

LABEL_224:
          if ((*((unsigned int (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 1LL, &v192))
          {
            uint64_t isWhiteSpace = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))( a1,  3LL,  &v192);
            if (!(_DWORD)isWhiteSpace) {
              goto LABEL_277;
            }
            goto LABEL_268;
          }

          goto LABEL_28;
        case 0x1Cu:
          if ((v51 & 1) == 0)
          {
LABEL_162:
            int v71 = 3 * v14 - 3;
LABEL_163:
            __n128 v72 = a10;
LABEL_201:
            unsigned int v73 = 2;
LABEL_324:
            icu::Calendar::set(v72, v73, v71);
            goto LABEL_325;
          }

          uint64_t v82 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3LL, &v192);
          if (v185 == 4 || (_DWORD)v82)
          {
            uint64_t v28 = icu::SimpleDateFormat::matchQuarterString( v82,  a2,  *a3,  2u,  *((void *)a1[96] + 53),  *((_DWORD *)a1[96] + 108),  a10);
          }

          else
          {
            uint64_t v28 = 0LL;
          }

          uint64_t v122 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3LL, &v192);
          if (v185 == 3 || (_DWORD)v122)
          {
            uint64_t v28 = icu::SimpleDateFormat::matchQuarterString( v122,  a2,  *a3,  2u,  *((void *)a1[96] + 55),  *((_DWORD *)a1[96] + 112),  a10);
          }

          uint64_t v117 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3LL, &v192);
          if (v185 != 5 && !(_DWORD)v117) {
            goto LABEL_224;
          }
          int v118 = *a3;
          uint64_t v123 = a1[96];
          uint64_t v120 = *((void *)v123 + 57);
          int v121 = *((_DWORD *)v123 + 116);
          goto LABEL_223;
        case 0x1Du:
          else {
            uint64_t v87 = dword_180A3D2B8[v185 - 1];
          }
          uint64_t v102 = (unsigned int *)icu::SimpleDateFormat::tzFormat((icu::SimpleDateFormat *)a1, &v192);
          if (v192 > U_ZERO_ERROR) {
            goto LABEL_277;
          }
          uint64_t v103 = icu::TimeZoneFormat::parse(v102, v87, a2, (uint64_t)&v190, a13);
          if (!v103) {
            goto LABEL_277;
          }
          uint64_t v85 = v103;
          __int128 v86 = a10;
LABEL_191:
          icu::Calendar::adoptTimeZone(v86, v85);
          goto LABEL_325;
        case 0x1Eu:
          int v83 = a1[96];
          uint64_t v84 = *((void *)v83 + 61);
          if (v84)
          {
            uint64_t v28 = icu::SimpleDateFormat::matchString(isWhiteSpace, a2, *a3, 1, v84, *((_DWORD *)v83 + 124), 0LL, a10);
          }

          if ((v51 & 1) != 0
            || !(*((unsigned int (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 1LL, &v192)
            && (int)v14 <= *((_DWORD *)a1[96] + 124))
          {
            goto LABEL_277;
          }

          __n128 v72 = a10;
          unsigned int v73 = 1;
          goto LABEL_323;
        default:
          goto LABEL_76;
      }
    }
  }

  unint64_t v27 = *a3;
  uint64_t v28 = -(int)v27;
LABEL_29:
  icu::UnicodeString::~UnicodeString((void *)v27, (icu::UnicodeString *)&v195);
  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v190);
  icu::Formattable::~Formattable((icu::Formattable *)v200);
  return v28;
}

uint64_t icu::SimpleDateFormat::matchLiterals( icu::SimpleDateFormat *this, const icu::UnicodeString *a2, int *a3, const icu::UnicodeString *a4, int *a5, unsigned int a6, int a7)
{
  unsigned int v90 = a5;
  BOOL v9 = 0LL;
  uint64_t v97 = *MEMORY[0x1895F89C0];
  __int128 v93 = 0u;
  __int128 v94 = 0u;
  uint64_t v96 = 0LL;
  __int128 v95 = 0u;
  double v92 = off_18971B688;
  LOWORD(v93) = 2;
  unsigned int v10 = *(_DWORD *)a2;
  uint64_t v11 = (char *)this + 10;
  while (1)
  {
    unsigned int v12 = *((unsigned __int16 *)this + 4);
    if (*((__int16 *)this + 4) < 0)
    {
      unsigned int v13 = *((_DWORD *)this + 3);
    }

    else
    {
      unsigned int v13 = v12 >> 5;
    }

    if (v13 <= v10)
    {
      LOWORD(v15) = -1;
LABEL_20:
      __int16 v91 = v15;
      icu::UnicodeString::doAppend((uint64_t)&v92, (uint64_t)&v91, 0, 1LL);
LABEL_21:
      BOOL v18 = v9;
      goto LABEL_22;
    }

    if ((v12 & 2) != 0) {
      unint64_t v14 = v11;
    }
    else {
      unint64_t v14 = (char *)*((void *)this + 3);
    }
    uint64_t v15 = *(unsigned __int16 *)&v14[2 * v10];
    if (v9) {
      goto LABEL_13;
    }
    BOOL v18 = 0LL;
LABEL_22:
    ++v10;
    BOOL v9 = v18;
  }

  if (!byte_180A3CF5C[v15])
  {
LABEL_13:
    if ((_DWORD)v15 != 39) {
      goto LABEL_20;
    }
    uint64_t v16 = (int)v10 + 1LL;
    if ((v12 & 0x8000) != 0)
    {
      int v17 = *((_DWORD *)this + 3);
    }

    else if ((int)v16 < (int)(v12 >> 5))
    {
      int v17 = v12 >> 5;
LABEL_27:
      if (v17 > v16 && *(_WORD *)&v14[2 * v16] == 39)
      {
        LOWORD(v15) = 39;
        ++v10;
        goto LABEL_20;
      }
    }

    BOOL v18 = !v9;
    goto LABEL_22;
  }

uint64_t icu::SimpleDateFormat::matchQuarterString( uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, int a6, _BYTE *a7)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  __int128 v24 = 0u;
  uint64_t v27 = 0LL;
  __int128 v26 = 0u;
  __int128 v25 = 0u;
  UChar32 v23 = off_18971B688;
  uint64_t v8 = 2LL;
  LOWORD(v24) = 2;
  if (a6 < 1) {
    goto LABEL_10;
  }
  uint64_t v13 = 0LL;
  int v14 = 0;
  int v15 = -1;
  uint64_t v16 = a6;
  do
  {
    int v17 = sub_18098DD10(a2, a3, a5);
    BOOL v20 = __OFSUB__(v17, v14);
    BOOL v18 = v17 == v14;
    BOOL v19 = v17 - v14 < 0;
    if (v17 > v14) {
      int v14 = v17;
    }
    if (!(v19 ^ v20 | v18)) {
      int v15 = v13;
    }
    ++v13;
    a5 += 64LL;
  }

  while (v16 != v13);
  if (v15 < 0)
  {
LABEL_10:
    uint64_t v21 = -a3;
  }

  else
  {
    icu::Calendar::set(a7, a4, 3 * v15);
    uint64_t v21 = (v14 + a3);
  }

  icu::UnicodeString::~UnicodeString((void *)v8, (icu::UnicodeString *)&v23);
  return v21;
}

uint64_t sub_18098DD10(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v25 = 0LL;
  int v24 = 0;
  unsigned int v5 = *(unsigned __int16 *)(a1 + 8);
  if ((v5 & 0x11) != 0)
  {
    uint64_t v6 = 0LL;
  }

  else if ((v5 & 2) != 0)
  {
    uint64_t v6 = a1 + 10;
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 24);
  }

  int v7 = (__int16)v5;
  uint64_t v8 = v6 + 2LL * a2;
  unsigned int v9 = v5 >> 5;
  unsigned int v10 = *(_DWORD *)(a1 + 12);
  if (v7 >= 0) {
    unsigned int v10 = v9;
  }
  uint64_t v11 = v10 - a2;
  unsigned int v12 = *(unsigned __int16 *)(a3 + 8);
  if ((v12 & 0x11) != 0)
  {
    uint64_t v13 = 0LL;
  }

  else if ((v12 & 2) != 0)
  {
    uint64_t v13 = a3 + 10;
  }

  else
  {
    uint64_t v13 = *(void *)(a3 + 24);
  }

  int v14 = (__int16)v12;
  unsigned int v15 = v12 >> 5;
  if (v14 >= 0) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = *(unsigned int *)(a3 + 12);
  }
  u_caseInsensitivePrefixMatch(v8, v11, v13, v16, 0LL, &v25, &v24, (char *)&v25 + 4);
  unsigned int v17 = *(unsigned __int16 *)(a3 + 8);
  if (*(__int16 *)(a3 + 8) < 0)
  {
    unsigned int v18 = *(_DWORD *)(a3 + 12);
    if (v24 != v18) {
      goto LABEL_20;
    }
    return v25;
  }

  if (v24 == v17 >> 5) {
    return v25;
  }
  unsigned int v18 = v17 >> 5;
LABEL_20:
  if (v18)
  {
    unsigned int v19 = v18 - 1;
    uint64_t v20 = a3 + 10;
    if ((v17 & 2) == 0) {
      uint64_t v20 = *(void *)(a3 + 24);
    }
    if (*(_WORD *)(v20 + 2LL * (int)v19) == 46)
    {
      int v21 = (__int16)v17;
      unsigned int v22 = v17 >> 5;
      if (v21 < 0) {
        unsigned int v22 = *(_DWORD *)(a3 + 12);
      }
      if (v24 == v22 - 1) {
        return v25;
      }
    }
  }

  return 0LL;
}

uint64_t icu::SimpleDateFormat::matchDayPeriodStrings( icu::SimpleDateFormat *this, const icu::UnicodeString *a2, int a3, const icu::UnicodeString *a4, int a5, int *a6)
{
  if (a5 < 1) {
    return -a3;
  }
  uint64_t v10 = 0LL;
  int v11 = 0;
  int v12 = -1;
  uint64_t v13 = a5;
  do
  {
    int v14 = sub_18098DD10((uint64_t)a2, a3, (uint64_t)a4);
    if (v14 > v11)
    {
      int v11 = v14;
      int v12 = v10;
    }

    ++v10;
    a4 = (const icu::UnicodeString *)((char *)a4 + 64);
  }

  while (v13 != v10);
  if (v12 < 0) {
    return -a3;
  }
  *a6 = v12;
  return (v11 + a3);
}

uint64_t icu::SimpleDateFormat::matchAlphaMonthStrings( icu::SimpleDateFormat *this, const icu::UnicodeString *a2, int a3, const icu::UnicodeString *a4, const icu::UnicodeString *a5, int a6, icu::Calendar *a7)
{
  if (a6 < 1) {
    return -a3;
  }
  uint64_t v12 = 0LL;
  int v13 = 0;
  int v14 = -1;
  uint64_t v15 = a6;
  do
  {
    int v16 = sub_18098DD10((uint64_t)a2, a3, (uint64_t)a4);
    if (v16 > v13)
    {
      int v13 = v16;
      int v14 = v12;
    }

    ++v12;
    a4 = (const icu::UnicodeString *)((char *)a4 + 64);
  }

  while (v15 != v12);
  for (uint64_t i = 0LL; i != v15; ++i)
  {
    int v18 = sub_18098DD10((uint64_t)a2, a3, (uint64_t)a5);
    if (v18 > v13)
    {
      int v13 = v18;
      int v14 = i;
    }

    a5 = (const icu::UnicodeString *)((char *)a5 + 64);
  }

  if (v14 < 0) {
    return -a3;
  }
  unsigned int v19 = (const char *)(*(uint64_t (**)(icu::Calendar *))(*(void *)a7 + 184LL))(a7);
  int v20 = strcmp(v19, "hebrew");
  if (v14 == 13 && v20 == 0) {
    int v22 = 6;
  }
  else {
    int v22 = v14;
  }
  icu::Calendar::set(a7, 2u, v22);
  return (v13 + a3);
}

uint64_t icu::SimpleDateFormat::matchString( uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, int a6, const icu::UnicodeString *a7, _BYTE *a8)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  __int128 v41 = 0u;
  uint64_t v44 = 0LL;
  __int128 v43 = 0u;
  __int128 v42 = 0u;
  uint64_t v40 = off_18971B688;
  uint64_t v9 = 2LL;
  LOWORD(v4icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 2;
  if ((a4 == 7) >= a6) {
    goto LABEL_22;
  }
  unsigned int v30 = 0;
  int v12 = 0;
  uint64_t v13 = a4 == 7;
  uint64_t v14 = a6;
  uint64_t v15 = (const icu::UnicodeString *)(a5 + (v13 << 6));
  int v16 = -1;
  do
  {
    int v17 = sub_18098DD10(a2, a3, (uint64_t)v15);
    if (v17 > v12)
    {
      int v12 = v17;
      int v16 = v13;
    }

    if (a7)
    {
      UErrorCode v31 = U_ZERO_ERROR;
      uint64_t v39 = 0LL;
      __int128 v37 = 0u;
      __int128 v38 = 0u;
      __int128 v36 = 0u;
      uint64_t v35 = off_18971B688;
      LOWORD(v36) = 2;
      int v33 = off_18971B688;
      __int16 v34 = 2;
      icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v32, a7, 1, 1, 0, &v31);
      icu::SimpleFormatter::format((icu::SimpleFormatter *)v32, v15, (icu::UnicodeString *)&v35, &v31);
      icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v32);
      uint64_t v18 = v31;
      if (v31 <= U_ZERO_ERROR)
      {
        int v19 = sub_18098DD10(a2, a3, (uint64_t)&v35);
        if (v19 <= v12)
        {
          uint64_t v18 = v30;
        }

        else
        {
          int v12 = v19;
          int v16 = v13;
          uint64_t v18 = 1LL;
        }

        unsigned int v30 = v18;
      }

      icu::UnicodeString::~UnicodeString((void *)v18, (icu::UnicodeString *)&v35);
    }

    ++v13;
    uint64_t v15 = (const icu::UnicodeString *)((char *)v15 + 64);
  }

  while (v14 != v13);
  if (v16 < 0)
  {
LABEL_22:
    uint64_t v26 = -a3;
  }

  else
  {
    if (a4 <= 23)
    {
      int v20 = (const char *)(*(uint64_t (**)(_BYTE *))(*(void *)a8 + 184LL))(a8);
      int v21 = strcmp(v20, "hebrew");
      if (a4 == 2 && (!v21 ? (BOOL v22 = v16 == 13) : (BOOL v22 = 0), v22))
      {
        UChar32 v23 = a8;
        unsigned int v24 = 2;
        int v25 = 6;
      }

      else
      {
        if (a4 == 1) {
          int v25 = v16 + 1;
        }
        else {
          int v25 = v16;
        }
        UChar32 v23 = a8;
        unsigned int v24 = a4;
      }

      icu::Calendar::set(v23, v24, v25);
      if (a7) {
        icu::Calendar::set(a8, 0x16u, v30);
      }
    }

    uint64_t v26 = (v12 + a3);
  }

  icu::UnicodeString::~UnicodeString((void *)v9, (icu::UnicodeString *)&v40);
  return v26;
}

void *icu::SimpleDateFormat::parseInt( icu::SimpleDateFormat *this, const icu::UnicodeString *a2, icu::Formattable *a3, icu::ParsePosition *a4, int a5, const icu::NumberFormat *a6)
{
  return icu::SimpleDateFormat::parseInt(this, a2, a3, -1, a4, a5, a6);
}

uint64_t icu::SimpleDateFormat::checkIntSuffix( icu::SimpleDateFormat *this, const icu::UnicodeString *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5 = a3;
  uint64_t v26 = *MEMORY[0x1895F89C0];
  __int128 v22 = 0u;
  uint64_t v25 = 0LL;
  __int128 v24 = 0u;
  __int128 v23 = 0u;
  int v21 = (UChar *)off_18971B688;
  LOWORD(v22) = 2;
  unsigned int v6 = *((unsigned __int16 *)a2 + 4);
  int v7 = (__int16)v6;
  LODWORD(v8) = v6 >> 5;
  if (v7 >= 0) {
    unint64_t v8 = v8;
  }
  else {
    unint64_t v8 = *((unsigned int *)a2 + 3);
  }
  if (((a4 | a3) & 0x80000000) == 0 && (int)v8 >= (int)a3)
  {
    unint64_t v8 = *((__int16 *)this + 180) < 0 ? *((unsigned int *)this + 91) : *((unsigned __int16 *)this + 180) >> 5;
    if ((int)v8 >= (int)a4)
    {
      uint64_t v13 = (const void *)*((void *)this + 42);
      if (v13)
      {
        if (v14)
        {
          if (a5) {
            NegativeSuffix = (UChar **)icu::DecimalFormat::getNegativeSuffix(v14, (icu::UnicodeString *)&v21);
          }
          else {
            NegativeSuffix = (UChar **)icu::DecimalFormat::getPositiveSuffix(v14, (icu::UnicodeString *)&v21);
          }
          icu::UnicodeString::operator=(&v21, NegativeSuffix);
        }
      }

      LODWORD(v8) = (unsigned __int16)v22 >> 5;
      if ((v22 & 0x8000u) == 0LL) {
        unint64_t v8 = v8;
      }
      else {
        unint64_t v8 = DWORD1(v22);
      }
      if ((int)v8 >= 1)
      {
        int v16 = icu::SimpleDateFormat::compareSimpleAffix( this,  (const icu::UnicodeString *)&v21,  (icu::SimpleDateFormat *)((char *)this + 352),  a4);
        int v17 = icu::SimpleDateFormat::compareSimpleAffix(this, (const icu::UnicodeString *)&v21, a2, v5);
        int v18 = (unsigned __int16)v22 >> 5;
        if ((v22 & 0x8000u) != 0LL) {
          int v18 = DWORD1(v22);
        }
        int v19 = icu::SimpleDateFormat::compareSimpleAffix( this,  (const icu::UnicodeString *)&v21,  a2,  (v5 - v18));
        if ((v17 < 0 || v16 < 0 || v17 != v16) && (v19 & 0x80000000) == 0 && (v16 & 0x80000000) == 0 && v19 == v16)
        {
          LODWORD(v8) = (unsigned __int16)v22 >> 5;
          if ((v22 & 0x8000u) == 0LL) {
            unint64_t v8 = v8;
          }
          else {
            unint64_t v8 = DWORD1(v22);
          }
          uint64_t v5 = (v5 - v8);
        }
      }
    }
  }

  icu::UnicodeString::~UnicodeString((void *)v8, (icu::UnicodeString *)&v21);
  return v5;
}

uint64_t icu::SimpleDateFormat::countDigits@<X0>( const icu::UnicodeString *a1@<X1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  if (a2 >= a3) {
    return 0LL;
  }
  int v6 = a2;
  LODWORD(v8) = 0;
  do
  {
    unsigned int v9 = icu::UnicodeString::char32At((uint64_t *)a4, a1, v6);
    if (u_isdigit(v9)) {
      uint64_t v8 = (v8 + 1);
    }
    else {
      uint64_t v8 = v8;
    }
    if (v9 < 0x10000) {
      a4 = 1LL;
    }
    else {
      a4 = 2LL;
    }
    v6 += a4;
  }

  while (v6 < a3);
  return v8;
}

void *icu::SimpleDateFormat::parseInt( icu::SimpleDateFormat *this, const icu::UnicodeString *a2, icu::Formattable *a3, int a4, icu::ParsePosition *a5, int a6, const icu::NumberFormat *lpsrc)
{
  int v7 = lpsrc;
  uint64_t v31 = *MEMORY[0x1895F89C0];
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  uint64_t v30 = 0LL;
  __int128 v29 = 0u;
  uint64_t v26 = off_18971B688;
  LOWORD(v27) = 2;
  uint64_t v14 = 0LL;
  if (!a6 && v13)
  {
    uint64_t v15 = (*(uint64_t (**)(void *))(*(void *)v13 + 32LL))(v13);
    if (!v15) {
      return icu::UnicodeString::~UnicodeString((void *)v16, (icu::UnicodeString *)&v26);
    }
    uint64_t v14 = (const icu::NumberFormat *)v15;
    __int128 v24 = &unk_180A3D298;
    icu::UnicodeString::UnicodeString(v25, 1LL, &v24);
    (*(void (**)(const icu::NumberFormat *, _BYTE *))(*(void *)v14 + 376LL))(v14, v25);
    icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v25);
    int v7 = v14;
  }

  int v18 = *((_DWORD *)a5 + 2);
  (*(void (**)(const icu::NumberFormat *, const icu::UnicodeString *, icu::Formattable *, icu::ParsePosition *))(*(void *)v7 + 160LL))( v7,  a2,  a3,  a5);
  if (a4 >= 1)
  {
    int v19 = *((_DWORD *)a5 + 2) - v18;
    BOOL v20 = __OFSUB__(v19, a4);
    unint64_t v16 = (v19 - a4);
    if (!(((v16 & 0x80000000) != 0LL) ^ v20 | ((_DWORD)v16 == 0)))
    {
      int v21 = *((_DWORD *)a3 + 2);
      if ((int)v16 >= 1)
      {
        unsigned int v22 = v16 + 1;
        do
        {
          v21 /= 10;
          --v22;
        }

        while (v22 > 1);
      }

      *((_DWORD *)a5 + 2) = v18 + a4;
      icu::Formattable::setLong(a3, v21);
    }
  }

  if (v14) {
    (*(void (**)(const icu::NumberFormat *))(*(void *)v14 + 8LL))(v14);
  }
  return icu::UnicodeString::~UnicodeString((void *)v16, (icu::UnicodeString *)&v26);
}

uint64_t icu::SimpleDateFormat::translatePattern( uint64_t this, const icu::UnicodeString *a2, icu::UnicodeString *a3, const icu::UnicodeString *a4, const icu::UnicodeString *a5, UErrorCode *a6)
{
  uint64_t v10 = this;
  unint64_t v11 = 0LL;
  BOOL v12 = 0;
  if ((*((_WORD *)a2 + 4) & 1) != 0) {
    __int16 v13 = 2;
  }
  else {
    __int16 v13 = *((_WORD *)a2 + 4) & 0x1F;
  }
  *((_WORD *)a2 + 4) = v13;
  uint64_t v14 = this + 10;
  uint64_t v15 = (char *)a4 + 10;
  while (1)
  {
    int v16 = *(__int16 *)(v10 + 8);
    if (v16 < 0) {
      break;
    }
    unint64_t v17 = (unint64_t)*(unsigned __int16 *)(v10 + 8) >> 5;
LABEL_11:
    if (v17 <= v11)
    {
      BOOL v12 = v12;
LABEL_18:
      UChar v19 = -1;
      goto LABEL_19;
    }

    if ((v16 & 2) != 0) {
      uint64_t v18 = v14;
    }
    else {
      uint64_t v18 = *(void *)(v10 + 24);
    }
    UChar v19 = *(_WORD *)(v18 + 2 * v11);
    if (v12)
    {
      BOOL v12 = v19 != 39;
      goto LABEL_19;
    }

    if (v19 == 39)
    {
      UChar v19 = 39;
      BOOL v12 = 1;
    }

    else if (v19 <= 0x7Fu && byte_180A3CF5C[v19])
    {
      unsigned int v20 = *((unsigned __int16 *)a3 + 4);
      int v21 = (__int16)v20;
      int32_t v22 = v20 >> 5;
      if (v21 >= 0) {
        int32_t v23 = v22;
      }
      else {
        int32_t v23 = *((_DWORD *)a3 + 3);
      }
      this = icu::UnicodeString::doIndexOf((uint64_t)a3, v19, 0, v23);
      if ((_DWORD)this == -1) {
        goto LABEL_39;
      }
      unsigned int v24 = *((unsigned __int16 *)a4 + 4);
      if ((v24 & 0x8000u) == 0) {
        unsigned int v25 = v24 >> 5;
      }
      else {
        unsigned int v25 = *((_DWORD *)a4 + 3);
      }
      if (v25 <= this)
      {
        BOOL v12 = 0;
        goto LABEL_18;
      }

      BOOL v12 = 0;
      if ((v24 & 2) != 0) {
        uint64_t v26 = v15;
      }
      else {
        uint64_t v26 = (char *)*((void *)a4 + 3);
      }
      UChar v19 = *(_WORD *)&v26[2 * (int)this];
    }

    else
    {
      BOOL v12 = 0;
    }

UChar **icu::SimpleDateFormat::toPattern(UChar **this, UChar **a2)
{
  icu::UnicodeString::operator=(a2, this + 44);
  return a2;
}

icu::UnicodeString *icu::SimpleDateFormat::toLocalizedPattern( icu::SimpleDateFormat *this, icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  int v6 = (char *)this + 352;
  PatternUChars = icu::DateFormatSymbols::getPatternUChars(this);
  icu::UnicodeString::UnicodeString((uint64_t)v11, (uint64_t)PatternUChars);
  icu::SimpleDateFormat::translatePattern( (uint64_t)v6,  a2,  (icu::UnicodeString *)v11,  (const icu::UnicodeString *)(*((void *)this + 96) + 768LL),  (const icu::UnicodeString *)a3,  v8);
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v11);
  return a2;
}

void icu::SimpleDateFormat::applyPattern(icu::SimpleDateFormat *this, UChar **a2)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  icu::UnicodeString::operator=((UChar **)this + 44, a2);
  icu::SimpleDateFormat::parsePattern(this);
  uint64_t v3 = *((void *)this + 41);
  if (!v3) {
    return;
  }
  unsigned int v4 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 184LL))(v3);
  icu::UnicodeString::UnicodeString((uint64_t)v18, (uint64_t)"y");
  unsigned int v5 = *((unsigned __int16 *)this + 212);
  if ((v5 & 1) != 0)
  {
    int v7 = (void *)WORD4(v18[0]);
    if ((BYTE8(v18[0]) & 1) != 0) {
      goto LABEL_16;
    }
LABEL_20:
    icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v18);
    goto LABEL_21;
  }

  if ((v5 & 0x8000) != 0) {
    int v6 = *((_DWORD *)this + 107);
  }
  else {
    int v6 = v5 >> 5;
  }
  if ((SWORD4(v18[0]) & 0x8000u) == 0) {
    int v7 = (void *)(WORD4(v18[0]) >> 5);
  }
  else {
    int v7 = (void *)HIDWORD(v18[0]);
  }
  if ((BYTE8(v18[0]) & 1) != 0
    || v6 != (_DWORD)v7
    || !icu::UnicodeString::doEquals((icu::SimpleDateFormat *)((char *)this + 416), (const icu::UnicodeString *)v18, v6))
  {
    goto LABEL_20;
  }

void *icu::SimpleDateFormat::applyLocalizedPattern( icu::SimpleDateFormat *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  unsigned int v5 = (icu::SimpleDateFormat *)((char *)this + 352);
  int v6 = (icu::UnicodeString *)(*((void *)this + 96) + 768LL);
  PatternUChars = icu::DateFormatSymbols::getPatternUChars(this);
  icu::UnicodeString::UnicodeString((uint64_t)v11, (uint64_t)PatternUChars);
  icu::SimpleDateFormat::translatePattern( (uint64_t)a2,  v5,  v6,  (const icu::UnicodeString *)v11,  (const icu::UnicodeString *)a3,  v8);
  return icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v11);
}

uint64_t icu::SimpleDateFormat::getDateFormatSymbols(icu::SimpleDateFormat *this)
{
  return *((void *)this + 96);
}

void icu::SimpleDateFormat::adoptDateFormatSymbols(icu::SimpleDateFormat *this, icu::DateFormatSymbols *a2)
{
  unsigned int v4 = (icu::DateFormatSymbols *)*((void *)this + 96);
  if (v4)
  {
    icu::DateFormatSymbols::~DateFormatSymbols(v4);
    icu::UMemory::operator delete(v5);
  }

  *((void *)this + 96) = a2;
}

icu::DateFormatSymbols *icu::SimpleDateFormat::setDateFormatSymbols@<X0>( icu::SimpleDateFormat *this@<X0>, const icu::DateFormatSymbols *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v5 = (icu::DateFormatSymbols *)*((void *)this + 96);
  if (v5)
  {
    icu::DateFormatSymbols::~DateFormatSymbols(v5);
    icu::UMemory::operator delete(v6);
  }

  uint64_t result = (icu::DateFormatSymbols *)icu::UMemory::operator new(a3, (icu::UMemory *)0x4F8, (unint64_t)a2);
  if (result) {
    uint64_t result = icu::DateFormatSymbols::DateFormatSymbols(result, a2);
  }
  *((void *)this + 96) = result;
  return result;
}

icu::TimeZoneFormat *icu::SimpleDateFormat::getTimeZoneFormat(icu::SimpleDateFormat *this)
{
  UErrorCode v2 = U_ZERO_ERROR;
  return icu::SimpleDateFormat::tzFormat(this, &v2);
}

uint64_t icu::SimpleDateFormat::adoptTimeZoneFormat(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 776);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  *(void *)(a1 + 776) = a2;
  return result;
}

icu::TimeZoneFormat *icu::SimpleDateFormat::setTimeZoneFormat( icu::SimpleDateFormat *this, const icu::TimeZoneFormat *a2)
{
  uint64_t v4 = *((void *)this + 97);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t result = (icu::TimeZoneFormat *)icu::UMemory::operator new((icu::UMemory *)0x530, (unint64_t)a2);
  if (result) {
    uint64_t result = (icu::TimeZoneFormat *)icu::TimeZoneFormat::TimeZoneFormat(result, a2);
  }
  *((void *)this + 97) = result;
  return result;
}

void icu::SimpleDateFormat::adoptCalendar(icu::SimpleDateFormat *this, icu::Calendar *a2)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  UErrorCode v11 = U_ZERO_ERROR;
  memset(v12, 0, sizeof(v12));
  icu::Locale::Locale((icu::Locale *)v12, (uint64_t)this + 544);
  uint64_t v4 = (uint64_t *)*((void *)this + 96);
  if (!v4
    || (uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 41) + 184LL))(*((void *)this + 41)),
        v5 != (*(uint64_t (**)(icu::Calendar *))(*(void *)a2 + 184LL))(a2)))
  {
    int v6 = (char *)(*(uint64_t (**)(icu::Calendar *))(*(void *)a2 + 184LL))(a2);
    icu::Locale::setKeywordValue((const char **)v12, "calendar", v6, &v11);
    int v8 = icu::DateFormatSymbols::createForLocale((icu::DateFormatSymbols *)v12, &v11, v7);
    if (v11 >= U_ILLEGAL_ARGUMENT_ERROR)
    {
      (*(void (**)(icu::Calendar *))(*(void *)a2 + 8LL))(a2);
      goto LABEL_11;
    }

    uint64_t v4 = v8;
  }

  icu::DateFormat::adoptCalendar(this, a2);
  unsigned int v9 = (icu::DateFormatSymbols *)*((void *)this + 96);
  if (v9 != (icu::DateFormatSymbols *)v4)
  {
    if (v9)
    {
      icu::DateFormatSymbols::~DateFormatSymbols(v9);
      icu::UMemory::operator delete(v10);
    }

    *((void *)this + 96) = v4;
  }

  icu::SimpleDateFormat::initializeDefaultCentury(this);
LABEL_11:
  icu::Locale::~Locale((icu::Locale *)v12);
}

uint64_t icu::SimpleDateFormat::setContext(uint64_t a1, int a2, int *a3)
{
  uint64_t result = icu::DateFormat::setContext(a1, a2, a3);
  if (*a3 <= 0 && (a2 - 258) <= 2 && !*(void *)(a1 + 824))
  {
    *a3 = 0;
    uint64_t result = (uint64_t)icu::BreakIterator::createSentenceInstance((char **)(a1 + 544), (const icu::Locale *)a3, v7, v8);
    *(void *)(a1 + 824) = result;
    if (*a3 >= 1)
    {
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
      }
      *(void *)(a1 + 824) = 0LL;
    }
  }

  return result;
}

uint64_t icu::SimpleDateFormat::isFieldUnitIgnored(uint64_t a1, unsigned int a2)
{
  return icu::SimpleDateFormat::isFieldUnitIgnored(a1 + 352, a2);
}

{
  BOOL v2;
  unsigned __int16 v3;
  int v4;
  int v5;
  signed int v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  signed int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  signed int v17;
  UErrorCode v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  int v6 = icu::SimpleDateFormat::fgCalendarFieldToLevel[a2];
  int v7 = *(unsigned __int16 *)(a1 + 8);
  int v8 = v7 >> 5;
  unsigned int v9 = *(_DWORD *)(a1 + 12);
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v7 & 2) != 0) {
    uint64_t v10 = a1 + 10;
  }
  if ((v7 & 0x8000) != 0) {
    goto LABEL_6;
  }
LABEL_4:
  UErrorCode v11 = v7 >> 5;
  if (v5 < v8)
  {
    while (1)
    {
      if (v11 <= v5) {
        uint64_t v12 = 0xFFFF;
      }
      else {
        uint64_t v12 = *(unsigned __int16 *)(v10 + 2LL * v5);
      }
      if (v12 != v3 && v4 >= 1)
      {
        uint64_t v13 = v3 > 0x7Fu ? -1 : dword_180A3CD5C[v3];
        uint64_t v4 = 0;
        if (v6 <= v13) {
          return 0LL;
        }
      }

      if (v12 == 39) {
        break;
      }
      if (v2)
      {
        UErrorCode v2 = 1;
      }

      else
      {
        if (v12 > 0x7F) {
          int v16 = 0;
        }
        else {
          int v16 = byte_180A3CF5C[v12];
        }
        UErrorCode v2 = 0;
        if (v16)
        {
          uint64_t v3 = v12;
          ++v4;
        }
      }

uint64_t icu::SimpleDateFormat::compareSimpleAffix( icu::SimpleDateFormat *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3, uint64_t a4)
{
  int v4 = a4;
  unsigned int v5 = *((unsigned __int16 *)a2 + 4);
  int v6 = (__int16)v5;
  LODWORD(v7) = v5 >> 5;
  if (v6 >= 0) {
    unint64_t v7 = v7;
  }
  else {
    unint64_t v7 = *((unsigned int *)a2 + 3);
  }
  LODWORD(v8) = a4;
  int v11 = 0;
  uint64_t v8 = a4;
  while (1)
  {
    uint64_t v12 = (icu::PatternProps *)icu::UnicodeString::char32At((uint64_t *)v7, a2, v11);
    int v13 = (int)v12;
    int v14 = v12 < 0x10000 ? 1 : 2;
    uint64_t isWhiteSpace = (uint64_t *)icu::PatternProps::isWhiteSpace(v12);
    LODWORD(v17) = *((unsigned __int16 *)a3 + 4);
    int v16 = (__int16)v17;
    LODWORD(v17) = v17 >> 5;
    int v17 = v16 >= 0 ? (uint64_t *)v17 : (uint64_t *)*((unsigned int *)a3 + 3);
    if ((_DWORD)isWhiteSpace) {
      break;
    }
    v11 += v14;
    uint64_t v8 = (v14 + v8);
LABEL_36:
    unsigned int v30 = *((unsigned __int16 *)a2 + 4);
    int v31 = (__int16)v30;
    LODWORD(v7) = v30 >> 5;
    if (v31 >= 0) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = *((unsigned int *)a2 + 3);
    }
  }

  if ((int)v8 < (int)v17 && (uint64_t isWhiteSpace = icu::UnicodeString::char32At(v17, a3, v8), (_DWORD)isWhiteSpace == v13))
  {
    while (1)
    {
      v11 += v14;
      uint64_t v8 = (v14 + v8);
      unsigned int v18 = *((unsigned __int16 *)a2 + 4);
      int v19 = (__int16)v18;
      LODWORD(v2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v18 >> 5;
      unsigned int v20 = v19 >= 0 ? (uint64_t *)v20 : (uint64_t *)*((unsigned int *)a2 + 3);
      if (v11 == (_DWORD)v20) {
        break;
      }
      int v21 = (icu::PatternProps *)icu::UnicodeString::char32At(v20, a2, v11);
      unsigned int v22 = v21;
      uint64_t isWhiteSpace = (uint64_t *)icu::PatternProps::isWhiteSpace(v21);
      if (!(_DWORD)isWhiteSpace) {
        break;
      }
      unsigned int v23 = *((unsigned __int16 *)a3 + 4);
      int v24 = (__int16)v23;
      LODWORD(v25) = v23 >> 5;
      if (v24 >= 0) {
        unint64_t v25 = v25;
      }
      else {
        unint64_t v25 = *((unsigned int *)a3 + 3);
      }
      char v26 = 1;
      if ((int)v8 < (int)v25)
      {
        int v14 = v22 < 0x10000 ? 1 : 2;
        uint64_t isWhiteSpace = icu::UnicodeString::char32At((uint64_t *)v25, a3, v8);
        if ((_DWORD)isWhiteSpace == v22) {
          continue;
        }
      }

      goto LABEL_30;
    }

    char v26 = 1;
  }

  else
  {
    char v26 = 0;
  }

unint64_t icu::SimpleDateFormat::skipPatternWhiteSpace( icu::SimpleDateFormat *this, const icu::UnicodeString *a2, int a3)
{
  unsigned int v3 = *((unsigned __int16 *)a2 + 4);
  if ((v3 & 0x11) != 0)
  {
    int v4 = 0LL;
  }

  else if ((v3 & 2) != 0)
  {
    int v4 = (char *)a2 + 10;
  }

  else
  {
    int v4 = (char *)*((void *)a2 + 3);
  }

  int v5 = (__int16)v3;
  unsigned int v6 = v3 >> 5;
  if (v5 < 0) {
    unsigned int v6 = *((_DWORD *)a2 + 3);
  }
  return (unint64_t)((char *)icu::PatternProps::skipWhiteSpace((unsigned __int16 *)&v4[2 * a3], v6 - a3) - v4) >> 1;
}

uint64_t icu::SimpleDateFormat::skipUWhiteSpace( icu::SimpleDateFormat *this, const icu::UnicodeString *a2, uint64_t a3)
{
  do
  {
    uint64_t v4 = a3;
    unsigned int v5 = *((unsigned __int16 *)a2 + 4);
    int v6 = (__int16)v5;
    LODWORD(v7) = v5 >> 5;
    if (v6 >= 0) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = *((unsigned int *)a2 + 3);
    }
    unsigned int v8 = icu::UnicodeString::char32At((uint64_t *)v7, a2, a3);
    int isUWhiteSpace = u_isUWhiteSpace(v8);
    int v10 = v8 < 0x10000 ? 1 : 2;
    a3 = (v10 + v4);
  }

  while (isUWhiteSpace);
  return v4;
}

void ***sub_18098F374(void ***a1)
{
  UErrorCode v2 = *a1;
  if (*a1)
  {
    if (*v2) {
      icu::SharedObject::removeRef(*v2);
    }
    icu::UMemory::operator delete(v2);
  }

  return a1;
}

icu::UnicodeSet **sub_18098F3B0(icu::UnicodeSet **a1, UErrorCode *a2)
{
  __int16 v34 = (uint64_t *)*MEMORY[0x1895F89C0];
  uint64_t v4 = v34;
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  unsigned int v5 = icu::UMemory::operator new(v4, (icu::UMemory *)0xC8, (unint64_t)a2);
  if (v5)
  {
    unsigned int v8 = (icu::UnicodeSet *)v5;
    unsigned int v32 = "[";
    icu::UnicodeString::UnicodeString(v33, 1LL, &v32);
    icu::UnicodeSet::UnicodeSet(v8, (const icu::UnicodeString *)v33, a2);
    *a1 = v8;
    icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v33);
    __int128 v29 = v32;
    unint64_t v7 = (uint64_t *)&v29;
  }

  else
  {
    *a1 = 0LL;
  }

  int v10 = icu::UMemory::operator new(v7, (icu::UMemory *)0xC8, v6);
  if (v10)
  {
    int v13 = (icu::UnicodeSet *)v10;
    int v31 = L"[-.:[:whitespace:]]";
    icu::UnicodeString::UnicodeString(v33, 1LL, &v31);
    icu::UnicodeSet::UnicodeSet(v13, (const icu::UnicodeString *)v33, a2);
    a1[1] = v13;
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v33);
    __int128 v28 = v31;
    uint64_t v12 = (uint64_t *)&v28;
  }

  else
  {
    a1[1] = 0LL;
  }

  uint64_t v15 = icu::UMemory::operator new(v12, (icu::UMemory *)0xC8, v11);
  if (v15)
  {
    int v17 = (icu::UnicodeSet *)v15;
    unsigned int v30 = L"[:whitespace:]";
    icu::UnicodeString::UnicodeString(v33, 1LL, &v30);
    icu::UnicodeSet::UnicodeSet(v17, (const icu::UnicodeString *)v33, a2);
    a1[2] = v17;
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v33);
    UChar v27 = v30;
    int v16 = &v27;
  }

  else
  {
    a1[2] = 0LL;
  }

  int v19 = *a1;
  if (*a1)
  {
    unsigned int v20 = a1[1];
    if (v20)
    {
      unsigned int v20 = a1[2];
      if (v20)
      {
        icu::UnicodeSet::freeze(v19);
        icu::UnicodeSet::freeze(a1[1]);
        icu::UnicodeSet::freeze(a1[2]);
        return a1;
      }
    }

    int v21 = icu::UnicodeSet::~UnicodeSet(v20, v19);
    icu::UMemory::operator delete(v21);
  }

  *a1 = 0LL;
  unsigned int v22 = a1[1];
  if (v22)
  {
    unsigned int v23 = icu::UnicodeSet::~UnicodeSet(v16, v22);
    icu::UMemory::operator delete(v23);
  }

  a1[1] = 0LL;
  int v24 = a1[2];
  if (v24)
  {
    unint64_t v25 = icu::UnicodeSet::~UnicodeSet(v16, v24);
    icu::UMemory::operator delete(v25);
  }

  a1[2] = 0LL;
  *a2 = U_MEMORY_ALLOCATION_ERROR;
  return a1;
}

icu::UnicodeSet **sub_18098F5A4@<X0>(icu::UnicodeSet **a1@<X0>, void *a2@<X8>)
{
  unsigned int v3 = *a1;
  if (v3)
  {
    uint64_t v4 = icu::UnicodeSet::~UnicodeSet(a2, v3);
    icu::UMemory::operator delete(v4);
  }

  *a1 = 0LL;
  unsigned int v5 = a1[1];
  if (v5)
  {
    unint64_t v6 = icu::UnicodeSet::~UnicodeSet(a2, v5);
    icu::UMemory::operator delete(v6);
  }

  a1[1] = 0LL;
  unint64_t v7 = a1[2];
  if (v7)
  {
    unsigned int v8 = icu::UnicodeSet::~UnicodeSet(a2, v7);
    icu::UMemory::operator delete(v8);
  }

  a1[2] = 0LL;
  return a1;
}

uint64_t sub_18098F600@<X0>(void *a1@<X8>)
{
  if (qword_18C449BD0)
  {
    uint64_t v1 = sub_18098F5A4((icu::UnicodeSet **)qword_18C449BD0, a1);
    icu::UMemory::operator delete(v1);
  }

  qword_18C449BD0 = 0LL;
  atomic_store(0, &dword_18C449BD8);
  return 1LL;
}

uint64_t sub_18098F640(unsigned int a1)
{
  int v10 = 0;
  unsigned int v2 = atomic_load(&dword_18C449BD8);
  if (v2 == 2 || !icu::umtx_initImplPreInit(&dword_18C449BD8))
  {
    if (dword_18C449BDC > 0 || v10 > 0) {
      return 0LL;
    }
LABEL_10:
    if (a1 <= 0x1A)
    {
      if (((1 << a1) & 0x180F0) != 0)
      {
        uint64_t v8 = qword_18C449BD0 + 8;
        return *(void *)v8;
      }

      if (((1 << a1) & 0x600000E) != 0)
      {
        uint64_t v8 = qword_18C449BD0;
        return *(void *)v8;
      }
    }

    uint64_t v8 = qword_18C449BD0 + 16;
    return *(void *)v8;
  }

  sub_1809B36C0(0x19u, (uint64_t)sub_18098F760);
  unsigned int v5 = (icu::UnicodeSet **)icu::UMemory::operator new(v4, (icu::UMemory *)0x18, v3);
  if (v5)
  {
    unsigned int v5 = sub_18098F3B0(v5, (UErrorCode *)&v10);
    int v6 = v10;
  }

  else
  {
    int v6 = 7;
    int v10 = 7;
  }

  qword_18C449BD0 = (uint64_t)v5;
  dword_18C449BDC = v6;
  icu::umtx_initImplPostInit(&dword_18C449BD8);
  if (v10 < 1) {
    goto LABEL_10;
  }
  return 0LL;
}

uint64_t sub_18098F760@<X0>(void *a1@<X8>)
{
  return 1LL;
}

void *icu::CollationKey::getStaticClassID(icu::CollationKey *this)
{
  return &unk_18C535890;
}

void *icu::CollationKey::getDynamicClassID(icu::CollationKey *this)
{
  return &unk_18C535890;
}

double icu::CollationKey::CollationKey(icu::CollationKey *this)
{
  *(void *)this = off_18972B268;
  *(void *)&double result = 0x100000000LL;
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0x100000000LL;
  return result;
}

{
  double result;
  *(void *)this = off_18972B268;
  *(void *)&double result = 0x100000000LL;
  *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0x100000000LL;
  return result;
}

icu::CollationKey *icu::CollationKey::CollationKey( icu::CollationKey *this, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v3 = a3;
  *(void *)this = off_18972B268;
  *((_DWORD *)this + 2) = a3;
  *((_DWORD *)this + 3) = 0;
  if ((a3 & 0x80000000) != 0 || !a2 && a3) {
    goto LABEL_4;
  }
  if (a3 < 0x21)
  {
    if (!a3) {
      return this;
    }
    int v6 = (void *)((char *)this + 16);
LABEL_11:
    memcpy(v6, a2, v3);
    return this;
  }

  if (icu::CollationKey::reallocate(this, a3, 0))
  {
    int v6 = (void *)((char *)this + 16);
    if ((*((_DWORD *)this + 2) & 0x80000000) != 0) {
      int v6 = (void *)*v6;
    }
    goto LABEL_11;
  }

  unsigned int v3 = *((_DWORD *)this + 2);
LABEL_4:
  *((_DWORD *)this + 2) = v3 & 0x80000000;
  *((_DWORD *)this + 3) = 2;
  return this;
}

void *icu::CollationKey::reallocate(icu::CollationKey *this, int a2, int a3)
{
  int v6 = uprv_malloc(a2);
  unint64_t v7 = v6;
  if (v6)
  {
    int v8 = *((_DWORD *)this + 2);
    if (a3 >= 1)
    {
      unsigned int v9 = (void *)((char *)this + 16);
      if (v8 < 0) {
        unsigned int v9 = (void *)*v9;
      }
      memcpy(v6, v9, a3);
    }

    if (v8 < 0)
    {
      uprv_free(*((void **)this + 2));
      int v8 = *((_DWORD *)this + 2);
    }

    *((void *)this + 2) = v7;
    *((_DWORD *)this + 6) = a2;
    *((_DWORD *)this + 2) = v8 | 0x80000000;
  }

  return v7;
}

uint64_t icu::CollationKey::setToBogus(uint64_t this)
{
  *(_DWORD *)(this + 8) &= 0x80000000;
  *(_DWORD *)(this + 12) = 2;
  return this;
}

icu::CollationKey *icu::CollationKey::CollationKey(icu::CollationKey *this, const icu::CollationKey *a2)
{
  *(void *)this = off_18972B268;
  int v3 = *((_DWORD *)a2 + 3);
  size_t v4 = *((_DWORD *)a2 + 2) & 0x7FFFFFFF;
  *((_DWORD *)this + 2) = v4;
  *((_DWORD *)this + 3) = v3;
  if (*((_DWORD *)a2 + 3) == 2)
  {
    *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0x200000000LL;
  }

  else
  {
    if (v4 < 0x21)
    {
      if (!(_DWORD)v4) {
        return this;
      }
      int v8 = (void *)((char *)this + 16);
    }

    else
    {
      int v6 = icu::CollationKey::reallocate(this, v4, 0);
      int v7 = *((_DWORD *)this + 2);
      if (!v6)
      {
        *((_DWORD *)this + 2) = v7 & 0x80000000;
        *((_DWORD *)this + 3) = 2;
        return this;
      }

      int v8 = (void *)((char *)this + 16);
      if (v7 < 0) {
        int v8 = (void *)*v8;
      }
    }

    unint64_t v11 = (const void *)*((void *)a2 + 2);
    int v10 = (char *)a2 + 16;
    unsigned int v9 = v11;
    else {
      uint64_t v12 = v9;
    }
    memcpy(v8, v12, v4);
  }

  return this;
}

void icu::CollationKey::~CollationKey(void **this)
{
  *this = off_18972B268;
  if (((_DWORD)this[1] & 0x80000000) != 0) {
    uprv_free(this[2]);
  }
  icu::UObject::~UObject((icu::UObject *)this);
}

{
  void *v1;
  icu::CollationKey::~CollationKey(this);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::CollationKey::setLength(uint64_t this, int a2)
{
  *(void *)(this + 8) = *(_DWORD *)(this + 8) & 0x80000000 | a2;
  return this;
}

uint64_t icu::CollationKey::reset(uint64_t this)
{
  *(_DWORD *)(this + 8) &= 0x80000000;
  *(_DWORD *)(this + 12) = 1;
  return this;
}

BOOL icu::CollationKey::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  size_t v3 = v2 & 0x7FFFFFFF;
  int v4 = *(_DWORD *)(a2 + 8);
  if ((v2 & 0x7FFFFFFF) != (v4 & 0x7FFFFFFF)) {
    return 0LL;
  }
  if (a1 == a2) {
    return 1LL;
  }
  unsigned int v5 = (void *)(a1 + 16);
  if (v2 < 0) {
    unsigned int v5 = (void *)*v5;
  }
  int v8 = *(const void **)(a2 + 16);
  int v6 = (const void *)(a2 + 16);
  int v7 = v8;
  if (v4 < 0) {
    int v6 = v7;
  }
  return memcmp(v5, v6, v3) == 0;
}

icu::CollationKey *icu::CollationKey::operator=(icu::CollationKey *this, icu::CollationKey *a2)
{
  if (this != a2)
  {
    if (*((_DWORD *)a2 + 3) == 2)
    {
      int v4 = *((_DWORD *)this + 2);
    }

    else
    {
      size_t v6 = *((_DWORD *)a2 + 2) & 0x7FFFFFFF;
      int v4 = *((_DWORD *)this + 2);
      if (v4 < 0) {
        int v7 = *((_DWORD *)this + 6);
      }
      else {
        int v7 = 32;
      }
      if ((int)v6 <= v7
        || (v8 = icu::CollationKey::reallocate(this, *((_DWORD *)a2 + 2) & 0x7FFFFFFF, 0), int v4 = *((_DWORD *)this + 2),
                                                                                           v8))
      {
        if ((_DWORD)v6)
        {
          unsigned int v9 = (void *)((char *)this + 16);
          if (v4 < 0) {
            unsigned int v9 = (void *)*v9;
          }
          else {
            int v10 = (const void *)*((void *)a2 + 2);
          }
          memcpy(v9, v10, v6);
          int v4 = *((_DWORD *)this + 2);
        }

        *((_DWORD *)this + 2) = v4 & 0x80000000 | v6;
        int v5 = *((_DWORD *)a2 + 3);
        goto LABEL_18;
      }
    }

    *((_DWORD *)this + 2) = v4 & 0x80000000;
    int v5 = 2;
LABEL_18:
    *((_DWORD *)this + 3) = v5;
  }

  return this;
}

uint64_t icu::CollationKey::compareTo(icu::CollationKey *this, const icu::CollationKey *a2)
{
  UErrorCode v3 = U_ZERO_ERROR;
  return icu::CollationKey::compareTo(this, a2, &v3);
}

uint64_t icu::CollationKey::compareTo(icu::CollationKey *this, const icu::CollationKey *a2, UErrorCode *a3)
{
  int v5 = *((_DWORD *)this + 2);
  size_t v6 = (char *)this + 16;
  if (v5 < 0) {
    size_t v6 = *(char **)v6;
  }
  unsigned int v9 = (char *)*((void *)a2 + 2);
  int v7 = (char *)a2 + 16;
  int v8 = v9;
  int v10 = *((_DWORD *)v7 - 2);
  if (v10 < 0) {
    int v7 = v8;
  }
  if (v6 == v7) {
    return 0LL;
  }
  unsigned int v11 = v5 & 0x7FFFFFFF;
  unsigned int v12 = v10 & 0x7FFFFFFF;
  if (v11 < v12) {
    uint64_t v3 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v3 = v11 != v12;
  }
  if (v11 >= v12) {
    size_t v13 = v12;
  }
  else {
    size_t v13 = v11;
  }
  if ((_DWORD)v13)
  {
    int v14 = memcmp(v6, v7, v13);
    if (v14 < 1) {
      uint64_t v15 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v15 = 1LL;
    }
    if (v14) {
      return v15;
    }
  }

  return v3;
}

uint64_t icu::CollationKey::hashCode(icu::CollationKey *this)
{
  uint64_t result = *((unsigned int *)this + 3);
  if (!(_DWORD)result)
  {
    int v3 = *((_DWORD *)this + 2);
    int v4 = (unsigned __int8 *)this + 16;
    if (v3 < 0) {
      int v4 = *(unsigned __int8 **)v4;
    }
    if ((v3 & 0x7FFFFFFF) == 0 || v4 == 0LL)
    {
      uint64_t result = 1LL;
    }

    else
    {
      LODWORD(result) = ustr_hashCharsN(v4, v3 & 0x7FFFFFFF);
      if ((result & 0xFFFFFFFD) != 0) {
        uint64_t result = result;
      }
      else {
        uint64_t result = 1LL;
      }
    }

    *((_DWORD *)this + 3) = result;
  }

  return result;
}

uint64_t ucol_keyHashCode(unsigned __int8 *a1, int a2)
{
  uint64_t result = 1LL;
  if (a1 && a2)
  {
    LODWORD(result) = ustr_hashCharsN(a1, a2);
    if ((result & 0xFFFFFFFD) != 0) {
      return result;
    }
    else {
      return 1LL;
    }
  }

  return result;
}

char *icu::StandardPlural::getKeyword(int a1)
{
  return off_18972B298[a1];
}

uint64_t icu::StandardPlural::indexOrNegativeFromString(icu::StandardPlural *this, const char *a2)
{
  int v3 = (char *)this + 1;
  int v2 = *(char *)this;
  if (v2 <= 108)
  {
    if (v2 > 60)
    {
      if (v2 == 61)
      {
        if (strcmp((const char *)this + 1, "0"))
        {
          if (!strcmp(v3, "1")) {
            return 7LL;
          }
          return 0xFFFFFFFFLL;
        }

        return 6LL;
      }
    }

    else
    {
      if (v2 != 48)
      {
        if (v2 == 49 && !*v3) {
          return 7LL;
        }
        return 0xFFFFFFFFLL;
      }

      if (!*v3) {
        return 6LL;
      }
    }

    return 0xFFFFFFFFLL;
  }

  if (v2 > 115)
  {
    if (v2 == 116)
    {
      return 2LL;
    }

    else
    {
      if (v2 != 122) {
        return 0xFFFFFFFFLL;
      }
      uint64_t result = strcmp((const char *)this + 1, "ero");
      if ((_DWORD)result) {
        return 0xFFFFFFFFLL;
      }
    }
  }

  else
  {
    if (v2 == 109)
    {
      return 0xFFFFFFFFLL;
    }

    if (v2 != 111) {
      return 0xFFFFFFFFLL;
    }
    if (strcmp((const char *)this + 1, "ther"))
    {
      if (!strcmp(v3, "ne")) {
        return 1LL;
      }
      return 0xFFFFFFFFLL;
    }

    return 5LL;
  }

  return result;
}

uint64_t icu::StandardPlural::indexOrNegativeFromString( icu::StandardPlural *this, const icu::UnicodeString *a2)
{
  unsigned int v2 = *((unsigned __int16 *)this + 4);
  if ((v2 & 0x8000u) == 0) {
    unsigned int v3 = v2 >> 5;
  }
  else {
    unsigned int v3 = *((_DWORD *)this + 3);
  }
  switch(v3)
  {
    case 1u:
      if ((v2 & 2) != 0) {
        int v5 = (unsigned __int16 *)((char *)this + 10);
      }
      else {
        int v5 = (unsigned __int16 *)*((void *)this + 3);
      }
      int v6 = *v5;
      if (v6 == 49) {
        unsigned int v7 = 7;
      }
      else {
        unsigned int v7 = -1;
      }
      if (v6 == 48) {
        uint64_t v8 = 6LL;
      }
      else {
        uint64_t v8 = v7;
      }
      break;
    case 2u:
      if (icu::UnicodeString::doCompare((uint64_t)this, 0, 2, (uint64_t)"=", 0, 2))
      {
        unsigned int v9 = *((unsigned __int16 *)this + 4);
        int v10 = (__int16)v9;
        int32_t v11 = v9 >> 5;
        if (v10 >= 0) {
          int32_t v12 = v11;
        }
        else {
          int32_t v12 = *((_DWORD *)this + 3);
        }
        uint64_t v8 = 7LL;
      }

      else
      {
        uint64_t v8 = 6LL;
      }

      break;
    case 3u:
      if (icu::UnicodeString::doCompare((uint64_t)this, 0, 3, (uint64_t)"o", 0, 3))
      {
        unsigned int v13 = *((unsigned __int16 *)this + 4);
        int v14 = (__int16)v13;
        int32_t v15 = v13 >> 5;
        if (v14 >= 0) {
          int32_t v16 = v15;
        }
        else {
          int32_t v16 = *((_DWORD *)this + 3);
        }
        if (icu::UnicodeString::doCompare((uint64_t)this, 0, v16, (uint64_t)"t", 0, 3))
        {
          unsigned int v17 = *((unsigned __int16 *)this + 4);
          int v18 = (__int16)v17;
          int32_t v19 = v17 >> 5;
          if (v18 >= 0) {
            int32_t v20 = v19;
          }
          else {
            int32_t v20 = *((_DWORD *)this + 3);
          }
          uint64_t v8 = 3LL;
        }

        else
        {
          uint64_t v8 = 2LL;
        }
      }

      else
      {
        uint64_t v8 = 1LL;
      }

      break;
    case 4u:
      uint64_t v8 = 4LL;
      if (icu::UnicodeString::doCompare((uint64_t)this, 0, 4, (uint64_t)"m", 0, 4))
      {
        unsigned int v21 = *((unsigned __int16 *)this + 4);
        int v22 = (__int16)v21;
        int32_t v23 = v21 >> 5;
        if (v22 >= 0) {
          int32_t v24 = v23;
        }
        else {
          int32_t v24 = *((_DWORD *)this + 3);
        }
        uint64_t v8 = 0LL;
      }

      break;
    case 5u:
      uint64_t v8 = 5LL;
      break;
    default:
LABEL_37:
      uint64_t v8 = 0xFFFFFFFFLL;
      break;
  }

  return v8;
}

uint64_t icu::StandardPlural::indexFromString(icu::StandardPlural *this, char *a2, UErrorCode *a3)
{
  uint64_t result = icu::StandardPlural::indexOrNegativeFromString(this, a2);
  if ((result & 0x80000000) != 0)
  {
    *(_DWORD *)a2 = 1;
    return 5LL;
  }

  return result;
}

uint64_t icu::StandardPlural::indexFromString( icu::StandardPlural *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t result = icu::StandardPlural::indexOrNegativeFromString(this, a2);
  if ((result & 0x80000000) != 0)
  {
    *(_DWORD *)a2 = 1;
    return 5LL;
  }

  return result;
}

uint64_t icu::StringSegment::StringSegment(uint64_t this, const icu::UnicodeString *a2, char a3)
{
  *(void *)this = a2;
  *(_DWORD *)(this + 8) = 0;
  unsigned int v3 = *((unsigned __int16 *)a2 + 4);
  int v4 = (__int16)v3;
  unsigned int v5 = v3 >> 5;
  if (v4 < 0) {
    unsigned int v5 = *((_DWORD *)a2 + 3);
  }
  *(_DWORD *)(this + 12) = v5;
  *(_BYTE *)(this + 16) = a3;
  return this;
}

{
  unsigned int v3;
  int v4;
  unsigned int v5;
  *(void *)this = a2;
  *(_DWORD *)(this + 8) = 0;
  unsigned int v3 = *((unsigned __int16 *)a2 + 4);
  int v4 = (__int16)v3;
  unsigned int v5 = v3 >> 5;
  if (v4 < 0) {
    unsigned int v5 = *((_DWORD *)a2 + 3);
  }
  *(_DWORD *)(this + 12) = v5;
  *(_BYTE *)(this + 16) = a3;
  return this;
}

uint64_t icu::StringSegment::getOffset(icu::StringSegment *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t icu::StringSegment::setOffset(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8) = a2;
  return this;
}

uint64_t icu::StringSegment::adjustOffset(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8) += a2;
  return this;
}

unint64_t icu::StringSegment::adjustOffsetByCodePoint(icu::StringSegment *this)
{
  unint64_t result = icu::StringSegment::getCodePoint(this);
  else {
    int v3 = 2;
  }
  *((_DWORD *)this + 2) += v3;
  return result;
}

unint64_t icu::StringSegment::getCodePoint(icu::StringSegment *this)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *((int *)this + 2);
  unsigned int v4 = *(unsigned __int16 *)(v2 + 8);
  else {
    unsigned int v5 = v4 >> 5;
  }
  if (v5 <= v3)
  {
    unsigned int v7 = 0xFFFF;
  }

  else
  {
    if ((v4 & 2) != 0) {
      uint64_t v6 = v2 + 10;
    }
    else {
      uint64_t v6 = *(void *)(v2 + 24);
    }
    unsigned int v7 = *(unsigned __int16 *)(v6 + 2 * v3);
    if ((v7 & 0xFC00) == 0xD800)
    {
      uint64_t v8 = (uint64_t *)*((unsigned int *)this + 3);
    }
  }

  if ((v7 & 0xF800) == 0xD800) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v7;
  }
}

uint64_t icu::StringSegment::setLength(uint64_t this, int a2)
{
  *(_DWORD *)(this + 12) = *(_DWORD *)(this + 8) + a2;
  return this;
}

_DWORD *icu::StringSegment::resetLength(_DWORD *this)
{
  else {
    int v1 = *(unsigned __int16 *)(*(void *)this + 8LL) >> 5;
  }
  this[3] = v1;
  return this;
}

uint64_t icu::StringSegment::length(icu::StringSegment *this)
{
  return (*((_DWORD *)this + 3) - *((_DWORD *)this + 2));
}

uint64_t icu::StringSegment::charAt(icu::StringSegment *this, int a2)
{
  uint64_t v2 = *(void *)this;
  unsigned int v3 = *((_DWORD *)this + 2) + a2;
  unsigned int v4 = *(unsigned __int16 *)(*(void *)this + 8LL);
  else {
    unsigned int v5 = v4 >> 5;
  }
  if (v5 <= v3) {
    return 0xFFFFLL;
  }
  if ((v4 & 2) != 0) {
    uint64_t v6 = v2 + 10;
  }
  else {
    uint64_t v6 = *(void *)(v2 + 24);
  }
  return *(unsigned __int16 *)(v6 + 2LL * (int)v3);
}

uint64_t *icu::StringSegment::codePointAt(uint64_t **this, int a2)
{
  return icu::UnicodeString::char32At(*this, (icu::UnicodeString *)*this, *((_DWORD *)this + 2) + a2);
}

uint64_t icu::StringSegment::toUnicodeString@<X0>(icu::StringSegment *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)this;
  __int16 v5 = *(_WORD *)(*(void *)this + 8LL);
  if ((v5 & 0x11) != 0)
  {
    uint64_t v6 = 0LL;
  }

  else if ((v5 & 2) != 0)
  {
    uint64_t v6 = v4 + 10;
  }

  else
  {
    uint64_t v6 = *(void *)(v4 + 24);
  }

  return icu::UnicodeString::UnicodeString( a2,  v6 + 2LL * *((int *)this + 2),  (*((_DWORD *)this + 3) - *((_DWORD *)this + 2)));
}

uint64_t icu::StringSegment::toTempUnicodeString@<X0>(icu::StringSegment *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)this;
  __int16 v5 = *(_WORD *)(*(void *)this + 8LL);
  if ((v5 & 0x11) != 0)
  {
    uint64_t v6 = 0LL;
  }

  else if ((v5 & 2) != 0)
  {
    uint64_t v6 = v4 + 10;
  }

  else
  {
    uint64_t v6 = *(void *)(v4 + 24);
  }

  uint64_t v8 = v6 + 2LL * *((int *)this + 2);
  return icu::UnicodeString::UnicodeString(a2, 0LL, &v8);
}

BOOL icu::StringSegment::startsWith(icu::StringSegment *this, UChar32 a2)
{
  UChar32 CodePoint = icu::StringSegment::getCodePoint(this);
  return icu::StringSegment::codePointsEqual(CodePoint, a2, *((unsigned __int8 *)this + 16));
}

BOOL icu::StringSegment::codePointsEqual(UChar32 c, UChar32 a2, int a3)
{
  BOOL v4 = c == a2;
  BOOL result = c == a2;
  if (!v4)
  {
    if (a3)
    {
      UChar32 v7 = u_foldCase(c, 1u);
      return v7 == u_foldCase(a2, 1u);
    }
  }

  return result;
}

BOOL icu::StringSegment::startsWith(icu::StringSegment *this, const icu::UnicodeSet *a2)
{
  int CodePoint = icu::StringSegment::getCodePoint(this);
  return CodePoint != -1 && icu::UnicodeSet::contains(a2, CodePoint) != 0;
}

BOOL icu::StringSegment::startsWith(icu::StringSegment *this, const icu::UnicodeString *a2)
{
  unsigned int v2 = *((unsigned __int16 *)a2 + 4);
  if ((v2 & 1) != 0) {
    return 0LL;
  }
  int v4 = (__int16)v2;
  unsigned int v5 = v2 >> 5;
  if (v4 < 0) {
    unsigned int v5 = *((_DWORD *)a2 + 3);
  }
  if (!v5 || *((_DWORD *)this + 3) == *((_DWORD *)this + 2)) {
    return 0LL;
  }
  UChar32 CodePoint = icu::StringSegment::getCodePoint(this);
  UChar32 v10 = icu::UnicodeString::char32At(v9, a2, 0);
  return icu::StringSegment::codePointsEqual(CodePoint, v10, *((unsigned __int8 *)this + 16));
}

unint64_t icu::StringSegment::getCommonPrefixLength( icu::StringSegment *this, const icu::UnicodeString *a2)
{
  return icu::StringSegment::getPrefixLengthInternal(this, a2, *((unsigned __int8 *)this + 16));
}

unint64_t icu::StringSegment::getPrefixLengthInternal( icu::StringSegment *this, const icu::UnicodeString *a2, int a3)
{
  unint64_t v6 = 0LL;
  UChar32 v7 = (char *)a2 + 10;
  do
  {
    unint64_t v8 = v6;
    unsigned int v9 = *((unsigned __int16 *)a2 + 4);
    int v10 = (__int16)v9;
    int v11 = v9 >> 5;
    if (v10 >= 0) {
      int v12 = v11;
    }
    else {
      int v12 = *((_DWORD *)a2 + 3);
    }
    uint64_t v13 = *(void *)this;
    unsigned int v14 = *(unsigned __int16 *)(*(void *)this + 8LL);
    unsigned int v15 = *(__int16 *)(*(void *)this + 8LL) < 0 ? *(_DWORD *)(v13 + 12) : v14 >> 5;
    unsigned int v16 = v8 + *((_DWORD *)this + 2);
    if (v15 <= v16)
    {
      UChar32 v18 = 0xFFFF;
    }

    else
    {
      uint64_t v17 = (v14 & 2) != 0 ? v13 + 10 : *(void *)(v13 + 24);
      UChar32 v18 = *(unsigned __int16 *)(v17 + 2LL * (int)v16);
    }

    unsigned int v19 = *((unsigned __int16 *)a2 + 4);
    unint64_t v20 = (v19 & 0x8000u) == 0 ? v19 >> 5 : *((unsigned int *)a2 + 3);
    if (v8 >= v20)
    {
      UChar32 v22 = 0xFFFF;
    }

    else
    {
      unsigned int v21 = (v19 & 2) != 0 ? v7 : (char *)*((void *)a2 + 3);
      UChar32 v22 = *(unsigned __int16 *)&v21[2 * v8];
    }

    BOOL v23 = icu::StringSegment::codePointsEqual(v18, v22, a3);
    unint64_t v6 = v8 + 1;
  }

  while (v23);
  return v8;
}

unint64_t icu::StringSegment::getCaseSensitivePrefixLength( icu::StringSegment *this, const icu::UnicodeString *a2)
{
  return icu::StringSegment::getPrefixLengthInternal(this, a2, 0);
}

BOOL icu::StringSegment::operator==(icu::StringSegment *a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  icu::StringSegment::toTempUnicodeString(a1, (uint64_t)v8);
  if ((v9 & 1) != 0)
  {
    unint64_t v6 = (void *)*(unsigned __int16 *)(a2 + 8);
    BOOL v3 = v6 & 1;
  }

  else
  {
    BOOL v3 = 0LL;
    if ((v9 & 0x8000u) == 0) {
      int v4 = v9 >> 5;
    }
    else {
      int v4 = v10;
    }
    unsigned int v5 = *(unsigned __int16 *)(a2 + 8);
    if ((v5 & 0x8000u) == 0) {
      unint64_t v6 = (void *)(v5 >> 5);
    }
    else {
      unint64_t v6 = (void *)*(unsigned int *)(a2 + 12);
    }
    if ((v5 & 1) == 0 && v4 == (_DWORD)v6) {
      BOOL v3 = icu::UnicodeString::doEquals((icu::UnicodeString *)v8, (const icu::UnicodeString *)a2, v4);
    }
  }

  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v8);
  return v3;
}

void *sub_180990744()
{
  return &unk_18C535891;
}

uint64_t sub_180990750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  *(void *)a1 = off_18972B2E8;
  *(void *)(a1 + 8) = &unk_18972B368;
  *(void *)(a1 + 16) = &unk_18972B3A8;
  *(void *)(a1 + 24) = off_18971B688;
  *(_WORD *)(a1 + 32) = 2;
  *(void *)(a1 + 88) = a6;
  *(_DWORD *)(a1 + 96) = a5;
  *(void *)(a1 + 10icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = -1LL;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 24LL))(a2, a3, a4, a1 + 24);
  return a1;
}

void sub_1809907D0(uint64_t a1)
{
  *(void *)a1 = off_18972B2E8;
  *(void *)(a1 + 8) = &unk_18972B368;
  *(void *)(a1 + 16) = &unk_18972B3A8;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 24));
  icu::UnicodeReplacer::~UnicodeReplacer((icu::UnicodeReplacer *)(a1 + 16));
  icu::UnicodeMatcher::~UnicodeMatcher((icu::UnicodeMatcher *)(a1 + 8));
  icu::UnicodeFunctor::~UnicodeFunctor((icu::UnicodeFunctor *)a1);
}

void sub_180990834(uint64_t a1)
{
}

void sub_18099083C(uint64_t a1)
{
}

void sub_180990844(uint64_t a1)
{
}

void sub_180990858(uint64_t a1)
{
}

void sub_180990870(uint64_t a1)
{
}

uint64_t *sub_180990888@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x70, a2);
  unsigned int v5 = v4;
  if (v4)
  {
    *int v4 = (uint64_t)off_18972B2E8;
    v4[1] = (uint64_t)&unk_18972B368;
    v4[2] = (uint64_t)&unk_18972B3A8;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v4 + 3), (UChar **)(a1 + 24));
    v5[11] = *(void *)(a1 + 88);
    v5[12] = *(void *)(a1 + 96);
    *((_DWORD *)v5 + 26) = *(_DWORD *)(a1 + 104);
  }

  return v5;
}

uint64_t sub_1809908F4(uint64_t a1)
{
  if (a1) {
    return a1 + 8;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_180990904(uint64_t a1)
{
  if (a1) {
    return a1 + 16;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_180990914(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  int v10 = *a3;
  int v27 = v10;
  if (v10 <= (int)a4)
  {
    for (unint64_t i = 0LL; ; ++i)
    {
      unsigned int v13 = *(unsigned __int16 *)(a1 + 32);
      else {
        unsigned int v14 = v13 >> 5;
      }
      if ((uint64_t)i >= (int)v14)
      {
        *(_DWORD *)(a1 + 10icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = *a3;
        int v26 = v27;
        int v10 = v27;
        goto LABEL_49;
      }

      if ((_DWORD)a5 && v27 == (_DWORD)a4) {
        break;
      }
      if ((v13 & 0x8000) != 0) {
        unsigned int v15 = *(_DWORD *)(a1 + 36);
      }
      else {
        unsigned int v15 = v13 >> 5;
      }
      if (i >= v15)
      {
        int v17 = 0xFFFF;
      }

      else
      {
        uint64_t v16 = a1 + 34;
        if ((v13 & 2) == 0) {
          uint64_t v16 = *(void *)(a1 + 48);
        }
        int v17 = *(unsigned __int16 *)(v16 + 2 * i);
      }

      uint64_t v18 = sub_18095CEB0(*(void *)(a1 + 88), v17);
      if (v18)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t))(*(void *)v18 + 16LL))( v18,  a2,  &v27,  a4,  a5);
        if ((_DWORD)result != 2) {
          return result;
        }
      }

      else
      {
        ++v27;
      }
    }

    return 1LL;
  }

  else
  {
    else {
      int v11 = *(unsigned __int16 *)(a1 + 32) >> 5;
    }
    if (v11 >= 1)
    {
      uint64_t v20 = v11;
      do
      {
        unsigned int v21 = *(unsigned __int16 *)(a1 + 32);
        else {
          unsigned int v22 = v21 >> 5;
        }
        if (v22 <= --v20)
        {
          int v24 = 0xFFFF;
        }

        else
        {
          uint64_t v23 = a1 + 34;
          if ((v21 & 2) == 0) {
            uint64_t v23 = *(void *)(a1 + 48);
          }
          int v24 = *(unsigned __int16 *)(v23 + 2LL * v20);
        }

        uint64_t v25 = sub_18095CEB0(*(void *)(a1 + 88), v24);
        if (v25)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t))(*(void *)v25 + 16LL))( v25,  a2,  &v27,  a4,  a5);
          if ((_DWORD)result != 2) {
            return result;
          }
        }

        else
        {
          --v27;
        }
      }

      while ((unint64_t)(v20 + 1) > 1);
      int v10 = v27;
    }

    if ((*(_DWORD *)(a1 + 100) & 0x80000000) != 0)
    {
      *(_DWORD *)(a1 + 10icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v10 + 1;
      int v26 = *a3 + 1;
LABEL_49:
      *(_DWORD *)(a1 + 104) = v26;
    }

    *a3 = v10;
    return 2LL;
  }

uint64_t sub_180990B6C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  return sub_180990914(a1 - 8, a2, a3, a4, a5);
}

icu::ICU_Utility *sub_180990B74( uint64_t a1, icu::ICU_Utility *this, uint64_t a3, uint64_t a4, uint64_t a5, icu::UnicodeString *a6)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  unsigned int v9 = *((unsigned __int16 *)this + 4);
  if ((v9 & 1) != 0)
  {
    icu::UnicodeString::unBogus((uint64_t)this);
  }

  else
  {
    if ((v9 & 0x8000u) == 0) {
      unsigned int v10 = v9 >> 5;
    }
    else {
      unsigned int v10 = *((_DWORD *)this + 3);
    }
    if (v10) {
      *((_WORD *)this + 4) &= 0x1Fu;
    }
  }

  __int128 v29 = 0u;
  __int128 v30 = 0u;
  uint64_t v32 = 0LL;
  __int128 v31 = 0u;
  uint64_t v27 = 0LL;
  __int128 v28 = off_18971B688;
  LOWORD(v29) = 2;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  uint64_t v23 = off_18971B688;
  LOWORD(v24) = 2;
  if (*(int *)(a1 + 96) >= 1)
  {
    __int16 v22 = 40;
    icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v22, 0, 1LL);
  }

  unint64_t v11 = 0LL;
  while ((*(__int16 *)(a1 + 32) & 0x80000000) == 0)
  {
    unint64_t v12 = (unint64_t)*(unsigned __int16 *)(a1 + 32) >> 5;
LABEL_16:
    if (v12 <= v11)
    {
      uint64_t v14 = 0xFFFFLL;
    }

    else
    {
      uint64_t v13 = a1 + 34;
      if ((*(_WORD *)(a1 + 32) & 2) == 0) {
        uint64_t v13 = *(void *)(a1 + 48);
      }
      uint64_t v14 = *(unsigned __int16 *)(v13 + 2 * v11);
    }

    uint64_t v15 = sub_18095CEB0(*(void *)(a1 + 88), v14);
    if (v15)
    {
      int v17 = (icu::UnicodeString *)(*(uint64_t (**)(uint64_t, void (***)(icu::UnicodeString *__hidden), uint64_t))(*(void *)v15 + 24LL))( v15,  &v28,  a3);
      icu::ICU_Utility::appendToRule(this, v17, (const icu::UnicodeString *)1, a3, (icu::UnicodeString *)&v23, v18);
    }

    else
    {
      icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)v14, 0, a3, (icu::UnicodeString *)&v23, v16);
    }

    ++v11;
  }

  if ((uint64_t)v11 < *(int *)(a1 + 36))
  {
    unint64_t v12 = *(unsigned int *)(a1 + 36);
    goto LABEL_16;
  }

icu::ICU_Utility *sub_180990D7C( uint64_t a1, icu::ICU_Utility *a2, uint64_t a3, uint64_t a4, uint64_t a5, icu::UnicodeString *a6)
{
  return sub_180990B74(a1 - 8, a2, a3, a4, a5, a6);
}

uint64_t sub_180990D84(uint64_t a1, uint64_t a2)
{
  if ((*(__int16 *)(a1 + 32) & 0x80000000) == 0)
  {
    int v4 = (uint64_t *)(*(unsigned __int16 *)(a1 + 32) >> 5);
    if ((_DWORD)v4) {
      goto LABEL_3;
    }
    return 1LL;
  }

  int v4 = (uint64_t *)*(unsigned int *)(a1 + 36);
  if (!(_DWORD)v4) {
    return 1LL;
  }
LABEL_3:
  int v5 = icu::UnicodeString::char32At(v4, (icu::UnicodeString *)(a1 + 24), 0);
  unsigned __int8 v6 = v5;
  uint64_t v7 = sub_18095CEB0(*(void *)(a1 + 88), v5);
  if (v7) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 32LL))(v7, a2);
  }
  else {
    return (_DWORD)a2 == v6;
  }
}

uint64_t sub_180990E14(uint64_t a1, uint64_t a2)
{
  return sub_180990D84(a1 - 8, a2);
}

icu::UnicodeSet *sub_180990E1C(icu::UnicodeSet *result, icu::UnicodeSet *a2)
{
  BOOL v3 = result;
  int v4 = 0;
  int v5 = (icu::UnicodeSet *)((char *)result + 24);
  while (1)
  {
    unsigned __int8 v6 = *((__int16 *)v3 + 16) < 0
    unsigned int v7 = icu::UnicodeString::char32At(v6, v5, v4);
    uint64_t v8 = sub_18095CEB0(*((void *)v3 + 11), v7);
    if (v8) {
      uint64_t result = (icu::UnicodeSet *)(*(uint64_t (**)(uint64_t, icu::UnicodeSet *))(*(void *)v8 + 40LL))(v8, a2);
    }
    else {
      uint64_t result = icu::UnicodeSet::add(a2, v7);
    }
    if (v7 < 0x10000) {
      int v9 = 1;
    }
    else {
      int v9 = 2;
    }
    v4 += v9;
  }

  return result;
}

icu::UnicodeSet *sub_180990EC8(uint64_t a1, icu::UnicodeSet *a2)
{
  return sub_180990E1C((icu::UnicodeSet *)(a1 - 8), a2);
}

uint64_t sub_180990ED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  int v7 = *(_DWORD *)(a1 + 100);
  if (v7 < 0 || v7 == *(_DWORD *)(a1 + 104))
  {
    uint64_t v9 = 0LL;
  }

  else
  {
    (*(void (**)(uint64_t))(*(void *)a2 + 40LL))(a2);
    uint64_t v9 = (*(_DWORD *)(a1 + 104) - *(_DWORD *)(a1 + 100));
  }

  unint64_t v11 = off_18971B688;
  __int16 v12 = 2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void (***)(icu::UnicodeString *__hidden)))(*(void *)a2 + 32LL))( a2,  a3,  a4,  &v11);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v11);
  return v9;
}

uint64_t sub_180990FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_180990ED0(a1 - 16, a2, a3, a4);
}

icu::UnicodeString *sub_180990FB4(uint64_t a1, icu::UnicodeString *this)
{
  unsigned int v4 = *((unsigned __int16 *)this + 4);
  if ((v4 & 1) != 0)
  {
    icu::UnicodeString::unBogus((uint64_t)this);
  }

  else
  {
    if ((v4 & 0x8000u) == 0) {
      unsigned int v5 = v4 >> 5;
    }
    else {
      unsigned int v5 = *((_DWORD *)this + 3);
    }
    if (v5) {
      *((_WORD *)this + 4) &= 0x1Fu;
    }
  }

  __int16 v7 = 36;
  icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v7, 0, 1LL);
  icu::ICU_Utility::appendNumber(this, (icu::UnicodeString *)*(unsigned int *)(a1 + 96), 0xAu, 1);
  return this;
}

icu::UnicodeString *sub_180991044(uint64_t a1, icu::UnicodeString *a2)
{
  return sub_180990FB4(a1 - 16, a2);
}

double sub_180991050(uint64_t a1)
{
  double result = NAN;
  *(void *)(a1 + 10icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = -1LL;
  return result;
}

void *sub_180991064(void *result, uint64_t a2)
{
  unsigned int v2 = result;
  int v3 = 0;
  result[11] = a2;
  unsigned int v4 = (icu::UnicodeString *)(result + 3);
  while (1)
  {
    unsigned int v5 = (__int16)v2[4] < 0 ? (uint64_t *)*((unsigned int *)v2 + 9) : (uint64_t *)(*((unsigned __int16 *)v2 + 16) >> 5);
    unsigned int v6 = icu::UnicodeString::char32At(v5, v4, v3);
    double result = (void *)sub_18095CE84(v2[11], v6);
    if (result) {
      double result = (void *)(*(uint64_t (**)(void *, void))(*result + 48LL))(result, v2[11]);
    }
    if (v6 < 0x10000) {
      int v7 = 1;
    }
    else {
      int v7 = 2;
    }
    v3 += v7;
  }

  return result;
}

void *sub_18099110C()
{
  return &unk_18C535892;
}

uint64_t sub_180991118(uint64_t a1, UChar **a2, int a3, uint64_t a4)
{
  *(void *)a1 = off_18972B428;
  *(void *)(a1 + 8) = &unk_18972B488;
  *(void *)(a1 + 16) = off_18971B688;
  *(_WORD *)(a1 + 24) = 2;
  icu::UnicodeString::operator=((UChar **)(a1 + 16), a2);
  *(_DWORD *)(a1 + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = a3;
  *(_WORD *)(a1 + 84) = 257;
  *(void *)(a1 + 88) = a4;
  return a1;
}

uint64_t sub_180991184(uint64_t a1, UChar **a2, uint64_t a3)
{
  *(void *)a1 = off_18972B428;
  *(void *)(a1 + 8) = &unk_18972B488;
  *(void *)(a1 + 16) = off_18971B688;
  *(_WORD *)(a1 + 24) = 2;
  icu::UnicodeString::operator=((UChar **)(a1 + 16), a2);
  *(_DWORD *)(a1 + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  *(_WORD *)(a1 + 84) = 256;
  *(void *)(a1 + 88) = a3;
  return a1;
}

void sub_1809911E4(void *a1)
{
  *a1 = off_18972B428;
  a1[1] = &unk_18972B488;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 2));
  icu::UnicodeFunctor::~UnicodeFunctor((icu::UnicodeFunctor *)a1);
}

void sub_180991218(void *a1)
{
  *(a1 - icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = off_18972B428;
  int v1 = (icu::UnicodeFunctor *)(a1 - 1);
  *a1 = &unk_18972B488;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 1));
  icu::UnicodeFunctor::~UnicodeFunctor(v1);
}

void sub_180991250(void *a1)
{
  *a1 = off_18972B428;
  a1[1] = &unk_18972B488;
  icu::UnicodeString::~UnicodeString(off_18972B428, (icu::UnicodeString *)(a1 + 2));
  icu::UnicodeFunctor::~UnicodeFunctor((icu::UnicodeFunctor *)a1);
  icu::UMemory::operator delete(v2);
}

void sub_180991288(uint64_t a1)
{
}

uint64_t *sub_180991290@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  unsigned int v5 = v4;
  if (v4)
  {
    *unsigned int v4 = (uint64_t)off_18972B428;
    v4[1] = (uint64_t)&unk_18972B488;
    v4[2] = (uint64_t)off_18971B688;
    *((_WORD *)v4 + 12) = 2;
    icu::UnicodeString::operator=((UChar **)v4 + 2, (UChar **)(a1 + 16));
    *((_DWORD *)v5 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = *(_DWORD *)(a1 + 80);
    *((_WORD *)v5 + 42) = *(_WORD *)(a1 + 84);
    v5[11] = *(void *)(a1 + 88);
  }

  return v5;
}

uint64_t sub_18099130C(uint64_t a1)
{
  if (a1) {
    return a1 + 8;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_18099131C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v5 = a3;
  uint64_t v50 = *MEMORY[0x1895F89C0];
  if (!*(_BYTE *)(a1 + 85))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32LL))(a2, a3, a4, a1 + 16);
    else {
      uint64_t v10 = *(unsigned __int16 *)(a1 + 24) >> 5;
    }
    int v13 = *(_DWORD *)(a1 + 80);
    goto LABEL_45;
  }

  int v41 = a4;
  __int128 v46 = 0u;
  uint64_t v49 = 0LL;
  __int128 v48 = 0u;
  __int128 v47 = 0u;
  uint64_t v45 = off_18971B688;
  LOWORD(v46) = 2;
  *(_BYTE *)(a1 + 85) = 0;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64LL))(a2);
  unsigned int v42 = v5;
  if ((int)v5 < 1)
  {
    memset(v44, 0, sizeof(v44));
    icu::UnicodeString::UnicodeString((uint64_t)v44, 0xFFFF);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _OWORD *))(*(void *)a2 + 32LL))(a2, v8, v8, v44);
    icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v44);
    int v9 = 1;
  }

  else
  {
    else {
      int v9 = 2;
    }
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)a2 + 40LL))( a2,  (v5 - v9),  v5,  v8);
  }

  int v12 = 0;
  int v13 = 0;
  int v40 = v8;
  uint64_t v14 = (v9 + v8);
  uint64_t v15 = v14;
  while (1)
  {
    int v16 = *(__int16 *)(a1 + 24) < 0 ? *(_DWORD *)(a1 + 28) : *(unsigned __int16 *)(a1 + 24) >> 5;
    if (v12 >= v16) {
      break;
    }
    int v17 = (uint64_t *)*(unsigned int *)(a1 + 80);
    if (v12 == (_DWORD)v17) {
      int v13 = v15 - v14;
    }
    unsigned int v18 = icu::UnicodeString::char32At(v17, (icu::UnicodeString *)(a1 + 16), v12);
    uint64_t v19 = sub_18095CEE8(*(void *)(a1 + 88), v18);
    if (!v19)
    {
      icu::UnicodeString::append((uint64_t)&v45, v18);
      goto LABEL_30;
    }

    uint64_t v20 = v19;
    *(_BYTE *)(a1 + 85) = 1;
    int v21 = (unsigned __int16)v46 >> 5;
    if ((v46 & 0x8000u) != 0LL) {
      int v21 = DWORD1(v46);
    }
    if (v21 >= 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, void (***)(icu::UnicodeString *__hidden)))(*(void *)a2 + 32LL))( a2,  v15,  v15,  &v45);
      if ((__int16)v46 < 0)
      {
        int v22 = DWORD1(v46);
        uint64_t v15 = (DWORD1(v46) + v15);
        if ((v46 & 1) == 0) {
          goto LABEL_26;
        }
      }

      else
      {
        uint64_t v15 = v15 + ((unsigned __int16)v46 >> 5);
        if ((v46 & 1) == 0)
        {
          int v22 = (unsigned __int16)v46 >> 5;
LABEL_26:
          if (v22)
          {
            LOBYTE(v46) = v46 & 0x1F;
            LOWORD(v46) = v46;
          }

          goto LABEL_29;
        }
      }

      icu::UnicodeString::unBogus((uint64_t)&v45);
    }

uint64_t sub_1809917D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  return sub_18099131C(a1 - 8, a2, a3, a4, a5);
}

icu::ICU_Utility *sub_1809917E0( uint64_t a1, icu::ICU_Utility *this, uint64_t a3, uint64_t a4, uint64_t a5, icu::UnicodeString *a6)
{
  uint64_t v40 = *MEMORY[0x1895F89C0];
  unsigned int v9 = *((unsigned __int16 *)this + 4);
  if ((v9 & 1) != 0)
  {
    icu::UnicodeString::unBogus((uint64_t)this);
  }

  else
  {
    if ((v9 & 0x8000u) == 0) {
      unsigned int v10 = v9 >> 5;
    }
    else {
      unsigned int v10 = *((_DWORD *)this + 3);
    }
    if (v10) {
      *((_WORD *)this + 4) &= 0x1Fu;
    }
  }

  __int128 v36 = 0u;
  __int128 v37 = 0u;
  uint64_t v39 = 0LL;
  __int128 v38 = 0u;
  uint64_t v35 = off_18971B688;
  LOWORD(v36) = 2;
  unsigned int v11 = *(_DWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 84) && (v11 & 0x80000000) != 0)
  {
    do
      icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)0x40, 1, a3, (icu::UnicodeString *)&v35, a6);
    while (!__CFADD__(v11++, 1));
    unsigned int v11 = 1;
  }

  unint64_t v13 = 0LL;
  uint64_t v14 = v11;
  while (1)
  {
    int v15 = *(__int16 *)(a1 + 24);
    unsigned int v16 = *(unsigned __int16 *)(a1 + 24);
    int v17 = v15 < 0 ? *(_DWORD *)(a1 + 28) : v16 >> 5;
    if (*(_BYTE *)(a1 + 84) && v14 == v13)
    {
      icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)0x7C, 1, a3, (icu::UnicodeString *)&v35, a6);
      LOWORD(v15) = *(_WORD *)(a1 + 24);
    }

    if ((v15 & 0x8000) != 0) {
      unsigned int v18 = *(_DWORD *)(a1 + 28);
    }
    else {
      unsigned int v18 = (unsigned __int16)v15 >> 5;
    }
    if (v13 >= v18)
    {
      uint64_t v20 = 0xFFFFLL;
    }

    else
    {
      uint64_t v19 = a1 + 26;
      if ((v15 & 2) == 0) {
        uint64_t v19 = *(void *)(a1 + 40);
      }
      uint64_t v20 = *(unsigned __int16 *)(v19 + 2 * v13);
    }

    uint64_t v21 = sub_18095CEE8(*(void *)(a1 + 88), v20);
    if (v21)
    {
      uint64_t v34 = 0LL;
      __int128 v32 = 0u;
      __int128 v33 = 0u;
      __int128 v31 = 0u;
      unsigned int v30 = off_18971B688;
      LOWORD(v3icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 2;
      (*(void (**)(uint64_t, void (***)(icu::UnicodeString *__hidden), uint64_t))(*(void *)v21 + 24LL))( v21,  &v30,  a3);
      __int16 v29 = 32;
      icu::UnicodeString::doReplace((uint64_t)&v30, 0LL, 0LL, (uint64_t)&v29, 0, 1LL);
      __int16 v29 = 32;
      icu::UnicodeString::doAppend((uint64_t)&v30, (uint64_t)&v29, 0, 1LL);
      icu::ICU_Utility::appendToRule( this,  (icu::UnicodeString *)&v30,  (const icu::UnicodeString *)1,  a3,  (icu::UnicodeString *)&v35,  v23);
      icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)&v30);
    }

    else
    {
      icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)v20, 0, a3, (icu::UnicodeString *)&v35, v22);
    }

    ++v13;
  }

  if (*(_BYTE *)(a1 + 84))
  {
    if (v15 < 0)
    {
      int v25 = *(_DWORD *)(a1 + 28);
    }

    else
    {
      int v25 = v16 >> 5;
    }

    if ((int)v14 - v25 >= 1)
    {
      unsigned int v26 = v14 - v25 + 1;
      do
      {
        icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)0x40, 1, a3, (icu::UnicodeString *)&v35, a6);
        --v26;
      }

      while (v26 > 1);
    }

    icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)0x7C, 1, a3, (icu::UnicodeString *)&v35, a6);
  }

icu::ICU_Utility *sub_180991AD0( uint64_t a1, icu::ICU_Utility *a2, uint64_t a3, uint64_t a4, uint64_t a5, icu::UnicodeString *a6)
{
  return sub_1809917E0(a1 - 8, a2, a3, a4, a5, a6);
}

icu::UnicodeSet *sub_180991AD8(icu::UnicodeSet *result, icu::UnicodeSet *a2)
{
  int v3 = result;
  int v4 = 0;
  uint64_t v5 = (icu::UnicodeSet *)((char *)result + 16);
  while (1)
  {
    unsigned int v6 = *((__int16 *)v3 + 12) < 0
    unsigned int v7 = icu::UnicodeString::char32At(v6, v5, v4);
    uint64_t v8 = sub_18095CEE8(*((void *)v3 + 11), v7);
    if (v8) {
      double result = (icu::UnicodeSet *)(*(uint64_t (**)(uint64_t, icu::UnicodeSet *))(*(void *)v8 + 32LL))(v8, a2);
    }
    else {
      double result = icu::UnicodeSet::add(a2, v7);
    }
    if (v7 < 0x10000) {
      int v9 = 1;
    }
    else {
      int v9 = 2;
    }
    v4 += v9;
  }

  return result;
}

icu::UnicodeSet *sub_180991B84(uint64_t a1, icu::UnicodeSet *a2)
{
  return sub_180991AD8((icu::UnicodeSet *)(a1 - 8), a2);
}

void *sub_180991B8C(void *result, uint64_t a2)
{
  unsigned int v2 = result;
  int v3 = 0;
  result[11] = a2;
  int v4 = (icu::UnicodeString *)(result + 2);
  while (1)
  {
    uint64_t v5 = (__int16)v2[3] < 0 ? (uint64_t *)*((unsigned int *)v2 + 7) : (uint64_t *)(*((unsigned __int16 *)v2 + 12) >> 5);
    unsigned int v6 = icu::UnicodeString::char32At(v5, v4, v3);
    double result = (void *)sub_18095CE84(v2[11], v6);
    if (result) {
      double result = (void *)(*(uint64_t (**)(void *, void))(*result + 48LL))(result, v2[11]);
    }
    if (v6 < 0x10000) {
      int v7 = 1;
    }
    else {
      int v7 = 2;
    }
    v3 += v7;
  }

  return result;
}

void *icu::StringSearch::getStaticClassID(icu::StringSearch *this)
{
  return &unk_18C535893;
}

void *icu::StringSearch::getDynamicClassID(icu::StringSearch *this)
{
  return &unk_18C535893;
}

void **icu::StringSearch::StringSearch( void **this, UChar **a2, UChar **a3, char **a4, icu::BreakIterator *a5, UErrorCode *a6)
{
  unsigned int v11 = icu::SearchIterator::SearchIterator((icu::SearchIterator *)this, a3, a5);
  *(void *)unsigned int v11 = off_18972B540;
  icu::UnicodeString::UnicodeString((icu::SearchIterator *)((char *)v11 + 88), a2);
  if (*(int *)a6 >= 1)
  {
    this[19] = 0LL;
    return this;
  }

  unsigned int v12 = *((unsigned __int16 *)this + 48);
  if ((v12 & 0x11) != 0)
  {
    unint64_t v13 = 0LL;
    if ((v12 & 0x8000) != 0) {
      goto LABEL_10;
    }
LABEL_8:
    int32_t v14 = v12 >> 5;
    goto LABEL_11;
  }

  if ((v12 & 2) != 0)
  {
    unint64_t v13 = (const UChar *)this + 49;
    if ((v12 & 0x8000) == 0) {
      goto LABEL_8;
    }
  }

  else
  {
    unint64_t v13 = (const UChar *)this[14];
    if ((v12 & 0x8000) == 0) {
      goto LABEL_8;
    }
  }

void **icu::StringSearch::StringSearch( void **this, UChar **a2, UChar **a3, icu::RuleBasedCollator *a4, icu::BreakIterator *a5, UErrorCode *a6)
{
  unsigned int v11 = icu::SearchIterator::SearchIterator((icu::SearchIterator *)this, a3, a5);
  *(void *)unsigned int v11 = off_18972B540;
  icu::UnicodeString::UnicodeString((icu::SearchIterator *)((char *)v11 + 88), a2);
  if (!a4)
  {
    *a6 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_2:
    this[19] = 0LL;
    return this;
  }

  unsigned int v13 = *((unsigned __int16 *)this + 48);
  if ((v13 & 0x11) != 0)
  {
    int32_t v14 = 0LL;
    if ((v13 & 0x8000) != 0) {
      goto LABEL_13;
    }
LABEL_11:
    int32_t v15 = v13 >> 5;
    goto LABEL_14;
  }

  if ((v13 & 2) != 0)
  {
    int32_t v14 = (const UChar *)this + 49;
    if ((v13 & 0x8000) == 0) {
      goto LABEL_11;
    }
  }

  else
  {
    int32_t v14 = (const UChar *)this[14];
    if ((v13 & 0x8000) == 0) {
      goto LABEL_11;
    }
  }

void **icu::StringSearch::StringSearch( void **this, UChar **a2, icu::CharacterIterator *a3, char **a4, icu::BreakIterator *a5, UErrorCode *a6)
{
  unsigned int v11 = icu::SearchIterator::SearchIterator((icu::SearchIterator *)this, a3, a5);
  *(void *)unsigned int v11 = off_18972B540;
  icu::UnicodeString::UnicodeString((icu::SearchIterator *)((char *)v11 + 88), a2);
  if (*(int *)a6 >= 1)
  {
    this[19] = 0LL;
    return this;
  }

  unsigned int v12 = *((unsigned __int16 *)this + 48);
  if ((v12 & 0x11) != 0)
  {
    unsigned int v13 = 0LL;
    if ((v12 & 0x8000) != 0) {
      goto LABEL_10;
    }
LABEL_8:
    int32_t v14 = v12 >> 5;
    goto LABEL_11;
  }

  if ((v12 & 2) != 0)
  {
    unsigned int v13 = (const UChar *)this + 49;
    if ((v12 & 0x8000) == 0) {
      goto LABEL_8;
    }
  }

  else
  {
    unsigned int v13 = (const UChar *)this[14];
    if ((v12 & 0x8000) == 0) {
      goto LABEL_8;
    }
  }

void **icu::StringSearch::StringSearch( void **this, UChar **a2, icu::CharacterIterator *a3, icu::RuleBasedCollator *a4, icu::BreakIterator *a5, UErrorCode *a6)
{
  unsigned int v11 = icu::SearchIterator::SearchIterator((icu::SearchIterator *)this, a3, a5);
  *(void *)unsigned int v11 = off_18972B540;
  icu::UnicodeString::UnicodeString((icu::SearchIterator *)((char *)v11 + 88), a2);
  if (!a4)
  {
    *a6 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_2:
    this[19] = 0LL;
    return this;
  }

  unsigned int v13 = *((unsigned __int16 *)this + 48);
  if ((v13 & 0x11) != 0)
  {
    int32_t v14 = 0LL;
    if ((v13 & 0x8000) != 0) {
      goto LABEL_13;
    }
LABEL_11:
    int32_t v15 = v13 >> 5;
    goto LABEL_14;
  }

  if ((v13 & 2) != 0)
  {
    int32_t v14 = (const UChar *)this + 49;
    if ((v13 & 0x8000) == 0) {
      goto LABEL_11;
    }
  }

  else
  {
    int32_t v14 = (const UChar *)this[14];
    if ((v13 & 0x8000) == 0) {
      goto LABEL_11;
    }
  }

void **icu::StringSearch::StringSearch(void **this, const icu::StringSearch *a2)
{
  int v4 = icu::SearchIterator::SearchIterator( (icu::SearchIterator *)this,  (UChar **)a2 + 3,  *((icu::BreakIterator **)a2 + 2));
  *(void *)int v4 = off_18972B540;
  icu::UnicodeString::UnicodeString((icu::SearchIterator *)((char *)v4 + 88), (UChar **)a2 + 11);
  int v14 = 0;
  uprv_free(this[1]);
  this[1] = 0LL;
  uint64_t v5 = *((void *)a2 + 19);
  if (!v5)
  {
    this[19] = 0LL;
    return this;
  }

  unsigned int v6 = *((unsigned __int16 *)this + 48);
  if ((v6 & 0x11) != 0)
  {
    int v7 = 0LL;
    if ((v6 & 0x8000) != 0) {
      goto LABEL_10;
    }
LABEL_8:
    int32_t v8 = v6 >> 5;
    goto LABEL_11;
  }

  if ((v6 & 2) != 0)
  {
    int v7 = (const UChar *)this + 49;
    if ((v6 & 0x8000) == 0) {
      goto LABEL_8;
    }
  }

  else
  {
    int v7 = (const UChar *)this[14];
    if ((v6 & 0x8000) == 0) {
      goto LABEL_8;
    }
  }

void icu::StringSearch::~StringSearch(icu::StringSearch *this@<X0>, void *a2@<X8>)
{
  int v3 = (char *)*((void *)this + 19);
  if (v3)
  {
    usearch_close(v3);
    *((void *)this + icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 0LL;
  }

  icu::UnicodeString::~UnicodeString(a2, (icu::StringSearch *)((char *)this + 88));
  icu::SearchIterator::~SearchIterator(this);
}

{
  void *v2;
  icu::StringSearch::~StringSearch(this, a2);
  icu::UMemory::operator delete(v2);
}

void **icu::StringSearch::clone@<X0>( icu::StringSearch *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  double result = (void **)icu::UMemory::operator new(a3, (icu::UMemory *)0xA0, a2);
  if (result) {
    return icu::StringSearch::StringSearch(result, this);
  }
  return result;
}

uint64_t icu::StringSearch::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return a1;
  }
  int v12 = 0;
  icu::UnicodeString::operator=((UChar **)(a1 + 24), (UChar **)(a2 + 24));
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  icu::UnicodeString::operator=((UChar **)(a1 + 88), (UChar **)(a2 + 88));
  usearch_close(*(char **)(a1 + 152));
  unsigned int v4 = *(unsigned __int16 *)(a1 + 96);
  if ((v4 & 0x11) != 0)
  {
    uint64_t v5 = 0LL;
    if ((v4 & 0x8000) != 0) {
      goto LABEL_9;
    }
LABEL_7:
    int32_t v6 = v4 >> 5;
    goto LABEL_10;
  }

  if ((v4 & 2) != 0)
  {
    uint64_t v5 = (const UChar *)(a1 + 98);
    if ((v4 & 0x8000) == 0) {
      goto LABEL_7;
    }
  }

  else
  {
    uint64_t v5 = *(const UChar **)(a1 + 112);
    if ((v4 & 0x8000) == 0) {
      goto LABEL_7;
    }
  }

uint64_t icu::StringSearch::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  BOOL v4 = icu::SearchIterator::operator==((void *)a1, a2);
  uint64_t result = 0LL;
  if (v4 && *(void (***)(icu::StringSearch *__hidden))a2 == off_18972B540)
  {
    unsigned int v6 = *(unsigned __int16 *)(a1 + 96);
    if ((v6 & 1) != 0)
    {
      if ((*(_WORD *)(a2 + 96) & 1) == 0) {
        return 0LL;
      }
      return *(void *)(*(void *)(a1 + 152) + 3128LL) == *(void *)(*(void *)(a2 + 152) + 3128LL);
    }

    if ((v6 & 0x8000) != 0) {
      int v7 = *(_DWORD *)(a1 + 100);
    }
    else {
      int v7 = v6 >> 5;
    }
    uint64_t result = 0LL;
    unsigned int v8 = *(unsigned __int16 *)(a2 + 96);
    if ((v8 & 0x8000u) == 0) {
      unsigned int v9 = v8 >> 5;
    }
    else {
      unsigned int v9 = *(_DWORD *)(a2 + 100);
    }
    if ((v8 & 1) == 0 && v7 == v9)
    {
      uint64_t result = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 88), (const icu::UnicodeString *)(a2 + 88), v7);
      if ((_DWORD)result) {
        return *(void *)(*(void *)(a1 + 152) + 3128LL) == *(void *)(*(void *)(a2 + 152) + 3128LL);
      }
    }
  }

  return result;
}

double icu::StringSearch::setOffset(uint64_t **this, uint64_t a2, UErrorCode *a3)
{
  return usearch_setOffset(this[19], a2, a3);
}

uint64_t icu::StringSearch::getOffset(icu::StringSearch *this)
{
  return usearch_getOffset(*((void **)this + 19));
}

uint64_t icu::StringSearch::setText(uint64_t this, UChar **a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v5 = this;
    icu::UnicodeString::operator=((UChar **)(this + 24), a2);
    unsigned int v6 = *((unsigned __int16 *)a2 + 4);
    if ((v6 & 0x11) != 0)
    {
      int v7 = 0LL;
    }

    else if ((v6 & 2) != 0)
    {
      int v7 = (UChar *)a2 + 5;
    }

    else
    {
      int v7 = a2[3];
    }

    int v8 = (__int16)v6;
    int v9 = v6 >> 5;
    if (v8 >= 0) {
      int v10 = v9;
    }
    else {
      int v10 = *((_DWORD *)a2 + 3);
    }
    return usearch_setText(*(void *)(v5 + 152), v7, v10, a3);
  }

  return this;
}

uint64_t icu::StringSearch::setText(uint64_t this, icu::CharacterIterator *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v4 = this;
    (*(void (**)(icu::CharacterIterator *, uint64_t))(*(void *)a2 + 208LL))(a2, this + 24);
    unsigned int v5 = *(unsigned __int16 *)(v4 + 32);
    if ((v5 & 0x11) != 0)
    {
      unsigned int v6 = 0LL;
      if ((v5 & 0x8000) != 0) {
        goto LABEL_9;
      }
LABEL_7:
      int v7 = v5 >> 5;
      return usearch_setText(*(void *)(v4 + 152), v6, v7, a3);
    }

    if ((v5 & 2) != 0)
    {
      unsigned int v6 = (UChar *)(v4 + 34);
      if ((v5 & 0x8000) == 0) {
        goto LABEL_7;
      }
    }

    else
    {
      unsigned int v6 = *(UChar **)(v4 + 48);
      if ((v5 & 0x8000) == 0) {
        goto LABEL_7;
      }
    }

void (***icu::StringSearch::getCollator( icu::StringSearch *this))(icu::RuleBasedCollator *__hidden this)
{
  uint64_t result = *(void (****)(icu::RuleBasedCollator *__hidden))(*((void *)this + 19) + 3128LL);
  if (!result || *result != off_18972A990) {
    return 0LL;
  }
  return result;
}

uint64_t icu::StringSearch::setCollator(uint64_t this, icu::RuleBasedCollator *a2, UErrorCode *a3)
{
  return this;
}

uint64_t icu::StringSearch::setPattern(uint64_t this, UChar **a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v4 = this;
    icu::UnicodeString::operator=((UChar **)(this + 88), a2);
    unsigned int v5 = *(unsigned __int16 *)(v4 + 96);
    if ((v5 & 0x11) != 0)
    {
      unsigned int v6 = 0LL;
      if ((v5 & 0x8000) != 0) {
        goto LABEL_9;
      }
LABEL_7:
      int v7 = v5 >> 5;
      return usearch_setPattern(*(void *)(v4 + 152), v6, v7, a3);
    }

    if ((v5 & 2) != 0)
    {
      unsigned int v6 = (UChar *)(v4 + 98);
      if ((v5 & 0x8000) == 0) {
        goto LABEL_7;
      }
    }

    else
    {
      unsigned int v6 = *(UChar **)(v4 + 112);
      if ((v5 & 0x8000) == 0) {
        goto LABEL_7;
      }
    }

uint64_t icu::StringSearch::getPattern(icu::StringSearch *this)
{
  return (uint64_t)this + 88;
}

double icu::StringSearch::reset(icu::StringSearch *this)
{
  return usearch_reset(*((void *)this + 19));
}

void **icu::StringSearch::safeClone@<X0>( icu::StringSearch *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  UErrorCode v8 = U_ZERO_ERROR;
  uint64_t result = (void **)icu::UMemory::operator new(a3, (icu::UMemory *)0xA0, a2);
  if (result)
  {
    uint64_t v5 = (uint64_t)result;
    unsigned int v6 = *(icu::RuleBasedCollator **)(*((void *)this + 19) + 3128LL);
    icu::StringSearch::StringSearch( result,  (UChar **)this + 11,  (UChar **)this + 3,  v6,  *((icu::BreakIterator **)this + 2),  &v8);
    uint64_t Offset = usearch_getOffset(*((void **)this + 19));
    usearch_setOffset(*(uint64_t **)(v5 + 152), Offset, &v8);
    icu::SearchIterator::setMatchStart(v5, *(_DWORD *)(**((void **)this + 19) + 32LL));
    icu::SearchIterator::setMatchLength(v5, *(_DWORD *)(**((void **)this + 19) + 36LL));
    if (v8 >= U_ILLEGAL_ARGUMENT_ERROR) {
      return 0LL;
    }
    else {
      return (void **)v5;
    }
  }

  return result;
}

uint64_t icu::StringSearch::handleNext(icu::StringSearch *this, uint64_t a2, UErrorCode *a3)
{
  uint64_t v6 = *((void *)this + 19);
  uint64_t v7 = *((void *)this + 1);
  if (*(_DWORD *)(v6 + 20))
  {
    ucol_setOffset(*(void *)(v6 + 3144), a2, a3);
    sub_1809CA0FC(*((uint64_t **)this + 19), a3);
    uint64_t v10 = *((void *)this + 1);
    uint64_t v11 = *(unsigned int *)(v10 + 32);
    if ((_DWORD)v11 == -1) {
      uint64_t v11 = *(unsigned int *)(v10 + 8);
    }
    ucol_setOffset(*(void *)(*((void *)this + 19) + 3144LL), v11, a3);
    return *(unsigned int *)(*((void *)this + 1) + 32LL);
  }

  else
  {
    int v8 = *(_DWORD *)(v7 + 32);
    if (v8 == -1)
    {
      uint64_t Offset = usearch_getOffset((void *)v6);
      uint64_t v7 = *((void *)this + 1);
      uint64_t v6 = *((void *)this + 19);
    }

    else
    {
      uint64_t Offset = (v8 + 1);
    }

    *(_DWORD *)(v7 + 32) = Offset;
    *(_DWORD *)(v7 + 36) = 0;
    ucol_setOffset(*(void *)(v6 + 3144), Offset, a3);
    uint64_t v12 = *((void *)this + 1);
    uint64_t result = 0xFFFFFFFFLL;
    if (*(_DWORD *)(v12 + 32) == *(_DWORD *)(v12 + 8)) {
      *(_DWORD *)(v12 + 32) = -1;
    }
  }

  return result;
}

uint64_t icu::StringSearch::handlePrev(icu::StringSearch *this, uint64_t a2, UErrorCode *a3)
{
  uint64_t v6 = *((void *)this + 19);
  if (*(_DWORD *)(v6 + 20))
  {
    ucol_setOffset(*(void *)(v6 + 3144), a2, a3);
    sub_1809CA1C4(*((void *)this + 19), a3);
    goto LABEL_12;
  }

  uint64_t v7 = *((void *)this + 1);
  int Offset = *(_DWORD *)(v7 + 32);
  if (Offset == -1)
  {
    int Offset = usearch_getOffset((void *)v6);
    uint64_t v7 = *((void *)this + 1);
  }

  *(_DWORD *)(v7 + 32) = Offset;
  if (!Offset)
  {
    icu::SearchIterator::setMatchNotFound(this);
LABEL_12:
    uint64_t v10 = *((void *)this + 1);
    return *(unsigned int *)(v10 + 32);
  }

  uint64_t v9 = (Offset - 1);
  *(_DWORD *)(v7 + 32) = v9;
  ucol_setOffset(*(void *)(*((void *)this + 19) + 3144LL), v9, a3);
  uint64_t v10 = *((void *)this + 1);
  *(_DWORD *)(v10 + 36) = 0;
  return *(unsigned int *)(v10 + 32);
}

void *icu::TaiwanCalendar::getStaticClassID(icu::TaiwanCalendar *this)
{
  return &unk_18C535894;
}

void *sub_180992904()
{
  return &unk_18C535894;
}

icu::GregorianCalendar *sub_180992910(icu::GregorianCalendar *a1, char **a2, UErrorCode *a3)
{
  uint64_t v5 = icu::GregorianCalendar::GregorianCalendar(a1, a2, a3);
  *(void *)uint64_t v5 = &off_18972B5D8;
  icu::Calendar::getNow(v5);
  icu::Calendar::setTimeInMillis((uint64_t)a1, v6, a3);
  return a1;
}

void sub_18099295C(icu::GregorianCalendar *a1)
{
}

void sub_180992970(const icu::GregorianCalendar *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = (icu::GregorianCalendar *)icu::UMemory::operator new(a3, (icu::UMemory *)0x290, a2);
  if (v4)
  {
    icu::GregorianCalendar::GregorianCalendar(v4, a1);
    *uint64_t v5 = &off_18972B5D8;
  }

const char *sub_1809929AC()
{
  return "roc";
}

uint64_t sub_1809929B8(_DWORD *a1)
{
  if (icu::Calendar::newerField((uint64_t)a1, 0x13u, 1u) == 19
    && icu::Calendar::newerField((uint64_t)a1, 0x13u, 0) == 19)
  {
    return 1970LL;
  }

  int v3 = a1[3];
  if (v3)
  {
    if (v3 != 1) {
      return 1970LL;
    }
LABEL_8:
    else {
      return (a1[4] + 1911);
    }
  }

  else {
    return (1912 - a1[4]);
  }
}

double sub_180992A78(uint64_t a1, int a2, UErrorCode *a3)
{
  int v4 = *(_DWORD *)(a1 + 88);
  int v5 = 1912 - v4;
  BOOL v6 = __OFSUB__(v4, 1911);
  int v7 = v4 - 1911;
  if ((v7 < 0) ^ v6 | (v7 == 0)) {
    int v8 = 0;
  }
  else {
    int v8 = 1;
  }
  if ((v7 < 0) ^ v6 | (v7 == 0)) {
    int v7 = v5;
  }
  *(_WORD *)(a1 + 108) = 257;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v7;
  *(void *)&double result = 0x100000001LL;
  *(void *)(a1 + 132) = 0x100000001LL;
  return result;
}

uint64_t sub_180992AC4(uint64_t a1, int a2, unsigned int a3)
{
  if (a2) {
    return icu::GregorianCalendar::handleGetLimit(a1, a2, a3);
  }
  else {
    return a3 > 1;
  }
}

uint64_t sub_180992AD8()
{
  return 1LL;
}

double sub_180992AE0()
{
  unsigned int v0 = atomic_load((unsigned int *)&unk_18C449888);
  if (v0 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_18C449888))
  {
    sub_180992B2C();
    icu::umtx_initImplPostInit((unsigned int *)&unk_18C449888);
  }

  return *(double *)&qword_18C448428;
}

void sub_180992B2C()
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  UErrorCode v3 = U_ZERO_ERROR;
  bzero(v5, 0x290uLL);
  icu::Locale::Locale(v0, (icu::Locale *)v4, "@calendar=roc", 0LL, 0LL, 0LL);
  sub_180992910((icu::GregorianCalendar *)v5, v4, &v3);
  icu::Locale::~Locale((icu::Locale *)v4);
  if (v3 <= U_ZERO_ERROR)
  {
    icu::Calendar::getNow(v1);
    icu::Calendar::setTimeInMillis((uint64_t)v5, v2, &v3);
    icu::Calendar::add(v5, 1u, -80, &v3);
    qword_18C448428 = icu::Calendar::getTimeInMillis((icu::Calendar *)v5, &v3);
    dword_18C448430 = icu::Calendar::get(v5, 1u, &v3);
  }

  icu::GregorianCalendar::~GregorianCalendar((icu::GregorianCalendar *)v5);
}

uint64_t sub_180992C20()
{
  unsigned int v0 = atomic_load((unsigned int *)&unk_18C449888);
  if (v0 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_18C449888))
  {
    sub_180992B2C();
    icu::umtx_initImplPostInit((unsigned int *)&unk_18C449888);
  }

  return dword_18C448430;
}

uint64_t icu::TimeZone::loadRule(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  memset(v9, 0, sizeof(v9));
  icu::UnicodeString::extract(a2, 0, 63LL, (char *)v9, 63);
  uint64_t v7 = ures_getByKey(a1, "Rules", a3, a4);
  return ures_getByKey(v7, (const char *)v9, v7, a4);
}

uint64_t *icu::TimeZone::getUnknown(icu::TimeZone *this)
{
  unsigned int v1 = atomic_load((unsigned int *)&unk_18C5359F4);
  if (v1 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_18C5359F4))
  {
    sub_180992D68();
    icu::umtx_initImplPostInit((unsigned int *)&unk_18C5359F4);
  }

  return qword_18C535898;
}

void *sub_180992D68()
{
  v5[8] = *(UChar **)MEMORY[0x1895F89C0];
  sub_1809B36C0(0x13u, (uint64_t)sub_180993538);
  int v4 = L"GMT";
  icu::UnicodeString::UnicodeString(v5, 1LL, &v4);
  icu::SimpleTimeZone::SimpleTimeZone((icu::SimpleTimeZone *)qword_18C535938, 0, v5);
  icu::UnicodeString::~UnicodeString(v0, (icu::UnicodeString *)v5);
  UErrorCode v3 = L"Etc/Unknown";
  icu::UnicodeString::UnicodeString(v5, 1LL, &v3);
  icu::SimpleTimeZone::SimpleTimeZone((icu::SimpleTimeZone *)qword_18C535898, 0, v5);
  double result = icu::UnicodeString::~UnicodeString(v1, (icu::UnicodeString *)v5);
  byte_18C5359FC = 1;
  return result;
}

uint64_t *icu::TimeZone::getGMT(icu::TimeZone *this)
{
  unsigned int v1 = atomic_load((unsigned int *)&unk_18C5359F4);
  if (v1 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_18C5359F4))
  {
    sub_180992D68();
    icu::umtx_initImplPostInit((unsigned int *)&unk_18C5359F4);
  }

  return qword_18C535938;
}

void *icu::TimeZone::getStaticClassID(icu::TimeZone *this)
{
  return &unk_18C5359D8;
}

uint64_t icu::TimeZone::TimeZone(uint64_t this)
{
  *(void *)this = off_18972B7D8;
  *(void *)(this + 8) = off_18971B688;
  *(_WORD *)(this + 16) = 2;
  return this;
}

icu::TimeZone *icu::TimeZone::TimeZone(icu::TimeZone *this, UChar **a2)
{
  *(void *)this = off_18972B7D8;
  icu::UnicodeString::UnicodeString((icu::TimeZone *)((char *)this + 8), a2);
  return this;
}

{
  *(void *)this = off_18972B7D8;
  icu::UnicodeString::UnicodeString((icu::TimeZone *)((char *)this + 8), a2 + 1);
  return this;
}

void icu::TimeZone::~TimeZone(icu::TimeZone *this)
{
  *(void *)this = off_18972B7D8;
  icu::UnicodeString::~UnicodeString((icu::TimeZone *)((char *)this + 8));
  icu::UObject::~UObject(this);
}

uint64_t icu::TimeZone::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2) {
    icu::UnicodeString::operator=((UChar **)(a1 + 8), (UChar **)(a2 + 8));
  }
  return a1;
}

BOOL icu::TimeZone::operator==(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  BOOL result = sub_1807F874C(*(void *)(*(void *)a1 - 8LL), *(void *)(*(void *)a2 - 8LL));
  if (result)
  {
    unsigned int v5 = *(unsigned __int16 *)(a1 + 16);
    if ((v5 & 1) != 0)
    {
      return *(_WORD *)(a2 + 16) & 1;
    }

    else
    {
      if ((v5 & 0x8000) != 0) {
        int v6 = *(_DWORD *)(a1 + 20);
      }
      else {
        int v6 = v5 >> 5;
      }
      BOOL result = 0LL;
      unsigned int v7 = *(unsigned __int16 *)(a2 + 16);
      if ((v7 & 0x8000u) == 0) {
        unsigned int v8 = v7 >> 5;
      }
      else {
        unsigned int v8 = *(_DWORD *)(a2 + 20);
      }
      if ((v7 & 1) == 0 && v6 == v8) {
        return icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 8), (const icu::UnicodeString *)(a2 + 8), v6);
      }
    }
  }

  return result;
}

void *icu::TimeZone::createTimeZone(UChar **this, const icu::UnicodeString *a2)
{
  int v9 = 0;
  BOOL result = sub_180995BE8((uint64_t)this, &v9);
  if (!result)
  {
    BOOL result = icu::TimeZone::createCustomTimeZone(this, v4, v5, v6, v7, v8);
    if (!result)
    {
      icu::TimeZone::getUnknown(0LL);
      return (void *)(*(uint64_t (**)(void))(qword_18C535898[0] + 96))();
    }
  }

  return result;
}

icu::SimpleTimeZone *icu::TimeZone::createCustomTimeZone( UChar **this, const icu::UnicodeString *a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  *(void *)int32_t v17 = 0LL;
  *(void *)int32_t v18 = 0LL;
  if (!icu::TimeZone::parseCustomID(this, (const icu::UnicodeString *)&v18[1], v18, &v17[1], v17, a6)) {
    return 0LL;
  }
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  uint64_t v23 = 0LL;
  __int128 v22 = 0u;
  uint64_t v19 = (UChar *)off_18971B688;
  LOWORD(v2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
  int v8 = v17[1];
  int v7 = v18[0];
  int v9 = v17[0];
  int v10 = v18[1];
  icu::TimeZone::formatCustomID( (icu::TimeZone *)v18[0],  v17[1],  v17[0],  v18[1] >> 31,  (icu::UnicodeString *)&v19,  v6);
  unsigned int v13 = (icu::SimpleTimeZone *)icu::UMemory::operator new(v12, (icu::UMemory *)0xA0, v11);
  int32_t v15 = v13;
  if (v13) {
    icu::SimpleTimeZone::SimpleTimeZone(v13, 1000 * v10 * (v9 + 60 * (v8 + 60 * v7)), &v19);
  }
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v19);
  return v15;
}

uint64_t icu::TimeZone::detectHostTimeZone(icu::TimeZone *this)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  uprv_tzset();
  uprv_tzname_clear_cache();
  unsigned int v1 = uprv_tzname(0);
  int v2 = uprv_timezone();
  memset(v17, 0, sizeof(v17));
  icu::UnicodeString::UnicodeString(v17, v1, 0xFFFFFFFFLL, 0LL);
  if ((SWORD4(v17[0]) & 0x8000u) == 0) {
    int v3 = WORD4(v17[0]) >> 5;
  }
  else {
    int v3 = HIDWORD(v17[0]);
  }
  if (!v3)
  {
    int32_t v15 = L"Etc/Unknown";
    icu::UnicodeString::UnicodeString(v16, 1LL, &v15);
    icu::UnicodeString::operator=((icu::UnicodeString *)v17, (icu::UnicodeString *)v16);
    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v16);
  }

  int v5 = -1000 * v2;
  v16[0] = 0;
  uint64_t v6 = sub_180995BE8((uint64_t)v17, v16);
  if (!v6) {
    goto LABEL_19;
  }
  uint64_t v9 = (uint64_t)v6;
  if ((SWORD4(v17[0]) & 0x8000u) == 0) {
    int v10 = WORD4(v17[0]) >> 5;
  }
  else {
    int v10 = HIDWORD(v17[0]);
  }
  if (v5 != (*(unsigned int (**)(uint64_t *))(*v6 + 64))(v6) && v10 >= 3 && v10 <= 4)
  {
    uint64_t v6 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
LABEL_19:
    if (v3 && (uint64_t v6 = icu::UMemory::operator new(v8, (icu::UMemory *)0xA0, v7)) != 0LL)
    {
      uint64_t v9 = (uint64_t)v6;
      icu::SimpleTimeZone::SimpleTimeZone((icu::SimpleTimeZone *)v6, v5, (UChar **)v17);
    }

    else
    {
      icu::TimeZone::getUnknown((icu::TimeZone *)v6);
      uint64_t v9 = (*(uint64_t (**)(uint64_t *))(qword_18C535898[0] + 96))(qword_18C535898);
    }
  }

  icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v17);
  return v9;
}

uint64_t icu::TimeZone::createDefault(icu::TimeZone *this)
{
  unsigned int v1 = atomic_load((unsigned int *)&unk_18C449898);
  if (v1 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_18C449898))
  {
    sub_1809B36C0(0x13u, (uint64_t)sub_180993538);
    umtx_lock((icu::UMutex *)&unk_18C4498A0);
    if (!qword_18C449890) {
      qword_18C449890 = icu::TimeZone::detectHostTimeZone(v2);
    }
    umtx_unlock((std::mutex **)&unk_18C4498A0);
    icu::umtx_initImplPostInit((unsigned int *)&unk_18C449898);
  }

  umtx_lock((icu::UMutex *)&unk_18C4498A0);
  if (qword_18C449890) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)qword_18C449890 + 96LL))(qword_18C449890);
  }
  else {
    uint64_t v3 = 0LL;
  }
  umtx_unlock((std::mutex **)&unk_18C4498A0);
  return v3;
}

void *icu::TimeZone::forLocaleOrDefault(char **this, const icu::Locale *a2)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  *(_OWORD *)unint64_t v11 = 0u;
  __int128 v12 = 0u;
  UErrorCode v9 = U_ZERO_ERROR;
  int KeywordValue = (icu::TimeZone *)icu::Locale::getKeywordValue(this, "timezone", v11, 96, &v9);
  if (v9 != U_STRING_NOT_TERMINATED_WARNING && v9 <= U_ZERO_ERROR) {
    uint64_t v4 = KeywordValue;
  }
  else {
    uint64_t v4 = 0LL;
  }
  icu::UnicodeString::UnicodeString(v10, v11, v4, 0LL);
  uint64_t TimeZone = icu::TimeZone::createTimeZone(v10, v5);
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v10);
  return TimeZone;
}

void icu::TimeZone::adoptDefault(icu::TimeZone *this, icu::TimeZone *a2)
{
  if (this)
  {
    umtx_lock((icu::UMutex *)&unk_18C4498A0);
    uint64_t v3 = qword_18C449890;
    qword_18C449890 = (uint64_t)this;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
    umtx_unlock((std::mutex **)&unk_18C4498A0);
    sub_1809B36C0(0x13u, (uint64_t)sub_180993538);
  }

uint64_t sub_180993538()
{
  if (qword_18C449890) {
    (*(void (**)(uint64_t))(*(void *)qword_18C449890 + 8LL))(qword_18C449890);
  }
  qword_18C449890 = 0LL;
  atomic_store(0, (unsigned int *)&unk_18C449898);
  if (byte_18C5359FC == 1)
  {
    (*(void (**)(void))qword_18C535938)();
    (*(void (**)(void))qword_18C535898)();
    byte_18C5359FC = 0;
    atomic_store(0, (unsigned int *)&unk_18C5359F4);
  }

  qword_18C5359E1 = 0LL;
  unk_18C5359E9 = 0LL;
  atomic_store(0, &dword_18C535A48);
  dword_18C535A00 = 0;
  uprv_free((void *)qword_18C535A08);
  qword_18C535A08 = 0LL;
  atomic_store(0, (unsigned int *)&unk_18C535A30);
  dword_18C535A10 = 0;
  uprv_free((void *)qword_18C535A18);
  qword_18C535A18 = 0LL;
  atomic_store(0, (unsigned int *)&unk_18C535A38);
  dword_18C535A20 = 0;
  uprv_free((void *)qword_18C535A28);
  qword_18C535A28 = 0LL;
  atomic_store(0, (unsigned int *)&unk_18C535A40);
  return 1LL;
}

void icu::TimeZone::setDefault(icu::TimeZone *this, const icu::TimeZone *a2)
{
  int v2 = (icu::TimeZone *)(*(uint64_t (**)(icu::TimeZone *, const icu::TimeZone *))(*(void *)this + 96LL))( this,  a2);
  icu::TimeZone::adoptDefault(v2, v3);
}

uint64_t icu::TimeZone::getOffset(uint64_t this, double a2, int a3, int *a4, int *a5, UErrorCode *a6)
{
  if (*(int *)a6 <= 0)
  {
    uint64_t v10 = this;
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)this + 64LL))(this);
    char v12 = 0;
    *a4 = v11;
    double v13 = (double)v11;
    if (a3) {
      double v13 = -0.0;
    }
    double v14 = v13 + a2;
    while (1)
    {
      int v20 = 0;
      uint64_t v18 = 0LL;
      uint64_t v19 = 0LL;
      int v15 = sub_1808FA26C(86400000, &v18, v14);
      int v21 = 0;
      sub_1808FA420(&v20, (_DWORD *)&v19 + 1, &v19, (int *)&v18 + 1, &v21, (double)v15);
      this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 40LL))(v10, 1LL);
      int v16 = *a4;
      int v17 = this - *a4;
      *a5 = v17;
      if ((a3 == 0) | v12 & 1 || (_DWORD)this == v16) {
        break;
      }
      double v14 = v14 - (double)v17;
      char v12 = 1;
    }
  }

  return this;
}

void sub_1809937FC(icu::StringEnumeration *this)
{
  *(void *)this = &off_18972B858;
  int v2 = (void *)*((void *)this + 16);
  if (v2) {
    uprv_free(v2);
  }
  icu::StringEnumeration::~StringEnumeration(this);
}

void sub_180993838(icu::StringEnumeration *a1)
{
}

void *sub_18099384C()
{
  return &unk_18C5359E0;
}

uint64_t sub_18099385C(int a1, unsigned __int8 *a2, unint64_t a3, int *a4)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  if (*a4 > 0) {
    return 0LL;
  }
  int v37 = 0;
  uint64_t v7 = sub_180995D08(a1, &v37, a4);
  if (*a4 > 0) {
    return 0LL;
  }
  uint64_t v10 = v7;
  unint64_t v11 = (unint64_t)a2 | a3;
  uint64_t result = (uint64_t)uprv_malloc(0x20uLL);
  if (!result)
  {
LABEL_41:
    *a4 = 7;
    return result;
  }

  char v12 = (void *)result;
  uint64_t v13 = ures_openDirect(0LL, (uint64_t)"zoneinfo64", (uint64_t)a4);
  uint64_t v14 = ures_getByKey(v13, "Names", v13, a4);
  uint64_t v15 = v14;
  if (v37 < 1)
  {
    LODWORD(v17) = 0;
  }

  else
  {
    uint64_t v16 = 0LL;
    uint64_t v17 = 0LL;
    int v35 = 8;
    uint64_t v34 = v14;
    while (1)
    {
      signed int v18 = *(_DWORD *)(v10 + 4 * v16);
      uint64_t v44 = 0LL;
      __int128 v42 = 0u;
      __int128 v43 = 0u;
      __int128 v41 = 0u;
      uint64_t v40 = off_18971B688;
      LOWORD(v4icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 2;
      int v39 = 0;
      unsigned int v36 = v18;
      StringByIndex = ures_getStringByIndex(v15, v18, &v39, a4);
      if (*a4 <= 0)
      {
        __int128 v38 = StringByIndex;
        icu::UnicodeString::setTo((icu::UnicodeString *)&v40, 1, &v38, v39);
      }

      else
      {
        icu::UnicodeString::setToBogus((icu::UnicodeString *)&v40);
      }

      uint64_t v21 = *a4;
      if (a2)
      {
        LODWORD(v38) = 0;
        icu::TimeZone::getRegion((icu::TimeZone *)&v40, (const icu::UnicodeString *)&v38, (char *)4, a4, v20);
        uint64_t v21 = *a4;
      }

      if (!a3) {
        goto LABEL_20;
      }
      uint64_t v23 = sub_180995BE8((uint64_t)&v40, a4);
      uint64_t v21 = *a4;
      uint64_t v24 = v23;
      uint64_t v25 = v17;
      uint64_t v26 = v10;
      uint64_t v27 = v12;
      int v28 = (*(uint64_t (**)(uint64_t *))(*v23 + 64))(v23);
      (*(void (**)(uint64_t *))(*v24 + 8))(v24);
      __int128 v22 = (void *)*(unsigned int *)a3;
      BOOL v29 = v28 == (_DWORD)v22;
      char v12 = v27;
      uint64_t v10 = v26;
      uint64_t v17 = v25;
      uint64_t v15 = v34;
      if (!v29)
      {
LABEL_24:
        icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v40);
      }

      else
      {
LABEL_20:
        if (v35 <= (int)v17)
        {
          v35 += 8;
          unsigned int v30 = uprv_realloc(v12, 4LL * v35);
          if (!v30)
          {
            uint64_t v21 = 7LL;
            *a4 = 7;
            break;
          }

          char v12 = v30;
        }

        *((_DWORD *)v12 + (int)v17) = v36;
        icu::UnicodeString::~UnicodeString((void *)v36, (icu::UnicodeString *)&v40);
        uint64_t v17 = (v17 + 1);
      }

      if (++v16 >= v37) {
        goto LABEL_30;
      }
    }

    icu::UnicodeString::~UnicodeString((void *)v21, (icu::UnicodeString *)&v40);
  }

uint64_t icu::TimeZone::createEnumeration(icu::TimeZone *this, UErrorCode *a2)
{
  return sub_18099385C(0, 0LL, 0LL, (int *)this);
}

uint64_t icu::TimeZone::createEnumerationForRawOffset(icu::TimeZone *this, int *a2, UErrorCode *a3)
{
  int v4 = (int)this;
  return sub_18099385C(0, 0LL, (unint64_t)&v4, a2);
}

uint64_t icu::TimeZone::createEnumerationForRegion(icu::TimeZone *this, char *a2, UErrorCode *a3)
{
  return sub_18099385C(0, (unsigned __int8 *)this, 0LL, (int *)a2);
}

uint64_t icu::TimeZone::createEnumeration(icu::TimeZone *this)
{
  int v2 = 0;
  return sub_18099385C(0, 0LL, 0LL, &v2);
}

{
  int v2;
  int v3;
  int v2 = 0;
  uint64_t v3 = (int)this;
  return sub_18099385C(0, 0LL, (unint64_t)&v3, &v2);
}

uint64_t icu::TimeZone::createEnumeration(icu::TimeZone *this, const char *a2)
{
  int v3 = 0;
  return sub_18099385C(0, (unsigned __int8 *)this, 0LL, &v3);
}

uint64_t icu::TimeZone::countEquivalentIDs(icu::TimeZone *this, const icu::UnicodeString *a2)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  uint64_t v6 = 0LL;
  uint64_t v10 = 0LL;
  memset(v9, 0, sizeof(v9));
  icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v9);
  uint64_t v3 = sub_180993DB4((uint64_t)this, (uint64_t)v9, (int *)&v6);
  if ((int)v6 <= 0)
  {
    uint64_t v8 = 0LL;
    memset(v7, 0, sizeof(v7));
    icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v7);
    ures_getByKey((uint64_t)v9, "links", (uint64_t)v7, (int *)&v6);
    ures_getIntVector((uint64_t)v7, (int *)&v6 + 1, (int *)&v6);
    icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v7);
  }

  ures_close(v3);
  uint64_t v4 = HIDWORD(v6);
  icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v9);
  return v4;
}

uint64_t sub_180993DB4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = ures_openDirect(0LL, (uint64_t)"zoneinfo64", (uint64_t)a3);
  uint64_t v7 = ures_getByKey(v6, "Names", 0LL, a3);
  signed int v8 = sub_18099415C(v7, a1, a3);
  if (v8 == -1 && *a3 <= 0)
  {
    *a3 = 2;
  }

  else
  {
    signed int v10 = v8;
    uint64_t v7 = ures_getByKey(v6, "Zones", v7, a3);
    ures_getByIndex(v7, v10, a2, a3);
  }

  ures_close(v7);
  if (ures_getType(a2) == 7)
  {
    signed int Int = ures_getInt(a2, a3);
    uint64_t v12 = ures_getByKey(v6, "Zones", 0LL, a3);
    ures_getByIndex(v12, Int, a2, a3);
    ures_close(v12);
  }

  return v6;
}

void icu::TimeZone::getEquivalentID( icu::TimeZone *this@<X0>, const icu::UnicodeString *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = (int)a2;
  uint64_t v19 = *MEMORY[0x1895F89C0];
  *(_OWORD *)(a3 + 8) = 0u;
  *(void *)(a3 + 56) = 0LL;
  *(_OWORD *)(a3 + 4icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(void *)a3 = off_18971B688;
  *(_WORD *)(a3 + 8) = 2;
  int v14 = 0;
  uint64_t v18 = 0LL;
  memset(v17, 0, sizeof(v17));
  icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v17);
  uint64_t v6 = sub_180993DB4((uint64_t)this, (uint64_t)v17, &v14);
  if (v14 <= 0)
  {
    uint64_t v16 = 0LL;
    memset(v15, 0, sizeof(v15));
    icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v15);
    int v13 = 0;
    ures_getByKey((uint64_t)v17, "links", (uint64_t)v15, &v14);
    IntVector = ures_getIntVector((uint64_t)v15, &v13, &v14);
    if (v3 < 0 || v14 > 0 || v13 <= v3)
    {
      icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v15);
    }

    else
    {
      signed int v8 = IntVector[v3];
      icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v15);
      if ((v8 & 0x80000000) == 0)
      {
        uint64_t v9 = ures_getByKey(v6, "Names", 0LL, &v14);
        uint64_t v10 = v9;
        if (v14 <= 0)
        {
          int v13 = 0;
          StringByIndex = ures_getStringByIndex(v9, v8, &v13, &v14);
          icu::UnicodeString::UnicodeString(v15, 1LL, &StringByIndex);
          icu::UnicodeString::fastCopyFrom((UChar **)a3, (UChar **)v15);
          icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v15);
        }

        ures_close(v10);
      }
    }
  }

  ures_close(v6);
  icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v17);
}

const UChar *icu::TimeZone::findID(icu::TimeZone *this, const icu::UnicodeString *a2)
{
  int v9 = 0;
  uint64_t v3 = ures_openDirect(0LL, (uint64_t)"zoneinfo64", (uint64_t)&v9);
  uint64_t v4 = ures_getByKey(v3, "Names", 0LL, &v9);
  signed int v5 = sub_18099415C(v4, (uint64_t)this, &v9);
  StringByIndex = ures_getStringByIndex(v4, v5, 0LL, &v9);
  if (v9 >= 1) {
    uint64_t v7 = 0LL;
  }
  else {
    uint64_t v7 = StringByIndex;
  }
  ures_close(v4);
  ures_close(v3);
  return v7;
}

uint64_t sub_18099415C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  __int128 v24 = 0u;
  uint64_t v27 = 0LL;
  __int128 v26 = 0u;
  __int128 v25 = 0u;
  uint64_t v23 = off_18971B688;
  LOWORD(v24) = 2;
  int v22 = 0;
  int Size = ures_getSize(a1);
  unint64_t v7 = *a3;
  if ((int)v7 <= 0 && Size >= 1)
  {
    int v10 = Size;
    int v11 = 0;
    LODWORD(v12) = 0x7FFFFFFF;
    while (1)
    {
      LODWORD(v7) = v10 + v11;
      unint64_t v7 = v10 + v11 < 0 != __OFADD__(v10, v11) ? (v7 + 1) : v7;
      uint64_t v12 = ((int)v7 >> 1);
      StringByIndex = ures_getStringByIndex(a1, (int)v7 >> 1, &v22, a3);
      unint64_t v7 = *a3;
      uint64_t v21 = StringByIndex;
      icu::UnicodeString::setTo((icu::UnicodeString *)&v23, 1, &v21, v22);
      unsigned int v14 = *(unsigned __int16 *)(a2 + 8);
      unint64_t v7 = (unsigned __int16)v24;
      if ((v24 & 1) != 0)
      {
        int v20 = (v14 & 1) == 0;
      }

      else
      {
        int v15 = (__int16)v14;
        int32_t v16 = v14 >> 5;
        if (v15 >= 0) {
          int32_t v17 = v16;
        }
        else {
          int32_t v17 = *(_DWORD *)(a2 + 12);
        }
        if ((v24 & 0x8000u) == 0LL) {
          int v18 = (unsigned __int16)v24 >> 5;
        }
        else {
          int v18 = DWORD1(v24);
        }
        if ((v24 & 2) != 0) {
          uint64_t v19 = (char *)&v24 + 2;
        }
        else {
          uint64_t v19 = (char *)v25;
        }
        int v20 = icu::UnicodeString::doCompare( a2,  0,  v17,  (uint64_t)v19,  v18 & (v18 >> 31),  v18 & ~(v18 >> 31));
      }

      if (v20 < 0) {
        int v10 = v12;
      }
      else {
        int v11 = v12;
      }
      if (!v20) {
        goto LABEL_7;
      }
    }
  }

  uint64_t v12 = 0xFFFFFFFFLL;
LABEL_7:
  icu::UnicodeString::~UnicodeString((void *)v7, (icu::UnicodeString *)&v23);
  return v12;
}

const UChar *icu::TimeZone::dereferOlsonLink(icu::TimeZone *this, const icu::UnicodeString *a2)
{
  int v10 = 0;
  uint64_t v3 = ures_openDirect(0LL, (uint64_t)"zoneinfo64", (uint64_t)&v10);
  uint64_t v4 = ures_getByKey(v3, "Names", 0LL, &v10);
  signed int v5 = sub_18099415C(v4, (uint64_t)this, &v10);
  StringByIndex = ures_getStringByIndex(v4, v5, 0LL, &v10);
  ures_getByKey(v3, "Zones", v3, &v10);
  ures_getByIndex(v3, v5, v3, &v10);
  if (v10 <= 0 && ures_getType(v3) == 7)
  {
    signed int Int = ures_getInt(v3, &v10);
    signed int v8 = ures_getStringByIndex(v4, Int, 0LL, &v10);
    if (v10 <= 0) {
      StringByIndex = v8;
    }
  }

  ures_close(v4);
  ures_close(v3);
  return StringByIndex;
}

const UChar *icu::TimeZone::getRegion(icu::TimeZone *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  int v4 = 0;
  return icu::TimeZone::getRegion(this, (const icu::UnicodeString *)&v4, a3);
}

{
  const UChar *v3;
  uint64_t v6;
  uint64_t v7;
  const UChar *StringByIndex;
  uint64_t v6 = ures_openDirect(0LL, (uint64_t)"zoneinfo64", (uint64_t)a2);
  unint64_t v7 = ures_getByKey(v6, "Names", 0LL, (int *)a2);
  LODWORD(this) = sub_18099415C(v7, (uint64_t)this, (int *)a2);
  ures_getByKey(v6, "Regions", v7, (int *)a2);
  StringByIndex = ures_getStringByIndex(v7, (signed int)this, 0LL, (int *)a2);
  else {
    uint64_t v3 = 0LL;
  }
  ures_close(v7);
  ures_close(v6);
  return v3;
}

uint64_t icu::TimeZone::getRegion( icu::TimeZone *this, const icu::UnicodeString *a2, char *a3, int *a4, UErrorCode *a5)
{
  uint64_t v5 = 0LL;
  *(_BYTE *)a2 = 0;
  if (*a4 <= 0)
  {
    int v7 = (int)a3;
    unsigned int v10 = *((unsigned __int16 *)this + 4);
    int v11 = (__int16)v10;
    int32_t v12 = v10 >> 5;
    if (v11 >= 0) {
      int32_t v13 = v12;
    }
    else {
      int32_t v13 = *((_DWORD *)this + 3);
    }
    if (icu::UnicodeString::doCompare((uint64_t)this, 0, v13, (uint64_t)L"Etc/Unknown", 0, 11)
      && (int v20 = 0, (Region = icu::TimeZone::getRegion(this, (const icu::UnicodeString *)&v20, v14)) != 0LL))
    {
      int32_t v16 = Region;
      uint64_t v5 = u_strlen(Region);
      int32_t v17 = uprv_min(v5, v7);
      u_UCharsToChars(v16, (char *)a2, v17);
      int v18 = 15;
    }

    else
    {
      uint64_t v5 = 0LL;
      int v18 = 1;
    }

    *a4 = v18;
  }

  return v5;
}

uint64_t icu::TimeZone::getDisplayName(icu::TimeZone *this, icu::UnicodeString *a2)
{
  Default = icu::Locale::getDefault(this);
  return icu::TimeZone::getDisplayName(this, 0, 2u, (char **)Default, (uint64_t)a2);
}

uint64_t icu::TimeZone::getDisplayName(icu::Calendar *a1, int a2, unsigned int a3, char **a4, uint64_t a5)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  UErrorCode v39 = U_ZERO_ERROR;
  icu::Calendar::getNow(a1);
  double v12 = v11;
  int v38 = 0;
  if (a3 <= 8)
  {
    int32_t v13 = (uint64_t *)(1 << a3);
    if (((unsigned __int16)v13 & 0x118) != 0)
    {
      unsigned int v14 = icu::TimeZoneFormat::createInstance(a4, &v39, v13);
      uint64_t Instance = (UChar **)v14;
      if (v39 > U_ZERO_ERROR)
      {
LABEL_4:
        if ((*(_WORD *)(a5 + 8) & 1) != 0) {
          __int16 v16 = 2;
        }
        else {
          __int16 v16 = *(_WORD *)(a5 + 8) & 0x1F;
        }
        *(_WORD *)(a5 + 8) = v16;
        if (Instance) {
          (*((void (**)(UChar **))*Instance + 1))(Instance);
        }
        return a5;
      }

      switch(a3)
      {
        case 3u:
          uint64_t v17 = 2LL;
          goto LABEL_25;
        case 8u:
          uint64_t v17 = 0LL;
          goto LABEL_25;
        case 4u:
          uint64_t v17 = 1LL;
LABEL_25:
          (*(void (**)(icu::TimeZoneFormat *, uint64_t, icu::Calendar *, uint64_t, int *, double))(*(void *)v14 + 64LL))( v14,  v17,  a1,  a5,  &v38,  v12);
          if (a2 && v38 == 1)
          {
            int v25 = (*(uint64_t (**)(icu::Calendar *))(*(void *)a1 + 64LL))(a1);
            int v26 = (*(uint64_t (**)(icu::Calendar *))(*(void *)a1 + 104LL))(a1) + v25;
          }

          else
          {
            if (a2 || v38 != 2) {
              goto LABEL_62;
            }
            int v26 = (*(uint64_t (**)(icu::Calendar *))(*(void *)a1 + 64LL))(a1);
          }

          if (a3 == 3) {
            icu::TimeZoneFormat::formatOffsetShortLocalizedGMT(Instance, v26, (UChar **)a5, &v39);
          }
          else {
            icu::TimeZoneFormat::formatOffsetLocalizedGMT(Instance, v26, (UChar **)a5, &v39);
          }
LABEL_62:
          (*((void (**)(UChar **))*Instance + 1))(Instance);
LABEL_63:
          if (v39 >= U_ILLEGAL_ARGUMENT_ERROR)
          {
            if ((*(_WORD *)(a5 + 8) & 1) != 0) {
              __int16 v36 = 2;
            }
            else {
              __int16 v36 = *(_WORD *)(a5 + 8) & 0x1F;
            }
            *(_WORD *)(a5 + 8) = v36;
          }

          return a5;
      }

uint64_t icu::TimeZone::getDisplayName(icu::TimeZone *this, char **a2, icu::UnicodeString *a3)
{
  return icu::TimeZone::getDisplayName(this, 0, 2u, a2, (uint64_t)a3);
}

uint64_t icu::TimeZone::getDisplayName(icu::Locale *a1, int a2, unsigned int a3, uint64_t a4)
{
  Default = icu::Locale::getDefault(a1);
  return icu::TimeZone::getDisplayName(a1, a2, a3, (char **)Default, a4);
}

uint64_t icu::TimeZone::getDSTSavings(icu::TimeZone *this)
{
  else {
    return 0LL;
  }
}

BOOL icu::TimeZone::parseCustomID( UChar **this, const icu::UnicodeString *a2, int *a3, int *a4, int *a5, int *a6)
{
  uint64_t v51 = *MEMORY[0x1895F89C0];
  memset(v50, 0, sizeof(v50));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v50, this);
  icu::Locale::Locale((icu::Locale *)v49, "", 0LL, 0LL, 0LL);
  icu::UnicodeString::toUpper((const UChar **)v50, (const icu::Locale *)v49);
  icu::Locale::~Locale((icu::Locale *)v49);
  LODWORD(v12) = *((unsigned __int16 *)this + 4);
  int v11 = (__int16)v12;
  LODWORD(v12) = v12 >> 5;
  if (v11 >= 0) {
    unint64_t v12 = v12;
  }
  else {
    unint64_t v12 = *((unsigned int *)this + 3);
  }
  if ((int)v12 >= 4)
  {
    BOOL v13 = icu::UnicodeString::doEqualsSubstring((uint64_t)v50, 0, 3, (uint64_t)L"GMT", 0, 3);
    uint64_t v45 = L"GMT";
    unint64_t v12 = (unint64_t)&v45;
    if (v13)
    {
      BOOL v15 = 0LL;
      __int128 v47 = off_18970F400;
      unint64_t v48 = 0xFFFFFFFF00000003LL;
      *(_DWORD *)a2 = 1;
      *a3 = 0;
      *a4 = 0;
      *a5 = 0;
      unsigned int v16 = *((unsigned __int16 *)this + 4);
      unsigned int v17 = *((_DWORD *)this + 3);
      if ((v16 & 0x8000u) == 0) {
        unsigned int v17 = v16 >> 5;
      }
      if (v17 < 4) {
        goto LABEL_21;
      }
      if ((v16 & 2) != 0) {
        int v18 = (UChar *)this + 5;
      }
      else {
        int v18 = this[3];
      }
      int v19 = v18[3];
      if (v19 != 43)
      {
        if (v19 != 45)
        {
          BOOL v15 = 0LL;
          goto LABEL_21;
        }

        *(_DWORD *)a2 = -1;
      }

      LODWORD(v48) = 4;
      int v46 = 0;
      uint64_t Instance = icu::NumberFormat::createInstance((icu::NumberFormat *)&v46, v14);
      BOOL v15 = 0LL;
      if (v46 > 0)
      {
LABEL_21:
        icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v47);
        goto LABEL_22;
      }

      __int16 v21 = Instance;
      (*(void (**)(icu::DecimalFormat *, uint64_t))(*(void *)Instance + 184LL))(Instance, 1LL);
      int v22 = v48;
      memset(v49, 0, 112);
      icu::Formattable::Formattable((icu::Formattable *)v49, -99999);
      (*(void (**)(icu::DecimalFormat *, UChar **, _OWORD *, void (***)(icu::ParsePosition *__hidden)))(*(void *)v21 + 160LL))( v21,  this,  v49,  &v47);
      uint64_t v23 = (int)v48;
      if ((_DWORD)v48 == v22) {
        goto LABEL_17;
      }
      int v25 = DWORD2(v49[0]);
      *a3 = DWORD2(v49[0]);
      unsigned int v26 = *((unsigned __int16 *)this + 4);
      int v27 = v26 >> 5;
      if ((v26 & 0x8000u) != 0) {
        int v27 = *((_DWORD *)this + 3);
      }
      int v28 = v23 - v22;
      if ((int)v23 < v27)
      {
        BOOL v29 = this[3];
        if ((v26 & 2) != 0) {
          BOOL v29 = (UChar *)this + 5;
        }
        if (v29[v23] != 58) {
          goto LABEL_17;
        }
        int v30 = v23 + 1;
        LODWORD(v48) = v23 + 1;
        icu::Formattable::setLong((icu::Formattable *)v49, -99999);
        (*(void (**)(icu::DecimalFormat *, UChar **, _OWORD *, void (***)(icu::ParsePosition *__hidden)))(*(void *)v21 + 160LL))( v21,  this,  v49,  &v47);
        uint64_t v31 = (int)v48;
        if ((_DWORD)v48 - v30 != 2) {
          goto LABEL_17;
        }
        *a4 = DWORD2(v49[0]);
        unsigned int v32 = *((unsigned __int16 *)this + 4);
        if ((__int16)this[1] < 0)
        {
          int v33 = *((_DWORD *)this + 3);
          if ((int)v31 < v33)
          {
LABEL_51:
            if (v33 > v31)
            {
              uint64_t v40 = (v32 & 2) != 0 ? (icu::TimeZone *)((char *)this + 10) : (icu::TimeZone *)this[3];
              if (*((_WORD *)v40 + v31) == 58)
              {
                int v41 = v31 + 1;
                LODWORD(v48) = v31 + 1;
                icu::Formattable::setLong((icu::Formattable *)v49, -99999);
                (*(void (**)(icu::DecimalFormat *, UChar **, _OWORD *, void (***)(icu::ParsePosition *__hidden)))(*(void *)v21 + 160LL))( v21,  this,  v49,  &v47);
                unsigned int v42 = *((unsigned __int16 *)this + 4);
                int v43 = (__int16)v42;
                unsigned int v44 = v42 >> 5;
                if (v43 < 0) {
                  unsigned int v44 = *((_DWORD *)this + 3);
                }
                if ((_DWORD)v48 == v44 && (_DWORD)v48 - v41 == 2)
                {
                  *a5 = DWORD2(v49[0]);
                  goto LABEL_41;
                }
              }
            }

icu::UnicodeString *icu::TimeZone::formatCustomID( icu::TimeZone *this, int a2, int a3, int a4, icu::UnicodeString *a5, icu::UnicodeString *a6)
{
  int v10 = (int)this;
  icu::UnicodeString::unBogus((uint64_t)a5);
  unsigned int v11 = *((unsigned __int16 *)a5 + 4);
  int v12 = (__int16)v11;
  unsigned int v13 = v11 >> 5;
  if (v12 >= 0) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = *((unsigned int *)a5 + 3);
  }
  icu::UnicodeString::doReplace((uint64_t)a5, 0LL, v14, (uint64_t)L"GMT", 0, 3LL);
  if (a2 | v10 | a3)
  {
    __int16 v15 = a4 ? 45 : 43;
    __int16 v20 = v15;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v20, 0, 1LL);
    if (v10 > 9) {
      unsigned int v16 = v10 / 0xAu + 48;
    }
    else {
      LOWORD(v16) = 48;
    }
    __int16 v20 = v16;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v20, 0, 1LL);
    __int16 v20 = v10 % 10 + 48;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v20, 0, 1LL);
    __int16 v20 = 58;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v20, 0, 1LL);
    if (a2 > 9) {
      unsigned int v17 = a2 / 0xAu + 48;
    }
    else {
      LOWORD(v17) = 48;
    }
    __int16 v20 = v17;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v20, 0, 1LL);
    __int16 v20 = a2 % 10 + 48;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v20, 0, 1LL);
    if (a3)
    {
      __int16 v20 = 58;
      icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v20, 0, 1LL);
      if (a3 > 9) {
        unsigned int v18 = a3 / 0xAu + 48;
      }
      else {
        LOWORD(v18) = 48;
      }
      __int16 v20 = v18;
      icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v20, 0, 1LL);
      __int16 v20 = a3 % 10 + 48;
      icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v20, 0, 1LL);
    }
  }

  return a5;
}

const icu::UnicodeString *icu::TimeZone::getCustomID( UChar **this, const icu::UnicodeString *a2, icu::UnicodeString *a3, UErrorCode *a4, uint64_t a5, int *a6)
{
  if ((*((_WORD *)a2 + 4) & 1) != 0) {
    __int16 v7 = 2;
  }
  else {
    __int16 v7 = *((_WORD *)a2 + 4) & 0x1F;
  }
  *((_WORD *)a2 + 4) = v7;
  if (*(int *)a3 <= 0)
  {
    *(void *)unsigned int v11 = 0LL;
    *(void *)int v12 = 0LL;
    if (icu::TimeZone::parseCustomID(this, (const icu::UnicodeString *)&v12[1], v12, &v11[1], v11, a6)) {
      icu::TimeZone::formatCustomID( (icu::TimeZone *)v12[0],  v11[1],  v11[0],  v12[1] >> 31,  a2,  v9);
    }
    else {
      *(_DWORD *)a3 = 1;
    }
  }

  return a2;
}

BOOL icu::TimeZone::hasSameRules(icu::TimeZone *this, const icu::TimeZone *a2)
{
  int v4 = (*(uint64_t (**)(icu::TimeZone *))(*(void *)this + 64LL))(this);
  int v5 = (*(uint64_t (**)(icu::TimeZone *))(*(void *)this + 72LL))(this);
  return v5 == (*(unsigned int (**)(const icu::TimeZone *))(*(void *)a2 + 72LL))(a2);
}

uint64_t *icu::TimeZone::getTZDataVersion(icu::TimeZone *this, UErrorCode *a2)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  if (*(int *)this <= 0)
  {
    unsigned int v3 = atomic_load(&dword_18C535A48);
    if (v3 == 2 || !icu::umtx_initImplPreInit(&dword_18C535A48))
    {
      if (dword_18C535A4C >= 1) {
        *(_DWORD *)this = dword_18C535A4C;
      }
    }

    else
    {
      sub_1809B36C0(0x13u, (uint64_t)sub_180993538);
      int32_t v7 = 0;
      uint64_t v9 = 0LL;
      memset(v8, 0, sizeof(v8));
      icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v8);
      ures_openDirectFillIn((uint64_t)v8, 0LL, "zoneinfo64", (int *)this);
      StringByuint64_t Key = ures_getStringByKey((uint64_t)v8, "TZVersion", &v7, (int *)this);
      if (*(int *)this <= 0)
      {
        int32_t v5 = v7;
        if (v7 >= 16)
        {
          int32_t v5 = 15;
          int32_t v7 = 15;
        }

        u_UCharsToChars(StringByKey, (char *)&qword_18C5359E1, v5);
      }

      icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v8);
      dword_18C535A4C = *(_DWORD *)this;
      icu::umtx_initImplPostInit(&dword_18C535A48);
    }
  }

  return &qword_18C5359E1;
}

const icu::UnicodeString *icu::TimeZone::getCanonicalID( icu::TimeZone *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, UErrorCode *a4, UErrorCode *a5)
{
  return a2;
}

const icu::UnicodeString *icu::TimeZone::getCanonicalID( icu::TimeZone *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, icu::UnicodeString *a4, UErrorCode *a5)
{
  if ((*((_WORD *)a2 + 4) & 1) != 0) {
    __int16 v6 = 2;
  }
  else {
    __int16 v6 = *((_WORD *)a2 + 4) & 0x1F;
  }
  *((_WORD *)a2 + 4) = v6;
  *(_BYTE *)a3 = 0;
  if (*(int *)a4 <= 0)
  {
    unsigned int v11 = *((unsigned __int16 *)this + 4);
    int v12 = (__int16)v11;
    int32_t v13 = v11 >> 5;
    if (v12 >= 0) {
      int32_t v14 = v13;
    }
    else {
      int32_t v14 = *((_DWORD *)this + 3);
    }
    if (icu::UnicodeString::doCompare((uint64_t)this, 0, v14, (uint64_t)L"Etc/Unknown", 0, 11))
    {
      icu::ZoneMeta::getCanonicalCLDRID(this, a2, a4, v15);
      if (*(int *)a4 <= 0)
      {
        *(_BYTE *)a3 = 1;
      }

      else
      {
        *(_DWORD *)a4 = 0;
        icu::TimeZone::getCustomID((UChar **)this, a2, a4, v16, v17, v18);
      }
    }

    else
    {
      icu::UnicodeString::fastCopyFrom((UChar **)a2, (UChar **)this);
      *(_BYTE *)a3 = 0;
    }
  }

  return a2;
}

const icu::UnicodeString *icu::TimeZone::getIanaID( icu::TimeZone *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  if ((*((_WORD *)a2 + 4) & 1) != 0) {
    __int16 v5 = 2;
  }
  else {
    __int16 v5 = *((_WORD *)a2 + 4) & 0x1F;
  }
  *((_WORD *)a2 + 4) = v5;
  if (*(int *)a3 <= 0)
  {
    unsigned int v8 = *((unsigned __int16 *)this + 4);
    int v9 = (__int16)v8;
    int32_t v10 = v8 >> 5;
    if (v9 >= 0) {
      int32_t v11 = v10;
    }
    else {
      int32_t v11 = *((_DWORD *)this + 3);
    }
    if (icu::UnicodeString::doCompare((uint64_t)this, 0, v11, (uint64_t)L"Etc/Unknown", 0, 11))
    {
      icu::ZoneMeta::getIanaID(this, a2, a3, v12);
    }

    else
    {
      *(_DWORD *)a3 = 1;
      icu::UnicodeString::setToBogus(a2);
    }
  }

  return a2;
}

const icu::UnicodeString *icu::TimeZone::getWindowsID( icu::TimeZone *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, UErrorCode *a4, UErrorCode *a5)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  __int16 v6 = *((_WORD *)a2 + 4) & 0x1F;
  if ((*((_WORD *)a2 + 4) & 1) != 0) {
    __int16 v6 = 2;
  }
  *((_WORD *)a2 + 4) = v6;
  if (*(int *)a3 <= 0)
  {
    __int128 v30 = 0u;
    uint64_t v33 = 0LL;
    __int128 v32 = 0u;
    __int128 v31 = 0u;
    BOOL v29 = off_18971B688;
    LOWORD(v3icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
    char v27 = 0;
    icu::TimeZone::getCanonicalID(this, (const icu::UnicodeString *)&v29, (icu::UnicodeString *)&v27, a3, a5);
    unsigned int v8 = (void *)*(unsigned int *)a3;
    if ((int)v8 <= 0 && v27)
    {
      uint64_t v9 = ures_openDirect(0LL, (uint64_t)"windowsZones", (uint64_t)a3);
      ures_getByKey(v9, "mapTimezones", v9, (int *)a3);
      unsigned int v8 = (void *)*(unsigned int *)a3;
      if ((int)v8 <= 0)
      {
        uint64_t v10 = 0LL;
        if (ures_hasNext(v9))
        {
          do
          {
            NextResource = ures_getNextResource(v9, v10, (int *)a3);
            uint64_t v10 = (uint64_t)NextResource;
            if (ures_getType((uint64_t)NextResource) == 2)
            {
              if (ures_hasNext(v10))
              {
                uint64_t v12 = 0LL;
                while (1)
                {
                  int32_t v13 = ures_getNextResource(v10, v12, (int *)a3);
                  uint64_t v12 = (uint64_t)v13;
                  if (ures_getType((uint64_t)v13))
                  {
LABEL_23:
                    int v20 = 0;
                  }

                  else
                  {
                    int v26 = 0;
                    String = ures_getString(v12, &v26, (int *)a3);
                    __int16 v15 = String;
                    while (1)
                    {
                      unsigned int v16 = u_strchr(v15, 0x20u);
                      uint64_t v17 = v16;
                      unsigned int v18 = v16 ? v16 : (UChar *)&String[v26];
                      int32_t v19 = (v30 & 0x8000u) == 0LL ? (unsigned __int16)v30 >> 5 : DWORD1(v30);
                      if (!icu::UnicodeString::doCompare( (uint64_t)&v29,  0,  v19,  (uint64_t)v15,  0,  (unint64_t)((char *)v18 - (char *)v15) >> 1)) {
                        break;
                      }
                      __int16 v15 = v18 + 1;
                      if (!v17) {
                        goto LABEL_23;
                      }
                    }

                    uint64_t Key = ures_getKey(v10);
                    icu::UnicodeString::UnicodeString(v28, Key, 0xFFFFFFFFLL, 0LL);
                    icu::UnicodeString::operator=(a2, (icu::UnicodeString *)v28);
                    icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)v28);
                    int v20 = 1;
                  }

                  BOOL hasNext = ures_hasNext(v10);
                  if (v20 || !hasNext) {
                    goto LABEL_31;
                  }
                }

                int v20 = 0;
              }

              else
              {
                int v20 = 0;
                uint64_t v12 = 0LL;
              }

const char *icu::TimeZone::getIDForWindowsID( icu::TimeZone *this, const icu::UnicodeString *a2, const char *a3, icu::UnicodeString *a4, UErrorCode *a5)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  if ((*((_WORD *)a3 + 4) & 1) != 0) {
    __int16 v6 = 2;
  }
  else {
    __int16 v6 = *((_WORD *)a3 + 4) & 0x1F;
  }
  *((_WORD *)a3 + 4) = v6;
  if (*(int *)a4 <= 0)
  {
    uint64_t v10 = ures_openDirect(0LL, (uint64_t)"windowsZones", (uint64_t)a4);
    ures_getByKey(v10, "mapTimezones", v10, (int *)a4);
    int v25 = 0;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    *(_OWORD *)int v26 = 0u;
    __int128 v27 = 0u;
    unsigned int v12 = *((unsigned __int16 *)this + 4);
    int v13 = (__int16)v12;
    unsigned int v14 = v12 >> 5;
    uint64_t v15 = v13 >= 0 ? v14 : *((unsigned int *)this + 3);
    int v16 = icu::UnicodeString::extract((uint64_t)this, 0, v15, v26, 127);
    if (!v16) {
      goto LABEL_6;
    }
    if (v16 >= 128) {
      goto LABEL_6;
    }
    v26[v16] = 0;
    ures_getByKey(v10, v26, v10, &v25);
    if (v25 >= 1) {
      goto LABEL_6;
    }
    unsigned int v24 = 0;
    if (a2 && (uint64_t v17 = ures_getStringByKey(v10, (const char *)a2, (int *)&v24, &v25), v25 <= 0))
    {
      int v22 = v17;
      uint64_t v23 = u_strchr(v17, 0x20u);
      if (v23)
      {
        uint64_t v20 = (unint64_t)((char *)v23 - (char *)v22) >> 1;
        __int16 v21 = a3;
        uint64_t v19 = (uint64_t)v22;
      }

      else
      {
        __int16 v21 = a3;
        uint64_t v19 = (uint64_t)v22;
        uint64_t v20 = 0xFFFFFFFFLL;
      }
    }

    else
    {
      StringByuint64_t Key = ures_getStringByKey(v10, "001", (int *)&v24, (int *)a4);
      if (*(int *)a4 > 0)
      {
LABEL_6:
        ures_close(v10);
        return a3;
      }

      uint64_t v19 = (uint64_t)StringByKey;
      uint64_t v20 = v24;
      __int16 v21 = a3;
    }

    sub_180941A00((uint64_t)v21, v19, v20);
    goto LABEL_6;
  }

  return a3;
}

uint64_t *sub_180995B2C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0x90, a2);
  if (result) {
    return (uint64_t *)sub_180996190((uint64_t)result, a1);
  }
  return result;
}

uint64_t sub_180995B5C(uint64_t a1, int *a2)
{
  if (*a2 <= 0) {
    return *(unsigned int *)(a1 + 136);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_180995B78(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(a1 + 120);
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = *(int *)(a1 + 140);
  sub_180996234(a1, *(_DWORD *)(v4 + 4 * v5), a2);
  ++*(_DWORD *)(a1 + 140);
  return a1 + 8;
}

uint64_t sub_180995BE0(uint64_t result)
{
  *(_DWORD *)(result + 14icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  return result;
}

uint64_t *sub_180995BE8(uint64_t a1, int *a2)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  if (*a2 > 0) {
    return 0LL;
  }
  uint64_t v11 = 0LL;
  memset(v10, 0, sizeof(v10));
  icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v10);
  uint64_t v6 = sub_180993DB4(a1, (uint64_t)v10, a2);
  int v2 = 0LL;
  char v7 = (uint64_t *)*a2;
  if ((int)v7 <= 0)
  {
    unsigned int v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0xE0, v5);
    int v2 = v8;
    if (v8) {
      icu::OlsonTimeZone::OlsonTimeZone(v8, v6, v10, a1, a2);
    }
    else {
      *a2 = 7;
    }
  }

  ures_close(v6);
  if (*a2 >= 1 && v2)
  {
    (*(void (**)(uint64_t *))(*v2 + 8))(v2);
    int v2 = 0LL;
  }

  icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v10);
  return v2;
}

uint64_t sub_180995D08(int a1, int *a2, int *a3)
{
  *a2 = 0;
  if (*a3 > 0) {
    return 0LL;
  }
  if (a1 == 2)
  {
    sub_1807C3D28((unsigned int *)&unk_18C535A40, (void (*)(uint64_t, int *))sub_180995DEC, 2LL, a3);
    uint64_t result = qword_18C535A28;
    int v5 = dword_18C535A20;
  }

  else if (a1 == 1)
  {
    sub_1807C3D28((unsigned int *)&unk_18C535A38, (void (*)(uint64_t, int *))sub_180995DEC, 1LL, a3);
    uint64_t result = qword_18C535A18;
    int v5 = dword_18C535A10;
  }

  else if (a1)
  {
    int v5 = 0;
    uint64_t result = 0LL;
    *a3 = 1;
  }

  else
  {
    sub_1807C3D28((unsigned int *)&unk_18C535A30, (void (*)(uint64_t, int *))sub_180995DEC, 0LL, a3);
    uint64_t result = qword_18C535A08;
    int v5 = dword_18C535A00;
  }

  *a2 = v5;
  return result;
}

void sub_180995DEC(int a1, int *a2)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  sub_1809B36C0(0x13u, (uint64_t)sub_180993538);
  uint64_t v4 = ures_openDirect(0LL, (uint64_t)"zoneinfo64", (uint64_t)a2);
  uint64_t v5 = ures_getByKey(v4, "Names", v4, a2);
  uint64_t v6 = v5;
  if (*a2 > 0) {
    goto LABEL_2;
  }
  int Size = ures_getSize(v5);
  int v26 = uprv_malloc(4LL * Size);
  if (!v26)
  {
    *a2 = 7;
    goto LABEL_2;
  }

  if (Size >= 1)
  {
    signed int v8 = 0;
    int v9 = 0;
    while (1)
    {
      uint64_t v38 = 0LL;
      __int128 v36 = 0u;
      __int128 v37 = 0u;
      __int128 v35 = 0u;
      uint64_t v34 = off_18971B688;
      LOWORD(v35) = 2;
      int v28 = 0;
      StringByIndex = ures_getStringByIndex(v6, v8, &v28, a2);
      _OWORD v27[2] = StringByIndex;
      if (*a2 <= 0)
      {
        __int128 v29 = StringByIndex;
        icu::UnicodeString::setTo((icu::UnicodeString *)&v34, 1, &v29, v28);
        v27[1] = v29;
      }

      else
      {
        icu::UnicodeString::setToBogus((icu::UnicodeString *)&v34);
      }

      unint64_t v11 = *a2;
      if ((int)v11 > 0)
      {
LABEL_38:
        icu::UnicodeString::~UnicodeString((void *)v11, (icu::UnicodeString *)&v34);
        goto LABEL_39;
      }

      if ((v35 & 0x8000u) == 0LL) {
        int32_t v12 = (unsigned __int16)v35 >> 5;
      }
      else {
        int32_t v12 = DWORD1(v35);
      }
      int v13 = icu::UnicodeString::doCompare((uint64_t)&v34, 0, v12, (uint64_t)L"Etc/Unknown", 0, 11);
      v27[0] = L"Etc/Unknown";
      unint64_t v15 = (unint64_t)v27;
      if (v13)
      {
        uint64_t v33 = 0LL;
        __int128 v31 = 0u;
        __int128 v32 = 0u;
        __int128 v30 = 0u;
        __int128 v29 = (const UChar *)off_18971B688;
        LOWORD(v3icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
        icu::ZoneMeta::getCanonicalCLDRID( (icu::ZoneMeta *)&v34,  (const icu::UnicodeString *)&v29,  (icu::UnicodeString *)a2,  v14);
        unint64_t v16 = *a2;
        if ((int)v16 >= 1)
        {
          icu::UnicodeString::~UnicodeString((void *)v16, (icu::UnicodeString *)&v29);
          goto LABEL_38;
        }

        if ((v30 & 1) != 0)
        {
          char v22 = v35;
          icu::UnicodeString::~UnicodeString((void *)(unsigned __int16)v30, (icu::UnicodeString *)&v29);
          if ((v22 & 1) == 0) {
            goto LABEL_32;
          }
        }

        else
        {
          if ((v30 & 0x8000u) == 0LL) {
            int v17 = (unsigned __int16)v30 >> 5;
          }
          else {
            int v17 = DWORD1(v30);
          }
          if ((v35 & 0x8000u) == 0LL) {
            unsigned int v18 = (void *)((unsigned __int16)v35 >> 5);
          }
          else {
            unsigned int v18 = (void *)DWORD1(v35);
          }
          if ((v35 & 1) != 0 || v17 != (_DWORD)v18)
          {
            icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v29);
            goto LABEL_32;
          }

          BOOL v19 = icu::UnicodeString::doEquals((icu::UnicodeString *)&v29, (const icu::UnicodeString *)&v34, v17);
          icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v29);
          if (!v19) {
            goto LABEL_32;
          }
        }

        if (a1 != 2) {
          goto LABEL_31;
        }
        Regiouint64_t n = icu::TimeZone::getRegion((icu::TimeZone *)&v34, (const icu::UnicodeString *)a2, v21);
        unint64_t v11 = *a2;
        if (u_strcmp(Region, (const UChar *)"0"))
        {
LABEL_31:
          v26[v9] = v8;
          unint64_t v15 = ++v9;
        }
      }

uint64_t sub_180996190(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)icu::StringEnumeration::StringEnumeration(a1);
  *uint64_t v4 = &off_18972B858;
  v4[16] = 0LL;
  v4[17] = 0LL;
  v4[15] = 0LL;
  if (*(void *)(a2 + 128))
  {
    uint64_t v5 = uprv_malloc(4LL * *(int *)(a2 + 136));
    *(void *)(a1 + 128) = v5;
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(int *)(a2 + 136);
      *(_DWORD *)(a1 + 136) = v7;
      memcpy(v5, *(const void **)(a2 + 128), 4 * v7);
      *(_DWORD *)(a1 + 14icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = *(_DWORD *)(a2 + 140);
      *(void *)(a1 + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v6;
    }

    else
    {
      *(void *)(a1 + 136) = 0LL;
      *(void *)(a1 + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
    }
  }

  else
  {
    *(void *)(a1 + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = 0LL;
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
  }

  return a1;
}

BOOL sub_180996234(uint64_t a1, signed int a2, int *a3)
{
  _BYTE v14[8] = *(UChar **)MEMORY[0x1895F89C0];
  int v13 = 0;
  uint64_t v6 = ures_openDirect(0LL, (uint64_t)"zoneinfo64", (uint64_t)a3);
  uint64_t v7 = ures_getByKey(v6, "Names", v6, a3);
  StringByIndex = ures_getStringByIndex(v7, a2, &v13, a3);
  if (*a3 < 1)
  {
    int32_t v12 = StringByIndex;
    icu::UnicodeString::UnicodeString(v14, 1LL, &v12);
    icu::UnicodeString::fastCopyFrom((UChar **)(a1 + 8), v14);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v14);
  }

  else
  {
    unsigned int v9 = *(unsigned __int16 *)(a1 + 16);
    if ((v9 & 1) != 0)
    {
      icu::UnicodeString::unBogus(a1 + 8);
    }

    else
    {
      if ((v9 & 0x8000) == 0)
      {
        if (!(v9 >> 5)) {
          goto LABEL_10;
        }
        goto LABEL_9;
      }

      if (*(_DWORD *)(a1 + 20)) {
LABEL_9:
      }
        *(_WORD *)(a1 + 16) &= 0x1Fu;
    }
  }

void *icu::TitlecaseTransliterator::getStaticClassID(icu::TitlecaseTransliterator *this)
{
  return &unk_18C535A50;
}

void *sub_180996370()
{
  return &unk_18C535A50;
}

icu::Transliterator *sub_18099637C(icu::Transliterator *a1)
{
  v5[8] = *(UChar **)MEMORY[0x1895F89C0];
  uint64_t v4 = "A";
  icu::UnicodeString::UnicodeString(v5, 1LL, &v4);
  sub_18089E50C(a1, v5, 0LL);
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)v5);
  *(void *)a1 = &off_18972B8F0;
  icu::Transliterator::setMaximumContextLength((uint64_t)a1, 2);
  return a1;
}

void sub_180996434(icu::Transliterator *a1)
{
}

icu::Transliterator *sub_180996448@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  if (result)
  {
    uint64_t result = sub_18089E54C(result, a1);
    *(void *)uint64_t result = &off_18972B8F0;
  }

  return result;
}

void sub_180996484(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  uint64_t v5 = a3[2];
  int v4 = a3[3];
  int v9 = *a3;
  if ((int)v5 <= *a3)
  {
    BOOL v14 = 1;
  }

  else
  {
    uint64_t v10 = (v5 - 1);
    while (1)
    {
      unsigned int v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 80LL))(a2, v10);
      int TypeOrIgnorable = ucase_getTypeOrIgnorable(v11);
      if (TypeOrIgnorable >= 1) {
        break;
      }
      int v9 = *a3;
      if (TypeOrIgnorable)
      {
        int v13 = v11 >= 0x10000 ? -2 : -1;
        uint64_t v10 = (v13 + v10);
      }

      BOOL v14 = 1;
      goto LABEL_13;
    }

    BOOL v14 = 0;
    int v9 = *a3;
LABEL_13:
    uint64_t v5 = a3[2];
    int v4 = a3[3];
  }

  uint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  v29[0] = a2;
  v29[1] = v9;
  LODWORD(v3icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = a3[1];
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  uint64_t v36 = 0LL;
  __int128 v35 = 0u;
  __int128 v32 = off_18971B688;
  uint64_t v15 = 2LL;
  LOWORD(v33) = 2;
  int v28 = 0LL;
  if ((int)v5 >= v4)
  {
    LODWORD(v19) = v5;
    goto LABEL_39;
  }

  while (1)
  {
    HIDWORD(v3icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v5;
    unsigned int v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 80LL))(a2, v5);
    unsigned int v17 = v16;
    int v18 = v16 < 0x10000 ? 1 : 2;
    uint64_t v19 = (v18 + v5);
    LODWORD(v3icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = v18 + v5;
    int v20 = ucase_getTypeOrIgnorable(v16);
    if ((v20 & 0x80000000) == 0) {
      break;
    }
LABEL_35:
    uint64_t v15 = a3[3];
    uint64_t v5 = v19;
  }

  int v21 = v20;
  if (v14) {
    unsigned int v22 = ucase_toFullTitle(v17, (uint64_t (*)(uint64_t, void))sub_18089E424, (uint64_t)v29, &v28, 1);
  }
  else {
    unsigned int v22 = ucase_toFullLower(v17, (uint64_t (*)(uint64_t, void))sub_18089E424, (uint64_t)v29, &v28, 1);
  }
  unsigned int v23 = v22;
  BOOL v14 = v21 == 0;
  if (!a4 || (uint64_t v15 = BYTE5(v31), !BYTE5(v31)))
  {
    if ((v22 & 0x80000000) == 0)
    {
      if (v22 > 0x1F)
      {
        icu::UnicodeString::unBogus((uint64_t)&v32);
        if ((v33 & 0x8000u) == 0LL) {
          uint64_t v24 = (unsigned __int16)v33 >> 5;
        }
        else {
          uint64_t v24 = DWORD1(v33);
        }
        icu::UnicodeString::replace((icu::UnicodeString *)&v32, 0LL, v24, v23);
        if ((v33 & 0x8000) != 0) {
          unsigned int v23 = DWORD1(v33);
        }
        else {
          unsigned int v23 = (unsigned __int16)v33 >> 5;
        }
      }

      else
      {
        __int128 v27 = v28;
        icu::UnicodeString::setTo((icu::UnicodeString *)&v32, 0, &v27, v22);
      }

      (*(void (**)(uint64_t, void, void, void (***)(icu::UnicodeString *__hidden)))(*(void *)a2 + 32LL))( a2,  HIDWORD(v30),  (v18 + v5),  &v32);
      unsigned int v25 = v23 - v18;
      if (v23 != v18)
      {
        uint64_t v19 = v23 + v5;
        unsigned int v26 = a3[1] + v25;
        a3[1] = v26;
        LODWORD(v3icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v26;
        a3[3] += v25;
      }
    }

    goto LABEL_35;
  }

  LODWORD(v19) = HIDWORD(v30);
LABEL_39:
  a3[2] = v19;
  icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v32);
}

void *icu::TimeUnit::getStaticClassID(icu::TimeUnit *this)
{
  return &unk_18C535A51;
}

void *icu::TimeUnit::getDynamicClassID(icu::TimeUnit *this)
{
  return &unk_18C535A51;
}

icu::MeasureUnit *icu::TimeUnit::createInstance(unsigned int a1, _DWORD *a2)
{
  int v2 = (uint64_t *)*a2;
  if (a1 < 7)
  {
    uint64_t result = (icu::MeasureUnit *)icu::UMemory::operator new(v2, (icu::UMemory *)0x18, (unint64_t)a2);
    if (result) {
      return icu::TimeUnit::TimeUnit(result, a1);
    }
  }

  else
  {
    uint64_t result = 0LL;
    *a2 = 1;
  }

  return result;
}

icu::MeasureUnit *icu::TimeUnit::TimeUnit(icu::MeasureUnit *a1, unsigned int a2)
{
  uint64_t v4 = icu::MeasureUnit::MeasureUnit((uint64_t)a1);
  *(void *)uint64_t v4 = off_18972B9A0;
  *(_DWORD *)(v4 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = a2;
  if (a2 >= 7) {
    abort();
  }
  icu::MeasureUnit::initTime(a1, off_18972B9E0[a2]);
  return a1;
}

uint64_t icu::TimeUnit::TimeUnit(icu::TimeUnit *this, const icu::TimeUnit *a2)
{
  uint64_t result = icu::MeasureUnit::MeasureUnit((uint64_t)this, (unint64_t)a2);
  *(void *)uint64_t result = off_18972B9A0;
  *(_DWORD *)(result + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = *((_DWORD *)a2 + 5);
  return result;
}

{
  uint64_t result;
  uint64_t result = icu::MeasureUnit::MeasureUnit((uint64_t)this, (unint64_t)a2);
  *(void *)uint64_t result = off_18972B9A0;
  *(_DWORD *)(result + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = *((_DWORD *)a2 + 5);
  return result;
}

uint64_t *icu::TimeUnit::clone@<X0>(icu::TimeUnit *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = icu::UMemory::operator new(a3, (icu::UMemory *)0x18, a2);
  if (result)
  {
    uint64_t result = (uint64_t *)icu::MeasureUnit::MeasureUnit((uint64_t)result, (unint64_t)this);
    *uint64_t result = (uint64_t)off_18972B9A0;
    *((_DWORD *)result + 5) = *((_DWORD *)this + 5);
  }

  return result;
}

uint64_t icu::TimeUnit::operator=(uint64_t a1, unint64_t a2)
{
  if (a1 != a2)
  {
    icu::MeasureUnit::operator=(a1, a2);
    *(_DWORD *)(a1 + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = *(_DWORD *)(a2 + 20);
  }

  return a1;
}

uint64_t icu::TimeUnit::getTimeUnitField(icu::TimeUnit *this)
{
  return *((unsigned int *)this + 5);
}

void icu::TimeUnit::~TimeUnit(icu::TimeUnit *this)
{
}

void *icu::TimeUnitAmount::getStaticClassID(icu::TimeUnitAmount *this)
{
  return &unk_18C535A52;
}

void *icu::TimeUnitAmount::getDynamicClassID(icu::TimeUnitAmount *this)
{
  return &unk_18C535A52;
}

icu::Measure *icu::TimeUnitAmount::TimeUnitAmount( icu::Measure *a1, const icu::Formattable *a2, unsigned int a3, UErrorCode *a4)
{
  uint64_t Instance = icu::TimeUnit::createInstance(a3, a4);
  uint64_t result = icu::Measure::Measure(a1, a2, Instance, a4);
  *(void *)a1 = off_18972BA28;
  return result;
}

{
  icu::MeasureUnit *Instance;
  icu::Measure *result;
  uint64_t Instance = icu::TimeUnit::createInstance(a3, a4);
  uint64_t result = icu::Measure::Measure(a1, a2, Instance, a4);
  *(void *)a1 = off_18972BA28;
  return result;
}

icu::Measure *icu::TimeUnitAmount::TimeUnitAmount( icu::Measure *a1, unsigned int a2, UErrorCode *a3, double a4)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  icu::Formattable::Formattable((icu::Formattable *)v9, a4);
  uint64_t Instance = icu::TimeUnit::createInstance(a2, a3);
  icu::Measure::Measure(a1, (const icu::Formattable *)v9, Instance, a3);
  icu::Formattable::~Formattable((icu::Formattable *)v9);
  *(void *)a1 = off_18972BA28;
  return a1;
}

void *icu::TimeUnitAmount::TimeUnitAmount(icu::TimeUnitAmount *this, const icu::TimeUnitAmount *a2)
{
  uint64_t result = (void *)icu::Measure::Measure(this, a2);
  *uint64_t result = off_18972BA28;
  return result;
}

{
  void *result;
  uint64_t result = (void *)icu::Measure::Measure(this, a2);
  *uint64_t result = off_18972BA28;
  return result;
}

uint64_t icu::TimeUnitAmount::operator=(uint64_t a1, uint64_t a2)
{
  icu::Measure::operator=(a1, a2);
  return a1;
}

icu::Measure *icu::TimeUnitAmount::clone@<X0>( icu::TimeUnitAmount *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::Measure *)icu::UMemory::operator new(a3, (icu::UMemory *)0x80, a2);
  if (result)
  {
    uint64_t result = (icu::Measure *)icu::Measure::Measure(result, this);
    *(void *)uint64_t result = off_18972BA28;
  }

  return result;
}

void icu::TimeUnitAmount::~TimeUnitAmount(icu::TimeUnitAmount *this)
{
}

uint64_t icu::TimeUnitAmount::getTimeUnit(icu::TimeUnitAmount *this)
{
  return *((void *)this + 15);
}

uint64_t icu::TimeUnitAmount::getTimeUnitField(icu::TimeUnit **this)
{
  return icu::TimeUnit::getTimeUnitField(this[15]);
}

void *icu::TimeUnitFormat::getStaticClassID(icu::TimeUnitFormat *this)
{
  return &unk_18C535A53;
}

void *icu::TimeUnitFormat::getDynamicClassID(icu::TimeUnitFormat *this)
{
  return &unk_18C535A53;
}

icu::TimeUnitFormat *icu::TimeUnitFormat::TimeUnitFormat(icu::TimeUnitFormat *this, UErrorCode *a2)
{
  uint64_t v4 = (icu::Locale *)icu::MeasureFormat::MeasureFormat(this);
  *(void *)uint64_t v4 = off_18972BA78;
  Default = icu::Locale::getDefault(v4);
  icu::MeasureFormat::initMeasureFormat((uint64_t)this, (const char **)Default, 0, 0LL, a2);
  *((void *)this + 53) = 0LL;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  if (*(int *)a2 <= 0)
  {
    *((_DWORD *)this + 108) = 0;
    icu::TimeUnitFormat::setup(this, a2);
  }

  return this;
}

void icu::TimeUnitFormat::create(uint64_t a1, unsigned int a2, UErrorCode *a3)
{
  *(void *)(a1 + 424) = 0LL;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  if (*(int *)a3 <= 0)
  {
    if (a2 < 2)
    {
      *(_DWORD *)(a1 + 432) = a2;
      icu::TimeUnitFormat::setup((icu::TimeUnitFormat *)a1, a3);
    }

    else
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }

icu::TimeUnitFormat *icu::TimeUnitFormat::TimeUnitFormat( icu::TimeUnitFormat *this, const char **a2, UErrorCode *a3)
{
  uint64_t v6 = (void *)icu::MeasureFormat::MeasureFormat(this);
  *uint64_t v6 = off_18972BA78;
  icu::MeasureFormat::initMeasureFormat((uint64_t)v6, a2, 0, 0LL, a3);
  *((void *)this + 53) = 0LL;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  if (*(int *)a3 <= 0)
  {
    *((_DWORD *)this + 108) = 0;
    icu::TimeUnitFormat::setup(this, a3);
  }

  return this;
}

uint64_t icu::TimeUnitFormat::TimeUnitFormat(uint64_t a1, const char **a2, unsigned int a3, UErrorCode *a4)
{
  signed int v8 = (void *)icu::MeasureFormat::MeasureFormat((icu::MeasureFormat *)a1);
  *signed int v8 = off_18972BA78;
  icu::MeasureFormat::initMeasureFormat((uint64_t)v8, a2, a3 == 1, 0LL, a4);
  *(void *)(a1 + 424) = 0LL;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  if (*(int *)a4 <= 0)
  {
    if (a3 < 2)
    {
      *(_DWORD *)(a1 + 432) = a3;
      icu::TimeUnitFormat::setup((icu::TimeUnitFormat *)a1, a4);
    }

    else
    {
      *a4 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }

  return a1;
}

icu::TimeUnitFormat *icu::TimeUnitFormat::TimeUnitFormat( icu::TimeUnitFormat *this, const icu::TimeUnitFormat *a2)
{
  inited = icu::MeasureFormat::MeasureFormat(this, a2);
  *(void *)inited = off_18972BA78;
  *((_DWORD *)inited + 108) = *((_DWORD *)a2 + 108);
  for (uint64_t i = 376LL; i != 432; i += 8LL)
  {
    UErrorCode v9 = U_ZERO_ERROR;
    inited = (icu::TimeUnitFormat *)icu::TimeUnitFormat::initHash(inited, &v9);
    uint64_t v6 = inited;
    *(void *)((char *)this + i) = inited;
    if (v9 <= U_ZERO_ERROR)
    {
      icu::TimeUnitFormat::copyHash((uint64_t)inited, *(uint64_t ***)((char *)a2 + i), (uint64_t *)inited, (int *)&v9);
    }

    else
    {
      if (inited)
      {
        uint64_t v7 = *(_BYTE **)inited;
        if (*(void *)v6) {
          uhash_close(v7);
        }
        icu::UMemory::operator delete(v6);
      }

      *(void *)((char *)this + i) = 0LL;
    }
  }

  return this;
}

uint64_t *icu::TimeUnitFormat::initHash(icu::TimeUnitFormat *this, UErrorCode *a2)
{
  int v2 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v2 <= 0)
  {
    uint64_t v4 = (int32x2_t *)icu::UMemory::operator new(v2, (icu::UMemory *)0x58, (unint64_t)a2);
    uint64_t v5 = (uint64_t *)v4;
    if (!v4)
    {
      *a2 = U_MEMORY_ALLOCATION_ERROR;
      return v5;
    }

    *uint64_t v4 = 0LL;
    if (*(int *)a2 <= 0)
    {
      uint64_t v6 = v4 + 1;
      uhash_init( v4 + 1,  (uint64_t)uhash_hashCaselessUnicodeString,  (uint64_t)uhash_compareCaselessUnicodeString,  0LL,  (int *)a2);
      if (*(int *)a2 <= 0)
      {
        *uint64_t v5 = (uint64_t)v6;
        uhash_setKeyDeleter((uint64_t)(v5 + 1), (uint64_t)uprv_deleteUObject);
        if (*(int *)a2 < 1)
        {
          uhash_setValueComparator(*v5, (uint64_t)sub_180998208);
          return v5;
        }
      }

      if (*v5) {
        uhash_close((_BYTE *)*v5);
      }
    }

    icu::UMemory::operator delete(v5);
  }

  return 0LL;
}

void icu::TimeUnitFormat::copyHash(uint64_t a1, uint64_t **a2, uint64_t *a3, int *a4)
{
  _OWORD v19[8] = *(UChar **)MEMORY[0x1895F89C0];
  if (*a4 <= 0)
  {
    int v18 = -1;
    if (a2)
    {
      while (1)
      {
        uint64_t v7 = uhash_nextElement(*a2, &v18);
        if (!v7) {
          break;
        }
        UErrorCode v9 = *(void **)(v7 + 8);
        signed int v8 = *(UChar ***)(v7 + 16);
        uint64_t v10 = uprv_malloc(0x10uLL);
        void *v10 = (*(uint64_t (**)(void))(*(void *)*v9 + 32LL))(*v9);
        v10[1] = (*(uint64_t (**)(void))(*(void *)v9[1] + 32LL))(v9[1]);
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)v19, v8);
        uint64_t v11 = *a3;
        BOOL v14 = (icu::UnicodeString *)icu::UMemory::operator new(v13, (icu::UMemory *)0x40, v12);
        uint64_t v15 = (uint64_t)v14;
        if (v14) {
          icu::UnicodeString::UnicodeString(v14, v19);
        }
        uhash_put(v11, v15, (uint64_t)v10, a4);
        icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v19);
        if (*a4 >= 1)
        {
          if (*v10) {
            (*(void (**)(void))(*(void *)*v10 + 8LL))(*v10);
          }
          uint64_t v17 = v10[1];
          if (v17) {
            (*(void (**)(uint64_t))(*(void *)v17 + 8LL))(v17);
          }
          uprv_free(v10);
          return;
        }
      }
    }
  }

void icu::TimeUnitFormat::~TimeUnitFormat(icu::TimeUnitFormat *this)
{
  *(void *)this = off_18972BA78;
  for (uint64_t i = 376LL; i != 432; i += 8LL)
  {
    icu::TimeUnitFormat::deleteHash((uint64_t)this, *(uint64_t ***)((char *)this + i));
    *(void *)((char *)this + i) = 0LL;
  }

  icu::MeasureFormat::~MeasureFormat(this);
}

{
  void *v1;
  icu::TimeUnitFormat::~TimeUnitFormat(this);
  icu::UMemory::operator delete(v1);
}

void icu::TimeUnitFormat::deleteHash(uint64_t a1, uint64_t **a2)
{
  int v6 = -1;
  if (a2)
  {
    while (1)
    {
      uint64_t v3 = uhash_nextElement(*a2, &v6);
      if (!v3) {
        break;
      }
      uint64_t v4 = *(void **)(v3 + 8);
      if (*v4) {
        (*(void (**)(void))(*(void *)*v4 + 8LL))(*v4);
      }
      uint64_t v5 = v4[1];
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
      }
      uprv_free(v4);
    }

    if (*a2) {
      uhash_close(*a2);
    }
    icu::UMemory::operator delete(a2);
  }

icu::TimeUnitFormat *icu::TimeUnitFormat::clone@<X0>( icu::TimeUnitFormat *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::TimeUnitFormat *)icu::UMemory::operator new(a3, (icu::UMemory *)0x1B8, a2);
  if (result) {
    return icu::TimeUnitFormat::TimeUnitFormat(result, this);
  }
  return result;
}

uint64_t icu::TimeUnitFormat::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    inited = (icu::TimeUnitFormat *)icu::MeasureFormat::operator=(a1, a2);
    uint64_t v5 = 0LL;
    uint64_t v6 = a1 + 376;
    do
    {
      icu::TimeUnitFormat::deleteHash((uint64_t)inited, *(uint64_t ***)(v6 + v5));
      *(void *)(v6 + v5) = 0LL;
      v5 += 8LL;
    }

    while (v5 != 56);
    uint64_t v7 = 0LL;
    uint64_t v8 = a1 + 376;
    do
    {
      UErrorCode v12 = U_ZERO_ERROR;
      inited = (icu::TimeUnitFormat *)icu::TimeUnitFormat::initHash(inited, &v12);
      UErrorCode v9 = inited;
      *(void *)(v8 + v7) = inited;
      if (v12 <= U_ZERO_ERROR)
      {
        icu::TimeUnitFormat::copyHash((uint64_t)inited, *(uint64_t ***)(a2 + 376 + v7), (uint64_t *)inited, (int *)&v12);
      }

      else
      {
        if (inited)
        {
          uint64_t v10 = *(_BYTE **)inited;
          if (*(void *)v9) {
            uhash_close(v10);
          }
          icu::UMemory::operator delete(v9);
        }

        *(void *)(v8 + v7) = 0LL;
      }

      v7 += 8LL;
    }

    while (v7 != 56);
    *(_DWORD *)(a1 + 432) = *(_DWORD *)(a2 + 432);
  }

  return a1;
}

void icu::TimeUnitFormat::parseObject( icu::TimeUnitFormat *this, const icu::UnicodeString *a2, icu::Formattable *a3, icu::ParsePosition *a4)
{
  uint64_t v56 = *MEMORY[0x1895F89C0];
  memset(v55, 0, sizeof(v55));
  icu::Formattable::Formattable((icu::Formattable *)v55, 0.0);
  uint64_t v6 = 0LL;
  uint64_t v35 = 0LL;
  unsigned int v39 = 0;
  int v7 = *((_DWORD *)a4 + 2);
  unsigned int v36 = 7;
  int v37 = 0;
  int v34 = -1;
  do
  {
    uint64_t v8 = (uint64_t **)*((void *)this + v6 + 47);
    int v41 = -1;
    for (i = v8; ; uint64_t v8 = i)
    {
      uint64_t v9 = uhash_nextElement(*v8, &v41);
      if (!v9) {
        break;
      }
      uint64_t v11 = 0LL;
      uint64_t v12 = *(void *)(v9 + 8);
      uint64_t v38 = *(void *)(v9 + 16);
      char v13 = 1;
      do
      {
        BOOL v14 = *(icu::MessageFormat **)(v12 + 8 * v11);
        char v15 = v13;
        *((_DWORD *)a4 + 2) = v7;
        *((_DWORD *)a4 + 3) = -1;
        __int128 v53 = 0u;
        __int128 v54 = 0u;
        __int128 v51 = 0u;
        __int128 v52 = 0u;
        __int128 v49 = 0u;
        __int128 v50 = 0u;
        *(_OWORD *)unint64_t v48 = 0u;
        icu::Formattable::Formattable((icu::Formattable *)v48);
        (*(void (**)(icu::MessageFormat *, const icu::UnicodeString *, icu::Formattable **, icu::ParsePosition *))(*(void *)v14 + 56LL))( v14,  a2,  v48,  a4);
        if (*((_DWORD *)a4 + 3) == -1 && *((_DWORD *)a4 + 2) != v7)
        {
          memset(v47, 0, sizeof(v47));
          icu::Formattable::Formattable((icu::Formattable *)v47, 0.0);
          if (icu::MessageFormat::getArgTypeCount(v14))
          {
            unsigned int v16 = (UChar ***)v48[1];
            if (icu::Formattable::getType(v48[1]) == 3)
            {
              uint64_t v46 = 0LL;
              __int128 v44 = 0u;
              __int128 v45 = 0u;
              __int128 v43 = 0u;
              unsigned int v42 = (UChar *)off_18971B688;
              LOWORD(v43) = 2;
              int v40 = 0;
              uint64_t v17 = v6;
              uint64_t NumberFormatInternal = icu::MeasureFormat::getNumberFormatInternal(this);
              icu::UnicodeString::operator=(&v42, v16[1]);
              uint64_t v19 = *(void (**)(uint64_t, UChar **, _OWORD *, int *))(*(void *)NumberFormatInternal + 168LL);
              uint64_t v20 = NumberFormatInternal;
              uint64_t v6 = v17;
              v19(v20, &v42, v47, &v40);
              int v21 = v40;
              icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v42);
              if (v21 < 1) {
                goto LABEL_13;
              }
LABEL_18:
              icu::Formattable::~Formattable((icu::Formattable *)v47);
              goto LABEL_19;
            }

            icu::Formattable::operator=((uint64_t)v47, (uint64_t)v16);
          }

void icu::TimeUnitFormat::setup(icu::TimeUnitFormat *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    uint64_t v4 = 0LL;
    uint64_t v5 = (char *)this + 376;
    do
    {
      icu::TimeUnitFormat::deleteHash((uint64_t)this, *(uint64_t ***)&v5[v4]);
      *(void *)&v5[v4] = 0LL;
      v4 += 8LL;
    }

    while (v4 != 56);
  }

  uint64_t v13 = 0LL;
  memset(v12, 0, sizeof(v12));
  icu::UVector::UVector(v12, 0LL, uhash_compareUnicodeString, 6LL, a2);
  PluralRules = (icu::PluralRules *)icu::MeasureFormat::getPluralRules(this);
  uint64_t Keywords = icu::PluralRules::getKeywords(PluralRules, a2);
  uint64_t v8 = Keywords;
  UErrorCode v9 = *a2;
  if (Keywords || v9 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    if (v9 <= U_ZERO_ERROR)
    {
      uint64_t v10 = (*(uint64_t (**)(uint64_t, UErrorCode *))(*(void *)Keywords + 56LL))(Keywords, a2);
      if (v10)
      {
        uint64_t v11 = (void *)v10;
        do
        {
          icu::UVector::addElement((icu::UVector *)v12, v11, a2);
          uint64_t v11 = (void *)(*(uint64_t (**)(uint64_t, UErrorCode *))(*(void *)v8 + 56LL))(v8, a2);
        }

        while (v11);
      }

      icu::TimeUnitFormat::readFromCurrentLocale(this, 0, "units", (uint64_t)v12, (int *)a2);
      icu::TimeUnitFormat::checkConsistency(this, 0, "units", a2);
      icu::TimeUnitFormat::readFromCurrentLocale(this, 1u, "unitsShort", (uint64_t)v12, (int *)a2);
      icu::TimeUnitFormat::checkConsistency(this, 1u, "unitsShort", a2);
    }

    else if (!Keywords)
    {
      goto LABEL_15;
    }

    (*(void (**)(uint64_t))(*(void *)v8 + 8LL))(v8);
  }

  else
  {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
  }

void icu::TimeUnitFormat::initDataMembers(icu::TimeUnitFormat *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    uint64_t v2 = 0LL;
    uint64_t v3 = (char *)this + 376;
    do
    {
      icu::TimeUnitFormat::deleteHash((uint64_t)this, *(uint64_t ***)&v3[v2]);
      *(void *)&v3[v2] = 0LL;
      v2 += 8LL;
    }

    while (v2 != 56);
  }

void icu::TimeUnitFormat::readFromCurrentLocale( icu::MeasureFormat *a1, unsigned int a2, const char *a3, uint64_t a4, int *a5)
{
  if (*a5 <= 0)
  {
    UErrorCode v13 = U_ZERO_ERROR;
    LocaleID = (char *)icu::MeasureFormat::getLocaleID(a1, &v13);
    uint64_t v10 = ures_open("icudt74l-unit", LocaleID, (int *)&v13);
    uint64_t v11 = ures_getByKey(v10, a3, 0LL, (int *)&v13);
    ures_getByKey(v11, "duration", v11, (int *)&v13);
    if (v13 <= U_ZERO_ERROR)
    {
      v12[0] = &off_18972BAE0;
      v12[1] = a1;
      _OWORD v12[2] = a4;
      v12[3] = a2;
      ures_getAllItemsWithFallback(v11, "", (uint64_t)v12, (int *)&v13);
      icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v12);
    }

    if (v11) {
      ures_close(v11);
    }
    if (v10) {
      ures_close(v10);
    }
  }

void icu::TimeUnitFormat::checkConsistency( icu::MeasureFormat *a1, unsigned int a2, const char *a3, UErrorCode *a4)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  if (*(int *)a4 <= 0)
  {
    PluralRules = (icu::PluralRules *)icu::MeasureFormat::getPluralRules(a1);
    uint64_t Keywords = icu::PluralRules::getKeywords(PluralRules, a4);
    UErrorCode v10 = *a4;
    if (!Keywords && v10 <= U_ZERO_ERROR)
    {
      *a4 = U_MEMORY_ALLOCATION_ERROR;
      return;
    }

    uint64_t v18 = Keywords;
    if (v10 <= U_ZERO_ERROR)
    {
LABEL_9:
      uint64_t v11 = v18;
      uint64_t v12 = (icu::TimeUnitFormat *)(*(uint64_t (**)(uint64_t, UErrorCode *))(*(void *)v18 + 56LL))(v18, a4);
      if (!v12)
      {
LABEL_7:
        (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
        return;
      }

      UErrorCode v13 = v12;
      uint64_t v14 = 0LL;
      while (1)
      {
        char v15 = (char *)a1 + 8 * v14;
        inited = (uint64_t *)*((void *)v15 + 47);
        if (!inited)
        {
          inited = icu::TimeUnitFormat::initHash(v12, a4);
          *((void *)v15 + 47) = inited;
        }

        uint64_t v12 = (icu::TimeUnitFormat *)uhash_get(*inited, (uint64_t)v13);
        if (!v12 || !*((void *)v12 + a2))
        {
          LocaleID = (const char *)icu::MeasureFormat::getLocaleID(a1, a4);
          int v21 = 0;
          memset(&v19[1], 0, 48);
          v19[0] = (char *)&v19[1] + 5;
          LODWORD(v19[1]) = 40;
          int v20 = 0;
          icu::CharString::appendInvariantChars((icu::CharString *)v19, v13, a4);
          icu::TimeUnitFormat::searchInLocaleChain( a1,  a2,  a3,  LocaleID,  v14,  (UChar **)v13,  (char *)v19[0],  inited,  (int *)a4);
          if (BYTE4(v19[1])) {
            uprv_free(v19[0]);
          }
        }

        if (++v14 == 7)
        {
          break;
        }
      }
    }

    uint64_t v11 = v18;
    if (!v18) {
      return;
    }
    goto LABEL_7;
  }

void sub_180997B28(icu::ResourceSink *a1)
{
}

void icu::TimeUnitFormat::searchInLocaleChain( icu::MeasureFormat *a1, unsigned int a2, const char *a3, const char *a4, uint64_t a5, UChar **a6, char *a7, uint64_t *a8, int *a9)
{
  UErrorCode v9 = (UErrorCode *)a9;
  uint64_t v66 = *MEMORY[0x1895F89C0];
  if (*a9 > 0) {
    return;
  }
  UErrorCode v57 = U_ZERO_ERROR;
  __int128 v65 = 0u;
  memset(v64, 0, sizeof(v64));
  icu::StringPiece::StringPiece((icu::StringPiece *)&v55, a4);
  *(void *)&v64[0] = (unint64_t)v64 | 0xD;
  DWORD2(v64[0]) = 40;
  WORD6(v64[0]) = 0;
  DWORD2(v65) = 0;
  icu::CharString::append((icu::CharString *)v64, v55, v56, &v57);
  unsigned int v44 = a2;
  uint64_t v46 = a2;
  uint64_t v51 = a5;
  uint64_t v49 = (int)a5;
  do
  {
    __int128 v60 = 0u;
    __int128 v61 = 0u;
    __int128 v59 = 0u;
    __int128 __s = (char *)&v59 + 5;
    LODWORD(v59) = 40;
    uint64_t v62 = 0LL;
    v63[0] = 0LL;
    v63[1] = 0LL;
    icu::CharStringByteSink::CharStringByteSink(v63, (uint64_t)&__s);
    ulocimp_getParent(*(char **)&v64[0], (uint64_t)v63, (int *)&v57);
    icu::CharString::operator=((uint64_t)v64, (uint64_t)&__s);
    icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v63);
    if (BYTE4(v59)) {
      uprv_free(__s);
    }
    uint64_t v14 = ures_open("icudt74l-unit", *(char **)&v64[0], (int *)&v57);
    uint64_t v15 = ures_getByKey(v14, a3, 0LL, (int *)&v57);
    uint64_t v16 = v15;
    uint64_t v17 = 0LL;
    if (v57 <= U_ZERO_ERROR)
    {
      if (v51 >= 7)
      {
        uint64_t v17 = 0LL;
        UErrorCode v57 = U_ILLEGAL_ARGUMENT_ERROR;
      }

      else
      {
        uint64_t v17 = off_18972BB50[v49];
      }
    }

    uint64_t v18 = ures_getByKey(v15, v17, 0LL, (int *)&v57);
    LODWORD(v53) = 0;
    StringByKeyWithFallbacuint64_t k = ures_getStringByKeyWithFallback(v18, a7, (int *)&v53, &v57);
    if (v57 > U_ZERO_ERROR)
    {
      UErrorCode v57 = U_ZERO_ERROR;
      int v21 = 2 * (DWORD2(v65) == 0);
      if (!v18) {
        goto LABEL_12;
      }
LABEL_11:
      ures_close(v18);
      goto LABEL_12;
    }

    uint64_t v22 = StringByKeyWithFallback;
    int v23 = icu::UMemory::operator new((uint64_t *)v57, (icu::UMemory *)0x330, v20);
    if (v23)
    {
      int32_t v24 = (icu::MessageFormat *)v23;
      __int128 v54 = v22;
      icu::UnicodeString::UnicodeString(v63, 1LL, &v54);
      icu::MeasureFormat::getLocale(a1, v9, (icu::Locale *)&__s);
      icu::MessageFormat::MessageFormat(v24, (const icu::UnicodeString *)v63, (const icu::Locale *)&__s, v9);
      icu::Locale::~Locale((icu::Locale *)&__s);
      icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)v63);
      int32_t v26 = (void *)uhash_get(*a8, (uint64_t)a6);
      if (v26) {
        goto LABEL_24;
      }
      __int128 v43 = (int *)v9;
      int32_t v26 = uprv_malloc(0x10uLL);
      void *v26 = 0LL;
      v26[1] = 0LL;
      uint64_t v41 = *a8;
      int32_t v28 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)*a8, (icu::UMemory *)0x40, v27);
      __int128 v29 = v28;
      if (v28) {
        icu::UnicodeString::UnicodeString(v28, a6);
      }
      uint64_t v30 = (uint64_t)v29;
      UErrorCode v9 = (UErrorCode *)v43;
      uhash_put(v41, v30, (uint64_t)v26, v43);
      int v42 = *v43;
      uprv_free(0LL);
      if (v42 <= 0) {
LABEL_24:
      }
        v26[a2] = v24;
      else {
LABEL_20:
      }
        (*(void (**)(icu::MessageFormat *))(*(void *)v24 + 8LL))(v24);
    }

    else if (*(int *)v9 <= 0)
    {
      *UErrorCode v9 = U_MEMORY_ALLOCATION_ERROR;
    }

    int v21 = 1;
    if (v18) {
      goto LABEL_11;
    }
LABEL_12:
    if (v16) {
      ures_close(v16);
    }
    if (v14) {
      ures_close(v14);
    }
  }

  while (!v21);
  if (v21 == 2)
  {
    if (DWORD2(v65) || strcmp(a3, "unitsShort")) {
      goto LABEL_62;
    }
    __int128 v59 = 0u;
    uint64_t v62 = 0LL;
    __int128 v61 = 0u;
    __int128 v60 = 0u;
    __int128 __s = (char *)&v59 + 5;
    LODWORD(v59) = 40;
    icu::CharString::append((icu::CharString *)&__s, a4, -1, v9);
    icu::CharString::append((icu::CharString *)&__s, 95, v9);
    icu::TimeUnitFormat::searchInLocaleChain(a1, a2, "units", __s, v51, a6, a7, a8, v9);
    BOOL v31 = 0;
    if (*(int *)v9 <= 0)
    {
      uint64_t v32 = uhash_get(*a8, (uint64_t)a6);
      BOOL v31 = !v32 || !*(void *)(v32 + 8 * v46);
    }

    if (BYTE4(v59)) {
      uprv_free(__s);
    }
    if (v31)
    {
LABEL_62:
      if (strcmp(a7, "other"))
      {
        icu::TimeUnitFormat::searchInLocaleChain(a1, v44, a3, a4, v51, a6, "other", a8, v9);
        goto LABEL_58;
      }

      uint64_t v53 = 0LL;
      if (v51 > 6)
      {
LABEL_47:
        if (*(int *)v9 <= 0)
        {
          uint64_t v38 = uhash_get(*a8, (uint64_t)a6);
          if (!v38)
          {
            unsigned int v39 = uprv_malloc(0x10uLL);
            if (!v39)
            {
              *UErrorCode v9 = U_MEMORY_ALLOCATION_ERROR;
              uprv_free(0LL);
              goto LABEL_56;
            }

            uint64_t v38 = (uint64_t)v39;
            void *v39 = 0LL;
            v39[1] = 0LL;
            sub_1807C33C4(a8, a6, (uint64_t)v39, (int *)v9);
            uprv_free(0LL);
          }

          if (*(int *)v9 <= 0)
          {
            uint64_t v40 = v53;
            uint64_t v53 = 0LL;
            *(void *)(v38 + 8 * v46) = v40;
          }
        }
      }

      else
      {
        int v34 = off_18972BB18[v49];
        uint64_t v35 = icu::UMemory::operator new((uint64_t *)off_18972BB18, (icu::UMemory *)0x330, v33);
        if (v35)
        {
          unsigned int v36 = (icu::MessageFormat *)v35;
          __int128 v52 = v34;
          icu::UnicodeString::UnicodeString(v63, 1LL, &v52);
          icu::MeasureFormat::getLocale(a1, v9, (icu::Locale *)&__s);
          icu::MessageFormat::MessageFormat(v36, (const icu::UnicodeString *)v63, (const icu::Locale *)&__s, v9);
          sub_1807C9194((uint64_t)&v53, (uint64_t)v36, (int *)v9);
          icu::Locale::~Locale((icu::Locale *)&__s);
          icu::UnicodeString::~UnicodeString(v37, (icu::UnicodeString *)v63);
          goto LABEL_47;
        }

        if (*(int *)v9 <= 0)
        {
          *UErrorCode v9 = U_MEMORY_ALLOCATION_ERROR;
          goto LABEL_58;
        }
      }

char *icu::TimeUnitFormat::getTimeUnitName(unsigned int a1, int *a2)
{
  if (*a2 > 0) {
    return 0LL;
  }
  if (a1 < 7) {
    return off_18972BB50[a1];
  }
  uint64_t result = 0LL;
  *a2 = 1;
  return result;
}

void icu::TimeUnitFormat::setLocale(icu::TimeUnitFormat *this, const char **a2, UErrorCode *a3)
{
  if (icu::MeasureFormat::setMeasureFormatLocale(this, a2, a3)) {
    icu::TimeUnitFormat::setup(this, a3);
  }
}

icu::SharedObject *icu::TimeUnitFormat::setNumberFormat( icu::SharedObject *this, const icu::NumberFormat *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    uint64_t v4 = this;
    unint64_t v5 = (*(uint64_t (**)(const icu::NumberFormat *))(*(void *)a2 + 32LL))(a2);
    return icu::MeasureFormat::adoptNumberFormat(v4, v5, a3);
  }

  return this;
}

uint64_t sub_180998208(void *a1, void *a2)
{
  uint64_t result = (*(uint64_t (**)(void, void))(*(void *)*a1 + 24LL))(*a1, *a2);
  if ((_DWORD)result) {
    return (*(uint64_t (**)(void, void))(*(void *)a1[1] + 24LL))(a1[1], a2[1]);
  }
  return result;
}

void *sub_180998254(void *result, char *a2, icu::ResourceValue *a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v45 = *MEMORY[0x1895F89C0];
  __s1 = a2;
  if (*((_BYTE *)result + 28)) {
    return result;
  }
  int v7 = result;
  *((_BYTE *)result + 28) = 1;
  uint64_t v40 = 0LL;
  memset(v39, 0, sizeof(v39));
  uint64_t result = (*(void *(**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(void *)a3 + 88LL))( v39,  a3,  a5);
  uint64_t result = (void *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v39, 0, (const char **)&__s1, a3);
  if (!(_DWORD)result) {
    return result;
  }
  int v8 = 0;
  while (1)
  {
    UErrorCode v9 = __s1;
    if (!__s1) {
      goto LABEL_42;
    }
    UErrorCode v10 = (icu::TimeUnitFormat *)strcmp(__s1, "year");
    if (!(_DWORD)v10)
    {
      uint64_t v11 = 0LL;
      goto LABEL_20;
    }

    UErrorCode v10 = (icu::TimeUnitFormat *)strcmp(v9, "month");
    if (!(_DWORD)v10)
    {
      uint64_t v11 = 1LL;
      goto LABEL_20;
    }

    UErrorCode v10 = (icu::TimeUnitFormat *)strcmp(v9, "day");
    if (!(_DWORD)v10)
    {
      uint64_t v11 = 2LL;
      goto LABEL_20;
    }

    UErrorCode v10 = (icu::TimeUnitFormat *)strcmp(v9, "hour");
    if (!(_DWORD)v10)
    {
      uint64_t v11 = 4LL;
      goto LABEL_20;
    }

    UErrorCode v10 = (icu::TimeUnitFormat *)strcmp(v9, "minute");
    if (!(_DWORD)v10)
    {
      uint64_t v11 = 5LL;
      goto LABEL_20;
    }

    UErrorCode v10 = (icu::TimeUnitFormat *)strcmp(v9, "second");
    if (!(_DWORD)v10) {
      break;
    }
    UErrorCode v10 = (icu::TimeUnitFormat *)strcmp(v9, "week");
    if (!(_DWORD)v10)
    {
      uint64_t v11 = 3LL;
      goto LABEL_20;
    }

void sub_1809986CC(_BYTE ***a1, _BYTE **a2, int *a3)
{
  if (*a3 <= 0)
  {
    uint64_t v6 = *a1;
    if (*a1)
    {
      if (*v6) {
        uhash_close(*v6);
      }
      icu::UMemory::operator delete(v6);
    }

    *a1 = a2;
    if (!a2) {
      *a3 = 7;
    }
  }

  else if (a2)
  {
    if (*a2) {
      uhash_close(*a2);
    }
    icu::UMemory::operator delete(a2);
  }

void *icu::LowercaseTransliterator::getStaticClassID(icu::LowercaseTransliterator *this)
{
  return &unk_18C535A54;
}

void *sub_180998760()
{
  return &unk_18C535A54;
}

icu::Transliterator *sub_18099876C(icu::Transliterator *a1)
{
  v5[8] = *(UChar **)MEMORY[0x1895F89C0];
  uint64_t v4 = "A";
  icu::UnicodeString::UnicodeString(v5, 1LL, &v4);
  sub_18089E50C(a1, v5, (uint64_t)ucase_toFullLower);
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)v5);
  *(void *)a1 = &off_18972BB98;
  return a1;
}

void sub_18099881C(icu::Transliterator *a1)
{
}

icu::Transliterator *sub_180998830@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  if (result)
  {
    uint64_t result = sub_18089E54C(result, a1);
    *(void *)uint64_t result = &off_18972BB98;
  }

  return result;
}

void *icu::UppercaseTransliterator::getStaticClassID(icu::UppercaseTransliterator *this)
{
  return &unk_18C535A55;
}

void *sub_180998878()
{
  return &unk_18C535A55;
}

icu::Transliterator *sub_180998884(icu::Transliterator *a1)
{
  v5[8] = *(UChar **)MEMORY[0x1895F89C0];
  uint64_t v4 = "A";
  icu::UnicodeString::UnicodeString(v5, 1LL, &v4);
  sub_18089E50C(a1, v5, (uint64_t)ucase_toFullUpper);
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)v5);
  *(void *)a1 = &off_18972BC48;
  return a1;
}

void sub_180998934(icu::Transliterator *a1)
{
}

icu::Transliterator *sub_180998948@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  if (result)
  {
    uint64_t result = sub_18089E54C(result, a1);
    *(void *)uint64_t result = &off_18972BC48;
  }

  return result;
}

void *icu::Transliterator::getStaticClassID(icu::Transliterator *this)
{
  return &unk_18C535A58;
}

icu::Transliterator *icu::Transliterator::Transliterator( icu::Transliterator *this, UChar **a2, icu::UnicodeFilter *a3)
{
  *(void *)this = off_18972BCF8;
  unint64_t v5 = (char *)this + 8;
  uint64_t v6 = icu::UnicodeString::UnicodeString((icu::Transliterator *)((char *)this + 8), a2);
  *((void *)this + 9) = a3;
  *((_DWORD *)this + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
  __int16 v11 = 0;
  icu::UnicodeString::doAppend((uint64_t)v6, (uint64_t)&v11, 0, 1LL);
  unsigned int v7 = *((unsigned __int16 *)this + 8);
  else {
    unsigned int v8 = v7 >> 5;
  }
  int v9 = v8 - 1;
  if ((v7 & 1) != 0 && v8 == 1)
  {
    icu::UnicodeString::unBogus((uint64_t)v5);
  }

  else if (v8 > v9)
  {
    if (v9 > 1023)
    {
      *((_WORD *)this + 8) = v7 | 0xFFE0;
      *((_DWORD *)this + 5) = v9;
    }

    else
    {
      *((_WORD *)this + 8) = *((_WORD *)this + 8) & 0x1F | (32 * v9);
    }
  }

  return this;
}

void icu::Transliterator::~Transliterator(icu::Transliterator *this)
{
  *(void *)this = off_18972BCF8;
  uint64_t v2 = *((void *)this + 9);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::UnicodeString::~UnicodeString((icu::Transliterator *)((char *)this + 8));
  icu::UObject::~UObject(this);
}

icu::Transliterator *icu::Transliterator::Transliterator(icu::Transliterator *this, UChar **a2)
{
  *(void *)this = off_18972BCF8;
  uint64_t v4 = (char *)this + 8;
  unint64_t v5 = icu::UnicodeString::UnicodeString((icu::Transliterator *)((char *)this + 8), a2 + 1);
  *((void *)this + 9) = 0LL;
  *((_DWORD *)this + 2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = *((_DWORD *)a2 + 20);
  __int16 v11 = 0;
  icu::UnicodeString::doAppend((uint64_t)v5, (uint64_t)&v11, 0, 1LL);
  unsigned int v6 = *((unsigned __int16 *)this + 8);
  else {
    unsigned int v7 = v6 >> 5;
  }
  int v8 = v7 - 1;
  if ((v6 & 1) != 0 && v7 == 1)
  {
    icu::UnicodeString::unBogus((uint64_t)v4);
  }

  else if (v7 > v8)
  {
    if (v8 > 1023)
    {
      *((_WORD *)this + 8) = v6 | 0xFFE0;
      *((_DWORD *)this + 5) = v8;
    }

    else
    {
      *((_WORD *)this + 8) = *((_WORD *)this + 8) & 0x1F | (32 * v8);
    }
  }

  int v9 = a2[9];
  if (v9) {
    *((void *)this + 9) = (*(uint64_t (**)(UChar *))(*(void *)v9 + 24LL))(v9);
  }
  return this;
}

uint64_t icu::Transliterator::clone(icu::Transliterator *this)
{
  return 0LL;
}

uint64_t icu::Transliterator::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    icu::UnicodeString::operator=((UChar **)(a1 + 8), (UChar **)(a2 + 8));
    icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)(a1 + 8));
    *(_DWORD *)(a1 + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = *(_DWORD *)(a2 + 80);
    uint64_t v4 = *(void *)(a2 + 72);
    if (v4) {
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
    }
    else {
      uint64_t v5 = 0LL;
    }
    uint64_t v6 = *(void *)(a1 + 72);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
    *(void *)(a1 + 72) = v5;
  }

  return a1;
}

uint64_t icu::Transliterator::adoptFilter(icu::Transliterator *this, icu::UnicodeFilter *a2)
{
  uint64_t result = *((void *)this + 9);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  *((void *)this + 9) = a2;
  return result;
}

uint64_t icu::Transliterator::transliterate(icu::Transliterator *this, icu::Replaceable *a2, int a3, int a4)
{
  uint64_t result = 0xFFFFFFFFLL;
  if ((a3 & 0x80000000) == 0 && a4 >= a3)
  {
    if ((*(int (**)(icu::Replaceable *))(*(void *)a2 + 64LL))(a2) >= a4)
    {
      v9[0] = a3;
      v9[1] = a4;
      void v9[2] = a3;
      unsigned int v10 = a4;
      (*(void (**)(icu::Transliterator *, icu::Replaceable *, _DWORD *, void, uint64_t))(*(void *)this + 96LL))( this,  a2,  v9,  0LL,  1LL);
      return v10;
    }

    else
    {
      return 0xFFFFFFFFLL;
    }
  }

  return result;
}

uint64_t icu::Transliterator::transliterate(icu::Transliterator *this, icu::Replaceable *a2)
{
  uint64_t v4 = (*(uint64_t (**)(icu::Replaceable *))(*(void *)a2 + 64LL))(a2);
  return (*(uint64_t (**)(icu::Transliterator *, icu::Replaceable *, void, uint64_t))(*(void *)this + 32LL))( this,  a2,  0LL,  v4);
}

uint64_t icu::Transliterator::_transliterate(uint64_t result, uint64_t a2, int *a3, uint64_t a4, int *a5)
{
  if (*a5 <= 0)
  {
    uint64_t v9 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64LL))(a2);
    if (*a3 < 0
      || (int v10 = a3[2], v10 < *a3)
      || (uint64_t v11 = a3[3], (int)v11 < v10)
      || (int v12 = a3[1], v12 < (int)v11)
      || v12 > (int)result)
    {
      *a5 = 1;
    }

    else
    {
      if (a4)
      {
        (*(void (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)a2 + 32LL))( a2,  v11,  a3[3],  a4);
        else {
          int v13 = *(unsigned __int16 *)(a4 + 8) >> 5;
        }
        LODWORD(v1icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = a3[3] + v13;
        a3[3] = v11;
        else {
          int v14 = *(unsigned __int16 *)(a4 + 8) >> 5;
        }
        a3[1] += v14;
      }

      if ((int)v11 < 1) {
        return (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t))(*(void *)v9 + 96LL))( v9,  a2,  a3,  1LL,  1LL);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 72LL))(a2);
      if ((result & 0xFC00) != 0xD800) {
        return (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t))(*(void *)v9 + 96LL))( v9,  a2,  a3,  1LL,  1LL);
      }
    }
  }

  return result;
}

void *icu::Transliterator::transliterate(uint64_t a1, uint64_t a2, int *a3, unsigned int a4, int *a5)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  memset(v11, 0, sizeof(v11));
  icu::UnicodeString::UnicodeString((uint64_t)v11, a4);
  icu::Transliterator::_transliterate(a1, a2, a3, (uint64_t)v11, a5);
  return icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v11);
}

uint64_t icu::Transliterator::transliterate(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  return icu::Transliterator::_transliterate(a1, a2, a3, 0LL, a4);
}

uint64_t icu::Transliterator::finishTransliteration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64LL))(a2);
  if ((*a3 & 0x80000000) == 0)
  {
    int v7 = a3[2];
    if (v7 >= *a3)
    {
      int v8 = a3[3];
      if (v8 >= v7)
      {
        int v9 = a3[1];
        if (v9 >= v8 && v9 <= (int)result) {
          return (*(uint64_t (**)(uint64_t, uint64_t, int *, void, uint64_t))(*(void *)a1 + 96LL))( a1,  a2,  a3,  0LL,  1LL);
        }
      }
    }
  }

  return result;
}

void icu::Transliterator::filteredTransliterate(void *a1, uint64_t a2, _DWORD *a3, uint64_t a4, int a5)
{
  int v5 = a5;
  int v6 = a4;
  uint64_t v40 = *MEMORY[0x1895F89C0];
  uint64_t v10 = a1[9];
  if (!a5 && !v10)
  {
    (*(void (**)(void *, uint64_t, _DWORD *, uint64_t))(*a1 + 80LL))(a1, a2, a3, a4);
    return;
  }

  uint64_t v11 = a3[2];
  int v12 = a3[3];
  int v32 = a4;
  do
  {
    if (v10)
    {
      while ((int)v11 < v12)
      {
        uint64_t v13 = a1[9];
        uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 80LL))(a2, v11);
        int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 56LL))(v13, v14);
        uint64_t v11 = a3[2];
        if (v15) {
          break;
        }
        else {
          int v16 = 2;
        }
        uint64_t v11 = (v11 + v16);
        a3[2] = v11;
      }

      a3[3] = v11;
      if ((int)v11 < v12)
      {
        do
        {
          uint64_t v17 = a1[9];
          uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 80LL))(a2, v11);
          int v19 = v18 < 0x10000 ? 1 : 2;
          uint64_t v11 = (a3[3] + v19);
          a3[3] = v11;
        }

        while ((int)v11 < v12);
        uint64_t v11 = a3[2];
      }
    }

    uint64_t v20 = a3[3];
    if ((_DWORD)v20 == (_DWORD)v11) {
      break;
    }
    else {
      char v21 = 0;
    }
    if (v5 && v21)
    {
      int v34 = v20 - v11;
      char v35 = v21;
      int v36 = v12;
      uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64LL))(a2);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 40LL))(a2, v11, v20, v22);
      unsigned int v23 = a3[2];
      else {
        int v24 = 2;
      }
      uint64_t v25 = v24 + v23;
      int v33 = v22;
      if ((int)v25 <= (int)v20)
      {
        int v37 = 0;
        int v28 = 0;
        do
        {
          v28 += v24;
          a3[3] = v25;
          (*(void (**)(void *, uint64_t, _DWORD *, uint64_t))(*a1 + 80LL))(a1, a2, a3, 1LL);
          int v29 = a3[3];
          int v30 = v29 - v25;
          if (a3[2] == v29)
          {
            LODWORD(v22) = v29 - v25 + v22 + v28;
            LODWORD(v2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = v30 + v20;
            v37 += v30;
            uint64_t v11 = a3[3];
            uint64_t v25 = v11;
            int v28 = 0;
          }

          else
          {
            uint64_t v38 = off_18971B688;
            __int16 v39 = 2;
            (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 32LL))(a2, v11);
            icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v38);
            (*(void (**)(uint64_t, void, void, uint64_t))(*(void *)a2 + 40LL))( a2,  (v22 - v25 + v11),  (v22 - v25 + v11 + v28),  v11);
            a3[2] = v11;
            a3[3] = v25;
            a3[1] -= v30;
          }

          else {
            int v24 = 2;
          }
          uint64_t v25 = (v24 + v25);
        }

        while ((int)v25 <= (int)v20);
      }

      else
      {
        int v37 = 0;
      }

      int v27 = v37;
      uint64_t v38 = off_18971B688;
      __int16 v39 = 2;
      (*(void (**)(uint64_t, void, void, void (***)(icu::UnicodeString *__hidden)))(*(void *)a2 + 32LL))( a2,  (v37 + v33),  (v34 + v37 + v33),  &v38);
      icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v38);
      uint64_t v26 = v11;
      int v5 = a5;
      int v6 = v32;
      char v21 = v35;
      int v12 = v36;
    }

    else
    {
      (*(void (**)(void *, uint64_t, _DWORD *, void))(*a1 + 80LL))(a1, a2, a3, v21);
      uint64_t v11 = a3[2];
      uint64_t v26 = a3[3];
      int v27 = v26 - v20;
      if (v6 || (_DWORD)v11 == (_DWORD)v26) {
        goto LABEL_43;
      }
    }

    a3[2] = v26;
    uint64_t v11 = v26;
LABEL_43:
    v12 += v27;
    uint64_t v10 = a1[9];
  }

  while (v10 && !v21);
  a3[3] = v12;
}

uint64_t icu::Transliterator::filteredTransliterate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 96LL))( a1,  a2,  a3,  a4,  0LL);
}

uint64_t icu::Transliterator::setMaximumContextLength(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = a2;
  return this;
}

uint64_t icu::Transliterator::getID(icu::Transliterator *this)
{
  return (uint64_t)this + 8;
}

const icu::Locale *icu::Transliterator::getDisplayName( icu::Transliterator *this, const icu::UnicodeString *a2, icu::UnicodeString *a3)
{
  Default = icu::Locale::getDefault(this);
  return icu::Transliterator::getDisplayName(this, (char **)Default, a2, v6);
}

const icu::Locale *icu::Transliterator::getDisplayName( icu::Transliterator *this, char **a2, const icu::Locale *a3, icu::UnicodeString *a4)
{
  uint64_t v78 = *MEMORY[0x1895F89C0];
  UErrorCode v36 = U_ZERO_ERROR;
  memset(v35, 0, sizeof(v35));
  icu::ResourceBundle::ResourceBundle((icu::ResourceBundle *)v35, "icudt74l-translit", a2, &v36);
  unsigned int v7 = *((unsigned __int16 *)a3 + 4);
  if ((v7 & 1) != 0)
  {
    icu::UnicodeString::unBogus((uint64_t)a3);
  }

  else
  {
    if ((v7 & 0x8000u) == 0) {
      unsigned int v8 = v7 >> 5;
    }
    else {
      unsigned int v8 = *((_DWORD *)a3 + 3);
    }
    if (v8) {
      *((_WORD *)a3 + 4) &= 0x1Fu;
    }
  }

  __int128 v74 = 0u;
  uint64_t v77 = 0LL;
  __int128 v76 = 0u;
  __int128 v75 = 0u;
  LOWORD(v74) = 2;
  __int128 v69 = 0u;
  uint64_t v72 = 0LL;
  int v73 = (UChar *)off_18971B688;
  __int128 v71 = 0u;
  __int128 v70 = 0u;
  LOWORD(v69) = 2;
  __int128 v64 = 0u;
  uint64_t v67 = 0LL;
  uint64_t v68 = (UChar *)off_18971B688;
  __int128 v66 = 0u;
  __int128 v65 = 0u;
  int v63 = off_18971B688;
  LOWORD(v64) = 2;
  char v34 = 0;
  sub_18099FF54((uint64_t)this, (icu::UnicodeString *)&v73, (uint64_t)&v68, (uint64_t)&v63, &v34);
  LODWORD(v9) = (unsigned __int16)v69 >> 5;
  if ((v69 & 0x8000u) == 0LL) {
    unint64_t v9 = v9;
  }
  else {
    unint64_t v9 = DWORD1(v69);
  }
  if ((int)v9 >= 1)
  {
    int v10 = (unsigned __int16)v64 >> 5;
    if ((v64 & 0x8000u) != 0LL) {
      int v10 = DWORD1(v64);
    }
    if (v10 >= 1)
    {
      v46[0] = 47;
      icu::UnicodeString::doReplace((uint64_t)&v63, 0LL, 0LL, (uint64_t)v46, 0, 1LL);
    }

    __int128 v62 = 0u;
    __int128 v61 = 0u;
    __int128 v60 = 0u;
    __int128 v59 = 0u;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v59, &v73);
    v46[0] = 45;
    uint64_t v11 = icu::UnicodeString::doAppend((uint64_t)&v59, (uint64_t)v46, 0, 1LL);
    if ((v69 & 0x8000u) == 0LL) {
      uint64_t v12 = (unsigned __int16)v69 >> 5;
    }
    else {
      uint64_t v12 = DWORD1(v69);
    }
    uint64_t v13 = icu::UnicodeString::doAppend(v11, (const icu::UnicodeString *)&v68, 0, v12);
    if ((v64 & 0x8000u) == 0LL) {
      uint64_t v14 = (unsigned __int16)v64 >> 5;
    }
    else {
      uint64_t v14 = DWORD1(v64);
    }
    icu::UnicodeString::doAppend(v13, (const icu::UnicodeString *)&v63, 0, v14);
    if ((BYTE8(v59) & 0x11) != 0)
    {
      int v15 = 0LL;
    }

    else if ((BYTE8(v59) & 2) != 0)
    {
      int v15 = (_WORD *)((unint64_t)&v59 | 0xA);
    }

    else
    {
      int v15 = (_WORD *)*((void *)&v60 + 1);
    }

    if ((SWORD4(v59) & 0x8000u) == 0) {
      int v16 = WORD4(v59) >> 5;
    }
    else {
      int v16 = HIDWORD(v59);
    }
    if (uprv_isInvariantUString(v15, v16))
    {
      memset(v58, 0, sizeof(v58));
      __int128 v57 = 0u;
      __int128 v56 = 0u;
      __int128 v55 = 0u;
      __int128 v54 = 0u;
      __int128 v53 = 0u;
      __int128 v52 = 0u;
      __int128 v51 = 0u;
      __int128 v50 = 0u;
      __int128 v49 = 0u;
      strcpy((char *)v48, "%Translit%%");
      *(_OWORD *)&v48[3] = 0u;
      icu::UnicodeString::extract((uint64_t)&v59, 0, 189LL, (char *)&v48[2] + 3, 189);
      memset(v47, 0, 64);
      icu::ResourceBundle::getStringEx((icu::ResourceBundle *)v35, (const char *)v48, &v36, (uint64_t)v47);
      if (v36 <= U_ZERO_ERROR)
      {
        int v23 = LOWORD(v47[1]) >> 5;
        if (SLOWORD(v47[1]) < 0) {
          int v23 = HIDWORD(v47[1]);
        }
        if (v23)
        {
          a3 = icu::UnicodeString::operator=((UChar **)a3, v47);
LABEL_68:
          icu::UnicodeString::~UnicodeString((void *)v18, (icu::UnicodeString *)v47);
          goto LABEL_35;
        }
      }

      UErrorCode v36 = U_ZERO_ERROR;
      icu::ResourceBundle::getStringEx((icu::ResourceBundle *)v35, "TransliteratorNamePattern", &v36, (uint64_t)v46);
      icu::UnicodeString::operator=((icu::UnicodeString *)v47, (icu::UnicodeString *)v46);
      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v46);
      unint64_t v18 = v36;
      if (v36 <= U_ZERO_ERROR)
      {
        LODWORD(v18) = LOWORD(v47[1]) >> 5;
        unint64_t v18 = SLOWORD(v47[1]) >= 0 ? v18 : HIDWORD(v47[1]);
        if ((_DWORD)v18)
        {
          bzero(v46, 0x330uLL);
          icu::MessageFormat::MessageFormat( (icu::MessageFormat *)v46,  (const icu::UnicodeString *)v47,  (const icu::Locale *)a2,  &v36);
          uint64_t v24 = 0LL;
          memset(v45, 0, sizeof(v45));
          memset(v44, 0, sizeof(v44));
          memset(v43, 0, sizeof(v43));
          do
          {
            icu::Formattable::Formattable((icu::Formattable *)&v43[v24]);
            v24 += 112LL;
          }

          while (v24 != 336);
          icu::Formattable::setLong((icu::Formattable *)v43, 2);
          icu::Formattable::setString((icu::Formattable *)v44, &v73);
          icu::Formattable::setString((icu::Formattable *)v45, &v68);
          uint64_t v25 = 0LL;
          __int128 v39 = 0u;
          uint64_t v42 = 0LL;
          __int128 v41 = 0u;
          __int128 v40 = 0u;
          uint64_t v38 = (UChar *)off_18971B688;
          LOWORD(v39) = 2;
          do
          {
            UErrorCode v36 = U_ZERO_ERROR;
            strcpy((char *)v48, "%Translit%");
            icu::UnicodeString::operator=(&v38, *(UChar ***)&v44[v25 + 8]);
            uint64_t v26 = (char *)v40;
            if ((v39 & 2) != 0) {
              uint64_t v26 = (char *)&v39 + 2;
            }
            if ((v39 & 0x11) != 0) {
              int v27 = 0LL;
            }
            else {
              int v27 = v26;
            }
            if ((v39 & 0x8000u) == 0LL) {
              int v28 = (unsigned __int16)v39 >> 5;
            }
            else {
              int v28 = DWORD1(v39);
            }
            if (uprv_isInvariantUString(v27, v28))
            {
              icu::UnicodeString::extract((uint64_t)&v38, 0, 189LL, (char *)&v48[2] + 2, 189);
              icu::ResourceBundle::getStringEx((icu::ResourceBundle *)v35, (const char *)v48, &v36, (uint64_t)v37);
              icu::UnicodeString::operator=((icu::UnicodeString *)v47, (icu::UnicodeString *)v37);
              icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v37);
              if (v36 <= U_ZERO_ERROR)
              {
                icu::Formattable::Formattable((icu::Formattable *)v37, (const icu::UnicodeString *)v47);
                icu::Formattable::operator=((uint64_t)&v43[v25 + 112], (uint64_t)v37);
                icu::Formattable::~Formattable((icu::Formattable *)v37);
              }
            }

            v25 += 112LL;
          }

          while (v25 != 224);
          UErrorCode v36 = U_ZERO_ERROR;
          v37[2] = 0LL;
          v37[0] = off_189723AC8;
          v37[1] = 0xFFFFFFFFLL;
          icu::MessageFormat::format( (icu::MessageFormat *)v46,  (const icu::Formattable *)v43,  3u,  a3,  (icu::FieldPosition *)v37,  &v36);
          UErrorCode v30 = v36;
          if (v36 <= U_ZERO_ERROR)
          {
            if ((v64 & 0x8000u) == 0LL) {
              uint64_t v31 = (unsigned __int16)v64 >> 5;
            }
            else {
              uint64_t v31 = DWORD1(v64);
            }
            icu::UnicodeString::doAppend((uint64_t)a3, (const icu::UnicodeString *)&v63, 0, v31);
          }

          icu::FieldPosition::~FieldPosition((icu::FieldPosition *)v37);
          icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)&v38);
          for (uint64_t i = 224LL; i != -112; i -= 112LL)
            icu::Formattable::~Formattable((icu::Formattable *)&v43[i]);
          icu::MessageFormat::~MessageFormat((icu::MessageFormat *)v46);
          if (v30 <= U_ZERO_ERROR) {
            goto LABEL_68;
          }
        }
      }

      icu::UnicodeString::~UnicodeString((void *)v18, (icu::UnicodeString *)v47);
    }

    icu::UnicodeString::operator=((UChar **)a3, (UChar **)&v59);
LABEL_35:
    icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v59);
  }

  icu::UnicodeString::~UnicodeString((void *)v9, (icu::UnicodeString *)&v63);
  icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v68);
  icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)&v73);
  icu::ResourceBundle::~ResourceBundle((icu::ResourceBundle *)v35);
  return a3;
}

uint64_t icu::Transliterator::getFilter(icu::Transliterator *this)
{
  return *((void *)this + 9);
}

uint64_t icu::Transliterator::orphanFilter(icu::Transliterator *this)
{
  uint64_t v1 = *((void *)this + 9);
  *((void *)this + 9) = 0LL;
  return v1;
}

uint64_t icu::Transliterator::createInverse(icu::Transliterator *this, UErrorCode *a2)
{
  return icu::Transliterator::createInstance((uint64_t)this + 8, 1, &v3, a2);
}

uint64_t icu::Transliterator::createInstance(uint64_t a1, int a2, UParseError *a3, UErrorCode *a4)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  if (*(int *)a4 <= 0)
  {
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    uint64_t v30 = 0LL;
    __int128 v29 = 0u;
    uint64_t v26 = (UChar *)off_18971B688;
    LOWORD(v27) = 2;
    uint64_t v24 = 0LL;
    memset(v23, 0, sizeof(v23));
    icu::UVector::UVector((icu::UVector *)v23, a4);
    uint64_t v4 = 0LL;
    if (*(int *)a4 > 0)
    {
LABEL_11:
      icu::UVector::~UVector((icu::UVector *)v23);
      icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v26);
      return v4;
    }

    uint64_t v22 = 0LL;
    if (!sub_18099FA08(a1, a2, (uint64_t)&v26, (icu::UVector *)v23, &v22))
    {
      *a4 = U_INVALID_ID;
      uint64_t v11 = v22;
      if (v22) {
        goto LABEL_9;
      }
      goto LABEL_10;
    }

    unint64_t v9 = v22;
    sub_18099FD3C((icu::UVector *)v23, a4);
    if (*(int *)a4 > 0)
    {
LABEL_6:
      if (v9)
      {
        uint64_t v11 = v9;
LABEL_9:
        icu::UnicodeSet::~UnicodeSet(v11);
        icu::UMemory::operator delete(v12);
      }

uint64_t icu::Transliterator::createInstance(uint64_t a1, int a2, UErrorCode *a3)
{
  return icu::Transliterator::createInstance(a1, a2, &v4, a3);
}

UChar **icu::Transliterator::createBasicInstance(UChar **this, UChar **a2, const icu::UnicodeString *a3)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  memset(&v19, 0, sizeof(v19));
  UErrorCode v18 = U_ZERO_ERROR;
  *(void *)uint64_t v17 = 0LL;
  umtx_lock((icu::UMutex *)&unk_18C535A68);
  uint64_t v6 = qword_18C535A60;
  if (qword_18C535A60) {
    goto LABEL_4;
  }
  if (icu::Transliterator::initializeRegistry(&v18, v5))
  {
    uint64_t v6 = qword_18C535A60;
LABEL_4:
    unsigned int v7 = (UChar **)sub_18099C4CC(v6, this, (uint64_t **)v17, &v18);
    goto LABEL_5;
  }

  unsigned int v7 = 0LL;
LABEL_5:
  umtx_unlock((std::mutex **)&unk_18C535A68);
  if (v18 > U_ZERO_ERROR)
  {
LABEL_6:
    if (v7) {
      (*((void (**)(UChar **))*v7 + 1))(v7);
    }
    if (*(void *)v17)
    {
      unsigned int v8 = sub_18099B86C(*(void **)v17);
      icu::UMemory::operator delete(v8);
    }

    return 0LL;
  }

  while (*(void *)v17)
  {
    if (!sub_18099BD20(*(uint64_t *)v17))
    {
      unsigned int v7 = (UChar **)sub_18099B870(*(uint64_t *)v17, &v19, &v18);
      if (*(void *)v17)
      {
        uint64_t v13 = sub_18099B86C(*(void **)v17);
        icu::UMemory::operator delete(v13);
      }

      *(void *)uint64_t v17 = 0LL;
      break;
    }

    uint64_t v21 = 0LL;
    memset(v20, 0, sizeof(v20));
    sub_18095E9A0(v20, &v18);
    sub_18099BD30(*(uint64_t *)v17, (uint64_t)v20, (uint64_t)&v19, &v18);
    if (*(void *)v17)
    {
      unint64_t v10 = sub_18099B86C(*(void **)v17);
      icu::UMemory::operator delete(v10);
    }

    *(void *)uint64_t v17 = 0LL;
    umtx_lock((icu::UMutex *)&unk_18C535A68);
    uint64_t v12 = qword_18C535A60;
    if (qword_18C535A60) {
      goto LABEL_19;
    }
    if (icu::Transliterator::initializeRegistry(&v18, v11))
    {
      uint64_t v12 = qword_18C535A60;
LABEL_19:
      unsigned int v7 = (UChar **)sub_18099C9D0(v12, this, v20, (uint64_t **)v17, &v18);
    }

    umtx_unlock((std::mutex **)&unk_18C535A68);
    sub_18095EA84(v20);
    if (v18 >= U_ILLEGAL_ARGUMENT_ERROR) {
      goto LABEL_6;
    }
  }

  if (a2 && v7)
  {
    icu::UnicodeString::operator=(v7 + 1, a2);
    LOWORD(v20[0]) = 0;
    icu::UnicodeString::doAppend((uint64_t)(v7 + 1), (uint64_t)v20, 0, 1LL);
    unsigned int v14 = *((unsigned __int16 *)v7 + 8);
    else {
      unsigned int v15 = v14 >> 5;
    }
    int v16 = v15 - 1;
    if ((v14 & 1) != 0 && v15 == 1)
    {
      icu::UnicodeString::unBogus((uint64_t)(v7 + 1));
    }

    else if (v15 > v16)
    {
      if (v16 > 1023)
      {
        *((_WORD *)v7 + 8) = v14 | 0xFFE0;
        *((_DWORD *)v7 + 5) = v16;
      }

      else
      {
        *((_WORD *)v7 + 8) = (_WORD)v7[2] & 0x1F | (32 * v16);
      }
    }
  }

  return v7;
}

uint64_t icu::Transliterator::initializeRegistry(UErrorCode *this, UErrorCode *a2)
{
  uint64_t v91 = *MEMORY[0x1895F89C0];
  if (qword_18C535A60) {
    return 1LL;
  }
  UParseError v4 = icu::UMemory::operator new(0LL, (icu::UMemory *)0x138, (unint64_t)a2);
  if (!v4)
  {
LABEL_6:
    uint64_t v2 = 0LL;
    qword_18C535A60 = 0LL;
    return v2;
  }

  qword_18C535A60 = sub_18099C478((int)v4, this);
  if (*(int *)this >= 1)
  {
    int v5 = (void *)sub_18099C4C8();
    icu::UMemory::operator delete(v5);
    goto LABEL_6;
  }

  uint64_t v7 = ures_open("icudt74l-translit", 0LL, (int *)this);
  uint64_t v8 = ures_getByKey(v7, "RuleBasedTransliteratorIDs", 0LL, (int *)this);
  uint64_t v9 = v8;
  if (*(int *)this <= 0)
  {
    uint64_t v73 = v7;
    int Size = ures_getSize(v8);
    if (Size >= 1)
    {
      int v11 = Size;
      signed int v12 = 0;
      NextResource = 0LL;
      uint64_t v14 = 0LL;
      while (1)
      {
        unsigned int v15 = ures_getByIndex(v9, v12, v14, (int *)this);
        uint64_t v14 = (uint64_t)v15;
        uint64_t Key = (const char *)ures_getKey((uint64_t)v15);
        if (Key)
        {
          uint64_t v17 = Key;
          if (!strstr(Key, "-t-")) {
            break;
          }
        }

uint64_t *icu::Transliterator::createFromRules( UChar **a1, uint64_t a2, int a3, UParseError *a4, UErrorCode *a5)
{
  uint64_t v86 = *MEMORY[0x1895F89C0];
  uint64_t v85 = 0LL;
  __int128 v83 = 0u;
  __int128 v84 = 0u;
  __int128 v81 = 0u;
  __int128 v82 = 0u;
  __int128 v79 = 0u;
  __int128 v80 = 0u;
  __int128 v77 = 0u;
  __int128 v78 = 0u;
  __int128 v75 = 0u;
  __int128 v76 = 0u;
  __int128 v73 = 0u;
  __int128 v74 = 0u;
  __int128 v71 = 0u;
  __int128 v72 = 0u;
  __int128 v69 = 0u;
  __int128 v70 = 0u;
  __int128 v67 = 0u;
  __int128 v68 = 0u;
  __int128 v65 = 0u;
  __int128 v66 = 0u;
  __int128 v63 = 0u;
  __int128 v64 = 0u;
  __int128 v61 = 0u;
  __int128 v62 = 0u;
  *(_OWORD *)unint64_t v59 = 0u;
  __int128 v60 = 0u;
  memset(v58, 0, sizeof(v58));
  __int128 v56 = 0u;
  __int128 v57 = 0u;
  __int128 v55 = 0u;
  sub_18095E9A0(&v55, a5);
  sub_18095EA88((uint64_t)&v55, a2, a3, (uint64_t)a4, a5);
  uint64_t Instance = 0LL;
  if (DWORD2(v58[0]) == 1)
  {
    if ((_DWORD)v56) {
      goto LABEL_10;
    }
    if (v59[1])
    {
      __int128 v51 = 0u;
      uint64_t v54 = 0LL;
      __int128 v53 = 0u;
      __int128 v52 = 0u;
      __int128 v50 = off_18971B688;
      LOWORD(v5icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 2;
      icu::UnicodeSet::toPattern(v59[1], (icu::UnicodeString *)&v50, 0LL);
      icu::UnicodeString::UnicodeString((uint64_t)v46, 59);
      icu::operator+((uint64_t)&v50, (uint64_t)v46, (uint64_t)v48);
      uint64_t v33 = icu::UVector::elementAt((icu::UVector *)v58, 0);
      icu::operator+((uint64_t)v48, v33, (uint64_t)v49);
      uint64_t Instance = (uint64_t *)icu::Transliterator::createInstance((uint64_t)v49, 0, a4, a5);
      icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)v49);
      icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)v48);
      icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)v46);
      icu::UnicodeString::~UnicodeString(v37, (icu::UnicodeString *)&v50);
      if (!Instance) {
        goto LABEL_57;
      }
    }

    else
    {
      uint64_t v39 = icu::UVector::elementAt((icu::UVector *)v58, 0);
      uint64_t Instance = (uint64_t *)icu::Transliterator::createInstance(v39, 0, a4, a5);
      if (!Instance)
      {
LABEL_57:
        if (!Instance && *(int *)a5 <= 0)
        {
          uint64_t Instance = 0LL;
          *a5 = U_MEMORY_ALLOCATION_ERROR;
        }

        goto LABEL_2;
      }
    }

    icu::UnicodeString::operator=((UChar **)Instance + 1, a1);
    LOWORD(v5icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0;
    icu::UnicodeString::doAppend((uint64_t)(Instance + 1), (uint64_t)&v50, 0, 1LL);
    unsigned int v40 = *((unsigned __int16 *)Instance + 8);
    else {
      unsigned int v41 = v40 >> 5;
    }
    int v44 = v41 - 1;
    if ((v40 & 1) != 0 && v41 == 1)
    {
      icu::UnicodeString::unBogus((uint64_t)(Instance + 1));
    }

    else if (v41 > v44)
    {
      if (v44 > 1023)
      {
        *((_WORD *)Instance + 8) = v40 | 0xFFE0;
        *((_DWORD *)Instance + 5) = v44;
      }

      else
      {
        *((_WORD *)Instance + 8) = Instance[2] & 0x1F | (32 * v44);
      }
    }

    goto LABEL_2;
  }

  if (!DWORD2(v58[0]))
  {
    if (!(_DWORD)v56)
    {
      unint64_t v32 = icu::UMemory::operator new((uint64_t *)v56, (icu::UMemory *)0x58, v10);
      uint64_t Instance = v32;
      if (v32)
      {
        sub_18091B298(v32);
        goto LABEL_2;
      }

      goto LABEL_57;
    }

    if ((_DWORD)v56 == 1)
    {
      uint64_t Instance = icu::UMemory::operator new((uint64_t *)1, (icu::UMemory *)0x68, v10);
      if (Instance)
      {
        uint64_t v13 = icu::UVector::orphanElementAt((icu::UVector *)((char *)&v55 + 8), 0);
        sub_18095C8BC(Instance, a1, v13, 1LL);
        goto LABEL_2;
      }

      goto LABEL_57;
    }
  }

icu::UnicodeString *icu::Transliterator::toRules(icu::Transliterator *this, icu::UnicodeString *a2, int a3)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (a3)
  {
    unsigned int v5 = *((unsigned __int16 *)a2 + 4);
    if ((v5 & 1) != 0)
    {
      icu::UnicodeString::unBogus((uint64_t)a2);
    }

    else
    {
      if ((v5 & 0x8000u) == 0) {
        unsigned int v6 = v5 >> 5;
      }
      else {
        unsigned int v6 = *((_DWORD *)a2 + 3);
      }
      if (v6) {
        *((_WORD *)a2 + 4) &= 0x1Fu;
      }
    }

    memset(v18, 0, sizeof(v18));
    uint64_t v8 = (UChar **)(*(uint64_t (**)(icu::Transliterator *))(*(void *)this + 104LL))(this);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v18, v8);
    LODWORD(v9) = WORD4(v18[0]) >> 5;
    if ((SWORD4(v18[0]) & 0x8000u) == 0) {
      unint64_t v9 = v9;
    }
    else {
      unint64_t v9 = HIDWORD(v18[0]);
    }
    if ((int)v9 >= 1)
    {
      int v10 = 0;
      do
      {
        int v11 = (icu::UnicodeString *)icu::UnicodeString::char32At((uint64_t *)v9, (icu::UnicodeString *)v18, v10);
        unsigned int v12 = v11;
        if (v12 < 0x10000) {
          int v13 = 1;
        }
        else {
          int v13 = 2;
        }
        v10 += v13;
        LODWORD(v9) = WORD4(v18[0]) >> 5;
        if ((SWORD4(v18[0]) & 0x8000u) == 0) {
          unint64_t v9 = v9;
        }
        else {
          unint64_t v9 = HIDWORD(v18[0]);
        }
      }

      while (v10 < (int)v9);
    }

    icu::UnicodeString::~UnicodeString((void *)v9, (icu::UnicodeString *)v18);
  }

  else
  {
    uint64_t v7 = (UChar **)(*(uint64_t (**)(icu::Transliterator *))(*(void *)this + 104LL))(this);
    icu::UnicodeString::operator=((UChar **)a2, v7);
  }

  signed int v17 = ":";
  icu::UnicodeString::UnicodeString(v18, 1LL, &v17);
  if ((SWORD4(v18[0]) & 0x8000u) == 0) {
    uint64_t v14 = WORD4(v18[0]) >> 5;
  }
  else {
    uint64_t v14 = HIDWORD(v18[0]);
  }
  icu::UnicodeString::doReplace(a2, 0LL, 0LL, (const icu::UnicodeString *)v18, 0, v14);
  icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v18);
  LOWORD(v18[0]) = 59;
  icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)v18, 0, 1LL);
  return a2;
}

uint64_t icu::Transliterator::countElements(icu::Transliterator *this)
{
  if (this
  {
    return (*(uint64_t (**)(void *))(*(void *)v1 + 136LL))(v1);
  }

  else
  {
    return 0LL;
  }

icu::Transliterator *icu::Transliterator::getElement(icu::Transliterator *this, uint64_t a2, UErrorCode *a3)
{
  if (this)
  {
    uint64_t v7 = v6;
    if (v6)
    {
      int v8 = (*(uint64_t (**)(void *))(*(void *)v6 + 136LL))(v6);
      if ((a2 & 0x80000000) != 0) {
        goto LABEL_11;
      }
      goto LABEL_8;
    }
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  int v8 = 1;
  if ((a2 & 0x80000000) != 0)
  {
LABEL_11:
    *a3 = U_INDEX_OUTOFBOUNDS_ERROR;
    return this;
  }

icu::UVector **icu::Transliterator::getSourceSet(const icu::UnicodeSet **this, icu::UVector **a2)
{
  UParseError v4 = this[9];
  if (v4)
  {
    if (*(void (***)(icu::UnicodeSet *__hidden))v4 == off_18971B4D0)
    {
      icu::UnicodeSet::retainAll(a2, v4);
    }

    else
    {
      unsigned int v5 = (icu::UnicodeSet *)icu::UMemory::operator new(*(uint64_t **)v4, (icu::UMemory *)0xC8, (unint64_t)v4);
      if (v5)
      {
        unsigned int v6 = v5;
        double v7 = icu::UnicodeSet::UnicodeSet(v5);
        (*(void (**)(uint64_t, const icu::UnicodeSet *, double))(*((void *)this[9] + 1) + 40LL))( (uint64_t)this[9] + 8,  v6,  v7);
        icu::UnicodeSet::retainAll(a2, v6);
        unint64_t v9 = icu::UnicodeSet::~UnicodeSet(v8, v6);
        icu::UMemory::operator delete(v9);
      }
    }
  }

  return a2;
}

icu::UnicodeSet *icu::Transliterator::handleGetSourceSet(icu::Transliterator *this, icu::UnicodeSet *a2)
{
  return icu::UnicodeSet::clear(a2);
}

icu::UnicodeSet *icu::Transliterator::getTargetSet(icu::Transliterator *this, icu::UnicodeSet *a2)
{
  return icu::UnicodeSet::clear(a2);
}

void icu::Transliterator::registerFactory(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v9 = 0;
  uint64_t v8 = qword_18C535A60;
  if (qword_18C535A60) {
    goto LABEL_4;
  }
  if (icu::Transliterator::initializeRegistry((UErrorCode *)&v9, v6))
  {
    uint64_t v8 = qword_18C535A60;
LABEL_4:
    int v10 = 0;
    sub_18099CE4C(v8, a1, a2, a3, 1, &v10, v7);
  }

  umtx_unlock((std::mutex **)&unk_18C535A68);
}

uint64_t *icu::Transliterator::_registerFactory(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = 0;
  return sub_18099CE4C(qword_18C535A60, a1, a2, a3, 1, &v4, qword_18C535000);
}

void icu::Transliterator::_registerSpecialInverse( icu::Transliterator *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3)
{
  int v3 = 0;
  sub_1809A03B8((uint64_t)this, (uint64_t)a2, (int)a3, &v3);
}

void icu::Transliterator::registerInstance(icu::Transliterator *this, icu::Transliterator *a2)
{
  int v6 = 0;
  uint64_t v5 = qword_18C535A60;
  if (qword_18C535A60) {
    goto LABEL_4;
  }
  if (icu::Transliterator::initializeRegistry((UErrorCode *)&v6, v3))
  {
    uint64_t v5 = qword_18C535A60;
LABEL_4:
    int v7 = 0;
    sub_18099CC58(v5, (unint64_t)this, 1, &v7, v4);
  }

  umtx_unlock((std::mutex **)&unk_18C535A68);
}

uint64_t *icu::Transliterator::_registerInstance(icu::Transliterator *this, icu::Transliterator *a2)
{
  int v3 = 0;
  return sub_18099CC58(qword_18C535A60, (unint64_t)this, 1, &v3, qword_18C535000);
}

void icu::Transliterator::registerAlias( icu::Transliterator *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3)
{
  v8[0] = U_ZERO_ERROR;
  uint64_t v7 = qword_18C535A60;
  if (qword_18C535A60) {
    goto LABEL_4;
  }
  if (icu::Transliterator::initializeRegistry(v8, v5))
  {
    uint64_t v7 = qword_18C535A60;
LABEL_4:
    v8[1] = U_ZERO_ERROR;
    sub_18099CFF0(v7, (unint64_t)this, (uint64_t)a2, 0, 1, v6);
  }

  umtx_unlock((std::mutex **)&unk_18C535A68);
}

uint64_t *icu::Transliterator::_registerAlias( icu::Transliterator *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3)
{
  return sub_18099CFF0(qword_18C535A60, (unint64_t)this, (uint64_t)a2, 0, 1, qword_18C535000);
}

void icu::Transliterator::unregister(icu::Transliterator *this, const icu::UnicodeString *a2)
{
  int v5 = 0;
  uint64_t v4 = qword_18C535A60;
  if (qword_18C535A60) {
    goto LABEL_4;
  }
  if (icu::Transliterator::initializeRegistry((UErrorCode *)&v5, v3))
  {
    uint64_t v4 = qword_18C535A60;
LABEL_4:
    sub_18099D0D4(v4, (uint64_t)this);
  }

  umtx_unlock((std::mutex **)&unk_18C535A68);
}

uint64_t icu::Transliterator::countAvailableIDs(icu::Transliterator *this)
{
  int v5 = 0;
  uint64_t v2 = qword_18C535A60;
  if (!qword_18C535A60)
  {
    if (!icu::Transliterator::initializeRegistry((UErrorCode *)&v5, v1))
    {
      uint64_t v3 = 0LL;
      goto LABEL_5;
    }

    uint64_t v2 = qword_18C535A60;
  }

  uint64_t v3 = sub_18099D318(v2);
LABEL_5:
  umtx_unlock((std::mutex **)&unk_18C535A68);
  return v3;
}

uint64_t *icu::Transliterator::getAvailableID(icu::Transliterator *this)
{
  int v1 = (int)this;
  umtx_lock((icu::UMutex *)&unk_18C535A68);
  int v6 = 0;
  uint64_t v3 = qword_18C535A60;
  if (!qword_18C535A60)
  {
    if (!icu::Transliterator::initializeRegistry((UErrorCode *)&v6, v2))
    {
      uint64_t v4 = 0LL;
      goto LABEL_5;
    }

    uint64_t v3 = qword_18C535A60;
  }

  uint64_t v4 = sub_18099D320(v3, v1);
LABEL_5:
  umtx_unlock((std::mutex **)&unk_18C535A68);
  return v4;
}

uint64_t *icu::Transliterator::getAvailableIDs(UErrorCode *this, UErrorCode *a2)
{
  if (*(int *)this <= 0)
  {
    umtx_lock((icu::UMutex *)&unk_18C535A68);
    uint64_t v6 = qword_18C535A60;
    if (!qword_18C535A60)
    {
      if (!icu::Transliterator::initializeRegistry(this, v4))
      {
        umtx_unlock((std::mutex **)&unk_18C535A68);
        goto LABEL_9;
      }

      uint64_t v6 = qword_18C535A60;
    }

    uint64_t v2 = sub_18099D404(v6, (unint64_t)v4, v5);
    umtx_unlock((std::mutex **)&unk_18C535A68);
    if (v2) {
      return v2;
    }
LABEL_9:
    uint64_t v2 = 0LL;
    *this = U_INTERNAL_TRANSLITERATOR_ERROR;
    return v2;
  }

  return 0LL;
}

uint64_t icu::Transliterator::countAvailableSources(icu::Transliterator *this)
{
  int v5 = 0;
  uint64_t v2 = qword_18C535A60;
  if (!qword_18C535A60)
  {
    if (!icu::Transliterator::initializeRegistry((UErrorCode *)&v5, v1))
    {
      uint64_t v3 = 0LL;
      goto LABEL_5;
    }

    uint64_t v2 = qword_18C535A60;
  }

  uint64_t v3 = sub_18099D460(v2);
LABEL_5:
  umtx_unlock((std::mutex **)&unk_18C535A68);
  return v3;
}

uint64_t icu::Transliterator::_countAvailableSources(icu::Transliterator *this)
{
  return sub_18099D460(qword_18C535A60);
}

UChar **icu::Transliterator::getAvailableSource( icu::Transliterator *this, UChar **a2, icu::UnicodeString *a3)
{
  int v4 = (int)this;
  umtx_lock((icu::UMutex *)&unk_18C535A68);
  int v8 = 0;
  uint64_t v6 = qword_18C535A60;
  if (qword_18C535A60) {
    goto LABEL_4;
  }
  if (icu::Transliterator::initializeRegistry((UErrorCode *)&v8, v5))
  {
    uint64_t v6 = qword_18C535A60;
LABEL_4:
    sub_18099D468(v6, v4, a2);
  }

  umtx_unlock((std::mutex **)&unk_18C535A68);
  return a2;
}

UChar **icu::Transliterator::_getAvailableSource( icu::Transliterator *this, UChar **a2, icu::UnicodeString *a3)
{
  return sub_18099D468(qword_18C535A60, (int)this, a2);
}

uint64_t *icu::Transliterator::countAvailableTargets(icu::Transliterator *this, const icu::UnicodeString *a2)
{
  int v7 = 0;
  uint64_t v4 = qword_18C535A60;
  if (!qword_18C535A60)
  {
    if (!icu::Transliterator::initializeRegistry((UErrorCode *)&v7, v3))
    {
      int v5 = 0LL;
      goto LABEL_5;
    }

    uint64_t v4 = qword_18C535A60;
  }

  int v5 = sub_18099D50C(v4, (uint64_t)this);
LABEL_5:
  umtx_unlock((std::mutex **)&unk_18C535A68);
  return v5;
}

uint64_t *icu::Transliterator::_countAvailableTargets( icu::Transliterator *this, const icu::UnicodeString *a2)
{
  return sub_18099D50C(qword_18C535A60, (uint64_t)this);
}

const icu::UnicodeString *icu::Transliterator::getAvailableTarget( icu::Transliterator *this, uint64_t a2, const icu::UnicodeString *a3, icu::UnicodeString *a4)
{
  int v6 = (int)this;
  umtx_lock((icu::UMutex *)&unk_18C535A68);
  int v10 = 0;
  uint64_t v8 = qword_18C535A60;
  if (qword_18C535A60) {
    goto LABEL_4;
  }
  if (icu::Transliterator::initializeRegistry((UErrorCode *)&v10, v7))
  {
    uint64_t v8 = qword_18C535A60;
LABEL_4:
    sub_18099D534(v8, v6, a2, (uint64_t)a3);
  }

  umtx_unlock((std::mutex **)&unk_18C535A68);
  return a3;
}

uint64_t icu::Transliterator::_getAvailableTarget( icu::Transliterator *this, uint64_t a2, const icu::UnicodeString *a3, icu::UnicodeString *a4)
{
  return sub_18099D534(qword_18C535A60, (int)this, a2, (uint64_t)a3);
}

uint64_t icu::Transliterator::countAvailableVariants( icu::Transliterator *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3)
{
  int v9 = 0;
  uint64_t v6 = qword_18C535A60;
  if (!qword_18C535A60)
  {
    if (!icu::Transliterator::initializeRegistry((UErrorCode *)&v9, v5))
    {
      uint64_t v7 = 0LL;
      goto LABEL_5;
    }

    uint64_t v6 = qword_18C535A60;
  }

  uint64_t v7 = sub_18099D5EC(v6, (uint64_t)this, (uint64_t)a2);
LABEL_5:
  umtx_unlock((std::mutex **)&unk_18C535A68);
  return v7;
}

uint64_t icu::Transliterator::_countAvailableVariants( icu::Transliterator *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3)
{
  return sub_18099D5EC(qword_18C535A60, (uint64_t)this, (uint64_t)a2);
}

const icu::UnicodeString *icu::Transliterator::getAvailableVariant( icu::Transliterator *this, uint64_t a2, const icu::UnicodeString *a3, const icu::UnicodeString *a4, icu::UnicodeString *a5)
{
  int v8 = (int)this;
  umtx_lock((icu::UMutex *)&unk_18C535A68);
  int v12 = 0;
  uint64_t v10 = qword_18C535A60;
  if (qword_18C535A60) {
    goto LABEL_4;
  }
  if (icu::Transliterator::initializeRegistry((UErrorCode *)&v12, v9))
  {
    uint64_t v10 = qword_18C535A60;
LABEL_4:
    sub_18099D644(v10, v8, a2, (uint64_t)a3, (uint64_t)a4);
  }

  umtx_unlock((std::mutex **)&unk_18C535A68);
  return a4;
}

uint64_t icu::Transliterator::_getAvailableVariant( icu::Transliterator *this, uint64_t a2, const icu::UnicodeString *a3, const icu::UnicodeString *a4, icu::UnicodeString *a5)
{
  return sub_18099D644(qword_18C535A60, (int)this, a2, (uint64_t)a3, (uint64_t)a4);
}

uint64_t sub_18099B798()
{
  if (qword_18C535A60)
  {
    unsigned int v0 = (void *)sub_18099C4C8();
    icu::UMemory::operator delete(v0);
    qword_18C535A60 = 0LL;
  }

  return 1LL;
}

void *sub_18099B7D0(void *a1, UChar **a2, UChar **a3, uint64_t a4, uint64_t a5)
{
  a1[17] = a4;
  a1[18] = a5;
  a1[19] = 0x100000000LL;
  return a1;
}

void *sub_18099B828(void *a1)
{
  uint64_t v2 = a1[17];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 9));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 1));
  return a1;
}

icu::CompoundTransliterator *sub_18099B870(uint64_t a1, UParseError *a2, UErrorCode *a3)
{
  uint64_t v57 = *MEMORY[0x1895F89C0];
  int v8 = *(_DWORD *)(a1 + 156);
  if (v8)
  {
    if (v8 != 1)
    {
      if (v8 == 2) {
        abort();
      }
      return 0LL;
    }

    int v14 = *(_DWORD *)(*(void *)(a1 + 136) + 8LL);
    __int128 v55 = 0u;
    __int128 v56 = 0u;
    __int128 v53 = 0u;
    __int128 v54 = 0u;
    icu::UnicodeString::UnicodeString((uint64_t)&v53, 0xFFFF);
    LOWORD(v48) = -1;
    icu::UnicodeString::doAppend((uint64_t)&v53, (uint64_t)&v48, 0, 1LL);
    if ((SWORD4(v53) & 0x8000u) == 0) {
      int32_t v15 = WORD4(v53) >> 5;
    }
    else {
      int32_t v15 = HIDWORD(v53);
    }
    if (*(__int16 *)(a1 + 80) < 0)
    {
      int32_t v16 = *(_DWORD *)(a1 + 84);
      if ((BYTE8(v53) & 1) != 0) {
        goto LABEL_45;
      }
    }

    else
    {
      int32_t v16 = *(unsigned __int16 *)(a1 + 80) >> 5;
      if ((BYTE8(v53) & 1) != 0) {
        goto LABEL_45;
      }
    }

    if (v15 >= 1)
    {
      if ((BYTE8(v53) & 2) != 0) {
        unint64_t v17 = (unint64_t)&v53 | 0xA;
      }
      else {
        unint64_t v17 = *((void *)&v54 + 1);
      }
      uint64_t v18 = a1 + 72;
      int v19 = 0;
      while (1)
      {
        int v20 = icu::UnicodeString::indexOf(v18, v17, 0, v15, v19, v16);
        if (v20 < 0) {
          break;
        }
        if (*(__int16 *)(a1 + 80) < 0)
        {
          int v21 = *(_DWORD *)(a1 + 84);
          char v22 = BYTE8(v53);
          if ((SWORD4(v53) & 0x8000u) == 0) {
            int32_t v15 = WORD4(v53) >> 5;
          }
          else {
            int32_t v15 = HIDWORD(v53);
          }
          if (v21 <= v20) {
            int v19 = *(_DWORD *)(a1 + 84);
          }
          else {
            int v19 = v20 + 1;
          }
          if ((BYTE8(v53) & 1) != 0) {
            break;
          }
        }

        else
        {
          int v21 = *(unsigned __int16 *)(a1 + 80) >> 5;
          char v22 = BYTE8(v53);
          if ((SWORD4(v53) & 0x8000u) == 0) {
            int32_t v15 = WORD4(v53) >> 5;
          }
          else {
            int32_t v15 = HIDWORD(v53);
          }
          else {
            int v19 = v20 + 1;
          }
          if ((BYTE8(v53) & 1) != 0) {
            break;
          }
        }

        if (v15 < 1) {
          break;
        }
        int32_t v16 = v21 - v19;
        if ((v22 & 2) != 0) {
          unint64_t v17 = (unint64_t)&v53 | 0xA;
        }
        else {
          unint64_t v17 = *((void *)&v54 + 1);
        }
        uint64_t v18 = a1 + 72;
      }
    }

BOOL sub_18099BD20(uint64_t a1)
{
  return *(_DWORD *)(a1 + 156) == 2;
}

double sub_18099BD30(uint64_t a1, uint64_t a2, uint64_t a3, UErrorCode *a4)
{
  return result;
}

uint64_t sub_18099BD5C(uint64_t a1, UChar **a2)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  uint64_t v4 = (UChar **)(a1 + 8);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 8), a2);
  *(void *)(a1 + 20icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = off_18971B688;
  *(void *)(a1 + 72) = off_18971B688;
  *(_WORD *)(a1 + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
  *(void *)(a1 + 136) = off_18971B688;
  *(_WORD *)(a1 + 144) = 2;
  *(_WORD *)(a1 + 208) = 2;
  *(void *)(a1 + 272) = 0LL;
  UErrorCode v16 = U_ZERO_ERROR;
  __int128 v24 = 0u;
  memset(v23, 0, sizeof(v23));
  icu::Locale::Locale((icu::Locale *)v23, "", 0LL, 0LL, 0LL);
  icu::LocaleUtility::initLocaleFromName((icu::LocaleUtility *)a2, (const icu::UnicodeString *)v23, v5);
  if (!BYTE8(v24))
  {
    int v13 = (icu::ResourceBundle *)icu::UMemory::operator new(0LL, (icu::UMemory *)0x18, v6);
    if (!v13)
    {
      *(void *)(a1 + 272) = 0LL;
      goto LABEL_19;
    }

    int v14 = icu::ResourceBundle::ResourceBundle(v13, "icudt74l-translit", (char **)v23, &v16);
    *(void *)(a1 + 272) = v14;
    if (v16 > U_ZERO_ERROR || v16 == U_USING_DEFAULT_WARNING)
    {
      (*(void (**)(icu::ResourceBundle *))(*(void *)v14 + 8LL))(v14);
      *(void *)(a1 + 272) = 0LL;
    }
  }

  UErrorCode v16 = U_ZERO_ERROR;
  int v22 = 0;
  __int128 v21 = 0u;
  __int128 v20 = 0u;
  int32_t value = -1;
  v17[0] = (UChar *)((char *)&v17[1] + 5);
  LODWORD(v17[1]) = 40;
  WORD2(v17[1]) = 0;
  LODWORD(v18) = 0;
  appended = icu::CharString::appendInvariantChars((icu::CharString *)v17, (const icu::UnicodeString *)a2, &v16);
  int Code = uscript_getCode(*(char **)appended, &value, 10, (int *)&v16);
  if (BYTE4(v17[1])) {
    uprv_free(v17[0]);
  }
  if (Code >= 1 && value != -1)
  {
    uint64_t Name = uscript_getName(value);
    icu::UnicodeString::UnicodeString(v17, Name, 0xFFFFFFFFLL, 0LL);
    icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 200), (icu::UnicodeString *)v17);
    icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v17);
  }

  if (*(void *)(a1 + 272))
  {
    memset(&v17[1], 0, 48);
    uint64_t v18 = 0LL;
    v17[0] = (UChar *)off_18971B688;
    LOWORD(v17[1]) = 2;
    icu::LocaleUtility::initNameFromLocale((icu::LocaleUtility *)v23, (const icu::Locale *)v17, v8);
    int v12 = (void *)LOWORD(v17[1]);
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v17);
    goto LABEL_18;
  }

  if (*(__int16 *)(a1 + 208) < 0)
  {
    if (!*(_DWORD *)(a1 + 212)) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }

  if (*(unsigned __int16 *)(a1 + 208) >> 5) {
LABEL_17:
  }
    icu::UnicodeString::operator=(v4, (UChar **)(a1 + 200));
LABEL_18:
  sub_18099BFF4(a1);
LABEL_19:
  icu::Locale::~Locale((icu::Locale *)v23);
  return a1;
}

uint64_t sub_18099BFF4(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = (UChar **)(result + 72);
  uint64_t v3 = (UChar **)(result + 8);
  unsigned int v4 = *(unsigned __int16 *)(result + 80);
  if ((v4 & 1) != 0)
  {
    if ((*(_WORD *)(result + 16) & 1) != 0) {
      return result;
    }
LABEL_14:
    icu::UnicodeString::operator=(v2, v3);
    *(_BYTE *)(v1 + 264) = *(void *)(v1 + 272) != 0LL;
    return sub_18099C0FC(v1);
  }

  if ((v4 & 0x8000) != 0) {
    int v5 = *(_DWORD *)(result + 84);
  }
  else {
    int v5 = v4 >> 5;
  }
  unsigned int v6 = *(unsigned __int16 *)(result + 16);
  if ((v6 & 0x8000u) == 0) {
    unsigned int v7 = v6 >> 5;
  }
  else {
    unsigned int v7 = *(_DWORD *)(result + 20);
  }
  if ((v6 & 1) != 0) {
    goto LABEL_14;
  }
  if (v5 != v7) {
    goto LABEL_14;
  }
  double result = icu::UnicodeString::doEquals((icu::UnicodeString *)(result + 72), (const icu::UnicodeString *)v3, v5);
  if (!(_DWORD)result) {
    goto LABEL_14;
  }
  return result;
}

void *sub_18099C0A8(void *a1)
{
  uint64_t v2 = a1[34];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 25));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 17));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 9));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 1));
  return a1;
}

uint64_t sub_18099C0FC(uint64_t result)
{
  uint64_t v1 = result;
  *(_BYTE *)(result + 265) = 0;
  if (!*(_BYTE *)(result + 264))
  {
    unsigned int v4 = *(unsigned __int16 *)(result + 144);
    if ((v4 & 1) != 0) {
      return icu::UnicodeString::unBogus(result + 136);
    }
    if ((v4 & 0x8000) != 0)
    {
      if (!*(_DWORD *)(result + 148)) {
        return result;
      }
    }

    else if (!(v4 >> 5))
    {
      return result;
    }

    *(_WORD *)(result + 144) &= 0x1Fu;
    return result;
  }

  icu::UnicodeString::operator=((UChar **)(result + 136), (UChar **)(result + 72));
  unsigned int v2 = *(unsigned __int16 *)(v1 + 144);
  if ((v2 & 0x8000) != 0) {
    int32_t v3 = *(_DWORD *)(v1 + 148);
  }
  else {
    int32_t v3 = v2 >> 5;
  }
  double result = icu::UnicodeString::doLastIndexOf(v1 + 136, 0x5Fu, 0, v3);
  unsigned int v5 = *(unsigned __int16 *)(v1 + 144);
  else {
    unsigned int v6 = v5 >> 5;
  }
  if (v6 > result)
  {
    if (result > 0x3FF)
    {
      *(_WORD *)(v1 + 144) = v5 | 0xFFE0;
      *(_DWORD *)(v1 + 148) = result;
    }

    else
    {
      *(_WORD *)(v1 + 144) = *(_WORD *)(v1 + 144) & 0x1F | (32 * result);
    }
  }

  *(_BYTE *)(v1 + 265) = 1;
  return result;
}

void *sub_18099C1F8(void *a1)
{
  unsigned int v2 = (void *)*(unsigned int *)a1;
  switch((_DWORD)v2)
  {
    case 3:
      int32_t v3 = (icu::UVector *)a1[11];
      if (v3) {
LABEL_9:
      }
        (*(void (**)(icu::UVector *))(*(void *)v3 + 8LL))(v3);
      break;
    case 4:
      uint64_t v6 = a1[11];
      if (v6)
      {
        unsigned int v7 = (void *)sub_18095CE80(v6);
        icu::UMemory::operator delete(v7);
      }

      break;
    case 5:
      while (1)
      {
        int32_t v3 = (icu::UVector *)a1[11];
        if (!v3) {
          break;
        }
        if (!*((_DWORD *)v3 + 2)) {
          goto LABEL_9;
        }
        uint64_t v4 = icu::UVector::orphanElementAt(v3, 0);
        if (v4)
        {
          unsigned int v5 = (void *)sub_18095CE80(v4);
          icu::UMemory::operator delete(v5);
        }
      }

      break;
  }

  int v8 = (icu::UnicodeSet *)a1[10];
  if (v8)
  {
    uint64_t v9 = icu::UnicodeSet::~UnicodeSet(v2, v8);
    icu::UMemory::operator delete(v9);
  }

  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 1));
  return a1;
}

uint64_t sub_18099C29C(uint64_t a1, UErrorCode *a2)
{
  *(void *)(a1 + 8) = 0LL;
  if (*(int *)a2 <= 0
    && (uint64_t v4 = a1 + 16,
        uhash_init( (int32x2_t *)(a1 + 16),  (uint64_t)uhash_hashCaselessUnicodeString,  (uint64_t)uhash_compareCaselessUnicodeString,  0LL,  (int *)a2),  *(int *)a2 < 1))
  {
    *(void *)(a1 + 8) = v4;
    uhash_setKeyDeleter(a1 + 16, (uint64_t)uprv_deleteUObject);
    int v9 = *a2;
    *(void *)(a1 + 96) = 0LL;
    if (v9 <= 0)
    {
      uhash_initSize( (int32x2_t *)(a1 + 104),  (uint64_t)uhash_hashCaselessUnicodeString,  (uint64_t)uhash_compareCaselessUnicodeString,  0LL,  134,  (int *)a2);
      if (*(int *)a2 <= 0)
      {
        *(void *)(a1 + 96) = a1 + 104;
        uhash_setKeyDeleter(a1 + 104, (uint64_t)uprv_deleteUObject);
      }
    }
  }

  else
  {
    *(void *)(a1 + 96) = 0LL;
  }

  icu::UVector::UVector((icu::UVector *)(a1 + 184), 0xBu, a2);
  *(void *)(a1 + 224) = 0LL;
  if (*(int *)a2 <= 0)
  {
    uhash_initSize( (int32x2_t *)(a1 + 232),  (uint64_t)uhash_hashCaselessUnicodeString,  (uint64_t)uhash_compareCaselessUnicodeString,  0LL,  493,  (int *)a2);
    if (*(int *)a2 <= 0)
    {
      *(void *)(a1 + 224) = a1 + 232;
      uhash_setKeyDeleter(a1 + 232, (uint64_t)uprv_deleteUObject);
    }
  }

  uhash_setValueDeleter(*(void *)(a1 + 8), (uint64_t)sub_18099C45C);
  icu::UVector::setDeleter((icu::UVector *)(a1 + 184), (void (*)(void *))uprv_deleteUObject);
  icu::UVector::setComparer(a1 + 184, (uint64_t)uhash_compareCaselessUnicodeString);
  unsigned int v7 = icu::UMemory::operator new(v6, (icu::UMemory *)0x40, v5);
  if (v7)
  {
    *unsigned int v7 = (uint64_t)off_18971B688;
    *((_WORD *)v7 + 4) = 2;
    icu::UVector::adoptElement((icu::UVector *)(a1 + 184), v7, a2);
  }

  uhash_setValueDeleter(*(void *)(a1 + 96), (uint64_t)uhash_deleteHashtable);
  return a1;
}

void sub_18099C45C(void *a1)
{
  if (a1)
  {
    uint64_t v1 = sub_18099C1F8(a1);
    icu::UMemory::operator delete(v1);
  }

void *sub_18099C47C(void *a1)
{
  unsigned int v2 = (_BYTE *)a1[28];
  if (v2) {
    uhash_close(v2);
  }
  icu::UVector::~UVector((icu::UVector *)(a1 + 23));
  int32_t v3 = (_BYTE *)a1[12];
  if (v3) {
    uhash_close(v3);
  }
  uint64_t v4 = (_BYTE *)a1[1];
  if (v4) {
    uhash_close(v4);
  }
  return a1;
}

uint64_t *sub_18099C4CC(uint64_t a1, UChar **a2, uint64_t **a3, UErrorCode *a4)
{
  double result = (uint64_t *)sub_18099C520(a1, (uint64_t)a2);
  if (result) {
    return sub_18099C618((uint64_t)result, a2, (unsigned int *)result, a3, a4);
  }
  return result;
}

uint64_t sub_18099C520(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  __int128 v20 = 0u;
  uint64_t v23 = 0LL;
  __int128 v22 = 0u;
  __int128 v21 = 0u;
  int v19 = (UChar *)off_18971B688;
  LOWORD(v2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  uint64_t v18 = 0LL;
  __int128 v17 = 0u;
  uint64_t v13 = 0LL;
  int v14 = (UChar *)off_18971B688;
  LOWORD(v15) = 2;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  int v9 = off_18971B688;
  LOWORD(v1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
  char v8 = 0;
  sub_18099FF54(a2, (icu::UnicodeString *)&v19, (uint64_t)&v14, (uint64_t)&v9, &v8);
  uint64_t v3 = sub_18099E214(a1, &v19, &v14, (uint64_t)&v9);
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)&v9);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)&v14);
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v19);
  return v3;
}

uint64_t *sub_18099C618(uint64_t a1, UChar **a2, unsigned int *a3, uint64_t **a4, UErrorCode *a5)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  unint64_t v5 = (uint64_t *)*a3;
  switch((int)v5)
  {
    case 0:
    case 1:
      uint64_t v36 = 0LL;
      memset(v35, 0, sizeof(v35));
      sub_18095E9A0(v35, a5);
      memset(v38, 0, sizeof(v38));
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v38, (UChar **)a3 + 1);
      __int128 v12 = icu::UMemory::operator new(v11, (icu::UMemory *)0xA0, v10);
      uint64_t v13 = v12;
      if (v12)
      {
        BOOL v14 = *a3 == 1;
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v12 + 1), a2);
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v13 + 9), (UChar **)v38);
        v13[17] = 0LL;
        v13[18] = 0LL;
        uint64_t v15 = 2LL;
        *((_DWORD *)v13 + 38) = v14;
        *((_DWORD *)v13 + 39) = 2;
      }

      else
      {
        uint64_t v15 = 7LL;
        *a5 = U_MEMORY_ALLOCATION_ERROR;
      }

      *a4 = v13;
      icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)v38);
      sub_18095EA84(v35);
      return 0LL;
    case 2:
      double result = icu::UMemory::operator new(v5, (icu::UMemory *)0xA0, (unint64_t)a2);
      if (!result) {
        goto LABEL_20;
      }
      __int128 v17 = result;
      uint64_t v18 = (UChar **)(a3 + 2);
      unsigned int v19 = a3[18];
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)(result + 1), a2);
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v17 + 9), v18);
      double result = 0LL;
      v17[17] = 0LL;
      v17[18] = 0LL;
      *((_DWORD *)v17 + 38) = v19;
      *((_DWORD *)v17 + 39) = 2;
      *a4 = v17;
      return result;
    case 3:
      double result = (uint64_t *)(*(uint64_t (**)(void))(**((void **)a3 + 11) + 24LL))(*((void *)a3 + 11));
      if (!result) {
        goto LABEL_21;
      }
      return result;
    case 4:
      double result = icu::UMemory::operator new(v5, (icu::UMemory *)0x68, (unint64_t)a2);
      if (!result) {
        goto LABEL_21;
      }
      return (uint64_t *)sub_18095C858((int)result, (int)a2, *((void *)a3 + 11), 0LL);
    case 5:
      double result = icu::UMemory::operator new(v5, (icu::UMemory *)0x28, (unint64_t)a2);
      if (!result) {
        goto LABEL_21;
      }
      __int128 v20 = (icu::UVector *)result;
      icu::UVector::UVector(result, uprv_deleteUObject, 0LL, *(unsigned int *)(*((void *)a3 + 11) + 8LL), a5);
      signed int v24 = 0;
      break;
    case 6:
      double result = icu::UMemory::operator new(v5, (icu::UMemory *)0xA0, (unint64_t)a2);
      if (result)
      {
        __int128 v22 = result;
        uint64_t v23 = *((void *)a3 + 10);
        result[1] = (uint64_t)off_18971B688;
        *((_WORD *)result + 8) = 2;
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)(result + 9), (UChar **)a3 + 1);
        double result = 0LL;
        v22[17] = 0LL;
        v22[18] = v23;
        v22[19] = 0LL;
        *a4 = v22;
        return result;
      }

uint64_t *sub_18099C9D0(uint64_t a1, UChar **a2, _DWORD *a3, uint64_t **a4, UErrorCode *a5)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  double result = (uint64_t *)sub_18099C520(a1, (uint64_t)a2);
  if (result)
  {
    unint64_t v10 = result;
    uint64_t v27 = a4;
    if (*(_DWORD *)result > 2u) {
      return sub_18099C618((uint64_t)result, a2, (unsigned int *)v10, v27, a5);
    }
    int v11 = a3[14];
    if (v11 == 1)
    {
      if (a3[4]) {
        goto LABEL_9;
      }
      uint64_t v25 = (UChar **)icu::UVector::elementAt((icu::UVector *)(a3 + 12), 0);
      icu::UnicodeString::operator=((UChar **)v10 + 1, v25);
      double result = (uint64_t *)sub_18095F4C0((uint64_t)a3);
      v10[10] = (uint64_t)result;
      int v26 = 6;
    }

    else
    {
      if (v11) {
        goto LABEL_9;
      }
      int v12 = a3[4];
      if (v12 != 1)
      {
        if (!v12)
        {
          result[11] = 0LL;
          *(_DWORD *)double result = 6;
          uint64_t v28 = "A";
          icu::UnicodeString::UnicodeString(v29, 1LL, &v28);
          icu::UnicodeString::operator=((icu::UnicodeString *)(v10 + 1), (icu::UnicodeString *)v29);
          double result = (uint64_t *)icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v29);
          return sub_18099C618((uint64_t)result, a2, (unsigned int *)v10, v27, a5);
        }

uint64_t *sub_18099CC58@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, _DWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  double result = icu::UMemory::operator new(a5, (icu::UMemory *)0x68, a2);
  if (result)
  {
    uint64_t v10 = (uint64_t)result;
    result[1] = (uint64_t)off_18971B688;
    *((_WORD *)result + 8) = 2;
    *(_DWORD *)double result = 3;
    result[10] = 0LL;
    result[11] = a2;
    uint64_t v11 = (*(uint64_t (**)(unint64_t))(*(void *)a2 + 104LL))(a2);
    return (uint64_t *)sub_18099CD00(a1, v11, v10, a3);
  }

  else
  {
    *a4 = 7;
  }

  return result;
}

void *sub_18099CD00(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  __int128 v30 = 0u;
  uint64_t v33 = 0LL;
  __int128 v32 = 0u;
  __int128 v31 = 0u;
  LOWORD(v3icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
  __int128 v25 = 0u;
  uint64_t v28 = 0LL;
  uint64_t v29 = (UChar *)off_18971B688;
  __int128 v27 = 0u;
  __int128 v26 = 0u;
  signed int v24 = (UChar *)off_18971B688;
  LOWORD(v25) = 2;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  uint64_t v23 = 0LL;
  __int128 v22 = 0u;
  unsigned int v19 = (UChar *)off_18971B688;
  LOWORD(v2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
  char v13 = 0;
  sub_18099FF54(a2, (icu::UnicodeString *)&v29, (uint64_t)&v24, (uint64_t)&v19, &v13);
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  uint64_t v18 = 0LL;
  __int128 v17 = 0u;
  unint64_t v14 = (UChar *)off_18971B688;
  LOWORD(v15) = 2;
  sub_1809A0214(&v29, (uint64_t)&v24, (uint64_t)&v19, (uint64_t)&v14);
  sub_18099D930(a1, &v14, (uint64_t)&v29, &v24, &v19, a3, a4, v7);
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v14);
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)&v19);
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v24);
  return icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)&v29);
}

uint64_t *sub_18099CE4C@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, _DWORD *a6@<X5>, uint64_t *a7@<X8>)
{
  double result = icu::UMemory::operator new(a7, (icu::UMemory *)0x68, a2);
  if (result)
  {
    result[1] = (uint64_t)off_18971B688;
    *((_WORD *)result + 8) = 2;
    *(_DWORD *)double result = 7;
    result[10] = 0LL;
    result[11] = a3;
    result[12] = a4;
    return (uint64_t *)sub_18099CD00(a1, a2, (uint64_t)result, a5);
  }

  else
  {
    *a6 = 7;
  }

  return result;
}

uint64_t *sub_18099CEEC@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, _DWORD *a7@<X6>, uint64_t *a8@<X8>)
{
  double result = icu::UMemory::operator new(a8, (icu::UMemory *)0x68, a2);
  if (result)
  {
    uint64_t v16 = (uint64_t)result;
    result[1] = (uint64_t)off_18971B688;
    __int128 v17 = (icu::UnicodeString *)(result + 1);
    *(_WORD *)(v16 + 16) = 2;
    *(void *)(v16 + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
    *(void *)(v16 + 88) = 0LL;
    *(_DWORD *)uint64_t v16 = a4 != 0;
    if (a5)
    {
      __int16 v18 = *(_WORD *)(a3 + 8);
      if ((v18 & 0x11) != 0)
      {
        unsigned int v19 = 0LL;
      }

      else if ((v18 & 2) != 0)
      {
        unsigned int v19 = (const UChar *)(a3 + 10);
      }

      else
      {
        unsigned int v19 = *(const UChar **)(a3 + 24);
      }

      __int128 v20 = v19;
      icu::UnicodeString::setTo(v17, 1, &v20, -1);
    }

    else
    {
      icu::UnicodeString::operator=((UChar **)v17, (UChar **)a3);
    }

    return (uint64_t *)sub_18099CD00(a1, a2, v16, a6);
  }

  else
  {
    *a7 = 7;
  }

  return result;
}

uint64_t *sub_18099CFF0@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  double result = icu::UMemory::operator new(a6, (icu::UMemory *)0x68, a2);
  if (result)
  {
    uint64_t v12 = (uint64_t)result;
    result[1] = (uint64_t)off_18971B688;
    char v13 = (icu::UnicodeString *)(result + 1);
    *(_WORD *)(v12 + 16) = 2;
    *(void *)(v12 + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 0LL;
    *(void *)(v12 + 88) = 0LL;
    *(_DWORD *)uint64_t v12 = 6;
    if (a4)
    {
      __int16 v14 = *(_WORD *)(a3 + 8);
      if ((v14 & 0x11) != 0)
      {
        __int128 v15 = 0LL;
      }

      else if ((v14 & 2) != 0)
      {
        __int128 v15 = (const UChar *)(a3 + 10);
      }

      else
      {
        __int128 v15 = *(const UChar **)(a3 + 24);
      }

      uint64_t v16 = v15;
      icu::UnicodeString::setTo(v13, 1, &v16, -1);
    }

    else
    {
      icu::UnicodeString::operator=((UChar **)v13, (UChar **)a3);
    }

    return (uint64_t *)sub_18099CD00(a1, a2, v12, a5);
  }

  return result;
}

void *sub_18099D0D4(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  __int128 v25 = 0u;
  uint64_t v28 = 0LL;
  __int128 v27 = 0u;
  __int128 v26 = 0u;
  LOWORD(v25) = 2;
  __int128 v20 = 0u;
  uint64_t v23 = 0LL;
  signed int v24 = (UChar *)off_18971B688;
  __int128 v22 = 0u;
  __int128 v21 = 0u;
  unsigned int v19 = (UChar *)off_18971B688;
  LOWORD(v2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  uint64_t v18 = 0LL;
  __int128 v17 = 0u;
  __int16 v14 = off_18971B688;
  LOWORD(v15) = 2;
  char v8 = 0;
  sub_18099FF54(a2, (icu::UnicodeString *)&v24, (uint64_t)&v19, (uint64_t)&v14, &v8);
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  uint64_t v13 = 0LL;
  __int128 v12 = 0u;
  int v9 = off_18971B688;
  LOWORD(v1icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
  sub_1809A0214(&v24, (uint64_t)&v19, (uint64_t)&v14, (uint64_t)&v9);
  uhash_remove(*(void *)(a1 + 8), &v9);
  sub_18099D21C(a1, (uint64_t)&v24, &v19, (uint64_t)&v14);
  uhash_remove(*(void *)(a1 + 224), &v9);
  icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)&v9);
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)&v14);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)&v19);
  return icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v24);
}

uint64_t sub_18099D21C(uint64_t a1, uint64_t a2, UChar **a3, uint64_t a4)
{
  int v17 = 0;
  uint64_t result = uhash_get(*(void *)(a1 + 96), a2);
  if (result)
  {
    int v9 = (uint64_t *)result;
    uint64_t result = uhash_geti(*(void *)result, (uint64_t)a3);
    if ((_DWORD)result)
    {
      int v10 = result;
      uint64_t result = icu::UVector::indexOf((icu::UVector *)(a1 + 184), a4, 0LL);
      if ((result & 0x80000000) == 0)
      {
        __int128 v12 = (uint64_t *)(1 << result);
        uint64_t v13 = *v9;
        unsigned int v14 = v10 & ~(_DWORD)v12;
        if (v14)
        {
          __int128 v15 = (icu::UnicodeString *)icu::UMemory::operator new(v12, (icu::UMemory *)0x40, v11);
          uint64_t v16 = (uint64_t)v15;
          if (v15) {
            icu::UnicodeString::UnicodeString(v15, a3);
          }
          return uhash_puti(v13, v16, v14, &v17);
        }

        else
        {
          uhash_remove(*v9, a3);
          uint64_t result = uhash_count(*v9);
          if (!(_DWORD)result) {
            return uhash_remove(*(void *)(a1 + 96), a2);
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_18099D318(uint64_t a1)
{
  return uhash_count(*(void *)(a1 + 224));
}

uint64_t *sub_18099D320(uint64_t a1, int a2)
{
  int v9 = -1;
  int v4 = v3 + 1;
  while (1)
  {
    uint64_t v5 = uhash_nextElement(*(uint64_t **)(a1 + 224), &v9);
    if (!v5) {
      break;
    }
    if (--v4 < 1) {
      return *(uint64_t **)(v5 + 16);
    }
  }

  unsigned __int8 v7 = atomic_load((unsigned __int8 *)&qword_18C535AF8);
  if ((v7 & 1) != 0) {
    return &qword_18C535AB8;
  }
  uint64_t v6 = &qword_18C535AB8;
  if (__cxa_guard_acquire(&qword_18C535AF8))
  {
    qword_18C535AB8 = (uint64_t)off_18971B688;
    word_18C535AC0 = 2;
    __cxa_atexit((void (*)(void *))icu::UnicodeString::~UnicodeString, &qword_18C535AB8, &dword_1807BC000);
    __cxa_guard_release(&qword_18C535AF8);
  }

  return v6;
}

uint64_t *sub_18099D404@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x88, a2);
  uint64_t v5 = v4;
  if (v4)
  {
    icu::StringEnumeration::StringEnumeration((uint64_t)v4);
    *uint64_t v5 = (uint64_t)&off_18972BDA8;
    *((_DWORD *)v5 + 29) = -1;
    *((_DWORD *)v5 + 3icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = uhash_count(*(void *)(a1 + 224));
    v5[16] = a1;
  }

  return v5;
}

uint64_t sub_18099D460(uint64_t a1)
{
  return uhash_count(*(void *)(a1 + 96));
}

UChar **sub_18099D468(uint64_t a1, int a2, UChar **this)
{
  int v10 = -1;
  if ((a2 & 0x80000000) == 0)
  {
    int v5 = a2 + 1;
    while (1)
    {
      uint64_t v6 = uhash_nextElement(*(uint64_t **)(a1 + 96), &v10);
      if (!v6) {
        break;
      }
      if (--v5 < 1)
      {
        icu::UnicodeString::operator=(this, *(UChar ***)(v6 + 16));
        return this;
      }
    }
  }

  unsigned int v7 = *((unsigned __int16 *)this + 4);
  if ((v7 & 1) != 0)
  {
    icu::UnicodeString::unBogus((uint64_t)this);
  }

  else
  {
    if ((v7 & 0x8000u) == 0) {
      unsigned int v8 = v7 >> 5;
    }
    else {
      unsigned int v8 = *((_DWORD *)this + 3);
    }
    if (v8) {
      *((_WORD *)this + 4) &= 0x1Fu;
    }
  }

  return this;
}

uint64_t *sub_18099D50C(uint64_t a1, uint64_t a2)
{
  uint64_t result = (uint64_t *)uhash_get(*(void *)(a1 + 96), a2);
  if (result) {
    return (uint64_t *)uhash_count(*result);
  }
  return result;
}

uint64_t sub_18099D534(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = uhash_get(*(void *)(a1 + 96), a3);
  if (v6)
  {
    int v13 = -1;
    if ((a2 & 0x80000000) == 0)
    {
      unsigned int v7 = (uint64_t **)v6;
      int v8 = a2 + 1;
      while (1)
      {
        uint64_t v9 = uhash_nextElement(*v7, &v13);
        if (!v9) {
          break;
        }
        if (--v8 < 1)
        {
          icu::UnicodeString::operator=((UChar **)a4, *(UChar ***)(v9 + 16));
          return a4;
        }
      }
    }
  }

  unsigned int v10 = *(unsigned __int16 *)(a4 + 8);
  if ((v10 & 1) != 0)
  {
    icu::UnicodeString::unBogus(a4);
  }

  else
  {
    if ((v10 & 0x8000u) == 0) {
      unsigned int v11 = v10 >> 5;
    }
    else {
      unsigned int v11 = *(_DWORD *)(a4 + 12);
    }
    if (v11) {
      *(_WORD *)(a4 + 8) &= 0x1Fu;
    }
  }

  return a4;
}

uint64_t sub_18099D5EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = uhash_get(*(void *)(a1 + 96), a2);
  if (result)
  {
    uint64_t result = uhash_geti(*(void *)result, a3);
    if ((_DWORD)result)
    {
      unsigned int v5 = result;
      LODWORD(result) = 0;
      do
      {
        uint64_t result = result + (v5 & 1);
        BOOL v6 = v5 > 1;
        v5 >>= 1;
      }

      while (v6);
    }
  }

  return result;
}

uint64_t sub_18099D644(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (uint64_t *)uhash_get(*(void *)(a1 + 96), a3);
  if (!v9) {
    goto LABEL_8;
  }
  unsigned int v10 = uhash_geti(*v9, a4);
  if (!v10) {
    goto LABEL_8;
  }
  unsigned int v11 = 0;
  int v12 = 0;
  while ((v10 & 1) == 0)
  {
LABEL_7:
    ++v11;
    BOOL v13 = v10 > 1;
    v10 >>= 1;
    if (!v13) {
      goto LABEL_8;
    }
  }

  if (v12 != a2)
  {
    ++v12;
    goto LABEL_7;
  }

  int v17 = (UChar **)icu::UVector::elementAt((icu::UVector *)(a1 + 184), v11);
  if (v17)
  {
    icu::UnicodeString::operator=((UChar **)a5, v17);
    return a5;
  }

void sub_18099D718(icu::StringEnumeration *a1)
{
}

uint64_t sub_18099D72C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 120);
}

UChar **sub_18099D734(uint64_t a1, int *a2)
{
  if (*a2 > 0) {
    return 0LL;
  }
  if (uhash_count(*(void *)(*(void *)(a1 + 128) + 224LL)) != *(_DWORD *)(a1 + 120))
  {
    unsigned int v2 = 0LL;
    *a2 = 25;
    return v2;
  }

  uint64_t Element = uhash_nextElement(*(uint64_t **)(*(void *)(a1 + 128) + 224LL), (int *)(a1 + 116));
  if (!Element) {
    return 0LL;
  }
  unsigned int v2 = (UChar **)(a1 + 8);
  icu::UnicodeString::operator=(v2, *(UChar ***)(Element + 16));
  return v2;
}

uint64_t sub_18099D7B8(uint64_t a1)
{
  *(_DWORD *)(a1 + 116) = -1;
  uint64_t result = uhash_count(*(void *)(*(void *)(a1 + 128) + 224LL));
  *(_DWORD *)(a1 + 12icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = result;
  return result;
}

void *sub_18099D7EC()
{
  return &unk_18C535B00;
}

void *sub_18099D7F8(uint64_t a1, UChar **a2, UChar **a3, UChar **a4, uint64_t a5, int a6)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  uint64_t v23 = 0LL;
  __int128 v22 = 0u;
  unsigned int v19 = (UChar *)off_18971B688;
  LOWORD(v2icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
  memset(v18, 0, sizeof(v18));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v18, a2);
  int v12 = WORD4(v18[0]) >> 5;
  if (SWORD4(v18[0]) < 0) {
    int v12 = HIDWORD(v18[0]);
  }
  if (!v12)
  {
    int v17 = (const UChar *)&unk_180A3D5F2;
    icu::UnicodeString::setTo((icu::UnicodeString *)v18, 1, &v17, 3);
  }

  sub_1809A0214(a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)&v19);
  sub_18099D930(a1, &v19, (uint64_t)v18, a3, a4, a5, a6, v13);
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v18);
  return icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v19);
}

uint64_t sub_18099D930@<X0>( uint64_t a1@<X0>, UChar **a2@<X1>, uint64_t a3@<X2>, UChar **a4@<X3>, UChar **a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t *a8@<X8>)
{
  int v24 = 0;
  uint64_t v15 = *(void *)(a1 + 8);
  uint64_t v16 = (icu::UnicodeString *)icu::UMemory::operator new(a8, (icu::UMemory *)0x40, (unint64_t)a2);
  uint64_t v17 = (uint64_t)v16;
  if (v16) {
    icu::UnicodeString::UnicodeString(v16, a2);
  }
  uhash_put(v15, v17, a6, &v24);
  if (a7)
  {
    sub_18099DA34(a1, a3, a4, a5);
    uint64_t result = uhash_containsKey(*(void *)(a1 + 224), (uint64_t)a2);
    if (!(_DWORD)result)
    {
      uint64_t v21 = *(void *)(a1 + 224);
      __int128 v22 = (icu::UnicodeString *)icu::UMemory::operator new(v20, (icu::UMemory *)0x40, v19);
      uint64_t v23 = (uint64_t)v22;
      if (v22) {
        icu::UnicodeString::UnicodeString(v22, a2);
      }
      return uhash_puti(v21, v23, 1u, &v24);
    }
  }

  else
  {
    sub_18099D21C(a1, a3, a4, (uint64_t)a5);
    return uhash_remove(*(void *)(a1 + 224), a2);
  }

  return result;
}

uint64_t sub_18099DA34(uint64_t a1, uint64_t a2, UChar **a3, UChar **a4)
{
  UErrorCode v39 = U_ZERO_ERROR;
  int v8 = (uint64_t *)uhash_get(*(void *)(a1 + 96), a2);
  if (!v8)
  {
    unsigned int v17 = *(unsigned __int16 *)(a2 + 8);
    int v18 = (__int16)v17;
    int32_t v19 = v17 >> 5;
    if (v18 >= 0) {
      int32_t v20 = v19;
    }
    else {
      int32_t v20 = *(_DWORD *)(a2 + 12);
    }
    int v21 = icu::UnicodeString::doCompare(a2, 0, v20, (uint64_t)&unk_180A3D5F2, 0, 3);
    signed int v38 = &unk_180A3D5F2;
    uint64_t v23 = (uint64_t)&v38;
    if (v21)
    {
      unsigned int v24 = *(unsigned __int16 *)(a2 + 8);
      int v25 = (__int16)v24;
      int32_t v26 = v24 >> 5;
      if (v25 >= 0) {
        int32_t v27 = v26;
      }
      else {
        int32_t v27 = *(_DWORD *)(a2 + 12);
      }
      int v28 = icu::UnicodeString::doCompare(a2, 0, v27, (uint64_t)&unk_180A3D5FA, 0, 3);
      uint64_t v23 = 23LL;
      if (v28) {
        int v29 = 3;
      }
      else {
        int v29 = 23;
      }
    }

    else
    {
      int v29 = 102;
    }

    uint64_t result = (uint64_t)icu::UMemory::operator new((uint64_t *)v23, (icu::UMemory *)0x58, v22);
    if (!result) {
      return result;
    }
    int v8 = (uint64_t *)result;
    *(void *)uint64_t result = 0LL;
    uint64_t v33 = result + 8;
    uint64_t result = (uint64_t)uhash_initSize( (int32x2_t *)(result + 8),  (uint64_t)uhash_hashCaselessUnicodeString,  (uint64_t)uhash_compareCaselessUnicodeString,  0LL,  v29,  (int *)&v39);
    if (v39 > U_ZERO_ERROR) {
      return result;
    }
    *int v8 = v33;
    uint64_t result = uhash_setKeyDeleter(v33, (uint64_t)uprv_deleteUObject);
    if (v39 > U_ZERO_ERROR) {
      return result;
    }
    uint64_t v35 = *(void *)(a1 + 96);
    uint64_t v36 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)v39, (icu::UMemory *)0x40, v34);
    uint64_t v37 = (uint64_t)v36;
    if (v36) {
      icu::UnicodeString::UnicodeString(v36, (UChar **)a2);
    }
    uhash_put(v35, v37, (uint64_t)v8, (int *)&v39);
  }

  uint64_t result = icu::UVector::indexOf((icu::UVector *)(a1 + 184), (uint64_t)a4, 0LL);
  if ((result & 0x80000000) == 0
    || (__int128 v30 = (uint64_t *)*(unsigned int *)(a1 + 192), (int)v30 <= 30)
    && (uint64_t result = (uint64_t)icu::UMemory::operator new(v30, (icu::UMemory *)0x40, v10)) != 0
    && (__int128 v31 = (void *)result,
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)result, a4),
        uint64_t result = icu::UVector::adoptElement((icu::UVector *)(a1 + 184), v31, &v39),
        v39 <= U_ZERO_ERROR)
    && (v32 = *(_DWORD *)(a1 + 192), uint64_t result = (v32 - 1), v32 >= 1))
  {
    unsigned int v11 = uhash_geti(*v8, (uint64_t)a3) | (1 << result);
    uint64_t v12 = *v8;
    uint64_t v15 = (icu::UnicodeString *)icu::UMemory::operator new(v14, (icu::UMemory *)0x40, v13);
    uint64_t v16 = (uint64_t)v15;
    if (v15) {
      icu::UnicodeString::UnicodeString(v15, a3);
    }
    return uhash_puti(v12, v16, v11, (int *)&v39);
  }

  return result;
}

uint64_t sub_18099DC84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  uint64_t v12 = 0LL;
  __int128 v11 = 0u;
  int v8 = off_18971B688;
  LOWORD(v9) = 2;
  sub_1809A0214((UChar **)(a2 + 72), a3 + 72, a4, (uint64_t)&v8);
  uint64_t v5 = uhash_get(*(void *)(a1 + 8), (uint64_t)&v8);
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v8);
  return v5;
}

uint64_t *sub_18099DD30(uint64_t a1, uint64_t a2, uint64_t a3, UChar **a4)
{
  uint64_t v6 = a2;
  if (*(_BYTE *)(a2 + 264))
  {
    uint64_t v8 = a2;
    a2 = a3;
    uint64_t v9 = (uint64_t)a4;
    int v10 = 0;
  }

  else
  {
    if (!*(_BYTE *)(a3 + 264)) {
      return 0LL;
    }
    uint64_t v8 = a3;
    uint64_t v9 = (uint64_t)a4;
    int v10 = 1;
  }

  __int128 v11 = sub_18099DDD0(v8, a2, v9, v10);
  if (v11) {
    sub_18099D7F8(a1, (UChar **)(v6 + 8), (UChar **)(a3 + 8), a4, (uint64_t)v11, 0);
  }
  return v11;
}

uint64_t *sub_18099DDD0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v67 = *MEMORY[0x1895F89C0];
  __int128 v63 = 0u;
  uint64_t v66 = 0LL;
  __int128 v65 = 0u;
  __int128 v64 = 0u;
  uint64_t v61 = 0LL;
  __int128 v62 = off_18971B688;
  LOWORD(v63) = 2;
  if (a4) {
    uint64_t v6 = &unk_180A3D622;
  }
  else {
    uint64_t v6 = &unk_180A3D602;
  }
  unsigned int v7 = (UChar **)(a2 + 72);
  __int128 v58 = 0uLL;
  unint64_t v45 = (icu::UnicodeString *)(a1 + 72);
  __int128 v60 = 0uLL;
  __int128 v59 = 0uLL;
  uint64_t v57 = (UChar *)off_18971B688;
  LOWORD(v58) = 2;
  LOBYTE(v8) = 1;
  while (1)
  {
    char v9 = (char)v8;
    if ((v63 & 1) != 0)
    {
      icu::UnicodeString::unBogus((uint64_t)&v62);
    }

    else
    {
      if ((v63 & 0x8000u) == 0LL) {
        int v10 = (unsigned __int16)v63 >> 5;
      }
      else {
        int v10 = DWORD1(v63);
      }
      if (v10)
      {
        LOBYTE(v63) = v63 & 0x1F;
        LOWORD(v63) = v63;
      }
    }

    if ((v9 & 1) != 0) {
      icu::UnicodeString::doAppend((uint64_t)&v62, (uint64_t)v6, 0, 0xFFFFFFFFLL);
    }
    else {
      icu::UnicodeString::doAppend((uint64_t)&v62, (uint64_t)&unk_180A3D646, 0, 0xFFFFFFFFLL);
    }
    memset(v56, 0, sizeof(v56));
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v56, v7);
    icu::Locale::Locale((icu::Locale *)&v52, "", 0LL, 0LL, 0LL);
    __int128 v11 = icu::UnicodeString::toUpper((const UChar **)v56, (const icu::Locale *)&v52);
    unsigned int v12 = *((unsigned __int16 *)v11 + 4);
    int v13 = (__int16)v12;
    unsigned int v14 = v12 >> 5;
    if (v13 >= 0) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = *((unsigned int *)v11 + 3);
    }
    icu::UnicodeString::doAppend((uint64_t)&v62, v11, 0, v15);
    icu::Locale::~Locale((icu::Locale *)&v52);
    UErrorCode v47 = U_ZERO_ERROR;
    memset(v46, 0, sizeof(v46));
    uint64_t v16 = *(icu::ResourceBundle **)(a1 + 272);
    uint64_t v52 = (char *)&v54 + 1;
    int v53 = 40;
    __int16 v54 = 0;
    int v55 = 0;
    appended = icu::CharString::appendInvariantChars((icu::CharString *)&v52, (const icu::UnicodeString *)&v62, &v47);
    icu::ResourceBundle::get(v16, *(const char **)appended, &v47, v46);
    if ((_BYTE)v54) {
      uprv_free(v52);
    }
    if (v47 > U_ZERO_ERROR || v47 == U_USING_DEFAULT_WARNING) {
      goto LABEL_49;
    }
    if ((BYTE8(v56[0]) & 1) != 0)
    {
      icu::UnicodeString::unBogus((uint64_t)v56);
    }

    else
    {
      if ((SWORD4(v56[0]) & 0x8000u) == 0) {
        int v18 = WORD4(v56[0]) >> 5;
      }
      else {
        int v18 = HIDWORD(v56[0]);
      }
      if (v18)
      {
        BYTE8(v56[0]) &= 0x1Fu;
        WORD4(v56[0]) = BYTE8(v56[0]);
      }
    }

    Locale = icu::ResourceBundle::getLocale((icu::ResourceBundle *)v46);
    inited = icu::LocaleUtility::initNameFromLocale((icu::LocaleUtility *)Locale, (const icu::Locale *)v56, v20);
    unsigned int v22 = *(unsigned __int16 *)(a1 + 80);
    if ((v22 & 1) != 0)
    {
      if ((*((_WORD *)inited + 4) & 1) == 0) {
        goto LABEL_49;
      }
    }

    else
    {
      int v23 = (__int16)v22;
      int v24 = v22 >> 5;
      if (v23 >= 0) {
        int v25 = v24;
      }
      else {
        int v25 = *(_DWORD *)(a1 + 84);
      }
      unsigned int v26 = *((unsigned __int16 *)inited + 4);
      if ((v26 & 0x8000u) == 0) {
        unsigned int v27 = v26 >> 5;
      }
      else {
        unsigned int v27 = *((_DWORD *)inited + 3);
      }
      if ((v26 & 1) != 0 || v25 != v27 || !icu::UnicodeString::doEquals(v45, inited, v25)) {
        goto LABEL_49;
      }
    }

    unsigned int v28 = *(unsigned __int16 *)(a3 + 8);
    int v29 = (__int16)v28;
    unsigned int v30 = v28 >> 5;
    if (v29 < 0) {
      unsigned int v30 = *(_DWORD *)(a3 + 12);
    }
    UErrorCode v47 = U_ZERO_ERROR;
    if (v30) {
      break;
    }
    icu::ResourceBundle::getStringEx((icu::ResourceBundle *)v46, &v47, 1, (uint64_t)&v52);
    icu::UnicodeString::operator=((icu::UnicodeString *)&v57, (icu::UnicodeString *)&v52);
    icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)&v52);
    if (v47 < U_ILLEGAL_ARGUMENT_ERROR) {
      goto LABEL_52;
    }
LABEL_49:
    icu::ResourceBundle::~ResourceBundle((icu::ResourceBundle *)v46);
    icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)v56);
    uint64_t v8 = 0LL;
    if ((v9 & 1) == 0)
    {
      uint64_t v35 = 0LL;
      goto LABEL_51;
    }
  }

  unint64_t v48 = (char *)&v50 + 1;
  int v49 = 40;
  __int16 v50 = 0;
  int v51 = 0;
  __int128 v31 = icu::CharString::appendInvariantChars((icu::CharString *)&v48, (const icu::UnicodeString *)a3, &v47);
  icu::ResourceBundle::getStringEx((icu::ResourceBundle *)v46, *(const char **)v31, &v47, (uint64_t)&v52);
  icu::UnicodeString::operator=((icu::UnicodeString *)&v57, (icu::UnicodeString *)&v52);
  icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)&v52);
  if ((_BYTE)v50) {
    uprv_free(v48);
  }
  if (v47 > U_ZERO_ERROR) {
    goto LABEL_49;
  }
LABEL_52:
  icu::ResourceBundle::~ResourceBundle((icu::ResourceBundle *)v46);
  icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)v56);
  unsigned int v41 = icu::UMemory::operator new(v40, (icu::UMemory *)0x68, v39);
  uint64_t v35 = v41;
  if (v41)
  {
    v41[1] = (uint64_t)off_18971B688;
    uint64_t v42 = (UChar **)(v41 + 1);
    *((_WORD *)v35 + 8) = 2;
    v35[10] = 0LL;
    v35[11] = 0LL;
    if ((v9 & 1) != 0) {
      int v43 = 0;
    }
    else {
      int v43 = a4;
    }
    *(_DWORD *)uint64_t v35 = 2;
    icu::UnicodeString::operator=(v42, &v57);
    *((_DWORD *)v35 + 18) = v43;
  }

uint64_t sub_18099E214(uint64_t a1, UChar **a2, UChar **a3, uint64_t a4)
{
  uint64_t v47 = *MEMORY[0x1895F89C0];
  uint64_t v46 = 0LL;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v37 = 0u;
  memset(v36, 0, sizeof(v36));
  sub_18099BD5C((uint64_t)v36, a2);
  uint64_t v35 = 0LL;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v26 = 0u;
  memset(v25, 0, sizeof(v25));
  sub_18099BD5C((uint64_t)v25, a3);
  __int128 v21 = 0u;
  uint64_t v24 = 0LL;
  __int128 v23 = 0u;
  __int128 v22 = 0u;
  int32_t v20 = off_18971B688;
  LOWORD(v2icu::number::impl::MutablePatternModifier::prepareAffix(this, 1) = 2;
  sub_1809A0214(a2, (uint64_t)a3, a4, (uint64_t)&v20);
  uint64_t v9 = uhash_get(*(void *)(a1 + 8), (uint64_t)&v20);
  if (!v9)
  {
    unsigned int v11 = *(unsigned __int16 *)(a4 + 8);
    int v12 = (__int16)v11;
    unsigned int v13 = v11 >> 5;
    if (v12 < 0) {
      unsigned int v13 = *(_DWORD *)(a4 + 12);
    }
    if (!v13
      || (uint64_t v9 = sub_18099DC84(a1, (uint64_t)v36, (uint64_t)v25, a4)) == 0
      && (uint64_t v9 = (uint64_t)sub_18099DD30(a1, (uint64_t)v36, (uint64_t)v25, (UChar **)a4)) == 0)
    {
      sub_18099BFF4((uint64_t)v36);
      int v18 = (UChar *)off_18971B688;
      __int16 v19 = 2;
      uint64_t v9 = sub_18099DC84(a1, (uint64_t)v36, (uint64_t)v25, (uint64_t)&v18);
      icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v18);
      while (!v9)
      {
        int v18 = (UChar *)off_18971B688;
        __int16 v19 = 2;
        uint64_t v9 = (uint64_t)sub_18099DD30(a1, (uint64_t)v36, (uint64_t)v25, &v18);
        icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v18);
        if (v9) {
          break;
        }
        int v16 = (unsigned __int16)v38 >> 5;
        if ((v38 & 0x8000u) != 0LL) {
          int v16 = DWORD1(v38);
        }
        if (v16)
        {
          icu::UnicodeString::operator=((UChar **)&v36[4] + 1, (UChar **)&v37 + 1);
          BYTE8(v45) = BYTE9(v45);
          sub_18099C0FC((uint64_t)v36);
        }

        else
        {
          LODWORD(v8) = (unsigned __int16)v27 >> 5;
          if ((v27 & 0x8000u) == 0LL) {
            unint64_t v8 = v8;
          }
          else {
            unint64_t v8 = DWORD1(v27);
          }
          if (!(_DWORD)v8)
          {
            uint64_t v9 = 0LL;
            break;
          }

          icu::UnicodeString::operator=((UChar **)&v25[4] + 1, (UChar **)&v26 + 1);
          BYTE8(v34) = BYTE9(v34);
          sub_18099C0FC((uint64_t)v25);
          sub_18099BFF4((uint64_t)v36);
        }

        int v18 = (UChar *)off_18971B688;
        __int16 v19 = 2;
        uint64_t v9 = sub_18099DC84(a1, (uint64_t)v36, (uint64_t)v25, (uint64_t)&v18);
        icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v18);
      }
    }
  }

  icu::UnicodeString::~UnicodeString((void *)v8, (icu::UnicodeString *)&v20);
  sub_18099C0A8(v25);
  sub_18099C0A8(v36);
  return v9;
}

uint64_t sub_18099E4F8(uint64_t a1, UChar **a2, UChar **a3, UChar **a4, char a5, UChar **a6)
{
  *(void *)(a1 + 8) = off_18971B688;
  *(_WORD *)(a1 + 16) = 2;
  *(void *)(a1 + 72) = off_18971B688;
  *(void *)(a1 + 136) = off_18971B688;
  *(_WORD *)(a1 + 8icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = 2;
  *(_WORD *)(a1 + 144) = 2;
  *(void *)(a1 + 20icu::number::impl::MutablePatternModifier::prepareAffix(this, 0) = off_18971B688;
  *(_WORD *)(a1 + 208) = 2;
  icu::UnicodeString::operator=((UChar **)(a1 + 8), a2);
  icu::UnicodeString::operator=((UChar **)(a1 + 72), a3);
  icu::UnicodeString::operator=((UChar **)(a1 + 136), a4);
  *(_BYTE *)(a1 + 264) = a5;
  icu::UnicodeString::operator=((UChar **)(a1 + 200), a6);
  return a1;
}

icu::Transliterator *sub_18099E5A8(uint64_t a1, uint64_t a2, const icu::UnicodeString *a3)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if ((*(__int16 *)(a1 + 80) & 0x80000000) == 0)
  {
LABEL_6:
    unsigned int v13 = &unk_180A3D68E;
    icu::UnicodeString::UnicodeString(v14, 1LL, &v13);
    Basicuint64_t Instance = (icu::Transliterator *)icu::Transliterator::createBasicInstance( (icu::Transliterator *)v14,  (const icu::UnicodeString *)(a1 + 8),  v6);
    icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v14);
    if (!BasicInstance) {
      return BasicInstance;
    }
    goto LABEL_7;
  }

  if (!*(_DWORD *)(a1 + 84)) {
    goto LABEL_6;
  }
LABEL_3:
  Basicuint64_t Instance = (icu::Transliterator *)icu::Transliterator::createBasicInstance( (icu::Transliterator *)(a1 + 72),  (const icu::UnicodeString *)(a1 + 8),  a3);
  if (!BasicInstance) {
    return BasicInstance;
  }
LABEL_7:
  if (*(__int16 *)(a1 + 144) < 0)
  {
    unint64_t v8 = (uint64_t *)*(unsigned int *)(a1 + 148);
    if (!(_DWORD)v8) {
      return BasicInstance;
    }
  }

  else
  {
    unint64_t v8 = (uint64_t *)(*(unsigned __int16 *)(a1 + 144) >> 5);
    if (!(_DWORD)v8) {
      return BasicInstance;
    }
  }

  v14[0] = U_ZERO_ERROR;
  uint64_t v9 = (icu::UnicodeSet *)icu::UMemory::operator new(v8, (icu::UMemory *)0xC8, v4);
  int v10 = v9;
  if (v9
    && (icu::UnicodeSet::UnicodeSet(v9, (const icu::UnicodeString *)(a1 + 136), v14), v14[0] >= U_ILLEGAL_ARGUMENT_ERROR))
  {
    icu::UnicodeSet::~UnicodeSet(v10);
    icu::UMemory::operator delete(v11);
  }

  else
  {
    icu::Transliterator::adoptFilter(BasicInstance, v10);
  }

  return BasicInstance;
}